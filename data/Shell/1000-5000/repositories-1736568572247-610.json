{
  "metadata": {
    "timestamp": 1736568572247,
    "page": 610,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYxOQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "tarjoilija/zgen",
      "stars": 1503,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0498046875,
          "content": "*\n!.gitignore\n!LICENSE\n!README.md\n!_zgen\n!zgen.zsh\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.2763671875,
          "content": "Copyright (c) 2014, Eero-Antero Säisä\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.568359375,
          "content": "## zgen\n\nA lightweight plugin manager for Zsh inspired by [Antigen](https://github.com/zsh-users/antigen). Keep your `.zshrc` clean and simple.\n\nZgen provides you a few simple commands for managing plugins. It installs your plugins and generates a static init script that will source them for you every time you run the shell. We do this to save some startup time by not having to execute time consuming logic (plugin checking, updates, etc). This means that you have to manually check for updates (`zgen update`) and reset the init script (`zgen reset`) whenever you add or remove plugins.\n\nThe motive for creating zgen was to have plugins quickly installed on a new machine without getting the startup lag that Antigen used to give me.\n\n## Installation\n\nClone the zgen repository\n\n    git clone https://github.com/tarjoilija/zgen.git \"${HOME}/.zgen\"\n\nEdit your .zshrc file to load zgen\n\n    # load zgen\n    source \"${HOME}/.zgen/zgen.zsh\"\n\nPlace the following code after the one above to load oh-my-zsh for example, see Usage for more details\n\n    # if the init script doesn't exist\n    if ! zgen saved; then\n\n      # specify plugins here\n      zgen oh-my-zsh\n\n      # generate the init script from plugins above\n      zgen save\n    fi\n\n## Usage\n\n### oh-my-zsh\n\nThis is a handy shortcut for installing oh-my-zsh plugins. They can be loaded using `zgen load` too with a significantly longer format.\n#### Load oh-my-zsh base\nIt's a good idea to load the base components before specifying any plugins.\n\n    zgen oh-my-zsh\n\n#### Load oh-my-zsh plugins\n\n    zgen oh-my-zsh <location>\n\n#### Example\n\n    zgen oh-my-zsh\n    zgen oh-my-zsh plugins/git\n    zgen oh-my-zsh plugins/sudo\n    zgen oh-my-zsh plugins/command-not-found\n    zgen oh-my-zsh themes/arrow\n\n### Prezto\n\n#### Load Prezto\n\n    zgen prezto\n\nThis will create a symlink in the `ZSHDOT` or `HOME` directory. This is needed by prezto.\n\n#### Load prezto plugins\n\n    zgen prezto <modulename>\n\nThis uses the Prezto method for loading modules.\n\n#### Load a repo as Prezto plugins\n\n    zgen pmodule <reponame> <branch>\n\nThis uses the Prezto method for loading the module. It creates a symlink and calls `pmodule`.\n\n#### Set prezto options\n\n    zgen prezto <modulename> <option> <value(s)>\n\nThis must be used before the module is loaded. Or if the default modules should be loaded (default) these settings must be done before the `zgen prezto` command. `module` is prepended if the name does not start with `module`, `prezto` or a `*`, `prezto` is prepended if it does not start with `prezto`.\n\n### General zgen functions\n\n#### Load plugins and completions\n\n    zgen load <repo> [location] [branch]\n\nZgen tries to source any scripts from `location` using a \"very smart matching logic\". If it fails to find any, it will appends `location` to `$fpath`.\n\n- `repo`\n    - github `user/repository` or path to a repository\n    - currently supported formats for a repository path:\n        - any local repository\n        - `git://*`\n        - `https://*`\n        - `http://*`\n        - `ssh://*`\n        - `git@*:*/*`\n- `location`\n    - relative path to a script/folder\n    - useful for repositories that don't have proper plugin support like `zsh-users/zsh-completions`\n- `branch`\n    - specifies the git branch to use\n\n#### Bulk load plugins\n\n    zgen loadall <plugins>\n\nPlease see example `.zshrc` for usage.\n\n#### Generate init script\n    zgen save\n\nIt is recommended to save the plugin sourcing part to a static init script so we don't have to go through the time consuming installing/updating part every time we start the shell (or source .zshrc)\n\n#### Remove init script\n    zgen reset\n\nRemoves the init script so it will be created next time you start the shell. You must run this every time you add or remove plugins to trigger the changes.\n\nThis will not remove the plugins physically from disk.\n\n#### Check for an init script\n    zgen saved\nReturns 0 if an init script exists.\n\n#### Update all plugins and reset\n    zgen update\n\nPulls updates on every plugin repository and removes the init script.\n\n#### Update zgen\n    zgen selfupdate\n\n#### Watch files for modifications\nYou can automate the process of running `zgen reset` by specifying a list of files to `ZGEN_RESET_ON_CHANGE`. These files will be checked and if a change is detected zgen reset is called.\n\n```zsh\nZGEN_RESET_ON_CHANGE=(${HOME}/.zshrc ${HOME}/.zshrc.local)\n```\n\n## Notes\nBe aware that `zgen` tries to handle [`compinit`][compinit] for you to allow for the fastest possible initialization times. However, this functionality will be disabled if you've already called `compinit` yourself before sourcing `zgen.zsh`. Alternatively, you can disable it yourself by disabling `$ZGEN_AUTOLOAD_COMPINIT`.\n\n  [compinit]: <http://zsh.sourceforge.net/Doc/Release/Completion-System.html#Use-of-compinit> \"Zsh manual 20.2.1: Use of compinit\"\n\n## Example .zshrc\n\n```zsh\n# load zgen\nsource \"${HOME}/.zgen/zgen.zsh\"\n\n# if the init scipt doesn't exist\nif ! zgen saved; then\n    echo \"Creating a zgen save\"\n\n    zgen oh-my-zsh\n\n    # plugins\n    zgen oh-my-zsh plugins/git\n    zgen oh-my-zsh plugins/sudo\n    zgen oh-my-zsh plugins/command-not-found\n    zgen load zsh-users/zsh-syntax-highlighting\n    zgen load /path/to/super-secret-private-plugin\n\n    # bulk load\n    zgen loadall <<EOPLUGINS\n        zsh-users/zsh-history-substring-search\n        /path/to/local/plugin\nEOPLUGINS\n    # ^ can't indent this EOPLUGINS\n\n    # completions\n    zgen load zsh-users/zsh-completions src\n\n    # theme\n    zgen oh-my-zsh themes/arrow\n\n    # save all to init script\n    zgen save\nfi\n```\n\n### Example .zshrc for prezto use\nHere is a partial example how to work with prezto\n\n```zsh\n...\n    echo \"Creating a zgen save\"\n\n    # prezto options\n    zgen prezto editor key-bindings 'emacs'\n    zgen prezto prompt theme 'sorin'\n\n    # prezto and modules\n    zgen prezto\n    zgen prezto git\n    zgen prezto command-not-found\n    zgen prezto syntax-highlighting\n\n    # plugins\n    zgen load /path/to/super-secret-private-plugin\n....\n\n```\n\n## Other resources\n\nThe [awesome-zsh-plugins](https://github.com/unixorn/awesome-zsh-plugins) list contains many zgen-compatible zsh plugins & themes that you may find useful.\n\nThere's a quickstart kit for using zsh and zgen at [zsh-quickstart-kit](https://github.com/unixorn/zsh-quickstart-kit) that guides you through setting up zgen and includes a sampler of useful plugins.\n\nThe [autoupdate-zgen](https://github.com/unixorn/autoupdate-zgen) plugin will enable your zgen to periodically update itself and your list of plugins.\n\n## Alternatives\n\n- [antigen](https://github.com/zsh-users/antigen) - popular and mature\n- [zplug](https://github.com/b4b4r07/zplug) - well performing and has a fancy UI\n"
        },
        {
          "name": "_zgen",
          "type": "blob",
          "size": 0.9267578125,
          "content": "#compdef zgen\n# ------------------------------------------------------------------------------\n# Description\n# -----------\n#\n#  Completion script for Zgen (https://github.com/tarjoilija/zgen)\n#\n# ------------------------------------------------------------------------------\n# Authors\n# -------\n#\n#  * Martin Zeman (https://github.com/N4M3Z)\n#\n# ------------------------------------------------------------------------------\n\nlocal -a _zgen_commands\n_zgen_commands=(\n    \"clone:clone plugin from repository\"\n    \"completions:deprecated, please use load instead\"\n    \"list:print init.zsh\"\n    \"load:clone and load plugin\"\n    \"oh-my-zsh:load oh-my-zsh base\"\n    \"prezto:load prezto base\"\n    \"reset:delete the init.zsh script\"\n    \"save:check for init.zsh script\"\n    \"selfupdate:update zgen framework from repository\"\n    \"update:update all repositories and remove the init script\"\n)\n\n_describe -t commands \"zgen subcommand\" _zgen_commands\nreturn 0\n"
        },
        {
          "name": "zgen.zsh",
          "type": "blob",
          "size": 13.046875,
          "content": "#!/bin/zsh\n# vim: set ft=zsh fenc=utf-8 noai ts=8 et sts=4 sw=0 tw=80 nowrap :\nlocal ZGEN_SOURCE=\"$0:A:h\"\n\n-zgputs() { printf %s\\\\n \"$@\" ;}\n-zgpute() { printf %s\\\\n \"-- zgen: $*\" >&2 ;}\n\n-zginit() { -zgputs \"$*\" >> \"${ZGEN_INIT}\" ;}\n\n\nif [[ -z \"${ZGEN_DIR}\" ]]; then\n    ZGEN_DIR=\"${HOME}/.zgen\"\nfi\n\nif [[ -z \"${ZGEN_INIT}\" ]]; then\n    ZGEN_INIT=\"${ZGEN_DIR}/init.zsh\"\nfi\n\n# The user can explicitly disable Zgen attempting to invoke `compinit`, or it\n# will be automatically disabled if `compinit` appears to have already been\n# invoked.\nif [[ -z \"${ZGEN_AUTOLOAD_COMPINIT}\" && -z \"${(t)_comps}\" ]]; then\n    ZGEN_AUTOLOAD_COMPINIT=1\nfi\n\nif [[ -n \"${ZGEN_CUSTOM_COMPDUMP}\" ]]; then\n    ZGEN_COMPINIT_DIR_FLAG=\"-d ${(q)ZGEN_CUSTOM_COMPDUMP}\"\n    ZGEN_COMPINIT_FLAGS=\"${ZGEN_COMPINIT_DIR_FLAG} ${ZGEN_COMPINIT_FLAGS}\"\nfi\n\nif [[ -z \"${ZGEN_LOADED}\" ]]; then\n    ZGEN_LOADED=()\nfi\n\nif [[ -z \"${ZGEN_PREZTO_OPTIONS}\" ]]; then\n    ZGEN_PREZTO_OPTIONS=()\nfi\n\nif [[ -z \"${ZGEN_PREZTO_LOAD}\" ]]; then\n    ZGEN_PREZTO_LOAD=()\nfi\n\nif [[ -z \"${ZGEN_COMPLETIONS}\" ]]; then\n    ZGEN_COMPLETIONS=()\nfi\n\nif [[ -z \"${ZGEN_USE_PREZTO}\" ]]; then\n    ZGEN_USE_PREZTO=0\nfi\n\nif [[ -z \"${ZGEN_PREZTO_LOAD_DEFAULT}\" ]]; then\n    ZGEN_PREZTO_LOAD_DEFAULT=1\nfi\n\nif [[ -z \"${ZGEN_OH_MY_ZSH_REPO}\" ]]; then\n    ZGEN_OH_MY_ZSH_REPO=robbyrussell\nfi\n\nif [[ \"${ZGEN_OH_MY_ZSH_REPO}\" != */* ]]; then\n    ZGEN_OH_MY_ZSH_REPO=\"${ZGEN_OH_MY_ZSH_REPO}/oh-my-zsh\"\nfi\n\nif [[ -z \"${ZGEN_OH_MY_ZSH_BRANCH}\" ]]; then\n    ZGEN_OH_MY_ZSH_BRANCH=master\nfi\n\nif [[ -z \"${ZGEN_PREZTO_REPO}\" ]]; then\n    ZGEN_PREZTO_REPO=sorin-ionescu\nfi\n\nif [[ \"${ZGEN_PREZTO_REPO}\" != */* ]]; then\n    ZGEN_PREZTO_REPO=\"${ZGEN_PREZTO_REPO}/prezto\"\nfi\n\nif [[ -z \"${ZGEN_PREZTO_BRANCH}\" ]]; then\n    ZGEN_PREZTO_BRANCH=master\nfi\n\n-zgen-encode-url () {\n    # Remove characters from a url that don't work well in a filename.\n    # Inspired by -anti-get-clone-dir() method from antigen.\n    local url=\"${1}\"\n    url=\"${url//\\//-SLASH-}\"\n    url=\"${url//\\:/-COLON-}\"\n    url=\"${url//\\|/-PIPE-}\"\n    url=\"${url//~/-TILDE-}\"\n    -zgputs \"$url\"\n}\n\n-zgen-get-clone-dir() {\n    local repo=\"${1}\"\n    local branch=\"${2:-master}\"\n\n    if [[ -e \"${repo}/.git\" ]]; then\n        -zgputs \"${ZGEN_DIR}/local/${repo:t}-${branch}\"\n    else\n        # Repo directory will be location/reponame\n        local reponame=\"${repo:t}\"\n        # Need to encode incase it is a full url with characters that don't\n        # work well in a filename.\n        local location=\"$(-zgen-encode-url ${repo:h})\"\n        repo=\"${location}/${reponame}\"\n        -zgputs \"${ZGEN_DIR}/${repo}-${branch}\"\n    fi\n}\n\n-zgen-get-clone-url() {\n    local repo=\"${1}\"\n\n    if [[ -e \"${repo}/.git\" ]]; then\n        -zgputs \"${repo}\"\n    else\n        # Sourced from antigen url resolution logic.\n        # https://github.com/zsh-users/antigen/blob/master/antigen.zsh\n        # Expand short github url syntax: `username/reponame`.\n        if [[ $repo != git://* &&\n              $repo != https://* &&\n              $repo != http://* &&\n              $repo != ssh://* &&\n              $repo != git@*:*/*\n              ]]; then\n            repo=\"https://github.com/${repo%.git}.git\"\n        fi\n        -zgputs \"${repo}\"\n    fi\n}\n\nzgen-clone() {\n    local repo=\"${1}\"\n    local branch=\"${2:-master}\"\n    local url=\"$(-zgen-get-clone-url ${repo})\"\n    local dir=\"$(-zgen-get-clone-dir ${repo} ${branch})\"\n\n    if [[ ! -d \"${dir}\" ]]; then\n        mkdir -p \"${dir}\"\n        git clone --depth=1 --recursive -b \"${branch}\" \"${url}\" \"${dir}\"\n    fi\n}\n\n-zgen-add-to-fpath() {\n    local completion_path=\"${1}\"\n\n    # Add the directory to ZGEN_COMPLETIONS array if not present\n    if [[ ! \"${ZGEN_COMPLETIONS[@]}\" =~ ${completion_path} ]]; then\n        ZGEN_COMPLETIONS+=(\"${completion_path}\")\n    fi\n}\n\n-zgen-source() {\n    local file=\"${1}\"\n\n    if [[ ! \"${ZGEN_LOADED[@]}\" =~ \"${file}\" ]]; then\n        ZGEN_LOADED+=(\"${file}\")\n        source \"${file}\"\n\n        completion_path=\"${file:h}\"\n\n        -zgen-add-to-fpath \"${completion_path}\"\n    fi\n}\n\n-zgen-prezto-option(){\n    local module=${1}\n    shift\n    local option=${1}\n    shift\n    local params\n    params=${@}\n    if [[ ${module} =~ \"^:\" ]]; then\n        module=${module[1,]}\n    fi\n    if [[ ! $module =~ \"^(\\*|module|prezto:module):\" ]]; then\n        module=\"module:$module\"\n    fi\n    if [[ ! $module =~ \"^(prezto):\" ]]; then\n        module=\"prezto:$module\"\n    fi\n    local cmd=\"zstyle ':${module}' $option ${params}\"\n\n    # execute in place\n    eval $cmd\n\n    if [[ ! \"${ZGEN_PREZTO_OPTIONS[@]}\" =~ \"${cmd}\" ]]; then\n        ZGEN_PREZTO_OPTIONS+=(\"${cmd}\")\n    fi\n}\n\n-zgen-prezto-load(){\n    local params=\"$*\"\n    local cmd=\"pmodload ${params[@]}\"\n\n    # execute in place\n    eval $cmd\n\n    if [[ ! \"${ZGEN_PREZTO[@]}\" =~ \"${cmd}\" ]]; then\n        ZGEN_PREZTO_LOAD+=(\"${params[@]}\")\n    fi\n}\n\nzgen-init() {\n    if [[ -f \"${ZGEN_INIT}\" ]]; then\n        source \"${ZGEN_INIT}\"\n    fi\n}\n\nzgen-reset() {\n    -zgpute 'Deleting `'\"${ZGEN_INIT}\"'` ...'\n    if [[ -f \"${ZGEN_INIT}\" ]]; then\n        rm \"${ZGEN_INIT}\"\n    fi\n    if [[ -f \"${ZGEN_CUSTOM_COMPDUMP}\" ]] || [[ -d \"${ZGEN_CUSTOM_COMPDUMP}\" ]]; then\n        -zgpute 'Deleting `'\"${ZGEN_CUSTOM_COMPDUMP}\"'` ...'\n        rm -r \"${ZGEN_CUSTOM_COMPDUMP}\"\n    fi\n}\n\nzgen-update() {\n    setopt localoptions extended_glob\n    for repo in \"${ZGEN_DIR}\"/(^.git)/*; do\n        -zgpute \"Updating '${repo}' ...\"\n        (cd \"${repo}\" \\\n            && git pull \\\n            && git submodule update --init --recursive)\n    done\n    zgen-reset\n}\n\nzgen-save() {\n    -zgpute 'Creating `'\"${ZGEN_INIT}\"'` ...'\n\n    -zgputs \"# {{{\" >! \"${ZGEN_INIT}\"\n    -zginit \"# Generated by zgen.\"\n    -zginit \"# This file will be overwritten the next time you run zgen save!\"\n    -zginit \"\"\n    -zginit \"ZSH=$(-zgen-get-zsh)\"\n    if [[ ${ZGEN_USE_PREZTO} == 1 ]]; then\n        -zginit \"\"\n        -zginit \"# ### Prezto initialization\"\n        for option in \"${ZGEN_PREZTO_OPTIONS[@]}\"; do\n            -zginit \"${option}\"\n        done\n    fi\n\n    -zginit \"\"\n    -zginit \"# ### General modules\"\n    for file in \"${ZGEN_LOADED[@]}\"; do\n        -zginit 'source \"'\"${(q)file}\"\\\"\n    done\n\n    # Set up fpath, load completions\n    # NOTE: This *intentionally* doesn't use ${ZGEN_COMPINIT_FLAGS}; the only\n    #       available flags are meaningless in the presence of `-C`.\n    -zginit \"\"\n    -zginit \"# ### Plugins & Completions\"\n    -zginit 'fpath=('\"${(@q)ZGEN_COMPLETIONS}\"' ${fpath})'\n    if [[ ${ZGEN_AUTOLOAD_COMPINIT} == 1 ]]; then\n        -zginit \"\"\n        -zginit 'autoload -Uz compinit && \\'\n        -zginit '   compinit -C '\"${ZGEN_COMPINIT_DIR_FLAG}\"\n    fi\n\n    # Check for file changes\n    if [[ ! -z \"${ZGEN_RESET_ON_CHANGE}\" ]]; then\n        -zginit \"\"\n        -zginit \"# ### Recompilation triggers\"\n\n        local ages=\"$(stat -Lc \"%Y\" 2>/dev/null $ZGEN_RESET_ON_CHANGE || \\\n                      stat -Lf \"%m\" 2>/dev/null $ZGEN_RESET_ON_CHANGE)\"\n        local shas=\"$(cksum ${ZGEN_RESET_ON_CHANGE})\"\n\n        -zginit \"read -rd '' ages <<AGES; read -rd '' shas <<SHAS\"\n        -zginit \"$ages\"\n        -zginit \"AGES\"\n        -zginit \"$shas\"\n        -zginit \"SHAS\"\n\n        -zginit 'if [[ -n \"$ZGEN_RESET_ON_CHANGE\" \\'\n        -zginit '   && \"$(stat -Lc \"%Y\" 2>/dev/null $ZGEN_RESET_ON_CHANGE || \\'\n        -zginit '         stat -Lf \"%m\"             $ZGEN_RESET_ON_CHANGE)\" != \"$ages\" \\'\n        -zginit '   && \"$(cksum                     $ZGEN_RESET_ON_CHANGE)\" != \"$shas\" ]]; then'\n        -zginit '   printf %s\\\\n '\\''-- zgen: Files in $ZGEN_RESET_ON_CHANGE changed; resetting `init.zsh`...'\\'\n        -zginit '   zgen reset'\n        -zginit 'fi'\n    fi\n\n    # load prezto modules\n    if [[ ${ZGEN_USE_PREZTO} == 1 ]]; then\n        -zginit \"\"\n        -zginit \"# ### Prezto modules\"\n        printf %s \"pmodload\" >> \"${ZGEN_INIT}\"\n        for module in \"${ZGEN_PREZTO_LOAD[@]}\"; do\n            printf %s \" ${module}\" >> \"${ZGEN_INIT}\"\n        done\n    fi\n\n    -zginit \"\"\n    -zginit \"# }}}\"\n\n    zgen-apply\n}\n\nzgen-apply() {\n    fpath=(${(q)ZGEN_COMPLETIONS[@]} ${fpath})\n\n    if [[ ${ZGEN_AUTOLOAD_COMPINIT} == 1 ]]; then\n        -zgpute \"Initializing completions ...\"\n\n        autoload -Uz compinit && \\\n            compinit $ZGEN_COMPINIT_FLAGS\n    fi\n}\n\n-zgen-path-contains() {\n    setopt localoptions nonomatch nocshnullglob nonullglob;\n    [ -e \"$1\"/*\"$2\"(.,@[1]) ]\n}\n\n-zgen-get-zsh(){\n    if [[ ${ZGEN_USE_PREZTO} == 1 ]]; then\n        -zgputs \"$(-zgen-get-clone-dir \"$ZGEN_PREZTO_REPO\" \"$ZGEN_PREZTO_BRANCH\")\"\n    else\n        -zgputs \"$(-zgen-get-clone-dir \"$ZGEN_OH_MY_ZSH_REPO\" \"$ZGEN_OH_MY_ZSH_BRANCH\")\"\n    fi\n}\n\nzgen-load() {\n    if [[ \"$#\" == 0 ]]; then\n        -zgpute '`load` requires at least one parameter:'\n        -zgpute '`zgen load <repo> [location] [branch]`'\n    elif [[ \"$#\" == 1 && (\"${1[1]}\" == '/' || \"${1[1]}\" == '.' ) ]]; then\n        local location=\"${1}\"\n    else\n        local repo=\"${1}\"\n        local file=\"${2}\"\n        local branch=\"${3:-master}\"\n        local dir=\"$(-zgen-get-clone-dir ${repo} ${branch})\"\n        local location=\"${dir}/${file}\"\n        location=${location%/}\n\n        # clone repo if not present\n        if [[ ! -d \"${dir}\" ]]; then\n            zgen-clone \"${repo}\" \"${branch}\"\n        fi\n    fi\n\n    # source the file\n    if [[ -f \"${location}\" ]]; then\n        -zgen-source \"${location}\"\n\n    # Prezto modules have init.zsh files\n    elif [[ -f \"${location}/init.zsh\" ]]; then\n        -zgen-source \"${location}/init.zsh\"\n\n    elif [[ -f \"${location}.zsh-theme\" ]]; then\n        -zgen-source \"${location}.zsh-theme\"\n\n    elif [[ -f \"${location}.theme.zsh\" ]]; then\n        -zgen-source \"${location}.theme.zsh\"\n\n    elif [[ -f \"${location}.zshplugin\" ]]; then\n        -zgen-source \"${location}.zshplugin\"\n\n    elif [[ -f \"${location}.zsh.plugin\" ]]; then\n        -zgen-source \"${location}.zsh.plugin\"\n\n    # Classic oh-my-zsh plugins have foo.plugin.zsh\n    elif -zgen-path-contains \"${location}\" \".plugin.zsh\" ; then\n        for script (${location}/*\\.plugin\\.zsh(N)) -zgen-source \"${script}\"\n\n    elif -zgen-path-contains \"${location}\" \".zsh\" ; then\n        for script (${location}/*\\.zsh(N)) -zgen-source \"${script}\"\n\n    elif -zgen-path-contains \"${location}\" \".sh\" ; then\n        for script (${location}/*\\.sh(N)) -zgen-source \"${script}\"\n\n    # Completions\n    elif [[ -d \"${location}\" ]]; then\n        -zgen-add-to-fpath \"${location}\"\n\n    else\n      if [[ -d ${dir:-$location} ]]; then\n        -zgpute \"Failed to load ${dir:-$location} -- ${file}\"\n      else\n        -zgpute \"Failed to load ${dir:-$location}\"\n      fi\n    fi\n}\n\nzgen-loadall() {\n    # shameless copy from antigen\n\n    # Bulk add many bundles at one go. Empty lines and lines starting with a `#`\n    # are ignored. Everything else is given to `zgen-load` as is, no\n    # quoting rules applied.\n\n    local line\n\n    grep '^[[:space:]]*[^[:space:]#]' | while read line; do\n        # Using `eval` so that we can use the shell-style quoting in each line\n        # piped to `antigen-bundles`.\n        eval \"zgen-load $line\"\n    done\n}\n\nzgen-saved() {\n    [[ -f \"${ZGEN_INIT}\" ]] && return 0 || return 1\n}\n\nzgen-list() {\n    if [[ -f \"${ZGEN_INIT}\" ]]; then\n        cat \"${ZGEN_INIT}\"\n    else\n        -zgpute '`init.zsh` missing, please use `zgen save` and then restart your shell.'\n        return 1\n    fi\n}\n\nzgen-selfupdate() {\n    if [[ -e \"${ZGEN_SOURCE}/.git\" ]]; then\n        (cd \"${ZGEN_SOURCE}\" \\\n            && git pull) \\\n            && zgen reset\n    else\n        -zgpute \"Not running from a git repository; cannot automatically update.\"\n        return 1\n    fi\n}\n\nzgen-oh-my-zsh() {\n    local repo=\"$ZGEN_OH_MY_ZSH_REPO\"\n    local file=\"${1:-oh-my-zsh.sh}\"\n\n    zgen-load \"${repo}\" \"${file}\"\n}\n\nzgen-prezto() {\n    local repo=\"$ZGEN_PREZTO_REPO\"\n    local file=\"${1:-init.zsh}\"\n\n    # load prezto itself\n    if [[ $# == 0 ]]; then\n        ZGEN_USE_PREZTO=1\n        zgen-load \"${repo}\" \"${file}\"\n        if [[ ${ZGEN_PREZTO_LOAD_DEFAULT} != 0 ]]; then\n            -zgen-prezto-load \"'environment' 'terminal' 'editor' 'history' 'directory' 'spectrum' 'utility' 'completion' 'prompt'\"\n        fi\n\n    # this is a prezto module\n    elif [[ $# == 1 ]]; then\n        local module=${file}\n        if [[ -z ${file} ]]; then\n            -zgpute 'Please specify which module to load using `zgen prezto <name of module>`'\n            return 1\n        fi\n        -zgen-prezto-load \"'$module'\"\n\n    # this is a prezto option\n    else\n        shift\n        -zgen-prezto-option ${file} ${(qq)@}\n    fi\n\n}\n\nzgen-pmodule() {\n    local repo=\"${1}\"\n    local branch=\"${2:-master}\"\n\n    local dir=\"$(-zgen-get-clone-dir ${repo} ${branch})\"\n\n    # clone repo if not present\n    if [[ ! -d \"${dir}\" ]]; then\n        zgen-clone \"${repo}\" \"${branch}\"\n    fi\n\n    local module=\"${repo:t}\"\n    -zgen-prezto-load \"'${module}'\"\n}\n\nzgen() {\n    local cmd=\"${1}\"\n    if [[ -z \"${cmd}\" ]]; then\n        -zgputs 'usage: `zgen [command | instruction] [options]`'\n        -zgputs \"    commands: list, saved, reset, clone, update, selfupdate\"\n        -zgputs \"    instructions: load, oh-my-zsh, pmodule, prezto, save, apply\"\n        return 1\n    fi\n\n    shift\n\n    if functions \"zgen-${cmd}\" > /dev/null ; then\n        \"zgen-${cmd}\" \"${@}\"\n    else\n        -zgpute 'Command not found: `'\"${cmd}\"\\`\n        return 1\n    fi\n}\n\nZSH=$(-zgen-get-zsh)\nfpath=($ZGEN_SOURCE $fpath)\nzgen-init\n"
        }
      ]
    }
  ]
}