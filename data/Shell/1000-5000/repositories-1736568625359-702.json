{
  "metadata": {
    "timestamp": 1736568625359,
    "page": 702,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcwOQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "marlonrichert/zsh-snap",
      "stars": 1364,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.005859375,
          "content": "*.zwc\n"
        },
        {
          "name": ".zshrc",
          "type": "blob",
          "size": 3.2529296875,
          "content": "##\n# ⚠️ WARNING: Don't manually `source` your .zshrc file! This can have unexpected\n# side effects.\n# Instead, to apply changes, open a new terminal or restart your shell.\n#\n\n\n##\n# Source Znap at the start of your .zshrc file.\n#\nsource ~/git/zsh-snap/znap.zsh\n\n\n##\n# Does your shell feels slow to start? `znap prompt` reduces the time between\n# opening your terminal and seeing your prompt to just 15 - 40 ms!\n#\nznap prompt agnoster/agnoster-zsh-theme\n\n# `znap prompt` also supports Oh-My-Zsh themes. Just make sure you load the\n# required libs first:\nznap source ohmyzsh/ohmyzsh lib/{git,theme-and-appearance}\nznap prompt ohmyzsh/ohmyzsh robbyrussell\n\n# Using your own custom prompt? After initializing the prompt, just call\n# `znap prompt` without arguments to get it to show:\nPS1=$'%(?,%F{g},%F{r})%#%f '\nznap prompt\n\n# The same goes for any other kind of custom prompt:\nznap eval starship 'starship init zsh --print-full-init'\nznap prompt\n\n# NOTE that `znap prompt` does not work with Powerlevel10k.\n# With that theme, you should use its \"instant prompt\" feature instead.\n\n\n##\n# Load your plugins with `znap source`.\n#\nznap source marlonrichert/zsh-autocomplete\nznap source marlonrichert/zsh-edit\n\n# You can also choose to load one or more files specifically:\nznap source sorin-ionescu/prezto modules/{environment,history}\nznap source ohmyzsh/ohmyzsh \\\n    'lib/(*~(git|theme-and-appearance).zsh)' plugins/git\n\n\n# No special syntax is needed to configure plugins. Just use normal Zsh\n# statements:\n\nznap source marlonrichert/zsh-hist\nbindkey '^[q' push-line-or-edit\nbindkey -r '^Q' '^[Q'\n\nZSH_AUTOSUGGEST_STRATEGY=( history )\nznap source zsh-users/zsh-autosuggestions\n\nZSH_HIGHLIGHT_HIGHLIGHTERS=( main brackets )\nznap source zsh-users/zsh-syntax-highlighting\n\n\n##\n# Cache the output of slow commands with `znap eval`.\n#\n\n# If the first arg is a repo, then the command will run inside it. Plus,\n# whenever you update a repo with `znap pull`, its eval cache gets regenerated\n# automatically.\nznap eval trapd00r/LS_COLORS \"$( whence -a dircolors gdircolors ) -b LS_COLORS\"\n\n# The cache gets regenerated, too, when the eval command has changed. For\n# example, here we include a variable. So, the cache gets invalidated whenever\n# this variable has changed.\nznap source marlonrichert/zcolors\nznap eval   marlonrichert/zcolors \"zcolors ${(q)LS_COLORS}\"\n\n# Combine `znap eval` with `curl` or `wget` to download, cache and source\n# individual files:\nznap eval omz-git 'curl -fsSL \\\n    https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/plugins/git/git.plugin.zsh'\n\n\n##\n# Defer initilization code with lazily loaded functions created by\n# `znap function`.\n#\n\n# For each of the examples below, the `eval` statement on the right is not\n# executed until you try to execute the associated command or try to use\n# completion on it.\n\nznap function _pyenv pyenv              'eval \"$( pyenv init - --no-rehash )\"'\ncompctl -K    _pyenv pyenv\n\nznap function _pip_completion pip       'eval \"$( pip completion --zsh )\"'\ncompctl -K    _pip_completion pip\n\nznap function _python_argcomplete pipx  'eval \"$( register-python-argcomplete pipx  )\"'\ncomplete -o nospace -o default -o bashdefault \\\n           -F _python_argcomplete pipx\n\nznap function _pipenv pipenv            'eval \"$( pipenv --completion )\"'\ncompdef       _pipenv pipenv\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0458984375,
          "content": "MIT License\n\nCopyright (c) 2020 Marlon Richert\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.740234375,
          "content": "# ⚡️Znap!\n**Znap** is a fast, light-weight set of tools to ease the use of Zsh plugins &\nGit repos and reduce your shell's startup time.\n\n> Enjoy using this software? [Become a sponsor!](https://github.com/sponsors/marlonrichert)\n\n## Requirements\nTested with:\n* Zsh 5.8.1\n* Git 2.39.1\n\n## Installation\nPut this in your `.zshrc` file (replacing `~/Repos` with wherever you want to\nkeep your Zsh plugins and/or Git repos):\n```sh\n# Download Znap, if it's not there yet.\n[[ -r ~/Repos/znap/znap.zsh ]] ||\n    git clone --depth 1 -- \\\n        https://github.com/marlonrichert/zsh-snap.git ~/Repos/znap\nsource ~/Repos/znap/znap.zsh  # Start Znap\n```\nThen restart your shell.\n\nTo uninstall, simply remove the above from your `.zshrc` file and remove Znap's repo.\n\nZnap will automatically manage the repos found in its parent directory.  To change the directory it should manage, add\nthe following to your `.zshrc` file:\n```sh\nzstyle ':znap:*' repos-dir <path>\n```\n\n### Updating\nTo update Znap and all of your plugins/repos simultaneously, run\n```sh\n% znap pull\n```\n\nNote, that if you told Znap not to manage its parent directory (see the previous section), then it will not update\nitself with this.  You will have to manually `cd` to its directory and run `git pull`.\n\nIf there are repos that you do not want to be included by `znap pull`, add the following to your `.zshrc` file:\n```sh\nzstyle ':znap:pull:*' exclude <repo> ...\n```\n\nTo run `znap pull` on specific repos only, including ones you have set to be excluded, pass them as an arguments:\n```sh\n% znap pull <repo> ...\n```\n\n## `.zshrc` optimization\nUsing Znap to optimize your Zsh config can be as simple as this:\n```sh\n[[ -r ~/Repos/znap/znap.zsh ]] ||\n    git clone --depth 1 -- https://github.com/marlonrichert/zsh-snap.git ~/Repos/znap\nsource ~/Repos/znap/znap.zsh\n\n# `znap prompt` makes your prompt visible in just 15-40ms!\nznap prompt sindresorhus/pure\n\n# `znap source` starts plugins.\nznap source marlonrichert/zsh-autocomplete\n\n# `znap eval` makes evaluating generated command output up to 10 times faster.\nznap eval iterm2 'curl -fsSL https://iterm2.com/shell_integration/zsh'\n\n# `znap function` lets you lazy-load features you don't always need.\nznap function _pyenv pyenv \"znap eval pyenv 'pyenv init - --no-rehash'\"\ncompctl -K    _pyenv pyenv\n\n# `znap install` adds new commands and completions.\nznap install aureliojargas/clitest zsh-users/zsh-completions\n```\n\nFor more examples of what Znap can do for your dotfiles, please see [the included `.zshrc`\nfile](.zshrc).\n\nAdditionaly, Znap makes it so that you actually need to have _less_ in your `.zshrc` file, by\nautomating several tasks for you.\n\n### Faster `eval`\nUse `znap eval ... <command>` to cache the output of `<command>`, compile it, and then `source` it (instead of `eval` it):\n```sh\nznap eval <name> '<command>'\n```\nThis can be up 10 times faster than a regular `eval \"$( <command> )\"` statement!  If you pass a repo as the first\nargument, then Znap will `eval` the command output inside the given repo and will invalidate the cache whenever the repo\nis update.  Otherwise, the cache will be invalidated whenever `<command>` changes.  Caches are stored in\n`${XDG_CACHE_HOME:-$HOME/.cache}/zsh-snap/eval`.\n\n### Automatic `compinit` and `bashcompinit`\nNote that the above example does not include any call to\n[`complist`](http://zsh.sourceforge.net/Doc/Release/Zsh-Modules.html#The-zsh_002fcomplist-Module),\n[`compinit`, or\n`bashcompinit`](http://zsh.sourceforge.net/Doc/Release/Completion-System.html#Initialization) in\nthe `.zshrc` file. That is because Znap will run these for you as needed.\n\nZnap also regenerates your [comp dump\nfile](http://zsh.sourceforge.net/Doc/Release/Completion-System.html#Use-of-compinit) automatically whenever you update a\nrepo, install a repo, or change your `.zshrc` file.\n\nIf necessary, you can let Znap pass arguments to `compinit` as follows:\n```sh\nzstyle '*:compinit' arguments -D -i -u -C -w\n```\n\n### Asynchronous compilation\nZnap compiles your scripts and functions in the background. This way, your shell will start up even\nfaster next time!\n\nShould you not want this feature, you can disable it with\n```sh\nzstyle ':znap:*' auto-compile no\n```\n\nIn any case, you can compile sources manually at any time with\n`znap compile [ <dir> | <file> ] ...`.\n\n## Automatic `git maintenance`\nWhen using `git` 2.31.0 or newer, Znap automatically enables `git maintenance` in each repo that it\nmanages. This automatically optimizes your repos in the background, so that your `git` and `znap`\ncommands will run faster.\n\nTo selectively disable this feature, add\n```sh\nzstyle ':znap:*:<glob pattern>' git-maintenance off\n```\nto your `.zshrc` file. Next time you run `znap pull`, `git maintenance` will then be disabled for\neach repo whose name matches `<glob pattern>`.\n\nUse `*` as your [glob\npattern](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Filename-Generation) to opt out of\nthis feature completely.\n\n## Command-Line Usage\nZnap also makes life on the command line easier.  For a full list of available commands, run\n```sh\n% znap\n```\nFor more help on a particular command, run\n```sh\n% znap help <command>\n```\nExhaustive tab completion is available, too.  For examples of the most important command-line features, see below.\n\n> Note:\n> * The examples below you should run on the command line, not add to your `.zshrc` file!\n> * `%` represents the prompt.  You shouldn't type that part.  🙂\n\n### Check Git status of all repos\nTo check the Git status of all repos managed by Znap, run\n```sh\n% znap status\n```\n\nIf there are repos that you do not want to be included by `znap status`, add the following to your `.zshrc` file:\n```sh\nzstyle ':znap:status:*' exclude <repo> ...\n```\n\nTo run `znap status` on specific repos only, including ones you have set to be excluded, pass them as an arguments:\n```sh\n% znap status <repo> ...\n```\n\n### Removing repos\nTo remove one or more repos, use `znap uninstall`:\n```sh\n% znap uninstall asdf-vm/asdf ohmyzsh/ohmyzsh\n```\n\n### Install generated functions\nSome commands generate output that should be loaded as a function.  You can install these generated functions with\n`znap fpath <function> '<command>'`.  For example:\n```sh\n% znap fpath _kubectl 'kubectl completion  zsh'\n% znap fpath _rustup  'rustup  completions zsh'\n% znap fpath _cargo   'rustup  completions zsh cargo'\n```\n\nThis will save them to `${XDG_DATA_HOME:-$HOME/.local/share}/zsh/site-functions`.\n\n### Named dirs\nZnap makes all of the repos it manages available as [named\ndirectories](http://zsh.sourceforge.net/Doc/Release/Expansion.html#Filename-Expansion):\n```sh\n% cd ~[zsh-snap] # `cd` to a repo\n% ls ~[asdf]/completions    # `ls` a subdir in a repo\n```\n\n## Author\n© 2020-2021 [Marlon Richert](https://github.com/marlonrichert)\n\n## License\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n"
        },
        {
          "name": "completions",
          "type": "tree",
          "content": null
        },
        {
          "name": "functions",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "znap.zsh",
          "type": "blob",
          "size": 0.1318359375,
          "content": "#!/bin/zsh\nzmodload zsh/param/private\n\nautoload -Uz ${${(%):-%x}:P:h}/scripts/init.zsh\n{\n  init.zsh\n} always {\n  unfunction init.zsh\n}\n"
        }
      ]
    }
  ]
}