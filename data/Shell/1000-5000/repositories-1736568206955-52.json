{
  "metadata": {
    "timestamp": 1736568206955,
    "page": 52,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "osixia/docker-openldap",
      "stars": 4083,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0263671875,
          "content": ".DS_Store\n!/.git*\n/VOLUMES\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 4.333984375,
          "content": "language: bash\n\nservices:\n  - docker\nenv:\n  global:\n    - NAME=\"osixia/openldap\"\n    - VERSION=\"${TRAVIS_BRANCH}-dev\"\n  matrix:\n    - TARGET_ARCH=amd64 QEMU_ARCH=x86_64\n    - TARGET_ARCH=arm32v7 QEMU_ARCH=arm\n    - TARGET_ARCH=arm64v8 QEMU_ARCH=aarch64\n\naddons:\n  apt:\n    # The docker manifest command was added in docker-ee version 18.x\n    # So update our current installation and we also have to enable the experimental features.\n    sources:\n      - sourceline: \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\n        key_url: \"https://download.docker.com/linux/ubuntu/gpg\"\n    packages:\n      - docker-ce\n\nbefore_install:\n  - docker --version\n  - mkdir $HOME/.docker\n  - 'echo \"{\" > $HOME/.docker/config.json'\n  - 'echo \"  \\\"experimental\\\": \\\"enabled\\\"\" >> $HOME/.docker/config.json'\n  - 'echo \"}\" >> $HOME/.docker/config.json'\n  - sudo service docker restart\n  # To have `DOCKER_USER` and `DOCKER_PASS`\n  # use `travis env set`.\n  - echo \"$DOCKER_PASS\" | docker login -u \"$DOCKER_USER\" --password-stdin\n\ninstall:\n  # For cross buidling our images\n  # This is necessary because travis-ci.org has only x86_64 machines.\n  # If travis-ci.org gets native arm builds, probably this step is not\n  # necessary any more.\n  - docker run --rm --privileged multiarch/qemu-user-static:register --reset\n    # Bats is necessary for the UT\n  - curl -o bats.tar.gz -SL https://github.com/bats-core/bats-core/archive/v1.1.0.tar.gz\n  - mkdir bats-core && tar -xf bats.tar.gz -C bats-core --strip-components=1\n  - cd bats-core/\n  - sudo ./install.sh /usr/local\n  - cd ..\n\nbefore_script:\n  # Set baseimage.\n  - sed -i -e \"s/FROM \\(.*\\)/FROM \\1-${TARGET_ARCH}/g\" image/Dockerfile;\n  # remove pqchecker if arch is not amd64\n  - if [[ \"${TARGET_ARCH}\" != 'amd64' ]]; then\n    sed -i -e \"/PQCHECKER/Id\" image/Dockerfile;\n    fi\n  - cat image/Dockerfile;\n  # If this is a tag then change the VERSION variable to only have the\n  # tag name and not also the commit hash.\n  - if [ -n \"$TRAVIS_TAG\" ]; then\n    VERSION=$(echo \"${TRAVIS_TAG}\" | sed -e 's/\\(.*\\)[-v]\\(.*\\)/\\1\\2/g');\n    fi\n  - if [ \"${TRAVIS_BRANCH}\" == 'master' ]; then\n    VERSION=\"stable\";\n    fi\n  # replace / with - in version\n  - VERSION=$(echo \"${VERSION}\" | sed 's|/|-|g');\n\nscript:\n  - make build-nocache NAME=${NAME} VERSION=${VERSION}-${TARGET_ARCH}\n  # skip test \"ldapsearch existing hdb database and config\" if arch != amd64\n  - if [[ \"${TARGET_ARCH}\" != 'amd64' ]]; then\n    sed -i '/@test \"ldapsearch existing hdb database and config\"/a skip' test/test.bats;\n    fi\n  # Run the test and if the test fails mark the build as failed.\n  - make test NAME=${NAME} VERSION=${VERSION}-${TARGET_ARCH}\n\nbefore_deploy:\n  - docker run -d --name test_image ${NAME}:${VERSION}-${TARGET_ARCH} sleep 10\n  - sleep 5\n  - sudo docker ps | grep -q test_image\n  - make tag NAME=${NAME} VERSION=${VERSION}-${TARGET_ARCH}\n\ndeploy:\n  provider: script\n  on:\n    all_branches: true\n  script: make push NAME=${NAME} VERSION=${VERSION}-${TARGET_ARCH}\n\njobs:\n  include:\n    - stage: Manifest creation\n      install: skip\n      script: skip\n      after_deploy:\n        - echo \"$DOCKER_PASS\" | docker login -u \"$DOCKER_USER\" --password-stdin\n        - docker manifest create ${NAME}:${VERSION} ${NAME}:${VERSION}-amd64 ${NAME}:${VERSION}-arm32v7 ${NAME}:${VERSION}-arm64v8;\n          docker manifest annotate ${NAME}:${VERSION} ${NAME}:${VERSION}-amd64 --os linux --arch amd64;\n          docker manifest annotate ${NAME}:${VERSION} ${NAME}:${VERSION}-arm32v7 --os linux --arch arm --variant v7;\n          docker manifest annotate ${NAME}:${VERSION} ${NAME}:${VERSION}-arm64v8 --os linux --arch arm64 --variant v8;\n\n        # The latest tag is coming from the master branch of the repo\n        - if [ \"${TRAVIS_BRANCH}\" == 'master' ]; then\n          docker manifest create ${NAME}:latest ${NAME}:${VERSION}-amd64 ${NAME}:${VERSION}-arm32v7 ${NAME}:${VERSION}-arm64v8;\n          docker manifest annotate ${NAME}:latest ${NAME}:${VERSION}-amd64 --os linux --arch amd64;\n          docker manifest annotate ${NAME}:latest ${NAME}:${VERSION}-arm32v7 --os linux --arch arm --variant v7;\n          docker manifest annotate ${NAME}:latest ${NAME}:${VERSION}-arm64v8 --os linux --arch arm64 --variant v8;\n          fi\n\n        - docker manifest push ${NAME}:${VERSION};\n          if [ \"${TRAVIS_BRANCH}\" == 'master' ]; then\n          docker manifest push ${NAME}:latest;\n          fi\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 11.21875,
          "content": "# Changelog\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](http://keepachangelog.com/en/1.0.0/)\nand this project adheres to [Semantic Versioning](http://semver.org/spec/v2.0.0.html).\n\n## [1.5.0] - 2021-02-19\n50M+ docker pulls ðŸŽ‰ðŸŽ‰ðŸŽ‰ thanks to all contributors ðŸ’•\n\n### Added\n  - Allowing own replication via LDAP_REPLICATION=own #535. Thanks to @sistason !\n  - Seeding from internal path is now complete. #361. Thanks to @dbck !\n\n### Changed\n  - Update openldap 2.4.50 to 2.4.57\n  - Upgrade baseimage to light-baseimage:1.3.2. Thanks to @heidemn !\n  - Replace mail.schema for postfix-book.schema #450. Thanks to @vivacarvajalito !\n  - Replace zarafa.schema for kopano.schema\n\n### Removed\n  - mmc schemas (dhcp.schema, dnszone.schema, mail.schema, mmc.schema, quota.schema) and radius.schema\n\n### Fixed\n  - Few small typos #536. Thanks to @timgates42 !\n  - Out of date api in the using-secrets kubernetes yaml #527. Thanks to @joshuacox !\n  - Custom ldap file and schema #481.  Thanks to @Os-carsun !\n\n## [1.4.0] - 2020-06-15\n30M+ docker pulls ðŸŽ‰ðŸŽ‰ðŸŽ‰ thanks to all contributors ðŸ’•\n\n### Added\n  - Allow setting ports on ldap and ldaps #403. Thanks to @chirauki !\n  - Address firewall issues on RHEL in README #394. Thanks to @BirkhoffLee !\n  - Ensure ca certs are up to date #387. Thanks to @Jyrno42 !\n  - Install slapd-contrib to include pbkdf2 pw support #365. Thanks to @col-panic !\n  - Seeding from internal path. #361. Thanks to @dbck !\n  - Enable openldap uid/gid to be specified at runtime #336. Thanks to @lj020326 !\n\n### Changed\n  - Update openldap 2.4.48 to 2.4.50 \n  - LDAP_TLS_PROTOCOL_MIN is deprecated #432. Thanks to @mettacrawler !\n  - Better handling of environment variables checks #382. Thanks to @obourdon !\n\n### Fixed\n  - Multi-node replication fixes #420. Thanks to @pcolmer !\n  - Grant root manage access to database #416. Thanks to @olia-dev !\n\n## [1.3.0] - 2019-09-29\n### Added\n  - Multiarch support\n\n### Changed\n  - Update openldap 2.4.47 to 2.4.48 #247\n  - Upgrade baseimage to light-baseimage:1.2.0 (debian buster)\n\n## [1.2.5] - 2019-08-16\n### Added\n  - Support for docker secrets #325. Thanks to @anagno !\n  - Add DISABLE_CHOWN environment variable #240\n  - pqChecker lib to check passwords strength with ppolicy pwdCheckModule\n\n### Fixed\n  - Fix of incorrectly positioned 'log-helper debug' command #327. Thanks to @turcan !\n  - Fix domain dn #341. Thanks to @obourdon !\n\n## [1.2.4] - 2019-03-14\n### Fixed\n  - Excessive RAM usage on 1.2.2, increased 10x from 1.2.1 #242\n  - Startup issue with 1.2.3 #283\n\n## [1.2.3] - 2019-01-21\n10M+ docker pulls ðŸŽ‰ðŸŽ‰ðŸŽ‰ thanks to all contributors ðŸ’•\n\n### Added\n  - GCE statefulset #241\n  - Custom dhparam.pem via environment. #254\n\n### Changed\n  - Update openldap 2.4.44 to 2.4.47 #247\n  - Upgrade baseimage to light-baseimage:1.1.2\n\n### Fixed\n  - Ldaps port numbers in readme #281\n  - Replication after restart container #264\n\n## [1.2.2] - 2018-09-04\n### Added\n  - Environment variable LDAP_NOFILE to setup a custom ulimit value #237\n  \n### Fixed\n  - Remove schema ambiguity #204\n  - lidf typo in readme #217\n  - Ignore all the folders started with . #232\n\n### Security \n  - Fix self-edit security issue #239\n  \n    Thanks to Yann Voumard for reporting this and @jonremy for the fix.\n\n## [1.2.1] - 2018-05-14\n### Security\n  - The default \"write\" access to \"*\" by  \"self\" in the file  \"config/bootstrap/ldif/02-security.ldif\" allowed anyone to change all the data about himself. This includes the gid and uid numbers what could lead to serious security issues.\n\n  This has been changed to ```olcAccess: to * by self read by dn=\"cn=admin,{{ LDAP_BASE_DN }}\" write by * none\"```\n\n  Thanks to Francesc Escale for reporting this.\n\n## [1.2.0] - 2018-03-02\n### Changed\n  - Use mdb as default backend\n\n### Fixed\n  - startup.sh: Ensure SCHEMAS is sorted #193\n  - LDAP_ADMIN_PASSWORD with space breaks container setup #167\n\n## [1.1.11] - 2017-12-19\n### Added\n  - Add krb5-kdc-ldap with doc examples #171\n  - Add support of readonly user in custom bootstrap ldif #162\n\n### Fixed\n  - Fix NFS issue #169\n  - Create schemas in a consistent order. #174\n\n## [1.1.10] - 2017-11-09\n### Changed\n  - Upgrade baseimage to light-baseimage:1.1.1\n\n### Fixed\n  - Readme #145 #148\n  - Let ldapmodify and ldapadd use the same auth #146\n  - Enable matching uid's and gid's in the host and container. #156\n\n## [1.1.9] - 2017-07-19\n### Added\n  - LDAP_RFC2307BIS_SCHEMA option to use rfc2307bis schema instead of nis default schema\n  - KEEP_EXISTING_CONFIG option to not change the ldap config\n\n### Changed\n  - Upgrade baseimage to light-baseimage:1.1.0 (debian stretch)\n\n## [1.1.8] - 2017-02-16\n### Fixed\n  - LDAP_ENFORCE_TLS is not working correctly #107\n  - Unable to reuse volumes after LDAP_TLS_ENFORCE is true #92\n\n## [1.1.7] - 2016-11-09\n### Changed\n  - Upgrade baseimage to light-baseimage:0.2.6\n\n## [1.1.6] - 2016-09-02\n### Changed\n  - Upgrade baseimage to light-baseimage:0.2.5\n\n### Fixed\n  - Upgrade to 1.1.5 startup issues with cfssl-helper #73\n\n## [1.1.5] - 2016-08-02\n### Fixed\n  - Restarting container with new environment #44\n  - Cannot rerun with customized certificate at 1.1.1 #36\n\n## [1.1.4] - 2016-07-26\n### Fixed\n  - Remove environment variable LDAP_TLS_PROTOCOL_MIN as it takes no effect, see #69\n  - Adjust default GnuTLS cipher string according to Red Hat's TLS hardening guide.\n    This by default also restricts the TLS protocol version to 1.2. For reference,\n    see #69\n  - Fix Error in Adding \"Billy\" #71\n  - Add docker-compose.yml example and update kubernetes examples #52\n  - Update LDAP_TLS_CIPHER_SUITE, remove LDAP_TLS_PROTOCOL_MIN #70\n  - fixed LDAP_BACKEND for readonly user #62\n\n## [1.1.3] - 2016-06-09\nIn this version the new environment variable LDAP_BACKEND let you set the the backend used by your ldap database.\nBy default it's hdb. In comming versions 1.2.x the default will be changed to mdb.\n\nEnvironment variable LDAP_REPLICATION_HDB_SYNCPROV changed to LDAP_REPLICATION_DB_SYNCPROV\n\n### Added\n  - Use mdb over hdb #50\n\n### Changed\n  - Ignore lost+found directories #53\n  - LDAP_REPLICATION_HDB_SYNCPROV changed to LDAP_REPLICATION_DB_SYNCPROV\n  - Upgrade baseimage to light-baseimage:0.2.4\n\n### Removed\n  - Volume command from Dockerfile #56\n\n## [1.1.2] - 2016-03-18\n### Fixed\n  - Honor LDAP_LOG_LEVEL on startup #39\n  - slapd tcp bind is network not interface, and so does not respond on overlay networks #35\n  - specify base_dn without domain #37\n\n## [1.1.1] - 2016-02-20\n### Changed\n  - Upgrade baseimage to light-baseimage:0.2.2\n\n## [1.1.0] - 2016-01-25\n### Added\n  - Use \\*.startup.yaml environment files to keep configuration secrets\n  - Use cfssl tool to generate tls certs\n  - Use log-helper to write leveled log messages\n  - Allow copy of /container/service and mounted files to /container/run/service dir usefull for write only filesystems and avoid file permissions problems\n  - Add enforcing TLS options (#26)\n\n### Changed\n  - Upgrade baseimage to light-baseimage:0.2.1\n\n### Fixed\n  - Should SSL certs be copied on load? (#25)\n\n## [1.0.9] - 2015-12-16\n### Added\n  - Makefile with build no cache\n\n### Changed\n  - Upgrade baseimage to light-baseimage:0.2.0\n\n## [1.0.8] - 2015-11-23\n### Fixed\n  - An other startup bug ! whuhu\n\n## [1.0.7] - 2015-11-20\n### Fixed\n  - Startup bug\n\n## [1.0.6] - 2015-11-20\n### Changed\n  - Upgrade baseimage to light-baseimage:0.1.5\n\n## [1.0.5] - 2015-11-19\n### Changed\n  - Upgrade baseimage to light-baseimage:0.1.4\n\n### Fixed\n  - Replication bug when the hostname was changed\n\n## [1.0.4] - 2015-11-06\n### Changed\n  - Upgrade baseimage to light-baseimage:0.1.3\n\n## [1.0.3] - 2015-10-26\n### Changed\n  - Upgrade baseimage to light-baseimage:0.1.2\n\n### Fixed\n  - Re-running container with volumes won't start #19\n\n## [1.0.2] - 2015-08-27\n### Added\n  - LDAP_TLS_CIPHER_SUITE\n  - LDAP_TLS_PROTOCOL_MIN\n  - LDAP_TLS_VERIFY_CLIENT\n\n## [1.0.1] - 2015-08-18\n### Changed\n  - Upgrade baseimage to light-baseimage:0.1.1\n\n### Fixed\n  - OpenLdap container won't start when dhparam.pem is missing in bound volume #13\n\n## [1.0.0] - 2015-07-24\n### Added\n  - Improve documentation\n\n### Changed\n  - Upgrade baseimage to light-baseimage\n\n## [0.10.2] - 2015-07-14\n### Added\n  - Bootstrap config, only on non existing slapd config\n  - Limit max open file descriptors to fix slapd memory usage (#9)\n  - Don't disable network access from outside (#8)\n  - Make log level configurable via environment variable (#7)\n  - Support for ldaps (#10)\n\n### Fixed\n  - Unable to start container with the following invocation. (#6)\n\n## [0.10.1] - 2015-05-17\n### Added\n  - LDAPI\n  - Custom ldap schema\n  - Auto convert .schema to .ldif\n\n### Fixed\n  - Docker VOLUME is not needed to be able to stop a container without losing data (#2)\n  - starting from old data (#3)\n\n## [0.10.0] - 2015-03-03\nNew version initial release, no changelog before this sorry.\n\n[1.5.0]: https://github.com/osixia/docker-openldap/compare/v1.4.0...v1.5.0\n[1.4.0]: https://github.com/osixia/docker-openldap/compare/v1.3.0...v1.4.0\n[1.3.0]: https://github.com/osixia/docker-openldap/compare/v1.2.5...v1.3.0\n[1.2.5]: https://github.com/osixia/docker-openldap/compare/v1.2.4...v1.2.5\n[1.2.4]: https://github.com/osixia/docker-openldap/compare/v1.2.3...v1.2.4\n[1.2.3]: https://github.com/osixia/docker-openldap/compare/v1.2.2...v1.2.3\n[1.2.2]: https://github.com/osixia/docker-openldap/compare/v1.2.1...v1.2.2\n[1.2.1]: https://github.com/osixia/docker-openldap/compare/v1.2.0...v1.2.1\n[1.2.0]: https://github.com/osixia/docker-openldap/compare/v1.1.11...v1.2.0\n[1.1.11]: https://github.com/osixia/docker-openldap/compare/v1.1.10...v1.1.11\n[1.1.10]: https://github.com/osixia/docker-openldap/compare/v1.1.9...v1.1.10\n[1.1.9]: https://github.com/osixia/docker-openldap/compare/v1.1.8...v1.1.9\n[1.1.8]: https://github.com/osixia/docker-openldap/compare/v1.1.7...v1.1.8\n[1.1.7]: https://github.com/osixia/docker-openldap/compare/v1.1.6...v1.1.7\n[1.1.6]: https://github.com/osixia/docker-openldap/compare/v1.1.5...v1.1.6\n[1.1.5]: https://github.com/osixia/docker-openldap/compare/v1.1.4...v1.1.5\n[1.1.4]: https://github.com/osixia/docker-openldap/compare/v1.1.3...v1.1.4\n[1.1.3]: https://github.com/osixia/docker-openldap/compare/v1.1.2...v1.1.3\n[1.1.2]: https://github.com/osixia/docker-openldap/compare/v1.1.1...v1.1.2\n[1.1.1]: https://github.com/osixia/docker-openldap/compare/v1.1.0...v1.1.1\n[1.1.0]: https://github.com/osixia/docker-openldap/compare/v1.0.9...v1.1.0\n[1.0.9]: https://github.com/osixia/docker-openldap/compare/v1.0.8...v1.0.9\n[1.0.8]: https://github.com/osixia/docker-openldap/compare/v1.0.7...v1.0.8\n[1.0.7]: https://github.com/osixia/docker-openldap/compare/v1.0.6...v1.0.7\n[1.0.6]: https://github.com/osixia/docker-openldap/compare/v1.0.5...v1.0.6\n[1.0.5]: https://github.com/osixia/docker-openldap/compare/v1.0.4...v1.0.5\n[1.0.4]: https://github.com/osixia/docker-openldap/compare/v1.0.3...v1.0.4\n[1.0.3]: https://github.com/osixia/docker-openldap/compare/v1.0.2...v1.0.3\n[1.0.2]: https://github.com/osixia/docker-openldap/compare/v1.0.1...v1.0.2\n[1.0.1]: https://github.com/osixia/docker-openldap/compare/v1.0.0...v1.0.1\n[1.0.0]: https://github.com/osixia/docker-openldap/compare/v1.10.2...v1.0.0\n[0.10.2]: https://github.com/osixia/docker-openldap/compare/v0.10.1...v0.10.2\n[0.10.1]: https://github.com/osixia/docker-openldap/compare/v0.10.0...v0.10.1\n[0.10.0]: https://github.com/osixia/docker-openldap/compare/v0.1.0...v0.10.0\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0478515625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2014 Osixia\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.6435546875,
          "content": "NAME = osixia/openldap\nVERSION = 1.5.0\n\n.PHONY: build build-nocache test tag-latest push push-latest release git-tag-version\n\nbuild:\n\tdocker build -t $(NAME):$(VERSION) --rm image\n\nbuild-nocache:\n\tdocker build -t $(NAME):$(VERSION) --no-cache --rm image\n\ntest:\n\tenv NAME=$(NAME) VERSION=$(VERSION) bats test/test.bats\n\ntag:\n\tdocker tag $(NAME):$(VERSION) $(NAME):$(VERSION)\n\ntag-latest:\n\tdocker tag $(NAME):$(VERSION) $(NAME):latest\n\npush:\n\tdocker push $(NAME):$(VERSION)\n\npush-latest:\n\tdocker push $(NAME):latest\n\nrelease: build test tag-latest push push-latest\n\ngit-tag-version: release\n\tgit tag -a v$(VERSION) -m \"v$(VERSION)\"\n\tgit push origin v$(VERSION)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 24.7822265625,
          "content": "# osixia/openldap\n\n[![Docker Pulls](https://img.shields.io/docker/pulls/osixia/openldap.svg)](https://hub.docker.com/r/osixia/openldap/)\n[![Docker Stars](https://img.shields.io/docker/stars/osixia/openldap.svg)](https://hub.docker.com/r/osixia/openldap/)\n[![Layers](https://images.microbadger.com/badges/image/osixia/openldap.svg)](https://hub.docker.com/r/osixia/openldap/)\n\nLatest release: 1.5.0 - [OpenLDAP 2.4.57](https://www.openldap.org/software/release/changes.html) -  [Changelog](CHANGELOG.md) | [Docker Hub](https://hub.docker.com/r/osixia/openldap/)Â \n\n**A docker image to run OpenLDAP.**\n\n> OpenLDAP website : [www.openldap.org](https://www.openldap.org/)\n\n\n- [osixia/openldap](#osixiaopenldap)\n\t- [Contributing](#contributing)\n\t- [Quick Start](#quick-start)\n\t- [Beginner Guide](#beginner-guide)\n\t\t- [Create new ldap server](#create-new-ldap-server)\n\t\t\t- [Data persistence](#data-persistence)\n\t\t\t- [Edit your server configuration](#edit-your-server-configuration)\n\t\t\t- [Seed ldap database with ldif](#seed-ldap-database-with-ldif)\n\t\t\t- [Seed from internal path](#seed-from-internal-path)\n\t\t- [Use an existing ldap database](#use-an-existing-ldap-database)\n\t\t- [Backup](#backup)\n\t\t- [Administrate your ldap server](#administrate-your-ldap-server)\n\t\t- [TLS](#tls)\n\t\t\t- [Use auto-generated certificate](#use-auto-generated-certificate)\n\t\t\t- [Use your own certificate](#use-your-own-certificate)\n\t\t\t- [Disable TLS](#disable-tls)\n\t\t- [Multi master replication](#multi-master-replication)\n\t\t- [Fix docker mounted file problems](#fix-docker-mounted-file-problems)\n\t\t- [Debug](#debug)\n\t- [Environment Variables](#environment-variables)\n\t\t- [Default.yaml](#defaultyaml)\n\t\t- [Default.startup.yaml](#defaultstartupyaml)\n\t\t- [Set your own environment variables](#set-your-own-environment-variables)\n\t\t\t- [Use command line argument](#use-command-line-argument)\n\t\t\t- [Link environment file](#link-environment-file)\n\t\t\t- [Docker Secrets](#docker-secrets)\n\t\t\t- [Make your own image or extend this image](#make-your-own-image-or-extend-this-image)\n\t- [Advanced User Guide](#advanced-user-guide)\n\t\t- [Extend osixia/openldap:1.5.0 image](#extend-osixiaopenldap150-image)\n\t\t- [Make your own openldap image](#make-your-own-openldap-image)\n\t\t- [Tests](#tests)\n\t\t- [Kubernetes](#kubernetes)\n\t\t- [Under the hood: osixia/light-baseimage](#under-the-hood-osixialight-baseimage)\n\t- [Security](#security)\n\t\t- [Known security issues](#known-security-issues)\n\t- [Changelog](#changelog)\n\n## Contributing\n\nIf you find this image useful here's how you can help:\n\n- Send a pull request with your kickass new features and bug fixes\n- Help new users with [issues](https://github.com/osixia/docker-openldap/issues) they may encounter\n- Support the development of this image and star this repo !\n\n## Quick Start\nRun OpenLDAP docker image:\n\n```sh\ndocker run --name my-openldap-container --detach osixia/openldap:1.5.0\n```\n\nDo not forget to add the port mapping for both port 389 and 636 if you wish to access the ldap server from another machine.\n\n```sh\ndocker run -p 389:389 -p 636:636 --name my-openldap-container --detach osixia/openldap:1.5.0\n```\n\nEither command starts a new container with OpenLDAP running inside. Let's make the first search in our LDAP container:\n\n```sh\ndocker exec my-openldap-container ldapsearch -x -H ldap://localhost -b dc=example,dc=org -D \"cn=admin,dc=example,dc=org\" -w admin\n```\n\nThis should output:\n\n\t# extended LDIF\n\t#\n\t# LDAPv3\n\t# base <dc=example,dc=org> with scope subtree\n\t# filter: (objectclass=*)\n\t# requesting: ALL\n\t#\n\n\t[...]\n\n\t# numResponses: 3\n\t# numEntries: 2\n\nIf you have the following error, OpenLDAP is not started yet, maybe you are too fast or maybe your computer is too slow, as you want... but wait for some time before retrying.\n\n\t\tldap_sasl_bind(SIMPLE): Can't contact LDAP server (-1)\n\n\n## Beginner Guide\n\n### Create new ldap server\n\nThis is the default behavior when you run this image.\nIt will create an empty ldap for the company **Example Inc.** and the domain **example.org**.\n\nBy default the admin has the password **admin**. All those default settings can be changed at the docker command line, for example:\n\n```sh\ndocker run \\\n\t--env LDAP_ORGANISATION=\"My Company\" \\\n\t--env LDAP_DOMAIN=\"my-company.com\" \\\n\t--env LDAP_ADMIN_PASSWORD=\"JonSn0w\" \\\n\t--detach osixia/openldap:1.5.0\n```\n\n#### Data persistence\n\nThe directories `/var/lib/ldap` (LDAP database files) and `/etc/ldap/slapd.d`  (LDAP config files) are used to persist the schema and data information, and should be mapped as volumes, so your ldap files are saved outside the container (see [Use an existing ldap database](#use-an-existing-ldap-database)). However it can be useful to not use volumes,\nin case the image should be delivered complete with test data - this is especially useful when deriving other images from this one.\n\nThe default uid and gid used by the image may map to surprising\ncounterparts in the host. If you need to match uid and gid in the\ncontainer and in the host, you can use build parameters\n`LDAP_OPENLDAP_UID` and `LDAP_OPENLDAP_GID` to set uid and gid\nexplicitly:\n\n```sh\ndocker build \\\n\t--build-arg LDAP_OPENLDAP_GID=1234 \\\n\t--build-arg LDAP_OPENLDAP_UID=2345 \\\n\t-t my_ldap_image .\ndocker run --name my_ldap_container -d my_ldap_image\n# this should output uid=2345(openldap) gid=1234(openldap) groups=1234(openldap)\ndocker exec my_ldap_container id openldap\n```\n\nFor more information about docker data volume, please refer to:\n\n> [https://docs.docker.com/engine/tutorials/dockervolumes/](https://docs.docker.com/engine/tutorials/dockervolumes/)\n\n#### Firewall issues on RHEL/CentOS\nDocker Engine doesn't work well with firewall-cmd and can cause issues if you're connecting to the LDAP server from another container on the same machine. You can fix this by running:\n```sh\n$ firewall-cmd --add-port=389/tcp --permanent\n$ firewall-cmd --add-port=636/tcp --permanent\n$ firewall-cmd --reload\n```\nLearn more about this issue at https://github.com/moby/moby/issues/32138\n\n#### Edit your server configuration\n\nDo not edit slapd.conf it's not used. To modify your server configuration use ldap utils: **ldapmodify / ldapadd / ldapdelete**\n\n#### Seed ldap database with ldif\n\nThis image can load ldif files at startup with either `ldapadd` or `ldapmodify`.\nMount `.ldif` in `/container/service/slapd/assets/config/bootstrap/ldif` directory if you want to overwrite image default bootstrap ldif files or in `/container/service/slapd/assets/config/bootstrap/ldif/custom` (recommended) to extend image config.\n\nFiles containing `changeType:` attributes will be loaded with `ldapmodify`.\n\nThe startup script provides some substitutions in bootstrap ldif files. Following substitutions are supported:\n\n- `{{ LDAP_BASE_DN }}`\n- `{{ LDAP_BACKEND }}`\n- `{{ LDAP_DOMAIN }}`\n- `{{ LDAP_READONLY_USER_USERNAME }}`\n- `{{ LDAP_READONLY_USER_PASSWORD_ENCRYPTED }}`\n\nOther `{{ * }}` substitutions are left unchanged.\n\nSince startup script modifies `ldif` files, you **must** add `--copy-service`\nargument to entrypoint if you don't want to overwrite them.\n\n```sh\n# single file example:\ndocker run \\\n\t--volume ./bootstrap.ldif:/container/service/slapd/assets/config/bootstrap/ldif/50-bootstrap.ldif \\\n\tosixia/openldap:1.5.0 --copy-service\n\n# directory example:\ndocker run \\\n\t--volume ./ldif:/container/service/slapd/assets/config/bootstrap/ldif/custom \\\n\tosixia/openldap:1.5.0 --copy-service\n```\n\n#### Seed from internal path\n\nThis image can load ldif and schema files at startup from an internal path. Additionally, certificates can be copied from an internal path. This is useful if a continuous integration service mounts automatically the working copy (sources) into a docker service, which has a relation to the ci job.\n\nFor example: Gitlab is not capable of mounting custom paths into docker services of a ci job, but Gitlab automatically mounts the working copy in every service container. So the working copy (sources) are accessible under `/builds` in every services\nof a ci job. The path to the working copy can be obtained via `${CI_PROJECT_DIR}`. See also: https://docs.gitlab.com/runner/executors/docker.html#build-directory-in-service\n\nThis may also work with other CI services, if they automatically mount the working directory to the services of a ci job like Gitlab ci does.\n\nIn order to seed ldif or schema files from internal path you must set the specific environment variable `LDAP_SEED_INTERNAL_LDIF_PATH` and/or `LDAP_SEED_INTERNAL_SCHEMA_PATH`. If set this will copy any files in the specified directory into the default seeding\ndirectories of this image.\n\nExample variables defined in gitlab-ci.yml:\n\n```yml\nvariables:\n  LDAP_SEED_INTERNAL_LDIF_PATH: \"${CI_PROJECT_DIR}/docker/openldap/ldif\"\n  LDAP_SEED_INTERNAL_SCHEMA_PATH: \"${CI_PROJECT_DIR}/docker/openldap/schema\"\n```\n\nAlso, certificates can be used by the internal path. The file, specified in a variable, will be copied in the default certificate directory of this image. If desired, you can use these with the LDAP_TLS_CRT_FILENAME, LDAP_TLS_KEY_FILENAME, LDAP_TLS_CA_CRT_FILENAME and LDAP_TLS_DH_PARAM_FILENAME to set a different filename in the default certificate directory of the image.\n\n\tvariables:\n        LDAP_SEED_INTERNAL_LDAP_TLS_CRT_FILE: \"${CI_PROJECT_DIR}/docker/certificates/certs/cert.pem\"\n        LDAP_SEED_INTERNAL_LDAP_TLS_KEY_FILE: \"${CI_PROJECT_DIR}/docker/certificates/certs/key.pem\"\n        LDAP_SEED_INTERNAL_LDAP_TLS_CA_CRT_FILE: \"${CI_PROJECT_DIR}/docker/certificates/ca/ca.pem\"\n        LDAP_SEED_INTERNAL_LDAP_TLS_DH_PARAM_FILE: \"${CI_PROJECT_DIR}/certificates/dhparam.pem\"\n\n### Use an existing ldap database\n\nThis can be achieved by mounting host directories as volume.\nAssuming you have a LDAP database on your docker host in the directory `/data/slapd/database`\nand the corresponding LDAP config files on your docker host in the directory `/data/slapd/config`\nsimply mount this directories as a volume to `/var/lib/ldap` and `/etc/ldap/slapd.d`:\n\n```sh\ndocker run \\\n\t--volume /data/slapd/database:/var/lib/ldap \\\n\t--volume /data/slapd/config:/etc/ldap/slapd.d \\\n\t--detach osixia/openldap:1.5.0\n```\n\nYou can also use data volume containers. Please refer to:\n> [https://docs.docker.com/engine/tutorials/dockervolumes/](https://docs.docker.com/engine/tutorials/dockervolumes/)\n\nNote: By default this image is waiting an **mdb**  database backend, if you want to use any other database backend set backend type via the LDAP_BACKEND environment variable.\n\n### Backup\nA simple solution to backup your ldap server, is our openldap-backup docker image:\n> [osixia/openldap-backup](https://github.com/osixia/docker-openldap-backup)\n\n### Administrate your ldap server\nIf you are looking for a simple solution to administrate your ldap server you can take a look at our phpLDAPadmin docker image:\n> [osixia/phpldapadmin](https://github.com/osixia/docker-phpLDAPadmin)\n\n### TLS\n\n#### Use auto-generated certificate\nBy default, TLS is already configured and enabled, certificate is created using container hostname (it can be set by docker run --hostname option eg: ldap.example.org).\n\n```sh\ndocker run --hostname ldap.my-company.com --detach osixia/openldap:1.5.0\n```\n\n#### Use your own certificate\n\nYou can set your custom certificate at run time, by mounting a directory containing those files to **/container/service/slapd/assets/certs** and adjust their name with the following environment variables:\n\n```sh\ndocker run \\\n\t--hostname ldap.example.org \\\n\t--volume /path/to/certificates:/container/service/slapd/assets/certs \\\n\t--env LDAP_TLS_CRT_FILENAME=my-ldap.crt \\\n\t--env LDAP_TLS_KEY_FILENAME=my-ldap.key \\\n\t--env LDAP_TLS_CA_CRT_FILENAME=the-ca.crt \\\n\t--detach osixia/openldap:1.5.0\n```\n\nOther solutions are available please refer to the [Advanced User Guide](#advanced-user-guide)\n\n#### Disable TLS\nAdd --env LDAP_TLS=false to the run command:\n\n\tdocker run --env LDAP_TLS=false --detach osixia/openldap:1.5.0\n\n### Multi master replication\nQuick example, with the default config.\n\n\t#Create the first ldap server, save the container id in LDAP_CID and get its IP:\n\tLDAP_CID=$(docker run --hostname ldap.example.org --env LDAP_REPLICATION=true --detach osixia/openldap:1.5.0)\n\tLDAP_IP=$(docker inspect -f \"{{ .NetworkSettings.IPAddress }}\" $LDAP_CID)\n\n\t#Create the second ldap server, save the container id in LDAP2_CID and get its IP:\n\tLDAP2_CID=$(docker run --hostname ldap2.example.org --env LDAP_REPLICATION=true --detach osixia/openldap:1.5.0)\n\tLDAP2_IP=$(docker inspect -f \"{{ .NetworkSettings.IPAddress }}\" $LDAP2_CID)\n\n\t#Add the pair \"ip hostname\" to /etc/hosts on each containers,\n\t#because ldap.example.org and ldap2.example.org are fake hostnames\n\tdocker exec $LDAP_CID bash -c \"echo $LDAP2_IP ldap2.example.org >> /etc/hosts\"\n\tdocker exec $LDAP2_CID bash -c \"echo $LDAP_IP ldap.example.org >> /etc/hosts\"\n\nThat's it! But a little test to be sure:\n\nAdd a new user \"billy\" on the first ldap server\n\n\tdocker exec $LDAP_CID ldapadd -x -D \"cn=admin,dc=example,dc=org\" -w admin -f /container/service/slapd/assets/test/new-user.ldif -H ldap://ldap.example.org -ZZ\n\nSearch on the second ldap server, and billy should show up!\n\n\tdocker exec $LDAP2_CID ldapsearch -x -H ldap://ldap2.example.org -b dc=example,dc=org -D \"cn=admin,dc=example,dc=org\" -w admin -ZZ\n\n\t[...]\n\n\t# billy, example.org\n\tdn: uid=billy,dc=example,dc=org\n\tuid: billy\n\tcn: billy\n\tsn: 3\n\tobjectClass: top\n\tobjectClass: posixAccount\n\tobjectClass: inetOrgPerson\n\t[...]\n\n### Fix docker mounted file problems\n\nYou may have some problems with mounted files on some systems. The startup script try to make some file adjustment and fix files owner and permissions, this can result in multiple errors. See [Docker documentation](https://docs.docker.com/v1.4/userguide/dockervolumes/#mount-a-host-file-as-a-data-volume).\n\nTo fix that run the container with `--copy-service` argument :\n\n\t\tdocker run [your options] osixia/openldap:1.5.0 --copy-service\n\n### Debug\n\nThe container default log level is **info**.\nAvailable levels are: `none`, `error`, `warning`, `info`, `debug` and `trace`.\n\nExample command to run the container in `debug` mode:\n\n```sh\ndocker run --detach osixia/openldap:1.5.0 --loglevel debug\n```\n\nSee all command line options:\n\n```sh\ndocker run osixia/openldap:1.5.0 --help\n```\n\n## Environment Variables\nEnvironment variables defaults are set in **image/environment/default.yaml** and **image/environment/default.startup.yaml**.\n\nSee how to [set your own environment variables](#set-your-own-environment-variables)\n\n### Default.yaml\nVariables defined in this file are available at anytime in the container environment.\n\nGeneral container configuration:\n- **LDAP_LOG_LEVEL**: Slap log level. defaults to  `256`. See table 5.1 in https://www.openldap.org/doc/admin24/slapdconf2.html for the available log levels.\n\n### Default.startup.yaml\nVariables defined in this file are only available during the container **first start** in **startup files**.\nThis file is deleted right after startup files are processed for the first time,\nthen all of these values will not be available in the container environment.\n\nThis helps to keep your container configuration secret. If you don't care all environment variables can be defined in **default.yaml** and everything will work fine.\n\nRequired and used for new ldap server only:\n- **LDAP_ORGANISATION**: Organisation name. Defaults to `Example Inc.`\n- **LDAP_DOMAIN**: Ldap domain. Defaults to `example.org`\n- **LDAP_BASE_DN**: Ldap base DN. If empty automatically set from LDAP_DOMAIN value. Defaults to `(empty)`\n- **LDAP_ADMIN_PASSWORD** Ldap Admin password. Defaults to `admin`\n- **LDAP_CONFIG_PASSWORD** Ldap Config password. Defaults to `config`\n\n- **LDAP_READONLY_USER** Add a read only user. Defaults to `false`\n  > **Note:** The read only user **does** have write access to its own password.\n- **LDAP_READONLY_USER_USERNAME** Read only user username. Defaults to `readonly`\n- **LDAP_READONLY_USER_PASSWORD** Read only user password. Defaults to `readonly`\n\n- **LDAP_RFC2307BIS_SCHEMA** Use rfc2307bis schema instead of nis schema. Defaults to `false`\n\nBackend:\n- **LDAP_BACKEND**: Ldap backend. Defaults to `mdb` (previously hdb in image versions up to v1.1.10)\n\n\tHelp: https://www.openldap.org/doc/admin24/backends.html\n\nTLS options:\n- **LDAP_TLS**: Add openldap TLS capabilities. Can't be removed once set to true. Defaults to `true`.\n- **LDAP_TLS_CRT_FILENAME**: Ldap ssl certificate filename. Defaults to `ldap.crt`\n- **LDAP_TLS_KEY_FILENAME**: Ldap ssl certificate private key filename. Defaults to `ldap.key`\n- **LDAP_TLS_DH_PARAM_FILENAME**: Ldap ssl certificate dh param file. Defaults to `dhparam.pem`\n- **LDAP_TLS_CA_CRT_FILENAME**: Ldap ssl CA certificate  filename. Defaults to `ca.crt`\n- **LDAP_TLS_ENFORCE**: Enforce TLS but except ldapi connections. Can't be disabled once set to true. Defaults to `false`.\n- **LDAP_TLS_CIPHER_SUITE**: TLS cipher suite. Defaults to `SECURE256:+SECURE128:-VERS-TLS-ALL:+VERS-TLS1.2:-RSA:-DHE-DSS:-CAMELLIA-128-CBC:-CAMELLIA-256-CBC`, based on Red Hat's [TLS hardening guide](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Security_Guide/sec-Hardening_TLS_Configuration.html)\n- **LDAP_TLS_VERIFY_CLIENT**: TLS verify client. Defaults to `demand`\n\n\tHelp: https://www.openldap.org/doc/admin24/tls.html\n\nReplication options:\n- **LDAP_REPLICATION**: Add openldap replication capabilities. Possible values : `true`, `false`, `own`. Defaults to `false`. Setting this to `own` allow to provide own replication settings via custom bootstrap ldifs.\n\n- **LDAP_REPLICATION_CONFIG_SYNCPROV**: olcSyncRepl options used for the config database. Without **rid** and **provider** which are automatically added based on LDAP_REPLICATION_HOSTS.  Defaults to `binddn=\"cn=admin,cn=config\" bindmethod=simple credentials=$LDAP_CONFIG_PASSWORD searchbase=\"cn=config\" type=refreshAndPersist retry=\"60 +\" timeout=1 starttls=critical`\n\n- **LDAP_REPLICATION_DB_SYNCPROV**: olcSyncRepl options used for the database. Without **rid** and **provider** which are automatically added based on LDAP_REPLICATION_HOSTS.  Defaults to `binddn=\"cn=admin,$LDAP_BASE_DN\" bindmethod=simple credentials=$LDAP_ADMIN_PASSWORD searchbase=\"$LDAP_BASE_DN\" type=refreshAndPersist interval=00:00:00:10 retry=\"60 +\" timeout=1 starttls=critical`\n\n- **LDAP_REPLICATION_HOSTS**: list of replication hosts, must contain the current container hostname set by --hostname on docker run command. Defaults to :\n\t```yaml\n  - ldap://ldap.example.org\n  - ldap://ldap2.example.org\n\t```\n\n\tIf you want to set this variable at docker run command add the tag `#PYTHON2BASH:` and convert the yaml in python:\n\n\t\tdocker run --env LDAP_REPLICATION_HOSTS=\"#PYTHON2BASH:['ldap://ldap.example.org','ldap://ldap2.example.org']\" --detach osixia/openldap:1.5.0\n\n\tTo convert yaml to python online: https://yaml-online-parser.appspot.com/\n\nOther environment variables:\n- **KEEP_EXISTING_CONFIG**: Do not change the ldap config. Defaults to `false`\n\t- if set to *true* with an existing database, config will remain unchanged. Image tls and replication config will not be run. The container can be started with LDAP_ADMIN_PASSWORD and LDAP_CONFIG_PASSWORD empty or filled with fake data.\n\t- if set to *true* when bootstrapping a new database, bootstrap ldif and schema will not be added and tls and replication config will not be run.\n\n- **LDAP_REMOVE_CONFIG_AFTER_SETUP**: delete config folder after setup. Defaults to `true`\n- **LDAP_SSL_HELPER_PREFIX**: ssl-helper environment variables prefix. Defaults to `ldap`, ssl-helper first search config from LDAP_SSL_HELPER_* variables, before SSL_HELPER_* variables.\n- **HOSTNAME**: set the hostname of the running openldap server. Defaults to whatever docker creates.\n- **DISABLE_CHOWN**: do not perform any chown to fix file ownership. Defaults to `false`\n- LDAP_OPENLDAP_UID: runtime docker user uid to run container as\n- LDAP_OPENLDAP_GID: runtime docker user gid to run container as\n\n\n### Set your own environment variables\n\n#### Use command line argument\nEnvironment variables can be set by adding the --env argument in the command line, for example:\n\n```sh\ndocker run \\\n\t--env LDAP_ORGANISATION=\"My company\" \\\n\t--env LDAP_DOMAIN=\"my-company.com\" \\\n\t--env LDAP_ADMIN_PASSWORD=\"JonSn0w\" \\\n\t--detach osixia/openldap:1.5.0\n```\n\nBe aware that environment variable added in command line will be available at any time\nin the container. In this example if someone manage to open a terminal in this container\nhe will be able to read the admin password in clear text from environment variables.\n\n#### Link environment file\n\nFor example if your environment files **my-env.yaml** and **my-env.startup.yaml** are in /data/ldap/environment\n\n```sh\ndocker run \\\n\t--volume /data/ldap/environment:/container/environment/01-custom \\\n\t--detach osixia/openldap:1.5.0\n```\n\nTake care to link your environment files folder to `/container/environment/XX-somedir` (with XX < 99 so they will be processed before default environment files) and not  directly to `/container/environment` because this directory contains predefined baseimage environment files to fix container environment (INITRD, LANG, LANGUAGE and LC_CTYPE).\n\nNote: the container will try to delete the **\\*.startup.yaml** file after the end of startup files so the file will also be deleted on the docker host. To prevent that : use --volume /data/ldap/environment:/container/environment/01-custom**:ro** or set all variables in **\\*.yaml** file and don't use **\\*.startup.yaml**:\n\n```sh\ndocker run \\\n\t--volume /data/ldap/environment/my-env.yaml:/container/environment/01-custom/env.yaml \\\n\t--detach osixia/openldap:1.5.0\n```\n\n#### Docker Secrets\n\nAs an alternative to passing sensitive information via environmental variables, _FILE may be appended to the listed variables, causing\nthe startup.sh script to load the values for those values from files presented in the container. This is particular useful for loading\npasswords using the [Docker secrets](https://docs.docker.com/engine/swarm/secrets/) mechanism. For example:\n\n```sh\ndocker run \\\n\t--env LDAP_ORGANISATION=\"My company\" \\\n\t--env LDAP_DOMAIN=\"my-company.com\" \\\n\t--env LDAP_ADMIN_PASSWORD_FILE=/run/secrets/ \\\n\tauthentication_admin_pw \\\n\t--detach osixia/openldap:1.2.4\n```\n\nCurrently this is only supported for LDAP_ADMIN_PASSWORD, LDAP_CONFIG_PASSWORD, LDAP_READONLY_USER_PASSWORD\n\n#### Make your own image or extend this image\n\nThis is the best solution if you have a private registry. Please refer to the [Advanced User Guide](#advanced-user-guide) just below.\n\n## Advanced User Guide\n\n### Extend osixia/openldap:1.5.0 image\n\nIf you need to add your custom TLS certificate, bootstrap config or environment files the easiest way is to extends this image.\n\nDockerfile example:\n\n```dockerfile\nFROM osixia/openldap:1.5.0\nLABEL maintainer=\"Your Name <your@name.com>\"\n\nADD bootstrap /container/service/slapd/assets/config/bootstrap\nADD certs /container/service/slapd/assets/certs\nADD environment /container/environment/01-custom\n```\n\nSee complete example in **example/extend-osixia-openldap**\n\nWarning: if you want to install new packages from debian repositories, this image has a configuration to prevent documentation and locales to be installed. If you need the doc and locales remove the following files :\n**/etc/dpkg/dpkg.cfg.d/01_nodoc** and **/etc/dpkg/dpkg.cfg.d/01_nolocales**\n\n### Make your own openldap image\n\nClone this project:\n\n```sh\ngit clone https://github.com/osixia/docker-openldap\ncd docker-openldap\n```\n\nAdapt Makefile, set your image NAME and VERSION, for example:\n\n```makefile\nNAME = osixia/openldap\nVERSION = 1.1.9\n```\n\nbecome:\n\n```makefile\nNAME = cool-guy/openldap\nVERSION = 0.1.0\n```\n\nAdd your custom certificate, bootstrap ldif and environment files...\n\nBuild your image:\n\n```sh\nmake build\n```\n\nRun your image:\n\n```sh\ndocker run --detach cool-guy/openldap:0.1.0\n```\n\n### Tests\n\nWe use **Bats** (Bash Automated Testing System) to test this image:\n\n> [https://github.com/bats-core/bats-core](https://github.com/bats-core/bats-core)\n\nInstall Bats, and in this project directory run:\n\n```sh\nmake test\n```\n\n### Kubernetes\n\nKubernetes is an open source system for managing containerized applications across multiple hosts, providing basic mechanisms for deployment, maintenance, and scaling of applications.\n\nMore information:\n- https://kubernetes.io/\n- https://github.com/kubernetes/kubernetes\n\nosixia-openldap kubernetes examples are available in **example/kubernetes**\n\n### Under the hood: osixia/light-baseimage\n\nThis image is based on osixia/light-baseimage.\nIt uses the following features:\n\n- **ssl-tools** service to generate tls certificates\n- **log-helper** tool to print log messages based on the log level\n- **run** tool as entrypoint to init the container environment\n\nTo fully understand how this image works take a look at:\nhttps://github.com/osixia/docker-light-baseimage\n\n## Security\nIf you discover a security vulnerability within this docker image, please send an email to the Osixia! team at security@osixia.net. For minor vulnerabilities feel free to add an issue here on github.\n\nPlease include as many details as possible.\n\n### Known security issues\nOpenLDAP on debian creates two admin users with the same password, if you changed admin password after bootstrap you may be concerned by issue #161.\n\n## Changelog\n\nPlease refer to: [CHANGELOG.md](CHANGELOG.md)\n"
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "image",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}