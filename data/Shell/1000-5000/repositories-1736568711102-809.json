{
  "metadata": {
    "timestamp": 1736568711102,
    "page": 809,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgxOQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "CodelyTV/dotly",
      "stars": 1213,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1474609375,
          "content": "root = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\nindent_style = tab\ninsert_final_newline = true\nmax_line_length = 100\ntrim_trailing_whitespace = true\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.04296875,
          "content": "shell/zsh/**/**.zwc\nshell/zsh/**/**.zwc.old\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.2080078125,
          "content": "[submodule \"modules/dotbot\"]\n\tpath = modules/dotbot\n\turl = https://github.com/anishathalye/dotbot.git\n\tignore = dirty\n[submodule \"modules/z\"]\n\tpath = modules/z\n\turl = https://github.com/rupa/z.git\n\tignore = dirty\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.091796875,
          "content": "MIT License\n\nCopyright (c) 2021 Codely Enseña y Entretiene SL soporte+github-dotly@codely.tv\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.296875,
          "content": "<div align=\"center\">\n  <a href=\"https://codely.tv\">\n    <img src=\"https://user-images.githubusercontent.com/1331435/141520189-90349bbd-3e0f-4200-8b76-f4297be11898.png\" />\n  </a>\n</div>\n<div align=\"center\">\n  <h1>⚡️ Simple and fast dotfiles framework ⚡️</h1>\n  <strong>The path to increasing your productivity on macOS, Linux and WSL</strong>\n</div>\n<br>\n<p align=\"center\">\n    <a href=\"https://github.com/CodelyTV\"><img src=\"https://img.shields.io/badge/CodelyTV-OS-green.svg?style=flat-square\" alt=\"codely.tv\"/></a>\n    <a href=\"https://pro.codely.tv\"><img src=\"https://img.shields.io/badge/CodelyTV-PRO-black.svg?style=flat-square\" alt=\"CodelyTV Courses\"/></a>\n    <a href=\"https://github.com/CodelyTV/dotly/actions\"><img src=\"https://github.com/CodelyTV/dotly/workflows/CI/badge.svg\" alt=\"CI pipeline status\"/></a>\n</p>\n\ndotly is a dotfiles framework built on top of [zim](https://github.com/zimfw/zimfw), one of the fastest zsh existing\nframeworks. It creates an opinionated dotfiles structure to handle all your configs and scripts.\n\n## 🚀 Installation\n\nUsing wget:\n\n```bash\nbash <(wget -qO- https://raw.githubusercontent.com/CodelyTV/dotly/HEAD/installer)\n```\n\nOr using curl:\n\n```bash\nbash <(curl -s https://raw.githubusercontent.com/CodelyTV/dotly/HEAD/installer)\n```\n\n## 🐳 Try it in Docker\n\nYou can safely install additional software and make any changes to the file system. Once you exit zsh the image is\ndeleted.\n\n<details>\n<summary>Using Alpine:</summary>\n\n```bash\ndocker run -e TERM -e COLORTERM -e LC_ALL=C.UTF-8 -w /root -it --rm alpine sh -uec '\n  apk add curl sudo bash zsh git g++ python3\n  bash -c \"$(curl -fsSL https://raw.githubusercontent.com/CodelyTV/dotly/HEAD/installer)\"\n  zsh'\n```\n</details>\n\n<details>\n<summary>Or using Ubuntu:</summary>\n\n```bash\ndocker run -e TERM -e COLORTERM -w /root -it --rm ubuntu sh -uec '\n  apt-get update\n  apt-get install -y curl build-essential sudo\n  su -c bash -c \"$(curl -fsSL https://raw.githubusercontent.com/CodelyTV/dotly/HEAD/installer)\"\n  su -c zsh'\n```\n</details>\n\n## Restore your Dotfiles manually\n\n* Install git\n* Clone your dotfiles repository `git clone [your repository of dotfiles] $HOME/.dotfiles`\n* Go to your dotfiles folder `cd $HOME/.dotfiles`\n* Install git submodules `git submodule update --init --recursive modules/dotly`\n* Install your dotfiles `DOTFILES_PATH=\"$HOME/.dotfiles\" DOTLY_PATH=\"$DOTFILES_PATH/modules/dotly\" \"$DOTLY_PATH/bin/dot\" self install`\n* Restart your terminal\n* Import your packages `dot package import`\n\n## Restore your Dotfiles with script\n\nUsing wget\n```bash\nbash <(wget -qO- https://raw.githubusercontent.com/CodelyTV/dotly/HEAD/restorer)\n```\n\nUsing curl\n```bash\nbash <(curl -s https://raw.githubusercontent.com/CodelyTV/dotly/HEAD/restorer)\n```\n\n🔒 You need to know your GitHub username, repository and install ssh key if your repository is private.\n\nIt also supports other git repos, but you need to know your git repository url.\n\n## 💻 Usage\n\n### 🚶 First steps\n\nOnce dotly is installed, the next step is to commit and push your dotfiles. Create a new repository in your GitHub\nnamed `dotfiles` and then copy the url. Then go to your dotfiles (`cd \"$DOTFILES_PATH\"`) and execute:\n\n```bash\ngit remote add origin YOUR_DOTFILES_REPO_URL &&\ngit add -A &&\ngit commit -m \"Initial commit\" &&\ngit push origin main\n```\n\n⚠️ It's recommended to commit every time you add/modify a config or script.\n\n### 🌚 The `dot` command\n\n`dot` is the core command of dotly. If you execute it, you'll see all your scripts.\n\n```bash\n{▸} ~ dot -h\nUsage:\n   dot\n   dot <context>\n   dot <context> <script> [<args>...]\n   dot -h | --help\n ```\n\n### 🌴 Understanding your dotfiles folder structure\n\n```bash\n├── 📁 bin                 # External binaries/symlinks. This folder has preference in your $PATH\n├── 📁 doc                 # Documentation of your dotfiles\n├── 📁 editors             # Settings of your editors (vscode, IDEA, …)\n├── 📁 git                 # git config\n├── 📁 langs               # Config for programming languages/libraries\n├── 📁 os                  # Specific config of your Operative System or apps\n├── 📁 restoration_scripts # This will be execute when you restore your dotfiles in another computer/installation\n├── 📁 scripts             # Your custom scripts\n├── 📁 shell               # Bash/Zsh/Fish?… configuration files\n└── 📁 symlinks            # The config of your symlinks\n```\n\n### ⚙️ Versioning configs\n\ndotly allows you to version your apps' config files. Once you've found the config to version you should:\n\n1. Copy your config file inside your dotfiles so this will be the source of truth.\n   E.g. `cp ~/Library/Application Support/Code/User/settings.json $DOTFILES_PATH/editors/code/settings.json`\n2. Symlink this file. To do this you should edit your `$DOTFILES_PATH/symlinks/conf.YOUR-OS.yaml` and add it.\n   E.g. `~/Library/Application Support/Code/User/settings.json: editors/code/settings.json`\n\n### 🎨 Customization\n\ndotly includes an opinionated, minimal, very fast and powerful theme by default. You can configure it using the\nfollowing parameters in your `shell/exports.sh`:\n\n```bash\nCODELY_THEME_MINIMAL=false|true  # If true the theme will only show the prompt status\nCODELY_THEME_MODE=\"dark\"|\"light\" # Use dark if you use dark colors, light if light\nCODELY_THEME_PROMPT_IN_NEW_LINE=false|true           # If true the prompt will be in a newline\nCODELY_THEME_PWD_MODE=\"short\"|\"full\"|\"home_relative\" # short will show the first letter of each directory, full the full path and home_relative the full path relative to the $HOME dir\nCODELY_THEME_STATUS_ICON_KO=\"▪\" # The icon to show if the previous command failed. Useful if you're color blind\n```\n\n### 💾 Default scripts\n\n```bash\n├── 📁 dotfiles\n│  ├── create # Creates the dotfiles scructure\n│  └── import # Import an existing dotfiles\n├── 📁 git\n│  ├── amend           # Amend a commit\n│  ├── apply-gitignore # Exlude all commited files that are inside the project .gitignore\n│  ├── changed-files   # Show all changed files to main\n│  ├── commit          # Add all files and then commit\n│  ├── contributors    # List contributors with number of commits\n│  ├── find            # Find commits by commit message\n│  ├── pretty-diff     # Show a pretty git diff using fzf (and copy selected path to the clipboard)\n│  ├── pretty-log      # Git log filtering\n│  └── rm-file-history # Remove completely a file from the repo with its history\n├── 📁 mac\n│  ├── brew     # Some brew utils\n│  └── defaults # Some defaults utils to view your changes, import and export\n├── 📁 package\n│  ├── add        # Install a package\n│  ├── dump       # Dump all installed packages\n│  ├── import     # Import previously dumped packages\n│  └── update_all # Update all packages\n├── 📁 self # Instead of `dot self` you can use direclty `dotly` in your terminal\n│  ├── debug           # Debug dotly\n│  ├── install         # Install dotly and setup dotfiles\n│  ├── lint            # Lint all dotly related bash files\n│  ├── static_analysis # Static analysis of all dotly related bash files\n│  └── update          # Update dotly to the latest stable release\n├── 📁 shell\n│  └── zsh # ZSH helpers\n└── 📁 symlinks\n    └── apply # Apply all symlinks\n```\n\n### 💽 Alias\n\nYou can see the default aliases [here](dotfiles_template/shell/aliases.sh). The most commonly used are:\n\n* `..`: cd one directory up\n* `la`: ls all files/dirs with colors\n* `up`: Update all your package managers packages\n\n## 📽️ Feature showcase (Spanish)\n\nFor an in-depth look at the features offered by dotly, you can take a look at [this video](https://www.youtube.com/watch?v=kCBvPb8qAAE):\n\n[![Watch the video](https://img.youtube.com/vi/kCBvPb8qAAE/maxresdefault.jpg)](https://youtu.be/kCBvPb8qAAE)\n\n## ⁉️ Troubleshooting\n\nYou can execute `dot self debug` in parallel with another command to see the errors output.\n\n## 🤝 Contributing\n\n* If you want to implement a new feature/script, please, open an issue first\n\n## 😊 Thanks\n\nA lot of dotly concepts has been inspired by [denisidoro/dotfiles](https://github.com/denisidoro/dotfiles)\n\n## ⚖️ LICENSE\n\nMIT © [CodelyTV](https://codely.tv)\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "dotfiles_template",
          "type": "tree",
          "content": null
        },
        {
          "name": "installer",
          "type": "blob",
          "size": 4.1904296875,
          "content": "#!/usr/bin/env bash\n\nset -euo pipefail\n\n##? Setups the environment\n##?\n##? Usage:\n##?    installer\n\nDOTLY_REPOSITORY=${DOTLY_REPOSITORY:-CodelyTV/dotly}\nDOTLY_BRANCH=${DOTLY_BRANCH:-main}\nDOTLY_LOG_FILE=${DOTLY_LOG_FILE:-$HOME/dotly.log}\nexport DOTLY_ENV=${DOTLY_ENV:-PROD}\nexport DOTLY_INSTALLER=true\n\nred='\\033[0;31m'\ngreen='\\033[0;32m'\npurple='\\033[0;35m'\nnormal='\\033[0m'\n\n_w() {\n\tlocal -r text=\"${1-}\"\n\techo -e \"$text\"\n}\n_a() { _w \" > $1\"; }\n_e() { _a \"${red}$1${normal}\"; }\n_s() { _a \"${green}$1${normal}\"; }\n_q() { read -rp \"🤔 $1: \" \"$2\"; }\n\n_log() {\n\tlog_name=\"$1\"\n\tcurrent_date=$(date \"+%Y-%m-%d %H:%M:%S\")\n\n\ttouch \"$DOTLY_LOG_FILE\"\n\techo \"----- $current_date - $log_name -----\" >>\"$DOTLY_LOG_FILE\"\n\n\twhile IFS= read -r log_message; do\n\t\techo \"$log_message\" >>\"$DOTLY_LOG_FILE\"\n\tdone\n\n\techo \"\" >>\"$DOTLY_LOG_FILE\"\n}\n\ncurrent_timestamp() { date +%s; }\n\ncreate_dotfiles_dir() {\n\tif [ -d \"$1\" ]; then\n\t\tlocal -r backup_path=\"$1.$(current_timestamp).back\"\n\n\t\t_e \"The path '$1' already exist\"\n\t\t_s \"Creating a backup in '$backup_path'\"\n\n\t\tmv \"$1\" \"$backup_path\"\n\telse\n\t\t_a \"Ok! dotfiles will be located in: ${purple}$DOTFILES_PATH${normal}\"\n\tfi\n\n\tmkdir -p \"$1\"\n}\n\ncommand_exists() {\n\ttype \"$1\" >/dev/null 2>&1\n}\n\n_w \"  ┌────────────────────────────────────┐\"\n_w \"~ │ 🚀 Welcome to the ${green}dotly${normal} installer! │ ~\"\n_w \"  └────────────────────────────────────┘\"\n_w\n_q \"Where do you want your dotfiles to be located? (default ~/.dotfiles)\" \"DOTFILES_PATH\"\nDOTFILES_PATH=\"${DOTFILES_PATH:-$HOME/.dotfiles}\"\nDOTFILES_PATH=\"$(eval echo \"$DOTFILES_PATH\")\"\nexport DOTFILES_PATH=\"$DOTFILES_PATH\"\n\ndotly_inner_path=\"modules/dotly\"\nexport DOTLY_PATH=\"$DOTFILES_PATH/$dotly_inner_path\"\n\ncreate_dotfiles_dir \"$DOTFILES_PATH\"\ncd \"$DOTFILES_PATH\"\n\nif ! command_exists git; then\n\t_e \"git not installed, trying to install\"\n\n\tif command_exists apt; then\n\t\t_a \"Installing using apt\"\n\t\tsudo apt -y install git 2>&1 | _log \"Installing git\"\n\telif command_exists dnf; then\n\t\t_a \"Installing using dnf\"\n\t\tsudo dnf -y install git 2>&1 | _log \"Installing git\"\n\telif command_exists yum; then\n\t\t_a \"Installing using yum\"\n\t\tyes | sudo yum install git 2>&1 | _log \"Installing git\"\n\telif command_exists brew; then\n\t\t_a \"Installing using brew\"\n\t\tyes | brew install git 2>&1 | _log \"Installing git\"\n\telif command_exists pacman; then\n\t\t_a \"Installing using pacman\"\n\t\tsudo pacman -S --noconfirm git 2>&1 | _log \"Installing git\"\n\telse\n\t\tcase \"$OSTYPE\" in\n\t\tdarwin*)\n\t\t\t_a \"Checking if Command Line Tools are installed 🕵️‍♂️\"\n\n\t\t\txcode-select --install 2>&1 | grep installed >/dev/null\n\t\t\tif [[ $? ]]; then\n\t\t\t\t_a \"Installing Command Line Tools 📺\"\n\t\t\t\txcode-select --install\n\t\t\t\t_q \"Press a key after command line tools has finished to continue...👇\" \"CLT_INSTALLED\"\n\t\t\tfi\n\t\t\t;;\n\t\t*)\n\t\t\t_e \"Could not install git, no package provider found\"\n\t\t\texit 1\n\t\t\t;;\n\t\tesac\n\tfi\nfi\n\nif ! command_exists curl; then\n\t_e \"curl not installed, trying to install\"\n\n\tif command_exists apt; then\n\t\t_a \"Installing using apt\"\n\t\tsudo apt -y install curl 2>&1 | _log \"Installing curl\"\n\telif command_exists dnf; then\n\t\t_a \"Installing using dnf\"\n\t\tsudo dnf -y install curl 2>&1 | _log \"Installing curl\"\n\telif command_exists yum; then\n\t\t_a \"Installing using yum\"\n\t\tyes | sudo yum install curl 2>&1 | _log \"Installing curl\"\n\telif command_exists brew; then\n\t\t_a \"Installing using brew\"\n\t\tyes | brew install curl 2>&1 | _log \"Installing curl\"\n\telif command_exists pacman; then\n\t\t_a \"Installing using pacman\"\n\t\tsudo pacman -S --noconfirm curl 2>&1 | _log \"Installing curl\"\n\telse\n\t\t_e \"Could not install curl, no package provider found\"\n\t\texit 1\n\tfi\nfi\n\n_a \"Initializing your dotfiles git repository\"\ngit init 2>&1 | _log \"Initializing repository\"\n\n_a \"Cloning dotly\"\ngit submodule add -b \"$DOTLY_BRANCH\" \"https://github.com/$DOTLY_REPOSITORY.git\" \"$dotly_inner_path\" 2>&1 | _log \"Adding dotly submodule\"\n\n_a \"Installing dotly dependencies\"\ngit submodule update --init --recursive 2>&1 | _log \"Installing dotly dependencies\"\n\ncd \"$DOTLY_PATH\"\n\n\"$PWD/bin/dot\" self install\n\n_a \"🎉 dotly installed correctly! 🎉\"\n_a \"Please, restart your terminal to see the changes\"\n"
        },
        {
          "name": "modules",
          "type": "tree",
          "content": null
        },
        {
          "name": "restorer",
          "type": "blob",
          "size": 10.8232421875,
          "content": "#!/usr/bin/env bash\n\nset -euo pipefail\n\n##? Setups the environment\n##?\n##? Usage:\n##?    restorer [-c | --continue]\n##?\n##? Options:\n##?    -h --help      Prints this help\n##?    -v --version   Prints this script version\n##?    -c --continue  Continue previous install without cloning again your\n##?                   dotfiles if they exists. Useful if previous restore fails.\n##?\n\n# Script variables\nSCRIPT_NAME=\"Dotly dotfiles recovery\"\nSCRIPT_VERSION=\"v1.0.0\"\n\n# Default values\ncontinue=false\n\n# Arguments\nwhile [[ $# -gt 0 ]]; do\n\tcase \"$1\" in\n\t--help | -h)\n\t\tcat <<EOF\nUsage:\n   install [-c | --continue]\n\nOptions:\n   -h --help      Prints this help\n   -v --version   Prints this script version\n   -c --continue  Continue previous install withour cloning again your\n                  dotfiles if they exists. Useful if previous restore fails.\n\nEOF\n\t\texit 0\n\t\t;;\n\t--version | -v)\n\t\techo \"$SCRIPT_NAME $SCRIPT_VERSION\"\n\t\techo\n\t\texit 0\n\t\t;;\n\t--continue | -c)\n\t\tcontinue=true\n\t\t;;\n\t*) ;;\n\n\tesac\ndone\n\nDOTLY_LOG_FILE=${DOTLY_LOG_FILE:-$HOME/dotly.log}\nexport DOTLY_ENV=${DOTLY_ENV:-PROD}\nexport DOTLY_INSTALLER=true\n\nred='\\033[0;31m'\ngreen='\\033[0;32m'\npurple='\\033[0;35m'\nnormal='\\033[0m'\n\n_w() {\n\tlocal -r text=\"${1-}\"\n\techo -e \"$text\"\n}\n_a() { _w \" > $1\"; }\n_e() { _a \"${red}$1${normal}\"; }\n_s() { _a \"${green}$1${normal}\"; }\n_q() { read -rp \"🤔 $1 : \" \"$2\"; }\n_pk() { read -rp \"Press a key to ${1}... 👇\" \"REPLY\"; }\n\n_log() {\n\tlog_name=\"$1\"\n\tcurrent_date=$(date \"+%Y-%m-%d %H:%M:%S\")\n\n\ttouch \"$DOTLY_LOG_FILE\"\n\techo \"----- $current_date - $log_name -----\" >>\"$DOTLY_LOG_FILE\"\n\n\twhile IFS= read -r log_message; do\n\t\techo \"$log_message\" >>\"$DOTLY_LOG_FILE\"\n\tdone\n\n\techo \"\" >>\"$DOTLY_LOG_FILE\"\n}\n\ncurrent_timestamp() { date +%s; }\n\nbackup_dotfiles_dir() {\n\tif [ -d \"${1-}\" ]; then\n\t\tlocal -r backup_path=\"$1.$(current_timestamp).back\"\n\n\t\t_e \"The path '$1' already exist\"\n\t\t_s \"Creating a backup in '$backup_path'\"\n\n\t\tmv \"$1\" \"$backup_path\"\n\telse\n\t\t_a \"Ok! dotfiles will be located in: ${purple}$DOTFILES_PATH${normal}\"\n\tfi\n\n\t[[ -n ${1-} ]] && mkdir -p \"$(dirname \"${1-}\")\"\n}\n\ncommand_exists() {\n\ttype \"$1\" >/dev/null 2>&1\n}\n\ninstall_brew_osx() {\n\tif [[ $OSTYPE =~ ^[darwin] ]] && ! command_exists brew; then\n\t\t_w \"Installing brew package manager for macOS 💾\"\n\t\t/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\tfi\n}\n\npackage_install() {\n\tinstall_brew_osx #Without this it will try to use apt\n\t# Because apt that is not package manager exists on macOS\n\n\tif command_exists dnf; then\n\t\t_a \"Installing '${*}' using dnf\"\n\t\tsudo dnf -y install \"${*}\" >/dev/null 2>&1 | _log \"Installing '${*}' using dnf\"\n\telif command_exists yum; then\n\t\t_a \"Installing '${*}' using yum\"\n\t\tyes | sudo yum install \"${*}\" >/dev/null 2>&1 | _log \"Installing '${*}' using yum\"\n\telif command_exists brew; then\n\t\t_a \"Installing '${*}' using brew\"\n\t\tyes | brew install \"${*}\" 2>&1 | _log \"Installign '${*}' using brew\"\n\telif command_exists pacman; then\n\t\t_a \"Installing '${*}' using pacman\"\n\t\tsudo pacman -S --noconfirm \"${*}\" >/dev/null 2>&1 | _log \"Installign '${*}' using pacman\"\n\telif command_exists apt; then\n\t\t_a \"Installing '${*}' using apt\"\n\t\tsudo apt -y install \"${*}\" >/dev/null 2>&1 | _log \"Installign '${*}' using apt\"\n\telse\n\t\t_e \"Could not install '${*}', no package provider found\"\n\t\treturn 1\n\tfi\n\n\treturn 0\n}\n\n_w \"  ┌────────────────────────────────────┐\"\n_w \"~ │ 🚀 Welcome to the ${green}dotly${normal} restorer!  │ ~\"\n_w \"  └────────────────────────────────────┘\"\n_w\n\n# Git Install\n# In MacOS git is installed if Command Line Tools (CLT) are installed\n# and not if git command exists because it exists but ask you to\n# install CLT.\n\n_w \"Checking if Git is installed\"\nif [[ $OSTYPE =~ ^[darwin] ]] && ! ls /Library/Developer/CommandLineTools >/dev/null 2>&1; then\n\t# In macOS if we do not have CLT then we do not have git. This could be wrong\n\t# but we will want brew later and if we do not have CLT we can not have brew\n\t#\n\t# Brew manages the installation of brew so we will intall Brew\n\t_w \"Command Line Tools could not be detected\"\n\tinstall_brew_osx\n\t_w\nfi\n\nif ! command_exists git; then\n\t# Other OS checking if git exists...\n\tif ! package_install git; then\n\t\t_e \"Could not continue without git\"\n\t\texit 1\n\tfi\nfi\n_s \"Git command exists on this system\"\n_w\n\n# Check if curl command exists and try to install it if not\nif ! command_exists curl; then\n\t# Other OS checking if git exists...\n\tif ! package_install curl; then\n\t\t_e \"Could not continue without git\"\n\t\texit 1\n\tfi\nfi\n_s \"Curl command exists on this system\"\n\n# Files locations\n_q \"Where do you want your dotfiles to be located? (default ~/.dotfiles)\" \"DOTFILES_PATH\"\nDOTFILES_PATH=\"$(eval echo \"${DOTFILES_PATH:-$HOME/.dotfiles}\")\"\nexport DOTFILES_PATH\n\ndotly_inner_path=\"modules/dotly\"\nexport DOTLY_PATH=\"$DOTFILES_PATH/$dotly_inner_path\"\n\n# Backup if currently there are any dotfiles and prepare parent directory\nif [[ -d $DOTFILES_PATH ]] && ! ${continue-}; then\n\t_q \"🗂 Your DOTFILES_PATH is not empty. Do you want to do a backup first? [Y/n]\" \"PROMPT_REPLY\"\n\t[[ ${PROMPT_REPLY:-Y} =~ ^[Yy] ]] && backup_dotfiles_dir \"$DOTFILES_PATH\"\nfi\n\nif [[ ! -d $DOTFILES_PATH ]]; then\n\t# Menu to select from where you want to restore your files\n\tPS3=\"From where you want to install your dotfiles: \"\n\toptions=(\"GitHub\" \"Keybase\" \"Other Git alternative\" \"Quit\")\n\tGIT_URL=\"\"\n\tselect opt in \"${options[@]}\"; do\n\t\tcase $opt in\n\t\t\"GitHub\")\n\t\t\t_q \"👤 Which is your github user? [$USER]\" \"GITHUB_USER\"\n\t\t\tGITHUB_USER=\"${GITHUB_USER:-$USER}\"\n\n\t\t\t_q \"📦 Which is your github repository? [dotfiles]\" \"GITHUB_REPOSITORY_NAME\"\n\t\t\tGITHUB_REPOSITORY_NAME=\"${GITHUB_REPOSITORY_NAME:-dotfiles}\"\n\n\t\t\tGIT_URL=\"git@github.com:$GITHUB_USER/$GITHUB_REPOSITORY_NAME.git\"\n\t\t\tGIT_URL_MIRROR=\"https://github.com/$GITHUB_USER/$GITHUB_REPOSITORY_NAME.git\"\n\t\t\t_w \"  Remember that if your dotfiles repository is private you\"\n\t\t\t_w \"need to generate or restore the ssh key and added to your\"\n\t\t\t_w \"github account in:\"\n\t\t\t_w \"  - Github > Settings > SSH and GPG Keys > Add new SSH key\"\n\t\t\t_w\n\t\t\t_pk \"continue when ready\"\n\t\t\tbreak\n\t\t\t;;\n\t\t\"Keybase\")\n\t\t\t_w \"Checking if keybase is installed\"\n\n\t\t\tif ! ls /Applications/Keybase.app >/dev/null 2>&1; then\n\t\t\t\t_w \"Keybase has not been detected. We will try to install it with the package manager.\"\n\t\t\t\t_w \"If the installation finish the script re run it to finish the install\"\n\n\t\t\t\tpackage_install keybase || { _e \"Keybase could not be installed, try by yourself, do a login and re run this script.\" && exit 1; }\n\t\t\t\t_s \"Keybase is installed\"\n\t\t\t\t_pk \"continue\"\n\t\t\tfi\n\n\t\t\t_q \"👤 Which is your Keybase user? [$USER]\" \"KEYBASE_USER\"\n\t\t\tKEYBASE_USER=\"${KEYBASE_USER:-$USER}\"\n\n\t\t\tKEYBASE_REPOSITORY_NAME=\"\"\n\t\t\t_q \"📦 Which is your Keybase repository name? [dotfiles]\" \"KEYBASE_REPOSITORY_NAME\"\n\t\t\tKEYBASE_REPOSITORY_NAME=\"${KEYBASE_REPOSITORY_NAME:-\"dotfiles\"}\"\n\n\t\t\tGIT_URL=\"keybase://private/${KEYBASE_USER}/${KEYBASE_REPOSITORY_NAME}\"\n\t\t\t_w\n\t\t\t_w \"  Remember that you need to start Keybase for the first time and login.\"\n\t\t\t_w \"  If you don't do this firstly, the installation will fail\"\n\t\t\t_w\n\t\t\t_pk \"continue when ready\"\n\t\t\t_w\n\n\t\t\tbreak\n\t\t\t;;\n\t\t\"Other Git alternative\")\n\t\t\twhile [ -z \"$GIT_URL\" ]; do\n\t\t\t\t_q \"👤 Which is your git repo url?\" \"GIT_URL\"\n\t\t\tdone\n\t\t\tbreak\n\t\t\t;;\n\t\t\"Quit\")\n\t\t\t_w \"Bye!\"\n\t\t\texit 0\n\t\t\t;;\n\t\t*)\n\t\t\techo \"invalid option $REPLY\"\n\t\t\t;;\n\t\tesac\n\tdone\n\n\t# Recovering your files\n\t_w \"Installing your dotfiles from $opt\"\n\t_a \"Attemping: git clone ${GIT_URL} ${DOTFILES_PATH}\"\n\tis_cloned=false\n\tgit clone \"${GIT_URL}\" \"${DOTFILES_PATH}\" 2>&1 | _log \"Cloning from $GIT_URL\" && is_cloned=true\n\n\t# This because maybe you do not have yet your ssh-keys because you did not download\n\t# your dotfiles. And SSH URL for repository would be the default method using a\n\t# repository that you can write.\n\tif ! $is_cloned && [[ ! -d $DOTFILES_PATH ]] && [[ $opt == \"GitHub\" ]]; then\n\t\t_a \"Attemping: git clone ${GIT_URL_MIRROR} ${DOTFILES_PATH}\"\n\t\tgit clone \"$GIT_URL_MIRROR\" \"$DOTFILES_PATH\" 2>&1 | _log \"Cloning from $GIT_URL_MIRROR\" && is_cloned=true\n\n\t\tif $is_cloned; then\n\t\t\t_s \"Dotfiles restored.\"\n\t\t\t_w\n\t\t\t_w \"Your dotfiles could not be downloaded using ssh. Were downloaded using https.\"\n\t\t\t_w\n\t\t\t_q \"Do you want to setup remote SSH origin url? [Y/n]\" \"SSH_REPLY\"\n\t\t\t[[ ${SSH_REPLY:-Y} =~ ^[Yy] ]] &&\n\t\t\t\tcd \"${DOTFILES_PATH}\" &&\n\t\t\t\tgit remote set-url origin \"${GIT_URL}\" 2>&1 &&\n\t\t\t\t_s \"SSH Remote was set.\"\n\t\telse\n\t\t\t_e \"Dotfiles could not be cloned. See more details: \\`tail -f $HOME/dotly.log\\`\"\n\t\t\texit 1\n\t\tfi\n\telif ! $is_cloned || [[ ! -d $DOTFILES_PATH ]]; then\n\t\t_e \"Dotfiles could not be cloned. See more details: \\`tail -f $HOME/dotly.log\\`\"\n\t\texit 1\n\tfi\n\n\t_s \"Dotfiles cloned successfully.\"\n\t_w\nfi\n\n# Update DOTLY submodule\ncd \"${DOTFILES_PATH}\"\n# Only dotly submodule must be updated recursively because we do not know if\n# user has added any other submodules that are privated and maybe the user\n# needs to configure something to access those repositories\ngit submodule update --init --recursive modules/dotly 2>&1 | _log \"Downloading dotly and submodules\" || {\n\t_e \"Downloading dotly failed. See for more details:\"\n\t_e \"  tail -f $HOME/dotly.log\"\n\t_w\n\texit 1\n}\n\n_w \"Installing dotly default tools\"\n_w \"Please be patient this could take some time...🙏\"\n# Installing default dotly tools\nPATH=\"$PATH:/usr/local/bin:$HOME/.cargo/bin\"\nsudo -v\n\"$DOTLY_PATH/bin/dot\" self install || {\n\t_e \"Dotly Could not be installed but your dotfiles are restored. Use:\"\n\t_e \"  tail -f $HOME/dotly.log\"\n\t_e \"To know what happened and where is the point of failure\"\n\t_w\n}\n_a \"🎉 dotfiles restored! 🎉\"\n\n# Installing packages\n_q \"📦 Do you want to import previous installed packages? [Y/n]\" \"USER_IMPORT_PACKAGES\"\nif [[ ${USER_IMPORT_PACKAGES:-Y} =~ ^[Yy] ]]; then\n\t_w \"Importing your packages\"\n\t_w \"This can take a very long time, be patient...🙏\"\n\t{\n\t\t\"$DOTLY_PATH/bin/dot\" package import >/dev/null 2>&1 | _log \"Importing user packages\" &&\n\t\t\t_a \"Packages imported 👏\" &&\n\t\t\t_w\n\t} || {\n\t\t_e \"📦 Packages import fail\"\n\t\t_w\n\t}\nfi\n\n# Importing defaults on macOS\nif [[ $OSTYPE =~ ^[darwin] ]]; then\n\t_w\n\t_w \"If you want to import your previous macOS settings, if would be done from the\"\n\t_w \"default directory $DOTFILES_PATH/os/mac/settings, if you want to restore it\"\n\t_w \"from another path, do it manually executing 'dot mac defaults import /path/to'\"\n\t_w\n\t_w \"IMPORTANT! This overwrite all your current configuration if you answer with 'y'\"\n\t_w\n\t_q \"⚙️ Do you want to import stored macOS configuration? [y/N]\" \"USER_OSX_SETTINGS\"\n\t{\n\t\t[[ ${USER_OSX_SETTINGS:-N} =~ ^[Yy] ]] &&\n\t\t\t\"$DOTLY_PATH/bin/dot\" mac defaults import >/dev/null 2>&1 | _log \"Importing macOS user defaults\" &&\n\t\t\t_w \"⚙️ Mac defaults imported 🤙\" &&\n\t\t\t_w\n\t} || {\n\t\t_e \"⚙️ Mac defaults could not be imported\"\n\t\t_w\n\t}\nfi\n\n_a \"🎉 dotfiles restored! 🎉\"\n_a \"Please, restart your terminal to see the changes.\"\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "shell",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}