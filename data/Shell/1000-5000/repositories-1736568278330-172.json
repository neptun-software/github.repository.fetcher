{
  "metadata": {
    "timestamp": 1736568278330,
    "page": 172,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "scmbreeze/scm_breeze",
      "stars": 2836,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0712890625,
          "content": "MIT LICENSE\n\nCopyright (c) 2011 Nathan Broadbent <nathan.f77@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.6767578125,
          "content": "<img src=\"https://user-images.githubusercontent.com/139536/30827652-08e9b684-a265-11e7-95fb-50cbd2fb7c0d.png\" width=\"200\" height=\"200\">\n\n\n\n# SCM Breeze [![TravisCI](https://secure.travis-ci.org/scmbreeze/scm_breeze.png?branch=master)](http://travis-ci.org/scmbreeze/scm_breeze)\n\n> Streamline your SCM workflow.\n\n**SCM Breeze** is a set of shell scripts (for `bash` and `zsh`) that enhance\nyour interaction with git. It integrates with your shell to give you numbered\nfile shortcuts, a repository index with tab completion, and many other useful\nfeatures.\n\n- [Installation](#installation)\n- [Usage](#usage)\n  - [File Shortcuts](#file-shortcuts)\n  - [Keyboard bindings](#keyboard-bindings)\n  - [Repository Index](#repository-index)\n  - [Linking External Project Design Directories](#linking-external-project-design-directories)\n- [Configuration](#configuration)\n- [Updating](#updating)\n- [Uninstalling](#uninstalling)\n- [Notes about Tab Completion for Aliases](#notes-about-tab-completion-for-aliases)\n- [Contributing](#contributing)\n\n\n## Installation\n\n```bash\ngit clone https://github.com/scmbreeze/scm_breeze.git ~/.scm_breeze\n~/.scm_breeze/install.sh\nsource ~/.bashrc   # or source \"${ZDOTDIR:-$HOME}/.zshrc\"\n```\n\nThe install script creates required default configs and adds the following line\nto your `.bashrc` or `.zshrc`:\n\n`[ -s \"$HOME/.scm_breeze/scm_breeze.sh\" ] && source \"$HOME/.scm_breeze/scm_breeze.sh\"`\n\n**Note:** You need to install ruby for some SCM Breeze commands to work. This also improves performance. See [ruby-lang.org](https://www.ruby-lang.org/en/documentation/installation/) for installation information.\n\n### File Shortcuts\n\nSCM Breeze makes it really easy to work with changed files, and groups of\nchanged files.  Whenever you view your SCM status, each modified path is stored\nin a numbered environment variable.  You can configure the variable prefix,\nwhich is 'e' by default.\n\n\n#### Git Status Shortcuts:\n\n<div class=\"centered\">\n<img src=\"http://madebynathan.com/images/posts/2011/10/status_with_shortcuts-resized-post.png\" width=\"590\" alt=\"Git Status With Shortcuts\" />\n</div>\n<br/>\n\n\n#### 'ls' shortcuts:\n\n<div class=\"centered\">\n<img src=\"http://i.imgur.com/72GE1.png\" alt=\"Ls With Shortcuts\" />\n</div>\n<br/>\n\nThese numbers (or ranges of numbers) can be used with any SCM or system\ncommand.\n\nFor example, if `ga` was your alias for `git add`, instead of typing something\nlike:\n\n```bash\n$ ga assets/git_breeze/config* assets/git_breeze/install.sh\n```\n\nYou can type this instead:\n\n```bash\n$ ga $e2 $e3 $e11\n```\n\nBut SCM Breeze aliases `ga` to the `git_add_shortcuts` function, which is smart\nenough to expand integers and ranges, so all you need to type is:\n\n```bash\n$ ga 2 3 11\n```\n\nAnd if you want to add all unstaged changes (files 1 to 10):\n\n```bash\n$ ga 1-10\n```\n\n(Note that `ga` will also remove deleted files, unlike the standard `git add`\ncommand.  This behaviour can be turned off if you don't like it.)\n\n\nYou can also diff, reset or checkout a file by typing:\n\n```bash\n$ gd 3\n$ grs 4\n$ gco 5\n```\n\n\nYou can use these shortcuts with system commands by passing your command\nthrough `exec_scmb_expand_args` (default alias is `ge`):\n\n\n```bash\n$ echo $e4\n# => assets/git_breeze/git_breeze.sh\n$ ge echo 4\n# => assets/git_breeze/git_breeze.sh\n$ ge echo 1-3\n# expands to echo $e1 $e2 $e3\n# => _shared.sh assets/git_breeze/config.example.sh assets/git_breeze/config.sh\n```\n\n\n#### Other shortcuts\n\nSCM Breeze adds a number of aliases to your shell. Use `list_aliases` to view\nall the aliases and their corresponding commands.  You can filter aliases by\nadding a search string: `list_aliases git log`\n\nThere's also a `git_aliases` command, which just shows aliases for `git`\ncommands. You can also pass in additional filters, e.g. `git_aliases log`.\n\n\n### Keyboard bindings\n\nSome of my most common git commands are `git add` and `git commit`, so I wanted\nthese to be as streamlined as possible. One way of speeding up commonly used\ncommands is by binding them to keyboard shortcuts.\n\nHere are the default key bindings:\n\n* `CTRL`+`x` `c` => `git_add_and_commit` - add given files (if any), then commit staged changes\n* `CTRL`+`x` `SPACE` => `git_commit_all` - commit everything\n\n\nThe commit shortcuts use the `git_commit_prompt` function, which gives a simple\nprompt like this:\n\n<div class=\"centered\"> <img\nsrc=\"http://madebynathan.com/images/posts/2011/10/git_commit_all-resized-post.png\"\nalt=\"Git Commit All\" /> </div> <br/> (When using bash, this commit prompt gives\nyou access to your bash history via the arrow keys.) <br/>\n\nAnd if you really want to speed up your workflow, you can type this:\n\n```bash\n$ 2 3 <CTRL+x c>\n```\n\nThis sends the `HOME` key, followed by `git_add_and_commit`:\n\n<div class=\"centered\">\n<img src=\"http://madebynathan.com/images/posts/2011/10/git_add_and_commit_params-resized-post.png\" alt=\"Git Add And Commit\" />\n</div>\n<br/>\n\n\n### Repository Index\n\nThe second feature is a repository index for all of your projects and\nsubmodules.  This gives you super-fast switching between your project\ndirectories, with tab completion, and it can even tab-complete down to project\nsubdirectories.  This means that you can keep your projects organized in\nsubfolders, but switch between them as easily as if they were all in one\nfolder.\n\nIt's similar to [autojump](https://github.com/joelthelion/autojump), but it\ndoesn't need to 'learn' anything, and it can do SCM-specific stuff like:\n\n* Running a command for all of your repos (useful if you ever need to update a\n  lot of remote URLs)\n* Update all of your repositories via a cron task\n\nThe default alias for `git_index` is 'c', which might stand for 'code'\n\nYou will first need to configure your repository directory by setting `GIT_REPO_DIR` in `~/.git.scmbrc`.\n\nThen, build the index:\n\n```bash\n$ c --rebuild\n# => == Scanning /home/ndbroadbent/code for git repos & submodules...\n# => ===== Indexed 64 repos in /home/ndbroadbent/code/.git_index\n```\n\nThen you'll be able to switch between your projects, or show the list of\nindexed repos.\n\nTo switch to a project directory, you don't need to type the full project name.\nFor example, to switch to the `capistrano` project, you could type any of the\nfollowing:\n\n```bash\n$ c capistrano\n$ c cap\n$ c istra\n```\n\nOr if you wanted to go straight to a subdirectory within `capistrano`:\n\n```bash\n$ c cap<TAB>\n$ c capistrano/<TAB>\n# => bin/   lib/   test/\n$ c capistrano/l<TAB>\n$ c capistrano/lib/\n# => cd ~/code/gems/capistrano/lib\n```\n\nOr if you want to go to a subdirectory within the `~/code` directory, prefix\nthe first argument with a `/`:\n\n```bash\n~ $ c /gems\n~/code/gems $\n```\n\n### Linking External Project Design Directories\n\nWhen you're creating logos or icons for a project that uses `git`, have you\never wondered where you should store those `.psd` or `.xcf` files?  Do you\ncommit all of your raw design files, or does it put you off that any changes to\nthose files will bloat your repository?\n\nHere were my goals when I set out to find a solution:\n\n* I wanted a design directory for each of my projects\n* I didn't want the design directory to be checked in to the git repository\n* The design directory needed to be synchronized across all of my machines\n\nThe simplest way for me to synchronize files was via my Dropbox account.\nHowever, if you work with a larger team, you could set up a shared design\ndirectory on one of your servers and synchronize it with `rsync`.\n\n\n#### 1) Create and configure a root design directory\n\nI created my root design directory at `~/Dropbox/Design`.\n\nAfter you've created your root design directory, edit `~/.scmbrc` and set\n`root_design_dir` to the directory you just created.  You can also configure\nthe design directory that's created in each of your projects (default:\n`design_assets`), as well as the subdirectories you would like to use.  The\ndefault base subdirectories are: Images, Backgrounds, Logos, Icons, Mockups,\nand Screenshots.\n\nAfter you have changed these settings, remember to run `source ~/.bashrc` or\n`source \"${ZDOTDIR:-$HOME}/.zshrc\"`.\n\n\n#### 2) Initialize design directories for your projects\n\nTo set up the design directories and symlinks, go to a project's directory and\nrun:\n\n```bash\ndesign init\n```\n\nIf your root directory is `~/Dropbox/Design`, directories will be created at\n`~/Dropbox/Design/projects/my_project/Backgrounds`,\n`~/Dropbox/Design/projects/my_project/Icons`, etc.\n\nIt will then symlink the project from your root design directory into your\nproject's design directory, so you end up with:\n\n* `my_project/design_assets` -> `~/Dropbox/Design/projects/my_project`\n\nIt also adds this directory to `.git/info/exclude` so that git ignores it.\n\n\nIf you use the git repository index, you can run the following batch command to\nset up these directories for all of your git repos at once:\n\n```bash\ngit_index --batch-cmd design init\n```\n\nIf you want to remove any empty design directories, run:\n\n```bash\ndesign trim\n```\n\nAnd if you want to remove all of a project's design directories, even if they\ncontain files:\n\n```bash\ndesign rm\n```\n\n\n#### 3) Link existing design directories into your projects\n\nIf you've set up your design directories on one machine, you'll want them to be\nsynchronized across all of your other development machines.\n\nJust run the following command on your other machines after you've configured\nthe root design directory:\n\n```bash\ndesign link\n```\n\nThis uses your git index to figure out where to create the symlinks.  If you\ndon't use the git index, the same outcome could be achieved by running 'design\ninit' for each of the projects.\n\n\n## Configuration\n\nSCM Breeze is configured via automatically installed `~/.*.scmbrc` files.  To\nchange git configuration, edit `~/.git.scmbrc`.\n\nEach feature is modular, so you are free to ignore the parts you don't want to\nuse.  Just comment out the relevant line in `~/.scm_breeze/scm_breeze.sh`.\n\n**Note:** After changing any settings, you will need to run `source ~/.bashrc`\n(or `source \"${ZDOTDIR:-$HOME}/.zshrc\"`)\n\nI know we grow attached to the aliases we use every day, so I've made the alias\nsystem completely customizable.  You have two options when it comes to aliases:\n\n\n### 1) Configure and use the provided SCM Breeze aliases\n\nJust tweak the aliases in `~/.git.scmbrc`. You can also change or remove any\nkeyboard shortcuts.  These aliases also come with tab completion. For example,\nyou can type `gco <tab>` to tab complete your list of branches.\n\n\n### 2) Use your own aliases\n\nIn your `git.scmbrc` config file, just set the `git_setup_aliases` option to\n`no`.  Your existing git aliases will then be used, and you will still be able\nto use the numeric shortcuts feature.  SCM Breeze creates a function to wrap\nthe 'git' command, which expands numeric arguments, and uses `hub` if\navailable.\n\nA few aliases will still be defined for the central SCM Breeze features, such\nas `gs` for the extended `git status`, and `ga` for the `git add` function.\n\nIf you already have an alias like `alias gco=\"git checkout\"`, you can now type\n`gco 1` to checkout the first file in the output of SCM Breeze's `git status`.\n\n## Custom emojis for username and \"staff\" group\n\nThe `ll` command adds numbered shortcuts to files, but another fun feature is replacing your\nusername and the \"staff\" group with custom emojis. You can set these in `~/.user_sym` and `~/.staff_sym`.\n\n<img src=\"/docs/images/custom_user_and_staff_symbols.jpg\" width=\"400\" alt=\"Custom user and staff emojis\">\n\nSet your own emojis by running:\n\n```bash\necho 🍀 > ~/.user_sym\necho 🖥 > ~/.staff_sym\n```\n\nI also like using `~/.user_sym` [in my Bash prompt](https://github.com/ndbroadbent/dotfiles/blob/master/bashrc/prompt.sh#L71).\n\n\n## Notes about Tab Completion for Aliases\n\n### Bash\n\nIf you use your own aliases, SCM Breeze will **not** set up bash tab completion\nfor your aliases.  You will need to set that up yourself.\n\n\n### Zsh\n\nYou just need to set the option: `setopt no_complete_aliases` (oh-my-zsh sets\nthis by default).  Zsh will then expand aliases like `gb` to `git branch`, and\nuse the completion for that.\n\n\n## Updating\n\nPlease run `update_scm_breeze` to fetch the latest code. This will update SCM\nBreeze from Github, and will create or patch your `~/.*.scmbrc` config files if\nany new settings are added.\n\n\n## Uninstalling\n\n```bash\n~/.scm_breeze/uninstall.sh\n```\n\nThe uninstall script removes the following line from your `.bashrc` or\n`.zshrc`:\n\n`[ -s \"$HOME/.scm_breeze/scm_breeze.sh\" ] && source \"$HOME/.scm_breeze/scm_breeze.sh\"`\n\n\n## Contributing\n\nSCM Breeze lives on Github at\n[`scmbreeze/scm_breeze`](https://github.com/scmbreeze/scm_breeze)\n\nIf you have any awesome SCM scripts lurking in your `.bashrc` or `.zshrc`,\nplease feel free to send me a pull request.  It would be cool to make this\nproject into an [oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh) for\nSCMs.\n\n***Enjoy!***\n\n## Alternative Projects\n\n1. https://github.com/shinriyo/breeze `fish` support\n1. https://github.com/mroth/scmpuff static go binary\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "git.scmbrc.example",
          "type": "blob",
          "size": 4.38671875,
          "content": "#\n# Git File Shortcuts Config\n# ----------------------------------------------\n# - Set your preferred prefix for env variable file shortcuts.\n#   (I chose 'e' because it is easy to slide your finger to it from '$'.)\nexport git_env_char=\"e\"\n# - Max changed files before reverting to 'git status'. git_status_shortcuts() will be slower for lots of changed files.\nexport gs_max_changes=\"150\"\n# - When using the git_add_shorcuts() command, automatically invoke 'git rm' to remove deleted files?\nexport ga_auto_remove=\"yes\"\n\n# - Set the following option to 'no' if you want to use your existing git aliases\n#   instead of overwriting them.\n#   Note: Bash tab completion will not be automatically set up for your aliases if you disable this option.\nexport git_setup_aliases=\"yes\"\n\n# - Set the following option to 'yes' if you want to turn off shell completion setup\n# export git_skip_shell_completion=\"yes\" \n\n# Git Index Config\n# ----------------------------------------------\n# Repos will be automatically added from this directory.\nexport GIT_REPO_DIR=\"$HOME/code\"\n# Add the full paths of any extra repos to GIT_REPOS, separated with ':'\n# e.g. \"/opt/rails/project:/opt/rails/another project:$HOME/other/repo\"\nexport GIT_REPOS=\"\"\nexport git_status_command=\"git_status_shortcuts\"\n# Alias\ngit_index_alias=\"c\"    # Switch to a repo in the (c)ode directory\n\n\n# Git Aliases\n# ----------------------------------------------\ngit_alias=\"g\"\n\n# 1. 'SCM Breeze' functions\ngit_status_shortcuts_alias=\"gs\"\ngit_add_shortcuts_alias=\"ga\"\nexec_scmb_expand_args_alias=\"ge\"\ngit_show_files_alias=\"gsf\"\ngit_commit_all_alias=\"gca\"\ngit_grep_shortcuts_alias=\"gtrep\"\n# 2. Commands that handle paths (with shortcut args expanded)\ngit_checkout_alias=\"gco\"\ngit_checkout_branch_alias=\"gcb\"\ngit_commit_alias=\"gc\"\ngit_commit_verbose_alias=\"gcv\"\ngit_reset_alias=\"grs\"\ngit_reset_hard_alias=\"grsh\"\ngit_rm_alias=\"grm\"\ngit_blame_alias=\"gbl\"\ngit_diff_alias=\"gd\"\ngit_diff_no_whitespace_alias=\"gdnw\"\ngit_diff_file_alias=\"gdf\"\ngit_diff_word_alias=\"gdw\"\ngit_diff_cached_alias=\"gdc\"\ngit_difftool_alias=\"gdt\"\ngit_mergetool_alias=\"gmt\"\n# 3. Standard commands\ngit_clone_alias=\"gcl\"\ngit_fetch_alias=\"gf\"\ngit_fetch_all_alias=\"gfa\"\ngit_fetch_and_rebase_alias=\"gfr\"\ngit_pull_alias=\"gpl\"\ngit_pull_rebase_alias=\"gplr\"\ngit_push_alias=\"gps\"\ngit_push_force_alias=\"gpsf\"\ngit_pull_then_push_alias=\"gpls\"\ngit_status_original_alias=\"gst\"\ngit_status_short_alias=\"gss\"\ngit_clean_alias=\"gce\"\ngit_clean_force_alias=\"gcef\"\ngit_add_all_alias=\"gaa\"\ngit_add_patch_alias=\"gap\"\ngit_add_updated_alias=\"gau\"\ngit_commit_amend_alias=\"gcm\"\ngit_commit_amend_no_msg_alias=\"gcmh\"\ngit_commit_no_msg_alias=\"gch\"\ngit_remote_alias=\"gr\"\ngit_branch_alias=\"gb\"\ngit_branch_all_alias=\"gba\"\ngit_branch_move_alias=\"gbm\"\ngit_branch_delete_alias=\"gbd\"\ngit_branch_delete_force_alias=\"gbD\"\ngit_rebase_alias=\"grb\"\ngit_rebase_interactive_alias=\"grbi\"\ngit_rebase_alias_continue=\"grbc\"\ngit_rebase_alias_abort=\"grba\"\ngit_reset_last_commit=\"grsl\"\ngit_merge_alias=\"gm\"\ngit_merge_no_fast_forward_alias=\"gmnff\"\ngit_merge_only_fast_forward_alias=\"gmff\"\ngit_cherry_pick_alias=\"gcp\"\ngit_log_alias=\"gl\"\ngit_log_all_alias=\"gla\"\ngit_log_stat_alias=\"glst\"\ngit_log_graph_alias=\"glg\"\ngit_show_alias=\"gsh\"\ngit_show_summary=\"gsm\"  # (gss taken by git status short)\ngit_stash_alias=\"gash\"\ngit_stash_apply_alias=\"gasha\"\ngit_stash_pop_alias=\"gashp\"\ngit_stash_list_alias=\"gashl\"\ngit_tag_alias=\"gt\"\ngit_submodule_update_alias=\"gsu\"\ngit_submodule_update_rec_alias=\"gsur\"\ngit_top_level_alias=\"gtop\"\ngit_whatchanged_alias=\"gwc\"\ngit_apply_alias=\"gapp\"\ngit_switch_alias=\"gsw\"\ngit_restore_alias=\"grt\"\n# Hub aliases (https://github.com/github/hub)\ngit_pull_request_alias=\"gpr\"\n\n\n# Git Keyboard Shortcuts\n# ----------------------------------------------\n# Keyboard shortcuts are on by default. Set this to 'false' to disable them.\ngit_keyboard_shortcuts_enabled=\"true\"\ngit_commit_all_keys=\"\\C-x \"               # CTRL+x, SPACE\ngit_add_and_commit_keys=\"\\C-xc\"           # CTRL+x, c\ngit_commit_all_with_ci_skip_keys=\"\\C-xv\"  # CTRL+x, v    (Appends [ci skip] to message)\ngit_add_and_amend_commit_keys=\"\\C-xz\"     # CTRL+x, z\n\n\n# Shell Command Wrapping\n# ----------------------------------------------\n# Expand numbered args for common shell commands\nshell_command_wrapping_enabled=\"true\"\n# Here you can tweak the list of wrapped commands.\nscmb_wrapped_shell_commands=(vim emacs gedit cat rm cp mv ln cd ls less subl code)\n# Add numbered shortcuts to output of ls -l, just like 'git status'\nshell_ls_aliases_enabled=\"true\"\n"
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 1.9443359375,
          "content": "#!/bin/bash\n#locate the dir where this script is stored\nexport scmbDir=\"$( cd -P \"$( dirname \"$0\" )\" && pwd )\"\n\n# Symlink to ~/.scm_breeze if installing from another path\nif [ \"$scmbDir\" != \"$HOME/.scm_breeze\" ]; then\n  ln -fs \"$scmbDir\" \"$HOME/.scm_breeze\"\nfi\n\n# This loads SCM Breeze into the shell session.\nexec_string=\"[ -s \\\"$HOME/.scm_breeze/scm_breeze.sh\\\" ] && source \\\"$HOME/.scm_breeze/scm_breeze.sh\\\"\"\n\n# Add line to bashrc and bash_profile if not already present.\nadded_to_profile=false\nalready_present=false\nfor rc in bashrc bash_profile; do\n  if [ -s \"$HOME/.$rc\" ]; then\n    if grep -q \"$exec_string\" \"$HOME/.$rc\"; then\n      printf \"== Already installed in '~/.$rc'\\n\"\n      already_present=true\n    else\n      printf \"\\n$exec_string\\n\" >> \"$HOME/.$rc\"\n      printf \"== Added SCM Breeze to '~/.$rc'\\n\"\n      added_to_profile=true\n    fi\n  fi\ndone\n\n# Add line to .zshrc if not aleady present.\n# When set, the ZDOTDIR environment variable states the directory zshrc is in.\n# If not set, HOME environment variable is used as fallback.\nif [ -s \"${ZDOTDIR:-$HOME}/.zshrc\" ]; then\n  if grep -q \"$exec_string\" \"${ZDOTDIR:-$HOME}/.zshrc\"; then\n    printf \"== Already installed in '${ZDOTDIR:-$HOME}/.zshrc'\\n\"\n    already_present=true  \n  else\n    printf \"\\n$exec_string\\n\" >> \"${ZDOTDIR:-$HOME}/.zshrc\"\n    printf \"== Added SCM Breeze to '${ZDOTDIR:-$HOME}/.zshrc'\\n\"\n    already_present=true\n  fi\nfi\n\n# Load SCM Breeze update scripts\nsource \"$scmbDir/lib/scm_breeze.sh\"\n# Create '~/.*.scmbrc' files from example files\n_create_or_patch_scmbrc\n\nif [ \"$added_to_profile\" = true ] || [ \"$already_present\" = true ]; then\n  echo \"== SCM Breeze Installed! Run 'source ~/.bashrc || source ~/.bash_profile' or 'source \\\"${ZDOTDIR:-$HOME}/.zshrc\\\"'\"\n  echo \"   to load SCM Breeze into your current shell.\"\nelse\n  echo \"== Error:\"\n  echo \"   Found no profile to add SCM Breeze to.\"\n  echo \"   Add line to your shell profile and source it to install manually:\"\n  printf \"   $exec_string\\n\"\nfi\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "run_tests.sh",
          "type": "blob",
          "size": 0.66015625,
          "content": "#!/bin/sh\n# Run SCM Breeze shUnit2 tests\n\nfailed=false\n\nenv | grep ^SHELL\n\n# allow list of shells to run tests in to be overriden by environment variable\n# if empty or null, use defaults\nif [ -z \"$TEST_SHELLS\" ]; then\n  TEST_SHELLS=\"bash zsh\"\nfi\necho \"== Will run all tests with following shells: ${TEST_SHELLS}\"\n\ncd -P -- \"${0%/*}\" # Change to directory this script lives in\nfor test in $(find test/lib -name *_test.sh); do\n  for shell in $TEST_SHELLS; do\n    echo \"== Running tests with [$shell]: $test\"\n    $shell $test || failed=true\n    printf '==\\n\\n'\n  done\ndone\n\nif [ \"$failed\" = \"true\" ]; then\n  echo \"Tests failed!\"\n  false\nelse\n  echo \"All tests passed!\"\n  true\nfi\n"
        },
        {
          "name": "scm_breeze.plugin.zsh",
          "type": "blob",
          "size": 0.90625,
          "content": "#########################################################\n# Forked from http://github.com/ndbroadbent/scm_breeze  #\n#                                                       #\n# File Copied and modified from ./install.sh            #\n# to be compatible with oh-my-zsh's plugin system       #\n#########################################################\n\n#!/bin/bash\n#locate the dir where this script is stored\nexport scmbDir=\"$( cd -P \"$( dirname \"$0\" )\" && pwd )\"\n\n# Symlink to ~/.scm_breeze if installing from another path\nif [ ! -s \"$HOME/.scm_breeze\" ] && [ \"$scmbDir\" != \"$HOME/.scm_breeze\" ]; then\n  ln -fs \"$scmbDir\" \"$HOME/.scm_breeze\"\n\n  # Load SCM Breeze update scripts\n  source \"$scmbDir/lib/scm_breeze.sh\"\n  # Create '~/.*.scmbrc' files from example files\n  _create_or_patch_scmbrc\nfi\n\n# This loads SCM Breeze into the shell session.\n[ -s \"$HOME/.scm_breeze/scm_breeze.sh\" ] && source \"$HOME/.scm_breeze/scm_breeze.sh\"\n\n\n"
        },
        {
          "name": "scm_breeze.sh",
          "type": "blob",
          "size": 1.330078125,
          "content": "#\n# scm_breeze.sh must be sourced, and not executed in a sub-shell.\n# e.g \"source ~/.scm_breeze/scm_breeze.sh\"\n# ------------------------------------------------------------\nexport scmbDir=\"$(dirname ${BASH_SOURCE:-$0})\"\n\n# Load config\n[ -s \"$HOME/.scmbrc\" ] && . \"$HOME/.scmbrc\"\n\n# Shared functions\nsource \"$scmbDir/lib/scm_breeze.sh\"\n\nSCM_BREEZE_DISABLE_ASSETS_MANAGEMENT=${SCM_BREEZE_DISABLE_ASSETS_MANAGEMENT:-\"\"}\n\nif [ \"$SCM_BREEZE_DISABLE_ASSETS_MANAGEMENT\" != \"true\" ]; then\n  source \"$scmbDir/lib/design.sh\"\nfi\n\n# Git\n# ------------------------------------------------------------\nif [[ -s \"$HOME/.git.scmbrc\" ]]; then\n  # Load git config\n  source \"$HOME/.git.scmbrc\"\n  source \"$scmbDir/lib/git/helpers.sh\"\n  source \"$scmbDir/lib/git/aliases.sh\"\n  source \"$scmbDir/lib/git/keybindings.sh\"\n  source \"$scmbDir/lib/git/status_shortcuts.sh\"\n  source \"$scmbDir/lib/git/branch_shortcuts.sh\"\n  source \"$scmbDir/lib/git/grep_shortcuts.sh\"\n  source \"$scmbDir/lib/git/shell_shortcuts.sh\"\n  if [ \"$SCM_BREEZE_DISABLE_ASSETS_MANAGEMENT\" != \"true\" ]; then\n    source \"$scmbDir/lib/git/repo_index.sh\"\n  fi\n  source \"$scmbDir/lib/git/tools.sh\"\n\n  if ! type ruby >/dev/null 2>&1; then\n    # If Ruby is not installed, fall back to the\n    # slower bash/zsh implementation of 'git_status_shortcuts'\n    source \"$scmbDir/lib/git/fallback/status_shortcuts_shell.sh\"\n  fi\nfi\n"
        },
        {
          "name": "scmbrc.example",
          "type": "blob",
          "size": 0.71484375,
          "content": "#\n# Design Assets Management Config\n# ----------------------------------------------------------------\n# Directory where design assets are stored\nexport root_design_dir=\"$HOME/Dropbox/Design\"\n# Directory where symlinks are created within each project\nexport project_design_dir=\"design_assets\"\n# Directories for per-project design assets\nexport design_base_dirs=\"Documents Flowcharts Images Backgrounds Logos Icons Mockups Screenshots\"\nexport design_av_dirs=\"Animations Videos Flash Music Samples\"\n# Directories for global design assets (not symlinked into projects)\nexport design_ext_dirs=\"Fonts IconSets\"\n\n# Set =true to disable the design/assets management features\n# export SCM_BREEZE_DISABLE_ASSETS_MANAGEMENT=true\n\n# vi: ft=sh\n"
        },
        {
          "name": "test.sh",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "uninstall.sh",
          "type": "blob",
          "size": 0.5048828125,
          "content": "#!/bin/sh\n# uninstall by (github: bernardofire)\n# Remove line from bashrc and zshrc if present.\n\nOS=$(uname -s | awk '{print tolower($0)}')\n\nsed=\"sed -i\"\nif [[ \"$OS\" == \"darwin\" ]]; then\n  sed=\"sed -i ''\"\nfi\n\nif [ -f \"$HOME/.bashrc\" ]; then\n  $sed '/scm_breeze/d' \"$HOME/.bashrc\" &&\n    printf \"Removed SCM Breeze from '%s'\\n\" \"$HOME/.bashrc\"\nfi\n\nif [ -f \"${ZDOTDIR:-$HOME}/.zshrc\" ]; then\n  $sed '/scm_breeze/d' \"${ZDOTDIR:-$HOME}/.zshrc\" &&\n    printf \"Removed SCM Breeze from '%s'\\n\" \"${ZDOTDIR:-$HOME}/.zshrc\"\nfi\n"
        }
      ]
    }
  ]
}