{
  "metadata": {
    "timestamp": 1736568317069,
    "page": 233,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "docker/docker-install",
      "stars": 2507,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0244140625,
          "content": "*verify-install-*\nbuild/\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 10.51171875,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        https://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   Copyright 2013-2017 Docker, Inc.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       https://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "MAINTAINERS",
          "type": "blob",
          "size": 0.986328125,
          "content": "# Project maintainers file\n#\n# This file describes who runs the docker/docker-install project and how.\n# This is a living document - if you see something out of date or missing, speak up!\n#\n# It is structured to be consumable by both humans and programs.\n# To extract its contents programmatically, use any TOML-compliant parser.\n#\n# This file is compiled into the MAINTAINERS file in docker/opensource.\n#\n[Org]\n\t[Org.\"Core maintainers\"]\n\t\tpeople = [\n\t\t\t\"seemethere\",\n\t\t\t\"andrewhsu\",\n\t\t\t\"thajeztah\"\n\t\t]\n\n[people]\n\n# A reference list of all people associated with the project.\n# All other sections should refer to people by their canonical key\n# in the people section.\n\n\t# ADD YOURSELF HERE IN ALPHABETICAL ORDER\n\n\t[people.andrewhsu]\n\tName = \"Andrew Hsu\"\n\tEmail = \"andrewhsu@docker.com\"\n\tGitHub = \"andrewhsu\"\n\n\t[people.seemethere]\n\tName = \"Eli Uriegas\"\n\tEmail = \"seemethere101@gmail.com\"\n\tGitHub = \"seemethere\"\n\n\t[people.thajeztah]\n\tName = \"Sebastiaan van Stijn\"\n\tEmail = \"github@gone.nl\"\n\tGitHub = \"thaJeztah\"\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.71484375,
          "content": "TEST_IMAGE?=ubuntu:22.04\nVERSION?=\nCHANNEL?=\n\nVOLUME_MOUNTS=-v \"$(CURDIR)\":/v\nSHELLCHECK_EXCLUSIONS=$(addprefix -e, SC1091 SC1117 SC2317 SC2329)\nSHELLCHECK=docker run --rm $(VOLUME_MOUNTS) -w /v koalaman/shellcheck:stable $(SHELLCHECK_EXCLUSIONS)\n\nENVSUBST_VARS=LOAD_SCRIPT_COMMIT_SHA\n\n.PHONY: build\nbuild: build/install.sh\n\nbuild/install.sh: install.sh\n\tmkdir -p $(@D)\n\tLOAD_SCRIPT_COMMIT_SHA='$(shell git rev-parse HEAD)' envsubst '$(addprefix $$,$(ENVSUBST_VARS))' < $< > $@\n\n.PHONY: shellcheck\nshellcheck: build/install.sh\n\t$(SHELLCHECK) $<\n\n.PHONY: test\ntest: build/install.sh\n\tdocker run --rm -i \\\n\t\t$(VOLUME_MOUNTS) \\\n\t\t-w /v \\\n\t\t-e VERSION \\\n\t\t-e CHANNEL \\\n\t\t$(TEST_IMAGE) \\\n\t\tsh \"$<\"\n\n.PHONY: clean\nclean:\n\t$(RM) -r build/\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 0.623046875,
          "content": "Docker\nCopyright 2013-2017 Docker, Inc.\n\nThis product includes software developed at Docker, Inc. (https://www.docker.com).\n\nThis product contains software (https://github.com/kr/pty) developed\nby Keith Rarick, licensed under the MIT License.\n\nThe following is courtesy of our legal counsel:\n\n\nUse and transfer of Docker may be subject to certain restrictions by the\nUnited States and other governments.\nIt is your responsibility to ensure that your use and/or transfer does not\nviolate applicable laws.\n\nFor more information, please see https://www.bis.doc.gov\n\nSee also https://www.apache.org/dev/crypto.html and/or seek legal counsel.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.0322265625,
          "content": "# docker/docker-install\nHome of the script that lives at `get.docker.com` and `test.docker.com`!\n\nThe purpose of the install script is for a convenience for quickly\ninstalling the latest Docker-CE releases on the supported linux\ndistros. It is not recommended to depend on this script for deployment\nto production systems. For more thorough instructions for installing\non the supported distros, see the [install\ninstructions](https://docs.docker.com/engine/install/).\n\nThis repository is solely maintained by Docker, Inc.\n\n## Usage:\n\nFrom `https://get.docker.com`:\n```shell\ncurl -fsSL https://get.docker.com -o get-docker.sh\nsh get-docker.sh\n```\n\nFrom `https://test.docker.com`:\n```shell\ncurl -fsSL https://test.docker.com -o test-docker.sh\nsh test-docker.sh\n```\n\nFrom the source repo (This will install latest from the `stable` channel):\n```shell\nsh install.sh\n```\n\n## Testing:\n\nTo verify that the install script works amongst the supported operating systems run:\n\n```shell\nmake shellcheck\n```\n\n## Legal\n*Brought to you courtesy of our legal counsel. For more context,\nplease see the [NOTICE](NOTICE) document in this repo.*\n\nUse and transfer of Docker may be subject to certain restrictions by the\nUnited States and other governments.\n\nIt is your responsibility to ensure that your use and/or transfer does not\nviolate applicable laws.\n\nFor more information, please see https://www.bis.doc.gov\n\n## Reporting security issues\n\nThe maintainers take security seriously. If you discover a security issue,\nplease bring it to their attention right away!\n\nPlease **DO NOT** file a public issue, instead send your report privately to\n[security@docker.com](mailto:security@docker.com).\n\nSecurity reports are greatly appreciated and we will publicly thank you for it.\nWe also like to send gifts—if you're into Docker schwag, make sure to let\nus know. We currently do not offer a paid security bounty program, but are not\nruling it out in the future.\n\n## Licensing\n\ndocker/docker-install is licensed under the Apache License, Version 2.0.\nSee [LICENSE](LICENSE) for the full license text.\n"
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 22.0478515625,
          "content": "#!/bin/sh\nset -e\n# Docker Engine for Linux installation script.\n#\n# This script is intended as a convenient way to configure docker's package\n# repositories and to install Docker Engine, This script is not recommended\n# for production environments. Before running this script, make yourself familiar\n# with potential risks and limitations, and refer to the installation manual\n# at https://docs.docker.com/engine/install/ for alternative installation methods.\n#\n# The script:\n#\n# - Requires `root` or `sudo` privileges to run.\n# - Attempts to detect your Linux distribution and version and configure your\n#   package management system for you.\n# - Doesn't allow you to customize most installation parameters.\n# - Installs dependencies and recommendations without asking for confirmation.\n# - Installs the latest stable release (by default) of Docker CLI, Docker Engine,\n#   Docker Buildx, Docker Compose, containerd, and runc. When using this script\n#   to provision a machine, this may result in unexpected major version upgrades\n#   of these packages. Always test upgrades in a test environment before\n#   deploying to your production systems.\n# - Isn't designed to upgrade an existing Docker installation. When using the\n#   script to update an existing installation, dependencies may not be updated\n#   to the expected version, resulting in outdated versions.\n#\n# Source code is available at https://github.com/docker/docker-install/\n#\n# Usage\n# ==============================================================================\n#\n# To install the latest stable versions of Docker CLI, Docker Engine, and their\n# dependencies:\n#\n# 1. download the script\n#\n#   $ curl -fsSL https://get.docker.com -o install-docker.sh\n#\n# 2. verify the script's content\n#\n#   $ cat install-docker.sh\n#\n# 3. run the script with --dry-run to verify the steps it executes\n#\n#   $ sh install-docker.sh --dry-run\n#\n# 4. run the script either as root, or using sudo to perform the installation.\n#\n#   $ sudo sh install-docker.sh\n#\n# Command-line options\n# ==============================================================================\n#\n# --version <VERSION>\n# Use the --version option to install a specific version, for example:\n#\n#   $ sudo sh install-docker.sh --version 23.0\n#\n# --channel <stable|test>\n#\n# Use the --channel option to install from an alternative installation channel.\n# The following example installs the latest versions from the \"test\" channel,\n# which includes pre-releases (alpha, beta, rc):\n#\n#   $ sudo sh install-docker.sh --channel test\n#\n# Alternatively, use the script at https://test.docker.com, which uses the test\n# channel as default.\n#\n# --mirror <Aliyun|AzureChinaCloud>\n#\n# Use the --mirror option to install from a mirror supported by this script.\n# Available mirrors are \"Aliyun\" (https://mirrors.aliyun.com/docker-ce), and\n# \"AzureChinaCloud\" (https://mirror.azure.cn/docker-ce), for example:\n#\n#   $ sudo sh install-docker.sh --mirror AzureChinaCloud\n#\n# ==============================================================================\n\n\n# Git commit from https://github.com/docker/docker-install when\n# the script was uploaded (Should only be modified by upload job):\nSCRIPT_COMMIT_SHA=\"${LOAD_SCRIPT_COMMIT_SHA}\"\n\n# strip \"v\" prefix if present\nVERSION=\"${VERSION#v}\"\n\n# The channel to install from:\n#   * stable\n#   * test\nDEFAULT_CHANNEL_VALUE=\"stable\"\nif [ -z \"$CHANNEL\" ]; then\n\tCHANNEL=$DEFAULT_CHANNEL_VALUE\nfi\n\nDEFAULT_DOWNLOAD_URL=\"https://download.docker.com\"\nif [ -z \"$DOWNLOAD_URL\" ]; then\n\tDOWNLOAD_URL=$DEFAULT_DOWNLOAD_URL\nfi\n\nDEFAULT_REPO_FILE=\"docker-ce.repo\"\nif [ -z \"$REPO_FILE\" ]; then\n\tREPO_FILE=\"$DEFAULT_REPO_FILE\"\nfi\n\nmirror=''\nDRY_RUN=${DRY_RUN:-}\nwhile [ $# -gt 0 ]; do\n\tcase \"$1\" in\n\t\t--channel)\n\t\t\tCHANNEL=\"$2\"\n\t\t\tshift\n\t\t\t;;\n\t\t--dry-run)\n\t\t\tDRY_RUN=1\n\t\t\t;;\n\t\t--mirror)\n\t\t\tmirror=\"$2\"\n\t\t\tshift\n\t\t\t;;\n\t\t--version)\n\t\t\tVERSION=\"${2#v}\"\n\t\t\tshift\n\t\t\t;;\n\t\t--*)\n\t\t\techo \"Illegal option $1\"\n\t\t\t;;\n\tesac\n\tshift $(( $# > 0 ? 1 : 0 ))\ndone\n\ncase \"$mirror\" in\n\tAliyun)\n\t\tDOWNLOAD_URL=\"https://mirrors.aliyun.com/docker-ce\"\n\t\t;;\n\tAzureChinaCloud)\n\t\tDOWNLOAD_URL=\"https://mirror.azure.cn/docker-ce\"\n\t\t;;\n\t\"\")\n\t\t;;\n\t*)\n\t\t>&2 echo \"unknown mirror '$mirror': use either 'Aliyun', or 'AzureChinaCloud'.\"\n\t\texit 1\n\t\t;;\nesac\n\ncase \"$CHANNEL\" in\n\tstable|test)\n\t\t;;\n\t*)\n\t\t>&2 echo \"unknown CHANNEL '$CHANNEL': use either stable or test.\"\n\t\texit 1\n\t\t;;\nesac\n\ncommand_exists() {\n\tcommand -v \"$@\" > /dev/null 2>&1\n}\n\n# version_gte checks if the version specified in $VERSION is at least the given\n# SemVer (Maj.Minor[.Patch]), or CalVer (YY.MM) version.It returns 0 (success)\n# if $VERSION is either unset (=latest) or newer or equal than the specified\n# version, or returns 1 (fail) otherwise.\n#\n# examples:\n#\n# VERSION=23.0\n# version_gte 23.0  // 0 (success)\n# version_gte 20.10 // 0 (success)\n# version_gte 19.03 // 0 (success)\n# version_gte 26.1  // 1 (fail)\nversion_gte() {\n\tif [ -z \"$VERSION\" ]; then\n\t\t\treturn 0\n\tfi\n\tversion_compare \"$VERSION\" \"$1\"\n}\n\n# version_compare compares two version strings (either SemVer (Major.Minor.Path),\n# or CalVer (YY.MM) version strings. It returns 0 (success) if version A is newer\n# or equal than version B, or 1 (fail) otherwise. Patch releases and pre-release\n# (-alpha/-beta) are not taken into account\n#\n# examples:\n#\n# version_compare 23.0.0 20.10 // 0 (success)\n# version_compare 23.0 20.10   // 0 (success)\n# version_compare 20.10 19.03  // 0 (success)\n# version_compare 20.10 20.10  // 0 (success)\n# version_compare 19.03 20.10  // 1 (fail)\nversion_compare() (\n\tset +x\n\n\tyy_a=\"$(echo \"$1\" | cut -d'.' -f1)\"\n\tyy_b=\"$(echo \"$2\" | cut -d'.' -f1)\"\n\tif [ \"$yy_a\" -lt \"$yy_b\" ]; then\n\t\treturn 1\n\tfi\n\tif [ \"$yy_a\" -gt \"$yy_b\" ]; then\n\t\treturn 0\n\tfi\n\tmm_a=\"$(echo \"$1\" | cut -d'.' -f2)\"\n\tmm_b=\"$(echo \"$2\" | cut -d'.' -f2)\"\n\n\t# trim leading zeros to accommodate CalVer\n\tmm_a=\"${mm_a#0}\"\n\tmm_b=\"${mm_b#0}\"\n\n\tif [ \"${mm_a:-0}\" -lt \"${mm_b:-0}\" ]; then\n\t\treturn 1\n\tfi\n\n\treturn 0\n)\n\nis_dry_run() {\n\tif [ -z \"$DRY_RUN\" ]; then\n\t\treturn 1\n\telse\n\t\treturn 0\n\tfi\n}\n\nis_wsl() {\n\tcase \"$(uname -r)\" in\n\t*microsoft* ) true ;; # WSL 2\n\t*Microsoft* ) true ;; # WSL 1\n\t* ) false;;\n\tesac\n}\n\nis_darwin() {\n\tcase \"$(uname -s)\" in\n\t*darwin* ) true ;;\n\t*Darwin* ) true ;;\n\t* ) false;;\n\tesac\n}\n\ndeprecation_notice() {\n\tdistro=$1\n\tdistro_version=$2\n\techo\n\tprintf \"\\033[91;1mDEPRECATION WARNING\\033[0m\\n\"\n\tprintf \"    This Linux distribution (\\033[1m%s %s\\033[0m) reached end-of-life and is no longer supported by this script.\\n\" \"$distro\" \"$distro_version\"\n\techo   \"    No updates or security fixes will be released for this distribution, and users are recommended\"\n\techo   \"    to upgrade to a currently maintained version of $distro.\"\n\techo\n\tprintf   \"Press \\033[1mCtrl+C\\033[0m now to abort this script, or wait for the installation to continue.\"\n\techo\n\tsleep 10\n}\n\nget_distribution() {\n\tlsb_dist=\"\"\n\t# Every system that we officially support has /etc/os-release\n\tif [ -r /etc/os-release ]; then\n\t\tlsb_dist=\"$(. /etc/os-release && echo \"$ID\")\"\n\tfi\n\t# Returning an empty string here should be alright since the\n\t# case statements don't act unless you provide an actual value\n\techo \"$lsb_dist\"\n}\n\necho_docker_as_nonroot() {\n\tif is_dry_run; then\n\t\treturn\n\tfi\n\tif command_exists docker && [ -e /var/run/docker.sock ]; then\n\t\t(\n\t\t\tset -x\n\t\t\t$sh_c 'docker version'\n\t\t) || true\n\tfi\n\n\t# intentionally mixed spaces and tabs here -- tabs are stripped by \"<<-EOF\", spaces are kept in the output\n\techo\n\techo \"================================================================================\"\n\techo\n\tif version_gte \"20.10\"; then\n\t\techo \"To run Docker as a non-privileged user, consider setting up the\"\n\t\techo \"Docker daemon in rootless mode for your user:\"\n\t\techo\n\t\techo \"    dockerd-rootless-setuptool.sh install\"\n\t\techo\n\t\techo \"Visit https://docs.docker.com/go/rootless/ to learn about rootless mode.\"\n\t\techo\n\tfi\n\techo\n\techo \"To run the Docker daemon as a fully privileged service, but granting non-root\"\n\techo \"users access, refer to https://docs.docker.com/go/daemon-access/\"\n\techo\n\techo \"WARNING: Access to the remote API on a privileged Docker daemon is equivalent\"\n\techo \"         to root access on the host. Refer to the 'Docker daemon attack surface'\"\n\techo \"         documentation for details: https://docs.docker.com/go/attack-surface/\"\n\techo\n\techo \"================================================================================\"\n\techo\n}\n\n# Check if this is a forked Linux distro\ncheck_forked() {\n\n\t# Check for lsb_release command existence, it usually exists in forked distros\n\tif command_exists lsb_release; then\n\t\t# Check if the `-u` option is supported\n\t\tset +e\n\t\tlsb_release -a -u > /dev/null 2>&1\n\t\tlsb_release_exit_code=$?\n\t\tset -e\n\n\t\t# Check if the command has exited successfully, it means we're in a forked distro\n\t\tif [ \"$lsb_release_exit_code\" = \"0\" ]; then\n\t\t\t# Print info about current distro\n\t\t\tcat <<-EOF\n\t\t\tYou're using '$lsb_dist' version '$dist_version'.\n\t\t\tEOF\n\n\t\t\t# Get the upstream release info\n\t\t\tlsb_dist=$(lsb_release -a -u 2>&1 | tr '[:upper:]' '[:lower:]' | grep -E 'id' | cut -d ':' -f 2 | tr -d '[:space:]')\n\t\t\tdist_version=$(lsb_release -a -u 2>&1 | tr '[:upper:]' '[:lower:]' | grep -E 'codename' | cut -d ':' -f 2 | tr -d '[:space:]')\n\n\t\t\t# Print info about upstream distro\n\t\t\tcat <<-EOF\n\t\t\tUpstream release is '$lsb_dist' version '$dist_version'.\n\t\t\tEOF\n\t\telse\n\t\t\tif [ -r /etc/debian_version ] && [ \"$lsb_dist\" != \"ubuntu\" ] && [ \"$lsb_dist\" != \"raspbian\" ]; then\n\t\t\t\tif [ \"$lsb_dist\" = \"osmc\" ]; then\n\t\t\t\t\t# OSMC runs Raspbian\n\t\t\t\t\tlsb_dist=raspbian\n\t\t\t\telse\n\t\t\t\t\t# We're Debian and don't even know it!\n\t\t\t\t\tlsb_dist=debian\n\t\t\t\tfi\n\t\t\t\tdist_version=\"$(sed 's/\\/.*//' /etc/debian_version | sed 's/\\..*//')\"\n\t\t\t\tcase \"$dist_version\" in\n\t\t\t\t\t12)\n\t\t\t\t\t\tdist_version=\"bookworm\"\n\t\t\t\t\t;;\n\t\t\t\t\t11)\n\t\t\t\t\t\tdist_version=\"bullseye\"\n\t\t\t\t\t;;\n\t\t\t\t\t10)\n\t\t\t\t\t\tdist_version=\"buster\"\n\t\t\t\t\t;;\n\t\t\t\t\t9)\n\t\t\t\t\t\tdist_version=\"stretch\"\n\t\t\t\t\t;;\n\t\t\t\t\t8)\n\t\t\t\t\t\tdist_version=\"jessie\"\n\t\t\t\t\t;;\n\t\t\t\tesac\n\t\t\tfi\n\t\tfi\n\tfi\n}\n\ndo_install() {\n\techo \"# Executing docker install script, commit: $SCRIPT_COMMIT_SHA\"\n\n\tif command_exists docker; then\n\t\tcat >&2 <<-'EOF'\n\t\t\tWarning: the \"docker\" command appears to already exist on this system.\n\n\t\t\tIf you already have Docker installed, this script can cause trouble, which is\n\t\t\twhy we're displaying this warning and provide the opportunity to cancel the\n\t\t\tinstallation.\n\n\t\t\tIf you installed the current Docker package using this script and are using it\n\t\t\tagain to update Docker, you can ignore this message, but be aware that the\n\t\t\tscript resets any custom changes in the deb and rpm repo configuration\n\t\t\tfiles to match the parameters passed to the script.\n\n\t\t\tYou may press Ctrl+C now to abort this script.\n\t\tEOF\n\t\t( set -x; sleep 20 )\n\tfi\n\n\tuser=\"$(id -un 2>/dev/null || true)\"\n\n\tsh_c='sh -c'\n\tif [ \"$user\" != 'root' ]; then\n\t\tif command_exists sudo; then\n\t\t\tsh_c='sudo -E sh -c'\n\t\telif command_exists su; then\n\t\t\tsh_c='su -c'\n\t\telse\n\t\t\tcat >&2 <<-'EOF'\n\t\t\tError: this installer needs the ability to run commands as root.\n\t\t\tWe are unable to find either \"sudo\" or \"su\" available to make this happen.\n\t\t\tEOF\n\t\t\texit 1\n\t\tfi\n\tfi\n\n\tif is_dry_run; then\n\t\tsh_c=\"echo\"\n\tfi\n\n\t# perform some very rudimentary platform detection\n\tlsb_dist=$( get_distribution )\n\tlsb_dist=\"$(echo \"$lsb_dist\" | tr '[:upper:]' '[:lower:]')\"\n\n\tif is_wsl; then\n\t\techo\n\t\techo \"WSL DETECTED: We recommend using Docker Desktop for Windows.\"\n\t\techo \"Please get Docker Desktop from https://www.docker.com/products/docker-desktop/\"\n\t\techo\n\t\tcat >&2 <<-'EOF'\n\n\t\t\tYou may press Ctrl+C now to abort this script.\n\t\tEOF\n\t\t( set -x; sleep 20 )\n\tfi\n\n\tcase \"$lsb_dist\" in\n\n\t\tubuntu)\n\t\t\tif command_exists lsb_release; then\n\t\t\t\tdist_version=\"$(lsb_release --codename | cut -f2)\"\n\t\t\tfi\n\t\t\tif [ -z \"$dist_version\" ] && [ -r /etc/lsb-release ]; then\n\t\t\t\tdist_version=\"$(. /etc/lsb-release && echo \"$DISTRIB_CODENAME\")\"\n\t\t\tfi\n\t\t;;\n\n\t\tdebian|raspbian)\n\t\t\tdist_version=\"$(sed 's/\\/.*//' /etc/debian_version | sed 's/\\..*//')\"\n\t\t\tcase \"$dist_version\" in\n\t\t\t\t12)\n\t\t\t\t\tdist_version=\"bookworm\"\n\t\t\t\t;;\n\t\t\t\t11)\n\t\t\t\t\tdist_version=\"bullseye\"\n\t\t\t\t;;\n\t\t\t\t10)\n\t\t\t\t\tdist_version=\"buster\"\n\t\t\t\t;;\n\t\t\t\t9)\n\t\t\t\t\tdist_version=\"stretch\"\n\t\t\t\t;;\n\t\t\t\t8)\n\t\t\t\t\tdist_version=\"jessie\"\n\t\t\t\t;;\n\t\t\tesac\n\t\t;;\n\n\t\tcentos|rhel)\n\t\t\tif [ -z \"$dist_version\" ] && [ -r /etc/os-release ]; then\n\t\t\t\tdist_version=\"$(. /etc/os-release && echo \"$VERSION_ID\")\"\n\t\t\tfi\n\t\t;;\n\n\t\t*)\n\t\t\tif command_exists lsb_release; then\n\t\t\t\tdist_version=\"$(lsb_release --release | cut -f2)\"\n\t\t\tfi\n\t\t\tif [ -z \"$dist_version\" ] && [ -r /etc/os-release ]; then\n\t\t\t\tdist_version=\"$(. /etc/os-release && echo \"$VERSION_ID\")\"\n\t\t\tfi\n\t\t;;\n\n\tesac\n\n\t# Check if this is a forked Linux distro\n\tcheck_forked\n\n\t# Print deprecation warnings for distro versions that recently reached EOL,\n\t# but may still be commonly used (especially LTS versions).\n\tcase \"$lsb_dist.$dist_version\" in\n\t\tcentos.8|centos.7|rhel.7)\n\t\t\tdeprecation_notice \"$lsb_dist\" \"$dist_version\"\n\t\t\t;;\n\t\tdebian.buster|debian.stretch|debian.jessie)\n\t\t\tdeprecation_notice \"$lsb_dist\" \"$dist_version\"\n\t\t\t;;\n\t\traspbian.buster|raspbian.stretch|raspbian.jessie)\n\t\t\tdeprecation_notice \"$lsb_dist\" \"$dist_version\"\n\t\t\t;;\n\t\tubuntu.bionic|ubuntu.xenial|ubuntu.trusty)\n\t\t\tdeprecation_notice \"$lsb_dist\" \"$dist_version\"\n\t\t\t;;\n\t\tubuntu.mantic|ubuntu.lunar|ubuntu.kinetic|ubuntu.impish|ubuntu.hirsute|ubuntu.groovy|ubuntu.eoan|ubuntu.disco|ubuntu.cosmic)\n\t\t\tdeprecation_notice \"$lsb_dist\" \"$dist_version\"\n\t\t\t;;\n\t\tfedora.*)\n\t\t\tif [ \"$dist_version\" -lt 40 ]; then\n\t\t\t\tdeprecation_notice \"$lsb_dist\" \"$dist_version\"\n\t\t\tfi\n\t\t\t;;\n\tesac\n\n\t# Run setup for each distro accordingly\n\tcase \"$lsb_dist\" in\n\t\tubuntu|debian|raspbian)\n\t\t\tpre_reqs=\"ca-certificates curl\"\n\t\t\tapt_repo=\"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] $DOWNLOAD_URL/linux/$lsb_dist $dist_version $CHANNEL\"\n\t\t\t(\n\t\t\t\tif ! is_dry_run; then\n\t\t\t\t\tset -x\n\t\t\t\tfi\n\t\t\t\t$sh_c 'apt-get -qq update >/dev/null'\n\t\t\t\t$sh_c \"DEBIAN_FRONTEND=noninteractive apt-get -y -qq install $pre_reqs >/dev/null\"\n\t\t\t\t$sh_c 'install -m 0755 -d /etc/apt/keyrings'\n\t\t\t\t$sh_c \"curl -fsSL \\\"$DOWNLOAD_URL/linux/$lsb_dist/gpg\\\" -o /etc/apt/keyrings/docker.asc\"\n\t\t\t\t$sh_c \"chmod a+r /etc/apt/keyrings/docker.asc\"\n\t\t\t\t$sh_c \"echo \\\"$apt_repo\\\" > /etc/apt/sources.list.d/docker.list\"\n\t\t\t\t$sh_c 'apt-get -qq update >/dev/null'\n\t\t\t)\n\t\t\tpkg_version=\"\"\n\t\t\tif [ -n \"$VERSION\" ]; then\n\t\t\t\tif is_dry_run; then\n\t\t\t\t\techo \"# WARNING: VERSION pinning is not supported in DRY_RUN\"\n\t\t\t\telse\n\t\t\t\t\t# Will work for incomplete versions IE (17.12), but may not actually grab the \"latest\" if in the test channel\n\t\t\t\t\tpkg_pattern=\"$(echo \"$VERSION\" | sed 's/-ce-/~ce~.*/g' | sed 's/-/.*/g')\"\n\t\t\t\t\tsearch_command=\"apt-cache madison docker-ce | grep '$pkg_pattern' | head -1 | awk '{\\$1=\\$1};1' | cut -d' ' -f 3\"\n\t\t\t\t\tpkg_version=\"$($sh_c \"$search_command\")\"\n\t\t\t\t\techo \"INFO: Searching repository for VERSION '$VERSION'\"\n\t\t\t\t\techo \"INFO: $search_command\"\n\t\t\t\t\tif [ -z \"$pkg_version\" ]; then\n\t\t\t\t\t\techo\n\t\t\t\t\t\techo \"ERROR: '$VERSION' not found amongst apt-cache madison results\"\n\t\t\t\t\t\techo\n\t\t\t\t\t\texit 1\n\t\t\t\t\tfi\n\t\t\t\t\tif version_gte \"18.09\"; then\n\t\t\t\t\t\t\tsearch_command=\"apt-cache madison docker-ce-cli | grep '$pkg_pattern' | head -1 | awk '{\\$1=\\$1};1' | cut -d' ' -f 3\"\n\t\t\t\t\t\t\techo \"INFO: $search_command\"\n\t\t\t\t\t\t\tcli_pkg_version=\"=$($sh_c \"$search_command\")\"\n\t\t\t\t\tfi\n\t\t\t\t\tpkg_version=\"=$pkg_version\"\n\t\t\t\tfi\n\t\t\tfi\n\t\t\t(\n\t\t\t\tpkgs=\"docker-ce${pkg_version%=}\"\n\t\t\t\tif version_gte \"18.09\"; then\n\t\t\t\t\t\t# older versions didn't ship the cli and containerd as separate packages\n\t\t\t\t\t\tpkgs=\"$pkgs docker-ce-cli${cli_pkg_version%=} containerd.io\"\n\t\t\t\tfi\n\t\t\t\tif version_gte \"20.10\"; then\n\t\t\t\t\t\tpkgs=\"$pkgs docker-compose-plugin docker-ce-rootless-extras$pkg_version\"\n\t\t\t\tfi\n\t\t\t\tif version_gte \"23.0\"; then\n\t\t\t\t\t\tpkgs=\"$pkgs docker-buildx-plugin\"\n\t\t\t\tfi\n\t\t\t\tif ! is_dry_run; then\n\t\t\t\t\tset -x\n\t\t\t\tfi\n\t\t\t\t$sh_c \"DEBIAN_FRONTEND=noninteractive apt-get -y -qq install $pkgs >/dev/null\"\n\t\t\t)\n\t\t\techo_docker_as_nonroot\n\t\t\texit 0\n\t\t\t;;\n\t\tcentos|fedora|rhel)\n\t\t\trepo_file_url=\"$DOWNLOAD_URL/linux/$lsb_dist/$REPO_FILE\"\n\t\t\t(\n\t\t\t\tif ! is_dry_run; then\n\t\t\t\t\tset -x\n\t\t\t\tfi\n\t\t\t\tif command_exists dnf5; then\n\t\t\t\t\t$sh_c \"dnf -y -q --setopt=install_weak_deps=False install dnf-plugins-core\"\n\t\t\t\t\t$sh_c \"dnf5 config-manager addrepo --overwrite --save-filename=docker-ce.repo --from-repofile='$repo_file_url'\"\n\n\t\t\t\t\tif [ \"$CHANNEL\" != \"stable\" ]; then\n\t\t\t\t\t\t$sh_c \"dnf5 config-manager setopt \\\"docker-ce-*.enabled=0\\\"\"\n\t\t\t\t\t\t$sh_c \"dnf5 config-manager setopt \\\"docker-ce-$CHANNEL.enabled=1\\\"\"\n\t\t\t\t\tfi\n\t\t\t\t\t$sh_c \"dnf makecache\"\n\t\t\t\telif command_exists dnf; then\n\t\t\t\t\t$sh_c \"dnf -y -q --setopt=install_weak_deps=False install dnf-plugins-core\"\n\t\t\t\t\t$sh_c \"rm -f /etc/yum.repos.d/docker-ce.repo  /etc/yum.repos.d/docker-ce-staging.repo\"\n\t\t\t\t\t$sh_c \"dnf config-manager --add-repo $repo_file_url\"\n\n\t\t\t\t\tif [ \"$CHANNEL\" != \"stable\" ]; then\n\t\t\t\t\t\t$sh_c \"dnf config-manager --set-disabled \\\"docker-ce-*\\\"\"\n\t\t\t\t\t\t$sh_c \"dnf config-manager --set-enabled \\\"docker-ce-$CHANNEL\\\"\"\n\t\t\t\t\tfi\n\t\t\t\t\t$sh_c \"dnf makecache\"\n\t\t\t\telse\n\t\t\t\t\t$sh_c \"yum -y -q install yum-utils\"\n\t\t\t\t\t$sh_c \"rm -f /etc/yum.repos.d/docker-ce.repo  /etc/yum.repos.d/docker-ce-staging.repo\"\n\t\t\t\t\t$sh_c \"yum-config-manager --add-repo $repo_file_url\"\n\n\t\t\t\t\tif [ \"$CHANNEL\" != \"stable\" ]; then\n\t\t\t\t\t\t$sh_c \"yum-config-manager --disable \\\"docker-ce-*\\\"\"\n\t\t\t\t\t\t$sh_c \"yum-config-manager --enable \\\"docker-ce-$CHANNEL\\\"\"\n\t\t\t\t\tfi\n\t\t\t\t\t$sh_c \"yum makecache\"\n\t\t\t\tfi\n\t\t\t)\n\t\t\tpkg_version=\"\"\n\t\t\tif command_exists dnf; then\n\t\t\t\tpkg_manager=\"dnf\"\n\t\t\t\tpkg_manager_flags=\"-y -q --best\"\n\t\t\telse\n\t\t\t\tpkg_manager=\"yum\"\n\t\t\t\tpkg_manager_flags=\"-y -q\"\n\t\t\tfi\n\t\t\tif [ -n \"$VERSION\" ]; then\n\t\t\t\tif is_dry_run; then\n\t\t\t\t\techo \"# WARNING: VERSION pinning is not supported in DRY_RUN\"\n\t\t\t\telse\n\t\t\t\t\tif [ \"$lsb_dist\" = \"fedora\" ]; then\n\t\t\t\t\t\tpkg_suffix=\"fc$dist_version\"\n\t\t\t\t\telse\n\t\t\t\t\t\tpkg_suffix=\"el\"\n\t\t\t\t\tfi\n\t\t\t\t\tpkg_pattern=\"$(echo \"$VERSION\" | sed 's/-ce-/\\\\\\\\.ce.*/g' | sed 's/-/.*/g').*$pkg_suffix\"\n\t\t\t\t\tsearch_command=\"$pkg_manager list --showduplicates docker-ce | grep '$pkg_pattern' | tail -1 | awk '{print \\$2}'\"\n\t\t\t\t\tpkg_version=\"$($sh_c \"$search_command\")\"\n\t\t\t\t\techo \"INFO: Searching repository for VERSION '$VERSION'\"\n\t\t\t\t\techo \"INFO: $search_command\"\n\t\t\t\t\tif [ -z \"$pkg_version\" ]; then\n\t\t\t\t\t\techo\n\t\t\t\t\t\techo \"ERROR: '$VERSION' not found amongst $pkg_manager list results\"\n\t\t\t\t\t\techo\n\t\t\t\t\t\texit 1\n\t\t\t\t\tfi\n\t\t\t\t\tif version_gte \"18.09\"; then\n\t\t\t\t\t\t# older versions don't support a cli package\n\t\t\t\t\t\tsearch_command=\"$pkg_manager list --showduplicates docker-ce-cli | grep '$pkg_pattern' | tail -1 | awk '{print \\$2}'\"\n\t\t\t\t\t\tcli_pkg_version=\"$($sh_c \"$search_command\" | cut -d':' -f 2)\"\n\t\t\t\t\tfi\n\t\t\t\t\t# Cut out the epoch and prefix with a '-'\n\t\t\t\t\tpkg_version=\"-$(echo \"$pkg_version\" | cut -d':' -f 2)\"\n\t\t\t\tfi\n\t\t\tfi\n\t\t\t(\n\t\t\t\tpkgs=\"docker-ce$pkg_version\"\n\t\t\t\tif version_gte \"18.09\"; then\n\t\t\t\t\t# older versions didn't ship the cli and containerd as separate packages\n\t\t\t\t\tif [ -n \"$cli_pkg_version\" ]; then\n\t\t\t\t\t\tpkgs=\"$pkgs docker-ce-cli-$cli_pkg_version containerd.io\"\n\t\t\t\t\telse\n\t\t\t\t\t\tpkgs=\"$pkgs docker-ce-cli containerd.io\"\n\t\t\t\t\tfi\n\t\t\t\tfi\n\t\t\t\tif version_gte \"20.10\"; then\n\t\t\t\t\tpkgs=\"$pkgs docker-compose-plugin docker-ce-rootless-extras$pkg_version\"\n\t\t\t\tfi\n\t\t\t\tif version_gte \"23.0\"; then\n\t\t\t\t\t\tpkgs=\"$pkgs docker-buildx-plugin\"\n\t\t\t\tfi\n\t\t\t\tif ! is_dry_run; then\n\t\t\t\t\tset -x\n\t\t\t\tfi\n\t\t\t\t$sh_c \"$pkg_manager $pkg_manager_flags install $pkgs\"\n\t\t\t)\n\t\t\techo_docker_as_nonroot\n\t\t\texit 0\n\t\t\t;;\n\t\tsles)\n\t\t\tif [ \"$(uname -m)\" != \"s390x\" ]; then\n\t\t\t\techo \"Packages for SLES are currently only available for s390x\"\n\t\t\t\texit 1\n\t\t\tfi\n\t\t\trepo_file_url=\"$DOWNLOAD_URL/linux/$lsb_dist/$REPO_FILE\"\n\t\t\tpre_reqs=\"ca-certificates curl libseccomp2 awk\"\n\t\t\t(\n\t\t\t\tif ! is_dry_run; then\n\t\t\t\t\tset -x\n\t\t\t\tfi\n\t\t\t\t$sh_c \"zypper install -y $pre_reqs\"\n\t\t\t\t$sh_c \"rm -f /etc/zypp/repos.d/docker-ce-*.repo\"\n\t\t\t\t$sh_c \"zypper addrepo $repo_file_url\"\n\n\t\t\t\topensuse_factory_url=\"https://download.opensuse.org/repositories/security:/SELinux/openSUSE_Factory/\"\n\t\t\t\tif ! zypper lr -d | grep -q \"${opensuse_factory_url}\"; then\n\t\t\t\t\topensuse_repo=\"${opensuse_factory_url}security:SELinux.repo\"\n\t\t\t\t\tif ! is_dry_run; then\n\t\t\t\t\t\tcat >&2 <<- EOF\n\t\t\t\t\t\t\tWARNING!!\n\t\t\t\t\t\t\topenSUSE repository ($opensuse_repo) will be enabled now.\n\t\t\t\t\t\t\tDo you wish to continue?\n\t\t\t\t\t\t\tYou may press Ctrl+C now to abort this script.\n\t\t\t\t\t\tEOF\n\t\t\t\t\t\t( set -x; sleep 20 )\n\t\t\t\t\tfi\n\t\t\t\t\t$sh_c \"zypper addrepo $opensuse_repo\"\n\t\t\t\tfi\n\t\t\t\t$sh_c \"zypper --gpg-auto-import-keys refresh\"\n\t\t\t\t$sh_c \"zypper lr -d\"\n\t\t\t)\n\t\t\tpkg_version=\"\"\n\t\t\tif [ -n \"$VERSION\" ]; then\n\t\t\t\tif is_dry_run; then\n\t\t\t\t\techo \"# WARNING: VERSION pinning is not supported in DRY_RUN\"\n\t\t\t\telse\n\t\t\t\t\tpkg_pattern=\"$(echo \"$VERSION\" | sed 's/-ce-/\\\\\\\\.ce.*/g' | sed 's/-/.*/g')\"\n\t\t\t\t\tsearch_command=\"zypper search -s --match-exact 'docker-ce' | grep '$pkg_pattern' | tail -1 | awk '{print \\$6}'\"\n\t\t\t\t\tpkg_version=\"$($sh_c \"$search_command\")\"\n\t\t\t\t\techo \"INFO: Searching repository for VERSION '$VERSION'\"\n\t\t\t\t\techo \"INFO: $search_command\"\n\t\t\t\t\tif [ -z \"$pkg_version\" ]; then\n\t\t\t\t\t\techo\n\t\t\t\t\t\techo \"ERROR: '$VERSION' not found amongst zypper list results\"\n\t\t\t\t\t\techo\n\t\t\t\t\t\texit 1\n\t\t\t\t\tfi\n\t\t\t\t\tsearch_command=\"zypper search -s --match-exact 'docker-ce-cli' | grep '$pkg_pattern' | tail -1 | awk '{print \\$6}'\"\n\t\t\t\t\t# It's okay for cli_pkg_version to be blank, since older versions don't support a cli package\n\t\t\t\t\tcli_pkg_version=\"$($sh_c \"$search_command\")\"\n\t\t\t\t\tpkg_version=\"-$pkg_version\"\n\t\t\t\tfi\n\t\t\tfi\n\t\t\t(\n\t\t\t\tpkgs=\"docker-ce$pkg_version\"\n\t\t\t\tif version_gte \"18.09\"; then\n\t\t\t\t\tif [ -n \"$cli_pkg_version\" ]; then\n\t\t\t\t\t\t# older versions didn't ship the cli and containerd as separate packages\n\t\t\t\t\t\tpkgs=\"$pkgs docker-ce-cli-$cli_pkg_version containerd.io\"\n\t\t\t\t\telse\n\t\t\t\t\t\tpkgs=\"$pkgs docker-ce-cli containerd.io\"\n\t\t\t\t\tfi\n\t\t\t\tfi\n\t\t\t\tif version_gte \"20.10\"; then\n\t\t\t\t\tpkgs=\"$pkgs docker-compose-plugin docker-ce-rootless-extras$pkg_version\"\n\t\t\t\tfi\n\t\t\t\tif version_gte \"23.0\"; then\n\t\t\t\t\t\tpkgs=\"$pkgs docker-buildx-plugin\"\n\t\t\t\tfi\n\t\t\t\tif ! is_dry_run; then\n\t\t\t\t\tset -x\n\t\t\t\tfi\n\t\t\t\t$sh_c \"zypper -q install -y $pkgs\"\n\t\t\t)\n\t\t\techo_docker_as_nonroot\n\t\t\texit 0\n\t\t\t;;\n\t\t*)\n\t\t\tif [ -z \"$lsb_dist\" ]; then\n\t\t\t\tif is_darwin; then\n\t\t\t\t\techo\n\t\t\t\t\techo \"ERROR: Unsupported operating system 'macOS'\"\n\t\t\t\t\techo \"Please get Docker Desktop from https://www.docker.com/products/docker-desktop\"\n\t\t\t\t\techo\n\t\t\t\t\texit 1\n\t\t\t\tfi\n\t\t\tfi\n\t\t\techo\n\t\t\techo \"ERROR: Unsupported distribution '$lsb_dist'\"\n\t\t\techo\n\t\t\texit 1\n\t\t\t;;\n\tesac\n\texit 1\n}\n\n# wrapped up in a function so that we have some protection against only getting\n# half the file during \"curl | sh\"\ndo_install\n"
        },
        {
          "name": "rootless-install.sh",
          "type": "blob",
          "size": 8.07421875,
          "content": "#!/bin/sh\nset -e\n# Docker CE for Linux installation script (Rootless mode)\n#\n# See https://docs.docker.com/go/rootless/ for the\n# installation steps.\n#\n# This script is meant for quick & easy install via:\n#   $ curl -fsSL https://get.docker.com/rootless -o get-docker.sh\n#   $ sh get-docker.sh\n#\n# NOTE: Make sure to verify the contents of the script\n#       you downloaded matches the contents of install.sh\n#       located at https://github.com/docker/docker-install\n#       before executing.\n#\n# Git commit from https://github.com/docker/docker-install when\n# the script was uploaded (Should only be modified by upload job):\nSCRIPT_COMMIT_SHA=UNKNOWN\n\n# This script should be run with an unprivileged user and install/setup Docker under $HOME/bin/.\n\n# latest version available in the stable channel.\nSTABLE_LATEST=\"27.4.1\"\n\n# latest version available in the test channel.\nTEST_LATEST=\"27.5.0-rc.2\"\n\n# The channel to install from:\n#   * test\n#   * stable\nDEFAULT_CHANNEL_VALUE=\"stable\"\nif [ -z \"$CHANNEL\" ]; then\n\tCHANNEL=$DEFAULT_CHANNEL_VALUE\nfi\n\nSTATIC_RELEASE_URL=\nSTATIC_RELEASE_ROOTLESS_URL=\ncase \"$CHANNEL\" in\n    \"stable\")\n        echo \"# Installing stable version ${STABLE_LATEST}\"\n        STATIC_RELEASE_URL=\"https://download.docker.com/linux/static/$CHANNEL/$(uname -m)/docker-${STABLE_LATEST}.tgz\"\n        STATIC_RELEASE_ROOTLESS_URL=\"https://download.docker.com/linux/static/$CHANNEL/$(uname -m)/docker-rootless-extras-${STABLE_LATEST}.tgz\"\n        ;;\n    \"test\")\n        echo \"# Installing test version ${TEST_LATEST}\"\n        STATIC_RELEASE_URL=\"https://download.docker.com/linux/static/$CHANNEL/$(uname -m)/docker-${TEST_LATEST}.tgz\"\n        STATIC_RELEASE_ROOTLESS_URL=\"https://download.docker.com/linux/static/$CHANNEL/$(uname -m)/docker-rootless-extras-${TEST_LATEST}.tgz\"\n        ;;\n    *)\n        >&2 echo \"Aborting because of unknown CHANNEL \\\"$CHANNEL\\\". Set \\$CHANNEL to either \\\"stable\\\" or \\\"test\\\".\"\n        exit 1\n        ;;\nesac\n\ninit_vars() {\n\tBIN=\"${DOCKER_BIN:-$HOME/bin}\"\n\n\tDAEMON=dockerd\n\tSYSTEMD=\n\tif systemctl --user daemon-reload >/dev/null 2>&1; then\n\t\tSYSTEMD=1\n\tfi\n}\n\nchecks() {\n\t# OS verification: Linux only, point osx/win to helpful locations\n\tcase \"$(uname)\" in\n\tLinux)\n\t\t;;\n\t*)\n\t\t>&2 echo \"Rootless Docker cannot be installed on $(uname)\"; exit 1\n\t\t;;\n\tesac\n\n\t# User verification: deny running as root (unless forced?)\n\tif [ \"$(id -u)\" = \"0\" ] && [ -z \"$FORCE_ROOTLESS_INSTALL\" ]; then\n\t\t>&2 echo \"Refusing to install rootless Docker as the root user\"; exit 1\n\tfi\n\n\t# HOME verification\n\tif [ ! -d \"$HOME\" ]; then\n\t\t>&2 echo \"Aborting because HOME directory $HOME does not exist\"; exit 1\n\tfi\n\n\tif [ -d \"$BIN\" ]; then\n\t\tif [ ! -w \"$BIN\" ]; then\n\t\t\t>&2 echo \"Aborting because $BIN is not writable\"; exit 1\n\t\tfi\n\telse\n\t\tif [ ! -w \"$HOME\" ]; then\n\t\t\t>&2 echo \"Aborting because HOME (\\\"$HOME\\\") is not writable\"; exit 1\n\t\tfi\n\tfi\n\n\t# Existing rootful docker verification\n\tif [ -w /var/run/docker.sock ] && [ -z \"$FORCE_ROOTLESS_INSTALL\" ]; then\n\t\t>&2 echo \"Aborting because rootful Docker is running and accessible. Set FORCE_ROOTLESS_INSTALL=1 to ignore.\"; exit 1\n\tfi\n\n\t# Validate XDG_RUNTIME_DIR\n\tif [ ! -w \"$XDG_RUNTIME_DIR\" ]; then\n\t\tif [ -n \"$SYSTEMD\" ]; then\n\t\t\t>&2 echo \"Aborting because systemd was detected but XDG_RUNTIME_DIR (\\\"$XDG_RUNTIME_DIR\\\") does not exist or is not writable\"\n\t\t\t>&2 echo \"Hint: this could happen if you changed users with 'su' or 'sudo'. To work around this:\"\n\t\t\t>&2 echo \"- try again by first running with root privileges 'loginctl enable-linger <user>' where <user> is the unprivileged user and export XDG_RUNTIME_DIR to the value of RuntimePath as shown by 'loginctl show-user <user>'\"\n\t\t\t>&2 echo \"- or simply log back in as the desired unprivileged user (ssh works for remote machines)\"\n\t\t\texit 1\n\t\tfi\n\tfi\n\n\t# Already installed verification (unless force?). Only having docker cli binary previously shouldn't fail the build.\n\tif [ -x \"$BIN/$DAEMON\" ]; then\n\t\t# If rootless installation is detected print out the modified PATH and DOCKER_HOST that needs to be set.\n\t\techo \"# Existing rootless Docker detected at $BIN/$DAEMON\"\n\t\techo\n\t\techo \"# To reinstall or upgrade rootless Docker, run the following commands and then rerun the installation script:\"\n\t\techo \"systemctl --user stop docker\"\n\t\techo \"rm -f $BIN/$DAEMON\"\n\t\techo\n\t\techo \"# Alternatively, install the docker-ce-rootless-extras RPM/deb package for ease of package management (requires root).\"\n\t\techo \"# See https://docs.docker.com/go/rootless/ for details.\"\n\t\texit 0\n\tfi\n\n\tINSTRUCTIONS=\n\n\t# uidmap dependency check\n\tif ! command -v newuidmap >/dev/null 2>&1; then\n\t\tif command -v apt-get >/dev/null 2>&1; then\n\t\t\tINSTRUCTIONS=\"apt-get -y install uidmap\"\n\t\telif command -v dnf >/dev/null 2>&1; then\n\t\t\tINSTRUCTIONS=\"dnf -y install shadow-utils\"\n\t\telif command -v yum >/dev/null 2>&1; then\n\t\t\tINSTRUCTIONS=\"curl -o /etc/yum.repos.d/vbatts-shadow-utils-newxidmap-epel-7.repo https://copr.fedorainfracloud.org/coprs/vbatts/shadow-utils-newxidmap/repo/epel-7/vbatts-shadow-utils-newxidmap-epel-7.repo\nyum -y install shadow-utils46-newxidmap\"\n\t\telse\n\t\t\techo \"newuidmap binary not found. Please install with a package manager.\"\n\t\t\texit 1\n\t\tfi\n\tfi\n\n\t# iptables dependency check\n\tif [ -z \"$SKIP_IPTABLES\" ] && ! command -v iptables >/dev/null 2>&1 && [ ! -f /sbin/iptables ] && [ ! -f /usr/sbin/iptables ]; then\n\t\tif command -v apt-get >/dev/null 2>&1; then\n\t\t\tINSTRUCTIONS=\"${INSTRUCTIONS}\napt-get -y install iptables\"\n\t\telif command -v dnf >/dev/null 2>&1; then\n\t\t\tINSTRUCTIONS=\"${INSTRUCTIONS}\ndnf -y install iptables\"\n\t\telse\n\t\t\techo \"iptables binary not found. Please install with a package manager.\"\n\t\t\texit 1\n\t\tfi\n\tfi\n\n\t# ip_tables module dependency check\n\tif [ -z \"$SKIP_IPTABLES\" ] && ! lsmod | grep ip_tables >/dev/null 2>&1 && ! grep -q ip_tables \"/lib/modules/$(uname -r)/modules.builtin\"; then\n\t\t\tINSTRUCTIONS=\"${INSTRUCTIONS}\nmodprobe ip_tables\"\n\tfi\n\n\t# debian requires setting unprivileged_userns_clone\n\tif [ -f /proc/sys/kernel/unprivileged_userns_clone ]; then\n\t\tif [ \"1\" != \"$(cat /proc/sys/kernel/unprivileged_userns_clone)\" ]; then\n\t\t\tINSTRUCTIONS=\"${INSTRUCTIONS}\ncat <<EOT > /etc/sysctl.d/50-rootless.conf\nkernel.unprivileged_userns_clone = 1\nEOT\nsysctl --system\"\n\t\tfi\n\tfi\n\n\t# centos requires setting max_user_namespaces\n\tif [ -f /proc/sys/user/max_user_namespaces ]; then\n\t\tif [ \"0\" = \"$(cat /proc/sys/user/max_user_namespaces)\" ]; then\n\t\t\tINSTRUCTIONS=\"${INSTRUCTIONS}\ncat <<EOT > /etc/sysctl.d/51-rootless.conf\nuser.max_user_namespaces = 28633\nEOT\nsysctl --system\"\n\t\tfi\n\tfi\n\n\tif [ -n \"$INSTRUCTIONS\" ]; then\n\t\techo \"# Missing system requirements. Please run following commands to\n# install the requirements and run this installer again.\n# Alternatively iptables checks can be disabled with SKIP_IPTABLES=1\"\n\n\t\techo\n\t\techo \"cat <<EOF | sudo sh -x\"\n\t\techo \"$INSTRUCTIONS\"\n\t\techo \"EOF\"\n\t\techo\n\t\texit 1\n\tfi\n\n\t# validate subuid/subgid files for current user\n\tif ! grep \"^$(id -un):\\|^$(id -u):\" /etc/subuid >/dev/null 2>&1; then\n\t\t>&2 echo \"Could not find records for the current user $(id -un) from /etc/subuid . Please make sure valid subuid range is set there.\nFor example:\necho \\\"$(id -un):100000:65536\\\" >> /etc/subuid\"\n\t\texit 1\n\tfi\n\tif ! grep \"^$(id -un):\\|^$(id -u):\" /etc/subgid >/dev/null 2>&1; then\n\t\t>&2 echo \"Could not find records for the current user $(id -un) from /etc/subgid . Please make sure valid subuid range is set there.\nFor example:\necho \\\"$(id -un):100000:65536\\\" >> /etc/subgid\"\n\t\texit 1\n\tfi\n}\n\nexec_setuptool() {\n\tif [ -n \"$FORCE_ROOTLESS_INSTALL\" ]; then\n\t\tset -- \"$@\" --force\n\tfi\n\tif [ -n \"$SKIP_IPTABLES\" ]; then\n\t\tset -- \"$@\" --skip-iptables\n\tfi\n\t(\n\t\tset -x\n\t\tPATH=\"$BIN:$PATH\" \"$BIN/dockerd-rootless-setuptool.sh\" install \"$@\"\n\t)\n}\n\ndo_install() {\n\techo \"# Executing docker rootless install script, commit: $SCRIPT_COMMIT_SHA\"\n\n\tinit_vars\n\tchecks\n\n\ttmp=$(mktemp -d)\n\ttrap 'rm -rf \"$tmp\"' EXIT INT TERM\n\t# Download tarballs docker-* and docker-rootless-extras=*\n\t(\n\t\tcd \"$tmp\"\n\t\tcurl -L -o docker.tgz \"$STATIC_RELEASE_URL\"\n\t\tcurl -L -o rootless.tgz \"$STATIC_RELEASE_ROOTLESS_URL\"\n\t)\n\t# Extract under $HOME/bin/\n\t(\n\t\tmkdir -p \"$BIN\"\n\t\tcd \"$BIN\"\n\t\ttar zxf \"$tmp/docker.tgz\" --strip-components=1\n\t\ttar zxf \"$tmp/rootless.tgz\" --strip-components=1\n\t)\n\n\texec_setuptool \"$@\"\n}\n\ndo_install \"$@\"\n"
        },
        {
          "name": "verify-docker-install",
          "type": "blob",
          "size": 0.4697265625,
          "content": "#!/bin/bash -e\n(\n\techo \"INFO: Executing installation script!\"\n\tsh build/install.sh\n)\n\n# Verify that we can at least get version output\nif ! docker --version; then\n\techo \"ERROR: Did Docker get installed?\"\n\texit 1\nfi\n\n# Attempt to run a container if not in a container\nif [ ! -f /.dockerenv  ]; then\n\tif ! docker run --rm hello-world; then\n\t\techo \"ERROR: Could not get docker to run the hello world container\"\n\t\texit 2\n\tfi\nfi\n\necho \"INFO: Successfully verified docker installation!\"\n"
        }
      ]
    }
  ]
}