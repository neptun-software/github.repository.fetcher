{
  "metadata": {
    "timestamp": 1736568746898,
    "page": 845,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg0OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "dokku-alt/dokku-alt",
      "stars": 1159,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": ".drone.yml",
          "type": "blob",
          "size": 0.94140625,
          "content": "image: ayufan/dokku-alt-base:latest\n\nscript:\n- \"sed -i 's/linux-image-extra-virtual, //g' deb/dokku-alt/DEBIAN/control\"\n- make install\n- tests/run_localhost\n\ndeploy:\n  bash:\n    script:\n    - apt-get install -y dpkg-sig\n    - git checkout .\n    - git remote add deploy git@github.com:dokku-alt/dokku-alt.git\n    - git fetch deploy gh-pages:gh-pages\n    - git config user.email \"drone@ayufan.eu\"\n    - git config user.name \"Drone\"\n    - 'echo \"$GPG_KEY\" | base64 -d | gpg --allow-secret-key-import --import -'\n    - '[[ \"$CI_BRANCH\" == \"master\" ]] && make dpkg_beta'\n    - '[[ \"$CI_BRANCH\" == \"stable\" ]] && make dpkg_stable'\n    - git push deploy gh-pages\n    condition:\n      owner: dokku-alt\n      branch: '[ms][at][sa][tb][el][re]'\n\nnotify:\n  email:\n    recipients:\n    - ayufan@ayufan.eu\n    on_failure: \"true\"\n  webhook:\n    urls:\n    - $$GITTER_SERVICE\n    on_success: true\n    on_failure: true\n  slack:\n    webhook_url: $$SLACK_SERVICE\n    on_failure: true\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1533203125,
          "content": "root = true\n\n[*]\ninsert_final_newline = true\nindent_style = space\nindent_size = 2\n\n[Makefile]\ninsert_final_newline = true\nindent_style = tab\nindent_size = 4\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0625,
          "content": "VERSION\nREVISION\n.vagrant\n.DS_Store\nstack.tgz\ndeb/*.deb\ndeb-tmp\n"
        },
        {
          "name": ".gittrees",
          "type": "blob",
          "size": 1.291015625,
          "content": "[subtree \"plugins/dokku-mongodb\"]\n\turl = https://github.com/jeffutter/dokku-mongodb-plugin.git\n\tpath = plugins/dokku-mongodb\n\tbranch = master\n[subtree \"plugins/dokku-git-rev\"]\n\turl = https://github.com/nornagon/dokku-git-rev.git\n\tpath = plugins/dokku-git-rev\n\tbranch = master\n[subtree \"plugins/dokku-rebuild\"]\n\turl = https://github.com/scottatron/dokku-rebuild.git\n\tpath = plugins/dokku-rebuild\n\tbranch = master\n[subtree \"plugins/dokku-mariadb\"]\n\turl = https://github.com/Kloadut/dokku-md-plugin.git\n\tpath = plugins/dokku-mariadb\n\tbranch = master\n[subtree \"plugins/dokku-memcached\"]\n\turl = https://github.com/jezdez/dokku-memcached-plugin.git\n\tpath = plugins/dokku-memcached\n\tbranch = master\n[subtree \"plugins/dokku-postgresql\"]\n\turl = https://github.com/Kloadut/dokku-pg-plugin.git\n\tpath = plugins/dokku-postgresql\n\tbranch = master\n[subtree \"plugins/dokku-user-env-compile\"]\n\turl = https://github.com/musicglue/dokku-user-env-compile.git\n\tpath = plugins/dokku-user-env-compile\n\tbranch = master\n[subtree \"pluginhook\"]\n\turl = https://github.com/progrium/pluginhook.git\n\tpath = pluginhook\n\tbranch = master\n[subtree \"gitreceive\"]\n\turl = https://github.com/progrium/gitreceive.git\n\tpath = gitreceive\n\tbranch = master\n[subtree \"sshcommand\"]\n\turl = https://github.com/progrium/sshcommand.git\n\tpath = sshcommand\n\tbranch = master\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.6826171875,
          "content": "---\nsudo: false\nenv:\n  global:\n    - USE_VHOST=1\n  matrix:\n    - APP_NAME=acl\n    - APP_NAME=htpasswd\n    - APP_NAME=mariadb\n    - APP_NAME=mongodb\n    - APP_NAME=config\n    - APP_NAME=dockerfile\n    - APP_NAME=gitsubmodules\n    - APP_NAME=go\n    - APP_NAME=java\n    - APP_NAME=multi\n    - APP_NAME=nodejs-express\n    - APP_NAME=php\n    - APP_NAME=postgresql\n    - APP_NAME=python-flask\n    - APP_NAME=static\n    - APP_NAME=static USE_VHOST=0\nmatrix:\n  fast_finish: true\ninstall:\n  - contrib/install_docker_and_uml.sh\nscript:\n  - sed -i 's/linux-image-extra-virtual, //g' deb/dokku-alt/DEBIAN/control\n  - sudo make install\n  - contrib/start_docker_and_uml.sh APP_NAME=$APP_NAME USE_VHOST=$USE_VHOST\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.7490234375,
          "content": "# If you're submitting a patch, please add your name here in alphabetical order as part of the patch.\n# This file lists all individuals having contributed content to the repository.\n#\nAlexander <iam.asm89@gmail.com>\nAlexander Beletsky <alexander.beletsky@gmail.com>\nAlexis Gavoty <kload@kload.fr>\nFelipe Coury <felipe.coury@gmail.com>\nJeff Lindsay <progrium@gmail.com>\nJose Diaz-Gonzalez <dokku@josediazgonzalez.com>\nLeo Unbekandt <leo@unbekandt.eu>\nLudovic Perrine <jazzzz@gmail.com>\nLuigi Maselli <grigio.org@gmail.com>\nMartin Weiss <kornnflake@gmail.com>\nPaul Lietar <paul@lietar.net>\nRajiv Makhijani <rajiv@blue-tech.org>\nrhy-jot <rhy-jot@myeml.net>\nRichard North <rich.north@gmail.com>\nSebastian Götte <github@jaseg.net>\nSilas Baronda <silas.baronda@gmail.com>\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.2392578125,
          "content": "FROM ubuntu:trusty\nMAINTAINER Kamil Trzciński <ayufan@ayufan.eu>\n\n# Install required dependencies\nRUN apt-get update && \\\n\tapt-get install -y apt-transport-https locales git make \\\n\tcurl software-properties-common \\\n\tnginx dnsutils aufs-tools \\\n\tdpkg-dev openssh-server man-db\nRUN apt-get install -y apache2-utils\nRUN chmod ugo+s /usr/bin/sudo\n\n# Configure environment\nRUN locale-gen en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LC_ALL en_US.UTF-8\n\n# Install docker\nRUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9 && \\\n\techo deb https://get.docker.io/ubuntu docker main > /etc/apt/sources.list.d/docker.list && \\\n\tapt-get update && \\\n\tapt-get install -y lxc-docker\n\n# Install forego\nRUN curl -o /usr/bin/forego https://godist.herokuapp.com/projects/ddollar/forego/releases/current/linux-amd64/forego && chmod +x /usr/bin/forego\n\n# Configure ssh daemon\nRUN sed -i 's/^PermitRootLogin.*/PermitRootLogin yes/g' /etc/ssh/sshd_config\n\n# Configure volumes\nVOLUME /home/dokku\nVOLUME /var/lib/docker\n\n# Install dokku-alt\nADD / /srv/dokku-alt\nWORKDIR /srv/dokku-alt\nRUN sed -i 's/linux-image-extra-virtual, //g' deb/dokku-alt/DEBIAN/control\nRUN make install\n\nEXPOSE 22 80 443\n\n# Start all services\nCMD [\"forego\", \"start\"]\n"
        },
        {
          "name": "HISTORY.md",
          "type": "blob",
          "size": 3.640625,
          "content": "# History of Dokku-alt\n\n## WIP\n\n* Added SSH key to buildstep images\n\n## 0.3.11 (BETA)\n\n* Merged dokku v.0.3.9 upstream: af671b2abaa506a5de320e30d033fc0e51e33221\n\n## 0.3.10\n\n* Added dokku-alt-manager\n* Added self-signed certificates\n* Added DOKKU_NGINX_READ_TIMEOUT\n* Added shortened commands in apps namespace: list, status, start, stop, disable, enable, restart\n* Allow to specify per-app custom buildstep image with config DOKKU_BUILDSTEP_IMAGE\n* Support running docker in dind configuration - it's still BETA and can disappear in one of future releases\n* Don't expose ports of anything by default: it greatly enhances security of dokku-alt\n* Trigger ONBUILD commands on application rebuild even if it's cached - this allows to update container content which can change over time\n* Use new method of storing container images, make it safe to simulatenously receive multiple pushes\n* Use 301 for nginx redirects\n* Use cedar-14 stack as default\n* Use server's hostname if no VHOST is found\n* Fixed host-based volumes\n* Merged dokku v.0.3.5 upstream: 7c2f21fd2a854e48cab2bae82477d04ebcbdd4ae\n* Merged dokku v.0.3.8 upstream: ad030b21d43cf7428f57d6208f3e4d63ba0014ba\n\n## 0.3.9\n\n* Internal release\n\n## 0.3.8\n\n* Added `dokku rebuild:force myapp`, `dokku rebuild:all` and `dokku rebuild:all:force`\n* Updated vhost and list of TLS ciphers.\n* Fixed restart issue.\n* Fixed mariadb user credential creation.\n* Fixed mariadb and mongodb tests.\n\n## 0.3.7\n\n* Added integration testing using Wercker and Travis-CI (not yet fully working)\n* Added `dokku create`\n* Added ACL plugin: admin and deploy only keys\n* Fixed MongoDB user creation\n* Use `postgres` instead of `postgresql` in DATABASE_URL\n* Allow to use alternative images for MariaDB, MongoDB, PostgreSQL and Redis (different server versions)\n* Added plugin for easy TLS certificate management\n* Added HTTP-Basic support\n* Enable SPDY support and allow to use HSTS by specifying DOKKU_ENABLE_HSTS=1 for an app\n* Fixed bug with data-volumes being injected during buildstep process\n* Allow to configure NGINX listen address\n* `X-Forwarded-For` uses `$proxy_add_x_forwarded_for`\n\n## 0.3.6\n\n* Added bind to 0.0.0.0 in dokku-installer.\n* Added WARNING about exposing ports to outside world.\n* Allow to import databases using `mariadb:console`, `postgresql:console`.\n* Added `mariadb:dump`, `postgresql:dump` and `mongodb:import`, `mongodb:export`, `mongodb:dump`.\n* Added -f to `dokku:logs`.\n* Fixed issue with not exposing env variables during buildstep build.\n* Use `docker logs` instead of `docker attach` to view output of containers during build.\n* Better run method for `bootstrap.sh` script - interactive mode.\n* Revoke PostgreSQL permissions on application destroy.\n\n## 0.3.5\n\n* Added data volumes: docker and host-based.\n* Added support for config vars: PREBOOT_WAIT_TIME, PREBOOT_COOLDOWN_TIME, DOKKU_CHECKS_WAIT, DOKKU_CHECKS_TIMEOUT and DOKKU_CHECKS_RETRY.\n* Renamed zero-downtime to preboot.\n* Added `dokku enter` and `dokku exec` which allows you to gain interactive shell or execute command in application container.\n\n## 0.3.4\n\n* Buildstep uses [Foreman](https://github.com/ddollar/foreman) by default.\n\n## 0.3.3\n\n* Added image tagging: `dokku tags:add <app> <tag_name>; dokku deploy <app> <tag_name>`\n* Added zero-downtime deployment: `dokku config:set <app> DOKKU_ZERO_DOWNTIME=1 DOKKU_WAIT_TO_RETIRE=seconds`\n* Added stable and beta releases\n\n## 0.3.2\n\n* Added nginx `proxy_redirect` for all hostnames\n\n## 0.3.1\n\n* Added signed .deb\n* Fixed nginx `proxy_redirect`\n* Pull database images on use, not on install\n* Wait for databases to boot\n* Added Dockerfile to build dokku-alt based image (and run tests)\n\n## 0.3.0\n\n* Initial release of dokku-alt - rework of Dokku 0.3.0\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.03125,
          "content": "Copyright (C) 2014 Jeff Lindsay\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 4.099609375,
          "content": "DOKKU_ROOT ?= /home/dokku\nSIGN_KEY ?= EAD883AF\n\nDEB_BRANCH := $(shell git rev-parse --abbrev-ref HEAD || cat BRANCH || echo master)\nDEB_VERSION := $(shell git describe --tags || cat VERSION || echo 0.0)\nDEB_REVISION := $(shell git rev-parse HEAD || cat REVISION || echo unknown)\nDEB_ARCH := amd64\nDEB_NAME ?= dokku-alt\nDEB_PKG := $(DEB_NAME)-$(DEB_VERSION)-$(DEB_ARCH).deb\n\n.PHONY: all help dpkg install devinstall pull push sync\n\nFORCE:\n\nall: help\n\nhelp:\n\t# Type \"make dpkg\" to create deb package.\n\t# Type \"make install\" to install.\n\t# Type \"make devinstall\" to switch to development version.\n\t# Type \"make dpkg_stable\" to build and commit stable version.\n\t# Type \"make dpkg_beta\" to build and commit beta version.\n\ndpkg:\n\trm -f dokku-alt-*.deb\n\trm -rf deb-tmp/\n\tcp -r deb deb-tmp/\n\tchmod 0440 deb-tmp/dokku-alt/etc/sudoers.d/*\n\tmkdir -p deb-tmp/dokku-alt/usr/local/bin\n\tmkdir -p deb-tmp/dokku-alt/var/lib/dokku-alt\n\tmkdir -p deb-tmp/dokku-alt/usr/local/share/man/man1\n\tmkdir -p deb-tmp/dokku-alt/usr/local/share/dokku-alt/contrib\n\tcp sshcommand/sshcommand deb-tmp/dokku-alt/usr/local/bin/sshcommand\n\tcp gitreceive/gitreceive deb-tmp/dokku-alt/usr/local/bin/gitreceive\n\tcp pluginhook/pluginhook deb-tmp/dokku-alt/usr/local/bin/pluginhook\n\tcp dokku deb-tmp/dokku-alt/usr/local/bin\n\tcp dokku-daemon deb-tmp/dokku-alt/usr/local/bin\n\tcp -r plugins deb-tmp/dokku-alt/var/lib/dokku-alt\n\tcp dokku.1 deb-tmp/dokku-alt/usr/local/share/man/man1/dokku.1\n\tcp contrib/dokku-installer.rb deb-tmp/dokku-alt/usr/local/share/dokku-alt/contrib\n\techo $(DEB_VERSION) > deb-tmp/dokku-alt/var/lib/dokku-alt/VERSION\n\techo $(DEB_REVISION) > deb-tmp/dokku-alt/var/lib/dokku-alt/GIT_REV\n\tsed -i \"s/^Version: .*/Version: $(DEB_VERSION)/g\" deb-tmp/dokku-alt/DEBIAN/control\n\tsed -i \"s/^Package: .*/Package: $(DEB_NAME)/g\" deb-tmp/dokku-alt/DEBIAN/control\nifeq ($(DEB_NAME), dokku-alt)\n\techo \"Conflicts: pluginhook, dokku-alt-beta\" >> deb-tmp/dokku-alt/DEBIAN/control\nelse\nifeq ($(DEB_NAME), dokku-alt-beta)\n\techo \"Conflicts: pluginhook, dokku-alt\" >> deb-tmp/dokku-alt/DEBIAN/control\nelse\n\techo \"Conflicts: pluginhook, dokku-alt, dokku-alt-beta\" >> deb-tmp/dokku-alt/DEBIAN/control\nendif\nendif\n\tfakeroot dpkg-deb --build deb-tmp/dokku-alt $(DEB_PKG)\n\trm -rf deb-tmp/\n\ninstall: dpkg\n\tsudo dpkg -i $(DEB_PKG) || sudo apt-get -f -y install && sudo dpkg -i $(DEB_PKG)\n\ndevinstall:\n\t[ -e /usr/local/bin/dokku ] || echo Please install dokku-alt first\n\tln -sf \"$(PWD)/dokku\" /usr/local/bin/dokku\n\tln -sf \"$(PWD)/sshcommand/sshcommand\" /usr/local/bin/sshcommand\n\tln -sf \"$(PWD)/gitreceive/gitreceive\" /usr/local/bin/gitreceive\n\trm -rf /var/lib/dokku-alt/plugins\n\tln -sf \"$(PWD)/plugins\" /var/lib/dokku-alt/\n\ndpkg_commit: dpkg\n\t# sign current release\n\tdpkg-sig -k $(SIGN_KEY) --sign builder $(DEB_PKG)\n\tgit checkout gh-pages\n\trm -f InRelease Release.gpg\n\t# binary\n\tapt-ftparchive packages . > Packages\n\tapt-ftparchive release . > Release\n\tgzip -c Packages > Packages.gz\n\tgpg --clearsign -o InRelease Release\n\tgpg -abs -o Release.gpg Release\n\tgit add $(DEB_PKG) Packages* Release* InRelease\n\t# commit current release\n\tgit commit -m \"New release\"\n\tgit checkout $(DEB_BRANCH)\n\ndpkg_stable:\n\tmake dpkg_commit DEB_NAME=dokku-alt\n\ndpkg_beta:\n\tmake dpkg_commit DEB_NAME=dokku-alt-beta\n\ndocker_build: FORCE\n\tdocker build -t ayufan/dokku-alt .\n\ndocker_run: docker_build\n\tdocker run --privileged --rm -i -t \\\n\t\t-v /home/dokku -v /var/lib/docker \\\n\t\t--hostname=\"dokku.me\" \\\n\t\tayufan/dokku-alt\n\ndocker_tests:\n\t-docker run -v /var/lib/docker --name=\"dokku-alt-docker-volume-data\" busybox:latest true\n\tdocker run --privileged --rm -i -t \\\n\t\t--volumes-from dokku-alt-docker-volume-data \\\n\t\t--hostname=\"dokku.me\" \\\n\t\tayufan/dokku-alt \\\n\t\t/srv/dokku-alt/tests/run_localhost $(TESTS)\n\npull:\n\trsync -av dokku.home:/srv/dokku-alt/ dokku\n\trsync -av dokku.home:/srv/dokku-alt/plugins plugins\n\npush:\n\trsync -av --delete dokku dokku.home:/srv/dokku-alt/\n\trsync -av --delete plugins dokku.home:/srv/dokku-alt/\n\nsync:\n\twhile true; do make push >/dev/null; sleep 1s; done\n\ncount:\n\t@echo \"Core lines:\"\n\t@cat dokku bootstrap.sh | wc -l\n\t@echo \"Plugin lines:\"\n\t@find plugins -type f | xargs cat | wc -l\n\t@echo \"Test lines:\"\n\t@find tests -type f | xargs cat | wc -l\n"
        },
        {
          "name": "Procfile",
          "type": "blob",
          "size": 0.1884765625,
          "content": "nginx: exec nginx -g \"daemon off; error_log /dev/stdout info;\"\nssh: mkdir /var/run/sshd; exec /usr/sbin/sshd -De\ndokku: exec /srv/dokku-alt/start-dokku.sh\ndocker: cgroups-mount; exec docker -d\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 32.2412109375,
          "content": "# Dokku Alternative\n\n> Unmaintained, Migrate to [Dokku](https://github.com/dokku/dokku) as soon as possible\n\n[![Join the chat at https://gitter.im/dokku-alt/dokku-alt](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/dokku-alt/dokku-alt?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nDocker powered mini-Heroku. The smallest PaaS implementation you've ever seen. It's a fork of the original [dokku](https://github.com/progrium/dokku). The idea behind this fork is to provide complete solution with plugins covering most use-cases which are stable and well tested.\n\n## Features\n\n* Debian-based installation and upgrade!\n* Git deploy\n* Built-in support for MariaDB, PostgreSQL, MongoDB and Redis databases\n* Built-in support for Dockerfile\n* Built-in support for service-only applications\n* Built-in support for domains and redirects\n* Built-in support for TLS and wildcard certificates\n* Built-in support for Docker-args and container persistent volumes\n* Built-in support for container's TOP\n* Built-in support for foreman-based Procfile\n* Data volumes with host-based volumes\n* Preboot / zero-downtime deploy\n* Enter and exec commands in already running containers\n* Access-control: deploy only keys\n* Create-only application\n* HTTP-Basic Auth support\n* Simple SSL commands\n* SPDY and HSTS\n* Configure NGINX listen address and proxy read timeout\n* Custom buildstep image\n* Support better image tagging (yet compatible with dokku)\n* Support for running buildstep-based applications as non-root user\n* Integration with dokku-alt-manager (https://github.com/romaninsh/dokku-alt-manager)\n* Run dokku-alt in service in docker container (BETA)\n\n### Planned features:\n\n* Nginx proxy in container with automatic service reload\n* Support for RabbitMQ and Memcached\n* Support for custom nginx templates\n* Support for application scaling\n* Support for `CHECKS` as described in https://labnotes.org/zero-downtime-deploy-with-dokku/\n* Full and incremental backup\n* Application migration\n\n## Requirements\n\nAssumes that you use Ubuntu 14.04 LTS right now. Ideally, you should have a domain ready to point to your host. It's designed for and is probably best to use a fresh VM. The debian package will install everything it needs.\n\n## Installing\n\n    $ sudo bash -c \"$(curl -fsSL https://raw.githubusercontent.com/dokku-alt/dokku-alt/master/bootstrap.sh)\"\n\n## Installing (with force-yes)\n\nSometimes you may want to install dokku-alt in a completely non-interactive way. Now you can do it. Simply boostrap.sh without terminal:\n\n    $ sudo bash -c \"$(curl -fsSL https://raw.githubusercontent.com/dokku-alt/dokku-alt/master/bootstrap.sh)\" < /dev/null\n\n## Configuring\n\nIf you use the bootstrap script from above, at the end it will fireup ruby installation script. Point your browser to `http://<ip>:2000/` and finish configuration.\n\nThat's it!\n\n### Manual configuration\n\nSet up a domain and a wildcard domain pointing to that host. Make sure `/home/dokku/VHOST` is set to this domain. By default it's set to whatever hostname the host has. This file is only created if the hostname can be resolved by dig (`dig +short $(hostname -f)`). Otherwise you have to create the file manually and set it to your preferred domain. If this file still is not present when you push your app, dokku will publish the app with a port number (i.e. `http://example.com:49154` - note the missing subdomain).\n\nYou'll have to add a public key associated with a username by doing something like this from your local machine:\n\n    $ cat ~/.ssh/id_rsa.pub | ssh dokku.me sudo dokku access:add\n\n## Upgrade and beta releases\n\nUnlike `dokku`, this script uses the debian packaging system (deb). To upgrade to the latest version, simply execute: `sudo apt-get update && sudo apt-get install dokku-alt`.\n\nAlongside the normal (stable) releases we distribute as well beta (bleeding edge). To switch to beta simply execute: `sudo apt-get update && sudo apt-get install dokku-alt-beta`. It will replace the stable dokku-alt and switch to beta.\n\n## Migration from dokku\n\nIt should be possible, it should mostly work, but it's not tested and advised. VPS's are very cheap this days so fire-up new machine and setup `dokku-alt` from scratch.\n\n## Deploy an App\n\nNow you can deploy apps on your Dokku. Let's deploy the [Heroku Node.js sample app](https://github.com/heroku/node-js-sample). All you have to do is add a remote to name the app. It's created on-the-fly. Note that you must use the username **dokku**@yourhostname.com:your-repository-name if you used the boostrap.sh script to install dokku-alt.\n\n    $ git clone https://github.com/heroku/node-js-sample\n    $ cd node-js-sample\n    $ git remote add dokku dokku@dokku-alt.com:node-js-app\n    $ git push dokku master\n    Counting objects: 296, done.\n    Delta compression using up to 4 threads.\n    Compressing objects: 100% (254/254), done.\n    Writing objects: 100% (296/296), 193.59 KiB, done.\n    Total 296 (delta 25), reused 276 (delta 13)\n    -----> Building node-js-app ...\n           Node.js app detected\n    -----> Resolving engine versions\n\n    ... blah blah blah ...\n\n    -----> Application deployed:\n           http://node-js-app.progriumapp.com\n\nYou're done!\n\nRight now Buildstep supports buildpacks for Node.js, Ruby, Python, [and more](https://github.com/progrium/buildstep#supported-buildpacks). It's not hard to add more, [go add more](https://github.com/progrium/buildstep#adding-buildpacks)!\nPlease check the documentation for your particular build pack as you may need to include configuration files (such as a Procfile) in your project root.\n\n## Dokku-alt-manager\n\nIt's a web interface to easily manage your dokku-alt instance. To install manager, simply run:\n\n    dokku manager:install\n\nYou can enable or disable it anytime:\n\n    dokku manager:enable\n    dokku manager:disable\n\nOr even uninstall if you prefer command line access (it will also wipe used database):\n\n    dokku manager:uninstall\n\n## Dokku-alt as service in Docker container (BETA)\n\nDokku-alt can be run using Docker-in-Docker approach (https://github.com/jpetazzo/dind). It requires you to run the dokku-alt container in privileged mode (with full access to host), because dokku-alt uses its own Docker daemon to serve applications. It's still considered beta, but should be pretty safe solution and robust. It's best to use for play with dokku-alt on other not-supported systems (CentOS, RedHat, Debian) or by simply trying how it works.\n\nAll dokku-alt services (SSH, Nginx, Dokku daemon) are run in container.\n\n### Create persistent data storage\n\n    docker run --volume=/home/dokku --volume=/var/lib/docker --name=dokku-alt-data busybox:latest\n\n### Start `dokku-alt` service in container\n\n    docker run -d --name=dokku-alt --hostname=my-domain.com --volumes-from=dokku-alt-data --publish=22:22 --publish=80:80 --publish=443:443 --privileged ayufan/dokku-alt:latest\n\nYou can adjust the exposed ports as described in Docker documentation.\n\n### Check `dokku-alt` logs to see if anything started correctly:\n\n    docker logs dokku-alt-demo\n\nAt the end, you should see something like this:\n\n    dokku.1 | SSH Login:\n    dokku.1 |   user: root\n    dokku.1 |   password: lfMUjxYEvqpRRLY6\n    dokku.1 |   ip: 10.0.42.1 172.17.2.213\n    dokku.1 | Starting dokku daemon...\n\nThis is a temporary `root` password to access the container and add your access keys (using `dokku access:add` as described). This password changes every container restart.\n\nTo enter the container shell from the server's terminal (the same which is running `docker` with `dokku-alt`) run ssh:\n\n    ssh root@172.17.2.213\n\nIf everything was done right, you should see the container's prompt. By exposing ports in `docker run` to the outside world you can also access `dokku-alt` externally.\n\n### To upgrade container to newer version simply kill old container and rerun your `docker run` command:\n\n    docker kill dokku-alt\n    docker pull ayufan/dokku-alt:latest\n    docker run -d --name=dokku-alt --hostname=my-domain.com --volumes-from=dokku-alt-data --publish=22:22 --publish=80:80 --publish=443:443 --privileged ayufan/dokku-alt:latest\n\n## Dockerfile images\n\nThe key feature of `dokku-alt` is built-in support for Dockerfiles, the docker build process. It allows you to create more advanced and more repetitive application environments.\nTo use `Dockerfile` simply put `Dockerfile` in root of the application, `dokku-alt` will detect it and build application according to specification in `Dockerfile`.\n\nDockerfile-based application can (but not required) expose a web-application port. `dokku-alt` will check if port 80, 8080 or 5000 is exposed. If it is, it will update the assigned vhost and reconfigure nginx to forward all incoming traffic.\n\nUsing Dockerfile, you can build service-only applications. Simply don't expose any public facing ports.\n\nExample Dockerfile application: https://github.com/ayufan/dokku-alt-phpmyadmin\n\n## Nginx and redirects\n\nDokku-alt has built-in support for additional domains and url redirects. By specifying redirects, any client using that address will automatically be redirected to the first domain assigned to the application.\n\n## Remote commands\n\nDokku commands can be run over ssh. Anywhere you would run `dokku <command>`, just run `ssh -t dokku@progriumapp.com <command>`\nThe `-t` is used to request a pty. It is highly recommended to do so.\nTo avoid the need to type the `-t` option each time, simply create/modify a section in the `.ssh/config` on the client side, as follows :\n\n    Host progriumapp.com\n    RequestTTY yes\n\n## Run a command in the app environment\n\nIt's possible to run commands in the environment of the deployed application:\n\n    $ dokku run node-js-app ls -alh\n    $ dokku run <app> <cmd>\n\n## Removing a deployed app\n\nSSH onto the server, then execute:\n\n    $ dokku delete myapp\n\n## Create-only application\n\nDokku-alt allows you to create an application before pushing it. It can be useful when you want to specify additional config variables or assign databases. Simply execute:\n\n    $ dokku create mynewapp\n\nIt's also possible to disable auto-application creation on push. Add to `~/dokkurc`:\n\n    export DOKKU_DISABLE_AUTO_APP_CREATE=1\n\nFrom now on you will have to do `dokku create` before pushing.\n\n## Allowing push-access (deploy only) access for dokku\n\nDokku-alt allows you to add additional public keys to applications. The specific case is to add special deploy-only key, used for example by Countinous Integration (ie. Jenkins). Key added as deploy-only can only be used to `git push` specific application. It will not allowed to execute any `dokku` commands. You can add an ssh key and give it explicit access to one or many applications.\n\nAdd locally:\n\n    $ cat .ssh/id_rsa.pub | dokku deploy:allow myapp\n\nAdd key remotely:\n\n    $ cat .ssh/id_rsa.pub | ssh dokku@dokku deploy:allow myapp\n\nTo later revoke key execute:\n\n    $ dokku deploy:revoke myapp FINGERPRINT\n\nYou can also list all fingerprints allowed to deploy an application:\n\n    $ dokku deploy:list myapp\n\nAdd a new admin user:\n\n    $ cat .ssh/id_rsa.pub | dokku access:add\n\nRevoke permissions for admin user:\n\n    $ dokku access:revoke FINGERPRINT\n\n## Environment variable management\n\nTypically, an application will require some environment variables to run properly. Environment variables may contain private data, such as passwords or API keys, so it is not recommend to store them in your application's repository.\n\nThe `config` plugin provides the following commands to manage your variables:\n```\nconfig <app> - display the config vars for an app  \nconfig:get <app> KEY - display a config value for an app  \nconfig:set <app> KEY1=VALUE1 [KEY2=VALUE2 ...] - set one or more config vars\nconfig:unset <app> KEY1 [KEY2 ...] - unset one or more config vars\n```\n\n### Available environment variables\n\n* `DOKKU_NGINX_PROXY_READ_TIMEOUT` - allows to override `nginx proxy_read_timeout`. Default value is set to '60s'. For more info please refer to: http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_read_timeout.\n* `DOKKU_ENABLE_HTTP_HOST` - when set to 1, the application will also serve content on HTTP if HTTPS is enabled\n* `DOKKU_BUILDSTEP_IMAGE` - allows you to set a custom buildstep image on per app basis. Image has to be compatible with https://github.com/progrium/buildstep or https://github.com/dokku-alt/progrium-buildstep-dockerfiles. If the images was forked from https://github.com/progrium/buildstep, there might be a small incompatibility: the image is run with `/start` instead of `/start web` as in orginal `dokku`.\n* `DOKKU_START_CMD` - allows you to set a custom start command. The default value is `/start` for buildstep images and ` ` otherwise.\n\n## Image tagging\n\nWhen you successfully deploy an app, you can tag it with a name/version. This lets you quickly roll back to that image in the event of failure in a later deployment.\n\n    $ dokku tag:add gitlab v6.9.0\n    =====> Tagged latest image of dokku/gitlab as v6.9.0\n    $ dokku tag:list gitlab\n    REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE\n    dokku/gitlab        build               fc3baf1216d2        4 weeks ago         954.9 MB\n    dokku/gitlab        latest              fc3baf1216d2        4 weeks ago         954.9 MB\n    dokku/gitlab        release             fc3baf1216d2        4 weeks ago         954.9 MB\n    dokku/gitlab        v6.9.0              fc3baf1216d2        4 weeks ago         954.9 MB\n    $ dokku deploy gitlab release <-- it will deploy GIT head\n    $ dokku deploy gitlab v6.9.0 <-- it will deploy tagged image\n\n## Databases\n\nDokku-alt has built-in support for all modern database engines: MariaDB (former MySQL), PostgreSQL and MongoDB. The database image will be downloaded and provisioned when first used.\n\nFirst create a database:\n\n    $ dokku mariadb:create test-db\n    -----> MariaDB database created: test-db\n\nSecond link the database to an app:\n\n    $ dokku mariadb:link node-js-sample test-db\n    -----> Releasing node-js-sample ...\n    -----> Deploying node-js-sample ...\n    -----> Shutting down old containers\n    =====> Application deployed:\n        http://node-js-sample.ayufan.eu\n\nVerify the application environment variables:\n\n    $ dokku config node-js-sample\n    === node-js-sample config vars ===\n    DATABASE_URL:  mysql2://node-js-sample:random-password@mariadb:3306/test-db\n\nTo use a different database engine, simply replace `mariadb` with `postgresql` or `mongodb`.\n\n## Preboot / zero-downtime boot\n\nSimilar to functionality provided by https://devcenter.heroku.com/articles/labs-preboot `dokku-alt` supports zero-downtime. To enable zero-downtime deployment, execute command: `dokku preboot:enable APP`. Alongside with preboot, there's a `checks` plugin based on https://labnotes.org/zero-downtime-deploy-with-dokku/. For now, it simply checks if the application started serving requests. If the checks module fails, it will not replace the application.\n\nPreboot and checks can be configured using a few environment variables:\n\n* PREBOOT_WAIT_TIME - number of seconds to wait for container boot (default 5s)\n* PREBOOT_COOLDOWN_TIME - number of seconds to wait finish container request processing (default 30s)\n* DOKKU_CHECKS_WAIT - number of seconds to wait before request retries (default 10s)\n* DOKKU_CHECKS_TIMEOUT - number of seconds to wait for each response (default 20s)\n* DOKKU_CHECKS_RETRY - number of retries (default 3)\n\n## Data volumes\n\nDocker allows you to have persistent data storage. Dokku-alt exposes this feature as Data Volumes. You can create unlimited number of data volumes and any data volume can be attached to unlimited number of apps. Simply create a data volume and specify container paths which you want to be persistant.\n\nFirst, create a data volume:\n\n    $ dokku volume:create shared-test-volume /app/logs /app/tmp /app/uploads\n    -----> Volume created: volume_data_shared-test-volume\n\nSecond, link the volume to an app:\n\n    $ dokku volume:link node-js-sample shared-test-volume\n    -----> Volume shared-test-volume linked to an aplication: node-js-sample\n    -----> Releasing node-js-sample ...\n    -----> Deploying node-js-sample ...\n    -----> Shutting down old containers\n    =====> Application deployed:\n        http://node-js-sample.ayufan.eu\n\nIt is just simple as this.\n\n### Host-based volumes\n\nDokku-alt allows you to bind host-based volumes in a very simple manner. To use this feature, you have to be logged as `root` and then simply type:\n\n    dokku volume:create host-based-volume /path/to/host/volume:/path/to/volume/in/container\n\n## HTTP-Basic Auth support\n\nDokku-alt allows you to secure any application with HTTP-Basic Auth. There are a few commands that makes it happen:\n\n    htpasswd:add <app> <user>                       Add http-basic auth user\n    htpasswd:disable <app>                          Remove http-basic Auth\n    htpasswd:remove <app> <user>                    Remove user\n\nIf you want to enable and add a new user, simply type the command below and when prompted, type your password twice:\n\n    dokku htpasswd:add myapp myuser\n\nYou can also pipe the password:\n\n    echo mypass | dokku htpasswd:add myapp myuser\n\nTo revoke user's permission:\n\n    dokku htpasswd:remove myapp\n\nTo remove HTTP-Basic Auth completely:\n\n    dokku htpasswd:disable myapp\n\n## TLS support\n\nDokku provides easy TLS support out of the box. To enable TLS connection to your application, copy the `.crt` and `.key` files into the `/home/dokku/:app/ssl` folder (notice, file names should be `server.crt` and `server.key`, respectively). Redeployment of the application will be needed to apply TLS configuration. Once it's redeployed, the application will be accessible by `https://` (redirection from `http://` is applied as well).\n\n## TLS support\n\nDokku-alt extends this even further by allowing you to use command line interface for certificates:\n\n    ssl:generate <app>                              Generate certificate signing request for an APP\n    ssl:certificate <app>                           Pipe signed certifcate with all intermediates for an APP\n    ssl:forget <app>                                Wipes certificate for an APP\n    ssl:info <app>                                  Show info about certifcate and certificate request\n    ssl:key <app>                                   Pipe private key for an APP\n\nFirst use: `dokku ssl:generate myapp` to generate certificate signing request (CSR). At the end of process you will receive `BEGIN CERTIFICATE REQUEST` which you can ten copy-n-paste to your SSL signer (ie. http://startssl.com).\n\nWhen you receive your signed certificate pipe it with **ALL INTERMEDIATES** to `dokku ssl:certificate myapp`. If done correctly you have SSL enabled for your site.\n\n    cat mycert.pem intermediate.pem ca.pem | dokku ssl:certificate myapp\n\nIf it happens that you have already created certificate you can use it, by piping your **UNENCRYPTED** your certificate and your private key:\n\n    cat mycert.pem intermediate.pem ca.pem | dokku ssl:certificate myapp\n    cat mycert.key | dokku ssl:key myapp\n\nTo view asigned certificate:\n\n    dokku ssl:info myapp\n\n## HSTS support\n\nHTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections. Once enabled all further communication will be done over TLS only, there's no revert mechanism. As this is additional security feature you have to do it by hand. To enable HSTS for site use:\n\n    dokku config:set myapp DOKKU_ENABLE_HSTS=1\n\n## Serve an app over HTTP as well\n\nBy default `dokku-alt` for all TLS-enabled apps will create redirects which requires user to use `https://`. In some cases it maybe required to allow `http://` access which is potentially insecure. To enable simulatenous HTTP and HTTPS set specific config:\n\n    dokku config:set myapp DOKKU_ENABLE_HTTP_HOST=1\n\n## dokkurc Configuration\n\nYou can fine-tune some aspects of Dokku behaviour and its plugins by setting variables in `dokkurc` file placed in Dokku root directory – usually `/home/dokku`. `dokkurc` is sourced by the main `dokku` script.\n\nExample:\n\n    export DOKKU_DISABLE_AUTO_APP_CREATE=1\n    export BUILDSTEP_IMAGE=\"ayufan/dokku-alt-buildstep:foreman\"\n\n\n### Known configuration variables\n\n* `DOKKU_DISABLE_AUTO_APP_CREATE` – when set to `1`, applications won't be automatically created on push; [see Create only application](#create-only-application).\n* `BUILDSTEP_IMAGE` – buildstep image to be used by Docker, defaults to [`ayufan/dokku-alt-buildstep:foreman`](https://registry.hub.docker.com/u/ayufan/dokku-alt-buildstep/).\n* `MARIADB_IMAGE` – Docker image to be used for MariaDB plugin, defaults to [`ayufan/dokku-alt-mariadb`](https://registry.hub.docker.com/u/ayufan/dokku-alt-mariadb/).\n* `MONGODB_IMAGE` – Docker image to be used for MongoDB plugin, defaults to [`ayufan/dokku-alt-mongodb`](https://registry.hub.docker.com/u/ayufan/dokku-alt-mongodb/).\n* `POSTGRESQL_IMAGE` – Docker image to be used for PostgreSQL plugin, defaults to [`ayufan/dokku-alt-postgresql`](https://registry.hub.docker.com/u/ayufan/dokku-alt-postgresql/).\n* `REDIS_IMAGE` – Docker image to be used for Redis plugin, defaults to [`ayufan/dokku-alt-redis`](https://registry.hub.docker.com/u/ayufan/dokku-alt-redis/).\n* `DOKKU_LISTEN_IPV4` - Set the IPV4 address on which NGINX will listen for requests\n* `DOKKU_LISTEN_IPV6` - Set the IPV6 address on which NGINX will listen for requests\n* `DOKKU_FORCE_ENABLE_HSTS` - Force to enable HSTS header (validity for one year) for all TLS-enabled apps\n* `DOKKU_DISABLE_NGINX_X_FORWARDED` - Disable setting of `X-Forwarded` headers by nginx, useful for CDN installations.\n\n#### MariaDB specific\n\nThese parameters should only be changed when you are using a MariaDB image that has a different setup.\n\n* `MARIADB_PORT` - MariaDB listen port, defaults to `3306`\n* `MARIADB_COMMAND` - MariaDB startup command for Docker, defaults to `/usr/bin/start_mariadb.sh`\n* `MARIADB_CONTAINER_VOLUME` - Where the data volume gets mounted in the MariaDB container, defaults to `/opt/mysql`\n* `MARIADB_CONTAINER_PASSWORD` - Where the password file gets mounted in the MariaDB container, defaults to `/opt/mysql_password`\n\n#### MongoDB specific\n\nThese parameters should only be changed when you are using a MongoDB image that has a different setup.\n\n* `MONGODB_PORT` - MongoDB listen port, defaults to `27017`\n* `MONGODB_COMMAND` - MongoDB startup command for Docker, defaults to `/usr/bin/start_mariadb.sh`\n* `MONGODB_CONTAINER_VOLUME` - Where the data volume gets mounted in the MongoDB container, defaults to `/opt/mongodb`\n* `MONGODB_CONTAINER_PASSWORD` - Where the password file gets mounted in the MongoDB container, defaults to `/opt/mongodb_password`\n\n#### PostgreSQL specific\n\nThese parameters should only be changed when you are using a PostgreSQL image that has a different setup.\n\n* `POSTGRESQL_USER` - PostgreSQL admin user, defaults to `root`\n* `POSTGRESQL_PORT` - PostgreSQL listen port, defaults to `5432`\n* `POSTGRESQL_COMMAND` - PostgreSQL startup command for Docker, defaults to `/usr/bin/start_pgsql.sh`\n* `POSTGRESQL_CONTAINER_VOLUME` - Where the data volume gets mounted in the PostgreSQL container, defaults to `/opt/postgresql`\n* `POSTGRESQL_CONTAINER_PASSWORD` - Where the password file gets mounted in the PostgreSQL container, defaults to `/opt/postgresql_password`\n\n#### Redis specific\n\nThese parameters should only be changed when you are using a Redis image that has a different setup.\n\n* `REDIS_PORT` - Redis listen port, defaults to `6379`\n* `REDIS_COMMAND` - Redis startup command for Docker, defaults to `/usr/bin/start_redis.sh`\n* `REDIS_CONTAINER_VOLUME` - Where the data volume gets mounted in the Redis container, defaults to `/var/lib/redis`\n\n## Help\n\n    $ dokku help\n    apps:disable <app>                              Disable specific app\n    apps:enable <app>                               Re-enable specific app\n    apps:list                                       List app\n    apps:restart <app>                              Restart specific app (not-redeploy)\n    apps:start <app>                                Stop specific app\n    apps:status <app>                               Status of specific app\n    apps:stop <app>                                 Stop specific app\n    apps:top <app> [args...]                        Show running processes\n    backup:export [file]                            Export dokku configuration files\n    backup:import [file]                            Import dokku configuration files\n    config <app>                                    display the config vars for an app\n    config:get <app> KEY                            display a config value for an app\n    config:set <app> KEY1=VALUE1 [KEY2=VALUE2 ...]  set one or more config vars\n    config:unset <app> KEY1 [KEY2 ...]              unset one or more config vars\n    delete <app>                                    Delete an application\n    domains:get <app>                               Get domains for an app\n    domains:redirect:get <app>                      Get redirect domains for an app\n    domains:redirect:set <app> <domains...>         Set redirect app domains\n    domains:set <app> <domains...>                  Set app domains\n    enter <app>                                     Enter into currently running container\n    exec <app> <cmd>                                Execute command in currently running container\n    help                                            Print the list of commands\n    logs <app> [-t] [-f]                            Show the last logs for an application (-t or -f follows)\n    mariadb:console <app> <db>                      Launch console for MariaDB container\n    mariadb:create <db>                             Create a MariaDB database\n    mariadb:delete <db>                             Delete specified MariaDB database\n    mariadb:dump <app> <db>                         Dump database for an app\n    mariadb:info <app> <db>                         Display application informations\n    mariadb:link <app> <db>                         Link database to app\n    mariadb:list <app>                              List linked databases\n    mariadb:unlink <app> <db>                       Unlink database from app\n    mongodb:console <app> <db>                      Launch console for MongoDB container\n    mongodb:create <db>                             Create a MongoDB database\n    mongodb:delete <db>                             Delete specified MongoDB database\n    mongodb:dump <app> <db> <collection>            Dump database collection in bson for an app\n    mongodb:export <app> <db> <collection>          Export database collection for an app\n    mongodb:import <app> <db> <collection>          Import database collection for an app\n    mongodb:info <app> <db>                         Display application informations\n    mongodb:link <app> <db>                         Link database to app\n    mongodb:list <app>                              List linked databases\n    mongodb:unlink <app> <db>                       Unlink database from app\n    plugins-install                                 Install active plugins\n    plugins                                         Print active plugins\n    postgresql:console <app> <db>                   Launch console for PostgreSQL container\n    postgresql:create <db>                          Create a PostgreSQL database\n    postgresql:delete <db>                          Delete specified PostgreSQL database\n    postgresql:dump <app> <db>                      Dump database for an app\n    postgresql:info <app> <db>                      Display application informations\n    postgresql:link <app> <db>                      Link database to app\n    postgresql:list <app>                           List linked databases\n    postgresql:unlink <app> <db>                    Unlink database from app\n    preboot:cooldown:time <app> <secs>              Re-enable specific app\n    preboot:disable <app>                           Stop specific app\n    preboot:enable <app>                            Stop specific app\n    preboot:status <app>                            Status of specific app\n    preboot:wait:time <app> <secs>                  Restart specific app (not-redeploy)\n    rebuild:all                                     Rebuild all apps\n    rebuild <app>                                   Rebuild an app\n    redis:create <app>                              Create a Redis database\n    redis:delete <app>                              Delete specified Redis database\n    redis:info <app>                                Display application information\n    run <app> <cmd>                                 Run a command in the environment of an application\n    tag:add <app> <tag>                             Tag latest running image using specified name\n    tag:list <app>                                  List all image tags\n    tag:rm <app> <tag>                              Tag latest running image using specified name\n    url <app>                                       Show the URL for an application\n    version                                         Print dokku's version\n    volume:create <name> <paths...>                 Create a data volume for specified paths\n    volume:delete <name>                            Delete a data volume\n    volume:info <name>                              Display volume information\n    volume:link <app> <name>                        Link volume to app\n    volume:list:apps <name>                         Display apps linked to volume\n    volume:list                                     List volumes\n    volume:unlink <app> <name>                      Unlink volume from app\n\n### Additional Help\n\n    dokku volume:help\n\nIt works for all ranges :)\n\n    dokku mariadb:help\n    dokku ssl:help\n\n## FAQ / Support\n\nYou can use [Github Issues](https://github.com/dokku-alt/dokku-alt/issues).\n\n### How can I use custom domains as www.myapp.com?\n\n    dokku domains:set myapp www.myapp.com\n\n### How do I connect my app to access an external database server?\n\n\"I deployed my Rails application on a fresh new machine using dokku-alt but I already own a bare metal, replicated PostgreSQL server that's reachable from the dokku host as it's on the same network. How do I connect?\"\n\nRun the following:\n\n    dokku config:set <app> DATABASE_URL=postgresql://user:password@dbserver-ip:5432/DBNAME\n\nYou have to feed application with your DATABASE_URL. You can even use databases from heroku.\n\n### Linking to other containers\n\nYou can create file: ```/home/dokku/APPNAME/DOCKER_ARGS``` and fill it with additional arguments as described in http://docs.docker.com/reference/run/. These arguments will be injected when deploying the application or invoking ```dokku run```.\n\n### Out of memory\n\nThe following error typically occurs on boxes with 512MB of memory:\n\n    runtime: panic before malloc heap initialized\n    fatal error: runtime: cannot allocate heap metadata\n\nRun the following (it will create 512MB swap file, you can adjust it for your needs):\n\n    dd if=/dev/zero of=/extraswap bs=1M count=512\n    mkswap /extraswap\n\nAdd it to /etc/fstab:\n\n    /extraswap         none            swap    sw                0       0\n\nTurn it on:\n\n    swapon -a\n\n### Fix Shellshock vulnerability\n\nShellshock (CVE-2014-6271, CVE-2014-7169, CVE-2014-7186, CVE-2014-7187) is a vulnerability in GNU's bash shell that gives attackers access to run remote commands on a vulnerable system. More info you can find there: https://shellshocker.net/.\n\n1. `sudo dokku plugins-install`\n2. If you use Dockerfile you need for every app which uses it redownload image names used by `FROM`. Then issue docker pull every image used by FROM: `docker pull ubuntu:trusty`. You don't have to do it for buildstep-based images, it were done by `plugins-install`. Please check `Dockerfile` of the app:\n\n        FROM ubuntu:trusty\n        RUN ...\n\n    Then run in server's terminal: `docker pull ubuntu:trusty`\n\n3. Rebuild all applications with cache wipe: `dokku rebuild:all:force`.\n4. Voila. Your are secure!\n\n## Components\n\n * [Docker](https://github.com/dotcloud/docker) - Container runtime and manager\n * [Dokku](https://github.com/progrium/dokku) - Orginal Dokku instance\n * [Buildstep](https://github.com/dokku-alt/progrium-buildstep-dockerfiles) - Buildpack builder\n * [PostgreSQL](https://github.com/dokku-alt/postgresql-dockerfiles) - PostgreSQL image\n * [MariaDB](https://github.com/dokku-alt/mariadb-dockerfiles) - MariaDB image\n * [MongoDB](https://github.com/dokku-alt/mongodb-dockerfiles) - MongoDB image\n * [Redis](https://github.com/dokku-alt/redis-dockerfiles) - Redis image\n * [pluginhook](https://github.com/progrium/pluginhook) - Shell based plugins and hooks\n * [sshcommand](https://github.com/progrium/sshcommand) - Fixed commands over SSH\n\n## License\n\nMIT\n"
        },
        {
          "name": "Vagrantfile",
          "type": "blob",
          "size": 1.6513671875,
          "content": "# -*- mode: ruby -*-\n# vi: set ft=ruby :\n\nBOX_NAME = ENV[\"BOX_NAME\"] || \"trusty\"\nBOX_URI = ENV[\"BOX_URI\"] || \"https://cloud-images.ubuntu.com/vagrant/trusty/current/trusty-server-cloudimg-amd64-vagrant-disk1.box\"\nBOX_MEMORY = ENV[\"BOX_MEMORY\"] || \"1024\"\nDOKKU_DOMAIN = ENV[\"DOKKU_DOMAIN\"] || \"dokku.me\"\nDOKKU_IP = ENV[\"DOKKU_IP\"] || \"10.0.0.2\"\n\nVagrant::configure(\"2\") do |config|\n  config.vm.box = BOX_NAME\n  config.vm.box_url = BOX_URI\n  config.vm.synced_folder File.dirname(__FILE__), \"/srv/dokku-alt\"\n  config.vm.network :forwarded_port, guest: 80, host: 8080\n  config.vm.hostname = \"#{DOKKU_DOMAIN}\"\n  config.vm.network :private_network, ip: DOKKU_IP\n\n  config.vm.provider :virtualbox do |vb|\n    vb.customize [\"modifyvm\", :id, \"--natdnshostresolver1\", \"on\"]\n    # Ubuntu's Raring 64-bit cloud image is set to a 32-bit Ubuntu OS type by\n    # default in Virtualbox and thus will not boot. Manually override that.\n    vb.customize [\"modifyvm\", :id, \"--ostype\", \"Ubuntu_64\"]\n    vb.customize [\"modifyvm\", :id, \"--memory\", BOX_MEMORY]\n  end\n\n  # Configure docker apt sources\n  config.vm.provision :shell, :inline => \"apt-get update -qq\"\n  config.vm.provision :shell, :inline => \"apt-get install -y apt-transport-https git\"\n  config.vm.provision :shell, :inline => \"apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9\"\n  config.vm.provision :shell, :inline => \"echo deb https://get.docker.io/ubuntu docker main > /etc/apt/sources.list.d/docker.list\"\n  config.vm.provision :shell, :inline => \"apt-get update -qq\"\n\n  # Install dokku-alt\n  config.vm.provision :shell, :inline => \"cd /srv/dokku-alt && make install && make devinstall\"\nend\n"
        },
        {
          "name": "bootstrap.sh",
          "type": "blob",
          "size": 1.1064453125,
          "content": "#!/bin/bash\n\nset -xe\n\nif [ ! -e /usr/lib/apt/methods/https ]; then\n\tapt-get update\n\tapt-get install -y apt-transport-https\nfi\n\necho deb https://get.docker.io/ubuntu docker main > /etc/apt/sources.list.d/docker.list\necho deb https://dokku-alt.github.io/dokku-alt / > /etc/apt/sources.list.d/dokku-alt.list\n\napt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9\napt-key adv --keyserver keys.gnupg.net --recv-keys EAD883AF\napt-get update -y\n\nif [[ -t 0 ]]; then\n\tapt-get install -y dokku-alt ruby ruby-sinatra\nelse\n\tunset UCF_FORCE_CONFFOLD\n\texport UCF_FORCE_CONFFNEW=YES\n\tapt-get install -o Dpkg::Options::=\"--force-confnew\" --yes --force-yes dokku-alt ruby ruby-sinatra\nfi\n\nset +xe\n\nif [ `lsb_release -sr` != \"14.04\" ]; then\n\techo\n\techo \"WARNING: dokku-alt works best on Ubuntu 14.04 LTS!\"\nfi\n\necho\necho \"Almost done!\"\necho \"Open now web browser pointing to http://$(hostname):2000/ to finish configuartion.\"\necho \"For manual installation instructions press Ctrl-C and visit https://github.com/dokku-alt/dokku-alt.\"\necho\n\nruby /usr/local/share/dokku-alt/contrib/dokku-installer.rb\n"
        },
        {
          "name": "circle.yml",
          "type": "blob",
          "size": 0.7763671875,
          "content": "machine:\n  services:\n    - docker\n\ndependencies:\n  override:\n    - docker info\n    - make docker_build\n\ntest:\n  override:\n  - make docker_tests TESTS=apps/acl\n  - make docker_tests TESTS=apps/config\n  - make docker_tests TESTS=apps/dockerfile\n  - make docker_tests TESTS=apps/gitsubmodules\n  - make docker_tests TESTS=apps/go\n  - make docker_tests TESTS=apps/htpasswd\n  - make docker_tests TESTS=apps/java\n  - make docker_tests TESTS=apps/mariadb\n  - make docker_tests TESTS=apps/mongodb\n  - make docker_tests TESTS=apps/multi\n  - make docker_tests TESTS=apps/nodejs-express\n  - make docker_tests TESTS=apps/php\n  - make docker_tests TESTS=apps/php-multi\n  - make docker_tests TESTS=apps/postgresql\n  - make docker_tests TESTS=apps/python-flask\n  - make docker_tests TESTS=apps/buildstep-image\n\n"
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "deb",
          "type": "tree",
          "content": null
        },
        {
          "name": "dokku",
          "type": "blob",
          "size": 8.771484375,
          "content": "#!/usr/bin/env bash\n\nexport DOKKU_ROOT=${DOKKU_ROOT:=\"/home/dokku\"}\nexport PLUGIN_PATH=${PLUGIN_PATH:=\"/var/lib/dokku-alt/plugins\"}\nexport DOKKU_NOT_IMPLEMENTED_EXIT=10\nexport DOKKU_VALID_EXIT=0\n\nif [[ $(id -un) != \"dokku\" && $1 != plugins-install* && $1 != \"plugins-update\" ]]; then\n  sudo -u dokku -E -H NAME=\"$(id -un)\" FINGERPRINT=\"shell\" $0 \"$@\"\n  exit\nfi\n\nif [[ -n \"$SSH_ORIGINAL_COMMAND\" ]]; then\n  export -n SSH_ORIGINAL_COMMAND\n  $0 $SSH_ORIGINAL_COMMAND\n  exit $?\nfi\n\n# it fixes some not nice docker errors\ncd $DOKKU_ROOT\n\n# locale\nexport LANGUAGE=${LANGUAGE:-en_US.UTF-8}\nexport LANG=${LANG:-en_US.UTF-8}\nexport LC_ALL=${LC_ALL:-en_US.UTF-8}\n\nsource \"$PLUGIN_PATH/dokku_common\"\n\n[[ -f $DOKKU_ROOT/dokkurc ]] && source $DOKKU_ROOT/dokkurc\n[[ -d $DOKKU_ROOT/.dokkurc ]] && for f in $DOKKU_ROOT/.dokkurc/*; do source $f; done\n\nif [[ \"$1\" == \"\" ]]; then\n  dokku help\n  exit\nfi\n\n: | pluginhook verify-command \"$@\"\n\ncase \"$1\" in\n  release)\n    verify_app_name \"$2\"\n    verify_max_args \"2\" \"$@\"\n\n    if ! flock -n \"$APP_BUILD_LOCK\" true; then\n      info2 \"$APP is currently locked. We will wait for other process to finish.\"\n    fi\n\n    shift 1\n\n    flock \"$APP_BUILD_LOCK\" dokku release:locked \"$@\"\n    ;;\n\n  release:locked)\n    verify_app_name \"$2\"\n    verify_max_args \"2\" \"$@\"\n\n    if ! docker_image_exists \"$IMAGE_GENERIC:build\"; then\n      info \"Application ($IMAGE_GENERIC:build) is not yet build!\"\n      exit 1\n    fi\n\n    info \"Releasing $APP ...\"\n    # use :latest tag to ensure compatiblity with orginal dokku\n    tag_image \"$IMAGE_GENERIC:build\" \"$IMAGE\"\n    if is_image_buildstep_based \"$IMAGE\"; then\n      pluginhook pre-release \"$APP\"\n      dokku config \"$APP\" --shell | \\\n        docker run -i -a stdin \"$IMAGE\" \\\n        /bin/bash -c \"mkdir -p /app/.profile.d && cat > /app/.profile.d/app-env.sh\" | \\\n        commit_image \"$IMAGE\"\n      pluginhook post-release \"$APP\"\n    else\n      # now do empty docker build to trigger ONBUILD hooks (manage or bootstrap jobs)\n      echo \"FROM $IMAGE\" | docker build -t \"$IMAGE\" -\n\n      docker create --env-file=<(: | pluginhook env-vars \"$APP\") \"$IMAGE\" | \\\n        commit_image \"$IMAGE\"\n    fi\n    tag_image \"$IMAGE\" \"$IMAGE_GENERIC:release\"\n    ;;\n\n  deploy)\n    verify_app_name \"$2\"\n    verify_max_args \"3\" \"$@\"\n\n    if ! flock -n \"$APP_BUILD_LOCK\" true; then\n      info2 \"$APP is currently locked. We will wait for other process to finish.\"\n    fi\n\n    shift 1\n\n    flock \"$APP_BUILD_LOCK\" dokku deploy:locked \"$@\"\n    ;;\n\n  deploy:locked)\n    verify_app_name \"$2\"\n    verify_max_args \"3\" \"$@\"\n\n    TAG=\"${3:-release}\"\n    export IMAGE_TAG=\"$TAG\"\n\n    if ! docker_image_exists \"$IMAGE_GENERIC:$IMAGE_TAG\"; then\n      info \"Application ($IMAGE_GENERIC:$IMAGE_TAG) is not yet released!\"\n      exit 1\n    fi\n\n    # prepare for deployment\n    info \"Deploying $APP ...\"\n    pluginhook pre-deploy \"$APP\"\n\n    if [[ ! -f \"$DOKKU_ROOT/$APP/DISABLED\" ]]; then\n      DOCKER_ARGS=\"$(: | pluginhook docker-args \"$APP\" web)\"\n\n      # verify preboot\n      PREBOOT=\"$(: | pluginhook use-preboot \"$APP\" \"$IMAGE\")\"\n\n      if [[ \"$PREBOOT\" == \"\" ]]; then\n        stop_and_remove_app_containers\n      fi\n\n      # start the app\n      if is_image_buildstep_based \"$IMAGE_GENERIC:$TAG\"; then\n        DEFAULT_START_CMD=\"/start\"\n      else\n        DEFAULT_START_CMD=\"\"\n      fi\n\n      START_CMD=$(config_get DOKKU_START_CMD || echo \"$DEFAULT_START_CMD\")\n\n      id=$(docker run --cidfile=\"$(get_cid_file_name app)\" -d --name=\"$(get_app_container_name app)\" $DOCKER_ARGS \"$IMAGE_GENERIC:$TAG\" $START_CMD)\n\n      EXT_IP=\"$(docker inspect --format '{{ .NetworkSettings.IPAddress }}' \"$id\")\"\n      EXT_PORT=\"\"\n      INT_PORT=\"\"\n\n      # enumare container ports and look to one from predefined list\n      for CONTAINER_PORT in $(docker inspect --format '{{range $p, $conf := .NetworkSettings.Ports}}{{$p}} {{end}}' \"$id\"); do\n        for port in $DOKKU_EXPOSED_PORTS; do\n          if [[ \"$port/tcp\" == \"$CONTAINER_PORT\" ]]; then\n            EXT_PORT=\"$port\"\n            INT_PORT=\"$port\"\n            break 2\n          fi\n        done\n      done\n\n      if [[ \"$EXT_PORT\" == \"\" ]] || [[ \"$INT_PORT\" == \"\" ]]; then\n        echo -n > \"$DOKKU_ROOT/$APP/URL\"\n        verbose \"No external HTTP port published\"\n        pluginhook post-deploy \"$APP\" \"\"\n        info2 \"Application deployed\"\n      else\n        if [[ \"$DOKKU_SUPPRESS_FIREWALL_WARNING\" != \"1\" ]] && [[ \"$EXT_ADDR\" == \"0.0.0.0\" ]]; then\n          verbose ''\n          verbose 'WARNING: You use potentially insecure docker configuration which exposes all ports to outside world.'\n          verbose 'Due to the way Docker works most of Firewall scripts will not block access to docker exposed ports.'\n          verbose 'Consider adding DOCKER_OPTS=\"$DOCKER_OPTS --ip=127.0.0.1\" to /etc/default/docker and restart docker service.'\n          verbose ''\n        fi\n\n        if [[ \"$PREBOOT\" != \"\" ]]; then\n          verbose \"Running pre-flight checks...\"\n          if ! pluginhook check-preboot \"$APP\" \"$id\" \"$EXT_PORT\" \"$EXT_IP\"\n          then\n            stop_and_remove_container \"$id\"\n            fail \"Application failed to deploy!\"\n          fi\n        fi\n\n        echo -n > \"$DOKKU_ROOT/$APP/URL\"\n        pluginhook post-deploy \"$APP\" \"$EXT_PORT\" \"$INT_PORT\" \"$EXT_IP\"\n        info2 \"Application deployed:\"\n        verbose \"$(dokku url $APP)\"\n      fi\n\n      # save container ID\n      echo \"$id\" > \"$APP_NAME_FILE\"\n\n      if [[ \"$TAG\" != \"deployed\" ]]; then\n        tag_image \"$IMAGE_GENERIC:$TAG\" \"$IMAGE_GENERIC:deployed\"\n      fi\n\n      if [[ \"$PREBOOT\" != \"\" ]]; then\n        pluginhook post-preboot \"$APP\" \"$id\" || true\n        stop_and_remove_app_containers \"\" \"$id\"\n      fi\n    else\n      stop_and_remove_app_containers\n      verbose \"Application disabled - will not be run\"\n      pluginhook post-deploy \"$APP\" \"\"\n      if [[ \"$TAG\" != \"deployed\" ]]; then\n        tag_image \"$IMAGE_GENERIC:$TAG\" \"$IMAGE_GENERIC:deployed\"\n      fi\n    fi\n    ;;\n\n  cleanup)\n    shift 1\n    flock -n \"$DOKKU_ROOT/cleanup.lock\" dokku cleanup:locked \"$@\"\n    ;;\n\n  cleanup:locked)\n    info \"Cleaning up ...\"\n    docker ps -a | grep -v \" Up \" | grep -v \"seconds ago\" | grep -v \"_data\" | awk '{print $1}' | xargs docker rm &> /dev/null || true\n    docker images --filter=dangling=true --quiet | xargs docker rmi &> /dev/null || true\n    ;;\n\n  plugins)\n    ls -1 -d $PLUGIN_PATH/*/\n    ;;\n\n  plugins-install)\n    [[ \"$(id -un)\" != \"root\" ]] && fail \"Plugins install can be run only as root!\"\n    shift 1\n    for script in $(ls -d $PLUGIN_PATH/*/install); do\n      plugin=\"$(basename \"$(dirname $script)\")\"\n      echo \"Installing $plugin...\"\n      $script \"$@\"\n    done\n\n    if [[ ! -e \"$DOKKU_ROOT/.update.v1\" ]]; then\n      verbose ''\n      verbose 'WARNING:'\n      verbose 'Due to buildstep, security and docker changes all images needs to be rebuilt.'\n      verbose 'It will take considerable amount of time to finish. Be patient and afterwards test your apps.'\n      verbose ''\n      verbose 'If something goes wrong you can force to rebuild specific app with: dokku rebuild:force app'\n      verbose 'Or rebuild all apps: dokku rebuild:all:force'\n      verbose ''\n      touch \"$DOKKU_ROOT/.update.v1\"\n      # due to buildstep, port and docker changes we need to rebuild all images\n      dokku rebuild:all\n    fi\n\n    # we can proceed with normal deployment if we assume that rebuild were done already\n    dokku deploy:all\n    ;;\n\n  plugins-install-dependencies)\n    pluginhook dependencies\n    ;;\n\n  plugins-update)\n    pluginhook update\n    ;;\n\n  # temporary hack for https://github.com/progrium/dokku/issues/82\n  deploy:all)\n    # redeploy lastly deployed image with tag :deployed\n    for app in $(ls -d $DOKKU_ROOT/*/ 2>/dev/null); do\n      if [[ -f \"$app/refs/heads/master\" ]]; then\n        dokku deploy \"$(basename $app)\" \"deployed\" || true\n      fi\n    done\n    wait\n    ;;\n\n  help|'')\n    echo \"Usage: dokku COMMAND <app> [command-specific-options]\"\n    echo \"\"\n\n    cat<<EOF | pluginhook commands help | sort | sed 's/\\s\\s\\s*/|/2' | column -t -s '|'\n    help                                            Print the list of commands\n    plugins                                         Print active plugins\n    plugins-install                                 Install active plugins\n    plugins-update                                  Update active plugins\nEOF\n    ;;\n\n  *:help)\n    CATEGORY=\"$(echo \"$1\" | cut -d':' -f1):\"\n    dokku help | grep \"^\\s*$CATEGORY\"\n    ;;\n\n  *)\n    implemented=0\n    for script in $(ls -d $PLUGIN_PATH/*/commands); do\n      set +e; $script \"$@\" ; exit_code=$? ; set -e\n      if [ \"$exit_code\" -eq \"$DOKKU_NOT_IMPLEMENTED_EXIT\" ]; then\n        continue\n      fi\n\n      implemented=1\n      if [ \"$exit_code\" -ne \"$DOKKU_VALID_EXIT\" ]; then\n        exit $exit_code\n      fi\n    done\n\n    if [ \"$implemented\" -eq 0 ]; then\n      echo \" !    \\`$@\\` is not a dokku command.\"\n      echo \" !    See \\`dokku help\\` for a list of available commands.\"\n      exit 1\n    fi\n    ;;\n\nesac\n"
        },
        {
          "name": "dokku-daemon",
          "type": "blob",
          "size": 0.7265625,
          "content": "#!/bin/bash\n\nexport DOKKU_ROOT=${DOKKU_ROOT:=\"/home/dokku\"}\nexport PLUGIN_PATH=${PLUGIN_PATH:=\"/var/lib/dokku-alt/plugins\"}\nexport DOKKU_NOT_IMPLEMENTED_EXIT=10\nexport DOKKU_VALID_EXIT=0\n\n# locale\nexport LANGUAGE=${LANGUAGE:-en_US.UTF-8}\nexport LANG=${LANG:-en_US.UTF-8}\nexport LC_ALL=${LC_ALL:-en_US.UTF-8}\n\n# it fixes some not nice docker errors\ncd $DOKKU_ROOT\n\nsource \"$PLUGIN_PATH/dokku_common\"\n\n[[ -f $DOKKU_ROOT/dokkurc ]] && source $DOKKU_ROOT/dokkurc\n\necho \"Starting dokku daemon...\"\n\n# hook to some signals\nterminate() {\n\texit 1\n}\n\ncleanup() {\n\techo \"Dokku daemon cleaned up!\"\n}\n\ntrap terminate TERM INT\ntrap cleanup EXIT\n\n# run daemon-tick: in the future there maybe even more\nwhile true\ndo\n\t: | pluginhook daemon-tick\n\tsleep 5s\ndone\n"
        },
        {
          "name": "dokku.1",
          "type": "blob",
          "size": 1.61328125,
          "content": ".TH DOKKU 1 2014-11-22\n.\\\"Make sure to change that date when you commit a change!\n.\\\"\n.SH NAME\ndokku \\- configure and get information from your dokku installation\n.\\\"\n.SH SYNOPSIS\n.B dokku\n.I <command>\n.\\\"\n.SH DESCRIPTION\n.B dokku\nis a catch-all command to configure your apps,\nwork with plugins and inspect the current state of your server.\n.\\\"\n.SH OPTIONS\n.TP\n.BI apps:create \" <app>\"\nCreate a new app.\n.TP\n.BI apps:destroy \" <app>\"\nPermanantly destroy an app.\n.TP\n.B apps\nList your apps.\n.TP\n.BI backup:import \" file\"\nImport dokku config files.\n.TP\n.BI backup:export \" file\"\nExport dokku config files.\n.TP\n.BI config \" <app>\"\nDisplay the config vars for an app.\n.TP\n.BI config:get \" <app> KEY\"\nDisplay a specific config var for an app.\n.TP\n.BI config:set \" <app> KEY1=VAL1\" \\fR\\ (KEY2=VAL2\\ \\.\\.\\.)\nSet one or more config vars for an app.\n.TP\n.BI config:unset \" <app> KEY1\" \\fR\\ (KEY2\\ \\.\\.\\.)\nRemove one or more config vars from an app.\n.TP\n.B help\nPrint the list of commands.\n.TP\n.B logs \\ \\fI<app> \\fR[\\fI-t\\fR]\nShow the last logs for an application (-t follows)\n.TP\n.BI nginx:import-ssl \" <app>\"\nImports a tarball from stdin which should contain\nserver\\.crt and server\\.key\n.TP\n.B plugins-install\nInstall active plugins.\n.TP\n.B plugins-update\nUpdate active plugins.\n.TP\n.B plugins\nPrint active plugins.\n.TP\n.BI run \" <app> command\"\nRun a command in the environment of an app.\n.TP\n.BI url \" <app>\"\nShow the url for an app.\n.TP\n.B version\nPrint dokku's version.\n.\\\"\n.SH NOTES\nThis man page does not include commands added\nby non-default plugins. To see the full list\nof commands available to your current dokku\ninstallation, run \\fBdokku help\\fR.\n"
        },
        {
          "name": "gitreceive",
          "type": "tree",
          "content": null
        },
        {
          "name": "pluginhook.bash",
          "type": "blob",
          "size": 0.5087890625,
          "content": "#!/bin/bash\n\nset -eo pipefail\n\nif [[ \"$PLUGIN_PATH\" == \"\" ]]; then\n\techo \"[ERROR] Unable to locate plugins: set \\$PLUGIN_PATH\" 1>&2\n\texit 1\nfi\n\nif [[ $# -le 1 ]]; then\n\techo \"[ERROR] Hook name argument is required\" 1>&2\n\texit 1\nfi\n\nHOOK_NAME=\"$1\"\nshift\nARGS=\"$@\"\n\nchainhook() {\n\tif [[ $# -eq 0 ]]; then\n\t\t# sleep 20s\n\t\tcat\n\t\tsleep 20s\n\t\texit 0\n\tfi\n\n\tHOOK_FILE=\"$1\"\n\tshift\n\t\"$HOOK_FILE\" \"$ARGS\" | chainhook \"$@\"\n}\n\n\nif [[ -t 0 ]]; then\n\t: | chainhook $PLUGIN_PATH/*/$HOOK_NAME\nelse\n\tchainhook $PLUGIN_PATH/*/$HOOK_NAME\nfi\n"
        },
        {
          "name": "pluginhook",
          "type": "tree",
          "content": null
        },
        {
          "name": "plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "sshcommand",
          "type": "tree",
          "content": null
        },
        {
          "name": "start-dokku.sh",
          "type": "blob",
          "size": 0.5361328125,
          "content": "#!/bin/bash\n\nexport HOME=/root\n\nfor i in $(seq 1 1000)\ndo\n\tif docker ps 1>/dev/null 2>/dev/null; then\n\t\tbreak\n\tfi\n\n\techo \"Waiting for docker ($i)...\"\n\tsleep 3s\ndone\n\necho \"Checking docker...\"\ndocker run hello-world\n\necho \"Configuring dokku...\"\nsshcommand create dokku /usr/local/bin/dokku\ndokku plugins-install\nPASSWORD=$(< /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c16)\n\necho \"root:$PASSWORD\" | chpasswd\n\necho \"SSH Login:\"\necho \"  user: root\"\necho \"  password: $PASSWORD\"\necho \"  ip: $(hostname -I)\"\n\n[[ \"$1\" == \"exit\" ]] && exit\n\nexec dokku-daemon\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "wercker.yml",
          "type": "blob",
          "size": 1.890625,
          "content": "box: wercker-labs/docker\nbuild:\n  steps:\n    - install-packages:\n        packages: lxc-docker make\n    - script:\n        name: print the docker version\n        code: docker version\n    - script:\n        name: print system-wide docker info\n        code: docker info\n    - script:\n        name: build dokku-alt docker image\n        code: make docker_build\n    - script:\n        name: run acl tests\n        code: make docker_tests TESTS=apps/acl\n    - script:\n        name: run config tests\n        code: make docker_tests TESTS=apps/config\n    - script:\n        name: run dockerfile tests\n        code: make docker_tests TESTS=apps/dockerfile\n    - script:\n        name: run submodules tests\n        code: make docker_tests TESTS=apps/gitsubmodules\n    - script:\n        name: run go tests\n        code: make docker_tests TESTS=apps/go\n    - script:\n        name: run htpasswd tests\n        code: make docker_tests TESTS=apps/htpasswd\n    - script:\n        name: run java tests\n        code: make docker_tests TESTS=apps/java\n    - script:\n        name: run mariadb tests\n        code: make docker_tests TESTS=apps/mariadb\n    - script:\n        name: run mongodb tests\n        code: make docker_tests TESTS=apps/mongodb\n    - script:\n        name: run multi tests\n        code: make docker_tests TESTS=apps/multi\n    - script:\n        name: run nodejs-express tests\n        code: make docker_tests TESTS=apps/nodejs-express\n    - script:\n        name: run php tests\n        code: make docker_tests TESTS=apps/php\n    - script:\n        name: run php-multi tests\n        code: make docker_tests TESTS=apps/php-multi\n    - script:\n        name: run postgresql tests\n        code: make docker_tests TESTS=apps/postgresql\n    - script:\n        name: run python-flask tests\n        code: make docker_tests TESTS=apps/python-flask\n    - script:\n        name: run buildstep-image tests\n        code: make docker_tests TESTS=apps/buildstep-image\n\n"
        }
      ]
    }
  ]
}