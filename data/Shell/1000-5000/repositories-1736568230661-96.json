{
  "metadata": {
    "timestamp": 1736568230661,
    "page": 96,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "bitnami/containers",
      "stars": 3540,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".licenserc.yaml",
          "type": "blob",
          "size": 0.3505859375,
          "content": "# Copyright Broadcom, Inc. All Rights Reserved.\n# SPDX-License-Identifier: APACHE-2.0\n\n---\nheader:\n  comment: on-failure\n  license:\n    spdx-id: Apache-2.0\n    copyright-owner: Broadcom, Inc. All Rights Reserved.\n\n    content: |\n      # Copyright Broadcom, Inc. All Rights Reserved.\n      # SPDX-License-Identifier: APACHE-2.0\n\n  paths:\n    - \"**/Dockerfile\"\n"
        },
        {
          "name": ".markdownlint.json",
          "type": "blob",
          "size": 0.1142578125,
          "content": "{\n   \"default\": true,\n   \"MD013\": false,\n   \"MD029\": { \"style\": \"ordered\" },\n   \"MD033\": false,\n   \"MD047\": false\n }\n"
        },
        {
          "name": ".markdownlintignore",
          "type": "blob",
          "size": 0.04296875,
          "content": "LICENSE.md\n.github/PULL_REQUEST_TEMPLATE.md\n"
        },
        {
          "name": ".vib",
          "type": "tree",
          "content": null
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 1.302734375,
          "content": "# Contributor Code of Conduct\n\nAs contributors and maintainers of this project, we pledge to respect everyone who contributes by posting issues, updating documentation, submitting pull requests, providing feedback in comments, and any other activities.\n\nCommunication through any of Bitnami's channels (GitHub, mailing lists, Twitter, and so on) must be constructive and never resort to personal attacks, trolling, public or private harassment, insults, or other unprofessional conduct.\n\nWe promise to extend courtesy and respect to everyone involved in this project, regardless of gender, gender identity, sexual orientation, disability, age, race, ethnicity, religion, or level of experience. We expect anyone contributing to this project to do the same.\n\nIf any member of the community violates this code of conduct, the maintainers of this project may take action, including removing issues, comments, and PRs or blocking accounts, as deemed appropriate.\n\nIf you are subjected to or witness unacceptable behavior, or have any other concerns, please communicate with us.\n\nIf you have suggestions to improve this Code of Conduct, please submit an issue or PR.\n\n## Attribution\n\nThis Code of Conduct is adapted from the Angular project available at this page: <https://github.com/angular/code-of-conduct/blob/main/CODE_OF_CONDUCT.md>\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.6630859375,
          "content": "# Contributing Guidelines\n\nContributions are welcome via GitHub Pull Requests. This document outlines the process to help get your contribution accepted.\n\nAny type of contribution is welcome: new features, bug fixes, documentation improvements, etc.\n\n## How to Contribute\n\n1. Fork this repository, develop, and test your changes.\n2. Submit a pull request.\n\n> [!NOTE]\n> To make the Pull Requests' (PRs) testing and merging process easier, please submit changes to multiple containers in separate PRs.\n\n### Requirements\n\nWhen submitting a PR make sure that:\n\n- It must pass CI jobs for linting and test the changes (if any).\n- It must follow [container best practices](https://engineering.bitnami.com/articles/best-practices-writing-a-dockerfile.html).\n- The title of the PR is clear enough and starts with \"[bitnami/container-name]\"\n- If necessary, add information to the repository's `README.md`.\n\n#### Sign Your Work\n\nThe sign-off is a simple line at the end of the explanation for a commit. All commits need to be signed. Your signature certifies that you wrote the patch or otherwise have the right to contribute the material. The rules are pretty simple, you only need to certify the guidelines from [developercertificate.org](https://developercertificate.org/).\n\nThen you just add a line to every git commit message:\n\n```text\nSigned-off-by: Joe Smith <joe.smith@example.com>\n```\n\nUse your real name (sorry, no pseudonyms or anonymous contributions.)\n\nIf you set your `user.name` and `user.email` git configs, you can sign your commit automatically with `git commit -s`.\n\nNote: If your git config information is set properly then viewing the `git log` information for your commit will look something like this:\n\n```text\nAuthor: Joe Smith <joe.smith@example.com>\nDate:   Thu Feb 2 11:41:15 2018 -0800\n\n    Update README\n\n    Signed-off-by: Joe Smith <joe.smith@example.com>\n```\n\nNotice the `Author` and `Signed-off-by` lines match. If they don't your PR will be rejected by the automated DCO check.\n\n### PR Approval and Release Process\n\n1. Changes are manually reviewed by Bitnami team members.\n2. The changes are automatically tested using our GitHub CI workflow.\n3. Once the changes are accepted, the PR is tested (if needed) in the internal Bitnami CI pipeline. This may include testing both the container and any associated Helm Chart.\n4. The PR is merged by the reviewer(s) in the GitHub `main` branch.\n5. Then our CI/CD system is going to push the container image to the different registries including the recently merged changes.\n\n> [!NOTE]\n> Please note that, in terms of time, there may be a slight difference between the appearance of the code in GitHub and the image with the changes in the different registries.\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 11.423828125,
          "content": "Copyright &copy; 2024 Broadcom. The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\nSPDX-License-Identifier: APACHE-2.0\n\nThis product includes third-party open source software. Additional copyright and licensing information can be found inside the Bitnami packages themselves and/or at https://bitnami.com/open-source\n\n----\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 18.294921875,
          "content": "<p align=\"center\">\n    <img width=\"400px\" height=auto src=\"https://bitnami.com/downloads/logos/bitnami-by-vmware.png\" />\n</p>\n\n<p align=\"center\">\n    <a href=\"https://twitter.com/bitnami\"><img src=\"https://badgen.net/badge/twitter/@bitnami/1DA1F2?icon&label\" /></a>\n    <a href=\"https://github.com/bitnami/containers\"><img src=\"https://badgen.net/github/stars/bitnami/containers?icon=github\" /></a>\n    <a href=\"https://github.com/bitnami/containers\"><img src=\"https://badgen.net/github/forks/bitnami/containers?icon=github\" /></a>\n    <a href=\"https://github.com/bitnami/containers/actions/workflows/ci-pipeline.yml\"><img src=\"https://github.com/bitnami/containers/actions/workflows/ci-pipeline.yml/badge.svg\" /></a>\n</p>\n\n# The Bitnami Containers Library\n\nPopular applications, provided by [Bitnami](https://bitnami.com), containerized and ready to launch.\n\n## Why use Bitnami Images?\n\n* Bitnami closely tracks upstream source changes and promptly publishes new versions of this image using our automated systems.\n* With Bitnami images the latest bug fixes and features are available as soon as possible.\n* Bitnami containers, virtual machines, and cloud images use the same components and configuration approach - making it easy to switch between formats based on your project needs.\n* All our images are based on [**minideb**](https://github.com/bitnami/minideb) -a minimalist Debian-based container image that gives you a small base container image and the familiarity of a leading Linux distribution- or **scratch** -an explicitly empty image-.\n* All Bitnami images available in Docker Hub are signed with [Notation](https://notaryproject.dev/). [Check this post](https://blog.bitnami.com/2024/03/bitnami-packaged-containers-and-helm.html) to know how to verify the integrity of the images.\n* Bitnami container images are released regularly with the latest distribution packages available.\n\nLooking to use our applications in production? Try [VMware Tanzu Application Catalog](https://bitnami.com/enterprise), the enterprise edition of Bitnami Application Catalog.\n\n## Get an image\n\nThe recommended way to get any of the Bitnami Images is to pull the prebuilt image from the [Docker Hub Registry](https://hub.docker.com/r/bitnami/).\n\n```console\ndocker pull bitnami/APP\n```\n\nTo use a specific version, you can pull a versioned tag.\n\n```console\ndocker pull bitnami/APP:[TAG]\n```\n\nIf you wish, you can also build the image yourself by cloning the repository, changing to the directory containing the Dockerfile, and executing the `docker build` command.\n\n```console\ngit clone https://github.com/bitnami/containers.git\ncd bitnami/APP/VERSION/OPERATING-SYSTEM\ndocker build -t bitnami/APP .\n```\n\n> [!TIP]\n> Remember to replace the `APP`, `VERSION`, and `OPERATING-SYSTEM` placeholders in the example command above with the correct values.\n\n## Run the application using Docker Compose\n\nThe main folder of each application contains a functional `docker-compose.yml` file. Run the application using it as shown below:\n\n```console\ncurl -sSL https://raw.githubusercontent.com/bitnami/containers/main/bitnami/APP/docker-compose.yml > docker-compose.yml\ndocker-compose up -d\n```\n\n> [!TIP]\n> Remember to replace the `APP` placeholder in the example command above with the correct value.\n\n## Announcing General Availability of Bitnami Premium\n\n### A new commercial version of Bitnami open source containers and Helm charts\n\nEnterprises that love Bitnami can now purchase a Bitnami Premium subscription from [Arrow Electronics](https://www.arrow.com/globalecs/na/vendors/bitnami?utm_source=github&utm_medium=containers) and consume the containers and Helm charts right in Docker Hub. Bitnami Premium users will get access to private Docker Hub repositories with the same containers and Helm charts they are used to, plus new commercial features including:\n\n* Enterprise support for all 500+ Bitnami Premium packages\n* All LTS branches of all Bitnami application packages maintained up-to-date\n* Unlimited pulls of all Bitnami Premium containers and Helm charts from Docker Hub\n* Secure software supply chain metadata including Software Bills of Material (SBOMs), SLSA 3 pipeline validation with in-toto attestations, Notation and Cosign signatures, Build-time CVE and anti-virus scan reports, and more.\n\nAlongside the launch of Bitnami Premium, we are making some changes to how we deliver the Bitnami Application Catalog:\n\n* Unlimited pulls from Docker Hub will no longer be available. Free Bitnami Application Catalog containers and charts will be subject to the same limits as any other Docker Hub repos starting December 16th, 2024. Pulls of Bitnami Premium containers and Helm charts will not count towards your [Docker Hub pull](https://hub.docker.com/usage/pulls) limits or overages.\n* Long-term-support (LTS) branches of the software we package will no longer be maintained in the free Bitnami Application Catalog. To continue receiving updates for LTS branches of packages, you will have to upgrade to Bitnami Premium.\n* We are improving Bitnami Application Catalog users’ supply chain security through additional integrity checks in our Helm chart installation process. These checks enable users to be aware when they are using containers that were not created and tested by Bitnami.\n\nThese changes enable us to deliver a premium Bitnami experience to our enterprise users who will benefit from support and security metadata, but who do not need the extensive customization that is core to our other commercial offering called [Tanzu Application Catalog](https://www.vmware.com/products/app-platform/tanzu-application-catalog) (TAC). We are committed to continue delivering free Bitnami Application Catalog content to our community of developers and other open source project maintainers over the long term.\n\nRead on to learn more about Bitnami Premium and the coming changes to the free Bitnami Application Catalog content.\n\n### New goodness in Bitnami Premium\n\nBitnami Premium is a new version of the content packaged by Bitnami that is sold through [Arrow Electronics](https://www.arrow.com/globalecs/na/vendors/bitnami?utm_source=github&utm_medium=containers). You can connect to an Arrow salesperson if you have any questions or want to purchase access. Once you buy Bitnami Premium, you will be given access to the Bitnami Premium registries in Docker Hub. You can then return to Docker Hub where you will have access to the Bitnami Premium containers, Helm charts, and software supply chain metadata from the new **/bitnamiprem** and **/bitnamichartsprem** orgs. These private repos are what enable you to pull without limits or caps. You will also see containers for all LTS branches continuously maintained up-to-date: for example, you will see PostgreSQL containers for versions 12, 13, 14, 15, 16, and 17; while in the free Bitnami catalog, you will only find version 17.\n\n#### A middle ground between free Bitnami Application Catalog and Tanzu Application Catalog customized packages\n\nIn Bitnami Premium, all of the applications are built on Debian just as they are in the free Bitnami library. You get the entire library of containers and Helm charts kept up-to-date with the latest changes anywhere in each app from the OS to the application code itself. You can consume the content through Docker Hub where you’ve already been pulling it to date. However, in the Bitnami Premium registries, you will also find important software supply chain security metadata delivered as OCI artifacts alongside the containers and Helm charts. This metadata is useful for enterprises that need third-party open source software to be compliant with policies around auditability, supply chain integrity, and time to remediation of vulnerabilities.\n\n* **Supply chain security and integrity**: Bitnami Premium containers and Helm charts are built on an SLSA 3 pipeline, with attestations and signatures serving as proof that the software you’re deploying in your clusters is what you expect and has not been tampered with.\n* **Software bills of material (SBOMs)**: At both the Helm chart and container levels, SBOMs give you fine-grained insight into the contents of every package. Bitnami Premium also includes build-time CVE scans and anti-virus reports (helpful for our Federal government customers). This will make it far easier to continuously validate the integrity of software supply chains and to track and triage vulnerabilities as they are discovered and patched.\n* **Build time CVE scans, anti-virus scans, and more**: also included with Bitnami Premium content are Trivy CVE scan results and ClamAV scan results that satisfy requirements for, among other things, doing business with the US Federal government. You will also find the results of Bitnami’s automated functional tests that run as part of every artifact update, trigger information that specifies why the latest update was released, and more.\n\nBitnami Premium differs from Tanzu Application Catalog in that, just like our free Bitnami content, it is a one-size-fits-all library of containers and Helm charts all built on Debian. Tanzu Application Catalog gives you the ability to customize your artifacts along many different dimensions. Some of the key differences include:\n\n* **Private delivery**: TAC containers and Helm charts are delivered directly to your private registries, or are hosted in a private registry maintained by us that you can pull from.\n* **Choose a Linux distro or use your own “golden image”**: TAC gives you the ability to choose among four supported Linux distros: Debian, Ubuntu, RedHat UBI, or VMware’s own PhotonOS. All of the software packages on these distributions are maintained up-to-date and are tested to work in multiple Kubernetes environments as part of the release process. You can also use your own golden image: we’ll build and maintain the artifacts on top of it. For customers that need it, PhotonOS includes FIPS OpenSSL, is STIG-compliant, and includes zero/minimal CVES with VEX statements to triage any remaining ones.\n* **App-specific customization**: With TAC, you can inject your own customizations such as user settings, certificates, or plugins into our SLSA 3 pipeline, so the artifacts you receive are truly promotable to production environments.\n* **Software knowledge graph**: This keeps track of all your software dependencies at the individual package level. It continuously scans them for vulnerabilities, and organizes them into a searchable graph database so you can see in real-time which versions of which apps are affected and patched. It also includes useful information such as open source licenses, package management ecosystem data, and more.\n* **UI and API**: TAC includes access to a user interface where you can add and remove applications from your catalog, and interact with the software knowledge graph to see at-a-glance details about your software. The [TAC API](https://developer.broadcom.com/xapis/application-catalog/latest/) enables you to build information from the software knowledge graph into your pipelines to ensure you are keeping your applications up-to-date with the latest patched applications.\n\n### Continuing our long tradition of partnerships\n\nSince Bitnami’s beginning over a decade ago, our many partnerships have propelled us to be a leading publisher of open source software. Bitnami cloud images drive billions of compute hours annually for our hyperscale cloud partners, for example, and our containers and Helm charts are pulled hundreds of millions of times per month from our partners at Docker Hub.\n\nWe now begin our newest endeavor with [Arrow Electronics](https://www.arrow.com/globalecs/na/vendors/bitnami?utm_source=github&utm_medium=containers). Arrow is a global leader in IT distribution. Arrow is known for its ability to help businesses navigate the complexities of modern IT landscapes, providing the tools, technology, and expertise needed to drive digital transformation and operational efficiency.\n\nArrow will sell Bitnami Premium access through its website. Bitnami users interested in purchasing Bitnami Premium will find a streamlined process to pay, share their Docker Hub user identification, and gain access to the private Bitnami Premium repos in Docker Hub. Bitnami Premium customers can add and remove users through Arrow's support team, as well as submit tickets for enterprise support jointly delivered by the software packaging experts at Arrow and Bitnami.\n\n### What changes are coming for the free Bitnami library?\n\n#### Pull limits for free Bitnami content\n\nBeginning December 16th, 2024, the Bitnami Application Catalog will use [standard Docker Hub pull rate limits](https://docs.docker.com/docker-hub/download-rate-limit/) for Bitnami apps. Enterprise customers will be able to access the full Bitnami library in Bitnami Premium, purchased through Arrow and consumed right in Docker Hub, with no rate limits or restrictions. Note that we are not changing any licenses for our packages, meaning that projects can continue to bundle our Helm charts and containers in their own application packages.\n\n#### Long Term Support version updates\n\nMany open source projects we publish packages for have multiple LTS versions supported by their communities. Currently, Bitnami maintains all of these LTS versions up-to-date. Starting December 10th, 2024, we will only continue updating the latest version available for apps in the free Bitnami Application Catalog. This will enable OSS projects and individual/small businesses to continue using the latest versions of Bitnami applications. Bitnami Premium customers who need to continue pulling up-to-date versions of LTS branches can access them in the Bitnami Premium repo in Docker Hub.\n\n#### Supply chain integrity check in Bitnami Helm charts\n\nBitnami has invested hundreds of thousands of developer hours in constructing a world-leading pipeline to build, monitor, update, and test open source software in multiple Kubernetes environments. For these Helm charts to perform as intended, and for them to leverage the many security features built-in, they need to deploy the Bitnami containers they were designed to work with. Therefore, we are adding new checks in the deployment process to check that the containers they were designed to deploy are the ones being deployed.\n\n### Keep an eye out for more updates\n\nWe are excited to deliver an enhanced experience for [Bitnami Premium](https://www.arrow.com/globalecs/na/vendors/bitnami?utm_source=github&utm_medium=containers) users, but this is just the beginning. We will continue to build on the value that all of our Bitnami community members, both free and paid, realize through our many years of experience publishing high-quality open source software packages for the world’s developers.\n\nKeep abreast of our blog for new updates and features, and be sure to check to follow us on [X (formerly Twitter)](https://x.com/bitnami) and [LinkedIn](https://www.linkedin.com/company/bitnami/).\n\n## Vulnerability scan in Bitnami container images\n\nAs part of the release process, the Bitnami container images are analyzed for vulnerabilities. At this moment, we are using two different tools:\n\n* [Trivy](https://github.com/aquasecurity/trivy)\n* [Grype](https://github.com/anchore/grype)\n\nThis scanning process is triggered via a GH action for every PR affecting the source code of the containers, regardless of its nature or origin.\n\n## Changes in version support and pull-rate limits in Docker Hub for BItnami containers and Helm charts \n\nFollowing the release of Bitnami Premium, we are making some changes in the way we distribute our free catalog. These changes enable us to sustain a viable business while also continuing to serve our community, including other open source projects, with free, high-quality software packages. \n\nBeginning on December 16th, 2024, Bitnami will no longer subsidize unlimited pulls from the free Bitnami catalog in Docker Hub. Bitnami containers and charts will be subject to standard pull-rate limits and pull caps. Users who upgrade to Bitnami Premium will be able to pull without any limitations on pull rate or pulls per time period, regardless of the type of Docker subscription you have.\n\nAlso on December 10t,h 2024, only the latest stable branch of any container will receive updates in the free Bitnami catalog. Suppose you use a branch of any Bitnami container other than the latest stable. In that case, you can either migrate to the latest stable branch or upgrade to Bitnami Premium to pull the most up-to-date images of all upstream-supported branches. Previous versions already released will not be deleted. They are still available to pull from DockerHub.\n\nWe have partnered with Arrow Electronics as the exclusive vendor of Bitnami Premium. When you purchase a Bitnami Premium subscription through ArrowSphere Marketplace, you will be granted access to the /bitnamiprem and /bitnamichartsprem distribution registries in Docker Hub. To learn more, visit [https://www.arrow.com/globalecs/na/vendors/bitnami](https://www.arrow.com/globalecs/na/vendors/bitnami?utm_source=github&utm_medium=containers).\n\n## Retention policy\n\nDeprecated assets will be retained in the container registry ([Bitnami DockerHub org](https://hub.docker.com/u/bitnami)) without changes for, at least, 6 months after the deprecation.\nAfter that period, all the images will be moved to a new _\"archived\"_ repository. For instance, once deprecated an asset named _foo_ whose container repository was `bitnami/foo`, all the images will be moved to `bitnami/foo-archived` where they will remain indefinitely.\n\nSpecial images, like `bitnami/bitnami-shell` or `bitnami/sealed-secrets`, which are extensively used in Helm charts, will have an extended coexistence period of 1 year.\n\n## Contributing\n\nWe'd love for you to contribute to those container images. You can request new features by creating an [issue](https://github.com/bitnami/containers/issues/new/choose), or submit a [pull request](https://github.com/bitnami/containers/pulls) with your contribution.\n\n## License\n\nCopyright &copy; 2024 Broadcom. The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n<http://www.apache.org/licenses/LICENSE-2.0>\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and limitations under the License.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 5.9990234375,
          "content": "# Security Release Process\n\nThe community has adopted this security disclosure and response policy to ensure we responsibly handle critical issues.\n\n## Supported Versions\n\nFor a list of support versions that this project will potentially create security fixes for, please refer to the Releases page on this project's GitHub and/or project related documentation on release cadence and support.\n\n## Reporting a Vulnerability - Private Disclosure Process\n\nSecurity is of the highest importance and all security vulnerabilities or suspected security vulnerabilities should be reported to this project privately, to minimize attacks against current users  before they are fixed. Vulnerabilities will be investigated and patched on the next patch (or minor) release as soon as possible. This information could be kept entirely internal to the project.\n\nIf you know of a publicly disclosed security vulnerability for this project, please **IMMEDIATELY** contact the maintainers of this project privately. The use of encrypted email is encouraged.\n\n**IMPORTANT: Do not file public issues on GitHub for security vulnerabilities**\n\nTo report a vulnerability or a security-related issue, please contact the maintainers with enough details through one of the following channels:\n\n* Directly via their individual email addresses\n* Open a [GitHub Security Advisory](https://docs.github.com/en/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability). This allows for anyone to report security vulnerabilities directly and privately to the maintainers via GitHub. Note that this option may not be present for every repository.\n\nThe report will be fielded by the maintainers who have committer and release permissions. Feedback will be sent within 3 business days, including a detailed plan to investigate the issue and any potential workarounds to perform in the meantime.\n\nDo not report non-security-impacting bugs through this channel. Use GitHub issues for all non-security-impacting bugs.\n\n## Proposed Report Content\n\nProvide a descriptive title and in the description of the report include the following information:\n\n* Basic identity information, such as your name and your affiliation or company.\n* Detailed steps to reproduce the vulnerability  (POC scripts, screenshots, and logs are all helpful to us).\n* Description of the effects of the vulnerability on this project and the related hardware and software configurations, so that the maintainers can reproduce it.\n* How the vulnerability affects this project's usage and an estimation of the attack surface, if there is one.\n* List other projects or dependencies that were used in conjunction with this project to produce the vulnerability.\n\n## When to report a vulnerability\n\n* When you think this project has a potential security vulnerability.\n* When you suspect a potential vulnerability but you are unsure that it impacts this project.\n* When you know of or suspect a potential vulnerability on another project that is used by this project.\n\n## Patch, Release, and Disclosure\n\nThe maintainers will respond to vulnerability reports as follows:\n\n1. The maintainers will investigate the vulnerability and determine its effects and criticality.\n2. If the issue is not deemed to be a vulnerability, the maintainers will follow up with a detailed reason for rejection.\n3. The maintainers will initiate a conversation with the reporter within 3 business days.\n4. If a vulnerability is acknowledged and the timeline for a fix is determined, the maintainers will work on a plan to communicate with the appropriate community, including identifying mitigating steps that affected users can take to protect themselves until the fix is rolled out.\n5. The maintainers will also create a [Security Advisory](https://docs.github.com/en/code-security/repository-security-advisories/publishing-a-repository-security-advisory) using the [CVSS Calculator](https://www.first.org/cvss/calculator/3.0), if it is not created yet.  The maintainers make the final call on the calculated CVSS; it is better to move quickly than making the CVSS perfect. Issues may also be reported to [Mitre](https://cve.mitre.org/) using this [scoring calculator](https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator). The draft advisory will initially be set to private.\n6. The maintainers will work on fixing the vulnerability and perform internal testing before preparing to roll out the fix.\n7. Once the fix is confirmed, the maintainers will patch the vulnerability in the next patch or minor release, and backport a patch release into all earlier supported releases.\n\n## Public Disclosure Process\n\nThe maintainers publish the public advisory to this project's community via GitHub. In most cases, additional communication via Slack, Twitter, mailing lists, blog, and other channels will assist in educating the project's users and rolling out the patched release to affected users.\n\nThe maintainers will also publish any mitigating steps users can take until the fix can be applied to their instances. This project's distributors will handle creating and publishing their own security advisories.\n\n## Confidentiality, integrity and availability\n\nWe consider vulnerabilities leading to the compromise of data confidentiality, elevation of privilege, or integrity to be our highest priority concerns. Availability, in particular in areas relating to DoS and resource exhaustion, is also a serious security concern. The maintainer team takes all vulnerabilities, potential vulnerabilities, and suspected vulnerabilities seriously and will investigate them in an urgent and expeditious manner.\n\nNote that we do not currently consider the default settings for this project to be secure-by-default. It is necessary for operators to explicitly configure settings, role based access control, and other resource related features in this project to provide a hardened environment. We will not act on any security disclosure that relates to a lack of safe defaults. Over time, we will work towards improved safe-by-default configuration, taking into account backwards compatibility.\n"
        },
        {
          "name": "TESTING.md",
          "type": "blob",
          "size": 14.390625,
          "content": "# Testing information\n\nAt Bitnami, we are committed to ensuring the quality of the apps we deliver, and as such, tests play a fundamental role in the `bitnami/containers` repository. Bear in mind that every contribution to our containers is ultimately published to our container registries, where it is made available for the rest of the community to benefit from. Before this happens, different checks are required to succeed. More precisely, tests are run when a new contribution (regardless of its author) is made through a GitHub Pull Request.\n\nIn this section, we will discuss:\n\n* [Where to find the tests](#where-to-find-the-tests)\n* [VMware Image Builder (VIB)](#vmware-image-builder-vib)\n* [VIB pipeline definition file](#vib-pipeline-definition-file)\n* [Testing strategy](#testing-strategy)\n  * [Defining the scope](#defining-the-scope)\n  * [Runtime parameters](#runtime-parameters)\n* [Generic acceptance criteria](#generic-acceptance-criteria)\n* [GOSS](#goss)\n  * [Test suite](#test-suite)\n    * [GOSS Templates](#goss-templates)\n    * [Composition](#composition)\n  * [Run GOSS locally](#run-goss-locally)\n  * [Specific GOSS acceptance criteria](#specific-goss-acceptance-criteria)\n\n## Where to find the tests\n\nAll the apps have an associated folder inside [/.vib](https://github.com/bitnami/containers/tree/main/.vib) with their custom tests implementation (the `goss` subfolder) and the file containing their test plan (`vib-verify.json`).\n\n## VMware Image Builder (VIB)\n\nThe service that powers the verification of the thousands of monthly tests performed in the repository is VMware Image Builder. [VMware Image Builder](https://tanzu.vmware.com/content/blog/how-bitnami-uses-vmware-image-builder-to-deploy-apps) (VIB) is a platform-agnostic, API-first modular service that allows large enterprises and independent software vendors to automate the packaging, **verification**, and publishing processes of software artifacts on any platform and cloud.\n\n## VIB pipeline definition file\n\nThe CI pipeline in this repository will be used to verify the changes proposed in a PR and triggered by any new commits once said PR is ready to be verified. But as every application is different, VIB needs to be supplied with a definition of the set of actions and configurations that precisely describe the verification process to perform in each case. This is the role of the aforementioned `vib-verify.json` file, which every app defines and can be found alongside its tests inside the `/.vib` folder. Keeping it simple, the `vib-verify.json` file defines what VIB should do.\n\nLet's take a look at an example and try to understand it!\n\n```json\n{\n  \"context\": {\n    \"resources\": {\n      \"url\": \"{SHA_ARCHIVE}\",\n      \"path\": \"{VIB_ENV_PATH}\"\n    },\n    \"runtime_parameters\": \"Y29tbWFuZDogWyJ0YWlsIiwgIi1mIiwgIi9kZXYvbnVsbCJd\"\n  },\n  ...\n  \"phases\": {\n    ...\n    \"verify\": {\n      \"actions\": [\n        {\n          \"action_id\": \"goss\",\n          \"params\": {\n            \"resources\": {\n              \"path\": \"/.vib\"\n            },\n            \"tests_file\": \"wordpress/goss/goss.yaml\",\n            \"vars_file\": \"wordpress/goss/vars.yaml\",\n            \"remote\": {\n              \"pod\": {\n                \"workload\": \"deploy-wordpress\"\n              }\n            }\n          }\n        },\n        {\n          \"action_id\": \"trivy\",\n          \"params\": {\n            \"threshold\": \"LOW\",\n            \"vuln_type\": [\n              \"OS\"\n            ]\n          }\n        },\n        ...\n      ]\n    }\n  }\n}\n```\n\nThis guide will focus on the `verify` phase section, of which there are some things to remark on:\n\n* For the testing of containers, VIB will take the container built in the previous `package` phase and include it in a basic Helm chart template composed of a deployment and service template.\n\n* VIB does only allow to modify the `ENTRYPOINT/CMD` of the image (through `runtime_parameters`). Consequently, this both simplifies and limits the configurability of the template chart and container image tested underneath.\n\n* A container's testing phase will usually include a single `goss` testing action, followed by additional security-related actions.\n\n> [!NOTE]\n> Some containers with per-branch ARM support use separate per-branch `vib-verify.json` pipelines. Remember to replicate changes performed on the main pipeline definition file to those pipelines.\n\n## Testing strategy\n\n### Defining the scope\n\nThis strategy has to be understood together with the VIB limitations for the containers mentioned above. These restraints prevent us from setting up complex multi-container testing scenarios, which is a necessity for most of our containers to be initialized properly. To work around this, we will only test up to the postunpack phase of the container (where the initial filesystem changes are done). Essentially, we are assuming that most apps’ integration and functional tests are performed in the related chart’s test suite and thus are not required to be duplicated for the containers catalog. As a consequence, we will concentrate on the verification of the app’s compilation logic and the container’s filesystem itself.\n\nSome examples of the suitability of tests for the `bitnami/wordpress` container:\n\n* ✅ Checking Apache config added in Wordpress' postunpack stage\n* ❌ Manually finishing the container initialization to run functional tests\n* ✅ Checking the image filesystem (created dirs existence, changed permissions, etc) related to the compilation/postunpack stages\n* ❌ Verifying bash logic performed at `libwordpress.sh`, as we'll run Goss before that logic is executed\n* ✅ Testing binaries' existence and usability\n\nSomething of note is the equality of scope for the whole container catalog. Though some apps do not require additional containers to run and can be fully initialised as they are, we will be using the same testing setup for every container.\n\n### Runtime parameters\n\nAs of now, and linking with the scope definition we saw previously, the `runtime_parameters` field is only used to \"stop\" a container's initialization logic after its `postunpack` has been executed. The `runtime_parameters` value is a base64 encoded string going by `command: [\"tail\", \"-f\", \"/dev/null\"]` and is the same for every VIB pipeline defined in `bitnami/containers`.\n\n## Generic acceptance criteria\n\nFor your test code PR to be accepted the following criteria must be fulfilled:\n\n* [ ] Test scope needs to be focused on **installation** of the app and not testing the app\n* [ ] Key features of the app should be covered, when possible\n* [ ] Tests need to contain assertions\n* [ ] Tests need to be stateless\n* [ ] Tests need to be independent\n* [ ] Tests need to be retry-able\n* [ ] Tests need to be executable in any order\n* [ ] Test code needs to be peer-reviewed\n* [ ] Tests need to be as minimalistic as possible\n* [ ] Tests should run properly for future versions without major changes\n* [ ] Avoid hardcoded values\n* [ ] Include only necessary files\n* [ ] Test code needs to be [maintainable](https://testautomationpatterns.org/wiki/index.php/MAINTAINABLE_TESTWARE)\n* [ ] Test names should be descriptive\n* [ ] Test data should be generated dynamically\n\n## GOSS\n\n[GOSS](https://github.com/aelsabbahy/goss/blob/master/docs/manual.md) is the framework used to implement integration tests and the only testing tool presently used in our VIB pipelines. It is the reference tool to use when tests require interaction with a specific pod, with its tests being executed from within the pod.\n\nFor VIB to execute GOSS tests, the following block of code needs to be defined in the corresponding [VIB pipeline definition file](#vib-pipeline-definition-file) (`/.vib/app/vib-verify.json`).\n\n> [!NOTE]\n> Values denoted withing dollar signs (`$$VALUE$$`) should be treated as placeholders\n\n```json\n        {\n          \"action_id\": \"goss\",\n          \"params\": {\n            \"resources\": {\n              \"path\": \"/.vib\"\n            },\n            \"tests_file\": \"$$app$$/goss/goss.yaml\",\n            \"vars_file\": \"$$app$$/goss/vars.yaml\",\n            \"remote\": {\n              \"pod\": {\n                \"workload\": \"deploy-$$app$$\" // As explained previously, the used template is always a deployment\n              }\n            }\n          }\n        }\n```\n\nRelated files should be located under `/.vib/app/goss`.\n\n### Test suite\n\nA GOSS test suite for a given application can be divided in two. One half contains the tests specifically manufactured to verify different aspects of the application and the other half is intended to verify that the container complies with Bitnami's best practices. As some of these tests are oftentimes almost identical between different apps, we have compiled some of them in a series of GOSS templates to unify and simplify their usage.\n\n#### GOSS Templates\n\nAt their core, GOSS templates are just tests of similar nature put together on a `.yaml` file under the `.vib/common/goss/templates` folder.\n\nEvery template is composed of:\n\n* A brief description of the tests' nature\n* Any needed vars it may use to run its tests\n* One or more tests\n\nTo better understand them, let's see one of these templates:\n\n```yaml\n########################\n# Checks binaries are added to the $PATH\n# Needed vars:\n#   - .Vars.binaries (Array)\n########################\ncommand:\n  {{ range $binary := .Vars.binaries }}\n  check-{{ $binary }}-binary:\n    exec: which {{ $binary }}\n    exit-status: 0\n  {{ end }}\n```\n\nIn the example above, we can see the template will execute a `which` command for every binary included in the `.Vars.binaries` array. These variables may be optional or required and must be defined in the `/.vib/app/goss/vars.yaml` file.\n\nThere are many different templates, some of them focusing on verifying specific types of apps (those that use PHP, NGINX, etc.) or a particular best practice. In the same vein, new templates can be added if a particular group of tests is going to be used by several apps.\n\n#### Composition\n\nThere are instances where it is not needed to create custom tests for a given app, where using the templates will suffice. There will also be suites that may require the use of testing files to properly verify the app. Generally, a test suite can be composed of the following files:\n\n```bash\n.vib/java/goss\n├── goss.yaml\n├── java.yaml\n├── testfiles\n│   └── HelloTest.jar\n└── vars.yaml\n```\n\n* [ ] The optional `app.yaml` file is where custom tests created just for the related app verification are included.\n* [ ] The `goss.yaml` file should include the list of used GOSS templates as well as the `app.yaml` file (if necessary).\n* [ ] The `vars.yaml` file should include every variable used in the templates.\n* [ ] The `testfiles` folder should include any external files used in the `app.yaml` tests.\n\nNot every suite will be composed of the same tests, as it will depend on the type of application, its Dockerfile, and the used compilation/configuration logic. The list below details each pillar that should be checked when creating a test suite as well as when to use some of the most common templates:\n\n* Dockerfile check:\n  * Does it include bitnami components which contain binaries? If so, use the `check-binaries.yaml` GOSS template.\n  * Does it include the `ca-certificates` package? If so, use the `check-ca-certificates.yaml` template.\n* Compilation logic check:\n  * Are there files or directories created and/or with permission changes? If so, use the `check-directories.yaml` and/or `check-files.yaml` templates.\n  * Are there additional files/dirs modifications? If so, use custom filesystem tests.\n  * Add tests for any compilation options or flags used.\n* Check postunpack script:\n  * Are there files or directories created and/or with permission changes? If so, use the `check-directories.yaml` and/or `check-files.yaml` templates.\n  * Are there additional files/dirs modifications? If so, use custom filesystem tests.\n* Check apps version:\n  * If `$APP_VERSION` follows semver version, use the `check-app-version.yaml` template.\n* Check apps-dependant tests:\n  * If the app is a runtime, test if the runtime can run a compatible file.\n  * If the app requires yet-to-run initialization logic:\n    * No complex configuration nor testing environment is created manually.\n    * If possible, test the app's basic features.\n  * If the app is just a part of a bigger setup (exporter, multi-container apps, etc.):\n    * No testing environment is created manually.\n    * If possible, test the app's basic features.\n  * If the app uses subcomponents (java/php, apache, etc.):\n    * If possible, test a subcomponent when there is a custom config added to them.\n    * Verify whether the subcomponent is capable of running the app.\n* Must-have templates to be added to every suite:\n  * `check-linked.libraries.yaml`\n  * `check-broken-symlinks.yaml`\n  * `check-sed-in-place.yaml`\n  * `check-spdx.yaml`\n* Final checks:\n  * When possible, NO per-branch tests are used.\n  * Every GOSS template is included in `goss.yaml` and the needed vars are in place.\n\n### Specific GOSS acceptance criteria\n\n* [ ] No distro-specific tests are included.\n* [ ] Prioritise using the tests included in the templates over creating custom tests.\n* [ ] Due to GOSS limitations, there can't be two tests with the same name or checking the same file/directory. In those cases, only one of them will be run.\n* [ ] For clarity purposes, the vars needed for the GOSS templates shouldn't be used in the custom tests at `app.yaml`.\n* [ ] Tests should not rely on system packages (e.g. `curl`). Favor built-in GOSS primitives instead.\n* [ ] Prefer checking the exit status of a command rather than looking for a specific output. This will avoid most of the potential flakiness.\n\n### Run GOSS locally\n\nSometimes it is of interest to run the tests locally, for example during development. Though there may be different approaches, you may follow the steps below to execute the tests locally:\n\n1. Download the [GOSS binary for Linux](https://github.com/goss-org/goss/releases/)\n\n2. Add the binary and test files to the tested container as volumes\n\n    ```bash\n    $ docker run -d -it bitnami/app_name bash -c \"tail -f /dev/null\"\n    e696196fba\n\n    $ docker cp /local/path/to/binary/goss-linux-amd64 e6961:/usr/local/bin/gossctl\n    $ docker cp /local/path/to/repo/containers/.vib e6961:/goss\n    ```\n\n3. Grant execution permissions to the binary and launch the tests\n\n    ```bash\n    $ docker exec e6961 chmod +x /usr/local/bin/gossctl\n    $ docker exec e6961 bash -c 'cd /goss && gossctl --gossfile /goss/app_name/goss/goss.yaml --vars /goss/app_name/goss/vars.yaml validate'\n    .........\n\n    Total Duration: 1.203s\n    Count: 11, Failed: 0, Skipped: 0\n    ```\n"
        },
        {
          "name": "bitnami",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}