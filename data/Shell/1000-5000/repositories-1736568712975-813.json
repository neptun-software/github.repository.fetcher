{
  "metadata": {
    "timestamp": 1736568712975,
    "page": 813,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgxOQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "shellfire-dev/shellfire",
      "stars": 1206,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0068359375,
          "content": "output\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.525390625,
          "content": "[submodule \"lib/shellfire/core\"]\n\tpath = lib/shellfire/core\n\turl = https://github.com/shellfire-dev/core.git\n[submodule \"etc/shellfire/paths.d\"]\n\tpath = etc/shellfire/paths.d\n\turl = https://github.com/shellfire-dev/paths.d.git\n[submodule \"tools/fatten\"]\n\tpath = tools/fatten\n\turl = https://github.com/shellfire-dev/fatten.git\n[submodule \"tools/swaddle\"]\n\tpath = tools/swaddle\n\turl = https://github.com/raphaelcohn/swaddle.git\n[submodule \"lib/shellfire/build\"]\n\tpath = lib/shellfire/build\n\turl = https://github.com/shellfire-dev/build.git\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.0390625,
          "content": "tools/continuous-integration.travis.yaml"
        },
        {
          "name": "COPYRIGHT",
          "type": "blob",
          "size": 2.52734375,
          "content": "Format: http://www.debian.org/doc/packaging-manuals/copyright-format/1.0/\nComment: Distribution Compilation Copyright and License\nCopyright: Copyright © 2014-2015, Raphael Cohn <raphael.cohn@stormmq.com>\nLicense: MIT\n The MIT License (MIT)\n .\n Copyright © 2014-2015, Raphael Cohn <raphael.cohn@stormmq.com>\n .\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n .\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n .\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\nFiles: *\nCopyright: Copyright © 2014-2015, Raphael Cohn <raphael.cohn@stormmq.com>\nLicense: MIT\n The MIT License (MIT)\n .\n Copyright © 2014-2015, Raphael Cohn <raphael.cohn@stormmq.com>\n .\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n .\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n .\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 0.177734375,
          "content": "LICENSE terms are documented in the COPYRIGHT file at the top-level directory of this distribution and at https://raw.githubusercontent.com/shellfire-dev/shellfire/master/COPYRIGHT.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.244140625,
          "content": "# [shellfire]\n\n[shellfire] is a MIT licensed framework for building modular applications in POSIX-compliant shell script. It is designed to:-\n\n* abstract away the differences (and myriad bugs) between multiple shell interpreters\n* implement common idioms and functionality\n* promote re-use of shell code with a modern, modular set of functions to get practical things done fast\n* work effectively with structured data formats such as JSON, XML and Debian control files\n* enable the development of fully standalone scripts, complete with resources (snippets)\n* allow shell scripts to automatically determine and install their dependencies\n* but have a minimal need to 'shell out' to binaries that might not be there - or might not behave\n\n[shellfire] consists of a number of github repositories, called modules. Each module contains functions or resources in a specific namespace. You create a [shellfire] application by making a new repository (typically on GitHub) with a skeleton structure, and then adding the modules you need. You populate a template shell script, and then just code away. It couldn't be easier. [shellfire] scripts work straightaway from source control. When you're ready to do a release, you can use [fatten] to make a standalone script, and [swaddle] to then deploy it to GitHub releases, pages, etc as tarballs, debs, etc.\n\n## Impatient to Get Started? There's a [tutorial]\nTry the overdrive [tutorial]. You'll be up and running with your first [shellfire] application in 10 mins.\n\n## So what's included?\nIn homage to Python, batteries are included. Here's the list of modules and namespaces:-\n\n* [core], the daddy of them all. Includes such beauties as\n  * Compatiblity functions, abstracting away differences and allowing things like `pushd` in all shells\n  * A set of base64 decode functions which decode regardless of what binaries you've got (if any at all)\n  * A dependency framework to document required binaries, set up the `PATH` and automatically install packages that contain them, so you can rely on `date` doing the same thing on Mac OS X as well as Linux, say\n  * A fully-fledged command line parser, which handles long options, argumented and unargumented values, golfed arguments with no third party dependencies, help messages, version information, verbosity settings, non-options and more\n  * Snippets, so you can embed data, text, here docs or even specialised binaries inside shell scripts. Important to version control data, resources and here docs separately.\n  * One-liner child process clean-up\n  * Terminal aware colour coded messages (which know about ANSI and tput and fallback gracefully)\n  * A hierachial configuration framework, so administrator and users can have their own settings for any command line switch\n\t* Configuration can be broken into fragments (like Debian run-parts), so that common across environments can be checked in, and passwords kept separate\n    * Insecurely permissioned files aren't loaded\n    * Administrators can also prevent overrides of sensitive values\n  * Validation and path testing functions\n  * Indirect variable access, a boolean type, string functions (startsWith, contains, etc)\n  * Trivial to use, but always secure, random and cleaned up temporary files and folders\n  * Signal management\n  * Arrays even for shells without them, and more!\n* [build], functions for creating build scripts as well as a ready-to-use binary, `build` to drop in and make builds easy-peasy.\n* [byte], functions for setting and testing bits.\n* [compress], a simple consistent interface to compression, file extensions and associated MIME types.\n* [configure], an additional framework for more advanced configuration. Used by [swaddle] to let users define simple configuration files for package and repository definitions.\n* [cpucount], functions to help with enumerating CPU numbers and deciding on load averages.\n* [curl], superb interface to curl that works with the shell. Securely wraps curl so URLs, headers and credentials don't leak in process lists or environment variables, and parses headers, etc afterwards.\n* [debian], a small framework that includes a complete Debian control file parser.\n* [git], a small framework of wrapper functions to make it easier to use `git` from [shellfire] applications.\n* [github api], a REST interface that uses [curl], [urlencode], [jsonreader] and [jsonwriter]. Currently, only supports enough to support [swaddle], but, if you're looking for an open source project, this is one to do. A complete command line, shell based GitHub client would be a real win. And one for Linode. And Digital Ocean. And ...\n* [jsonreader], a pure shell JSON reader. Raises events rather than creating an anaemic DOM of objects and lists - which has always been the _right_ way to deal with structured data... Think SAX for JSON.\n* [jsonwriter], writes JSON.\n* [random], a small framework to obtain random numbers and characters in shell script, using fallbacks to progressively less random sources.\n* [unicode], to correctly encode code points in UTF-8 and UTF-16 (uggh).\n* [urlencode], for all the myriad URL encodings possible. Includes a URI template Level 4 encoder.\n* [version], a simple module to compare version numbers. Yes, I know that's normally bad, but some things (like [curl]) need it as we can't do feature detection.\n* [xmlwriter], writes XML.\n\nOf course, this is just a start. If there's something you'd like to see, code it and submit a pull request.\n\nAdditionally, there's also\n\n* [fatten], to make standalone shell scripts\n* [paths.d], which contains common locations and package names for different package managers. Used by [core]'s dependency framework as a source of information on where to find programs.\n* [swaddle], to package everything up, create repositories and push to GitHub, whether as a Deb, RPM, tarball or 7z. Or more.\n* [tutorial], the tutorial\n\n## Why?\nBecause the shell matters, as shellshock showed us. Because the shell is powerful, but is a poorly understood programming language with too many variants and gotchas. And it needs proper constructs. And lastly, because we're fed up with having to install half-an-universe's worth of Ruby, Python and Perl to bootstrap our servers or run CI jobs\\*. We like [Rob Landley's Aboriginal Linux](http://landley.net/aboriginal/). And if we want to build our own bespoke, single purpose servers, managed switches and embedded routers post-Snowden, less is more.\n\n\\* And if you've had to work with some of the backwards-is-forwards sysadmins I have had to in some strange organisations, doing it all in the shell is the only way of getting it done at all.\n\n_PS: If we could have our time again with the syntax of POSIX shell script, we probably would. But we're stuck with it. The flip side is, it hasn't changed in 16 years, so today it works almost anywhere._\n\n## Yeah, cool. So what uses it?\n\nWell, not much yet, but, who knows? There's currently:-\n\n* [swaddle], a tool for packaging, building package repositories, signing them, deploying their keys and publishing them on GitHub pages or wherever.\n* [bish-bosh], a complete [MQTT](http://mqtt.org/) 3.1.1 client. Totally portable, totally scriptable, minimally dependent.\n* [fatten], shellfire's own fattening tool\n* [developjs], [KisanHub]'s foundational javascript framework\n* [luvi-builder], a simple wrapper around [luvi]\n\n## You're mad. You should grow up and use Ruby, Python or Go.\nWe're proficient in all of them. And we've delivered some seriously hard core stuff in our time: message queue brokers that handle 1,000,000 simultaneous users in C. Postgresql network protocols in Java. Static webframeworks in Ruby. Devops automation in Python, oh, and a portfolio trading system in C#. A professional uses the language most appropriate to the problem domain. We do have beards and sandles, though.\n\n## What platforms or shells are supported?\n\nCode is known to run well on:-\n\n* Linux (including as old as CentOS 5, which is pretty obsolescent)\n* Mac OS X (using Homebrew where necessary)\n* The BSDs (all of them)\n* Cygwin\n* AIX\n* Solaris\n\nWe plan to support major distributions whilst their owners support them, as long as we can access without cost to the underlying technologies. We have limited interest in supporting obscure, dying or dead commercial platforms (eg HP-UX, Tru64).\n\nWe work well on POSIX shells that support a `local` keyword or alias:-\n\n* bash (3.2+)\n* bash as sh\n* ash derivatives\n  * dash\n  * BusyBox ash\n* ksh88 derivatives\n  * mksh\n  * pdksh\n  * AIX ksh88\n  * Solaries ksh88\n\nyash is not there yet but could be if there's interest. We're not going to support ksh93 as it's just too different, and zsh, great as it is an interactive shell, is a bit hit and miss. MinGW MSYS uses bash 3.1, which mostly works, but has some terrible IFS handling bugs (in particular, this affects arrays; this can be worked around, but a generic solution handicaps all other shells).\n\n## Original Developers\n[shellfire] has been open sourced and enhanced from code previously used in-house by [stormmq](http://stormmq.com/) and [KisanHub](http://www.kisanhub.com/). The lead developer is [Raphael Cohn](https://github.com/raphaelcohn).\n\n## Ready to get stated?\nFollow the [tutorial] and you'll be up and running your first [shellfire] application in 10 mins.\n\n[shellfire]: https://github.com/shellfire-dev \"shellfire homepage\"\n[fatten]: https://github.com/shellfire-dev/fatten \"fatten homepage\"\n[swaddle]: https://github.com/raphaelcohn/swaddle \"Swaddle homepage\"\n[bish-bosh]: https://github.com/raphaelcohn/bish-bosh \"bish-bosh homepage\"\n[core]: https://github.com/shellfire-dev/core \"shellfire core module homepage\"\n[build]: https://github.com/shellfire-dev/build \"shellfire build module homepage\"\n[byte]: https://github.com/shellfire-dev/byte \"shellfire byte module homepage\"\n[compress]: https://github.com/shellfire-dev/compress \"shellfire compress module homepage\"\n[configure]: https://github.com/shellfire-dev/configure \"shellfire configure module homepage\"\n[cpucount]: https://github.com/shellfire-dev/cpucount \"shellfire cpucount module homepage\"\n[curl]: https://github.com/shellfire-dev/curl \"shellfire curl module homepage\"\n[debian]: https://github.com/shellfire-dev/debian \"shellfire debian module homepage\"\n[git]: https://github.com/shellfire-dev/git \"shellfire git module homepage\"\n[github api]: https://github.com/shellfire-dev/github \"shellfire github api module homepage\"\n[jsonreader]: https://github.com/shellfire-dev/jsonreader \"shellfire jsonreader module homepage\"\n[jsonwriter]: https://github.com/shellfire-dev/jsonwriter \"shellfire jsonwriter module homepage\"\n[random]: https://github.com/shellfire-dev/random \"shellfire random module homepage\"\n[unicode]: https://github.com/shellfire-dev/unicode \"shellfire unicode module homepage\"\n[urlencode]: https://github.com/shellfire-dev/urlencode \"shellfire urlencode module homepage\"\n[version]: https://github.com/shellfire-dev/version \"shellfire version module homepage\"\n[xmlwriter]: https://github.com/shellfire-dev/xmlwriter \"shellfire xmlwriter module homepage\"\n[paths.d]: https://github.com/shellfire-dev/paths.d \"shellfire paths.d path data homepage\"\n[tutorial]: https://github.com/shellfire-dev/tutorial \"shellfire tutorial homepage\"\n[developjs]: https://github.com/KisanHub/developjs \"developjs homepage\"\n[KisanHub]: http://kisanhub.com/ \"KisanHub homepage\"\n[luvi-builder]: https://github.com/raphaelcohn/luvi-builder \"luvi-builder homepage\"\n[luvi]: https://github.com/luvit/luvi: \"luvi homepage\"\n"
        },
        {
          "name": "build",
          "type": "blob",
          "size": 0.0244140625,
          "content": "lib/shellfire/build/build"
        },
        {
          "name": "build.shellfire",
          "type": "blob",
          "size": 1.8046875,
          "content": "core_dependency_requires '*' rm mkdir\n\nbuild()\n{\n\tbuild_travis_ci_updateGitSubmodulesRecursively\n\tbuild_travis_ci_ensureGnupgKeyringExists\n\tbuild_prepareOutput\n\t\n\tbuild_createInitialFatten 'initial-fatten'\n\t\n\tbuild_assignDefaultComponents\n\tcore_variable_array_iterate build_nonOptions build_component\n}\n\nbuild_createInitialFatten()\n{\n\tlocal groupName=\"$1\"\n\t\n\tcore_message NOTICE \"Initial fattening of '$groupName' as a self-hosting bootstrap\"\n\t\n\tlocal fattenedOutputPath=\"$build_outputPath\"/fattened/\"$groupName\"/all\n\t\n\trm -rf \"$fattenedOutputPath\" 2>/dev/null || sudo -p \"Please enter the password for user %p to let root rm -rf '$fattenedOutputPath': \" rm -rf \"$fattenedOutputPath\"\n\tmkdir -m 0755 -p \"$fattenedOutputPath\"\n\t\n\t\"$build_fattenPath_default\" --verbose $(core_init_verbosity) --force --repository-path tools/fatten --output-path \"$fattenedOutputPath\" --bin-path \"$build_binPath\" -- fatten\n\t\n\t# Override to force use of our fattened fatten\n\tbuild_fattenPath=\"${fattenedOutputPath}${build_binPath}\"/fatten\n}\n\nbuild_assignDefaultComponents()\n{\n\tif core_variable_array_isEmpty build_nonOptions; then\n\t\tcore_variable_array_append build_nonOptions \\\n\t\t\t'fatten' \\\n\t\t\t'swaddle' \\\n\t\t\t'shellfire'\n\tfi\n}\n\nbuild_component()\n{\n\tlocal component=\"$core_variable_array_element\"\n\tlocal buildComponentFunction=\"build_component_${component}\"\n\tif ! core_functions_exists \"$buildComponentFunction\"; then\n\t\tcore_exitError $core_commandLine_exitCode_USAGE \"There is no build component '$component'\"\n\tfi\n\t\"$buildComponentFunction\" \"$@\"\t\n}\n\nbuild_component_fatten()\n{\n\tbuild_fattenAndSwaddle 'fatten' \"$build_relativePath\"/tools/fatten fatten\n}\n\nbuild_component_swaddle()\n{\n\tbuild_fattenAndSwaddle 'swaddle' \"$build_relativePath\"/tools/swaddle swaddle\n}\n\nbuild_component_shellfire()\n{\n\tbuild_fattenAndSwaddle 'shellfire' \"$build_relativePath\" paths.d-helper\n}\n"
        },
        {
          "name": "etc",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "paths.d-helper",
          "type": "blob",
          "size": 4.2197265625,
          "content": "#!/usr/bin/env sh\n# This file is part of shellfire. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/shellfire-dev/shellfire/master/COPYRIGHT. No part of shellfire, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.\n# Copyright © 2014-2015 The developers of shellfire. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/shellfire-dev/shellfire/master/COPYRIGHT.\n\n\n_program()\n{\n\tcore_usesIn pathsd_helper validate execute\n\tcore_usesIn pathsd_helper/actions Debian CentOS\n\t\n\tpathsd_helper_entrypoint()\n\t{\n\t\tpathsd_helper_execute_makePathsAbsolute\n\t\tpathsd_helper_execute_setDependencyPath\n\t\tpathsd_helper_execute_guardDependencyPath\n\t\tpathsd_helper_execute_setExtractFunction\n\t\tpathsd_helper_execute_actions Debian CentOS\n\t}\n}\n\n_program_name='paths.d-helper'\n_program_namespace='pathsd_helper'\n_program_version='unversioned'\n_program_package_or_build=''\n_program_path=\"$([ \"${_program_fattening_program_path+set}\" = 'set' ] && printf '%s\\n' \"$_program_fattening_program_path\" || ([ \"${0%/*}\" = \"${0}\" ] && printf '%s\\n' '.' || printf '%s\\n' \"${0%/*}\"))\"\n_program_libPath=\"${_program_path}/lib\"\n_program_etcPath=\"${_program_path}/etc\"\n_program_entrypoint='pathsd_helper_entrypoint'\n\n_program_commandLine_parseInitialise()\n{\n\tpathsd_helper_dependencyCheck_default='Homebrew'\n\tpathsd_helper_pathsdPath_default=\"$(pwd)\"\n}\n\n_program_commandLine_helpMessage()\n{\n\t_program_commandLine_helpMessage_usage=\"[OPTION]...\"\n\t_program_commandLine_helpMessage_description=\"Produces a list of packages for a dependency check in paths.d\"\n\t_program_commandLine_helpMessage_options=\"\n  -d, --dependency-check DEP  Dependency check DEP, eg Debian.\n                              Defaults to '$pathsd_helper_dependencyCheck_default'.\n  -p, --pathsd-path PATH      PATH parenting 'etc/$core_libraryName/paths.d'\n                              Defaults to current working directory:-\n                              $pathsd_helper_pathsdPath_default\"\n    _program_commandLine_helpMessage_optionsSpacing='     '\n\t_program_commandLine_helpMessage_configurationKeys=\"\n  pathsd_helper_dependencyCheck  Equivalent to --dependency-check\n  pathsd_helper_pathsdPath       Equivalent to --pathsd-path\n\"\n\t_program_commandLine_helpMessage_examples=\"\n  ${_program_name} -d Debian\n\"\n}\n\n_program_commandLine_optionExists()\n{\n\tcase \"$optionName\" in\n\t\n\t\td|dependency-check)\n\t\t\techo 'yes-argumented'\n\t\t;;\n\t\n\t\tp|pathsd-path)\n\t\t\techo 'yes-argumented'\n\t\t;;\n\t\t\n\t\t*)\n\t\t\techo 'no'\n\t\t;;\n\t\n\tesac\n}\n\n_program_commandLine_processOptionWithArgument()\n{\n\tcase \"$optionName\" in\n\t\n\t\td|dependency-check)\n\t\t\tpathsd_helper_validate_dependencyCheck $core_commandLine_exitCode_USAGE 'option' \"$optionNameIncludingHyphens\" \"$optionValue\"\n\t\t\tpathsd_helper_dependencyCheck=\"$optionValue\"\n\t\t;;\n\t\n\t\tp|pathsd-path)\n\t\t\tpathsd_helper_validate_pathsdPath $core_commandLine_exitCode_USAGE 'option' \"$optionNameIncludingHyphens\" \"$optionValue\"\n\t\t\tpathsd_helper_pathsdPath=\"$optionValue\"\n\t\t;;\n\t\n\tesac\n}\n\n_program_commandLine_validate()\n{\n\tif core_variable_isSet pathsd_helper_dependencyCheck; then\n\t\tpathsd_helper_validate_dependencyCheck $core_commandLine_exitCode_CONFIG 'configuration setting' 'pathsd_helper_dependencyCheck' \"$pathsd_helper_dependencyCheck\"\n\telse\n\t\tcore_message INFO \"Defaulting --dependency-check to '$pathsd_helper_dependencyCheck_default'\"\n\t\tpathsd_helper_dependencyCheck=\"$pathsd_helper_dependencyCheck_default\"\n\t\tpathsd_helper_validate_dependencyCheck $core_commandLine_exitCode_CONFIG 'default' 'pathsd_helper_dependencyCheck' \"$pathsd_helper_dependencyCheck\"\n\tfi\n\n\tif core_variable_isSet pathsd_helper_pathsdPath; then\n\t\tpathsd_helper_validate_pathsdPath $core_commandLine_exitCode_CONFIG 'configuration setting' 'pathsd_helper_pathsdPath' \"$pathsd_helper_pathsdPath\"\n\telse\n\t\tcore_message INFO \"Defaulting --paths-path to '$pathsd_helper_pathsdPath_default'\"\n\t\tpathsd_helper_pathsdPath=\"$pathsd_helper_pathsdPath_default\"\n\t\tpathsd_helper_validate_pathsdPath $core_commandLine_exitCode_CONFIG 'default' 'pathsd_helper_pathsdPath' \"$pathsd_helper_pathsdPath\"\n\tfi\n}\n\n. \"$_program_libPath\"/shellfire/core/init.functions \"$@\"\n"
        },
        {
          "name": "swaddling",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}