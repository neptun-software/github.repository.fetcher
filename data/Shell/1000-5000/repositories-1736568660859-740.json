{
  "metadata": {
    "timestamp": 1736568660859,
    "page": 740,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc0OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ioBroker/ioBroker",
      "stars": 1298,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".cirrus.yml",
          "type": "blob",
          "size": 1.4765625,
          "content": "freebsd_instance:\n  image_family: freebsd-14-0\n\ntask:\n  prepare_install_script:\n    - pkg install -y bash node npm libnghttp2 python sudo\n  install_script:\n    # remove download of library from installer script and fixer and source it manually\n    - |\n      sed '/# get and load the LIB => START/,/# get and load the LIB => END/d' installer.sh\n      sed '/# get and load the LIB => START/,/# get and load the LIB => END/d' fix_installation.sh\n      source ./installer_library.sh\n    # Install ioBroker\n    - |\n      sudo chmod +x ./installer.sh\n      ./installer.sh\n  test_script:\n    # Test file permissions\n    - |\n      sudo chmod +x .github/testFiles.sh\n      .github/testFiles.sh\n\n    # Test if ioBroker starts by checking the admin adapter output\n    - curl --insecure http://127.0.0.1:8081 2> /dev/null | grep '<title>Admin</title>' &> /dev/null || exit 1\n\n    # Now test if adapters which require python can be installed\n    - iobroker url iobroker.lovelace\n\n    # Now test that the fixer does what it should\n    # Stop ioBroker processes before running the fixer\n    - IOB_DIR=`[ -d /opt/iobroker ] && echo \"/opt/iobroker\" || echo \"/usr/local/iobroker\"`\n    - cd $IOB_DIR\n    - node node_modules/iobroker.js-controller/iobroker.js stop\n    - sleep 60\n    #\n    - cd $TEST_DIR\n    # Run the fixer\n    - sudo chmod +x ./fix_installation.sh\n    - sudo env \"PATH=$PATH\" bash ./fix_installation.sh\n    # Test file permissions again...\n    - sudo chmod +x .github/testFiles.sh\n    - bash .github/testFiles.sh\n"
        },
        {
          "name": ".eslintrc.json",
          "type": "blob",
          "size": 0.6611328125,
          "content": "{\n    \"env\": {\n        \"es6\": true,\n        \"node\": true\n    },\n    \"extends\": \"eslint:recommended\",\n    \"rules\": {\n        \"indent\": [\n            \"error\",\n            4,\n            {\n                \"SwitchCase\": 1\n            }\n        ],\n        \"linebreak-style\": [\n            \"error\",\n            \"windows\"\n        ],\n        \"no-var\": \"error\",\n        \"prefer-const\": \"error\",\n        \"quotes\": [\n            \"error\",\n            \"single\",\n            {\n                \"avoidEscape\": true,\n                \"allowTemplateLiterals\": true\n            }\n        ],\n        \"semi\": [\n            \"error\",\n            \"always\"\n        ],\n        \"no-console\": \"off\"\n    }\n}"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1396484375,
          "content": "# Set the default behavior, in case people don't have core.autocrlf set.\n* text=auto\n\n# Force shell scripts to have LF ending\n*.sh text eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1005859375,
          "content": ".idea\nnode_modules\niobroker-*.tgz\nnpm-debug.log\ndist\n# This is too much noise for git\npackage-lock.json"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 15.427734375,
          "content": "[submodule \"adapterlist/admin\"]\n\tpath = adapterlist/admin\n\turl = https://github.com/ioBroker/ioBroker.admin\n[submodule \"adapterlist/amazon-dash\"]\n\tpath = adapterlist/amazon-dash\n\turl = https://github.com/PArns/ioBroker.amazon-dash\n[submodule \"adapterlist/artnet\"]\n\tpath = adapterlist/artnet\n\turl = https://github.com/ioBroker/ioBroker.artnet\n[submodule \"adapterlist/b-control-em\"]\n\tpath = adapterlist/b-control-em\n\turl = https://github.com/ioBroker/ioBroker.b-control-em\n[submodule \"adapterlist/botvac\"]\n\tpath = adapterlist/botvac\n\turl = https://github.com/Pmant/ioBroker.botvac\n[submodule \"adapterlist/broadlink\"]\n\tpath = adapterlist/broadlink\n\turl = https://github.com/hieblmedia/ioBroker.broadlink\n[submodule \"adapterlist/chromecast\"]\n\tpath = adapterlist/chromecast\n\turl = https://github.com/angelnu/ioBroker.chromecast\n[submodule \"adapterlist/cloud\"]\n\tpath = adapterlist/cloud\n\turl = https://github.com/ioBroker/ioBroker.cloud\n[submodule \"adapterlist/cul\"]\n\tpath = adapterlist/cul\n\turl = https://github.com/ioBroker/ioBroker.cul\n[submodule \"adapterlist/daikin\"]\n\tpath = adapterlist/daikin\n\turl = https://github.com/Apollon77/ioBroker.daikin\n[submodule \"adapterlist/discovery\"]\n\tpath = adapterlist/discovery\n\turl = https://github.com/ioBroker/ioBroker.discovery\n[submodule \"adapterlist/dwd\"]\n\tpath = adapterlist/dwd\n\turl = https://github.com/ioBroker/ioBroker.dwd\n[submodule \"adapterlist/email\"]\n\tpath = adapterlist/email\n\turl = https://github.com/ioBroker/ioBroker.email\n[submodule \"adapterlist/epson_stylus_px830\"]\n\tpath = adapterlist/epson_stylus_px830\n\turl = https://github.com/Pix---/ioBroker.epson_stylus_px830\n[submodule \"adapterlist/fakeroku\"]\n\tpath = adapterlist/fakeroku\n\turl = https://github.com/Pmant/ioBroker.fakeroku\n[submodule \"adapterlist/feiertage\"]\n\tpath = adapterlist/feiertage\n\turl = https://github.com/Pix---/ioBroker.feiertage\n[submodule \"adapterlist/fhem\"]\n\tpath = adapterlist/fhem\n\turl = https://github.com/ioBroker/ioBroker.fhem\n[submodule \"adapterlist/find-my-iphone\"]\n\tpath = adapterlist/find-my-iphone\n\turl = https://github.com/soef/ioBroker.find-my-iphone\n[submodule \"adapterlist/flot\"]\n\tpath = adapterlist/flot\n\turl = https://github.com/ioBroker/ioBroker.flot\n[submodule \"adapterlist/foobar2000\"]\n\tpath = adapterlist/foobar2000\n\turl = https://github.com/instalator/ioBroker.foobar2000\n[submodule \"adapterlist/fritzbox\"]\n\tpath = adapterlist/fritzbox\n\turl = https://github.com/ruhr70/ioBroker.fritzbox\n[submodule \"adapterlist/fronius\"]\n\tpath = adapterlist/fronius\n\turl = https://github.com/ldittmar81/ioBroker.fronius\n[submodule \"adapterlist/geofency\"]\n\tpath = adapterlist/geofency\n\turl = https://github.com/ioBroker/ioBroker.geofency\n[submodule \"adapterlist/harmony\"]\n\tpath = adapterlist/harmony\n\turl = https://github.com/Pmant/ioBroker.harmony\n[submodule \"adapterlist/hid\"]\n\tpath = adapterlist/hid\n\turl = https://github.com/soef/ioBroker.hid\n[submodule \"adapterlist/history\"]\n\tpath = adapterlist/history\n\turl = https://github.com/ioBroker/ioBroker.history\n[submodule \"adapterlist/hm-rega\"]\n\tpath = adapterlist/hm-rega\n\turl = https://github.com/ioBroker/ioBroker.hm-rega\n[submodule \"adapterlist/hm-rpc\"]\n\tpath = adapterlist/hm-rpc\n\turl = https://github.com/ioBroker/ioBroker.hm-rpc\n[submodule \"adapterlist/hmm\"]\n\tpath = adapterlist/hmm\n\turl = https://github.com/husky-koglhof/ioBroker.hmm\n[submodule \"adapterlist/homekit\"]\n\tpath = adapterlist/homekit\n\turl = https://github.com/ioBroker/ioBroker.homekit\n[submodule \"adapterlist/homepilot\"]\n\tpath = adapterlist/homepilot\n\turl = https://github.com/Pix---/ioBroker.homepilot\n[submodule \"adapterlist/hue\"]\n\tpath = adapterlist/hue\n\turl = https://github.com/ioBroker/ioBroker.hue\n[submodule \"adapterlist/ical\"]\n\tpath = adapterlist/ical\n\turl = https://github.com/ioBroker/ioBroker.ical\n[submodule \"adapterlist/icons-addictive-flavour-png\"]\n\tpath = adapterlist/icons-addictive-flavour-png\n\turl = https://github.com/ioBroker/ioBroker.icons-addictive-flavour-png\n[submodule \"adapterlist/icons-fatcow-hosting\"]\n\tpath = adapterlist/icons-fatcow-hosting\n\turl = https://github.com/ioBroker/ioBroker.icons-fatcow-hosting\n[submodule \"adapterlist/icons-icons8\"]\n\tpath = adapterlist/icons-icons8\n\turl = https://github.com/ioBroker/ioBroker.icons-icons8\n[submodule \"adapterlist/icons-material-png\"]\n\tpath = adapterlist/icons-material-png\n\turl = https://github.com/ioBroker/ioBroker.icons-material-png\n[submodule \"adapterlist/icons-material-svg\"]\n\tpath = adapterlist/icons-material-svg\n\turl = https://github.com/ioBroker/ioBroker.icons-material-svg\n[submodule \"adapterlist/icons-mfd-png\"]\n\tpath = adapterlist/icons-mfd-png\n\turl = https://github.com/ioBroker/ioBroker.icons-mfd-png\n[submodule \"adapterlist/icons-mfd-svg\"]\n\tpath = adapterlist/icons-mfd-svg\n\turl = https://github.com/ioBroker/ioBroker.icons-mfd-svg\n[submodule \"adapterlist/icons-open-icon-library-png\"]\n\tpath = adapterlist/icons-open-icon-library-png\n\turl = https://github.com/ioBroker/ioBroker.icons-open-icon-library-png\n[submodule \"adapterlist/icons-ultimate-png\"]\n\tpath = adapterlist/icons-ultimate-png\n\turl = https://github.com/ioBroker/ioBroker.icons-ultimate-png\n[submodule \"adapterlist/influxdb\"]\n\tpath = adapterlist/influxdb\n\turl = https://github.com/ioBroker/ioBroker.influxdb\n[submodule \"adapterlist/innogy-smarthome\"]\n\tpath = adapterlist/innogy-smarthome\n\turl = https://github.com/PArns/ioBroker.innogy-smarthome\n[submodule \"adapterlist/javascript\"]\n\tpath = adapterlist/javascript\n\turl = https://github.com/ioBroker/ioBroker.javascript\n[submodule \"adapterlist/js-controller\"]\n\tpath = adapterlist/js-controller\n\turl = https://github.com/ioBroker/ioBroker.js-controller\n[submodule \"adapterlist/km200\"]\n\tpath = adapterlist/km200\n\turl = https://github.com/frankjoke/ioBroker.km200\n[submodule \"adapterlist/knx\"]\n\tpath = adapterlist/knx\n\turl = https://github.com/ioBroker/ioBroker.knx\n[submodule \"adapterlist/kodi\"]\n\tpath = adapterlist/kodi\n\turl = https://github.com/instalator/ioBroker.kodi\n[submodule \"adapterlist/landroid\"]\n\tpath = adapterlist/landroid\n\turl = https://github.com/ldittmar81/ioBroker.landroid\n[submodule \"adapterlist/lgtv\"]\n\tpath = adapterlist/lgtv\n\turl = https://github.com/SMundt/ioBroker.lgtv\n[submodule \"adapterlist/lightify\"]\n\tpath = adapterlist/lightify\n\turl = https://github.com/soef/ioBroker.lightify\n[submodule \"adapterlist/megad\"]\n\tpath = adapterlist/megad\n\turl = https://github.com/ioBroker/ioBroker.megad\n[submodule \"adapterlist/megadd\"]\n\tpath = adapterlist/megadd\n\turl = https://github.com/ausHaus/ioBroker.megadd\n[submodule \"adapterlist/megaesp\"]\n\tpath = adapterlist/megaesp\n\turl = https://github.com/ausHaus/ioBroker.megaesp\n[submodule \"adapterlist/miele\"]\n\tpath = adapterlist/miele\n\turl = https://github.com/soef/ioBroker.miele\n[submodule \"adapterlist/mihome-vacuum\"]\n\tpath = adapterlist/mihome-vacuum\n\turl = https://github.com/ioBroker/ioBroker.mihome-vacuum\n[submodule \"adapterlist/mobile\"]\n\tpath = adapterlist/mobile\n\turl = https://github.com/ioBroker/ioBroker.mobile\n[submodule \"adapterlist/modbus\"]\n\tpath = adapterlist/modbus\n\turl = https://github.com/ioBroker/ioBroker.modbus\n[submodule \"adapterlist/mpd\"]\n\tpath = adapterlist/mpd\n\turl = https://github.com/instalator/ioBroker.mpd\n[submodule \"adapterlist/mqtt\"]\n\tpath = adapterlist/mqtt\n\turl = https://github.com/ioBroker/ioBroker.mqtt\n[submodule \"adapterlist/mqtt-client\"]\n\tpath = adapterlist/mqtt-client\n\turl = https://github.com/Pmant/ioBroker.mqtt-client\n[submodule \"adapterlist/mysensors\"]\n\tpath = adapterlist/mysensors\n\turl = https://github.com/ioBroker/ioBroker.mysensors\n[submodule \"adapterlist/netatmo\"]\n\tpath = adapterlist/netatmo\n\turl = https://github.com/PArns/ioBroker.netatmo\n[submodule \"adapterlist/node-red\"]\n\tpath = adapterlist/node-red\n\turl = https://github.com/ioBroker/ioBroker.node-red\n[submodule \"adapterlist/noolite\"]\n\tpath = adapterlist/noolite\n\turl = https://github.com/ioBroker/ioBroker.noolite\n[submodule \"adapterlist/nut\"]\n\tpath = adapterlist/nut\n\turl = https://github.com/Apollon77/ioBroker.nut\n[submodule \"adapterlist/onkyo\"]\n\tpath = adapterlist/onkyo\n\turl = https://github.com/ioBroker/ioBroker.onkyo\n[submodule \"adapterlist/owfs\"]\n\tpath = adapterlist/owfs\n\turl = https://github.com/ioBroker/ioBroker.owfs\n[submodule \"adapterlist/owntracks\"]\n\tpath = adapterlist/owntracks\n\turl = https://github.com/ioBroker/ioBroker.owntracks\n[submodule \"adapterlist/parser\"]\n\tpath = adapterlist/parser\n\turl = https://github.com/ioBroker/ioBroker.parser\n[submodule \"adapterlist/phantomjs\"]\n\tpath = adapterlist/phantomjs\n\turl = https://github.com/ioBroker/ioBroker.phantomjs\n[submodule \"adapterlist/piface\"]\n\tpath = adapterlist/piface\n\turl = https://github.com/eisbaeeer/ioBroker.piface\n[submodule \"adapterlist/pimatic\"]\n\tpath = adapterlist/pimatic\n\turl = https://github.com/ioBroker/ioBroker.pimatic\n[submodule \"adapterlist/ping\"]\n\tpath = adapterlist/ping\n\turl = https://github.com/ioBroker/ioBroker.ping\n[submodule \"adapterlist/proxy\"]\n\tpath = adapterlist/proxy\n\turl = https://github.com/ioBroker/ioBroker.proxy\n[submodule \"adapterlist/pushbullet\"]\n\tpath = adapterlist/pushbullet\n\turl = https://github.com/Jens1809/ioBroker.pushbullet\n[submodule \"adapterlist/pushover\"]\n\tpath = adapterlist/pushover\n\turl = https://github.com/ioBroker/ioBroker.pushover\n[submodule \"adapterlist/pushsafer\"]\n\tpath = adapterlist/pushsafer\n\turl = https://github.com/ioBroker/ioBroker.pushsafer\n[submodule \"adapterlist/radar\"]\n\tpath = adapterlist/radar\n\turl = https://github.com/frankjoke/ioBroker.radar\n[submodule \"adapterlist/rflink\"]\n\tpath = adapterlist/rflink\n\turl = https://github.com/ioBroker/ioBroker.rflink\n[submodule \"adapterlist/rickshaw\"]\n\tpath = adapterlist/rickshaw\n\turl = https://github.com/ioBroker/ioBroker.rickshaw\n[submodule \"adapterlist/rpi2\"]\n\tpath = adapterlist/rpi2\n\turl = https://github.com/ioBroker/ioBroker.rpi2\n[submodule \"adapterlist/rwe-smarthome\"]\n\tpath = adapterlist/rwe-smarthome\n\turl = https://github.com/PArns/ioBroker.rwe-smarthome\n[submodule \"adapterlist/s7\"]\n\tpath = adapterlist/s7\n\turl = https://github.com/ioBroker/ioBroker.s7\n[submodule \"adapterlist/samsung\"]\n\tpath = adapterlist/samsung\n\turl = https://github.com/soef/ioBroker.samsung\n[submodule \"adapterlist/sayit\"]\n\tpath = adapterlist/sayit\n\turl = https://github.com/ioBroker/ioBroker.sayit\n[submodule \"adapterlist/scenes\"]\n\tpath = adapterlist/scenes\n\turl = https://github.com/ioBroker/ioBroker.scenes\n[submodule \"adapterlist/simple-api\"]\n\tpath = adapterlist/simple-api\n\turl = https://github.com/ioBroker/ioBroker.simple-api\n[submodule \"adapterlist/smartmeter\"]\n\tpath = adapterlist/smartmeter\n\turl = https://github.com/Apollon77/ioBroker.smartmeter\n[submodule \"adapterlist/socketio\"]\n\tpath = adapterlist/socketio\n\turl = https://github.com/ioBroker/ioBroker.socketio\n[submodule \"adapterlist/solarwetter\"]\n\tpath = adapterlist/solarwetter\n\turl = https://github.com/Pix---/ioBroker.solarwetter\n[submodule \"adapterlist/sonos\"]\n\tpath = adapterlist/sonos\n\turl = https://github.com/ioBroker/ioBroker.sonos\n[submodule \"adapterlist/sql\"]\n\tpath = adapterlist/sql\n\turl = https://github.com/ioBroker/ioBroker.sql\n[submodule \"adapterlist/squeezebox\"]\n\tpath = adapterlist/squeezebox\n\turl = https://github.com/UncleSamSwiss/ioBroker.squeezebox\n[submodule \"adapterlist/starline\"]\n\tpath = adapterlist/starline\n\turl = https://github.com/instalator/ioBroker.starline\n[submodule \"adapterlist/tankerkoenig\"]\n\tpath = adapterlist/tankerkoenig\n\turl = https://github.com/Pix---/ioBroker.tankerkoenig\n[submodule \"adapterlist/telegram\"]\n\tpath = adapterlist/telegram\n\turl = https://github.com/ioBroker/ioBroker.telegram\n[submodule \"adapterlist/terminal\"]\n\tpath = adapterlist/terminal\n\turl = https://github.com/ioBroker/ioBroker.terminal\n[submodule \"adapterlist/text2command\"]\n\tpath = adapterlist/text2command\n\turl = https://github.com/ioBroker/ioBroker.text2command\n[submodule \"adapterlist/tr-064\"]\n\tpath = adapterlist/tr-064\n\turl = https://github.com/soef/ioBroker.tr-064\n[submodule \"adapterlist/tvspielfilm\"]\n\tpath = adapterlist/tvspielfilm\n\turl = https://github.com/Pix---/ioBroker.tvspielfilm\n[submodule \"adapterlist/unifi\"]\n\tpath = adapterlist/unifi\n\turl = https://github.com/jens-maus/ioBroker.unifi\n[submodule \"adapterlist/upnp\"]\n\tpath = adapterlist/upnp\n\turl = https://github.com/Jey-Cee/ioBroker.upnp\n[submodule \"adapterlist/vcard\"]\n\tpath = adapterlist/vcard\n\turl = https://github.com/hometm/ioBroker.vcard\n[submodule \"adapterlist/vis\"]\n\tpath = adapterlist/vis\n\turl = https://github.com/ioBroker/ioBroker.vis\n[submodule \"adapterlist/vis-bars\"]\n\tpath = adapterlist/vis-bars\n\turl = https://github.com/ioBroker/ioBroker.vis-bars\n[submodule \"adapterlist/vis-canvas-gauges\"]\n\tpath = adapterlist/vis-canvas-gauges\n\turl = https://github.com/ioBroker/ioBroker.vis-canvas-gauges\n[submodule \"adapterlist/vis-colorpicker\"]\n\tpath = adapterlist/vis-colorpicker\n\turl = https://github.com/ioBroker/ioBroker.vis-colorpicker\n[submodule \"adapterlist/vis-fancyswitch\"]\n\tpath = adapterlist/vis-fancyswitch\n\turl = https://github.com/ioBroker/ioBroker.vis-fancyswitch\n[submodule \"adapterlist/vis-google-fonts\"]\n\tpath = adapterlist/vis-google-fonts\n\turl = https://github.com/ioBroker/ioBroker.vis-google-fonts\n[submodule \"adapterlist/vis-history\"]\n\tpath = adapterlist/vis-history\n\turl = https://github.com/ioBroker/ioBroker.vis-history\n[submodule \"adapterlist/vis-hqwidgets\"]\n\tpath = adapterlist/vis-hqwidgets\n\turl = https://github.com/ioBroker/ioBroker.vis-hqwidgets\n[submodule \"adapterlist/vis-jqui-mfd\"]\n\tpath = adapterlist/vis-jqui-mfd\n\turl = https://github.com/ioBroker/ioBroker.vis-jqui-mfd\n[submodule \"adapterlist/vis-justgage\"]\n\tpath = adapterlist/vis-justgage\n\turl = https://github.com/Pmant/ioBroker.vis-justgage\n[submodule \"adapterlist/vis-keyboard\"]\n\tpath = adapterlist/vis-keyboard\n\turl = https://github.com/ioBroker/ioBroker.vis-keyboard\n[submodule \"adapterlist/vis-lcars\"]\n\tpath = adapterlist/vis-lcars\n\turl = https://github.com/ioBroker/ioBroker.vis-lcars\n[submodule \"adapterlist/vis-map\"]\n\tpath = adapterlist/vis-map\n\turl = https://github.com/ioBroker/ioBroker.vis-map\n[submodule \"adapterlist/vis-metro\"]\n\tpath = adapterlist/vis-metro\n\turl = https://github.com/ioBroker/ioBroker.vis-metro\n[submodule \"adapterlist/vis-players\"]\n\tpath = adapterlist/vis-players\n\turl = https://github.com/instalator/ioBroker.vis-players\n[submodule \"adapterlist/vis-plumb\"]\n\tpath = adapterlist/vis-plumb\n\turl = https://github.com/ioBroker/ioBroker.vis-plumb\n[submodule \"adapterlist/vis-rgraph\"]\n\tpath = adapterlist/vis-rgraph\n\turl = https://github.com/ioBroker/ioBroker.vis-rgraph\n[submodule \"adapterlist/vis-timeandweather\"]\n\tpath = adapterlist/vis-timeandweather\n\turl = https://github.com/ioBroker/ioBroker.vis-timeandweather\n[submodule \"adapterlist/weatherunderground\"]\n\tpath = adapterlist/weatherunderground\n\turl = https://github.com/dschaedl/ioBroker.weatherunderground\n[submodule \"adapterlist/web\"]\n\tpath = adapterlist/web\n\turl = https://github.com/ioBroker/ioBroker.web\n[submodule \"adapterlist/wetty\"]\n\tpath = adapterlist/wetty\n\turl = https://github.com/ioBroker/ioBroker.wetty\n[submodule \"adapterlist/wifilight\"]\n\tpath = adapterlist/wifilight\n\turl = https://github.com/soef/ioBroker.wifilight\n[submodule \"adapterlist/wm-bus\"]\n\tpath = adapterlist/wm-bus\n\turl = https://github.com/soef/ioBroker.wm-bus\n[submodule \"adapterlist/wolf\"]\n\tpath = adapterlist/wolf\n\turl = https://github.com/ioBroker/ioBroker.wolf\n[submodule \"adapterlist/xs1\"]\n\tpath = adapterlist/xs1\n\turl = https://github.com/frankjoke/ioBroker.xs1\n[submodule \"adapterlist/yahka\"]\n\tpath = adapterlist/yahka\n\turl = https://github.com/jensweigele/ioBroker.yahka\n[submodule \"adapterlist/yamaha\"]\n\tpath = adapterlist/yamaha\n\turl = https://github.com/soef/ioBroker.yamaha\n[submodule \"adapterlist/yr\"]\n\tpath = adapterlist/yr\n\turl = https://github.com/ioBroker/ioBroker.yr\n[submodule \"adapterlist/zwave\"]\n\tpath = adapterlist/zwave\n\turl = https://github.com/ioBroker/ioBroker.zwave\n"
        },
        {
          "name": ".releaseconfig.json",
          "type": "blob",
          "size": 0.029296875,
          "content": "{\n  \"plugins\": [\"license\"]\n}\n\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 1.759765625,
          "content": "# Changelog for Windows-Installer-NPX\n<!-- ## **WORK IN PROGRESS**\n-->\n## 6.0.1 (2024-08-23)\n* Windows: Fix service installation error on very slow PCs\n\n## 6.0.0 (2024-08-10)\n* Adjust minimum Node.js version to 18 of new main package which match to the minimum version of js-controller 6.0.x\n* Rebuild Windows install logic to use the new installer script\n* Windows: Ensure that git installations runs without user interaction\n\n## 5.1.2 (2024-05-23)\n* Create the correct `controller.js` file on windows to work with controller v6\n\n## 5.0.0 (2023-09-14)\n* Adjust minimum Node.js version to 16.13 for new installations which match to the minimum version of js-controller 5.0.x\n\n## 4.3.4 (2023-04-20)\n* Handle restart properly in iob.bat and iobroker.bat for Windows\n\n## 4.3.1 (2023-02-27)\n* Optimize Windows installation\n\n## 4.3.0 (2023-02-27)\n* Also create Start-menu entries for Windows installation\n* Add option to specify the Windows service name for Windows installation\n\n## 4.2.2 (2023-01-14)\n* Optimize Windows installer script\n* Do JSONL DB compression earlier in the Windows installer flow\n\n## 4.2.1 (2022-12-22)\n* Caught some errors when executed in wrong directory on windows\n\n## 4.2.0 (2022-12-09)\n* Sync Windows installer with Linux installer\n* Add Windows Fixer to compress JSONL databases\n\n## 4.1.11 (2022-05-25)\n* Made the parameters call list longer\n\n## 4.1.10 (2022-05-23)\n* Start/stop service by calling `iob.bat start/stop`\n\n## 4.1.9 (2022-05-23)\n* Stop service before fix and then start service again\n\n## 4.1.7 (2022-05-23)\n* ioBroker stopped now before fix\n\n## 4.1.5 (2022-05-22)\n* Added support for windows: `iob fix`\n\n## 4.1.4 (2022-05-22)\n* Allowed to install on linux too\n\n## 4.0.3 (2022-05-22)\n* Corrected fixer\n\n## 4.0.2 (2022-05-22)\n* Activate windows as npx installer again\n"
        },
        {
          "name": "CHANGELOG_DIAG_LINUX.md",
          "type": "blob",
          "size": 2.1259765625,
          "content": "# Changelog for Linux-Diag-Script\n\n## 2024-10-19\n* Included 'dist-info' for Lifecycle status of Debian/Ubuntu releases\n\n## 2024-09-28\n* Moved options to fix configurations to 'iob fix'\n\n## 2024-09-21\n* Added option to set multi-user.target on systemd-based machines\n* With option '--de' some output will be in German language\n* Avoided sourcing /etc/os-release for security reasons\n* Implemented Debian & Ubuntu Lifecycle check\n* Made setting timezone more generic on non-Debian systemd\n* Implemented check for a default user and offer to create one if missing\n* Added check for 'critical errors' in dmesg\n* Added 'iob list hosts' command\n\n## 2024-06-24\n* Added language information to CodeTags for copying to ioB-Forum.\n* Only show mounted filesystems that are real\n* Deactivated some VAR that were not used anyway\n\n## 2024-05-22\n* Added nodejs20\n* pgrep fixed for Display Server Detection\n* Fixed timezone detection on Docker\n\n## 2024-04-21\n* root check less strict - Script can now be run as root\n* Check for Userland architecture made compatible with non-Debian Linux\n* Check for Users and their Groups\n* Fixed check for running Display-Server\n* Added excerpt of 'top' - Only the header is displayed\n* All mounted filesystems are displayed, even virtual ones\n* Added check for 'by-id'-Links for serial devices (e.g. ZigBee-Sticks)\n* Made nodejs-Check more compatible with non-Debian Linux\n* GitHub-Installations are listed by name\n* Extended 'by-id'-Checks for Zigbee COM-Ports\n* Better check for running Display Servers\n\n## 2023-10-10\n* Removed output of Machine & Boot IDs.\n* Added a human-readable diag of Raspberry Throttling States\n\n## 2023-04-16\n* Enhanced node.js check\n* Fixed some Docker related compatibility issues\n\n## 2023-04-02\n* Add checks for npm directory issues and tell the user to run the fixer\n\n## 2023-02-19\n* Restructured Summary and added memory state\n\n## 2023-01-02\n* Added npx version to diag command\n* Added latest dmesg content to diag command\n\n## 2022-12-31\n* Added tail -n 25 for iob logs\n* Added status of admin in Summary\n\n## 2022-12-30\n* Added some more checks\n\n## 2022-12-13\n* Fixed 'Press any key' request\n\n## 2022-12-09\n* Initial release\n"
        },
        {
          "name": "CHANGELOG_FIXER_LINUX.md",
          "type": "blob",
          "size": 5.9365234375,
          "content": "# Changelog for Linux-Fixer-Script\n\n## 2024-10-22\n* Allow iob start/stop/restart also as root but log information\n* Also install passwd and polkitd packages because some lxc systems might miss it\n\n## 2024-10-19\n* Added 'distro-info' package to prerequisites list\n\n## 2024-10-04\n* Enhance root check and messaging\n* Implemented adding default user if none is available\n* Implemented setting multi-user.target on systemd Linux\n* adds \"nmcli\" to allowed sudo commands\n* root/sudo locked out for systemd based installations\n* --allow-root Option enabled (Just for a transition time)\n\n## 2024-08-11\n* Implemented reconfiguring time zone if none is set\n\n## 2024-01-04\n* Fix package installation issues on Debian\n\n## 2023-12-30\n* Fix Nodejs Update script call\n* Fixes in Nodejs installation\n\n## 2023-12-29\n* Make sure installation also proceed on new Ubuntu versions when package installations require service restarts\n\n## 2023-10-13\n* Allow to define Node.js version as parameter for \"iob nodejs-update\" command\n* fix package installation error for gcc\n\n## 2023-10-12\n* Fix how the Node.js update script is called\n\n## 2023-10-10\n* Add command \"iob nodejs-update\" to update Node.js to latest recommended version (or any when major given as parameter)\n\n## 2023-04-02\n* Add check for left over npm temporary directories and clean them up if found\n\n## 2022-12-22\n* Adjustments to run diagnostic script differently\n\n## 2022-12-09\n* Add Compressing of the JSONL databases when JSONL is used\n* Adjust Docker detection\n* Add Diag script and \"iob diag\" command\n\n## 2022-06-03\n* Remove python-dev from installed debian packages again to prevent installing python2 on some distributions\n\n## 2022-02-13\n* Delay restarting js-controller after a crash to avoid locked DB files\n\n## 2022-02-10\n* Prevent npm from showing npm update information\n\n## 2021-12-27\n* Install `cmake` on linux\n\n## 2021-04-07\n* Install backitup Adapter on new installations by default (not fixer relevant)\n\n## 2021-01-23\n* (Linux) fix CLI completions\n* (Linux) revert \"ignore which aliases\"\n\n## 2021-01-20\n* (Linux) enable auto-completion for iobroker commands\n* (Linux) ignore which aliases\n* (Linux) updated native packages so canvas can be built by default\n* (macOS) disabled file permission check on OSX\n* fixed cirrus tests\n* added support of npm7\n\n## 2020-12-07\n* (FreeBSD) Fixed installation for FreeBSD by using `/usr/bin/env` to detect path for `bash` automatically and do not enforce usage of python 2.7 which is EOL\n* (Linux) Use `-y` argument for `yum`\n\n## 2020-06-15\n* Corrected installer_library.sh path on github (error #281) \n\n## 2020-06-12\n* (Linux) Added net-tools to fix error #277 \"ifconfig: command not found\" \n* (Linux) correctly parse string arguments inside quotes\n\n## 2020-04-12\n* (Linux) Avoid entering the sudo password for iobroker CLI\n\n## 2020-01-30\n* (Linux) Add iobroker user to the `video` group\n\n## 2020-01-25\n* The installer lib file is now deleted after sourcing it\n* Configure `npm` to enforce engine versions in `package.json`\n\n## 2020-01-13\n* The `shutdown` command is no longer limited to `-h now`\n* (bluefox) The following services are now started before ioBroker if possible:\n    * Influx DB\n    * MySQL Server\n    * Maria DB\n\n## 2019-11-29\n* Add user to `video` group (Linux)\n\n## 2019-11-26\n* (ADOE) Extracted many shared Installer/Fixer functions into a common library script\n\n## 2019-11-10\n* FreeBSD should now finally be supported correctly\n\n## 2019-10-21\n* (ADOE) Large refactoring:\n    * moved some functions to fit order in INSTALLER\n    * refactored 3 repeated execution blocks into function \"add2sudoers()\"\n    * introduced var $SUDOX as shortcut for \"if $IS_ROOT... then ... else ... fi\"\n    * refactored detection of HOST_PLATFORM into function get_platform_params()\n    * extended function \"get_platform_params()\": now delivers vars: HOST_PLATFORM, INSTALL_CMD, IOB_DIR, IOB_USER\n    * changed \"brew\" and \"pkg\" to \"$INSTALL_CMD\"\n    * refactored \"Enable colored output\" into function \"enable_colored_output()\"\n    * refactored \"Determine the platform...\" to function  \"install_necessary_packages()\"\n    * calling \"install_package()\" instead of \"install_package_*\"\n\n## 2019-10-19\n* Install `python-dev` to fix npm error: `ImportError: No module named compiler.ast`\n\n## 2019-10-18\n* Emergency fix to last change: escape `$` in `$(pwd)`\n\n## 2019-10-13\n* Always run `npm` as iobroker when inside installation dir\n\n## 2019-09-30\n* Allow passwordless sudo for `mysqldump`\n* Allow passwordless sudo for `ldconfig`\n\n## 2019-09-25\n* Disable any warnings related to `npm audit fix`\n\n## 2019-09-16\n* Support of CentOS and AWS AMI\n\n## 2019-07-21\n* suppress warnings during npm install\n\n## 2019-07-17\n* Fix for Debian 10: Add `/sbin` and similar directories to `PATH` at the start of the script\n\n## 2019-07-03\n* Include `PATH` environment variable in OSX startup script\n\n## 2019-06-29\n* Add install fixer as iobroker shortcut via \"iobroker fix\"\n* Autodetect `bash` path to fix `command not found` on FreeBSD\n\n## 2019-05-14\n* (Linux) Add iobroker user to the `audio` group\n\n## 2019-04-04\n* Docker: Auto-detect if the container has `CAP_NET_ADMIN` and give it to `node` if possible\n\n## 2019-03-15\n* Add `-H` flag to `sudo -u iobroker` to fix EACCES errors when using the `iobroker` commands to install stuff.\n\n## 2019-03-10\n* Don't set CAP_NET_ADMIN in Docker\n* Fixed the group add command in FreeBSD\n\n## 2019-03-06\n* Fixed the setcap command so it works in Docker\n* Fixed another typo in FreeBSD installation routine\n\n## 2019-03-05\n* Fixed typo in FreeBSD installation routine\n\n## 2019-03-04\n* Also set the correct ACLs when running the script as root\n\n## 2019-03-03\n* Allow the commands needed by RPI2\n\n## 2019-03-01\n* Add redis as a dependency to the `systemd` unit and `init.d` script to avoid deadlocks on shutdown\n* Removed limitation for number of arguments for iobroker\n\n## 2019-02-25\n* Fix setcap and include all in one command\n\n## 2019-02-23\n* Give nodejs access to raw devices like ble\n\n## 2019-02-21\n* Brings existing installations up to par with installer version 2019-02-15\n"
        },
        {
          "name": "CHANGELOG_INSTALLER_LINUX.md",
          "type": "blob",
          "size": 9.349609375,
          "content": "# Changelog for Linux-Installer-Script\n\n## 2024-10-22\n* Allow iob start/stop/restart also as root but log information\n* Also install passwd and polkitd packages because some lxc systems might miss it\n\n### 2024-10-19\n* Added 'distro-info' package to prerequisites list\n\n### 2024-10-04\n* Enhance root check and messaging\n* root/sudo locked out for systemd based installations\n* --allow-root Option enabled (Just for a transition time)\n* adds \"nmcli\" to allowed sudo commands\n\n### 2024-06-20\n* Install nodesource rpm package via yum\n\n### 2024-05-24\n* Install Node.js 20 by default for installer\n\n### 2024-01-04\n* Fix package installation issues on Debian\n\n### 2023-12-30\n* Fix Nodejs Update script call\n* Fixes in Nodejs installation\n* Fixes IP display after installation\n\n### 2023-12-29\n* Make sure installation also proceed on new Ubuntu versions when package installations require service restarts\n\n### 2023-10-13\n* Allow to define Node.js version as parameter for \"iob nodejs-update\" command\n* fix package installation error for gcc \n\n## 2023-10-12\n* Fix how the Node.js update script is called\n\n## 2023-10-10\n* IMPORTANT: Node.js v16+ is required at least for installation\n* Update node.js installation after nodesource repo changes and update node Node.js 18\n* Add command \"iob nodejs-update\" to update Node.js to latest recommended version (or any when major given as parameter)\n\n## 2023-09-13\n* Adjust minimum Node.js version to 16.13 for new installations which match to the minimum version of js-controller 5.0.x\n\n## 2023-04-16\n* Install Node.js 18.x by default if no Node.js is installed\n* Replace which commands with type\n\n## 2022-12-22\n* Adjustments to run diagnostic script differently\n\n## 2022-12-09\n* Adjust minimum Node.js version to 12.13 for new installations which match to the minimum version of js-controller 4.0.x\n* Add condition for checking if installer runs in Docker environment\n* Adjust Docker detection\n* Add Diag script and \"iob diag\" command\n\n## 2022-06-03\n* Remove python-dev from installed debian packages again to prevent installing python2 on some distributions\n\n## 2022-02-13\n* Delay restarting js-controller after a crash to avoid locked DB files\n\n## 2022-02-10\n* Prevent npm from showing npm update information\n\n## 2021-12-27\n* Install `cmake` on linux\n\n## 2021-11-18\n* Install Node.js 14.x by default\n\n## 2021-08-05\n* Expand Docker detection in setup to make it work during Docker build process in GitHub Actions \n\n## 2021-06-18\n* Remove info adapter from new installations by default\n\n## 2021-04-07\n* Install backitup Adapter on new installations by default\n\n## 2021-01-23\n* (Linux) fix CLI completions\n* (Linux) revert \"ignore which aliases\"\n\n## 2021-01-20\n* (Linux) enable auto-completion for iobroker commands\n* (Linux) ignore which aliases\n* (Linux) updated native packages so canvas can be built by default\n* (macOS) disabled file permission check on OSX\n* fixed cirrus tests\n* added support of npm7\n\n## 2020-12-07\n* (FreeBSD) Fixed installation for FreeBSD by using `/usr/bin/env` to detect path for `bash` automatically and do not enforce usage of python 2.7 which is EOL\n* (Linux) Use `-y` argument for `yum`\n\n## 2020-06-19 \n* (Linux) Updated Recommended Node.JS and NPM Version to 12.x LTS and improved CheckVersions Output for the user\n\n## 2020-06-12\n* (Linux) Added net-tools to fix error #277 \"ifconfig: command not found\" \n* (Linux) correctly parse string arguments inside quotes\n\n## 2020-04-12\n* (Linux) Avoid entering the sudo password for iobroker CLI\n\n## 2020-01-30\n* (Linux) Add iobroker user to the `video` group\n\n## 2020-01-25\n* The installer lib file is now deleted after sourcing it\n* Configure `npm` to enforce engine versions in `package.json`\n\n## 2020-01-13\n* The `shutdown` command is no longer limited to `-h now`\n* The following services are now started before ioBroker if possible:\n    * Influx DB\n    * MySQL Server\n    * Maria DB\n\n## 2019-11-29\n* Add user to `video` group (Linux)\n\n## 2019-11-26\n* (ADOE) Extracted many shared Installer/Fixer functions into a common library script\n\n## 2019-11-03\n* FreeBSD should now finally be supported correctly\n\n## 2019-10-21\n* (ADOE) Large refactoring:\n    * refactored 3 repeated execution blocks into function \"add2sudoers()\"\n    * introduced var $SUDOX as shortcut for \"if $IS_ROOT... then ... else ... fi\"\n    * refactored detection of HOST_PLATFORM into function get_platform_params()\n    * extended function \"get_platform_params()\": now delivers vars: HOST_PLATFORM, INSTALL_CMD, IOB_DIR, IOB_USER\n    * changed \"brew\" and \"pkg\" to \"$INSTALL_CMD\"\n    * refactored \"Enable colored output\" into function \"enable_colored_output()\"\n    * \"Install Node.js\" and \"Check if npm is installed\" were existing twice. Deleted one.\n    * refactored \"Determine the platform...\" to function  \"install_necessary_packages()\"\n    * calling \"install_package()\" instead of \"install_package_*\"\n    * refactored \"Detect IP address\" tu function \"detect_ip_address()\"\n* Added option to choose another npm registry.  \nUse `MIRROR=taobao curl -sL https://iobroker.net/install.sh | bash -` to install ioBroker using the taobao registry\n\n## 2019-10-19\n* Install `python-dev` to fix npm error: `ImportError: No module named compiler.ast`\n\n## 2019-10-18\n* Emergency fix to last change: escape `$` in `$(pwd)`\n\n## 2019-10-13\n* Always run `npm` as iobroker when inside installation dir\n\n## 2019-09-30\n* Allow passwordless sudo for `mysqldump`\n* Allow passwordless sudo for `ldconfig`\n\n## 2019-09-25\n* Disable any warnings related to `npm audit fix`\n\n## 2019-09-16\n* Install Node.js if it is not installed\n* Support of CentOS and AWS AMI\n\n## 2019-07-21\n* suppress warnings during npm install\n\n## 2019-07-17\n* Fix for Debian 10: Add `/sbin` and similar directories to `PATH` at the start of the script\n\n## 2019-07-03\n* Include `PATH` environment variable in OSX startup script\n\n## 2019-06-29\n* Add install fixer as iobroker shortcut via \"iobroker fix\"\n* Autodetect `bash` path to fix `command not found` on FreeBSD\n\n## 2019-05-14\n* (Linux) Add iobroker user to the `audio` group\n\n## 2019-04-04\n* Docker: Auto-detect if the container has `CAP_NET_ADMIN` and give it to `node` if possible\n\n## 2019-03-15\n* Add `-H` flag to `sudo -u iobroker` to fix EACCES errors when using the `iobroker` commands to install stuff.\n\n## 2019-03-10\n* Don't set CAP_NET_ADMIN in Docker\n* Fixed the group add command in FreeBSD\n\n## 2019-03-06\n* Fixed the setcap command so it works in Docker\n* Fixed another typo in FreeBSD installation routine\n\n## 2019-03-05\n* Fixed typo in FreeBSD installation routine\n\n## 2019-03-04\n* Also set the correct ACLs when running the script as root\n\n## 2019-03-03\n* Allow the commands needed by RPI2\n\n## 2019-03-01\n* Add redis as a dependency to the `systemd` unit and `init.d` script to avoid deadlocks on shutdown\n* Removed limitation for number of arguments for iobroker\n\n## 2019-02-25\n* fix setcap and include all in one command\n\n## 2019-02-23\n* Give nodejs access to raw devices like ble\n\n## 2019-02-15\n* (Linux) Add iobroker user to the redis group\n\n## 2019-02-03\n* (Linux) Add iobroker user to the i2c group\n\n## 2019-01-30\n* (Linux) Give NodeJS access to privileged ports (<1024 and Bluetooth)\n* (MacOS) Add package installing support (brew) and autostart support for \n\n## 2019-01-25\n* (FreeBSD) Added added a procedure to handle the freebsd package installation (there is no apt on BSD). `install_package_freebsd()`\n* (FreeBSD) Added a rough list of packages for iobroker to run on FreeBSD (subject to further improvement).\n* (FreeBSD) Added config patches for the zero conf daemon processes, add them to rc startup and start them.\n\n## 2019-01-23\n* Revert the `KillMode` change\n* Redirect `iobroker {start,stop,restart} adaptername` to `node` when using `systemd`.  \n**Note:** If you cannot start/stop adapters using the command line, you have to edit the iobroker binary:\n  ```\n  sudo nano $(which iob)\n  ```\n  and change\n  ```\n  if [ \"$1\" = \"start\" ] || [ \"$1\" = \"stop\" ] || [ \"$1\" = \"restart\" ]; then\n  ```\n  to\n  ```\n  if (( $# == 1 )) && ([ \"$1\" = \"start\" ] || [ \"$1\" = \"stop\" ] || [ \"$1\" = \"restart\" ]); then\n  ```\n  Then exit and save.\n\n\n## 2019-01-22\n* Use `KillMode=process` in `systemd` to prevent detached processes from being killed aswell\n\n## 2019-01-21 (fixes #106, #107)\n* Move temp_sudo_file instead of copying\n* Add current user to iobroker group\n\n## 2019-01-20 (see #99)\n* User creation and specifying which commands may be executed as sudo without password\n* Creation of the startup files for /etc/init.d, systemd (Linux/OSX) and rc.d (FreeBSD), including detection of the node executable on startup\n* Creation of the executables iob and iobroker\n* Automated installation of commonly used packages\n* More logs into INSTALLER_INFO.txt\n* Automatic IP address detection for the final message\n* Detection if the installer script is being run as a result of npm install or some other command. _This should fix failures during execution of npm rebuild._\n* Run all iobroker commands as the iobroker user if possible\n* Fix iobroker start/stop/restart/status when systemd is used\n\n**Note:** Since so much is now being done in the installer script, manual installations on Linux/OSX/FreeBSD using `npm` are forbidden since `v2.0.0`, which was released on 2019-01-21.\n\n\n## 2019-01-02 (and earlier)\n* this version introducted writing INSTALLER_INFO.txt into the ioBroker directory with installation details used later on for support reasons\n* initial versions of the script and added several stuff, too much to describe here. This is used as baseline for the shellscript\n\n"
        },
        {
          "name": "CHANGELOG_NODE_UPDATER.md",
          "type": "blob",
          "size": 0.50390625,
          "content": "# Changelog for Node.js Updater Script\n\n## 2024-10-10\n* Fix buster / Debian 10 detection\n\n## 2024-09-29\n* Fixed buster&nodejs18 detection\n\n## 2024-06-20\n* Prevent nodejs-update on Buster, except installing nodejs@18\n* Added removal of dfsg-nodejs version\n* Suppressed some error messages\n\n## 2024-05-23\n* Added nodejs20 as the default version\n\n## 2023-10-13\n* Also allow to run as root but display informative message\n\n## 2023-10-10\n* Initial release with new Nodesource script and Node.js 18 as recommended version\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.109375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2014-2024 bluefox <dogafox@gmail.com>,\nCopyright (c) 2014      hobbyquaker\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.0224609375,
          "content": "![Logo](img/logos/ioBroker_Logo_Long_Vector.svg)\n# ioBroker (windows installer)\n\n[![NPM version](https://img.shields.io/npm/v/iobroker.svg)](https://www.npmjs.com/package/iobroker)\n[![Downloads](https://img.shields.io/npm/dm/iobroker.svg)](https://www.npmjs.com/package/iobroker)\n\n[![NPM](https://nodei.co/npm/iobroker.png?downloads=true)](https://nodei.co/npm/iobroker/)\n\n*Automate your life!*\n\nTo install on Linux, just run: `npx @iobroker/install`\n\nTo install on Windows: `mkdir C:\\iobroker && cd C:\\iobroker && npx @iobroker/install` or use [installer](https://github.com/ioBroker/ioBroker.build)\n\nSee [ioBroker documentation](https://www.iobroker.net/#en/documentation) for more information\n\n* [ioBroker website](https://www.iobroker.net)\n* [Forum](https://forum.iobroker.net)\n* [Requests for adapters](https://github.com/ioBroker/AdapterRequests/issues)\n\nioBroker is an integration platform for the [Internet of Things](https://en.wikipedia.org/wiki/Internet_of_Things), focused on Building Automation, Smart Metering, Ambient Assisted Living, Process Automation, Visualization and Data Logging.\n\n## Concept\n\nioBroker is not just an application, it's more of a concept and a database schema.\nIt offers a very easy way for systems to interoperate. \nioBroker defines some common rules for a pair of databases used to exchange data and publish events between different systems.\n\n![architecture](img/architecture.png)\n\n### Databases\n\nioBroker uses \"in memory\" database to hold the data and saves it on disk with reasonable intervals. \nThere are two types of storage:\n- objects (meta/configuration information)\n- states (values)\n\nObjects and states can be stored in \"in memory\" or in Redis.\n\n[Redis](https://redis.io/) is an in-memory key-value data store and also a message broker with publish/subscribe pattern.\n\nIt's used to maintain and publish all states of connected systems.\n\n### Adapters\n\nSystems are attached to ioBrokers databases via so-called adapters, technically processes running anywhere\nin the network and connecting all kinds of systems to ioBrokers databases. \nA connection to ioBrokers databases can be implemented in nearly any programming language on nearly any platform, \nand an adapter can run on any host that is able to reach the databases via ip networking.\n\nSee the actual list of adapters on [iobroker.net](https://www.iobroker.net/#en/adapters)\n\n### Security\n\nioBroker is designed to be accessed by trusted adapters inside trusted networks. \nThis means that usually it is not a good idea to expose the ioBroker databases, \nadapters or any smart home devices directly to the internet or, in general, \nto an environment where untrusted clients can directly access these network services. \nAdapters that offer services supposed to be exposed to the internet should be handled with care. \nYou should always activate **HTTPS** and use valid certificates for web, admin if open it for internet or \nfor example, use it with additional security measures like VPN, VLAN and reverse proxies.\n\n## Getting Started\n### Operating System and Hardware\n[ioBroker.js-controller](https://github.com/iobroker/ioBroker.js-controller/) should run on any hardware \nand OS that runs [Node.js](https://nodejs.org/) (ARM, x86, Windows, Linux, OSX).\n\nioBroker spawns a new Node.js process for every adapter instance, so RAM becomes a limiting factor. \nA single adapter's memory fingerprint is roundabout 10 to 60 MB.\n\n### Installation and first steps\n* [ioBroker Download](https://www.iobroker.net/#en/download)\n\n### Community support\n* Get help in the [ioBroker Forums](https://forum.iobroker.net) (english, german and russian languages)\n\n## Logos and pictures\n\n**All logos are protected by copyright and may not be used without permission.**\n\nPlease request permission via info@iobroker.net\n\n[Logos](https://github.com/ioBroker/ioBroker/tree/master/img)\n\n## License\n\nThis module is distributor under the MIT License (MIT). \n**Please notice that other ioBroker adapters can have different licenses.**\n\nThe MIT License (MIT)\n\nCopyright (c) 2014-2024 bluefox <dogafox@gmail.com>,\nCopyright (c) 2014      hobbyquaker\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "diag.sh",
          "type": "blob",
          "size": 39.2177734375,
          "content": "#!/bin/bash\n# iobroker diagnostics\n# written to help getting information about the environment the ioBroker installation is running in\nDOCKER=/opt/scripts/.docker_config/.thisisdocker\n#if [[ -f \"/opt/scripts/.docker_config/.thisisdocker\" ]]\nif [ \"$(id -u)\" = 0 ] && [ ! -f \"$DOCKER\" ];\n        then\n                echo -e \"You should not be root on your system!\\nBetter use your standard user!\\n\\n\";\n                sleep 15;\nfi;\nclear;\nSKRPTLANG=$1;\nif [[ \"$SKRPTLANG\" = \"--de\" ]]; then\n                echo \"*** iog diag startet, bitte etwas warten ***\"\n        else\n                echo \"*** iob diag is starting up, please wait ***\";\nfi;\n\nif ! [ -x \"$(command -v distro-info)\" ]; then\n        if [[ \"$SKRPTLANG\" == \"--de\" ]]; then\n                if [ -x \"$(command -v apt-get)\" ]; then\n                echo \"iob diag muss aktualisiert werden. Bitte dazu zunächst 'iobroker fix' ausführen.\";\n                else echo \"iob diag muss aktualisiert werden. Bitte das Paket 'distro-info' nachinstallieren.\";\n                exit 1;\n                fi;\n        else\n                if [ -x \"$(command -v apt-get)\" ]; then\n                echo \"iob diag needs to be updated. Please execute 'iobroker fix' first.\";\n\n                else echo \"iob diag needs to be updated. Please manually install package 'distro-info'\";\n                exit 1;\n                fi;\n        fi;\nfi;\n\n# VARIABLES\nexport LC_ALL=C;\nSKRIPTV=\"2024-10-19\";      #version of this script\n#NODE_MAJOR=20           this is the recommended major nodejs version for ioBroker, please adjust accordingly if the recommendation changes\n\nHOST=$(uname -n);\nID_LIKE=$(awk -F= '$1==\"ID_LIKE\" { print $2 ;}' /etc/os-release | xargs);\nNODERECOM=$(iobroker state getValue system.host.\"$HOST\".versions.nodeNewestNext);  #recommended node version\nNPMRECOM=$(iobroker state getValue system.host.\"$HOST\".versions.npmNewestNext);    #recommended npm version\n#NODEUSED=$(iobroker state getValue system.host.\"$HOST\".versions.nodeCurrent);      #current node version in use\n#NPMUSED=$(iobroker state getValue system.host.\"$HOST\".versions.npmCurrent);        #current npm version in use\nXORGTEST=0;      #test for GUI\nAPT=0;\nINSTENV=0;\nINSTENV2=0;\nSYSTDDVIRT=\"\";\nNODENOTCORR=0;\nIOBLISTINST=$(iobroker list instances);\nNPMLS=$(cd /opt/iobroker && npm ls -a);\n\n\n#Debian and Ubuntu releases and their status\nEOLDEB=$(debian-distro-info --unsupported);\nEOLUBU=$(ubuntu-distro-info --unsupported);\nDEBSTABLE=$(debian-distro-info --stable);\nUBULTS=$(ubuntu-distro-info --lts);\nUBUSUP=$(ubuntu-distro-info --supported);\nTESTING=$(debian-distro-info --testing && ubuntu-distro-info --devel 2>/dev/null);\nOLDSTABLE=$(debian-distro-info --oldstable)\nCODENAME=$(lsb_release -sc);\nUNKNOWNRELEASE=1\n\nclear;\nif [[ \"$SKRPTLANG\" == \"--de\" ]]; then\necho \"\";\necho -e \"\\033[34;107m*** ioBroker Diagnose ***\\033[0m\";\necho \"\";\necho \"Das Fenster des Terminalprogramms (puTTY) bitte so groß wie möglich ziehen oder den Vollbildmodus verwenden.\";\necho \"\";\necho \"Die nachfolgenden Prüfungen liefern Hinweise zu etwaigen Fehlern, bitte im Forum hochladen:\";\necho \"\";\necho \"https://forum.iobroker.net\";\necho \"\";\necho \"Bitte die vollständige Ausgabe, einschließlich der \\`\\`\\` Zeichen am Anfang und am Ende markieren und kopieren.\";\necho \"Es hilft beim helfen!\"\necho \"\";\n     # read -p \"Press <Enter> to continue\";\necho \"Bitte eine Taste drücken\";\nread -r -n 1 -s\n        clear;\necho \"\";\nelse\necho \"\";\necho -e \"\\033[34;107m*** ioBroker Diagnosis ***\\033[0m\";\necho \"\";\necho \"Please stretch the window of your terminal programm (puTTY) as wide as possible or switch to full screen\";\necho \"\";\necho \"The following checks may give hints to potential malconfigurations or errors, please post them in our forum:\";\necho \"\";\necho \"https://forum.iobroker.net\";\necho \"\";\necho \"Just copy and paste the Summary Page, including the \\`\\`\\` characters at start and end.\";\necho \"It helps us to help you!\"\necho \"\";\n     # read -p \"Press <Enter> to continue\";\necho \"Press any key to continue\";\nread -r -n 1 -s\n        clear;\necho \"\";\nfi;\n\nif [[ \"$SKRPTLANG\" == \"--de\" ]]; then\necho -e \"\\033[33m========== Langfassung ab hier markieren und kopieren ===========\\033[0m\";\necho \"\";\necho \"\\`\\`\\`bash\";\necho \"Skript v.$SKRIPTV\"\necho \"\";\necho -e \"\\033[34;107m*** GRUNDSYSTEM ***\\033[0m\";\nelse\necho -e \"\\033[33m========== Start marking the full check here ===========\\033[0m\";\necho \"\";\necho \"\\`\\`\\`bash\";\necho \"Script v.$SKRIPTV\"\necho \"\";\necho -e \"\\033[34;107m*** BASE SYSTEM ***\\033[0m\";\nfi;\n\nif [ -f \"$DOCKER\" ]; then\necho -e \"Hardware Vendor : $(cat /sys/devices/virtual/dmi/id/sys_vendor)\";\necho -e \"Kernel          : $(uname -m)\";\necho -e \"Userland        : $(getconf LONG_BIT) bit\";\necho -e \"Docker          : $(cat /opt/scripts/.docker_config/.thisisdocker)\"\nelse\n        hostnamectl | grep -v 'Machine\\|Boot';\n        echo \"OS is similar to: $ID_LIKE\"\n        echo \"\";\n        grep -i model /proc/cpuinfo | tail -1;\n        echo -e \"Docker          : false\";\nfi;\n\nSYSTDDVIRT=$(systemd-detect-virt 2>/dev/null)\nif [ \"$SYSTDDVIRT\" != \"\" ]; then\n    echo -e \"Virtualization  : $(systemd-detect-virt)\"\nelse\n    echo \"Virtualization  : Docker\"\nfi;\necho -e \"Kernel          : $(uname -m)\";\necho -e \"Userland        : $(getconf LONG_BIT) bit\";\necho \"\";\necho \"Systemuptime and Load:\";\n        uptime;\necho \"CPU threads: $(grep -c processor /proc/cpuinfo)\"\necho \"\";\necho \"\";\n\nif [[ \"$SKRPTLANG\" == \"--de\" ]]; then\n\necho -e \"\\033[34;107m*** LEBENSZYKLUS STATUS ***\\033[0m\";\n\nfor RELEASE in $EOLDEB; do\n    if [ \"$RELEASE\" = \"$CODENAME\" ]; then\n        RELEASESTATUS=\"\\e[31mDas Debian Release '$CODENAME' hat sein Lebensende erreicht und muss JETZT auf die aktuelle stabile Veröffentlichung '$DEBSTABLE' gebracht werden!\\e[0m\";\n        UNKNOWNRELEASE=0;\n    fi;\ndone;\n\nfor RELEASE in $EOLUBU; do\n    if [ \"$RELEASE\" == \"$CODENAME\" ]; then\n        RELEASESTATUS=\"\\e[31mDas Ubuntu Release '$CODENAME' hat sein Lebensende erreicht und muss JETZT auf die aktuelle Version '$UBULTS' mit Langzeitunterstützung gebracht werden.\\e[0m\";\n        UNKNOWNRELEASE=0;\n    fi;\ndone;\n\nfor RELEASE in $DEBSTABLE; do\n    if [ \"$RELEASE\" == \"$CODENAME\" ]; then\n        RELEASESTATUS=\"\\e[32mDas Betriebssystem ist das aktuelle, stabile Debian '$DEBSTABLE'!\\e[0m\";\n        UNKNOWNRELEASE=0;\n    fi;\ndone;\n\nfor RELEASE in $UBULTS; do\n    if [ \"$RELEASE\" == \"$CODENAME\" ] ; then\n        RELEASESTATUS=\"\\e[32mDas Betriebssystem ist die aktuelle Ubuntu LTS Version '$UBULTS'!\\e[0m\";\n        UNKNOWNRELEASE=0;\n    fi;\ndone;\n\nfor RELEASE in $UBUSUP; do\n    if [ \"$RELEASE\" == \"$CODENAME\" ] && [ \"$RELEASE\" != \"$UBULTS\" ]; then\n        RELEASESTATUS=\"\\e[1;33mDie Unterstützung für das Betriebssystem mit dem Codenamen '$CODENAME' läuft aus. Es sollte in nächster Zeit auf die aktuelle Version '$UBULTS' mit Langzeitunterstützung gebracht werden.\\e[0m\";\n        UNKNOWNRELEASE=0;\n    fi;\ndone;\n\nfor RELEASE in $TESTING; do\n    if [ \"$RELEASE\" == \"$CODENAME\" ]; then\n        RELEASESTATUS=\"\\e[1;33mDas Betriebssystem mit dem Codenamen '$CODENAME' ist eine Testversion! Es sollte nur zu Testzwecken eingesetzt werden!\\e[0m\";\n        UNKNOWNRELEASE=0;\n    fi;\ndone;\n\nfor RELEASE in $OLDSTABLE; do\n    if [ \"$RELEASE\" == \"$CODENAME\" ]; then\n        RELEASESTATUS=\"\\e[1;33mDebian '$OLDSTABLE' ist eine veraltete Version. Es sollte in nächster Zeit auf die aktuelle stabile Version '$DEBSTABLE' gebracht werden!\\e[0m\";\n        UNKNOWNRELEASE=0;\n    fi;\ndone;\n\nif [ $UNKNOWNRELEASE -eq 1 ]; then\n    RELEASESTATUS=\"Das Betriebssystem mit dem Codenamen '$CODENAME' ist unbekannt. Bitte den Status der Unterstützung eigenständig prüfen.\"\nfi;\n\necho -e \"$RELEASESTATUS\";\n\nelse\necho -e \"\\033[34;107m*** LIFE CYCLE STATUS ***\\033[0m\";\n\nfor RELEASE in $EOLDEB; do\n    if [ \"$RELEASE\" = \"$CODENAME\" ]; then\n        RELEASESTATUS=\"\\e[31mDebian Release codenamed '$CODENAME' reached its END OF LIFE and needs to be updated to the latest stable release '$DEBSTABLE' NOW!\\e[0m\";\n        UNKNOWNRELEASE=0;\n    fi;\ndone;\n\nfor RELEASE in $EOLUBU; do\n    if [ \"$RELEASE\" == \"$CODENAME\" ]; then\n        RELEASESTATUS=\"\\e[31mUbuntu Release codenamed '$CODENAME' reached its END OF LIFE and needs to be updated to the latest LTS release '$UBULTS' NOW!\\e[0m\";\n        UNKNOWNRELEASE=0;\n    fi;\ndone;\n\nfor RELEASE in $DEBSTABLE; do\n    if [ \"$RELEASE\" == \"$CODENAME\" ]; then\n        RELEASESTATUS=\"\\e[32mOperating System is the current Debian stable version codenamed '$DEBSTABLE'!\\e[0m\";\n        UNKNOWNRELEASE=0;\n    fi;\ndone;\n\nfor RELEASE in $UBULTS; do\n    if [ \"$RELEASE\" == \"$CODENAME\" ]; then\n        RELEASESTATUS=\"\\e[32mOperating System is the current Ubuntu LTS release codenamed '$UBULTS'!\\e[0m\";\n        UNKNOWNRELEASE=0;\n    fi;\ndone;\n\nfor RELEASE in $UBUSUP; do\n    if [ \"$RELEASE\" == \"$CODENAME\" ] && [ \"$RELEASE\" != \"$UBULTS\" ]; then\n        RELEASESTATUS=\"\\e[1;33mOperating System codenamed '$CODENAME' is an aging Ubuntu release! Please upgrade to the latest LTS release '$UBULTS' in due time!\\e[0m\";\n        UNKNOWNRELEASE=0;\n    fi;\ndone;\n\nfor RELEASE in $TESTING; do\n    if [ \"$RELEASE\" == \"$CODENAME\" ]; then\n        RELEASESTATUS=\"\\e[1;33mOperating System codenamed '$CODENAME' is a testing release! Please use it only for testing purposes!\\e[0m\";\n        UNKNOWNRELEASE=0;\n    fi;\ndone;\n\nfor RELEASE in $OLDSTABLE; do\n    if [ \"$RELEASE\" == \"$CODENAME\" ]; then\n        RELEASESTATUS=\"\\e[1;33mDebian '$OLDSTABLE' is the current oldstable version. Please upgrade to the latest stable release '$DEBSTABLE' in due time!\\e[0m\";\n        UNKNOWNRELEASE=0;\n    fi;\ndone;\n\nif [ $UNKNOWNRELEASE -eq 1 ]; then\n    RELEASESTATUS=\"Unknown release codenamed '$CODENAME'. Please check yourself if the Operating System is actively maintained.\"\nfi;\n\necho -e \"$RELEASESTATUS\";\nfi;\n# RASPBERRY only\nif [[ $(type -P \"vcgencmd\" 2>/dev/null) = *\"/vcgencmd\" ]]; then\n#        echo \"Raspberry only:\";\n#        vcgencmd get_throttled 2> /dev/null;\n#        echo \"Other values than 0x0 hint to temperature/voltage problems\";\n#        vcgencmd measure_temp;\n#        vcgencmd measure_volts;\n\n#### TEST CODE  ###\n\necho \"\";\necho -e \"\\033[34;107m*** RASPBERRY THROTTLING ***\\033[0m\";\n# CODE from https://github.com/alwye/get_throttled under MIT Licence\nISSUES_MAP=( \\\n  [0]=\"Under-voltage detected\" \\\n  [1]=\"Arm frequency capped\" \\\n  [2]=\"Currently throttled\"\n  [3]=\"Soft temperature limit active\" \\\n  [16]=\"Under-voltage has occurred\" \\\n  [17]=\"Arm frequency capping has occurred\" \\\n  [18]=\"Throttling has occurred\" \\\n  [19]=\"Soft temperature limit has occurred\")\n\nHEX_BIN_MAP=( \\\n  [\"0\"]=\"0000\" \\\n  [\"1\"]=\"0001\" \\\n  [\"2\"]=\"0010\" \\\n  [\"3\"]=\"0011\" \\\n  [\"4\"]=\"0100\" \\\n  [\"5\"]=\"0101\" \\\n  [\"6\"]=\"0110\" \\\n  [\"7\"]=\"0111\" \\\n  [\"8\"]=\"1000\" \\\n  [\"9\"]=\"1001\" \\\n  [\"A\"]=\"1010\" \\\n  [\"B\"]=\"1011\" \\\n  [\"C\"]=\"1100\" \\\n  [\"D\"]=\"1101\" \\\n  [\"E\"]=\"1110\" \\\n  [\"F\"]=\"1111\" \\\n)\n\nTHROTTLED_OUTPUT=$(vcgencmd get_throttled)\nIFS='x'\nread -r -a strarr <<< \"$THROTTLED_OUTPUT\"\nTHROTTLED_CODE_HEX=${strarr[1]}\n\n# Display current issues\necho \"Current issues:\"\nCURRENT_HEX=${THROTTLED_CODE_HEX:4:1}\nCURRENT_BIN=${HEX_BIN_MAP[$CURRENT_HEX]}\nif [ \"$CURRENT_HEX\" == \"0\" ] || [ -z \"$CURRENT_HEX\" ]; then\n  echo \"No throttling issues detected.\"\nelse\n  bit_n=0\n  for (( i=${#CURRENT_BIN}-1; i>=0; i--)); do\n    if [ \"${CURRENT_BIN:$i:1}\" = \"1\" ]; then\n      echo \"~ ${ISSUES_MAP[$bit_n]}\"\n      bit_n=$((bit_n+1))\n    fi\n  done\nfi\n\necho \"\"\n\n# Display past issues\necho \"Previously detected issues:\"\nPAST_HEX=${THROTTLED_CODE_HEX:0:1}\nPAST_BIN=${HEX_BIN_MAP[$PAST_HEX]}\nif [ \"$PAST_HEX\" = \"0\" ]; then\n  echo \"No throttling issues detected.\"\nelse\n  bit_n=16\n  for (( i=${#PAST_BIN}-1; i>=0; i--)); do\n    if [ \"${PAST_BIN:$i:1}\" = \"1\" ]; then\n      echo \"~ ${ISSUES_MAP[$bit_n]}\"\n      bit_n=$((bit_n+1))\n    fi\n  done\nfi\n\nfi\n\nif [[ \"$SKRPTLANG\" = \"--de\" ]]; then\n        if [[ -f \"/var/run/reboot-required\" ]]; then\n                echo \"\";\n                echo \"Dieses System benötigt einen NEUSTART\";\n                echo \"\";\n        fi\n        else\n        if [[ -f \"/var/run/reboot-required\" ]]; then\n                echo \"\";\n                echo \"This system needs to be REBOOTED!\";\n                echo \"\";\n        fi\nfi;\n\necho \"\";\n\nif [[ \"$SKRPTLANG\" = \"--de\" ]]; then\necho -e \"\\033[34;107m*** ZEIT UND ZEITZONEN ***\\033[0m\";\n\n        if [ -f \"$DOCKER\" ]; then\n                date -u;\n                date;\n                date +\"%Z %z\";\n                cat /etc/timezone;\n        else\n                timedatectl;\n        fi;\n\n        if [[ $(ps -p 1 -o comm=) == \"systemd\" ]] && [[ $(timedatectl show) == *Etc/UTC* ]] || [[ $(timedatectl show) == *Europe/London* ]]; then\n                echo \"Die gesetzte Zeitzone ist vermutlich falsch. Bitte die Zeitzone mit den Mitteln des Betriebssystems ändern oder per 'iobroker fix' setzen.\";\n        fi;\nelse\n\n                echo -e \"\\033[34;107m*** TIME AND TIMEZONES ***\\033[0m\";\n\nif [ -f \"$DOCKER\" ]; then\n                date -u;\n                date;\n                date +\"%Z %z\";\n                cat /etc/timezone;\nelse\n                timedatectl;\nfi;\n\nif [[ $(ps -p 1 -o comm=) == \"systemd\" ]]; then\n        if [[ $(timedatectl show) == *Etc/UTC* ]] || [[ $(timedatectl show) == *Europe/London* ]]; then\n                echo \"Timezone is probably wrong. Please configure it with system admin tools or by running 'iobroker fix'\";\n        fi;\nfi;\nfi;\n\necho \"\";\nif [[ \"$SKRPTLANG\" = \"--de\" ]]; then\n                echo -e \"\\033[34;107m*** User und Gruppen ***\\033[0m\";\n                echo \"User der 'iob diag' aufgerufen hat:\";\n                whoami;\n                env | grep HOME;\n                echo \"GROUPS=$(groups)\";\n                echo \"\";\n                echo \"User der den 'js-controller' ausführt:\";\n                        if [[ $(pidof iobroker.js-controller) -gt 0 ]];\n                        then\n                        IOUSER=$(ps -o user= -p \"$(pidof iobroker.js-controller)\")\n                        echo \"$IOUSER\";\n                        sudo -H -u \"$IOUSER\" env | grep HOME;\n                        echo \"GROUPS=$(sudo -u \"$IOUSER\" groups)\"\n                        else\n                        echo \"js-controller läuft nicht\";\n                        fi;\necho \"\";\n\nif [ ! -f \"$DOCKER\" ] && [[ \"$(whoami)\" = \"root\" || \"$(whoami)\" = \"iobroker\" ]]; then\n\n# Prompt for username\necho \"Es sollte ein Standarduser angelegt werden! Dieser user kann auch mittels 'sudo' temporär root-Rechte erlangen.\"\necho \"Ein permanentes Login als root ist nicht vorgesehen.\"\necho \"Bitte den 'iobroker fix' ausführen oder manuell eine entsprechenden User anlegen.\"\n\nfi;\nelse\necho -e \"\\033[34;107m*** Users and Groups ***\\033[0m\";\n        echo \"User that called 'iob diag':\";\n        whoami;\n        env | grep HOME;\n        echo \"GROUPS=$(groups)\";\n        echo \"\";\n        echo \"User that is running 'js-controller':\";\n        if [[ $(pidof iobroker.js-controller) -gt 0 ]];\n        then\n                IOUSER=$(ps -o user= -p \"$(pidof iobroker.js-controller)\")\n                echo \"$IOUSER\";\n                sudo -H -u \"$IOUSER\" env | grep HOME;\n                echo \"GROUPS=$(sudo -u \"$IOUSER\" groups)\"\n        else\n         echo \"js-controller is not running\";\n        fi;\n\necho \"\";\n\nif [[ $(ps -p 1 -o comm=) == \"systemd\" ]] && [[ \"$(whoami)\" = \"root\" || \"$(whoami)\" = \"iobroker\" ]]; then\n\n# Prompt for username\necho \"A default user should be created! This user will be enabled to temporarily switch to root via 'sudo'!\"\necho \"A root login is not required in most Linux Distributions.\"\necho \"Run 'iobroker fix' or use the system tools to create a user.\"\n\nfi;\nfi;\necho -e \"\\033[34;107m*** DISPLAY-SERVER SETUP ***\\033[0m\";\nXORGTEST=$(pgrep -cf 'ayland|X11|wayfire')\nif [[ \"$XORGTEST\" -gt 0 ]];\n        then\n                echo -e \"Display-Server: true\"\n        else\n                echo -e \"Display-Server: false\"\nfi\necho -e \"Desktop: \\t$DESKTOP_SESSION\";\necho -e \"Terminal: \\t$XDG_SESSION_TYPE\";\nif [ -z \"$DOCKER\" ]; then\n        echo -e \"Boot Target: \\t$(systemctl get-default)\";\nfi;\n\n\n        if [[ $(ps -p 1 -o comm=) == \"systemd\" ]]; then\n                if [[ $(systemctl get-default) == \"graphical.target\" ]]; then\n                if [[ \"$SKRPTLANG\" = \"--de\" ]]; then\n                        echo -e \"\\nDas System bootet in eine graphische Oberfläche. Im Serverbetrieb wird keine GUI verwendet. Bitte das BootTarget auf 'multi-user.target' setzen oder 'iobroker fix' ausführen.\";\n                else\n                        echo -e \"\\nSystem is booting into 'graphical.target'. Usually a server is running in 'multi-user.target'. Please set BootTarget to 'multi-user.target' or run 'iobroker fix'\";\n                fi;\n                fi;\n        fi;\necho \"\";\necho -e \"\\033[34;107m*** MEMORY ***\\033[0m\";\n        free -th --mega;\necho \"\";\necho -e \"Active iob-Instances: \\t$(echo \"$IOBLISTINST\" | grep -c ^+)\";\necho \"\";\n        vmstat -S M -s | head -n 10;\n\n# RASPBERRY only - Code broken for RPi5\n# if [[ $(type -P \"vcgencmd\" 2>/dev/null) = *\"/vcgencmd\" ]]; then\n#        echo \"\";\n#        echo \"Raspberry only:\";\n#        vcgencmd mem_oom;\n#fi;\n\necho \"\";\necho -e \"\\033[34;107m*** top - Table Of Processes  ***\\033[0m\";\ntop -b -n 1 | head -n 5;\n\nif [ -f \"$DOCKER\" ]; then\necho \"\";\nelse\necho \"\";\necho -e \"\\033[34;107m*** FAILED SERVICES ***\\033[0m\";\necho \"\";\nsystemctl list-units --failed --no-pager;\necho \"\";\nfi;\n\necho \"\";\necho -e \"\\033[34;107m*** DMESG CRITICAL ERRORS ***\\033[0m\";\nCRITERROR=$(sudo dmesg --level=emerg,alert,crit -T | wc -l);\nif [[ \"$CRITERROR\" -gt 0 ]]; then\n        if [[ \"$SKRPTLANG\" = \"--de\" ]]; then\n                echo -e \"Es wurden $CRITERROR KRITISCHE FEHLER gefunden. \\nSiehe 'sudo dmesg --level=emerg,alert,crit -T' für Details\"\n        else\n                echo -e \"$CRITERROR CRITICAL ERRORS DETECTED! \\nCheck 'sudo dmesg --level=emerg,alert,crit -T' for details\";\n        fi;\nelse\n        if [[ \"$SKRPTLANG\" = \"--de\" ]]; then\n                echo \"Es wurden keine kritischen Fehler gefunden\"\n        else\n                echo \"No critical errors detected\"\n        fi;\nfi;\necho \"\";\n\necho -e \"\\033[34;107m*** FILESYSTEM ***\\033[0m\";\n        df -PTh;\necho \"\";\necho -e \"\\033[32mMessages concerning ext4 filesystem in dmesg:\\033[0m\";\nsudo dmesg -T | grep -i ext4;\necho \"\";\necho -e \"\\033[32mShow mounted filesystems:\\033[0m\";\nfindmnt --real;\necho \"\";\nif [[ -L \"/opt/iobroker/backups\" ]]; then\n  echo \"backups directory is linked to a different directory\";\n  echo \"\";\nfi\necho -e \"\\033[32mFiles in neuralgic directories:\\033[0m\";\necho \"\";\necho -e  \"\\033[32m/var:\\033[0m\";\n        sudo du -h /var/ | sort -rh | head -5;\necho -e \"\";\nif [ ! -f \"$DOCKER\" ]; then\n    journalctl --disk-usage;\nfi;\necho \"\";\necho -e \"\\033[32m/opt/iobroker/backups:\\033[0m\";\n        du -h /opt/iobroker/backups/ | sort -rh | head -5;\necho \"\";\necho -e \"\\033[32m/opt/iobroker/iobroker-data:\\033[0m\";\n        du -h /opt/iobroker/iobroker-data/ | sort -rh | head -5;\necho \"\";\necho -e \"\\033[32mThe five largest files in iobroker-data are:\\033[0m\";\n        find /opt/iobroker/iobroker-data -maxdepth 15 -type f -exec du -sh {} + | sort -rh | head -n 5;\necho \"\";\n# Detecting dev-links in /dev/serial/by-id\necho -e \"\\033[32mUSB-Devices by-id:\\033[0m\";\necho \"USB-Sticks -  Avoid direct links to /dev/tty* in your adapter setups, please always prefer the links 'by-id':\";\necho \"\";\n\nSYSZIGBEEPORT=$(find /dev/serial/by-id/ -maxdepth 1 -mindepth 1 2>/dev/null);\n\n# echo \"CODE I \";\n#\n#\n# if [[ -n \"$SYSZIGBEEPORT\" ]];\n#         then\n#                 echo \"$SYSZIGBEEPORT\";\n#         else\n#                 echo \"No Devices found 'by-id'\";\n# fi;\n#\n# readarray IOBZIGBEEPORT < <( iob list instances | grep system.adapter.zigbee | awk -F ':' '{print $4}' );\n# for i in  ${IOBZIGBEEPORT[@]}; do\n#         if [[ \"$SYSZIGBEEPORT\" == *\"$i\"* ]]\n#                 then\n#                 echo \"\";\n#                 echo \"Your zigbee COM-Port is matching 'by-id'. Very good!\"\n#                 else\n#                 echo;\n#                 echo \"HINT:\";\n#                 echo \"Your zigbee COM-Port is NOT matching 'by-id'. Please check your setting:\";\n#                 echo \"$IOBZIGBEEPORT0\";\n#         fi\n#                 done;\n#\n# echo \"\";\n# echo \"CODE II\";\nIOBZIGBEEPORT0=$(echo \"$IOBLISTINST\" | grep system.adapter.zigbee.0 | awk -F ':' '{print $4}' | cut -c 2-)\nIOBZIGBEEPORT1=$(echo \"$IOBLISTINST\" | grep system.adapter.zigbee.1 | awk -F ':' '{print $4}' | cut -c 2-)\nIOBZIGBEEPORT2=$(echo \"$IOBLISTINST\" | grep system.adapter.zigbee.2 | awk -F ':' '{print $4}' | cut -c 2-)\nIOBZIGBEEPORT3=$(echo \"$IOBLISTINST\" | grep system.adapter.zigbee.3 | awk -F ':' '{print $4}' | cut -c 2-)\n\n\nif [[ -n \"$SYSZIGBEEPORT\" ]];\n        then\n                echo \"$SYSZIGBEEPORT\";\n        else\n                echo \"No Devices found 'by-id'\";\nfi;\n\nif  [[ -n \"$IOBZIGBEEPORT0\" ]]; then\n        if [[ \"$SYSZIGBEEPORT\" == *\"$IOBZIGBEEPORT0\"* ]]\n        then\n                echo \"\";\n                echo \"Your zigbee.0 COM-Port is matching 'by-id'. Very good!\";\n        else\n                echo;\n                echo \"HINT:\";\n                echo \"Your zigbee.0 COM-Port is NOT matching 'by-id'. Please check your setting:\";\n                echo \"$IOBZIGBEEPORT0\";\n                # diff -y --left-column <(echo \"$IOBZIGBEEPORT0\") <(echo \"$SYSZIGBEEPORT\");\n        fi;\nfi;\nif  [[ -n \"$IOBZIGBEEPORT1\" ]]; then\n        if [[ \"$SYSZIGBEEPORT\" == *\"$IOBZIGBEEPORT1\"* ]]\n        then\n                echo \"\";\n                echo \"Your zigBee.1 COM-Port is matching 'by-id'. Very good!\";\n        else\n                echo;\n                echo \"HINT:\";\n                echo \"Your zigbee.1 COM-Port is NOT matching 'by-id'. Please check your setting:\";\n                echo \"$IOBZIGBEEPORT1\";\n                # diff -y --left-column <(echo \"$IOBZIGBEEPORT1\") <(echo \"$SYSZIGBEEPORT\");\n        fi;\nfi;\nif  [[ -n \"$IOBZIGBEEPORT2\" ]]; then\n        if [[ \"$SYSZIGBEEPORT\" == *\"$IOBZIGBEEPORT2\"* ]]\n        then\n                echo \"\";\n                echo \"Your zigBee.2 COM-Port is matching 'by-id'. Very good!\";\n        else\n                echo;\n                echo \"HINT:\";\n                echo \"Your zigbee.2 COM-Port is NOT matching 'by-id'. Please check your setting:\";\n                echo \"$IOBZIGBEEPORT2\";\n                # diff -y --left-column <(echo \"$IOBZIGBEEPORT2\") <(echo \"$SYSZIGBEEPORT\");\n        fi;\nfi;\nif  [[ -n \"$IOBZIGBEEPORT3\" ]]; then\n        if [[ \"$SYSZIGBEEPORT\" == *\"$IOBZIGBEEPORT3\"* ]]\n        then\n                echo \"\";\n                echo \"Your zigbee.3 COM-Port is matching 'by-id'. Very good!\";\n        else\n                echo;\n                echo \"HINT:\";\n                echo \"Your zigbee.3 COM-Port is NOT matching 'by-id'. Please check your setting:\";\n                echo \"$IOBZIGBEEPORT3\";\n                # diff -y --left-column <(echo \"$IOBZIGBEEPORT0\") <(echo \"$SYSZIGBEEPORT\");\n        fi;\nfi;\n\necho \"\";\necho -e \"\\033[34;107m*** NodeJS-Installation ***\\033[0m\";\necho \"\";\n\n# PATHAPT=$(type -P apt);\nPATHNODEJS=$(type -P nodejs);\nPATHNODE=$(type -P node);\nPATHNPM=$(type -P npm);\nPATHNPX=$(type -P npx);\nPATHCOREPACK=$(type -P corepack);\n\n\nif [[ -z \"$PATHNODEJS\" ]];\nthen\n        echo -e \"nodejs: \\t\\tN/A\";\nelse\n        echo -e \"$(type -P nodejs) \\t$(nodejs -v)\";\n        VERNODEJS=$(nodejs -v);\nfi;\n\nif [[ -z \"$PATHNODE\"  ]];\nthen\n        echo -e \"node: \\t\\tN/A\";\n\nelse\n        echo -e \"$(type -P node) \\t\\t$(node -v)\";\n        VERNODE=$(node -v);\nfi;\n\nif [[ -z \"$PATHNPM\" ]];\nthen\n        echo -e \"npm: \\t\\t\\tN/A\";\nelse\n        echo -e \"$(type -P npm) \\t\\t$(npm -v)\";\n        VERNPM=$(npm -v);\nfi;\n\nif [[ -z \"$PATHNPX\" ]];\nthen\n        echo -e \"npx: \\t\\t\\tN/A\";\n\nelse\n        echo -e \"$(type -P npx) \\t\\t$(npx -v)\";\n        VERNPX=$(npx -v);\nfi;\n\nif [[ -z \"$PATHCOREPACK\" ]];\nthen\n        echo -e \"corepack: \\tN/A\";\n\nelse\n        echo -e \"$(type -P corepack) \\t$(corepack -v)\";\n        # VERCOREPACK=$(corepack -v);\nfi;\n\n\nif\n        [[ $PATHNODEJS != \"/usr/bin/nodejs\" ]];\n        then\n                NODENOTCORR=1\n                if [[ \"$SKRPTLANG\" = \"--de\" ]]; then\n                echo -e \"\\033[0;31m*** nodejs ist NICHT korrekt installiert ***\\033[0m\";\n                else\n                echo -e \"\\033[0;31m*** nodejs is NOT correctly installed ***\\033[0m\";\n                fi;\n        elif\n        [[ $PATHNODE != \"/usr/bin/node\" ]];\n        then\n                NODENOTCORR=1\n                if [[ \"$SKRPTLANG\" = \"--de\" ]]; then\n                echo -e \"\\033[0;31m*** nodejs ist NICHT korrekt installiert ***\\033[0m\";\n                else\n                echo -e \"\\033[0;31m*** nodejs is NOT correctly installed ***\\033[0m\";\n                fi;\n        elif\n        [[ $PATHNPM != \"/usr/bin/npm\" ]];\n        then\n                NODENOTCORR=1\n                if [[ \"$SKRPTLANG\" = \"--de\" ]]; then\n                echo -e \"\\033[0;31m*** nodejs ist NICHT korrekt installiert ***\\033[0m\";\n                else\n                echo -e \"\\033[0;31m*** nodejs is NOT correctly installed ***\\033[0m\";\n                fi;\n        elif\n        [[ $PATHNPX != \"/usr/bin/npx\" ]];\n        then\n                NODENOTCORR=1\n                if [[ \"$SKRPTLANG\" = \"--de\" ]]; then\n                echo -e \"\\033[0;31m*** nodejs ist NICHT korrekt installiert ***\\033[0m\";\n                else\n                echo -e \"\\033[0;31m*** nodejs is NOT correctly installed ***\\033[0m\";\n                fi;\n        elif\n        [[ $VERNODEJS != \"$VERNODE\" ]];\n        then\n                NODENOTCORR=1\n                if [[ \"$SKRPTLANG\" = \"--de\" ]]; then\n                echo -e \"\\033[0;31m*** nodejs ist NICHT korrekt installiert ***\\033[0m\";\n                else\n                echo -e \"\\033[0;31m*** nodejs is NOT correctly installed ***\\033[0m\";\n                fi;\n        elif\n        [[ $VERNPM != \"$VERNPX\" ]];\n        then\n                NODENOTCORR=1\n                if [[ \"$SKRPTLANG\" = \"--de\" ]]; then\n                echo -e \"\\033[0;31m*** nodejs ist NICHT korrekt installiert ***\\033[0m\";\n                else\n                echo -e \"\\033[0;31m*** nodejs is NOT correctly installed ***\\033[0m\";\n                fi;\n        elif\n        [[ $PATHCOREPACK != \"/usr/bin/corepack\" ]];\n        then\n                NODENOTCORR=1\n                if [[ \"$SKRPTLANG\" = \"--de\" ]]; then\n                echo -e \"\\033[0;31m*** nodejs ist NICHT korrekt installiert ***\\033[0m\";\n                else\n                echo -e \"\\033[0;31m*** nodejs is NOT correctly installed ***\\033[0m\";\n                fi;\nfi;\n\necho \"\";\nif [ -f /usr/bin/apt-cache ];\nthen\n        apt-cache policy nodejs;\n        echo \"\";\nfi;\n\nANZNPMTMP=$(find /opt/iobroker/node_modules -type d -iname '.*-????????' ! -iname '.local-chromium' | wc -l);\necho -e \"\\033[32mTemp directories causing deletion problem:\\033[0m \"\"$ANZNPMTMP\"\"\";\nif [[ $ANZNPMTMP -gt 0 ]];\nthen\n        echo -e \"Some problems detected, please run \\e[031miob fix\\e[0m\";\nelse\n        echo \"No problems detected\";\nfi;\n\n# echo \"\";\n# echo -e \"Temp directories being cleaned up now `find /opt/iobroker/node_modules -type d -iname \".*-????????\" ! -iname \".local-chromium\" -exec rm -rf {} \\;`\";\n# find /opt/iobroker/node_modules -type d -iname \".*-????????\" ! -iname \".local-chromium\" -exec rm -rf {} \\ &> /dev/null;\n# echo -e \"\\033[32m1 - Temp directories causing npm8 problem:\\033[0m `find /opt/iobroker/node_modules -type d -iname '.*-????????' ! -iname '.local-chromium'>e;\necho \"\";\nif [[ $(echo \"$NPMLS\" | grep ERR -wc -l) -gt 0 ]];\nthen\n        echo -e \"\\033[322mErrors in npm tree:\\033[0m\";\n        echo \"$NPMLS\" | grep ERR;\n        echo \"\";\nelse\n        echo -e \"\\033[32mErrors in npm tree:\\033[0m 0\";\n        echo \"No problems detected\";\n        echo \"\";\nfi;\necho -e \"\\033[34;107m*** ioBroker-Installation ***\\033[0m\";\necho \"\";\necho -e \"\\033[32mioBroker Status\\033[0m\";\niob status;\necho -e \"\\nHosts:\";\niob list hosts;\necho \"\";\n# multihost detection - wip\n# iobroker multihost status\n# iobroker status all | grep MULTIHOSTSERVICE/enabled\necho -e \"\\033[32mCore adapters versions\\033[0m\"\necho -e \"js-controller: \\t$(iob -v)\";\necho -e \"admin: \\t\\t$(iob version admin)\";\necho -e \"javascript: \\t$(iob version javascript)\";\necho \"\";\necho -e \"nodejs modules from github: \\t$(echo \"$NPMLS\" | grep -c 'github.com')\";\necho \"$NPMLS\" | grep 'github.com';\necho \"\";\necho -e \"\\033[32mAdapter State\\033[0m\";\necho \"$IOBLISTINST\";\necho \"\";\necho -e \"\\033[32mEnabled adapters with bindings\\033[0m\";\necho \"$IOBLISTINST\" | grep enabled | grep port ;\necho \"\";\necho -e \"\\033[32mioBroker-Repositories\\033[0m\";\n        iob repo list;\necho \"\";\necho -e \"\\033[32mInstalled ioBroker-Instances\\033[0m\";\n        iob update -i;\necho \"\";\necho -e \"\\033[32mObjects and States\\033[0m\";\necho \"Please stand by - This may take a while\";\nIOBOBJECTS=$(iob list objects 2>/dev/null | wc -l);\necho -e \"Objects: \\t$IOBOBJECTS\";\nIOBSTATES=$(iob list states 2>/dev/null | wc -l);\necho -e \"States: \\t$IOBSTATES\";\necho \"\";\necho -e \"\\033[34;107m*** OS-Repositories and Updates ***\\033[0m\";\nif [ -f /usr/bin/apt-get ];\nthen\n        sudo apt-get update 1>/dev/null && sudo apt-get update\n        APT=$(apt-get upgrade -s |grep -P '^\\d+ upgraded'|cut -d\" \" -f1)\n        if [[ \"$SKRPTLANG\" = \"--de\" ]]; then\n        echo -e \"Offene Systemupdates: $APT\";\n        else\n        echo -e \"Pending Updates: $APT\";\n        fi;\nelse\n        if [[ \"$SKRPTLANG\" = \"--de\" ]]; then\n        echo \"Es wurde kein auf Debian basierendes System erkannt\";\n        else\n        echo \"No Debian-based Linux detected.\";\n        fi;\nfi;\n\n\necho \"\";\n\necho -e \"\\033[34;107m*** Listening Ports ***\\033[0m\";\n        sudo netstat -tulpen #| sed -n '1,2p;/LISTEN/p';\n# Alternativ - ss ist nicht ueberall installiert\n# sudo ss -tulwp | grep LISTEN;\necho \"\";\necho -e \"\\033[34;107m*** Log File - Last 25 Lines ***\\033[0m\";\necho \"\";\n# iobroker logs --lines 25;\ntail -n 25 /opt/iobroker/log/iobroker.current.log;\necho \"\";\necho \"\\`\\`\\`\";\necho \"\";\n if [[ \"$SKRPTLANG\" = \"--de\" ]]; then\n echo -e \"\\033[33m============ Langfassung bis hier markieren =============\\033[0m\";\necho \"\";\necho \"iob diag hat das System inspiziert.\";\necho \"\";\necho \"\";\necho \"Beliebige Taste für eine Zusammenfassung drücken\";\n else\necho -e \"\\033[33m============ Mark until here for C&P =============\\033[0m\";\necho \"\";\necho \"iob diag has finished.\";\necho \"\";\necho \"\";\necho \"Press any key for a summary\";\nfi;\n        read -r -n 1 -s\necho \"\";\n        clear;\nif [[ \"$SKRPTLANG\" = \"--de\" ]]; then\n       echo \"Zusammfassung ab hier markieren und kopieren:\";\necho \"\";\necho \"\\`\\`\\`bash\";\necho \"===================== ZUSAMMENFASSUNG =====================\";\necho -e \"\\t\\t\\tv.$SKRIPTV\"\necho \"\";\necho \"\";\nelse\necho \"Copy text starting here:\";\necho \"\";\necho \"\\`\\`\\`bash\";\necho \"======================= SUMMARY =======================\";\necho -e \"\\t\\t\\tv.$SKRIPTV\"\necho \"\";\necho \"\";\nfi;\nif [ -f \"$DOCKER\" ]; then\n        INSTENV=2\nelif [ \"$SYSTDDVIRT\" != \"none\" ]; then\n        INSTENV=1\nelse\n        INSTENV=0\nfi;\nINSTENV2=$(\nif [[ $INSTENV -eq 2 ]]; then\n        echo \"Docker\";\nelif [ $INSTENV -eq 1 ]; then\n        echo \"$SYSTDDVIRT\";\nelse\n        echo \"native\";\nfi;)\nif [ -f \"$DOCKER\" ]; then\n        grep -i model /proc/cpuinfo | tail -1;\necho -e \"Kernel          : $(uname -m)\";\necho -e \"Userland        : $(dpkg --print-architecture)\";\nif [[ -f \"$DOCKER\" ]]; then\n    echo -e \"Docker          : $(cat /opt/scripts/.docker_config/.thisisdocker)\"\nelse\n    echo -e \"Docker          : false\"\nfi;\n\nelse\nhostnamectl | grep -v 'Machine\\|Boot';\nfi;\necho \"\";\necho -e \"Installation: \\t\\t$INSTENV2\";\necho -e \"Kernel: \\t\\t$(uname -m)\";\necho -e \"Userland: \\t\\t$(getconf LONG_BIT) bit\";\nif [ -f \"$DOCKER\" ]; then\n    echo -e \"Timezone: \\t\\t$(date +\"%Z %z\")\"\nelse\n    echo -e \"Timezone: \\t\\t$(timedatectl | grep zone | cut -c28-80)\";\nfi;\necho -e \"User-ID: \\t\\t$EUID\";\necho -e \"Display-Server: \\t$(if [[ $XORGTEST -gt 0 ]]; then echo \"true\";else echo \"false\";fi)\";\nif [ -f \"$DOCKER\" ]; then\n        echo -e \"\";\nelse\n        echo -e \"Boot Target: \\t\\t$(systemctl get-default)\";\nfi;\n\necho \"\";\nif [[ \"$SKRPTLANG\" = \"--de\" ]]; then\necho -e \"Offene OS-Updates: \\t$APT\";\necho -e \"Offene iob updates: \\t$(iob update -u | grep -c 'Updatable\\|Updateable')\";\nelse\necho -e \"Pending OS-Updates: \\t$APT\";\necho -e \"Pending iob updates: \\t$(iob update -u | grep -c 'Updatable\\|Updateable')\";\nfi;\nif [[ -f \"/var/run/reboot-required\" ]]; then\n        if [[ \"$SKRPTLANG\" = \"--de\" ]]; then\n                echo -e \"\\nDas System muss JETZT neugestartet werden!\";\n                echo \"\";\n        else\n                echo -e \"\\nThis system needs to be REBOOTED NOW!\";\n                echo \"\";\n        fi;\nfi;\necho -e \"\\nNodejs-Installation:\";\nif [[ -z \"$PATHNODEJS\" ]];\nthen\n        echo -e \"nodejs: \\t\\tN/A\";\nelse\n        echo -e \"$(type -P nodejs) \\t$(nodejs -v)\";\n        VERNODEJS=$(nodejs -v);\nfi;\n\nif [[ -z \"$PATHNODE\" ]];\nthen\n        echo -e \"node: \\t\\t\\tN/A\";\n\nelse\n        echo -e \"$(type -P node) \\t\\t$(node -v)\";\n        VERNODE=$(node -v);\nfi;\n\nif [[ -z \"$PATHNPM\" ]];\nthen\n        echo -e \"npm: \\t\\t\\tN/A\";\nelse\n        echo -e \"$(type -P npm) \\t\\t$(npm -v)\";\n        VERNPM=$(npm -v);\nfi;\n\nif [[ -z \"$PATHNPX\" ]];\nthen\n        echo -e \"npx: \\t\\t\\tN/A\";\n\nelse\n        echo -e \"$(type -P npx) \\t\\t$(npx -v)\";\n        VERNPX=$(npx -v);\nfi;\n\nif [[ -z \"$PATHCOREPACK\" ]];\nthen\n        echo -e \"corepack: \\tN/A\";\n\nelse\n        echo -e \"$(type -P corepack) \\t$(corepack -v)\";\nfi;\nif [[ \"$SKRPTLANG\" = \"--de\" ]]; then\necho -e \"\\nEmpfohlene Versionen sind zurzeit nodejs \"\"$NODERECOM\"\" und npm \"\"$NPMRECOM\"\"\";\nelse\necho -e \"\\nRecommended versions are nodejs \"\"$NODERECOM\"\" and npm \"\"$NPMRECOM\"\"\";\nfi;\nif\n        [[ $PATHNODEJS != \"/usr/bin/nodejs\" ]];\n        then\n                if [[ \"$SKRPTLANG\" = \"--de\" ]]; then\n                echo -e \"\\033[0;31m*** nodejs ist NICHT korrekt installiert ***\\033[0m\";\n                echo \"Falsche Installationspfade erkannt. Dies muss korrigiert werden.\";\n                else\n                echo -e \"\\033[0;31m*** nodejs is NOT correctly installed ***\\033[0m\";\n                echo \"Wrong installation path detected. This needs to be fixed.\";\n                fi;\n        elif\n        [[ $PATHNODE != \"/usr/bin/node\" ]];\n        then\n                if [[ \"$SKRPTLANG\" = \"--de\" ]]; then\n                echo -e \"\\033[0;31m*** nodejs ist NICHT korrekt installiert ***\\033[0m\";\n                echo \"Falsche Installationspfade erkannt. Dies muss korrigiert werden.\";\n                else\n                echo -e \"\\033[0;31m*** nodejs is NOT correctly installed ***\\033[0m\";\n                echo \"Wrong installation path detected. This needs to be fixed.\";\n                fi;\n        elif\n        [[ $PATHNPM != \"/usr/bin/npm\" ]];\n        then\n                if [[ \"$SKRPTLANG\" = \"--de\" ]]; then\n                echo -e \"\\033[0;31m*** nodejs ist NICHT korrekt installiert ***\\033[0m\";\n                echo \"Falsche Installationspfade erkannt. Dies muss korrigiert werden.\";\n                else\n                echo -e \"\\033[0;31m*** nodejs is NOT correctly installed ***\\033[0m\";\n                echo \"Wrong installation path detected. This needs to be fixed.\";\n                fi;\n        elif\n        [[ $PATHNPX != \"/usr/bin/npx\" ]];\n        then\n                if [[ \"$SKRPTLANG\" = \"--de\" ]]; then\n                echo -e \"\\033[0;31m*** nodejs ist NICHT korrekt installiert ***\\033[0m\";\n                echo \"Falsche Installationspfade erkannt. Dies muss korrigiert werden.\";\n                else\n                echo -e \"\\033[0;31m*** nodejs is NOT correctly installed ***\\033[0m\";\n                echo \"Wrong installation path detected. This needs to be fixed.\";\n                fi;\n         elif\n        [[ $PATHCOREPACK != \"/usr/bin/corepack\" ]];\n        then\n                if [[ \"$SKRPTLANG\" = \"--de\" ]]; then\n                echo -e \"\\033[0;31m*** nodejs ist NICHT korrekt installiert ***\\033[0m\";\n                echo \"Falsche Installationspfade erkannt. Dies muss korrigiert werden.\";\n                else\n                echo -e \"\\033[0;31m*** nodejs is NOT correctly installed ***\\033[0m\";\n                echo \"Wrong installation path detected. This needs to be fixed.\";\n                fi;\n        elif\n        [[ $VERNODEJS != \"$VERNODE\" ]];\n        then\n                if [[ \"$SKRPTLANG\" = \"--de\" ]]; then\n                echo -e \"\\033[0;31m*** nodejs ist NICHT korrekt installiert ***\\033[0m\";\n                echo \"Die Versionen von nodejs und node stimmen nicht überein. Dies muss korrigiert werden.\";\n                else\n                echo -e \"\\033[0;31m*** nodejs is NOT correctly installed ***\\033[0m\";\n                echo \"nodejs and node versions do not match. This needs to be fixed.\";\n                fi;\n\n        elif\n        [[ $VERNPM != \"$VERNPX\" ]];\n        then\n                if [[ \"$SKRPTLANG\" = \"--de\" ]]; then\n                echo -e \"\\033[0;31m*** nodejs ist NICHT korrekt installiert ***\\033[0m\";\n                echo \"Die Versionen von npm und npx stimmen nicht überein. Dies muss korrigiert werden.\";\n                else\n                echo -e \"\\033[0;31m*** nodejs is NOT correctly installed ***\\033[0m\";\n                echo \"npm and npx versions do not match. This needs to be fixed.\";\n                fi;\n        else\n                if [[ \"$SKRPTLANG\" = \"--de\" ]]; then\n                echo \"nodeJS ist korrekt installiert\"\n                else\n                echo \"nodeJS installation is correct\";\n                fi;\nfi\nif [[ $NODENOTCORR -eq 1 ]];\nthen\n                if [[ \"$SKRPTLANG\" = \"--de\" ]]; then\n                echo \"\";\n                echo \"Bitte den Befehl\";\n                echo -e \"\\e[031miob nodejs-update\\e[0m\";\n                echo \"zur Korrektur der Installation ausführen.\"\n                else\n                echo \"\";\n                echo \"Please execute\";\n                echo -e \"\\e[031miob nodejs-update\\e[0m\";\n                echo \"to fix these errors.\"\n                fi;\nfi;\necho \"\";\n# echo -e \"Total Memory: \\t\\t`free -h | awk '/^Mem:/{print $2}'`\";\necho \"MEMORY: \";\n        free -ht --mega;\necho \"\";\necho -e \"Active iob-Instances: \\t$(echo \"$IOBLISTINST\" | grep -c ^+)\";\n        iob repo list | tail -n1;\necho \"\";\necho -e \"ioBroker Core: \\t\\tjs-controller \\t\\t$(iob -v)\";\necho -e \"\\t\\t\\tadmin \\t\\t\\t$(iob version admin)\";\necho \"\";\necho -e \"ioBroker Status: \\t$(iobroker status)\";\necho \"\";\n# iobroker status all | grep MULTIHOSTSERVICE/enabled;\necho \"Status admin and web instance:\";\necho \"$IOBLISTINST\" | grep 'admin.\\|system.adapter.web.';\necho \"\";\necho -e \"Objects: \\t\\t$IOBOBJECTS\";\necho -e \"States: \\t\\t$IOBSTATES\";\necho \"\";\necho -e \"Size of iob-Database:\";\necho \"\";\nfind /opt/iobroker/iobroker-data -maxdepth 1 -type f -name \\*objects\\* -exec du -sh {} + |sort -rh | head -n 5;\nfind /opt/iobroker/iobroker-data -maxdepth 1 -type f -name \\*states\\* -exec du -sh {} + |sort -rh | head -n 5;\necho \"\";\necho \"\";\nif [[ $ANZNPMTMP -gt 0 ]]\nthen\n        if [[ \"$SKRPTLANG\" = \"--de\" ]]; then\n        echo \"**********************************************************************\";\n        echo -e \"Probleme wurden erkannt, bitte \\e[031miob fix\\e[0m ausführen\";\n        echo \"**********************************************************************\";\n        echo \"\";\n        else\n        echo \"**********************************************************************\";\n        echo -e \"Some problems detected, please run \\e[031miob fix\\e[0m and try to have them fixed\";\n        echo \"**********************************************************************\";\n        echo \"\";\n        fi;\nfi;\nif [[ \"$CRITERROR\" -gt 0 ]]; then\n        if [[ \"$SKRPTLANG\" = \"--de\" ]]; then\n                echo -e \"Es wurden $CRITERROR KRITISCHE FEHLER gefunden. \\nSiehe 'sudo dmesg --level=emerg,alert,crit -T' für Details\"\n        else\n                echo -e \"$CRITERROR CRITICAL ERRORS DETECTED! \\nCheck 'sudo dmesg --level=emerg,alert,crit -T' for details\";\n        fi;\nfi;\necho -e \"$RELEASESTATUS\";\necho \"\";\nif [[ \"$SKRPTLANG\" = \"--de\" ]]; then\necho \"=================== ENDE DER ZUSAMMENFASSUNG ====================\";\necho -e \"\\`\\`\\`\";\necho \"\";\necho \"=== Ausgabe bis hier markieren und kopieren ===\";\nelse\necho \"=================== END OF SUMMARY ====================\";\necho -e \"\\`\\`\\`\";\necho \"\";\necho \"=== Mark text until here for copying ===\";\nfi;\nexit;\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "fix_installation.sh",
          "type": "blob",
          "size": 19.21875,
          "content": "#!/usr/bin/env bash\n\n# Increase this version number whenever you update the fixer\nFIXER_VERSION=\"2024-10-22\" # format YYYY-MM-DD\n\nexport DEBIAN_FRONTEND=noninteractive\n\ncompress_jsonl_databases() {\n    echo \"Checking for uncompressed JSONL databases... This might take a while!\"\n    echo \"\"\n\n    NPMV=$(npm -v | cut -d. -f1);\n    # depending on the npm version the npx call needs to be different\n    if [ $NPMV -lt 7 ]; then\n        (cd \"$IOB_DIR/iobroker-data\" && sudo -H -u iobroker npx @iobroker/jsonltool@latest)\n        (cd \"$IOB_DIR\")\n    else\n        (sudo -H -u iobroker npm x --yes @iobroker/jsonltool@latest \"$IOB_DIR/iobroker-data\")\n    fi;\n}\n\n# Test if this script is being run as root or not\nif [[ $EUID -eq 0 ]];\nthen IS_ROOT=true;  SUDOX=\"\"\nelse IS_ROOT=false; SUDOX=\"sudo \"; fi\nROOT_GROUP=\"root\"\nUSER_GROUP=\"$USER\"\n\n# Check for user names and create a default user if necessary\nif [[ $(ps -p 1 -o comm=) == \"systemd\" ]] && [[ \"$(whoami)\" = \"root\" || \"$(whoami)\" = \"iobroker\" ]]; then\n    # Prompt for username\n    echo \"It seems you run ioBroker as root or the iobroker user. This is not recommended.\"\n    echo \"For security reasons a default user should be created. This user will be enabled to temporarily switch to root via 'sudo'.\"\n    echo \"A root login is not required in most Linux Distributions.\"\n    echo \"Do you want to setup a user now? (y/N)\"\n    read -r -s -n 1 char;\n    if [[ \"$char\" = \"y\" ]] || [[ \"$char\" = \"Y\" ]]; then\n        read -p \"Enter the username for a new user (Not 'root' and not 'iobroker'!): \" USERNAME\n\n        # Check if the user already exists\n        if id \"$USERNAME\" &>/dev/null; then\n            echo \"User '$USERNAME' already exists. Please login as this user and restart the fixer.\"\n            exit 1;\n        else\n            # Prompt for password\n            read -s -p \"Enter the password for the new user: \" PASSWORD\n            echo\n            read -s -p \"Confirm the password for the new user: \" PASSWORD_CONFIRM\n            echo\n\n            # Check if passwords match\n            if [ \"$PASSWORD\" != \"$PASSWORD_CONFIRM\" ]; then\n                echo \"Passwords do not match. Exiting.\"\n                exit 1\n            fi\n\n            # Add a new user account with sudo access and set the password\n            echo \"Adding new user account...\";\n            $SUDOX /usr/sbin/useradd -m -s /bin/bash -G adm,dialout,sudo,audio,video,plugdev,users,iobroker \"$USERNAME\";\n            echo \"$USERNAME:$PASSWORD\" | $SUDOX /usr/sbin/chpasswd;\n            echo \"Please login with this newly created user account and restart the fixer.\";\n            exit 1;\n        fi;\n    fi;\nfi;\n\n# Check and fix boot.target on systemd\n\nif [[ $(ps -p 1 -o comm=) == \"systemd\" ]]; then\n\tif [[ $(systemctl get-default) == \"graphical.target\" ]]; then\n        echo -e \"\\nYour system is booting into 'graphical.target', which means that a user interface or desktop is available. Usually a server is running without a desktop to have more RAM available. Do you want to switch to 'multi-user.target'? (y/N)\";\n        read -r -s -n 1 char;\n\t\tif [[ \"$char\" = \"y\" ]] || [[ \"$char\" = \"Y\" ]]; then\n\t\t\t# Set up multi-user.target\n            echo \"New boot target is multi-user now! The system needs to be restarted. Please restart the fixer afterwards.\";\n\t\t\tsudo systemctl set-default multi-user.target;\n\t\tfi;\n\tfi;\nfi;\n\n# Check and fix timezone\n\nTIMEZONE=$(timedatectl show --property=Timezone --value)\nif [[ $(ps -p 1 -o comm=) == \"systemd\" ]]; then\n\n    if [[ $TIMEZONE == *Etc/UTC* ]] || [[ $TIMEZONE == *Europe/London* ]]; then\n        echo \"Timezone '$TIMEZONE' is probably wrong. Do you want to reconfigure it? (y/N)\"\n        read -r -s -n 1 char;\n        if [[ \"$char\" = \"y\" ]] || [[ \"$char\" = \"Y\" ]]; then\n            if [[ -f \"/usr/sbin/dpkg-reconfigure\" ]]; then\n                sudo dpkg-reconfigure tzdata;\n            else\n                # Setup the timezone for the server (Default value is \"Europe/Berlin\")\n                echo \"Setting up timezone\";\n                read -r -p \"Enter the timezone for the server (default is Europe/Berlin): \" TIMEZONE;\n                TIMEZONE=${TIMEZONE:-\"Europe/Berlin\"};\n                $(sudo timedatectl set-timezone \"$TIMEZONE\");\n            fi;\n            # Set up time synchronization with systemd-timesyncd\n            echo \"Setting up time synchronization with systemd-timesyncd\"\n            $(sudo systemctl enable systemd-timesyncd);\n            $(sudo systemctl start systemd-timesyncd);\n        fi;\n    fi;\nfi;\n\n# get and load the LIB => START\nLIB_NAME=\"installer_library.sh\"\nLIB_URL=\"https://raw.githubusercontent.com/ioBroker/ioBroker/master/$LIB_NAME\"\n# get and load the LIB\ncurl -sL $LIB_URL > ~/$LIB_NAME\nif test -f ~/$LIB_NAME; then source ~/$LIB_NAME; else echo \"Installer/Fixer: library not found\"; exit -2; fi\n# Delete the lib again. We have sourced it so we don't need it anymore\nrm ~/$LIB_NAME\n# get and load the LIB => END\n\n# test one function of the library\nRET=$(get_lib_version)\nif [ $? -ne 0 ]; then echo \"Installer/Fixer: library $LIB_NAME could not be loaded!\"; exit -2; fi\nif [ \"$RET\" == \"\" ]; then echo \"Installer/Fixer: library $LIB_NAME does not work.\"; exit -2; fi\necho \"Library version=$RET\"\n\n\n# Test which platform this script is being run on\nget_platform_params\nset_some_common_params\n\n# Test if ioBroker is installed\nif [ ! -d \"$IOB_DIR\" ] || [ ! -d \"$CONTROLLER_DIR\" ]; then\n\techo \"ioBroker is not installed in $IOB_DIR! Cannot fix anything...\"\n\texit 1\nfi\n\n# Test if ioBroker is running\nif pgrep \"^io(broker\\.|\\.)\" &> /dev/null ; then\n\techo \"ioBroker or some processes are still running:\"\n\tpgrep -l \"^io(broker\\.|\\.)\";\n\techo \"Please stop them first and try again!\"\n\texit 1\nfi\n\n# Create the log file if it doesn't exist\nif [ ! -f \"$INSTALLER_INFO_FILE\" ]; then\n\ttouch $INSTALLER_INFO_FILE\n\tchmod 777 $INSTALLER_INFO_FILE\nfi\necho \"Fixer version: $FIXER_VERSION\" >> $INSTALLER_INFO_FILE\necho \"Fix date $(date +%F)\" >> $INSTALLER_INFO_FILE\n\n\nif [ \"$IS_ROOT\" = true ]; then\n\tprint_bold \"Welcome to the ioBroker installation fixer!\" \"Script version: $FIXER_VERSION\"\nelse\n\tprint_bold \"Welcome to the ioBroker installation fixer!\" \"Script version: $FIXER_VERSION\" \"\" \"You might need to enter your password a couple of times.\"\nfi\n\nNUM_STEPS=5\n\n# ########################################################\nprint_step \"Installing prerequisites\" 1 \"$NUM_STEPS\"\n\n# update repos\n$SUDOX $INSTALL_CMD $INSTALL_CMD_UPD_ARGS update\n\n# Determine the platform we operate on and select the installation routine/packages accordingly\ninstall_necessary_packages\n\n# ########################################################\nprint_step \"Checking ioBroker user and directory permissions\" 2 \"$NUM_STEPS\"\nif [ \"$USER\" != \"$IOB_USER\" ]; then\n\t# Ensure the user \"iobroker\" exists and is in the correct groups\n\tif [ \"$HOST_PLATFORM\" = \"linux\" ]; then\n\t\tcreate_user_linux $IOB_USER\n\telif [ \"$HOST_PLATFORM\" = \"freebsd\" ]; then\n\t\tcreate_user_freebsd $IOB_USER\n\tfi\nfi\n\ncd $IOB_DIR || exit;\n\n# Disable any warnings related to \"npm audit fix\"\ndisable_npm_audit\n\n# Disable any information related to npm updates\ndisable_npm_updatenotifier\n\n# Enable auto-completion for ioBroker commands\nenable_cli_completions\n\n# Enforce strict version checks before installing new packages\nforce_strict_npm_version_checks\n\n# Force npm to run as iobroker when inside IOB_DIR\nif [[ \"$IS_ROOT\" != true && \"$USER\" != \"$IOB_USER\" ]]; then\n\tchange_npm_command_user\nfi\nchange_npm_command_root\n\n# Make sure that the app dir belongs to the correct user\nfix_dir_permissions\n\n# ########################################################\nprint_step \"Check and cleanup npm temporary directories\" 3 \"$NUM_STEPS\"\n\n# check for npm left over temporary directories\n$SUDOX find \"$IOB_DIR/node_modules\" -type d -iname \".*-????????\" ! -iname \".local-chromium\" -exec rm -rf {} \\; &> /dev/null\necho \"Done.\"\n\n# ########################################################\nprint_step \"Database maintenance\" 4 \"$NUM_STEPS\"\n\n# Compress the JSONL database - if needed\ncompress_jsonl_databases\n\n# ########################################################\nprint_step \"Checking autostart\" 5 \"$NUM_STEPS\"\n\n# First delete all possible remains of an old installation\nINITD_FILE=\"/etc/init.d/iobroker.sh\"\nif [ -f \"$INITD_FILE\" ]; then\n\t$SUDOX rm \"$INITD_FILE\"\nfi\n\nSYSTEMD_FILE=\"/lib/systemd/system/iobroker.service\"\nif [ -f \"$SYSTEMD_FILE\" ]; then\n\t$SUDOX rm \"$SYSTEMD_FILE\"\n\tsystemctl stop iobroker &> /dev/null\n\t$SUDOX systemctl daemon-reload\nfi\n\nRCD_FILE=\"/usr/local/etc/rc.d/iobroker\"\nif [ -f \"$RCD_FILE\" ]; then\n\t$SUDOX rm \"$RCD_FILE\"\n\tsysrc iobroker_enable-=YES\nfi\n\nPLIST_FILE_LABEL=\"org.ioBroker.LaunchAtLogin\"\nLAUNCHCTL_FILE=\"/Users/${IOB_USER}/Library/LaunchAgents/${PLIST_FILE_LABEL}.plist\"\nif [ -f \"$LAUNCHCTL_FILE\" ]; then\n\t# Enable startup and start the service\n\tlaunchctl list ${PLIST_FILE_LABEL} &> /dev/null\n\tif [ $? -eq 0 ]; then\n\t\tlaunchctl unload -w $LAUNCHCTL_FILE\n\tfi\n\trm \"$LAUNCHCTL_FILE\"\nfi\n\n# Test which init system is used:\nINITSYSTEM=\"unknown\"\nif [[ \"$HOST_PLATFORM\" = \"freebsd\" && -d \"/usr/local/etc/rc.d\" ]]; then\n\tINITSYSTEM=\"rc.d\"\n\tSERVICE_FILENAME=\"/usr/local/etc/rc.d/iobroker\"\nelif [[ $(systemctl) =~ -\\.mount ]] &> /dev/null; then\n\tINITSYSTEM=\"systemd\"\n\tSERVICE_FILENAME=\"/lib/systemd/system/iobroker.service\"\nelif [[ -f /etc/init.d/cron && ! -h /etc/init.d/cron ]]; then\n\tINITSYSTEM=\"init.d\"\n\tSERVICE_FILENAME=\"/etc/init.d/iobroker.sh\"\nelif [[ \"$HOST_PLATFORM\" = \"osx\" ]]; then\n\tINITSYSTEM=\"launchctl\"\n\tSERVICE_FILENAME=\"/Users/${IOB_USER}/Library/LaunchAgents/${PLIST_FILE_LABEL}.plist\"\nfi\nif [[ $IOB_FORCE_INITD && ${IOB_FORCE_INITD-x} ]]; then\n\tINITSYSTEM=\"init.d\"\nfi\necho \"init system: $INITSYSTEM\" >> $INSTALLER_INFO_FILE\n\n# #############################\n# Create \"iob\" and \"iobroker\" executables\n# If possible, try to always execute the iobroker CLI as the correct user\nIOB_NODE_CMDLINE=\"node\"\nif [ \"$IOB_USER\" != \"$USER\" ]; then\n\tIOB_NODE_CMDLINE=\"sudo -H -u $IOB_USER node\"\nfi\nif [ \"$INITSYSTEM\" = \"systemd\" ]; then\n\t# systemd needs a special executable that reroutes iobroker start/stop to systemctl\n\t# Make sure to only use systemd when there is exactly 1 argument\n\tIOB_EXECUTABLE=$(cat <<- EOF\n\t\t#!$BASH_CMDLINE\n\t\tif (( \\$# == 1 )) && ([ \"\\$1\" = \"start\" ] || [ \"\\$1\" = \"stop\" ] || [ \"\\$1\" = \"restart\" ]); then\n            if [ \"\\$(id -u)\" = 0 ] && [[ \"\\$*\" != *--allow-root* ]]; then\n                echo -e \"\\n***For security reasons ioBroker should not be run or administrated as root.***\\nBy default only a user that is member of \"iobroker\" group can execute ioBroker commands.\\nPlease execute 'iob fix'to create an appropriate setup!\"\n            fi;\n\t\t\tsudo systemctl \\$1 iobroker\n\t\t\texit \\$?\n\t\tfi\n\t\tif [ \"\\$(id -u)\" = 0 ] && [[ \"\\$*\" != *--allow-root* ]]; then\n\t\t\techo -e \"\\n***For security reasons ioBroker should not be run or administrated as root.***\\nBy default only a user that is member of \"iobroker\" group can execute ioBroker commands.\\nPlease read the Documentation on how to set up such a user, if not done yet.\\nOnly in very special cases you can run iobroker commands by adding the \"--allow-root\" option at the end of the command line.\\nPlease note that this option may be disabled in the future, so please change your setup accordingly now.\"\n\t\t\texit 1;\n\t\tfi;\n\t\tif [ \"\\$1\" = \"fix\" ]; then\n\t\t\tsudo -u $IOB_USER curl -sLf $FIXER_URL --output /home/$IOB_USER/.fix.sh && bash /home/$IOB_USER/.fix.sh \"\\$2\"\n\t\telif [ \"\\$1\" = \"nodejs-update\" ]; then\n\t\t\tsudo -u $IOB_USER curl -sLf $NODE_UPDATER_URL --output /home/$IOB_USER/.nodejs-update.sh && bash /home/$IOB_USER/.nodejs-update.sh \"\\$2\"\n\t\telif [ \"\\$1\" = \"diag\" ]; then\n\t\t  sudo -u $IOB_USER curl -sLf $DIAG_URL --output /home/$IOB_USER/.diag.sh && bash /home/$IOB_USER/.diag.sh \"\\$2\" | sudo -u $IOB_USER tee /home/$IOB_USER/iob_diag.log\n\t\telse\n\t\t\t$IOB_NODE_CMDLINE $CONTROLLER_DIR/iobroker.js \"\\$@\"\n\t\tfi\n\t\tEOF\n\t)\nelif [ \"$INITSYSTEM\" = \"launchctl\" ]; then\n\t# launchctl needs unload service to stop iobroker\n\tIOB_EXECUTABLE=$(cat <<- EOF\n\t\t#!$BASH_CMDLINE\n\t\tif (( \\$# == 1 )) && ([ \"\\$1\" = \"start\" ]); then\n\t\t\tlaunchctl load -w $SERVICE_FILENAME\n\t\telif (( \\$# == 1 )) && ([ \"\\$1\" = \"stop\" ]); then\n\t\t\tlaunchctl unload -w $SERVICE_FILENAME\n\t\t\t$IOB_NODE_CMDLINE $CONTROLLER_DIR/iobroker.js stop\n\t\telif [ \"\\$1\" = \"fix\" ]; then\n\t\t\tsudo -u $IOB_USER curl -sLf $FIXER_URL --output /Users/$IOB_USER/.fix.sh && bash /Users/$IOB_USER/.fix.sh \"\\$2\"\n\t\telif [ \"\\$1\" = \"nodejs-update\" ]; then\n\t\t\tsudo -u $IOB_USER curl -sLf $NODE_UPDATER_URL --output /Users/$IOB_USER/.nodejs-update.sh && bash /Users/$IOB_USER/.nodejs-update.sh \"\\$2\"\n\t\telif [ \"\\$1\" = \"diag\" ]; then\n\t\t  sudo -u $IOB_USER curl -sLf $DIAG_URL --output /Users/$IOB_USER/.diag.sh && bash /Users/$IOB_USER/.diag.sh \"\\$2\" | sudo -u $IOB_USER tee /Users/$IOB_USER/iob_diag.log\n\t\telse\n\t\t\t$IOB_NODE_CMDLINE $CONTROLLER_DIR/iobroker.js \"\\$@\"\n\t\tfi\n\t\tEOF\n\t)\nelse\n\tIOB_EXECUTABLE=$(cat <<- EOF\n\t\t#!$BASH_CMDLINE\n        if [ \"\\$1\" = \"fix\" ]; then\n\t\t\tsudo -u $IOB_USER curl -sLf $FIXER_URL --output /home/$IOB_USER/.fix.sh && bash /home/$IOB_USER/.fix.sh \"\\$2\"\n\t\telif [ \"\\$1\" = \"nodejs-update\" ]; then\n\t\t\tsudo -u $IOB_USER curl -sLf $NODE_UPDATER_URL --output /home/$IOB_USER/.nodejs-update.sh && bash /home/$IOB_USER/.nodejs-update.sh \"\\$2\"\n\t\telif [ \"\\$1\" = \"diag\" ]; then\n\t\t  sudo -u $IOB_USER curl -sLf $DIAG_URL --output /home/$IOB_USER/.diag.sh && bash /home/$IOB_USER/.diag.sh \"\\$2\" | sudo -u $IOB_USER tee /home/$IOB_USER/iob_diag.log\n\t\telse\n\t\t\t$IOB_NODE_CMDLINE $CONTROLLER_DIR/iobroker.js \"\\$@\"\n\t\tfi\n\t\tEOF\n\t)\nfi\nif [ \"$HOST_PLATFORM\" = \"linux\" ]; then\n\tIOB_BIN_PATH=/usr/bin\nelif [ \"$HOST_PLATFORM\" = \"freebsd\" ] || [ \"$HOST_PLATFORM\" = \"osx\" ]; then\n\tIOB_BIN_PATH=/usr/local/bin\nfi\n# First remove the old binaries and symlinks\n$SUDOX rm -f $IOB_DIR/iobroker\n$SUDOX rm -f $IOB_BIN_PATH/iobroker\n$SUDOX rm -f $IOB_DIR/iob\n$SUDOX rm -f $IOB_BIN_PATH/iob\n\n# Symlink the global binaries iob and iobroker\n$SUDOX ln -sfn $IOB_DIR/iobroker $IOB_BIN_PATH/iobroker\n$SUDOX ln -sfn $IOB_DIR/iobroker $IOB_BIN_PATH/iob\n# Symlink the local binary iob\n$SUDOX ln -sfn $IOB_DIR/iobroker $IOB_DIR/iob\n\n# Create executables in the ioBroker directory\nwrite_to_file \"$IOB_EXECUTABLE\" $IOB_DIR/iobroker\nmake_executable \"$IOB_DIR/iobroker\"\n\n# and give them the correct ownership\nchange_owner $IOB_USER \"$IOB_DIR/iobroker\"\nchange_owner $IOB_USER \"$IOB_DIR/iob\"\n\n# Enable autostart\nif [[ \"$INITSYSTEM\" = \"init.d\" ]]; then\n\techo \"Enabling autostart...\"\n\n\t# Write a script into init.d that automatically detects the correct node executable and runs ioBroker\n\tINITD_FILE=$(cat <<- EOF\n\t\t#!$BASH_CMDLINE\n\t\t### BEGIN INIT INFO\n\t\t# Provides:          iobroker.sh\n\t\t# Required-Start:    \\$network \\$local_fs \\$remote_fs\n\t\t# Required-Stop:     \\$network \\$local_fs \\$remote_fs\n\t\t# Should-Start:      redis-server\n\t\t# Should-Stop:       redis-server\n\t\t# Default-Start:     2 3 4 5\n\t\t# Default-Stop:      0 1 6\n\t\t# Short-Description: starts ioBroker\n\t\t# Description:       starts ioBroker\n\t\t### END INIT INFO\n\t\tPIDF=$CONTROLLER_DIR/lib/iobroker.pid\n\t\tNODECMD=\\$(which node)\n\t\tRETVAL=0\n\n\t\tstart() {\n\t\t\techo -n \"Starting ioBroker\"\n\t\t\tsu - $IOB_USER -s \"$BASH_CMDLINE\" -c \"\\$NODECMD $CONTROLLER_DIR/iobroker.js start\"\n\t\t\tRETVAL=\\$?\n\t\t}\n\n\t\tstop() {\n\t\t\techo -n \"Stopping ioBroker\"\n\t\t\tsu - $IOB_USER -s \"$BASH_CMDLINE\" -c \"\\$NODECMD $CONTROLLER_DIR/iobroker.js stop\"\n\t\t\tRETVAL=\\$?\n\t\t}\n\t\tif [ \"\\$1\" = \"start\" ]; then\n\t\t\tstart\n\t\telif [ \"\\$1\" = \"stop\" ]; then\n\t\t\tstop\n\t\telif [ \"\\$1\" = \"restart\" ]; then\n\t\t\tstop\n\t\t\tstart\n\t\telse\n\t\t\techo \"Usage: iobroker \\{start\\|stop\\|restart\\}\"\n\t\t\texit 1\n\t\tfi\n\t\texit \\$RETVAL\n\t\tEOF\n\t)\n\n\t# Create the startup file, give it the correct permissions and start ioBroker\n\twrite_to_file \"$INITD_FILE\" $SERVICE_FILENAME\n\tset_root_permissions $SERVICE_FILENAME\n\n\t# Remember what we did\n\tif [[ $IOB_FORCE_INITD && ${IOB_FORCE_INITD-x} ]]; then\n\t\techo \"Autostart: init.d (forced)\" >> \"$INSTALLER_INFO_FILE\"\n\telse\n\t\techo \"Autostart: init.d\" >> \"$INSTALLER_INFO_FILE\"\n\tfi\nelif [ \"$INITSYSTEM\" = \"systemd\" ]; then\n\techo \"Enabling autostart...\"\n\n\t# Write an systemd service that automatically detects the correct node executable and runs ioBroker\n\tSYSTEMD_FILE=$(cat <<- EOF\n\t\t[Unit]\n\t\tDescription=ioBroker Server\n\t\tDocumentation=http://iobroker.net\n\t\tAfter=network.target redis.service influxdb.service mysql-server.service mariadb-server.service\n\t\tWants=redis.service influxdb.service mysql-server.service mariadb-server.service\n\n\t\t[Service]\n\t\tType=simple\n\t\tUser=$IOB_USER\n\t\tEnvironment=\"NODE=\\$(which node)\"\n\t\tExecStart=$BASH_CMDLINE -c '\\${NODE} $CONTROLLER_DIR/controller.js'\n\t\tRestart=on-failure\n\t\tRestartSec=3s\n\n\t\t[Install]\n\t\tWantedBy=multi-user.target\n\t\tEOF\n\t)\n\n\t# Create the startup file and give it the correct permissions\n\n\twrite_to_file \"$SYSTEMD_FILE\" $SERVICE_FILENAME\n\tif [ \"$IS_ROOT\" != true ]; then\n\t\tsudo chown root:$ROOT_GROUP $SERVICE_FILENAME\n\tfi\n\t$SUDOX chmod 644 $SERVICE_FILENAME\n\t$SUDOX systemctl daemon-reload\n\t$SUDOX systemctl enable iobroker\n\n\techo \"Autostart enabled!\"\n\techo \"Autostart: systemd\" >> \"$INSTALLER_INFO_FILE\"\n\nelif [ \"$INITSYSTEM\" = \"rc.d\" ]; then\n\techo \"Enabling autostart...\"\n\n\t# Write an rc.d service that automatically detects the correct node executable and runs ioBroker\n\tRCD_FILE=$(cat <<- EOF\n\t\t#!$BASH_CMDLINE\n\t\t#\n\t\t# PROVIDE: iobroker\n\t\t# REQUIRE: DAEMON\n\t\t# KEYWORD: shutdown\n\n\t\t. /etc/rc.subr\n\n\t\tname=\"iobroker\"\n\t\trcvar=\"iobroker_enable\"\n\n\t\tload_rc_config \\$name\n\n\t\tiobroker_enable=\\${iobroker_enable-\"NO\"}\n\t\tiobroker_pidfile=\\${iobroker_pidfile-\"$CONTROLLER_DIR/lib/iobroker.pid\"}\n\n\t\tPIDF=$CONTROLLER_DIR/lib/iobroker.pid\n\n\t\tiobroker_start()\n\t\t{\n\t\t\tiobroker start\n\t\t}\n\n\t\tiobroker_stop()\n\t\t{\n\t\t\tiobroker stop\n\t\t}\n\n\t\tiobroker_status()\n\t\t{\n\t\t\tiobroker status\n\t\t}\n\n\t\tPATH=\"\\${PATH}:/usr/local/bin\"\n\t\tpidfile=\"\\${iobroker_pidfile}\"\n\n\t\tstart_cmd=iobroker_start\n\t\tstop_cmd=iobroker_stop\n\t\tstatus_cmd=iobroker_status\n\n\t\trun_rc_command \"\\$1\"\n\t\tEOF\n\t)\n\n\t# Create the startup file, give it the correct permissions and start ioBroker\n\twrite_to_file \"$RCD_FILE\" $SERVICE_FILENAME\n\tset_root_permissions $SERVICE_FILENAME\n\n\t# Enable startup\n\tsysrc iobroker_enable=YES\n\n\techo \"Autostart enabled!\"\n\techo \"Autostart: rc.d\" >> \"$INSTALLER_INFO_FILE\"\n\nelif [ \"$INITSYSTEM\" = \"launchctl\" ]; then\n\techo \"Enabling autostart...\"\n\n\tNODECMD=$(which node)\n\t# osx use launchd.plist init system.\n\tPLIST_FILE=$(cat <<- EOF\n\t\t<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\t\t<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n\t\t<plist version=\"1.0\">\n\t\t<dict>\n\t\t\t<key>Label</key>\n\t\t\t<string>${PLIST_FILE_LABEL}</string>\n\t\t\t<key>ProgramArguments</key>\n\t\t\t<array>\n\t\t\t\t<string>${NODECMD}</string>\n\t\t\t\t<string>${CONTROLLER_DIR}/iobroker.js</string>\n\t\t\t\t<string>start</string>\n\t\t\t</array>\n\t\t\t<key>KeepAlive</key>\n\t\t\t<true/>\n\t\t\t<key>RunAtLoad</key>\n\t\t\t<true/>\n\t\t\t<key>EnvironmentVariables</key>\n\t\t\t<dict>\n\t\t\t\t<key>PATH</key>\n\t\t\t\t<string>/usr/local/bin:/usr/local/sbin:/usr/bin:/bin:/usr/sbin:/sbin</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t</plist>\n\t\tEOF\n\t)\n\n\t# Create the startup file, give it the correct permissions and start ioBroker\n\techo \"$PLIST_FILE\" > $SERVICE_FILENAME\n\n\t# Enable startup and start the service\n\tlaunchctl list ${PLIST_FILE_LABEL} &> /dev/null\n\tif [ $? -eq 0 ]; then\n\t\techo \"Reloading service ${PLIST_FILE_LABEL}\"\n\t\tlaunchctl unload -w $SERVICE_FILENAME\n\tfi\n\tlaunchctl load -w $SERVICE_FILENAME\n\n\techo \"Autostart enabled!\"\n\techo \"Autostart: launchctl\" >> \"$INSTALLER_INFO_FILE\"\n\nelse\n\techo \"${yellow}Unsupported init system, cannot enable autostart!${normal}\"\n\techo \"Autostart: false\" >> \"$INSTALLER_INFO_FILE\"\nfi\n\nprint_bold \"${green}Your installation was fixed successfully${normal}\" \"Run ${green}iobroker start${normal} to start ioBroker again!\"\n"
        },
        {
          "name": "img",
          "type": "tree",
          "content": null
        },
        {
          "name": "install",
          "type": "tree",
          "content": null
        },
        {
          "name": "installer.sh",
          "type": "blob",
          "size": 18.4716796875,
          "content": "#!/usr/bin/env bash\n\n# Increase this version number whenever you update the installer\nINSTALLER_VERSION=\"2024-10-22\" # format YYYY-MM-DD\n\n# Test if this script is being run as root or not\nif [[ $EUID -eq 0 ]];\nthen IS_ROOT=true;  SUDOX=\"\"\nelse IS_ROOT=false; SUDOX=\"sudo \"; fi\nROOT_GROUP=\"root\"\nUSER_GROUP=\"$USER\"\n\nRECOMMEND_FIXER_AFTER_INSTALL=\"false\"\n# use --automated-run to skip all user prompts\nif [[ \"$*\" != *--silent* ]] || [[ $(ps -p 1 -o comm=) == \"systemd\" ]]; then\n    if [[ \"$(whoami)\" = \"root\" || \"$(whoami)\" = \"iobroker\" ]]; then\n        # Prompt for username\n        echo \"You started the installer as root or the iobroker user. This is not recommended.\"\n        echo \"For security reasons a default user should be created. Please run 'iob fix' after the installation.\"\n        RECOMMEND_FIXER_AFTER_INSTALL=\"true\"\n    fi;\n\n    # Check and fix boot.target on systemd\n\n    if [[ $(systemctl get-default) == \"graphical.target\" ]]; then\n    echo -e \"\\nYour system is booting into 'graphical.target', which means that a user interface or desktop is available. Usually a server is running without a desktop for security reasons and to save RAM. Please run 'iob fix' after the installation to change this.\";\n        RECOMMEND_FIXER_AFTER_INSTALL=\"true\"\n    fi;\n\n    # Check and fix timezone\n    TIMEZONE=$(timedatectl show --property=Timezone --value)\n    if [[ $(command -v apt-get) ]] && [[ $$TIMEZONE == *Etc/UTC* ]] || [[ $TIMEZONE == *Europe/London* ]]; then\n        echo -e \"\\nYour timezone '$TIMEZONE' is probably wrong. Please run 'iob fix' after the installation to change this.\"\n        RECOMMEND_FIXER_AFTER_INSTALL=\"true\"\n    fi;\nfi;\n\n# get and load the LIB => START\nLIB_NAME=\"installer_library.sh\"\nLIB_URL=\"https://raw.githubusercontent.com/ioBroker/ioBroker/master/$LIB_NAME\"\ncurl -sL $LIB_URL > ~/$LIB_NAME\nif test -f ~/$LIB_NAME; then source ~/$LIB_NAME; else echo \"Installer/Fixer: library not found\"; exit -2; fi\n# Delete the lib again. We have sourced it so we don't need it anymore\nrm ~/$LIB_NAME\n# get and load the LIB => END\n\n# test one function of the library\nRET=$(get_lib_version)\nif [ $? -ne 0 ]; then echo \"Installer/Fixer: library $LIB_NAME could not be loaded!\"; exit -2; fi\nif [ \"$RET\" == \"\" ]; then echo \"Installer/Fixer: library $LIB_NAME does not work.\"; exit -2; fi\necho \"Library version=$RET\"\n\n# Test which platform this script is being run on\nget_platform_params\nset_some_common_params\n\nif [ \"$IS_ROOT\" = \"true\" ]; then\n\tprint_bold \"Welcome to the ioBroker installer!\" \"Installer version: $INSTALLER_VERSION\"\nelse\n\tprint_bold \"Welcome to the ioBroker installer!\" \"Installer version: $INSTALLER_VERSION\" \"\" \"You might need to enter your password a couple of times.\"\nfi\n\n# Which npm package should be installed (default \"iobroker\")\nINSTALL_TARGET=${INSTALL_TARGET-\"iobroker\"}\n\nexport AUTOMATED_INSTALLER=\"true\"\nexport DEBIAN_FRONTEND=noninteractive\nNUM_STEPS=4\n\n# ########################################################\nprint_step \"Installing prerequisites\" 1 \"$NUM_STEPS\"\n\n# update repos\n$SUDOX $INSTALL_CMD $INSTALL_CMD_UPD_ARGS update\n\n# Install Node.js if it is not installed\nif [[ $(type -P \"node\" 2>/dev/null) != *\"/node\" ]]; then\n\tinstall_nodejs\nfi\n\n# Check if npm is installed\nif [[ $(type -P \"npm\" 2>/dev/null) != *\"/npm\" ]]; then\n\t# If not, try to install it\n\tinstall_package npm\n\tif [[ $(type -P \"npm\" 2>/dev/null) != *\"/npm\" ]]; then\n\t\techo \"${red}Cannot continue because \\\"npm\\\" is not installed and could not be installed automatically!${normal}\"\n\t\texit 1\n\tfi\nfi\n\n# Select an npm mirror, by default use npmjs.org\nREGISTRY_URL=\"https://registry.npmjs.org\"\ncase \"$MIRROR\" in\n\t[Tt]aobao)\n\t\tREGISTRY_URL=\"https://registry.npm.taobao.org\"\n\t\t;;\nesac\nif [ \"$(npm config get registry)\" != \"$REGISTRY_URL\" ]; then\n\techo \"Changing npm registry to $REGISTRY_URL\"\n\tnpm config set registry $REGISTRY_URL\nfi\n\n# Determine the platform we operate on and select the installation routine/packages accordingly\ninstall_necessary_packages\n\n# ########################################################\nprint_step \"Creating ioBroker user and directory\" 2 \"$NUM_STEPS\"\n\n# Ensure the user \"iobroker\" exists and is in the correct groups\nif [ \"$HOST_PLATFORM\" = \"linux\" ]; then\n\tcreate_user_linux $IOB_USER\nelif [ \"$HOST_PLATFORM\" = \"freebsd\" ]; then\n\tcreate_user_freebsd $IOB_USER\nfi\n\n# Ensure the installation directory exists and take control of it\n$SUDOX mkdir -p $IOB_DIR\nif [ \"$IS_ROOT\" != true ]; then\n\t# During the installation we need to give the current user access to the install dir\n\t# On Linux, we'll fix this at the end. On OSX this is okay\n\tif [ \"$HOST_PLATFORM\" = \"osx\" ]; then\n\t\tsudo chown -R $USER $IOB_DIR\n\telse\n\t\tsudo chown -R $USER:$USER_GROUP $IOB_DIR\n\tfi\nfi\ncd $IOB_DIR\necho \"Directory $IOB_DIR created\"\n\n# Log some information about the installer\ntouch $INSTALLER_INFO_FILE\nchmod 777 $INSTALLER_INFO_FILE\necho \"Installer version: $INSTALLER_VERSION\" >> $INSTALLER_INFO_FILE\necho \"Installation date $(date +%F)\" >> $INSTALLER_INFO_FILE\necho \"Platform: $HOST_PLATFORM\" >> $INSTALLER_INFO_FILE\n\n\n# ########################################################\nprint_step \"Installing ioBroker\" 3 \"$NUM_STEPS\"\n\n# Disable any warnings related to \"npm audit fix\"\ndisable_npm_audit\n\n# Disable any information related to npm updates\ndisable_npm_updatenotifier\n\n# Enforce strict version checks before installing new packages\nforce_strict_npm_version_checks\n\n# Create ioBroker's package.json and install dependencies:\nPACKAGE_JSON_FILE=$(cat <<- EOF\n\t{\n\t\t\"name\": \"iobroker.inst\",\n\t\t\"version\": \"3.0.0\",\n\t\t\"private\": true,\n\t\t\"description\": \"Automate your Life\",\n\t\t\"engines\": {\n\t\t\t\"node\": \">=16.0.0\"\n\t\t},\n\t\t\"dependencies\": {\n\t\t\t\"iobroker.js-controller\": \"stable\",\n\t\t\t\"iobroker.admin\": \"stable\",\n\t\t\t\"iobroker.discovery\": \"stable\",\n\t\t\t\"iobroker.backitup\": \"stable\"\n\t\t}\n\t}\n\tEOF\n)\n\n# Create package.json and install all dependencies\nPACKAGE_JSON_FILENAME=\"$IOB_DIR/package.json\"\nwrite_to_file \"$PACKAGE_JSON_FILE\" $PACKAGE_JSON_FILENAME\nnpm i --production --loglevel error --unsafe-perm > /dev/null\n\n# ########################################################\nprint_step \"Finalizing installation\" 4 \"$NUM_STEPS\"\n\n# Test which init system is used:\nINITSYSTEM=\"unknown\"\nif [[ \"$HOST_PLATFORM\" = \"freebsd\" && -d \"/usr/local/etc/rc.d\" ]]; then\n\tINITSYSTEM=\"rc.d\"\nelif [[ `ps -p 1 -o comm=` = \"systemd\" ]] &> /dev/null; then\n\tINITSYSTEM=\"systemd\"\nelif [[ -f /etc/init.d/cron && ! -h /etc/init.d/cron ]]; then\n\tINITSYSTEM=\"init.d\"\nelif [[ \"$HOST_PLATFORM\" = \"osx\" ]]; then\n\tINITSYSTEM=\"launchctl\"\n\tPLIST_FILE_LABEL=\"org.ioBroker.LaunchAtLogin\"\n\tSERVICE_FILENAME=\"/Users/${IOB_USER}/Library/LaunchAgents/${PLIST_FILE_LABEL}.plist\"\nfi\nif [[ $IOB_FORCE_INITD && ${IOB_FORCE_INITD-x} ]]; then\n\tINITSYSTEM=\"init.d\"\nfi\necho \"init system: $INITSYSTEM\" >> $INSTALLER_INFO_FILE\n\n# #############################\n# Create \"iob\" and \"iobroker\" executables\n# If possible, try to always execute the iobroker CLI as the correct user\nIOB_NODE_CMDLINE=\"node\"\nif [ \"$IOB_USER\" != \"$USER\" ]; then\n\tIOB_NODE_CMDLINE=\"sudo -H -u $IOB_USER node\"\nfi\nif [ \"$INITSYSTEM\" = \"systemd\" ]; then\n\t# systemd needs a special executable that reroutes iobroker start/stop to systemctl\n\t# Make sure to only use systemd when there is exactly 1 argument\n\tIOB_EXECUTABLE=$(cat <<- EOF\n\t\t#!$BASH_CMDLINE\n\t\tif (( \\$# == 1 )) && ([ \"\\$1\" = \"start\" ] || [ \"\\$1\" = \"stop\" ] || [ \"\\$1\" = \"restart\" ]); then\n            if [ \"\\$(id -u)\" = 0 ] && [[ \"\\$*\" != *--allow-root* ]]; then\n                echo -e \"\\n***For security reasons ioBroker should not be run or administrated as root.***\\nBy default only a user that is member of \"iobroker\" group can execute ioBroker commands.\\nPlease execute 'iob fix'to create an appropriate setup!\"\n            fi;\n\t\t\tsudo systemctl \\$1 iobroker\n\t\t\texit \\$?\n\t\tfi\n\t\tif [ \"\\$(id -u)\" = 0 ] && [[ \"\\$*\" != *--allow-root* ]]; then\n\t\t\techo -e \"\\n***For security reasons ioBroker should not be run or administrated as root.***\\nBy default only a user that is member of \"iobroker\" group can execute ioBroker commands.\\nPlease read the Documentation on how to set up such a user, if not done yet.\\nOnly in very special cases you can run iobroker commands by adding the \"--allow-root\" option at the end of the command line.\\nPlease note that this option may be disabled in the future, so please change your setup accordingly now.\"\n\t\t\texit 1;\n\t\tfi;\n\t\tif [ \"\\$(id -u)\" -gt 0 ] && [ \"\\$*\" = \"*--allow-root*\" ]; then\n\t\t\techo \"Invalid option --allow-root\";\n\t\t\texit;\n\t\tfi;\n\t\tif [ \"\\$1\" = \"fix\" ]; then\n\t\t\tsudo -u $IOB_USER curl -sLf $FIXER_URL --output /home/$IOB_USER/.fix.sh && bash /home/$IOB_USER/.fix.sh \"\\$2\"\n\t\telif [ \"\\$1\" = \"nodejs-update\" ]; then\n\t\t\tsudo -u $IOB_USER curl -sLf $NODE_UPDATER_URL --output /home/$IOB_USER/.nodejs-update.sh && bash /home/$IOB_USER/.nodejs-update.sh \"\\$2\"\n\t\telif [ \"\\$1\" = \"diag\" ]; then\n\t\t  sudo -u $IOB_USER curl -sLf $DIAG_URL --output /home/$IOB_USER/.diag.sh && bash /home/$IOB_USER/.diag.sh \"\\$2\" | sudo -u $IOB_USER tee /home/$IOB_USER/iob_diag.log\n\t\telse\n\t\t\t$IOB_NODE_CMDLINE $CONTROLLER_DIR/iobroker.js \"\\$@\"\n\t\tfi\n\t\tEOF\n\t)\nelif [ \"$INITSYSTEM\" = \"launchctl\" ]; then\n\t# launchctl needs unload service to stop iobroker\n\tIOB_EXECUTABLE=$(cat <<- EOF\n\t\t#!$BASH_CMDLINE\n\t\tif (( \\$# == 1 )) && ([ \"\\$1\" = \"start\" ]); then\n\t\t\tlaunchctl load -w $SERVICE_FILENAME\n\t\telif (( \\$# == 1 )) && ([ \"\\$1\" = \"stop\" ]); then\n\t\t\tlaunchctl unload -w $SERVICE_FILENAME\n\t\t\t$IOB_NODE_CMDLINE $CONTROLLER_DIR/iobroker.js stop\n\t\telif [ \"\\$1\" = \"fix\" ]; then\n\t\t\tsudo -u $IOB_USER curl -sLf $FIXER_URL --output /Users/$IOB_USER/.fix.sh && bash /Users/$IOB_USER/.fix.sh \"\\$2\"\n\t\telif [ \"\\$1\" = \"nodejs-update\" ]; then\n\t\t\tsudo -u $IOB_USER curl -sLf $NODE_UPDATER_URL --output /Users/$IOB_USER/.nodejs-update.sh && bash /Users/$IOB_USER/.nodejs-update.sh \"\\$2\"\n\t\telif [ \"\\$1\" = \"diag\" ]; then\n\t\t  sudo -u $IOB_USER curl -sLf $DIAG_URL --output /Users/$IOB_USER/.diag.sh && bash /Users/$IOB_USER/.diag.sh \"\\$2\" | sudo -u $IOB_USER tee /Users/$IOB_USER/iob_diag.log\n\t\telse\n\t\t\t$IOB_NODE_CMDLINE $CONTROLLER_DIR/iobroker.js \"\\$@\"\n\t\tfi\n\t\tEOF\n\t)\nelse\n\tIOB_EXECUTABLE=$(cat <<- EOF\n\t\t#!$BASH_CMDLINE\n\t\tif [ \"\\$1\" = \"fix\" ]; then\n\t\t\tsudo -u $IOB_USER curl -sLf $FIXER_URL --output /home/$IOB_USER/.fix.sh && bash /home/$IOB_USER/.fix.sh \"\\$2\"\n\t\telif [ \"\\$1\" = \"nodejs-update\" ]; then\n\t\t\tsudo -u $IOB_USER curl -sLf $NODE_UPDATER_URL --output /home/$IOB_USER/.nodejs-update.sh && bash /home/$IOB_USER/.nodejs-update.sh \"\\$2\"\n\t\telif [ \"\\$1\" = \"diag\" ]; then\n\t\t  sudo -u $IOB_USER curl -sLf $DIAG_URL --output /home/$IOB_USER/.diag.sh && bash /home/$IOB_USER/.diag.sh \"\\$2\" | sudo -u $IOB_USER tee /home/$IOB_USER/iob_diag.log\n\t\telse\n\t\t\t$IOB_NODE_CMDLINE $CONTROLLER_DIR/iobroker.js \"\\$@\"\n\t\tfi\n\t\tEOF\n\t)\nfi\nif [ \"$HOST_PLATFORM\" = \"linux\" ]; then\n\tIOB_BIN_PATH=/usr/bin\nelif [ \"$HOST_PLATFORM\" = \"freebsd\" ] || [ \"$HOST_PLATFORM\" = \"osx\" ]; then\n\tIOB_BIN_PATH=/usr/local/bin\nfi\n\n# Symlink the global binaries iob and iobroker\n$SUDOX ln -sfn $IOB_DIR/iobroker $IOB_BIN_PATH/iobroker\n$SUDOX ln -sfn $IOB_DIR/iobroker $IOB_BIN_PATH/iob\n# Symlink the local binary iob\n$SUDOX ln -sfn $IOB_DIR/iobroker $IOB_DIR/iob\n\n# Create executables in the ioBroker directory\n# TODO: check if this must be fixed like in in the FIXER for #216\nwrite_to_file \"$IOB_EXECUTABLE\" $IOB_DIR/iobroker\nmake_executable \"$IOB_DIR/iobroker\"\n\n# TODO: check if this is necessary, like in the FIXER\n## and give them the correct ownership\n#change_owner $IOB_USER \"$IOB_DIR/iobroker\"\n#change_owner $IOB_USER \"$IOB_DIR/iob\"\n\n# #############################\n# Enable autostart\n# From https://unix.stackexchange.com/questions/18209/detect-init-system-using-the-shell/326213\n\t# if [[ `/sbin/init --version` =~ upstart ]]; then echo using upstart;\n\t# elif [[ `systemctl` =~ -\\.mount ]]; then echo using systemd;\n\t# elif [[ -f /etc/init.d/cron && ! -h /etc/init.d/cron ]]; then echo using sysv-init;\n\t# else echo cannot tell; fi\n\n# Enable autostart\nif [[ \"$INITSYSTEM\" = \"init.d\" ]]; then\n\techo \"Enabling autostart...\"\n\n\t# Write a script into init.d that automatically detects the correct node executable and runs ioBroker\n\tINITD_FILE=$(cat <<- EOF\n\t\t#!$BASH_CMDLINE\n\t\t### BEGIN INIT INFO\n\t\t# Provides:          iobroker.sh\n\t\t# Required-Start:    \\$network \\$local_fs \\$remote_fs\n\t\t# Required-Stop:     \\$network \\$local_fs \\$remote_fs\n\t\t# Should-Start:      redis-server\n\t\t# Should-Stop:       redis-server\n\t\t# Default-Start:     2 3 4 5\n\t\t# Default-Stop:      0 1 6\n\t\t# Short-Description: starts ioBroker\n\t\t# Description:       starts ioBroker\n\t\t### END INIT INFO\n\t\tPIDF=$CONTROLLER_DIR/lib/iobroker.pid\n\t\tNODECMD=\\$(which node)\n\t\tRETVAL=0\n\n\t\tstart() {\n\t\t\techo -n \"Starting ioBroker\"\n\t\t\tsu - $IOB_USER -s \"$BASH_CMDLINE\" -c \"\\$NODECMD $CONTROLLER_DIR/iobroker.js start\"\n\t\t\tRETVAL=\\$?\n\t\t}\n\n\t\tstop() {\n\t\t\techo -n \"Stopping ioBroker\"\n\t\t\tsu - $IOB_USER -s \"$BASH_CMDLINE\" -c \"\\$NODECMD $CONTROLLER_DIR/iobroker.js stop\"\n\t\t\tRETVAL=\\$?\n\t\t}\n\t\tif [ \"\\$1\" = \"start\" ]; then\n\t\t\tstart\n\t\telif [ \"\\$1\" = \"stop\" ]; then\n\t\t\tstop\n\t\telif [ \"\\$1\" = \"restart\" ]; then\n\t\t\tstop\n\t\t\tstart\n\t\telse\n\t\t\techo \"Usage: iobroker \\{start\\|stop\\|restart\\}\"\n\t\t\texit 1\n\t\tfi\n\t\texit \\$RETVAL\n\t\tEOF\n\t)\n\n\t# Create the startup file, give it the correct permissions and start ioBroker\n\tSERVICE_FILENAME=\"/etc/init.d/iobroker.sh\"\n\twrite_to_file \"$INITD_FILE\" $SERVICE_FILENAME\n\tset_root_permissions $SERVICE_FILENAME\n\t$SUDOX bash $SERVICE_FILENAME\n\n\techo \"Autostart enabled!\"\n\t# Remember what we did\n\tif [[ $IOB_FORCE_INITD && ${IOB_FORCE_INITD-x} ]]; then\n\t\techo \"Autostart: init.d (forced)\" >> \"$INSTALLER_INFO_FILE\"\n\telse\n\t\techo \"Autostart: init.d\" >> \"$INSTALLER_INFO_FILE\"\n\tfi\nelif [ \"$INITSYSTEM\" = \"systemd\" ]; then\n\techo \"Enabling autostart...\"\n\n\t# Write an systemd service that automatically detects the correct node executable and runs ioBroker\n\tSYSTEMD_FILE=$(cat <<- EOF\n\t\t[Unit]\n\t\tDescription=ioBroker Server\n\t\tDocumentation=http://iobroker.net\n\t\tAfter=network.target redis.service influxdb.service mysql-server.service mariadb-server.service\n\t\tWants=redis.service influxdb.service mysql-server.service mariadb-server.service\n\n\t\t[Service]\n\t\tType=simple\n\t\tUser=$IOB_USER\n\t\tEnvironment=\"NODE=\\$(which node)\"\n\t\tExecStart=$BASH_CMDLINE -c '\\${NODE} $CONTROLLER_DIR/controller.js'\n\t\tRestart=on-failure\n\t\tRestartSec=3s\n\n\t\t[Install]\n\t\tWantedBy=multi-user.target\n\t\tEOF\n\t)\n\n\t# Create the startup file and give it the correct permissions\n\tSERVICE_FILENAME=\"/lib/systemd/system/iobroker.service\"\n\twrite_to_file \"$SYSTEMD_FILE\" $SERVICE_FILENAME\n\tif [ \"$IS_ROOT\" != true ]; then\n\t\tsudo chown root:$ROOT_GROUP $SERVICE_FILENAME\n\tfi\n\t$SUDOX chmod 644 $SERVICE_FILENAME\n\t$SUDOX systemctl daemon-reload\n\t$SUDOX systemctl enable iobroker\n\t$SUDOX systemctl start iobroker\n\techo \"Autostart enabled!\"\n\techo \"Autostart: systemd\" >> \"$INSTALLER_INFO_FILE\"\n\nelif [ \"$INITSYSTEM\" = \"rc.d\" ]; then\n\techo \"Enabling autostart...\"\n\n\tPIDFILE=\"$CONTROLLER_DIR/lib/iobroker.pid\"\n\n\t# Write an rc.d service that automatically detects the correct node executable and runs ioBroker\n\tRCD_FILE=$(cat <<- EOF\n\t\t#!$BASH_CMDLINE\n\t\t#\n\t\t# PROVIDE: iobroker\n\t\t# REQUIRE: DAEMON\n\t\t# KEYWORD: shutdown\n\n\t\t. /etc/rc.subr\n\n\t\tname=\"iobroker\"\n\t\trcvar=\"iobroker_enable\"\n\n\t\tload_rc_config \\$name\n\n\t\tiobroker_enable=\\${iobroker_enable-\"NO\"}\n\t\tiobroker_pidfile=\\${iobroker_pidfile-\"$PIDFILE\"}\n\n\t\tiobroker_start()\n\t\t{\n\t\t\tiobroker start\n\t\t}\n\n\t\tiobroker_stop()\n\t\t{\n\t\t\tiobroker stop\n\t\t}\n\n\t\tiobroker_status()\n\t\t{\n\t\t\tiobroker status\n\t\t}\n\n\t\tPATH=\"\\${PATH}:/usr/local/bin\"\n\t\tpidfile=\"\\${iobroker_pidfile}\"\n\n\t\tstart_cmd=iobroker_start\n\t\tstop_cmd=iobroker_stop\n\t\tstatus_cmd=iobroker_status\n\n\t\trun_rc_command \"\\$1\"\n\t\tEOF\n\t)\n\n\t# Create the startup file, give it the correct permissions and start ioBroker\n\tSERVICE_FILENAME=\"/usr/local/etc/rc.d/iobroker\"\n\twrite_to_file \"$RCD_FILE\" $SERVICE_FILENAME\n\tset_root_permissions $SERVICE_FILENAME\n\n\t# Make sure that $IOB_USER may access the pidfile\n\t$SUDOX touch \"$PIDFILE\"\n\t$SUDOX chown $IOB_USER:$IOB_USER $PIDFILE\n\n\t# Enable startup and start the service\n\tsysrc iobroker_enable=YES\n\tservice iobroker start\n\n\techo \"Autostart enabled!\"\n\techo \"Autostart: rc.d\" >> \"$INSTALLER_INFO_FILE\"\n\nelif [ \"$INITSYSTEM\" = \"launchctl\" ]; then\n\techo \"Enabling autostart...\"\n\n\tNODECMD=$(which node)\n\t# osx use launchd.plist init system.\n\tPLIST_FILE=$(cat <<- EOF\n\t\t<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\t\t<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n\t\t<plist version=\"1.0\">\n\t\t<dict>\n\t\t\t<key>Label</key>\n\t\t\t<string>${PLIST_FILE_LABEL}</string>\n\t\t\t<key>ProgramArguments</key>\n\t\t\t<array>\n\t\t\t\t<string>${NODECMD}</string>\n\t\t\t\t<string>${CONTROLLER_DIR}/iobroker.js</string>\n\t\t\t\t<string>start</string>\n\t\t\t</array>\n\t\t\t<key>KeepAlive</key>\n\t\t\t<true/>\n\t\t\t<key>RunAtLoad</key>\n\t\t\t<true/>\n\t\t\t<key>EnvironmentVariables</key>\n\t\t\t<dict>\n\t\t\t\t<key>PATH</key>\n\t\t\t\t<string>/usr/local/bin:/usr/local/sbin:/usr/bin:/bin:/usr/sbin:/sbin</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t</plist>\n\t\tEOF\n\t)\n\n\t# Create the startup file, give it the correct permissions and start ioBroker\n\techo \"$PLIST_FILE\" > $SERVICE_FILENAME\n\n\t# Enable startup and start the service\n\tlaunchctl list ${PLIST_FILE_LABEL} &> /dev/null\n\tif [ $? -eq 0 ]; then\n\t\techo \"Reloading service ${PLIST_FILE_LABEL}\"\n\t\tlaunchctl unload -w $SERVICE_FILENAME\n\tfi\n\tlaunchctl load -w $SERVICE_FILENAME\n\n\techo \"Autostart enabled!\"\n\techo \"Autostart: launchctl\" >> \"$INSTALLER_INFO_FILE\"\n\nelse\n\techo \"${yellow}Unsupported init system, cannot enable autostart!${normal}\"\n\techo \"Autostart: false\" >> \"$INSTALLER_INFO_FILE\"\nfi\n\n# Raspbery image has as last line in /etc/rc.local the ioBroker installer. It must be removed\nif [ -f /etc/rc.local ]; then\n\tif [ -w /etc/rc.local ]; then\n\t\tif [ \"$IS_ROOT\" != true ]; then\n\t\t\tsudo sed -i 's/curl -sLf https:\\/\\/iobroker.net\\/install\\.sh | bash -//g' /etc/rc.local\n\t\telse\n\t\t\tsed -i 's/curl -sLf https:\\/\\/iobroker.net\\/install\\.sh | bash -//g' /etc/rc.local\n\t\tfi\n\tfi\nfi\n\n# Enable auto-completion for ioBroker commands\nenable_cli_completions\n\n# Test again which platform this script is being run on\n# This is necessary because FreeBSD does crazy stuff\nget_platform_params\n\n# Make sure that the app dir belongs to the correct user\n# Don't do it on OSX, because we'll install as the current user anyways\nif [ \"$HOST_PLATFORM\" != \"osx\" ]; then\n\tfix_dir_permissions\nfi\n# Force npm to run as iobroker when inside IOB_DIR\nif [[ \"$IS_ROOT\" != true && \"$USER\" != \"$IOB_USER\" ]]; then\n\tchange_npm_command_user\nfi\nchange_npm_command_root\n\nunset AUTOMATED_INSTALLER\n\n# Detect IP address\nIP=$(detect_ip_address)\nprint_bold \"${green}ioBroker was installed successfully${normal}\" \"Open http://$IP:8081 in a browser and start configuring!\"\n\nprint_msg \"${yellow}You need to re-login before doing anything else on the console!${normal}\"\n\nif [ \"$RECOMMEND_FIXER_AFTER_INSTALL\" = \"true\" ]; then\n    print_bold \"${red}Please run 'iob fix' after the required re-login to fix some common issues.${normal}\"\nfi\nexit 0\n"
        },
        {
          "name": "installer_library.sh",
          "type": "blob",
          "size": 25.5576171875,
          "content": "# ------------------------------\n# Increase this version number whenever you update the lib\n# ------------------------------\nLIBRARY_VERSION=\"2024-10-22\" # format YYYY-MM-DD\n\n# ------------------------------\n# Supported and suggested node versions\n# ------------------------------\nNODE_MAJOR=20\nNODE_JS_BREW_URL=\"https://nodejs.org/dist/v20.13.1/node-v20.13.1.pkg\"\n\n# ------------------------------\n# test function of the library\n# ------------------------------\nfunction get_lib_version() { echo \"$LIBRARY_VERSION\"; }\n\n# ------------------------------\n# functions for ioBroker Installer/Fixer\n# ------------------------------\n\nenable_colored_output() {\n\t# Enable colored output\n\tif test -t 1; then # if terminal\n\t\tncolors=$(which tput > /dev/null && tput colors) # supports color\n\t\tif test -n \"$ncolors\" && test $ncolors -ge 8; then\n\t\t\ttermcols=$(tput cols)\n\t\t\tbold=\"$(tput bold)\"\n\t\t\tunderline=\"$(tput smul)\"\n\t\t\tstandout=\"$(tput smso)\"\n\t\t\tnormal=\"$(tput sgr0)\"\n\t\t\tblack=\"$(tput setaf 0)\"\n\t\t\tred=\"$(tput setaf 1)\"\n\t\t\tgreen=\"$(tput setaf 2)\"\n\t\t\tyellow=\"$(tput setaf 3)\"\n\t\t\tblue=\"$(tput setaf 4)\"\n\t\t\tmagenta=\"$(tput setaf 5)\"\n\t\t\tcyan=\"$(tput setaf 6)\"\n\t\t\twhite=\"$(tput setaf 7)\"\n\t\tfi\n\tfi\n}\n\nprint_step() {\n\tstepname=\"$1\"\n\tstepnr=\"$2\"\n\tsteptotal=\"$3\"\n\n\techo\n\techo \"${bold}${HLINE}${normal}\"\n\techo \"${bold}    ${stepname} ${blue}(${stepnr}/${steptotal})${normal}\"\n\techo \"${bold}${HLINE}${normal}\"\n\techo\n}\n\nprint_bold() {\n\ttitle=\"$1\"\n\techo\n\techo \"${bold}${HLINE}${normal}\"\n\techo\n\techo \"    ${bold}${title}${normal}\"\n\tfor text in \"${@:2}\"; do\n\t\techo \"    ${text}\"\n\tdone\n\techo\n\techo \"${bold}${HLINE}${normal}\"\n\techo\n}\n\nprint_msg() {\n\ttext=\"$1\"\n\techo\n\techo -e \"${text}\"\n\techo\n}\n\nHLINE=\"==========================================================================\"\nenable_colored_output\n\nget_platform_params() {\n\t# Test which platform this script is being run on\n\t# When adding another supported platform, also add detection for the install command\n\t# HOST_PLATFORM:  Name of the platform\n\t# INSTALL_CMD:      comand for package installation\n\t# INSTALL_CMD_ARGS: arguments for $INSTALL_CMD to install something\n\t# INSTALL_CMD_UPD_ARGS: arguments for $INSTALL_CMD to update something\n\t# IOB_DIR:\t  Directory where iobroker should be installed\n\t# IOB_USER:\t  The user to run ioBroker as\n\n\tINSTALL_CMD_UPD_ARGS=\"\"\n\n\tunamestr=$(uname)\n\tcase \"$unamestr\" in\n\t\"Linux\")\n\t\tHOST_PLATFORM=\"linux\"\n\t\tINSTALL_CMD=\"apt-get\"\n\t\tINSTALL_CMD_ARGS=\"install -yq\"\n\t\tif [[ $(which \"yum\" 2>/dev/null) == *\"/yum\" ]]; then\n\t\t\tINSTALL_CMD=\"yum\"\n\t\t\t# The args -y and -q have to be separate\n\t\t\tINSTALL_CMD_ARGS=\"install -q -y\"\n\t\t\tINSTALL_CMD_UPD_ARGS=\"-y\"\n\t\tfi\n\t\tIOB_DIR=\"/opt/iobroker\"\n\t\tIOB_USER=\"iobroker\"\n\t\t;;\n\t\"Darwin\")\n\t\t# OSX and Linux are the same in terms of install procedure\n\t\tHOST_PLATFORM=\"osx\"\n\t\tROOT_GROUP=\"wheel\"\n\t\tINSTALL_CMD=\"brew\"\n\t\tINSTALL_CMD_ARGS=\"install\"\n\t\tIOB_DIR=\"/usr/local/iobroker\"\n\t\tIOB_USER=\"$USER\"\n\t\t;;\n\t\"FreeBSD\")\n\t\tHOST_PLATFORM=\"freebsd\"\n\t\tROOT_GROUP=\"wheel\"\n\t\tINSTALL_CMD=\"pkg\"\n\t\tINSTALL_CMD_ARGS=\"install -yq\"\n\t\tIOB_DIR=\"/opt/iobroker\"\n\t\tIOB_USER=\"iobroker\"\n\t\t;;\n\t*)\n\t\t# The following should never happen, but better be safe than sorry\n\t\techo \"Unsupported platform $unamestr\"\n\t\texit 1\n\t\t;;\n\tesac\n\tif [ \"$IS_ROOT\" = true ]; then\n\t\tUSER_GROUP=\"$ROOT_GROUP\"\n\tfi\n}\n\nfunction set_some_common_params() {\n\tCONTROLLER_DIR=\"$IOB_DIR/node_modules/iobroker.js-controller\"\n\tINSTALLER_INFO_FILE=\"$IOB_DIR/INSTALLER_INFO.txt\"\n\n\t# Where the fixer script is located\n\tFIXER_URL=\"https://iobroker.net/fix.sh\"\n\n\t# Where the diag script is located\n\tDIAG_URL=\"https://iobroker.net/diag.sh\"\n\n  # Where the nodejs Update script is located\n  NODE_UPDATER_URL=\"https://iobroker.net/node-update.sh\"\n\n\t# Remember the full path of bash\n\tBASH_CMDLINE=$(which bash)\n\n\t# Check if \"sudo\" command is available (in case we're not root)\n\tif [ \"$IS_ROOT\" != true ]; then\n\t\tif [[ $(which \"sudo\" 2>/dev/null) != *\"/sudo\" ]]; then\n\t\t\techo \"${red}Cannot continue because the \\\"sudo\\\" command is not available!${normal}\"\n\t\t\techo \"Please install it first using \\\"$INSTALL_CMD install sudo\\\"\"\n\t\t\texit 1\n\t\tfi\n\tfi\n\n\t# Starting with Debian 10 (Buster), we need to add the [/usr[/local]]/sbin\n\t# directories to PATH for non-root users\n\tif [ -d \"/sbin\" ]; then add_to_path \"/sbin\"; fi\n\tif [ -d \"/usr/sbin\" ]; then add_to_path \"/usr/sbin\"; fi\n\tif [ -d \"/usr/local/sbin\" ]; then add_to_path \"/usr/local/sbin\"; fi\n}\n\ninstall_package_linux() {\n\tpackage=\"$1\"\n\t# Test if the package is installed\n\tdpkg -s \"$package\" &> /dev/null\n\tif [ $? -ne 0 ]; then\n\t\tif [ \"$INSTALL_CMD\" = \"yum\" ]; then\n\t\t\t# Install it\n\t\t\terrormessage=$( $SUDOX $INSTALL_CMD $INSTALL_CMD_ARGS $package > /dev/null 2>&1)\n\t\telse\n\t\t\t# Install it\n\t\t\terrormessage=$( $SUDOX $INSTALL_CMD update -qq && $SUDOX $INSTALL_CMD $INSTALL_CMD_ARGS --no-install-recommends -yqq $package)\n\t\tfi\n\n\t\t# Hide \"Error: Nothing to do\"\n\t\tif [ \"$errormessage\" != \"Error: Nothing to do\" ]; then\n\t\t\tif [ \"$errormessage\" != \"\" ]; then\n\t\t\t\techo $errormessage\n\t\t\tfi\n\t\t\techo \"Installed $package\"\n\t\tfi\n\tfi\n}\n\ninstall_package_freebsd() {\n\tpackage=\"$1\"\n\t# check if package is installed (pkg is nice enough to provide us with a exitcode)\n\tif ! $INSTALL_CMD info \"$1\" >/dev/null 2>&1; then\n\t\t# Install it\n\t\t$SUDOX $INSTALL_CMD $INSTALL_CMD_ARGS \"$1\" > /dev/null\n\t\techo \"Installed $package\"\n\tfi\n}\n\ninstall_package_macos() {\n\tpackage=\"$1\"\n\t# Test if the package is installed (Use brew to install essential tools)\n\t$INSTALL_CMD list | grep \"$package\" &> /dev/null\n\tif [ $? -ne 0 ]; then\n\t\t# Install it\n\t\t$INSTALL_CMD $INSTALL_CMD_ARGS $package &> /dev/null\n\t\tif [ $? -eq 0 ]; then\n\t\t\techo \"Installed $package\"\n\t\telse\n\t\t\techo \"$package was not installed\"\n\t\tfi\n\tfi\n}\n\ninstall_package() {\n\tcase \"$HOST_PLATFORM\" in\n\t\t\"linux\")\n\t\t\tinstall_package_linux $1\n\t\t;;\n\t\t\"osx\")\n\t\t\tinstall_package_macos $1\n\t\t;;\n\t\t\"freebsd\")\n\t\t\tinstall_package_freebsd $1\n\t\t;;\n\t\t# The following should never happen, but better be safe than sorry\n\t\t*)\n\t\t\techo \"Unsupported platform $HOST_PLATFORM\"\n\t\t;;\n\tesac\n}\n\ninstall_necessary_packages() {\n# Determine the platform we operate on and select the installation routine/packages accordingly\n# TODO: Which other packages do we need by default?\n\tcase \"$HOST_PLATFORM\" in\n\t\"linux\")\n\t\tdeclare -a packages=(\n\t\t\t\"acl\" # To use setfacl\n\t\t\t\"sudo\" # To use sudo (obviously)\n\t\t\t\"libcap2-bin\" # To give nodejs access to protected ports\n\t\t\t# These are used by a couple of adapters and should therefore exist:\n\t\t\t\"build-essential\"\n\t\t\t\"gcc\"\n\t\t\t\"make\"\n\t\t\t\"libavahi-compat-libdnssd-dev\"\n\t\t\t\"libudev-dev\"\n\t\t\t\"libpam0g-dev\"\n\t\t\t\"pkg-config\"\n\t\t\t\"git\"\n\t\t\t\"curl\"\n\t\t\t\"unzip\"\n\t\t\t\"distro-info\"\n\t\t\t# These are required for canvas\n\t\t\t\"libcairo2-dev\"\n\t\t\t\"libpango1.0-dev\"\n\t\t\t\"libjpeg-dev\"\n\t\t\t\"libgif-dev\"\n\t\t\t\"librsvg2-dev\"\n\t\t\t\"libpixman-1-dev\"\n\t\t\t\"net-tools\" # To fix issue #277\n\t\t\t\"cmake\" # https://github.com/ioBroker/ioBroker.js-controller/issues/1604\n\t\t\t\"polkitd\" # some LXC miss it\n\t\t\t\"passwd\" # some LXC miss it\n\t\t)\n\t\tfor pkg in \"${packages[@]}\"; do\n\t\t\tinstall_package $pkg\n\t\tdone\n\n\t\t# ==================\n\t\t# Configure packages\n\n\t\t# Give nodejs access to protected ports and raw devices like ble\n\t\tcmdline=\"$SUDOX setcap\"\n\n\t\tif running_in_docker; then\n\t\t\tcapabilities=$(grep ^CapBnd /proc/$$/status)\n\t\t\tif [[ $(capsh --decode=${capabilities:(-16)}) == *\"cap_net_admin\"* ]]; then\n\t\t\t\t$cmdline 'cap_net_admin,cap_net_bind_service,cap_net_raw+eip' \"$(eval readlink -f $(command -v node))\"\n\t\t\telse\n\t\t\t\t$cmdline 'cap_net_bind_service,cap_net_raw+eip' \"$(eval readlink -f $(command -v node))\"\n\t\t\t\techo \"${yellow}Docker detected!\"\n\t\t\t\techo \"If you have any adapters that need the CAP_NET_ADMIN capability,\"\n\t\t\t\techo \"you need to start the docker container with the option --cap-add=NET_ADMIN\"\n\t\t\t\techo \"and manually add that capability to node${normal}\"\n\t\t\tfi\n\t\telse\n\t\t\t$cmdline 'cap_net_admin,cap_net_bind_service,cap_net_raw+eip' \"$(eval readlink -f $(command -v node))\"\n\t\tfi\n\t\t;;\n\t\"freebsd\")\n\t\tdeclare -a packages=(\n\t\t\t\"sudo\"\n\t\t\t\"git\"\n\t\t\t\"curl\"\n\t\t\t\"bash\"\n\t\t\t\"unzip\"\n\t\t\t\"avahi-libdns\" # avahi gets installed along with this\n\t\t\t\"dbus\"\n\t\t\t\"nss_mdns\" # needed for the mdns host resolution\n\t\t\t\"gcc\"\n\t\t\t\"python\" # Required for node-gyp compilation\n\t\t)\n\t\tfor pkg in \"${packages[@]}\"; do\n\t\t\tinstall_package $pkg\n\t\tdone\n\t\t# we need to do some setting up things after installing the packages\n\t\t# ensure dns_sd.h is where node-gyp expect it\n\t\tln -s /usr/local/include/avahi-compat-libdns_sd/dns_sd.h /usr/include/dns_sd.h\n\t\t# enable dbus in the avahi configuration\n\t\tsed -i -e 's/#enable-dbus/enable-dbus/' /usr/local/etc/avahi/avahi-daemon.conf\n\t\t# enable mdns usage for host resolution\n\t\tsed -i -e 's/hosts: file dns/hosts: file dns mdns/' /etc/nsswitch.conf\n\n\t\t# enable services avahi/dbus\n\t\tsysrc -f /etc/rc.conf dbus_enable=\"YES\"\n\t\tsysrc -f /etc/rc.conf avahi_daemon_enable=\"YES\"\n\n\t\t# start services\n\t\tservice dbus start\n\t\tservice avahi-daemon start\n\t\t;;\n\t\"osx\")\n\t\t# Test if brew is installed. If it is, install some packages that are often used.\n\t\t$INSTALL_CMD -v &> /dev/null\n\t\tif [ $? -eq 0 ]; then\n\t\t\tdeclare -a packages=(\n\t\t\t\t# These are used by a couple of adapters and should therefore exist:\n\t\t\t\t\"pkg-config\"\n\t\t\t\t\"git\"\n\t\t\t\t\"curl\"\n\t\t\t\t\"unzip\"\n\t\t\t)\n\t\t\tfor pkg in \"${packages[@]}\"; do\n\t\t\t\tinstall_package $pkg\n\t\t\tdone\n\t\telse\n\t\t\techo \"${yellow}Since brew is not installed, frequently-used dependencies could not be installed.\"\n\t\t\techo \"Before installing some adapters, you might have to install some packages yourself.\"\n\t\t\techo \"Please check the adapter manuals before installing them.${normal}\"\n\t\tfi\n\t\t;;\n\t*)\n\t\t;;\n\tesac\n}\n\ndisable_npm_audit() {\n\t# Make sure the npmrc file exists\n\t$SUDOX touch .npmrc\n\t# If .npmrc does not contain \"audit=false\", we need to change it\n\t$SUDOX grep -q -E \"^audit=false\" .npmrc &> /dev/null\n\tif [ $? -ne 0 ]; then\n\t\t# Remember its contents (minus any possible audit=true)\n\t\tNPMRC_FILE=$($SUDOX grep -v -E \"^audit=true\" .npmrc)\n\t\t# And write it back\n\t\twrite_to_file \"$NPMRC_FILE\" .npmrc\n\t\t# Append the line to disable audit\n\t\tappend_to_file \"# disable npm audit warnings\" .npmrc\n\t\tappend_to_file \"audit=false\" .npmrc\n\tfi\n\t# Make sure that npm can access the .npmrc\n\tif [ \"$HOST_PLATFORM\" = \"osx\" ]; then\n\t\t$SUDOX chown -R $USER .npmrc\n\telse\n\t\t$SUDOX chown -R $USER:$USER_GROUP .npmrc\n\tfi\n}\n\ndisable_npm_updatenotifier() {\n\t# Make sure the npmrc file exists\n\t$SUDOX touch .npmrc\n\t# If .npmrc does not contain \"update-notifier=false\", we need to change it\n\t$SUDOX grep -q -E \"^update-notifier=false\" .npmrc &> /dev/null\n\tif [ $? -ne 0 ]; then\n\t\t# Remember its contents (minus any possible update-notifier=true)\n\t\tNPMRC_FILE=$($SUDOX grep -v -E \"^update-notifier=true\" .npmrc)\n\t\t# And write it back\n\t\twrite_to_file \"$NPMRC_FILE\" .npmrc\n\t\t# Append the line to disable update-notifier\n\t\tappend_to_file \"# disable npm update-notifier information\" .npmrc\n\t\tappend_to_file \"update-notifier=false\" .npmrc\n\tfi\n\t# Make sure that npm can access the .npmrc\n\tif [ \"$HOST_PLATFORM\" = \"osx\" ]; then\n\t\t$SUDOX chown -R $USER .npmrc\n\telse\n\t\t$SUDOX chown -R $USER:$USER_GROUP .npmrc\n\tfi\n}\n\n# This is obsolete and can maybe removed\nset_npm_python() {\n\t# Make sure the npmrc file exists\n\t$SUDOX touch .npmrc\n\t# If .npmrc does not contain \"python=\", we need to change it\n\t$SUDOX grep -q -E \"^python=\" .npmrc &> /dev/null\n\tif [ $? -ne 0 ]; then\n\t\t# Remember its contents\n\t\tNPMRC_FILE=$($SUDOX grep -v -E \"^python=\" .npmrc)\n\t\t# And write it back\n\t\twrite_to_file \"$NPMRC_FILE\" .npmrc\n\t\t# Append the line to change the python binary\n\t\tappend_to_file \"# change link from python3 to python2.7 (needed for gyp)\" .npmrc\n\t\tappend_to_file \"python=/usr/local/bin/python2.7\" .npmrc\n\tfi\n\t# Make sure that npm can access the .npmrc\n\tif [ \"$HOST_PLATFORM\" = \"osx\" ]; then\n\t\t$SUDOX chown -R $USER .npmrc\n\telse\n\t\t$SUDOX chown -R $USER:$USER_GROUP .npmrc\n\tfi\n}\n\nforce_strict_npm_version_checks() {\n\t# Make sure the npmrc file exists\n\t$SUDOX touch .npmrc\n\t# If .npmrc does not contain \"engine-strict=true\", we need to change it\n\t$SUDOX grep -q -E \"^engine-strict=true\" .npmrc &> /dev/null\n\tif [ $? -ne 0 ]; then\n\t\t# Remember its contents (minus any possible engine-strict=false)\n\t\tNPMRC_FILE=$($SUDOX grep -v -E \"^engine-strict=false\" .npmrc)\n\t\t# And write it back\n\t\twrite_to_file \"$NPMRC_FILE\" .npmrc\n\t\t# Append the line to force strict version checks\n\t\tappend_to_file \"# force strict version checks\" .npmrc\n\t\tappend_to_file \"engine-strict=true\" .npmrc\n\tfi\n\t# Make sure that npm can access the .npmrc\n\tif [ \"$HOST_PLATFORM\" = \"osx\" ]; then\n\t\t$SUDOX chown -R $USER .npmrc\n\telse\n\t\t$SUDOX chown -R $USER:$USER_GROUP .npmrc\n\tfi\n}\n\n# Adds dirs to the PATH variable without duplicating entries\nadd_to_path() {\n\tcase \":$PATH:\" in\n\t\t*\":$1:\"*) :;; # already there\n\t\t*) PATH=\"$1:$PATH\";;\n\tesac\n}\n\nfunction write_to_file()  {\n\techo \"$1\" | $SUDOX tee \"$2\" &> /dev/null\n}\nfunction append_to_file() {\n\techo \"$1\" | $SUDOX tee -a \"$2\" &> /dev/null\n}\n\nrunning_in_docker() {\n\t# Test if we're running inside a docker container or as github actions job while building docker container image\n\tif awk -F/ '$2 == \"docker\"' /proc/self/cgroup | read || awk -F/ '$2 == \"buildkit\"' /proc/self/cgroup | read || test -f /.dockerenv || test -f /opt/scripts/.docker_config/.thisisdocker ; then\n\t\treturn 0\n\telse\n\t\treturn 1\n\tfi\n}\n\nchange_npm_command_user() {\n\t# patches the npm command for the current user (if iobroker was installed as non-root),\n\t# so that it is executed as `iobroker` when inside the iobroker directory\n\tNPM_COMMAND_FIX_PATH=~/.iobroker/npm_command_fix\n\tNPM_COMMAND_FIX=$(cat <<- EOF\n\t\t# While inside the iobroker directory, execute npm as iobroker\n\t\tfunction npm() {\n\t\t\t__real_npm=\\$(which npm)\n\t\t\tif [[ \\$(pwd) == \"$IOB_DIR\"* ]]; then\n\t\t\t\tsudo -H -u $IOB_USER \\$__real_npm \\$*\n\t\t\telse\n\t\t\t\teval \\$__real_npm \\$*\n\t\t\tfi\n\t\t}\n\t\tEOF\n\t)\n\tBASHRC_LINES=$(cat <<- EOF\n\n\t\t# Forces npm to run as $IOB_USER when inside the iobroker installation dir\n\t\tsource ~/.iobroker/npm_command_fix\n\t\tEOF\n\t)\n\n\tmkdir -p ~/.iobroker\n\twrite_to_file \"$NPM_COMMAND_FIX\" \"$NPM_COMMAND_FIX_PATH\"\n\t# Activate the change\n\tsource \"$NPM_COMMAND_FIX_PATH\"\n\n\t# Make sure the bashrc file exists - it should, but you never know...\n\ttouch ~/.bashrc\n\t# If .bashrc does not contain the source command, we need to add it\n\tsudo grep -q -E \"^source ~/\\.iobroker/npm_command_fix\" ~/.bashrc &> /dev/null\n\tif [ $? -ne 0 ]; then\n\t\techo \"$BASHRC_LINES\" >> ~/.bashrc\n\tfi\n}\n\nchange_npm_command_root() {\n\t# patches the npm command for the ROOT user (always! (independent of which user installed iobroker)),\n\t# so that it is executed as `iobroker` when inside the iobroker directory\n\tNPM_COMMAND_FIX_PATH=/root/.iobroker/npm_command_fix\n\tNPM_COMMAND_FIX=$(cat <<- EOF\n\t\t# While inside the iobroker directory, execute npm as iobroker\n\t\tfunction npm() {\n\t\t\t__real_npm=\\$(which npm)\n\t\t\tif [[ \\$(pwd) == \"$IOB_DIR\"* ]]; then\n\t\t\t\tsudo -H -u $IOB_USER \\$__real_npm \\$*\n\t\t\telse\n\t\t\t\teval \\$__real_npm \\$*\n\t\t\tfi\n\t\t}\n\t\tEOF\n\t)\n\tBASHRC_LINES=$(cat <<- EOF\n\n\t\t# Forces npm to run as $IOB_USER when inside the iobroker installation dir\n\t\tsource /root/.iobroker/npm_command_fix\n\t\tEOF\n\t)\n\n\tsudo mkdir -p /root/.iobroker\n\twrite_to_file \"$NPM_COMMAND_FIX\" \"$NPM_COMMAND_FIX_PATH\"\n\t# Activate the change\n\tif [ \"$IS_ROOT\" = \"true\" ]; then\n\t\tsource \"$NPM_COMMAND_FIX_PATH\"\n\tfi\n\n\t# Make sure the bashrc file exists - it should, but you never know...\n\tsudo touch /root/.bashrc\n\t# If .bashrc does not contain the source command, we need to add it\n\tsudo grep -q -E \"^source /root/\\.iobroker/npm_command_fix\" /root/.bashrc &> /dev/null\n\tif [ $? -ne 0 ]; then\n\t\tappend_to_file \"$BASHRC_LINES\" /root/.bashrc\n\tfi\n}\n\nenable_cli_completions() {\n\t# Performs the necessary configuration for CLI auto completion\n\tCOMPLETIONS_PATH=~/.iobroker/iobroker_completions\n\tCOMPLETIONS=$(cat <<- 'EOF'\n\t\tiobroker_yargs_completions()\n\t\t{\n\t\t\tlocal cur_word args type_list\n\n\t\t\tcur_word=\"${COMP_WORDS[COMP_CWORD]}\"\n\t\t\targs=(\"${COMP_WORDS[@]}\")\n\n\t\t\t# ask yargs to generate completions.\n\t\t\ttype_list=$(iobroker --get-yargs-completions \"${args[@]}\")\n\n\t\t\tCOMPREPLY=( $(compgen -W \"${type_list}\" -- ${cur_word}) )\n\n\t\t\t# if no match was found, fall back to filename completion\n\t\t\tif [ ${#COMPREPLY[@]} -eq 0 ]; then\n\t\t\tCOMPREPLY=()\n\t\t\tfi\n\n\t\t\treturn 0\n\t\t}\n\t\tcomplete -o default -F iobroker_yargs_completions iobroker\n\t\tcomplete -o default -F iobroker_yargs_completions iob\n\t\tEOF\n\t)\n\tBASHRC_LINES=$(cat <<- EOF\n\n\t\t# Enable ioBroker command auto-completion\n\t\tsource ~/.iobroker/iobroker_completions\n\t\tEOF\n\t)\n\n\tmkdir -p ~/.iobroker\n\twrite_to_file \"$COMPLETIONS\" \"$COMPLETIONS_PATH\"\n\t# Activate the change\n\tsource \"$COMPLETIONS_PATH\"\n\n\t# Make sure the bashrc file exists - it should, but you never know...\n\ttouch ~/.bashrc\n\t# If .bashrc does not contain the source command, we need to add it\n\tsudo grep -q -E \"^source ~/\\.iobroker/iobroker_completions\" ~/.bashrc &> /dev/null\n\tif [ $? -ne 0 ]; then\n\t\techo \"$BASHRC_LINES\" >> ~/.bashrc\n\tfi\n}\n\nset_root_permissions() {\n\tfile=\"$1\"\n\t$SUDOX chown root:$ROOT_GROUP $file\n\t$SUDOX chmod 755 $file\n}\n\nmake_executable() {\n\tfile=\"$1\"\n\t$SUDOX chmod 755 $file\n}\n\nchange_owner() {\n\tuser=\"$1\"\n\tfile=\"$2\"\n\tif [ \"$HOST_PLATFORM\" == \"osx\" ]; then\n\t\towner=\"$user\"\n\telse\n\t\towner=\"$user:$user\"\n\tfi\n\tcmdline=\"$SUDOX chown\"\n\tif [ -d $file ]; then\n\t\t# recursively chown directories\n\t\tcmdline=\"$cmdline -R\"\n\telif [ -L $file ]; then\n\t\t# change ownership of symbolic links\n\t\tcmdline=\"$cmdline -h\"\n\tfi\n\t$cmdline $owner $file\n}\n\nfunction add2sudoers() {\n\tlocal xsudoers=$1\n\tshift\n\txarry=(\"$@\")\n\tfor cmd in \"${xarry[@]}\"; do\n\t\t# Test each command if and where it is installed\n\t\tcmd_bin=$(echo $cmd | cut -d ' ' -f1)\n\t\tcmd_path=$(which $cmd_bin 2> /dev/null)\n\t\tif [ $? -eq 0 ]; then\n\t\t\t# Then add the command to SUDOERS_CONTENT\n\t\t\tfull_cmd=$(echo \"$cmd\" | sed -e \"s|$cmd_bin|$cmd_path|\")\n\t\t\tSUDOERS_CONTENT+=$xsudoers\"NOPASSWD: $full_cmd\\n\"\n\t\tfi\n\tdone\n}\n\ncreate_user_linux() {\n\tusername=\"$1\"\n\tid \"$username\" &> /dev/null;\n\tif [ $? -ne 0 ]; then\n\t\t# User does not exist\n\t\t$SUDOX useradd -m -s /usr/sbin/nologin \"$username\"\n\t\techo \"User $username created\"\n\tfi\n\t# Add the current non-root user to the iobroker group so he can access the iobroker dir\n\tif [ \"$username\" != \"$USER\" ] && [ \"$IS_ROOT\" = false ]; then\n\t\tsudo usermod -a -G $username $USER\n\tfi\n\n\tSUDOERS_CONTENT=\"$username ALL=(ALL) ALL\\n\"\n\t# Add the user to all groups we need and give him passwordless sudo privileges\n\t# Define which commands iobroker may execute as sudo without password\n\tdeclare -a iob_commands=(\n\t\t\"shutdown\" \"halt\" \"poweroff\" \"reboot\"\n\t\t\"systemctl start\" \"systemctl stop\"\n\t\t\"mount\" \"umount\" \"systemd-run\"\n\t\t\"apt-get\" \"apt\" \"dpkg\" \"make\"\n\t\t\"ping\" \"fping\"\n\t\t\"arp-scan\"\n\t\t\"setcap\"\n                \"nmcli\"\n\t\t\"vcgencmd\"\n\t\t\"cat\"\n\t\t\"df\"\n\t\t\"mysqldump\"\n\t\t\"ldconfig\"\n\t)\n\tadd2sudoers \"$username ALL=(ALL) \" \"${iob_commands[@]}\"\n\n\t# Additionally, define which iobroker-related commands may be executed by every user\n\tdeclare -a all_user_commands=(\n\t\t\"systemctl start iobroker\"\n\t\t\"systemctl stop iobroker\"\n\t\t\"systemctl restart iobroker\"\n\t)\n\tadd2sudoers \"ALL ALL=\" \"${all_user_commands[@]}\"\n\n\t# Furthermore, allow all users to execute node iobroker.js as iobroker\n\tif [ \"$IOB_USER\" != \"$USER\" ]; then\n\t\tadd2sudoers \"ALL ALL=($IOB_USER) \" \"node $CONTROLLER_DIR/iobroker.js *\"\n\tfi\n\n\tSUDOERS_FILE=\"/etc/sudoers.d/iobroker\"\n\t$SUDOX rm -f $SUDOERS_FILE\n\techo -e \"$SUDOERS_CONTENT\" > ~/temp_sudo_file\n\t$SUDOX visudo -c -q -f ~/temp_sudo_file && \\\n\t\t$SUDOX chown root:$ROOT_GROUP ~/temp_sudo_file &&\n\t\t$SUDOX chmod 440 ~/temp_sudo_file &&\n\t\t$SUDOX mv ~/temp_sudo_file $SUDOERS_FILE &&\n\t\techo \"Created $SUDOERS_FILE\"\n\t# Add the user to all groups if they exist\n\tdeclare -a groups=(\n\t\taudio\n\t\tbluetooth\n\t\tdialout\n\t\tgpio\n\t\ti2c\n  \t\tplugdev\n\t\tredis\n\t\ttty\n\t\tvideo\n\t)\n\tfor grp in \"${groups[@]}\"; do\n\t\tgetent group $grp &> /dev/null && $SUDOX usermod -a -G $grp $username\n\tdone\n}\n\ncreate_user_freebsd() {\n\tusername=\"$1\"\n\tid \"$username\" &> /dev/null\n\tif [ $? -ne 0 ]; then\n\t\t# User does not exist\n\t\t$SUDOX pw useradd -m -s /usr/sbin/nologin -n \"$username\"\n\tfi\n\t# Add the user to all groups we need and give him passwordless sudo privileges\n\t# Define which commands may be executed as sudo without password\n\tSUDOERS_CONTENT=\"$username ALL=(ALL) ALL\\n\"\n\t# Add the user to all groups we need and give him passwordless sudo privileges\n\t# Define which commands iobroker may execute as sudo without password\n\tdeclare -a iob_commands=(\n\t\t\"shutdown\" \"halt\" \"poweroff\" \"reboot\"\n\t\t\"service iobroker start\" \"service iobroker stop\"\n\t\t\"mount\" \"umount\" \"systemd-run\"\n\t\t\"pkg\" \"make\"\n\t\t\"ping\" \"fping\"\n\t\t\"arp-scan\"\n\t\t\"setcap\"\n                \"nmcli\"\n\t\t\"vcgencmd\"\n\t\t\"cat\"\n\t\t\"df\"\n\t\t\"mysqldump\"\n\t\t\"ldconfig\"\n\t)\n\tadd2sudoers \"$username ALL=(ALL) \" \"${iob_commands[@]}\"\n\n\t# Additionally, define which iobroker-related commands may be executed by every user\n\tdeclare -a all_user_commands=(\n\t\t\"service iobroker start\"\n\t\t\"service iobroker stop\"\n\t\t\"service iobroker restart\"\n\t)\n\tadd2sudoers \"ALL ALL=\" \"${all_user_commands[@]}\"\n\n\t# Furthermore, allow all users to execute node iobroker.js as iobroker\n\tif [ \"$IOB_USER\" != \"$USER\" ]; then\n\t\tadd2sudoers \"ALL ALL=($IOB_USER) \" \"node $CONTROLLER_DIR/iobroker.js *\"\n\tfi\n\n\tSUDOERS_FILE=\"/usr/local/etc/sudoers.d/iobroker\"\n\t$SUDOX rm -f $SUDOERS_FILE\n\techo -e \"$SUDOERS_CONTENT\" > ~/temp_sudo_file\n\t$SUDOX visudo -c -q -f ~/temp_sudo_file && \\\n\t\t$SUDOX chown root:$ROOT_GROUP ~/temp_sudo_file &&\n\t\t$SUDOX chmod 440 ~/temp_sudo_file &&\n\t\t$SUDOX mv ~/temp_sudo_file $SUDOERS_FILE &&\n\t\techo \"Created $SUDOERS_FILE\"\n\n\t# Add the user to all groups if they exist\n\tdeclare -a groups=(\n\t\taudio\n\t\tbluetooth\n\t\tdialout\n\t\tgpio\n\t\ti2c\n  \t\tplugdev\n\t\tredis\n\t\ttty\n\t\tvideo\n\t)\n\tfor grp in \"${groups[@]}\"; do\n\t\tgetent group $grp && $SUDOX pw group mod $grp -m $username\n\tdone\n}\n\nfix_dir_permissions() {\n\t# Give the user access to all necessary directories\n\t# When autostart is enabled, we need to fix the permissions so that `iobroker` can access it\n\techo \"Fixing directory permissions...\"\n\n\tchange_owner $IOB_USER $IOB_DIR\n\t# These commands are only for the fixer\n\tif [ \"$FIXER_VERSION\" != \"\" ]; then\n\t\t# ioBroker install dir\n\t\tchange_owner $IOB_USER $IOB_DIR\n\t\t# and the npm cache dir\n\t\tif [ -d \"/home/$IOB_USER/.npm\" ]; then\n\t\t\tchange_owner $IOB_USER \"/home/$IOB_USER/.npm\"\n\t\tfi\n\tfi\n\n\tif [ \"$IS_ROOT\" != true ]; then\n\t\tsudo usermod -a -G $IOB_USER $USER\n\tfi\n\t# Give the iobroker group write access to all files by setting the default ACL\n\t$SUDOX setfacl -Rdm g:$IOB_USER:rwx $IOB_DIR &> /dev/null && $SUDOX setfacl -Rm g:$IOB_USER:rwx $IOB_DIR &> /dev/null\n\tif [ $? -ne 0 ]; then\n\t\t# We cannot rely on default permissions on this system\n\t\techo \"${yellow}This system does not support setting default permissions.${normal}\"\n\t\techo \"${yellow}Do not use npm to manually install adapters unless you know what you are doing!${normal}\"\n\t\techo \"ACL enabled: false\" >> $INSTALLER_INFO_FILE\n\telse\n\t\techo \"ACL enabled: true\" >> $INSTALLER_INFO_FILE\n\tfi\n}\n\ninstall_nodejs() {\n\tprint_bold \"Node.js not found. Installing...\"\n\n\tif [ \"$INSTALL_CMD\" = \"yum\" ]; then\n\n \t\t$SUDOX rm -f /etc/yum.repos.d/nodesource*.repo\nSYS_ARCH=$(uname -m)\nNODEJS_REPO_CONTENT=\"[nodesource-nodejs]\nname=Node.js Packages for Linux RPM based distros - $SYS_ARCH\nbaseurl=https://rpm.nodesource.com/pub_${NODE_MAJOR}.x/nodistro/nodejs/$SYS_ARCH\npriority=9\nenabled=1\ngpgcheck=1\ngpgkey=https://rpm.nodesource.com/gpgkey/ns-operations-public.key\nmodule_hotfixes=1\"\n\n\t\tif [ \"$IS_ROOT\" = true ]; then\n\t\t\techo \"$NODEJS_REPO_CONTENT\" | tee /etc/yum.repos.d/nodesource-nodejs.repo > /dev/null\n\t\t\t$INSTALL_CMD makecache --disablerepo=\"*\" --enablerepo=\"nodesource-nodejs\"\n\t\t\t$INSTALL_CMD $INSTALL_CMD_ARGS nodejs\n        else\n\t\t\techo \"$NODEJS_REPO_CONTENT\" | $SUDOX tee /etc/yum.repos.d/nodesource-nodejs.repo > /dev/null\n\t\t\t$SUDOX $INSTALL_CMD makecache --disablerepo=\"*\" --enablerepo=\"nodesource-nodejs\"\n\t\t\t$SUDOX $INSTALL_CMD $INSTALL_CMD_ARGS nodejs\n        fi\n\telif [ \"$INSTALL_CMD\" = \"pkg\" ]; then\n\t\t$SUDOX $INSTALL_CMD $INSTALL_CMD_ARGS node\n\telif [ \"$INSTALL_CMD\" = \"brew\" ]; then\n\t\techo \"${red}Cannot install Node.js using brew.${normal}\"\n\t\techo \"Please download Node.js from $NODE_JS_BREW_URL\"\n\t\techo \"Then try to install ioBroker again!\"\n\t\texit 1\n\telse\n\t\tif [ \"$IS_ROOT\" = true ]; then\n\t\t\t$INSTALL_CMD update 2>&1 > /dev/null\n            $INSTALL_CMD $INSTALL_CMD_ARGS ca-certificates curl gnupg 2>&1 > /dev/null\n            mkdir -p /etc/apt/keyrings\n            rm /etc/apt/keyrings/nodesource.gpg 2>&1 > /dev/null\n            curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg\n            echo \"deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main\" | tee /etc/apt/sources.list.d/nodesource.list\n\t\t\techo -e \"Package: nodejs\\nPin: origin deb.nodesource.com\\nPin-Priority: 1001\" | $SUDOX tee /etc/apt/preferences.d/nodejs.pref\n\t\telse\n\t\t\t$SUDOX $INSTALL_CMD update 2>&1 > /dev/null\n            $SUDOX $INSTALL_CMD $INSTALL_CMD_ARGS ca-certificates curl gnupg 2>&1 > /dev/null\n            $SUDOX mkdir -p /etc/apt/keyrings\n            $SUDOX rm /etc/apt/keyrings/nodesource.gpg 2>&1 > /dev/null\n            curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | $SUDOX gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg\n            echo \"deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main\" | $SUDOX tee /etc/apt/sources.list.d/nodesource.list\n\t\t\techo -e \"Package: nodejs\\nPin: origin deb.nodesource.com\\nPin-Priority: 1001\" | $SUDOX tee /etc/apt/preferences.d/nodejs.pref\n\t\tfi\n\tfi\n\tinstall_package nodejs\n\n\t# Check if nodejs is now installed\n\tif [[ $(which \"node\" 2>/dev/null) != *\"/node\" ]]; then\n\t\techo \"${red}Cannot install Node.js! Please install it manually.${normal}\"\n\t\texit 1\n\telse\n\t\techo \"${bold}Node.js Installed successfully!${normal}\"\n\tfi\n}\n\ndetect_ip_address() {\n\t# Detect IP address\n\tlocal IP\n\tIP_COMMAND=$(type \"ip\" &> /dev/null && echo \"ip addr show\" || echo \"ifconfig\")\n\tif [ \"$HOST_PLATFORM\" = \"osx\" ]; then\n\t\tIP=$($IP_COMMAND | grep inet | grep -v inet6 | grep -v 127.0.0.1 | grep -Eo \"([0-9]+\\.){3}[0-9]+\" | head -1)\n\telse\n\t\tIP=$($IP_COMMAND | grep inet | grep -v inet6 | grep -v 127.0.0.1 | grep -Eo \"([0-9]+\\.){3}[0-9]+\\/[0-9]+\" | cut -d \"/\" -f1 | head -1)\n\tfi\n\techo $IP\n}\n\necho \"library: loaded\"\n"
        },
        {
          "name": "jsonltool",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib-npx",
          "type": "tree",
          "content": null
        },
        {
          "name": "node-update.sh",
          "type": "blob",
          "size": 17.595703125,
          "content": "#!/bin/bash\n# iobroker nodejs-update\n# written to help updating and fixing nodejs on linux (Debian based Distros)\n\n#To be manually changed:\nVERSION=\"2024-10-10\"\nNODE_MAJOR=20           #recommended major nodejs version for ioBroker, please adjust if the recommendation changes. This is only the target for fallback.\n\n## Excluding systems:\nSYSTDDVIRT=$(systemd-detect-virt 2>/dev/null);\nDOCKER=/opt/scripts/.docker_config/.thisisdocker #used to identify docker\nDEBIANRELEASE=$(cat /etc/debian_version);\n\nif [ -f \"$DOCKER\" ];\nthen\n        echo \"Updating Node.js in Docker is not supported, please update your Docker Container\";\n        unset LC_ALL;\n        exit 1;\nelif [ \"$(id -u)\" -eq 0 ];\nthen\n        echo -e \"This script must not be run as root! \\nPlease use your standard user!\"\n        unset LC_ALL;\n        exit 1;\nfi;\n\nif [[ $SYSTDDVIRT = \"wsl\" ]];\n        then\n        echo \"WSL is not supported.\"\n        unset LC_ALL;\n        exit 1;\nfi;\n\nif [ -z \"$(type -P apt-get)\" ]\n        then\n        echo \"Only a Debian-based Linux is supported\"\n        unset LC_ALL;\n        exit 1;\nfi;\n\nif [[ $DEBIANRELEASE = *buster* ]] || [[ $DEBIANRELEASE = 10.* ]] && [[ $1 -ne 18 ]];\n        then\n        echo -e \"Debian 10 'Buster' has reached End of Life and is not supported anymore.\\nRecent versions of nodejs won't install.\\nPlease install the current Debian Stable\"\n        unset LC_ALL;\n        exit 1;\nfi;\n\n\n### Starting the skript\necho -e \"ioBroker nodejs-update v$VERSION is starting. Please be patient!\";\nHOST=$(hostname)\nNODERECOM=$(iobroker state getValue system.host.\"$HOST\".versions.nodeNewestNext);  #reading node version from iob states. If successful, no fallback required.\nif [[ $NODERECOM != [[:digit:]]*.[[:digit:]]*.[[:digit:]]* ]]; #check if a semvered nodejs installation is found\nthen\nNODERECOMNF=1; #marker for 'no recommended version found'\nfi;\nNODEINSTMAJOR=$(nodejs -v | cut -d. -f1 | cut -c 2-3); #truncating installed nodejs version to major version\nexport LC_ALL=C; #setting LOCALES temporary to english\n\n#CUSTOM INSTALLATION\nif [[ -n $1 ]]\nthen\nNODE_MAJOR=$1;\nNODERECOM=CUSTOM;\nfi;\n# ------------------------------\n# functions for ioBroker nodejs-update - Code borrowed from 'iob installer' ;-)\n# ------------------------------\n\n\n        # Test which platform this script is being run on\n        # When adding another supported platform, also add detection for the install command\n        # HOST_PLATFORM:  Name of the platform\n        # INSTALL_CMD:      comand for package installation\n        # INSTALL_CMD_ARGS: arguments for $INSTALL_CMD to install something\n        # INSTALL_CMD_UPD_ARGS: arguments for $INSTALL_CMD to update something\n        # IOB_DIR:        Directory where iobroker should be installed\n        # IOB_USER:       The user to run ioBroker as\n\n        unamestr=$(uname)\n        case \"$unamestr\" in\n        \"Linux\")\n                HOST_PLATFORM=\"linux\"\n                INSTALL_CMD=\"apt-get\"\n                INSTALL_CMD_ARGS=\"install\"\n                if [[ $(which \"yum\" 2>/dev/null) == *\"/yum\" ]]; then\n                        INSTALL_CMD=\"yum\"\n                        # The args -y and -q have to be separate\n                        INSTALL_CMD_ARGS=\"install -q -y\"\n                fi\n                IOB_DIR=\"/opt/iobroker\"\n                IOB_USER=\"iobroker\"\n                ;;\n        \"Darwin\")\n                # OSX and Linux are the same in terms of install procedure\n                HOST_PLATFORM=\"osx\"\n                ROOT_GROUP=\"wheel\"\n                INSTALL_CMD=\"brew\"\n                INSTALL_CMD_ARGS=\"install\"\n                IOB_DIR=\"/usr/local/iobroker\"\n                IOB_USER=\"$USER\"\n                ;;\n        \"FreeBSD\")\n                HOST_PLATFORM=\"freebsd\"\n                ROOT_GROUP=\"wheel\"\n                INSTALL_CMD=\"pkg\"\n                INSTALL_CMD_ARGS=\"install\"\n                IOB_DIR=\"/opt/iobroker\"\n                IOB_USER=\"iobroker\"\n                ;;\n        *)\n                # The following should never happen, but better be safe than sorry\n                echo \"Unsupported platform $unamestr\"\n                exit 1\n                ;;\n        esac\n\n        if [[ $EUID -eq 0 ]];\n        then IS_ROOT=true;  SUDOX=\"\"\n        else IS_ROOT=false; SUDOX=\"sudo \"\n        ROOT_GROUP=\"root\"\n        USER_GROUP=\"$USER\"\n        fi\n\nif\n        [[ \"$INSTALL_CMD\" != \"apt-get\" ]];\nthen\n        echo \"Non-Debian-based Systems are not supported, exiting\";\n        unset LC_ALL;\n        exit;\nfi;\n\nDFSGREM=\"$SUDOX $INSTALL_CMD remove libnode* node-* nodejs-doc npm -qqy\"; #Deinstall DFSG-Version\n\nclear;\necho -e \"ioBroker nodejs fixer $VERSION\";\n\nif [[ -n \"$NODERECOM\" ]] && [[ \"$NODERECOM\" = [[:digit:]]*.[[:digit:]]*.[[:digit:]]* ]];\n        then\n        echo -e \"\\nRecommended nodejs-version is: $NODERECOM\";\n        echo \"Checking your installation now. Please be patient!\"\n        elif\n        [[ \"$NODERECOM\" == CUSTOM ]]\n        then\n        echo -e \"You requested to install latest version from nodejs v$1 tree.\"\n        else\n        NODERECOMNF=1;\n        echo -e \"No recommendation for a nodejs version found on your system. We recommend to install latest version from nodejs v$NODE_MAJOR tree.\";\nfi;\n        echo \"\";\n        echo \"Your current setup is:\";\n\nif [[ -f /usr/bin/nodejs ]];\n        then\n                echo -e \"$(type -p nodejs) \\t$(nodejs -v)\";\nfi;\n        echo -e \"$(type -p node) \\t\\t$(node -v)\";\n        echo -e \"$(type -p npm) \\t\\t$(npm -v)\";\n        echo -e \"$(type -p npx) \\t\\t$(npx -v)\";\n\nif [[ -f /usr/bin/corepack ]]\n        then\n                echo -e \"$(type -p corepack) \\t$(corepack -v)\";\nfi;\n\nPATHNODEJS=$(type -p nodejs);\nPATHNODE=$(type -p node);\nPATHNPM=$(type -p npm);\nPATHNPX=$(type -p npx);\n\nif [[ -f /usr/bin/corepack ]]; then\nPATHCOREPACK=$(type -p corepack);\nfi;\n\nif [[ -f /usr/bin/nodejs ]]; then\nVERNODEJS=$(nodejs -v);\nfi;\n\nVERNODE=$(node -v);\nVERNPM=$(npm -v);\nVERNPX=$(npx -v);\nNOTCORRSTRG=\"\\n\\033[0;31m*** nodejs is NOT correctly installed ***\\033[0m\"\nif\n        [[ -f /usr/bin/nodejs && \"$PATHNODEJS\" != \"/usr/bin/nodejs\" ]];\n        then\n                NODENOTCORR=1\n                echo -e \"$NOTCORRSTRG\";\n        elif\n        [[ \"$PATHNODE\" != \"/usr/bin/node\" ]];\n        then\n                NODENOTCORR=1\n                echo -e \"$NOTCORRSTRG\";\n        elif\n        [[ \"$PATHNPM\" != \"/usr/bin/npm\" ]];\n        then\n                NODENOTCORR=1\n                echo -e \"$NOTCORRSTRG\";\n        elif\n        [[ \"$PATHNPX\" != \"/usr/bin/npx\" ]];\n        then\n                NODENOTCORR=1\n                echo -e \"$NOTCORRSTRG\";\n        elif\n        [[ -f /usr/bin/nodejs && \"$VERNODEJS\" != \"$VERNODE\" ]];\n        then\n                NODENOTCORR=1\n                echo -e \"$NOTCORRSTRG\";\n        elif\n        [[ \"$VERNPM\" != \"$VERNPX\" ]];\n        then\n                NODENOTCORR=1\n                echo -e \"$NOTCORRSTRG\";\n        elif\n        [[ -f /usr/bin/corepack && \"$PATHCOREPACK\" != \"/usr/bin/corepack\" ]];\n        then\n                NODENOTCORR=1\n                echo -e \"$NOTCORRSTRG\";\nelse\n                echo \"\";\nfi\necho \"We found these nodejs versions available for installation:\";\necho \"\";\n        apt-cache policy nodejs;\necho \"\";\n\n# DETECTING WRONG PATHS\nif\n        [[ \"$NODENOTCORR\" -eq 1 ]]\n        then\n                echo -e \"\\n\\nYour nodejs-Installation seems to be faulty. Shall we try to fix it?\";\n                echo \"Press <y> to continue or any other key to quit\";\n                read -r -s -n 1 charpaths;\n        if\n                        [[ \"$charpaths\" = \"y\" ]] || [[ \"$charpaths\" = \"Y\" ]]\n                then\n                        echo -e \"\\nFixing your nodejs setup\";\n                if\n                                [[ -f /usr/bin/nodejs && \"$PATHNODEJS\" != \"/usr/bin/nodejs\" ]];\n                        then\n                                echo -e \"*** Deleting $PATHNODEJS ***\";\n                                $SUDOX rm \"$(type -p nodejs)\";\n                fi\n                if\n                                [[ \"$PATHNODE\" != \"/usr/bin/node\" ]];\n                        then\n                                echo -e \"*** Deleting $PATHNODE ***\";\n                                $SUDOX rm \"$(type -p node)\";\n                fi\n                if\n                                [[ \"$PATHNPM\" != \"/usr/bin/npm\" ]];\n                        then\n                                echo -e \"*** Deleting $PATHNPM ***\";\n                                $SUDOX rm \"$(type -p npm)\";\n                fi\n                if\n                                [[ \"$PATHNPX\" != \"/usr/bin/npx\" ]];\n                        then\n                                echo -e \"*** Deleting $PATHNPX ***\";\n                                $SUDOX rm \"$(type -p npx)\";\n                fi\n                if\n                        [[ -f /usr/bin/corepack && \"$PATHCOREPACK\" != \"/usr/bin/corepack\" ]];\n                        then\n                                echo -e \"*** Deleting $PATHCOREPACK ***\";\n                                $SUDOX rm \"$(type -p corepack)\";\n                fi\n                echo -e \"\\nWrong paths have been fixed. Run 'iob diag' or 'iob nodejs-update' again to check if your installation is fine now\";\n        fi\n                else\n        echo -e \"\\n\\n\\033[32mNothing to do\\033[0m - Your installation is using the correct paths.\";\nfi;\n\nif\n        [[ \"$INSTALL_CMD\" != \"apt-get\" ]];\nthen\n        echo \"Non-Debian-based Systems are not supported, exiting\";\n        unset LC_ALL;\n        exit;\nfi;\nVERNODE=$(node -v);\nif [[ \"$VERNODE\" = \"v$NODERECOM\" ]];\nthen\necho -e \"\\033[32mNothing to do\\033[0m - Your version is the recommended one.\";\necho -e \"\\n***You can now keep your whole system up-to-date using the usual 'sudo apt update && sudo apt full-upgrade' commands. ***\"\necho \"*** DO NOT USE node version managers like 'nvm', 'n' and others in parallel. They will break your current installation! ***\"\necho -e \"\\n *** DO NOT use 'nodejs-update' as part of a regular update process! ***\";\nunset LC_ALL;\nif [[ -f \"/var/run/reboot-required\" ]];\n        then\n        echo \"\";\n        echo \"This system needs to be REBOOTED NOW!\";\n        echo \"\";\nfi;\nexit;\nfi;\nif [[ \"$VERNODE\" != \"v$NODERECOM\" ]] && [[ \"$NODERECOM\" == [[:digit:]]*.[[:digit:]]*.[[:digit:]]* ]];\nthen\n        echo -e \"\\nYou are running nodejs $VERNODE. Do you want to install recommended version $NODERECOM? \";\n        echo -e \"\\nPress <y> to continue or any other key to quit\";\n        read -r -s -n 1 char;\n        if\n                [[ \"$char\" = \"y\" ]] || [[ \"$char\" = \"Y\" ]]\n        then\n                echo \"Trying to fix your installation now. Please be patient.\"\n                # Finding nodesource.gpg or nodesource.key and deleting. Current key is pulled in later.\n                $SUDOX rm \"$($SUDOX find / \\( -path /proc -o -path /dev -o -path /sys -o -path /lost+found -o -path /mnt -o -path /run \\) -prune -false -o -name nodesource.[gk]* -print) 2> /dev/null\";\n                # Deleting nodesource.list Will be recreated later.\n                $SUDOX rm /etc/apt/sources.list.d/nodesource.lis* 2> /dev/null;\n        else\n                echo \"We are not fixing your installation. Exiting.\";\n                        if [[ -f \"/var/run/reboot-required\" ]];\n        then\n        echo \"\";\n        echo \"This system needs to be REBOOTED NOW!\";\n        echo \"\";\n        fi;\n        exit;\n        fi;\nfi;\n\nif\n        [[ \"$VERNODE\" != \"v$NODERECOM\" ]] && [[ \"$NODERECOM\" != [[:digit:]]*.[[:digit:]]*.[[:digit:]]* ]];\n        then\n        echo -e \"\\nYou are running nodejs $VERNODE. Do you want to install latest version from nodejs v.$NODE_MAJOR tree? \";\n        echo -e \"\\nPress <y> to continue or any other key to quit\";\n        read -r -s -n 1 char;\n        if\n                [[ \"$char\" = \"y\" ]] || [[ \"$char\" = \"Y\" ]]\n        then\n                echo \"Trying to fix your installation now. Please be patient.\"\n                # Finding nodesource.gpg or nodesource.key and deleting. Current key is pulled in later.\n                $SUDOX rm \"$($SUDOX find / \\( -path /proc -o -path /dev -o -path /sys -o -path /lost+found -o -path /mnt \\) -prune -false -o -name nodesource.[gk]* -print) 2> /dev/null\";\n                # Deleting nodesource.list Will be recreated later.\n                $SUDOX rm /etc/apt/sources.list.d/nodesource.lis* 2> /dev/null;\n        else\n                echo \"We are not fixing your installation. Exiting.\";\n\n        if [[ -f \"/var/run/reboot-required\" ]];\n                then\n                echo \"\";\n                echo \"This system needs to be REBOOTED NOW!\";\n                echo \"\";\n        fi;\n        exit;\n\n        fi;\nfi;\n\n        if [ \"$SYSTDDVIRT\" != \"none\" ]; then\n                echo -e \"\\nVirtualization: $SYSTDDVIRT\";\n                                iob stop &\n                                # sudo pkill ^io;\n                        else\n                                iob stop &\n                        fi;\n\n                echo \"Waiting for ioBroker to shut down - Give me a minute...\"\n                BAR='############################################################'   # this is full bar, e.g. 60 chars\n                for i in {1..60}; do\n                        echo -ne \"\\r${BAR:0:$i}\" # print $i chars of $BAR from 0 position\n                        sleep 1                 # wait 1s between \"frames\"\n                done;\n                echo \"\";\n                        echo \"\";\n                        echo \"Removing dfsg-nodejs\";\n                        eval \"$DFSGREM\";\n                        echo \"\";\n\n                        echo -e \"\\n*** These repos are active on your system:\";\n                        $SUDOX \"$INSTALL_CMD\" update;\n                        echo -e \"\\n*** Installing ca-certificates, curl and gnupg, just in case they are missing.\";\n                        $SUDOX \"$INSTALL_CMD\" install -qq ca-certificates curl gnupg;\n                        # Installing the key for nodesource repository\n                        $SUDOX mkdir -p /etc/apt/keyrings;\n                        curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | $SUDOX gpg --dearmor --yes -o /etc/apt/keyrings/nodesource.gpg;\n                        # Setting up a fresh & clean nodesource.list\n                        echo -e \"\\n*** Creating new /etc/apt/sources.list.d/nodesource.list and pinning source\"\n                        echo \"\";\n                        echo \"deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_${NODE_MAJOR}.x nodistro main\" | $SUDOX tee /etc/apt/sources.list.d/nodesource.list;\n                        echo -e \"Package: nodejs\\nPin: origin deb.nodesource.com\\nPin-Priority: 1001\" | sudo tee /etc/apt/preferences.d/nodejs.pref\n                        echo -e \"\\n*** These repos are active after the adjustments:\"\n                        $SUDOX \"$INSTALL_CMD\" update;\n\n                        echo \"\";\n                        echo \"Installing nodejs now!\";\n                        echo \"\";\n                        if [ \"$NODEINSTMAJOR\" -gt \"$NODE_MAJOR\" ] && [[ \"$NODERECOM\" == [[:digit:]]*.[[:digit:]]*.[[:digit:]]* ]]\n                                then\n                                $SUDOX $INSTALL_CMD install --reinstall --allow-downgrades -qq nodejs=\"$NODERECOM\"-1nodesource1 ;\n                                elif\n                                [[ \"$NODERECOMNF\" -eq 1 ]]\n                                then\n                                NODERECOM=$NODE_MAJOR.0.0\n\n                                echo \"Exact recommended version unknown, installing a fallback!\";\n                                $SUDOX $INSTALL_CMD install --reinstall --allow-downgrades -qq nodejs=\"$NODERECOM\"-1nodesource1 ;\n                                echo -e \"\\nUpdating fallback to latest nodejs v$NODE_MAJOR release\";\n                                $SUDOX $INSTALL_CMD -qq update;\n                                $SUDOX $INSTALL_CMD -qq --allow-downgrades upgrade nodejs;\n                                VERNODE=$(node -v);\n                                echo -e \"$VERNODE has been installed! You are using the latest version now!\";\n                                fi;\n\n                                if [ \"$NODEINSTMAJOR\" -lt \"$NODE_MAJOR\" ]\n                                then\n                                        $SUDOX $INSTALL_CMD -qq update;\n                                        $SUDOX $INSTALL_CMD -qq --allow-downgrades upgrade nodejs;\n                                fi;\n\n                if [ \"$SYSTDDVIRT\" != \"none\" ]; then\n                        echo \"Installing nodejs now!\";\n                        $SUDOX $INSTALL_CMD update -qq;\n                        $SUDOX $INSTALL_CMD -qq --allow-downgrades upgrade nodejs;\n                        echo -e \"\\n*** You need to manually restart your container/virtual machine now! *** \";\n                        echo -e \"\\nWe tried our best to fix your nodejs. Please run 'iob diag' again to verify.\";\n                        unset LC_ALL;\n                        if [[ -f \"/var/run/reboot-required\" ]];\n                                then\n                                echo \"\";\n                                echo \"This system needs to be REBOOTED NOW!\";\n                                echo \"\";\n                        fi;\n                        exit;\n                else\n                        echo \"Installing the nodejs!\";\n                        $SUDOX $INSTALL_CMD update -qq;\n                        $SUDOX $INSTALL_CMD -qq --allow-downgrades upgrade nodejs;\n                        echo -e \"\\nWe tried our best to fix your nodejs. Please run iob diag again to verify.\";\n                        echo -e \"\\n*** RESTARTING ioBroker NOW! *** \\n Please refresh or restart your browser in a few moments.\";\n                        iob restart;\n                fi;\n\n                echo \"\";\n\n        if [[ -f \"/var/run/reboot-required\" ]];\n        then\n        echo \"\";\n        echo \"This system needs to be REBOOTED NOW!\";\n        echo \"\";\n        fi;\n        unset LC_ALL;\nexit;\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.8662109375,
          "content": "{\n  \"name\": \"@iobroker/install\",\n  \"version\": \"6.0.1\",\n  \"optionalDependencies\": {\n    \"dotenv\": \"^16.4.5\",\n    \"windows-shortcuts\": \"^0.1.6\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"dependencies\": {\n    \"fs-extra\": \"^11.2.0\",\n    \"semver\": \"^7.6.3\",\n    \"yargs\": \"^17.7.2\"\n  },\n  \"files\": [\n    \"img/logos/ioBroker_Logo_Long_Vector.svg\",\n    \"img/architecture.png\",\n    \"lib-npx\",\n    \"install\",\n    \"iob.bat\",\n    \"iobroker.bat\",\n    \"LICENSE\"\n  ],\n  \"main\": \"./lib-npx/install.js\",\n  \"bin\": {\n    \"iobroker\": \"./lib-npx/install.js\"\n  },\n  \"homepage\": \"http://iobroker.net\",\n  \"description\": \"automate your life - platform\",\n  \"keywords\": [\n    \"ioBroker\",\n    \"Smarthome\",\n    \"Home Automation\",\n    \"Smart Metering\",\n    \"Homematic\",\n    \"Hue\",\n    \"KNX\",\n    \"Z-Wave\",\n    \"ZigBee\",\n    \"Bidcos\",\n    \"TV\",\n    \"Sonos\",\n    \"AV Receiver\"\n  ],\n  \"bugs\": {\n    \"url\": \"https://github.com/ioBroker/ioBroker/issues\"\n  },\n  \"licenses\": [\n    {\n      \"type\": \"MIT\",\n      \"url\": \"https://github.com/ioBroker/ioBroker/blob/master/LICENSE\"\n    }\n  ],\n  \"author\": \"bluefox <dogafox@gmail.com>\",\n  \"contributors\": [\n    \"bluefox <dogafox@gmail.com>\",\n    \"hobbyquaker\",\n    \"AlCalzone <d.griesel@gmx.net>\",\n    \"Apollon77 <iobroker@fischer-ka.de>\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/ioBroker/ioBroker\"\n  },\n  \"config\": {\n    \"unsafe-perm\": true\n  },\n  \"scripts\": {\n    \"deploy\": \"node tasks\",\n    \"make-fix\": \"node tasks --fix\",\n    \"release\": \"release-script\",\n    \"release-patch\": \"release-script patch --yes\",\n    \"release-minor\": \"release-script minor --yes\",\n    \"release-major\": \"release-script major --yes\"\n  },\n  \"license\": \"MIT\",\n  \"devDependencies\": {\n    \"@alcalzone/release-script\": \"^3.8.0\",\n    \"@alcalzone/release-script-plugin-license\": \"^3.7.0\",\n    \"eslint\": \"^9.11.1\",\n    \"mocha\": \"^10.7.3\",\n    \"chai\": \"^4.5.0\",\n    \"ssh2\": \"^1.16.0\"\n  }\n}\n"
        },
        {
          "name": "tasks.js",
          "type": "blob",
          "size": 4.794921875,
          "content": "const { readFileSync, writeFileSync, existsSync, mkdirSync } = require('node:fs');\nconst Stream = require('node:stream');\nconst { Client } = require('ssh2');\n\nconst dist = `${__dirname}/dist/`;\n\nconst SFTP_HOST = process.env.SFTP_HOST;\nconst SFTP_PORT = process.env.SFTP_PORT;\nconst SFTP_USER = process.env.SFTP_USER;\nconst SFTP_PASS = process.env.SFTP_PASS;\nconst DEBUG     = process.env.DEBUG     === 'true' || process.env.DEBUG     === true;\nconst FAST_TEST = process.env.FAST_TEST === 'true' || process.env.FAST_TEST === true;\n\nconst SFTP_CONFIG = {\n    host:     SFTP_HOST,\n    port:     parseInt(SFTP_PORT, 10),\n    username: SFTP_USER,\n    password: SFTP_PASS,\n};\n\nfunction writeSftp(sftp, fileName, data, cb) {\n    const readStream = new Stream.PassThrough();\n\n    readStream.end(Buffer.from(data));\n\n    const writeStream = sftp.createWriteStream(fileName);\n\n    writeStream.on('close', () => {\n        DEBUG && console.log(`${new Date().toISOString()} ${fileName} - file transferred successfully`);\n        readStream.end();\n        if (cb) {\n            cb();\n            cb = null;\n        }\n    });\n\n    writeStream.on('end', () => {\n        DEBUG && console.log('sftp connection closed');\n        readStream.close();\n        if (cb) {\n            cb();\n            cb = null;\n        }\n    });\n\n    // initiate transfer of a file\n    readStream.pipe(writeStream);\n}\n\nfunction uploadOneFile(fileName, data) {\n    return new Promise((resolve, reject) => {\n        const conn = new Client();\n        conn.on('ready', () =>\n            conn.sftp((err, sftp) => {\n                if (err) {\n                    return reject(err);\n                }\n\n                if (FAST_TEST) {\n                    console.log(`Simulate upload of ${fileName}`);\n                    return resolve();\n                }\n\n                // The file must be deleted, because of the new file smaller; the rest of the old file will stay.\n                checkAndDeleteIfExist(sftp, fileName, () =>\n                    writeSftp(sftp, fileName, data, () => {\n                        sftp.end();\n                        conn.end();\n                        resolve();\n                    }));\n            }))\n            .connect(SFTP_CONFIG);\n    });\n}\n\nfunction checkAndDeleteIfExist(sftp, fileName, cb) {\n    sftp.exists(fileName, doExist => {\n        if (doExist) {\n            sftp.unlink(fileName, cb);\n        } else {\n            cb();\n        }\n    });\n}\n\nfunction replaceLib(text, lib) {\n    const lines = text.split('\\n');\n    const newLines = [];\n    let ignore = false;\n    for (let i = 0; i < lines.length; i++) {\n        if (lines[i].includes('# get and load the LIB => START')) {\n            ignore = true;\n            newLines.push(lib);\n        } else if (lines[i].includes('# get and load the LIB => END')) {\n            ignore = false;\n        } else if (!ignore) {\n            newLines.push(lines[i]);\n        }\n    }\n    return newLines.join('\\n');\n}\n\nfunction deploy() {\n    const install = readFileSync(`${dist}install.sh`);\n    const fix = readFileSync(`${dist}fix.sh`);\n    const diag = readFileSync(`${dist}diag.sh`);\n    const nodeUpdate = readFileSync(`${dist}node-update.sh`);\n\n    return uploadOneFile('/install.sh', install)\n        .then(() => uploadOneFile('/fix.sh', fix))\n        .then(() => uploadOneFile('/diag.sh', diag))\n        .then(() => uploadOneFile('/node-update.sh', nodeUpdate));\n}\n\nfunction create() {\n    if (!existsSync(dist)) {\n        mkdirSync(dist);\n    }\n\n    const install  = readFileSync(`${__dirname}/installer.sh`).toString('utf8');\n    const fix      = readFileSync(`${__dirname}/fix_installation.sh`).toString('utf8');\n    const lib      = readFileSync(`${__dirname}/installer_library.sh`).toString('utf8');\n    const diag     = readFileSync(`${__dirname}/diag.sh`).toString('utf8');\n    const nodeUpdate = readFileSync(`${__dirname}/node-update.sh`).toString('utf8');\n\n    // replace\n    // LIB_NAME=\"installer_library.sh\"\n    // LIB_URL=\"https://raw.githubusercontent.com/ioBroker/ioBroker/stable-installer/$LIB_NAME\"\n\n    writeFileSync(`${dist}install.sh`, replaceLib(install, lib));\n    writeFileSync(`${dist}fix.sh`, replaceLib(fix, lib));\n    writeFileSync(`${dist}diag.sh`, diag);\n    writeFileSync(`${dist}node-update.sh`, nodeUpdate);\n}\n\nfunction fix() {\n    const pack = require('./package.json');\n    pack.name = '@iobroker/fix';\n    writeFileSync(`${__dirname}/package.json`, JSON.stringify(pack, null, 2));\n}\n\nif (process.argv.includes('--deploy')) {\n    deploy()\n        .catch(e => {\n            console.error(`Cannot deploy: ${e}`);\n            process.exit(1);\n        });\n} else if (process.argv.includes('--create')) {\n    create();\n} else if (process.argv.includes('--fix')) {\n    fix();\n} else {\n    create();\n    deploy()\n        .catch(e => {\n            console.error(`Cannot deploy: ${e}`);\n            process.exit(1);\n        });\n}\n"
        },
        {
          "name": "test.js",
          "type": "blob",
          "size": 1.0537109375,
          "content": "const http = require('node:http');\n\nfunction checkAdmin() {\n    return new Promise(resolve => http.get('http://localhost:8081')\n        .on('response', response => {\n            let body = '';\n            response.on('data', chunk => body += chunk.toString('utf8'));\n            response.on('end', () => {\n                if (body.includes('<title>Admin</title>')) {\n                    console.log('ioBroker admin is running');\n                    resolve(true);\n                } else {\n                    console.error('ioBroker admin is NOT running');\n                    resolve(false);\n                }\n            });\n        })\n        .on('error', () => {\n            console.log('Cannot reach localhost:8081');\n            resolve(false);\n        }));\n}\n\nfunction wait() {\n    return new Promise(resolve => setTimeout(() => resolve(), 5000));\n}\n\nasync function test() {\n    for (let i = 0; i < 10; i++) {\n        let result = await checkAdmin();\n        if (result) {\n            process.exit(0);\n        }\n        await wait();\n    }\n    process.exit(1);\n}\n\ntest();\n"
        },
        {
          "name": "versions.json",
          "type": "blob",
          "size": 0.091796875,
          "content": "{\n    \"nodeJsAccepted\": [16, 18, 20],\n    \"nodeJsRecommended\": 20,\n    \"npmRecommended\": 10\n}\n"
        },
        {
          "name": "wiki",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}