{
  "metadata": {
    "timestamp": 1736568491630,
    "page": 471,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ3OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "garywill/linux-router",
      "stars": 1775,
      "defaultBranch": "master",
      "files": [
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 25.908203125,
          "content": "                  GNU LESSER GENERAL PUBLIC LICENSE\n                       Version 2.1, February 1999\n\n Copyright (C) 1991, 1999 Free Software Foundation, Inc.\n 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n[This is the first released version of the Lesser GPL.  It also counts\n as the successor of the GNU Library Public License, version 2, hence\n the version number 2.1.]\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicenses are intended to guarantee your freedom to share and change\nfree software--to make sure the software is free for all its users.\n\n  This license, the Lesser General Public License, applies to some\nspecially designated software packages--typically libraries--of the\nFree Software Foundation and other authors who decide to use it.  You\ncan use it too, but we suggest you first think carefully about whether\nthis license or the ordinary General Public License is the better\nstrategy to use in any particular case, based on the explanations below.\n\n  When we speak of free software, we are referring to freedom of use,\nnot price.  Our General Public Licenses are designed to make sure that\nyou have the freedom to distribute copies of free software (and charge\nfor this service if you wish); that you receive source code or can get\nit if you want it; that you can change the software and use pieces of\nit in new free programs; and that you are informed that you can do\nthese things.\n\n  To protect your rights, we need to make restrictions that forbid\ndistributors to deny you these rights or to ask you to surrender these\nrights.  These restrictions translate to certain responsibilities for\nyou if you distribute copies of the library or if you modify it.\n\n  For example, if you distribute copies of the library, whether gratis\nor for a fee, you must give the recipients all the rights that we gave\nyou.  You must make sure that they, too, receive or can get the source\ncode.  If you link other code with the library, you must provide\ncomplete object files to the recipients, so that they can relink them\nwith the library after making changes to the library and recompiling\nit.  And you must show them these terms so they know their rights.\n\n  We protect your rights with a two-step method: (1) we copyright the\nlibrary, and (2) we offer you this license, which gives you legal\npermission to copy, distribute and/or modify the library.\n\n  To protect each distributor, we want to make it very clear that\nthere is no warranty for the free library.  Also, if the library is\nmodified by someone else and passed on, the recipients should know\nthat what they have is not the original version, so that the original\nauthor's reputation will not be affected by problems that might be\nintroduced by others.\n\f\n  Finally, software patents pose a constant threat to the existence of\nany free program.  We wish to make sure that a company cannot\neffectively restrict the users of a free program by obtaining a\nrestrictive license from a patent holder.  Therefore, we insist that\nany patent license obtained for a version of the library must be\nconsistent with the full freedom of use specified in this license.\n\n  Most GNU software, including some libraries, is covered by the\nordinary GNU General Public License.  This license, the GNU Lesser\nGeneral Public License, applies to certain designated libraries, and\nis quite different from the ordinary General Public License.  We use\nthis license for certain libraries in order to permit linking those\nlibraries into non-free programs.\n\n  When a program is linked with a library, whether statically or using\na shared library, the combination of the two is legally speaking a\ncombined work, a derivative of the original library.  The ordinary\nGeneral Public License therefore permits such linking only if the\nentire combination fits its criteria of freedom.  The Lesser General\nPublic License permits more lax criteria for linking other code with\nthe library.\n\n  We call this license the \"Lesser\" General Public License because it\ndoes Less to protect the user's freedom than the ordinary General\nPublic License.  It also provides other free software developers Less\nof an advantage over competing non-free programs.  These disadvantages\nare the reason we use the ordinary General Public License for many\nlibraries.  However, the Lesser license provides advantages in certain\nspecial circumstances.\n\n  For example, on rare occasions, there may be a special need to\nencourage the widest possible use of a certain library, so that it becomes\na de-facto standard.  To achieve this, non-free programs must be\nallowed to use the library.  A more frequent case is that a free\nlibrary does the same job as widely used non-free libraries.  In this\ncase, there is little to gain by limiting the free library to free\nsoftware only, so we use the Lesser General Public License.\n\n  In other cases, permission to use a particular library in non-free\nprograms enables a greater number of people to use a large body of\nfree software.  For example, permission to use the GNU C Library in\nnon-free programs enables many more people to use the whole GNU\noperating system, as well as its variant, the GNU/Linux operating\nsystem.\n\n  Although the Lesser General Public License is Less protective of the\nusers' freedom, it does ensure that the user of a program that is\nlinked with the Library has the freedom and the wherewithal to run\nthat program using a modified version of the Library.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.  Pay close attention to the difference between a\n\"work based on the library\" and a \"work that uses the library\".  The\nformer contains code derived from the library, whereas the latter must\nbe combined with the library in order to run.\n\f\n                  GNU LESSER GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any software library or other\nprogram which contains a notice placed by the copyright holder or\nother authorized party saying it may be distributed under the terms of\nthis Lesser General Public License (also called \"this License\").\nEach licensee is addressed as \"you\".\n\n  A \"library\" means a collection of software functions and/or data\nprepared so as to be conveniently linked with application programs\n(which use some of those functions and data) to form executables.\n\n  The \"Library\", below, refers to any such software library or work\nwhich has been distributed under these terms.  A \"work based on the\nLibrary\" means either the Library or any derivative work under\ncopyright law: that is to say, a work containing the Library or a\nportion of it, either verbatim or with modifications and/or translated\nstraightforwardly into another language.  (Hereinafter, translation is\nincluded without limitation in the term \"modification\".)\n\n  \"Source code\" for a work means the preferred form of the work for\nmaking modifications to it.  For a library, complete source code means\nall the source code for all modules it contains, plus any associated\ninterface definition files, plus the scripts used to control compilation\nand installation of the library.\n\n  Activities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning a program using the Library is not restricted, and output from\nsuch a program is covered only if its contents constitute a work based\non the Library (independent of the use of the Library in a tool for\nwriting it).  Whether that is true depends on what the Library does\nand what the program that uses the Library does.\n\n  1. You may copy and distribute verbatim copies of the Library's\ncomplete source code as you receive it, in any medium, provided that\nyou conspicuously and appropriately publish on each copy an\nappropriate copyright notice and disclaimer of warranty; keep intact\nall the notices that refer to this License and to the absence of any\nwarranty; and distribute a copy of this License along with the\nLibrary.\n\n  You may charge a fee for the physical act of transferring a copy,\nand you may at your option offer warranty protection in exchange for a\nfee.\n\f\n  2. You may modify your copy or copies of the Library or any portion\nof it, thus forming a work based on the Library, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) The modified work must itself be a software library.\n\n    b) You must cause the files modified to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    c) You must cause the whole of the work to be licensed at no\n    charge to all third parties under the terms of this License.\n\n    d) If a facility in the modified Library refers to a function or a\n    table of data to be supplied by an application program that uses\n    the facility, other than as an argument passed when the facility\n    is invoked, then you must make a good faith effort to ensure that,\n    in the event an application does not supply such function or\n    table, the facility still operates, and performs whatever part of\n    its purpose remains meaningful.\n\n    (For example, a function in a library to compute square roots has\n    a purpose that is entirely well-defined independent of the\n    application.  Therefore, Subsection 2d requires that any\n    application-supplied function or table used by this function must\n    be optional: if the application does not supply it, the square\n    root function must still compute square roots.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Library,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Library, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote\nit.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Library.\n\nIn addition, mere aggregation of another work not based on the Library\nwith the Library (or with a work based on the Library) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may opt to apply the terms of the ordinary GNU General Public\nLicense instead of this License to a given copy of the Library.  To do\nthis, you must alter all the notices that refer to this License, so\nthat they refer to the ordinary GNU General Public License, version 2,\ninstead of to this License.  (If a newer version than version 2 of the\nordinary GNU General Public License has appeared, then you can specify\nthat version instead if you wish.)  Do not make any other change in\nthese notices.\n\f\n  Once this change is made in a given copy, it is irreversible for\nthat copy, so the ordinary GNU General Public License applies to all\nsubsequent copies and derivative works made from that copy.\n\n  This option is useful when you wish to copy part of the code of\nthe Library into a program that is not a library.\n\n  4. You may copy and distribute the Library (or a portion or\nderivative of it, under Section 2) in object code or executable form\nunder the terms of Sections 1 and 2 above provided that you accompany\nit with the complete corresponding machine-readable source code, which\nmust be distributed under the terms of Sections 1 and 2 above on a\nmedium customarily used for software interchange.\n\n  If distribution of object code is made by offering access to copy\nfrom a designated place, then offering equivalent access to copy the\nsource code from the same place satisfies the requirement to\ndistribute the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  5. A program that contains no derivative of any portion of the\nLibrary, but is designed to work with the Library by being compiled or\nlinked with it, is called a \"work that uses the Library\".  Such a\nwork, in isolation, is not a derivative work of the Library, and\ntherefore falls outside the scope of this License.\n\n  However, linking a \"work that uses the Library\" with the Library\ncreates an executable that is a derivative of the Library (because it\ncontains portions of the Library), rather than a \"work that uses the\nlibrary\".  The executable is therefore covered by this License.\nSection 6 states terms for distribution of such executables.\n\n  When a \"work that uses the Library\" uses material from a header file\nthat is part of the Library, the object code for the work may be a\nderivative work of the Library even though the source code is not.\nWhether this is true is especially significant if the work can be\nlinked without the Library, or if the work is itself a library.  The\nthreshold for this to be true is not precisely defined by law.\n\n  If such an object file uses only numerical parameters, data\nstructure layouts and accessors, and small macros and small inline\nfunctions (ten lines or less in length), then the use of the object\nfile is unrestricted, regardless of whether it is legally a derivative\nwork.  (Executables containing this object code plus portions of the\nLibrary will still fall under Section 6.)\n\n  Otherwise, if the work is a derivative of the Library, you may\ndistribute the object code for the work under the terms of Section 6.\nAny executables containing that work also fall under Section 6,\nwhether or not they are linked directly with the Library itself.\n\f\n  6. As an exception to the Sections above, you may also combine or\nlink a \"work that uses the Library\" with the Library to produce a\nwork containing portions of the Library, and distribute that work\nunder terms of your choice, provided that the terms permit\nmodification of the work for the customer's own use and reverse\nengineering for debugging such modifications.\n\n  You must give prominent notice with each copy of the work that the\nLibrary is used in it and that the Library and its use are covered by\nthis License.  You must supply a copy of this License.  If the work\nduring execution displays copyright notices, you must include the\ncopyright notice for the Library among them, as well as a reference\ndirecting the user to the copy of this License.  Also, you must do one\nof these things:\n\n    a) Accompany the work with the complete corresponding\n    machine-readable source code for the Library including whatever\n    changes were used in the work (which must be distributed under\n    Sections 1 and 2 above); and, if the work is an executable linked\n    with the Library, with the complete machine-readable \"work that\n    uses the Library\", as object code and/or source code, so that the\n    user can modify the Library and then relink to produce a modified\n    executable containing the modified Library.  (It is understood\n    that the user who changes the contents of definitions files in the\n    Library will not necessarily be able to recompile the application\n    to use the modified definitions.)\n\n    b) Use a suitable shared library mechanism for linking with the\n    Library.  A suitable mechanism is one that (1) uses at run time a\n    copy of the library already present on the user's computer system,\n    rather than copying library functions into the executable, and (2)\n    will operate properly with a modified version of the library, if\n    the user installs one, as long as the modified version is\n    interface-compatible with the version that the work was made with.\n\n    c) Accompany the work with a written offer, valid for at\n    least three years, to give the same user the materials\n    specified in Subsection 6a, above, for a charge no more\n    than the cost of performing this distribution.\n\n    d) If distribution of the work is made by offering access to copy\n    from a designated place, offer equivalent access to copy the above\n    specified materials from the same place.\n\n    e) Verify that the user has already received a copy of these\n    materials or that you have already sent this user a copy.\n\n  For an executable, the required form of the \"work that uses the\nLibrary\" must include any data and utility programs needed for\nreproducing the executable from it.  However, as a special exception,\nthe materials to be distributed need not include anything that is\nnormally distributed (in either source or binary form) with the major\ncomponents (compiler, kernel, and so on) of the operating system on\nwhich the executable runs, unless that component itself accompanies\nthe executable.\n\n  It may happen that this requirement contradicts the license\nrestrictions of other proprietary libraries that do not normally\naccompany the operating system.  Such a contradiction means you cannot\nuse both them and the Library together in an executable that you\ndistribute.\n\f\n  7. You may place library facilities that are a work based on the\nLibrary side-by-side in a single library together with other library\nfacilities not covered by this License, and distribute such a combined\nlibrary, provided that the separate distribution of the work based on\nthe Library and of the other library facilities is otherwise\npermitted, and provided that you do these two things:\n\n    a) Accompany the combined library with a copy of the same work\n    based on the Library, uncombined with any other library\n    facilities.  This must be distributed under the terms of the\n    Sections above.\n\n    b) Give prominent notice with the combined library of the fact\n    that part of it is a work based on the Library, and explaining\n    where to find the accompanying uncombined form of the same work.\n\n  8. You may not copy, modify, sublicense, link with, or distribute\nthe Library except as expressly provided under this License.  Any\nattempt otherwise to copy, modify, sublicense, link with, or\ndistribute the Library is void, and will automatically terminate your\nrights under this License.  However, parties who have received copies,\nor rights, from you under this License will not have their licenses\nterminated so long as such parties remain in full compliance.\n\n  9. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Library or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Library (or any work based on the\nLibrary), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Library or works based on it.\n\n  10. Each time you redistribute the Library (or any work based on the\nLibrary), the recipient automatically receives a license from the\noriginal licensor to copy, distribute, link with or modify the Library\nsubject to these terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties with\nthis License.\n\f\n  11. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Library at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Library by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Library.\n\nIf any portion of this section is held invalid or unenforceable under any\nparticular circumstance, the balance of the section is intended to apply,\nand the section as a whole is intended to apply in other circumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  12. If the distribution and/or use of the Library is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Library under this License may add\nan explicit geographical distribution limitation excluding those countries,\nso that distribution is permitted only in or among countries not thus\nexcluded.  In such case, this License incorporates the limitation as if\nwritten in the body of this License.\n\n  13. The Free Software Foundation may publish revised and/or new\nversions of the Lesser General Public License from time to time.\nSuch new versions will be similar in spirit to the present version,\nbut may differ in detail to address new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Library\nspecifies a version number of this License which applies to it and\n\"any later version\", you have the option of following the terms and\nconditions either of that version or of any later version published by\nthe Free Software Foundation.  If the Library does not specify a\nlicense version number, you may choose any version ever published by\nthe Free Software Foundation.\n\f\n  14. If you wish to incorporate parts of the Library into other free\nprograms whose distribution conditions are incompatible with these,\nwrite to the author to ask for permission.  For software which is\ncopyrighted by the Free Software Foundation, write to the Free\nSoftware Foundation; we sometimes make exceptions for this.  Our\ndecision will be guided by the two goals of preserving the free status\nof all derivatives of our free software and of promoting the sharing\nand reuse of software generally.\n\n                            NO WARRANTY\n\n  15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO\nWARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW.\nEXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR\nOTHER PARTIES PROVIDE THE LIBRARY \"AS IS\" WITHOUT WARRANTY OF ANY\nKIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE\nLIBRARY IS WITH YOU.  SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME\nTHE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN\nWRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY\nAND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU\nFOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR\nCONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE\nLIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING\nRENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A\nFAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF\nSUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\nDAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\f\n           How to Apply These Terms to Your New Libraries\n\n  If you develop a new library, and you want it to be of the greatest\npossible use to the public, we recommend making it free software that\neveryone can redistribute and change.  You can do so by permitting\nredistribution under these terms (or, alternatively, under the terms of the\nordinary General Public License).\n\n  To apply these terms, attach the following notices to the library.  It is\nsafest to attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least the\n\"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the library's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This library is free software; you can redistribute it and/or\n    modify it under the terms of the GNU Lesser General Public\n    License as published by the Free Software Foundation; either\n    version 2.1 of the License, or (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n    Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public\n    License along with this library; if not, write to the Free Software\n    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\nAlso add information on how to contact you by electronic and paper mail.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the library, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n  library `Frob' (a library for tweaking knobs) written by James Random Hacker.\n\n  <signature of Ty Coon>, 1 April 1990\n  Ty Coon, President of Vice\n\nThat's all there is to it!\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 16.7900390625,
          "content": "# Linux-router\n\nSet Linux as router in one command. Able to provide Internet, or create WiFi hotspot. Support transparent proxy (redsocks). Also useful for routing VM/containers.\n\nIt wraps `iptables`, `dnsmasq` etc. stuff. Use in one command, restore in one command or by `control-c` (or even by closing terminal window).\n\n[Linux-Router News & Developer Notes 📰](https://github.com/garywill/linux-router/issues/28) | [More tools and projects 🛠️](https://garywill.github.io) | [🍻 Buy me a coffee ❤️](https://github.com/garywill/receiving/blob/master/receiving_methods.md)\n\n\n## Features\n\nBasic features:\n\n- Create a NATed sub-network\n- Provide Internet\n- DHCP server (and RA)\n  - Specify what DNS the DHCP server assigns to clients\n- DNS server\n  - Specify upstream DNS (kind of a plain DNS proxy)\n- IPv6 (behind NATed LAN, like IPv4)\n- Creating WiFi hotspot:\n  - Channel selecting\n  - Choose encryptions: WPA2/WPA, WPA2, WPA, No encryption\n  - Create AP on the same interface you are getting Internet (usually require same channel)\n- Transparent proxy (redsocks)\n- Transparent DNS proxy (hijack port 53 packets)\n- Detect NetworkManager and make sure it won't interfere (handle interface (un)managed status)\n- Detect firewalld and make sure it won't interfere our (by using `trusted` zone)\n- You can run many instances, to create many different networks. Has instances managing feature.\n\n**For many other features, see below [CLI usage](#cli-usage-and-other-features)**\n\n### Useful in these situations\n\n```\nInternet----(eth0/wlan0)-Linux-(wlanX)AP\n                                       |--client\n                                       |--client\n```\n\n```\n                                    Internet\nWiFi AP(no DHCP)                        |\n    |----(wlan1)-Linux-(eth0/wlan0)------\n    |           (DHCP)\n    |--client\n    |--client\n```\n\n```\n                                    Internet\n Switch                                 |\n    |---(eth1)-Linux-(eth0/wlan0)--------\n    |--client\n    |--client\n```\n\n```\nInternet----(eth0/wlan0)-Linux-(eth1)------Another PC\n```\n\n```\nInternet----(eth0/wlan0)-Linux-(virtual interface)-----VM/container\n```\n\n## Install\n\n1-file-script. Release on [Linux-router repo on Github](https://github.com/garywill/linux-router). Just download and run the bash script (meet the dependencies). In this case use without installation.\n\nI'm currently not packaging for any distro. If you do, open a PR and add the link (can be with a version badge) to list here\n\n| Linux distro |                                                                                                            |\n| ------------ | ---------------------------------------------------------------------------------------------------------- |\n| Any          | download [1-file-script](https://raw.githubusercontent.com/garywill/linux-router/master/lnxrouter) and run without installation |\n\n### Dependencies\n\n- bash\n- procps or procps-ng\n- iproute2\n- dnsmasq\n- iptables (or nftables with `iptables-nft` translation linked)\n- WiFi hotspot dependencies\n  - hostapd\n  - iw\n  - iwconfig (you only need this if 'iw' can not recognize your adapter)\n  - haveged (optional)\n\n\n\n## Usage\n\n### Provide Internet to an interface\n\n```bash\nsudo lnxrouter -i eth1\n```\n\nno matter which interface (other than `eth1`) you're getting Internet from.\n\n### Create WiFi hotspot\n\n```bash\nsudo lnxrouter --ap wlan0 MyAccessPoint -p MyPassPhrase\n```\n\nno matter which interface you're getting Internet from (even from `wlan0`). Will create virtual Interface `x0wlan0` for hotspot.\n\n### Provide an interface's Internet to another interface\n\nClients access Internet through only `isp5`\n\n<details>\n\n```bash\nsudo lnxrouter -i eth1 -o isp5  --no-dns  --dhcp-dns 1.1.1.1  -6 --dhcp-dns6 [2606:4700:4700::1111]\n```\n\n> In this case of usage, it's recommended to:\n> \n> 1. Stop serving local DNS\n> 2. Tell clients which DNS to use (ISP5's DNS. Or, a safe public DNS, like above example)\n\n</details>\n\n### Create LAN without providing Internet\n\n<details>\n\n```bash\nsudo lnxrouter -n -i eth1\n```\n\n```bash\nsudo lnxrouter -n --ap wlan0 MyAccessPoint -p MyPassPhrase\n```\n\n</details>\n\n### Internet for LXC\n\n<details>\n\nCreate a bridge\n\n```bash\nsudo brctl addbr lxcbr5\n```\n\nIn LXC container `config`\n\n```\nlxc.network.type = veth\nlxc.network.flags = up\nlxc.network.link = lxcbr5\nlxc.network.hwaddr = xx:xx:xx:xx:xx:xx\n```\n\n```bash\nsudo lnxrouter -i lxcbr5\n```\n\n</details>\n\n### Transparent proxy\n\nAll clients' Internet traffic go through, for example, Tor (notice this example is NOT an anonymity use)\n\n<details>\n\n```bash\nsudo lnxrouter -i eth1 --tp 9040 --dns 9053 -g 192.168.55.1 -6 --p6 fd00:5:6:7::\n```\n\nIn `torrc`\n\n```\nTransPort 192.168.55.1:9040 \nDNSPort 192.168.55.1:9053\nTransPort [fd00:5:6:7::1]:9040 \nDNSPort [fd00:5:6:7::1]:9053\n```\n\n> **Warn**: Tor's anonymity relies on a purpose-made browser. Using Tor like this (sharing Tor's network to LAN clients) will NOT ensure anonymity.\n> \n> Although we use Tor as example here, Linux-router does NOT ensure nor is NOT aiming at anonymity.\n\n</details>\n\n### Clients-in-sandbox network\n\nTo not give our infomation to clients. Clients can still access Internet.\n\n<details>\n\n```bash\nsudo lnxrouter -i eth1 \\\n    --tp 9040 --dns 9053 \\\n    --random-mac \\\n    --ban-priv \\\n    --catch-dns --log-dns   # optional\n```\n\n</details>\n\n> Linux-router comes with no warranty. Use on your own risk\n\n### Use as transparent proxy for LXD\n\n<details>\n\nCreate a bridge\n\n```bash\nsudo brctl addbr lxdbr5\n```\n\nCreate and add a new LXD profile overriding container's `eth0`\n\n```bash\nlxc profile create profile5\nlxc profile edit profile5\n\n### profile content ###\nconfig: {}\ndescription: \"\"\ndevices:\n  eth0:\n    name: eth0\n    nictype: bridged\n    parent: lxdbr5\n    type: nic\nname: profile5\n\nlxc profile add <container> profile5\n```\n\n```bash\nsudo lnxrouter -i lxdbr5 --tp 9040 --dns 9053\n```\n\nTo remove that new profile from container\n\n```bash\nlxc profile remove <container> profile5\n```\n\n#### To not use profile\n\nAdd new `eth0` to container overriding default `eth0`\n\n```bash\nlxc config device add <container> eth0 nic name=eth0 nictype=bridged parent=lxdbr5\n```\n\nTo remove the customized `eth0` to restore default `eth0`\n\n```bash\nlxc config device remove <container> eth0\n```\n\n</details>\n\n### Use as transparent proxy for VirtualBox\n\n<details>\n\nIn VirtualBox's global settings, create a host-only network `vboxnet5` with DHCP disabled.\n\n```bash\nsudo lnxrouter -i vboxnet5 --tp 9040 --dns 9053\n```\n\n</details>\n\n### Use as transparent proxy for firejail\n\n<details>\n\nCreate a bridge\n\n```bash\nsudo brctl addbr firejail5\n```\n\n```bash\nsudo lnxrouter -i firejail5 -g 192.168.55.1 --tp 9040 --dns 9053 \nfirejail --net=firejail5 --dns=192.168.55.1 --blacklist=/var/run/nscd\n```\n\nFirejail's `/etc/resolv.conf` doesn't obtain DNS from DHCP, so we need to assign.\n\nnscd is domain name cache service, which shouldn't be accessed from in jail here.\n\n</details>\n\n### CLI usage and other features\n\n<details>\n\n```\nUsage: lnxrouter <options>\n\nOptions:\n    -h, --help              Show this help\n    --version               Print version number\n\n    -i <interface>          Interface to make NATed sub-network,\n                            and to provide Internet to\n                            (To create WiFi hotspot use '--ap' instead)\n    -o <interface>          Specify an inteface to provide Internet from.\n                            (Note using this with default DNS option may leak\n                            queries to other interfaces)\n    -n                      Do not provide Internet\n    --ban-priv              Disallow clients to access my private network\n    \n    -g <ip>                 This host's IPv4 address in subnet (mask is /24)\n                            (example: '192.168.5.1' or '5' shortly)\n    -6                      Enable IPv6 (NAT)\n    --no4                   Disable IPv4 Internet (not forwarding IPv4).\n                            Usually used with '-6'\n                            \n    --p6 <prefix>           Set IPv6 LAN address prefix (length 64) \n                            (example: 'fd00:0:0:5::' or '5' shortly) \n                            Using this enables '-6'\n                            \n    --dns <ip>|<port>|<ip:port>\n                            DNS server's upstream DNS.\n                            Use ',' to seperate multiple servers\n                            (default: use /etc/resolv.conf)\n                            (Note IPv6 addresses need '[]' around)\n    --no-dns                Do not serve DNS\n    --no-dnsmasq            Disable dnsmasq server (DHCP, DNS, RA)\n    --catch-dns             Transparent DNS proxy, redirect packets(TCP/UDP) \n                            whose destination port is 53 to this host\n    --log-dns               Show DNS query log (dnsmasq)\n    --dhcp-dns <IP1[,IP2]>|no\n                            Set IPv4 DNS offered by DHCP (default: this host).\n    --dhcp-dns6 <IP1[,IP2]>|no\n                            Set IPv6 DNS offered by DHCP (RA) \n                            (default: this host)\n                            (Note IPv6 addresses need '[]' around)\n                            Using both above two will enable '--no-dns' \n    --hostname <name>       DNS server associate this name with this host.\n                            Use '-' to read name from /etc/hostname\n    -d                      DNS server will take into account /etc/hosts\n    -e <hosts_file>         DNS server will take into account additional \n                            hosts file\n    --dns-nocache           DNS server no cache\n    \n    --mac <MAC>             Set MAC address\n    --random-mac            Use random MAC address\n \n    --tp <port>             Transparent proxy,\n                            redirect non-LAN TCP and UDP(not tested) traffic to\n                            port. (usually used with '--dns')\n    \n  WiFi hotspot options:\n    --ap <wifi interface> <SSID>\n                            Create WiFi access point\n    -p, --password <password>   \n                            WiFi password\n    --qr                    Show WiFi QR code in terminal (need qrencode)\n    \n    --hidden                Hide access point (not broadcast SSID)\n    --no-virt               Do not create virtual interface\n                            Using this you can't use same wlan interface\n                            for both Internet and AP\n    --virt-name <name>      Set name of virtual interface\n    -c <channel>            Specify channel (default: use current, or 1 / 36)\n    --country <code>        Set two-letter country code for regularity\n                            (example: US)\n    --freq-band <GHz>       Set frequency band: 2.4 or 5 (default: 2.4)\n    --driver                Choose your WiFi adapter driver (default: nl80211)\n    -w <WPA version>        '2' for WPA2, '1' for WPA, '1+2' for both\n                            (default: 2)\n    --psk                   Use 64 hex digits pre-shared-key instead of\n                            passphrase\n    --mac-filter            Enable WiFi hotspot MAC address filtering\n    --mac-filter-accept     Location of WiFi hotspot MAC address filter list\n                            (defaults to /etc/hostapd/hostapd.accept)\n    --hostapd-debug <level> 1 or 2. Passes -d or -dd to hostapd\n    --isolate-clients       Disable wifi communication between clients\n    --no-haveged            Do not run haveged automatically when needed\n    --hs20                  Enable Hotspot 2.0\n\n    WiFi 4 (802.11n) configs:\n    --wifi4                 Enable IEEE 802.11n (HT)\n    --req-ht                Require station HT (High Throughput) mode\n    --ht-capab <HT caps>    HT capabilities (default: [HT40+])\n\n    WiFi 5 (802.11ac) configs:\n    --wifi5                 Enable IEEE 802.11ac (VHT)\n    --req-vht               Require station VHT (Very High Thoughtput) mode\n    --vht-capab <VHT caps>  VHT capabilities\n    \n    --vht-ch-width <index>  Index of VHT channel width:\n                                0 for 20MHz or 40MHz (default)\n                                1 for 80MHz\n                                2 for 160MHz\n                                3 for 80+80MHz (Non-contigous 160MHz)    \n    --vht-seg0-ch <channel> Channel index of VHT center frequency for primary \n                            segment. Use with '--vht-ch-width'\n    --vht-seg1-ch <channel> Channel index of VHT center frequency for secondary\n                            (second 80MHz) segment. Use with '--vht-ch-width 3'\n\n  Instance managing:\n    --daemon                Run in background\n    -l, --list-running      Show running instances\n    --lc, --list-clients <id|interface>     \n                            List clients of an instance. Or list neighbors of\n                            an interface, even if it isn't handled by us.\n                            (passive mode)\n    --stop <id>             Stop a running instance\n        For <id> you can use PID or subnet interface name.\n        You can get them with '--list-running'\n                \nExamples:\n    lnxrouter -i eth1\n    lnxrouter --ap wlan0 MyAccessPoint -p MyPassPhrase\n    lnxrouter -i eth1 --tp <transparent-proxy> --dns <dns-proxy>\n```\n\n</details>\n\n## What changes are done to Linux system\n\nOn exit of a linux-router instance, script **will do cleanup**, i.e. undo most changes to system. Though, **some** changes (if needed) will **not** be undone, which are:\n\n1. `/proc/sys/net/ipv4/ip_forward = 1` and `/proc/sys/net/ipv6/conf/all/forwarding = 1`\n2. dnsmasq in Apparmor complain mode\n3. hostapd in Apparmor complain mode\n4. Kernel module `nf_nat_pptp` loaded\n5. The wifi device which is used to create hotspot is `rfkill unblock`ed\n6. WiFi country code, if user assigns\n\n## Meet contributor(s) and become one of them\n\nVisit [**my homepage** 🏡](https://garywill.github.io) to see **more tools and projects** 🛠️.\n\n> [❤️ Buy me a coffee](https://github.com/garywill/receiving/blob/master/receiving_methods.md) , this project took me lots of time! ([❤️ 扫码领红包并打赏一个!](https://github.com/garywill/receiving/blob/master/receiving_methods.md))\n> \n> 🥂 ( ^\\_^) o自自o (^_^ ) 🍻\n\n🤝 Bisides, thank [create_ap](https://github.com/oblique/create_ap) by [oblique](https://github.com/oblique). This script was forked from create\\_ap. Now they are quite different. (See `history` branch for how I modified create_ap). 🤝 Also thank those who contributed to that project.\n\n👨‍💻 You can be contributor, too! \n\n- 🍃 There're some TO-DOs listed, in both [readme TODO](#todo) and [in the code file](https://github.com/garywill/linux-router/search?q=TODO&type=code)\n- 🍃 Also some [unfulfilled enhancements in the Issues](https://github.com/garywill/linux-router/issues?q=is%3Aissue+is%3Aopen+label%3Aenhancement)\n- 🙋‍♂️ Contributions are not limited to coding. There're [some posts and questions](https://github.com/garywill/linux-router/issues) that need more people to answer\n\n## TODO\n- WPA3\n- Global IPv6\n\n## License\n\nlinux-router is LGPL licensed\n\n<details>\n\n```\nlinux-router\nCopyright (C) 2018  garywill\n\nThis library is free software; you can redistribute it and/or\nmodify it under the terms of the GNU Lesser General Public\nLicense as published by the Free Software Foundation; either\nversion 2.1 of the License, or (at your option) any later version.\n\nThis library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nLesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public\nLicense along with this library; if not, write to the Free Software\nFoundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n```\n\n</details>\n\nUpstream create_ap was BSD licensed\n\n<details>\n\n```\nCopyright (c) 2013, oblique\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n```\n\n</details>\n\n\n"
        },
        {
          "name": "lnxrouter",
          "type": "blob",
          "size": 73.6328125,
          "content": "#!/bin/bash\n\nVERSION=0.7.6\nPROGNAME=\"$(basename \"$0\")\"\n\nexport LC_ALL=C\n\nSCRIPT_UMASK=0122\numask $SCRIPT_UMASK\n\nphead() {\n    echo \"linux-router $VERSION (https://github.com/garywill/linux-router)\"\n}\nphead2() {\n    echo \"Released under LGPL, with no warranty. Use on your own risk.\"\n}\nusage() {\n    phead\n    phead2\n    cat << EOF\n\nUsage: $PROGNAME <options>\n\nOptions:\n    -h, --help              Show this help\n    --version               Print version number\n\n    -i <interface>          Interface to make NATed sub-network,\n                            and to provide Internet to\n                            (To create WiFi hotspot use '--ap' instead)\n    -o <interface>          Specify an inteface to provide Internet from.\n                            (Note using this with default DNS option may leak\n                            queries to other interfaces)\n    -n                      Do not provide Internet\n    --ban-priv              Disallow clients to access my private network\n    \n    -g <ip>                 This host's IPv4 address in subnet (mask is /24)\n                            (example: '192.168.5.1' or '5' shortly)\n    -6                      Enable IPv6 (NAT)\n    --no4                   Disable IPv4 Internet (not forwarding IPv4).\n                            Usually used with '-6'\n                            \n    --p6 <prefix>           Set IPv6 LAN address prefix (length 64) \n                            (example: 'fd00:0:0:5::' or '5' shortly) \n                            Using this enables '-6'\n                            \n    --dns <ip>|<port>|<ip:port>\n                            DNS server's upstream DNS.\n                            Use ',' to seperate multiple servers\n                            (default: use /etc/resolv.conf)\n                            (Note IPv6 addresses need '[]' around)\n    --no-dns                Do not serve DNS\n    --no-dnsmasq            Disable dnsmasq server (DHCP, DNS, RA)\n    --catch-dns             Transparent DNS proxy, redirect packets(TCP/UDP) \n                            whose destination port is 53 to this host\n    --log-dns               Show DNS query log (dnsmasq)\n    --dhcp-dns <IP1[,IP2]>|no\n                            Set IPv4 DNS offered by DHCP (default: this host).\n    --dhcp-dns6 <IP1[,IP2]>|no\n                            Set IPv6 DNS offered by DHCP (RA) \n                            (default: this host)\n                            (Note IPv6 addresses need '[]' around)\n                            Using both above two will enable '--no-dns' \n    --hostname <name>       DNS server associate this name with this host.\n                            Use '-' to read name from /etc/hostname\n    -d                      DNS server will take into account /etc/hosts\n    -e <hosts_file>         DNS server will take into account additional \n                            hosts file\n    --dns-nocache           DNS server no cache\n    \n    --mac <MAC>             Set MAC address\n    --random-mac            Use random MAC address\n \n    --tp <port>             Transparent proxy,\n                            redirect non-LAN TCP and UDP(not tested) traffic to\n                            port. (usually used with '--dns')\n    \n  WiFi hotspot options:\n    --ap <wifi interface> <SSID>\n                            Create WiFi access point\n    -p, --password <password>   \n                            WiFi password\n    --qr                    Show WiFi QR code in terminal (need qrencode)\n    \n    --hidden                Hide access point (not broadcast SSID)\n    --no-virt               Do not create virtual interface\n                            Using this you can't use same wlan interface\n                            for both Internet and AP\n    --virt-name <name>      Set name of virtual interface\n    -c <channel>            Specify channel (default: use current, or 1 / 36)\n    --country <code>        Set two-letter country code for regularity\n                            (example: US)\n    --freq-band <GHz>       Set frequency band: 2.4 or 5 (default: 2.4)\n    --driver                Choose your WiFi adapter driver (default: nl80211)\n    -w <WPA version>        '2' for WPA2, '1' for WPA, '1+2' for both\n                            (default: 2)\n    --psk                   Use 64 hex digits pre-shared-key instead of\n                            passphrase\n    --mac-filter            Enable WiFi hotspot MAC address filtering\n    --mac-filter-accept     Location of WiFi hotspot MAC address filter list\n                            (defaults to /etc/hostapd/hostapd.accept)\n    --hostapd-debug <level> 1 or 2. Passes -d or -dd to hostapd\n    --isolate-clients       Disable wifi communication between clients\n    --no-haveged            Do not run haveged automatically when needed\n    --hs20                  Enable Hotspot 2.0\n\n    WiFi 4 (802.11n) configs:\n    --wifi4                 Enable IEEE 802.11n (HT)\n    --req-ht                Require station HT (High Throughput) mode\n    --ht-capab <HT caps>    HT capabilities (default: [HT40+])\n\n    WiFi 5 (802.11ac) configs:\n    --wifi5                 Enable IEEE 802.11ac (VHT)\n    --req-vht               Require station VHT (Very High Thoughtput) mode\n    --vht-capab <VHT caps>  VHT capabilities\n    \n    --vht-ch-width <index>  Index of VHT channel width:\n                                0 for 20MHz or 40MHz (default)\n                                1 for 80MHz\n                                2 for 160MHz\n                                3 for 80+80MHz (Non-contigous 160MHz)    \n    --vht-seg0-ch <channel> Channel index of VHT center frequency for primary \n                            segment. Use with '--vht-ch-width'\n    --vht-seg1-ch <channel> Channel index of VHT center frequency for secondary\n                            (second 80MHz) segment. Use with '--vht-ch-width 3'\n\n  Instance managing:\n    --daemon                Run in background\n    -l, --list-running      Show running instances\n    --lc, --list-clients <id|interface>     \n                            List clients of an instance. Or list neighbors of\n                            an interface, even if it isn't handled by us.\n                            (passive mode)\n    --stop <id>             Stop a running instance\n        For <id> you can use PID or subnet interface name.\n        You can get them with '--list-running'\n                \nExamples:\n    $PROGNAME -i eth1\n    $PROGNAME --ap wlan0 MyAccessPoint -p MyPassPhrase\n    $PROGNAME -i eth1 --tp <transparent-proxy> --dns <dns-proxy>\nEOF\n}\n\ncheck_empty_option(){\n    if [[ \"$1\" == \"\" ]]; then\n        usage\n        exit 0\n    fi\n}\n\n\ndefine_global_variables(){\n    # user options\n    GATEWAY4=  # IPv4 address for this host\n    PREFIX6=  # IPv6 LAN address prefix for this host\n    IID6=1    # IPv6 LAN ID for this host\n    IPV6=0  # enable ipv6\n    NO4=0   # no IPv4 Internet\n    BANLAN=0 # ban clients from accessing private addresses\n    DHCP_DNS=gateway  # which ipv4 DNS the DHCP gives clients\n    DHCP_DNS6=gateway # which ipv6 DNS the DHCP gives clients\n    dnsmasq_NO_DNS=0  # disable dns server\n    NO_DNSMASQ=0  # disable dnsmasq (dns and dhcp)\n    CATCH_DNS=0   # catch clients 53 port packets\n    SHOW_DNS_QUERY=0  # log dns\n    ETC_HOSTS=0\n    ADDN_HOSTS=\n    DNS_NOCACHE=\n    CONN_IFACE=    # which interface user choose to use to create network\n    INTERNET_IFACE= # which interface to get Internet from\n    THISHOSTNAME=   # this host's name the DNS tells clients \n    TP_PORT=  # transparent proxy port\n    DNS=  # upstream DNS\n    MAC_USE_RANDOM=0\n    NEW_MACADDR=\n    DAEMONIZE=0\n    \n    # script variables\n    SUBNET_IFACE=  # which interface to create network\n    SHARE_METHOD=nat \n    OLD_MACADDR=\n    SUBNET_NET4=\n    SUBNET_NET6=\n    \n\n    ##### wifi hotspot\n    # user options\n    HIDDEN=0 # hidden wifi hotspot\n    WIFI_IFACE=\n    CHANNEL=default \n    HOTSPOT20=0 # For enabling Hotspot 2.0\n    WPA_VERSION=2\n    MAC_FILTER=0\n    MAC_FILTER_ACCEPT=/etc/hostapd/hostapd.accept\n    IEEE80211N=0\n    REQUIREHT=0\n    IEEE80211AC=0\n    REQUIREVHT=0\n    HT_CAPAB='[HT40+]'\n    VHT_CAPAB=\n    VHTCHANNELWIDTH=0\n    VHTSEG0CHINDEX=0\n    VHTSEG1CHINDEX=0\n    DRIVER=nl80211\n    NO_VIRT=0 # not use virtual interface\n    COUNTRY=\n    FREQ_BAND=2.4\n    NO_HAVEGED=0\n    HOSTAPD_DEBUG_ARGS=\n    USE_PSK=0\n    ISOLATE_CLIENTS=0\n    QR=0 # show wifi qr\n    \n    # script variables\n    VWIFI_IFACE=  # virtual wifi interface name, if created\n    VIRT_NAME= # name to use for virtual interface if --virt-name is used\n    AP_IFACE=     # can be VWIFI_IFACE or WIFI_IFACE\n    USE_IWCONFIG=0  # some device can't use iw\n    #######\n    \n    #-- to deal with info of a running instance. then will exit\n    LIST_RUNNING=0\n    STOP_ID=\n    LIST_CLIENTS_ID=\n\n    # -- variables for running\n    CONFDIR=\n    IP_VERs=\n    NM_UNM_LIST=  # it's called \"list\" but for now one interface\n    NM_PID=\n    FIREWALLD_PID=\n    TMP_FIREWALLD_ZONE=\n}\n\nparse_user_options(){\n    while [[ -n \"$1\" ]]; do\n        case \"$1\" in\n            -h|--help)\n                usage\n                exit 0\n                ;;\n            --version)\n                echo \"$VERSION\"\n                exit 0\n                ;;\n            -i)\n                shift\n                CONN_IFACE=\"$1\"\n                shift\n                ;;\n            -o)\n                shift\n                INTERNET_IFACE=\"$1\"\n                shift\n                ;;\n            -n)\n                shift\n                SHARE_METHOD=none\n                ;;\n            --ban-priv)\n                shift\n                BANLAN=1\n                ;;\n            --tp)\n                shift\n                TP_PORT=\"$1\"\n                SHARE_METHOD=redsocks\n                shift\n                ;;\n                \n                \n            -g)\n                shift\n                GATEWAY4=\"$1\"\n                shift\n                ;;\n            -6)\n                shift\n                IPV6=1\n                ;;\n            --no4)\n                shift\n                NO4=1\n                ;;\n            --p6)\n                shift\n                PREFIX6=\"$1\"\n                IPV6=1\n                shift\n                ;;\n            --mac)\n                shift\n                NEW_MACADDR=\"$1\"\n                shift\n                ;;\n            --random-mac)\n                shift\n                MAC_USE_RANDOM=1\n                ;;\n                \n            --dns)\n                shift\n                DNS=\"$1\"\n                shift\n                ;;\n            --no-dns)\n                shift\n                dnsmasq_NO_DNS=1\n                ;;\n            --no-dnsmasq)\n                shift\n                NO_DNSMASQ=1\n                ;;\n            --dhcp-dns)\n                shift\n                DHCP_DNS=\"$1\"\n                shift\n                ;;\n            --dhcp-dns6)\n                shift\n                DHCP_DNS6=\"$1\"\n                shift\n                ;;\n            --catch-dns)\n                shift\n                CATCH_DNS=1\n                ;;    \n            --log-dns)\n                shift\n                SHOW_DNS_QUERY=1\n                ;;\n            --hostname)\n                shift\n                THISHOSTNAME=\"$1\"\n                shift\n                ;;\n            -d)\n                shift\n                ETC_HOSTS=1\n                ;;\n            -e)\n                shift\n                ADDN_HOSTS=\"$1\"\n                shift\n                ;;\n            --dns-nocache)\n                shift\n                DNS_NOCACHE=1\n                ;;\n            \n            --isolate-clients)\n                shift\n                ISOLATE_CLIENTS=1\n                ;;\n                \n            --ap)\n                shift\n                WIFI_IFACE=\"$1\"\n                shift\n                SSID=\"$1\"\n                shift\n                ;;\n            -p|--password)\n                shift\n                PASSPHRASE=\"$1\"\n                shift\n                ;;\n            --qr)\n                shift\n                QR=1\n                ;;\n                \n                \n            --hidden)\n                shift\n                HIDDEN=1\n                ;;\n            --mac-filter)\n                shift\n                MAC_FILTER=1\n                ;;\n            --mac-filter-accept)\n                shift\n                MAC_FILTER_ACCEPT=\"$1\"\n                shift\n                ;;\n\n            -c)\n                shift\n                CHANNEL=\"$1\"\n                shift\n                ;;\n            --hs20)\n                shift\n                HOTSPOT20=1\n                ;;\n            -w)\n                shift\n                WPA_VERSION=\"$1\"\n                [[ \"$WPA_VERSION\" == \"2+1\" ]] && WPA_VERSION=1+2\n                shift\n                ;;\n\n            --wifi4|--ieee80211n)\n                shift\n                IEEE80211N=1\n                ;;\n            --req-ht|--require-ht)\n                shift\n                REQUIREHT=1\n                ;;\n            --wifi5|--ieee80211ac)\n                shift\n                IEEE80211AC=1\n                ;;\n            --req-vht|--require-vht)\n                shift\n                REQUIREVHT=1\n                ;;\n            --ht-capab)\n                shift\n                HT_CAPAB=\"$1\"\n                shift\n                ;;\n            --vht-capab)\n                shift\n                VHT_CAPAB=\"$1\"\n                shift\n                ;;\n            --vht-ch-width|--vht-channel-width)\n                shift\n                VHTCHANNELWIDTH=\"$1\"\n                shift\n                ;;\n            --vht-seg0-ch|--vht-seg0-channel)\n                shift\n                VHTSEG0CHINDEX=\"$1\"\n                shift\n                ;;\n            --vht-seg1-ch|--vht-seg1-channel)\n                shift\n                VHTSEG1CHINDEX=\"$1\"\n                shift\n                ;;\n            --driver)\n                shift\n                DRIVER=\"$1\"\n                shift\n                ;;\n            --no-virt)\n                shift\n                NO_VIRT=1\n                ;;\n            --virt-name)\n                shift\n                VIRT_NAME=\"$1\"\n                shift\n                ;;\n\n            --country)\n                shift\n                COUNTRY=\"$1\"\n                shift\n                ;;\n            --freq-band)\n                shift\n                FREQ_BAND=\"$1\"\n                shift\n                ;;\n            --no-haveged)\n                shift\n                NO_HAVEGED=1\n                ;;\n            --hostapd-debug)\n                shift\n                if [ \"$1\" = \"1\" ]; then\n                    HOSTAPD_DEBUG_ARGS=\"-d\"\n                elif [ \"$1\" = \"2\" ]; then\n                    HOSTAPD_DEBUG_ARGS=\"-dd\"\n                else\n                    printf \"Error: argument for --hostapd-debug expected 1 or 2, got %s\\n\" \"$1\"\n                    exit 1\n                fi\n                shift\n                ;;\n            --psk)\n                shift\n                USE_PSK=1\n                ;;\n\n            --daemon)\n                shift\n                DAEMONIZE=1\n                ;;\n            --stop)\n                shift\n                STOP_ID=\"$1\"\n                shift\n                ;;\n            -l|--list-running)\n                shift\n                LIST_RUNNING=1\n                ;;\n            --lc|--list-clients)\n                shift\n                LIST_CLIENTS_ID=\"$1\"\n                shift\n                ;;\n\n            *)\n                echo  \"Invalid parameter: $1\" 1>&2\n                exit 1\n                ;;\n        esac\n    done\n}\n\n\n# seperate ip and port\nsep_ip_port() {\n    # usage: sep_ip_port <ip:port> <var for ip> <var for port>\n    # input <ip:port> can be:\n    #   port (ip is 127.0.0.1)\n    #   ipv4\n    #   [ipv6]\n    #   ipv4:port\n    #   [ipv6]:port\n    local IP\n    local PORT\n    local INPUT\n    INPUT=\"$1\"\n    if (echo \"$INPUT\" | grep '\\.' >/dev/null 2>&1) ;then  \n        if (echo \"$INPUT\" | grep ':' >/dev/null 2>&1) ;then\n            # ipv4 + port\n            IP=\"$(echo \"$INPUT\" | cut -d: -f1)\"\n            PORT=\"$(echo \"$INPUT\" | cut -d: -f2)\"\n        else\n            # ipv4\n            IP=\"$INPUT\"\n        fi\n    elif (echo \"$INPUT\" | grep '\\]' >/dev/null 2>&1) ;then \n        if (echo \"$INPUT\" | grep '\\]\\:' >/dev/null 2>&1) ;then\n            # ipv6 + port\n            IP=\"$(echo \"$INPUT\" | cut -d']' -f1 | cut -d'[' -f2)\"\n            PORT=\"$(echo \"$INPUT\" | cut -d']' -f2 |cut -d: -f2)\"\n        else\n            # ipv6\n            IP=\"$(echo \"$INPUT\" | cut -d']' -f1 | cut -d'[' -f2)\"\n        fi\n    else \n        # port\n        IP='127.0.0.1'\n        PORT=\"$INPUT\"\n    fi\n    printf -v \"$2\" %s \"$IP\"\n    printf -v \"$3\" %s \"$PORT\"\n}\n\n#=========================\nis_interface() {\n    [[ -z \"$1\" ]] && return 1\n    [[ -d \"/sys/class/net/${1}\" ]]\n}\n\nis_vface_name_allocated(){\n    is_interface \"$1\" || [[ -f \"$COMMON_CONFDIR/vfaces/${1}\" ]]\n}\n\nget_interface_phy_device() { # only for wifi interface\n    local x\n    for x in /sys/class/ieee80211/*; do\n        [[ ! -e \"$x\" ]] && continue\n        if [[ \"${x##*/}\" = \"$1\" ]]; then\n            echo \"$1\"\n            return 0\n        elif [[ -e \"$x/device/net/$1\" ]]; then\n            echo \"${x##*/}\"\n            return 0\n        elif [[ -e \"$x/device/net:$1\" ]]; then\n            echo \"${x##*/}\"\n            return 0\n        fi\n    done\n    echo \"Failed to get phy interface\" >&2\n    return 1\n}\n\nget_adapter_info() { # only for wifi interface\n    local iPHY\n    iPHY=$(get_interface_phy_device \"$1\")\n    [[ $? -ne 0 ]] && return 1\n    iw phy \"$iPHY\" info\n}\n\nget_adapter_kernel_module() {\n    local MODULE\n    MODULE=$(readlink -f \"/sys/class/net/$1/device/driver/module\")\n    echo \"${MODULE##*/}\"\n}\n\ncan_be_sta_and_ap() {\n    # iwconfig does not provide this information, assume false\n    [[ $USE_IWCONFIG -eq 1 ]] && return 1\n    if [[ \"$(get_adapter_kernel_module \"$1\")\" == \"brcmfmac\" ]]; then\n        echo \"WARN: brmfmac driver doesn't work properly with virtual interfaces and\" >&2\n        echo \"      it can cause kernel panic. For this reason we disallow virtual\" >&2\n        echo \"      interfaces for your adapter.\" >&2\n        echo \"      For more info: https://github.com/oblique/create_ap/issues/203\" >&2\n        return 1\n    fi\n    get_adapter_info \"$1\" | grep -E '{.* managed.* AP.*}' > /dev/null 2>&1 && return 0\n    get_adapter_info \"$1\" | grep -E '{.* AP.* managed.*}' > /dev/null 2>&1 && return 0\n    return 1\n}\n\ncan_be_ap() {\n    # iwconfig does not provide this information, assume true\n    [[ $USE_IWCONFIG -eq 1 ]] && return 0\n    get_adapter_info \"$1\" | grep -E '\\* AP$' > /dev/null 2>&1 && return 0\n    return 1\n}\n\ncan_transmit_to_channel() {\n    local IFACE CHANNEL_NUM CHANNEL_INFO\n    IFACE=$1\n    CHANNEL_NUM=$2\n\n    if [[ $USE_IWCONFIG -eq 0 ]]; then\n        CHANNEL_INFO=$(get_adapter_info \"${IFACE}\" | grep -E \" [0-9]+(\\.[0-9]+){0,1} MHz \\[${CHANNEL_NUM}\\]\")\n        [[ -z \"${CHANNEL_INFO}\" ]] && return 1\n        [[ \"${CHANNEL_INFO}\" == *no\\ IR* ]] && return 1\n        [[ \"${CHANNEL_INFO}\" == *disabled* ]] && return 1\n        return 0\n    else\n        CHANNEL_NUM=$(printf '%02d' ${CHANNEL_NUM})\n        CHANNEL_INFO=$(iwlist \"${IFACE}\" channel | grep -E \"Channel[[:blank:]]${CHANNEL_NUM}[[:blank:]]?:\")\n        [[ -z \"${CHANNEL_INFO}\" ]] && return 1\n        return 0\n    fi\n}\n\n# taken from iw/util.c\nieee80211_frequency_to_channel() {\n    local FREQ=$1\n    if [[ $FREQ -eq 2484 ]]; then\n        echo 14\n    elif [[ $FREQ -lt 2484 ]]; then\n        echo $(( ($FREQ - 2407) / 5 ))\n    elif [[ $FREQ -ge 4910 && $FREQ -le 4980 ]]; then\n        echo $(( ($FREQ - 4000) / 5 ))\n    elif [[ $FREQ -le 45000 ]]; then\n        echo $(( ($FREQ - 5000) / 5 ))\n    elif [[ $FREQ -ge 58320 && $FREQ -le 64800 ]]; then\n        echo $(( ($FREQ - 56160) / 2160 ))\n    else\n        echo 0\n    fi\n}\n\n\nis_interface_wifi_connected() {\n    if [[ $USE_IWCONFIG -eq 0 ]]; then\n        iw dev \"$1\" link 2>&1 | grep -E '^Connected to' > /dev/null 2>&1 && return 0\n    else\n        iwconfig \"$1\" 2>&1 | grep -E 'Access Point: [0-9a-fA-F]{2}:' > /dev/null 2>&1 && return 0\n    fi\n    return 1\n}\n\n\nis_unicast_macaddr() {\n    local x\n    x=$(echo \"$1\" | cut -d: -f1)\n    x=$(printf '%d' \"0x${x}\")\n    [[ $(expr $x % 2) -eq 0 ]]\n}\n\nget_interface_mac() {\n    is_interface \"$1\" || return\n    cat \"/sys/class/net/${1}/address\"\n}\n\nshow_interface_pci_info() {  # pci id / model / virtual\n    is_interface \"$1\" || return\n    \n    local device_path\n    local bus_id=\"\"\n    local device_type_and_bus_id=\"unknown\"\n    local driver=\"\"\n    local device_fullname=\"\"\n    \n    device_path=\"$(readlink -f /sys/class/net/$1)\"\n    \n    if [[ \"$device_path\" == \"/sys/devices/pci\"* ]]; then\n        local pci_path\n\n        pci_path=$device_path/../..\n        \n        if [[ -d \"$pci_path/driver\" ]] ; then\n            driver=$(readlink -f \"$pci_path/driver\" | sed 's/\\//\\n/g' | tail -n 1)\n        fi\n        \n        bus_id=\"$(echo \"$device_path\" | sed 's/\\//\\n/g' | tail -n 3 |sed -n 1p)\"\n        device_type_and_bus_id=\"PCI: $bus_id\"\n        \n        if which lspci >/dev/null 2>&1 ; then\n            device_fullname=\"$( lspci -D -nn -s \"$bus_id\" | awk '{$1=\"\" ; print $0}' )\"\n        fi\n        \n    elif [[ \"$device_path\" == *\"/virtual/\"* ]]; then\n        device_type_and_bus_id=\"virtual interface\"\n    fi\n    \n    echo \"$device_type_and_bus_id\"\n    [[ -n \"$driver\" ]] && echo \"System-already-loaded driver: $driver\"\n    [[ -n \"$device_fullname\" ]] && echo \"$device_fullname\"\n    echo \"\"\n    # TODO usb\n}\n\nalloc_new_vface_name() { # only for wifi\n    local i=0\n    local v_iface_name=\"$VIRT_NAME\"\n    if [[ -z $VIRT_NAME ]]; then\n        while :; do\n            v_iface_name=\"x$i${WIFI_IFACE}\"\n            i=$((i + 1))\n            is_vface_name_allocated \"${v_iface_name}\" || break\n        done\n    fi\n    mkdir -p \"$COMMON_CONFDIR/vfaces\"\n    touch \"$COMMON_CONFDIR/vfaces/${v_iface_name}\"\n    echo \"${v_iface_name}\"\n}\n\ndealloc_vface_name() {\n    rm -f \"$COMMON_CONFDIR/vfaces/$1\"\n}\n\n#======\n\nget_all_mac_in_system() {\n    cat /sys/class/net/*/address\n}\n\nget_new_macaddr_according_to_existing() {\n    local REALDEV OLDMAC NEWMAC LAST_BYTE i\n    REALDEV=$1\n    OLDMAC=$(get_interface_mac \"$REALDEV\")\n    NEWMAC=\"\"\n    LAST_BYTE=$(printf %d 0x${OLDMAC##*:})\n    for i in {10..240}; do\n        NEWMAC=\"${OLDMAC%:*}:$(printf %02x $(( ($LAST_BYTE + $i) % 256 )))\"\n        (get_all_mac_in_system | grep \"$NEWMAC\" > /dev/null 2>&1) || break\n    done\n    echo \"$NEWMAC\"\n}\n\ngenerate_random_mac() {\n    local r1 r2 r3 r4 r5 r6 \n    local RAND_MAC\n    while :; do\n        r1=$( printf \"%02x\" $(($RANDOM%256/4*4)) )\n        r2=$( printf \"%02x\" $(($RANDOM%256)) )\n        r3=$( printf \"%02x\" $(($RANDOM%256)) )\n        r4=$( printf \"%02x\" $(($RANDOM%256)) )\n        r5=$( printf \"%02x\" $(($RANDOM%256)) )\n        r6=$( printf \"%02x\" $(($RANDOM%256)) )\n        RAND_MAC=\"$r1:$r2:$r3:$r4:$r5:$r6\"\n        ( ! ip link | grep \"link\" | grep \"$RAND_MAC\" > /dev/null 2>&1 ) && \\\n        ( ! ip maddress | grep \"link\" | grep \"$RAND_MAC\" > /dev/null 2>&1 ) && \\\n        ( ! ip neigh | grep \"lladdr $RAND_MAC\" > /dev/null 2>&1 ) && \\\n        ( ! get_all_mac_in_system | grep \"$RAND_MAC\" ) && \\\n        break\n    done\n    echo \"$RAND_MAC\"\n}\n\n\nis_ip4_lan_range_available() { # checks 192.168.x.x\n    ( ip -4 address | grep \"inet 192\\.168\\.$1\\.\" > /dev/null 2>&1 ) && return 1\n    ( ip -4 route | grep \"^192\\.168\\.$1\\.\" > /dev/null 2>&1 ) && return 1\n    ( ip -4 route get 192.168.$1.0 2>&1 | grep -E \"\\bvia\\b|\\bunreachable\\b\" > /dev/null 2>&1 ) && \\\n    ( ip -4 route get 192.168.$1.255 2>&1 | grep  -E \"\\bvia\\b|\\bunreachable\\b\" > /dev/null 2>&1 )  && return 0\n    return 1\n}\nis_ip6_lan_range_available() {  # checks fdxx::\n    ( ip -6 address | grep -i \"inet6 fd$1:$2$3:$4$5:$6$7:\" > /dev/null 2>&1 ) && return 1\n    ( ip -6 route | grep -i \"^fd$1:$2$3:$4$5:$6$7:\" > /dev/null 2>&1 ) && return 1\n    ( ip -6 route get fd$1:$2$3:$4$5:$6$7:: 2>&1 | grep -E \"\\bvia\\b|\\bunreachable\\b\" > /dev/null 2>&1 ) && \\\n    ( ip -6 route get fd$1:$2$3:$4$5:$6$7:ffff:ffff:ffff:ffff 2>&1 | grep -E \"\\bvia\\b|\\bunreachable\\b\" > /dev/null 2>&1 )  && return 0\n    return 1\n}\n\ngenerate_random_ip4() {\n    local random_ip4\n    while :; do\n        random_ip4=$(($RANDOM%256))\n        is_ip4_lan_range_available $random_ip4 && break\n    done\n    echo \"192.168.$random_ip4.1\"\n}\ngenerate_random_lan_ip6_prefix() {\n    local r1 r2 r3 r4 r5 r6 r7\n    while :; do\n        r1=$( printf \"%x\" $(($RANDOM%240+16)) )\n        r2=$( printf \"%x\" $(($RANDOM%240+16)) )\n        r3=$( printf \"%x\" $(($RANDOM%240+16)) )\n        r4=$( printf \"%x\" $(($RANDOM%240+16)) )\n        r5=$( printf \"%x\" $(($RANDOM%240+16)) )\n        r6=$( printf \"%x\" $(($RANDOM%240+16)) )\n        r7=$( printf \"%x\" $(($RANDOM%240+16)) )\n        is_ip6_lan_range_available \"$r1\" \"$r2\" \"$r3\" \"$r4\" \"$r5\" \"$r6\" \"$r7\" && break\n    done\n    echo \"fd$r1:$r2$r3:$r4$r5:$r6$r7::\"\n}\n\n\n\n# start haveged when needed\nhaveged_watchdog() {\n    local show_warn=1\n    while :; do\n        if [[ $(cat /proc/sys/kernel/random/entropy_avail) -lt 1000 ]]; then\n            if ! which haveged > /dev/null 2>&1; then\n                if [[ $show_warn -eq 1 ]]; then\n                    echo \"WARN: Low entropy detected. We recommend you to install \\`haveged'\" 1>&2\n                    show_warn=0\n                fi\n            elif ! pidof haveged > /dev/null 2>&1; then # TODO judge zombie ?\n                echo \"Low entropy detected, starting haveged\" 1>&2\n                # boost low-entropy\n                haveged -w 1024 -p $COMMON_CONFDIR/haveged.pid\n            fi\n        fi\n        sleep 2\n    done\n}\npid_watchdog() {\n    local PID=\"$1\"\n    local SLEEP=\"$2\"\n    local ERR_MSG=\"$3\"\n    local ST\n    while true\n    do \n        if [[ -e \"/proc/$PID\" ]]; then\n            ST=\"$(cat \"/proc/$PID/status\" | grep \"^State:\" | awk '{print $2}')\"\n            if [[ \"$ST\" != 'Z' ]]; then\n                sleep \"$SLEEP\"\n                continue\n            fi\n        fi\n        die \"$ERR_MSG\"\n    done\n    \n}\n#========\nget_pid_by_dbus_name() {\n    local DBUS_NAME=\"$1\"\n    local pid  r\n    \n    which dbus-send >/dev/null 2>&1 || return 1\n    \n    pid=\"$( dbus-send --system --print-reply --dest=org.freedesktop.DBus /org/freedesktop/DBus org.freedesktop.DBus.GetConnectionUnixProcessID string:$DBUS_NAME  2>/dev/null | grep \"   uint32 \" | awk '{print $2}' )\"\n    r=$?\n    \n    echo \"$pid\"\n    return $r\n}\nis_same_netns() {\n    local pid2=\"$1\"\n    [[ ! -f /proc/$$/ns/net ]] && return 0 # no netns feature. treat as same\n    [[ \"$(readlink /proc/$$/ns/net)\" == \"$(readlink /proc/$pid2/ns/net)\" ]] && return 0\n    return 1\n}\n#-----------------\n# only support NetworkManager >= 0.9.9\nis_nm_running() {\n    NM_PID=\"$(get_pid_by_dbus_name \"org.freedesktop.NetworkManager\")\"\n    \n    [[ ! -n \"$NM_PID\" ]] && return 1 # not running\n    \n    if (which nmcli >/dev/null 2>&1 ) && (nmcli -t -f RUNNING g 2>&1 | grep -E '^running$' >/dev/null 2>&1 ) ; then\n        if is_same_netns \"$NM_PID\"; then\n            return 0\n        fi\n    fi\n    \n    NM_PID= # cancel value if treat as not running\n    return 1  # not running\n}\n\nnm_knows() {\n    (nmcli dev show \"$1\" | grep -E \"^GENERAL.STATE:\" >/dev/null 2>&1 ) && return 0 # nm sees\n    return 1 # nm doesn't see this interface\n}\nnm_get_manage() { # get an interface's managed state\n    local s\n    s=$(nmcli dev show \"$1\" | grep -E \"^GENERAL.STATE:\") || return 2 # no such interface\n    (echo \"$s\" | grep \"unmanaged\" >/dev/null 2>&1) && return 1 # unmanaged\n    return 0 # managed\n}\nnm_set_unmanaged() {\n    while ! nm_knows \"$1\" ; do # wait for virtual wifi interface seen by NM\n        sleep 0.5\n    done\n    if nm_get_manage \"$1\" ;then\n        echo \"Set $1 unmanaged by NetworkManager\"\n        nmcli dev set \"$1\" managed no || die \"Failed to set $1 unmanaged by NetworkManager\"\n        NM_UNM_LIST=$1\n        sleep 1\n    fi\n}\n\nnm_set_managed() {\n    nmcli dev set \"$1\" managed yes\n    NM_UNM_LIST=\n}\nnm_restore_manage() {\n    if [[ $NM_UNM_LIST ]]; then\n        echo \"Restore $NM_UNM_LIST managed by NetworkManager\"\n        nm_set_managed \"$NM_UNM_LIST\"\n        sleep 0.5\n    fi\n}\n#-------\nis_firewalld_running() {\n    FIREWALLD_PID=\"$(get_pid_by_dbus_name \"org.fedoraproject.FirewallD1\")\"\n    \n    [[ ! -n \"$FIREWALLD_PID\" ]] && return 1 # not running\n    \n    if (which firewall-cmd >/dev/null 2>&1 ) && [[ \"$(firewall-cmd --state 2>&1)\" == \"running\" ]] ; then\n        if is_same_netns \"$FIREWALLD_PID\"; then\n            echo \"firewalld is running ($(firewall-cmd --version))\"\n            return 0\n        fi\n    fi\n\n    FIREWALLD_PID=  # cancel value if treat as not running\n    return 1  # not running\n}\nfirewalld_add_tmpzone() {\n#     TMP_FIREWALLD_ZONE=\"lrt${$}${SUBNET_IFACE}\"\n    TMP_FIREWALLD_ZONE=\"trusted\"\n#     firewall-cmd --new-zone=$TMP_FIREWALLD_ZONE  || die \"Failed creating temporary firewalld zone\"\n    echo \"Adding $SUBNET_IFACE to firewalld '$TMP_FIREWALLD_ZONE' zone\"\n    firewall-cmd --zone=$TMP_FIREWALLD_ZONE --add-interface=$SUBNET_IFACE >/dev/null || die \"Failed adding interface to firewalld temporary zone\"\n}\nfirewalld_del_tmpzone() {\n    if [[ -n \"$TMP_FIREWALLD_ZONE\" ]];then\n        echo \"Removing $SUBNET_IFACE from firewalld '$TMP_FIREWALLD_ZONE' zone\"\n        firewall-cmd --zone=$TMP_FIREWALLD_ZONE --remove-interface=$SUBNET_IFACE >/dev/null\n#         firewall-cmd --delete-zone=$TMP_FIREWALLD_ZONE\n    fi\n}\n\n#=========\nCUSTOM_CHAINS_4_filter=\nCUSTOM_CHAINS_4_nat=\nCUSTOM_CHAINS_6_filter=\nCUSTOM_CHAINS_6_nat=\niptb() \n{\n    local FoS=$1 # 4 | 6\n    shift\n    local Vis=$1 # 'v' | 'n'\n    shift\n    local T=$1 # table\n    shift\n    local ACT=$1 # action: I | A | N  .  On undo: I or A -> D , N -> F+X\n    shift\n    local CH=$1 # chain\n    shift\n    \n    [[ \"$IPV6\" -ne 1 && \"$FoS\" == \"6\" ]] && return\n    \n    local CMD_HEAD=\"\"\n    local MOUTH=\"\"\n    local NECK=\"\"\n    local HAND_UN_NC=0\n    local TAIL=\"\"\n    \n    local FULL=\"\"\n    local ADD_TO_UNDO=1\n    \n    local arr_name  w\n    \n    for arr_name in CUSTOM_CHAINS_4_filter CUSTOM_CHAINS_4_nat CUSTOM_CHAINS_6_filter CUSTOM_CHAINS_6_nat\n    do\n        local arr_content\n        eval arr_content=\\\"\\${$arr_name}\\\"\n        #echo $arr_content\n        \n        for w in  $arr_content\n        do\n            if [[ \"$arr_name\" =~ \"$FoS\" && \"$arr_name\" =~ \"$T\" && \"$w\" == \"$CH\" ]]; then\n                ADD_TO_UNDO=0\n            fi\n        done\n    done\n    \n\n    [[ \"$FoS\" == \"4\" ]] && CMD_HEAD=\"iptables -w \"\n    [[ \"$FoS\" == \"6\" ]] && CMD_HEAD=\"ip6tables -w \"\n    \n    [[ \"$Vis\" == 'v' ]] && MOUTH=\"-v\"\n    \n    NECK=\"-t ${T}\"\n    \n    if [[ \"$ACT\" == \"N\" ]]; then\n        eval CUSTOM_CHAINS_${FoS}_${T}=\\\"\\${CUSTOM_CHAINS_${FoS}_${T}} ${CH}\\\"\n        HAND_UN_NC=1\n    fi\n    \n    \n    \n    [[ ! \"$NETFILTER_XT_MATCH_COMMENT\" == \"0\" ]] && TAIL=\"-m comment --comment lrt${$}${SUBNET_IFACE}\"\n    \n    if [[ \"$ADD_TO_UNDO\" -eq 1 ]]; then\n        if [[ \"$ACT\" == \"I\" || \"$ACT\" == \"A\" ]]; then\n            echo \"$CMD_HEAD $NECK -D ${CH} $@ $TAIL\" >> $CONFDIR/undo_iptables.sh \n        fi\n        \n        if [[ \"$HAND_UN_NC\" -eq 1 ]]; then\n            echo \"$CMD_HEAD $NECK -F ${CH} $@ $TAIL\" >> $CONFDIR/undo_iptables_2.sh\n            echo \"$CMD_HEAD $NECK -X ${CH} $@ $TAIL\" >> $CONFDIR/undo_iptables_2.sh\n        fi\n    fi\n    \n \n    \n\n    FULL=\"$CMD_HEAD $MOUTH $NECK -${ACT} ${CH} $@ $TAIL\"\n    #echo $FULL\n    $FULL\n    return $?\n}\n\ndisable_unwanted_forwarding() {\n    for iv in \"${IP_VERs[@]}\"; do\n        if [[ \"$INTERNET_IFACE\" ]]; then\n            iptb \"$iv\" n filter I FORWARD  \\\n                -i \"$SUBNET_IFACE\"      ! -o \"$INTERNET_IFACE\" \\\n                -j REJECT || die\n            iptb \"$iv\" n filter I FORWARD  \\\n                ! -i \"$INTERNET_IFACE\"    -o \"$SUBNET_IFACE\" \\\n                -j REJECT || die\n        fi\n        \n        if [[ \"$SHARE_METHOD\" == 'redsocks' || \"$SHARE_METHOD\" == 'none' \\\n            || ( \"$iv\" -eq \"4\" && \"$NO4\" -eq 1  ) ]];then\n            iptb \"$iv\" n filter I FORWARD  -i \"$SUBNET_IFACE\"  -j REJECT || die\n            iptb \"$iv\" n filter I FORWARD  -o \"$SUBNET_IFACE\"  -j REJECT || die\n        fi\n    done\n        \n}\nstart_nat() {\n    local SUBNET_NET\n    \n    local iv\n\n    echo\n    echo \"iptables: NAT \"\n    \n    for iv in \"${IP_VERs[@]}\"; do\n        [[ \"$iv\" -eq \"4\" && ! $NO4 -eq 0 ]] && continue\n        \n        [[ \"$iv\" -eq \"4\" ]] && SUBNET_NET=\"$SUBNET_NET4\"\n        [[ \"$iv\" -eq \"6\" ]] && SUBNET_NET=\"$SUBNET_NET6\"\n        \n        if [[ -n \"$INTERNET_IFACE\" ]]; then # only one Internet interface\n            # masquerade subnet -> internet\n            iptb \"$iv\" v nat I POSTROUTING -s \"$SUBNET_NET\"  ! -d \"$SUBNET_NET\" \\\n                -o \"$INTERNET_IFACE\" \\\n                -j MASQUERADE || die\n                \n            # forward subnet -> internet\n            iptb \"$iv\" v filter I FORWARD  -i \"$SUBNET_IFACE\"  -s \"$SUBNET_NET\" \\\n                -o $INTERNET_IFACE \\\n                -j ACCEPT || die\n            \n            # forward any -> subnet\n            iptb \"$iv\" v filter I FORWARD  -o \"$SUBNET_IFACE\"  -d \"$SUBNET_NET\"  \\\n                -i \"$INTERNET_IFACE\" \\\n                -j ACCEPT || die\n        else # any interface can be Internet\n            # masquerade subnet -> any(!subnet)\n            iptb \"$iv\" v nat I POSTROUTING -s \"$SUBNET_NET\"  ! -d \"$SUBNET_NET\" \\\n                ! -o \"$SUBNET_IFACE\"  \\\n                -j MASQUERADE || die\n                \n            # forward subnet -> any\n            iptb \"$iv\" v filter I FORWARD  -i \"$SUBNET_IFACE\"  -s \"$SUBNET_NET\"  \\\n                -j ACCEPT || die\n                \n            # forward any -> subnet\n            iptb \"$iv\" v filter I FORWARD  -o \"$SUBNET_IFACE\"  -d \"$SUBNET_NET\" \\\n                -j ACCEPT || die\n        fi\n    done \n}\n\nstart_ban_lan() {\n    local arr_nets_to_protect\n    local ICMP_NAME\n    local iv  s\n    \n    echo\n    echo \"iptables: Disallow clients to access LAN\"\n    \n    for iv in \"${IP_VERs[@]}\"; do\n        # ban forwarding for subnet\n        iptb \"$iv\" n filter N lrt${$}${SUBNET_IFACE}-BLF || die\n        # TODO: allow '--dhcp-dns(6)' address port 53, which can be something needed, e.g. a VPN's internal private IP\n        if [[ \"$iv\" -eq \"4\" ]]; then\n            arr_nets_to_protect=(\"0.0.0.0/8\" \"10.0.0.0/8\" \"100.64.0.0/10\" \"127.0.0.0/8\" \"169.254.0.0/16\" \"172.16.0.0/12\" \"192.168.0.0/16\" \"224.0.0.0/4\" \"255.255.255.255\") \n            ICMP_NAME=\"icmp\"\n        elif [[ \"$iv\" -eq \"6\" ]]; then\n            arr_nets_to_protect=(\"fc00::/7\" \"fe80::/10\" \"ff00::/8\" \"::1\" \"::/128\" \"::ffff:0:0/96\" \"::ffff:0:0:0/96\")\n            ICMP_NAME=\"icmpv6\"\n        fi\n        for s in \"${arr_nets_to_protect[@]}\"; do\n            iptb \"$iv\" v filter I lrt${$}${SUBNET_IFACE}-BLF -d \"$s\" -j REJECT || die\n        done\n        iptb \"$iv\" n filter I FORWARD -i ${SUBNET_IFACE} -j lrt${$}${SUBNET_IFACE}-BLF || die\n        \n        # ban input from subnet\n        iptb \"$iv\" n filter N lrt${$}${SUBNET_IFACE}-BLI || die\n        iptb \"$iv\" v filter I lrt${$}${SUBNET_IFACE}-BLI -i ${SUBNET_IFACE} ! -p \"$ICMP_NAME\" -j REJECT || die # ipv6 need icmp to function. TODO: maybe we can block some unneeded icmp to improve security\n        iptb \"$iv\" n filter I INPUT -i ${SUBNET_IFACE} -j lrt${$}${SUBNET_IFACE}-BLI || die\n    done\n\n}\n\nallow_dns_port() {\n    local SUBNET_NET\n    local GATEWAY\n    local PROTs\n    local iv  pt\n\n    \n    echo\n    echo \"iptables: allow DNS\"\n    \n    for iv in \"${IP_VERs[@]}\"; do\n        [[ \"$iv\" -eq \"4\" ]] && GATEWAY=\"$GATEWAY4\"\n        [[ \"$iv\" -eq \"6\" ]] && GATEWAY=\"$GATEWAY6\"\n        \n        [[ \"$iv\" -eq \"4\" ]] && SUBNET_NET=\"$SUBNET_NET4\"\n        [[ \"$iv\" -eq \"6\" ]] && SUBNET_NET=\"$SUBNET_NET6\"\n\n\n        PROTs=(\"tcp\" \"udp\")\n        for pt in \"${PROTs[@]}\"; do\n            iptb \"$iv\" v filter I INPUT -i \"$SUBNET_IFACE\" -s \"$SUBNET_NET\" -d \"$GATEWAY\" -p \"$pt\" -m \"$pt\" --dport 53 -j ACCEPT || die\n        done\n    done \n}\n\n\nstart_catch_dns() {\n    local GATEWAY\n    local PROTs\n    local iv  pt\n\n    echo\n    echo \"iptables: redirect DNS queries to this host\"\n    \n    for iv in \"${IP_VERs[@]}\"; do\n        [[ \"$iv\" -eq \"4\" ]] && GATEWAY=\"$GATEWAY4\"\n        [[ \"$iv\" -eq \"6\" ]] && GATEWAY=\"$GATEWAY6\"\n   \n        PROTs=(\"tcp\" \"udp\")\n        for pt in \"${PROTs[@]}\"; do\n            iptb \"$iv\" v nat I PREROUTING -i \"$SUBNET_IFACE\" ! -d \"$GATEWAY\" -p \"$pt\" -m \"$pt\" --dport 53 -j REDIRECT --to-ports 53 || die\n        done\n    done\n}\n\n\nallow_dhcp() {\n    echo \n    echo \"iptables: allow dhcp\"\n    \n    iptb 4 v filter I INPUT -i ${SUBNET_IFACE} -p udp -m udp --dport 67 -j ACCEPT || die\n    iptb 6 v filter I INPUT -i ${SUBNET_IFACE} -p udp -m udp --dport 547 -j ACCEPT || die\n}\n\n# TODO: use 'DNAT' instead of '--to-ports' to support other IP\nstart_redsocks() {\n    local SUBNET_NET\n    local arr_nets_to_ignore\n    local s iv\n    \n    echo\n    echo \"iptables: transparent proxy non-LAN TCP and UDP(not tested) traffic to port ${TP_PORT}\"\n    \n    for iv in \"${IP_VERs[@]}\"; do\n        [[ \"$iv\" -eq \"4\" && ! $NO4 -eq 0 ]] && continue\n        \n        [[ \"$iv\" -eq \"4\" ]] && SUBNET_NET=\"$SUBNET_NET4\"\n        [[ \"$iv\" -eq \"6\" ]] && SUBNET_NET=\"$SUBNET_NET6\"\n            \n            \n        iptb \"$iv\" n nat N lrt${$}${SUBNET_IFACE}-TP || die\n        \n        if [[ \"$iv\" -eq \"4\" ]]; then\n            arr_nets_to_ignore=(\"0.0.0.0/8\" \"10.0.0.0/8\" \"100.64.0.0/10\" \"127.0.0.0/8\" \"169.254.0.0/16\" \"172.16.0.0/12\" \"192.168.0.0/16\" \"224.0.0.0/4\" \"255.255.255.255\")\n        elif [[ \"$iv\" -eq \"6\" ]];then\n            arr_nets_to_ignore=(\"fc00::/7\" \"fe80::/10\" \"ff00::/8\" \"::1\" \"::\")\n        fi\n        \n        for s in \"${arr_nets_to_ignore[@]}\"; do\n            iptb \"$iv\" n nat A lrt${$}${SUBNET_IFACE}-TP -d \"$s\" -j RETURN || die\n        done\n\n        iptb \"$iv\" v nat A lrt${$}${SUBNET_IFACE}-TP -p tcp -j REDIRECT --to-ports ${TP_PORT} || die\n        iptb \"$iv\" v nat A lrt${$}${SUBNET_IFACE}-TP -p udp -j REDIRECT --to-ports ${TP_PORT} || die\n\n        iptb \"$iv\" v nat I PREROUTING -i \"$SUBNET_IFACE\" -s \"$SUBNET_NET\" -j lrt${$}${SUBNET_IFACE}-TP || die\n\n        \n        iptb \"$iv\" v filter I INPUT -i \"$SUBNET_IFACE\" -s \"$SUBNET_NET\" -p tcp -m tcp --dport ${TP_PORT}  -j ACCEPT || die\n        iptb \"$iv\" v filter I INPUT -i \"$SUBNET_IFACE\" -s \"$SUBNET_NET\" -p udp -m udp --dport ${TP_PORT}  -j ACCEPT || die\n    done\n}\n\n#---------------------------------------\nbackup_ipv6_bits() {\n    mkdir \"$CONFDIR/sys_6_conf_iface\" || die \"Failed making dir to save interface IPv6 status\"\n    cp  \"/proc/sys/net/ipv6/conf/$SUBNET_IFACE/disable_ipv6\" \\\n        \"/proc/sys/net/ipv6/conf/$SUBNET_IFACE/accept_ra\"     \\\n        \"/proc/sys/net/ipv6/conf/$SUBNET_IFACE/use_tempaddr\"  \\\n        \"/proc/sys/net/ipv6/conf/$SUBNET_IFACE/addr_gen_mode\" \\\n            \"$CONFDIR/sys_6_conf_iface/\" || die \"Failed backing up interface ipv6 bits\"\n            \n    if [[ \"$SHARE_METHOD\" == 'redsocks' ]] ; then\n        cp \"/proc/sys/net/ipv6/conf/$SUBNET_IFACE/forwarding\" \\\n            \"$CONFDIR/sys_6_conf_iface/\" || die \"Failed backking up interface ipv6 bits\"\n    fi\n}\nset_ipv6_bits() {\n    if [[ $IPV6 -eq 1 ]]; then\n        echo 0 > \"/proc/sys/net/ipv6/conf/$SUBNET_IFACE/disable_ipv6\"\n        echo 0 > \"/proc/sys/net/ipv6/conf/$SUBNET_IFACE/accept_ra\"\n        echo 0 > \"/proc/sys/net/ipv6/conf/$SUBNET_IFACE/use_tempaddr\"\n        echo 0 > \"/proc/sys/net/ipv6/conf/$SUBNET_IFACE/addr_gen_mode\"\n    else\n        echo 1 > \"/proc/sys/net/ipv6/conf/$SUBNET_IFACE/disable_ipv6\"\n    fi\n}\nrestore_ipv6_bits() {\n    if [[ -d \"$CONFDIR/sys_6_conf_iface\" ]]; then\n        cp -f \"$CONFDIR/sys_6_conf_iface/*\" \"/proc/sys/net/ipv6/conf/$SUBNET_IFACE/\"\n    fi\n}\n\nset_interface_mac() {\n    local INTERFACE\n    local MAC\n    \n    INTERFACE=$1\n    MAC=$2\n    \n    ip link set dev \"${INTERFACE}\" address \"${MAC}\" \n}\n\nbackup_interface_status() {\n    # virtual wifi interface will be destroyed, so no need to save status\n    \n    # backup interface up or down status\n    (ip link show \"${SUBNET_IFACE}\" |grep -q \"state UP\") && SUBNET_IFACE_ORIGINAL_UP_STATUS=1\n    \n    # save interface old mac \n    #if [[ -n \"$NEW_MACADDR\" ]]; then \n        OLD_MACADDR=$(get_interface_mac \"$SUBNET_IFACE\")\n        #echo \"Saved ${SUBNET_IFACE} old MAC address ${OLD_MACADDR} into RAM\"\n    #fi\n    \n    backup_ipv6_bits\n    \n    # TODO : ? backup ip and others???\n    \n    # nm managing status is saved when nm_set_unmanaged()\n}\nrestore_interface_status() {\n    # virtual wifi interface will be destroyed, so no need to restore status\n    # don't use [[ $VWIFI_IFACE ]] to judge, if creating virtual wifi failed, VWIFI_IFACE is empty\n    [[ \"$WIFI_IFACE\" && \"$NO_VIRT\" -eq 0 ]] && return\n    \n    restore_ipv6_bits\n\n    if [[ -n \"$OLD_MACADDR\" && \"$(get_interface_mac \"$SUBNET_IFACE\")\" != \"$OLD_MACADDR\" ]] ; then\n        echo \"Restoring ${SUBNET_IFACE} to old MAC address ${OLD_MACADDR} ...\"\n        set_interface_mac \"${SUBNET_IFACE}\" \"${OLD_MACADDR}\" || echo \"Failed restoring ${SUBNET_IFACE} to old MAC address ${OLD_MACADDR}\" >&2\n    fi\n    \n    nm_restore_manage\n    \n    [[ $SUBNET_IFACE_ORIGINAL_UP_STATUS -eq 1 ]] && ip link set up dev \"${SUBNET_IFACE}\" && echo \"Restore ${SUBNET_IFACE} to link up\"\n}\n#---------------------------------------\n\nkill_processes() { # for this instance\n    #echo \"Killing processes\"\n    local x  pid\n    for x in $CONFDIR/*.pid; do\n        # even if the $CONFDIR is empty, the for loop will assign\n        # a value in $x. so we need to check if the value is a file\n        if [[ -f $x ]] &&  sleep 0.3  && [[ -f $x ]]; then\n            pid=$(cat \"$x\")\n            pn=$( ps -p \"$pid\" -o comm= ) \n            #echo \"Killing $pid $pn ... \"\n            pkill -P \"$pid\"\n            kill \"$pid\" 2>/dev/null && ( echo \"Killed $(basename \"$x\") $pid $pn\" && rm \"$x\" ) || echo \"Failed to kill $(basename \"$x\") $pid $pn, it may have exited\"\n        fi\n    done\n}\n\n_cleanup() {\n    local x\n\n    ip addr flush \"${SUBNET_IFACE}\"\n    \n    rm -rf \"$CONFDIR\"\n    \n    ip link set down dev \"${SUBNET_IFACE}\"\n    \n    firewalld_del_tmpzone\n    \n    if [[ $VWIFI_IFACE ]]; then # the subnet interface (virtual wifi interface) will be removed\n        iw dev \"${VWIFI_IFACE}\" del\n        dealloc_vface_name \"$VWIFI_IFACE\"\n    fi\n    \n    restore_interface_status\n    \n    if ! has_running_instance; then\n        echo \"Exiting: This is the only running instance\"\n        # kill common processes\n        for x in $COMMON_CONFDIR/*.pid; do\n            [[ -f $x ]] && kill -9 $(cat \"$x\") && rm \"$x\"\n        done\n        \n        rm -d \"$COMMON_CONFDIR/vfaces\"\n        rm -d \"$COMMON_CONFDIR\"\n        rm -d \"$TMPDIR\"\n    else\n        echo \"Exiting: This is NOT the only running instance\"\n    fi\n}\n\nclean_iptables() {\n    [[ -f $CONFDIR/undo_iptables.sh ]] && bash $CONFDIR/undo_iptables.sh\n    \n    [[ -f $CONFDIR/undo_iptables_2.sh ]] && bash $CONFDIR/undo_iptables_2.sh\n}\n\ncleanup() {\n    trap \"\" SIGINT SIGUSR1 SIGUSR2 EXIT SIGTERM\n    echo\n    echo\n    echo \"Doing cleanup.. \"\n    kill_processes\n    echo \"Undoing iptables changes ..\"\n    clean_iptables > /dev/null\n    _cleanup 2> /dev/null\n    \n    #pgid=$(ps opgid= $$ |awk '{print $1}' )\n    #echo \"Killing PGID $pgid ...\"\n    #kill -15 -$pgid\n    #sleep 1 \n    echo \"Cleaning up done\"\n    #kill -9 -$pgid\n}\n\n# NOTE function die() is designed NOT to be used before init_trap() executed\ndie() { # SIGUSR2\n    echo \"Error occured\"\n    [[ -n \"$1\" ]] && echo -e \"\\nERROR: $1\\n\" >&2\n    # send die signal to the main process\n    [[ $BASHPID -ne $$ ]] && kill -USR2 $$ || cleanup\n    exit 1\n}\n\nclean_exit() { # SIGUSR1\n    # send clean_exit signal to the main process\n    [[ $BASHPID -ne $$ ]] && kill -USR1 $$ || cleanup\n    exit 0\n}\n\ninit_trap(){\n    trap \"cleanup\" EXIT\n    trap \"clean_exit\" SIGINT SIGUSR1 SIGTERM\n    trap \"die\" SIGUSR2\n}\ninit_conf_dirs() {\n    mkdir -p \"$TMPDIR\" || die \"Couldn't make linux-router's temporary dir\"\n    chmod 755 \"$TMPDIR\" 2>/dev/null\n    cd \"$TMPDIR\" || die \"Couldn't change directory to linux-router's temporary path\"\n\n    CONFDIR=\"$(mktemp -d $TMPDIR/lnxrouter.${TARGET_IFACE}.conf.XXXXXX)\" || die \"Instance couldn't make config dir\" # config dir for one instance\n    chmod 755 \"$CONFDIR\"\n    #echo \"Config dir: $CONFDIR\"\n    echo $$ > \"$CONFDIR/pid\"\n\n    COMMON_CONFDIR=\"$TMPDIR/lnxrouter_common.conf\" # config dir for all instances\n    mkdir -p \"$COMMON_CONFDIR\"\n}\n\n#== functions to deal with running instances\n\nlist_running_conf() {\n    local x\n    for x in $TMPDIR/lnxrouter.*; do\n        if [[ -f $x/pid && -f $x/subn_iface && -d /proc/$(cat $x/pid) ]]; then\n            echo \"$x\"\n        fi\n    done\n}\n\nlist_running() {\n    local IFACE subn_iface x\n    for x in $(list_running_conf); do\n        IFACE=${x#*.}\n        IFACE=${IFACE%%.*}\n        subn_iface=$(cat $x/subn_iface)\n\n        if [[ \"$IFACE\" == \"$subn_iface\" ]]; then\n            echo $(cat $x/pid) $IFACE\n        else\n            echo $(cat $x/pid) $IFACE '('$(cat $x/subn_iface)')'\n        fi\n    done\n}\n\nget_subn_iface_from_pid() {\n    list_running | awk '{print $1 \" \" $NF}' | tr -d '\\(\\)' | grep -E \"^${1} \" | cut -d' ' -f2\n}\n\nget_pid_from_subn_iface() {\n    list_running | awk '{print $1 \" \" $NF}' | tr -d '\\(\\)' | grep -E \" ${1}$\" | cut -d' ' -f1\n}\n\nget_confdir_from_pid() {\n    local IFACE x\n    for x in $(list_running_conf); do\n        if [[ $(cat $x/pid) == \"$1\" ]]; then\n            echo \"$x\"\n            break\n        fi\n    done\n}\n\n#======================================================\n\nprint_clients_from_leases() {  # MAC|IP|HOST|lease\n    local LEASE_FILE=\"$1\"\n    local FILEC\n    local line\n    local LEASEstr LEASEstamp\n    \n    FILEC=\"$(cat \"$LEASE_FILE\" | grep -v -E \"^duid\\b\" | sed -r '/^\\s*$/d' )\"\n\n    # TODO: duid is somewhat related to ipv6. I don't know about it. Not sure excluding it miss some info or not\n    echo \"$FILEC\" | while read -r line\n    do\n        #echo aa$line\n        LEASEstamp=\"$(echo \"$line\" | awk '{print $1}')\"\n        MAC=\"$(echo \"$line\" | awk '{print $2}')\"\n        IP=\"$(echo \"$line\" | awk '{print $3}'  | sed 's/\\[//g' | sed 's/\\]//g')\"\n        HOST=\"$(echo \"$line\" | awk '{print $4}' | sed 's/*/?/g' | sed 's/|/_/g' | sed 's/ /_/g' )\"\n        \n        if [[ -n \"$MAC\" ]]; then\n            LEASEstr=\"$(date -d @${LEASEstamp} +%m-%d_%X)\"\n            \n            echo \"$MAC|$IP|$HOST|lease_$LEASEstr\"\n        fi\n    done\n    \n}\nprint_interface_neighbors_via_iproute() {  # MAC|IP|_|STATUS \n    local IFACE=$1\n    \n    local line\n    \n    ip n | grep -E \"\\bdev $IFACE\\b\" | sed 's/ /|/g' | while read -r line\n    do\n        local MAC IP STATUS\n        \n        IP=\"$(echo \"$line\" | awk -F'|' '{print $1}')\"\n        \n        if [[ \"$(echo \"$line\" | awk -F'|' '{print $4}')\" == \"lladdr\" ]]; then # has mac\n            # if has mac, $4=\"lladdr\" and $5=macaddress and $6+=status\n            MAC=\"$(echo \"$line\" | awk -F'|' '{print $5}')\"\n            STATUS=\"$(echo \"$line\" | awk -F'|' '$1=\"\";$2=\"\";$3=\"\";$4=\"\";$5=\"\";{print}' | awk '{$1=$1;print}'| sed 's/ /,/g')\"\n        else # no mac \n            # if no mac, $4=\"\" and $5+=status\n            MAC=\"?\"\n            STATUS=\"$(echo \"$line\" | awk -F'|' '$1=\"\";$2=\"\";$3=\"\";$4=\"\";{print}' | awk '{$1=$1;print}' | sed 's/ /,/g')\"\n        fi\n        if [[ -n \"$IP\" && ( \"$MAC\" != \"?\" || \"$STATUS\" != \"FAILED\" ) ]]; then\n            echo \"$MAC|$IP|?|$STATUS\"\n        fi\n    done\n}\nprint_interface_neighbors_via_iw() {  # MAC|_|_|signal  \n    local IFACE=$1\n    local MAC SIGNAL\n    iw dev \"$IFACE\" station dump | awk '($1 ~ /Station$/) {print $2}' | while read -r MAC\n    do\n        if [[ -n \"$MAC\" ]]; then\n            SIGNAL=\"$(iw dev \"$IFACE\" station get \"$MAC\" | grep \"signal:\" | awk '{print $2}')\"\n            echo \"${MAC}|?|?|${SIGNAL}_dBm\"\n        fi\n    done\n}\n\nlist_clients() { # passive mode. (use 'arp-scan' or 'netdiscover' if want active mode)\n    local IFACE pid\n    local CONFDIR\n    \n    local output=\"\"\n    # If number (PID) is given, get the associated wifi iface\n    if [[ \"$1\" =~ ^[1-9][0-9]*$ ]]; then\n        pid=\"$1\"\n        IFACE=$(get_subn_iface_from_pid \"$pid\")\n        if [[ -z \"$IFACE\" ]] ; then\n            echo \"'$pid' is not the pid of a running $PROGNAME instance.\" >&2 \n            exit 1\n        fi\n    else # non-number given\n        IFACE=\"$1\"\n        if ( ! is_interface \"$IFACE\" ) ; then\n            echo \"'$IFACE' is not an interface or PID\" >&2\n            exit 1\n        fi\n        pid=$(get_pid_from_subn_iface \"$IFACE\")\n        if [[ -n \"$pid\" ]] ; then  # if this interface is hosted by us\n            CONFDIR=$(get_confdir_from_pid \"$pid\")\n            output=\"$(print_clients_from_leases \"$CONFDIR/dnsmasq.leases\" )\"\n        else    # this interface NOT hosted by us\n            echo \"Tip: '$IFACE' is not an interface hosted by $PROGNAME\" >&2\n        fi\n    fi\n    output=\"$(echo \"$output\" ; print_interface_neighbors_via_iw \"$IFACE\") \"\n    output=\"$(echo \"$output\" ; print_interface_neighbors_via_iproute \"$IFACE\")\"\n    \n    output=\"$(echo \"$output\" | sort -k 1 -k 2 -t '|' | uniq | sed -r '/^\\s*$/d')\"\n\n    echo \"$IFACE ($(get_interface_mac \"$IFACE\")) neighbors:\"\n    \n    local fmt=\"%-19s%-41s%-20s%s\" # string length: MAC 17, ipv4 15, ipv6 39, hostname ?\n    printf \"$fmt\\n\"  \"MAC\" \"IP\" \"HOSTNAME\" \"INFO\"\n    \n    local line\n    echo \"$output\"| while read -r line\n    do\n        if [[ -n \"$line\" ]]; then\n            echo \"$line\" | awk -F'|' \"{printf \\\"$fmt\\n\\\",\\$1,\\$2,\\$3,\\$4}\"\n        fi\n    done\n    # TODO : merge same mac and same ip line\n}\n\nhas_running_instance() {\n    local PID x\n\n    for x in $TMPDIR/lnxrouter.*; do\n        if [[ -f $x/pid ]]; then\n            PID=$(cat $x/pid)\n            if [[ -d /proc/$PID ]]; then\n                return 0\n            fi\n        fi\n    done\n\n    return 1\n}\n\nis_running_pid() {\n    list_running | grep -E \"^${1} \" > /dev/null 2>&1\n}\n\nsend_stop() {\n    local x\n\n    # send stop signal to specific pid\n    if is_running_pid \"$1\"; then\n        kill -USR1 \"$1\"\n        return\n    fi\n\n    # send stop signal to specific interface\n    for x in $(list_running | grep -E \" \\(?${1}( |\\)?\\$)\" | cut -f1 -d' '); do\n        kill -USR1 \"$x\"\n    done\n}\n\n\n## ========================================================\n## ========================================================\n# decide linux-router's global temporary path for all instances\n# this is different and should be before config-saving dir. The latter is for one instance\ndecide_tmpdir(){\n    local TMPD\n    if [[ -d /dev/shm ]]; then\n        TMPD=/dev/shm\n    elif [[ -d /run/shm ]]; then\n        TMPD=/run/shm\n    else\n        TMPD=/tmp\n    fi\n    #TMPDIR=$TMPD/lnxrouter_tmp\n    echo \"$TMPD/lnxrouter_tmp\"\n}\n\n#======\n\ncheck_other_functions(){\n    if [[ $LIST_RUNNING -eq 1 ]]; then\n        echo -e \"List of running $PROGNAME instances:\\n\"\n        list_running\n        exit 0\n    fi\n\n    if [[ -n \"$LIST_CLIENTS_ID\" ]]; then\n        list_clients \"$LIST_CLIENTS_ID\"\n        exit 0\n    fi\n\n    ##### root test ##### NOTE above don't require root ##########\n    if [[ $(id -u) -ne 0 ]]; then\n        echo \"ERROR: Need root to continue\" >&2\n        exit 1\n    fi\n    ###### NOTE below require root ##########\n\n    if [[ -n \"$STOP_ID\" ]]; then\n        echo \"Trying to kill $PROGNAME instance associated with $STOP_ID...\"\n        send_stop \"$STOP_ID\"\n        exit 0\n    fi\n}\n\n\ndaemonizing_check(){\n    if [[ $DAEMONIZE -eq 1 && $RUNNING_AS_DAEMON -eq 0 ]]; then\n        echo \"Running as Daemon...\"\n        # run a detached lnxrouter\n        RUNNING_AS_DAEMON=1 setsid \"$0\" \"${ARGS[@]}\" &\n        exit 0\n    fi\n}\n\n#============================\ncheck_wifi_settings() {\n\n    if ! ( which iw > /dev/null 2>&1 && iw dev \"$WIFI_IFACE\" info > /dev/null 2>&1 ); then\n        echo \"WARN: Can't use 'iw' to operate interfce '$WIFI_IFACE', trying 'iwconfig' (not as good as 'iw') ... (Did you spell the interface name right?)\" >&2\n        USE_IWCONFIG=1\n    fi\n    \n    if [[ $USE_IWCONFIG -eq 1 ]]; then\n        if ! (which iwconfig > /dev/null 2>&1 && iwconfig \"$WIFI_IFACE\" > /dev/null 2>&1); then\n            echo \"ERROR: Can't use 'iwconfig' to operate interfce '$WIFI_IFACE'\" >&2\n            exit 1\n        fi\n    fi\n    \n    if [[ $FREQ_BAND != 2.4 && $FREQ_BAND != 5 ]]; then\n        echo \"ERROR: Invalid frequency band\" >&2\n        exit 1\n    fi\n\n    if [[ $FREQ_BAND != 5 && $CHANNEL -gt 14 ]]; then\n        echo \"Channel number is greater than 14, assuming 5GHz frequency band\"\n        FREQ_BAND=5\n    fi\n\n    if ! can_be_ap \"${WIFI_IFACE}\"; then\n        echo \"ERROR: Your adapter does not support AP (master) mode\" >&2\n        exit 1\n    fi\n\n    if ! can_be_sta_and_ap \"${WIFI_IFACE}\"; then\n        if is_interface_wifi_connected \"${WIFI_IFACE}\"; then\n            echo \"ERROR: Your adapter can not be a station (i.e. be connected) and an AP at the same time\" >&2\n            exit 1\n        elif [[ $NO_VIRT -eq 0 ]]; then\n            echo \"WARN: Your adapter does not fully support AP virtual interface, enabling --no-virt\" >&2\n            NO_VIRT=1\n        fi\n    fi\n\n    HOSTAPD=$(which hostapd)\n\n    if [[ $(get_adapter_kernel_module \"${WIFI_IFACE}\") =~ ^(8192[cd][ue]|8723a[sue])$ ]]; then\n        if ! strings \"$HOSTAPD\" | grep -m1 rtl871xdrv > /dev/null 2>&1; then\n            echo \"ERROR: You need to patch your hostapd with rtl871xdrv patches.\" >&2\n            exit 1\n        fi\n\n        if [[ $DRIVER != \"rtl871xdrv\" ]]; then\n            echo \"WARN: Your adapter needs rtl871xdrv, enabling --driver=rtl871xdrv\" >&2\n            DRIVER=rtl871xdrv\n        fi\n    fi\n    \n    if [[ ${#SSID} -lt 1 || ${#SSID} -gt 32 ]]; then\n        echo \"ERROR: Invalid SSID length ${#SSID} (expected 1..32)\" >&2\n        exit 1\n    fi\n\n    if [[ $USE_PSK -eq 0 ]]; then\n        if [[ ${#PASSPHRASE} -gt 0 && ${#PASSPHRASE} -lt 8 ]] || [[ ${#PASSPHRASE} -gt 63 ]]; then\n            echo \"ERROR: Invalid passphrase length ${#PASSPHRASE} (expected 8..63)\" >&2\n            exit 1\n        fi\n    elif [[ ${#PASSPHRASE} -gt 0 && ${#PASSPHRASE} -ne 64 ]]; then\n        echo \"ERROR: Invalid pre-shared-key length ${#PASSPHRASE} (expected 64)\" >&2\n        exit 1\n    fi\n\n    if [[ $(get_adapter_kernel_module \"${WIFI_IFACE}\") =~ ^rtl[0-9].*$ ]]; then\n        if [[ $WPA_VERSION == '1' || $WPA_VERSION == '1+2' ]]; then\n            echo \"WARN: Realtek drivers usually have problems with WPA1, WPA2 is recommended\" >&2\n        fi\n        echo \"WARN: If AP doesn't work, read https://github.com/oblique/create_ap/blob/master/howto/realtek.md\" >&2\n    fi\n\n    if [[ -z $VIRT_NAME ]]; then\n        if [[ ${#WIFI_IFACE} -gt 13 ]]; then\n            echo \"WARN: $WIFI_IFACE has ${#WIFI_IFACE} characters which might be too long. If AP doesn't work, see --virt-name and https://github.com/garywill/linux-router/issues/44\" >&2\n        fi\n    elif [[ ${#VIRT_NAME} -gt 15 ]]; then\n        echo \"WARN: option --virt-name $VIRT_NAME has ${#VIRT_NAME} characters which might be too long, consider making it shorter in case of errors\" >&2\n    fi\n\n    if [[ ! -z $VIRT_NAME ]] && is_vface_name_allocated \"$VIRT_NAME\"; then\n      echo \"WARN: interface $VIRT_NAME aleady exists, this will cause an error\"\n    fi\n}\n\ncheck_if_new_mac_valid() {\n    if ! is_unicast_macaddr \"$NEW_MACADDR\"; then\n        echo \"ERROR: The first byte of MAC address (${NEW_MACADDR}) must be even\" >&2\n        exit 1\n    fi\n\n    if [[ $(get_all_mac_in_system | grep -c \"${NEW_MACADDR}\") -ne 0 ]]; then\n        echo \"WARN: MAC address '${NEW_MACADDR}' already exists\" >&2\n    fi\n}\n\ndecide_target_interface() {\n    # TARGET_IFACE is a existing physical interface\n    if [[ \"$CONN_IFACE\" ]]; then\n        echo \"$CONN_IFACE\"\n    elif [[ \"$WIFI_IFACE\" ]]; then\n        echo \"$WIFI_IFACE\"\n    else\n        echo \"No target interface specified\"  >&2\n        return 1\n    fi\n}\n\ndecide_ip_addresses() {\n    if [[ ! -n $GATEWAY4 ]]; then\n        GATEWAY4=\"$(generate_random_ip4)\"\n        echo \"Use random LAN IPv4 address $GATEWAY4\"\n    elif [[ ! \"$GATEWAY4\" =~ \".\" ]]; then\n        GATEWAY4=\"192.168.${GATEWAY4}.1\"\n    fi\n\n    if [[ $IPV6 -eq 1 && ! -n $PREFIX6 ]]; then\n        PREFIX6=\"$(generate_random_lan_ip6_prefix)\"\n        echo \"Use random LAN IPv6 address ${PREFIX6}${IID6}\"\n    elif [[ ! \"$PREFIX6\" =~ \":\" ]]; then\n        PREFIX6=\"fd00:0:0:${PREFIX6}::\"\n    fi\n    if [[ $IPV6 -eq 1 ]]; then\n        GATEWAY6=\"${PREFIX6}${IID6}\"\n    fi\n    \n    SUBNET_NET4=\"${GATEWAY4%.*}.0/24\"\n    [[ $IPV6 -eq 1 ]] && SUBNET_NET6=\"${PREFIX6}/64\"\n    \n}\n\nprepare_wifi_interface() {\n    if [[ $USE_IWCONFIG -eq 0 ]]; then\n        iw dev \"${WIFI_IFACE}\" set power_save off\n    fi\n    \n    if [[ $NO_VIRT -eq 0 ]]; then\n    ## Will generate virtual wifi interface\n    \n        # TODO move this to check_wifi_settings() ?\n        if is_interface_wifi_connected \"${WIFI_IFACE}\"; then\n            WIFI_IFACE_FREQ=$(iw dev \"${WIFI_IFACE}\" link | grep -i freq | awk '{print $2}' | sed 's/\\.00*$//g')  # NOTE we assume integer currently, which can be right, or wrong  in the future\n            WIFI_IFACE_CHANNEL=$(ieee80211_frequency_to_channel \"${WIFI_IFACE_FREQ}\")\n            \n            echo \"${WIFI_IFACE} already working in channel ${WIFI_IFACE_CHANNEL} (${WIFI_IFACE_FREQ} MHz)\"\n            \n            if [[ $CHANNEL == default ]]; then\n                echo \"Use wifi adapter current channel $WIFI_IFACE_CHANNEL as target channel\"\n                CHANNEL=$WIFI_IFACE_CHANNEL\n            fi\n            \n            if [[ $WIFI_IFACE_CHANNEL -ne $CHANNEL ]]; then\n                echo \"WARN: Wifi adapter already working in channel ${WIFI_IFACE_CHANNEL}, which is different than target channel $CHANNEL\" >&2\n            fi\n        fi\n\n        echo \"Creating a virtual WiFi interface... \"\n        VWIFI_IFACE=$(alloc_new_vface_name)\n        if iw dev \"${WIFI_IFACE}\" interface add \"${VWIFI_IFACE}\" type __ap; then\n            # Successfully created virtual wifi interface\n            # if NM running, it will give the new virtual interface a random MAC. MAC will go back after setting NM unmanaged\n            sleep 2  \n            echo \"${VWIFI_IFACE} created\"\n        else\n            VWIFI_IFACE=\n            if [[ ! -z ${VIRT_NAME} ]] && [[ ${#VIRT_NAME} -gt 15 ]]; then\n              die \"Failed creating virtual WiFi interface. This is likely because you have set a long name for your virtual interface using --virt-name, try making it shorter'\"\n            elif [[ -z ${VIRT_NAME} ]] && [[ ${#WIFI_IFACE} -gt 13 ]]; then\n              die \"Failed creating virtual WiFi interface. This is likely because your interface name is too long. Try using '--virt-name <shorter interface name>'\"\n            else\n              die \"Failed creating virtual WiFi interface. Maybe your WiFi adapter does not fully support virtual interfaces. Try again with '--no-virt'\"\n            fi\n        fi\n        \n        AP_IFACE=${VWIFI_IFACE}\n    else # no virtual wifi interface, use wifi device interface itself\n        AP_IFACE=${WIFI_IFACE}\n    fi\n    \n    if [[ $CHANNEL == default ]]; then\n        echo \"Channel not specified, use default\"\n        if [[ $FREQ_BAND == 2.4 ]]; then\n            CHANNEL=1\n        else\n            CHANNEL=36\n        fi\n    fi\n}\n\ndecide_subnet_interface() {\n    if [[ $WIFI_IFACE ]]; then\n        echo \"${AP_IFACE}\"\n    else\n        echo \"${TARGET_IFACE}\"\n    fi\n}\n\ndealwith_mac() {\n    local VMAC\n    \n    if [[ -n \"$NEW_MACADDR\" ]] ; then  # user choose to set subnet mac \n\n        echo \"Setting ${SUBNET_IFACE} new MAC address ${NEW_MACADDR} ...\"\n        set_interface_mac \"${SUBNET_IFACE}\" \"${NEW_MACADDR}\" || die \"Failed setting new MAC address\"\n        \n    elif [[ $VWIFI_IFACE ]]; then # user didn't choose to set mac, but using virtual wifi interface\n\n        VMAC=$(get_new_macaddr_according_to_existing \"${WIFI_IFACE}\")\n        if [[ \"$VMAC\" ]]; then\n            echo \"Assigning MAC address $VMAC to virtual interface $VWIFI_IFACE according to $WIFI_IFACE ...\"\n            set_interface_mac \"$VWIFI_IFACE\" \"$VMAC\"\n        fi\n    fi\n}\n\nwrite_hostapd_conf() {  \n    cat <<- EOF > \"$CONFDIR/hostapd.conf\"\n\t\tbeacon_int=100\n\t\tssid=${SSID}\n\t\tinterface=${AP_IFACE}\n\t\tdriver=${DRIVER}\n\t\tchannel=${CHANNEL}\n\t\tctrl_interface=$CONFDIR/hostapd_ctrl\n\t\tctrl_interface_group=0\n\t\tignore_broadcast_ssid=$HIDDEN\n\t\tap_isolate=$ISOLATE_CLIENTS\n\tEOF\n\n    if [[ -n \"$COUNTRY\" ]]; then\n        cat <<- EOF >> \"$CONFDIR/hostapd.conf\"\n\t\t\tcountry_code=${COUNTRY}\n\t\t\tieee80211d=1\n\t\tEOF\n    fi\n\n    if [[ $FREQ_BAND == 2.4 ]]; then\n        echo \"hw_mode=g\" >> \"$CONFDIR/hostapd.conf\"\n    else\n        echo \"hw_mode=a\" >> \"$CONFDIR/hostapd.conf\"\n    fi\n\n    if [[ $MAC_FILTER -eq 1 ]]; then\n        cat <<- EOF >> \"$CONFDIR/hostapd.conf\"\n\t\t\tmacaddr_acl=${MAC_FILTER}\n\t\t\taccept_mac_file=${MAC_FILTER_ACCEPT}\n\t\tEOF\n    fi\n\n    if [[ $HOTSPOT20 -eq 1 ]]; then\n        echo \"hs20=1\" >> \"$CONFDIR/hostapd.conf\"\n    fi\n\n    if [[ $IEEE80211N -eq 1 ]]; then\n        cat <<- EOF >> \"$CONFDIR/hostapd.conf\"\n\t\t\tieee80211n=1\n\t\t\tht_capab=${HT_CAPAB}\n\t\tEOF\n    fi\n\n    if [[ $REQUIREHT -eq 1 ]]; then\n        echo \"require_ht=1\" >> \"$CONFDIR/hostapd.conf\"\n    fi\n\n    if [[ $IEEE80211AC -eq 1 ]]; then\n        echo \"ieee80211ac=1\" >> \"$CONFDIR/hostapd.conf\"\n    fi\n\n    if [[ $REQUIREVHT -eq 1 ]]; then\n        echo \"require_vht=1\" >> \"$CONFDIR/hostapd.conf\"\n    fi\n\n    if [[ -n \"$VHT_CAPAB\" ]]; then\n        echo \"vht_capab=${VHT_CAPAB}\" >> \"$CONFDIR/hostapd.conf\"\n    fi\n\n\tif [[ $VHTCHANNELWIDTH -gt 0 ]]; then\n\t\tcat <<- EOF >> \"$CONFDIR/hostapd.conf\"\n\t\t\tvht_oper_chwidth=${VHTCHANNELWIDTH}\n\t\tEOF\n\tfi\n\n\tif [[ $VHTSEG0CHINDEX -gt 0 ]]; then\n\t\tcat <<- EOF >> \"$CONFDIR/hostapd.conf\"\n\t\t\tvht_oper_centr_freq_seg0_idx=${VHTSEG0CHINDEX}\n\t\tEOF\n\tfi\n\n\tif [[ $VHTSEG1CHINDEX -gt 0 ]]; then\n\t\tcat <<- EOF >> \"$CONFDIR/hostapd.conf\"\n\t\t\tvht_oper_centr_freq_seg1_idx=${VHTSEG1CHINDEX}\n\t\tEOF\n\tfi\n\n    if [[ $IEEE80211N -eq 1 ]] || [[ $IEEE80211AC -eq 1 ]]; then\n        echo \"wmm_enabled=1\" >> \"$CONFDIR/hostapd.conf\"\n    fi\n\n    if [[ -n \"$PASSPHRASE\" ]]; then\n        [[ \"$WPA_VERSION\" == \"1+2\" ]] && WPA_VERSION=3\n        if [[ $USE_PSK -eq 0 ]]; then\n            WPA_KEY_TYPE=passphrase\n        else\n            WPA_KEY_TYPE=psk\n        fi\n        cat <<- EOF >> \"$CONFDIR/hostapd.conf\"\n\t\t\twpa=${WPA_VERSION}\n\t\t\twpa_${WPA_KEY_TYPE}=${PASSPHRASE}\n\t\t\twpa_key_mgmt=WPA-PSK\n\t\t\twpa_pairwise=CCMP\n\t\t\trsn_pairwise=CCMP\n\t\tEOF\n    else\n        echo \"WARN: WiFi is not protected by password\" >&2\n    fi\n    chmod 600 \"$CONFDIR/hostapd.conf\"\n}\n\nwrite_dnsmasq_conf() {\n    local i\n    if grep \"^nobody:\" /etc/group >/dev/null 2>&1 ; then\n        NOBODY_GROUP=\"nobody\"\n    else\n        NOBODY_GROUP=\"nogroup\"\n    fi\n    \n    mkfifo \"$CONFDIR/dnsmasq.log\" || die \"Failed creating pipe file for dnsmasq\"\n    chown nobody \"$CONFDIR/dnsmasq.log\" || die \"Failed changing dnsmasq log file owner\"\n    cat \"$CONFDIR/dnsmasq.log\" & \n    \n    cat <<- EOF > \"$CONFDIR/dnsmasq.conf\"\n\t\tuser=nobody\n\t\tgroup=$NOBODY_GROUP\n\t\tbind-dynamic\n\t\tlisten-address=${GATEWAY4}\n\t\tinterface=$SUBNET_IFACE\n\t\texcept-interface=lo\n\t\tno-dhcp-interface=lo\n\t\tdhcp-range=${GATEWAY4%.*}.10,${GATEWAY4%.*}.250,255.255.255.0\n\t\tdhcp-option-force=option:router,${GATEWAY4}\n\t\t#log-dhcp\n\t\tlog-facility=$CONFDIR/dnsmasq.log\n\t\tbogus-priv\n\t\tdomain-needed\n\tEOF\n    # 'log-dhcp'(Extra logging for DHCP) shows too much logs.\n    # if use '-d', 'log-facility' should = /dev/null\n    if [[ $SHARE_METHOD == \"none\" ]]; then    \n        echo \"no-resolv\"  >> \"$CONFDIR/dnsmasq.conf\"\n        echo \"no-poll\" >> \"$CONFDIR/dnsmasq.conf\"\n    fi\n    if [[ \"$DHCP_DNS\" != \"no\" ]]; then\n        if [[ \"$DHCP_DNS\" == \"gateway\" ]]; then\n            dns_offer=\"$GATEWAY4\"\n        else\n            dns_offer=\"$DHCP_DNS\"\n        fi\n        echo \"dhcp-option-force=option:dns-server,${dns_offer}\" >> \"$CONFDIR/dnsmasq.conf\"\n    fi\n    \n    if [[ ! \"$dnsmasq_NO_DNS\" -eq 0 ]]; then\n        echo \"port=0\"  >> \"$CONFDIR/dnsmasq.conf\"\n    fi\n\n    [[ -n \"$MTU\" ]] && echo \"dhcp-option-force=option:mtu,${MTU}\" >> \"$CONFDIR/dnsmasq.conf\"\n    [[ $ETC_HOSTS -eq 0 ]] && echo no-hosts >> \"$CONFDIR/dnsmasq.conf\"\n    [[ -n \"$ADDN_HOSTS\" ]] && echo \"addn-hosts=${ADDN_HOSTS}\" >> \"$CONFDIR/dnsmasq.conf\"\n    if [[ \"$THISHOSTNAME\" ]]; then\n        [[ \"$THISHOSTNAME\" == \"-\" ]] && THISHOSTNAME=\"$(cat /etc/hostname)\"\n        echo \"interface-name=$THISHOSTNAME,$SUBNET_IFACE\" >> \"$CONFDIR/dnsmasq.conf\"\n    fi\n    if [[ ! \"$SHOW_DNS_QUERY\" -eq 0 ]]; then\n        echo log-queries=extra >> \"$CONFDIR/dnsmasq.conf\"\n    fi\n    \n    if [[ $DNS ]]; then\n        DNS_count=$(echo \"$DNS\" | awk -F, '{print NF}')\n        for (( i=1;i<=DNS_count;i++ )); do\n            sep_ip_port \"$(echo \"$DNS\" | cut -d, -f$i)\" DNS_IP DNS_PORT\n            [[ \"$DNS_PORT\" ]] && DNS_PORT_D=\"#$DNS_PORT\"\n            echo \"server=${DNS_IP}${DNS_PORT_D}\" >> \"$CONFDIR/dnsmasq.conf\"\n        done\n        \n        cat <<- EOF >> \"$CONFDIR/dnsmasq.conf\"\n\t\t\tno-resolv\n\t\t\tno-poll\n\t\tEOF\n    fi\n    if [[ $DNS_NOCACHE -eq 1 ]]; then\n        echo \"cache-size=0\" >> \"$CONFDIR/dnsmasq.conf\"\n        echo \"no-negcache\" >> \"$CONFDIR/dnsmasq.conf\"\n    fi\n    if [[ $IPV6 -eq 1 ]];then\n        cat <<- EOF  >> \"$CONFDIR/dnsmasq.conf\"\n\t\t\tlisten-address=${GATEWAY6}\n\t\t\tenable-ra\n\t\t\t#quiet-ra\n\t\t\tdhcp-range=interface:${SUBNET_IFACE},::,::ffff:ffff:ffff:ffff,constructor:${SUBNET_IFACE},ra-stateless,64\n\t\tEOF\n        if [[ \"$DHCP_DNS6\" != \"no\" ]]; then\n            if [[ \"$DHCP_DNS6\" == \"gateway\" ]]; then\n                dns_offer6=\"[$GATEWAY6]\"\n            else\n                dns_offer6=\"$DHCP_DNS6\"\n            fi\n            echo \"dhcp-option=option6:dns-server,${dns_offer6}\" >> \"$CONFDIR/dnsmasq.conf\"\n        fi\n    fi\n}\n\nrun_wifi_ap_processes() {\n    if [[ $NO_HAVEGED -eq 0 ]]; then\n        haveged_watchdog &\n        HAVEGED_WATCHDOG_PID=$!\n        echo \"$HAVEGED_WATCHDOG_PID\" > \"$CONFDIR/haveged_watchdog.pid\"\n        echo\n        echo \"haveged_watchdog PID: $HAVEGED_WATCHDOG_PID\" \n    fi\n\n    # start access point\n    #echo \"hostapd command-line interface: hostapd_cli -p $CONFDIR/hostapd_ctrl\"\n    # start hostapd (use stdbuf when available for no delayed output in programs that redirect stdout)\n    STDBUF_PATH=$(which stdbuf)\n    if [ $? -eq 0 ]; then\n        STDBUF_PATH=$STDBUF_PATH\" -oL\"\n    fi\n    echo \n    echo \"Starting hostapd\"\n    \n    if COMPLAIN_CMD=\"$(command -v aa-complain || command -v complain)\"; then\n        echo \"Setting hostapd to AppArmor complain mode...\"\n        \"$COMPLAIN_CMD\" hostapd\n    fi\n    \n    # hostapd '-P' works only when use '-B' (run in background)\n    $STDBUF_PATH hostapd $HOSTAPD_DEBUG_ARGS -P \"$CONFDIR/hostapd.pid\" \"$CONFDIR/hostapd.conf\"  &\n    HOSTAPD_PID=$!\n    echo \"$HOSTAPD_PID\" > \"$CONFDIR/hostapd.pid\"\n    echo \"hostapd PID: $HOSTAPD_PID\"\n    #while [[ ! -f $CONFDIR/hostapd.pid ]]; do\n    #    sleep 1\n    #done\n    #echo -n \"hostapd PID: \" ; cat $CONFDIR/hostapd.pid\n    pid_watchdog \"$HOSTAPD_PID\" 10 \"hostapd failed. (tip: try '--hostapd-debug' to get some debug info)\" &\n    sleep 3\n}\n\nstart_dnsmasq() {\n    echo \n    echo \"Starting dnsmasq\"\n    \n    if COMPLAIN_CMD=\"$(command -v aa-complain || command -v complain)\"; then\n        echo \"Setting dnsmasq to AppArmor complain mode...\"\n        \"$COMPLAIN_CMD\" dnsmasq\n    fi\n    \n    # Using '-d'(no daemon) dnsmasq will not turn into 'nobody'\n    # '-x' works only when no '-d'\n    dnsmasq  -k -C \"$CONFDIR/dnsmasq.conf\" -x \"$CONFDIR/dnsmasq.pid\" -l \"$CONFDIR/dnsmasq.leases\" & \n    #####DNSMASQ_PID=$!         # only when with '-d'\n    ######echo \"dnsmasq PID: $DNSMASQ_PID\"      # only when with '-d'\n    i=0; while [[ ! -f \"$CONFDIR/dnsmasq.pid\" ]]; do\n        sleep 1\n        i=$((i + 1))\n        if [[ $i -gt 10 ]]; then die \"Couldn't get dnsmasq PID\" ; fi\n    done\n    DNSMASQ_PID=\"$(cat \"$CONFDIR/dnsmasq.pid\" )\"\n    echo  \"dnsmasq PID: $DNSMASQ_PID\" \n    ######(wait $DNSMASQ_PID ; die \"dnsmasq failed\") &  # wait can't deal with non-child\n    pid_watchdog \"$DNSMASQ_PID\" 9 \"dnsmasq failed\" &\n    sleep 2\n}\n\ncheck_rfkill_unblock_wifi() {\n    local PHY\n    if which rfkill > /dev/null 2>&1 ; then\n        PHY=$(get_interface_phy_device \"${SUBNET_IFACE}\")\n        [[ -n $PHY ]] && rfkill unblock $(rfkill | grep \"$PHY\" | awk '{print $1}') >/dev/null 2>&1\n    fi\n}\n\n#=========== Above are functions ======================\n#=========== Executing begin ==============================\n\n# if empty option, show usage and exit \ncheck_empty_option \"$@\"\n\n# TODO: are some global variables are still defined in those following code?\ndefine_global_variables\n\nARGS=( \"$@\" )\n\nparse_user_options \"$@\"\n# TODO: detect user option conflict\n\n\nTMPDIR=\"$(decide_tmpdir)\"\n\n# if user choose to deal with running instances, will output some info then exit after this \n# NOTE above don't require root\ncheck_other_functions \n# NOTE below require root\n\n# if user choose to daemonize, will start new background process and exit this \ndaemonizing_check\n\n# check if wifi will work on this system and user settings\n[[ $WIFI_IFACE ]] && check_wifi_settings\n\n[[ -n \"$NEW_MACADDR\" ]] && check_if_new_mac_valid # check NEW_MACADDR. will exit if not valid\n\n# checks finished\n\n## ===== Above don't echo anything if no warning or error====================\n## ========================================================\nphead\nphead2\necho\n\necho \"PID: $$\"\n\nTARGET_IFACE=\"$(decide_target_interface)\" || exit 1 # judge wired (-i CONN_IFACE) or wireless hotspot (--ap $WIFI_IFACE)\necho \"Target interface is ${TARGET_IFACE} ($(get_interface_mac \"$TARGET_IFACE\")) \"\nshow_interface_pci_info \"$TARGET_IFACE\"\n\nif [[ \"$MAC_USE_RANDOM\" -eq 1 ]] ; then\n    NEW_MACADDR=\"$(generate_random_mac)\"\n    echo \"Use random MAC address $NEW_MACADDR\"\nfi\n\ndecide_ip_addresses # ip 4 & 6 lan addresses\n\n# if user choose to make DHCP to tell clients to use other DNS, we don't have to serve DNS\n[[ $DHCP_DNS != 'gateway' && $DHCP_DNS6 != 'gateway' ]] && dnsmasq_NO_DNS=1\n\n#===========================================================\n#==== begin to do some change on config files and system===\n\ninit_trap\n# NOTE function die() is designed not to be used before init_trap() executed\n\ninit_conf_dirs #   CONFDIR  , COMMON_CONFDIR  . make dir\n\n[[ $WIFI_IFACE ]] && prepare_wifi_interface # this will create virtual ap interface (if needed) and set VWIFI_IFACE and AP_IFACE (if success)\n\nSUBNET_IFACE=\"$(decide_subnet_interface)\"  # SUBNET_IFACE can be TARGET_IFACE (wired) or AP_IFACE (ap) .this is after prepare_wifi_interface()\necho \"$SUBNET_IFACE\" > \"$CONFDIR/subn_iface\"\n\n# if virtual wifi interface, will be destroyed, so only need to save status when not\n[[ -z $VWIFI_IFACE ]] && backup_interface_status\n\n# TODO: should these 2 before calling prepare_wifi_interface ? in check_wifi_settings() ?\n# set iw country code\nif [[ $WIFI_IFACE && -n \"$COUNTRY\" && $USE_IWCONFIG -eq 0 ]]; then\n    iw reg set \"$COUNTRY\" || die \"Failed setting country code\"\nfi\n\n# judge channel availability after changing country code\nif [[ $WIFI_IFACE ]] ; then\n    can_transmit_to_channel \"${AP_IFACE}\" ${CHANNEL} || die \"Your adapter can not transmit to channel ${CHANNEL}, frequency band ${FREQ_BAND}GHz.\"\nfi\n\n[[ $WIFI_IFACE ]] && write_hostapd_conf\n#===================================================\n#===================================================\n\n# set interface unmanaged by networkManager\nif is_nm_running && nm_knows \"$TARGET_IFACE\"; then # if nm knows target iface, should know subnet iface too. but need to wait until nm finds subnet iface (waiting code is in nm_set_unmanaged()\n    nm_set_unmanaged \"${SUBNET_IFACE}\" # will write NM_UNM_LIST\nfi\n\n[[ $NO_DNSMASQ -eq 0 ]] && write_dnsmasq_conf\n#===========================\n\n# initialize subnet interface\n# take subnet interface down first\nip link set down dev \"${SUBNET_IFACE}\" || die \"Failed setting ${SUBNET_IFACE} down\"\n# flush old IPs of subnet interface\nip addr flush \"${SUBNET_IFACE}\" || die \"Failed flush ${SUBNET_IFACE} IP\"\n\ndealwith_mac # setting MAC should be after setting NM unmanaged\n\n[[ $WIFI_IFACE ]] && check_rfkill_unblock_wifi\n\n\necho\niptables --version\necho \"Notice: Not showing all operations done to iptables rules\"\n\nif [[ \"$IPV6\" -eq 0 ]]; then\n    IP_VERs=(\"4\")\nelse\n    IP_VERs=(\"4\" \"6\")\nfi\n\ndisable_unwanted_forwarding \n\n\n# bring subnet interface up\nip link set up dev \"${SUBNET_IFACE}\" || die \"Failed bringing ${SUBNET_IFACE} up\"\n\n# hostapd , haveged\n[[ $WIFI_IFACE ]] && run_wifi_ap_processes\n\n# add ipv4 address to subnet interface\nip -4 addr add ${GATEWAY4}/24 broadcast ${GATEWAY4%.*}.255 dev ${SUBNET_IFACE} || die \"Failed setting ${SUBNET_IFACE} IPv4 address\"\n\nset_ipv6_bits\n\n# add ipv6 address to subnet interface\nif [[ $IPV6 -eq 1 ]] ; then\n    ip -6 addr add ${GATEWAY6}/64  dev ${SUBNET_IFACE} || die \"Failed setting ${SUBNET_IFACE} IPv6 address\"\nfi\n\n\n# enable Internet sharing\nif [[ \"$SHARE_METHOD\" == \"none\" ]]; then\n\n    echo \"No Internet sharing\"\n    \n    [[ \"$BANLAN\" -eq 1 ]] && start_ban_lan\n    \nelif [[ \"$SHARE_METHOD\" == \"nat\" ]]; then\n    [[ \"$INTERNET_IFACE\" && \"$dnsmasq_NO_DNS\" -eq 0 ]] && echo -e \"\\nWARN: You specified Internet interface but this host is providing local DNS. In some unexpected case (eg. mistaken configurations), queries may leak to other interfaces, which you should be aware of.\\n\" >&2\n    \n    start_nat\n    \n    [[ \"$BANLAN\" -eq 1 ]] && start_ban_lan\n    \n    echo 1 > \"/proc/sys/net/ipv4/ip_forward\" || die \"Failed enabling system ipv4 forwarding\" # TODO maybe uneeded in '--no4' mode\n    \n    if [[ $IPV6 -eq 1 ]]; then\n        echo 1 > \"/proc/sys/net/ipv6/conf/all/forwarding\" || die \"Failed enabling system ipv6 forwarding\" # TODO if '-o' used, set only 2 interfaces' bits\n    fi\n    \n    # to enable clients to establish PPTP connections we must\n    # load nf_nat_pptp module\n    modprobe nf_nat_pptp > /dev/null 2>&1 && echo \"Loaded kernel module nf_nat_pptp\"\n    \nelif [[ \"$SHARE_METHOD\" == \"redsocks\" ]]; then\n\n    if [[ $IPV6 -eq 1 ]]; then\n        echo 1 > \"/proc/sys/net/ipv6/conf/$SUBNET_IFACE/forwarding\" || die \"Failed enabling $SUBNET_IFACE ipv6 forwarding\" # to set NA router bit\n    fi\n    \n    [[ \"$dnsmasq_NO_DNS\" -eq 0 && ! $DNS ]] &&  echo -e \"\\nWARN: You are using in transparent proxy mode but this host is providing local DNS. In some unexpected case (eg. mistaken configurations), queries may leak to other interfaces, which you should be aware of.\\n\" >&2\n\n    [[ \"$BANLAN\" -eq 1 ]] && start_ban_lan\n    \n    start_redsocks\nfi\n\n# start dhcp + dns (optional)\n\n# allow dns port input even if we don't run dnsmasq\n# user can serve their own dns server\n[[ \"$DHCP_DNS\" == \"gateway\" || \"$DHCP_DNS6\" == \"gateway\" ]] && allow_dns_port\n\n[[ \"$CATCH_DNS\" -eq 1 ]] && start_catch_dns\n\n[[ $NO_DNSMASQ -eq 0 ]] && ( allow_dhcp ; start_dnsmasq )\n\n\necho \"\"\nis_firewalld_running && firewalld_add_tmpzone\n\n\necho \necho \"== Setting up completed, now linux-router should be working ==\"\n\n#============================================================\n#============================================================\n#============================================================\n\nshow_qr() {\n    local T S P H\n    S=\"$SSID\"\n    if [[ -n \"$PASSPHRASE\" ]]; then\n        T=\"WPA\"\n        P=\"$PASSPHRASE\"\n    else\n        T=\"nopass\"\n    fi\n    [[ \"$HIDDEN\" -eq 1 ]] && H=\"true\"\n    echo \"Scan QR code on phone to connect to WiFi\"\n    qrencode -m 2 -t ANSIUTF8 \"WIFI:T:${T};S:${S};P:${P};H:${H};\"\n    echo \"Use this command to save QR code to image file:\"\n    echo \"    qrencode -m 2 -o <file> \\\"WIFI:T:${T};S:${S};P:${P};H:${H};\\\"\"\n    echo\n}\n\n[[ \"$QR\" -eq 1 ]] && show_qr\n\n# need loop to keep this script running\nbash -c \"while :; do sleep 8000 ; done \" &\nKEEP_RUNNING_PID=$!\necho \"$KEEP_RUNNING_PID\" > \"$CONFDIR/keep_running.pid\"\nwait \"$KEEP_RUNNING_PID\"\n\nclean_exit\n"
        }
      ]
    }
  ]
}