{
  "metadata": {
    "timestamp": 1736568787570,
    "page": 920,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkyOQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "DerDanilo/proxmox-stuff",
      "stars": 1080,
      "defaultBranch": "master",
      "files": [
        {
          "name": "Ansible",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0400390625,
          "content": "MIT License\n\nCopyright (c) 2018 DerDanilo\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.697265625,
          "content": "# Proxmox stuff\n\nThis is a collection of stuff that I wrote for Proxmox. Its possble to use the [Ansible roles](#ansible) I wrote or to use the [bash scripts](#bash-scripts) for the backup & restore tasks.\n\n---\n\n# Ansible\n\nSmall Ansible playbook and role collection for Proxmox related stuff.\n\n# prox_config_backup\n\nI just wrote this script quick and dirty.\nSome people use it on a daily basis (including me).\n\nThere might be a PBS backup feature to backup PVE cluster config in the near future provided by the Proxmox team.\nBut since this was only mentioned on the roadmap we still have to wait.\n\nMeanwhile I manage all PVE nodes with Ansible and usually have no need to restore configuration unless all cluster\nnodes failed at once. But having a full cluster config backup is still useful and makes PVE admins sleep well at night (or day).\n\nThe script must be run as root, and can be run from cron or an interactive terminal.\n\n## Backup\n* Download the [script](https://raw.githubusercontent.com/DerDanilo/proxmox-stuff/master/prox_config_backup.sh)  \n```cd /root/; wget -qO- https://raw.githubusercontent.com/DerDanilo/proxmox-stuff/master/prox_config_backup.sh```\n* Set the permanent backups directory environment variable ```export BACK_DIR=\"/path/to/backup/directory\"``` or edit the script to set the `$DEFAULT_BACK_DIR` variable to your preferred backup directory\n* Make the script executable ```chmod +x ./prox_config_backup.sh```\n* Shut down ALL VMs + LXC Containers if you want to go the safe way. (Not required)\n* Run the script ```./prox_config_backup.sh```\n\n### Notification\n\nThe script supports [healthchecks.io](https://healthchecks.io) notifications, either to the hosted service, or a self-hosted instance. The notification sends during the final cleanup stage, and either returns 0 to tell Healthchecks that the command was successful, or the exit error code (1-255) to tell Healthchecks that the command failed. To enable:\n* Set the `$HEALTHCHECK` variable to 1\n* Set the `$HEALTHCHECK_URL` variable to the full ping URL for your check. Do not include anything after the UUID, the status flag will be added by the script.\n\n## Restore\n❗ **ONLY USE THIS SCRIPT ON THE SAME NODE / PROXMOX VERSION, OTHERWISE IT WILL BREAK YOUR FRESH PROXMOX INSTALLATION. IT WILL ALSO FAIL IF YOU ARE RUNNING A CLUSTER!** ❗\n\nFor more info also see #5.\n\n# Bash Scripts\n\n### Cron\n\nTo set up a automatic cron job on a monthly (```/etc/cron.weekly``` or ```/etc/cron.daily``` can be used to!) schedule, running the prox_config_backup script, follow these steps:\n\n```wget https://raw.githubusercontent.com/DerDanilo/proxmox-stuff/master/prox_config_backup.sh -O /etc/cron.monthly/prox_config_backup```\n\nChange ```DEFAULT_BACK_DIR=\"/mnt/pve/truenas_backup/pve\"``` and ```MAX_BACKUPS=5``` to the values you want!\n\nOptional: [Execute run-parts](https://superuser.com/questions/402781/what-is-run-parts-in-etc-crontab-and-how-do-i-use-it) to see if it contains errors:\n\n```run-parts -v --test /etc/cron.monthly```\n\n### Manually\n\nOn my machine, you end up with a GZipped file of about 1-5 MB with a name like \"proxmox_backup_proxmoxhostname_2017-12-02.15.48.10.tar.gz\".  \nDepending upon how you schedule it and the size of your server, that could eventually become a space issue so don't  \nforget to set up some kind of archive maintenance.\n\nTo restore, move the file back to proxmox with cp, scp, webmin, a thumb drive, whatever.  \nI place it back into the /var/tmp directory from where it came. \n\n```\n# Unpack the original backup\ntar -zxvf proxmox_backup_proxmoxhostname_2017-12-02.15.48.10.tar.gz\n# unpack the tared contents\ntar -xvf proxmoxpve.2017-12-02.15.48.10.tar\ntar -xvf proxmoxetc.2017-12-02.15.48.10.tar\ntar -xvf proxmoxroot.2017-12-02.15.48.10.tar\n\n# If the services are running, stop them:\nfor i in pve-cluster pvedaemon vz qemu-server; do systemctl stop $i ; done\n\n# Copy the old content to the original directory:\ncp -avr /var/tmp/var/tmp/etc /etc\ncp -avr /var/tmp/var/tmp/var /var\ncp -avr /var/tmp/var/tmp/root /root\n\n# And, finally, restart services:\nfor i in qemu-server vz pvedaemon pve-cluster; do systemctl start $i ; done\n```\n\nIf nothing goes wrong, and you have separately restored the VM images using the default Proxmox process.  \nYou should be back where you started. But let's hope it never comes to that.\n\n\n### Script\n\n* Download the [script](https://raw.githubusercontent.com/DerDanilo/proxmox-stuff/master/prox_config_restore.sh)  \n```cd /root/; wget -qO- https://raw.githubusercontent.com/DerDanilo/proxmox-stuff/master/prox_config_restore.sh```\n* Make the script executable ```chmod +x ./prox_config_restore.sh```\n* Run the script ```./prox_config_restore.sh proxmox_backup_proxmoxhostname_2017-12-02.15.48.10.tar.gz```\n\n\n\n## Sources\nhttp://ziemecki.net/content/proxmox-config-backups\n"
        },
        {
          "name": "prox_config_backup.sh",
          "type": "blob",
          "size": 5.9560546875,
          "content": "#!/bin/bash\n# Version\t      0.3.0\n# Date\t\t      19.04.2024\n# Author \t      DerDanilo \n# Contributors    aboutte, xmirakulix, bootsie123, phidauex\n\n###########################\n# Configuration Variables #\n###########################\n\n# Permanent backups directory\n# Default value can be overridden by setting environment variable before running prox_config_backup.sh\n#   example: export BACK_DIR=\"/mnt/pve/media/backup\"\n#   or\n#   example: BACK_DIR=\".\" ./prox_config_backup.sh\nDEFAULT_BACK_DIR=\"/mnt/pve/media/backup\"\n\n# number of backups to keep before overriding the oldest one\nMAX_BACKUPS=5\n\n# Set to 'true' to backup /opt/* folder\nBACKUP_OPT_FOLDER=false\n\n# Healthchecks.io notification service\n# Set to 1 to use Healthchecks.io\nHEALTHCHECKS=0\n# Set to the URL of your healthchecks.io check\nHEALTHCHECKS_URL=https://hc-ping.com/your_uuid_here\n\n###########################\n\n# Set terminal to \"dumb\" if not set (cron compatibility)\nexport TERM=${TERM:-dumb}\n\n# always exit on error\nset -e\n\n# Set backup directory to default OR environment variable\n_bdir=${BACK_DIR:-$DEFAULT_BACK_DIR}\n\n# Check backup directory exists\nif [[ ! -d \"${_bdir}\" ]] ; then\n    echo \"Aborting because backup target does not exists\" ; exit 1\nfi\n\n# temporary storage directory\n_tdir=${TMP_DIR:-/var/tmp}\n\n_tdir=$(mktemp -d $_tdir/proxmox-XXXXXXXX)\n\nfunction clean_up {\n    exit_code=$?\n    echo \"Cleaning up\"\n    rm -rf $_tdir\n\n    # Ping Healthchecks.io if enabled\n    if [ $HEALTHCHECKS -eq 1 ]; then\n        echo \"Healthchecks.io notification is enabled\"\n        curl -fsS -m 10 --retry 5 -o /dev/null $HEALTHCHECKS_URL/${exit_code}\n    fi\n}\n\n# register the cleanup function to be called on the EXIT signal\ntrap clean_up EXIT\n\n# Don't change if not required\n_now=$(date +%Y-%m-%d.%H.%M.%S)\n_HOSTNAME=$(hostname)\n_filename1=\"$_tdir/proxmoxetc.$_now.tar\"\n_filename2=\"$_tdir/proxmoxvarlibpve.$_now.tar\"\n_filename3=\"$_tdir/proxmoxroot.$_now.tar\"\n_filename4=\"$_tdir/proxmoxcron.$_now.tar\"\n_filename5=\"$_tdir/proxmoxvbios.$_now.tar\"\n_filename6=\"$_tdir/proxmoxpackages.$_now.list\"\n_filename7=\"$_tdir/proxmoxreport.$_now.txt\"\n_filename8=\"$_tdir/proxmoxlocalbin.$_now.tar\"\n_filename9=\"$_tdir/proxmoxetcpve.$_now.tar\"\n_filename10=\"$_tdir/proxmoxopt.$_now.tar\"\n_filename_final=\"$_tdir/pve_\"$_HOSTNAME\"_\"$_now\".tar.gz\"\n\n##########\n\nfunction description {\n# Check to see if we are in an interactive terminal, if not, skip the description\n    if [[ -t 0 && -t 1 ]]; then\n        clear\n        files_to_be_saved=\"/etc/*, /var/lib/pve-cluster/*, /root/*, /var/spool/cron/*, /usr/share/kvm/*.vbios\"\n        if [ \"$BACKUP_OPT_FOLDER\" = true ]; then files_to_be_saved=\"${files_to_be_saved}, /opt/*\"; fi\n        cat <<EOF\n\n        Proxmox Server Config Backup\n        Hostname: \"$_HOSTNAME\"\n        Timestamp: \"$_now\"\n\n        Files to be saved:\n        \"$files_to_be_saved\"\n\n        Backup target:\n        \"$_bdir\"\n        -----------------------------------------------------------------\n\n        This script is supposed to backup your node config and not VM\n        or LXC container data. To backup your instances please use the\n        built in backup feature or a backup solution that runs within\n        your instances.\n\n        For questions or suggestions please contact me at\n        https://github.com/DerDanilo/proxmox-stuff\n        -----------------------------------------------------------------\n\n        Hit return to proceed or CTRL-C to abort.\nEOF\n        read dummy\n        clear\n    fi\n}\n\nfunction are-we-root-abort-if-not {\n    if [[ ${EUID} -ne 0 ]] ; then\n      echo \"Aborting because you are not root\" ; exit 1\n    fi\n}\n\nfunction check-num-backups {\n    if [[ $(ls ${_bdir}/*_${_HOSTNAME}_*.tar.gz | wc -l) -ge $MAX_BACKUPS ]]; then\n      local oldbackups=\"$(ls ${_bdir}/*_${_HOSTNAME}_*.tar.gz -t | tail -n +$MAX_BACKUPS)\"\n      echo \"${oldbackups}\"\n      rm ${oldbackups}\n    fi\n}\n\nfunction copyfilesystem {\n    echo \"Tar files\"\n    # copy key system files\n    tar --warning='no-file-ignored' -cvPf \"$_filename1\" --one-file-system /etc/.\n    tar --warning='no-file-ignored' -cvPf \"$_filename9\" --one-file-system /etc/pve/.\n    tar --warning='no-file-ignored' -cvPf \"$_filename2\" /var/lib/pve-cluster/.\n    tar --warning='no-file-ignored' -cvPf \"$_filename3\" --one-file-system /root/.\n    tar --warning='no-file-ignored' -cvPf \"$_filename4\" /var/spool/cron/.\n\n    if [ \"$BACKUP_OPT_FOLDER\" = true ]; then tar --warning='no-file-ignored' -cvPf \"$_filename10\" --one-file-system /opt/.; fi\n\n    if [ \"$(ls -A /usr/local/bin 2>/dev/null)\" ]; then tar --warning='no-file-ignored' -cvPf \"$_filename8\" /usr/local/bin/.; fi\n\n    if [ \"$(ls /usr/share/kvm/*.vbios 2>/dev/null)\" != \"\" ] ; then\n\techo backing up custom video bios...\n\ttar --warning='no-file-ignored' -cvPf \"$_filename5\" /usr/share/kvm/*.vbios\n    fi\n    # copy installed packages list\n    echo \"Copying installed packages list from APT\"\n    apt-mark showmanual | tee \"$_filename6\"\n    # copy pvereport output\n    echo \"Copying pvereport output\"\n    pvereport | tee \"$_filename7\"\n}\n\nfunction compressandarchive {\n    echo \"Compressing files\"\n    # archive the copied system files\n    tar -cvzPf \"$_filename_final\" $_tdir/*.{tar,list,txt}\n\n    # copy config archive to backup folder\n    # this may be replaced by scp command to place in remote location\n    cp $_filename_final $_bdir/\n}\n\nfunction stopservices {\n    # stop host services\n    for i in pve-cluster pvedaemon vz qemu-server; do systemctl stop $i ; done\n    # give them a moment to finish\n    sleep 10s\n}\n\nfunction startservices {\n    # restart services\n    for i in qemu-server vz pvedaemon pve-cluster; do systemctl start $i ; done\n    # Make sure that all VMs + LXC containers are running\n    qm startall\n}\n\n##########\n\n# Send a healthcheck.io start\nif [ $HEALTHCHECKS -eq 1 ]; then\n    curl -fsS -m 10 --retry 5 -o /dev/null $HEALTHCHECKS_URL/start\nfi\n\ndescription\nare-we-root-abort-if-not\ncheck-num-backups\n\n# We don't need to stop services, but you can do that if you wish\n#stopservices\n\ncopyfilesystem\n\n# We don't need to start services if we did not stop them\n#startservices\n\ncompressandarchive\n"
        },
        {
          "name": "prox_config_restore.sh",
          "type": "blob",
          "size": 2.2861328125,
          "content": "#!/bin/bash\n# Version\t      0.2.4\n# Date\t\t      08.04.2024\n# Author \t      razem-io \n# Contributors\n\n# Very basic restore script based on https://github.com/DerDanilo/proxmox-stuff/issues/5\n\n# Restores backup from prox_config_backup.sh\n#   example: prox_config_restore.sh pve_proxmoxhostname_2023-12-02.15.48.10.tar.gz\n\nset -e\n\nif [[ $# -eq 0 ]] ; then\n    echo 'Argument missing -> restore.sh pve_proxmoxhostname_2023-12-02.15.48.10.tar.gz'\n    exit 0\nfi\n\necho \"Select restore mode:\"\necho \"1) Default restore\"\necho \"2) Restore with /etc/fstab commented out and saved as /etc/fstab_RESTORED\"\nread -p \"Enter choice (1 or 2): \" CHOICE\n\ncase \"$CHOICE\" in\n    1)\n        COMMENT_FSTAB=false\n        ;;\n    2)\n        COMMENT_FSTAB=true\n        echo \"WARNING: Option 2 is experimental and may be suitable for new Proxmox systems.\"\n        echo \"A copy of the /etc/fstab file from your backup will be made, all lines will be commented out, and the copy and saved as /etc/fstab_RESTORED and moved to /etc.\"\n        echo \"It is your responsibility to make any necessary configuration updates to /etc/fstab based on /etc/fstab_RESTORED.\"\n        read -p \"Are you sure you want to proceed with this option? (y/n): \" CONFIRMATION\n        if [[ \"$CONFIRMATION\" != \"y\" && \"$CONFIRMATION\" != \"Y\" ]]; then\n            echo \"Option aborted. Exiting.\"\n            exit 1\n        fi\n        ;;\n    *)\n        echo \"Invalid choice. Exiting.\"\n        exit 1\n        ;;\nesac\n\nFOLDER_1=\"./$1_1\"\nFOLDER_2=\"./$1_2\"\n\nmkdir \"$FOLDER_1\"\nmkdir \"$FOLDER_2\"\n\ntar -zxvf $1 -C \"$FOLDER_1\"\nfind \"$FOLDER_1\" -name \"*tar\" -exec tar xvf '{}' -C \"$FOLDER_2\" \\;\n\nif [ \"$COMMENT_FSTAB\" = true ]; then\n    echo \"Processing /etc/fstab\"\n    if [[ -f \"$FOLDER_2/etc/fstab\" ]]; then\n        sed 's/^/# /' \"$FOLDER_2/etc/fstab\" > /tmp/fstab_RESTORED\n    fi\nfi\n\nfor i in pve-cluster pvedaemon vz qemu-server; do systemctl stop $i ; done || true\n\nif [ \"$COMMENT_FSTAB\" = true ] && [[ -f /tmp/fstab_RESTORED ]]; then\n    mv /tmp/fstab_RESTORED /etc/fstab_RESTORED\nelse\n    find \"$FOLDER_2\" -type f ! -name 'fstab_RESTORED' -exec cp -a '{}' / \\;\nfi\n\ncp -avr \"$FOLDER_2/\" /\n\nrm -r \"$FOLDER_1\" \"$FOLDER_2\" || true\n\nif [ \"$COMMENT_FSTAB\" = true ] && [[ -f /tmp/fstab_RESTORED ]]; then\n    rm /tmp/fstab_RESTORED\nfi\n\nread -p \"Restore complete. Hit 'Enter' to reboot or CTRL+C to cancel.\"\nreboot"
        },
        {
          "name": "umount-stale-mount.sh",
          "type": "blob",
          "size": 0.681640625,
          "content": "#!/bin/bash\n# Umount stale CIFS/SMB or NFS mounts after 300 seconds\n# PVE will remount automatically if storage is activated\n\nlistsmb=$(mount | sed -n \"s/^.* on \\(.*\\) type cifs .*$/\\1/p\")\n\nfor i in $listsmb ; do\n        timeout 300 ls $i >& /dev/null\n        if [ $? -ne 0 ] ; then\n                echo \"Stale $i\"\n                echo \"Umount this stale mount\"\n                umount -f -l $i ;\n        fi\ndone\n\nlistnfs=$(mount | sed -n \"s/^.* on \\(.*\\) type nfs .*$/\\1/p\")\n\nfor i in $listnfs ; do\n        timeout 300 ls $i >& /dev/null\n        if [ $? -ne 0 ] ; then\n                echo \"Stale $i\"\n                echo \"Umount this stale mount\"\n                umount -f -l $i ;\n        fi\ndone\n"
        }
      ]
    }
  ]
}