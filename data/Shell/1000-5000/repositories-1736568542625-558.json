{
  "metadata": {
    "timestamp": 1736568542625,
    "page": 558,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU1OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "winapps-org/winapps",
      "stars": 1582,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.1123046875,
          "content": "[submodule \"WinApps-Launcher\"]\n\tpath = WinApps-Launcher\n\turl = https://github.com/winapps-org/WinApps-Launcher.git\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 1.3037109375,
          "content": "ci:\n  autoupdate_branch: \"rewrite\"\n\nexclude: ^(.+)\\.patch$\n\nrepos:\n  - repo: https://github.com/Lucas-C/pre-commit-hooks\n    rev: v1.5.5\n    hooks:\n      - id: chmod\n        args: [ \"775\" ]\n        files: (\\.sh|winapps)$\n      - id: forbid-crlf\n      - id: remove-crlf\n      - id: forbid-tabs\n      - id: remove-tabs\n        args: [ --whitespaces-count, \"4\" ]\n\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.6.0\n    hooks:\n      - id: check-added-large-files\n      - id: check-case-conflict\n      - id: check-executables-have-shebangs\n      - id: check-json\n      - id: check-merge-conflict\n      - id: check-shebang-scripts-are-executable\n      - id: check-symlinks\n      - id: check-toml\n      - id: check-vcs-permalinks\n      - id: check-xml\n      - id: check-yaml\n      - id: destroyed-symlinks\n      - id: detect-private-key\n      - id: end-of-file-fixer\n      - id: fix-byte-order-marker\n      - id: mixed-line-ending\n      - id: pretty-format-json\n        args: [ \"--autofix\", \"--no-sort-keys\" ]\n      - id: sort-simple-yaml\n      - id: trailing-whitespace\n\n  - repo: https://github.com/scop/pre-commit-shfmt\n    rev: v3.8.0-1\n    hooks:\n      - id: shfmt\n        args: [\"-i\", \"4\", \"-ci\", \"-s\"]\n\n  - repo: https://github.com/shellcheck-py/shellcheck-py\n    rev: v0.10.0.1\n    hooks:\n      - id: shellcheck\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.3759765625,
          "content": "\n# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, caste, color, religion, or sexual\nidentity and orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the overall\n  community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or advances of\n  any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email address,\n  without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\nhttps://matrix.to/#/#winapps:matrix.org.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series of\nactions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or permanent\nban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior, harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within the\ncommunity.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.1, available at\n[https://www.contributor-covenant.org/version/2/1/code_of_conduct.html][v2.1].\n\nCommunity Impact Guidelines were inspired by\n[Mozilla's code of conduct enforcement ladder][Mozilla CoC].\n\nFor answers to common questions about this code of conduct, see the FAQ at\n[https://www.contributor-covenant.org/faq][FAQ]. Translations are available at\n[https://www.contributor-covenant.org/translations][translations].\n\n[homepage]: https://www.contributor-covenant.org\n[v2.1]: https://www.contributor-covenant.org/version/2/1/code_of_conduct.html\n[Mozilla CoC]: https://github.com/mozilla/diversity\n[FAQ]: https://www.contributor-covenant.org/faq\n[translations]: https://www.contributor-covenant.org/translations\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.91796875,
          "content": "# Contribution Guidelines\n\nThank you for contributing to winapps! Before you can contribute, we ask some things of you:\n\n- Please follow our Code of Conduct, the Contributor Covenant. You can find a copy in this repository or under https://www.contributor-covenant.org/\n- All Contributors have to sign [a CLA](https://gist.github.com/oskardotglobal/35f0a72eb45fcc7087e535561383dbc5) for legal reasons. When opening a PR, @cla-assistant will prompt you and guide you through the process. However, if you contribute on behalf of a legal entity, we ask of you to sign [a different CLA](https://gist.github.com/oskardotglobal/75a8cc056e56a439fa6a1551129ae47f). In that case, please contact us.\n- Please follow code conventions enforced by `pre-commit`. To keep down CI usage, please run it locally before committing too.\n  See <https://pre-commit.com> for installation, then run `pre-commit install` inside the `winapps` repository you cloned.\n"
        },
        {
          "name": "COPYRIGHT.md",
          "type": "blob",
          "size": 0.416015625,
          "content": "Some of the files are\n\n    Copyright (c) 2024 fmstrat\n\nMany files also contain contributions from third parties.\nIn this case the original copyright of the contributions can be traced through the history of the source version control system.\n\nWhen that is not the case, the files contain a prominent notice stating the original copyright and applicable license, or come with their own dedicated COPYRIGHT and/or LICENSE file.\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 32.2451171875,
          "content": "For copyright information, please see the [COPYRIGHT.md](./COPYRIGHT.md) file.\n\nThis project has files licensed under different licenses.\n\nThe original project by Fmstrat <https://github.com/Fmstrat/winapps/> is not free software.\nDue to lack of a license, it is All Rights Reserved by the original author.\n\nWe have tried contacting Fmstrat about this, but they abandoned the project and did not reply nor apply an open-source license to the project.\nHowever, almost all parts of the codebase have been rewritten and all new contributions require a Contributor License Agreement ([for individuals](https://gist.github.com/oskardotglobal/35f0a72eb45fcc7087e535561383dbc5), [for legal entities](https://gist.github.com/oskardotglobal/75a8cc056e56a439fa6a1551129ae47f)) to be signed. Therefore, the below license is applied to all new contributions made to the project.\n\nRefer to a specific file for it's respective license.\n\n# GNU AFFERO GENERAL PUBLIC LICENSE\n\nVersion 3, 19 November 2007\n\nCopyright (C) 2007 Free Software Foundation, Inc.\n<https://fsf.org/>\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\n## Preamble\n\nThe GNU Affero General Public License is a free, copyleft license for\nsoftware and other kinds of works, specifically designed to ensure\ncooperation with the community in the case of network server software.\n\nThe licenses for most software and other practical works are designed\nto take away your freedom to share and change the works. By contrast,\nour General Public Licenses are intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains\nfree software for all its users.\n\nWhen we speak of free software, we are referring to freedom, not\nprice. Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\nDevelopers that use our General Public Licenses protect your rights\nwith two steps: (1) assert copyright on the software, and (2) offer\nyou this License which gives you legal permission to copy, distribute\nand/or modify the software.\n\nA secondary benefit of defending all users' freedom is that\nimprovements made in alternate versions of the program, if they\nreceive widespread use, become available for other developers to\nincorporate. Many developers of free software are heartened and\nencouraged by the resulting cooperation. However, in the case of\nsoftware used on network servers, this result may fail to come about.\nThe GNU General Public License permits making a modified version and\nletting the public access it on a server without ever releasing its\nsource code to the public.\n\nThe GNU Affero General Public License is designed specifically to\nensure that, in such cases, the modified source code becomes available\nto the community. It requires the operator of a network server to\nprovide the source code of the modified version running there to the\nusers of that server. Therefore, public use of a modified version, on\na publicly accessible server, gives the public access to the source\ncode of the modified version.\n\nAn older license, called the Affero General Public License and\npublished by Affero, was designed to accomplish similar goals. This is\na different license, not a version of the Affero GPL, but Affero has\nreleased a new version of the Affero GPL which permits relicensing\nunder this license.\n\nThe precise terms and conditions for copying, distribution and\nmodification follow.\n\n## TERMS AND CONDITIONS\n\n### 0. Definitions.\n\n\"This License\" refers to version 3 of the GNU Affero General Public\nLicense.\n\n\"Copyright\" also means copyright-like laws that apply to other kinds\nof works, such as semiconductor masks.\n\n\"The Program\" refers to any copyrightable work licensed under this\nLicense. Each licensee is addressed as \"you\". \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\nTo \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of\nan exact copy. The resulting work is called a \"modified version\" of\nthe earlier work or a work \"based on\" the earlier work.\n\nA \"covered work\" means either the unmodified Program or a work based\non the Program.\n\nTo \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy. Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\nTo \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies. Mere interaction with a user\nthrough a computer network, with no transfer of a copy, is not\nconveying.\n\nAn interactive user interface displays \"Appropriate Legal Notices\" to\nthe extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License. If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n### 1. Source Code.\n\nThe \"source code\" for a work means the preferred form of the work for\nmaking modifications to it. \"Object code\" means any non-source form of\na work.\n\nA \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\nThe \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form. A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\nThe \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities. However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work. For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\nThe Corresponding Source need not include anything that users can\nregenerate automatically from other parts of the Corresponding Source.\n\nThe Corresponding Source for a work in source code form is that same\nwork.\n\n### 2. Basic Permissions.\n\nAll rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met. This License explicitly affirms your unlimited\npermission to run the unmodified Program. The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work. This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\nYou may make, run and propagate covered works that you do not convey,\nwithout conditions so long as your license otherwise remains in force.\nYou may convey covered works to others for the sole purpose of having\nthem make modifications exclusively for you, or provide you with\nfacilities for running those works, provided that you comply with the\nterms of this License in conveying all material for which you do not\ncontrol copyright. Those thus making or running the covered works for\nyou must do so exclusively on your behalf, under your direction and\ncontrol, on terms that prohibit them from making any copies of your\ncopyrighted material outside their relationship with you.\n\nConveying under any other circumstances is permitted solely under the\nconditions stated below. Sublicensing is not allowed; section 10 makes\nit unnecessary.\n\n### 3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\nNo covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\nWhen you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such\ncircumvention is effected by exercising rights under this License with\nrespect to the covered work, and you disclaim any intention to limit\noperation or modification of the work as a means of enforcing, against\nthe work's users, your or third parties' legal rights to forbid\ncircumvention of technological measures.\n\n### 4. Conveying Verbatim Copies.\n\nYou may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\nYou may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n### 5. Conveying Modified Source Versions.\n\nYou may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these\nconditions:\n\n-   a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n-   b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under\n    section 7. This requirement modifies the requirement in section 4\n    to \"keep intact all notices\".\n-   c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy. This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged. This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n-   d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\nA compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit. Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n### 6. Conveying Non-Source Forms.\n\nYou may convey a covered work in object code form under the terms of\nsections 4 and 5, provided that you also convey the machine-readable\nCorresponding Source under the terms of this License, in one of these\nways:\n\n-   a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n-   b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the Corresponding\n    Source from a network server at no charge.\n-   c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source. This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n-   d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge. You need not require recipients to copy the\n    Corresponding Source along with the object code. If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source. Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n-   e) Convey the object code using peer-to-peer transmission,\n    provided you inform other peers where the object code and\n    Corresponding Source of the work are being offered to the general\n    public at no charge under subsection 6d.\n\nA separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\nA \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal,\nfamily, or household purposes, or (2) anything designed or sold for\nincorporation into a dwelling. In determining whether a product is a\nconsumer product, doubtful cases shall be resolved in favor of\ncoverage. For a particular product received by a particular user,\n\"normally used\" refers to a typical or common use of that class of\nproduct, regardless of the status of the particular user or of the way\nin which the particular user actually uses, or expects or is expected\nto use, the product. A product is a consumer product regardless of\nwhether the product has substantial commercial, industrial or\nnon-consumer uses, unless such uses represent the only significant\nmode of use of the product.\n\n\"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to\ninstall and execute modified versions of a covered work in that User\nProduct from a modified version of its Corresponding Source. The\ninformation must suffice to ensure that the continued functioning of\nthe modified object code is in no case prevented or interfered with\nsolely because modification has been made.\n\nIf you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information. But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\nThe requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or\nupdates for a work that has been modified or installed by the\nrecipient, or for the User Product in which it has been modified or\ninstalled. Access to a network may be denied when the modification\nitself materially and adversely affects the operation of the network\nor violates the rules and protocols for communication across the\nnetwork.\n\nCorresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n### 7. Additional Terms.\n\n\"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law. If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\nWhen you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit. (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.) You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\nNotwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders\nof that material) supplement the terms of this License with terms:\n\n-   a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n-   b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n-   c) Prohibiting misrepresentation of the origin of that material,\n    or requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n-   d) Limiting the use for publicity purposes of names of licensors\n    or authors of the material; or\n-   e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n-   f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions\n    of it) with contractual assumptions of liability to the recipient,\n    for any liability that these contractual assumptions directly\n    impose on those licensors and authors.\n\nAll other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10. If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term. If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\nIf you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\nAdditional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions; the\nabove requirements apply either way.\n\n### 8. Termination.\n\nYou may not propagate or modify a covered work except as expressly\nprovided under this License. Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\nHowever, if you cease all violation of this License, then your license\nfrom a particular copyright holder is reinstated (a) provisionally,\nunless and until the copyright holder explicitly and finally\nterminates your license, and (b) permanently, if the copyright holder\nfails to notify you of the violation by some reasonable means prior to\n60 days after the cessation.\n\nMoreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\nTermination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License. If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n### 9. Acceptance Not Required for Having Copies.\n\nYou are not required to accept this License in order to receive or run\na copy of the Program. Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance. However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work. These actions infringe copyright if you do\nnot accept this License. Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n### 10. Automatic Licensing of Downstream Recipients.\n\nEach time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License. You are not responsible\nfor enforcing compliance by third parties with this License.\n\nAn \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations. If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\nYou may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License. For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n### 11. Patents.\n\nA \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based. The\nwork thus licensed is called the contributor's \"contributor version\".\n\nA contributor's \"essential patent claims\" are all patent claims owned\nor controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version. For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\nEach contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\nIn the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement). To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\nIf you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients. \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\nIf, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\nA patent license is \"discriminatory\" if it does not include within the\nscope of its coverage, prohibits the exercise of, or is conditioned on\nthe non-exercise of one or more of the rights that are specifically\ngranted under this License. You may not convey a covered work if you\nare a party to an arrangement with a third party that is in the\nbusiness of distributing software, under which you make payment to the\nthird party based on the extent of your activity of conveying the\nwork, and under which the third party grants, to any of the parties\nwho would receive the covered work from you, a discriminatory patent\nlicense (a) in connection with copies of the covered work conveyed by\nyou (or copies made from those copies), or (b) primarily for and in\nconnection with specific products or compilations that contain the\ncovered work, unless you entered into that arrangement, or that patent\nlicense was granted, prior to 28 March 2007.\n\nNothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n### 12. No Surrender of Others' Freedom.\n\nIf conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License. If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under\nthis License and any other pertinent obligations, then as a\nconsequence you may not convey it at all. For example, if you agree to\nterms that obligate you to collect a royalty for further conveying\nfrom those to whom you convey the Program, the only way you could\nsatisfy both those terms and this License would be to refrain entirely\nfrom conveying the Program.\n\n### 13. Remote Network Interaction; Use with the GNU General Public License.\n\nNotwithstanding any other provision of this License, if you modify the\nProgram, your modified version must prominently offer all users\ninteracting with it remotely through a computer network (if your\nversion supports such interaction) an opportunity to receive the\nCorresponding Source of your version by providing access to the\nCorresponding Source from a network server at no charge, through some\nstandard or customary means of facilitating copying of software. This\nCorresponding Source shall include the Corresponding Source for any\nwork covered by version 3 of the GNU General Public License that is\nincorporated pursuant to the following paragraph.\n\nNotwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU General Public License into a single\ncombined work, and to convey the resulting work. The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the work with which it is combined will remain governed by version\n3 of the GNU General Public License.\n\n### 14. Revised Versions of this License.\n\nThe Free Software Foundation may publish revised and/or new versions\nof the GNU Affero General Public License from time to time. Such new\nversions will be similar in spirit to the present version, but may\ndiffer in detail to address new problems or concerns.\n\nEach version is given a distinguishing version number. If the Program\nspecifies that a certain numbered version of the GNU Affero General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation. If the Program does not specify a version number of the\nGNU Affero General Public License, you may choose any version ever\npublished by the Free Software Foundation.\n\nIf the Program specifies that a proxy can decide which future versions\nof the GNU Affero General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\nLater license versions may give you additional or different\npermissions. However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n### 15. Disclaimer of Warranty.\n\nTHERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT\nWARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND\nPERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE\nDEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR\nCORRECTION.\n\n### 16. Limitation of Liability.\n\nIN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR\nCONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES\nARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT\nNOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR\nLOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM\nTO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER\nPARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n\n### 17. Interpretation of Sections 15 and 16.\n\nIf the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\nEND OF TERMS AND CONDITIONS\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 22.693359375,
          "content": "<p align=\"center\"><img align=\"center\" width=\"700\" src=\"./icons/banner_dark.svg#gh-dark-mode-only\"/></p>\n<p align=\"center\"><img align=\"center\" width=\"700\" src=\"./icons/banner_dark.svg#gh-light-mode-only\"/></p>\n<hr>\n\nRun Windows applications (including [Microsoft 365](https://www.microsoft365.com/) and [Adobe Creative Cloud](https://www.adobe.com/creativecloud.html)) on GNU/Linux with `KDE Plasma`, `GNOME` or `XFCE`, integrated seamlessly as if they were native to the OS.\n\n<p align=\"center\"><img src=\"./demo/demo.png\" width=1000 alt=\"WinApps Demonstration.\"></p>\n\n## Underlying Mechanism\nWinApps works by:\n1. Running Windows in a `Docker`, `Podman` or `libvirt` virtual machine.\n2. Querying Windows for all installed applications.\n3. Creating shortcuts to selected Windows applications on the host GNU/Linux OS.\n4. Using [`FreeRDP`](https://www.freerdp.com/) as a backend to seamlessly render Windows applications alongside GNU/Linux applications.\n\n## Additional Features\n- The GNU/Linux `/home` directory is accessible within Windows via the `\\\\tsclient\\home` mount.\n- Integration with `Nautilus`, allowing you to right-click files to open them with specific Windows applications based on the file MIME type.\n- The [official taskbar widget](https://github.com/winapps-org/WinApps-Launcher) enables seamless administration of the Windows subsystem and offers an easy way to launch Windows applications.\n\n## Supported Applications\n**WinApps supports <u>*ALL*</u> Windows applications.**\n\nUniversal application support is achieved by:\n1. Scanning Windows for any officially supported applications (list below).\n2. Scanning Windows for any other `.exe` files listed within the Windows Registry.\n\nOfficially supported applications benefit from high-resolution icons and pre-populated MIME types. This enables file managers to determine which Windows applications should open files based on file extensions. Icons for other detected applications are pulled from `.exe` files.\n\nContributing to the list of supported applications is encouraged through submission of pull requests! Please help us grow the WinApps community.\n\n*Please note that the provided list of officially supported applications is community-driven. As such, some applications may not be tested and verified by the WinApps team.*\n\n### Officially Supported Applications\n<table cellpadding=\"10\" cellspacing=\"0\" border=\"0\">\n    <tr>\n        <!-- Adobe Acrobat Pro -->\n        <td>\n            <img src=\"apps/acrobat-x-pro/icon.svg\" width=\"100\">\n        </td>\n        <td>\n            <b>Adobe Acrobat Pro</b><br>\n            (X)<br>\n            <i><a href=\"https://commons.wikimedia.org/wiki/File:Adobe_Acrobat_DC_logo_2020.svg\">Icon</a> in the Public Domain.</i>\n        </td>\n        <!-- Adobe After Effects -->\n        <td>\n            <img src=\"apps/aftereffects-cc/icon.svg\" width=\"100\">\n        </td>\n        <td>\n            <b>Adobe After Effects</b><br>\n            (CC)<br>\n            <i><a href=\"https://commons.wikimedia.org/wiki/File:Adobe_After_Effects_CC_icon.svg\">Icon</a> in the Public Domain.</i>\n        </td>\n    </tr>\n    <tr>\n        <!-- Adobe Audition -->\n        <td>\n            <img src=\"apps/audition-cc/icon.svg\" width=\"100\">\n        </td>\n        <td>\n            <b>Adobe Audition</b><br>\n            (CC)<br>\n            <i><a href=\"https://en.m.wikipedia.org/wiki/File:Adobe_Audition_CC_icon_%282020%29.svg\">Icon</a> in the Public Domain.</i>\n        </td>\n        <!-- Adobe Bridge -->\n        <td>\n            <img src=\"apps/bridge-cs6/icon.svg\" width=\"100\">\n        </td>\n        <td>\n            <b>Adobe Bridge</b><br>\n            (CS6, CC)<br>\n            <i><a href=\"https://en.m.wikipedia.org/wiki/File:Adobe_Bridge_CC_icon.svg\">Icon</a> in the Public Domain.</i>\n        </td>\n    </tr>\n    <tr>\n        <!-- Adobe Creative Cloud -->\n        <td>\n            <img src=\"apps/adobe-cc/icon.svg\" width=\"100\">\n        </td>\n        <td>\n            <b>Adobe Creative Cloud</b><br>\n            (CC)<br>\n            <i><a href=\"https://iconduck.com/icons/240218/adobe-creative-cloud\">Icon</a> under <a href=\"https://iconduck.com/licenses/mit\">MIT license</a>.</i>\n        </td>\n        <!-- Adobe Illustrator -->\n        <td>\n            <img src=\"apps/illustrator-cc/icon.svg\" width=\"100\">\n        </td>\n        <td>\n            <b>Adobe Illustrator</b><br>\n            (CC)<br>\n            <i><a href=\"https://commons.wikimedia.org/wiki/File:Adobe_Illustrator_CC_icon.svg\">Icon</a> in the Public Domain.</i>\n        </td>\n    </tr>\n    <tr>\n        <!-- Adobe InDesign -->\n        <td>\n            <img src=\"apps/indesign-cc/icon.svg\" width=\"100\">\n        </td>\n        <td>\n            <b>Adobe InDesign</b><br>\n            (CC)<br>\n            <i><a href=\"https://commons.wikimedia.org/wiki/File:Adobe_InDesign_CC_icon.svg\">Icon</a> in the Public Domain.</i>\n        </td>\n        <!-- Adobe Lightroom -->\n        <td>\n            <img src=\"apps/lightroom-cc/icon.svg\" width=\"100\">\n        </td>\n        <td>\n            <b>Adobe Lightroom</b><br>\n            (CC)<br>\n            <i><a href=\"https://commons.wikimedia.org/wiki/File:Adobe_Photoshop_Lightroom_CC_logo.svg\">Icon</a> in the Public Domain.</i>\n        </td>\n    </tr>\n    <tr>\n        <!-- Adobe Photoshop -->\n        <td>\n            <img src=\"apps/photoshop-cc/icon.svg\" width=\"100\">\n        </td>\n        <td>\n            <b>Adobe Photoshop</b><br>\n            (CS6, CC)<br>\n            <i><a href=\"https://commons.wikimedia.org/wiki/File:Adobe_Photoshop_CC_icon.svg\">Icon</a> in the Public Domain.</i>\n        </td>\n        <!-- Command Prompt -->\n        <td>\n            <img src=\"apps/cmd/icon.svg\" width=\"100\">\n        </td>\n        <td>\n            <b>Command Prompt</b><br>\n            (cmd.exe)<br>\n            <i><a href=\"https://github.com/microsoft/terminal/blob/main/res/terminal/Terminal.svg\">Icon</a> under <a href=\"https://github.com/microsoft/terminal/blob/main/LICENSE\">MIT license</a>.</i>\n        </td>\n    </tr>\n    <tr>\n        <!-- File Explorer -->\n        <td>\n            <img src=\"apps/explorer/icon.svg\" width=\"100\">\n        </td>\n        <td>\n            <b>File Explorer</b><br>\n            (Windows Explorer)<br>\n            <i><a href=\"https://commons.wikimedia.org/wiki/File:Windows_Explorer.svg\">Icon</a> in the Public Domain.</i>\n        </td>\n        <!-- Internet Explorer -->\n        <td>\n            <img src=\"apps/iexplorer/icon.svg\" width=\"100\">\n        </td>\n        <td>\n            <b>Internet Explorer</b><br>\n            (11)<br>\n            <i><a href=\"https://commons.wikimedia.org/wiki/File:Internet_Explorer_10%2B11_logo.svg\">Icon</a> in the Public Domain.</i>\n        </td>\n    </tr>\n    <tr>\n         <!-- Microsoft Access -->\n        <td>\n            <img src=\"apps/access/icon.svg\" width=\"100\">\n        </td>\n        <td>\n            <b>Microsoft Access</b><br>\n            (2016, 2019, o365)<br>\n            <i><a href=\"https://commons.wikimedia.org/wiki/File:Microsoft_Office_Access_(2019-present).svg\">Icon</a> in the Public Domain.</i>\n        </td>\n        <!-- Microsoft Excel -->\n        <td>\n            <img src=\"apps/excel/icon.svg\" width=\"100\">\n        </td>\n        <td>\n            <b>Microsoft Excel</b><br>\n            (2016, 2019, o365)<br>\n            <i><a href=\"https://en.m.wikipedia.org/wiki/File:Microsoft_Office_Excel_(2019%E2%80%93present).svg\">Icon</a> in the Public Domain.</i>\n        </td>\n    </tr>\n    <tr>\n        <!-- Microsoft Word -->\n        <td>\n            <img src=\"apps/word/icon.svg\" width=\"100\">\n        </td>\n        <td>\n            <b>Microsoft Word</b><br>\n            (2016, 2019, o365)<br>\n            <i><a href=\"https://en.m.wikipedia.org/wiki/File:Microsoft_Office_Word_(2019%E2%80%93present).svg\">Icon</a> in the Public Domain.</i>\n        </td>\n        <!-- Microsoft OneNote -->\n        <td>\n            <img src=\"apps/onenote/icon.svg\" width=\"100\">\n        </td>\n        <td>\n            <b>Microsoft OneNote</b><br>\n            (2016, 2019, o365)<br>\n            <i><a href=\"https://en.m.wikipedia.org/wiki/File:Microsoft_Office_OneNote_(2019%E2%80%93present).svg\">Icon</a> in the Public Domain.</i>\n        </td>\n    </tr>\n    <tr>\n        <!-- Microsoft Outlook -->\n        <td>\n            <img src=\"apps/outlook/icon.svg\" width=\"100\">\n        </td>\n        <td>\n            <b>Microsoft Outlook</b><br>\n            (2016, 2019, o365)<br>\n            <i><a href=\"https://en.m.wikipedia.org/wiki/File:Microsoft_Office_Outlook_(2018%E2%80%93present).svg\">Icon</a> in the Public Domain.</i>\n        </td>\n        <!-- Microsoft PowerPoint -->\n        <td>\n            <img src=\"apps/powerpoint/icon.svg\" width=\"100\">\n        </td>\n        <td>\n            <b>Microsoft PowerPoint</b><br>\n            (2016, 2019, o365)<br>\n            <i><a href=\"https://en.m.wikipedia.org/wiki/File:Microsoft_Office_PowerPoint_(2019%E2%80%93present).svg\">Icon</a> in the Public Domain.</i>\n            </td>\n    </tr>\n    <tr>\n        <!-- Microsoft Publisher -->\n        <td>\n            <img src=\"apps/publisher/icon.svg\" width=\"100\">\n        </td>\n        <td>\n            <b>Microsoft Publisher</b><br>\n            (2016, 2019, o365)<br>\n            <i><a href=\"https://en.m.wikipedia.org/wiki/File:Microsoft_Office_Publisher_(2019-present).svg\">Icon</a> in the Public Domain.</i>\n        </td>\n        <!-- Microsoft Visio -->\n        <td>\n            <img src=\"apps/visio/icon.svg\" width=\"100\">\n        </td>\n        <td>\n            <b>Microsoft Visio</b><br>\n            (Standard/Pro. 2021, Plan 2)<br>\n            <i><a href=\"https://en.m.wikipedia.org/wiki/File:Microsoft_Office_Visio_(2019).svg\">Icon</a> in the Public Domain.</i>\n        </td>\n    </tr>\n    <tr>\n        <!-- Microsoft Project -->\n        <td>\n            <img src=\"apps/project/icon.svg\" width=\"100\">\n        </td>\n        <td>\n            <b>Microsoft Project</b><br>\n            (Standard/Pro. 2021, Plan 3/5)<br>\n            <i><a href=\"https://en.m.wikipedia.org/wiki/File:Microsoft_Project_(2019–present).svg\">Icon</a> in the Public Domain.</i>\n        </td>\n        <!-- Microsoft Visual Studio -->\n        <td>\n            <img src=\"apps/visual-studio-pro/icon.svg\" width=\"100\">\n        </td>\n        <td>\n            <b>Microsoft Visual Studio</b><br>\n            (Comm./Pro./Ent. 2022)<br>\n            <i><a href=\"https://en.m.wikipedia.org/wiki/File:Visual_Studio_Icon_2022.svg\">Icon</a> in the Public Domain.</i>\n        </td>\n    </tr>\n    <tr>\n        <!-- PowerShell -->\n        <td>\n            <img src=\"apps/powershell/icon.svg\" width=\"100\">\n        </td>\n        <td>\n            <b>PowerShell</b><br>\n            <i><a href=\"https://iconduck.com/icons/102322/file-type-powershell\">Icon</a> under <a href=\"https://iconduck.com/licenses/mit\">MIT license</a>.</i>\n        </td>\n        <!-- Windows -->\n        <td>\n            <img src=\"icons/windows.svg\" width=\"100\">\n        </td>\n        <td>\n            <b>Windows</b><br>\n            (Full RDP Session)<br>\n            <i><a href=\"url\">Icon</a> in the Public Domain.</i>\n        </td>\n    </tr>\n</table>\n\n## Installation\n### Step 1: Configure a Windows VM\nBoth `Docker` and `Podman` are recommended backends for running the Windows virtual machine, as they facilitate an automated Windows installation process. WinApps is also compatible with `libvirt`. While this method requires considerably more manual configuration, it also provides greater virtual machine customisation options. All three methods leverage the `KVM` hypervisor, ensuring excellent virtual machine performance. Ultimately, the choice of backend depends on your specific use case.\n\nThe following guides are available:\n- [Creating a Windows VM with `Docker` or `Podman`](docs/docker.md)\n- [Creating a Windows VM with `libvirt`](docs/libvirt.md)\n\nIf you already have a Windows VM or server you wish to use with WinApps, you will still have to follow the [final steps described in the `libvirt` documentation](docs/libvirt.md#final-configuration-steps).\n\n### Step 2: Install Dependencies\nInstall the required dependencies.\n  - Debian/Ubuntu:\n      ```bash\n      sudo apt install -y dialog freerdp3-x11 iproute2 libnotify-bin netcat-openbsd\n      ```\n\n> [!NOTE]\n> On Debian you need to enable the `backports` repository for the `freerdp3-x11` package to become available.\n> For instructions, see https://backports.debian.org/Instructions.\n\n  - Fedora/RHEL:\n      ```bash\n      sudo dnf install -y dialog freerdp iproute libnotify nmap-ncat\n      ```\n  - Arch Linux:\n      ```bash\n      sudo pacman -Syu --needed -y dialog freerdp iproute2 libnotify gnu-netcat\n      ```\n  - OpenSUSE:\n      ```bash\n      sudo zypper install -y dialog freerdp iproute2 libnotify netcat-openbsd\n      ```\n  - Gentoo Linux:\n      ```bash\n      sudo emerge --ask=n dev-util/dialog net-misc/freerdp:3 sys-apps/iproute2 x11-libs/libnotify net-analyzer/openbsd-netcat\n      ```\n\n> [!NOTE]\n> WinApps requires `FreeRDP` version 3 or later. If not available for your distribution through your package manager, you can install the [Flatpak](https://flathub.org/apps/com.freerdp.FreeRDP):\n> ```bash\n> flatpak install flathub com.freerdp.FreeRDP\n> sudo flatpak override --filesystem=home com.freerdp.FreeRDP # To use `+home-drive`\n> ```\n> However, if you have weird issues like [#233](https://github.com/winapps-org/winapps/issues/233) when running Flatpak, please compile FreeRDP from source according to [this guide](https://github.com/FreeRDP/FreeRDP/wiki/Compilation).\n\n### Step 3: Create a WinApps Configuration File\nCreate a configuration file at `~/.config/winapps/winapps.conf` containing the following:\n```bash\n##################################\n#   WINAPPS CONFIGURATION FILE   #\n##################################\n\n# INSTRUCTIONS\n# - Leading and trailing whitespace are ignored.\n# - Empty lines are ignored.\n# - Lines starting with '#' are ignored.\n# - All characters following a '#' are ignored.\n\n# [WINDOWS USERNAME]\nRDP_USER=\"MyWindowsUser\"\n\n# [WINDOWS PASSWORD]\n# NOTES:\n# - If using FreeRDP v3.9.0 or greater, you *have* to set a password\nRDP_PASS=\"MyWindowsPassword\"\n\n# [WINDOWS DOMAIN]\n# DEFAULT VALUE: '' (BLANK)\nRDP_DOMAIN=\"\"\n\n# [WINDOWS IPV4 ADDRESS]\n# NOTES:\n# - If using 'libvirt', 'RDP_IP' will be determined by WinApps at runtime if left unspecified.\n# DEFAULT VALUE:\n# - 'docker': '127.0.0.1'\n# - 'podman': '127.0.0.1'\n# - 'libvirt': '' (BLANK)\nRDP_IP=\"\"\n\n# [WINAPPS BACKEND]\n# DEFAULT VALUE: 'docker'\n# VALID VALUES:\n# - 'docker'\n# - 'podman'\n# - 'libvirt'\n# - 'manual'\nWAFLAVOR=\"docker\"\n\n# [DISPLAY SCALING FACTOR]\n# NOTES:\n# - If an unsupported value is specified, a warning will be displayed.\n# - If an unsupported value is specified, WinApps will use the closest supported value.\n# DEFAULT VALUE: '100'\n# VALID VALUES:\n# - '100'\n# - '140'\n# - '180'\nRDP_SCALE=\"100\"\n\n# [ADDITIONAL FREERDP FLAGS & ARGUMENTS]\n# NOTES:\n# - You can try adding /network:lan to these flags in order to increase performance, however, some users have faced issues with this.\n# DEFAULT VALUE: '/cert:tofu /sound /microphone'\n# VALID VALUES: See https://github.com/awakecoding/FreeRDP-Manuals/blob/master/User/FreeRDP-User-Manual.markdown\nRDP_FLAGS=\"/cert:tofu /sound /microphone\"\n\n# [MULTIPLE MONITORS]\n# NOTES:\n# - If enabled, a FreeRDP bug *might* produce a black screen.\n# DEFAULT VALUE: 'false'\n# VALID VALUES:\n# - 'true'\n# - 'false'\nMULTIMON=\"false\"\n\n# [DEBUG WINAPPS]\n# NOTES:\n# - Creates and appends to ~/.local/share/winapps/winapps.log when running WinApps.\n# DEFAULT VALUE: 'true'\n# VALID VALUES:\n# - 'true'\n# - 'false'\nDEBUG=\"true\"\n\n# [AUTOMATICALLY PAUSE WINDOWS]\n# NOTES:\n# - This is currently INCOMPATIBLE with 'docker' and 'manual'.\n# - See https://github.com/dockur/windows/issues/674\n# DEFAULT VALUE: 'off'\n# VALID VALUES:\n# - 'on'\n# - 'off'\nAUTOPAUSE=\"off\"\n\n# [AUTOMATICALLY PAUSE WINDOWS TIMEOUT]\n# NOTES:\n# - This setting determines the duration of inactivity to tolerate before Windows is automatically paused.\n# - This setting is ignored if 'AUTOPAUSE' is set to 'off'.\n# - The value must be specified in seconds (to the nearest 10 seconds e.g., '30', '40', '50', etc.).\n# - For RemoteApp RDP sessions, there is a mandatory 20-second delay, so the minimum value that can be specified here is '20'.\n# - Source: https://techcommunity.microsoft.com/t5/security-compliance-and-identity/terminal-services-remoteapp-8482-session-termination-logic/ba-p/246566\n# DEFAULT VALUE: '300'\n# VALID VALUES: >=20\nAUTOPAUSE_TIME=\"300\"\n\n# [FREERDP COMMAND]\n# NOTES:\n# - WinApps will attempt to automatically detect the correct command to use for your system.\n# DEFAULT VALUE: '' (BLANK)\n# VALID VALUES: The command required to run FreeRDPv3 on your system (e.g., 'xfreerdp', 'xfreerdp3', etc.).\nFREERDP_COMMAND=\"\"\n```\n\n> [!NOTE]\n> `RDP_USER` and `RDP_PASS` must correspond to a complete Windows user account and password, such as those created during Windows setup or for a domain user. User/PIN combinations are not valid for RDP access.\n\n> [!NOTE]\n> If you wish to use an alternative WinApps backend (other than `Docker`), uncomment and change `WAFLAVOR=\"docker\"` to `WAFLAVOR=\"podman\"` or `WAFLAVOR=\"libvirt\"`.\n\n#### Configuration Options Explained\n- If using a pre-existing Windows RDP server on your LAN, you must use `RDP_IP` to specify the location of the Windows server. You may also wish to configure a static IP address for this server.\n- If running a Windows VM using `libvirt` with NAT enabled, leave `RDP_IP` commented out and WinApps will auto-detect the local IP address for the VM.\n- For domain users, you can uncomment and change `RDP_DOMAIN`.\n- On high-resolution (UHD) displays, you can set `RDP_SCALE` to the scale you would like to use (100, 140 or 180).\n- To add additional flags to the FreeRDP call (e.g. `/prevent-session-lock 120`), uncomment and use the `RDP_FLAGS` configuration option.\n- For multi-monitor setups, you can try enabling `MULTIMON`. A FreeRDP bug may result in a black screen however, in which case you should revert this change.\n- If you enable `DEBUG`, a log will be created on each application start in `~/.local/share/winapps/winapps.log`.\n- If using a system on which the FreeRDP command is not `xfreerdp` or `xfreerdp3`, the correct command can be specified using `FREERDP_COMMAND`.\n\n### Step 4: Run the WinApps Installer\nRun the WinApps installer.\n```bash\nbash <(curl https://raw.githubusercontent.com/winapps-org/winapps/main/setup.sh)\n```\n\nA list of supported additional arguments can be accessed by running `./setup.sh --help`.\n\n<img src=\"./demo/installer.gif\" width=1000 alt=\"WinApps Installer Animation.\">\n\n## Adding Additional Pre-defined Applications\nAdding your own applications with custom icons and MIME types to the installer is easy. Simply copy one of the application configurations in the `apps` folder located within the WinApps repository, and:\n1. Modify the name and variables to reflect the appropriate/desired values for your application.\n2. Replace `icon.svg` with an SVG for your application (ensuring the icon is appropriately licensed).\n3. Remove and reinstall WinApps.\n4. Submit a pull request to add your application to WinApps as an officially supported application once you have tested and verified your configuration (optional, but encouraged).\n\n## Running Applications Manually\nWinApps offers a manual mode for running applications that were not configured by the WinApps installer. This is completed with the `manual` flag. Executables that are in the Windows PATH do not require full path definition.\n\n```bash\nwinapps manual \"C:\\my\\directory\\executableNotInPath.exe\"\nwinapps manual executableInPath.exe\n```\n\n## Updating WinApps\nThe installer can be run multiple times. To update your installation of WinApps:\n1. Run the WinApps installer to remove WinApps from your system.\n2. Pull the latest changes from the WinApps GitHub repository.\n3. Re-install WinApps using the WinApps installer by running `winapps-setup`.\n\n## Installation using Nix\n\nFirst, follow Step 1 of the normal installation guide to create your VM.\nThen, install WinApps according to the following instructions.\n\nAfter installation, it will be available under `winapps`, with the installer being available under `winapps-setup`\nand the optional launcher being available under `winapps-launcher.`\n\n### Using standalone Nix\n\nFirst, make sure Flakes and the `nix` command are enabled.\nIn your `~/.config/nix/nix.conf`:\n```\nexperimental-features = nix-command flakes\n# specify to use binary cache (optional)\nextra-substituters = https://winapps.cachix.org/\nextra-trusted-public-keys = winapps.cachix.org-1:HI82jWrXZsQRar/PChgIx1unmuEsiQMQq+zt05CD36g=\nextra-trusted-users = <your-username> # replace with your username\n```\n\n```bash\nnix profile install github:winapps-org/winapps#winapps\nnix profile install github:winapps-org/winapps#winapps-launcher # optional\n```\n\n### On NixOS using Flakes\n\n```nix\n# flake.nix\n{\n  description = \"My configuration\";\n\n  inputs = {\n    nixpkgs.url = \"github:NixOS/nixpkgs/nixos-unstable\";\n\n    winapps = {\n      url = \"github:winapps-org/winapps\";\n      inputs.nixpkgs.follows = \"nixpkgs\";\n    };\n  };\n\n  outputs =\n    {\n      nixpkgs,\n      winapps,\n      ...\n    }:\n    {\n      nixosConfigurations.hostname = nixpkgs.lib.nixosSystem rec {\n        system = \"x86_64-linux\";\n\n        modules = [\n          ./configuration.nix\n          (\n            { pkgs, ... }:\n            {\n              # set up binary cache (optional)\n              nix.settings = {\n                substituters = [ \"https://winapps.cachix.org/\" ];\n                trusted-public-keys = [ \"winapps.cachix.org-1:HI82jWrXZsQRar/PChgIx1unmuEsiQMQq+zt05CD36g=\" ];\n              };\n\n              environment.systemPackages = [\n                winapps.packages.${system}.winapps\n                winapps.packages.${system}.winapps-launcher # optional\n              ];\n            }\n          )\n        ];\n      };\n    };\n}\n```\n\n### On NixOS without Flakes\n\n[Flakes aren't real and they can't hurt you.](https://jade.fyi/blog/flakes-arent-real/).\nHowever, if you still don't want to use flakes, you can use WinApps with flake-compat like:\n\n```nix\n# configuration.nix\n{ system, ... }:\n{\n  # set up binary cache (optional)\n  nix.settings = {\n    substituters = [ \"https://winapps.cachix.org/\" ];\n    trusted-public-keys = [ \"winapps.cachix.org-1:HI82jWrXZsQRar/PChgIx1unmuEsiQMQq+zt05CD36g=\" ];\n    trusted-users = [ \"<your username>\" ]; # replace with your username\n  };\n\n  environment.systemPackages =\n    let\n      winapps =\n        (import (builtins.fetchTarball \"https://github.com/winapps-org/winapps/archive/main.tar.gz\"))\n        .packages.\"${system}\";\n    in\n    [\n      winapps.winapps\n      winapps.winapps-launcher # optional\n    ];\n}\n```\n\n## Star History\n<a href=\"https://star-history.com/#winapps-org/winapps&Date\">\n <picture>\n   <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://api.star-history.com/svg?repos=winapps-org/winapps&type=Date&theme=dark\"/>\n   <source media=\"(prefers-color-scheme: light)\" srcset=\"https://api.star-history.com/svg?repos=winapps-org/winapps&type=Date\"/>\n   <img alt=\"Star History Chart\" src=\"https://api.star-history.com/svg?repos=winapps-org/winapps&type=Date\"/>\n </picture>\n</a>\n"
        },
        {
          "name": "WinApps-Launcher",
          "type": "commit",
          "content": null
        },
        {
          "name": "apps",
          "type": "tree",
          "content": null
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "compose.yaml",
          "type": "blob",
          "size": 2.9091796875,
          "content": "# For documentation, FAQ, additional configuration options and technical help, visit: https://github.com/dockur/windows\n\nname: \"winapps\" # Docker Compose Project Name.\nvolumes:\n  # Create Volume 'data'.\n  # Located @ '/var/lib/docker/volumes/winapps_data/_data' (Docker).\n  # Located @ '/var/lib/containers/storage/volumes/winapps_data/_data' or '~/.local/share/containers/storage/volumes/winapps_data/_data' (Podman).\n  data:\nservices:\n  windows:\n    image: ghcr.io/dockur/windows:latest\n    container_name: WinApps # Created Docker VM Name.\n    environment:\n      # Version of Windows to configure. For valid options, visit:\n      # https://github.com/dockur/windows?tab=readme-ov-file#how-do-i-select-the-windows-version\n      # https://github.com/dockur/windows?tab=readme-ov-file#how-do-i-install-a-custom-image\n      VERSION: \"tiny11\"\n      RAM_SIZE: \"4G\" # RAM allocated to the Windows VM.\n      CPU_CORES: \"4\" # CPU cores allocated to the Windows VM.\n      DISK_SIZE: \"64G\" # Size of the primary hard disk.\n      #DISK2_SIZE: \"32G\" # Uncomment to add an additional hard disk to the Windows VM. Ensure it is mounted as a volume below.\n      #USERNAME: \"Docker\" # Uncomment to set a custom Windows username. The default is 'Docker'.\n      #PASSWORD: \"\" # Uncomment to set a password for the Windows user. There is no default password.\n      HOME: \"${HOME}\" # Set path to Linux user home folder.\n    privileged: true # Grant the Windows VM extended privileges.\n    ports:\n      - 8006:8006 # Map '8006' on Linux host to '8006' on Windows VM --> For VNC Web Interface @ http://127.0.0.1:8006.\n      - 3389:3389/tcp # Map '3389' on Linux host to '3389' on Windows VM --> For Remote Desktop Protocol (RDP).\n      - 3389:3389/udp # Map '3389' on Linux host to '3389' on Windows VM --> For Remote Desktop Protocol (RDP).\n    stop_grace_period: 120s # Wait 120 seconds before sending SIGTERM when attempting to shut down the Windows VM.\n    restart: on-failure # Restart the Windows VM if the exit code indicates an error.\n    volumes:\n      - data:/storage # Mount volume 'data' to use as Windows 'C:' drive.\n      - ${HOME}:/shared # Mount Linux user home directory @ '\\\\host.lan\\Data'.\n      #- /path/to/second/hard/disk:/storage2 # Uncomment to mount the second hard disk within the Windows VM. Ensure 'DISK2_SIZE' is specified above.\n      - ./oem:/oem # Enables automatic post-install execution of 'oem/install.bat', applying Windows registry modifications contained within 'oem/RDPApps.reg'.\n      #- /path/to/windows/install/media.iso:/custom.iso # Uncomment to use a custom Windows ISO. If specified, 'VERSION' (e.g. 'tiny11') will be ignored.\n    devices:\n      - /dev/kvm # Enable KVM.\n      #- /dev/sdX:/disk1 # Uncomment to mount a disk directly within the Windows VM (Note: 'disk1' will be mounted as the main drive).\n      #- /dev/sdY:/disk2 # Uncomment to mount a disk directly within the Windows VM (Note: 'disk2' and higher will be mounted as secondary drives).\n"
        },
        {
          "name": "default.nix",
          "type": "blob",
          "size": 0.337890625,
          "content": "(import (\n  let\n    lock = builtins.fromJSON (builtins.readFile ./flake.lock);\n  in\n  fetchTarball {\n    url =\n      lock.nodes.flake-compat.locked.url\n        or \"https://github.com/edolstra/flake-compat/archive/${lock.nodes.flake-compat.locked.rev}.tar.gz\";\n    sha256 = lock.nodes.flake-compat.locked.narHash;\n  }\n) { src = ./.; }).defaultNix\n"
        },
        {
          "name": "demo",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "flake.lock",
          "type": "blob",
          "size": 2.0205078125,
          "content": "{\n  \"nodes\": {\n    \"flake-compat\": {\n      \"locked\": {\n        \"lastModified\": 1696426674,\n        \"narHash\": \"sha256-kvjfFW7WAETZlt09AgDn1MrtKzP7t90Vf7vypd3OL1U=\",\n        \"rev\": \"0f9255e01c2351cc7d116c072cb317785dd33b33\",\n        \"revCount\": 57,\n        \"type\": \"tarball\",\n        \"url\": \"https://api.flakehub.com/f/pinned/edolstra/flake-compat/1.0.1/018afb31-abd1-7bff-a5e4-cff7e18efb7a/source.tar.gz\"\n      },\n      \"original\": {\n        \"type\": \"tarball\",\n        \"url\": \"https://flakehub.com/f/edolstra/flake-compat/1.tar.gz\"\n      }\n    },\n    \"flake-utils\": {\n      \"inputs\": {\n        \"systems\": \"systems\"\n      },\n      \"locked\": {\n        \"lastModified\": 1710146030,\n        \"narHash\": \"sha256-SZ5L6eA7HJ/nmkzGG7/ISclqe6oZdOZTNoesiInkXPQ=\",\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"rev\": \"b1d9ab70662946ef0850d488da1c9019f3a9752a\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"type\": \"github\"\n      }\n    },\n    \"nixpkgs\": {\n      \"locked\": {\n        \"lastModified\": 1724819573,\n        \"narHash\": \"sha256-GnR7/ibgIH1vhoy8cYdmXE6iyZqKqFxQSVkFgosBh6w=\",\n        \"owner\": \"NixOS\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"71e91c409d1e654808b2621f28a327acfdad8dc2\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"NixOS\",\n        \"ref\": \"nixos-unstable\",\n        \"repo\": \"nixpkgs\",\n        \"type\": \"github\"\n      }\n    },\n    \"root\": {\n      \"inputs\": {\n        \"flake-compat\": \"flake-compat\",\n        \"flake-utils\": \"flake-utils\",\n        \"nixpkgs\": \"nixpkgs\"\n      }\n    },\n    \"systems\": {\n      \"locked\": {\n        \"lastModified\": 1681028828,\n        \"narHash\": \"sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=\",\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"rev\": \"da67096a3b9bf56a91d16901293e51ba5b49a27e\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"type\": \"github\"\n      }\n    }\n  },\n  \"root\": \"root\",\n  \"version\": 7\n}\n"
        },
        {
          "name": "flake.nix",
          "type": "blob",
          "size": 0.6669921875,
          "content": "{\n  description = \"WinApps Nix packages & NixOS module\";\n\n  inputs = {\n    nixpkgs.url = \"github:NixOS/nixpkgs/nixos-unstable\";\n\n    flake-compat.url = \"https://flakehub.com/f/edolstra/flake-compat/1.tar.gz\";\n    flake-utils.url = \"github:numtide/flake-utils\";\n  };\n\n  outputs =\n    {\n      nixpkgs,\n      flake-utils,\n      ...\n    }:\n    flake-utils.lib.eachDefaultSystem (\n      system:\n      let\n        pkgs = import nixpkgs { inherit system; };\n      in\n      {\n        formatter = pkgs.nixfmt-rfc-style;\n\n        packages.winapps = pkgs.callPackage ./packages/winapps { };\n        packages.winapps-launcher = pkgs.callPackage ./packages/winapps-launcher { };\n      }\n    );\n}\n"
        },
        {
          "name": "fonts",
          "type": "tree",
          "content": null
        },
        {
          "name": "icons",
          "type": "tree",
          "content": null
        },
        {
          "name": "install",
          "type": "tree",
          "content": null
        },
        {
          "name": "oem",
          "type": "tree",
          "content": null
        },
        {
          "name": "packages",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.sh",
          "type": "blob",
          "size": 77.5615234375,
          "content": "#!/usr/bin/env bash\n\n# shellcheck disable=SC2034           # Silence warnings regarding unused variables globally.\n\n### GLOBAL CONSTANTS ###\n# ANSI ESCAPE SEQUENCES\nreadonly BOLD_TEXT=\"\\033[1m\"          # Bold\nreadonly CLEAR_TEXT=\"\\033[0m\"         # Clear\nreadonly COMMAND_TEXT=\"\\033[0;37m\"    # Grey\nreadonly DONE_TEXT=\"\\033[0;32m\"       # Green\nreadonly ERROR_TEXT=\"\\033[1;31m\"      # Bold + Red\nreadonly EXIT_TEXT=\"\\033[1;41;37m\"    # Bold + White + Red Background\nreadonly FAIL_TEXT=\"\\033[0;91m\"       # Bright Red\nreadonly INFO_TEXT=\"\\033[0;33m\"       # Orange/Yellow\nreadonly SUCCESS_TEXT=\"\\033[1;42;37m\" # Bold + White + Green Background\nreadonly WARNING_TEXT=\"\\033[1;33m\"    # Bold + Orange/Yellow\n\n# ERROR CODES\nreadonly EC_FAILED_CD=\"1\"        # Failed to change directory to location of script.\nreadonly EC_BAD_ARGUMENT=\"2\"     # Unsupported argument passed to script.\nreadonly EC_EXISTING_INSTALL=\"3\" # Existing conflicting WinApps installation.\nreadonly EC_NO_CONFIG=\"4\"        # Absence of a valid WinApps configuration file.\nreadonly EC_MISSING_DEPS=\"5\"     # Missing dependencies.\nreadonly EC_NO_SUDO=\"6\"          # Insufficient privilages to invoke superuser access.\nreadonly EC_NOT_IN_GROUP=\"7\"     # Current user not in group 'libvirt' and/or 'kvm'.\nreadonly EC_VM_OFF=\"8\"           # Windows 'libvirt' VM powered off.\nreadonly EC_VM_PAUSED=\"9\"        # Windows 'libvirt' VM paused.\nreadonly EC_VM_ABSENT=\"10\"       # Windows 'libvirt' VM does not exist.\nreadonly EC_CONTAINER_OFF=\"11\"   # Windows Docker container is not running.\nreadonly EC_NO_IP=\"12\"           # Windows does not have an IP address.\nreadonly EC_BAD_PORT=\"13\"        # Windows is unreachable via RDP_PORT.\nreadonly EC_RDP_FAIL=\"14\"        # FreeRDP failed to establish a connection with Windows.\nreadonly EC_APPQUERY_FAIL=\"15\"   # Failed to query Windows for installed applications.\nreadonly EC_INVALID_FLAVOR=\"16\"  # Backend specified is not 'libvirt', 'docker' or 'podman'.\n\n# PATHS\n# 'BIN'\nreadonly SYS_BIN_PATH=\"/usr/local/bin\"                  # UNIX path to 'bin' directory for a '--system' WinApps installation.\nreadonly USER_BIN_PATH=\"${HOME}/.local/bin\"             # UNIX path to 'bin' directory for a '--user' WinApps installation.\nreadonly USER_BIN_PATH_WIN='\\\\tsclient\\home\\.local\\bin' # WINDOWS path to 'bin' directory for a '--user' WinApps installation.\n# 'SOURCE'\nreadonly SYS_SOURCE_PATH=\"${SYS_BIN_PATH}/winapps-src\" # UNIX path to WinApps source directory for a '--system' WinApps installation.\nreadonly USER_SOURCE_PATH=\"${USER_BIN_PATH}/winapps-src\" # UNIX path to WinApps source directory for a '--system' WinApps installation.\n# 'APP'\nreadonly SYS_APP_PATH=\"/usr/share/applications\"                        # UNIX path to 'applications' directory for a '--system' WinApps installation.\nreadonly USER_APP_PATH=\"${HOME}/.local/share/applications\"             # UNIX path to 'applications' directory for a '--user' WinApps installation.\nreadonly USER_APP_PATH_WIN='\\\\tsclient\\home\\.local\\share\\applications' # WINDOWS path to 'applications' directory for a '--user' WinApps installation.\n# 'APPDATA'\nreadonly SYS_APPDATA_PATH=\"/usr/local/share/winapps\"                  # UNIX path to 'application data' directory for a '--system' WinApps installation.\nreadonly USER_APPDATA_PATH=\"${HOME}/.local/share/winapps\"             # UNIX path to 'application data' directory for a '--user' WinApps installation.\nreadonly USER_APPDATA_PATH_WIN='\\\\tsclient\\home\\.local\\share\\winapps' # WINDOWS path to 'application data' directory for a '--user' WinApps installation.\n# 'Installed Batch Script'\nreadonly BATCH_SCRIPT_PATH=\"${USER_APPDATA_PATH}/installed.bat\"          # UNIX path to a batch script used to search Windows for applications.\nreadonly BATCH_SCRIPT_PATH_WIN=\"${USER_APPDATA_PATH_WIN}\\\\installed.bat\" # WINDOWS path to a batch script used to search Windows for applications.\n# 'Installed File'\nreadonly TMP_INST_FILE_PATH=\"${USER_APPDATA_PATH}/installed.tmp\"          # UNIX path to a temporary file containing the names of detected officially supported applications.\nreadonly TMP_INST_FILE_PATH_WIN=\"${USER_APPDATA_PATH_WIN}\\\\installed.tmp\" # WINDOWS path to a temporary file containing the names of detected officially supported applications.\nreadonly INST_FILE_PATH=\"${USER_APPDATA_PATH}/installed\"                  # UNIX path to a file containing the names of detected officially supported applications.\nreadonly INST_FILE_PATH_WIN=\"${USER_APPDATA_PATH_WIN}\\\\installed\"         # WINDOWS path to a file containing the names of detected officially supported applications.\n# 'PowerShell Script'\nreadonly PS_SCRIPT_PATH=\"./install/ExtractPrograms.ps1\"                          # UNIX path to a PowerShell script used to store the names, executable paths and icons (base64) of detected applications.\nreadonly PS_SCRIPT_HOME_PATH=\"${USER_APPDATA_PATH}/ExtractPrograms.ps1\"          # UNIX path to a copy of the PowerShell script within the user's home directory to enable access by Windows.\nreadonly PS_SCRIPT_HOME_PATH_WIN=\"${USER_APPDATA_PATH_WIN}\\\\ExtractPrograms.ps1\" # WINDOWS path to a copy of the PowerShell script within the user's home directory to enable access by Windows.\n# 'Detected File'\nreadonly DETECTED_FILE_PATH=\"${USER_APPDATA_PATH}/detected\"          # UNIX path to a file containing the output generated by the PowerShell script, formatted to define bash arrays.\nreadonly DETECTED_FILE_PATH_WIN=\"${USER_APPDATA_PATH_WIN}\\\\detected\" # WINDOWS path to a file containing the output generated by the PowerShell script, formatted to define bash arrays.\n# 'FreeRDP Connection Test File'\nreadonly TEST_PATH=\"${USER_APPDATA_PATH}/FreeRDP_Connection_Test\"          # UNIX path to temporary file whose existence is used to confirm a successful RDP connection was established.\nreadonly TEST_PATH_WIN=\"${USER_APPDATA_PATH_WIN}\\\\FreeRDP_Connection_Test\" # WINDOWS path to temporary file whose existence is used to confirm a successful RDP connection was established.\n# 'WinApps Configuration File'\nreadonly CONFIG_PATH=\"${HOME}/.config/winapps/winapps.conf\" # UNIX path to the WinApps configuration file.\n# 'Inquirer Bash Script'\nreadonly INQUIRER_PATH=\"./install/inquirer.sh\" # UNIX path to the 'inquirer' script, which is used to produce selection menus.\n\n# REMOTE DESKTOP CONFIGURATION\nreadonly VM_NAME=\"RDPWindows\"  # Name of the Windows VM (FOR 'libvirt' ONLY).\nreadonly RDP_PORT=3389         # Port used for RDP on Windows.\nreadonly DOCKER_IP=\"127.0.0.1\" # Localhost.\n\n### GLOBAL VARIABLES ###\n# USER INPUT\nOPT_SYSTEM=0    # Set to '1' if the user specifies '--system'.\nOPT_USER=0      # Set to '1' if the user specifies '--user'.\nOPT_UNINSTALL=0 # Set to '1' if the user specifies '--uninstall'.\nOPT_AOSA=0      # Set to '1' if the user specifies '--setupAllOfficiallySupportedApps'.\n\n# WINAPPS CONFIGURATION FILE\nRDP_USER=\"\"        # Imported variable.\nRDP_PASS=\"\"        # Imported variable.\nRDP_DOMAIN=\"\"      # Imported variable.\nRDP_IP=\"\"          # Imported variable.\nWAFLAVOR=\"docker\"  # Imported variable.\nRDP_SCALE=100      # Imported variable.\nRDP_FLAGS=\"\"       # Imported variable.\nMULTIMON=\"false\"   # Imported variable.\nDEBUG=\"true\"       # Imported variable.\nFREERDP_COMMAND=\"\" # Imported variable.\nMULTI_FLAG=\"\"      # Set based on value of $MULTIMON.\n\n# PERMISSIONS AND DIRECTORIES\nSUDO=\"\"         # Set to \"sudo\" if the user specifies '--system', or \"\" if the user specifies '--user'.\nBIN_PATH=\"\"     # Set to $SYS_BIN_PATH if the user specifies '--system', or $USER_BIN_PATH if the user specifies '--user'.\nAPP_PATH=\"\"     # Set to $SYS_APP_PATH if the user specifies '--system', or $USER_APP_PATH if the user specifies '--user'.\nAPPDATA_PATH=\"\" # Set to $SYS_APPDATA_PATH if the user specifies '--system', or $USER_APPDATA_PATH if the user specifies '--user'.\nSOURCE_PATH=\"\"  # Set to $SYS_SOURCE_PATH if the user specifies '--system', or $USER_SOURCE_PATH if the user specifies '--user'.\n\n# INSTALLATION PROCESS\nINSTALLED_EXES=() # List of executable file names of officially supported applications that have already been configured during the current installation process.\n\n### TRAPS ###\nset -o errtrace              # Ensure traps are inherited by all shell functions and subshells.\ntrap \"waTerminateScript\" ERR # Catch non-zero return values.\n\n### FUNCTIONS ###\n# Name: 'waTerminateScript'\n# Role: Terminates the script when a non-zero return value is encountered.\n# shellcheck disable=SC2317 # Silence warning regarding this function being unreachable.\nfunction waTerminateScript() {\n    # Store the non-zero exit status received by the trap.\n    local EXIT_STATUS=$?\n\n    # Display the exit status.\n    echo -e \"${EXIT_TEXT}Exiting with status '${EXIT_STATUS}'.${CLEAR_TEXT}\"\n\n    # Terminate the script.\n    exit \"$EXIT_STATUS\"\n}\n\n# Name: 'waUsage'\n# Role: Displays usage information for the script.\nfunction waUsage() {\n    echo -e \"Usage:\n  ${COMMAND_TEXT}./setup.sh --user${CLEAR_TEXT}                                        # Install WinApps and selected applications in ${HOME}\n  ${COMMAND_TEXT}./setup.sh --system${CLEAR_TEXT}                                      # Install WinApps and selected applications in /usr\n  ${COMMAND_TEXT}./setup.sh --user --setupAllOfficiallySupportedApps${CLEAR_TEXT}      # Install WinApps and all officially supported applications in ${HOME}\n  ${COMMAND_TEXT}./setup.sh --system --setupAllOfficiallySupportedApps${CLEAR_TEXT}    # Install WinApps and all officially supported applications in /usr\n  ${COMMAND_TEXT}./setup.sh --user --uninstall${CLEAR_TEXT}                            # Uninstall everything in ${HOME}\n  ${COMMAND_TEXT}./setup.sh --system --uninstall${CLEAR_TEXT}                          # Uninstall everything in /usr\n  ${COMMAND_TEXT}./setup.sh --help${CLEAR_TEXT}                                        # Display this usage message.\"\n}\n\n# Name: 'waGetSourceCode'\n# Role: Grab the WinApps source code using Git.\nfunction waGetSourceCode() {\n    # Declare variables.\n    local SCRIPT_DIR_PATH=\"\" # Stores the absolute path of the directory containing the script.\n\n    # Determine the absolute path to the directory containing the script.\n    SCRIPT_DIR_PATH=$(readlink -f \"$(dirname \"${BASH_SOURCE[0]}\")\")\n\n    # Check if winapps is currently installed on $SOURCE_PATH\n    if [ -f \"$SCRIPT_DIR_PATH/winapps\" ] && [ \"$SCRIPT_DIR_PATH\" -ne \"$SOURCE_PATH\" ]; then\n        # Display a warning.\n        echo -e \"${WARNING_TEXT}[WARNING]${CLEAR_TEXT} You are running a WinApps installation located outside of default location '${SOURCE_PATH}'. A new installation will be created.\"\n        echo -e \"${WARNING_TEXT}[WARNING]${CLEAR_TEXT} You might want to remove your old installation on '${SCRIPT_DIR_PATH}'.\"\n    fi\n\n    if [[ ! -d \"$SOURCE_PATH\" ]]; then\n        $SUDO git clone --recurse-submodules --remote-submodules https://github.com/winapps-org/winapps.git \"$SOURCE_PATH\"\n    else\n        echo -e \"${INFO_TEXT}WinApps installation already present at ${CLEAR_TEXT}${COMMAND_TEXT}${SOURCE_PATH}${CLEAR_TEXT}${INFO_TEXT}. Updating...${CLEAR_TEXT}\"\n        $SUDO git -C \"$SOURCE_PATH\" pull --no-rebase\n    fi\n\n    # Silently change the working directory.\n    if ! cd \"$SOURCE_PATH\" &>/dev/null; then\n        # Display the error type.\n        echo -e \"${ERROR_TEXT}ERROR:${CLEAR_TEXT} ${BOLD_TEXT}DIRECTORY CHANGE FAILURE.${CLEAR_TEXT}\"\n\n        # Display error details.\n        echo -e \"${INFO_TEXT}Failed to change the working directory to ${CLEAR_TEXT}${COMMAND_TEXT}${SOURCE_PATH}${CLEAR_TEXT}${INFO_TEXT}.${CLEAR_TEXT}\"\n\n        # Display the suggested action(s).\n        echo \"--------------------------------------------------------------------------------\"\n        echo \"Ensure:\"\n        echo -e \"  - ${COMMAND_TEXT}${SOURCE_PATH}${CLEAR_TEXT} exists.\"\n        echo -e \"  - ${COMMAND_TEXT}${SOURCE_PATH}${CLEAR_TEXT} has been cloned and checked out properly.\"\n        echo -e \"  - The current user has sufficient permissions to access and write to ${COMMAND_TEXT}${SOURCE_PATH}${CLEAR_TEXT}.\"\n        echo \"--------------------------------------------------------------------------------\"\n\n        # Terminate the script.\n        return \"$EC_FAILED_CD\"\n    fi\n}\n\n# Name: 'waGetInquirer'\n# Role: Loads the inquirer script, even if the source isn't cloned yet\nfunction waGetInquirer() {\n    local INQUIRER=$INQUIRER_PATH\n\n    if [ -d \"$SYS_SOURCE_PATH\" ]; then\n        INQUIRER=$SYS_SOURCE_PATH/$INQUIRER_PATH\n    elif [ -d \"$USER_SOURCE_PATH\" ] ; then\n        INQUIRER=$USER_SOURCE_PATH/$INQUIRER_PATH\n    else\n        INQUIRER=\"/tmp/waInquirer.sh\"\n        rm -f \"$INQUIRER\"\n\n        curl -o \"$INQUIRER\" \"https://raw.githubusercontent.com/winapps-org/winapps/main/install/inquirer.sh\"\n    fi\n\n    # shellcheck source=/dev/null # Exclude this file from being checked by ShellCheck.\n    source \"$INQUIRER\"\n}\n\n# Name: 'waCheckInput'\n# Role: Sanitises input and guides users through selecting appropriate options if no arguments are provided.\nfunction waCheckInput() {\n    # Declare variables.\n    local OPTIONS=()      # Stores the options.\n    local SELECTED_OPTION # Stores the option selected by the user.\n\n    if [[ $# -gt 0 ]]; then\n        # Parse arguments.\n        for argument in \"$@\"; do\n            case \"$argument\" in\n            \"--user\")\n                OPT_USER=1\n                ;;\n            \"--system\")\n                OPT_SYSTEM=1\n                ;;\n            \"--setupAllOfficiallySupportedApps\")\n                OPT_AOSA=1\n                ;;\n            \"--uninstall\")\n                OPT_UNINSTALL=1\n                ;;\n            \"--help\")\n                waUsage\n                exit 0\n                ;;\n            *)\n                # Display the error type.\n                echo -e \"${ERROR_TEXT}ERROR:${CLEAR_TEXT} ${BOLD_TEXT}INVALID ARGUMENT.${CLEAR_TEXT}\"\n\n                # Display the error details.\n                echo -e \"${INFO_TEXT}Unsupported argument${CLEAR_TEXT} ${COMMAND_TEXT}${argument}${CLEAR_TEXT}${INFO_TEXT}.${CLEAR_TEXT}\"\n\n                # Display the suggested action(s).\n                echo \"--------------------------------------------------------------------------------\"\n                waUsage\n                echo \"--------------------------------------------------------------------------------\"\n\n                # Terminate the script.\n                return \"$EC_BAD_ARGUMENT\"\n                ;;\n            esac\n        done\n    else\n        # Install vs. uninstall?\n        OPTIONS=(\"Install\" \"Uninstall\")\n        inqMenu \"Install or uninstall WinApps?\" OPTIONS SELECTED_OPTION\n\n        # Set flags.\n        if [[ $SELECTED_OPTION == \"Uninstall\" ]]; then\n            OPT_UNINSTALL=1\n        fi\n\n        # User vs. system?\n        OPTIONS=(\"Current User\" \"System\")\n        inqMenu \"Configure WinApps for the current user '$(whoami)' or the whole system?\" OPTIONS SELECTED_OPTION\n\n        # Set flags.\n        if [[ $SELECTED_OPTION == \"Current User\" ]]; then\n            OPT_USER=1\n        elif [[ $SELECTED_OPTION == \"System\" ]]; then\n            OPT_SYSTEM=1\n        fi\n\n        # Automatic vs. manual?\n        if [ \"$OPT_UNINSTALL\" -eq 0 ]; then\n            OPTIONS=(\"Manual (Default)\" \"Automatic\")\n            inqMenu \"Automatically install supported applications or choose manually?\" OPTIONS SELECTED_OPTION\n\n            # Set flags.\n            if [[ $SELECTED_OPTION == \"Automatic\" ]]; then\n                OPT_AOSA=1\n            fi\n        fi\n\n        # Newline.\n        echo \"\"\n    fi\n\n    # Simultaneous 'User' and 'System'.\n    if [ \"$OPT_SYSTEM\" -eq 1 ] && [ \"$OPT_USER\" -eq 1 ]; then\n        # Display the error type.\n        echo -e \"${ERROR_TEXT}ERROR:${CLEAR_TEXT} ${BOLD_TEXT}CONFLICTING ARGUMENTS.${CLEAR_TEXT}\"\n\n        # Display the error details.\n        echo -e \"${INFO_TEXT}You cannot specify both${CLEAR_TEXT} ${COMMAND_TEXT}--user${CLEAR_TEXT} ${INFO_TEXT}and${CLEAR_TEXT} ${COMMAND_TEXT}--system${CLEAR_TEXT} ${INFO_TEXT}simultaneously.${CLEAR_TEXT}\"\n\n        # Display the suggested action(s).\n        echo \"--------------------------------------------------------------------------------\"\n        waUsage\n        echo \"--------------------------------------------------------------------------------\"\n\n        # Terminate the script.\n        return \"$EC_BAD_ARGUMENT\"\n    fi\n\n    # Simultaneous 'Uninstall' and 'AOSA'.\n    if [ \"$OPT_UNINSTALL\" -eq 1 ] && [ \"$OPT_AOSA\" -eq 1 ]; then\n        # Display the error type.\n        echo -e \"${ERROR_TEXT}ERROR:${CLEAR_TEXT} ${BOLD_TEXT}CONFLICTING ARGUMENTS.${CLEAR_TEXT}\"\n\n        # Display the error details.\n        echo -e \"${INFO_TEXT}You cannot specify both${CLEAR_TEXT} ${COMMAND_TEXT}--uninstall${CLEAR_TEXT} ${INFO_TEXT}and${CLEAR_TEXT} ${COMMAND_TEXT}--aosa${CLEAR_TEXT} ${INFO_TEXT}simultaneously.${CLEAR_TEXT}\"\n\n        # Display the suggested action(s).\n        echo \"--------------------------------------------------------------------------------\"\n        waUsage\n        echo \"--------------------------------------------------------------------------------\"\n\n        # Terminate the script.\n        return \"$EC_BAD_ARGUMENT\"\n    fi\n\n    # No 'User' or 'System'.\n    if [ \"$OPT_SYSTEM\" -eq 0 ] && [ \"$OPT_USER\" -eq 0 ]; then\n        # Display the error type.\n        echo -e \"${ERROR_TEXT}ERROR:${CLEAR_TEXT} ${BOLD_TEXT}INSUFFICIENT ARGUMENTS.${CLEAR_TEXT}\"\n\n        # Display the error details.\n        echo -e \"${INFO_TEXT}You must specify either${CLEAR_TEXT} ${COMMAND_TEXT}--user${CLEAR_TEXT} ${INFO_TEXT}or${CLEAR_TEXT} ${COMMAND_TEXT}--system${CLEAR_TEXT} ${INFO_TEXT}to proceed.${CLEAR_TEXT}\"\n\n        # Display the suggested action(s).\n        echo \"--------------------------------------------------------------------------------\"\n        waUsage\n        echo \"--------------------------------------------------------------------------------\"\n\n        # Terminate the script.\n        return \"$EC_BAD_ARGUMENT\"\n    fi\n}\n\n# Name: 'waConfigurePathsAndPermissions'\n# Role: Sets paths and adjusts permissions as specified.\nfunction waConfigurePathsAndPermissions() {\n    if [ \"$OPT_USER\" -eq 1 ]; then\n        SUDO=\"\"\n        SOURCE_PATH=\"$USER_SOURCE_PATH\"\n        BIN_PATH=\"$USER_BIN_PATH\"\n        APP_PATH=\"$USER_APP_PATH\"\n        APPDATA_PATH=\"$USER_APPDATA_PATH\"\n    elif [ \"$OPT_SYSTEM\" -eq 1 ]; then\n        SUDO=\"sudo\"\n        SOURCE_PATH=\"$SYS_SOURCE_PATH\"\n        BIN_PATH=\"$SYS_BIN_PATH\"\n        APP_PATH=\"$SYS_APP_PATH\"\n        APPDATA_PATH=\"$SYS_APPDATA_PATH\"\n\n        # Preemptively obtain superuser privileges.\n        sudo -v || {\n            # Display the error type.\n            echo -e \"${ERROR_TEXT}ERROR:${CLEAR_TEXT} ${BOLD_TEXT}AUTHENTICATION FAILURE.${CLEAR_TEXT}\"\n\n            # Display the error details.\n            echo -e \"${INFO_TEXT}Failed to gain superuser privileges.${CLEAR_TEXT}\"\n\n            # Display the suggested action(s).\n            echo \"--------------------------------------------------------------------------------\"\n            echo \"Please check your password and try again.\"\n            echo \"If you continue to experience issues, contact your system administrator.\"\n            echo \"--------------------------------------------------------------------------------\"\n\n            # Terminate the script.\n            return \"$EC_NO_SUDO\"\n        }\n    fi\n}\n\n# Name: 'waCheckExistingInstall'\n# Role: Identifies any existing WinApps installations that may conflict with the new installation.\nfunction waCheckExistingInstall() {\n    # Print feedback.\n    echo -n \"Checking for existing conflicting WinApps installations... \"\n\n    # Check for an existing 'user' installation.\n    if [[ -f \"${USER_BIN_PATH}/winapps\" || -d \"${USER_SOURCE_PATH}/winapps\" ]]; then\n        # Complete the previous line.\n        echo -e \"${FAIL_TEXT}Failed!${CLEAR_TEXT}\\n\"\n\n        # Display the error type.\n        echo -e \"${ERROR_TEXT}ERROR:${CLEAR_TEXT} ${BOLD_TEXT}EXISTING 'USER' WINAPPS INSTALLATION.${CLEAR_TEXT}\"\n\n        # Display the error details.\n        echo -e \"${INFO_TEXT}A previous WinApps installation was detected for the current user.${CLEAR_TEXT}\"\n\n        # Display the suggested action(s).\n        echo \"--------------------------------------------------------------------------------\"\n        echo -e \"Please remove the existing WinApps installation using ${COMMAND_TEXT}./setup.sh --user --uninstall${CLEAR_TEXT}.\"\n        echo \"--------------------------------------------------------------------------------\"\n\n        # Terminate the script.\n        return \"$EC_EXISTING_INSTALL\"\n    fi\n\n    # Check for an existing 'system' installation.\n    if [[ -f \"${SYS_BIN_PATH}/winapps\" || -d \"${SYS_SOURCE_PATH}/winapps\" ]]; then\n        # Complete the previous line.\n        echo -e \"${FAIL_TEXT}Failed!${CLEAR_TEXT}\\n\"\n\n        # Display the error type.\n        echo -e \"${ERROR_TEXT}ERROR:${CLEAR_TEXT} ${BOLD_TEXT}EXISTING 'SYSTEM' WINAPPS INSTALLATION.${CLEAR_TEXT}\"\n\n        # Display the error details.\n        echo -e \"${INFO_TEXT}A previous system-wide WinApps installation was detected.${CLEAR_TEXT}\"\n\n        # Display the suggested action(s).\n        echo \"--------------------------------------------------------------------------------\"\n        echo -e \"Please remove the existing WinApps installation using ${COMMAND_TEXT}./setup.sh --system --uninstall${CLEAR_TEXT}.\"\n        echo \"--------------------------------------------------------------------------------\"\n\n        # Terminate the script.\n        return \"$EC_EXISTING_INSTALL\"\n    fi\n\n    # Print feedback.\n    echo -e \"${DONE_TEXT}Done!${CLEAR_TEXT}\"\n}\n\n# Name: 'waFixScale'\n# Role: Since FreeRDP only supports '/scale' values of 100, 140 or 180, find the closest supported argument to the user's configuration.\nfunction waFixScale() {\n    # Define variables.\n    local OLD_SCALE=100\n    local VALID_SCALE_1=100\n    local VALID_SCALE_2=140\n    local VALID_SCALE_3=180\n\n    # Check for an unsupported value.\n    if [ \"$RDP_SCALE\" != \"$VALID_SCALE_1\" ] && [ \"$RDP_SCALE\" != \"$VALID_SCALE_2\" ] && [ \"$RDP_SCALE\" != \"$VALID_SCALE_3\" ]; then\n        # Save the unsupported scale.\n        OLD_SCALE=\"$RDP_SCALE\"\n\n        # Calculate the absolute differences.\n        local DIFF_1=$(( RDP_SCALE > VALID_SCALE_1 ? RDP_SCALE - VALID_SCALE_1 : VALID_SCALE_1 - RDP_SCALE ))\n        local DIFF_2=$(( RDP_SCALE > VALID_SCALE_2 ? RDP_SCALE - VALID_SCALE_2 : VALID_SCALE_2 - RDP_SCALE ))\n        local DIFF_3=$(( RDP_SCALE > VALID_SCALE_3 ? RDP_SCALE - VALID_SCALE_3 : VALID_SCALE_3 - RDP_SCALE ))\n\n        # Set the final scale to the valid scale value with the smallest absolute difference.\n        if (( DIFF_1 <= DIFF_2 && DIFF_1 <= DIFF_3 )); then\n            RDP_SCALE=\"$VALID_SCALE_1\"\n        elif (( DIFF_2 <= DIFF_1 && DIFF_2 <= DIFF_3 )); then\n            RDP_SCALE=\"$VALID_SCALE_2\"\n        else\n            RDP_SCALE=\"$VALID_SCALE_3\"\n        fi\n\n        # Print feedback.\n        echo -e \"${WARNING_TEXT}[WARNING]${CLEAR_TEXT} Unsupported RDP_SCALE value '${OLD_SCALE}' detected. Defaulting to '${RDP_SCALE}'.\"\n    fi\n}\n\n# Name: 'waLoadConfig'\n# Role: Loads settings specified within the WinApps configuration file.\nfunction waLoadConfig() {\n    # Print feedback.\n    echo -n \"Attempting to load WinApps configuration file... \"\n\n    if [ ! -f \"$CONFIG_PATH\" ]; then\n        # Complete the previous line.\n        echo -e \"${FAIL_TEXT}Failed!${CLEAR_TEXT}\\n\"\n\n        # Display the error type.\n        echo -e \"${ERROR_TEXT}ERROR:${CLEAR_TEXT} ${BOLD_TEXT}MISSING CONFIGURATION FILE.${CLEAR_TEXT}\"\n\n        # Display the error details.\n        echo -e \"${INFO_TEXT}A valid WinApps configuration file was not found.${CLEAR_TEXT}\"\n\n        # Display the suggested action(s).\n        echo \"--------------------------------------------------------------------------------\"\n        echo -e \"Please create a configuration file at ${COMMAND_TEXT}${CONFIG_PATH}${CLEAR_TEXT}.\"\n        echo -e \"See https://github.com/winapps-org/winapps?tab=readme-ov-file#step-3-create-a-winapps-configuration-file\"\n        echo \"--------------------------------------------------------------------------------\"\n\n        # Terminate the script.\n        return \"$EC_NO_CONFIG\"\n    else\n        # Load the WinApps configuration file.\n        # shellcheck source=/dev/null # Exclude this file from being checked by ShellCheck.\n        source \"$CONFIG_PATH\"\n    fi\n\n    # Print feedback.\n    echo -e \"${DONE_TEXT}Done!${CLEAR_TEXT}\"\n}\n\n# Name: 'waCheckScriptDependencies'\n# Role: Terminate script if dependencies are missing.\nfunction waCheckScriptDependencies() {\n    # 'Git'\n    if ! command -v git &>/dev/null; then\n        # Display the error type.\n        echo -e \"${ERROR_TEXT}ERROR:${CLEAR_TEXT} ${BOLD_TEXT}MISSING DEPENDENCIES.${CLEAR_TEXT}\"\n\n        # Display the error details.\n        echo -e \"${INFO_TEXT}Please install 'git' to proceed.${CLEAR_TEXT}\"\n\n        # Display the suggested action(s).\n        echo \"--------------------------------------------------------------------------------\"\n        echo \"Debian/Ubuntu-based systems:\"\n        echo -e \"  ${COMMAND_TEXT}sudo apt install git${CLEAR_TEXT}\"\n        echo \"Red Hat/Fedora-based systems:\"\n        echo -e \"  ${COMMAND_TEXT}sudo dnf install git${CLEAR_TEXT}\"\n        echo \"Arch Linux systems:\"\n        echo -e \"  ${COMMAND_TEXT}sudo pacman -S git${CLEAR_TEXT}\"\n        echo \"Gentoo Linux systems:\"\n        echo -e \"  ${COMMAND_TEXT}sudo emerge --ask dev-vcs/git${CLEAR_TEXT}\"\n        echo \"--------------------------------------------------------------------------------\"\n\n        # Terminate the script.\n        return \"$EC_MISSING_DEPS\"\n    fi\n\n    # 'curl'\n    if ! command -v curl &>/dev/null; then\n        # Display the error type.\n        echo -e \"${ERROR_TEXT}ERROR:${CLEAR_TEXT} ${BOLD_TEXT}MISSING DEPENDENCIES.${CLEAR_TEXT}\"\n\n        # Display the error details.\n        echo -e \"${INFO_TEXT}Please install 'curl' to proceed.${CLEAR_TEXT}\"\n\n        # Display the suggested action(s).\n        echo \"--------------------------------------------------------------------------------\"\n        echo \"Debian/Ubuntu-based systems:\"\n        echo -e \"  ${COMMAND_TEXT}sudo apt install curl${CLEAR_TEXT}\"\n        echo \"Red Hat/Fedora-based systems:\"\n        echo -e \"  ${COMMAND_TEXT}sudo dnf install curl${CLEAR_TEXT}\"\n        echo \"Arch Linux systems:\"\n        echo -e \"  ${COMMAND_TEXT}sudo pacman -S curl${CLEAR_TEXT}\"\n        echo \"Gentoo Linux systems:\"\n        echo -e \"  ${COMMAND_TEXT}sudo emerge --ask net-misc/curl${CLEAR_TEXT}\"\n        echo \"--------------------------------------------------------------------------------\"\n\n        # Terminate the script.\n        return \"$EC_MISSING_DEPS\"\n    fi\n\n    # 'Dialog'.\n    if ! command -v dialog &>/dev/null; then\n        # Display the error type.\n        echo -e \"${ERROR_TEXT}ERROR:${CLEAR_TEXT} ${BOLD_TEXT}MISSING DEPENDENCIES.${CLEAR_TEXT}\"\n\n        # Display the error details.\n        echo -e \"${INFO_TEXT}Please install 'dialog' to proceed.${CLEAR_TEXT}\"\n\n        # Display the suggested action(s).\n        echo \"--------------------------------------------------------------------------------\"\n        echo \"Debian/Ubuntu-based systems:\"\n        echo -e \"  ${COMMAND_TEXT}sudo apt install dialog${CLEAR_TEXT}\"\n        echo \"Red Hat/Fedora-based systems:\"\n        echo -e \"  ${COMMAND_TEXT}sudo dnf install dialog${CLEAR_TEXT}\"\n        echo \"Arch Linux systems:\"\n        echo -e \"  ${COMMAND_TEXT}sudo pacman -S dialog${CLEAR_TEXT}\"\n        echo \"Gentoo Linux systems:\"\n        echo -e \"  ${COMMAND_TEXT}sudo emerge --ask dialog${CLEAR_TEXT}\"\n        echo \"--------------------------------------------------------------------------------\"\n\n        # Terminate the script.\n        return \"$EC_MISSING_DEPS\"\n    fi\n}\n\n# Name: 'waCheckInstallDependencies'\n# Role: Terminate script if dependencies required to install WinApps are missing.\nfunction waCheckInstallDependencies() {\n    # Declare variables.\n    local FREERDP_MAJOR_VERSION=\"\" # Stores the major version of the installed copy of FreeRDP.\n\n    # Print feedback.\n    echo -n \"Checking whether dependencies are installed... \"\n\n    # 'libnotify'\n    if ! command -v notify-send &>/dev/null; then\n        # Complete the previous line.\n        echo -e \"${FAIL_TEXT}Failed!${CLEAR_TEXT}\\n\"\n\n        # Display the error type.\n        echo -e \"${ERROR_TEXT}ERROR:${CLEAR_TEXT} ${BOLD_TEXT}MISSING DEPENDENCIES.${CLEAR_TEXT}\"\n\n        # Display the error details.\n        echo -e \"${INFO_TEXT}Please install 'libnotify' to proceed.${CLEAR_TEXT}\"\n\n        # Display the suggested action(s).\n        echo \"--------------------------------------------------------------------------------\"\n        echo \"Debian/Ubuntu-based systems:\"\n        echo -e \"  ${COMMAND_TEXT}sudo apt install libnotify-bin${CLEAR_TEXT}\"\n        echo \"Red Hat/Fedora-based systems:\"\n        echo -e \"  ${COMMAND_TEXT}sudo dnf install libnotify${CLEAR_TEXT}\"\n        echo \"Arch Linux systems:\"\n        echo -e \"  ${COMMAND_TEXT}sudo pacman -S libnotify${CLEAR_TEXT}\"\n        echo \"Gentoo Linux systems:\"\n        echo -e \"  ${COMMAND_TEXT}sudo emerge --ask x11-libs/libnotify${CLEAR_TEXT}\"\n        echo \"--------------------------------------------------------------------------------\"\n\n        # Terminate the script.\n        return \"$EC_MISSING_DEPS\"\n    fi\n\n    # 'Netcat'\n    if ! command -v nc &>/dev/null; then\n        # Complete the previous line.\n        echo -e \"${FAIL_TEXT}Failed!${CLEAR_TEXT}\\n\"\n\n        # Display the error type.\n        echo -e \"${ERROR_TEXT}ERROR:${CLEAR_TEXT} ${BOLD_TEXT}MISSING DEPENDENCIES.${CLEAR_TEXT}\"\n\n        # Display the error details.\n        echo -e \"${INFO_TEXT}Please install 'netcat' to proceed.${CLEAR_TEXT}\"\n\n        # Display the suggested action(s).\n        echo \"--------------------------------------------------------------------------------\"\n        echo \"Debian/Ubuntu-based systems:\"\n        echo -e \"  ${COMMAND_TEXT}sudo apt install netcat${CLEAR_TEXT}\"\n        echo \"Red Hat/Fedora-based systems:\"\n        echo -e \"  ${COMMAND_TEXT}sudo dnf install nmap-ncat${CLEAR_TEXT}\"\n        echo \"Arch Linux systems:\"\n        echo -e \"  ${COMMAND_TEXT}sudo pacman -S gnu-netcat${CLEAR_TEXT}\"\n        echo \"Gentoo Linux systems:\"\n        echo -e \"  ${COMMAND_TEXT}sudo emerge --ask net-analyzer/netcat${CLEAR_TEXT}\"\n        echo \"--------------------------------------------------------------------------------\"\n\n        # Terminate the script.\n        return \"$EC_MISSING_DEPS\"\n    fi\n\n    # 'FreeRDP' (Version 3).\n    # Attempt to set a FreeRDP command if the command variable is empty.\n    if [ -z \"$FREERDP_COMMAND\" ]; then\n        # Check common commands used to launch FreeRDP.\n        if command -v xfreerdp &>/dev/null; then\n            # Check FreeRDP major version is 3 or greater.\n            FREERDP_MAJOR_VERSION=$(xfreerdp --version | head -n 1 | grep -o -m 1 '\\b[0-9]\\S*' | head -n 1 | cut -d'.' -f1)\n            if [[ $FREERDP_MAJOR_VERSION =~ ^[0-9]+$ ]] && ((FREERDP_MAJOR_VERSION >= 3)); then\n                FREERDP_COMMAND=\"xfreerdp\"\n            fi\n        fi\n\n        # Check for xfreerdp3 command as a fallback option.\n        if [ -z \"$FREERDP_COMMAND\" ]; then\n            if command -v xfreerdp3 &>/dev/null; then\n                # Check FreeRDP major version is 3 or greater.\n                FREERDP_MAJOR_VERSION=$(xfreerdp3 --version | head -n 1 | grep -o -m 1 '\\b[0-9]\\S*' | head -n 1 | cut -d'.' -f1)\n                if [[ $FREERDP_MAJOR_VERSION =~ ^[0-9]+$ ]] && ((FREERDP_MAJOR_VERSION >= 3)); then\n                    FREERDP_COMMAND=\"xfreerdp3\"\n                fi\n            fi\n        fi\n\n        # Check for FreeRDP flatpak as a fallback option.\n        if [ -z \"$FREERDP_COMMAND\" ]; then\n            if command -v flatpak &>/dev/null; then\n                if flatpak list --columns=application | grep -q \"^com.freerdp.FreeRDP$\"; then\n                    # Check FreeRDP major version is 3 or greater.\n                    FREERDP_MAJOR_VERSION=$(flatpak list --columns=application,version | grep \"^com.freerdp.FreeRDP\" | awk '{print $2}' | cut -d'.' -f1)\n                    if [[ $FREERDP_MAJOR_VERSION =~ ^[0-9]+$ ]] && ((FREERDP_MAJOR_VERSION >= 3)); then\n                        FREERDP_COMMAND=\"flatpak run --command=xfreerdp com.freerdp.FreeRDP\"\n                    fi\n                fi\n            fi\n        fi\n    fi\n\n    if ! command -v \"$FREERDP_COMMAND\" &>/dev/null && [ \"$FREERDP_COMMAND\" != \"flatpak run --command=xfreerdp com.freerdp.FreeRDP\" ]; then\n        # Complete the previous line.\n        echo -e \"${FAIL_TEXT}Failed!${CLEAR_TEXT}\\n\"\n\n        # Display the error type.\n        echo -e \"${ERROR_TEXT}ERROR:${CLEAR_TEXT} ${BOLD_TEXT}MISSING DEPENDENCIES.${CLEAR_TEXT}\"\n\n        # Display the error details.\n        echo -e \"${INFO_TEXT}Please install 'FreeRDP' version 3 to proceed.${CLEAR_TEXT}\"\n\n        # Display the suggested action(s).\n        echo \"--------------------------------------------------------------------------------\"\n        echo \"Debian/Ubuntu-based systems:\"\n        echo -e \"  ${COMMAND_TEXT}sudo apt install freerdp3-x11${CLEAR_TEXT}\"\n        echo \"Red Hat/Fedora-based systems:\"\n        echo -e \"  ${COMMAND_TEXT}sudo dnf install freerdp${CLEAR_TEXT}\"\n        echo \"Arch Linux systems:\"\n        echo -e \"  ${COMMAND_TEXT}sudo pacman -S freerdp${CLEAR_TEXT}\"\n        echo \"Gentoo Linux systems:\"\n        echo -e \"  ${COMMAND_TEXT}sudo emerge --ask net-misc/freerdp${CLEAR_TEXT}\"\n        echo \"\"\n        echo \"You can also install FreeRDP as a Flatpak.\"\n        echo \"Install Flatpak, add the Flathub repository and then install FreeRDP:\"\n        echo -e \"${COMMAND_TEXT}flatpak install flathub com.freerdp.FreeRDP${CLEAR_TEXT}\"\n        echo -e \"${COMMAND_TEXT}sudo flatpak override --filesystem=home com.freerdp.FreeRDP${CLEAR_TEXT}\"\n        echo \"--------------------------------------------------------------------------------\"\n\n        # Terminate the script.\n        return \"$EC_MISSING_DEPS\"\n    fi\n\n    # 'libvirt'/'virt-manager' + 'iproute2'.\n    if [ \"$WAFLAVOR\" = \"libvirt\" ]; then\n        if ! command -v virsh &>/dev/null; then\n            # Complete the previous line.\n            echo -e \"${FAIL_TEXT}Failed!${CLEAR_TEXT}\\n\"\n\n            # Display the error type.\n            echo -e \"${ERROR_TEXT}ERROR:${CLEAR_TEXT} ${BOLD_TEXT}MISSING DEPENDENCIES.${CLEAR_TEXT}\"\n\n            # Display the error details.\n            echo -e \"${INFO_TEXT}Please install 'Virtual Machine Manager' to proceed.${CLEAR_TEXT}\"\n\n            # Display the suggested action(s).\n            echo \"--------------------------------------------------------------------------------\"\n            echo \"Debian/Ubuntu-based systems:\"\n            echo -e \"  ${COMMAND_TEXT}sudo apt install virt-manager${CLEAR_TEXT}\"\n            echo \"Red Hat/Fedora-based systems:\"\n            echo -e \"  ${COMMAND_TEXT}sudo dnf install virt-manager${CLEAR_TEXT}\"\n            echo \"Arch Linux systems:\"\n            echo -e \"  ${COMMAND_TEXT}sudo pacman -S virt-manager${CLEAR_TEXT}\"\n            echo \"Gentoo Linux systems:\"\n            echo -e \"  ${COMMAND_TEXT}sudo emerge --ask app-emulation/virt-manager${CLEAR_TEXT}\"\n            echo \"--------------------------------------------------------------------------------\"\n\n            # Terminate the script.\n            return \"$EC_MISSING_DEPS\"\n        fi\n\n        if ! command -v ip &>/dev/null; then\n            # Complete the previous line.\n            echo -e \"${FAIL_TEXT}Failed!${CLEAR_TEXT}\\n\"\n\n            # Display the error type.\n            echo -e \"${ERROR_TEXT}ERROR:${CLEAR_TEXT} ${BOLD_TEXT}MISSING DEPENDENCIES.${CLEAR_TEXT}\"\n\n            # Display the error details.\n            echo -e \"${INFO_TEXT}Please install 'iproute2' to proceed.${CLEAR_TEXT}\"\n\n            # Display the suggested action(s).\n            echo \"--------------------------------------------------------------------------------\"\n            echo \"Debian/Ubuntu-based systems:\"\n            echo -e \"  ${COMMAND_TEXT}sudo apt install iproute2${CLEAR_TEXT}\"\n            echo \"Red Hat/Fedora-based systems:\"\n            echo -e \"  ${COMMAND_TEXT}sudo dnf install iproute${CLEAR_TEXT}\"\n            echo \"Arch Linux systems:\"\n            echo -e \"  ${COMMAND_TEXT}sudo pacman -S iproute2${CLEAR_TEXT}\"\n            echo \"Gentoo Linux systems:\"\n            echo -e \"  ${COMMAND_TEXT}sudo emerge --ask net-misc/iproute2${CLEAR_TEXT}\"\n            echo \"--------------------------------------------------------------------------------\"\n\n            # Terminate the script.\n            return \"$EC_MISSING_DEPS\"\n        fi\n    elif [ \"$WAFLAVOR\" = \"docker\" ]; then\n        if ! command -v docker &>/dev/null; then\n            # Complete the previous line.\n            echo -e \"${FAIL_TEXT}Failed!${CLEAR_TEXT}\\n\"\n\n            # Display the error type.\n            echo -e \"${ERROR_TEXT}ERROR:${CLEAR_TEXT} ${BOLD_TEXT}MISSING DEPENDENCIES.${CLEAR_TEXT}\"\n\n            # Display the error details.\n            echo -e \"${INFO_TEXT}Please install 'Docker Engine' to proceed.${CLEAR_TEXT}\"\n\n            # Display the suggested action(s).\n            echo \"--------------------------------------------------------------------------------\"\n            echo \"Please visit https://docs.docker.com/engine/install/ for more information.\"\n            echo \"--------------------------------------------------------------------------------\"\n\n            # Terminate the script.\n            return \"$EC_MISSING_DEPS\"\n        fi\n    elif [ \"$WAFLAVOR\" = \"podman\" ]; then\n        if ! command -v podman-compose &>/dev/null || ! command -v podman &>/dev/null; then\n            # Complete the previous line.\n            echo -e \"${FAIL_TEXT}Failed!${CLEAR_TEXT}\\n\"\n\n            # Display the error type.\n            echo -e \"${ERROR_TEXT}ERROR:${CLEAR_TEXT} ${BOLD_TEXT}MISSING DEPENDENCIES.${CLEAR_TEXT}\"\n\n            # Display the error details.\n            echo -e \"${INFO_TEXT}Please install 'podman' and 'podman-compose' to proceed.${CLEAR_TEXT}\"\n\n            # Display the suggested action(s).\n            echo \"--------------------------------------------------------------------------------\"\n            echo \"Please visit https://podman.io/docs/installation for more information.\"\n            echo \"Please visit https://github.com/containers/podman-compose for more information.\"\n            echo \"--------------------------------------------------------------------------------\"\n\n            # Terminate the script.\n            return \"$EC_MISSING_DEPS\"\n        fi\n    fi\n\n    # Print feedback.\n    echo -e \"${DONE_TEXT}Done!${CLEAR_TEXT}\"\n}\n\n# Name: 'waCheckGroupMembership'\n# Role: Ensures the current user is part of the required groups.\nfunction waCheckGroupMembership() {\n    # Print feedback.\n    echo -n \"Checking whether the user '$(whoami)' is part of the required groups... \"\n\n    # Declare variables.\n    local USER_GROUPS=\"\" # Stores groups the current user belongs to.\n\n    # Identify groups the current user belongs to.\n    USER_GROUPS=$(groups \"$(whoami)\")\n\n    if ! (echo \"$USER_GROUPS\" | grep -q -E \"\\blibvirt\\b\") || ! (echo \"$USER_GROUPS\" | grep -q -E \"\\bkvm\\b\"); then\n        # Complete the previous line.\n        echo -e \"${FAIL_TEXT}Failed!${CLEAR_TEXT}\\n\"\n\n        # Display the error type.\n        echo -e \"${ERROR_TEXT}ERROR:${CLEAR_TEXT} ${BOLD_TEXT}GROUP MEMBERSHIP CHECK ERROR.${CLEAR_TEXT}\"\n\n        # Display the error details.\n        echo -e \"${INFO_TEXT}The current user '$(whoami)' is not part of group 'libvirt' and/or group 'kvm'.${CLEAR_TEXT}\"\n\n        # Display the suggested action(s).\n        echo \"--------------------------------------------------------------------------------\"\n        echo \"Please run the below commands, followed by a system reboot:\"\n        echo -e \"${COMMAND_TEXT}sudo usermod -a -G libvirt $(whoami)${CLEAR_TEXT}\"\n        echo -e \"${COMMAND_TEXT}sudo usermod -a -G kvm $(whoami)${CLEAR_TEXT}\"\n        echo \"--------------------------------------------------------------------------------\"\n\n        # Terminate the script.\n        return \"$EC_NOT_IN_GROUP\"\n    fi\n\n    # Print feedback.\n    echo -e \"${DONE_TEXT}Done!${CLEAR_TEXT}\"\n}\n\n# Name: 'waCheckVMRunning'\n# Role: Checks the state of the Windows 'libvirt' VM to ensure it is running.\nfunction waCheckVMRunning() {\n    # Print feedback.\n    echo -n \"Checking the status of the Windows VM... \"\n\n    # Declare variables.\n    local VM_STATE=\"\" # Stores the state of the Windows VM.\n\n    # Obtain VM Status\n    VM_PAUSED=0\n    virsh list --state-paused | grep -wq \"$VM_NAME\" || VM_PAUSED=\"$?\"\n    VM_RUNNING=0\n    virsh list --state-running | grep -wq \"$VM_NAME\" || VM_RUNNING=\"$?\"\n    VM_SHUTOFF=0\n    virsh list --state-shutoff | grep -wq \"$VM_NAME\" || VM_SHUTOFF=\"$?\"\n\n    if [[ $VM_SHUTOFF == \"0\" ]]; then\n        # Complete the previous line.\n        echo -e \"${FAIL_TEXT}Failed!${CLEAR_TEXT}\\n\"\n\n        # Display the error type.\n        echo -e \"${ERROR_TEXT}ERROR:${CLEAR_TEXT} ${BOLD_TEXT}WINDOWS VM NOT RUNNING.${CLEAR_TEXT}\"\n\n        # Display the error details.\n        echo -e \"${INFO_TEXT}The Windows VM '${VM_NAME}' is powered off.${CLEAR_TEXT}\"\n\n        # Display the suggested action(s).\n        echo \"--------------------------------------------------------------------------------\"\n        echo \"Please run the below command to start the Windows VM:\"\n        echo -e \"${COMMAND_TEXT}virsh start ${VM_NAME}${CLEAR_TEXT}\"\n        echo \"--------------------------------------------------------------------------------\"\n\n        # Terminate the script.\n        return \"$EC_VM_OFF\"\n    elif [[ $VM_PAUSED == \"0\" ]]; then\n        # Complete the previous line.\n        echo -e \"${FAIL_TEXT}Failed!${CLEAR_TEXT}\\n\"\n\n        # Display the error type.\n        echo -e \"${ERROR_TEXT}ERROR:${CLEAR_TEXT} ${BOLD_TEXT}WINDOWS VM NOT RUNNING.${CLEAR_TEXT}\"\n\n        # Display the error details.\n        echo -e \"${INFO_TEXT}The Windows VM '${VM_NAME}' is paused.${CLEAR_TEXT}\"\n\n        # Display the suggested action(s).\n        echo \"--------------------------------------------------------------------------------\"\n        echo \"Please run the below command to resume the Windows VM:\"\n        echo -e \"${COMMAND_TEXT}virsh resume ${VM_NAME}${CLEAR_TEXT}\"\n        echo \"--------------------------------------------------------------------------------\"\n\n        # Terminate the script.\n        return \"$EC_VM_PAUSED\"\n    elif [[ $VM_RUNNING != \"0\" ]]; then\n        # Complete the previous line.\n        echo -e \"${FAIL_TEXT}Failed!${CLEAR_TEXT}\\n\"\n\n        # Display the error type.\n        echo -e \"${ERROR_TEXT}ERROR:${CLEAR_TEXT} ${BOLD_TEXT}WINDOWS VM DOES NOT EXIST.${CLEAR_TEXT}\"\n\n        # Display the error details.\n        echo -e \"${INFO_TEXT}The Windows VM '${VM_NAME}' could not be found.${CLEAR_TEXT}\"\n\n        # Display the suggested action(s).\n        echo \"--------------------------------------------------------------------------------\"\n        echo \"Please ensure a Windows VM with the name '${VM_NAME}' exists.\"\n        echo \"--------------------------------------------------------------------------------\"\n\n        # Terminate the script.\n        return \"$EC_VM_ABSENT\"\n    fi\n\n    # Print feedback.\n    echo -e \"${DONE_TEXT}Done!${CLEAR_TEXT}\"\n}\n\n# Name: 'waCheckContainerRunning'\n# Role: Throw an error if the Docker/Podman container is not running.\nfunction waCheckContainerRunning() {\n    # Print feedback.\n    echo -n \"Checking container status... \"\n\n    # Declare variables.\n    local CONTAINER_STATE=\"\"\n    local COMPOSE_COMMAND=\"\"\n\n    # Determine the state of the container.\n    CONTAINER_STATE=$(\"$WAFLAVOR\" ps --all --filter name=\"WinApps\" --format '{{.Status}}')\n    CONTAINER_STATE=${CONTAINER_STATE,,} # Convert the string to lowercase.\n    CONTAINER_STATE=${CONTAINER_STATE%% *} # Extract the first word.\n\n    # Determine the compose command.\n    case \"$WAFLAVOR\" in\n        \"docker\") COMPOSE_COMMAND=\"docker compose\" ;;\n        \"podman\") COMPOSE_COMMAND=\"podman-compose\" ;;\n    esac\n\n    # Check container state.\n    if [[ \"$CONTAINER_STATE\" != \"up\" ]]; then\n        # Complete the previous line.\n        echo -e \"${FAIL_TEXT}Failed!${CLEAR_TEXT}\\n\"\n\n        # Display the error type.\n        echo -e \"${ERROR_TEXT}ERROR:${CLEAR_TEXT} ${BOLD_TEXT}CONTAINER NOT RUNNING.${CLEAR_TEXT}\"\n\n        # Display the error details.\n        echo -e \"${INFO_TEXT}Windows is not running.${CLEAR_TEXT}\"\n\n        # Display the suggested action(s).\n        echo \"--------------------------------------------------------------------------------\"\n        echo \"Please ensure Windows is powered on:\"\n        echo -e \"${COMMAND_TEXT}${COMPOSE_COMMAND} --file ~/.config/winapps/compose.yaml start${CLEAR_TEXT}\"\n        echo \"--------------------------------------------------------------------------------\"\n\n        # Terminate the script.\n        return \"$EC_CONTAINER_OFF\"\n    fi\n\n    # Print feedback.\n    echo -e \"${DONE_TEXT}Done!${CLEAR_TEXT}\"\n}\n\n# Name: 'waCheckPortOpen'\n# Role: Assesses whether the RDP port on Windows is open.\nfunction waCheckPortOpen() {\n    # Print feedback.\n    echo -n \"Checking for an open RDP Port on Windows... \"\n\n    # Declare variables.\n    local VM_MAC=\"\" # Stores the MAC address of the Windows VM.\n\n    # Obtain Windows VM IP Address (FOR 'libvirt' ONLY)\n    # Note: 'RDP_IP' should not be empty if 'WAFLAVOR' is 'docker', since it is set to localhost before this function is called.\n    if [ -z \"$RDP_IP\" ] && [ \"$WAFLAVOR\" = \"libvirt\" ]; then\n        VM_MAC=$(virsh domiflist \"$VM_NAME\" | grep -oE \"([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})\") # VM MAC address.\n        RDP_IP=$(ip neigh show | grep \"$VM_MAC\" | grep -oE \"([0-9]{1,3}\\.){3}[0-9]{1,3}\")         # VM IP address.\n\n        if [ -z \"$RDP_IP\" ]; then\n            # Complete the previous line.\n            echo -e \"${FAIL_TEXT}Failed!${CLEAR_TEXT}\\n\"\n\n            # Display the error type.\n            echo -e \"${ERROR_TEXT}ERROR:${CLEAR_TEXT} ${BOLD_TEXT}NETWORK CONFIGURATION ERROR.${CLEAR_TEXT}\"\n\n            # Display the error details.\n            echo -e \"${INFO_TEXT}The IP address of the Windows VM '${VM_NAME}' could not be found.${CLEAR_TEXT}\"\n\n            # Display the suggested action(s).\n            echo \"--------------------------------------------------------------------------------\"\n            echo \"Please ensure networking is properly configured for the Windows VM.\"\n            echo \"--------------------------------------------------------------------------------\"\n\n            # Terminate the script.\n            return \"$EC_NO_IP\"\n        fi\n    fi\n\n    # Check for an open RDP port.\n    if ! timeout 5 nc -z \"$RDP_IP\" \"$RDP_PORT\" &>/dev/null; then\n        # Complete the previous line.\n        echo -e \"${FAIL_TEXT}Failed!${CLEAR_TEXT}\\n\"\n\n        # Display the error type.\n        echo -e \"${ERROR_TEXT}ERROR:${CLEAR_TEXT} ${BOLD_TEXT}NETWORK CONFIGURATION ERROR.${CLEAR_TEXT}\"\n\n        # Display the error details.\n        echo -e \"${INFO_TEXT}Failed to establish a connection with Windows at '${RDP_IP}:${RDP_PORT}'.${CLEAR_TEXT}\"\n\n        # Display the suggested action(s).\n        echo \"--------------------------------------------------------------------------------\"\n        echo \"Please ensure Remote Desktop is configured on Windows as per the WinApps README.\"\n        echo \"--------------------------------------------------------------------------------\"\n\n        # Terminate the script.\n        return \"$EC_BAD_PORT\"\n    fi\n\n    # Print feedback.\n    echo -e \"${DONE_TEXT}Done!${CLEAR_TEXT}\"\n}\n\n# Name: 'waCheckRDPAccess'\n# Role: Tests if Windows is accessible via RDP.\nfunction waCheckRDPAccess() {\n    # Print feedback.\n    echo -n \"Attempting to establish a Remote Desktop connection with Windows... \"\n\n    # Declare variables.\n    local FREERDP_LOG=\"\"  # Stores the path of the FreeRDP log file.\n    local FREERDP_PROC=\"\" # Stores the FreeRDP process ID.\n    local ELAPSED_TIME=\"\" # Stores the time counter.\n\n    # Log file path.\n    FREERDP_LOG=\"${USER_APPDATA_PATH}/FreeRDP_Test_$(date +'%Y%m%d_%H%M_%N').log\"\n\n    # Ensure the output directory exists.\n    mkdir -p \"$USER_APPDATA_PATH\"\n\n    # Remove existing 'FreeRDP Connection Test' file.\n    rm -f \"$TEST_PATH\"\n\n    # This command should create a file on the host filesystem before terminating the RDP session. This command is silently executed as a background process.\n    # If the file is created, it means Windows received the command via FreeRDP successfully and can read and write to the Linux home folder.\n    # Note: The following final line is expected within the log, indicating successful execution of the 'tsdiscon' command and termination of the RDP session.\n    # [INFO][com.freerdp.core] - [rdp_print_errinfo]: ERRINFO_LOGOFF_BY_USER (0x0000000C):The disconnection was initiated by the user logging off their session on the server.\n    # shellcheck disable=SC2140,SC2027 # Disable warnings regarding unquoted strings.\n    $FREERDP_COMMAND \\\n        /cert:tofu \\\n        /d:\"$RDP_DOMAIN\" \\\n        /u:\"$RDP_USER\" \\\n        /p:\"$RDP_PASS\" \\\n        /scale:\"$RDP_SCALE\" \\\n        +auto-reconnect \\\n        +home-drive \\\n        -wallpaper \\\n        +dynamic-resolution \\\n        /app:program:\"C:\\Windows\\System32\\cmd.exe\",cmd:\"/C type NUL > \"$TEST_PATH_WIN\" && tsdiscon\" \\\n        /v:\"$RDP_IP\" &>\"$FREERDP_LOG\" &\n\n    # Store the FreeRDP process ID.\n    FREERDP_PROC=$!\n\n    # Initialise the time counter.\n    ELAPSED_TIME=0\n\n    # Wait a maximum of 30 seconds for the background process to complete.\n    while [ \"$ELAPSED_TIME\" -lt 30 ]; do\n        # Check if the FreeRDP process is complete or if the test file exists.\n        if ! ps -p \"$FREERDP_PROC\" &>/dev/null || [ -f \"$TEST_PATH\" ]; then\n            break\n        fi\n\n        # Wait for 5 seconds.\n        sleep 5\n        ELAPSED_TIME=$((ELAPSED_TIME + 5))\n    done\n\n    # Check if FreeRDP process is not complete.\n    if ps -p \"$FREERDP_PROC\" &>/dev/null; then\n        # SIGKILL FreeRDP.\n        kill -9 \"$FREERDP_PROC\" &>/dev/null\n    fi\n\n    # Check if test file does not exist.\n    if ! [ -f \"$TEST_PATH\" ]; then\n        # Complete the previous line.\n        echo -e \"${FAIL_TEXT}Failed!${CLEAR_TEXT}\\n\"\n\n        # Display the error type.\n        echo -e \"${ERROR_TEXT}ERROR:${CLEAR_TEXT} ${BOLD_TEXT}REMOTE DESKTOP PROTOCOL FAILURE.${CLEAR_TEXT}\"\n\n        # Display the error details.\n        echo -e \"${INFO_TEXT}FreeRDP failed to establish a connection with Windows.${CLEAR_TEXT}\"\n\n        # Display the suggested action(s).\n        echo \"--------------------------------------------------------------------------------\"\n        echo -e \"Please view the log at ${COMMAND_TEXT}${FREERDP_LOG}${CLEAR_TEXT}.\"\n        echo \"Troubleshooting Tips:\"\n        echo \"  - Ensure the user is logged out of Windows prior to initiating the WinApps installation.\"\n        echo \"  - Ensure the credentials within the WinApps configuration file are correct.\"\n        echo -e \"  - Utilise a new certificate by removing relevant certificate(s) in ${COMMAND_TEXT}${HOME}/.config/freerdp/server${CLEAR_TEXT}.\"\n        echo \"  - If using 'libvirt', ensure the Windows VM is correctly named as specified within the README.\"\n        echo \"  - If using 'libvirt', ensure 'Remote Desktop' is enabled within the Windows VM.\"\n        echo \"  - If using 'libvirt', ensure you have merged 'RDPApps.reg' into the Windows VM's registry.\"\n        echo \"  - If using 'libvirt', try logging into and back out of the Windows VM within 'virt-manager' prior to initiating the WinApps installation.\"\n        echo \"--------------------------------------------------------------------------------\"\n\n        # Terminate the script.\n        return \"$EC_RDP_FAIL\"\n    else\n        # Remove the temporary test file.\n        rm -f \"$TEST_PATH\"\n    fi\n\n    # Print feedback.\n    echo -e \"${DONE_TEXT}Done!${CLEAR_TEXT}\"\n}\n\n# Name: 'waFindInstalled'\n# Role: Identifies installed applications on Windows.\nfunction waFindInstalled() {\n    # Print feedback.\n    echo -n \"Checking for installed Windows applications... \"\n\n    # Declare variables.\n    local FREERDP_LOG=\"\"  # Stores the path of the FreeRDP log file.\n    local FREERDP_PROC=\"\" # Stores the FreeRDP process ID.\n    local ELAPSED_TIME=\"\" # Stores the time counter.\n\n    # Log file path.\n    FREERDP_LOG=\"${USER_APPDATA_PATH}/FreeRDP_Scan_$(date +'%Y%m%d_%H%M_%N').log\"\n\n    # Make the output directory if required.\n    mkdir -p \"$USER_APPDATA_PATH\"\n\n    # Remove temporary files from previous WinApps installations.\n    rm -f \"$BATCH_SCRIPT_PATH\" \"$TMP_INST_FILE_PATH\" \"$INST_FILE_PATH\" \"$PS_SCRIPT_HOME_PATH\" \"$DETECTED_FILE_PATH\"\n\n    # Copy PowerShell script to a directory within the user's home folder.\n    # This will enable the PowerShell script to be accessed and executed by Windows.\n    cp \"$PS_SCRIPT_PATH\" \"$PS_SCRIPT_HOME_PATH\"\n\n    # Enumerate over each officially supported application.\n    for APPLICATION in ./apps/*; do\n        # Extract the name of the application from the absolute path of the folder.\n        APPLICATION=\"$(basename \"$APPLICATION\")\"\n\n        # Source 'Info' File Containing:\n        # - The Application Name          (FULL_NAME)\n        # - The Shortcut Name             (NAME)\n        # - Application Categories        (CATEGORIES)\n        # - Executable Path               (WIN_EXECUTABLE)\n        # - Supported MIME Types          (MIME_TYPES)\n        # - Application Icon              (ICON)\n        # shellcheck source=/dev/null # Exclude this file from being checked by ShellCheck.\n        source \"./apps/${APPLICATION}/info\"\n\n        # Append commands to batch file.\n        echo \"IF EXIST \\\"${WIN_EXECUTABLE}\\\" ECHO ${APPLICATION} >> ${TMP_INST_FILE_PATH_WIN}\" >>\"$BATCH_SCRIPT_PATH\"\n    done\n\n    # Append a command to the batch script to run the PowerShell script and store it's output in the 'detected' file.\n    # shellcheck disable=SC2129 # Silence warning regarding repeated redirects.\n    echo \"powershell.exe -ExecutionPolicy Bypass -File ${PS_SCRIPT_HOME_PATH_WIN} > ${DETECTED_FILE_PATH_WIN}\" >>\"$BATCH_SCRIPT_PATH\"\n\n    # Append a command to the batch script to rename the temporary file containing the names of all detected officially supported applications.\n    echo \"RENAME ${TMP_INST_FILE_PATH_WIN} installed\" >>\"$BATCH_SCRIPT_PATH\"\n\n    # Append a command to the batch script to terminate the remote desktop session once all previous commands are complete.\n    echo \"tsdiscon\" >>\"$BATCH_SCRIPT_PATH\"\n\n    # Silently execute the batch script within Windows in the background (Log Output To File)\n    # Note: The following final line is expected within the log, indicating successful execution of the 'tsdiscon' command and termination of the RDP session.\n    # [INFO][com.freerdp.core] - [rdp_print_errinfo]: ERRINFO_LOGOFF_BY_USER (0x0000000C):The disconnection was initiated by the user logging off their session on the server.\n    # shellcheck disable=SC2140,SC2027 # Disable warnings regarding unquoted strings.\n    $FREERDP_COMMAND \\\n        /cert:tofu \\\n        /d:\"$RDP_DOMAIN\" \\\n        /u:\"$RDP_USER\" \\\n        /p:\"$RDP_PASS\" \\\n        /scale:\"$RDP_SCALE\" \\\n        +auto-reconnect \\\n        +home-drive \\\n        -wallpaper \\\n        +dynamic-resolution \\\n        /app:program:\"C:\\Windows\\System32\\cmd.exe\",cmd:\"/C \"$BATCH_SCRIPT_PATH_WIN\"\" \\\n        /v:\"$RDP_IP\" &>\"$FREERDP_LOG\" &\n\n    # Store the FreeRDP process ID.\n    FREERDP_PROC=$!\n\n    # Initialise the time counter.\n    ELAPSED_TIME=0\n\n    # Wait a maximum of 60 seconds for the batch script to finish running.\n    while [ $ELAPSED_TIME -lt 60 ]; do\n        # Check if the FreeRDP process is complete or if the 'installed' file exists.\n        if ! ps -p \"$FREERDP_PROC\" &>/dev/null || [ -f \"$INST_FILE_PATH\" ]; then\n            break\n        fi\n\n        # Wait for 5 seconds.\n        sleep 5\n        ELAPSED_TIME=$((ELAPSED_TIME + 5))\n    done\n\n    # Check if the FreeRDP process is not complete.\n    if ps -p \"$FREERDP_PROC\" &>/dev/null; then\n        # SIGKILL FreeRDP.\n        kill -9 \"$FREERDP_PROC\" &>/dev/null\n    fi\n\n    # Check if test file does not exist.\n    if ! [ -f \"$INST_FILE_PATH\" ]; then\n        # Complete the previous line.\n        echo -e \"${FAIL_TEXT}Failed!${CLEAR_TEXT}\\n\"\n\n        # Display the error type.\n        echo -e \"${ERROR_TEXT}ERROR:${CLEAR_TEXT} ${BOLD_TEXT}APPLICATION QUERY FAILURE.${CLEAR_TEXT}\"\n\n        # Display the error details.\n        echo -e \"${INFO_TEXT}Failed to query Windows for installed applications.${CLEAR_TEXT}\"\n\n        # Display the suggested action(s).\n        echo \"--------------------------------------------------------------------------------\"\n        echo -e \"Please view the log at ${COMMAND_TEXT}${FREERDP_LOG}${CLEAR_TEXT}.\"\n        echo \"--------------------------------------------------------------------------------\"\n\n        # Terminate the script.\n        return \"$EC_APPQUERY_FAIL\"\n    fi\n\n    # Print feedback.\n    echo -e \"${DONE_TEXT}Done!${CLEAR_TEXT}\"\n}\n\n# Name: 'waConfigureWindows'\n# Role: Create an application entry for launching Windows via Remote Desktop.\nfunction waConfigureWindows() {\n    # Print feedback.\n    echo -n \"Creating an application entry for Windows... \"\n\n    # Declare variables.\n    local WIN_BASH=\"\"    # Stores the bash script to launch a Windows RDP session.\n    local WIN_DESKTOP=\"\" # Stores the '.desktop' file to launch a Windows RDP session.\n\n    # Populate variables.\n    WIN_BASH=\"\\\n#!/usr/bin/env bash\n${BIN_PATH}/winapps windows\"\n    WIN_DESKTOP=\"\\\n[Desktop Entry]\nName=Windows\nExec=${BIN_PATH}/winapps windows %F\nTerminal=false\nType=Application\nIcon=${APPDATA_PATH}/icons/windows.svg\nStartupWMClass=Microsoft Windows\nComment=Microsoft Windows RDP Session\"\n\n    # Copy the 'Windows' icon.\n    $SUDO cp \"./icons/windows.svg\" \"${APPDATA_PATH}/icons/windows.svg\"\n\n    # Write the desktop entry content to a file.\n    echo \"$WIN_DESKTOP\" | $SUDO tee \"${APP_PATH}/windows.desktop\" &>/dev/null\n\n    # Write the bash script to a file.\n    echo \"$WIN_BASH\" | $SUDO tee \"${BIN_PATH}/windows\" &>/dev/null\n\n    # Mark the bash script as executable.\n    $SUDO chmod a+x \"${BIN_PATH}/windows\"\n\n    # Print feedback.\n    echo -e \"${DONE_TEXT}Done!${CLEAR_TEXT}\"\n}\n\n# Name: 'waConfigureApp'\n# Role: Create application entries for a given application installed on Windows.\nfunction waConfigureApp() {\n    # Declare variables.\n    local APP_ICON=\"\"         # Stores the path to the application icon.\n    local APP_BASH=\"\"         # Stores the bash script used to launch the application.\n    local APP_DESKTOP_FILE=\"\" # Stores the '.desktop' file used to launch the application.\n\n    # Source 'Info' File Containing:\n    # - The Application Name          (FULL_NAME)\n    # - The Shortcut Nsame            (NAME)\n    # - Application Categories        (CATEGORIES)\n    # - Executable Path               (WIN_EXECUTABLE)\n    # - Supported MIME Types          (MIME_TYPES)\n    # - Application Icon              (ICON)\n    # shellcheck source=/dev/null # Exclude this file from being checked by ShellCheck.\n    source \"${APPDATA_PATH}/apps/${1}/info\"\n\n    # Determine path to application icon using arguments passed to function.\n    APP_ICON=\"${APPDATA_PATH}/apps/${1}/icon.${2}\"\n\n    # Determine the content of the bash script for the application.\n    APP_BASH=\"\\\n#!/usr/bin/env bash\n${BIN_PATH}/winapps ${1}\"\n\n    # Determine the content of the '.desktop' file for the application.\n    APP_DESKTOP_FILE=\"\\\n[Desktop Entry]\nName=${NAME}\nExec=${BIN_PATH}/winapps ${1} %F\nTerminal=false\nType=Application\nIcon=${APP_ICON}\nStartupWMClass=${FULL_NAME}\nComment=${FULL_NAME}\nCategories=${CATEGORIES}\nMimeType=${MIME_TYPES}\"\n\n    # Store the '.desktop' file for the application.\n    echo \"$APP_DESKTOP_FILE\" | $SUDO tee \"${APP_PATH}/${1}.desktop\" &>/dev/null\n\n    # Store the bash script for the application.\n    echo \"$APP_BASH\" | $SUDO tee \"${BIN_PATH}/${1}\" &>/dev/null\n\n    # Mark bash script as executable.\n    $SUDO chmod a+x \"${BIN_PATH}/${1}\"\n}\n\n# Name: 'waConfigureOfficiallySupported'\n# Role: Create application entries for officially supported applications installed on Windows.\nfunction waConfigureOfficiallySupported() {\n    # Declare variables.\n    local OSA_LIST=() # Stores a list of all officially supported applications installed on Windows.\n\n    # Read the list of officially supported applications that are installed on Windows into an array, returning an empty array if no such files exist.\n    # This will remove leading and trailing whitespace characters as well as ignore empty lines.\n    readarray -t OSA_LIST < <(grep -v '^[[:space:]]*$' \"$INST_FILE_PATH\" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//' 2>/dev/null || true)\n\n    # Create application entries for each officially supported application.\n    for OSA in \"${OSA_LIST[@]}\"; do\n        # Print feedback.\n        echo -n \"Creating an application entry for ${OSA}... \"\n\n        # Copy application icon and information.\n        $SUDO cp -r \"./apps/${OSA}\" \"${APPDATA_PATH}/apps\"\n\n        # Configure the application.\n        waConfigureApp \"$OSA\" svg\n\n        # Print feedback.\n        echo -e \"${DONE_TEXT}Done!${CLEAR_TEXT}\"\n    done\n\n    # Delete 'install' file.\n    rm -f \"$INST_FILE_PATH\"\n}\n\n# Name: 'waConfigureApps'\n# Role: Allow the user to select which officially supported applications to configure.\nfunction waConfigureApps() {\n    # Declare variables.\n    local OSA_LIST=()      # Stores a list of all officially supported applications installed on Windows.\n    local APPS=()          # Stores a list of both the simplified and full names of each installed officially supported application.\n    local OPTIONS=()       # Stores a list of options presented to the user.\n    local APP_INSTALL=\"\"   # Stores the option selected by the user.\n    local SELECTED_APPS=() # Stores the officially supported applications selected by the user.\n    local TEMP_ARRAY=()    # Temporary array used for sorting elements of an array.\n\n    # Read the list of officially supported applications that are installed on Windows into an array, returning an empty array if no such files exist.\n    # This will remove leading and trailing whitespace characters as well as ignore empty lines.\n    readarray -t OSA_LIST < <(grep -v '^[[:space:]]*$' \"$INST_FILE_PATH\" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//' 2>/dev/null || true)\n\n    # Loop over each officially supported application installed on Windows.\n    for OSA in \"${OSA_LIST[@]}\"; do\n        # Source 'Info' File Containing:\n        # - The Application Name          (FULL_NAME)\n        # - The Shortcut Nsame            (NAME)\n        # - Application Categories        (CATEGORIES)\n        # - Executable Path               (WIN_EXECUTABLE)\n        # - Supported MIME Types          (MIME_TYPES)\n        # - Application Icon              (ICON)\n        # shellcheck source=/dev/null # Exclude this file from being checked by ShellCheck.\n        source \"./apps/${OSA}/info\"\n\n        # Add both the simplified and full name of the application to an array.\n        APPS+=(\"${FULL_NAME} (${OSA})\")\n\n        # Extract the executable file name (e.g. 'MyApp.exe') from the absolute path.\n        WIN_EXECUTABLE=\"${WIN_EXECUTABLE##*\\\\}\"\n\n        # Trim any leading or trailing whitespace characters from the executable file name.\n        read -r WIN_EXECUTABLE <<<\"$(echo \"$WIN_EXECUTABLE\" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')\"\n\n        # Add the executable file name (in lowercase) to the array.\n        INSTALLED_EXES+=(\"${WIN_EXECUTABLE,,}\")\n    done\n\n    # Sort the 'APPS' array in alphabetical order.\n    IFS=$'\\n'\n    # shellcheck disable=SC2207 # Silence warnings regarding preferred use of 'mapfile' or 'read -a'.\n    TEMP_ARRAY=($(sort <<<\"${APPS[*]}\"))\n    unset IFS\n    APPS=(\"${TEMP_ARRAY[@]}\")\n\n    # Prompt user to select which officially supported applications to configure.\n    OPTIONS=(\n        \"Set up all detected officially supported applications\"\n        \"Choose specific officially supported applications to set up\"\n        \"Skip setting up any officially supported applications\"\n    )\n    inqMenu \"How would you like to handle officially supported applications?\" OPTIONS APP_INSTALL\n\n    # Remove unselected officially supported applications from the 'install' file.\n    if [[ $APP_INSTALL == \"Choose specific officially supported applications to set up\" ]]; then\n        inqChkBx \"Which officially supported applications would you like to set up?\" APPS SELECTED_APPS\n\n        # Clear/create the 'install' file.\n        echo \"\" >\"$INST_FILE_PATH\"\n\n        # Add each selected officially supported application back to the 'install' file.\n        for SELECTED_APP in \"${SELECTED_APPS[@]}\"; do\n            # Capture the substring within (but not including) the parentheses.\n            # This substring represents the officially supported application name (see above loop).\n            SELECTED_APP=\"${SELECTED_APP##*(}\"\n            SELECTED_APP=\"${SELECTED_APP%%)}\"\n\n            # Add the substring back to the 'install' file.\n            echo \"$SELECTED_APP\" >>\"$INST_FILE_PATH\"\n        done\n    fi\n\n    # Configure selected (or all) officially supported applications.\n    if [[ $APP_INSTALL != \"Skip setting up any officially supported applications\" ]]; then\n        waConfigureOfficiallySupported\n    fi\n}\n\n# Name: 'waConfigureDetectedApps'\n# Role: Allow the user to select which detected applications to configure.\nfunction waConfigureDetectedApps() {\n    # Declare variables.\n    local APPS=()                   # Stores a list of both the simplified and full names of each detected application.\n    local EXE_FILENAME=\"\"           # Stores the executable filename of a given detected application.\n    local EXE_FILENAME_NOEXT=\"\"     # Stores the executable filename without the file extension of a given detected application.\n    local EXE_FILENAME_LOWERCASE=\"\" # Stores the executable filename of a given detected application in lowercase letters only.\n    local OPTIONS=()                # Stores a list of options presented to the user.\n    local APP_INSTALL=\"\"            # Stores the option selected by the user.\n    local SELECTED_APPS=()          # Detected applications selected by the user.\n    local APP_DESKTOP_FILE=\"\"       # Stores the '.desktop' file used to launch the application.\n    local TEMP_ARRAY=()             # Temporary array used for sorting elements of an array.\n\n    if [ -f \"$DETECTED_FILE_PATH\" ]; then\n        # On UNIX systems, lines are terminated with a newline character (\\n).\n        # On WINDOWS systems, lines are terminated with both a carriage return (\\r) and a newline (\\n) character.\n        # Remove all carriage returns (\\r) within the 'detected' file, as the file was written by Windows.\n        sed -i 's/\\r//g' \"$DETECTED_FILE_PATH\"\n\n        # Import the detected application information:\n        # - Application Names               (NAMES)\n        # - Application Icons in base64     (ICONS)\n        # - Application Executable Paths    (EXES)\n        # shellcheck source=/dev/null # Exclude this file from being checked by ShellCheck.\n        source \"$DETECTED_FILE_PATH\"\n\n        # shellcheck disable=SC2153 # Silence warnings regarding possible misspellings.\n        for INDEX in \"${!NAMES[@]}\"; do\n            # Extract the executable file name (e.g. 'MyApp.exe').\n            EXE_FILENAME=${EXES[$INDEX]##*\\\\}\n\n            # Convert the executable file name to lower-case (e.g. 'myapp.exe').\n            EXE_FILENAME_LOWERCASE=\"${EXE_FILENAME,,}\"\n\n            # Remove the file extension (e.g. 'MyApp').\n            EXE_FILENAME_NOEXT=\"${EXE_FILENAME%.*}\"\n\n            # Check if the executable was previously configured as part of setting up officially supported applications.\n            if [[ \" ${INSTALLED_EXES[*]} \" != *\" ${EXE_FILENAME_LOWERCASE} \"* ]]; then\n                # If not previously configured, add the application to the list of detected applications.\n                APPS+=(\"${NAMES[$INDEX]} (${EXE_FILENAME_NOEXT})\")\n            fi\n        done\n\n        # Sort the 'APPS' array in alphabetical order.\n        IFS=$'\\n'\n        # shellcheck disable=SC2207 # Silence warnings regarding preferred use of 'mapfile' or 'read -a'.\n        TEMP_ARRAY=($(sort <<<\"${APPS[*]}\"))\n        unset IFS\n        APPS=(\"${TEMP_ARRAY[@]}\")\n\n        # Prompt user to select which other detected applications to configure.\n        OPTIONS=(\n            \"Set up all detected applications\"\n            \"Select which applications to set up\"\n            \"Do not set up any applications\"\n        )\n        inqMenu \"How would you like to handle other detected applications?\" OPTIONS APP_INSTALL\n\n        # Store selected detected applications.\n        if [[ $APP_INSTALL == \"Select which applications to set up\" ]]; then\n            inqChkBx \"Which other applications would you like to set up?\" APPS SELECTED_APPS\n        elif [[ $APP_INSTALL == \"Set up all detected applications\" ]]; then\n            for APP in \"${APPS[@]}\"; do\n                SELECTED_APPS+=(\"$APP\")\n            done\n        fi\n\n        for SELECTED_APP in \"${SELECTED_APPS[@]}\"; do\n            # Capture the substring within (but not including) the parentheses.\n            # This substring represents the executable filename without the file extension (see above loop).\n            EXE_FILENAME_NOEXT=\"${SELECTED_APP##*(}\"\n            EXE_FILENAME_NOEXT=\"${EXE_FILENAME_NOEXT%%)}\"\n\n            # Capture the substring prior to the space and parentheses.\n            # This substring represents the detected application name (see above loop).\n            PROGRAM_NAME=\"${SELECTED_APP% (*}\"\n\n            # Loop through all detected applications to find the detected application being processed.\n            for INDEX in \"${!NAMES[@]}\"; do\n                # Check for a matching detected application entry.\n                if [[ ${NAMES[$INDEX]} == \"$PROGRAM_NAME\" ]] && [[ ${EXES[$INDEX]} == *\"\\\\$EXE_FILENAME_NOEXT\"* ]]; then\n                    # Print feedback.\n                    echo -n \"Creating an application entry for ${PROGRAM_NAME}... \"\n\n                    # Create directory to store application icon and information.\n                    $SUDO mkdir -p \"${APPDATA_PATH}/apps/${EXE_FILENAME_NOEXT}\"\n\n                    # Determine the content of the '.desktop' file for the application.\n                    APP_DESKTOP_FILE=\"\\\n# GNOME Shortcut Name\nNAME=\\\"${PROGRAM_NAME}\\\"\n# Used for Descriptions and Window Class\nFULL_NAME=\\\"${PROGRAM_NAME}\\\"\n# Path to executable inside Windows\nWIN_EXECUTABLE=\\\"${EXES[$INDEX]}\\\"\n# GNOME Categories\nCATEGORIES=\\\"WinApps\\\"\n# GNOME MIME Types\nMIME_TYPES=\\\"\\\"\"\n\n                    # Store the '.desktop' file for the application.\n                    echo \"$APP_DESKTOP_FILE\" | $SUDO tee \"${APPDATA_PATH}/apps/${EXE_FILENAME_NOEXT}/info\" &>/dev/null\n\n                    # Write application icon to file.\n                    echo \"${ICONS[$INDEX]}\" | base64 -d | $SUDO tee \"${APPDATA_PATH}/apps/${EXE_FILENAME_NOEXT}/icon.png\" &>/dev/null\n\n                    # Configure the application.\n                    waConfigureApp \"$EXE_FILENAME_NOEXT\" png\n\n                    # Print feedback.\n                    echo -e \"${DONE_TEXT}Done!${CLEAR_TEXT}\"\n                fi\n            done\n        done\n    fi\n}\n\n# Name: 'waInstall'\n# Role: Installs WinApps.\nfunction waInstall() {\n    # Print feedback.\n    echo -e \"${BOLD_TEXT}Installing WinApps.${CLEAR_TEXT}\"\n\n    # Check for existing conflicting WinApps installations.\n    waCheckExistingInstall\n\n    # Load the WinApps configuration file.\n    waLoadConfig\n\n    # Check for missing dependencies.\n    waCheckInstallDependencies\n\n    # Update $MULTI_FLAG.\n    if [[ $MULTIMON == \"true\" ]]; then\n        MULTI_FLAG=\"/multimon\"\n    else\n        MULTI_FLAG=\"+span\"\n    fi\n\n    # Update $RDP_SCALE.\n    waFixScale\n\n    # Append additional FreeRDP flags if required.\n    if [[ -n $RDP_FLAGS ]]; then\n        FREERDP_COMMAND=\"${FREERDP_COMMAND} ${RDP_FLAGS}\"\n    fi\n\n    # If using 'docker' or 'podman', set RDP_IP to localhost.\n    if [ \"$WAFLAVOR\" = \"docker\" ] || [ \"$WAFLAVOR\" = \"podman\" ]; then\n        RDP_IP=\"$DOCKER_IP\"\n    fi\n\n    # If using podman backend, modify the FreeRDP command to enter a new namespace.\n    if [ \"$WAFLAVOR\" = \"podman\" ]; then\n        FREERDP_COMMAND=\"podman unshare --rootless-netns ${FREERDP_COMMAND}\"\n    fi\n\n    if [ \"$WAFLAVOR\" = \"docker\" ] || [ \"$WAFLAVOR\" = \"podman\" ]; then\n        # Check if Windows is powered on.\n        waCheckContainerRunning\n    elif [ \"$WAFLAVOR\" = \"libvirt\" ]; then\n        # Verify the current user's group membership.\n        waCheckGroupMembership\n\n        # Check if the Windows VM is powered on.\n        waCheckVMRunning\n    elif [ \"$WAFLAVOR\" = \"manual\" ]; then\n        waCheckPortOpen\n    else\n        # Display the error type.\n        echo -e \"${ERROR_TEXT}ERROR:${CLEAR_TEXT} ${BOLD_TEXT}INVALID WINAPPS BACKEND.${CLEAR_TEXT}\"\n\n        # Display the error details.\n        echo -e \"${INFO_TEXT}An invalid WinApps backend '${WAFLAVOR}' was specified.${CLEAR_TEXT}\"\n\n        # Display the suggested action(s).\n        echo \"--------------------------------------------------------------------------------\"\n        echo -e \"Please ensure 'WAFLAVOR' is set to 'docker', 'podman' or 'libvirt' in ${COMMAND_TEXT}${CONFIG_PATH}${CLEAR_TEXT}.\"\n        echo \"--------------------------------------------------------------------------------\"\n\n        # Terminate the script.\n        return \"$EC_INVALID_FLAVOR\"\n    fi\n\n    # Check if the RDP port on Windows is open.\n    waCheckPortOpen\n\n    # Test RDP access to Windows.\n    waCheckRDPAccess\n\n    # Create required directories.\n    $SUDO mkdir -p \"$BIN_PATH\"\n    $SUDO mkdir -p \"$APP_PATH\"\n    $SUDO mkdir -p \"$APPDATA_PATH/apps\"\n    $SUDO mkdir -p \"$APPDATA_PATH/icons\"\n\n    # Check for installed applications.\n    waFindInstalled\n\n    # Install the WinApps bash scripts.\n    $SUDO ln -sf \"${SOURCE_PATH}/bin/winapps\" \"${BIN_PATH}/winapps\"\n    $SUDO ln -sf \"${SOURCE_PATH}/setup.sh\" \"${BIN_PATH}/winapps-setup\"\n\n    # Configure the Windows RDP session application launcher.\n    waConfigureWindows\n\n    if [ \"$OPT_AOSA\" -eq 1 ]; then\n        # Automatically configure all officially supported applications.\n        waConfigureOfficiallySupported\n    else\n        # Configure officially supported applications.\n        waConfigureApps\n\n        # Configure other detected applications.\n        waConfigureDetectedApps\n    fi\n\n    # Ensure BIN_PATH is on PATH\n    waEnsureOnPath\n\n    # Print feedback.\n    echo -e \"${SUCCESS_TEXT}INSTALLATION COMPLETE.${CLEAR_TEXT}\"\n}\n\n# Name: 'waEnsureOnPath'\n# Role: Ensures that $BIN_PATH is on $PATH.\nfunction waEnsureOnPath() {\n    if [[ \":$PATH:\" == *\":$BIN_PATH:\"* ]]; then\n        echo -e \"${WARNING_TEXT}[WARNING]${CLEAR_TEXT} It seems like '${BIN_PATH}' is not on PATH.\"\n        echo -e \"${WARNING_TEXT}[WARNING]${CLEAR_TEXT} You can add it by running:\"\n        # shellcheck disable=SC2086\n        echo -e \"${WARNING_TEXT}[WARNING]${CLEAR_TEXT}   - For Bash: ${COMMAND_TEXT}echo 'export PATH=\"${BIN_PATH}:\\$PATH\"' >> ~/.bashrc${CLEAR_TEXT}\"\n        # shellcheck disable=SC2086\n        echo -e \"${WARNING_TEXT}[WARNING]${CLEAR_TEXT}   - For ZSH: ${COMMAND_TEXT}echo 'export PATH=\"${BIN_PATH}:\\$PATH\"' >> ~/.zshrc${CLEAR_TEXT}\"\n        echo -e \"${WARNING_TEXT}[WARNING]${CLEAR_TEXT} Make sure to restart your Terminal afterwards.\\n\"\n    fi\n}\n\n# Name: 'waUninstall'\n# Role: Uninstalls WinApps.\nfunction waUninstall() {\n    # Print feedback.\n    [ \"$OPT_SYSTEM\" -eq 1 ] && echo -e \"${BOLD_TEXT}REMOVING SYSTEM INSTALLATION.${CLEAR_TEXT}\"\n    [ \"$OPT_USER\" -eq 1 ] && echo -e \"${BOLD_TEXT}REMOVING USER INSTALLATION.${CLEAR_TEXT}\"\n\n    # Declare variables.\n    local WINAPPS_DESKTOP_FILES=()    # Stores a list of '.desktop' file paths.\n    local WINAPPS_APP_BASH_SCRIPTS=() # Stores a list of bash script paths.\n    local DESKTOP_FILE_NAME=\"\"        # Stores the name of the '.desktop' file for the application.\n    local BASH_SCRIPT_NAME=\"\"         # Stores the name of the application.\n\n    # Remove the 'WinApps' bash scripts.\n    $SUDO rm -f \"${BIN_PATH}/winapps\"\n    $SUDO rm -f \"${BIN_PATH}/winapps-setup\"\n\n    # Remove WinApps configuration data, temporary files and logs.\n    rm -rf \"$USER_APPDATA_PATH\"\n\n    # Remove application icons and shortcuts.\n    $SUDO rm -rf \"$APPDATA_PATH\"\n\n    # Store '.desktop' files containing \"${BIN_PATH}/winapps\" in an array, returning an empty array if no such files exist.\n    readarray -t WINAPPS_DESKTOP_FILES < <(grep -l -d skip \"${BIN_PATH}/winapps\" \"${APP_PATH}/\"* 2>/dev/null || true)\n\n    # Remove each '.desktop' file.\n    for DESKTOP_FILE_PATH in \"${WINAPPS_DESKTOP_FILES[@]}\"; do\n        # Trim leading and trailing whitespace from '.desktop' file path.\n        DESKTOP_FILE_PATH=$(echo \"$DESKTOP_FILE_PATH\" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')\n\n        # Extract the file name.\n        DESKTOP_FILE_NAME=$(basename \"$DESKTOP_FILE_PATH\" | sed 's/\\.[^.]*$//')\n\n        # Print feedback.\n        echo -n \"Removing '.desktop' file for '${DESKTOP_FILE_NAME}'... \"\n\n        # Delete the file.\n        $SUDO rm \"$DESKTOP_FILE_PATH\"\n\n        # Print feedback.\n        echo -e \"${DONE_TEXT}Done!${CLEAR_TEXT}\"\n    done\n\n    # Store the paths of bash scripts calling 'WinApps' to launch specific applications in an array, returning an empty array if no such files exist.\n    readarray -t WINAPPS_APP_BASH_SCRIPTS < <(grep -l -d skip \"${BIN_PATH}/winapps\" \"${BIN_PATH}/\"* 2>/dev/null || true)\n\n    # Remove each bash script.\n    for BASH_SCRIPT_PATH in \"${WINAPPS_APP_BASH_SCRIPTS[@]}\"; do\n        # Trim leading and trailing whitespace from bash script path.\n        BASH_SCRIPT_PATH=$(echo \"$BASH_SCRIPT_PATH\" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')\n\n        # Extract the file name.\n        BASH_SCRIPT_NAME=$(basename \"$BASH_SCRIPT_PATH\" | sed 's/\\.[^.]*$//')\n\n        # Print feedback.\n        echo -n \"Removing bash script for '${BASH_SCRIPT_NAME}'... \"\n\n        # Delete the file.\n        $SUDO rm \"$BASH_SCRIPT_PATH\"\n\n        # Print feedback.\n        echo -e \"${DONE_TEXT}Done!${CLEAR_TEXT}\"\n    done\n\n    # Print caveats.\n    echo -e \"\\n${INFO_TEXT}Please note that your WinApps configuration and the WinApps source code were not removed.${CLEAR_TEXT}\"\n    echo -e \"${INFO_TEXT}You can remove these manually by running:${CLEAR_TEXT}\"\n    echo -e \"${COMMAND_TEXT}rm -r $(dirname \"$CONFIG_PATH\")${CLEAR_TEXT}\"\n    echo -e \"${COMMAND_TEXT}rm -r ${SOURCE_PATH}${CLEAR_TEXT}\\n\"\n\n    # Print feedback.\n    echo -e \"${SUCCESS_TEXT}UNINSTALLATION COMPLETE.${CLEAR_TEXT}\"\n}\n\n### SEQUENTIAL LOGIC ###\n# Welcome the user.\necho -e \"${BOLD_TEXT}\\\n################################################################################\n#                                                                              #\n#                            WinApps Install Wizard                            #\n#                                                                              #\n################################################################################\n${CLEAR_TEXT}\"\n\n# Check dependencies for the script.\nwaCheckScriptDependencies\n\n# Source the contents of 'inquirer.sh'.\nwaGetInquirer\n\n# Sanitise and parse the user input.\nwaCheckInput \"$@\"\n\n# Configure paths and permissions.\nwaConfigurePathsAndPermissions\n\n# Get the source code\nwaGetSourceCode\n\n# Install or uninstall WinApps.\nif [ \"$OPT_UNINSTALL\" -eq 1 ]; then\n    waUninstall\nelse\n    waInstall\nfi\n\nexit 0\n"
        }
      ]
    }
  ]
}