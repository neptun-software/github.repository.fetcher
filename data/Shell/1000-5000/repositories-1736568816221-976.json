{
  "metadata": {
    "timestamp": 1736568816221,
    "page": 976,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk3OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "adoptium/temurin-build",
      "stars": 1032,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".azure-devops",
          "type": "tree",
          "content": null
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0166015625,
          "content": "workspace/build/\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1279296875,
          "content": ".idea/\n*.iml\n.vscode/\nworkspace\ncyclonedx-lib/build\n**/.DS_Store\nbuild-farm/platform-specific-configurations/platformConfigFile.sh\n"
        },
        {
          "name": ".licenserc.yaml",
          "type": "blob",
          "size": 1.8291015625,
          "content": "# ********************************************************************************\n# Copyright (c) 2024 Contributors to the Eclipse Foundation\n#\n# See the NOTICE file(s) with this work for additional\n# information regarding copyright ownership.\n#\n# This program and the accompanying materials are made\n# available under the terms of the Apache Software License 2.0\n# which is available at https://www.apache.org/licenses/LICENSE-2.0.\n#\n# SPDX-License-Identifier: Apache-2.0\n# ********************************************************************************\n\nheader:\n  license:\n    spdx-id: Apache-2.0\n    copyright-owner: Eclipse Foundation\n    content: |\n      ********************************************************************************\n      Copyright (c) [year] Contributors to the [owner]\n\n      See the NOTICE file(s) with this work for additional\n      information regarding copyright ownership.\n      \n      This program and the accompanying materials are made\n      available under the terms of the Apache Software License 2.0\n      which is available at https://www.apache.org/licenses/LICENSE-2.0.\n      \n      SPDX-License-Identifier: Apache-2.0\n      ********************************************************************************\n    pattern: Copyright (c) ((\\d{4})(, \\d{4})*) Contributors to the Eclipse Foundation\n      \n  comment: on-failure\n\n  paths-ignore:\n    - 'LICENSE'\n    - 'NOTICE'\n    - '**/*.md'\n    - '**/*.asc'\n    - '.gitignore'\n    - '.dockerignore'\n    - '.semgrepignore'\n    - 'docker/.gitignore'\n    - 'security/.gitignore'\n    - 'security/mk-ca-bundle.pl'\n    - 'security/certdata.txt'\n    - 'sbin/*.template'\n    - '.github/linters/*'\n    - '.github/workflows/dependabot-auto-merge.yml'\n    - 'cyclonedx-lib/getDependencies'\n    - 'cyclonedx-lib/dependency_data/**'\n    - 'makejdk-any-platform.1'\n    - 'serverTimestamp.properties'\n"
        },
        {
          "name": ".semgrepignore",
          "type": "blob",
          "size": 0.0009765625,
          "content": "\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 7.0302734375,
          "content": "<!-- textlint-disable terminology -->\n# Changelog for openjdk-build scripts (DEPRECATED)\n\n## DEPRECATION NOTES\n\n**THIS DOCUMENT IS NO LONGER POPULATED. PLEASE SEE THE [MASTER COMMIT HISTORY](https://github.com/AdoptOpenJDK/openjdk-build/commits/master) FOR A MORE UP TO DATE LOG**\n\n## Version 1.0.0 (14th May 2018)\n\nSee [Commit History](https://github.com/AdoptOpenJDK/openjdk-build/commits/master)\nup until May the 14th 2018.\n\n## Version 2.0.0 (26th Sep 2018)\n\nA major overhaul to split out Docker and Native builds, fix a host of small\nissues and place build jobs into Groovy Pipeline scripts.\n\n### Core Build Changes\n\n1. _configureBuild.sh_ added.  The pre-build configuration logic now resides in\nthis script.\n1. _native-build.sh_ added.  This script is invoked for building (Adopt) OpenJDK\nbinaries natively.\n1. _docker-build.sh_ added.  This script is invoked for building (Adopt) OpenJDK\nbinaries in a Docker container.\n1. _sbin/prepareWorkspace.sh_ added\n1. _sbin/colour-codes.sh_ removed to simplify code\n1. _makejdk.sh_ removed - please use _makejdk-any-platform.sh_ or (rarely)\n_sbin/build.sh_ instead.\n1. _sbin/common-functions.sh_ removed and its logic split\n1. _sbin/common/common.sh_ added\n1. _sbin/common/config_init.sh_ added\n1. _sbin/common/constants.sh_ added\n1. _sbin/build.template_ added for saving off the configure configuration.\n1. _sbin/signalhandler.sh_ moved to _signalhandler.sh_\n1. _sbin/build.sh_ enhanced, now requires a 'saved' build configuration to run.\nThis 'saved' build configuration is created by _makejdk-any-platform.sh_ but\ncan be generated manually as well.\n1. _sign.sh_ added for code signing functionality.\n\n#### _makejdk-any-platform.sh_, _build.sh_, _makejdk.sh_ usage changes\n\n1. More versions added, `jdk8u | jdk9 | jdk10 | jfx | amber` are now all supported\n1. `-B` is now used for specifying the build number (long form `--build-number`).\n1. `-bv` is removed, (long form `--variant` changes to `--build-variant`).\n1. `-c` (long form `--clean-docker-build`) added to build from a clean docker container.\n1. `-ca` changes to `-C`, (long form `--configure-args` stays the same).\n1. `--clean-git-repos`, added to clean out any 'bad' local git repository you already have.\n1. `-D` (long form `--docker`) added for building in a docker container.\n1. `-dsgc` is removed, (long form `--disable-shallow-git-clone` stays the same).\n1. `-ftd` changes to `-f`, (long form `--freetype-dir` stays the same).\n1. `--freetype-build-param`, specify any special freetype build parameters (required for some OS's).\n1. `--freetype-version`, specify the version of freetype you are building.\n1. `-h` (long form `--help`) added.\n1. `-i` (long form `--ignore-container`) added to ignore existing docker container.\n1. `-j, --jtreg` and `-js, --jtreg-subsets` are removed as tests should be run via the aqa-tests repository / project.\n1. `-J` (long form `--jdk-boot-dir` added to set JDK boot dir.\n1. `-nc` (long form `--no-colour`) is removed.\n1. `-p` (long form `--processors`) added to set number of processors in docker build.\n1. `-sf` changes to `-F`, (long form `--skip-freetype` stays the same).\n1. `--sudo` added to run the docker container as root.\n1. `--tmp-space-build` (set a temporary build space if regular workspace is unavailable).\n1. `-T` (long form `--target-file-name` added to specify the final name of the binary.\n1. `-u` (long form `--update-version`) added to specify the update version.\n1. `--use-jep319-certs` added to use certs defined in JEP319 for OpenJDK 8/9 builds.\n1. `-V` (long form `--jvm-variant` specify the JVM variant (server or client).\n\nPlease see _makejdk-any-platform.1_ man page for full details.\n\n### Test Changes\n\n1. _sbin/jtreg.sh_ removed (superseded by the openjdk-tests project).\n1. _sbin/jtreg_prep.sh_ removed (superseded by the openjdk-tests project).\n\n### Docker Support\n\n1. `-D` (long form `--docker`) has been added for building in a docker container.\n1. `-c` (long form `--clean-docker-build`) has been added to build from a clean\ndocker container.\n1. `-i` (long form `--ignore-container`) has been added to ignore existing docker\ncontainer.\n1. `-p` (long form `--processors`) added to set number of processors in docker build.\n1. `--sudo` added to run the docker container as root.\n1. _docker-build.sh_ added.  This script is invoked for building (Adopt) OpenJDK\nbinaries in a Docker container.\n1. _docker/jdk<X>/x86_64/ubuntu/Dockerfile_ updated for various bugfixes.\n1. _docker/jdk<X>/x86_64/ubuntu/dockerConfiguration.sh_ files added.  These\ncontain Docker specific environment variables that the build scripts need (as\nopposed to falsely picking up the underlying native env).\n\n### Build Farm Support\n\n1. New _build-farm/make-adopt-build-farm.sh_ added for the new AdoptOpenJDK\nBuild Farm jenkins pipeline to build Adoptium OpenJDK binaries.  Sets the default\nenvironment variables that are currently set in individual jobs.  This allows\nus to now track and version these variables.\n1. New _build-farm/set-platform-specific-configurations.sh_ added for the new\nAdoptOpenJDK Build Farm jenkins pipeline to build Adoptium OpenJDK binaries.  Sets\nthe default environment variables that are currently set in individual jobs.\nThis allows us to now track and version these variables.\n1. New _build-farm/platform-specific-configurations/<platform>.sh added for\nthe new AdoptOpenJDK Build Farm jenkins pipeline to build Adoptium OpenJDK binaries.\nSets the default environment variables for specific platforms that are currently\nset in individual jobs.  This allows us to now track and version these variables.\n1. New _build-farm/sign-releases.sh added for the new AdoptOpenJDK Build Farm\njenkins pipeline to code sign Adoptium OpenJDK binaries (Mac and Windows for now).\n1. _pipelines/build/common/build_base_file.groovy_ added. This co-ordinates the various\n pipeline builds.\n1._pipelines/build/common/create\\_job\\_from\\_template.groovy_ added. This dynamically\ncreates jenkins jobs for a particular pipeline run (e.g. All jdk8u jobs).\n1. _pipelines/build/common/openjdk\\_build\\_pipeline.groovy_ added. This forms the base\npipeline code for each build.\n1. _pipelines/build/openjdk\\<version\\>\\_\\<variant\\>\\_\\<nightly\\|release\\>\\_pipeline.groovy_\nfiles added.  These will eventually replace the existing individual jobs with a\nPipeline for each version and variant.\n1. _pipelines/build/openjdk\\<version\\>\\_pipeline.groovy_\nfiles added. These define the configurations for the\n_pipelines/build/common/create\\_job\\_from\\_template.groovy_ to create jobs for a pipeline\n run.\n\n### Documentation and Misc\n\n1. _README.md_ updated to reflect new scripts.\n1. _docs/build.md_ added to describe how the build farm utilises the scripts.\n1. _docs/generateBuildMatrix.sh_ added to build a table of build statuses.\n1. _docs/generateTestMatrix.sh_ added to build a table of test statuses.\n1. _docs/images/AdoptOpenJDK_Build_Script_Relationships.png_ added to show script\nrelationship.\n1. _docs/images/sequence.svg_ added to show pipeline workflow.\n1. _.gitignore_ changed to reflect new `workspace` base directory, please check\nyour local .gitignore for the diff.\n1. _makejdk-any-platform.1_ man page updated to reflect new script usage.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 8.40234375,
          "content": "# Contributing to temurin-build\n\nThanks for your interest in this project.\nYou can contribute to this project in many different ways.  **We appreciate all kinds of help, so thank you!**\n\n## Project description\n\ntemurin-build is a project that contains the shell build scripts to produce Temurin binaries\n\n* https://github.com/adoptium/temurin-build\n\n## Developer resources\n\nThe project maintains the following source code repositories\n\n* https://github.com/adoptium/temurin-build\n\n## Eclipse Contributor Agreement\n\nBefore your contribution can be accepted by the project team contributors must\nelectronically sign the Eclipse Contributor Agreement (ECA).\n\n* http://www.eclipse.org/legal/ECA.php\n\nCommits that are provided by non-committers must have a Signed-off-by field in\nthe footer indicating that the author is aware of the terms by which the\ncontribution has been provided to the project. The non-committer must\nadditionally have an Eclipse Foundation account and must have a signed Eclipse\nContributor Agreement (ECA) on file.\n\nFor more information, please see the Eclipse Committer Handbook:\nhttps://www.eclipse.org/projects/handbook/#resources-commit\n\n## Contact\n\nContact the Eclipse Foundation Webdev team via webdev@eclipse-foundation.org.\n\n## Issues and Enhancements\n\nPlease let us know via our [issue tracker](https://github.com/adoptium/temurin-build/issues) if you find a problem, even if you don't have a fix for it.  The ideal issue report should be descriptive, and where possible include the steps we can take to reproduce the problem for ourselves.\n\nIf you have a proposed fix for an issue, or an enhancement you would like to make to the code please describe it in an issue, then send us the code as a [GitHub pull request](https://help.github.com/articles/about-pull-requests) as described below.\n\n## Pull requests\n\nWe use GitHub's pull requests (PRs) as the primary way to accept contributions to the project.  That means we assume you have followed the usual procedure and forked the project repository, cloned your fork, created a new branch for your contribution, and pushed one or more commits to your branch.  There are many [on-line guides](https://guides.github.com/activities/forking/) that will help you with these steps.\n\nConsider whether the project documentation or tests also need updating as part of your change, and make that part of the same logical issue and PR.  Open your PR against the master branch of the project.\n\nTo keep track of [the pull requests we are managing](https://github.com/adoptium/temurin-build/pulls) we ask that you follow these guidelines for structuring the pull request title and comment.\n\n### Pull request title\n\nUse a descriptive title, and if it relates to an issue in our tracker please reference which one.  If the PR is not intended to be merged you should prefix the title with \"[WIP]\" which indicates it is still Work In Progress.  For example, you may wish to send the PR in for an early review as you work through it.\n\n### Pull request comment\n\nThe PR comment should be formed by a one-line subject, followed by one line of whitespace, and one or more descriptive paragraphs, each separated by one line of whitespace. All of them should be finished by a dot.\n\nWhere your PR fixes an issue, it should include a reference to the issue's identifier in the first line of the commit comment.  The comment should provide enough information for a reviewer to understand the changes and their relation to the rest of the code.\n\n### Licensing and Developer certificate of origin\n\nWhen you submit any copyrighted material to the project via a pull request, issue tracker, or any other means, you agree to license the material under [the project's open source license](https://github.com/adoptium/temurin-build/blob/master/LICENSE), and warrant that you have the legal authority to do so, whether or not you state this explicitly.\n\nWe ask that you include a line similar to the following as part of your pull request comment or individual commit comments:\n\n```git\nDCO 1.1 Signed-off-by: Random J Developer\n```\n\n“DCO” stands for “Developer Certificate of Origin,” and refers to [the same text used in the Linux Kernel community](https://elinux.org/Developer_Certificate_Of_Origin).  Of course, you should replace \"Random J Developer\" by your own real name.\n\nBy adding this simple comment, you are telling the community that you wrote the code you are contributing, or you have the right to pass on the code that you are contributing.\n\n> Tip: You can use `git commit -s ...` or configure a git `commit.template` to include the sign-off statement in your commit messages automatically.\n\n### Source file headers\n\nAll the project's source files must start with a comment, as near to the top of the file as practical, that includes a reference to [the project license](https://github.com/adoptium/temurin-build/blob/master/LICENSE).  Take a look at some existing files to see how we do that, and if there are any questions just ask. In some cases, such as small, trivial files, or source files generated by tooling we don't reference the license again, but it still applies wherever the file contains copyrightable material.\n\nWe don't place explicit copyright statements in the project source files.  The project comprises many distinct pieces of code, spread across numerous source files, and authored by a variety of individuals.  Managing copyright statements is unproductive and [can lead to confusion and contention around the edge cases](https://opensource.com/law/14/n2/copyright-statements-source-files).  Rather we utilize [the NOTICE file](https://github.com/adoptium/temurin-build/blob/master/NOTICE) mechanism as a way to acknowledge copyright broadly where there is a valid reason to do so.\n\nFinally, for similar reasons to avoiding individual copyright statements, we don't maintain `@author` tags in source files.  There are good arguments to suggest that [author tags discourage open contribution](https://producingoss.com/en/managing-volunteers.html#territoriality), and we depend upon Git to maintain that information for the project.\n\n### Ensuring high quality\n\nIf you're changing a shellscript, please make sure you run [shellcheck](https://github.com/koalaman/shellcheck) before submitting your PR. This will also run in a GitHub check titled `Linter` to ensure you comply to our coding style guidelines (alongside a lot of other linters for different formats).\n\nAfter we receive your pull request our [GitHub Checks](https://github.com/adoptium/temurin-build/tree/master/.github/workflows) will test your changes.\nIf you're making any changes to our groovy files, you'll be more interested in our [pr-tester](https://ci.adoptium.net/view/build-tester/job/build-scripts-pr-tester/job/openjdk-build-pr-tester/) jenkins job which executes a set of test pipelines in a semi-live environment. Watch for the results posted as a comment to the PR, investigate and fix any failures.\nPlease see the [Testing.md](Testing.md) for more information on any of this.\n\nFixes can simply be pushed to the same branch from which you opened your pull request. GitHub will automatically re-test when new commits are pushed and update the results.\n\n### Reviews and merge conflicts\n\nAfter your PR has passed the automated testing it will be reviewed by other developers.  Comments on the changes and suggested modifications are encouraged from anybody, especially committers.  Please keep all comments focused, polite, and technical.\n\nYou may consider seeking explicit feedback from a contributor who has already worked on the code being changed.\n\n> Tip: Use git's blame function to see who changed the code last, then ask them to be a reviewer.\n\nAny reviewer can indicate that a change looks suitable for merging with a comment such as: “I think this patch looks good” or \"this fixes the issue for me\"; and we use the [LGTM](https://en.wiktionary.org/wiki/LGTM) convention for indicating the strongest level of technical sign-off on a PR.  When a committer comments with \"LGTM\" they specifically mean “I’ve looked at this patch thoroughly and take as much responsibility as if I wrote it myself”.\n\nSometimes, other changes will be merged ahead of yours which cause a conflict with your pull request’s changes. The PR cannot be merged until the conflict is resolved.  As a PR author it is your responsibility to resolve the conflicts and keep the PR up to date.  To facilitate this, try to be responsive to the review discussion rather than let days pass between replies.\n\nAgain, **thank you** for contributing to the project!\n"
        },
        {
          "name": "FAQ.md",
          "type": "blob",
          "size": 11.2294921875,
          "content": "# temurin-build FAQ\n\nThis document covers cover how to perform various repeatable tasks in the\nrepository that might not otherwise be obvious from just looking at the\nrepository.\n\n## How do I find my way around Temurin's build automation scripts?\n\nI wrote this diagram partially for my own benefit in [issue 957](https://github.com/adoptium/temurin-build/issues/957) that lists the shell scripts (`S`) and environment scripts (`E`). I think it would be useful to incorporate this into the documentation (potentially annotated with a bit more info) so people can find their way around the myriad of script levels that we now have.\nNote that the \"end user\" scripts start at `makejdk-any-platform.sh` and a\ndiagram of those relationships can be seen [here](https://github.com/adoptium/temurin-build/blob/master/docs/images/AdoptOpenJDK_Build_Script_Relationships.png)\n\n*See the [ci-jenkins-pipelines FAQ.md](https://github.com/adoptium/ci-jenkins-pipelines/blob/master/FAQ.md#how-do-i-find-my-way-around-adoptopenjdks-build-automation-scripts) for the Jenkins side of the pipeline*\n\n```markdown\nG               - make-adopt-build-farm.sh\nS                 - set-platform-specific-configurations.sh\nE                    - sbin/common/constants.sh (DUPLICATED LATER FROM configureBuild.sh)\nE                    - platform-specific-configurations/${OPERATING_SYSTEM}.sh\nS                 - makejdk-any-platform.sh\nE                   - ${SCRIPT_DIR}/sbin/common/config_init.sh (Parse options)\nE                   - ${SCRIPT_DIR}/docker-build.sh (Runs build.sh within container)\nE                   - ${SCRIPT_DIR}/native-build.sh (Runs build.sh natively)\nE                   - ${SCRIPT_DIR}/configureBuild.sh\nE                     - ${SCRIPT_DIR}/sbin/common/constants.sh\nE                     - ${SCRIPT_DIR}/sbin/common/common.sh\nE                     - ${SCRIPT_DIR}/signalhandler.sh (rm container on SIGINT/SIGTERM)\nS                   - {buildOpenJDKViaDocker|buildOpenJDKInNativeEnvironment}\n```\n\nThere is also some documentation in [CHANGELOG.md](CHANGELOG.md)\n\n## What are the prerequisites for a system used for builds?\n\n- The upstream OpenJDK build requirements are at [Supported Build Platforms](https://wiki.openjdk.java.net/display/Build/Supported+Build+Platforms)\n- The Temurin levels we build on are in [Minimum-OS-levels](https://github.com/adoptium/temurin-build/wiki/%5BWIP%5D-Minimum-OS-levels) although anything with comparable equivalent or later C libraries should work OK (in particular we have built on most current Linux distros without issues)\n\nIn terms of OSs and compilers, these are what we currently use for each Temurin release:\n\nJDK | Platform | Build env | Compiler | Other info\n--- | --- | --- | --- | ---\n8,11,17 | Linux/x64 | CentOS 6 | GCC [1] | glibc 2.12\n20+ | Linux/x64 | CentOS 7 | GCC [1] | glibc 2.17\nAll | Linux/arm32 | Ubuntu 16.04 | GCC [1] | glibc 2.23\nAll | Linux/s390x | RHEL 7 | GCC [1] | glibc 2.17\nAll | Linux (others) | CentOS 7 | GCC [1] | glibc 2.17\n8 | Windows/x64 | Server 2022 | VS2017 - CL  19.16.27049 |\n11,17 | Windows/x64 | Server 2022 | VS2019 - CL 19.29.30146 |\n21+ | Windows/x64 | Server 2022 | VS2022 - CL 19.37.32822 |\n8 | Win32 | Server 2022 | VS2013 - CL 18.00.40629 |\n11 | Win32 | Server 2022 | VS2017 - CL 19.16.27049 |\n17 | Win32 | Server 2022 | VS2019 - CL 19.29.30146 |\nAll | Macos/x64 | 10.14 (18.7.0) | clang-1001.0.46.4 |\nAll | Macos/aarch64 | 11 (20.1.0) | clang-1200.0.32.29 | There is no build for JDK8\nAll | Alpine/x64 | 3.15.6 | GCC 10.3.1 | Default compiler Alpine 10.3.1_git20211027\nAll | Alpine/aarch64 | 3.15.4 | GCC 10.3.1 | Default compiler Alpine 10.3.1_git20211027\n8 | AIX | 7.2 (7200-02) | xlc 13.1.3 (13.01.0003.0007) |  \n11+ | AIX | 7.2 (7200-02) | xlc 16.1.0 (16.01.0000.0011) |\n8 | Solaris (Both) | 10 1/13 | Studio 12.3 (C 5.12) |\n\n[1] - Linux gcc levels are 7.5 for JDK8 and 11, 10.3.0 for JDK17 and 11.2.0 for\nJDK20+. At present these are all built from us from the\n[upstream GCC sources](https://gcc.gnu.org/releases.html)\non our machines as a one off and stored in https://ci.adoptium.net/userContent/gcc/\nwhere they are consumed [by our playbooks](https://github.com/adoptium/infrastructure/blob/master/ansible/playbooks/AdoptOpenJDK_Unix_Playbook/roles/gcc_11/tasks/main.yml)\n\nAll of our machines used for building Temurin are set up using the ansible\nplaybooks from the\n[infrastructure](https://github.com/adoptopenjdk/openjdk-infrastructure)\nrepository.\n\nRuntime platforms are in our [supported platforms page](https://adoptium.net/supported_platforms.html).\n\n## How do I change the parameters, such as configure flags, for a Jenkins build\n\nWhere you change them depends on the scope of the parameter or flag:\n\n- *If the parameter will affect all users, regardless of environment or OS/Arch*\n  - [build.sh](https://github.com/adoptium/temurin-build/blob/master/sbin/build.sh) OR [makejdk-any-platform.sh](https://github.com/adoptium/temurin-build/blob/master/makejdk-any-platform.sh) depending on how high up in the execution stack it needs to be.\n  - [Example PR - Adding a new archival feature for OpenJ9 memory dumps](https://github.com/adoptium/temurin-build/pull/2464)\n- *If the parameter will affect all machines of a specific OS OR related to the environment set up by [our ansible scripts](https://github.com/AdoptOpenJDK/openjdk-infrastructure) at the shell script level*\n  - Modify the relevant environment files in [platform-specific-configurations](https://github.com/adoptium/temurin-build/tree/master/build-farm/platform-specific-configurations)\n  - [Example PR - Adding a new configure flag for OpenJ9 on all AIX machines](https://github.com/adoptium/temurin-build/pull/1442/files)\n- *If the parameter will affect only our jenkins environment or jenkins machine environment*\n  - Modify the [pipeline files](https://github.com/adoptium/ci-jenkins-pipelines/tree/master/pipelines/build), although this is normally only done for configuration differences such as OpenJ9 Large Heap builds. See [the configuration file documentation](https://github.com/adoptium/ci-jenkins-pipelines#configuration-files) for more information about adding or altering custom jenkins param.\n  - [Example PR - Adding Jenkins Support for a Cross Compiled Bisheng Binary](https://github.com/adoptium/ci-jenkins-pipelines/pull/68)\n\n### TL;DR (Quick Reference Table)\n\n| Parameter Location | Impact |\n| --- | --- |\n| [build.sh](https://github.com/adoptium/temurin-build/blob/master/sbin/build.sh) OR [makejdk-any-platform.sh](https://github.com/adoptium/temurin-build/blob/master/makejdk-any-platform.sh) | Anyone (including end users) who are running [makejdk-any-platform.sh](https://github.com/adoptium/temurin-build/blob/master/makejdk-any-platform.sh) |\n| [platform-specific-configurations](https://github.com/adoptium/temurin-build/tree/master/build-farm/platform-specific-configurations) scripts | Those using [build-farm/make-adopt-build-farm.sh](https://github.com/adoptium/temurin-build/blob/master/build-farm/make-adopt-build-farm.sh) (inc. our pipelines) - should be stuff specific to our machines |\n| Jenkins resources in [ci-jenkins-pipelines](https://github.com/adoptium/ci-jenkins-pipelines) | Only when run through our jenkins pipelines. See the [configuration file documentation](https://github.com/adoptium/ci-jenkins-pipelines#configuration-files) for more information |\n\n## How to do a new release build\n\nSince it's quite long, this is covered in a separate [RELEASING.md](RELEASING.md) document\n\n## I've modified the build scripts - how can I test my changes?\n\nIf you're making changes ensure you follow the contribution guidelines in\n[CONTRIBUTING.md](CONTRIBUTING.md) including running [shellcheck](https://github.com/koalaman/shellcheck) if you're modifying the shell scripts.\n\nFor more information, see the [PR testing documentation](Testing.md).\n\n## What are smoke tests?\n\nSmoke tests are quick and simple tests to verify that we 'built the right thing'.  They can be found in the [buildAndPackage directory](https://github.com/adoptium/temurin-build/tree/master/test/functional/buildAndPackage)\nSmoke tests verify things like:\n\n- the java -version output is correct\n- certain features are available in certain builds (checks for shenandoah GC or xxx)\n- the right set of modules are included\netc\n\n## How and where are smoke tests run?\n\nThey use the same mechanisms and automation used by the AQA test suite.  This means they can be run on the command-line, or as part of a Jenkins job or in a GitHub workflow.  For this repository, they are part of PR testing via the [build.yml](https://github.com/adoptium/temurin-build/blob/master/.github/workflows/build.yml#L151) workflow using the [run-aqa](https://github.com/adoptium/run-aqa) action.\n\nThey are also run as part of the Jenkins build pipelines (see the [runSmokeTests()](https://github.com/adoptium/ci-jenkins-pipelines/blob/master/pipelines/build/common/openjdk_build_pipeline.groovy#L264-L301) method in the openjdk_build_pipeline groovy script), triggered after the build is complete and before any AQA tests get run against the build.  If smoke tests fail, it likely indicates we built the 'wrong thing' and there is no point running further testing until we resolve the build issues.\n\nTo run them on the command-line, one can follow the same general instructions for running any AQA test on the command-line, with the additional step of exporting variables to indicate where to find test material (VENDOR_TEST_REPOS, VENDOR_TEST_BRANCHES, VENDOR_TEST_DIRS).   See: [SmokeTesting.md](https://github.com/adoptium/temurin-build/blob/master/SmokeTesting.md)\n\n## How to add a new build pipeline param and associated job configuration?\n\n[This PR](https://github.com/adoptium/temurin-build/pull/2416) demonstrates changes required to add a new build pipeline param and the associated version/platform job configurations for setting the value when needed  (note, the `pipelines/` dir has since been moved to our [jenkins repository](https://github.com/adoptium/ci-jenkins-pipelines)).\n\n## How do I build from a tag(without docker)\n\nThe following are the pre-requisites for the the build to be successful\n\n| Dependency            | Install command(Linux)|\n|-----------------------|-----------------------------------------|\n| libfontconfig1-dev    | `sudo apt-get install libfontconfig1-dev`|\n| libx11-dev libxext-dev libxrender-dev libxrandr-dev libxtst-dev libxt-dev   | `sudo apt-get install libx11-dev libxext-dev libxrender-dev libxrandr-dev libxtst-dev libxt-dev`|\n| libasound2-dev     | `sudo apt-get install libasound2-dev`|\n| libcups2-dev     | `sudo apt-get install libcups2-dev`|\n\nAfter installing the above dependencies, run the following commands from the terminal\n\n Clone temurin-build repository\n\n `git clone https://github.com/adoptium/temurin-build.git`\n\n Navigate to the root directory of the project\n\n `cd temurin-build`\n\n Set the variant to temurin\n\n `export VARIANT=temurin`\n\n `export JAVA_TO_BUILD=jdk`\n\n The Adoptium build tag you want to build, don't set to build HEAD\n\n `export SCM_REF=jdk-20+2_adopt`\n\n Set the build to spin on release\n\n `export RELEASE=true`\n\n Bypass the cache completely by calling the real compiler using ccache\n\n `export CONFIGURE_ARGS=--disable-ccache`\n\n Trigger the build\n\n `build-farm/make-adopt-build-farm.sh`\n\n## Build output:\n\nOnce the build has successfully completed the built JDK archive artifact will be available in directory:\n\nJDK Archive: `workspace/target/jdk-hotspot.tar.gz`\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.09375,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        https://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       https://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 0.0634765625,
          "content": "Portions of this software are\n(C) Copyright IBM Corporation 2017\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 19.177734375,
          "content": "<!-- textlint-disable terminology -->\n# Repository for code and instructions for building OpenJDK binaries, defaulting to Eclipse Temurin™\n\nThese scripts can be used to build OpenJDK anywhere but are primarily used by Eclipse Adoptium members (vendors) to build binaries. The scripts default to the use case of building Eclipse Temurin binaries which occurs on the build farm at <https://ci.adoptium.net>. Those binaries are then made available for consumption at <https://adoptium.net> and via the API <https://api.adoptium.net>.\n\n**NOTE** In the future, adoptium.net will transition to being a marketplace for other qualifying vendors as well Eclipse Temurin.\n\n## Where can I find the release status of Eclipse Temurin™ binaries?\n\nGo to the [Eclipse Adoptium Top Level Project repository](https://www.github.com/adoptium/adoptium/issues) for release tracking.\n\n## TL;DR: I want to build a JDK NOW\n\n### Build jdk natively on your system\n\nTo do this you will need to have your machine set up with a suitable\ncompiler and various other tools available. We set up our machines using\nansible playbooks from the [openjdk-infrastructure](https://github.com/adoptopenjdk/openjdk-infrastructure) repository.\nYou can also look at the [dockerfile generator](https://github.com/adoptium/temurin-build/blob/master/docker/dockerfile-generator.sh) for a list of required packages for Ubuntu.\n\nOnce you've got all of the prerequisites installed, clone this openjdk-build\nrepository (`git clone https://github.com/adoptium/temurin-build` and\nkick off a build a follows with this script. The `-J` parameter specifies\nthe \"boot JDK\" which should generally be one major version prior to the one\nyou are building (although one of the same major version will also work).\nNote that the build variant defaults to HotSpot if omitted which builds from the same repositories as Temurin.\n\n```bash\n./makejdk-any-platform.sh (-J /usr/lib/jvm/jdk-xx) (--build-variant <hotspot|openj9|corretto|SapMachine|dragonwell|bisheng>) <jdk8u|jdk11u|jdk16u|jdk>\n```\n\ne.g.\n\n```bash\n./makejdk-any-platform.sh -J /usr/lib/jvm/jdk-10.0.2 --build-variant hotspot jdk11u\n```\n\n## How do I build OpenJDK in a docker image?\n\nIf you do not want to set up your machine with all the prerequisites for\nbuilding OpenJDK, you can use our docker images under the [docker]\ndirectory as follows (first version builds HotSpot, second builds J9 - the\nfinal parameter can be adjusted to build whichever version you want as long\nas we can generate valid dockerfile for it):\n\n```bash\n./makejdk-any-platform.sh --docker --clean-docker-build jdk8u\n./makejdk-any-platform.sh --podman --clean-docker-build --build-variant openj9 jdk11u\n```\n\nWe test these dockerfiles on a regular basis in the\n[Dockerfilecheck](https://ci.adoptium.net/job/DockerfileCheck/) job\nto ensure they continue to work in a stable fashion.\n\n## Repository contents\n\nThis repository contains several useful scripts in order to build OpenJDK\npersonally or at build farm scale.\n\n1. The `build-farm` folder contains shell scripts for multi configuration Jenkins\nbuild jobs used for building Adoptium OpenJDK binaries.\n1. The `docker` folder contains tools for generating dockerfiles which can be used as part of building\nOpenJDK inside a Docker container.\n1. The `git-hg` folder has now been moved to it's own separate repository. See [openjdk-mirror-scripts](https://github.com/adoptium/mirror-scripts).\n1. The `pipelines` folder has now been moved to a separate repo: <https://github.com/adoptium/ci-jenkins-pipelines>.\n1. The `sbin` folder contains the scripts that actually build (Temurin).\n`build.sh` is the entry point which can be used stand alone but is typically\ncalled by the `native-build.sh` or `docker-build.sh` scripts (which themselves\nare typically called by `makejdk-any-platform.sh`).\n1. The `security` folder contains a script and `cacerts` file that is bundled\nwith the JDK and used when building OpenJDK: the `cacerts` file is an important\nfile that's used to enable SSL connections.\n\n## The makejdk-any-platform.sh script\n\n`makejdk-any-platform.sh` is the entry point for building (Adoptium) OpenJDK binaries.\nBuilding natively or in a docker container are both supported. This script (and\nits supporting scripts) have defaults, but you can override these as needed.\nThe scripts will auto detect the platform and architecture it is running on and\nconfigure the OpenJDK build accordingly.  The supporting scripts will also\ndownload and locally install any required dependencies for the OpenJDK build,\ne.g. The ALSA sound and Freetype font libraries.\n\nMany of the configuration options are passed through to the `configure` and\n`make` commands that OpenJDK uses to build binaries.  Please see the appropriate\n_README-builds.html_ file for the OpenJDK source repository that you are building.\n\n**NOTE:** Usage can be found via `makejdk-any-platform.sh --help`. Here is the\nman page re-formatted for convenience.\n\n```bash\nUSAGE\n\n./makejdk-any-platform [options] version\n\nPlease visit https://www.adoptium.net for further support.\n\nVERSIONS\n\njdk8u - Build Java 8, defaults to https://github.com/adoptium/jdk8u\njdk11u - Build Java 11, defaults to https://github.com/adoptium/jdk11u\njdk16u - Build Java 16, defaults to https://github.com/adoptium/jdk16u\njdk - Build Latest Java (Alpha/Beta), defaults to https://github.com/adoptium/jdk\n\nOPTIONS\n\n-b, --branch <branch>\nspecify a custom branch to build from, e.g. dev.\nFor reference, Adoptium GitHub source repositories default to the dev\nbranch which may contain a very small diff set to the master branch\n(which is a clone from the OpenJDK mercurial forest).\n\n-B, --build-number <build_number>\nspecify the OpenJDK build number to build from, e.g. b12.\nFor reference, OpenJDK version numbers look like 1.8.0_162-b12 (for Java 8) or\n9.0.4+11 (for Java 9+) with the build number being the suffix at the end.\n\n--build-variant <variant_name>\nspecify a OpenJDK build variant, e.g. openj9.\nFor reference, the default variant is hotspot and does not need to be specified.\n\n-c, --clean-docker-build\nremoves the existing docker container and persistent volume before starting\na new docker based build.\n\n-C, --configure-args <args>\nspecify any custom user configuration arguments, using \ntemporary_speech_mark_placeholder in the place of any speech marks.\n\n--clean-git-repo\nclean out any 'bad' local git repository you already have.\n\n--create-debug-image\ncreate a debug-image archive with the debug symbols.\n\n--create-jre-image\ncreate the legacy JRE image in addition to the JDK image.\n\n--create-sbom\ncreate the CycloneDX System Bill of Materials (JSON artifact).\n\n-d, --destination <path>\nspecify the location for the built binary, e.g. /path/.\nThis is typically used in conjunction with -T to create a custom path\n/ file name for the resulting binary.\n\n-D, --docker, --podman\nbuild OpenJDK in a docker/podman container. -D will autodetect, using podman if found, docker otherwise.\n\n--cross-compile\nuse this if you are cross compiling - it will skip the java -version checks at the end\n\n--debug-docker\ndebug OpenJDK build script in a docker container. Only valid if -D is selected.\n\n--disable-shallow-git-clone\ndisable the default fB--depth=1 shallow cloning of git repo(s).\n\n-f, --freetype-dir\nspecify the location of an existing FreeType library.\nThis is typically used in conjunction with -F.\n\n--freetype-build-param <parameter>\nspecify any special freetype build parameters (required for some Operating Systems).\n\n--freetype-version <version>\nspecify the version of freetype you are building.\n\n-F, --skip-freetype\nskip building Freetype automatically.\nThis is typically used in conjunction with -f.\n\n-h, --help\nprint the man page.\n\n-i, --ignore-container\nignore the existing docker container if you have one already.\n\n-J, --jdk-boot-dir <jdk_boot_dir>\nspecify the JDK boot dir.\nFor reference, OpenJDK needs the previous version of a JDK in order to build\nitself. You should select the path to a JDK install that is N-1 versions below\nthe one you are trying to build.\n\n-k, --keep\nif using docker, keep the container after the build.\n\n--local-dependency-cache-dir <Local dependency cache directory>\nspecify the location of a local cache of required build dependency jars. If not specified\nthe following default locations are searched\nWindows: c:/dependency_cache\nMacOS: ${HOME}/dependency_cache\nUnix: /usr/local/dependency_cache\n\n--make-exploded-image\ncreates an exploded image (useful for codesigning jmods). Use --assemble-exploded-image once you have signed the jmods to complete the packaging steps.\n\n--custom-cacerts <true|false>\nIf true (default), a custom cacerts file will be generated based on the Mozilla list of CA certificates (see folder security/). If false, the file shipped by OpenJDK will be used. \n\n-n, --no-colour\ndisable colour output.\n\n-p, --processors <args>\nspecify the number of processors to use for the docker build.\n\n-r, --repository <repository>\nspecify the repository to clone OpenJDK source from,\ne.g. https://github.com/karianna/openjdk-jdk8u.\n\n-s, --source <path>\nspecify the location to clone the OpenJDK source (and dependencies) to.\n\n-S, --ssh\nuse ssh when cloning git.\nIn case of docker build add github.com to ~/.ssh/known_hosts (e.g.: ssh github.com)\nif your ssh key has a passphrase, add it to ssh-agent (e.g.: ssh-add ~/.ssh/id_rsa)\n\n--sign\nsign the OpenJDK binary that you build.\n\n--sudo\nrun the docker container as root.\n\n-t, --tag <tag>\nspecify the repository tag that you want to build OpenJDK from.\n\n-T, --target-file-name <file_name>\nspecify the final name of the OpenJDK binary.\nThis is typically used in conjunction with -D to create a custom file\nname for the resulting binary.\n\n--tmp-space-build\nuse the temp directory for performing the build\n\n-u, --update-version <update_version>\nspecify the update version to build OpenJDK from, e.g. 162.\nFor reference, OpenJDK version numbers look like 1.8.0_162-b12 (for Java 8) or\n9.0.4+11 (for Java 9+) with the update number being the number after the '_'\n(162) or the 3rd position in the semVer version string (4).\nThis is typically used in conjunction with -b.\n\n--use-adoptium-devkit <Adoptium DevKit release tag>\nDownload and use the given DevKit from https://github.com/adoptium/devkit-binaries/releases.\nThe DevKit is downloaded and unpacked to WORKSPACE_DIR/WORKING_DIR/devkit\nand will add the configure arg --with-devkit=WORKSPACE_DIR/WORKING_DIR/devkit.\n\n--use-jep319-certs\nUse certs defined in JEP319 in Java 8/9. Deprecated, has no effect.\n\n--user-openjdk-build-root-directory <openjdk build root path>\nUse a user specified openjdk build root directory, rather than the OpenJDK git source directory.\nThe directory must be empty, or not exist (in which case it gets created).\n\n-v, --version\nspecify the OpenJDK version to build e.g. jdk8u.  Left for backwards compatibility.\n\n-V, --jvm-variant <jvm_variant>\nspecify the JVM variant (server or client), defaults to server.\n\nExample usage:\n\n./makejdk-any-platform -D jdk8u\n./makejdk-any-platform -T MyOpenJDK10.tar.gz jdk10\n\n```\n\n### Script Relationships\n\n![Build Variant Workflow](docs/images/AdoptOpenJDK_Build_Script_Relationships.png)\n\nThe main script to build OpenJDK is `makejdk-any-platform.sh`, which itself uses\nand/or calls `configureBuild.sh`, `docker-build.sh` and/or `native-build.sh`.\n\nThe structure of a build is:\n\n 1. Configuration phase determines what the configuration of the build is based on your current\nplatform and and optional arguments provided\n 1. Configuration is written out to `config/built_config.cfg`\n 1. Build is kicked off by either creating a docker container or running the native build script\n 1. Build reads in configuration from `built_config.cfg`\n 1. Downloads source, dependencies and prepares build workspace\n 1. Invoke OpenJDK build via `make`\n 1. Package up built artifacts\n\n- Configuration phase is primarily performed by [configureBuild.sh](https://github.com/adoptium/temurin-build/blob/master/configureBuild.sh) and [makejdk-any-platform.sh](https://github.com/adoptium/temurin-build/blob/master/makejdk-any-platform.sh).\n- If a docker container is required it is built by [docker-build.sh](https://github.com/adoptium/temurin-build/blob/master/docker-build.sh) otherwise [native-build.sh](https://github.com/adoptium/temurin-build/blob/master/native-build.sh).\n- In the build phase [sbin/build.sh](https://github.com/adoptium/temurin-build/blob/master/sbin/build.sh) is invoked either natively or inside the docker container.\n`sbin/build.sh` invokes [sbin/prepareWorkspace.sh](https://github.com/adoptium/temurin-build/blob/master/sbin/prepareWorkspace.sh) to download dependencies, source and perform\ngeneral preparation.\n- Rest of the build and packaging is then handled from `sbin/build.sh`\n\n## Building OpenJDK from other locations\n\n### Building OpenJDK from a non-Adoptium repository\n\nThese scripts default to using Adoptium as the OpenJDK source repository to build\nfrom, but you can override this with the `-r` flag. If you want to run from a\nnon-default branch you can also specify -b e.g.\n\n```bash\n./makejdk-any-platform.sh -r https://github.com/sxa/openjdk-jdk8u -b main -J /usr/lib/jvm/java-1.7.0 jdk8u\n```\n\n### Building in a custom directory\n\nExample Usage\n\n```bash\n./makejdk-any-platform.sh -J /usr/lib/jvm/jdk-10.0.2 -s $HOME/openjdk-jdk11u/src -d $HOME/openjdk-jdk11u/build -T MyOpenJDK11.tar.gz jdk11u\n```\n\nThis would clone OpenJDK source from <https://github.com/adoptium/openjdk-jdk11u>\nto `$HOME/openjdk-jdk11u/src`, configure the build with sensible defaults according\nto your local platform and then build OpenJDK and place the result in\n`/home/openjdk/target/MyOpenJDK11.tar.gz`.\n\n## Metadata\n\nAlongside the built assets a metadata file will be created with info about the build. This will be a JSON document of the form:\n\n```json\n{\n    \"vendor\": \"Eclipse Adoptium\",\n    \"os\": \"mac\",\n    \"arch\": \"x64\",\n    \"variant\": \"openj9\",\n    \"variant_version\": {\n        \"major\": \"0\",\n        \"minor\": \"22\",\n        \"security\": \"0\",\n        \"tags\": \"m2\"\n    },\n    \"version\": {\n        \"minor\": 0,\n        \"security\": 0,\n        \"pre\": null,\n        \"adopt_build_number\": 0,\n        \"major\": 15,\n        \"version\": \"15+29-202007070926\",\n        \"semver\": \"15.0.0+29.0.202007070926\",\n        \"build\": 29,\n        \"opt\": \"202007070926\"\n    },\n    \"scmRef\": \"<output of git describe OR buildConfig.SCM_REF>\",\n    \"buildRef\": \"<build-repo-name/build-commit-sha>\",\n    \"version_data\": \"jdk15\",\n    \"binary_type\": \"debugimage\",\n    \"sha256\": \"<shasum>\",\n    \"full_version_output\": \"<output of java --version>\",\n    \"configure_arguments\": \"<output of bash configure>\"\n}\n```\n\nThe Metadata class is contained in the [Metadata.groovy](https://github.com/adoptium/ci-jenkins-pipelines/blob/master/pipelines/library/src/common/MetaData.groovy) file and the Json is constructed and written in the [openjdk_build_pipeline.groovy](https://github.com/adoptium/ci-jenkins-pipelines/blob/master/pipelines/build/common/openjdk_build_pipeline.groovy) file.\n\nIt is worth noting the additional tags on the SemVer is the build number.\n\nBelow are all of the keys contained in the metadata file and some example values that can be present.\n\n----\n\n- `vendor:`\nExample values: [`Eclipse Adoptium`, `Alibaba`]\n\nThis tag is used to identify the vendor of the JDK being built, this value is set in the [build.sh](https://github.com/adoptium/temurin-build/blob/805e76acbb8a994abc1fb4b7d582486d48117ee8/sbin/build.sh#L183) file and defaults to \"Adoptium\".\n\n----\n\n- `os:`\nExample values: [`windows`, `mac`, `linux`, `aix`, `solaris`]\n\nThis tag identifies the operating system the JDK has been built on (and should be used on).\n\n----\n\n- `arch:`\nExample values: [`aarch64`, `ppc64`, `s390x`, `x64`, `x86-32`, `arm`]\n\nThis tag identifies the architecture the JDK has been built on and it intended to run on.\n\n----\n\n- `variant:`\nExample values: [`hotspot`, `openj9`, `corretto`, `dragonwell`, `bisheng`]\n\nThis tag identifies the JVM being used by the JDK. \"dragonwell\" and \"bisheng\" itself are HotSpot based JVMs but are currently considered their own variants for the purposes of build.\nWARN: This will be changed at a later date when we split out JVM from vendor.\n\n----\n\n- `variant_version:`\n\nThis tag is used to identify a version number of the variant being built, it currently is exclusively used by OpenJ9 and has the following keys:\n\n- `major:`\nExample values: [`0`, `1`]\n\n- `minor:`\nExample values: [`22`, `23`, `24`]\n\n- `security:`\nExample values: [`0`, `1`]  \n\n- `tags:`\nExample values: [`m1`, `m2`]\n\n----\n\n- `version:`\n\nThis tag contains the full version information of the JDK built, it uses the [VersionInfo.groovy](https://github.com/adoptium/temurin-build/blob/master/pipelines/library/src/common/VersionInfo.groovy) class and the [ParseVersion.groovy](https://github.com/adoptium/temurin-build/blob/master/pipelines/library/src/ParseVersion.groovy) class.\n\nIt contains the following keys:\n\n- `minor:`\nExample values: [`0`]\n\n- `security:`\nExample Values: [`0`, `9`, `252` `272`]\n\n- `pre:`\nExample values: [`null`]\n\n- `adopt_build_number:`\nExample values: [`0`]  \nIf the `ADOPT_BUILD_NUMBER` parameter is used to build te JDK that value will appear here, otherwise a default value of 0 appears.\n\n- `major:`\nExample values: [`8`, `11`, `15`, `16`]\n\n- `version:`\nExample values: [`1.8.0_272-202010111709-b09`, `11.0.9+10-202010122348`, `14.0.2+11-202007272039`, `16+19-202010120348`]\n\n- `semver:`\nExample values: [`8.0.202+8.0.202008210941`, `11.0.9+10.0.202010122348`, `14.0.2+11.0.202007272039`, `16.0.0+19.0.202010120339`]  \nFormed from the major, minor, security, and build number by the [formSemver()](https://github.com/adoptium/temurin-build/blob/805e76acbb8a994abc1fb4b7d582486d48117ee8/pipelines/library/src/common/VersionInfo.groovy#L123) function.\n\n- `build:`\nExample values: [`6`, `9`, `18`]  \nThe OpenJDK build number for the JDK being built.\n\n- `opt:`\nExample values: [`202008210941`, `202010120348`, `202007272039`]\n\n----\n\n- `scmRef:`\nExample values: [`dragonwell-8.4.4_jdk8u262-b10`, `jdk-16+19_adopt-61198-g59e3baa94ac`, `jdk-11.0.9+10_adopt-197-g11f44f68c5`, `23f997ca1`]  \n\nA reference the the base JDK repository being build, usually including a GitHub commit reference, i.e. `jdk-16+19_adopt-61198-g59e3baa94ac` links to `https://github.com/adoptium/openjdk-jdk/commit/59e3baa94ac` via the commit SHA **59e3baa94ac**.\n\nValues that only contain a commit reference such as `23f997ca1` are OpenJ9 commits on their respective JDK repositories, for example **23f997ca1** links to the commit `https://github.com/ibmruntimes/openj9-openjdk-jdk14/commit/23f997ca1.`\n\n----\n\n- `buildRef:`\nExample values: [`openjdk-build/fe0f2dba`, `openjdk-build/f412a523`]  \nA reference to the build tools repository used to create the JDK, uses the format **repository-name**/**commit-SHA**.\n\n----\n\n- `version_data:`\nExample values: [`jdk8u`, `jdk11u`, `jdk14u`, `jdk`]\n\n----\n\n- `binary_type:`\nExample values: [`jdk`, `jre`, `debugimage`, `testimage`]\n\n----\n\n- `sha256:`\nExample values: [`20278aa9459e7636f6237e85fcd68deec1f42fa90c6c541a2dfa127f4156d3e2`, `2f9700bd75a807614d6d525fbd8d016c609a9ea71bf1ffd5d4839f3c1c8e4b8e`]  \nA SHA to verify the contents of the JDK.\n\n----\n\n- `full_version_output:`\nExample values:\n\n```java\nopenjdk version \\\"1.8.0_252\\\"\\nOpenJDK Runtime Environment (Alibaba Dragonwell 8.4.4) (build 1.8.0_252-202010111720-b06)\\nOpenJDK 64-Bit Server VM (Alibaba Dragonwell 8.4.4) (build 25.252-b06, mixed mode)\\n`\n```\n\nThe full output of the command `java -version` for the JDK.\n\n----\n\n- `configure_arguments:`\nThe full output generated by `configure.sh` for the JDK built.\n"
        },
        {
          "name": "RELEASING.md",
          "type": "blob",
          "size": 41.5849609375,
          "content": "<!-- textlint-disable terminology -->\n# Temurin Release Guide\n\nDon't be scared off by this document! If you already understand the stuff in the glossary section and are only working on a HotSpot release, then skip to [Steps for every version](#steps-for-every-version) later on.\n\n## Release glossary and background information\n\n### OpenJDK Vulnerability Group\n\n- A private group of trusted people who take reports of vulnerabilities in the openjdk codebase and work to resolve them and get them into releases in a timely manner\n\n### Non-Oracle (usually Red Hat) maintained OpenJDK Quarterly Patch Set Update (PSU)\n\n- Maintainers work on quarterly update fixes for the next update, in the head stream of the updates repository e.g. <https://hg.openjdk.java.net/jdk-updates/jdk11u>\n- Fixes for the subsequent update are developed in the `dev` stream e.g. <https://hg.openjdk.java.net/jdk-updates/jdk11u-dev/>\n- Regular builds are tagged every week or so, e.g. `jdk-11.0.5+6`\n- Eventually after final testing it comes to general availability (GA) day for the update, at this point any fixes from the Vulnerability Group are merged with the final GA build, and tagged, e.g. `jdk-11.0.5+10`, `jdk-11.0.5-ga`\n\n### Oracle Managed OpenJDK Quarterly PSU\n\n- The most recent JDK release updates are managed by Oracle, and there will only be two of them, e.g. for `jdk-13` Oracle produced `jdk-13.0.1` and `jdk-13.0.2`.  \n- Oracle work on the quarterly updates internally and these update source branches and Vulnerability Group fixes are not public until GA date.\n- On GA day, Oracle merges the internal branch and Vulnerability Group fixes to produce the final GA build, and this is tagged, e.g. `jdk-13.0.1+9`, `jdk-13.0.1-ga`\n- If the release is a short term support release there are no more releases after the two Oracle-led updates, but if it is a long term support (LTS) release the OpenJDK community picks up subsequent release maintenance, and all work continues in public as described above.\n\n## OpenJDK Quarterly/New Release Process\n\n- Wait for Red Hat/Oracle to push the GA code to GitHub and announce availability:\n  - jdk8u : <https://github.com/openjdk/jdk8u>\n    - Announce: <https://mail.openjdk.java.net/pipermail/jdk8u-dev/>\n  - jdk11u and later:\n    - Announce: <https://mail.openjdk.java.net/pipermail/jdk-updates-dev/>\n  - jdkXX: <https://github.com/openjdk/jdkXX/>\n    - Announce: <https://mail.openjdk.java.net/pipermail/jdk-dev/>\n\n### Lockdown period\n\nDuring the week before release, the Release Champion makes changes in preparation for the release:\n\n- Update [releaseVersions](https://github.com/adoptium/ci-jenkins-pipelines/blob/master/pipelines/build/regeneration/release_pipeline_generator.groovy#L6) with correct incoming release versions.\n- Update https://github.com/adoptium/mirror-scripts/blob/master/releasePlan.cfg with expected tag, detail see https://github.com/zdtsw/mirror-scripts/tree/issue/3167#skara-repos-and-processes\n\n#### Branching message for build related repositories\n\nPost the below message to the #build & #release channels in Slack:\n\n`In Preparation for next weeks release, I'm proposing to branch the following repositories, in order that this branch becomes the baseline for the release. Shout now if you need to get any PRs merged for the release, as today is the last day, the following repositories will be branched: ( temurin-build, ci-jenkins-pipelines, jenkins-helper).`\n\n#### Create release branch on below repositories:\n\nCreate release branch in the format `vYYYY.MM.NN` on each of the following repositories:\n\n- temurin-build <https://github.com/adoptium/temurin-build>\n- ci-jenkins-pipelines <https://github.com/adoptium/ci-jenkins-pipelines>\n- jenkins-helper <https://github.com/adoptium/jenkins-helper>\n\nThese branches should be named according to the following format (vYYYY.MM.NN) ,e.g v2023.03.01 , whereby the final element is an incremental counter appended to the year and month of the release.\n\nIf anything needs to be merged into the new branch, it should typically be merged into master, then a `git cherry-pick` operation should be done to create a new PR against the release branch. This can typically be merged without further approval.\n\n#### Code Freeze message\n\nPaste the below message into the #release channel in Slack:\n\nWith under a week to go until releases, we are entering a lockdown period for the `master` branches in the following repositories: github-release-scripts, containers, installer, and mirror-scripts. The temurin-build, ci-jenkins-pipelines and jenkins-helper master branches are still open for work, however the release branch will be under code-freeze management.\n\nIf you need to submit a pr for any of these repos during this period, you should:\n\n- Add a comment saying “Approval to merge during the lockdown cycle please” and post in the appropriate slack channel for awareness. This can be done before the PR is finalised.\n- Add a note into this channel saying you are requesting the approval with a link to the comment in the first bullet point.\n- The comment should have approval from at least one build committer and one PMC member to indicate that they agree it is critical that it goes in.\n- The PR can be merged after 2 hours of the post going into the build channel (to give people time to object). This delay may be skipped in cases where the delay will result in something breaking within that time.\n\nOnly include \"critical\" fixes (i.e. those which will otherwise cause a build break or other problem which will prevent shipping the release builds).\nThis stops last minute changes going in, which may destabilise things. \"installer\" repo might have exception due to the fact it requires new version of build.\nIf a change has to go in during this \"lockdown\" period it should be done by posting a comment saying \"Requesting approval to merge during the lockdown period. Please thumbs up the comment to approve\" in Slack release channel.\nIf two committers into the repository express approval then the change can be merged during the lockdown period.\n\n#### Enable code-freeze on the build repositories\n\nIn order to enable the code freeze GitHub you need to change the line `if: github.repository_owner == 'adoptium' && false` to be `if: github.repository_owner == 'adoptium' && true` in the [code-freeze.yml](https://github.com/adoptium/.github/blob/main/.github/workflows/code-freeze.yml#L21) GitHub workflow. Please contact the PMC if you need help merging this change.\n\nAffected repositories:\n\nmaster branch:\n\n- github-release-scripts <https://github.com/adoptium/github-release-scripts>\n- containers <https://github.com/adoptium/containers>\n- installer <https://github.com/adoptium/installer>\n- mirror-script <https://github.com/adoptium/mirror-scripts>\n\nrelease branch:\n\n- temurin-build <https://github.com/adoptium/temurin-build>\n- ci-jenkins-pipelines <https://github.com/adoptium/ci-jenkins-pipelines>\n- jenkins-helper <https://github.com/adoptium/jenkins-helper>\n\n#### Release pipelines and jobs need to be re-generated with new tags by the Release Champion:\n\n- run [release-pipeline-generator](https://ci.adoptium.net/job/build-scripts/job/utils/job/release-pipeline-generator) with correct value:\n  1. `releaseTag` is the branch on `ci-jenkins-pipeline` and `temurin-build` git repo.\n  2. `helperTag` is the branch on `jenkins-helper` repo.\n  3. `aqaTag` is the branch on `aqa-tests` repo, in form of `vX.Y.Z-release` and usually the [latest stable release](https://github.com/adoptium/aqa-tests/releases)\n- ensure release-openjdkXX-pipeline in <https://ci.adoptium.net/job/build-scripts> are properly generated for the first time or updated:\n  1. jdk8 aarch32Linux shares the same pipeline `release-openjdk8-pipeline` with other jdk8 targets, therefore, only one release pipeline for jdk8\n  2. `targetConfigurations` should only include what we officially release for temurin.\n  3. `buildReference` and `ciReference` should have the value of `releaseTag` used when we generate pipeline.\n  4. `helperReference` should have the same value of `helperTag` used when we generate pipeline.\n- ensure downstream build jobs in <https://ci.adoptium.net/job/build-scripts/job/jobs/job/release/job/jobs/jdkXXu/> are created or updated\n  1. `BUILD_CONFIGURATION.USE_ADOPT_SHELL_SCRIPTS` is set to `true`\n  2. `DEFAULTS_JSON.repository.build_branch`, `ADOPT_DEFAULTS_JSON.repository.build_branch`, `DEFAULTS_JSON.repository.pipeline_branch` and `ADOPT_DEFAULTS_JSON.repository.pipeline_branch` should get correct release branch name as `releaseTag`\n  3. `DEFAULTS_JSON.repository.helper_ref` and `ADOPT_DEFAULTS_JSON.repository.helpe_ref` should get correct release branch name as `helperTag`\n\n<details>\n<summary>FLOW CHART OF THE PIPELINE GENERATOR PROCESS</summary>\n\n```mermaid\n\nflowchart TD\n\n1[\"ReleaseChampion\"] -- manual run --> 2[\"release-build-pipeline-generator\"] \n\n2 --generate--> 3.1[\"release-openjdk8-pipeline\"]\n2 --call--> 3.2[\"release_pipeline_jobs_generator_jdk8u\"]\n2 --generate--> 3.3[\"release-openjdk11-pipeline\"]\n2 --call--> 3.4[\"release_pipeline_jobs_generator_jdk11u\"]\n2 --generate--> 3.5[\"release-openjdk17-pipeline\"]\n2 --call--> 3.6[\"release_pipeline_jobs_generator_jdk17u\"]\n2 --generate--> 3.7[\"release-openjdkXX-pipeline\"]\n2 --call--> 3.8[\"release_pipeline_jobs_generator_jdkXXu\"]\n\n3.2-- create --> 3.2.1[\"jdk8u-release-mac-x64-temurin\"]\n3.2-- create --> 3.2.2[\"jdk8u-release-linux-x64-temurin\"]\n3.2-- create --> 3.2.3[\"jdk8u-release-<os>-<arch>-temurin\"]\n\n3.4-- create --> 3.4.1[\"jdk11u-release-mac-x64-temurin\"]\n3.4-- create --> 3.4.2[\"jdk11u-release-linux-x64-temurin\"]\n3.4-- create --> 3.4.3[\"jdk11u-release-<os>-<arch>-temurin\"]\n\n3.6-- create --> 3.6.1[\"jdk17u-release-mac-x64-temurin\"]\n3.6-- create --> 3.6.2[\"jdk17u-release-linux-x64-temurin\"]\n3.6-- create --> 3.6.3[\"jdk17u-release-<os>-<arch>-temurin\"]\n\n3.8-- create --> 3.8.1[\"jdkXXu-release-mac-x64-temurin\"]\n3.8-- create --> 3.8.2[\"jdkXXu-release-linux-x64-temurin\"]\n3.8-- create --> 3.8.3[\"jdkXXu-release-<os>-<arch>-temurin\"]\n\n```\n\n</details>\n\nScheduled pipeline Testing is automatically disabled from the Saturday prior to \"release Tuesday\", to the Sunday after, see: https://github.com/adoptium/ci-jenkins-pipelines/blob/5bd79eb1d95a033c4ee364a8f9fcc270ad653178/pipelines/build/common/trigger_beta_build.groovy#L51\n\nAdd a banner to the website to indicate that the releases are coming in the near future ([Example Changes](https://github.com/adoptium/adoptium.net/blob/main/src/components/Banner.tsx)).\n\n### Steps for every version\n\n### Automatic trigger of GA pipeline jobs\n\nIn order to reduce time to GA, we have automated triggers to ensure that the GA build pipelines are triggered as soon as the GA tags come out so it does not rely on one of the Adoptium team members watching it and kicking them off manually. These examples use JDK17 - adjust for the version you're interested in.\n\nNote that while the generated pipelines will include a configuration for `x32Windows` we should manually disable that before the triggers run to avoid those taking CPU time away from the x64 machines. The pipelines should be re-triggered with ONLY the `x32Windows` configuration approximately 48 hours after the initial triggers once most of the Windows 64-bit ones are complete for all versions.\n\n1. Jenkins \"release trigger\" job (e.g <https://ci.adoptium.net/job/build-scripts/job/utils/job/releaseTrigger_jdk17u/>) runs every hour in the release week to check if new GA tag has been detected in the adoptium's source code repo - the script run from the checks for the new release every 10 minutes five times (e.g <https://github.com/adoptium/jdk17u>) This excludes https://github.com/adoptium/aarch32-jdk8u\n2. If it finds new GA tag matches expected tag set in mirror-script repo, job triggers release-openjdk19-pipeline (e.g https://ci.adoptium.net/job/build-scripts/job/release-openjdk19-pipeline/) with parameters: `scmReference`.\n3. If it couldn't find the correct \"_adopt\" tag but GA tag has been applied in the upstream Skara source code repo. Several things can check:\n\n- If the appropriate [mirror job](e.g https://ci.adoptium.net/view/git-mirrors/job/git-mirrors/job/adoptium/job/git-skara-jdk19u/) has successfully received the tag. Could be a merge conflict blocking creation of \"_adopt\" tag.\n- If the expectedTag set in \"mirror-script\" repo is wrong/typo.\n- Check \"release trigger\" job, spot anything abnormal from console log.\n\n\"release-openjdkXX-pipeline\" can be manually run by Release Champion: set `scmReference` with correct \"_adopt\" tag.\n\n4. For jdk8 arm32Linux, the Release Champion needs to manually trigger https://ci.adoptium.net/job/build-scripts/job/release-openjdk8-pipeline/\n\n- different `scmReference` tag from https://github.com/adoptium/aarch32-jdk8u than in https://github.com/adoptium/jdk8u (with the `_adopt` suffix)\n- customized `targetConfigurations` value: should only contain the target architecture of `arm32Linux`  \n- customized `overridePublishName` value - use the tag consistent with the other architectures (e.g. `jdk8uXXX-bYY`)\n\n<details>\n<summary>FLOW CHART OF THE RELEASE TRIGGER PROCESS</summary>\n\n```mermaid\n\nflowchart TD\n\nstart[\"Every hour\"] --trigger--> step0[\"releaseTrigger job\"] --> step1[\"Check GA tag available\\nCheck _adopt tag available\"] ----> |yes| step2[\"Trigger release-openjdkXX-pipeline\\nwith scmReference\"] --> step3[\"Trigger all jdkXXu-release-OS-ARCH-temurin job\\nExcept jdk8u-release-linux-arm-temurin when XX is 8\"] --> step4[\"Trigger remote Temurin compliance CI jck test jobs: jck.sanity,jck.extended,jck.special\"]\nstep1 ---->|No| step1.1[\"sleep 10 minutes\"] -->step1\n\njdk8armStep1[\"ReleaseChampion check once GA tag on jdk8 aarch32Linux is ready\"] -->jdk8armStep2[\"Get _adopt tag on jdk8 aarch32Linux\"] -->jdk8armStep3[\"Manual run release-openjdk8u-pipeline with\\n1: scmReference\\n2: targetConfiguration\\n3: overridePublishName\"]\n\n```\n\n</details>\n\n### Dry run tests: Do this at least 1 week before release in the same calendar month\n\nIt is recommended that we perform an auto trigger test on at least two of the release versions (suggest jdk8 and one other) to validate the trigger and build processes and the release pipeline:\n\n1. Decide on which versions will be running a \"dryrun\" (eg.say we choose 17.0.12 and 23).\n2. Update [releasePlan.cfg](https://github.com/adoptium/mirror-scripts/blob/master/releasePlan.cfg) with the correct version numbers for the release, adding -dryrun- to the dryrun versions eg:\n\n- jdk8u422-ga\n- jdk-21.0.24-ga\n- jdk-17.0.12-dryrun-ga\n- jdk-21.0.4-ga\n- jdk-23-dryrun-ga)\n\n3. Ensure that the release branch of aqa_tests has been created for this release.\n4. Update [testenv/testenv.properties](https://github.com/adoptium/aqa-tests/blob/master/testenv/testenv.properties) in the **release branch** of aqa-tests to point to the same \"-ga\" or \"-dryrun-ga\" tags for the JDKnn_BRANCH properties.\n5. Determine the **\"latest\"** upstream OpenJDK tag for the dry-runs\n6. Get an Adoptium administrator to create the `-dryrun-ga` tag in the adoptium mirror, as in the following example:\n\n<!-- markdownlint-disable-next-line MD036 -->\n**IMPORTANT: dryrun tag MUST be something that is sorted before `-ga`. Always use format: \"-dryrun-ga\"**\n\n**For an OpenJDK UPDATE repository eg.jdk8u,jdk11u,jdk17u,jdk21u:**\n\n```bash\ngit clone git@github.com:adoptium/jdk17u.git\ncd jdk17u\ngit tag -a \"jdk-17.0.12-dryrun-ga\" jdk-17.0.12+7^{} -m\"YYYY.MM release dry run test\"\ngit push --tags origin master\n```\n\n**For the new release versions in the OpenJDK HEAD repository adoptium/jdk:**\n\n```bash\ngit clone git@github.com:adoptium/jdk.git\ncd jdk\ngit checkout jdk23   # Checkout version branch\ngit tag -a \"jdk-23-dryrun-ga\" jdk-23+37^{} -m\"YYYY.MM release dry run test\"\ngit push --tags origin jdk23\n```\n\n7. Wait for the release trigger job to detect the tag (wait up to 10mins), e.g. [releaseTrigger_jdk17u](https://ci.adoptium.net/job/build-scripts/job/utils/job/releaseTrigger_jdk17u) (Note that the schedule for that job is only run on the release months, so may not work if you are keen and try to do this in the month before)\n8. The trial release pipeline job should now be running, eg: https://ci.adoptium.net/job/build-scripts/job/release-openjdk17-pipeline/\n9. Ensure the build, aqa-tests and jck tests are run and triaged successfully.\n10. Once you have verified that everything looks good, testenv.properties should be adjusted to remove \"-dryrun\" before the final release tags appear.\n\nIf the tag in step 5 MUST NOT contain the +nn from the underlying tag.\nIf you accidentally create a +nn-dryrun-ga then you will get this error from\nopenjdk_pipeline.groovy:\n\n`[INFO] Resolved jdk-17.0.11-dryrun-ga to upstream build tag jdk-17.0.11+6jdk-17.0.11+6-dryrun-ga`\n`[ERROR] scmReference does not match with any JDK branch in testenv.properties in aqa-tests release branch. Please update aqa-tests v1.0.1-release release branch. Set the current build result to FAILURE!`\n\nDeleting the tag will not fix the problem as it will have been cached on the jenkins worker node used for the trigger jobs - see https://github.com/adoptium/temurin/issues/28#issuecomment-2041364554 for the details, but you'll need to manually adjust build-scripts/utils/./releaseTrigger_jdk*/workspace/tracking\n\n<details>\n<summary>Manual execution of the build pipelines (without using trigger jobs - now mostly obsolete other than jdk8u/arm32)</summary>\n\nHere are the old manual steps:\n\n1. Ensure that the [appropriate mirror job](https://ci.adoptium.net/view/git-mirrors/job/git-mirrors/job/adoptium/) has completed and that the corresponding repository at <https://github.com/adoptium/jdkXX> has successfully received the tag for the level you are about to build. If there are any conflicts they can be resolved on the machine where it failed if you have access to the private `adoptium_temurin_bot_ssh_key.gpg` key, or ask someone( e.g @gdams or @andrew-m-leonard) with push access to the repositories to manually run the mirror job and resolve the conflicts.\n2. Run OpenJDK pipeline build and test release:\n\n- Job: <https://ci.adoptium.net/job/build-scripts/job/openjdk8-pipeline/build> (Switch `openjdk8` for your version number)\n- `targetConfigurations`:\n  - only keep temurin variants\n  - make sure windows aarch64 is not presented (as this is written, it is not officially supported yet)\n- `releaseType: Release`\n- `adoptBuildNumber`: Leave blank unless you are doing a point release in which case it should be a number starting at `1` for the first point release.\n- `additionalConfigureArgs`:\n  - For JDK8, no need change default value. It automatically adds`--with-milestone=fcs` in `build.sh`.\n  - For JDK11+ use `--without-version-pre --without-version-opt` (for EA releases use: `--with-version-pre=ea --without-version-opt`)\n- `scmReference`: One of the following:\n  - For jdk8 aarch32Linux, the tag usually takes the form `jdk8u322-b04-aarch32-xxxxxxxx`\n  - For the rest, it's the same tag suffixed with `_adopt` e.g. `jdk-17.0.2+9_adopt`\n- `buildReference`:  tag or the ongoing release on temurin-build repo\n- `ciReference`: tag or the ongoing release on ci-jenkins-pipeline repo\n- `helperReference`: tag for the ongoing release on jenkins-helper repo\n- `overridePublishName`: only for jdk8 aarch32Linux, to set to the actual OpenJDK tag (`jdk8u322-b04`)\n- `aqaReference` should be set to the appropriate branch of the `aqa-tests` repository which is appropriate for this release. Generally of the form `vX.Y.Z-release`\n- `enableTests`: tick\n- Click \"Build\" button !!!\n\n</details>\n\n### After build pipeline finished\n\nOnce the openjdk pipeline has completed:\n\n1. Triage TRSS result:\n\n- Follow [triage the results](https://github.com/adoptium/aqa-tests/blob/master/doc/Triage.md). Go to [TRSS](https://trss.adoptopenjdk.net/tests/Test) which will guide you through creating an aqa test triage issue for the release\n- Find the section of each jdk build, e.g `openjdk8-pipeline in server https://ci.adoptium.net/job/build-scripts` for JDK8\n- Click \"Grid\" link on the correct Build row\n- Check if not all are \"Green\", create new \"release triage\" issue in `aqa-tests` repository, set description to \"Release Summary Report\" content and follow the Jenkins link to triage error and failure.\n- Raise issues either at:\n  - [temurin-build](https://github.com/adoptium/temurin-build) (for Adoptium build script)\n  - [aqa-tests](https://github.com/adoptium/aqa-tests) ( for test issues)\n  - [ci-jenkins-pipelines](https://github.com/adoptium/ci-jenkins-pipelines) (for jenkins pipelines specific issues)\n- Discuss failing tests with [Shelley Lambert](https://github.com/smlambert) or post on testing-aqavit Slack channel\n- Once all AQA tests on all platforms and all JDK versions have been signed off, then nightly tests can be re-enabled. See the notes on \"Disable nightly testing\".\n\n2. Publish build results:\n\n- If \"good to publish\", get permission to publish the release from the Adoptium PMC members, discussion is via the Adoptium [#release](https://adoptium.slack.com/messages/CLCFNV2JG) Slack channel.\n- Once permission has been obtained, run the [openjdk_release_tool](https://ci.adoptium.net/job/build-scripts/job/release/job/refactor_openjdk_release_tool/) to publish the releases to GitHub (restricted access - if you can't see this link, you don't have access). It is *strongly recommended* that you run first with the `DRY_RUN` checkbox enabled and check the output to verify that the correct list of files you expected are picked up.\n\n  -- `TAG`: (GitHub binaries published name)  e.g. `jdk-11.0.5+9`. If doing a point release, add that into the name e.g. for a `.3` release use something like this: `jdk8u232-b09.3`\n  -- `VERSION`: (select version e.g. `jdk11`)\n  -- `UPSTREAM_JOB_NAME`: e.g \"build-scripts/release-openjdkXX-pipeline\" for new way and \"build-scripts/openjdkXX-pipeline\" for old way\n  -- `UPSTREAM_JOB_NUMBER`: the build number of above upstream job, e.g. 86\n  -- `RELEASE`: \"ticked\"\n  -- If you need to restrict the platforms or only ship jdks or jres, either use `ARTIFACTS_TO_COPY` e.g. `**/*jdk*mac*` or add an explicit exclusion in `ARTIFACTS_TO_SKIP` e.g. `**/*mac*`. These may be required if you had to re-run some of the platforms under a different pipeline earlier in the process. If you're unsure what the possible names are, look at the artifacts of the appropriate `openjdkNN-pipeline` job. If you are shipping x64_linux ensure that you include the `sources` tar.gz files with the corresponding checksum and json file.\n  -- `ARTIFACTS_TO_SKIP`: `**/*testimage*`\n  -- If you need to restrict the platforms, fill in `ARTIFACTS_TO_COPY` and if needed add to `ARTIFACTS_TO_SKIP`. This may also be required if you had to re-run some of the platforms under a different pipeline earlier in the process. I personally tend to find it cleaner to release Linux in one pipeline, Windows+Mac in another, then the others together to keep the patterns simpler. Sample values for `ARTIFACTS_TO_COPY` are as follows (use e.g. `_x64_linux_` to restrict by architecture if required):\n    --- `**/*_linux_*.tar.gz,**/*_linux_*.sha256.txt,**/*_linux_*.json,**/*_linux_*.sig` (Exclude `**/*alpine_linux*` if you don't really want that to be picked up too)\n    --- Alternative that wouldn't pick up Alpine: `target/linux/x64/hotspot/**.tar.gz,target/linux/x64/hotspot/target/linux/x64/hotspot/*.sha256.txt`\n    --- `**/*_mac_*.tar.gz,**/*_mac_*.sha256.txt,**/*_mac_*.json,**/*_mac_*.pkg,**/*_mac_*.sig`\n    --- `**/*_windows_*.zip,**/*_windows_*.sha256.txt,**/*_windows_*.json,**/*_windows_*.msi,**/*_windows_*.sig`\n    --- `**/*_aix_*.tar.gz,**/*_aix_*.sha256.txt,**/*_aix_*.json,**/*_aix_*.sig`\n    --- `**/*_solaris_*.tar.gz,**/*_solaris_*.sha256.txt,**/*_solaris_*.json,**/*_solaris_*.sig`\n  --  Click \"Build\" button !!!\n- Once the job completes successfully, check the binaries have uploaded to GitHub at somewhere like <https://github.com/adoptium/temurin8-binaries/releases/tag/jdk8u302-b08>\n- Within 15 minutes the binaries should be available on the website too. e.g. <https://adoptium.net/?variant=openjdk11&jvmVariant=hotspot> (NOTE: If it doesn't show up, check whether the API is returning the right thing (e.g. with a link such as [this](https://api.adoptium.net/v3/assets/feature_releases/17/ga?architecture=x64&heap_size=normal&image_type=jre&jvm_impl=hotspot&os=linux&page=0&page_size=10&project=jdk&sort_method=DEFAULT&sort_order=DESC&vendor=eclipse), and that the `.json` metadata files are uploaded correctly)\n- During the waiting time, good to update:\n\n  -- <https://github.com/adoptium/website-v2/blob/main/src/asciidoc-pages/support.adoc> which is the source of <https://adoptium.net/support> ([Sample change](https://github.com/adoptium/website-v2/pull/1105))\n  -- (if required) the supported platforms table at <https://github.com/adoptium/website-v2/edit/main/src/asciidoc-pages/supported-platforms.adoc> which is the source of <https://adoptium.net/supported-platforms>\n\n3. Publish AQA test results:\n\nOnce all supported platform binaries have been released it's time to publish AQA test results. This can be done by two steps\n\n- Collect AQA test results, run jenkins job [TAP_Collection](https://ci.adoptium.net/view/Test_grinder/job/TAP_Collection/)\n- Publish the results, run the restricted access [release tool job](https://ci.adoptopenjdk.net/job/build-scripts/job/release/job/refactor_openjdk_release_tool/) by setting  UPLOAD_TESTRESULTS_ONLY, ARTIFACTS_TO_COPY=**/*.tar.gz and UPSTREAM_JOB_NAME=TAP_Collection\n\n4. Publish packages for different OS\n\n  4.1. **[Mac only]** Once the binaries are available on the website you need to update the Homebrew casks. There are 4 casks in total\nand all but the first one is in the `hombrew-cask-versions` repository. If you're doing a point release, the format of the version string is 11.0.20.1,1 so the version is always the same as \"our\" one but with the `+` replaced with a `,`\n\n- [`temurin`](https://github.com/Homebrew/homebrew-cask/blob/master/Casks/t/temurin.rb) which always serves the latest release version\n- [`temurin8`](https://github.com/Homebrew/homebrew-cask-versions/blob/master/Casks/temurin8.rb)\n- [`temurin11`](https://github.com/Homebrew/homebrew-cask-versions/blob/master/Casks/temurin11.rb)\n- [`temurin17`](https://github.com/Homebrew/homebrew-cask-versions/blob/master/Casks/temurin17.rb)\n\nAn example PR can be found [here](https://github.com/Homebrew/homebrew-cask-versions/pull/17582/files). The required SHA sums can be updated by `brew bump-cask-pr temurinXX --version 11.0.XX,Y` command if you're on a macos system, or manually if not . The separate pull request is required for each version you update. If in doubt reach out to @gdams as he's a maintainer.\n\n  4.2. **[Linux only]** Once the binaries are available on the website you can begin updating the specfiles for the RPM/DEB/APK files. There are 4 different types of linux installer\n\n- [debian](https://github.com/adoptium/installer/tree/master/linux/jdk/debian/src/main/packaging/temurin)\n- [Red Hat](https://github.com/adoptium/installer/tree/master/linux/jdk/redhat/src/main/packaging/temurin)\n- [SuSE](https://github.com/adoptium/installer/tree/master/linux/jdk/suse/src/main/packaging/temurin)\n- [Alpine](https://github.com/adoptium/installer/tree/master/linux/jdk/alpine/src/main/packaging/temurin)\n  \n  All need to be updated:\n\n  - **Debian** you need to locate the `rules` file for each version. This file contains the URLs and Checksums for each package ([example](https://github.com/adoptium/installer/blob/master/linux/jdk/debian/src/main/packaging/temurin/11/debian/rules#L6-L15)). The `changelog` file should also be updated for the new version.\n  - **Red Hat/SuSE** you need to modify the `temurin-<version>-jdk.spec` file for each version. The links/checksum links are all defined as `Source<number>` variables ([example](https://github.com/adoptium/installer/blob/master/linux/jdk/redhat/src/main/packaging/temurin/11/temurin-11-jdk.spec#L128-L142)).\n  - **Alpine** you need to modify [pkgver](https://github.com/adoptium/installer/blob/master/linux/jdk/alpine/src/main/packaging/temurin/11/APKBUILD#L3) and [checksum](https://github.com/adoptium/installer/blob/master/linux/jdk/alpine/src/main/packaging/temurin/11/APKBUILD#L92)\n\nOnce the PRs to change those files have been merged, the [adoptium-packages-linux-pipeline](https://ci.adoptium.net/job/adoptium-packages-linux-pipeline_new/) job needs to be kicked off. It is recommended to run it without the UPLOAD checkbox to begin with as a 'dry-run' before re-running with the `UPLOAD` checkbox ticked to publish to our JFrog artifactory instance.\n\n5. **[Docker Hub]** The information on updating the Adoptium official dockerhub repository is at <https://github.com/adoptium/containers#maintenance-of-dockerfiles> at the moment you cannot do this until all Linux architectures and windows64 are published for the appropriate version\n\n6. Once everything has been published to GitHub, use the [EclipseMirror](https://ci.eclipse.org/temurin-compliance/job/EclipseMirror/) job to mirror the artifacts to our Eclipse server for backup purposes. Note that this will need to be done by a team member in the temurin-compliance project (Run once for each of the releases)\n\n7. Publicise the Temurin release:\n\n- Via slack on the Adoptium #release channel\n- Find someone with the appropriate authority (Carmen, George, Martijn, Shelley, Stewart, Tim) to post a tweet about the new release from the Adoptium twitter account\n\n### Post Release Tasks\n\nOnce all the release binaries have been published the following tasks should be completed:\nIf the latest version just released has come to the end of its non-LTS lifecycle (2 CPU updates, eg.jdk-15.0.2)\n\n- disable and retire that version from the Nightly and Evaluation pipeline builds: e.g <https://github.com/adoptium/ci-jenkins-pipelines/pull/628/files>\n- update pr-test job to not include this version\n\nFor the api.adoptium.net repository:\n\n- Update the LATEST_JAVA_VERSION_PROPERTY in [Versions.kt](https://github.com/adoptium/api.adoptium.net/blob/main/adoptium-models-parent/adoptium-api-v3-models/src/main/kotlin/net/adoptium/api/v3/models/Versions.kt) to be n+1, where n is the highest major version you've just released.\n- Ensure that LATEST_JAVA_VERSION is not set on the api.adoptium.net server, as it will override the LATEST_JAVA_VERSION_PROPERTY.\n\n## OpenJDK \"New\" Major Release process\n\n- The refers to a \"new\" major (Short or Long Term) OpenJDK Release (e.g. jdk23, jdk24, ...)\n- Oracle and contributors work on releases in the \"head\" OpenJDK stream: <http://github.com/openjdk/jdk>\n- 3 months prior to the GA date, the `head` stream is branched into a new release branch for development rampdown e.g.branch \"jdk23\" within http://github.com/openjdk/jdk\n- Regular builds are tagged every week or so in a format such as `jdk-23+21`\n- Eventually after rampdown and final phase testing the GA build is tagged and released, e.g. the `jdk-23-ga` code level is tagged along side the actual release build tag.\n- When a new release occurs, we must also update one of our job generators to match the new jdk versions and remove old versions that are no longer needed. The full details on what these are in the [regeneration README.md](https://github.com/adoptium/ci-jenkins-pipelines/blob/master/pipelines/build/regeneration/README.md) but for a quick run down on how to update them when we want to build a new release, follow the steps below:\n\n  1. Update the Job Folder - <https://ci.adoptium.net/job/build-scripts/job/utils/>: The jobs themselves you are looking for are called `pipeline_jobs_generator_jdkxx` (`pipeline_jobs_generator_jdk` for HEAD). Firstly, ensure that the job description of each generator (and it's parameter's descriptions) are up to date. Then, follow these steps:\n  \n  - If you are ADDING a JDK version:\n    - Ensure that JDK N-1 is available as build JDK on the builders. For example in order to build JDK 15, JDK 14 needs to be installed on the build machines. As a temporary measure, [code](./build-farm/platform-specific-configurations/linux.sh#L110) so as to download the JDK to the builder via the API has been added. NOTE: For the transition period shortly after a new JDK has been branched, there might not yet exist a generally available release of JDK N-1.\n    - Ensure that JDK sources are being mirrored. Example [infrastructure request](https://github.com/AdoptOpenJDK/openjdk-infrastructure/issues/1096)\n    - Ensure that a repository which contains the binary releases exists. Example [temurin23-binaries](https://github.com/adoptium/temurin23-binaries), if not then create using OtterDog <https://github.com/adoptium/.eclipsefdn/blob/68e1a3c84a7f51e538ab0cbc8a6b5d3428028c37/otterdog/adoptium.jsonnet#L753>:\n    - Regenerate build jobs:\n      - Create a New Item in the folder linked above that copies the `pipeline_jobs_generator_jdk` job. Call it `pipeline_jobs_generator_jdk<new-version-number>`.\n      - Change the `Script Path` setting of the new job to `pipelines/build/regeneration/jdk<new-version-number>_regeneration_pipeline.groovy`. Don't worry if this currently doesn't exist in this repository, you'll add it in step 3.\n      - Update the `Script Path` setting of the JDK-HEAD job (`pipeline_jobs_generator_jdk`) to whatever the new JDK HEAD is. I.e. if the new head is JDK23, change `Script Path` to `pipelines/build/regeneration/jdk23_regeneration_pipeline.groovy`\n  - If you are REMOVING a JDK version:\n    - Delete the job `pipeline_jobs_generator_jdk<version-you-want-to-delete>`\n\n  2. Create the new build configurations for the release - <https://github.com/adoptium/ci-jenkins-pipelines/tree/master/pipelines/jobs/configurations>:\n\n  - Create a new `jdk<new-version-number>_pipeline_config.groovy` file with the desired `buildConfigurations` for the new pipeline. 99% of the time, copy and pasting the configs from the previous version is acceptable. Ensure that the classname and instance of it is changed to `Config<new-version-number>`. Don't remove any old version configs.\n  - Furthermore, you will also need to create another config file to state what jobs will be run with any new versions. If it doesn't currently exist, add a `jdkxx.groovy` file to [configurations/](https://github.com/adoptium/ci-jenkins-pipelines/tree/master/pipelines/jobs/configurations). [Example on how to do this](https://github.com/adoptium/temurin-build/pull/1815/files). Note, some files will need to be named `jdkxxu.groovy` depending on whether the version is maintained in an update repository or not. These will be the ONLY os/archs/variants that are regenerated using the job regenerators as described in the [regeneration readme](https://github.com/adoptium/ci-jenkins-pipelines/blob/master/pipelines/build/regeneration/README.md).\n  \n  3. Add new versions to the releaseVersions: https://github.com/adoptium/ci-jenkins-pipelines/blob/d9429d510fecd3c5435c8b048eb899f5726afa85/pipelines/build/regeneration/release_pipeline_generator.groovy#L10\n  \n  4. Build the `pipeline_jobs_generator` that you just made. Ensure the equivalent `openjdkxx_pipeline` to the generator exists or this will fail. If the job fails or is unstable, search the console log for `WARNING` or `ERROR` messages for why. Once it has completed successfully, the [pipeline](https://ci.adoptium.net/job/build-scripts/) is ready to go!\n\n  5. Update the view for the [build and test pipeline calendar](https://ci.adoptium.net/view/Build%20and%20Test%20Pipeline%20Calendar) to include the new version.\n\n### Update Repository (jdkXXu)\n\nAt some point in a java version's lifecycle, the JDK version will be maintained in an update repository. The first notification of this will be via mail list in one of two places:\n\n- [jdk-dev](https://mail.openjdk.java.net/mailman/listinfo/jdk-dev)\n- [jdk-updates-dev](https://mail.openjdk.java.net/mailman/listinfo/jdk-updates-dev)\nWhen this occurs, usually a Temurin committer will create the `jdk<version>u` update repository ([example of the JDK11u one](https://github.com/adopium/openjdk-jdk11u)) via our Skara mirroring jobs that pull in the commit and tag info from the Mercurial repository. To find out more about Skara and our other mirroring jobs, see <https://github.com/adoptium/mirror-scripts>.\n\n*New Adoptium mirror repository creation, for a new OpenJDK UPDATE version repository, by an Adoptium GitHub Admin:*\n\n1. Create a new empty repository adoptium/openjdk-jdkNNu\n2. Create a new mirror job using an existing job as a template eg.<https://ci.adoptium.net/view/git-mirrors/job/git-mirrors/job/git-skara-jdk21u> to a new job <https://ci.adoptium.net/view/git-mirrors/job/git-mirrors/job/git-skara-jdkNNu>\n3. Update mirror job \"Execute shell\" to pass jdkNNu as parameter to bash ./skaraMirror.sh jdkNNu\n4. Run the new job twice, first one will fail due to empty repository, 2nd run should succeed.\n\n*New Adoptium mirror repository creation, for a new OpenJDK VERSION branch in the HEAD repository, by an Adoptium GitHub Admin:*\n\n1. Edit the existing jdk HEAD mirror job configuration \"Build Steps\" https://ci.adoptium.net/view/git-mirrors/job/git-mirrors/job/adoptium/job/git-skara-jdk/configure and within the Execute shell, update the \"branches\" variable to include the new jdkNN version branch.\n2. Run the new job to check it succeeds.\n\nWhen the repository has been created, a few changes to the codebase will be necessary where the code references a jdk version but not it's new update version. I.e. `jdk11` became `jdk11u` when it was moved to an update repository.\n\n*If a product is to be moved to an update repository, follow these steps in chronological order to ensure our builds continue to function:*\n\n1. ci-jenkins-pipelines: Update the [configurations](https://github.com/adoptium/ci-jenkins-pipelines/tree/master/pipelines/jobs/configurations)\nRename the nightly build targets file (it will be named `jdkxx.groovy`, [example here](https://github.com/adoptium/ci-jenkins-pipelines/blob/master/pipelines/jobs/configurations/jdk15u.groovy)) to be `jdkxxu.groovy`. Do the same for the pipeline config file (named `jdkxx_pipeline_config.groovy`, [example here](https://github.com/adoptium/ci-jenkins-pipelines/blob/master/pipelines/jobs/configurations/jdk15u_pipeline_config.groovy)).\n\n2. ci-jenkins-pipelines: Update version from `jdkxx` to `jdkxxu` inside [docs/generateBuildMatrix.sh](https://github.com/adoptium/ci-jenkins-pipelines/blob/master/docs/generateBuildMatrix.sh)\n\n3. ci-jenkins-pipelines: Run on \"linux\" platform your updated docs/generateBuildMatrix.sh script to generate the updated README.md table to be updated at the end of [README.md](https://github.com/adoptium/ci-jenkins-pipelines/blob/master/README.md#build-status)\n\n4. openjdk-build: Update the `JDKXX_VERSION` from `jdkxx` to `jdkxxu` inside the [build script constants](https://github.com/adoptium/temurin-build/blob/master/sbin/common/constants.sh) that is being shifted to an update repository.\n\n5. openjdk-build: Update the version from `jdkxx` to `jdkxxu` inside [.github/workflows/build.yml](https://github.com/adoptium/temurin-build/blob/master/.github/workflows/build.yml)\n\n6. Merge both ci-jenkins-pipelines and openjdk-build Pull Requests.\n\n7. Cancel jdkxx job regenerator that will have just been triggered: [job regenerator](https://ci.adoptium.net/job/build-scripts/job/utils/)\n\n8. Rename the jenkins pipeline jobs regenerator [job regenerator](https://ci.adoptium.net/job/build-scripts/job/utils/) from `pipeline_jobs_generator_jdkxx` to `pipeline_jobs_generator_jdkxxu`. Then manually re-build.\n\n9. Check the regenerator has created all the new jdkxxu build jobs successfully: [build jobs](https://ci.adoptium.net/job/build-scripts/job/jobs/)\n\n10. Delete the old jdkxx build jobs folder: <https://ci.adoptium.net/job/build-scripts/job/jobs/jdkxx>: [build jobs](https://ci.adoptium.net/job/build-scripts/job/jobs/)\n\n11. Submit a test [pipeline build](https://ci.adoptium.net/job/build-scripts/)\n\n## Summary on point releases\n\nOccasionally we may have to do an out-of-band release that does not align with a quarterly release from the upstream OpenJDK project. This may occur if there has been a problem with our build process that we missed at GA time, to fix a critical issue, or when a project outside OpenJDK :\n\n1. When triggering the pipeline, set `AdoptBuildNumber` to a unique number for the point release (the original will be \"blank\" so any subsequent point release required should start at \"1\")\n2. If you used a custom entry in `overridePublishName` when kicking off the GA pipeline, keep it the same as for the GA release - we DO NOT want the filenames changed to include the point number\n3. When running the publish job, you need to use a custom `TAG` in order to publish it to the website with a separate name from what you had initially e.g.  `jdk-11.0.5+10.1_openj9-0.17.1` (Note the position of the `.1` for OpenJ9 releases in that example - it's after the openj9 version but before the OpenJ9 version.\n\nIf you need to create a point release with a one-off patch (Usually a cherry pick of something already in the codebase which will go into the next release) use the following process:\n\n1. Clone the repository you need to patch (e.g. `git clone git@github.com:adoptium/jdk21u`)\n2. Check out the tag you wish to base it on (e.g. `git checkout jdk-21.0.1+12_adopt`)\n3. Create a branch for the new release (e.g. `git checkout -b jdk-21.0.1+12.1`)\n4. Cherry pick your patches to apply them onto the source\n5. Create a new `_adopt` tag for the point release (e.g. `git tag -a jdk-21.0.1+12.1_adopt`)\n6. Push the branch and tag: `git push origin jdk-21.0.1+12.1 && git push origin jdk-21.0.1+12.1_adopt`\n7. If the patch does not affect tests, create a PR to update testenv.properties in the aqa-tests release branch with the point release version number ([Sample PR against v0.9.9-release](https://github.com/adoptium/aqa-tests/pull/4865/files))\n8. If the patch does change tests, a new \".1\" branch should be created in aqa-tests, based off the release branch, which has the updatre to testenv.properties (If this was needed in the above example, you would create a v0.9.9.1-release branch)\n9. Run the release-openjdkXX-pipeline with:\n   - the new `_adopt` tag as the `scmReference`\n   - `additionalConfigureArgs` of `--with-version-build=12` (replace 12 with the number after `+` but before new new `.1` in the version string)\n   - the `aqaReference` updated if step 8 was followd\n   - the desired set of platforms defined in the `targetConfigurations` parameter\n"
        },
        {
          "name": "SmokeTesting.md",
          "type": "blob",
          "size": 2.0517578125,
          "content": "# General steps to follow for producing Smoke Tests\n\nThese are the general steps to execute the Smoke Tests found in[/test/functional/buildAndPackage](https://github.com/adoptium/temurin-build/tree/master/test/functional/buildAndPackage) on your local machine. They are run using the same mechanisms as the AQA test suite, with the TestKitGen ([TKG](https://github.com/adoptium/TKG)) harness that provides a standardized way to deal with these tests under automation.\n\n1. Ensure test machine is set up with test [prereqs](https://github.com/adoptium/aqa-tests/blob/master/doc/Prerequisites.md)\n1. Build or download/unpack the SDK you want to test to /someLocation\n1. export TEST_JDK_HOME=/someLocation // set test JDK home. On windows, the windows path format is expected. (i.e., TEST_JDK_HOME=C:\\someLocation )\n1. git clone [https://github.com/adoptium/aqa-tests.git](https://github.com/adoptium/aqa-tests) to /testLocation\n1. cd aqa-tests\n1. ./get.sh --vendor_repos https://github.com/adoptium/temurin-build --vendor_branches master --vendor_dirs /test/functional\n1. ( When running get.sh ensure the vendor parameters are passed correctly, the above example shows how to run the smoke tests contained within the temurin-build repository )\n1. cd TKG\n1. Export environment variables suitable for the SDK under test and for the test materials being used (i.e., export BUILD_LIST=functional/buildAndPackage, this value details which test material that should be compiled.\n1. make compile // fetches test material and compiles it, based on build.xml files in the test directories\n1. make _extended.functional // executes the test target (can be test group, level, level.group or specific test). i.e., openjdk (all tests in openjdk group), sanity.functional (all functional tests labelled at sanity level), or in the case of smoke tests which are all tagged to belong to level=extended and group=functional, we use `_extended.functional` and because we have limited BUILD_LIST to the directory where the smoke test material lives, we will only run tests from that directory tagged as extended.functional.\n"
        },
        {
          "name": "Testing.md",
          "type": "blob",
          "size": 3.349609375,
          "content": "# PR Testers\n\nopenjdk-build is an open source project, therefore, we need to ensure the the code that is being deployed to our master branch doesn't break any existing code and actually works as expected.\nTo achieve this level of testing, we use various jobs to compile, lint and test the code as well as running demo pipelines in a controlled sandbox environment if needs be.\nThe demo pipelines are colloquially known as \"The PR Tester\" where the others are generally just referred to as \"`checkname` check\".\n\n## When they're used\n\nAll of the [test groups](#what-they-are) are executed automatically on every PR and are defined inside the [.github/workflows directory](https://github.com/adoptium/temurin-build/tree/master/.github/workflows).\nThese tests lint & compile the code you have altered, as well as executing full JDK builds using your code.\n\n## What they are\n\nThere are two \"groups\" of tests that can be run on each PR:\n\n- [#Linter](#Linter)\n- [#Build](#Build)\n\nThe results of these jobs will appear as [GitHub Status Check Results](https://docs.github.com/en/github/administering-a-repository/about-required-status-checks) at the bottom of the PR being tested:\n![Image of PR Tester Checks](./images/pr_tester_checks.png)\n\n### Linter\n\nThis group consists of [GitHub Status Checks](https://docs.github.com/en/free-pro-team@latest/github/collaborating-with-issues-and-pull-requests/about-status-checks) run inside GitHub itself. They lint / analyse any changes you make to ensure they conform to our writing standards.\n\n#### Super Linter\n\n- This job downloads and runs the [Super Linter Tool](https://github.com/github/super-linter) in order to lint and compile any changes you have made to our bash scripts.\n- The job will fail and inform the user in the log if there are any violations of our code or documentation standards. If you feel that some of the standards are too strict or irrelevant to your changes, please raise it in [Slack:#testing](https://adoptium.slack.com/archives/C5219G28G).\n\n### Build\n\nThis group is a matrix of [GitHub Status Checks](https://docs.github.com/en/free-pro-team@latest/github/collaborating-with-issues-and-pull-requests/about-status-checks) run inside GitHub itself. They execute a full set of builds to various specifications, mimicking a user running a build locally\n\n- The group collects a varied mix of java versions, operating systems and VM variants that each execute [build-farm/make-adopt-build-farm.sh](https://github.com/adoptium/temurin-build/blob/master/build-farm/make-adopt-build-farm.sh), essentially running a full JDK build as if we were setting up and testing a new Jenkins machine OR as if it was running a build locally on your machine.\n- Each job is run inside a Docker container to ensure reliability between each build. For example, Linux builds use our [centos7_build_image](https://hub.docker.com/r/adoptopenjdk/centos7_build_image) Docker container.\n- At the end of the build, the finished JDK artifact is archived to GitHub for you to download and peruse at your leisure (see [actions/upload-artifact#usage](https://github.com/actions/upload-artifact#usage) for more info).\n- Due to GitHub ratelimiting how many status checks can be run in the space of a few minutes, these checks may take a little while to complete while they're stuck in the queue. Be patient however, as some of your changes may affect one build completely differently to another build.\n"
        },
        {
          "name": "build-farm",
          "type": "tree",
          "content": null
        },
        {
          "name": "configureBuild.sh",
          "type": "blob",
          "size": 16.18359375,
          "content": "#!/bin/bash\n# shellcheck disable=SC1091,SC2155\n# ********************************************************************************\n# Copyright (c) 2018 Contributors to the Eclipse Foundation\n#\n# See the NOTICE file(s) with this work for additional\n# information regarding copyright ownership.\n#\n# This program and the accompanying materials are made\n# available under the terms of the Apache Software License 2.0\n# which is available at https://www.apache.org/licenses/LICENSE-2.0.\n#\n# SPDX-License-Identifier: Apache-2.0\n# ********************************************************************************\n\n################################################################################\n#\n# This script sets up the initial configuration for an Adoptium OpenJDK Build.\n# See the configure_build function and its child functions for details.\n# It's sourced by the makejdk-any-platform.sh script.\n#\n################################################################################\n\nset -eu\n\n# i.e. Where we are\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\n\n# shellcheck source=sbin/common/constants.sh\nsource \"$SCRIPT_DIR/sbin/common/constants.sh\"\n\n# shellcheck source=sbin/common/common.sh\nsource \"$SCRIPT_DIR/sbin/common/common.sh\"\n\n# Bring in the source signal handler\nsourceSignalHandler() {\n  #shellcheck source=signalhandler.sh\n  source \"$SCRIPT_DIR/signalhandler.sh\"\n}\n\n# Parse the command line arguments\nparseCommandLineArgs() {\n  # Defer most of the work to the shared function in common-functions.sh\n  parseConfigurationArguments \"$@\"\n\n  # Check the build variant here as this is earliest point where constants.sh is loaded\n  # shellcheck disable=SC2143\n  if [ -z \"$(echo \"${BUILD_VARIANTS}\" | grep -w \"${BUILD_CONFIG[BUILD_VARIANT]}\")\" ]; then\n    echo \"[ERROR] ${BUILD_CONFIG[BUILD_VARIANT]} is not a recognised build variant. Valid Variants = ${BUILD_VARIANTS}\"\n    exit 1\n  fi\n\n  # this check is to maintain backwards compatibility and allow user to use\n  # -v rather than the mandatory argument\n  if [[ \"${BUILD_CONFIG[OPENJDK_FOREST_NAME]}\" == \"\" ]]; then\n    if [[ $# -eq 0 ]]; then\n      echo \"Please provide a java version to build as an argument\"\n      exit 1\n    fi\n\n    while [[ $# -gt 1 ]]; do\n      shift\n    done\n\n    # Now that we've processed the flags, grab the mandatory argument(s)\n    setOpenJdkVersion \"$1\"\n    setDockerVolumeSuffix \"$1\"\n  fi\n}\n\n# Extra config for OpenJDK variants such as OpenJ9, SAP et al\n# shellcheck disable=SC2153\ndoAnyBuildVariantOverrides() {\n  if [[ \"${BUILD_CONFIG[BUILD_VARIANT]}\" == \"${BUILD_VARIANT_SAP}\" ]]; then\n    local branch=\"sapmachine10\"\n    BUILD_CONFIG[BRANCH]=${branch:-${BUILD_CONFIG[BRANCH]}}\n  elif [[ \"${BUILD_CONFIG[BUILD_VARIANT]}\" == \"${BUILD_VARIANT_HOTSPOT}\" ]] && [ \"${BUILD_CONFIG[OS_ARCHITECTURE]}\" == \"riscv64\" ]; then\n    if [ \"${BUILD_CONFIG[OPENJDK_CORE_VERSION]}\" == \"${JDK8_CORE_VERSION}\" ] \\\n      || [ \"${BUILD_CONFIG[OPENJDK_CORE_VERSION]}\" == \"${JDK11_CORE_VERSION}\" ]; then\n      local branch=\"riscv-port\"\n      BUILD_CONFIG[BRANCH]=${branch:-${BUILD_CONFIG[BRANCH]}}\n    fi\n  fi\n}\n\n# Set the working directory for this build\nsetWorkingDirectory() {\n  if [ -z \"${BUILD_CONFIG[WORKSPACE_DIR]}\" ]; then\n    if [[ \"${BUILD_CONFIG[CONTAINER_COMMAND]}\" == \"true\" ]]; then\n      BUILD_CONFIG[WORKSPACE_DIR]=\"/openjdk/\"\n    else\n      BUILD_CONFIG[WORKSPACE_DIR]=\"$PWD/workspace\"\n      mkdir -p \"${BUILD_CONFIG[WORKSPACE_DIR]}\" || exit\n    fi\n  else\n    echo \"Workspace dir is ${BUILD_CONFIG[WORKSPACE_DIR]}\"\n  fi\n\n  echo \"Working dir is ${BUILD_CONFIG[WORKING_DIR]}\"\n}\n\n# shellcheck disable=SC2153\ndetermineBuildProperties() {\n  local build_type=\n  local default_build_full_name=\n  if [ -z \"${BUILD_CONFIG[USER_OPENJDK_BUILD_ROOT_DIRECTORY]}\" ] ; then\n    # From jdk12 there is no build type in the build output directory name\n    if [ \"${BUILD_CONFIG[OPENJDK_CORE_VERSION]}\" == \"${JDK12_CORE_VERSION}\" ] ||\n      [ \"${BUILD_CONFIG[OPENJDK_CORE_VERSION]}\" == \"${JDK13_CORE_VERSION}\" ] ||\n      [ \"${BUILD_CONFIG[OPENJDK_CORE_VERSION]}\" == \"${JDK14_CORE_VERSION}\" ] ||\n      [ \"${BUILD_CONFIG[OPENJDK_CORE_VERSION]}\" == \"${JDK15_CORE_VERSION}\" ] ||\n      [ \"${BUILD_CONFIG[OPENJDK_CORE_VERSION]}\" == \"${JDKHEAD_CORE_VERSION}\" ]; then\n      build_type=normal\n      default_build_full_name=${BUILD_CONFIG[OS_KERNEL_NAME]}-${BUILD_CONFIG[OS_ARCHITECTURE]}-${BUILD_CONFIG[JVM_VARIANT]}-release\n    else\n      default_build_full_name=${BUILD_CONFIG[OS_KERNEL_NAME]}-${BUILD_CONFIG[OS_ARCHITECTURE]}-${build_type}-${BUILD_CONFIG[JVM_VARIANT]}-release\n    fi\n  else\n    # User defined build output directory\n    default_build_full_name=\"${BUILD_CONFIG[USER_OPENJDK_BUILD_ROOT_DIRECTORY]}\"\n  fi\n  BUILD_CONFIG[BUILD_FULL_NAME]=${BUILD_CONFIG[BUILD_FULL_NAME]:-\"$default_build_full_name\"}\n}\n\n# Set variables that the `configure` command (which builds OpenJDK) will need\n# shellcheck disable=SC2153\nsetVariablesForConfigure() {\n\n  local openjdk_core_version=${BUILD_CONFIG[OPENJDK_CORE_VERSION]}\n  # test-image, debug-image and static-libs-image targets are optional - build scripts check whether the directories exist\n  local openjdk_test_image_path=\"test\"\n  local openjdk_debug_image_path=\"debug-image\"\n\n  # JDK 22+ uses static-libs-graal-image target, using static-libs-graal\n  # folder.\n  if [ \"${BUILD_CONFIG[OPENJDK_FEATURE_NUMBER]}\" -ge 22 ]; then\n    local static_libs_path=\"static-libs-graal\"\n  else\n    local static_libs_path=\"static-libs\"\n  fi\n  if [ \"$openjdk_core_version\" == \"${JDK8_CORE_VERSION}\" ]; then\n    local jdk_path=\"j2sdk-image\"\n    local jre_path=\"j2re-image\"\n    case \"${BUILD_CONFIG[OS_KERNEL_NAME]}\" in\n    \"darwin\")\n      local jdk_path=\"j2sdk-bundle/jdk*.jdk\"\n      local jre_path=\"j2re-bundle/jre*.jre\"\n      ;;\n    esac\n  else\n    local jdk_path=\"jdk\"\n    local jre_path=\"jre\"\n    case \"${BUILD_CONFIG[OS_KERNEL_NAME]}\" in\n    \"darwin\")\n      local jdk_path=\"jdk-bundle/jdk-*.jdk\"\n      local jre_path=\"jre-bundle/jre-*.jre\"\n      ;;\n    esac\n  fi\n\n  BUILD_CONFIG[JDK_PATH]=$jdk_path\n  BUILD_CONFIG[JRE_PATH]=$jre_path\n  BUILD_CONFIG[TEST_IMAGE_PATH]=$openjdk_test_image_path\n  BUILD_CONFIG[DEBUG_IMAGE_PATH]=$openjdk_debug_image_path\n  BUILD_CONFIG[STATIC_LIBS_IMAGE_PATH]=$static_libs_path\n}\n\n# Set the repository to build from, defaults to adoptium if not set by the user\n# shellcheck disable=SC2153\nsetRepository() {\n\n  local suffix\n  local githubRepoName=$(getOpenjdkGithubRepoName \"${BUILD_CONFIG[OPENJDK_FOREST_NAME]}\")\n\n  # Location of Extensions for OpenJ9 project\n  if [[ \"${BUILD_CONFIG[BUILD_VARIANT]}\" == \"${BUILD_VARIANT_OPENJ9}\" ]]; then\n    suffix=\"ibmruntimes/openj9-openjdk-${BUILD_CONFIG[OPENJDK_CORE_VERSION]}\"\n  elif [[ \"${BUILD_CONFIG[BUILD_VARIANT]}\" == \"${BUILD_VARIANT_SAP}\" ]]; then\n    # TODO need to map versions to SAP branches going forwards\n    # sapmachine10 is the current branch for OpenJDK10 mainline\n    # (equivalent to jdk/jdk10 on hotspot)\n    suffix=\"SAP/SapMachine\"\n  elif [[ \"${BUILD_CONFIG[BUILD_VARIANT]}\" == \"${BUILD_VARIANT_CORRETTO}\" ]]; then\n    suffix=\"corretto/corretto-${BUILD_CONFIG[OPENJDK_CORE_VERSION]:3}\"\n  elif [[ \"${BUILD_CONFIG[BUILD_VARIANT]}\" == \"${BUILD_VARIANT_DRAGONWELL}\" ]]; then\n    suffix=\"alibaba/dragonwell${BUILD_CONFIG[OPENJDK_CORE_VERSION]/jdk/}\"\n  elif [[ \"${BUILD_CONFIG[BUILD_VARIANT]}\" == \"${BUILD_VARIANT_FAST_STARTUP}\" ]]; then\n    suffix=\"adoptium/jdk11u-fast-startup-incubator\"\n  elif [[ \"${BUILD_CONFIG[BUILD_VARIANT]}\" == \"${BUILD_VARIANT_BISHENG}\" ]]; then\n    suffix=\"openeuler-mirror/bishengjdk-${BUILD_CONFIG[OPENJDK_CORE_VERSION]:3}\"\n  elif [ \"${BUILD_CONFIG[OPENJDK_CORE_VERSION]}\" == \"${JDK8_CORE_VERSION}\" ] && [ \"${BUILD_CONFIG[OS_ARCHITECTURE]}\" == \"armv7l\" ] && [[ \"${BUILD_CONFIG[BUILD_VARIANT]}\" == \"${BUILD_VARIANT_TEMURIN}\" ]]; then\n    suffix=\"adoptium/aarch32-jdk8u\";\n  elif [ \"${BUILD_CONFIG[OPENJDK_CORE_VERSION]}\" == \"${JDK8_CORE_VERSION}\" ] && [ \"${BUILD_CONFIG[OS_ARCHITECTURE]}\" == \"armv7l\" ] && [[ \"${BUILD_CONFIG[BUILD_VARIANT]}\" == \"${BUILD_VARIANT_HOTSPOT}\" ]]; then\n    suffix=\"openjdk/aarch32-port-jdk8u\";\n  elif [ \"${BUILD_CONFIG[OPENJDK_CORE_VERSION]}\" == \"${JDK8_CORE_VERSION}\" ] && [[ \"${BUILD_CONFIG[OS_FULL_VERSION]}\" == *\"Alpine\"* ]] && [[ \"${BUILD_CONFIG[BUILD_VARIANT]}\" == \"${BUILD_VARIANT_TEMURIN}\" ]]; then\n    suffix=\"adoptium/alpine-jdk8u\";\n  elif [ \"${BUILD_CONFIG[OPENJDK_CORE_VERSION]}\" == \"${JDK11_CORE_VERSION}\" ] && [ \"${BUILD_CONFIG[OS_ARCHITECTURE]}\" == \"riscv64\" ] && [[ \"${BUILD_CONFIG[BUILD_VARIANT]}\" == \"${BUILD_VARIANT_TEMURIN}\" ]]; then\n    suffix=\"adoptium/riscv-port-jdk11u\"\n  elif [[ \"${BUILD_CONFIG[BUILD_VARIANT]}\" == \"${BUILD_VARIANT_HOTSPOT}\" ]] && [ \"${BUILD_CONFIG[OS_ARCHITECTURE]}\" == \"riscv64\" ]; then\n    if [ \"${BUILD_CONFIG[OPENJDK_CORE_VERSION]}\" == \"${JDK8_CORE_VERSION}\" ] \\\n      || [ \"${BUILD_CONFIG[OPENJDK_CORE_VERSION]}\" == \"${JDK11_CORE_VERSION}\" ]; then\n      suffix=\"openjdk/riscv-port-${BUILD_CONFIG[OPENJDK_FOREST_NAME]}\"\n    else\n      suffix=\"openjdk/${githubRepoName}\"\n    fi\n  elif [[ \"${BUILD_CONFIG[BUILD_VARIANT]}\" == \"${BUILD_VARIANT_TEMURIN}\" ]]; then\n    suffix=\"adoptium/${githubRepoName}\"\n  else\n    suffix=\"openjdk/${githubRepoName}\"\n  fi\n\n  local repository\n\n  if [[ \"${BUILD_CONFIG[USE_SSH]}\" == \"true\" ]]; then\n    repository=\"git@github.com:${suffix}\"\n  else\n    repository=\"https://github.com/${suffix}\"\n  fi\n\n  repository=\"$(echo \"${repository}\" | awk '{print tolower($0)}')\"\n\n  BUILD_CONFIG[REPOSITORY]=\"${BUILD_CONFIG[REPOSITORY]:-${repository}}\"\n\n  echo \"Using source repository ${BUILD_CONFIG[REPOSITORY]}\"\n}\n\n# Given a forest_name (eg.jdk23), return the corresponding repository name\ngetOpenjdkGithubRepoName() {\n  local forest_name=\"$1\"\n  local repoName=\"\"\n\n  # \"Update\" versions are currently in a repository with the name of the forest\n  if [[ ${forest_name} == *u ]]; then\n    repoName=\"${forest_name}\"\n  else\n    local featureNumber=$(echo \"${forest_name}\" | tr -d \"[:alpha:]\")\n\n    # jdk-23+ stabilisation versions are within the jdk(head) repository\n    if [[ \"${featureNumber}\" -ge 23 ]]; then\n      repoName=\"jdk\"\n    else\n      repoName=\"${forest_name}\"\n    fi\n  fi\n\n  echo \"${repoName}\"\n}\n\n# Specific architectures need to have special build settings\n# shellcheck disable=SC2153\nprocessArgumentsforSpecificArchitectures() {\n  local jvm_variant=server\n  local build_full_name=\"\"\n  local make_args_for_any_platform=\"\"\n\n  case \"${BUILD_CONFIG[OS_ARCHITECTURE]}\" in\n  \"s390x\")\n    if [ \"${BUILD_CONFIG[OPENJDK_CORE_VERSION]}\" == \"${JDK8_CORE_VERSION}\" ] && [ \"${BUILD_CONFIG[BUILD_VARIANT]}\" != \"${BUILD_VARIANT_OPENJ9}\" ]; then\n      jvm_variant=zero\n    else\n      jvm_variant=server\n    fi\n\n    # Determine correct autoconf configuration name\n    if [ -z \"${BUILD_CONFIG[USER_OPENJDK_BUILD_ROOT_DIRECTORY]}\" ] ; then\n      if [ \"${BUILD_CONFIG[OPENJDK_FEATURE_NUMBER]}\" -ge 12 ]; then\n        build_full_name=linux-s390x-${jvm_variant}-release\n      else\n        build_full_name=linux-s390x-normal-${jvm_variant}-release\n      fi\n    else\n      build_full_name=\"${BUILD_CONFIG[USER_OPENJDK_BUILD_ROOT_DIRECTORY]}\"\n    fi\n\n    # This is to ensure consistency with the defaults defined in setMakeArgs()\n    if [ \"${BUILD_CONFIG[OPENJDK_CORE_VERSION]}\" == \"${JDK8_CORE_VERSION}\" ]; then\n      make_args_for_any_platform=\"DEBUG_BINARIES=true images\"\n    # Don't produce a JRE\n    elif [ \"${BUILD_CONFIG[CREATE_JRE_IMAGE]}\" == \"false\" ]; then\n      make_args_for_any_platform=\"DEBUG_BINARIES=true product-images\"\n    else\n      make_args_for_any_platform=\"DEBUG_BINARIES=true product-images legacy-jre-image\"\n    fi\n    ;;\n\n  \"ppc64le\")\n    jvm_variant=server\n\n    # Determine correct autoconf configuration name\n    if [ -z \"${BUILD_CONFIG[USER_OPENJDK_BUILD_ROOT_DIRECTORY]}\" ] ; then\n      if [ \"${BUILD_CONFIG[OPENJDK_CORE_VERSION]}\" == \"${JDK12_CORE_VERSION}\" ] ||\n        [ \"${BUILD_CONFIG[OPENJDK_CORE_VERSION]}\" == \"${JDK13_CORE_VERSION}\" ] ||\n        [ \"${BUILD_CONFIG[OPENJDK_CORE_VERSION]}\" == \"${JDK14_CORE_VERSION}\" ] ||\n        [ \"${BUILD_CONFIG[OPENJDK_CORE_VERSION]}\" == \"${JDK15_CORE_VERSION}\" ] ||\n        [ \"${BUILD_CONFIG[OPENJDK_CORE_VERSION]}\" == \"${JDKHEAD_CORE_VERSION}\" ]; then\n        build_full_name=linux-ppc64-${jvm_variant}-release\n      else\n        build_full_name=linux-ppc64-normal-${jvm_variant}-release\n      fi\n    else\n      build_full_name=\"${BUILD_CONFIG[USER_OPENJDK_BUILD_ROOT_DIRECTORY]}\"\n    fi\n\n    if [ \"$(command -v rpm)\" ]; then\n      # shellcheck disable=SC1083\n      BUILD_CONFIG[FREETYPE_FONT_BUILD_TYPE_PARAM]=${BUILD_CONFIG[FREETYPE_FONT_BUILD_TYPE_PARAM]:=\"--build=$(rpm --eval %{_host})\"}\n    fi\n    ;;\n\n  \"armv7l\")\n    if [ \"${BUILD_CONFIG[OPENJDK_CORE_VERSION]}\" == \"${JDK8_CORE_VERSION}\" ] && isHotSpot; then\n      jvm_variant=client\n      make_args_for_any_platform=\"DEBUG_BINARIES=true images\"\n    elif [ \"${BUILD_CONFIG[CREATE_JRE_IMAGE]}\" == \"false\" ]; then\n      # Don't produce a JRE\n      jvm_variant=server,client\n      make_args_for_any_platform=\"DEBUG_BINARIES=true images\"\n    else\n      jvm_variant=server,client\n      make_args_for_any_platform=\"DEBUG_BINARIES=true images legacy-jre-image\"\n    fi\n    if [[ ${BUILD_CONFIG[USER_SUPPLIED_CONFIGURE_ARGS]:-\"\"} != *\"--with-jobs\"* ]]; then\n      BUILD_CONFIG[USER_SUPPLIED_CONFIGURE_ARGS]=\"--with-jobs=${BUILD_CONFIG[NUM_PROCESSORS]} ${BUILD_CONFIG[USER_SUPPLIED_CONFIGURE_ARGS]:-''}\"\n    fi\n    ;;\n\n  esac\n\n  BUILD_CONFIG[JVM_VARIANT]=${BUILD_CONFIG[JVM_VARIANT]:-$jvm_variant}\n  BUILD_CONFIG[BUILD_FULL_NAME]=${BUILD_CONFIG[BUILD_FULL_NAME]:-$build_full_name}\n  BUILD_CONFIG[MAKE_ARGS_FOR_ANY_PLATFORM]=${BUILD_CONFIG[MAKE_ARGS_FOR_ANY_PLATFORM]:-$make_args_for_any_platform}\n  BUILD_CONFIG[USER_SUPPLIED_CONFIGURE_ARGS]=${BUILD_CONFIG[USER_SUPPLIED_CONFIGURE_ARGS]:-\"\"}\n}\n\n# Different platforms have different default make commands\n# shellcheck disable=SC2153\nsetMakeCommandForOS() {\n  local make_command_name\n  case \"$OS_KERNEL_NAME\" in\n  \"aix\")\n    make_command_name=\"gmake\"\n    ;;\n  \"sunos\")\n    make_command_name=\"gmake\"\n    ;;\n  esac\n\n  BUILD_CONFIG[MAKE_COMMAND_NAME]=${BUILD_CONFIG[MAKE_COMMAND_NAME]:-$make_command_name}\n}\n\nfunction configureMacFreeFont() {\n  if [ \"${BUILD_CONFIG[OPENJDK_CORE_VERSION]}\" == \"${JDK9_CORE_VERSION}\" ] || [ \"${BUILD_CONFIG[OPENJDK_CORE_VERSION]}\" == \"${JDK8_CORE_VERSION}\" ]; then\n    BUILD_CONFIG[COPY_MACOSX_FREE_FONT_LIB_FOR_JDK_FLAG]=\"true\"\n    BUILD_CONFIG[COPY_MACOSX_FREE_FONT_LIB_FOR_JRE_FLAG]=\"true\"\n  fi\n\n  echo \"[debug] COPY_MACOSX_FREE_FONT_LIB_FOR_JDK_FLAG=${BUILD_CONFIG[COPY_MACOSX_FREE_FONT_LIB_FOR_JDK_FLAG]}\"\n  echo \"[debug] COPY_MACOSX_FREE_FONT_LIB_FOR_JRE_FLAG=${BUILD_CONFIG[COPY_MACOSX_FREE_FONT_LIB_FOR_JRE_FLAG]}\"\n}\n\nfunction setMakeArgs() {\n  echo \"JDK Image folder name: ${BUILD_CONFIG[JDK_PATH]}\"\n  echo \"JRE Image folder name: ${BUILD_CONFIG[JRE_PATH]}\"\n\n  if [ \"${BUILD_CONFIG[OPENJDK_CORE_VERSION]}\" != \"${JDK8_CORE_VERSION}\" ]; then\n    case \"${BUILD_CONFIG[OS_KERNEL_NAME]}\" in\n    \"darwin\")\n      if [ \"${BUILD_CONFIG[CREATE_JRE_IMAGE]}\" == \"false\" ]; then\n        # Skip JRE\n        BUILD_CONFIG[MAKE_ARGS_FOR_ANY_PLATFORM]=${BUILD_CONFIG[MAKE_ARGS_FOR_ANY_PLATFORM]:-\"product-images\"}\n      else\n        BUILD_CONFIG[MAKE_ARGS_FOR_ANY_PLATFORM]=${BUILD_CONFIG[MAKE_ARGS_FOR_ANY_PLATFORM]:-\"product-images mac-legacy-jre-bundle\"}\n      fi\n      ;;\n    *)\n      if [ \"${BUILD_CONFIG[CREATE_JRE_IMAGE]}\" == \"false\" ]; then\n        # Skip JRE on JDK16+\n        BUILD_CONFIG[MAKE_ARGS_FOR_ANY_PLATFORM]=${BUILD_CONFIG[MAKE_ARGS_FOR_ANY_PLATFORM]:-\"product-images\"}\n      else\n        BUILD_CONFIG[MAKE_ARGS_FOR_ANY_PLATFORM]=${BUILD_CONFIG[MAKE_ARGS_FOR_ANY_PLATFORM]:-\"product-images legacy-jre-image\"}\n      fi\n      ;;\n    esac\n    # In order to build an exploded image, no other make targets can be used\n    if [ \"${BUILD_CONFIG[MAKE_EXPLODED]}\" == \"true\" ]; then\n      BUILD_CONFIG[MAKE_ARGS_FOR_ANY_PLATFORM]=\"\"\n    fi\n  else\n    BUILD_CONFIG[MAKE_ARGS_FOR_ANY_PLATFORM]=${BUILD_CONFIG[MAKE_ARGS_FOR_ANY_PLATFORM]:-\"images\"}\n  fi\n}\n\n################################################################################\n\nconfigure_build() {\n  configDefaults\n\n  # Parse the CL Args, see ${SCRIPT_DIR}/configureBuild.sh for details\n  parseCommandLineArgs \"$@\"\n\n  # Update the configuration with the arguments passed in, the platform etc\n  setVariablesForConfigure\n  setRepository\n  processArgumentsforSpecificArchitectures\n  setMakeCommandForOS\n\n  determineBuildProperties\n  sourceSignalHandler\n  doAnyBuildVariantOverrides\n  setWorkingDirectory\n  configureMacFreeFont\n  setMakeArgs\n  if [ \"${BUILD_CONFIG[CONTAINER_COMMAND]}\" == false ] ; then\n    setBootJdk\n  fi\n}\n"
        },
        {
          "name": "cyclonedx-lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-build.sh",
          "type": "blob",
          "size": 11.5849609375,
          "content": "#!/bin/bash\n# ********************************************************************************\n# Copyright (c) 2018 Contributors to the Eclipse Foundation\n#\n# See the NOTICE file(s) with this work for additional\n# information regarding copyright ownership.\n#\n# This program and the accompanying materials are made\n# available under the terms of the Apache Software License 2.0\n# which is available at https://www.apache.org/licenses/LICENSE-2.0.\n#\n# SPDX-License-Identifier: Apache-2.0\n# ********************************************************************************\n\n################################################################################\n#\n# This script deals with the configuration to build (Adoptium) OpenJDK in a docker\n# container.\n# It's sourced by the makejdk-any-platform.sh script.\n#\n################################################################################\n\n# The ${BUILD_CONFIG[CONTAINER_AS_ROOT]} can not be quoted. It is sudo (or similar) or nothing. \"\" is not an option.\n# Similarly for ${cpuset} and ${userns}.\n# shellcheck disable=SC2206\n# shellcheck disable=SC2046\n# shellcheck disable=SC2086\n\nset -eu\n\n# Create a data volume called ${BUILD_CONFIG[DOCKER_SOURCE_VOLUME_NAME]}.\n# This gets mounted at /openjdk/build inside the container and is persistent\n# between builds/tests unless -c is passed to this script, in which case it is\n# recreated using the source in the current ./openjdk directory on the host\n# machine (outside the container).\ncreatePersistentDockerDataVolume()\n{\n  set +e\n  ${BUILD_CONFIG[CONTAINER_AS_ROOT]} \"${BUILD_CONFIG[CONTAINER_COMMAND]}\" volume inspect \"${BUILD_CONFIG[DOCKER_SOURCE_VOLUME_NAME]}\" > /dev/null 2>&1\n  local data_volume_exists=$?\n  set -e\n\n  if [[ \"${BUILD_CONFIG[CLEAN_DOCKER_BUILD]}\" == \"true\" || \"$data_volume_exists\" != \"0\" ]]; then\n\n    # shellcheck disable=SC2154\n    echo \"Removing old volumes and containers\"\n    ${BUILD_CONFIG[CONTAINER_AS_ROOT]} \"${BUILD_CONFIG[CONTAINER_COMMAND]}\" rm -f $(${BUILD_CONFIG[CONTAINER_AS_ROOT]} \"${BUILD_CONFIG[CONTAINER_COMMAND]}\" ps -a --no-trunc -q -f volume=\"${BUILD_CONFIG[DOCKER_SOURCE_VOLUME_NAME]}\") || true\n    ${BUILD_CONFIG[CONTAINER_AS_ROOT]} \"${BUILD_CONFIG[CONTAINER_COMMAND]}\" volume rm -f \"${BUILD_CONFIG[DOCKER_SOURCE_VOLUME_NAME]}\" || true\n\n    # shellcheck disable=SC2154\n    echo \"Creating tmp container\"\n    if echo \"${BUILD_CONFIG[CONTAINER_COMMAND]}\" | grep docker ; then\n      ${BUILD_CONFIG[CONTAINER_AS_ROOT]} \"${BUILD_CONFIG[CONTAINER_COMMAND]}\" volume create --name \"${BUILD_CONFIG[DOCKER_SOURCE_VOLUME_NAME]}\"\n    else\n      ${BUILD_CONFIG[CONTAINER_AS_ROOT]} \"${BUILD_CONFIG[CONTAINER_COMMAND]}\" volume create \"${BUILD_CONFIG[DOCKER_SOURCE_VOLUME_NAME]}\"\n    fi\n  fi\n}\n\n# Build the docker container.\nbuildDockerContainer()\n{\n  echo \"Building docker container\"\n\n  local dockerFile=\"${BUILD_CONFIG[DOCKER_FILE_PATH]}/Dockerfile\"\n\n  if [[ \"${BUILD_CONFIG[BUILD_VARIANT]}\" != \"\" && -f \"${BUILD_CONFIG[DOCKER_FILE_PATH]}/Dockerfile-${BUILD_CONFIG[BUILD_VARIANT]}\" ]]; then\n    # TODO dont modify config in build\n    BUILD_CONFIG[CONTAINER_NAME]=\"${BUILD_CONFIG[CONTAINER_NAME]}-${BUILD_CONFIG[BUILD_VARIANT]}\"\n    echo \"Building DockerFile variant ${BUILD_CONFIG[BUILD_VARIANT]}\"\n    dockerFile=\"${BUILD_CONFIG[DOCKER_FILE_PATH]}/Dockerfile-${BUILD_CONFIG[BUILD_VARIANT]}\"\n  fi\n\n  writeConfigToFile\n\n  ${BUILD_CONFIG[CONTAINER_AS_ROOT]} \"${BUILD_CONFIG[CONTAINER_COMMAND]}\" build -t \"${BUILD_CONFIG[CONTAINER_NAME]}\" -f \"${dockerFile}\" . --build-arg \"OPENJDK_CORE_VERSION=${BUILD_CONFIG[OPENJDK_CORE_VERSION]}\" --build-arg \"HostUID=${UID}\"\n}\n\n# Execute the (Adoptium) OpenJDK build inside the Docker Container.\nbuildOpenJDKViaDocker()\n{\n  local hostDir\n  hostDir=\"$(pwd)\"\n  local pipelinesdir=\"${hostDir}\"/workspace/pipelines\n  local workspacedir=\"${hostDir}\"/workspace # we must ensure build user have correct permissions here\n  local targetdir=\"${hostDir}\"/workspace/target\n  local targetbuilddir=\"${hostDir}\"/workspace/build\n  local configdir=\"${hostDir}\"/workspace/config\n  local localsourcesdir=\n\n  if [ \"${BUILD_CONFIG[OPENJDK_LOCAL_SOURCE_ARCHIVE]}\" = \"true\" ] ; then\n    # OPENJDK_LOCAL_SOURCE_ARCHIVE_ABSPATH can be file, you can not mount file.\n    localsourcesdir=$(dirname \"${BUILD_CONFIG[OPENJDK_LOCAL_SOURCE_ARCHIVE_ABSPATH]}\")\n  fi\n\n  # TODO This could be extracted overridden by the user if we support more\n  # architectures going forwards.\n  local container_architecture\n  container_architecture=\"$(uname -m)/${BUILD_CONFIG[CONTAINER_IMAGE]//:*/}\"\n  local build_variant_flag=\"\"\n  BUILD_CONFIG[DOCKER_FILE_PATH]=\"docker/${BUILD_CONFIG[OPENJDK_CORE_VERSION]}/$container_architecture\"\n\n  if [ \"${BUILD_CONFIG[BUILD_VARIANT]}\" == \"openj9\" ]; then\n    build_variant_flag=\"--openj9\"\n  fi\n  docker/dockerfile-generator.sh --version \"${BUILD_CONFIG[OPENJDK_FEATURE_NUMBER]}\" --path \"${BUILD_CONFIG[DOCKER_FILE_PATH]}\" \"$build_variant_flag\" --base-image \"${BUILD_CONFIG[CONTAINER_IMAGE]}\" \\\n     --dirs \"${workspacedir} ${targetdir} ${targetbuilddir} ${configdir} ${localsourcesdir}\" --command \"${BUILD_CONFIG[CONTAINER_AS_ROOT]} ${BUILD_CONFIG[CONTAINER_COMMAND]}\"\n\n  # shellcheck disable=SC1090,SC1091\n  source \"${BUILD_CONFIG[DOCKER_FILE_PATH]}/dockerConfiguration.sh\"\n\n    local openjdk_core_version=${BUILD_CONFIG[OPENJDK_CORE_VERSION]}\n    # test-image, debug-image and static-libs-image targets are optional - build scripts check whether the directories exist\n    local openjdk_test_image_path=\"test\"\n    local openjdk_debug_image_path=\"debug-image\"\n    local jdk_directory=\"\"\n    local jre_directory=\"\"\n    # JDK 22+ uses static-libs-graal-image target, using static-libs-graal\n    # folder.\n    if [ \"${BUILD_CONFIG[OPENJDK_FEATURE_NUMBER]}\" -ge 22 ]; then\n      local static_libs_dir=\"static-libs-graal\"\n    else\n      local static_libs_dir=\"static-libs\"\n    fi\n\n    if [ \"$openjdk_core_version\" == \"${JDK8_CORE_VERSION}\" ]; then\n      case \"${BUILD_CONFIG[OS_KERNEL_NAME]}\" in\n      \"darwin\")\n        jdk_directory=\"j2sdk-bundle/jdk*.jdk\"\n        jre_directory=\"j2re-bundle/jre*.jre\"\n      ;;\n      *)\n        jdk_directory=\"j2sdk-image\"\n        jre_directory=\"j2re-image\"\n      ;;\n      esac\n    else\n      case \"${BUILD_CONFIG[OS_KERNEL_NAME]}\" in\n      \"darwin\")\n        jdk_directory=\"jdk-bundle/jdk-*.jdk\"\n        jre_directory=\"jre-bundle/jre-*.jre\"\n      ;;\n      *)\n        jdk_directory=\"jdk\"\n        jre_directory=\"jre\"\n      ;;\n      esac\n    fi\n\n    BUILD_CONFIG[JDK_PATH]=$jdk_directory\n    BUILD_CONFIG[JRE_PATH]=$jre_directory\n    BUILD_CONFIG[TEST_IMAGE_PATH]=$openjdk_test_image_path\n    BUILD_CONFIG[DEBUG_IMAGE_PATH]=$openjdk_debug_image_path\n    BUILD_CONFIG[STATIC_LIBS_IMAGE_PATH]=$static_libs_dir\n\n  if [ -z \"$(command -v \"${BUILD_CONFIG[CONTAINER_COMMAND]}\")\" ]; then\n    # shellcheck disable=SC2154\n    echo \"Error, please install docker and ensure that it is in your path and running!\"\n    exit\n  fi\n\n  echo \"Using Docker to build the JDK\"\n\n  createPersistentDockerDataVolume\n\n  # If keep is true then use the existing container (or build a new one if we\n  # can't find it).\n  if [[ \"${BUILD_CONFIG[REUSE_CONTAINER]}\" == \"true\" ]] ; then\n     # shellcheck disable=SC2086\n     # If we can't find the previous Docker container then build a new one.\n     if [ \"$(${BUILD_CONFIG[CONTAINER_AS_ROOT]} ${BUILD_CONFIG[CONTAINER_COMMAND]} ps -a | grep -c \\\"${BUILD_CONFIG[CONTAINER_NAME]}\\\")\" == 0 ]; then\n         echo \"No docker container for reuse was found, so creating '${BUILD_CONFIG[CONTAINER_NAME]}'\"\n         buildDockerContainer\n     fi\n  else\n     # shellcheck disable=SC2154\n     echo \"Since you specified --ignore-container, we are removing the existing container (if it exists) and building you a new one{$good}\"\n     # Find the previous Docker container and remove it (if it exists).\n     ${BUILD_CONFIG[CONTAINER_AS_ROOT]} \"${BUILD_CONFIG[CONTAINER_COMMAND]}\" ps -a | awk '{ print $1,$2 }' | grep \"${BUILD_CONFIG[CONTAINER_NAME]}\" | awk '{print $1 }' | xargs -I {} ${BUILD_CONFIG[CONTAINER_AS_ROOT]} \"${BUILD_CONFIG[CONTAINER_COMMAND]}\" rm -f {}\n\n     # Build a new container.\n     buildDockerContainer\n  fi\n\n  # Show the user all of the config before we build.\n  displayParams\n\n  echo \"Target binary directory on host machine: ${hostDir}/target\"\n  mkdir -p \"${hostDir}/workspace/target\"\n\n  local cpuSet\n  cpuSet=\"0-$((BUILD_CONFIG[NUM_PROCESSORS] - 1))\"\n\n  local gitSshAccess=()\n  if [[ \"${BUILD_CONFIG[USE_SSH]}\" == \"true\" ]] ; then\n     gitSshAccess=(-v \"${HOME}/.ssh:/home/build/.ssh\" -v \"${SSH_AUTH_SOCK}:/build-ssh-agent\" -e \"SSH_AUTH_SOCK=/build-ssh-agent\")\n  fi\n\n  local dockerMode=()\n  local dockerEntrypoint=(--entrypoint /openjdk/sbin/build.sh \"${BUILD_CONFIG[CONTAINER_NAME]}\")\n  if [[ \"${BUILD_CONFIG[DEBUG_DOCKER]}\" == \"true\" ]] ; then\n     dockerMode=(-t -i)\n     dockerEntrypoint=(--entrypoint \"/bin/sh\" \"${BUILD_CONFIG[CONTAINER_NAME]}\" -c \"/bin/bash\")\n  fi\n\n  # Command without gitSshAccess or dockerMode arrays.\n  if [ -e \"${hostDir}\"/pipelines ] ; then\n    local pipelinesdir=\"${hostDir}\"/pipelines\n  else\n    mkdir -p \"${pipelinesdir}\"\n  fi\n  if echo \"${BUILD_CONFIG[CONTAINER_COMMAND]}\" | grep docker ; then\n    local cpuset=\"--cpuset-cpus=${cpuSet}\"\n  else\n    local cpuset=\"\"\n  fi\n  if echo \"${BUILD_CONFIG[CONTAINER_COMMAND]}\" | grep podman ; then\n    local userns=\"--userns=keep-id\"\n  else\n    local userns=\"\"\n  fi\n  local mountflag=Z #rw? Maybe this should be bound to root/rootless content of BUILD_CONFIG[CONTAINER_AS_ROOT] rather then just podman/docker in USE_DOCKER?\n  mkdir -p \"${hostDir}\"/workspace/build  # Shouldn't be already there?\n  local localsourcesdirmount=\"\"\n  if [ -n \"${localsourcesdir}\" ] ; then\n    localsourcesdirmount=\"-v ${localsourcesdir}:${localsourcesdir}:${mountflag}\" # read only? Is copied anyway.\n  fi\n  echo \"If you get permissions denied on ${targetdir} or ${pipelinesdir} try to turn off selinux\"\n  local commandString=(\n         ${cpuset}\n         ${userns}\n         ${localsourcesdirmount}\n         -v \"${BUILD_CONFIG[DOCKER_SOURCE_VOLUME_NAME]}:/openjdk/build\"\n         -v \"${targetdir}\":/\"${BUILD_CONFIG[WORKSPACE_DIR]}\"/\"${BUILD_CONFIG[TARGET_DIR]}\":\"${mountflag}\"\n         -v \"${pipelinesdir}\":/openjdk/pipelines:\"${mountflag}\"\n         -v \"${configdir}\":/\"${BUILD_CONFIG[WORKSPACE_DIR]}\"/\"config\":\"${mountflag}\"\n         -e \"DEBUG_DOCKER_FLAG=${BUILD_CONFIG[DEBUG_DOCKER]}\"\n         -e \"BUILD_VARIANT=${BUILD_CONFIG[BUILD_VARIANT]}\"\n          \"${dockerEntrypoint[@]:+${dockerEntrypoint[@]}}\")\n\n  # If build specifies --ssh, add array to the command string.\n  if [[ \"${BUILD_CONFIG[USE_SSH]}\" == \"true\" ]] ; then\n        commandString=(\"${gitSshAccess[@]:+${gitSshAccess[@]}}\" \"${commandString[@]}\")\n  fi\n\n  # If build specifies --debug-docker, add array to the command string.\n  if [[ \"${BUILD_CONFIG[DEBUG_DOCKER]}\" == \"true\" ]] ; then\n        commandString=(\"${dockerMode[@]:+${dockerMode[@]}}\" \"${commandString[@]}\")\n        echo \"DEBUG DOCKER MODE. To build jdk run /openjdk/sbin/build.sh\"\n  fi\n\n  # Run the command string in Docker.\n  ${BUILD_CONFIG[CONTAINER_AS_ROOT]} \"${BUILD_CONFIG[CONTAINER_COMMAND]}\" run --name \"${BUILD_CONFIG[OPENJDK_CORE_VERSION]}-${BUILD_CONFIG[BUILD_VARIANT]}\" \"${commandString[@]}\"\n\n  # Tell user where the resulting binary can be found on the host system.\n  echo \"The finished image can be found in ${targetdir} on the host system\"\n\n  # If we didn't specify to keep the container then remove it.\n  if [[ \"${BUILD_CONFIG[KEEP_CONTAINER]}\" == \"false\" ]] ; then\n      echo \"Removing container ${BUILD_CONFIG[OPENJDK_CORE_VERSION]}-${BUILD_CONFIG[BUILD_VARIANT]}\"\n      ${BUILD_CONFIG[CONTAINER_AS_ROOT]} \"${BUILD_CONFIG[CONTAINER_COMMAND]}\" ps -a | awk '{ print $1,$(NF) }' | grep \"${BUILD_CONFIG[OPENJDK_CORE_VERSION]}-${BUILD_CONFIG[BUILD_VARIANT]}\" | awk '{print $1 }' | xargs -I {} ${BUILD_CONFIG[CONTAINER_AS_ROOT]} ${BUILD_CONFIG[CONTAINER_COMMAND]} rm {}\n  fi\n}\n"
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "entitlements.plist",
          "type": "blob",
          "size": 1.1083984375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!--\n  ~ ********************************************************************************\n  ~ Copyright (c) 2019 Contributors to the Eclipse Foundation\n  ~\n  ~ See the NOTICE file(s) with this work for additional\n  ~ information regarding copyright ownership.\n  ~\n  ~ This program and the accompanying materials are made\n  ~ available under the terms of the Apache Software License 2.0\n  ~ which is available at https://www.apache.org/licenses/LICENSE-2.0.\n  ~\n  ~ SPDX-License-Identifier: Apache-2.0\n  ~ ********************************************************************************\n-->\n\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>com.apple.security.cs.allow-jit</key>\n    <true/>\n    <key>com.apple.security.cs.allow-unsigned-executable-memory</key>\n    <true/>\n    <key>com.apple.security.cs.disable-library-validation</key>\n    <true/>\n    <key>com.apple.security.cs.allow-dyld-environment-variables</key>\n    <true/>\n    <key>com.apple.security.cs.debugger</key>\n    <true/>\n</dict>\n</plist>"
        },
        {
          "name": "makejdk-any-platform.1",
          "type": "blob",
          "size": 9.3603515625,
          "content": ".\\\" Manpage for makejdk-any-platform.sh\n.TH \"2.0.0\" \"Apache 2\"\n.SH NAME\nmakejdk-any-platform.sh\n.SH SYNOPSIS\n\"./makejdk-any-platform.sh [options] version\"\n.SH DESCRIPTION\nThis script is the entry point for building (Adoptium) OpenJDK binaries. Building\nnatively or in a docker container are both supported. This script (and its\nsupporting scripts) have defaults, but you can override these as needed.\n\nmakejdk-any-platform.sh and it's supporting scripts will auto detect the\nplatform and architecture it is running on and configures the OpenJDK build\naccordingly.  The supporting scripts will also download and locally install any\nrequired dependencies for the OpenJDK build, e.g. The ALSA sound and Freetype\nfont libraries.\n\nMany of the configuration options are passed through to the \\fBconfigure\\fR and\n\\fBmake\\fR commands that OpenJDK uses to build binaries.  Please see the\nappropriate \\fIREADME-builds.html\\fR file for the OpenJDK source repository\nthat you are building for further details.\n\n\\fBExample:\\fR The simplest use case to run is:\n\n\"./makejdk-any-platform.sh -D fedora:latest jdk8u\"\n\nThis will start a Docker container and build you the latest Java 8 Temurin\nbinary from the source at https://github.com/adoptium/openjdk-jdk8u\nNote that the main argument, in this case jdk8, is compared and enforced\nagainst an enumeration - jdk8, jdk8u, ... jdk21, jdk21u, ...jdk. Nothing else.\nYou can workaround this by \\-\\-version switch.\n\n\"./makejdk-any-platform.sh -l my/dir/or/archive.tar.gz jdk22u\"\n\nThis will start a build of Java 22 from your local sources\n\nPlease visit https://www.adoptium.net for further support\n\n.SH VERSIONS\n.TP\n.BR jdk8u\nBuild Java 8, defaults to https://github.com/adoptium/jdk8u\n.TP\n.BR jdk11u\nBuild Java 11, defaults to https://github.com/adoptium/jdk11u\n.TP\n.BR jdk16u\nBuild Java 16, defaults to https://github.com/adoptium/jdk16u\n.TP\n.BR jdk\nBuild JDK (tip), defaults to https://github.com/adoptium/jdk\n\n.SH OPTIONS\n.TP\n.BR \\-A \", \" \\-\\-skip-alsa\nSkip downloading of alsa automatically.\nIf you do so, the underlying configure will detect system lib and headers.\nIf you wish to point to some custom build/install pass it via \\fI\\-C, \\-\\-configure-args <args>\\fR\nPresence of \\-\\-with-alsa in  \\-\\-configure-args will also not include freshly installed alsa to build.\n.TP\n.BR \\-b \", \" \\-\\-branch \" \" \\fI<branch>\\fR\nspecify a custom branch to build from, e.g. dev.\nFor reference, Adoptium GitHub source repos default to the \\fI<dev>\\fR\nbranch which may contain a very small diff set to the \\fI<master>\\fR branch\n(which is a clone from the OpenJDK mercurial forest).\n.TP\n.BR \\-B \", \" \\-\\-build-number \" \" \\fI<build_number>\\fR\nspecify the OpenJDK build number to build from, e.g. b12.\nFor reference, OpenJDK version numbers look like 1.8.0_162-b12 (for Java 8) or\n9.0.4+11 (for Java 9+) with the build number being the suffix at the end.\n.TP\n.BR \\-\\-build-variant \" \" \\fI<variant_name>\\fR\nspecify a OpenJDK build variant, e.g. openj9 or temurin.\nFor reference, the default variant is \\fBhotspot\\fR and does not need to be specified.\n.TP\n.BR \\-c \", \" \\-\\-clean-docker-build\nremoves the existing docker container and persistent volume before starting\na new docker based build.\n.TP\n.BR \\-C \", \" \\-\\-configure-args \" \" \\fI<args>\\fR\nspecify any custom user configuration arguments.\n.TP\n.BR \\-\\-clean-git-repo\nclean out any 'bad' local git repo you already have.\n.TP\n.BR \\-\\-create-jre-image\ncreate the legacy JRE image in addition to the JDK image.\n.TP\n.BR \\-\\-create-sbom\ncreate the CycloneDX System Bill of Materials (JSON artifact).\n.TP\n.BR \\-\\-create-source-archive\ncreate an archive of the sources which got used to build OpenJDK\n.TP\n.BR \\-d \", \" \\-\\-destination \" \" \\fI<path>\\fR\nspecify the location for the built binary, e.g. /path/.\nThis is typically used in conjunction with \\fB<-T>\\fR to create a custom path\n/ file name for the resulting binary.\n.TP\n.BR \\-D \", \" \\-\\-docker \", \" \\-\\-podman  \" \" \\fI[base_to_use]\\fR\nbuild OpenJDK in a docker/podman container. -D will autodetect, using podman if found, docker otherwise.\nYou can optionally set base image to use. Default is ubuntu:18.04. Dnf/apt is determined by hardcoded list.\nWhen podman is used, there is bug requiring \\fI--custom-cacerts\\fR to be used under some circumstances.\nIt is known issue: https://github.com/adoptium/temurin-build/issues/3862\n.TP\n.BR \\-\\-debug-docker\ndebug OpenJDK build script in a docker container. Only valid if \\fB-D\\fR is selected.\n.TP\n.BR \\-\\-disable-adopt-branch-safety\ndisable the default check for correct tags and README.JAVASE in case of \\fBtemurin\\fR as --build-variant.\nThis is mandatory, when you are building \\fBtemurin\\fR variant from archive or directory without repository metadata.\n.TP\n.BR \\-\\-disable-shallow-git-clone\ndisable the default \\fB--depth=1\\fR shallow cloning of git repo(s).\n.TP\n.BR \\-f \", \" \\-\\-freetype-dir \" \" \\fI<path>\\fR\nspecify the location of an existing FreeType library.\nThis is typically used in conjunction with \\fB<-F>\\fR.\n.TP\n.BR \\-\\-freetype-build-param \" \" \\fI<parameter>\\fR\nspecify any special freetype build parameters (required for some OS's).\n.TP\n.BR \\-\\-freetype-version \" \" \\fI<version>\\fR\nspecify the version of freetype you are building.\n.TP\n.BR \\-F \", \" \\-\\-skip-freetype\nskip building Freetype automatically.\nThis is typically used in conjunction with \\fB<-f>\\fR.\n.TP\n.BR \\-h \", \" \\-\\-help\nprint this help.\n.TP\n.BR \\-i \", \" \\-\\-ignore-container\nignore the existing docker container if you have one already.\n.TP\n.BR \\-J \", \" \\-\\-jdk-boot-dir \" \" \\fI<jdk_boot_dir>\\fR \"; \" \\-J \", \" \\-\\-jdk-boot-dir \" \" \\fIdownload\\fR\nspecify the JDK boot dir.\nFor reference, OpenJDK needs the previous version of a JDK in order to build\nitself. You should select the path to a JDK install that is N-1 versions below\nthe one you are trying to build. On some platforms, you can use magic keyword\nof `download`, and boot jdk will be downloaded for you in best attempt. It will\nbe reused as long as you keep workspace or clean libs.\n.TP\n.BR \\-k \", \" \\-\\-keep\nif using docker, keep the container after the build.\n.TP\n.BR  \\-l \", \" \\-\\-openjdk\\-source\\-location \" \" \\fI<dir/archive>\\fR\nIf set, must point to directory or archive with valid OpenJDK source code.\nThis local source code will be used instead of cloning from a git repository and without any git tag or git reset.\nYou still have to set the version argument though, and it is recommended that you add \\-\\-tag too so that the top level directory names in the output, as well as the details in \"java -version\" are created correctly.\n.TP\n.BR \\-\\-make-args \" \" \\fI<args>\\fR\nspecify any custom user make arguments.\n.TP\n.BR \\-\\-no\\-adopt\\-patches\nThis indicates to the build script that the build does not have Temurin's additional patches applied.\n.TP\n.BR \\-p \", \" \\-\\-processors \" \" \\fI<args>\\fR\nspecify the number of processors to use for the docker build.\n.TP\n.BR \\-r \", \" \\-\\-repository \" \" \\fI<repository>\\fR\nspecify the repository to clone OpenJDK source from,\ne.g. https://github.com/karianna/openjdk-jdk8u.\n.TP\n.BR \\-s \", \" \\-\\-source \" \" \\fI<path>\\fR\nspecify the location to clone the OpenJDK source (and dependencies) to.\n.TP\n.BR \\-S \", \" \\-\\-ssh\nuse ssh when cloning git.\nIn case of docker build add github.com to ~/.ssh/known_hosts (e.g.: ssh github.com)\nif your ssh key has a passphrase, add it to ssh-agent (e.g.: ssh-add ~/.ssh/id_rsa)\n.TP\n.BR \\-\\-sign \\fI<path>\\fR\nspecify the location for the certificate.  For windows this is the p12\ncertificate to sign the DLL.\n.TP\n.BR \\-\\-sudo\nrun the docker container as root.\n.TP\n.BR \\-t \", \" \\-\\-tag \" \" \\fI<tag>\\fR\nspecify the repository tag that you want to build OpenJDK from.\n.TP\n.BR \\-\\-tmp-space-build\nuse a temporary workspace if the main one is unavailable.\n.TP\n.BR \\-T \", \" \\-\\-target-file-name \" \" \\fI<file_name>\\fR\nspecify the final name of the OpenJDK binary.\nThis is typically used in conjunction with \\fB<-D>\\fR to create a custom file\nname for the resulting binary.\n.TP\n.BR \\-u \", \" \\-\\-update-version \" \" \\fI<update_version>\\fR\nspecify the update version to build OpenJDK from, e.g. 162.\nFor reference, OpenJDK version numbers look like 1.8.0_162-b12 (for Java 8) or\n9.0.4+11 (for Java 9+) with the update number being the number after the '_'\n(162) or the 3rd position in the semVer version string (4).\nThis is typically used in conjunction with \\fB<-b>\\fR.\n.TP\n.BR \\-\\-use-jep319-certs\nUse certs defined in JEP319 in Java 8/9. Deprecated, has no effect.\n.TP\n.BR \\-\\-custom-cacerts \" \" \\fI<true|false>\\fR\nIf true (default), a custom cacerts file will be generated based on Mozilla's\nlist of CA certificates (see folder security/). If false, the file shipped by\nOpenJDK will be used. \n.TP\n.BR \\-\\-vendor \" \" \\fI<vendor>\\fR\nspecify the vendor name\n.TP\n.BR \\-\\-vendor-url \" \" \\fI<vendor url>\\fR\nspecify the vendor url\n.TP\n.BR \\-\\-vendor-bug-url \" \" \\fI<vendor bug url>\\fR\nspecify the vendor bug url\n.TP\n.BR \\-\\-vendor-vm-bug-url \" \" \\fI<vendor vm bug url>\\fR\nspecify the vendor vm bug url\n.TP\n.BR \\-v \", \" \\-\\-version \" \" \\fI<version>\\fR\nspecify the OpenJDK version to build e.g. jdk8u.  Left for backwards compatibility.\nUseful, when cloning a repo with a non-uniform name, e.g., shenandoah-jdk8u (main version argument),\nto tell the build that you are effectively building a jdk8u binary.\n.TP\n.BR \\-V \", \" \\-\\-jvm-variant \" \" \\fI<jvm_variant>\\fR\nspecify the JVM variant (server or client), defaults to server.\n\n.SH EXAMPLE USAGE\n\nSome common example usages:\n\n\"./makejdk-any-platform --sudo --docker jdk8u\"\n\n\"./makejdk-any-platform -s /home/openjdk10/src -d /home/openjdk/target -T MyOpenJDK10.tar.gz jdk10\"\n"
        },
        {
          "name": "makejdk-any-platform.sh",
          "type": "blob",
          "size": 2.3544921875,
          "content": "#!/bin/bash\n# shellcheck disable=SC1091\n# ********************************************************************************\n# Copyright (c) 2017 Contributors to the Eclipse Foundation\n#\n# See the NOTICE file(s) with this work for additional\n# information regarding copyright ownership.\n#\n# This program and the accompanying materials are made\n# available under the terms of the Apache Software License 2.0\n# which is available at https://www.apache.org/licenses/LICENSE-2.0.\n#\n# SPDX-License-Identifier: Apache-2.0\n# ********************************************************************************\n\n################################################################################\n#\n# Entry point to build (Adoptium) OpenJDK binaries for any platform.\n#\n# 1. Source scripts to support configuration, docker builds and native builds.\n# 2. Parse the Command Line Args\n# 3. Set a host of configuration options based on args, platform etc\n# 4. Display and then persist those configuration options\n# 5. Build the binary in Docker or natively\n#\n################################################################################\n\nset -eu\n\n# i.e. Where we are\nSCRIPT_DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\"\n\n# Pull in configuration and build support\n# shellcheck source=sbin/common/config_init.sh\nsource \"${SCRIPT_DIR}/sbin/common/config_init.sh\"\n\n# shellcheck source=docker-build.sh\nsource \"${SCRIPT_DIR}/docker-build.sh\"\n\n# shellcheck source=native-build.sh\nsource \"${SCRIPT_DIR}/native-build.sh\"\n\n# shellcheck source=configureBuild.sh\nsource \"${SCRIPT_DIR}/configureBuild.sh\"\n\necho \"Starting $0 to configure, build (Adoptium)OpenJDK binary\"\n\n# Configure the build, display the parameters and write the config to disk\n# see ${SCRIPT_DIR}/sbin/common/config_init.sh for details\nconfigure_build \"$@\"\nwriteConfigToFile\n\n# Store params to this script as \"buildinfo\"\n# Ensure arguments containing \"spaces\" are quoted\nmakeJdkArgs=\"\"\nfor arg in \"$@\"; do\n  # Quote the argument if it contains spaces\n  if [[ \"${arg}\" =~ .*\" \".* ]]; then\n    makeJdkArgs=\"${makeJdkArgs} \\\"${arg}\\\"\"\n  else\n    makeJdkArgs=\"${makeJdkArgs} ${arg}\"\n  fi\ndone\necho \"${makeJdkArgs}\" > ./workspace/config/makejdk-any-platform.args\n\n# Let's build and test the (Adoptium) OpenJDK binary in Docker or natively\nif [ ! \"${BUILD_CONFIG[CONTAINER_COMMAND]}\" == \"false\" ] ; then\n  buildOpenJDKViaDocker\nelse\n  buildOpenJDKInNativeEnvironment\nfi\n"
        },
        {
          "name": "native-build.sh",
          "type": "blob",
          "size": 1.03515625,
          "content": "#!/bin/bash\n# ********************************************************************************\n# Copyright (c) 2018 Contributors to the Eclipse Foundation\n#\n# See the NOTICE file(s) with this work for additional\n# information regarding copyright ownership.\n#\n# This program and the accompanying materials are made\n# available under the terms of the Apache Software License 2.0\n# which is available at https://www.apache.org/licenses/LICENSE-2.0.\n#\n# SPDX-License-Identifier: Apache-2.0\n# ********************************************************************************\n\n################################################################################\n#\n# This script deals with the configuration to build (Adoptium) OpenJDK natively.\n# It's sourced by the makejdk-any-platform.sh script.\n#\n################################################################################\n\nset -eu\n\n# i.e. Where we are\nSCRIPT_DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\"\n\nbuildOpenJDKInNativeEnvironment()\n{\n    displayParams\n    bash \"${SCRIPT_DIR}\"/sbin/build.sh\n}\n"
        },
        {
          "name": "sbin",
          "type": "tree",
          "content": null
        },
        {
          "name": "security",
          "type": "tree",
          "content": null
        },
        {
          "name": "serverTimestamp.properties",
          "type": "blob",
          "size": 0.3232421875,
          "content": "comodaca=http://timestamp.comodoca.com/authenticode\nglobalsign=http://timestamp.globalsign.com/scripts/timstamp.dll\nisectigo=http://timestamp.sectigo.com\ncomodocarfc3161=http://timestamp.comodoca.com/rfc3161\nstartssl=http://tsa.startssl.com/rfc3161\nstarfieldtech=http://tsa.starfieldtech.com\ndigicert=http://timestamp.digicert.com\n"
        },
        {
          "name": "sign.sh",
          "type": "blob",
          "size": 11.5703125,
          "content": "#!/bin/bash\n# shellcheck disable=SC1091\n# ********************************************************************************\n# Copyright (c) 2018 Contributors to the Eclipse Foundation\n#\n# See the NOTICE file(s) with this work for additional\n# information regarding copyright ownership.\n#\n# This program and the accompanying materials are made\n# available under the terms of the Apache Software License 2.0\n# which is available at https://www.apache.org/licenses/LICENSE-2.0.\n#\n# SPDX-License-Identifier: Apache-2.0\n# ********************************************************************************\n\nset -eu\n\nSCRIPT_DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\"\n\n# shellcheck source=sbin/common/config_init.sh\nsource \"$SCRIPT_DIR/sbin/common/config_init.sh\"\n\n# shellcheck source=sbin/common/constants.sh\nsource \"$SCRIPT_DIR/sbin/common/constants.sh\"\n\n# shellcheck source=sbin/common/common.sh\nsource \"$SCRIPT_DIR/sbin/common/common.sh\"\n\nARCHIVE=\"\"\nSIGNING_CERTIFICATE=\"\"\nWORKSPACE=$(pwd)\nTMP_DIR_NAME=\"tmp\"\nTMP_DIR=\"${WORKSPACE}/${TMP_DIR_NAME}/\"\n\n# List of valid timestamp servers:\n# http://timestamp.comodoca.com/authenticode -> OK 02/08/2030 -> Sectigo RSA Time Stamping Signer #1\n# http://timestamp.sectigo.com -> OK 02/08/2030 -> Sectigo RSA Time Stamping Signer #1 .. same as previous but with another url\n# http://timestamp.comodoca.com/rfc3161 -> OK 02/08/2030 -> Sectigo RSA Time Stamping Signer #1 .. same as previous but with another url\n# http://tsa.startssl.com/rfc3161 -> OK 15/08/2028 -> WoSign Time Stamping Signer ( buyed by WoTrus )\n# http://tsa.starfieldtech.com -> OK 17/09/2027 -> Starfield Timestamp Authority - G2\n# http://timestamp.globalsign.com/scripts/timstamp.dll -> OK 24/06/2027 -> GlobalSign TSA for MS Authenticode - G2\n# http://timestamp.digicert.com -> OK 22/10/2024 -> DigiCert Timestamp Responder\nTIMESTAMP_SERVER_CONFIG=\"./serverTimestamp.properties\"\n\ncheckSignConfiguration() {\n  if [[ \"${OPERATING_SYSTEM}\" == \"windows\" ]] ; then\n    if [ ! -f \"${SIGNING_CERTIFICATE}\" ]\n    then\n      echo \"Could not find certificate at: ${SIGNING_CERTIFICATE}\"\n      exit 1\n    fi\n\n    if [ -z \"${SIGN_PASSWORD+x}\" ]\n    then\n      echo \"If signing is enabled on window you must set SIGN_PASSWORD\"\n      exit 1\n    fi\n  fi\n}\n\n# Sign the built binary\nsignRelease()\n{\n  TIMESTAMPSERVERS=$(cut -d= -f2 < \"$WORKSPACE/$TIMESTAMP_SERVER_CONFIG\" )\n\n  case \"$OPERATING_SYSTEM\" in\n    \"windows\")\n      echo \"Signing Windows release\"\n      signToolPath=${signToolPath:-\"/cygdrive/c/Program Files (x86)/Windows Kits/10/bin/10.0.17763.0/x64/signtool.exe\"}\n\n      # Sign .exe files\n      FILES=$(find . -type f -name '*.exe' -o -name '*.dll')\n      if [ \"$FILES\" == \"\" ]; then\n        echo \"No files to sign\"\n      else\n        for f in $FILES\n        do\n          echo \"Signing ${f}\"\n          if [ \"$SIGN_TOOL\" = \"eclipse\" ]; then\n           if [ \"${VERSION}\" = \"8\" ]; then\n            dir=$(dirname \"$f\")\n            file=$(basename \"$f\")\n            # Check if file is a Microsoft supplied file that is already signed\n            if [[ \"$file\" =~ api-ms-win.* ]] || [[ \"$file\" =~ API-MS-Win.* ]] || [[ \"$file\" =~ msvcp.* ]] || [[ \"$file\" =~ ucrtbase.* ]] || [[ \"$file\" =~ vcruntime.* ]]; then\n              echo \"Skipping Microsoft file $file\"\n            else\n              echo \"Signing $f using Eclipse Foundation codesign service\"\n              mv \"$f\" \"${dir}/unsigned_${file}\"\n              if ! curl --fail --silent --show-error -o \"$f\" -F file=\"@${dir}/unsigned_${file}\" https://cbi.eclipse.org/authenticode/sign; then\n                echo \"curl command failed, sign of $f failed\"\n\n                # Retry up to 20 times\n                max_iterations=20\n                iteration=1\n                success=false \n                echo \"Code Not Signed For File $f\"\n                while [ $iteration -le $max_iterations ] && [ $success = false ]; do\n                  echo $iteration Of $max_iterations\n                  sleep 1\n                  if ! curl --fail --silent --show-error -o \"$f\" -F file=\"@${dir}/unsigned_${file}\" https://cbi.eclipse.org/authenticode/sign; then\n                    echo \"curl command failed, $f Failed Signing On Attempt $iteration\"\n                    success=false\n                    iteration=$((iteration+1))\n                    if [ $iteration -gt $max_iterations ]\n                    then\n                      echo \"Errors Encountered During Signing\"\n                      exit 1\n                    fi\n                  else\n                    echo \"$f Signed OK On Attempt $iteration\"\n                    success=true\n                  fi\n                done\n              fi\n              chmod --reference=\"${dir}/unsigned_${file}\" \"$f\"\n              rm -rf \"${dir}/unsigned_${file}\"\n            fi\n           else\n            echo \"Eclipse signing for JDK version ${VERSION} does not externally sign Windows executables post-build\"\n           fi\n          else\n            STAMPED=false\n            for SERVER in $TIMESTAMPSERVERS; do\n              if [ \"$STAMPED\" = \"false\" ]; then\n                echo \"Signing $f using $SERVER\"\n                if [ \"$SIGN_TOOL\" = \"ucl\" ]; then\n                  ucl sign-code --file \"$f\" -n WindowsSHA -t \"${SERVER}\" --hash SHA256\n                else\n                  \"$signToolPath\" sign /f \"${SIGNING_CERTIFICATE}\" /p \"$SIGN_PASSWORD\" /fd SHA256 /t \"${SERVER}\" \"$f\"\n                fi\n                RC=$?\n                if [ $RC -eq 0 ]; then\n                  STAMPED=true\n                else\n                  echo \"RETRYWARNING: Failed to sign ${f} at $(date +%T): Possible timestamp server error at ${SERVER} - Trying new server in 5 seconds\"\n                  sleep 2\n                fi\n              fi\n            done\n            if [ \"$STAMPED\" = \"false\" ]; then\n              echo \"Failed to sign ${f} using any time server - aborting\"\n              exit 1\n            fi\n          fi\n        done\n      fi\n    ;;\n\n    \"mac\"*)\n      # TODO: Remove this completly once https://github.com/adoptium/openjdk-jdk11u/commit/b3250adefed0c1778f38a7e221109ae12e7c421e has been backported to JDK8u\n      echo \"Signing OSX release\"\n      ENTITLEMENTS=\"$WORKSPACE/entitlements.plist\"\n      MACSIGNSTRING=\"Apple Certification Authority\"\n\n      # Sign all files with the executable permission bit set.\n\n      if [ \"$SIGN_TOOL\" = \"eclipse\" ] && [ \"${VERSION}\" != \"8\" ]; then\n        # On MacOSX, libjli.dylib is copied in two places. Once in Contents/home/lib/libjli.dylib and once in\n        # Contents/MacOS/libjli.dylib. The latter is the bundle executable entry-point and hasn't been signed by\n        # by the build in contrast to content in Contents/home. Therefore,  Eclipse jdk-11+ post-build signing should\n        # only sign the libjli.dylib bundle executable in Contents/MacOS, as there rest are already internally signed\n        # in the build\n        FILES=$(find . -name 'libjli.dylib' | grep 'Contents/MacOS' || true)\n      else\n        FILES=$(find \"${TMP_DIR}\" -perm +111 -type f -not -name '.*' -o -name '*.dylib' || find \"${TMP_DIR}\" -perm /111 -type f -not -name '.*' -o -name '*.dylib')\n      fi\n      if [ \"$FILES\" == \"\" ]; then\n        echo \"No files to sign\"\n      elif [ \"$SIGN_TOOL\" = \"eclipse\" ]; then\n        for f in $FILES\n        do\n          echo \"Signing $f using Eclipse Foundation codesign service\"\n          dir=$(dirname \"$f\")\n          file=$(basename \"$f\")\n          mv \"$f\" \"${dir}/unsigned_${file}\"\n          if ! curl --fail --silent --show-error -o \"$f\" -F file=\"@${dir}/unsigned_${file}\" -F entitlements=\"@$ENTITLEMENTS\" https://cbi.eclipse.org/macos/codesign/sign; then\n              echo \"curl command failed, sign of $f failed\"\n              TESTMACSIGN=0\n          else\n              echo File = \"$f\"\n              TESTMACSIGN=$(grep -ic \"$MACSIGNSTRING\" \"$f\")\n          fi\n          echo Sign Result = \"$TESTMACSIGN\"\n          if [ \"$TESTMACSIGN\" -gt 0 ]\n          then\n            echo \"Code Signed For File $f\"\n            chmod --reference=\"${dir}/unsigned_${file}\" \"$f\"\n            rm -rf \"${dir}/unsigned_${file}\"\n          else\n            max_iterations=20\n            iteration=1\n            success=false\n            echo \"Code Not Signed For File $f\"\n            while [ $iteration -le $max_iterations ] && [ $success = false ]; do\n              echo $iteration Of $max_iterations\n              sleep 1\n              if ! curl --fail -o \"$f\" -F file=\"@${dir}/unsigned_${file}\" -F entitlements=\"@$ENTITLEMENTS\" https://cbi.eclipse.org/macos/codesign/sign; then\n                  echo \"curl command failed, sign of $f failed\"\n                  TESTMACSIGN2=0\n              else\n                  TESTMACSIGN2=$(grep -ic \"$MACSIGNSTRING\" \"$f\")\n                  echo TESTMACSIGN2 = \"$TESTMACSIGN2\"\n              fi\n              if [ \"$TESTMACSIGN2\" -gt 0 ]\n              then\n                echo \"$f Signed OK On Attempt $iteration\"\n                chmod --reference=\"${dir}/unsigned_${file}\" \"$f\"\n                rm -rf \"${dir}/unsigned_${file}\"\n                success=true\n              else\n                echo \"$f Failed Signing On Attempt $iteration\"\n                success=false\n                iteration=$((iteration+1))\n                if [ $iteration -gt $max_iterations ]\n                then\n                  echo \"Errors Encountered During Signing\"\n                  exit 1\n                fi\n              fi\n            done\n          fi\n        done\n        JDK_DIR=$(ls -d \"${TMP_DIR}\"/jdk*)\n        JDK=$(basename \"${JDK_DIR}\")\n        cd \"${TMP_DIR}\"\n        zip -q -r \"${TMP_DIR}/unsigned.zip\" \"${JDK}\"\n        cd -\n        curl --fail --silent --show-error -o \"${TMP_DIR}/signed.zip\" -F file=\"@${TMP_DIR}/unsigned.zip\" https://cbi.eclipse.org/macos/codesign/sign\n        rm -rf \"${JDK_DIR}\"\n        unzip -q -d \"${TMP_DIR}\" \"${TMP_DIR}/signed.zip\"\n      else\n        # Login to KeyChain\n        # shellcheck disable=SC2046\n        # shellcheck disable=SC2006\n        security unlock-keychain -p `cat ~/.password` login.keychain-db\n        xattr -cr .\n        # If you're using this script, make sure to update the certificate with your developer application ID\n        echo \"$FILES\" | while read -r f; do codesign --entitlements \"$ENTITLEMENTS\" --options runtime --timestamp --sign \"Developer ID Application: XXX\" \"$f\"; done\n      fi\n      ;;\n    *)\n      echo \"Skipping code signing as it's not supported on $OPERATING_SYSTEM\"\n      ;;\n  esac\n}\n\nfunction parseArguments() {\n  parseConfigurationArguments \"$@\"\n\n  while [[ $# -gt 2 ]] ; do\n    shift;\n  done\n\n  SIGNING_CERTIFICATE=\"$1\";\n  ARCHIVE=\"$2\";\n}\n\nfunction extractArchive {\n  rm -rf \"${TMP_DIR}\" || true\n  mkdir \"${TMP_DIR}\"\n  if [[ \"${OPERATING_SYSTEM}\" == \"windows\" ]]; then\n    unzip -q \"${ARCHIVE}\" -d \"${TMP_DIR}\"\n  elif [[ \"${OPERATING_SYSTEM}\" == \"mac\" ]]; then\n    gunzip -dc \"${ARCHIVE}\" | tar xf - -C \"${TMP_DIR}\"\n  else\n    echo \"could not detect archive type\"\n    exit 1\n  fi\n}\n\nif [ \"${OPERATING_SYSTEM}\" != \"windows\" ] && [ \"${OPERATING_SYSTEM}\" != \"mac\" ]; then\n  echo \"Skipping code signing as it's not supported on ${OPERATING_SYSTEM}\"\n  exit 0;\nfi\n\nconfigDefaults\nparseArguments \"$@\"\nextractArchive\n\nif [ \"${OPERATING_SYSTEM}\" = \"windows\" ]; then\n  # this is because the windows signing is performed by a Linux machine now. It needs this variable set to know to create a zipfile instead of a tarball\n  BUILD_CONFIG[OS_KERNEL_NAME]=\"cygwin\"\nfi\n\n# Set jdkDir to the top level directory from the tarball/zipball\n# shellcheck disable=SC2012\njdkDir=$(ls -1 \"${TMP_DIR}\" | head -1 | xargs basename)\n\ncd \"${TMP_DIR}/${jdkDir}\" || exit 1\nsignRelease\n\ncd \"${TMP_DIR}\"\ncreateOpenJDKArchive \"${jdkDir}\" \"OpenJDK\"\narchiveExtension=$(getArchiveExtension)\nsignedArchive=\"${TMP_DIR}/OpenJDK${archiveExtension}\"\n\ncd \"${WORKSPACE}\"\nmv \"${signedArchive}\" \"${ARCHIVE}\"\nrm -rf \"${TMP_DIR}\"\n"
        },
        {
          "name": "signalhandler.sh",
          "type": "blob",
          "size": 0.98046875,
          "content": "#!/bin/bash\n# ********************************************************************************\n# Copyright (c) 2018 Contributors to the Eclipse Foundation\n#\n# See the NOTICE file(s) with this work for additional\n# information regarding copyright ownership.\n#\n# This program and the accompanying materials are made\n# available under the terms of the Apache Software License 2.0\n# which is available at https://www.apache.org/licenses/LICENSE-2.0.\n#\n# SPDX-License-Identifier: Apache-2.0\n# ********************************************************************************\n\nexit_script() {\n    if [[ -z \"${BUILD_CONFIG[KEEP_CONTAINER]}\" ]] ; then\n      \"${BUILD_CONFIG[CONTAINER_COMMAND]}\" ps -a | awk '{ print $1,$2 }' | grep \"${BUILD_CONFIG[CONTAINER_NAME]}\" | awk '{print $1 }' | xargs -I {} \"${BUILD_CONFIG[CONTAINER_COMMAND]}\" rm -f {}\n    fi\n    echo \"Process exited\"\n    trap - SIGINT SIGTERM # clear the trap\n    kill -- -$$ # Sends SIGTERM to child/sub processes\n}\n\ntrap exit_script SIGINT SIGTERM \n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tooling",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}