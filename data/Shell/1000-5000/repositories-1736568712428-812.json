{
  "metadata": {
    "timestamp": 1736568712428,
    "page": 812,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgxOQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "docker-library/docker",
      "stars": 1209,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.244140625,
          "content": "/*/**/Dockerfile             linguist-generated\n/*/**/docker-entrypoint.sh   linguist-generated\n/*/**/dockerd-entrypoint.sh  linguist-generated\n/*/**/modprobe.sh            linguist-generated\n/Dockerfile*.template        linguist-language=Dockerfile\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0166015625,
          "content": ".jq-template.awk\n"
        },
        {
          "name": "27-rc",
          "type": "tree",
          "content": null
        },
        {
          "name": "27",
          "type": "tree",
          "content": null
        },
        {
          "name": "Dockerfile-cli.template",
          "type": "blob",
          "size": 2.7666015625,
          "content": "{{ include \"shared\" -}}\nFROM alpine:3.21\n\nRUN apk add --no-cache \\\n\t\tca-certificates \\\n# DOCKER_HOST=ssh://... -- https://github.com/docker/cli/pull/1014\n\t\topenssh-client \\\n# https://github.com/docker-library/docker/issues/482#issuecomment-2197116408\n\t\tgit\n\n# ensure that nsswitch.conf is set up for Go's \"netgo\" implementation (which Docker explicitly uses)\n# - https://github.com/moby/moby/blob/v24.0.6/hack/make.sh#L111\n# - https://github.com/golang/go/blob/go1.19.13/src/net/conf.go#L227-L303\n# - docker run --rm debian:stretch grep '^hosts:' /etc/nsswitch.conf\nRUN [ -e /etc/nsswitch.conf ] && grep '^hosts: files dns' /etc/nsswitch.conf\n\n# pre-add a \"docker\" group for socket usage\nRUN set -eux; \\\n\taddgroup -g 2375 -S docker\n\nENV DOCKER_VERSION {{ .version }}\n\nRUN set -eux; \\\n\t\\\n\t{{\n\t\tdownload({\n\t\t\tarches: .arches,\n\t\t\turlKey: \"dockerUrl\",\n\t\t\t# TODO sha256Key (once Docker publishes them ðŸ˜­)\n\t\t\ttarget: \"docker.tgz\",\n\t\t})\n\t}}; \\\n\t\\\n\ttar --extract \\\n\t\t--file docker.tgz \\\n\t\t--strip-components 1 \\\n\t\t--directory /usr/local/bin/ \\\n\t\t--no-same-owner \\\n\t\t'docker/docker' \\\n\t; \\\n\trm docker.tgz; \\\n\t\\\n\tdocker --version\n{{\n\t{\n\t\tbuildx: .buildx,\n\t\tcompose: .compose,\n\t}\n\t| to_entries | map(\n\t\t.key as $key | .value | (\n-}}\n\nENV DOCKER_{{ $key | ascii_upcase }}_VERSION {{ .version }}\nRUN set -eux; \\\n\t\\\n\t{{\n\t\tdownload({\n\t\t\tarches: .arches,\n\t\t\turlKey: \"url\",\n\t\t\tsha256Key: \"sha256\",\n\t\t\ttarget: (\"docker-\" + $key),\n\t\t\tmissingArchWarning: true,\n\t\t})\n\t}}; \\\n\t\\\n\tplugin='/usr/local/libexec/docker/cli-plugins/docker-{{ $key }}'; \\\n\tmkdir -p \"$(dirname \"$plugin\")\"; \\\n\tmv -vT {{ \"docker-\" + $key | @sh }} \"$plugin\"; \\\n\tchmod +x \"$plugin\"; \\\n\t\\\n{{ if $key == \"compose\" then ( -}}\n\tln -sv \"$plugin\" /usr/local/bin/; \\\n\tdocker-{{ $key }} --version; \\\n{{ ) else \"\" end -}}\n\tdocker {{ $key }} version\n{{\n\t\t)\n\t)\n\t| add\n-}}\n\nCOPY modprobe.sh /usr/local/bin/modprobe\nCOPY docker-entrypoint.sh /usr/local/bin/\n\n# https://github.com/docker-library/docker/pull/166\n#   dockerd-entrypoint.sh uses DOCKER_TLS_CERTDIR for auto-generating TLS certificates\n#   docker-entrypoint.sh uses DOCKER_TLS_CERTDIR for auto-setting DOCKER_TLS_VERIFY and DOCKER_CERT_PATH\n# (For this to work, at least the \"client\" subdirectory of this path needs to be shared between the client and server containers via a volume, \"docker cp\", or other means of data sharing.)\nENV DOCKER_TLS_CERTDIR=/certs\n# also, ensure the directory pre-exists and has wide enough permissions for \"dockerd-entrypoint.sh\" to create subdirectories, even when run in \"rootless\" mode\nRUN mkdir /certs /certs/client && chmod 1777 /certs /certs/client\n# (doing both /certs and /certs/client so that if Docker does a \"copy-up\" into a volume defined on /certs/client, it will \"do the right thing\" by default in a way that still works for rootless users)\n\nENTRYPOINT [\"docker-entrypoint.sh\"]\nCMD [\"sh\"]\n"
        },
        {
          "name": "Dockerfile-dind-rootless.template",
          "type": "blob",
          "size": 1.3291015625,
          "content": "{{ include \"shared\" -}}\nFROM docker:{{ env.version }}-dind\n\n# busybox \"ip\" is insufficient:\n#   [rootlesskit:child ] error: executing [[ip tuntap add name tap0 mode tap] [ip link set tap0 address 02:50:00:00:00:01]]: exit status 1\nRUN apk add --no-cache iproute2 fuse-overlayfs\n\n# \"/run/user/UID\" will be used by default as the value of XDG_RUNTIME_DIR\nRUN mkdir /run/user && chmod 1777 /run/user\n\n# create a default user preconfigured for running rootless dockerd\nRUN set -eux; \\\n\tadduser -h /home/rootless -g 'Rootless' -D -u 1000 rootless; \\\n\techo 'rootless:100000:65536' >> /etc/subuid; \\\n\techo 'rootless:100000:65536' >> /etc/subgid\n\nRUN set -eux; \\\n\t\\\n\t{{\n\t\tdownload({\n\t\t\tarches: .arches,\n\t\t\turlKey: \"rootlessExtrasUrl\",\n\t\t\t# TODO sha256Key (once Docker publishes them ðŸ˜­)\n\t\t\ttarget: \"rootless.tgz\",\n\t\t})\n\t}}; \\\n\t\\\n\ttar --extract \\\n\t\t--file rootless.tgz \\\n\t\t--strip-components 1 \\\n\t\t--directory /usr/local/bin/ \\\n\t\t'docker-rootless-extras/rootlesskit' \\\n\t\t'docker-rootless-extras/rootlesskit-docker-proxy' \\\n\t\t'docker-rootless-extras/vpnkit' \\\n\t; \\\n\trm rootless.tgz; \\\n\t\\\n\trootlesskit --version; \\\n\tvpnkit --version\n\n# pre-create \"/var/lib/docker\" for our rootless user\nRUN set -eux; \\\n\tmkdir -p /home/rootless/.local/share/docker; \\\n\tchown -R rootless:rootless /home/rootless/.local/share/docker\nVOLUME /home/rootless/.local/share/docker\nUSER rootless\n"
        },
        {
          "name": "Dockerfile-dind.template",
          "type": "blob",
          "size": 2.7236328125,
          "content": "{{ include \"shared\" -}}\nFROM docker:{{ env.version }}-cli\n\n# https://github.com/moby/moby/blob/0eecd59153c03ced5f5ddd79cc98f29e4d86daec/project/PACKAGERS.md#runtime-dependencies\n# https://github.com/docker/docker-ce-packaging/blob/963aa02666035d4e268f33c63d7868d6cdd1d34c/deb/common/control#L28-L41\nRUN set -eux; \\\n\tapk add --no-cache \\\n\t\tbtrfs-progs \\\n\t\te2fsprogs \\\n\t\te2fsprogs-extra \\\n\t\tgit \\\n\t\tip6tables \\\n\t\tiptables \\\n\t\topenssl \\\n\t\tpigz \\\n\t\tshadow-uidmap \\\n\t\txfsprogs \\\n\t\txz \\\n\t\tzfs \\\n\t;\n\n# dind might be used on systems where the nf_tables kernel module isn't available. In that case,\n# we need to switch over to xtables-legacy. See https://github.com/docker-library/docker/issues/463\nRUN set -eux; \\\n\tapk add --no-cache iptables-legacy; \\\n# set up a symlink farm we can use PATH to switch to legacy with\n\tmkdir -p /usr/local/sbin/.iptables-legacy; \\\n# https://gitlab.alpinelinux.org/alpine/aports/-/blob/a7e1610a67a46fc52668528efe01cee621c2ba6c/main/iptables/APKBUILD#L77\n\tfor f in \\\n\t\tiptables \\\n\t\tiptables-save \\\n\t\tiptables-restore \\\n\t\tip6tables \\\n\t\tip6tables-save \\\n\t\tip6tables-restore \\\n\t; do \\\n# \"iptables-save\" -> \"iptables-legacy-save\", \"ip6tables\" -> \"ip6tables-legacy\", etc.\n# https://pkgs.alpinelinux.org/contents?branch=v3.21&name=iptables-legacy&arch=x86_64\n\t\tb=\"$(command -v \"${f/tables/tables-legacy}\")\"; \\\n\t\t\"$b\" --version; \\\n\t\tln -svT \"$b\" \"/usr/local/sbin/.iptables-legacy/$f\"; \\\n\tdone; \\\n# verify it works (and gets us legacy)\n\texport PATH=\"/usr/local/sbin/.iptables-legacy:$PATH\"; \\\n\tiptables --version | grep legacy\n\n# set up subuid/subgid so that \"--userns-remap=default\" works out-of-the-box\nRUN set -eux; \\\n\taddgroup -S dockremap; \\\n\tadduser -S -G dockremap dockremap; \\\n\techo 'dockremap:165536:65536' >> /etc/subuid; \\\n\techo 'dockremap:165536:65536' >> /etc/subgid\n\nRUN set -eux; \\\n\t\\\n\t{{\n\t\tdownload({\n\t\t\tarches: .arches,\n\t\t\turlKey: \"dockerUrl\",\n\t\t\t# TODO sha256Key (once Docker publishes them ðŸ˜­)\n\t\t\ttarget: \"docker.tgz\",\n\t\t})\n\t}}; \\\n\t\\\n\ttar --extract \\\n\t\t--file docker.tgz \\\n\t\t--strip-components 1 \\\n\t\t--directory /usr/local/bin/ \\\n\t\t--no-same-owner \\\n# we exclude the CLI binary because we already extracted that over in the \"docker:{{ env.version }}-cli\" image that we're FROM and we don't want to duplicate those bytes again in this layer\n\t\t--exclude 'docker/docker' \\\n\t; \\\n\trm docker.tgz; \\\n\t\\\n\tdockerd --version; \\\n\tcontainerd --version; \\\n\tctr --version; \\\n\trunc --version\n\n# https://github.com/docker/docker/tree/master/hack/dind\nENV DIND_COMMIT {{ .dindCommit }}\n\nRUN set -eux; \\\n\twget -O /usr/local/bin/dind \"https://raw.githubusercontent.com/docker/docker/${DIND_COMMIT}/hack/dind\"; \\\n\tchmod +x /usr/local/bin/dind\n\nCOPY dockerd-entrypoint.sh /usr/local/bin/\n\nVOLUME /var/lib/docker\nEXPOSE 2375 2376\n\nENTRYPOINT [\"dockerd-entrypoint.sh\"]\nCMD []\n"
        },
        {
          "name": "Dockerfile-windows-servercore.template",
          "type": "blob",
          "size": 2.912109375,
          "content": "FROM mcr.microsoft.com/windows/{{ env.windowsVariant }}:{{ env.windowsRelease }}\n\n# $ProgressPreference: https://github.com/PowerShell/PowerShell/issues/2138#issuecomment-251261324\nSHELL [\"powershell\", \"-Command\", \"$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';\"]\n\n# PATH isn't actually set in the Docker image, so we have to set it from within the container\nRUN $newPath = ('{0}\\docker;{1}' -f $env:ProgramFiles, $env:PATH); \\\n\tWrite-Host ('Updating PATH: {0}' -f $newPath); \\\n\t[Environment]::SetEnvironmentVariable('PATH', $newPath, [EnvironmentVariableTarget]::Machine);\n# doing this first to share cache across versions more aggressively\n\nENV DOCKER_VERSION {{ .version }}\nENV DOCKER_URL {{ .arches[\"windows-amd64\"].dockerUrl }}\n# TODO ENV DOCKER_SHA256\n# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!\n# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)\n\nRUN Write-Host ('Downloading {0} ...' -f $env:DOCKER_URL); \\\n\tInvoke-WebRequest -Uri $env:DOCKER_URL -OutFile 'docker.zip'; \\\n\t\\\n\tWrite-Host 'Expanding ...'; \\\n\tExpand-Archive docker.zip -DestinationPath $env:ProgramFiles; \\\n# (this archive has a \"docker/...\" directory in it already)\n\t\\\n\tWrite-Host 'Removing ...'; \\\n\tRemove-Item @( \\\n\t\t\t'docker.zip', \\\n\t\t\t('{0}\\docker\\dockerd.exe' -f $env:ProgramFiles) \\\n\t\t) -Force; \\\n\t\\\n\tWrite-Host 'Verifying install (\"docker --version\") ...'; \\\n\tdocker --version; \\\n\t\\\n\tWrite-Host 'Complete.';\n\n# https://github.com/docker-library/docker/issues/409#issuecomment-1462868414\n{{\n\t{\n\t\tbuildx: .buildx,\n\t\tcompose: .compose,\n\t}\n\t| to_entries | map(\n\t\t.key as $key | ($key | ascii_upcase) as $KEY | .value | (\n-}}\nENV DOCKER_{{ $KEY }}_VERSION {{ .version }}\nENV DOCKER_{{ $KEY }}_URL {{ .arches[\"windows-amd64\"].url }}\nENV DOCKER_{{ $KEY }}_SHA256 {{ .arches[\"windows-amd64\"].sha256 }}\nRUN $dir = ('{0}\\docker\\cli-plugins' -f $env:ProgramFiles); \\\n\tWrite-Host ('Creating {0} ...' -f $dir); \\\n\tNew-Item -ItemType Directory $dir -Force; \\\n\t\\\n\t$plugin = ('{0}\\docker-{{ $key }}.exe' -f $dir); \\\n\tWrite-Host ('Downloading {0} ...' -f $env:DOCKER_{{ $KEY }}_URL); \\\n\tInvoke-WebRequest -Uri $env:DOCKER_{{ $KEY }}_URL -OutFile $plugin; \\\n\t\\\n\tWrite-Host ('Verifying sha256 ({0}) ...' -f $env:DOCKER_{{ $KEY }}_SHA256); \\\n\tif ((Get-FileHash $plugin -Algorithm sha256).Hash -ne $env:DOCKER_{{ $KEY }}_SHA256) { \\\n\t\tWrite-Host 'FAILED!'; \\\n\t\texit 1; \\\n\t}; \\\n\t\\\n\tWrite-Host 'Verifying install (\"docker {{ $key }} version\") ...'; \\\n\tdocker {{ $key }} version; \\\n{{ if $key == \"compose\" then ( -}}\n\t\\\n\t$link = ('{0}\\docker\\docker-{{ $key }}.exe' -f $env:ProgramFiles); \\\n\tWrite-Host ('Linking {0} to {1} ...' -f $plugin, $link); \\\n\tNew-Item -ItemType SymbolicLink -Path $link -Target $plugin; \\\n\t\\\n\tWrite-Host 'Verifying install (\"docker-{{ $key }} --version\") ...'; \\\n\tdocker-{{ $key }} --version; \\\n{{ ) else \"\" end -}}\n\t\\\n\tWrite-Host 'Complete.';\n{{\n\t\t)\n\t)\n\t| add\n-}}\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 10.505859375,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   Copyright 2013 Docker, Inc.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.5595703125,
          "content": "# https://github.com/docker-library/docker\n\n## Maintained by: [Tianon (of the Docker Project)](https://github.com/docker-library/docker)\n\nThis is the Git repo of the [Docker \"Official Image\"](https://github.com/docker-library/official-images#what-are-official-images) for [`docker`](https://hub.docker.com/_/docker/). See [the Docker Hub page](https://hub.docker.com/_/docker/) for the full readme on how to use this Docker image and for information regarding contributing and issues.\n\nThe [full image description on Docker Hub](https://hub.docker.com/_/docker/) is generated/maintained over in [the docker-library/docs repository](https://github.com/docker-library/docs), specifically in [the `docker` directory](https://github.com/docker-library/docs/tree/master/docker).\n\n## See a change merged here that doesn't show up on Docker Hub yet?\n\nFor more information about the full official images change lifecycle, see [the \"An image's source changed in Git, now what?\" FAQ entry](https://github.com/docker-library/faq#an-images-source-changed-in-git-now-what).\n\nFor outstanding `docker` image PRs, check [PRs with the \"library/docker\" label on the official-images repository](https://github.com/docker-library/official-images/labels/library%2Fdocker). For the current \"source of truth\" for [`docker`](https://hub.docker.com/_/docker/), see [the `library/docker` file in the official-images repository](https://github.com/docker-library/official-images/blob/master/library/docker).\n\n<!-- THIS FILE IS GENERATED BY https://github.com/docker-library/docs/blob/master/generate-repo-stub-readme.sh -->\n"
        },
        {
          "name": "apply-templates.sh",
          "type": "blob",
          "size": 1.7861328125,
          "content": "#!/usr/bin/env bash\nset -Eeuo pipefail\n\n[ -f versions.json ] # run \"versions.sh\" first\n\njqt='.jq-template.awk'\nif [ -n \"${BASHBREW_SCRIPTS:-}\" ]; then\n\tjqt=\"$BASHBREW_SCRIPTS/jq-template.awk\"\nelif [ \"$BASH_SOURCE\" -nt \"$jqt\" ]; then\n\t# https://github.com/docker-library/bashbrew/blob/master/scripts/jq-template.awk\n\twget -qO \"$jqt\" 'https://github.com/docker-library/bashbrew/raw/9f6a35772ac863a0241f147c820354e4008edf38/scripts/jq-template.awk'\nfi\n\nif [ \"$#\" -eq 0 ]; then\n\tversions=\"$(jq -r 'keys | map(@sh) | join(\" \")' versions.json)\"\n\teval \"set -- $versions\"\nfi\n\ngenerated_warning() {\n\tcat <<-EOH\n\t\t#\n\t\t# NOTE: THIS DOCKERFILE IS GENERATED VIA \"apply-templates.sh\"\n\t\t#\n\t\t# PLEASE DO NOT EDIT IT DIRECTLY.\n\t\t#\n\n\tEOH\n}\n\nfor version; do\n\texport version\n\n\tif jq -e '.[env.version] | not' versions.json > /dev/null; then\n\t\techo \"deleting $version ...\"\n\t\trm -rf \"$version\"\n\t\tcontinue\n\tfi\n\n\trm -rf \"$version\"\n\n\tvariants=\"$(jq -r '.[env.version].variants | map(@sh) | join(\" \")' versions.json)\"\n\teval \"variants=( $variants )\"\n\n\tfor variant in \"${variants[@]}\"; do\n\t\tdir=\"$version/$variant\"\n\n\t\tcase \"$variant\" in\n\t\t\twindows/*)\n\t\t\t\tvariant=\"$(basename \"$variant\")\" # \"windowsservercore-1809\", etc\n\t\t\t\twindowsVariant=\"${variant%%-*}\" # \"windowsservercore\", \"nanoserver\"\n\t\t\t\twindowsRelease=\"${variant#$windowsVariant-}\" # \"ltsc2022\", \"1809\", etc\n\t\t\t\twindowsVariant=\"${windowsVariant#windows}\" # \"servercore\", \"nanoserver\"\n\t\t\t\texport windowsVariant windowsRelease\n\t\t\t\ttemplate=\"Dockerfile-windows-$windowsVariant.template\"\n\t\t\t\t;;\n\n\t\t\t*)\n\t\t\t\ttemplate=\"Dockerfile-$variant.template\"\n\t\t\t\t;;\n\t\tesac\n\n\t\techo \"processing $dir ...\"\n\n\t\tmkdir -p \"$dir\"\n\t\t{\n\t\t\tgenerated_warning\n\t\t\tgawk -f \"$jqt\" \"$template\"\n\t\t} > \"$dir/Dockerfile\"\n\tdone\n\n\tcp -a docker-entrypoint.sh modprobe.sh \"$version/cli/\"\n\tcp -a dockerd-entrypoint.sh \"$version/dind/\"\ndone\n"
        },
        {
          "name": "docker-entrypoint.sh",
          "type": "blob",
          "size": 1.806640625,
          "content": "#!/bin/sh\nset -eu\n\n# first arg is `-f` or `--some-option`\nif [ \"${1#-}\" != \"$1\" ]; then\n\tset -- docker \"$@\"\nfi\n\n# if our command is a valid Docker subcommand, let's invoke it through Docker instead\n# (this allows for \"docker run docker ps\", etc)\nif docker help \"$1\" > /dev/null 2>&1; then\n\tset -- docker \"$@\"\nfi\n\n_should_tls() {\n\t[ -n \"${DOCKER_TLS_CERTDIR:-}\" ] \\\n\t&& [ -s \"$DOCKER_TLS_CERTDIR/client/ca.pem\" ] \\\n\t&& [ -s \"$DOCKER_TLS_CERTDIR/client/cert.pem\" ] \\\n\t&& [ -s \"$DOCKER_TLS_CERTDIR/client/key.pem\" ]\n}\n\n# if we have no DOCKER_HOST but we do have the default Unix socket (standard or rootless), use it explicitly\nif [ -z \"${DOCKER_HOST:-}\" ] && [ -S /var/run/docker.sock ]; then\n\texport DOCKER_HOST=unix:///var/run/docker.sock\nelif [ -z \"${DOCKER_HOST:-}\" ] && XDG_RUNTIME_DIR=\"${XDG_RUNTIME_DIR:-/run/user/$(id -u)}\" && [ -S \"$XDG_RUNTIME_DIR/docker.sock\" ]; then\n\texport DOCKER_HOST=\"unix://$XDG_RUNTIME_DIR/docker.sock\"\nfi\n\n# if DOCKER_HOST isn't set (no custom setting, no default socket), let's set it to a sane remote value\nif [ -z \"${DOCKER_HOST:-}\" ]; then\n\tif _should_tls || [ -n \"${DOCKER_TLS_VERIFY:-}\" ]; then\n\t\texport DOCKER_HOST='tcp://docker:2376'\n\telse\n\t\texport DOCKER_HOST='tcp://docker:2375'\n\tfi\nfi\nif [ \"${DOCKER_HOST#tcp:}\" != \"$DOCKER_HOST\" ] \\\n\t&& [ -z \"${DOCKER_TLS_VERIFY:-}\" ] \\\n\t&& [ -z \"${DOCKER_CERT_PATH:-}\" ] \\\n\t&& _should_tls \\\n; then\n\texport DOCKER_TLS_VERIFY=1\n\texport DOCKER_CERT_PATH=\"$DOCKER_TLS_CERTDIR/client\"\nfi\n\nif [ \"$1\" = 'dockerd' ]; then\n\tcat >&2 <<-'EOW'\n\n\t\tðŸ“Ž Hey there!  It looks like you're trying to run a Docker daemon.\n\n\t\t   You probably should use the \"dind\" image variant instead, something like:\n\n\t\t     docker run --privileged --name some-docker ... docker:dind ...\n\n\t\t   See https://hub.docker.com/_/docker/ for more documentation and usage examples.\n\n\tEOW\n\tsleep 3\nfi\n\nexec \"$@\"\n"
        },
        {
          "name": "dockerd-entrypoint.sh",
          "type": "blob",
          "size": 8.7763671875,
          "content": "#!/bin/sh\nset -eu\n\n_tls_ensure_private() {\n\tlocal f=\"$1\"; shift\n\t[ -s \"$f\" ] || openssl genrsa -out \"$f\" 4096\n}\n_tls_san() {\n\t{\n\t\tip -oneline address | awk '{ gsub(/\\/.+$/, \"\", $4); print \"IP:\" $4 }'\n\t\t{\n\t\t\tcat /etc/hostname\n\t\t\techo 'docker'\n\t\t\techo 'localhost'\n\t\t\thostname -f\n\t\t\thostname -s\n\t\t} | sed 's/^/DNS:/'\n\t\t[ -z \"${DOCKER_TLS_SAN:-}\" ] || echo \"$DOCKER_TLS_SAN\"\n\t} | sort -u | xargs printf '%s,' | sed \"s/,\\$//\"\n}\n_tls_generate_certs() {\n\tlocal dir=\"$1\"; shift\n\n\t# if server/{ca,key,cert}.pem && !ca/key.pem, do NOTHING except verify (user likely managing CA themselves)\n\t# if ca/key.pem || !ca/cert.pem, generate CA public if necessary\n\t# if ca/key.pem, generate server public\n\t# if ca/key.pem, generate client public\n\t# (regenerating public certs every startup to account for SAN/IP changes and/or expiration)\n\n\tif [ -s \"$dir/server/ca.pem\" ] && [ -s \"$dir/server/cert.pem\" ] && [ -s \"$dir/server/key.pem\" ] && [ ! -s \"$dir/ca/key.pem\" ]; then\n\t\topenssl verify -CAfile \"$dir/server/ca.pem\" \"$dir/server/cert.pem\"\n\t\treturn 0\n\tfi\n\n\t# https://github.com/FiloSottile/mkcert/issues/174\n\tlocal certValidDays='825'\n\n\tif [ -s \"$dir/ca/key.pem\" ] || [ ! -s \"$dir/ca/cert.pem\" ]; then\n\t\t# if we either have a CA private key or do *not* have a CA public key, then we should create/manage the CA\n\t\tmkdir -p \"$dir/ca\"\n\t\t_tls_ensure_private \"$dir/ca/key.pem\"\n\t\topenssl req -new -key \"$dir/ca/key.pem\" \\\n\t\t\t-out \"$dir/ca/cert.pem\" \\\n\t\t\t-subj '/CN=docker:dind CA' -x509 -days \"$certValidDays\"\n\tfi\n\n\tif [ -s \"$dir/ca/key.pem\" ]; then\n\t\t# if we have a CA private key, we should create/manage a server key\n\t\tmkdir -p \"$dir/server\"\n\t\t_tls_ensure_private \"$dir/server/key.pem\"\n\t\topenssl req -new -key \"$dir/server/key.pem\" \\\n\t\t\t-out \"$dir/server/csr.pem\" \\\n\t\t\t-subj '/CN=docker:dind server'\n\t\tcat > \"$dir/server/openssl.cnf\" <<-EOF\n\t\t\t[ x509_exts ]\n\t\t\tsubjectAltName = $(_tls_san)\n\t\tEOF\n\t\topenssl x509 -req \\\n\t\t\t\t-in \"$dir/server/csr.pem\" \\\n\t\t\t\t-CA \"$dir/ca/cert.pem\" \\\n\t\t\t\t-CAkey \"$dir/ca/key.pem\" \\\n\t\t\t\t-CAcreateserial \\\n\t\t\t\t-out \"$dir/server/cert.pem\" \\\n\t\t\t\t-days \"$certValidDays\" \\\n\t\t\t\t-extfile \"$dir/server/openssl.cnf\" \\\n\t\t\t\t-extensions x509_exts\n\t\tcp \"$dir/ca/cert.pem\" \"$dir/server/ca.pem\"\n\t\topenssl verify -CAfile \"$dir/server/ca.pem\" \"$dir/server/cert.pem\"\n\tfi\n\n\tif [ -s \"$dir/ca/key.pem\" ]; then\n\t\t# if we have a CA private key, we should create/manage a client key\n\t\tmkdir -p \"$dir/client\"\n\t\t_tls_ensure_private \"$dir/client/key.pem\"\n\t\tchmod 0644 \"$dir/client/key.pem\" # openssl defaults to 0600 for the private key, but this one needs to be shared with arbitrary client contexts\n\t\topenssl req -new \\\n\t\t\t\t-key \"$dir/client/key.pem\" \\\n\t\t\t\t-out \"$dir/client/csr.pem\" \\\n\t\t\t\t-subj '/CN=docker:dind client'\n\t\tcat > \"$dir/client/openssl.cnf\" <<-'EOF'\n\t\t\t[ x509_exts ]\n\t\t\textendedKeyUsage = clientAuth\n\t\tEOF\n\t\topenssl x509 -req \\\n\t\t\t\t-in \"$dir/client/csr.pem\" \\\n\t\t\t\t-CA \"$dir/ca/cert.pem\" \\\n\t\t\t\t-CAkey \"$dir/ca/key.pem\" \\\n\t\t\t\t-CAcreateserial \\\n\t\t\t\t-out \"$dir/client/cert.pem\" \\\n\t\t\t\t-days \"$certValidDays\" \\\n\t\t\t\t-extfile \"$dir/client/openssl.cnf\" \\\n\t\t\t\t-extensions x509_exts\n\t\tcp \"$dir/ca/cert.pem\" \"$dir/client/ca.pem\"\n\t\topenssl verify -CAfile \"$dir/client/ca.pem\" \"$dir/client/cert.pem\"\n\tfi\n}\n\n# no arguments passed\n# or first arg is `-f` or `--some-option`\nif [ \"$#\" -eq 0 ] || [ \"${1#-}\" != \"$1\" ]; then\n\t# set \"dockerSocket\" to the default \"--host\" *unix socket* value (for both standard or rootless)\n\tuid=\"$(id -u)\"\n\tif [ \"$uid\" = '0' ]; then\n\t\tdockerSocket='unix:///var/run/docker.sock'\n\telse\n\t\t# if we're not root, we must be trying to run rootless\n\t\t: \"${XDG_RUNTIME_DIR:=/run/user/$uid}\"\n\t\tdockerSocket=\"unix://$XDG_RUNTIME_DIR/docker.sock\"\n\tfi\n\tcase \"${DOCKER_HOST:-}\" in\n\t\tunix://*)\n\t\t\tdockerSocket=\"$DOCKER_HOST\"\n\t\t\t;;\n\tesac\n\n\t# add our default arguments\n\tif [ -n \"${DOCKER_TLS_CERTDIR:-}\" ]; then\n\t\t_tls_generate_certs \"$DOCKER_TLS_CERTDIR\"\n\t\t# generate certs and use TLS if requested/possible (default in 19.03+)\n\t\tset -- dockerd \\\n\t\t\t--host=\"$dockerSocket\" \\\n\t\t\t--host=tcp://0.0.0.0:2376 \\\n\t\t\t--tlsverify \\\n\t\t\t--tlscacert \"$DOCKER_TLS_CERTDIR/server/ca.pem\" \\\n\t\t\t--tlscert \"$DOCKER_TLS_CERTDIR/server/cert.pem\" \\\n\t\t\t--tlskey \"$DOCKER_TLS_CERTDIR/server/key.pem\" \\\n\t\t\t\"$@\"\n\t\tDOCKERD_ROOTLESS_ROOTLESSKIT_FLAGS=\"${DOCKERD_ROOTLESS_ROOTLESSKIT_FLAGS:-} -p 0.0.0.0:2376:2376/tcp\"\n\telse\n\t\t# TLS disabled (-e DOCKER_TLS_CERTDIR='') or missing certs\n\t\tset -- dockerd \\\n\t\t\t--host=\"$dockerSocket\" \\\n\t\t\t--host=tcp://0.0.0.0:2375 \\\n\t\t\t\"$@\"\n\t\tDOCKERD_ROOTLESS_ROOTLESSKIT_FLAGS=\"${DOCKERD_ROOTLESS_ROOTLESSKIT_FLAGS:-} -p 0.0.0.0:2375:2375/tcp\"\n\tfi\nfi\n\nif [ \"$1\" = 'dockerd' ]; then\n\t# explicitly remove Docker's default PID file to ensure that it can start properly if it was stopped uncleanly (and thus didn't clean up the PID file)\n\tfind /run /var/run -iname 'docker*.pid' -delete || :\n\n\t# XXX inject \"docker-init\" (tini) as pid1 to workaround https://github.com/docker-library/docker/issues/318 (zombie container-shim processes)\n\tset -- docker-init -- \"$@\"\n\n\tiptablesLegacy=\n\tif [ -n \"${DOCKER_IPTABLES_LEGACY+x}\" ]; then\n\t\t# let users choose explicitly to legacy or not to legacy\n\t\tiptablesLegacy=\"$DOCKER_IPTABLES_LEGACY\"\n\t\tif [ -n \"$iptablesLegacy\" ]; then\n\t\t\tmodprobe ip_tables || :\n\t\t\tmodprobe ip6_tables || :\n\t\telse\n\t\t\tmodprobe nf_tables || :\n\t\tfi\n\telif (\n\t\t# https://git.netfilter.org/iptables/tree/iptables/nft-shared.c?id=f5cf76626d95d2c491a80288bccc160c53b44e88#n420\n\t\t# https://github.com/docker-library/docker/pull/468#discussion_r1442131459\n\t\tfor f in /proc/net/ip_tables_names /proc/net/ip6_tables_names /proc/net/arp_tables_names; do\n\t\t\tif b=\"$(cat \"$f\")\" && [ -n \"$b\" ]; then\n\t\t\t\texit 0\n\t\t\tfi\n\t\tdone\n\t\texit 1\n\t); then\n\t\t# if we already have any \"legacy\" iptables rules, we should always use legacy\n\t\tiptablesLegacy=1\n\telif ! iptables -nL > /dev/null 2>&1; then\n\t\t# if iptables fails to run, chances are high the necessary kernel modules aren't loaded (perhaps the host is using xtables, for example)\n\t\t# https://github.com/docker-library/docker/issues/350\n\t\t# https://github.com/moby/moby/issues/26824\n\t\t# https://github.com/docker-library/docker/pull/437#issuecomment-1854900620\n\t\tmodprobe nf_tables || :\n\t\tif ! iptables -nL > /dev/null 2>&1; then\n\t\t\t# might be host has no nf_tables, but Alpine is all-in now (so let's try a legacy fallback)\n\t\t\tmodprobe ip_tables || :\n\t\t\tmodprobe ip6_tables || :\n\t\t\tif /usr/local/sbin/.iptables-legacy/iptables -nL > /dev/null 2>&1; then\n\t\t\t\tiptablesLegacy=1\n\t\t\tfi\n\t\tfi\n\tfi\n\tif [ -n \"$iptablesLegacy\" ]; then\n\t\t# see https://github.com/docker-library/docker/issues/463 (and the dind Dockerfile where this directory is set up)\n\t\texport PATH=\"/usr/local/sbin/.iptables-legacy:$PATH\"\n\tfi\n\tiptables --version # so users can see whether it's legacy or not\n\n\tuid=\"$(id -u)\"\n\tif [ \"$uid\" != '0' ]; then\n\t\t# if we're not root, we must be trying to run rootless\n\t\tif ! command -v rootlesskit > /dev/null; then\n\t\t\techo >&2 \"error: attempting to run rootless dockerd but missing 'rootlesskit' (perhaps the 'docker:dind-rootless' image variant is intended?)\"\n\t\t\texit 1\n\t\tfi\n\t\tuser=\"$(id -un 2>/dev/null || :)\"\n\t\tif ! grep -qE \"^($uid${user:+|$user}):\" /etc/subuid || ! grep -qE \"^($uid${user:+|$user}):\" /etc/subgid; then\n\t\t\techo >&2 \"error: attempting to run rootless dockerd but missing necessary entries in /etc/subuid and/or /etc/subgid for $uid\"\n\t\t\texit 1\n\t\tfi\n\t\t: \"${XDG_RUNTIME_DIR:=/run/user/$uid}\"\n\t\texport XDG_RUNTIME_DIR\n\t\tif ! mkdir -p \"$XDG_RUNTIME_DIR\" || [ ! -w \"$XDG_RUNTIME_DIR\" ] || ! mkdir -p \"$HOME/.local/share/docker\" || [ ! -w \"$HOME/.local/share/docker\" ]; then\n\t\t\techo >&2 \"error: attempting to run rootless dockerd but need writable HOME ($HOME) and XDG_RUNTIME_DIR ($XDG_RUNTIME_DIR) for user $uid\"\n\t\t\texit 1\n\t\tfi\n\t\tif [ -f /proc/sys/kernel/unprivileged_userns_clone ] && unprivClone=\"$(cat /proc/sys/kernel/unprivileged_userns_clone)\" && [ \"$unprivClone\" != '1' ]; then\n\t\t\techo >&2 \"error: attempting to run rootless dockerd but need 'kernel.unprivileged_userns_clone' (/proc/sys/kernel/unprivileged_userns_clone) set to 1\"\n\t\t\texit 1\n\t\tfi\n\t\tif [ -f /proc/sys/user/max_user_namespaces ] && maxUserns=\"$(cat /proc/sys/user/max_user_namespaces)\" && [ \"$maxUserns\" = '0' ]; then\n\t\t\techo >&2 \"error: attempting to run rootless dockerd but need 'user.max_user_namespaces' (/proc/sys/user/max_user_namespaces) set to a sufficiently large value\"\n\t\t\texit 1\n\t\tfi\n\t\t# TODO overlay support detection?\n\t\texec rootlesskit \\\n\t\t\t--net=\"${DOCKERD_ROOTLESS_ROOTLESSKIT_NET:-vpnkit}\" \\\n\t\t\t--mtu=\"${DOCKERD_ROOTLESS_ROOTLESSKIT_MTU:-1500}\" \\\n\t\t\t--disable-host-loopback \\\n\t\t\t--port-driver=builtin \\\n\t\t\t--copy-up=/etc \\\n\t\t\t--copy-up=/run \\\n\t\t\t${DOCKERD_ROOTLESS_ROOTLESSKIT_FLAGS:-} \\\n\t\t\t\"$@\"\n\telif [ -x '/usr/local/bin/dind' ]; then\n\t\t# if we have the (mostly defunct now) Docker-in-Docker wrapper script, use it\n\t\tset -- '/usr/local/bin/dind' \"$@\"\n\tfi\nelse\n\t# if it isn't `dockerd` we're trying to run, pass it through `docker-entrypoint.sh` so it gets `DOCKER_HOST` set appropriately too\n\tset -- docker-entrypoint.sh \"$@\"\nfi\n\nexec \"$@\"\n"
        },
        {
          "name": "generate-stackbrew-library.sh",
          "type": "blob",
          "size": 5.986328125,
          "content": "#!/usr/bin/env bash\nset -Eeuo pipefail\n\nself=\"$(basename \"$BASH_SOURCE\")\"\ncd \"$(dirname \"$(readlink -f \"$BASH_SOURCE\")\")\"\n\nif [ \"$#\" -eq 0 ]; then\n\tversions=\"$(jq -r '\n\t\tto_entries\n\t\t# sort version numbers with highest first\n\t\t| sort_by(.key | split(\"[.-]\"; \"\") | map(try tonumber // .))\n\t\t| reverse\n\t\t| map(if .value then .key | @sh else empty end)\n\t\t| join(\" \")\n\t' versions.json)\"\n\teval \"set -- $versions\"\nfi\n\n# get the most recent commit which modified any of \"$@\"\nfileCommit() {\n\tgit log -1 --format='format:%H' HEAD -- \"$@\"\n}\n\n# get the most recent commit which modified \"$1/Dockerfile\" or any file COPY'd from \"$1/Dockerfile\"\ndirCommit() {\n\tlocal dir=\"$1\"; shift\n\t(\n\t\tcd \"$dir\"\n\t\tfileCommit \\\n\t\t\tDockerfile \\\n\t\t\t$(git show HEAD:./Dockerfile | awk '\n\t\t\t\ttoupper($1) == \"COPY\" {\n\t\t\t\t\tfor (i = 2; i < NF; i++) {\n\t\t\t\t\t\tprint $i\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t')\n\t)\n}\n\ngetArches() {\n\tlocal repo=\"$1\"; shift\n\tlocal officialImagesBase=\"${BASHBREW_LIBRARY:-https://github.com/docker-library/official-images/raw/HEAD/library}/\"\n\n\tlocal parentRepoToArchesStr\n\tparentRepoToArchesStr=\"$(\n\t\tfind -name 'Dockerfile' -exec awk -v officialImagesBase=\"$officialImagesBase\" '\n\t\t\t\ttoupper($1) == \"FROM\" && $2 !~ /^('\"$repo\"'|scratch|.*\\/.*)(:|$)/ {\n\t\t\t\t\tprintf \"%s%s\\n\", officialImagesBase, $2\n\t\t\t\t}\n\t\t\t' '{}' + \\\n\t\t\t| sort -u \\\n\t\t\t| xargs -r bashbrew cat --format '[\"{{ .RepoName }}:{{ .TagName }}\"]=\"{{ join \" \" .TagEntry.Architectures }}\"'\n\t)\"\n\teval \"declare -g -A parentRepoToArches=( $parentRepoToArchesStr )\"\n}\ngetArches 'docker'\n\nversionArches() {\n\tlocal version=\"$1\"; shift\n\tlocal variant=\"${1:-}\"\n\tlocal selector='dockerUrl'\n\tif [[ \"$variant\" = *rootless ]]; then\n\t\tselector='rootlessExtrasUrl'\n\tfi\n\n\tif [[ \"$variant\" = windows/* ]]; then\n\t\tversion=\"$version\" jq -r '\n\t\t\t.[env.version].arches\n\t\t\t| keys[]\n\t\t\t| select(startswith(\"windows-\"))\n\t\t' versions.json | sort\n\t\treturn\n\tfi\n\n\tlocal parent parentArches\n\tparent=\"$(awk 'toupper($1) == \"FROM\" { print $2 }' \"$version/cli/Dockerfile\")\"\n\tparentArches=\"${parentRepoToArches[$parent]:-}\"\n\n\tcomm -12 \\\n\t\t<(\n\t\t\tversion=\"$version\" jq -r --arg selector \"$selector\" '\n\t\t\t\t.[env.version].arches | to_entries[]\n\t\t\t\t| select(.value[$selector])\n\t\t\t\t| .key\n\t\t\t' versions.json | sort\n\t\t) \\\n\t\t<(xargs -n1 <<<\"$parentArches\" | sort)\n}\n\ncat <<-EOH\n# this file is generated via https://github.com/docker-library/docker/blob/$(fileCommit \"$self\")/$self\n\nMaintainers: Tianon Gravi <tianon@dockerproject.org> (@tianon),\n             Joseph Ferguson <yosifkit@gmail.com> (@yosifkit)\nGitRepo: https://github.com/docker-library/docker.git\nBuilder: buildkit\nEOH\n\n# prints \"$2$1$3$1...$N\"\njoin() {\n\tlocal sep=\"$1\"; shift\n\tlocal out; printf -v out \"${sep//%/%%}%s\" \"$@\"\n\techo \"${out#$sep}\"\n}\n\n# used for auto-detecting the \"latest\" of each channel (for tagging it appropriately)\n# https://blog.docker.com/2017/03/docker-enterprise-edition/\ndeclare -A latestChannelRelease=()\n\nfor version; do\n\texport version\n\trcVersion=\"${version%-rc}\"\n\n\tif ! fullVersion=\"$(jq -er '.[env.version] | if . then .version else empty end' versions.json)\"; then\n\t\t# support running \"generate-stackbrew-library.sh\" on a singular \"null\" version (\"20.10-rc\" when the RC is older than the GA release, for example)\n\t\tcontinue\n\tfi\n\n\tversionAliases=()\n\tif [ \"$version\" = \"$rcVersion\" ]; then\n\t\twhile [ \"$fullVersion\" != \"$rcVersion\" -a \"${fullVersion%[.-]*}\" != \"$fullVersion\" ]; do\n\t\t\tversionAliases+=( $fullVersion )\n\t\t\tfullVersion=\"${fullVersion%[.-]*}\"\n\t\tdone\n\telse\n\t\tversionAliases+=( $fullVersion )\n\tfi\n\tif [ \"$fullVersion\" != \"$version\" ]; then\n\t\tversionAliases+=(\n\t\t\t$version\n\t\t)\n\tfi\n\n\t# add a few channel/version-related aliases\n\tmajorVersion=\"${version%%.*}\"\n\tif [ \"$version\" != \"$rcVersion\" ] && [ -z \"${latestChannelRelease['rc']:-}\" ]; then\n\t\tversionAliases+=( 'rc' )\n\t\tlatestChannelRelease['rc']=\"$version\"\n\tfi\n\tif [ \"$version\" = \"$rcVersion\" ] && [ -z \"${latestChannelRelease[$majorVersion]:-}\" ]; then\n\t\tversionAliases+=( \"$majorVersion\" )\n\t\tlatestChannelRelease[\"$majorVersion\"]=\"$version\"\n\tfi\n\n\tchannel='stable'\n\tif [ \"$rcVersion\" != \"$version\" ]; then\n\t\tchannel='test'\n\tfi\n\t# every release goes into the \"test\" channel, so the biggest numbered release wins (RC or not)\n\tif [ -z \"${latestChannelRelease['test']:-}\" ]; then\n\t\tlatestChannelRelease['test']=\"$version\"\n\tfi\n\tif [ \"$version\" = \"$rcVersion\" ] && [ -z \"${latestChannelRelease['latest']:-}\" ]; then\n\t\tversionAliases+=( 'latest' )\n\t\tlatestChannelRelease['latest']=\"$version\"\n\tfi\n\n\tvariants=\"$(jq -r '.[env.version].variants | map(@sh) | join(\" \")' versions.json)\"\n\teval \"variants=( $variants )\"\n\n\tfor v in \"${variants[@]}\"; do\n\t\tdir=\"$version/$v\"\n\t\t[ -f \"$dir/Dockerfile\" ] || continue\n\n\t\tcommit=\"$(dirCommit \"$dir\")\"\n\n\t\tvariant=\"$(basename \"$v\")\"\n\t\tvariantAliases=( \"${versionAliases[@]/%/-$variant}\" )\n\t\tvariantAliases=( \"${variantAliases[@]//latest-/}\" )\n\n\t\tif [ \"$variant\" = 'cli' ] || [ \"$variant\" = 'dind' ]; then\n\t\t\tparent=\"$(awk 'toupper($1) == \"FROM\" { print $2 }' \"$version/cli/Dockerfile\")\"\n\t\t\talpine=\"${parent#*:}\" # \"3.14\"\n\t\t\tsuiteAliases=( \"${variantAliases[0]}\" ) # only \"X.Y.Z-foo\"\n\t\t\tsuiteAliases=( \"${suiteAliases[@]/%/-alpine$alpine}\" )\n\t\t\tsuiteAliases=( \"${suiteAliases[@]//latest-/}\" )\n\t\t\tvariantAliases+=( \"${suiteAliases[@]}\" )\n\t\t\tif [ \"$variant\" = 'dind' ]; then\n\t\t\t\t# add \"latest\" aliases\n\t\t\t\tsuiteAliases=( \"${versionAliases[0]}\" ) # only \"X.Y.Z-foo\"\n\t\t\t\tsuiteAliases=( \"${suiteAliases[@]/%/-alpine$alpine}\" )\n\t\t\t\tsuiteAliases=( \"${suiteAliases[@]//latest-/}\" )\n\t\t\t\tvariantAliases+=( \"${versionAliases[@]}\" \"${suiteAliases[@]}\" )\n\t\t\tfi\n\t\tfi\n\n\t\tsharedTags=()\n\t\tif [[ \"$variant\" == windowsservercore* ]]; then\n\t\t\tsharedTags=( \"${versionAliases[@]/%/-windowsservercore}\" )\n\t\t\tsharedTags=( \"${sharedTags[@]//latest-/}\" )\n\t\tfi\n\n\t\techo\n\t\techo \"Tags: $(join ', ' \"${variantAliases[@]}\")\"\n\t\tif [ \"${#sharedTags[@]}\" -gt 0 ]; then\n\t\t\techo \"SharedTags: $(join ', ' \"${sharedTags[@]}\")\"\n\t\tfi\n\t\tcat <<-EOE\n\t\t\tArchitectures: $(join ', ' $(versionArches \"$version\" \"$v\"))\n\t\t\tGitCommit: $commit\n\t\t\tDirectory: $dir\n\t\tEOE\n\t\tif [ \"$variant\" != \"$v\" ]; then\n\t\t\techo \"Constraints: $variant\"\n\t\t\techo 'Builder: classic' # no Windows support in BuildKit (yet)\n\t\tfi\n\tdone\ndone\n"
        },
        {
          "name": "modprobe.sh",
          "type": "blob",
          "size": 0.5732421875,
          "content": "#!/bin/sh\nset -eu\n\n# \"modprobe\" without modprobe\n# https://twitter.com/lucabruno/status/902934379835662336\n\n# this isn't 100% fool-proof, but it'll have a much higher success rate than simply using the \"real\" modprobe\n\n# Docker often uses \"modprobe -va foo bar baz\"\n# so we ignore modules that start with \"-\"\nfor module; do\n\tif [ \"${module#-}\" = \"$module\" ]; then\n\t\tip link show \"$module\" || true\n\t\tlsmod | grep \"$module\" || true\n\tfi\ndone\n\n# remove /usr/local/... from PATH so we can exec the real modprobe as a last resort\nexport PATH='/usr/sbin:/usr/bin:/sbin:/bin'\nexec modprobe \"$@\"\n"
        },
        {
          "name": "shared.jq",
          "type": "blob",
          "size": 1.650390625,
          "content": "# converts a bashbrew architecture to apk's strings\ndef apkArch:\n\t{\n\t\t# https://dl-cdn.alpinelinux.org/alpine/edge/main/\n\t\t# https://wiki.alpinelinux.org/wiki/Architecture#Alpine_Hardware_Architecture_.28.22arch.22.29_Support\n\t\t# https://pkgs.alpinelinux.org/packages (\"Arch\" dropdown)\n\t\tamd64: \"x86_64\",\n\t\tarm32v6: \"armhf\",\n\t\tarm32v7: \"armv7\",\n\t\tarm64v8: \"aarch64\",\n\t\ti386: \"x86\",\n\t\tppc64le: \"ppc64le\",\n\t\triscv64: \"riscv64\",\n\t\ts390x: \"s390x\",\n\t}[.]\n\t;\n\n# RUN set -eux; \\\n# \t...\n# \t{{\n# \t\tdownload({\n# \t\t\tarches: .arches,\n# \t\t\turlKey: \"dockerUrl\",\n# \t\t\t#sha256Key: \"sha256\",\n# \t\t\ttarget: \"docker.tgz\",\n# \t\t\t#missingArchWarning: true,\n# \t\t})\n# \t}}; \\\n# \t...\ndef download(opts):\n\t(opts.sha256Key | not) as $notSha256\n\t| [\n\t\"apkArch=\\\"$(apk --print-arch)\\\";\n\tcase \\\"$apkArch\\\" in\"\n\t\t,\n\t\t(\n\t\topts.arches | to_entries[]\n\t\t| .key as $bashbrewArch\n\t\t| ($bashbrewArch | apkArch) as $apkArch\n\t\t| .value\n\t\t| .[opts.urlKey] as $url\n\t\t| (if $notSha256 then \"none\" else .[opts.sha256Key] end) as $sha256\n\t\t| select($apkArch and $url and $sha256)\n\t\t| (\"\n\t\t\\($apkArch | @sh))\n\t\t\turl=\\($url | @sh);\"\n\t\t\t+ if $notSha256 then \"\" else \"\n\t\t\tsha256=\\($sha256 | @sh);\"\n\t\t\tend + \"\n\t\t\t;;\"\n\t\t\t)\n\t\t)\n\t\t,\n\t\t\"\n\t\t*) echo >&2 \\\"\\(if opts.missingArchWarning then \"warning\" else \"error\" end): unsupported \\(opts.target | @sh) architecture ($apkArch)\\(if opts.missingArchWarning then \"; skipping\" else \"\" end)\\\"; exit \\(if opts.missingArchWarning then 0 else 1 end) ;;\n\tesac;\n\t\n\twget -O \\(opts.target | @sh) \\\"$url\\\";\"\n\t,\n\tif $notSha256 then \"\" else \"\n\techo \\\"$sha256 *\\\"\\(opts.target | @sh) | sha256sum -c -;\"\n\tend\n\t] | add\n\t| rtrimstr(\";\")\n\t| gsub(\"(?<=[^[:space:]])\\n\"; \" \\\\\\n\")\n\t| gsub(\"(?<=[[:space:]])\\n\"; \"\\\\\\n\")\n\t;\n"
        },
        {
          "name": "update.sh",
          "type": "blob",
          "size": 0.12109375,
          "content": "#!/bin/bash\nset -eo pipefail\n\ncd \"$(dirname \"$(readlink -f \"$BASH_SOURCE\")\")\"\n\n./versions.sh \"$@\"\n./apply-templates.sh \"$@\"\n"
        },
        {
          "name": "versions.json",
          "type": "blob",
          "size": 15.705078125,
          "content": "{\n  \"27\": {\n    \"arches\": {\n      \"amd64\": {\n        \"dockerUrl\": \"https://download.docker.com/linux/static/stable/x86_64/docker-27.4.1.tgz\",\n        \"rootlessExtrasUrl\": \"https://download.docker.com/linux/static/stable/x86_64/docker-rootless-extras-27.4.1.tgz\"\n      },\n      \"arm32v6\": {\n        \"dockerUrl\": \"https://download.docker.com/linux/static/stable/armel/docker-27.4.1.tgz\"\n      },\n      \"arm32v7\": {\n        \"dockerUrl\": \"https://download.docker.com/linux/static/stable/armhf/docker-27.4.1.tgz\"\n      },\n      \"arm64v8\": {\n        \"dockerUrl\": \"https://download.docker.com/linux/static/stable/aarch64/docker-27.4.1.tgz\",\n        \"rootlessExtrasUrl\": \"https://download.docker.com/linux/static/stable/aarch64/docker-rootless-extras-27.4.1.tgz\"\n      },\n      \"windows-amd64\": {\n        \"dockerUrl\": \"https://download.docker.com/win/static/stable/x86_64/docker-27.4.1.zip\"\n      }\n    },\n    \"buildx\": {\n      \"arches\": {\n        \"amd64\": {\n          \"file\": \"buildx-v0.19.3.linux-amd64\",\n          \"sha256\": \"32ed111e941e385c2fb8261eba06a4056915718fd606f8278834ac1931d261a2\",\n          \"url\": \"https://github.com/docker/buildx/releases/download/v0.19.3/buildx-v0.19.3.linux-amd64\"\n        },\n        \"arm32v6\": {\n          \"file\": \"buildx-v0.19.3.linux-arm-v6\",\n          \"sha256\": \"744352489292ab1439e4b4facfd49f81cbe25e71e205908bd9ec44618759739c\",\n          \"url\": \"https://github.com/docker/buildx/releases/download/v0.19.3/buildx-v0.19.3.linux-arm-v6\"\n        },\n        \"arm32v7\": {\n          \"file\": \"buildx-v0.19.3.linux-arm-v7\",\n          \"sha256\": \"5a83e1663b595147ac0225d876fc77e3b441e62dac7a59523ba7003eb6733b8b\",\n          \"url\": \"https://github.com/docker/buildx/releases/download/v0.19.3/buildx-v0.19.3.linux-arm-v7\"\n        },\n        \"arm64v8\": {\n          \"file\": \"buildx-v0.19.3.linux-arm64\",\n          \"sha256\": \"138b587399b27bb61945a36d67866177b85dea1155101a2be63c7ab715f18a2e\",\n          \"url\": \"https://github.com/docker/buildx/releases/download/v0.19.3/buildx-v0.19.3.linux-arm64\"\n        },\n        \"freebsd-amd64\": {\n          \"file\": \"buildx-v0.19.3.freebsd-amd64\",\n          \"sha256\": \"dc8de077eda0f3d8d1433d790286ef7b88cb8bda01f6a83f2e6fd23d66a8e483\",\n          \"url\": \"https://github.com/docker/buildx/releases/download/v0.19.3/buildx-v0.19.3.freebsd-amd64\"\n        },\n        \"freebsd-arm64v8\": {\n          \"file\": \"buildx-v0.19.3.freebsd-arm64\",\n          \"sha256\": \"e846d4f727bb6f6fccd186b1325866aa26c281361cbaa43a6760ae9af7ade1dc\",\n          \"url\": \"https://github.com/docker/buildx/releases/download/v0.19.3/buildx-v0.19.3.freebsd-arm64\"\n        },\n        \"openbsd-amd64\": {\n          \"file\": \"buildx-v0.19.3.openbsd-amd64\",\n          \"sha256\": \"9cb27ed38bad3b61f4a50ea7411391aec13b278fc6af37230fdaee709706a5a2\",\n          \"url\": \"https://github.com/docker/buildx/releases/download/v0.19.3/buildx-v0.19.3.openbsd-amd64\"\n        },\n        \"openbsd-arm64v8\": {\n          \"file\": \"buildx-v0.19.3.openbsd-arm64\",\n          \"sha256\": \"d16ebd5bf33f9c98bed2019fa5fb8778ea77e3bb472737a2e23ab6737e2ea599\",\n          \"url\": \"https://github.com/docker/buildx/releases/download/v0.19.3/buildx-v0.19.3.openbsd-arm64\"\n        },\n        \"ppc64le\": {\n          \"file\": \"buildx-v0.19.3.linux-ppc64le\",\n          \"sha256\": \"b9eb337b16a75ad45ff846134d34599169bc6dfdb168fb51303fc6b08ed9f31e\",\n          \"url\": \"https://github.com/docker/buildx/releases/download/v0.19.3/buildx-v0.19.3.linux-ppc64le\"\n        },\n        \"riscv64\": {\n          \"file\": \"buildx-v0.19.3.linux-riscv64\",\n          \"sha256\": \"de8151fe6ced7118f2d680e1d1e7c5cb00496ca0e8b0f8b261450c6636d86978\",\n          \"url\": \"https://github.com/docker/buildx/releases/download/v0.19.3/buildx-v0.19.3.linux-riscv64\"\n        },\n        \"s390x\": {\n          \"file\": \"buildx-v0.19.3.linux-s390x\",\n          \"sha256\": \"422a9a0250d52dfdd6b78c8152fbf9df41993be4c7add93438c22122ff6c7da8\",\n          \"url\": \"https://github.com/docker/buildx/releases/download/v0.19.3/buildx-v0.19.3.linux-s390x\"\n        },\n        \"windows-amd64\": {\n          \"file\": \"buildx-v0.19.3.windows-amd64.exe\",\n          \"sha256\": \"fc24c33d547764ffc67ed430f5561c4d1bcbbee73df47648668331fa1cc2f289\",\n          \"url\": \"https://github.com/docker/buildx/releases/download/v0.19.3/buildx-v0.19.3.windows-amd64.exe\"\n        },\n        \"windows-arm64v8\": {\n          \"file\": \"buildx-v0.19.3.windows-arm64.exe\",\n          \"sha256\": \"f799675f89cdff20c76bc0b17953045df2cea47d09613779c4bcfd63ebee7bd9\",\n          \"url\": \"https://github.com/docker/buildx/releases/download/v0.19.3/buildx-v0.19.3.windows-arm64.exe\"\n        }\n      },\n      \"version\": \"0.19.3\"\n    },\n    \"compose\": {\n      \"arches\": {\n        \"amd64\": {\n          \"file\": \"docker-compose-linux-x86_64\",\n          \"sha256\": \"e746a42f33113ca1057a72adff5f07d584b38c94dd7cc8368f6a30c276367710\",\n          \"url\": \"https://github.com/docker/compose/releases/download/v2.32.2/docker-compose-linux-x86_64\"\n        },\n        \"arm32v6\": {\n          \"file\": \"docker-compose-linux-armv6\",\n          \"sha256\": \"7a527b3c21d2e9f1f98cef3b37ad2fcb84f410dfcd67916e6fad78123155d216\",\n          \"url\": \"https://github.com/docker/compose/releases/download/v2.32.2/docker-compose-linux-armv6\"\n        },\n        \"arm32v7\": {\n          \"file\": \"docker-compose-linux-armv7\",\n          \"sha256\": \"556710d309f248fffbfab835c1142e32ea9dd0b1ccfbdbeea2624db0f35c68a6\",\n          \"url\": \"https://github.com/docker/compose/releases/download/v2.32.2/docker-compose-linux-armv7\"\n        },\n        \"arm64v8\": {\n          \"file\": \"docker-compose-linux-aarch64\",\n          \"sha256\": \"c5b795b304410d46a754ecacfee36bf1f341e3bcd562a882525115e09ed90d6c\",\n          \"url\": \"https://github.com/docker/compose/releases/download/v2.32.2/docker-compose-linux-aarch64\"\n        },\n        \"darwin-amd64\": {\n          \"file\": \"docker-compose-darwin-x86_64\",\n          \"sha256\": \"e6a4a24eb51fec1d9376aea505220b22d76743dad5eec33779bb5fa5b2ecd56c\",\n          \"url\": \"https://github.com/docker/compose/releases/download/v2.32.2/docker-compose-darwin-x86_64\"\n        },\n        \"darwin-arm64v8\": {\n          \"file\": \"docker-compose-darwin-aarch64\",\n          \"sha256\": \"a603d6c3df1fce4e560a88750f914d18f9a81a76897be6f7edb244c625f8e385\",\n          \"url\": \"https://github.com/docker/compose/releases/download/v2.32.2/docker-compose-darwin-aarch64\"\n        },\n        \"ppc64le\": {\n          \"file\": \"docker-compose-linux-ppc64le\",\n          \"sha256\": \"4eb2cac95680923c50bd1b1248e460cafe99ebaa063e394dd5178bc4065e0efa\",\n          \"url\": \"https://github.com/docker/compose/releases/download/v2.32.2/docker-compose-linux-ppc64le\"\n        },\n        \"riscv64\": {\n          \"file\": \"docker-compose-linux-riscv64\",\n          \"sha256\": \"d007f7dd93ea364d1e341e53308691f61cebb86a45b63d002157c22cba80510d\",\n          \"url\": \"https://github.com/docker/compose/releases/download/v2.32.2/docker-compose-linux-riscv64\"\n        },\n        \"s390x\": {\n          \"file\": \"docker-compose-linux-s390x\",\n          \"sha256\": \"b91db23ea592c81162bb92b042873569cbe1e381400ad45447521cfa984bc184\",\n          \"url\": \"https://github.com/docker/compose/releases/download/v2.32.2/docker-compose-linux-s390x\"\n        },\n        \"windows-amd64\": {\n          \"file\": \"docker-compose-windows-x86_64.exe\",\n          \"sha256\": \"f384ad29e5187745cad4c18a14ddafd5e7a748c68b5bd991599b1756e36d3bec\",\n          \"url\": \"https://github.com/docker/compose/releases/download/v2.32.2/docker-compose-windows-x86_64.exe\"\n        },\n        \"windows-arm64v8\": {\n          \"file\": \"docker-compose-windows-aarch64.exe\",\n          \"sha256\": \"b61d5086feeb5323a9e263060e024f9d685d60b97a13d172c24cd385b27f302f\",\n          \"url\": \"https://github.com/docker/compose/releases/download/v2.32.2/docker-compose-windows-aarch64.exe\"\n        }\n      },\n      \"version\": \"2.32.2\"\n    },\n    \"dindCommit\": \"65cfcc28ab37cb75e1560e4b4738719c07c6618e\",\n    \"variants\": [\n      \"cli\",\n      \"dind\",\n      \"dind-rootless\",\n      \"windows/windowsservercore-ltsc2022\",\n      \"windows/windowsservercore-1809\"\n    ],\n    \"version\": \"27.4.1\"\n  },\n  \"27-rc\": {\n    \"arches\": {\n      \"amd64\": {\n        \"dockerUrl\": \"https://download.docker.com/linux/static/test/x86_64/docker-27.5.0-rc.2.tgz\",\n        \"rootlessExtrasUrl\": \"https://download.docker.com/linux/static/test/x86_64/docker-rootless-extras-27.5.0-rc.2.tgz\"\n      },\n      \"arm32v6\": {\n        \"dockerUrl\": \"https://download.docker.com/linux/static/test/armel/docker-27.5.0-rc.2.tgz\"\n      },\n      \"arm32v7\": {\n        \"dockerUrl\": \"https://download.docker.com/linux/static/test/armhf/docker-27.5.0-rc.2.tgz\"\n      },\n      \"arm64v8\": {\n        \"dockerUrl\": \"https://download.docker.com/linux/static/test/aarch64/docker-27.5.0-rc.2.tgz\",\n        \"rootlessExtrasUrl\": \"https://download.docker.com/linux/static/test/aarch64/docker-rootless-extras-27.5.0-rc.2.tgz\"\n      },\n      \"windows-amd64\": {\n        \"dockerUrl\": \"https://download.docker.com/win/static/test/x86_64/docker-27.5.0-rc.2.zip\"\n      }\n    },\n    \"buildx\": {\n      \"arches\": {\n        \"amd64\": {\n          \"file\": \"buildx-v0.19.3.linux-amd64\",\n          \"sha256\": \"32ed111e941e385c2fb8261eba06a4056915718fd606f8278834ac1931d261a2\",\n          \"url\": \"https://github.com/docker/buildx/releases/download/v0.19.3/buildx-v0.19.3.linux-amd64\"\n        },\n        \"arm32v6\": {\n          \"file\": \"buildx-v0.19.3.linux-arm-v6\",\n          \"sha256\": \"744352489292ab1439e4b4facfd49f81cbe25e71e205908bd9ec44618759739c\",\n          \"url\": \"https://github.com/docker/buildx/releases/download/v0.19.3/buildx-v0.19.3.linux-arm-v6\"\n        },\n        \"arm32v7\": {\n          \"file\": \"buildx-v0.19.3.linux-arm-v7\",\n          \"sha256\": \"5a83e1663b595147ac0225d876fc77e3b441e62dac7a59523ba7003eb6733b8b\",\n          \"url\": \"https://github.com/docker/buildx/releases/download/v0.19.3/buildx-v0.19.3.linux-arm-v7\"\n        },\n        \"arm64v8\": {\n          \"file\": \"buildx-v0.19.3.linux-arm64\",\n          \"sha256\": \"138b587399b27bb61945a36d67866177b85dea1155101a2be63c7ab715f18a2e\",\n          \"url\": \"https://github.com/docker/buildx/releases/download/v0.19.3/buildx-v0.19.3.linux-arm64\"\n        },\n        \"freebsd-amd64\": {\n          \"file\": \"buildx-v0.19.3.freebsd-amd64\",\n          \"sha256\": \"dc8de077eda0f3d8d1433d790286ef7b88cb8bda01f6a83f2e6fd23d66a8e483\",\n          \"url\": \"https://github.com/docker/buildx/releases/download/v0.19.3/buildx-v0.19.3.freebsd-amd64\"\n        },\n        \"freebsd-arm64v8\": {\n          \"file\": \"buildx-v0.19.3.freebsd-arm64\",\n          \"sha256\": \"e846d4f727bb6f6fccd186b1325866aa26c281361cbaa43a6760ae9af7ade1dc\",\n          \"url\": \"https://github.com/docker/buildx/releases/download/v0.19.3/buildx-v0.19.3.freebsd-arm64\"\n        },\n        \"openbsd-amd64\": {\n          \"file\": \"buildx-v0.19.3.openbsd-amd64\",\n          \"sha256\": \"9cb27ed38bad3b61f4a50ea7411391aec13b278fc6af37230fdaee709706a5a2\",\n          \"url\": \"https://github.com/docker/buildx/releases/download/v0.19.3/buildx-v0.19.3.openbsd-amd64\"\n        },\n        \"openbsd-arm64v8\": {\n          \"file\": \"buildx-v0.19.3.openbsd-arm64\",\n          \"sha256\": \"d16ebd5bf33f9c98bed2019fa5fb8778ea77e3bb472737a2e23ab6737e2ea599\",\n          \"url\": \"https://github.com/docker/buildx/releases/download/v0.19.3/buildx-v0.19.3.openbsd-arm64\"\n        },\n        \"ppc64le\": {\n          \"file\": \"buildx-v0.19.3.linux-ppc64le\",\n          \"sha256\": \"b9eb337b16a75ad45ff846134d34599169bc6dfdb168fb51303fc6b08ed9f31e\",\n          \"url\": \"https://github.com/docker/buildx/releases/download/v0.19.3/buildx-v0.19.3.linux-ppc64le\"\n        },\n        \"riscv64\": {\n          \"file\": \"buildx-v0.19.3.linux-riscv64\",\n          \"sha256\": \"de8151fe6ced7118f2d680e1d1e7c5cb00496ca0e8b0f8b261450c6636d86978\",\n          \"url\": \"https://github.com/docker/buildx/releases/download/v0.19.3/buildx-v0.19.3.linux-riscv64\"\n        },\n        \"s390x\": {\n          \"file\": \"buildx-v0.19.3.linux-s390x\",\n          \"sha256\": \"422a9a0250d52dfdd6b78c8152fbf9df41993be4c7add93438c22122ff6c7da8\",\n          \"url\": \"https://github.com/docker/buildx/releases/download/v0.19.3/buildx-v0.19.3.linux-s390x\"\n        },\n        \"windows-amd64\": {\n          \"file\": \"buildx-v0.19.3.windows-amd64.exe\",\n          \"sha256\": \"fc24c33d547764ffc67ed430f5561c4d1bcbbee73df47648668331fa1cc2f289\",\n          \"url\": \"https://github.com/docker/buildx/releases/download/v0.19.3/buildx-v0.19.3.windows-amd64.exe\"\n        },\n        \"windows-arm64v8\": {\n          \"file\": \"buildx-v0.19.3.windows-arm64.exe\",\n          \"sha256\": \"f799675f89cdff20c76bc0b17953045df2cea47d09613779c4bcfd63ebee7bd9\",\n          \"url\": \"https://github.com/docker/buildx/releases/download/v0.19.3/buildx-v0.19.3.windows-arm64.exe\"\n        }\n      },\n      \"version\": \"0.19.3\"\n    },\n    \"compose\": {\n      \"arches\": {\n        \"amd64\": {\n          \"file\": \"docker-compose-linux-x86_64\",\n          \"sha256\": \"e746a42f33113ca1057a72adff5f07d584b38c94dd7cc8368f6a30c276367710\",\n          \"url\": \"https://github.com/docker/compose/releases/download/v2.32.2/docker-compose-linux-x86_64\"\n        },\n        \"arm32v6\": {\n          \"file\": \"docker-compose-linux-armv6\",\n          \"sha256\": \"7a527b3c21d2e9f1f98cef3b37ad2fcb84f410dfcd67916e6fad78123155d216\",\n          \"url\": \"https://github.com/docker/compose/releases/download/v2.32.2/docker-compose-linux-armv6\"\n        },\n        \"arm32v7\": {\n          \"file\": \"docker-compose-linux-armv7\",\n          \"sha256\": \"556710d309f248fffbfab835c1142e32ea9dd0b1ccfbdbeea2624db0f35c68a6\",\n          \"url\": \"https://github.com/docker/compose/releases/download/v2.32.2/docker-compose-linux-armv7\"\n        },\n        \"arm64v8\": {\n          \"file\": \"docker-compose-linux-aarch64\",\n          \"sha256\": \"c5b795b304410d46a754ecacfee36bf1f341e3bcd562a882525115e09ed90d6c\",\n          \"url\": \"https://github.com/docker/compose/releases/download/v2.32.2/docker-compose-linux-aarch64\"\n        },\n        \"darwin-amd64\": {\n          \"file\": \"docker-compose-darwin-x86_64\",\n          \"sha256\": \"e6a4a24eb51fec1d9376aea505220b22d76743dad5eec33779bb5fa5b2ecd56c\",\n          \"url\": \"https://github.com/docker/compose/releases/download/v2.32.2/docker-compose-darwin-x86_64\"\n        },\n        \"darwin-arm64v8\": {\n          \"file\": \"docker-compose-darwin-aarch64\",\n          \"sha256\": \"a603d6c3df1fce4e560a88750f914d18f9a81a76897be6f7edb244c625f8e385\",\n          \"url\": \"https://github.com/docker/compose/releases/download/v2.32.2/docker-compose-darwin-aarch64\"\n        },\n        \"ppc64le\": {\n          \"file\": \"docker-compose-linux-ppc64le\",\n          \"sha256\": \"4eb2cac95680923c50bd1b1248e460cafe99ebaa063e394dd5178bc4065e0efa\",\n          \"url\": \"https://github.com/docker/compose/releases/download/v2.32.2/docker-compose-linux-ppc64le\"\n        },\n        \"riscv64\": {\n          \"file\": \"docker-compose-linux-riscv64\",\n          \"sha256\": \"d007f7dd93ea364d1e341e53308691f61cebb86a45b63d002157c22cba80510d\",\n          \"url\": \"https://github.com/docker/compose/releases/download/v2.32.2/docker-compose-linux-riscv64\"\n        },\n        \"s390x\": {\n          \"file\": \"docker-compose-linux-s390x\",\n          \"sha256\": \"b91db23ea592c81162bb92b042873569cbe1e381400ad45447521cfa984bc184\",\n          \"url\": \"https://github.com/docker/compose/releases/download/v2.32.2/docker-compose-linux-s390x\"\n        },\n        \"windows-amd64\": {\n          \"file\": \"docker-compose-windows-x86_64.exe\",\n          \"sha256\": \"f384ad29e5187745cad4c18a14ddafd5e7a748c68b5bd991599b1756e36d3bec\",\n          \"url\": \"https://github.com/docker/compose/releases/download/v2.32.2/docker-compose-windows-x86_64.exe\"\n        },\n        \"windows-arm64v8\": {\n          \"file\": \"docker-compose-windows-aarch64.exe\",\n          \"sha256\": \"b61d5086feeb5323a9e263060e024f9d685d60b97a13d172c24cd385b27f302f\",\n          \"url\": \"https://github.com/docker/compose/releases/download/v2.32.2/docker-compose-windows-aarch64.exe\"\n        }\n      },\n      \"version\": \"2.32.2\"\n    },\n    \"dindCommit\": \"65cfcc28ab37cb75e1560e4b4738719c07c6618e\",\n    \"variants\": [\n      \"cli\",\n      \"dind\",\n      \"dind-rootless\",\n      \"windows/windowsservercore-ltsc2022\",\n      \"windows/windowsservercore-1809\"\n    ],\n    \"version\": \"27.5.0-rc.2\"\n  }\n}\n"
        },
        {
          "name": "versions.sh",
          "type": "blob",
          "size": 8.5029296875,
          "content": "#!/usr/bin/env bash\nset -Eeuo pipefail\n\n# bashbrew arch to docker-release-arch\ndeclare -A dockerArches=(\n\t['amd64']='x86_64'\n\t['arm32v6']='armel'\n\t['arm32v7']='armhf'\n\t['arm64v8']='aarch64'\n\t['ppc64le']='ppc64le'\n\t['riscv64']='riscv64'\n\t['s390x']='s390x'\n\t['windows-amd64']='x86_64'\n)\n\ncd \"$(dirname \"$(readlink -f \"$BASH_SOURCE\")\")\"\n\nversions=( \"$@\" )\nif [ ${#versions[@]} -eq 0 ]; then\n\tversions=( */ )\n\tjson='{}'\nelse\n\tjson=\"$(< versions.json)\"\nfi\nversions=( \"${versions[@]%/}\" )\n\nscriptPid=\"$$\" # so we can kill the script even from a subshell\n_curl() {\n\texec 42>&1\n\tlocal code\n\tcode=\"$(curl --silent --location -o /dev/fd/42 --write-out '%{http_code}' \"$@\")\"\n\tcase \"$code\" in\n\t\t200) return 0 ;;\n\t\t404) return 1 ;;\n\tesac\n\techo >&2 \"error: unexpected status code $code while fetching: $*\"\n\tkill \"$scriptPid\"\n\texit 1\n}\n\ndindLatest=\"$(\n\t_curl -H 'Accept: application/json' 'https://github.com/docker/docker/commits/master/hack/dind.atom' \\\n\t\t| jq -r '.payload | first(.commitGroups[].commits[].oid)'\n)\"\n\ndockerVersions=\"$(\n\tgit ls-remote --tags https://github.com/docker/docker.git \\\n\t\t| cut -d$'\\t' -f2 \\\n\t\t| grep '^refs/tags/v[0-9].*$' \\\n\t\t| sed 's!^refs/tags/v!!; s!\\^{}$!!' \\\n\t\t| sort -u \\\n\t\t| gawk '\n\t\t\t{ data[lines++] = $0 }\n\n\t\t\t# \"beta\" sorts lower than \"tp\" even though \"beta\" is a more preferred release, so we need to explicitly adjust the sorting order for RCs\n\t\t\t# also, \"18.09.0-ce-beta1\" vs \"18.09.0-beta3\"\n\t\t\tfunction docker_version_compare(i1, v1, i2, v2, l, r) {\n\t\t\t\tl = v1; gsub(/-ce/, \"\", l); gsub(/-tp/, \"-alpha\", l)\n\t\t\t\tr = v2; gsub(/-ce/, \"\", r); gsub(/-tp/, \"-alpha\", r)\n\t\t\t\tpatsplit(l, ltemp, /[^.-]+/)\n\t\t\t\tpatsplit(r, rtemp, /[^.-]+/)\n\t\t\t\tfor (i = 0; i < length(ltemp) && i < length(rtemp); ++i) {\n\t\t\t\t\tif (ltemp[i] < rtemp[i]) {\n\t\t\t\t\t\treturn -1\n\t\t\t\t\t}\n\t\t\t\t\tif (ltemp[i] > rtemp[i]) {\n\t\t\t\t\t\treturn 1\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn 0\n\t\t\t}\n\n\t\t\tEND {\n\t\t\t\tasort(data, result, \"docker_version_compare\")\n\t\t\t\tfor (i in result) {\n\t\t\t\t\tprint result[i]\n\t\t\t\t}\n\t\t\t}\n\t\t'\n)\"\n\nbuildxVersions=\"$(\n\tgit ls-remote --tags https://github.com/docker/buildx.git \\\n\t\t| cut -d$'\\t' -f2 \\\n\t\t| grep '^refs/tags/v[0-9].*$' \\\n\t\t| sed 's!^refs/tags/v!!; s!\\^{}$!!' \\\n\t\t| grep -vE -- '-rc' \\\n\t\t| sort -ruV\n)\"\nbuildx=\nbuildxVersion=\nfor buildxVersion in $buildxVersions; do\n\tif checksums=\"$(_curl \"https://github.com/docker/buildx/releases/download/v${buildxVersion}/checksums.txt\")\"; then\n\t\tbuildx=\"$(jq <<<\"$checksums\" -csR --arg version \"$buildxVersion\" '\n\t\t\trtrimstr(\"\\n\") | split(\"\\n\")\n\t\t\t| map(\n\t\t\t\tsplit(\" [ *]?\"; \"\")\n\t\t\t\t| {\n\t\t\t\t\tsha256: .[0],\n\t\t\t\t\tfile: .[1],\n\t\t\t\t\turl: (\"https://github.com/docker/buildx/releases/download/v\" + $version + \"/\" + .[1]),\n\t\t\t\t}\n\t\t\t\t| select(.file | test(\"[.]json$\") | not)\n\t\t\t\t| { (\n\t\t\t\t\t.file\n\t\t\t\t\t| capture(\"[.](?<os>linux|windows|darwin|freebsd|openbsd)-(?<arch>[^.]+)(?<ext>[.]exe)?$\")\n\t\t\t\t\t// error(\"failed to parse os-arch from filename: \" + .)\n\t\t\t\t\t| if .os == \"linux\" then \"\" else .os + \"-\" end\n\t\t\t\t\t+ ({\n\t\t\t\t\t\t\"amd64\": \"amd64\",\n\t\t\t\t\t\t\"arm-v6\": \"arm32v6\",\n\t\t\t\t\t\t\"arm-v7\": \"arm32v7\",\n\t\t\t\t\t\t\"arm64\": \"arm64v8\",\n\t\t\t\t\t\t\"ppc64le\": \"ppc64le\",\n\t\t\t\t\t\t\"riscv64\": \"riscv64\",\n\t\t\t\t\t\t\"s390x\": \"s390x\",\n\t\t\t\t\t}[.arch] // error(\"unknown buildx architecture: \" + .arch))\n\t\t\t\t): . }\n\t\t\t)\n\t\t\t| add\n\t\t\t| {\n\t\t\t\tversion: $version,\n\t\t\t\tarches: .,\n\t\t\t}\n\t\t')\"\n\t\tbreak\n\tfi\ndone\nif [ -z \"$buildx\" ]; then\n\techo >&2 'error: failed to determine buildx version!'\n\texit 1\nfi\n\ncomposeVersions=\"$(\n\tgit ls-remote --tags https://github.com/docker/compose.git \\\n\t\t| cut -d$'\\t' -f2 \\\n\t\t| grep '^refs/tags/v[0-9].*$' \\\n\t\t| sed 's!^refs/tags/v!!; s!\\^{}$!!' \\\n\t\t| grep -vE -- '-[a-zA-Z]' \\\n\t\t| sort -ruV\n)\"\ncompose=\ncomposeVersion=\nfor composeVersion in $composeVersions; do\n\tif checksums=\"$(_curl \"https://github.com/docker/compose/releases/download/v${composeVersion}/checksums.txt\")\"; then\n\t\tcompose=\"$(jq <<<\"$checksums\" -csR --arg version \"$composeVersion\" '\n\t\t\trtrimstr(\"\\n\") | split(\"\\n\")\n\t\t\t| map(\n\t\t\t\tsplit(\" *\")\n\t\t\t\t| {\n\t\t\t\t\tsha256: .[0],\n\t\t\t\t\tfile: .[1],\n\t\t\t\t\turl: (\"https://github.com/docker/compose/releases/download/v\" + $version + \"/\" + .[1]),\n\t\t\t\t}\n\t\t\t\t| select(.file | test(\"[.]json$\") | not)\n\t\t\t\t| { (\n\t\t\t\t\t.file\n\t\t\t\t\t| capture(\"-(?<os>linux|windows|darwin|freebsd|openbsd)-(?<arch>[^.]+)(?<ext>[.]exe)?$\")\n\t\t\t\t\t// error(\"failed to parse os-arch from filename: \" + .)\n\t\t\t\t\t| if .os == \"linux\" then \"\" else .os + \"-\" end\n\t\t\t\t\t+ ({\n\t\t\t\t\t\taarch64: \"arm64v8\",\n\t\t\t\t\t\tarmv6: \"arm32v6\",\n\t\t\t\t\t\tarmv7: \"arm32v7\",\n\t\t\t\t\t\tppc64le: \"ppc64le\",\n\t\t\t\t\t\triscv64: \"riscv64\",\n\t\t\t\t\t\ts390x: \"s390x\",\n\t\t\t\t\t\tx86_64: \"amd64\",\n\t\t\t\t\t}[.arch] // error(\"unknown compose architecture: \" + .arch))\n\t\t\t\t): . }\n\t\t\t)\n\t\t\t| add\n\t\t\t| {\n\t\t\t\tversion: $version,\n\t\t\t\tarches: .,\n\t\t\t}\n\t\t')\"\n\t\tbreak\n\tfi\ndone\nif [ -z \"$compose\" ]; then\n\techo >&2 'error: failed to determine compose version!'\n\texit 1\nfi\n\nfor version in \"${versions[@]}\"; do\n\trcVersion=\"${version%-rc}\"\n\texport version rcVersion\n\tchannel='stable'\n\n\tversionOptions=\"$(grep \"^$rcVersion[.]\" <<<\"$dockerVersions\")\"\n\n\trcGrepV='-v'\n\tif [ \"$rcVersion\" != \"$version\" ]; then\n\t\trcGrepV=\n\t\tchannel='test'\n\tfi\n\n\tif ! fullVersion=\"$(grep $rcGrepV -E -- '-(rc|tp|beta)' <<<\"$versionOptions\" | tail -1)\" || [ -z \"$fullVersion\" ]; then\n\t\tif currentNull=\"$(jq -r '.[env.version] == null' versions.json)\" && [ \"$currentNull\" = 'true' ]; then\n\t\t\techo >&2 \"warning: skipping '$version' (does not appear to be released yet)\"\n\t\t\tjson=\"$(jq <<<\"$json\" -c '.[env.version] = null')\"\n\t\t\tcontinue\n\t\tfi\n\t\techo >&2 \"error: cannot find full version for $version\"\n\t\texit 1\n\tfi\n\n\t# if this is a \"-rc\" release, let's make sure the release it contains isn't already GA (and thus something we should not publish anymore)\n\tif [ \"$rcVersion\" != \"$version\" ] && rcFullVersion=\"$(jq <<<\"$json\" -r '.[env.rcVersion].version // \"\"')\" && [ -n \"$rcFullVersion\" ]; then\n\t\tlatestVersion=\"$({ echo \"$fullVersion\"; echo \"$rcFullVersion\"; } | sort -V | tail -1)\"\n\t\tif [[ \"$fullVersion\" == \"$rcFullVersion\"* ]] || [ \"$latestVersion\" = \"$rcFullVersion\" ]; then\n\t\t\t# \"x.y.z-rc1\" == x.y.z*\n\t\t\techo >&2 \"warning: skipping/removing '$version' ('$rcVersion' is at '$rcFullVersion' which is newer than '$fullVersion')\"\n\t\t\tjson=\"$(jq <<<\"$json\" -c '.[env.version] = null')\"\n\t\t\tcontinue\n\t\tfi\n\tfi\n\n\techo \"$version: $fullVersion (buildx $buildxVersion, compose $composeVersion)\"\n\n\texport fullVersion dindLatest\n\tdoc=\"$(\n\t\tjq -nc --argjson buildx \"$buildx\" --argjson compose \"$compose\" '{\n\t\t\tversion: env.fullVersion,\n\t\t\tarches: {},\n\t\t\tdindCommit: env.dindLatest,\n\t\t\tbuildx: $buildx,\n\t\t\tcompose: $compose,\n\t\t}'\n\t)\"\n\n\tdeclare -A hasArches=()\n\tfor bashbrewArch in \"${!dockerArches[@]}\"; do\n\t\tarch=\"${dockerArches[$bashbrewArch]}\"\n\t\t# check whether the given architecture is supported for this release\n\t\tcase \"$bashbrewArch\" in\n\t\t\twindows-*) url=\"https://download.docker.com/win/static/$channel/$arch/docker-$fullVersion.zip\"; windows=1 ;;\n\t\t\t*) url=\"https://download.docker.com/linux/static/$channel/$arch/docker-$fullVersion.tgz\"; windows= ;;\n\t\tesac\n\t\tif _curl --head \"$url\" > /dev/null; then\n\t\t\texport bashbrewArch url\n\t\t\tdoc=\"$(\n\t\t\t\tjq <<<\"$doc\" -c '.arches[env.bashbrewArch] = {\n\t\t\t\t\tdockerUrl: env.url,\n\t\t\t\t}'\n\t\t\t)\"\n\t\telse\n\t\t\tcontinue\n\t\tfi\n\n\t\thasArches[\"$bashbrewArch\"]=1\n\n\t\tif [ -n \"$windows\" ]; then\n\t\t\tcontinue # Windows doesn't have rootless extras :)\n\t\tfi\n\n\t\t# https://github.com/moby/moby/blob/v20.10.7/hack/make/binary-daemon#L24\n\t\t# \"vpnkit is available for x86_64 and aarch64\"\n\t\tcase \"$bashbrewArch\" in\n\t\t\tamd64 | arm64v8)\n\t\t\t\trootlessExtrasUrl=\"https://download.docker.com/linux/static/$channel/$arch/docker-rootless-extras-$fullVersion.tgz\"\n\t\t\t\tif _curl --head \"$rootlessExtrasUrl\" > /dev/null; then\n\t\t\t\t\texport rootlessExtrasUrl\n\t\t\t\t\tdoc=\"$(jq <<<\"$doc\" -c '\n\t\t\t\t\t\t.arches[env.bashbrewArch].rootlessExtrasUrl = env.rootlessExtrasUrl\n\t\t\t\t\t')\"\n\t\t\t\tfi\n\t\t\t\t;;\n\t\tesac\n\tdone\n\n\tfor alwaysExpectedArch in amd64 arm64v8; do\n\t\tif [ -z \"${hasArches[\"$alwaysExpectedArch\"]:-}\" ]; then\n\t\t\techo >&2 \"error: missing '$alwaysExpectedArch' for '$version'; cowardly refusing to continue! (because this is almost always a scraping flake or similar bug)\"\n\t\t\texit 1\n\t\tfi\n\tdone\n\n\t# order here controls the order of the library/ file\n\tfor variant in \\\n\t\tcli \\\n\t\tdind \\\n\t\tdind-rootless \\\n\t\twindows/windowsservercore-ltsc2022 \\\n\t\twindows/windowsservercore-1809 \\\n\t; do\n\t\tbase=\"${variant%%/*}\" # \"buster\", \"windows\", etc.\n\t\tif [ \"$base\" = 'windows' ] && [ -z \"${hasArches['windows-amd64']}\" ]; then\n\t\t\tcontinue\n\t\tfi\n\t\texport variant\n\t\tdoc=\"$(jq <<<\"$doc\" -c '.variants += [ env.variant ]')\"\n\tdone\n\n\tjson=\"$(jq <<<\"$json\" -c --argjson doc \"$doc\" '\n\t\t.[env.version] = $doc\n\t\t# make sure both \"XX.YY\" and \"XX.YY-rc\" always exist\n\t\t| .[env.rcVersion] //= null\n\t\t| .[env.rcVersion + \"-rc\"] //= null\n\t')\"\ndone\n\njq <<<\"$json\" -S . > versions.json\n"
        }
      ]
    }
  ]
}