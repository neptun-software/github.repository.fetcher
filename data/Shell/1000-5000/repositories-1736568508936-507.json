{
  "metadata": {
    "timestamp": 1736568508936,
    "page": 507,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUwOQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "atmoz/sftp",
      "stars": 1690,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0107421875,
          "content": ".git\ntests\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.091796875,
          "content": "[submodule \"tests/shunit2\"]\n\tpath = tests/shunit2\n\turl = https://github.com/kward/shunit2.git\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.625,
          "content": "FROM debian:bookworm\nMAINTAINER Adrian Dvergsdal [atmoz.net]\n\n# Steps done in one RUN layer:\n# - Install upgrades and new packages\n# - OpenSSH needs /var/run/sshd to run\n# - Remove generic host keys, entrypoint generates unique keys\nRUN apt-get update && \\\n    apt-get upgrade -y && \\\n    DEBIAN_FRONTEND=\"noninteractive\" apt-get -y install --no-install-recommends openssh-server && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    mkdir -p /var/run/sshd && \\\n    rm -f /etc/ssh/ssh_host_*key*\n\nCOPY files/sshd_config /etc/ssh/sshd_config\nCOPY files/create-sftp-user /usr/local/bin/\nCOPY files/entrypoint /\n\nEXPOSE 22\n\nENTRYPOINT [\"/entrypoint\"]\n"
        },
        {
          "name": "Dockerfile-alpine",
          "type": "blob",
          "size": 0.619140625,
          "content": "FROM alpine:latest\nMAINTAINER Adrian Dvergsdal [atmoz.net]\n\n# Steps done in one RUN layer:\n# - Install upgrades and new packages\n# - OpenSSH needs /var/run/sshd to run\n# - Remove generic host keys, entrypoint generates unique keys\nRUN apk update && apk upgrade && \\\n    apk add bash shadow openssh-server-pam openssh-sftp-server && \\\n    rm -rf /var/cache/apk/* && \\\n    ln -s /usr/sbin/sshd.pam /usr/sbin/sshd && \\\n    mkdir -p /var/run/sshd && \\\n    rm -f /etc/ssh/ssh_host_*key*\n\nCOPY files/sshd_config /etc/ssh/sshd_config\nCOPY files/create-sftp-user /usr/local/bin/\nCOPY files/entrypoint /\n\nEXPOSE 22\n\nENTRYPOINT [\"/entrypoint\"]\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.04296875,
          "content": "MIT License\n\nCopyright (c) Adrian Dvergsdal\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.3974609375,
          "content": "# SFTP\n\n![GitHub Workflow Status](https://img.shields.io/github/actions/workflow/status/atmoz/sftp/build.yml?logo=github) ![GitHub stars](https://img.shields.io/github/stars/atmoz/sftp?logo=github) ![Docker Stars](https://img.shields.io/docker/stars/atmoz/sftp?label=stars&logo=docker) ![Docker Pulls](https://img.shields.io/docker/pulls/atmoz/sftp?label=pulls&logo=docker)\n\n![OpenSSH logo](https://raw.githubusercontent.com/atmoz/sftp/master/openssh.png \"Powered by OpenSSH\")\n\n# Supported tags and respective `Dockerfile` links\n\n- [`debian`, `latest` (*Dockerfile*)](https://github.com/atmoz/sftp/blob/master/Dockerfile) ![Docker Image Size (debian)](https://img.shields.io/docker/image-size/atmoz/sftp/debian?label=debian&logo=debian&style=plastic)\n- [`alpine` (*Dockerfile*)](https://github.com/atmoz/sftp/blob/master/Dockerfile-alpine) ![Docker Image Size (alpine)](https://img.shields.io/docker/image-size/atmoz/sftp/alpine?label=alpine&logo=Alpine%20Linux&style=plastic)\n\n# Securely share your files\n\nEasy to use SFTP ([SSH File Transfer Protocol](https://en.wikipedia.org/wiki/SSH_File_Transfer_Protocol)) server with [OpenSSH](https://en.wikipedia.org/wiki/OpenSSH).\n\n# Usage\n\n- Define users in (1) command arguments, (2) `SFTP_USERS` environment variable\n  or (3) in file mounted as `/etc/sftp/users.conf` (syntax:\n  `user:pass[:e][:uid[:gid[:dir1[,dir2]...]]] ...`, see below for examples)\n  - Set UID/GID manually for your users if you want them to make changes to\n    your mounted volumes with permissions matching your host filesystem.\n  - Directory names at the end will be created under user's home directory with\n    write permission, if they aren't already present.\n- Mount volumes\n  - The users are chrooted to their home directory, so you can mount the\n    volumes in separate directories inside the user's home directory\n    (/home/user/**mounted-directory**) or just mount the whole **/home** directory.\n    Just remember that the users can't create new files directly under their\n    own home directory, so make sure there are at least one subdirectory if you\n    want them to upload files.\n  - For consistent server fingerprint, mount your own host keys (i.e. `/etc/ssh/ssh_host_*`)\n\n# Examples\n\n## Simplest docker run example\n\n```\ndocker run -p 22:22 -d atmoz/sftp foo:pass:::upload\n```\n\nUser \"foo\" with password \"pass\" can login with sftp and upload files to a folder called \"upload\". No mounted directories or custom UID/GID. Later you can inspect the files and use `--volumes-from` to mount them somewhere else (or see next example).\n\n## Sharing a directory from your computer\n\nLet's mount a directory and set UID:\n\n```\ndocker run \\\n    -v <host-dir>/upload:/home/foo/upload \\\n    -p 2222:22 -d atmoz/sftp \\\n    foo:pass:1001\n```\n\n### Using Docker Compose:\n\n```\nsftp:\n    image: atmoz/sftp\n    volumes:\n        - <host-dir>/upload:/home/foo/upload\n    ports:\n        - \"2222:22\"\n    command: foo:pass:1001\n```\n\n### Logging in\n\nThe OpenSSH server runs by default on port 22, and in this example, we are forwarding the container's port 22 to the host's port 2222. To log in with the OpenSSH client, run: `sftp -P 2222 foo@<host-ip>`\n\n## Store users in config\n\n```\ndocker run \\\n    -v <host-dir>/users.conf:/etc/sftp/users.conf:ro \\\n    -v mySftpVolume:/home \\\n    -p 2222:22 -d atmoz/sftp\n```\n\n<host-dir>/users.conf:\n\n```\nfoo:123:1001:100\nbar:abc:1002:100\nbaz:xyz:1003:100\n```\n\n## Encrypted password\n\nAdd `:e` behind password to mark it as encrypted. Use single quotes if using terminal.\n\n```\ndocker run \\\n    -v <host-dir>/share:/home/foo/share \\\n    -p 2222:22 -d atmoz/sftp \\\n    'foo:$1$0G2g0GSt$ewU0t6GXG15.0hWoOX8X9.:e:1001'\n```\n\nTip: you can use this Python code to generate encrypted passwords:  \n`docker run --rm python:alpine python -c \"import crypt; print(crypt.crypt('YOUR_PASSWORD'))\"`\n\n## Logging in with SSH keys\n\nMount public keys in the user's `.ssh/keys/` directory. All keys are automatically appended to `.ssh/authorized_keys` (you can't mount this file directly, because OpenSSH requires limited file permissions). In this example, we do not provide any password, so the user `foo` can only login with his SSH key.\n\n```\ndocker run \\\n    -v <host-dir>/id_rsa.pub:/home/foo/.ssh/keys/id_rsa.pub:ro \\\n    -v <host-dir>/id_other.pub:/home/foo/.ssh/keys/id_other.pub:ro \\\n    -v <host-dir>/share:/home/foo/share \\\n    -p 2222:22 -d atmoz/sftp \\\n    foo::1001\n```\n\n## Providing your own SSH host key (recommended)\n\nThis container will generate new SSH host keys at first run. To avoid that your users get a MITM warning when you recreate your container (and the host keys changes), you can mount your own host keys.\n\n```\ndocker run \\\n    -v <host-dir>/ssh_host_ed25519_key:/etc/ssh/ssh_host_ed25519_key \\\n    -v <host-dir>/ssh_host_rsa_key:/etc/ssh/ssh_host_rsa_key \\\n    -v <host-dir>/share:/home/foo/share \\\n    -p 2222:22 -d atmoz/sftp \\\n    foo::1001\n```\n\nTip: you can generate your keys with these commands:\n\n```\nssh-keygen -t ed25519 -f ssh_host_ed25519_key < /dev/null\nssh-keygen -t rsa -b 4096 -f ssh_host_rsa_key < /dev/null\n```\n\n## Execute custom scripts or applications\n\nPut your programs in `/etc/sftp.d/` and it will automatically run when the container starts.\nSee next section for an example.\n\n## Bindmount dirs from another location\n\nIf you are using `--volumes-from` or just want to make a custom directory available in user's home directory, you can add a script to `/etc/sftp.d/` that bindmounts after container starts.\n\n```\n#!/bin/bash\n# File mounted as: /etc/sftp.d/bindmount.sh\n# Just an example (make your own)\n\nfunction bindmount() {\n    if [ -d \"$1\" ]; then\n        mkdir -p \"$2\"\n    fi\n    mount --bind $3 \"$1\" \"$2\"\n}\n\n# Remember permissions, you may have to fix them:\n# chown -R :users /data/common\n\nbindmount /data/admin-tools /home/admin/tools\nbindmount /data/common /home/dave/common\nbindmount /data/common /home/peter/common\nbindmount /data/docs /home/peter/docs --read-only\n```\n\n**NOTE:** Using `mount` requires that your container runs with the `CAP_SYS_ADMIN` capability turned on. [See this answer for more information](https://github.com/atmoz/sftp/issues/60#issuecomment-332909232).\n\n# What's the difference between Debian and Alpine?\n\nThe biggest differences are in size and OpenSSH version. [Alpine](https://hub.docker.com/_/alpine/) is 10 times smaller than [Debian](https://hub.docker.com/_/debian/). OpenSSH version can also differ, as it's two different teams maintaining the packages. Debian is generally considered more stable and only bugfixes and security fixes are added after each Debian release (about 2 years). Alpine has a faster release cycle (about 6 months) and therefore newer versions of OpenSSH. As I'm writing this, Debian has version 7.4 while Alpine has version 7.5. Recommended reading: [Comparing Debian vs Alpine for container & Docker apps](https://www.turnkeylinux.org/blog/alpine-vs-debian)\n\n# What version of OpenSSH do I get?\n\nIt depends on which linux distro and version you choose (see available images at the top). You can see what version you get by checking the distro's packages online. I have provided direct links below for easy access.\n\n- [List of `openssh` packages on Alpine releases](https://pkgs.alpinelinux.org/packages?name=openssh&branch=&repo=main&arch=x86_64)\n- [List of `openssh-server` packages on Debian releases](https://packages.debian.org/search?keywords=openssh-server&searchon=names&exact=1&suite=all&section=main)\n\n# Daily builds\n\nImages are automatically built daily to get the newest version of OpenSSH provided by the package managers.\n"
        },
        {
          "name": "files",
          "type": "tree",
          "content": null
        },
        {
          "name": "openssh.png",
          "type": "blob",
          "size": 36.322265625,
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}