{
  "metadata": {
    "timestamp": 1736568290434,
    "page": 191,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "linuxeye/lnmp",
      "stars": 2711,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.01171875,
          "content": "install.log\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.349609375,
          "content": "## Recommend\n\nThis project no longer adds new features and is only for daily maintenance. It is recommended to use the docker-compose version. Project link: https://github.com/linuxeye/bypanel\n\n[Aliyun ECS recommend](https://www.aliyun.com/daily-act/ecs/activity_selection?userCode=ird24dsz)\n\n## lnmp\nThis script is written using the shell, in order to quickly deploy `LEMP`/`LAMP`/`LNMP`/`LNMPA`/`LTMP`(Linux, Nginx/Tengine/OpenResty, MySQL in a production environment/MariaDB/Percona, PHP, JAVA), applicable to RHEL 7, 8, 9(including CentOS,RedHat,AlmaLinux,Rocky), Debian 9, 10, 11, 12, Ubuntu 16, 18, 20, 22, 24 and Fedora 27+ of 64.\n\nScript properties:\n- Continually updated, Provide Shell Interaction and Autoinstall\n- Source compiler installation, most stable source is the latest version, and download from the official site\n- Some security optimization\n- Providing a plurality of database versions (MySQL-8.0, MySQL-5.7, MySQL-5.6, MySQL-5.5, MariaDB-10.11, MariaDB-10.5, MariaDB-10.4, MariaDB-5.5, Percona-8.0, Percona-5.7, Percona-5.6, Percona-5.5, PostgreSQL, MongoDB)\n- Providing multiple PHP versions (PHP-8.4, PHP-8.3, PHP-8.2, PHP-8.1, PHP-8.0, PHP-7.4, PHP-7.3, PHP-7.2, PHP-7.1, PHP-7.0, PHP-5.6, PHP-5.5, PHP-5.4, PHP-5.3)\n- Provide Nginx, Tengine, OpenResty, Apache and ngx_lua_waf\n- Providing a plurality of Tomcat version (Tomcat-10, Tomcat-9, Tomcat-8, Tomcat-7)\n- Providing a plurality of JDK version (OpenJDK-8, OpenJDK-11, OpenJDK-17)\n- According to their needs to install PHP Cache Accelerator provides ZendOPcache, xcache, apcu, eAccelerator. And php extensions,include ZendGuardLoader,ionCube,SourceGuardian,imagick,gmagick,fileinfo,imap,ldap,calendar,phalcon,yaf,yar,redis,memcached,memcache,mongodb,swoole,xdebug\n- Installation Nodejs, Pureftpd, phpMyAdmin according to their needs\n- Install memcached, redis according to their needs\n- Jemalloc optimize MySQL, Nginx\n- Providing add a virtual host script, include Let's Encrypt SSL certificate\n- Provide Nginx/Tengine/OpenResty/Apache/Tomcat, MySQL/MariaDB/Percona, PHP, Redis, Memcached, phpMyAdmin upgrade script\n- Provide local,remote(rsync between servers),Aliyun OSS,Qcloud COS,UPYUN,QINIU,Amazon S3,Google Drive and Dropbox backup script\n\n## Installation\n\nInstall the dependencies for your distro, download the source and run the installation script.\n\n#### CentOS/Redhat\n\n```bash\nyum -y install wget screen\n```\n\n#### Debian/Ubuntu\n\n```bash\napt-get -y install wget screen\n```\n\n#### Download Source and Install\n\n```bash\nwget http://mirrors.linuxeye.com/lnmp-full.tar.gz\n# wget https://downloads.sourceforge.net/project/linuxeye/lnmp-full.tar.gz\ntar xzf lnmp-full.tar.gz\ncd lnmp\n```\n\nIf you disconnect during installation, you can execute the command `screen -r lnmp` to reconnect to the install window\n```bash\nscreen -S lnmp\n```\n\nIf you need to modify the directory (installation, data storage, Nginx logs), modify `options.conf` file before running install.sh\n```bash\n./install.sh\n```\n\n## How to install another PHP version\n\n```bash\n~/lnmp/install.sh --mphp_ver 54\n\n```\n\n## How to add Extensions\n\n```bash\n~/lnmp/addons.sh\n\n```\n\n## How to add a virtual host\n\n```bash\n~/lnmp/vhost.sh\n```\n\n## How to delete a virtual host\n\n```bash\n~/lnmp/vhost.sh --del\n```\n\n## How to add FTP virtual user\n\n```bash\n~/lnmp/pureftpd_vhost.sh\n```\n\n## How to backup\n\n```bash\n~/lnmp/backup_setup.sh    // Backup parameters\n~/lnmp/backup.sh    // Perform the backup immediately\ncrontab -l    // Can be added to scheduled tasks, such as automatic backups every day 1:00\n  0 1 * * * cd ~/lnmp/backup.sh  > /dev/null 2>&1 &\n```\n\n## How to manage service\n\nNginx/Tengine/OpenResty:\n```bash\nsystemctl {start|stop|status|restart|reload} nginx\n```\nMySQL/MariaDB/Percona:\n```bash\nsystemctl {start|stop|restart|reload|status} mysqld\n```\nPostgreSQL:\n```bash\nsystemctl {start|stop|restart|status} postgresql\n```\nMongoDB:\n```bash\nsystemctl {start|stop|status|restart|reload} mongod\n```\nPHP:\n```bash\nsystemctl {start|stop|restart|reload|status} php-fpm\n```\nApache:\n```bash\nsystemctl {start|restart|stop} httpd\n```\nTomcat:\n```bash\nsystemctl {start|stop|status|restart} tomcat\n```\nPure-FTPd:\n```bash\nsystemctl {start|stop|restart|status} pureftpd\n```\nRedis:\n```bash\nsystemctl {start|stop|status|restart|reload} redis-server\n```\nMemcached:\n```bash\nsystemctl {start|stop|status|restart|reload} memcached\n```\n\n## How to upgrade\n\n```bash\n~/lnmp/upgrade.sh\n```\n\n## How to uninstall\n\n```bash\n~/lnmp/uninstall.sh\n```\n"
        },
        {
          "name": "addons.sh",
          "type": "blob",
          "size": 4.6533203125,
          "content": "#!/bin/bash\n# Author:  yeho <lj2007331 AT gmail.com>\n# BLOG:  https://linuxeye.com\n#\n# Notes: LNMP for CentOS/RedHat 7+ Debian 9+ and Ubuntu 16+\n#\n\nexport PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin\nclear\nprintf \"\n#######################################################################\n#         LNMP for CentOS/RedHat 7+ Debian 9+ and Ubuntu 16+          #\n#                    Install/Uninstall Extensions                     #\n#######################################################################\n\"\n# Check if user is root\n# shellcheck disable=SC2046\n[ $(id -u) != '0' ] && { echo \"${CFAILURE}Error: You must be root to run this script${CEND}\"; exit 1; }\n\ncurrent_dir=$(dirname \"`readlink -f $0`\")\n# shellcheck disable=SC2164\npushd ${current_dir} > /dev/null\n\n. ./versions.txt\n. ./options.conf\n. ./include/color.sh\n. ./include/check_os.sh\n. ./include/download.sh\n. ./include/get_char.sh\n\n. ./include/composer.sh\n\n. ./include/fail2ban.sh\n\n. ./include/ngx_lua_waf.sh\n\n# get the out ip country\nOUTIP_STATE=$(./include/ois.${ARCH} ip_state)\n\n# shellcheck disable=SC2154\nShow_Help() {\n  echo\n  echo \"Usage: $0  command ...\n  --help, -h                  Show this help message\n  --install, -i               Install\n  --uninstall, -u             Uninstall\n  --composer                  Composer\n  --fail2ban                  Fail2ban\n  --ngx_lua_waf               Ngx_lua_waf\n  \"\n}\n\nARG_NUM=$#\nTEMP=`getopt -o hiu --long help,install,uninstall,composer,fail2ban,ngx_lua_waf -- \"$@\" 2>/dev/null`\n[ $? != 0 ] && echo \"${CWARNING}ERROR: unknown argument! ${CEND}\" && Show_Help && exit 1\neval set -- \"${TEMP}\"\nwhile :; do\n  [ -z \"$1\" ] && break;\n  case \"$1\" in\n    -h|--help)\n      Show_Help; exit 0\n      ;;\n    -i|--install)\n      install_flag=y; shift 1\n      ;;\n    -u|--uninstall)\n      uninstall_flag=y; shift 1\n      ;;\n    --composer)\n      composer_flag=y; shift 1\n      ;;\n    --fail2ban)\n      fail2ban_flag=y; shift 1\n      ;;\n    --ngx_lua_waf)\n      ngx_lua_waf_flag=y; shift 1\n      ;;\n    --)\n      shift\n      ;;\n    *)\n      echo \"${CWARNING}ERROR: unknown argument! ${CEND}\" && Show_Help && exit 1\n      ;;\n  esac\ndone\n\nACTION_FUN() {\n  while :; do\n    echo\n    echo \"Please select an action:\"\n    echo -e \"\\t${CMSG}1${CEND}. install\"\n    echo -e \"\\t${CMSG}2${CEND}. uninstall\"\n    read -e -p \"Please input a number:(Default 1 press Enter) \" ACTION\n    ACTION=${ACTION:-1}\n    if [[ ! \"${ACTION}\" =~ ^[1,2]$ ]]; then\n      echo \"${CWARNING}input error! Please only input number 1~2${CEND}\"\n    else\n      [ \"${ACTION}\" == '1' ] && install_flag=y\n      [ \"${ACTION}\" == '2' ] && uninstall_flag=y\n      break\n    fi\n  done\n}\n\nMenu() {\n  while :;do\n    printf \"\nWhat Are You Doing?\n\\t${CMSG}1${CEND}. Install/Uninstall PHP Composer\n\\t${CMSG}2${CEND}. Install/Uninstall fail2ban\n\\t${CMSG}3${CEND}. Install/Uninstall ngx_lua_waf\n\\t${CMSG}q${CEND}. Exit\n\"\n    read -e -p \"Please input the correct option: \" Number\n    if [[ ! \"${Number}\" =~ ^[1-3,q]$ ]]; then\n      echo \"${CFAILURE}input error! Please only input 1~3 and q${CEND}\"\n    else\n      case \"${Number}\" in\n        1)\n          ACTION_FUN\n          if [ \"${install_flag}\" = 'y' ]; then\n            Install_composer\n          elif [ \"${uninstall_flag}\" = 'y' ]; then\n            Uninstall_composer\n          fi\n          ;;\n        2)\n          ACTION_FUN\n          if [ \"${install_flag}\" = 'y' ]; then\n            Install_fail2ban\n          elif [ \"${uninstall_flag}\" = 'y' ]; then\n            Uninstall_fail2ban\n          fi\n          ;;\n        3)\n          ACTION_FUN\n          if [ \"${install_flag}\" = 'y' ]; then\n            # shellcheck disable=SC2154\n            [ -e \"${nginx_install_dir}/sbin/nginx\" ] && Nginx_lua_waf\n            # shellcheck disable=SC2154\n            [ -e \"${tengine_install_dir}/sbin/nginx\" ] && Tengine_lua_waf\n            enable_lua_waf\n          elif [ \"${uninstall_flag}\" = 'y' ]; then\n            disable_lua_waf\n          fi\n          ;;\n        q)\n          exit\n          ;;\n      esac\n    fi\n  done\n}\n\nif [ ${ARG_NUM} == 0 ]; then\n  Menu\nelse\n  if [ \"${composer_flag}\" == 'y' ]; then\n    if [ \"${install_flag}\" = 'y' ]; then\n      Install_composer\n    elif [ \"${uninstall_flag}\" = 'y' ]; then\n      Uninstall_composer\n    fi\n  fi\n  if [ \"${fail2ban_flag}\" == 'y' ]; then\n    if [ \"${install_flag}\" = 'y' ]; then\n      Install_fail2ban\n    elif [ \"${uninstall_flag}\" = 'y' ]; then\n      Uninstall_fail2ban\n    fi\n  fi\n  if [ \"${ngx_lua_waf_flag}\" == 'y' ]; then\n    if [ \"${install_flag}\" = 'y' ]; then\n      [ -e \"${nginx_install_dir}/sbin/nginx\" ] && Nginx_lua_waf\n      [ -e \"${tengine_install_dir}/sbin/nginx\" ] && Tengine_lua_waf\n      enable_lua_waf\n    elif [ \"${uninstall_flag}\" = 'y' ]; then\n      disable_lua_waf\n    fi\n  fi\nfi\n"
        },
        {
          "name": "backup.sh",
          "type": "blob",
          "size": 10.642578125,
          "content": "#!/bin/bash\n# Author:  yeho <lj2007331 AT gmail.com>\n# BLOG:  https://linuxeye.com\n#\n# Notes: LNMP for CentOS/RedHat 7+ Debian 9+ and Ubuntu 16+\n#\n\nexport PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin\n\n# Check if user is root\n[ $(id -u) != \"0\" ] && { echo \"${CFAILURE}Error: You must be root to run this script${CEND}\"; exit 1; }\n\ncurrent_dir=$(dirname \"`readlink -f $0`\")\npushd ${current_dir}/tools > /dev/null\n. ../options.conf\n[ ! -e \"${backup_dir}\" ] && mkdir -p ${backup_dir}\n\nDB_Local_BK() {\n  for D in `echo ${db_name} | tr ',' ' '`\n  do\n    ./db_bk.sh ${D}\n  done\n}\n\nDB_Remote_BK() {\n  for D in `echo ${db_name} | tr ',' ' '`\n  do\n    ./db_bk.sh ${D}\n    DB_GREP=\"DB_${D}_`date +%Y%m%d`\"\n    DB_FILE=`ls -lrt ${backup_dir} | grep ${DB_GREP} | tail -1 | awk '{print $NF}'`\n    echo \"file:::${backup_dir}/${DB_FILE} ${backup_dir} push\" >> config_backup.txt\n    echo \"com:::[ -e \"${backup_dir}/${DB_FILE}\" ] && rm -rf ${backup_dir}/DB_${D}_$(date +%Y%m%d --date=\"${expired_days} days ago\")_*.tgz\" >> config_backup.txt\n  done\n}\n\nDB_OSS_BK() {\n  for D in `echo ${db_name} | tr ',' ' '`\n  do\n    ./db_bk.sh ${D}\n    DB_GREP=\"DB_${D}_`date +%Y%m%d`\"\n    DB_FILE=`ls -lrt ${backup_dir} | grep ${DB_GREP} | tail -1 | awk '{print $NF}'`\n    ossutil cp -f ${backup_dir}/${DB_FILE} oss://${oss_bucket}/`date +%F`/${DB_FILE}\n    if [ $? -eq 0 ]; then\n      ossutil rm -rf oss://${oss_bucket}/`date +%F --date=\"${expired_days} days ago\"`/\n      [ -z \"`echo ${backup_destination} | grep -ow 'local'`\" ] && rm -f ${backup_dir}/${DB_FILE}\n    fi\n  done\n}\n\nDB_COS_BK() {\n  for D in `echo ${db_name} | tr ',' ' '`\n  do\n    ./db_bk.sh ${D}\n    DB_GREP=\"DB_${D}_`date +%Y%m%d`\"\n    DB_FILE=`ls -lrt ${backup_dir} | grep ${DB_GREP} | tail -1 | awk '{print $NF}'`\n    coscli sync ${backup_dir}/${DB_FILE} cos://${cos_bucket}/`date +%F`/${DB_FILE}\n    if [ $? -eq 0 ]; then\n      coscli rm -rf cos://${cos_bucket}/`date +%F --date=\"${expired_days} days ago\"` > /dev/null 2>&1\n      [ -z \"`echo ${backup_destination} | grep -ow 'local'`\" ] && rm -f ${backup_dir}/${DB_FILE}\n    fi\n  done\n}\n\nDB_UPYUN_BK() {\n  for D in `echo ${db_name} | tr ',' ' '`\n  do\n    ./db_bk.sh ${D}\n    DB_GREP=\"DB_${D}_`date +%Y%m%d`\"\n    DB_FILE=`ls -lrt ${backup_dir} | grep ${DB_GREP} | tail -1 | awk '{print $NF}'`\n    upx put ${backup_dir}/${DB_FILE} /`date +%F`/${DB_FILE}\n    if [ $? -eq 0 ]; then\n      upx rm -a `date +%F --date=\"${expired_days} days ago\"` > /dev/null 2>&1\n      [ -z \"`echo ${backup_destination} | grep -ow 'local'`\" ] && rm -f ${backup_dir}/${DB_FILE}\n    fi\n  done\n}\n\nDB_QINIU_BK() {\n  for D in `echo ${db_name} | tr ',' ' '`\n  do\n    ./db_bk.sh ${D}\n    DB_GREP=\"DB_${D}_`date +%Y%m%d`\"\n    DB_FILE=`ls -lrt ${backup_dir} | grep ${DB_GREP} | tail -1 | awk '{print $NF}'`\n    qshell rput ${qiniu_bucket} /`date +%F`/${DB_FILE} ${backup_dir}/${DB_FILE}\n    if [ $? -eq 0 ]; then\n      qshell listbucket ${qiniu_bucket} /`date +%F --date=\"${expired_days} days ago\"` /tmp/qiniu.txt > /dev/null 2>&1\n      qshell batchdelete -force ${qiniu_bucket} /tmp/qiniu.txt > /dev/null 2>&1\n      [ -z \"`echo ${backup_destination} | grep -ow 'local'`\" ] && rm -f ${backup_dir}/${DB_FILE}\n      rm -f /tmp/qiniu.txt\n    fi\n  done\n}\n\nDB_S3_BK() {\n  for D in `echo ${db_name} | tr ',' ' '`\n  do\n    ./db_bk.sh ${D}\n    DB_GREP=\"DB_${D}_`date +%Y%m%d`\"\n    DB_FILE=`ls -lrt ${backup_dir} | grep ${DB_GREP} | tail -1 | awk '{print $NF}'`\n    aws s3 sync ${backup_dir}/${DB_FILE} s3://${s3_bucket}/`date +%F`/${DB_FILE}\n    if [ $? -eq 0 ]; then\n      aws s3 rm -r s3://${s3_bucket}/`date +%F --date=\"${expired_days} days ago\"` > /dev/null 2>&1\n      [ -z \"`echo ${backup_destination} | grep -ow 'local'`\" ] && rm -f ${backup_dir}/${DB_FILE}\n    fi\n  done\n}\n\nDB_DROPBOX_BK() {\n  for D in `echo ${db_name} | tr ',' ' '`\n  do\n    ./db_bk.sh ${D}\n    DB_GREP=\"DB_${D}_`date +%Y%m%d`\"\n    DB_FILE=`ls -lrt ${backup_dir} | grep ${DB_GREP} | tail -1 | awk '{print $NF}'`\n    dbxcli put ${backup_dir}/${DB_FILE} `date +%F`/${DB_FILE}\n    if [ $? -eq 0 ]; then\n      dbxcli rm -f `date +%F --date=\"${expired_days} days ago\"` > /dev/null 2>&1\n      [ -z \"`echo ${backup_destination} | grep -ow 'local'`\" ] && rm -f ${backup_dir}/${DB_FILE}\n    fi\n  done\n}\n\nWEB_LOCAL_BK() {\n  for W in `echo ${website_name} | tr ',' ' '`\n  do\n    ./website_bk.sh $W\n  done\n}\n\nWEB_Remote_BK() {\n  for W in `echo ${website_name} | tr ',' ' '`\n  do\n    if [ `du -sm \"${wwwroot_dir}/${WebSite}\" | awk '{print $1}'` -lt 2048 ]; then\n      ./website_bk.sh $W\n      Web_GREP=\"Web_${W}_`date +%Y%m%d`\"\n      Web_FILE=`ls -lrt ${backup_dir} | grep ${Web_GREP} | tail -1 | awk '{print $NF}'`\n      echo \"file:::${backup_dir}/${Web_FILE} ${backup_dir} push\" >> config_backup.txt\n      echo \"com:::[ -e \"${backup_dir}/${Web_FILE}\" ] && rm -rf ${backup_dir}/Web_${W}_$(date +%Y%m%d --date=\"${expired_days} days ago\")_*.tgz\" >> config_backup.txt\n    else\n      echo \"file:::${wwwroot_dir}/$W ${backup_dir} push\" >> config_backup.txt\n    fi\n  done\n}\n\nWEB_OSS_BK() {\n  for W in `echo $website_name | tr ',' ' '`\n  do\n    [ ! -e \"${wwwroot_dir}/${WebSite}\" ] && { echo \"[${wwwroot_dir}/${WebSite}] not exist\"; break; }\n    PUSH_FILE=\"${backup_dir}/Web_${W}_$(date +%Y%m%d_%H).tgz\"\n    if [ ! -e \"${PUSH_FILE}\" ]; then\n      pushd ${wwwroot_dir} > /dev/null\n      tar czf ${PUSH_FILE} ./$W\n      popd > /dev/null\n    fi\n    ossutil cp -f ${PUSH_FILE} oss://${oss_bucket}/`date +%F`/${PUSH_FILE##*/}\n    if [ $? -eq 0 ]; then\n      ossutil rm -rf oss://${oss_bucket}/`date +%F --date=\"${expired_days} days ago\"`/\n      [ -z \"`echo ${backup_destination} | grep -ow 'local'`\" ] && rm -f ${PUSH_FILE}\n    fi\n  done\n}\n\nWEB_COS_BK() {\n  for W in `echo ${website_name} | tr ',' ' '`\n  do\n    [ ! -e \"${wwwroot_dir}/${WebSite}\" ] && { echo \"[${wwwroot_dir}/${WebSite}] not exist\"; break; }\n    PUSH_FILE=\"${backup_dir}/Web_${W}_$(date +%Y%m%d_%H).tgz\"\n    if [ ! -e \"${PUSH_FILE}\" ]; then\n      pushd ${wwwroot_dir} > /dev/null\n      tar czf ${PUSH_FILE} ./$W\n      popd > /dev/null\n    fi\n    coscli sync ${PUSH_FILE} cos://${cos_bucket}/`date +%F`/${PUSH_FILE##*/}\n    if [ $? -eq 0 ]; then\n      coscli rm -rf cos://${cos_bucket}/`date +%F --date=\"${expired_days} days ago\"` > /dev/null 2>&1\n      [ -z \"`echo ${backup_destination} | grep -ow 'local'`\" ] && rm -f ${PUSH_FILE}\n    fi\n  done\n}\n\nWEB_UPYUN_BK() {\n  for W in `echo ${website_name} | tr ',' ' '`\n  do\n    [ ! -e \"${wwwroot_dir}/${WebSite}\" ] && { echo \"[${wwwroot_dir}/${WebSite}] not exist\"; break; }\n    [ ! -e \"${backup_dir}\" ] && mkdir -p ${backup_dir}\n    PUSH_FILE=\"${backup_dir}/Web_${W}_$(date +%Y%m%d_%H).tgz\"\n    if [ ! -e \"${PUSH_FILE}\" ]; then\n      pushd ${wwwroot_dir} > /dev/null\n      tar czf ${PUSH_FILE} ./$W\n      popd > /dev/null\n    fi\n    upx put ${PUSH_FILE} /`date +%F`/${PUSH_FILE##*/}\n    if [ $? -eq 0 ]; then\n      upx rm -a `date +%F --date=\"${expired_days} days ago\"` > /dev/null 2>&1\n      [ -z \"`echo ${backup_destination} | grep -ow 'local'`\" ] && rm -f ${PUSH_FILE}\n    fi\n  done\n}\n\nWEB_QINIU_BK() {\n  for W in `echo ${website_name} | tr ',' ' '`\n  do\n    [ ! -e \"${wwwroot_dir}/${WebSite}\" ] && { echo \"[${wwwroot_dir}/${WebSite}] not exist\"; break; }\n    [ ! -e \"${backup_dir}\" ] && mkdir -p ${backup_dir}\n    PUSH_FILE=\"${backup_dir}/Web_${W}_$(date +%Y%m%d_%H).tgz\"\n    if [ ! -e \"${PUSH_FILE}\" ]; then\n      pushd ${wwwroot_dir} > /dev/null\n      tar czf ${PUSH_FILE} ./$W\n      popd > /dev/null\n    fi\n    qshell rput ${qiniu_bucket} /`date +%F`/${PUSH_FILE##*/} ${PUSH_FILE}\n    if [ $? -eq 0 ]; then\n      qshell listbucket ${qiniu_bucket} /`date +%F --date=\"${expired_days} days ago\"` /tmp/qiniu.txt > /dev/null 2>&1\n      qshell batchdelete -force ${qiniu_bucket} /tmp/qiniu.txt > /dev/null 2>&1\n      [ -z \"`echo ${backup_destination} | grep -ow 'local'`\" ] && rm -f ${PUSH_FILE}\n      rm -f /tmp/qiniu.txt\n    fi\n  done\n}\n\nWEB_S3_BK() {\n  for W in `echo ${website_name} | tr ',' ' '`\n  do\n    [ ! -e \"${wwwroot_dir}/${WebSite}\" ] && { echo \"[${wwwroot_dir}/${WebSite}] not exist\"; break; }\n    [ ! -e \"${backup_dir}\" ] && mkdir -p ${backup_dir}\n    PUSH_FILE=\"${backup_dir}/Web_${W}_$(date +%Y%m%d_%H).tgz\"\n    if [ ! -e \"${PUSH_FILE}\" ]; then\n      pushd ${wwwroot_dir} > /dev/null\n      tar czf ${PUSH_FILE} ./$W\n      popd > /dev/null\n    fi\n    aws s3 sync ${PUSH_FILE} s3://${s3_bucket}/`date +%F`/${PUSH_FILE##*/}\n    if [ $? -eq 0 ]; then\n      aws s3 rm -r s3://${s3_bucket}/`date +%F --date=\"${expired_days} days ago\"` > /dev/null 2>&1\n      [ -z \"`echo ${backup_destination} | grep -ow 'local'`\" ] && rm -f ${PUSH_FILE}\n    fi\n  done\n}\n\nWEB_DROPBOX_BK() {\n  for W in `echo ${website_name} | tr ',' ' '`\n  do\n    [ ! -e \"${wwwroot_dir}/${WebSite}\" ] && { echo \"[${wwwroot_dir}/${WebSite}] not exist\"; break; }\n    [ ! -e \"${backup_dir}\" ] && mkdir -p ${backup_dir}\n    PUSH_FILE=\"${backup_dir}/Web_${W}_$(date +%Y%m%d_%H).tgz\"\n    if [ ! -e \"${PUSH_FILE}\" ]; then\n      pushd ${wwwroot_dir} > /dev/null\n      tar czf ${PUSH_FILE} ./$W\n      popd > /dev/null\n    fi\n    dbxcli put ${PUSH_FILE} `date +%F`/${PUSH_FILE##*/}\n    if [ $? -eq 0 ]; then\n      dbxcli rm -f `date +%F --date=\"${expired_days} days ago\"` > /dev/null 2>&1\n      [ -z \"`echo ${backup_destination} | grep -ow 'local'`\" ] && rm -f ${PUSH_FILE}\n    fi\n  done\n}\n\nfor DEST in `echo ${backup_destination} | tr ',' ' '`\ndo\n  if [ \"${DEST}\" == 'local' ]; then\n    [ -n \"`echo ${backup_content} | grep -ow db`\" ] && DB_Local_BK\n    [ -n \"`echo ${backup_content} | grep -ow web`\" ] && WEB_LOCAL_BK\n  fi\n  if [ \"${DEST}\" == 'remote' ]; then\n    echo \"com:::[ ! -e \"${backup_dir}\" ] && mkdir -p ${backup_dir}\" > config_backup.txt\n    [ -n \"`echo ${backup_content} | grep -ow db`\" ] && DB_Remote_BK\n    [ -n \"`echo ${backup_content} | grep -ow web`\" ] && WEB_Remote_BK\n    ./mabs.sh -c config_backup.txt -T -1 | tee -a mabs.log\n  fi\n  if [ \"${DEST}\" == 'oss' ]; then\n    [ -n \"`echo ${backup_content} | grep -ow db`\" ] && DB_OSS_BK\n    [ -n \"`echo ${backup_content} | grep -ow web`\" ] && WEB_OSS_BK\n  fi\n  if [ \"${DEST}\" == 'cos' ]; then\n    [ -n \"`echo ${backup_content} | grep -ow db`\" ] && DB_COS_BK\n    [ -n \"`echo ${backup_content} | grep -ow web`\" ] && WEB_COS_BK\n  fi\n  if [ \"${DEST}\" == 'upyun' ]; then\n    [ -n \"`echo ${backup_content} | grep -ow db`\" ] && DB_UPYUN_BK\n    [ -n \"`echo ${backup_content} | grep -ow web`\" ] && WEB_UPYUN_BK\n  fi\n  if [ \"${DEST}\" == 'qiniu' ]; then\n    [ -n \"`echo ${backup_content} | grep -ow db`\" ] && DB_QINIU_BK\n    [ -n \"`echo ${backup_content} | grep -ow web`\" ] && WEB_QINIU_BK\n  fi\n  if [ \"${DEST}\" == 's3' ]; then\n    [ -n \"`echo ${backup_content} | grep -ow db`\" ] && DB_S3_BK\n    [ -n \"`echo ${backup_content} | grep -ow web`\" ] && WEB_S3_BK\n  fi\n  if [ \"${DEST}\" == 'dropbox' ]; then\n    [ -n \"`echo ${backup_content} | grep -ow db`\" ] && DB_DROPBOX_BK\n    [ -n \"`echo ${backup_content} | grep -ow web`\" ] && WEB_DROPBOX_BK\n  fi\ndone\n"
        },
        {
          "name": "backup_setup.sh",
          "type": "blob",
          "size": 25.396484375,
          "content": "#!/bin/bash\n# Author:  yeho <lj2007331 AT gmail.com>\n# BLOG:  https://linuxeye.com\n#\n# Notes: LNMP for CentOS/RedHat 7+ Debian 9+ and Ubuntu 16+\n#\n\nexport PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin\nclear\nprintf \"\n#######################################################################\n#         LNMP for CentOS/RedHat 7+ Debian 9+ and Ubuntu 16+          #\n#                     Setup the backup parameters                     #\n#######################################################################\n\"\n# Check if user is root\n[ $(id -u) != \"0\" ] && { echo \"${CFAILURE}Error: You must be root to run this script${CEND}\"; exit 1; }\n\ncurrent_dir=$(dirname \"`readlink -f $0`\")\npushd ${current_dir} > /dev/null\n. ./options.conf\n. ./versions.txt\n. ./include/color.sh\n. ./include/check_os.sh\n. ./include/check_dir.sh\n. ./include/download.sh\n\nwhile :; do echo\n  echo 'Please select your backup destination:'\n  echo -e \"\\t${CMSG}1${CEND}. Localhost\"\n  echo -e \"\\t${CMSG}2${CEND}. Remote host\"\n  echo -e \"\\t${CMSG}3${CEND}. Aliyun OSS\"\n  echo -e \"\\t${CMSG}4${CEND}. Qcloud COS\"\n  echo -e \"\\t${CMSG}5${CEND}. UPYUN\"\n  echo -e \"\\t${CMSG}6${CEND}. QINIU\"\n  echo -e \"\\t${CMSG}7${CEND}. Amazon S3\"\n  echo -e \"\\t${CMSG}8${CEND}. Dropbox\"\n  read -e -p \"Please input numbers:(Default 1 press Enter) \" desc_bk\n  desc_bk=${desc_bk:-'1'}\n  array_desc=(${desc_bk})\n  array_all=(1 2 3 4 5 6 7 8)\n  for v in ${array_desc[@]}\n  do\n    [ -z \"`echo ${array_all[@]} | grep -w ${v}`\" ] && desc_flag=1\n  done\n  if [ \"${desc_flag}\" == '1' ]; then\n    unset desc_flag\n    echo; echo \"${CWARNING}input error! Please only input number 1 3 4 and so on${CEND}\"; echo\n    continue\n  else\n    sed -i 's@^backup_destination=.*@backup_destination=@' ./options.conf\n    break\n  fi\ndone\n\n[ -n \"`echo ${desc_bk} | grep -w 1`\" ] && sed -i 's@^backup_destination=.*@backup_destination=local@' ./options.conf\n[ -n \"`echo ${desc_bk} | grep -w 2`\" ] && sed -i 's@^backup_destination=.*@&,remote@' ./options.conf\n[ -n \"`echo ${desc_bk} | grep -w 3`\" ] && sed -i 's@^backup_destination=.*@&,oss@' ./options.conf\n[ -n \"`echo ${desc_bk} | grep -w 4`\" ] && sed -i 's@^backup_destination=.*@&,cos@' ./options.conf\n[ -n \"`echo ${desc_bk} | grep -w 5`\" ] && sed -i 's@^backup_destination=.*@&,upyun@' ./options.conf\n[ -n \"`echo ${desc_bk} | grep -w 6`\" ] && sed -i 's@^backup_destination=.*@&,qiniu@' ./options.conf\n[ -n \"`echo ${desc_bk} | grep -w 7`\" ] && sed -i 's@^backup_destination=.*@&,s3@' ./options.conf\n[ -n \"`echo ${desc_bk} | grep -w 8`\" ] && sed -i 's@^backup_destination=.*@&,dropbox@' ./options.conf\nsed -i 's@^backup_destination=,@backup_destination=@' ./options.conf\n\nwhile :; do echo\n  echo 'Please select your backup content:'\n  echo -e \"\\t${CMSG}1${CEND}. Only Database\"\n  echo -e \"\\t${CMSG}2${CEND}. Only Website\"\n  echo -e \"\\t${CMSG}3${CEND}. Database and Website\"\n  read -e -p \"Please input a number:(Default 1 press Enter) \" content_bk\n  content_bk=${content_bk:-1}\n  if [[ ! ${content_bk} =~ ^[1-3]$ ]]; then\n    echo \"${CWARNING}input error! Please only input number 1~3${CEND}\"\n  else\n    break\n  fi\ndone\n\n[ \"${content_bk}\" == '1' ] && sed -i 's@^backup_content=.*@backup_content=db@' ./options.conf\n[ \"${content_bk}\" == '2' ] && sed -i 's@^backup_content=.*@backup_content=web@' ./options.conf\n[ \"${content_bk}\" == '3' ] && sed -i 's@^backup_content=.*@backup_content=db,web@' ./options.conf\n\nif [ -n \"`echo ${desc_bk} | grep -Ew '1|2'`\" ]; then\n  while :; do echo\n    echo \"Please enter the directory for save the backup file: \"\n    read -e -p \"(Default directory: ${backup_dir}): \" new_backup_dir\n    new_backup_dir=${new_backup_dir:-${backup_dir}}\n    if [ -z \"`echo ${new_backup_dir}| grep '^/'`\" ]; then\n      echo \"${CWARNING}input error! ${CEND}\"\n    else\n      break\n    fi\n  done\n  sed -i \"s@^backup_dir=.*@backup_dir=${new_backup_dir}@\" ./options.conf\nfi\n\nwhile :; do echo\n  echo \"Please enter a valid backup number of days: \"\n  read -e -p \"(Default days: 5): \" expired_days\n  expired_days=${expired_days:-5}\n  [ -n \"`echo ${expired_days} | sed -n \"/^[0-9]\\+$/p\"`\" ] && break || echo \"${CWARNING}input error! Please only enter numbers! ${CEND}\"\ndone\nsed -i \"s@^expired_days=.*@expired_days=${expired_days}@\" ./options.conf\n\nif [ \"${content_bk}\" != '2' ]; then\n  databases=`${db_install_dir}/bin/mysql -uroot -p$dbrootpwd -e \"show databases\\G\" | grep Database | awk '{print $2}' | grep -Evw \"(performance_schema|information_schema|mysql|sys)\"`\n  while :; do echo\n    echo \"Please enter one or more name for database, separate multiple database names with commas: \"\n    read -e -p \"(Default database: `echo $databases | tr ' ' ','`) \" db_name\n    db_name=`echo ${db_name} | tr -d ' '`\n    [ -z \"${db_name}\" ] && db_name=\"`echo $databases | tr ' ' ','`\"\n    D_tmp=0\n    for D in `echo ${db_name} | tr ',' ' '`\n    do\n      [ -z \"`echo $databases | grep -w $D`\" ] && { echo \"${CWARNING}$D was not exist! ${CEND}\" ; D_tmp=1; }\n    done\n    [ \"$D_tmp\" != '1' ] && break\n  done\n  sed -i \"s@^db_name=.*@db_name=${db_name}@\" ./options.conf\nfi\n\nif [ \"${content_bk}\" != '1' ]; then\n  websites=`ls ${wwwroot_dir}`\n  while :; do echo\n    echo \"Please enter one or more name for website, separate multiple website names with commas: \"\n    read -e -p \"(Default website: `echo $websites | tr ' ' ','`) \" website_name\n    website_name=`echo ${website_name} | tr -d ' '`\n    [ -z \"${website_name}\" ] && website_name=\"`echo $websites | tr ' ' ','`\"\n    W_tmp=0\n    for W in `echo ${website_name} | tr ',' ' '`\n    do\n      [ ! -e \"${wwwroot_dir}/$W\" ] && { echo \"${CWARNING}${wwwroot_dir}/$W not exist! ${CEND}\" ; W_tmp=1; }\n    done\n    [ \"$W_tmp\" != '1' ] && break\n  done\n  sed -i \"s@^website_name=.*@website_name=${website_name}@\" ./options.conf\nfi\n\necho\necho \"You have to backup the content:\"\n[ \"${content_bk}\" != '2' ] && echo \"Database: ${CMSG}${db_name}${CEND}\"\n[ \"${content_bk}\" != '1' ] && echo \"Website: ${CMSG}${website_name}${CEND}\"\n\nif [ -n \"`echo ${desc_bk} | grep -w 2`\" ]; then\n  > tools/iplist.txt\n  while :; do echo\n    read -e -p \"Please enter the remote host address: \" remote_address\n    [ -z \"${remote_address}\" -o \"${remote_address}\" == '127.0.0.1' ] && continue\n    echo\n    read -e -p \"Please enter the remote host port(Default: 22) : \" remote_port\n    remote_port=${remote_port:-22}\n    echo\n    read -e -p \"Please enter the remote host user(Default: root) : \" remote_user\n    remote_user=${remote_user:-root}\n    echo\n    read -e -p \"Please enter the remote host password: \" remote_password\n    IPcode=$(echo \"ibase=16;$(echo \"${remote_address}\" | xxd -ps -u)\"|bc|tr -d '\\\\'|tr -d '\\n')\n    Portcode=$(echo \"ibase=16;$(echo \"${remote_port}\" | xxd -ps -u)\"|bc|tr -d '\\\\'|tr -d '\\n')\n    PWcode=$(echo \"ibase=16;$(echo \"$remote_password\" | xxd -ps -u)\"|bc|tr -d '\\\\'|tr -d '\\n')\n    [ -e \"~/.ssh/known_hosts\" ] && grep ${remote_address} ~/.ssh/known_hosts | sed -i \"/${remote_address}/d\" ~/.ssh/known_hosts\n    ./tools/mssh.exp ${IPcode}P ${remote_user} ${PWcode}P ${Portcode}P true 10\n    if [ $? -eq 0 ]; then\n      [ -z \"`grep ${remote_address} tools/iplist.txt`\" ] && echo \"${remote_address} ${remote_port} ${remote_user} $remote_password\" >> tools/iplist.txt || echo \"${CWARNING}${remote_address} has been added! ${CEND}\"\n      while :; do\n        read -e -p \"Do you want to add more host ? [y/n]: \" morehost_flag\n        if [[ ! ${morehost_flag} =~ ^[y,n]$ ]]; then\n          echo \"${CWARNING}input error! Please only input 'y' or 'n'${CEND}\"\n        else\n          break\n        fi\n      done\n      [ \"${morehost_flag}\" == 'n' ] && break\n    fi\n  done\nfi\n\nif [ -n \"`echo ${desc_bk} | grep -w 3`\" ]; then\n  if [ ! -e \"/usr/local/bin/ossutil\" ]; then\n    curl -sSL https://gosspublic.alicdn.com/ossutil/install.sh | sudo bash\n  fi\n  while :; do echo\n    echo 'Please select your backup aliyun datacenter:'\n    echo -e \"\\t ${CMSG}1${CEND}. cn-hangzhou-华东1 (杭州)          ${CMSG}2${CEND}. cn-shanghai-华东2 (上海)\"\n    echo -e \"\\t ${CMSG}3${CEND}. cn-nanjing-华东5 (南京)           ${CMSG}4${CEND}. cn-fuzhou-华东6 (福州)\"\n    echo -e \"\\t ${CMSG}5${CEND}. cn-wuhan-华中1 (武汉)             ${CMSG}6${CEND}. cn-qingdao-华北1 (青岛)\"\n    echo -e \"\\t ${CMSG}7${CEND}. cn-beijing-华北2 (北京)           ${CMSG}8${CEND}. cn-zhangjiakou-华北3 (张家口)\"\n    echo -e \"\\t ${CMSG}9${CEND}. cn-huhehaote-华北5 (呼和浩特)    ${CMSG}10${CEND}. cn-wulanchabu-华北6 (乌兰察布)\"\n    echo -e \"\\t${CMSG}11${CEND}. cn-shenzhen-华南1 (深圳)         ${CMSG}12${CEND}. cn-heyuan-华南2 (河源)\"\n    echo -e \"\\t${CMSG}13${CEND}. cn-guangzhou-华南3 (广州)        ${CMSG}14${CEND}. cn-chengdu-西南1 (成都)\"\n    echo -e \"\\t${CMSG}15${CEND}. cn-hongkong-香港                 ${CMSG}16${CEND}. us-west-1-美国 (硅谷)\"\n    echo -e \"\\t${CMSG}17${CEND}. us-east-1-美国 (弗吉尼亚)        ${CMSG}16${CEND}. ap-northeast-1-日本 (东京)\"\n    echo -e \"\\t${CMSG}19${CEND}. ap-northeast-2-韩国 (首尔)       ${CMSG}20${CEND}. ap-southeast-1-新加坡\"\n    echo -e \"\\t${CMSG}21${CEND}. ap-southeast-3-马来西亚 (吉隆坡) ${CMSG}22${CEND}. ap-southeast-5-印度尼西亚 (雅加达)\"\n    echo -e \"\\t${CMSG}23${CEND}. ap-southeast-6-菲律宾 (马尼拉)   ${CMSG}24${CEND}. ap-southeast-7-泰国 (曼谷)\"\n    echo -e \"\\t${CMSG}25${CEND}. eu-central-1-德国 (法兰克福)     ${CMSG}26${CEND}. eu-west-1-英国 (伦敦)\"\n    echo -e \"\\t${CMSG}27${CEND}. me-east-1-阿联酋 (迪拜)\"\n    read -e -p \"Please input a number:(Default 1 press Enter) \" Location\n    Location=${Location:-1}\n    if [[ \"${Location}\" =~ ^[1-9]$|^1[0-9]$|^2[0-7]$ ]]; then\n      break\n    else\n      echo \"${CWARNING}input error! Please only input number 1~27${CEND}\"\n    fi\n  done\n  [ \"${Location}\" == '1' ] && Host=oss-cn-hangzhou-internal.aliyuncs.com\n  [ \"${Location}\" == '2' ] && Host=oss-cn-shanghai-internal.aliyuncs.com\n  [ \"${Location}\" == '3' ] && Host=oss-cn-nanjing-internal.aliyuncs.com\n  [ \"${Location}\" == '4' ] && Host=oss-cn-fuzhou-internal.aliyuncs.com\n  [ \"${Location}\" == '5' ] && Host=oss-cn-wuhan-lr-internal.aliyuncs.com\n  [ \"${Location}\" == '6' ] && Host=oss-cn-qingdao-internal.aliyuncs.com\n  [ \"${Location}\" == '7' ] && Host=oss-cn-beijing-internal.aliyuncs.com\n  [ \"${Location}\" == '8' ] && Host=oss-cn-zhangjiakou-internal.aliyuncs.com\n  [ \"${Location}\" == '9' ] && Host=oss-cn-huhehaote-internal.aliyuncs.com\n  [ \"${Location}\" == '10' ] && Host=oss-cn-wulanchabu-internal.aliyuncs.com\n  [ \"${Location}\" == '11' ] && Host=oss-cn-shenzhen-internal.aliyuncs.com\n  [ \"${Location}\" == '12' ] && Host=oss-cn-heyuan-internal.aliyuncs.com\n  [ \"${Location}\" == '13' ] && Host=oss-cn-guangzhou-internal.aliyuncs.com\n  [ \"${Location}\" == '14' ] && Host=oss-cn-chengdu-internal.aliyuncs.com\n  [ \"${Location}\" == '15' ] && Host=oss-cn-hongkong-internal.aliyuncs.com\n  [ \"${Location}\" == '16' ] && Host=oss-us-west-1-internal.aliyuncs.com\n  [ \"${Location}\" == '17' ] && Host=oss-us-east-1-internal.aliyuncs.com\n  [ \"${Location}\" == '18' ] && Host=oss-ap-northeast-1-internal.aliyuncs.com\n  [ \"${Location}\" == '19' ] && Host=oss-ap-northeast-2-internal.aliyuncs.com\n  [ \"${Location}\" == '20' ] && Host=oss-ap-southeast-1-internal.aliyuncs.com\n  [ \"${Location}\" == '21' ] && Host=oss-ap-southeast-3-internal.aliyuncs.com\n  [ \"${Location}\" == '22' ] && Host=oss-ap-southeast-5-internal.aliyuncs.com\n  [ \"${Location}\" == '23' ] && Host=oss-ap-southeast-6-internal.aliyuncs.com\n  [ \"${Location}\" == '24' ] && Host=oss-ap-southeast-7-internal.aliyuncs.com\n  [ \"${Location}\" == '25' ] && Host=oss-eu-central-1-internal.aliyuncs.com\n  [ \"${Location}\" == '26' ] && Host=oss-eu-west-1-internal.aliyuncs.com\n  [ \"${Location}\" == '27' ] && Host=oss-me-east-1-internal.aliyuncs.com\n  [ \"$(./include/ois.${ARCH} conn_port --host ${Host} --port 80)\" == \"false\" ] && Host=`echo ${Host} | sed 's@-internal@@g'`\n  [ -e \"/root/.ossutilconfig\" ] && rm -f /root/.ossutilconfig\n  while :; do echo\n    read -e -p \"Please enter the aliyun oss Access Key ID: \" KeyID\n    [ -z \"${KeyID}\" ] && continue\n    echo\n    read -e -p \"Please enter the aliyun oss Access Key Secret: \" KeySecret\n    [ -z \"${KeySecret}\" ] && continue\n    ossutil ls -e ${Host} -i ${KeyID} -k ${KeySecret} > /dev/null 2>&1\n    if [ $? -eq 0 ]; then\n      ossutil config -e ${Host} -i ${KeyID} -k ${KeySecret} > /dev/null 2>&1\n      while :; do echo\n        read -e -p \"Please enter the aliyun oss bucket: \" OSS_BUCKET\n        ossutil mb oss://${OSS_BUCKET} > /dev/null 2>&1\n        if [ $? -eq 0 ]; then\n          echo \"${CMSG}Bucket oss://${OSS_BUCKET}/ created${CEND}\"\n          sed -i \"s@^oss_bucket=.*@oss_bucket=${OSS_BUCKET}@\" ./options.conf\n          break\n        else\n          echo \"${CWARNING}[${OSS_BUCKET}] already exists, You need to use the OSS Console to create a bucket for storing.${CEND}\"\n        fi\n      done\n      break\n    fi\n  done\nfi\n\nif [ -n \"`echo ${desc_bk} | grep -w 4`\" ]; then\n  if [ ! -e \"/usr/local/bin/coscli\" ]; then\n    wget -qc https://cosbrowser.cloud.tencent.com/software/coscli/coscli-linux -O /usr/local/bin/coscli\n    chmod +x /usr/local/bin/coscli\n  fi\n\n  while :; do echo\n    echo 'Please select your backup qcloud datacenter:'\n    echo -e \"\\t ${CMSG} 1${CEND}. ap-beijing-北京              ${CMSG}2${CEND}. ap-nanjing-南京\"\n    echo -e \"\\t ${CMSG} 3${CEND}. ap-shanghai-上海             ${CMSG}4${CEND}. ap-guangzhou-广州\"\n    echo -e \"\\t ${CMSG} 5${CEND}. ap-chengdu-成都              ${CMSG}6${CEND}. ap-chongqing-重庆\"\n    echo -e \"\\t ${CMSG} 7${CEND}. ap-shenzhen-fsi-深圳金融     ${CMSG}8${CEND}. ap-shanghai-fsi-上海金融\"\n    echo -e \"\\t ${CMSG} 9${CEND}. ap-beijing-fsi-北京金融     ${CMSG}10${CEND}. ap-hongkong-香港\"\n    echo -e \"\\t ${CMSG}11${CEND}. ap-singapore-新加坡         ${CMSG}12${CEND}. ap-mumbai-孟买\"\n    echo -e \"\\t ${CMSG}13${CEND}. ap-jakarta-雅加达           ${CMSG}14${CEND}. ap-seoul-首尔\"\n    echo -e \"\\t ${CMSG}15${CEND}. ap-bangkok-曼谷             ${CMSG}16${CEND}. ap-tokyo-东京\"\n    echo -e \"\\t ${CMSG}17${CEND}. na-siliconvalley-硅谷       ${CMSG}18${CEND}. na-ashburn-弗吉尼亚\"\n    echo -e \"\\t ${CMSG}19${CEND}. na-toronto-多伦多           ${CMSG}20${CEND}. sa-saopaulo-圣保罗\"\n    echo -e \"\\t ${CMSG}21${CEND}. eu-frankfurt-法兰克福\"\n    read -e -p \"Please input a number:(Default 1 press Enter) \" Location\n    Location=${Location:-1}\n    if [[ \"${Location}\" =~ ^[1-9]$|^1[0-9]$|^2[0-1]$ ]]; then\n      break\n    else\n      echo \"${CWARNING}input error! Please only input number 1~21${CEND}\"\n    fi\n  done\n  [ \"${Location}\" == '1' ] && REGION='ap-beijing'\n  [ \"${Location}\" == '2' ] && REGION='ap-nanjing'\n  [ \"${Location}\" == '3' ] && REGION='ap-shanghai'\n  [ \"${Location}\" == '4' ] && REGION='ap-guangzhou'\n  [ \"${Location}\" == '5' ] && REGION='ap-chengdu'\n  [ \"${Location}\" == '6' ] && REGION='ap-chongqing'\n  [ \"${Location}\" == '7' ] && REGION='ap-shenzhen-fsi'\n  [ \"${Location}\" == '8' ] && REGION='ap-shanghai-fsi'\n  [ \"${Location}\" == '9' ] && REGION='ap-beijing-fsi'\n  [ \"${Location}\" == '10' ] && REGION='ap-hongkong'\n  [ \"${Location}\" == '11' ] && REGION='ap-singapore'\n  [ \"${Location}\" == '12' ] && REGION='ap-mumbai'\n  [ \"${Location}\" == '13' ] && REGION='ap-jakarta'\n  [ \"${Location}\" == '14' ] && REGION='ap-seoul'\n  [ \"${Location}\" == '15' ] && REGION='ap-bangkok'\n  [ \"${Location}\" == '16' ] && REGION='ap-tokyo'\n  [ \"${Location}\" == '17' ] && REGION='na-siliconvalley'\n  [ \"${Location}\" == '18' ] && REGION='na-ashburn'\n  [ \"${Location}\" == '19' ] && REGION='na-toronto'\n  [ \"${Location}\" == '20' ] && REGION='sa-saopaulo'\n  [ \"${Location}\" == '21' ] && REGION='eu-frankfurt'\n  while :; do echo\n    read -e -p \"Please enter the Qcloud COS SECRET_ID: \" SECRET_ID\n    [ -z \"${SECRET_ID}\" ] && continue\n    echo\n    read -e -p \"Please enter the Qcloud COS SECRET_KEY: \" SECRET_KEY\n    [ -z \"${SECRET_KEY}\" ] && continue\n    echo\n    read -e -p \"Please enter the Qcloud COS BUCKET: \" COS_BUCKET\n    [ -z \"${COS_BUCKET}\" ] && continue\n    cat > ~/.cos.yaml << EOF\ncos:\n  base:\n    secretid: ${SECRET_ID}\n    secretkey: ${SECRET_KEY}\n    protocol: https\n  buckets:\n  - name: ${COS_BUCKET}\n    endpoint: cos.${REGION}.myqcloud.com\nEOF\n    coscli ls cos://${COS_BUCKET} > /dev/null 2>&1\n    if [ $? -eq 0 ]; then\n      echo \"${CMSG}SECRET_ID/SECRET_KEY/REGION/BUCKET OK${CEND}\"\n      sed -i \"s@^cos_bucket=.*@cos_bucket=${COS_BUCKET}@\" ./options.conf\n      echo\n      break\n    else\n      coscli mb cos://${COS_BUCKET} -e cos.${REGION}.myqcloud.com > /dev/null 2>&1\n      if [ $? -eq 0 ]; then\n        echo \"${CMSG}Bucket ${COS_BUCKET} created${CEND}\"\n        sed -i \"s@^cos_bucket=.*@cos_bucket=${COS_BUCKET}@\" ./options.conf\n        echo\n        break\n      else\n        echo \"${CWARNING}input error! SECRET_ID/SECRET_KEY/REGION/BUCKET invalid${CEND}\"\n        continue\n      fi\n    fi\n  done\nfi\n\nif [ -n \"`echo ${desc_bk} | grep -w 5`\" ]; then\n  if [ ! -e \"/usr/local/bin/upx\" ]; then\n    if [ \"${armplatform}\" == 'y' ]; then\n      wget -qc https://collection.b0.upaiyun.com/softwares/upx/upx_0.4.8_linux_arm64.tar.gz -O /tmp/upx_0.4.8_linux_arm64.tar.gz\n      tar xzf /tmp/upx_0.4.8_linux_arm64.tar.gz -C /tmp/\n    else\n      wget -qc https://collection.b0.upaiyun.com/softwares/upx/upx_0.4.8_linux_amd64.tar.gz -O /tmp/upx_0.4.8_linux_x86_64.tar.gz\n      tar xzf /tmp/upx_0.4.8_linux_x86_64.tar.gz -C /tmp/\n    fi\n    /bin/mv /tmp/upx /usr/local/bin/upx\n    chmod +x /usr/local/bin/upx\n    rm -f /tmp/{upx_*,LICENSE,README.md}\n  fi\n  while :; do echo\n    read -e -p \"Please enter the upyun ServiceName: \" ServiceName\n    [ -z \"${ServiceName}\" ] && continue\n    echo\n    read -e -p \"Please enter the upyun Operator: \" Operator\n    [ -z \"${Operator}\" ] && continue\n    echo\n    read -e -p \"Please enter the upyun Password: \" Password\n    [ -z \"${Password}\" ] && continue\n    echo\n    upx login ${ServiceName} ${Operator} ${Password} > /dev/null 2>&1\n    if [ $? = 0 ]; then\n      echo \"${CMSG}ServiceName/Operator/Password OK${CEND}\"\n      echo\n      break\n    else\n      echo \"${CWARNING}input error! ServiceName/Operator/Password invalid${CEND}\"\n    fi\n  done\nfi\n\nif [ -n \"`echo ${desc_bk} | grep -w 6`\" ]; then\n  if [ ! -e \"/usr/local/bin/qshell\" ]; then\n    if [ \"${armplatform}\" == 'y' ]; then\n      wget -qc https://github.com/qiniu/qshell/releases/download/v2.15.0/qshell-v2.15.0-linux-arm64.tar.gz -O /tmp/qshell-v2.15.0-linux-arm64.tar.gz\n      tar xzf /tmp/qshell-v2.15.0-linux-arm64.tar.gz -C /usr/local/bin/\n    else\n      wget -qc https://github.com/qiniu/qshell/releases/download/v2.15.0/qshell-v2.15.0-linux-amd64.tar.gz -O /tmp/qshell-v2.15.0-linux-amd64.tar.gz\n      tar xzf qshell-v2.15.0-linux-amd64.tar.gz -C /usr/local/bin/\n    fi\n    chmod +x /usr/local/bin/qshell\n    rm -f /tmp/qshell*\n  fi\n  while :; do echo\n    echo 'Please select your backup qiniu datacenter:'\n    echo -e \"\\t ${CMSG} 1${CEND}. 华东            ${CMSG}2${CEND}. 华北\"\n    echo -e \"\\t ${CMSG} 3${CEND}. 华南            ${CMSG}4${CEND}. 北美\"\n    echo -e \"\\t ${CMSG} 5${CEND}. 东南亚          ${CMSG}6${CEND}. 华东-浙江2\"\n    read -e -p \"Please input a number:(Default 1 press Enter) \" Location\n    Location=${Location:-1}\n    if [[ \"${Location}\" =~ ^[1-6]$ ]]; then\n      break\n    else\n      echo \"${CWARNING}input error! Please only input number 1~6${CEND}\"\n    fi\n  done\n  [ \"${Location}\" == '1' ] && zone='z0'\n  [ \"${Location}\" == '2' ] && zone='z1'\n  [ \"${Location}\" == '3' ] && zone='z2'\n  [ \"${Location}\" == '4' ] && zone='na0'\n  [ \"${Location}\" == '5' ] && zone='as0'\n  [ \"${Location}\" == '6' ] && zone='cn-east-2'\n  while :; do echo\n    read -e -p \"Please enter the qiniu AccessKey: \" AccessKey\n    [ -z \"${AccessKey}\" ] && continue\n    echo\n    read -e -p \"Please enter the qiniu SecretKey: \" SecretKey\n    [ -z \"${SecretKey}\" ] && continue\n    echo\n    read -e -p \"Please enter the qiniu bucket: \" QINIU_BUCKET\n    [ -z \"${QINIU_BUCKET}\" ] && continue\n    echo\n    qshell account ${AccessKey} ${SecretKey} backup\n    if qshell buckets | grep -w ${QINIU_BUCKET} > /dev/null 2>&1; then\n      sed -i \"s@^qiniu_bucket=.*@qiniu_bucket=${QINIU_BUCKET}@\" ./options.conf\n      echo \"${CMSG}AccessKey/SecretKey/Bucket OK${CEND}\"\n      echo\n      break\n    else\n      echo \"${CWARNING}input error! AccessKey/SecretKey/Bucket invalid${CEND}\"\n    fi\n  done\nfi\n\nif [ -n \"`echo ${desc_bk} | grep -w 7`\" ]; then\n  if [ ! -e \"/usr/local/bin/aws\" ] && [ ! -e \"/usr/bin/aws\" ]; then\n    wget -qc https://awscli.amazonaws.com/awscli-exe-linux-$(arch).zip -O /tmp/awscliv2.zip\n    unzip /tmp/awscliv2.zip -d /tmp/\n    /tmp/aws/install\n    rm -rf /tmp/{awscliv2.zip,aws}\n  fi\n  while :; do echo\n    echo 'Please select your backup amazon datacenter:'\n    echo -e \"\\t ${CMSG} 1${CEND}. us-east-2                    ${CMSG} 2${CEND}. us-east-1\"\n    echo -e \"\\t ${CMSG} 3${CEND}. us-west-1                    ${CMSG} 4${CEND}. us-west-2\"\n    echo -e \"\\t ${CMSG} 5${CEND}. af-south-1                   ${CMSG} 6${CEND}. ap-east-1\"\n    echo -e \"\\t ${CMSG} 7${CEND}. ap-south-2                   ${CMSG} 8${CEND}. ap-southeast-3\"\n    echo -e \"\\t ${CMSG} 9${CEND}. ap-southeast-4               ${CMSG}10${CEND}. ap-south-1\"\n    echo -e \"\\t ${CMSG}11${CEND}. ap-northeast-3               ${CMSG}12${CEND}. ap-northeast-2\"\n    echo -e \"\\t ${CMSG}13${CEND}. ap-southeast-1               ${CMSG}14${CEND}. ap-southeast-2\"\n    echo -e \"\\t ${CMSG}15${CEND}. ap-northeast-1               ${CMSG}16${CEND}. ca-central-1\"\n    echo -e \"\\t ${CMSG}17${CEND}. eu-central-1                 ${CMSG}18${CEND}. eu-west-1\"\n    echo -e \"\\t ${CMSG}19${CEND}. eu-west-2                    ${CMSG}20${CEND}. eu-south-1\"\n    echo -e \"\\t ${CMSG}21${CEND}. eu-west-3                    ${CMSG}22${CEND}. eu-south-2\"\n    echo -e \"\\t ${CMSG}23${CEND}. eu-north-1                   ${CMSG}24${CEND}. eu-central-2\"\n    echo -e \"\\t ${CMSG}25${CEND}. me-south-1                   ${CMSG}26${CEND}. me-central-1\"\n    echo -e \"\\t ${CMSG}27${CEND}. sa-east-1                    ${CMSG}28${CEND}. us-gov-east-1\"\n    echo -e \"\\t ${CMSG}29${CEND}. us-gov-west-1                ${CMSG}30${CEND}. cn-north-1\"\n    echo -e \"\\t ${CMSG}31${CEND}. cn-northwest-1\"\n    read -e -p \"Please input a number:(Default 1 press Enter) \" Location\n    Location=${Location:-1}\n    if [[ \"${Location}\" =~ ^[1-9]$|^[1-2][0-9]$|^3[0-1]$ ]]; then\n      break\n    else\n      echo \"${CWARNING}input error! Please only input number 1~31${CEND}\"\n    fi\n  done\n  [ \"${Location}\" == '1' ] && REGION='us-east-2'\n  [ \"${Location}\" == '2' ] && REGION='us-east-1'\n  [ \"${Location}\" == '3' ] && REGION='us-west-1'\n  [ \"${Location}\" == '4' ] && REGION='us-west-2'\n  [ \"${Location}\" == '5' ] && REGION='af-south-1'\n  [ \"${Location}\" == '6' ] && REGION='ap-east-1'\n  [ \"${Location}\" == '7' ] && REGION='ap-south-2'\n  [ \"${Location}\" == '8' ] && REGION='ap-southeast-3'\n  [ \"${Location}\" == '9' ] && REGION='ap-southeast-4'\n  [ \"${Location}\" == '10' ] && REGION='ap-south-1'\n  [ \"${Location}\" == '11' ] && REGION='ap-northeast-3'\n  [ \"${Location}\" == '12' ] && REGION='ap-northeast-2'\n  [ \"${Location}\" == '13' ] && REGION='ap-southeast-1'\n  [ \"${Location}\" == '14' ] && REGION='ap-southeast-2'\n  [ \"${Location}\" == '15' ] && REGION='ap-northeast-1'\n  [ \"${Location}\" == '16' ] && REGION='ca-central-1'\n  [ \"${Location}\" == '17' ] && REGION='eu-central-1'\n  [ \"${Location}\" == '18' ] && REGION='eu-west-1'\n  [ \"${Location}\" == '19' ] && REGION='eu-west-2'\n  [ \"${Location}\" == '20' ] && REGION='eu-south-1'\n  [ \"${Location}\" == '21' ] && REGION='eu-west-3'\n  [ \"${Location}\" == '22' ] && REGION='eu-south-2'\n  [ \"${Location}\" == '23' ] && REGION='eu-north-1'\n  [ \"${Location}\" == '24' ] && REGION='eu-central-2'\n  [ \"${Location}\" == '25' ] && REGION='me-south-1'\n  [ \"${Location}\" == '26' ] && REGION='me-central-1'\n  [ \"${Location}\" == '27' ] && REGION='sa-east-1'\n  [ \"${Location}\" == '28' ] && REGION='us-gov-east-1'\n  [ \"${Location}\" == '29' ] && REGION='us-gov-west-1'\n  [ \"${Location}\" == '30' ] && REGION='cn-north-1'\n  [ \"${Location}\" == '31' ] && REGION='cn-northwest-1'\n  while :; do echo\n    read -e -p \"Please enter the AWS Access Key: \" ACCESS_KEY\n    [ -z \"${ACCESS_KEY}\" ] && continue\n    echo\n    read -e -p \"Please enter the AWS Access Key: \" SECRET_KEY\n    [ -z \"${SECRET_KEY}\" ] && continue\n    aws configure set aws_access_key_id ${ACCESS_KEY}\n    aws configure set aws_secret_access_key ${SECRET_KEY}\n    aws configure set region ${REGION}\n    aws sts get-caller-identity > /dev/null 2>&1\n    if [ $? -eq 0 ]; then\n      echo \"${CMSG}ACCESS_KEY/SECRET_KEY OK${CEND}\"\n      while :; do echo\n        read -e -p \"Please enter the Amazon S3 bucket: \" S3_BUCKET\n        [ -z \"${S3_BUCKET}\" ] && continue\n        aws s3 ls s3://${S3_BUCKET} > /dev/null 2>&1\n        if [ $? -eq 0 ]; then\n          echo \"${CMSG}Bucket s3://${S3_BUCKET}/ existed${CEND}\"\n          sed -i \"s@^s3_bucket=.*@s3_bucket=${S3_BUCKET}@\" ./options.conf\n          break\n        else\n          aws s3 mb s3://${S3_BUCKET} > /dev/null 2>&1\n          if [ $? -eq 0 ]; then\n            echo \"${CMSG}Bucket s3://${S3_BUCKET}/ created${CEND}\"\n            sed -i \"s@^s3_bucket=.*@s3_bucket=${S3_BUCKET}@\" ./options.conf\n            break\n          else\n            echo \"${CWARNING}The requested bucket name is not available. The bucket namespace is shared by all users of the system. Please select a different name and try again.${CEND}\"\n            continue\n          fi\n        fi\n      done\n      break\n    else\n      echo \"${CWARNING}input error! ACCESS_KEY/SECRET_KEY invalid${CEND}\"\n      continue\n    fi\n  done\nfi\n\nif [ -n \"`echo ${desc_bk} | grep -w 8`\" ]; then\n  if [ ! -e \"/usr/local/bin/dbxcli\" ]; then\n    if [ \"${armplatform}\" == 'y' ]; then\n      wget -qc ${mirror_link}/oneinstack/src/dbxcli-linux-arm -O /usr/local/bin/dbxcli\n    else\n      wget -qc ${mirror_link}/oneinstack/src/dbxcli-linux-amd64 -O /usr/local/bin/dbxcli\n    fi\n    chmod +x /usr/local/bin/dbxcli\n  fi\n  while :; do echo\n    if dbxcli account; then\n      break\n    fi\n  done\nfi\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "init.d",
          "type": "tree",
          "content": null
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 48.3212890625,
          "content": "#!/bin/bash\n# Author:  yeho <lj2007331 AT gmail.com>\n# BLOG:  https://linuxeye.com\n#\n# Notes: LNMP for CentOS/RedHat 7+ Debian 9+ and Ubuntu 16+\n#\n\nexport PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin\nclear\nprintf \"\n#######################################################################\n#         LNMP for CentOS/RedHat 7+ Debian 9+ and Ubuntu 16+          #\n#                              Install                                #\n#######################################################################\n\"\n# Check if user is root\n[ $(id -u) != \"0\" ] && { echo \"${CFAILURE}Error: You must be root to run this script${CEND}\"; exit 1; }\n\ncurrent_dir=$(dirname \"`readlink -f $0`\")\npushd ${current_dir} > /dev/null\n. ./versions.txt\n. ./options.conf\n. ./include/color.sh\n. ./include/check_os.sh\n. ./include/check_dir.sh\n. ./include/download.sh\n. ./include/get_char.sh\n\ndbrootpwd=`< /dev/urandom tr -dc A-Za-z0-9 | head -c8`\ndbpostgrespwd=`< /dev/urandom tr -dc A-Za-z0-9 | head -c8`\ndbmongopwd=`< /dev/urandom tr -dc A-Za-z0-9 | head -c8`\nxcachepwd=`< /dev/urandom tr -dc A-Za-z0-9 | head -c8`\ndbinstallmethod=1\n\nversion() {\n  echo \"version: 2.6\"\n  echo \"updated date: 2023-02-04\"\n}\n\nShow_Help() {\n  version\n  echo \"Usage: $0  command ...[parameters]....\n  --version, -v               Show version info\n  --nginx_option [1-3]        Install Nginx server version\n  --apache                    Install Apache\n  --apache_mode_option [1-2]  Apache2.4 mode, 1(default): php-fpm, 2: mod_php\n  --apache_mpm_option [1-3]   Apache2.4 MPM, 1(default): event, 2: prefork, 3: worker\n  --php_option [1-14]         Install PHP version\n  --mphp_ver [53~83]          Install another PHP version (PATH: ${php_install_dir}\\${mphp_ver})\n  --mphp_addons               Only install another PHP addons\n  --phpcache_option [1-4]     Install PHP opcode cache, default: 1 opcache\n  --php_extensions [ext name] Install PHP extensions, include zendguardloader,ioncube,\n                              sourceguardian,imagick,gmagick,fileinfo,imap,ldap,calendar,phalcon,\n                              yaf,yar,redis,memcached,memcache,mongodb,swoole,xdebug\n  --nodejs                    Install Nodejs\n  --tomcat_option [1-4]       Install Tomcat version\n  --jdk_option [1-3]          Install JDK version\n  --db_option [1-14]          Install DB version\n  --dbinstallmethod [1-2]     DB install method, default: 1 binary install\n  --dbrootpwd [password]      DB super password\n  --pureftpd                  Install Pure-Ftpd\n  --redis                     Install Redis\n  --memcached                 Install Memcached\n  --phpmyadmin                Install phpMyAdmin\n  --ssh_port [No.]            SSH port\n  --firewall                  Enable firewall\n  --md5sum                    Check md5sum\n  --reboot                    Restart the server after installation\n  \"\n}\nARG_NUM=$#\nTEMP=`getopt -o hvV --long help,version,nginx_option:,apache,apache_mode_option:,apache_mpm_option:,php_option:,mphp_ver:,mphp_addons,phpcache_option:,php_extensions:,nodejs,tomcat_option:,jdk_option:,db_option:,dbrootpwd:,dbinstallmethod:,pureftpd,redis,memcached,phpmyadmin,ssh_port:,firewall,md5sum,reboot -- \"$@\" 2>/dev/null`\n[ $? != 0 ] && echo \"${CWARNING}ERROR: unknown argument! ${CEND}\" && Show_Help && exit 1\neval set -- \"${TEMP}\"\nwhile :; do\n  [ -z \"$1\" ] && break;\n  case \"$1\" in\n    -h|--help)\n      Show_Help; exit 0\n      ;;\n    -v|-V|--version)\n      version; exit 0\n      ;;\n    --nginx_option)\n      nginx_option=$2; shift 2\n      [[ ! ${nginx_option} =~ ^[1-3]$ ]] && { echo \"${CWARNING}nginx_option input error! Please only input number 1~3${CEND}\"; exit 1; }\n      [ -e \"${nginx_install_dir}/sbin/nginx\" ] && { echo \"${CWARNING}Nginx already installed! ${CEND}\"; unset nginx_option; }\n      [ -e \"${tengine_install_dir}/sbin/nginx\" ] && { echo \"${CWARNING}Tengine already installed! ${CEND}\"; unset nginx_option; }\n      [ -e \"${openresty_install_dir}/nginx/sbin/nginx\" ] && { echo \"${CWARNING}OpenResty already installed! ${CEND}\"; unset nginx_option; }\n      ;;\n    --apache)\n      apache_flag=y; shift 1\n      [ -e \"${apache_install_dir}/bin/httpd\" ] && { echo \"${CWARNING}Aapche already installed! ${CEND}\"; unset apache_flag; }\n      ;;\n    --apache_mode_option)\n      apache_mode_option=$2; shift 2\n      [[ ! ${apache_mode_option} =~ ^[1-2]$ ]] && { echo \"${CWARNING}apache_mode_option input error! Please only input number 1~2${CEND}\"; exit 1; }\n      ;;\n    --apache_mpm_option)\n      apache_mpm_option=$2; shift 2\n      [[ ! ${apache_mpm_option} =~ ^[1-3]$ ]] && { echo \"${CWARNING}apache_mpm_option input error! Please only input number 1~3${CEND}\"; exit 1; }\n      ;;\n    --php_option)\n      php_option=$2; shift 2\n      [[ ! ${php_option} =~ ^[1-9]$|^1[0-4]$ ]] && { echo \"${CWARNING}php_option input error! Please only input number 1~14${CEND}\"; exit 1; }\n      [ -e \"${php_install_dir}/bin/phpize\" ] && { echo \"${CWARNING}PHP already installed! ${CEND}\"; unset php_option; }\n      ;;\n    --mphp_ver)\n      mphp_ver=$2; mphp_flag=y; shift 2\n      [[ ! \"${mphp_ver}\" =~ ^5[3-6]$|^7[0-4]$|^8[0-3]$ ]] && { echo \"${CWARNING}mphp_ver input error! Please only input number 53~83${CEND}\"; exit 1; }\n      ;;\n    --mphp_addons)\n      mphp_addons_flag=y; shift 1\n      ;;\n    --phpcache_option)\n      phpcache_option=$2; shift 2\n      ;;\n    --php_extensions)\n      php_extensions=$2; shift 2\n      [ -n \"`echo ${php_extensions} | grep -w zendguardloader`\" ] && pecl_zendguardloader=1\n      [ -n \"`echo ${php_extensions} | grep -w ioncube`\" ] && pecl_ioncube=1\n      [ -n \"`echo ${php_extensions} | grep -w sourceguardian`\" ] && pecl_sourceguardian=1\n      [ -n \"`echo ${php_extensions} | grep -w imagick`\" ] && pecl_imagick=1\n      [ -n \"`echo ${php_extensions} | grep -w gmagick`\" ] && pecl_gmagick=1\n      [ -n \"`echo ${php_extensions} | grep -w fileinfo`\" ] && pecl_fileinfo=1\n      [ -n \"`echo ${php_extensions} | grep -w imap`\" ] && pecl_imap=1\n      [ -n \"`echo ${php_extensions} | grep -w ldap`\" ] && pecl_ldap=1\n      [ -n \"`echo ${php_extensions} | grep -w calendar`\" ] && pecl_calendar=1\n      [ -n \"`echo ${php_extensions} | grep -w phalcon`\" ] && pecl_phalcon=1\n      [ -n \"`echo ${php_extensions} | grep -w yaf`\" ] && pecl_yaf=1\n      [ -n \"`echo ${php_extensions} | grep -w yar`\" ] && pecl_yar=1\n      [ -n \"`echo ${php_extensions} | grep -w redis`\" ] && pecl_redis=1\n      [ -n \"`echo ${php_extensions} | grep -w memcached`\" ] && pecl_memcached=1\n      [ -n \"`echo ${php_extensions} | grep -w memcache`\" ] && pecl_memcache=1\n      [ -n \"`echo ${php_extensions} | grep -w mongodb`\" ] && pecl_mongodb=1\n      [ -n \"`echo ${php_extensions} | grep -w swoole`\" ] && pecl_swoole=1\n      [ -n \"`echo ${php_extensions} | grep -w xdebug`\" ] && pecl_xdebug=1\n      ;;\n    --nodejs)\n      nodejs_flag=y; shift 1\n      [ -e \"${nodejs_install_dir}/bin/node\" ] && { echo \"${CWARNING}Nodejs already installed! ${CEND}\"; unset nodejs_flag; }\n      ;;\n    --tomcat_option)\n      tomcat_option=$2; shift 2\n      [[ ! ${tomcat_option} =~ ^[1-4]$ ]] && { echo \"${CWARNING}tomcat_option input error! Please only input number 1~4${CEND}\"; exit 1; }\n      [ -e \"$tomcat_install_dir/conf/server.xml\" ] && { echo \"${CWARNING}Tomcat already installed! ${CEND}\" ; unset tomcat_option; }\n      ;;\n    --jdk_option)\n      jdk_option=$2; shift 2\n      [[ ! ${jdk_option} =~ ^[1-3]$ ]] && { echo \"${CWARNING}jdk_option input error! Please only input number 1~3${CEND}\"; exit 1; }\n      ;;\n    --db_option)\n      db_option=$2; shift 2\n      if [[ \"${db_option}\" =~ ^[1-9]$|^1[0-2]$ ]]; then\n        [ -d \"${db_install_dir}/support-files\" ] && { echo \"${CWARNING}MySQL already installed! ${CEND}\"; unset db_option; }\n      elif [ \"${db_option}\" == '13' ]; then\n        [ -e \"${pgsql_install_dir}/bin/psql\" ] && { echo \"${CWARNING}PostgreSQL already installed! ${CEND}\"; unset db_option; }\n      elif [ \"${db_option}\" == '14' ]; then\n        [ -e \"${mongo_install_dir}/bin/mongo\" ] && { echo \"${CWARNING}MongoDB already installed! ${CEND}\"; unset db_option; }\n      else\n        echo \"${CWARNING}db_option input error! Please only input number 1~14${CEND}\"\n        exit 1\n      fi\n      ;;\n    --dbrootpwd)\n      dbrootpwd=$2; shift 2\n      dbpostgrespwd=\"${dbrootpwd}\"\n      dbmongopwd=\"${dbrootpwd}\"\n      ;;\n    --dbinstallmethod)\n      dbinstallmethod=$2; shift 2\n      [[ ! ${dbinstallmethod} =~ ^[1-2]$ ]] && { echo \"${CWARNING}dbinstallmethod input error! Please only input number 1~2${CEND}\"; exit 1; }\n      ;;\n    --pureftpd)\n      pureftpd_flag=y; shift 1\n      [ -e \"${pureftpd_install_dir}/sbin/pure-ftpwho\" ] && { echo \"${CWARNING}Pure-FTPd already installed! ${CEND}\"; unset pureftpd_flag; }\n      ;;\n    --redis)\n      redis_flag=y; shift 1\n      [ -e \"${redis_install_dir}/bin/redis-server\" ] && { echo \"${CWARNING}redis-server already installed! ${CEND}\"; unset redis_flag; }\n      ;;\n    --memcached)\n      memcached_flag=y; shift 1\n      [ -e \"${memcached_install_dir}/bin/memcached\" ] && { echo \"${CWARNING}memcached-server already installed! ${CEND}\"; unset memcached_flag; }\n      ;;\n    --phpmyadmin)\n      phpmyadmin_flag=y; shift 1\n      [ -d \"${wwwroot_dir}/default/phpMyAdmin\" ] && { echo \"${CWARNING}phpMyAdmin already installed! ${CEND}\"; unset phpmyadmin_flag; }\n      ;;\n    --ssh_port)\n      ssh_port=$2; shift 2\n      ;;\n    --firewall)\n      firewall_flag=y; shift 1\n      ;;\n    --md5sum)\n      md5sum_flag=y; shift 1\n      ;;\n    --reboot)\n      reboot_flag=y; shift 1\n      ;;\n    --)\n      shift\n      ;;\n    *)\n      echo \"${CWARNING}ERROR: unknown argument! ${CEND}\" && Show_Help && exit 1\n      ;;\n  esac\ndone\n\n# Check md5sum\nif [ ${ARG_NUM} == 0 ] && [ ! -e ~/.oneinstack ]; then\n  # Check md5sum\n  while :; do echo\n    read -e -p \"Do you want to check md5sum? [y/n]: \" md5sum_flag\n    if [[ ! ${md5sum_flag} =~ ^[y,n]$ ]]; then\n      echo \"${CWARNING}input error! Please only input 'y' or 'n'${CEND}\"\n    else\n      break\n    fi\n  done\nfi\nif [ \"${md5sum_flag}\" == 'y' ]; then\n  [ -e \"${current_dir}.tar.gz\" ] && oneinstack_file=${current_dir}.tar.gz\n  [ -e \"${current_dir}-full.tar.gz\" ] && oneinstack_file=${current_dir}-full.tar.gz\n  oneinstack_tgz=${oneinstack_file##*/}\n  if [ -e \"${oneinstack_file}\" ]; then\n    now_oneinstack_md5=$(md5sum ${oneinstack_file} | awk '{print $1}')\n    latest_oneinStack_md5=$(curl --connect-timeout 3 -m 5 -s ${mirror_link}/md5sum.txt | grep ${oneinstack_tgz} | awk '{print $1}')\n    if [ \"${now_oneinstack_md5}\" != \"${latest_oneinStack_md5}\" ]; then\n      echo \"${CFAILURE}Error: The md5 value of the installation package does not match the official website, please download again, url: ${mirror_link}/${oneinstack_tgz}${CEND}\"\n      exit 1\n    fi\n  else\n    echo \"${CFAILURE}Error: ${oneinstack_file} does not exist${CEND}\"\n    exit 1\n  fi\nfi\n\n# Use default SSH port 22. If you use another SSH port on your server\nif [ -e \"/etc/ssh/sshd_config\" ]; then\n  [ -z \"`grep ^Port /etc/ssh/sshd_config`\" ] && now_ssh_port=22 || now_ssh_port=`grep ^Port /etc/ssh/sshd_config | awk '{print $2}' | head -1`\n  while :; do echo\n    [ ${ARG_NUM} == 0 ] && read -e -p \"Please input SSH port(Default: ${now_ssh_port}): \" ssh_port\n    ssh_port=${ssh_port:-${now_ssh_port}}\n    if [ ${ssh_port} -eq 22 >/dev/null 2>&1 -o ${ssh_port} -gt 1024 >/dev/null 2>&1 -a ${ssh_port} -lt 65535 >/dev/null 2>&1 ]; then\n      break\n    else\n      echo \"${CWARNING}input error! Input range: 22,1025~65534${CEND}\"\n      exit 1\n    fi\n  done\n\n  if [ -z \"`grep ^Port /etc/ssh/sshd_config`\" -a \"${ssh_port}\" != '22' ]; then\n    sed -i \"s@^#Port.*@&\\nPort ${ssh_port}@\" /etc/ssh/sshd_config\n  elif [ -n \"`grep ^Port /etc/ssh/sshd_config`\" ]; then\n    sed -i \"s@^Port.*@Port ${ssh_port}@\" /etc/ssh/sshd_config\n  fi\nfi\n\nif [ ${ARG_NUM} == 0 ]; then\n  if [ ! -e ~/.oneinstack ]; then\n    # check firewall\n    while :; do echo\n      read -e -p \"Do you want to enable firewall? [y/n]: \" firewall_flag\n      if [[ ! ${firewall_flag} =~ ^[y,n]$ ]]; then\n        echo \"${CWARNING}input error! Please only input 'y' or 'n'${CEND}\"\n      else\n        break\n      fi\n    done\n  fi\n\n  # check Web server\n  while :; do echo\n    read -e -p \"Do you want to install Web server? [y/n]: \" web_flag\n    if [[ ! ${web_flag} =~ ^[y,n]$ ]]; then\n      echo \"${CWARNING}input error! Please only input 'y' or 'n'${CEND}\"\n    else\n      if [ \"${web_flag}\" == 'y' ]; then\n        # Nginx/Tegine/OpenResty\n        while :; do echo\n          echo 'Please select Nginx server:'\n          echo -e \"\\t${CMSG}1${CEND}. Install Nginx\"\n          echo -e \"\\t${CMSG}2${CEND}. Install Tengine\"\n          echo -e \"\\t${CMSG}3${CEND}. Install OpenResty\"\n          echo -e \"\\t${CMSG}4${CEND}. Do not install\"\n          read -e -p \"Please input a number:(Default 1 press Enter) \" nginx_option\n          nginx_option=${nginx_option:-1}\n          if [[ ! ${nginx_option} =~ ^[1-4]$ ]]; then\n            echo \"${CWARNING}input error! Please only input number 1~4${CEND}\"\n          else\n            [ \"${nginx_option}\" != '4' -a -e \"${nginx_install_dir}/sbin/nginx\" ] && { echo \"${CWARNING}Nginx already installed! ${CEND}\"; unset nginx_option; }\n            [ \"${nginx_option}\" != '4' -a -e \"${tengine_install_dir}/sbin/nginx\" ] && { echo \"${CWARNING}Tengine already installed! ${CEND}\"; unset nginx_option; }\n            [ \"${nginx_option}\" != '4' -a -e \"${openresty_install_dir}/nginx/sbin/nginx\" ] && { echo \"${CWARNING}OpenResty already installed! ${CEND}\"; unset nginx_option; }\n            break\n          fi\n        done\n\n        # Apache\n        while :; do echo\n          read -e -p \"Do you want to install Apache? [y/n]: \" apache_flag\n          if [[ ! ${apache_flag} =~ ^[y,n]$ ]]; then\n            echo \"${CWARNING}input error! Please only input 'y' or 'n'${CEND}\"\n          else\n            [ \"${apache_flag}\" == 'y' -a -e \"${apache_install_dir}/bin/httpd\" ] && { echo \"${CWARNING}Aapche already installed! ${CEND}\"; unset apache_flag; }\n            break\n          fi\n        done\n        # Apache2.4 mode and Apache2.4 MPM\n        if [ \"${apache_flag}\" == 'y' -o -e \"${apache_install_dir}/bin/httpd\" ]; then\n          while :; do echo\n            echo 'Please select Apache mode:'\n            echo -e \"\\t${CMSG}1${CEND}. php-fpm\"\n            echo -e \"\\t${CMSG}2${CEND}. mod_php\"\n            read -e -p \"Please input a number:(Default 1 press Enter) \" apache_mode_option\n            apache_mode_option=${apache_mode_option:-1}\n            if [[ ! ${apache_mode_option} =~ ^[1-2]$ ]]; then\n              echo \"${CWARNING}input error! Please only input number 1~2${CEND}\"\n            else\n              break\n            fi\n          done\n          while :; do echo\n            echo 'Please select Apache MPM:'\n            echo -e \"\\t${CMSG}1${CEND}. event\"\n            echo -e \"\\t${CMSG}2${CEND}. prefork\"\n            echo -e \"\\t${CMSG}3${CEND}. worker\"\n            read -e -p \"Please input a number:(Default 1 press Enter) \" apache_mpm_option\n            apache_mpm_option=${apache_mpm_option:-1}\n            if [[ ! ${apache_mpm_option} =~ ^[1-3]$ ]]; then\n              echo \"${CWARNING}input error! Please only input number 1~3${CEND}\"\n            else\n              break\n            fi\n          done\n        fi\n        # Tomcat\n        while :; do echo\n          echo 'Please select tomcat server:'\n          echo -e \"\\t${CMSG}1${CEND}. Install Tomcat-10\"\n          echo -e \"\\t${CMSG}2${CEND}. Install Tomcat-9\"\n          echo -e \"\\t${CMSG}3${CEND}. Install Tomcat-8\"\n          echo -e \"\\t${CMSG}4${CEND}. Install Tomcat-7\"\n          echo -e \"\\t${CMSG}5${CEND}. Do not install\"\n          read -e -p \"Please input a number:(Default 5 press Enter) \" tomcat_option\n          tomcat_option=${tomcat_option:-5}\n          if [[ ! ${tomcat_option} =~ ^[1-5]$ ]]; then\n            echo \"${CWARNING}input error! Please only input number 1~5${CEND}\"\n          else\n            [ \"${tomcat_option}\" != '5' -a -e \"$tomcat_install_dir/conf/server.xml\" ] && { echo \"${CWARNING}Tomcat already installed! ${CEND}\" ; unset tomcat_option; }\n            if [[ \"${tomcat_option}\" =~ ^1$ ]]; then\n              while :; do echo\n                echo 'Please select JDK version:'\n                echo -e \"\\t${CMSG}2${CEND}. Install openjdk-11-jdk\"\n                echo -e \"\\t${CMSG}3${CEND}. Install openjdk-17-jdk\"\n                read -e -p \"Please input a number:(Default 1 press Enter) \" jdk_option\n                jdk_option=${jdk_option:-2}\n                if [[ ! ${jdk_option} =~ ^[2-3]$ ]]; then\n                  echo \"${CWARNING}input error! Please only input number 2~3${CEND}\"\n                else\n                  break\n                fi\n              done\n            elif [[ \"${tomcat_option}\" =~ ^[2-3]$ ]]; then\n              while :; do echo\n                echo 'Please select JDK version:'\n                echo -e \"\\t${CMSG}1${CEND}. Install openjdk-8-jdk\"\n                echo -e \"\\t${CMSG}2${CEND}. Install openjdk-11-jdk\"\n                echo -e \"\\t${CMSG}3${CEND}. Install openjdk-17-jdk\"\n                read -e -p \"Please input a number:(Default 1 press Enter) \" jdk_option\n                jdk_option=${jdk_option:-1}\n                if [[ ! ${jdk_option} =~ ^[1-3]$ ]]; then\n                  echo \"${CWARNING}input error! Please only input number 1~3${CEND}\"\n                else\n                  break\n                fi\n              done\n            elif [ \"${tomcat_option}\" == '4' ]; then\n              while :; do echo\n                echo 'Please select JDK version:'\n                echo -e \"\\t${CMSG}1${CEND}. Install openjdk-8-jdk\"\n                read -e -p \"Please input a number:(Default 1 press Enter) \" jdk_option\n                jdk_option=${jdk_option:-1}\n                if [[ ! ${jdk_option} =~ ^1$ ]]; then\n                  echo \"${CWARNING}input error! Please only input number 1${CEND}\"\n                else\n                  break\n                fi\n              done\n            fi\n            break\n          fi\n        done\n      fi\n      break\n    fi\n  done\n\n  # choice database\n  while :; do echo\n    read -e -p \"Do you want to install Database? [y/n]: \" db_flag\n    if [[ ! ${db_flag} =~ ^[y,n]$ ]]; then\n      echo \"${CWARNING}input error! Please only input 'y' or 'n'${CEND}\"\n    else\n      if [ \"${db_flag}\" == 'y' ]; then\n        while :; do echo\n          echo 'Please select a version of the Database:'\n          echo -e \"\\t${CMSG} 1${CEND}. Install MySQL-8.0\"\n          echo -e \"\\t${CMSG} 2${CEND}. Install MySQL-5.7\"\n          echo -e \"\\t${CMSG} 3${CEND}. Install MySQL-5.6\"\n          echo -e \"\\t${CMSG} 4${CEND}. Install MySQL-5.5\"\n          echo -e \"\\t${CMSG} 5${CEND}. Install MariaDB-10.11\"\n          echo -e \"\\t${CMSG} 6${CEND}. Install MariaDB-10.5\"\n          echo -e \"\\t${CMSG} 7${CEND}. Install MariaDB-10.4\"\n          echo -e \"\\t${CMSG} 8${CEND}. Install MariaDB-5.5\"\n          echo -e \"\\t${CMSG} 9${CEND}. Install Percona-8.0\"\n          echo -e \"\\t${CMSG}10${CEND}. Install Percona-5.7\"\n          echo -e \"\\t${CMSG}11${CEND}. Install Percona-5.6\"\n          echo -e \"\\t${CMSG}12${CEND}. Install Percona-5.5\"\n          echo -e \"\\t${CMSG}13${CEND}. Install PostgreSQL\"\n          echo -e \"\\t${CMSG}14${CEND}. Install MongoDB\"\n          read -e -p \"Please input a number:(Default 2 press Enter) \" db_option\n          db_option=${db_option:-2}\n          if [[ \"${db_option}\" =~ ^[1-9]$|^1[0-4]$ ]]; then\n            if [ \"${db_option}\" == '13' ]; then\n              [ -e \"${pgsql_install_dir}/bin/psql\" ] && { echo \"${CWARNING}PostgreSQL already installed! ${CEND}\"; unset db_option; break; }\n            elif [ \"${db_option}\" == '14' ]; then\n              [ -e \"${mongo_install_dir}/bin/mongo\" ] && { echo \"${CWARNING}MongoDB already installed! ${CEND}\"; unset db_option; break; }\n            else\n              [ -d \"${db_install_dir}/support-files\" ] && { echo \"${CWARNING}MySQL already installed! ${CEND}\"; unset db_option; break; }\n            fi\n            while :; do\n              if [ \"${db_option}\" == '13' ]; then\n                read -e -p \"Please input the postgres password of PostgreSQL(default: ${dbpostgrespwd}): \" dbpwd\n                dbpwd=${dbpwd:-${dbpostgrespwd}}\n              elif [ \"${db_option}\" == '14' ]; then\n                read -e -p \"Please input the root password of MongoDB(default: ${dbmongopwd}): \" dbpwd\n                dbpwd=${dbpwd:-${dbmongopwd}}\n              else\n                read -e -p \"Please input the root password of MySQL(default: ${dbrootpwd}): \" dbpwd\n                dbpwd=${dbpwd:-${dbrootpwd}}\n              fi\n              [ -n \"`echo ${dbpwd} | grep '[+|&]'`\" ] && { echo \"${CWARNING}input error,not contain a plus sign (+) and & ${CEND}\"; continue; }\n              if (( ${#dbpwd} >= 5 )); then\n                if [ \"${db_option}\" == '13' ]; then\n                  dbpostgrespwd=${dbpwd}\n                elif [ \"${db_option}\" == '14' ]; then\n                  dbmongopwd=${dbpwd}\n                else\n                  dbrootpwd=${dbpwd}\n                fi\n                break\n              else\n                echo \"${CWARNING}password least 5 characters! ${CEND}\"\n              fi\n            done\n            # choose install methods\n            if [[ \"${db_option}\" =~ ^[1-9]$|^1[0-2]$ ]]; then\n              while :; do echo\n                echo \"Please choose installation of the database:\"\n                echo -e \"\\t${CMSG}1${CEND}. Install database from binary package.\"\n                echo -e \"\\t${CMSG}2${CEND}. Install database from source package.\"\n                read -e -p \"Please input a number:(Default 1 press Enter) \" dbinstallmethod\n                dbinstallmethod=${dbinstallmethod:-1}\n                if [[ ! ${dbinstallmethod} =~ ^[1-2]$ ]]; then\n                  echo \"${CWARNING}input error! Please only input number 1~2${CEND}\"\n                else\n                  break\n                fi\n              done\n            fi\n            break\n          else\n            echo \"${CWARNING}input error! Please only input number 1~14${CEND}\"\n          fi\n        done\n      fi\n      break\n    fi\n  done\n\n  # choice php\n  while :; do echo\n    read -e -p \"Do you want to install PHP? [y/n]: \" php_flag\n    if [[ ! ${php_flag} =~ ^[y,n]$ ]]; then\n      echo \"${CWARNING}input error! Please only input 'y' or 'n'${CEND}\"\n    else\n      if [ \"${php_flag}\" == 'y' ]; then\n        [ -e \"${php_install_dir}/bin/phpize\" ] && { echo \"${CWARNING}PHP already installed! ${CEND}\"; unset php_option; break; }\n        while :; do echo\n          echo 'Please select a version of the PHP:'\n          echo -e \"\\t${CMSG} 1${CEND}. Install php-5.3\"\n          echo -e \"\\t${CMSG} 2${CEND}. Install php-5.4\"\n          echo -e \"\\t${CMSG} 3${CEND}. Install php-5.5\"\n          echo -e \"\\t${CMSG} 4${CEND}. Install php-5.6\"\n          echo -e \"\\t${CMSG} 5${CEND}. Install php-7.0\"\n          echo -e \"\\t${CMSG} 6${CEND}. Install php-7.1\"\n          echo -e \"\\t${CMSG} 7${CEND}. Install php-7.2\"\n          echo -e \"\\t${CMSG} 8${CEND}. Install php-7.3\"\n          echo -e \"\\t${CMSG} 9${CEND}. Install php-7.4\"\n          echo -e \"\\t${CMSG}10${CEND}. Install php-8.0\"\n          echo -e \"\\t${CMSG}11${CEND}. Install php-8.1\"\n          echo -e \"\\t${CMSG}12${CEND}. Install php-8.2\"\n          echo -e \"\\t${CMSG}13${CEND}. Install php-8.3\"\n          echo -e \"\\t${CMSG}14${CEND}. Install php-8.4\"\n          read -e -p \"Please input a number:(Default 12 press Enter) \" php_option\n          php_option=${php_option:-12}\n          if [[ ! ${php_option} =~ ^[1-9]$|^1[0-4]$ ]]; then\n            echo \"${CWARNING}input error! Please only input number 1~14${CEND}\"\n          else\n            break\n          fi\n        done\n      fi\n      break\n    fi\n  done\n\n  # check php ver\n  if [ -e \"${php_install_dir}/bin/phpize\" ]; then\n    PHP_detail_ver=$(${php_install_dir}/bin/php-config --version)\n    PHP_main_ver=${PHP_detail_ver%.*}\n  fi\n\n  # PHP opcode cache and extensions\n  if [[ ${php_option} =~ ^[1-9]$|^1[0-4]$ ]] || [ -e \"${php_install_dir}/bin/phpize\" ]; then\n    while :; do echo\n      read -e -p \"Do you want to install opcode cache of the PHP? [y/n]: \" phpcache_flag\n      if [[ ! ${phpcache_flag} =~ ^[y,n]$ ]]; then\n        echo \"${CWARNING}input error! Please only input 'y' or 'n'${CEND}\"\n      else\n        if [ \"${phpcache_flag}\" == 'y' ]; then\n          if [ \"${php_option}\" == '1' -o \"${PHP_main_ver}\" == '5.3' ]; then\n            while :; do\n              echo 'Please select a opcode cache of the PHP:'\n              echo -e \"\\t${CMSG}1${CEND}. Install Zend OPcache\"\n              echo -e \"\\t${CMSG}2${CEND}. Install APCU\"\n              echo -e \"\\t${CMSG}3${CEND}. Install XCache\"\n              echo -e \"\\t${CMSG}4${CEND}. Install eAccelerator-0.9\"\n              read -e -p \"Please input a number:(Default 1 press Enter) \" phpcache_option\n              phpcache_option=${phpcache_option:-1}\n              if [[ ! ${phpcache_option} =~ ^[1-4]$ ]]; then\n                echo \"${CWARNING}input error! Please only input number 1~4${CEND}\"\n              else\n                break\n              fi\n            done\n          fi\n          if [ \"${php_option}\" == '2' -o \"${PHP_main_ver}\" == '5.4' ]; then\n            while :; do\n              echo 'Please select a opcode cache of the PHP:'\n              echo -e \"\\t${CMSG}1${CEND}. Install Zend OPcache\"\n              echo -e \"\\t${CMSG}2${CEND}. Install APCU\"\n              echo -e \"\\t${CMSG}3${CEND}. Install XCache\"\n              echo -e \"\\t${CMSG}4${CEND}. Install eAccelerator-1.0-dev\"\n              read -e -p \"Please input a number:(Default 1 press Enter) \" phpcache_option\n              phpcache_option=${phpcache_option:-1}\n              if [[ ! ${phpcache_option} =~ ^[1-4]$ ]]; then\n                echo \"${CWARNING}input error! Please only input number 1~4${CEND}\"\n              else\n                break\n              fi\n            done\n          fi\n          if [ \"${php_option}\" == '3' -o \"${PHP_main_ver}\" == '5.5' ]; then\n            while :; do\n              echo 'Please select a opcode cache of the PHP:'\n              echo -e \"\\t${CMSG}1${CEND}. Install Zend OPcache\"\n              echo -e \"\\t${CMSG}2${CEND}. Install APCU\"\n              echo -e \"\\t${CMSG}3${CEND}. Install XCache\"\n              read -e -p \"Please input a number:(Default 1 press Enter) \" phpcache_option\n              phpcache_option=${phpcache_option:-1}\n              if [[ ! ${phpcache_option} =~ ^[1-3]$ ]]; then\n                echo \"${CWARNING}input error! Please only input number 1~3${CEND}\"\n              else\n                break\n              fi\n            done\n          fi\n          if [ \"${php_option}\" == '4' -o \"${PHP_main_ver}\" == '5.6' ]; then\n            while :; do\n              echo 'Please select a opcode cache of the PHP:'\n              echo -e \"\\t${CMSG}1${CEND}. Install Zend OPcache\"\n              echo -e \"\\t${CMSG}2${CEND}. Install APCU\"\n              echo -e \"\\t${CMSG}3${CEND}. Install XCache\"\n              read -e -p \"Please input a number:(Default 1 press Enter) \" phpcache_option\n              phpcache_option=${phpcache_option:-1}\n              if [[ ! ${phpcache_option} =~ ^[1-3]$ ]]; then\n                echo \"${CWARNING}input error! Please only input number 1~3${CEND}\"\n              else\n                break\n              fi\n            done\n          fi\n          if [[ ${php_option} =~ ^[5-9]$|^1[0-4]$ ]] || [[ \"${PHP_main_ver}\" =~ ^7.[0-4]$|^8.[0-4]$ ]]; then\n            while :; do\n              echo 'Please select a opcode cache of the PHP:'\n              echo -e \"\\t${CMSG}1${CEND}. Install Zend OPcache\"\n              echo -e \"\\t${CMSG}2${CEND}. Install APCU\"\n              read -e -p \"Please input a number:(Default 1 press Enter) \" phpcache_option\n              phpcache_option=${phpcache_option:-1}\n              if [[ ! ${phpcache_option} =~ ^[1-2]$ ]]; then\n                echo \"${CWARNING}input error! Please only input number 1~2${CEND}\"\n              else\n                break\n              fi\n            done\n          fi\n        fi\n        break\n      fi\n    done\n    # set xcache passwd\n    if [ \"${phpcache_option}\" == '3' ]; then\n      while :; do\n        read -e -p \"Please input xcache admin password: \" xcachepwd\n        (( ${#xcachepwd} >= 5 )) && { xcachepwd_md5=$(echo -n \"${xcachepwd}\" | md5sum | awk '{print $1}') ; break ; } || echo \"${CFAILURE}xcache admin password least 5 characters! ${CEND}\"\n      done\n    fi\n    # PHP extension\n    while :; do\n      echo\n      echo 'Please select PHP extensions:'\n      echo -e \"\\t${CMSG} 0${CEND}. Do not install\"\n      echo -e \"\\t${CMSG} 1${CEND}. Install zendguardloader(PHP<=5.6)\"\n      echo -e \"\\t${CMSG} 2${CEND}. Install ioncube\"\n      echo -e \"\\t${CMSG} 3${CEND}. Install sourceguardian(PHP<=7.2)\"\n      echo -e \"\\t${CMSG} 4${CEND}. Install imagick\"\n      echo -e \"\\t${CMSG} 5${CEND}. Install gmagick\"\n      echo -e \"\\t${CMSG} 6${CEND}. Install fileinfo\"\n      echo -e \"\\t${CMSG} 7${CEND}. Install imap\"\n      echo -e \"\\t${CMSG} 8${CEND}. Install ldap\"\n      echo -e \"\\t${CMSG} 9${CEND}. Install phalcon(PHP>=5.5)\"\n      echo -e \"\\t${CMSG}10${CEND}. Install yaf(PHP>=7.0)\"\n      echo -e \"\\t${CMSG}11${CEND}. Install redis\"\n      echo -e \"\\t${CMSG}12${CEND}. Install memcached\"\n      echo -e \"\\t${CMSG}13${CEND}. Install memcache\"\n      echo -e \"\\t${CMSG}14${CEND}. Install mongodb\"\n      echo -e \"\\t${CMSG}15${CEND}. Install swoole\"\n      echo -e \"\\t${CMSG}16${CEND}. Install xdebug(PHP>=5.5)\"\n      read -e -p \"Please input numbers:(Default '4 11 12' press Enter) \" phpext_option\n      phpext_option=${phpext_option:-'4 11 12'}\n      [ \"${phpext_option}\" == '0' ] && break\n      array_phpext=(${phpext_option})\n      array_all=(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16)\n      for v in ${array_phpext[@]}\n      do\n        [ -z \"`echo ${array_all[@]} | grep -w ${v}`\" ] && phpext_flag=1\n      done\n      if [ \"${phpext_flag}\" == '1' ]; then\n        unset phpext_flag\n        echo; echo \"${CWARNING}input error! Please only input number 4 11 12 and so on${CEND}\"; echo\n        continue\n      else\n        [ -n \"`echo ${array_phpext[@]} | grep -w 1`\" ] && pecl_zendguardloader=1\n        [ -n \"`echo ${array_phpext[@]} | grep -w 2`\" ] && pecl_ioncube=1\n        [ -n \"`echo ${array_phpext[@]} | grep -w 3`\" ] && pecl_sourceguardian=1\n        [ -n \"`echo ${array_phpext[@]} | grep -w 4`\" ] && pecl_imagick=1\n        [ -n \"`echo ${array_phpext[@]} | grep -w 5`\" ] && pecl_gmagick=1\n        [ -n \"`echo ${array_phpext[@]} | grep -w 6`\" ] && pecl_fileinfo=1\n        [ -n \"`echo ${array_phpext[@]} | grep -w 7`\" ] && pecl_imap=1\n        [ -n \"`echo ${array_phpext[@]} | grep -w 8`\" ] && pecl_ldap=1\n        [ -n \"`echo ${array_phpext[@]} | grep -w 9`\" ] && pecl_phalcon=1\n        [ -n \"`echo ${array_phpext[@]} | grep -w 10`\" ] && pecl_yaf=1\n        [ -n \"`echo ${array_phpext[@]} | grep -w 11`\" ] && pecl_redis=1\n        [ -n \"`echo ${array_phpext[@]} | grep -w 12`\" ] && pecl_memcached=1\n        [ -n \"`echo ${array_phpext[@]} | grep -w 13`\" ] && pecl_memcache=1\n        [ -n \"`echo ${array_phpext[@]} | grep -w 14`\" ] && pecl_mongodb=1\n        [ -n \"`echo ${array_phpext[@]} | grep -w 15`\" ] && pecl_swoole=1\n        [ -n \"`echo ${array_phpext[@]} | grep -w 16`\" ] && pecl_xdebug=1\n        break\n      fi\n    done\n  fi\n\n  # check Nodejs\n  while :; do echo\n    read -e -p \"Do you want to install Nodejs? [y/n]: \" nodejs_flag\n    if [[ ! ${nodejs_flag} =~ ^[y,n]$ ]]; then\n      echo \"${CWARNING}input error! Please only input 'y' or 'n'${CEND}\"\n    else\n      [ \"${nodejs_flag}\" == 'y' -a -e \"${nodejs_install_dir}/bin/node\" ] && { echo \"${CWARNING}Nodejs already installed! ${CEND}\"; unset nodejs_flag; }\n      break\n    fi\n  done\n\n  # check Pureftpd\n  while :; do echo\n    read -e -p \"Do you want to install Pure-FTPd? [y/n]: \" pureftpd_flag\n    if [[ ! ${pureftpd_flag} =~ ^[y,n]$ ]]; then\n      echo \"${CWARNING}input error! Please only input 'y' or 'n'${CEND}\"\n    else\n      [ \"${pureftpd_flag}\" == 'y' -a -e \"${pureftpd_install_dir}/sbin/pure-ftpwho\" ] && { echo \"${CWARNING}Pure-FTPd already installed! ${CEND}\"; unset pureftpd_flag; }\n      break\n    fi\n  done\n\n  # check phpMyAdmin\n  if [[ ${php_option} =~ ^[1-9]$|^1[0-4]$ ]] || [ -e \"${php_install_dir}/bin/phpize\" ]; then\n    while :; do echo\n      read -e -p \"Do you want to install phpMyAdmin? [y/n]: \" phpmyadmin_flag\n      if [[ ! ${phpmyadmin_flag} =~ ^[y,n]$ ]]; then\n        echo \"${CWARNING}input error! Please only input 'y' or 'n'${CEND}\"\n      else\n        [ \"${phpmyadmin_flag}\" == 'y' -a -d \"${wwwroot_dir}/default/phpMyAdmin\" ] && { echo \"${CWARNING}phpMyAdmin already installed! ${CEND}\"; unset phpmyadmin_flag; }\n        break\n      fi\n    done\n  fi\n\n  # check redis\n  while :; do echo\n    read -e -p \"Do you want to install redis-server? [y/n]: \" redis_flag\n    if [[ ! ${redis_flag} =~ ^[y,n]$ ]]; then\n      echo \"${CWARNING}input error! Please only input 'y' or 'n'${CEND}\"\n    else\n      [ \"${redis_flag}\" == 'y' -a -e \"${redis_install_dir}/bin/redis-server\" ] && { echo \"${CWARNING}redis-server already installed! ${CEND}\"; unset redis_flag; }\n      break\n    fi\n  done\n\n  # check memcached\n  while :; do echo\n    read -e -p \"Do you want to install memcached-server? [y/n]: \" memcached_flag\n    if [[ ! ${memcached_flag} =~ ^[y,n]$ ]]; then\n      echo \"${CWARNING}input error! Please only input 'y' or 'n'${CEND}\"\n    else\n      [ \"${memcached_flag}\" == 'y' -a -e \"${memcached_install_dir}/bin/memcached\" ] && { echo \"${CWARNING}memcached-server already installed! ${CEND}\"; unset memcached_flag; }\n      break\n    fi\n  done\nfi\n\nif [[ ${nginx_option} =~ ^[1-3]$ ]] || [ \"${apache_flag}\" == 'y' ] || [[ ${tomcat_option} =~ ^[1-4]$ ]]; then\n  [ ! -d ${wwwroot_dir}/default ] && mkdir -p ${wwwroot_dir}/default\n  [ ! -d ${wwwlogs_dir} ] && mkdir -p ${wwwlogs_dir}\nfi\n[ -d /data ] && chmod 755 /data\n\n# install wget gcc curl\nif [ ! -e ~/.oneinstack ]; then\n  downloadDepsSrc=1\n  [ \"${PM}\" == 'apt-get' ] && apt-get -y update > /dev/null\n  [ \"${PM}\" == 'yum' ] && yum clean all > /dev/null\n  ${PM} -y install wget gcc curl > /dev/null\nfi\n\n# get the IP information\nIPADDR=$(./include/ois.${ARCH} ip_local)\nOUTIP_STATE=$(./include/ois.${ARCH} ip_state)\n\n# openSSL\n. ./include/openssl.sh\n\n# Check download source packages\n. ./include/check_download.sh\n\n[ \"${armplatform}\" == \"y\" ] && dbinstallmethod=2\ncheckDownload 2>&1 | tee -a ${current_dir}/install.log\n\n# get OS Memory\n. ./include/memory.sh\n\nif [ ! -e ~/.oneinstack ]; then\n  # Check binary dependencies packages\n  . ./include/check_sw.sh\n  case \"${Family}\" in\n    \"rhel\")\n      installDepsRHEL 2>&1 | tee ${current_dir}/install.log\n      . include/init_RHEL.sh 2>&1 | tee -a ${current_dir}/install.log\n      ;;\n    \"debian\")\n      installDepsDebian 2>&1 | tee ${current_dir}/install.log\n      . include/init_Debian.sh 2>&1 | tee -a ${current_dir}/install.log\n      ;;\n    \"ubuntu\")\n      installDepsUbuntu 2>&1 | tee ${current_dir}/install.log\n      . include/init_Ubuntu.sh 2>&1 | tee -a ${current_dir}/install.log\n      ;;\n  esac\n  # Install dependencies from source package\n  installDepsBySrc 2>&1 | tee -a ${current_dir}/install.log\nfi\n\n# start Time\nstartTime=`date +%s`\n\n# openSSL\nInstall_openSSL | tee -a ${current_dir}/install.log\n\n# Jemalloc\nif [[ ${nginx_option} =~ ^[1-3]$ ]] || [[ \"${db_option}\" =~ ^[1-9]$|^1[0-2]$ ]]; then\n  . include/jemalloc.sh\n  Install_Jemalloc | tee -a ${current_dir}/install.log\nfi\n\n# Database\ncase \"${db_option}\" in\n  1)\n    . include/mysql-8.0.sh\n    Install_MySQL80 2>&1 | tee -a ${current_dir}/install.log\n    ;;\n  2)\n    . include/mysql-5.7.sh\n    Install_MySQL57 2>&1 | tee -a ${current_dir}/install.log\n    ;;\n  3)\n    . include/mysql-5.6.sh\n    Install_MySQL56 2>&1 | tee -a ${current_dir}/install.log\n    ;;\n  4)\n    . include/mysql-5.5.sh\n    Install_MySQL55 2>&1 | tee -a ${current_dir}/install.log\n    ;;\n  5)\n    . include/mariadb-10.11.sh\n    Install_MariaDB1011 2>&1 | tee -a ${current_dir}/install.log\n    ;;\n  6)\n    . include/mariadb-10.5.sh\n    Install_MariaDB105 2>&1 | tee -a ${current_dir}/install.log\n    ;;\n  7)\n    . include/mariadb-10.4.sh\n    Install_MariaDB104 2>&1 | tee -a ${current_dir}/install.log\n    ;;\n  8)\n    . include/mariadb-5.5.sh\n    Install_MariaDB55 2>&1 | tee -a ${current_dir}/install.log\n    ;;\n  9)\n    [ \"${Family}\" == 'rhel' ] && [ \"${RHEL_ver}\" == '8' ] && dbinstallmethod=2 && checkDownload\n    . include/percona-8.0.sh\n    Install_Percona80 2>&1 | tee -a ${current_dir}/install.log\n    ;;\n  10)\n    . include/percona-5.7.sh\n    Install_Percona57 2>&1 | tee -a ${current_dir}/install.log\n    ;;\n  11)\n    . include/percona-5.6.sh\n    Install_Percona56 2>&1 | tee -a ${current_dir}/install.log\n    ;;\n  12)\n    . include/percona-5.5.sh\n    Install_Percona55 2>&1 | tee -a ${current_dir}/install.log\n    ;;\n  13)\n    . include/postgresql.sh\n    Install_PostgreSQL 2>&1 | tee -a ${current_dir}/install.log\n    ;;\n  14)\n    . include/mongodb.sh\n    Install_MongoDB 2>&1 | tee -a ${current_dir}/install.log\n    ;;\nesac\n\n# Nginx server\ncase \"${nginx_option}\" in\n  1)\n    . include/nginx.sh\n    Install_Nginx 2>&1 | tee -a ${current_dir}/install.log\n    ;;\n  2)\n    . include/tengine.sh\n    Install_Tengine 2>&1 | tee -a ${current_dir}/install.log\n    ;;\n  3)\n    . include/openresty.sh\n    Install_OpenResty 2>&1 | tee -a ${current_dir}/install.log\n    ;;\nesac\n\n# Apache\nif [ \"${apache_flag}\" == 'y' ]; then\n  apache_mode_option=${apache_mode_option:-1}\n  apache_mpm_option=${apache_mpm_option:-1}\n  . include/apache.sh\n  Install_Apache 2>&1 | tee -a ${current_dir}/install.log\nfi\n\n# PHP\ncase \"${php_option}\" in\n  1)\n    . include/php-5.3.sh\n    Install_PHP53 2>&1 | tee -a ${current_dir}/install.log\n    ;;\n  2)\n    . include/php-5.4.sh\n    Install_PHP54 2>&1 | tee -a ${current_dir}/install.log\n    ;;\n  3)\n    . include/php-5.5.sh\n    Install_PHP55 2>&1 | tee -a ${current_dir}/install.log\n    ;;\n  4)\n    . include/php-5.6.sh\n    Install_PHP56 2>&1 | tee -a ${current_dir}/install.log\n    ;;\n  5)\n    . include/php-7.0.sh\n    Install_PHP70 2>&1 | tee -a ${current_dir}/install.log\n    ;;\n  6)\n    . include/php-7.1.sh\n    Install_PHP71 2>&1 | tee -a ${current_dir}/install.log\n    ;;\n  7)\n    . include/php-7.2.sh\n    Install_PHP72 2>&1 | tee -a ${current_dir}/install.log\n    ;;\n  8)\n    . include/php-7.3.sh\n    Install_PHP73 2>&1 | tee -a ${current_dir}/install.log\n    ;;\n  9)\n    . include/php-7.4.sh\n    Install_PHP74 2>&1 | tee -a ${current_dir}/install.log\n    ;;\n  10)\n    . include/php-8.0.sh\n    Install_PHP80 2>&1 | tee -a ${current_dir}/install.log\n    ;;\n  11)\n    . include/php-8.1.sh\n    Install_PHP81 2>&1 | tee -a ${current_dir}/install.log\n    ;;\n  12)\n    . include/php-8.2.sh\n    Install_PHP82 2>&1 | tee -a ${current_dir}/install.log\n    ;;\n  13)\n    . include/php-8.3.sh\n    Install_PHP83 2>&1 | tee -a ${current_dir}/install.log\n    ;;\n  14)\n    . include/php-8.4.sh\n    Install_PHP84 2>&1 | tee -a ${current_dir}/install.log\n    ;;\nesac\n\nPHP_addons() {\n  # PHP opcode cache\n  case \"${phpcache_option}\" in\n    1)\n      . include/zendopcache.sh\n      Install_ZendOPcache 2>&1 | tee -a ${current_dir}/install.log\n      ;;\n    2)\n      . include/apcu.sh\n      Install_APCU 2>&1 | tee -a ${current_dir}/install.log\n      ;;\n    3)\n      . include/xcache.sh\n      Install_XCache 2>&1 | tee -a ${current_dir}/install.log\n      ;;\n    4)\n      . include/eaccelerator.sh\n      Install_eAccelerator 2>&1 | tee -a ${current_dir}/install.log\n      ;;\n  esac\n\n  # ZendGuardLoader\n  if [ \"${pecl_zendguardloader}\" == '1' ]; then\n    . include/ZendGuardLoader.sh\n    Install_ZendGuardLoader 2>&1 | tee -a ${current_dir}/install.log\n  fi\n\n  # ioncube\n  if [ \"${pecl_ioncube}\" == '1' ]; then\n    . include/ioncube.sh\n    Install_ionCube 2>&1 | tee -a ${current_dir}/install.log\n  fi\n\n  # SourceGuardian\n  if [ \"${pecl_sourceguardian}\" == '1' ]; then\n    . include/sourceguardian.sh\n    Install_SourceGuardian 2>&1 | tee -a ${current_dir}/install.log\n  fi\n\n  # imagick\n  if [ \"${pecl_imagick}\" == '1' ]; then\n    . include/ImageMagick.sh\n    Install_ImageMagick 2>&1 | tee -a ${current_dir}/install.log\n    Install_pecl_imagick 2>&1 | tee -a ${current_dir}/install.log\n  fi\n\n  # gmagick\n  if [ \"${pecl_gmagick}\" == '1' ]; then\n    . include/GraphicsMagick.sh\n    Install_GraphicsMagick 2>&1 | tee -a ${current_dir}/install.log\n    Install_pecl_gmagick 2>&1 | tee -a ${current_dir}/install.log\n  fi\n\n  # fileinfo\n  if [ \"${pecl_fileinfo}\" == '1' ]; then\n    . include/pecl_fileinfo.sh\n    Install_pecl_fileinfo 2>&1 | tee -a ${current_dir}/install.log\n  fi\n\n  # imap\n  if [ \"${pecl_imap}\" == '1' ]; then\n    . include/pecl_imap.sh\n    Install_pecl_imap 2>&1 | tee -a ${current_dir}/install.log\n  fi\n\n  # ldap\n  if [ \"${pecl_ldap}\" == '1' ]; then\n    . include/pecl_ldap.sh\n    Install_pecl_ldap 2>&1 | tee -a ${current_dir}/install.log\n  fi\n\n  # calendar\n  if [ \"${pecl_calendar}\" == '1' ]; then\n    . include/pecl_calendar.sh\n    Install_pecl_calendar 2>&1 | tee -a ${current_dir}/install.log\n  fi\n\n  # phalcon\n  if [ \"${pecl_phalcon}\" == '1' ]; then\n    . include/pecl_phalcon.sh\n    Install_pecl_phalcon 2>&1 | tee -a ${current_dir}/install.log\n  fi\n\n  # yaf\n  if [ \"${pecl_yaf}\" == '1' ]; then\n    . include/pecl_yaf.sh\n    Install_pecl_yaf 2>&1 | tee -a ${current_dir}/install.log\n  fi\n\n  # yar\n  if [ \"${pecl_yar}\" == '1' ]; then\n    . include/pecl_yar.sh\n    Install_pecl_yar 2>&1 | tee -a ${current_dir}/install.log\n  fi\n\n  # pecl_memcached\n  if [ \"${pecl_memcached}\" == '1' ]; then\n    . include/memcached.sh\n    Install_pecl_memcached 2>&1 | tee -a ${current_dir}/install.log\n  fi\n\n  # pecl_memcache\n  if [ \"${pecl_memcache}\" == '1' ]; then\n    . include/memcached.sh\n    Install_pecl_memcache 2>&1 | tee -a ${current_dir}/install.log\n  fi\n\n  # pecl_redis\n  if [ \"${pecl_redis}\" == '1' ]; then\n    . include/redis.sh\n    Install_pecl_redis 2>&1 | tee -a ${current_dir}/install.log\n  fi\n\n  # pecl_mongodb\n  if [ \"${pecl_mongodb}\" == '1' ]; then\n    . include/pecl_mongodb.sh\n    Install_pecl_mongodb 2>&1 | tee -a ${current_dir}/install.log\n  fi\n\n  # swoole\n  if [ \"${pecl_swoole}\" == '1' ]; then\n    . include/pecl_swoole.sh\n    Install_pecl_swoole 2>&1 | tee -a ${current_dir}/install.log\n  fi\n\n  # xdebug\n  if [ \"${pecl_xdebug}\" == '1' ]; then\n    . include/pecl_xdebug.sh\n    Install_pecl_xdebug 2>&1 | tee -a ${current_dir}/install.log\n  fi\n\n  # pecl_pgsql\n  if [ -e \"${pgsql_install_dir}/bin/psql\" ]; then\n    . include/pecl_pgsql.sh\n    Install_pecl_pgsql 2>&1 | tee -a ${current_dir}/install.log\n  fi\n}\n\n[ \"${mphp_addons_flag}\" != 'y' ] && PHP_addons\n\nif [ \"${mphp_flag}\" == 'y' ]; then\n  . include/mphp.sh\n  Install_MPHP 2>&1 | tee -a ${current_dir}/install.log\n  php_install_dir=${php_install_dir}${mphp_ver}\n  PHP_addons\nfi\n\n# JDK\ncase \"${jdk_option}\" in\n  1)\n    . include/openjdk-8.sh\n    Install_OpenJDK8 2>&1 | tee -a ${current_dir}/install.log\n    ;;\n  2)\n    . include/openjdk-11.sh\n    Install_OpenJDK11 2>&1 | tee -a ${current_dir}/install.log\n    ;;\n  3)\n    . include/openjdk-17.sh\n    Install_OpenJDK17 2>&1 | tee -a ${current_dir}/install.log\n    ;;\nesac\n\ncase \"${tomcat_option}\" in\n  1)\n    . include/tomcat-10.sh\n    Install_Tomcat10 2>&1 | tee -a ${current_dir}/install.log\n    ;;\n  2)\n    . include/tomcat-9.sh\n    Install_Tomcat9 2>&1 | tee -a ${current_dir}/install.log\n    ;;\n  3)\n    . include/tomcat-8.sh\n    Install_Tomcat8 2>&1 | tee -a ${current_dir}/install.log\n    ;;\n  4)\n    . include/tomcat-7.sh\n    Install_Tomcat7 2>&1 | tee -a ${current_dir}/install.log\n    ;;\nesac\n\n# Nodejs\nif [ \"${nodejs_flag}\" == 'y' ]; then\n  . include/nodejs.sh\n  Install_Nodejs 2>&1 | tee -a ${current_dir}/install.log\nfi\n\n# Pure-FTPd\nif [ \"${pureftpd_flag}\" == 'y' ]; then\n  . include/pureftpd.sh\n  Install_PureFTPd 2>&1 | tee -a ${current_dir}/install.log\nfi\n\n# phpMyAdmin\nif [ \"${phpmyadmin_flag}\" == 'y' ]; then\n  . include/phpmyadmin.sh\n  Install_phpMyAdmin 2>&1 | tee -a ${current_dir}/install.log\nfi\n\n# redis\nif [ \"${redis_flag}\" == 'y' ]; then\n  . include/redis.sh\n  Install_redis_server 2>&1 | tee -a ${current_dir}/install.log\nfi\n\n# memcached\nif [ \"${memcached_flag}\" == 'y' ]; then\n  . include/memcached.sh\n  Install_memcached_server 2>&1 | tee -a ${current_dir}/install.log\nfi\n\n# index example\nif [ -d \"${wwwroot_dir}/default\" ]; then\n  . include/demo.sh\n  DEMO 2>&1 | tee -a ${current_dir}/install.log\nfi\n\n# get web_install_dir and db_install_dir\n. include/check_dir.sh\n\n# Starting DB\n[ -d \"/etc/mysql\" ] && /bin/mv /etc/mysql{,_bk}\n[ -d \"${db_install_dir}/support-files\" ] && [ -z \"`ps -ef | grep mysqld_safe | grep -v grep`\" ] && service mysqld start\n\n# reload php\n[ -e \"${php_install_dir}/sbin/php-fpm\" ] && { [ -e \"/bin/systemctl\" ] && systemctl reload php-fpm || service php-fpm reload; }\n[ -n \"${mphp_ver}\" -a -e \"${php_install_dir}${mphp_ver}/sbin/php-fpm\" ] && { [ -e \"/bin/systemctl\" ] && systemctl reload php${mphp_ver}-fpm || service php${mphp_ver}-fpm reload; }\n[ -e \"${apache_install_dir}/bin/apachectl\" ] && ${apache_install_dir}/bin/apachectl -k graceful\n\nendTime=`date +%s`\n((installTime=($endTime-$startTime)/60))\necho \"####################Congratulations########################\"\necho \"Total Install Time: ${CQUESTION}${installTime}${CEND} minutes\"\n[[ \"${nginx_option}\" =~ ^[1-3]$ ]] && echo -e \"\\n$(printf \"%-32s\" \"Nginx install dir\":)${CMSG}${web_install_dir}${CEND}\"\n[ \"${apache_flag}\" == 'y' ] && echo -e \"\\n$(printf \"%-32s\" \"Apache install dir\":)${CMSG}${apache_install_dir}${CEND}\"\n[[ \"${tomcat_option}\" =~ ^[1-4]$ ]] && echo -e \"\\n$(printf \"%-32s\" \"Tomcat install dir\":)${CMSG}${tomcat_install_dir}${CEND}\"\n[[ \"${db_option}\" =~ ^[1-9]$|^1[0-2]$ ]] && echo -e \"\\n$(printf \"%-32s\" \"Database install dir:\")${CMSG}${db_install_dir}${CEND}\"\n[[ \"${db_option}\" =~ ^[1-9]$|^1[0-2]$ ]] && echo \"$(printf \"%-32s\" \"Database data dir:\")${CMSG}${db_data_dir}${CEND}\"\n[[ \"${db_option}\" =~ ^[1-9]$|^1[0-2]$ ]] && echo \"$(printf \"%-32s\" \"Database user:\")${CMSG}root${CEND}\"\n[[ \"${db_option}\" =~ ^[1-9]$|^1[0-2]$ ]] && echo \"$(printf \"%-32s\" \"Database password:\")${CMSG}${dbrootpwd}${CEND}\"\n[ \"${db_option}\" == '13' ] && echo -e \"\\n$(printf \"%-32s\" \"PostgreSQL install dir:\")${CMSG}${pgsql_install_dir}${CEND}\"\n[ \"${db_option}\" == '13' ] && echo \"$(printf \"%-32s\" \"PostgreSQL data dir:\")${CMSG}${pgsql_data_dir}${CEND}\"\n[ \"${db_option}\" == '13' ] && echo \"$(printf \"%-32s\" \"PostgreSQL user:\")${CMSG}postgres${CEND}\"\n[ \"${db_option}\" == '13' ] && echo \"$(printf \"%-32s\" \"postgres password:\")${CMSG}${dbpostgrespwd}${CEND}\"\n[ \"${db_option}\" == '14' ] && echo -e \"\\n$(printf \"%-32s\" \"MongoDB install dir:\")${CMSG}${mongo_install_dir}${CEND}\"\n[ \"${db_option}\" == '14' ] && echo \"$(printf \"%-32s\" \"MongoDB data dir:\")${CMSG}${mongo_data_dir}${CEND}\"\n[ \"${db_option}\" == '14' ] && echo \"$(printf \"%-32s\" \"MongoDB user:\")${CMSG}root${CEND}\"\n[ \"${db_option}\" == '14' ] && echo \"$(printf \"%-32s\" \"MongoDB password:\")${CMSG}${dbmongopwd}${CEND}\"\n[[ \"${php_option}\" =~ ^[1-9]$|^1[0-4]$ ]] && echo -e \"\\n$(printf \"%-32s\" \"PHP install dir:\")${CMSG}${php_install_dir}${CEND}\"\n[ \"${phpcache_option}\" == '1' ] && echo \"$(printf \"%-32s\" \"Opcache Control Panel URL:\")${CMSG}http://${IPADDR}/ocp.php${CEND}\"\n[ \"${phpcache_option}\" == '2' ] && echo \"$(printf \"%-32s\" \"APC Control Panel URL:\")${CMSG}http://${IPADDR}/apc.php${CEND}\"\n[ \"${phpcache_option}\" == '3' -a -e \"${php_install_dir}/etc/php.d/04-xcache.ini\" ] && echo \"$(printf \"%-32s\" \"xcache Control Panel URL:\")${CMSG}http://${IPADDR}/xcache${CEND}\"\n[ \"${phpcache_option}\" == '3' -a -e \"${php_install_dir}/etc/php.d/04-xcache.ini\" ] && echo \"$(printf \"%-32s\" \"xcache user:\")${CMSG}admin${CEND}\"\n[ \"${phpcache_option}\" == '3' -a -e \"${php_install_dir}/etc/php.d/04-xcache.ini\" ] && echo \"$(printf \"%-32s\" \"xcache password:\")${CMSG}${xcachepwd}${CEND}\"\n[ \"${phpcache_option}\" == '4' -a -e \"${php_install_dir}/etc/php.d/02-eaccelerator.ini\" ] && echo \"$(printf \"%-32s\" \"eAccelerator Control Panel URL:\")${CMSG}http://${IPADDR}/control.php${CEND}\"\n[ \"${phpcache_option}\" == '4' -a -e \"${php_install_dir}/etc/php.d/02-eaccelerator.ini\" ] && echo \"$(printf \"%-32s\" \"eAccelerator user:\")${CMSG}admin${CEND}\"\n[ \"${phpcache_option}\" == '4' -a -e \"${php_install_dir}/etc/php.d/02-eaccelerator.ini\" ] && echo \"$(printf \"%-32s\" \"eAccelerator password:\")${CMSG}eAccelerator${CEND}\"\n[ \"${pureftpd_flag}\" == 'y' ] && echo -e \"\\n$(printf \"%-32s\" \"Pure-FTPd install dir:\")${CMSG}${pureftpd_install_dir}${CEND}\"\n[ \"${pureftpd_flag}\" == 'y' ] && echo \"$(printf \"%-32s\" \"Create FTP virtual script:\")${CMSG}./pureftpd_vhost.sh${CEND}\"\n[ \"${phpmyadmin_flag}\" == 'y' ] && echo -e \"\\n$(printf \"%-32s\" \"phpMyAdmin dir:\")${CMSG}${wwwroot_dir}/default/phpMyAdmin${CEND}\"\n[ \"${phpmyadmin_flag}\" == 'y' ] && echo \"$(printf \"%-32s\" \"phpMyAdmin Control Panel URL:\")${CMSG}http://${IPADDR}/phpMyAdmin${CEND}\"\n[ \"${redis_flag}\" == 'y' ] && echo -e \"\\n$(printf \"%-32s\" \"redis install dir:\")${CMSG}${redis_install_dir}${CEND}\"\n[ \"${memcached_flag}\" == 'y' ] && echo -e \"\\n$(printf \"%-32s\" \"memcached install dir:\")${CMSG}${memcached_install_dir}${CEND}\"\nif [[ ${nginx_option} =~ ^[1-3]$ ]] || [ \"${apache_flag}\" == 'y' ] || [[ ${tomcat_option} =~ ^[1-4]$ ]]; then\n  echo -e \"\\n$(printf \"%-32s\" \"Index URL:\")${CMSG}http://${IPADDR}/${CEND}\"\nfi\nif [ ${ARG_NUM} == 0 ]; then\n  while :; do echo\n    echo \"${CMSG}Please restart the server and see if the services start up fine.${CEND}\"\n    read -e -p \"Do you want to restart OS ? [y/n]: \" reboot_flag\n    if [[ ! \"${reboot_flag}\" =~ ^[y,n]$ ]]; then\n      echo \"${CWARNING}input error! Please only input 'y' or 'n'${CEND}\"\n    else\n      break\n    fi\n  done\nfi\n[ \"${reboot_flag}\" == 'y' ] && reboot\n"
        },
        {
          "name": "options.conf",
          "type": "blob",
          "size": 2.6455078125,
          "content": "# mirror link\nmirror_link=http://mirrors.linuxeye.com\n\n# set the default timezone\ntimezone=Asia/Shanghai\n\n# Nginx Apache and PHP-FPM process is run as $run_user(Default \"www\"), you can freely specify\nrun_user=www\n# Nginx Apache and PHP-FPM process is run as $run_group(Default \"www\"), you can freely specify\nrun_group=www\n\n# set the default install path, you can freely specify\nnginx_install_dir=/usr/local/nginx\ntengine_install_dir=/usr/local/tengine\nopenresty_install_dir=/usr/local/openresty\napache_install_dir=/usr/local/apache\ntomcat_install_dir=/usr/local/tomcat\n\nmysql_install_dir=/usr/local/mysql\nmariadb_install_dir=/usr/local/mariadb\npercona_install_dir=/usr/local/percona\npgsql_install_dir=/usr/local/pgsql\nmongo_install_dir=/usr/local/mongodb\n\nphp_install_dir=/usr/local/php\n\nnodejs_install_dir=/usr/local/node\n\npureftpd_install_dir=/usr/local/pureftpd\n\nmemcached_install_dir=/usr/local/memcached\n\nredis_install_dir=/usr/local/redis\n\nopenssl_install_dir=/usr/local/openssl\nimagick_install_dir=/usr/local/imagemagick\ngmagick_install_dir=/usr/local/graphicsmagick\ncurl_install_dir=/usr/local/curl\nfreetype_install_dir=/usr/local/freetype\n\napr_install_dir=/usr/local/apr\n\n# Add modules\nnginx_modules_options=''\nphp_modules_options=''\n\n#########################################################################\n# database data storage directory, you can freely specify\nmysql_data_dir=/data/mysql\nmariadb_data_dir=/data/mariadb\npercona_data_dir=/data/percona\npgsql_data_dir=/data/pgsql\nmongo_data_dir=/data/mongodb\n\n# web directory, you can customize\nwwwroot_dir=/data/wwwroot\n\n# nginx Generate a log storage directory, you can freely specify.\nwwwlogs_dir=/data/wwwlogs\n\n#########################################################################\n# [MySQL/MariaDB/Percona] automatically generated, You can't change\ndbrootpwd=\n\n# [PostgreSQL] automatically generated, You can't change\ndbpostgrespwd=\n\n# [MongoDB] automatically generated, You can't change\ndbmongopwd=\n\n#########################################################################\n# Backup Dest directory, change this if you have someother location\nbackup_dir=/data/backup\n\n# How many days before the backup directory will be removed\nexpired_days=5\n\n# local,remote,oss,cos,upyun,qiniu,s3,gdrive,dropbox\nbackup_destination=\n\n# db ; web, You can't change\nbackup_content=\n\n# aliyun OSS Bucket, You can't change\noss_bucket=\n\n# qcloud OSS Bucket, You can't change\ncos_bucket=\n\n# qiniu Bucket, You can't change\nqiniu_bucket=\n\n# Amazon S3 Bucket, You can't change\ns3_bucket=\n\n# The backup of the database, You can't change\ndb_name=\n\n# The backup of the website, You can't change\nwebsite_name=\n\n# oneinstack.tar.gz md5, You can't change\noneinstack_md5=\n"
        },
        {
          "name": "pureftpd_vhost.sh",
          "type": "blob",
          "size": 7.3984375,
          "content": "#!/bin/bash\n# Author:  yeho <lj2007331 AT gmail.com>\n# BLOG:  https://linuxeye.com\n#\n# Notes: LNMP for CentOS/RedHat 7+ Debian 9+ and Ubuntu 16+\n#\n\nexport PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin\nclear\nprintf \"\n#######################################################################\n#         LNMP for CentOS/RedHat 7+ Debian 9+ and Ubuntu 16+          #\n#                 FTP virtual user account management                 #\n#######################################################################\n\"\n# Check if user is root\n[ $(id -u) != \"0\" ] && { echo \"${CFAILURE}Error: You must be root to run this script${CEND}\"; exit 1; }\n\ncurrent_dir=$(dirname \"`readlink -f $0`\")\npushd ${current_dir} > /dev/null\n. ./options.conf\n. ./include/color.sh\n\n[ ! -d \"${pureftpd_install_dir}\" ] && { echo \"${CFAILURE}FTP server does not exist! ${CEND}\"; exit 1; }\n\nFTP_conf=${pureftpd_install_dir}/etc/pure-ftpd.conf\nFTP_tmp_passfile=${pureftpd_install_dir}/etc/pureftpd_psss.tmp\nPuredbfile=${pureftpd_install_dir}/etc/pureftpd.pdb\nPasswdfile=${pureftpd_install_dir}/etc/pureftpd.passwd\nFTP_bin=${pureftpd_install_dir}/bin/pure-pw\n[ -z \"`grep ^PureDB ${FTP_conf}`\" ] && { echo \"${CFAILURE}pure-ftpd is not own password database${CEND}\" ; exit 1; }\n\nARG_NUM=$#\nShow_Help() {\n  echo\n  echo \"Usage: $0  command ...[parameters]....\n  --help, -h                          Show this help message\n  --useradd,--add                     Add username\n  --usermod                           Modify directory\n  --passwd                            Modify password\n  --userdel,--delete                  Delete User\n  --listalluser,--list                List all User\n  --showuser                          List User details\n  --username,-u     [ftp username]    Ftp username\n  --password,-p     [ftp password]    Ftp password\n  --directory,-d,-D [ftp directory]   Ftp home directory\n  \"\n}\n\nTEMP=`getopt -o hu:p:d:D: --long help,useradd,add,usermod,passwd,userdel,delete,listalluser,list,showuser,username:,password:,directory: -- \"$@\" 2>/dev/null`\n[ $? != 0 ] && echo \"${CWARNING}ERROR: unknown argument! ${CEND}\" && Show_Help && exit 1\neval set -- \"${TEMP}\"\nwhile :; do\n  [ -z \"$1\" ] && break;\n  case \"$1\" in\n    -h|--help)\n      Show_Help; exit 0\n      ;;\n    --add|--useradd)\n      useradd_flag=y; shift 1\n      ;;\n    --usermod)\n      usermod_flag=y; shift 1\n      ;;\n    --passwd)\n      passwd_flag=y; shift 1\n      ;;\n    --delete|--userdel)\n      userdel_flag=y; shift 1\n      ;;\n    --list|--listalluser)\n      listalluser_flag=y; shift 1\n      ;;\n    --showuser)\n      showuser_flag=y; shift 1\n      ;;\n    -u|--username)\n      username_flag=y; User=$2; shift 2\n      ;;\n    -p|--password)\n      password_flag=y; Password=$2; shift 2\n      ;;\n    -d|-D|--directory)\n      directory_flag=y; Directory=$2; shift 2\n      ;;\n    --)\n      shift\n      ;;\n    *)\n      echo \"${CWARNING}ERROR: unknown argument! ${CEND}\" && Show_Help && exit 1\n      ;;\n  esac\ndone\n\nUSER() {\n  while :; do\n    if [ \"${username_flag}\" != 'y' ]; then\n      echo\n      read -e -p \"Please input a username: \" User\n    fi\n    if [ -z \"${User}\" ]; then\n      echo \"${CWARNING}username can't be NULL! ${CEND}\"\n    else\n      break\n    fi\n  done\n}\n\nPASSWORD() {\n  while :; do\n    if [ \"${password_flag}\" != 'y' ]; then\n      echo\n      read -e -p \"Please input the password: \" Password\n    fi\n    [ -n \"`echo ${Password} | grep '[+|&]'`\" ] && { echo \"${CWARNING}input error,not contain a plus sign (+) and &${CEND}\"; continue; }\n    if (( ${#Password} >= 5 )); then\n      echo -e \"${Password}\\n${Password}\" > ${FTP_tmp_passfile}\n      break\n    else\n      echo \"${CWARNING}Ftp password least 5 characters! ${CEND}\"\n    fi\n  done\n}\n\nDIRECTORY() {\n  while :; do\n    if [ \"${directory_flag}\" != 'y' ]; then\n      echo\n      read -e -p \"Please input the directory(Default directory: ${wwwroot_dir}): \" Directory\n    fi\n    Directory=${Directory:-${wwwroot_dir}}\n    if [ ! -d \"${Directory}\" ]; then\n      echo \"${CWARNING}The directory does not exist${CEND}\"\n    else\n      break\n    fi\n  done\n}\n\nUserAdd() {\n  USER\n  [ -e \"${Passwdfile}\" ] && [ -n \"`grep ^${User}: ${Passwdfile}`\" ] && { echo \"${CQUESTION}[${User}] is already existed! ${CEND}\"; exit 1; }\n  PASSWORD;DIRECTORY\n  ${FTP_bin} useradd ${User} -f ${Passwdfile} -u ${run_user} -g ${run_group} -d ${Directory} -m < ${FTP_tmp_passfile}\n  ${FTP_bin} mkdb ${Puredbfile} -f ${Passwdfile} > /dev/null 2>&1\n  echo \"#####################################\"\n  echo\n  echo \"[${User}] create successful! \"\n  echo\n  echo \"You user name is : ${CMSG}${User}${CEND}\"\n  echo \"You Password is : ${CMSG}${Password}${CEND}\"\n  echo \"You directory is : ${CMSG}${Directory}${CEND}\"\n  echo\n}\n\nUserMod() {\n  USER\n  [ -e \"${Passwdfile}\" ] && [ -z \"`grep ^${User}: ${Passwdfile}`\" ] && { echo \"${CQUESTION}[${User}] was not existed! ${CEND}\"; exit 1; }\n  DIRECTORY\n  ${FTP_bin} usermod ${User} -f ${Passwdfile} -d ${Directory} -m\n  ${FTP_bin} mkdb ${Puredbfile} -f ${Passwdfile} > /dev/null 2>&1\n  echo \"#####################################\"\n  echo\n  echo \"[${User}] modify a successful! \"\n  echo\n  echo \"You user name is : ${CMSG}${User}${CEND}\"\n  echo \"You new directory is : ${CMSG}${Directory}${CEND}\"\n  echo\n}\n\nUserPasswd() {\n  USER\n  [ -e \"${Passwdfile}\" ] && [ -z \"`grep ^${User}: ${Passwdfile}`\" ] && { echo \"${CQUESTION}[${User}] was not existed! ${CEND}\"; exit 1; }\n  PASSWORD\n  ${FTP_bin} passwd ${User} -f ${Passwdfile} -m < ${FTP_tmp_passfile}\n  ${FTP_bin} mkdb ${Puredbfile} -f ${Passwdfile} > /dev/null 2>&1\n  echo \"#####################################\"\n  echo\n  echo \"[${User}] Password changed successfully! \"\n  echo\n  echo \"You user name is : ${CMSG}${User}${CEND}\"\n  echo \"You new password is : ${CMSG}${Password}${CEND}\"\n  echo\n}\n\nUserDel() {\n  if [ ! -e \"${Passwdfile}\" ]; then\n    echo \"${CQUESTION}User was not existed! ${CEND}\"\n  else\n    ${FTP_bin} list\n  fi\n\n  USER\n  [ -e \"${Passwdfile}\" ] && [ -z \"`grep ^${User}: ${Passwdfile}`\" ] && { echo \"${CQUESTION}[${User}] was not existed! ${CEND}\"; exit 1; }\n  ${FTP_bin} userdel ${User} -f ${Passwdfile} -m\n  ${FTP_bin} mkdb ${Puredbfile} -f ${Passwdfile} > /dev/null 2>&1\n  echo\n  echo \"[${User}] have been deleted! \"\n}\n\nListAllUser() {\n  if [ ! -e \"${Passwdfile}\" ]; then\n    echo \"${CQUESTION}User was not existed! ${CEND}\"\n  else\n    ${FTP_bin} list\n  fi\n}\n\nShowUser() {\n  USER\n  [ -e \"${Passwdfile}\" ] && [ -z \"`grep ^${User}: ${Passwdfile}`\" ] && { echo \"${CQUESTION}[${User}] was not existed! ${CEND}\"; exit 1; }\n  ${FTP_bin} show ${User}\n}\n\nMenu() {\n  while :; do\n    printf \"\nWhat Are You Doing?\n\\t${CMSG}1${CEND}. UserAdd\n\\t${CMSG}2${CEND}. UserMod\n\\t${CMSG}3${CEND}. UserPasswd\n\\t${CMSG}4${CEND}. UserDel\n\\t${CMSG}5${CEND}. ListAllUser\n\\t${CMSG}6${CEND}. ShowUser\n\\t${CMSG}q${CEND}. Exit\n\"\n    read -e -p \"Please input the correct option: \" Number\n    if [[ ! ${Number} =~ ^[1-6,q]$ ]]; then\n      echo \"${CFAILURE}input error! Please only input 1~6 and q${CEND}\"\n    else\n      case \"${Number}\" in\n      1)\n        UserAdd\n        ;;\n      2)\n        UserMod\n        ;;\n      3)\n        UserPasswd\n        ;;\n      4)\n        UserDel\n        ;;\n      5)\n        ListAllUser\n        ;;\n      6)\n        ShowUser\n        ;;\n      q)\n        exit\n        ;;\n      esac\n    fi\n  done\n}\n\nif [ ${ARG_NUM} == 0 ]; then\n  Menu\nelse\n  [ \"${useradd_flag}\" == 'y' ] && UserAdd\n  [ \"${usermod_flag}\" == 'y' ] && UserMod\n  [ \"${passwd_flag}\" == 'y' ] && UserPasswd\n  [ \"${userdel_flag}\" == 'y' ] && UserDel\n  [ \"${listalluser_flag}\" == 'y' ] && ListAllUser\n  [ \"${showuser_flag}\" == 'y' ] && ShowUser\nfi\n"
        },
        {
          "name": "reset_db_root_password.sh",
          "type": "blob",
          "size": 4.78125,
          "content": "#!/bin/bash\n# Author:  yeho <lj2007331 AT gmail.com>\n# BLOG:  https://linuxeye.com\n#\n# Notes: LNMP for CentOS/RedHat 7+ Debian 9+ and Ubuntu 16+\n#\n\nexport PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin\nclear\nprintf \"\n#######################################################################\n#         LNMP for CentOS/RedHat 7+ Debian 9+ and Ubuntu 16+          #\n#                  Reset Database root password                       #\n#######################################################################\n\"\ncurrent_dir=$(dirname \"`readlink -f $0`\")\npushd ${current_dir} > /dev/null\n. ./options.conf\n. ./include/color.sh\n. ./include/check_dir.sh\n[ ! -d \"${db_install_dir}\" ] && { echo \"${CFAILURE}Database is not installed on your system! ${CEND}\"; exit 1; }\n\nShow_Help() {\n  echo \"Usage: $0  command ...[parameters]....\n  -h,  --help                  print this help.\n  -q,  --quiet                 quiet operation.\n  -f,  --force                 Lost Database Password? Forced reset password.\n  -p,  --password [pass]       DB super password.\n  \"\n}\n\nNew_dbrootpwd=\"`< /dev/urandom tr -dc A-Za-z0-9 | head -c8`\"\nTEMP=`getopt -o hqfp: --long help,quiet,force,password: -- \"$@\" 2>/dev/null`\n[ $? != 0 ] && echo \"${CWARNING}ERROR: unknown argument! ${CEND}\" && Show_Help && exit 1\neval set -- \"${TEMP}\"\nwhile :; do\n  [ -z \"$1\" ] && break;\n  case \"$1\" in\n    -h|--help)\n      Show_Help; exit 0\n      ;;\n    -q|--quiet)\n      quiet_flag=y; shift 1\n      ;;\n    -f|--force)\n      force_flag=y; shift 1\n      ;;\n    -p|--password)\n      New_dbrootpwd=$2; shift 2\n      password_flag=y\n      ;;\n    --)\n      shift\n      ;;\n    *)\n      echo \"${CWARNING}ERROR: unknown argument! ${CEND}\" && Show_Help && exit 1\n      ;;\n  esac\ndone\n\nInput_dbrootpwd() {\n  while :; do echo\n    read -e -p \"Please input the root password of database: \" New_dbrootpwd\n    [ -n \"`echo ${New_dbrootpwd} | grep '[+|&]'`\" ] && { echo \"${CWARNING}input error,not contain a plus sign (+) and &${CEND}\"; continue; }\n    (( ${#New_dbrootpwd} >= 5 )) && break || echo \"${CWARNING}database root password least 5 characters! ${CEND}\"\n  done\n}\n\nReset_Interaction_dbrootpwd() {\n  ${db_install_dir}/bin/mysqladmin -uroot -p\"${dbrootpwd}\" password \"${New_dbrootpwd}\" -h localhost > /dev/null 2>&1\n  status_Localhost=`echo $?`\n  ${db_install_dir}/bin/mysqladmin -uroot -p\"${dbrootpwd}\" password \"${New_dbrootpwd}\" -h 127.0.0.1 > /dev/null 2>&1\n  status_127=`echo $?`\n  if [ ${status_Localhost} == '0' -a ${status_127} == '0' ]; then\n    sed -i \"s+^dbrootpwd.*+dbrootpwd='${New_dbrootpwd}'+\" ./options.conf\n    echo\n    echo \"Password reset succesfully! \"\n    echo \"The new password: ${CMSG}${New_dbrootpwd}${CEND}\"\n    echo\n  else\n    echo \"${CFAILURE}Reset Database root password failed! ${CEND}\"\n  fi\n}\n\nReset_force_dbrootpwd() {\n  DB_Ver=\"`${db_install_dir}/bin/mysql_config --version`\"\n  echo \"${CMSG}Stopping MySQL...${CEND}\"\n  service mysqld stop > /dev/null 2>&1\n  while [ -n \"`ps -ef | grep mysqld | grep -v grep | awk '{print $2}'`\" ]; do\n    sleep 1\n  done\n  echo \"${CMSG}skip grant tables...${CEND}\"\n  sed -i '/\\[mysqld\\]/a\\skip-grant-tables' /etc/my.cnf\n  service mysqld start > /dev/null 2>&1\n  sed -i '/^skip-grant-tables/d' /etc/my.cnf\n  while [ -z \"`ps -ef | grep 'mysqld ' | grep -v grep | awk '{print $2}'`\" ]; do\n    sleep 1\n  done\n  if echo \"${DB_Ver}\" | grep -Eqi '^8.0.|^5.7.|^10.[4-5].|^10.11.'; then\n    ${db_install_dir}/bin/mysql -uroot -hlocalhost << EOF\nflush privileges;\nALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY \"${New_dbrootpwd}\";\nALTER USER 'root'@'127.0.0.1' IDENTIFIED WITH mysql_native_password BY \"${New_dbrootpwd}\";\nflush privileges;\nEOF\n  else\n    ${db_install_dir}/bin/mysql -uroot -hlocalhost << EOF\nupdate mysql.user set password = Password(\"${New_dbrootpwd}\") where User = 'root';\nEOF\n  fi\n  if [ $? -eq 0 ]; then\n    killall mysqld\n    while [ -n \"`ps -ef | grep mysqld | grep -v grep | awk '{print $2}'`\" ]; do\n      sleep 1\n    done\n    [ -n \"`ps -ef | grep mysqld | grep -v grep | awk '{print $2}'`\" ] && ps -ef | grep mysqld | grep -v grep | awk '{print $2}' | xargs kill -9 > /dev/null 2>&1\n    service mysqld start > /dev/null 2>&1\n    sed -i \"s+^dbrootpwd.*+dbrootpwd='${New_dbrootpwd}'+\" ./options.conf\n    [ -e ~/ReadMe ] && sed -i \"s+^MySQL root password:.*+MySQL root password: ${New_dbrootpwd}+\"  ~/ReadMe\n    echo\n    echo \"Password reset succesfully! \"\n    echo \"The new password: ${CMSG}${New_dbrootpwd}${CEND}\"\n    echo\n  fi\n}\n\n[ \"${password_flag}\" == 'y' ] && quiet_flag=y\nif [ \"${quiet_flag}\" == 'y' ]; then\n  if [ \"${force_flag}\" == 'y' ]; then\n    Reset_force_dbrootpwd\n  else\n    sleep 2 && [ ! -e /tmp/mysql.sock ] && service mysqld start\n    Reset_Interaction_dbrootpwd\n  fi\nelse\n  Input_dbrootpwd\n  if [ \"${force_flag}\" == 'y' ]; then\n    Reset_force_dbrootpwd\n  else\n    Reset_Interaction_dbrootpwd\n  fi\nfi\npopd > /dev/null\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "uninstall.sh",
          "type": "blob",
          "size": 28.361328125,
          "content": "#!/bin/bash\n# Author:  yeho <lj2007331 AT gmail.com>\n# BLOG:  https://linuxeye.com\n#\n# Notes: LNMP for CentOS/RedHat 7+ Debian 9+ and Ubuntu 16+\n#\n\nexport PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin\nclear\nprintf \"\n#######################################################################\n#         LNMP for CentOS/RedHat 7+ Debian 9+ and Ubuntu 16+          #\n#                              Uninstall                              #\n#######################################################################\n\"\n# Check if user is root\n[ $(id -u) != \"0\" ] && { echo \"${CFAILURE}Error: You must be root to run this script${CEND}\"; exit 1; }\n\ncurrent_dir=$(dirname \"`readlink -f $0`\")\npushd ${current_dir} > /dev/null\n. ./options.conf\n. ./include/color.sh\n. ./include/get_char.sh\n. ./include/check_dir.sh\n\nShow_Help() {\n  echo\n  echo \"Usage: $0  command ...[parameters]....\n  --quiet, -q                   quiet operation\n  --all                         Uninstall All\n  --web                         Uninstall Nginx/Tengine/OpenResty/Apache/Tomcat\n  --mysql                       Uninstall MySQL/MariaDB/Percona\n  --postgresql                  Uninstall PostgreSQL\n  --mongodb                     Uninstall MongoDB\n  --php                         Uninstall PHP (PATH: ${php_install_dir})\n  --mphp_ver [53~83]            Uninstall another PHP version (PATH: ${php_install_dir}\\${mphp_ver})\n  --allphp                      Uninstall all PHP\n  --phpcache                    Uninstall PHP opcode cache\n  --php_extensions [ext name]   Uninstall PHP extensions, include zendguardloader,ioncube,\n                                sourceguardian,imagick,gmagick,fileinfo,imap,ldap,calendar,phalcon,\n                                yaf,yar,redis,memcached,memcache,mongodb,swoole,xdebug\n  --pureftpd                    Uninstall PureFtpd\n  --redis                       Uninstall Redis-server\n  --memcached                   Uninstall Memcached-server\n  --phpmyadmin                  Uninstall phpMyAdmin\n  --nodejs                      Uninstall Nodejs (PATH: ${nodejs_install_dir})\n  \"\n}\n\nARG_NUM=$#\nTEMP=`getopt -o hvVq --long help,version,quiet,all,web,mysql,postgresql,mongodb,php,mphp_ver:,allphp,phpcache,php_extensions:,pureftpd,redis,memcached,phpmyadmin,nodejs -- \"$@\" 2>/dev/null`\n[ $? != 0 ] && echo \"${CWARNING}ERROR: unknown argument! ${CEND}\" && Show_Help && exit 1\neval set -- \"${TEMP}\"\nwhile :; do\n  [ -z \"$1\" ] && break;\n  case \"$1\" in\n    -h|--help)\n      Show_Help; exit 0\n      ;;\n    -q|--quiet)\n      quiet_flag=y\n      uninstall_flag=y\n      shift 1\n      ;;\n    --all)\n      all_flag=y\n      web_flag=y\n      mysql_flag=y\n      postgresql_flag=y\n      mongodb_flag=y\n      allphp_flag=y\n      nodejs_flag=y\n      pureftpd_flag=y\n      redis_flag=y\n      memcached_flag=y\n      phpmyadmin_flag=y\n      shift 1\n      ;;\n    --web)\n      web_flag=y; shift 1\n      ;;\n    --mysql)\n      mysql_flag=y; shift 1\n      ;;\n    --postgresql)\n      postgresql_flag=y; shift 1\n      ;;\n    --mongodb)\n      mongodb_flag=y; shift 1\n      ;;\n    --php)\n      php_flag=y; shift 1\n      ;;\n    --mphp_ver)\n      mphp_ver=$2; mphp_flag=y; shift 2\n      [[ ! \"${mphp_ver}\" =~ ^5[3-6]$|^7[0-4]$|^8[0-1]$ ]] && { echo \"${CWARNING}mphp_ver input error! Please only input number 53~81${CEND}\"; exit 1; }\n      ;;\n    --allphp)\n      allphp_flag=y; shift 1\n      ;;\n    --phpcache)\n      phpcache_flag=y; shift 1\n      ;;\n    --php_extensions)\n      php_extensions=$2; shift 2\n      [ -n \"`echo ${php_extensions} | grep -w zendguardloader`\" ] && pecl_zendguardloader=1\n      [ -n \"`echo ${php_extensions} | grep -w ioncube`\" ] && pecl_ioncube=1\n      [ -n \"`echo ${php_extensions} | grep -w sourceguardian`\" ] && pecl_sourceguardian=1\n      [ -n \"`echo ${php_extensions} | grep -w imagick`\" ] && pecl_imagick=1\n      [ -n \"`echo ${php_extensions} | grep -w gmagick`\" ] && pecl_gmagick=1\n      [ -n \"`echo ${php_extensions} | grep -w fileinfo`\" ] && pecl_fileinfo=1\n      [ -n \"`echo ${php_extensions} | grep -w imap`\" ] && pecl_imap=1\n      [ -n \"`echo ${php_extensions} | grep -w ldap`\" ] && pecl_ldap=1\n      [ -n \"`echo ${php_extensions} | grep -w calendar`\" ] && pecl_calendar=1\n      [ -n \"`echo ${php_extensions} | grep -w phalcon`\" ] && pecl_phalcon=1\n      [ -n \"`echo ${php_extensions} | grep -w yaf`\" ] && pecl_yaf=1\n      [ -n \"`echo ${php_extensions} | grep -w yar`\" ] && pecl_yar=1\n      [ -n \"`echo ${php_extensions} | grep -w redis`\" ] && pecl_redis=1\n      [ -n \"`echo ${php_extensions} | grep -w memcached`\" ] && pecl_memcached=1\n      [ -n \"`echo ${php_extensions} | grep -w memcache`\" ] && pecl_memcache=1\n      [ -n \"`echo ${php_extensions} | grep -w mongodb`\" ] && pecl_mongodb=1\n      [ -n \"`echo ${php_extensions} | grep -w swoole`\" ] && pecl_swoole=1\n      [ -n \"`echo ${php_extensions} | grep -w xdebug`\" ] && pecl_xdebug=1\n      ;;\n    --nodejs)\n      nodejs_flag=y; shift 1\n      ;;\n    --pureftpd)\n      pureftpd_flag=y; shift 1\n      ;;\n    --redis)\n      redis_flag=y; shift 1\n      ;;\n    --memcached)\n      memcached_flag=y; shift 1\n      ;;\n    --phpmyadmin)\n      phpmyadmin_flag=y; shift 1\n      ;;\n    --)\n      shift\n      ;;\n    *)\n      echo \"${CWARNING}ERROR: unknown argument! ${CEND}\" && Show_Help && exit 1\n      ;;\n  esac\ndone\n\nUninstall_status() {\n  if [ \"${quiet_flag}\" != 'y' ]; then\n    while :; do echo\n      read -e -p \"Do you want to uninstall? [y/n]: \" uninstall_flag\n      if [[ ! ${uninstall_flag} =~ ^[y,n]$ ]]; then\n        echo \"${CWARNING}input error! Please only input 'y' or 'n'${CEND}\"\n      else\n        break\n      fi\n    done\n  fi\n}\n\nPrint_Warn() {\n  echo\n  echo \"${CWARNING}You will uninstall OneinStack, Please backup your configure files and DB data! ${CEND}\"\n}\n\nPrint_web() {\n  [ -d \"${nginx_install_dir}\" ] && echo ${nginx_install_dir}\n  [ -d \"${tengine_install_dir}\" ] && echo ${tengine_install_dir}\n  [ -d \"${openresty_install_dir}\" ] && echo ${openresty_install_dir}\n  [ -e \"/etc/init.d/nginx\" ] && echo /etc/init.d/nginx\n  [ -e \"/lib/systemd/system/nginx.service\" ] && echo /lib/systemd/system/nginx.service\n  [ -e \"/etc/logrotate.d/nginx\" ] && echo /etc/logrotate.d/nginx\n\n  [ -d \"${apache_install_dir}\" ] && echo ${apache_install_dir}\n  [ -e \"/lib/systemd/system/httpd.service\" ] && echo /lib/systemd/system/httpd.service\n  [ -e \"/etc/init.d/httpd\" ] && echo /etc/init.d/httpd\n  [ -e \"/etc/logrotate.d/apache\" ] && echo /etc/logrotate.d/apache\n\n  [ -d \"${tomcat_install_dir}\" ] && echo ${tomcat_install_dir}\n  [ -e \"/etc/init.d/tomcat\" ] && echo /etc/init.d/tomcat\n  [ -e \"/etc/logrotate.d/tomcat\" ] && echo /etc/logrotate.d/tomcat\n  [ -d \"/usr/java\" ] && echo /usr/java\n  [ -d \"${apr_install_dir}\" ] && echo ${apr_install_dir}\n}\n\nUninstall_Web() {\n  [ -d \"${nginx_install_dir}\" ] && { killall nginx > /dev/null 2>&1; rm -rf ${nginx_install_dir} /etc/init.d/nginx /etc/logrotate.d/nginx; sed -i \"s@${nginx_install_dir}/sbin:@@\" /etc/profile; echo \"${CMSG}Nginx uninstall completed! ${CEND}\"; }\n  [ -d \"${tengine_install_dir}\" ] && { killall nginx > /dev/null 2>&1; rm -rf ${tengine_install_dir} /etc/init.d/nginx /etc/logrotate.d/nginx; sed -i \"s@${tengine_install_dir}/sbin:@@\" /etc/profile; echo \"${CMSG}Tengine uninstall completed! ${CEND}\"; }\n  [ -d \"${openresty_install_dir}\" ] && { killall nginx > /dev/null 2>&1; rm -rf ${openresty_install_dir} /etc/init.d/nginx /etc/logrotate.d/nginx; sed -i \"s@${openresty_install_dir}/nginx/sbin:@@\" /etc/profile; echo \"${CMSG}OpenResty uninstall completed! ${CEND}\"; }\n  [ -e \"/lib/systemd/system/nginx.service\" ] && { systemctl disable nginx > /dev/null 2>&1; rm -f /lib/systemd/system/nginx.service; }\n  [ -d \"${apache_install_dir}\" ] && { service httpd stop > /dev/null 2>&1; rm -rf ${apache_install_dir} /etc/init.d/httpd /etc/logrotate.d/apache; sed -i \"s@${apache_install_dir}/bin:@@\" /etc/profile; echo \"${CMSG}Apache uninstall completed! ${CEND}\"; }\n  [ -e \"/lib/systemd/system/httpd.service\" ] && { systemctl disable httpd > /dev/null 2>&1; rm -f /lib/systemd/system/httpd.service; }\n  [ -d \"${tomcat_install_dir}\" ] && { killall java > /dev/null 2>&1; rm -rf ${tomcat_install_dir} /etc/init.d/tomcat /etc/logrotate.d/tomcat; echo \"${CMSG}Tomcat uninstall completed! ${CEND}\"; }\n  [ -d \"/usr/java\" ] && { rm -rf /usr/java; sed -i '/export JAVA_HOME=/d' /etc/profile; sed -i '/export CLASSPATH=/d' /etc/profile; sed -i 's@\\$JAVA_HOME/bin:@@' /etc/profile; }\n  [ -e \"${wwwroot_dir}\" ] && /bin/mv ${wwwroot_dir}{,$(date +%Y%m%d%H)}\n  sed -i 's@^website_name=.*@website_name=@' ./options.conf\n  sed -i 's@^backup_content=.*@backup_content=@' ./options.conf\n  [ -d \"${apr_install_dir}\" ] && rm -rf ${apr_install_dir}\n}\n\nPrint_MySQL() {\n  [ -e \"${db_install_dir}\" ] && echo ${db_install_dir}\n  [ -e \"/etc/init.d/mysqld\" ] && echo /etc/init.d/mysqld\n  [ -e \"/etc/my.cnf\" ] && echo /etc/my.cnf\n}\n\nPrint_PostgreSQL() {\n  [ -e \"${pgsql_install_dir}\" ] && echo ${pgsql_install_dir}\n  [ -e \"/etc/init.d/postgresql\" ] && echo /etc/init.d/postgresql\n  [ -e \"/lib/systemd/system/postgresql.service\" ] && echo /lib/systemd/system/postgresql.service\n}\n\nPrint_MongoDB() {\n  [ -e \"${mongo_install_dir}\" ] && echo ${mongo_install_dir}\n  [ -e \"/etc/init.d/mongod\" ] && echo /etc/init.d/mongod\n  [ -e \"/lib/systemd/system/mongod.service\" ] && echo /lib/systemd/system/mongod.service\n  [ -e \"/etc/mongod.conf\" ] && echo /etc/mongod.conf\n}\n\nUninstall_MySQL() {\n  # uninstall mysql,mariadb,percona\n  if [ -d \"${db_install_dir}/support-files\" ]; then\n    service mysqld stop > /dev/null 2>&1\n    rm -rf ${db_install_dir} /etc/init.d/mysqld /etc/my.cnf* /etc/ld.so.conf.d/*{mysql,mariadb,percona}*.conf\n    id -u mysql >/dev/null 2>&1 ; [ $? -eq 0 ] && userdel mysql\n    [ -e \"${db_data_dir}\" ] && /bin/mv ${db_data_dir}{,$(date +%Y%m%d%H)}\n    sed -i 's@^dbrootpwd=.*@dbrootpwd=@' ./options.conf\n    sed -i \"s@${db_install_dir}/bin:@@\" /etc/profile\n    echo \"${CMSG}MySQL uninstall completed! ${CEND}\"\n  fi\n}\n\nUninstall_PostgreSQL() {\n  # uninstall postgresql\n  if [ -e \"${pgsql_install_dir}/bin/psql\" ]; then\n    service postgresql stop > /dev/null 2>&1\n    rm -rf ${pgsql_install_dir} /etc/init.d/postgresql\n    [ -e \"/lib/systemd/system/postgresql.service\" ] && { systemctl disable postgresql > /dev/null 2>&1; rm -f /lib/systemd/system/postgresql.service; }\n    [ -e \"${php_install_dir}/etc/php.d/07-pgsql.ini\" ] && rm -f ${php_install_dir}/etc/php.d/07-pgsql.ini\n    id -u postgres >/dev/null 2>&1 ; [ $? -eq 0 ] && userdel postgres\n    [ -e \"${pgsql_data_dir}\" ] && /bin/mv ${pgsql_data_dir}{,$(date +%Y%m%d%H)}\n    sed -i 's@^dbpostgrespwd=.*@dbpostgrespwd=@' ./options.conf\n    sed -i \"s@${pgsql_install_dir}/bin:@@\" /etc/profile\n    echo \"${CMSG}PostgreSQL uninstall completed! ${CEND}\"\n  fi\n}\n\nUninstall_MongoDB() {\n  # uninstall mongodb\n  if [ -e \"${mongo_install_dir}/bin/mongo\" ]; then\n    service mongod stop > /dev/null 2>&1\n    rm -rf ${mongo_install_dir} /etc/mongod.conf /etc/init.d/mongod /tmp/mongo*.sock\n    [ -e \"/lib/systemd/system/mongod.service\" ] && { systemctl disable mongod > /dev/null 2>&1; rm -f /lib/systemd/system/mongod.service; }\n    [ -e \"${php_install_dir}/etc/php.d/07-mongo.ini\" ] && rm -f ${php_install_dir}/etc/php.d/07-mongo.ini\n    [ -e \"${php_install_dir}/etc/php.d/07-mongodb.ini\" ] && rm -f ${php_install_dir}/etc/php.d/07-mongodb.ini\n    id -u mongod > /dev/null 2>&1 ; [ $? -eq 0 ] && userdel mongod\n    [ -e \"${mongo_data_dir}\" ] && /bin/mv ${mongo_data_dir}{,$(date +%Y%m%d%H)}\n    sed -i 's@^dbmongopwd=.*@dbmongopwd=@' ./options.conf\n    sed -i \"s@${mongo_install_dir}/bin:@@\" /etc/profile\n    echo \"${CMSG}MongoDB uninstall completed! ${CEND}\"\n  fi\n}\n\nPrint_PHP() {\n  [ -e \"${php_install_dir}\" ] && echo ${php_install_dir}\n  [ -e \"/etc/init.d/php-fpm\" ] && echo /etc/init.d/php-fpm\n  [ -e \"/lib/systemd/system/php-fpm.service\" ] && echo /lib/systemd/system/php-fpm.service\n}\n\nPrint_MPHP() {\n  [ -e \"${php_install_dir}${mphp_ver}\" ] && echo ${php_install_dir}${mphp_ver}\n  [ -e \"/etc/init.d/php${mphp_ver}-fpm\" ] && echo /etc/init.d/php${mphp_ver}-fpm\n  [ -e \"/lib/systemd/system/php${mphp_ver}-fpm.service\" ] && echo /lib/systemd/system/php${mphp_ver}-fpm.service\n}\n\nPrint_ALLPHP() {\n  [ -e \"${php_install_dir}\" ] && echo ${php_install_dir}\n  [ -e \"/etc/init.d/php-fpm\" ] && echo /etc/init.d/php-fpm\n  [ -e \"/lib/systemd/system/php-fpm.service\" ] && echo /lib/systemd/system/php-fpm.service\n  for php_ver in 53 54 55 56 70 71 72 73 74 80 81; do\n    [ -e \"${php_install_dir}${php_ver}\" ] && echo ${php_install_dir}${php_ver}\n    [ -e \"/etc/init.d/php${php_ver}-fpm\" ] && echo /etc/init.d/php${php_ver}-fpm\n    [ -e \"/lib/systemd/system/php${php_ver}-fpm.service\" ] && echo /lib/systemd/system/php${php_ver}-fpm.service\n  done\n  [ -e \"${imagick_install_dir}\" ] && echo ${imagick_install_dir}\n  [ -e \"${gmagick_install_dir}\" ] && echo ${gmagick_install_dir}\n  [ -e \"${curl_install_dir}\" ] && echo ${curl_install_dir}\n  [ -e \"${freetype_install_dir}\" ] && echo ${freetype_install_dir}\n}\n\nUninstall_PHP() {\n  [ -e \"/etc/init.d/php-fpm\" ] && { service php-fpm stop > /dev/null 2>&1; rm -f /etc/init.d/php-fpm; }\n  [ -e \"/lib/systemd/system/php-fpm.service\" ] && { systemctl stop php-fpm > /dev/null 2>&1; systemctl disable php-fpm > /dev/null 2>&1; rm -f /lib/systemd/system/php-fpm.service; }\n  [ -e \"${apache_install_dir}/conf/httpd.conf\" ] && [ -n \"`grep libphp ${apache_install_dir}/conf/httpd.conf`\" ] && sed -i '/libphp/d' ${apache_install_dir}/conf/httpd.conf\n  [ -e \"${php_install_dir}\" ] && { rm -rf ${php_install_dir}; echo \"${CMSG}PHP uninstall completed! ${CEND}\"; }\n  sed -i \"s@${php_install_dir}/bin:@@\" /etc/profile\n}\n\nUninstall_MPHP() {\n  [ -e \"/etc/init.d/php${mphp_ver}-fpm\" ] && { service php${mphp_ver}-fpm stop > /dev/null 2>&1; rm -f /etc/init.d/php${mphp_ver}-fpm; }\n  [ -e \"/lib/systemd/system/php${mphp_ver}-fpm.service\" ] && { systemctl stop php${mphp_ver}-fpm > /dev/null 2>&1; systemctl disable php${mphp_ver}-fpm > /dev/null 2>&1; rm -f /lib/systemd/system/php${mphp_ver}-fpm.service; }\n  [ -e \"${php_install_dir}${mphp_ver}\" ] && { rm -rf ${php_install_dir}${mphp_ver}; echo \"${CMSG}PHP${mphp_ver} uninstall completed! ${CEND}\"; }\n}\n\nUninstall_ALLPHP() {\n  [ -e \"/etc/init.d/php-fpm\" ] && { service php-fpm stop > /dev/null 2>&1; rm -f /etc/init.d/php-fpm; }\n  [ -e \"/lib/systemd/system/php-fpm.service\" ] && { systemctl stop php-fpm > /dev/null 2>&1; systemctl disable php-fpm > /dev/null 2>&1; rm -f /lib/systemd/system/php-fpm.service; }\n  [ -e \"${apache_install_dir}/conf/httpd.conf\" ] && [ -n \"`grep libphp ${apache_install_dir}/conf/httpd.conf`\" ] && sed -i '/libphp/d' ${apache_install_dir}/conf/httpd.conf\n  [ -e \"${php_install_dir}\" ] && { rm -rf ${php_install_dir}; echo \"${CMSG}PHP uninstall completed! ${CEND}\"; }\n  sed -i \"s@${php_install_dir}/bin:@@\" /etc/profile\n  for php_ver in 53 54 55 56 70 71 72 73 74 80 81 82 83; do\n    [ -e \"/etc/init.d/php${php_ver}-fpm\" ] && { service php${php_ver}-fpm stop > /dev/null 2>&1; rm -f /etc/init.d/php${php_ver}-fpm; }\n    [ -e \"/lib/systemd/system/php${php_ver}-fpm.service\" ] && { systemctl stop php${php_ver}-fpm > /dev/null 2>&1; systemctl disable php${php_ver}-fpm > /dev/null 2>&1; rm -f /lib/systemd/system/php${php_ver}-fpm.service; }\n    [ -e \"${php_install_dir}${php_ver}\" ] && { rm -rf ${php_install_dir}${php_ver}; echo \"${CMSG}PHP${php_ver} uninstall completed! ${CEND}\"; }\n  done\n  [ -e \"${imagick_install_dir}\" ] && rm -rf ${imagick_install_dir}\n  [ -e \"${gmagick_install_dir}\" ] && rm -rf ${gmagick_install_dir}\n  [ -e \"${curl_install_dir}\" ] && rm -rf ${curl_install_dir}\n  [ -e \"${freetype_install_dir}\" ] && rm -rf ${freetype_install_dir}\n}\n\nUninstall_PHPcache() {\n  . include/zendopcache.sh\n  . include/xcache.sh\n  . include/apcu.sh\n  . include/eaccelerator.sh\n  Uninstall_ZendOPcache\n  Uninstall_XCache\n  Uninstall_APCU\n  Uninstall_eAccelerator\n  # reload php\n  [ -e \"${php_install_dir}/sbin/php-fpm\" ] && { [ -e \"/bin/systemctl\" ] && systemctl reload php-fpm || service php-fpm reload; }\n  [ -n \"${mphp_ver}\" -a -e \"${php_install_dir}${mphp_ver}/sbin/php-fpm\" ] && { [ -e \"/bin/systemctl\" ] && systemctl reload php${mphp_ver}-fpm || service php${mphp_ver}-fpm reload; }\n  [ -e \"${apache_install_dir}/bin/apachectl\" ] && ${apache_install_dir}/bin/apachectl -k graceful\n}\n\nUninstall_PHPext() {\n  # ZendGuardLoader\n  if [ \"${pecl_zendguardloader}\" == '1' ]; then\n    . include/ZendGuardLoader.sh\n    Uninstall_ZendGuardLoader\n  fi\n\n  # ioncube\n  if [ \"${pecl_ioncube}\" == '1' ]; then\n    . include/ioncube.sh\n    Uninstall_ionCube\n  fi\n\n  # SourceGuardian\n  if [ \"${pecl_sourceguardian}\" == '1' ]; then\n    . include/sourceguardian.sh\n    Uninstall_SourceGuardian\n  fi\n\n  # imagick\n  if [ \"${pecl_imagick}\" == '1' ]; then\n    . include/ImageMagick.sh\n    Uninstall_ImageMagick\n    Uninstall_pecl_imagick\n  fi\n\n  # gmagick\n  if [ \"${pecl_gmagick}\" == '1' ]; then\n    . include/GraphicsMagick.sh\n    Uninstall_GraphicsMagick\n    Uninstall_pecl_gmagick\n  fi\n\n  # fileinfo\n  if [ \"${pecl_fileinfo}\" == '1' ]; then\n    . include/pecl_fileinfo.sh\n    Uninstall_pecl_fileinfo\n  fi\n\n  # imap\n  if [ \"${pecl_imap}\" == '1' ]; then\n    . include/pecl_imap.sh\n    Uninstall_pecl_imap\n  fi\n\n  # ldap\n  if [ \"${pecl_ldap}\" == '1' ]; then\n    . include/pecl_ldap.sh\n    Uninstall_pecl_ldap\n  fi\n\n  # calendar\n  if [ \"${pecl_calendar}\" == '1' ]; then\n    . include/pecl_calendar.sh\n    Uninstall_pecl_calendar\n  fi\n\n  # phalcon\n  if [ \"${pecl_phalcon}\" == '1' ]; then\n    . include/pecl_phalcon.sh\n    Uninstall_pecl_phalcon\n  fi\n\n  # yaf\n  if [ \"${pecl_yaf}\" == '1' ]; then\n    . include/pecl_yaf.sh\n    Uninstall_pecl_yaf 2>&1 | tee -a ${current_dir}/install.log\n  fi\n\n  # yar\n  if [ \"${pecl_yar}\" == '1' ]; then\n    . include/pecl_yar.sh\n    Uninstall_pecl_yar 2>&1 | tee -a ${current_dir}/install.log\n  fi\n\n  # pecl_memcached\n  if [ \"${pecl_memcached}\" == '1' ]; then\n    . include/memcached.sh\n    Uninstall_pecl_memcached\n  fi\n\n  # pecl_memcache\n  if [ \"${pecl_memcache}\" == '1' ]; then\n    . include/memcached.sh\n    Uninstall_pecl_memcache\n  fi\n\n  # pecl_redis\n  if [ \"${pecl_redis}\" == '1' ]; then\n    . include/redis.sh\n    Uninstall_pecl_redis\n  fi\n\n  # pecl_mongodb\n  if [ \"${pecl_mongodb}\" == '1' ]; then\n    . include/pecl_mongodb.sh\n    Uninstall_pecl_mongodb\n  fi\n\n  # swoole\n  if [ \"${pecl_swoole}\" == '1' ]; then\n    . include/pecl_swoole.sh\n    Uninstall_pecl_swoole\n  fi\n\n  # xdebug\n  if [ \"${pecl_xdebug}\" == '1' ]; then\n    . include/pecl_xdebug.sh\n    Uninstall_pecl_xdebug\n  fi\n\n  # reload php\n  [ -e \"${php_install_dir}/sbin/php-fpm\" ] && { [ -e \"/bin/systemctl\" ] && systemctl reload php-fpm || service php-fpm reload; }\n  [ -n \"${mphp_ver}\" -a -e \"${php_install_dir}${mphp_ver}/sbin/php-fpm\" ] && { [ -e \"/bin/systemctl\" ] && systemctl reload php${mphp_ver}-fpm || service php${mphp_ver}-fpm reload; }\n  [ -e \"${apache_install_dir}/bin/apachectl\" ] && ${apache_install_dir}/bin/apachectl -k graceful\n}\n\nMenu_PHPext() {\n  while :; do\n    echo 'Please select uninstall PHP extensions:'\n    echo -e \"\\t${CMSG} 0${CEND}. Do not uninstall\"\n    echo -e \"\\t${CMSG} 1${CEND}. Uninstall zendguardloader(PHP<=5.6)\"\n    echo -e \"\\t${CMSG} 2${CEND}. Uninstall ioncube\"\n    echo -e \"\\t${CMSG} 3${CEND}. Uninstall sourceguardian(PHP<=7.2)\"\n    echo -e \"\\t${CMSG} 4${CEND}. Uninstall imagick\"\n    echo -e \"\\t${CMSG} 5${CEND}. Uninstall gmagick\"\n    echo -e \"\\t${CMSG} 6${CEND}. Uninstall fileinfo\"\n    echo -e \"\\t${CMSG} 7${CEND}. Uninstall imap\"\n    echo -e \"\\t${CMSG} 8${CEND}. Uninstall ldap\"\n    echo -e \"\\t${CMSG} 9${CEND}. Uninstall phalcon(PHP>=5.5)\"\n    echo -e \"\\t${CMSG}10${CEND}. Uninstall redis\"\n    echo -e \"\\t${CMSG}11${CEND}. Uninstall memcached\"\n    echo -e \"\\t${CMSG}12${CEND}. Uninstall memcache\"\n    echo -e \"\\t${CMSG}13${CEND}. Uninstall mongodb\"\n    echo -e \"\\t${CMSG}14${CEND}. Uninstall swoole\"\n    echo -e \"\\t${CMSG}15${CEND}. Uninstall xdebug(PHP>=5.5)\"\n    read -e -p \"Please input a number:(Default 0 press Enter) \" phpext_option\n    phpext_option=${phpext_option:-0}\n    [ \"${phpext_option}\" == '0' ] && break\n    array_phpext=(${phpext_option})\n    array_all=(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)\n    for v in ${array_phpext[@]}\n    do\n      [ -z \"`echo ${array_all[@]} | grep -w ${v}`\" ] && phpext_flag=1\n    done\n    if [ \"${phpext_flag}\" == '1' ]; then\n      unset phpext_flag\n      echo; echo \"${CWARNING}input error! Please only input number 1 2 3 14 and so on${CEND}\"; echo\n      continue\n    else\n      [ -n \"`echo ${array_phpext[@]} | grep -w 1`\" ] && pecl_zendguardloader=1\n      [ -n \"`echo ${array_phpext[@]} | grep -w 2`\" ] && pecl_ioncube=1\n      [ -n \"`echo ${array_phpext[@]} | grep -w 3`\" ] && pecl_sourceguardian=1\n      [ -n \"`echo ${array_phpext[@]} | grep -w 4`\" ] && pecl_imagick=1\n      [ -n \"`echo ${array_phpext[@]} | grep -w 5`\" ] && pecl_gmagick=1\n      [ -n \"`echo ${array_phpext[@]} | grep -w 6`\" ] && pecl_fileinfo=1\n      [ -n \"`echo ${array_phpext[@]} | grep -w 7`\" ] && pecl_imap=1\n      [ -n \"`echo ${array_phpext[@]} | grep -w 8`\" ] && pecl_ldap=1\n      [ -n \"`echo ${array_phpext[@]} | grep -w 9`\" ] && pecl_phalcon=1\n      [ -n \"`echo ${array_phpext[@]} | grep -w 10`\" ] && pecl_redis=1\n      [ -n \"`echo ${array_phpext[@]} | grep -w 11`\" ] && pecl_memcached=1\n      [ -n \"`echo ${array_phpext[@]} | grep -w 12`\" ] && pecl_memcache=1\n      [ -n \"`echo ${array_phpext[@]} | grep -w 13`\" ] && pecl_mongodb=1\n      [ -n \"`echo ${array_phpext[@]} | grep -w 14`\" ] && pecl_swoole=1\n      [ -n \"`echo ${array_phpext[@]} | grep -w 15`\" ] && pecl_xdebug=1\n      break\n    fi\n  done\n}\n\nPrint_PureFtpd() {\n  [ -e \"${pureftpd_install_dir}\" ] && echo ${pureftpd_install_dir}\n  [ -e \"/etc/init.d/pureftpd\" ] && echo /etc/init.d/pureftpd\n  [ -e \"/lib/systemd/system/pureftpd.service\" ] && echo /lib/systemd/system/pureftpd.service\n}\n\nUninstall_PureFtpd() {\n  [ -e \"${pureftpd_install_dir}\" ] && { service pureftpd stop > /dev/null 2>&1; rm -rf ${pureftpd_install_dir} /etc/init.d/pureftpd; echo \"${CMSG}Pureftpd uninstall completed! ${CEND}\"; }\n  [ -e \"/lib/systemd/system/pureftpd.service\" ] && { systemctl disable pureftpd > /dev/null 2>&1; rm -f /lib/systemd/system/pureftpd.service; }\n}\n\nPrint_Redis_server() {\n  [ -e \"${redis_install_dir}\" ] && echo ${redis_install_dir}\n  [ -e \"/etc/init.d/redis-server\" ] && echo /etc/init.d/redis-server\n  [ -e \"/lib/systemd/system/redis-server.service\" ] && echo /lib/systemd/system/redis-server.service\n}\n\nUninstall_Redis_server() {\n  [ -e \"${redis_install_dir}\" ] && { service redis-server stop > /dev/null 2>&1; rm -rf ${redis_install_dir} /etc/init.d/redis-server /usr/local/bin/redis-*; echo \"${CMSG}Redis uninstall completed! ${CEND}\"; }\n  [ -e \"/lib/systemd/system/redis-server.service\" ] && { systemctl disable redis-server > /dev/null 2>&1; rm -f /lib/systemd/system/redis-server.service; }\n}\n\nPrint_Memcached_server() {\n  [ -e \"${memcached_install_dir}\" ] && echo ${memcached_install_dir}\n  [ -e \"/etc/init.d/memcached\" ] && echo /etc/init.d/memcached\n  [ -e \"/usr/bin/memcached\" ] && echo /usr/bin/memcached\n}\n\nUninstall_Memcached_server() {\n  [ -e \"${memcached_install_dir}\" ] && { service memcached stop > /dev/null 2>&1; rm -rf ${memcached_install_dir} /etc/init.d/memcached /usr/bin/memcached; echo \"${CMSG}Memcached uninstall completed! ${CEND}\"; }\n}\n\nPrint_phpMyAdmin() {\n  [ -d \"${wwwroot_dir}/default/phpMyAdmin\" ] && echo ${wwwroot_dir}/default/phpMyAdmin\n}\n\nUninstall_phpMyAdmin() {\n  [ -d \"${wwwroot_dir}/default/phpMyAdmin\" ] && rm -rf ${wwwroot_dir}/default/phpMyAdmin\n}\n\nPrint_openssl() {\n  [ -d \"${openssl_install_dir}\" ] && echo ${openssl_install_dir}\n}\n\nUninstall_openssl() {\n  [ -d \"${openssl_install_dir}\" ] && rm -rf ${openssl_install_dir}\n}\n\nPrint_Nodejs() {\n  [ -e \"${nodejs_install_dir}\" ] && echo ${nodejs_install_dir}\n  [ -e \"/etc/profile.d/nodejs.sh\" ] && echo /etc/profile.d/nodejs.sh\n}\n\nMenu() {\nwhile :; do\n  printf \"\nWhat Are You Doing?\n\\t${CMSG} 0${CEND}. Uninstall All\n\\t${CMSG} 1${CEND}. Uninstall Nginx/Tengine/OpenResty/Apache/Tomcat\n\\t${CMSG} 2${CEND}. Uninstall MySQL/MariaDB/Percona\n\\t${CMSG} 3${CEND}. Uninstall PostgreSQL\n\\t${CMSG} 4${CEND}. Uninstall MongoDB\n\\t${CMSG} 5${CEND}. Uninstall all PHP\n\\t${CMSG} 6${CEND}. Uninstall PHP opcode cache\n\\t${CMSG} 7${CEND}. Uninstall PHP extensions\n\\t${CMSG} 8${CEND}. Uninstall PureFtpd\n\\t${CMSG} 9${CEND}. Uninstall Redis\n\\t${CMSG}10${CEND}. Uninstall Memcached\n\\t${CMSG}11${CEND}. Uninstall phpMyAdmin\n\\t${CMSG}12${CEND}. Uninstall Nodejs (PATH: ${nodejs_install_dir})\n\\t${CMSG} q${CEND}. Exit\n\"\n  echo\n  read -e -p \"Please input the correct option: \" Number\n  if [[ ! \"${Number}\" =~ ^[0-9,q]$|^1[0-3]$ ]]; then\n    echo \"${CWARNING}input error! Please only input 0~12 and q${CEND}\"\n  else\n    case \"$Number\" in\n    0)\n      Print_Warn\n      Print_web\n      Print_MySQL\n      Print_PostgreSQL\n      Print_MongoDB\n      Print_ALLPHP\n      Print_PureFtpd\n      Print_Redis_server\n      Print_Memcached_server\n      Print_openssl\n      Print_phpMyAdmin\n      Print_Nodejs\n      Uninstall_status\n      if [ \"${uninstall_flag}\" == 'y' ]; then\n        Uninstall_Web\n        Uninstall_MySQL\n        Uninstall_PostgreSQL\n        Uninstall_MongoDB\n        Uninstall_ALLPHP\n        Uninstall_PureFtpd\n        Uninstall_Redis_server\n        Uninstall_Memcached_server\n        Uninstall_openssl\n        Uninstall_phpMyAdmin\n        . include/nodejs.sh; Uninstall_Nodejs\n      else\n        exit\n      fi\n      ;;\n    1)\n      Print_Warn\n      Print_web\n      Uninstall_status\n      [ \"${uninstall_flag}\" == 'y' ] && Uninstall_Web || exit\n      ;;\n    2)\n      Print_Warn\n      Print_MySQL\n      Uninstall_status\n      [ \"${uninstall_flag}\" == 'y' ] && Uninstall_MySQL || exit\n      ;;\n    3)\n      Print_Warn\n      Print_PostgreSQL\n      Uninstall_status\n      [ \"${uninstall_flag}\" == 'y' ] && Uninstall_PostgreSQL || exit\n      ;;\n    4)\n      Print_Warn\n      Print_MongoDB\n      Uninstall_status\n      [ \"${uninstall_flag}\" == 'y' ] && Uninstall_MongoDB || exit\n      ;;\n    5)\n      Print_ALLPHP\n      Uninstall_status\n      [ \"${uninstall_flag}\" == 'y' ] && Uninstall_ALLPHP || exit\n      ;;\n    6)\n      Uninstall_status\n      [ \"${uninstall_flag}\" == 'y' ] && Uninstall_PHPcache || exit\n      ;;\n    7)\n      Menu_PHPext\n      [ \"${phpext_option}\" != '0' ] && Uninstall_status\n      [ \"${uninstall_flag}\" == 'y' ] && Uninstall_PHPext || exit\n      ;;\n    8)\n      Print_PureFtpd\n      Uninstall_status\n      [ \"${uninstall_flag}\" == 'y' ] && Uninstall_PureFtpd || exit\n      ;;\n    9)\n      Print_Redis_server\n      Uninstall_status\n      [ \"${uninstall_flag}\" == 'y' ] && Uninstall_Redis_server || exit\n      ;;\n    10)\n      Print_Memcached_server\n      Uninstall_status\n      [ \"${uninstall_flag}\" == 'y' ] && Uninstall_Memcached_server || exit\n      ;;\n    11)\n      Print_phpMyAdmin\n      Uninstall_status\n      [ \"${uninstall_flag}\" == 'y' ] && Uninstall_phpMyAdmin || exit\n      ;;\n    12)\n      Print_Nodejs\n      Uninstall_status\n      [ \"${uninstall_flag}\" == 'y' ] && { . include/nodejs.sh; Uninstall_Nodejs; } || exit\n      ;;\n    q)\n      exit\n      ;;\n    esac\n  fi\ndone\n}\n\nif [ ${ARG_NUM} == 0 ]; then\n  Menu\nelse\n  [ \"${web_flag}\" == 'y' ] && Print_web\n  [ \"${mysql_flag}\" == 'y' ] && Print_MySQL\n  [ \"${postgresql_flag}\" == 'y' ] && Print_PostgreSQL\n  [ \"${mongodb_flag}\" == 'y' ] && Print_MongoDB\n  if [ \"${allphp_flag}\" == 'y' ]; then\n    Print_ALLPHP\n  else\n    [ \"${php_flag}\" == 'y' ] && Print_PHP\n    [ \"${mphp_flag}\" == 'y' ] && [ \"${phpcache_flag}\" != 'y' ] && [ -z \"${php_extensions}\" ] && Print_MPHP\n  fi\n  [ \"${pureftpd_flag}\" == 'y' ] && Print_PureFtpd\n  [ \"${redis_flag}\" == 'y' ] && Print_Redis_server\n  [ \"${memcached_flag}\" == 'y' ] && Print_Memcached_server\n  [ \"${phpmyadmin_flag}\" == 'y' ] && Print_phpMyAdmin\n  [ \"${nodejs_flag}\" == 'y' ] && Print_Nodejs\n  [ \"${all_flag}\" == 'y' ] && Print_openssl\n  Uninstall_status\n  if [ \"${uninstall_flag}\" == 'y' ]; then\n    [ \"${web_flag}\" == 'y' ] && Uninstall_Web\n    [ \"${mysql_flag}\" == 'y' ] && Uninstall_MySQL\n    [ \"${postgresql_flag}\" == 'y' ] && Uninstall_PostgreSQL\n    [ \"${mongodb_flag}\" == 'y' ] && Uninstall_MongoDB\n    if [ \"${allphp_flag}\" == 'y' ]; then\n      Uninstall_ALLPHP\n    else\n      [ \"${php_flag}\" == 'y' ] && Uninstall_PHP\n      [ \"${phpcache_flag}\" == 'y' ] && Uninstall_PHPcache\n      [ -n \"${php_extensions}\" ] && Uninstall_PHPext\n      [ \"${mphp_flag}\" == 'y' ] && [ \"${phpcache_flag}\" != 'y' ] && [ -z \"${php_extensions}\" ] && Uninstall_MPHP\n      [ \"${mphp_flag}\" == 'y' ] && [ \"${phpcache_flag}\" == 'y' ] && { php_install_dir=${php_install_dir}${mphp_ver}; Uninstall_PHPcache; }\n      [ \"${mphp_flag}\" == 'y' ] && [ -n \"${php_extensions}\" ] && { php_install_dir=${php_install_dir}${mphp_ver}; Uninstall_PHPext; }\n    fi\n    [ \"${pureftpd_flag}\" == 'y' ] && Uninstall_PureFtpd\n    [ \"${redis_flag}\" == 'y' ] && Uninstall_Redis_server\n    [ \"${memcached_flag}\" == 'y' ] && Uninstall_Memcached_server\n    [ \"${phpmyadmin_flag}\" == 'y' ] && Uninstall_phpMyAdmin\n    [ \"${nodejs_flag}\" == 'y' ] && { . include/nodejs.sh; Uninstall_Nodejs; }\n    [ \"${all_flag}\" == 'y' ] && Uninstall_openssl\n  fi\nfi\n"
        },
        {
          "name": "upgrade.sh",
          "type": "blob",
          "size": 5.365234375,
          "content": "#!/bin/bash\n# Author:  yeho <lj2007331 AT gmail.com>\n# BLOG:  https://linuxeye.com\n#\n# Notes: LNMP for CentOS/RedHat 7+ Debian 9+ and Ubuntu 16+\n#\n\nexport PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin\nclear\nprintf \"\n#######################################################################\n#         LNMP for CentOS/RedHat 7+ Debian 9+ and Ubuntu 16+          #\n#                    Upgrade Software versions                        #\n#######################################################################\n\"\n# Check if user is root\n[ $(id -u) != \"0\" ] && { echo \"${CFAILURE}Error: You must be root to run this script${CEND}\"; exit 1; }\n\ncurrent_dir=$(dirname \"`readlink -f $0`\")\npushd ${current_dir} > /dev/null\n. ./versions.txt\n. ./options.conf\n. ./include/color.sh\n. ./include/check_os.sh\n. ./include/check_dir.sh\n. ./include/download.sh\n. ./include/get_char.sh\n. ./include/upgrade_web.sh\n. ./include/upgrade_db.sh\n. ./include/upgrade_php.sh\n. ./include/upgrade_redis.sh\n. ./include/upgrade_memcached.sh\n. ./include/upgrade_phpmyadmin.sh\n. ./include/upgrade_lnmp.sh\n\n# get the out ip country\nOUTIP_STATE=$(./include/ois.${ARCH} ip_state)\n\nShow_Help() {\n  echo\n  echo \"Usage: $0  command ...[version]....\n  --help, -h                  Show this help message\n  --nginx        [version]    Upgrade Nginx\n  --tengine      [version]    Upgrade Tengine\n  --openresty    [version]    Upgrade OpenResty\n  --apache       [version]    Upgrade Apache\n  --tomcat       [version]    Upgrade Tomcat\n  --db           [version]    Upgrade MySQL/MariaDB/Percona\n  --php          [version]    Upgrade PHP\n  --redis        [version]    Upgrade Redis\n  --memcached    [version]    Upgrade Memcached\n  --phpmyadmin   [version]    Upgrade phpMyAdmin\n  --oneinstack                Upgrade scripts latest\n  --acme.sh                   Upgrade acme.sh latest\n  \"\n}\n\nARG_NUM=$#\nTEMP=`getopt -o h --long help,nginx:,tengine:,openresty:,apache:,tomcat:,db:,php:,redis:,memcached:,phpmyadmin:,oneinstack,acme.sh -- \"$@\" 2>/dev/null`\n[ $? != 0 ] && echo \"${CWARNING}ERROR: unknown argument! ${CEND}\" && Show_Help && exit 1\neval set -- \"${TEMP}\"\nwhile :; do\n  [ -z \"$1\" ] && break;\n  case \"$1\" in\n    -h|--help)\n      Show_Help; exit 0\n      ;;\n    --nginx)\n      nginx_flag=y; NEW_nginx_ver=$2; shift 2\n      ;;\n    --tengine)\n      tengine_flag=y; NEW_tengine_ver=$2; shift 2\n      ;;\n    --openresty)\n      openresty_flag=y; NEW_openresy_ver=$2; shift 2\n      ;;\n    --apache)\n      apache_flag=y; NEW_apache_ver=$2; shift 2\n      ;;\n    --tomcat)\n      tomcat_flag=y; NEW_tomcat_ver=$2; shift 2\n      ;;\n    --db)\n      db_flag=y; NEW_db_ver=$2; shift 2\n      ;;\n    --php)\n      php_flag=y; NEW_php_ver=$2; shift 2\n      ;;\n    --redis)\n      redis_flag=y; NEW_redis_ver=$2; shift 2\n      ;;\n    --memcached)\n      memcached_flag=y; NEW_memcached_ver=$2; shift 2\n      ;;\n    --phpmyadmin)\n      phpmyadmin_flag=y; NEW_phpmyadmin_ver=$2; shift 2\n      ;;\n    --oneinstack)\n      NEW_LNMP_ver=latest; shift 1\n      ;;\n    --acme.sh)\n      NEW_acme_ver=latest; shift 1\n      ;;\n    --)\n      shift\n      ;;\n    *)\n      echo \"${CWARNING}ERROR: unknown argument! ${CEND}\" && Show_Help && exit 1\n      ;;\n  esac\ndone\n\nMenu() {\n  while :; do\n    printf \"\nWhat Are You Doing?\n\\t${CMSG} 1${CEND}. Upgrade Nginx/Tengine/OpenResty\n\\t${CMSG} 2${CEND}. Upgrade Apache\n\\t${CMSG} 3${CEND}. Upgrade Tomcat\n\\t${CMSG} 4${CEND}. Upgrade MySQL/MariaDB/Percona\n\\t${CMSG} 5${CEND}. Upgrade PHP\n\\t${CMSG} 6${CEND}. Upgrade Redis\n\\t${CMSG} 7${CEND}. Upgrade Memcached\n\\t${CMSG} 8${CEND}. Upgrade phpMyAdmin\n\\t${CMSG} 9${CEND}. Upgrade scripts latest\n\\t${CMSG}10${CEND}. Upgrade acme.sh latest\n\\t${CMSG} q${CEND}. Exit\n\"\n    echo\n    read -e -p \"Please input the correct option: \" Upgrade_flag\n    if [[ ! \"${Upgrade_flag}\" =~ ^[1-9,q]$|^10$ ]]; then\n      echo \"${CWARNING}input error! Please only input 1~10 and q${CEND}\"\n    else\n      case \"${Upgrade_flag}\" in\n        1)\n          [ -e \"${nginx_install_dir}/sbin/nginx\" ] && Upgrade_Nginx\n          [ -e \"${tengine_install_dir}/sbin/nginx\" ] && Upgrade_Tengine\n          [ -e \"${openresty_install_dir}/nginx/sbin/nginx\" ] && Upgrade_OpenResty\n          ;;\n        2)\n          Upgrade_Apache\n          ;;\n        3)\n          Upgrade_Tomcat\n          ;;\n        4)\n          Upgrade_DB\n          ;;\n        5)\n          Upgrade_PHP\n          ;;\n        6)\n          Upgrade_Redis\n          ;;\n        7)\n          Upgrade_Memcached\n          ;;\n        8)\n          Upgrade_phpMyAdmin\n          ;;\n        9)\n          Upgrade_LNMP\n          ;;\n        10)\n          [ -e ~/.acme.sh/acme.sh ] && { ~/.acme.sh/acme.sh --force --upgrade; ~/.acme.sh/acme.sh --version; }\n          ;;\n        q)\n          exit\n          ;;\n      esac\n    fi\n  done\n}\n\nif [ ${ARG_NUM} == 0 ]; then\n  Menu\nelse\n  [ \"${nginx_flag}\" == 'y' ] && Upgrade_Nginx\n  [ \"${tengine_flag}\" == 'y' ] && Upgrade_Tengine\n  [ \"${openresty_flag}\" == 'y' ] && Upgrade_OpenResty\n  [ \"${apache_flag}\" == 'y' ] && Upgrade_Apache\n  [ \"${tomcat_flag}\" == 'y' ] && Upgrade_Tomcat\n  [ \"${db_flag}\" == 'y' ] && Upgrade_DB\n  [ \"${php_flag}\" == 'y' ] && Upgrade_PHP\n  [ \"${redis_flag}\" == 'y' ] && Upgrade_Redis\n  [ \"${memcached_flag}\" == 'y' ] && Upgrade_Memcached\n  [ \"${phpmyadmin_flag}\" == 'y' ] && Upgrade_phpMyAdmin\n  [ \"${NEW_LNMP_ver}\" == 'latest' ] && Upgrade_LNMP\n  [ \"${NEW_acme_ver}\" == 'latest' ] && [ -e ~/.acme.sh/acme.sh ] && { ~/.acme.sh/acme.sh --force --upgrade; ~/.acme.sh/acme.sh --version; }\nfi\n"
        },
        {
          "name": "versions.txt",
          "type": "blob",
          "size": 1.921875,
          "content": "# newest software version\n# Web\nnginx_ver=1.26.2\ntengine_ver=3.1.0\nopenresty_ver=1.27.1.1\nopenssl_ver=3.4.0\nopenssl_oldver=1.0.2u\n\ntomcat10_ver=10.1.34\ntomcat9_ver=9.0.98\ntomcat8_ver=8.5.100\ntomcat7_ver=7.0.109\n\napache_ver=2.4.62\npcre_ver=8.45\napr_ver=1.7.0\napr_util_ver=1.6.1\nnghttp2_ver=1.42.0\n\n# DB\nmysql80_ver=8.0.40\nmysql57_ver=5.7.44\nmysql56_ver=5.6.51\nmysql55_ver=5.5.62\n\nmariadb1011_ver=10.11.9\nmariadb105_ver=10.5.27\nmariadb104_ver=10.4.34\nmariadb55_ver=5.5.68\n\npercona80_ver=8.0.39-30\npercona57_ver=5.7.44-48\npercona56_ver=5.6.51-91.0\npercona55_ver=5.5.62-38.14\n\npgsql_ver=12.7\n\nmongodb_ver=4.0.26\n\n# PHP\nphp53_ver=5.3.29\nphp54_ver=5.4.45\nphp55_ver=5.5.38\nphp56_ver=5.6.40\nphp70_ver=7.0.33\nphp71_ver=7.1.33\nphp72_ver=7.2.34\nphp73_ver=7.3.33\nphp74_ver=7.4.33\nphp80_ver=8.0.30\nphp81_ver=8.1.31\nphp82_ver=8.2.27\nphp83_ver=8.3.15\nphp84_ver=8.4.2\n\n# Nodejs\nnodejs_ver=20.17.0\n\nlibiconv_ver=1.16\ncurl_ver=8.11.0\nlibmcrypt_ver=2.5.8\nmcrypt_ver=2.6.8\nmhash_ver=0.9.9.9\nfreetype_ver=2.10.1\nicu4c_ver=63_1\nlibsodium_ver=1.0.20\nlibzip_ver=1.2.0\nargon2_ver=20171227\nbinutils_ver=2.42\nimagemagick_ver=7.1.1-43\nimagick_ver=3.7.0\ngraphicsmagick_ver=1.3.40\ngmagick_ver=2.0.6RC1\nzendopcache_ver=7.0.5\napcu_ver=5.1.24\nxcache_ver=3.2.0\neaccelerator_ver=0.9.6.1\nphalcon_ver=5.4.0\nyaf_ver=3.3.2\nyar_ver=2.2.0\nswoole_ver=5.0.3\nxdebug_ver=3.1.2\nxdebug_oldver=2.9.8\n\n# Ftp\npureftpd_ver=1.0.51\n\n# Redis\nredis_ver=7.4.1\nredis_oldver=6.2.14\npecl_redis_ver=6.1.0\n\n# Memcached\nmemcached_ver=1.6.34\nlibmemcached_ver=1.0.18\npecl_memcached_ver=3.2.0\npecl_memcached_oldver=2.2.0\npecl_memcache_ver=8.2\npecl_memcache_oldver=4.0.5.2\n\n# MongoDB\npecl_mongodb_ver=1.20.1\n\n# phpMyadmin\nphpmyadmin_ver=5.2.1\nphpmyadmin_oldver=4.4.15.10\n\n# jemalloc\njemalloc_ver=5.3.0\n\n# boost\nboost_ver=1.77.0\nboost_percona_ver=1.77.0\nboost_oldver=1.59.0\n\n# Others\nlua_nginx_module_ver=0.10.27\nluajit2_ver=2.1-20241113\nlua_resty_core_ver=0.1.30\nlua_resty_lrucache_ver=0.15\nlua_cjson_ver=2.1.0.14\nfail2ban_ver=master\n"
        },
        {
          "name": "vhost.sh",
          "type": "blob",
          "size": 55.1708984375,
          "content": "#!/bin/bash\n# Author:  yeho <lj2007331 AT gmail.com>\n# BLOG:  https://linuxeye.com\n#\n# Notes: LNMP for CentOS/RedHat 7+ Debian 9+ and Ubuntu 16+\n#\n\nexport PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin\nclear\nprintf \"\n#######################################################################\n#         LNMP for CentOS/RedHat 7+ Debian 9+ and Ubuntu 16+          #\n#######################################################################\n\"\n# Check if user is root\n[ $(id -u) != '0' ] && { echo \"${CFAILURE}Error: You must be root to run this script${CEND}\"; exit 1; }\n\ncurrent_dir=$(dirname \"`readlink -f $0`\")\npushd ${current_dir} > /dev/null\n. ./options.conf\n. ./include/color.sh\n. ./include/check_dir.sh\n. ./include/check_os.sh\n. ./include/get_char.sh\n\nShow_Help() {\n  echo\n  echo \"Usage: $0  command ...[parameters]....\n  --help, -h                  Show this help message\n  --quiet, -q                 quiet operation\n  --list, -l                  List Virtualhost\n  --mphp_ver [53~83]          Use another PHP version (PATH: /usr/local/php${mphp_ver})\n  --proxy                     Use proxy\n  --add                       Add Virtualhost\n  --delete, --del             Delete Virtualhost\n  --httponly                  Use HTTP Only\n  --selfsigned                Use your own SSL Certificate and Key\n  --letsencrypt               Use Let's Encrypt to Create SSL Certificate and Key\n  --dnsapi                    Use dns API to automatically issue Let's Encrypt Cert\n  \"\n}\n\nARG_NUM=$#\nTEMP=`getopt -o hql --long help,quiet,list,proxy,mphp_ver:,add,delete,del,httponly,selfsigned,letsencrypt,dnsapi -- \"$@\" 2>/dev/null`\n[ $? != 0 ] && echo \"${CWARNING}ERROR: unknown argument! ${CEND}\" && Show_Help && exit 1\neval set -- \"${TEMP}\"\nwhile :; do\n  [ -z \"$1\" ] && break;\n  case \"$1\" in\n    -h|--help)\n      Show_Help; exit 0\n      ;;\n    -q|--quiet)\n      quiet_flag=y; shift 1\n      ;;\n    -l|--list)\n      list_flag=y; shift 1\n      ;;\n    --mphp_ver)\n      mphp_ver=$2; mphp_flag=y; shift 2\n      [[ ! \"${mphp_ver}\" =~ ^5[3-6]$|^7[0-4]$|^8[0-3]$ ]] && { echo \"${CWARNING}mphp_ver input error! Please only input number 53~83${CEND}\"; unset mphp_ver mphp_flag; }\n      ;;\n    --proxy)\n      proxy_flag=y; shift 1\n      ;;\n    --add)\n      add_flag=y; shift 1\n      ;;\n    --delete|--del)\n      delete_flag=y; shift 1\n      ;;\n    --httponly)\n      sslquiet_flag=y\n      httponly_flag=y\n      Domian_Mode=1\n      shift 1\n      ;;\n    --selfsigned)\n      sslquiet_flag=y\n      selfsigned_flag=y\n      Domian_Mode=2\n      shift 1\n      ;;\n    --letsencrypt)\n      sslquiet_flag=y\n      letsencrypt_flag=y\n      Domian_Mode=3\n      shift 1\n      ;;\n    --dnsapi)\n      sslquiet_flag=y\n      dnsapi_flag=y\n      letsencrypt_flag=y\n      shift 1\n      ;;\n    --)\n      shift\n      ;;\n    *)\n      echo \"${CWARNING}ERROR: unknown argument! ${CEND}\" && Show_Help && exit 1\n      ;;\n  esac\ndone\n\nChoose_ENV() {\n  if [ -e \"${apache_install_dir}/bin/apachectl\" ];then\n    [ \"$(${apache_install_dir}/bin/apachectl -v | awk -F'.' /version/'{print $2}')\" == '4' ] && { Apache_main_ver=24; Apache_grant='Require all granted'; }\n    [ \"$(${apache_install_dir}/bin/apachectl -v | awk -F'.' /version/'{print $2}')\" == '2' ] && Apache_main_ver=22\n  fi\n  if [ -e \"${php_install_dir}/bin/phpize\" -a -e \"${tomcat_install_dir}/conf/server.xml\" ] && [[ -z ${proxy_flag} || \"${proxy_flag}\" != 'y' ]]; then\n    Number=11\n    while :; do echo\n      echo \"Please choose to use environment:\"\n      echo -e \"\\t${CMSG}1${CEND}. Use php\"\n      echo -e \"\\t${CMSG}2${CEND}. Use java\"\n      read -e -p \"Please input a number:(Default 1 press Enter) \" ENV_FLAG\n      ENV_FLAG=${ENV_FLAG:-1}\n      if [[ ! ${ENV_FLAG} =~ ^[1-2]$ ]]; then\n        echo \"${CWARNING}input error! Please only input number 1~2${CEND}\"\n      else\n        break\n      fi\n    done\n    case \"${ENV_FLAG}\" in\n      1)\n        NGX_FLAG=php\n        ;;\n      2)\n        NGX_FLAG=java\n        ;;\n    esac\n  elif [ -e \"${php_install_dir}/bin/phpize\" -a ! -e \"${tomcat_install_dir}/conf/server.xml\" ]; then\n    Number=10\n    NGX_FLAG=php\n  elif [ ! -e \"${php_install_dir}/bin/phpize\" -a -e \"${tomcat_install_dir}/conf/server.xml\" ]; then\n    Number=01\n    NGX_FLAG=java\n  else\n    Number=00\n    NGX_FLAG=php\n  fi\n}\n\nCreate_SSL() {\n  if [ \"${Domian_Mode}\" == '2' ]; then\n    printf \"\nYou are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n\"\n    echo\n    read -e -p \"Country Name (2 letter code) [CN]: \" SELFSIGNEDSSL_C\n    SELFSIGNEDSSL_C=${SELFSIGNEDSSL_C:-CN}\n    # shellcheck disable=SC2104\n    [ ${#SELFSIGNEDSSL_C} != 2 ] && { echo \"${CWARNING}input error, You must input 2 letter code country name${CEND}\"; continue; }\n    echo\n    read -e -p \"State or Province Name (full name) [Shanghai]: \" SELFSIGNEDSSL_ST\n    SELFSIGNEDSSL_ST=${SELFSIGNEDSSL_ST:-Shanghai}\n    echo\n    read -e -p \"Locality Name (eg, city) [Shanghai]: \" SELFSIGNEDSSL_L\n    SELFSIGNEDSSL_L=${SELFSIGNEDSSL_L:-Shanghai}\n    echo\n    read -e -p \"Organization Name (eg, company) [Example Inc.]: \" SELFSIGNEDSSL_O\n    SELFSIGNEDSSL_O=${SELFSIGNEDSSL_O:-\"Example Inc.\"}\n    echo\n    read -e -p \"Organizational Unit Name (eg, section) [IT Dept.]: \" SELFSIGNEDSSL_OU\n    SELFSIGNEDSSL_OU=${SELFSIGNEDSSL_OU:-\"IT Dept.\"}\n\n    openssl req -utf8 -new -newkey rsa:2048 -sha256 -nodes -out ${PATH_SSL}/${domain}.csr -keyout ${PATH_SSL}/${domain}.key -subj \"/C=${SELFSIGNEDSSL_C}/ST=${SELFSIGNEDSSL_ST}/L=${SELFSIGNEDSSL_L}/O=${SELFSIGNEDSSL_O}/OU=${SELFSIGNEDSSL_OU}/CN=${domain}\" > /dev/null 2>&1\n    openssl x509 -req -days 36500 -sha256 -in ${PATH_SSL}/${domain}.csr -signkey ${PATH_SSL}/${domain}.key -out ${PATH_SSL}/${domain}.crt > /dev/null 2>&1\n  elif [ \"${Domian_Mode}\" == '3' -o \"${dnsapi_flag}\" == 'y' ]; then\n      while :; do echo\n        echo 'Please select domain cert key length.'\n        echo \"${CMSG}Enter one of 2048, 3072, 4096, 8192 will issue a RSA cert.${CEND}\"\n        echo \"${CMSG}Enter one of ec-256, ec-384, ec-521 will issue a ECC cert.${CEND}\"\n        echo\n        read -e -p \"Please enter your cert key length (default ec-256): \" CERT_KEYLENGTH\n        if [ \"${CERT_KEYLENGTH}\" == \"\" ]; then\n          CERT_KEYLENGTH=\"ec-256\"\n          break\n        elif [[ \"${CERT_KEYLENGTH}\" =~ ^2048$|^3072$|^4096$|^8192$|^ec-256$|^ec-384$|^ec-521$ ]]; then\n          break\n        else\n          echo \"${CWARNING}input error!${CEND}\"\n        fi\n      done\n    if [ ! -e ~/.acme.sh/ca/acme.zerossl.com/v2/DV90/account.key ]; then\n      while :; do echo\n        read -e -p \"Please enter your email: \" EMAIL\n        echo\n        if [[ \"${EMAIL}\" =~ ^[A-Za-z0-9._-]+@[A-Za-z0-9._-]+\\.[A-Za-z]{2,9}$ ]]; then\n          break\n        else\n          echo \"${CWARNING}input error!${CEND}\"\n        fi\n      done\n      ~/.acme.sh/acme.sh --register-account -m ${EMAIL}\n    fi\n    if [ \"${moredomain}\" == \"*.${domain}\" -o \"${dnsapi_flag}\" == 'y' ]; then\n      while :; do echo\n        echo 'Please select DNS provider:'\n        echo \"${CMSG}dp${CEND},${CMSG}cx${CEND},${CMSG}ali${CEND},${CMSG}cf${CEND},${CMSG}aws${CEND},${CMSG}linode${CEND},${CMSG}he${CEND},${CMSG}namesilo${CEND},${CMSG}dgon${CEND},${CMSG}freedns${CEND},${CMSG}gd${CEND},${CMSG}namecom${CEND} and so on.\"\n        read -e -p \"Please enter your DNS provider: \" DNS_PRO\n        if [ -e ~/.acme.sh/dnsapi/dns_${DNS_PRO}.sh ]; then\n          break\n        else\n          echo \"${CWARNING}You DNS api mode is not supported${CEND}\"\n        fi\n      done\n      while :; do echo\n        echo \"Syntax: export Key1=Value1 ; export Key2=Value1\"\n        read -e -p \"Please enter your dnsapi parameters: \" DNS_PAR\n        echo\n        eval ${DNS_PAR}\n        if [ $? == 0 ]; then\n          break\n        else\n          echo \"${CWARNING}Syntax error! PS: export Ali_Key=LTq ; export Ali_Secret=0q5E${CEND}\"\n        fi\n      done\n      [ \"${moredomainame_flag}\" == 'y' ] && moredomainame_D=\"$(for D in ${moredomainame}; do echo -d ${D}; done)\"\n      ~/.acme.sh/acme.sh --force --issue -k ${CERT_KEYLENGTH} --dns dns_${DNS_PRO} -d ${domain} ${moredomainame_D}\n    else\n      if [ \"${nginx_ssl_flag}\" == 'y' ]; then\n        [ ! -d ${web_install_dir}/conf/vhost ] && mkdir ${web_install_dir}/conf/vhost\n        if [ -n \"`ifconfig | grep inet6`\" ]; then\n          echo \"server {  listen 80;  listen [::]:80;  server_name ${domain}${moredomainame};  root ${vhostdir};  access_log off; }\" > ${web_install_dir}/conf/vhost/${domain}.conf\n        else\n          echo \"server {  listen 80;  server_name ${domain}${moredomainame};  root ${vhostdir};  access_log off; }\" > ${web_install_dir}/conf/vhost/${domain}.conf\n        fi\n        ${web_install_dir}/sbin/nginx -s reload\n      fi\n      if [ \"${apache_ssl_flag}\" == 'y' ]; then\n        [ ! -d ${apache_install_dir}/conf/vhost ] && mkdir ${apache_install_dir}/conf/vhost\n        cat > ${apache_install_dir}/conf/vhost/${domain}.conf << EOF\n<VirtualHost *:80>\n  ServerAdmin admin@example.com\n  DocumentRoot \"${vhostdir}\"\n  ServerName ${domain}\n  ${Apache_Domain_alias}\n<Directory \"${vhostdir}\">\n  SetOutputFilter DEFLATE\n  Options FollowSymLinks ExecCGI\n  ${Apache_grant}\n  AllowOverride All\n  Order allow,deny\n  Allow from all\n  DirectoryIndex index.html index.php\n</Directory>\n</VirtualHost>\nEOF\n        ${apache_install_dir}/bin/apachectl -k graceful\n      fi\n      auth_file=\"`< /dev/urandom tr -dc A-Za-z0-9 | head -c8`\".html\n      auth_str='oneinstack'; echo ${auth_str} > ${vhostdir}/${auth_file}\n      for D in ${domain} ${moredomainame}\n      do\n        curl_str=`curl --connect-timeout 30 -4 -s $D/${auth_file} 2>&1`\n        [ \"${curl_str}\" != \"${auth_str}\" ] && { echo; echo \"${CFAILURE}Let's Encrypt Verify error! DNS problem: NXDOMAIN looking up A for ${D}${CEND}\"; }\n      done\n      rm -f ${vhostdir}/${auth_file}\n      [ \"${moredomainame_flag}\" == 'y' ] && moredomainame_D=\"$(for D in ${moredomainame}; do echo -d ${D}; done)\"\n      ~/.acme.sh/acme.sh --force --issue -k ${CERT_KEYLENGTH} -w ${vhostdir} -d ${domain} ${moredomainame_D}\n    fi\n      [ -e \"${PATH_SSL}/${domain}.crt\" ] && rm -f ${PATH_SSL}/${domain}.{crt,key}\n      Nginx_cmd=\"/bin/systemctl restart nginx\"\n      Apache_cmd=\"${apache_install_dir}/bin/apachectl -k graceful\"\n      if [ -e \"${web_install_dir}/sbin/nginx\" -a -e \"${apache_install_dir}/bin/httpd\" ]; then\n        Command=\"${Nginx_cmd};${Apache_cmd}\"\n      elif [ -e \"${web_install_dir}/sbin/nginx\" -a ! -e \"${apache_install_dir}/bin/httpd\" ]; then\n        Command=\"${Nginx_cmd}\"\n      elif [ ! -e \"${web_install_dir}/sbin/nginx\" -a -e \"${apache_install_dir}/bin/httpd\" ]; then\n        Command=\"${Apache_cmd}\"\n      fi\n    if [ -s ~/.acme.sh/${domain}/fullchain.cer ] && [[ \"${CERT_KEYLENGTH}\" =~ ^2048$|^3072$|^4096$|^8192$ ]]; then\n      ~/.acme.sh/acme.sh --force --install-cert -d ${domain} --fullchain-file ${PATH_SSL}/${domain}.crt --key-file ${PATH_SSL}/${domain}.key --reloadcmd \"${Command}\" > /dev/null\n    elif [ -s ~/.acme.sh/${domain}_ecc/fullchain.cer ] && [[ \"${CERT_KEYLENGTH}\" =~ ^ec-256$|^ec-384$|^ec-521$ ]]; then\n      ~/.acme.sh/acme.sh --force --install-cert --ecc -d ${domain} --fullchain-file ${PATH_SSL}/${domain}.crt --key-file ${PATH_SSL}/${domain}.key --reloadcmd \"${Command}\" > /dev/null\n    else\n      echo \"${CFAILURE}Error: Create Let's Encrypt SSL Certificate failed! ${CEND}\"\n      [ -e \"${web_install_dir}/conf/vhost/${domain}.conf\" ] && rm -f ${web_install_dir}/conf/vhost/${domain}.conf\n      [ -e \"${apache_install_dir}/conf/vhost/${domain}.conf\" ] && rm -f ${apache_install_dir}/conf/vhost/${domain}.conf\n      exit 1\n    fi\n  fi\n}\n\nPrint_SSL() {\n  if [ \"${Domian_Mode}\" == '2' ]; then\n    echo \"$(printf \"%-30s\" \"Self-signed SSL Certificate:\")${CMSG}${PATH_SSL}/${domain}.crt${CEND}\"\n    echo \"$(printf \"%-30s\" \"SSL Private Key:\")${CMSG}${PATH_SSL}/${domain}.key${CEND}\"\n    echo \"$(printf \"%-30s\" \"SSL CSR File:\")${CMSG}${PATH_SSL}/${domain}.csr${CEND}\"\n  elif [ \"${Domian_Mode}\" == '3' -o \"${dnsapi_flag}\" == 'y' ]; then\n    echo \"$(printf \"%-30s\" \"Let's Encrypt SSL Certificate:\")${CMSG}${PATH_SSL}/${domain}.crt${CEND}\"\n    echo \"$(printf \"%-30s\" \"SSL Private Key:\")${CMSG}${PATH_SSL}/${domain}.key${CEND}\"\n  fi\n}\n\nInput_Add_proxy() {\n  while :; do echo\n    read -e -p \"Please input the correct proxy_pass: \" Proxy_Pass\n    if [ -z \"$(echo $Proxy_Pass | grep -E '^http://|https://')\" ]; then\n      echo \"${CFAILURE}input error! Please only input example http://192.168.1.1:8080${CEND}\"\n    else\n      echo \"proxy_pass=${Proxy_Pass}\"\n      break\n    fi\n  done\n}\n\nInput_Add_domain() {\n  if [ \"${sslquiet_flag}\" != 'y' ]; then\n    while :;do\n      printf \"\nWhat Are You Doing?\n\\t${CMSG}1${CEND}. Use HTTP Only\n\\t${CMSG}2${CEND}. Use your own SSL Certificate and Key\n\\t${CMSG}3${CEND}. Use Let's Encrypt to Create SSL Certificate and Key\n\\t${CMSG}q${CEND}. Exit\n\"\n      read -e -p \"Please input the correct option: \" Domian_Mode\n      if [[ ! \"${Domian_Mode}\" =~ ^[1-3,q]$ ]]; then\n        echo \"${CFAILURE}input error! Please only input 1~3 and q${CEND}\"\n      else\n        break\n      fi\n    done\n  fi\n\n  #Multiple_PHP\n  if [ $(ls /dev/shm/php*-cgi.sock 2> /dev/null | wc -l) -ge 2 ]; then\n    if [ \"${mphp_flag}\" != 'y' ]; then\n      PHP_detail_ver=`${php_install_dir}/bin/php-config --version`\n      PHP_main_ver=${PHP_detail_ver%.*}\n      while :; do echo\n        echo 'Please select a version of the PHP:'\n        echo -e \"\\t${CMSG} 0${CEND}. PHP ${PHP_main_ver} (default)\"\n        [ -e \"/dev/shm/php53-cgi.sock\" ] && echo -e \"\\t${CMSG} 1${CEND}. PHP 5.3\"\n        [ -e \"/dev/shm/php54-cgi.sock\" ] && echo -e \"\\t${CMSG} 2${CEND}. PHP 5.4\"\n        [ -e \"/dev/shm/php55-cgi.sock\" ] && echo -e \"\\t${CMSG} 3${CEND}. PHP 5.5\"\n        [ -e \"/dev/shm/php56-cgi.sock\" ] && echo -e \"\\t${CMSG} 4${CEND}. PHP 5.6\"\n        [ -e \"/dev/shm/php70-cgi.sock\" ] && echo -e \"\\t${CMSG} 5${CEND}. PHP 7.0\"\n        [ -e \"/dev/shm/php71-cgi.sock\" ] && echo -e \"\\t${CMSG} 6${CEND}. PHP 7.1\"\n        [ -e \"/dev/shm/php72-cgi.sock\" ] && echo -e \"\\t${CMSG} 7${CEND}. PHP 7.2\"\n        [ -e \"/dev/shm/php73-cgi.sock\" ] && echo -e \"\\t${CMSG} 8${CEND}. PHP 7.3\"\n        [ -e \"/dev/shm/php74-cgi.sock\" ] && echo -e \"\\t${CMSG} 9${CEND}. PHP 7.4\"\n        [ -e \"/dev/shm/php80-cgi.sock\" ] && echo -e \"\\t${CMSG}10${CEND}. PHP 8.0\"\n        [ -e \"/dev/shm/php81-cgi.sock\" ] && echo -e \"\\t${CMSG}11${CEND}. PHP 8.1\"\n        [ -e \"/dev/shm/php82-cgi.sock\" ] && echo -e \"\\t${CMSG}12${CEND}. PHP 8.2\"\n        [ -e \"/dev/shm/php83-cgi.sock\" ] && echo -e \"\\t${CMSG}13${CEND}. PHP 8.3\"\n        [ -e \"/dev/shm/php84-cgi.sock\" ] && echo -e \"\\t${CMSG}14${CEND}. PHP 8.4\"\n        read -e -p \"Please input a number:(Default 0 press Enter) \" php_option\n        php_option=${php_option:-0}\n        if [[ ! ${php_option} =~ ^[0-9]$|^1[0-4]$ ]]; then\n          echo \"${CWARNING}input error! Please only input number 1~14${CEND}\"\n        else\n          break\n        fi\n      done\n    fi\n    [ \"${php_option}\" == '1' ] && mphp_ver=53\n    [ \"${php_option}\" == '2' ] && mphp_ver=54\n    [ \"${php_option}\" == '3' ] && mphp_ver=55\n    [ \"${php_option}\" == '4' ] && mphp_ver=56\n    [ \"${php_option}\" == '5' ] && mphp_ver=70\n    [ \"${php_option}\" == '6' ] && mphp_ver=71\n    [ \"${php_option}\" == '7' ] && mphp_ver=72\n    [ \"${php_option}\" == '8' ] && mphp_ver=73\n    [ \"${php_option}\" == '9' ] && mphp_ver=74\n    [ \"${php_option}\" == '10' ] && mphp_ver=80\n    [ \"${php_option}\" == '11' ] && mphp_ver=81\n    [ \"${php_option}\" == '12' ] && mphp_ver=82\n    [ \"${php_option}\" == '13' ] && mphp_ver=83\n    [ \"${php_option}\" == '14' ] && mphp_ver=84\n    [ ! -e \"/dev/shm/php${mphp_ver}-cgi.sock\" ] && unset mphp_ver\n  fi\n\n  case \"${NGX_FLAG}\" in\n    \"php\")\n      NGX_CONF=$(echo -e \"location ~ [^/]\\.php(/|$) {\\n    #fastcgi_pass remote_php_ip:9000;\\n    fastcgi_pass unix:/dev/shm/php${mphp_ver}-cgi.sock;\\n    fastcgi_index index.php;\\n    include fastcgi.conf;\\n  }\")\n      ;;\n    \"java\")\n      NGX_CONF=$(echo -e \"location ~ {\\n    proxy_pass http://127.0.0.1:8080;\\n    include proxy.conf;\\n  }\")\n      ;;\n  esac\n\n  if [ \"${Domian_Mode}\" == '3' -o \"${dnsapi_flag}\" == 'y' ] && [ ! -e ~/.acme.sh/acme.sh ]; then\n    pushd ${current_dir}/src > /dev/null\n    [ ! -e acme.sh-master.tar.gz ] && wget -qc ${mirror_link}/oneinstack/src/acme.sh-master.tar.gz\n    tar xzf acme.sh-master.tar.gz\n    pushd acme.sh-master > /dev/null\n    ./acme.sh --install > /dev/null 2>&1\n    popd > /dev/null\n    popd > /dev/null\n  fi\n  [ -e ~/.acme.sh/account.conf ] && sed -i '/^CERT_HOME=/d' ~/.acme.sh/account.conf\n  if [[ \"${Domian_Mode}\" =~ ^[2-3]$ ]] || [ \"${dnsapi_flag}\" == 'y' ]; then\n    if [ -e \"${web_install_dir}/sbin/nginx\" ]; then\n      nginx_ssl_flag=y\n      PATH_SSL=${web_install_dir}/conf/ssl\n      [ ! -d \"${PATH_SSL}\" ] && mkdir ${PATH_SSL}\n    elif [ ! -e \"${web_install_dir}/sbin/nginx\" -a -e \"${apache_install_dir}/bin/httpd\" ]; then\n      apache_ssl_flag=y\n      PATH_SSL=${apache_install_dir}/conf/ssl\n      [ ! -d \"${PATH_SSL}\" ] && mkdir ${PATH_SSL}\n    fi\n  elif [ \"${Domian_Mode}\" == 'q' ]; then\n    exit 1\n  fi\n\n  while :; do echo\n    read -e -p \"Please input domain(example: www.example.com): \" domain\n    if [ -z \"$(echo ${domain} | grep '.*\\..*')\" ]; then\n      echo \"${CWARNING}Your ${domain} is invalid! ${CEND}\"\n    else\n      break\n    fi\n  done\n\n  if [ -e \"${web_install_dir}/conf/vhost/${domain}.conf\" -o -e \"${apache_install_dir}/conf/vhost/${domain}.conf\" -o -e \"${tomcat_install_dir}/conf/vhost/${domain}.xml\" ]; then\n    [ -e \"${web_install_dir}/conf/vhost/${domain}.conf\" ] && echo -e \"${domain} in the Nginx/Tengine/OpenResty already exist! \\nYou can delete ${CMSG}${web_install_dir}/conf/vhost/${domain}.conf${CEND} and re-create\"\n    [ -e \"${apache_install_dir}/conf/vhost/${domain}.conf\" ] && echo -e \"${domain} in the Apache already exist! \\nYou can delete ${CMSG}${apache_install_dir}/conf/vhost/${domain}.conf${CEND} and re-create\"\n    [ -e \"${tomcat_install_dir}/conf/vhost/${domain}.xml\" ] && echo -e \"${domain} in the Tomcat already exist! \\nYou can delete ${CMSG}${tomcat_install_dir}/conf/vhost/${domain}.xml${CEND} and re-create\"\n    exit\n  else\n    echo \"domain=${domain}\"\n  fi\n  if [[ -z ${proxy_flag} || \"${proxy_flag}\" != 'y' ]]; then\n    while :; do echo\n      echo \"Please input the directory for the domain:${domain} :\"\n      read -e -p \"(Default directory: ${wwwroot_dir}/${domain}): \" vhostdir\n      if [ -n \"${vhostdir}\" -a -z \"$(echo ${vhostdir} | grep '^/')\" ]; then\n        echo \"${CWARNING}input error! Press Enter to continue...${CEND}\"\n      else\n        if [ -z \"${vhostdir}\" ]; then\n          vhostdir=\"${wwwroot_dir}/${domain}\"\n          echo \"Virtual Host Directory=${CMSG}${vhostdir}${CEND}\"\n        fi\n        echo\n        echo \"Create Virtul Host directory......\"\n        mkdir -p ${vhostdir}\n        echo \"set permissions of Virtual Host directory......\"\n        chown -R ${run_user}:${run_group} ${vhostdir}\n        break\n      fi\n    done\n  fi\n\n  while :; do echo\n    read -e -p \"Do you want to add more domain name? [y/n]: \" moredomainame_flag\n    if [[ ! ${moredomainame_flag} =~ ^[y,n]$ ]]; then\n      echo \"${CWARNING}input error! Please only input 'y' or 'n'${CEND}\"\n    else\n      break\n    fi\n  done\n\n  if [ \"${moredomainame_flag}\" == 'y' ]; then\n    while :; do echo\n      read -e -p \"Type domainname or IP(example: example.com other.example.com): \" moredomain\n      if [ -z \"$(echo ${moredomain} | grep '.*\\..*')\" ]; then\n        echo \"${CWARNING}Your ${domain} is invalid! ${CEND}\"\n      else\n        [ \"${moredomain}\" == \"${domain}\" ] && echo \"${CWARNING}Domain name already exists! ${CND}\" && continue\n        echo domain list=\"$moredomain\"\n        moredomainame=\" $moredomain\"\n        break\n      fi\n    done\n    Apache_Domain_alias=ServerAlias${moredomainame}\n    Tomcat_Domain_alias=$(for D in $(echo ${moredomainame}); do echo \"<Alias>${D}</Alias>\"; done)\n\n    if [ -e \"${web_install_dir}/sbin/nginx\" ]; then\n      while :; do echo\n        read -e -p \"Do you want to redirect from ${moredomain} to ${domain}? [y/n]: \" redirect_flag\n        if [[ ! ${redirect_flag} =~ ^[y,n]$ ]]; then\n          echo \"${CWARNING}input error! Please only input 'y' or 'n'${CEND}\"\n        else\n          break\n        fi\n      done\n      [ \"${redirect_flag}\" == 'y' ] && Nginx_redirect=\"if (\\$host != ${domain}) {  return 301 \\$scheme://${domain}\\$request_uri;  }\"\n    fi\n  fi\n\n  if [ \"${nginx_ssl_flag}\" == 'y' ]; then\n    while :; do echo\n      read -e -p \"Do you want to redirect all HTTP requests to HTTPS? [y/n]: \" https_flag\n      if [[ ! ${https_flag} =~ ^[y,n]$ ]]; then\n        echo \"${CWARNING}input error! Please only input 'y' or 'n'${CEND}\"\n      else\n        break\n      fi\n    done\n\n    Create_SSL\n    if [ -n \"`ifconfig | grep inet6`\" ]; then\n      Nginx_conf=$(echo -e \"listen 80;\\n  listen [::]:80;\\n  listen 443 ssl;\\n  listen [::]:443 ssl;\\n  ssl_certificate ${PATH_SSL}/${domain}.crt;\\n  ssl_certificate_key ${PATH_SSL}/${domain}.key;\\n  ssl_protocols TLSv1.2 TLSv1.3;\\n  ssl_ecdh_curve X25519:prime256v1:secp384r1:secp521r1;\\n  ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256;\\n  ssl_conf_command Ciphersuites TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256;\\n  ssl_conf_command Options PrioritizeChaCha;\\n  ssl_prefer_server_ciphers on;\\n  ssl_session_timeout 10m;\\n  ssl_session_cache shared:SSL:10m;\\n  ssl_buffer_size 2k;\\n  add_header Strict-Transport-Security max-age=15768000;\\n  ssl_stapling on;\\n  ssl_stapling_verify on;\\n\")\n    else\n      Nginx_conf=$(echo -e \"listen 80;\\n  listen 443 ssl;\\n  ssl_certificate ${PATH_SSL}/${domain}.crt;\\n  ssl_certificate_key ${PATH_SSL}/${domain}.key;\\n  ssl_protocols TLSv1.2 TLSv1.3;\\n  ssl_ecdh_curve X25519:prime256v1:secp384r1:secp521r1;\\n  ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256;\\n  ssl_conf_command Ciphersuites TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256;\\n  ssl_conf_command Options PrioritizeChaCha;\\n  ssl_prefer_server_ciphers on;\\n  ssl_session_timeout 10m;\\n  ssl_session_cache shared:SSL:10m;\\n  ssl_buffer_size 2k;\\n  add_header Strict-Transport-Security max-age=15768000;\\n  ssl_stapling on;\\n  ssl_stapling_verify on;\\n\")\n    fi\n    Apache_SSL=$(echo -e \"SSLEngine on\\n  SSLCertificateFile \\\"${PATH_SSL}/${domain}.crt\\\"\\n  SSLCertificateKeyFile \\\"${PATH_SSL}/${domain}.key\\\"\")\n  elif [ \"${apache_ssl_flag}\" == 'y' ]; then\n    Create_SSL\n    Apache_SSL=$(echo -e \"SSLEngine on\\n  SSLCertificateFile \\\"${PATH_SSL}/${domain}.crt\\\"\\n  SSLCertificateKeyFile \\\"${PATH_SSL}/${domain}.key\\\"\")\n    [ -z \"$(grep 'Listen 443' ${apache_install_dir}/conf/httpd.conf)\" ] && sed -i \"s@Listen 80@&\\nListen 443@\" ${apache_install_dir}/conf/httpd.conf\n    [ -z \"$(grep 'ServerName 0.0.0.0:443' ${apache_install_dir}/conf/httpd.conf)\" ] && sed -i \"s@ServerName 0.0.0.0:80@&\\nServerName 0.0.0.0:443@\" ${apache_install_dir}/conf/httpd.conf\n  else\n    if [ -n \"`ifconfig | grep inet6`\" ]; then\n      Nginx_conf=$(echo -e \"listen 80;\\n  listen [::]:80;\")\n    else\n      Nginx_conf=$(echo -e \"listen 80;\")\n    fi\n  fi\n}\n\nNginx_anti_hotlinking() {\n  while :; do echo\n    read -e -p \"Do you want to add hotlink protection? [y/n]: \" anti_hotlinking_flag\n    if [[ ! ${anti_hotlinking_flag} =~ ^[y,n]$ ]]; then\n      echo \"${CWARNING}input error! Please only input 'y' or 'n'${CEND}\"\n    else\n      break\n    fi\n  done\n\n  if [ -n \"$(echo ${domain} | grep '.*\\..*\\..*')\" ]; then\n    domain_allow=\"*.${domain#*.} ${domain}\"\n  else\n    domain_allow=\"*.${domain} ${domain}\"\n  fi\n\n  if [ \"${anti_hotlinking_flag}\" == 'y' ]; then\n    if [ \"${moredomainame_flag}\" == 'y' -a \"${moredomain}\" != \"*.${domain}\" ]; then\n      domain_allow_all=${domain_allow}${moredomainame}\n    else\n      domain_allow_all=${domain_allow}\n    fi\n    domain_allow_all=`echo ${domain_allow_all} | tr ' ' '\\n' | awk '!a[$1]++' | xargs`\n    anti_hotlinking=$(echo -e \"location ~ .*\\.(wma|wmv|asf|mp3|mmf|zip|rar|jpg|gif|png|swf|flv|mp4)$ {\\n    valid_referers none blocked ${domain_allow_all};\\n    if (\\$invalid_referer) {\\n        return 403;\\n    }\\n  }\")\n  fi\n}\n\nNginx_rewrite() {\n  [ ! -d \"${web_install_dir}/conf/rewrite\" ] && mkdir ${web_install_dir}/conf/rewrite\n  while :; do echo\n    read -e -p \"Allow Rewrite rule? [y/n]: \" rewrite_flag\n    if [[ ! \"${rewrite_flag}\" =~ ^[y,n]$ ]]; then\n      echo \"${CWARNING}input error! Please only input 'y' or 'n'${CEND}\"\n    else\n      break\n    fi\n  done\n  if [ \"${rewrite_flag}\" == 'n' ]; then\n    rewrite=\"none\"\n    touch \"${web_install_dir}/conf/rewrite/${rewrite}.conf\"\n  else\n    echo\n    echo \"Please input the rewrite of programme :\"\n    echo \"${CMSG}wordpress${CEND},${CMSG}opencart${CEND},${CMSG}magento2${CEND},${CMSG}drupal${CEND},${CMSG}joomla${CEND},${CMSG}codeigniter${CEND},${CMSG}laravel${CEND}\"\n    echo \"${CMSG}thinkphp${CEND},${CMSG}pathinfo${CEND},${CMSG}discuz${CEND},${CMSG}typecho${CEND},${CMSG}ecshop${CEND},${CMSG}nextcloud${CEND},${CMSG}zblog${CEND},${CMSG}whmcs${CEND} rewrite was exist.\"\n    read -e -p \"(Default rewrite: other): \" rewrite\n    if [ \"${rewrite}\" == \"\" ]; then\n      rewrite=\"other\"\n    fi\n    echo \"You choose rewrite=${CMSG}$rewrite${CEND}\"\n    [ \"${NGX_FLAG}\" == 'php' -a \"${rewrite}\" == \"joomla\" ] && NGX_CONF=$(echo -e \"location ~ \\\\.php\\$ {\\n    #fastcgi_pass remote_php_ip:9000;\\n    fastcgi_pass unix:/dev/shm/php${mphp_ver}-cgi.sock;\\n    fastcgi_index index.php;\\n    include fastcgi.conf;\\n  }\")\n    [ \"${NGX_FLAG}\" == 'php' ] && [[ \"${rewrite}\" =~ ^codeigniter$|^thinkphp$|^pathinfo$ ]] && NGX_CONF=$(echo -e \"location ~ [^/]\\.php(/|\\$) {\\n    #fastcgi_pass remote_php_ip:9000;\\n    fastcgi_pass unix:/dev/shm/php${mphp_ver}-cgi.sock;\\n    fastcgi_index index.php;\\n    include fastcgi.conf;\\n    fastcgi_split_path_info ^(.+?\\.php)(/.*)\\$;\\n    set \\$path_info \\$fastcgi_path_info;\\n    fastcgi_param PATH_INFO \\$path_info;\\n    try_files \\$fastcgi_script_name =404;    \\n  }\")\n    [ \"${NGX_FLAG}\" == 'php' -a \"${rewrite}\" == \"typecho\" ] && NGX_CONF=$(echo -e \"location ~ .*\\.php(\\/.*)*\\$ {\\n    #fastcgi_pass remote_php_ip:9000;\\n    fastcgi_pass unix:/dev/shm/php${mphp_ver}-cgi.sock;\\n    fastcgi_index index.php;\\n    include fastcgi.conf;\\n    set \\$path_info \\\"\\\";\\n    set \\$real_script_name \\$fastcgi_script_name;\\n    if (\\$fastcgi_script_name ~ \\\"^(.+?\\.php)(/.+)\\$\\\") {\\n      set \\$real_script_name \\$1;\\n      set \\$path_info \\$2;\\n    }\\n    fastcgi_param SCRIPT_FILENAME \\$document_root\\$real_script_name;\\n    fastcgi_param SCRIPT_NAME \\$real_script_name;\\n    fastcgi_param PATH_INFO \\$path_info;\\n  }\")\n    if [[ ! \"${rewrite}\" =~ ^magento2$|^pathinfo$ ]]; then\n      if [ -e \"config/${rewrite}.conf\" ]; then\n        /bin/cp config/${rewrite}.conf ${web_install_dir}/conf/rewrite/${rewrite}.conf\n      else\n        touch \"${web_install_dir}/conf/rewrite/${rewrite}.conf\"\n      fi\n    fi\n  fi\n}\n\nNginx_log() {\n  while :; do echo\n    read -e -p \"Allow Nginx/Tengine/OpenResty access_log? [y/n]: \" access_flag\n    if [[ ! \"${access_flag}\" =~ ^[y,n]$ ]]; then\n      echo \"${CWARNING}input error! Please only input 'y' or 'n'${CEND}\"\n    else\n      break\n    fi\n  done\n  if [ \"${access_flag}\" == 'n' ]; then\n    Nginx_log=\"access_log off;\"\n  else\n    Nginx_log=\"access_log ${wwwlogs_dir}/${domain}_nginx.log combined;\"\n    echo \"You access log file=${CMSG}${wwwlogs_dir}/${domain}_nginx.log${CEND}\"\n  fi\n}\n\nCreate_nginx_tomcat_conf() {\n  [ ! -d ${web_install_dir}/conf/vhost ] && mkdir ${web_install_dir}/conf/vhost\n  cat > ${web_install_dir}/conf/vhost/${domain}.conf << EOF\nserver {\n  ${Nginx_conf}\n  server_name ${domain}${moredomainame};\n  ${Nginx_log}\n  index index.html index.htm index.jsp;\n  root ${vhostdir};\n  ${Nginx_redirect}\n  #error_page 404 /404.html;\n  #error_page 502 /502.html;\n  ${anti_hotlinking}\n  location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf|flv|mp4|ico)$ {\n    expires 30d;\n    access_log off;\n  }\n  location ~ .*\\.(js|css)?$ {\n    expires 7d;\n    access_log off;\n  }\n  location ~ /(\\.user\\.ini|\\.ht|\\.git|\\.svn|\\.project|LICENSE|README\\.md) {\n    deny all;\n  }\n  location /.well-known {\n    allow all;\n  }\n  ${NGX_CONF}\n}\nEOF\n\n  [ \"${https_flag}\" == 'y' ] && sed -i \"s@^root.*;@&\\nif (\\$ssl_protocol = \\\"\\\") { return 301 https://\\$host\\$request_uri; }@\" ${web_install_dir}/conf/vhost/${domain}.conf\n\n  cat > ${tomcat_install_dir}/conf/vhost/${domain}.xml << EOF\n<Host name=\"${domain}\" appBase=\"${vhostdir}\" unpackWARs=\"true\" autoDeploy=\"true\"> ${Tomcat_Domain_alias}\n  <Context path=\"\" docBase=\"${vhostdir}\" reloadable=\"false\" crossContext=\"true\"/>\n  <Valve className=\"org.apache.catalina.valves.AccessLogValve\" directory=\"logs\"\n    prefix=\"${domain}_access_log\" suffix=\".txt\" pattern=\"%h %l %u %t &quot;%r&quot; %s %b\" />\n  <Valve className=\"org.apache.catalina.valves.RemoteIpValve\" remoteIpHeader=\"X-Forwarded-For\"\n    protocolHeader=\"X-Forwarded-Proto\" protocolHeaderHttpsValue=\"https\"/>\n</Host>\nEOF\n  [ -z \"$(grep -o \"vhost-${domain} SYSTEM\" ${tomcat_install_dir}/conf/server.xml)\" ] && sed -i \"/vhost-localhost SYSTEM/a<\\!ENTITY vhost-${domain} SYSTEM \\\"file://${tomcat_install_dir}/conf/vhost/${domain}.xml\\\">\" ${tomcat_install_dir}/conf/server.xml\n  [ -z \"$(grep -o \"vhost-${domain};\" ${tomcat_install_dir}/conf/server.xml)\" ] && sed -i \"s@vhost-localhost;@&\\n      \\&vhost-${domain};@\" ${tomcat_install_dir}/conf/server.xml\n\n  echo\n  ${web_install_dir}/sbin/nginx -t\n  if [ $? == 0 ]; then\n    echo \"Reload Nginx......\"\n    ${web_install_dir}/sbin/nginx -s reload\n    service tomcat restart\n  else\n    rm -f ${web_install_dir}/conf/vhost/${domain}.conf\n    echo \"Create virtualhost ... [${CFAILURE}FAILED${CEND}]\"\n    exit 1\n  fi\n\n  printf \"\n#######################################################################\n#         LNMP for CentOS/RedHat 7+ Debian 9+ and Ubuntu 16+          #\n#######################################################################\n\"\n  echo \"$(printf \"%-30s\" \"Your domain:\")${CMSG}${domain}${CEND}\"\n  echo \"$(printf \"%-30s\" \"Nginx Virtualhost conf:\")${CMSG}${web_install_dir}/conf/vhost/${domain}.conf${CEND}\"\n  echo \"$(printf \"%-30s\" \"Tomcat Virtualhost conf:\")${CMSG}${tomcat_install_dir}/conf/vhost/${domain}.xml${CEND}\"\n  echo \"$(printf \"%-30s\" \"Directory of:\")${CMSG}${vhostdir}${CEND}\"\n  Print_SSL\n}\n\nCreate_tomcat_conf() {\n  cat > ${tomcat_install_dir}/conf/vhost/${domain}.xml << EOF\n<Host name=\"${domain}\" appBase=\"webapps\" unpackWARs=\"true\" autoDeploy=\"true\"> ${Tomcat_Domain_alias}\n  <Context path=\"\" docBase=\"${vhostdir}\" reloadable=\"false\" crossContext=\"true\"/>\n  <Valve className=\"org.apache.catalina.valves.AccessLogValve\" directory=\"logs\"\n    prefix=\"${domain}_access_log\" suffix=\".txt\" pattern=\"%h %l %u %t &quot;%r&quot; %s %b\" />\n</Host>\nEOF\n  [ -z \"$(grep -o \"vhost-${domain} SYSTEM\" ${tomcat_install_dir}/conf/server.xml)\" ] && sed -i \"/vhost-localhost SYSTEM/a<\\!ENTITY vhost-${domain} SYSTEM \\\"file://${tomcat_install_dir}/conf/vhost/${domain}.xml\\\">\" ${tomcat_install_dir}/conf/server.xml\n  [ -z \"$(grep -o \"vhost-${domain};\" ${tomcat_install_dir}/conf/server.xml)\" ] && sed -i \"s@vhost-localhost;@&\\n      \\&vhost-${domain};@\" ${tomcat_install_dir}/conf/server.xml\n\n  echo\n  service tomcat restart\n\n  printf \"\n#######################################################################\n#         LNMP for CentOS/RedHat 7+ Debian 9+ and Ubuntu 16+          #\n#######################################################################\n\"\n  echo \"$(printf \"%-30s\" \"Your domain:\")${CMSG}${domain}${CEND}\"\n  echo \"$(printf \"%-30s\" \"Tomcat Virtualhost conf:\")${CMSG}${tomcat_install_dir}/conf/vhost/${domain}.xml${CEND}\"\n  echo \"$(printf \"%-30s\" \"Directory of:\")${CMSG}${vhostdir}${CEND}\"\n  echo \"$(printf \"%-30s\" \"index url:\")${CMSG}http://${domain}:8080/${CEND}\"\n}\n\nCreate_nginx_phpfpm_conf() {\n  [ ! -d ${web_install_dir}/conf/vhost ] && mkdir ${web_install_dir}/conf/vhost\n  cat > ${web_install_dir}/conf/vhost/${domain}.conf << EOF\nserver {\n  ${Nginx_conf}\n  server_name ${domain}${moredomainame};\n  ${Nginx_log}\n  index index.html index.htm index.php;\n  root ${vhostdir};\n  ${Nginx_redirect}\n  include ${web_install_dir}/conf/rewrite/${rewrite}.conf;\n  #error_page 404 /404.html;\n  #error_page 502 /502.html;\n  ${anti_hotlinking}\n  ${NGX_CONF}\n\n  location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf|flv|mp4|ico)$ {\n    expires 30d;\n    access_log off;\n  }\n  location ~ .*\\.(js|css)?$ {\n    expires 7d;\n    access_log off;\n  }\n  location ~ /(\\.user\\.ini|\\.ht|\\.git|\\.svn|\\.project|LICENSE|README\\.md) {\n    deny all;\n  }\n  location /.well-known {\n    allow all;\n  }\n}\nEOF\n\n  [ \"${rewrite}\" == 'pathinfo' ] && sed -i '/pathinfo.conf;$/d' ${web_install_dir}/conf/vhost/${domain}.conf\n  if [ \"${rewrite}\" == 'magento2' -a -e \"config/${rewrite}.conf\" ]; then\n    /bin/cp config/${rewrite}.conf ${web_install_dir}/conf/vhost/${domain}.conf\n    sed -i \"s@/dev/shm/php-cgi.sock@/dev/shm/php${mphp_ver}-cgi.sock@g\" ${web_install_dir}/conf/vhost/${domain}.conf\n    sed -i \"s@^  set \\$MAGE_ROOT.*;@  set \\$MAGE_ROOT ${vhostdir};@\" ${web_install_dir}/conf/vhost/${domain}.conf\n    sed -i \"s@^  server_name.*;@  server_name ${domain}${moredomainame};@\" ${web_install_dir}/conf/vhost/${domain}.conf\n    sed -i \"s@^  server_name.*;@&\\n  ${Nginx_log}@\" ${web_install_dir}/conf/vhost/${domain}.conf\n    if [ \"${anti_hotlinking_flag}\" == 'y' ]; then\n      sed -i \"s@^  root.*;@&\\n  }@\" ${web_install_dir}/conf/vhost/${domain}.conf\n      sed -i \"s@^  root.*;@&\\n    }@\" ${web_install_dir}/conf/vhost/${domain}.conf\n      sed -i \"s@^  root.*;@&\\n      return 403;@\" ${web_install_dir}/conf/vhost/${domain}.conf\n      sed -i \"s@^  root.*;@&\\n      rewrite ^/ http://www.linuxeye.com/403.html;@\" ${web_install_dir}/conf/vhost/${domain}.conf\n      sed -i \"s@^  root.*;@&\\n    if (\\$invalid_referer) {@\" ${web_install_dir}/conf/vhost/${domain}.conf\n      sed -i \"s@^  root.*;@&\\n    valid_referers none blocked ${domain_allow_all};@\" ${web_install_dir}/conf/vhost/${domain}.conf\n      sed -i \"s@^  root.*;@&\\n  location ~ .*\\.(wma|wmv|asf|mp3|mmf|zip|rar|jpg|gif|png|swf|flv|mp4)\\$ {@\" ${web_install_dir}/conf/vhost/${domain}.conf\n    fi\n\n    [ \"${redirect_flag}\" == 'y' ] && sed -i \"s@^  root.*;@&\\n  if (\\$host != ${domain}) {  return 301 \\$scheme://${domain}\\$request_uri;  }@\" ${web_install_dir}/conf/vhost/${domain}.conf\n\n    if [ \"${nginx_ssl_flag}\" == 'y' ]; then\n      sed -i \"s@^  listen 80;@&\\n  listen 443 ssl;@\" ${web_install_dir}/conf/vhost/${domain}.conf\n      sed -i \"s@^  server_name.*;@&\\n  ssl_stapling_verify on;@\" ${web_install_dir}/conf/vhost/${domain}.conf\n      sed -i \"s@^  server_name.*;@&\\n  ssl_stapling on;@\" ${web_install_dir}/conf/vhost/${domain}.conf\n      sed -i \"s@^  server_name.*;@&\\n  add_header Strict-Transport-Security max-age=15768000;@\" ${web_install_dir}/conf/vhost/${domain}.conf\n      sed -i \"s@^  server_name.*;@&\\n  ssl_buffer_size 2k;@\" ${web_install_dir}/conf/vhost/${domain}.conf\n      sed -i \"s@^  server_name.*;@&\\n  ssl_session_cache shared:SSL:10m;@\" ${web_install_dir}/conf/vhost/${domain}.conf\n      sed -i \"s@^  server_name.*;@&\\n  ssl_session_timeout 10m;@\" ${web_install_dir}/conf/vhost/${domain}.conf\n      sed -i \"s@^  server_name.*;@&\\n  ssl_prefer_server_ciphers on;@\" ${web_install_dir}/conf/vhost/${domain}.conf\n      sed -i \"s@^  server_name.*;@&\\n  ssl_conf_command Options PrioritizeChaCha;@\" ${web_install_dir}/conf/vhost/${domain}.conf\n      sed -i \"s@^  server_name.*;@&\\n  ssl_conf_command Ciphersuites TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256;@\" ${web_install_dir}/conf/vhost/${domain}.conf\n      sed -i \"s@^  server_name.*;@&\\n  ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256;@\" ${web_install_dir}/conf/vhost/${domain}.conf\n      sed -i \"s@^  server_name.*;@&\\n  ssl_ecdh_curve X25519:prime256v1:secp384r1:secp521r1;@\" ${web_install_dir}/conf/vhost/${domain}.conf\n      sed -i \"s@^  server_name.*;@&\\n  ssl_protocols TLSv1.2 TLSv1.3;@\" ${web_install_dir}/conf/vhost/${domain}.conf\n      sed -i \"s@^  server_name.*;@&\\n  ssl_certificate_key ${PATH_SSL}/${domain}.key;@\" ${web_install_dir}/conf/vhost/${domain}.conf\n      sed -i \"s@^  server_name.*;@&\\n  ssl_certificate ${PATH_SSL}/${domain}.crt;@\" ${web_install_dir}/conf/vhost/${domain}.conf\n    fi\n  fi\n\n  [ \"${https_flag}\" == 'y' ] && sed -i \"s@^  root.*;@&\\n  if (\\$ssl_protocol = \\\"\\\") { return 301 https://\\$host\\$request_uri; }@\" ${web_install_dir}/conf/vhost/${domain}.conf\n\n  echo\n  ${web_install_dir}/sbin/nginx -t\n  if [ $? == 0 ]; then\n    echo \"Reload Nginx......\"\n    ${web_install_dir}/sbin/nginx -s reload\n  else\n    rm -f ${web_install_dir}/conf/vhost/${domain}.conf\n    echo \"Create virtualhost ... [${CFAILURE}FAILED${CEND}]\"\n    exit 1\n  fi\n\n  printf \"\n#######################################################################\n#         LNMP for CentOS/RedHat 7+ Debian 9+ and Ubuntu 16+          #\n#######################################################################\n\"\n  echo \"$(printf \"%-30s\" \"Your domain:\")${CMSG}${domain}${CEND}\"\n  echo \"$(printf \"%-30s\" \"Virtualhost conf:\")${CMSG}${web_install_dir}/conf/vhost/${domain}.conf${CEND}\"\n  echo \"$(printf \"%-30s\" \"Directory of:\")${CMSG}${vhostdir}${CEND}\"\n  [ \"${rewrite_flag}\" == 'y' -a \"${rewrite}\" != 'magento2' -a \"${rewrite}\" != 'pathinfo' ] && echo \"$(printf \"%-30s\" \"Rewrite rule:\")${CMSG}${web_install_dir}/conf/rewrite/${rewrite}.conf${CEND}\"\n  Print_SSL\n}\n\nCreate_nginx_proxy_conf() {\n  [ ! -d ${web_install_dir}/conf/vhost ] && mkdir ${web_install_dir}/conf/vhost\n  cat > ${web_install_dir}/conf/vhost/${domain}.conf << EOF\nserver {\n  ${Nginx_conf}\n  server_name ${domain}${moredomainame};\n  ${Nginx_log}\n  index index.html index.htm index.php;\n  ${Nginx_redirect}\n  location / {\n    proxy_pass ${Proxy_Pass};\n    proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n    proxy_set_header Host \\$http_host;\n    proxy_set_header X-NginX-Proxy true;\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade \\$http_upgrade;\n    proxy_set_header Connection \"upgrade\";\n    proxy_max_temp_file_size 0;\n  }\n\n  #error_page 404 /404.html;\n  #error_page 502 /502.html;\n  ${anti_hotlinking}\n\n  location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf|flv|mp4|ico)$ {\n    expires 30d;\n    access_log off;\n  }\n  location ~ .*\\.(js|css)?$ {\n    expires 7d;\n    access_log off;\n  }\n  location ~ /(\\.user\\.ini|\\.ht|\\.git|\\.svn|\\.project|LICENSE|README\\.md) {\n    deny all;\n  }\n  location /.well-known {\n    allow all;\n  }\n}\nEOF\n\n  [ \"${redirect_flag}\" == 'y' ] && sed -i \"s@^  root.*;@&\\n  if (\\$host != ${domain}) {  return 301 \\$scheme://${domain}\\$request_uri;  }@\" ${web_install_dir}/conf/vhost/${domain}.conf\n\n  if [ \"${anti_hotlinking_flag}\" == 'y' ]; then\n      sed -i \"s@^  root.*;@&\\n  }@\" ${web_install_dir}/conf/vhost/${domain}.conf\n      sed -i \"s@^  root.*;@&\\n    }@\" ${web_install_dir}/conf/vhost/${domain}.conf\n      sed -i \"s@^  root.*;@&\\n      return 403;@\" ${web_install_dir}/conf/vhost/${domain}.conf\n      sed -i \"s@^  root.*;@&\\n      rewrite ^/ http://www.linuxeye.com/403.html;@\" ${web_install_dir}/conf/vhost/${domain}.conf\n      sed -i \"s@^  root.*;@&\\n    if (\\$invalid_referer) {@\" ${web_install_dir}/conf/vhost/${domain}.conf\n      sed -i \"s@^  root.*;@&\\n    valid_referers none blocked ${domain_allow_all};@\" ${web_install_dir}/conf/vhost/${domain}.conf\n      sed -i \"s@^  root.*;@&\\n  location ~ .*\\.(wma|wmv|asf|mp3|mmf|zip|rar|jpg|gif|png|swf|flv|mp4)\\$ {@\" ${web_install_dir}/conf/vhost/${domain}.conf\n    fi\n\n  [ \"${https_flag}\" == 'y' ] && sed -i \"s@^  root.*;@&\\n  if (\\$ssl_protocol = \\\"\\\") { return 301 https://\\$host\\$request_uri; }@\" ${web_install_dir}/conf/vhost/${domain}.conf\n\n  echo\n  ${web_install_dir}/sbin/nginx -t\n  if [ $? == 0 ]; then\n    echo \"Reload Nginx......\"\n    ${web_install_dir}/sbin/nginx -s reload\n  else\n    rm -f ${web_install_dir}/conf/vhost/${domain}.conf\n    echo \"Create virtualhost ... [${CFAILURE}FAILED${CEND}]\"\n    exit 1\n  fi\n\n  printf \"\n#######################################################################\n#         LNMP for CentOS/RedHat 7+ Debian 9+ and Ubuntu 16+          #\n#######################################################################\n\"\n  echo \"$(printf \"%-30s\" \"Your domain:\")${CMSG}${domain}${CEND}\"\n  echo \"$(printf \"%-30s\" \"Virtualhost conf:\")${CMSG}${web_install_dir}/conf/vhost/${domain}.conf${CEND}\"\n  #echo \"$(printf \"%-30s\" \"Directory of:\")${CMSG}${vhostdir}${CEND}\"\n  [ \"${rewrite_flag}\" == 'y' -a \"${rewrite}\" != 'magento2' -a \"${rewrite}\" != 'pathinfo' ] && echo \"$(printf \"%-30s\" \"Rewrite rule:\")${CMSG}${web_install_dir}/conf/rewrite/${rewrite}.conf${CEND}\"\n  Print_SSL\n}\n\nApache_log() {\n  while :; do echo\n    read -e -p \"Allow Apache access_log? [y/n]: \" access_flag\n    if [[ ! \"${access_flag}\" =~ ^[y,n]$ ]]; then\n      echo \"${CWARNING}input error! Please only input 'y' or 'n'${CEND}\"\n    else\n      break\n    fi\n  done\n\n  if [ \"${access_flag}\" == 'n' ]; then\n    Apache_log='CustomLog \"/dev/null\" common'\n  else\n    Apache_log=\"CustomLog \\\"${wwwlogs_dir}/${domain}_apache.log\\\" common\"\n    echo \"You access log file=${wwwlogs_dir}/${domain}_apache.log\"\n  fi\n}\n\nCreate_apache_conf() {\n  if [ \"${Apache_main_ver}\" == '24' ]; then\n    if [ -e \"${php_install_dir}/sbin/php-fpm\" ] && [ -n \"`grep -E ^LoadModule.*mod_proxy_fcgi.so ${apache_install_dir}/conf/httpd.conf`\" ]; then\n      Apache_fcgi=$(echo -e \"<Files ~ (\\\\.user.ini|\\\\.htaccess|\\\\.git|\\\\.svn|\\\\.project|LICENSE|README.md)\\$>\\n    Order allow,deny\\n    Deny from all\\n  </Files>\\n  <FilesMatch \\\\.php\\$>\\n    SetHandler \\\"proxy:unix:/dev/shm/php${mphp_ver}-cgi.sock|fcgi://localhost\\\"\\n  </FilesMatch>\")\n    fi\n  fi\n  [ ! -d ${apache_install_dir}/conf/vhost ] && mkdir ${apache_install_dir}/conf/vhost\n  cat > ${apache_install_dir}/conf/vhost/${domain}.conf << EOF\n<VirtualHost *:80>\n  ServerAdmin admin@example.com\n  DocumentRoot \"${vhostdir}\"\n  ServerName ${domain}\n  ${Apache_Domain_alias}\n  ErrorLog \"${wwwlogs_dir}/${domain}_error_apache.log\"\n  ${Apache_log}\n  ${Apache_fcgi}\n<Directory \"${vhostdir}\">\n  SetOutputFilter DEFLATE\n  Options FollowSymLinks ExecCGI\n  ${Apache_grant}\n  AllowOverride All\n  Order allow,deny\n  Allow from all\n  DirectoryIndex index.html index.php\n</Directory>\n</VirtualHost>\nEOF\n  [ \"${apache_ssl_flag}\" == 'y' ] && cat >> ${apache_install_dir}/conf/vhost/${domain}.conf << EOF\n<VirtualHost *:443>\n  ServerAdmin admin@example.com\n  DocumentRoot \"${vhostdir}\"\n  ServerName ${domain}\n  ${Apache_Domain_alias}\n  ${Apache_SSL}\n  ErrorLog \"${wwwlogs_dir}/${domain}_error_apache.log\"\n  ${Apache_log}\n  ${Apache_fcgi}\n<Directory \"${vhostdir}\">\n  SetOutputFilter DEFLATE\n  Options FollowSymLinks ExecCGI\n  ${Apache_grant}\n  AllowOverride All\n  Order allow,deny\n  Allow from all\n  DirectoryIndex index.html index.php\n</Directory>\n</VirtualHost>\nEOF\n\n  echo\n  ${apache_install_dir}/bin/apachectl -t\n  if [ $? == 0 ]; then\n    echo \"Restart Apache......\"\n    ${apache_install_dir}/bin/apachectl -k graceful\n  else\n    rm -f ${apache_install_dir}/conf/vhost/${domain}.conf\n    echo \"Create virtualhost ... [${CFAILURE}FAILED${CEND}]\"\n    exit 1\n  fi\n\n  printf \"\n#######################################################################\n#         LNMP for CentOS/RedHat 7+ Debian 9+ and Ubuntu 16+          #\n#######################################################################\n\"\n  echo \"$(printf \"%-30s\" \"Your domain:\")${CMSG}${domain}${CEND}\"\n  echo \"$(printf \"%-30s\" \"Virtualhost conf:\")${CMSG}${apache_install_dir}/conf/vhost/${domain}.conf${CEND}\"\n  echo \"$(printf \"%-30s\" \"Directory of:\")${CMSG}${vhostdir}${CEND}\"\n  Print_SSL\n}\n\nCreate_nginx_apache_modphp_conf() {\n  # Nginx/Tengine/OpenResty\n  [ ! -d ${web_install_dir}/conf/vhost ] && mkdir ${web_install_dir}/conf/vhost\n  cat > ${web_install_dir}/conf/vhost/${domain}.conf << EOF\nserver {\n  ${Nginx_conf}\n  server_name ${domain}${moredomainame};\n  ${Nginx_log}\n  index index.html index.htm index.php;\n  root ${vhostdir};\n  ${Nginx_redirect}\n  ${anti_hotlinking}\n  location / {\n    try_files \\$uri @apache;\n  }\n  location @apache {\n    proxy_pass http://127.0.0.1:88;\n    include proxy.conf;\n  }\n  location ~ .*\\.(php|php5|cgi|pl)?$ {\n    proxy_pass http://127.0.0.1:88;\n    include proxy.conf;\n  }\n  location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf|flv|mp4|ico)$ {\n    expires 30d;\n    access_log off;\n  }\n  location ~ .*\\.(js|css)?$ {\n    expires 7d;\n    access_log off;\n  }\n  location ~ /(\\.user\\.ini|\\.ht|\\.git|\\.svn|\\.project|LICENSE|README\\.md) {\n    deny all;\n  }\n  location /.well-known {\n    allow all;\n  }\n}\nEOF\n\n  [ \"${https_flag}\" == 'y' ] && sed -i \"s@^  root.*;@&\\n  if (\\$ssl_protocol = \\\"\\\") { return 301 https://\\$host\\$request_uri; }@\" ${web_install_dir}/conf/vhost/${domain}.conf\n\n  echo\n  ${web_install_dir}/sbin/nginx -t\n  if [ $? == 0 ]; then\n    echo \"Reload Nginx......\"\n    ${web_install_dir}/sbin/nginx -s reload\n  else\n    rm -f ${web_install_dir}/conf/vhost/${domain}.conf\n    echo \"Create virtualhost ... [${CFAILURE}FAILED${CEND}]\"\n  fi\n\n  # Apache\n  if [ \"${Apache_main_ver}\" == '24' ]; then\n    if [ -e \"${php_install_dir}/sbin/php-fpm\" ] && [ -n \"`grep -E ^LoadModule.*mod_proxy_fcgi.so ${apache_install_dir}/conf/httpd.conf`\" ]; then\n      Apache_fcgi=$(echo -e \"<Files ~ (\\\\.user.ini|\\\\.htaccess|\\\\.git|\\\\.svn|\\\\.project|LICENSE|README.md)\\$>\\n    Order allow,deny\\n    Deny from all\\n  </Files>\\n  <FilesMatch \\\\.php\\$>\\n    SetHandler \\\"proxy:unix:/dev/shm/php${mphp_ver}-cgi.sock|fcgi://localhost\\\"\\n  </FilesMatch>\")\n    fi\n  fi\n  [ ! -d ${apache_install_dir}/conf/vhost ] && mkdir ${apache_install_dir}/conf/vhost\n  cat > ${apache_install_dir}/conf/vhost/${domain}.conf << EOF\n<VirtualHost *:88>\n  ServerAdmin admin@example.com\n  DocumentRoot \"${vhostdir}\"\n  ServerName ${domain}\n  ${Apache_Domain_alias}\n  ${Apache_SSL}\n  ErrorLog \"${wwwlogs_dir}/${domain}_error_apache.log\"\n  ${Apache_log}\n  ${Apache_fcgi}\n<Directory \"${vhostdir}\">\n  SetOutputFilter DEFLATE\n  Options FollowSymLinks ExecCGI\n  ${Apache_grant}\n  AllowOverride All\n  Order allow,deny\n  Allow from all\n  DirectoryIndex index.html index.php\n</Directory>\n</VirtualHost>\nEOF\n\n  echo\n  ${apache_install_dir}/bin/apachectl -t\n  if [ $? == 0 ]; then\n    echo \"Restart Apache......\"\n    ${apache_install_dir}/bin/apachectl -k graceful\n  else\n    rm -f ${apache_install_dir}/conf/vhost/${domain}.conf\n    exit 1\n  fi\n\n  printf \"\n#######################################################################\n#         LNMP for CentOS/RedHat 7+ Debian 9+ and Ubuntu 16+          #\n#######################################################################\n\"\n  echo \"$(printf \"%-30s\" \"Your domain:\")${CMSG}${domain}${CEND}\"\n  echo \"$(printf \"%-30s\" \"Nginx Virtualhost conf:\")${CMSG}${web_install_dir}/conf/vhost/${domain}.conf${CEND}\"\n  echo \"$(printf \"%-30s\" \"Apache Virtualhost conf:\")${CMSG}${apache_install_dir}/conf/vhost/${domain}.conf${CEND}\"\n  echo \"$(printf \"%-30s\" \"Directory of:\")${CMSG}${vhostdir}${CEND}\"\n  Print_SSL\n}\n\nAdd_Vhost() {\n  if [ -e \"${web_install_dir}/sbin/nginx\" -a ! -e \"${apache_install_dir}/bin/httpd\" ]; then\n    Choose_ENV\n    Input_Add_domain\n    Nginx_anti_hotlinking\n    if [ \"${proxy_flag}\" == \"y\" ]; then\n        Input_Add_proxy\n        Create_nginx_proxy_conf\n      else\n        Nginx_rewrite\n        if [ \"${NGX_FLAG}\" == \"java\" ]; then\n          Nginx_log\n          Create_nginx_tomcat_conf\n        else\n          Nginx_log\n          Create_nginx_phpfpm_conf\n        fi\n    fi\n  elif [ ! -e \"${web_install_dir}/sbin/nginx\" -a -e \"${apache_install_dir}/bin/httpd\" ]; then\n    Choose_ENV\n    Input_Add_domain\n    Apache_log\n    Create_apache_conf\n  elif [ ! -e \"${web_install_dir}/sbin/nginx\" -a ! -e \"${apache_install_dir}/bin/httpd\" -a -e \"${tomcat_install_dir}/conf/server.xml\" ]; then\n    Choose_ENV\n    Input_Add_domain\n    Create_tomcat_conf\n  elif [ -e \"${web_install_dir}/sbin/nginx\" -a -e \"${apache_install_dir}/bin/httpd\" ]; then\n    Choose_ENV\n    Input_Add_domain\n    Nginx_anti_hotlinking\n    if [ \"${NGX_FLAG}\" == \"java\" ]; then\n      Nginx_rewrite\n      Nginx_log\n      Create_nginx_tomcat_conf\n    elif [ \"${NGX_FLAG}\" == \"php\" ]; then\n      Nginx_log\n      Apache_log\n      Create_nginx_apache_modphp_conf\n    fi\n  else\n    echo \"Error! ${CFAILURE}Web server${CEND} not found!\"\n  fi\n}\n\nDel_NGX_Vhost() {\n  if [ -e \"${web_install_dir}/sbin/nginx\" ]; then\n    [ -d \"${web_install_dir}/conf/vhost\" ] && Domain_List=$(ls ${web_install_dir}/conf/vhost | sed \"s@.conf@@g\")\n    if [ -n \"${Domain_List}\" ]; then\n      echo\n      echo \"Virtualhost list:\"\n      echo ${CMSG}${Domain_List}${CEND}\n        while :; do echo\n          read -e -p \"Please input a domain you want to delete: \" domain\n          if [ -z \"$(echo ${domain} | grep '.*\\..*')\" ]; then\n            echo \"${CWARNING}Your ${domain} is invalid! ${CEND}\"\n          else\n            if [ -e \"${web_install_dir}/conf/vhost/${domain}.conf\" ]; then\n              Directory=$(grep '^  root' ${web_install_dir}/conf/vhost/${domain}.conf | head -1 | awk -F'[ ;]' '{print $(NF-1)}')\n              rm -f ${web_install_dir}/conf/vhost/${domain}.conf\n              [ -e \"${web_install_dir}/conf/ssl/${domain}.crt\" ] && rm -f ${web_install_dir}/conf/ssl/${domain}.{crt,key}\n              ${web_install_dir}/sbin/nginx -s reload\n              while :; do echo\n                read -e -p \"Do you want to delete Virtul Host directory? [y/n]: \" Del_Vhost_wwwroot_flag\n                if [[ ! ${Del_Vhost_wwwroot_flag} =~ ^[y,n]$ ]]; then\n                  echo \"${CWARNING}input error! Please only input 'y' or 'n'${CEND}\"\n                else\n                  break\n                fi\n              done\n              if [ \"${Del_Vhost_wwwroot_flag}\" == 'y' ]; then\n\t\tif [ \"${quiet_flag}\" != 'y' ]; then\n                  echo \"Press Ctrl+c to cancel or Press any key to continue...\"\n                  char=$(get_char)\n\t\tfi\n                rm -rf ${Directory}\n              fi\n              echo\n              [ -d ~/.acme.sh/${domain} ] && ~/.acme.sh/acme.sh --force --remove -d ${domain} > /dev/null 2>&1\n              [ -d ~/.acme.sh/${domain}_ecc ] && ~/.acme.sh/acme.sh --force --remove --ecc -d ${domain} > /dev/null 2>&1\n              echo \"${CMSG}Domain: ${domain} has been deleted.${CEND}\"\n              echo\n            else\n              echo \"${CWARNING}Virtualhost: ${domain} was not exist! ${CEND}\"\n            fi\n            break\n          fi\n        done\n    else\n      echo \"${CWARNING}Virtualhost was not exist! ${CEND}\"\n    fi\n  fi\n}\n\nDel_Apache_Vhost() {\n  if [ -e \"${apache_install_dir}/bin/httpd\" ]; then\n    if [ -e \"${web_install_dir}/sbin/nginx\" ]; then\n      rm -f ${apache_install_dir}/conf/vhost/${domain}.conf\n      ${apache_install_dir}/bin/apachectl -k graceful\n    else\n      Domain_List=$(ls ${apache_install_dir}/conf/vhost | grep -v '0.conf' | sed \"s@.conf@@g\")\n      if [ -n \"${Domain_List}\" ]; then\n        echo\n        echo \"Virtualhost list:\"\n        echo ${CMSG}${Domain_List}${CEND}\n        while :; do echo\n          read -e -p \"Please input a domain you want to delete: \" domain\n          if [ -z \"$(echo ${domain} | grep '.*\\..*')\" ]; then\n            echo \"${CWARNING}Your ${domain} is invalid! ${CEND}\"\n          else\n            if [ -e \"${apache_install_dir}/conf/vhost/${domain}.conf\" ]; then\n              Directory=$(grep '^<Directory ' ${apache_install_dir}/conf/vhost/${domain}.conf | head -1 | awk -F'\"' '{print $2}')\n              rm -f ${apache_install_dir}/conf/vhost/${domain}.conf\n              [ -e \"${apache_install_dir}/conf/ssl/${domain}.crt\" ] && rm -f ${apache_install_dir}/conf/ssl/${domain}.{crt,key}\n              ${apache_install_dir}/bin/apachectl -k graceful\n              while :; do echo\n                read -e -p \"Do you want to delete Virtul Host directory? [y/n]: \" Del_Vhost_wwwroot_flag\n                if [[ ! ${Del_Vhost_wwwroot_flag} =~ ^[y,n]$ ]]; then\n                  echo \"${CWARNING}input error! Please only input 'y' or 'n'${CEND}\"\n                else\n                  break\n                fi\n              done\n\n              if [ \"${Del_Vhost_wwwroot_flag}\" == 'y' ]; then\n\t\tif [ \"${quiet_flag}\" != 'y' ]; then\n                  echo \"Press Ctrl+c to cancel or Press any key to continue...\"\n                  char=$(get_char)\n\t\tfi\n                rm -rf ${Directory}\n              fi\n              [ -d ~/.acme.sh/${domain} ] && ~/.acme.sh/acme.sh --force --remove -d ${domain} > /dev/null 2>&1\n              [ -d ~/.acme.sh/${domain}_ecc ] && ~/.acme.sh/acme.sh --force --remove --ecc -d ${domain} > /dev/null 2>&1\n              echo \"${CSUCCESS}Domain: ${domain} has been deleted.${CEND}\"\n            else\n              echo \"${CWARNING}Virtualhost: ${domain} was not exist! ${CEND}\"\n            fi\n            break\n          fi\n        done\n\n      else\n        echo \"${CWARNING}Virtualhost was not exist! ${CEND}\"\n      fi\n    fi\n  fi\n}\n\nDel_Tomcat_Vhost() {\n  if [ -e \"${tomcat_install_dir}/conf/server.xml\" ]; then\n    if [ -e \"${web_install_dir}/sbin/nginx\" ]; then\n      if [ -n \"$(echo ${domain} | grep '.*\\..*')\" ] && [ -n \"$(grep vhost-${domain} ${tomcat_install_dir}/conf/server.xml)\" ]; then\n        sed -i /vhost-${domain}/d ${tomcat_install_dir}/conf/server.xml\n        rm -f ${tomcat_install_dir}/conf/vhost/${domain}.xml\n        service tomcat restart\n      fi\n    else\n      Domain_List=$(ls ${tomcat_install_dir}/conf/vhost | grep -v 'localhost.xml' | sed \"s@.xml@@g\")\n      if [ -n \"${Domain_List}\" ]; then\n        echo\n        echo \"Virtualhost list:\"\n        echo ${CMSG}${Domain_List}${CEND}\n        while :; do echo\n          read -e -p \"Please input a domain you want to delete: \" domain\n          if [ -z \"$(echo ${domain} | grep '.*\\..*')\" ]; then\n            echo \"${CWARNING}Your ${domain} is invalid! ${CEND}\"\n          else\n            if [ -n \"$(grep vhost-${domain} ${tomcat_install_dir}/conf/server.xml)\" ]; then\n              sed -i /vhost-${domain}/d ${tomcat_install_dir}/conf/server.xml\n              rm -f ${tomcat_install_dir}/conf/vhost/${domain}.xml\n              service tomcat restart\n              while :; do echo\n                read -e -p \"Do you want to delete Virtul Host directory? [y/n]: \" Del_Vhost_wwwroot_flag\n                if [[ ! ${Del_Vhost_wwwroot_flag} =~ ^[y,n]$ ]]; then\n                  echo \"${CWARNING}input error! Please only input 'y' or 'n'${CEND}\"\n                else\n                  break\n                fi\n              done\n\n              if [ \"${Del_Vhost_wwwroot_flag}\" == 'y' ]; then\n\t\tif [ \"${quiet_flag}\" != 'y' ]; then\n                  echo \"Press Ctrl+c to cancel or Press any key to continue...\"\n                  char=$(get_char)\n\t\tfi\n                rm -rf ${Directory}\n              fi\n              echo \"${CSUCCESS}Domain: ${domain} has been deleted.${CEND}\"\n            else\n              echo \"${CWARNING}Virtualhost: ${domain} was not exist! ${CEND}\"\n            fi\n            break\n          fi\n        done\n\n      else\n        echo \"${CWARNING}Virtualhost was not exist! ${CEND}\"\n      fi\n    fi\n  fi\n}\n\nList_Vhost() {\n  [ -e \"${tomcat_install_dir}/conf/server.xml\" -a ! -d \"${web_install_dir}/sbin/nginx\" ] && Domain_List=$(ls ${tomcat_install_dir}/conf/vhost | grep -v 'localhost.xml' | sed \"s@.xml@@g\")\n  [ -d \"${web_install_dir}/conf/vhost\" ] && Domain_List=$(ls ${web_install_dir}/conf/vhost | sed \"s@.conf@@g\")\n  [ -e \"${apache_install_dir}/bin/httpd\" -a ! -d \"${web_install_dir}/conf/vhost\" ] && Domain_List=$(ls ${apache_install_dir}/conf/vhost | grep -v '0.conf' | sed \"s@.conf@@g\")\n  if [ -n \"${Domain_List}\" ]; then\n    echo\n    echo \"Virtualhost list:\"\n    for D in ${Domain_List}; do echo ${CMSG}${D}${CEND}; done\n  else\n    echo \"${CWARNING}Virtualhost was not exist! ${CEND}\"\n  fi\n}\n\nif [ ${ARG_NUM} == 0 ]; then\n  Add_Vhost\nelse\n  [ \"${add_flag}\" == 'y' -o \"${proxy_flag}\" == 'y' -o \"${sslquiet_flag}\" == 'y' ] && Add_Vhost\n  [ \"${list_flag}\" == 'y' ] && List_Vhost\n  [ \"${delete_flag}\" == 'y' ] && { Del_NGX_Vhost; Del_Apache_Vhost; Del_Tomcat_Vhost; }\nfi\n"
        }
      ]
    }
  ]
}