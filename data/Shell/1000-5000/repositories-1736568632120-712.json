{
  "metadata": {
    "timestamp": 1736568632120,
    "page": 712,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcxOQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "nextcloud/vm",
      "stars": 1341,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitpod.yml",
          "type": "blob",
          "size": 0.126953125,
          "content": "tasks:\n  - init: 'echo \"TODO: Replace with init/build command\"'\n    command: 'echo \"TODO: Replace with command to start project\"'\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 17.7001953125,
          "content": "### Download can be found here: https://www.hanssonit.se/nextcloud-vm/ \n\n**Please note that BOTH disks need to be imported for the VM to function properly.**\n\n- Check the latest commits here: https://github.com/nextcloud/vm/commits/main\n- Documentation can be found here: https://docs.hanssonit.se/s/W6fMouPiqQz3_Mog/virtual-machines-vm/d/W7Du9uPiqQz3_Mr1/nextcloud-vm-machine-configuration\n\nPR's are more than welcome. Happy Nextclouding!\n\n### Different versions\nIf you run Hyper-V or want 500 GB, 1 TB or 2 TB VM you can download it from [T&M Hansson IT's shop](https://shop.hanssonit.se/product-category/virtual-machine/nextcloud/). \n\n## All future releases\n\n### Full changelog:\n- [VM](https://github.com/nextcloud/vm/releases/)\n- [Nextcloud](https://nextcloud.com/changelog/)\n\n\n## 26.0.0\n\n### Full changelog:\n- [VM](https://github.com/nextcloud/vm/releases/tag/26.0.0)\n- [Nextcloud](https://nextcloud.com/changelog/#latest26)\n\n## 25.0.2\n\n### Small changelog:\n- Drop all tables from FTS when reinstalling to avoid leftovers\n- Make Talk security optional. Should work out of the box on all scenarios now. \n- Previewgenerator and Webmin are no longer default apps during installation\n- Support really old versions when migrating/upgrading Nextcloud\n- Improve some scripts and other stuff in the `not-supported` folder\n- Minor bugfixes and improvements\n- And more...\n\n### Full changelog:\n- [https://github.com/nextcloud/vm/compare/24.0.5..25.0.2](https://github.com/nextcloud/vm/compare/24.0.5..25.0.2)\n- [https://nextcloud.com/changelog/#latest25](https://nextcloud.com/changelog/#latest25)\n\n## 24.0.5\n\n### Small changelog:\n- Update Fail2ban with a better regex\n- Fix FTS, and make sure it's gone when removed (even DB)\n- Make Talk installable again by fixing source-repos and some tweaks to the script\n- Fix dependencies for Bitwarden\n- Improve the port checking function (for checking open ports)\n- Allow `NCDATA` to be other than default when checking for Nextcloud version (`lowest_compatible_version()`)\n- Upgrade Realtek firmware drivers for the Home/SME Nextcloud server\n- Add Googles DNS as an option (user request)\n- Always recover old Nextcloud apps, even if app store is broken\n- Remove some legacy code\n- Improve backup scripts and other stuff in the `not-supported` folder\n- Ubuntu 22.04 reached its first maintenance release, consider it 100% stable.\n- And more...\n\n### Full changelog:\n- [https://github.com/nextcloud/vm/compare/24.0.1..24.0.5](https://github.com/nextcloud/vm/compare/24.0.1..24.0.5)\n- [https://nextcloud.com/changelog/#latest24](https://nextcloud.com/changelog/#latest24)\n\n\n## 24.0.1\n\nThis release is quite huge, including Ubuntu 22.04 (minimal), PHP-FPM 8.1, and PosgreSQL 14.\n\n### Small changelog:\n- Prefer use of local lib file\n- Add `addons/fix_invalid_modification_time.sh`\n- Use minimal OS, instead of full blown. Install only needed dependecies.\n- Deprecate Ubuntu 18.04\n- Upgrade to Ubuntu 22.04\n- Upgrade to PHP 8.1\n- Upgrade to PostgreSQL 14\n- Upgrade Documentserver scripts to work with the new Docker images\n- Deprectae `apt-key` and introduce a new and better way for adding keys\n- Make the menu update option default. It first upgrades minor, then asks for major if applicable\n- Only clean disk if it's 70% full and/or less than 100 GB left\n- Remove legacy code\n- Make it possible to add your own DNS servers during installation (not setup)\n- Do not ask for password change if it differs from default, since that means you probably already set your own password\n- Make it possible to add your own GUI user during installation\n- Change DH-param instead of DSA-param\n- Make Talk a bit safer\n- Minor bugfixes and improvements\n- Updated geoblock database\n- Fixed a few backup related details\n- And more...\n\n### Full changelog:\n- https://github.com/nextcloud/vm/compare/23.0.2..24.0.1\n- https://nextcloud.com/changelog/#latest24\n\n## 24.0.0.1\n\n### This is a pre-release. Available as a VM, but only the free 40 GB version.\n\n### Full changelog:\n- https://github.com/nextcloud/vm/compare/24.0.0..24.0.0.1\n- https://nextcloud.com/changelog/#latest24\n\n\n## 24.0.0\n\n### This is a pre-release. Only available in master.\n\n### Full changelog:\n- https://github.com/nextcloud/vm/compare/23.0.2..24.0.0\n- https://nextcloud.com/changelog/#latest24\n\n## 23.0.2\n\n### Small changelog:\n- Change to another Full Text Search implementation\n- Improve deSEC functions\n- Minor bugfixes and improvements\n- And more...\n\n### Full changelog:\n- https://github.com/nextcloud/vm/compare/23.0.1..23.0.2\n- https://nextcloud.com/changelog/#latest23\n\n## 23.0.1\n\n### Small changelog:\n- Fixed all the bugs with the old release (23.0.0)\n- Minor bugfixes and improvements\n- And more...\n\n### Full changelog:\n- https://github.com/nextcloud/vm/compare/23.0.0..23.0.1\n- https://nextcloud.com/changelog/#latest23\n\n## 23.0.0\n\n### Small changelog:\n- Change from lool to cool for Collabora\n- Make it possible to ugrade NIC-firmware from all old releases ([Home/SME server](https://shop.hanssonit.se/product-category/nextcloud/home-sme-server/))\n- Minor bugfixes and improvements\n- And more...\n\n### Full changelog:\n- https://github.com/nextcloud/vm/compare/22.2.2..23.0.0\n- https://nextcloud.com/changelog/#latest23\n\n## 22.2.2\n\n### Small changelog:\n- Change to AllowOverride None for Apache and include .htaccess instead (speeds up I/O)\n- Change IPv4 check (WANIP4)\n- Set productname\n- Minor bugfixes and improvements\n- And more...\n\n### Full changelog:\n- https://github.com/nextcloud/vm/compare/22.2.0..22.2.2\n- https://nextcloud.com/changelog/#latest22\n\n## 22.2.0\n\n### Small changelog:\n- Upgrade Home/SME server NIC firmware\n- Add NVMe to format disk\n- Change keyserver\n- Minor bugfixes and improvements\n- And more...\n\n### Full changelog:\n- https://github.com/nextcloud/vm/compare/22.1.1..22.2.0\n- https://nextcloud.com/changelog/#latest22\n\n\n## 22.1.1\n\n### Small changelog:\n- Remove Group Folders in the standard installation\n- Improved deSEC and added support for existing accounts\n- Improved SPAMHAUS rules and script\n- Show the hostname when notifying - better if you run multiple servers\n- Only update update script if it's older than 120 days\n- Changed to EDCSA for certbot (TLS)\n- Add script for removal or deSEC + subdomain\n- Make deSEC a menu instead\n- Crucial fixes for the new PN51 network drivers\n- Update script - only update the updatenotification script if a new Nextcloud update is available\n- Updated and renamed Bitwarden RS to Vaultwarden\n- Updated geoblock database - August 2021\n- Update script - don't execute the update before all cronjobs are finished\n- Always create a backup before updating\n- Minor bugfixes and improvements\n- And more...\n\n### Full changelog:\n- https://github.com/nextcloud/vm/compare/22.0.0..22.1.1\n- https://nextcloud.com/changelog/#latest22\n\n## 22.0.0\n\n### Small changelog:\n- Add SMTP2GO to SMTP-Relay\n- Remove APCu and replace with Redis instead\n- Made it possible to add subdomains to deSEC\n- Improved spinner_loading\n- Added dates to automatic updates log\n- Added regular ZFS snapshot prune\n- Added retention for Nextclouds user activities\n- Previewgenerator - allow to clear all previews\n- Update script - update Nextclouds mimetype list\n- Moved mimteype update to nextcloud_configuration menu\n- Reworked office scripts\n- Update script - change crontab on all installations to 5 minutes\n- Fixed a bug with Netdata\n- Geoblock - updated link to csv file\n- Refactored the bitwarden_mailconfig script\n- Added more functionality to curl_to_dir\n- Docker documentserver - don't restart docker daemon upon installation\n- Restart notify push in some situations\n- Make sure sudo and software-properties-common is installed\n- Fixed password generation in edge cases\n- Reworked the cookielifetime script\n- Updated geoblock database - June 2021\n- Added option to check for 0-byte files\n- Changed from apt to apt-get\n- Simplified ClamAV notifications and small fix to fail2ban notification\n- Harden-SSH script - allow to set up 2FA authentication\n- SMB-server - added option to automatically empty recylce bins\n- SMB-server - added option to empty all recycle bins\n- SMB-server - Create the files directory for new users directly during the user creation\n- Reworked system-restore\n- Minor bugfixes and improvements\n- And more...\n\n### Full changelog:\n- https://github.com/nextcloud/vm/compare/21.0.2..22.0.0\n- https://nextcloud.com/changelog/#latest22\n\n## 21.0.2\n\n### Small changelog:\n- Make it possible to choose port for public access in the deSEC setup (only when you choose TLS)\n- Fix bugs with the deSEC script\n- Avoid ending up in a loop in the deSEC script\n- It's now possible to check for NONO ports with a function\n- Loop port selection in the Talk script\n- Move backups location to /mnt/NCBACKUPS and delete backups from last year\n- Tune chunking in GUI uploads\n- Clean up some more scripts in the end of each setup\n- Add the Azure kernel for Hyper-V VMs\n- Shorten the time files are stored in trashbin (can still be configured)\n- Escape all Apache Log dirs correctly\n- Made some enhancements to scripts in the [not-supported folder](https://github.com/nextcloud/vm/tree/main/not-supported)\n- Minor bugfixes and improvements\n- And more...\n\n### Full changelog:\n- https://github.com/nextcloud/vm/compare/21.0.1..21.0.2\n- https://nextcloud.com/changelog/#latest21\n\n## 21.0.1\n\n### Small changelog:\n- Add TLS with DNS and deSEC. It's now possible to get DNS from a local machine without any open ports!\n- ClamAV - give the daemon more time to start\n- SMB-server - completely rework how directories get mounted to Nextcloud\n- SMTP-mail - add providers\n- Create a script for the Pico CMS Nextcloud app\n- Add a Firewall script to the not-supported folder\n- Add SSH hardening\n- Add deSEC magic\n- S.M.A.R.T. Monitoring - test drives directly\n- Add a script for the Facerecognition Nextcloud app\n- ClamAV - improve weekly full-scan tremendously\n- Update geoblock database - april\n- Speed up the network check if the network already works\n- Made some enhancements to scripts in the [not-supported folder](https://github.com/nextcloud/vm/tree/main/not-supported)\n- Minor bugfixes and improvements\n\n### Full changelog:\n- https://github.com/nextcloud/vm/compare/21.0.0..21.0.1\n- https://nextcloud.com/changelog/#latest21\n\n## 21.0.0\n\n### Small changelog:\n- Added Push Notifications for Nextcloud (`High Performance Backend for Nextcloud files`)\n- Added Whiteboard for Nextcloud (`New in Nextcloud 21`)\n- Moved Extract for Nextcloud to its own script\n- Add phone region (new in 21)\n- Made sure that all docker containers only listen on localhost \n- Improve Strict Transport Security in TLS\n- DDclient - added No-IP\n- Updated geoblock database files\n- Avoid double crontabs when reexecuting some scripts\n- Don't enable disabled apps after update\n- Geoblock - allow some IP-addresses by default\n- Fix watchtower updates\n- Geoblock - add Let's Encrypt advice\n- Fix upgrade.disable-web\n- Don't break update when enabling app\n- Fix not enabled PECL extensions\n- Prevent apps from breaking the update due to incompatibility\n- Made some enhancements to scripts in the [not-supported folder](https://github.com/nextcloud/vm/tree/main/not-supported)\n- Minor bugfixes and improvements\n\n### Full changelog:\n- https://github.com/nextcloud/vm/compare/20.0.7..21.0.0\n- https://nextcloud.com/changelog/#latest21\n\n## 20.0.7\n\n### Small changelog:\n- Ask to get the latest `update.sh` script when running updates from `menu.sh`\n- Allow to reinstall Bitwarden RS also if local files are present\n- Updated geoblock database files\n- Made some enhancements to scripts in the [not-supported folder](https://github.com/nextcloud/vm/tree/main/not-supported)\n- Minor bugfixes and improvements\n\n### Full changelog:\n- https://github.com/nextcloud/vm/compare/20.0.5..20.0.7\n- https://nextcloud.com/changelog/#latest20\n\n## 20.0.5\n\n### Small changelog:\n- Minor bugfixes and improvements\n\n### Full changelog:\n- https://github.com/nextcloud/vm/compare/20.0.4..20.0.5\n- https://nextcloud.com/changelog/#latest20\n\n\n## 20.0.4\n\n### Major changes:\n- We upgraded the compatibility for VMware. More info [here](https://docs.hanssonit.se/s/W6fMouPiqQz3_Mog/virtual-machines-vm/d/W7Du9uPiqQz3_Mr1/nextcloud-vm-machine-configuration). Changes are based on [this](https://github.com/nextcloud/vm/issues/1358) issue.\n\n### Small changelog:\n- Happy new year!\n- Add ban notifications to Fail2ban\n- Remove unattended upgrades to improve stability (we have our own auto updater)\n- Fixes to the SMB Mount script\n- Fixes to DDclient\n- Minor bugfixes and improvements\n\n### Full changelog:\n- https://github.com/nextcloud/vm/compare/20.0.3..20.0.4\n- https://nextcloud.com/changelog/#latest20\n\n\n## 20.0.3\n\n### Small changelog:\n- Allow to choose between latest version or not\n- Always run the permissions script\n- Don't allow MariaDB specifically\n- Fix PHP error message from Redis\n- Fix grammar and spelling\n- Update geoblock files\n- Minor bugfixes and improvements\n\n\n### Full changelog:\n- https://github.com/nextcloud/vm/compare/20.0.2..20.0.3\n- https://nextcloud.com/changelog/#latest20\n\n## 20.0.2\n\n### Small changelog:\n- Fixed bugs with the `--provisioning` flag\n- Updated geoblock.sh to get rid of jq\n- Added a script-explainer to nextcloud_install_production.sh\n- ClamAV - added a mechanism to inform about found files\n- Fixed a bug in midnight-commander.sh\n- Created smart-monitoring.sh to allow continuously smart checking\n- Switched from Travis to Github Actions\n- Added Reviewdog\n- Improved previewgenerator\n- Made some SC rules global\n- Fixed some problems with wrong ownership of /mnt/ncdata\n- Fixed link in startup-script\n- Fixed ClamAV-Fullscan\n- Added apt over https\n- Further improved ClamAV\n- Allow to reinstall automatic updates\n- Improved partition check during the install-script\n- Fixed some typo's\n- Added more options to the [not-supported folder](https://github.com/nextcloud/vm/tree/main/not-supported) and made some enhancements\n- Minor bugfixes and improvements\n\n\n### Full changelog:\n- https://github.com/nextcloud/vm/compare/20.0.1..20.0.2\n- https://nextcloud.com/changelog/#latest20\n\n## 20.0.1\n\n### Small changelog:\n- Made the setup of SMTP-mail more reliable\n- Added a switch to the install-script to enable automatic provisioning of new releases\n- Changed occ_command to nextcloud_occ to simplify copy and paste between scripts and CLI\n- Improved the logging for SMTP-mail\n- Added deSEC to DDclient-configuration\n- Implemented an option to create LVM snapshots during the update script for certain instances\n- Don't clear the CLI history anymore to simplify debugging\n- Created geblock.sh in order to allow access from configured countries and/or continents\n- Made it more clear that a Nextcloud update started\n- Added DuckDNS to DDclient-configuration\n- Fixed an incorrect OnlyOffice-URL\n- Improved the guidance how to control whiptails\n- Added some popups that explain the Additional Apps Menu and Server Configuration Menu during the startup script\n- Switched to TLS1.3 for new website-configurations on Ubuntu 20.04\n- Added a mechanism to update geoblock database file and added the geoblockdat folder to the repository\n- SMTP-mail: allow to cancel the removal of configurations and packets if the testmail fails in order to simplify debugging\n- Made BPYTOP its own script\n- Standardized the usage of the word CLI\n- Made Midnight Commander its own script\n- Updated all app scripts with a new function for reinstalling\n- Renamed the talk-signaling script to talk and deleted the old talk script\n- Use start_if_stopped everywhere it fits\n- Updatenotification: added an advice for Major Nextcloud updates\n- Improved previewgenerator\n- Fixed problems with static-ip\n- Added Docker migrate script\n- Fixed and issue with ClamAV\n- Added more options to the [not-supported folder](https://github.com/nextcloud/vm/tree/main/not-supported) and made some enhancements\n- Minor bugfixes and improvements\n\n### Full changelog:\n- https://github.com/nextcloud/vm/compare/20.0.0..20.0.1\n- https://nextcloud.com/changelog/#latest20\n\n## 20.0.0\n\n### Small changelog:\n- Add SMTP email relay to be able to send emails directly from the OS (Ubuntu)\n- Make it possible to open ports with UPNP\n- Update notify_admin_gui to cache all found admin users (tested with 500 users, and it's MUCH faster now)\n- Disable hibernation (Ubuntu)\n- Set archive.ubuntu.com as default Repo (Ubuntu)\n- Standardize whiptails even more\n- Improve fetch_lib\n- Use fetch_lib in all scripts to prefer local library instead of hammering Github with requests in every script\n- Update all Docker containers one by one when the update script is run due to compatibility issues with Bitwarden Password manager\n- Improve the way passwords are set during the initial setup\n- SMBmount: Introduce the option to customize the mount before adding as external storage to Nextcloud\n- SMBmount: Add the option to utilize inotify to actively watch over externally changed files and folders\n- Repository: cleanup by removing duplicate scripts and not-needed functions\n- Repository: added the [not-supported folder](https://github.com/nextcloud/vm/tree/main/not-supported) with additional options like creating a SMB-server\n\n- Minor bugfixes and improvements\n\n### Full changelog:\n- https://github.com/nextcloud/vm/compare/19.0.3..20.0.0\n- https://nextcloud.com/changelog/#latest20\n\n## 19.0.3\n\n### Small changelog:\n- Standardize input_box flow\n- Automatically rewrite Webmin to HTTPS\n- Add default dark mode theme to Adminer\n- Make Adminer work on HTTP/2\n- Introduce fetch_lib and chain libaries - this is now the new way of fetching the libs\n- Add more menu scripts\n- Add more Yes/No boxes and fix occurrences where the text wasn't shown due to print_text_in_color\n- Standardize Whiptails even more\n- Change to TLS1.2 all over\n- Make functions out of all special variables\n- Create a new (smart) startup script with basic server settings\n- Automatically get the main domain for all scripts with built in proxies\n- Minor bugfixes and improvements\n\n### Full changelog:\n- https://github.com/nextcloud/vm/compare/19.0.2..19.0.3\n- https://nextcloud.com/changelog/#latest19\n\n### Known errors:\n- N/A\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 34.3173828125,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    {one line to give the program's name and a brief idea of what it does.}\n    Copyright (C) {year}  {name of author}\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    {project}  Copyright (C) {year}  {fullname}\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<http://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.8779296875,
          "content": "Nextcloud VM Appliance\n============\n\nServer installation. Simplified. :cloud:\n--------------------------------\n\n#### Interactive Guidance\n> **The Nextcloud VM** — _(aka **N**ext**c**loud **V**irtual **M**achine_ or _**NcVM**)_ — helps you create a personal or corporate [Nextcloud Server] _faster_ and _easier._ Fundamentally, NcVM is a carefully crafted _family_ of [\\*nix] scripts which interactively guide you through a quality-controlled installation to obtain an [A+ security-rated] Nextcloud instance.\n\n#### Curated Extras\n> The Nextcloud [app store] extends core features by allowing you to enable a multitude of free one-click apps. However, _integration apps_ there like [Collabora Online] and [ONLYOFFICE] are solely _bridges_ to Nextcloud. You’re still required to install those services _separately_, which can be complex. NcVM provides optional _**full installation of select curated apps**_, including those and others. Monitor and manage your cloud using any web browser with NcVM’s hand-picked collection of power utilities featuring stunning, modern UIs.\n\n#### All Systems Go\n> NcVM can check for and install _stable_ updates to keep things current, smooth, and secure.\n\n\n--------------------\n\n## Dependencies:\n(Ubuntu Server 24.04 LTS *minimal* 64-bit)\n<br>\n(Linux Kernel: 6.8)\n- Apache 2.4\n- PostgreSQL 16\n- PHP-FPM 8.3\n- Redis Memcache (latest stable version from PECL)\n- PHP-igbinary (latest stable version from PECL\n- PHP-smbclient (latest stable version from PECL)\n- Nextcloud Server Latest\n\n## Support the development\n* [Create a PR](https://help.github.com/articles/creating-a-pull-request/) and improve the code\n* Report [your issue](https://github.com/nextcloud/vm/issues/new)\n* Help us with [existing issues](https://github.com/nextcloud/vm/issues)\n* Test what's not yet released into the stable VM. Please have a look at [this subfolder](https://github.com/nextcloud/vm/tree/main/not-supported) for further information.\n* Write scripts so that the release process becomes automated with [Vagrant](https://www.vagrantup.com/docs/getting-started/), [Terraform](https://www.terraform.io/) or similar\n* **[Donate](https://shop.hanssonit.se/product-category/donate/) or buy our [pre-configured VMs](https://shop.hanssonit.se/product-category/virtual-machine/): 500 GB, 1 TB, 2TB for both VMware, Hyper-V and [more](https://docs.hanssonit.se/s/W6fMouPiqQz3_Mog/virtual-machines-vm/d/W7Du9uPiqQz3_Mr1/nextcloud-vm-machine-configuration?currentPageId=bls17dahv0jgrltpif20)**\n\n**FYI**\n\nDeveloped by [Daniel Hansson](https://github.com/enoch85) and the Nextcloud community. Nextcloud GmbH does not offer support for the VM in the [main branch](https://github.com/nextcloud/vm/tree/main) (full-version), as we only support manual tarball/zip-package installations. You can download the official Nextcloud VM appliance ([also from this repo](https://github.com/nextcloud/vm/tree/official-basic-vm)) from [our website](https://download.nextcloud.com/vm/Official-Nextcloud-VM.zip) to get a stripped down version for testing if you rather want to skip all the manual steps in our documentation.\n\nIf you want support regarding the full-version VM in main, please contact our partner [Hansson IT](https://www.hanssonit.se/nextcloud-vm).\n  \n## Full documentation\n* [VM](https://docs.hanssonit.se/s/W6fMouPiqQz3_Mog/virtual-machines-vm/d/W6fMquPiqQz3_Moi/nextcloud-vm) (the easiest option)\n* [Install with scripts](https://docs.hanssonit.se/s/bj0vl1ihv0jgrmfm08j0/build-your-own/d/bj0vl4ahv0jgrmfm0950/nextcloud-vm) (if you feel brave)\n* [FAQ](https://docs.hanssonit.se/s/bj101nihv0jgrmfm09f0/faq/d/bj101pihv0jgrmfm0a10/nextcloud-vm?currentPageId=bj101sqhv0jgrmfm0a1g) (Frequently Asked Questions)\n* [Machine configuration](https://docs.hanssonit.se/s/W6fMouPiqQz3_Mog/virtual-machines-vm/d/W7Du9uPiqQz3_Mr1/machine-setup-nextcloud-vm) (of the released version)\n\n## I want to test a Release Candidate (RC), or Beta!\nNo problem, brave explorer! We made it simple. \n\nIn some cases we do pre-releases of the VM as well. Those can be found in the [TESTING](https://download.kafit.se/s/dnkWptz8AK4JZDM?path=%2FTESTING) folder on the download server. \n\nIf you want to try the latest version yourself, there are two variables that you could use:\n\n1. For latest **beta** or **RC** version: `sudo bash /var/scripts/update.sh beta`\n\n2. For specific **RC** version: `sudo bash /var/scripts/update.sh 23.0.1rc2`\n\nPlease keep in mind that this is only intended for testing and might crash your Nextcloud. Please keep backups!\n\n\n## Vagrant example (Beta)\n\nThe `nextcloud_install_production.sh` script can be run as part of Vagrant provisioning.\n\nSee [this subrepo](https://github.com/nextcloud/vm/tree/main/vagrant) for more information.\n\nPlease report any issues you can find. Improvements are welcome!\n\n## First look\n#### Nextcloud\n![alt tag](https://github.com/nextcloud/nextcloud.com/blob/master/assets/img/features/VMwelcome.png)\n#### Adminer (Database Administration) *not default*\n![alt tag](https://i.imgur.com/tiF4chg.png)\n#### Webmin (Server Administration GUI) *not default*\n![alt tag](https://i.imgur.com/hLkmA1D.png)\n#### TLS rating\n![alt tag](https://i.imgur.com/nBEvczb.png)\n\n## The usual tags\n**Downloads from Github (not the main downloads location):**\n<br>\n![Downloads](https://img.shields.io/github/downloads/nextcloud/vm/total.svg)\n<br>\n**Downloads from main server:**\n<br>\n~100 per day since 2016\n<br>\n**Build Status:**\n<br>\n[![Check-code-with-shellcheck Actions status](https://github.com/nextcloud/vm/workflows/check-code-with-shellcheck/badge.svg)](https://github.com/nextcloud/vm/actions)\n<br>\n[![Reviewdog Actions status](https://github.com/nextcloud/vm/workflows/reviewdog/badge.svg)](https://github.com/nextcloud/vm/actions)\n<br>\n**Stability Status:**\n<br>\n![Stability Status](https://img.shields.io/badge/stability-stable-brightgreen.svg)\n\n## Current [maintainers](https://github.com/nextcloud/vm/graphs/contributors)\n(Most of the commit history is gone, since Github decided to remove it when an account email address is removed.)\n* [Daniel Hanson](https://github.com/enoch85) @ [T&M Hansson IT AB](https://www.hanssonit.se)\n* [szaimen](https://github.com/szaimen)\n* You? :)\n\n## Special thanks to\n* Ezra Holm @ [Tech and Me](https://www.techandme.se)\n* [Luis Guzman](https://github.com/Ark74) @ [SwITNet](https://switnet.net)\n* [Stefan Heitmüller](https://github.com/morph027) @ [morph027's Blog](https://morph027.gitlab.io/)\n* [Lorenzo Faleschini](https://github.com/penzoiders)\n* [Georg Großmann](https://github.com/ggeorgg)\n* [liao20081228](https://github.com/liao20081228)\n* [aaaskew](https://github.com/aaaskew)\n* IP address data powered by [IPinfo](https://ipinfo.io/)\n\n[Nextcloud Server]: http://shortio.hanssonit.se/r1Rx0GqXa9\n[app store]: http://shortio.hanssonit.se/Rz1GEXt9dL\n[\\*nix]: http://shortio.hanssonit.se/52hOTQbhdh\n[A+ security-rated]: http://shortio.hanssonit.se/aMTjg0SJi3\n[Collabora Online]: http://shortio.hanssonit.se/IKjBoOfQOT\n[ONLYOFFICE]: http://shortio.hanssonit.se/oRLShCfRK3\n"
        },
        {
          "name": "addons",
          "type": "tree",
          "content": null
        },
        {
          "name": "apps",
          "type": "tree",
          "content": null
        },
        {
          "name": "disk",
          "type": "tree",
          "content": null
        },
        {
          "name": "lets-encrypt",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib.sh",
          "type": "blob",
          "size": 72.927734375,
          "content": "#!/bin/bash\n\n# T&M Hansson IT AB © - 2024, https://www.hanssonit.se/\n# GNU General Public License v3.0\n# https://github.com/nextcloud/vm/blob/main/LICENSE\n\n# shellcheck disable=SC2034\ntrue\n# see https://github.com/koalaman/shellcheck/wiki/Directive\n\n## VARIABLES\n\n# Dirs\nSCRIPTS=/var/scripts\nHTML=/var/www\nNCPATH=\"$HTML\"/nextcloud\nPOOLNAME=ncdata\nNCDATA=/mnt/\"$POOLNAME\"\nSNAPDIR=/var/snap/spreedme\nGPGDIR=/tmp/gpg\nSHA256_DIR=/tmp/sha256\nBACKUP=/mnt/NCBACKUP\nNC_APPS_PATH=$NCPATH/apps\nVMLOGS=/var/log/nextcloud\n\n# Helper function for generating random passwords\ngen_passwd() {\n    local length=$1\n    local charset=\"$2\"\n    local password=\"\"\n    while [ ${#password} -lt \"$length\" ]\n    do\n        password=$(echo \"$password\"\"$(head -c 100 /dev/urandom | LC_ALL=C tr -dc \"$charset\")\" | fold -w \"$length\" | head -n 1)\n    done\n    echo \"$password\"\n}\n\n# Ubuntu OS\nDISTRO=$(lsb_release -sr)\nCODENAME=$(lsb_release -sc)\nKEYBOARD_LAYOUT=$(localectl status | grep \"Layout\" | awk '{print $3}')\n# Hypervisor\n###  TODO ### HYPERVISOR=$(dmesg --notime | grep -i hypervisor | cut -d ':' -f2 | head -1 | tr -d ' ')\nSYSVENDOR=$(cat /sys/devices/virtual/dmi/id/sys_vendor)\n# Network\nIFACE=$(ip r | grep \"default via\" | awk '{print $5}')\nIFACE2=$(ip -o link show | awk '{print $2,$9}' | grep 'UP' | cut -d ':' -f 1)\nADDRESS=$(hostname -I | cut -d ' ' -f 1)\nWANIP4=$(curl -s -k -m 5 -4 https://api64.ipify.org)\nINTERFACES=\"/etc/netplan/nextcloud.yaml\"\nGATEWAY=$(ip route | grep default | awk '{print $3}')\n# Internet DNS required when a check needs to be made to a server outside the home/SME\nINTERNET_DNS=\"9.9.9.9\"\n# Default Quad9 DNS servers, overwritten by the systemd global DNS defined servers, if set\nDNS1=\"9.9.9.9\"\nDNS2=\"149.112.112.112\"\nNONO_PORTS=(22 25 53 80 443 1024 3012 3306 5178 5179 5432 7867 7983 8983 10000 8081 8443 9443 9000 9980 9090 9200 9600 1234)\n# 9000 9980 9090 9200 9600 1234 are local docker ports, don't remember if they are needed here or not.\nuse_global_systemd_dns() {\nif [ -f \"/etc/systemd/resolved.conf\" ]\nthen\n    local resolvedDns1\n    resolvedDns1=$(grep -m 1 -E \"^DNS=.+\" /etc/systemd/resolved.conf | sed s/^DNS=// | awk '{print $1}')\n    if [ -n \"$resolvedDns1\" ]\n    then\n        DNS1=\"$resolvedDns1\"\n\n        local resolvedDns2\n        resolvedDns2=$(grep -m 1 -E \"^DNS=.+\" /etc/systemd/resolved.conf | sed s/^DNS=// | awk '{print $2}')\n        if [ -n \"$resolvedDns2\" ]\n        then\n            DNS2=\"$resolvedDns2\"\n        else\n            DNS2=\n        fi\n    fi\nfi\n}\nuse_global_systemd_dns\n\n# Whiptails\nTITLE=\"Nextcloud VM - $(date +%Y)\"\n[ -n \"$SCRIPT_NAME\" ] && TITLE+=\" - $SCRIPT_NAME\"\nCHECKLIST_GUIDE=\"Navigate with the [ARROW] keys and (de)select with the [SPACE] key. \\\nConfirm by pressing [ENTER]. Cancel by pressing [ESC].\"\nMENU_GUIDE=\"Navigate with the [ARROW] keys and confirm by pressing [ENTER]. Cancel by pressing [ESC].\"\nRUN_LATER_GUIDE=\"You can view this script later by running 'sudo bash $SCRIPTS/menu.sh'.\"\n# Repo\nGITHUB_REPO=\"https://raw.githubusercontent.com/nextcloud/vm/main\"\nSTATIC=\"$GITHUB_REPO/static\"\nLETS_ENC=\"$GITHUB_REPO/lets-encrypt\"\nAPP=\"$GITHUB_REPO/apps\"\nOLD=\"$GITHUB_REPO/old\"\nADDONS=\"$GITHUB_REPO/addons\"\nDESEC=\"$GITHUB_REPO/addons/deSEC\"\nMENU=\"$GITHUB_REPO/menu\"\nDISK=\"$GITHUB_REPO/disk\"\nNETWORK=\"$GITHUB_REPO/network\"\nVAGRANT_DIR=\"$GITHUB_REPO/vagrant\"\nNOT_SUPPORTED_FOLDER=\"$GITHUB_REPO/not-supported\"\nNCREPO=\"https://download.nextcloud.com/server/releases\"\nISSUES=\"https://github.com/nextcloud/vm/issues\"\n# User information\nGUIUSER=ncadmin\nGUIPASS=nextcloud\nUNIXUSER=$SUDO_USER\nUNIXUSER_PROFILE=\"/home/$UNIXUSER/.bash_profile\"\nROOT_PROFILE=\"/root/.bash_profile\"\n# User for Bitwarden\nBITWARDEN_USER=bitwarden\nBITWARDEN_HOME=/home/\"$BITWARDEN_USER\"\n# Database\nSHUF=$(shuf -i 25-29 -n 1)\nPGDB_USER=nextcloud_db_user\nPGDB_PASS=$(gen_passwd \"$SHUF\" \"a-zA-Z0-9@#*\")\nNEWPGPASS=$(gen_passwd \"$SHUF\" \"a-zA-Z0-9@#*\")\nncdb() {\n    NCDB=$(grep \"dbname\" $NCPATH/config/config.php | awk '{print $3}' | sed \"s/[',]//g\")\n    NCDBPASS=$(grep \"dbpassword\" $NCPATH/config/config.php | awk '{print $3}' | sed \"s/[',]//g\")\n    NCDBUSER=$(grep \"dbuser\" $NCPATH/config/config.php | awk '{print $3}' | sed \"s/[',]//g\")\n    NCDBTYPE=$(grep \"dbtype\" /var/www/nextcloud/config/config.php | awk '{print $3}' | sed \"s/[',]//g\")\n    NCDBHOST=$(grep \"dbhost\" /var/www/nextcloud/config/config.php | awk '{print $3}' | sed \"s/[',]//g\")\n}\n# Path to specific files\nSECURE=\"$SCRIPTS/setup_secure_permissions_nextcloud.sh\"\n# Nextcloud version\nnc_update() {\n    CURRENTVERSION=$(sudo -u www-data php $NCPATH/occ status | grep \"versionstring\" | awk '{print $3}')\n    NCVERSION=$(curl -s -m 900 $NCREPO/ | sed --silent 's/.*href=\"nextcloud-\\([^\"]\\+\\).zip.asc\".*/\\1/p' | sort --version-sort | tail -1)\n    STABLEVERSION=\"nextcloud-$NCVERSION\"\n    NCMAJOR=\"${NCVERSION%%.*}\"\n    CURRENTMAJOR=\"${CURRENTVERSION%%.*}\"\n    NCBAD=$((NCMAJOR-2))\n    NCNEXT=\"$((${CURRENTVERSION%%.*}+1))\"\n}\nmaxmind_geoip() {\n    # shellcheck source=/dev/null\n    source <(curl -sL https://shortio.hanssonit.se/t3vm7ro4CP)\n}\n# Set the hour for automatic updates. This would be 18:00 as only the hour is configurable.\nAUT_UPDATES_TIME=\"18\"\n# Keys\nOpenPGP_fingerprint='28806A878AE423A28372792ED75899B9A724937A'\n# Letsencrypt\nSITES_AVAILABLE=\"/etc/apache2/sites-available\"\nLETSENCRYPTPATH=\"/etc/letsencrypt\"\nCERTFILES=\"$LETSENCRYPTPATH/live\"\nDHPARAMS_TLS=\"$CERTFILES/$TLSDOMAIN/dhparam.pem\"\nDHPARAMS_SUB=\"$CERTFILES/$SUBDOMAIN/dhparam.pem\"\nTLS_CONF=\"nextcloud_tls_domain_self_signed.conf\"\nHTTP_CONF=\"nextcloud_http_domain_self_signed.conf\"\n# Collabora App\nHTTPS_CONF=\"$SITES_AVAILABLE/$SUBDOMAIN.conf\"\nHTTP2_CONF=\"/etc/apache2/mods-available/http2.conf\"\n# GeoBlock\nGEOBLOCK_MOD_CONF=\"/etc/apache2/conf-available/geoblock.conf\"\nGEOBLOCK_MOD=\"/etc/apache2/mods-available/maxminddb.load\"\nGEOBLOCK_DIR=\"/usr/share/GeoIP\"\n# PHP-FPM\nPHPVER=8.3\nPHP_FPM_DIR=/etc/php/$PHPVER/fpm\nPHP_INI=$PHP_FPM_DIR/php.ini\nPHP_POOL_DIR=$PHP_FPM_DIR/pool.d\nPHP_MODS_DIR=/etc/php/\"$PHPVER\"/mods-available\nopcache_interned_strings_buffer_value=24\n# Notify push\nNOTIFY_PUSH_SERVICE_PATH=\"/etc/systemd/system/notify_push.service\"\n# Adminer\nADMINERDIR=/usr/share/adminer\nADMINER_CONF=\"$SITES_AVAILABLE/adminer.conf\"\nADMINER_CONF_PLUGIN=\"$ADMINERDIR/extra_plugins.php\"\n# Redis\nREDIS_CONF=/etc/redis/redis.conf\nREDIS_SOCK=/var/run/redis/redis-server.sock\nREDIS_PASS=$(gen_passwd \"$SHUF\" \"a-zA-Z0-9@#*\")\n# Extra security\nSPAMHAUS=/etc/spamhaus.wl\nENVASIVE=/etc/apache2/mods-available/mod-evasive.load\nAPACHE2=/etc/apache2/apache2.conf\n# Full text Search\nfulltextsearch_install() {\n    FULLTEXTSEARCH_DIR=\"$SCRIPTS\"/fulltextsearch\n    NEXTCLOUD_INDEX=$(gen_passwd \"$SHUF\" '[:lower:]')\n    ELASTIC_USER_PASSWORD=$(gen_passwd \"$SHUF\" '[:lower:]')\n    FULLTEXTSEARCH_IMAGE_NAME=fulltextsearch_es01\n    FULLTEXTSEARCH_SERVICE=nextcloud-fulltext-elasticsearch-worker.service\n    # Gets the version from the latest tag here: https://github.com/docker-library/official-images/blob/master/library/elasticsearch\n    FULLTEXTSEARCH_IMAGE_NAME_LATEST_TAG=\"$(curl -s -m 900 https://raw.githubusercontent.com/docker-library/official-images/refs/heads/master/library/elasticsearch | grep \"Tags:\" | head -1 | awk '{print $2}')\"\n    # Legacy, changed 2023-09-21\n    DOCKER_IMAGE_NAME=es01\n    # Legacy, not used at all\n    RORDIR=/opt/es/\n    OPNSDIR=/opt/opensearch\n    nc_fts=\"ark74/nc_fts\"\n    opens_fts=\"opensearchproject/opensearch\"\n    fts_node=\"fts_os-node\"\n}\n# Name in trusted_config\nncdomain() {\n    NCDOMAIN=$(nextcloud_occ_no_check config:system:get overwrite.cli.url | sed 's|https://||;s|/||')\n}\n# Talk\nturn_install() {\n    TURN_CONF=\"/etc/turnserver.conf\"\n    TURN_PORT=3478\n    TURN_DOMAIN=$(sudo -u www-data /var/www/nextcloud/occ config:system:get overwrite.cli.url | sed 's|https://||;s|/||')\n    SHUF=$(shuf -i 25-29 -n 1)\n    TURN_SECRET=$(gen_passwd \"$SHUF\" \"a-zA-Z0-9\")\n    JANUS_API_KEY=$(gen_passwd \"$SHUF\" \"a-zA-Z0-9\")\n    SIGNALING_SECRET=$(gen_passwd \"$SHUF\" \"a-zA-Z0-9\")\n    SIGNALING_SERVER_CONF=/etc/signaling/server.conf\n    TURN_INTERNAL_SECRET=$(gen_passwd \"$SHUF\" \"a-zA-Z0-9\")\n    TURN_RECORDING_SECRET=$(gen_passwd \"$SHUF\" \"a-zA-Z0-9\")\n    TURN_RECORDING_HOST=127.0.0.1\n    TURN_RECORDING_HOST_PORT=1234\n}\n\n## FUNCTIONS\n\n# If script is running as root?\n#\n# Example:\n# if is_root\n# then\n#     # do stuff\n# else\n#     print_text_in_color \"$IRed\" \"You are not root...\"\n#     exit 1\n# fi\n#\nis_root() {\n    if [[ \"$EUID\" -ne 0 ]]\n    then\n        return 1\n    else\n        return 0\n    fi\n}\n\n# Check if root\nroot_check() {\nif ! is_root\nthen\n    msg_box \"Sorry, you are not root. You now have two options:\n\n1. Use SUDO directly:\n   a) :~$ sudo bash $SCRIPTS/name-of-script.sh\n\n2. Become ROOT and then type your command:\n   a) :~$ sudo -i\n   b) :~# bash $SCRIPTS/name-of-script.sh\n\nIn both cases above you can leave out $SCRIPTS/ if the script\nis directly in your PATH.\n\nMore information can be found here: https://unix.stackexchange.com/a/3064\"\n    exit 1\nfi\n}\n\ndebug_mode() {\nif [ \"$DEBUG\" -eq 1 ]\nthen\n    set -ex\nfi\n}\n\nmsg_box() {\n    [ -n \"$2\" ] && local SUBTITLE=\" - $2\"\n    whiptail --title \"$TITLE$SUBTITLE\" --msgbox \"$1\" \"$WT_HEIGHT\" \"$WT_WIDTH\" 3>&1 1>&2 2>&3\n}\n\nyesno_box_yes() {\n    [ -n \"$2\" ] && local SUBTITLE=\" - $2\"\n    if (whiptail --title \"$TITLE$SUBTITLE\" --yesno \"$1\" \"$WT_HEIGHT\" \"$WT_WIDTH\" 3>&1 1>&2 2>&3)\n    then\n        return 0\n    else\n        return 1\n    fi\n}\n\nyesno_box_no() {\n    [ -n \"$2\" ] && local SUBTITLE=\" - $2\"\n    if (whiptail --title \"$TITLE$SUBTITLE\" --defaultno --yesno \"$1\" \"$WT_HEIGHT\" \"$WT_WIDTH\" 3>&1 1>&2 2>&3)\n    then\n        return 0\n    else\n        return 1\n    fi\n}\n\ninput_box() {\n    [ -n \"$2\" ] && local SUBTITLE=\" - $2\"\n    local RESULT && RESULT=$(whiptail --title \"$TITLE$SUBTITLE\" --nocancel --inputbox \"$1\" \"$WT_HEIGHT\" \"$WT_WIDTH\" 3>&1 1>&2 2>&3)\n    echo \"$RESULT\"\n}\n\ninput_box_flow() {\n    local RESULT\n    while :\n    do\n        RESULT=$(input_box \"$1\" \"$2\")\n        if [ -z \"$RESULT\" ]\n        then\n            msg_box \"Input is empty, please try again.\" \"$2\"\n        elif ! yesno_box_yes \"Is this correct? $RESULT\" \"$2\"\n        then\n            msg_box \"OK, please try again.\" \"$2\"\n        else\n            break\n        fi\n    done\n    echo \"$RESULT\"\n}\n\ninstall_popup() {\n    msg_box \"$SCRIPT_EXPLAINER\"\n    if yesno_box_yes \"Do you want to install $1?\"\n    then\n        print_text_in_color \"$ICyan\" \"Installing $1...\"\n    else\n        if [ -z \"$2\" ] || [ \"$2\" = \"exit\" ]\n        then\n            exit 1\n        elif [ \"$2\" = \"sleep\" ]\n        then\n            sleep 1\n        elif [ \"$2\" = \"return\" ]\n        then\n            return 1\n        else\n            exit 1\n        fi\n    fi\n}\n\nreinstall_remove_menu() {\n    REINSTALL_REMOVE=$(whiptail --title \"$TITLE\" --menu \\\n\"It seems like $1 is already installed.\\nChoose what you want to do.\n$MENU_GUIDE\\n\\n$RUN_LATER_GUIDE\" \"$WT_HEIGHT\" \"$WT_WIDTH\" 4 \\\n\"Reinstall\" \" $1\" \\\n\"Uninstall\" \" $1\" 3>&1 1>&2 2>&3)\n    if [ \"$REINSTALL_REMOVE\" = \"Reinstall\" ]\n    then\n        print_text_in_color \"$ICyan\" \"Reinstalling $1...\"\n    elif [ \"$REINSTALL_REMOVE\" = \"Uninstall\" ]\n    then\n        print_text_in_color \"$ICyan\" \"Uninstalling $1...\"\n    elif [ -z \"$REINSTALL_REMOVE\" ]\n    then\n        if [ -z \"$2\" ] || [ \"$2\" = \"exit\" ]\n        then\n            exit 1\n        elif [ \"$2\" = \"sleep\" ]\n        then\n            sleep 1\n        elif [ \"$2\" = \"return\" ]\n        then\n            return 1\n        else\n            exit 1\n        fi\n    fi\n}\n\nremoval_popup() {\n    if [ \"$REINSTALL_REMOVE\" = \"Uninstall\" ]\n    then\n        msg_box \"$1 was successfully uninstalled.\"\n        if [ -z \"$2\" ] || [ \"$2\" = \"exit\" ]\n        then\n            exit 1\n        elif [ \"$2\" = \"sleep\" ]\n        then\n            sleep 1\n        elif [ \"$2\" = \"return\" ]\n        then\n            return 1\n        else\n            exit 1\n        fi\n    elif [ \"$REINSTALL_REMOVE\" = \"Reinstall\" ]\n    then\n        print_text_in_color \"$ICyan\" \"Reinstalling $1...\"\n    else\n        msg_box \"It seems like neither Uninstall nor Reinstall was selected, \\\nsomething is wrong here. Please report this to $ISSUES\"\n        exit 1\n    fi\n}\n\nmetadefender-scan() {\n# Usage:\n# metadefender-scan.sh $PATH $APIKEY, for example:\nhash=\"$(sha256sum \"$1\")\"\nhash=\"${hash%% *}\"\napikey=7283aa9bbcee83132506659a4e5675bb\ncurl \"https://api.metadefender.com/v4/hash/$hash\" -H \"apikey: $apikey\"\n}\n\n# Used in geoblock.sh\ndownload_geoip_mmdb() {\n    # Rate limit to 1 hour, we have 24 requests per day\n    if [ -f \"$GEOBLOCK_DIR/IPInfo-Country.mmdb\" ]\n    then\n        if [ \"$(( $(date +\"%s\") - $(stat -c \"%Y\" \"$GEOBLOCK_DIR/IPInfo-Country.mmdb\") ))\" -lt \"3600\" ]\n        then\n            print_text_in_color \"$IGreen\" \"No need to update $GEOBLOCK_DIR/IPInfo-Country.mmdb since it's newer than 1 hour.\"\n            return 1\n        fi\n    elif [ -f \"$GEOBLOCK_DIR/GeoLite2-Country.mmdb\" ]\n    then\n        print_text_in_color \"$ICyan\" \"Replacing Maxmind with IPInfo GeoIP database...\"\n    fi\n\n    # Download or update current GeoIP DB\n    maxmind_geoip\n    export x8v8GyVQg2UejdPh\n    print_text_in_color \"$ICyan\" \"Downloading latest GeoIP database from https://ipinfo.io...\"\n    if ! curl -sfL https://ipinfo.io/data/free/country.mmdb?token=\"$x8v8GyVQg2UejdPh\" -o \"$GEOBLOCK_DIR\"/IPInfo-Country.mmdb\n    then\n        print_text_in_color \"$IRed\" \"Failed downloading GeoIP database from IPInfo, trying plan B...\"\n        export MwKfcYATm43NMT\n        export i9HL69SLnp4ymy\n        {\n        echo \"GEOIPUPDATE_ACCOUNT_ID=$MwKfcYATm43NMT\"\n        echo \"GEOIPUPDATE_LICENSE_KEY=$i9HL69SLnp4ymy\"\n        echo \"GEOIPUPDATE_EDITION_IDS=GeoLite2-Country\"\n        echo \"GEOIPUPDATE_FREQUENCY=0\"\n        echo \"GEOIPUPDATE_PRESERVE_FILE_TIMES=1\"\n        echo \"GEOIPUPDATE_VERBOSE=1\"\n        } > /tmp/dockerenv\n        unset MwKfcYATm43NMT\n        unset i9HL69SLnp4ymy\n        install_docker\n        if docker run --name maxmind --env-file /tmp/dockerenv -v \"$GEOBLOCK_DIR\":\"$GEOBLOCK_DIR\" ghcr.io/maxmind/geoipupdate\n        then\n            docker rm -f maxmind\n            rm -f /tmp/dockerenv\n            # Since only one mmdb file can exist at the same time due to Apache \"if\" confitions, remove IPInfos config\n            rm -f \"$GEOBLOCK_DIR\"/IPInfo-Country.mmdb\n            print_text_in_color \"$IGreen\" \"Maxmind GeoIP database downloaded!\"\n        else\n            docker rm -f maxmind\n            rm -f /tmp/dockerenv\n            print_text_in_color \"$IRed\" \"Rate limit for Maxmind GeoIP database reached! Can't continue from here, please report this to $ISSUES\"\n        fi\n    else\n        # Since only one mmdb file can exist at the same time due to Apache \"if\" confitions, remove MaxMinds config\n        rm -f \"$GEOBLOCK_DIR\"/GeoLite2-Country.mmdb\n        return 0\n    fi\n    unset x8v8GyVQg2UejdPh\n}\n\n# Check if process is runnnig: is_process_running dpkg\nis_process_running() {\nPROCESS=\"$1\"\n\nwhile :\ndo\n    RESULT=$(pgrep \"${PROCESS}\")\n\n    if [ \"${RESULT:-null}\" = null ]; then\n            break\n    else\n            print_text_in_color \"$ICyan\" \"${PROCESS} is running, waiting for it to stop. Please be patient...\"\n            sleep 30\n    fi\ndone\n}\n\n# Fix issues like https://github.com/nextcloud/spreed/issues/5518\ncheck_running_cronjobs() {\n    while [ -n \"$(pgrep -f nextcloud/cron.php)\" ]\n    do\n        # Check if virus scan is running, could take ages for it to finish...\n        if ! pgrep -f clamd\n        then\n            # If not running, then keep waiting\n            countdown \"Waiting for the Nextcloud cronjob to finish...\" \"30\"\n        else\n            # If virus scan is running, then wait a bit longer, and kill it to release cron.php\n            countdown \"Waiting for the Nextcloud cronjob and virusscan to finish...\" \"120\"\n            pkill -f clamd\n        fi\n    done\n}\n\n# Checks if site is reachable with a HTTP 200 status\nsite_200() {\nprint_text_in_color \"$ICyan\" \"Checking connection to ${1}...\"\n        CURL_STATUS=\"$(curl -LI \"${1}\" -o /dev/null -w '%{http_code}\\n' -s)\"\n        if [[ \"$CURL_STATUS\" = \"200\" ]]\n        then\n            return 0\n        else\n            msg_box \"curl didn't produce a 200 status, is ${1} reachable? Please report this to $ISSUES.\"\n            return 1\n        fi\n}\n\n# Do a DNS lookup and compare the WAN address with the A record\ndomain_check_200() {\n    print_text_in_color \"$ICyan\" \"Doing a DNS lookup for ${1}...\"\n    install_if_not dnsutils\n\n    # Try to resolve the domain with nslookup using $DNS as resolver\n    if nslookup \"${1}\" \"$INTERNET_DNS\"\n    then\n        print_text_in_color \"$IGreen\" \"DNS seems correct when checking with nslookup!\"\n    else\n        msg_box \"DNS lookup failed with nslookup. \\\nPlease check your DNS settings! Maybe the domain isn't propagated?\nYou can use this site to check if the IP seems correct: https://www.whatsmydns.net/#A/${1}\"\n        if ! yesno_box_no \"Are you 100% sure the domain is correct?\"\n        then\n            exit\n        fi\n    fi\n\n    # Is the DNS record same as the external IP address of the server?\n    DIG=\"$(dig +short \"${1}\" @resolver1.opendns.com)\"\n    if [ \"$DIG\" = \"$WANIP4\" ]\n    then\n        print_text_in_color \"$IGreen\" \"DNS seems correct when checking with dig!\"\n    else\n    msg_box \"DNS lookup failed with dig. The external IP ($WANIP4) \\\naddress of this server is not the same as the A-record ($DIG).\nPlease check your DNS settings! Maybe the domain hasn't propagated?\nPlease check https://www.whatsmydns.net/#A/${1} if the IP seems correct.\"\n\n    msg_box \"As you noticed your WAN IP and DNS record doesn't match. \\\nThis can happen when using DDNS for example, or in other edge cases.\nIf you feel brave, or are sure that everything is set up correctly, \\\nthen you can choose to skip this test in the next step.\n\nIf needed, you can always contact us for further support: \\\nhttps://shop.hanssonit.se/product/premium-support-per-30-minutes/\"\n        if ! yesno_box_no \"Do you feel brave and want to continue?\"\n        then\n            exit\n        fi\n    fi\n}\n\n# A function to set the systemd-resolved default DNS servers based on the\n# current Internet facing interface. This is needed for docker interfaces\n# that might not use the same DNS servers otherwise.\nset_systemd_resolved_dns() {\nlocal iface=\"$1\"\nlocal pattern=\"$iface(?:.|\\n)*?DNS Servers: ((?:[0-9a-f.: ]|\\n)*?)\\s*(?=\\n\\S|\\n.+: |$)\"\nlocal dnss\ndnss=$( systemd-resolve --status | perl -0777 -ne \"if ((\\$v) = (/$pattern/)) {\\$v=~s/(?:\\s|\\n)+/ /g;print \\\"\\$v\\n\\\";}\" )\nif [ -n \"$dnss\" ]\nthen\n    sed -i \"s/^#\\?DNS=.*$/DNS=${dnss}/\" /etc/systemd/resolved.conf\n    systemctl restart systemd-resolved &>/dev/null\n    sleep 1\nfi\n}\n\n# A function to fetch a file with curl to a directory\n# 1 = https://example.com\n# 2 = name of file\n# 3 = directory that the file should end up in\ncurl_to_dir() {\nif [ ! -d \"$3\" ]\nthen\n    mkdir -p \"$3\"\nfi\n    rm -f \"$3\"/\"$2\"\n    if [ -n \"$download_script_function_in_use\" ]\n    then\n        curl -sfL \"$1\"/\"$2\" -o \"$3\"/\"$2\"\n    else\n        local retries=0\n        while :\n        do\n            if [ \"$retries\" -ge 10 ]\n            then\n                if yesno_box_yes \"Tried 10 times but didn't succeed. We will now exit the script because it might break things. You can choose 'No' to continue on your own risk.\"\n                then\n                    exit 1\n                else\n                    return 1\n                fi\n            fi\n            if ! curl -sfL \"$1\"/\"$2\" -o \"$3\"/\"$2\"\n            then\n                msg_box \"We just tried to fetch '$1/$2', but it seems like the server for the download isn't reachable, or that a temporary error occurred. We will now try again.\nPlease report this issue to $ISSUES\"\n                retries=$((retries+1))\n                print_text_in_color \"$ICyan\" \"$retries of 10 retries.\"\n                countdown \"Trying again in 30 seconds...\" \"30\"\n            else\n                break\n            fi\n        done\n    fi\n}\n\nstart_if_stopped() {\nif ! pgrep \"$1\"\nthen\n    print_text_in_color \"$ICyan\" \"Starting $1...\"\n    systemctl start \"$1\".service\nfi\n}\n\n# Warn user that HTTP/2 will be disabled if installing app that use Apache2 PHP instead of PHP-FPM\n# E.g: http2_warn Modsecurity\nhttp2_warn() {\n    msg_box \"This VM has HTTP/2 enabled by default.\n\nIf you continue with installing $1, HTTP/2 will be disabled since it's not compatible with the mpm module used by $1.\n\nThis is what Apache will say in the error.log if you enable $1 anyway:\n'The mpm module (prefork.c) is not supported by mod_http2.\nThe mpm determines how things are processed in your server.\nHTTP/2 has more demands in this regard and the currently selected mpm will just not do.\nThis is an advisory warning. Your server will continue to work, but the HTTP/2 protocol will be inactive.'\"\n\nif ! yesno_box_yes \"Do you really want to enable $1 anyway?\"\nthen\n    exit 1\nfi\n}\n\ncalculate_php_fpm() {\n# Get current PHP version\ncheck_php\n\n# Minimum amount of max children (lower than this won't work with 2 GB RAM)\nmin_max_children=8\n# If start servers are lower than this then it's likely that there are room for max_spare_servers\nmin_start_servers=20\n# Maximum amount of children is only set if the min_start_servers value are met\nmin_max_spare_servers=35\n\n# Calculate the sum of the current values\nCURRENT_START=\"$(grep pm.start_servers \"$PHP_POOL_DIR\"/nextcloud.conf | awk '{ print $3}')\"\nCURRENT_MAX=\"$(grep pm.max_spare_servers \"$PHP_POOL_DIR\"/nextcloud.conf | awk '{ print $3}')\"\nCURRENT_MIN=\"$(grep pm.min_spare_servers \"$PHP_POOL_DIR\"/nextcloud.conf | awk '{ print $3}')\"\nCURRENT_SUM=\"$((CURRENT_START + CURRENT_MAX + CURRENT_MIN))\"\n\n# Calculate max_children depending on RAM\n# Tends to be between 30-50MB per children\naverage_php_memory_requirement=50\navailable_memory=$(awk '/MemAvailable/ {printf \"%d\", $2/1024}' /proc/meminfo)\nPHP_FPM_MAX_CHILDREN=$((available_memory/average_php_memory_requirement))\n\n# Lowest possible value is 8\nprint_text_in_color \"$ICyan\" \"Automatically configures pm.max_children for php-fpm...\"\nif [ $PHP_FPM_MAX_CHILDREN -lt $min_max_children ]\nthen\n    msg_box \"The current max_children value available to set is \\\n$PHP_FPM_MAX_CHILDREN, and PHP-FPM won't function properly with that value.\nThe minimum value is 8, and the value is calculated depening on how much available RAM you have left.\n\nThe absolute minimum amount of RAM required to run the VM is 2 GB, but we recommend 4 GB.\n\nYou now have two choices:\n1. Import this VM again, raise the amount of RAM with at least 1 GB, and run this script\n   in the same way as you just have.\n2. Import this VM again without raising the RAM, but don't install any of the following apps:\n   1) Collabora\n   2) OnlyOffice\n   3) Full Text Search\n\nThis script will now exit.\nThe installation was not successful, sorry for the inconvenience.\n\nIf you think this is a bug, please report it to $ISSUES\"\nexit 1\nelse\n    check_command sed -i \"s|pm.max_children.*|pm.max_children = $PHP_FPM_MAX_CHILDREN|g\" \"$PHP_POOL_DIR\"/nextcloud.conf\n    print_text_in_color \"$IGreen\" \"pm.max_children was set to $PHP_FPM_MAX_CHILDREN\"\n    # Check if the sum of all the current values are more than $PHP_FPM_MAX_CHILDREN and only continue it is\n    if [ $PHP_FPM_MAX_CHILDREN -gt $CURRENT_SUM ]\n    then\n        # Set pm.max_spare_servers\n        if [ $PHP_FPM_MAX_CHILDREN -ge $min_max_spare_servers ]\n        then\n            if [ \"$(grep pm.start_servers \"$PHP_POOL_DIR\"/nextcloud.conf | awk '{ print $3}')\" -lt $min_start_servers ]\n            then\n                check_command sed -i \"s|pm.max_spare_servers.*|pm.max_spare_servers = $((PHP_FPM_MAX_CHILDREN - 30))|g\" \"$PHP_POOL_DIR\"/nextcloud.conf\n                print_text_in_color \"$IGreen\" \"pm.max_spare_servers was set to $((PHP_FPM_MAX_CHILDREN - 30))\"\n            fi\n        fi\n    fi\nfi\n\n# If $PHP_FPM_MAX_CHILDREN is lower than the current sum of all values, revert to default settings\nif [ $PHP_FPM_MAX_CHILDREN -lt $CURRENT_SUM ]\nthen\n    check_command sed -i \"s|pm.max_children.*|pm.max_children = $PHP_FPM_MAX_CHILDREN|g\" \"$PHP_POOL_DIR\"/nextcloud.conf\n    check_command sed -i \"s|pm.start_servers.*|pm.start_servers = 3|g\" \"$PHP_POOL_DIR\"/nextcloud.conf\n    check_command sed -i \"s|pm.min_spare_servers.*|pm.min_spare_servers = 2|g\" \"$PHP_POOL_DIR\"/nextcloud.conf\n    check_command sed -i \"s|pm.max_spare_servers.*|pm.max_spare_servers = 3|g\" \"$PHP_POOL_DIR\"/nextcloud.conf\n    print_text_in_color \"$ICyan\" \"All PHP-INI values were set back to default values as the value for pm.max_children ($PHP_FPM_MAX_CHILDREN) was lower than the sum of all the current values ($CURRENT_SUM)\"\n    print_text_in_color \"$ICyan\" \"Please run this again to set optimal values\"\nfi\nrestart_webserver\n}\n\n# Compatibility with older VMs\ncalculate_max_children() {\n    calculate_php_fpm\n}\n\ntest_connection() {\nversion(){\n    local h t v\n\n    [[ $2 = \"$1\" || $2 = \"$3\" ]] && return 0\n\n    v=$(printf '%s\\n' \"$@\" | sort -V)\n    h=$(head -n1 <<<\"$v\")\n    t=$(tail -n1 <<<\"$v\")\n\n    [[ $2 != \"$h\" && $2 != \"$t\" ]]\n}\nif ! version 22.04 \"$DISTRO\" 24.04.10\nthen\n    print_text_in_color \"$IRed\" \"Your current Ubuntu version is $DISTRO but must be between \\\n22.04 - 24.04.10 to run this script.\"\n    print_text_in_color \"$ICyan\" \"Please contact us for support upgrading your server:\"\n    print_text_in_color \"$ICyan\" \"https://www.hanssonit.se/#contact\"\n    print_text_in_color \"$ICyan\" \"https://shop.hanssonit.se/\"\n    sleep 300\nfi\n\n# Install dnsutils if not existing\nif ! dpkg-query -W -f='${Status}' \"dnsutils\" | grep -q \"ok installed\"\nthen\n    apt-get update -q4 & spinner_loading && apt-get install dnsutils -y\nfi\n# Install net-tools if not existing\nif ! dpkg-query -W -f='${Status}' \"net-tools\" | grep -q \"ok installed\"\nthen\n    apt-get update -q4 & spinner_loading && apt-get install net-tools -y\nfi\n# After applying Netplan settings, try a DNS lookup.\n# Restart systemd-networkd if this fails and try again.\n# If this second check also fails, consider this a problem.\nprint_text_in_color \"$ICyan\" \"Checking connection...\"\nnetplan apply\nsleep 2\nif ! nslookup github.com\nthen\n    print_text_in_color \"$ICyan\" \"Trying to restart netplan service...\"\n    check_command systemctl restart systemd-networkd && sleep 2\n    if ! nslookup github.com\n    then\n        msg_box \"Network is NOT OK. You must have a working network connection to run this script.\nIf you think that this is a bug, please report it to https://github.com/nextcloud/vm/issues.\"\n        return 1\n    fi\nfi\nprint_text_in_color \"$IGreen\" \"Online!\"\nreturn 0\n}\n\n\n# Check that the script can see the external IP (apache fails otherwise), used e.g. in the adminer app script.\ncheck_external_ip() {\nif [ -z \"$WANIP4\" ]\nthen\n    print_text_in_color \"$IRed\" \"WANIP4 is an empty value, Apache will fail on reboot due to this. \\\nPlease check your network and try again.\"\n    sleep 3\n    exit 1\nfi\n}\n\n# Check if Nextcloud is installed with TLS\ncheck_nextcloud_https() {\nif ! nextcloud_occ_no_check config:system:get overwrite.cli.url | grep -q \"https\"\nthen\n    # Check if it's used by any of the Documentserver apps and adopt the message to that\n    if [ \"$1\" == 'Collabora (Docker)' ] || [ \"$1\" == 'OnlyOffice (Docker)' ]\n    then\n        ncdomain\n        if ! curl -s https://\"$NCDOMAIN\"/status.php | grep -q 'installed\":true'\n        then\n            msg_box \"Sorry, but Nextcloud needs to be run on HTTPS.\nYou can easily activate TLS (HTTPS) by running the Let's Encrypt script.\nMore info here: http://shortio.hanssonit.se/1EAgBmPyFc\n\nTo run this script again, just exectue 'sudo bash $SCRIPTS/menu.sh' and choose:\nAdditional Apps --> Documentserver --> $1.\"\n            exit\n        fi\n    else\n    # Adopt the error message to anything else but the Documentserver apps\n        ncdomain\n        if ! curl -s https://\"$NCDOMAIN\"/status.php | grep -q 'installed\":true'\n        then\n            msg_box \"Sorry, but Nextcloud needs to be run on HTTPS.\nYou can easily activate TLS (HTTPS) by running the Let's Encrypt script.\nMore info here: http://shortio.hanssonit.se/1EAgBmPyFc\n\nTo run this script again, just exectue 'sudo bash $SCRIPTS/menu.sh' and choose:\nAdditional Apps --> $1.\"\n            exit\n        fi\n    fi\nfi\n}\n\nrestart_webserver() {\n# https://github.com/nextcloud/vm/issues/2358\nsleep 2\nprint_text_in_color \"$ICyan\" \"Restarting Apache2 and PHP-FPM...\"\ncheck_command systemctl restart apache2.service\ncheck_php\nif is_this_installed php\"$PHPVER\"-fpm\nthen\n    check_command systemctl restart php\"$PHPVER\"-fpm.service\nfi\n\n}\n\n# Install certbot (Let's Encrypt)\ninstall_certbot() {\nif certbot --version >/dev/null 2>&1\nthen\n    # Reinstall certbot (use snap instead of package)\n    # https://askubuntu.com/a/1271565\n    if dpkg -l | grep certbot >/dev/null 2>&1\n    then\n        # certbot will be removed, but still listed, so we need to check if the snap is installed as well so that this doesn't run every time\n        if ! snap list certbot >/dev/null 2>&1\n        then\n            print_text_in_color \"$ICyan\" \"Reinstalling certbot (Let's Encrypt) as a snap instead...\"\n            apt-get remove certbot -y\n            apt-get autoremove -y\n            install_if_not snapd\n            snap install core\n            snap install certbot --classic\n            # Update $PATH in current session (login and logout is required otherwise)\n            check_command hash -r\n        fi\n    fi\nelse\n    print_text_in_color \"$ICyan\" \"Installing certbot (Let's Encrypt)...\"\n    install_if_not snapd\n    snap install certbot --classic\n    # Update $PATH in current session (login and logout is required otherwise)\n    check_command hash -r\nfi\n}\n\n# Generate certs and configure it automatically\n# https://certbot.eff.org/docs/using.html#certbot-command-line-options\ngenerate_cert() {\nuir_hsts=\"\"\nif [ -z \"$SUBDOMAIN\" ]\nthen\n    uir_hsts=\"--uir --hsts\"\nfi\na2dissite 000-default.conf\nsystemctl reload apache2.service\ndefault_le=\"--cert-name $1 --key-type ecdsa --renew-by-default --no-eff-email --agree-tos $uir_hsts --server https://acme-v02.api.letsencrypt.org/directory -d $1\"\n#http-01\nlocal  standalone=\"certbot certonly --standalone --pre-hook \\\"systemctl stop apache2.service\\\" --post-hook \\\"systemctl start apache2.service\\\" $default_le\"\n#tls-alpn-01\nlocal  tls_alpn_01=\"certbot certonly --preferred-challenges tls-alpn-01 $default_le\"\n#dns\nlocal  dns=\"certbot certonly --manual --preferred-challenges dns $default_le\"\nlocal  methods=(standalone dns)\n\nfor f in \"${methods[@]}\"\ndo\n    print_text_in_color \"${ICyan}\" \"Trying to generate certs and validate them with $f method.\"\n    current_method=\"\"\n    eval current_method=\"\\$$f\"\n    if eval \"$current_method\"\n    then\n        return 0\n    elif [ \"$f\" != \"${methods[$((${#methods[*]} - 1))]}\" ]\n    then\n        msg_box \"It seems like no certs were generated when trying \\\nto validate them with the $f method. We will retry.\"\n    else\n        msg_box \"It seems like no certs were generated when trying \\\nto validate them with the $f method. We have exhausted all the methods. Please check your DNS and try again.\"\n        return 1;\n    fi\ndone\n}\n\nis_desec_installed() {\n# Check if deSEC is installed and add the needed variables if yes\nif [ -f \"$SCRIPTS\"/deSEC/.dedynauth ]\nthen\n    if [ -f /etc/ddclient.conf ]\n    then\n        DEDYN_TOKEN=$(grep DEDYN_TOKEN \"$SCRIPTS\"/deSEC/.dedynauth | cut -d '=' -f2)\n        DEDYN_NAME=$(grep DEDYN_NAME \"$SCRIPTS\"/deSEC/.dedynauth | cut -d '=' -f2)\n        return 0\n    fi\nelse\n        msg_box \"It seems like deSEC isn't configured on this server.\nPlease run 'sudo bash $SCRIPTS/menu.sh --> Server Configuration --> deSEC' to configure it.\"\n        return 1\nfi\n}\n\ngenerate_desec_cert() {\n# Check if the hook is in place\nif [ ! -f \"$SCRIPTS\"/deSEC/hook.sh ]\nthen\n    msg_box \"Sorry, but it seems like the needed hook for this to work is missing.\n\nNo TLS will be generated. Please report this to $ISSUES.\"\n    exit 1\nfi\n\nprint_text_in_color \"$ICyan\" \"Generating new TLS cert with DNS and deSEC, please don't abort the hook, it may take a while...\"\n# Renew with DNS by default\nif certbot certonly --manual --text --key-type ecdsa --renew-by-default --server https://acme-v02.api.letsencrypt.org/directory --no-eff-email --agree-tos --preferred-challenges dns --manual-auth-hook \"$SCRIPTS\"/deSEC/hook.sh --manual-cleanup-hook \"$SCRIPTS\"/deSEC/hook.sh -d \"$1\"\nthen\n    # Generate DHparams cipher\n    if [ ! -f \"$DHPARAMS_TLS\" ]\n    then\n        openssl dhparam -out \"$DHPARAMS_TLS\" 2048\n    fi\n    # Choose which port for public access\n    msg_box \"You will now be able to choose which port you want to put your Nextcloud on for public access.\\n\nThe default port is 443 for HTTPS and if you don't change port, that's the port we will use.\\n\nPlease keep in mind NOT to use the following ports as they are likely in use already:\n${NONO_PORTS[*]}\"\n    if yesno_box_no \"Do you want to change the default HTTPS port (443) to something else?\"\n    then\n        # Ask for port\n        while :\n        do\n            DEDYNPORT=$(input_box_flow \"Please choose which port you want between 1024 - 49151.\\n\\nPlease remember to open this port in your firewall.\")\n            if ((\"$DEDYNPORT\" >= 1024 && \"$DEDYNPORT\" <= 49151))\n            then\n                if check_nono_ports \"$DEDYNPORT\"\n                then\n                    print_text_in_color \"$ICyan\" \"Changing to port $DEDYNPORT for public access...\"\n                    # Main port\n                    if ! grep -q \"Listen $DEDYNPORT\" /etc/apache2/ports.conf\n                    then\n                        echo \"Listen $DEDYNPORT\" >> /etc/apache2/ports.conf\n                        restart_webserver\n                    fi\n                    break\n                fi\n            else\n                msg_box \"The port number needs to be between 1024 - 49151, please try again.\"\n            fi\n        done\n    fi\nfi\n}\n\n# Last message depending on with script that is being run when using the generate_cert() function\nlast_fail_tls() {\n    msg_box \"All methods failed. :/\n\nYou can run the script again by executing: sudo bash $SCRIPTS/menu.sh\nPlease try to run it again some other time with other settings.\n\nThere are different configs you can try in Let's Encrypt's user guide:\nhttps://letsencrypt.readthedocs.org/en/latest/index.html\nPlease check the guide for further information on how to enable TLS.\n\nThis script is developed on GitHub, feel free to contribute:\nhttps://github.com/nextcloud/vm\"\n\nif [ -n \"$2\" ]\nthen\n    msg_box \"The script will now do some cleanup and revert the settings.\"\n    # Cleanup\n    snap remove certbot\n    rm -f \"$SCRIPTS\"/test-new-config.sh\nfi\n\n# Restart webserver services\nrestart_webserver\n}\n\n# Use like this: open_port 443 TCP\n# or e.g. open_port 3478 UDP\nopen_port() {\n    install_if_not miniupnpc\n    print_text_in_color \"$ICyan\" \"Trying to open port $1 automatically...\"\n    if ! upnpc -a \"$ADDRESS\" \"$1\" \"$1\" \"$2\" &>/dev/null\n    then\n        msg_box \"Failed to open port $1 $2 automatically. You have to do this manually.\"\n        FAIL=1\n    fi\n}\n\ncleanup_open_port() {\n    if [ -n \"$FAIL\" ]\n    then\n        apt-get purge miniupnpc -y\n        apt-get autoremove -y\n    fi\n}\n\n# Check if port is open # check_open_port 443 domain.example.com\ncheck_open_port() {\nprint_text_in_color \"$ICyan\" \"Checking if port ${1} is open...\"\ninstall_if_not curl\n# WAN Address\nif check_command curl -s -H 'Cache-Control: no-cache' -H 'Referer: https://www.networkappers.com/tools/open-port-checker' \"https://networkappers.com/api/port.php?ip=${WANIP4}&port=${1}\" | grep -q \"open\"\nthen\n    print_text_in_color \"$IGreen\" \"Port ${1} is open on ${WANIP4}!\"\nelif check_command curl -s -H 'Cache-Control: no-cache' -H 'Referer: https://please-do-not-be-so-greedy-with-resources.now' 'https://ports.yougetsignal.com/check-port.php' --data \"remoteAddress=${WANIP4}&portNumber=${1}\" | grep -q \"open\"\nthen\n    print_text_in_color \"$IGreen\" \"Port ${1} is open on ${WANIP4}!\"\n# Domain name\nelif check_command curl -s -H 'Cache-Control: no-cache' -H 'Referer: https://www.networkappers.com/tools/open-port-checker' \"https://www.networkappers.com/api/port.php?ip=${2}&port=${1}\" | grep -q \"open\"\nthen\n    print_text_in_color \"$IGreen\" \"Port ${1} is open on ${2}!\"\nelif check_command curl -s -H 'Cache-Control: no-cache' -H 'Referer: https://please-do-not-be-so-greedy-with-resources.now' 'https://ports.yougetsignal.com/check-port.php' --data \"remoteAddress=${2}&portNumber=${1}\" | grep -q \"open\"\nthen\n    print_text_in_color \"$IGreen\" \"Port ${1} is open on ${2}!\"\nelse\n    msg_box \"It seems like the port ${1} is closed. This could happened when your\nISP has blocked the port, or the port isn't open.\n\nIf you are 100% sure the port ${1} is open, you can choose to\ncontinue. There are no guarantees that it will work though,\nsince the service depends on port ${1} being open and\naccessible from outside your network.\"\n    if ! yesno_box_no \"Are you 100% sure the port ${1} is open?\"\n    then\n        msg_box \"Port $1 is not open on either ${WANIP4} or ${2}.\n\nPlease follow this guide to open ports in your router or firewall:\\nhttps://www.techandme.se/open-port-80-443/\"\n        any_key \"Press any key to exit...\"\n        exit 1\n    fi\nfi\n}\n\n# $1=domain/ip-address\nadd_to_trusted_domains() {\n    local element=\"$1\"\n    local count=0\n    print_text_in_color \"$ICyan\" \"Adding $element to trusted domains...\"\n    while [ \"$count\" -le 10 ]\n    do\n        if [ \"$(nextcloud_occ_no_check config:system:get trusted_domains \"$count\")\" = \"$element\" ]\n        then\n            break\n        elif [ -z \"$(nextcloud_occ_no_check config:system:get trusted_domains \"$count\")\" ]\n        then\n            nextcloud_occ_no_check config:system:set trusted_domains \"$count\" --value=\"$element\"\n            break\n        else\n            count=$((count+1))\n        fi\n    done\n}\n\n# $1=domain/ip-address\nremove_from_trusted_domains() {\n    local element=\"$1\"\n    local count=0\n    print_text_in_color \"$ICyan\" \"Removing $element from trusted domains...\"\n    while [ \"$count\" -lt 10 ]\n    do\n        if [ \"$(nextcloud_occ_no_check config:system:get trusted_domains \"$count\")\" = \"$element\" ]\n        then\n            nextcloud_occ_no_check config:system:delete trusted_domains \"$count\"\n            break\n        else\n            count=$((count+1))\n        fi\n    done\n}\n\ncheck_distro_version() {\n# Support Ubuntu 22.04 jammy, and Ubuntu 24.04 noble.\n\n# Check Ubuntu version\nif [ \"${CODENAME}\" == \"jammy\" ] || [ \"${CODENAME}\" == \"noble\" ]\nthen\n    OS=1\nelif lsb_release -i | grep -ic \"Ubuntu\" &> /dev/null\nthen\n    OS=1\nelif uname -a | grep -ic \"jammy\" &> /dev/null || uname -a | grep -ic \"noble\" &> /dev/null\nthen\n    OS=1\nelif uname -v | grep -ic \"Ubuntu\" &> /dev/null\nthen\n    OS=1\nfi\n\nif [ \"$OS\" != 1 ]\nthen\n    msg_box \"Ubuntu Server is required to run this script.\nPlease install that distro and try again.\n\nYou can find the download link here: https://www.ubuntu.com/download/server\"\n    exit 1\nfi\n\nif ! version 22.04 \"$DISTRO\" 24.04.10; then\n    msg_box \"Your current Ubuntu version is $DISTRO but must be between 22.04 - 24.04.10 to run this script.\"\n    msg_box \"Please contact us to get support for upgrading your server:\nhttps://www.hanssonit.se/#contact\nhttps://shop.hanssonit.se/product/upgrade-ubuntu-os-between-major-versions/\"\n    exit 1\nfi\n}\n\n# Check if program is installed (stop_if_installed apache2)\nstop_if_installed() {\nif [ \"$(dpkg-query -W -f='${Status}' \"${1}\" 2>/dev/null | grep -c \"ok installed\")\" = \"1\" ]\nthen\n    print_text_in_color \"$IRed\" \"${1} is installed, it must be a clean server.\"\n    exit 1\nfi\n}\n\n# Check if program is installed (is_this_installed apache2)\nis_this_installed() {\nif dpkg-query -W -f='${Status}' \"${1}\" | grep -q \"ok installed\"\nthen\n    return 0\nelse\n    return 1\nfi\n}\n\n# Install_if_not program\ninstall_if_not() {\nif ! dpkg-query -W -f='${Status}' \"${1}\" | grep -q \"ok installed\"\nthen\n    # https://askubuntu.com/questions/1235914/hash-sum-mismatch-error-due-to-identical-sha1-and-md5-but-different-sha256#1242739\n    #if ! -f /etc/gcrypt/hwf.deny ]\n    #then\n    #    mkdir -p /etc/gcrypt\n    #    echo all > /etc/gcrypt/hwf.deny\n    #fi\n    apt-get update -q4 & spinner_loading && RUNLEVEL=1 apt-get install \"${1}\" -y\nfi\n}\n\n# Test RAM size\n# Call it like this: ram_check [amount of min RAM in GB] [for which program]\n# Example: ram_check 2 Nextcloud\nram_check() {\ninstall_if_not bc\n# First, we need to check locales, since the functino depends on it.\n# When we know the locale, we can then calculate mem available without any errors.\nif locale | grep -c \"C.UTF-8\"\nthen\n    mem_available=\"$(awk '/MemTotal/{print $2}' /proc/meminfo)\"\n    mem_available_gb=\"$(LC_NUMERIC=\"C.UTF-8\" printf '%0.2f\\n' \"$(echo \"scale=3; $mem_available/(1024*1024)\" | bc)\")\"\nelif locale | grep -c \"en_US.UTF-8\"\nthen\n    mem_available=\"$(awk '/MemTotal/{print $2}' /proc/meminfo)\"\n    mem_available_gb=\"$(LC_NUMERIC=\"en_US.UTF-8\" printf '%0.2f\\n' \"$(echo \"scale=3; $mem_available/(1024*1024)\" | bc)\")\"\nfi\n\n# Now check required mem\nmem_required=\"$((${1}*(924*1024)))\" # 100MiB/GiB margin and allow 90% to be able to run on physical machines\nif [ \"${mem_available}\" -lt \"${mem_required}\" ]\nthen\n    print_text_in_color \"$IRed\" \"Error: ${1} GB RAM required to install ${2}!\" >&2\n    print_text_in_color \"$IRed\" \"Current RAM is: ($mem_available_gb GB)\" >&2\n    sleep 3\n    msg_box \"** Error: insufficient memory. ${mem_available_gb}GB RAM installed, ${1}GB required.\"\n    exit 1\nelse\n    print_text_in_color \"$IGreen\" \"RAM for ${2} OK! ($mem_available_gb GB)\"\nfi\n}\n\n# Test number of CPU\n# Call it like this: cpu_check [amount of min CPU] [for which program]\n# Example: cpu_check 2 Nextcloud\ncpu_check() {\nnr_cpu=\"$(nproc)\"\nif [ \"${nr_cpu}\" -lt \"${1}\" ]\nthen\n    print_text_in_color \"$IRed\" \"Error: ${1} CPU required to install ${2}!\" >&2\n    print_text_in_color \"$IRed\" \"Current CPU: ($((nr_cpu)))\" >&2\n    sleep 3\n    exit 1\nelse\n    print_text_in_color \"$IGreen\" \"CPU for ${2} OK! ($((nr_cpu)))\"\nfi\n}\n\ncheck_command() {\nif ! \"$@\";\nthen\n    print_text_in_color \"$ICyan\" \"Sorry but something went wrong. Please report \\\nthis issue to $ISSUES and include the output of the error message. Thank you!\"\n    print_text_in_color \"$IRed\" \"$* failed\"\n    if nextcloud_occ_no_check -V > /dev/null\n    then\n        notify_admin_gui \\\n        \"Sorry but something went wrong. Please report this issue to \\\n$ISSUES and include the output of the error message. Thank you!\" \\\n        \"$* failed\"\n    fi\n    exit 1\nfi\n}\n\n\n# Example: nextcloud_occ_no_check 'maintenance:mode --on'\nnextcloud_occ() {\n# Check it maintenance:mode is enabled\nif sudo -u www-data php \"$NCPATH\"/occ maintenance:mode | grep -q enabled >/dev/null 2>&1\nthen\n    # Disable maintenance:mode\n    sudo -u www-data php \"$NCPATH\"/occ maintenance:mode --off >/dev/null 2>&1\n    # Run the actual command\n    check_command sudo -u www-data php \"$NCPATH\"/occ \"$@\";\n    # Enable maintenance:mode again\n    sudo -u www-data php \"$NCPATH\"/occ maintenance:mode --on >/dev/null 2>&1\nelse\n    check_command sudo -u www-data php \"$NCPATH\"/occ \"$@\";\nfi\n}\n\n# Example: nextcloud_occ_no_check 'maintenance:mode --on'\nnextcloud_occ_no_check() {\n# Check it maintenance:mode is enabled\nif sudo -u www-data php \"$NCPATH\"/occ maintenance:mode | grep -q enabled >/dev/null 2>&1\nthen\n    # Disable maintenance:mode\n    sudo -u www-data php \"$NCPATH\"/occ maintenance:mode --off >/dev/null 2>&1\n    # Run the actual command\n    sudo -u www-data php \"$NCPATH\"/occ \"$@\";\n    # Enable maintenance:mode again\n    sudo -u www-data php \"$NCPATH\"/occ maintenance:mode --on >/dev/null 2>&1\nelse\n    sudo -u www-data php \"$NCPATH\"/occ \"$@\";\nfi\n}\n\n# Backwards compatibility (2020-10-08)\nocc_command() {\nnextcloud_occ \"$@\";\n}\n\nocc_command_no_check() {\nnextcloud_occ_no_check \"$@\";\n}\n\nnetwork_ok() {\nversion(){\n    local h t v\n\n    [[ $2 = \"$1\" || $2 = \"$3\" ]] && return 0\n\n    v=$(printf '%s\\n' \"$@\" | sort -V)\n    h=$(head -n1 <<<\"$v\")\n    t=$(tail -n1 <<<\"$v\")\n\n    [[ $2 != \"$h\" && $2 != \"$t\" ]]\n}\nif version 22.04 \"$DISTRO\" 24.04.10\nthen\n    print_text_in_color \"$ICyan\" \"Testing if network is OK...\"\n    if site_200 github.com\n    then\n        return\n    fi\n    if ! netplan apply\n    then\n        systemctl restart systemd-networkd > /dev/null\n    fi\n    # Check the connention\n    countdown 'Waiting for network to restart...' 3\n    if ! site_200 github.com\n    then\n        # sleep 10 seconds so that some slow networks have time to restart\n        countdown 'Not online yet, waiting a bit more...' 10\n        if ! site_200 github.com\n        then\n            # sleep 30 seconds so that some REALLY slow networks have time to restart\n            countdown 'Not online yet, waiting a bit more (final attempt)...' 30\n            site_200 github.com\n        fi\n    fi\nelse\n    msg_box \"Your current Ubuntu version is $DISTRO but must be between 22.04 - 24.04.10 to run this script.\"\n    msg_box \"Please contact us to get support for upgrading your server:\nhttps://www.hanssonit.se/#contact\nhttps://shop.hanssonit.se/\"\n    msg_box \"We will now pause for 60 seconds. Please press CTRL+C when prompted to do so.\"\n    countdown \"Please press CTRL+C to abort...\" 60\nfi\n}\n\n# Whiptail auto-size\ncalc_wt_size() {\n    WT_HEIGHT=17\n    WT_WIDTH=$(tput cols)\n\n    if [ -z \"$WT_WIDTH\" ] || [ \"$WT_WIDTH\" -lt 60 ]; then\n        WT_WIDTH=80\n    fi\n    if [ \"$WT_WIDTH\" -gt 178 ]; then\n        WT_WIDTH=120\n    fi\n    WT_MENU_HEIGHT=$((WT_HEIGHT-7))\n    export WT_MENU_HEIGHT\n}\n\n# example: is_app_enabled documentserver_community\nis_app_enabled() {\nif nextcloud_occ app:list | sed '/Disabled/,$d' | awk '{print$2}' | tr -d ':' | sed '/^$/d' | grep -q \"^$1$\"\nthen\n    return 0\nelse\n    return 1\nfi\n}\n\n#example: is_app_installed documentserver_community\nis_app_installed() {\nif nextcloud_occ app:list | grep -wq \"$1\"\nthen\n    return 0\nelse\n    return 1\nfi\n}\n\ninstall_and_enable_app() {\n# Download and install $1\nif ! is_app_installed \"$1\"\nthen\n    print_text_in_color \"$ICyan\" \"Installing $1...\"\n    # nextcloud_occ not possible here because it uses check_command and will exit if nextcloud_occ fails\n    installcmd=\"$(nextcloud_occ_no_check app:install \"$1\")\"\n    if grep 'dependencies are not fulfilled' <<< \"$installcmd\"\n    then\n    msg_box \"The $1 app could not be installed.\nIt's probably not compatible with $(nextcloud_occ -V).\n\nYou can try to install the app manually after the script has finished,\nor when a new version of the app is released with the following command:\n\n'sudo -u www-data php ${NCPATH}/occ app:install $1'\"\n    rm -Rf \"$NCPATH/apps/$1\"\n    else\n        # Enable $1 if it's installed but not enabled\n        if is_app_installed \"$1\"\n        then\n            if ! is_app_enabled \"$1\"\n            then\n                nextcloud_occ_no_check app:enable \"$1\"\n                chown -R www-data:www-data \"$NC_APPS_PATH\"\n            fi\n        fi\n    fi\nelse\n    print_text_in_color \"$ICyan\" \"It seems like $1 is installed already, trying to enable it...\"\n    nextcloud_occ_no_check app:enable \"$1\"\nfi\n}\n\ndownload_verify_nextcloud_stable() {\n# Check the current Nextcloud version\nwhile [ -z \"$NCVERSION\" ]\ndo\n    print_text_in_color \"$ICyan\" \"Fetching the latest Nextcloud version...\"\n    NCVERSION=$(curl -s -m 900 $NCREPO/ | sed --silent 's/.*href=\"nextcloud-\\([^\"]\\+\\).zip.asc\".*/\\1/p' | sort --version-sort | tail -1)\n    STABLEVERSION=\"nextcloud-$NCVERSION\"\n    print_text_in_color \"$IGreen\" \"$NCVERSION\"\ndone\n\n# Download the file\nrm -f \"$HTML/$STABLEVERSION.tar.bz2\"\ncd $HTML\nprint_text_in_color \"$ICyan\" \"Downloading $STABLEVERSION...\"\nif network_ok\nthen\n    curl -fSLO --retry 3 \"$NCREPO\"/\"$STABLEVERSION\".tar.bz2\nelse\n    msg_box \"There seems to be an issue with your network, please try again later.\\nThis script will now exit.\"\n    exit 1\nfi\n# Checksum of the downloaded file\nprint_text_in_color \"$ICyan\" \"Checking SHA256 checksum...\"\nmkdir -p \"$SHA256_DIR\"\ncurl_to_dir \"$NCREPO\" \"$STABLEVERSION.tar.bz2.sha256\" \"$SHA256_DIR\"\nSHA256SUM=\"$(tail \"$SHA256_DIR\"/\"$STABLEVERSION\".tar.bz2.sha256 | awk '{print$1}' | head -1)\"\nif ! echo \"$SHA256SUM\" \"$STABLEVERSION.tar.bz2\" | sha256sum -c\nthen\n    msg_box \"The SHA256 checksums of $STABLEVERSION.tar.bz2 didn't match, please try again.\"\n    exit 1\nfi\n# integrity of the downloaded file\nprint_text_in_color \"$ICyan\" \"Checking GPG integrity...\"\ninstall_if_not gnupg\nmkdir -p \"$GPGDIR\"\ncurl_to_dir \"$NCREPO\" \"$STABLEVERSION.tar.bz2.asc\" \"$GPGDIR\"\nchmod -R 600 \"$GPGDIR\"\ngpg --keyserver hkp://keyserver.ubuntu.com --recv-keys \"$OpenPGP_fingerprint\"\ngpg --verify \"$GPGDIR/$STABLEVERSION.tar.bz2.asc\" \"$HTML/$STABLEVERSION.tar.bz2\"\nrm -r \"$SHA256_DIR\"\nrm -r \"$GPGDIR\"\nrm -f releases\n}\n\n# call like: download_script folder_variable name_of_script\n# e.g. download_script MENU additional_apps\n# Use it for functions like download_static_script\ndownload_script() {\n    download_script_function_in_use=yes\n    rm -f \"${SCRIPTS}/${2}.sh\" \"${SCRIPTS}/${2}.php\" \"${SCRIPTS}/${2}.py\"\n    if ! { curl_to_dir \"${!1}\" \"${2}.sh\" \"$SCRIPTS\" || curl_to_dir \"${!1}\" \"${2}.php\" \"$SCRIPTS\" || curl_to_dir \"${!1}\" \"${2}.py\" \"$SCRIPTS\"; }\n    then\n        print_text_in_color \"$IRed\" \"Downloading ${2} failed\"\n        sleep 2\n        msg_box \"Script failed to download. Please run: \\\n'sudo curl -sLO ${!1}/${2}.sh|php|py' and try again.\n\nIf it still fails, please report this issue to: $ISSUES.\"\n        exit 1\n    fi\n}\n\n# call like: run_script folder_variable name_of_script\n# e.g. run_script MENU additional_apps\n# Use it for functions like run_script STATIC\nrun_script() {\n    rm -f \"${SCRIPTS}/${2}.sh\" \"${SCRIPTS}/${2}.php\" \"${SCRIPTS}/${2}.py\"\n    if download_script \"${1}\" \"${2}\"\n    then\n        if [ -f \"${SCRIPTS}/${2}\".sh ]\n        then\n            bash \"${SCRIPTS}/${2}.sh\"\n            rm -f \"${SCRIPTS}/${2}.sh\"\n        elif [ -f \"${SCRIPTS}/${2}\".php ]\n        then\n            php \"${SCRIPTS}/${2}.php\"\n            rm -f \"${SCRIPTS}/${2}.php\"\n        elif [ -f \"${SCRIPTS}/${2}\".py ]\n        then\n            install_if_not python3\n            python3 \"${SCRIPTS}/${2}.py\"\n            rm -f \"${SCRIPTS}/${2}.py\"\n        fi\n    else\n        print_text_in_color \"$IRed\" \"Running ${2} failed\"\n        sleep 2\n        msg_box \"Script failed to execute. Please run: \\\n'sudo curl -sLO ${!1}/${2}.sh|php|py' and try again.\n\nIf it still fails, please report this issue to: $ISSUES.\"\n        exit 1\n    fi\n}\n\n# Run any script in ../main\n# call like: run_main_script name_of_script\nrun_main_script() {\nrun_script GITHUB_REPO \"${1}\"\n}\n\n# Backwards compatibility (2020-10-25) Needed for update.sh to run in all VMs, even those several years old\nrun_static_script() {\nrun_script STATIC \"${1}\"\n}\n\nversion(){\n    local h t v\n\n    [[ $2 = \"$1\" || $2 = \"$3\" ]] && return 0\n\n    v=$(printf '%s\\n' \"$@\" | sort -V)\n    h=$(head -n1 <<<\"$v\")\n    t=$(tail -n1 <<<\"$v\")\n\n    [[ $2 != \"$h\" && $2 != \"$t\" ]]\n}\n\nversion_gt() {\n    local v1 v2 IFS=.\n    read -ra v1 <<< \"$1\"\n    read -ra v2 <<< \"$2\"\n    printf -v v1 %03d \"${v1[@]}\"\n    printf -v v2 %03d \"${v2[@]}\"\n    [[ $v1 > $v2 ]]\n}\n\nspinner_loading() {\n    printf '['\n    while ps \"$!\" > /dev/null; do\n        echo -n '⣾⣽⣻'\n        sleep '.7'\n    done\n    echo ']'\n}\n\nany_key() {\n    local PROMPT=\"$1\"\n    read -r -sn 1 -p \"$(printf \"%b\" \"${IGreen}${PROMPT}${Color_Off}\")\";echo\n}\n\nlowest_compatible_nc() {\n# .ocdata needs to exist to be able to check version, occ relies on everytihgn working\nuntil [ -f \"$NCDATA\"/.ocdata ] || [ -f \"$NCDATA\"/.ncdata ]\ndo\n        # SUPPORT LEGACY: If it's not in the standard path, check for existing datadir in config.php\n        if [ -f \"$NCPATH\"/config/config.php ]\n        then\n            NCDATA=\"$(grep 'datadir' \"${NCPATH}\"/config/config.php | awk '{print $3}' | cut -d \"'\" -f2)\"\n            # Check if ncdata is set, else fetch value from lib again (maybe happens during installation)\n            if [ -z \"${NCDATA}\" ]\n            then\n                msg_box \"You are not using the default path for your datadir, and we can't find it in your config.php, so you can't run this script.\nIf you think this is a bug, please report it to $ISSUES\"\n            else\n                # Check again an break if found\n                if [ -f \"$NCDATA\"/.ocdata ] || [ -f \"$NCDATA\"/.ncdata ] \n                then\n                    break\n                fi\n            fi\n        fi\n        msg_box \"Your .ocdata are missing in the Nextcloud data folder. This probably means that you failed to mount the second drive, or that it failed to import during boot of the system.\nWe can't continue without it, so please shutdown the machine and double check that the second disk is correctly mounted in your hypervisor/server then try again.\n\nIf you need support, feel free to contact us here: https://www.hanssonit.se/#contact\"\n        exit 1\ndone\n\n# Check version\nif [ -z \"$NCVERSION\" ]\nthen\n    nc_update\nfi\nif [ \"${CURRENTVERSION%%.*}\" -lt \"$1\" ]\nthen\n    msg_box \"This script is developed to work with Nextcloud $1 and later.\nThis means we can't use our own script for now. But don't worry,\nwe automated the update process and we will now use Nextcloud's updater instead.\n\nPress [OK] to continue the update, or press [CTRL+C] to abort.\n\nIf you are using Nextcloud $1 and later and still see this message,\nor experience other issues then please report this to $ISSUES\"\n\n    # Download the latest updater\n#    cd $NCPATH\n#    curl sLO https://github.com/nextcloud/updater/archive/main.zip\n#    install_if_not unzip\n#    unzip -q master.zip\n#    rm master.zip*\n#    rm updater/ -R\n#    mv updater-master/ updater/\n#    download_script STATIC setup_secure_permissions_nextcloud -P $SCRIPTS\n#    bash $SECURE\n#    cd\n\n    # Do the upgrade\n    chown -R www-data:www-data \"$NCPATH\"\n    rm -rf \"$NCPATH\"/assets\n    yes | sudo -u www-data php /var/www/nextcloud/updater/updater.phar\n    download_script STATIC setup_secure_permissions_nextcloud -P \"$SCRIPTS\"\n    bash \"$SECURE\"\n    nextcloud_occ maintenance:mode --off\nfi\n\n# Check new version\n# shellcheck source=lib.sh\nsource /var/scripts/fetch_lib.sh\nnc_update\nif [ \"${CURRENTVERSION%%.*}\" -ge \"$1\" ]\nthen\n    sleep 1\nelse\n    msg_box \"Your current version is still not compatible with the version required to run this script.\n\nTo upgrade between major versions, please check this out:\nhttps://shop.hanssonit.se/product/upgrade-between-major-owncloud-nextcloud-versions/\"\n    nextcloud_occ -V\n    exit\nfi\n}\n\n# Check universe repository\ncheck_universe() {\nUNIV=$(apt-cache policy | grep http | awk '{print $3}' | grep universe | head -n 1 | cut -d \"/\" -f 2)\nif [ \"$UNIV\" != \"universe\" ]\nthen\n    print_text_in_color \"$ICyan\" \"Adding required repo (universe).\"\n    add-apt-repository universe\nfi\n}\n\n# Check universe repository\ncheck_multiverse() {\nif [ \"$(apt-cache policy | grep http | awk '{print $3}' | grep multiverse | head -n 1 | cut -d \"/\" -f 2)\" != \"multiverse\" ]\nthen\n    print_text_in_color \"$ICyan\" \"Adding required repo (multiverse).\"\n    yes | add-apt-repository multiverse\nfi\n}\n\nset_max_count() {\nif grep -F 'vm.max_map_count=512000' /etc/sysctl.conf ; then\n    print_text_in_color \"$ICyan\" \"Max map count already set, skipping...\"\nelse\n    sysctl -w vm.max_map_count=512000\n    {\n        echo \"###################################################################\"\n        echo \"# Docker ES max virtual memory\"\n        echo \"vm.max_map_count=512000\"\n    } >> /etc/sysctl.conf\nfi\n}\n\nremove_collabora_docker() {\n    # Check if Collabora is previously installed\n    # If yes, then stop and prune the docker container\n    docker_prune_this 'collabora/code'\n    # Revoke LE\n    SUBDOMAIN=$(input_box_flow \"Please enter the subdomain you are using for Collabora, e.g: office.yourdomain.com\")\n    if [ -f \"$CERTFILES/$SUBDOMAIN/cert.pem\" ]\n    then\n        yes no | certbot revoke --cert-path \"$CERTFILES/$SUBDOMAIN/cert.pem\"\n        REMOVE_OLD=\"$(find \"$LETSENCRYPTPATH/\" -name \"$SUBDOMAIN*\")\"\n        for remove in $REMOVE_OLD\n            do rm -rf \"$remove\"\n        done\n    fi\n    # Remove Apache2 config\n    if [ -f \"$SITES_AVAILABLE/$SUBDOMAIN.conf\" ]\n    then\n        a2dissite \"$SUBDOMAIN\".conf\n        restart_webserver\n        rm -f \"$SITES_AVAILABLE/$SUBDOMAIN.conf\"\n    fi\n    # Disable RichDocuments (Collabora App) if activated\n    if is_app_installed richdocuments\n    then\n        nextcloud_occ app:remove richdocuments\n    fi\n    # Remove trusted domain\n    remove_from_trusted_domains \"$SUBDOMAIN\"\n}\n\nremove_onlyoffice_docker() {\n    # Check if Onlyoffice is previously installed\n    # If yes, then stop and prune the docker container\n    docker_prune_this 'onlyoffice/documentserver'\n    # Revoke LE\n    SUBDOMAIN=$(input_box_flow \"Please enter the subdomain you are using for OnlyOffice, e.g: office.yourdomain.com\")\n    if [ -f \"$CERTFILES/$SUBDOMAIN/cert.pem\" ]\n    then\n        yes no | certbot revoke --cert-path \"$CERTFILES/$SUBDOMAIN/cert.pem\"\n        REMOVE_OLD=\"$(find \"$LETSENCRYPTPATH/\" -name \"$SUBDOMAIN*\")\"\n        for remove in $REMOVE_OLD\n            do rm -rf \"$remove\"\n        done\n    fi\n    # Remove Apache2 config\n    if [ -f \"$SITES_AVAILABLE/$SUBDOMAIN.conf\" ]\n    then\n        a2dissite \"$SUBDOMAIN\".conf\n        restart_webserver\n        rm -f \"$SITES_AVAILABLE/$SUBDOMAIN.conf\"\n    fi\n    # Disable onlyoffice if activated\n    if is_app_installed onlyoffice\n    then\n        nextcloud_occ app:remove onlyoffice\n    fi\n    # Remove trusted domain\n    remove_from_trusted_domains \"$SUBDOMAIN\"\n}\n\n# Remove all office apps\nremove_all_office_apps() {\n    # remove OnlyOffice-documentserver if installed\n    if is_app_installed documentserver_community\n    then\n        nextcloud_occ app:remove documentserver_community\n    fi\n\n    # Disable OnlyOffice App if installed\n    if is_app_installed onlyoffice\n    then\n        nextcloud_occ app:remove onlyoffice\n    fi\n\n    # remove richdocumentscode-documentserver if installed\n    if is_app_installed richdocumentscode\n    then\n        nextcloud_occ app:remove richdocumentscode\n    fi\n\n    # Disable RichDocuments (Collabora App) if installed\n    if is_app_installed richdocuments\n    then\n        nextcloud_occ app:remove richdocuments\n    fi\n}\n\n# Check if docker is installed\nis_docker_running() {\n    docker ps -a > /dev/null 2>&1\n}\n\n# Check if specific docker image is present\nis_image_present() {\n    [[ $(docker images -q \"$1\") ]]\n}\n\n# Check if old docker exists\n# FULL NAME e.g. ark74/nc_fts or containrrr/watchtower or collabora/code or 'nextcloud/aio-imaginary'\ndoes_this_docker_exist() {\nis_docker_running && is_image_present \"$1\";\n}\n\ninstall_docker() {\nif ! is_docker_running\nthen\n    is_process_running dpkg\n    is_process_running apt\n    print_text_in_color \"$ICyan\" \"Installing Docker CE...\"\n    apt-get update -q4 & spinner_loading\n    install_if_not curl\n    curl -fsSL https://get.docker.com | sh\nfi\n\n# Set overlay2\nif ! [ -f /etc/docker/daemon.json ] || ! grep -q '\"storage-driver\": \"overlay2\"' /etc/docker/daemon.json\nthen\n    cat << OVERLAY2 > /etc/docker/daemon.json\n{\n  \"storage-driver\": \"overlay2\"\n}\nOVERLAY2\n\n    # Only restart if changed\n    systemctl daemon-reload\n    systemctl restart docker.service\nfi\n}\n\n# Remove all dockers excluding one\n# docker_prune_except_this fts_esror 'Full Text Search'\ndocker_prune_except_this() {\nprint_text_in_color \"$ICyan\" \"Checking if there are any old images and removing them...\"\nDOCKERPS=$(docker ps -a | grep -v \"$1\" | awk 'NR>1 {print $1}')\nif [ \"$DOCKERPS\" != \"\" ]\nthen\n    if yesno_box_yes \"Do you want to remove old Docker instance(s)... ($DOCKERPS)? Please note that we will not remove $1 ($2).\"\n    then\n        docker stop \"$(docker ps -a | grep -v \"$1\" | awk 'NR>1 {print $1}')\"\n        docker container prune -f\n        docker image prune -a -f\n        docker volume prune -f\n    else\n        msg_box \"OK, this script will now exit, but there's still leftovers to cleanup. You can run it again at any time.\"\n        exit\n    fi\nfi\n}\n\n# Remove selected Docker image\n# docker_prune_this 'collabora/code' 'onlyoffice/documentserver' 'ark74/nc_fts' 'imaginary'\ndocker_prune_this() {\nif does_this_docker_exist \"$1\"\nthen\n    if yesno_box_yes \"Do you want to remove $1?\"\n    then\n        CONTAINER=\"$(docker container ls -a | grep \"$1\" | awk '{print $1}' | tail -1)\"\n        if [ -z \"$CONTAINER\" ]\n        then\n            # Special solution if the container name is scrambled, then search for the actual name instead \n            CONTAINER=\"$(docker container ls -a | grep \"$2\" | awk '{print $1}' | tail -1)\"\n        fi\n        docker stop \"$CONTAINER\"\n        docker rm \"$CONTAINER\"\n        docker image prune -a -f\n        docker system prune -a -f\n    else\n        msg_box \"OK, this script will now exit, but there's still leftovers to cleanup. You can run it again at any time.\"\n        exit\n    fi\nfi\n}\n\n# Remove selected Docker volume\n# docker_prune_volume ''\ndocker_prune_volume() {\nif docker volume ls | grep -q \"$1$\"\nthen\n    msg_box \"Removing old Docker volume: $1\nYou will be given the option to abort when you hit OK.\"\n    any_key \"Press any key to continue. Press CTRL+C to abort\"\n    docker volume rm \"$1\" -f\nfi\n}\n\n# Stop and remove selected docker-compose items (containers, networks, volumes) by up.\n# docker-compose_down \"$OPNSDIR/docker-compose.yml\" (absolute path to docker-compose.yml)\ndocker-compose_down() {\nif [ -f \"$1\" ]\nthen\n    cd \"$(dirname \"$1\")\"\n    if is_this_installed docker-compose\n    then\n        docker-compose down --volumes --rmi all\n    else\n        docker compose down --volumes --rmi all\n    fi\n    # Remove leftovers\n    docker system prune -a -f\nelse\n    echo \"Non-existing docker-compose file path, skipping...\"\nfi\n}\n\n# Update specific Docker image\n# docker_update_specific 'vaultwarden' 'Vaultwarden' (docker conainter name = $1, the name in text = $2)\ndocker_update_specific() {\nif is_docker_running && docker ps -a --format \"{{.Names}}\" | grep -q \"^$1$\"\nthen\n    if docker run --rm --name temporary_watchtower -v /var/run/docker.sock:/var/run/docker.sock containrrr/watchtower --cleanup --run-once \"$1\"\n    then\n        print_text_in_color \"$IGreen\" \"$2 docker image just got updated!\"\n        echo \"Docker image just got updated! We just updated $2 docker image automatically! $(date +%Y%m%d)\" >> \"$VMLOGS\"/update.log\n    fi\nfi\n}\n# docker-compose_update 'fulltextsearch-elasticsearch' 'Full Text Search' \"$FTSDIR\"\n# (docker conainter name = $1, the name in text = $2 , docker-compose directory = $3)\ndocker-compose_update() {\nif is_docker_running && docker ps -a --format \"{{.Names}}\" | grep -q \"^$1$\"\nthen\n    cd \"$3\"\n    docker compose pull\n    docker compose up -d --remove-orphans\n    docker image prune -a -f\n    print_text_in_color \"$IGreen\" \"$2 docker image just got updated!\"\n    echo \"Docker image just got updated! We just updated $2 docker image automatically! $(date +%Y%m%d)\" >> \"$VMLOGS\"/update.log\nfi\n}\n\n# countdown 'message looks like this' 10\ncountdown() {\nprint_text_in_color \"$ICyan\" \"$1\"\nsecs=\"$(($2))\"\nwhile [ $secs -gt 0 ]; do\n   echo -ne \"$secs\\033[0K\\r\"\n   sleep 1\n   : $((secs--))\ndone\n}\n\nprint_text_in_color() {\nprintf \"%b%s%b\\n\" \"$1\" \"$2\" \"$Color_Off\"\n}\n\n# Apply patch\n# App:\n# git_apply_patch \"319\" \"fulltextsearch_elasticsearch\" \"27.1.1\" \"$NCPATH/apps/fulltextsearch_elasticsearch\"\n# Server:\n# git_apply_patch \"15992\" \"server\" \"16.0.2\" \"$NCPATH\"\n# 1 = pull\n# 2 = repository\n# 3 = Nextcloud version\n# 4 = Folder on system\ngit_apply_patch() {\nif [ -z \"$NCVERSION\" ]\nthen\n    nc_update\nfi\nif [[ \"$CURRENTVERSION\" = \"$3\" ]]\nthen\n    curl_to_dir \"https://patch-diff.githubusercontent.com/raw/nextcloud/${2}/pull\" \"${1}.patch\" \"/tmp\"\n    install_if_not git\n    cd \"${4}\"\n    if git apply --check /tmp/\"${1}\".patch >/dev/null 2>&1\n    then\n        print_text_in_color \"$IGreen\" \"Applying patch https://github.com/nextcloud/${2}/pull/${1} ...\"\n        git apply /tmp/\"${1}\".patch\n    fi\nfi\n}\n\n# Check if it's the Home/SME Server\n\n# if home_sme_server\n# then\n#    do something\n# fi\nhome_sme_server() {\n# OLD DISKS: \"Samsung SSD 860\" || ST5000LM000-2AN1  || ST5000LM015-2E81\n# OLD MEMORY: BLS16G4 (Balistix Sport) || 18ASF2G72HZ (ECC)\nif lshw -c system | grep -q \"NUC8i3BEH\\|NUC10i3FNH\\|PN50\\|PN51\\|PN52\"\nthen\n    if lshw -c memory | grep -q \"BLS16G4\\|18ASF2G72HZ\\|16ATF2G64HZ\\|CT16G4SFD8266\\|M471A4G43MB1\\|9905744\\|HMA82GS6JJR8N\\|HMA82GS6CJR8N\\|9905703-023\\|9905744-110\"\n    then\n        if lshw -c disk | grep -q \"ST2000LM015-2E81\\|WDS400\\|ST5000LM000-2AN1\\|ST5000LM015-2E81\\|Samsung SSD 860\\|WDS500G1R0B\"\n        then\n            NEXTCLOUDHOMESME=yes-this-is-the-home-sme-server\n        elif lshw -c storage | grep -q \"SN700\"\n        then\n            NEXTCLOUDHOMESME=yes-this-is-the-home-sme-server\n        fi\n    fi\nfi\n\nif [ -n \"$NEXTCLOUDHOMESME\" ]\nthen\n    return 0\nelse\n    return 1\nfi\n}\n\nasuspn51() {\nif lshw -c system | grep -q \"PN51\"\nthen\n    return 0\nelse\n    return 1\nfi\n}\n\n# Check if the value is a number\n# EXAMPLE: https://github.com/nextcloud/vm/pull/1012\ncheck_if_number() {\ncase \"${1}\" in\n    ''|*[!0-9]*) return 1 ;;\n    *) return 0 ;;\nesac\n}\n\n# Prettify Json files\n# $1 = json input\nprettify_json() {\n    local JSON_INPUT\n    JSON_INPUT=\"$(echo \"$1\" | sed 's|\\\\||g' | sed 's|,\"|,\\\\n  \"|g;s|\":|\": |g;s|{\"|{\\n  \"|;s|\"}|\"\\n}|')\"\n    echo -e \"$JSON_INPUT\"\n}\n\n# Example:\n# notify_admin_gui \\\n# \"Subject\" \\\n# \"Message\"\n#\n# nextcloud_occ_no_check notification:generate -l \"$2\" \"$admin\" \"$1\"\nnotify_admin_gui() {\nlocal NC_USERS\nlocal user\nlocal admin\nif ! is_app_enabled notifications\nthen\n    print_text_in_color \"$IRed\" \"The notifications app isn't enabled - unable to send notifications\"\n    return 1\nfi\n\nprint_text_in_color \"$ICyan\" \"Posting notification to users that are admins, this might take a while...\"\nsend_mail \"$1\" \"$2\"\nif [ -z \"${NC_ADMIN_USER[*]}\" ]\nthen\n    NC_USERS=$(nextcloud_occ_no_check user:list | sed 's|^  - ||g' | sed 's|:.*||')\n    mapfile -t NC_USERS <<< \"$NC_USERS\"\n    for user in \"${NC_USERS[@]}\"\n    do\n        if nextcloud_occ_no_check user:info \"$user\" | cut -d \"-\" -f2 | grep -x -q \" admin\"\n        then\n            NC_ADMIN_USER+=(\"$user\")\n        fi\n    done\nfi\n\nfor admin in \"${NC_ADMIN_USER[@]}\"\ndo\n    print_text_in_color \"$IGreen\" \"Posting '$1' to: $admin\"\n    nextcloud_occ_no_check notification:generate -l \"$2\" \"$admin\" \"$(hostname -f): $1\"\ndone\n}\n\n# Use this to send system mails\n# e.g.: send_mail \"subject\" \"text\"\nsend_mail() {\n    local RECIPIENT\n    if [ -f /etc/msmtprc ]\n    then\n        RECIPIENT=$(grep \"recipient=\" /etc/msmtprc)\n        RECIPIENT=\"${RECIPIENT##*recipient=}\"\n        if [ -n \"$RECIPIENT\" ]\n        then\n            print_text_in_color \"$ICyan\" \"Sending '$1' to $RECIPIENT\"\n            if echo -e \"$2\" | mail -s \"NcVM: $(hostname -f) - $1\" \"$RECIPIENT\"\n            then\n                return 0\n            fi\n        fi\n    fi\n    return 1\n}\n\nzpool_import_if_missing() {\n# ZFS needs to be installed\nif ! is_this_installed zfsutils-linux\nthen\n    print_text_in_color \"$IRed\" \"This function is only intended to be run if you have ZFS installed.\"\n    return 1\nelif [ -z \"$POOLNAME\" ]\nthen\n    print_text_in_color \"$IRed\" \"Please define the POOLNAME variable, as we can't continue without it.\"\n    return 1\nfi\n# Import zpool in case missing\nif ! zpool list \"$POOLNAME\" >/dev/null 2>&1\nthen\n    zpool import -f \"$POOLNAME\"\nfi\n# Check if UUID is used\nif zpool list -v | grep sdb\nthen\n    # Get UUID\n    check_command partprobe -s\n    if fdisk -l /dev/sdb1 >/dev/null 2>&1\n    then\n        UUID_SDB1=$(blkid -o value -s UUID /dev/sdb1)\n    fi\n    # Export / import the correct way (based on UUID)\n    check_command zpool export \"$POOLNAME\"\n    check_command zpool import -d /dev/disk/by-uuid/\"$UUID_SDB1\" \"$POOLNAME\"\nfi\n}\n\n# Check for free space on the ubuntu-vg\ncheck_free_space() {\n    if vgs &>/dev/null\n    then\n        FREE_SPACE=$(vgs | grep ubuntu-vg | awk '{print $7}' | grep g | grep -oP \"[0-9]+[\\.,][0-9]\" | sed 's|[.,]||')\n    fi\n    if [ -z \"$FREE_SPACE\" ]\n    then\n        FREE_SPACE=0\n    fi\n}\n\n# Check if snapshotname already exists\ndoes_snapshot_exist() {\n    local SNAPSHOTS\n    local snapshot\n    if lvs &>/dev/null\n    then\n        SNAPSHOTS=\"$(lvs | grep ubuntu-vg | awk '{print $1}' | grep -v ubuntu-lv)\"\n    fi\n    if [ -z \"$SNAPSHOTS\" ]\n    then\n        return 1\n    fi\n    mapfile -t SNAPSHOTS <<< \"$SNAPSHOTS\"\n    for snapshot in \"${SNAPSHOTS[@]}\"\n    do\n        if [ \"$snapshot\" = \"$1\" ]\n        then\n            return 0\n        fi\n    done\n    return 1\n}\n\ncheck_php() {\nprint_text_in_color \"$ICyan\" \"Getting current PHP-version...\"\nGETPHP=\"$(php -v | grep -m 1 PHP | awk '{print $2}' | cut -d '-' -f1)\"\n\nif [ -z \"$GETPHP\" ]\nthen\n    print_text_in_color \"$IRed\" \"Can't find proper PHP version, aborting...\"\n    exit 1\nfi\n\nif grep 7.0 <<< \"$GETPHP\" >/dev/null 2>&1\nthen\n   export PHPVER=7.0\nelif grep 7.1 <<< \"$GETPHP\" >/dev/null 2>&1\nthen\n   export PHPVER=7.1\nelif grep 7.2 <<< \"$GETPHP\" >/dev/null 2>&1\nthen\n   export PHPVER=7.2\nelif grep 7.3 <<< \"$GETPHP\" >/dev/null 2>&1\nthen\n   export PHPVER=7.3\nelif grep 7.4 <<< \"$GETPHP\" >/dev/null 2>&1\nthen\n   export PHPVER=7.4\nelif grep 8.0 <<< \"$GETPHP\" >/dev/null 2>&1\nthen\n   export PHPVER=8.0\nelif grep 8.1 <<< \"$GETPHP\" >/dev/null 2>&1\nthen\n   export PHPVER=8.1\nelif grep 8.2 <<< \"$GETPHP\" >/dev/null 2>&1\nthen\n   export PHPVER=8.2\nelif grep 8.3 <<< \"$GETPHP\" >/dev/null 2>&1\nthen\n   export PHPVER=8.3\nelif grep 8.4 <<< \"$GETPHP\" >/dev/null 2>&1\nthen\n   export PHPVER=8.4\nelif grep 8.5 <<< \"$GETPHP\" >/dev/null 2>&1\nthen\n   export PHPVER=8.5\nelif grep 8.6 <<< \"$GETPHP\" >/dev/null 2>&1\nthen\n   export PHPVER=8.6\nfi\n\n# Export other PHP variables based on PHPVER\nexport PHP_FPM_DIR=/etc/php/$PHPVER/fpm\nexport PHP_INI=$PHP_FPM_DIR/php.ini\nexport PHP_POOL_DIR=$PHP_FPM_DIR/pool.d\nexport PHP_MODS_DIR=/etc/php/\"$PHPVER\"/mods-available\n\n# Show version\nprint_text_in_color \"$IGreen\" PHPVER=\"$PHPVER\"\n}\n\nadd_dockerprune() {\nif ! crontab -u root -l | grep -q 'dockerprune.sh'\nthen\n    print_text_in_color \"$ICyan\" \"Adding cronjob for Docker weekly prune...\"\n    mkdir -p \"$SCRIPTS\"\n    crontab -u root -l | { cat; echo \"@weekly $SCRIPTS/dockerprune.sh > /dev/null\"; } | crontab -u root -\n    check_command echo \"#!/bin/bash\" > \"$SCRIPTS/dockerprune.sh\"\n    check_command echo \"docker system prune -a --force\" >> \"$SCRIPTS/dockerprune.sh\"\n    check_command echo \"exit\" >> \"$SCRIPTS/dockerprune.sh\"\n    chmod a+x \"$SCRIPTS\"/dockerprune.sh\n    print_text_in_color \"$IGreen\" \"Docker automatic prune job added.\"\nfi\n}\n\ntest_nono_ports() {\n  local e match=\"$1\"\n  shift\n  for e; do [[ \"$e\" == \"$match\" ]] && return 0; done\n  return 1\n}\n\ncheck_nono_ports() {\nif test_nono_ports \"${1}\" \"${NONO_PORTS[@]}\"\nthen\n    msg_box \"You have to choose another port than $1. Please start over.\\n\nPlease keep in mind NOT to use the following ports as they are likely in use already:\n${NONO_PORTS[*]}\"\n    return 1\nfi\n}\n\nadd_trusted_key_and_repo() {\n    # EXAMPLE: add_trusted_key_and_repo \"jcameron-key.asc\" \\\n    # \"https://download.webmin.com\" \\\n    # \"https://download.webmin.com/download/repository\" \\\n    # \"sarge contrib\" \\\n    # \"webmin-test.list\"\n\n    # $1 = whatever.asc\n    # $2 = Key URL e.g. https://download.webmin.com\n    # $3 = Deb URL e.g. https://download.webmin.com/download/repository\n    # $4 = \"$CODENAME $CODENAME main\" (e.g. jammy jammy main)\n    # $5 = debpackage-name.list\n\n    # This function is only supported in the currently supported release\n    check_distro_version\n\n    # Do the magic\n    if version 22.04 \"$DISTRO\" 24.04.10\n    then\n        # New recommended way not using apt-key\n        print_text_in_color \"$ICyan\" \"Adding trusted key in /etc/apt/keyrings/$1...\"\n        curl -sL \"$2\"/\"$1\" | tee -a /etc/apt/keyrings/\"$1\"\n        echo \"deb [signed-by=/etc/apt/keyrings/$1] $3 $4\" > \"/etc/apt/sources.list.d/$5\"\n        apt-get update -q4 & spinner_loading\n    elif version 20.04 \"$DISTRO\" 20.04.10\n    then\n        # Legacy way with apt-key\n        print_text_in_color \"$ICyan\" \"Adding trusted key with apt-key...\"\n        curl -sL \"$2\"/\"$1\" | apt-key add -\n        echo \"deb $3 $4\" > \"/etc/apt/sources.list.d/$5\"\n        apt-get update -q4 & spinner_loading\n    fi\n}\n\nmajor_versions_unsupported() {\n# Major versions unsupported\nif [[ \"${CURRENTVERSION%%.*}\" -le \"$NCBAD\" ]]\nthen\n    msg_box \"Please note that updates between multiple major versions are unsupported! Your situation is:\nCurrent version: $CURRENTVERSION\nLatest release: $NCVERSION\nIt is best to keep your Nextcloud server upgraded regularly, and to install all point releases\nand major releases, as skipping releases increases the risk of errors. Major releases are\n16, 17, 18 and 19. Point releases are intermediate releases for each major release.\nFor example, 18.0.5 and 19.0.2 are point releases.\nYou can read more about Nextcloud releases here: https://github.com/nextcloud/server/wiki/Maintenance-and-Release-Schedule\nPlease contact T&M Hansson IT AB to help you with upgrading between major versions.\nhttps://shop.hanssonit.se/product/upgrade-between-major-owncloud-nextcloud-versions/\"\n    exit 1\nfi\n}\n\n## bash colors\n# Reset\nColor_Off='\\e[0m'       # Text Reset\n\n# Regular Colors\nBlack='\\e[0;30m'        # Black\nRed='\\e[0;31m'          # Red\nGreen='\\e[0;32m'        # Green\nYellow='\\e[0;33m'       # Yellow\nBlue='\\e[0;34m'         # Blue\nPurple='\\e[0;35m'       # Purple\nCyan='\\e[0;36m'         # Cyan\nWhite='\\e[0;37m'        # White\n\n# Bold\nBBlack='\\e[1;30m'       # Black\nBRed='\\e[1;31m'         # Red\nBGreen='\\e[1;32m'       # Green\nBYellow='\\e[1;33m'      # Yellow\nBBlue='\\e[1;34m'        # Blue\nBPurple='\\e[1;35m'      # Purple\nBCyan='\\e[1;36m'        # Cyan\nBWhite='\\e[1;37m'       # White\n\n# Underline\nUBlack='\\e[4;30m'       # Black\nURed='\\e[4;31m'         # Red\nUGreen='\\e[4;32m'       # Green\nUYellow='\\e[4;33m'      # Yellow\nUBlue='\\e[4;34m'        # Blue\nUPurple='\\e[4;35m'      # Purple\nUCyan='\\e[4;36m'        # Cyan\nUWhite='\\e[4;37m'       # White\n\n# Background\nOn_Black='\\e[40m'       # Black\nOn_Red='\\e[41m'         # Red\nOn_Green='\\e[42m'       # Green\nOn_Yellow='\\e[43m'      # Yellow\nOn_Blue='\\e[44m'        # Blue\nOn_Purple='\\e[45m'      # Purple\nOn_Cyan='\\e[46m'        # Cyan\nOn_White='\\e[47m'       # White\n\n# High Intensity\nIBlack='\\e[0;90m'       # Black\nIRed='\\e[0;91m'         # Red\nIGreen='\\e[0;92m'       # Green\nIYellow='\\e[0;93m'      # Yellow\nIBlue='\\e[0;94m'        # Blue\nIPurple='\\e[0;95m'      # Purple\nICyan='\\e[0;96m'        # Cyan\nIWhite='\\e[0;97m'       # White\n\n# Bold High Intensity\nBIBlack='\\e[1;90m'      # Black\nBIRed='\\e[1;91m'        # Red\nBIGreen='\\e[1;92m'      # Green\nBIYellow='\\e[1;93m'     # Yellow\nBIBlue='\\e[1;94m'       # Blue\nBIPurple='\\e[1;95m'     # Purple\nBICyan='\\e[1;96m'       # Cyan\nBIWhite='\\e[1;97m'      # White\n\n# High Intensity backgrounds\nOn_IBlack='\\e[0;100m'   # Black\nOn_IRed='\\e[0;101m'     # Red\nOn_IGreen='\\e[0;102m'   # Green\nOn_IYellow='\\e[0;103m'  # Yellow\nOn_IBlue='\\e[0;104m'    # Blue\nOn_IPurple='\\e[0;105m'  # Purple\nOn_ICyan='\\e[0;106m'    # Cyan\nOn_IWhite='\\e[0;107m'   # White\n"
        },
        {
          "name": "menu",
          "type": "tree",
          "content": null
        },
        {
          "name": "migrate",
          "type": "tree",
          "content": null
        },
        {
          "name": "network",
          "type": "tree",
          "content": null
        },
        {
          "name": "nextcloud-startup-script.sh",
          "type": "blob",
          "size": 20.419921875,
          "content": "#!/bin/bash\n\n# T&M Hansson IT AB © - 2024, https://www.hanssonit.se/\n# GNU General Public License v3.0\n# https://github.com/nextcloud/vm/blob/main/LICENSE\n\n#########\n\nIRed='\\e[0;91m'         # Red\nIGreen='\\e[0;92m'       # Green\nICyan='\\e[0;96m'        # Cyan\nColor_Off='\\e[0m'       # Text Reset\nprint_text_in_color() {\n\tprintf \"%b%s%b\\n\" \"$1\" \"$2\" \"$Color_Off\"\n}\n\nprint_text_in_color \"$ICyan\" \"Fetching all the variables from lib.sh...\"\n\nis_process_running() {\nPROCESS=\"$1\"\n\nwhile :\ndo\n    RESULT=$(pgrep \"${PROCESS}\")\n\n    if [ \"${RESULT:-null}\" = null ]; then\n            break\n    else\n            print_text_in_color \"$ICyan\" \"${PROCESS} is running, waiting for it to stop...\"\n            sleep 10\n    fi\ndone\n}\n\n#########\n\n# Check if dpkg or apt is running\nis_process_running apt\nis_process_running dpkg\n\ntrue\nSCRIPT_NAME=\"Nextcloud Startup Script\"\n# shellcheck source=lib.sh\nsource /var/scripts/fetch_lib.sh\n\n# Get all needed variables from the library\nncdb\n\n# Check if root\nroot_check\n\n# Create a snapshot before modifying anything\ncheck_free_space\nif does_snapshot_exist \"NcVM-installation\" || [ \"$FREE_SPACE\" -ge 50 ]\nthen\n    if does_snapshot_exist \"NcVM-installation\"\n    then\n        check_command lvremove /dev/ubuntu-vg/NcVM-installation -y\n    fi\n    if ! lvcreate --size 5G --snapshot --name \"NcVM-startup\" /dev/ubuntu-vg/ubuntu-lv\n    then\n        msg_box \"The creation of a snapshot failed.\nIf you just merged and old one, please reboot your server once more.\nIt should work afterwards again.\"\n        exit 1\n    fi\nfi\n\n# Check network\nif network_ok\nthen\n    print_text_in_color \"$IGreen\" \"Online!\"\nelse\n    print_text_in_color \"$ICyan\" \"Setting correct interface...\"\n    [ -z \"$IFACE\" ] && IFACE=$(lshw -c network | grep \"logical name\" | awk '{print $3; exit}')\n    # Set correct interface\n    cat <<-SETDHCP > \"/etc/netplan/01-netcfg.yaml\"\nnetwork:\n  version: 2\n  renderer: networkd\n  ethernets:\n    $IFACE:\n      dhcp4: true\n      dhcp6: true\nSETDHCP\n    check_command netplan apply\n    print_text_in_color \"$ICyan\" \"Checking connection...\"\n    sleep 1\n    set_systemd_resolved_dns \"$IFACE\"\n    if ! nslookup github.com\n    then\n        msg_box \"The script failed to get an address from DHCP.\nYou must have a working network connection to run this script.\n\nYou will now be provided with the option to set a static IP manually instead.\"\n\n        # Run static_ip script\n\tbash /var/scripts/static_ip.sh\n    fi\nfi\n\n# Check network again\nif network_ok\nthen\n    print_text_in_color \"$IGreen\" \"Online!\"\nelif home_sme_server\nthen\n    msg_box \"It seems like the last try failed as well using LAN ethernet.\n\nSince the Home/SME server is equipped with a Wi-Fi module, you will now be asked to enable it to get connectivity.\n\nPlease note: It's not recommended to run a server on Wi-Fi; using an ethernet cable is always the best.\"\n    if yesno_box_yes \"Do you want to enable Wi-Fi on this server?\"\n    then\n        install_if_not network-manager\n        nmtui\n    fi\n        if network_ok\n        then\n            print_text_in_color \"$IGreen\" \"Online!\"\n\telse\n        msg_box \"Network is NOT OK. You must have a working network connection to run this script.\n\nPlease contact us for support:\nhttps://shop.hanssonit.se/product/premium-support-per-30-minutes/\n\nPlease also post this issue on: https://github.com/nextcloud/vm/issues\"\n        exit 1\n        fi\nelse\n    msg_box \"Network is NOT OK. You must have a working network connection to run this script.\n\nPlease contact us for support:\nhttps://shop.hanssonit.se/product/premium-support-per-30-minutes/\n\nPlease also post this issue on: https://github.com/nextcloud/vm/issues\"\n    exit 1\nfi\n\n# Check that this run on the PostgreSQL VM\nif ! is_this_installed postgresql-common\nthen\n    print_text_in_color \"$IRed\" \"This script is intended to be \\\nrun using a PostgreSQL database, but PostgreSQL is not installed.\"\n    print_text_in_color \"$IRed\" \"Aborting...\"\n    exit 1\nfi\n\n# Run the startup menu\nrun_script MENU startup_configuration\n\ntrue\nSCRIPT_NAME=\"Nextcloud Startup Script\"\n# shellcheck source=lib.sh\nsource /var/scripts/fetch_lib.sh\n\n# Get all needed variables from the library\nncdb\nnc_update\n\n# Check for errors + debug code and abort if something isn't right\n# 1 = ON\n# 0 = OFF\nDEBUG=0\ndebug_mode\n\n# Nextcloud 21 is required\nlowest_compatible_nc 21\n\n# Add temporary fix if needed\nif network_ok\nthen\n    run_script STATIC temporary-fix-beginning\nfi\n\n# Import if missing and export again to import it with UUID\nzpool_import_if_missing\n\n# Set phone region (needs the latest KEYBOARD_LAYOUT from lib)\n# shellcheck source=lib.sh\nsource /var/scripts/fetch_lib.sh\nif [ -n \"$KEYBOARD_LAYOUT\" ]\nthen\n    nextcloud_occ config:system:set default_phone_region --value=\"$KEYBOARD_LAYOUT\"\nfi\n\n# Is this run as a pure root user?\nif is_root\nthen\n    if [[ \"$UNIXUSER\" == \"ncadmin\" ]]\n    then\n        sleep 1\n    else\n        if [ -z \"$UNIXUSER\" ]\n        then\n            msg_box \"You seem to be running this as the root user.\nYou must run this as a regular user with sudo permissions.\n\nPlease create a user with sudo permissions and the run this command:\nsudo -u [user-with-sudo-permissions] sudo bash /var/scripts/nextcloud-startup-script.sh\n\nWe will do this for you when you hit OK.\"\n       download_script STATIC adduser\n       bash $SCRIPTS/adduser.sh \"$SCRIPTS/nextcloud-startup-script.sh\"\n       rm $SCRIPTS/adduser.sh\n       else\n           msg_box \"You probably see this message if the user 'ncadmin' does not exist on the system,\nwhich could be the case if you are running directly from the scripts on Github and not the VM.\n\nAs long as the user you created have sudo permissions it's safe to continue.\nThis would be the case if you created a new user with the script in the previous step.\n\nIf the user you are running this script with is a user that doesn't have sudo permissions,\nplease abort this script and report this issue to $ISSUES.\"\n            if yesno_box_yes \"Do you want to abort this script?\"\n            then\n                exit\n            fi\n        fi\n    fi\nfi\n\n######## The first setup is OK to run to this point several times, but not any further ########\nif [ -f \"$SCRIPTS/you-can-not-run-the-startup-script-several-times\" ]\nthen\n    msg_box \"The $SCRIPT_NAME script that handles this first setup \\\nis designed to be run once, not several times in a row.\n\nIf you feel uncertain about adding some extra features during this setup, \\\nthen it's best to wait until after the first setup is done. You can always add all the extra features later.\n\n[For the Nextcloud VM:]\nPlease delete this VM from your host and reimport it once again, then run this setup like you did the first time.\n\n[For the Nextcloud Home/SME Server:]\nIt's a bit trickier since you can't revert in the same way as a VM. \\\nThe best thing you can do now is to save all the output from the session you \\\nran before this one + write down all the steps you took and send and email to:\ngithub@hanssonit.se with the subject 'Issues with first setup', and we'll take it from there.\n\nFull documentation can be found here: https://docs.hanssonit.se\nPlease report any bugs you find here: $ISSUES\"\n    exit 1\nfi\n\ntouch \"$SCRIPTS/you-can-not-run-the-startup-script-several-times\"\n\nif home_sme_server\nthen\n    download_script STATIC nhss_index\n    mv $SCRIPTS/nhss_index.php $HTML/index.php && rm -f $HTML/html/index.html\n    chmod 750 $HTML/index.php && chown www-data:www-data $HTML/index.php\nelse\n    download_script STATIC index\n    mv $SCRIPTS/index.php $HTML/index.php && rm -f $HTML/html/index.html\n    chmod 750 $HTML/index.php && chown www-data:www-data $HTML/index.php\nfi\n\n# Change 000-default to $WEB_ROOT\nsed -i \"s|DocumentRoot /var/www/html|DocumentRoot $HTML|g\" /etc/apache2/sites-available/000-default.conf\n\n# Make possible to see the welcome screen (without this php-fpm won't reach it)\n sed -i '14i\\    # http://lost.l-w.ca/0x05/apache-mod_proxy_fcgi-and-php-fpm/' /etc/apache2/sites-available/000-default.conf\n sed -i '15i\\   <FilesMatch \"\\.php$\">' /etc/apache2/sites-available/000-default.conf\n sed -i '16i\\    <If \"-f %{SCRIPT_FILENAME}\">' /etc/apache2/sites-available/000-default.conf\n sed -i '17i\\      SetHandler \"proxy:unix:/run/php/php'$PHPVER'-fpm.nextcloud.sock|fcgi://localhost\"' /etc/apache2/sites-available/000-default.conf\n sed -i '18i\\   </If>' /etc/apache2/sites-available/000-default.conf\n sed -i '19i\\   </FilesMatch>' /etc/apache2/sites-available/000-default.conf\n sed -i '20i\\    ' /etc/apache2/sites-available/000-default.conf\n\n# Allow $UNIXUSER to run figlet script\nchown \"$UNIXUSER\":\"$UNIXUSER\" \"$SCRIPTS/nextcloud.sh\"\n\nmsg_box \"This script will configure your Nextcloud and activate TLS.\nIt will also do the following:\n\n- Generate new SSH keys for the server\n- Generate new PostgreSQL password\n- Install selected apps and automatically configure them\n- Detect and set hostname\n- Detect and set trusted domains\n- Upgrade your system and Nextcloud to latest version\n- Set secure permissions to Nextcloud\n- Set new passwords to Linux and Nextcloud\n- Change timezone\n- Set correct Rewriterules for Nextcloud\n- Copy content from .htaccess to .user.ini (because we use php-fpm)\n- Add additional options if you choose them\n- Set correct CPU cores for Imaginary\n- And more...\"\n\nmsg_box \"PLEASE NOTE:\n[#] Please finish the whole setup. The server will reboot once done.\n\n[#] Please read the on-screen instructions carefully, they will guide you through the setup.\n\n[#] When complete it will delete all the *.sh, *.html, *.tar, *.zip inside:\n    /root\n    /home/$UNIXUSER\n\n[#] Please consider donating if you like the product:\n    https://shop.hanssonit.se/product-category/donate/\n\n[#] You can also ask for help here:\n    https://help.nextcloud.com/c/support/appliances-docker-snappy-vm\n    https://shop.hanssonit.se/product/premium-support-per-30-minutes/\"\n\nmsg_box \"PLEASE NOTE:\n\nThe first setup is meant to be run once, and not aborted.\nIf you feel uncertain about the options during the setup, just choose the defaults by hitting [ENTER] at each question.\n\nWhen the setup is done, the server will automatically reboot.\n\nPlease report any issues to: $ISSUES\"\n\n# Change timezone in PHP\nsed -i \"s|;date.timezone.*|date.timezone = $(cat /etc/timezone)|g\" \"$PHP_INI\"\n\n# Change timezone for logging\nnextcloud_occ config:system:set logtimezone --value=\"$(cat /etc/timezone)\"\n\n# Pretty URLs\nprint_text_in_color \"$ICyan\" \"Setting RewriteBase to \\\"/\\\" in config.php...\"\nchown -R www-data:www-data $NCPATH\nnextcloud_occ config:system:set overwrite.cli.url --value=\"http://localhost/\"\nnextcloud_occ config:system:set htaccess.RewriteBase --value=\"/\"\nnextcloud_occ maintenance:update:htaccess\nbash $SECURE & spinner_loading\n\n# Generate new SSH Keys\nprintf \"\\nGenerating new SSH keys for the server...\\n\"\nrm -v /etc/ssh/ssh_host_*\ndpkg-reconfigure openssh-server\n\n# Generate new PostgreSQL password\nprint_text_in_color \"$ICyan\" \"Generating new PostgreSQL password...\"\ncheck_command bash \"$SCRIPTS/change_db_pass.sh\"\nsleep 3\n\n# Server configurations\nbash $SCRIPTS/server_configuration.sh\n\n# Nextcloud configuration\nbash $SCRIPTS/nextcloud_configuration.sh\n\n# Install apps\nbash $SCRIPTS/additional_apps.sh\n\n### Change passwords\n# CLI USER\nUNIXUSER=\"$(getent group sudo | cut -d: -f4 | cut -d, -f1)\"\nif [[ \"$UNIXUSER\" != \"ncadmin\" ]]\nthen\n   print_text_in_color \"$ICyan\" \"No need to change password for CLI user '$UNIXUSER' since it's not the default user.\"\nelse\n    msg_box \"For better security, we will now change the password for the CLI user in Ubuntu.\"\n    while :\n    do\n        UNIX_PASSWORD=$(input_box_flow \"Please type in the new password for the current CLI user in Ubuntu: $UNIXUSER.\")\n        if [[ \"$UNIX_PASSWORD\" == *\" \"* ]]\n        then\n            msg_box \"Please don't use spaces.\"\n        else\n            break\n        fi\n    done\n    if check_command echo \"$UNIXUSER:$UNIX_PASSWORD\" | sudo chpasswd\n    then\n        msg_box \"The new password for the current CLI user in Ubuntu ($UNIXUSER) is now set to: $UNIX_PASSWORD\n\nThis is used when you login to the Ubuntu CLI.\"\n    fi\nfi\nunset UNIX_PASSWORD\n\n# NEXTCLOUD USER\nNCADMIN=$(nextcloud_occ user:list | awk '{print $3}')\nif [[ \"$NCADMIN\" != \"ncadmin\" ]]\nthen\n   print_text_in_color \"$ICyan\" \"No need to change password for GUI user '$NCADMIN' since it's not the default user.\"\nelse\n    msg_box \"We will now change the username and password for the Web Admin in Nextcloud.\"\n    while :\n    do\n        NEWUSER=$(input_box_flow \"Please type in the name of the Web Admin in Nextcloud.\nIt must differ from the current one: $NCADMIN.\\n\\nThe only allowed characters for the username are:\n'a-z', 'A-Z', '0-9', and '_.@-'\")\n        if [[ \"$NEWUSER\" == *\" \"* ]]\n        then\n            msg_box \"Please don't use spaces.\"\n        elif [ \"$NEWUSER\" = \"$NCADMIN\" ]\n        then\n            msg_box \"This username ($NCADMIN) is already in use. Please choose a different one.\"\n        # - has to be escaped otherwise it won't work.\n        # Inspired by: https://unix.stackexchange.com/a/498731/433213\n        elif [ \"${NEWUSER//[A-Za-z0-9_.\\-@]}\" ]\n        then\n            msg_box \"Allowed characters for the username are:\\na-z', 'A-Z', '0-9', and '_.@-'\\n\\nPlease try again.\"\n        else\n            break\n        fi\n    done\n    while :\n    do\n        OC_PASS=$(input_box_flow \"Please type in the new password for the new Web Admin ($NEWUSER) in Nextcloud.\")\n        # Create new user\n        export OC_PASS\n        if su -s /bin/sh www-data -c \"php $NCPATH/occ user:add $NEWUSER --password-from-env -g admin\"\n        then\n            msg_box \"The new Web Admin in Nextcloud is now: $NEWUSER\\nThe password is set to: $OC_PASS\nThis is used when you login to Nextcloud itself, i.e. on the web.\"\n            unset OC_PASS\n            break\n        else\n            any_key \"Press any key to choose a different password.\"\n        fi\n    done\n    # Delete old user\n    if [[ \"$NCADMIN\" ]]\n    then\n        print_text_in_color \"$ICyan\" \"Deleting $NCADMIN...\"\n        nextcloud_occ user:delete \"$NCADMIN\"\n        sleep 2\n    fi\nfi\n\n# We need to unset the cached admin-user since we have changed its name\nunset NC_ADMIN_USER\n\nmsg_box \"Well done, you have now finished most of the setup.\n\nThere are still a few steps left but they are automated so sit back and relax! :)\"\n\n# Add default notifications\nnotify_admin_gui \\\n\"Do you need support?\" \\\n\"If you need support, please visit the shop: https://shop.hanssonit.se, or the forum: https://help.nextcloud.com.\"\n\nif ! is_this_installed php\"$PHPVER\"-imagick\nthen\n    notify_admin_gui \\\n    \"Regarding Imagick not being installed\" \\\n    \"As you may have noticed, Imagick is not installed. We care about your security, \\\nand here's the reason: https://github.com/nextcloud/server/issues/13099\"\nfi\n\n# Fixes https://github.com/nextcloud/vm/issues/58\na2dismod status\nrestart_webserver\n\nif home_sme_server\nthen\n    install_if_not bc\n    mem_available=\"$(awk '/MemTotal/{print $2}' /proc/meminfo)\"\n    mem_available_gb=\"$(echo \"scale=0; $mem_available/(1024*1024)\" | bc)\"\n    # 32 GB RAM\n    if [[ 30 -lt \"${mem_available_gb}\" ]]\n    then\n        # Add specific values to PHP-FPM based on 32 GB RAM\n        check_command sed -i \"s|pm.max_children.*|pm.max_children = 600|g\" \"$PHP_POOL_DIR\"/nextcloud.conf\n        check_command sed -i \"s|pm.start_servers.*|pm.start_servers = 100|g\" \"$PHP_POOL_DIR\"/nextcloud.conf\n        check_command sed -i \"s|pm.min_spare_servers.*|pm.min_spare_servers = 20|g\" \"$PHP_POOL_DIR\"/nextcloud.conf\n        check_command sed -i \"s|pm.max_spare_servers.*|pm.max_spare_servers = 480|g\" \"$PHP_POOL_DIR\"/nextcloud.conf\n        restart_webserver\n    # 16 GB RAM\n    elif [[ 14 -lt \"${mem_available_gb}\" ]]\n    then\n        # Add specific values to PHP-FPM based on 16 GB RAM\n        check_command sed -i \"s|pm.max_children.*|pm.max_children = 300|g\" \"$PHP_POOL_DIR\"/nextcloud.conf\n        check_command sed -i \"s|pm.start_servers.*|pm.start_servers = 50|g\" \"$PHP_POOL_DIR\"/nextcloud.conf\n        check_command sed -i \"s|pm.min_spare_servers.*|pm.min_spare_servers = 20|g\" \"$PHP_POOL_DIR\"/nextcloud.conf\n        check_command sed -i \"s|pm.max_spare_servers.*|pm.max_spare_servers = 280|g\" \"$PHP_POOL_DIR\"/nextcloud.conf\n        restart_webserver\n    fi\nelse\n    # Calculate the values of PHP-FPM based on the amount of RAM available (minimum 2 GB or 8 children)\n    calculate_php_fpm\n\n    # Run again if values are reset on last run\n    calculate_php_fpm\nfi\n\n# Set correct amount of CPUs for Imaginary\nif does_this_docker_exist nextcloud/aio-imaginary\nthen\n    if which nproc >/dev/null 2>&1\n    then\n        nextcloud_occ config:system:set preview_concurrency_new --value=\"$(nproc)\"\n        nextcloud_occ config:system:set preview_concurrency_all --value=\"$(($(nproc)*2))\"\n    else\n        nextcloud_occ config:system:set preview_concurrency_new --value=\"2\"\n        nextcloud_occ config:system:set preview_concurrency_all --value=\"4\"\n    fi\nfi\n\n# Add temporary fix if needed\nif network_ok\nthen\n    run_script STATIC temporary-fix-end\nfi\n\n# Cleanup 1\nnextcloud_occ maintenance:repair\nrm -f \"$SCRIPTS/ip.sh\"\nrm -f \"$SCRIPTS/change_db_pass.sh\"\nrm -f \"$SCRIPTS/instruction.sh\"\nrm -f \"$NCDATA/nextcloud.log\"\nrm -f \"$SCRIPTS/static_ip.sh\"\nrm -f \"$SCRIPTS/lib.sh\"\nrm -f \"$SCRIPTS/server_configuration.sh\"\nrm -f \"$SCRIPTS/nextcloud_configuration.sh\"\nrm -f \"$SCRIPTS/additional_apps.sh\"\nrm -f \"$SCRIPTS/adduser.sh\"\nrm -f \"$SCRIPTS/activate-tls.sh\"\nrm -f \"$SCRIPTS/desec_menu.sh\"\nrm -f \"$NCDATA\"/*.log\n\nfind /root \"/home/$UNIXUSER\" -type f \\( -name '*.sh*' -o -name '*.html*' -o -name '*.tar*' -o -name 'results' -o -name '*.zip*' \\) -delete\nsed -i \"s|instruction.sh|nextcloud.sh|g\" \"/home/$UNIXUSER/.bash_profile\"\n# TODO: Do we really need this?\n# https://github.com/nextcloud/server/issues/48773\n# find \"$NCPATH\" -type f \\( -name 'results' -o -name '*.sh*' \\) -delete\nfind \"$NCPATH\" -type f \\( -name 'results' \\) -delete\n\ntruncate -s 0 \\\n    /root/.bash_history \\\n    \"/home/$UNIXUSER/.bash_history\" \\\n    /var/spool/mail/root \\\n    \"/var/spool/mail/$UNIXUSER\" \\\n    /var/log/apache2/access.log \\\n    /var/log/apache2/error.log \\\n    \"$VMLOGS/nextcloud.log\"\n\nsed -i \"s|sudo -i||g\" \"$UNIXUSER_PROFILE\"\n\ncat << ROOTNEWPROFILE > \"$ROOT_PROFILE\"\n# ~/.profile: executed by Bourne-compatible login shells.\n\nif [ \"/bin/bash\" ]\nthen\n    if [ -f ~/.bashrc ]\n    then\n        . ~/.bashrc\n    fi\nfi\n\nif [ -x /var/scripts/nextcloud-startup-script.sh ]\nthen\n    /var/scripts/nextcloud-startup-script.sh\nfi\n\nif [ -x /var/scripts/history.sh ]\nthen\n    /var/scripts/history.sh\nfi\n\nmesg n\n\nROOTNEWPROFILE\n\n# Set trusted domains\nrun_script STATIC trusted_domains\n\n# Upgrade system\nprint_text_in_color \"$ICyan\" \"System will now upgrade...\"\nbash $SCRIPTS/update.sh minor\n\n# Add missing indices (if any)\nnextcloud_occ db:add-missing-indices\n\n# Check if new major is out, and inform on how to update\nnc_update\nif version_gt \"$NCMAJOR\" \"$CURRENTMAJOR\"\nthen\n    msg_box \"We noticed that there's a new major release of Nextcloud ($NCVERSION).\\nIf you want to update to the latest release instantly, please check this:\\n\nhttps://docs.hanssonit.se/s/W6fMouPiqQz3_Mog/virtual-machines-vm/d/W7Du9uPiqQz3_Mr1/nextcloud-vm-machine-configuration?currentPageId=W7D3quPiqQz3_MsE\"\nfi\n\n# Cleanup 2\napt-get autoremove -y\napt-get autoclean\n\n# Remove preference for IPv4\nrm -f /etc/apt/apt.conf.d/99force-ipv4\napt-get update\n\n# Success!\nmsg_box \"The installation process is *almost* done.\n\nPlease hit OK in all the following prompts and let the server reboot to complete the installation process.\"\n\n# Enterprise?\nmsg_box \"ENTERPRISE?\nNextcloud Enterprise gives professional organizations software optimized and tested for mission critical environments.\n\nMore info here: https://nextcloud.com/enterprise/\nGet your license here: https://shop.hanssonit.se/product/nextcloud-enterprise-license-100-users/\"\n\nmsg_box \"TIPS & TRICKS:\n1. Publish your server online: http://shortio.hanssonit.se/ffOQOXS6Kh\n2. To login to PostgreSQL just type: sudo -u postgres psql nextcloud_db\n3. To update this server just type: sudo bash /var/scripts/update.sh\n4. Install apps, configure Nextcloud, and server: sudo bash $SCRIPTS/menu.sh\"\n\nmsg_box \"SUPPORT:\nPlease ask for help in the forums, visit our shop to buy support:\n- SUPPORT: https://shop.hanssonit.se/product/premium-support-per-30-minutes/\n- FORUM: https://help.nextcloud.com/\n\nBUGS:\nPlease report any bugs here: https://github.com/nextcloud/vm/issues\"\n\nmsg_box \"### PLEASE HIT OK TO REBOOT ###\n\nCongratulations! You have successfully installed Nextcloud!\n\nLOGIN:\nLogin to Nextcloud in your browser:\n- IP: $ADDRESS\n- Hostname: $(hostname -f)\n\n### PLEASE HIT OK TO REBOOT ###\"\n\n# Reboot\nprint_text_in_color \"$IGreen\" \"Installation done, system will now reboot...\"\ncheck_command rm -f \"$SCRIPTS/you-can-not-run-the-startup-script-several-times\"\ncheck_command rm -f \"$SCRIPTS/nextcloud-startup-script.sh\"\nif ! reboot\nthen\n    shutdown -r now\nfi\n"
        },
        {
          "name": "nextcloud_install_production.sh",
          "type": "blob",
          "size": 33.166015625,
          "content": "#!/bin/bash\n\n# T&M Hansson IT AB © - 2024, https://www.hanssonit.se/\n# GNU General Public License v3.0\n# https://github.com/nextcloud/vm/blob/main/LICENSE\n\n# Prefer IPv4 for apt\necho 'Acquire::ForceIPv4 \"true\";' >> /etc/apt/apt.conf.d/99force-ipv4\n\n# Fix fancy progress bar for apt-get\n# https://askubuntu.com/a/754653\nif [ -d /etc/apt/apt.conf.d ]\nthen\n    if ! [ -f /etc/apt/apt.conf.d/99progressbar ]\n    then\n        echo 'Dpkg::Progress-Fancy \"1\";' > /etc/apt/apt.conf.d/99progressbar\n        echo 'APT::Color \"1\";' >> /etc/apt/apt.conf.d/99progressbar\n        chmod 644 /etc/apt/apt.conf.d/99progressbar\n    fi\nfi\n\n# Install curl if not existing\nif [ \"$(dpkg-query -W -f='${Status}' \"curl\" 2>/dev/null | grep -c \"ok installed\")\" = \"1\" ]\nthen\n    echo \"curl OK\"\nelse\n    apt-get update -q4\n    apt-get install curl -y\nfi\n\n# Install whiptail if not existing\nif [ \"$(dpkg-query -W -f='${Status}' \"whiptail\" 2>/dev/null | grep -c \"ok installed\")\" = \"1\" ]\nthen\n    echo \"whiptail OK\"\nelse\n    apt-get install whiptail -y\nfi\n\ntrue\nSCRIPT_NAME=\"Nextcloud Install Script\"\nSCRIPT_EXPLAINER=\"This script is installing all requirements that are needed for Nextcloud to run.\nIt's the first of two parts that are necessary to finish your customized Nextcloud installation.\"\n# shellcheck source=lib.sh\nsource <(curl -sL https://raw.githubusercontent.com/nextcloud/vm/main/lib.sh)\n\n# Check for errors + debug code and abort if something isn't right\n# 1 = ON\n# 0 = OFF\nDEBUG=0\ndebug_mode\n\n# Check if root\nroot_check\n\n# Test RAM size (2GB min) + CPUs (min 1)\nram_check 2 Nextcloud\ncpu_check 1 Nextcloud\n\n# Check if dpkg or apt is running\nis_process_running apt\nis_process_running dpkg\n\n# Check distribution and version\nif ! version 24.04 \"$DISTRO\" 24.04.10\nthen\n    msg_box \"This script can only be run on Ubuntu 24.04 (server).\"\n    exit 1\nfi\n\n# Automatically restart services\n# Restart mode: (l)ist only, (i)nteractive or (a)utomatically.\nsed -i \"s|#\\$nrconf{restart} = .*|\\$nrconf{restart} = 'a';|g\" /etc/needrestart/needrestart.conf\n\n# Check for flags\nif [ \"$1\" = \"\" ]\nthen\n    print_text_in_color \"$ICyan\" \"Running in normal mode...\"\n    sleep 1\nelif [ \"$1\" = \"--provisioning\" ] || [ \"$1\" = \"-p\" ]\nthen\n    print_text_in_color \"$ICyan\" \"Running in provisioning mode...\"\n    export PROVISIONING=1\n    sleep 1\nelif [ \"$1\" = \"--not-latest\" ]\nthen\n    NOT_LATEST=1\n    print_text_in_color \"$ICyan\" \"Running in not-latest mode...\"\n    sleep 1\nelse\n    msg_box \"Failed to get the correct flag. Did you enter it correctly?\"\n    exit 1\nfi\n\n# Show explainer\nif [ -z \"$PROVISIONING\" ]\nthen\n    msg_box \"$SCRIPT_EXPLAINER\"\nfi\n\n# Create a placeholder volume before modifying anything\nif [ -z \"$PROVISIONING\" ]\nthen\n    if ! does_snapshot_exist \"NcVM-installation\" && yesno_box_no \"Do you want to use LVM snapshots to be able to restore your root partition during upgrades and such?\nPlease note: this feature will not be used by this script but by other scripts later on.\nFor now we will only create a placeholder volume that will be used to let some space for snapshot volumes.\nBe aware that you will not be able to use the built-in backup solution if you choose 'No'!\nEnabling this will also force an automatic reboot after running the update script!\"\n    then\n        check_free_space\n        if [ \"$FREE_SPACE\" -ge 50 ]\n        then\n            print_text_in_color \"$ICyan\" \"Creating volume...\"\n            sleep 1\n            # Create a placeholder snapshot\n            check_command lvcreate --size 5G --name \"NcVM-installation\" ubuntu-vg\n        else\n            print_text_in_color \"$IRed\" \"Could not create volume because of insufficient space...\"\n            sleep 2\n        fi\n    fi\nfi\n\n# Fix LVM on BASE image\nif grep -q \"LVM\" /etc/fstab\nthen\n    if [ -n \"$PROVISIONING\" ] || yesno_box_yes \"Do you want to make all free space available to your root partition?\"\n    then\n    # Resize LVM (live installer is &%¤%/!\n    # VM\n    print_text_in_color \"$ICyan\" \"Extending LVM, this may take a long time...\"\n    lvextend -l +100%FREE /dev/ubuntu-vg/ubuntu-lv\n\n    # Run it again manually just to be sure it's done\n    while :\n    do\n        lvdisplay | grep \"Size\" | awk '{print $3}'\n        if ! lvextend -L +10G /dev/ubuntu-vg/ubuntu-lv >/dev/null 2>&1\n        then\n            if ! lvextend -L +1G /dev/ubuntu-vg/ubuntu-lv >/dev/null 2>&1\n            then\n                if ! lvextend -L +100M /dev/ubuntu-vg/ubuntu-lv >/dev/null 2>&1\n                then\n                    if ! lvextend -L +1M /dev/ubuntu-vg/ubuntu-lv >/dev/null 2>&1\n                    then\n                        resize2fs /dev/ubuntu-vg/ubuntu-lv\n                        break\n                    fi\n                fi\n            fi\n        fi\n    done\n    fi\nfi\n\n# Install needed dependencies\ninstall_if_not lshw\ninstall_if_not net-tools\ninstall_if_not whiptail\ninstall_if_not apt-utils\ninstall_if_not keyboard-configuration\n\n# Nice to have dependencies\ninstall_if_not bash-completion\ninstall_if_not htop\ninstall_if_not iputils-ping\n\n# Download needed libraries before execution of the first script\nmkdir -p \"$SCRIPTS\"\ndownload_script GITHUB_REPO lib\ndownload_script STATIC fetch_lib\n\n# Set locales\nrun_script ADDONS locales\n\n# Create new current user\ndownload_script STATIC adduser\nbash \"$SCRIPTS\"/adduser.sh \"nextcloud_install_production.sh\"\nrm -f \"$SCRIPTS\"/adduser.sh\n\ncheck_universe\ncheck_multiverse\n\n# Check if key is available\nif ! site_200 \"$NCREPO\"\nthen\n    msg_box \"Nextcloud repo is not available, exiting...\"\n    exit 1\nfi\n\n# Test Home/SME function\nif home_sme_server\nthen\n    msg_box \"This is the Home/SME server, function works!\"\nelse\n    print_text_in_color \"$ICyan\" \"Home/SME Server not detected. No worries, just testing the function.\"\n    sleep 3\nfi\n\n# Check if it's a clean server\nstop_if_installed postgresql\nstop_if_installed apache2\nstop_if_installed nginx\nstop_if_installed php\nstop_if_installed php-fpm\nstop_if_installed php-common\nstop_if_installed php\"$PHPVER\"-fpm\nstop_if_installed php7.0-fpm\nstop_if_installed php7.1-fpm\nstop_if_installed php7.2-fpm\nstop_if_installed php7.3-fpm\nstop_if_installed php8.0-fpm\nstop_if_installed php8.1-fpm\nstop_if_installed php8.2-fpm\nstop_if_installed mysql-common\nstop_if_installed mariadb-server\n\n# We don't want automatic updates since they might fail (we use our own script)\nif is_this_installed unattended-upgrades\nthen\n    apt-get purge unattended-upgrades -y\n    apt-get autoremove -y\n    rm -rf /var/log/unattended-upgrades\nfi\n\n# Create $SCRIPTS dir\nif [ ! -d \"$SCRIPTS\" ]\nthen\n    mkdir -p \"$SCRIPTS\"\nfi\n\n# Create $VMLOGS dir\nif [ ! -d \"$VMLOGS\" ]\nthen\n    mkdir -p \"$VMLOGS\"\nfi\n\n# Install needed network\ninstall_if_not netplan.io\n\n# APT over HTTPS\ninstall_if_not apt-transport-https\n\n# Install build-essentials to get make\ninstall_if_not build-essential\n\n# Install a decent text editor\ninstall_if_not nano\n\n# Install package for crontab\ninstall_if_not cron\n\n# Make sure sudo exists (needed in adduser.sh)\ninstall_if_not sudo\n\n# Make sure add-apt-repository exists (needed in lib.sh)\ninstall_if_not software-properties-common\n\n# Set dual or single drive setup\nif [ -n \"$PROVISIONING\" ]\nthen\n    choice=\"2 Disks Auto\"\nelse\n    msg_box \"This server is designed to run with two disks, one for OS and one for DATA. \\\nThis will get you the best performance since the second disk is using ZFS which is a superior filesystem.\n\nThough not recommended, you can still choose to only run on one disk, \\\nif for example it's your only option on the hypervisor you're running.\n\nYou will now get the option to decide which disk you want to use for DATA, \\\nor run the automatic script that will choose the available disk automatically.\"\n\n    choice=$(whiptail --title \"$TITLE - Choose disk format\" --nocancel --menu \\\n\"How would you like to configure your disks?\n$MENU_GUIDE\" \"$WT_HEIGHT\" \"$WT_WIDTH\" 4 \\\n\"2 Disks Auto\" \"(Automatically configured)\" \\\n\"2 Disks Manual\" \"(Choose by yourself)\" \\\n\"1 Disk\" \"(Only use one disk /mnt/ncdata - NO ZFS!)\" 3>&1 1>&2 2>&3)\nfi\n\ncase \"$choice\" in\n    \"2 Disks Auto\")\n        run_script DISK format-sdb\n        # Change to zfs-mount-generator\n        run_script DISK change-to-zfs-mount-generator\n        # Create daily zfs prune script\n        run_script DISK create-daily-zfs-prune\n\n    ;;\n    \"2 Disks Manual\")\n        run_script DISK format-chosen\n        # Change to zfs-mount-generator\n        run_script DISK change-to-zfs-mount-generator\n        # Create daily zfs prune script\n        run_script DISK create-daily-zfs-prune\n    ;;\n    \"1 Disk\")\n        print_text_in_color \"$IRed\" \"1 Disk setup chosen.\"\n        sleep 2\n    ;;\n    *)\n    ;;\nesac\n\n# Set DNS resolver\n# https://unix.stackexchange.com/questions/442598/how-to-configure-systemd-resolved-and-systemd-networkd-to-use-local-dns-server-f\nwhile :\ndo\n    if [ -n \"$PROVISIONING\" ]\n    then\n        choice=\"Quad9\"\n    else\n        choice=$(whiptail --title \"$TITLE - Set DNS Resolver\" --menu \\\n\"Which DNS provider should this Nextcloud box use?\n$MENU_GUIDE\" \"$WT_HEIGHT\" \"$WT_WIDTH\" 4 \\\n\"Quad9\" \"(https://www.quad9.net/)\" \\\n\"Cloudflare\" \"(https://www.cloudflare.com/dns/)\" \\\n\"Local\" \"($GATEWAY) - DNS on gateway\" \\\n\"Expert\" \"If you really know what you're doing!\" 3>&1 1>&2 2>&3)\n    fi\n\n    case \"$choice\" in\n        \"Quad9\")\n            sed -i \"s|^#\\?DNS=.*$|DNS=9.9.9.9 149.112.112.112 2620:fe::fe 2620:fe::9|g\" /etc/systemd/resolved.conf\n        ;;\n        \"Cloudflare\")\n            sed -i \"s|^#\\?DNS=.*$|DNS=1.1.1.1 1.0.0.1 2606:4700:4700::1111 2606:4700:4700::1001|g\" /etc/systemd/resolved.conf\n        ;;\n        \"Local\")\n            sed -i \"s|^#\\?DNS=.*$|DNS=$GATEWAY|g\" /etc/systemd/resolved.conf\n            systemctl restart systemd-resolved.service\n            if network_ok\n            then\n                break\n            else\n                msg_box \"Could not validate the local DNS server. Pick an Internet DNS server and try again.\"\n                continue\n            fi\n        ;;\n        \"Expert\")\n            OWNDNS=$(input_box_flow \"Please choose your own DNS server(s) with a space in between, e.g: $GATEWAY 9.9.9.9 (NS1 NS2)\")\n            sed -i \"s|^#\\?DNS=.*$|DNS=$OWNDNS|g\" /etc/systemd/resolved.conf\n            systemctl restart systemd-resolved.service\n            if network_ok\n            then\n                break\n                unset OWNDNS \n            else\n                msg_box \"Could not validate the local DNS server. Pick an Internet DNS server and try again.\"\n                continue\n            fi\n        ;;\n        *)\n        ;;\n    esac\n    if test_connection\n    then\n        break\n    else\n        msg_box \"Could not validate the DNS server. Please try again.\"\n    fi\ndone\n\n# Install PostgreSQL\napt-get update -q4 & spinner_loading\ninstall_if_not postgresql\n\n# Create DB\ncd /tmp\nsudo -u postgres psql <<END\nCREATE USER $PGDB_USER WITH PASSWORD '$PGDB_PASS';\nCREATE DATABASE nextcloud_db WITH OWNER $PGDB_USER TEMPLATE template0 ENCODING 'UTF8';\nEND\nprint_text_in_color \"$ICyan\" \"PostgreSQL password: $PGDB_PASS\"\nsystemctl restart postgresql.service\n\n# Install Apache\ncheck_command install_if_not apache2\na2enmod rewrite \\\n        headers \\\n        proxy \\\n        proxy_fcgi \\\n        setenvif \\\n        env \\\n        mime \\\n        dir \\\n        authz_core \\\n        alias \\\n        mpm_event \\\n        ssl\n        \n# We don't use Apache PHP (just to be sure)\na2dismod mpm_prefork\n\n# Disable server tokens in Apache\nif ! grep -q 'ServerSignature' /etc/apache2/apache2.conf\nthen\n{\necho \"# Turn off ServerTokens for both Apache and PHP\"\necho \"ServerSignature Off\"\necho \"ServerTokens Prod\"\n} >> /etc/apache2/apache2.conf\n\n    check_command systemctl restart apache2.service\nfi\n\n# Install PHP \"$PHPVER\"\ninstall_if_not php\"$PHPVER\"-fpm\ninstall_if_not php\"$PHPVER\"-intl\ninstall_if_not php\"$PHPVER\"-ldap\ninstall_if_not php\"$PHPVER\"-imap\ninstall_if_not php\"$PHPVER\"-gd\ninstall_if_not php\"$PHPVER\"-pgsql\ninstall_if_not php\"$PHPVER\"-curl\ninstall_if_not php\"$PHPVER\"-xml\ninstall_if_not php\"$PHPVER\"-zip\ninstall_if_not php\"$PHPVER\"-mbstring\ninstall_if_not php\"$PHPVER\"-soap\ninstall_if_not php\"$PHPVER\"-gmp\ninstall_if_not php\"$PHPVER\"-bz2\ninstall_if_not php\"$PHPVER\"-bcmath\ninstall_if_not php-pear\n\n# Enable php-fpm\na2enconf php\"$PHPVER\"-fpm\n\n# Enable HTTP/2 server wide\nprint_text_in_color \"$ICyan\" \"Enabling HTTP/2 server wide...\"\ncat << HTTP2_ENABLE > \"$HTTP2_CONF\"\n<IfModule http2_module>\n    Protocols h2 http/1.1\n</IfModule>\nHTTP2_ENABLE\nprint_text_in_color \"$IGreen\" \"$HTTP2_CONF was successfully created\"\na2enmod http2\nrestart_webserver\n\n# Set up a php-fpm pool with a unixsocket\ncat << POOL_CONF > \"$PHP_POOL_DIR\"/nextcloud.conf\n[Nextcloud]\nuser = www-data\ngroup = www-data\nlisten = /run/php/php\"$PHPVER\"-fpm.nextcloud.sock\nlisten.owner = www-data\nlisten.group = www-data\npm = dynamic\n; max_children is set dynamically with calculate_php_fpm()\npm.max_children = 8\npm.start_servers = 3\npm.min_spare_servers = 2\npm.max_spare_servers = 3\nenv[HOSTNAME] = $(hostname -f)\nenv[PATH] = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin\nenv[TMP] = /tmp\nenv[TMPDIR] = /tmp\nenv[TEMP] = /tmp\nsecurity.limit_extensions = .php\nphp_admin_value [cgi.fix_pathinfo] = 1\n\n; Optional\n; pm.max_requests = 2000\nPOOL_CONF\n\n# Disable the idling example pool.\nmv \"$PHP_POOL_DIR\"/www.conf \"$PHP_POOL_DIR\"/www.conf.backup\n\n# Enable the new php-fpm config\nrestart_webserver\n\n# Calculate the values of PHP-FPM based on the amount of RAM available (it's done in the startup script as well)\ncalculate_php_fpm\n\n# Install VM-tools\nif [ \"$SYSVENDOR\" == \"VMware, Inc.\" ];\nthen\n    install_if_not open-vm-tools\nelif [[ \"$SYSVENDOR\" == \"QEMU\" || \"$SYSVENDOR\" == \"Red Hat\" ]];\nthen\n    install_if_not qemu-guest-agent\n    systemctl enable qemu-guest-agent\n    systemctl start qemu-guest-agent\nfi\n\n# Get not-latest Nextcloud version\nif [ -n \"$NOT_LATEST\" ]\nthen\n    while [ -z \"$NCVERSION\" ]\n    do\n        print_text_in_color \"$ICyan\" \"Fetching the not-latest Nextcloud version...\"\n        NCVERSION=$(curl -s -m 900 \"$NCREPO\"/ | sed --silent 's/.*href=\"nextcloud-\\([^\"]\\+\\).zip.asc\".*/\\1/p' \\\n| sort --version-sort | grep -v \"\\.0$\\|\\.1$\\|\\.2$\" | tail -1)\n        STABLEVERSION=\"nextcloud-$NCVERSION\"\n        print_text_in_color \"$IGreen\" \"$NCVERSION\"\n    done\nfi\n\n# Download and validate Nextcloud package\ncheck_command download_verify_nextcloud_stable\n\nif [ ! -f \"$HTML/$STABLEVERSION.tar.bz2\" ]\nthen\n    msg_box \"Aborting,something went wrong with the download of $STABLEVERSION.tar.bz2\"\n    exit 1\nfi\n\n# Extract package\ntar -xjf \"$HTML/$STABLEVERSION.tar.bz2\" -C \"$HTML\" & spinner_loading\nrm \"$HTML/$STABLEVERSION.tar.bz2\"\n\n# Secure permissions\ndownload_script STATIC setup_secure_permissions_nextcloud\nbash \"$SECURE\" & spinner_loading\n\n# Ask to set a custom username\nif [ -z \"$PROVISIONING\" ]\nthen\n    if yesno_box_no \"Nextcloud is about to be installed.\\nDo you want to change the standard GUI user '$GUIUSER' to something else?\"\n    then\n        while :\n        do\n            GUIUSER=$(input_box_flow \"Please type in the name of the Web Admin in Nextcloud.\n\\nThe only allowed characters for the username are:\n'a-z', 'A-Z', '0-9', and '_.@-'\")\n            if [[ \"$GUIUSER\" == *\" \"* ]]\n            then\n                msg_box \"Please don't use spaces.\"\n            # - has to be escaped otherwise it won't work.\n            # Inspired by: https://unix.stackexchange.com/a/498731/433213\n            elif [ \"${GUIUSER//[A-Za-z0-9_.\\-@]}\" ]\n            then\n                msg_box \"Allowed characters for the username are:\\na-z', 'A-Z', '0-9', and '_.@-'\\n\\nPlease try again.\"\n            else\n                break\n            fi\n        done\n        while :\n        do\n            GUIPASS=$(input_box_flow \"Please type in the new password for the new Web Admin ($GUIUSER) in Nextcloud.\")\n            if [[ \"$GUIPASS\" == *\" \"* ]]\n            then\n                msg_box \"Please don't use spaces.\"\n            fi\n            if [ \"${GUIPASS//[A-Za-z0-9_.\\-@]}\" ]\n            then\n                msg_box \"Allowed characters for the password are:\\na-z', 'A-Z', '0-9', and '_.@-'\\n\\nPlease try again.\"\n            else\n                msg_box \"The new Web Admin in Nextcloud is now: $GUIUSER\\nThe password is set to: $GUIPASS\nThis is used when you login to Nextcloud itself, i.e. on the web.\"\n            break\n            fi\n        done\n    fi\nfi\n\n# Install Nextcloud\n# NC 29 fix ## TODO: is this needed in coming versions?\nchown www-data:www-data \"$NCPATH\"/data\n# Normal install\nprint_text_in_color \"$ICyan\" \"Installing Nextcloud, it might take a while...\"\ncd \"$NCPATH\"\n# Don't use nextcloud_occ here as it takes alooong time.\n# https://github.com/nextcloud/vm/issues/2542#issuecomment-1700406020\ncheck_command sudo -u www-data php \"$NCPATH\"/occ maintenance:install \\\n--data-dir=\"$NCDATA\" \\\n--database=pgsql \\\n--database-name=nextcloud_db \\\n--database-user=\"$PGDB_USER\" \\\n--database-pass=\"$PGDB_PASS\" \\\n--admin-user=\"$GUIUSER\" \\\n--admin-pass=\"$GUIPASS\"\nprint_text_in_color \"$ICyan\" \"Nextcloud version:\"\nnextcloud_occ status\nsleep 3\n\n# Install PECL dependencies\ninstall_if_not php\"$PHPVER\"-dev\n\n# Install Redis (distributed cache)\nrun_script ADDONS redis-server-ubuntu\n\n# Install smbclient\n# php\"$PHPVER\"-smbclient does not yet work in PHP 7.4\ninstall_if_not libsmbclient-dev\nyes no | pecl install smbclient\nif [ ! -f \"$PHP_MODS_DIR\"/smbclient.ini ]\nthen\n    touch \"$PHP_MODS_DIR\"/smbclient.ini\nfi\nif ! grep -qFx extension=smbclient.so \"$PHP_MODS_DIR\"/smbclient.ini\nthen\n    echo \"# PECL smbclient\" > \"$PHP_MODS_DIR\"/smbclient.ini\n    echo \"extension=smbclient.so\" >> \"$PHP_MODS_DIR\"/smbclient.ini\n    check_command phpenmod -v ALL smbclient\nfi\n\n# Enable igbinary for PHP\n# https://github.com/igbinary/igbinary\nif is_this_installed \"php$PHPVER\"-dev\nthen\n    if ! yes no | pecl install -Z igbinary\n    then\n        msg_box \"igbinary PHP module installation failed\"\n        exit\n    else\n        print_text_in_color \"$IGreen\" \"igbinary PHP module installation OK!\"\n    fi\n{\necho \"# igbinary for PHP\"\necho \"session.serialize_handler=igbinary\"\necho \"igbinary.compact_strings=On\"\n} >> \"$PHP_INI\"\n    if [ ! -f \"$PHP_MODS_DIR\"/igbinary.ini ]\n    then\n        touch \"$PHP_MODS_DIR\"/igbinary.ini\n    fi\n    if ! grep -qFx extension=igbinary.so \"$PHP_MODS_DIR\"/igbinary.ini\n    then\n        echo \"# PECL igbinary\" > \"$PHP_MODS_DIR\"/igbinary.ini\n        echo \"extension=igbinary.so\" >> \"$PHP_MODS_DIR\"/igbinary.ini\n        check_command phpenmod -v ALL igbinary\n    fi\nrestart_webserver\nfi\n\n# Prepare cron.php to be run every 5 minutes\ncrontab -u www-data -l | { cat; echo \"*/5  *  *  *  * php -f $NCPATH/cron.php > /dev/null 2>&1\"; } | crontab -u www-data -\n\n# Run the updatenotification on a schedule\nnextcloud_occ config:system:set upgrade.disable-web --type=bool --value=true\nnextcloud_occ config:app:set updatenotification notify_groups --value=\"[]\"\nprint_text_in_color \"$ICyan\" \"Configuring update notifications specific for this server...\"\ndownload_script STATIC updatenotification\ncheck_command chmod +x \"$SCRIPTS\"/updatenotification.sh\ncrontab -u root -l | { cat; echo \"59 $AUT_UPDATES_TIME * * * $SCRIPTS/updatenotification.sh > /dev/null 2>&1\"; } | crontab -u root -\n\n# Change values in php.ini (increase max file size)\n# max_execution_time\nsed -i \"s|max_execution_time =.*|max_execution_time = 3500|g\" \"$PHP_INI\"\n# max_input_time\nsed -i \"s|max_input_time =.*|max_input_time = 3600|g\" \"$PHP_INI\"\n# memory_limit\nsed -i \"s|memory_limit =.*|memory_limit = 512M|g\" \"$PHP_INI\"\n# post_max\nsed -i \"s|post_max_size =.*|post_max_size = 1100M|g\" \"$PHP_INI\"\n# upload_max\nsed -i \"s|upload_max_filesize =.*|upload_max_filesize = 1000M|g\" \"$PHP_INI\"\n\n# Set logging\nnextcloud_occ config:system:set log_type --value=file\nnextcloud_occ config:system:set logfile --value=\"$VMLOGS/nextcloud.log\"\nrm -f \"$NCDATA/nextcloud.log\"\nrm -f \"$NCPATH/data/nextcloud.log\"\nnextcloud_occ config:system:set loglevel --value=2\ninstall_and_enable_app admin_audit\nnextcloud_occ config:app:set admin_audit logfile --value=\"$VMLOGS/audit.log\"\nnextcloud_occ config:system:set log.condition apps 0 --value admin_audit\n\n# Set maintenance window for cron\n# https://docs.nextcloud.com/server/29/admin_manual/configuration_server/background_jobs_configuration.html#background-jobs\nnextcloud_occ config:system:set maintenance_window_start --type=integer --value=2\n\n# Set SMTP mail\nnextcloud_occ config:system:set mail_smtpmode --value=\"smtp\"\n\n# Forget login/session after 30 minutes\nnextcloud_occ config:system:set remember_login_cookie_lifetime --value=\"1800\"\n\n# Set logrotate (max 10 MB)\nnextcloud_occ config:system:set log_rotate_size --value=\"10485760\"\n\n# Set trashbin retention obligation (save it in trashbin for 60 days or delete when space is needed)\nnextcloud_occ config:system:set trashbin_retention_obligation --value=\"auto, 60\"\n\n# Set versions retention obligation (save versions for 180 days or delete when space is needed)\nnextcloud_occ config:system:set versions_retention_obligation --value=\"auto, 180\"\n\n# Set activity retention obligation (save activity feed for 120 days, defaults to 365 days otherwise)\nnextcloud_occ config:system:set activity_expire_days --value=\"120\"\n\n# Remove simple signup\nnextcloud_occ config:system:set simpleSignUpLink.shown --type=bool --value=false\n\n# Set chunk_size for files app to 100MB (defaults to 10MB)\nnextcloud_occ config:app:set files max_chunk_size --value=\"104857600\"\n\n# Set product name\nif home_sme_server\nthen\n    PRODUCTNAME=\"Nextcloud HanssonIT Server\"\nelse\n    PRODUCTNAME=\"Nextcloud HanssonIT VM\"\nfi\nif is_app_installed theming\nthen\n    if [ \"$(nextcloud_occ config:app:get theming productName)\" != \"$PRODUCTNAME\" ]\n    then\n        nextcloud_occ config:app:set theming productName --value \"$PRODUCTNAME\"\n    fi\nfi\n\n# Enable OPCache for PHP\n# https://docs.nextcloud.com/server/14/admin_manual/configuration_server/server_tuning.html#enable-php-opcache\nphpenmod opcache\n{\necho \"# OPcache settings for Nextcloud\"\necho \"opcache.enable=1\"\necho \"opcache.enable_cli=1\"\necho \"opcache.interned_strings_buffer=$opcache_interned_strings_buffer_value\"\necho \"opcache.max_accelerated_files=10000\"\necho \"opcache.memory_consumption=256\"\necho \"opcache.save_comments=1\"\necho \"opcache.revalidate_freq=1\"\necho \"opcache.validate_timestamps=1\"\n} >> \"$PHP_INI\"\n\n# PHP-FPM optimization\n# https://geekflare.com/php-fpm-optimization/\nsed -i \"s|;emergency_restart_threshold.*|emergency_restart_threshold = 10|g\" /etc/php/\"$PHPVER\"/fpm/php-fpm.conf\nsed -i \"s|;emergency_restart_interval.*|emergency_restart_interval = 1m|g\" /etc/php/\"$PHPVER\"/fpm/php-fpm.conf\nsed -i \"s|;process_control_timeout.*|process_control_timeout = 10|g\" /etc/php/\"$PHPVER\"/fpm/php-fpm.conf\n\n# PostgreSQL values for PHP (https://docs.nextcloud.com/server/latest/admin_manual/configuration_database/linux_database_configuration.html#postgresql-database)\n{\necho \"\"\necho \"[PostgresSQL]\"\necho \"pgsql.allow_persistent = On\"\necho \"pgsql.auto_reset_persistent = Off\"\necho \"pgsql.max_persistent = -1\"\necho \"pgsql.max_links = -1\"\necho \"pgsql.ignore_notice = 0\"\necho \"pgsql.log_notice = 0\"\n} >> \"$PHP_FPM_DIR\"/conf.d/20-pdo_pgsql.ini\n\n# Fix https://github.com/nextcloud/vm/issues/714\nprint_text_in_color \"$ICyan\" \"Optimizing Nextcloud...\"\nyes | nextcloud_occ db:convert-filecache-bigint\nnextcloud_occ db:add-missing-indices\nwhile [ -z \"$CURRENTVERSION\" ]\ndo\n    CURRENTVERSION=$(sudo -u www-data php \"$NCPATH\"/occ status | grep \"versionstring\" | awk '{print $3}')\ndone\nif [ \"${CURRENTVERSION%%.*}\" -ge \"19\" ]\nthen\n    nextcloud_occ db:add-missing-columns\nfi\nif [ \"${CURRENTVERSION%%.*}\" -ge \"20\" ]\nthen\n    nextcloud_occ db:add-missing-primary-keys\nfi\n\n# Install Figlet\ninstall_if_not figlet\n\n# To be able to use snakeoil certs\ninstall_if_not ssl-cert\n\n# Generate $HTTP_CONF\nif [ ! -f \"$SITES_AVAILABLE\"/\"$HTTP_CONF\" ]\nthen\n    touch \"$SITES_AVAILABLE/$HTTP_CONF\"\n    cat << HTTP_CREATE > \"$SITES_AVAILABLE/$HTTP_CONF\"\n<VirtualHost *:80>\n\n### YOUR SERVER ADDRESS ###\n#    ServerAdmin admin@example.com\n#    ServerName cloud.example.com\n\n### SETTINGS ###\n    <FilesMatch \"\\.php$\">\n        SetHandler \"proxy:unix:/run/php/php$PHPVER-fpm.nextcloud.sock|fcgi://localhost\"\n    </FilesMatch>\n\n    # Logs\n    LogLevel warn\n    CustomLog \\${APACHE_LOG_DIR}/access.log combined\n    ErrorLog \\${APACHE_LOG_DIR}/error.log\n\n    # Document root folder\n    DocumentRoot $NCPATH\n\n    # The Nextcloud folder\n    <Directory $NCPATH>\n    Options Indexes FollowSymLinks\n    AllowOverride All\n    Require all granted\n    Satisfy Any\n    # This is to include all the Nextcloud rules due to that we use PHP-FPM and .htaccess aren't read\n    Include $NCPATH/.htaccess\n    </Directory>\n\n    # Deny access to your data directory\n    <Directory $NCDATA>\n    Require all denied\n    </Directory>\n\n    # Deny access to the Nextcloud config folder\n    <Directory $NCPATH/config/>\n    Require all denied\n    </Directory>\n\n    <IfModule mod_dav.c>\n    Dav off\n    </IfModule>\n\n    # The following lines prevent .htaccess and .htpasswd files from being viewed by Web clients.\n    <Files \".ht*\">\n    Require all denied\n    </Files>\n\n    SetEnv HOME $NCPATH\n    SetEnv HTTP_HOME $NCPATH\n\n    # Disable HTTP TRACE method.\n    TraceEnable off\n    # Disable HTTP TRACK method.\n    RewriteEngine On\n    RewriteCond %{REQUEST_METHOD} ^TRACK\n    RewriteRule .* - [R=405,L]\n\n    # Avoid \"Sabre\\DAV\\Exception\\BadRequest: expected filesize XXXX got XXXX\"\n    <IfModule mod_reqtimeout.c>\n    RequestReadTimeout body=0\n    </IfModule>\n</VirtualHost>\nHTTP_CREATE\n    print_text_in_color \"$IGreen\" \"$SITES_AVAILABLE/$HTTP_CONF was successfully created.\"\nfi\n\n# Generate $TLS_CONF\nif [ ! -f \"$SITES_AVAILABLE\"/\"$TLS_CONF\" ]\nthen\n    touch \"$SITES_AVAILABLE/$TLS_CONF\"\n    cat << TLS_CREATE > \"$SITES_AVAILABLE/$TLS_CONF\"\n# <VirtualHost *:80>\n#     RewriteEngine On\n#     RewriteRule ^(.*)$ https://%{HTTP_HOST}\\$1 [END,NE,R=permanent]\n# </VirtualHost>\n\n<VirtualHost *:443>\n    Header add Strict-Transport-Security: \"max-age=15552000;includeSubdomains\"\n\n### YOUR SERVER ADDRESS ###\n#    ServerAdmin admin@example.com\n#    ServerName cloud.example.com\n\n### SETTINGS ###\n    <FilesMatch \"\\.php$\">\n        SetHandler \"proxy:unix:/run/php/php$PHPVER-fpm.nextcloud.sock|fcgi://localhost\"\n    </FilesMatch>\n\n    # Intermediate configuration\n    SSLEngine               on\n    SSLCompression          off\n    SSLProtocol             -all +TLSv1.2 +TLSv1.3\n    SSLCipherSuite          ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384\n    SSLHonorCipherOrder     off\n    SSLSessionTickets       off\n    ServerSignature         off\n\n    # Logs\n    LogLevel warn\n    CustomLog \\${APACHE_LOG_DIR}/access.log combined\n    ErrorLog \\${APACHE_LOG_DIR}/error.log\n\n    # Document root folder\n    DocumentRoot $NCPATH\n\n    # The Nextcloud folder\n    <Directory $NCPATH>\n    Options Indexes FollowSymLinks\n    AllowOverride All\n    Require all granted\n    Satisfy Any\n    # This is to include all the Nextcloud rules due to that we use PHP-FPM and .htaccess aren't read\n    Include $NCPATH/.htaccess\n    </Directory>\n\n    # Deny access to your data directory\n    <Directory $NCDATA>\n    Require all denied\n    </Directory>\n\n    # Deny access to the Nextcloud config folder\n    <Directory $NCPATH/config/>\n    Require all denied\n    </Directory>\n\n    <IfModule mod_dav.c>\n    Dav off\n    </IfModule>\n\n    # The following lines prevent .htaccess and .htpasswd files from being viewed by Web clients.\n    <Files \".ht*\">\n    Require all denied\n    </Files>\n\n    SetEnv HOME $NCPATH\n    SetEnv HTTP_HOME $NCPATH\n\n    # Disable HTTP TRACE method.\n    TraceEnable off\n    # Disable HTTP TRACK method.\n    RewriteEngine On\n    RewriteCond %{REQUEST_METHOD} ^TRACK\n    RewriteRule .* - [R=405,L]\n\n    # Avoid \"Sabre\\DAV\\Exception\\BadRequest: expected filesize XXXX got XXXX\"\n    <IfModule mod_reqtimeout.c>\n    RequestReadTimeout body=0\n    </IfModule>\n\n    # Avoid zero byte files (only works in Ubuntu 24.04 -->>)\n    # See https://github.com/nextcloud/server/issues/3056\n    SetEnv proxy-sendcl 1\n\n### LOCATION OF CERT FILES ###\n    SSLCertificateFile /etc/ssl/certs/ssl-cert-snakeoil.pem\n    SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key\n</VirtualHost>\nTLS_CREATE\n    print_text_in_color \"$IGreen\" \"$SITES_AVAILABLE/$TLS_CONF was successfully created.\"\nfi\n\n# Enable new config\na2ensite \"$TLS_CONF\"\na2ensite \"$HTTP_CONF\"\na2dissite default-ssl\nrestart_webserver\n\nif [ -n \"$PROVISIONING\" ]\nthen\n    choice=\"Calendar Contacts IssueTemplate PDFViewer Extract Text Mail Deck Group-Folders\"\nelse\n    choice=$(whiptail --title \"$TITLE - Install apps or software\" --checklist \\\n\"Automatically configure and install selected apps or software\n$CHECKLIST_GUIDE\" \"$WT_HEIGHT\" \"$WT_WIDTH\" 4 \\\n\"Calendar\" \"\" ON \\\n\"Contacts\" \"\" ON \\\n\"PDFViewer\" \"\" ON \\\n\"Extract\" \"\" ON \\\n\"Text\" \"\" ON \\\n\"Mail\" \"\" ON \\\n\"Deck\" \"\" ON \\\n\"Collectives\" \"\" ON \\\n\"Suspicious Login detection\" \"\" ON \\\n\"IssueTemplate\" \"\" OFF \\\n\"Group-Folders\" \"\" OFF 3>&1 1>&2 2>&3)\nfi\n\ncase \"$choice\" in\n    *\"Calendar\"*)\n        install_and_enable_app calendar\n    ;;&\n    *\"Contacts\"*)\n        install_and_enable_app contacts\n    ;;&\n    *\"IssueTemplate\"*)\n        # install_and_enable_app issuetemplate\n        rm -rf \"$NCPATH\"apps/issuetemplate\n        nextcloud_occ app:install --force --keep-disabled issuetemplate\n        sed -i \"s|20|${CURRENTVERSION%%.*}|g\" \"$NCPATH\"/apps/issuetemplate/appinfo/info.xml\n        nextcloud_occ_no_check app:enable issuetemplate\n    ;;&\n    *\"PDFViewer\"*)\n        install_and_enable_app files_pdfviewer\n    ;;&\n    *\"Extract\"*)\n        if install_and_enable_app extract\n        then\n            install_if_not unrar\n            install_if_not p7zip\n            install_if_not p7zip-full\n        fi\n    ;;&\n    *\"Text\"*)\n        install_and_enable_app text\n    ;;&\n    *\"Mail\"*)\n        install_and_enable_app mail\n    ;;&\n    *\"Deck\"*)\n        install_and_enable_app deck\n    ;;&\n    *\"Collectives\"*)\n        install_and_enable_app collectives\n        install_if_not php\"$PHPVER\"-sqlite3\n    ;;&\n    *\"Suspicious Login detection\"*)\n        install_and_enable_app suspicios_login\n    ;;&\n    *\"Group-Folders\"*)\n        install_and_enable_app groupfolders\n    ;;&\n    *)\n    ;;\nesac\n\n# Cleanup\napt-get autoremove -y\napt-get autoclean\nfind /root \"/home/$UNIXUSER\" -type f \\( -name '*.sh*' -o -name '*.html*' -o -name '*.tar*' -o -name '*.zip*' \\) -delete\n\n# Install virtual kernels for Hyper-V, (and extra for UTF8 kernel module + Collabora and OnlyOffice)\n# Kernel 5.4\nif ! home_sme_server\nthen\n    if [ \"$SYSVENDOR\" == \"Microsoft Corporation\" ]\n    then\n        # Hyper-V\n        install_if_not linux-virtual\n        install_if_not linux-image-virtual\n        install_if_not linux-tools-virtual\n        install_if_not linux-cloud-tools-virtual\n        install_if_not linux-azure\n        # linux-image-extra-virtual only needed for AUFS driver with Docker\n    fi\nfi\n\n# Add aliases\nif [ -f /root/.bash_aliases ]\nthen\n    if ! grep -q \"nextcloud\" /root/.bash_aliases\n    then\n{\necho \"alias nextcloud_occ='sudo -u www-data php /var/www/nextcloud/occ'\"\necho \"alias run_update_nextcloud='bash /var/scripts/update.sh'\"\n} >> /root/.bash_aliases\n    fi\nelif [ ! -f /root/.bash_aliases ]\nthen\n{\necho \"alias nextcloud_occ='sudo -u www-data php /var/www/nextcloud/occ'\"\necho \"alias run_update_nextcloud='bash /var/scripts/update.sh'\"\n} > /root/.bash_aliases\nfi\n\n# Fix GRUB defaults\nif grep -q 'GRUB_CMDLINE_LINUX_DEFAULT=\"maybe-ubiquity\"' /etc/default/grub\nthen\n    sed -i \"s|GRUB_CMDLINE_LINUX_DEFAULT=.*|GRUB_CMDLINE_LINUX_DEFAULT=|g\" /etc/default/grub\nfi\n\n# Set secure permissions final (./data/.htaccess has wrong permissions otherwise)\nbash \"$SECURE\" & spinner_loading\n\n# Put IP address in /etc/issue (shown before the login)\nif [ -f /etc/issue ]\nthen\n   printf '%s\\n' \"\\4\" >> /etc/issue\nfi\n\n# Fix Realtek on PN51\nif asuspn51\nthen\n    if ! version 24.04 \"$DISTRO\" 24.04.10\n    then\n        # Upgrade Realtek drivers\n        print_text_in_color \"$ICyan\" \"Upgrading Realtek firmware...\"\n        curl_to_dir https://raw.githubusercontent.com/nextcloud/vm/main/network/asusnuc pn51.sh \"$SCRIPTS\"\n        bash \"$SCRIPTS\"/pn51.sh\n    fi\nfi\n\n# Update if it's the Home/SME Server\nif home_sme_server\nthen\n    # Upgrade system\n    print_text_in_color \"$ICyan\" \"System will now upgrade...\"\n    run_script STATIC update\nfi\n\n# Force MOTD to show correct number of updates\nif is_this_installed update-notifier-common\nthen\n    sudo /usr/lib/update-notifier/update-motd-updates-available --force\nfi\n\n# It has to be this order:\n# Download scripts\n# chmod +x\n# Set permissions for ncadmin in the change scripts\n\nprint_text_in_color \"$ICyan\" \"Getting scripts from GitHub to be able to run the first setup...\"\n\n# Get needed scripts for first bootup\ndownload_script GITHUB_REPO nextcloud-startup-script\ndownload_script STATIC instruction\ndownload_script STATIC history\ndownload_script NETWORK static_ip\n# Moved from the startup script 2021-01-04\ndownload_script LETS_ENC activate-tls\ndownload_script STATIC update\ndownload_script STATIC setup_secure_permissions_nextcloud\ndownload_script STATIC change_db_pass\ndownload_script STATIC nextcloud\ndownload_script MENU menu\ndownload_script MENU server_configuration\ndownload_script MENU nextcloud_configuration\ndownload_script MENU additional_apps\ndownload_script MENU desec_menu\n\n# Make $SCRIPTS excutable\nchmod +x -R \"$SCRIPTS\"\nchown root:root -R \"$SCRIPTS\"\n\n# Prepare first bootup\ncheck_command run_script STATIC change-ncadmin-profile\ncheck_command run_script STATIC change-root-profile\n\n# Disable hibernation\nprint_text_in_color \"$ICyan\" \"Disable hibernation...\"\nsystemctl mask sleep.target suspend.target hibernate.target hybrid-sleep.target\n\n# Reboot\nif [ -z \"$PROVISIONING\" ]\nthen\n    msg_box \"Installation almost done, system will reboot when you hit OK.\n\nAfter reboot, please login to run the setup script.\"\nfi\nreboot\n"
        },
        {
          "name": "nextcloud_update.sh",
          "type": "blob",
          "size": 48.7626953125,
          "content": "#!/bin/bash\n\n#################################################################################################################\n# DO NOT USE THIS SCRIPT WHEN UPDATING NEXTCLOUD / YOUR SERVER! RUN `sudo bash /var/scripts/update.sh` INSTEAD. #\n#################################################################################################################\n\n# T&M Hansson IT AB © - 2024, https://www.hanssonit.se/\n# GNU General Public License v3.0\n# https://github.com/nextcloud/vm/blob/main/LICENSE\n\ntrue\nSCRIPT_NAME=\"Nextcloud Update Script\"\n# shellcheck source=lib.sh\nsource <(curl -sL https://raw.githubusercontent.com/nextcloud/vm/main/lib.sh)\n\n# Get all needed variables from the library\nncdb\nnc_update\n\n# Check for errors + debug code and abort if something isn't right\n# 1 = ON\n# 0 = OFF\nDEBUG=0\ndebug_mode\n\nPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin\n\n# Must be root\nroot_check\n\n# Check if dpkg or apt is running\nis_process_running apt\nis_process_running dpkg\n\n# Automatically restart services (Ubuntu 24.04)\nif ! version 16.04.10 \"$DISTRO\" 22.04.10\nthen\n    if [ ! -f /etc/needrestart/needrestart.conf ]\n    then\n        install_if_not needrestart\n    fi\n    if ! grep -rq \"{restart} = 'a'\" /etc/needrestart/needrestart.conf\n    then\n        # Restart mode: (l)ist only, (i)nteractive or (a)utomatically.\n        sed -i \"s|#\\$nrconf{restart} =.*|\\$nrconf{restart} = 'a'\\;|g\" /etc/needrestart/needrestart.conf\n    fi\nfi\n\n# Check for pending-snapshot\nif does_snapshot_exist \"NcVM-snapshot-pending\"\nthen\n    msg_box \"Cannot proceed with the update currently because NcVM-snapshot-pending exists.\\n\nIt is possible that a backup is currently running or an update wasn't successful.\\n\nAdvice: don't restart your system now if that is the case!\\n\nIf you are sure that no update or backup is currently running, you can fix this by rebooting your server.\"\n    # Kill all \"$SCRIPTS/update.sh\" processes to make sure that no automatic restart happens after exiting this script\n    # shellcheck disable=2009\n    PROCESS_IDS=$(ps aux | grep \"$SCRIPTS/update.sh\" | grep -v grep | awk '{print $2}')\n    if [ -n \"$PROCESS_IDS\" ]\n    then\n        mapfile -t PROCESS_IDS <<< \"$PROCESS_IDS\"\n        for process in \"${PROCESS_IDS[@]}\"\n        do\n            print_text_in_color \"$ICyan\" \"Killing the process with PID $process to prevent a potential automatic restart...\"\n            if ! kill \"$process\"\n            then\n                print_text_in_color \"$IRed\" \"Couldn't kill the process with PID $process...\"\n            fi\n        done\n    fi\n    exit 1\nfi\n\n# Change from APCu to Redis for local cache\n# https://github.com/nextcloud/vm/pull/2040\nif pecl list | grep apcu >/dev/null 2>&1\nthen\n    sed -i \"/memcache.local/d\" \"$NCPATH\"/config/config.php\n    if pecl list | grep redis >/dev/null 2>&1\n    then\n        nextcloud_occ config:system:set memcache.local --value='\\OC\\Memcache\\Redis'\n    else\n       nextcloud_occ config:system:delete memcache.local\n    fi\nfi\n\n# Set product name\nif home_sme_server\nthen\n    PRODUCTNAME=\"Nextcloud HanssonIT Server\"\nelse\n    PRODUCTNAME=\"Nextcloud HanssonIT VM\"\nfi\nif is_app_installed theming\nthen\n    if [ \"$(nextcloud_occ config:app:get theming productName)\" != \"$PRODUCTNAME\" ]\n    then\n        nextcloud_occ config:app:set theming productName --value \"$PRODUCTNAME\"\n    fi\nfi\n\n# Add aliases\nif [ -f /root/.bash_aliases ]\nthen\n    if ! grep -q \"nextcloud\" /root/.bash_aliases\n    then\n{\necho \"alias nextcloud_occ='sudo -u www-data php /var/www/nextcloud/occ'\"\necho \"alias run_update_nextcloud='bash /var/scripts/update.sh'\"\n} >> /root/.bash_aliases\n    fi\nelif [ ! -f /root/.bash_aliases ]\nthen\n{\necho \"alias nextcloud_occ='sudo -u www-data php /var/www/nextcloud/occ'\"\necho \"alias run_update_nextcloud='bash /var/scripts/update.sh'\"\n} > /root/.bash_aliases\nfi\n\n# Inform about started update\nnotify_admin_gui \\\n\"Update script started!\" \\\n\"The update script in the Nextcloud VM has been executed.\nYou will be notified when the update is done.\nPlease don't shutdown or restart your server until then.\"\n\n# Create a snapshot before doing anything else\ncheck_free_space\nif ! [ -f \"$SCRIPTS/nextcloud-startup-script.sh\" ] && (does_snapshot_exist \"NcVM-startup\" \\\n|| does_snapshot_exist \"NcVM-snapshot\" || [ \"$FREE_SPACE\" -ge 50 ] )\nthen\n    # Create backup first\n    if [ -f \"$SCRIPTS/daily-borg-backup.sh\" ] && does_snapshot_exist \"NcVM-snapshot\"\n    then\n        rm -f /tmp/DAILY_BACKUP_CREATION_SUCCESSFUL\n        export SKIP_DAILY_BACKUP_CHECK=1\n        bash \"$SCRIPTS/daily-borg-backup.sh\"\n        if ! [ -f \"/tmp/DAILY_BACKUP_CREATION_SUCCESSFUL\" ]\n        then\n            notify_admin_gui \"Update failed because backup could not be created!\" \\\n            \"Could not create a backup! $(date +%T)\"\n            exit 1\n        fi\n    fi\n    # Add automatical unlock upon reboot\n    crontab -u root -l | grep -v \"lvrename /dev/ubuntu-vg/NcVM-snapshot-pending\"  | crontab -u root -\n    crontab -u root -l | { cat; echo \"@reboot /usr/sbin/lvrename /dev/ubuntu-vg/NcVM-snapshot-pending \\\n/dev/ubuntu-vg/NcVM-snapshot &>/dev/null\" ; } | crontab -u root -\n    SNAPSHOT_EXISTS=1\n    if is_docker_running\n    then\n        check_command systemctl stop docker\n    fi\n    sudo -u www-data php \"$NCPATH\"/occ maintenance:mode --on\n    if does_snapshot_exist \"NcVM-startup\"\n    then\n        check_command lvremove /dev/ubuntu-vg/NcVM-startup -y\n    elif does_snapshot_exist \"NcVM-snapshot\"\n    then\n        if ! lvremove /dev/ubuntu-vg/NcVM-snapshot -y\n        then\n            sudo -u www-data php \"$NCPATH\"/occ maintenance:mode --off\n            start_if_stopped docker\n            notify_admin_gui \"Update failed!\" \\\n\"Could not remove NcVM-snapshot - Please reboot your server! $(date +%T)\"\n            msg_box \"It seems like the old snapshot could not get removed.\nThis should work again after a reboot of your server.\"\n            exit 1\n        fi\n    fi\n    if ! lvcreate --size 5G --snapshot --name \"NcVM-snapshot\" /dev/ubuntu-vg/ubuntu-lv\n    then\n        sudo -u www-data php \"$NCPATH\"/occ maintenance:mode --off\n        start_if_stopped docker\n        notify_admin_gui \"Update failed!\" \\\n\"Could not create NcVM-snapshot - Please reboot your server! $(date +%T)\"\n        msg_box \"The creation of a snapshot failed.\nIf you just merged and old one, please reboot your server again.\nIt should then start working again.\"\n        exit 1\n    fi\n    if ! lvrename /dev/ubuntu-vg/NcVM-snapshot /dev/ubuntu-vg/NcVM-snapshot-pending\n    then\n        sudo -u www-data php \"$NCPATH\"/occ maintenance:mode --off\n        start_if_stopped docker\n        msg_box \"Could not rename the snapshot before starting the update. Please reboot your system!\"\n        exit 1\n    fi\n    sudo -u www-data php \"$NCPATH\"/occ maintenance:mode --off\n    start_if_stopped docker\nfi\n\n# Check if /boot is filled more than 90% and exit the script if that's\n# the case since we don't want to end up with a broken system\nif [ -d /boot ]\nthen\n    if [[ \"$(df -h | grep -m 1 /boot | awk '{print $5}' | cut -d \"%\" -f1)\" -gt 90 ]]\n    then\n        msg_box \"It seems like your boot drive is more than 90% full. \\\nYou can't proceed to upgrade, as it would likely break your system.\n\nTo be able to proceed with the update you need to delete some old Linux kernels. If you need support, please visit:\nhttps://shop.hanssonit.se/product/premium-support-per-30-minutes/\"\n        exit\n    fi\nfi\n\n# Remove leftovers\nrm -f /root/php-upgrade.sh\nrm -f /tmp/php-upgrade.sh\nrm -f /root/db-migration.sh\nrm -f /root/migrate-between-psql-versions.sh\nrm -f \"$SCRIPTS\"/php-upgrade.sh\nrm -f \"$SCRIPTS\"/db-migration.sh\nrm -f \"$SCRIPTS\"/migrate-between-psql-versions.sh\n\n# Fix bug in nextcloud.sh\nCURRUSR=\"$(getent group sudo | cut -d: -f4 | cut -d, -f1)\"\nif [ -f \"$SCRIPTS/techandme.sh\" ]\nthen\n   rm -f \"$SCRIPTS/techandme.sh\"\n   download_script STATIC nextcloud\n   chown \"$CURRUSR\":\"$CURRUSR\" \"$SCRIPTS/nextcloud.sh\"\n   chmod +x \"$SCRIPTS/nextcloud.sh\"\n   if [ -f /home/\"$CURRUSR\"/.bash_profile ]\n   then\n       sed -i \"s|techandme|nextcloud|g\" /home/\"$CURRUSR\"/.bash_profile\n   elif [ -f /home/\"$CURRUSR\"/.profile ]\n   then\n       sed -i \"s|techandme|nextcloud|g\" /home/\"$CURRUSR\"/.profile\n   fi\nelse\n    # Only update if it's older than 60 days (60 seconds * 60 minutes * 24 hours * 60 days)\n    if [ -f \"$SCRIPTS\"/nextcloud.sh ]\n    then\n        if [ \"$(stat --format=%Y \"$SCRIPTS\"/nextcloud.sh)\" -le \"$(( $(date +%s) - (60*60*24*60) ))\" ]\n        then\n            download_script STATIC nextcloud\n            chown \"$CURRUSR\":\"$CURRUSR\" \"$SCRIPTS\"/nextcloud.sh\n        fi\n    fi\nfi\n\n# Fix fancy progress bar for apt-get\n# https://askubuntu.com/a/754653\nif [ -d /etc/apt/apt.conf.d ]\nthen\n    if ! [ -f /etc/apt/apt.conf.d/99progressbar ]\n    then\n        echo 'Dpkg::Progress-Fancy \"1\";' > /etc/apt/apt.conf.d/99progressbar\n        echo 'APT::Color \"1\";' >> /etc/apt/apt.conf.d/99progressbar\n        chmod 644 /etc/apt/apt.conf.d/99progressbar\n    fi\nfi\n\n# Since the branch change, always get the latest update script\ndownload_script STATIC update\nchmod +x $SCRIPTS/update.sh\n\n# Ubuntu 16.04 is deprecated\ncheck_distro_version\n\n# Hold PHP if Ondrejs PPA is used\nprint_text_in_color \"$ICyan\" \"Fetching latest packages with apt...\"\napt-get clean all\napt-get update -q4 & spinner_loading\nif apt-cache policy | grep \"ondrej\" >/dev/null 2>&1\nthen\n    print_text_in_color \"$ICyan\" \"Ondrejs PPA is installed. \\\nHolding PHP to avoid upgrading to a newer version without migration...\"\n    apt-mark hold php* >/dev/null 2>&1\nfi\n\n# Don't allow MySQL/MariaDB\nif [[ $NCDBTYPE = mysql ]]\nthen\n    msg_box \"MySQL/MariaDB is not supported in this script anymore. Please contact us to get support \\\nfor upgrading your server: https://shop.hanssonit.se/product/premium-support-per-30-minutes/\"\n    exit 0\nfi\n\n# Check if the log DIR actually is a file\nif [ -f /var/log/nextcloud ]\nthen\n    rm -f /var/log/nextcloud\nfi\n\n# Set secure permissions\nif [ ! -f \"$SECURE\" ]\nthen\n    mkdir -p \"$SCRIPTS\"\n    download_script STATIC setup_secure_permissions_nextcloud\n    chmod +x \"$SECURE\"\nelse\n    rm \"$SECURE\"\n    download_script STATIC setup_secure_permissions_nextcloud\n    chmod +x \"$SECURE\"\nfi\n\n# Remove the local lib.sh since it's causing issues with new functions (2020-06-01)\nif [ -f \"$SCRIPTS\"/lib.sh ]\nthen\n    rm -f \"$SCRIPTS\"/lib.sh\nfi\n\n# Make sure everyone gets access to menu.sh\ndownload_script MENU menu\n\n# Make sure fetch_lib.sh is available\ndownload_script STATIC fetch_lib\n\n# Update docker-ce to overlay2 since devicemapper is deprecated\nif [ -f /etc/systemd/system/docker.service ]\nthen\n    if grep -q \"devicemapper\" /etc/systemd/system/docker.service\n    then\n        print_text_in_color \"$ICyan\" \"Changing to Overlay2 for Docker CE...\"\n        print_text_in_color \"$ICyan\" \"Please report any issues to $ISSUES.\"\n        run_script STATIC docker_overlay2\n    elif grep -q \"aufs\" /etc/default/docker\n    then\n        apt-mark hold docker-ce\n        run_script STATIC docker_overlay2\n    fi\nfi\n\nif is_this_installed veracrypt\nthen\n    # Hold veracrypt if installed since unmounting all drives, updating and mounting them again is not feasible\n    # If you desperately need the update, you can do so manually\n    apt-mark hold veracrypt\nfi\n\n# Enter maintenance:mode\nprint_text_in_color \"$IGreen\" \"Enabling maintenance:mode...\"\nsudo -u www-data php \"$NCPATH\"/occ maintenance:mode --on\n\n# Upgrade Talk repositrory if Talk is installed (2022-12-26)\nif is_this_installed nextcloud-spreed-signaling\nthen\n    print_text_in_color \"$ICyan\" \"Upgrading dependencies for Talk...\"\n    apt-get update -q4 --allow-releaseinfo-change & spinner_loading\nfi\n\n# Upgrade OS dependencies\nexport DEBIAN_FRONTEND=noninteractive ; apt-get dist-upgrade -y -o Dpkg::Options::=\"--force-confdef\" -o Dpkg::Options::=\"--force-confold\"\n\n# Temporary fix for PHP 2023-08-27\n# There's a bug in PHP 8.1.21 which causes server to crash\n# If you're on Ondrejs PPA, PHP isn't updated, so do that here instead\napt-mark unhold php* >/dev/null 2>&1\napt-get update -q4\nexport DEBIAN_FRONTEND=noninteractive ; apt-get upgrade -y -o Dpkg::Options::=\"--force-confdef\" -o Dpkg::Options::=\"--force-confold\"\napt-mark hold php* >/dev/null 2>&1\n\n# Improve Apache for PHP-FPM\nif is_this_installed php\"$PHPVER\"-fpm\nthen\n    if [ -d \"$PHP_FPM_DIR\" ]\n    then\n        # Just make sure that MPM_EVENT is default\n        a2dismod mpm_prefork\n        a2enmod mpm_event\n        restart_webserver\n    fi\nfi\n\n# Fix Realtek on PN51\nif asuspn51\nthen\n    if ! version 24.04 \"$DISTRO\" 24.04.10\n    then\n        # Upgrade Realtek drivers\n        print_text_in_color \"$ICyan\" \"Upgrading Realtek firmware...\"\n        curl_to_dir https://raw.githubusercontent.com/nextcloud/vm/main/network/asusnuc pn51.sh \"$SCRIPTS\"\n        bash \"$SCRIPTS\"/pn51.sh\n    fi\nfi\n\n# Update Netdata\nif [ -d /etc/netdata ]\nthen\n    print_text_in_color \"$ICyan\" \"Updating Netdata...\"\n    install_if_not cmake # Needed for Netdata in newer versions\n    install_if_not libuv1-dev # Needed for Netdata in newer versions\n    NETDATA_UPDATER_PATH=\"$(find /usr -name 'netdata-updater.sh')\"\n    if [ -n \"$NETDATA_UPDATER_PATH\" ]\n    then\n        bash \"$NETDATA_UPDATER_PATH\"\n    else\n        curl_to_dir https://raw.githubusercontent.com/netdata/netdata/main/packaging/installer/ netdata-updater.sh \"$SCRIPTS\"\n        bash \"$SCRIPTS\"/netdata-updater.sh\n        rm -f \"$SCRIPTS\"/netdata-updater.sh\n    fi\nfi\n\n# Reinstall certbot (use snap instead of package)\n# https://askubuntu.com/a/1271565\nif dpkg -l | grep certbot >/dev/null 2>&1\nthen\n    # certbot will be removed, but still listed, so we need to check if the snap is installed as well so that this doesn't run every time\n    if ! snap list certbot >/dev/null 2>&1\n    then\n        print_text_in_color \"$ICyan\" \"Reinstalling certbot (Let's Encrypt) as a snap instead...\"\n        apt-get remove certbot -y\n        apt-get autoremove -y\n        install_if_not snapd\n        snap install core\n        snap install certbot --classic\n        # Update $PATH in current session (login and logout is required otherwise)\n        check_command hash -r\n    fi\nfi\n\n# Fix PHP error message\nmkdir -p /tmp/pear/cache\n\n# Just in case PECLs XML are bad\nif ! pecl channel-update pecl.php.net\nthen\n    curl_to_dir http://pecl.php.net channel.xml /tmp\n    pear channel-update /tmp/channel.xml\n    rm -f /tmp/channel.xml\nfi\n\n# Update Redis PHP extension (18.04 -->, since 16.04 already is deprecated in the top of this script)\nprint_text_in_color \"$ICyan\" \"Trying to upgrade the Redis PECL extension...\"\n\n# Check current PHP version\ncheck_php\n\n# Do the upgrade\nif pecl list | grep redis >/dev/null 2>&1\nthen\n    if is_this_installed php\"$PHPVER\"-common\n    then\n        install_if_not php\"$PHPVER\"-dev\n    fi\n\n    yes no | pecl upgrade redis\n    systemctl restart redis-server.service\nfi\n# Remove old redis\nif grep -qFx extension=redis.so \"$PHP_INI\"\nthen\n    sed -i \"/extension=redis.so/d\" \"$PHP_INI\"\nfi\n# Check if redis is enabled and create the file if not\nif [ ! -f \"$PHP_MODS_DIR\"/redis.ini ]\nthen\n    touch \"$PHP_MODS_DIR\"/redis.ini\nfi\n# Enable new redis\nif ! grep -qFx extension=redis.so \"$PHP_MODS_DIR\"/redis.ini\nthen\n    echo \"# PECL redis\" > \"$PHP_MODS_DIR\"/redis.ini\n    echo \"extension=redis.so\" >> \"$PHP_MODS_DIR\"/redis.ini\n    check_command phpenmod -v ALL redis\nfi\n\n# Remove APCu https://github.com/nextcloud/vm/issues/2039\nif is_this_installed \"php$PHPVER\"-dev\nthen\n    # Delete PECL APCu\n    if pecl list | grep -q apcu\n    then\n        if ! yes no | pecl uninstall apcu\n        then\n            msg_box \"APCu PHP module removal failed! Please report this to $ISSUES\"\n        else\n            print_text_in_color \"$IGreen\" \"APCu PHP module removal OK!\"\n        fi\n        # Delete everything else\n        check_command phpdismod -v ALL apcu\n        rm -f \"$PHP_MODS_DIR\"/apcu.ini\n        rm -f \"$PHP_MODS_DIR\"/apcu_bc.ini\n        sed -i \"/extension=apcu.so/d\" \"$PHP_INI\"\n        sed -i \"/APCu/d\" \"$PHP_INI\"\n        sed -i \"/apc./d\" \"$PHP_INI\"\n    fi\nfi\n\n# Also remove php-acpu if installed\nif is_this_installed php-acpu\nthen\n    apt-get purge php-apcu\n    apt-get autoremove -y\nfi\nif is_this_installed php\"$PHPVER\"-apcu\nthen\n    apt-get purge php\"$PHPVER\"-apcu\n    apt-get autoremove -y\nfi\n\n# Upgrade other PECL dependencies\nif [ \"${CURRENTVERSION%%.*}\" -ge \"17\" ]\nthen\n    if [ -f \"$PHP_INI\" ]\n    then\n        print_text_in_color \"$ICyan\" \"Trying to upgrade igbinary, and smbclient...\"\n        if pecl list | grep igbinary >/dev/null 2>&1\n        then\n            yes no | pecl upgrade igbinary\n            # Remove old igbinary\n            if grep -qFx extension=igbinary.so \"$PHP_INI\"\n            then\n                sed -i \"/extension=igbinary.so/d\" \"$PHP_INI\"\n            fi\n            # Check if igbinary is enabled and create the file if not\n            if [ ! -f \"$PHP_MODS_DIR\"/igbinary.ini ]\n            then\n                touch \"$PHP_MODS_DIR\"/igbinary.ini\n            fi\n            # Enable new igbinary\n            if ! grep -qFx extension=igbinary.so \"$PHP_MODS_DIR\"/igbinary.ini\n            then\n                echo \"# PECL igbinary\" > \"$PHP_MODS_DIR\"/igbinary.ini\n                echo \"extension=igbinary.so\" >> \"$PHP_MODS_DIR\"/igbinary.ini\n                check_command phpenmod -v ALL igbinary\n            fi\n        fi\n        if pecl list | grep -q smbclient\n        then\n            yes no | pecl upgrade smbclient\n            # Check if smbclient is enabled and create the file if not\n            if [ ! -f \"$PHP_MODS_DIR\"/smbclient.ini ]\n            then\n               touch \"$PHP_MODS_DIR\"/smbclient.ini\n            fi\n            # Enable new smbclient\n            if ! grep -qFx extension=smbclient.so \"$PHP_MODS_DIR\"/smbclient.ini\n            then\n                echo \"# PECL smbclient\" > \"$PHP_MODS_DIR\"/smbclient.ini\n                echo \"extension=smbclient.so\" >> \"$PHP_MODS_DIR\"/smbclient.ini\n                check_command phpenmod -v ALL smbclient\n            fi\n            # Remove old smbclient\n            if grep -qFx extension=smbclient.so \"$PHP_INI\"\n            then\n                sed -i \"/extension=smbclient.so/d\" \"$PHP_INI\"\n            fi\n        fi\n        if pecl list | grep -q inotify\n        then\n            # Remove old inotify\n            if grep -qFx extension=inotify.so \"$PHP_INI\"\n            then\n                sed -i \"/extension=inotify.so/d\" \"$PHP_INI\"\n            fi\n            yes no | pecl upgrade inotify\n            if [ ! -f \"$PHP_MODS_DIR\"/inotify.ini ]\n            then\n                touch \"$PHP_MODS_DIR\"/inotify.ini\n            fi\n            if ! grep -qFx extension=inotify.so \"$PHP_MODS_DIR\"/inotify.ini\n            then\n                echo \"# PECL inotify\" > \"$PHP_MODS_DIR\"/inotify.ini\n                echo \"extension=inotify.so\" >> \"$PHP_MODS_DIR\"/inotify.ini\n                check_command phpenmod -v ALL inotify\n            fi\n        fi\n    fi\nfi\n\n# Make sure services are restarted\nrestart_webserver\n\n# Update adminer\nif [ -d \"$ADMINERDIR\" ]\nthen\n    print_text_in_color \"$ICyan\" \"Updating Adminer...\"\n    rm -f \"$ADMINERDIR\"/latest.php \"$ADMINERDIR\"/adminer.php \"$ADMINERDIR\"/adminer-pgsql.php\n    # Download the latest version\n    curl_to_dir \"https://download.adminerevo.org/latest/adminer\" \"adminer-pgsql.zip\" \"$ADMINERDIR\"\n    install_if_not unzip\n    # Unzip the latest version\n    unzip \"$ADMINERDIR\"/adminer-pgsql.zip -d \"$ADMINERDIR\"\n    rm -f \"$ADMINERDIR\"/adminer-pgsql.zip\n    mv \"$ADMINERDIR\"/adminer-pgsql.php \"$ADMINERDIR\"/adminer.php\nfi\n\n# Get latest Maxmind databse for Geoblock\nif grep -q \"^#Geoip-block\" /etc/apache2/apache2.conf\nthen\n    if grep -c GeoIPDBFile /etc/apache2/apache2.conf\n    then\n        msg_box \"We have updated GeoBlock to a new version which isn't compatible with the old one. Please reinstall with the menu script to get the latest version.\"\n        notify_admin_gui \\\n\"GeoBlock needs to be reinstalled!\" \\\n\"We have updated GeoBlock to a new version which isn't compatible with the old one.\nPlease reinstall with the menu script to get the latest version.\n\nsudo bash /ar/scripts/menu.sh --> Server Configuration --> GeoBlock\"\n    fi\nelif [ -f \"$GEOBLOCK_MOD\" ]\nthen\n    if download_geoip_mmdb\n    then\n        print_text_in_color \"$IGreen\" \"GeoBlock database updated!\"\n    fi\nfi\n\n# Update docker containers and remove Watchtower if Bitwarden is present due to compatibility issue\n# If Watchtower is installed, but Bitwarden is missing, then let watchtower do its thing\n# If Watchtower is installed together with Bitwarden, then remove Watchtower and run updates\n# individually depending on which docker containers that exist.\nif is_docker_running\nthen\n    # Fix Docker compose issue\n    if is_this_installed docker-compose\n    then\n        apt purge docker-compose -y\n        install_if_not docker-compose-plugin\n    fi\n    # To fix https://github.com/nextcloud/vm/issues/1459 we need to remove Watchtower\n    # to avoid updating Bitwarden again, and only update the specified docker images above\n    if docker ps -a --format '{{.Names}}' | grep -Eq \"bitwarden\";\n    then\n        if [ -d /root/bwdata ] || [ -d \"$BITWARDEN_HOME\"/bwdata ]\n        then\n            if does_this_docker_exist 'containrrr/watchtower'\n            then\n                docker stop watchtower\n                WATCHTOWER=1\n            elif does_this_docker_exist 'v2tec/watchtower'\n            then\n                docker stop watchtower\n                WATCHTOWER=1\n            fi\n            docker container prune -f\n            docker image prune -a -f\n            docker volume prune -f\n            if [ -n \"$WATCHTOWER\" ]\n            then\n                notify_admin_gui \"Watchtower removed\" \"Due to compatibility issues with Bitwarden and Watchtower, \\\nwe have removed Watchtower from this server. Updates will now happen for each container separately.\"\n            fi\n        fi\n    fi\n    # Update selected images\n    # Vaultwarden\n    docker_update_specific 'vaultwarden' \"Vaultwarden\"\n    # Bitwarden RS\n    if is_docker_running && docker ps -a --format '{{.Image}}' | grep -Eq \"bitwardenrs/server:latest\";\n    then\n        print_text_in_color \"$ICyan\" \"Updating Bitwarden RS. This can take a while...\"\n        docker pull assaflavie/runlike &>/dev/null\n        echo '#/bin/bash' > /tmp/bitwarden-conf\n        chmod 700 /tmp/bitwarden-conf\n        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock assaflavie/runlike -p bitwarden_rs >> /tmp/bitwarden-conf\n        sed -i 's|bitwardenrs/server:latest|vaultwarden/server:latest|' /tmp/bitwarden-conf\n        docker stop bitwarden_rs\n        docker rm bitwarden_rs\n        if ! DOCKER_RUN_OUTPUT=$(bash /tmp/bitwarden-conf 2>&1)\n        then\n            check_command cp /tmp/bitwarden-conf \"$SCRIPTS\"\n            chmod 700 \"$SCRIPTS/bitwarden-conf\"\n            notify_admin_gui \"Could not update Bitwarden RS.\" \"Please recreate the docker container yourself.\nYou can find its config here: $SCRIPTS/bitwarden-conf\nSee the debug log below:\n$DOCKER_RUN_OUTPUT\"\n            msg_box \"Could not update Bitwarden RS. Please recreate the docker container yourself.\nYou can find its config here: $SCRIPTS/bitwarden-conf\nSee the debug log below:\n$DOCKER_RUN_OUTPUT\"\n        else\n            docker image prune -a -f\n        fi\n        rm -f /tmp/bitwarden-conf\n    else\n        docker_update_specific 'bitwarden_rs' \"Bitwarden RS\"\n    fi\n    # Collabora CODE\n    docker_update_specific 'code' 'Collabora'\n    # OnlyOffice\n    ## Don't upgrade to community if EE is installed\n    if ! does_this_docker_exist onlyoffice-ee\n    then\n        if does_this_docker_exist 'onlyoffice/documentserver'\n        then\n            docker_update_specific 'onlyoffice' 'OnlyOffice'\n        fi\n    fi\n    # Full Text Search\n    if [ \"${CURRENTVERSION%%.*}\" -ge \"25\" ]\n    then\n        fulltextsearch_install\n        if does_this_docker_exist \"$nc_fts\" && does_this_docker_exist \"$opens_fts\"\n        then\n            msg_box \"Please consider reinstalling FullTextSearch since you seem to have the old (and not working) implemantation by issuing the uninstall script: sudo bash $SCRIPTS/menu.sh --> Additional Apps --> FullTextSearch\"\n        elif [ -d \"$FULLTEXTSEARCH_DIR\" ]\n        then\n            # Check if new name standard is set, and only update if it is (since it contains the latest tag)\n            if grep -rq \"$FULLTEXTSEARCH_IMAGE_NAME\" \"$FULLTEXTSEARCH_DIR/docker-compose.yaml\"\n            then\n                if [ -n \"$FULLTEXTSEARCH_IMAGE_NAME_LATEST_TAG\" ]\n                then\n                    sed -i \"s|image: docker.elastic.co/elasticsearch/elasticsearch:.*|image: docker.elastic.co/elasticsearch/elasticsearch:$FULLTEXTSEARCH_IMAGE_NAME_LATEST_TAG|g\" \"$FULLTEXTSEARCH_DIR/docker-compose.yaml\"\n                    docker-compose_update \"$FULLTEXTSEARCH_IMAGE_NAME\" 'Full Text Search' \"$FULLTEXTSEARCH_DIR\"\n                fi\n            else\n                print_text_in_color \"$ICyan\" \"Full Text Search is version based, to upgrade it, please change the version in $FULLTEXTSEARCH_DIR and run 'docker compose pull && docker compose up -d'. Latest tags are here: https://www.docker.elastic.co/r/elasticsearch and release notes here: https://www.elastic.co/guide/en/elasticsearch/reference/current/release-highlights.html\"\n            fi\n        fi\n    fi\n    # Talk Recording\n    docker_update_specific 'talk-recording' \"Talk Recording\"\n    # Plex\n    docker_update_specific 'plex' \"Plex Media Server\"\n    # Imaginary\n    docker_update_specific 'imaginary' \"Imaginary\"\nfi\n\n# Fix Collabora change too coolwsd\nif grep -r loolwsd \"$SITES_AVAILABLE\"/*.conf\nthen\n    print_text_in_color \"$ICyan\" \"Updating Collabora Engine...\"\n    LOOLWSDCONF=$(grep -r loolwsd \"$SITES_AVAILABLE\"/*.conf | awk '{print $1}' | cut -d \":\" -f1)\n    mapfile -t LOOLWSDCONF <<< \"$LOOLWSDCONF\"\n    for apacheconf in \"${LOOLWSDCONF[@]}\"\n    do\n        sed -i \"s|/loleaflet|/browser|g\" \"${apacheconf}\"\n        sed -i \"s|loleaflet is the|browser is the|g\" \"${apacheconf}\"\n        sed -i \"s|loolwsd|coolwsd|g\" \"${apacheconf}\"\n        sed -i \"s|/lool|/cool|g\" \"${apacheconf}\"\n    done\n    check_command restart_webserver\nfi\n\n# Cleanup un-used packages\napt-get autoremove -y\napt-get autoclean\n\n# Update GRUB, just in case\nupdate-grub\n\n# Free some space (ZFS snapshots)\nif is_this_installed libzfs4linux\nthen\n    if grep -rq ncdata /etc/mtab\n    then\n        run_script DISK prune_zfs_snaphots\n    fi\nfi\n\n# Update updatenotification.sh (gets updated after each nextcloud update as well; see down below the script)\nif [ -f \"$SCRIPTS\"/updatenotification.sh ] && ! grep -q \"Check for supported Nextcloud version\" \"$SCRIPTS/updatenotification.sh\"\nthen\n    download_script STATIC updatenotification\n    chmod +x \"$SCRIPTS\"/updatenotification.sh\nfi\n\n# Disable maintenance:mode\nprint_text_in_color \"$IGreen\" \"Disabling maintenance:mode...\"\nsudo -u www-data php \"$NCPATH\"/occ maintenance:mode --off\n\n# Make all previous files executable\nprint_text_in_color \"$ICyan\" \"Finding all executable files in $NC_APPS_PATH\"\nfind_executables=\"$(find $NC_APPS_PATH -type f -executable)\"\n\n# Update all Nextcloud apps\nif [ \"${CURRENTVERSION%%.*}\" -ge \"15\" ]\nthen\n    # Check for upgrades\n    print_text_in_color \"$ICyan\" \"Trying to automatically update all Nextcloud apps...\"\n    UPDATED_APPS=\"$(nextcloud_occ_no_check app:update --all)\"\n    # Update pdfannotate\n    if [ -d \"$NC_APPS_PATH/pdfannotate\" ]\n    then\n        INFO_XML=\"$(curl -s https://gitlab.com/nextcloud-other/nextcloud-annotate/-/raw/master/appinfo/info.xml)\"\n        if [ \"$(echo \"$INFO_XML\" | grep -oP 'min-version=\"[0-9]+\"' | grep -oP '[0-9]+')\" -le \"${CURRENTVERSION%%.*}\" ] \\\n&& [ \"$(echo \"$INFO_XML\" | grep -oP 'max-version=\"[0-9]+\"' | grep -oP '[0-9]+')\" -ge \"${CURRENTVERSION%%.*}\" ]\n        then\n            print_text_in_color \"$ICyan\" \"Updating the pdfannotate app...\"\n            cd \"$NC_APPS_PATH/pdfannotate\"\n            git pull\n            chown -R www-data:www-data ./\n            chmod -R 770 ./\n        fi\n    fi\nfi\n\n# Check which apps got updated\nif [ -n \"$UPDATED_APPS\" ]\nthen\n    print_text_in_color \"$IGreen\" \"$UPDATED_APPS\"\n    notify_admin_gui \\\n    \"Your apps just got updated!\" \\\n    \"$UPDATED_APPS\"\n    # Just make sure everything is updated (sometimes app requires occ upgrade to be run)\n    nextcloud_occ upgrade\nelse\n    print_text_in_color \"$IGreen\" \"Your apps are already up to date!\"\nfi\n\n# Apply correct redirect rule to avoid security check errors\nREDIRECTRULE=\"$(grep -r \"\\[R=301,L\\]\" $SITES_AVAILABLE | cut -d \":\" -f1)\"\nif [ -n \"$REDIRECTRULE\" ]\nthen\n    # Change the redirect rule in all files in Apache available\n    mapfile -t REDIRECTRULE <<< \"$REDIRECTRULE\"\n    for rule in \"${REDIRECTRULE[@]}\"\n    do\n        sed -i \"s|{HTTP_HOST} \\[R=301,L\\]|{HTTP_HOST}\\$1 \\[END,NE,R=permanent\\]|g\" \"$rule\"\n    done\n    # Restart Apache\n    if check_command apachectl configtest\n    then\n        restart_webserver\n    fi\nfi\n\n# Nextcloud 13 is required.\nlowest_compatible_nc 13\n\n# Restart notify push if existing\nif [ -f \"$NOTIFY_PUSH_SERVICE_PATH\" ]\nthen\n    chmod +x \"$NC_APPS_PATH\"/notify_push/bin/x86_64/notify_push\n    systemctl restart notify_push.service\nfi\n\nif [ -f /tmp/minor.version ]\nthen\n    NCBAD=$(cat /tmp/minor.version)\n    NCVERSION=$(curl -s -m 900 \"$NCREPO\"/ | sed --silent 's/.*href=\"nextcloud-\\([^\"]\\+\\).zip.asc\".*/\\1/p' | sort --version-sort | grep \"${CURRENTVERSION%%.*}\" | tail -1)\n    export NCVERSION\n    export STABLEVERSION=\"nextcloud-$NCVERSION\"\n    rm -f /tmp/minor.version\nelif [ -f /tmp/nextmajor.version ]\nthen\n    NCBAD=$(cat /tmp/nextmajor.version)\n    if [ \"$NCNEXT\" -lt \"15\" ]\n    then\n        NCVERSION=$(curl -s -m 900 \"$NCREPO\"/ | sed --silent 's/.*href=\"nextcloud-\\([^\"]\\+\\).zip.asc\".*/\\1/p' | sort --version-sort | grep \"$NCNEXT\" | head -1)\n    else\n        NCVERSION=$(curl -s -m 900 \"$NCREPO\"/ | sed --silent 's/.*href=\"nextcloud-\\([^\"]\\+\\).zip.asc\".*/\\1/p' | sort --version-sort | grep \"$NCNEXT\" | tail -1)\n    fi\n    if [ -z \"$NCVERSION\" ]\n    then\n        msg_box \"The version that you are trying to upgrade to doesn't exist.\"\n        exit 1\n    fi\n    export NCVERSION\n    export STABLEVERSION=\"nextcloud-$NCVERSION\"\n    rm -f /tmp/nextmajor.version\nelif [ -f /tmp/prerelease.version ]\nthen\n    PRERELEASE_VERSION=yes\n    msg_box \"WARNING! You are about to update to a Beta/RC version of Nextcloud.\\nThere's no turning back, \\\nas it's not currently possible to downgrade.\\n\\nPlease only continue if you have made a backup, or took a snapshot.\"\n    if ! yesno_box_no \"Are you sure you would like to proceed?\"\n    then\n        rm -f /tmp/prerelease.version\n        unset PRERELEASE_VERSION\n    else\n        if grep -q beta /tmp/prerelease.version\n        then\n            NCREPO=\"https://download.nextcloud.com/server/prereleases\"\n            NCVERSION=$(curl -s -m 900 $NCREPO/ | sed --silent 's/.*href=\"nextcloud-\\([^\"]\\+\\).zip.asc\".*/\\1/p' | sort --version-sort | tail -1)\n            STABLEVERSION=\"nextcloud-$NCVERSION\"\n            rm -f /tmp/prerelease.version\n        elif grep -q \"rc\" /tmp/prerelease.version\n        then\n            NCREPO=\"https://download.nextcloud.com/server/prereleases\"\n            NCVERSION=$(cat /tmp/prerelease.version)\n            STABLEVERSION=\"nextcloud-$NCVERSION\"\n            rm -f /tmp/prerelease.version\n        fi\n    fi\nfi\n\n# Rename snapshot\nif [ -n \"$SNAPSHOT_EXISTS\" ]\nthen\n    check_command lvrename /dev/ubuntu-vg/NcVM-snapshot-pending /dev/ubuntu-vg/NcVM-snapshot\nfi\n\n# We can't jump between major versions\nmajor_versions_unsupported\n\n# Check if new version is larger than current version installed. Skip version check if you want to upgrade to a prerelease.\nif [ -z \"$PRERELEASE_VERSION\" ]\nthen\n    print_text_in_color \"$ICyan\" \"Checking for new Nextcloud version...\"\n    if version_gt \"$NCVERSION\" \"$CURRENTVERSION\"\n    then\n        print_text_in_color \"$ICyan\" \"Latest release is: $NCVERSION. Current version is: $CURRENTVERSION.\"\n        print_text_in_color \"$IGreen\" \"New version available, upgrade continues!\"\n    else\n        print_text_in_color \"$IGreen\" \"You already run the latest version! ($CURRENTVERSION)\"\n        notify_admin_gui \\\n        \"Update successful!\" \\\n        \"The update script finished successfully! No new Nextcloud update was found.\"\n        exit 0\n    fi\nfi\n\n# Update updatenotification.sh\nif [ -f \"$SCRIPTS\"/updatenotification.sh ]\nthen\n    download_script STATIC updatenotification\n    chmod +x \"$SCRIPTS\"/updatenotification.sh\n    crontab -u root -l | grep -v \"$SCRIPTS/updatenotification.sh\" | crontab -u root -\n    crontab -u root -l | { cat; echo \"59 $AUT_UPDATES_TIME * * * $SCRIPTS/updatenotification.sh > /dev/null 2>&1\"; } | crontab -u root -\nfi\n\n############# Don't upgrade to specific version\nDONOTUPDATETO='29.0.0'\nif [[ \"$NCVERSION\" == \"$DONOTUPDATETO\" ]]\nthen\n    msg_box \"Due to major bugs with Nextcloud $DONOTUPDATETO we won't upgrade to that version since it's a risk it will break your server. Please try to upgrade again when the next maintenance release is out.\"\n    exit\nfi\n\n# Check if PHP version is compatible with $NCVERSION\nPHP_VER=71\nNC_VER=16\nif [ \"${NCVERSION%%.*}\" -ge \"$NC_VER\" ]\nthen\n    if [ \"$(php -v | head -n 1 | cut -d \" \" -f 2 | cut -c 1,3)\" -lt \"$PHP_VER\" ]\n    then\n        msg_box \"Your PHP version isn't compatible with the new version of Nextcloud. Please upgrade your PHP stack and try again.\n\nIf you need support, please visit https://shop.hanssonit.se/product/upgrade-php-version-including-dependencies/\"\n        exit\n    fi\nfi\n\n# Check if PHP version is compatible with $NCVERSION\nPHP_VER=72\nNC_VER=20\nif [ \"${NCVERSION%%.*}\" -ge \"$NC_VER\" ]\nthen\n    if [ \"$(php -v | head -n 1 | cut -d \" \" -f 2 | cut -c 1,3)\" -lt \"$PHP_VER\" ]\n    then\n        msg_box \"Your PHP version isn't compatible with the new version of Nextcloud. Please upgrade your PHP stack and try again.\n\nIf you need support, please visit https://shop.hanssonit.se/product/upgrade-php-version-including-dependencies/\"\n        exit\n    fi\nfi\n\n# Check if PHP version is compatible with $NCVERSION\nPHP_VER=73\nNC_VER=21\nif [ \"${NCVERSION%%.*}\" -ge \"$NC_VER\" ]\nthen\n    if [ \"$(php -v | head -n 1 | cut -d \" \" -f 2 | cut -c 1,3)\" -lt \"$PHP_VER\" ]\n    then\nmsg_box \"Your PHP version isn't compatible with the new version of Nextcloud. Please upgrade your PHP stack and try again.\n\nIf you need support, please visit https://shop.hanssonit.se/product/upgrade-php-version-including-dependencies/\"\n        exit\n    fi\nfi\n\n# Check if PHP version is compatible with $NCVERSION\n# https://github.com/nextcloud/server/issues/29258\nPHP_VER=74\nNC_VER=24\nif [ \"${NCVERSION%%.*}\" -ge \"$NC_VER\" ]\nthen\n    if [ \"$(php -v | head -n 1 | cut -d \" \" -f 2 | cut -c 1,3)\" -lt \"$PHP_VER\" ]\n    then\nmsg_box \"Your PHP version isn't compatible with the new version of Nextcloud. Please upgrade your PHP stack and try again.\n\nIf you need support, please visit https://shop.hanssonit.se/product/upgrade-php-version-including-dependencies/\"\n        exit\n    fi\nfi\n\n# Check if PHP version is compatible with $NCVERSION\n# https://github.com/nextcloud/server/issues/29258\nPHP_VER=80\nNC_VER=26\nif [ \"${NCVERSION%%.*}\" -ge \"$NC_VER\" ]\nthen\n    if [ \"$(php -v | head -n 1 | cut -d \" \" -f 2 | cut -c 1,3)\" -lt \"$PHP_VER\" ]\n    then\nmsg_box \"Your PHP version isn't compatible with the new version of Nextcloud. Please upgrade your PHP stack and try again.\n\nIf you need support, please visit https://shop.hanssonit.se/product/upgrade-php-version-including-dependencies/\"\n        exit\n    fi\nfi\n\n# Check if PHP version is compatible with $NCVERSION\n# https://github.com/nextcloud/server/issues/29258\nPHP_VER=81\nNC_VER=31\nif [ \"${NCVERSION%%.*}\" -ge \"$NC_VER\" ]\nthen\n    if [ \"$(php -v | head -n 1 | cut -d \" \" -f 2 | cut -c 1,3)\" -lt \"$PHP_VER\" ]\n    then\nmsg_box \"Your PHP version isn't compatible with the new version of Nextcloud. Please upgrade your PHP stack and try again.\n\nIf you need support, please visit https://shop.hanssonit.se/product/upgrade-php-version-including-dependencies/\"\n        exit\n    fi\nfi\n\n# Upgrade Nextcloud\nif ! site_200 \"$NCREPO\"\nthen\n    msg_box \"$NCREPO seems to be down, or temporarily not reachable. Please try again in a few minutes.\"\n    exit 1\nfi\n\ncountdown \"Backing up files and upgrading to Nextcloud $NCVERSION in 10 seconds... Press CTRL+C to abort.\" \"10\"\n\n# Rename snapshot\nif [ -n \"$SNAPSHOT_EXISTS\" ]\nthen\n    check_command lvrename /dev/ubuntu-vg/NcVM-snapshot /dev/ubuntu-vg/NcVM-snapshot-pending\nfi\n\n# Stop Apache2\nprint_text_in_color \"$ICyan\" \"Stopping Apache2...\"\ncheck_command systemctl stop apache2.service\n\n# Create backup dir (/mnt/NCBACKUP/)\nif [ ! -d \"$BACKUP\" ]\nthen\n    mkdir -p \"$BACKUP\"\nfi\n\n# Backup PostgreSQL\nif is_this_installed postgresql-common\nthen\n    cd /tmp\n    # Test connection to PostgreSQL\n    if ! sudo -u postgres psql -w -c \"\\q\"\n    then\n        # If it fails, trust the 'postgres' user to be able to perform backup\n        rsync -a /etc/postgresql/*/main/pg_hba.conf \"$BACKUP\"/pg_hba.conf_BACKUP\n        sed -i \"s|local   all             postgres                                .*|local   all             postgres                                trust|g\" /etc/postgresql/*/main/pg_hba.conf\n        systemctl restart postgresql.service\n        if sudo -u postgres psql -c \"SELECT 1 AS result FROM pg_database WHERE datname='$NCDB'\" | grep \"1 row\" > /dev/null\n        then\n            print_text_in_color \"$ICyan\" \"Doing pgdump of $NCDB...\"\n            check_command sudo -u postgres pg_dump -Fc \"$NCDB\"  > \"$BACKUP\"/nextclouddb.dump\n            # Import:\n            # sudo -u postgres pg_restore --verbose --clean --no-acl --no-owner -h localhost -U ncadmin -d nextcloud_db \"$BACKUP\"/nextclouddb.dump\n        else\n            print_text_in_color \"$ICyan\" \"Doing pgdump of all databases...\"\n            check_command sudo -u postgres pg_dumpall > \"$BACKUP\"/alldatabases.dump\n        fi\n    else\n        # If there's no issues, then continue as normal\n        if sudo -u postgres psql -c \"SELECT 1 AS result FROM pg_database WHERE datname='$NCDB'\" | grep \"1 row\" > /dev/null\n        then\n            print_text_in_color \"$ICyan\" \"Doing pgdump of $NCDB...\"\n            check_command sudo -u postgres pg_dump -Fc \"$NCDB\"  > \"$BACKUP\"/nextclouddb.dump\n            # Import:\n            # sudo -u postgres pg_restore --verbose --clean --no-acl --no-owner -h localhost -U ncadmin -d nextcloud_db \"$BACKUP\"/nextclouddb.dump\n        else\n            print_text_in_color \"$ICyan\" \"Doing pgdump of all databases...\"\n            check_command sudo -u postgres pg_dumpall > \"$BACKUP\"/alldatabases.dump\n        fi\n    fi\nfi\n\n# Prevent apps from breaking the update due to incompatibility\n# Fixes errors like https://github.com/nextcloud/vm/issues/1834\n# Needs to be executed before backing up the config directory\nif [ \"${CURRENTVERSION%%.*}\" -lt \"${NCVERSION%%.*}\" ]\nthen\n    print_text_in_color \"$ICyan\" \"Deleting 'app_install_overwrite array' to prevent app breakage...\"\n    nextcloud_occ config:system:delete app_install_overwrite\nfi\n\n# Move backups to location according to $VAR\nif [ -d /var/NCBACKUP/ ]\nthen\n    mv /var/NCBACKUP \"$BACKUP\"\n    mv /var/NCBACKUP-OLD \"$BACKUP\"-OLD/\nfi\n\n# Check if backup exists and move to old\nprint_text_in_color \"$ICyan\" \"Backing up data...\"\nif [ -d \"$BACKUP\" ]\nthen\n    install_if_not rsync\n    mkdir -p \"$BACKUP\"-OLD/\"$(date +%Y-%m-%d-%H%M%S)\"\n    rsync -Aaxz \"$BACKUP\"/* \"$BACKUP\"-OLD/\"$(date +%Y-%m-%d-%H%M%S)\"\n    rm -rf \"$BACKUP\"-OLD/\"$(date --date='1 year ago' +%Y)\"*\n    rm -rf \"$BACKUP\"\n    mkdir -p \"$BACKUP\"\nfi\n\n# Do a backup of the ZFS mount\nif is_this_installed zfs-auto-snapshot\nthen\n    if grep -rq ncdata /etc/mtab\n    then\n        check_multiverse\n        sed -i \"s|date --utc|date|g\" /usr/sbin/zfs-auto-snapshot\n        check_command zfs-auto-snapshot -r ncdata\n    fi\nfi\n\n# Backup data\nfor folders in config apps\ndo\n    if [[ \"$(rsync -Aaxz \"$NCPATH\"/$folders \"$BACKUP\")\" -eq 0 ]]\n    then\n        BACKUP_OK=1\n    else\n        unset BACKUP_OK\n    fi\ndone\n\nif [ -z \"$BACKUP_OK\" ]\nthen\n    msg_box \"Backup was not OK. Please check $BACKUP and see if the folders are backed up properly\"\n    exit 1\nelse\n    print_text_in_color \"$IGreen\" \"Backup OK!\"\nfi\n\n# Download and validate Nextcloud package\ncheck_command download_verify_nextcloud_stable\n\nif [ -f \"$HTML/$STABLEVERSION.tar.bz2\" ]\nthen\n    print_text_in_color \"$ICyan\" \"$HTML/$STABLEVERSION.tar.bz2 exists\"\nelse\n    msg_box \"Aborting, something went wrong with the download\"\n    exit 1\nfi\n\nif [ -d \"$BACKUP\"/config/ ]\nthen\n    print_text_in_color \"$ICyan\" \"$BACKUP/config/ exists\"\nelse\n    msg_box \"Something went wrong with backing up your old Nextcloud instance\nPlease check in $BACKUP if config/ folder exist.\"\n    exit 1\nfi\n\nif [ -d \"$BACKUP\"/apps/ ]\nthen\n    print_text_in_color \"$ICyan\" \"$BACKUP/apps/ exists\"\n    echo\n    print_text_in_color \"$IGreen\" \"All files are backed up.\"\n    send_mail \\\n    \"New Nextcloud version found!\" \\\n    \"We will now start the update to Nextcloud $NCVERSION. $(date +%T)\"\n    countdown \"Removing old Nextcloud instance in 5 seconds...\" \"5\"\n    rm -rf \"$NCPATH\"\n    print_text_in_color \"$IGreen\" \"Extracting new package....\"\n    check_command tar -xjf \"$HTML/$STABLEVERSION.tar.bz2\" -C \"$HTML\"\n    rm \"$HTML/$STABLEVERSION.tar.bz2\"\n    print_text_in_color \"$IGreen\" \"Restoring config to Nextcloud...\"\n    rsync -Aaxz \"$BACKUP\"/config \"$NCPATH\"/\n    bash \"$SECURE\" & spinner_loading\n    # Don't execute the update before all cronjobs are finished\n    check_running_cronjobs\n    # Execute the update\n    nextcloud_occ upgrade\n    # Optimize\n    print_text_in_color \"$ICyan\" \"Optimizing Nextcloud...\"\n    yes | nextcloud_occ db:convert-filecache-bigint\n    nextcloud_occ db:add-missing-indices\n    CURRENTVERSION=$(sudo -u www-data php \"$NCPATH\"/occ status | grep \"versionstring\" | awk '{print $3}')\n    if [ \"${CURRENTVERSION%%.*}\" -ge \"19\" ]\n    then\n        check_php\n        nextcloud_occ db:add-missing-columns\n        install_if_not php\"$PHPVER\"-bcmath\n    fi\n    if [ \"${CURRENTVERSION%%.*}\" -ge \"20\" ]\n    then\n        nextcloud_occ db:add-missing-primary-keys\n    fi\n    if [ \"${CURRENTVERSION%%.*}\" -ge \"21\" ]\n    then\n        # Set phone region\n        if [ -n \"$KEYBOARD_LAYOUT\" ]\n        then\n            nextcloud_occ config:system:set default_phone_region --value=\"$KEYBOARD_LAYOUT\"\n        fi\n    fi\n    if [ \"${CURRENTVERSION%%.*}\" -ge \"23\" ]\n    then\n        # Update opcache.interned_strings_buffer\n        if ! grep -rq opcache.interned_strings_buffer=\"$opcache_interned_strings_buffer_value\" \"$PHP_INI\"\n        then\n            sed -i \"s|opcache.interned_strings_buffer=.*|opcache.interned_strings_buffer=$opcache_interned_strings_buffer_value|g\" \"$PHP_INI\"\n            restart_webserver\n        fi\n    fi\n    if [ \"${CURRENTVERSION%%.*}\" -ge \"27\" ]\n    then\n        nextcloud_occ dav:sync-system-addressbook\n    fi\nelse\n    msg_box \"Something went wrong with backing up your old Nextcloud instance\nPlease check in $BACKUP if the folders exist.\"\n    exit 1\nfi\n\n# Repair\nnextcloud_occ maintenance:repair --include-expensive\n\n# Update Bitwarden\nif is_docker_running\nthen\n    if docker ps -a --format '{{.Names}}' | grep -Eq \"bitwarden\";\n    then\n        if is_this_installed apache2\n        then\n            if [ -d /root/bwdata ]\n            then\n                curl_to_dir \"https://raw.githubusercontent.com/bitwarden/server/master/scripts\" \"bitwarden.sh\" \"/root\"\n                chmod +x /root/bitwarden.sh\n                if [ -f /root/bitwarden.sh ]\n                then\n                    print_text_in_color \"$IGreen\" \"Upgrading Bitwarden...\"\n                    sleep 2\n                    yes no | bash /root/bitwarden.sh updateself\n                    yes no | bash /root/bitwarden.sh update\n                fi\n            elif [ -d \"$BITWARDEN_HOME\"/bwdata ]\n            then\n                curl_to_dir \"https://raw.githubusercontent.com/bitwarden/server/master/scripts\" \"bitwarden.sh\" \"$BITWARDEN_HOME\"\n                chown \"$BITWARDEN_USER\":\"$BITWARDEN_USER\" \"$BITWARDEN_HOME\"/bitwarden.sh\n                chmod +x \"$BITWARDEN_HOME\"/bitwarden.sh\n                if [ -f \"$BITWARDEN_HOME\"/bitwarden.sh ]\n                then\n                    print_text_in_color \"$IGreen\" \"Upgrading Bitwarden...\"\n                    sleep 2\n                    yes no | sudo -u \"$BITWARDEN_USER\" bash \"$BITWARDEN_HOME\"/bitwarden.sh updateself\n                    yes no | sudo -u \"$BITWARDEN_USER\" bash \"$BITWARDEN_HOME\"/bitwarden.sh update\n                fi\n            fi\n        fi\n    fi\nfi\n\n# Start Apache2\nstart_if_stopped apache2\n\n# Just double check if the DB is started as well\nif is_this_installed postgresql-common\nthen\n    if ! pgrep postgres >/dev/null 2>&1\n    then\n        print_text_in_color \"$ICyan\" \"Starting PostgreSQL...\"\n        systemctl start postgresql.service\n    fi\nfi\n\n# If the app isn't installed (maybe because it's incompatible), then at least restore from backup and make sure it's disabled\nBACKUP_APPS=\"$(find \"$BACKUP/apps\" -maxdepth 1 -mindepth 1 -type d)\"\nmapfile -t BACKUP_APPS <<< \"$BACKUP_APPS\"\nfor app in \"${BACKUP_APPS[@]}\"\ndo\n    app=\"${app##\"$BACKUP/apps/\"}\"\n    if ! [ -d \"$NC_APPS_PATH/$app\" ] && [ -d \"$BACKUP/apps/$app\" ]\n    then\n            print_text_in_color \"$ICyan\" \"Restoring $app from $BACKUP/apps...\"\n            rsync -Aaxz \"$BACKUP/apps/$app\" \"$NC_APPS_PATH/\"\n            bash \"$SECURE\"\n            nextcloud_occ_no_check app:disable \"$app\"\n            # Don't execute the update before all cronjobs are finished\n            check_running_cronjobs\n            # Execute the update\n            nextcloud_occ upgrade\n    fi\ndone\n\n# Update all Nextcloud apps a second time (if the old backup was outdated)\nif [ \"${CURRENTVERSION%%.*}\" -ge \"15\" ]\nthen\n    # Check for upgrades\n    print_text_in_color \"$ICyan\" \"Trying to automatically update all Nextcloud apps again...\"\n    nextcloud_occ_no_check app:update --all\nfi\n\n# Remove header for Nextcloud 14 (already in .htaccess)\nif [ -f /etc/apache2/sites-available/\"$(hostname -f)\".conf ]\nthen\n    if grep -q 'Header always set Referrer-Policy' /etc/apache2/sites-available/\"$(hostname -f)\".conf\n    then\n        sed -i '/Header always set Referrer-Policy/d' /etc/apache2/sites-available/\"$(hostname -f)\".conf\n        restart_webserver\n    fi\nfi\n\n# Fix crontab every 5 minutes instead of 15\nif crontab -u www-data -l | grep -q \"\\*/15  \\*  \\*  \\*  \\* php -f $NCPATH/cron.php\"\nthen\n    crontab -u www-data -l | grep -v \"php -f $NCPATH/cron.php\" | crontab -u www-data -\n    crontab -u www-data -l | { cat; echo \"*/5  *  *  *  * php -f $NCPATH/cron.php > /dev/null 2>&1\"; } | crontab -u www-data -\n    print_text_in_color \"$ICyan\" \"Nextcloud crontab updated to run every 5 minutes.\"\nfi\n\n# Change owner of $BACKUP folder to root\nchown -R root:root \"$BACKUP\"\n\n# Pretty URLs\nprint_text_in_color \"$ICyan\" \"Setting RewriteBase to \\\"/\\\" in config.php...\"\nchown -R www-data:www-data \"$NCPATH\"\nnextcloud_occ config:system:set htaccess.RewriteBase --value=\"/\"\nnextcloud_occ maintenance:update:htaccess\nbash \"$SECURE\" & spinner_loading\n\n# Create $VMLOGS dir\nif [ ! -d \"$VMLOGS\" ]\nthen\n    mkdir -p \"$VMLOGS\"\nfi\n\n# Make all files in executable again\nfor executable in $find_executables\ndo\n    chmod +x \"$executable\"\ndone\n\nCURRENTVERSION_after=$(nextcloud_occ status | grep \"versionstring\" | awk '{print $3}')\nif [[ \"$NCVERSION\" == \"$CURRENTVERSION_after\" ]] || [ -n \"$PRERELEASE_VERSION\" ]\nthen\n    msg_box \"Latest version is: $NCVERSION. Current version is: $CURRENTVERSION_after.\n\n||| UPGRADE SUCCESS! |||\n\nIf you notice that some apps are disabled, it's because they are not compatible with the new Nextcloud version.\nTo recover your old apps, please check $BACKUP/apps and copy them to $NCPATH/apps manually.\n\nThank you for using T&M Hansson IT's updater!\"\n    nextcloud_occ status\n    # Restart notify push if existing\n    if [ -f \"$NOTIFY_PUSH_SERVICE_PATH\" ]\n    then\n        systemctl restart notify_push\n    fi\n    print_text_in_color \"$ICyan\" \"Sending notification about the successful update to all admins...\"\n    notify_admin_gui \\\n    \"Nextcloud is now updated!\" \\\n    \"Your Nextcloud is updated to $CURRENTVERSION_after with the update script in the Nextcloud VM.\"\n    mkdir -p \"$VMLOGS\"/updates\n    rm -f \"$VMLOGS\"/update.log # old place\n    echo \"NEXTCLOUD UPDATE success-$(date +\"%Y%m%d\")\" >> \"$VMLOGS\"/updates/update.log\n    # Remove logs from last year to save space\n    rm -f \"$VMLOGS\"/updates/update-\"$(date --date='1 year ago' +%Y)\"*\n    if [ -n \"$SNAPSHOT_EXISTS\" ]\n    then\n        check_command lvrename /dev/ubuntu-vg/NcVM-snapshot-pending /dev/ubuntu-vg/NcVM-snapshot\n        countdown \"Automatically restarting your server in 1 minute since LVM-snapshots are present.\" \"60\"\n        shutdown -r\n    fi\n    exit 0\nelse\n    msg_box \"Latest version is: $NCVERSION. Current version is: $CURRENTVERSION_after.\n\n||| UPGRADE FAILED! |||\n\nNo worries, your files are still backed up at $BACKUP!\nPlease report this issue to $ISSUES\n\nMaintenance mode is kept on.\"\n    notify_admin_gui \\\n    \"Nextcloud update failed!\" \\\n    \"Your Nextcloud update failed, please check the logs at $VMLOGS/update.log\"\n    nextcloud_occ status\n    if [ -n \"$SNAPSHOT_EXISTS\" ]\n    then\n        # Kill all \"$SCRIPTS/update.sh\" processes to make sure that no automatic restart happens after exiting this script\n        # shellcheck disable=2009\n        PROCESS_IDS_NEW=$(ps aux | grep \"$SCRIPTS/update.sh\" | grep -v grep | awk '{print $2}')\n        if [ -n \"$PROCESS_IDS_NEW\" ]\n        then\n            mapfile -t PROCESS_IDS_NEW <<< \"$PROCESS_IDS_NEW\"\n            for process in \"${PROCESS_IDS_NEW[@]}\"\n            do\n                print_text_in_color \"$ICyan\" \"Killing the process with PID $process to prevent a potential automatic restart...\"\n                if ! kill \"$process\"\n                then\n                    print_text_in_color \"$IRed\" \"Couldn't kill the process with PID $process...\"\n                fi\n            done\n        fi\n    fi\n    exit 1\nfi\n"
        },
        {
          "name": "not-supported",
          "type": "tree",
          "content": null
        },
        {
          "name": "old",
          "type": "tree",
          "content": null
        },
        {
          "name": "static",
          "type": "tree",
          "content": null
        },
        {
          "name": "torrent",
          "type": "tree",
          "content": null
        },
        {
          "name": "vagrant",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}