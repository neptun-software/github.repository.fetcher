{
  "metadata": {
    "timestamp": 1736568811102,
    "page": 966,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk2OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "gradle/gradle-completion",
      "stars": 1039,
      "defaultBranch": "master",
      "files": [
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.6982421875,
          "content": "## Accept Developer Certificate of Origin\n\nIn order for your contributions to be accepted, you must [sign off](https://git-scm.com/docs/git-commit#git-commit---signoff) your Git commits to indicate that you agree to the terms of [Developer Certificate of Origin](https://developercertificate.org/).\n\n## Follow the Code of Conduct\n\nIn order to foster a more inclusive community, Gradle has adopted the [Contributor Covenant](https://www.contributor-covenant.org/version/1/4/code-of-conduct/).\n\nContributors must follow the Code of Conduct outlined at [https://gradle.org/conduct/](https://gradle.org/conduct/).\n\n## Making Changes\n\n### Development setup\n\nYou can test local changes to `gradle-completion.bash` by executing \n\n```bash\nsource path/to/gradle-completion.bash\n``` \n\nand then using completion as normal.\n\nFor ZSH, set your `fpath` to point to the cloned git repository\n\n```bash\nexport fpath=($HOME/src/your_user/gradle-completion \\$fpath)\n```\n\nThen execute `unfunction _gradle && autoload -U _gradle` to reload the gradle completion function, after which you can try completion as normal.\n\n### Debugging\n\nYou can get a debug trace of zsh completion by typing `Ctrl-X ?` instead of hitting `[TAB]`. That is especially helpful when submitting bug reports.\n\nHere's a handy [how-to on bash completion](https://iridakos.com/tutorials/2018/03/01/bash-programmable-completion-tutorial.html) and [zsh completion reference](https://github.com/zsh-users/zsh-completions/blob/master/zsh-completions-howto.org).\n\n## Updating Homebrew formula\nUpdating the `gradle-completion` formula for Homebrew takes extra setup to perform all of the verification Homebrew requires.\n\nFirst you will need to ensure you can build native ruby gem extensions necessary for `brew audit`:\n\n``` \nxcode-select --install\nbrew vendor-install ruby\n\n# Check for any homebrew issues\nbrew doctor\n\n# Add this to your environment\nexport PATH=\"/usr/local/opt/ruby/bin:$PATH\"\nexport LDFLAGS=\"-L/usr/local/opt/ruby/lib\"\nexport CPPFLAGS=\"-I/usr/local/opt/ruby/include\"\nexport PKG_CONFIG_PATH=\"/usr/local/opt/ruby/lib/pkgconfig\"\n```\n\nEnsure you have created a release tag on GitHub for `VERSION`.\n\n```\nexport GRADLE_COMPLETION_VERSION=\"1.4.1\"\nwget \"https://github.com/gradle/gradle-completion/archive/v${GRADLE_COMPLETION_VERSION}.tar.gz\"\ncat \"v${GRADLE_COMPLETION_VERSION}.tar.gz\" | shasum -a 256 | awk '{print $1}'\n\n# Use brew tools to audit and create PR to homebrew/core â€” don't forget to replace `VERSION` AND `SHA_256`!\nbrew bump-formula-pr --url=https://github.com/gradle/gradle-completion/archive/v<VERSION>.tar.gz --sha256=<SHA_256> gradle-completion\n```\n\n### Creating Commits And Writing Commit Messages\n\nThe commit messages that accompany your code changes are an important piece of documentation, please follow these guidelines when writing commit messages:\n\n* Keep commits discrete: avoid including multiple unrelated changes in a single commit\n* Keep commits self-contained: avoid spreading a single change across multiple commits. A single commit should make sense in isolation\n* If your commit pertains to a GitHub issue, include (`Issue: #123`) in the commit message on a separate line\n* [Sign off](https://git-scm.com/docs/git-commit#git-commit---signoff) your commits to indicate that you agree to the terms of [Developer Certificate of Origin](https://developercertificate.org/).\n\n### Submitting Your Change\n\nAfter you submit your pull request, a Gradle core developer will review it. It is normal that this takes several iterations, so don't get discouraged by change requests. They ensure the high quality that we all enjoy.\n\nIf you need to check on CI status as an external contributor, login as a guest.\n\n### Signing Off Commits After Submitting a Pull Request\n\nPull requests are automatically verified that all commit messages contain the Signed-off-by line with an email address that matches the commit author. In case you didn't sign off your commits before creating a pull request, you can still fix that to confirm that you agree to the terms of [Developer Certificate of Origin](https://developercertificate.org/).\n\nTo sign off a single commit:\n\n`git commit --amend --signoff`\n\nTo sign off one or multiple commits:\n\n`git filter-branch --msg-filter \"cat - && echo && echo 'Signed-off-by: Your Name <Your.Name@example.com>'\" HEAD`\n\nThen force push your branch:\n\n`git push --force origin test-branch`\n\n## Getting Help\n\nIf you run into any trouble, please reach out to us on the issue you are working on.\n\n## Our Thanks\n\nWe deeply appreciate your effort toward improving Gradle. For any contribution, large or small, you will be immortalized in the release notes for the version you've contributed to.\n\nIf you enjoyed this process, perhaps you should consider getting [paid to develop Gradle](https://gradle.com/careers)?\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0322265625,
          "content": "Copyright (c) 2017 Eric Wendelin\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.1279296875,
          "content": "# gradle-completion\nBash and Zsh completion support for [Gradle](https://gradle.org).\n\nThis provides _fast_ tab completion for:\n\n * Gradle tasks for the current project and sub-projects\n * Gradle CLI switches (e.g. `--parallel`)\n * Common Gradle properties (e.g. `-Dorg.gradle.debug`)\n\nIt also handles custom default build files, so `rootProject.buildFileName = 'build.gradle.kts'` is supported.\n\nSee instructions [for bash](https://github.com/gradle/gradle-completion/blob/master/README.md#installation-for-bash-32) or [for zsh](https://github.com/gradle/gradle-completion/blob/master/README.md#installation-for-zsh-50), then consider optional [additional configuration](https://github.com/gradle/gradle-completion/blob/master/README.md#additional-configuration).\n\nHere's a demo for the gradle project itself:\n![Completion demo](gradle-completion-4.0.gif)\n\n## Installation for Zsh 5.0+\n\n### Install via [Homebrew](https://brew.sh)\n\n```\nbrew install gradle-completion\n\n# Ensure /usr/local/share/zsh/site-functions is on $fpath. You should get a result from the following\necho $fpath | grep \"/usr/local/share/zsh/site-functions\"\n```\n\n### Install as [oh-my-zsh](https://ohmyz.sh/) plugin\n\nDownload and place the plugin and completion script into your oh-my-zsh plugins directory. \n```\ngit clone https://github.com/gradle/gradle-completion ~/.oh-my-zsh/plugins/gradle-completion\n```\n\nAdd `gradle-completion` to the plugins array in your '.zshrc' file.\n```\nplugins+=(gradle-completion)\n```\n\n### Install manually\n\nDownload and place `_gradle` on your `$fpath`. I recommend `$HOME/.zsh/gradle-completion`:\n```\ngit clone https://github.com/gradle/gradle-completion ~/.zsh/gradle-completion\n```\n\nAdd the following do your '.zshrc' file:\n```\necho \"\\nfpath=($HOME/.zsh/gradle-completion \\$fpath)\" >> ~/.zshrc\n```\n\nStart a new terminal session. You may need to disable the `gradle` plugin for `oh-my-zsh`.\n\n#### (Optional) Manual Completion Cache Initialization\nCompletion cache initialization happens the first time you invoke completion,\nand usually takes a few seconds, depending on the size of your project. You can\nmanually initialize the cache and avoid interrupting your development mojo by\nrunning:\n\n```bash\ncd path/to/your-project\nsource ~/.zsh/gradle-completion/_gradle 1>&2 2>/dev/null; __gradle-completion-init\n```\n\n## Installation for Bash 3.2+\n\n### Install via [Homebrew](https://brew.sh)\n\n```\nbrew install gradle-completion\n\n# Source completion scripts from bash-completion in your bash profile\necho '[[ -r \"/usr/local/etc/profile.d/bash_completion.sh\" ]] && . \"/usr/local/etc/profile.d/bash_completion.sh\"' >> ~/.bash_profile\n\n# Load changes to bash profile\nsource ~/.bash_profile\n```\n\n### Install manually\n\nDownload and place `gradle-completion.bash` in your `bash_completion.d` folder, usually `/etc/bash_completion.d`, `/usr/local/etc/bash_completion.d`, or `$HOME/bash_completion.d`:\n```\nmkdir $HOME/bash_completion.d\ncurl -LA gradle-completion https://edub.me/gradle-completion-bash -o $HOME/bash_completion.d/gradle-completion.bash\n```\n\nNOTE: Ensure `bash-completion` 1.2+ is installed using your favorite package manager or by following the [bash-completion installation instructions](https://github.com/scop/bash-completion/blob/master/README.md#installation).\n\nAdd the following to your `.bash_profile` (macOS) or `.bashrc` (Linux) file:\n```\nsource $HOME/bash_completion.d/gradle-completion.bash\n```\n\nStart a new terminal session.\n\n#### (Optional) Manual Completion Cache Initialization\nCompletion cache initialization happens the first time you invoke completion,\nand usually takes a few seconds, depending on the size of your project. You can\nmanually initialize the cache and avoid interrupting your development mojo by\nrunning:\n\n```bash\ncd path/to/your-project\n__gradle-completion-init\n```\n\n## Additional Configuration\n\n#### Excluding build scripts from UP-TO-DATE check\nTab completion checks known build scripts to see if they've been changed and refreshes the task cache if so.\nYou can exclude build scripts from this check (and speed up completion) by specifying:\n\n```bash\n# Default is `\"/(build|integTest|out)/\"`\nexport GRADLE_COMPLETION_EXCLUDE_PATTERN=\"/(build|integTest|samples|smokeTest|testFixtures|templates|out|features)/\"\n# Essentially turn off checking for changed scripts\nexport GRADLE_COMPLETION_EXCLUDE_PATTERN=\"gradle\"\n```\n\n#### Completion cache\nOne can manually (re)generate the completion cache by invoking `__gradle-completion-init` after the\ncompletion script has been sourced. This graciously avoids an unexpected cache build when invoking\ncompletion.\n\nThe build script cache is invalidated if any *.gradle or *.gradle.kts files change.\nHowever, these completion scripts do not search for new build scripts every time completion is invoked, because\nthat would make completion ~20x slower (unless you have so really good ideas on this).\n\nBy default, the build script cache is invalidated every 3 weeks (30240 minutes).\nYou can configure this value by exporting a new value for `$GRADLE_CACHE_TTL_MINUTES`:\n```bash\nexport GRADLE_CACHE_TTL_MINUTES=$(expr 1440 \\* number_of_days_you_want)\n```\n\n#### Implicit Tasks\nGradle allows you to access tasks of subprojects from the project root implicitly.\nFor example, given these tasks:\n```\n:foo\n:help\n:bar:baz\n```\n\nYou can execute `gradle baz` from the project root and it will execute `:bar:baz`.\n\ngradle-completion will not tab complete these tasks by default because it adds a\nsignificant number of completion options, which may not be what you want and\nnegatively impacts completion speed.\n\nTo allow completion of implicit tasks, set `$GRADLE_COMPLETION_UNQUALIFIED_TASKS=true`:\n\n```bash\nexport GRADLE_COMPLETION_UNQUALIFIED_TASKS=\"true\"\n```\n\nYou may need to invalidate the cache using the cache config above or by executing `touch build.gradle`.\n\n## Troubleshooting\nIf zsh completion isn't working, first try checking your `$fpath` with `echo $fpath`.\n\nzsh completion using `./gradlew` may not work on Linux if you don't have `.` on your `$PATH`,\nso I recommend adding it in your `~/.zshrc` file:\n```bash\nexport PATH=\".:$PATH\"\n```\n\n> HEADS UP: If you get an error 'parse error near `]]\"', please [upgrade zsh](http://stackoverflow.com/questions/17648621/how-do-i-update-zsh-to-the-latest-version).\nzsh 5.0.5 has a bug in script parsing that is fixed as of zsh 5.0.8. See issues #4 and #7 for more details.\n\nIf zsh completion reports \"Generating Gradle task cache...\" every time, the zsh completion cache\nmay be disabled. Enable it by adding the following to your `~/.zshrc` file:\n```bash\nzstyle ':completion:*' use-cache on\n```\n\n## Contributing\n\nSee the [contributing guide](CONTRIBUTING.md).\n\n## Acknowledgements\nBash completion is inspired by [Nolan Lawson's Gradle tab completion for bash](https://gist.github.com/nolanlawson/8694399).\n\nZsh completion is an improved version of [zsh](https://github.com/zsh-users/zsh)'s built-in Gradle completion.\n\nCurrent improvements over built-in support:\n - Subproject tasks are completed\n - Gradle CLI options are current as of Gradle 6.4\n - Common Gradle properties are completed\n - Handles default build file as specified in settings.gradle\n - ~20x faster completion speed for medium to large projects\n - Completion cache updates in the background after first invocation\n"
        },
        {
          "name": "_gradle",
          "type": "blob",
          "size": 24.0830078125,
          "content": "#compdef gradle gradlew gw\n\n__gradle-set-project-root-dir() {\n    local dir=`pwd`\n    project_root_dir=`pwd`\n    while [[ $dir != '/' ]]; do\n        if [[ -f \"$dir/settings.gradle\" || -f \"$dir/settings.gradle.kts\" || -f \"$dir/gradlew\" ]]; then\n            project_root_dir=$dir\n            return 0\n        fi\n        dir=\"$(dirname \"$dir\")\"\n    done\n    return 1\n}\n\n__gradle-init-cache-dir() {\n    cache_dir=\"${GRADLE_USER_HOME:-$HOME/.gradle}/completion\"\n    mkdir -p $cache_dir\n}\n\n__gradle-set-settings-file() {\n    # In order of precedence: --settings-file=filename, settings.gradle, settings.gradle.kts\n\n    local default_gradle_settings_file=\"$project_root_dir/settings.gradle\"\n    if [[ ! -f $default_gradle_settings_file ]]; then\n      default_gradle_settings_file=\"$project_root_dir/settings.gradle.kts\"\n    fi\n    gradle_settings_file=${${(v)opt_args[(i)-c|--settings-file]}:-$default_gradle_settings_file}\n}\n\n__gradle-set-build-file() {\n    __gradle-set-settings-file\n    # In order of precedence: --build-file=filename, rootProject.buildFileName, build.gradle, build.gradle.kts\n\n    local default_gradle_build_file_name=\"build.gradle\"\n    if [[ -r $gradle_settings_file ]]; then\n        default_gradle_build_file_name=${$(grep \"^rootProject\\.buildFileName\" $gradle_settings_file | \\\n            sed -n -e \"s/rootProject\\.buildFileName = [\\'\\\"]\\(.*\\)[\\'\\\"]/\\1/p\")}\n\n        default_gradle_build_file_name=\"${default_gradle_build_file:-build.gradle}\"\n    fi\n\n    local default_gradle_build_file=\"$project_root_dir/$default_gradle_build_file_name\"\n    if [[ ! -f $default_gradle_build_file ]]; then\n        default_gradle_build_file=\"$project_root_dir/build.gradle.kts\"\n    fi\n\n    # If a build file is specified after '-b' or '--build-file', use this file.\n    gradle_build_file=${${(v)opt_args[(i)-b|--build-file]}:-$default_gradle_build_file}\n}\n\n__gradle-set-cache-name() {\n    # Cache name is constructed from the absolute path of the build file.\n    cache_name=${${gradle_build_file:a}//[^[:alnum:]]/_}\n}\n\n__gradle-set-files-checksum() {\n    # Cache MD5 sum of all Gradle scripts and modified timestamps\n    if builtin command -v md5 > /dev/null; then\n        gradle_files_checksum=( $(md5 -q -s \"$(cat \"$cache_dir/$cache_name\" | xargs ls -o 2>/dev/null)\") )\n    elif builtin command -v md5sum > /dev/null; then\n        gradle_files_checksum=( $(cat \"$cache_dir/$cache_name\" | xargs ls -o 2>/dev/null | md5sum | awk '{print $1}') )\n    else\n        _message 'Cannot generate completions as neither md5 nor md5sum exist on \\$PATH'\n        return 1\n    fi\n}\n\n__gradle-generate-script-cache() {\n    # Invalidate cache after 3 weeks by default\n    local cache_ttl_mins=${$(echo $GRADLE_CACHE_TTL_MINUTES):-30240}\n    local script_exclude_pattern=${$(echo $GRADLE_COMPLETION_EXCLUDE_PATTERN):-\"/(.git|build|integTest|samples|templates|smokeTest|testFixtures|out)/\"}\n    if [[ ! $(find $cache_dir/$cache_name -mmin -$cache_ttl_mins 2>/dev/null) ]]; then\n        zle -R \"Generating Gradle build script cache\"\n        # Cache all Gradle scripts\n        local -a gradle_build_scripts\n        gradle_build_scripts=( $(find $project_root_dir -type f -name \"*.gradle\" -o -name \"*.gradle.kts\" 2>/dev/null | grep -E -v \"$script_exclude_pattern\") )\n        printf \"%s\\n\" \"${gradle_build_scripts[@]}\" >| $cache_dir/$cache_name\n    fi\n}\n\n__gradle-generate-tasks-cache() {\n    __gradle-set-files-checksum\n\n    # Use Gradle wrapper when it exists.\n    local gradle_cmd=\"gradle\"\n    if [[ -x \"$project_root_dir/gradlew\" ]]; then\n        gradle_cmd=\"$project_root_dir/gradlew\"\n    fi\n\n    zle -R \"Generating Gradle task cache from $gradle_build_file\"\n\n    # Run gradle to retrieve possible tasks and cache.\n    # Reuse Gradle Daemon if IDLE but don't start a new one.\n    local gradle_tasks_output\n    if [[ ! -z \"$($gradle_cmd --status 2>/dev/null | grep IDLE)\" ]]; then\n        gradle_tasks_output=\"$($gradle_cmd --daemon --no-scan --build-file $gradle_build_file --console=plain -q tasks --all 2>/dev/null)\"\n    else\n        gradle_tasks_output=\"$($gradle_cmd --no-daemon --no-scan --build-file $gradle_build_file --console=plain -q tasks --all 2>/dev/null)\"\n    fi\n    local gradle_all_tasks=\"\" root_tasks=\"\" subproject_tasks=\"\" output_line\n    local -a match\n    for output_line in ${(f)\"$(printf \"%s\\n\" \"${gradle_tasks_output[@]}\")\"}; do\n        if [[ $output_line =~ ^([[:alpha:]][[:alnum:][:punct:]]*)([[:space:]]-[[:space:]]([[:print:]]*))? ]]; then\n            local task_name=\"${match[1]}\"\n            local task_description=\"${match[3]}\"\n            # Completion for subproject tasks with ':' prefix\n            if [[ $task_name =~ ^([[:alnum:][:punct:]]+):([[:alnum:]]+) ]]; then\n                gradle_all_tasks+=\"${task_name//:/\\\\:}:$task_description\\n\\\\:${task_name//:/\\\\:}:$task_description\\n\"\n                subproject_tasks+=\"${match[2]}\\n\"\n            else\n                gradle_all_tasks+=\"${task_name//:/\\\\:}:$task_description\\n\"\n                root_tasks+=\"$task_name\\n\"\n            fi\n        fi\n    done\n\n    # subproject tasks can be referenced implicitly from root project\n    if [[ $GRADLE_COMPLETION_UNQUALIFIED_TASKS == \"true\" ]]; then\n        local -a implicit_tasks\n        implicit_tasks=( $(comm -23 <(echo $subproject_tasks | sort) <(echo $root_tasks | sort)) )\n        for task in $(printf \"%s\\n\" \"${implicit_tasks[@]}\"); do\n            gradle_all_tasks+=\"$task\\n\"\n        done\n    fi\n\n    echo $gradle_all_tasks >| $cache_dir/$gradle_files_checksum\n    echo $gradle_files_checksum >| $cache_dir/$cache_name.md5\n}\n\n__gradle-completion-init() {\n    local cache_dir cache_name gradle_build_file gradle_files_checksum project_root_dir\n    __gradle-init-cache-dir\n    __gradle-set-project-root-dir\n    __gradle-set-build-file\n    if [[ -f $gradle_build_file ]]; then\n        __gradle-set-cache-name\n        __gradle-generate-script-cache\n        __gradle-set-files-checksum\n        __gradle-generate-tasks-cache\n    fi\n    return 0\n}\n\n__gradle_tasks() {\n    local cache_dir cache_name gradle_build_file gradle_files_checksum project_root_dir\n\n    __gradle-init-cache-dir\n    __gradle-set-project-root-dir\n    __gradle-set-build-file\n    if [[ -f $gradle_build_file ]]; then\n        __gradle-set-cache-name\n        __gradle-generate-script-cache\n        __gradle-set-files-checksum\n\n        # The cache key is md5 sum of all gradle scripts, so it's valid if it exists.\n        if [[ -f $cache_dir/$cache_name.md5 ]]; then\n            local cached_checksum=\"$(cat $cache_dir/$cache_name.md5)\"\n            local -a cached_tasks\n            if [[ -z $cur ]]; then\n                cached_tasks=(${(f)\"$(grep -v \"^\\\\\\:\" $cache_dir/$cached_checksum)\"})\n            else\n                cached_tasks=(${(f)\"$(grep \"^${cur//:/\\\\\\\\:}\" $cache_dir/$cached_checksum)\"})\n            fi\n            _describe 'all tasks' cached_tasks && ret=0\n        else\n            __gradle-generate-tasks-cache\n        fi\n\n        # Regenerate tasks cache in the background\n        if [[ $gradle_files_checksum != \"$(cat $cache_dir/$cache_name.md5)\" || ! -f $cache_dir/$gradle_files_checksum || $(wc -c < $cache_dir/$gradle_files_checksum) -le 1 ]]; then\n            $(__gradle-generate-tasks-cache &> /dev/null &)\n        fi\n    else\n        _describe 'built-in tasks' '(\n            \"buildEnvironment:Displays all buildscript dependencies declared in root project.\"\n            \"components:Displays the components produced by root project.\"\n            \"dependencies:Displays all dependencies declared in root project.\"\n            \"dependencyInsight:Displays the insight into a specific dependency in root project.\"\n            \"dependentComponents:Displays the dependent components of components in root project.\"\n            \"help:Displays a help message.\"\n            \"init:Initializes a new Gradle build.\"\n            \"model:Displays the configuration model of root project.\"\n            \"projects:Displays the sub-projects of root project.\"\n            \"properties:Displays the properties of root project.\"\n            \"tasks:Displays the tasks runnable from root project.\"\n            \"wrapper:Generates Gradle wrapper files.\"\n            )' && ret=0\n    fi\n}\n\n__gradle_subcommand() {\n    integer ret=1\n\n    case \"$words[1]\" in\n        (dependencies)\n            _arguments \\\n                '--configuration=[The configuration to generate the report for.]:dependency configuration:_gradle_dependency_configurations' && ret=0\n            ;;\n        (dependencyInsight)\n            _arguments \\\n                '--dependency=[Shows the details of given dependency.]' \\\n                '--configuration=[Looks for the dependency in given configuration.]:dependency configuration:_gradle_dependency_configurations' && ret=0\n            ;;\n        (help)\n            _arguments \\\n                '--task[The task to show help for.]' && ret=0\n            ;;\n        (init)\n            _arguments \\\n                '--dsl=[DSL to be used in generated scripts.]:dsl:(groovy kotlin)' \\\n                '--package=[Package for the generated source.]' \\\n                '--project-name=[Name of the generated project.]' \\\n                '--test-framework=[Test framework to be used.]:test framework:(junit kotlintest scalatest spock testng)' \\\n                '--type=[Project type to generate.]:project type:(basic cpp-application cpp-library groovy-application groovy-library java-application java-library kotlin-application kotlin-library pom scala-library)' && ret=0\n            ;;\n        (tasks)\n            _arguments \\\n                '--all[List all tasks, including subproject tasks.]' \\\n                '--group=[Show tasks only from given task group.]' && ret=0\n            ;;\n        (test)\n            _arguments -C \\\n                '--debug-jvm[Enable debugging for the test process. The process is started suspended and listening on port 5005. Requires the \"java\" plugin.]' \\\n                '--fail-fast[Stops test execution after the first failed test. Requires the \"java\" plugin.]' \\\n                '--tests=[Sets test class or method name to be included, * is supported. Requires the \"java\" plugin.]' \\\n                '(-)*:: :->task-or-option' && ret=0\n            ;;\n        (wrapper)\n            _arguments \\\n                '--distribution-type=[Binary-only or all with docs and sources]:*:distribution type:(bin all)' \\\n                '--gradle-version=[Set Gradle version for wrapper]' \\\n                '--gradle-distribution-sha256-sum=[SHA-256 checksum]' \\\n                '--gradle-distribution-url=[Set Gradle distribution URL]' && ret=0\n            ;;\n        (*)\n            _arguments -C \\\n                {-a,--no-rebuild}'[Do not rebuild project dependencies.]' \\\n                '(--no-build-cache)--build-cache[Enable the Gradle build cache.]' \\\n                {-b,--build-file}'[Specifies the build file.]:build script:_files -g \\*.gradle' \\\n                {-C,--cache}'[Specifies how compiled build scripts should be cached.]:cache policy:(on rebuild)' \\\n                {-c,--settings-file}'[Specifies the settings file.]:settings file:_files -g \\*.gradle' \\\n                '(--configuration-cache)--no-configuration-cache[Disables the configuration cache. Gradle will not reuse the build configuration from previous builds.]' \\\n                '--configuration-cache-problems=[Configures how the configuration cache handles problems]:problem handling:(fail warn)' \\\n                '(--no-configure-on-demand)--configure-on-demand[Only relevant projects are configured in this build run.]' \\\n                '(--no-configuration-cache)--configuration-cache[Enables the configuration cache. Gradle will try to reuse the build configuration from previous builds.]' \\\n                '--console=[Specifies which type of console output to generate.]:console output type:(plain auto rich verbose)' \\\n                '--continue[Continues task execution after a task failure.]' \\\n                '-Dorg.gradle.cache.reserved.mb=[Reserve Gradle Daemon memory for operations.]' \\\n                '-Dorg.gradle.caching=[Set true to enable Gradle build cache.]:enable build cache:(true false)' \\\n                '-Dorg.gradle.console=[Set type of console output to generate.]:console output type:(plain auto rich verbose)' \\\n                '-Dorg.gradle.daemon.debug=[Set true to debug Gradle Daemon.]:enable daemon debug:(true false)' \\\n                '-Dorg.gradle.daemon.idletimeout=[Kill Gradle Daemon after # idle millis.]' \\\n                '-Dorg.gradle.debug=[Set true to debug Gradle Client.]' \\\n                '-Dorg.gradle.jvmargs=[Set JVM arguments.]' \\\n                '-Dorg.gradle.java.home=[Set JDK home dir.]' \\\n                '-Dorg.gradle.logging.level=[Set default Gradle log level.]:log level:(quiet warn lifecycle info debug)' \\\n                '-Dorg.gradle.parallel=[Set true to enable parallel project builds.]:enable parallel build:(true false)' \\\n                '-Dorg.gradle.priority=[Set priority for Gradle worker processes.]:priority:(low normal)' \\\n                '-Dorg.gradle.unsafe.watch-fs=[Set true to enable Gradle file watcher.]:enable watcher:(true false)' \\\n                '-Dorg.gradle.warning.mode=[Set types of warnings to log.]:warning level:(all summary none)' \\\n                '-Dorg.gradle.workers.max=[Set the number of workers Gradle is allowed to use.]' \\\n                '(-i --info -w --warn -q --quiet)'{-d,--debug}'[Log in debug mode (includes normal stacktrace).]' \\\n                '(--no-daemon)--daemon[Uses the Gradle daemon to run the build. Starts the daemon if not running.]' \\\n                '--foreground[Starts the Gradle daemon in the foreground.]' \\\n                {-g,--gradle-user-home}'[Specifies the gradle user home directory.]:file:_directories' \\\n                \\*--include-build'[Includes the specified build in the composite.]:file:_directories' \\\n                \\*{-I,--init-script}'[Specifies an initialization script.]:init script:_files -g \\*.gradle' \\\n                '(-d --debug -w --warn -q --quiet)'{-i,--info}'[Set log level to info.]' \\\n                '--max-workers[Set the maximum number of concurrent workers that Gradle may use.]:number workers' \\\n                {-m,--dry-run}'[Runs the builds with all task actions disabled.]' \\\n                '--no-color[Do not use color in the console output. (Removed in Gradle 3.0)]' \\\n                '(--build-cache)--no-build-cache[Do not use the Gradle build cache.]' \\\n                '(--configure-on-demand)--no-configure-on-demand[Disables configuration on demand.]' \\\n                '(--daemon)--no-daemon[Do not use the Gradle daemon to run the build.]' \\\n                '(--parallel)--no-parallel[Disables parallel execution to build projects.]' \\\n                '(--scan)--no-scan[Do not create a build scan.]' \\\n                '--offline[The build should operate without accessing network resources.]' \\\n                \\*{-P+,--project-prop}'[Set project property for the build script (e.g. -Pmyprop=myvalue).]:project property (prop=val):' \\\n                {-p,--project-dir}'[Specifies the start directory for Gradle.]:start directory:_directories' \\\n                '(--no-parallel)--parallel[Build projects in parallel. Gradle will attempt to determine the optimal number of executor threads to use.]' \\\n                '--profile[Profiles build execution time and generates a report in the <build_dir>/reports/profile directory.]' \\\n                '--priority[Set priority for Gradle worker processes.]:priority:(low normal)' \\\n                '--project-cache-dir[Specifies the project-specific cache directory.]:cache directory:_directories' \\\n                '(-d --debug -w --warn -i --info)'{-q,--quiet}'[Log errors only.]' \\\n                '--recompile-scripts[Force build script recompiling.]' \\\n                '--refresh[Refresh the state of resources of the type(s) specified.]:refresh policy:(dependencies)' \\\n                '--refresh-dependencies[Refresh the state of dependencies.]' \\\n                '--rerun-tasks[Ignore previously cached task results.]' \\\n                '(--no-scan)--scan[Create a build scan.]' \\\n                '(-S --full-stacktrace)'{-s,--stacktrace}'[Print out the stacktrace for all exceptions.]' \\\n                '(-s --stacktrace)'{-S,--full-stacktrace}'[Print out the full (very verbose) stacktrace for all exceptions.]' \\\n                '--system-prop[system property (prop=val)]' \\\n                {-t,--continuous}'[Enables continuous build. Gradle does not exit and will re-execute tasks when task file inputs change.]' \\\n                {-u,--no-search-upward}\"[Don't search in parent folders for a settings.gradle file.]\" \\\n                '(--write-locks)--update-locks[Perform a partial update of the dependency lock.]' \\\n                '(-d --debug -q --quiet -i --info)'{-w,--warn}'[Log warnings and errors only.]' \\\n                '--warning-mode=[Set types of warnings to log.]:warning mode:(all summary none)' \\\n                '(--no-watch-fs)--watch-fs[Gradle watches filesystem for incremental builds.]' \\\n                '(--update-locks)--write-locks[Persists dependency resolution for locked configurations.]' \\\n                {-x,--exclude-task}'[Specify a task to be excluded from execution.]' && ret=0\n            ;;\n    esac\n\n    return ret\n}\n\n(( $+functions[_gradle_dependency_configurations] )) ||\n_gradle_dependency_configurations() {\n    local configurations\n    configurations=(\n        'compileClasspath'\n        'runtimeClasspath'\n        'testCompileClasspath'\n        'testRuntimeClasspath'\n    )\n    _describe -t 'dependency configurations' \"dependency configuration\" configurations\n}\n\n_gradle() {\n    local cur=${words[CURRENT]}\n    local curcontext=\"$curcontext\" state\n    integer ret=1\n    typeset -A opt_args\n\n    _arguments -C \\\n        '(-)'{-\\?,-h,--help}'[Shows a help message.]' \\\n        {-a,--no-rebuild}'[Do not rebuild project dependencies.]' \\\n        '(--no-build-cache)--build-cache[Enable the Gradle build cache.]' \\\n        {-b,--build-file}'[Specifies the build file.]:build script:_files -g \\*.gradle' \\\n        {-C,--cache}'[Specifies how compiled build scripts should be cached.]:cache policy:(on rebuild)' \\\n        {-c,--settings-file}'[Specifies the settings file.]:settings file:_files -g \\*.gradle:->argument-expected' \\\n        '(--no-configuration-cache)--configuration-cache[Enables the configuration cache. Gradle will try to reuse the build configuration from previous builds.]' \\\n        '(--configuration-cache)--no-configuration-cache[Disables the configuration cache. Gradle will not reuse the build configuration from previous builds.]' \\\n        '--configuration-cache-problems=[Configures how the configuration cache handles problems]:problem handling:(fail warn)' \\\n        '(--no-configure-on-demand)--configure-on-demand[Only relevant projects are configured in this build run.]' \\\n        '--console=[Specifies which type of console output to generate.]:console output type:(plain auto rich verbose)' \\\n        '--continue[Continues task execution after a task failure.]' \\\n        '-Dorg.gradle.cache.reserved.mb=[Reserve Gradle Daemon memory for operations.]' \\\n        '-Dorg.gradle.caching=[Set true to enable Gradle build cache.]' \\\n        '-Dorg.gradle.console=[Set type of console output to generate.]:console output type:(plain auto rich verbose)' \\\n        '-Dorg.gradle.daemon.debug=[Set true to debug Gradle Daemon.]' \\\n        '-Dorg.gradle.daemon.idletimeout=[Kill Gradle Daemon after # idle millis.]' \\\n        '-Dorg.gradle.debug=[Set true to debug Gradle Client.]' \\\n        '-Dorg.gradle.jvmargs=[Set JVM arguments.]' \\\n        '-Dorg.gradle.java.home=[Set JDK home dir.]' \\\n        '-Dorg.gradle.logging.level=[Set default Gradle log level.]:log level:(quiet warn lifecycle info debug)' \\\n        '-Dorg.gradle.parallel=[Set true to enable parallel project builds.]:(true false)' \\\n        '-Dorg.gradle.priority=[Set priority for Gradle worker processes.]:priority:(low normal)' \\\n        '-Dorg.gradle.unsafe.watch-fs=[Set true to enable Gradle file watcher.]:enable watcher:(true false)' \\\n        '-Dorg.gradle.warning.mode=[Set types of warnings to log.]:warning level:(all summary none)' \\\n        '-Dorg.gradle.workers.max=[Set the number of workers Gradle is allowed to use.]' \\\n        '(-i --info -w --warn -q --quiet)'{-d,--debug}'[Log in debug mode (includes normal stacktrace).]' \\\n        '(--no-daemon)--daemon[Uses the Gradle daemon to run the build. Starts the daemon if not running.]' \\\n        '--foreground[Starts the Gradle daemon in the foreground.]' \\\n        {-g,--gradle-user-home}'[Specifies the gradle user home directory.]:home directory:_directories:->argument-expected' \\\n        '(-)--gui[Launches the Gradle GUI. (Removed in Gradle 4.0)]' \\\n        \\*--include-build'[Includes the specified build in the composite.]:file:_directories:->argument-expected' \\\n        \\*{-I,--init-script}'[Specifies an initialization script.]:init script:_files -g \\*.gradle:->argument-expected' \\\n        '(-d --debug -w --warn -q --quiet)'{-i,--info}'[Set log level to info.]' \\\n        '--max-workers[Set the maximum number of concurrent workers that Gradle may use.]:number workers:->argument-expected' \\\n        {-m,--dry-run}'[Runs the builds with all task actions disabled.]' \\\n        '--no-color[Do not use color in the console output. (Removed in Gradle 3.0)]' \\\n        '(--build-cache)--no-build-cache[Do not use the Gradle build cache.]' \\\n        '(--configure-on-demand)--no-configure-on-demand[Disables configuration on demand.]' \\\n        '(--daemon)--no-daemon[Do not use the Gradle daemon to run the build.]' \\\n        '(--parallel)--no-parallel[Disables parallel execution to build projects.]' \\\n        '(--scan)--no-scan[Do not create a build scan.]' \\\n        '--offline[The build should operate without accessing network resources.]' \\\n        \\*{-P+,--project-prop}'[Set project property for the build script (e.g. -Pmyprop=myvalue).]:project property (prop=val):->argument-expected' \\\n        {-p,--project-dir}'[Specifies the start directory for Gradle.]:start directory:_directories:->argument-expected' \\\n        '(--no-parallel)--parallel[Build projects in parallel. Gradle will attempt to determine the optimal number of executor threads to use.]' \\\n        '--priority=[Set priority for Gradle worker processes.]:priority:(low normal)' \\\n        '--profile[Profiles build execution time and generates a report in the <build_dir>/reports/profile directory.]' \\\n        '--project-cache-dir=[Specifies the project-specific cache directory.]:cache directory:_directories:->argument-expected' \\\n        '(-d --debug -w --warn -i --info)'{-q,--quiet}'[Log errors only.]' \\\n        '--recompile-scripts[Force build script recompiling.]' \\\n        '--refresh[Refresh the state of resources of the type(s) specified.]:refresh policy:(dependencies)' \\\n        '--refresh-dependencies[Refresh the state of dependencies.]' \\\n        '--rerun-tasks[Ignore previously cached task results.]' \\\n        '(--no-scan)--scan[Create a build scan.]' \\\n        '(-S --full-stacktrace)'{-s,--stacktrace}'[Print out the stacktrace for all exceptions.]' \\\n        '(-s --stacktrace)'{-S,--full-stacktrace}'[Print out the full (very verbose) stacktrace for all exceptions.]' \\\n        '(-)--status[Shows status of running and recently stopped Gradle Daemons.]' \\\n        '(-)--stop[Stops all Gradle daemons.]' \\\n        '--system-prop[system property (prop=val)]' \\\n        {-t,--continuous}'[Enables continuous build. Gradle does not exit and will re-execute tasks when task file inputs change.]' \\\n        {-u,--no-search-upward}\"[Don't search in parent folders for a settings.gradle file.]\" \\\n        '(--write-locks)--update-locks[Perform a partial update of the dependency lock.]' \\\n        '(-)'{-v,--version}'[Print version info.]' \\\n        '(-d --debug -q --quiet -i --info)'{-w,--warn}'[Log warnings and errors only.]' \\\n        '--warning-mode=[Set types of warnings to log.]:warning mode:(all summary none)' \\\n        '(--update-locks)--write-locks[Persists dependency resolution for locked configurations.]' \\\n        '(--no-watch-fs)--watch-fs[Gradle watches filesystem for incremental builds.]' \\\n        {-x,--exclude-task}'[Specify a task to be excluded from execution.]' \\\n        '(-)*:: :->task-or-option' && ret=0\n\n    if [[ $words[CURRENT] != -* && $state != \"argument-expected\" ]]; then\n        __gradle_tasks && ret=0\n    else\n        curcontext=${curcontext%:*:*}:gradle-$words[1]:\n        __gradle_subcommand && ret=0\n    fi\n\n    return ret\n}\n\n_gradle \"$@\"\n"
        },
        {
          "name": "gradle-completion-4.0.gif",
          "type": "blob",
          "size": 86.96484375,
          "content": null
        },
        {
          "name": "gradle-completion.bash",
          "type": "blob",
          "size": 16.1455078125,
          "content": "__gradle-completion-print-timestamp() {\n    echo \"$(($(gdate +'%s * 1000 + %-N / 1000000'))) - $1\"\n}\n\n__gradle-set-project-root-dir() {\n    local dir=$(pwd)\n    project_root_dir=$(pwd)\n    while [[ \"$dir\" != '/' ]]; do\n        if [[ -f \"$dir/settings.gradle\" || -f \"$dir/settings.gradle.kts\" || -f \"$dir/gradlew\" ]]; then\n            project_root_dir=\"$dir\"\n            return 0\n        fi\n        dir=\"$(dirname \"$dir\")\"\n    done\n    return 1\n}\n\n__gradle-init-cache-dir() {\n    cache_dir=\"${GRADLE_USER_HOME:-$HOME/.gradle}/completion\"\n    mkdir -p \"$cache_dir\"\n}\n\n__gradle-set-settings-file() {\n    # In order of precedence: --settings-file=filename, settings.gradle, settings.gradle.kts\n\n    local default_gradle_settings_file=\"$project_root_dir/settings.gradle\"\n    if [[ ! -f $default_gradle_settings_file ]]; then\n      default_gradle_settings_file=\"$project_root_dir/settings.gradle.kts\"\n    fi\n    gradle_settings_file=$default_gradle_settings_file\n}\n\n__gradle-set-build-file() {\n    __gradle-set-settings-file\n    # In order of precedence: --build-file=filename, rootProject.buildFileName, build.gradle, build.gradle.kts\n\n    local default_gradle_build_file_name=\"build.gradle\"\n    if [[ -f $gradle_settings_file ]]; then\n      local build_file_name=$(grep \"^rootProject\\.buildFileName\" $gradle_settings_file | \\\n          sed -n -e \"s/rootProject\\.buildFileName = [\\'\\\"]\\(.*\\)[\\'\\\"]/\\1/p\")\n      default_gradle_build_file_name=\"${build_file_name:-build.gradle}\"\n    fi\n\n    gradle_build_file=\"$project_root_dir/$default_gradle_build_file_name\"\n    if [[ ! -f $gradle_build_file ]]; then\n        gradle_build_file=\"$project_root_dir/build.gradle.kts\"\n    fi\n}\n\n__gradle-set-cache-name() {\n    # Cache name is constructed from the absolute path of the build file.\n    cache_name=\"${gradle_build_file//\\//_}\"\n}\n\n__gradle-set-files-checksum() {\n    # Cache MD5 sum of all Gradle scripts and modified timestamps\n    if builtin command -v md5 > /dev/null; then\n        gradle_files_checksum=$(md5 -q -s \"$(cat \"$cache_dir/$cache_name\" | xargs ls -o 2>/dev/null)\")\n    elif builtin command -v md5sum > /dev/null; then\n        gradle_files_checksum=$(cat \"$cache_dir/$cache_name\" | xargs ls -o 2>/dev/null | md5sum | awk '{print $1}')\n    else\n        echo \"Cannot generate completions as neither md5 nor md5sum exist on \\$PATH\"\n    fi\n}\n\n__gradle-generate-script-cache() {\n    # Invalidate cache after 3 weeks by default\n    local cache_ttl_mins=${GRADLE_CACHE_TTL_MINUTES:-30240}\n    local script_exclude_pattern=${GRADLE_COMPLETION_EXCLUDE_PATTERN:-\"/(.git|build|integTest|samples|templates|smokeTest|testFixtures|out)/\"}\n\n    if [[ ! $(find \"$cache_dir/$cache_name\" -mmin \"-${cache_ttl_mins}\" 2>/dev/null) ]]; then\n        # Cache all Gradle scripts\n        local gradle_build_scripts=$(find \"$project_root_dir\" -type f -name \"*.gradle\" -o -name \"*.gradle.kts\" 2>/dev/null | grep -E -v \"$script_exclude_pattern\")\n        printf \"%s\\n\" \"${gradle_build_scripts[@]}\" >| \"$cache_dir/$cache_name\"\n    fi\n}\n\n__gradle-long-options() {\n    local cur\n    _get_comp_words_by_ref -n : cur\n\n    local args=\"--build-cache           - Enables the Gradle build cache\n--build-file            - Specifies the build file\n--configuration-cache   - Enables the configuration cache. Gradle will try to reuse the build configuration from previous builds. [incubating]\n--configuration-cache-problems - Configures how the configuration cache handles problems (fail or warn). Defaults to fail. [incubating]\n--configure-on-demand   - Only relevant projects are configured\n--console               - Type of console output to generate (plain auto rich verbose)\n--continue              - Continues task execution after a task failure\n--continuous            - Continuous mode. Automatically re-run build after changes\n--daemon                - Use the Gradle Daemon\n--debug                 - Log at the debug level\n--dry-run               - Runs the build with all task actions disabled\n--exclude-task          - Specify a task to be excluded\n--full-stacktrace       - Print out the full (very verbose) stacktrace\n--gradle-user-home      - Specifies the Gradle user home directory\n--gui                   - Launches the Gradle GUI app (Deprecated)\n--help                  - Shows a help message\n--include-build         - Run the build as a composite, including the specified build\n--info                  - Set log level to INFO\n--init-script           - Specifies an initialization script\n--max-workers           - Set the maximum number of workers that Gradle may use\n--no-build-cache        - Do not use the Gradle build cache\n--no-configuration-cache  - Disables the configuration cache. [incubating]\n--no-configure-on-demand  - Disables configuration on demand\n--no-daemon             - Do not use the Gradle Daemon\n--no-parallel           - Disables parallel execution to build projects\n--no-rebuild            - Do not rebuild project dependencies\n--no-scan               - Do not create a build scan\n--no-search-upwards     - Do not search parent directories for a settings.gradle (removed)\n--no-watch-fs           - Do not watch the filesystem for changes\n--offline               - Build without accessing network resources\n--parallel              - Build projects in parallel\n--profile               - Profile build time and create report\n--priority              - Set priority for Gradle worker processes (low normal)\n--project-cache-dir     - Specifies the project-specific cache directory\n--project-dir           - Specifies the start directory for Gradle\n--project-prop          - Sets a project property of the root project\n--quiet                 - Log errors only\n--recompile-scripts     - Forces scripts to be recompiled, bypassing caching\n--refresh-dependencies  - Refresh the state of dependencies\n--rerun-tasks           - Specifies that any task optimization is ignored\n--scan                  - Create a build scan\n--settings-file         - Specifies the settings file\n--stacktrace            - Print out the stacktrace also for user exceptions\n--status                - Print Gradle Daemon status\n--stop                  - Stop all Gradle Daemons\n--system-prop           - Set a system property\n--update-locks          - Perform a partial update of the dependency lock\n--version               - Prints Gradle version info\n--warn                  - Log warnings and errors only\n--warning-mode          - Set types of warnings to log (all summary none)\n--watch-fs              - Gradle watches filesystem for incremental builds\n--write-locks           - Persists dependency resolution for locked configurations\"\n\n    COMPREPLY=( $(compgen -W \"$args\" -- \"$cur\") )\n}\n\n__gradle-properties() {\n    local cur\n    _get_comp_words_by_ref -n : cur\n\n    local args=\"-Dorg.gradle.cache.reserved.mb=   - Reserve Gradle Daemon memory for operations\n-Dorg.gradle.caching=             - Set true to enable Gradle build cache\n-Dorg.gradle.console=             - Set type of console output to generate (plain auto rich verbose)\n-Dorg.gradle.daemon.debug=        - Set true to debug Gradle Daemon\n-Dorg.gradle.daemon.idletimeout=  - Kill Gradle Daemon after # idle millis\n-Dorg.gradle.debug=               - Set true to debug Gradle Client\n-Dorg.gradle.jvmargs=             - Set JVM arguments\n-Dorg.gradle.java.home=           - Set JDK home dir\n-Dorg.gradle.logging.level=       - Set default Gradle log level (quiet warn lifecycle info debug)\n-Dorg.gradle.parallel=            - Set true to enable parallel project builds (incubating)\n-Dorg.gradle.priority=            - Set priority for Gradle worker processes (low normal)\n-Dorg.gradle.unsafe.watch-fs=     - Set true to enable Gradle file watcher\n-Dorg.gradle.warning.mode=        - Set types of warnings to log (all summary none)\n-Dorg.gradle.workers.max=         - Set the number of workers Gradle is allowed to use\"\n    COMPREPLY=( $(compgen -W \"$args\" -- \"$cur\") )\n    return 0\n}\n\n__gradle-short-options() {\n    local cur\n    _get_comp_words_by_ref -n : cur\n\n    local args=\"-?                      - Shows a help message\n-a                      - Do not rebuild project dependencies\n-b                      - Specifies the build file\n-c                      - Specifies the settings file\n-d                      - Log at the debug level\n-g                      - Specifies the Gradle user home directory\n-h                      - Shows a help message\n-i                      - Set log level to INFO\n-m                      - Runs the build with all task actions disabled\n-p                      - Specifies the start directory for Gradle\n-q                      - Log errors only\n-s                      - Print out the stacktrace also for user exceptions\n-t                      - Continuous mode. Automatically re-run build after changes\n-u                      - Do not search parent directories for a settings.gradle\n-v                      - Prints Gradle version info\n-w                      - Log warnings and errors only\n-x                      - Specify a task to be excluded\n-D                      - Set a system property\n-I                      - Specifies an initialization script\n-P                      - Sets a project property of the root project\n-S                      - Print out the full (very verbose) stacktrace\"\n    COMPREPLY=( $(compgen -W \"$args\" -- \"$cur\") )\n}\n\n__gradle-tasks() {\n    local cur\n    _get_comp_words_by_ref -n : cur\n\n    __gradle-init-cache-dir\n    __gradle-set-project-root-dir\n    __gradle-set-build-file\n    if [[ -f \"$gradle_build_file\" ]]; then\n        __gradle-set-cache-name\n        __gradle-generate-script-cache\n        __gradle-set-files-checksum\n\n        # The cache key is md5 sum of all gradle scripts, so it's valid if it exists.\n        if [[ -f \"$cache_dir/$cache_name.md5\" ]]; then\n            local cached_checksum=\"$(cat \"$cache_dir/$cache_name.md5\")\"\n            local -a cached_tasks\n            if [[ -z \"$cur\" ]]; then\n                cached_tasks=( $(grep -v \"^:\" \"$cache_dir/$cached_checksum\") )\n            else\n                cached_tasks=( $(grep \"^$cur\" \"$cache_dir/$cached_checksum\") )\n            fi\n            COMPREPLY=( $(compgen -W \"${cached_tasks[*]}\" -- \"$cur\") )\n        else\n            __gradle-notify-tasks-cache-build\n        fi\n\n        # Regenerate tasks cache in the background\n        if [[ \"$gradle_files_checksum\" != \"$(cat \"$cache_dir/$cache_name.md5\")\" || ! -f \"$cache_dir/$gradle_files_checksum\" || $(wc -c < $cache_dir/$gradle_files_checksum) -le 1 ]]; then\n            $(__gradle-generate-tasks-cache 1>&2 2>/dev/null &)\n        fi\n    else\n        # Default tasks available outside Gradle projects\n        local args=\"buildEnvironment     - Displays all buildscript dependencies declared in root project.\ncomponents           - Displays the components produced by root project.\ndependencies         - Displays all dependencies declared in root project.\ndependencyInsight    - Displays the insight into a specific dependency in root project.\ndependentComponents  - Displays the dependent components of components in root project.\nhelp                 - Displays a help message.\ninit                 - Initializes a new Gradle build.\nmodel                - Displays the configuration model of root project.\nprojects             - Displays the sub-projects of root project.\nproperties           - Displays the properties of root project.\ntasks                - Displays the tasks runnable from root project.\nwrapper              - Generates Gradle wrapper files.\"\n        COMPREPLY=( $(compgen -W \"$args\" -- \"$cur\") )\n    fi\n\n    # Prevent colons from messing up completion\n    [[ -n \"$(type -t __ltrim_colon_completions)\" ]] && __ltrim_colon_completions \"$cur\"\n}\n\n__gradle-options-arguments() {\n    local cur prev\n    _get_comp_words_by_ref -n : cur\n    _get_comp_words_by_ref -n : -p prev\n\n    case \"$prev\" in\n        -b|--build-file|-c|--settings-file|-I|--init-script)\n            COMPREPLY=( $(compgen -f -A file -o filenames -X '!*.gradle*' \"$cur\") )\n            return 0\n            ;;\n        -g|--gradle-user-home|--include-build|--project-cache-dir|--project-dir)\n            COMPREPLY=( $(compgen -d \"$cur\") )\n            return 0\n            ;;\n        *)\n            __gradle-tasks\n            return 0\n            ;;\n    esac\n}\n\n\n__gradle-notify-tasks-cache-build() {\n    # Notify user of cache rebuild\n    echo -e \" (Building completion cache. Please wait)\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\c\"\n    __gradle-generate-tasks-cache\n    # Remove \"please wait\" message by writing a bunch of spaces then moving back to the left\n    echo -e \"                                         \\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\c\"\n}\n\n__gradle-generate-tasks-cache() {\n    __gradle-set-files-checksum\n\n    # Use Gradle wrapper when it exists.\n    local gradle_cmd=\"gradle\"\n    if [[ -x \"$project_root_dir/gradlew\" ]]; then\n        gradle_cmd=\"$project_root_dir/gradlew\"\n    fi\n\n    # Run gradle to retrieve possible tasks and cache.\n    # Reuse Gradle Daemon if IDLE but don't start a new one.\n    local gradle_tasks_output\n    if [[ ! -z \"$(\"$gradle_cmd\" --status 2>/dev/null | grep IDLE)\" ]]; then\n        gradle_tasks_output=\"$(\"$gradle_cmd\" -b \"$gradle_build_file\" --daemon --no-scan --console=plain -q tasks --all)\"\n    else\n        gradle_tasks_output=\"$(\"$gradle_cmd\" -b \"$gradle_build_file\" --no-daemon --no-scan --console=plain -q tasks --all)\"\n    fi\n    local output_line\n    local task_description\n    local -a gradle_all_tasks=()\n    local -a root_tasks=()\n    local -a subproject_tasks=()\n    for output_line in ${gradle_tasks_output}; do\n        if [[ \"$output_line\" =~ ^([[:alpha:]][[:alnum:][:punct:]]*)([[:space:]]-[[:space:]]([[:print:]]*))? ]]; then\n            task_name=\"${BASH_REMATCH[1]}\"\n            task_description=\"${BASH_REMATCH[3]}\"\n            gradle_all_tasks+=( \"$task_name  - $task_description\" )\n            # Completion for subproject tasks with ':' prefix\n            if [[ \"$task_name\" =~ ^([[:alnum:][:punct:]]+):([[:alnum:]]+) ]]; then\n                gradle_all_tasks+=( \":$task_name  - $task_description\" )\n                subproject_tasks+=( \"${BASH_REMATCH[2]}\" )\n            else\n                root_tasks+=( \"$task_name\" )\n            fi\n        fi\n    done\n\n    # subproject tasks can be referenced implicitly from root project\n    if [[ \"$GRADLE_COMPLETION_UNQUALIFIED_TASKS\" == \"true\" ]]; then\n        local -a implicit_tasks=()\n        implicit_tasks=( $(comm -23 <(printf \"%s\\n\" \"${subproject_tasks[@]}\" | sort) <(printf \"%s\\n\" \"${root_tasks[@]}\" | sort)) )\n        for task in $(printf \"%s\\n\" \"${implicit_tasks[@]}\"); do\n            gradle_all_tasks+=( \"$task\" )\n        done\n    fi\n\n    printf \"%s\\n\" \"${gradle_all_tasks[@]}\" >| \"$cache_dir/$gradle_files_checksum\"\n    echo \"$gradle_files_checksum\" >| \"$cache_dir/$cache_name.md5\"\n}\n\n__gradle-completion-init() {\n    local cache_dir cache_name gradle_build_file gradle_files_checksum project_root_dir\n\n    local OLDIFS=\"$IFS\"\n    local IFS=$'\\n'\n\n    __gradle-init-cache-dir\n    __gradle-set-project-root-dir\n    __gradle-set-build-file\n    if [[ -f \"$gradle_build_file\" ]]; then\n        __gradle-set-cache-name\n        __gradle-generate-script-cache\n        __gradle-set-files-checksum\n        __gradle-notify-tasks-cache-build\n    fi\n\n    IFS=\"$OLDIFS\"\n\n    return 0\n}\n\n_gradle() {\n    local cache_dir cache_name gradle_build_file gradle_files_checksum project_root_dir\n    local cur prev\n    _get_comp_words_by_ref -n : cur\n    _get_comp_words_by_ref -n : -p prev\n\n    # Set bash internal field separator to '\\n'\n    # This allows us to provide descriptions for options and tasks\n    local OLDIFS=\"$IFS\"\n    local IFS=$'\\n'\n\n    if [[ ${cur} == --* ]]; then\n        __gradle-long-options\n    elif [[ ${cur} == -D* ]]; then\n        __gradle-properties\n    elif [[ ${cur} == -* ]]; then\n        __gradle-short-options\n    elif [[ ${prev} == -* ]]; then\n        __gradle-options-arguments\n    else\n        __gradle-tasks\n    fi\n\n    IFS=\"$OLDIFS\"\n\n    # Remove description (\"[:space:]\" and after) if only one possibility\n    if [[ ${#COMPREPLY[*]} -eq 1 ]]; then\n        COMPREPLY=( ${COMPREPLY[0]%%  *} )\n    fi\n\n    return 0\n}\ncomplete -F _gradle gradle\ncomplete -F _gradle gradle.bat\ncomplete -F _gradle gradlew\ncomplete -F _gradle gradlew.bat\ncomplete -F _gradle ./gradlew\ncomplete -F _gradle ./gradlew.bat\n\nif hash gw 2>/dev/null || alias gw >/dev/null 2>&1; then\n    complete -F _gradle gw\nfi\n"
        },
        {
          "name": "gradle-completion.plugin.zsh",
          "type": "blob",
          "size": 0.064453125,
          "content": "compdef _gradle gradle\ncompdef _gradle gradlew\ncompdef _gradle gw\n"
        }
      ]
    }
  ]
}