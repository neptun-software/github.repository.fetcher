{
  "metadata": {
    "timestamp": 1736568208622,
    "page": 56,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "agnoster/agnoster-zsh-theme",
      "stars": 4037,
      "defaultBranch": "master",
      "files": [
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.7607421875,
          "content": "# agnoster.zsh-theme\n\nA ZSH theme optimized for people who use:\n\n- Solarized\n- Git\n- Unicode-compatible fonts and terminals (I use iTerm2 + Menlo)\n\nFor Mac users, I highly recommend iTerm 2 + Solarized Dark\n\n# Compatibility\n\n**NOTE:** In all likelihood, you will need to install a [Powerline-patched font](https://github.com/Lokaltog/powerline-fonts) for this theme to render correctly.\n\nTo test if your terminal and font support it, check that all the necessary characters are supported by copying the following command to your terminal: `echo \"\\ue0b0 \\u00b1 \\ue0a0 \\u27a6 \\u2718 \\u26a1 \\u2699\"`. The result should look like this:\n\n![Character Example](https://gist.githubusercontent.com/agnoster/3712874/raw/characters.png)\n\n## What does it show?\n\n- If the previous command failed (✘)\n- User @ Hostname (if user is not DEFAULT_USER, which can then be set in your profile)\n- Git status\n  - Branch () or detached head (➦)\n  - Current branch / SHA1 in detached head state\n  - Dirty working directory (±, color change)\n- Working directory\n- Elevated (root) privileges (⚡)\n\n![Screenshot](https://gist.githubusercontent.com/agnoster/3712874/raw/screenshot.png)\n\n## Customize your prompt view\n\nBy default prompt has these segments: `prompt_status`, `prompt_context`, `prompt_virtualenv`, `prompt_dir`, `prompt_git`, `prompt_end` in that particular order.\n\nIf you want to add, change the order or remove some segments of the prompt, you can use array environment variable named `AGNOSTER_PROMPT_SEGMENTS`.\n\nExamples:\n- Show all segments of the prompt with indices:\n```\necho \"${(F)AGNOSTER_PROMPT_SEGMENTS[@]}\" | cat -n\n```\n- Add the new segment of the prompt to the beginning:\n```\nAGNOSTER_PROMPT_SEGMENTS=(\"prompt_git\" \"${AGNOSTER_PROMPT_SEGMENTS[@]}\")\n```\n- Add the new segment of the prompt to the end:\n```\nAGNOSTER_PROMPT_SEGMENTS+=\"prompt_end\"\n```\n- Insert the new segment of the prompt = `PROMPT_SEGMENT_NAME` on the particular position = `PROMPT_SEGMENT_POSITION`:\n```\nPROMPT_SEGMENT_POSITION=5 PROMPT_SEGMENT_NAME=\"prompt_end\";\\\nAGNOSTER_PROMPT_SEGMENTS=(\"${AGNOSTER_PROMPT_SEGMENTS[@]:0:$PROMPT_SEGMENT_POSITION-1}\" \"$PROMPT_SEGMENT_NAME\" \"${AGNOSTER_PROMPT_SEGMENTS[@]:$PROMPT_SEGMENT_POSITION-1}\");\\\nunset PROMPT_SEGMENT_POSITION PROMPT_SEGMENT_NAME\n```\n- Swap segments 4th and 5th:\n```\nSWAP_SEGMENTS=(4 5);\\\nTMP_VAR=\"$AGNOSTER_PROMPT_SEGMENTS[$SWAP_SEGMENTS[1]]\"; AGNOSTER_PROMPT_SEGMENTS[$SWAP_SEGMENTS[1]]=\"$AGNOSTER_PROMPT_SEGMENTS[$SWAP_SEGMENTS[2]]\"; AGNOSTER_PROMPT_SEGMENTS[$SWAP_SEGMENTS[2]]=\"$TMP_VAR\"\nunset SWAP_SEGMENTS TMP_VAR\n```\n- Remove the 5th segment:\n```\nAGNOSTER_PROMPT_SEGMENTS[5]=\n```\n\nA small demo of the dummy custom prompt segment, which has been created with help of the built-in `prompt_segment()` function from Agnoster theme:\n```\n# prompt_segment() - Takes two arguments, background and foreground.\n# Both can be omitted, rendering default background/foreground.\n\ncustomize_agnoster() {\n  prompt_segment 'red' '' ' ⚙ ⚡⚡⚡ ⚙  '\n}\n```\n![Customization demo](https://github.com/apodkutin/agnoster-zsh-theme/raw/customize-prompt/agnoster_customization.gif)\n\n## Future Work\n\nI don't want to clutter it up too much, but I am toying with the idea of adding RVM (ruby version) and n (node.js version) display.\n\nIt's currently hideously slow, especially inside a git repo. I guess it's not overly so for comparable themes, but it bugs me, and I'd love to hear ideas about how to improve the performance.\n\nWould be nice for the code to be a bit more sane and re-usable. Something to easily append a section with a given FG/BG, and add the correct opening and closing.\n\nAlso the dependency on a powerline-patched font is regrettable, but there's really no way to get that effect without it. Ideally there would be a way to check for compatibility, or maybe even fall back to one of the similar unicode glyphs.\n"
        },
        {
          "name": "agnoster.zsh-theme",
          "type": "blob",
          "size": 4.173828125,
          "content": "# vim:ft=zsh ts=2 sw=2 sts=2\n#\n# agnoster's Theme - https://gist.github.com/3712874\n# A Powerline-inspired theme for ZSH\n#\n# # README\n#\n# In order for this theme to render correctly, you will need a\n# [Powerline-patched font](https://gist.github.com/1595572).\n#\n# In addition, I recommend the\n# [Solarized theme](https://github.com/altercation/solarized/) and, if you're\n# using it on Mac OS X, [iTerm 2](http://www.iterm2.com/) over Terminal.app -\n# it has significantly better color fidelity.\n#\n# # Goals\n#\n# The aim of this theme is to only show you *relevant* information. Like most\n# prompts, it will only show git information when in a git working directory.\n# However, it goes a step further: everything from the current user and\n# hostname to whether the last call exited with an error to whether background\n# jobs are running in this shell will all be displayed automatically when\n# appropriate.\n\n### Segments of the prompt, default order declaration\n\ntypeset -aHg AGNOSTER_PROMPT_SEGMENTS=(\n    prompt_status\n    prompt_context\n    prompt_virtualenv\n    prompt_dir\n    prompt_git\n    prompt_end\n)\n\n### Segment drawing\n# A few utility functions to make it easy and re-usable to draw segmented prompts\n\nCURRENT_BG='NONE'\nif [[ -z \"$PRIMARY_FG\" ]]; then\n\tPRIMARY_FG=black\nfi\n\n# Characters\nSEGMENT_SEPARATOR=\"\\ue0b0\"\nPLUSMINUS=\"\\u00b1\"\nBRANCH=\"\\ue0a0\"\nDETACHED=\"\\u27a6\"\nCROSS=\"\\u2718\"\nLIGHTNING=\"\\u26a1\"\nGEAR=\"\\u2699\"\n\n# Begin a segment\n# Takes two arguments, background and foreground. Both can be omitted,\n# rendering default background/foreground.\nprompt_segment() {\n  local bg fg\n  [[ -n $1 ]] && bg=\"%K{$1}\" || bg=\"%k\"\n  [[ -n $2 ]] && fg=\"%F{$2}\" || fg=\"%f\"\n  if [[ $CURRENT_BG != 'NONE' && $1 != $CURRENT_BG ]]; then\n    print -n \"%{$bg%F{$CURRENT_BG}%}$SEGMENT_SEPARATOR%{$fg%}\"\n  else\n    print -n \"%{$bg%}%{$fg%}\"\n  fi\n  CURRENT_BG=$1\n  [[ -n $3 ]] && print -n $3\n}\n\n# End the prompt, closing any open segments\nprompt_end() {\n  if [[ -n $CURRENT_BG ]]; then\n    print -n \"%{%k%F{$CURRENT_BG}%}$SEGMENT_SEPARATOR\"\n  else\n    print -n \"%{%k%}\"\n  fi\n  print -n \"%{%f%}\"\n  CURRENT_BG=''\n}\n\n### Prompt components\n# Each component will draw itself, and hide itself if no information needs to be shown\n\n# Context: user@hostname (who am I and where am I)\nprompt_context() {\n  local user=`whoami`\n\n  if [[ \"$user\" != \"$DEFAULT_USER\" || -n \"$SSH_CONNECTION\" ]]; then\n    prompt_segment $PRIMARY_FG default \" %(!.%{%F{yellow}%}.)$user@%m \"\n  fi\n}\n\n# Git: branch/detached head, dirty status\nprompt_git() {\n  local color ref\n  is_dirty() {\n    test -n \"$(git status --porcelain --ignore-submodules)\"\n  }\n  ref=\"$vcs_info_msg_0_\"\n  if [[ -n \"$ref\" ]]; then\n    if is_dirty; then\n      color=yellow\n      ref=\"${ref} $PLUSMINUS\"\n    else\n      color=green\n      ref=\"${ref} \"\n    fi\n    if [[ \"${ref/.../}\" == \"$ref\" ]]; then\n      ref=\"$BRANCH $ref\"\n    else\n      ref=\"$DETACHED ${ref/.../}\"\n    fi\n    prompt_segment $color $PRIMARY_FG\n    print -n \" $ref\"\n  fi\n}\n\n# Dir: current working directory\nprompt_dir() {\n  prompt_segment blue $PRIMARY_FG ' %~ '\n}\n\n# Status:\n# - was there an error\n# - am I root\n# - are there background jobs?\nprompt_status() {\n  local symbols\n  symbols=()\n  [[ $RETVAL -ne 0 ]] && symbols+=\"%{%F{red}%}$CROSS\"\n  [[ $UID -eq 0 ]] && symbols+=\"%{%F{yellow}%}$LIGHTNING\"\n  [[ $(jobs -l | wc -l) -gt 0 ]] && symbols+=\"%{%F{cyan}%}$GEAR\"\n\n  [[ -n \"$symbols\" ]] && prompt_segment $PRIMARY_FG default \" $symbols \"\n}\n\n# Display current virtual environment\nprompt_virtualenv() {\n  if [[ -n $VIRTUAL_ENV ]]; then\n    color=cyan\n    prompt_segment $color $PRIMARY_FG\n    print -Pn \" $(basename $VIRTUAL_ENV) \"\n  fi\n}\n\n## Main prompt\nprompt_agnoster_main() {\n  RETVAL=$?\n  CURRENT_BG='NONE'\n  for prompt_segment in \"${AGNOSTER_PROMPT_SEGMENTS[@]}\"; do\n    [[ -n $prompt_segment ]] && $prompt_segment\n  done\n}\n\nprompt_agnoster_precmd() {\n  vcs_info\n  PROMPT='%{%f%b%k%}$(prompt_agnoster_main) '\n}\n\nprompt_agnoster_setup() {\n  autoload -Uz add-zsh-hook\n  autoload -Uz vcs_info\n\n  prompt_opts=(cr subst percent)\n\n  add-zsh-hook precmd prompt_agnoster_precmd\n\n  zstyle ':vcs_info:*' enable git\n  zstyle ':vcs_info:*' check-for-changes false\n  zstyle ':vcs_info:git*' formats '%b'\n  zstyle ':vcs_info:git*' actionformats '%b (%a)'\n}\n\nprompt_agnoster_setup \"$@\"\n"
        },
        {
          "name": "agnoster_customization.gif",
          "type": "blob",
          "size": 1717.7509765625,
          "content": null
        },
        {
          "name": "characters.png",
          "type": "blob",
          "size": 14.9267578125,
          "content": null
        },
        {
          "name": "screenshot.png",
          "type": "blob",
          "size": 80.22265625,
          "content": null
        }
      ]
    }
  ]
}