{
  "metadata": {
    "timestamp": 1736568369176,
    "page": 302,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Homebrew/install",
      "stars": 2230,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0166015625,
          "content": "*.sh text eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".rubocop.yml",
          "type": "blob",
          "size": 5.1845703125,
          "content": "# This file is synced from `Homebrew/brew` by the `.github` repository, do not modify it directly.\n---\nAllCops:\n  TargetRubyVersion: 3.3\n  NewCops: enable\n  Include:\n  - \"**/*.rbi\"\n  Exclude:\n  - Homebrew/sorbet/rbi/{dsl,gems}/**/*.rbi\n  - Homebrew/bin/*\n  - Homebrew/vendor/**/*\n  - Taps/*/*/vendor/**/*\n  - \"**/vendor/**/*\"\n  SuggestExtensions:\n    rubocop-minitest: false\nLayout/ArgumentAlignment:\n  Exclude:\n  - Taps/*/*/*.rb\n  - \"/**/Formula/**/*.rb\"\n  - \"**/Formula/**/*.rb\"\nLayout/CaseIndentation:\n  EnforcedStyle: end\nLayout/FirstArrayElementIndentation:\n  EnforcedStyle: consistent\nLayout/FirstHashElementIndentation:\n  EnforcedStyle: consistent\nLayout/EndAlignment:\n  EnforcedStyleAlignWith: start_of_line\nLayout/HashAlignment:\n  EnforcedHashRocketStyle: table\n  EnforcedColonStyle: table\nLayout/LeadingCommentSpace:\n  Exclude:\n  - Taps/*/*/cmd/*.rb\nLayout/LineLength:\n  Max: 118\n  AllowedPatterns:\n  - \"#: \"\n  - ' url \"'\n  - ' mirror \"'\n  - \" plist_options \"\n  - ' executable: \"'\n  - ' font \"'\n  - ' homepage \"'\n  - ' name \"'\n  - ' pkg \"'\n  - ' pkgutil: \"'\n  - \"    sha256 cellar: \"\n  - \"    sha256  \"\n  - \"#{language}\"\n  - \"#{version.\"\n  - ' \"/Library/Application Support/'\n  - \"\\\"/Library/Caches/\"\n  - \"\\\"/Library/PreferencePanes/\"\n  - ' \"~/Library/Application Support/'\n  - \"\\\"~/Library/Caches/\"\n  - \"\\\"~/Library/Containers\"\n  - \"\\\"~/Application Support\"\n  - \" was verified as official when first introduced to the cask\"\nLayout/SpaceAroundOperators:\n  Enabled: false\nLayout/SpaceBeforeBrackets:\n  Exclude:\n  - \"**/*_spec.rb\"\n  - Taps/*/*/*.rb\n  - \"/**/{Formula,Casks}/**/*.rb\"\n  - \"**/{Formula,Casks}/**/*.rb\"\nLint/AmbiguousBlockAssociation:\n  Enabled: false\nLint/DuplicateBranch:\n  Exclude:\n  - Taps/*/*/*.rb\n  - \"/**/{Formula,Casks}/**/*.rb\"\n  - \"**/{Formula,Casks}/**/*.rb\"\nLint/ParenthesesAsGroupedExpression:\n  Exclude:\n  - Taps/*/*/*.rb\n  - \"/**/Formula/**/*.rb\"\n  - \"**/Formula/**/*.rb\"\nLint/UnusedMethodArgument:\n  AllowUnusedKeywordArguments: true\nMetrics:\n  Enabled: false\nNaming/BlockForwarding:\n  Enabled: false\nNaming/FileName:\n  Regex: !ruby/regexp /^[\\w\\@\\-\\+\\.]+(\\.rb)?$/\nNaming/HeredocDelimiterNaming:\n  ForbiddenDelimiters:\n  - END, EOD, EOF\nNaming/InclusiveLanguage:\n  CheckStrings: true\n  FlaggedTerms:\n    slave:\n      AllowedRegex:\n      - gitslave\n      - log_slave\n      - ssdb_slave\n      - var_slave\n      - patches/13_fix_scope_for_show_slave_status_data.patch\nNaming/MethodName:\n  AllowedPatterns:\n  - \"\\\\A(fetch_)?HEAD\\\\?\\\\Z\"\nNaming/MethodParameterName:\n  inherit_mode:\n    merge:\n    - AllowedNames\nNaming/VariableNumber:\n  Enabled: false\nStyle/AndOr:\n  EnforcedStyle: always\nStyle/ArgumentsForwarding:\n  Enabled: false\nStyle/AutoResourceCleanup:\n  Enabled: true\nStyle/BarePercentLiterals:\n  EnforcedStyle: percent_q\nStyle/BlockDelimiters:\n  BracesRequiredMethods:\n  - sig\nStyle/ClassAndModuleChildren:\n  Exclude:\n  - \"**/*.rbi\"\nStyle/CollectionMethods:\n  Enabled: true\nStyle/DisableCopsWithinSourceCodeDirective:\n  Enabled: true\n  Include:\n  - Taps/*/*/*.rb\n  - \"/**/{Formula,Casks}/**/*.rb\"\n  - \"**/{Formula,Casks}/**/*.rb\"\nStyle/Documentation:\n  Exclude:\n  - Taps/**/*\n  - \"/**/{Formula,Casks}/**/*.rb\"\n  - \"**/{Formula,Casks}/**/*.rb\"\n  - \"**/*.rbi\"\nStyle/EmptyMethod:\n  Exclude:\n  - \"**/*.rbi\"\nStyle/FetchEnvVar:\n  Exclude:\n  - Taps/*/*/*.rb\n  - \"/**/Formula/**/*.rb\"\n  - \"**/Formula/**/*.rb\"\nStyle/FrozenStringLiteralComment:\n  EnforcedStyle: always\n  Exclude:\n  - Taps/*/*/*.rb\n  - \"/**/{Formula,Casks}/**/*.rb\"\n  - \"**/{Formula,Casks}/**/*.rb\"\n  - Homebrew/test/**/Casks/**/*.rb\n  - \"**/*.rbi\"\n  - \"**/Brewfile\"\nStyle/GuardClause:\n  Exclude:\n  - Taps/*/*/*.rb\n  - \"/**/{Formula,Casks}/**/*.rb\"\n  - \"**/{Formula,Casks}/**/*.rb\"\nStyle/HashAsLastArrayItem:\n  Exclude:\n  - Taps/*/*/*.rb\n  - \"/**/Formula/**/*.rb\"\n  - \"**/Formula/**/*.rb\"\nStyle/InverseMethods:\n  InverseMethods:\n    :blank?: :present?\nStyle/InvertibleUnlessCondition:\n  Enabled: true\n  InverseMethods:\n    :==: :!=\n    :zero?:\n    :blank?: :present?\nStyle/MutableConstant:\n  EnforcedStyle: strict\nStyle/NumericLiteralPrefix:\n  EnforcedOctalStyle: zero_only\nStyle/NumericLiterals:\n  MinDigits: 7\n  Strict: true\n  Exclude:\n  - \"**/Brewfile\"\nStyle/OpenStructUse:\n  Exclude:\n  - Taps/**/*\nStyle/OptionalBooleanParameter:\n  AllowedMethods:\n  - respond_to?\n  - respond_to_missing?\nStyle/RedundantLineContinuation:\n  Enabled: false\nStyle/RescueStandardError:\n  EnforcedStyle: implicit\nStyle/ReturnNil:\n  Enabled: true\nStyle/StderrPuts:\n  Enabled: false\nStyle/StringConcatenation:\n  Exclude:\n  - Taps/*/*/*.rb\n  - \"/**/{Formula,Casks}/**/*.rb\"\n  - \"**/{Formula,Casks}/**/*.rb\"\nStyle/StringLiterals:\n  EnforcedStyle: double_quotes\nStyle/StringLiteralsInInterpolation:\n  EnforcedStyle: double_quotes\nStyle/StringMethods:\n  Enabled: true\nStyle/SuperWithArgsParentheses:\n  Enabled: false\nStyle/SymbolArray:\n  EnforcedStyle: brackets\nStyle/TernaryParentheses:\n  EnforcedStyle: require_parentheses_when_complex\nStyle/TopLevelMethodDefinition:\n  Enabled: true\n  Exclude:\n  - Taps/**/*\nStyle/TrailingCommaInArguments:\n  EnforcedStyleForMultiline: comma\nStyle/TrailingCommaInArrayLiteral:\n  EnforcedStyleForMultiline: comma\nStyle/TrailingCommaInHashLiteral:\n  EnforcedStyleForMultiline: comma\nStyle/UnlessLogicalOperators:\n  Enabled: true\n  EnforcedStyle: forbid_logical_operators\nStyle/WordArray:\n  MinSize: 4\n\n"
        },
        {
          "name": ".ruby-version",
          "type": "blob",
          "size": 0.005859375,
          "content": "3.3.6\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.302734375,
          "content": "BSD 2-Clause License\n\nCopyright (c) 2009-present, Homebrew contributors\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.2431640625,
          "content": "# Homebrew (un)installer\n\n## Install Homebrew (on macOS or Linux)\n\n```bash\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\nMore installation information and options: <https://docs.brew.sh/Installation>.\n\nIf you're on macOS, try out our new `.pkg` installer. Download it from [Homebrew's latest GitHub release](https://github.com/Homebrew/brew/releases/latest).\n\nIf you are running Linux or WSL, [there are some pre-requisite packages to install](https://docs.brew.sh/Homebrew-on-Linux#requirements).\n\nYou can set `HOMEBREW_NO_INSTALL_FROM_API` to tap Homebrew/homebrew-core; by default, it will not be tapped as it is no longer necessary.\n\nYou can set `HOMEBREW_BREW_GIT_REMOTE` and/or `HOMEBREW_CORE_GIT_REMOTE` in your shell environment to use geolocalized Git mirrors to speed up Homebrew's installation with this script and, after installation, `brew update`.\n\n```bash\nexport HOMEBREW_BREW_GIT_REMOTE=\"...\"  # put your Git mirror of Homebrew/brew here\nexport HOMEBREW_CORE_GIT_REMOTE=\"...\"  # put your Git mirror of Homebrew/homebrew-core here\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\nThe default Git remote will be used if the corresponding environment variable is unset.\n\nIf you want to run the Homebrew installer non-interactively without prompting for passwords (e.g. in automation scripts), you can use:\n\n```bash\nNONINTERACTIVE=1 /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\n## Uninstall Homebrew\n\n```bash\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/uninstall.sh)\"\n```\n\nIf you want to run the Homebrew uninstaller non-interactively, you can use:\n\n```bash\nNONINTERACTIVE=1 /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/uninstall.sh)\"\n```\n\nIf you want to to uninstall Homebrew from a specific prefix (e.g. when migrating from Intel to Apple Silicon processors), download the uninstall script and run it with `--path`:\n\n```\ncurl -fsSLO https://raw.githubusercontent.com/Homebrew/install/HEAD/uninstall.sh\n/bin/bash uninstall.sh --path /usr/local\n```\n\nRun the downloaded script with `/bin/bash uninstall.sh --help` to view more uninstall options.\n"
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 30.681640625,
          "content": "#!/bin/bash\n\n# We don't need return codes for \"$(command)\", only stdout is needed.\n# Allow `[[ -n \"$(command)\" ]]`, `func \"$(command)\"`, pipes, etc.\n# shellcheck disable=SC2312\n\nset -u\n\nabort() {\n  printf \"%s\\n\" \"$@\" >&2\n  exit 1\n}\n\n# Fail fast with a concise message when not using bash\n# Single brackets are needed here for POSIX compatibility\n# shellcheck disable=SC2292\nif [ -z \"${BASH_VERSION:-}\" ]\nthen\n  abort \"Bash is required to interpret this script.\"\nfi\n\n# Check if script is run with force-interactive mode in CI\nif [[ -n \"${CI-}\" && -n \"${INTERACTIVE-}\" ]]\nthen\n  abort \"Cannot run force-interactive mode in CI.\"\nfi\n\n# Check if both `INTERACTIVE` and `NONINTERACTIVE` are set\n# Always use single-quoted strings with `exp` expressions\n# shellcheck disable=SC2016\nif [[ -n \"${INTERACTIVE-}\" && -n \"${NONINTERACTIVE-}\" ]]\nthen\n  abort 'Both `$INTERACTIVE` and `$NONINTERACTIVE` are set. Please unset at least one variable and try again.'\nfi\n\n# Check if script is run in POSIX mode\nif [[ -n \"${POSIXLY_CORRECT+1}\" ]]\nthen\n  abort 'Bash must not run in POSIX mode. Please unset POSIXLY_CORRECT and try again.'\nfi\n\n# string formatters\nif [[ -t 1 ]]\nthen\n  tty_escape() { printf \"\\033[%sm\" \"$1\"; }\nelse\n  tty_escape() { :; }\nfi\ntty_mkbold() { tty_escape \"1;$1\"; }\ntty_underline=\"$(tty_escape \"4;39\")\"\ntty_blue=\"$(tty_mkbold 34)\"\ntty_red=\"$(tty_mkbold 31)\"\ntty_bold=\"$(tty_mkbold 39)\"\ntty_reset=\"$(tty_escape 0)\"\n\nshell_join() {\n  local arg\n  printf \"%s\" \"$1\"\n  shift\n  for arg in \"$@\"\n  do\n    printf \" \"\n    printf \"%s\" \"${arg// /\\ }\"\n  done\n}\n\nchomp() {\n  printf \"%s\" \"${1/\"$'\\n'\"/}\"\n}\n\nohai() {\n  printf \"${tty_blue}==>${tty_bold} %s${tty_reset}\\n\" \"$(shell_join \"$@\")\"\n}\n\nwarn() {\n  printf \"${tty_red}Warning${tty_reset}: %s\\n\" \"$(chomp \"$1\")\" >&2\n}\n\nusage() {\n  cat <<EOS\nHomebrew Installer\nUsage: [NONINTERACTIVE=1] [CI=1] install.sh [options]\n    -h, --help       Display this message.\n    NONINTERACTIVE   Install without prompting for user input\n    CI               Install in CI mode (e.g. do not prompt for user input)\nEOS\n  exit \"${1:-0}\"\n}\n\nwhile [[ $# -gt 0 ]]\ndo\n  case \"$1\" in\n    -h | --help) usage ;;\n    *)\n      warn \"Unrecognized option: '$1'\"\n      usage 1\n      ;;\n  esac\ndone\n\n# Check if script is run non-interactively (e.g. CI)\n# If it is run non-interactively we should not prompt for passwords.\n# Always use single-quoted strings with `exp` expressions\n# shellcheck disable=SC2016\nif [[ -z \"${NONINTERACTIVE-}\" ]]\nthen\n  if [[ -n \"${CI-}\" ]]\n  then\n    warn 'Running in non-interactive mode because `$CI` is set.'\n    NONINTERACTIVE=1\n  elif [[ ! -t 0 ]]\n  then\n    if [[ -z \"${INTERACTIVE-}\" ]]\n    then\n      warn 'Running in non-interactive mode because `stdin` is not a TTY.'\n      NONINTERACTIVE=1\n    else\n      warn 'Running in interactive mode despite `stdin` not being a TTY because `$INTERACTIVE` is set.'\n    fi\n  fi\nelse\n  ohai 'Running in non-interactive mode because `$NONINTERACTIVE` is set.'\nfi\n\n# USER isn't always set so provide a fall back for the installer and subprocesses.\nif [[ -z \"${USER-}\" ]]\nthen\n  USER=\"$(chomp \"$(id -un)\")\"\n  export USER\nfi\n\n# First check OS.\nOS=\"$(uname)\"\nif [[ \"${OS}\" == \"Linux\" ]]\nthen\n  HOMEBREW_ON_LINUX=1\nelif [[ \"${OS}\" == \"Darwin\" ]]\nthen\n  HOMEBREW_ON_MACOS=1\nelse\n  abort \"Homebrew is only supported on macOS and Linux.\"\nfi\n\n# Required installation paths. To install elsewhere (which is unsupported)\n# you can untar https://github.com/Homebrew/brew/tarball/master\n# anywhere you like.\nif [[ -n \"${HOMEBREW_ON_MACOS-}\" ]]\nthen\n  UNAME_MACHINE=\"$(/usr/bin/uname -m)\"\n\n  if [[ \"${UNAME_MACHINE}\" == \"arm64\" ]]\n  then\n    # On ARM macOS, this script installs to /opt/homebrew only\n    HOMEBREW_PREFIX=\"/opt/homebrew\"\n    HOMEBREW_REPOSITORY=\"${HOMEBREW_PREFIX}\"\n  else\n    # On Intel macOS, this script installs to /usr/local only\n    HOMEBREW_PREFIX=\"/usr/local\"\n    HOMEBREW_REPOSITORY=\"${HOMEBREW_PREFIX}/Homebrew\"\n  fi\n  HOMEBREW_CACHE=\"${HOME}/Library/Caches/Homebrew\"\n\n  STAT_PRINTF=(\"/usr/bin/stat\" \"-f\")\n  PERMISSION_FORMAT=\"%A\"\n  CHOWN=(\"/usr/sbin/chown\")\n  CHGRP=(\"/usr/bin/chgrp\")\n  GROUP=\"admin\"\n  TOUCH=(\"/usr/bin/touch\")\n  INSTALL=(\"/usr/bin/install\" -d -o \"root\" -g \"wheel\" -m \"0755\")\nelse\n  UNAME_MACHINE=\"$(uname -m)\"\n\n  # On Linux, this script installs to /home/linuxbrew/.linuxbrew only\n  HOMEBREW_PREFIX=\"/home/linuxbrew/.linuxbrew\"\n  HOMEBREW_REPOSITORY=\"${HOMEBREW_PREFIX}/Homebrew\"\n  HOMEBREW_CACHE=\"${HOME}/.cache/Homebrew\"\n\n  STAT_PRINTF=(\"/usr/bin/stat\" \"--printf\")\n  PERMISSION_FORMAT=\"%a\"\n  CHOWN=(\"/bin/chown\")\n  CHGRP=(\"/bin/chgrp\")\n  GROUP=\"$(id -gn)\"\n  TOUCH=(\"/bin/touch\")\n  INSTALL=(\"/usr/bin/install\" -d -o \"${USER}\" -g \"${GROUP}\" -m \"0755\")\nfi\nCHMOD=(\"/bin/chmod\")\nMKDIR=(\"/bin/mkdir\" \"-p\")\nHOMEBREW_BREW_DEFAULT_GIT_REMOTE=\"https://github.com/Homebrew/brew\"\nHOMEBREW_CORE_DEFAULT_GIT_REMOTE=\"https://github.com/Homebrew/homebrew-core\"\n\n# Use remote URLs of Homebrew repositories from environment if set.\nHOMEBREW_BREW_GIT_REMOTE=\"${HOMEBREW_BREW_GIT_REMOTE:-\"${HOMEBREW_BREW_DEFAULT_GIT_REMOTE}\"}\"\nHOMEBREW_CORE_GIT_REMOTE=\"${HOMEBREW_CORE_GIT_REMOTE:-\"${HOMEBREW_CORE_DEFAULT_GIT_REMOTE}\"}\"\n# The URLs with and without the '.git' suffix are the same Git remote. Do not prompt.\nif [[ \"${HOMEBREW_BREW_GIT_REMOTE}\" == \"${HOMEBREW_BREW_DEFAULT_GIT_REMOTE}.git\" ]]\nthen\n  HOMEBREW_BREW_GIT_REMOTE=\"${HOMEBREW_BREW_DEFAULT_GIT_REMOTE}\"\nfi\nif [[ \"${HOMEBREW_CORE_GIT_REMOTE}\" == \"${HOMEBREW_CORE_DEFAULT_GIT_REMOTE}.git\" ]]\nthen\n  HOMEBREW_CORE_GIT_REMOTE=\"${HOMEBREW_CORE_DEFAULT_GIT_REMOTE}\"\nfi\nexport HOMEBREW_{BREW,CORE}_GIT_REMOTE\n\n# TODO: bump version when new macOS is released or announced\nMACOS_NEWEST_UNSUPPORTED=\"16.0\"\n# TODO: bump version when new macOS is released\nMACOS_OLDEST_SUPPORTED=\"13.0\"\n\n# For Homebrew on Linux\nREQUIRED_RUBY_VERSION=2.6    # https://github.com/Homebrew/brew/pull/6556\nREQUIRED_GLIBC_VERSION=2.13  # https://docs.brew.sh/Homebrew-on-Linux#requirements\nREQUIRED_CURL_VERSION=7.41.0 # HOMEBREW_MINIMUM_CURL_VERSION in brew.sh in Homebrew/brew\nREQUIRED_GIT_VERSION=2.7.0   # HOMEBREW_MINIMUM_GIT_VERSION in brew.sh in Homebrew/brew\n\n# no analytics during installation\nexport HOMEBREW_NO_ANALYTICS_THIS_RUN=1\nexport HOMEBREW_NO_ANALYTICS_MESSAGE_OUTPUT=1\n\nunset HAVE_SUDO_ACCESS # unset this from the environment\n\nhave_sudo_access() {\n  if [[ ! -x \"/usr/bin/sudo\" ]]\n  then\n    return 1\n  fi\n\n  local -a SUDO=(\"/usr/bin/sudo\")\n  if [[ -n \"${SUDO_ASKPASS-}\" ]]\n  then\n    SUDO+=(\"-A\")\n  elif [[ -n \"${NONINTERACTIVE-}\" ]]\n  then\n    SUDO+=(\"-n\")\n  fi\n\n  if [[ -z \"${HAVE_SUDO_ACCESS-}\" ]]\n  then\n    if [[ -n \"${NONINTERACTIVE-}\" ]]\n    then\n      \"${SUDO[@]}\" -l mkdir &>/dev/null\n    else\n      \"${SUDO[@]}\" -v && \"${SUDO[@]}\" -l mkdir &>/dev/null\n    fi\n    HAVE_SUDO_ACCESS=\"$?\"\n  fi\n\n  if [[ -n \"${HOMEBREW_ON_MACOS-}\" ]] && [[ \"${HAVE_SUDO_ACCESS}\" -ne 0 ]]\n  then\n    abort \"Need sudo access on macOS (e.g. the user ${USER} needs to be an Administrator)!\"\n  fi\n\n  return \"${HAVE_SUDO_ACCESS}\"\n}\n\nexecute() {\n  if ! \"$@\"\n  then\n    abort \"$(printf \"Failed during: %s\" \"$(shell_join \"$@\")\")\"\n  fi\n}\n\nexecute_sudo() {\n  local -a args=(\"$@\")\n  if [[ \"${EUID:-${UID}}\" != \"0\" ]] && have_sudo_access\n  then\n    if [[ -n \"${SUDO_ASKPASS-}\" ]]\n    then\n      args=(\"-A\" \"${args[@]}\")\n    fi\n    ohai \"/usr/bin/sudo\" \"${args[@]}\"\n    execute \"/usr/bin/sudo\" \"${args[@]}\"\n  else\n    ohai \"${args[@]}\"\n    execute \"${args[@]}\"\n  fi\n}\n\ngetc() {\n  local save_state\n  save_state=\"$(/bin/stty -g)\"\n  /bin/stty raw -echo\n  IFS='' read -r -n 1 -d '' \"$@\"\n  /bin/stty \"${save_state}\"\n}\n\nring_bell() {\n  # Use the shell's audible bell.\n  if [[ -t 1 ]]\n  then\n    printf \"\\a\"\n  fi\n}\n\nwait_for_user() {\n  local c\n  echo\n  echo \"Press ${tty_bold}RETURN${tty_reset}/${tty_bold}ENTER${tty_reset} to continue or any other key to abort:\"\n  getc c\n  # we test for \\r and \\n because some stuff does \\r instead\n  if ! [[ \"${c}\" == $'\\r' || \"${c}\" == $'\\n' ]]\n  then\n    exit 1\n  fi\n}\n\nmajor_minor() {\n  echo \"${1%%.*}.$(\n    x=\"${1#*.}\"\n    echo \"${x%%.*}\"\n  )\"\n}\n\nversion_gt() {\n  [[ \"${1%.*}\" -gt \"${2%.*}\" ]] || [[ \"${1%.*}\" -eq \"${2%.*}\" && \"${1#*.}\" -gt \"${2#*.}\" ]]\n}\nversion_ge() {\n  [[ \"${1%.*}\" -gt \"${2%.*}\" ]] || [[ \"${1%.*}\" -eq \"${2%.*}\" && \"${1#*.}\" -ge \"${2#*.}\" ]]\n}\nversion_lt() {\n  [[ \"${1%.*}\" -lt \"${2%.*}\" ]] || [[ \"${1%.*}\" -eq \"${2%.*}\" && \"${1#*.}\" -lt \"${2#*.}\" ]]\n}\n\ncheck_run_command_as_root() {\n  [[ \"${EUID:-${UID}}\" == \"0\" ]] || return\n\n  # Allow Azure Pipelines/GitHub Actions/Docker/Concourse/Kubernetes to do everything as root (as it's normal there)\n  [[ -f /.dockerenv ]] && return\n  [[ -f /run/.containerenv ]] && return\n  [[ -f /proc/1/cgroup ]] && grep -E \"azpl_job|actions_job|docker|garden|kubepods\" -q /proc/1/cgroup && return\n\n  abort \"Don't run this as root!\"\n}\n\nshould_install_command_line_tools() {\n  if [[ -n \"${HOMEBREW_ON_LINUX-}\" ]]\n  then\n    return 1\n  fi\n\n  if version_gt \"${macos_version}\" \"10.13\"\n  then\n    ! [[ -e \"/Library/Developer/CommandLineTools/usr/bin/git\" ]]\n  else\n    ! [[ -e \"/Library/Developer/CommandLineTools/usr/bin/git\" ]] ||\n      ! [[ -e \"/usr/include/iconv.h\" ]]\n  fi\n}\n\nget_permission() {\n  \"${STAT_PRINTF[@]}\" \"${PERMISSION_FORMAT}\" \"$1\"\n}\n\nuser_only_chmod() {\n  [[ -d \"$1\" ]] && [[ \"$(get_permission \"$1\")\" != 75[0145] ]]\n}\n\nexists_but_not_writable() {\n  [[ -e \"$1\" ]] && ! [[ -r \"$1\" && -w \"$1\" && -x \"$1\" ]]\n}\n\nget_owner() {\n  \"${STAT_PRINTF[@]}\" \"%u\" \"$1\"\n}\n\nfile_not_owned() {\n  [[ \"$(get_owner \"$1\")\" != \"$(id -u)\" ]]\n}\n\nget_group() {\n  \"${STAT_PRINTF[@]}\" \"%g\" \"$1\"\n}\n\nfile_not_grpowned() {\n  [[ \" $(id -G \"${USER}\") \" != *\" $(get_group \"$1\") \"* ]]\n}\n\n# Please sync with 'test_ruby()' in 'Library/Homebrew/utils/ruby.sh' from the Homebrew/brew repository.\ntest_ruby() {\n  if [[ ! -x \"$1\" ]]\n  then\n    return 1\n  fi\n\n  \"$1\" --enable-frozen-string-literal --disable=gems,did_you_mean,rubyopt -rrubygems -e \\\n    \"abort if Gem::Version.new(RUBY_VERSION.to_s.dup).to_s.split('.').first(2) != \\\n              Gem::Version.new('${REQUIRED_RUBY_VERSION}').to_s.split('.').first(2)\" 2>/dev/null\n}\n\ntest_curl() {\n  if [[ ! -x \"$1\" ]]\n  then\n    return 1\n  fi\n\n  if [[ \"$1\" == \"/snap/bin/curl\" ]]\n  then\n    warn \"Ignoring $1 (curl snap is too restricted)\"\n    return 1\n  fi\n\n  local curl_version_output curl_name_and_version\n  curl_version_output=\"$(\"$1\" --version 2>/dev/null)\"\n  curl_name_and_version=\"${curl_version_output%% (*}\"\n  version_ge \"$(major_minor \"${curl_name_and_version##* }\")\" \"$(major_minor \"${REQUIRED_CURL_VERSION}\")\"\n}\n\ntest_git() {\n  if [[ ! -x \"$1\" ]]\n  then\n    return 1\n  fi\n\n  local git_version_output\n  git_version_output=\"$(\"$1\" --version 2>/dev/null)\"\n  if [[ \"${git_version_output}\" =~ \"git version \"([^ ]*).* ]]\n  then\n    version_ge \"$(major_minor \"${BASH_REMATCH[1]}\")\" \"$(major_minor \"${REQUIRED_GIT_VERSION}\")\"\n  else\n    abort \"Unexpected Git version: '${git_version_output}'!\"\n  fi\n}\n\n# Search for the given executable in PATH (avoids a dependency on the `which` command)\nwhich() {\n  # Alias to Bash built-in command `type -P`\n  type -P \"$@\"\n}\n\n# Search PATH for the specified program that satisfies Homebrew requirements\n# function which is set above\n# shellcheck disable=SC2230\nfind_tool() {\n  if [[ $# -ne 1 ]]\n  then\n    return 1\n  fi\n\n  local executable\n  while read -r executable\n  do\n    if [[ \"${executable}\" != /* ]]\n    then\n      warn \"Ignoring ${executable} (relative paths don't work)\"\n    elif \"test_$1\" \"${executable}\"\n    then\n      echo \"${executable}\"\n      break\n    fi\n  done < <(which -a \"$1\")\n}\n\nno_usable_ruby() {\n  [[ -z \"$(find_tool ruby)\" ]]\n}\n\noutdated_glibc() {\n  local glibc_version\n  glibc_version=\"$(ldd --version | head -n1 | grep -o '[0-9.]*$' | grep -o '^[0-9]\\+\\.[0-9]\\+')\"\n  version_lt \"${glibc_version}\" \"${REQUIRED_GLIBC_VERSION}\"\n}\n\nif [[ -n \"${HOMEBREW_ON_LINUX-}\" ]] && no_usable_ruby && outdated_glibc\nthen\n  abort \"$(\n    cat <<EOABORT\nHomebrew requires Ruby ${REQUIRED_RUBY_VERSION} which was not found on your system.\nHomebrew portable Ruby requires Glibc version ${REQUIRED_GLIBC_VERSION} or newer,\nand your Glibc version is too old. See:\n  ${tty_underline}https://docs.brew.sh/Homebrew-on-Linux#requirements${tty_reset}\nPlease install Ruby ${REQUIRED_RUBY_VERSION} and add its location to your PATH.\nEOABORT\n  )\"\nfi\n\n# Invalidate sudo timestamp before exiting (if it wasn't active before).\nif [[ -x /usr/bin/sudo ]] && ! /usr/bin/sudo -n -v 2>/dev/null\nthen\n  trap '/usr/bin/sudo -k' EXIT\nfi\n\n# Things can fail later if `pwd` doesn't exist.\n# Also sudo prints a warning message for no good reason\ncd \"/usr\" || exit 1\n\n####################################################################### script\n\n# shellcheck disable=SC2016\nohai 'Checking for `sudo` access (which may request your password)...'\n\nif [[ -n \"${HOMEBREW_ON_MACOS-}\" ]]\nthen\n  [[ \"${EUID:-${UID}}\" == \"0\" ]] || have_sudo_access\nelif ! [[ -w \"${HOMEBREW_PREFIX}\" ]] &&\n     ! [[ -w \"/home/linuxbrew\" ]] &&\n     ! [[ -w \"/home\" ]] &&\n     ! have_sudo_access\nthen\n  abort \"$(\n    cat <<EOABORT\nInsufficient permissions to install Homebrew to \"${HOMEBREW_PREFIX}\" (the default prefix).\n\nAlternative (unsupported) installation methods are available at:\nhttps://docs.brew.sh/Installation#alternative-installs\n\nPlease note this will require most formula to build from source, a buggy, slow and energy-inefficient experience.\nWe will close any issues without response for these unsupported configurations.\nEOABORT\n  )\"\nfi\nHOMEBREW_CORE=\"${HOMEBREW_REPOSITORY}/Library/Taps/homebrew/homebrew-core\"\n\ncheck_run_command_as_root\n\nif [[ -d \"${HOMEBREW_PREFIX}\" && ! -x \"${HOMEBREW_PREFIX}\" ]]\nthen\n  abort \"$(\n    cat <<EOABORT\nThe Homebrew prefix ${tty_underline}${HOMEBREW_PREFIX}${tty_reset} exists but is not searchable.\nIf this is not intentional, please restore the default permissions and\ntry running the installer again:\n    sudo chmod 775 ${HOMEBREW_PREFIX}\nEOABORT\n  )\"\nfi\n\nif [[ -n \"${HOMEBREW_ON_MACOS-}\" ]]\nthen\n  # On macOS, support 64-bit Intel and ARM\n  if [[ \"${UNAME_MACHINE}\" != \"arm64\" ]] && [[ \"${UNAME_MACHINE}\" != \"x86_64\" ]]\n  then\n    abort \"Homebrew is only supported on Intel and ARM processors!\"\n  fi\nelse\n  # On Linux, support only 64-bit Intel\n  if [[ \"${UNAME_MACHINE}\" == \"aarch64\" ]]\n  then\n    abort \"$(\n      cat <<EOABORT\nHomebrew on Linux is not supported on ARM processors.\n  ${tty_underline}https://docs.brew.sh/Homebrew-on-Linux#arm-unsupported${tty_reset}\nEOABORT\n    )\"\n  elif [[ \"${UNAME_MACHINE}\" != \"x86_64\" ]]\n  then\n    abort \"Homebrew on Linux is only supported on Intel processors!\"\n  fi\nfi\n\nif [[ -n \"${HOMEBREW_ON_MACOS-}\" ]]\nthen\n  macos_version=\"$(major_minor \"$(/usr/bin/sw_vers -productVersion)\")\"\n  if version_lt \"${macos_version}\" \"10.7\"\n  then\n    abort \"$(\n      cat <<EOABORT\nYour Mac OS X version is too old. See:\n  ${tty_underline}https://github.com/mistydemeo/tigerbrew${tty_reset}\nEOABORT\n    )\"\n  elif version_lt \"${macos_version}\" \"10.11\"\n  then\n    abort \"Your OS X version is too old.\"\n  elif version_ge \"${macos_version}\" \"${MACOS_NEWEST_UNSUPPORTED}\" ||\n       version_lt \"${macos_version}\" \"${MACOS_OLDEST_SUPPORTED}\"\n  then\n    who=\"We\"\n    what=\"\"\n    if version_ge \"${macos_version}\" \"${MACOS_NEWEST_UNSUPPORTED}\"\n    then\n      what=\"pre-release version\"\n    else\n      who+=\" (and Apple)\"\n      what=\"old version\"\n    fi\n    ohai \"You are using macOS ${macos_version}.\"\n    ohai \"${who} do not provide support for this ${what}.\"\n\n    echo \"$(\n      cat <<EOS\nThis installation may not succeed.\nAfter installation, you will encounter build failures with some formulae.\nPlease create pull requests instead of asking for help on Homebrew\\'s GitHub,\nTwitter or any other official channels. You are responsible for resolving any\nissues you experience while you are running this ${what}.\nEOS\n    )\n\" | tr -d \"\\\\\"\n  fi\nfi\n\nohai \"This script will install:\"\necho \"${HOMEBREW_PREFIX}/bin/brew\"\necho \"${HOMEBREW_PREFIX}/share/doc/homebrew\"\necho \"${HOMEBREW_PREFIX}/share/man/man1/brew.1\"\necho \"${HOMEBREW_PREFIX}/share/zsh/site-functions/_brew\"\necho \"${HOMEBREW_PREFIX}/etc/bash_completion.d/brew\"\necho \"${HOMEBREW_REPOSITORY}\"\n\n# Keep relatively in sync with\n# https://github.com/Homebrew/brew/blob/master/Library/Homebrew/keg.rb\ndirectories=(\n  bin etc include lib sbin share opt var\n  Frameworks\n  etc/bash_completion.d lib/pkgconfig\n  share/aclocal share/doc share/info share/locale share/man\n  share/man/man1 share/man/man2 share/man/man3 share/man/man4\n  share/man/man5 share/man/man6 share/man/man7 share/man/man8\n  var/log var/homebrew var/homebrew/linked\n  bin/brew\n)\ngroup_chmods=()\nfor dir in \"${directories[@]}\"\ndo\n  if exists_but_not_writable \"${HOMEBREW_PREFIX}/${dir}\"\n  then\n    group_chmods+=(\"${HOMEBREW_PREFIX}/${dir}\")\n  fi\ndone\n\n# zsh refuses to read from these directories if group writable\ndirectories=(share/zsh share/zsh/site-functions)\nzsh_dirs=()\nfor dir in \"${directories[@]}\"\ndo\n  zsh_dirs+=(\"${HOMEBREW_PREFIX}/${dir}\")\ndone\n\ndirectories=(\n  bin etc include lib sbin share var opt\n  share/zsh share/zsh/site-functions\n  var/homebrew var/homebrew/linked\n  Cellar Caskroom Frameworks\n)\nmkdirs=()\nfor dir in \"${directories[@]}\"\ndo\n  if ! [[ -d \"${HOMEBREW_PREFIX}/${dir}\" ]]\n  then\n    mkdirs+=(\"${HOMEBREW_PREFIX}/${dir}\")\n  fi\ndone\n\nuser_chmods=()\nmkdirs_user_only=()\nif [[ \"${#zsh_dirs[@]}\" -gt 0 ]]\nthen\n  for dir in \"${zsh_dirs[@]}\"\n  do\n    if [[ ! -d \"${dir}\" ]]\n    then\n      mkdirs_user_only+=(\"${dir}\")\n    elif user_only_chmod \"${dir}\"\n    then\n      user_chmods+=(\"${dir}\")\n    fi\n  done\nfi\n\nchmods=()\nif [[ \"${#group_chmods[@]}\" -gt 0 ]]\nthen\n  chmods+=(\"${group_chmods[@]}\")\nfi\nif [[ \"${#user_chmods[@]}\" -gt 0 ]]\nthen\n  chmods+=(\"${user_chmods[@]}\")\nfi\n\nchowns=()\nchgrps=()\nif [[ \"${#chmods[@]}\" -gt 0 ]]\nthen\n  for dir in \"${chmods[@]}\"\n  do\n    if file_not_owned \"${dir}\"\n    then\n      chowns+=(\"${dir}\")\n    fi\n    if file_not_grpowned \"${dir}\"\n    then\n      chgrps+=(\"${dir}\")\n    fi\n  done\nfi\n\nif [[ \"${#group_chmods[@]}\" -gt 0 ]]\nthen\n  ohai \"The following existing directories will be made group writable:\"\n  printf \"%s\\n\" \"${group_chmods[@]}\"\nfi\nif [[ \"${#user_chmods[@]}\" -gt 0 ]]\nthen\n  ohai \"The following existing directories will be made writable by user only:\"\n  printf \"%s\\n\" \"${user_chmods[@]}\"\nfi\nif [[ \"${#chowns[@]}\" -gt 0 ]]\nthen\n  ohai \"The following existing directories will have their owner set to ${tty_underline}${USER}${tty_reset}:\"\n  printf \"%s\\n\" \"${chowns[@]}\"\nfi\nif [[ \"${#chgrps[@]}\" -gt 0 ]]\nthen\n  ohai \"The following existing directories will have their group set to ${tty_underline}${GROUP}${tty_reset}:\"\n  printf \"%s\\n\" \"${chgrps[@]}\"\nfi\nif [[ \"${#mkdirs[@]}\" -gt 0 ]]\nthen\n  ohai \"The following new directories will be created:\"\n  printf \"%s\\n\" \"${mkdirs[@]}\"\nfi\n\nif should_install_command_line_tools\nthen\n  ohai \"The Xcode Command Line Tools will be installed.\"\nfi\n\nnon_default_repos=\"\"\nadditional_shellenv_commands=()\nif [[ \"${HOMEBREW_BREW_DEFAULT_GIT_REMOTE}\" != \"${HOMEBREW_BREW_GIT_REMOTE}\" ]]\nthen\n  ohai \"HOMEBREW_BREW_GIT_REMOTE is set to a non-default URL:\"\n  echo \"${tty_underline}${HOMEBREW_BREW_GIT_REMOTE}${tty_reset} will be used as the Homebrew/brew Git remote.\"\n  non_default_repos=\"Homebrew/brew\"\n  additional_shellenv_commands+=(\"export HOMEBREW_BREW_GIT_REMOTE=\\\"${HOMEBREW_BREW_GIT_REMOTE}\\\"\")\nfi\n\nif [[ \"${HOMEBREW_CORE_DEFAULT_GIT_REMOTE}\" != \"${HOMEBREW_CORE_GIT_REMOTE}\" ]]\nthen\n  ohai \"HOMEBREW_CORE_GIT_REMOTE is set to a non-default URL:\"\n  echo \"${tty_underline}${HOMEBREW_CORE_GIT_REMOTE}${tty_reset} will be used as the Homebrew/homebrew-core Git remote.\"\n  non_default_repos=\"${non_default_repos:-}${non_default_repos:+ and }Homebrew/homebrew-core\"\n  additional_shellenv_commands+=(\"export HOMEBREW_CORE_GIT_REMOTE=\\\"${HOMEBREW_CORE_GIT_REMOTE}\\\"\")\nfi\n\nif [[ -n \"${HOMEBREW_NO_INSTALL_FROM_API-}\" ]]\nthen\n  ohai \"HOMEBREW_NO_INSTALL_FROM_API is set.\"\n  echo \"Homebrew/homebrew-core will be tapped during this ${tty_bold}install${tty_reset} run.\"\nfi\n\nif [[ -z \"${NONINTERACTIVE-}\" ]]\nthen\n  ring_bell\n  wait_for_user\nfi\n\nif [[ -d \"${HOMEBREW_PREFIX}\" ]]\nthen\n  if [[ \"${#chmods[@]}\" -gt 0 ]]\n  then\n    execute_sudo \"${CHMOD[@]}\" \"u+rwx\" \"${chmods[@]}\"\n  fi\n  if [[ \"${#group_chmods[@]}\" -gt 0 ]]\n  then\n    execute_sudo \"${CHMOD[@]}\" \"g+rwx\" \"${group_chmods[@]}\"\n  fi\n  if [[ \"${#user_chmods[@]}\" -gt 0 ]]\n  then\n    execute_sudo \"${CHMOD[@]}\" \"go-w\" \"${user_chmods[@]}\"\n  fi\n  if [[ \"${#chowns[@]}\" -gt 0 ]]\n  then\n    execute_sudo \"${CHOWN[@]}\" \"${USER}\" \"${chowns[@]}\"\n  fi\n  if [[ \"${#chgrps[@]}\" -gt 0 ]]\n  then\n    execute_sudo \"${CHGRP[@]}\" \"${GROUP}\" \"${chgrps[@]}\"\n  fi\nelse\n  execute_sudo \"${INSTALL[@]}\" \"${HOMEBREW_PREFIX}\"\nfi\n\nif [[ \"${#mkdirs[@]}\" -gt 0 ]]\nthen\n  execute_sudo \"${MKDIR[@]}\" \"${mkdirs[@]}\"\n  execute_sudo \"${CHMOD[@]}\" \"ug=rwx\" \"${mkdirs[@]}\"\n  if [[ \"${#mkdirs_user_only[@]}\" -gt 0 ]]\n  then\n    execute_sudo \"${CHMOD[@]}\" \"go-w\" \"${mkdirs_user_only[@]}\"\n  fi\n  execute_sudo \"${CHOWN[@]}\" \"${USER}\" \"${mkdirs[@]}\"\n  execute_sudo \"${CHGRP[@]}\" \"${GROUP}\" \"${mkdirs[@]}\"\nfi\n\nif ! [[ -d \"${HOMEBREW_REPOSITORY}\" ]]\nthen\n  execute_sudo \"${MKDIR[@]}\" \"${HOMEBREW_REPOSITORY}\"\nfi\nexecute_sudo \"${CHOWN[@]}\" \"-R\" \"${USER}:${GROUP}\" \"${HOMEBREW_REPOSITORY}\"\n\nif ! [[ -d \"${HOMEBREW_CACHE}\" ]]\nthen\n  if [[ -n \"${HOMEBREW_ON_MACOS-}\" ]]\n  then\n    execute_sudo \"${MKDIR[@]}\" \"${HOMEBREW_CACHE}\"\n  else\n    execute \"${MKDIR[@]}\" \"${HOMEBREW_CACHE}\"\n  fi\nfi\nif exists_but_not_writable \"${HOMEBREW_CACHE}\"\nthen\n  execute_sudo \"${CHMOD[@]}\" \"g+rwx\" \"${HOMEBREW_CACHE}\"\nfi\nif file_not_owned \"${HOMEBREW_CACHE}\"\nthen\n  execute_sudo \"${CHOWN[@]}\" \"-R\" \"${USER}\" \"${HOMEBREW_CACHE}\"\nfi\nif file_not_grpowned \"${HOMEBREW_CACHE}\"\nthen\n  execute_sudo \"${CHGRP[@]}\" \"-R\" \"${GROUP}\" \"${HOMEBREW_CACHE}\"\nfi\nif [[ -d \"${HOMEBREW_CACHE}\" ]]\nthen\n  execute \"${TOUCH[@]}\" \"${HOMEBREW_CACHE}/.cleaned\"\nfi\n\nif should_install_command_line_tools && version_ge \"${macos_version}\" \"10.13\"\nthen\n  ohai \"Searching online for the Command Line Tools\"\n  # This temporary file prompts the 'softwareupdate' utility to list the Command Line Tools\n  clt_placeholder=\"/tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress\"\n  execute_sudo \"${TOUCH[@]}\" \"${clt_placeholder}\"\n\n  clt_label_command=\"/usr/sbin/softwareupdate -l |\n                      grep -B 1 -E 'Command Line Tools' |\n                      awk -F'*' '/^ *\\\\*/ {print \\$2}' |\n                      sed -e 's/^ *Label: //' -e 's/^ *//' |\n                      sort -V |\n                      tail -n1\"\n  clt_label=\"$(chomp \"$(/bin/bash -c \"${clt_label_command}\")\")\"\n\n  if [[ -n \"${clt_label}\" ]]\n  then\n    ohai \"Installing ${clt_label}\"\n    execute_sudo \"/usr/sbin/softwareupdate\" \"-i\" \"${clt_label}\"\n    execute_sudo \"/usr/bin/xcode-select\" \"--switch\" \"/Library/Developer/CommandLineTools\"\n  fi\n  execute_sudo \"/bin/rm\" \"-f\" \"${clt_placeholder}\"\nfi\n\n# Headless install may have failed, so fallback to original 'xcode-select' method\nif should_install_command_line_tools && test -t 0\nthen\n  ohai \"Installing the Command Line Tools (expect a GUI popup):\"\n  execute \"/usr/bin/xcode-select\" \"--install\"\n  echo \"Press any key when the installation has completed.\"\n  getc\n  execute_sudo \"/usr/bin/xcode-select\" \"--switch\" \"/Library/Developer/CommandLineTools\"\nfi\n\nif [[ -n \"${HOMEBREW_ON_MACOS-}\" ]] && ! output=\"$(/usr/bin/xcrun clang 2>&1)\" && [[ \"${output}\" == *\"license\"* ]]\nthen\n  abort \"$(\n    cat <<EOABORT\nYou have not agreed to the Xcode license.\nBefore running the installer again please agree to the license by opening\nXcode.app or running:\n    sudo xcodebuild -license\nEOABORT\n  )\"\nfi\n\nUSABLE_GIT=/usr/bin/git\nif [[ -n \"${HOMEBREW_ON_LINUX-}\" ]]\nthen\n  USABLE_GIT=\"$(find_tool git)\"\n  if [[ -z \"$(command -v git)\" ]]\n  then\n    abort \"$(\n      cat <<EOABORT\n  You must install Git before installing Homebrew. See:\n    ${tty_underline}https://docs.brew.sh/Installation${tty_reset}\nEOABORT\n    )\"\n  fi\n  if [[ -z \"${USABLE_GIT}\" ]]\n  then\n    abort \"$(\n      cat <<EOABORT\n  The version of Git that was found does not satisfy requirements for Homebrew.\n  Please install Git ${REQUIRED_GIT_VERSION} or newer and add it to your PATH.\nEOABORT\n    )\"\n  fi\n  if [[ \"${USABLE_GIT}\" != /usr/bin/git ]]\n  then\n    export HOMEBREW_GIT_PATH=\"${USABLE_GIT}\"\n    ohai \"Found Git: ${HOMEBREW_GIT_PATH}\"\n  fi\nfi\n\nif ! command -v curl >/dev/null\nthen\n  abort \"$(\n    cat <<EOABORT\nYou must install cURL before installing Homebrew. See:\n  ${tty_underline}https://docs.brew.sh/Installation${tty_reset}\nEOABORT\n  )\"\nelif [[ -n \"${HOMEBREW_ON_LINUX-}\" ]]\nthen\n  USABLE_CURL=\"$(find_tool curl)\"\n  if [[ -z \"${USABLE_CURL}\" ]]\n  then\n    abort \"$(\n      cat <<EOABORT\nThe version of cURL that was found does not satisfy requirements for Homebrew.\nPlease install cURL ${REQUIRED_CURL_VERSION} or newer and add it to your PATH.\nEOABORT\n    )\"\n  elif [[ \"${USABLE_CURL}\" != /usr/bin/curl ]]\n  then\n    export HOMEBREW_CURL_PATH=\"${USABLE_CURL}\"\n    ohai \"Found cURL: ${HOMEBREW_CURL_PATH}\"\n  fi\nfi\n\nohai \"Downloading and installing Homebrew...\"\n(\n  cd \"${HOMEBREW_REPOSITORY}\" >/dev/null || return\n\n  # we do it in four steps to avoid merge errors when reinstalling\n  execute \"${USABLE_GIT}\" \"-c\" \"init.defaultBranch=master\" \"init\" \"--quiet\"\n\n  # \"git remote add\" will fail if the remote is defined in the global config\n  execute \"${USABLE_GIT}\" \"config\" \"remote.origin.url\" \"${HOMEBREW_BREW_GIT_REMOTE}\"\n  execute \"${USABLE_GIT}\" \"config\" \"remote.origin.fetch\" \"+refs/heads/*:refs/remotes/origin/*\"\n\n  # ensure we don't munge line endings on checkout\n  execute \"${USABLE_GIT}\" \"config\" \"--bool\" \"core.autocrlf\" \"false\"\n\n  # make sure symlinks are saved as-is\n  execute \"${USABLE_GIT}\" \"config\" \"--bool\" \"core.symlinks\" \"true\"\n\n  if [[ -z \"${NONINTERACTIVE-}\" ]]\n  then\n    quiet_progress=(\"--quiet\" \"--progress\")\n  else\n    quiet_progress=(\"--quiet\")\n  fi\n  execute \"${USABLE_GIT}\" \"fetch\" \"${quiet_progress[@]}\" \"--force\" \"origin\"\n  execute \"${USABLE_GIT}\" \"fetch\" \"${quiet_progress[@]}\" \"--force\" \"--tags\" \"origin\"\n\n  execute \"${USABLE_GIT}\" \"remote\" \"set-head\" \"origin\" \"--auto\" >/dev/null\n\n  LATEST_GIT_TAG=\"$(\"${USABLE_GIT}\" tag --list --sort=\"-version:refname\" | head -n1)\"\n  if [[ -z \"${LATEST_GIT_TAG}\" ]]\n  then\n    abort \"Failed to query latest Homebrew/brew Git tag.\"\n  fi\n  execute \"${USABLE_GIT}\" \"checkout\" \"--quiet\" \"--force\" \"-B\" \"stable\" \"${LATEST_GIT_TAG}\"\n\n  if [[ \"${HOMEBREW_REPOSITORY}\" != \"${HOMEBREW_PREFIX}\" ]]\n  then\n    if [[ \"${HOMEBREW_REPOSITORY}\" == \"${HOMEBREW_PREFIX}/Homebrew\" ]]\n    then\n      execute \"ln\" \"-sf\" \"../Homebrew/bin/brew\" \"${HOMEBREW_PREFIX}/bin/brew\"\n    else\n      abort \"The Homebrew/brew repository should be placed in the Homebrew prefix directory.\"\n    fi\n  fi\n\n  if [[ -n \"${HOMEBREW_NO_INSTALL_FROM_API-}\" && ! -d \"${HOMEBREW_CORE}\" ]]\n  then\n    # Always use single-quoted strings with `exp` expressions\n    # shellcheck disable=SC2016\n    ohai 'Tapping homebrew/core because `$HOMEBREW_NO_INSTALL_FROM_API` is set.'\n    (\n      execute \"${MKDIR[@]}\" \"${HOMEBREW_CORE}\"\n      cd \"${HOMEBREW_CORE}\" >/dev/null || return\n\n      execute \"${USABLE_GIT}\" \"-c\" \"init.defaultBranch=master\" \"init\" \"--quiet\"\n      execute \"${USABLE_GIT}\" \"config\" \"remote.origin.url\" \"${HOMEBREW_CORE_GIT_REMOTE}\"\n      execute \"${USABLE_GIT}\" \"config\" \"remote.origin.fetch\" \"+refs/heads/*:refs/remotes/origin/*\"\n      execute \"${USABLE_GIT}\" \"config\" \"--bool\" \"core.autocrlf\" \"false\"\n      execute \"${USABLE_GIT}\" \"config\" \"--bool\" \"core.symlinks\" \"true\"\n      execute \"${USABLE_GIT}\" \"fetch\" \"--force\" \"${quiet_progress[@]}\" \\\n        \"origin\" \"refs/heads/master:refs/remotes/origin/master\"\n      execute \"${USABLE_GIT}\" \"remote\" \"set-head\" \"origin\" \"--auto\" >/dev/null\n      execute \"${USABLE_GIT}\" \"reset\" \"--hard\" \"origin/master\"\n\n      cd \"${HOMEBREW_REPOSITORY}\" >/dev/null || return\n    ) || exit 1\n  fi\n\n  execute \"${HOMEBREW_PREFIX}/bin/brew\" \"update\" \"--force\" \"--quiet\"\n) || exit 1\n\nif [[ \":${PATH}:\" != *\":${HOMEBREW_PREFIX}/bin:\"* ]]\nthen\n  warn \"${HOMEBREW_PREFIX}/bin is not in your PATH.\n  Instructions on how to configure your shell for Homebrew\n  can be found in the 'Next steps' section below.\"\nfi\n\nohai \"Installation successful!\"\necho\n\nring_bell\n\n# Use an extra newline and bold to avoid this being missed.\nohai \"Homebrew has enabled anonymous aggregate formulae and cask analytics.\"\necho \"$(\n  cat <<EOS\n${tty_bold}Read the analytics documentation (and how to opt-out) here:\n  ${tty_underline}https://docs.brew.sh/Analytics${tty_reset}\nNo analytics data has been sent yet (nor will any be during this ${tty_bold}install${tty_reset} run).\nEOS\n)\n\"\n\nohai \"Homebrew is run entirely by unpaid volunteers. Please consider donating:\"\necho \"$(\n  cat <<EOS\n  ${tty_underline}https://github.com/Homebrew/brew#donations${tty_reset}\nEOS\n)\n\"\n\n(\n  cd \"${HOMEBREW_REPOSITORY}\" >/dev/null || return\n  execute \"${USABLE_GIT}\" \"config\" \"--replace-all\" \"homebrew.analyticsmessage\" \"true\"\n  execute \"${USABLE_GIT}\" \"config\" \"--replace-all\" \"homebrew.caskanalyticsmessage\" \"true\"\n) || exit 1\n\nohai \"Next steps:\"\ncase \"${SHELL}\" in\n  */bash*)\n    if [[ -n \"${HOMEBREW_ON_LINUX-}\" ]]\n    then\n      shell_rcfile=\"${HOME}/.bashrc\"\n    else\n      shell_rcfile=\"${HOME}/.bash_profile\"\n    fi\n    ;;\n  */zsh*)\n    if [[ -n \"${HOMEBREW_ON_LINUX-}\" ]]\n    then\n      shell_rcfile=\"${ZDOTDIR:-\"${HOME}\"}/.zshrc\"\n    else\n      shell_rcfile=\"${ZDOTDIR:-\"${HOME}\"}/.zprofile\"\n    fi\n    ;;\n  */fish*)\n    shell_rcfile=\"${HOME}/.config/fish/config.fish\"\n    ;;\n  *)\n    shell_rcfile=\"${ENV:-\"${HOME}/.profile\"}\"\n    ;;\nesac\n\nif grep -qs \"eval \\\"\\$(${HOMEBREW_PREFIX}/bin/brew shellenv)\\\"\" \"${shell_rcfile}\"\nthen\n  if ! [[ -x \"$(command -v brew)\" ]]\n  then\n    cat <<EOS\n- Run this command in your terminal to add Homebrew to your ${tty_bold}PATH${tty_reset}:\n    eval \"\\$(${HOMEBREW_PREFIX}/bin/brew shellenv)\"\nEOS\n  fi\nelse\n  cat <<EOS\n- Run these commands in your terminal to add Homebrew to your ${tty_bold}PATH${tty_reset}:\n    echo >> ${shell_rcfile}\n    echo 'eval \"\\$(${HOMEBREW_PREFIX}/bin/brew shellenv)\"' >> ${shell_rcfile}\n    eval \"\\$(${HOMEBREW_PREFIX}/bin/brew shellenv)\"\nEOS\nfi\n\nif [[ -n \"${non_default_repos}\" ]]\nthen\n  plural=\"\"\n  if [[ \"${#additional_shellenv_commands[@]}\" -gt 1 ]]\n  then\n    plural=\"s\"\n  fi\n  printf -- \"- Run these commands in your terminal to add the non-default Git remote%s for %s:\\n\" \"${plural}\" \"${non_default_repos}\"\n  printf \"    echo '# Set non-default Git remote%s for %s.' >> %s\\n\" \"${plural}\" \"${non_default_repos}\" \"${shell_rcfile}\"\n  printf \"    echo '%s' >> ${shell_rcfile}\\n\" \"${additional_shellenv_commands[@]}\"\n  printf \"    %s\\n\" \"${additional_shellenv_commands[@]}\"\nfi\n\nif [[ -n \"${HOMEBREW_ON_LINUX-}\" ]]\nthen\n  echo \"- Install Homebrew's dependencies if you have sudo access:\"\n\n  if [[ -x \"$(command -v apt-get)\" ]]\n  then\n    echo \"    sudo apt-get install build-essential\"\n  elif [[ -x \"$(command -v dnf)\" ]]\n  then\n    echo \"    sudo dnf group install development-tools\"\n  elif [[ -x \"$(command -v yum)\" ]]\n  then\n    echo \"    sudo yum groupinstall 'Development Tools'\"\n  elif [[ -x \"$(command -v pacman)\" ]]\n  then\n    echo \"    sudo pacman -S base-devel\"\n  elif [[ -x \"$(command -v apk)\" ]]\n  then\n    echo \"    sudo apk add build-base\"\n  fi\n\n  cat <<EOS\n  For more information, see:\n    ${tty_underline}https://docs.brew.sh/Homebrew-on-Linux${tty_reset}\n- We recommend that you install GCC:\n    brew install gcc\nEOS\nfi\n\ncat <<EOS\n- Run ${tty_bold}brew help${tty_reset} to get started\n- Further documentation:\n    ${tty_underline}https://docs.brew.sh${tty_reset}\n\nEOS\n"
        },
        {
          "name": "uninstall.sh",
          "type": "blob",
          "size": 11.1494140625,
          "content": "#!/bin/bash\n\n# We don't need return codes for \"$(command)\", only stdout is needed.\n# Allow `[[ -n \"$(command)\" ]]`, `func \"$(command)\"`, pipes, etc.\n# shellcheck disable=SC2312\n\nset -u\n\nabort() {\n  printf \"%s\\n\" \"$@\" >&2\n  exit 1\n}\n\n# Fail fast with a concise message when not using bash\n# Single brackets are needed here for POSIX compatibility\n# shellcheck disable=SC2292\nif [ -z \"${BASH_VERSION:-}\" ]\nthen\n  abort \"Bash is required to interpret this script.\"\nfi\n\n# Check if script is run in POSIX mode\nif [[ -n \"${POSIXLY_CORRECT+1}\" ]]\nthen\n  abort 'Bash must not run in POSIX mode. Please unset POSIXLY_CORRECT and try again.'\nfi\n\nshopt -s extglob\n\nstrip_s() {\n  local s\n  for s in \"$@\"\n  do\n    s=\"${s## }\"\n    echo \"${s%% }\"\n  done\n}\n\ndir_children() {\n  local p\n  for p in \"$@\"\n  do\n    [[ -d \"${p}\" ]] || continue\n    find \"${p}\" -mindepth 1 -maxdepth 1\n  done\n}\n\n# Set up temp dir\ntmpdir=\"/tmp/uninstall.$$\"\nmkdir -p \"${tmpdir}\" || abort \"Unable to create temp dir '${tmpdir}'\"\ntrap '\n  rm -fr \"${tmpdir}\"\n  # Invalidate sudo timestamp before exiting\n  /usr/bin/sudo -k\n' EXIT\n\n# Default options\nopt_force=\"\"\nopt_quiet=\"\"\nopt_dry_run=\"\"\nopt_skip_cache_and_logs=\"\"\n\n# global status to indicate whether there is anything wrong.\nfailed=false\n\nun=\"$(uname)\"\ncase \"${un}\" in\n  Linux)\n    ostype=linux\n    homebrew_prefix_default=/home/linuxbrew/.linuxbrew\n    ;;\n  Darwin)\n    ostype=macos\n    if [[ \"$(uname -m)\" == \"arm64\" ]]\n    then\n      homebrew_prefix_default=/opt/homebrew\n    else\n      homebrew_prefix_default=/usr/local\n    fi\n    realpath() {\n      cd \"$(dirname \"$1\")\" && echo \"$(pwd -P)/$(basename \"$1\")\"\n    }\n    ;;\n  *)\n    abort \"Unsupported system type '${un}'\"\n    ;;\nesac\n\n# string formatters\nif [[ -t 1 ]]\nthen\n  tty_escape() { printf \"\\033[%sm\" \"$1\"; }\nelse\n  tty_escape() { :; }\nfi\ntty_mkbold() { tty_escape \"1;${1:-39}\"; }\ntty_blue=\"$(tty_mkbold 34)\"\ntty_red=\"$(tty_mkbold 31)\"\ntty_bold=\"$(tty_mkbold 39)\"\ntty_reset=\"$(tty_escape 0)\"\n\nunset HAVE_SUDO_ACCESS # unset this from the environment\n\nhave_sudo_access() {\n  if [[ ! -x \"/usr/bin/sudo\" ]]\n  then\n    return 1\n  fi\n\n  local -a SUDO=(\"/usr/bin/sudo\")\n  if [[ -n \"${SUDO_ASKPASS-}\" ]]\n  then\n    SUDO+=(\"-A\")\n  fi\n\n  if [[ -z \"${HAVE_SUDO_ACCESS-}\" ]]\n  then\n    \"${SUDO[@]}\" -l mkdir &>/dev/null\n    HAVE_SUDO_ACCESS=\"$?\"\n  fi\n\n  if [[ -z \"${HOMEBREW_ON_LINUX-}\" ]] && [[ \"${HAVE_SUDO_ACCESS}\" -ne 0 ]]\n  then\n    abort \"Need sudo access on macOS (e.g. the user ${USER} needs to be an administrator)!\"\n  fi\n\n  return \"${HAVE_SUDO_ACCESS}\"\n}\n\nshell_join() {\n  local arg\n  printf \"%s\" \"$1\"\n  shift\n  for arg in \"$@\"\n  do\n    printf \" \"\n    printf \"%s\" \"${arg// /\\ }\"\n  done\n}\n\nresolved_pathname() { realpath \"$1\"; }\n\npretty_print_pathnames() {\n  local p\n  for p in \"$@\"\n  do\n    if [[ -L \"${p}\" ]]\n    then\n      printf '%s -> %s\\n' \"${p}\" \"$(resolved_pathname \"${p}\")\"\n    elif [[ -d \"${p}\" ]]\n    then\n      echo \"${p}/\"\n    else\n      echo \"${p}\"\n    fi\n  done\n}\n\nchomp() {\n  printf \"%s\" \"${1/\"$'\\n'\"/}\"\n}\n\nohai() {\n  printf \"${tty_blue}==>${tty_bold} %s${tty_reset}\\n\" \"$(shell_join \"$@\")\"\n}\n\nwarn() {\n  printf \"${tty_red}Warning${tty_reset}: %s\\n\" \"$(chomp \"$1\")\"\n}\n\nexecute() {\n  if ! \"$@\"\n  then\n    abort \"$(printf \"Failed during: %s\" \"$(shell_join \"$@\")\")\"\n  fi\n}\n\nexecute_sudo() {\n  local -a args=(\"$@\")\n  if have_sudo_access\n  then\n    if [[ -n \"${SUDO_ASKPASS-}\" ]]\n    then\n      args=(\"-A\" \"${args[@]}\")\n    fi\n    ohai \"/usr/bin/sudo\" \"${args[@]}\"\n    system \"/usr/bin/sudo\" \"${args[@]}\"\n  else\n    ohai \"${args[@]}\"\n    system \"${args[@]}\"\n  fi\n}\n\nsystem() {\n  if ! \"$@\"\n  then\n    warn \"Failed during: $(shell_join \"$@\")\"\n    failed=true\n  fi\n}\n\n####################################################################### script\n\nhomebrew_prefix_candidates=()\n\nusage() {\n  cat <<EOS\nHomebrew Uninstaller\nUsage: [NONINTERACTIVE=1] $0 [options]\n    -p, --path=PATH  Sets Homebrew prefix. Defaults to ${homebrew_prefix_default}.\n        --skip-cache-and-logs\n                     Skips removal of HOMEBREW_CACHE and HOMEBREW_LOGS.\n    -f, --force      Uninstall without prompting.\n    -q, --quiet      Suppress all output.\n    -n, --dry-run    Simulate uninstall but don't remove anything.\n    -h, --help       Display this message.\n    NONINTERACTIVE   Imply --force if NONINTERACTIVE is non-empty.\nEOS\n  exit \"${1:-0}\"\n}\n\nwhile [[ $# -gt 0 ]]\ndo\n  case \"$1\" in\n    -p)\n      homebrew_prefix_candidates+=(\"$2\")\n      shift\n      ;;\n    --path)\n      homebrew_prefix_candidates+=(\"$2\")\n      shift\n      ;;\n    -p*) homebrew_prefix_candidates+=(\"${1#-p}\") ;;\n    --path=*) homebrew_prefix_candidates+=(\"${1#--path=}\") ;;\n    --skip-cache-and-logs) opt_skip_cache_and_logs=1 ;;\n    -f | --force) opt_force=1 ;;\n    -q | --quiet) opt_quiet=1 ;;\n    -d | -n | --dry-run) opt_dry_run=1 ;;\n    -h | --help) usage ;;\n    *)\n      warn \"Unrecognized option: '$1'\"\n      usage 1\n      ;;\n  esac\n  shift\ndone\n\n# Attempt to locate Homebrew unless `--path` is passed\nif [[ \"${#homebrew_prefix_candidates[@]}\" -eq 0 ]]\nthen\n  prefix=\"$(\"${homebrew_prefix_default}\"/bin/brew --prefix)\"\n  [[ -n \"${prefix}\" ]] && homebrew_prefix_candidates+=(\"${prefix}\")\n  prefix=\"$(command -v \"${homebrew_prefix_default}\"/bin/brew)\" || prefix=\"\"\n  [[ -n \"${prefix}\" ]] && homebrew_prefix_candidates+=(\"$(dirname \"$(dirname \"$(strip_s \"${prefix}\")\")\")\")\n  homebrew_prefix_candidates+=(\"${homebrew_prefix_default}\")                   # Homebrew default path\n  homebrew_prefix_candidates+=(\"${HOME}/.linuxbrew\")                           # Linuxbrew default path\n  [[ \"$(uname -m)\" == \"arm64\" ]] && homebrew_prefix_candidates+=(\"/usr/local\") # If migrated from Intel to ARM old path will remain\nfi\n\nHOMEBREW_PREFIX=\"$(\n  for p in \"${homebrew_prefix_candidates[@]}\"\n  do\n    [[ -d \"${p}\" ]] || continue\n    [[ ${p} == \"${homebrew_prefix_default}\" && -d \"${p}/Homebrew/.git\" ]] && echo \"${p}\" && break\n    [[ -d \"${p}/.git\" || -x \"${p}/bin/brew\" ]] && echo \"${p}\" && break\n  done\n)\"\n[[ -n \"${HOMEBREW_PREFIX}\" ]] || abort \"Failed to locate Homebrew!\"\n\nif [[ -d \"${HOMEBREW_PREFIX}/.git\" ]]\nthen\n  HOMEBREW_REPOSITORY=\"$(dirname \"$(realpath \"${HOMEBREW_PREFIX}/.git\")\")\"\nelif [[ -x \"${HOMEBREW_PREFIX}/bin/brew\" ]]\nthen\n  HOMEBREW_REPOSITORY=\"$(dirname \"$(dirname \"$(realpath \"${HOMEBREW_PREFIX}/bin/brew\")\")\")\"\nelse\n  abort \"Failed to locate Homebrew!\"\nfi\n\nif [[ -d \"${HOMEBREW_PREFIX}/Cellar\" ]]\nthen\n  HOMEBREW_CELLAR=\"${HOMEBREW_PREFIX}/Cellar\"\nelse\n  HOMEBREW_CELLAR=\"${HOMEBREW_REPOSITORY}/Cellar\"\nfi\n\nif [[ -s \"${HOMEBREW_REPOSITORY}/.gitignore\" ]]\nthen\n  gitignore=\"$(<\"${HOMEBREW_REPOSITORY}/.gitignore\")\"\nelse\n  gitignore=\"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/brew/HEAD/.gitignore)\"\nfi\n[[ -n \"${gitignore}\" ]] || abort \"Failed to fetch Homebrew .gitignore!\"\n\n{\n  while read -r l\n  do\n    [[ \"${l}\" == \\!* ]] || continue\n    l=\"${l#\\!}\"\n    l=\"${l#/}\"\n    [[ \"${l}\" == @(bin|share|share/doc) ]] && echo \"REJECT: ${l}\" >&2 && continue\n    echo \"${HOMEBREW_REPOSITORY}/${l}\"\n  done <<<\"${gitignore}\"\n\n  if [[ \"${HOMEBREW_PREFIX}\" != \"${HOMEBREW_REPOSITORY}\" ]]\n  then\n    echo \"${HOMEBREW_REPOSITORY}\"\n    directories=(\n      bin/brew\n      etc/bash_completion.d/brew\n      share/doc/homebrew\n      share/man/man1/brew.1\n      share/man/man1/brew-cask.1\n      share/man/man1/README.md\n      share/zsh/site-functions/_brew\n      share/zsh/site-functions/_brew_cask\n      share/fish/vendor_completions.d/brew.fish\n      var/homebrew\n    )\n    for p in \"${directories[@]}\"\n    do\n      echo \"${HOMEBREW_PREFIX}/${p}\"\n    done\n  else\n    echo \"${HOMEBREW_REPOSITORY}/.git\"\n  fi\n  echo \"${HOMEBREW_CELLAR}\"\n  echo \"${HOMEBREW_PREFIX}/Caskroom\"\n\n  [[ -n ${opt_skip_cache_and_logs} ]] || cat <<-EOS\n${HOME}/Library/Caches/Homebrew\n${HOME}/Library/Logs/Homebrew\n/Library/Caches/Homebrew\n${HOME}/.cache/Homebrew\n${HOMEBREW_CACHE:-}\n${HOMEBREW_LOGS:-}\nEOS\n\n  if [[ \"${ostype}\" == macos ]]\n  then\n    dir_children \"/Applications\" \"${HOME}/Applications\" | while read -r p2; do\n      [[ $(resolved_pathname \"${p2}\") == \"${HOMEBREW_CELLAR}\"/* ]] && echo \"${p2}\"\n    done\n  fi\n} | while read -r l; do\n  [[ -e \"${l}\" ]] && echo \"${l}\"\ndone | sort -u >\"${tmpdir}/homebrew_files\"\nhomebrew_files=()\nwhile read -r l\ndo\n  homebrew_files+=(\"${l}\")\ndone <\"${tmpdir}/homebrew_files\"\n\nif [[ -z \"${opt_quiet}\" ]]\nthen\n  dry_str=\"${opt_dry_run:+would}\"\n  warn \"This script ${dry_str:-will} remove:\"\n  pretty_print_pathnames \"${homebrew_files[@]}\"\nfi\n\n# Always use single-quoted strings with `exp` expressions\n# shellcheck disable=SC2016\nif [[ -n \"${NONINTERACTIVE-}\" ]]\nthen\n  ohai 'Running in non-interactive mode because `$NONINTERACTIVE` is set.'\n  opt_force=1\nfi\n\nif [[ -t 0 && -z \"${opt_force}\" && -z \"${opt_dry_run}\" ]]\nthen\n  read -rp \"Are you sure you want to uninstall Homebrew? This will remove your installed packages! [y/N] \"\n  [[ \"${REPLY}\" == [yY]* ]] || abort\nfi\n\n[[ -n \"${opt_quiet}\" ]] || ohai \"Removing Homebrew installation...\"\npaths=()\nfor p in Frameworks bin etc include lib opt sbin share var\ndo\n  p=\"${HOMEBREW_PREFIX}/${p}\"\n  [[ -e \"${p}\" ]] && paths+=(\"${p}\")\ndone\nif [[ \"${#paths[@]}\" -gt 0 ]]\nthen\n  args=(\"${paths[@]}\" -type l -lname '*/Cellar/*')\n  if [[ -n \"${opt_dry_run}\" ]]\n  then\n    args+=(-print)\n  else\n    args+=(-exec unlink '{}' ';')\n  fi\n  [[ -n \"${opt_dry_run}\" ]] && echo \"Would delete:\"\n  system /usr/bin/find \"${args[@]}\"\nfi\n\nfor file in \"${homebrew_files[@]}\"\ndo\n  if [[ -n \"${opt_dry_run}\" ]]\n  then\n    echo \"Would delete ${file}\"\n  else\n    if ! err=\"$(rm -fr \"${file}\" 2>&1)\"\n    then\n      warn \"Failed to delete ${file}\"\n      echo \"${err}\"\n    fi\n  fi\ndone\n\n[[ -n \"${opt_quiet}\" ]] || ohai \"Removing empty directories...\"\npaths=()\nfor p in bin etc include lib opt sbin share var Caskroom Cellar Homebrew Frameworks\ndo\n  p=\"${HOMEBREW_PREFIX}/${p}\"\n  [[ -e \"${p}\" ]] && paths+=(\"${p}\")\ndone\nif [[ \"${#paths[@]}\" -gt 0 ]]\nthen\n  if [[ \"${ostype}\" == macos ]]\n  then\n    args=(\"${paths[@]}\" -name .DS_Store)\n    if [[ -n \"${opt_dry_run}\" ]]\n    then\n      args+=(-print)\n      echo \"Would delete:\"\n    else\n      args+=(-delete)\n    fi\n    execute_sudo /usr/bin/find \"${args[@]}\"\n  fi\n  args=(\"${paths[@]}\" -depth -type d -empty)\n  if [[ -n \"${opt_dry_run}\" ]]\n  then\n    args+=(-print)\n    echo \"Would remove directories:\"\n  else\n    args+=(-exec rmdir '{}' ';')\n  fi\n  execute_sudo /usr/bin/find \"${args[@]}\"\nfi\n\n[[ -n \"${opt_dry_run}\" ]] && exit\nif [[ \"${HOMEBREW_PREFIX}\" != \"${homebrew_prefix_default}\" && -e \"${HOMEBREW_PREFIX}\" ]]\nthen\n  execute_sudo rmdir \"${HOMEBREW_PREFIX}\"\nfi\nif [[ \"${HOMEBREW_PREFIX}\" != \"${HOMEBREW_REPOSITORY}\" && -e \"${HOMEBREW_REPOSITORY}\" ]]\nthen\n  execute_sudo rmdir \"${HOMEBREW_REPOSITORY}\"\nfi\n\nif [[ -z \"${opt_quiet}\" ]]\nthen\n  if [[ \"${failed}\" == true ]]\n  then\n    warn \"Homebrew partially uninstalled (but there were steps that failed)!\"\n    echo \"To finish uninstalling rerun this script with \\`sudo\\`.\"\n  else\n    ohai \"Homebrew uninstalled!\"\n  fi\nfi\n\nresidual_dirs=(\"${HOMEBREW_REPOSITORY}\")\nif [[ \"${HOMEBREW_PREFIX}\" != \"/usr/local\" ]]\nthen\n  residual_dirs+=(\"${HOMEBREW_PREFIX}\")\nfi\ndir_children \"${residual_dirs[@]}\" |\n  sort -u >\"${tmpdir}/residual_files\"\n\nif [[ -s \"${tmpdir}/residual_files\" && -z \"${opt_quiet}\" ]]\nthen\n  echo \"The following possible Homebrew files were not deleted:\"\n  while read -r f\n  do\n    pretty_print_pathnames \"${f}\"\n  done <\"${tmpdir}/residual_files\"\n  echo -e \"You may wish to remove them yourself.\\n\"\nfi\n\n[[ \"${failed}\" != true ]]\n"
        }
      ]
    }
  ]
}