{
  "metadata": {
    "timestamp": 1736568744703,
    "page": 840,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg0OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "debian-pi/raspbian-ua-netinst",
      "stars": 1169,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1494140625,
          "content": "/bootfs/\n/packages/\n/installer*.cpio*\n/raspbian-ua-netinst-*.zip\n/raspbian-ua-netinst-*.img\n/raspbian-ua-netinst-*.img.xz\n/raspbian-ua-netinst-*.img.bz2\n"
        },
        {
          "name": "BUILD.md",
          "type": "blob",
          "size": 1.400390625,
          "content": "raspbian-ua-netinst build instructions\n======================================\n\nTo create an image yourself, you need to have various packages installed on the host machine.\nOn a Debian system those are the following, excluding packages with priority essential and required:\n- git\n- curl\n- bzip2\n- zip\n- xz-utils\n- gnupg\n- kpartx\n- dosfstools\n- binutils\n- bc\n\nOn Debian based systems you can install them as root or with sudo as follows:\n```\naptitude install git curl bzip2 zip xz-utils gnupg kpartx dosfstools binutils bc\n```\n\nThe following scripts are used to build the raspbian-ua-netinst installer, listed in the same order they would be used:\n\n - clean.sh - Start with a clean slate by removing everything created by earlier builds. This is not needed on a first build, but won't hurt either.\n - update.sh - Downloads latest Raspbian packages that will be used to build the installer.\n - build.sh - Builds the installer initramfs and .zip package for Windows/Mac SD card extraction method. Transfer the .zip package to a Windows/Mac computer, then simply unzip it and copy the files onto a FAT formatted SD card.\n - buildroot.sh - Builds the installer SD card image, it requires root privileges and it makes some assumptions like not having any other loop devices in use. You only need to execute this script if you need more than a .zip package. The script produces an .img package and also its bzip2 and xz compressed versions.\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 1.7509765625,
          "content": "# Changelog\n\n## Changes in v1.2.x\n\n- Removed raspberrypi.org repo and APT/GPG key from installer and installed system and fixed resulting issues. This fixes issue #529.  \n  The user can still add it themselves if they want to and can deal with resulting issues in a way that best fits their situation.\n- Added (binary) raspbian.org APT/GPG key to the repo and use that instead of downloading the (ascii-armored) key online.\n- Changed default boot partition size to 256MB. With the previous value, 128MB, one could run out of space if multiple kernels got installed and there is no easy workaround for that. One can still override it of course.\n- Added Debian's default shell, `dash`, and make that the default and use that for the installer itself as well.  \n  Fix the resulting issue which were (apparently) caused by some internal workings of busybox, but a hard dependency on a particular shell is not/never good.\n- Replace the `try_again` setting with `fail_action`. The latter is more flexible and isn't tied to a busybox specific functionality.\n- Added `mawk` and made that the default awk interpreter, just like on Debian.\n- Added `tr` program from the coreutils program as that is POSIX compliant, whereas busybox's was not.\n- Removed Docker files as I do not want to indicate that Docker is supported or even recommended. It is not and should not be in scope for this project.\n\n## Deprecated settings in 1.x\n\nA number of configuration settings are deprecated and will be removed in a next major version.\n\n- `ip_addr`: use `ip4_addr` instead\n- `ip_gateway`: use `ip4_gateway` instead\n- `ip_nameservers`: use `ip4_nameservers` instead\n- `ip_netmask`: use `ip4_netmask` instead\n- `try_again`: use `fail_action` instead\n- Only support the following `preset`s: `base`, `minimal`, `server`\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.8701171875,
          "content": "# Contributing to raspbian-ua-netinst\n\nThank you for your interest in making raspbian-ua-netinst better :+1:\n\nThere are currently 2 ways in which you can contribute:\n- [Reporting issues](#reporting-issues)\n- [Submitting Pull Requests](#submitting-pull-requests)\n\nThis document outlines how to best report issues you may encounter and the way we prefer pull requests.\n\n## Reporting issues\nFirst, search through the existing [issues](https://github.com/debian-pi/raspbian-ua-netinst/issues) to see whether your issue is already known. If it is, add your details to the existing report. The more details we have, the better the chance for a fix.\nAn existing issue may also provide a (temporary) workaround.\n\nIn order for us to help with an issue, it's useful if you provide as much detail as possible.\nThat starts with a clear descriptive title. It is likely that at any given time there are a number of issues open. A clear title helps us (and others) to easily locate a certain issue.\nThen provide the steps you took in order to accomplish a certain task. The following can be used as a template for it:\n\n1. What did you try to accomplish?\n2. What steps did you take in order to accomplish that?\n3. What did you expect to happen?\n4. What actually happened?\n\nFurthermore, it helps if you provide the configuration files you used, such as `installer-config.txt`. Make sure to remove/replace sensitive information, if present. The installer also creates a log file, which is either located in `/boot/` or when the installation finished, in `/var/log/`. If you can provide those, that helps too.\n\n## Submitting Pull Requests\nI'm changing the way branches are used to the way most GitHub repos work.  \nFrom now on, normal development happens on the 'master' branch. When a new release series is created, it is branched off of the master branch. Bug fixes should normally target the master branch. If useful, backports for release branches can then also be made.  \nThe v1.0.x branch was used for the v1.0.X releases, but should now be considered obsolete.\n\nWhen you want to create a pull request, the best way to do that is by creating a [topic branch](https://github.com/dchelimsky/rspec/wiki/topic-branches), branched off the target you wish to change, preferably with a name describing what the branch is about. When you're writing the code for your pull request, we prefer smaller (atomic) commits over 1 commit with a lot of 'unrelated' changes.\nEach commit should have a clear message saying what has changed. If you want to provide more context to your commit, ie the why, that's an excellent candidate for the second line of your commit message.\nAn example is the following commit: [Add filesystem packages so fsck can be run from initramfs.](https://github.com/debian-pi/raspbian-ua-netinst/commit/a7e80f0dba793cd38945b596a9fd4b3b843d7bbb)\n\nA pull request is generally reviewed according to the following rules:\n\n- What's the added value, in other words is there a (good) use case for it\n- Your change shouldn't have a negative effect on the rest of the code\n- It should not (needlessly) complicate the code\n- The code should be in line with the rest of the existing code, for example a boolean true is represented as a '1' (at least in the v1.x branches), like the `usbroot` configuration parameter.\n- It should not fundamentally change the way the installer works. At least not during the v1.x series. We don't know in what ways the installer is used currently, but we don't want to break those uses.\nSuch changes *could* be considered for a v2.x series, but there are no plans for that right now.\n\nNote that most, if not all, of us do this in our free time, so sometimes you get a quick response and in other times it may take longer. You should also be willing to update your code if one of the collaborators think it's needed.  \nWe assume that you've read GitHub's help page [regarding pull request](https://help.github.com/articles/using-pull-requests/).\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 0.7734375,
          "content": "# SPDX-License-Identifier: ISC\n\nISC License:\n\nCopyright (c) 2013 Toni Spets <toni.spets@iki.fi>\n\nPermission to use, copy, modify, and distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n \nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 22.072265625,
          "content": "# raspbian-ua-netinst\n\n- [Intro](#intro)\n- [Features](#features)\n- [Requirements](#requirements)\n- [Writing the installer to the SD card](#writing-the-installer-to-the-sd-card)\n- [Installing](#installing)\n- [Installer customization](#installer-customization)\n- [IP Networking](#ip-networking)\n- [Logging](#logging)\n- [First boot](#first-boot)\n- [Reinstalling or replacing an existing system](#reinstalling-or-replacing-an-existing-system)\n- [Reporting bugs and improving the installer](#reporting-bugs-and-improving-the-installer)\n- [Disclaimer](#disclaimer)\n\n## Intro\n\nThe minimal Raspbian unattended netinstaller for Raspberry Pi Model 1B to 3B+.\n\nThis project provides [Raspbian][1] power users the possibility to install a minimal base system unattended using latest Raspbian packages regardless when the installer was built.\n\nThe installer with default settings configures eth0 with DHCP to get Internet connectivity and completely wipes the SD card from any previous installation.\n\nThere are different kinds of \"presets\" that define the default packages that are going to be installed. Currently, the default one is called _server_ which installs only the essential base system packages including _NTP_ and _OpenSSH_ to provide a sane minimal base system that you can immediately after install ssh in and continue installing your software.\n\nOther presets include _minimal_ which has even less packages (no logging, no text editor, no cron) and _base_ which doesn't even have networking. You can customize the installed packages by adding a small configuration file to your SD card before booting up.\n\n## Features\n - completely unattended, you only need working Internet connection through the Ethernet port\n - DHCP and static ip configuration (DHCP is the default)\n - always installs the latest version of Raspbian\n - configurable default settings\n - extra configuration over HTTP(S) possible - gives unlimited flexibility\n - installation takes about **15 minutes** with fast internet/SDcard/USB device from power on to sshd running\n - can fit on 512MB SD card, but 1GB is more reasonable\n - default install includes fake-hwclock to save the current date and time on shutdown\n - default install includes NTP to keep the time up-to-date if a network connection is available.\n - /tmp is mounted as tmpfs to improve speed\n - no clutter included, you only get the bare essential packages\n - option to install root to USB drive\n\n## Requirements\n - a Raspberry Pi Model 1B to 3B+\n - SD card of at least 640MB or at least 128MB for USB root install (without customization)\n - working Ethernet with Internet connectivity\n\n## Writing the installer to the SD card\n### Obtaining installer files on Windows and Mac\nInstaller archive contains all firmware files and the installer.\n\nGo to [our latest release page](https://github.com/debian-pi/raspbian-ua-netinst/releases/latest) and download the .zip file.\n\nFormat your SD card as **FAT32** (MS-DOS on _Mac OS X_) and extract the installer files in.  \n**Note:** If you get an error saying it can't mount /dev/mmcblk0p1 on /boot then the most likely cause is that you're using exFAT instead of FAT32.\nTry formatting the SD card with this tool: https://www.sdcard.org/downloads/formatter_4/\n\n### Alternative method for Mac, writing image to SD card\nPrebuilt image is **64MB** uncompressed. It contains the same files as the .zip but is more convenient for Mac users.\n\nGo to [our latest release page](https://github.com/debian-pi/raspbian-ua-netinst/releases/latest) and download the .img.bz2 file.\n\nExtract the .img file from the archive with `bunzip2 raspbian-ua-netinst-<latest-version-number>.img.bz2`.  \nFind the _/dev/diskX_ device you want to write to using `diskutil list`. It will probably be 1 or 2.  \n\nTo flash your SD card on Mac:\n\n    diskutil unmountDisk /dev/diskX\n    sudo dd bs=1m if=/path/to/raspbian-ua-netinst-<latest-version-number>.img of=/dev/rdiskX\n    diskutil eject /dev/diskX\n\n_Note the **r** in the of=/dev/rdiskX part on the dd line which should speed up writing the image considerably._\n\n### SD card image for Linux\nPrebuilt image is **64MB** uncompressed. It contains the same files as the .zip but is more convenient for Linux users.\n\nGo to [our latest release page](https://github.com/debian-pi/raspbian-ua-netinst/releases/latest) and download the .img.xz file.\n\nTo flash your SD card on Linux:\n\n    xzcat /path/to/raspbian-ua-netinst-<latest-version-number>.img.xz > /dev/sdX\n\nReplace _/dev/sdX_ with the real path to your SD card.\n\n## Installing\nIn normal circumstances, you can just power on your Pi and cross your fingers.\n\nIf you don't have a display attached you can monitor the Ethernet card leds to guess activity. When it finally reboots after installing everything you will see them going out and on a few times when Raspbian configures it on boot.\n\nIf you do have a display, you can follow the progress and catch any possible errors in the default configuration or your own modifications.  \nIf you have a serial cable, then remove 'console=tty1' at then end of the `cmdline.txt` file.\n\n**Note:** During the installation you'll see various warning messages, like \"Warning: cannot read table of mounted file systems\" and \"dpkg: warning: ignoring pre-dependency problem!\". Those are expected and harmless.\n\n## Installer customization\nYou can use the installer _as is_ and get a minimal system installed which you can then use and customize to your needs.  \nBut you can also customize the installation process and the primary way to do that is through a file named _installer-config.txt_. When you've written the installer to a SD card, you'll see a file named _cmdline.txt_ and you create the _installer-config.txt_ file alongside that file.\nThe defaults for _installer-config.txt_ are displayed below. If you want one of those settings changed for your installation, you should **only** place that changed setting in the _installer-config.txt_ file. So if you want to have vim and aptitude installed by default, create a _installer-config.txt_ file with the following contents:\n```\npackages=vim,aptitude\n```\nand that's it! While most settings stand on their own, some settings influence each other. For example `rootfstype` is tightly linked to the other settings that start with `rootfs_`.  \nSo don't copy and paste the defaults from below!\n\nThe _installer-config.txt_ is read in at the beginning of the installation process, shortly followed by the file pointed to with `online_config`, if specified.\nThere is also another configuration file you can provide, _post-install.txt_, and you place that in the same directory as _installer-config.txt_.\nThe _post-install.txt_ is executed at the very end of the installation process and you can use it to tweak and finalize your automatic installation.  \nThe configuration files are read in as shell scripts, so you can abuse that fact if you so want to.\n\nThe format of the _installer-config.txt_ file and the current defaults:\n\n    preset=server             # possible values are 'base', 'minimal' and 'server'\n    packages=                 # comma separated list of extra packages\n    mirror=http://mirrordirector.raspbian.org/raspbian/\n    release=buster\n    init_system=systemd       # possible values are 'systemd', 'sysvinit' and 'runit'\n    hostname=pi\n    boot_volume_label=        # Sets the volume name of the boot partition. The volume name can be up to 11 characters\n                              # long. The label is used by most OSes (Windows, Mac OSX and Linux) to identify the\n                              # SD-card on the desktop and can be useful when using multiple SD-cards.\n    domainname=\n    rootpw=raspbian\n    root_ssh_pubkey=          # public SSH key for root; on Debian \"jessie\" and later the SSH password login will be disabled \n                              # for root if set; the public SSH key must be on a single line, enclosed in quotes\n    disable_root=             # set to 1 to disable root login (and password) altogether\n    username=                 # username of the user to create\n    userpw=                   # password to use for created user\n    user_ssh_pubkey=          # public SSH key for created user; the public SSH key must be on a single line, enclosed\n                              # in quotes\n    user_is_admin=            # set to 1 to install sudo and make the user a sudo user\n    cdebootstrap_cmdline=     # normally this line will be generated based on the (other) options you've set, but you can\n                              # specify your own. If it breaks, you get to keep all pieces.\n    bootsize=+128M            # /boot partition size in megabytes, provide it in the form '+<number>M' (without quotes)\n    bootoffset=8192           # position in sectors where the boot partition should start. Valid values are > 2048.\n                              # a bootoffset of 8192 is equal to 4MB and that should make for proper alignment\n    rootsize=                 # / partition size in megabytes, provide it in the form '+<number>M' (without quotes),\n                              # leave empty to use all free space\n    timeserver=time.nist.gov\n    timezone=Etc/UTC          # set to desired timezone (e.g. Europe/Ljubljana)\n    locales=                  # a space delimited list of locales that will be generated during install\n                              # (e.g. \"en_US.UTF-8 nl_NL sl_SI.UTF-8\")\n    system_default_locale=    # the default system locale to set (using the LANG environment variable)\n    disable_predictable_nin=1 # Disable Predictable Network Interface Names. Set to 0 if you want to use predictable\n                              # network interface names, which means if you use the same SD card on a different\n                              # RPi board, your network device might be named differently. This will result in the\n                              # board having no network connectivity.\n    ifname=eth0\n    ip4_addr=dhcp             # options are 'disable', 'dhcp', or an IPv4 address\n    ip4_prefixlength=0\n    ip4_gateway=0.0.0.0\n    ip4_nameservers=\n    ip6_addr=disable          # options are 'disable', 'auto', or an IPv6 address\n    ip6_prefixlength=0\n    ip6_gateway=auto          # options are 'auto', or an IPv6 address (which will only be applied if ip6_addr is a static address)\n    ip6_nameservers=auto      # options are 'auto', 'disable', or an IPv6 address\n    drivers_to_load=\n    online_config=            # URL to extra config that will be executed after installer-config.txt\n    usbroot=                  # set to 1 to install to first USB disk\n    cmdline=\"dwc_otg.lpm_enable=0 console=ttyAMA0,115200 kgdboc=ttyAMA0,115200 console=tty1 elevator=deadline\"\n    rootfstype=ext4\n    rootfs_mkfs_options=\n    rootfs_install_mount_options='noatime,data=writeback,nobarrier,noinit_itable'\n    rootfs_mount_options='errors=remount-ro,noatime'\n    final_action=reboot       # what to do at the end of install, one of poweroff / halt / reboot\n    hardware_versions=detect  # \"detect\" supports the install hardware only, set to \"1 2\" to produce an install that\n                              # supports both Pi1 and Pi2\n    hwrng_support=1           # install support for the ARM hardware random number generator. The default is\n                              # enabled (1) on all presets. Users requiring a `base` install are advised that\n                              # `hwrng_support=0` must be added in `installer-config.txt` if HWRNG support is\n                              # undesirable.\n    enable_watchdog=0         # loads up the hardware watchdog module and configures systemd to use it. Set to\n                              # \"1\" to enable this functionality.\n    enable_uart=0             # Set to \"1\" to enable the UART. Disabled by default.\n    gpu_mem=                  # specify the amount of RAM in MB that should be reserved for the GPU\n    fail_action=poweroff      # options are 'poweroff', 'reboot', 'halt' or 'shell'. This replaces the \n                              # old 'try_again' setting. Note that with 'reboot' it could result in\n                              # a boot loop if it consistently fails (at the same point)\n\nThe timeserver parameter is only used during installation for _rdate_ which is used as fallback when setting the time with `ntpdate` fails.  \n\nAvailable presets: _server_, _minimal_ and _base_. Presets set the `cdebootstrap_cmdline` variable.  \nHere's how those presets generally work (<XXX\\>='virtual package',[XXX]=optional):\n\n> base_packages=\"cpufrequtils,kmod,<kernel-package\\>,<init-system\\>,[rng-tools,]dosfstools,<root-fs-packages\\>\"\n\n> minimal_packages=\"fake-hwclock,ifupdown,net-tools,ntp,openssh-server,resolvconf[,rdnssd]\"\n\n> server_packages=\"vim-tiny,iputils-ping,wget,ca-certificates,rsyslog,cron,dialog,locales,less,man-db\"\n\n> server/default preset = \"--flavour=minimal --include=${base_packages},${minimal_packages},${server_packages}\"\n\n(If you build your own installer, which most won't need to, and the configuration files exist in the same directory as this `README.md`, it will be include in the installer image automatically.)\n\n### Bring your own files\nYou can have the installer place your custom configuration files (or any other file you wish to add) on the installed system during the installation. For this, you need to provide the necessary files in the `/config/files/` directory of your SD card (you may need to create this directory if it doesn't exist). The `/config/files/` directory is the root-point. It must have the same structure as inside the installed system. So, a file that you place on the SD card in `/config/files/etc/wpa_supplicant/wpa_supplicant.conf` will end up on the installed system as `/etc/wpa_supplicant/wpa_supplicant.conf`.\nEach file or directory that you wish to place on the target system must also be listed in a configuration file in the directory `/config` on your SD card. This allows you to specify the owner (and group) and the permissions of the file. An example file is provided with the installer (see `/config/my-files.list` for more information). ONLY files listed there are copied over to the installed system.\nTo have the installer actually copy the files to the target system, add the following command at an appropriate point in your `post-install.txt` file:\n```\ninstall_files my-files.list\n```\nwhere `my-files.list` is the name of the file containing the list of files.\nIf needed, you can call `install_files` multiple times with different list files.  \nPlease be aware that some restrictions may apply to the sum of the file sizes. If you wish to supply large files in this manner you may need to adjust the value of the `bootsize` parameter.\n\n### Custom installer script\n\nIt is possible to replace the installer script completely, without rebuilding the installer image. To do this, place a custom `rcS` file in the config directory of your SD card. The installer script will check this location and run this script instead of itself. Take great care when doing this, as it is intended to be used for development purposes.\n\nShould you still choose to go this route, please use the original [rcs](https://github.com/debian-pi/raspbian-ua-netinst/blob/master/scripts/etc/init.d/rcS) file as a starting point.\n\n## IP Networking\n\nThe installer supports both IPv4 and IPv6 networking, although the default configuration is to use only IPv4. Networking can be configured using the 'ip4' and 'ip6'\noptions in the installer-config.txt file (details below), and the configuration will be replicated into the installed system.\n\nIf the installer cannot configure at least one IP address (either IPv4 or IPv6) it will abort, as networking is required to perform the installation.\n\n### IPv4\n\nThe default for IPv4 is to use DHCP to obtain an address/prefix, default gateway, and DNS resolver(s). The installer can be configured in three IPv4 modes:\n\n- DHCP\n\n  Set 'ip4_addr' to 'dhcp'. The remaining 'ip4' configuration options will be ignored if set.\n\n- Static\n\n  Set 'ip4_addr' to an IPv4 address, and 'ip4_prefixlength' to the appropriate value for your network (the most common prefix length is 24, which corresponds to\n  a netmask of 255.255.255.0). Set 'ip4_gateway' to the address of the default gateway, and 'ip4_nameservers' to the address of the DNS resolver which should be used (if\n  there are multiple DNS resolvers, their addresses can be included in this option, separated by spaces).\n\n- Disabled\n\n  Set 'ip4_addr' to 'disable'. The remaining 'ip4' configuration options will be ignored if set.\n\n### IPv6\n\nThe default for IPv6 is to disable its use; even if the network advertises IPv6 information, it will not be used. Note that DHCPv6 is *not*\nsupported, as there is no suitable DHCPv6 client available for use in the installer environment. If the network indicates that DHCPv6 is required\nfor addressing or any other network information, the installer will not use IPv6. The installed system can use DHCPv6, but the installer\nis unable to configure it in that mode.\n\nFor those unfamiliar with IPv6 networking, there are some significant differences from IPv4, in addition to the size of addresses. Most importantly,\nIPv6 networks can provide automatic addressing, automatic gateway discovery, and automatic DNS resolver discovery, but these can be provided\nindependently. As a result, configuration of the installer for IPv6 is done in three parts.\n\nThe simplest configuration is when the network supports SLAAC and RDNSS; this is roughly equivalent to IPv4 DHCP, and the installer will be\nable to automatically assign an address, gateway, and get DNS resolver address(es).\n\n#### Addressing\n\nThe installer can be configured in three modes:\n\n- Automatic\n\n  Set 'ip6_addr' to 'auto'. 'ip6_prefixlength' will be ignored if set. In this mode, the kernel will use incoming Router Advertisements\n  to determine network prefix information, and will use SLAAC (RFC 4862 - IPv6 Stateless Address Autoconfiguration) to generate an address.\n  If no RAs are received, or they do not contain on-link prefixes, the kernel will be unable to generate an address, and IPv6 support will be\n  disabled.\n\n- Static\n\n  Set 'ip6_addr' to an IPv6 address, and 'ip6_prefixlength' to the appropriate value for your network (the most common prefix length is 64). In\n  this mode any network prefixes received in RAs will be ignored.\n\n- Disabled\n\n  Set 'ip6_addr' to 'disable'. The remaining 'ip6' configuration options will be ignored if set.\n\n#### Gateways\n\nIPv6 networks nearly always distribute gateway (router) addresses via Router Advertisements, as IPv6 routers typically use link-local addresses\nwhich can be dynamically changed. However, the installer does support static configuration. There are two configuration modes:\n\n- Automatic\n\n  Set 'ip6_gateway' to 'auto'. In this mode the kernel will determine gateway(s) to use based on Router Advertisements it receives.\n\n- Static\n\n  Set 'ip6_gateway' to an IPv6 address. In this mode any gateway addresses received in RAs will be ignored.\n\n#### DNS Resolvers\n\nSome IPv6 networks distribute DNS resolver information in Router Advertisements, using RDNSS (RFC 6106 - IPv6 Router Advertisment Options for\nDNS Configuration); others require static configuration, or do not provide DNS resolution via IPv6. The installer can be configured in three\nmodes:\n\n- Automatic\n\n  Set 'ip6_nameservers' to 'auto'. In this mode the system will determine DNS resolver(s) to use based on Router Advertisements it receives.\n  Note that this mode requires the 'rdnssd' package, which provides a daemon to process the RDNSS options in the RAs, so this package will be\n  added to the installed system.\n\n- Static\n\n  Set 'ip6_nameservers' to the address of the DNS resolver which should be used (if there are multiple DNS resolvers, their addresses\n  can be included in this option, separated by spaces).\n\n- Disabled\n\n  Set 'ip6_nameservers' to 'disable'. This is only necessary to stop the installer from installing the 'rdnssd' package on networks which\n  do not provide DNS resolution over IPv6.\n\n## Logging\nThe output of the installation process is now also logged to file.  \nWhen the installation completes successfully, the logfile is moved to /var/log/raspbian-ua-netinst.log on the installed system.  \nWhen an error occurs during install, the logfile is moved to the sd card, which gets normally mounted on /boot/ and will be named raspbian-ua-netinst-<datetimestamp\\>.log\n\n## First boot\nThe system is almost completely unconfigured on first boot. Here are some tasks you most definitely want to do on first boot.\n\nThe default **root** password is **raspbian**.\n\n> Set new root password: `passwd`  (can also be set during installation using **rootpw** in [installer-config.txt](#installer-customization))  \n\nThe latest kernel and firmware packages are now automatically installed during the unattended installation process.\nWhen you need a kernel module that isn't loaded by default, you will still have to configure that manually.\n\n> Optional: `apt-get install raspi-copies-and-fills` for improved memory management performance.  \n> Optional: Create a swap file with `dd if=/dev/zero of=/swap bs=1M count=512 && mkswap /swap && chmod 600 /swap` (example is 512MB) and enable it on boot by appending `/swap none swap sw 0 0` to `/etc/fstab`.  \n\n## Reinstalling or replacing an existing system\nIf you want to reinstall with the same settings you did your first install you can just move the original _config.txt_ back and reboot. Depending on the hardware you want to reinstall on (Raspberry Pi **1** or **2**/**3**), make sure you still have _kernel-rpi1_install.img_ / _kernel-rpi2_install.img_ and _installer-rpi.cpio.gz_ in your _/boot_ partition. If you are replacing your existing system which was not installed using this method, make sure you copy those files in and the installer _config.txt_ from the original image.\n\n    mv /boot/config-reinstall.txt /boot/config.txt\n    reboot\n\n**Remember to backup all your data and original config.txt before doing this!**\n\n## Reporting bugs and improving the installer\nWhen you encounter issues, have wishes or have code or documentation improvements, we'd like to hear from you!\nWe've actually written a document on how to best do this and you can find it [here](CONTRIBUTING.md).\n\n## Disclaimer\nWe take no responsibility for ANY data loss. You will be flashing your SD card so it should be very clear to you what you are doing and will lose all your data on the card. Same goes for reinstallation.\n\nSee LICENSE for license information.\n\n  [1]: http://www.raspbian.org/ \"Raspbian\"\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 25.15234375,
          "content": "#!/usr/bin/env bash\n\nset -e\n\n# configuration\nKERNEL_VERSION_RPI1=4.9.0-6-rpi\nKERNEL_VERSION_RPI2=4.9.0-6-rpi2\n\nINSTALL_MODULES=(\"kernel/fs/btrfs/btrfs.ko\")\nINSTALL_MODULES+=(\"kernel/drivers/scsi/sg.ko\")\nINSTALL_MODULES+=(\"kernel/drivers/char/hw_random/bcm2835-rng.ko\")\nINSTALL_MODULES+=(\"kernel/net/ipv6/ipv6.ko\")\nINSTALL_MODULES+=(\"kernel/net/wireless/cfg80211.ko\")\n\n# checks if first parameter is contained in the array passed as the second parameter\n#   use: contains_element \"search_for\" \"${some_array[@]}\" || do_if_not_found\nfunction contains_element {\n    local elem\n    for elem in \"${@:2}\"; do [[ \"${elem}\" == \"$1\" ]] && return 0; done\n    return 1\n}\n\n# expects an array with kernel modules as a parameter, checks each module for dependencies\n# and if a dependency isn't already in the $modules array, adds it to it (through a temporary\n# local array).\n# in addition sets the global $new_count variable to the number of dependencies added, so\n# that the newly added dependencies can be checked as well\n#   use: check_dependencies \"${modules[@]:${index}}\"\nfunction check_dependencies {\n    # collect the parameters into an array\n    mods=(\"${@}\")\n    # temp array to hold the newly found dependencies\n    local -a new_found\n    # temp array to hold the found dependencies for a single module\n    local -a deps\n    local mod\n    local dep\n    # iterate over the passed modules\n    for mod in \"${mods[@]}\"; do\n        # find the modules dependencies, convert into array\n        deps=($(grep \"^${mod}\" \"${depmod_file}\" | cut -d':' -f2))\n        # iterate over the found dependencies\n        for dep in \"${deps[@]}\"; do\n            # check if the dependency is in $modules, if not, add to temp array\n            contains_element \"${dep}\" \"${modules[@]}\" || new_found+=(\"${dep}\")\n        done\n    done\n    # add the newly found dependencies to the end of the $modules array\n    modules+=(\"${new_found[@]}\")\n    # set the global variable to the number of newly found dependencies\n    new_count=${#new_found[@]}\n}\n\n# creates the file passed as an argument and sets permissions\nfunction touch_tempfile {\n    [[ -z \"${1}\" ]] && return 1\n    touch \"${1}\" && chmod 600 \"${1}\"\n    echo \"${1}\"\n}\n\n# creates a temporary file and returns (echos) its filename\n#   the function checks for different commands and uses the appropriate one\n#   it will fallback to creating a file in /tmp\nfunction create_tempfile {\n    local tmp_ptrn\n    tmp_ptrn=\"/tmp/$(basename \"${0}\").${$}\"\n    if type mktemp &> /dev/null; then\n        mktemp 2> /dev/null || \\\n            mktemp -t raspbian-ua-netinst 2> /dev/null || \\\n            touch_tempfile \"${tmp_ptrn}\"\n    else\n        if type tempfile &> /dev/null; then\n            tempfile\n        else\n            touch_tempfile \"${tmp_ptrn}\"\n        fi\n    fi\n}\n\n# copies kernel modules into the rootfs\n#   use: add_kernel_modules \"rpi-target-version\"\nfunction add_kernel_modules {\n    local KERNEL_VERSION=\"\"\n\n    case \"$1\" in\n        \"rpi1\")\n            KERNEL_VERSION=$KERNEL_VERSION_RPI1\n            ;;\n        \"rpi2\")\n            KERNEL_VERSION=$KERNEL_VERSION_RPI2\n            ;;\n        *)\n            echo \"Invalid parameter to 'add_kernel_modules' function!\"\n            exit 1\n    esac\n\n    # copy builtin modules\n    mkdir -p rootfs/lib/modules/${KERNEL_VERSION}/\n    cp -a tmp/lib/modules/${KERNEL_VERSION}/modules.{builtin,order} rootfs/lib/modules/${KERNEL_VERSION}/\n\n    # copy drivers\n    mkdir -p rootfs/lib/modules/$KERNEL_VERSION/kernel/drivers/net/\n    cp -r tmp/lib/modules/$KERNEL_VERSION/kernel/drivers/net/{wireless,usb} rootfs/lib/modules/$KERNEL_VERSION/kernel/drivers/net/\n\n    # calculate module dependencies\n    depmod_file=$(create_tempfile)\n    /sbin/depmod -nab tmp ${KERNEL_VERSION} > \"${depmod_file}\"\n\n    modules=(\"${INSTALL_MODULES[@]}\")\n\n    # new_count contains the number of new elements in the $modules array for each iteration\n    new_count=${#modules[@]}\n    # repeat the hunt for dependencies until no new ones are found (the loop takes care\n    # of finding nested dependencies)\n    until [ \"${new_count}\" == 0 ]; do\n        # check the dependencies for the modules in the last $new_count elements\n        check_dependencies \"${modules[@]:$((${#modules[@]}-${new_count}))}\"\n    done\n\n    # do some cleanup\n    rm -f \"${depmod_file}\"\n\n    # copy the needed kernel modules to the rootfs (create directories as needed)\n    srcdir=\"tmp/lib/modules/${KERNEL_VERSION}\"\n    dstdir=\"rootfs/lib/modules/${KERNEL_VERSION}\"\n    for module in \"${modules[@]}\"; do\n        mkdir -p \"${dstdir}/$(dirname \"${module}\")\"\n        cp -a \"${srcdir}/${module}\" \"${dstdir}/$(dirname \"${module}\")\"\n    done\n\n    /sbin/depmod -a -b rootfs ${KERNEL_VERSION}\n}\n\nfunction create_cpio {\n    local INITRAMFS=\"$1\"\n    \n    # initialize rootfs\n    rm -rf rootfs\n    mkdir -p rootfs\n    \n    # create all the directories needed to copy the various components into place\n    mkdir -p rootfs/bin/\n    mkdir -p rootfs/lib/arm-linux-gnueabihf/\n    mkdir -p rootfs/lib/lsb/init-functions.d/\n    mkdir -p rootfs/etc/{alternatives,cron.daily,default,init,init.d,iproute2,ld.so.conf.d,logrotate.d,network/if-up.d/,ssl/certs}\n    mkdir -p rootfs/etc/dpkg/dpkg.cfg.d/\n    mkdir -p rootfs/etc/network/{if-down.d,if-post-down.d,if-pre-up.d,if-up.d,interfaces.d}\n    mkdir -p rootfs/lib/ifupdown/\n    mkdir -p rootfs/lib/lsb/init-functions.d/\n    mkdir -p rootfs/sbin/\n    mkdir -p rootfs/usr/bin/\n    mkdir -p rootfs/usr/lib/mime/packages/\n    mkdir -p rootfs/usr/lib/engines-1.1/\n    mkdir -p rootfs/usr/lib/{ssl,tar,tc}\n    mkdir -p rootfs/usr/sbin/\n    mkdir -p rootfs/usr/share/{distro-info,dpkg,keyrings,libc-bin}\n    mkdir -p rootfs/var/lib/dpkg/{alternatives,info,parts,updates}\n    mkdir -p rootfs/var/lib/ntpdate\n    mkdir -p rootfs/var/log/\n    mkdir -p rootfs/var/run/\n\n    # add kernel modules\n    add_kernel_modules \"rpi1\"\n    add_kernel_modules \"rpi2\"\n\n    # install scripts\n    cp -r scripts/* rootfs/\n\n    # update version and date\n    # idea for '--exact-match' taken from https://stackoverflow.com/a/1474161\n    if [ \"$(git describe --exact-match '@{0}' 2>/dev/null)\" ] ; then\n        sed -i \"s/__VERSION__/Release: $(git describe --exact-match '@{0}')/\" rootfs/etc/init.d/rcS\n    else\n        # Since git 2.25 (Q1 2020), the value of pretty can also be replaced with 'reference', thus \"--pretty=reference\"\n        # See https://stackoverflow.com/a/59380120 for details\n        # and https://stackoverflow.com/a/2705678 for escaping sed statement (it failed on '/' in commit msg)\n        ESCAPED_REVISION=$(printf '%s\\n' \"Revision: git~$(git show -s --pretty='format:%C(auto)%h (%s, %ad)' --date=short '@{0}')\" | sed -e 's/[\\/&]/\\\\&/g')\n        sed -i \"s/__VERSION__/$ESCAPED_REVISION/\" rootfs/etc/init.d/rcS\n    fi\n    sed -i \"s/__DATE__/$(date --rfc-3339=s)/\" rootfs/etc/init.d/rcS\n\n    # add firmware for wireless chipset (RPi 3 and Zero W)\n    mkdir -p rootfs/lib/firmware/brcm\n    cp tmp/lib/firmware/brcm/brcmfmac43430-sdio.{bin,txt} rootfs/lib/firmware/brcm\n\n    # btrfs-progs components\n    cp tmp/bin/mkfs.btrfs rootfs/bin/\n\n    # busybox components\n    cp tmp/bin/busybox rootfs/bin\n    ln -s bin/busybox rootfs/init\n\n    # ca-certificates-udeb components\n    cp tmp/etc/ssl/certs/* rootfs/etc/ssl/certs/\n    cd rootfs/usr/lib/ssl\n    ln -s ../../../etc/ssl/certs certs \n    cd ../../../..\n\n    # cdebootstrap components\n    cp -r tmp/usr/share/cdebootstrap rootfs/usr/share/\n    cp tmp/usr/bin/cdebootstrap rootfs/usr/bin/\n\n    # coreutils components\n    cp tmp/usr/bin/tr rootfs/usr/bin/\n\n    # curl components\n    cp tmp/usr/bin/curl rootfs/usr/bin/\n\n    # dash components\n    cp tmp/bin/dash rootfs/bin/\n    cd rootfs/bin\n    ln -s dash sh\n    cd ../..\n\n    # distro-info-data components\n    cp tmp/usr/share/distro-info/debian.csv rootfs/usr/share/distro-info/\n\n    # dosfstools components\n    cp tmp/sbin/fatlabel rootfs/sbin/\n    cp tmp/sbin/fsck.fat rootfs/sbin/\n    cp tmp/sbin/mkfs.fat rootfs/sbin/\n    cd rootfs/sbin\n    ln -s fatlabel dosfslabel\n    ln -s fsck.fat dosfsck\n    ln -s fsck.fat fsck.msdos\n    ln -s fsck.fat fsck.vfat\n    ln -s mkfs.fat mkdosfs\n    ln -s mkfs.fat mkfs.msdos\n    ln -s mkfs.fat mkfs.vfat\n    cd ../..\n\n    # dpkg components\n    cp tmp/etc/alternatives/README rootfs/etc/alternatives/\n    cp tmp/etc/cron.daily/dpkg rootfs/etc/cron.daily/\n    cp tmp/etc/dpkg/dpkg.cfg rootfs/etc/dpkg/\n    cp tmp/etc/logrotate.d/dpkg rootfs/etc/logrotate.d/\n    cp tmp/sbin/start-stop-daemon rootfs/sbin/\n    cp tmp/usr/bin/dpkg rootfs/usr/bin/\n    cp tmp/usr/bin/dpkg-deb rootfs/usr/bin/\n    cp tmp/usr/bin/dpkg-divert rootfs/usr/bin/\n    cp tmp/usr/bin/dpkg-maintscript-helper rootfs/usr/bin/\n    cp tmp/usr/bin/dpkg-query rootfs/usr/bin/\n    cp tmp/usr/bin/dpkg-split rootfs/usr/bin/\n    cp tmp/usr/bin/dpkg-statoverride rootfs/usr/bin/\n    cp tmp/usr/bin/dpkg-trigger rootfs/usr/bin/\n    cp tmp/usr/bin/update-alternatives rootfs/usr/bin/\n    cp tmp/usr/share/dpkg/abitable rootfs/usr/share/dpkg/\n    cp tmp/usr/share/dpkg/cputable rootfs/usr/share/dpkg/\n    cp tmp/usr/share/dpkg/ostable rootfs/usr/share/dpkg/\n    cp tmp/usr/share/dpkg/tupletable rootfs/usr/share/dpkg/\n    cd rootfs/usr/sbin\n    ln -s ../bin/dpkg-divert dpkg-divert\n    ln -s ../bin/dpkg-statoverride dpkg-statoverride\n    ln -s ../bin/update-alternatives update-alternatives\n    cd ../../..\n    touch rootfs/var/lib/dpkg/status\n\n    # e2fsprogs components\n    cp tmp/etc/mke2fs.conf rootfs/etc/\n    cp tmp/sbin/badblocks rootfs/sbin/\n    cp tmp/sbin/debugfs rootfs/sbin/\n    cp tmp/sbin/dumpe2fs rootfs/sbin/\n    cp tmp/sbin/e2fsck rootfs/sbin/\n    cp tmp/sbin/e2image rootfs/sbin/\n    cp tmp/sbin/e2undo rootfs/sbin/\n    cp tmp/sbin/logsave rootfs/sbin/\n    cp tmp/sbin/mke2fs rootfs/sbin/\n    cp tmp/sbin/resize2fs rootfs/sbin/\n    cp tmp/sbin/tune2fs rootfs/sbin/\n    cp tmp/usr/bin/chattr rootfs/usr/bin/\n    cp tmp/usr/bin/lsattr rootfs/usr/bin/\n    cp tmp/usr/sbin/e2freefrag rootfs/usr/sbin/\n    cp tmp/usr/sbin/e4defrag rootfs/usr/sbin/\n    cp tmp/usr/sbin/filefrag rootfs/usr/sbin/\n    cp tmp/usr/sbin/mklost+found rootfs/usr/sbin/\n    cd rootfs/sbin\n    ln -s tune2fs e2lablel\n    ln -s e2fsck fsck.ext2\n    ln -s e2fsck fsck.ext3\n    ln -s e2fsck fsck.ext4\n    ln -s e2fsck fsck.ext4dev\n    ln -s mke2fs mkfs.ext2\n    ln -s mke2fs mkfs.ext3\n    ln -s mke2fs mkfs.ext4\n    ln -s mke2fs mkfs.ext4dev\n    cd ../..\n\n    # f2fs-tools components\n    cp tmp/sbin/mkfs.f2fs rootfs/sbin/\n\n    # fdisk components\n    cp tmp/sbin/fdisk rootfs/sbin/\n\n    # gpgv components\n    cp tmp/usr/bin/gpgv rootfs/usr/bin/\n\n    # ifupdown components\n    cp tmp/etc/default/networking rootfs/etc/default/\n    cp tmp/etc/init.d/networking rootfs/etc/init.d/\n    cp tmp/lib/ifupdown/settle-dad.sh rootfs/lib/ifupdown/\n    cp tmp/lib/ifupdown/wait-for-ll6.sh rootfs/lib/ifupdown/\n    cp tmp/lib/ifupdown/wait-online.sh rootfs/lib/ifupdown/\n    cp tmp/sbin/ifup rootfs/sbin/\n    cd rootfs/sbin\n    ln -s ifup ifdown\n    ln -s ifup ifquery\n    cd ../..\n\n    # iproute2 components\n    cp tmp/bin/ip rootfs/bin/\n    cp tmp/bin/ss rootfs/bin/\n    cp tmp/etc/iproute2/ematch_map rootfs/etc/iproute2/\n    cp tmp/etc/iproute2/group rootfs/etc/iproute2/\n    cp tmp/etc/iproute2/rt_dsfield rootfs/etc/iproute2/\n    cp tmp/etc/iproute2/rt_protos rootfs/etc/iproute2/\n    cp tmp/etc/iproute2/rt_realms rootfs/etc/iproute2/\n    cp tmp/etc/iproute2/rt_scopes rootfs/etc/iproute2/\n    cp tmp/etc/iproute2/rt_tables rootfs/etc/iproute2/\n    cp tmp/sbin/bridge rootfs/sbin/\n    cp tmp/sbin/rtacct rootfs/sbin/\n    cp tmp/sbin/rtmon rootfs/sbin/\n    cp tmp/sbin/tc rootfs/sbin/\n    cd rootfs/sbin\n    ln -s ../bin/ip ip\n    cd ../..\n    cp tmp/usr/bin/lnstat rootfs/usr/bin/\n    cp tmp/usr/bin/nstat rootfs/usr/bin/\n    cp tmp/usr/bin/routef rootfs/usr/bin/\n    cp tmp/usr/bin/routel rootfs/usr/bin/\n    cd rootfs/usr/bin\n    ln -s lnstat ctstat\n    ln -s lnstat rtstat\n    cd ../../..\n    cp tmp/usr/lib/tc/experimental.dist rootfs/usr/lib/tc\n    cp tmp/usr/lib/tc/m_xt.so rootfs/usr/lib/tc\n    cp tmp/usr/lib/tc/normal.dist rootfs/usr/lib/tc\n    cp tmp/usr/lib/tc/pareto.dist rootfs/usr/lib/tc\n    cp tmp/usr/lib/tc/paretonormal.dist rootfs/usr/lib/tc\n    cp tmp/usr/lib/tc/q_atm.so rootfs/usr/lib/tc\n    cd rootfs/usr/lib/tc\n    ln -s m_xt.so m_ipt.so\n    cd ../../../..\n    cp tmp/usr/sbin/arpd rootfs/usr/sbin/\n\n    # lsb-base components\n    cp tmp/lib/lsb/init-functions rootfs/lib/lsb/\n    cp tmp/lib/lsb/init-functions.d/20-left-info-blocks rootfs/lib/lsb/init-functions.d/\n\n    # mawk components\n    cp tmp/usr/bin/mawk rootfs/usr/bin/\n    cd rootfs/usr/bin\n    ln -s mawk awk\n    cd ../../..\n\n    # ndisc6 components\n    cp tmp/bin/rdisc6 rootfs/bin\n\n    # netbase components\n    cp tmp/etc/protocols rootfs/etc/\n    cp tmp/etc/rpc rootfs/etc/\n    cp tmp/etc/services rootfs/etc/\n\n    # ntpdate components\n    cp tmp/etc/default/ntpdate rootfs/etc/default/\n    # don't use /etc/ntp.conf since we don't have it\n    sed -i s/NTPDATE_USE_NTP_CONF=yes/NTPDATE_USE_NTP_CONF=no/ rootfs/etc/default/ntpdate\n    cp tmp/usr/sbin/ntpdate rootfs/usr/sbin/\n    cp tmp/usr/sbin/ntpdate-debian rootfs/usr/sbin/\n\n    # raspbian-archive-keyring components\n    cp tmp/usr/share/keyrings/raspbian-archive-keyring.gpg rootfs/usr/share/keyrings/\n\n    # rng-tools components\n    cp tmp/usr/bin/rngtest rootfs/usr/bin/\n    cp tmp/usr/sbin/rngd rootfs/usr/sbin/\n    cp tmp/etc/default/rng-tools rootfs/etc/default/\n    cp tmp/etc/init.d/rng-tools rootfs/etc/init.d/\n\n    # tar components\n    cp tmp/bin/tar rootfs/bin/\n    cp tmp/etc/rmt rootfs/etc/\n    cp tmp/usr/lib/mime/packages/tar rootfs/usr/lib/mime/packages/\n    cp tmp/usr/sbin/rmt-tar rootfs/usr/sbin/\n    cp tmp/usr/sbin/tarcat rootfs/usr/sbin/\n\n    # util-linux components\n    cp tmp/sbin/blkid rootfs/sbin/\n    cp tmp/sbin/blockdev rootfs/sbin/\n    cp tmp/sbin/fsck rootfs/sbin/\n    cp tmp/sbin/mkswap rootfs/sbin/\n    cp tmp/sbin/swaplabel rootfs/sbin/\n\n    # wpa_supplicant components\n    cp tmp/sbin/wpa_supplicant rootfs/sbin/wpa_supplicant\n    cp -r tmp/etc/wpa_supplicant rootfs/etc/wpa_supplicant\n\n    # libacl1 components\n    cp tmp/usr/lib/*/libacl.so.1.* rootfs/usr/lib/libacl.so.1\n\n    # libatm1 components\n    cp tmp/lib/*/libatm.so.1.* rootfs/lib/libatm.so.1\n\n    # libattr1 components\n    cp tmp/usr/lib/*/libattr.so.1.* rootfs/usr/lib/libattr.so.1\n\n    # libaudit-common components\n    cp tmp/etc/libaudit.conf rootfs/etc/\n\n    # libaudit1 components\n    cp tmp/lib/*/libaudit.so.1.* rootfs/lib/libaudit.so.1\n\n    # libblkid1 components\n    cp tmp/lib/*/libblkid.so.1.* rootfs/lib/libblkid.so.1\n\n    # libbrotli1 components\n    cp tmp/usr/lib/*/libbrotlidec.so.1.* rootfs/usr/lib/libbrotlidec.so.1\n\n    # libbz2-1.0 components\n    cp tmp/lib/*/libbz2.so.1.0.* rootfs/lib/libbz2.so.1.0\n\n    # libc-bin components\n    cp tmp/etc/default/nss rootfs/etc/default/\n    cp tmp/etc/ld.so.conf.d/libc.conf rootfs/etc/ld.so.conf.d/\n    cp tmp/etc/bindresvport.blacklist rootfs/etc/\n    cp tmp/etc/gai.conf rootfs/etc/\n    cp tmp/etc/ld.so.conf rootfs/etc/\n    cp tmp/sbin/ldconfig rootfs/sbin/\n    cp tmp/usr/bin/catchsegv rootfs/usr/bin/\n    cp tmp/usr/bin/getconf rootfs/usr/bin/\n    cp tmp/usr/bin/getent rootfs/usr/bin/\n    cp tmp/usr/bin/iconv rootfs/usr/bin/\n    cp tmp/usr/bin/ldd rootfs/usr/bin/\n    cp tmp/usr/bin/locale rootfs/usr/bin/\n    cp tmp/usr/bin/localedef rootfs/usr/bin/\n    cp tmp/usr/bin/pldd rootfs/usr/bin/\n    cp tmp/usr/bin/tzselect rootfs/usr/bin/\n    cp tmp/usr/bin/zdump rootfs/usr/bin/\n    # lib/locale ?\n    cp tmp/usr/sbin/iconvconfig rootfs/usr/sbin/\n    cp tmp/usr/sbin/zic rootfs/usr/sbin/\n    cp tmp/usr/share/libc-bin/nsswitch.conf rootfs/usr/share/libc-bin/\n\n    # libc6 components\n    cp tmp/lib/*/ld-*.so rootfs/lib/ld-linux-armhf.so.3\n    # some executables require the dynamic linker to be found\n    # at this path, so leave a symlink there\n    ln -s /lib/ld-linux-armhf.so.3 rootfs/lib/arm-linux-gnueabihf/ld-linux.so.3\n    cp tmp/lib/*/libanl-*.so rootfs/lib/libanl.so.1\n    cp tmp/lib/*/libBrokenLocale-*.so rootfs/lib/libBrokenLocale.so.1\n    cp tmp/lib/*/libc-*.so rootfs/lib/libc.so.6\n    cp tmp/lib/*/libcrypt-*.so rootfs/lib/libcrypt.so.1\n    cp tmp/lib/*/libdl-*.so rootfs/lib/libdl.so.2\n    cp tmp/lib/*/libm-*.so  rootfs/lib/libm.so.6\n    cp tmp/lib/*/libmemusage.so rootfs/lib/\n    cp tmp/lib/*/libnsl-*.so rootfs/lib/libnsl.so.1\n    cp tmp/lib/*/libnss_compat-*.so rootfs/lib/libnss_compat.so.2\n    cp tmp/lib/*/libnss_dns-*.so rootfs/lib/libnss_dns.so.2\n    cp tmp/lib/*/libnss_files-*.so rootfs/lib/libnss_files.so.2\n    cp tmp/lib/*/libnss_hesiod-*.so rootfs/lib/libnss_hesiod.so.2\n    cp tmp/lib/*/libnss_nis-*.so rootfs/lib/libnss_nis.so.2\n    cp tmp/lib/*/libnss_nisplus-*.so rootfs/lib/libnss_nisplus.so.2\n    cp tmp/lib/*/libpcprofile.so rootfs/lib/\n    cp tmp/lib/*/libpthread-*.so rootfs/lib/libpthread.so.0\n    cp tmp/lib/*/libresolv-*.so rootfs/lib/libresolv.so.2\n    cp tmp/lib/*/librt-*.so rootfs/lib/librt.so.1\n    cp tmp/lib/*/libSegFault.so rootfs/lib/\n    cp tmp/lib/*/libthread_db-*.so rootfs/lib/libthread_db.so.1\n    cp tmp/lib/*/libutil-*.so rootfs/lib/libutil.so.1\n\n    # libcap2 components\n    cp tmp/lib/*/libcap.so.2.* rootfs/lib/libcap.so.2\n\n    # libcom-err2 components\n    cp tmp/lib/*/libcom_err.so.2.* rootfs/lib/libcom_err.so.2\n\n    # libcurl3-gnutls components\n    cp tmp/usr/lib/*/libcurl-gnutls.so.4.* rootfs/usr/lib/libcurl-gnutls.so.4\n    # libcurl-gnutls.so.3 is a symlink to .4\n    cd rootfs/usr/lib\n    ln -s libcurl-gnutls.so.4 libcurl-gnutls.so.3\n    cd ../../..\n\n    # libcurl4 components\n    cp tmp/usr/lib/*/libcurl.so.4.* rootfs/usr/lib/libcurl.so.4\n\n    # libdb5.3 components\n    cp tmp/usr/lib/*/libdb-5.3.so rootfs/usr/lib/libdb5.3.so\n\n    # libdbus-1-3 components\n    cp tmp/lib/*/libdbus-1.so.3 rootfs/lib/libdbus-1.so.3\n    cp tmp/lib/*/libdl.so.2 rootfs/lib/libdl.so.2\n\n    # libdebian-installer4 components\n    cp tmp/usr/lib/*/libdebian-installer.so.4.* rootfs/usr/lib/libdebian-installer.so.4\n\n    # libdebian-installer-extra4 components\n    cp tmp/usr/lib/*/libdebian-installer-extra.so.4.* rootfs/usr/lib/libdebian-installer-extra.so.4\n\n    # libelf1 components\n    cp tmp/usr/lib/*/libelf-0.*.so rootfs/usr/lib/libelf.so.1\n\n    # libext2fs2 components\n    cp tmp/lib/*/libe2p.so.2.* rootfs/lib/libe2p.so.2\n    cp tmp/lib/*/libext2fs.so.2.*  rootfs/lib/libext2fs.so.2\n\n    # libf2fs5 components\n    cp tmp/lib/*/libf2fs.so.5  rootfs/lib/\n\n    # libfdisk1 components\n    cp tmp/lib/*/libfdisk.so.1.* rootfs/lib/libfdisk.so.1\n\n    # libffi6 components\n    cp tmp/usr/lib/*/libffi.so.6.* rootfs/usr/lib/libffi.so.6\n\n    # libgcc1 components\n    cp tmp/lib/*/libgcc_s.so.1 rootfs/lib/\n    cp tmp/lib/*/librt.so.1 rootfs/lib/\n\n    # libgcrypt20 components\n    cp tmp/lib/*/libgcrypt.so.20.* rootfs/lib/libgcrypt.so.20\n\n    # libgmp10 components\n    cp tmp/usr/lib/*/libgmp.so.10.* rootfs/usr/lib/libgmp.so.10\n\n    # libgnutls30 components\n    cp tmp/usr/lib/*/libgnutls.so.30.* rootfs/usr/lib/libgnutls.so.30\n\n    # libgpg-error0 components\n    cp tmp/lib/*/libgpg-error.so.0.* rootfs/lib/libgpg-error.so.0\n\n    # libgssapi-krb5-2 components\n    cp tmp/usr/lib/*/libgssapi_krb5.so.2.* rootfs/usr/lib/libgssapi_krb5.so.2\n\n    # libhogweed4 components\n    cp tmp/usr/lib/*/libhogweed.so.4.* rootfs/usr/lib/libhogweed.so.4\n\n    # libidn2-0 components\n    cp tmp/usr/lib/*/libidn2.so.0.* rootfs/usr/lib/libidn2.so.0\n\n    # libk5crypto3 components\n    cp tmp/usr/lib/*/libk5crypto.so.3.* rootfs/usr/lib/libk5crypto.so.3\n\n    # libkeyutils1 components\n    cp tmp/lib/*/libkeyutils.so.1.* rootfs/lib/libkeyutils.so.1\n\n    # libkrb5-3 components\n    cp tmp/usr/lib/*/libkrb5.so.3.* rootfs/usr/lib/libkrb5.so.3\n\n    # libkrb5support0 components\n    cp tmp/usr/lib/*/libkrb5support.so.0.* rootfs/usr/lib/libkrb5support.so.0\n\n    # libldap-2.4-2 components\n    cp tmp/usr/lib/*/liblber-2.4.so.2.* rootfs/usr/lib/liblber-2.4.so.2\n    cp tmp/usr/lib/*/libldap-2.4.so.2 rootfs/usr/lib/\n    cp tmp/usr/lib/*/libldap_r-2.4.so.2.* rootfs/usr/lib/libldap_r-2.4.so.2\n\n    # liblz4-1 components\n    cp tmp/usr/lib/*/liblz4.so.1.* rootfs/lib/liblz4.so.1\n\n    # liblzma5 components\n    cp tmp/lib/*/liblzma.so.5.* rootfs/lib/liblzma.so.5\n\n    # liblzo2-2 components\n    cp tmp/lib/*/liblzo2.so.2 rootfs/lib/\n\n    # libmnl0 components\n    cp tmp/lib/*/libmnl.so.0.* rootfs/lib/libmnl.so.0\n\n    # libmount1 components\n    cp tmp/lib/*/libmount.so.1.* rootfs/lib/libmount.so.1\n\n    # libnettle6 components\n    cp tmp/usr/lib/*/libnettle.so.6.* rootfs/usr/lib/libnettle.so.6\n\n    # libnghttp2-14 components\n    cp tmp/usr/lib/*/libnghttp2.so.14.* rootfs/usr/lib/libnghttp2.so.14\n\n    # libnl-3-200 components\n    cp tmp/lib/*/libnl-3.so.200.* rootfs/lib/libnl-3.so.200\n\n    # libnl-genl-3-200 components\n    cp tmp/lib/*/libnl-genl-3.so.200.* rootfs/lib/libnl-genl-3.so.200\n\n    # libnl-route-3-200 components\n    cp tmp/usr/lib/*/libnl-route-3.so.200.* rootfs/lib/libnl-route-3.so.200\n\n    # libp11-kit0 components\n    cp tmp/usr/lib/*/libp11-kit.so.0.* rootfs/usr/lib/libp11-kit.so.0\n\n    # libpam0g components\n    cp tmp/lib/*/libpam.so.0.* rootfs/lib/libpam.so.0\n    cp tmp/lib/*/libpam_misc.so.0.* rootfs/lib/libpam_misc.so.0\n    cp tmp/lib/*/libpamc.so.0.* rootfs/lib/libpamc.so.0\n\n    # libpcre3 components\n    cp tmp/lib/*/libpcre.so.3.* rootfs/lib/libpcre.so.3\n    cp tmp/usr/lib/*/libpcreposix.so.3.* rootfs/usr/lib/libpcreposix.so.3\n\n    # libpcsclite components\n    cp tmp/usr/lib/*/libpcsclite.so.1 rootfs/lib/libpcsclite.so.1\n\n    # libpsl5 components\n    cp tmp/usr/lib/*/libpsl.so.5.* rootfs/usr/lib/libpsl.so.5\n\n    # librtmp1 components\n    cp tmp/usr/lib/*/librtmp.so.1 rootfs/usr/lib/\n\n    # libsasl2-2 components\n    cp tmp/usr/lib/*/libsasl2.so.2.* rootfs/usr/lib/libsasl2.so.2\n\n    # libselinux1 components\n    cp tmp/lib/*/libselinux.so.1 rootfs/lib/\n\n    # libslang2 components\n    cp tmp/lib/*/libslang.so.2.* rootfs/lib/libslang.so.2\n\n    # libsmartcols1 components\n    cp tmp/lib/*/libsmartcols.so.1.* rootfs/lib/libsmartcols.so.1\n\n    # libssh2-1 components\n    cp tmp/usr/lib/*/libssh2.so.1.* rootfs/usr/lib/libssh2.so.1\n\n    # libssl1.1.0 components\n    cp tmp/usr/lib/*/libcrypto.so.1.1 rootfs/usr/lib/\n    cp tmp/usr/lib/*/libssl.so.1.1 rootfs/usr/lib/\n    cp tmp/usr/lib/*/engines-1.1/afalg.so rootfs/usr/lib/engines-1.1/\n    cp tmp/usr/lib/*/engines-1.1/capi.so rootfs/usr/lib/engines-1.1/\n    cp tmp/usr/lib/*/engines-1.1/padlock.so rootfs/usr/lib/engines-1.1/\n\n    # libsystemd0 components\n    cp tmp/lib/*/libsystemd.so.0.* rootfs/lib/libsystemd.so.0\n\n    # libtasn1-6 components\n    cp tmp/usr/lib/*/libtasn1.so.6.* rootfs/usr/lib/libtasn1.so.6\n\n    # libtinfo6 components\n    cp tmp/lib/*/libtinfo.so.6.* rootfs/lib/libtinfo.so.6\n    cp tmp/usr/lib/*/libtic.so.6.* rootfs/usr/lib/libtic.so.6\n\n    # libudev1 components\n    cp tmp/lib/*/libudev.so.1.* rootfs/lib/libudev.so.1\n\n    # libunistring2 components\n    cp tmp/usr/lib/*/libunistring.so.2.* rootfs/usr/lib/libunistring.so.2\n\n    # libuuid1 components\n    cp tmp/lib/*/libuuid.so.1.* rootfs/lib/libuuid.so.1\n\n    # zlib1g components\n    cp tmp/lib/*/libz.so.1 rootfs/lib/\n\n    (cd rootfs && find . | cpio -H newc -ov | gzip --best > \"../${INITRAMFS}\")\n\n    rm -rf rootfs\n}\n\n# start\nif [ ! -d packages ]; then\n    . ./update.sh\nfi\n\necho Preparing...\nrm -rf tmp\nmkdir tmp\n\n# extract debs\nfor deb in packages/*.*deb; do\n    echo \"Extracting \" \"$(basename \"$deb\")...\"\n    (cd tmp && ar x ../\"$deb\" && tar -xf data.tar.*; rm data.tar.*)\ndone\n\n# workaround for missing brcmfmac43430-sdio.txt\necho \"Applying workaround for missing brcmfmac43430-sdio.txt file\"\ncp assets/brcmfmac43430-sdio.txt tmp/lib/firmware/brcm/\n\n# initialize bootfs\nrm -rf bootfs\nmkdir bootfs\n\n# raspberrypi-bootloader-nokernel components and kernel\ncp -r tmp/boot/* bootfs/\nrm bootfs/System*\nrm bootfs/config-*\nmv bootfs/vmlinuz-${KERNEL_VERSION_RPI1} bootfs/kernel-rpi1_install.img\nmv bootfs/vmlinuz-${KERNEL_VERSION_RPI2} bootfs/kernel-rpi2_install.img\n\nif [ ! -f bootfs/config.txt ] ; then\n    touch bootfs/config.txt\nfi\n\n# initramfs\ncreate_cpio \"installer-rpi.cpio.gz\"\ncp installer-rpi.cpio.gz bootfs/\n\n# write boot config\n{\n    # rpi zero uses the same kernel as rpi1\n    echo \"[pi0]\"\n    echo \"kernel=kernel-rpi1_install.img\"\n    echo \"initramfs installer-rpi.cpio.gz\"\n    echo \"[pi1]\"\n    echo \"kernel=kernel-rpi1_install.img\"\n    echo \"initramfs installer-rpi.cpio.gz\"\n    echo \"[pi2]\"\n    echo \"kernel=kernel-rpi2_install.img\"\n    echo \"initramfs installer-rpi.cpio.gz\"\n    # rpi3 uses the same kernel as rpi2\n    echo \"[pi3]\"\n    echo \"kernel=kernel-rpi2_install.img\"\n    echo \"initramfs installer-rpi.cpio.gz\"\n    # on the rpi3 the uart port is used by bluetooth by default\n    # but during the installation we want the serial console\n    # the next statement does that, but has an effect on bluetooth\n    # not sure how/what as I don't fully understand\n    # https://github.com/raspberrypi/documentation/blob/master/configuration/uart.md\n    echo \"dtoverlay=pi3-miniuart-bt\"\n    # rpi4 uses the same kernel as rpi2\n    echo \"[pi4]\"\n    echo \"kernel=kernel-rpi2_install.img\"\n    echo \"initramfs installer-rpi.cpio.gz\"\n    # reset filter\n    echo \"[all]\"\n    echo \"gpu_mem_256=16\"\n    echo \"gpu_mem_512=32\"\n} >> bootfs/config.txt\n\n# clean up\nrm -rf tmp\n\necho \"consoleblank=0 console=ttyAMA0,115200 kgdboc=ttyAMA0,115200 console=tty1\" > bootfs/cmdline.txt\n\nif [ -f installer-config.txt ]; then\n    cp installer-config.txt bootfs/\nfi\n\nif [ -f post-install.txt ]; then\n    cp post-install.txt bootfs/\nfi\n\nif [ -d config ] ; then\n    mkdir bootfs/config\n    cp -r config/* bootfs/config\nfi\n\nZIPFILE=raspbian-ua-netinst-$(date +%Y%m%d)-git$(git rev-parse --short \"@{0}\").zip\nrm -f \"$ZIPFILE\"\n\n(cd bootfs && zip -r -9 ../\"$ZIPFILE\" -- *)\n"
        },
        {
          "name": "buildroot.sh",
          "type": "blob",
          "size": 1.048828125,
          "content": "#!/usr/bin/env bash\n\nset -e\n\nIMG=raspbian-ua-netinst-$(date +%Y%m%d)-git$(git rev-parse --short \"@{0}\").img\n\nrm -f \"$IMG\"\nrm -f \"$IMG\".bz2\nrm -f \"$IMG\".xz\n\ndd if=/dev/zero of=\"$IMG\" bs=1M count=64\n\nfdisk \"$IMG\" <<EOF\nn\np\n1\n\n\nt\nb\nw\nEOF\n\nif ! losetup --version &> /dev/null ; then\n  losetup_lt_2_22=true\nelif [ \"$(echo \"$(losetup --version | rev|cut -f1 -d' '|rev|cut -d'.' -f-2)\"'<'2.22 | bc -l)\" -ne 0 ]; then\n  losetup_lt_2_22=true\nelse\n  losetup_lt_2_22=false\nfi\n\nif [ \"$losetup_lt_2_22\" = \"true\" ] ; then\n\n  kpartx -as \"$IMG\"\n  mkfs.vfat /dev/mapper/loop0p1\n  mount /dev/mapper/loop0p1 /mnt\n  cp -r bootfs/* /mnt/\n  umount /mnt\n  kpartx -d \"$IMG\" || true\n\nelse\n\n  losetup --find --partscan \"$IMG\"\n  LOOP_DEV=\"$(losetup --associated \"$IMG\" | cut -f1 -d':')\"\n  mkfs.vfat \"${LOOP_DEV}\"p1\n  mount \"${LOOP_DEV}\"p1 /mnt\n  cp -r bootfs/* /mnt/\n  umount /mnt\n  losetup --detach \"${LOOP_DEV}\"\n\nfi\n\nif ! xz -9 --keep \"$IMG\" ; then\n  # This happens e.g. on Raspberry Pi because xz runs out of memory.\n  echo \"WARNING: Could not create '$IMG.xz' variant.\" >&2\nfi\n\nbzip2 -k -9 \"$IMG\"\n"
        },
        {
          "name": "clean.sh",
          "type": "blob",
          "size": 0.1123046875,
          "content": "#!/bin/sh\n\nrm -rf -- bootfs rootfs firmware packages tmp installer*.cpio installer*.cpio.gz *.zip *.xz *.bz2 *.img\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "update.sh",
          "type": "blob",
          "size": 9.5068359375,
          "content": "#!/usr/bin/env bash\n# shellcheck disable=SC1117\n\nKERNEL_VERSION_RPI1=4.9.0-6-rpi\nKERNEL_VERSION_RPI2=4.9.0-6-rpi2\n\nRASPBIAN_ARCHIVE_KEY_FILE_NAME=\"raspbian-archive-keyring.gpg\"\n\nmirror_raspbian=\"http://archive.raspbian.org/raspbian\"\n\nrelease=buster\n\npackages=()\n\n# programs\npackages+=(\"raspberrypi-bootloader-nokernel\")\npackages+=(\"linux-image-${KERNEL_VERSION_RPI1}\")\npackages+=(\"linux-image-${KERNEL_VERSION_RPI2}\")\npackages+=(\"firmware-brcm80211\")\npackages+=(\"btrfs-progs\")\npackages+=(\"busybox\")\npackages+=(\"ca-certificates-udeb\")\npackages+=(\"cdebootstrap\")\npackages+=(\"coreutils\")\npackages+=(\"curl\")\npackages+=(\"dash\")\npackages+=(\"distro-info-data\")\npackages+=(\"dosfstools\")\npackages+=(\"dpkg\")\npackages+=(\"e2fsprogs\")\npackages+=(\"f2fs-tools\")\npackages+=(\"fdisk\")\npackages+=(\"gpgv\")\npackages+=(\"ifupdown\")\npackages+=(\"iproute2\")\npackages+=(\"lsb-base\")\npackages+=(\"mawk\")\npackages+=(\"ndisc6\")\npackages+=(\"netbase\")\npackages+=(\"ntpdate\")\npackages+=(\"raspbian-archive-keyring\")\npackages+=(\"rng-tools\")\npackages+=(\"tar\")\npackages+=(\"util-linux\")\npackages+=(\"wpasupplicant\")\n\n# libraries\npackages+=(\"libacl1\")\npackages+=(\"libatm1\")\npackages+=(\"libattr1\")\npackages+=(\"libaudit-common\")\npackages+=(\"libaudit1\")\npackages+=(\"libblkid1\")\npackages+=(\"libbrotli1\")\npackages+=(\"libbz2-1.0\")\npackages+=(\"libc-bin\")\npackages+=(\"libc6\")\npackages+=(\"libcap2\")\npackages+=(\"libcom-err2\")\npackages+=(\"libcurl3-gnutls\")\npackages+=(\"libcurl4\")\npackages+=(\"libdb5.3\")\npackages+=(\"libdbus-1-3\")\npackages+=(\"libdebian-installer4\")\npackages+=(\"libdebian-installer-extra4\")\npackages+=(\"libelf1\")\npackages+=(\"libext2fs2\")\npackages+=(\"libf2fs5\")\npackages+=(\"libfdisk1\")\npackages+=(\"libffi6\")\npackages+=(\"libgcc1\")\npackages+=(\"libgcrypt20\")\npackages+=(\"libgmp10\")\npackages+=(\"libgnutls30\")\npackages+=(\"libgpg-error0\")\npackages+=(\"libgssapi-krb5-2\")\npackages+=(\"libhogweed4\")\npackages+=(\"libidn2-0\")\npackages+=(\"libk5crypto3\")\npackages+=(\"libkeyutils1\")\npackages+=(\"libkrb5-3\")\npackages+=(\"libkrb5support0\")\npackages+=(\"libldap-2.4-2\")\npackages+=(\"liblz4-1\")\npackages+=(\"liblzma5\")\npackages+=(\"liblzo2-2\")\npackages+=(\"libmnl0\")\npackages+=(\"libmount1\")\npackages+=(\"libnettle6\")\npackages+=(\"libnghttp2-14\")\npackages+=(\"libnl-3-200\")\npackages+=(\"libnl-genl-3-200\")\npackages+=(\"libnl-route-3-200\")\npackages+=(\"libp11-kit0\")\npackages+=(\"libpam0g\")\npackages+=(\"libpcre3\")\npackages+=(\"libpcsclite1\")\npackages+=(\"libpsl5\")\npackages+=(\"librtmp1\")\npackages+=(\"libsasl2-2\")\npackages+=(\"libselinux1\")\npackages+=(\"libslang2\")\npackages+=(\"libsmartcols1\")\npackages+=(\"libssh2-1\")\npackages+=(\"libssl1.1\")\npackages+=(\"libsystemd0\")\npackages+=(\"libtasn1-6\")\npackages+=(\"libtinfo6\")\npackages+=(\"libudev1\")\npackages+=(\"libunistring2\")\npackages+=(\"libuuid1\")\npackages+=(\"zlib1g\")\n\ndownload_file() {\n    local source=\"$1\"\n    local target=\"$2\"\n    local options=(-q --show-progress --no-cache)\n    local wget_retval\n\n    if [ -n \"${target}\" ] ; then\n        options+=(-O \"${target}\")\n    fi\n    wget_retval=$(wget \"${options[@]}\" \"${source}\")\n    if ! $wget_retval ; then\n        echo -e \"ERROR\\nDownloading file '${source}' failed! Exiting.\"\n        exit 1\n    fi\n}\n\nsetup_archive_keys() {\n    mkdir -m 0700 -p gnupg\n    # Let gpg set itself up already in the 'gnupg' dir before we actually use it\n    echo \"Setting up gpg... \"\n    gpg --homedir gnupg --list-secret-keys\n    echo \"\"\n\n    # Import raspbian.org's gpg repo key into our own keyring\n    echo -n \"Importing '${RASPBIAN_ARCHIVE_KEY_FILE_NAME}' into keyring... \"\n    if gpg -q --homedir gnupg --import \"../assets/${RASPBIAN_ARCHIVE_KEY_FILE_NAME}\" ; then\n        echo \"OK\"\n    else\n        echo \"FAILED!\"\n        return 1\n    fi\n\n    echo \"\"\n\n    return 0\n}\n\nrequired() {\n    for i in \"${packages[@]}\"; do\n        [[ $i = \"$1\" ]] && return 0\n    done\n    return 1\n}\n\nunset_required() {\n    for i in \"${!packages[@]}\"; do\n        [[ ${packages[$i]} = \"$1\" ]] && unset 'packages[$i]' && return 0\n    done\n    return 1\n}\n\nallfound() {\n    [[ ${#packages[@]} -eq 0 ]] && return 0\n    return 1\n}\n\nfilter_package_list() {\n    awk -v p=\"${packages[*]}\" 'BEGIN{ split(p, packages) } /^Package:/{ flag=0; for (i in packages) if ($2 == packages[i]) flag=1 }; flag{ print }'\n}\n\ndownload_package_list() {\n    # Download and verify package list for $package_section, then add to Packages file\n    # Assume that the repository's base Release file is present\n    local source=\"$1\"\n    local base_url=\"$2\"\n    local sha256_calc_val_pkg_file\n    local sha256_val_from_release_file\n\n    extensions=( '.xz' '.bz2' '.gz' '' )\n    for extension in \"${extensions[@]}\" ; do\n\n        # Check that this extension is available\n        if grep -q \"${package_section}/binary-armhf/Packages${extension}\" \"${source}_Release\" ; then\n\n            # Download Packages file\n            echo -e \"\\nDownloading ${package_section} package list...\"\n            if ! download_file \"${base_url}/dists/${release}/${package_section}/binary-armhf/Packages${extension}\" \"Packages${extension}\" ; then\n                echo -e \"ERROR\\nDownloading '${package_section}' package list failed! Exiting.\"\n                cd ..\n                exit 1\n            fi\n\n            # Verify the checksum of the Packages file, assuming that the last checksums in the Release file are SHA256 sums\n            sha256_val_from_release_file=$(grep \"${package_section}/binary-armhf/Packages${extension}\" \"${source}_Release\" | tail -n1 | awk '{print $1}')\n            echo \"SHA256 of Packages${extension} from Release file: \" \"$sha256_val_from_release_file\"\n            sha256_calc_val_pkg_file=$(sha256sum \"Packages${extension}\" | awk '{print $1}')\n            echo \"SHA256 calculated on Packages${extension}:        \" \"$sha256_calc_val_pkg_file\"\n\n            echo -n \"Verifying ${package_section} package list... \"\n            if [ \"$sha256_val_from_release_file\" = \"$sha256_calc_val_pkg_file\" ] ; then\n                echo \"OK\"\n            else\n                echo -e \"ERROR\\nThe checksum of file '${package_section}/binary-armhf/Packages${extension}' doesn't match!\"\n                cd ..\n                exit 1\n            fi\n\n            # Decompress the Packages file\n            if [ \"${extension}\" = \".bz2\" ] ; then\n                decompressor=\"bunzip2 -c \"\n            elif [ \"${extension}\" = \".xz\" ] ; then\n                decompressor=\"xzcat \"\n            elif [ \"${extension}\" = \".gz\" ] ; then\n                decompressor=\"gunzip -c \"\n            elif [ \"${extension}\" = \"\" ] ; then\n                decompressor=\"cat \"\n            fi\n            ${decompressor} \"Packages${extension}\" >> \"${source}_Packages\"\n            rm \"Packages${extension}\"\n            break\n        fi\n    done\n}\n\ndownload_package_lists() {\n    local source=\"$1\"\n    local base_url=\"$2\"\n    local gpg_release_verify_retval\n\n    echo -e \"\\nDownloading Release file and its signature...\"\n    download_file \"${base_url}/dists/$release/Release\" \"${source}_Release\"\n    download_file \"${base_url}/dists/$release/Release.gpg\" \"${source}_Release.gpg\"\n    echo -n \"Verifying Release file... \"\n    gpg_release_verify_retval=$(gpg --homedir gnupg --verify \"${source}_Release.gpg\" \"${source}_Release\" &> /dev/null)\n    if $gpg_release_verify_retval ; then\n        echo \"OK\"\n    else\n        echo -e \"ERROR\\nBroken GPG signature on Release file!\"\n        cd ..\n        exit 1\n    fi\n\n    echo -n > \"${source}_Packages\"\n\n    for package_section in firmware main non-free main/debian-installer; do\n        download_package_list \"${source}\" \"${base_url}\"\n    done\n}\n\nsearch_for_packages() {\n    local source=\"$1\"\n    local base_url=\"$2\"\n\n    while read -r k v\n    do\n        if [ \"${k}\" = \"Package:\" ] ; then\n            current_package=\"${v}\"\n        elif [ \"${k}\" = \"Filename:\" ] ; then\n            current_filename=\"${v}\"\n        elif [ \"${k}\" = \"SHA256:\" ] ; then\n            current_sha256=\"${v}\"\n        elif [ \"${k}\" = \"\" ] ; then\n            if required \"$current_package\" ; then\n                printf \"  %-32s %s\\n\" \"${current_package}\" \"$(basename \"${current_filename}\")\"\n                unset_required \"${current_package}\"\n                packages_debs+=(\"${base_url}/${current_filename}\")\n                packages_sha256+=(\"${current_sha256} $(basename \"${current_filename}\")\")\n                allfound && break\n            fi\n\n            current_package=\n            current_filename=\n            current_sha256=\n        fi\n    done < <(filter_package_list <\"${source}_Packages\")\n}\n\ndownload_packages() {\n    local wget_retval\n    #echo \"Files to download:\"\n    #echo \"${packages_debs[@]}\"\n    echo -e \"\\nDownloading packages...\"\n    wget_retval=$(wget -q --show-progress --no-cache -- \"${packages_debs[@]}\")\n    if ! $wget_retval ; then\n        echo -e \"ERROR\\nDownloading packages failed! Exiting.\"\n        cd ..\n        exit 1\n    fi\n    \n    echo -ne \"\\nVerifying downloaded packages... \"\n    printf \"%s\\n\" \"${packages_sha256[@]}\" > SHA256SUMS\n    if sha256sum --quiet -c SHA256SUMS; then\n        echo \"OK\"\n    else\n        echo -e \"ERROR\\nThe checksums of the downloaded packages don't match the package lists!\"\n        cd ..\n        exit 1\n    fi\n}\n\n# Setup\nrm -rf packages/\nmkdir packages/ && cd packages || exit 1\n\nif ! setup_archive_keys ; then\n    echo -e \"ERROR\\nSetting up the archives failed! Exiting.\"\n    exit 1\nfi\n\n## Download package list\ndownload_package_lists raspbian \"${mirror_raspbian}\"\n\n## Select packages for download\necho -e \"\\nSearching for required packages...\"\n\npackages_debs=()\npackages_sha256=()\n\nsearch_for_packages raspbian \"${mirror_raspbian}\"\n\nif ! allfound ; then\n    echo \"ERROR: Unable to find all required packages in package list!\"\n    echo \"Missing packages: \" \"${packages[@]}\"\n    cd ..\n    exit 1\nfi\n\n## Download selected packages\ndownload_packages\n\ncd ..\n"
        }
      ]
    }
  ]
}