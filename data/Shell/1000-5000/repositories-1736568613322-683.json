{
  "metadata": {
    "timestamp": 1736568613322,
    "page": 683,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY4OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "dyne/tomb",
      "stars": 1386,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0908203125,
          "content": "\\#*\n.\\#*\n*~\n*.o\ntomb-askpass\ntomb-status\ndoc/web/public\ndoc/web/dyne\nshare/gtkrc\n.*.sw?\n*.mo\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.2958984375,
          "content": "sudo: required\nlanguage: c\n\nservices:\n  - docker\n\nbefore_script:\n  - cp -v extras/test/Dockerfile .\n  - docker build -t dyne/tomb .\n  - docker run -it --privileged dyne/tomb /bin/bash -c \"oracle & make test\"\n\nscript:\n  - docker run -it --privileged dyne/tomb /bin/bash -c \"make -C extras/kdf-keys test\"\n"
        },
        {
          "name": "AUTHORS.md",
          "type": "blob",
          "size": 2.0224609375,
          "content": "Cryptsetup was originally written in 2004 by Jana Saout\n\nLUKS extensions are written in 2006 by Clemens Fruhwirth\n\nTomb is written and maintained since 2007 by [Denis \"Jaromil\" Roio](https://jaromil.dyne.org)\n\nTomb includes code and advices by Anathema, Boyska, Hellekin O. Wolf,\nDaniel Rodriguez, Parazyd, Alexandre Pujol, AitorATuin, Narrat, Artur\nMalimonov and Chris Vogel.\n\nThe 'gtomb' GUI based on Zenity is written by Parazyd and Daniel Dias Rodrigues.\n\nThe Qt5 desktop tray GUI is written by Gianluca Montecchi.\n\nPython Tomb wrappers are contributed by Reiven and Boyska.\n\nThe Docker Tomb wrapper is contributed by Greg Tczap and Jens Rischbieth.\n\nArtwork is contributed by Jordi aka Mon Mort and Logan VanCuren.\n\nGettext internationalization and Spanish translation is contributed by\nDaniel Rodriguez and Francisco Serrador. French translation by\nHellekin and Roy Lockhart, Russian translation by fsLeg and AHOHNMYC,\nGerman translation by Jerry Polfer, Italian translation by\nMassimiliano Augello and Swedish translation by PLJ / Kosovoper,\ngeneral fixes contributed by Daniel Dias Rodrigues.\n\nTesting, reviews and documentation contributed by Dreamer, Vlax,\nShining the Translucent, Mancausoft, Asbesto Molesto, Nignux, TheJH,\nThe Grugq, Reiven, GDrooid, Alphazo, Brian May, fsLeg, Narrat, Jerry\nPolfer, Jim Turner, Maxime Arthaud, RobertMX, mhogomchungu Mandeep\nBhutani, Emil Lundberg, Joel Montes de Oca, Armin Mesbah, Arusekk,\nStephan Schindel, Asbj√∏rn Apeland, Victor Calvert, bjonnh, SargoDevel,\nAitorATuin, Alexis Danizan, Sven Geuer, Greg Tczap, Aaron Janse, Mark\nMykkanen, Alexis Danizan, Steve Litt, James R, Matthieu Crapet, Selene\nToyKeeper, Valentin Heidelberg and...  the Linux Action Show!\n\nTomb includes an implementation of the \"Password-Based Key Derivation\nFunction v2\" based on GCrypt and written by Anthony Thyssen, with\nfixes contributed by AitorATuin.\n\nSome of the Tomb developers can be contacted via [GitHub discussions](https://github.com/dyne/Tomb/discussions)\nor over Telegram via the [Dyne.org Chat Channel](https://t.me/dyne_chat).\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 34.3232421875,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<http://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\n"
        },
        {
          "name": "ChangeLog.md",
          "type": "blob",
          "size": 13.341796875,
          "content": "# Tomb ChangeLog\n\n## 2.11\n### July 2024\n\nSearch engine is upgraded to use recoll, based on xapian backend:\noffers a GUI and is more up to date, replaces swish-e. Various fixes\ninclude a better default of 3 rounds for Argon2 KDF, improved support\nfor cloakify which is now shipped in tomb/extras, new support for\npinentry-tty useful for some headless systems and terminals over\nserial port, improved usage on machines without sudo and support\nbind-hooks on folders containing spaces in their names. Also the\ntranslations to some other languages were improved.  All documentation\nwas revisited and reorganized, manpage corrected in some parts and a\nnew homepage is up at https://dyne.org/tomb\n\n## 2.10\n### Sep 2023\n\nThis release adds optional support for Argon2 KDF brute-force\nprotection and introduces support for doas as an alternative to sudo\nfor privilege escalation. It also improves support for BTRFS formatted\nTombs, adds zram detection as swap memory, updates documentation and\ntranslations and cleans up the script code.\n\n## 2.9\n### Jan 2021\n\nThis release fixes all bugs introduced by the unfortunate 2.8 release\nseries in 2020 as well introduces support for BTRFS formatted\nTombs. The fixes are for password insertion to work on all desktops,\nas well the fix to a regression when using old Zsh versions. The new\nfeature is activated by the '--filesystem' flag on 'lock' commands.\nIt only supports BTRFS as internal filesystem of a Tomb instead of the\ndefault EXT4; resizing works as well to create and send or receive\nsubvolumes and snapshots inside a Tomb. There are also some cleanups,\nsmall error handling improvements and no more need for suid actions by\n'forge' and 'dig' commands.\n\n\n\n## 2.8.1\n### Nov 2020\n\nThis is a minor bugfix release. It fixes two bugs introduced by the\nprevious release: the release of loopback devices and a typo affecting\npassword insertion in text-only mode. It also provides a cosmetic fix\nfor the output of 'tomb list' that now displays correct sizes. At\nlast, the docker wrapper has been included in extras/ to be shipped in\nTomb. The span of CVE-2020-28638 has been assessed with more precision\nand KNOWN_BUGS updated accordingly.\n\n## 2.8\n### Nov 2020\n\nThis new release updates the documentation, improves usability and\nfixes two bugs. A bug has been found (CVE-2020-28638) to corrupt\npasswords entered using pinentry-curses on desktops using a X11\nDISPLAY, the documentation in KNOWN_BUGS outlines how to fix\nregressions. Another bug has been fixed to prevent mounting tombs that\nare already opened, a situation leading to potential data loss.\nChanges mentioned lead to a small internal refactoring and cleanup,\nleading to a change in the way volumes appear in /dev/mapper. Along\nthe usability improvements are the support of GNUPGHOME environment\nvariable to support non-standard GnuPG home locations as well updated\ntranslations and the fact that debug messages are now written to\nstderr, making it easier to parse stdout.\n\n## 2.7\n### Oct 2019\n\nFixed getent parsing of passwd and notation of conditionals\nnormalised.  A few other minor fixes and documentation improvements.\n\n\n## 2.6\n### May 2019\n\nThis release adds new features and provides an important fix for usage\nof Tomb with cryptsetup 2.1 and future versions; it also fixes a\nwhitespace bug in KDF passwords, all fixes are documented in\nKNOWN_BUGS. A notable new feature is the libsphinx integration for\npassword-authenticated key agreement (PAKE). Another feature is the\nintegration of cloakify to support new cloak/uncloak commands that\nhide keys inside long text files. Also support for gpg sub-keys has\nbeen added and overall gpg asymmetric key protection is improved.\n\n\n\n## 2.5\n### January 2018\n\nThis is mostly a bugfix release, including two internal\nrefactorings. An important change is the re-introduction (since v2.3)\nof ownership change of all files inside tombs, to facilitate single\nuser usage, which is now default and can be prevented using the '-p'\nflag on 'open' commands. The first refactoring concerns the test\nunits, now using the 'sharness' framework. The other refactoring\nconcerns 'post-hooks' now renamed to 'exec-hooks' and launched on\n'open' and 'close' commands with a defined set of arguments. Another\ninternal change concerns the use of 'findmnt' instead of parsing the\noutput of 'mount -l', which grants compatibility with more recent\nversions of util-linux. A fix was made to the 'slam' command for a\nbetter process detection and the introduction of a new 'ps' command to\njust list processes using tombs. Another fix was made to support tomb\nhidden filenames (starting with a dot) without any extension. Some\nmore minor fixes were made to messaging and translations, plus all the\ndocumentation is updated.\n\n\n## 2.4\n### April 2017\n\nThis release introduces a major new feature with support for\nasymmetric encryption of Tomb keys using public/private GPG key\npairs. It is now possible to protect a Tomb key using a GPG key (which\ncan also be password-less for automations) as well encrypt a Tomb key\nfor multiple recipients (list of GPG ids). Other improvements include:\na fix to the 'slam' command with better detection of running programs\nusing 'lsof' (new optional dependency); a fix to 'forge' key creation\nto really use 512 bits long keys to really trigger usage of AES256;\ncorrect support for opening tombs in read-only mode; update of the\nTomber python wrapper in extras. Documentation has been updated.\n\n## 2.3\n### January 2017\n\nFix to bug occurring when using ZSh version 5.3 or higher. Fix to\ninclusion of final newline in keys generated with 2.2, only affecting\nthird-party software. Removed chmod/chown of tombs when open. Enhanced\ncontinuous integration script with regression tests with usage of old\nstable versions of Tomb and shellcheck linting.  Improved parser and\npost-hooks to avoid usage of external binaries (grep and cat) also\nimproving security when decrypting keys. Fix for clean execution via\nsudo nopasswd. Updated extras/gtomb to latest stable version.  Various\ndocumentation updates about kdf, using images as keys, deniability and\ngpg-agent usage. New experimental port to Android platforms in extras.\n\n## 2.2\n### December 2015\n\nNew Qt5 desktop tray in extras/qt-tray.\nNew Zenity based Gtk interface in extras/gtomb (experimental).\nBetter resizing procedure recovers from failure without starting over\nwith a new dig.  Fixes for correct handling of bind-hooks mountpoints\ncontaining whitespaces, implying a refactoring of how the mtab is\nparsed, along with workaround for Debian bugs. Updated all strings to\nreport MiB sizes. Fix to correctly show last time opened. Fix to EUID\ndetection and to installed manpage permissions.\n\n## 2.1.1\n### August 2015\n\nAdded translations to Italian and Swedish.\nMinor documentation updates.\n\n\n## 2.1\n### July 2015\n\nAll users updating should close their tombs first, then update and\nreopen them with this new version. However, lacking to do so will not\ncause any data loss, just an unclean umount of tombs.\n\nThis new stable release including several bugfixes to smooth the user\nexperience in various situations. Documentation is reviewed and\nextended and translations are updated.\n\nMore in detail, fixes to: mountpoint removal, language localization,\ngtk-2 pinentry themeing, udisk2 compatibility (/run/media/$USER\nmountpoint support), handling of key failures, kdf documentation,\nswish-e file contents search and encrypted swap detection.\n\nDeniability is improved by allowing any filename to be used for tombs\n(also without .tomb extension). Code has been overall cleaned up.\n\n\n## 2.0.1\n### December 2014\n\nFix for usage with GnuPG 1.4.11, a problem affecting long term\nGNU/Linux distribution releases like Ubuntu 12.04 and Mint 13.\nMinor messaging fixes.\n\n## 2.0\n### November 2014\n\nTomb goes international: now translated to Russian, French, Spanish\nand German.\n\nThe usability has improved: steganographed images can now be used\ndirectly as keys using `-k`. Tomb now works also across ssh\nconnections: it is possible to pipe cleartext secrets from stdin using\n`-k cleartext` but that requires the --unsafe flag.\n\nThe security is also improved by avoiding most uses of temporary\nfiles. The privilege escalation model has been simplified and sudo is\ncalled only when needed. All code has been refactored for readability\nand integration with zsh features. Signal handlers are now in place,\nglobal arrays are used to keep track of temp files. Namespace has been\nrevisioned and corrected, described in [HACKING](docs/HACKING.txt).\n\n## 1.5.3\n### June 2014\n\nVarious usability fixes and documentation updates. Password changing\nand key changing procedures have been refactored and dev-mode\noperation from scripts has been tested against a few new wrappers\nbeing developed. A strings file is made available for translators.\n\n## 1.5.2\n### February 2014\n\nRemoved automatic guessing of key file besides tomb to encourage\nusers to keep tomb and key separated, but also to simplify the\ncode in key retrieval and avoid a bug occurring in the previous\nversion.\n\n## 1.5.1\n### February 2014\n\nFix to stdin piping of keys, which were not correctly processed\nnor were deleted from volatile memory (tmpfs).\n\nVersion is now updated accordingly.\n\n## 1.5\n### January 2014\n\nMinor bugfixes to documentation, error handling, support for\nmultiple and encrypted swap partitions and qr code engraving.\n\nThis release also includes some minor code refactoring of\nload_key() and loop mount checks. Also the tray app is updated\nto gtk-3 and works simply with a tomb name as argument.\n\nDocumentation was updated accordingly.\n\n## 1.4\n### June 2013\n\nThis release fixes an important bug affecting Tomb 1.3.* which\nbreaks backward compatibility with older tombs and invalidates\nkeys created using 1.3 or 1.3.1. For more information about it\nread the file KNOWN_BUGS.\n\nNew features are also included:\nindexing and search of file contents, engraving of keys into paper\nprintable QRCodes for backup purposes and improvements in key\nencryption. A setkey command is added to change the key file that\nis locking a Tomb.\n\nThis release restores backward compatibility\nwith tombs created before the 1.3 release series.\n\n## 1.3.1 (DEPRECATED, see [KNOWN_BUGS](KNOWN_BUGS.md))\n### June 2013\n\nMajor bugfixes following the recent refactoring.\n\nThis release fixes various advanced commands as search/index, KDF key\nprotection against dictionary attacks and steganographic hiding of\nkeys. It provides compatibility across GnuPG 1.4.11 and .12 which\nbroke the decoding of keys. Usage of commandline option is made\nconsistent and full paths are honored.\n\nA new test suite is included and documentation is updated accordingly.\n\n## 1.3 (DEPRECATED, see [KNOWN_BUGS](KNOWN_BUGS.md))\n### May 2013\n\nA refactoring of Tomb's main script internals was made, including\na new messaging system, machine parsable output, cleaner code and\nupdated compatibility to Debian 7. A new search feature lets users\nindex and run fast filename searches in their open tombs. Creation\nof tombs is broken out in three steps (dig, forge and lock).\n\nSource distribution includes experimental add-ons for a python\nGUI, KDF key encryption and a key \"undertaker\". Documentation was\nupdated.\n\n\n## 1.2\n### Nov 2011\n\nIncludes an Important fix to password parsing for spaces and\nextended chars, plus a new 'passwd' command to change a key's\npassword. Tomb now checks for swap to avoid its usage (see SWAP\nsection in manpage) and warns the user when the tomb is almost\nfull.\n\n## 1.1\n### May 2011\n\nFixes to mime types, icons and desktop integration.\n\nA new 'list' command provides an overview on all tombs currently open.\n\nNow a tomb cannot be mounted multiple times, the message console has\ncolors and better messages.\n\nDifferent mount options (like read-only) can also be specified by hand on the commandline.\n\n## 1.0\n### March 2011\n\nClean and stable. Now passwords are handled exclusively using\npinentry. Also support for steganography of keys (bury and exhume)\nwas added to the commandline.\n\nCommandline and desktop operations are well separated so that tomb can be used via remote terminal.\n\nA new command 'slam' immediately closes a tomb killing all processes that keep it busy.\n\n## 0.9.2\n### February 2011\n\nThe tomb-open wizard now correctly guides you through the creation\nof new tombs and helps when saving the keys on external USB\nstorage devices. The status tray now reliably closes its tomb.\n\n## 0.9.1\n### February 2011\n\nSourcecode cleanup, debugging and testing.\n\nIntegrated some feedback after filing Debian's ITP and RFS.\n\n## 0.9\n### January 2011\n\nTomb is now a desktop application following freedesktop standards:\nit provides a status tray and integrates with file managers.\n\nThe main program has been thoroughly tested and many bugs were fixed.\n\n## August 2010\n\nThe first usable version of Tomb goes public among hacker friends\n\n## During the year 2009\n\nTomb has been extensively tested, perfectioned and documented\nafter being used by its author.\n\n## Sometime in 2007\n\n[MKNest](http://code.dyne.org/dynebolic/tree/dyneII/startup/bin/mknest)\nwas refactored to work on the Debian distribution and since\nthen renamed to Tomb. [dyne:bolic](http://www.dynebolic.org) specific dependencies where\nremoved, keeping Zsh as the shell script it is written with.\n\n## Back in 2005\n\nThe \"nesting\" feature of [dyne:bolic](http://www.dynebolic.org)\nGNU/Linux lets users encrypt their home in a file, using a shell script and a graphical\ninterface called Taschino.\n\nTaschino included a shell script wrapping cryptsetup to encrypt\nloopback mounted partitions with the algo AES-256 (cbc-essiv\nmode): this script was called 'mkNest' and its the ancestor of\nTomb.\n"
        },
        {
          "name": "INSTALL.md",
          "type": "blob",
          "size": 7.2294921875,
          "content": "# TOMB INSTALLATION INSTRUCTIONS\n\n## Install required tools\n\nTomb needs a few programs to be installed on a system in order to work:\n\n * zsh\n * file\n * sudo\n * gnupg\n * cryptsetup\n * pinentry-curses (and/or -gtk-2, -x11, -qt)\n\nMost systems provide these tools in their package collection, for\ninstance on Debian/Ubuntu one can use `apt-get install` on Fedora and\nCentOS one can use `yum install` and `pacman` on Arch.\n\n## Install Tomb\n\nTo install Tomb simply download the source distribution (the tar.gz file)\nfrom https://files.dyne.org/tomb and decompress it. From a terminal:\n\n    cd Downloads\n    tar xvfz Tomb-2.4.tar.gz (correct with actual file name)\n\nThen enter its directory and run 'make install' as root, this will install\nTomb into /usr/local:\n\n    cd Tomb-2.4 (correct with actual directory name)\n    sudo make install\n\nAfter installation one can read the commandline help or read the manual:\n\n    tomb -h     (print a short help on the commandline)\n    man tomb    (show the full usage manual)\n\n# Basic usage\n\nOnce installed one can proceed creating a tomb, for instance:\n\n    tomb dig -s 10 secrets.tomb       (dig a 10MB Tomb)\n    tomb forge -k secrets.tomb.key    (create a new key and set its password)\n    tomb lock  -k secrets.tomb.key secrets.tomb (format the tomb, lock it with key)\n\nWhen this is done, the tomb can be opened with:\n\n    tomb open -k secrets.tomb.key secrets.tomb (will ask for password)\n\nThe key can also be hidden in an image, to be used as key later\n\n    tomb bury -k secrets.tomb.key nosferatu.jpg (hide the key in a jpeg image)\n    tomb open -k nosferatu.jpg secrets.tomb (use the jpeg image to open the tomb)\n\nOr backed up to a QRCode that can be printed on paper and hidden in\nbooks. QRCodes can be scanned with any mobile application, resulting\ninto a block of text that can be used with `-k` just as a normal key.\n\n    tomb engrave -k secrets.tomb.key  (also an image will work)\n\nThere are some more things that tomb can do for you, make sure you\nhave a look at the manpage and at the commandline help to find out\nmore.\n\n# Optional tools\n\nTomb can use some optional tools to extend its functionalities:\n\nexecutable | function\n---------- | ---------------------------------------------------\n  lsof     | slam a tomb (close even if open programs)\n  dcfldd   | show progress while digging tombs and keys\n  steghide | bury and exhume keys inside images\n  resizefs | extend the size of existing tomb volumes\n  qrencode | engrave keys into printable qrcode sheets\n  plocate  | fast search of file names inside tombs\n  recoll   | fast search of file contents inside tombs\n  unoconv  | fast search of contents in PDF and DOC files\n  lesspipe | fast search of contents in compressed archives\n  haveged  | fast entropy generation for key forging\n\nAs for requirements, also optional tools may be easy to install using\nthe packages provided by each distribution.\n\nOnce any of the above is installed Tomb will find the tool automatically.\n\n# Extras\n\nTomb comes with a bunch of extra tools that contribute to enhance its\nfunctionality or integrate it into particular system environments.\n\n## extras/gtk-tray\n\nThe Gtk tray adds a nifty tomb skull into the desktop toolbar: one can\nuse it to close, slam and explore the open tomb represented by it.\n\nWhen using pinentry-gtk-2 it also adds a little skull on the password\ninput, useful to not confuse it with other password inputs.\n\nTo have it change directory `extras/gtk-tray` then\n\n 1. make sure libnotify and gtk+-2.0 dev packages are available\n 2. run `make` inside the directory to build `tomb-gtk-tray`\n 3. run `sudo make install` (default PREFIX is `/usr/local`)\n 4. start `tomb-gtk-tray tombname` after the tomb is open\n\nOf course, one can include the launch of tomb-gtk-tray scripts.\n\n## extras/qt-tray\n\nThe QT tray adds a tomb tray in a QT desktop toolbar. It requires at\nleast QT libraries of version 5.4 or above.\nBuild with 'qmake' and then 'make'.\n\n## extras/kdf-keys\n\nThe KDF wrapper programs allows one to use KDF rounds on passwords in\norder to obstruct dictionary based and similar brute-forcing attacks.\n\nIn case an attacker comes in possession of both a tomb and its key,\nthe easy to memorize password can be guessed by rapidly trying\ndifferent combinations. With KDF every try will require a significant\namount of computation that will slow down the process avoiding tight\nloops and in fact making such attacks very onerous and almost\nimpossible.\n\nTo have it enter `extras/kdf-keys` then\n\n 1. make sure libgcrypt dev packages are available\n 2. run `make` inside the directory to build tomb-kdb-* executables\n 3. run `sudo make install` (default PREFIX is `/usr/local`)\n 4. use `--kdf 100` when forging a key (tune the number to your cpu)\n\nKDF keys are recognized automatically by Tomb, which will always need\nthe `extras/kdf-keys` program to be installed on a machine in order to\nopen the Tomb.\n\nPlease note that it doesn't makes much sense to use KDF keys and\nsteganography, since the latter will invalidate the brute-forcing\nprotection. For details on the issue see [KNOWN_BUGS.md](KNOWN_BUGS).\n\n## extras/translations/\n\nThere are translations available for Tomb and they are installed by\ndefault. If you wish to update them manually navigate to extras/po\nand run 'make install' as root:\n\n    cd extras/translations\n    sudo make install\n\n## extras/gtomb/\n\nThis is a minimalistic graphical user interface scripted in ZSh\ndepending from Zenity to display dialog boxes. It covers all basic\noperations in Tomb and facilitates the setup of hooks.\n\n    cd extras/gtomb\n    ./gtomb\n\n# Tomb support in other applications\n\nCan Tomb be used by other applications?\n\nSure as Hell it can! Licensing issues aside ([GNU GPLv3+](COPYING)\nterms) Tomb provides machine-readable output and interaction via some\nflags:\n\nflag            | function\n--------------- | ------------------------------------------------\n --no-color     | avoids coloring output to allow parsing\n --unsafe       | allows passwords options and cleartext key from stdin\n --tomb-pwd     | specify the key password as argument\n --tomb-old-pwd | specify the old key password as argument\n -k cleartext   | reads the unencrypted key from stdin\n\nYet please consider that these flags may introduce vulnerabilities and\nother people logged on the same system can easily log your passwords\nwhile such commands are executing.\nWe only recommend using the pinentry to input your passwords.\n\nAt the time of writing another free software graphical application\nsupports opening and closing Tombs via a plugin installed by\ndefault: [zuluCrypt](https://mhogomchungu.github.io/zuluCrypt/). One\nneeds to activate the Tomb plugin included in the zuluCrypt source to\nbe able to create, open and close tombs. Beware zuluCrypt may miss\nadvanced Tomb functionalities that are only available from the\ncommand-line.\n\n## Python\n\n![](extras/images/python_for_tomb.png)\n\nA Python wrapper is under development and already usable, but it\nintroduces some vulnerabilities mentioned above. Find it in\n`extras/tomber`. For more information see [PYTHON](extras/PYTHON.md).\n\n## Let us know!\n\nIf you plan to develop any kind of wrapper for Tomb you are welcome to\nlet us know. Tomb is really meant to be maintained as a minimal tool\nfor long-term compatibility when handling something so delicate as our\nsecrets. For anything else we rely on your own initiative.\n\nHappy hacking! ;^)\n"
        },
        {
          "name": "KNOWN_BUGS.md",
          "type": "blob",
          "size": 4.5849609375,
          "content": "# Password bug in X11 when using pinentry-curses\n## Issue with Tomb version 2.6 and 2.7\n\nThis bug affects systems with a running X11 DISPLAY, but where only\npinentry-ncurses is installed. It wrongly reads the input password: no\nmatter what string is chosen, the password becomes:\n\ntomb [W] Detected DISPLAY, but only pinentry-curses is found.\n\nFollowing the fix in Tomb 2.8 affected users will need to use the line\nabove as password to open their tomb and should change their key with\na new password using 'tomb passwd'.\n\n# Cryptsetup change of default to luks2\n## Issue opening tombs with cryptsetup >2.0\n\nTomb uses the cryptsetup LUKS volume header default to type luks1\nwhich has been for long the default in cryptsetup. But starting from\ncryptsetup v2.1 a new default has been introduced (luks2) and the\n--type option added to specify the old luks1.\n\nUsing Tomb version 2.6 (and future releases) the problem opening tombs\nusing recent GNU/Linux distributions is fixed.\n\n# Whitespace in KDF passwords\n## Issue affecting passwords used with PBKDF2 keys (<2.6)\n\n Up until and including Tomb's version 2.5 the PBKDF2 wrapper for keys\n in Tomb has a bug affecting passwords that contain whitespace. Since\n the passwords are trimmed at the first whitespace, this makes them\n weaker, while fortunately the KDF transformation still applies.\n\n This issue is fixed in Tomb version 2.6: all users adopting KDF keys\n that have passwords containing whitespace should change them,\n knowing that their \"old password\" is trimmed until the whitespace.\n\n Users adopting GPG keys or plain (without KDF wrapper) can ignore\n this bug.\n\n# Vulnerability to password bruteforcing\n## Issue affecting keys used in steganography\n\n An important part of Tomb's security model is to *make it hard for\n attackers to enter in possession of both key and data storage*: once\n that happens, bruteforcing the password can be relatively easy.\n\n Protection from bruteforcing is provided by the KDF module that can\n be optionally compiled in `extras/kdf-keys` and installed.\n\n If a key is buried in an image and then the image is stolen, the KDF\n protection does not works because *attackers can bruteforce easily\n using steghide dictionary attacks*: once found the password is the\n same for the steg crypto and the key crypto.\n\n Users should keep in mind these issues when planning their encryption\n scheme and, when relying on steganography, keep the image always\n mixed in the same folder with many more images since that will be the\n multiplier making it slightly harder to bruteforce their password.\n\n In most cases consider that *password bruteforce is a feasible attack\n vector on keys*. If there are doubts about a key being compromised is\n a good practice to change it using the `setkey` command on a secure\n machine, possibly while off-line or in single user mode.\n\n# Ending newline in tomb keys\n## 2.2\n\n When used to forge new keys, Tomb version 2.2 incorrectly added a new\n line ('\\n', 0x0A) character at the end of each key's secret sequence\n before encoding it with GnuPG. This does not affect Tomb regression\n and compatibility with other Tomb versions as this final newline is\n ignored in any case, but third party software may have\n problems. Those writing a software that supports opening Tomb files\n should always ignore the final newline when present in the secret\n material obtained after decoding the key with the password.\n \n# Versioning and stdin key\n## 1.5\n\n Due to distraction tomb version 1.5 displays its version as 1.4.\n Also version 1.5 did not work when using -k - to pipe keys from\n stdin, plus left the encrypted keys laying around in RAM (tmpfs).\n This was a minor vulnerability fixed in 1.5.1.\n\n\n# Key compatibility broken\n## 1.3 and 1.3.1\n\n Due to an error in the creation and decoding of key files, release\n versions 1.3 and 1.3.1 cannot open older tombs, plus the tombs created\n with them will not be opened with older and newer versions of Tomb.\n\n This bug was fixed in commit 551a7839f500a9ba4b26cd63774019d91615cb16\n\n Those who have created tombs with older versions can simply upgrade\n to release 1.4 (and any other following release) to fix this issue\n and be able to operate their tombs normally.\n\n Those who have used Tomb 1.3 or 1.3.1 to create new tombs should use\n Tomb version 1.3.1 (available from https://files.dyne.org/tomb) to\n open them and then migrate the contents into a new tomb created using\n the latest stable Tomb version.\n\n This bug was due to a typo in the code which appended a GnuPG status\n string to the content of keys.  All users of Tomb 1.3.* should pay\n particular attention to this issue, however that release series was\n out as latest for less than a month.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.1845703125,
          "content": "PROG = tomb\nPREFIX ?= /usr/local\nMANDIR ?= ${PREFIX}/share/man\n\ndeps:\n\t@if [ -r /etc/debian_version ]; then \\\n\tapt-get install -qy zsh cryptsetup file gnupg pinentry-curses; fi\n\t@if [ -r /etc/fedora-release ]; then \\\n\tyum install -y zsh cryptsetup file gnupg pinentry-curses; fi\n\t@if [ -r /etc/alpine-release ]; then \\\n\tapk add zsh cryptsetup file gpg pinentry-tty e2fsprogs findmnt; fi\n\nall:\n\t@echo\n\t@echo \"Tomb is a script and does not need compilation, it can be simply executed.\"\n\t@echo\n\t@echo \"To install it in /usr/local together with its manpage use 'make install'.\"\n\t@echo\n\t@echo \"To run Tomb one needs to have some tools installed on the system:\"\n\t@echo \"Sudo, cryptsetup, pinentry and gnupg.\"\n\t@echo\n\ninstall:\n\tinstall -Dm755 ${PROG} ${DESTDIR}${PREFIX}/bin/${PROG}\n\tinstall -Dm644 doc/${PROG}.1 ${DESTDIR}${MANDIR}/man1/${PROG}.1\n\t@echo\n\t@echo \"Tomb is installed successfully. To install language translations, make sure\"\n\t@echo \"gettext is also installed, then 'cd extras/translations' and 'make install' there.\"\n\t@echo\n\t@echo \"Look around the extras/ directory, it contains other interesting modules.\"\n\t@echo\n\ntest:\n\tmake -C extras/test\n\nlint:\n\tshellcheck -s bash -e SC1058,SC1073,SC1072,SC1009 tomb\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.48046875,
          "content": "# Tomb: The Linux Crypto Undertaker\n\n[![Build Status](https://github.com/dyne/tomb/actions/workflows/linux.yml/badge.svg)](https://github.com/dyne/Tomb/actions)\n<!-- [![Build Status](https://github.com/dyne/tomb/actions/workflows/portable.yml/badge.svg)](https://github.com/dyne/Tomb/actions) -->\n\nMinimalistic command line tool based on Linux dm-crypt and LUKS, trusted by hackers since 2007.\n\nYou can keep your volumes secure and easily manageable with simple commands.\n\n![tomb's logo](https://github.com/dyne/Tomb/blob/master/extras/images/monmort.png)\n\nCreate a new 120MiB `secret.tomb` folder and lock it with a new `secret.tomb.key` file.\n```\n $ tomb dig   -s 120 secret.tomb\n $ tomb forge -k secret.tomb.key\n $ tomb lock  -k secret.tomb.key secret.tomb\n```\nTo open it, do\n```\n $ tomb open  -k secret.tomb.key secret.tomb\n```\nAnd after you are done\n```\n $ tomb close\n```\nOr, if you are in a hurry, kill all processes with open files inside your tomb and close it.\n```\n $ tomb slam\n```\n## üìñ [Get started on dyne.org/tomb](https://dyne.org/tomb)\n\n<a href=\"https://dyne.org/tomb\"><img src=\"https://files.dyne.org/software_by_dyne.png\" width=\"30%\"></a>\n\nMore information in `man tomb` and on [dyne.org/docs/tomb](https://dyne.org/docs/tomb).\n\n### üíæ [Download from files.dyne.org/tomb](https://files.dyne.org/tomb/)\n\nUse only stable and signed releases in production!\n\nTomb's development is community-based!\n\n## ü§èüèΩ How can you help\n\nDonations are very welcome on [dyne.org/donate](https://www.dyne.org/donate)\n\nTranslations are also welcome: see our simple [translation guide](https://github.com/dyne/Tomb/blob/master/extras/translations/README.md)\n\nTomb's code is short and readable: don't be afraid to inspect it! If you plan to submit a PR, please remember that this is a minimalist tool, and the code should be short and readable. Also, first, read our small intro to [Tomb's coding style](doc/HACKING.txt).\n\nWe have a [space for issues](https://github.com/dyne/Tomb/issues) open for detailed bug reports. Always include the Tomb version being used when filing a case, please.\n\nThere is also a [space for discussion](https://github.com/dyne/Tomb/discussions) of new features, desiderata and whatnot on github.\n\n# Licensing\n\nTomb is Copyright (C) 2007-2024 by the Dyne.org Foundation and maintained by [Jaromil](https://github.com/jaromil). The [AUTHORS](AUTHORS.md) file contains more information on all the developers involved. The license is GNU Public License v3.\n\n## [More info on dyne.org/tomb](https://dyne.org/tomb)\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "extras",
          "type": "tree",
          "content": null
        },
        {
          "name": "tomb",
          "type": "blob",
          "size": 103.1005859375,
          "content": "#!/usr/bin/env zsh\n#\n# Tomb, the Crypto Undertaker\n#\n# A commandline tool to easily operate encryption of secret data\n#\n\n# {{{ License\n\n# Copyright (C) 2007-2024 Dyne.org Foundation\n#\n# Tomb is designed, written and maintained by Denis Roio <jaromil@dyne.org>\n#\n# Please refer to the AUTHORS file for more information.\n#\n# This source code is free software; you can redistribute it and/or\n# modify it under the terms of the GNU Public License as published by\n# the Free Software Foundation; either version 3 of the License, or\n# (at your option) any later version.\n#\n# This source code is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\tPlease refer\n# to the GNU Public License for more details.\n#\n# You should have received a copy of the GNU Public License along with\n# this source code; if not, , see <https://www.gnu.org/licenses/>.\n\n# }}} - License\n\n# {{{ Global variables\n\ntypeset VERSION=\"2.11.0\"\ntypeset DATE=\"Jul/2024\"\ntypeset TOMBEXEC=$0\ntypeset TMPDIR=${${TMPPREFIX%/*}:-/tmp}\n# TODO: configure which tmp dir to use from a cli flag\n\n# Tomb is using some global variables set by the shell:\n# TMPPREFIX, UID, GID, PATH, TTY, USERNAME\n# You can grep 'global variable' to see where they are used.\n\n# Keep a reference of the original command line arguments\ntypeset -a OLDARGS\nfor arg in \"${(@)argv}\"; do OLDARGS+=(\"$arg\"); done\n\n# Special command requirements\ntypeset -a DD WIPE PINENTRY SUDO\nDD=(dd)\nWIPE=(rm -f)\n\n# load zsh regex module\nzmodload zsh/mapfile\nzmodload -F zsh/stat b:zstat\n\n# make sure variables aren't exported\nunsetopt allexport\n\n# Flag optional commands if available (see _ensure_dependencies())\ntypeset -i KDF=1\ntypeset -i STEGHIDE=1\ntypeset -i CLOAKIFY=1\ntypeset -i DECLOAKIFY=1\ntypeset -i RESIZER=1\ntypeset -i RECOLL=1\ntypeset -i QRENCODE=1\ntypeset -i LSOF=1\ntypeset -i ACL=1\ntypeset -i ARGON2=1\n\n# Default mount options\ntypeset\t\t MOUNTOPTS=\"rw,noatime,nodev\"\n\n# Makes glob matching case insensitive\nunsetopt CASE_MATCH\n\ntypeset -AH OPTS\t\t\t  # Command line options (see main())\n\n# Command context (see _whoami())\ntypeset -H _USER\t\t\t  # Running username\ntypeset -Hi _UID\t\t\t  # Running user identifier\ntypeset -Hi _GID\t\t\t  # Running user group identifier\ntypeset -H  _TTY\t\t\t  # Connected input terminal\n\n# Tomb context (see is_valid_tomb())\ntypeset -H TOMBPATH\t\t\t  # Full path to the tomb\ntypeset -H TOMBDIR\t\t\t  # Directory where the tomb is\ntypeset -H TOMBFILE\t\t\t  # File name of the tomb\ntypeset -H TOMBNAME\t\t\t  # Name of the tomb\n\n# Tomb secrets\ntypeset -H TOMBKEY\t\t\t  # Encrypted key contents (see forge_key(), recover_key())\ntypeset -H TOMBKEYFILE\t\t  # Key file\t\t\t   (ditto)\ntypeset -H TOMBSECRET\t\t  # Raw deciphered key\t   (see forge_key(), gpg_decrypt())\ntypeset -H TOMBPASSWORD\t\t  # Raw tomb passphrase\t   (see gen_key(), ask_key_password())\ntypeset -H TOMBTMP\t\t\t  # Filename of secure temp just created (see _tmp_create())\n\ntypeset -aH TOMBTMPFILES\t  # Keep track of temporary files\ntypeset -aH TOMBLOOPDEVS\t  # Keep track of used loop devices\ntypeset -A TOMBFILESSTAT      # Keep track of access date attributes\n\ntypeset _MSG_FD_OVERRIDE # if set, _msg will write to this file descriptor\n\n# Make sure sbin is in PATH (man zshparam)\npath+=( /sbin /usr/sbin )\n\n# For gettext\nexport TEXTDOMAIN=tomb\n\n# }}}\n\n# {{{ Safety functions\n\n# Wrap sudo with a more visible message or apply user-supplied alternative to sudo\n_sudo() {\n\tif option_is_set --sudo; then\n               pescmd=`option_value --sudo`\n\t\tcase `basename $pescmd` in\n\t\t\t\"doas\"|\"sup\"|\"sud\"|\"pkexec\")\n\t\t\t\tcommand -v $pescmd > /dev/null || _failure \"$pescmd executable not found\"\n\t\t\t\t_verbose \"Super user execution using $pescmd\"\n\t\t\t\t${pescmd} ${@}\n\t\t\t\treturn $?\n\t\t\t\t;;\n\t\t\t\"skip\"|\"none\")\n\t\t\t\t_verbose \"Super user execution skipped (SUID caller)\"\n\t\t\t\t${@}\n\t\t\t\treturn $?\n\t\t\t\t;;\n\t\t\t *)\n\t\t\t\t_failure \"Super user execution not supported: ::1 sudo::\" \"`option_value --sudo`\"\n\t\t\t\t;;\n\t\tesac\n\n\telse\n    if [[ \"`id -u`\" = \"0\" ]]; then\n\t\t\t_verbose \"Super user execution skipped (SUID caller)\"\n\t\t\t${@}\n\t\t\treturn $?\n    elif command -v sudo 1>/dev/null 2>/dev/null; then\n\t\t  local msg=\"[sudo] Enter password for user ::1 user:: to gain superuser privileges\"\n\t\t  command -v gettext 1>/dev/null 2>/dev/null && msg=\"$(gettext -s \"$msg\")\"\n\t\t  msg=${(S)msg//::1*::/$USER}\n\t\t  [[ -n \"$SUDO_ASKPASS\" ]] && local sudo_askpass=\"--askpass\"\n\t\t  sudo $sudo_askpass -p \"\n$msg\n\n\" ${@}\n\t\t  return $?\n    elif command -v doas 1>/dev/null 2>/dev/null; then\n\t\t  local msg=\"Enter password for user ::1 user:: to gain superuser privileges\"\n\t\t  command -v gettext 1>/dev/null 2>/dev/null && msg=\"$(gettext -s \"$msg\")\"\n\t\t  msg=${(S)msg//::1*::/$USER}\n      doas ${@}\n      return $?\n    else\n      _failure \"No way found to escalate privileges to super user.\"\n    fi\n\tfi\n}\n\n# Cleanup anything sensitive before exiting.\n_endgame() {\n\n\toption_value_contains -o ro || {\n\t\t# Restore access time of sensitive files\n\t\t[[ -z $TOMBFILESSTAT ]] || _restore_stat\n\t}\n\n\t# Prepare some random material to overwrite vars\n\tlocal rr=\"$RANDOM\"\n\twhile [[ ${#rr} -lt 500 ]]; do\n\t\trr+=\"$RANDOM\"\n\tdone\n\n\t# Ensure no information is left in unallocated memory\n\tTOMBPATH=\"$rr\";\t\t unset TOMBPATH\n\tTOMBDIR=\"$rr\";\t\t unset TOMBDIR\n\tTOMBFILE=\"$rr\";\t\t unset TOMBFILE\n\tTOMBNAME=\"$rr\";\t\t unset TOMBNAME\n\tTOMBKEY=\"$rr\";\t\t unset TOMBKEY\n\tTOMBKEYFILE=\"$rr\";\t unset TOMBKEYFILE\n\tTOMBSECRET=\"$rr\";\t unset TOMBSECRET\n\tTOMBPASSWORD=\"$rr\";\t unset TOMBPASSWORD\n\n\t# Clear temporary files\n\tfor f in $TOMBTMPFILES; do\n\t\t${=WIPE} \"$f\"\n\tdone\n\tunset TOMBTMPFILES\n\n\t# Clear information regarding loop devices\n\t# No need for an explicit detach as cryptsetup\n\t# sets the AUTOCLEAR flag\n\tunset TOMBLOOPDEVS\n}\n\n# Trap functions for the _endgame event\nTRAPINT()  { _endgame INT;\t}\nTRAPEXIT() { _endgame EXIT;\t}\nTRAPHUP()  { _endgame HUP;\t}\nTRAPQUIT() { _endgame QUIT;\t}\nTRAPABRT() { _endgame ABORT;    }\nTRAPKILL() { _endgame KILL;\t}\nTRAPPIPE() { _endgame PIPE;\t}\nTRAPTERM() { _endgame TERM;\t}\nTRAPSTOP() { _endgame STOP;\t}\n\n_is_found() {\n\t# returns 0 if binary is found in path\n\t[[ -z $1 ]] && return 1\n\tcommand -v \"$1\" 1>/dev/null 2>/dev/null\n\treturn $?\n}\n\n# Track access and modification time of tomb files.\n# $1: file to track\n# date format: seconds since Epoch\n# stat format: <last access>:<last modified>\n_track_stat() {\n    local file=\"$1\"\n    local stat=$(stat --format=\"%X:%Y\" \"$file\")\n    TOMBFILESSTAT+=(\"$file\" \"$stat\")\n}\n\n# Restore files stats\n_restore_stat() {\n    local file stat\n    for file stat in \"${(@kv)TOMBFILESSTAT}\"; do\n        stats=(\"${(@s.:.)stat}\")\n        _verbose \"Restoring access and modification time for ::1 file::\" $file\n        [[ -z \"${stats[1]}\" ]] || touch -a --date=\"@${stats[1]}\" \"$file\"\n        [[ -z \"${stats[2]}\" ]] || touch -m --date=\"@${stats[2]}\" \"$file\"\n    done\n}\n\n# Identify the running user\n# Set global variables _UID, _GID, _TTY, and _USER, either from the\n# command line, -U, -G, -T, respectively, or from the environment.\n# Also update USERNAME and HOME to maintain consistency.\n_whoami() {\n\n\t# Set username from UID or environment\n\t_USER=$SUDO_USER\n\t[[ -z $_USER ]] && { _USER=$USERNAME }\n\t[[ -z $_USER ]] && { _USER=$(id -un) }\n\t[[ -z $_USER ]] && {\n\t\t_failure \"Failing to identify the user who is calling us\" }\n\n\t# Get GID from option -G or the environment\n\toption_is_set -G \\\n\t\t&& _GID=$(option_value -G) || _GID=$(id -g $_USER)\n\n\t# Get UID from option -U or the environment\n\toption_is_set -U \\\n\t\t&& _UID=$(option_value -U) || _UID=$(id -u $_USER)\n\n\t_verbose \"Identified caller: ::1 username:: (::2 UID:::::3\tGID::)\" $_USER $_UID $_GID\n\n\t# Update USERNAME accordingly if possible\n\t# [[ $EUID == 0 && $_USER != $USERNAME ]] && {\n\t#\t  _verbose \"Updating USERNAME from '::1 USERNAME::' to '::2 _USER::')\" $USERNAME $_USER\n\t#\t  USERNAME=$_USER\n\t# }\n\n\t# Force HOME to _USER's HOME if necessary\n\tlocal home=`_get_home $_USER`\n\t[[ $home == $HOME ]] || {\n\t\t_verbose \"Updating HOME to match user's: ::1 home:: (was ::2 HOME::)\" \\\n\t\t\t\t $home $HOME\n\t\tHOME=$home }\n\n\t# Get connecting TTY from option -T or the environment\n\toption_is_set -T && _TTY=$(option_value -T)\n\t[[ -z $_TTY ]]\t && _TTY=$TTY\n\n}\n\n# Provide a random filename in shared memory\n_tmp_create() {\n\t[[ -d \"$TMPDIR\" ]] || {\n\t\t# we create the tempdir with the sticky bit on\n\t\t_sudo mkdir -m 1777 \"$TMPDIR\"\n\t\t[[ $? == 0 ]] || _failure \"Fatal error creating the temporary directory: ::1 temp dir::\" \"$TMPDIR\"\n\t}\n\n\t# We're going to add one more $RANDOM for each time someone complains\n\t# about this being too weak of a random.\n\ttfile=\"${TMPDIR}/$RANDOM$RANDOM$RANDOM$RANDOM\"\t# Temporary file\n\tumask 066\n\t[[ $? == 0 ]] || {\n\t\t_failure \"Fatal error setting the permission umask for temporary files\" }\n\n\t[[ -r \"$tfile\" ]] && {\n\t\t_failure \"Someone is messing up with us trying to hijack temporary files.\" }\n\n\ttouch \"$tfile\"\n\t[[ $? == 0 ]] || {\n\t\t_failure \"Fatal error creating a temporary file: ::1 temp file::\" \"$tfile\" }\n\n\t_verbose \"Created tempfile: ::1 temp file::\" \"$tfile\"\n\tTOMBTMP=\"$tfile\"\n\tTOMBTMPFILES+=(\"$tfile\")\n\n\treturn 0\n}\n\n# Check if a *block* device is encrypted\n# Check if a *block* device is a zram device\n# Synopsis: _is_zramswap /path/to/block/device\n# Return 0 if it is a zramswap\n# Return 1 if it is not a zramswap\n_is_zramswap() {\n\tlocal\tb=$1 # Path to a block device\n\n\t# check if device b is a zram block device\n\tzramctl --raw -o NAME | grep \"^$b\" >/dev/null\n\n\treturn $?\n}\n\n# Check if a zram device uses the writeback feature that writes data onto a disk\n# Synopsis: _zramswap_uses_writeback /path/to/block/device\n# Return 0 if the zram device writes to disk\n# Return 1 if the zram device does not write to disk\n_zramswap_uses_writeback() {\n\tlocal\tb=$1 # Path to a block device\n\tlocal\tm=\"\" # major device number\n\tlocal\tn=\"\" # minor device number\n\n\tread n m < <(stat -c '%T %t' $b) # get major and minor device number in hex\n\tprintf -v m %d $((16#$m)) # get major device number in decimal\n\tprintf -v n %d $((16#$n)) # get minor device number in decimal\n\n\tif grep '^none$' \"/sys/dev/block/$m:$n/backing_dev\" > /dev/null; then\n\t\treturn 1\n\tfi\n\n\treturn 0\n}\n\n# Check if a *block* device is a zram device\n# Synopsis: _is_zramswap /path/to/block/device\n# Return 0 if it is a zramswap\n# Return 1 if it is not a zramswap\n_is_zramswap() {\n\tlocal\tb=$1 # Path to a block device\n\n\tzramctl --raw -o NAME | grep \"^$b\" >/dev/null\n\t# @todo How to do this without zramctl?\n\t# - device node major is dynamically allocated to zram0\n\t# - in /sys/ there seems to be no file identifying a zram device\n\n\treturn $?\n}\n\n# Check if a zram device uses the writeback feature that writes data onto a disk\n# Synopsis: _zramswap_uses_writeback /path/to/block/device\n# Return 0 if the zram device writes to disk\n# Return 1 if the zram device does not write to disk\n_zramswap_uses_writeback() {\n\tlocal\tb=$1 # Path to a block device\n\tlocal\tm=\"\" # major device number\n\tlocal\tn=\"\" # minor device number\n\n\tread n m < <(stat -c '%T %t' $b) # get major and minor device number in hex\n\tprintf -v m %d $((16#$m)) # get major device number in decimal\n\tprintf -v n %d $((16#$n)) # get minor device number in decimal\n\n\tif grep '^none$' \"/sys/dev/block/$m:$n/backing_dev\" > /dev/null; then\n\t\treturn 1\n\tfi\n\n\treturn 0\n}\n\n# Synopsis: _is_encrypted_block /path/to/block/device\n# Return 0 if it is an encrypted block device\n_is_encrypted_block() {\n\tlocal\t b=$1 # Path to a block device\n\tlocal\t s=\"\" # lsblk option -s (if available)\n\n\t# Issue #163\n\t# lsblk --inverse appeared in util-linux 2.22\n\t# but --version is not consistent...\n\tlsblk --help | grep -Fq -- --inverse\n\t[[ $? -eq 0 ]] && s=\"--inverse\"\n\n\t_sudo lsblk $s -o type -n $b 2>/dev/null \\\n\t\t| grep -Eq '^crypt$'\n\n\treturn $?\n}\n\n# Check if swap is activated\n# Return 0 if NO swap is used, 1 if swap is used.\n# Return 1 if any of the swaps is not encrypted.\n# Return 2 if swap(s) is(are) used, but ALL encrypted or zramswap without writeback to disk.\n# Use _check_swap in functions. It will call this function and\n# exit if unsafe swap is present.\n_ensure_safe_swap() {\n\n\tlocal -i r=1\t# Return code: 0 no swap, 1 unsafe swap, 2 encrypted\n\tlocal -a swaps\t# List of swap partitions\n\tlocal\t bone is_crypt\n\n\tswaps=\"$(awk '/^\\// { print $1 }' /proc/swaps 2>/dev/null)\"\n\t[[ -z \"$swaps\" ]] && return 0 # No swap partition is active\n\n\t_message \"An active swap partition is detected...\"\n\tfor s in $=swaps; do\n\t\tif _is_encrypted_block $s; then\n\t\t\tr=2;\n\t\telif _is_zramswap $s; then\n\t\t\tif _zramswap_uses_writeback $s; then\n\t\t\t\t# We're dealing with unencrypted stuff written to disk.\n\t\t\t\t# Maybe it lives on an encrypted filesystem anyway.\n\t\t\t\t# @todo verify it's actually written to an encrypted FS\n\t\t\t\t# Well, no: bail out.\n\t\t\t\t_message \"Found zramswap with writeback enabled.\"\n\t\t\t\tr=1; break;\n\t\t\telse\n\t\t\t\t_message \"Found zramswap without writeback to disk.\"\n\t\t\t\tr=2\n\t\t\tfi\n\t\telse\n\t\t\t# We're dealing with unencrypted stuff written to disk.\n\t\t\t# Maybe it lives on an encrypted filesystem anyway.\n\t\t\t# @todo: verify it's actually on an encrypted FS (see #163 and !189)\n\t\t\t# Well, no: bail out.\n\t\t\tr=1; break;\n\t\tfi\n\tdone\n\n\tif [[ $r -eq 2 ]]; then\n\t\t_success \"The undertaker found that all swap partitions are encrypted. Good.\"\n\telse\n\t\t_warning \"This poses a security risk.\"\n\t\t_warning \"You can deactivate all swap partitions using the command:\"\n\t\t_warning \" swapoff -a\"\n\t\t_warning \"[#163] I may not detect plain swaps on an encrypted volume.\"\n\t\t_warning \"But if you want to proceed like this, use the -f (force) flag.\"\n\tfi\n\treturn $r\n\n}\n\n# Wrapper to allow encrypted swap and remind the user about possible\n# data leaks to disk if swap is on, which shouldn't be ignored. It could\n# be run once in main(), but as swap evolves, it's better to run it\n# whenever swap may be needed.\n# Exit if unencrypted swap is active on the system.\n_check_swap() {\n\tif ! option_is_set -f && ! option_is_set --ignore-swap; then\n\t\t_ensure_safe_swap\n\t\tcase $? in\n\t\t\t0|2)\t # No, or encrypted swap\n\t\t\t\treturn 0\n\t\t\t\t;;\n\t\t\t*)\t\t # Unencrypted swap\n\t\t\t\t_failure \"Operation aborted.\"\n\t\t\t\t;;\n\t\tesac\n\tfi\n}\n\npinentry_assuan_getpass() {\n\t# simply prints out commands for pinentry's stdin to activate the\n\t# password dialog\n\tcat <<EOF\nOPTION ttyname=$TTY\nOPTION lc-ctype=$LANG\nSETTITLE $title\nSETDESC $description\nSETPROMPT Password:\nGETPIN\nEOF\n}\n\n# Ask user for a password\n# Wraps around the pinentry command, from the GnuPG project, as it\n# provides better security and conveniently use the right toolkit.\nask_password() {\n\n\tlocal description=\"$1\"\n\tlocal title=\"${2:-Enter tomb password.}\"\n\tlocal output\n\tlocal password\n\tlocal gtkrc\n\tlocal theme\n\tlocal pass_asked\n\n\t# Distributions have broken wrappers for pinentry: they do\n\t# implement fallback, but they disrupt the output somehow.\tWe are\n\t# better off relying on less intermediaries, so we implement our\n\t# own fallback mechanisms. Pinentry supported: curses, gtk-2, qt4, qt5\n\t# and x11.\n\n\t# make sure LANG is set, default to C\n\tLANG=${LANG:-C}\n\n\t_verbose \"asking password with tty=$TTY lc-ctype=$LANG\"\n\n\tpass_asked=0\n\n\twhile true; do\n\t\t[[ ! -z $WAYLAND_DISPLAY ]] && {\n\t\t\t_verbose \"wayland display detected\"\n\t\t\t_is_found \"pinentry-gnome3\" && {\n\t\t\t\t_verbose \"using pinentry-gnome3 on wayland\"\n\t\t\t\toutput=$(pinentry_assuan_getpass | pinentry-gnome3)\n\t\t\t\tbreak; }\n\t\t\t# TODO: pinentry on KDE running in wayland?\n\t\t}\n\t\t[[ ! -z $DISPLAY ]] && [[ $pass_asked == 0 ]] && {\n\t\t\t_verbose \"X11 display detected\"\n\t\t\t_is_found \"pinentry-gtk-2\" && {\n\t\t\t\t_verbose \"using pinentry-gtk2\"\n\t\t\t\toutput=$(pinentry_assuan_getpass | pinentry-gtk-2)\n\t\t\t\tbreak; }\n\t\t\t_is_found \"pinentry-x11\" && {\n\t\t\t\t_verbose \"using pinentry-x11\"\n\t\t\t\toutput=$(pinentry_assuan_getpass | pinentry-x11)\n\t\t\t\tbreak; }\n\t\t\t_is_found \"pinentry-gnome3\" && {\n\t\t\t\t_verbose \"using pinentry-gnome3 on X11\"\n\t\t\t\toutput=$(pinentry_assuan_getpass | pinentry-gnome3)\n\t\t\t\tbreak; }\n\t\t\t_is_found \"pinentry-qt5\" && {\n\t\t\t\t_verbose \"using pinentry-qt5\"\n\t\t\t\toutput=$(pinentry_assuan_getpass | pinentry-qt5)\n\t\t\t\tbreak; }\n\t\t\t_is_found \"pinentry-qt4\" && {\n\t\t\t\t_verbose \"using pinentry-qt4\"\n\t\t\t\toutput=$(pinentry_assuan_getpass | pinentry-qt4)\n\t\t\t\tbreak; }\n\t\t}\n\t\t_verbose \"no display detected\"\n\t\t_is_found \"pinentry-curses\" && {\n\t\t\t_verbose \"using pinentry-curses with no display\"\n\t\t\toutput=$(pinentry_assuan_getpass | pinentry-curses)\n\t\t\tbreak; }\n\t\t_is_found \"pinentry-tty\" && {\n\t\t\t_verbose \"using pinentry-tty with no display\"\n\t\t\toutput=$(pinentry_assuan_getpass | pinentry-tty)\n\t\t\tbreak; }\n\t\t# TODO: fallback using read -s - and beware\n\t\t# using read with or without -r may break\n\t\t# passwords, so this must be covered by a test\n\t\t# for compatibility\n\t\t_failure \"Cannot find any pinentry and no DISPLAY detected.\"\n\t\texit 1\n\tdone\n\n\t# parse the pinentry output\n\tlocal pinentry_error\n\tfor i in ${(f)output}; do\n\t\t[[ \"$i\" =~ \"^ERR.*\" ]] && {\n\t\t\tpinentry_error=\"${i[(w)3]}\"\n\t\t}\n\n\t\t# here the password is found\n\t\t[[ \"$i\" =~ \"^D .*\" ]] && password=\"${i##D }\";\n\tdone\n\n\t[[ ! -z $pinentry_error ]] && [[ -z $password ]] && {\n\t\t_warning \"Pinentry error: ::1 error::\" ${pinentry_error}\n\t\tprint \"canceled\"\n\t\treturn 1\n\t}\n\n\t[[ -z $password ]] && {\n\t\t_warning \"Empty password\"\n\t\tprint \"empty\"\n\t\treturn 1\n\t}\n\n\tprint \"$password\"\n\treturn 0\n}\n\n# Check if a filename is a valid tomb\nis_valid_tomb() {\n\n\t_verbose \"is_valid_tomb ::1 tomb file::\" $1\n\n\t# First argument must be the path to a tomb\n\t[[ ! -z $1 ]] ||\t_failure \"Tomb file is missing from arguments.\"\n\n\tlocal _fail=0\n\t# Tomb file must be a readable, writable, non-empty regular file.\n\t# If passed the \"ro\" mount option, the writable check is skipped.\n\twhile true; do\n\t\toption_value_contains -o ro || {\n\t\t\t[[ ! -w \"$1\" ]] && {\n\t\t\t\t_warning \"Tomb file is not writable: ::1 tomb file::\" $1\n\t\t\t\t_fail=1; break; }\n\t\t}\n\t\t_verbose \"tomb file is readable\"\n\t\t[[ ! -f \"$1\" ]] && {\n\t\t\t_warning \"Tomb file is not a regular file: ::1 tomb file::\" $1\n\t\t\t_fail=1; break; }\n\t\t_verbose \"tomb file is a regular file\"\n\t\t[[ ! -s \"$1\" ]] && {\n\t\t\t_warning \"Tomb file is empty (zero length): ::1 tomb file::\" $1\n\t\t\t_fail=1; break; }\n\t\t_verbose \"tomb file is not empty\"\n\t\tbreak;\n\tdone\n\t[[ $_fail == 1 ]] && {\n\t\t_failure \"Tomb command failed: ::1 command name::\" $subcommand\n\t}\n\n\t# Tomb file may be a LUKS FS (or we are creating it)\n\t[[ \"`file $1`\" =~ \"luks encrypted file\" ]] || {\n\t\t_message \"File is not yet a tomb: ::1 tomb file::\" $1 }\n\n\t# We set global variables\n\ttypeset -g TOMBPATH TOMBDIR TOMBFILE TOMBNAME TOMBMAPPER\n\n\tTOMBPATH=\"$1\"\n\n\tTOMBDIR=$(dirname $TOMBPATH)\n\n\tTOMBFILE=$(basename $TOMBPATH)\n\n\t# The tomb name is TOMBFILE without an extension and underscores instead of spaces (for mount and cryptsetup)\n\t# It can start with dots: ..foo bar baz.tomb -> ..foo_bar_baz\n\tTOMBNAME=${${TOMBFILE// /_}%.*}\n\t# use the entire filename if the previous transformation returns\n\t# an empty string. This handles the corner case of tomb being\n\t# hidden files (starting with a dot) and have no extension (only\n\t# one dot in string)\n\tTOMBNAME=${TOMBNAME:-${TOMBFILE}}\n\t[[ -z $TOMBNAME ]] &&\n\t\t_failure \"Tomb won't work without a TOMBNAME.\"\n\n\t# checks if Tomb already mounted (or we cannot alter it)\n\tlocal maphash=`realpath $TOMBPATH | sha256sum`\n\tlo_check # fills TOMBLOOP with next loop if available\n\tTOMBMAPPER=\"tomb.$TOMBNAME.${maphash[(w)1]}.`basename $TOMBLOOP`\"\n\tlocal mounted_tombs=(`list_tomb_mounts`)\n\tlocal usedmapper\n\tfor t in ${mounted_tombs}; do\n\t\tusedmapper=`basename \"${t[(ws:;:)1]}\"`\n\t\t[[ \"${usedmapper%.*}\" == \"${TOMBMAPPER%.*}\" ]] &&\n\t\t\t_failure \"Tomb file already in use: ::1 tombname::\" $TOMBPATH\n\tdone\n\t_verbose \"Mapper: ::1 mapper::\" $TOMBMAPPER\n\n\t_verbose \"tomb file is not currently in use\"\n\n\t_message \"Valid tomb file found: ::1 tomb path::\" $TOMBPATH\n\treturn 0\n}\n\n# $1 is the tomb file which needs a loop device\nlo_check() {\n\ttpath=\"$1\"\n\n\t# check if we have support for loop mounting\n\tTOMBLOOP=`_sudo losetup -f`\n\t[[ $? = 0 ]] || {\n\t\t_warning \"Loop mount of volumes is not possible on this machine, this error\"\n\t\t_warning \"often occurs on VPS and kernels that don't provide the loop module.\"\n\t\t_warning \"It is impossible to use Tomb on this machine under these conditions.\"\n\t\t_failure \"Operation aborted.\"\n\t}\n\n\t[[ \"$tpath\" == \"\" ]] && return 0\n\n\tTOMBLOOPDEVS+=(\"$TOMBLOOP\") # add to array of lodevs used\n\n\treturn 0\n}\n\n# eventually used for debugging\ndump_secrets() {\n\tprint \"TOMBPATH: $TOMBPATH\"\n\tprint \"TOMBNAME: $TOMBNAME\"\n\n\tprint \"TOMBKEY len: ${#TOMBKEY}\"\n\tprint \"TOMBKEYFILE: $TOMBKEYFILE\"\n\tprint \"TOMBSECRET len: ${#TOMBSECRET}\"\n\tprint \"TOMBPASSWORD: $TOMBPASSWORD\"\n\n\tprint \"TOMBTMPFILES: ${(@)TOMBTMPFILES}\"\n\tprint \"TOMBLOOPDEVS: ${(@)TOMBLOOPDEVS}\"\n}\n\n# }}}\n\n# {{{ Commandline interaction\n\nusage() {\n\t_print \"Syntax: tomb [options] command [arguments]\"\n\techo\n\t_print \"Commands:\"\n\techo\n\t_print \" // Creation:\"\n\t_print \" dig          create a new empty TOMB file of size -s in MiB\"\n\t_print \" forge        create a new KEY file and set its password\"\n\t_print \" lock         installs a lock on a TOMB to use it with KEY\"\n\techo\n\t_print \" // Operations on tombs:\"\n\t_print \" open         open an existing TOMB (-k KEY file or - for stdin)\"\n\t_print \" index        update the search indexes of tombs\"\n\t_print \" search       looks for filenames matching text patterns\"\n\t_print \" list         list of open TOMBs and information on them\"\n\t_print \" ps           list of running processes inside open TOMBs\"\n\t_print \" close        close a specific TOMB (or 'all')\"\n\t_print \" slam         slam a TOMB killing all programs using it\"\n\t[[ $RESIZER == 1 ]] && {\n\t\t_print \" resize       resize a TOMB to a new size -s (can only grow)\"\n\t}\n\techo\n\t_print \" // Operations on keys:\"\n\t_print \" passwd       change the password of a KEY (needs old pass)\"\n\t_print \" setkey       change the KEY locking a TOMB (needs old key and pass)\"\n\techo\n\t[[ $QRENCODE == 1 ]] && {\n\t\t_print \" // Backup on paper:\"\n\t\t_print \" engrave      makes a QR code of a KEY to be saved on paper\"\n\t\techo\n\t}\n\t[[ $STEGHIDE == 1 || $CLOAKIFY == 1 || $DECLOAKIFY == 1 ]] && {\n\t\t_print \" // Steganography:\"\n\t\t[[ $STEGHIDE == 1 ]] && {\n\t\t\t_print \" bury         hide a KEY inside a JPEG image (for use with -k)\"\n\t\t\t_print \" exhume       extract a KEY from a JPEG image (prints to stdout)\"\n\t\t}\n\t\t[[ $CLOAKIFY == 1 ]] && {\n\t\t\t_print \" cloak        transform a KEY into TEXT using CIPHER (for use with -k)\"\n\t\t}\n\t\t[[ $DECLOAKIFY == 1 ]] && {\n\t\t\t_print \" uncloak      extract a KEY from a TEXT using CIPHER (prints to stdout)\"\n\t\t}\n\t\techo\n\t}\n\t_print \"Options:\"\n\techo\n\t_print \" -s           size of the tomb file when creating/resizing one (in MiB)\"\n\t_print \" -k           path to the key to be used ('-k -' to read from stdin)\"\n\t_print \" -n           don't launch the execution hooks found in tomb\"\n\t_print \" -p           preserve the ownership of all files in tomb\"\n\t_print \" -o           options passed to commands: open, lock, forge (see man)\"\n\t_print \" -f           force operation (i.e. even if swap is active)\"\n\t_print \" -g           use a GnuPG key to encrypt a tomb key\"\n\t_print \" -r           provide GnuPG recipients (separated by comma)\"\n\t_print \" -R           provide GnuPG hidden recipients (separated by comma)\"\n\t_print \" --sudo       super user exec alternative to sudo (doas or none)\"\n\n\t[[ $KDF == 1 ]] || [[ $ARGON2 == 1 ]] && {\n\t\t_print \" --kdf        forge keys armored against dictionary attacks (pbkdf2, argon2)\"\n\t\t_print \" --kdfiter    Number of iterations (meaning depending on KDF algorithm) (pbkdf2, argon2)\"\n\t}\n\t[[ $ARGON2 == 1 ]] && {\n\t\t_print \" --kdfmem     memory to be used (argon2)\"\n\t\t_print \" --kdfpar     number of threads (argon2)\"\n\t}\n\n\techo\n\t_print \" -h           print this help\"\n\t_print \" -v           print version, license and list of available ciphers\"\n\t_print \" -q           run quietly without printing information\"\n\t_print \" -D           print debugging information at runtime\"\n\techo\n\t_print \"For more information on Tomb read the manual: man tomb\"\n\t_print \"Please report bugs on <http://github.com/dyne/tomb/issues>.\"\n}\n\n\n# Check whether a commandline option is set.\n#\n# Synopsis: option_is_set -flag [out]\n#\n# First argument is the commandline flag (e.g., \"-s\").\n# If the second argument is present and set to 'out', print out the\n# result: either 'set' or 'unset' (useful for if conditions).\n#\n# Return 0 if is set, 1 otherwise\noption_is_set() {\n\tlocal -i r\t # the return code (0 = set, 1 = unset)\n\n\t[[ -n ${(k)OPTS[$1]} ]];\n\tr=$?\n\n\t[[ $2 == \"out\" ]] && {\n\t\t[[ $r == 0 ]] && { print 'set' } || { print 'unset' }\n\t}\n\n\treturn $r;\n}\n\n# Print the option value matching the given flag\n# Unique argument is the commandline flag (e.g., \"-s\").\noption_value() {\n\tprint -n - \"${OPTS[$1]}\"\n}\n\n# check if the option value contains a string between commas\noption_value_contains() {\n\tlocal opt=\"${OPTS[$1]}\"\n\tlocal str=\"$2\"\n\tfor i in ${(s:,:)opt}; do\n\t\t[[ \"$i\" == \"$2\" ]] && return 0\n\tdone\n\treturn 1\n}\n\n# Messaging function with pretty coloring\nfunction _msg() {\n\tlocal msg=\"$2\"\n\tlocal i\n\tcommand -v gettext 1>/dev/null 2>/dev/null && msg=\"$(gettext -s \"$2\")\"\n\tfor i in {3..${#}}; do\n\t\tmsg=${(S)msg//::$(($i - 2))*::/$*[$i]}\n\tdone\n\n\tlocal command=\"print -P\"\n\tlocal progname=\"${TOMBEXEC##*/}\"\n\tlocal pchars=\"\"\n\tlocal pcolor=\"normal\"\n\tlocal fd=2\n\tlocal -i returncode\n\n\tcase \"$1\" in\n\t\tinline)\n\t\t\tcommand+=\" -n\"; pchars=\" > \"; pcolor=\"yellow\"\n\t\t\t;;\n\t\tmessage)\n\t\t\tpchars=\" . \"; pcolor=\"white\"\n\t\t\t;;\n\t\tverbose)\n\t\t\tpchars=\"[D]\"; pcolor=\"blue\"\n\t\t\t;;\n\t\tsuccess)\n\t\t\tpchars=\"(*)\"; pcolor=\"green\"\n\t\t\t;;\n\t\twarning)\n\t\t\tpchars=\"[W]\"; pcolor=\"yellow\"\n\t\t\t;;\n\t\tfailure)\n\t\t\tpchars=\"[E]\"; pcolor=\"red\"\n\t\t\treturncode=1\n\t\t\t;;\n\t\tprint)\n\t\t\tprogname=\"\"\n\t\t\tfd=1\n\t\t\t;;\n\t\t*)\n\t\t\tpchars=\"[F]\"; pcolor=\"red\"\n\t\t\tmsg=\"Developer oops!  Usage: _msg MESSAGE_TYPE \\\"MESSAGE_CONTENT\\\"\"\n\t\t\treturncode=127\n\t\t\t;;\n\tesac\n\n\t[[ -n $_MSG_FD_OVERRIDE ]] && fd=$_MSG_FD_OVERRIDE\n\n\tif [[ -t $fd ]]; then\n\t       [[ -n \"$progname\" ]] && progname=\"$fg[magenta]$progname$reset_color\"\n\t       [[ -n \"$pchars\" ]] && pchars=\"$fg_bold[$pcolor]$pchars$reset_color\"\n\t       msg=\"$fg[$pcolor]$msg$reset_color\"\n\tfi\n\n\t${=command} \"${progname}\" \"${pchars}\" \"${msg}\" >&$fd\n\treturn $returncode\n}\n\nfunction _message() {\n\tlocal notice=\"message\"\n\t[[ \"$1\" = \"-n\" ]] && shift && notice=\"inline\"\n\toption_is_set -q || _msg \"$notice\" $@\n\treturn 0\n}\n\nfunction _verbose() {\n\toption_is_set -D && _msg verbose $@\n\treturn 0\n}\n\nfunction _success() {\n\toption_is_set -q || _msg success $@\n\treturn 0\n}\n\nfunction _warning() {\n\toption_is_set -q || _msg warning $@\n\treturn 1\n}\n\nfunction _failure() {\n\ttypeset -i exitcode=${exitv:-1}\n\toption_is_set -q || _msg failure $@\n\t# be sure we forget the secrets we were told\n\texit $exitcode\n}\n\nfunction _print() {\n\toption_is_set -q || _msg print $@\n\treturn 0\n}\n\n_list_optional_tools() {\n\ttypeset -a _deps\n\t_deps=(gettext dcfldd shred steghide)\n\t_deps+=(resize2fs tomb-kdb-pbkdf2 argon2 qrencode recoll unoconv lsof setfacl)\n\tfor d in $_deps; do\n\t\t_print \"`which $d`\"\n\tdone\n\treturn 0\n}\n\n\n# Check program dependencies\n#\n# Tomb depends on system utilities that must be present, and other\n# functionality that can be provided by various programs according to\n# what's available on the system.  If some required commands are\n# missing, bail out.\n_ensure_dependencies() {\n\n\t# Check for required programs\n\tfor req in cryptsetup gpg mkfs.ext4 e2fsck; do\n\t\tcommand -v $req 1>/dev/null 2>/dev/null || {\n\t\t\t_failure \"Missing required dependency ::1 command::.  Please install it.\" $req; }\n\tdone\n\t# Check for pinentry or at least pinentry-tty (which has no alias)\n\tif ! command -v pinentry 1>/dev/null 2>/dev/null; then\n\t\tif ! command -v pinentry-tty 1>/dev/null 2>/dev/null; then\n\t\t\t_failure \"Missing required dependency ::1 command::.  Please install it.\" pinentry\n\t\tfi\n\tfi\n\t# Ensure system binaries are available in the PATH\n\tpath+=(/sbin /usr/sbin) # zsh magic\n\n\t# use pkexec in place of sudo if found in path and polkitd is running\n\t# command -v pkexec 1>/dev/null 2>/dev/null\n\t# [[ $? == 0 ]] && ps ax | grep '[p]olkitd' 1>/dev/null 2>/dev/null && {\n\t#     SUDO=(pkexec)\t}\n\t# [[ \"$SUDO\" == \"sudo\" ]] && {\n\t#     command -v sudo 1>/dev/null 2>/dev/null ||\n\t# \t_failure \"No privilege escalation tool found, not even sudo\"\n\t# }\n\n\t# Which dd command to use\n\tcommand -v dcfldd 1>/dev/null 2>/dev/null && DD=(dcfldd statusinterval=1)\n\n\t# Which wipe command to use\n\tcommand -v shred 1>/dev/null 2>/dev/null && WIPE=(shred -f -u)\n\n\t# Check for lsof for slamming tombs\n\tcommand -v lsof 1>/dev/null 2>/dev/null || LSOF=0\n\t# Check for steghide\n\tcommand -v steghide 1>/dev/null 2>/dev/null || STEGHIDE=0\n\t# Check for cloakify\n\tcommand -v cloakify 1>/dev/null 2>/dev/null || CLOAKIFY=0\n\t# Check for decloakify\n\tcommand -v decloakify 1>/dev/null 2>/dev/null || DECLOAKIFY=0\n\t# Check for resize\n\tcommand -v resize2fs 1>/dev/null 2>/dev/null || RESIZER=0\n\t# Check for KDF auxiliary tools\n\tcommand -v tomb-kdb-pbkdf2 1>/dev/null 2>/dev/null || KDF=0\n\t# Check for ARGON2 KDF auxiliary tools\n\tcommand -v argon2 1>/dev/null 2>/dev/null || ARGON2=0\n\t# Check for Recoll file content indexer\n\tcommand -v recoll 1>/dev/null 2>/dev/null || RECOLL=0\n\t# Check for QREncode for paper backups of keys\n\tcommand -v qrencode 1>/dev/null 2>/dev/null || QRENCODE=0\n\t# Check for acl/setfacl for setting ACL at the mount location\n\tcommand -v setfacl 1>/dev/null 2>/dev/null || ACL=0\n}\n\n# }}} - Commandline interaction\n\n# {{{ Key operations\n\n# $@ is the list of all the recipient used to encrypt a tomb key\nis_valid_recipients() {\n\ttypeset -a recipients\n\trecipients=($@)\n\ttrusted=(m f u w s)\n\n\t_verbose \"is_valid_recipients\"\n\n\t# All the keys ID must be valid (the public keys must be present in the database)\n\tfor gpg_id in ${recipients[@]}; do\n\t\ttrust=\"$(gpg --with-colons --batch --list-keys \"$gpg_id\" 2> /dev/null |\n\t\t\t\t \tawk 'BEGIN { FS=\":\" } /^pub/ { print $2; exit}')\"\n\t\t[[ \"${trust}\" == \"\" ]] && {\n\t\t\t_warning \"Not a valid GPG key ID: ::1 gpgid:: \" $gpg_id\n\t\t\treturn 1\n\t\t}\n\t\t[[ ${trusted[(r)$trust]} != $trust ]] && {\n\t\t\t_warning \"The key ::1 gpgid:: is not trusted enough\" $gpg_id\n\t\t\treturn 1\n\t\t}\n\tdone\n\n\t# At least one private key must be present\n#\tfor gpg_id in ${recipients[@]}; do\n#\t\tgpg --with-colons --batch --list-secret-keys \"$gpg_id\" &> /dev/null\n#\t\t[[ $? = 0 ]] && {\n#\t\t\treturn 0\n#\t\t}\n#\tdone\n\n\treturn 0\n}\n\n# $@ is the list of all the recipient used to encrypt a tomb key\n# Print the recipient arg to be used in gpg.\n_recipients_arg() {\n\tlocal arg=\"$1\"; shift\n\ttypeset -a recipients\n\trecipients=($@)\n\n\tfor gpg_id in ${recipients[@]}; do\n\t\tprint -R -n \"$arg $gpg_id \"\n\tdone\n\treturn 0\n}\n\n# $1 is a GPG key recipient\n# Print the fingerprint of the GPG key\n_gpg_fingerprint() {\n\tgpg --with-colons --fingerprint \"$1\" |\n\t\tawk 'BEGIN { FS=\":\" } /^fpr/ { print $10; exit }' }\n_gpg_uid() {\n\tgpg --with-colons --list-key \"$1\" |\n\t\tawk 'BEGIN { FS=\":\" } /^uid/ { print $10; exit}' }\n\n# helpers to retrieve data from passwd using getent\n_get_username() { getent passwd ${1} | awk -F: '{print $1}' }\n_get_home()     { getent passwd ${1} | awk -F: '{print $6}' }\n\n# $1 is the encrypted key contents we are checking\nis_valid_key() {\n\tlocal key=\"$1\"\t\t # Unique argument is an encrypted key to test\n\n\t_verbose \"is_valid_key\"\n\n\t[[ -z $key ]] && key=$TOMBKEY\n\t[[ \"$key\" = \"cleartext\" ]] && {\n\t\t{ option_is_set --unsafe } || {\n\t\t\t_warning \"cleartext key from stdin selected: this is unsafe.\"\n\t\t\texitv=127 _failure \"please use --unsafe if you really want to do this.\"\n\t\t}\n\t\t_warning \"received key in cleartext from stdin (unsafe mode)\"\n\t\treturn 0 }\n\n\t[[ -z $key ]] && {\n\t\t_warning \"is_valid_key() called without an argument.\"\n\t\treturn 1\n\t}\n\n\t# If the key file is an image don't check file header\n\t[[ -r $TOMBKEYFILE ]] \\\n\t\t&& [[ $(file $TOMBKEYFILE) =~ \"JP.G\" ]] \\\n\t\t&& {\n\t\t_message \"Key is an image, it might be valid.\"\n\t\treturn 0 }\n\n\t[[ $KDF == 1 ]] && { ! option_is_set -g } && { option_is_set --kdf } && {\n\t\t_head=\"${key[(f)1]}\"\n\t\t[[ $_head =~ '^_KDF_' ]] || {\n\t\t\t_warning \"Key is missing KDF header.\"\n\t\t\treturn 1\n\t\t}\n\t}\n\n\t[[ $key =~ \"BEGIN PGP\" ]] && {\n\t\t_message \"Key is valid.\"\n\t\treturn 0 }\n\n\treturn 1\n}\n\n# $1 is a string containing an encrypted key\nrecover_key() {\n\tlocal key=\"${1}\"\t# Unique argument is an encrypted key\n\n\t_warning \"Attempting key recovery.\"\n\n\t_head=\"${key[(f)1]}\" # take the first line\n\n\tTOMBKEY=\"\"\t\t  # Reset global variable\n\n\t[[ $_head =~ \"^_KDF_\" ]] && TOMBKEY+=\"$_head\\n\"\n\n\tTOMBKEY+=\"-----BEGIN PGP MESSAGE-----\\n\"\n\tTOMBKEY+=\"$key\\n\"\n\tTOMBKEY+=\"-----END PGP MESSAGE-----\\n\"\n\n\treturn 0\n}\n\n# Retrieve the tomb key from the file specified from the command line,\n# or from stdin if -k - was selected.  Run validity checks on the\n# file.\t On success, return 0 and print out the full path of the key.\n# Set global variables TOMBKEY and TOMBKEYFILE.\n_load_key() {\n\tlocal keyfile=\"$1\"\t  # Unique argument is an optional keyfile\n\n\t[[ -z $keyfile ]] && keyfile=$(option_value -k)\n\t[[ -z $keyfile ]] && {\n\t\t_failure \"This operation requires a key file to be specified using the -k option.\" }\n\n\twhile true; do\n\t\t[[ $keyfile == \"-\" ]] && {\n\t\t\t_verbose \"load_key reading from stdin.\"\n\t\t\t_message \"Waiting for the key to be piped from stdin... \"\n\t\t\tTOMBKEYFILE=stdin\n\t\t\tTOMBKEY=$(cat)\n\t\t\tbreak; }\n\t\t[[ $keyfile == \"cleartext\" ]] && {\n\t\t\t_verbose \"load_key reading SECRET from stdin\"\n\t\t\t_message \"Waiting for the key to be piped from stdin... \"\n\t\t\tTOMBKEYFILE=cleartext\n\t\t\tTOMBKEY=cleartext\n\t\t\tTOMBSECRET=$(cat)\n\t\t\tbreak; }\n\t\t_verbose \"load_key argument: ::1 key file::\" $keyfile\n\t\t[[ -r $keyfile ]] || _failure \"Key not found, specify one using -k.\"\n\t\t_track_stat \"$keyfile\"\n\t\tTOMBKEYFILE=$keyfile\n\t\tTOMBKEY=\"${mapfile[$TOMBKEYFILE]}\"\n\t\tbreak\n\tdone\n\n\t_verbose \"load_key: ::1 key::\" $TOMBKEYFILE\n\n\t[[ -z $TOMBKEY ]] && {\n\t\t# something went wrong, there is no key to load\n\t\t# this occurs especially when piping from stdin and aborted\n\t\t_failure \"Key not found, specify one using -k.\"\n\t}\n\n\tis_valid_key $TOMBKEY || {\n\t\t_warning \"The key seems invalid or its format is not known by this version of Tomb.\"\n\t\trecover_key $TOMBKEY\n\t}\n\n\t# Declared TOMBKEYFILE (path)\n\t# Declared TOMBKEY (contents)\n\n\treturn 0\n}\n\n# takes two args just like get_lukskey\n# prints out the decrypted content\n# contains tweaks for different gpg versions\n# support both symmetric and asymmetric encryption\ngpg_decrypt() {\n\t# fix for gpg 1.4.11 where the --status-* options don't work ;^/\n\tlocal gpgver=$(gpg --version --no-permission-warning | awk '/^gpg/ {print $3}')\n\tlocal gpgpass=\"$1\\n$TOMBKEY\"\n\tlocal tmpres ret\n\ttypeset -a gpgopt\n\tgpgpopt=(--batch --no-tty --passphrase-fd 0 --no-options)\n\n\t{ option_is_set -g } && {\n\t\tgpgpass=\"$TOMBKEY\"\n\t\tgpgpopt=(--yes)\n\n\t\t# GPG option '--try-secret-key' exist since GPG 2.1\n\t\t{ option_is_set -R } && { autoload -U is-at-least && is-at-least \"2.1\" $gpgver } && {\n\t\t\ttypeset -a recipients\n\t\t\trecipients=(${(s:,:)$(option_value -R)})\n\t\t\t{ is_valid_recipients $recipients } || {\n\t\t\t\t_failure \"You set an invalid GPG ID.\"\n\t\t\t}\n\t\t\tgpgpopt+=(`_recipients_arg \"--try-secret-key\" $recipients`)\n\t\t}\n\t}\n\n\t[[ $gpgver == \"1.4.11\" ]] && {\n\t\t_verbose \"GnuPG is version 1.4.11 - adopting status fix.\"\n\t\tTOMBSECRET=`print - \"$gpgpass\" | \\\n\t\t\tgpg --decrypt ${gpgpopt[@]}`\n\t\tret=$?\n\t\tunset gpgpass\n\t\treturn $ret\n\t}\n\n\t_tmp_create\n\ttmpres=$TOMBTMP\n\tTOMBSECRET=`print - \"$gpgpass\" | \\\n\t\tgpg --decrypt ${gpgpopt[@]} \\\n\t\t\t--status-fd 2 --no-mdc-warning --no-permission-warning \\\n\t\t\t--no-secmem-warning 2> $tmpres`\n\tunset gpgpass\n\tret=1\n\tfor i in ${(f)\"$(cat $tmpres)\"}; do\n\t\t_verbose \"$i\"\n\t\t[[ \"$i\" =~ \"DECRYPTION_OKAY\" ]] && ret=0;\n\tdone\n\treturn $ret\n\n}\n\n\n# Gets a key file and a password, prints out the decoded contents to\n# be used directly by Luks as a cryptographic key\nget_lukskey() {\n\t# $1 is the password\n\t_verbose \"get_lukskey\"\n\n\t_password=\"$1\"\n\n\n\tfirstline=\"${TOMBKEY[(f)1]}\"\n\n\t# key is KDF encoded\n\tif [[ $firstline =~ '^_KDF_' ]]; then\n\t\tkdf_hash=\"${firstline[(ws:_:)2]}\"\n\t\t_verbose \"KDF: ::1 kdf::\" \"$kdf_hash\"\n\t\tcase \"$kdf_hash\" in\n\t\t\t\"pbkdf2sha1\")\n\t\t\t\tkdf_salt=\"${firstline[(ws:_:)3]}\"\n\t\t\t\tkdf_ic=\"${firstline[(ws:_:)4]}\"\n\t\t\t\tkdf_len=\"${firstline[(ws:_:)5]}\"\n\t\t\t\t_message \"Unlocking KDF key protection (::1 kdf::)\" $kdf_hash\n\t\t\t\t_verbose \"KDF salt: $kdf_salt\"\n\t\t\t\t_verbose \"KDF ic: $kdf_ic\"\n\t\t\t\t_verbose \"KDF len: $kdf_len\"\n\t\t\t\t_password=$(tomb-kdb-pbkdf2 $kdf_salt $kdf_ic $kdf_len 2>/dev/null <<<$_password)\n\t\t\t\t;;\n\n\t\t\t\"argon2\")\n\t\t\t\tkdf_salt=\"${firstline[(ws:_:)3]}\"\n\t\t\t\tkdf_ic=\"${firstline[(ws:_:)4]}\"\n\t\t\t\tkdf_mem=\"${firstline[(ws:_:)5]}\"\n\t\t\t\tkdf_par=\"${firstline[(ws:_:)6]}\"\n\t\t\t\t# ToDo also parse kdf_len?\n\t\t\t\t_message \"Unlocking KDF key protection (::1 kdf::)\" $kdf_hash\n\t\t\t\t_verbose \"KDF salt: $kdf_salt\"\n\t\t\t\t_verbose \"KDF ic: $kdf_ic\"\n\t\t\t\t_verbose \"KDF mem: $kdf_mem\"\n\t\t\t\t_verbose \"KDF # threads: $kdf_par\"\n\t\t\t\t_password=$(argon2 $kdf_salt -m $kdf_mem -t $kdf_ic -p $kdf_par -l 64 -r 2>/dev/null <<<$_password)\n\t\t\t\t;;\n\n\t\t\t*)\n\t\t\t\t_failure \"No suitable program for KDF ::1 program::.\" $pbkdf_hash\n\t\t\t\tunset _password\n\t\t\t\treturn 1\n\t\t\t\t;;\n\t\tesac\n\n\t\t# key needs to be exhumed from an image\n\telif [[ -r $TOMBKEYFILE && $(file $TOMBKEYFILE) =~ \"JP.G\" ]]; then\n\t\tif option_is_set -g; then\n\t\t\t# When using a GPG key, the tomb key is buried using a steganography password\n\t\t\tif option_is_set --tomb-pwd; then\n\t\t\t\t_password=\"`option_value --tomb-pwd`\"\n\t\t\t\t_verbose \"tomb-pwd = ::1 tomb pass::\" $_password\n\t\t\telse\n\t\t\t\t_password=$(ask_password \"Insert password to exhume key from $imagefile\")\n\t\t\t\t[[ $? != 0 ]] && {\n\t\t\t\t\t_warning \"User aborted password dialog.\"\n\t\t\t\t\treturn 1\n\t\t\t\t}\n\t\t\tfi\n\t\t\texhume_key $TOMBKEYFILE \"$_password\"\n\t\t\tunset _password\n\t\telse\n\t\t\texhume_key $TOMBKEYFILE \"$_password\"\n\t\tfi\n\tfi\n\n\tgpg_decrypt \"$_password\" # Save decrypted contents into $TOMBSECRET\n\n\tret=\"$?\"\n\n\t_verbose \"get_lukskey returns ::1::\" $ret\n\treturn $ret\n}\n\n# This function asks the user for the password to use the key it tests\n# it against the return code of gpg on success returns 0 and saves\n# the password in the global variable $TOMBPASSWORD\nask_key_password() {\n\t[[ -z \"$TOMBKEYFILE\" ]] && {\n\t\t_failure \"Internal error: ask_key_password() called before _load_key().\" }\n\n\t[[ \"$TOMBKEYFILE\" = \"cleartext\" ]] && {\n\t\t_verbose \"no password needed, using secret bytes from stdin\"\n\t\treturn 0 }\n\n\tif option_is_set -g; then\n\t\t_verbose \"no password needed, using GPG key\"\n\t\tget_lukskey\n\t\treturn $?\n\tfi\n\n\t_message \"A password is required to use key ::1 key::\" $TOMBKEYFILE\n\tpassok=0\n\ttombpass=\"\"\n\tif [[ -z $1 ]]; then\n\n\t\tfor c in 1 2 3; do\n\t\t\tif [[ $c == 1 ]]; then\n\t\t\t\ttombpass=$(ask_password \"Insert password to: $TOMBKEYFILE\")\n\t\t\telse\n\t\t\t\ttombpass=$(ask_password \"Insert password to: $TOMBKEYFILE (attempt $c)\")\n\t\t\tfi\n\t\t\t[[ $? = 0 ]] || {\n\t\t\t\t_warning \"User aborted password dialog.\"\n\t\t\t\treturn 1\n\t\t\t}\n\n\t\t\tget_lukskey \"$tombpass\"\n\n\t\t\t[[ $? = 0 ]] && {\n\t\t\t\tpassok=1; _message \"Password OK.\"\n\t\t\t\tbreak;\n\t\t\t}\n\t\tdone\n\n\telse\n\t\t# if a second argument is present then the password is already known\n\t\ttombpass=\"$1\"\n\t\t_verbose \"ask_key_password with tombpass: ::1 tomb pass::\" $tombpass\n\n\t\tget_lukskey \"$tombpass\"\n\n\t\t[[ $? = 0 ]] && {\n\t\t\tpassok=1; _message \"Password OK.\"\n\t\t}\n\n\tfi\n\t[[ $passok == 1 ]] || return 1\n\n\tTOMBPASSWORD=$tombpass\n\treturn 0\n}\n\n# call cryptsetup with arguments using the currently known secret\n# echo flags eliminate newline and disable escape (BSD_ECHO)\n_cryptsetup() {\n\tif option_is_set -q; then\n\t\tprint -R -n - \"$TOMBSECRET\" | _sudo cryptsetup --type luks1 --key-file - ${@} 2> /dev/null\n\telse\n\t\tprint -R -n - \"$TOMBSECRET\" | _sudo cryptsetup --type luks1 --key-file - ${@}\n\tfi\n\treturn $?\n}\n\n# change tomb key password\nchange_passwd() {\n\tlocal tmpnewkey lukskey c tombpass tombpasstmp\n\n\t_check_swap\t # Ensure swap is secure, if any\n\t_load_key\t # Try loading key from option -k and set TOMBKEYFILE\n\n\t{ option_is_set -g } && {\n\t\t_message \"Commanded to change GnuPG key for tomb key ::1 key::\" $TOMBKEYFILE\n\t} || {\n\t\t_message \"Commanded to change password for tomb key ::1 key::\" $TOMBKEYFILE\n\t}\n\n\t_tmp_create\n\ttmpnewkey=$TOMBTMP\n\n\tif option_is_set --tomb-old-pwd; then\n\t\tlocal tomboldpwd=\"`option_value --tomb-old-pwd`\"\n\t\t_verbose \"tomb-old-pwd = ::1 old pass::\" $tomboldpwd\n\t\task_key_password \"$tomboldpwd\"\n\telse\n\t\task_key_password\n\tfi\n\t[[ $? == 0 ]] || _failure \"No valid password supplied.\"\n\n\t{ option_is_set -g } && {\n\t\t_success \"Changing GnuPG key for ::1 key file::\" $TOMBKEYFILE\n\t} || {\n\t\t_success \"Changing password for ::1 key file::\" $TOMBKEYFILE\n\t}\n\n\t# Here $TOMBSECRET contains the key material in clear\n\n\t{ option_is_set --tomb-pwd } && {\n\t\tlocal tombpwd=\"`option_value --tomb-pwd`\"\n\t\t_verbose \"tomb-pwd = ::1 new pass::\" $tombpwd\n\t\tgen_key \"$tmpnewkey\" \"$tombpwd\"\n\t} || {\n\t\tgen_key \"$tmpnewkey\"\n\t}\n\n\t{ is_valid_key \"${mapfile[$tmpnewkey]}\" } || {\n\t\t_failure \"Error: the newly generated keyfile does not seem valid.\" }\n\n\t# Copy the new key as the original keyfile name\n\tcp -f \"${tmpnewkey}\" $TOMBKEYFILE\n\t{ option_is_set -g } && {\n\t\t_success \"Your GnuPG key was successfully changed\"\n\t} || {\n\t\t_success \"Your passphrase was successfully updated.\"\n\t}\n\n\treturn 0\n}\n\n\n# takes care to encrypt a key\n# honored options: --kdf  --tomb-pwd -o -g -r\ngen_key() {\n\t# $1 key file\n\t# $2 the password to use; if not set ask user\n\t# -o is the --cipher-algo to use (string taken by GnuPG)\n\tlocal algopt=\"`option_value -o`\"\n\tlocal algo=\"${algopt:-AES256}\"\n\tlocal gpgpass opt\n\tlocal recipients_opt\n\ttypeset -a gpgopt\n\t# here user is prompted for key password\n\ttombpass=\"\"\n\ttombpasstmp=\"\"\n\n\tif option_is_set -g; then\n\t\tgpgopt=(--encrypt)\n\n\t\tif option_is_set -r || option_is_set -R; then\n\t\t\ttypeset -a recipients\n\t\t\tif option_is_set -r; then\n\t\t\t\trecipients=(${(s:,:)$(option_value -r)})\n\t\t\t\trecipients_opt=\"--recipient\"\n\t\t\telse\n\t\t\t\trecipients=(${(s:,:)$(option_value -R)})\n\t\t\t\trecipients_opt=\"--hidden-recipient\"\n\t\t\tfi\n\n\t\t    is_valid_recipients $recipients || {\n\t\t\t\t_failure \"You set an invalid GPG ID.\"\n\t\t\t}\n\n\t\t\t_warning \"You are going to encrypt a tomb key with ::1 nrecipients:: recipient(s).\"\t ${#recipients}\n\t\t\t_warning \"It is your responsibility to check these fingerprints.\"\n\t\t\t_warning \"The fingerprints are:\"\n\t\t\tfor gpg_id in ${recipients[@]}; do\n\t\t\t\t_warning \"\t  `_gpg_fingerprint \"$gpg_id\"` :: `_gpg_uid \"$gpg_id\"`\"\n\t\t\tdone\n\n\t\t\tgpgopt+=(`_recipients_arg \"$recipients_opt\" $recipients`)\n\t\telse\n\t\t\t_message \"No recipient specified, using default GPG key.\"\n\t\t\tgpgopt+=(\"--default-recipient-self\")\n\t\tfi\n\n\t\t# Set gpg inputs and options\n\t\tgpgpass=\"$TOMBSECRET\"\n\t\topt=''\n\telse\n\t\tif [ \"$2\" = \"\" ]; then\n\t\t\twhile true; do\n\t\t\t\t# 3 tries to write two times a matching password\n\t\t\t\ttombpass=`ask_password \"Type the new password to secure your key\"`\n\t\t\t\tif [[ $? != 0 ]]; then\n\t\t\t\t\t_failure \"User aborted.\"\n\t\t\t\tfi\n\t\t\t\tif [ -z $tombpass ]; then\n\t\t\t\t\t_failure \"You set empty password, which is not possible.\"\n\t\t\t\tfi\n\t\t\t\ttombpasstmp=$tombpass\n\t\t\t\ttombpass=`ask_password \"Type the new password to secure your key (again)\"`\n\t\t\t\tif [[ $? != 0 ]]; then\n\t\t\t\t\t_failure \"User aborted.\"\n\t\t\t\tfi\n\t\t\t\tif [ \"$tombpasstmp\" = \"$tombpass\" ]; then\n\t\t\t\t\tbreak;\n\t\t\t\tfi\n\t\t\t\tunset tombpasstmp\n\t\t\t\tunset tombpass\n\t\t\tdone\n\t\telse\n\t\t\ttombpass=\"$2\"\n\t\t\t_verbose \"gen_key takes tombpass from CLI argument: ::1 tomb pass::\" $tombpass\n\t\tfi\n\n\t\theader=\"\"\n\t\t[[ $KDF == 1 ]] || [[ $ARGON2 == 1 ]] && {\n\t\t\t{ option_is_set --kdf } && {\n\t\t\t\t# KDF is a key strengthening technique against brute forcing\n\t\t\t\t# see: https://github.com/dyne/Tomb/issues/82\n\t\t\t\t# Two KDF are currently supported:\n\t\t\t\t# * pbkdf2 (time restrictive)\n\t\t\t\t# * argon2 (memory, parallelismn restrictive and through those time)\n\n\t\t\t\t# --kdfiter takes one integer value as parameter\n\t\t\t\t# argon2: # of iterations (default of 3);\n\t\t\t\t# pbkdf2: calculates # of iterations to reach this as time cost in seconds\n\t\t\t\titertime=\"`option_value --kdfiter`\"\n\t\t\t\titertime=${itertime:-3}\n\n\t\t\t\t# Generating salt (either via tomb-kdb-pbkdf2 or a shell fallback)\n\t\t\t\tif $(command -v tomb-kdb-pbkdf2-gensalt 1>/dev/null 2>/dev/null); then\n\t\t\t\t\tkdfsalt=`tomb-kdb-pbkdf2-gensalt`\n\t\t\t\telse\n\t\t\t\t\tkdfsalt=$(LC_CTYPE=C tr -cd 'a-f0-9' < /dev/random | head -c 64)\n\t\t\t\tfi\n\t\t\t\t_message \"kdf salt: ::1 kdfsalt::\" $kdfsalt\n\n\t\t\t\t# --kdf takes one parameter: what KDF\n\t\t\t\tkdftype=\"`option_value --kdf`\"\n\t\t\t\tcase ${kdftype} in\n\t\t\t\tpbkdf2)\n\t\t\t\t\tlocal -i microseconds\n\t\t\t\t\tmicroseconds=$(( itertime * 1000000 ))\n\t\t\t\t\t_success \"Using pbkdf2 as KDF\"\n\t\t\t\t\t_message \"iteration time: ::1 microseconds::\" $microseconds\n\t\t\t\t\tpbkdf2_iter=`tomb-kdb-pbkdf2-getiter $microseconds`\n\t\t\t\t\t_message \"iterations: ::1 pbkdf2_iter::\" $pbkdf2_iter\n\t\t\t\t\t# We use a length of 64bytes = 512bits (more than needed!?)\n\t\t\t\t\ttombpass=`tomb-kdb-pbkdf2 $kdfsalt $pbkdf2_iter 64 <<<\"${tombpass}\"`\n\t\t\t\t\theader=\"_KDF_pbkdf2sha1_${kdfsalt}_${pbkdf2_iter}_64\\n\"\n\t\t\t\t\t;;\n\t\t\t\targon2)\n\t\t\t\t\t_success \"Using Argon2 as KDF\"\n\t\t\t\t\t_message \"iterations: ::1 kdfiterations::\" $itertime\n\t\t\t\t\tkdfmem=\"`option_value --kdfmem`\"\n\t\t\t\t\tkdfmem=${kdfmem:-18}\n\t\t\t\t\t_message \"memory used: 2^::1 kdfmemory::\" $kdfmem\n\t\t\t\t\tkdfpar=\"`option_value --kdfpar`\"\n\t\t\t\t\tkdfpar=${kdfpar:-1}\n\t\t\t\t\t_message \"parallelismn: ::1 kdfparallel::\" $kdfpar\n\t\t\t\t\ttombpass=`argon2 $kdfsalt -m $kdfmem -t $itertime -p $kdfpar -l 64 -r <<<\"${tombpass}\"`\n\t\t\t\t\theader=\"_KDF_argon2_${kdfsalt}_${itertime}_${kdfmem}_${kdfpar}_64\\n\"\n\t\t\t\t\t;;\n\t\t\t\t*)\n\t\t\t\t\t_warning \"unrecognized KDF ::1::\" $kdftype\n\t\t\t\t\t_warning \"key won\\'t be protected via a KDF implementation\"\n\t\t\t\t\t_warning \"only pbkdf2 and argon2 are valid arguments\"\n\t\t\t\t\t;;\n\t\t\t\tesac\n\t\t\t}\n\t\t}\n\t\tprint $header >> \"$1\"\n\n\t\t# Set gpg inputs and options\n\t\tgpgpass=\"${tombpass}\\n$TOMBSECRET\"\n\t\tgpgopt=(--passphrase-fd 0 --symmetric --no-options)\n\t\topt='-n'\n\tfi\n\n\t_tmp_create\n\tlocal tmpres=$TOMBTMP\n\tprint $opt - \"$gpgpass\" \\\n\t\t| gpg --openpgp --force-mdc --cipher-algo ${algo} \\\n\t\t\t  --batch --no-tty ${gpgopt} \\\n\t\t\t  --status-fd 2 -o - --armor 2> $tmpres >> \"$1\"\n\tunset gpgpass\n\t# check result of gpg operation\n\tfor i in ${(f)\"$(cat $tmpres)\"}; do\n\t\t_verbose \"$i\"\n\tdone\n\n\t# print -n \"${tombpass}\" \\\n\t\t#\t  | gpg --openpgp --force-mdc --cipher-algo ${algo} \\\n\t\t#\t  --batch --no-options --no-tty --passphrase-fd 0 --status-fd 2 \\\n\t\t#\t  -o - -c -a ${lukskey}\n\n\tTOMBPASSWORD=\"$tombpass\"\t# Set global variable\n\tunset tombpass\n\tunset tombpasstmp\n}\n\n# prints an array of ciphers available in gnupg (to encrypt keys)\nlist_gnupg_ciphers() {\n\t# On gpg1 and gpg2 line 10 always point to available ciphers.\n\t# Print those until the next section is found\n\tciphers=(`gpg --version | awk '\nBEGIN { ciphers=0 }\nNR==11 { gsub(/,/,\"\"); sub(/^.*:/,\"\"); print; ciphers=1; next }\n/^.*:/ { ciphers=0 }\n{ if(ciphers==0) { next } else { gsub(/,/,\"\"); print; } }\n'`)\n\tprint \"${ciphers}\"\n\treturn 1\n}\n\n# Steganographic function to bury a key inside an image.\n# Requires steghide(1) to be installed\nbury_key() {\n\n\t_load_key\t # Try loading key from option -k and set TOMBKEY\n\n\timagefile=$PARAM\n\n\t[[ \"`file $imagefile`\" =~ \"JPEG\" ]] || {\n\t\t_warning \"Encode failed: ::1 image file:: is not a jpeg image.\" $imagefile\n\t\treturn 1\n\t}\n\n\t_success \"Encoding key ::1 tomb key:: inside image ::2 image file::\" $TOMBKEY $imagefile\n\t{ option_is_set -g } && {\n\t\t_message \"Using GnuPG Key ID\"\n\t} || {\n\t\t_message \"Please confirm the key password for the encoding\"\n\t}\n\n\t# We ask the password and test if it is the same encoding the\n\t# base key, to insure that the same password is used for the\n\t# encryption and the steganography. This is a standard enforced\n\t# by Tomb, but it isn't strictly necessary (and having different\n\t# password would enhance security). Nevertheless here we prefer\n\t# usability.\n\t# However, steganography cannot be done with GPG key. Therefore,\n\t# if using a GPG key, we test if the user can decrypt the tomb\n\t# with its key and we ask for a steganography password.\n\n\t{ option_is_set --tomb-pwd } && { ! option_is_set -g } && {\n\t\tlocal tombpwd=\"`option_value --tomb-pwd`\"\n\t\t_verbose \"tomb-pwd = ::1 tomb pass::\" $tombpwd\n\t\task_key_password \"$tombpwd\"\n\t} || {\n\t\task_key_password\n\t}\n\t[[ $? != 0 ]] && {\n\t\t_warning \"Wrong password/GnuPG ID supplied.\"\n\t\t_failure \"You shall not bury a key whose password is unknown to you.\" }\n\n\tif option_is_set -g && option_is_set --tomb-pwd; then\n\t\tTOMBPASSWORD=\"`option_value --tomb-pwd`\"\n\t\t_verbose \"tomb-pwd = ::1 tomb pass::\" $TOMBPASSWORD\n\telif option_is_set -g; then\n\t\ttombpass=\"\"\n\t\ttombpasstmp=\"\"\n\t\twhile true; do\n\t\t\t# 3 tries to write two times a matching password\n\t\t\ttombpass=`ask_password \"Type a password to bury your key\"`\n\t\t\tif [[ $? != 0 ]]; then\n\t\t\t\t_failure \"User aborted.\"\n\t\t\tfi\n\t\t\tif [ -z $tombpass ]; then\n\t\t\t\t_failure \"You set empty password, which is not possible.\"\n\t\t\tfi\n\t\t\ttombpasstmp=$tombpass\n\t\t\ttombpass=`ask_password \"Type a password to bury your key (again)\"`\n\t\t\tif [[ $? != 0 ]]; then\n\t\t\t\t_failure \"User aborted.\"\n\t\t\tfi\n\t\t\tif [ \"$tombpasstmp\" = \"$tombpass\" ]; then\n\t\t\t\tbreak;\n\t\t\tfi\n\t\t\tunset tombpasstmp\n\t\t\tunset tombpass\n\t\tdone\n\t\tTOMBPASSWORD=\"$tombpass\"\n\tfi\n\n\t# We omit armor strings since having them as constants can give\n\t# ground to effective attacks on steganography\n\tprint - \"$TOMBKEY\" | awk '\n/^-----/ {next}\n/^Version/ {next}\n{print $0}' \\\n\t\t| steghide embed --embedfile - --coverfile ${imagefile} \\\n\t\t\t\t   -p $TOMBPASSWORD -z 9 -e serpent cbc\n\tif [ $? != 0 ]; then\n\t\t_warning \"Encoding error: steghide reports problems.\"\n\t\tres=1\n\telse\n\t\t_success \"Tomb key encoded successfully into image ::1 image file::\" $imagefile\n\t\tres=0\n\tfi\n\n\treturn $res\n}\n\n# mandatory 1st arg: the image file where key is supposed to be\n# optional 2nd arg: the password to use (same as key, internal use)\n# optional 3rd arg: the key where to save the result (- for stdout)\nexhume_key() {\n\t[[ -z $1 ]] && {\n\t\t_failure \"Exhume failed, no image specified\" }\n\n\tlocal imagefile=\"$1\"  # The image file where to look for the key\n\tlocal tombpass=\"$2\"\t  # (Optional) the password to use (internal use)\n\tlocal destkey=\"$3\"\t  # (Optional) the key file where to save the\n\t# result (- for stdout)\n\tlocal r=1\t\t\t  # Return code (default: fail)\n\n\t# write all messages to stderr to avoid polluting stdout\n\t_MSG_FD_OVERRIDE=2\n\n\t# Ensure the image file is a readable JPEG\n\t[[ ! -r $imagefile ]] && {\n\t\t_failure \"Exhume failed, image file not found: ::1 image file::\" \"${imagefile:-none}\" }\n\t[[ ! $(file \"$imagefile\") =~ \"JP.G\" ]] && {\n\t\t_failure \"Exhume failed: ::1 image file:: is not a jpeg image.\" $imagefile }\n\n\t# When a password is passed as argument then always print out\n\t# the exhumed key on stdout without further checks (internal use)\n\t[[ -n \"$tombpass\" ]] && {\n\t\tTOMBKEY=$(steghide extract -sf $imagefile -p $tombpass -xf -)\n\t\t[[ $? != 0 ]] && {\n\t\t\t_failure \"Wrong password or no steganographic key found\" }\n\n\t\trecover_key $TOMBKEY\n\n\t\treturn 0\n\t}\n\n\t# Ensure we have a valid destination for the key\n\t[[ -z $destkey ]] && { option_is_set -k } && destkey=$(option_value -k)\n\t[[ -z $destkey ]] && {\n\t\tdestkey=\"-\" # No key was specified: fallback to stdout\n\t\t_message \"printing exhumed key on stdout\" }\n\n\t# Bail out if destination exists, unless -f (force) was passed\n\t[[ $destkey != \"-\" && -s $destkey ]] && {\n\t\t_warning \"File exists: ::1 tomb key::\" $destkey\n\t\t{ option_is_set -f } && {\n\t\t\t_warning \"Use of --force selected: overwriting.\"\n\t\t\trm -f $destkey\n\t\t} || {\n\t\t\t_warning \"Make explicit use of --force to overwrite.\"\n\t\t\t_failure \"Refusing to overwrite file. Operation aborted.\" }\n\t}\n\n\t_message \"Trying to exhume a key out of image ::1 image file::\" $imagefile\n\t{ option_is_set --tomb-pwd } && {\n\t\ttombpass=$(option_value --tomb-pwd)\n\t\t_verbose \"tomb-pwd = ::1 tomb pass::\" $tombpass\n\t} || {\n\t\t[[ -n $TOMBPASSWORD ]] && tombpass=$TOMBPASSWORD\n\t} || {\n\t\ttombpass=$(ask_password \"Insert password to exhume key from $imagefile\")\n\t\t[[ $? != 0 ]] && {\n\t\t\t_warning \"User aborted password dialog.\"\n\t\t\treturn 1\n\t\t}\n\t}\n\n\t# Extract the key from the image\n\tsteghide extract -sf $imagefile -p ${tombpass} -xf $destkey\n\tr=$?\n\n\t# Report to the user\n\t[[ \"$destkey\" = \"-\" ]] && destkey=\"stdout\"\n\t[[ $r == 0 ]] && {\n\t\t_success \"Key successfully exhumed to ::1 key::.\" $destkey\n\t} || {\n\t\t_warning \"Nothing found in ::1 image file::\" $imagefile\n\t}\n\n\tunset _MSG_FD_OVERRIDE\n\n\treturn $r\n}\n\n# Steganographic function to transform a key into harmless-looking text\n# using a cipher\n# Requires cloakify to be installed\n#\n# mandatory 1st arg: the cipher to use\n# optional 2nd arg: the output file where to save the result (none for stdout)\ncloakify_key() {\n\n\t_load_key\t # Try loading key from option -k and set TOMBKEY\n\tlocal cipher=\"$1\"    # The cipher to use\n\tlocal destfile=\"$2\"  # (Optional) the output file where to save the\n\t# result (none for stdout)\n  [[ -r \"${cipher}\" ]] ||\n    _failure \"Cloak cipher file not found, see tomb/extras/cloak/ciphers\"\n\n\t_success \"Encoding key ::1 tomb key:: using cipher ::2 cipher file::\" $TOMBKEYFILE $cipher\n\n\t# Ensure we have a valid destination for the cloaked key\n\t[[ -z $destfile ]] && {\n\t\t  destfile=\"/dev/stdout\" # No file was specified: fallback to stdout\n\t\t  _message \"printing cloaked key on stdout\" }\n\n\t# Bail out if destination exists, unless -f (force) was passed\n\t[[ $destfile != \"/dev/stdout\" && -s $destfile ]] && {\n\t\t  _warning \"File exists: ::1 output file::\" $destfile\n\t\t  { option_is_set -f } && {\n\t\t\t    _warning \"Use of --force selected: overwriting.\"\n\t\t\t    rm -f $destfile\n\t\t  } || {\n\t\t\t    _warning \"Make explicit use of --force to overwrite.\"\n\t\t\t    _failure \"Refusing to overwrite file. Operation aborted.\" }\n\t}\n\n\t# Cipher the key\n\tcloakify -i $TOMBKEYFILE -c $cipher >$destfile\n\tif [ $? != 0 ]; then\n\t\t_warning \"Encoding error: cloakify reports problems.\"\n\t\tres=1\n\telse\n\t\t_success \"Tomb key encoded successfully\"\n\t\tres=0\n\tfi\n\n\treturn $res\n}\n\n# mandatory 1st arg: the text file where key is supposed to be\n# mandatory 2nd arg: the cipher to use\n# optional 3rd arg: the key where to save the result (none for stdout)\ndecloakify_key() {\n\t[[ -z $1 ]] && {\n\t\t  _failure \"Uncloak failed, no text file specified\" }\n\t[[ -z $2 ]] && {\n\t\t  _failure \"Uncloak failed, no cipher file specified\" }\n\n\tlocal textfile=\"$1\"   # The text file where to look for the key\n\tlocal cipher=\"$2\"     # The cipher to use\n\tlocal destkey=\"$3\"    # (Optional) the key file where to save the\n\t# result (none for stdout)\n\tlocal r=1\t\t\t  # Return code (default: fail)\n\n\t# write all messages to stderr to avoid polluting stdout\n\t_MSG_FD_OVERRIDE=2\n\n\t# Ensure the text file is readable\n\t[[ ! -r $textfile ]] && {\n\t\t_failure \"Uncloak failed, text file not found: ::1 text file::\" \"${textfile:-none}\" }\n\t# Ensure the cipher file is readable\n\t[[ ! -r $cipher ]] && {\n\t\t_failure \"Uncloak failed, cipher file not found: ::1 cipher file::\" \"${cipher:-none}\" }\n\n\t# Ensure we have a valid destination for the key\n\t[[ -z $destkey ]] && { option_is_set -k } && destkey=$(option_value -k)\n\t[[ -z $destkey ]] && {\n\t\t# No key was specified: fallback to stdout\n\t\t_message \"printing uncloaked key on stdout\" }\n\n\t# Bail out if destination exists, unless -f (force) was passed\n\t[[ $destkey != \"/dev/stdout\" && -s $destkey ]] && {\n\t\t_warning \"File exists: ::1 tomb key::\" $destkey\n\t\t{ option_is_set -f } && {\n\t\t\t_warning \"Use of --force selected: overwriting.\"\n\t\t\trm -f $destkey\n\t\t} || {\n\t\t\t_warning \"Make explicit use of --force to overwrite.\"\n\t\t\t_failure \"Refusing to overwrite file. Operation aborted.\" }\n\t}\n\n\t# Extract the key from the text file\n  if [[ -z \"$destkey\" ]]; then\n\t  decloakify -i \"${textfile}\" -c \"${cipher}\"\n  else\n\t  decloakify -i \"${textfile}\" -c \"${cipher}\" -o \"${destkey}\"\n  fi\n\tr=$?\n\n\t# Report to the user\n\t[[ -z \"$destkey\" ]] && destkey=\"stdout\"\n\t[[ $r == 0 ]] && {\n\t\t_success \"Key successfully uncloaked to ::1 key::.\" $destkey\n\t} || {\n\t\t_warning \"Nothing found in ::1 text file::\" $textfile\n\t}\n\n\tunset _MSG_FD_OVERRIDE\n\n\treturn $r\n}\n\n# Produces a printable image of the key contents so a backup on paper\n# can be made and hidden in books etc.\nengrave_key() {\n\n\t_load_key\t # Try loading key from option -k and set TOMBKEYFILE\n\n\tlocal keyname=$(basename $TOMBKEYFILE)\n\tlocal pngname=\"$keyname.qr.png\"\n\n\t_success \"Rendering a printable QRCode for key: ::1 tomb key file::\" $TOMBKEYFILE\n\t# we omit armor strings to save space\n\tawk '/^-----/ {next}; /^Version/ {next}; {print $0}' $TOMBKEYFILE \\\n\t\t| qrencode --size 4 --level H --casesensitive -o $pngname\n\t[[ $? != 0 ]] && {\n\t\t_failure \"QREncode reported an error.\" }\n\n\t_success \"Operation successful:\"\n\t# TODO: only if verbose and/or not silent\n\tls -lh $pngname\n\tfile $pngname\n}\n\n# }}} - Key handling\n\n# {{{ Create\n\n# Since version 1.5.3, tomb creation is a three-step process that replaces create_tomb():\n#\n# * dig a .tomb (the large file) using /dev/urandom (takes some minutes at least)\n#\n# * forge a .key (the small file) using /dev/random (good entropy needed)\n#\n# * lock the .tomb file with the key, binding the key to the tomb (requires dm_crypt format)\n\n# Step one - Dig a tomb\n#\n# Synopsis: dig_tomb /path/to/tomb -s sizemebibytes\n#\n# It will create an empty file to be formatted as a loopback\n# filesystem.  Initially the file is filled with random data taken\n# from /dev/urandom to improve overall tomb's security and prevent\n# some attacks aiming at detecting how much data is in the tomb, or\n# which blocks in the filesystem contain that data.\n\ndig_tomb() {\n\t# $1 arg is path to tomb\n\n\t# Require the specification of the size of the tomb (-s) in MiB\n\tlocal -i tombsize=$(option_value -s)\n\n\t_message \"Commanded to dig tomb ::1 tomb path::\" $tombpath\n\n\t[[ ! -z $1 ]] || _failure \"Missing path to tomb\"\n\t[[ -n \"$tombsize\"\t]] || _failure \"Size argument missing, use -s\"\n\t[[ $tombsize == <-> ]] || _failure \"Size must be an integer (mebibytes)\"\n\t[[ $tombsize -ge 10 ]] || _failure \"Tombs can't be smaller than 10 mebibytes\"\n\n\t[[ -e $1 ]] && {\n\t\t_warning \"A tomb exists already. I'm not digging here:\"\n\t\tls -lh $1\n\t\treturn 1\n\t}\n\n\t_success \"Creating a new tomb in ::1 tomb path::\" $1\n\t_message \"Generating ::1 tomb file:: of ::2 size::MiB\" $1 $tombsize\n\n\ttouch \"$1\"\n\t[[ $? = 0 ]] || {\n\t\t_warning \"Error creating the tomb ::1 tomb path::\" $1\n\t\t_failure \"Operation aborted.\"\n\t}\n\t# Ensure that file permissions are safe even if interrupted\n\t[[ -n $SUDO_USER ]] && chown ${_UID}:${_GID} \"$1\"\n\tchmod 0600 $1\n\t_verbose \"Data dump using ::1:: from /dev/urandom\" ${DD[1]}\n\t${=DD} if=/dev/urandom bs=1048576 count=$tombsize of=$1\n\tls -lh \"$1\"\n\n\t_success \"Done digging ::1 tomb name::\" $1\n\t_message \"Your tomb is not yet ready, you need to forge a key and lock it:\"\n\t_message \"tomb forge ::1 tomb path::.key\" $1\n\t_message \"tomb lock ::1 tomb path:: -k ::1 tomb path::.key\" $1\n\n\treturn 0\n}\n\n# Step two -- Create a detached key to lock a tomb with\n#\n# Synopsis: forge_key [destkey|-k destkey] [-o cipher] [-r|-R gpgid]\n#\n# Arguments:\n# -k\t\t\t\tpath to destination keyfile\n# -o\t\t\t\tUse an alternate algorithm\n# -r\t\t\t\tGPG recipients to be used\n#\nforge_key() {\n\t# can be specified both as simple argument or using -k\n\tlocal destkey=\"$1\"\n\t{ option_is_set -k } && { destkey=$(option_value -k) }\n\n\tlocal algo=\"AES256\"\t # Default encryption algorithm\n\n\t[[ -z \"$destkey\" ]] && {\n\t\t_failure \"A filename needs to be specified using -k to forge a new key.\" }\n\n\t#\t _message \"Commanded to forge key ::1 key::\" $destkey\n\n\t_check_swap # Ensure the available memory is safe to use\n\n\t# Ensure GnuPG won't exit with an error before first run\n\tlocal gpghome=${GNUPGHOME:-$HOME/.gnupg}\n\t[[ -r $gpghome/pubring.gpg ]] || {\n        mkdir -p -m 0700 $gpghome\n        touch $gpghome/pubring.gpg }\n\n\t# Do not overwrite any files accidentally\n\t[[ -r \"$destkey\" ]] && {\n\t\tls -lh $destkey\n\t\t_failure \"Forging this key would overwrite an existing file. Operation aborted.\" }\n\n\ttouch $destkey\n\t[[ $? == 0 ]] || {\n\t\t_warning \"Cannot generate encryption key.\"\n\t\t_failure \"Operation aborted.\" }\n\tchmod 0600 $destkey\n\n\t# Update algorithm if it was passed on the command line with -o\n\t{ option_is_set -o } && algopt=\"$(option_value -o)\"\n\t[[ -n \"$algopt\" ]] && algo=$algopt\n\n\t_message \"Commanded to forge key ::1 key:: with cipher algorithm ::2 algorithm::\" \\\n\t\t\t $destkey $algo\n\n\t[[ $KDF == 1 ]] && { ! option_is_set -g } && {\n\t\t_message \"Using KDF to protect the key password\"\n\t}\n\n\tTOMBKEYFILE=\"$destkey\"\t  # Set global variable\n\n\t_warning \"This operation takes time. Keep using this computer on other tasks.\"\n\t_warning \"Once done you will be asked to choose a password for your tomb.\"\n\t_warning \"To make it faster you can move the mouse around.\"\n\t_warning \"If you are on a server, you can use an Entropy Generation Daemon.\"\n\n\t# Use /dev/urandom as the entropy source, unless --use-random is specified\n\tlocal random_source=/dev/urandom\n\t{ option_is_set --use-random } && random_source=/dev/random\n\n\t_verbose \"Data dump using ::1:: from ::2 source::\" ${DD[1]} $random_source\n\tTOMBSECRET=$(${=DD} bs=1 count=512 if=$random_source)\n\t[[ $? == 0 ]] || {\n\t\t_warning \"Cannot generate encryption key.\"\n\t\t_failure \"Operation aborted.\" }\n\n\t# Here the global variable TOMBSECRET contains the naked secret\n\n\t{ option_is_set -g } && {\n\t\t_success \"Using GnuPG key(s) to encrypt your key: ::1 tomb key::\" $TOMBKEYFILE\n\t} || {\n\t\t_success \"Choose the password of your key: ::1 tomb key::\" $TOMBKEYFILE\n\t}\n\t_message \"(You can also change it later using 'tomb passwd'.)\"\n\t# _user_file $TOMBKEYFILE\n\n\ttombname=\"$TOMBKEYFILE\" # XXX ???\n\t# the gen_key() function takes care of the new key's encryption\n\t{ option_is_set --tomb-pwd } && {\n\t\tlocal tombpwd=\"`option_value --tomb-pwd`\"\n\t\t_verbose \"tomb-pwd = ::1 new pass::\" $tombpwd\n\t\tgen_key $TOMBKEYFILE \"$tombpwd\"\n\t} || {\n\t\tgen_key $TOMBKEYFILE\n\t}\n\n\t# load the key contents (set global variable)\n\tTOMBKEY=\"${mapfile[$TOMBKEYFILE]}\"\n\n\t# this does a check on the file header\n\tis_valid_key $TOMBKEY || {\n\t\t_warning \"The key does not seem to be valid.\"\n\t\t_warning \"Dumping contents to screen:\"\n\t\tprint \"${mapfile[$TOMBKEY]}\"\n\t\t_warning \"--\"\n\t\trm -f ${TOMBKEYFILE}\n\t\t_failure \"Operation aborted.\"\n\t}\n\n\t[[ -n $SUDO_USER ]] && chown ${_UID}:${_GID} \"$TOMBKEYFILE\"\n\t_message \"Done forging ::1 key file::\" $TOMBKEYFILE\n\t_success \"Your key is ready:\"\n\tls -lh $TOMBKEYFILE\n}\n\n# Step three -- Lock tomb\n#\n# Synopsis: tomb_lock file.tomb file.tomb.key [-o cipher] [-r gpgid]\n#\n# Lock the given tomb with the given key file, in fact formatting the\n# loopback volume as a LUKS device.\n# Default cipher 'aes-xts-plain64'can be overridden with -o\nlock_tomb_with_key() {\n\t# old default was aes-cbc-essiv:sha256\n\t# Override with -o\n\t# for more alternatives refer to cryptsetup(8)\n\tlocal cipher=\"aes-xts-plain64\"\n\n\tlocal tombpath=\"$1\"\t\t # First argument is the path to the tomb\n\n\t[[ -n $tombpath ]] || {\n\t\t_warning \"No tomb specified for locking.\"\n\t\t_warning \"Usage: tomb lock file.tomb -k file.tomb.key\"\n\t\treturn 1\n\t}\n\n\n\tis_valid_tomb $tombpath\n\n\t_message \"Commanded to lock tomb ::1 tomb file::\" $TOMBFILE\n\n\t[[ -f $TOMBPATH ]] || {\n\t\t_failure \"There is no tomb here. You have to dig it first.\" }\n\n\t_verbose \"Tomb found: ::1 tomb path::\" $TOMBPATH\n\n\tlocal filesystem=ext4\n\toption_is_set --filesystem && {\n\t\tfilesystem=`option_value --filesystem`\n\t\tlocal tombsize=`stat --format '%s' $tombpath`\n\t\tcase $filesystem in\n\t\t\text3|ext4) ;;\n\t\t\text3maxinodes|ext4maxinodes) ;;\n\t\t\tbtrfs)\n\t\t\t\tif [[ $tombsize -lt 114294784 ]]; then\n\t\t\t\t\t_failure \"Filesystem ::1 filesystem:: not supported on tombs smaller than ::2 size::\" \\\n\t\t\t\t\t\t $filesystem \"114MB\"\n\t\t\t\tfi\n\t\t\t\t;;\n\t\t\tbtrfsmixedmode)\n\t\t\t\tif [[ $tombsize -lt 18874368 ]]; then\n\t\t\t\t\t_failure \"Filesystem ::1 filesystem:: not supported on tombs smaller than ::2 size::\" \\\n\t\t\t\t\t\t $filesystem \"18MB\"\n\t\t\t\tfi\n\t\t\t\t;;\n\t\t\t*)\n\t\t\t\t_failure \"Filesystem not supported: ::1 filesystem::\" $filesystem\n\t\t\t\treturn 1\n\t\t\t\t;;\n\t\tesac\n\t\t_success \"Selected filesystem type $filesystem.\"\n\t}\n\n\tlo_check \"$TOMBPATH\"\n\n\t_message \"Checking if the tomb is empty (we never step on somebody else's bones).\"\n\t_sudo cryptsetup isLuks ${TOMBPATH}\n\tif [ $? = 0 ]; then\n\t\t# is it a LUKS encrypted nest? then bail out and avoid reformatting it\n\t\t_warning \"The tomb was already locked with another key.\"\n\t\t_failure \"Operation aborted. I cannot lock an already locked tomb. Go dig a new one.\"\n\telse\n\t\t_message \"Fine, this tomb seems empty.\"\n\tfi\n\n\t_load_key\t # Try loading key from option -k and set TOMBKEYFILE\n\n\t# the encryption cipher for a tomb can be set when locking using -c\n\t{ option_is_set -o } && algopt=\"$(option_value -o)\"\n\t[[ -n \"$algopt\" ]] && cipher=$algopt\n\t_message \"Locking using cipher: ::1 cipher::\" $cipher\n\n\t# get the pass from the user and check it\n\tif option_is_set --tomb-pwd; then\n\t\ttomb_pwd=\"`option_value --tomb-pwd`\"\n\t\t_verbose \"tomb-pwd = ::1 tomb pass::\" $tomb_pwd\n\t\task_key_password \"$tomb_pwd\"\n\telse\n\t\task_key_password\n\tfi\n\t[[ $? == 0 ]] || _failure \"No valid password supplied.\"\n\n\t_success \"Locking ::1 tomb file:: with ::2 tomb key file::\" $TOMBFILE $TOMBKEYFILE\n\n\t_message \"Formatting Luks mapped device.\"\n\t_cryptsetup --batch-mode \\\n\t\t\t\t--cipher ${cipher} --hash sha512 --key-size 512 --key-slot 0 \\\n\t\t\t\tluksFormat ${TOMBPATH}\n\t[[ $? == 0 ]] || {\n\t\t_warning \"cryptsetup luksFormat returned an error.\"\n\t\t_failure \"Operation aborted.\" }\n\n\t_cryptsetup --cipher ${cipher} --hash sha512 luksOpen ${TOMBPATH} tomb.tmp\n\t[[ $? == 0 ]] || {\n\t\t_warning \"cryptsetup luksOpen returned an error.\"\n\t\t_failure \"Operation aborted.\" }\n\n\t_message \"Formatting your Tomb with $filesystem filesystem.\"\n\tcase $filesystem in\n\t\text3|ext4)\n\t\t\t_sudo mkfs.${filesystem} -q -F -j -L $TOMBNAME /dev/mapper/tomb.tmp\n\t\t\t;;\n\t\text3maxinodes|ext4maxinodes) # TODO: cover with test\n\t\t\tfilesystem=${filesystem:0:4}\n\t\t\t_sudo mkfs.${filesystem} -q -F -j -i 1024 -b 1024 -L $TOMBNAME /dev/mapper/tomb.tmp\n\t\t\t;;\n\t\tbtrfs) # TODO: cover with test\n\t\t\t_sudo mkfs.${filesystem} -q -L $TOMBNAME /dev/mapper/tomb.tmp\n\t\t\t;;\n\t\tbtrfsmixedmode) # TODO: cover with test\n\t\t\tfilesystem=${filesystem:0:5}\n\t\t\t_sudo mkfs.${filesystem} -q -M -L $TOMBNAME /dev/mapper/tomb.tmp\n\t\t\t;;\n\tesac\n\n\t[[ $? == 0 ]] || {\n\t\t_warning \"Tomb format returned an error.\"\n\t\t_sudo cryptsetup luksClose tomb.tmp\n\t\t_failure \"Your tomb ::1 tomb file:: may be corrupted.\" $TOMBFILE }\n\n\t# Sync\n\t_sudo cryptsetup luksClose tomb.tmp\n\n\t_message \"Done locking ::1 tomb name:: using Luks dm-crypt ::2 cipher::\" $TOMBNAME $cipher\n\t_success \"Your tomb is ready in ::1 tomb path:: and secured with key ::2 tomb key::\" \\\n\t\t\t $TOMBPATH $TOMBKEYFILE\n\treturn 0\n}\n\n# This function changes the key that locks a tomb\nchange_tomb_key() {\n\tlocal tombkey=\"$1\"\t\t# Path to the tomb's key file\n\tlocal tombpath=\"$2\"\t\t# Path to the tomb\n\n\t_message \"Commanded to reset key for tomb ::1 tomb path::\" $tombpath\n\n\t[[ -z \"$tombpath\" ]] && {\n\t\t_warning \"Command 'setkey' needs two arguments: the old key file and the tomb.\"\n\t\t_warning \"I.e:\ttomb -k new.tomb.key old.tomb.key secret.tomb\"\n\t\t_failure \"Execution aborted.\"\n\t}\n\n\t_check_swap\n\n\tis_valid_tomb $tombpath\n\tlo_check \"$TOMBPATH\"\n\t_sudo cryptsetup isLuks ${TOMBPATH}\n\t# is it a LUKS encrypted nest? we check one more time\n\t[[ $? == 0 ]] || {\n\t\t_failure \"Not a valid LUKS encrypted volume: ::1 volume::\" $TOMBPATH }\n\n\t_load_key $tombkey\t  # Try loading given key and set TOMBKEY\n\n\n\t# TOMBKEYFILE\n\tlocal oldkey=$TOMBKEY\n\tlocal oldkeyfile=$TOMBKEYFILE\n\n\t# we have everything, prepare to mount\n\t_success \"Changing lock on tomb ::1 tomb name::\" $TOMBNAME\n\t_message \"Old key: ::1 old key::\" $oldkeyfile\n\n\t# load the old key\n\tif option_is_set --tomb-old-pwd; then\n\t\ttomb_old_pwd=\"`option_value --tomb-old-pwd`\"\n\t\t_verbose \"tomb-old-pwd = ::1 old pass::\" $tomb_old_pwd\n\t\task_key_password \"$tomb_old_pwd\"\n\telse\n\t\task_key_password\n\tfi\n\t[[ $? == 0 ]] || {\n\t\t_failure \"No valid password supplied for the old key.\" }\n\told_secret=$TOMBSECRET\n\n\t# luksOpen the tomb (not really mounting, just on the loopback)\n\tprint -R -n - \"$old_secret\" | _sudo cryptsetup --key-file - \\\n\t\t\t\t\t\t\t\t\t\tluksOpen ${TOMBPATH} ${TOMBMAPPER}\n\t[[ $? == 0 ]] || _failure \"Unexpected error in luksOpen.\"\n\n\t_load_key # Try loading new key from option -k and set TOMBKEYFILE\n\n\t_message \"New key: ::1 key file::\" $TOMBKEYFILE\n\n\tif option_is_set --tomb-pwd; then\n\t\ttomb_new_pwd=\"`option_value --tomb-pwd`\"\n\t\t_verbose \"tomb-pwd = ::1 tomb pass::\" $tomb_new_pwd\n\t\task_key_password \"$tomb_new_pwd\"\n\telse\n\t\task_key_password\n\tfi\n\t[[ $? == 0 ]] || {\n\t\t_failure \"No valid password supplied for the new key.\" }\n\n\t_tmp_create\n\ttmpnewkey=$TOMBTMP\n\tprint -R -n - \"$TOMBSECRET\" >> $tmpnewkey\n\n\tprint -R -n - \"$old_secret\" | _sudo cryptsetup --key-file - \\\n\t\t\t\t\t\t\t\t\t\tluksChangeKey \"$TOMBPATH\" \"$tmpnewkey\"\n\n\t[[ $? == 0 ]] || _failure \"Unexpected error in luksChangeKey.\"\n\n\t_sudo cryptsetup luksClose \"${TOMBMAPPER}\" || _failure \"Unexpected error in luksClose.\"\n\n\t_success \"Successfully changed key for tomb: ::1 tomb file::\" $TOMBFILE\n\t_message \"The new key is: ::1 new key::\" $TOMBKEYFILE\n\n\treturn 0\n}\n\n# }}} - Creation\n\n# {{{ Open\n\n_update_control_file() {\n\t# make sure a control file exists, gives it user ownership\n\t# and replaces it with new contents\n\t# stdin = contents\n\t# $1 = path to control file\n\t# $2 = contents\n\t[[ -z $2 ]] && return 1\n\t_sudo touch \"$1\"\n\t_sudo chown ${_UID}:${_GID} \"$1\"\n\tprint \"$2\" > \"$1\"\n\t_verbose \"updated control file $1 = $2\"\n}\n\n_detect_filesystem() {\n\tlocal device=$1\n\t_verbose \"detecting filesystem of ::1 device::\" $device\n\tprint \"`lsblk -in -o FSTYPE $device`\"\n}\n\n# $1 = tombfile $2(optional) = mountpoint\nmount_tomb() {\n\t[[ -n \"$1\" ]] || _failure \"No tomb name specified for opening.\"\n\n\t_message \"Commanded to open tomb ::1 tomb name::\" $1\n\n\t_check_swap\n\n\tis_valid_tomb $1\n\n\t_track_stat \"$TOMBPATH\"\n\n\t_load_key # Try loading new key from option -k and set TOMBKEYFILE\n\n\tlocal tombmount=\"$2\"\n\t[[ -z \"$tombmount\" ]] && {\n\t\ttombmount=\"/media/$TOMBNAME\"\n\t\t[[ -d /media ]] || {\n\t\t\t# no /media found, adopting /run/media/$USER to match behaviour\n\t\t\t# of tools following the notion to mount in that location (like udisks2)\n\t\t\tlocal runmedia=\"/run/media/$_USER\"\n\t\t\ttombmount=\"$runmedia/$TOMBNAME\"\n\t\t}\n\t\t_message \"Mountpoint not specified, using default: ::1 mount point::\" \"$tombmount\"\n\t}\n\n\t_success \"Opening ::1 tomb file:: on ::2 mount point::\" $TOMBNAME \"$tombmount\"\n\n\t# check if the mountpoint is already used\n\tmounted_tombs=(`list_tomb_mounts`)\n\tfor t in ${mounted_tombs}; do\n\t\tusedmount=${t[(ws:;:)2]}\n\t\t[[ \"$usedmount\" == \"$tombmount\" ]] &&\n\t\t\t_failure \"Mountpoint already in use: ::1 mount point::\" \"$tombmount\"\n\tdone\n\n\n\tlo_check \"$TOMBPATH\"\n\t_sudo cryptsetup isLuks ${TOMBPATH} || {\n\t\t# is it a LUKS encrypted nest? see cryptsetup(1)\n\t\t_failure \"::1 tomb file:: is not a valid Luks encrypted storage file.\" $TOMBFILE }\n\n\t_message \"This tomb is a valid LUKS encrypted device.\"\n\n\tlocal luksdump=\"`_sudo cryptsetup luksDump ${TOMBPATH}`\"\n\tlocal tombdump=(`print $luksdump | awk '\n\t\t/^Cipher name/ {print $3}\n\t\t/^Cipher mode/ {print $3}\n\t\t/^Hash spec/   {print $3}'`)\n\t_message \"Cipher is \\\"::1 cipher::\\\" mode \\\"::2 mode::\\\" hash \\\"::3 hash::\\\"\" $tombdump[1] $tombdump[2] $tombdump[3]\n\n\tlocal slotwarn=`print $luksdump | awk '\n\t\tBEGIN { zero=0 }\n\t\t/^Key slot 0/ { zero=1 }\n\t\t/^Key slot.*ENABLED/ { if(zero==1) print \"WARN\" }'`\n\t[[ \"$slotwarn\" == \"WARN\" ]] && {\n\t\t_warning \"Multiple key slots are enabled on this tomb. Beware: there can be a backdoor.\" }\n\n\t_verbose \"Tomb key: ::1 key file::\" $TOMBKEYFILE\n\n\t# take the name only, strip extensions\n\t_verbose \"Tomb name: ::1 tomb name:: (to be engraved)\" $TOMBNAME\n\n\t{ option_is_set --tomb-pwd } && { ! option_is_set -g } && {\n\t\ttomb_pwd=\"`option_value --tomb-pwd`\"\n\t\t_verbose \"tomb-pwd = ::1 tomb pass::\" $tomb_pwd\n\t\task_key_password \"$tomb_pwd\"\n\t} || {\n\t\task_key_password\n\t}\n\t[[ $? == 0 ]] || _failure \"No valid password supplied.\"\n\n\t_cryptsetup luksOpen ${TOMBPATH} ${TOMBMAPPER}\n\t[[ $? = 0 ]] || {\n\t\t_failure \"Failure mounting the encrypted file.\" }\n\n\t# array: [ cipher, keysize, loopdevice ]\n\tlocal tombstat=(`_sudo cryptsetup status ${TOMBMAPPER} | awk '\n\t/cipher:/  {print $2}\n\t/keysize:/ {print $2}\n\t/device:/  {print $2}'`)\n\t_success \"Success unlocking tomb ::1 tomb name::\" $TOMBNAME\n\t_verbose \"Key size is ::1 size:: for cipher ::2 cipher::\" $tombstat[2] $tombstat[1]\n\n\tlocal filesystem=`_detect_filesystem /dev/mapper/${TOMBMAPPER}`\n\t_message \"Filesystem detected: ::1 filesystem::\" $filesystem\n\t# TODO: check if FS is supported, else close luks\n\n\t_verbose \"Tomb engraved as ::1 tomb name::\" $TOMBNAME\n\n\tif option_value_contains -o ro; then\n\t\t_message \"Skipping filesystem checks in read-only\"\n\telse\n\t\t_message \"Checking filesystem via ::1::\" $tombstat[3]\n\t\tcase $filesystem in\n\t\t\text3|ext4)\n\t\t\t\tif option_is_set -q; then\n\t\t\t\t\t_sudo fsck -p -C0 /dev/mapper/${TOMBMAPPER} > /dev/null\n\t\t\t\telse\n\t\t\t\t\t_sudo fsck -p -C0 /dev/mapper/${TOMBMAPPER}\n\t\t\t\tfi\n\t\t\t\t# TODO:     btrfs filesystem label [<device>|<mount_point>] [<newlabel>]\n\t\t\t\t_sudo tune2fs -L $TOMBNAME /dev/mapper/${TOMBMAPPER} > /dev/null\n\t\t\t\t;;\n\t\t\tbtrfs)\n\t\t\t\t_sudo btrfs check /dev/mapper/${TOMBMAPPER}\n\t\t\t\t_sudo btrfs filesystem label /dev/mapper/${TOMBMAPPER} ${TOMBNAME}\n\t\t\t\t;;\n\t\tesac\n\tfi\n\n\t# we need root from here on\n\t_sudo mkdir -p \"$tombmount\"\n\n\t# set ACL on /run/media/$_USER/ to match behaviour (see #461)\n\t# tmpfs -> it doesn't know acl/noacl mount options -> no check\n\t[[ $ACL == 1 ]] && [[ -s $runmedia ]] && {\n\t\t_sudo setfacl -m u:\"$_USER\":r-x \"$runmedia\"\n\t}\n\n\t# Default mount options are overridden with the -o switch\n\tlocal oldmountopts\n\t{ option_is_set -o } && {\n\t\toldmountopts=$MOUNTOPTS\n\t\t# TODO: safety check MOUNTOPTS coming from user\n\t\tMOUNTOPTS=\"$(option_value -o)\" }\n\n\t# default btrfs compression zstd:1 (oportunistic according to pre-compression heuristics)\n\t# see: https://btrfs.readthedocs.io/en/latest/Compression.html#pre-compression-heuristics\n\t[[ \"$filesystem\" = \"btrfs\" ]] && {\n\t\tMOUNTOPTS=\"$MOUNTOPTS,compress=zstd:1\"\n\t}\n\n\t# safe_mount_options &&\n\t_sudo mount -o $MOUNTOPTS /dev/mapper/${TOMBMAPPER} \"${tombmount}\"\n\t# Clean up if the mount failed\n\t[[ $? == 0 ]] || {\n\t\t_warning \"Error mounting ::1 mapper:: on ::2 tombmount::\" $TOMBMAPPER \"$tombmount\"\n\t\t[[ $oldmountopts != $MOUNTOPTS ]] && \\\n\t\t\t_warning \"Are mount options '::1 mount options::' valid?\" $MOUNTOPTS\n\t\t# TODO: move cleanup to _endgame()\n\t\t[[ -d \"$tombmount\" ]] && _sudo rmdir \"$tombmount\"\n\t\t[[ -e /dev/mapper/$TOMBMAPPER ]] && _sudo cryptsetup luksClose $TOMBMAPPER\n\t\t_failure \"Cannot mount ::1 tomb name::\" $TOMBNAME\n\t}\n\n\t_success \"Success opening ::1 tomb file:: on ::2 mount point::\" $TOMBFILE \"$tombmount\"\n\tlocal tombtty tombhost tombuid tombuser\n\n\t# print out when it was opened the last time, by whom and where\n\t[[ -r \"${tombmount}/.last\" ]] && {\n\t\ttombsince=$(cat \"${tombmount}/.last\")\n\t\ttombsince=$(date --date=@$tombsince +%c)\n\t\ttombtty=$(cat \"${tombmount}/.tty\")\n\t\ttombhost=$(cat \"${tombmount}/.host\")\n\t\ttomblast=$(cat \"${tombmount}/.last\")\n\t\ttombuid=$(cat \"${tombmount}/.uid\" | tr -d ' ')\n\n\t\ttombuser=`_get_username $tombuid`\n\n\t\t_message \"Last visit by ::1 user::(::2 tomb build::) from ::3 tty:: on ::4 host::\" $tombuser $tombuid $tombtty $tombhost\n\t\t_message \"on date ::1 date::\" $tombsince\n\t\t[[ -r \"${tombmount}\"/.cleanexit ]] || _message \"the door was slammed or shutdown called before umount.\"\n\t}\n\n\t# write down the UID and TTY that opened the tomb\n\toption_value_contains -o ro || {\n\t\t_update_control_file \"${tombmount}/.uid\" $_UID\n\t\t_update_control_file \"${tombmount}/.tty\" $_TTY\n\t\t# also the hostname\n\t\tif command -v hostname >/dev/null; then\n\t\t\t_update_control_file \"${tombmount}/.host\" `hostname`\n\t\telif [[ -r /etc/hostname ]]; then\n\t\t\t_update_control_file \"${tombmount}/.host\" $(cat /etc/hostname)\n\t\telse\n\t\t\t_update_control_file \"${tombmount}/.host\" localhost\n\t\tfi\n\t\t# and the \"last time opened\" information\n\t\t# in minutes since 1970, this is printed at next open\n\t\t_update_control_file \"${tombmount}/.last\" `date +%s`\n\t\t# human readable: date --date=@\"`cat .last`\" +%c\n\t}\n\t# process bind-hooks (mount -o bind of directories)\n\t# and exec-hooks (execute on open)\n\toption_is_set -n || {\n\t\texec_safe_bind_hooks \"${tombmount}\"\n\t\texec_safe_func_hooks open \"${tombmount}\"\n\t}\n\n\t# Changes ownership to current user. This facilitates a lot\n\t# usability by single users. If a Tomb is opened read-only or it\n\t# is \"multiuser\" and contains ACL \"by convention\" using UNIX\n\t# ownership that needs to be preserved, then this behavior can be\n\t# deactivated using -p\n\tlocal dochown=true\n\toption_value_contains -o ro && dochown=false\n\toption_is_set -p            && dochown=false\n\t$dochown && _sudo chown -R ${_UID}:${_GID} \"${tombmount}\"\n\n\treturn 0\n}\n\n## HOOKS EXECUTION\n#\n# Execution of code inside a tomb may present a security risk, e.g.,\n# if the tomb is shared or compromised, an attacker could embed\n# malicious code.  When in doubt, open the tomb with the -n switch in\n# order to skip this feature and verify the files mount-hooks and\n# bind-hooks inside the tomb yourself before letting them run.\n\n# Mount files and directories from the tomb to the current user's HOME.\n#\n# Synopsis: exec_safe_bind_hooks /path/to/mounted/tomb\n#\n# This can be a security risk if you share tombs with untrusted people.\n# In that case, use the -n switch to turn off this feature.\nexec_safe_bind_hooks() {\n\tlocal mnt=\"$1\"\t # First argument is the mount point of the tomb\n\n\t# Default mount options are overridden with the -o switch\n\t[[ -n ${(k)OPTS[-o]} ]] && MOUNTOPTS=${OPTS[-o]}\n\n\t# No HOME set? Note: this should never happen again.\n\t[[ -z $HOME ]] && {\n\t\t_warning \"How pitiful!\tA tomb, and no HOME.\"\n\t\treturn 1 }\n\n\t[[ -z $mnt || ! -d $mnt ]] && {\n\t\t_warning \"Cannot exec bind hooks without a mounted tomb.\"\n\t\treturn 1 }\n\n\t[[ -r \"$mnt/bind-hooks\" ]] || {\n\t\t_verbose \"bind-hooks not found in ::1 mount point::\" $mnt\n\t\treturn 0 }\n\n\ttypeset -Al maps\t\t# Maps of files and directories to mount\n\ttypeset -al mounted\t\t# Track already mounted files and directories\n\n\t# better parsing for bind hooks checks for two separated words on\n\t# each line, using zsh word separator array subscript\n\t_bindhooks=\"${mapfile[${mnt}/bind-hooks]}\"\n\tfor h in ${(f)_bindhooks}; do\n\t\th=${h//\\\\ /__ESC_SPACE__}\n\t\ts=\"${h[(w)1]}\"\n\t\td=\"${h[(w)2]}\"\n\t\ts=${s//__ESC_SPACE__/ }\n\t\td=${d//__ESC_SPACE__/ }\n\t\t[[ -z $s ]] && { _warning \"bind-hooks file is broken\"; return 1 }\n\t\t[[ -z $d ]] && { _warning \"bind-hooks file is broken\"; return 1 }\n\t\tmaps+=($s $d)\n\t\t_verbose \"bind-hook found: $s -> $d\"\n\tdone\n\tunset _bindhooks\n\n\tfor dir in ${(k)maps}; do\n\t\t[[ \"${dir[1]}\" == \"/\" || \"${dir[1,2]}\" == \"..\" ]] && {\n\t\t\t_warning \"bind-hooks map format: local/to/tomb local/to/\\$HOME\"\n\t\t\tcontinue }\n\n\t\t[[ \"${${maps[$dir]}[1]}\" == \"/\" || \"${${maps[$dir]}[1,2]}\" == \"..\" ]] && {\n\t\t\t_warning \"bind-hooks map format: local/to/tomb local/to/\\$HOME.\t Rolling back\"\n\t\t\tfor dir in ${mounted}; do _sudo umount $dir; done\n\t\t\treturn 0 }\n\n\t\twhile true; do\n\t\t\t[[ ! -r \"$mnt/$dir\" ]] && {\n\t\t\t\t_warning \"bind-hook source not found in tomb, skipping ::1 mount point::/::2 subdir::\" $mnt $dir\n\t\t\t\tbreak; }\n\t\t\t[[ ! -r \"$HOME/${maps[$dir]}\" ]] && {\n\t\t\t\t_warning \"bind-hook target not existent, skipping ::1 home::/::2 subdir::\" $HOME ${maps[$dir]}\n\t\t\t\tbreak; }\n\t\t\t_sudo mount -o bind,$MOUNTOPTS \\\n\t\t\t      $mnt/$dir $HOME/${maps[$dir]} \\\n\t\t\t\t&& mounted+=(\"$HOME/${maps[$dir]}\")\n\t\t\tbreak\n\t\tdone\n\tdone\n}\n\n# Execute automated actions configured in the tomb.\n#\n# Synopsis: exec_safe_func_hooks /path/to/mounted/tomb\n#\n# If an executable file named 'exec-hooks' is found inside the tomb,\n# run it as a user.\t This might need a dialog for security on what is\n# being run, however we expect you know well what is inside your tomb.\n# If you're mounting an untrusted tomb, be safe and use the -n switch\n# to verify what it would run if you let it.  This feature opens the\n# possibility to make encrypted executables.\nexec_safe_func_hooks() {\n\tlocal mnt\n\tmnt=\"$2\"\n\t# Only run if post-hooks has the executable bit set\n\t[[ -x $mnt/exec-hooks ]] && {\n\t\t_success \"Exec hook: ::1 exec hook:: ::2 action::\" \\\n\t\t\t\t \"${mnt}/exec-hooks\" \"$1\"\n\t\t# here call two actions: open or close. Synopsis:\n\t\t# $1\t $2\t\t\t  $3\t\t  $4\t\t  $5\n\t\t# open\t\"$tombmount\"\n\t\t# close \"$tombmount\" \"$tombname\" \"$tombloop\" \"$TOMBMAPPER\"\n\t\t$mnt/exec-hooks \"$1\" \"$2\" \"$3\" \"$4\" \"$5\"\n\t\treturn $?\n\t}\n\treturn 0\n}\n\n# }}} - Tomb open\n\n# {{{ List\n\n# list all tombs mounted in a readable format\n# $1 is optional, to specify a tomb\nlist_tombs() {\n\n\tlocal tombname tombmount tombfs tombfsopts tombloop\n\tlocal ts tombtot tombused tombavail tombpercent tombp tombsince\n\tlocal tombtty tombhost tombuid tombuser\n\t# list all open tombs\n\tmounted_tombs=(`list_tomb_mounts $1`)\n\t[[ ${#mounted_tombs} == 0 ]] && {\n\t\t_failure \"I can't see any open tomb, may they all rest in peace.\" }\n\n\tfor t in ${mounted_tombs}; do\n\t\tmapper=`basename ${t[(ws:;:)1]}`\n\t\ttombname=${t[(ws:;:)5]}\n\t\ttombmount=\"${t[(ws:;:)2]}\"\n\t\ttombfs=${t[(ws:;:)3]}\n\t\ttombfsopts=${t[(ws:;:)4]}\n\t\ttombloop=${mapper[(ws:.:)4]}\n\n\t\t# calculate tomb size\n\t\tts=`df -hP /dev/mapper/$mapper |\nawk \"/mapper/\"' { print $2 \";\" $3 \";\" $4 \";\" $5 }'`\n\t\ttombtot=${ts[(ws:;:)1]}\n\t\ttombused=${ts[(ws:;:)2]}\n\t\ttombavail=${ts[(ws:;:)3]}\n\t\ttombpercent=${ts[(ws:;:)4]}\n\t\ttombp=${tombpercent%%%}\n\n\t\t# obsolete way to get the last open date from /dev/mapper\n\t\t# which doesn't work when tomb filename contain dots\n\t\t# tombsince=`date --date=@${mapper[(ws:.:)3]} +%c`\n\n\t\t# find out who opens it from where\n\t\t[[ -r \"${tombmount}/.tty\" ]] && {\n\t\t\ttombsince=$(cat \"${tombmount}/.last\")\n\t\t\ttombsince=$(date --date=@$tombsince +%c)\n\t\t\ttombtty=$(cat \"${tombmount}/.tty\")\n\t\t\ttombhost=$(cat \"${tombmount}/.host\")\n\t\t\ttombuid=$(cat \"${tombmount}/.uid\" | tr -d ' ')\n\n\t\t\ttombuser=`_get_username $tombuid`\n\t\t}\n\n\t\t{ option_is_set --get-mountpoint } && { print \"$tombmount\"; continue }\n\n\t\t_message \"::1 tombname:: open on ::2 tombmount:: using ::3 tombfsopts::\" \\\n\t\t\t\t $tombname \"$tombmount\" $tombfsopts\n\n\t\t_verbose \"::1 tombname:: attached to /dev/::2 tombloop:: device\" $tombname $tombloop\n\n\t\t_message \"::1 tombname:: open since ::2 tombsince::\" $tombname $tombsince\n\n\t\t[[ -z \"$tombtty\" ]] || {\n\t\t\t_message \"::1 tombname:: open by ::2 tombuser:: from ::3 tombtty:: on ::4 tombhost::\" \\\n\t\t\t\t\t $tombname $tombuser $tombtty $tombhost\n\t\t}\n\n\t\t_message \"::1 tombname:: size ::2 tombtot:: of which ::3 tombused:: (::5 tombpercent::%) is used: ::4 tombavail:: free \" \\\n\t\t\t\t $tombname $tombtot $tombused $tombavail $tombpercent\n\n\t\t[[ ${tombp} -ge 90 ]] && {\n\t\t\t_warning \"::1 tombname:: warning: your tomb is almost full!\" $tombname\n\t\t}\n\n\t\t# Now check hooks\n\t\tmounted_hooks=(`list_tomb_binds \"$mapper\"`)\n\t\tfor h in ${mounted_hooks}; do\n\t\t\t_message \"::1 tombname:: hooks ::2 hookdest::\" \\\n\t\t\t\t\t $tombname ${h[(ws:;:)2]}\n\t\tdone\n\tdone\n\treturn 0\n}\n\n\n# Print out an array of mounted tombs (internal use)\n# Format is semi-colon separated list of attributes\n# if 1st arg is supplied, then list only that tomb\n#\n# String positions in the semicolon separated array:\n#\n# 1. full mapper path\n#\n# 2. mountpoint\n#\n# 3. filesystem type\n#\n# 4. mount options\n#\n# 5. tomb name\nlist_tomb_mounts() {\n\t# execute in subshell to avoid ZSH non-POSIX behaviour if globbing doesn't match something\n\t( for dev in /dev/mapper/tomb*$1.*; do\n\t\tfindmnt --source ${dev} -rnvo SOURCE,TARGET,FSTYPE,OPTIONS,LABEL \\\n\t\t\t| awk '\nBEGIN { main=\"\" }\n{\n  if(main==$1) next;\n  print $1 \";\" $2 \";\" $3 \";(\" $4 \");[\" $5 \"]\"\n  main=$1\n}\n'\n\tdone ) 2>/dev/null\n}\n\n# list_tomb_binds\n# print out an array of mounted bind hooks (internal use)\n# format is semi-colon separated list of attributes\n# needs two arguments: name of tomb whose hooks belong\n#\t\t\t\t\t   mount tomb\nlist_tomb_binds() {\n\t[[ -z \"$1\" ]] && {\n\t\t_failure \"Internal error: list_tomb_binds called without argument.\" }\n\n\t# ignore the first line of the result for the respective source (mapper),\n\t# as this will be the canonical first mount (aka main mount)\n\tfindmnt --source=/dev/mapper/\"$1\" -rno SOURCE,TARGET,FSTYPE,OPTIONS,LABEL \\\n\t\t| awk '\nFNR==1 {next}\n{\n  print $1 \";\" $2 \";\" $3 \";(\" $4 \");[\" $5 \"]\"\n}\n'\n}\n\n# }}} - Tomb list\n\n# {{{ Index and search\n\n# index files in all tombs for search\n# $1 is optional, to specify a tomb\nindex_tombs() {\n\tmounted_tombs=(`list_tomb_mounts $1`)\n\t[[ ${#mounted_tombs} == 0 ]] && {\n\t\t# Considering one tomb\n\t\t[[ -n \"$1\" ]] && {\n\t\t\t_failure \"There seems to be no open tomb engraved as [::1::]\" $1 }\n\t\t# Or more\n\t\t_failure \"I can't see any open tomb, may they all rest in peace.\" }\n\n\t_success \"Creating and updating search indexes.\"\n\n\t# # start the LibreOffice document converter if installed\n\t# { command -v unoconv 1>/dev/null 2>/dev/null } && {\n\t# \tunoconv -l 2>/dev/null &\n\t# \t_verbose \"unoconv listener launched.\"\n\t# \tsleep 1 }\n\n\tfor t in ${mounted_tombs}; do\n\t\tmapper=`basename ${t[(ws:;:)1]}`\n\t\ttombname=${t[(ws:;:)5]}\n\t\ttombmount=\"${t[(ws:;:)2]}\"\n\t\t[[ -r \"${tombmount}/.noindex\" ]] && {\n\t\t\t_message \"Skipping ::1 tomb name:: (.noindex found).\" $tombname\n\t\t\tcontinue }\n\n\t  { command -v updatedb 1>/dev/null 2>/dev/null } && {\n\t    updatedbver=`updatedb --version | grep '^updatedb'`\n\t    if [[ \"$updatedbver\" =~ \"GNU findutils\" ]]; then\n\t\t    _warning \"Cannot use GNU findutils for index/search commands.\"\n      # elif [[ \"$updatedbver\" =~ \"locate\" ]]; then\n\t\t  #   _warning \"Index command needs 'mlocate/plocate' to be installed.\"\n      else\n\t\t    _message \"Indexing ::1 tomb name:: filenames...\" $tombname\n\t      _verbose \"$updatedbver\"\n\t\t    updatedb -l 0 -o \"${tombmount}/.updatedb\" -U \"${tombmount}\"\n      fi\n    }\n\n\t\t# here we use recoll to index file contents\n\t\t[[ $RECOLL == 1 ]] && {\n\t\t\t_message \"Indexing ::1 tomb name:: contents...\" $tombname\n\t\t\trm -f \"${tombmount}/recoll.conf\"\n\t\t\t_message \"Generating a new search index configuration: ::1 recoll conf::\" \"${tombmount}/recoll.conf\"\n      mkdir -p \"${tombmount}/.recoll\"\n\t\t\tcat <<EOF > \"${tombmount}/recoll.conf\"\ntopdirs = ${tombmount}\ncachedir = ${tombmount}/.recoll\nEOF\n\t\t\trecollindex -c \"${tombmount}\"\n\t\t}\n\t\t_message \"Search index updated.\"\n\tdone\n\treturn 0\n}\n\nsearch_tombs() {\n\t{ command -v locate 1>/dev/null 2>/dev/null } || {\n\t\t_failure \"Cannot index tombs on this system: updatedb (mlocate/plocate) not installed.\" }\n\n\tupdatedbver=`updatedb --version | grep '^updatedb'`\n\t[[ \"$updatedbver\" =~ \"GNU findutils\" ]] && {\n\t\t_warning \"Cannot use GNU findutils for index/search commands.\" }\n\t[[ \"$updatedbver\" =~ \"locate\" ]] || {\n\t\t_failure \"Index command needs 'mlocate/plocate' to be installed.\" }\n\n\t_verbose \"$updatedbver\"\n\n\t# list all open tombs\n\tmounted_tombs=(`list_tomb_mounts`)\n\t[[ ${#mounted_tombs} == 0 ]] && {\n\t\t_failure \"I can't see any open tomb, may they all rest in peace.\" }\n\n\t_success \"Searching for: ::1::\" ${(f)@}\n\tfor t in ${mounted_tombs}; do\n\t\t_verbose \"Checking for index: ::1::\" ${t}\n\t\tmapper=`basename ${t[(ws:;:)1]}`\n\t\ttombname=${t[(ws:;:)5]}\n\t\ttombmount=\"${t[(ws:;:)2]}\"\n\t\t[[ -r \"${tombmount}/.updatedb\" ]] && {\n\t\t\t# Use mlocate/plocate to search hits on filenames\n\t\t\t_message \"Searching filenames in tomb ::1 tomb name::\" $tombname\n\t\t\tlocate -d \"${tombmount}/.updatedb\" -e -i \"${(f)@}\"\n\t\t\t_message \"Matches found: ::1 matches::\" \\\n\t\t\t\t\t $(locate -d \"${tombmount}/.updatedb\" -e -i -c ${(f)@})\n\n\t\t\t# Use recoll to search over contents\n\t\t\t[[ $RECOLL == 1 && -r \"$tombmount/recoll.conf\" ]] && {\n\t\t\t\t_message \"Searching contents in tomb ::1 tomb name::\" $tombname\n\t\t\t\trecollq -c \"${tombmount}\" ${@} }\n\t\t} || {\n\t\t\t_warning \"Skipping tomb ::1 tomb name::: not indexed.\" $tombname\n\t\t\t_warning \"Run 'tomb index' to create indexes.\" }\n\tdone\n\t_message \"Search completed.\"\n\treturn 0\n}\n\n# }}} - Index and search\n\n# {{{ Resize\n\n# resize tomb file size\nresize_tomb() {\n\tlocal tombpath=\"$1\"\t   # First argument is the path to the tomb\n\n\t_message \"Commanded to resize tomb ::1 tomb name:: to ::2 size:: mebibytes.\" $1 $OPTS[-s]\n\n\t[[ -z \"$1\" ]] && _failure \"No tomb name specified for resizing.\"\n\t[[ ! -r \"$1\" ]] && _failure \"Cannot find ::1::\" $1\n\n\tlocal newtombsize=\"`option_value -s`\"\n\t[[ -z \"$newtombsize\" ]] && {\n\t\t_failure \"Aborting operations: new size was not specified, use -s\" }\n\n\tis_valid_tomb $tombpath\n\n\t_load_key # Try loading new key from option -k and set TOMBKEYFILE\n\n\tif option_is_set --tomb-pwd; then\n\t\tlocal tomb_pwd=\"`option_value --tomb-pwd`\"\n\t\t# _verbose \"tomb-pwd = ::1 tomb pass::\" $tomb_pwd\n\t\task_key_password \"$tomb_pwd\"\n\telse\n\t\task_key_password\n\tfi\n\t[[ $? == 0 ]] || _failure \"No valid password supplied.\"\n\n\tlocal oldtombsize=$(( `stat -c %s \"$TOMBPATH\" 2>/dev/null` / 1048576 ))\n\tlocal delta=\"\"\n\t# New tomb size must be specified\n\t[[ -n \"$newtombsize\" ]] || {\n\t\t_failure \"You must specify the new size of ::1 tomb name::\" $TOMBNAME }\n\t# New tomb size must be an integer\n\t[[ $newtombsize == <-> ]] || _failure \"Size is not an integer.\"\n\n\t# Tombs can only grow in size\n\tif [[ \"$newtombsize\" -gt \"$oldtombsize\" ]]; then\n\n\t\tdelta=\"$(( $newtombsize - $oldtombsize ))\"\n\t\t_verbose \"delta growth: +${delta}M\"\n\t\t[[ \"$delta\" -gt \"150\" ]] ||\n\t\t\t_failure \"The growth in size must be greater than 150MiB\"\n\n\t\t_message \"Generating ::1 tomb file:: of ::2 size::MiB\" $TOMBFILE $newtombsize\n\n\t\t_verbose \"Data dump using ::1:: from /dev/urandom\" ${DD[1]}\n\t\t${=DD} if=/dev/urandom bs=1048576 count=${delta} >> $TOMBPATH\n\t\t[[ $? == 0 ]] || {\n\t\t\t_failure \"Error creating the extra resize ::1 size::, operation aborted.\" \\\n\t\t\t\t\t $tmp_resize }\n\n\t\t# If same size this allows to re-launch resize if pinentry expires\n\t\t# so that it will continue resizing without appending more space.\n\t\t# Resizing the partition to the file size cannot harm data anyway.\n\telif [[ \"$newtombsize\" = \"$oldtombsize\" ]]; then\n\t\t_message \"Tomb seems resized already, operating filesystem stretch\"\n\telse\n\t\t_failure \"The new size must be greater than old tomb size.\"\n\tfi\n\n\tlo_check \"$TOMBPATH\"\n\n\t_message \"opening tomb\"\n\t_cryptsetup luksOpen ${TOMBPATH} ${TOMBMAPPER} || {\n\t\t_failure \"Failure mounting the encrypted file.\" }\n\n\t_sudo cryptsetup resize \"${TOMBMAPPER}\" || {\n\t\t_failure \"cryptsetup failed to resize ::1 mapper::\" $TOMBMAPPER }\n\n\n\tfilesystem=`_detect_filesystem /dev/mapper/${TOMBMAPPER}`\n\t_message \"Filesystem detected: ::1 filesystem::\" $filesystem\n\tcase $filesystem in\n\t\text3|ext4)\n\t\t\t_sudo e2fsck -p -f /dev/mapper/${TOMBMAPPER} || {\n\t\t\t\t_sudo cryptsetup luksClose \"${TOMBMAPPER}\"\n\t\t\t\t_failure \"e2fsck failed to check ::1 mapper::\" $TOMBMAPPER }\n\t\t\t_sudo resize2fs /dev/mapper/${TOMBMAPPER} || {\n\t\t\t\t_sudo cryptsetup luksClose \"${TOMBMAPPER}\"\n\t\t\t\t_failure \"resize2fs failed to resize ::1 mapper::\" $TOMBMAPPER }\n\t\t\t;;\n\t\tbtrfs)\n\t\t\t_sudo btrfs check /dev/mapper/${TOMBMAPPER} || {\n\t\t\t\t_sudo cryptsetup luksClose \"${TOMBMAPPER}\"\n\t\t\t\t_failure \"filesystem check failed on ::1 mapper::\" $TOMBMAPPER }\n\t\t\t# btrfs requires mounting before resize\n\t\t\tlocal mp=$HOME/${TOMBNAME}.tomb.resize\n\t\t\tmkdir -p ${mp}\n\t\t\t_sudo mount /dev/mapper/${TOMBMAPPER} ${mp}\n\t\t\tsudo btrfs filesystem show /dev/mapper/${TOMBMAPPER} |\n\t\t\t\tawk '/devid/{print $2}' | read -r devid\n\t\t\t_verbose \"BTRFS devid detected: $devid\"\n\t\t\t_verbose \"btrfs filesystem resize ${devid}:max ${mp}\"\n\t\t\t_sudo btrfs filesystem resize ${devid}:max ${mp} || {\n\t\t\t\t_sudo umount ${mp}\n\t\t\t\t_sudo cryptsetup luksClose \"${TOMBMAPPER}\"\n\t\t\t\trmdir ${mp}\n\t\t\t\t_failure \"filesystem resize failed on ::1 mapper::\" $TOMBMAPPER\n\t\t\t}\n\t\t\t_sudo umount ${mp}\n\t\t\t_sudo cryptsetup luksClose \"${TOMBMAPPER}\"\n\t\t\trmdir ${mp}\n\t\t\t;;\n\t\t# TODO: report error on unrecognized filesystem\n\tesac\n\n\t# close and free the loop device\n\t_sudo cryptsetup luksClose \"${TOMBMAPPER}\"\n\n\treturn 0\n}\n\n# }}}\n\n# {{{ Close\n\numount_tomb() {\n\tlocal tombs how_many_tombs\n\tlocal pathmap mapper tombname tombmount loopdev\n\tlocal ans pidk pname\n\n\tif [ \"$1\" = \"all\" ]; then\n\t\tmounted_tombs=(`list_tomb_mounts`)\n\telse\n\t\tmounted_tombs=(`list_tomb_mounts $1`)\n\tfi\n\n\t[[ ${#mounted_tombs} == 0 ]] && {\n\t\t_failure \"There is no open tomb to be closed.\" }\n\n\t[[ ${#mounted_tombs} -gt 1 && -z \"$1\" ]] && {\n\t\t_warning \"Too many tombs mounted, please specify one (see tomb list)\"\n\t\t_warning \"or issue the command 'tomb close all' to close them all.\"\n\t\t_failure \"Operation aborted.\" }\n\n\tfor t in ${mounted_tombs}; do\n\t\tmapper=`basename ${t[(ws:;:)1]}`\n\n\t\t# strip square parens from tombname\n\t\ttombname=${t[(ws:;:)5]}\n\t\ttombmount=\"${t[(ws:;:)2]}\"\n\t\ttombfs=${t[(ws:;:)3]}\n\t\ttombfsopts=${t[(ws:;:)4]}\n\t\ttombloop=${mapper[(ws:.:)4]}\n\n\t\t_verbose \"Name: ::1 tomb name::\" $tombname\n\t\t_verbose \"Mount: ::1 mount point::\" \"$tombmount\"\n\t\t_verbose \"Loop: ::1 mount loop::\" $tombloop\n\t\t_verbose \"Mapper: ::1 mapper::\" $mapper\n\n\t\t[[ -e \"$mapper\" ]] && {\n\t\t\t_warning \"Tomb not found: ::1 tomb file::\" $1\n\t\t\t_warning \"Please specify an existing tomb.\"\n\t\t\treturn 0 }\n\n\t\toption_is_set -n || {\n\t\t\texec_safe_func_hooks \\\n\t\t\t\tclose \"$tombmount\" \"$tombname\" \"$tombloop\" \"$mapper\"\n\t\t\texec_hook_res=$?\n\t\t\t[[ $exec_hook_res = 0 ]] || {\n\t\t\t\t_warning \"close exec-hook returns a non-zero error code: ::1 error::\" $exec_hook_res\n\t\t\t\t_failure \"Operation aborted\"\n\t\t\t}\n\t\t}\n\n\t\t# if SLAM is set kill possible processes\n\t\t[[ -v SLAM ]] && {\n\t\t\t_message \"Slamming tomb ::1 tombname:: mounted on ::2 tombmount::\" \\\n\t\t\t\t ${tombname} \"${tombmount}\"\n\t\t\t_kill_processes \"$tombname\" \"$tombmount\"\n\t\t\t[[ $? -ne 0 ]] && {\n\t\t\t\t_failure \"Still active processes for ::1 tombname ::, cannot close tomb.\" \"$tombname\"\n\t\t\t}\n\t\t} || {\n\t\t\t_message \"Closing tomb ::1 tomb name:: mounted on ::2 mount point::\" \\\n\t\t\t\t $tombname \"$tombmount\"\n\t\t}\n\n\t\t# check if there are bind mounted dirs and close them first\n\t\t# Can be due to bind-hooks or outside --bind mounts\n\t\tbind_tombs=(`list_tomb_binds \"$mapper\"`)\n\t\tfor b in ${bind_tombs}; do\n\t\t\tbind_mapper=\"${b[(ws:;:)1]}\"\n\t\t\tbind_mount=\"${b[(ws:;:)2]}\"\n\t\t\t_message \"Closing tomb bind hook: ::1 hook::\" \"$bind_mount\"\n\t\t\t_sudo umount \"$(echo \"$bind_mount\")\" ||\n\t\t\t\t_failure \"Tomb bind hook ::1 hook:: is busy, cannot close tomb.\" \"$bind_mount\"\n\t\tdone\n\n\t\t# umount the main mount\n\t\t_verbose \"Performing umount of ::1 mount point::\" \"$tombmount\"\n\t\ttouch \"${tombmount}\"/.cleanexit\n\t\t_sudo umount \"${tombmount}\"\n\t\t[[ $? = 0 ]] || {\n\t\t\trm -f \"${tombmount}\"/.cleanexit\n\t\t\t_failure \"Tomb is busy, cannot umount!\"\n\t\t}\n\n\t\t# If we used a default mountpoint and is now empty, delete it\n\t\ttombname_regex=${tombname//\\[/}\n\t\ttombname_regex=${tombname_regex//\\]/}\n\n\t\t[[ \"$tombmount\" =~ \"(/run)?/media(/$_USER)?/$tombname_regex\" ]] && {\n\t\t\t_sudo rmdir \"$tombmount\" }\n\n\t\t_sudo cryptsetup luksClose $mapper ||\n\t\t\t_failure \"Error occurred in cryptsetup luksClose ::1 mapper::\" $mapper\n\n\t\t_success \"Tomb ::1 tomb name:: closed: your bones will rest in peace.\" $tombname\n\n\tdone # loop across mounted tombs\n\n\treturn 0\n}\n\nlist_processes() {\n\t# $1 = (optional) name of tomb\n\t# runs lsof on the mounted_tombs\n\tlocal mounted_tombs i indicator lsofres\n\tindicator=1 # != 0 means there were processes\n\tmounted_tombs=(`list_tomb_mounts ${1//[\\[\\]]/}`) # remove possible []\n\tif [[ \"${#mounted_tombs}\" -gt 0 ]]; then\n\t\tif [[ -z $1 ]]; then\n\t\t\t_message \"Looking for processes running inside all open tombs...\"\n\t\telse\n\t\t\t_message \"Looking for processes running inside tomb ::1 tombname::...\" \"$1\"\n\t\tfi\n\n\t\tfor i in ${mounted_tombs}; do\n\t\t\t_verbose \"scanning tomb: ::1 tombmount::\" $i\n\t\t\tlsofres=$(_sudo lsof +D \"${i[(ws:;:)2]}\")\n\t\t\t# Check on output, as $? will always return 1 for whatever reasons\n\t\t\t[[ -n $lsofres ]] && { indicator=0; echo $lsofres } || { _success \"None found\" }\n\t\tdone\n\tfi\n\treturn $indicator\n}\n\n# Kill all processes using the specified tomb\n_kill_processes() {\n\t# $1 = name of tomb to slam\n\t# $2 = mount location of tomb\n\t[[ -z \"$2\" ]] && _failure \"Missing arguments for slamming.\"\n\n\tlocal pnum result lsofres\n\tresult=0\n\n\t_verbose \"::1 tombname:: Determining if there are open processes that needs killing\" \"$1\"\n\n\tlist_processes \"$1\"\n\t[[ $? -eq 0 ]] && {\n\t\t_verbose \"Found open processes in ::1 tombname::\" \"$1\"\n\t\t# iterate through 3 different signals, break on success\n\t\tfor s in TERM HUP KILL; do\n\t\t\tlsofres=(`_sudo lsof -t +D \"$2\"`)\n\t\t\t[[ -n $lsofres ]] && {\n\t\t\t\t# iterate through all processes before switching signals\n\t\t\t\tfor pnum in $lsofres; do\n\t\t\t\t\t_message \"::1 tombname:: sending ::2 sig:: to open process ::3 pnum::\" \\\n\t\t\t\t\t\t\t ${1} ${s} ${pnum}\n\t\t\t\t\t_sudo kill -$s $pnum\n\t\t\t\tdone\n\t\t\t\t} || { break }\n\t\t\t# give some time to the process for a clean quit\n\t\t\tsleep .5\n\t\tdone\n\t}\n\n\t# if there are still processes then signal failure\n\tlsofres=(`_sudo lsof -t +D \"$tombmount\"`)\n\t[[ -n $lsofres ]] && {\n\t\t_verbose \"Verify that no open processes remain in ::1 tombname::\" \"$1\"\n\t\tfor pnum in $lsofres; do\n\t\t\t_warning \"Couldn't kill ::1 pnum::\" $pnum\n\t\tdone\n\t\tresult=1\n\t}\n\treturn $result\n}\n\n# }}} - Tomb close\n\n# {{{ Main routine\n\nmain() {\n\n\t_ensure_dependencies  # Check dependencies are present or bail out\n\n\tlocal -A subcommands_opts\n\t### Options configuration\n\t#\n\t# Hi, dear developer!  Are you trying to add a new subcommand, or\n\t# to add some options?\tWell, keep in mind that option names are\n\t# global: they cannot bear a different meaning or behaviour across\n\t# subcommands.\tThe only exception is \"-o\" which means: \"options\n\t# passed to the local subcommand\", and thus can bear a different\n\t# meaning for different subcommands.\n\t#\n\t# For example, \"-s\" means \"size\" and accepts one argument. If you\n\t# are tempted to add an alternate option \"-s\" (e.g., to mean\n\t# \"silent\", and that doesn't accept any argument) DON'T DO IT!\n\t#\n\t# There are two reasons for that:\n\t#\t I. Usability; users expect that \"-s\" is \"size\"\n\t#\tII. Option parsing WILL EXPLODE if you do this kind of bad\n\t#\t\tthings (it will complain: \"option defined more than once\")\n\t#\n\t# If you want to use the same option in multiple commands then you\n\t# can only use the non-abbreviated long-option version like:\n\t# -force and NOT -f\n\t#\n\tmain_opts=(q -quiet=q D -debug=D h -help=h v -version=v f -force=f -tmp: U: G: T: -no-color -unsafe g -gpgkey=g -sudo:)\n\tsubcommands_opts[__default]=\"\"\n\t# -o in open and mount is used to pass alternate mount options\n\tsubcommands_opts[open]=\"n -nohook=n k: o: -ignore-swap -tomb-pwd: r: R: p -preserve-ownership=p\"\n\tsubcommands_opts[mount]=${subcommands_opts[open]}\n\n\tsubcommands_opts[create]=\"\" # deprecated, will issue warning\n\n\t# -o in forge and lock is used to pass an alternate cipher.\n\tsubcommands_opts[forge]=\"-ignore-swap k: -kdf: -kdfiter: -kdfmem: -kdfpar: o: -tomb-pwd: -use-random r: R: \"\n\tsubcommands_opts[dig]=\"-ignore-swap s: -size=s \"\n\tsubcommands_opts[lock]=\"-ignore-swap k: o: -tomb-pwd: r: R: -filesystem: \"\n\tsubcommands_opts[setkey]=\"k: -ignore-swap -tomb-old-pwd: -tomb-pwd: r: R: \"\n\tsubcommands_opts[engrave]=\"k: \"\n\n\tsubcommands_opts[passwd]=\"k: -ignore-swap -kdf: -kdfiter: -kdfmem: -kdfpar: -tomb-old-pwd: -tomb-pwd: r: R: \"\n\tsubcommands_opts[close]=\"\"\n\tsubcommands_opts[help]=\"\"\n\tsubcommands_opts[slam]=\"\"\n\tsubcommands_opts[ps]=\"\"\n\tsubcommands_opts[list]=\"-get-mountpoint \"\n\n\tsubcommands_opts[index]=\"\"\n\tsubcommands_opts[search]=\"\"\n\n\tsubcommands_opts[bury]=\"k: -tomb-pwd: r: R: \"\n\tsubcommands_opts[exhume]=\"k: -tomb-pwd: r: R: \"\n\tsubcommands_opts[cloak]=\"k: \"\n\tsubcommands_opts[uncloak]=\"k: \"\n\t# subcommands_opts[decompose]=\"\"\n\t# subcommands_opts[recompose]=\"\"\n\t# subcommands_opts[install]=\"\"\n\tsubcommands_opts[askpass]=\"\"\n\tsubcommands_opts[source]=\"\"\n\tsubcommands_opts[resize]=\"-ignore-swap s: -size=s k: -tomb-pwd: r: R: \"\n\tsubcommands_opts[check]=\"-ignore-swap \"\n\t#\t subcommands_opts[translate]=\"\"\n\n\t### Detect subcommand\n\tlocal -aU every_opts #every_opts behave like a set; that is, an array with unique elements\n\tfor optspec in $subcommands_opts$main_opts; do\n\t\tfor opt in ${=optspec}; do\n\t\t\tevery_opts+=${opt}\n\t\tdone\n\tdone\n\tlocal -a oldstar\n\toldstar=(\"${(@)argv}\")\n\t#### detect early: useful for --option-parsing\n\tzparseopts -M -D -Adiscardme ${every_opts}\n\tif [[ -n ${(k)discardme[--option-parsing]} ]]; then\n\t\tprint $1\n\t\tif [[ -n \"$1\" ]]; then\n\t\t\treturn 1\n\t\tfi\n\t\treturn 0\n\tfi\n\tunset discardme\n\tif ! zparseopts -M -E -D -Adiscardme ${every_opts}; then\n\t\t_failure \"Error parsing.\"\n\t\treturn 127\n\tfi\n\tunset discardme\n\tsubcommand=$1\n\tif [[ -z $subcommand ]]; then\n\t\tsubcommand=\"__default\"\n\tfi\n\n\tif [[ -z ${(k)subcommands_opts[$subcommand]} ]]; then\n\t\t_warning \"There's no such command \\\"::1 subcommand::\\\".\" $subcommand\n\t\texitv=127 _failure \"Please try -h for help.\"\n\tfi\n\targv=(\"${(@)oldstar}\")\n\tunset oldstar\n\n\t### Parsing global + command-specific options\n\t# zsh magic: ${=string} will split to multiple arguments when spaces occur\n\tset -A cmd_opts ${main_opts} ${=subcommands_opts[$subcommand]}\n\t# if there is no option, we don't need parsing\n\tif [[ -n $cmd_opts ]]; then\n\t\tzparseopts -M -E -D -AOPTS ${cmd_opts}\n\t\tif [[ $? != 0 ]]; then\n\t\t\t_warning \"Some error occurred during option processing.\"\n\t\t\texitv=127 _failure \"See \\\"tomb help\\\" for more info.\"\n\t\tfi\n\tfi\n\t#build PARAM (array of arguments) and check if there are unrecognized options\n\tok=0\n\tPARAM=()\n\tfor arg in $*; do\n\t\tif [[ $arg == '--' || $arg == '-' ]]; then\n\t\t\tok=1\n\t\t\tcontinue #it shouldn't be appended to PARAM\n\t\telif [[ $arg[1] == '-' ]]; then\n\t\t\tif [[ $ok == 0 ]]; then\n\t\t\t\texitv=127 _failure \"Unrecognized option ::1 arg:: for subcommand ::2 subcommand::\" $arg $subcommand\n\t\t\tfi\n\t\tfi\n\t\tPARAM+=$arg\n\tdone\n\t# First parameter actually is the subcommand: delete it and shift\n\t[[ $subcommand != '__default' ]] && { PARAM[1]=(); shift }\n\n\t### End parsing command-specific options\n\n\t# Use colors unless told not to\n\t{ ! option_is_set --no-color } && { autoload -Uz colors && colors }\n\t# Some options are only available during insecure mode\n\t{ ! option_is_set --unsafe } && {\n\t\tfor opt in --tomb-pwd --tomb-old-pwd; do\n\t\t\t{ option_is_set $opt } && {\n\t\t\t\texitv=127 _failure \"You specified option ::1 option::, which is DANGEROUS and should only be used for testing\\nIf you really want so, add --unsafe\" $opt }\n\t\tdone\n\t}\n\t# read -t or --tmp flags to set a custom temporary directory\n\toption_is_set --tmp && TMPDIR=$(option_value --tmp)\n\n\toption_is_set --sudo && {\n\t    local _opt=`basename $(option_value --sudo)`\n            _message \"Privilege escalation tool configured: ::1 exec::\" $_opt\n\t}\n\n\t# When we run as root, we remember the original uid:gid to set\n\t# permissions for the calling user and drop privileges\n\t_whoami # Reset _UID, _GID, _TTY\n\n\t[[ -z $PARAM ]] && {\n\t\t_verbose \"Tomb command: ::1 subcommand::\" $subcommand\n\t} || {\n\t\t_verbose \"Tomb command: ::1 subcommand:: ::2 param::\" $subcommand $PARAM\n\t}\n\n\t[[ -z $_UID ]] || {\n\t\t_verbose \"Caller: uid[::1 uid::], gid[::2 gid::], tty[::3 tty::].\" \\\n\t\t\t\t $_UID $_GID $_TTY\n\t}\n\n\t_verbose \"Temporary directory: $TMPDIR\"\n\n\t# Process subcommand\n\tcase \"$subcommand\" in\n\n\t\t# USAGE\n\t\thelp)\n\t\t\tusage\n\t\t\t;;\n\n\t\t# DEPRECATION notice (leave here as 'create' is still present in old docs)\n\t\tcreate)\n\t\t\t_warning \"The create command is deprecated, please use dig, forge and lock instead.\"\n\t\t\t_warning \"For more information see Tomb's manual page (man tomb).\"\n\t\t\t_failure \"Operation aborted.\"\n\t\t\t;;\n\n\t\t# CREATE Step 1: dig -s NN file.tomb\n\t\tdig)\n\t\t\tdig_tomb $PARAM\n\t\t\t;;\n\n\t\t# CREATE Step 2: forge file.tomb.key\n\t\tforge)\n\t\t\tforge_key $PARAM\n\t\t\t;;\n\n\t\t# CREATE Step 3: lock -k file.tomb.key file.tomb\n\t\tlock)\n\t\t\tlock_tomb_with_key $PARAM\n\t\t\t;;\n\n\t\t# Open the tomb\n\t\tmount|open)\n\t\t\tmount_tomb $PARAM\n\t\t\t;;\n\n\t\t# List all processes using a tomb\n\t\tps)\n\t\t\tlist_processes $PARAM\n\t\t\t;;\n\n\t\t# Slam a tomb killing all processes running inside\n\t\tslam)\n\t\t\t[[ $LSOF -eq 1 ]] && {\n\t\t\t\tSLAM=1\n\t\t\t} || {\n\t\t\t\t_warning \"lsof not installed: cannot slam tombs.\"\n\t\t\t\t_warning \"Trying a regular close.\"}\n\t\t\t;&\n\n\t\t# Close the tomb\n\t\tumount|close)\n\t\t\tumount_tomb $PARAM[1]\n\t\t\t;;\n\n\t\t# Grow tomb's size\n\t\tresize)\n\t\t\t[[ $RESIZER == 0 ]] && {\n\t\t\t\t_failure \"Resize2fs not installed: cannot resize tombs.\" }\n\t\t\tresize_tomb $PARAM[1]\n\t\t\t;;\n\n\t\t## Contents manipulation\n\n\t\t# Index tomb contents\n\t\tindex)\n\t\t\tindex_tombs $PARAM[1]\n\t\t\t;;\n\n\t\t# List tombs\n\t\tlist)\n\t\t\tlist_tombs $PARAM[1]\n\t\t\t;;\n\n\t\t# Search tomb contents\n\t\tsearch)\n\t\t\tsearch_tombs $PARAM\n\t\t\t;;\n\n\t\t## Locking operations\n\n\t\t# Export key to QR Code\n\t\tengrave)\n\t\t\t[[ $QRENCODE == 0 ]] && {\n\t\t\t\t_failure \"QREncode not installed: cannot engrave keys on paper.\" }\n\t\t\tengrave_key $PARAM\n\t\t\t;;\n\n\t\t# Change password on existing key\n\t\tpasswd)\n\t\t\tchange_passwd $PARAM[1]\n\t\t\t;;\n\n\t\t# Change tomb key\n\t\tsetkey)\n\t\t\tchange_tomb_key $PARAM\n\t\t\t;;\n\n\t\t# STEGANOGRAPHY: hide key inside an image\n\t\tbury)\n\t\t\t[[ $STEGHIDE == 0 ]] && {\n\t\t\t\t_failure \"Steghide not installed: cannot bury keys into images.\" }\n\t\t\tbury_key $PARAM[1]\n\t\t\t;;\n\n\t\t# STEGANOGRAPHY: read key hidden in an image\n\t\texhume)\n\t\t\t[[ $STEGHIDE == 0 ]] && {\n\t\t\t\t_failure \"Steghide not installed: cannot exhume keys from images.\" }\n\t\t\texhume_key $PARAM[1]\n\t\t\t;;\n\n\t\t# STEGANOGRAPHY: transform key into text using cipher\n\t\tcloak)\n\t\t\t[[ $CLOAKIFY == 0 ]] && {\n\t\t\t\t_failure \"Cloakify not installed: cannot cipher keys into texts\" }\n\t\t\tcloakify_key $PARAM\n\t\t\t;;\n\n\t\t# STEGANOGRAPHY: read key from text using cipher\n\t\tuncloak)\n\t\t\t[[ $DECLOAKIFY == 0 ]] && {\n\t\t\t\t_failure \"Decloakify not installed: cannot decipher keys from texts\" }\n\t\t\tdecloakify_key $PARAM\n\t\t\t;;\n\n\n\t\t## Internal commands useful to developers\n\n\t\t# Make tomb functions available to the calling shell or script\n\t\t'source')\treturn 0 ;;\n\n\t\t# Ask user for a password interactively\n\t\taskpass)\task_password $PARAM[1] $PARAM[2] ;;\n\n\t\t# Default operation: presentation, or version information with -v\n\t\t__default)\n\t\t\t_print \"Tomb ::1 version:: - a strong and gentle undertaker for your secrets\" $VERSION\n\t\t\techo\n\t\t\t_print \" Copyright (C) 2007-2024 Dyne.org Foundation, License GNU GPL v3+\"\n\t\t\t_print \" This is free software: you are free to change and redistribute it\"\n\t\t\t_print \" For the latest sourcecode go to <http://dyne.org/software/tomb>\"\n\t\t\techo\n\t\t\toption_is_set -v && {\n\t\t\t\tlocal langwas=$LANG\n\t\t\t\tLANG=en\n\t\t\t\t_print \" This source code is distributed in the hope that it will be useful,\"\n\t\t\t\t_print \" but WITHOUT ANY WARRANTY; without even the implied warranty of\"\n\t\t\t\t_print \" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\"\n\t\t\t\tLANG=$langwas\n\t\t\t\t_print \" When in need please refer to <http://dyne.org/support>.\"\n\t\t\t\techo\n\t\t\t\t_print \"System utils:\"\n\t\t\t\techo\n\t\t\t\tcat <<EOF\n  `zsh --version`\n  `sudo -V | head -n1`\n  `cryptsetup --version`\n  `pinentry --version | head -n1`\n  `findmnt -V`\n  `gpg --version | head -n1` - key forging algorithms (GnuPG symmetric ciphers):\n  `list_gnupg_ciphers`\nEOF\n\t\t\t\techo\n\t\t\t\t_print \"Optional utils:\"\n\t\t\t\techo\n\t\t\t\t_list_optional_tools version\n\t\t\t\treturn 0\n\t\t\t}\n\t\t\tusage\n\t\t\t;;\n\n\t\t# Reject unknown command and suggest help\n\t\t*)\n\t\t\t_warning \"Command \\\"::1 subcommand::\\\" not recognized.\" $subcommand\n\t\t\t_message \"Try -h for help.\"\n\t\t\treturn 1\n\t\t\t;;\n\tesac\n\treturn $?\n}\n\n# }}}\n\n# {{{ Run\n\nmain \"$@\" || exit $?   # Prevent `source tomb source` from exiting\n\n# }}}\n"
        }
      ]
    }
  ]
}