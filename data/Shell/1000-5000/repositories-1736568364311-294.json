{
  "metadata": {
    "timestamp": 1736568364311,
    "page": 294,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "lukechilds/zsh-nvm",
      "stars": 2261,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0537109375,
          "content": "**/.urchin.log\n**/.urchin_stdout\n.nvm\nprevious_version\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.6708984375,
          "content": "language: generic\nos:\n  - linux\n  - osx\naddons:\n  apt:\n    packages:\n      - zsh\nbefore_install:\n  - zsh --version\n  - if [[ \"$TRAVIS_OS_NAME\" == \"osx\" ]]; then brew uninstall node; fi\n  - sudo rm -rf /usr/local/{lib/node{,/.npm,_modules},bin,share/man}/{npm*,node*,man1/node*}\n  - if [[ $(command -v nvm) == \"nvm\" ]]; then nvm deactivate && nvm unload && echo \"Deactivated Travis nvm\"; fi\ninstall:\n  - (mkdir /tmp/urchin && cd /tmp/urchin && curl -s \"$(curl -s https://registry.npmjs.com/urchin | grep -Eo '\"tarball\":\\s*\"[^\"]+\"' | tail -n 1 | awk -F\\\" '{ print $4 }')\" -O && tar -x -f urchin*)\n  - chmod +x /tmp/urchin/package/urchin\nscript:\n  - /tmp/urchin/package/urchin -s zsh tests\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.04296875,
          "content": "MIT License\n\nCopyright (c) 2016 Luke Childs\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.912109375,
          "content": "# zsh-nvm [![Build Status](https://travis-ci.org/lukechilds/zsh-nvm.svg?branch=master)](https://travis-ci.org/lukechilds/zsh-nvm)\n\n> Zsh plugin for installing, updating and loading `nvm`\n\n[![GitHub Donate](https://badgen.net/badge/GitHub/Sponsor/D959A7?icon=github)](https://github.com/sponsors/lukechilds)\n[![Bitcoin Donate](https://badgen.net/badge/Bitcoin/Donate/F19537?icon=bitcoin)](https://lu.ke/tip/bitcoin)\n[![Lightning Donate](https://badgen.net/badge/Lightning/Donate/F6BC41?icon=bitcoin-lightning)](https://lu.ke/tip/lightning)\n\n[`nvm`](https://github.com/nvm-sh/nvm) is an awesome tool but it can be kind of a pain to install and keep up to date. This zsh plugin allows you to quickly setup `nvm` once, save it in your dotfiles, then never worry about it again.\n\nThe plugin will install the latest stable release of `nvm` if you don't already have it, and then automatically `source` it for you. You can upgrade `nvm` to the latest version whenever you want without losing your installed `node` versions by running `nvm upgrade`.\n\nAlthough this is written as a zsh plugin, it also works with bash if you follow the [manual installation instructions](#manually).\n\n## Usage\n\nOnce the plugin's installed `nvm` will be available. You'll probably want to load this as one of your first plugins so `node`/`npm` is available for any other plugins that may require them.\n\n`zsh-nvm` also wraps `nvm` in some additional functionality.\n\n### Upgrade\n\nIf you want to upgrade to the latest release of `nvm`:\n\n```shell\n% nvm upgrade\nInstalled version is v0.31.0\nChecking latest version of nvm...\nUpdating to v0.31.3...\nPrevious HEAD position was 2176894... v0.31.0\nHEAD is now at 56417f8... v0.31.3\n```\n\n### Revert\n\nIf an upgrade breaks something don't worry, reverting back to the previously installed version is simple:\n\n```shell\n% nvm revert\nInstalled version is v0.31.3\nReverting to v0.31.0...\nPrevious HEAD position was 56417f8... v0.31.3\nHEAD is now at 2176894... v0.31.0\n```\n\n### Install\n\nYou can install the latest Node.js nightlies or release candidates with `nvm install nightly|rc`. Aliases will automatically be created so you can easily `nvm use nightly|rc` in the future:\n\n```\n% nvm install rc\nDownloading and installing node v8.0.0-rc.1...\nDownloading https://nodejs.org/download/rc//v8.0.0-rc.1/node-v8.0.0-rc.1-darwin-x64.tar.xz...\n######################################################################## 100.0%\nComputing checksum with shasum -a 256\nChecksums matched!\nNow using node v8.0.0-rc.1 (npm v5.0.0-beta.56)\nrc -> v8.0.0-rc.1\nClearing mirror cache...\nDone!\n```\n\n> **Note:** This is a bit of a hack and leaving rc|nightly versions installed may break nvm when it eventually supports them itself. It's recommended that you don't leave the these versions of Node.js installed. Install them, test/play with them and then uninstall them when you're done.\n\n## Options\n\n### Custom Directory\n\nYou can specify a custom directory to use with `nvm` by exporting the `NVM_DIR` environment variable. It must be set before `zsh-nvm` is loaded.\n\nFor example, if you are using antigen, you would put the following in your `.zshrc`:\n\n```shell\nexport NVM_DIR=\"$HOME/.custom-nvm-dir\"\nantigen bundle lukechilds/zsh-nvm\n```\n\nNote: If `nvm` doesn't exist in this directory it'll be automatically installed when you start a session.\n\n### Nvm Completion\n\n`nvm` comes with a default bash_completion profile. If you want to enable it, you can do it by exporting  the `NVM_COMPLETION` environment variable and setting it to `true`. It must be set before `zsh-nvm` is loaded.\n\nFor example, if you are using antigen, you would put the following in your `.zshrc`:\n\n```bash\n# Export nvm completion settings for zsh-nvm plugin\nexport NVM_COMPLETION=true\nantigen bundle lukechilds/zsh-nvm\n```\n\n### Lazy Loading\n\nIf you find `nvm` adds too much lag to your shell startup you can enable lazy loading by exporting the `NVM_LAZY_LOAD` environment variable and setting it to `true`. It must be set before `zsh-nvm` is loaded.\n\nLazy loading is around 70x faster (874ms down to 12ms for me), however the first time you run `nvm`, `npm`, `node` or a global module you'll get a slight delay while `nvm` loads first. You'll only get this delay once per session.\n\nFor example, if you are using antigen, you would put the following in your `.zshrc`:\n\n```shell\nexport NVM_LAZY_LOAD=true\nantigen bundle lukechilds/zsh-nvm\n```\n\nPerformance comparison:\n\n```shell\n% time (source \"$NVM_DIR/nvm.sh\")\n( source \"$NVM_DIR/nvm.sh\"; )  0.58s user 0.37s system 109% cpu 0.874 total\n\n% time (_zsh_nvm_lazy_load)\n( _zsh_nvm_lazy_load; )  0.01s user 0.01s system 168% cpu 0.012 total\n```\n\n#### Extra commands to trigger lazy loading\nBy default lazy loading nvm is triggered by running the `nvm`, `node`, `npm` commands or any installed npm global binaries.\nIf you want to trigger the lazy loading via extra arbitrary commands you can define `NVM_LAZY_LOAD_EXTRA_COMMANDS` and set it to an array of commands as strings.\nThis can be usefull if programs are not in the above list of binaries but do depend on the availability of `node`, e.g. a vim plugin.\n\n```shell\nexport NVM_LAZY_LOAD_EXTRA_COMMANDS=('vim')\nvim --version\n#node is now loaded\n```\n\n### Don't autoload node\n\nBy default when `nvm` is loaded it'll automatically run `nvm use default` and load your default `node` version along with `npm` and any global modules. You can disable this behaviour by exporting the `NVM_NO_USE` environment variable and setting it to `true`. It must be set before `zsh-nvm` is loaded.\n\nIf you enable this option you will then need to manually run `nvm use <version>` before you can use `node`.\n\nFor example, if you are using antigen, you would put the following in your `.zshrc`:\n\n```shell\nexport NVM_NO_USE=true\nantigen bundle lukechilds/zsh-nvm\n```\n\n### Auto use\n\nIf you have lots of projects with an `.nvmrc` file you may find the auto use option helpful. If it's enabled, when you `cd` into a directory with an `.nvmrc` file, `zsh-nvm` will automatically load or install the required node version in `.nvmrc`. You can enable it by exporting the `NVM_AUTO_USE` environment variable and setting it to `true`. It must be set before `zsh-nvm` is loaded.\n\nIf you enable this option and don't have `nvm` loaded in the current session (`NVM_LAZY_LOAD` or `NVM_NO_USE`) it won't work until you've loaded `nvm`.\n\nFor example, if you are using antigen, you would put the following in your `.zshrc`:\n\n```shell\nexport NVM_AUTO_USE=true\nantigen bundle lukechilds/zsh-nvm\n```\n\n## Installation\n\n### Using [Antigen](https://github.com/zsh-users/antigen)\n\nBundle `zsh-nvm` in your `.zshrc`\n\n```shell\nantigen bundle lukechilds/zsh-nvm\n```\n\n### Using [zplug](https://github.com/b4b4r07/zplug)\nLoad `zsh-nvm` as a plugin in your `.zshrc`\n\n```shell\nzplug \"lukechilds/zsh-nvm\"\n\n```\n### Using [zgen](https://github.com/tarjoilija/zgen)\n\nInclude the load command in your `.zshrc`\n\n```shell\nzgen load lukechilds/zsh-nvm\n```\n\n### As an [Oh My ZSH!](https://github.com/robbyrussell/oh-my-zsh) custom plugin\n\nClone `zsh-nvm` into your custom plugins repo\n\n```shell\ngit clone https://github.com/lukechilds/zsh-nvm ~/.oh-my-zsh/custom/plugins/zsh-nvm\n```\nThen load as a plugin in your `.zshrc`\n\n```shell\nplugins+=(zsh-nvm)\n```\n\nKeep in mind that plugins need to be added before `oh-my-zsh.sh` is sourced.\n\n### Manually\nClone this repository somewhere (`~/.zsh-nvm` for example)\n\n```shell\ngit clone https://github.com/lukechilds/zsh-nvm.git ~/.zsh-nvm\n```\nThen source it in your `.zshrc` (or `.bashrc`)\n\n```shell\nsource ~/.zsh-nvm/zsh-nvm.plugin.zsh\n```\n\n## Tests\n\nTo run the tests you'll need to install [Urchin](https://github.com/tlevine/urchin#install). You'll also need to run the tests in an environment that doesn't already have `node` or `nvm` loaded.\n\nYou can remove `nvm` from the existing session with:\n\n```shell\nnvm deactivate && nvm unload\n```\n\nRun the tests with:\n\n```shell\nurchin -s zsh tests\n```\n\n\n\n## Related\n\n- [`zsh-better-npm-completion`](https://github.com/lukechilds/zsh-better-npm-completion) - Better completion for `npm`\n\n## License\n\nMIT © Luke Childs\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "zsh-nvm.plugin.zsh",
          "type": "blob",
          "size": 5.9013671875,
          "content": "ZSH_NVM_DIR=${0:a:h}\n\n[[ -z \"$NVM_DIR\" ]] && export NVM_DIR=\"$HOME/.nvm\"\n\n_zsh_nvm_rename_function() {\n  test -n \"$(declare -f $1)\" || return\n  eval \"${_/$1/$2}\"\n  unset -f $1\n}\n\n_zsh_nvm_has() {\n  type \"$1\" > /dev/null 2>&1\n}\n\n_zsh_nvm_latest_release_tag() {\n  echo $(builtin cd \"$NVM_DIR\" && git fetch --quiet --tags origin && git describe --abbrev=0 --tags --match \"v[0-9]*\" $(git rev-list --tags --max-count=1))\n}\n\n_zsh_nvm_install() {\n  echo \"Installing nvm...\"\n  git clone https://github.com/nvm-sh/nvm.git \"$NVM_DIR\"\n  $(builtin cd \"$NVM_DIR\" && git checkout --quiet \"$(_zsh_nvm_latest_release_tag)\")\n}\n\n_zsh_nvm_global_binaries() {\n\n  # Look for global binaries\n  local global_binary_paths=\"$(echo \"$NVM_DIR\"/v0*/bin/*(N) \"$NVM_DIR\"/versions/*/*/bin/*(N))\"\n\n  # If we have some, format them\n  if [[ -n \"$global_binary_paths\" ]]; then\n    echo \"$NVM_DIR\"/v0*/bin/*(N) \"$NVM_DIR\"/versions/*/*/bin/*(N) |\n      xargs -n 1 basename |\n      sort |\n      uniq\n  fi\n}\n\n_zsh_nvm_load() {\n\n  # Source nvm (check if `nvm use` should be ran after load)\n  if [[ \"$NVM_NO_USE\" == true ]]; then\n    source \"$NVM_DIR/nvm.sh\" --no-use\n  else\n    source \"$NVM_DIR/nvm.sh\"\n  fi\n\n  # Rename main nvm function\n  _zsh_nvm_rename_function nvm _zsh_nvm_nvm\n\n  # Wrap nvm in our own function\n  nvm() {\n    case $1 in\n      'upgrade')\n        _zsh_nvm_upgrade\n        ;;\n      'revert')\n        _zsh_nvm_revert\n        ;;\n      'use')\n        _zsh_nvm_nvm \"$@\"\n        export NVM_AUTO_USE_ACTIVE=false\n        ;;\n      'install' | 'i')\n        _zsh_nvm_install_wrapper \"$@\"\n        ;;\n      *)\n        _zsh_nvm_nvm \"$@\"\n        ;;\n    esac\n  }\n}\n\n_zsh_nvm_completion() {\n\n  # Add provided nvm completion\n  [[ -r $NVM_DIR/bash_completion ]] && source $NVM_DIR/bash_completion\n}\n\n_zsh_nvm_lazy_load() {\n\n  # Get all global node module binaries including node\n  # (only if NVM_NO_USE is off)\n  local global_binaries\n  if [[ \"$NVM_NO_USE\" == true ]]; then\n    global_binaries=()\n  else\n    global_binaries=($(_zsh_nvm_global_binaries))\n  fi\n\n  # Add yarn lazy loader if it's been installed by something other than npm\n  _zsh_nvm_has yarn && global_binaries+=('yarn')\n\n  # Add nvm\n  global_binaries+=('nvm')\n  global_binaries+=($NVM_LAZY_LOAD_EXTRA_COMMANDS)\n\n  # Remove any binaries that conflict with current aliases\n  local cmds\n  cmds=()\n  local bin\n  for bin in $global_binaries; do\n    [[ \"$(which $bin 2> /dev/null)\" = \"$bin: aliased to \"* ]] || cmds+=($bin)\n  done\n\n  # Create function for each command\n  local cmd\n  for cmd in $cmds; do\n\n    # When called, unset all lazy loaders, load nvm then run current command\n    eval \"$cmd(){\n      unset -f $cmds > /dev/null 2>&1\n      _zsh_nvm_load\n      $cmd \\\"\\$@\\\"\n    }\"\n  done\n}\n\nnvm_update() {\n  echo 'Deprecated, please use `nvm upgrade`'\n}\n_zsh_nvm_upgrade() {\n\n  # Use default upgrade if it's built in\n  if [[ -n \"$(_zsh_nvm_nvm help | grep 'nvm upgrade')\" ]]; then\n    _zsh_nvm_nvm upgrade\n    return\n  fi\n\n  # Otherwise use our own\n  local installed_version=$(builtin cd \"$NVM_DIR\" && git describe --tags)\n  echo \"Installed version is $installed_version\"\n  echo \"Checking latest version of nvm...\"\n  local latest_version=$(_zsh_nvm_latest_release_tag)\n  if [[ \"$installed_version\" = \"$latest_version\" ]]; then\n    echo \"You're already up to date\"\n  else\n    echo \"Updating to $latest_version...\"\n    echo \"$installed_version\" > \"$ZSH_NVM_DIR/previous_version\"\n    $(builtin cd \"$NVM_DIR\" && git fetch --quiet && git checkout \"$latest_version\")\n    _zsh_nvm_load\n  fi\n}\n\n_zsh_nvm_previous_version() {\n  cat \"$ZSH_NVM_DIR/previous_version\" 2>/dev/null\n}\n\n_zsh_nvm_revert() {\n  local previous_version=\"$(_zsh_nvm_previous_version)\"\n  if [[ -n \"$previous_version\" ]]; then\n    local installed_version=$(builtin cd \"$NVM_DIR\" && git describe --tags)\n    if [[ \"$installed_version\" = \"$previous_version\" ]]; then\n      echo \"Already reverted to $installed_version\"\n      return\n    fi\n    echo \"Installed version is $installed_version\"\n    echo \"Reverting to $previous_version...\"\n    $(builtin cd \"$NVM_DIR\" && git checkout \"$previous_version\")\n    _zsh_nvm_load\n  else\n    echo \"No previous version found\"\n  fi\n}\n\nautoload -U add-zsh-hook\n_zsh_nvm_auto_use() {\n  _zsh_nvm_has nvm_find_nvmrc || return\n\n  local node_version=\"$(nvm version)\"\n  local nvmrc_path=\"$(nvm_find_nvmrc)\"\n\n  if [[ -n \"$nvmrc_path\" ]]; then\n    local nvmrc_node_version=\"$(nvm version $(cat \"$nvmrc_path\"))\"\n\n    if [[ \"$nvmrc_node_version\" = \"N/A\" ]]; then\n      nvm install && export NVM_AUTO_USE_ACTIVE=true\n    elif [[ \"$nvmrc_node_version\" != \"$node_version\" ]]; then\n      nvm use && export NVM_AUTO_USE_ACTIVE=true\n    fi\n  elif [[ \"$node_version\" != \"$(nvm version default)\" ]] && [[ \"$NVM_AUTO_USE_ACTIVE\" = true ]]; then\n    echo \"Reverting to nvm default version\"\n    nvm use default\n  fi\n}\n\n_zsh_nvm_install_wrapper() {\n  case $2 in\n    'rc')\n      NVM_NODEJS_ORG_MIRROR=https://nodejs.org/download/rc/ nvm install node && nvm alias rc \"$(node --version)\"\n      echo \"Clearing mirror cache...\"\n      nvm ls-remote > /dev/null 2>&1\n      echo \"Done!\"\n      ;;\n    'nightly')\n      NVM_NODEJS_ORG_MIRROR=https://nodejs.org/download/nightly/ nvm install node && nvm alias nightly \"$(node --version)\"\n      echo \"Clearing mirror cache...\"\n      nvm ls-remote > /dev/null 2>&1\n      echo \"Done!\"\n      ;;\n    *)\n      _zsh_nvm_nvm \"$@\"\n      ;;\n  esac\n}\n\n# Don't init anything if this is true (debug/testing only)\nif [[ \"$ZSH_NVM_NO_LOAD\" != true ]]; then\n\n  # Install nvm if it isn't already installed\n  [[ ! -f \"$NVM_DIR/nvm.sh\" ]] && _zsh_nvm_install\n\n  # If nvm is installed\n  if [[ -f \"$NVM_DIR/nvm.sh\" ]]; then\n\n    # Load it\n    [[ \"$NVM_LAZY_LOAD\" == true ]] && _zsh_nvm_lazy_load || _zsh_nvm_load\n\n    # Enable completion\n    [[ \"$NVM_COMPLETION\" == true ]] && _zsh_nvm_completion\n    \n    # Auto use nvm on chpwd\n    [[ \"$NVM_AUTO_USE\" == true ]] && add-zsh-hook chpwd _zsh_nvm_auto_use && _zsh_nvm_auto_use\n  fi\n\nfi\n\n# Make sure we always return good exit code\n# We can't `return 0` because that breaks antigen\ntrue\n"
        }
      ]
    }
  ]
}