{
  "metadata": {
    "timestamp": 1736568180902,
    "page": 6,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "chaifeng/ufw-docker",
      "stars": 4753,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0537109375,
          "content": "*\n!LICENSE\n!README.md\n!ufw-docker\n!docker-entrypoint.sh"
        },
        {
          "name": ".drone.yml",
          "type": "blob",
          "size": 0.234375,
          "content": "---\nkind: pipeline\ntype: docker\nname: default\n\nsteps:\n- name: Fetch Submodules\n  image: alpine/git\n  commands:\n  - git submodule update --init --recursive --depth=1 --remote\n\n- name: Testing\n  image: ubuntu:bionic\n  commands:\n  - ./test.sh\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0087890625,
          "content": ".vagrant\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.0830078125,
          "content": "[submodule \"test/bach\"]\n\tpath = test/bach\n\turl = https://github.com/bach-sh/bach.git\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.763671875,
          "content": "language: bash\nos: linux\ndist: trusty\nscript:\n- bash test.sh\nnotifications:\n  slack:\n    secure: pbbwN/dxrXXvQnJM5YhLt3A7t7ptvm5G3yQOimqBJVlLY7dJdPcUy6agntyLQ5cf+CHKVgMreu5m7qdTlSUeypNSi5+gbfNQD70l5TPG/ClqN/GnaNlrv4Y9ugL7kUWBqtMZSCwHHCy3Omv+oYjBixonJBfDMr0mn6ShkHRpgmjjUtByHhGy5gyNlKjoxB+04AnLkuIiz9mRUIkgGeeIcIkS8pE4E69Mh/K78h0oCZbQF1H4Eu22nOCdQhWH5StT0G+/pDqHGP4J8mDo3NVNMyySFRY0lSwUj2OUnX+VVK9RWUicaozCgob4Oi3Pf+5bNcxTdo2ntI/e0fEcpIqiSHOy/iLBrQMGmZY7aoVNG7IWQwM2Zt6wXORcYl6l2XMOVuFx+h9PQd+nol9Eh9JxGsQjrfdQ8rNK8DkdNat0axpex3w3PWpbFRtQJ3A21ixqINsKCZC0y5vO0LF0ttsJEf9QEJrYRlA8VOw79NnCE3PimACnb0UU2cy91HmLcR2OvXqNiS0TZWS0kEajpW9BuqszNPnMrpLi9t7kHTSFjGx1Nb6XXUBG2lmoiXVNqutq+0zCEa8otObjZ0igQ6Kb2joJfbwSSWXNzDtp+jRmxQacqmXwvByz2BI37xnCs4KP0VYM37r0BmVxpBQlyFreoB7PRyezYbQSkaq2bahMLjA=\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.07421875,
          "content": "FROM ubuntu:24.04\n\nARG docker_version=\"27.3.1\"\n\nENV DEBIAN_FRONTEND=noninteractive\nRUN apt-get update \\\n    && apt-get install -y ca-certificates curl gnupg lsb-release \\\n    && mkdir -p /etc/apt/keyrings \\\n    && curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg \\\n    && echo \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg]\" \\\n            \"https://download.docker.com/linux/ubuntu\" \"$(lsb_release -cs) stable\" \\\n            | tee /etc/apt/sources.list.d/docker.list > /dev/null \\\n    && apt-get update \\\n    && apt-get install -y --no-install-recommends locales ufw \\\n    && apt-get install -y --no-install-recommends \"docker-ce=$(apt-cache madison docker-ce | grep -m1 -F \"${docker_version}\" | cut -d'|' -f2 | tr -d '[[:blank:]]')\" \\\n    && locale-gen en_US.UTF-8 \\\n    && apt-get clean autoclean \\\n    && apt-get autoremove --yes \\\n    && rm -rf /var/lib/{apt,dpkg,cache,log}/\n\nADD ufw-docker docker-entrypoint.sh /usr/bin/\n\nENTRYPOINT [\"/usr/bin/docker-entrypoint.sh\"]\n\nCMD [\"start\"]\n\nADD LICENSE README.md /\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 34.3232421875,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<http://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 30.0009765625,
          "content": "To Fix The Docker and UFW Security Flaw Without Disabling Iptables\n==================\n\n[![Build Status](https://travis-ci.org/chaifeng/ufw-docker.svg)](https://travis-ci.org/chaifeng/ufw-docker)\n[![chaifeng/ufw-docker-agent](https://img.shields.io/docker/pulls/chaifeng/ufw-docker-agent)](https://hub.docker.com/r/chaifeng/ufw-docker-agent)\n\n- [English](#tldr)\n- [中文](#太长不想读)\n\n## TL;DR\n\nPlease take a look at [Solving UFW and Docker issues](#solving-ufw-and-docker-issues).\n\n## Problem\n\nUFW is a popular iptables front end on Ubuntu that makes it easy to manage firewall rules. But when Docker is installed, Docker bypass the UFW rules and the published ports can be accessed from outside.\n\nThe issue is:\n\n1. UFW is enabled on a server that provides external services, and all incoming connections that are not allowed are blocked by default.\n2. Run a Docker container on the server and use the `-p` option to publish ports for that container on all IP addresses. \n   For example: `docker run -d --name httpd -p 0.0.0.0:8080:80 httpd:alpine`, this command will run an httpd service and publish port 80 of the container to port 8080 of the server.\n3. UFW will not block all external requests to visit port 8080. Even the command `ufw deny 8080` will not prevent external access to this port.\n4. This problem is actually quite serious, which means that a port that was originally intended to provide services internally is exposed to the public network.\n\nSearching for \"ufw docker\" on the web can find a lot of discussion:\n\n- https://github.com/moby/moby/issues/4737\n- https://forums.docker.com/t/running-multiple-docker-containers-with-ufw-and-iptables-false/8953\n- https://www.techrepublic.com/article/how-to-fix-the-docker-and-ufw-security-flaw/\n- https://blog.viktorpetersson.com/2014/11/03/the-dangers-of-ufw-docker.html\n- https://askubuntu.com/questions/652556/uncomplicated-firewall-ufw-is-not-blocking-anything-when-using-docker\n- https://chjdev.com/2016/06/08/docker-ufw/\n- https://askubuntu.com/questions/652556/uncomplicated-firewall-ufw-is-not-blocking-anything-when-using-docker\n- https://my.oschina.net/abcfy2/blog/539485\n- https://www.v2ex.com/amp/t/466666\n- https://blog.36web.rocks/2016/07/08/docker-behind-ufw.html\n- ...\n\nAlmost all of these solutions are similar. It requires to disable docker's iptables function first, but this also means that we give up docker's network management function. This causes containers will not be able to access the external network. It is also mentioned in some articles that you can manually add some rules in the UFW configuration file, such as `-A POSTROUTING ! -o docker0 -s 172.17.0.0/16 -j MASQUERADE`. But this only allows containers that belong to network `172.17.0.0/16` can access outside. If we create a new docker network, we must manually add such similar iptables rules for the new network.\n\n## Expected goal\n\nThe solutions that we can find on internet are very similar and not elegant, I hope a new solution can:\n\n- Don't need to disable Docker's iptables and let Docker to manage it's network. \n  We don't need to manually maintain iptables rules for any new Docker networks, and avoid potential side effects after disabling iptables in Docker.\n- The public network cannot access ports that published by Docker. Even if the port is published on all IP addresses using an option like `-p 8080:80`. Containers and internal networks can visit each other normally.\n  Although it is possible to have Docker publish a container's port to the server's private IP address, the port will not be accessed on the public network. But, this server may have multiple private IP addresses, and these private IP addresses may also change.\n- In a very convenient way to allow/deny public networks to access container ports without additional software and extra configurations. Just like using command `ufw allow 8080` to allow external access port 8080, then using command `ufw delete allow 8080` to deny public networks visit port 8080.\n\n## How to do?\n\n### Revoke the original modification\n\nIf you have modified your server according to the current solution that we find on the internet, please rollback these changes first, including:\n\n- Enable Docker's iptables feature.\n  Remove all changes like `--iptables=false` , including configuration file `/etc/docker/daemon.json`.\n- UFW's default FORWARD rule changes back to the default DROP instead of ACCEPT.\n- Remove the rules related to the Docker network in the UFW configuration file `/etc/ufw/after.rules`.\n- If you have modified Docker configuration files, restart Docker first. We will modify the UFW configuration later and we can restart it then.\n\n### Solving UFW and Docker issues\n\nThis solution needs to modify only one UFW configuration file, all Docker configurations and options remain the default.\n\nModify the UFW configuration file `/etc/ufw/after.rules` and add the following rules at the end of the file:\n\n    # BEGIN UFW AND DOCKER\n    *filter\n    :ufw-user-forward - [0:0]\n    :ufw-docker-logging-deny - [0:0]\n    :DOCKER-USER - [0:0]\n    -A DOCKER-USER -j ufw-user-forward\n\n    -A DOCKER-USER -j RETURN -s 10.0.0.0/8\n    -A DOCKER-USER -j RETURN -s 172.16.0.0/12\n    -A DOCKER-USER -j RETURN -s 192.168.0.0/16\n\n    -A DOCKER-USER -p udp -m udp --sport 53 --dport 1024:65535 -j RETURN\n\n    -A DOCKER-USER -j ufw-docker-logging-deny -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -d 192.168.0.0/16\n    -A DOCKER-USER -j ufw-docker-logging-deny -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -d 10.0.0.0/8\n    -A DOCKER-USER -j ufw-docker-logging-deny -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -d 172.16.0.0/12\n    -A DOCKER-USER -j ufw-docker-logging-deny -p udp -m udp --dport 0:32767 -d 192.168.0.0/16\n    -A DOCKER-USER -j ufw-docker-logging-deny -p udp -m udp --dport 0:32767 -d 10.0.0.0/8\n    -A DOCKER-USER -j ufw-docker-logging-deny -p udp -m udp --dport 0:32767 -d 172.16.0.0/12\n\n    -A DOCKER-USER -j RETURN\n\n    -A ufw-docker-logging-deny -m limit --limit 3/min --limit-burst 10 -j LOG --log-prefix \"[UFW DOCKER BLOCK] \"\n    -A ufw-docker-logging-deny -j DROP\n\n    COMMIT\n    # END UFW AND DOCKER\n\nUsing command `sudo systemctl restart ufw` or `sudo ufw reload` to restart UFW after changing the file. Now the public network can't access any published docker ports, the container and the private network can visit each other normally, and the containers can also access the external network from inside. **There may be some unknown reasons cause the UFW rules will not take effect after restart UFW, please reboot servers.**\n\nIf you want to allow public networks to access the services provided by the Docker container, for example, the service port of a container is `80`. Run the following command to allow the public networks to access this service:\n\n    ufw route allow proto tcp from any to any port 80\n\nThis allows the public network to access all published ports whose container port is `80`.\n\nNote: If we publish a port by using option `-p 8080:80`, we should use the container port `80`, not the host port `8080`.\n\nIf there are multiple containers with a service port of `80`, but we only want the external network to access a certain container. For example, if the private address of the container is `172.17.0.2`, use the following command:\n\n    ufw route allow proto tcp from any to 172.17.0.2 port 80\n\nIf the network protocol of a service is UDP, for example a DNS service, you can use the following command to allow the external network to access all published DNS services:\n\n    ufw route allow proto udp from any to any port 53\n\nSimilarly, if only for a specific container, such as IP address `172.17.0.2`:\n\n    ufw route allow proto udp from any to 172.17.0.2 port 53\n\n## How it works?\n\nThe following rules allow the private networks to be able to visit each other. Normally, private networks are more trusted than public networks.\n\n    -A DOCKER-USER -j RETURN -s 10.0.0.0/8\n    -A DOCKER-USER -j RETURN -s 172.16.0.0/12\n    -A DOCKER-USER -j RETURN -s 192.168.0.0/16\n\nThe following rules allow UFW to manage whether the public networks are allowed to visit the services provided by the Docker container. So that we can manage all firewall rules in one place.\n\n    -A DOCKER-USER -j ufw-user-forward\n\nFor example, we want to block all outgoing connections from inside a container whose IP address is 172.17.0.9 which means to block this container to access internet or external networks. Using the following command:\n\n    ufw route deny from 172.17.0.9 to any\n\nThe following rules block connection requests initiated by all public networks, but allow internal networks to access external networks. For TCP protocol, it prevents from actively establishing a TCP connection from public networks. For UDP protocol, all accesses to ports which is less then 32767 are blocked. Why is this port? Since the UDP protocol is stateless, it is not possible to block the handshake signal that initiates the connection request as TCP does. For GNU/Linux we can find the local port range in the file `/proc/sys/net/ipv4/ip_local_port_range`. The default range is `32768 60999`. When accessing a UDP protocol service from a running container, the local port will be randomly selected one from the port range, and the server will return the data to this random port. Therefore, we can assume that the listening port of the UDP protocol inside all containers are less then `32768`. This is the reason that we don't want public networks to access the UDP ports that less then `32768`.\n\n    -A DOCKER-USER -j DROP -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -d 192.168.0.0/16\n    -A DOCKER-USER -j DROP -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -d 10.0.0.0/8\n    -A DOCKER-USER -j DROP -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -d 172.16.0.0/12\n    -A DOCKER-USER -j DROP -p udp -m udp --dport 0:32767 -d 192.168.0.0/16\n    -A DOCKER-USER -j DROP -p udp -m udp --dport 0:32767 -d 10.0.0.0/8\n    -A DOCKER-USER -j DROP -p udp -m udp --dport 0:32767 -d 172.16.0.0/12\n\n    -A DOCKER-USER -j RETURN\n\nIf a docker container doesn't follow the OS's settings when receiving data, that is to say, the minimal port number less than `32768`. For example, we have a Dnsmasq container. The minimal port number that Dnsmasq uses for receiving data is `1024`. We can use the following command to allow a bigger port range used for receiving DNS packages.\n\n    ufw route allow proto udp from any port 53 to any port 1024:65535\n\nBecause DNS is a very common service, so there is already a firewall rule to allow a bigger port range to receive DNS packages.\n\n## The reason for choosing `ufw-user-forward`, not `ufw-user-input`\n\n### using `ufw-user-input`\n\nPro:\n\nEasy to use and understand, supports older versions of Ubuntu.\n\nFor example, to allow the public to visit a published port whose container port is `8080`, use the command:\n\n    ufw allow 8080\n\nCon:\n\nIt not only exposes ports of containers but also exposes ports of the host.\n\nFor example, if a service is running on the host, and the port is `8080`. The command `ufw allow 8080` allows the public network to visit the service and all published ports whose containers' port is `8080`. But we just want to expose the service running on the host, or just the service running inside containers, not the both.\n\nTo avoid this problem, we may need to use a command similar to the following for all containers:\n\n    ufw allow proto tcp from any to 172.16.0.3 port 8080\n\n### using `ufw-user-forward`\n\nPro:\n\nCannot expose services running on hosts and containers at the same time by the same command.\n\nFor example, if we want to publish the port `8080` of containers, use the following command:\n\n    ufw route allow 8080\n\nThe public network can access all published ports whose container ports are `8080`.\n\nBut the port `8080` of the host is still not be accessed by the public network. If we want to do so, execute the following command to allow the public access the port on the host separately:\n\n    ufw allow 8080\n\n\nCon:\n\nDoesn't support older versions of Ubuntu, and the command is a bit more complicated. But you can use my script.\n\n\n### Conclusion\n\nIf we are using an older version of Ubuntu, we can use `ufw-user-input` chain. But be careful to avoid exposing services that should not be exposed\n\nIf we are using a newer version of Ubuntu which is support `ufw route` sub-command, we'd better use `ufw-user-forward` chain, and use `ufw route` command to manage firewall rules for containers.\n\n## `ufw-docker` util\n\nThis script also supports Docker Swarm mode.\n\n### Install\n\nDownload `ufw-docker` script\n\n    sudo wget -O /usr/local/bin/ufw-docker \\\n      https://github.com/chaifeng/ufw-docker/raw/master/ufw-docker\n    sudo chmod +x /usr/local/bin/ufw-docker\n\nThen using the following command to modify the `after.rules` file of `ufw`\n\n    ufw-docker install\n\nThis command does the following things:\n- Back up the file `/etc/ufw/after.rules`\n- Append the rules of UFW and Docker at the end of the file\n\n#### Install for Docker Swarm mode\n\nWe can only use this script on manager nodes to manage firewall rules when using in Swarm mode.\n\n- Modifying all `after.rules` files on all nodes, including managers and workers\n- Deploying this script on manager nodes\n\nRunning in Docker Swarm mode, this script will add a global service `ufw-docker-agent`. The image [chaifeng/ufw-docker-agent](https://hub.docker.com/r/chaifeng/ufw-docker-agent/) is also automatically built from this project.\n\n### Usage\n\nShow help\n\n    ufw-docker help\n\nCheck the installation of firewall rules in UFW configurations\n\n    ufw-docker check\n\nUpdate UFW configurations, add the necessary firewall rules\n\n    ufw-docker install\n\nShow the current firewall allowed forward rules\n\n    ufw-docker status\n\nList all firewall rules related to container `httpd`\n\n    ufw-docker list httpd\n\nExpose the port `80` of the container `httpd`\n\n    ufw-docker allow httpd 80\n\nExpose the `443` port of the container `httpd` and the protocol is `tcp`\n\n    ufw-docker allow httpd 443/tcp\n\nExpose the `443` port of the container `httpd` and the protocol is `tcp` and the network is `foobar-external-network` when the container `httpd` is attached to multiple networks\n\n    ufw-docker allow httpd 443/tcp foobar-external-network\n\nExpose all published ports of the container `httpd`\n\n    ufw-docker allow httpd\n\nRemove all rules related to the container `httpd`\n\n    ufw-docker delete allow httpd\n\nRemove the rule which port is `443` and protocol is `tcp` for the container `httpd`\n\n    ufw-docker delete allow httpd 443/tcp\n\nExpose the port `80` of the service `web`\n\n    docker service create --name web --publish 8080:80 httpd:alpine\n\n    ufw-docker service allow web 80\n    # or\n    ufw-docker service allow web 80/tcp\n\nRemove rules from all nodes related to the service `web`\n\n    ufw-docker service delete allow web\n\n### Try it out\n\nWe use [Vagrant](https://www.vagrantup.com/) to set up a local testing environment. \n\nRun the following command to create 1 master node and 2 worker nodes\n\n    vagrant up\n\nLog into the master node\n\n    vagrant ssh master\n\nAfter logging in, create a `web` service\n\n    docker service create --name web --publish 8080:80 httpd:alpine\n\nWe shouldn't visit this `web` service from our host\n\n    curl -v http://192.168.56.131:8080\n\nOn the master node, run the command to allow the public access port `80` of the `web` service.\n\n    sudo ufw-docker service allow web 80\n\nWe can access the `web` service from our host now\n\n    curl \"http://192.168.56.13{0,1,2}:8080\"\n\n## Discussions\n\n- [What is the best practice of docker + ufw under Ubuntu - Stack Overflow](https://stackoverflow.com/questions/30383845/what-is-the-best-practice-of-docker-ufw-under-ubuntu/51741599#comment91451547_51741599)\n- [docker and ufw serious problems · Issue #4737 · moby/moby](https://github.com/moby/moby/issues/4737#issuecomment-420112149)\n\n\n## 太长不想读\n\n请直接看[解决 UFW 和 Docker 的问题](#解决-ufw-和-docker-的问题)。\n\n## 问题\n\nUFW 是 Ubuntu 上很流行的一个 iptables 前端，可以非常方便的管理防火墙的规则。但是当安装了 Docker，UFW 无法管理 Docker 发布出来的端口了。\n\n具体现象是：\n\n1. 在一个对外提供服务的服务器上启用了 UFW，并且默认阻止所有未被允许的传入连接。\n2. 运行了一个 Docker 容器，并且使用 `-p` 选项来把该容器的某个端口发布到服务器的所有 IP 地址上。比如：`docker run -d --name httpd -p 0.0.0.0:8080:80 httpd:alpine` 将会运行一个 httpd 服务，并且将容器的 `80` 端口发布到服务器的 `8080` 端口上。\n3. UFW 将不会阻止所有对 `8080` 端口访问的请求，用命令 `ufw deny 8080` 也无法阻止外部访问这个端口。\n\n这个问题其实挺严重的，这意味着本来只是为了在内部提供服务的一个端口被暴露在公共网络上。\n\n在网络上搜索 \"ufw docker\" 可以发现很多的讨论：\n\n- https://github.com/moby/moby/issues/4737\n- https://forums.docker.com/t/running-multiple-docker-containers-with-ufw-and-iptables-false/8953\n- https://www.techrepublic.com/article/how-to-fix-the-docker-and-ufw-security-flaw/\n- https://blog.viktorpetersson.com/2014/11/03/the-dangers-of-ufw-docker.html\n- https://askubuntu.com/questions/652556/uncomplicated-firewall-ufw-is-not-blocking-anything-when-using-docker\n- https://chjdev.com/2016/06/08/docker-ufw/\n- https://askubuntu.com/questions/652556/uncomplicated-firewall-ufw-is-not-blocking-anything-when-using-docker\n- https://my.oschina.net/abcfy2/blog/539485\n- https://www.v2ex.com/amp/t/466666\n- https://blog.36web.rocks/2016/07/08/docker-behind-ufw.html\n- ...\n\n基本上可以找到的解决办法就是首先禁用 docker 的 iptables 功能，但这也意味着放弃了 docker 的网络管理功能，很典型的现象就是容器将无法访问外部网络。在有的文章中也提到了可以在 UFW 的配置文件中手工添加一条规则，比如 `-A POSTROUTING ! -o docker0 -s 172.17.0.0/16 -j MASQUERADE`。但这也只是允许了 `172.17.0.0/16` 这个网络。如果有了新增的网络，我们也必须手工再为新增的网络添加这样类似的 iptables 规则。\n\n## 期望的目标\n\n目前网络上的解决方案都非常类似，而且也不优雅，我希望一个新的解决方案可以：\n\n1. 不要禁用 Docker 的 iptables，像往常一样由 Docker 来管理自己的网络。这样有任何新增的 Docker 网络时都无需手工维护 iptables 规则，也避免了在 Docker 中禁用 iptables 之后可能带来的副作用。\n2. 公共网络不可以访问 Docker 发布出来的端口，即使是使用类似 `-p 0.0.0.0:8080:80` 的选项把端口发布在所有的 IP 地址上。容器之间、内部网络之间都可以正常互相访问，只有公共网络不可以访问。\n   虽然可以让 Docker 把容器的某一个端口映射到服务器的私有 IP 地址上，这样公共网络上将不会访问到这个端口。但是这个服务器可能有多个私有 IP 地址，这些私有 IP 地址可能也会发生变化。\n3. 可以很方便的允许公共网络直接访问某个容器的端口，而无需额外的软件和配置。就像是用 `ufw allow 8080` 这样允许外部访问 8080 端口，然后用 `ufw delete allow 8080` 就不再允许外部访问。\n\n## 如何做？\n\n### 撤销原先的修改\n\n如果已经按照目前网络上搜索到解决方案修改过了，请先修改回来，包括：\n\n1. 启用 Docker 的 iptables 功能，删除所有类似 `--iptables=false` 的修改，包括 `/etc/docker/daemon.json` 配置文件。\n2. UFW 的默认 `FORWARD` 规则改回默认的 `DROP`，而非 `ACCEPT`。\n3. 删除 UFW 配置文件 `/etc/ufw/after.rules` 中与 Docker 网络相关的规则。\n4. 如果修改了 Docker 相关的配置文件，重启 Docker。稍后还要修改 UFW 的配置，可以一并重启。\n\n### 解决 UFW 和 Docker 的问题\n\n目前新的解决方案只需要修改一个 UFW 配置文件即可，Docker 的所有配置和选项都保持默认。\n\n修改 UFW 的配置文件 `/etc/ufw/after.rules`，在最后添加上如下规则：\n\n    # BEGIN UFW AND DOCKER\n    *filter\n    :ufw-user-forward - [0:0]\n    :ufw-docker-logging-deny - [0:0]\n    :DOCKER-USER - [0:0]\n    -A DOCKER-USER -j ufw-user-forward\n\n    -A DOCKER-USER -j RETURN -s 10.0.0.0/8\n    -A DOCKER-USER -j RETURN -s 172.16.0.0/12\n    -A DOCKER-USER -j RETURN -s 192.168.0.0/16\n\n    -A DOCKER-USER -p udp -m udp --sport 53 --dport 1024:65535 -j RETURN\n\n    -A DOCKER-USER -j ufw-docker-logging-deny -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -d 192.168.0.0/16\n    -A DOCKER-USER -j ufw-docker-logging-deny -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -d 10.0.0.0/8\n    -A DOCKER-USER -j ufw-docker-logging-deny -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -d 172.16.0.0/12\n    -A DOCKER-USER -j ufw-docker-logging-deny -p udp -m udp --dport 0:32767 -d 192.168.0.0/16\n    -A DOCKER-USER -j ufw-docker-logging-deny -p udp -m udp --dport 0:32767 -d 10.0.0.0/8\n    -A DOCKER-USER -j ufw-docker-logging-deny -p udp -m udp --dport 0:32767 -d 172.16.0.0/12\n\n    -A DOCKER-USER -j RETURN\n\n    -A ufw-docker-logging-deny -m limit --limit 3/min --limit-burst 10 -j LOG --log-prefix \"[UFW DOCKER BLOCK] \"\n    -A ufw-docker-logging-deny -j DROP\n\n    COMMIT\n    # END UFW AND DOCKER\n \n然后重启 UFW，`sudo systemctl restart ufw`。现在外部就已经无法访问 Docker 发布出来的任何端口了，但是容器内部以及私有网络地址上可以正常互相访问，而且容器也可以正常访问外部的网络。**可能由于某些未知原因，重启 UFW 之后规则也无法生效，请重启服务器。**\n\n如果希望允许外部网络访问 Docker 容器提供的服务，比如有一个容器的服务端口是 `80`。那就可以用以下命令来允许外部网络访问这个服务：\n\n    ufw route allow proto tcp from any to any port 80\n\n这个命令会允许外部网络访问所有用 Docker 发布出来的并且内部服务端口为 `80` 的所有服务。\n\n请注意，这个端口 `80` 是容器的端口，而非使用 `-p 0.0.0.0:8080:80` 选项发布在服务器上的 `8080` 端口。\n\n如果有多个容器的服务端口为 80，但只希望外部网络访问某个特定的容器。比如该容器的私有地址为 `172.17.0.2`，就用类似下面的命令：\n\n    ufw route allow proto tcp from any to 172.17.0.2 port 80\n\n如果一个容器的服务是 UDP 协议，假如是 DNS 服务，可以用下面的命令来允许外部网络访问所有发布出来的 DNS 服务：\n\n    ufw route allow proto udp from any to any port 53\n\n同样的，如果只针对一个特定的容器，比如 IP 地址为 `172.17.0.2`：\n\n    ufw route allow proto udp from any to 172.17.0.2 port 53\n\n### 解释\n\n在新增的这段规则中，下面这段规则是为了让私有网络地址可以互相访问。通常情况下，私有网络是比公共网络更信任的。\n\n    -A DOCKER-USER -j RETURN -s 10.0.0.0/8\n    -A DOCKER-USER -j RETURN -s 172.16.0.0/12\n    -A DOCKER-USER -j RETURN -s 192.168.0.0/16\n\n下面的规则是为了可以用 UFW 来管理外部网络是否允许访问 Docker 容器提供的服务，这样我们就可以在一个地方来管理防火墙的规则了。\n\n    -A DOCKER-USER -j ufw-user-forward\n\n例如，我们要阻止一个 IP 地址为 172.17.0.9 的容器内的所有对外连接，也就是阻止该容器访问外部网络，使用下列命令\n\n    ufw route deny from 172.17.0.9 to any\n\n下面的规则阻止了所有外部网络发起的连接请求，但是允许内部网络访问外部网络。对于 TCP 协议，是阻止了从外部网络主动建立 TCP 连接。对于 UDP，是阻止了所有小余端口 `32767` 的访问。为什么是这个端口的？由于 UDP 协议是无状态的，无法像 TCP 那样阻止发起建立连接请求的握手信号。在 GNU/Linux 上查看文件 `/proc/sys/net/ipv4/ip_local_port_range` 可以看到发出 TCP/UDP 数据后，本地源端口的范围，默认为 `32768 60999`。当从一个运行的容器对外访问一个 UDP 协议的服务时，本地端口将会从这个端口范围里面随机选择一个，服务器将会把数据返回到这个随机端口上。所以，我们可以假定所有容器内部的 UDP 协议的监听端口都小余 `32768`，不允许外部网络主动连接小余 `32768` 的 UDP 端口。\n\n    -A DOCKER-USER -j DROP -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -d 192.168.0.0/16\n    -A DOCKER-USER -j DROP -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -d 10.0.0.0/8\n    -A DOCKER-USER -j DROP -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -d 172.16.0.0/12\n    -A DOCKER-USER -j DROP -p udp -m udp --dport 0:32767 -d 192.168.0.0/16\n    -A DOCKER-USER -j DROP -p udp -m udp --dport 0:32767 -d 10.0.0.0/8\n    -A DOCKER-USER -j DROP -p udp -m udp --dport 0:32767 -d 172.16.0.0/12\n\n    -A DOCKER-USER -j RETURN\n\n如果一个容器在接受数据的时候，端口号没有遵循操作系统的设定，也就是说最小端口号要小余 `32768`。比如运行了一个 Dnsmasq 的容器，Dnsmasq 用于接受数据的最小端口号默认是 `1024`。那可以用下面的命令来允许 Dnsmasq 这个容器使用一个更大的端口范围来接受数据。\n\n    ufw route allow proto udp from any port 53 to any port 1024:65535\n\n因为 DNS 是一个非常常见的服务，所以已经有一条规则用于允许使用一个更大的端口范围来接受 DNS 数据包\n\n### 选择 `ufw-user-forward` 而不是 `ufw-user-input` 的原因\n\n#### 使用 `ufw-user-input`\n\n优点：\n\n使用的 UFW 命令比较简单，也比较容易理解，而且也支持老版本的 Ubuntu\n\n比如，允许公众网络访问一个已经发布出来的容器端口 `8080`，使用命令：\n\n    ufw allow 8080\n\n缺点：\n\n不仅仅是暴露了已经发布的容器端口，也暴露了主机上的端口。\n\n比如，如果在主机上运行了一个端口为 `8080` 的服务。命令 `ufw allow 8080` 允许了公共网络访问这个服务，也允许了访问所有已经发布的容器端口为 `8080` 的服务。但是我们可能只是希望保留主机上的这个服务，或者是运行在容器里面的服务，而不是两个同时暴露。\n\n为了避免这个问题，我们可能需要使用类似下面的命令来管理已经发布的容器端口：\n\n    ufw allow proto tcp from any to 172.16.0.3 port 8080\n\n#### 使用 `ufw-user-forward`\n\n优点：\n\n不会因为同一条命令而同时暴露主机和容器里面的服务。\n\n比如，如果我们希望暴露所有容器端口为 `8080` 的服务，使用下面的命令：\n\n    ufw route allow 8080\n\n现在公共网络可以访问所有容器端口为 `8080` 的已经发布的服务，但是运行在主机上的 `8080` 服务仍然不会被公开。如果我们希望公开主机上的 `8080` 端口，可以执行下面的命令：\n\n    ufw allow 8080\n\n缺点：\n\n不支持老版本的 Ubuntu，而且命令的使用上可能也会比较复杂。\n\n#### 结论\n\n如果我们正在使用老版本的 Ubuntu，我们可以使用 `ufw-user-input`。但是要小心避免把不该暴露的服务暴露出去。\n\n如果正在使用支持 `ufw route` 命令的新版本的 Ubuntu，我们最好使用 `ufw-user-forward`，并且使用 `ufw route` 来管理与容器相关的防火墙规则。\n\n## `ufw-docker` 工具\n\n现在这个脚本也支持 Docker Swarm。\n\n### 安装\n\n下载 `ufw-docker` 脚本\n\n    sudo wget -O /usr/local/bin/ufw-docker \\\n      https://github.com/chaifeng/ufw-docker/raw/master/ufw-docker\n    chmod +x /usr/local/bin/ufw-docker\n\n使用下列命令来修改 ufw 的 `after.rules` 文件\n\n    ufw-docker install\n\n这个命令做了以下事情：\n- 备份文件 `/etc/ufw/after.rules`\n- 把 UFW 和 Docker 的相关规则添加到文件 `after.rules` 的末尾\n\n#### 为 Docker Swarm 环境安装\n\n仅仅可以在管理节点上使用 `ufw-docker` 这个脚本来管理防火墙规则。\n\n- 在所有的节点上修改 `after.rules` 这个文件，包括管理节点和工作节点\n- 在管理节点上部署这个脚本\n\n运行在 Docker Swarm 模式下，这个脚本将会创建一个全局服务 `ufw-docker-agent`。这个镜像 [chaifeng/ufw-docker-agent](https://hub.docker.com/r/chaifeng/ufw-docker-agent/) 是由本项目自动构建的。\n\n### 使用方法\n\n显示帮助\n\n    ufw-docker help\n\n检查 UFW 配置文件中防火墙规则的安装\n\n    ufw-docker check\n\n更新 UFW 的配置文件，添加必要的防火墙规则\n\n    ufw-docker install\n\n显示当前防火墙允许的转发规则\n\n    ufw-docker status\n\n列出所有和容器 `httpd` 相关的防火墙规则\n\n    ufw-docker list httpd\n\n暴露容器 `httpd` 的 `80` 端口\n\n    ufw-docker allow httpd 80\n\n暴露容器 `httpd` 的 `443` 端口，且协议为 `tcp`\n\n    ufw-docker allow httpd 443/tcp\n\n如果容器 `httpd` 绑定到多个网络上，暴露其 `443` 端口，协议为 `tcp`，网络为 `foobar-external-network`\n\n    ufw-docker allow httpd 443/tcp foobar-external-network\n\n把容器 `httpd` 的所有映射端口都暴露出来\n\n    ufw-docker allow httpd\n\n删除所有和容器 `httpd` 相关的防火墙规则\n\n    ufw-docker delete allow httpd\n\n删除容器 `httpd` 的 `tcp` 端口 `443` 的规则\n\n    ufw-docker delete allow httpd 443/tcp\n\n暴露服务 `web` 的 `80` 端口\n\n    docker service create --name web --publish 8080:80 httpd:alpine\n\n    ufw-docker service allow web 80\n    # 或者\n    ufw-docker service allow web 80/tcp\n\n删除与服务 `web` 相关的规则\n\n    ufw-docker service delete allow web\n\n### 试试\n\n我们使用 [Vagrant](https://www.vagrantup.com/) 来创建一个本地的测试环境。\n\n运行下面的命令来创建 1 个 master 节点和 2 个 workder 节点\n\n    vagrant up\n\n登录到 master 节点\n\n    vagrant ssh master\n\n登录后，创建 `web`  服务\n\n    docker service create --name web --publish 8080:80 httpd:alpine\n\n我们应该无法从我们的主机上访问这个 `web` 服务\n\n    curl -v http://192.168.56.131:8080\n\n在 master 节点上，运行下面的命令来允许公共访问 `web` 服务端 `80` 端口。\n\n    sudo ufw-docker service allow web 80\n\n现在我们可以在我们的主机上访问这个 `web` 服务了\n\n    curl \"http://192.168.56.13{0,1,2}:8080\"\n\n## 讨论\n\n- [What is the best practice of docker + ufw under Ubuntu - Stack Overflow](https://stackoverflow.com/questions/30383845/what-is-the-best-practice-of-docker-ufw-under-ubuntu/51741599#comment91451547_51741599)\n- [docker and ufw serious problems · Issue #4737 · moby/moby](https://github.com/moby/moby/issues/4737#issuecomment-420112149)\n"
        },
        {
          "name": "Vagrantfile",
          "type": "blob",
          "size": 8.5537109375,
          "content": "# frozen_string_literal: true\n\n# -*- mode: ruby -*-\n# vi: set ft=ruby :\n\nENV['VAGRANT_NO_PARALLEL']=\"true\"\n\nVagrant.configure('2') do |config|\n  ubuntu_version = File.readlines(\"Dockerfile\").filter { |line|\n    line.start_with?(\"FROM \")\n  }.first.match(/\\d\\d\\.\\d\\d/)[0]\n\n  docker_version = File.readlines(\"Dockerfile\").filter { |line|\n    line.start_with?(\"ARG docker_version=\")\n  }.first.match(/\"([\\d\\.]+)\"/)[1]\n\n  config.vm.box = \"chaifeng/ubuntu-#{ubuntu_version}-docker-#{docker_version}\"\n\n  config.vm.provider 'virtualbox' do |vb|\n    vb.memory = '1024'\n    vb.default_nic_type = \"virtio\"\n  end\n\n  config.vm.provider 'parallels' do |prl|\n    prl.memory = '1024'\n    prl.check_guest_tools = false\n  end\n\n  ip_prefix=\"192.168.56\"\n\n  config.vm.provision 'docker-daemon-config', type: 'shell', inline: <<-SHELL\n    set -eu\n    if [[ ! -f /etc/docker/daemon.json ]]; then\n      echo '{' >> /etc/docker/daemon.json\n      echo '  \"insecure-registries\": [\"localhost:5000\", \"#{ip_prefix}.130:5000\"]' >> /etc/docker/daemon.json\n      [[ -n \"#{ENV['DOCKER_REGISTRY_MIRROR']}\" ]] &&\n        echo '  , \"registry-mirrors\": [\"#{ENV['DOCKER_REGISTRY_MIRROR']}\"]' >> /etc/docker/daemon.json\n      echo '}' >> /etc/docker/daemon.json\n      if type systemctl &>/dev/null; then\n        systemctl restart docker\n      else\n        service docker restart\n      fi\n    fi\n  SHELL\n\n  config.vm.provision 'ufw-docker', type: 'shell', inline: <<-SHELL\n    set -euo pipefail\n    export DEBUG=true\n    lsb_release -is | grep -Fi ubuntu\n    /vagrant/ufw-docker check || {\n      ufw allow OpenSSH\n      ufw allow from #{ip_prefix}.128/28 to any\n\n      yes | ufw enable || true\n      ufw status | grep '^Status: active'\n\n      /vagrant/ufw-docker install\n\n      sed -i -e 's,192\\.168\\.0\\.0/16,#{ip_prefix}.128/28,' /etc/ufw/after.rules\n\n      systemctl restart ufw\n\n      [[ -L /usr/local/bin/ufw-docker ]] || ln -s /vagrant/ufw-docker /usr/local/bin/\n\n      iptables -I DOCKER-USER 4 -p udp -j LOG --log-prefix '[UFW DOCKER] '\n    }\n  SHELL\n\n  private_registry=\"#{ip_prefix}.130:5000\"\n\n  config.vm.define \"master\" do |master|\n    master_ip_address = \"#{ip_prefix}.130\"\n    master.vm.hostname = \"master\"\n    master.vm.network \"private_network\", ip: \"#{master_ip_address}\"\n\n    master.vm.provision \"unit-testing\", preserve_order: true, type: 'shell', inline: <<-SHELL\n        set -euo pipefail\n        /vagrant/test.sh\n    SHELL\n\n    master.vm.provision \"docker-registry\", preserve_order: true, type: 'docker' do |d|\n      d.run \"registry\",\n            image: \"registry:2\",\n            args: \"-p 5000:5000\",\n            restart: \"always\",\n            daemonize: true\n    end\n\n    ufw_docker_agent_image = \"#{private_registry}/chaifeng/ufw-docker-agent:test-legacy\"\n\n    master.vm.provision \"docker-build-ufw-docker-agent\", preserve_order: true, type: 'shell', inline: <<-SHELL\n      set -euo pipefail\n      suffix=\"$(iptables --version | grep -o '\\\\(nf_tables\\\\|legacy\\\\)')\"\n      docker build -t \"#{ufw_docker_agent_image}-${suffix}\" /vagrant\n      docker push \"#{ufw_docker_agent_image}-${suffix}\"\n\n      echo \"export UFW_DOCKER_AGENT_IMAGE=#{ufw_docker_agent_image}-${suffix}\" > /etc/profile.d/ufw-docker.sh\n      echo \"export DEBUG=true\" >> /etc/profile.d/ufw-docker.sh\n\n      echo \"Defaults env_keep += UFW_DOCKER_AGENT_IMAGE\" > /etc/sudoers.d/98_ufw-docker\n      echo \"Defaults env_keep += DEBUG\" >> /etc/sudoers.d/98_ufw-docker\n    SHELL\n\n    master.vm.provision \"swarm-init\", preserve_order: true, type: 'shell', inline: <<-SHELL\n      set -euo pipefail\n      docker info | fgrep 'Swarm: active' && exit 0\n\n      docker swarm init --advertise-addr \"#{master_ip_address}\"\n      docker swarm join-token worker --quiet > /vagrant/.vagrant/docker-join-token\n    SHELL\n\n    master.vm.provision \"build-webapp\", preserve_order: true, type: 'shell', inline: <<-SHELL\n        set -euo pipefail\n        docker build -t #{private_registry}/chaifeng/hostname-webapp - <<\\\\DOCKERFILE\nFROM httpd:alpine\n\nRUN { echo '#!/bin/sh'; \\\\\n    echo 'set -e; (echo -n \"${name:-Hi} \"; hostname;) > /usr/local/apache2/htdocs/index.html'; \\\\\n    echo 'grep \"^Listen 7000\" || echo Listen 7000 >> /usr/local/apache2/conf/httpd.conf'; \\\\\n    echo 'grep \"^Listen 8080\" || echo Listen 8080 >> /usr/local/apache2/conf/httpd.conf'; \\\\\n    echo 'exec \"$@\"'; \\\\\n    } > /entrypoint.sh; chmod +x /entrypoint.sh\n\nENTRYPOINT [\"/entrypoint.sh\"]\nCMD [\"httpd-foreground\"]\nDOCKERFILE\n        docker push #{private_registry}/chaifeng/hostname-webapp\n    SHELL\n\n    master.vm.provision \"local-webapp\", preserve_order: true, type: 'shell', inline: <<-SHELL\n        set -euo pipefail\n        for name in public:18080 local:8000; do\n            webapp=\"${name%:*}_webapp\"\n            port=\"${name#*:}\"\n            if docker inspect \"$webapp\" &>/dev/null; then docker rm -f \"$webapp\"; fi\n            docker run -d --restart unless-stopped --name \"$webapp\" \\\n                -p \"$port:80\" --env name=\"$webapp\" #{private_registry}/chaifeng/hostname-webapp\n            sleep 1\n        done\n\n        ufw-docker allow public_webapp\n    SHELL\n\n    master.vm.provision \"multiple-network\", preserve_order: true, type: 'shell', inline: <<-SHELL\n      set -euo pipefail\n      if ! docker network ls | grep -F foo-internal; then\n          docker network create --internal foo-internal\n      fi\n      if ! docker network ls | grep -F bar-external; then\n          docker network create bar-external\n      fi\n\n      for app in internal-multinet-app:7000 public-multinet-app:17070; do\n          if ! docker inspect \"${app%:*}\" &>/dev/null; then\n              docker run -d --restart unless-stopped --name \"${app%:*}\" \\\n                         -p \"${app#*:}\":80 --env name=\"${app}\" \\\n                         --network foo-internal \\\n                         192.168.56.130:5000/chaifeng/hostname-webapp\n              docker network connect bar-external \"${app%:*}\"\n          fi\n      done\n\n      ufw-docker allow public-multinet-app 80 bar-external\n      ufw-docker allow internal-multinet-app 80 foo-internal\n    SHELL\n\n    master.vm.provision \"swarm-webapp\", preserve_order: true, type: 'shell', inline: <<-SHELL\n      set -euo pipefail\n        for name in public:29090 local:9000; do\n            webapp=\"${name%:*}_service\"\n            port=\"${name#*:}\"\n            if docker service inspect \"$webapp\" &>/dev/null; then docker service rm \"$webapp\"; fi\n            docker service create --name \"$webapp\" \\\n                --publish \"${port}:80\" --env name=\"$webapp\" --replicas 3 #{private_registry}/chaifeng/hostname-webapp\n        done\n\n        ufw-docker service allow public_service 80/tcp\n\n        docker service inspect \"public_multiport\" ||\n            docker service create --name \"public_multiport\" \\\n                --publish \"40080:80\" --publish \"47000:7000\" --publish \"48080:8080\" \\\n                --env name=\"public_multiport\" --replicas 3 #{private_registry}/chaifeng/hostname-webapp\n\n        ufw-docker service allow public_multiport 80/tcp\n        ufw-docker service allow public_multiport 8080/tcp\n    SHELL\n  end\n\n  1.upto 2 do |ip|\n    config.vm.define \"node#{ip}\" do | node |\n      node.vm.hostname = \"node#{ip}\"\n      node.vm.network \"private_network\", ip: \"#{ip_prefix}.#{ 130 + ip }\"\n\n      node.vm.provision \"swarm-join\", preserve_order: true, type: 'shell', inline: <<-SHELL\n        set -euo pipefail\n        docker info | fgrep 'Swarm: active' && exit 0\n\n        [[ -f /vagrant/.vagrant/docker-join-token ]] &&\n        docker swarm join --token \"$(</vagrant/.vagrant/docker-join-token)\" #{ip_prefix}.130:2377\n      SHELL\n    end\n  end\n\n  config.vm.define \"node-internal\" do |node|\n    node.vm.hostname = \"node-internal\"\n    node.vm.network \"private_network\", ip: \"#{ip_prefix}.142\"\n  end\n\n  config.vm.define \"external\" do |external|\n    external.vm.hostname = \"external\"\n    external.vm.network \"private_network\", ip: \"#{ip_prefix}.127\"\n\n    external.vm.provision \"testing\", preserve_order: true, type: 'shell', inline: <<-SHELL\n        set -euo pipefail\n        set -x\n        server=\"http://#{ip_prefix}.130\"\n        function test-webapp() {\n          if timeout 3 curl --silent \"$@\"\n          then echo \"Success: $*\"\n          else echo \"Cannot visit: $*\"; return 1\n          fi\n        }\n        test-webapp \"$server:18080\"\n        ! test-webapp \"$server:8000\"\n\n        test-webapp \"$server:17070\" # multiple networks app\n        ! test-webapp \"$server:7000\" # internal multiple networks app\n\n        test-webapp \"$server:29090\"\n        ! test-webapp \"$server:9000\"\n\n        test-webapp \"$server:40080\"\n        test-webapp \"$server:48080\"\n        ! test-webapp \"$server:47000\"\n\n        echo \"=====================\"\n        echo \"      TEST DONE      \"\n        echo \"=====================\"\n    SHELL\n  end\nend\n"
        },
        {
          "name": "docker-entrypoint.sh",
          "type": "blob",
          "size": 1.9951171875,
          "content": "#!/bin/bash\nset -euo pipefail\n[[ -n \"${DEBUG:-}\" ]] && set -x\n[[ 0 -eq \"$#\" ]] && set -- start\n\nufw_docker_agent=ufw-docker-agent\nufw_docker_agent_image=\"${ufw_docker_agent_image:-chaifeng/${ufw_docker_agent}:181003}\"\n\nfunction ufw-allow-or-deny-service() {\n    declare id=\"$1\"\n    declare port=\"$2\"\n\n    if [[ \"$port\" = deny ]]; then\n        run-ufw-docker delete allow \"$id\"\n    else\n        run-ufw-docker add-service-rule \"$id\" \"$port\"\n    fi\n}\n\nfunction update-ufw-rules() {\n    declare -p | sed -e '/^declare -x ufw_public_/!d' \\\n                     -e 's/^declare -x ufw_public_//' \\\n                     -e 's/=\"/ /' \\\n                     -e 's/\"$//' |\n        while read -r id port; do\n            ufw-allow-or-deny-service \"${id}\" \"${port#*/}\"\n        done\n}\n\nfunction run-ufw-docker() {\n    declare -a docker_opts=(run --rm -t --name \"ufw-docker-agent-${RANDOM}-$(date '+%Y%m%d%H%M%S')\"\n         --cap-add NET_ADMIN --network host\n         --env \"DEBUG=${DEBUG}\"\n         -v /var/run/docker.sock:/var/run/docker.sock\n         -v /etc/ufw:/etc/ufw \"${ufw_docker_agent_image}\" \"$@\")\n    docker \"${docker_opts[@]}\"\n}\n\nfunction get-service-name-of() {\n    docker inspect \"$1\" --format '{{range $k,$v:=.Config.Labels}}{{ if eq $k \"com.docker.swarm.service.name\" }}{{$v}}{{end}}{{end}}' | grep -E \"^.+\\$\"\n}\n\nfunction get-service-id-of() {\n    docker inspect \"$1\" --format '{{range $k,$v:=.Config.Labels}}{{ if eq $k \"com.docker.swarm.service.id\" }}{{$v}}{{end}}{{end}}' | grep -E \"^.+\\$\"\n}\n\nfunction main() {\n    case \"$1\" in\n        start)\n            update-ufw-rules\n            while true; do\n                sleep \"$(( 3600 * 24 * 7 ))\" || break\n            done\n            ;;\n        delete|allow|add-service-rule)\n            ufw-docker \"$@\"\n            ;;\n        update-ufw-rules)\n            update-ufw-rules\n            ;;\n        *)\n            if [[ -f \"$1\" ]]; then\n                exec \"$@\"\n            else\n                echo \"Unknown parameters:\" \"$@\" >&2\n                exit 1\n            fi\n    esac\n}\n\nmain \"$@\"\n"
        },
        {
          "name": "test.sh",
          "type": "blob",
          "size": 0.50390625,
          "content": "#!/usr/bin/env bash\nset -uo pipefail\n\nfunction out() {\n    printf \"\\n\\e[1;37;497;m%s\\e[0;m\\n\" \"$@\"\n} >&2\n\nfunction err() {\n    printf \"\\n\\e[1;37;41;m%s\\e[0;m\\n\\n\" \"$@\"\n} >&2\n\nretval=0\ncd \"$(dirname \"${BASH_SOURCE}\")\"\nfor file in test/*.test.sh; do\n    out \"Running $file\"\n    if grep -E \"^[[:blank:]]*BACH_TESTS=.+\" \"$file\"; then\n        err \"Found defination of BACH_TESTS in $file\"\n        retval=1\n    fi\n    bash \"$file\" || retval=1\ndone\n\nif [[ \"$retval\" -ne 0 ]]; then\n    err \"Test failed!\"\nfi\n\nexit \"$retval\"\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "ufw-docker",
          "type": "blob",
          "size": 15.0908203125,
          "content": "#!/bin/bash\nset -euo pipefail\n[[ -n \"${DEBUG:-}\" ]] && set -x\n\nLANG=en_US.UTF-8\nLANGUAGE=en_US:\nLC_ALL=en_US.UTF-8\nPATH=\"/bin:/usr/bin:/sbin:/usr/sbin:/snap/bin/\"\n\nGREP_REGEXP_INSTANCE_NAME=\"[-_.[:alnum:]]\\\\+\"\nDEFAULT_PROTO=tcp\n\nufw_docker_agent=ufw-docker-agent\nufw_docker_agent_image=\"${UFW_DOCKER_AGENT_IMAGE:-chaifeng/${ufw_docker_agent}:221002-nf_tables}\"\n\nif [[ \"${ufw_docker_agent_image}\" = *-@(legacy|nf_tables) ]]; then\n    if iptables --version | grep -F '(legacy)' &>/dev/null; then\n        ufw_docker_agent_image=\"${ufw_docker_agent_image%-*}-legacy\"\n    else\n        ufw_docker_agent_image=\"${ufw_docker_agent_image%-*}-nf_tables\"\n    fi\nfi\n\ntest -n \"$ufw_docker_agent_image\"\n\nfunction ufw-docker--status() {\n    ufw-docker--list \"$GREP_REGEXP_INSTANCE_NAME\"\n}\n\nfunction ufw-docker--list() {\n    local INSTANCE_NAME=\"$1\"\n    local INSTANCE_PORT=\"${2:-}\"\n    local PROTO=\"${3:-${DEFAULT_PROTO}}\"\n    local NETWORK=\"${4:-}\"\n\n    if [[ -z \"$INSTANCE_PORT\" ]]; then\n        INSTANCE_PORT=\"[[:digit:]]\\\\+\"\n        PROTO=\"\\\\(tcp\\\\|udp\\\\)\"\n    fi\n\n    if [[ -z \"$NETWORK\" ]]; then\n       NETWORK=\"[[:graph:]]*\"\n    fi\n\n    ufw status numbered | grep \"# allow ${INSTANCE_NAME}\\\\( ${INSTANCE_PORT}\\\\/${PROTO}\\\\)\\\\( ${NETWORK}\\\\)\\$\" ||  \\\n    ufw status numbered | grep \"# allow ${INSTANCE_NAME}\\\\( ${INSTANCE_PORT}\\\\/${PROTO}\\\\)\\$\" || \\\n    ufw status numbered | grep \"# allow ${INSTANCE_NAME}\\$\"\n}\n\nfunction ufw-docker--list-number() {\n    ufw-docker--list \"$@\" | sed -e 's/^\\[[[:blank:]]*\\([[:digit:]]\\+\\)\\].*/\\1/'\n}\n\nfunction ufw-docker--delete() {\n    for UFW_NUMBER in $(ufw-docker--list-number \"$@\" | sort -rn); do\n        echo \"delete \\\"$UFW_NUMBER\\\"\"\n        echo y | ufw delete \"$UFW_NUMBER\" || true\n    done\n}\n\nfunction ufw-docker--allow() {\n    local INSTANCE_NAME=\"$1\"\n    local INSTANCE_PORT=\"$2\"\n    local PROTO=\"$3\"\n    local NETWORK=\"${4:-}\"\n\n    docker inspect \"$INSTANCE_NAME\" &>/dev/null ||\n        die \"Docker instance \\\"$INSTANCE_NAME\\\" doesn't exist.\"\n\n    mapfile -t INSTANCE_IP_ADDRESSES < <(docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{\"\\n\"}}{{end}}' \"$INSTANCE_NAME\" 2>/dev/null | remove_blank_lines)\n\n    [[ -z \"${INSTANCE_IP_ADDRESSES:-}\" ]] && die \"Could not find a running instance \\\"$INSTANCE_NAME\\\".\"\n\n    mapfile -t INSTANCE_NETWORK_NAMES < <(docker inspect --format='{{range $k, $v := .NetworkSettings.Networks}}{{printf \"%s\\n\" $k}}{{end}}' \"$INSTANCE_NAME\" 2>/dev/null | remove_blank_lines)\n    mapfile -t PORT_PROTO_LIST < <(docker inspect --format='{{range $p, $conf := .NetworkSettings.Ports}}{{with $conf}}{{$p}}{{\"\\n\"}}{{end}}{{end}}' \"$INSTANCE_NAME\" | remove_blank_lines)\n\n    if [[ -z \"${PORT_PROTO_LIST:-}\" ]]; then\n        err \"\\\"$INSTANCE_NAME\\\" doesn't have any published ports.\"\n        return 1\n    fi\n\n    RETVAL=1\n    for PORT_PROTO in \"${PORT_PROTO_LIST[@]}\"; do\n        if [[ -z \"$INSTANCE_PORT\" || \"$PORT_PROTO\" = \"${INSTANCE_PORT}/${PROTO}\" ]]; then\n            ITER=0\n            for IP in \"${INSTANCE_IP_ADDRESSES[@]}\"; do\n                INSTANCE_NETWORK=\"${INSTANCE_NETWORK_NAMES[$ITER]}\"\n                ITER=$((ITER+1))\n                if [[ -n \"$NETWORK\" ]] && [[ \"$NETWORK\" != \"$INSTANCE_NETWORK\" ]]; then\n                    continue\n                fi\n                ufw-docker--add-rule \"$INSTANCE_NAME\" \"$IP\" \"${PORT_PROTO%/*}\" \"${PORT_PROTO#*/}\" \"${INSTANCE_NETWORK}\"\n                RETVAL=\"$?\"\n            done\n        fi\n    done\n    if [[ \"$RETVAL\" -ne 0 ]]; then\n        err \"Fail to add rule(s), cannot find the published port ${INSTANCE_PORT}/${PROTO} of instance \\\"${INSTANCE_NAME}\\\" or cannot update outdated rule(s).\"\n    fi\n    return \"$RETVAL\"\n}\n\nfunction ufw-docker--add-service-rule() {\n    declare service_id=\"$1\"\n    declare port=\"${2%/*}\"\n    declare proto=\"${2#*/}\"\n\n    declare target_ip_port\n    target_ip_port=\"$(iptables -t nat -L DOCKER-INGRESS | grep -E \"^DNAT\\\\s+${proto}\\\\s+.+\\\\sto:[.0-9]+:${port}\\$\" | grep -Eo \"[.0-9]+:${port}\\$\")\"\n\n    [[ -z \"$target_ip_port\" ]] && die \"Could not find VIP of service ${service_id}.\"\n\n    ufw-docker--add-rule \"$service_id\" \"${target_ip_port%:*}\" \"$port\" \"$proto\"\n}\n\nfunction ufw-docker--add-rule() {\n    local INSTANCE_NAME=\"$1\"\n    local INSTANCE_IP_ADDRESS=\"$2\"\n    local PORT=\"$3\"\n    local PROTO=\"$4\"\n    local NETWORK=\"${5:-}\"\n\n    declare comment\n\n    echo \"allow ${INSTANCE_NAME} ${PORT}/${PROTO} ${NETWORK}\"\n    typeset -a UFW_OPTS\n    UFW_OPTS=(route allow proto \"${PROTO}\"\n              from any to \"$INSTANCE_IP_ADDRESS\")\n    comment=\"allow ${INSTANCE_NAME}\"\n    [[ -n \"$PORT\" ]] && {\n        UFW_OPTS+=(port \"${PORT}\")\n        comment=\"$comment ${PORT}/${PROTO}\"\n    }\n    [[ -n \"$NETWORK\" ]] && {\n        comment=\"$comment ${NETWORK}\"\n    }\n    UFW_OPTS+=(comment \"$comment\")\n\n    if ufw-docker--list \"$INSTANCE_NAME\" \"$PORT\" \"$PROTO\" \"$NETWORK\" &>/dev/null; then\n        ufw --dry-run \"${UFW_OPTS[@]}\" | grep \"^Skipping\" && return 0\n        err \"Remove outdated rule.\"\n        ufw-docker--delete \"$INSTANCE_NAME\" \"$PORT\" \"$PROTO\" \"$NETWORK\"\n    fi\n    echo ufw \"${UFW_OPTS[@]}\"\n    ufw \"${UFW_OPTS[@]}\"\n}\n\nfunction ufw-docker--instance-name() {\n    local INSTANCE_ID=\"$1\"\n    {\n        {\n            docker inspect --format='{{.Name}}' \"$INSTANCE_ID\" 2>/dev/null | sed -e 's,^/,,' |\n                grep \"^${GREP_REGEXP_INSTANCE_NAME}\\$\" 2>/dev/null\n        } || echo -n \"$INSTANCE_ID\";\n    } | remove_blank_lines\n}\n\nfunction ufw-docker--service() {\n    declare service_action=\"${1:-help}\"\n    case \"$service_action\" in\n        delete)\n            shift || true\n            if [[ \"${1:?Invalid 'delete' command syntax.}\" != \"allow\" ]]; then\n                die \"\\\"delete\\\" command only support removing allowed rules\"\n            fi\n            shift || true\n            declare service_id_or_name=\"${1:?Missing swarm service name or service ID}\"\n\n            \"ufw-docker--service-${service_action}\" \"${service_id_or_name}\"\n            ;;\n        allow)\n            shift || true\n            declare service_id_or_name=\"${1:?Missing swarm service name or service ID}\"\n            declare service_port=\"${2:?Missing the port number, such as '80/tcp'.}\"\n\n            \"ufw-docker--service-${service_action}\" \"${service_id_or_name}\" \"${service_port}\"\n            ;;\n        *)\n            ufw-docker--help\n            ;;\n    esac\n}\n\nfunction ufw-docker--get-service-id() {\n    declare service_name=\"$1\"\n    docker service inspect \"${service_name}\" --format \"{{.ID}}\"\n}\n\nfunction ufw-docker--get-service-name() {\n    declare service_name=\"$1\"\n    docker service inspect \"${service_name}\" --format \"{{.Spec.Name}}\"\n}\n\nfunction ufw-docker--service-allow() {\n    declare service_name=\"$1\"\n    declare service_port=\"$2\"\n    declare service_proto=tcp\n\n    if [[ -n \"$service_port\" ]] &&\n           ! grep -E '^[0-9]+(/(tcp|udp))?$' <<< \"$service_port\" &>/dev/null; then\n        die \"Invalid port syntax: $service_port\"\n        return 1\n    fi\n\n    if [[ \"$service_port\" = */* ]]; then\n        service_proto=\"${service_port#*/}\"\n        service_port=\"${service_port%/*}\"\n    fi\n\n    declare service_id\n    service_id=\"$(ufw-docker--get-service-id \"${service_name}\")\"\n    [[ -z \"${service_id:-}\" ]] && die \"Could not find service \\\"$service_name\\\"\"\n\n    service_name=\"$(ufw-docker--get-service-name \"${service_name}\")\"\n\n    exec 9< <(docker service inspect \"$service_name\" \\\n                     --format '{{range .Endpoint.Spec.Ports}}{{.PublishedPort}} {{.TargetPort}}/{{.Protocol}}{{\"\\n\"}}{{end}}')\n    while read -u 9 -r port target_port; do\n        if [[ \"$target_port\" = \"${service_port}/${service_proto}\" ]]; then\n            declare service_env=\"ufw_public_${service_id}=${service_name}/${port}/${service_proto}\"\n            break;\n        fi\n    done\n    exec 9<&-\n\n    [[ -z \"${service_env:-}\" ]] && die \"Service $service_name does not publish port $service_port.\"\n\n    if ! docker service inspect \"$ufw_docker_agent\" &>/dev/null; then\n        err \"Not found ufw-docker-agent service, creating ...\"\n        docker service create --name \"$ufw_docker_agent\" --mode global \\\n               --mount type=bind,source=/var/run/docker.sock,target=/var/run/docker.sock \\\n               --mount type=bind,source=/etc/ufw,target=/etc/ufw,readonly=true \\\n               --env ufw_docker_agent_image=\"${ufw_docker_agent_image}\" \\\n               --env DEBUG=\"${DEBUG:-}\" \\\n               --env \"${service_env}\" \\\n               \"${ufw_docker_agent_image}\"\n    else\n        declare -a service_env_list\n        service_env_list+=(--env-add \"${service_env}\")\n\n        exec 8< <(ufw-docker--get-env-list)\n        while read -u 8 -r id value; do\n            [[ \"$id\" = \"$service_id\" ]] && continue\n            [[ \"$value\" = \"${service_name}\"/* ]] && service_env_list+=(--env-rm \"ufw_public_${id}\")\n        done\n        exec 8<&-\n\n        docker service update --update-parallelism=0 \\\n               --env-add ufw_docker_agent_image=\"${ufw_docker_agent_image}\" \\\n               --env-add DEBUG=\"${DEBUG:-}\" \\\n               \"${service_env_list[@]}\" \\\n               --image \"${ufw_docker_agent_image}\" \\\n               \"${ufw_docker_agent}\"\n    fi\n}\n\nfunction ufw-docker--get-env-list() {\n    docker service inspect \"${ufw_docker_agent}\" \\\n           --format '{{range $k,$v := .Spec.TaskTemplate.ContainerSpec.Env}}{{ $v }}{{\"\\n\"}}{{end}}' |\n        sed -e '/^ufw_public_/!d' \\\n            -e 's/^ufw_public_//' \\\n            -e 's/=/ /'\n}\n\nfunction ufw-docker--service-delete() {\n    declare service_name=\"$1\"\n\n    exec 8< <(ufw-docker--get-env-list)\n    while read -u 8 -r id value; do\n        if [[ \"$id\" = \"$service_name\" ]] || [[ \"$value\" = \"${service_name}\"/* ]]; then\n            declare service_id=\"$id\"\n            service_name=\"${value%%/*}\"\n            declare service_env=\"ufw_public_${service_id}=${service_name}/deny\"\n            break;\n        fi\n    done\n    exec 8<&-\n\n    [[ -z \"${service_env:-}\" ]] && die \"Could not find service \\\"$service_name\\\"\"\n\n    docker service update --update-parallelism=0 \\\n           --env-add ufw_docker_agent_image=\"${ufw_docker_agent_image}\" \\\n           --env-add \"${service_env}\" \\\n           --image \"${ufw_docker_agent_image}\" \\\n           \"${ufw_docker_agent}\"\n}\n\nfunction ufw-docker--raw-command() {\n    ufw \"$@\"\n}\n\nafter_rules=\"/etc/ufw/after.rules\"\n\nfunction ufw-docker--check() {\n    err \"\\\\n########## iptables -n -L DOCKER-USER ##########\"\n    iptables -n -L DOCKER-USER\n\n    err \"\\\\n\\\\n########## diff $after_rules ##########\"\n    ufw-docker--check-install && err \"\\\\nCheck done.\"\n}\n\ndeclare -a files_to_be_deleted\n\nfunction rm-on-exit() {\n    [[ $# -gt 0 ]] && files_to_be_deleted+=(\"$@\")\n}\n\nfunction on-exit() {\n    for file in \"${files_to_be_deleted[@]:-}\"; do\n        [[ -f \"$file\" ]] && rm -r \"$file\"\n    done\n    files_to_be_deleted=()\n}\n\ntrap on-exit EXIT INT TERM QUIT ABRT ERR\n\nfunction ufw-docker--check-install() {\n    after_rules_tmp=\"${after_rules_tmp:-$(mktemp)}\"\n    rm-on-exit \"$after_rules_tmp\"\n\n    sed \"/^# BEGIN UFW AND DOCKER/,/^# END UFW AND DOCKER/d\" \"$after_rules\" > \"$after_rules_tmp\"\n    >> \"${after_rules_tmp}\" cat <<-\\EOF\n\t# BEGIN UFW AND DOCKER\n\t*filter\n\t:ufw-user-forward - [0:0]\n\t:ufw-docker-logging-deny - [0:0]\n\t:DOCKER-USER - [0:0]\n\t-A DOCKER-USER -j ufw-user-forward\n\n\t-A DOCKER-USER -j RETURN -s 10.0.0.0/8\n\t-A DOCKER-USER -j RETURN -s 172.16.0.0/12\n\t-A DOCKER-USER -j RETURN -s 192.168.0.0/16\n\n\t-A DOCKER-USER -p udp -m udp --sport 53 --dport 1024:65535 -j RETURN\n\n\t-A DOCKER-USER -j ufw-docker-logging-deny -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -d 192.168.0.0/16\n\t-A DOCKER-USER -j ufw-docker-logging-deny -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -d 10.0.0.0/8\n\t-A DOCKER-USER -j ufw-docker-logging-deny -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -d 172.16.0.0/12\n\t-A DOCKER-USER -j ufw-docker-logging-deny -p udp -m udp --dport 0:32767 -d 192.168.0.0/16\n\t-A DOCKER-USER -j ufw-docker-logging-deny -p udp -m udp --dport 0:32767 -d 10.0.0.0/8\n\t-A DOCKER-USER -j ufw-docker-logging-deny -p udp -m udp --dport 0:32767 -d 172.16.0.0/12\n\n\t-A DOCKER-USER -j RETURN\n\n\t-A ufw-docker-logging-deny -m limit --limit 3/min --limit-burst 10 -j LOG --log-prefix \"[UFW DOCKER BLOCK] \"\n\t-A ufw-docker-logging-deny -j DROP\n\n\tCOMMIT\n\t# END UFW AND DOCKER\n\tEOF\n\n    diff -u --color=auto \"$after_rules\" \"$after_rules_tmp\"\n}\n\nfunction ufw-docker--install() {\n    if ! ufw-docker--check-install; then\n        local after_rules_bak\n        after_rules_bak=\"${after_rules}-ufw-docker~$(date '+%Y-%m-%d-%H%M%S')~\"\n        err \"\\\\nBacking up $after_rules to $after_rules_bak\"\n        cp \"$after_rules\" \"$after_rules_bak\"\n        cat \"$after_rules_tmp\" > \"$after_rules\"\n        err \"Please restart UFW service manually by using the following command:\"\n        if type systemctl &>/dev/null; then\n            err \"    sudo systemctl restart ufw\"\n        else\n            err \"    sudo service ufw restart\"\n        fi\n    fi\n}\n\nfunction ufw-docker--help() {\n    cat <<-EOF >&2\n\tUsage:\n\t  ufw-docker <list|allow> [docker-instance-id-or-name [port[/tcp|/udp]] [network]]\n\t  ufw-docker delete allow [docker-instance-id-or-name [port[/tcp|/udp]] [network]]\n\n\t  ufw-docker service allow <swarm-service-id-or-name <port</tcp|/udp>>>\n\t  ufw-docker service delete allow <swarm-service-id-or-name>\n\n\t  ufw-docker <status|install|check|help>\n\n\tExamples:\n\t  ufw-docker help\n\n\t  ufw-docker check           # Check the installation of firewall rules\n\t  ufw-docker install         # Install firewall rules\n\n\t  ufw-docker status\n\n\t  ufw-docker list httpd\n\n\n\t  ufw-docker allow httpd\n\t  ufw-docker allow httpd 80\n\t  ufw-docker allow httpd 80/tcp\n\t  ufw-docker allow httpd 80/tcp default\n\n\t  ufw-docker delete allow httpd\n\t  ufw-docker delete allow httpd 80/tcp\n          ufw-docker delete allow httpd 80/tcp default\n\n\t  ufw-docker service allow httpd 80/tcp\n\n\t  ufw-docker service delete allow httpd\n\tEOF\n}\n\nfunction remove_blank_lines() {\n    sed '/^[[:blank:]]*$/d'\n}\n\nfunction err() {\n    echo -e \"$@\" >&2\n}\n\nfunction die() {\n    err \"ERROR:\" \"$@\"\n    exit 1\n}\n\n# __main__\n\nif ! ufw status 2>/dev/null | grep -Fq \"Status: active\" ; then\n    die \"UFW is disabled or you are not root user, or mismatched iptables legacy/nf_tables, current $(iptables --version)\"\nfi\n\nif ! docker -v &> /dev/null; then\n  die \"Docker executable not found.\"\nfi\n\nufw_action=\"${1:-help}\"\n\ncase \"$ufw_action\" in\n    delete)\n        shift || true\n        if [[ \"${1:?Invalid 'delete' command syntax.}\" != \"allow\" ]]; then\n            die \"\\\"delete\\\" command only support removing allowed rules\"\n        fi\n        ;&\n    list|allow)\n        shift || true\n\n        INSTANCE_ID=\"${1:?Docker instance name/ID cannot be empty.}\"\n        INSTANCE_NAME=\"$(ufw-docker--instance-name \"$INSTANCE_ID\")\"\n        shift || true\n\n        INSTANCE_PORT=\"${1:-}\"\n        if [[ -n \"$INSTANCE_PORT\" && ! \"$INSTANCE_PORT\" =~ [0-9]+(/(tcp|udp))? ]]; then\n            die \"invalid port syntax: \\\"$INSTANCE_PORT\\\".\"\n        fi\n\n        PROTO=\"$DEFAULT_PROTO\"\n        if [[ \"$INSTANCE_PORT\" = */udp ]]; then\n            PROTO=udp\n        fi\n        shift || true\n\n        NETWORK=\"${1:-}\"\n\n        INSTANCE_PORT=\"${INSTANCE_PORT%/*}\"\n\n        \"ufw-docker--$ufw_action\" \"$INSTANCE_NAME\" \"$INSTANCE_PORT\" \"$PROTO\" \"$NETWORK\"\n        ;;\n    service|raw-command|add-service-rule)\n        shift || true\n        \"ufw-docker--$ufw_action\" \"$@\"\n        ;;\n    status|install|check)\n        ufw-docker--\"$ufw_action\"\n        ;;\n    *)\n        ufw-docker--help\n        ;;\nesac\n"
        }
      ]
    }
  ]
}