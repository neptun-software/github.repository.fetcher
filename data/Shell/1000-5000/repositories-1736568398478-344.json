{
  "metadata": {
    "timestamp": 1736568398478,
    "page": 344,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "phusion/traveling-ruby",
      "stars": 2108,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".agignore",
          "type": "blob",
          "size": 0.0576171875,
          "content": "linux/runtime\nlinux/output\nosx/runtime\nosx/output\nosx/work\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1904296875,
          "content": "# http://EditorConfig.org\n\nroot = true\n\n[*]\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\n\n[Rakefile]\nindent_style=space\nindent_size=2\n\n[*.rb]\nindent_style=space\nindent_size=2\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.12109375,
          "content": "/linux/runtime\n/linux/output\n/osx/runtime\n/osx/output\n/osx/work\n/windows/cache\n/windows/output\n*.sublime-workspace\n*.tar.gz\n"
        },
        {
          "name": "BUNDLER_VERSION.txt",
          "type": "blob",
          "size": 0.0068359375,
          "content": "1.17.3\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 5.220703125,
          "content": "## Version 20210206\n\n * The Ruby version that we now support is: 2.4.10\n * On Linux, dropped support for x86. Only x86\\_64 is now supported.\n * On Windows, dropped support for x86. Only x64 is now supported.\n * The minimum supported macOS version is now 10.14 Mojave.\n * The minimum supported Linux version is now RHEL 7 / CentOS 7 / Debian 8 / Ubuntu 14.06 / glibc 2.17.\n * Fixed support for paths containing spaces. Contributed by Ville Immonen (@fson) in [PR #94](https://github.com/FooBarWidget/traveling-ruby/pull/94). Closes [issue #38](https://github.com/FooBarWidget/traveling-ruby/issues/38).\n * Upgraded CA certificates from that of CentOS 5 to that of CentOS 8.\n * Upgraded OpenSSL to 1.1.1i.\n * Upgraded GMP to 6.2.1.\n * Upgraded libssh2 to 1.9.0.\n * Upgraded bundler gem to version 1.17.3.\n * Upgraded bcrypt gem to 3.1.16.\n * Upgraded charlock\\_holmes gem to 0.7.7.\n * Upgraded curses gem to 1.4.0.\n * Upgraded escape\\_utils gem to 1.2.1.\n * Upgraded fast-stemmer gem to 1.0.2.\n * Upgraded ffi gem to 1.14.2.\n * Upgraded hitimes gem to 2.0.0.\n * Upgraded json gem to 2.5.1.\n * Upgraded kgio gem to 2.11.3.\n * Upgraded mysql2 gem to 0.5.3.\n * Upgraded nokogiri gem to 1.10.10.\n    - On macOS: upgraded libxml2 to 2.9.10.\n    - On macOS: upgraded libxslt to 1.1.34.\n * Upgraded nokogumbo gem to 1.5.0.\n * Upgraded pg gem to 1.2.3.\n    - Upgraded libpq to 13.1.\n * Upgraded posix-spawn gem 0.3.15.\n * Upgraded puma gem to 5.1.1\n * Upgraded raindrops gem to 0.19.1.\n * Upgraded redcarpet gem to 3.5.1.\n * Upgraded RedCloth gem to 4.3.2.\n * Upgraded rugged gem to 1.1.0.\n * Upgraded sqlite3 gem to 1.4.2.\n    - Upgraded libsqlite3 to 2020-3340000.\n * Upgraded thin gem to 1.8.0.\n * Upgraded unf\\_ext gem to 0.0.7.7.\n * Upgraded unicorn gem to 5.8.0.\n * Upgraded yajl-ruby gem to 1.4.1.\n * Dropped github-markdown gem.\n\n## Version 20150715\n\nUpgrading to this version is strongly recommended because of the OpenSSL upgrade, which fixes some security vulnerabilities!\n\n * Upgraded to OpenSSL 1.0.2d.\n\n## Version 20150517\n\n * The Ruby versions that we now support are: 2.1.6 and 2.2.2.\n * Added additional native extensions: puma, unicorn, kgio, raindrops, fast-stemmer, hitimes, redcarpet, snappy, curses.\n * Upgraded bundler gem to version 1.9.9.\n * Upgraded mysql2 gem to version 0.3.11.\n * Upgraded pg gem to version 0.18.2.\n * Upgraded bundler gem to version 1.9.9.\n * The sqlite3, pg, rugged and charlock_holmes gems are now smaller because they are now compiled with better compiler optimizations. The total reduction of all these gems together is 4 MB uncompressed.\n\n## Version 20150210\n\n * Added support for Ruby 2.2.0. Version 2.1.5 and 2.2.0 are supported in parallel for the time being.\n * Added support for creating Windows packages. But there are currently a number of caveats:\n   - Traveling Ruby supports creating packages *for* Windows, but it does not yet support creating packages *on* Windows. That is, the Traveling Ruby tutorials and the documentation do not work when you are a Ruby developer on Windows. To create Windows packages, you must use OS X or Linux.\n\n     This is because in our documentation we make heavy use of standard Unix tools. Tools which are not available on Windows. In the future we may replace the use of such tools with Ruby tools so that the documentation works on Windows too.\n   - Only Ruby 2.1.5 is supported for Windows, not 2.2.0. This is because [the RubyInstaller project](http://rubyinstaller.org/) hasn't released Ruby 2.2.0 binaries yet.\n * Fixed a problem with the 'rugged' native extension on Linux. Closes GH-33.\n * Fixed a problem with the 'charlock_holmes' native extension on Linux. Closes GH-34.\n * Header files are no longer packaged. This saves 256 KB.\n * RDoc and various unnecessary Bundler files have been removed. This saves about 1.2 MB.\n * Upgraded Bundler to 1.7.12.\n\n## Version 20150204\n\n * Added additonal native extension versions:\n   - bcrypt 3.1.10\n   - eventmachine 1.0.6\n   - json 1.8.2\n   - mini_portile 0.6.2\n   - nokogiri 1.6.6.2\n   - sqlite3 1.3.10\n   - nokogumbo 1.2.0\n   - rugged 0.22.0b5\n\n## Version 20150130\n\nUpgrading to this version is strongly recommended because of the OpenSSL upgrade, which fixes some security vulnerabilities!\n\n * Added the following native extension gems: RedCloth, escape_utils, posix-spawn, nokogumbo, github-markdown, rugged, charlock_holmes, unf_ext.\n * Upgraded to OpenSSL 1.0.1l.\n * The Linux version and the OS X version now use the same CA root certificates. Closes GH-24.\n\n## Version 20141224\n\n * Fixed the mysql2 native extension not working on Linux. This is done by dynamically linking against libstdc++. Closes GH-21.\n * Added the eventmachine and thin native extension gems.\n\n## Version 20141219\n\n * Removed header files. This makes the package 100 KB smaller.\n * Removed the sdbm extension because almost nobody uses it. The sqlite3 gem is almost always a better choice anyway.\n * Added the yajl-ruby native extension gem.\n\n## Version 20141215\n\n * The Linux packages now include libffi.so.6, which was forgotten in the previous release. Closes GH-16.\n\n## Version 20141213\n\n * Further removed unnecessary files. The Ruby binary packages were about 10 MB before. They are now about 6 MB.\n * Supports native extensions.\n\n## Version 20141209\n\n * Fixed inclusion of Bundler.\n\n## Version 20141206\n\n * Initial release.\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.2177734375,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project owner:\n\n[FooBarWidget](https://github.com/FooBarWidget) (Hongli Lai), honglilai@gmail.com, English / Dutch\n\nThe project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.56640625,
          "content": "# Contributors Guide\n\n**Table of contents**\n\n * [Filing bug reports](#file_bugs)\n * [Contributing documentation](#contrib_docs)\n * [Contributing by bug triaging](#contrib_triag)\n * [Contributing community support](#contrib_support)\n * [Contributing code](#contrib_code)\n * [Pull requests](#pull_requests)\n\nThank you for your interest in Traveling Ruby - a [Phusion Passenger](https://www.phusionpassenger.com/) supported project. Traveling Ruby is open source and welcomes contributions. This guide gives you an overview of the ways with which you can contribute, as well as contribution guidelines.\n\nYou can contribute in one of the following areas:\n\n * Filing bugs.\n * Bug triage.\n * Documentation (user documentation, developer documentation, contributor documentation).\n * Community support.\n * Code.\n\nPlease submit patches in the form of a Github pull request.\n\n<a name=\"file_bugs\"></a>\n## Filing bug reports\n\nWhen filing a bug report, please ensure that you include the following information:\n\n * What steps will reproduce the problem?\n * What is the expected output? What do you see instead?\n * What does your environment looks like (operating system, language, configuration, infrastructure)\n\n For a more detailed guide, please refer to our [issue template](https://github.com/FooBarWidget/traveling-ruby/blob/main/issue_template.md).\n\n<a name=\"contrib_docs\"></a>\n## Contributing documentation\n\nDocumentation and tutorials can be found in the README for this project.\n\n<a name=\"contrib_tiag\"></a>\n## Contributing by bug triaging\n\nUsers [file bug reports](https://github.com/FooBarWidget/traveling-ruby/issues) on a regular basis, but not all bug reports contain sufficient information, persist with new releases, are equally important, etc. By helping with bug triaging you make the lives of the core developers a lot easier.\n\nTo start contributing, please submit a comment on any bug report that needs triaging. This comment should contain triaging instructions, e.g. whether a report should be considered duplicate. If you contribute regularly we'll give you moderator access to the bug tracker so that you can apply triaging labels directly.\n\nHere are some of the things that you should look for:\n\n * Some reports are duplicates of each other, i.e. they report the same issue. You should mark them as duplicate and note the ID of the original report.\n * Some reported problems are caused by the reporter's machine or the reporter's application. You should explain to them what the problem actually is, that it's not caused by Traveling Ruby, and then close the report.\n * Some reports need more information. At the very least, we need specific instructions on how to reproduce the problem. You should ask the reporter to provide more information. Some reporters reply slowly or not at all. If some time has passed, you should remind the reporter about the request for more information. But if too much time has passed and the issue cannot be reproduced, you should close the report and mark it as \"Stale\".\n * Some bug reports seem to be limited to one reporter, and it does not seem that other people suffer from the same problem. These are reports that need _confirmation_. You can help by trying to reproduce the problem.\n * Some reports are important, but have been neglected for too long. Although the core developers try to minimize the number of times this happens, sometimes it happens anyway because they're so busy. You should actively ping the core developers and remind them about it. Or better: try to actively find contributors who can help solving the issue.\n\n**Always be polite to bug reporters.** Not all reporters are fluent in English, and not everybody may be tech-savvy. But we ask you for your patience and tolerance. We want to stimulate a positive and enjoyable environment.\n\n<a name=\"contrib_support\"></a>\n## Contributing community support\n\nYou can contribute by answering support questions on [Stack Overflow](https://stackoverflow.com/search?tab=newest&q=traveling%20ruby).\n\n<a name=\"contrib_code\"></a>\n##Contributing code\n\nTraveling Ruby is mostly written in Shell, but makes use of Ruby gems and environment files and includes Ruby build scripts. The source code is filled with inline comments, so look there if you want to understand how things work.\n\n<a name=\"pull_requests\"></a>\n## Pull Requests\n\nPull requests should normally be submitted against the latest stable branch (e.g. main), because once tested & accepted, we want users to benefit from the work as soon as possible.\n\nFor more information, please refer to our [template for Pull Requests](https://github.com/FooBarWidget/traveling-ruby/blob/main/pull_request_template.md).\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.0234375,
          "content": "Copyright (c) 2014-2021\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 16.74609375,
          "content": "# Traveling Ruby: self-contained, portable Ruby binaries\n\n![](https://openclipart.org/image/300px/svg_to_png/181225/Travel_backpacks.png)\n\nTraveling Ruby is a project which supplies self-contained, \"portable\" Ruby binaries: Ruby binaries that can run on any Linux distribution and any macOS machine. It also has Windows support [(with some caveats)](#caveats). This allows Ruby app developers to bundle these binaries with their Ruby app, so that they can distribute a single package to end users, without needing end users to first install Ruby or gems.\n\n[![](https://raw.githubusercontent.com/FooBarWidget/traveling-ruby/main/doc/video.png)](https://vimeo.com/phusionnl/review/113827942/ceca7e70da)\n\n_Introduction in 2 minutes_\n\n## Motivation\n\nRuby is one of our favorite programming languages. Most people use it for web development, but Ruby is so much more. I've been using Ruby for years for writing sysadmin automation scripts, developer command line tools and more. [Heroku's Toolbelt](https://toolbelt.heroku.com/) and [Chef](https://www.chef.io/) have also demonstrated that Ruby is an excellent language for these sorts of things.\n\nHowever, distributing such Ruby apps to inexperienced end users or non-Ruby-programmer end users is problematic. If users have to install Ruby first, or if they have to use RubyGems, [they can easily run into problems](#end_user_problems). Even if they already have Ruby installed, they [can still run into problems](#end_user_problems), e.g. by having the wrong Ruby version installed. The point is, it's a very real problem that [could harm your reputation](#end_user_problems).\n\nOne solution is to build OS-specific installation packages, e.g. DEBs, RPMs, .pkgs, etc. However, this has two disadvantages:\n\n 1. It requires a lot of work. You not only have to build separate packages for each OS, but also each OS *version*. And in the context of Linux, you have to treat each distribution as another OS, further increasing the number of combinations. Suppose that you want to support ~2 versions of CentOS/RHEL, ~2 versions of Debian, ~3 versions of Ubuntu, ~2 recent macOS releases. You'll have to create `2 + 2 + 3 + 2 = 9` packages.\n 2. Because you typically cannot build an OS-specific installation package using anything but that OS, you need heavyweight tooling, e.g. a fleet of VMs. For example, you can only build Ubuntu 18.04 DEBs on Ubuntu 18.04; you cannot build them from your macOS developer laptop.\n\nThis is exactly the approach that Chef has chosen. They built [Omnibus](https://github.com/opscode/omnibus), an automation system which spawns an army of VMs for building platform-specific packages. It works, but it's heavyweight and a big hassle. You need a big build machine for that if you want to have reasonable build time. And be prepared to make 20 cups of coffee.\n\nBut there is another &mdash; much simpler &mdash; solution.\n\n### Way of the Traveling Ruby\n\nThe solution that Traveling Ruby advocates, is to distribute your app as a single self-contained tar.gz/zip package that already includes a precompiled Ruby interpreter for a specific platform (that the Traveling Ruby project provides), as well as all gems that your app depends on. This eliminates the need for heavyweight tooling:\n\n * A tar.gz/zip file can be created on any platform using small and simple tools.\n * You can create packages for any OS, regardless of which OS you are using.\n\nThis makes the release process much simpler. Instead of having to create almost 10 packages using a fleet of VMs, you just create 3 packages quickly and easily from your developer laptop. These 3 packages cover all the major platforms that your end users are on:\n\n * Linux x86\\_64.\n * macOS.\n * Windows. But see [the Windows-specific caveats](#caveats).\n\nHowever, distributing a precompiled Ruby interpreter that works for all end users, is more easily said than done. [Read this section](#why_precompiled_binary_difficult) to learn why it's difficult.\n\nTraveling Ruby aims to solve the problem of supplying precompiled **Ruby 2.4** binaries that work for all end users.\n\n## Getting started\n\nBegin with the tutorials:\n\n * [Tutorial 1: hello world](TUTORIAL-1.md) - Learn in 5 minutes how to create self-contained packages of a hello world app without gem dependencies.\n * [Tutorial 2: gem dependencies](TUTORIAL-2.md) - Managing and packaging gem dependencies using Bundler.\n * [Tutorial 3: native extensions](TUTORIAL-3.md) - Managing and packaging native extension gems.\n * [Tutorial 4: creating packages for Windows](TUTORIAL-4.md) - Creating packages for Windows users.\n\nOnce you've finished the tutorials, read the guides for intermediate to advanced topics:\n\n * [Reducing the size of your Traveling Ruby packages](REDUCING_PACKAGE_SIZE.md)\n\nThere are also some real-world examples of how people used Traveling Ruby to package their Ruby tools:\n\n * **BOSH (release engineering tool)**<br>\n   [Blog post](https://blog.starkandwayne.com/2014/12/24/traveling-bosh-cli-no-more-installation-pain/) | [Github repo](https://github.com/cloudfoundry-community/traveling-bosh)\n * **Elasticrawl (AWS Elastic MapReduce job runner)**<br>\n   [Blog post](https://rossfairbanks.com/2015/01/13/packaging-elasticrawl-using-traveling-ruby.html) | [Github repo](https://github.com/rossf7/traveling-elasticrawl)\n * **VirtKick (cloud web panel)**<br>\n   [Github repo](https://github.com/virtkick/virtkick-webapp)\n * **Octodown (Github markdown preview tool)**<br>\n   [Github repo](https://github.com/ianks/octodown) | [Traveling Ruby issue](https://github.com/ianks/octodown/issues/29) | [Traveling Ruby pull request](https://github.com/ianks/octodown/pull/38)\n * **WebAirplay (local webapp to send videos to airplay devices)**<br>\n   [Github repo](https://github.com/antulik/web-airplay)\n\n<a name=\"caveats\"></a>\n\n## Caveats\n\nNative extensions:\n\n * Traveling Ruby only supports native extensions when creating Linux and OS X packages. Native extensions are currently not supported when creating Windows packages.\n * Traveling Ruby only supports a number of popular native extension gems, and only in some specific versions. You cannot use just any native extension gem.\n * Native extensions are covered in [tutorial 3](TUTORIAL-3.md).\n\nWindows support:\n\n * Traveling Ruby supports creating packages *for* Windows, but it does not yet support creating packages *on* Windows. That is, the Traveling Ruby tutorials and the documentation do not work when you are a Ruby developer on Windows. To create Windows packages, you must use macOS or Linux.\n\n   This is because in our documentation we make heavy use of standard Unix tools. Tools which are not available on Windows. In the future we may replace the use of such tools with Ruby tools so that the documentation works on Windows too.\n * Traveling Ruby currently supports Ruby 2.4.10.\n * Native extensions are not yet supported.\n\n## Building binaries\n\nThe Traveling Ruby project supplies binaries that application developers can use. These binaries are built using the build systems in this repository. As an application developer, you do not have to use the build system. You only have to use the build systems when contributing to Traveling Ruby, when trying to reproduce our binaries, or when you want to customize the binaries.\n\nFor the Linux build system, see [linux/README.md](linux/README.md).\n\nFor the macOS build system, see [osx/README.md](osx/README.md).\n\n## Future work\n\n * Provide a Rails example.\n * Native extensions support for Windows.\n * Document the Windows build system.\n * Support for creating a single executable instead of a directory.\n * Draw inspiration from [enclose.io](http://enclose.io/)/[ruby-packer](https://github.com/pmq20/ruby-packer). See [this Hacker News comment](https://news.ycombinator.com/item?id=18056048) for my comparison analysis.\n\n## FAQ\n\n<a name=\"why_precompiled_binary_difficult\"></a>\n\n### Why it is difficult to supply a precompiled Ruby interpreter that works for all end users?\n\nChances are that you think that you can compile a Ruby binary on a certain OS, and that users using that same OS can use your Ruby binary. Not quite. Not even when they run the same OS *version* as you do.\n\nBasically, there are two problems that can prevent a binary from working on another system:\n\n 1. Libraries that your binary depends on, may not be available on the user's OS.\n    * When compiling Ruby, you might accidentally introduce a dependency on a non-standard library! As a developer you probably have all sorts non-standard libraries installed on your system. While compiling Ruby, the Ruby build system autodetects certain libraries and links to them.\n    * Even different versions of the same OS ship with different libraries! You cannot count on a certain library from an older OS version, to be still available on a newer version of the same OS.\n 2. On Linux, there are issues with glibc symbols. This is a little more complicated, so read on.\n\nAssuming that your binary doesn't use *any* libraries besides the C standard library, binaries compiled on a newer Linux system usually do not work on an older Linux system, even if you do not use newer APIs. This is because of glibc symbols. Each function in glibc - or symbol as C/C++ programmers call it - actually has multiple versions. This allows the glibc developers to change the behavior of a function without breaking backwards compatibility with apps that happen to rely on bugs or implementation-specific behavior. During the linking phase, the linker \"helpfully\" links against the most recent version of the symbol. The thing is, glibc introduces new symbol versions very often, resulting in binaries that will most likely depend on a recent glibc.\n\nThere is no way to tell the compiler and linker to use older symbol versions unless you want to manually specify the version for each and every symbol, which is an undoable task.\n\nThe only sane way to get around the glibc symbol problem, and to prevent accidental linking to unwanted libraries, is to create a tightly controlled build environment. On Linux, this build environment with come with an old glibc version. This tightly controlled build environment is sometimes called a [\"holy build box\"](http://FooBarWidget.github.io/holy-build-box/).\n\nThe Traveling Ruby project provides such a holy build box.\n\n#### Why not just statically link the Ruby binary?\n\nFirst of all: easier said than done. The compiler prefers to link to dynamic libraries. You have to hand-edit lots of Makefiles to make everything properly link statically. You can't just add `-static` as compiler flag and expect everything to work.\n\nSecond: Ruby is incompatible with static linking. On Linux systems, executables which are statically linked to the C library cannot dynamically load shared libraries. Yet Ruby extensions are shared libraries, and a Ruby interpreter that cannot load Ruby extensions is heavily crippled.\n\nSo in Traveling Ruby we've taken a different approach. Our Ruby binaries are dynamically linked against the C library, but only uses old symbols to avoid glibc symbol problems. We also ship carefully-compiled versions of dependent shared libraries, like OpenSSL, ncurses, libedit, etc.\n\n<a name=\"end_user_problems\"></a>\n\n### Why is it problematic for end users if I don't bundle a Ruby interpreter?\n\nFirst of all, users just want to run your app as quickly as possible. Requiring them to install Ruby first is not only a distraction, but it can also cause problems. Here are a few examples of such problems:\n\n * There are various ways to install Ruby, e.g. by compiling from source, by using `apt-get` and `yum`, by using RVM/rbenv/chruby, etc. The choices are obvious to us, but users could get confused by the sheer number of choices. Worse: not all choices are good. APT and YUM often provide old versions of Ruby, which may not be the one that you want. Compiling from source and using rbenv/chruby requires the user to have a compiler toolchain and appropriate libraries pre-installed. How should they know what to pre-install before they can install Ruby? The Internet is filled with a ton of old and outdated tutorials, further increasing their confusion.\n * Users could install Ruby incorrectly, e.g. to a location that isn't in PATH. They could then struggle with \"command not found\" errors. PATH is obvious to us, but there are a lot of users out there can barely use the command line. We shouldn't punish them for lack of knowledge, they are end users after all.\n\nOne way to solve this is for you to \"hold the user's hand\", by going through the trouble of supplying 4 or 5 different platform-specific installation instructions for installing Ruby. These instructions must be continuously kept up-to-date. That's a lot of work and QA on your part, and I'm sure you just want to concentrate on building your app.\n\nAnd let's for the sake of argument suppose that the user somehow has Ruby correctly installed. They still need to install your app. The most obvious way to do that is through RubyGems. But that will open a whole new can of worms:\n\n * On some OSes, RubyGems is configured in such a way that the RubyGems-installed commands are not in PATH. For a classic example, try running this on Debian 6:\n\n        $ sudo apt-get install rubygems\n        $ sudo gem install rails\n        $ rails new foo\n        bash: rails: command not found\n\n   Not a good first impression for end users.\n * Depending on how Ruby is installed, you may or may not have to run `gem install` with `sudo`. It depends on whether `GEM_HOME` is writable by the current user or not. You can't tell them \"always run with sudo\", because if their `GEM_HOME` is in their home directory, running `gem install` with sudo will mess up all sorts of permissions.\n * Did I just mention `sudo`? No, because `sudo` by default resets a lot of environment variables. Environment variables which may be important for Ruby to work.\n   - If the user installed Ruby with RVM, then the user has to run `rvmsudo` instead of sudo. RVM is implemented by setting `PATH`, `RUBYLIB`, `GEM_HOME` and other environment variables. rvmsudo is a wrapper around sudo which preserves these environment variables.\n   - If the user installed Ruby with rbenv or chruby... pray that they know what they're doing. Rbenv and chruby also require correct `PATH`, `RUBYLIB`, `GEM_HOME` etc to be set to specific values, but they provide no rvmsudo-like tool for preserving them after taking sudo access. So if you want to be user-friendly, you have to write documentation that tells users to sudo to a bash shell first, fix their `PATH`, `RUBYLIB` etc, and *then* run `gem install`.\n\nThe point is, there's a lot of opportunity for end users to get stuck, confused and frustrated. You can deal with all these problems by supplying excellent documentation that handles all of these cases (and probably more, because there are infinite ways to break things). That's exactly what we've done for [Phusion Passenger](https://www.phusionpassenger.com). Our [RubyGems installation instructions](https://www.phusionpassenger.com/documentation/Users%20guide%20Nginx.html#rubygems_generic_install) spell out exactly how to install Ruby for each of the major operating systems, how to find out whether they need to run `gem install` with sudo, how to find out whether they need to run rvmsudo instead of sudo. It has been a lot of work, and even then we still haven't covered all the cases. We're still lacking documentation on what rbenv and chruby users should do. Right now, rbenv/chruby users regularly contact our community discussion forum about installation problems related to sudo access and environment variables.\n\nOr you can just use Traveling Ruby and be done with it. We can't do it for Phusion Passenger because by its very nature it has to work with an already-installed Ruby, but maybe you can for writing your next command line tool.\n\n#### The problems sound hypothetical. Is it really that big of a deal for end users?\n\nYes. These problems can put off your users from installing your app at all and can give you a bad reputation. Especially Chef has suffered a lot from this. A lot of people have had bad experience in the past with installing Chef through RubyGems. Chef has solved this problem for years by supplying platform-specific packages for years (DEBs, RPMs, etc), but the reputation stuck: there are still people out there who shun Chef because they think they have to install Ruby and use RubyGems.\n\n#### I target macOS, which already ships Ruby. Should I still bundle a Ruby interpreter?\n\nYes. Different macOS versions ship different Ruby versions. There can be significant compatibility differences between even minor Ruby versions. One of the biggest issues is the [keyword argument changes](https://juanitofatas.com/ruby-3-keyword-arguments) introduced in Ruby 2.7 and later. Only by bundling Ruby can you be sure that OS upgrades won't break your app.\n\n<a name=\"windows_support\"></a>\n\n### Does Traveling Ruby support Windows?\n\n[Yes](TUTORIAL-4.md), but with some [caveats](#caveats).\n\n### How big is a hello world packaged with Traveling Ruby?\n\nIt's about 6 MB compressed.\n"
        },
        {
          "name": "REDUCING_PACKAGE_SIZE.md",
          "type": "blob",
          "size": 4.76953125,
          "content": "# Reducing the size of your Traveling Ruby packages\n\nPackages generated by Traveling Ruby can be large, but you can reduce the size of your packages by many megabytes by removing unnecessary files.\n\n## Typically removable files\n\nYou can typically safely remove the following files:\n\n\n    # Remove tests\n    rm -rf lib/vendor/ruby/*/gems/*/test\n    rm -rf lib/vendor/ruby/*/gems/*/tests\n    rm -rf lib/vendor/ruby/*/gems/*/spec\n    rm -rf lib/vendor/ruby/*/gems/*/features\n    rm -rf lib/vendor/ruby/*/gems/*/benchmark\n\n    # Remove documentation\n    rm -f lib/vendor/ruby/*/gems/*/README*\n    rm -f lib/vendor/ruby/*/gems/*/CHANGE*\n    rm -f lib/vendor/ruby/*/gems/*/Change*\n    rm -f lib/vendor/ruby/*/gems/*/COPYING*\n    rm -f lib/vendor/ruby/*/gems/*/LICENSE*\n    rm -f lib/vendor/ruby/*/gems/*/MIT-LICENSE*\n    rm -f lib/vendor/ruby/*/gems/*/TODO\n    rm -f lib/vendor/ruby/*/gems/*/*.txt\n    rm -f lib/vendor/ruby/*/gems/*/*.md\n    rm -f lib/vendor/ruby/*/gems/*/*.rdoc\n    rm -rf lib/vendor/ruby/*/gems/*/doc\n    rm -rf lib/vendor/ruby/*/gems/*/docs\n    rm -rf lib/vendor/ruby/*/gems/*/example\n    rm -rf lib/vendor/ruby/*/gems/*/examples\n    rm -rf lib/vendor/ruby/*/gems/*/sample\n    rm -rf lib/vendor/ruby/*/gems/*/doc-api\n    find lib/vendor/ruby -name '*.md' | xargs rm -f\n\n    # Remove misc unnecessary files\n    rm -rf lib/vendor/ruby/*/gems/*/.gitignore\n    rm -rf lib/vendor/ruby/*/gems/*/.travis.yml\n\n    # Remove leftover native extension sources and compilation objects\n    rm -f lib/vendor/ruby/*/gems/*/ext/Makefile\n    rm -f lib/vendor/ruby/*/gems/*/ext/*/Makefile\n    rm -f lib/vendor/ruby/*/gems/*/ext/*/tmp\n    find lib/vendor/ruby -name '*.c' | xargs rm -f\n    find lib/vendor/ruby -name '*.cpp' | xargs rm -f\n    find lib/vendor/ruby -name '*.h' | xargs rm -f\n    find lib/vendor/ruby -name '*.rl' | xargs rm -f\n    find lib/vendor/ruby -name 'extconf.rb' | xargs rm -f\n    find lib/vendor/ruby/*/gems -name '*.o' | xargs rm -f\n    find lib/vendor/ruby/*/gems -name '*.so' | xargs rm -f\n    find lib/vendor/ruby/*/gems -name '*.bundle' | xargs rm -f\n\n    # Remove Java files. They're only used for JRuby support\n    find lib/vendor/ruby -name '*.java' | xargs rm -f\n    find lib/vendor/ruby -name '*.class' | xargs rm -f\n\n## Removing gem-specific files\n\nDepending on which gems you use, there may be more files that you can remove.\n\nWhat I typically do is to run `find lib/vendor/ruby/*/gems | less` to inspect which files exist, and try to identify the files that I think can be removed.\n\nTo focus on non-Ruby files, I run `find lib/vendor/ruby/*/gems -type f | grep -v '.rb$' | less` which filters out all .rb files.\n\nHere are a few examples:\n\n * Many gems that contain a Rakefile only need those Rakefiles for the purpose of developing those gems. In many cases, you can safely remove those Rakefiles without impacting your application. In a similar fashion, the `task` directory within those gems (which typically contain further Rake tasks) can also be removed.\n * The `nokogori` gem contains the `suppressions` directory. This directory contains Valgrind suppression files, so if you never use Valgrind (which is very likely) then you can remove that directory too.\n * The `nokogori` gem also contains the `ports` directory. This directory is only used during compilation of the native extension, so it can be removed.\n * The `rack` gem contains a `contrib` directory which appears to be only relevant for documentation purposes, so it too can be removed.\n * The `rugged` gem contains a `vendor` directory which contains the libgit2 source code, but this directory is only used during compilation of the native extension, so it can be safely removed.\n\nWhen in doubt, you should inspect the gem's source code to check how a file is used and whether you can remove it.\n\n## Removing seldomly used encodings\n\nRuby support many encodings that are seldomly used. Most applications only use ASCII and UTF-8. But Ruby also supports UTF-16, UTF-32, various Chinese, Japanese and Korean encodings, etc. Usually you can get rid of everything besides ASCII and UTF-8:\n\n    rm -f lib/ruby/lib/ruby/*/*/enc/cp949*\n    rm -f lib/ruby/lib/ruby/*/*/enc/euc_*\n    rm -f lib/ruby/lib/ruby/*/*/enc/shift_jis*\n    rm -f lib/ruby/lib/ruby/*/*/enc/koi8_*\n    rm -f lib/ruby/lib/ruby/*/*/enc/emacs*\n    rm -f lib/ruby/lib/ruby/*/*/enc/gb*\n    rm -f lib/ruby/lib/ruby/*/*/enc/big5*\n    rm -f lib/ruby/lib/ruby/*/*/enc/windows*\n    rm -f lib/ruby/lib/ruby/*/*/enc/utf_16*\n    rm -f lib/ruby/lib/ruby/*/*/enc/utf_32*\n\nVery few applications need support for transcoding strings from one encoding to another, besides ASCII and UTF-8. You can get rid of transcoding support as follows:\n\n    rm -rf lib/ruby/lib/ruby/*/*/enc/trans\n\n## Removing RDoc\n\nMost likely your application does not need RDoc during runtime. You can remove that as follows:\n\n    rm -rf lib/ruby/lib/ruby/*/rdoc*\n"
        },
        {
          "name": "RUBY_VERSIONS.txt",
          "type": "blob",
          "size": 0.0068359375,
          "content": "2.4.10\n"
        },
        {
          "name": "TUTORIAL-1.md",
          "type": "blob",
          "size": 8.7041015625,
          "content": "# Tutorial 1: hello world\n\nThis tutorial teaches you, in 5 minutes, how to use Traveling Ruby to create self-contained packages of a hello world app. This app has no gem dependencies; dependency management is covered in [tutorial 2](TUTORIAL-2.md). We will be creating three packages, namely for Linux x86, Linux x86_64 and OS X.\n\nThis tutorial **does not cover Windows**. This tutorial [will not work on Windows](README.md#caveats); nor will this tutorial generate packages for Windows. The creation of packages for Windows is covered in [tutorial 4](TUTORIAL-4.md).\n\nThe process is as follows. First, you create several package directories (one for each target platform) and copy your app into the directory. Then you extract Traveling Ruby binaries into each directory, appropriate for that platform. Then you write a wrapper script so that users can conveniently start your app. Finally, you package everything up in tar.gz files, and automate the process.\n\nYou can find the end result of this tutorial at https://github.com/phusion/traveling-ruby-hello-demo.\n\nThe final hello world package weights 6 MB compressed.\n\n## Preparation\n\nLet's begin by creating a hello world app:\n\n```Bash\nmkdir hello_app\ncd hello_app\necho '#!/usr/bin/env ruby' > hello.rb\necho 'puts \"hello world\"' >> hello.rb\nruby hello.rb\n# => hello world\n```\n\n## Creating package directories\n\nThe next step is to prepare packages for all the target platforms, by creating a directory each platform, and by copying your app into each directory.\n\n```Bash\nmkdir -p hello-1.0.0-linux-x86/lib/app\ncp hello.rb hello-1.0.0-linux-x86/lib/app/\n\nmkdir -p hello-1.0.0-linux-x86_64/lib/app\ncp hello.rb hello-1.0.0-linux-x86_64/lib/app/\n\nmkdir -p hello-1.0.0-osx/lib/app/\ncp hello.rb hello-1.0.0-osx/lib/app/\n```\n\nNext, create a `packaging` directory and download Traveling Ruby binaries for each platform into that directory. Then extract these binaries into each packaging directory. You can find a list of binaries at [the Traveling Ruby Amazon S3 bucket](https://traveling-ruby.s3-us-west-2.amazonaws.com/list.html). For faster download times, use the CloudFront domain \"https://d6r77u77i8pq3.cloudfront.net\". In this tutorial we're extracting version 20141215-2.1.5.\n\n```Bash\nmkdir packaging\ncd packaging\ncurl -L -O --fail https://d6r77u77i8pq3.cloudfront.net/releases/traveling-ruby-20141215-2.1.5-linux-x86.tar.gz\ncurl -L -O --fail https://d6r77u77i8pq3.cloudfront.net/releases/traveling-ruby-20141215-2.1.5-linux-x86_64.tar.gz\ncurl -L -O --fail https://d6r77u77i8pq3.cloudfront.net/releases/traveling-ruby-20141215-2.1.5-osx.tar.gz\ncd ..\n\nmkdir hello-1.0.0-linux-x86/lib/ruby && tar -xzf packaging/traveling-ruby-20141215-2.1.5-linux-x86.tar.gz -C hello-1.0.0-linux-x86/lib/ruby\nmkdir hello-1.0.0-linux-x86_64/lib/ruby && tar -xzf packaging/traveling-ruby-20141215-2.1.5-linux-x86_64.tar.gz -C hello-1.0.0-linux-x86_64/lib/ruby\nmkdir hello-1.0.0-osx/lib/ruby && tar -xzf packaging/traveling-ruby-20141215-2.1.5-osx.tar.gz -C hello-1.0.0-osx/lib/ruby\n```\n\nNow, each package directory will have Ruby binaries included. It looks like this:\nYour directory structure will now look like this:\n\n    hello_app/\n     |\n     +-- hello.rb\n     |\n     +-- hello-1.0.0-linux-x86/\n     |   |\n     |   +-- lib/\n     |       +-- app/\n     |       |   |\n     |       |   +-- hello.rb\n     |       |\n     |       +-- ruby/\n     |           |\n     |           +-- bin/\n     |           |   |\n     |           |   +-- ruby\n     |           |   +-- ...\n     |           +-- ...\n     |\n     +-- hello-1.0.0-linux-x86_64/\n     |   |\n     |  ...\n     |\n     +-- hello-1.0.0-osx/\n         |\n        ...\n\n### Quick sanity testing\n\nLet's do a basic sanity test by running your app with a bundled Ruby interpreter. Suppose that you are developing on OS X. Run this:\n\n```Bash\ncd hello-1.0.0-osx\n./lib/ruby/bin/ruby lib/app/hello.rb\n# => hello world\ncd ..\n```\n\n## Creating a wrapper script\n\nNow that you've verified that the bundled Ruby interpreter works, you'll want create a *wrapper script*. After all, you don't want your users to run `/path-to-your-app/lib/ruby/bin/ruby /path-to-your-app/lib/app/hello.rb`. You want them to run `/path-to-your-app/hello`.\n\nHere's what a wrapper script could look like:\n\n```Bash\n#!/bin/bash\nset -e\n\n# Figure out where this script is located.\nSELFDIR=\"`dirname \\\"$0\\\"`\"\nSELFDIR=\"`cd \\\"$SELFDIR\\\" && pwd`\"\n\n# Run the actual app using the bundled Ruby interpreter.\nexec \"$SELFDIR/lib/ruby/bin/ruby\" \"$SELFDIR/lib/app/hello.rb\" \"$@\"\n```\n\nSave this file as `packaging/wrapper.sh` in your project's root directory. Then you can copy it to each of your package directories and name it `hello`:\n\n```Bash\neditor packaging/wrapper.sh\n...edit the file as per above...\nchmod +x packaging/wrapper.sh\ncp packaging/wrapper.sh hello-1.0.0-linux-x86/hello\ncp packaging/wrapper.sh hello-1.0.0-linux-x86_64/hello\ncp packaging/wrapper.sh hello-1.0.0-osx/hello\n```\n\n## Finalizing packages\n\nYour package directories are now ready. You can finalize the packages by packaging up all these directories using tar:\n\n```Bash\ntar -czf hello-1.0.0-linux-x86.tar.gz hello-1.0.0-linux-x86\ntar -czf hello-1.0.0-linux-x86_64.tar.gz hello-1.0.0-linux-x86_64\ntar -czf hello-1.0.0-osx.tar.gz hello-1.0.0-osx\nrm -rf hello-1.0.0-linux-x86\nrm -rf hello-1.0.0-linux-x86_64\nrm -rf hello-1.0.0-osx\n```\n\nCongratulations, you have created packages using Traveling Ruby!\n\nAn x86 Linux user could now use your app like this:\n\n 1. The user downloads `hello-1.0.0-linux-x86.tar.gz`.\n 2. The user extracts this file.\n 3. The user runs your app:\n\n```Bash\n/path-to/hello-1.0.0-linux-x86/hello\n# => hello world\n```\n\n## Automating the process using Rake\n\nGoing through all of the above steps on every release is a hassle, so you should automate the packaging process, for example by using Rake. Here's how the Rakefile could look like:\n\n```Ruby\nPACKAGE_NAME = \"hello\"\nVERSION = \"1.0.0\"\nTRAVELING_RUBY_VERSION = \"20150210-2.1.5\"\n\ndesc \"Package your app\"\ntask :package => ['package:linux:x86', 'package:linux:x86_64', 'package:osx']\n\nnamespace :package do\n  namespace :linux do\n    desc \"Package your app for Linux x86\"\n    task :x86 => \"packaging/traveling-ruby-#{TRAVELING_RUBY_VERSION}-linux-x86.tar.gz\" do\n      create_package(\"linux-x86\")\n    end\n\n    desc \"Package your app for Linux x86_64\"\n    task :x86_64 => \"packaging/traveling-ruby-#{TRAVELING_RUBY_VERSION}-linux-x86_64.tar.gz\" do\n      create_package(\"linux-x86_64\")\n    end\n  end\n\n  desc \"Package your app for OS X\"\n  task :osx => \"packaging/traveling-ruby-#{TRAVELING_RUBY_VERSION}-osx.tar.gz\" do\n    create_package(\"osx\")\n  end\nend\n\nfile \"packaging/traveling-ruby-#{TRAVELING_RUBY_VERSION}-linux-x86.tar.gz\" do\n  download_runtime(\"linux-x86\")\nend\n\nfile \"packaging/traveling-ruby-#{TRAVELING_RUBY_VERSION}-linux-x86_64.tar.gz\" do\n  download_runtime(\"linux-x86_64\")\nend\n\nfile \"packaging/traveling-ruby-#{TRAVELING_RUBY_VERSION}-osx.tar.gz\" do\n  download_runtime(\"osx\")\nend\n\ndef create_package(target)\n  package_dir = \"#{PACKAGE_NAME}-#{VERSION}-#{target}\"\n  sh \"rm -rf #{package_dir}\"\n  sh \"mkdir -p #{package_dir}/lib/app\"\n  sh \"cp hello.rb #{package_dir}/lib/app/\"\n  sh \"mkdir #{package_dir}/lib/ruby\"\n  sh \"tar -xzf packaging/traveling-ruby-#{TRAVELING_RUBY_VERSION}-#{target}.tar.gz -C #{package_dir}/lib/ruby\"\n  sh \"cp packaging/wrapper.sh #{package_dir}/hello\"\n  if !ENV['DIR_ONLY']\n    sh \"tar -czf #{package_dir}.tar.gz #{package_dir}\"\n    sh \"rm -rf #{package_dir}\"\n  end\nend\n\ndef download_runtime(target)\n  sh \"cd packaging && curl -L -O --fail \" +\n    \"https://d6r77u77i8pq3.cloudfront.net/releases/traveling-ruby-#{TRAVELING_RUBY_VERSION}-#{target}.tar.gz\"\nend\n```\n\nYou can then create all 3 packages by running:\n\n```Bash\nrake package\n```\n\nYou can also create a package for a specific platform by running one of:\n\n```Bash\nrake package:linux:x86\nrake package:linux:x86_64\nrake package:osx\n```\n\nYou can also just create package directories, without creating the .tar.gz files, by passing DIR_ONLY=1:\n\n```Bash\nrake package DIR_ONLY=1\nrake package:linux:x86 DIR_ONLY=1\nrake package:linux:x86_64 DIR_ONLY=1\nrake package:osx DIR_ONLY=1\n```\n\n## End users\n\nYou now have three files which you can distribute to end users.\n\n * hello-1.0.0-linux-x86.tar.gz\n * hello-1.0.0-linux-x86_64.tar.gz\n * hello-1.0.0-osx.tar.gz\n\nSuppose the end user is on Linux x86_64. S/he uses your app by downloading `hello-1.0.0-linux-x86_64.tar.gz`, extracting it and running it:\n\n```Bash\nwget hello-1.0.0-linux-x86_64.tar.gz\n...\ntar xzf hello-1.0.0-linux-x86_64.tar.gz\ncd hello-1.0.0-linux-x86_64\n./hello\n# => hello world\n```\n\n## Conclusion\n\nYou can download the end result of this tutorial at https://github.com/phusion/traveling-ruby-hello-demo.\n\nCreating self-contained packages with Traveling Ruby is simple and straightforward. But most apps will have gem dependencies. [Read tutorial 2](TUTORIAL-2.md) to learn how to handle gem dependencies.\n"
        },
        {
          "name": "TUTORIAL-2.md",
          "type": "blob",
          "size": 9.1279296875,
          "content": "# Tutorial 2: gem dependencies\n\nIn [tutorial 1](TUTORIAL-1.md), we've packaged a hello world app and automated the process using Rake. In this tutorial, we'll continue to build on tutorial 1's sample app, by adding gem dependencies.\n\nYour app can depend on any gem you wish, subject to the [limitations described in README.md](README.md#limitations). You must include the gems in your packages, and your wrapper script must pass the right parameters to the Ruby interpreter in order for your gems to be found. In this tutorial, we'll teach you how to manage gems using Bundler.\n\nGems with native extensions are not covered in this second tutorial. They're covered in [tutorial 3](TUTORIAL-3.md).\n\nYou can find the end result of this tutorial at https://github.com/phusion/traveling-ruby-gems-demo.\n\n## Preparation\n\nSuppose that we want our hello world app from tutorial 1 to greet a random person instead of the world. We'll want to use [the Faker gem](https://github.com/stympy/faker) for that. Let's start by creating a Gemfile...\n\n```Ruby\nsource 'https://rubygems.org'\n\ngem 'faker'\n\ngroup :development do\n  gem 'rake'\nend\n```\n\n...and by modifying hello.rb as follows:\n\n```Ruby\n#!/usr/bin/env ruby\nrequire 'faker'\nputs \"hello #{Faker::Name.name}\"\n```\n\nThen install your gem bundle:\n\n```Bash\nbundle install\n```\n\nVerify that your hello world works:\n\n```Bash\nbundle exec ruby hello.rb\n# => hello Miss Susan Casper\n```\n\nThen, using the Rakefile from tutorial 1, create package directories without creating tar.gz files:\n\n```Bash\nrake package DIR_ONLY=1\n```\n\n## Installing gems for packaging\n\nIn the previous step, we used Bundler to install gems so that you can run your app during development. But you *also* need to run Bundler a second time, to install the gems that you want to include in your package. During the packaging phase, the gems installed by this second Bundler invocation will be copied into the packages.\n\nBut first, be aware that you must run this Bundler instance with the same Ruby version that you intend to package with, because Bundler installs into a directory that contains the Ruby version number. Traveling Ruby currently supports Ruby 2.1.5 and 2.2.0, but this tutorial utilizes Ruby 2.1.5. **So in this tutorial you must run Bundler with Ruby 2.1.** If you run Bundler using any other Ruby version, things will fail in a later step.\n\nSo first verify your Ruby version:\n\n```Bash\nruby -v\n# => ruby 2.1.x [...]\n```\n\nNext, install the gem bundle for packaging. We do this by copying the Gemfile to a temporary directory and running Bundler there, because passing `--path` and `--without` to Bundler will change its configuration file. We don't want to persist such changes in our development Bundler config.\n\n```Bash\nmkdir packaging/tmp\ncp Gemfile Gemfile.lock packaging/tmp/\ncd packaging/tmp\nBUNDLE_IGNORE_CONFIG=1 bundle install --path ../vendor --without development\ncd ../..\nrm -rf packaging/tmp\n```\n\nNote that we passed `--without development` so that Rake isn't installed. In the final packages there is no need to include Rake.\n\nBundler also stores various cache files, which we also don't need to package, so we remove them:\n\n```Bash\nrm -f packaging/vendor/*/*/cache/*\n```\n\n## Copying gems into package directories\n\nCopy the Bundler gem bundle that you installed in the last step, into the package directories:\n\n```Bash\ncp -pR packaging/vendor hello-1.0.0-linux-x86/lib/\ncp -pR packaging/vendor hello-1.0.0-linux-x86_64/lib/\ncp -pR packaging/vendor hello-1.0.0-osx/lib/\n```\n\nCopy over your Gemfile and Gemfile.lock into each gem directory inside the packages:\n\n```Bash\ncp Gemfile Gemfile.lock hello-1.0.0-linux-x86/lib/vendor/\ncp Gemfile Gemfile.lock hello-1.0.0-linux-x86_64/lib/vendor/\ncp Gemfile Gemfile.lock hello-1.0.0-osx/lib/vendor/\n```\n\n## Bundler config file\n\nWe must create a Bundler config file for each of the gem directories inside the packages. This Bundler config file tells Bundler that gems are to be found in the same directory that the Gemfile resides in, and that gems in the \"development\" group should not be loaded.\n\nFirst, create `packaging/bundler-config` which contains:\n\n```Bash\nBUNDLE_PATH: .\nBUNDLE_WITHOUT: development\nBUNDLE_DISABLE_SHARED_GEMS: '1'\n```\n\nThen copy the file into `.bundle` directories inside the gem directories inside the packages;\n\n```Bash\nmkdir hello-1.0.0-linux-x86/lib/vendor/.bundle\nmkdir hello-1.0.0-linux-x86_64/lib/vendor/.bundle\nmkdir hello-1.0.0-osx/lib/vendor/.bundle\n\ncp packaging/bundler-config hello-1.0.0-linux-x86/lib/vendor/.bundle/config\ncp packaging/bundler-config hello-1.0.0-linux-x86_64/lib/vendor/.bundle/config\ncp packaging/bundler-config hello-1.0.0-osx/lib/vendor/.bundle/config\n```\n\n## Wrapper script\n\nModify the wrapper script `packaging/wrapper.sh`, which we originally created in [tutorial 1](TUTORIAL-1.md). It should be modified to perform two more things:\n\n 1. It tells Bundler where your Gemfile is (and thus where the gems are).\n 2. It executes your app with Bundler activated.\n\nHere's how it looks like:\n\n```Bash\n#!/bin/bash\nset -e\n\n# Figure out where this script is located.\nSELFDIR=\"`dirname \\\"$0\\\"`\"\nSELFDIR=\"`cd \\\"$SELFDIR\\\" && pwd`\"\n\n# Tell Bundler where the Gemfile and gems are.\nexport BUNDLE_GEMFILE=\"$SELFDIR/lib/vendor/Gemfile\"\nunset BUNDLE_IGNORE_CONFIG\n\n# Run the actual app using the bundled Ruby interpreter, with Bundler activated.\nexec \"$SELFDIR/lib/ruby/bin/ruby\" -rbundler/setup \"$SELFDIR/lib/app/hello.rb\"\n```\n\nCopy over this wrapper script to each of your package directories and finalize the packages:\n\n```Bash\ncp packaging/wrapper.sh hello-1.0.0-linux-x86/hello\ncp packaging/wrapper.sh hello-1.0.0-linux-x86_64/hello\ncp packaging/wrapper.sh hello-1.0.0-osx/hello\n\ntar -czf hello-1.0.0-linux-x86.tar.gz hello-1.0.0-linux-x86\ntar -czf hello-1.0.0-linux-x86_64.tar.gz hello-1.0.0-linux-x86_64\ntar -czf hello-1.0.0-osx.tar.gz hello-1.0.0-osx\nrm -rf hello-1.0.0-linux-x86\nrm -rf hello-1.0.0-linux-x86_64\nrm -rf hello-1.0.0-osx\n```\n\n## Automating the process using Rake\n\nWe update the Rakefile so that all of the above steps are automated by running `rake package`. The various `package` tasks have been updated to run `package:bundle_install` which installs the gem bundle, and the `create_package` function has been updated to package the Gemfile and Bundler config file.\n\n```Ruby\n# For Bundler.with_clean_env\nrequire 'bundler/setup'\n\nPACKAGE_NAME = \"hello\"\nVERSION = \"1.0.0\"\nTRAVELING_RUBY_VERSION = \"20150210-2.1.5\"\n\ndesc \"Package your app\"\ntask :package => ['package:linux:x86', 'package:linux:x86_64', 'package:osx']\n\nnamespace :package do\n  namespace :linux do\n    desc \"Package your app for Linux x86\"\n    task :x86 => [:bundle_install, \"packaging/traveling-ruby-#{TRAVELING_RUBY_VERSION}-linux-x86.tar.gz\"] do\n      create_package(\"linux-x86\")\n    end\n\n    desc \"Package your app for Linux x86_64\"\n    task :x86_64 => [:bundle_install, \"packaging/traveling-ruby-#{TRAVELING_RUBY_VERSION}-linux-x86_64.tar.gz\"] do\n      create_package(\"linux-x86_64\")\n    end\n  end\n\n  desc \"Package your app for OS X\"\n  task :osx => [:bundle_install, \"packaging/traveling-ruby-#{TRAVELING_RUBY_VERSION}-osx.tar.gz\"] do\n    create_package(\"osx\")\n  end\n\n  desc \"Install gems to local directory\"\n  task :bundle_install do\n    if RUBY_VERSION !~ /^2\\.1\\./\n      abort \"You can only 'bundle install' using Ruby 2.1, because that's what Traveling Ruby uses.\"\n    end\n    sh \"rm -rf packaging/tmp\"\n    sh \"mkdir packaging/tmp\"\n    sh \"cp Gemfile Gemfile.lock packaging/tmp/\"\n    Bundler.with_clean_env do\n      sh \"cd packaging/tmp && env BUNDLE_IGNORE_CONFIG=1 bundle install --path ../vendor --without development\"\n    end\n    sh \"rm -rf packaging/tmp\"\n    sh \"rm -f packaging/vendor/*/*/cache/*\"\n  end\nend\n\nfile \"packaging/traveling-ruby-#{TRAVELING_RUBY_VERSION}-linux-x86.tar.gz\" do\n  download_runtime(\"linux-x86\")\nend\n\nfile \"packaging/traveling-ruby-#{TRAVELING_RUBY_VERSION}-linux-x86_64.tar.gz\" do\n  download_runtime(\"linux-x86_64\")\nend\n\nfile \"packaging/traveling-ruby-#{TRAVELING_RUBY_VERSION}-osx.tar.gz\" do\n  download_runtime(\"osx\")\nend\n\ndef create_package(target)\n  package_dir = \"#{PACKAGE_NAME}-#{VERSION}-#{target}\"\n  sh \"rm -rf #{package_dir}\"\n  sh \"mkdir #{package_dir}\"\n  sh \"mkdir -p #{package_dir}/lib/app\"\n  sh \"cp hello.rb #{package_dir}/lib/app/\"\n  sh \"mkdir #{package_dir}/lib/ruby\"\n  sh \"tar -xzf packaging/traveling-ruby-#{TRAVELING_RUBY_VERSION}-#{target}.tar.gz -C #{package_dir}/lib/ruby\"\n  sh \"cp packaging/wrapper.sh #{package_dir}/hello\"\n  sh \"cp -pR packaging/vendor #{package_dir}/lib/\"\n  sh \"cp Gemfile Gemfile.lock #{package_dir}/lib/vendor/\"\n  sh \"mkdir #{package_dir}/lib/vendor/.bundle\"\n  sh \"cp packaging/bundler-config #{package_dir}/lib/vendor/.bundle/config\"\n  if !ENV['DIR_ONLY']\n    sh \"tar -czf #{package_dir}.tar.gz #{package_dir}\"\n    sh \"rm -rf #{package_dir}\"\n  end\nend\n\ndef download_runtime(target)\n  sh \"cd packaging && curl -L -O --fail \" +\n    \"https://d6r77u77i8pq3.cloudfront.net/releases/traveling-ruby-#{TRAVELING_RUBY_VERSION}-#{target}.tar.gz\"\nend\n```\n\n## Conclusion\n\nIn this tutorial you've learned how to work with gem dependencies. You can download the end result of this tutorial at https://github.com/phusion/traveling-ruby-gems-demo.\n\nBut this tutorial does not cover native extensions. To learn how to deal with native extensions, go to [tutorial 3](TUTORIAL-3.md).\n"
        },
        {
          "name": "TUTORIAL-3.md",
          "type": "blob",
          "size": 9.935546875,
          "content": "# Tutorial 3: native extensions\n\nIn [tutorial 2](TUTORIAL-2.md) we covered gem dependencies. But those were only gems without native extensions. In this third tutorial we'll cover the usage of native extensions.\n\nNormally, native extensions need to be compiled. But the goal of Traveling Ruby is to enable packaging for multiple platforms, no matter which OS you are developing on, so we obviously can't ask you to compile native extensions yourself. Aside from the hassle of compiling, compiling native extensions that would work on every system is a challenge in itself.\n\nSo instead, the Traveling Ruby project supplies a number of precompiled native extensions that you can drop into your packages. Only specific versions are supplied, so your Gemfile must match the versions of the native extension gems that we supply.\n\n**Windows notes**: native extensions are not yet supported in Windows! See the [caveats](README.md#caveats).\n\n## Preparation\n\nSuppose that we want our hello world app from tutorial 2 to insert a row into an SQLite database file. We'll want to use the sqlite3 gem for that.\n\nTraveling Ruby provides a specific version of the sqlite3 gem. See [the Traveling Ruby Amazon S3 bucket](https://traveling-ruby.s3-us-west-2.amazonaws.com/list.html). For version 20141215-2.1.5, version 1.3.9 is supplied. So we add the following to our Gemfile:\n\n```Bash\ngem 'sqlite3', '1.3.9'\n```\n\nLet's also modify hello.rb to do what we want:\n\n```Ruby\n#!/usr/bin/env ruby\nrequire 'faker'\nrequire 'sqlite3'\n\ndb = SQLite3::Database.new(\"hello.sqlite3\")\ndb.execute(\"create table if not exists foo (name varchar(255))\")\ndb.execute(\"insert into foo values ('hello world')\")\ndb.close\nputs \"Hello #{Faker::Name.name}, database file modified.\"\n```\n\nThen install your gem bundle:\n\n```\n$ bundle install\n```\n\nVerify that the modified program works:\n\n```\n$ bundle exec ruby hello.rb\nHello Freida Walker, database file modified.\n$ sqlite3 hello.sqlite3\nsqlite> select * from foo;\nname\n-----------\nhello world\n```\n\n## Preparing the gem bundle, without native extensions\n\nRecall that the idea is that we create a package for every platform, and that we drop platform-specific precompiled native extensions in every package. But there's a little problem that we need to solve first. When you run `rake package`, it runs Bundler to create a local gem bundle for inclusion in packages. However, Bundler compiles native extensions for the platform that you're currently running on, but we don't want that to happen. So in this step, we must clean those things up.\n\nUsing the Rakefile from tutorial 2, create the gem bundle which is to be included in packages:\n\n```\n$ rake package:bundle_install\n```\n\nRun these to remove any native extensions and compilation products from that bundle:\n\n```\n$ rm -rf packaging/vendor/ruby/*/extensions\n$ find packaging/vendor/ruby/*/gems -name '*.so' | xargs rm -f\n$ find packaging/vendor/ruby/*/gems -name '*.bundle' | xargs rm -f\n$ find packaging/vendor/ruby/*/gems -name '*.o' | xargs rm -f\n```\n\n## Dropping native extensions\n\nNow you are ready to drop platform-specific native extensions inside the packages. First, create the package directories:\n\n```\n$ rake package DIR_ONLY=1\n```\n\nNext you must download the necessary native extensions, and extract them into `<PACKAGE DIR>/lib/vendor`. You can find native extensions at [the Traveling Ruby Amazon S3 bucket](https://traveling-ruby.s3-us-west-2.amazonaws.com/list.html). Suppose that you're using Traveling Ruby version 20141215-2.1.5, which supplies sqlite3 version 1.3.9. Download and extract the precompiled binaries as follows. Remember that we're using CloudFront domain \"https://d6r77u77i8pq3.cloudfront.net\" to speed up downloads.\n\n```\n$ cd hello-1.0.0-linux-x86/lib/vendor/ruby\n$ curl -L -O --fail https://d6r77u77i8pq3.cloudfront.net/releases/traveling-ruby-gems-20141215-2.1.5-linux-x86/sqlite3-1.3.9.tar.gz\n$ tar xzf sqlite3-1.3.9.tar.gz\n$ rm sqlite3-1.3.9.tar.gz\n$ cd ../../../..\n\n$ cd hello-1.0.0-linux-x86_64/lib/vendor/ruby\n$ curl -L -O --fail https://d6r77u77i8pq3.cloudfront.net/releases/traveling-ruby-gems-20141215-2.1.5-linux-x86_64/sqlite3-1.3.9.tar.gz\n$ tar xzf sqlite3-1.3.9.tar.gz\n$ rm sqlite3-1.3.9.tar.gz\n$ cd ../../../..\n\n$ cd hello-1.0.0-osx/lib/vendor/ruby\n$ curl -L -O --fail https://d6r77u77i8pq3.cloudfront.net/releases/traveling-ruby-gems-20141215-2.1.5-osx/sqlite3-1.3.9.tar.gz\n$ tar xzf sqlite3-1.3.9.tar.gz\n$ rm sqlite3-1.3.9.tar.gz\n$ cd ../../../..\n```\n\n## Finishing up\n\nPackage the directories and finalize the packages:\n\n```\n$ tar -czf hello-1.0.0-linux-x86.tar.gz hello-1.0.0-linux-x86\n$ tar -czf hello-1.0.0-linux-x86_64.tar.gz hello-1.0.0-linux-x86_64\n$ tar -czf hello-1.0.0-osx.tar.gz hello-1.0.0-osx\n$ rm -rf hello-1.0.0-linux-x86\n$ rm -rf hello-1.0.0-linux-x86_64\n$ rm -rf hello-1.0.0-osx\n```\n\nNow you can test whether it works. Suppose that you're developing on OS X. Extract the OS X package and test it:\n\n```\n$ tar xzf hello-1.0.0-osx.tar.gz\n$ cd hello-1.0.0-osx\n$ ./hello\nDatabase file modified. (in red)\n$ sqlite3 hello.sqlite3\nsqlite> select * from foo;\nname\n-----------\nhello world\n```\n\n## Automating the process using Rake\n\nWe update the Rakefile so that all of the above steps are automated by running `rake package`. The `package:bundle_install` task has been updated to remove any locally compiled native extensions. The various packaging tasks have been updated to extract platform-specific native extension binaries.\n\n```Ruby\n# For Bundler.with_clean_env\nrequire 'bundler/setup'\n\nPACKAGE_NAME = \"hello\"\nVERSION = \"1.0.0\"\nTRAVELING_RUBY_VERSION = \"20150210-2.1.5\"\nSQLITE3_VERSION = \"1.3.9\"  # Must match Gemfile\n\ndesc \"Package your app\"\ntask :package => ['package:linux:x86', 'package:linux:x86_64', 'package:osx']\n\nnamespace :package do\n  namespace :linux do\n    desc \"Package your app for Linux x86\"\n    task :x86 => [:bundle_install,\n      \"packaging/traveling-ruby-#{TRAVELING_RUBY_VERSION}-linux-x86.tar.gz\",\n      \"packaging/traveling-ruby-#{TRAVELING_RUBY_VERSION}-linux-x86-sqlite3-#{SQLITE3_VERSION}.tar.gz\"\n    ] do\n      create_package(\"linux-x86\")\n    end\n\n    desc \"Package your app for Linux x86_64\"\n    task :x86_64 => [:bundle_install,\n      \"packaging/traveling-ruby-#{TRAVELING_RUBY_VERSION}-linux-x86_64.tar.gz\",\n      \"packaging/traveling-ruby-#{TRAVELING_RUBY_VERSION}-linux-x86_64-sqlite3-#{SQLITE3_VERSION}.tar.gz\"\n    ] do\n      create_package(\"linux-x86_64\")\n    end\n  end\n\n  desc \"Package your app for OS X\"\n  task :osx => [:bundle_install,\n    \"packaging/traveling-ruby-#{TRAVELING_RUBY_VERSION}-osx.tar.gz\",\n    \"packaging/traveling-ruby-#{TRAVELING_RUBY_VERSION}-osx-sqlite3-#{SQLITE3_VERSION}.tar.gz\"\n  ] do\n    create_package(\"osx\")\n  end\n\n  desc \"Install gems to local directory\"\n  task :bundle_install do\n    if RUBY_VERSION !~ /^2\\.1\\./\n      abort \"You can only 'bundle install' using Ruby 2.1, because that's what Traveling Ruby uses.\"\n    end\n    sh \"rm -rf packaging/tmp\"\n    sh \"mkdir packaging/tmp\"\n    sh \"cp Gemfile Gemfile.lock packaging/tmp/\"\n    Bundler.with_clean_env do\n      sh \"cd packaging/tmp && env BUNDLE_IGNORE_CONFIG=1 bundle install --path ../vendor --without development\"\n    end\n    sh \"rm -rf packaging/tmp\"\n    sh \"rm -f packaging/vendor/*/*/cache/*\"\n    sh \"rm -rf packaging/vendor/ruby/*/extensions\"\n    sh \"find packaging/vendor/ruby/*/gems -name '*.so' | xargs rm -f\"\n    sh \"find packaging/vendor/ruby/*/gems -name '*.bundle' | xargs rm -f\"\n    sh \"find packaging/vendor/ruby/*/gems -name '*.o' | xargs rm -f\"\n  end\nend\n\nfile \"packaging/traveling-ruby-#{TRAVELING_RUBY_VERSION}-linux-x86.tar.gz\" do\n  download_runtime(\"linux-x86\")\nend\n\nfile \"packaging/traveling-ruby-#{TRAVELING_RUBY_VERSION}-linux-x86_64.tar.gz\" do\n  download_runtime(\"linux-x86_64\")\nend\n\nfile \"packaging/traveling-ruby-#{TRAVELING_RUBY_VERSION}-osx.tar.gz\" do\n  download_runtime(\"osx\")\nend\n\nfile \"packaging/traveling-ruby-#{TRAVELING_RUBY_VERSION}-linux-x86-sqlite3-#{SQLITE3_VERSION}.tar.gz\" do\n  download_native_extension(\"linux-x86\", \"sqlite3-#{SQLITE3_VERSION}\")\nend\n\nfile \"packaging/traveling-ruby-#{TRAVELING_RUBY_VERSION}-linux-x86_64-sqlite3-#{SQLITE3_VERSION}.tar.gz\" do\n  download_native_extension(\"linux-x86_64\", \"sqlite3-#{SQLITE3_VERSION}\")\nend\n\nfile \"packaging/traveling-ruby-#{TRAVELING_RUBY_VERSION}-osx-sqlite3-#{SQLITE3_VERSION}.tar.gz\" do\n  download_native_extension(\"osx\", \"sqlite3-#{SQLITE3_VERSION}\")\nend\n\ndef create_package(target)\n  package_dir = \"#{PACKAGE_NAME}-#{VERSION}-#{target}\"\n  sh \"rm -rf #{package_dir}\"\n  sh \"mkdir #{package_dir}\"\n  sh \"mkdir -p #{package_dir}/lib/app\"\n  sh \"cp hello.rb #{package_dir}/lib/app/\"\n  sh \"mkdir #{package_dir}/lib/ruby\"\n  sh \"tar -xzf packaging/traveling-ruby-#{TRAVELING_RUBY_VERSION}-#{target}.tar.gz -C #{package_dir}/lib/ruby\"\n  sh \"cp packaging/wrapper.sh #{package_dir}/hello\"\n  sh \"cp -pR packaging/vendor #{package_dir}/lib/\"\n  sh \"cp Gemfile Gemfile.lock #{package_dir}/lib/vendor/\"\n  sh \"mkdir #{package_dir}/lib/vendor/.bundle\"\n  sh \"cp packaging/bundler-config #{package_dir}/lib/vendor/.bundle/config\"\n  sh \"tar -xzf packaging/traveling-ruby-#{TRAVELING_RUBY_VERSION}-#{target}-sqlite3-#{SQLITE3_VERSION}.tar.gz \" +\n    \"-C #{package_dir}/lib/vendor/ruby\"\n  if !ENV['DIR_ONLY']\n    sh \"tar -czf #{package_dir}.tar.gz #{package_dir}\"\n    sh \"rm -rf #{package_dir}\"\n  end\nend\n\ndef download_runtime(target)\n  sh \"cd packaging && curl -L -O --fail \" +\n    \"https://d6r77u77i8pq3.cloudfront.net/releases/traveling-ruby-#{TRAVELING_RUBY_VERSION}-#{target}.tar.gz\"\nend\n\ndef download_native_extension(target, gem_name_and_version)\n  sh \"curl -L --fail -o packaging/traveling-ruby-#{TRAVELING_RUBY_VERSION}-#{target}-#{gem_name_and_version}.tar.gz \" +\n    \"https://d6r77u77i8pq3.cloudfront.net/releases/traveling-ruby-gems-#{TRAVELING_RUBY_VERSION}-#{target}/#{gem_name_and_version}.tar.gz\"\nend\n```\n\n## Conclusion\n\nIn this tutorial you've learned how to deal with native extensions. You can download the end result of this tutorial at https://github.com/phusion/traveling-ruby-native-extensions-demo.\n\nIn all the tutorials so far, we've not covered Windows. Proceed with [tutorial 4](TUTORIAL-4.md) to learn about creating Windows packages.\n"
        },
        {
          "name": "TUTORIAL-4.md",
          "type": "blob",
          "size": 4.1103515625,
          "content": "# Tutorial 4: creating packages for Windows\n\nIn the previous tutorials we covered [the basics](TUTORIAL-1.md), [gem dependencies](TUTORIAL-2.md) and [native extensions](TUTORIAL-3.md). But we never covered Windows support. That's because the flow for Windows support is a bit different from other platforms, so it deserves its own tutorial.\n\nBut there are several [**important Windows-specific caveats**](README.md#caveats). You should read them before proceeding with this tutorial!!\n\nYou can find the end result of this tutorial at https://github.com/phusion/traveling-ruby-windows-demo.\n\n## Creating a batch file\n\nSuppose that we want to create a Windows package for our hello world app from [tutorial 2](TUTORIAL-2.md). The first thing we need to create is a Windows wrapper script. We already have a Unix wrapper script in `packaging/wrapper.sh`, which works on Linux and OS X, but Windows doesn't support Unix shell scripts. For Windows we'll need to create a wrapper script in the DOS batch format.\n\nCreate `packaging/wrapper.bat`:\n\n```Batch\n@echo off\n\n:: Tell Bundler where the Gemfile and gems are.\nset \"BUNDLE_GEMFILE=%~dp0\\lib\\vendor\\Gemfile\"\nset BUNDLE_IGNORE_CONFIG=\n\n:: Run the actual app using the bundled Ruby interpreter, with Bundler activated.\n@\"%~dp0\\lib\\ruby\\bin\\ruby.bat\" -rbundler/setup \"%~dp0\\lib\\app\\hello.rb\"\n```\n\n## Modifying the Rakefile\n\nThe next step is to add a Rake task for creating the Windows package. The Rakefile currently generates tar.gz packages for Linux and OS X, but tar.gz is not a common format on Windows. For Windows, we'll want to create a .zip package instead.\n\nAdd a `package:win32` task to your Rakefile:\n\n```Ruby\nnamespace :package do\n  ...\n\n  desc \"Package your app for Windows x86\"\n  task :win32 => [:bundle_install, \"packaging/traveling-ruby-#{TRAVELING_RUBY_VERSION}-win32.tar.gz\"] do\n    create_package(\"win32\", :windows)\n  end\n```\n\nAdd a task for downloading the Traveling Ruby Windows binaries:\n\n```Ruby\nfile \"packaging/traveling-ruby-#{TRAVELING_RUBY_VERSION}-win32.tar.gz\" do\n  download_runtime(\"win32\")\nend\n```\n\nWe must update the `create_package` method so that it generates the package slightly differently depending on the target platform. Update its signature and add a `os_type = :unix` parameter:\n\n```Ruby\ndef create_package(target, os_type = :unix)\n```\n\nThis method contains a line which copies `wrapper.sh`, but we'll want to copy `wrapper.bat` when creating Windows packages. \n\n```Ruby\n# Look for:\nsh \"cp packaging/wrapper.sh #{package_dir}/hello\"\n\n# Replace it with:\nif os_type == :unix\n  sh \"cp packaging/wrapper.sh #{package_dir}/hello\"\nelse\n  sh \"cp packaging/wrapper.bat #{package_dir}/hello.bat\"\nend\n```\n\nThere is a line which creates the final tar.gz file. We'll want to modify this so that a .zip file is created when targeting Windows.\n\n```Ruby\n# Look for:\nsh \"tar -czf #{package_dir}.tar.gz #{package_dir}\"\n\n# Replace it with:\nif os_type == :unix\n  sh \"tar -czf #{package_dir}.tar.gz #{package_dir}\"\nelse\n  sh \"zip -9r #{package_dir}.zip #{package_dir}\"\nend\n```\n\nFinally, add the `package:win32` task to the `package` task's dependencies so that a `rake package` generates a Windows package too:\n\n```Ruby\ntask :package => ['package:linux:x86', 'package:linux:x86_64', 'package:osx', 'package:win32']\n```\n\n## Creating and testing the package\n\nCongratulations. The `rake package` command will now generate packages for Windows, Linux and OS X. But let's test the Windows package. Run the following command to generate a Windows package:\n\n```Bash\nrake package:win32\n```\n\nThis will generate `hello-1.0.0-win32.zip`. Copy this file to a Windows machine and extract it to `C:\\`. Then open a `cmd.exe` command prompt and test it:\n\n```\nC:\\Users\\Test> cd C:\\hello-1.0.0-win32\nC:\\hello-1.0.0-win32> hello\nhello Mrs. Mellie Ebert\n```\n\n## Conclusion\n\nCongratulations, you've learned how to create packages for Windows! You've now reached the end of this tutorial series and you now master the basics of Traveling Ruby. You can find the end result of this tutorial at https://github.com/phusion/traveling-ruby-windows-demo.\n\nNext up, you may want to read [the guides](README.md#getting-started), which cover intermediate to advanced topics.\n"
        },
        {
          "name": "TravelingRuby.sublime-project",
          "type": "blob",
          "size": 0.1591796875,
          "content": "{\n\t\"folders\":\n\t[\n\t\t{\n\t\t\t\"path\": \".\",\n\t\t\t\"folder_exclude_patterns\":\n\t\t\t[\n\t\t\t\t\"linux/runtime\",\n\t\t\t\t\"linux/output\",\n\t\t\t\t\"osx/runtime\",\n\t\t\t\t\"osx/output\"\n\t\t\t]\n\t\t}\n\t]\n}\n"
        },
        {
          "name": "VERSION.txt",
          "type": "blob",
          "size": 0.0087890625,
          "content": "20210206\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "issue_template.md",
          "type": "blob",
          "size": 1.1376953125,
          "content": "# Issue Template\n\nWhen filing a bug report, please ensure that you include the following information:\n- What steps will reproduce the problem?\n- What is the expected output? What do you see instead?\n- What does your environment looks like (operating system, language, configuration, infrastructure)\n\n__BONUS POINTS__\n- Include files that provide context to the issue you're experiencing, like screenshots. For logs however, please create a GIST which is a paste of your full logs, and link that. Do NOT paste your full logs in issues, as that will make them very long and hard to read.\n- If your project is public, link to the repo so we can investigate directly.\n\n### Checklist\nBefore submitting your issue, please consider the following:\n- Avoid using GitHub issues for questions or help. Submitting issues to this repository are reserved for bugs, feature requests, or changes to the source code.\n- Check if the issue is not already reported. If you're experiencing an issue someone else has already reported, please add a comment to the existing issue so we can properly assess the gravity of the problem.\n- Use labels appropriately (no more than 2 per issue).\n"
        },
        {
          "name": "linux",
          "type": "tree",
          "content": null
        },
        {
          "name": "osx",
          "type": "tree",
          "content": null
        },
        {
          "name": "pull_request_template.md",
          "type": "blob",
          "size": 1.3681640625,
          "content": "# Pull Request template\n\nPlease consider the following when creating a Pull Request (yay!):\n\n### Reference an issue or milestone\nDescribe the big picture of your changes here to communicate to the maintainers why we should accept this pull request. If it fixes a bug or resolves a feature request, be sure to link to that issue.\n\nYou can bring up a list of suggested issues and pull requests within the repository by typing #. Type the issue or pull request number or title to filter the list, and then press either tab or enter to complete the highlighted result.\n\n### Write a description of changes made\nProvide a description of the changes proposed. Make sure to answer what types of changes your code introduces:\n- Bugfix (non-breaking change which fixes an issue)\n- New feature (non-breaking change which adds functionality)\n- Breaking change (fix or feature that would cause existing functionality to not work as expected)\n\n__BONUS POINTS__\n- Check if the commit's or even all commits' message styles matches ours.\n- Extend the repo's README / documentation, if applicable.\n\n### Avoid breakage\n- Pull requests should normally be submitted against the latest stable branch (e.g. main).\n- Elaborate how you've tested your code.\n- If this is a relatively large or complex change, kick off the discussion by explaining why you chose the solution you did and what alternatives you considered, etc...\n"
        },
        {
          "name": "shared",
          "type": "tree",
          "content": null
        },
        {
          "name": "windows",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}