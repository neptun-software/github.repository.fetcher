{
  "metadata": {
    "timestamp": 1736568209695,
    "page": 58,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "lambci/lambci",
      "stars": 3994,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".eslintrc.js",
          "type": "blob",
          "size": 1.26171875,
          "content": "module.exports = {\n  extends: 'eslint:recommended',\n  env: {\n    es6: true,\n    node: true,\n    mocha: true,\n  },\n  parserOptions: {\n    ecmaVersion: 9,\n  },\n  rules: {\n\n    // relaxed restrictions\n    'no-mixed-requires': 0,\n    'no-underscore-dangle': 0,\n    'no-shadow': 0,\n    'no-use-before-define': [2, 'nofunc'],\n    'camelcase': [2, {'properties': 'never'}],\n    'curly': 0,\n    'eqeqeq': 0,\n    'new-parens': 0,\n    'quotes': [2, 'single', 'avoid-escape'],\n    'semi': [2, 'never'],\n    'strict': 0,\n\n    // extra restrictions\n    'no-empty-character-class': 2,\n    'no-extra-parens': [2, 'functions'],\n    'no-floating-decimal': 2,\n    'no-lonely-if': 2,\n    'no-self-compare': 2,\n    'no-throw-literal': 2,\n    'no-unused-vars': 2,\n\n    // style\n    'array-bracket-spacing': [2, 'never'],\n    'brace-style': [2, '1tbs', {allowSingleLine: true}],\n    'comma-dangle': [2, 'always-multiline'],\n    'comma-style': [2, 'last'],\n    'consistent-this': [2, 'self'],\n    'object-curly-spacing': [2, 'never'],\n    'operator-assignment': [2, 'always'],\n    'operator-linebreak': [2, 'after'],\n    'keyword-spacing': 2,\n    'space-before-blocks': [2, 'always'],\n    'space-before-function-paren': [2, 'never'],\n    'space-in-parens': [2, 'never'],\n    'spaced-comment': [2, 'always'],\n  },\n}\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.09375,
          "content": "node_modules\nnpm-debug.log\nbuild/*.zip\nbuild/*.yaml\nbuild/runtime/layer\nbuild/runtime/layer.zip\n"
        },
        {
          "name": ".lambdaignore",
          "type": "blob",
          "size": 0.4150390625,
          "content": "*.*ignore\n*README*\n*CHANGELOG*\n*CHANGES*\n*HISTORY*\n*AUTHORS*\n*CONTRIBUTING*\n.git/*\ntest/*\nbuild/*\nDockerfile\nnpm-debug.log\ntemplate.yaml\nnode_modules/*.map\nnode_modules/*.ts\nnode_modules/*/test/*\nnode_modules/*/example/*\nnode_modules/*/examples/*\nnode_modules/ansi_up/dist/*\nnode_modules/ansi_up/.vscode/*\nnode_modules/ansi_up/*.png\nnode_modules/ansi_up/tags\nnode_modules/neo-async/async.min.js\nnode_modules/neo-async/dist/*\n"
        },
        {
          "name": ".npmignore",
          "type": "blob",
          "size": 0.0126953125,
          "content": "vendor\nbuild\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.892578125,
          "content": "FROM lambci/yumda:1\n\nRUN yum install -y gcc72-c++\n\n\nFROM lambci/lambda:provided\n\nWORKDIR /tmp/lambci/build\n\nENV HOME=/tmp/lambci/home\nENV PATH=$HOME/.local/bin:$HOME/usr/bin:/var/task/node_modules/.bin:/opt/bin:$PATH \\\n  LD_LIBRARY_PATH=$HOME/usr/lib64:$LD_LIBRARY_PATH \\\n  PYTHONPATH=$HOME/.local/lib/python3.6/site-packages:/opt/lib/python3.6/site-packages \\\n  PERL5LIB=/opt/share/perl5/vendor_perl:/opt/lib/perl5/vendor_perl \\\n  SHELL=/opt/bin/bash \\\n  TERM=xterm-256color \\\n  FORCE_COLOR=true \\\n  NPM_CONFIG_COLOR=always \\\n  MOCHA_COLORS=true\n\nUSER root\n\nCOPY --from=0 /lambda/opt /opt\n\nADD ./lambda.zip ./runtime/layer.zip /tmp/\n\nRUN unzip -q /tmp/lambda.zip -d /var/task && \\\n  unzip -q /tmp/layer.zip -d /opt && \\\n  rm /tmp/*.zip\n\nRUN chown -R slicer:497 /var/task && chown -R sbx_user1051:495 /tmp\n\nUSER sbx_user1051\n\nRUN mkdir -p $HOME && \\\n  cp -r /var/task/home/. $HOME\n\nENTRYPOINT []\nCMD /opt/bin/bash\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.05078125,
          "content": "Copyright 2018 Michael Hart and LambCI contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README-SAR.md",
          "type": "blob",
          "size": 2.21484375,
          "content": "# LambCI\n\n*Serverless continuous integration*\n\n![LambCI Logo](https://lambci.s3.amazonaws.com/assets/logo-48x48.png)\n\n[![LambCI Build Status](https://lambci-public-buildresults-e3xwlufrwb3i.s3.amazonaws.com/gh/lambci/lambci/branches/master/2c03c00899d9b188a928a910320eacdc.svg)](https://lambci-public-buildresults-e3xwlufrwb3i.s3.amazonaws.com/gh/lambci/lambci/branches/master/8f82e6f4df48d23dead65035f625f5c0.html)\n\n[![Gitter](https://img.shields.io/gitter/room/lambci/lambci.svg)](https://gitter.im/lambci/lambci)\n\n---\n\nAutomate your testing and deployments with:\n\n- 1000 concurrent builds out of the box (can request more)\n- No maintenance of web servers, build servers or databases\n- Zero cost when not in use (ie, [100% utilization](https://twitter.com/kannonboy/status/734799060440211456))\n- Easy to integrate with the rest of your AWS resources\n\n---\n\n## What is it?\n\nLambCI is a package you can upload to [AWS Lambda](https://aws.amazon.com/lambda/) that\ngets triggered when you push new code or open pull requests on GitHub and runs your tests (in the Lambda environment itself) – in the same vein as Jenkins, Travis or CircleCI.\n\nIt integrates with Slack, and updates your Pull Request and other commit statuses on GitHub to let you know if you can merge safely.\n\n![LambCI in action](https://lambci.s3.amazonaws.com/assets/demo.gif)\n\n## Installed languages\n\n* Node.js 12.x (including `npm`/`npx`)\n* Python 3.6 (including `pip`)\n* Gcc 7.2 (including `c++`)\n\n## Supported languages\n\n* Node.js (any version via [nave](https://github.com/isaacs/nave))\n* Python (3.8.0, 3.7.4, 3.6.9)\n* Java (OpenJDK 1.8.0)\n* Go (any version)\n* Ruby (2.7.0, 2.6.5, 2.5.7, 2.4.9, 2.3.8, 2.2.10, 2.1.10, 2.0.0-p648)\n* PHP (7.3.13, 7.2.26, 7.1.33, 7.0.32, 5.6.38)\n\n## Prerequisites\n\n* An [Amazon AWS account](https://portal.aws.amazon.com/gp/aws/developer/registration/index.html)\n* A GitHub OAuth token\n* (optional) A Slack API token\n\n## Current Limitations (due to the Lambda environment itself)\n\n* No root access\n* 500MB disk space\n* 15 min max build time\n* Bring-your-own-binaries – Lambda has a limited selection of installed software\n* 3.0GB max memory\n* Linux only\n\n## Installation and configuration\n\nSee the [LambCI homepage](https://github.com/lambci/lambci) for details\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 27.36328125,
          "content": "### Note: This repo is in maintenance mode as we assess whether [Serverless GitHub Actions](https://github.com/lambci/serverless-actions) might provide a better experience going forward\n\n<img align=\"left\" src=\"https://lambci.s3.amazonaws.com/assets/logo-310x310.png\" width=\"180px\" height=\"180px\">\n\n# LambCI\n\n*Serverless continuous integration*\n\n[![Launch CloudFormation Stack](https://s3.amazonaws.com/cloudformation-examples/cloudformation-launch-stack.png)](https://console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/new?stackName=lambci&templateURL=https://lambci.s3.amazonaws.com/templates/template.yaml)\n[![Serverless App Repository](https://img.shields.io/badge/Available-serverless%20app%20repository-blue.svg)](https://serverlessrepo.aws.amazon.com/applications/arn:aws:serverlessrepo:us-east-1:553035198032:applications~lambci)\n[![LambCI Build Status](https://lambci-public-buildresults-e3xwlufrwb3i.s3.amazonaws.com/gh/lambci/lambci/branches/master/2c03c00899d9b188a928a910320eacdc.svg)](https://lambci-public-buildresults-e3xwlufrwb3i.s3.amazonaws.com/gh/lambci/lambci/branches/master/8f82e6f4df48d23dead65035f625f5c0.html)\n[![Gitter](https://img.shields.io/gitter/room/lambci/lambci.svg)](https://gitter.im/lambci/lambci)\n\n\n---\n\nAutomate your testing and deployments with:\n\n- 1000 concurrent builds out of the box (can request more)\n- No maintenance of web servers, build servers or databases\n- Zero cost when not in use (ie, [100% utilization](https://twitter.com/kannonboy/status/734799060440211456))\n- Easy to integrate with the rest of your AWS resources\n\n---\n\n## Contents\n\n* [Overview](#what-is-it)\n* [Installation](#installation)\n* [Configuration](#configuration)\n* [Updating](#updating)\n* [Security](#security)\n* [Language Recipes](#language-recipes)\n* [Extending with ECS](#extending-with-ecs)\n* [Questions](#questions)\n\n---\n\n## What is it?\n\nLambCI is a package you can upload to [AWS Lambda](https://aws.amazon.com/lambda/) that\ngets triggered when you push new code or open pull requests on GitHub and runs your tests (in the Lambda environment itself) – in the same vein as Jenkins, Travis or CircleCI.\n\nIt integrates with Slack, and updates your Pull Request and other commit statuses on GitHub to let you know if you can merge safely.\n\n![LambCI in action](https://lambci.s3.amazonaws.com/assets/demo.gif)\n\nIt can be easily launched and kept up-to-date as a [CloudFormation\nStack](https://aws.amazon.com/cloudformation/), or you can manually create the\ndifferent resources yourself.\n\n## Installed languages\n\n* Node.js 12.x (including `npm`/`npx`)\n* Python 3.6 (including `pip`)\n* Gcc 7.2 (including `c++`)\n\n## Supported languages\n\n* Check the [Recipes](#language-recipes) list below on how to configure these:\n* Node.js (any version via [nave](https://github.com/isaacs/nave))\n* Python ([3.8.0, 3.7.4, 3.6.9](#python))\n* Java (OpenJDK [1.8.0](#java))\n* Go ([any version](#go))\n* Ruby ([2.7.0, 2.6.5, 2.5.7, 2.4.9, 2.3.8, 2.2.10, 2.1.10, 2.0.0-p648](#ruby))\n* PHP ([7.3.13, 7.2.26, 7.1.33, 7.0.32, 5.6.38](#php))\n\n## Prerequisites\n\n* An [Amazon AWS account](https://portal.aws.amazon.com/gp/aws/developer/registration/index.html)\n* A GitHub OAuth token ([see below](#1-create-a-github-token))\n* (optional) A Slack API token ([see below](#2-create-a-slack-token-optional))\n\n## Current Limitations (due to the Lambda environment itself)\n\n* No root access\n* 500MB disk space\n* 15 min max build time\n* Bring-your-own-binaries – Lambda has a limited selection of installed software\n* 3.0GB max memory\n* Linux only\n\nYou can get around many of these limitations by [configuring LambCI to send tasks to an ECS cluster](#extending-with-ecs) where you can run your builds in Docker.\n\n## Installation\n\nYou don't need to clone this repository – the easiest way to install LambCI is to [deploy it from the Serverless Application Repository](https://serverlessrepo.aws.amazon.com/applications/arn:aws:serverlessrepo:us-east-1:553035198032:applications~lambci) or [directly spin up a CloudFormation stack](https://console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/new?stackName=lambci&templateURL=https://lambci.s3.amazonaws.com/templates/template.yaml). This will create a collection of related AWS resources, including the main LambCI Lambda function and DynamoDB tables, that you can update or remove together – it should take around 3 minutes to spin up.\n\nYou can use multiple repositories from the one stack, and you can run multiple stacks with different names side-by-side too (eg, `lambci-private` and `lambci-public`).\n\nIf you'd prefer to run your stack after cloning this repository, you can use `npm run deploy` – this depends on [AWS SAM CLI](https://github.com/awslabs/aws-sam-cli) being installed.\n\n### 1. Create a GitHub token\n\nYou can create a token in the [Personal access tokens](https://github.com/settings/tokens) section of your GitHub settings. If you're setting up LambCI for an organization, it might be a good idea to create a separate GitHub user dedicated to running automated builds (GitHub calls these \"machine users\") – that way you have more control over which repositories this user has access to.\n\nClick the [Generate new token](https://github.com/settings/tokens/new) button and then select the appropriate access levels.\n\nLambCI only needs read access to your code, but unfortunately GitHub webhooks have rather crude access mechanisms and don't have a readonly scope for private repositories – the only options is to choose `repo` (\"Full control\").\n\n<img alt=\"Private GitHub access\" src=\"https://lambci.s3.amazonaws.com/assets/private_github_2.png\" width=\"555\" height=\"318\">\n\nIf you're only using LambCI for public repositories, then you just need access to commit statuses:\n\n<img alt=\"Public GitHub access\" src=\"https://lambci.s3.amazonaws.com/assets/public_github_2.png\" width=\"538\" height=\"216\">\n\nThen click the \"Generate token\" button and GitHub will generate a 40 character hex OAuth token.\n\n### 2. Create a Slack token (optional)\n\nYou can obtain a Slack API token by creating a bot user (or you can use the token from an existing bot user if you have one) – [this direct link](https://slack.com/apps/new/A0F7YS25R-bots) should take you there, but you can navigate from the [App Directory](https://slack.com/apps) via `Browse Apps > Custom Integrations > Bots`.\n\nPick any name, and when you click \"Add integration\" Slack will generate an API token that looks something like `xoxb-<numbers>-<letters>`\n\n<img alt=\"Add Slack bot\" src=\"https://lambci.s3.amazonaws.com/assets/slack_bot_2.png\" width=\"622\" height=\"528\">\n\n### 3. Launch the LambCI CloudFormation stack\n\nYou can either [deploy it from the Serverless Application Repository](https://serverlessrepo.aws.amazon.com/applications/arn:aws:serverlessrepo:us-east-1:553035198032:applications~lambci) or [use this direct CloudFormation link](https://console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/new?stackName=lambci&templateURL=https://lambci.s3.amazonaws.com/templates/template.yaml) or navigate in your AWS Console to `Services > CloudFormation`, choose \"Create Stack\" and use the [S3 link](https://lambci.s3.amazonaws.com/templates/template.yaml):\n\n<img alt=\"CloudFormation Step 1\" src=\"https://lambci.s3.amazonaws.com/assets/cfn1_2.png\" width=\"404\" height=\"63\">\n\nThen click Next where you can enter a stack name (`lambci` is a good default),\nAPI tokens and a Slack channel – you'll also need to\n[make up a secret to secure your webhook](https://developer.github.com/webhooks/securing/) and enter it as the\n`GithubSecret` – any randomly generated value is good here, but make sure you\nstill have it handy to enter when you setup your webhooks in GitHub later on.\n\n<img alt=\"CloudFormation Step 2\" src=\"https://lambci.s3.amazonaws.com/assets/cfn2_3.png\" width=\"689\" height=\"558\">\n\nClick Next, and then Next again on the Options step (leaving the default options selected), to get to the final Review step:\n\n<img alt=\"CloudFormation Step 3\" src=\"https://lambci.s3.amazonaws.com/assets/cfn3_2.png\" width=\"689\" height=\"538\">\n\nCheck the acknowledgments, click Create Change Set and then Execute to start the resource creation process:\n\n<img alt=\"CloudFormation Step 4\" src=\"https://lambci.s3.amazonaws.com/assets/cfn4.png\">\n\nOnce your stack is created (should be done in a few minutes) you're ready to add the webhook to any repository you like!\n\nYou can get the WebhookUrl from the Outputs of the CloudFormation stack:\n\n<img alt=\"CloudFormation Step 5\" src=\"https://lambci.s3.amazonaws.com/assets/cfn5.png\" width=\"758\" height=\"177\">\n\nThen create a new Webhook in any GitHub repo you want to trigger under\n`Settings > Webhooks` (`https://github.com/<user>/<repo>/settings/hooks/new`)\nand enter the `WebhookUrl` from above as the Payload URL, ensure Content type\nis `application/json` and enter the `GithubSecret` you generated in the first step as the Secret:\n\n<img alt=\"GitHub Webhook Step 1\" src=\"https://lambci.s3.amazonaws.com/assets/webhook1.png\" width=\"498\" height=\"652\">\n\nAssuming you want to respond to Pull Requests as well as Pushes, you'll need to choose\n\"Let me select individual events\", and check Pushes and Pull requests.\n\n<img alt=\"GitHub Webhook Step 2\" src=\"https://lambci.s3.amazonaws.com/assets/webhook2.png\" width=\"772\" height=\"261\">\n\nThen \"Add webhook\" and you're good to go!\n\nBy default LambCI only responds to pushes on the master branch and pull\nrequests ([you can configure this](#configuration)), so try either of those –\nif nothing happens, then check `Services > CloudWatch > Logs` in the AWS\nConsole and see the [Questions](#questions) section below.\n\n### Installing as a nested stack in another CloudFormation stack\n\nYou can also embed LambCI in your own stack, using a `AWS::Serverless::Application` resource:\n\n```yaml\nAWSTemplateFormatVersion: '2010-09-09'\nTransform: AWS::Serverless-2016-10-31\n\nResources:\n  LambCI:\n    Type: AWS::Serverless::Application\n    Properties:\n      Location:\n        ApplicationId: arn:aws:serverlessrepo:us-east-1:553035198032:applications/lambci\n        SemanticVersion: 0.11.2\n      Parameters:\n        GithubToken: '123456789abcdef123456789abcdef123456789'\n        GithubSecret: 'my-web-secret'\n        SlackChannel: '#general'\n        SlackToken: 'xoxb-123456789-abcdefABCDEFabcdef'\n\nOutputs:\n  S3Bucket:\n    Description: Name of the build results S3 bucket\n    Value: !GetAtt LambCI.Outputs.S3Bucket\n  WebhookUrl:\n    Description: GitHub webhook URL\n    Value: !GetAtt LambCI.Outputs.WebhookUrl\n```\n\nIf you save the above as `template.yml`, then you can use the\n[AWS SAM CLI](https://github.com/awslabs/aws-sam-cli) to deploy from the same directory:\n\n```console\nsam deploy --stack-name lambci --capabilities CAPABILITY_IAM CAPABILITY_AUTO_EXPAND\n```\n\n## Configuration\n\nMany configuration values can be specified in a `.lambci.js`, `.lambci.json` or `package.json` file in the root of your repository – and all values can be set in the DynamoDB configuration table (named `<stack>-config`, eg, `lambci-config`)\n\nFor example, the default command that LambCI will try to run is `npm ci && npm test`, but let's say you have a python project – you could put the following in `.lambci.json` in your repository root:\n\n```json\n{\n  \"cmd\": \"pip install --user tox && tox\"\n}\n```\n(LambCI bundles `pip` and adds `$HOME/.local/bin` to `PATH`)\n\nIf you have a more complicated build setup, then you could specify `make` or create a bash script in your repository root:\n\n```json\n{\n  \"cmd\": \"./lambci-test.sh\"\n}\n```\n\n### Overriding default properties\n\nLambCI resolves configuration by overriding properties in a cascading manner in the following order:\n\n1. Default config ([see below](#default-configuration))\n2. `global` project key in `lambci-config` DynamoDB table\n3. `gh/<user>/<repo>` project key in `lambci-config` DynamoDB table\n4. `lambci` property in `package.json` file in repository root\n5. `.lambci.js` or `.lambci.json` file in repository root\n\nYou can use the [command line](https://github.com/lambci/cli) to edit the DynamoDB config values:\n\n```console\nlambci config secretEnv.GITHUB_TOKEN abcdef01234\nlambci config --project gh/mhart/kinesalite secretEnv.SLACK_TOKEN abcdef01234\n```\n\nOr the AWS console:\n\n![Global config in DynamoDB](https://lambci.s3.amazonaws.com/assets/global_config.png)\n\nSo if you wanted to use a different Slack token and channel for a particular project, you could create an item in the config table with the project key `gh/<user>/<repo>` that looks similar to the global config above, but with different values:\n\n```js\n{\n  project: 'gh/mhart/kinesalite',\n  secretEnv: {\n    SLACK_TOKEN: 'xoxb-1234243432-vnjcnioeiurn'\n  },\n  notifications: {\n    slack: {\n      channel: '#someotherchannel'\n    }\n  }\n}\n```\n\nUsing the [command line](https://github.com/lambci/lambci):\n\n```console\nlambci config --project gh/mhart/kinesalite secretEnv.SLACK_TOKEN xoxb-1234243432-vnjcnioeiurn\nlambci config --project gh/mhart/kinesalite notifications.slack.channel '#someotherchannel'\n```\n\n\n### Config file overrides\n\nHere's an example `package.json` overriding the `cmd` property:\n\n```json\n{\n  \"name\": \"some-project\",\n  \"scripts\": {\n    \"lambci-build\": \"eslint . && mocha\"\n  },\n  \"lambci\": {\n    \"cmd\": \"npm ci && npm run lambci-build\"\n  }\n}\n```\n\nAnd the same example using `.lambci.js`:\n\n```js\nmodule.exports = {\n  cmd: 'npm ci && npm run lambci-build'\n}\n```\n\nThe ability to override config properties using repository files depends on the `allowConfigOverrides` property ([see the default config below](#default-configuration)).\n\n### Branch and pull request properties\n\nDepending on whether LambCI is building a branch from a push or a pull request, config properties can also be specified to override in these cases.\n\nFor example, to determine whether a build should even take place, LambCI looks at the top-level `build` property of the configuration. By default this is actually `false`, but if the branch is `master`, then LambCI checks for a `branches.master` property and if it's set, uses that instead:\n\n```js\n{\n  build: false,\n  branches: {\n    master: true\n  }\n}\n```\nIf a branch just has a `true` value, this is the equivalent of `{build: true}`, so you can override other properties too – ie, the above snippet is just shorthand for:\n```js\n{\n  build: false,\n  branches: {\n    master: {\n      build: true\n    }\n  }\n}\n```\nSo if you wanted Slack notifications to go to a different channel to the default for the `develop` branch, you could specify:\n\n```js\n{\n  branches: {\n    master: true,\n    develop: {\n      build: true,\n      notifications: {\n        slack: {\n          channel: '#dev'\n        }\n      }\n    }\n  }\n}\n```\n\nYou can also use regular expression syntax to specify config for branches that\nmatch, or don't match (if there is a leading `!`). Exact branch names are\nchecked first, then the first matching regex (or negative regex) will be used:\n\n```js\n// 1. Don't build gh-pages branch\n// 2. Don't build branches starting with 'dev'\n// 3. Build any branch that doesn't start with 'test-'\n{\n  build: false,\n  branches: {\n    '/^dev/': false,\n    '!/^test-/': true,\n    'gh-pages': false,\n  }\n}\n```\n\n### Default configuration\n\nThis configuration is hardcoded in `utils/config.js` and overridden by any config from the DB (and config files)\n\n```js\n{\n  cmd: 'npm ci && npm test',\n  env: { // env values exposed to build commands\n  },\n  secretEnv: { // secret env values, exposure depends on inheritSecrets config below\n    GITHUB_TOKEN: '',\n    GITHUB_SECRET: '',\n    SLACK_TOKEN: '',\n  },\n  s3Bucket: '', // bucket to store build artifacts\n  notifications: {\n    slack: {\n      channel: '#general',\n      username: 'LambCI',\n      iconUrl: 'https://lambci.s3.amazonaws.com/assets/logo-48x48.png',\n      asUser: false,\n    },\n  },\n  build: false, // Build nothing by default except master and PRs\n  branches: {\n    master: true,\n  },\n  pullRequests: {\n    fromSelfPublicRepo: true, // Pull requests from same (private) repo will build\n    fromSelfPrivateRepo: true, // Pull requests from same (public) repo will build\n    fromForkPublicRepo: { // Restrictions for pull requests from forks on public repos\n      build: true,\n      inheritSecrets: false, // Don't expose secretEnv values in the build command environment\n      allowConfigOverrides: ['cmd', 'env'], // Only allow file config to override cmd and env properties\n    },\n    fromForkPrivateRepo: false, // Pull requests from forked private repos won't run at all\n  },\n  s3PublicSecretNames: true, // Use obscured names for build HTML files and make them public. Has no effect in public repositories\n  inheritSecrets: true, // Expose secretEnv values in the build command environment by default\n  allowConfigOverrides: true, // Allow files to override config values\n  clearTmp: true, // Delete /tmp each time for safety\n  git: {\n    depth: 5, // --depth parameter for git clone\n  },\n}\n```\n\n### SNS Notifications (for email, SMS, etc)\n\nBy default, the CloudFormation template doesn't create an SNS topic to publish build statuses (ie, success, failure) to – but if you want to receive build notifications via email or SMS, or some other custom SNS subscriber, you can specify an SNS topic and LambCI will push notifications to it:\n\n```js\nnotifications: {\n  sns: {\n    topicArn: 'arn:aws:sns:us-east-1:1234:lambci-StatusTopic-1WF8BT36'\n  }\n}\n```\n\nThe Lambda function needs to have permissions to publish to this topic, which you can either add manually, or by modifying the CloudFormation `template.yaml` and updating your stack.\n\nAdd a top-level SNS topic resource (a commented-out example of this exists in `template.yaml`):\n\n```yaml\n  StatusTopic:\n    Type: AWS::SNS::Topic\n    Properties:\n      DisplayName: LambCI\n```\nAnd ensure the Lambda function has permissions to publish to it:\n```yaml\n  BuildLambda:\n    Type: AWS::Serverless::Function\n    Properties:\n      # ...\n      Policies:\n        # ...\n        - SNSPublishMessagePolicy:\n            TopicName: !Ref StatusTopic\n```\n\n### Build status badges\n\nEach branch has a build status image showing whether the last build was successful or not.\nFor example, here is LambCI's latest `master` status (yes, LambCI dogfoods!):\n\n[![LambCI Build Status](https://lambci-public-buildresults-e3xwlufrwb3i.s3.amazonaws.com/gh/lambci/lambci/branches/master/2c03c00899d9b188a928a910320eacdc.svg)](https://lambci-public-buildresults-e3xwlufrwb3i.s3.amazonaws.com/gh/lambci/lambci/branches/master/8f82e6f4df48d23dead65035f625f5c0.html)\n\nYou can see the URLs for the branch log and badge image near the start of the\noutput of your build logs (so you'll need to run at least one build on your\nbranch to get these):\n\n```\nBranch log: https://<bucket>/<project>/branches/master/<somehash>.html\nBranch status img: https://<bucket>/<project>/branches/master/<somehash>.svg\n```\n\n## Updating\n\nYou can update your CloudFormation stack at any time to change, add or remove the parameters – or even upgrade to a new version of LambCI.\n\nIn the AWS Console, go to `Services > CloudFormation`, select your LambCI stack in the list and then choose `Actions > Update Stack`. You can keep the same template selected (unless you're updating LambCI), and then when you click Next you can modify parameters like your GitHub token, Slack channel, etc.\n\nLambCI will do its best to update these parameters correctly, but if it fails or you run into trouble, just try setting them all to blank, updating, and then update again with the values you want.\n\nIf you've (only) modified `template.yaml` locally, then you'll need to run `npm run template` and use `build/versioned.yaml` to update your stack.\n\nIf you've modified other LambCI code locally, you can update with `npm run deploy` – this requires [AWS SAM CLI](https://github.com/awslabs/aws-sam-cli) to be installed.\n\n### Updating to 0.10.0 from earlier versions\n\nUpdating to 0.10.0 should Just Work™ using the new template – however GitHub\n[shut down the use of SNS hooks](https://developer.github.com/changes/2018-04-25-github-services-deprecation/),\nwhich is how LambCI was previously triggered, so you'll need to go through any\nrepositories on GitHub that you had setup with previous LambCI versions, remove\nthe SNS hook if it wasn't removed already (in `Settings`), and add the new webhook as laid out\nin [Installation](#installation).\n\n## Security\n\nThe default configuration passes secret environment variables to build commands, except when building forked repositories. This allows you to use your AWS credentials and Git/Slack tokens in your build commands to communicate with the rest of your stack. Set `inheritSecrets` to false to prevent this.\n\nHTML build logs are generated with random filenames, but are accessible to anyone who has the link. Set `s3PublicSecretNames` to false (only works for private repositories) to make build logs completely private (you'll need to use the AWS console to access them), or you can remove `s3Bucket` entirely – you can still see the build logs in the Lambda function output in CloudWatch Logs.\n\nBy default, the `/tmp` directory is removed each time – this is to prevent secrets from being leaked if your LambCI stack is building both private and public repositories. However, if you're only building private (trusted) repositories, then you can set the `clearTmp` config to false, and potentially cache files (eg, in `$HOME`) for use across builds (this is not guaranteed – it depends on whether the Lambda environment is kept \"warm\").\n\nIf you discover any security issues with LambCI please email [security@lambci.org](mailto:security@lambci.org).\n\n## Language Recipes\n\nThe default command is `npm ci && npm test` which will use Node.js 12.14.1 and npm 6.13.6.\n\nThe way to build with different Node.js versions, or other languages entirely,\nis just to override the `cmd` config property.\n\nLambCI comes with a collection of helper scripts to setup your environment\nfor languages not supported out of the box on AWS Lambda – that is,\nevery language except Node.js and Python 3.6\n\n### Node.js\n\nLambCI comes with [nave](https://github.com/isaacs/nave) installed and\navailable on the `PATH`, so if you wanted to run your npm install and tests\nusing Node.js v10.x, you could do specify:\n\n```json\n{\n  \"cmd\": \"nave use 10 bash -c 'npm ci && npm test'\"\n}\n```\n\nIf you're happy using the built-in npm to install, you could simplify this a little:\n\n```json\n{\n  \"cmd\": \"npm ci && nave use 10 npm test\"\n}\n```\n\nThere's currently no way to run multiple builds in parallel but you could\nhave processes run in parallel using a tool like\n[npm-run-all](https://github.com/mysticatea/npm-run-all) – the logs will be a\nlittle messy though!\n\nHere's an example package.json for running your tests in Node.js v8, v10 and v12 simultaneously:\n\n```json\n{\n  \"lambci\": {\n    \"cmd\": \"npm ci && npm run ci-all\"\n  },\n  \"scripts\": {\n    \"ci-all\": \"run-p ci:*\",\n    \"ci:node8\": \"nave use 8 npm test\",\n    \"ci:node10\": \"nave use 10 npm test\",\n    \"ci:node12\": \"nave use 12 npm test\"\n  },\n  \"devDependencies\": {\n    \"npm-run-all\": \"*\"\n  }\n}\n```\n\n### Python\n\nLambCI comes with [pip](https://pip.pypa.io) installed and available on the\n`PATH`, and Lambda has Python 3.6 already installed. `$HOME/.local/bin` is also\nadded to `PATH`, so local pip installs should work:\n\n```json\n{\n  \"cmd\": \"pip install --user tox && tox\"\n}\n```\n\n### Other Python versions with pyenv\n\nLambCI comes with [pyenv](https://github.com/pyenv/pyenv) installed and a\nscript you can source to setup the pyenv root and download prebuilt\nversions for you.\n\nCall it with the Python version you want (currently: `3.8.0`, `3.7.4`, `3.6.9` or\n`system`, which will use the 3.6 version already installed on Lambda):\n\n```json\n{\n  \"cmd\": \". ~/init/python 3.8.0 && pip install --user tox && tox\"\n}\n```\n\n### Java\n\nThe Java SDK is not installed on AWS Lambda, so needs to be downloaded as part of\nyour build – but the JRE *does* exist on Lambda, so the overall impact is small.\n\nLambCI includes a script you can source before running your build commands\nthat will install and setup the SDK correctly, as well as Maven (v3.6.3). Call\nit with the OpenJDK version you want (currently only `1.8.0`):\n\n```json\n{\n  \"cmd\": \". ~/init/java 1.8.0 && mvn install -B -V && mvn test\"\n}\n```\n\nYou can see an example of this working\n[here](https://github.com/mhart/test-ci-project/blob/71815a5e74d45f7ebb4682468587cfa352eae925/build-java-1.7.sh) –\nand the resulting [build log](https://lambci-public-buildresults-e3xwlufrwb3i.s3.amazonaws.com/gh/mhart/test-ci-project/builds/126/c03f86b6841738f6816a6146910b2435.html).\n\n### Go\n\nGo is not installed on AWS Lambda, so needs to be downloaded as part of\nyour build, but Go is quite small and well suited to running anywhere.\n\nLambCI includes a script you can source before running your build commands\nthat will install Go and set your `GOROOT` and `GOPATH` with the correct\ndirectory structure. Call it with the Go version you want (any of the versions\n[on the Go site](https://golang.org/dl/)):\n\n```json\n{\n  \"cmd\": \". ~/init/go 1.13.5 && make test\"\n}\n```\n\nYou can see examples of this working\n[here](https://github.com/mhart/test-ci-project/blob/71815a5e74d45f7ebb4682468587cfa352eae925/build-go.sh) –\nand the resulting [build log](https://lambci-public-buildresults-e3xwlufrwb3i.s3.amazonaws.com/gh/mhart/test-ci-project/builds/124/f8ddb3de3e00ea0faffdf59ddf7e8658.html).\n\n### Ruby\n\nRuby is not installed on AWS Lambda, so needs to be downloaded as part of\nyour build.\n\nLambCI includes a script you can source before running your build commands\nthat will install Ruby, rbenv, gem and bundler. Call it with the Ruby version\nyou want (currently: `2.7.0`, `2.6.5`, `2.5.7`, `2.4.9`, `2.3.8`, `2.2.10`, `2.1.10` or `2.0.0-p648`):\n\n```json\n{\n  \"cmd\": \". ~/init/ruby 2.7.0 && bundle install && bundle exec rake\"\n}\n```\n\nYou can see an example of this working\n[here](https://github.com/mhart/test-ci-project/blob/71815a5e74d45f7ebb4682468587cfa352eae925/build-ruby.sh) –\nand the resulting [build log](https://lambci-public-buildresults-e3xwlufrwb3i.s3.amazonaws.com/gh/mhart/test-ci-project/builds/123/05b9f81a9ca8599dc7fbea67ce2a62ad.html).\n\n### PHP\n\nPHP is not installed on AWS Lambda, so needs to be downloaded as part of\nyour build.\n\nLambCI includes a script you can source before running your build commands\nthat will install PHP, phpenv and composer. Call it with the PHP version\nyou want (currently: `7.3.13`, `7.2.26`, `7.1.33`, `7.0.32` or `5.6.38`):\n\n```json\n{\n  \"cmd\": \". ~/init/php 7.3.13 && composer install -n --prefer-dist && vendor/bin/phpunit\"\n}\n```\n\nThese versions are compiled using [php-build](https://github.com/php-build/php-build) with the\n[default config options](https://github.com/php-build/php-build/blob/7f2fe024f64793d15c82f2932dd9cf73aa3273ec/share/php-build/default_configure_options)\nand overrides of `--disable-cgi` and `--disable-fpm`.\n\n\nYou can see an example of this working\n[here](https://github.com/mhart/test-ci-project/blob/3f26c1d2a6d963c54fec8b24cc439bece894e033/build-php.sh) –\nand the resulting [build log](https://lambci-public-buildresults-e3xwlufrwb3i.s3.amazonaws.com/gh/mhart/test-ci-project/builds/140/3e9954f8a74dda5f4050b65bcf56cde8.html).\n\n## Extending with ECS\n\nLambCI can run tasks on an ECS cluster, which means you can perform all of your build tasks in a Docker container and not be subject to the same restrictions you have in the Lambda environment.\n\nThis needs to be documented further – for now you'll have to go off the source and check out the [lambci/ecs](https://github.com/lambci/ecs) repo.\n\n## Questions\n\n### What does the Lambda function do?\n\n  1. Receives notification from GitHub (via a webhook)\n  1. Looks up config in DynamoDB\n  1. Clones git repo using a bundled git binary\n  1. Looks up config files in repo\n  1. Runs install and build cmds on Lambda (or starts ECS task)\n  1. Updates Slack and GitHub statuses along the way (optionally SNS for email, etc)\n  1. Uploads build logs/statuses to S3\n\n## License\n\nMIT\n"
        },
        {
          "name": "actions",
          "type": "tree",
          "content": null
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "cfn",
          "type": "tree",
          "content": null
        },
        {
          "name": "db",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.5859375,
          "content": "version: '2.4'\nservices:\n  lambci:\n    build:\n      context: ./build\n      dockerfile: ../Dockerfile\n    image: lambci/lambci\n    # Lambda only has these files/links in /dev:\n    # /dev/full\n    # /dev/null\n    # /dev/random\n    # /dev/stderr\n    # /dev/stdin\n    # /dev/stdout\n    # /dev/urandom\n    # /dev/zero\n    volumes:\n      - /var/empty:/dev/fd\n      - /var/empty:/dev/shm\n      - /var/empty:/dev/mqueue\n      # - /var/empty:/dev/pts\n      - /dev/null:/dev/core\n      - /dev/null:/dev/tty\n      # - type: tmpfs\n        # target: /tmp\n        # tmpfs:\n          # size: 500M\n    mem_limit: 3G\n"
        },
        {
          "name": "home",
          "type": "tree",
          "content": null
        },
        {
          "name": "html",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.js",
          "type": "blob",
          "size": 0.849609375,
          "content": "var config = require('./utils/config')\nvar log = require('./utils/log')\nvar cfn = require('./cfn')\nvar actions = require('./actions')\nvar webhook = require('./sources/webhook')\n\nexports.handler = function(event, context, cb) {\n\n  log.init(`LambCI v${config.VERSION} triggered on stack \"${config.STACK}\"\\n`) // STACK is usually 'lambci'\n\n  // Check if it's the CloudFormation stack calling us\n  if (event.ResourceType == 'Custom::ConfigUpdater') {\n\n    return cfn.update(event, context, cb)\n\n  // Or a custom (manual) event\n  } else if (typeof actions[event.action] == 'function') {\n\n    return actions[event.action](event, context, cb)\n\n  // Otherwise it should be a GitHub webhook\n  } else if (event.httpMethod == 'POST') {\n\n    return webhook.build(event, context, cb)\n  }\n\n  log.error('Unknown event, ignoring:\\n%j', event)\n  return cb(new Error('Unknown event'))\n}\n\n"
        },
        {
          "name": "notifications",
          "type": "tree",
          "content": null
        },
        {
          "name": "package-lock.json",
          "type": "blob",
          "size": 12.919921875,
          "content": "{\n  \"name\": \"lambci\",\n  \"version\": \"0.11.2\",\n  \"lockfileVersion\": 1,\n  \"requires\": true,\n  \"dependencies\": {\n    \"ansi_up\": {\n      \"version\": \"3.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/ansi_up/-/ansi_up-3.0.0.tgz\",\n      \"integrity\": \"sha1-J/Rdj0V9nO/1nk6gPI5vE8GjA+g=\"\n    },\n    \"assertion-error\": {\n      \"version\": \"1.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/assertion-error/-/assertion-error-1.1.0.tgz\",\n      \"integrity\": \"sha512-jgsaNduz+ndvGyFt3uSuWqvy4lCnIJiovtouQN5JZHOKCS2QuhEdbcQHFhVksz2N2U9hXJo8odG7ETyWlEeuDw==\",\n      \"dev\": true\n    },\n    \"aws-sdk\": {\n      \"version\": \"2.382.0\",\n      \"resolved\": \"https://registry.npmjs.org/aws-sdk/-/aws-sdk-2.382.0.tgz\",\n      \"integrity\": \"sha512-wGjZLYo2ZxGTlj2cHy/0zOfYJKUVBQYG1vpW4Cnbgo3HTtOu906a6tqkiD8QuN0EyEkn7i+wyjSiUFOCh3T/2g==\",\n      \"dev\": true,\n      \"requires\": {\n        \"buffer\": \"4.9.1\",\n        \"events\": \"1.1.1\",\n        \"ieee754\": \"1.1.8\",\n        \"jmespath\": \"0.15.0\",\n        \"querystring\": \"0.2.0\",\n        \"sax\": \"1.2.1\",\n        \"url\": \"0.10.3\",\n        \"uuid\": \"3.1.0\",\n        \"xml2js\": \"0.4.19\"\n      }\n    },\n    \"balanced-match\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.0.tgz\",\n      \"integrity\": \"sha1-ibTRmasr7kneFk6gK4nORi1xt2c=\",\n      \"dev\": true\n    },\n    \"base64-js\": {\n      \"version\": \"1.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/base64-js/-/base64-js-1.3.0.tgz\",\n      \"integrity\": \"sha512-ccav/yGvoa80BQDljCxsmmQ3Xvx60/UpBIij5QN21W3wBi/hhIC9OoO+KLpu9IJTS9j4DRVJ3aDDF9cMSoa2lw==\",\n      \"dev\": true\n    },\n    \"brace-expansion\": {\n      \"version\": \"1.1.11\",\n      \"resolved\": \"https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz\",\n      \"integrity\": \"sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==\",\n      \"dev\": true,\n      \"requires\": {\n        \"balanced-match\": \"^1.0.0\",\n        \"concat-map\": \"0.0.1\"\n      }\n    },\n    \"browser-stdout\": {\n      \"version\": \"1.3.1\",\n      \"resolved\": \"https://registry.npmjs.org/browser-stdout/-/browser-stdout-1.3.1.tgz\",\n      \"integrity\": \"sha512-qhAVI1+Av2X7qelOfAIYwXONood6XlZE/fXaBSmW/T5SzLAmCgzi+eiWE7fUvbHaeNBQH13UftjpXxsfLkMpgw==\",\n      \"dev\": true\n    },\n    \"buffer\": {\n      \"version\": \"4.9.1\",\n      \"resolved\": \"https://registry.npmjs.org/buffer/-/buffer-4.9.1.tgz\",\n      \"integrity\": \"sha1-bRu2AbB6TvztlwlBMgkwJ8lbwpg=\",\n      \"dev\": true,\n      \"requires\": {\n        \"base64-js\": \"^1.0.2\",\n        \"ieee754\": \"^1.1.4\",\n        \"isarray\": \"^1.0.0\"\n      }\n    },\n    \"chai\": {\n      \"version\": \"4.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/chai/-/chai-4.2.0.tgz\",\n      \"integrity\": \"sha512-XQU3bhBukrOsQCuwZndwGcCVQHyZi53fQ6Ys1Fym7E4olpIqqZZhhoFJoaKVvV17lWQoXYwgWN2nF5crA8J2jw==\",\n      \"dev\": true,\n      \"requires\": {\n        \"assertion-error\": \"^1.1.0\",\n        \"check-error\": \"^1.0.2\",\n        \"deep-eql\": \"^3.0.1\",\n        \"get-func-name\": \"^2.0.0\",\n        \"pathval\": \"^1.1.0\",\n        \"type-detect\": \"^4.0.5\"\n      }\n    },\n    \"check-error\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/check-error/-/check-error-1.0.2.tgz\",\n      \"integrity\": \"sha1-V00xLt2Iu13YkS6Sht1sCu1KrII=\",\n      \"dev\": true\n    },\n    \"commander\": {\n      \"version\": \"2.15.1\",\n      \"resolved\": \"https://registry.npmjs.org/commander/-/commander-2.15.1.tgz\",\n      \"integrity\": \"sha512-VlfT9F3V0v+jr4yxPc5gg9s62/fIVWsd2Bk2iD435um1NlGMYdVCq+MjcXnhYq2icNOizHr1kK+5TI6H0Hy0ag==\",\n      \"dev\": true\n    },\n    \"concat-map\": {\n      \"version\": \"0.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz\",\n      \"integrity\": \"sha1-2Klr13/Wjfd5OnMDajug1UBdR3s=\",\n      \"dev\": true\n    },\n    \"debug\": {\n      \"version\": \"3.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/debug/-/debug-3.1.0.tgz\",\n      \"integrity\": \"sha512-OX8XqP7/1a9cqkxYw2yXss15f26NKWBpDXQd0/uK/KPqdQhxbPa994hnzjcE2VqQpDslf55723cKPUOGSmMY3g==\",\n      \"dev\": true,\n      \"requires\": {\n        \"ms\": \"2.0.0\"\n      }\n    },\n    \"deep-eql\": {\n      \"version\": \"3.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/deep-eql/-/deep-eql-3.0.1.tgz\",\n      \"integrity\": \"sha512-+QeIQyN5ZuO+3Uk5DYh6/1eKO0m0YmJFGNmFHGACpf1ClL1nmlV/p4gNgbl2pJGxgXb4faqo6UE+M5ACEMyVcw==\",\n      \"dev\": true,\n      \"requires\": {\n        \"type-detect\": \"^4.0.0\"\n      }\n    },\n    \"diff\": {\n      \"version\": \"3.5.0\",\n      \"resolved\": \"https://registry.npmjs.org/diff/-/diff-3.5.0.tgz\",\n      \"integrity\": \"sha512-A46qtFgd+g7pDZinpnwiRJtxbC1hpgf0uzP3iG89scHk0AUC7A1TGxf5OiiOUv/JMZR8GOt8hL900hV0bOy5xA==\",\n      \"dev\": true\n    },\n    \"docker-lambda\": {\n      \"version\": \"0.15.3\",\n      \"resolved\": \"https://registry.npmjs.org/docker-lambda/-/docker-lambda-0.15.3.tgz\",\n      \"integrity\": \"sha512-/YI2dnMrW5WcHBtU1lJLhmtr1hgd3UK+QiKbT/EdbQaUMmwoH11DBM0yC5LZgR2p+VEpOtaGgBvdKHRnXBxfpg==\",\n      \"dev\": true\n    },\n    \"escape-string-regexp\": {\n      \"version\": \"1.0.5\",\n      \"resolved\": \"https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz\",\n      \"integrity\": \"sha1-G2HAViGQqN/2rjuyzwIAyhMLhtQ=\",\n      \"dev\": true\n    },\n    \"events\": {\n      \"version\": \"1.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/events/-/events-1.1.1.tgz\",\n      \"integrity\": \"sha1-nr23Y1rQmccNzEwqH1AEKI6L2SQ=\",\n      \"dev\": true\n    },\n    \"fs.realpath\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz\",\n      \"integrity\": \"sha1-FQStJSMVjKpA20onh8sBQRmU6k8=\",\n      \"dev\": true\n    },\n    \"get-func-name\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/get-func-name/-/get-func-name-2.0.0.tgz\",\n      \"integrity\": \"sha1-6td0q+5y4gQJQzoGY2YCPdaIekE=\",\n      \"dev\": true\n    },\n    \"glob\": {\n      \"version\": \"7.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/glob/-/glob-7.1.2.tgz\",\n      \"integrity\": \"sha512-MJTUg1kjuLeQCJ+ccE4Vpa6kKVXkPYJ2mOCQyUuKLcLQsdrMCpBPUi8qVE6+YuaJkozeA9NusTAw3hLr8Xe5EQ==\",\n      \"dev\": true,\n      \"requires\": {\n        \"fs.realpath\": \"^1.0.0\",\n        \"inflight\": \"^1.0.4\",\n        \"inherits\": \"2\",\n        \"minimatch\": \"^3.0.4\",\n        \"once\": \"^1.3.0\",\n        \"path-is-absolute\": \"^1.0.0\"\n      }\n    },\n    \"growl\": {\n      \"version\": \"1.10.5\",\n      \"resolved\": \"https://registry.npmjs.org/growl/-/growl-1.10.5.tgz\",\n      \"integrity\": \"sha512-qBr4OuELkhPenW6goKVXiv47US3clb3/IbuWF9KNKEijAy9oeHxU9IgzjvJhHkUzhaj7rOUD7+YGWqUjLp5oSA==\",\n      \"dev\": true\n    },\n    \"has-flag\": {\n      \"version\": \"3.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz\",\n      \"integrity\": \"sha1-tdRU3CGZriJWmfNGfloH87lVuv0=\",\n      \"dev\": true\n    },\n    \"he\": {\n      \"version\": \"1.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/he/-/he-1.1.1.tgz\",\n      \"integrity\": \"sha1-k0EP0hsAlzUVH4howvJx80J+I/0=\",\n      \"dev\": true\n    },\n    \"ieee754\": {\n      \"version\": \"1.1.8\",\n      \"resolved\": \"https://registry.npmjs.org/ieee754/-/ieee754-1.1.8.tgz\",\n      \"integrity\": \"sha1-vjPUCsEO8ZJnAfbwii2G+/0a0+Q=\",\n      \"dev\": true\n    },\n    \"inflight\": {\n      \"version\": \"1.0.6\",\n      \"resolved\": \"https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz\",\n      \"integrity\": \"sha1-Sb1jMdfQLQwJvJEKEHW6gWW1bfk=\",\n      \"dev\": true,\n      \"requires\": {\n        \"once\": \"^1.3.0\",\n        \"wrappy\": \"1\"\n      }\n    },\n    \"inherits\": {\n      \"version\": \"2.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/inherits/-/inherits-2.0.3.tgz\",\n      \"integrity\": \"sha1-Yzwsg+PaQqUC9SRmAiSA9CCCYd4=\",\n      \"dev\": true\n    },\n    \"isarray\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz\",\n      \"integrity\": \"sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE=\",\n      \"dev\": true\n    },\n    \"jmespath\": {\n      \"version\": \"0.15.0\",\n      \"resolved\": \"https://registry.npmjs.org/jmespath/-/jmespath-0.15.0.tgz\",\n      \"integrity\": \"sha1-o/Iiqarp+Wb10nx5ZRDigJF2Qhc=\",\n      \"dev\": true\n    },\n    \"minimatch\": {\n      \"version\": \"3.0.4\",\n      \"resolved\": \"https://registry.npmjs.org/minimatch/-/minimatch-3.0.4.tgz\",\n      \"integrity\": \"sha512-yJHVQEhyqPLUTgt9B83PXu6W3rx4MvvHvSUvToogpwoGDOUQ+yDrR0HRot+yOCdCO7u4hX3pWft6kWBBcqh0UA==\",\n      \"dev\": true,\n      \"requires\": {\n        \"brace-expansion\": \"^1.1.7\"\n      }\n    },\n    \"minimist\": {\n      \"version\": \"0.0.8\",\n      \"resolved\": \"https://registry.npmjs.org/minimist/-/minimist-0.0.8.tgz\",\n      \"integrity\": \"sha1-hX/Kv8M5fSYluCKCYuhqp6ARsF0=\",\n      \"dev\": true\n    },\n    \"mkdirp\": {\n      \"version\": \"0.5.1\",\n      \"resolved\": \"https://registry.npmjs.org/mkdirp/-/mkdirp-0.5.1.tgz\",\n      \"integrity\": \"sha1-MAV0OOrGz3+MR2fzhkjWaX11yQM=\",\n      \"dev\": true,\n      \"requires\": {\n        \"minimist\": \"0.0.8\"\n      }\n    },\n    \"mocha\": {\n      \"version\": \"5.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/mocha/-/mocha-5.2.0.tgz\",\n      \"integrity\": \"sha512-2IUgKDhc3J7Uug+FxMXuqIyYzH7gJjXECKe/w43IGgQHTSj3InJi+yAA7T24L9bQMRKiUEHxEX37G5JpVUGLcQ==\",\n      \"dev\": true,\n      \"requires\": {\n        \"browser-stdout\": \"1.3.1\",\n        \"commander\": \"2.15.1\",\n        \"debug\": \"3.1.0\",\n        \"diff\": \"3.5.0\",\n        \"escape-string-regexp\": \"1.0.5\",\n        \"glob\": \"7.1.2\",\n        \"growl\": \"1.10.5\",\n        \"he\": \"1.1.1\",\n        \"minimatch\": \"3.0.4\",\n        \"mkdirp\": \"0.5.1\",\n        \"supports-color\": \"5.4.0\"\n      }\n    },\n    \"ms\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/ms/-/ms-2.0.0.tgz\",\n      \"integrity\": \"sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g=\",\n      \"dev\": true\n    },\n    \"nave\": {\n      \"version\": \"3.2.1\",\n      \"resolved\": \"https://registry.npmjs.org/nave/-/nave-3.2.1.tgz\",\n      \"integrity\": \"sha512-wLkr0jG67/AD7WQjWShRnhQ+iNvysYIy1N6Xr5GD14qPGW6lUJpvE1z44i8DyqOH1a/85kXZRkKsiv1F/mActA==\"\n    },\n    \"neo-async\": {\n      \"version\": \"2.6.1\",\n      \"resolved\": \"https://registry.npmjs.org/neo-async/-/neo-async-2.6.1.tgz\",\n      \"integrity\": \"sha512-iyam8fBuCUpWeKPGpaNMetEocMt364qkCsfL9JuhjXX6dRnguRVOfk2GZaDpPjcOKiiXCPINZC1GczQ7iTq3Zw==\"\n    },\n    \"once\": {\n      \"version\": \"1.4.0\",\n      \"resolved\": \"https://registry.npmjs.org/once/-/once-1.4.0.tgz\",\n      \"integrity\": \"sha1-WDsap3WWHUsROsF9nFC6753Xa9E=\",\n      \"dev\": true,\n      \"requires\": {\n        \"wrappy\": \"1\"\n      }\n    },\n    \"path-is-absolute\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz\",\n      \"integrity\": \"sha1-F0uSaHNVNP+8es5r9TpanhtcX18=\",\n      \"dev\": true\n    },\n    \"pathval\": {\n      \"version\": \"1.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/pathval/-/pathval-1.1.0.tgz\",\n      \"integrity\": \"sha1-uULm1L3mUwBe9rcTYd74cn0GReA=\",\n      \"dev\": true\n    },\n    \"punycode\": {\n      \"version\": \"1.3.2\",\n      \"resolved\": \"https://registry.npmjs.org/punycode/-/punycode-1.3.2.tgz\",\n      \"integrity\": \"sha1-llOgNvt8HuQjQvIyXM7v6jkmxI0=\",\n      \"dev\": true\n    },\n    \"querystring\": {\n      \"version\": \"0.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/querystring/-/querystring-0.2.0.tgz\",\n      \"integrity\": \"sha1-sgmEkgO7Jd+CDadW50cAWHhSFiA=\",\n      \"dev\": true\n    },\n    \"sax\": {\n      \"version\": \"1.2.1\",\n      \"resolved\": \"https://registry.npmjs.org/sax/-/sax-1.2.1.tgz\",\n      \"integrity\": \"sha1-e45lYZCyKOgaZq6nSEgNgozS03o=\",\n      \"dev\": true\n    },\n    \"supports-color\": {\n      \"version\": \"5.4.0\",\n      \"resolved\": \"https://registry.npmjs.org/supports-color/-/supports-color-5.4.0.tgz\",\n      \"integrity\": \"sha512-zjaXglF5nnWpsq470jSv6P9DwPvgLkuapYmfDm3JWOm0vkNTVF2tI4UrN2r6jH1qM/uc/WtxYY1hYoA2dOKj5w==\",\n      \"dev\": true,\n      \"requires\": {\n        \"has-flag\": \"^3.0.0\"\n      }\n    },\n    \"type-detect\": {\n      \"version\": \"4.0.8\",\n      \"resolved\": \"https://registry.npmjs.org/type-detect/-/type-detect-4.0.8.tgz\",\n      \"integrity\": \"sha512-0fr/mIH1dlO+x7TlcMy+bIDqKPsw/70tVyeHW787goQjhmqaZe10uwLujubK9q9Lg6Fiho1KUKDYz0Z7k7g5/g==\",\n      \"dev\": true\n    },\n    \"url\": {\n      \"version\": \"0.10.3\",\n      \"resolved\": \"https://registry.npmjs.org/url/-/url-0.10.3.tgz\",\n      \"integrity\": \"sha1-Ah5NnHcF8hu/N9A861h2dAJ3TGQ=\",\n      \"dev\": true,\n      \"requires\": {\n        \"punycode\": \"1.3.2\",\n        \"querystring\": \"0.2.0\"\n      }\n    },\n    \"uuid\": {\n      \"version\": \"3.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/uuid/-/uuid-3.1.0.tgz\",\n      \"integrity\": \"sha512-DIWtzUkw04M4k3bf1IcpS2tngXEL26YUD2M0tMDUpnUrz2hgzUBlD55a4FjdLGPvfHxS6uluGWvaVEqgBcVa+g==\",\n      \"dev\": true\n    },\n    \"wrappy\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz\",\n      \"integrity\": \"sha1-tSQ9jz7BqjXxNkYFvA0QNuMKtp8=\",\n      \"dev\": true\n    },\n    \"xml2js\": {\n      \"version\": \"0.4.19\",\n      \"resolved\": \"https://registry.npmjs.org/xml2js/-/xml2js-0.4.19.tgz\",\n      \"integrity\": \"sha512-esZnJZJOiJR9wWKMyuvSE1y6Dq5LCuJanqhxslH2bxM6duahNZ+HMpCLhBQGZkbX6xRf8x1Y2eJlgt2q3qo49Q==\",\n      \"dev\": true,\n      \"requires\": {\n        \"sax\": \">=0.6.0\",\n        \"xmlbuilder\": \"~9.0.1\"\n      }\n    },\n    \"xmlbuilder\": {\n      \"version\": \"9.0.7\",\n      \"resolved\": \"https://registry.npmjs.org/xmlbuilder/-/xmlbuilder-9.0.7.tgz\",\n      \"integrity\": \"sha1-Ey7mPS7FVlxVfiD0wi35rKaGsQ0=\",\n      \"dev\": true\n    }\n  }\n}\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.42578125,
          "content": "{\n  \"name\": \"lambci\",\n  \"version\": \"0.11.2\",\n  \"description\": \"A continuous integration system built on AWS Lambda\",\n  \"repository\": \"lambci/lambci\",\n  \"author\": \"Michael Hart <michael@soothbooth.com>\",\n  \"license\": \"MIT\",\n  \"main\": \"index.js\",\n  \"engines\": {\n    \"node\": \">=8.0.0\"\n  },\n  \"scripts\": {\n    \"test\": \"mocha\",\n    \"integration\": \"node test/integration.js\",\n    \"v\": \"node -p 'require(\\\"./package.json\\\").version'\",\n    \"template\": \"sed -E \\\"s_CodeUri:.+\\\\$_CodeUri: {Bucket: {'Fn::Sub': 'lambci-\\\\${AWS::Region}'}, Key: fn/lambci-build-$(npm run -s v).zip}_\\\" template.yaml > build/versioned.yaml\",\n    \"s3\": \"npm run zip && ./publish.sh\",\n    \"zip\": \"rm -rf build/lambda.zip node_modules && npm ci --prod && zip -qyr build/lambda.zip . -x@.lambdaignore\",\n    \"package\": \"npm run zip && sam package --template-file template.yaml --s3-bucket ${S3_BUCKET:-lambci} --s3-prefix ${S3_PREFIX:-package} --output-template-file build/packaged.yaml\",\n    \"publish-sar\": \"npm run package && sam publish -t build/packaged.yaml\",\n    \"deploy\": \"npm run package && sam deploy --stack-name ${STACK:-lambci} --template-file build/packaged.yaml --capabilities CAPABILITY_IAM\",\n    \"docker\": \"npm run zip && docker-compose build\"\n  },\n  \"dependencies\": {\n    \"ansi_up\": \"^3.0.0\",\n    \"nave\": \"^3.2.1\",\n    \"neo-async\": \"^2.6.1\"\n  },\n  \"devDependencies\": {\n    \"aws-sdk\": \"^2.382.0\",\n    \"chai\": \"^4.2.0\",\n    \"docker-lambda\": \"^0.15.3\",\n    \"mocha\": \"^5.2.0\"\n  }\n}\n"
        },
        {
          "name": "publish.sh",
          "type": "blob",
          "size": 1.33203125,
          "content": "#!/bin/bash -ex\n\nREGIONS=\"$(aws ssm get-parameters-by-path --path /aws/service/global-infrastructure/services/lambda/regions \\\n  --query 'Parameters[].Value' --output text | tr '[:blank:]' '\\n' | grep -v -e ^cn- -e ^us-gov- | sort -r)\"\n\nVERSION=$(npm run -s v)\n\necho $VERSION > /tmp/lambci.txt\n\naws s3api put-object --bucket lambci --key fn/lambci-build-${VERSION}.zip --body build/lambda.zip --acl public-read\n\naws s3api copy-object --copy-source lambci/fn/lambci-build-${VERSION}.zip --bucket lambci --key fn/lambci-build-latest.zip --acl public-read &\n\naws s3api put-object --bucket lambci --key fn/latest.txt --body /tmp/lambci.txt --acl public-read &\n\nnpm run template\naws s3api put-object --bucket lambci --key templates/lambci.template --body build/versioned.yaml --acl public-read &\naws s3api put-object --bucket lambci --key templates/template.yaml --body build/versioned.yaml --acl public-read &\n\nfor region in $REGIONS; do\n  aws s3api copy-object --region $region --copy-source lambci/fn/lambci-build-${VERSION}.zip --bucket lambci-${region} --key fn/lambci-build-${VERSION}.zip --acl public-read && \\\n  aws s3api copy-object --region $region --copy-source lambci-${region}/fn/lambci-build-${VERSION}.zip --bucket lambci-${region} --key fn/lambci-build-latest.zip --acl public-read &\ndone\n\nfor job in $(jobs -p); do\n  wait $job\ndone\n\nrm /tmp/lambci.txt\n"
        },
        {
          "name": "sources",
          "type": "tree",
          "content": null
        },
        {
          "name": "template.yaml",
          "type": "blob",
          "size": 5.662109375,
          "content": "AWSTemplateFormatVersion: 2010-09-09\nTransform: AWS::Serverless-2016-10-31\nDescription: LambCI function and supporting services (see github.com/lambci/lambci for documentation)\nMetadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups:\n      - Label:\n          default: GitHub Configuration\n        Parameters:\n          - GithubToken\n          - GithubSecret\n      - Label:\n          default: Slack Configuration (optional)\n        Parameters:\n          - SlackToken\n          - SlackChannel\n  AWS::ServerlessRepo::Application:\n    Name: lambci\n    Description: A continuous integration system built on AWS Lambda\n    Author: LambCI\n    SpdxLicenseId: MIT\n    LicenseUrl: LICENSE\n    ReadmeUrl: README-SAR.md\n    Labels: ['continuous-integration', 'ci', 'git', 'github', 'build', 'lambda', 'lambci']\n    HomePageUrl: https://github.com/lambci/lambci\n    SemanticVersion: 0.11.2\n    SourceCodeUrl: https://github.com/lambci/lambci/tree/v0.11.2\n\nParameters:\n  GithubToken:\n    Description: GitHub OAuth token\n    Type: String\n    Default: ''\n    NoEcho : true\n    AllowedPattern: '^$|^[0-9a-f]{40}$'\n    ConstraintDescription: Must be empty or a 40 char GitHub token\n  GithubSecret:\n    Description: GitHub webhook secret\n    Type: String\n    Default: ''\n    NoEcho : true\n  SlackToken:\n    Description: (optional) Slack API token\n    Type: String\n    Default: ''\n    NoEcho : true\n    AllowedPattern: '^$|^xox.-[0-9]+-.+'\n    ConstraintDescription: 'Must be empty or a valid Slack token, eg: xoxb-1234'\n  SlackChannel:\n    Description: (optional) Slack channel\n    Type: String\n    Default: '#general'\n    AllowedPattern: '^$|^#.+'\n    ConstraintDescription: 'Must be empty or a valid Slack channel, eg: #general'\n\n\nResources:\n\n  # Uncomment this (and permissions below) to add an SNS topic to publish build statuses to:\n  # StatusTopic:\n    # Type: AWS::SNS::Topic\n    # Properties:\n      # DisplayName: LambCI\n\n  BuildLambda:\n    Type: AWS::Serverless::Function\n    Properties:\n      FunctionName: !Sub ${AWS::StackName}-build\n      Description: !Sub 'LambCI build function for stack: ${AWS::StackName}'\n      Runtime: provided\n      CodeUri: build/lambda.zip\n      Handler: index.handler\n      Timeout: 900\n      MemorySize: 3008\n      Layers:\n        - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:553035198032:layer:lambci-base:13\n        - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:553035198032:layer:gcc72-lambda1:4\n      Events:\n        Webhook:\n          Type: Api\n          Properties:\n            Path: /lambci/webhook\n            Method: POST\n      Policies:\n        - S3FullAccessPolicy:\n            BucketName: !Ref BuildResults\n        - DynamoDBCrudPolicy:\n            TableName: !Ref ConfigTable\n        - Statement:\n          - Action:\n              - dynamodb:GetItem\n              - dynamodb:BatchGetItem\n              - dynamodb:Query\n              - dynamodb:PutItem\n              - dynamodb:UpdateItem\n              - dynamodb:BatchWriteItem\n            Effect: Allow\n            Resource:\n              - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${BuildsTable}\n              - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${BuildsTable}/index/*\n        - LambdaInvokePolicy:\n            FunctionName: !Sub ${AWS::StackName}-build\n        # Uncomment this if you've added an SNS topic to publish to (above)\n        # - SNSPublishMessagePolicy:\n            # TopicName: !Ref StatusTopic\n\n  BuildResults:\n    Type: AWS::S3::Bucket\n\n  ConfigTable:\n    Type: AWS::Serverless::SimpleTable\n    Properties:\n      TableName: !Sub ${AWS::StackName}-config\n      PrimaryKey:\n        Name: project\n        Type: String\n\n  BuildsTable:\n    Type: AWS::DynamoDB::Table\n    Properties:\n      TableName: !Sub ${AWS::StackName}-builds\n      BillingMode: PAY_PER_REQUEST\n      AttributeDefinitions:\n        - AttributeName: project\n          AttributeType: S\n        - AttributeName: buildNum\n          AttributeType: N\n        - AttributeName: trigger\n          AttributeType: S\n        - AttributeName: commit\n          AttributeType: S\n        - AttributeName: requestId\n          AttributeType: S\n      KeySchema:\n        - AttributeName: project\n          KeyType: HASH\n        - AttributeName: buildNum\n          KeyType: RANGE\n      LocalSecondaryIndexes:\n        - IndexName: trigger\n          KeySchema:\n            - AttributeName: project\n              KeyType: HASH\n            - AttributeName: trigger\n              KeyType: RANGE\n          Projection:\n            ProjectionType: KEYS_ONLY\n        - IndexName: commit\n          KeySchema:\n            - AttributeName: project\n              KeyType: HASH\n            - AttributeName: commit\n              KeyType: RANGE\n          Projection:\n            ProjectionType: KEYS_ONLY\n        - IndexName: requestId\n          KeySchema:\n            - AttributeName: project\n              KeyType: HASH\n            - AttributeName: requestId\n              KeyType: RANGE\n          Projection:\n            ProjectionType: KEYS_ONLY\n\n  ConfigUpdater:\n    Type: Custom::ConfigUpdater\n    DependsOn: ConfigTable\n    Properties:\n      ServiceToken: !GetAtt BuildLambda.Arn\n      GithubToken: !Ref GithubToken\n      GithubSecret: !Ref GithubSecret\n      SlackToken: !Ref SlackToken\n      SlackChannel: !Ref SlackChannel\n      S3Bucket: !Ref BuildResults\n      WebhookUrl: !Sub https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/lambci/webhook\n\n\nOutputs:\n\n  S3Bucket:\n    Description: Name of the build results S3 bucket, see github.com/lambci/lambci\n    Value: !Ref BuildResults\n\n  WebhookUrl:\n    Description: GitHub webhook URL\n    Value: !Sub https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/lambci/webhook\n\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}