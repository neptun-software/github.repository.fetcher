{
  "metadata": {
    "timestamp": 1736568814835,
    "page": 974,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk3OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "fluxcd/flux2-kustomize-helm-example",
      "stars": 1033,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0302734375,
          "content": "# GitHub actions binaries\nbin/\n"
        },
        {
          "name": ".sourceignore",
          "type": "blob",
          "size": 0.173828125,
          "content": "# Flux ignore\n# https://fluxcd.io/flux/components/source/gitrepositories/#excluding-files\n\n# Exclude all\n/*\n\n# Include manifest directories\n!/apps/\n!/clusters/\n!/infrastructure/\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.39453125,
          "content": "# flux2-kustomize-helm-example\n\n[![test](https://github.com/fluxcd/flux2-kustomize-helm-example/workflows/test/badge.svg)](https://github.com/fluxcd/flux2-kustomize-helm-example/actions)\n[![e2e](https://github.com/fluxcd/flux2-kustomize-helm-example/workflows/e2e/badge.svg)](https://github.com/fluxcd/flux2-kustomize-helm-example/actions)\n[![license](https://img.shields.io/github/license/fluxcd/flux2-kustomize-helm-example.svg)](https://github.com/fluxcd/flux2-kustomize-helm-example/blob/main/LICENSE)\n\nFor this example we assume a scenario with two clusters: staging and production.\nThe end goal is to leverage Flux and Kustomize to manage both clusters while minimizing duplicated declarations.\n\nWe will configure Flux to install, test and upgrade a demo app using\n`HelmRepository` and `HelmRelease` custom resources.\nFlux will monitor the Helm repository, and it will automatically\nupgrade the Helm releases to their latest chart version based on semver ranges.\n\n## Prerequisites\n\nYou will need a Kubernetes cluster version 1.28 or newer.\nFor a quick local test, you can use [Kubernetes kind](https://kind.sigs.k8s.io/docs/user/quick-start/).\nAny other Kubernetes setup will work as well though.\n\nIn order to follow the guide you'll need a GitHub account and a\n[personal access token](https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line)\nthat can create repositories (check all permissions under `repo`).\n\nInstall the Flux CLI on macOS or Linux using Homebrew:\n\n```sh\nbrew install fluxcd/tap/flux\n```\n\nOr install the CLI by downloading precompiled binaries using a Bash script:\n\n```sh\ncurl -s https://fluxcd.io/install.sh | sudo bash\n```\n\n## Repository structure\n\nThe Git repository contains the following top directories:\n\n- **apps** dir contains Helm releases with a custom configuration per cluster\n- **infrastructure** dir contains common infra tools such as ingress-nginx and cert-manager\n- **clusters** dir contains the Flux configuration per cluster\n\n```\n├── apps\n│   ├── base\n│   ├── production \n│   └── staging\n├── infrastructure\n│   ├── configs\n│   └── controllers\n└── clusters\n    ├── production\n    └── staging\n```\n\n### Applications\n\nThe apps configuration is structured into:\n\n- **apps/base/** dir contains namespaces and Helm release definitions\n- **apps/production/** dir contains the production Helm release values\n- **apps/staging/** dir contains the staging values\n\n```\n./apps/\n├── base\n│   └── podinfo\n│       ├── kustomization.yaml\n│       ├── namespace.yaml\n│       ├── release.yaml\n│       └── repository.yaml\n├── production\n│   ├── kustomization.yaml\n│   └── podinfo-patch.yaml\n└── staging\n    ├── kustomization.yaml\n    └── podinfo-patch.yaml\n```\n\nIn **apps/base/podinfo/** dir we have a Flux `HelmRelease` with common values for both clusters:\n\n```yaml\napiVersion: helm.toolkit.fluxcd.io/v2\nkind: HelmRelease\nmetadata:\n  name: podinfo\n  namespace: podinfo\nspec:\n  releaseName: podinfo\n  chart:\n    spec:\n      chart: podinfo\n      sourceRef:\n        kind: HelmRepository\n        name: podinfo\n        namespace: flux-system\n  interval: 50m\n  values:\n    ingress:\n      enabled: true\n      className: nginx\n```\n\nIn **apps/staging/** dir we have a Kustomize patch with the staging specific values:\n\n```yaml\napiVersion: helm.toolkit.fluxcd.io/v2\nkind: HelmRelease\nmetadata:\n  name: podinfo\nspec:\n  chart:\n    spec:\n      version: \">=1.0.0-alpha\"\n  test:\n    enable: true\n  values:\n    ingress:\n      hosts:\n        - host: podinfo.staging\n```\n\nNote that with ` version: \">=1.0.0-alpha\"` we configure Flux to automatically upgrade\nthe `HelmRelease` to the latest chart version including alpha, beta and pre-releases.\n\nIn **apps/production/** dir we have a Kustomize patch with the production specific values:\n\n```yaml\napiVersion: helm.toolkit.fluxcd.io/v2\nkind: HelmRelease\nmetadata:\n  name: podinfo\n  namespace: podinfo\nspec:\n  chart:\n    spec:\n      version: \">=1.0.0\"\n  values:\n    ingress:\n      hosts:\n        - host: podinfo.production\n```\n\nNote that with ` version: \">=1.0.0\"` we configure Flux to automatically upgrade\nthe `HelmRelease` to the latest stable chart version (alpha, beta and pre-releases will be ignored).\n\n### Infrastructure\n\nThe infrastructure is structured into:\n\n- **infrastructure/controllers/** dir contains namespaces and Helm release definitions for Kubernetes controllers\n- **infrastructure/configs/** dir contains Kubernetes custom resources such as cert issuers and networks policies\n\n```\n./infrastructure/\n├── configs\n│   ├── cluster-issuers.yaml\n│   └── kustomization.yaml\n└── controllers\n    ├── cert-manager.yaml\n    ├── ingress-nginx.yaml\n    └── kustomization.yaml\n```\n\nIn **infrastructure/controllers/** dir we have the Flux `HelmRepository` and `HelmRelease` definitions such as:\n\n```yaml\napiVersion: helm.toolkit.fluxcd.io/v2\nkind: HelmRelease\nmetadata:\n  name: cert-manager\n  namespace: cert-manager\nspec:\n  interval: 30m\n  chart:\n    spec:\n      chart: cert-manager\n      version: \"1.x\"\n      sourceRef:\n        kind: HelmRepository\n        name: cert-manager\n        namespace: cert-manager\n      interval: 12h\n  values:\n    installCRDs: true\n```\n\nNote that with ` interval: 12h` we configure Flux to pull the Helm repository index every twelfth hours to check for updates.\nIf the new chart version that matches the `1.x` semver range is found, Flux will upgrade the release.\n\nIn **infrastructure/configs/** dir we have Kubernetes custom resources, such as the Let's Encrypt issuer:\n\n```yaml\napiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt\nspec:\n  acme:\n    # Replace the email address with your own contact email\n    email: fluxcdbot@users.noreply.github.com\n    server: https://acme-staging-v02.api.letsencrypt.org/directory\n    privateKeySecretRef:\n      name: letsencrypt-nginx\n    solvers:\n      - http01:\n          ingress:\n            class: nginx\n```\n\nIn **clusters/production/infrastructure.yaml** we replace the Let's Encrypt server value to point to the production API:\n\n```yaml\napiVersion: kustomize.toolkit.fluxcd.io/v1\nkind: Kustomization\nmetadata:\n  name: infra-configs\n  namespace: flux-system\nspec:\n  # ...omitted for brevity\n  dependsOn:\n    - name: infra-controllers\n  patches:\n    - patch: |\n        - op: replace\n          path: /spec/acme/server\n          value: https://acme-v02.api.letsencrypt.org/directory\n      target:\n        kind: ClusterIssuer\n        name: letsencrypt\n```\n\nNote that with `dependsOn` we tell Flux to first install or upgrade the controllers and only then the configs.\nThis ensures that the Kubernetes CRDs are registered on the cluster, before Flux applies any custom resources.\n\n## Bootstrap staging and production\n\nThe clusters dir contains the Flux configuration:\n\n```\n./clusters/\n├── production\n│   ├── apps.yaml\n│   └── infrastructure.yaml\n└── staging\n    ├── apps.yaml\n    └── infrastructure.yaml\n```\n\nIn **clusters/staging/** dir we have the Flux Kustomization definitions, for example:\n\n```yaml\napiVersion: kustomize.toolkit.fluxcd.io/v1\nkind: Kustomization\nmetadata:\n  name: apps\n  namespace: flux-system\nspec:\n  interval: 10m0s\n  dependsOn:\n    - name: infra-configs\n  sourceRef:\n    kind: GitRepository\n    name: flux-system\n  path: ./apps/staging\n  prune: true\n  wait: true\n```\n\nNote that with `path: ./apps/staging` we configure Flux to sync the staging Kustomize overlay and \nwith `dependsOn` we tell Flux to create the infrastructure items before deploying the apps.\n\nFork this repository on your personal GitHub account and export your GitHub access token, username and repo name:\n\n```sh\nexport GITHUB_TOKEN=<your-token>\nexport GITHUB_USER=<your-username>\nexport GITHUB_REPO=<repository-name>\n```\n\nVerify that your staging cluster satisfies the prerequisites with:\n\n```sh\nflux check --pre\n```\n\nSet the kubectl context to your staging cluster and bootstrap Flux:\n\n```sh\nflux bootstrap github \\\n    --context=staging \\\n    --owner=${GITHUB_USER} \\\n    --repository=${GITHUB_REPO} \\\n    --branch=main \\\n    --personal \\\n    --path=clusters/staging\n```\n\nThe bootstrap command commits the manifests for the Flux components in `clusters/staging/flux-system` dir\nand creates a deploy key with read-only access on GitHub, so it can pull changes inside the cluster.\n\nWatch for the Helm releases being installed on staging:\n\n```console\n$ watch flux get helmreleases --all-namespaces\n\nNAMESPACE    \tNAME         \tREVISION\tSUSPENDED\tREADY\tMESSAGE \ncert-manager \tcert-manager \tv1.11.0 \tFalse    \tTrue \tRelease reconciliation succeeded\ningress-nginx\tingress-nginx\t4.4.2   \tFalse    \tTrue \tRelease reconciliation succeeded\npodinfo      \tpodinfo      \t6.3.0   \tFalse    \tTrue \tRelease reconciliation succeeded\n```\n\nVerify that the demo app can be accessed via ingress:\n\n```console\n$ kubectl -n ingress-nginx port-forward svc/ingress-nginx-controller 8080:80 &\n\n$ curl -H \"Host: podinfo.staging\" http://localhost:8080\n{\n  \"hostname\": \"podinfo-59489db7b5-lmwpn\",\n  \"version\": \"6.2.3\"\n}\n```\n\nBootstrap Flux on production by setting the context and path to your production cluster:\n\n```sh\nflux bootstrap github \\\n    --context=production \\\n    --owner=${GITHUB_USER} \\\n    --repository=${GITHUB_REPO} \\\n    --branch=main \\\n    --personal \\\n    --path=clusters/production\n```\n\nWatch the production reconciliation:\n\n```console\n$ flux get kustomizations --watch\n\nNAME             \tREVISION     \tSUSPENDED\tREADY\tMESSAGE                         \napps             \tmain/696182e\tFalse    \tTrue \tApplied revision: main/696182e\t\nflux-system      \tmain/696182e\tFalse    \tTrue \tApplied revision: main/696182e\t\ninfra-configs    \tmain/696182e\tFalse    \tTrue \tApplied revision: main/696182e\t\ninfra-controllers\tmain/696182e\tFalse    \tTrue \tApplied revision: main/696182e\t\n```\n\n## Add clusters\n\nIf you want to add a cluster to your fleet, first clone your repo locally:\n\n```sh\ngit clone https://github.com/${GITHUB_USER}/${GITHUB_REPO}.git\ncd ${GITHUB_REPO}\n```\n\nCreate a dir inside `clusters` with your cluster name:\n\n```sh\nmkdir -p clusters/dev\n```\n\nCopy the sync manifests from staging:\n\n```sh\ncp clusters/staging/infrastructure.yaml clusters/dev\ncp clusters/staging/apps.yaml clusters/dev\n```\n\nYou could create a dev overlay inside `apps`, make sure\nto change the `spec.path` inside `clusters/dev/apps.yaml` to `path: ./apps/dev`. \n\nPush the changes to the main branch:\n\n```sh\ngit add -A && git commit -m \"add dev cluster\" && git push\n```\n\nSet the kubectl context and path to your dev cluster and bootstrap Flux:\n\n```sh\nflux bootstrap github \\\n    --context=dev \\\n    --owner=${GITHUB_USER} \\\n    --repository=${GITHUB_REPO} \\\n    --branch=main \\\n    --personal \\\n    --path=clusters/dev\n```\n\n## Identical environments\n\nIf you want to spin up an identical environment, you can bootstrap a cluster\ne.g. `production-clone` and reuse the `production` definitions.\n\nBootstrap the `production-clone` cluster:\n\n```sh\nflux bootstrap github \\\n    --context=production-clone \\\n    --owner=${GITHUB_USER} \\\n    --repository=${GITHUB_REPO} \\\n    --branch=main \\\n    --personal \\\n    --path=clusters/production-clone\n```\n\nPull the changes locally:\n\n```sh\ngit pull origin main\n```\n\nCreate a `kustomization.yaml` inside the `clusters/production-clone` dir:\n\n```yaml\napiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\nresources:\n  - flux-system\n  - ../production/infrastructure.yaml\n  - ../production/apps.yaml\n```\n\nNote that besides the `flux-system` kustomize overlay, we also include\nthe `infrastructure` and `apps` manifests from the production dir.\n\nPush the changes to the main branch:\n\n```sh\ngit add -A && git commit -m \"add production clone\" && git push\n```\n\nTell Flux to deploy the production workloads on the `production-clone` cluster:\n\n```sh\nflux reconcile kustomization flux-system \\\n    --context=production-clone \\\n    --with-source \n```\n\n## Testing\n\nAny change to the Kubernetes manifests or to the repository structure should be validated in CI before\na pull requests is merged into the main branch and synced on the cluster.\n\nThis repository contains the following GitHub CI workflows:\n\n* the [test](./.github/workflows/test.yaml) workflow validates the Kubernetes manifests and Kustomize overlays with [kubeconform](https://github.com/yannh/kubeconform)\n* the [e2e](./.github/workflows/e2e.yaml) workflow starts a Kubernetes cluster in CI and tests the staging setup by running Flux in Kubernetes Kind\n"
        },
        {
          "name": "apps",
          "type": "tree",
          "content": null
        },
        {
          "name": "clusters",
          "type": "tree",
          "content": null
        },
        {
          "name": "infrastructure",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}