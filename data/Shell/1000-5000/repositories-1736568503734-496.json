{
  "metadata": {
    "timestamp": 1736568503734,
    "page": 496,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ5OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jakubnabrdalik/gitkurwa",
      "stars": 1729,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".bashrc",
          "type": "blob",
          "size": 0.75390625,
          "content": "# Configure colors, if available.\nif [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then\n    c_reset='\\[\\e[0m\\]'\n    c_user='\\[\\033[1;33m\\]'\n    c_path='\\[\\e[0;33m\\]'\n    c_git_clean='\\[\\e[0;36m\\]'\n    c_git_dirty='\\[\\e[0;35m\\]'\nelse\n    c_reset=\n    c_user=\n    c_path=\n    c_git_clean=\n    c_git_dirty=\nfi\n \n# Function to assemble the Git part of our prompt.\ngit_prompt ()\n{\n    if ! git rev-parse --git-dir > /dev/null 2>&1; then\n        return 0\n    fi\n \n    git_branch=$(git branch 2>/dev/null| sed -n '/^\\*/s/^\\* //p') \n    echo \" [$git_branch${c_reset}]\"\n}\n \n# Thy holy prompt.\nPROMPT_COMMAND='PS1=\"${c_user}\\u${c_reset}@${c_user}\\h${c_reset}:${c_path}\\w${c_reset}$(git_prompt)\\$ \"'\n\n# change working directory to root of repo\ngit-root() {\n\tcd \"$(git proot)\"\t\n}\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 0.4619140625,
          "content": "          DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n                   Version 2, December 2004\n\nCopyright (C) 2004 Sam Hocevar <sam@hocevar.net>\n\nEveryone is permitted to copy and distribute verbatim or modified\ncopies of this license document, and changing it is allowed as long\nas the name is changed.\n\n           DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n  TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n 0. You just DO WHAT THE FUCK YOU WANT TO.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.4716796875,
          "content": "# Przydatne obecnie aliasy:\n\n### LENIWE WERSJE STANDARDOWYCH KOMEND\n\n###### checkout\n    git co\n###### branch\n    git br\n###### commit\n    git ci\n###### status\n    git st\n\n### LEPSZE WERSJE STANDARDOWYCH KOMEND\n\n###### Pull z rebase\n    git purr\n\n###### Pull z fast forward only\n    git puff\n\n###### Diff bez plusów i minusów\n    git difff\n\n###### Inny sposób prezentacji wszystkich branchy\n    git bbranch\n\n###### Inny sposób prezentacji wszystkich branchy - jeszcze bardziej szczegółowy\n    git branches\n\n###### Przełącza na mastera, a jak go nie ma to na maina - dla ludzi pracujących z projektami ze zróżnicowaniem (ang. diversity) nazw głównych branchy\n    git cmaster\n\n###### Odkłada na bok zmiany razem z plikami nie śledzonymi\n    git sth\n\n###### Wyrzuca wszystko co było przygotowane do komita\n    git unstage\n\n###### Wyświetla wszystkie dostępne aliasy\n    git alias\n\n###### Inicjalizuje repo i wkomitowuje wszystkie pliki\n    git makegitrepo\n\n\n### PODSTAWOWE KOMENTY PRZEGLĄDANIA HISTORII\n\n\n###### Pokazuje ładnie commity z drzewkiem i bajerami\n    git hist\n\n###### To co wyżej + które pliki się zmieniły i jak\n    git histfull\n\n###### Pokazuje commity z czasem, autorem i tagami\n    git llog\n\n###### Pokazuje liste komentarzy do comitów\n    git changelog\n\n###### Pokazuje comity bez czasu, autorem i tagami\n    git ls\n\n###### Pokazuje branche posortowane wg daty ostatniego commitu\n    git recent\n\n\n### PODSTAWOWE INFORMACJE O REPOZYTORIUM\n\n\n###### Mówi nam trochę więcej o osobie. Pomocne zwłaszcza gdy ktoś nie skonfigurował sobie gita\n    git whois <email lub nazwa>\n\n###### Mówi nam jaki był ostatni commit w tym czymś co podaliśmy\n    git whatis <BRANCH/TAG/WHATEVER>\n\n###### Pokazuje liczbę comitów\n    git howmany\n\n###### Pokazuje zestawienie commiterów i liczby ich comitów\n    git howmanybywhom\n\n\n### CO SIĘ DZIAŁO KIEDY CIEBIE NIE BYŁO...\n\n\n###### Mówi jakie commity poszły do brancha od czasu gdy pullowaliśmy tego używamy żeby sprawdzić czy coś się zmieniło\n    git anychanges <NAZWABRANCHA>\n\n###### Jeśli branch który nas interesuje nazywa się 'master', pokazuje co się na nim zmieniło od czasu gdy pullowaliśmy. Tego używamy żeby sprawdzić czy coś się zmieniło w 90% projektów SVNo-podobnych.\n    git anychangesonmaster\n\n###### Mówi kto ostatnio coś zmieniał (tzn. od czasu gdy pullowaliśmy)\n    git whoischanging <NAZWABRANCHA>\n\n###### Jeśli branch który nas interesuje nazywa się 'master', mówi kto ostatnio coś zmieniał (tzn. od czasu gdy pullowaliśmy)\n    git whoischangingmaster\n\n###### Mówi jakie branche mamy w origin, kto je modyfikował i kiedy. Bardzo przydatne przy używaniu gitflow i feature branchach, żeby się zorientować, co się dzieje w projekcie (i kto/kiedy robił). Wymaga aktualnej wizji repo lokalnie (czyli git fetch origin wcześniej)\n    git showorigin\n\n###### Pobiera wszystkie zdalne brancze\n    git trackallbranches\n\n###### Pull na wszystkich branczach\n    git updateallbranches\n\n\n### TAGI\n\n\n###### Wyświetla tagi z hashami\n    git showtags\n\n###### Domyślnie tagi nie wędrują na serwer zdalny przy pushu. Trzeba je popchnąć 'specjalnie'. Np. tą komendą (nie żeby oryginał był dłuższy).\n    git pushtags\n\n###### Tworzy taga z datą/godziną i przedrostkiem, np: PRZEDROSTEK_12-01-12_15-25-25\n    git tagwithdate <PRZEDROSTEK>\n\n###### Pokazuje ostatni tag\n    git lasttag\n\n###### Checkout do stanu z ostatniego taga\n    git checkoutlasttag\n\n###### Puszuje podany tag do repozytorium 'origin' albo do podanego jako parametr\n    git publishtag <TAG> <NULL|REMOTE>\n\n###### Kasuje podany tag z repozytorium 'origin' albo podanego jako parametr\n    git unpublishtag <TAG> <NULL|REMOTE>\n\n\n### IGNOROWANIE\n\n\n###### Usuwa z repozytorium nowo ignorowane pliki, po modyfikacji .gitignore. Comituje od razu tę zmianę.\n    git fixgitignore\n\n###### Ukrywa zmiany, tak że git status ich nie widzi\n    git hide <FILE>\n\n###### Przywraca wzrok poleceniu git status\n    git unhide <FILE>\n\n\n### INNE\n\n\n###### Znajduje plik w repozytorium. Wyświetla ścieżkę od roota repozytorium\n    git find <FILE>\n\n###### Kasuje wszystkie brancze które były zmerdzowane do mastera. Wszystkie pozostałe zostawia w spokoju, o ile nie odpalasz tego na OSX !\n    #on osx xargs does not have -r argument, so it fail\n    #If you remove -r, it will run at least once, making this not safe operation\n    git cleanup\n\n###### Kasuje wszystkie zdalne brancze które zostały osierocone (skasowane na repozytorium zdalnym). Dodatkowo kasuje wszystkie nieśledzone pliki i odpala odśmiecarke.\n    git cleanuplocal\n\n###### Sprawdza czy w repozytorium są jakieś pliki z \"błędami białych spacji\" (http://peter.eisentraut.org/blog/2014/11/04/checking-whitespace-with-git/)\n    git check-whitespace\n\n###### Sprawdza czy w repozytorium są jakieś pliki z windowsowymi końcami lini (CRLF)\n    git check-eol\n\n###### Wyświetla tickety Jirry z komentarzy\n    git issues\n   \n###### Wyświetla aktualną nazwę brancza\n    git branch-name\n\n###### Puszuje bieżącego brancza do repozytorium 'origin' albo do podanego jako parametr. Ustawia upstream dla tego brancza\n    git publish <NULL|REMOTE>\n\n###### Kasuje bieżącego brancza z repozytorium 'origin' albo z podanego jako parametr\n    git unpublish <NULL|REMOTE>\n\n###### Pobiera z GitHuba pul request po numerze\n    # Fetch PR from GitHub by number/id\n    git fetchpr <ID>\n\n###### Dodaj wszystko, skomituj z messagem, wpushuj\n    git apm \"message\"\n\n###### Zmiana aktywnego katalogu na główny katalog repozytorium (komenda basha)\n    git-root\n"
        },
        {
          "name": "completions",
          "type": "tree",
          "content": null
        },
        {
          "name": "config",
          "type": "blob",
          "size": 6.72265625,
          "content": "[branch]\n    autosetupmerge = true\n\n[push]\n    default = upstream\n[rerere]\n    enabled = true\n[rebase]\n    autosquash = true\n\n[color]\n    ui = auto\n[color \"branch\"]\n    current = yellow reverse\n    local = yellow\n    remote = green\n[color \"decorate\"]\n    remoteBranch = blue bold\n[color \"diff\"]\n    meta = yellow bold\n    frag = magenta bold\n    old = red bold\n    new = green bold\n[color \"status\"]\n    added = yellow\n    changed = green\n    untracked = cyan\n\n[alias]\n    #LAZY VERSIONS OF BASIC COMMANDS\n\n    co = checkout\n    br = branch\n    ci = commit\n    st = status\n\n    #BETTER VERSIONS OF BASIC COMMANDS\n\n    purr = pull --rebase\n    puff = pull --ff-only\n    difff = diff --color-words #just words\n    bbranch = branch -v\n    branches = branch -avvl\n    cmaster = \"!sh -c 'git show-ref --quiet refs/heads/master && git checkout master || git checkout main'\"\n    sth = stash -u\n    unstage = reset HEAD --\n    alias = !git config --list | grep 'alias\\\\.' | sed 's/alias\\\\.\\\\([^=]*\\\\)=\\\\(.*\\\\)/\\\\1 => \\\\2/' | grep -v 'alias'| awk 'BEGIN { FS = \\\"=>\\\" }{ printf(\\\"%-20s=>%s\\\\n\\\", $1,$2)}'|sort\n    makegitrepo = !git init && git add . && git commit -m \\\"initial commit\\\"\n    fpush = push --force-with-lease\n\n    #BASIC HISTORY VIEWING\n\n    hist = log --graph --date=relative \\\n        --format=format:'%C(auto)%h %C(bold blue)%an%C(auto)%d %C(green)%ad%C(reset)%n%w(80,8,8)%s'\n    histfull = log --graph --date=relative --name-status \\\n        --format=format:'%C(auto)%h %C(bold blue)%an%C(auto)%d %C(green)%ad%C(reset)%n%w(80,8,8)%s%n'\n    llog = log --pretty=format:'%C(yellow)%h %Cred%ad %Cblue%an%Cgreen%d %Creset%s' --date=iso\n    changelog = log --pretty=format:'%Cgreen%d %Creset%s' --date=iso\n    ls = log --pretty=format:'%C(yellow)%p..%h %C(white dim)%cd %<|(49,trunc)%an %C(reset)%s' --date=short --abbrev=8 --no-merges\n    recent = for-each-ref --sort=-committerdate refs/heads/ --format='%(authordate:short) %(color:red)%(objectname:short) %(color:yellow)%(refname:short)%(color:reset) (%(color:green)%(committerdate:relative)%(color:reset))'\n\n    #BASIC REPO INFORMATION\n\n    whois = \"!sh -c 'git log -i -1 --pretty=\\\"format::%an <%ae>\\n\\\" --author=\\\"$1\\\"' -\"\n    whatis = show -s --pretty='tformat::%h (%s, %ad)' --date=short\n    howmany = \"!sh -c 'git log -a --pretty=oneline | wc -l'\"\n    howmanybywhom = shortlog -sn\n\n    #WHAT WAS GOING ON, WHILE YOU WERE AWAY\n\n    anychanges = !sh -c 'git fetch' && git log --oneline HEAD..origin/$1\n    anychangesonmaster = !sh -c 'git fetch' && git log --oneline HEAD..origin/master\n    whoischanging = !sh -c 'git shortlog HEAD..origin/$0'\n    whoischangingmaster = !sh -c 'git shortlog HEAD..origin/master'\n\n    #what branches you have on origin, with info on who is guilty and how long ago. Useful for gitflow and feature branches in general. Requires fetch up-front.\n    showorigin = \"!sh -c 'for branch in `git branch -r | grep -v HEAD`;do echo `git show -s --format=\\\"%Cred%ci %C(green)%h %C(yellow)%cr %C(magenta)%an %C(blue)\\\" $branch | head -n 1` \\\\\\t$branch; done | sort -r'\"\n\n    #get remote branches\n    trackallbranches = !sh -c \"for branchname in `git branch -r `; do git branch --track $branchname; done\"\n    updateallbranches = !sh -c \"for branchname in `git branch -r `; do git checkout $branchname ; git pull; done\"\n\n    #TAGS\n\n    showtags = show-ref --tags\n    pushtags = push --tags\n    tagwithdate = !sh -c 'git tag \"$0\"_$(date \"+%y-%m-%d_%H-%M-%S\")'\n    lasttag = describe --abbrev=0 --tags\n    checkoutlasttag = !sh -c 'git checkout `git describe --abbrev=0 --tags`'\n    # Pushes given tag to remote 'origin' repo (or the remote passed as the second parameter)\n    publishtag = \"!sh -c 'git push ${2:-origin} $1' -\"\n    # Removes given tag from remote 'origin' repo (or the remote passed as the second parameter)\n    unpublishtag = \"!sh -c 'git push ${2:-origin} :refs/tags/$1' -\"\n\n    #IGNORING\n\n    # fix .gitignore\n    fixgitignore = !git rm -r --cached . && git add . && git commit -m \\\"Just a .gitignore fix \\\"\n\n    # Ignore files only locally\n    hide = update-index --assume-unchanged\n    unhide = update-index --no-assume-unchanged\n\n    #OTHER\n    \n    #Finds a filename in the git repository. Gives absolute location (from the git root).\n    find = !sh -c 'git ls-tree -r --name-only HEAD | grep --color $1' - \n\n    #Deletes all branches that were safely merged into the master. All other are skipped (no worries).\n    #on osx xargs does not have -r argument, so it fail. If you remove -r, it will run at least once, making this not safe operation\n    cleanup = !git branch --merged=master | grep -Ev '^\\\\* | master$' | xargs -r git branch -d\n\n    #Deletes orphaned remote branches (.git/refs/remotes/origin), clean up reflog and remove all untracked files\n    cleanuplocal = !git remote prune origin && git gc && git clean -df\n\n    # Check if any file in repo has whitespace errors\n    # As described in http://peter.eisentraut.org/blog/2014/11/04/checking-whitespace-with-git/\n    check-whitespace = !git diff-tree --check $(git hash-object -t tree /dev/null) HEAD\n\n    # Check if any file in repo has windows line endings\n    #Currently do not work as alias, works from comand line directly. There is a problem with \\r\n    check-eol = !git grep --files-with-matches $'\\\\r' HEAD\n\n    #Jira tickets (from: http://blogs.atlassian.com/2014/08/whats-new-git-2-1/)\n    issues = \"!f() { : git log ; echo 'Printing issue keys'; git log --oneline $@ | egrep -o [A-Z]+-[0-9]+ | sort | uniq; }; f\"\n    #version for git below 2.1\n    #issues = !sh -c 'git log --oneline $@ | egrep -o [A-Z]+-[0-9]+ | sort | uniq' -\n\n    # Gets the current branch name (not so useful in itself, but used in other aliases)\n    branch-name = \"!git rev-parse --abbrev-ref HEAD\"\n    # Pushes the current branch to the remote \"origin\" (or the remote passed as the parameter) and set it to track the upstream branch\n    publish = \"!sh -c 'git push -u ${1:-origin} $(git branch-name)' -\"\n    # Deletes the remote version of the current branch from the remote \"origin\" (or the remote passed as the parameter)\n    unpublish = \"!sh -c 'set -e; git push ${1:-origin} :$(git branch-name);git branch --unset-upstream $(git branch-name)' -\"\n\n    # Fetch PR from GitHub by number/id\n    fetchpr = \"!sh -c 'git fetch origin pull/$0/head:pr/$0'\"\n\n    #add all, commit with message and push to remote\n    apm = \"!f() { git add --all && git commit -m \\\"$@\\\" && git push; }; f\"\n\n[apply]\n    whitespace = nowarn\n[core]\n    pager = less -R\n[help]\n    autocorrect = 1 #fucking magic!\n\n#Kudos for (copied from):\n#http://git-scm.com/book/en/Customizing-Git-Git-Configuration\n#http://robots.thoughtbot.com/post/4747482956/streamline-your-git-workflow-with-aliases\n#http://oli.jp/2012/git-powerup/#conclusion\n#http://blog.blindgaenger.net/advanced_git_aliases.html\n#https://gist.github.com/robmiller/6018582 (branch-name, publish, unpublish)\n"
        },
        {
          "name": "configNSFW_HU",
          "type": "blob",
          "size": 1.94140625,
          "content": "[color]\n    ui = auto\n[color \"branch\"]\n    current = yellow reverse\n    local = yellow\n    remote = green\n[color \"decorate\"]\n    remoteBranch = blue bold\n[color \"diff\"]\n    meta = yellow bold\n    frag = magenta bold\n    old = red bold\n    new = green bold\n[color \"status\"]\n    added = yellow\n    changed = green\n    untracked = cyan\n\n[alias]\n    kibaszottfa = log --graph --date=relative \\\n        --format=format:'%C(auto)%h %C(bold blue)%an%C(auto)%d %C(green)%ad%C(reset)%n%w(80,8,8)%s'\n    kibaszottnagyfa = log --graph --date=relative --name-status \\\n        --format=format:'%C(auto)%h %C(bold blue)%an%C(auto)%d %C(green)%ad%C(reset)%n%w(80,8,8)%s%n'\n    kurvakommitok = log --pretty=format:'%C(yellow)%h %Cred%ad %Cblue%an%Cgreen%d %Creset%s' --date=iso\n\n    kiakurvaanyja = \"!sh -c 'git log -i -1 --pretty=\\\"format::%an <%ae>\\n\\\" --author=\\\"$1\\\"' -\"\n    miakurvaanyja = show -s --pretty='tformat::%h (%s, %ad)' --date=short\n\n    miafaszvan = !sh -c 'git fetch' && git log --oneline HEAD..origin/$1\n    miafaszvantekurva = !sh -c 'git fetch' && git log --oneline HEAD..origin/master\n    kiafaszvoltez = !sh -c 'git shortlog HEAD..origin/$0'\n    kiafaszvolteztekurva = !sh -c 'git shortlog HEAD..origin/master'\n    \n    kurvatagek = show-ref --tags\n    bazdmegakurvatageket = push --tags\n    holakurvadatum = !sh -c 'git tag \"$0\"_$(date \"+%y-%m-%d_%H-%M-%S\")'\n\n    baszdkiazosszesszart = reset --hard\n\n    miakurvaanyadatcsinaltal = blame\n\n    kurvaanyad = status\n    bazdmeg = status\n    miakurvaelet = diff\n    hogyafaszba = help\n    nemkellidebazdmeg = stash\n    megiskellbazdmeg = stash apply\n    ittkurvararendlesz = clean\n    ittkibaszottulkurvararendlesz = !sh -c 'git clean -dfx' && git reset --hard\n    \n    gyerunkbazdmeg = add\n    igenbazdmeg = commit\n    akurvaeletbe = commit --amend -m\n\n    rohadjonmegmind = reset HEAD~100\n    rohadjonmegazosszeskurvaszar = reset HEAD~100 --hard\n    huzzalmarelakurvaanyadba = push origin --force\n    \n[apply]\n\twhitespace = nowarn\n\n"
        },
        {
          "name": "configNSFW_LT",
          "type": "blob",
          "size": 2.2236328125,
          "content": "[color]\n    ui = auto\n[color \"branch\"]\n    current = yellow reverse\n    local = yellow\n    remote = green\n[color \"decorate\"]\n    remoteBranch = blue bold\n[color \"diff\"]\n    meta = yellow bold\n    frag = magenta bold\n    old = red bold\n    new = green bold\n[color \"status\"]\n    added = yellow\n    changed = green\n    untracked = cyan\n\n[alias]\n    mediskurva = log --graph --date=relative \\\n        --format=format:'%C(auto)%h %C(bold blue)%an%C(auto)%d %C(green)%ad%C(reset)%n%w(80,8,8)%s'\n    medisnxkurva = log --graph --date=relative --name-status \\\n        --format=format:'%C(auto)%h %C(bold blue)%an%C(auto)%d %C(green)%ad%C(reset)%n%w(80,8,8)%s%n'\n    komitaikurva = log --pretty=format:'%C(yellow)%h %Cred%ad %Cblue%an%Cgreen%d %Creset%s' --date=iso\n\n    kastaskurva = \"!sh -c 'git log -i -1 --pretty=\\\"format::%an <%ae>\\n\\\" --author=\\\"$1\\\"' -\"\n    kadakurva = show -s --pretty='tformat::%h (%s, %ad)' --date=short\n\n    kayrakurva = !sh -c 'git fetch' && git log --oneline HEAD..origin/$1\n    kayraapskritaikurva = !sh -c 'git fetch' && git log --oneline HEAD..origin/master\n    kastenkurva = !sh -c 'git shortlog HEAD..origin/$0'\n    kastenapskritaikurva = !sh -c 'git shortlog HEAD..origin/master'\n    \n    tagaikurva = show-ref --tags\n    stumktaguskurva = push --tags\n    taginksudatakurva = !sh -c 'git tag \"$0\"_$(date \"+%y-%m-%d_%H-%M-%S\")'\n\n    amanpxkurva = reset --hard\n\n    kastaskurva = blame\n\n    kurva = status\n    kaskurva = status\n    kayrakurva = diff\n    ekurva = help\n    salinkurva = stash\n    atgalkurva = stash apply\n    pizdinkkurva = clean\n    pizdinkvapsekurva = !sh -c 'git clean -x' && git reset --hard\n    apsivalykkurva = !sh -c 'git branch --merged' | grep -v \"\\*\" | grep -v master | grep -v dev | xargs -n 1 git branch -d\n    \n    pridekkurva = add\n    vatepvakurva = commit\n    stumkkurva = push\n    stumksudakurva = push -u origin master\n    uzsipiskitkurva = push\n    uzsipiskitkurvayolo = push --force\n    sorrykurva = commit --amend -m\n\n    kasperbybis = reset HEAD~100\n    kasperbybisnx = reset HEAD~100 --hard\n    otadairtavekurva = push origin --force\n    valinkkurva = rm .* -rF\n\n    ajvopsemkurva = !sh -c 'git add . && git commit -m \\\"palilo sie\\\" && git push --force && echo \\\"Ok, now RUN!\\\"'\n    \n[apply]\n\twhitespace = nowarn\n\n"
        },
        {
          "name": "configNSFW_PL",
          "type": "blob",
          "size": 2.63671875,
          "content": "[color]\n    ui = auto\n[color \"branch\"]\n    current = yellow reverse\n    local = yellow\n    remote = green\n[color \"decorate\"]\n    remoteBranch = blue bold\n[color \"diff\"]\n    meta = yellow bold\n    frag = magenta bold\n    old = red bold\n    new = green bold\n[color \"status\"]\n    added = yellow\n    changed = green\n    untracked = cyan\n\n[alias]\n    drzewokurwa = log --graph --date=relative \\\n        --format=format:'%C(auto)%h %C(bold blue)%an%C(auto)%d %C(green)%ad%C(reset)%n%w(80,8,8)%s'\n    duzedrzewokurwa= log --graph --date=relative --name-status \\\n        --format=format:'%C(auto)%h %C(bold blue)%an%C(auto)%d %C(green)%ad%C(reset)%n%w(80,8,8)%s%n'\n    komitykurwa = log --pretty=format:'%C(yellow)%h %Cred%ad %Cblue%an%Cgreen%d %Creset%s' --date=iso\n\n    ktotokurwa = \"!sh -c 'git log -i -1 --pretty=\\\"format::%an <%ae>\\n\\\" --author=\\\"$1\\\"' -\"\n    cotokurwa = show -s --pretty='tformat::%h (%s, %ad)' --date=short\n\n    cotamkurwa = !sh -c 'git fetch' && git log --oneline HEAD..origin/$1\n    cotammistrzukurwa = !sh -c 'git fetch' && git log --oneline HEAD..origin/master\n    ktotamkurwa = !sh -c 'git shortlog HEAD..origin/$0'\n    ktotammistrzukurwa = !sh -c 'git shortlog HEAD..origin/master'\n    \n    tagikurwa = show-ref --tags\n    pchajtagikurwa = push --tags\n    tagujzdatakurwa = !sh -c 'git tag \"$0\"_$(date \"+%y-%m-%d_%H-%M-%S\")'\n    wyjebtag = !sh -c 'git tag -d \"$0\"'\n    wyjebtagwchuj = !sh -c 'git tag -d \"$0\" && git push --delete origin tag \"$0\"'\n\n    pojebalosiekurwa = reset --hard\n\n    ktonajebalkurwa = blame\n\n    kurwa = status\n    cokurwa = status\n    cojestkurwa = diff\n    howcanikurwa = help\n    nabokkurwa = stash\n    zbokukurwa = stash apply\n    sprzatajkurwa = clean\n    sprzatajwszystkokurwa = !sh -c 'git clean -x' && git reset --hard\n    wyjebzrobionekurwa = !sh -c 'git branch --merged' | grep -v \"\\\\*\" | grep -v master | grep -v dev | xargs -n 1 git branch -d\n    majonez = !sh -c 'branch=\"$(git rev-parse --abbrev-ref HEAD)\" && git checkout master && git pull && git branch -d \"$branch\"'\n    \n    dodajkurwa = add\n    takkurwa = commit\n    sciagajkurwa = pull\n    sciagajtegokurwa = !sh -c 'git pull origin $(git rev-parse --abbrev-ref HEAD)'\n    dalejkurwa = push\n    dalejnowociotokurwa = push -u origin master\n    pchajkurwa = push\n    pchajkurwayolo = push --force\n    sorrykurwa = commit --amend -m\n    spierdolwszystko = merge\n    \n    cofnijwchuj = reset HEAD~100\n    wypierdolwchuj = reset HEAD~100 --hard\n    acomitamkurwa = push origin --force\n    walictokurwa = rm .* -rF\n\n    palisiekurwa = !sh -c 'git add . && git commit -m \\\"palilo sie\\\" --no-gpg-sign --no-verify && git push --force && echo \\\"Ok, now RUN!\\\"'\n    \n[apply]\n\twhitespace = nowarn\n\n"
        },
        {
          "name": "configNSFW_PT-BR",
          "type": "blob",
          "size": 1.900390625,
          "content": "[color]\n    ui = auto\n[color \"branch\"]\n    current = yellow reverse\n    local = yellow\n    remote = green\n[color \"decorate\"]\n    remoteBranch = blue bold\n[color \"diff\"]\n    meta = yellow bold\n    frag = magenta bold\n    old = red bold\n    new = green bold\n[color \"status\"]\n    added = yellow\n    changed = green\n    untracked = cyan\n\n[alias]\n    passadoporra = log --graph --date=relative \\\n        --format=format:'%C(auto)%h %C(bold blue)%an%C(auto)%d %C(green)%ad%C(reset)%n%w(80,8,8)%s'\n    mostratudoporra = log --graph --date=relative --name-status \\\n        --format=format:'%C(auto)%h %C(bold blue)%an%C(auto)%d %C(green)%ad%C(reset)%n%w(80,8,8)%s%n'\n    datanessaporra = log --pretty=format:'%C(yellow)%h %Cred%ad %Cblue%an%Cgreen%d %Creset%s' --date=iso\n\n    quemporra = \"!sh -c 'git log -i -1 --pretty=\\\"format::%an <%ae>\\n\\\" --author=\\\"$1\\\"' -\"\n    oquecaraio = show -s --pretty='tformat::%h (%s, %ad)' --date=short\n\n    mudancanessamerda = !sh -c 'git fetch' && git log --oneline HEAD..origin/$1\n    cagadasnomaster = !sh -c 'git fetch' && git log --oneline HEAD..origin/master\n    quemfoiocagao = !sh -c 'git shortlog HEAD..origin/$0'\n    quemcagounomaster = !sh -c 'git shortlog HEAD..origin/master'\n    \n    tagsporra = show-ref --tags\n    atualizatagcaraio = push --tags\n    tagcomdatanessaporra = !sh -c 'git tag \"$0\"_$(date \"+%y-%m-%d_%H-%M-%S\")'\n\n    deumerda = reset --hard\n\n    quemfoiocorno = blame\n\n    eagora = status\n    oquemudounessaporra = diff\n    meajudaplz = help\n    salvanobutico = stash\n    enfianobutico = stash apply\n    limpaobutico = clean\n    limpaedescarga = !sh -c 'git clean -x' && git reset --hard\n\n    juntaporra = add\n    salvacarai = commit\n    mandabala = pull\n    enfia = push\n    enfiagostoso = push -u origin master\n    enfiacomforca = push --force\n    puxadinhonalaje = commit --amend -m\n\n    fuidemitido = push origin --force\n    apagatudofodase = rm .* -rF\n    \n[apply]\n\twhitespace = nowarn\n\n"
        }
      ]
    }
  ]
}