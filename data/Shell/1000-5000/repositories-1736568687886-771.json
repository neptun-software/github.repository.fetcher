{
  "metadata": {
    "timestamp": 1736568687886,
    "page": 771,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc3OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "captn3m0/google-sre-ebook",
      "stars": 1263,
      "defaultBranch": "ruby",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.03515625,
          "content": "html/\n.direnv\n*.epub\n*.mobi\nvendor/\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.568359375,
          "content": ";\n; Global Editor Config for Adaptive Labbers\n;\n; This is an ini style configuration. See http://editorconfig.org/ for more information on this file.\n;\n; Top level editor config.\nroot = true\n; Always use Unix style new lines with new line ending on every file and trim whitespace\n[*]\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\nindent_style = space\n; Python: PEP8 defines 4 spaces for indentation\n[*.py]\nindent_style = space\nindent_size = 4\n; Salt state files, YAML format, 2 spaces\n[*.sls, *.yaml, *.yml, *.rb]\nindent_style = space\nindent_size = 2\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.041015625,
          "content": "html/\n.direnv\n*.epub\n*.pdf\n*.mobi\nvendor/\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 0.470703125,
          "content": "            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n                    Version 2, December 2004\n\n Copyright (C) 2021 Abhay Rana <me@captnemo.in>\n\n Everyone is permitted to copy and distribute verbatim or modified\n copies of this license document, and changing it is allowed as long\n as the name is changed.\n\n            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. You just DO WHAT THE FUCK YOU WANT TO.\n\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.56640625,
          "content": "FROM debian:bookworm-slim\n\nLABEL maintainer=\"github.google-sre-ebook@captnemo.in\"\n\nARG DEBIAN_FRONTEND=\"noninteractive\"\n\nWORKDIR /src\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    build-essential \\\n    calibre \\\n    file \\\n    pandoc \\\n    ruby \\\n    ruby-dev \\\n    lmodern \\\n    texlive-fonts-recommended \\\n    texlive-xetex \\\n    wget \\\n    zlib1g-dev \\\n    && gem install bundler --no-document \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\nCOPY . /src/\n\nRUN bundle install\n\nENTRYPOINT [\"/src/generate.sh\", \"docker\"]\n\nVOLUME [\"/output\"]\n"
        },
        {
          "name": "Gemfile",
          "type": "blob",
          "size": 0.07421875,
          "content": "# frozen_string_literal: true\nsource \"https://rubygems.org\"\n\ngem 'nokogiri'\n"
        },
        {
          "name": "Gemfile.lock",
          "type": "blob",
          "size": 0.2216796875,
          "content": "GEM\n  remote: https://rubygems.org/\n  specs:\n    mini_portile2 (2.8.8)\n    nokogiri (1.18.1)\n      mini_portile2 (~> 2.8.2)\n      racc (~> 1.4)\n    racc (1.8.1)\n\nPLATFORMS\n  ruby\n\nDEPENDENCIES\n  nokogiri\n\nBUNDLED WITH\n   2.2.5\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.419921875,
          "content": "# Google SRE Book/s\n\nGenerates a EPUB/MOBI/PDF for the Google SRE Books. Original sources are downloaded from https://sre.google/books/\n\nVisit the [Releases](https://github.com/captn3m0/google-sre-ebook/releases) page to download the latest release. Go through all the releases, and click \"Assets\" to view a list of files.\n\n# Books\n\n| Site Reliability Engineering (2016)                                                                                                                       | The Site Reliability Workbook (2018)                                                                                                                       |\n| :-------------------------------------------------------------------------------------------------------------------------------------------------------- | :--------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| <a href=\"https://github.com/captn3m0/google-sre-ebook/releases\"><img src=\"cover/sre-book.jpg\" width=\"320\" alt=\"site reliability engineering cover\" /></a><br> <a href=\"https://books.google.com/books?id=81UrjwEACAAJ\">BUY</a> | <a href=\"https://github.com/captn3m0/google-sre-ebook/releases\"><img src=\"cover/workbook.jpg\" width=\"320\" alt=\"the site reliability workbook cover\" /></a><br> <a href=\"https://books.google.com/books?id=fElmDwAAQBAJ\">BUY</a>|\n\nA few other SRE books/reports are available as directly from Google or publishers. A few links point to Internet Archive. Links marked in ðŸ”» are currently down.\n\n- [Building Secure & Reliable Systems](https://sre.google/books/building-secure-reliable-systems/) - [[PDF](https://sre.google/static/pdf/building_secure_and_reliable_systems.pdf)]  [[EPUB](https://sre.google/static/pdf/building_secure_and_reliable_systems.epub)]  [[MOBI](https://sre.google/static/pdf/building_secure_and_reliable_systems.mobi)]  [[Google Books](https://www.google.com/books/edition/Building_Secure_and_Reliable_Systems/Kn7UxwEACAAJ?hl=en)] [[Amazon](https://www.amazon.com/dp/B088Y67XG4)] [[Kobo](https://www.kobo.com/in/en/ebook/building-secure-and-reliable-systems)]\n- [Training Site Reliability Engineers](https://sre.google/resources/practices-and-processes/training-site-reliability-engineers/) - [[PDF](https://googlesre.page.link/traininggh)]  [[EPUB](https://sre.google/static/pdf/training-sre-epub.epub)]\n- [SLO Adoption and Usage in SRE](https://www.oreilly.com/library/view/slo-adoption-and/9781492075370/) - [[PDF](https://web.archive.org/web/20210702035314/https://static.googleusercontent.com/media/sre.google/en//static/pdf/slo-adoption-and-usage-in-sre.pdf)]\n- [Practical Guide to Cloud Migration](https://sre.google/resources/practices-and-processes/practical-guide-to-cloud-migration/) - [[PDF](https://sre.google/static/pdf/practical-guide-to-cloud-migration.pdf)]  [[EPUB](https://sre.google/static/pdf/practical-guide-to-cloud-migration.epub)]\n- [Creating a Production Launch Plan](https://sre.google/resources/practices-and-processes/production-launch-planning/) - [[PDF](https://googlesre.page.link/plpgh)]  [[EPUB](https://web.archive.org/web/20210702003102/https://sre.google/static/pdf/cplp-epub.zip)]  [[MOBI](https://web.archive.org/web/20210102115046/https://sre.google/static/pdf/cplp-mobi.zip)]\n- [Case Studies in Infrastructure Change Management](https://get.oreilly.com/ind_case-studies-in-infrastructure-change-management.html) - [[PDF](https://web.archive.org/web/20210702035412/https://static.googleusercontent.com/media/sre.google/en//static/pdf/case-studies-infrastructure-change-management.pdf)]\n- [A Case Study in Community-Driven Software Adoption](https://www.oreilly.com/library/view/a-case-study/9781098114596/) - [[PDF](https://web.archive.org/web/20210702035416/https://static.googleusercontent.com/media/sre.google/en//static/pdf/community-driven-software-adoption.pdf)]  [[EPUB](https://web.archive.org/web/20210702003151/https://sre.google/static/pdf/community-driven-software-adoption-epub.zip)]  [[MOBI](https://web.archive.org/web/20210702003132/https://sre.google/static/pdf/community-driven-software-adoption-mobi.zip)]\n- [Incident Metrics in SRE](https://sre.google/resources/practices-and-processes/incident-metrics-in-sre/) - [[PDF](https://static.googleusercontent.com/media/sre.google/en//static/pdf/IncidentMeticsInSre.pdf)]  [[EPUB](https://static.googleusercontent.com/media/sre.google/en//static/pdf/IncidentMeticsInSre.epub)]\n- [Engineering Reliable Mobile Applications](https://www.oreilly.com/library/view/engineering-reliable-mobile/9781492057444/) - [[PDF](https://web.archive.org/web/20211011151056/https://static.googleusercontent.com/media/sre.google/en//static/pdf/engineering-reliable-mobile-applications.pdf)]  [[EPUB](https://web.archive.org/web/20210702082730if_/https://sre.google/static/pdf/engineering-reliable-mobile-applications-epub.zip)]  [[MOBI ðŸ”»](https://sre.google/static/pdf/engineering-reliable-mobile-applications-mobi.zip)]\n\nYou might also like:\n\n- [Software Engineering at Google](https://abseil.io/resources/swe-book) [[PDF](https://github.com/abseil/abseil.github.io/raw/cd13b21daa6ec74155548241241693198c1b1264/resources/swe_at_google.2.pdf)] [[PDF-Archive](https://archive.softwareheritage.org/browse/content/sha1_git:80ee550c6bda571d4e9f56fc093243d31a90b651/raw/?filename=swe_at_google.2.pdf)] [[Read Online](https://abseil.io/resources/swe-book/html/toc.html)] [[Oâ€™Reilly](https://www.oreilly.com/library/view/software-engineering-at/9781492082781/)] [[Amazon](https://www.amazon.com/_/dp/1492082791)] [[Ebooks.com](https://www.ebooks.com/en-in/book/detail/209970024/)] [Generated EPUB/PDF](https://github.com/captn3m0/google-swe-ebook/)\n\n# Build\n\n## Docker (Preferred)\n\nRequirements:\n\n- Docker\n\nYou can generate either of books using `BOOK_SLUG` variable.\n\nAvailable values for _`BOOK_SLUG`_:\n\n- `sre_book` Site Reliability Engineering.\n- `srw_book` The Site Reliability Workbook.\n\n```\n$ docker run --rm --volume \"$(pwd):/output\" -e BOOK_SLUG='srw_book' captn3m0/google-sre-ebook:latest\n```\n\n- You should see the final EPUB/MOBI/PDF files in the current directory after the above runs.\n- The file may be owned by the root user.\n\n**NOTE:** You'll have to allow docker access to a directory that's local to your system. The safest way to do this is as follows:\n\n```\n$ mkdir /tmp/sreoutput\n$ chcon -Rt svirt_sandbox_file_t /tmp/sreoutput\n$ docker run --rm --volume \"/tmp/sreoutput:/output\" -e BOOK_SLUG='srw_book' ghcr.io/captn3m0/google-sre-ebook:ruby\n```\n\nBuilds on [Docker Hub](https://hub.docker.com/r/captn3m0/google-sre-ebook) are no longer maintained.\n\n## macOS / Linux\n\nRequirements:\n\n- Make\n- Ruby\n- `gem install bundler`\n- `bundle install`\n- `brew install pandoc`\n- `brew cask install calibre`\n- `brew install wget`\n\nRun either of the following:\n\n```bash\n# To download Site Reliability Engineering.\nBOOK_SLUG='sre_book' ./generate.sh\n\n# To download The Site Reliability Workbook.\nBOOK_SLUG='srw_book' ./generate.sh\n```\n\n### PDF options\n\nAny option can be passed to `pandoc` by `PDF_OPT_` prefix, for example:\n\n```sh\nPDF_OPT_GEOMETRY=margin=1.5cm \\\nPDF_OPT_DOCUMENTCLASS=extbook \\\nPDF_OPT_FONTSIZE=14pt \\\nPDF_OPT_MAINFONT=LiberationSerif-Regular.ttf \\\nPDF_OPT_MAINFONTOPTIONS=BoldFont=LiberationSerif-Bold.ttf,ItalicFont=LiberationSerif-Italic.ttf,BoldItalicFont=LiberationSerif-BoldItalic.ttf \\\nPDF_OPT_MONOFONT=LiberationMono-Regular.ttf \\\nPDF_OPT_MONOFONTOPTIONS=BoldFont=LiberationMono-Bold.ttf,ItalicFont=LiberationMono-Italic.ttf,BoldItalicFont=LiberationMono-BoldItalic.ttf \\\nPDF_OPT_SANSFONT=LiberationSans-Regular.ttf \\\nPDF_OPT_SANSFONTOPTIONS=BoldFont=LiberationSans-Bold.ttf,ItalicFont=LiberationSans-Italic.ttf,BoldItalicFont=LiberationSans-BoldItalic.ttf \\\nBOOK_SLUG=sre_book ./generate.sh\n```\n\nDefault options passed to `pandoc` in `generate.sh` are overloaded by `PDF_OPT_` prefix, see `PDF_OPT_GEOMETRY` in above example.\n\nFonts in above axample are packed to `fonts-liberation2` on **Ubuntu**.\n\nSee more details:\n\n* <https://pandoc.org/MANUAL.html#fonts>\n* <https://ctan.org/pkg/extsizes>\n* <https://ctan.org/pkg/fontspec>\n\n# Known Issues\n\n- metadata is not complete. There are just too many authors\n- Foreword/Preface is not part of the index\n- The typesetting is not great and does not match the original. See #22 for a list\n\n# LICENSE\n\nThis is licensed under WTFPL. See COPYING file for the full text.\n\n## Extra\n\nI have a list of my E-book publishing related projects at https://captnemo.in/ebooks/. Links to other related books can be found at https://github.com/upgundecha/howtheysre#books-1\n"
        },
        {
          "name": "books.sh",
          "type": "blob",
          "size": 0.59375,
          "content": "# Google SRE Books.\n\n# NOTE: The indentation before inner vars should be always \"tab\" not \"space\".\ndeclare -A BOOKS\nBOOKS=(\n\n    # Site Reliability Engineering\n    [\"SRE_BOOK\"]='\n\tBOOK_NAME=sre-book\n\tBOOK_NAME_FULL=Site Reliability Engineering\n\tBOOK_FILE=google-site-reliability-engineering\n\tBOOK_TOC_URL=https://sre.google/sre-book/table-of-contents/index.html\n\t'\n\n    # Site Reliability Workbook\n    [\"SRW_BOOK\"]='\n\tBOOK_NAME=workbook\n\tBOOK_NAME_FULL=The Site Reliability Workbook\n\tBOOK_FILE=google-the-site-reliability-workbook\n\tBOOK_TOC_URL=https://sre.google/workbook/table-of-contents/index.html\n\t'\n\n)\n"
        },
        {
          "name": "cover",
          "type": "tree",
          "content": null
        },
        {
          "name": "generate.rb",
          "type": "blob",
          "size": 2.619140625,
          "content": "require 'nokogiri'\nrequire 'pathname'\nrequire 'fileutils'\n\n# First we get the list of all the book sections:\n\nDir.chdir(\"html/sre.google/%s/table-of-contents\" % ENV['BOOK_NAME'])\nchapter_links = Nokogiri::HTML(open(\"index.html\"))\n  .css('#drop-down a')\n  .map {|l| l.attribute('href').value}\n\nhtml = <<EOT\n<!DOCTYPE html>\n<html>\n  <head>\n  <title>#{ENV['BOOK_NAME_FULL']}</title>\n  <meta charset=\"utf-8\">\n  </head>\n  <body>\nEOT\nchapter_links.each do |chapter_link|\n  chapter_file = File.basename File.dirname chapter_link\n  html += \"<span class=\\\"hidden\\\" id=\\\"#{chapter_file}\\\"></span>\"\n  doc = Nokogiri::HTML(open(chapter_link))\n  content = doc.css('.content')\n\n  # this title is with additional 'chapter X' in front\n  title = doc.at_css('h2.chapter-title').content\n\n  content.css('.cont').each do |e|\n    e.remove\n  end\n\n  # Ensure that all links are to the same file\n  content.css('a').each do |a|\n    link = a.attribute('href')\n    if link\n\n      matches = link.value.scan /^(\\S*index.html)+(#[\\w-]+)?/\n      # pp [link.value, matches] if link.value and link.value.include? 'lessons-learned'\n      if matches.length == 1 and matches[0].length == 2\n        # Self Links\n        if matches[0][0] ==\"index.html\" and matches[0][1]\n          a['href'] = matches[0][1]\n        # If it points to start of a different chapter\n        else\n          chapter_slug = File.basename File.dirname matches[0][0]\n          a['href'] = \"##{chapter_slug}\"\n        end\n      end\n    end\n  end\n\n  chapter_header = content.at('.heading')\n\n  headers = (1..6).map {|x| \"h#{x}\"}\n\n  content.css(headers.join(',')).each do |e|\n    # If chapter heading\n    if e == chapter_header\n      e.name = 'h1'\n    else\n      # Reduce everything by 1\n      i = headers.index e.name\n      new_name = headers[i+1] ? headers[i+1] : 'h6'\n      e.name = new_name\n    end\n  end\n\n  content.css('img').each do |img|\n    img_file = img.attribute('src')\n    if img_file\n      chapter_directory = File.dirname chapter_link\n      absolute_image_path = Pathname.new File.absolute_path img_file, chapter_directory\n      cwd = Pathname.new Dir.pwd\n      img['src'] = absolute_image_path.relative_path_from cwd\n    end\n  end\n\n\n  if content.children.css('section > h1').length > 0\n    # remove additional parent section tag\n    content = content.children.at_css('section')\n  elsif content.children.css('div > h1').length > 0\n    # remove additional parent div tag\n    content = content.children.at_css('div')\n  end\n\n  # replace h1 title\n  content.at_css('h1').inner_html = title\n\n  html += content.inner_html\nend\n\nhtml+=\"</body></html>\"\n\nFile.open(\"complete.html\", 'w') { |file| file.write(html) }\nputs \"[html] Generated HTML file\"\n"
        },
        {
          "name": "generate.sh",
          "type": "blob",
          "size": 3.185546875,
          "content": "#!/bin/bash\nif [[ \"${DEBUG}\" == 1 ]]; then\n    set -x\nfi\nset -euo pipefail\nIFS=$'\\n\\t'\n\n# Get book details.\nsource books.sh\nexport ${BOOKS[${BOOK_SLUG^^}]}\n\n# Common vars.\nIMGS_DOMAIN=\"lh3.googleusercontent.com\"\n\nPDF_OPTIONS=()\nfor i in ${!PDF_OPT_*}; do\n    declare -n val=$i\n    key=${i#PDF_OPT_}\n    PDF_OPTIONS+=(\"-V\" \"${key,,}=${val}\");\ndone\n\n# Make sure that links are relative \\\n# # Remove the /sre/ directories\n# Save stuff in html/ directory\n# Do not create a sre.google directory\n# Enable recursion, timestamping (--mirror)\n# Images are hosted elsewhere, download them as well.\n# We need to go up a level from /toc/ where we start\n# The \"ture\" at the end to ignore non-200 URLs like 404.\nwget \\\n    --convert-links         \\\n    --directory-prefix=html \\\n    --page-requisites       \\\n    --adjust-extension      \\\n    --span-hosts            \\\n    --trust-server-names    \\\n    --backup-converted      \\\n    --mirror                \\\n    --no-verbose            \\\n    --recursive             \\\n    --domains=${IMGS_DOMAIN},sre.google ${BOOK_TOC_URL} || true\n\n#\necho \"Get working mode...\"\nMODE=${1:-}\n\nif [ \"$MODE\" != \"docker\" ];then\n    bundle install\nfi\n\n# Add extension to files.\n# That because `pandoc` cannot generate the right `mime type` without the extension.\n# https://github.com/captn3m0/google-sre-ebook/issues/19\necho \"Fix images extension issue ...\"\nIMGS_FILES=\"$(ls html/${IMGS_DOMAIN}/*)\"\nfor FILE_NAME_FULL in ${IMGS_FILES}; do\n\n    # Get file vars.\n    FILE_NAME_BASE=\"$(basename ${FILE_NAME_FULL})\"\n    FILE_TYPE=$(file -b -- \"${FILE_NAME_FULL}\" | cut -f1 -d \" \")\n\n    # Rename and replace file.\n    if grep -rl -- \"${FILE_NAME_BASE}\" ./html; then\n        mv \"${FILE_NAME_FULL}\" \"${FILE_NAME_FULL}.${FILE_TYPE,,}\" &&\n        grep -rl -- \"${FILE_NAME_BASE}\" ./html | xargs sed -i -- \"s/${FILE_NAME_BASE}/${FILE_NAME_BASE}.${FILE_TYPE,,}/g\"\n    fi\n\n\ndone\n\nif [[ $@ == *'--only-download'* ]]; then\n    echo \"Skipping generation\"\n    exit 0\nfi\n\n# Generate epub from html.\necho \"Generate book ...\"\nbundle exec ruby generate.rb\npushd html/sre.google/${BOOK_NAME}/table-of-contents\npandoc --from=html --to=epub                                 \\\n    --output=../../../../${BOOK_FILE}.epub                \\\n    --epub-metadata=../../../../metadata/${BOOK_NAME}.xml \\\n    --epub-cover-image=../../../../cover/${BOOK_NAME}.jpg \\\n    --metadata title=\"$BOOK_NAME\" \\\n    complete.html\n\n# generate PDF from HTML\npandoc --from=html \\\n    --pdf-engine=xelatex \\\n    --output=../../../../${BOOK_FILE}.pdf                \\\n    --metadata title=\"$BOOK_NAME\" \\\n    --dpi=300 \\\n    -V book \\\n    --top-level-division=chapter \\\n    --toc \\\n    -V lang=en-US \\\n    -V classoption=oneside \\\n    -V titlepage=true \\\n    -V logo=../../../../cover/${BOOK_NAME}.jpg \\\n    -V titlepage-background=../../../../cover/${BOOK_NAME}.jpg \\\n    -V toc-own-page=true \\\n    -V footnotes-pretty=true \\\n    -V subparagraph \\\n    -V geometry=margin=2cm \\\n    -V fig_caption=false \\\n    ${PDF_OPTIONS[@]} \\\n    --columns=60 \\\n    complete.html\n\npopd\n\n# Generate mobi using calibre\nebook-convert ${BOOK_FILE}.epub ${BOOK_FILE}.mobi\n\n# If it works inside docker.\nif [ \"$MODE\" == \"docker\" ]; then\n    chown -v $(id -u):$(id -g) ${BOOK_FILE}.*\n    mv -f ${BOOK_FILE}.* /output\nfi\n"
        },
        {
          "name": "metadata",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}