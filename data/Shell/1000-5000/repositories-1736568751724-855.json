{
  "metadata": {
    "timestamp": 1736568751724,
    "page": 855,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg1OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "docker-library/openjdk",
      "stars": 1145,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.091796875,
          "content": "/*/**/Dockerfile       linguist-generated\n/Dockerfile*.template  linguist-language=Dockerfile\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0166015625,
          "content": ".jq-template.awk\n"
        },
        {
          "name": "24",
          "type": "tree",
          "content": null
        },
        {
          "name": "25",
          "type": "tree",
          "content": null
        },
        {
          "name": "Dockerfile-linux.template",
          "type": "blob",
          "size": 7.49609375,
          "content": "{{\n\tdef is_alpine:\n\t\tenv.variant | startswith(\"alpine\")\n\t;\n\tdef alpine_version:\n\t\tenv.variant | ltrimstr(\"alpine\")\n-}}\n{{\n\tdef is_oracle:\n\t\tenv.variant | startswith(\"oraclelinux\")\n\t;\n\tdef oracle_version:\n\t\tenv.variant | ltrimstr(\"oraclelinux\")\n-}}\n{{\n\tdef is_debian:\n\t\tis_alpine or is_oracle | not\n\t;\n\tdef is_debian_slim:\n\t\tis_debian and (env.variant | startswith(\"slim-\"))\n\t;\n\tdef debian_suite:\n\t\tenv.variant | ltrimstr(\"slim-\")\n-}}\n{{\n\tif is_alpine then (\n-}}\nFROM alpine:{{ alpine_version }}\n\nRUN apk add --no-cache java-cacerts\n\nENV JAVA_HOME /opt/openjdk-{{ env.version }}\n{{\n\t) elif is_oracle then (\n-}}\nFROM oraclelinux:{{ oracle_version }}-slim\n\nRUN set -eux; \\\n\tmicrodnf install \\\n\t\tgzip \\\n\t\ttar \\\n\t\t\\\n# jlink --strip-debug on 13+ needs objcopy: https://github.com/docker-library/openjdk/issues/351\n# Error: java.io.IOException: Cannot run program \"objcopy\": error=2, No such file or directory\n\t\tbinutils \\\n# java.lang.UnsatisfiedLinkError: /usr/java/openjdk-12/lib/libfontmanager.so: libfreetype.so.6: cannot open shared object file: No such file or directory\n# https://github.com/docker-library/openjdk/pull/235#issuecomment-424466077\n\t\tfreetype fontconfig \\\n\t; \\\n\tmicrodnf clean all\n\nENV JAVA_HOME /usr/java/openjdk-{{ env.version }}\n{{\n\t) else (\n-}}\nFROM {{\n\tif is_debian_slim then\n\t\t\"debian:\" + debian_suite + \"-slim\"\n\telse\n\t\t\"buildpack-deps:\" + debian_suite + (\n\t\t\tif env.javaType == \"jdk\" then\n\t\t\t\t\"-scm\"\n\t\t\telse\n\t\t\t\t\"-curl\"\n\t\t\tend\n\t\t)\n\tend\n}}\n\nRUN set -eux; \\\n\tapt-get update; \\\n\tapt-get install -y --no-install-recommends \\\n{{ if is_debian_slim then \"\" else ( -}}\n\t\tbzip2 \\\n\t\tunzip \\\n\t\txz-utils \\\n\t\t\\\n# jlink --strip-debug on 13+ needs objcopy: https://github.com/docker-library/openjdk/issues/351\n# Error: java.io.IOException: Cannot run program \"objcopy\": error=2, No such file or directory\n\t\tbinutils \\\n\t\t\\\n# java.lang.UnsatisfiedLinkError: /usr/local/openjdk-11/lib/libfontmanager.so: libfreetype.so.6: cannot open shared object file: No such file or directory\n# java.lang.NoClassDefFoundError: Could not initialize class sun.awt.X11FontManager\n# https://github.com/docker-library/openjdk/pull/235#issuecomment-424466077\n\t\tfontconfig libfreetype6 \\\n\t\t\\\n{{ ) end -}}\n# utilities for keeping Debian and OpenJDK CA certificates in sync\n\t\tca-certificates p11-kit \\\n\t; \\\n\trm -rf /var/lib/apt/lists/*\n\nENV JAVA_HOME /usr/local/openjdk-{{ env.version }}\n{{\n\t) end\n-}}\nENV PATH $JAVA_HOME/bin:$PATH\n\n{{ if is_alpine then \"\" else ( -}}\n# Default to UTF-8 file.encoding\nENV LANG C.UTF-8\n\n{{ ) end -}}\n{{ def java_version: if is_alpine then .alpine.version else .version end -}}\n# https://jdk.java.net/\n# >\n# > Java Development Kit builds, from Oracle\n# >\nENV JAVA_VERSION {{ java_version }}\n{{ if is_alpine then ( -}}\n# \"For Alpine Linux, builds are produced on a reduced schedule and may not be in sync with the other platforms.\"\n{{ ) else \"\" end -}}\n\n{{\n\tdef arches:\n\t\tif is_alpine then .alpine else . end\n\t\t| .[env.javaType].arches\n\t;\n\tdef get_arch_command:\n\t\tif is_alpine then\n\t\t\t\"apk --print-arch\"\n\t\telif is_oracle then\n\t\t\t\"rpm --query --queryformat='%{ARCH}' rpm\"\n\t\telse\n\t\t\t\"dpkg --print-architecture\"\n\t\tend\n\t;\n\tdef case_arch:\n\t\t# input is a bashbrew arch\n\t\t# - \"amd64\", \"arm64v8\", etc\n\t\t# output is a shell \"case\" expression for matching the output of running \"get_arch_command\"\n\t\t# - \"i[3456]86\", \"aarch64\", \"x86_64\", etc\n\t\t. as $bashbrewArch\n\t\t| if is_alpine then {\n\t\t\tamd64: \"x86_64\",\n\t\t\tarm64v8: \"aarch64\",\n\t\t} elif is_oracle then {\n\t\t\tamd64: \"x86_64\",\n\t\t\tarm64v8: \"aarch64\",\n\t\t} else {\n\t\t\tamd64: \"amd64\",\n\t\t\tarm64v8: \"arm64\",\n\t\t} end\n\t\t| .[$bashbrewArch] // error(\"unsupported bashbrew architecture: \" + $bashbrewArch)\n\t\t| @sh\n\t;\n\tdef wget_command:\n\t\tif is_oracle then\n\t\t\t\"curl -fL -o\"\n\t\telse\n\t\t\t[\n\t\t\t\t\"wget\",\n\t\t\t\tif is_alpine then empty else \"--progress=dot:giga\" end,\n\t\t\t\t\"-O\"\n\t\t\t] | join(\" \")\n\t\tend\n-}}\nRUN set -eux; \\\n\t\\\n\tarch=\"$({{ get_arch_command }})\"; \\\n\tcase \"$arch\" in \\\n{{\n\t[\n\t\tarches | to_entries[]\n\t\t| select(.key | startswith(\"windows-\") | not)\n\t\t| .key as $bashbrewArch | .value\n\t\t| (\n-}}\n\t\t{{ $bashbrewArch | case_arch }}) \\\n\t\t\tdownloadUrl={{ .url | @sh }}; \\\n{{ if .sha256 then ( -}}\n\t\t\tdownloadSha256={{ .sha256 | @sh }}; \\\n{{ ) else \"\" end -}}\n\t\t\t;; \\\n{{\n\t\t)\n\t] | add\n-}}\n\t\t*) echo >&2 \"error: unsupported architecture: '$arch'\"; exit 1 ;; \\\n\tesac; \\\n\t\\\n{{ if is_debian_slim then ( -}}\n\tsavedAptMark=\"$(apt-mark showmanual)\"; \\\n\tapt-get update; \\\n\tapt-get install -y --no-install-recommends \\\n\t\twget \\\n\t; \\\n\trm -rf /var/lib/apt/lists/*; \\\n\t\\\n{{ ) else \"\" end -}}\n\t{{ wget_command }} openjdk.tgz \"$downloadUrl\"; \\\n{{ if [ arches[] ] | any(has(\"sha256\")) then ( -}}\n\techo \"$downloadSha256 *openjdk.tgz\" | sha256sum {{ if is_alpine then \"-c\" else \"--strict --check\" end }} -; \\\n{{ ) else \"\" end -}}\n\t\\\n\tmkdir -p \"$JAVA_HOME\"; \\\n\ttar --extract \\\n\t\t--file openjdk.tgz \\\n\t\t--directory \"$JAVA_HOME\" \\\n\t\t--strip-components 1 \\\n\t\t--no-same-owner \\\n\t; \\\n\trm openjdk.tgz*; \\\n\t\\\n{{ if is_debian_slim then ( -}}\n\tapt-mark auto '.*' > /dev/null; \\\n\t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark > /dev/null; \\\n\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \\\n\t\\\n{{ ) else \"\" end -}}\n{{ if is_alpine then ( -}}\n\trm -rf \"$JAVA_HOME/lib/security/cacerts\"; \\\n# see \"java-cacerts\" package installed above (which maintains \"/etc/ssl/certs/java/cacerts\" for us)\n\tln -sT /etc/ssl/certs/java/cacerts \"$JAVA_HOME/lib/security/cacerts\"; \\\n{{ ) elif is_oracle then ( -}}\n\trm -rf \"$JAVA_HOME/lib/security/cacerts\"; \\\n# see \"update-ca-trust\" script which creates/maintains this cacerts bundle\n\tln -sT /etc/pki/ca-trust/extracted/java/cacerts \"$JAVA_HOME/lib/security/cacerts\"; \\\n\t\\\n# https://github.com/oracle/docker-images/blob/a56e0d1ed968ff669d2e2ba8a1483d0f3acc80c0/OracleJava/java-8/Dockerfile#L17-L19\n\tln -sfT \"$JAVA_HOME\" /usr/java/default; \\\n\tln -sfT \"$JAVA_HOME\" /usr/java/latest; \\\n\tfor bin in \"$JAVA_HOME/bin/\"*; do \\\n\t\tbase=\"$(basename \"$bin\")\"; \\\n\t\t[ ! -e \"/usr/bin/$base\" ]; \\\n\t\talternatives --install \"/usr/bin/$base\" \"$base\" \"$bin\" 20000; \\\n\tdone; \\\n{{ ) else ( -}}\n# update \"cacerts\" bundle to use Debian's CA certificates (and make sure it stays up-to-date with changes to Debian's store)\n# see https://github.com/docker-library/openjdk/issues/327\n#     http://rabexc.org/posts/certificates-not-working-java#comment-4099504075\n#     https://salsa.debian.org/java-team/ca-certificates-java/blob/3e51a84e9104823319abeb31f880580e46f45a98/debian/jks-keystore.hook.in\n#     https://git.alpinelinux.org/aports/tree/community/java-cacerts/APKBUILD?id=761af65f38b4570093461e6546dcf6b179d2b624#n29\n\t{ \\\n\t\techo '#!/usr/bin/env bash'; \\\n\t\techo 'set -Eeuo pipefail'; \\\n\t\techo 'trust extract --overwrite --format=java-cacerts --filter=ca-anchors --purpose=server-auth \"$JAVA_HOME/lib/security/cacerts\"'; \\\n\t} > /etc/ca-certificates/update.d/docker-openjdk; \\\n\tchmod +x /etc/ca-certificates/update.d/docker-openjdk; \\\n\t/etc/ca-certificates/update.d/docker-openjdk; \\\n\t\\\n# https://github.com/docker-library/openjdk/issues/331#issuecomment-498834472\n\tfind \"$JAVA_HOME/lib\" -name '*.so' -exec dirname '{}' ';' | sort -u > /etc/ld.so.conf.d/docker-openjdk.conf; \\\n\tldconfig; \\\n{{ ) end -}}\n\t\\\n# https://github.com/docker-library/openjdk/issues/212#issuecomment-420979840\n# https://openjdk.java.net/jeps/341\n\tjava -Xshare:dump; \\\n\t\\\n# basic smoke test\n{{ if env.javaType == \"jdk\" then ( -}}\n\tfileEncoding=\"$(echo 'System.out.println(System.getProperty(\"file.encoding\"))' | jshell -s -)\"; [ \"$fileEncoding\" = 'UTF-8' ]; rm -rf ~/.java; \\\n\tjavac --version; \\\n\tjava --version\n\n# \"jshell\" is an interactive REPL for Java (see https://en.wikipedia.org/wiki/JShell)\nCMD [\"jshell\"]\n{{ ) else ( -}}\n\tjava --version\n{{ ) end -}}\n"
        },
        {
          "name": "Dockerfile-windows.template",
          "type": "blob",
          "size": 4.033203125,
          "content": "FROM mcr.microsoft.com/windows/{{ env.windowsVariant }}:{{ env.windowsRelease }}\n\n{{ if env.windowsVariant == \"servercore\" then ( -}}\n# $ProgressPreference: https://github.com/PowerShell/PowerShell/issues/2138#issuecomment-251261324\nSHELL [\"powershell\", \"-Command\", \"$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';\"]\n\n# enable TLS 1.2\n# https://docs.microsoft.com/en-us/system-center/vmm/install-tls?view=sc-vmm-1801\n# https://docs.microsoft.com/en-us/windows-server/identity/ad-fs/operations/manage-ssl-protocols-in-ad-fs#enable-tls-12\nRUN Write-Host 'Enabling TLS 1.2 (https://githubengineering.com/crypto-removal-notice/) ...'; \\\n\t$tls12RegBase = 'HKLM:\\\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TLS 1.2'; \\\n\tif (Test-Path $tls12RegBase) { throw ('\"{0}\" already exists!' -f $tls12RegBase) }; \\\n\tNew-Item -Path ('{0}/Client' -f $tls12RegBase) -Force; \\\n\tNew-Item -Path ('{0}/Server' -f $tls12RegBase) -Force; \\\n\tNew-ItemProperty -Path ('{0}/Client' -f $tls12RegBase) -Name 'DisabledByDefault' -PropertyType DWORD -Value 0 -Force; \\\n\tNew-ItemProperty -Path ('{0}/Client' -f $tls12RegBase) -Name 'Enabled' -PropertyType DWORD -Value 1 -Force; \\\n\tNew-ItemProperty -Path ('{0}/Server' -f $tls12RegBase) -Name 'DisabledByDefault' -PropertyType DWORD -Value 0 -Force; \\\n\tNew-ItemProperty -Path ('{0}/Server' -f $tls12RegBase) -Name 'Enabled' -PropertyType DWORD -Value 1 -Force; \\\n\tWrite-Host 'Complete.'\n\nENV JAVA_HOME C:\\\\openjdk-{{ env.version }}\nRUN $newPath = ('{0}\\bin;{1}' -f $env:JAVA_HOME, $env:PATH); \\\n\tWrite-Host ('Updating PATH: {0}' -f $newPath); \\\n\tsetx /M PATH $newPath; \\\n\tWrite-Host 'Complete.'\n{{ ) else ( -}}\nSHELL [\"cmd\", \"/s\", \"/c\"]\n\nENV JAVA_HOME C:\\\\openjdk-{{ env.version }}\n# \"ERROR: Access to the registry path is denied.\"\nUSER ContainerAdministrator\nRUN echo Updating PATH: %JAVA_HOME%\\bin;%PATH% \\\n\t&& setx /M PATH %JAVA_HOME%\\bin;%PATH% \\\n\t&& echo Complete.\nUSER ContainerUser\n{{ ) end -}}\n\n# https://jdk.java.net/\n# >\n# > Java Development Kit builds, from Oracle\n# >\nENV JAVA_VERSION {{ .version }}\n{{ if env.windowsVariant == \"servercore\" then ( -}}\n{{ # TODO $env:PROCESSOR_ARCHITECTURE for arm64v8 someday (https://superuser.com/a/1441469/101945) -}}\nENV JAVA_URL {{ .[env.javaType].arches[\"windows-amd64\"].url }}\n{{ if .[env.javaType].arches[\"windows-amd64\"] | has(\"sha256\") then ( -}}\nENV JAVA_SHA256 {{ .[env.javaType].arches[\"windows-amd64\"].sha256 }}\n{{ ) else \"\" end -}}\n{{ ) else \"\" end -}}\n\n{{ if env.windowsVariant == \"servercore\" then ( -}}\nRUN Write-Host ('Downloading {0} ...' -f $env:JAVA_URL); \\\n\t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \\\n\tInvoke-WebRequest -Uri $env:JAVA_URL -OutFile 'openjdk.zip'; \\\n{{ if .[env.javaType].arches[\"windows-amd64\"] | has(\"sha256\") then ( -}}\n\tWrite-Host ('Verifying sha256 ({0}) ...' -f $env:JAVA_SHA256); \\\n\tif ((Get-FileHash openjdk.zip -Algorithm sha256).Hash -ne $env:JAVA_SHA256) { \\\n\t\tWrite-Host 'FAILED!'; \\\n\t\texit 1; \\\n\t}; \\\n{{ ) else ( -}}\n# TODO signature? checksum?\n{{ ) end -}}\n\t\\\n\tWrite-Host 'Expanding ...'; \\\n\tNew-Item -ItemType Directory -Path C:\\temp | Out-Null; \\\n\tExpand-Archive openjdk.zip -DestinationPath C:\\temp; \\\n\tMove-Item -Path C:\\temp\\* -Destination $env:JAVA_HOME; \\\n\tRemove-Item C:\\temp; \\\n\t\\\n\tWrite-Host 'Removing ...'; \\\n\tRemove-Item openjdk.zip -Force; \\\n\t\\\n\tWrite-Host 'Verifying install ...'; \\\n{{ if env.javaType == \"jdk\" then ( -}}\n\tWrite-Host '  javac --version'; javac --version; \\\n{{ ) else \"\" end -}}\n\tWrite-Host '  java --version'; java --version; \\\n\t\\\n\tWrite-Host 'Complete.'\n{{ ) else ( -}}\nCOPY --from=openjdk:{{ .version | gsub(\"[+]\"; \"-\") }}-{{ env.javaType }}-windowsservercore-{{ env.windowsRelease }} $JAVA_HOME $JAVA_HOME\n\nRUN echo Verifying install ... \\\n{{ if env.javaType == \"jdk\" then ( -}}\n\t&& echo   javac --version && javac --version \\\n{{ ) else \"\" end -}}\n\t&& echo   java --version && java --version \\\n\t&& echo Complete.\n{{ ) end -}}\n{{ if env.javaType == \"jdk\" then ( -}}\n\n# \"jshell\" is an interactive REPL for Java (see https://en.wikipedia.org/wiki/JShell)\nCMD [\"jshell\"]\n{{ ) else \"\" end -}}\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.03125,
          "content": "Copyright (c) 2014 Docker, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.5185546875,
          "content": "# DEPRECATED\n\nThis image is officially deprecated and all users are recommended to find and use suitable replacements ASAP. Some examples of other Official Image alternatives (listed in alphabetical order with no intentional or implied preference):\n\n-\t[`amazoncorretto`](https://hub.docker.com/_/amazoncorretto)\n-\t[`eclipse-temurin`](https://hub.docker.com/_/eclipse-temurin)\n-\t[`ibm-semeru-runtimes`](https://hub.docker.com/_/ibm-semeru-runtimes)\n-\t[`ibmjava`](https://hub.docker.com/_/ibmjava)\n-\t[`sapmachine`](https://hub.docker.com/_/sapmachine)\n\nSee [docker-library/openjdk#505](https://github.com/docker-library/openjdk/issues/505) for more information.\n\nThe only tags which will continue to receive updates beyond July 2022 will be Early Access builds (which are sourced from [jdk.java.net](https://jdk.java.net/)), as those are not published/supported by any of the above projects.\n\n# https://github.com/docker-library/openjdk\n\n## Maintained by: [the Docker Community](https://github.com/docker-library/openjdk)\n\nThis is the Git repo of the [Docker \"Official Image\"](https://github.com/docker-library/official-images#what-are-official-images) for [`openjdk`](https://hub.docker.com/_/openjdk/) (not to be confused with any official `openjdk` image provided by `openjdk` upstream). See [the Docker Hub page](https://hub.docker.com/_/openjdk/) for the full readme on how to use this Docker image and for information regarding contributing and issues.\n\nThe [full image description on Docker Hub](https://hub.docker.com/_/openjdk/) is generated/maintained over in [the docker-library/docs repository](https://github.com/docker-library/docs), specifically in [the `openjdk` directory](https://github.com/docker-library/docs/tree/master/openjdk).\n\n## See a change merged here that doesn't show up on Docker Hub yet?\n\nFor more information about the full official images change lifecycle, see [the \"An image's source changed in Git, now what?\" FAQ entry](https://github.com/docker-library/faq#an-images-source-changed-in-git-now-what).\n\nFor outstanding `openjdk` image PRs, check [PRs with the \"library/openjdk\" label on the official-images repository](https://github.com/docker-library/official-images/labels/library%2Fopenjdk). For the current \"source of truth\" for [`openjdk`](https://hub.docker.com/_/openjdk/), see [the `library/openjdk` file in the official-images repository](https://github.com/docker-library/official-images/blob/master/library/openjdk).\n\n<!-- THIS FILE IS GENERATED BY https://github.com/docker-library/docs/blob/master/generate-repo-stub-readme.sh -->\n"
        },
        {
          "name": "apply-templates.sh",
          "type": "blob",
          "size": 1.966796875,
          "content": "#!/usr/bin/env bash\nset -Eeuo pipefail\n\n[ -f versions.json ] # run \"versions.sh\" first\n\njqt='.jq-template.awk'\nif [ -n \"${BASHBREW_SCRIPTS:-}\" ]; then\n\tjqt=\"$BASHBREW_SCRIPTS/jq-template.awk\"\nelif [ \"$BASH_SOURCE\" -nt \"$jqt\" ]; then\n\t# https://github.com/docker-library/bashbrew/blob/master/scripts/jq-template.awk\n\twget -qO \"$jqt\" 'https://github.com/docker-library/bashbrew/raw/9f6a35772ac863a0241f147c820354e4008edf38/scripts/jq-template.awk'\nfi\n\nif [ \"$#\" -eq 0 ]; then\n\tversions=\"$(jq -r 'keys | map(@sh) | join(\" \")' versions.json)\"\n\teval \"set -- $versions\"\nfi\n\ngenerated_warning() {\n\tcat <<-EOH\n\t\t#\n\t\t# NOTE: THIS DOCKERFILE IS GENERATED VIA \"apply-templates.sh\"\n\t\t#\n\t\t# PLEASE DO NOT EDIT IT DIRECTLY.\n\t\t#\n\n\tEOH\n}\n\nfor version; do\n\texport version\n\n\trm -rf \"$version/\"\n\n\tvariants=\"$(jq -r '.[env.version].variants | map(@sh) | join(\" \")' versions.json)\"\n\teval \"variants=( $variants )\"\n\n\tfor javaType in jdk jre; do\n\t\texport javaType\n\n\t\tif ! hasJavaType=\"$(jq -r '.[env.version] | if has(env.javaType) then \"1\" else \"\" end' versions.json)\" || [ -z \"$hasJavaType\" ]; then\n\t\t\tcontinue\n\t\tfi\n\n\t\tfor variant in \"${variants[@]}\"; do\n\t\t\texport variant\n\n\t\t\tif [ \"$javaType\" = 'jre' ] && [[ \"$variant\" == oraclelinux* ]]; then\n\t\t\t\tcontinue # no Oracle-based JRE images (for now? gotta figure a few things out to do that)\n\t\t\tfi\n\n\t\t\tdir=\"$version/$javaType/$variant\"\n\t\t\tmkdir -p \"$dir\"\n\n\t\t\tcase \"$variant\" in\n\t\t\t\twindows/*)\n\t\t\t\t\tvariant=\"$(basename \"$dir\")\" # \"buster\", \"windowsservercore-1809\", etc\n\t\t\t\t\twindowsVariant=\"${variant%%-*}\" # \"windowsservercore\", \"nanoserver\"\n\t\t\t\t\twindowsRelease=\"${variant#$windowsVariant-}\" # \"ltsc2022\", \"1809\", etc\n\t\t\t\t\twindowsVariant=\"${windowsVariant#windows}\" # \"servercore\", \"nanoserver\"\n\t\t\t\t\texport windowsVariant windowsRelease\n\t\t\t\t\ttemplate='Dockerfile-windows.template'\n\t\t\t\t\t;;\n\n\t\t\t\t*)\n\t\t\t\t\ttemplate='Dockerfile-linux.template'\n\t\t\t\t\t;;\n\t\t\tesac\n\n\t\t\techo \"processing $dir ...\"\n\n\t\t\t{\n\t\t\t\tgenerated_warning\n\t\t\t\tgawk -f \"$jqt\" \"$template\"\n\t\t\t} > \"$dir/Dockerfile\"\n\t\tdone\n\tdone\ndone\n"
        },
        {
          "name": "generate-stackbrew-library.sh",
          "type": "blob",
          "size": 7.0400390625,
          "content": "#!/usr/bin/env bash\nset -Eeuo pipefail\n\ndeclare -A aliases=(\n\t# https://github.com/docker-library/openjdk/issues/505\n\t# https://github.com/docker-library/openjdk/pull/510#issue-1327751730\n\t# > Once Oracle stops publishing OpenJDK 18 builds, those will be removed\n\t# > 19+ will be removed as soon as each release hits GA \n\t# To prevent user breakage, we are not moving \"latest\", \"jre\" or \"jdk\" to early access builds; the last non-ea was 18\n\t#[18-jdk]='jdk latest'\n\t#[18-jre]='jre'\n)\ndefaultType='jdk'\n\nimage=\"${1:-openjdk}\"\n\nself=\"$(basename \"$BASH_SOURCE\")\"\ncd \"$(dirname \"$(readlink -f \"$BASH_SOURCE\")\")\"\n\nif [ \"$#\" -eq 0 ]; then\n\tversions=\"$(jq -r 'keys | map(@sh) | join(\" \")' versions.json)\"\n\teval \"set -- $versions\"\nfi\n\n# sort version numbers with highest first\nIFS=$'\\n'; set -- $(sort -rV <<<\"$*\"); unset IFS\n\n# get the most recent commit which modified any of \"$@\"\nfileCommit() {\n\tgit log -1 --format='format:%H' HEAD -- \"$@\"\n}\n\n# get the most recent commit which modified \"$1/Dockerfile\" or any file COPY'd from \"$1/Dockerfile\"\ndirCommit() {\n\tlocal dir=\"$1\"; shift\n\t(\n\t\tcd \"$dir\"\n\t\tfiles=\"$(\n\t\t\tgit show HEAD:./Dockerfile | awk '\n\t\t\t\ttoupper($1) == \"COPY\" {\n\t\t\t\t\tfor (i = 2; i < NF; i++) {\n\t\t\t\t\t\tif ($i ~ /^--from=/) {\n\t\t\t\t\t\t\tnext\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprint $i\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t'\n\t\t)\"\n\t\tfileCommit Dockerfile $files\n\t)\n}\n\ngetArches() {\n\tlocal repo=\"$1\"; shift\n\tlocal officialImagesBase=\"${BASHBREW_LIBRARY:-https://github.com/docker-library/official-images/raw/HEAD/library}/\"\n\n\tlocal parentRepoToArchesStr\n\tparentRepoToArchesStr=\"$(\n\t\tfind -name 'Dockerfile' -exec awk -v officialImagesBase=\"$officialImagesBase\" '\n\t\t\t\ttoupper($1) == \"FROM\" && $2 !~ /^('\"$repo\"'|scratch|.*\\/.*)(:|$)/ {\n\t\t\t\t\tprintf \"%s%s\\n\", officialImagesBase, $2\n\t\t\t\t}\n\t\t\t' '{}' + \\\n\t\t\t| sort -u \\\n\t\t\t| xargs -r bashbrew cat --format '[\"{{ .RepoName }}:{{ .TagName }}\"]=\"{{ join \" \" .TagEntry.Architectures }}\"'\n\t)\"\n\teval \"declare -g -A parentRepoToArches=( $parentRepoToArchesStr )\"\n}\ngetArches 'openjdk'\n\ncat <<-EOH\n# this file is generated via https://github.com/docker-library/openjdk/blob/$(fileCommit \"$self\")/$self\n\nMaintainers: Tianon Gravi <admwiggin@gmail.com> (@tianon),\n             Joseph Ferguson <yosifkit@gmail.com> (@yosifkit)\nGitRepo: https://github.com/docker-library/openjdk.git\nEOH\n\n# prints \"$2$1$3$1...$N\"\njoin() {\n\tlocal sep=\"$1\"; shift\n\tlocal out; printf -v out \"${sep//%/%%}%s\" \"$@\"\n\techo \"${out#$sep}\"\n}\n\n_latest() {\n\tlocal javaVersion=\"$1\"; shift\n\tlocal variant=\"$1\"; shift\n\n\t# \"windowsservercore\" variants should always be part of the \"latest\" tag\n\tif [[ \"$variant\" == windowsservercore* ]]; then\n\t\treturn 0\n\tfi\n\n\tif [ \"$javaVersion\" -ge 12 ]; then\n\t\t# version 12+ moves \"latest\" over to the Oracle-based builds (and includes Windows!)\n\t\tif [ \"$variant\" = \"$defaultOracleVariant\" ]; then\n\t\t\treturn 0\n\t\tfi\n\telse\n\t\t# for versions < 12, the Debian variant should be \"latest\"\n\t\tif [ \"$variant\" = \"$defaultDebianVariant\" ]; then\n\t\t\treturn 0\n\t\tfi\n\tfi\n\n\treturn 1\n}\n\naliases() {\n\tlocal javaVersion=\"$1\"; shift\n\tlocal javaType=\"$1\"; shift\n\tlocal fullVersion=\"$1\"; shift\n\tlocal variants=( \"$@\" )\n\n\tif [[ \"$fullVersion\" =~ ^[0-9]+$ ]]; then\n\t\t# if fullVersion is only digits, add \"-rc\" to the end (because we're probably in the final-phases of pre-release before GA when we drop support from the image)\n\t\tfullVersion=\"$fullVersion-rc\"\n\tfi\n\n\tlocal bases=()\n\twhile [ \"${fullVersion%[.-]*}\" != \"$fullVersion\" ]; do\n\t\tbases+=( $fullVersion )\n\t\tfullVersion=\"${fullVersion%[.-]*}\"\n\tdone\n\tbases+=( $fullVersion )\n\tif [ \"$javaVersion\" != \"$fullVersion\" ]; then\n\t\tbases+=( $javaVersion )\n\tfi\n\n\tlocal versionAliases=()\n\tfor base in \"${bases[@]}\"; do\n\t\tversionAliases+=( \"$base-$javaType\" )\n\t\tif [ \"$javaType\" = \"$defaultType\" ]; then\n\t\t\tversionAliases+=( \"$base\" )\n\t\tfi\n\tdone\n\n\t# add aliases and the prefixed versions (so the silly prefix versions come dead last)\n\tversionAliases+=( ${aliases[$javaVersion-$javaType]:-} )\n\n\tlocal variantAliases=()\n\tlocal variant\n\tfor variant in \"${variants[@]}\"; do\n\t\tcase \"$variant\" in\n\t\t\tlatest) variantAliases+=( \"${versionAliases[@]}\" ) ;;\n\t\t\t'') ;;\n\t\t\t*)\n\t\t\t\tlocal thisVariantAliases=( \"${versionAliases[@]/%/-$variant}\" )\n\t\t\t\tvariantAliases+=( \"${thisVariantAliases[@]//latest-/}\" )\n\t\t\t\t;;\n\t\tesac\n\tdone\n\n\techo \"${variantAliases[@]}\"\n}\n\nfor version; do\n\texport version\n\n\tvariants=\"$(jq -r '.[env.version].variants | map(@sh) | join(\" \")' versions.json)\"\n\teval \"variants=( $variants )\"\n\n\tdefaultOracleVariant=\"$(jq -r '\n\t\t.[env.version].variants\n\t\t| map(select(\n\t\t\tstartswith(\"oraclelinux\")\n\t\t))\n\t\t| .[0]\n\t' versions.json)\"\n\tdefaultDebianVariant=\"$(jq -r '\n\t\t.[env.version].variants\n\t\t| map(select(\n\t\t\tstartswith(\"alpine\")\n\t\t\tor startswith(\"oraclelinux\")\n\t\t\tor startswith(\"slim-\")\n\t\t\tor startswith(\"windows/\")\n\t\t\t| not\n\t\t))\n\t\t| .[0]\n\t' versions.json)\"\n\tdefaultAlpineVariant=\"$(jq -r '\n\t\t.[env.version].variants\n\t\t| map(select(\n\t\t\tstartswith(\"alpine\")\n\t\t))\n\t\t| .[0]\n\t' versions.json)\"\n\n\tfor javaType in jdk jre; do\n\t\texport javaType\n\n\t\tfor v in \"${variants[@]}\"; do\n\t\t\tdir=\"$version/$javaType/$v\"\n\t\t\t[ -f \"$dir/Dockerfile\" ] || continue\n\n\t\t\tvariant=\"$(basename \"$v\")\"\n\t\t\texport variant\n\n\t\t\tcommit=\"$(dirCommit \"$dir\")\"\n\n\t\t\tfullVersion=\"$(jq -r '.[env.version] | if env.variant | startswith(\"alpine\") then .alpine.version else .version end | gsub(\"[+]\"; \"-\")' versions.json)\"\n\n\t\t\tvariantArches=\n\t\t\tcase \"$v\" in\n\t\t\t\twindows/*) variantArches='windows-amd64' ;;\n\t\t\t\t*)\n\t\t\t\t\t# see \"update.sh\" for where these comment lines get embedded\n\t\t\t\t\tparent=\"$(awk 'toupper($1) == \"FROM\" { print $2; exit }' \"$dir/Dockerfile\")\"\n\t\t\t\t\tparentArches=\"${parentRepoToArches[$parent]:-}\"\n\t\t\t\t\tvariantArches=\"$(\n\t\t\t\t\t\tcomm -12 \\\n\t\t\t\t\t\t\t<(\n\t\t\t\t\t\t\t\tjq -r '\n\t\t\t\t\t\t\t\t\t.[env.version]\n\t\t\t\t\t\t\t\t\t| if env.variant | startswith(\"alpine\") then .alpine else . end\n\t\t\t\t\t\t\t\t\t| .[env.javaType].arches\n\t\t\t\t\t\t\t\t\t| keys[]\n\t\t\t\t\t\t\t\t' versions.json | sort\n\t\t\t\t\t\t\t) \\\n\t\t\t\t\t\t\t<(xargs -n1 <<<\"$parentArches\" | sort)\n\t\t\t\t\t)\"\n\t\t\t\t\t;;\n\t\t\tesac\n\n\t\t\tsharedTags=()\n\t\t\tfor windowsShared in windowsservercore nanoserver; do\n\t\t\t\tif [[ \"$variant\" == \"$windowsShared\"* ]]; then\n\t\t\t\t\tsharedTags+=( $(aliases \"$version\" \"$javaType\" \"$fullVersion\" \"$windowsShared\") )\n\t\t\t\t\tbreak\n\t\t\t\tfi\n\t\t\tdone\n\t\t\tif _latest \"$version\" \"$variant\"; then\n\t\t\t\tsharedTags+=( $(aliases \"$version\" \"$javaType\" \"$fullVersion\" 'latest') )\n\t\t\tfi\n\n\t\t\tvariantAliases=( \"$variant\" )\n\t\t\tcase \"$variant\" in\n\t\t\t\t\"$defaultOracleVariant\") variantAliases+=( oracle ) ;;\n\t\t\t\t\"slim-$defaultDebianVariant\") variantAliases+=( slim ) ;;\n\t\t\t\t\"$defaultAlpineVariant\") variantAliases+=( alpine ) ;;\n\t\t\tesac\n\n\t\t\tconstraints=\n\t\t\tcase \"$v\" in\n\t\t\t\twindows/*)\n\t\t\t\t\tconstraints=\"$variant\"\n\t\t\t\t\tif [[ \"$variant\" == nanoserver-* ]]; then\n\t\t\t\t\t\t# nanoserver variants \"COPY --from=...:...-windowsservercore-... ...\"\n\t\t\t\t\t\tconstraints+=\", windowsservercore-${variant#nanoserver-}\"\n\t\t\t\t\tfi\n\t\t\t\t\t;;\n\t\t\tesac\n\n\t\t\techo\n\t\t\techo \"Tags: $(join ', ' $(aliases \"$version\" \"$javaType\" \"$fullVersion\" \"${variantAliases[@]}\"))\"\n\t\t\tif [ \"${#sharedTags[@]}\" -gt 0 ]; then\n\t\t\t\techo \"SharedTags: $(join ', ' \"${sharedTags[@]}\")\"\n\t\t\tfi\n\t\t\tcat <<-EOE\n\t\t\t\tArchitectures: $(join ', ' $variantArches)\n\t\t\t\tGitCommit: $commit\n\t\t\t\tDirectory: $dir\n\t\t\tEOE\n\t\t\t[ -z \"$constraints\" ] || echo \"Constraints: $constraints\"\n\t\tdone\n\tdone\ndone\n"
        },
        {
          "name": "update.sh",
          "type": "blob",
          "size": 0.130859375,
          "content": "#!/usr/bin/env bash\nset -Eeuo pipefail\n\ncd \"$(dirname \"$(readlink -f \"$BASH_SOURCE\")\")\"\n\n./versions.sh \"$@\"\n./apply-templates.sh \"$@\"\n"
        },
        {
          "name": "versions.json",
          "type": "blob",
          "size": 2.0703125,
          "content": "{\n  \"24\": {\n    \"jdk\": {\n      \"arches\": {\n        \"amd64\": {\n          \"sha256\": \"fc69771e3af411ad5be33bf328a73b32318264a7aef1f28d1e6339cbf609819b\",\n          \"url\": \"https://download.java.net/java/early_access/jdk24/31/GPL/openjdk-24-ea+31_linux-x64_bin.tar.gz\"\n        },\n        \"arm64v8\": {\n          \"sha256\": \"5c35cd6370cdbe71bda96ccae35f3a74972b83dc6958e783b803f730b24f9a0a\",\n          \"url\": \"https://download.java.net/java/early_access/jdk24/31/GPL/openjdk-24-ea+31_linux-aarch64_bin.tar.gz\"\n        },\n        \"windows-amd64\": {\n          \"sha256\": \"72536bad2fa20c7ead0367944940a684a359e43649870d3cdbccd46bcc3b4009\",\n          \"url\": \"https://download.java.net/java/early_access/jdk24/31/GPL/openjdk-24-ea+31_windows-x64_bin.zip\"\n        }\n      }\n    },\n    \"variants\": [\n      \"oraclelinux9\",\n      \"oraclelinux8\",\n      \"bookworm\",\n      \"slim-bookworm\",\n      \"bullseye\",\n      \"slim-bullseye\",\n      \"windows/windowsservercore-ltsc2022\",\n      \"windows/windowsservercore-1809\",\n      \"windows/nanoserver-1809\"\n    ],\n    \"version\": \"24-ea+31\"\n  },\n  \"25\": {\n    \"jdk\": {\n      \"arches\": {\n        \"amd64\": {\n          \"sha256\": \"b4ee63f91536c06f46e6f0d9c45e820bc2cb552046df27aa5c77d0bacc35aa21\",\n          \"url\": \"https://download.java.net/java/early_access/jdk25/5/GPL/openjdk-25-ea+5_linux-x64_bin.tar.gz\"\n        },\n        \"arm64v8\": {\n          \"sha256\": \"43d1f9c863580d839b21121bc0c09ef0525d80ce1a3fbe26ea22fe2d77eadf7a\",\n          \"url\": \"https://download.java.net/java/early_access/jdk25/5/GPL/openjdk-25-ea+5_linux-aarch64_bin.tar.gz\"\n        },\n        \"windows-amd64\": {\n          \"sha256\": \"1fa831a6d9973fe9a64841dfd9c44759e07112be15da766d10c6f5e1b3eff4fe\",\n          \"url\": \"https://download.java.net/java/early_access/jdk25/5/GPL/openjdk-25-ea+5_windows-x64_bin.zip\"\n        }\n      }\n    },\n    \"variants\": [\n      \"oraclelinux9\",\n      \"oraclelinux8\",\n      \"bookworm\",\n      \"slim-bookworm\",\n      \"bullseye\",\n      \"slim-bullseye\",\n      \"windows/windowsservercore-ltsc2022\",\n      \"windows/windowsservercore-1809\",\n      \"windows/nanoserver-1809\"\n    ],\n    \"version\": \"25-ea+5\"\n  }\n}\n"
        },
        {
          "name": "versions.sh",
          "type": "blob",
          "size": 4.279296875,
          "content": "#!/usr/bin/env bash\nset -Eeuo pipefail\n\ncd \"$(dirname \"$(readlink -f \"$BASH_SOURCE\")\")\"\n\nversions=( \"$@\" )\nif [ ${#versions[@]} -eq 0 ]; then\n\tversions=( */ )\n\tjson='{}'\nelse\n\tjson=\"$(< versions.json)\"\nfi\nversions=( \"${versions[@]%/}\" )\n\ntmp=\"$(mktemp -d)\"\nrmTmp=\"$(printf 'rm -rf %q' \"$tmp\")\"\ntrap \"$rmTmp\" EXIT\n\n_get() {\n\tlocal url=\"$1\"; shift\n\tlocal file=\"${url////_}\"\n\tfile=\"${file//%/_}\"\n\tfile=\"${file//+/_}\"\n\tfile=\"${file//:/_}\"\n\tfile=\"$tmp/$file\"\n\tif [ ! -s \"$file\" ]; then\n\t\tcurl -fsSL \"$url\" -o \"$file\" --retry 5 || return 1\n\tfi\n\tif [ \"$#\" -gt 0 ]; then\n\t\tgrep \"$@\" \"$file\"\n\telse\n\t\tcat \"$file\"\n\tfi\n}\n\nabs-url() {\n\tlocal url=\"$1\"; shift\n\tlocal base=\"$1\"; shift\n\n\tcase \"$url\" in\n\t\thttp://* | https://* ) ;;\n\n\t\t/*)\n\t\t\tlocal extra=\"${base#*://*/}\"\n\t\t\tlocal baseBase=\"${base%$extra}\"\n\t\t\tbaseBase=\"${baseBase%/}\"\n\t\t\turl=\"$baseBase$url\"\n\t\t\t;;\n\n\t\t*)\n\t\t\techo >&2 \"error: TODO parse '$url' relative to '$base'\"\n\t\t\texit 1\n\t\t\t;;\n\tesac\n\n\techo \"$url\"\n}\n\njdk-java-net-download-url() {\n\tlocal javaVersion=\"$1\"; shift\n\tlocal fileSuffix=\"$1\"; shift\n\t_get \"https://jdk.java.net/$javaVersion/\" \\\n\t\t-Eom1 \"https://download.java.net/[^\\\"]+$fileSuffix\"\n}\n\njdk-java-net-download-version() {\n\tlocal javaVersion=\"$1\"; shift\n\tlocal downloadUrl=\"$1\"; shift\n\n\tdownloadVersion=\"$(grep -Eom1 \"openjdk-$javaVersion[^_]*_\" <<<\"$downloadUrl\")\" || return 1\n\tdownloadVersion=\"${downloadVersion%_}\"\n\tdownloadVersion=\"${downloadVersion#openjdk-}\"\n\n\techo \"$downloadVersion\"\n}\n\n# see https://stackoverflow.com/a/2705678/433558\nsed_escape_rhs() {\n\tsed -e 's/[\\/&]/\\\\&/g' <<<\"$*\" | sed -e ':a;N;$!ba;s/\\n/\\\\n/g'\n}\nsed_s() {\n\tlocal lhs=\"$1\"; shift\n\tlocal rhs=\"$1\"; shift\n\trhs=\"$(sed_escape_rhs \"$rhs\")\"\n\techo -n \"s/$lhs/$rhs/g\"\n}\nsed_s_pre() {\n\tlocal lhs=\"$1\"; shift\n\tlocal rhs=\"$1\"; shift\n\trhs=\"$(sed_escape_rhs \"$rhs\")\"\n\techo -n \"s/^($lhs) .*$/\\1 $rhs/\"\n}\n\nfor version in \"${versions[@]}\"; do\n\texport version\n\tdoc='{}'\n\tpossibleArches=(\n\t\t# https://jdk.java.net/24/\n\t\t'linux-aarch64'\n\t\t'linux-x64'\n\t\t'linux-x64-musl'\n\t\t'windows-x64'\n\t)\n\tfor arch in \"${possibleArches[@]}\"; do\n\t\tdownloadSuffix=\"_${arch}_bin\"\n\t\tcase \"$arch\" in\n\t\t\tlinux-*) downloadSuffix+='.tar.gz'; bashbrewArch= ;;\n\t\t\twindows-*) downloadSuffix+='.zip'; bashbrewArch='windows-' ;;\n\t\t\t*) echo >&2 \"error: unknown Oracle arch: '$arch'\"; exit 1 ;;\n\t\tesac\n\t\tjqExprPrefix=\n\t\tif [[ \"$arch\" == *-musl ]]; then\n\t\t\tjqExprPrefix='.alpine'\n\t\tfi\n\t\tif downloadUrl=\"$(jdk-java-net-download-url \"$version\" \"$downloadSuffix\")\" \\\n\t\t\t&& [ -n \"$downloadUrl\" ] \\\n\t\t\t&& downloadSha256=\"$(_get \"$downloadUrl.sha256\")\" \\\n\t\t\t&& [ -n \"$downloadSha256\" ] \\\n\t\t; then\n\t\t\tdownloadVersion=\"$(jdk-java-net-download-version \"$version\" \"$downloadUrl\")\"\n\t\t\tcurrentVersion=\"$(jq <<<\"$doc\" -r \"$jqExprPrefix.version // \\\"\\\"\")\"\n\t\t\tif [ -n \"$currentVersion\" ] && [ \"$currentVersion\" != \"$downloadVersion\" ]; then\n\t\t\t\techo >&2 \"error: Oracle version mismatch: '$currentVersion' vs '$downloadVersion'\"\n\t\t\t\texit 1\n\t\t\telif [ -z \"$currentVersion\" ]; then\n\t\t\t\techo \"$version: $downloadVersion${jqExprPrefix:+ (alpine)}\"\n\t\t\tfi\n\t\t\tcase \"$arch\" in\n\t\t\t\t*-aarch64*) bashbrewArch+='arm64v8' ;;\n\t\t\t\t*-x64*) bashbrewArch+='amd64' ;;\n\t\t\t\t*) echo >&2 \"error: unknown Oracle arch: '$arch'\"; exit 1 ;;\n\t\t\tesac\n\t\t\texport arch bashbrewArch downloadUrl downloadSha256 downloadVersion\n\t\t\tdoc=\"$(jq <<<\"$doc\" -c '\n\t\t\t\t'\"$jqExprPrefix\"'.version = env.downloadVersion\n\t\t\t\t| '\"$jqExprPrefix\"'.jdk.arches[env.bashbrewArch] = {\n\t\t\t\t\turl: env.downloadUrl,\n\t\t\t\t\tsha256: env.downloadSha256,\n\t\t\t\t}\n\t\t\t')\"\n\t\tfi\n\tdone\n\n\tif ! jq <<<\"$doc\" -e '[ .. | objects | select(has(\"arches\")) | .arches | has(\"amd64\") ] | all' &> /dev/null; then\n\t\techo >&2 \"error: missing 'amd64' for '$version'; cowardly refusing to continue! (because this is almost always a scraping flake or similar bug)\"\n\t\texit 1\n\tfi\n\n\tjson=\"$(jq <<<\"$json\" -c --argjson doc \"$doc\" '\n\t\t.[env.version] = $doc + {\n\t\t\tvariants: [\n\t\t\t\t(\n\t\t\t\t\t\"9\",\n\t\t\t\t\t\"8\",\n\t\t\t\t\tempty\n\t\t\t\t| \"oraclelinux\" + .),\n\t\t\t\t(\n\t\t\t\t\t\"bookworm\",\n\t\t\t\t\t\"bullseye\",\n\t\t\t\t\tempty\n\t\t\t\t| ., \"slim-\" + .),\n\t\t\t\tif $doc.alpine then\n\t\t\t\t\t\"3.19\",\n\t\t\t\t\t\"3.18\",\n\t\t\t\t\tempty\n\t\t\t\t| \"alpine\" + . else empty end,\n\t\t\t\tif $doc.jdk.arches | keys | any(startswith(\"windows-\")) then\n\t\t\t\t\t(\n\t\t\t\t\t\t\"ltsc2022\",\n\t\t\t\t\t\t\"1809\",\n\t\t\t\t\t\tempty\n\t\t\t\t\t| \"windows/windowsservercore-\" + .),\n\t\t\t\t\t(\n\t\t\t\t\t\t\"1809\",\n\t\t\t\t\t\tempty\n\t\t\t\t\t| \"windows/nanoserver-\" + .)\n\t\t\t\telse empty end\n\t\t\t],\n\t\t}\n\t')\"\ndone\n\njq <<<\"$json\" -S . > versions.json\n"
        }
      ]
    }
  ]
}