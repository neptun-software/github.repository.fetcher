{
  "metadata": {
    "timestamp": 1736568590339,
    "page": 645,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY0OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "chadoe/docker-cleanup-volumes",
      "stars": 1439,
      "defaultBranch": "master",
      "files": [
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.818359375,
          "content": "#\n#Cleanup orphaned docker volumes\n#Usage:\n#docker run -v /var/run/docker.sock:/var/run/docker.sock -v /var/lib/docker:/var/lib/docker --rm martin/docker-cleanup-volumes [--dry-run]\n#\nFROM alpine:3.17\n\nMAINTAINER Martin van Beurden <chadoe@gmail.com>\n\nENV DOCKER_VERSION=20.10.21\n\n#Install an up to date version of docker\nRUN apk add --update-cache curl bash grep && \\\n# the docker package in alpine disables aufs and devicemapper\n    curl -sSL https://download.docker.com/linux/static/stable/x86_64/docker-$DOCKER_VERSION.tgz | tar -xz docker/docker --strip-components 1 && \\\n    mv ./docker /usr/bin && chmod +x /usr/bin/docker && \\\n#cleanup\n    apk del curl && rm -rf /var/cache/apk/*\n\n#Add the cleanup script\nCOPY ./docker-cleanup-volumes.sh /usr/local/bin/\n\n#Define entrypoint\nENTRYPOINT [\"/usr/local/bin/docker-cleanup-volumes.sh\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0595703125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2014 Martin van Beurden\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.3681640625,
          "content": "docker-cleanup-volumes\n======================\n\n[![License](https://img.shields.io/badge/license-MIT-blue.svg)](https://raw.githubusercontent.com/chadoe/docker-cleanup-volumes/master/LICENSE)\n[![Docker Pulls](https://img.shields.io/docker/pulls/martin/docker-cleanup-volumes.svg)](https://hub.docker.com/r/martin/docker-cleanup-volumes/)\n[![Docker Stars](https://img.shields.io/docker/stars/martin/docker-cleanup-volumes.svg)](https://hub.docker.com/r/martin/docker-cleanup-volumes/)\n\n##### WARNING: Use at your own risk, always test with the `--dry-run` parameter first. If it's not compatible with your system or Docker version it *will* delete all your volumes.\n\nShellscript to delete orphaned docker volumes in /var/lib/docker/volumes and /var/lib/docker/vfs/dir  \nDocker version 1.4.1 up to ...\n\n### Note about Docker 1.9 and up\nTo delete orphaned volumes in Docker 1.9 and up you can also use the built-in `docker volume prune` commands instead of this docker-cleanup-volumes script. The built-in command also deletes any directory in /var/lib/docker/volumes that is not a volume so make sure you didn't put anything in there you want to save:  \nList:\n```\n$ docker volume ls -qf dangling=true\n```\n\nCleanup:\n```\n$ docker volume rm $(docker volume ls -qf dangling=true)\n```\nOr, handling a no-op better but Linux specific:\n```\n$ docker volume ls -qf dangling=true | xargs -r docker volume rm\n```\n\n### Precautions\n1. Don't use with boot2docker, docker machine or any tools that use a virtual machine to run docker, unless you run the script on the virtual machine itself (meaning don't run this script or docker command from your MAC).\n2. [Backup your volumes](https://docs.docker.com/userguide/dockervolumes/#backup-restore-or-migrate-data-volumes \"Docker Docs\") because.. you know.. the script may not like your system.\n3. When using the script for the first time or after upgrading the host Docker version, run the script with the `--dry-run` parameter first to make sure it works okay and doesn't delete any volumes that shouldn't be deleted. If you feel bold and run it without `--dry-run` anyway, make sure you did 1.\n\n### Usage standalone script\n$ sudo ./docker-cleanup-volumes.sh [--dry-run] [--verbose]\n\n--dry-run : Use the --dry-run option to have the script print the volumes that would have been deleted without actually deleting them.  \n--verbose : Have the script output more information.  \n\n### Running from Docker\nRun the \"latest\" forward compatible Docker client version (works with host Docker 1.4.x up to 1.13.x)\n```\n$ docker run -v /var/run/docker.sock:/var/run/docker.sock -v /var/lib/docker:/var/lib/docker --rm martin/docker-cleanup-volumes --dry-run\n```\n\nIf you symlinked /var/lib/docker to somewhere else make sure you tell the Docker container where it is by providing the real path or by using readlink in volume parameter.\n```\n$ docker run -v /var/run/docker.sock:/var/run/docker.sock -v $(readlink -f /var/lib/docker):/var/lib/docker --rm martin/docker-cleanup-volumes --dry-run\n```\n\n### Running from docker using the host docker binary\nIt is also possible to use the host docker binary by mounting the host docker bin directory. This way you make sure the Docker versions are the same between host and container. For example:\n```\n$ docker run -v $(which docker):/bin/docker -v /var/run/docker.sock:/var/run/docker.sock -v $(readlink -f /var/lib/docker):/var/lib/docker --rm martin/docker-cleanup-volumes --dry-run\n```\n"
        },
        {
          "name": "docker-cleanup-volumes.sh",
          "type": "blob",
          "size": 4.935546875,
          "content": "#! /bin/bash\n\nset -eou pipefail\n\n#usage: sudo ./docker-cleanup-volumes.sh [--dry-run]\n\ndocker_bin=\"$(which docker.io 2> /dev/null || which docker 2> /dev/null)\"\n\n# Default dir\ndockerdir=/var/lib/docker\n\n# Look for an alternate docker directory with -g/--graph option\ndockerpid=$(ps ax | grep \"$docker_bin\" | grep -v grep | awk '{print $1; exit}') || :\nif [[ -n \"$dockerpid\" && $dockerpid -gt 0 ]]; then\n    next_arg_is_dockerdir=false\n    while read -d $'\\0' arg\n    do\n        if [[ $arg =~ ^--graph=(.+) ]]; then\n            dockerdir=${BASH_REMATCH[1]}\n            break\n        elif [ $arg = '-g' ]; then\n            next_arg_is_dockerdir=true\n        elif [ $next_arg_is_dockerdir = true ]; then\n            dockerdir=$arg\n            break\n        fi\n    done < /proc/$dockerpid/cmdline\nfi\n\ndockerdir=$(readlink -f \"$dockerdir\")\n\nvolumesdir=${dockerdir}/volumes\nvfsdir=${dockerdir}/vfs/dir\nallvolumes=()\ndryrun=false\nverbose=false\n\nfunction log_verbose() {\n    if [ \"${verbose}\" = true ]; then\n        echo \"$1\"\n    fi;\n}\n\nfunction delete_volumes() {\n  local targetdir=$1\n  echo\n  if [[ ! -d \"${targetdir}\" || ! \"$(ls -A \"${targetdir}\")\" ]]; then\n        echo \"Directory ${targetdir} does not exist or is empty, skipping.\"\n        return\n  fi\n  echo \"Delete unused volume directories from $targetdir\"\n  local dir\n  while read -d $'\\0' dir\n  do\n        dir=$(basename \"$dir\")\n        if [[ -d \"${targetdir}/${dir}/_data\" || \"${dir}\" =~ [0-9a-f]{64} ]]; then\n                if [ ${#allvolumes[@]} -gt 0 ] && [[ ${allvolumes[@]} =~ \"${dir}\" ]]; then\n                        echo \"In use ${dir}\"\n                else\n                        if [ \"${dryrun}\" = false ]; then\n                                echo \"Deleting ${dir}\"\n                                rm -rf \"${targetdir}/${dir}\"\n                        else\n                                echo \"Would have deleted ${dir}\"\n                        fi\n                fi\n        else\n                echo \"Not a volume ${dir}\"\n        fi\n  done < <(find \"${targetdir}\" -mindepth 1 -maxdepth 1 -type d -print0 2>/dev/null)\n}\n\nif [ $UID != 0 ]; then\n    echo \"You need to be root to use this script.\"\n    exit 1\nfi\n\nif [ -z \"$docker_bin\" ] ; then\n    echo \"Please install docker. You can install docker by running \\\"wget -qO- https://get.docker.io/ | sh\\\".\"\n    exit 1\nfi\n\nwhile [[ $# > 0 ]]\ndo\n    key=\"$1\"\n\n    case $key in\n        -n|--dry-run)\n            dryrun=true\n        ;;\n        -v|--verbose)\n            verbose=true\n        ;;\n        *)\n            echo \"Cleanup docker volumes: remove unused volumes.\"\n            echo \"Usage: ${0##*/} [--dry-run] [--verbose]\"\n            echo \"   -n, --dry-run: dry run: display what would get removed.\"\n            echo \"   -v, --verbose: verbose output.\"\n            exit 1\n        ;;\n    esac\n    shift\ndone\n\n# Make sure that we can talk to docker daemon. If we cannot, we fail here.\n${docker_bin} version >/dev/null\n\ncontainer_ids=$(${docker_bin} ps -a -q --no-trunc)\n\n#All volumes from all containers\nSAVEIFS=$IFS\nIFS=$(echo -en \"\\n\\b\")\nfor container in $container_ids; do\n        #add container id to list of volumes, don't think these\n        #ever exists in the volumesdir but just to be safe\n        allvolumes+=${container}\n        #add all volumes from this container to the list of volumes\n        log_verbose \"Inspecting container ${container}\"\n        for volpath in $(\n                ${docker_bin} inspect --format='{{range $key, $val := .}}{{if eq $key \"Volumes\"}}{{range $vol, $path := .}}{{$path}}{{\"\\n\"}}{{end}}{{end}}{{if eq $key \"Mounts\"}}{{range $mount := $val}}{{$mount.Source}}{{\"\\n\"}}{{end}}{{end}}{{end}}' ${container} \\\n        ); do\n                log_verbose \"Processing volumepath ${volpath}\"\n                #try to get volume id from the volume path\n                vid=$(echo \"${volpath}\" | sed 's|.*/\\(.*\\)/_data$|\\1|;s|.*/\\([0-9a-f]\\{64\\}\\)$|\\1|')\n                # check for either a 64 character vid or then end of a volumepath containing _data:\n                if [[ \"${vid}\" =~ ^[0-9a-f]{64}$ || (${volpath} =~ .*/_data$ && ! \"${vid}\" =~ \"/\") ]]; then\n                        log_verbose \"Found volume ${vid}\"\n                        allvolumes+=(\"${vid}\")\n                else\n                        #check if it's a bindmount, these have a config.json file in the ${volumesdir} but no files in ${vfsdir} (docker 1.6.2 and below)\n                        for bmv in $(find \"${volumesdir}\" -name config.json -print | xargs grep -l \"\\\"IsBindMount\\\":true\" | xargs grep -l \"\\\"Path\\\":\\\"${volpath}\\\"\"); do\n                                bmv=\"$(basename \"$(dirname \"${bmv}\")\")\"\n                                log_verbose \"Found bindmount ${bmv}\"\n                                allvolumes+=(\"${bmv}\")\n                                #there should be only one config for the bindmount, delete any duplicate for the same bindmount.\n                                break\n                        done\n                fi\n        done\ndone\nIFS=$SAVEIFS\n\ndelete_volumes \"${volumesdir}\"\ndelete_volumes \"${vfsdir}\"\n"
        }
      ]
    }
  ]
}