{
  "metadata": {
    "timestamp": 1736568381600,
    "page": 320,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "create-dmg/create-dmg",
      "stars": 2177,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.3642578125,
          "content": "# EditorConfig for create-dmg project\n# EditorConfig is awesome: https://EditorConfig.org\n\nroot = true\n\n[*]\nend_of_line = lf\ninsert_final_newline = true\ncharset = utf-8\n\n# We use tabs in our own code\n[{create-dmg,*.applescript,*.sh}]\nindent_style = tab\nindent_size = 2\n\n# But the Python code we pull in from pyhacker uses spaces\n[*.py]\nindent_style = space\nindent_size = 4\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.029296875,
          "content": ".svn\n.vscode\n\n*.dmg\n.DS_Store\n"
        },
        {
          "name": ".this-is-the-create-dmg-repo",
          "type": "blob",
          "size": 0.125,
          "content": "This is just a dummy file so create-dmg can tell whether it's being run from\ninside the Git repo or from an installed location.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.09375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2008-2014 Andrey Tarantsov\nCopyright (c) 2020 Andrew Janke\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.8642578125,
          "content": "# Makefile for Cowsay\n\nPACKAGE_TARNAME = create-dmg\n\nprefix = /usr/local\nexec_prefix = ${prefix}\nbindir = ${exec_prefix}/bin\ndatarootdir = ${prefix}/share\ndatadir = ${datarootdir}\ndocdir = ${datarootdir}/doc/${PACKAGE_TARNAME}\nsysconfdir = ${prefix}/etc\nmandir=${datarootdir}/man\nsrcdir = .\n\nSHELL = /bin/sh\nINSTALL = install\nINSTALL_PROGRAM = $(INSTALL)\nINSTALL_DATA = ${INSTALL} -m 644\n\n.PHONY: install uninstall\n\ninstall: create-dmg\n\t$(INSTALL) -d $(DESTDIR)$(prefix)\n\t$(INSTALL) -d $(DESTDIR)$(bindir)\n\t$(INSTALL_PROGRAM) create-dmg $(DESTDIR)$(bindir)/create-dmg\n\t$(INSTALL) -d $(DESTDIR)$(datadir)/$(PACKAGE_TARNAME)\n\tcp -R support $(DESTDIR)$(datadir)/$(PACKAGE_TARNAME)\n\tcp -R examples $(DESTDIR)$(datadir)/$(PACKAGE_TARNAME)\n\tcp -R tests $(DESTDIR)$(datadir)/$(PACKAGE_TARNAME)\n\nuninstall:\n\trm -f $(DESTDIR)$(bindir)/create-dmg\n\trm -rf $(DESTDIR)$(datadir)/$(PACKAGE_TARNAME)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.7841796875,
          "content": "create-dmg\n==========\n\nA shell script to build fancy DMGs.\n\nStatus and contribution policy\n------------------------------\n\nCreate-dmg is mostly maintained by [@aonez](https://github.com/aonez) and the contributors who send pull requests.\nThe project home page is <https://github.com/create-dmg/create-dmg>.\n\nWe will merge any pull request that adds something useful and does not break existing things.\n\nIf you're an active user and want to be a maintainer, or just want to chat, please ping us on Gitter at [gitter.im/create-dmg/Lobby](https://gitter.im/create-dmg/Lobby), or [email Andrew directly](floss@apjanke.net).\n\nCreate-dmg was originally created by [Andrey Tarantsov](https://github.com/andreyvit).\nIn May 2020 [Andrew Janke](https://github.com/apjanke) helped vastly with the project.\n\nInstallation\n------------\n\n- You can install this script using [Homebrew](https://brew.sh):\n\n  ```sh\n  brew install create-dmg\n  ```\n\n- You can download the [latest release](https://github.com/create-dmg/create-dmg/releases/latest) and install it from there:\n\n  ```sh\n  make install\n  ```\n\n- You can also clone the entire repository and run it locally from there:\n\n  ```sh\n  git clone https://github.com/create-dmg/create-dmg.git\n  ```\n\nUsage\n-----\n\n```sh\ncreate-dmg [options ...] <output_name.dmg> <source_folder>\n```\n\nAll contents of source\\_folder will be copied into the disk image.\n\n**Options:**\n\n- **--volname \\<name\\>:** set volume name (displayed in the Finder sidebar and window title)\n- **--volicon \\<icon.icns\\>:** set volume icon\n- **--background \\<pic.png\\>:** set folder background image (provide png, gif, jpg)\n- **--window-pos \\<x\\> \\<y\\>:** set position the folder window\n- **--window-size \\<width\\> \\<height\\>:** set size of the folder window\n- **--text-size \\<text_size\\>:** set window text size (10-16)\n- **--icon-size \\<icon_size\\>:** set window icons size (up to 128)\n- **--icon \\<file_name\\> \\<x\\> \\<y\\>:** set position of the file's icon\n- **--hide-extension \\<file_name\\>:** hide the extension of file\n- **--app-drop-link \\<x\\> \\<y\\>:** make a drop link to Applications, at location x, y\n- **--ql-drop-link \\<x\\> \\<y\\>:** make a drop link to /Library/QuickLook, at location x, y\n- **--eula \\<eula_file\\>:** attach a license file to the dmg\n- **--rez \\<rez_path\\>:** specify custom path to Rez tool used to include license file\n- **--no-internet-enable:** disable automatic mount&copy\n- **--format:** specify the final image format (UDZO|UDBZ|ULFO|ULMO) (default is UDZO)\n- **--filesystem:** specify the image filesystem (HFS+|APFS) (default is HFS+, APFS supports macOS 10.13 or newer)\n- **--encrypt:** enable encryption for the resulting disk image (AES-256 - you will be prompted for password)\n- **--encrypt-aes128:** enable encryption for the resulting disk image (AES-128 - you will be prompted for password)\n- **--add-file \\<target_name\\> \\<file|folder\\> \\<x\\> \\<y\\>:** add additional file or folder (can be used multiple times)\n- **--disk-image-size \\<x\\>:** set the disk image size manually to x MB\n- **--hdiutil-verbose:** execute hdiutil in verbose mode\n- **--hdiutil-quiet:** execute hdiutil in quiet mode\n- **--bless:** bless the mount folder (deprecated, needs macOS 12.2.1 or older, [#127](https://github.com/create-dmg/create-dmg/pull/127))\n- **--codesign \\<signature\\>:** codesign the disk image with the specified signature\n- **--notarize \\<credentials>:** notarize the disk image (waits and staples) with the keychain stored credentials\n    For more information check [Apple's documentation](https://developer.apple.com/documentation/security/notarizing_macos_software_before_distribution/customizing_the_notarization_workflow)\n- **--skip-jenkins:** skip Finder-prettifying AppleScript, useful in Sandbox and non-GUI environments, [#72](https://github.com/create-dmg/create-dmg/pull/72)\n- **--sandbox-safe:** hdiutil with sandbox compatibility, do not bless and do not execute the cosmetic AppleScript (not supported for APFS disk images)\n- **--version:** show tool version number\n- **-h, --help:** display the help\n\nEncryption\n-------\nhdiutil supports native disk image encryption using AES-256 (slower but stronger) or AES-128 (faster but weaker).  Enabling disk image encryption via create-dmg will require the entry of the password during the middle (compression phase) of the process.  Take care to enter the password correctly, because hdiutil will not prompt a second time to confirm the password.\n\nExample\n-------\n\n```sh\n#!/bin/sh\ntest -f Application-Installer.dmg && rm Application-Installer.dmg\ncreate-dmg \\\n  --volname \"Application Installer\" \\\n  --volicon \"application_icon.icns\" \\\n  --background \"installer_background.png\" \\\n  --window-pos 200 120 \\\n  --window-size 800 400 \\\n  --icon-size 100 \\\n  --icon \"Application.app\" 200 190 \\\n  --hide-extension \"Application.app\" \\\n  --app-drop-link 600 185 \\\n  \"Application-Installer.dmg\" \\\n  \"source_folder/\"\n```\n\nSee the `examples` folder in the source tree for more examples.\n\nRequirements\n------------\n\nNothing except a standard installation of macOS/OS X is required.\n\nWe think this works in OS X 10.6 Snow Leopard and later.\n\nWe'd like to keep it working in as many versions as possible, but unfortunately, we just don't have test boxes running old versions of OS X adequate to make this happen. Development and testing mostly happens in the last 3-5 years' worth of macOS releases; as of 2020, this means macOS 10.12 and later.\n\nBut if you find a bug in an older version, go ahead and report it! We'll try to work with you to get it fixed.\n\nIf you're running OS X 10.5 or earlier, you're SOL. That's just too hard to deal with in 2023. ;)\n\nAlternatives\n------------\n\n- [node-appdmg](https://github.com/LinusU/node-appdmg)\n- [dmgbuild](https://pypi.python.org/pypi/dmgbuild)\n- see the [StackOverflow question](http://stackoverflow.com/questions/96882/how-do-i-create-a-nice-looking-dmg-for-mac-os-x-using-command-line-tools)\n"
        },
        {
          "name": "builder",
          "type": "tree",
          "content": null
        },
        {
          "name": "create-dmg",
          "type": "blob",
          "size": 18.6591796875,
          "content": "#!/usr/bin/env bash\n\n# Create a read-only disk image of the contents of a folder\n\n# Bail out on any unhandled errors\nset -e;\n# Any command that exits with non-zero code will cause the pipeline to fail\nset -o pipefail;\n\nCDMG_VERSION='1.2.1'\n\n# The full path to the \"support/\" directory this script is using\n# (This will be set up by code later in the script.)\nCDMG_SUPPORT_DIR=\"\"\n\nOS_FULL_VERSION=\"$(sw_vers | sed -n 2p | cut -d : -f 2 | tr -d '[:space:]' | cut -c1-)\"\nOS_MAJOR_VERSION=\"$(echo $OS_FULL_VERSION | cut -d . -f 1)\"\nOS_MINOR_VERSION=\"$(echo $OS_FULL_VERSION | cut -d . -f 2)\"\nWINX=10\nWINY=60\nWINW=500\nWINH=350\nICON_SIZE=128\nTEXT_SIZE=16\nFORMAT=\"UDZO\"\nFILESYSTEM=\"HFS+\"\nADD_FILE_SOURCES=()\nADD_FILE_TARGETS=()\nIMAGEKEY=\"\"\nHDIUTIL_VERBOSITY=\"\"\nSANDBOX_SAFE=0\nBLESS=0\nSKIP_JENKINS=0\nMAXIMUM_UNMOUNTING_ATTEMPTS=3\nSIGNATURE=\"\"\nNOTARIZE=\"\"\n\nfunction pure_version() {\n\techo \"$CDMG_VERSION\"\n}\n\nfunction hdiutil_detach_retry() {\n\t# Unmount\n\tunmounting_attempts=0\n\tuntil\n\t\techo \"Unmounting disk image...\"\n\t\t(( unmounting_attempts++ ))\n\t\thdiutil detach \"$1\"\n\t\texit_code=$?\n\t\t(( exit_code ==  0 )) && break            # nothing goes wrong\n\t\t(( exit_code != 16 )) && exit $exit_code  # exit with the original exit code\n\t\t# The above statement returns 1 if test failed (exit_code == 16).\n\t\t#   It can make the code in the {do... done} block to be executed\n\tdo\n\t\t(( unmounting_attempts == MAXIMUM_UNMOUNTING_ATTEMPTS )) && exit 16  # patience exhausted, exit with code EBUSY\n\t\techo \"Wait a moment...\"\n\t\tsleep $(( 1 * (2 ** unmounting_attempts) ))\n\tdone\n\tunset unmounting_attempts\n}\n\nfunction version() {\n\techo \"create-dmg $(pure_version)\"\n}\n\nfunction usage() {\n\tversion\n\tcat <<EOHELP\n\nCreates a fancy DMG file.\n\nUsage:  $(basename $0) [options] <output_name.dmg> <source_folder>\n\nAll contents of <source_folder> will be copied into the disk image.\n\nOptions:\n  --volname <name>\n      set volume name (displayed in the Finder sidebar and window title)\n  --volicon <icon.icns>\n      set volume icon\n  --background <pic.png>\n      set folder background image (provide png, gif, or jpg)\n  --window-pos <x> <y>\n      set position the folder window\n  --window-size <width> <height>\n      set size of the folder window\n  --text-size <text_size>\n      set window text size (10-16)\n  --icon-size <icon_size>\n      set window icons size (up to 128)\n  --icon file_name <x> <y>\n      set position of the file's icon\n  --hide-extension <file_name>\n      hide the extension of file\n  --app-drop-link <x> <y>\n      make a drop link to Applications, at location x,y\n  --ql-drop-link <x> <y>\n      make a drop link to user QuickLook install dir, at location x,y\n  --eula <eula_file>\n      attach a license file to the dmg (plain text or RTF)\n  --no-internet-enable\n      disable automatic mount & copy\n  --format <format>\n      specify the final disk image format (UDZO|UDBZ|ULFO|ULMO) (default is UDZO)\n  --filesystem <filesystem>\n      specify the disk image filesystem (HFS+|APFS) (default is HFS+, APFS supports macOS 10.13 or newer)\n  --encrypt\n      enable encryption for the resulting disk image (AES-256 - you will be prompted for password)\n  --encrypt-aes128\n      enable encryption for the resulting disk image (AES-128 - you will be prompted for password)\n  --add-file <target_name> <file>|<folder> <x> <y>\n      add additional file or folder (can be used multiple times)\n  --disk-image-size <x>\n      set the disk image size manually to x MB\n  --hdiutil-verbose\n      execute hdiutil in verbose mode\n  --hdiutil-quiet\n      execute hdiutil in quiet mode\n  --bless\n      bless the mount folder (deprecated, needs macOS 12.2.1 or older)\n  --codesign <signature>\n      codesign the disk image with the specified signature\n  --notarize <credentials>\n      notarize the disk image (waits and staples) with the keychain stored credentials\n  --sandbox-safe\n      execute hdiutil with sandbox compatibility and do not bless (not supported for APFS disk images)\n  --skip-jenkins\n      skip Finder-prettifying AppleScript, useful in Sandbox and non-GUI environments\n  --version\n\t    show create-dmg version number\n  -h, --help\n\t    display this help screen\n\nEOHELP\n\texit 0\n}\n\n# factors can cause interstitial disk images to contain more than a single\n# partition - expand the hunt for the temporary disk image by checking for\n# the path of the volume, versus assuming its the first result (as in pr/152).\nfunction find_mount_dir() {\n\tlocal dev_name=\"${1}\"\n\n\t>&2 echo \"Searching for mounted interstitial disk image using ${dev_name}... \"\n\t# enumerate up to 9 partitions\n\tfor i in {1..9}; do\n\t\t# attempt to find the partition\n\t\tlocal found_dir\n\t\tfound_dir=$(hdiutil info | grep -E --color=never \"${dev_name}\" | head -${i} | awk '{print $3}' | xargs)\n\t\tif [[ -n \"${found_dir}\" ]]; then\n\t\t\t\techo \"${found_dir}\"\n\t\t\t\treturn 0\n\t\tfi\n\tdone\n}\n\n# Argument parsing\n\nwhile [[ \"${1:0:1}\" = \"-\" ]]; do\n\tcase $1 in\n\t\t--volname)\n\t\t\tVOLUME_NAME=\"$2\"\n\t\t\tshift; shift;;\n\t\t--volicon)\n\t\t\tVOLUME_ICON_FILE=\"$2\"\n\t\t\tshift; shift;;\n\t\t--background)\n\t\t\tBACKGROUND_FILE=\"$2\"\n\t\t\tBACKGROUND_FILE_NAME=\"$(basename \"$BACKGROUND_FILE\")\"\n\t\t\tBACKGROUND_CLAUSE=\"set background picture of opts to file \\\".background:$BACKGROUND_FILE_NAME\\\"\"\n\t\t\tREPOSITION_HIDDEN_FILES_CLAUSE=\"set position of every item to {theBottomRightX + 100, 100}\"\n\t\t\tshift; shift;;\n\t\t--icon-size)\n\t\t\tICON_SIZE=\"$2\"\n\t\t\tshift; shift;;\n\t\t--text-size)\n\t\t\tTEXT_SIZE=\"$2\"\n\t\t\tshift; shift;;\n\t\t--window-pos)\n\t\t\tWINX=$2; WINY=$3\n\t\t\tshift; shift; shift;;\n\t\t--window-size)\n\t\t\tWINW=$2; WINH=$3\n\t\t\tshift; shift; shift;;\n\t\t--icon)\n\t\t\tPOSITION_CLAUSE=\"${POSITION_CLAUSE}set position of item \\\"$2\\\" to {$3, $4}\n\t\t\t\"\n\t\t\tshift; shift; shift; shift;;\n\t\t--hide-extension)\n\t\t\tHIDING_CLAUSE=\"${HIDING_CLAUSE}set the extension hidden of item \\\"$2\\\" to true\n\t\t\t\"\n\t\t\tshift; shift;;\n\t\t-h | --help)\n\t\t\tusage;;\n\t\t--version)\n\t\t\tversion; exit 0;;\n\t\t--pure-version)\n\t\t\tpure_version; exit 0;;\n\t\t--ql-drop-link)\n\t\t\tQL_LINK=$2\n\t\t\tQL_CLAUSE=\"set position of item \\\"QuickLook\\\" to {$2, $3}\n\t\t\t\"\n\t\t\tshift; shift; shift;;\n\t\t--app-drop-link)\n\t\t\tAPPLICATION_LINK=$2\n\t\t\tAPPLICATION_CLAUSE=\"set position of item \\\"Applications\\\" to {$2, $3}\n\t\t\t\"\n\t\t\tshift; shift; shift;;\n\t\t--eula)\n\t\t\tEULA_RSRC=$2\n\t\t\tshift; shift;;\n\t\t--no-internet-enable)\n\t\t\tNOINTERNET=1\n\t\t\tshift;;\n\t\t--format)\n\t\t\tFORMAT=\"$2\"\n\t\t\tshift; shift;;\n\t\t--filesystem)\n\t\t\tFILESYSTEM=\"$2\"\n\t\t\tshift; shift;;\n\t\t--encrypt)\n\t\t\tENABLE_ENCRYPTION=1\n\t\t\tAESBITS=256\n\t\t\tshift;;\n\t\t--encrypt-aes128)\n\t\t\tENABLE_ENCRYPTION=1\n\t\t\tAESBITS=128\n\t\t\tshift;;\n\t\t--add-file | --add-folder)\n\t\t\tADD_FILE_TARGETS+=(\"$2\")\n\t\t\tADD_FILE_SOURCES+=(\"$3\")\n\t\t\tPOSITION_CLAUSE=\"${POSITION_CLAUSE}\n\t\t\tset position of item \\\"$2\\\" to {$4, $5}\n\t\t\t\"\n\t\t\tshift; shift; shift; shift; shift;;\n\t\t--disk-image-size)\n\t\t\tDISK_IMAGE_SIZE=\"$2\"\n\t\t\tshift; shift;;\n\t\t--hdiutil-verbose)\n\t\t\tHDIUTIL_VERBOSITY='-verbose'\n\t\t\tshift;;\n\t\t--hdiutil-quiet)\n\t\t\tHDIUTIL_VERBOSITY='-quiet'\n\t\t\tshift;;\n\t\t--codesign)\n\t\t\tSIGNATURE=\"$2\"\n\t\t\tshift; shift;;\n\t\t--notarize)\n\t\t\tNOTARIZE=\"$2\"\n\t\t\tshift; shift;;\n\t\t--sandbox-safe)\n\t\t\tSANDBOX_SAFE=1\n\t\t\tshift;;\n\t\t--bless)\n\t\t\tBLESS=1\n\t\t\tshift;;\n\t\t--rez)\n\t\t\techo \"REZ is no more directly used. You can remove the --rez argument.\"\n\t\t\tshift; shift;;\n\t\t--skip-jenkins)\n\t\t\tSKIP_JENKINS=1\n\t\t\tshift;;\n\t\t-*)\n\t\t\techo \"Unknown option: $1. Run 'create-dmg --help' for help.\"\n\t\t\texit 1;;\n\tesac\n\tcase $FORMAT in\n\t\tUDZO)\n\t\t\tIMAGEKEY=\"-imagekey zlib-level=9\";;\n\t\tUDBZ)\n\t\t\tIMAGEKEY=\"-imagekey bzip2-level=9\";;\n\t\tULFO)\n\t\t\t;;\n\t\tULMO)\n\t\t\t;;\n\t\t*)\n\t\t\techo >&2 \"Unknown disk image format: $FORMAT\"\n\t\t\texit 1;;\n\tesac\ndone\n\nif [[ -z \"$2\" ]]; then\n\techo \"Not enough arguments. Run 'create-dmg --help' for help.\"\n\texit 1\nfi\n\nDMG_PATH=\"$1\"\nSRC_FOLDER=\"$(cd \"$2\" > /dev/null; pwd)\"\n\n# Argument validation checks\n\nif [[ \"${DMG_PATH: -4}\" != \".dmg\" ]]; then\n\techo \"Output file name must end with a .dmg extension. Run 'create-dmg --help' for help.\"\n\texit 1\nfi\n\nif [[ \"${FILESYSTEM}\" != \"HFS+\" ]] && [[ \"${FILESYSTEM}\" != \"APFS\" ]]; then\n\techo \"Unknown disk image filesystem: ${FILESYSTEM}. Run 'create-dmg --help' for help.\"\n\texit 1\nfi\n\nif [[ \"${FILESYSTEM}\" == \"APFS\" ]] && [[ ${SANDBOX_SAFE} -eq 1 ]]; then\n\techo \"Creating an APFS disk image that is sandbox safe is not supported.\"\n\texit 1\nfi\n\n# Main script logic\n\nSCRIPT_DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\"\nDMG_DIRNAME=\"$(dirname \"$DMG_PATH\")\"\nDMG_DIR=\"$(cd \"$DMG_DIRNAME\" > /dev/null; pwd)\"\nDMG_NAME=\"$(basename \"$DMG_PATH\")\"\nDMG_TEMP_NAME=\"$DMG_DIR/rw.$$.${DMG_NAME}\"\n\n# Detect where we're running from\n\nsentinel_file=\"$SCRIPT_DIR/.this-is-the-create-dmg-repo\"\nif [[ -f \"$sentinel_file\" ]]; then\n\t# We're running from inside a repo\n\tCDMG_SUPPORT_DIR=\"$SCRIPT_DIR/support\"\nelse\n\t# We're running inside an installed location\n\tbin_dir=\"$SCRIPT_DIR\"\n\tprefix_dir=$(dirname \"$bin_dir\")\n\tCDMG_SUPPORT_DIR=\"$prefix_dir/share/create-dmg/support\"\nfi\n\nif [[ -z \"$VOLUME_NAME\" ]]; then\n\tVOLUME_NAME=\"$(basename \"$DMG_PATH\" .dmg)\"\nfi\n\nif [[ ! -d \"$CDMG_SUPPORT_DIR\" ]]; then\n\techo >&2 \"Cannot find support/ directory: expected at: $CDMG_SUPPORT_DIR\"\n\texit 1\nfi\n\nif [[ -f \"$SRC_FOLDER/.DS_Store\" ]]; then\n\techo \"Deleting .DS_Store found in source folder\"\n\trm \"$SRC_FOLDER/.DS_Store\"\nfi\n\n# Create the image\necho \"Creating disk image...\"\nif [[ -f \"${DMG_TEMP_NAME}\" ]]; then\n\trm -f \"${DMG_TEMP_NAME}\"\nfi\n\n# Use Megabytes since hdiutil fails with very large byte numbers\nfunction blocks_to_megabytes() {\n\t# Add 1 extra MB, since there's no decimal retention here\n\tMB_SIZE=$((($1 * 512 / 1000 / 1000) + 1))\n\techo $MB_SIZE\n}\n\nfunction get_size() {\n\t# Get block size in disk\n\tif [[ $OS_MAJOR_VERSION -ge 12 ]]; then\n\t\tbytes_size=$(du -B 512 -s \"$1\")\n\telse\n\t\tbytes_size=$(du -s \"$1\")\n\tfi\n\tbytes_size=$(echo $bytes_size | sed -e 's/\t.*//g')\n\techo $(blocks_to_megabytes $bytes_size)\n}\n\n# Create the DMG with the specified size or the hdiutil estimation\nCUSTOM_SIZE=''\nif [[ -n \"$DISK_IMAGE_SIZE\" ]]; then\n\tCUSTOM_SIZE=\"-size ${DISK_IMAGE_SIZE}m\"\nfi\n\nif [[ $SANDBOX_SAFE -eq 0 ]]; then\n\tif [[ \"$FILESYSTEM\" == \"APFS\" ]]; then\n\t\tFILESYSTEM_ARGUMENTS=\"\"\n\telse\n\t\tFILESYSTEM_ARGUMENTS=\"-c c=64,a=16,e=16\"\n\tfi\n\thdiutil create ${HDIUTIL_VERBOSITY} -srcfolder \"$SRC_FOLDER\" -volname \"${VOLUME_NAME}\" \\\n\t\t-fs \"${FILESYSTEM}\" -fsargs \"${FILESYSTEM_ARGUMENTS}\" -format UDRW ${CUSTOM_SIZE} \"${DMG_TEMP_NAME}\"\nelse\n\thdiutil makehybrid ${HDIUTIL_VERBOSITY} -default-volume-name \"${VOLUME_NAME}\" -hfs -o \"${DMG_TEMP_NAME}\" \"$SRC_FOLDER\"\n\thdiutil convert -format UDRW -ov -o \"${DMG_TEMP_NAME}\" \"${DMG_TEMP_NAME}\"\n\tDISK_IMAGE_SIZE_CUSTOM=$DISK_IMAGE_SIZE\nfi\n\n# Get the created DMG actual size\nDISK_IMAGE_SIZE=$(get_size \"${DMG_TEMP_NAME}\")\n\n# Use the custom size if bigger\nif [[ $SANDBOX_SAFE -eq 1 ]] && [[ ! -z \"$DISK_IMAGE_SIZE_CUSTOM\" ]] && [[ $DISK_IMAGE_SIZE_CUSTOM -gt $DISK_IMAGE_SIZE ]]; then\n\tDISK_IMAGE_SIZE=$DISK_IMAGE_SIZE_CUSTOM\nfi\n\n# Estimate the additional sources size\nif [[ -n \"$ADD_FILE_SOURCES\" ]]; then\n\tfor i in \"${!ADD_FILE_SOURCES[@]}\"; do\n\t\tSOURCE_SIZE=$(get_size \"${ADD_FILE_SOURCES[$i]}\")\n\t\tDISK_IMAGE_SIZE=$(expr $DISK_IMAGE_SIZE + $SOURCE_SIZE)\n\tdone\nfi\n\n# Add extra space for additional resources\nDISK_IMAGE_SIZE=$(expr $DISK_IMAGE_SIZE + 20)\n\n# Make sure target image size is within limits\nMIN_DISK_IMAGE_SIZE=$(hdiutil resize -limits \"${DMG_TEMP_NAME}\" | awk 'NR=1{print int($1/2048+1)}')\nif [ $MIN_DISK_IMAGE_SIZE -gt $DISK_IMAGE_SIZE ]; then\n       DISK_IMAGE_SIZE=$MIN_DISK_IMAGE_SIZE\nfi\n\n# Resize the image for the extra stuff\nhdiutil resize ${HDIUTIL_VERBOSITY} -size ${DISK_IMAGE_SIZE}m \"${DMG_TEMP_NAME}\"\n\n# Mount the new DMG\n\necho \"Mounting disk image...\"\n\nMOUNT_RANDOM_PATH=\"/Volumes\"\nif [[ $SANDBOX_SAFE -eq 1 ]]; then\n\tMOUNT_RANDOM_PATH=\"/tmp\"\nfi\nif [[ \"$FILESYSTEM\" == \"APFS\" ]]; then\n  HDIUTIL_FILTER=\"tail -n 1\"\nelse\n  HDIUTIL_FILTER=\"sed 1q\"\nfi\nDEV_NAME=$(hdiutil attach -mountrandom ${MOUNT_RANDOM_PATH} -readwrite -noverify -noautoopen -nobrowse \"${DMG_TEMP_NAME}\" | grep -E --color=never '^/dev/' | ${HDIUTIL_FILTER} | awk '{print $1}')\necho \"Device name:     $DEV_NAME\"\nif [[ \"$FILESYSTEM\" == \"APFS\" ]]; then\n  MOUNT_DIR=$(find_mount_dir \"${DEV_NAME}\")\nelse\n\tMOUNT_DIR=$(find_mount_dir \"${DEV_NAME}s\")\nfi\nif [[ -z \"${MOUNT_DIR}\" ]]; then\n  >&2 echo \"ERROR: unable to proceed with final disk image creation because the interstitial disk image was not found.\"\n  >&2 echo \"The interstitial disk image will likely be mounted and will need to be cleaned up manually.\"\n  exit 1\nfi\n\necho \"Mount dir:       $MOUNT_DIR\"\n\nif [[ -n \"$BACKGROUND_FILE\" ]]; then\n\techo \"Copying background file '$BACKGROUND_FILE'...\"\n\t[[ -d \"$MOUNT_DIR/.background\" ]] || mkdir \"$MOUNT_DIR/.background\"\n\tcp \"$BACKGROUND_FILE\" \"$MOUNT_DIR/.background/$BACKGROUND_FILE_NAME\"\nfi\n\nif [[ -n \"$APPLICATION_LINK\" ]]; then\n\techo \"Making link to Applications dir...\"\n\techo $MOUNT_DIR\n\tln -s /Applications \"$MOUNT_DIR/Applications\"\nfi\n\nif [[ -n \"$QL_LINK\" ]]; then\n\techo \"Making link to QuickLook install dir...\"\n\techo $MOUNT_DIR\n\tln -s \"/Library/QuickLook\" \"$MOUNT_DIR/QuickLook\"\nfi\n\nif [[ -n \"$VOLUME_ICON_FILE\" ]]; then\n\techo \"Copying volume icon file '$VOLUME_ICON_FILE'...\"\n\tcp \"$VOLUME_ICON_FILE\" \"$MOUNT_DIR/.VolumeIcon.icns\"\n\tSetFile -c icnC \"$MOUNT_DIR/.VolumeIcon.icns\"\nfi\n\nif [[ -n \"$ADD_FILE_SOURCES\" ]]; then\n\techo \"Copying custom files...\"\n\tfor i in \"${!ADD_FILE_SOURCES[@]}\"; do\n\t\techo \"${ADD_FILE_SOURCES[$i]}\"\n\t\tcp -a \"${ADD_FILE_SOURCES[$i]}\" \"$MOUNT_DIR/${ADD_FILE_TARGETS[$i]}\"\n\tdone\nfi\n\nVOLUME_NAME=$(basename $MOUNT_DIR)\n\n# Run AppleScript to do all the Finder cosmetic stuff\nAPPLESCRIPT_FILE=$(mktemp -t createdmg.tmp.XXXXXXXXXX)\nif [[ $SANDBOX_SAFE -eq 1 ]]; then\n\techo \"Skipping Finder-prettifying AppleScript because we are in Sandbox...\"\nelse\n\tif [[ $SKIP_JENKINS -eq 0 ]]; then\n\t\tcat \"$CDMG_SUPPORT_DIR/template.applescript\" \\\n\t\t\t| sed -e \"s/WINX/$WINX/g\" -e \"s/WINY/$WINY/g\" -e \"s/WINW/$WINW/g\" \\\n\t\t\t\t\t-e \"s/WINH/$WINH/g\" -e \"s/BACKGROUND_CLAUSE/$BACKGROUND_CLAUSE/g\" \\\n\t\t\t\t\t-e \"s/REPOSITION_HIDDEN_FILES_CLAUSE/$REPOSITION_HIDDEN_FILES_CLAUSE/g\" \\\n\t\t\t\t\t-e \"s/ICON_SIZE/$ICON_SIZE/g\" -e \"s/TEXT_SIZE/$TEXT_SIZE/g\" \\\n\t\t\t| perl -pe \"s/POSITION_CLAUSE/$POSITION_CLAUSE/g\" \\\n\t\t\t| perl -pe \"s/QL_CLAUSE/$QL_CLAUSE/g\" \\\n\t\t\t| perl -pe \"s/APPLICATION_CLAUSE/$APPLICATION_CLAUSE/g\" \\\n\t\t\t| perl -pe \"s/HIDING_CLAUSE/$HIDING_CLAUSE/\" \\\n\t\t\t> \"$APPLESCRIPT_FILE\"\n\n\t\t# pause to workaround occasional \"Can’t get disk\" (-1728) issues\n\t\tERROR_1728_WORKAROUND_SLEEP_INTERVAL=2\n\t\techo \"Will sleep for $ERROR_1728_WORKAROUND_SLEEP_INTERVAL seconds to workaround occasions \\\"Can't get disk (-1728)\\\" issues...\"\n\t\tsleep $ERROR_1728_WORKAROUND_SLEEP_INTERVAL\n\n\t\techo \"Running AppleScript to make Finder stuff pretty: /usr/bin/osascript \\\"${APPLESCRIPT_FILE}\\\" \\\"${VOLUME_NAME}\\\"\"\n\t\tif /usr/bin/osascript \"${APPLESCRIPT_FILE}\" \"${VOLUME_NAME}\"; then\n\t\t\t# Okay, we're cool\n\t\t\ttrue\n\t\telse\n\t\t\techo >&2 \"Failed running AppleScript\"\n\t\t\thdiutil_detach_retry \"${DEV_NAME}\"\n\t\t\texit 64\n\t\tfi\n\t\techo \"Done running the AppleScript...\"\n\t\tsleep 4\n\t\trm \"$APPLESCRIPT_FILE\"\n\telse\n\t\techo ''\n\t\techo \"Will skip running AppleScript to configure DMG aesthetics because of --skip-jenkins option.\"\n\t\techo \"This will result in a DMG without any custom background or icons positioning.\"\n\t\techo \"More info at https://github.com/create-dmg/create-dmg/issues/72\"\n\t\techo ''\n\tfi\nfi\n\n# Make sure it's not world writeable\necho \"Fixing permissions...\"\nchmod -Rf go-w \"${MOUNT_DIR}\" &> /dev/null || true\necho \"Done fixing permissions\"\n\n# Make the top window open itself on mount:\nif [[ $BLESS -eq 1 && $SANDBOX_SAFE -eq 0 ]]; then\n\techo \"Blessing started\"\n\tif [ $(uname -m) == \"arm64\" ]; then\n\t\tbless --folder \"${MOUNT_DIR}\"\n\telse\n\t\tbless --folder \"${MOUNT_DIR}\" --openfolder \"${MOUNT_DIR}\"\n\tfi\n\techo \"Blessing finished\"\nelse\n\techo \"Skipping blessing on sandbox\"\nfi\n\nif [[ -n \"$VOLUME_ICON_FILE\" ]]; then\n\t# Tell the volume that it has a special file attribute\n\tSetFile -a C \"$MOUNT_DIR\"\nfi\n\n# Delete unnecessary file system events log if possible\necho \"Deleting .fseventsd\"\nrm -rf \"${MOUNT_DIR}/.fseventsd\" || true\n\nhdiutil_detach_retry \"${DEV_NAME}\"\n\n# Compress image and optionally encrypt\nif [[ $ENABLE_ENCRYPTION -eq 0 ]]; then\n\techo \"Compressing disk image...\"\n\thdiutil convert ${HDIUTIL_VERBOSITY} \"${DMG_TEMP_NAME}\" -format ${FORMAT} ${IMAGEKEY} -o \"${DMG_DIR}/${DMG_NAME}\"\nelse\n\techo \"Compressing and encrypting disk image...\"\n\techo \"NOTE: hdiutil will only prompt a single time for a password - ensure entry is correct.\"\n\thdiutil convert ${HDIUTIL_VERBOSITY} \"${DMG_TEMP_NAME}\" -format ${FORMAT} ${IMAGEKEY} -encryption AES-${AESBITS} -stdinpass -o \"${DMG_DIR}/${DMG_NAME}\"\nfi\nrm -f \"${DMG_TEMP_NAME}\"\n\n# Adding EULA resources\nif [[ -n \"${EULA_RSRC}\" && \"${EULA_RSRC}\" != \"-null-\" ]]; then\n\techo \"Adding EULA resources...\"\n\t#\n\t# Use udifrez instead flatten/rez/unflatten\n\t# https://github.com/create-dmg/create-dmg/issues/109\n\t#\n\t# Based on a thread from dawn2dusk & peterguy\n\t# https://developer.apple.com/forums/thread/668084\n\t#\n\tEULA_RESOURCES_FILE=$(mktemp -t createdmg.tmp.XXXXXXXXXX)\n\tEULA_FORMAT=$(file -b ${EULA_RSRC})\n\tif [[ ${EULA_FORMAT} == 'Rich Text Format data'* ]] ; then\n\t\tEULA_FORMAT='RTF '\n\telse\n\t\tEULA_FORMAT='TEXT'\n\tfi\n\t# Encode the EULA to base64\n\t# Replace 'openssl base64' with 'base64' if Mac OS X 10.6 support is no more needed\n\t# EULA_DATA=\"$(base64 -b 52 \"${EULA_RSRC}\" | sed s$'/^\\(.*\\)$/\\t\\t\\t\\\\1/')\"\n\tEULA_DATA=\"$(openssl base64 -in \"${EULA_RSRC}\" | tr -d '\\n' | awk '{gsub(/.{52}/,\"&\\n\")}1' | sed s$'/^\\(.*\\)$/\\t\\t\\t\\\\1/')\"\n\t# Fill the template with the custom EULA contents\n\teval \"cat > \\\"${EULA_RESOURCES_FILE}\\\" <<EOF\n\t$(<${CDMG_SUPPORT_DIR}/eula-resources-template.xml)\n\tEOF\n\t\"\n\t# Apply the resources\n\thdiutil udifrez -xml \"${EULA_RESOURCES_FILE}\" '' -quiet \"${DMG_DIR}/${DMG_NAME}\" || {\n\t\techo \"Failed to add the EULA license\"\n\t\texit 1\n\t}\n\techo \"Successfully added the EULA license\"\nfi\n\n# Enable \"internet\", whatever that is\nif [[ ! -z \"${NOINTERNET}\" && \"${NOINTERNET}\" == 1 ]]; then\n\techo \"Not setting 'internet-enable' on the dmg, per caller request\"\nelse\n\t# Check if hdiutil supports internet-enable\n\t# Support was removed in macOS 10.15. See https://github.com/andreyvit/create-dmg/issues/76\n\tif hdiutil internet-enable -help >/dev/null 2>/dev/null; then\n\t\thdiutil internet-enable -yes \"${DMG_DIR}/${DMG_NAME}\"\n\telse\n\t\techo \"hdiutil does not support internet-enable. Note it was removed in macOS 10.15.\"\n\tfi\nfi\n\nif [[ -n \"${SIGNATURE}\" && \"${SIGNATURE}\" != \"-null-\" ]]; then\n\techo \"Codesign started\"\n\tcodesign -s \"${SIGNATURE}\" \"${DMG_DIR}/${DMG_NAME}\"\n\tdmgsignaturecheck=\"$(codesign --verify --deep --verbose=2 --strict \"${DMG_DIR}/${DMG_NAME}\" 2>&1 >/dev/null)\"\n\tif [ $? -eq 0 ]; then\n\t\techo \"The disk image is now codesigned\"\n\telse\n\t\techo \"The signature seems invalid${NC}\"\n\t\texit 1\n\tfi\nfi\n\nif [[ -n \"${NOTARIZE}\" && \"${NOTARIZE}\" != \"-null-\" ]]; then\n\techo \"Notarization started\"\n\txcrun notarytool submit \"${DMG_DIR}/${DMG_NAME}\" --keychain-profile \"${NOTARIZE}\" --wait\n\techo \"Stapling the notarization ticket\"\n\tstaple=\"$(xcrun stapler staple \"${DMG_DIR}/${DMG_NAME}\")\"\n\tif [ $? -eq 0 ]; then\n\t\techo \"The disk image is now notarized\"\n\telse\n\t\techo \"$staple\"\n\t\techo \"The notarization failed with error $?\"\n\t\texit 1\n\tfi\nfi\n\n# All done!\necho \"Disk image done\"\nexit 0\n"
        },
        {
          "name": "doc-project",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "support",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}