{
  "metadata": {
    "timestamp": 1736568708966,
    "page": 805,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgwOQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mullvad/dns-blocklists",
      "stars": 1217,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0087890625,
          "content": ".vscode/\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.1728515625,
          "content": "# dns-blocklists\n\nThis repository contains the Ansible playbook that we use to generate DNS based blocking files for our Encrypted DNS, and VPN server __(also known as VPN relay)__ based DNS blocking.\n\nThis is imported to our VPN servers frequently.\n\nWe aim to update these lists on a weekly basis. You can view the latest update by selecting the commits to this repository.\n\n# Why is list \"X\" not included?\n\nIf you find a block list that is included it is because we have gone through these validation steps:\n- The blocklist is an amalgamation of other blocklists.\n- The blocklist no longer maintained.\n- The blocklist blocks things we do not believe should be blocked (like our own domains).\n\nWe periodically make exceptions to the included URLs for the following reasons:\n- The upstream lists are broken and include malformed URLs causing the generation to fail.\n- The upstream lists block our domains.\n\n# Using Encrypted DNS on Apple Devices\n\nFor convenience we have Apple configuration profiles (.mobileconfig) signed for simpler \"one-click installation\", or MDM management.\n\nThese are available here: https://github.com/mullvad/encrypted-dns-profiles\n\n# Differences between VPN servers and Encrypted DNS\n\nPlease note that our Encrypted DNS service includes different hostnames for each option. We currently offer the following:\n- Vanilla:\n  - This includes zero blocking, purely encrypted DNS for TLS and HTTPs.\n  - TLS: dns.mullvad.net\n  - HTTPS: https://dns.mullvad.net/dns-query\n- Ad-block:\n  - This includes Ad-blocking and Tracker blocking for TLS and HTTPS. The lists are what are found in this repository.\n  - TLS: adblock.dns.mullvad.net\n  - HTTPS: https://adblock.dns.mullvad.net/dns-query\n- Base:\n  - This includes Ad-blocking, Tracker, and Malware blocking for TLS and HTTPS. The lists are what are found in this repository.\n  - TLS: base.dns.mullvad.net\n  - HTTPS: https://base.dns.mullvad.net/dns-query  \n- Extended:\n  - This includes Ad-blocking, Tracker, Malware and Social Media blocking for TLS and HTTPS. The lists are what are found in this repository.\n  - TLS: extended.dns.mullvad.net\n  - HTTPS: https://extended.dns.mullvad.net/dns-query\n- All:\n  - This includes Ad-blocking, Tracker, Malware, Adult content, Gambling and Social Media blocking for TLS and HTTPS. The lists are what are found in this repository.\n  - TLS: all.dns.mullvad.net\n  - HTTPS: https://all.dns.mullvad.net/dns-query\n\nNote that social media block lists are **not** available on our VPN server block lists, they are **only** available on the Encrypted DNS service.\n\n# Lists\n\nThe following lists are what we import to our service. You can find these defined in `inventory/group_vars` for the server type you wish to view.\n\n- `doh`: Encrypted DNS servers\n- `relay`: VPN servers (relays)\n\n### Trackers\n\nWe currently use these tracker blocklists with our service:\n- firebog-easylist-privacy: https://v.firebog.net/hosts/Easyprivacy.txt\n- hagezi-tracker-amazon: https://cdn.jsdelivr.net/gh/hagezi/dns-blocklists@latest/domains/native.amazon.txt\n- hagezi-tracker-apple: https://cdn.jsdelivr.net/gh/hagezi/dns-blocklists@latest/domains/native.apple.txt\n- hagezi-tracker-huawei: https://cdn.jsdelivr.net/gh/hagezi/dns-blocklists@latest/domains/native.huawei.txt\n- hagezi-tracker-windows: https://cdn.jsdelivr.net/gh/hagezi/dns-blocklists@latest/domains/native.winoffice.txt\n- hagezi-tracker-tiktok-aggressive: https://cdn.jsdelivr.net/gh/hagezi/dns-blocklists@latest/domains/native.tiktok.extended.txt\n- hagezi-tracker-webos: https://cdn.jsdelivr.net/gh/hagezi/dns-blocklists@latest/domains/native.lgwebos.txt\n- hagezi-tracker-vivo: https://cdn.jsdelivr.net/gh/hagezi/dns-blocklists@latest/domains/native.vivo.txt\n- hagezi-tracker-oppp: https://cdn.jsdelivr.net/gh/hagezi/dns-blocklists@latest/domains/native.oppo-realme.txt\n- hagezi-tracker-xiamomi: https://cdn.jsdelivr.net/gh/hagezi/dns-blocklists@latest/domains/native.xiaomi.txt\n- mullvad-tracker-blocklist: custom file\n\n### Advertising\n\nWe currently use these advertising blocklists with our service:\n- oisd-small: https://small.oisd.nl/rpz\n- frellwits-swedish-hosts-file: https://raw.githubusercontent.com/lassekongo83/Frellwits-filter-lists/master/Frellwits-Swedish-Hosts-File.txt\n- AdguardDNS: https://v.firebog.net/hosts/AdguardDNS.txt\n\n### Adult content \n\nWe currently use this Adult content blocklist for our service:\n- oisd-nsfw: https://nsfw.oisd.nl/rpz\n\n### Gambling\n\nWe currently use these gambling blocklists with our service:\n- hagezi-gambling: https://raw.githubusercontent.com/hagezi/dns-blocklists/main/wildcard/gambling-onlydomains.txt\n\n### Social media\n\nWe generate our Social Media block lists from scripts located in `scripts/`\n\nYou can find the generated file in `files/social`\n\n### Malware\n\nWe currently use this malware content blocklist for our service:\n- urlhaus: https://urlhaus.abuse.ch/downloads/hostfile\n- hagezi-threat-intelligence-mini: https://cdn.jsdelivr.net/gh/hagezi/dns-blocklists@latest/rpz/tif.mini.txt\n\n\n## Pull requests / Issues / Updating block lists\n\nWe prefer to not block individual custom URLs or add block lists without them being fully validated and verified first. Please consider pointing us toward a reputable block list prior to making a Github Issue. \n\nIf we close your issue or reject your request, it is most likely down to us not having a way of verifying that the block list is trustworthy.\n\n# Custom DNS entries for use with our VPN service\n\nThe following is a list of all the IP addresses we use for our DNS based blocking.\n\nThese IPs can be used within custom DNS in our configuration files, or via our Apps.\n\nTo block _everything_ enter: `100.64.0.63`\n\n### Ads and Tracker combinations\n    100.64.0.1 - Ad blocking only\n    100.64.0.2 - Trackers only\n    100.64.0.3 - Ad blocking and tracker blocking\n\n### Malware serving website combinations\n    100.64.0.4 - Malware blocking only\n    100.64.0.5 - Ad blocking and malware blocking\n    100.64.0.6 - Tracker blocking and malware blocking\n    100.64.0.7 - Ad blocking, tracker blocking and malware blocking\n\n### Adult content blocking combinations\n    100.64.0.8 - Adult content blocking only\n    100.64.0.9 - Adult content and ad blocking\n    100.64.0.10 - Adult content and tracker blocking\n    100.64.0.11 - Adult content blocking, ad blocking and tracker blocking\n    100.64.0.12 - Adult content blocking and malware blocking\n    100.64.0.13 - Adult content blocking, ad blocking and malware blocking\n    100.64.0.14 - Adult content blocking, tracker blocking and malware blocking\n    100.64.0.15 - Adult content blocking, ad blocking, tracker blocking and malware blocking\n\n### Gambling website combinations\n    100.64.0.16 - Gambling blocking only\n    100.64.0.17 - Gambling blocking and ad blocking\n    100.64.0.18 - Gambling blocking and tracker blocking\n    100.64.0.19 - Gambling blocking, ad blocking and tracker blocking\n    100.64.0.20 - Gambling blocking and malware blocking\n    100.64.0.21 - Gambling blocking ad blocking and malware blocking\n    100.64.0.22 - Gambling blocking, malware blocking and tracking blocking\n    100.64.0.23 - Gambling blocking, ad blocking, malware blocking and tracker blocking\n    100.64.0.24 - Gambling blocking and adult blocking\n    100.64.0.25 - Gambling blocking, ad blocking and adult content blocking\n    100.64.0.26 - Gambling blocking, adult content blocking, and tracker blocking\n    100.64.0.27 - Gambling blocking, ad blocking, adult content blocking and tracker blocking\n    100.64.0.28 - Gambling blocking, adult content blocking and malware blocking\n    100.64.0.29 - Gambling blocking, ad blocking, adult content blocking, and malware blocking\n    100.64.0.30 - Gambling blocking, adult content blocking, malware blocking and tracker blocking\n    100.64.0.31 - Ad blocking, adult content blocking, gambling blocking, malware blocking, tracker blocking\n\n### Social media blocking combinations\n\n    100.64.0.32 - Social media only\n    100.64.0.33 - Social media and ad blocking\n    100.64.0.34 - Social media and tracker blocking\n    100.64.0.35 - Social media, ad blocking and tracker blocking\n    100.64.0.36 - Social media and malware blocking\n    100.64.0.37 - Social media, ad blocking and malware blocking\n    100.64.0.38 - Social media, tracker blocking and malware blocking\n    100.64.0.39 - Social media, ad blocking, tracker blocking and malware blocking\n    100.64.0.40 - Social media and adult content blocking\n    100.64.0.41 - Social media, adult content blocking and ad blocking\n    100.64.0.42 - Social media, adult content blocking and tracker blocking\n    100.64.0.43 - Social media, adult content blocking, ad blocking and tracker blocking\n    100.64.0.44 - Social media, adult content blocking and malware blocking\n    100.64.0.45 - Social media, adult content blocking, ad blocking and malware blocking\n    100.64.0.46 - Social media, adult content blocking, tracker blocking and malware blocking\n    100.64.0.47 - Social media, adult content blocking, ad blocking, tracker blocking and malware blocking\n    100.64.0.48 - Social media and gambling blocking\n    100.64.0.49 - Social media, gambling blocking and ad blocking\n    100.64.0.50 - Social media, gambling blocking and tracker blocking\n    100.64.0.51 - Social media, gambling blocking, ad blocking and tracker blocking\n    100.64.0.52 - Social media, gambling blocking and malware blocking\n    100.64.0.53 - Social media, gambling blocking, ad blocking and malware blocking\n    100.64.0.54 - Social media, gambling blocking, tracker blocking and malware blocking\n    100.64.0.55 - Social media, gambling blocking, ad blocking, tracker blocking and malware blocking\n    100.64.0.56 - Social media, gambling blocking and adult blocking\n    100.64.0.57 - Social media, gambling blocking, adult content and ad blocking\n    100.64.0.58 - Social media, gambling blocking, adult content and tracker blocking\n    100.64.0.59 - Social media, gambling blocking, adult content, ad blocking and tracker blocking\n    100.64.0.60 - Social media, gambling blocking, adult content, malware blocking\n    100.64.0.61 - Social media, gambling blocking, adult content, malware blocking and ad blocking\n    100.64.0.62 - Social media, gambling blocking, adult content, malware blocking and tracker blocking\n    100.64.0.63 - Social media, gambling blocking, adult content, malware blocking, ad blocking and tracker blocking (\"Everything\")\n\n# Building\n\nThe following steps are useful only if you wish to build the lists yourself.\n\nThe output files located in `output/relay/` are what are imported onto our VPN servers.\n\n## Requirements\n- Ansible Core 2.14.x =<\n- Qubes OS DispVM\n\n## Step by step\n\n  - Ensure the values in `group_vars/<group>.yml` are up to date with any block lists\n  - Ensure the values in `scripts/generate_social_blocklists_urls` and `scripts/generate_social_blocklists_asn.py` are up to date (URLs and ASNs)\n  - Start a DisposibleVM (dispVM) and `qvm-copy` this repository to it\n  - Ensure the script in `scripts/generate_social_blocklists.sh` has been run: `cd scripts/ && ./generate_social_blocklists.sh` in a Disposible VM (dispVM) with the output qvm-copied to files/social (`cp /tmp/social files/social`)\n  - Ensure you have added any 'custom' extra lists or websites to block\n  - Run the playbook to generate the lists:\n    - `ansible-playbook -i inventory/ playbook.yml`\n    - `ansible-playbook -i inventory/ playbook.yml --tags=readme` can be used to generate the README on its own\n  - View the output (once pushed) at `https://raw.githubusercontent.com/mullvad/dns-blocklists/main/output/<group>.txt?raw=true`\n  - Run test script: `cd scripts && ./check_zonedata.sh`\n  - Sign the outputted relay files with your GPG code signing key, for example:\n    - `for list in adblock adult privacy gambling social; do gpg2 --detach-sign --armor output/relay/relay_${list}.txt > output/relay/relay_${list}.txt.gpg; done && for list in adblock adult privacy gambling social; do gpg2 --detach-sign --armor output/relay/relay_${list}.zone > output/relay/relay_${list}.gpg; done`\n  - Verify the outputted GPG signed files, for example:\n    - `for list in adblock adult privacy gambling social; do echo \"Verify: ${list}\" && gpg2 --verify output/relay/relay_${list}.txt.gpg output/relay/relay_${list}.txt; done && for list in adblock adult privacy gambling social; do echo \"Verify: ${list}\" && gpg2 --verify output/relay/relay_${list}.gpg output/relay/relay_${list}.zone; done`\n"
        },
        {
          "name": "ansible.cfg",
          "type": "blob",
          "size": 0.05859375,
          "content": "[defaults]\ndisplay_ok_hosts = no\ndisplay_skipped_hosts = no\n"
        },
        {
          "name": "files",
          "type": "tree",
          "content": null
        },
        {
          "name": "inventory",
          "type": "tree",
          "content": null
        },
        {
          "name": "lists",
          "type": "tree",
          "content": null
        },
        {
          "name": "output",
          "type": "tree",
          "content": null
        },
        {
          "name": "playbook.yml",
          "type": "blob",
          "size": 8.48046875,
          "content": "# Build all the DNS blocklist files for DoH and relay blocking\n# example usage:\n#   $ ansible-playbook -i inventory/ playbook.yml\n---\n- name: Build DNS blocklist files\n  hosts: all\n  connection: local\n  gather_facts: false\n  become: false\n\n  tasks:\n\n    - name: Generate README\n      ansible.builtin.template:\n        src: templates/README.md.j2\n        dest: README.md\n      tags: readme\n\n    - name: Install dos2unix and bind-utils\n      ansible.builtin.dnf:\n        name:\n          - dos2unix\n          - bind-utils\n        state: present\n      become_user: root\n      become: true\n      run_once: true\n\n    - name: Ensure output files are cleared\n      ansible.builtin.file:\n        dest: output/{{ item.0 }}\n        state: \"{{ item.1 }}\"\n      loop: \"{{ group_names | product(['absent', 'directory']) | list }}\"\n\n    - name: Ensure files are present locally\n      ansible.builtin.file:\n        state: \"{{ item.1 }}\"\n        path: lists/{{ item.0 }}/{{ item.2.type }}\n      with_nested:\n        - \"{{ group_names }}\"\n        - ['absent', 'directory']\n        - \"{{ dns_blocklists_lists }}\"\n      loop_control:\n        label: \"{{ item.0}}: {{ item.1 }}\"\n\n    - name: Download latest lists\n      ansible.builtin.get_url:\n        url: \"{{ item.1.url }}\"\n        dest: lists/{{ item.0 }}/{{ item.1.type }}/{{ item.1.name }}\n      loop: \"{{ group_names | product(dns_blocklists_lists) | list }}\"\n      loop_control:\n        label: \"{{ item.1.name }}\"\n      register: _dns_blocklists_download_lists\n      retries: 5\n      delay: 10\n      until: _dns_blocklists_download_lists is succeeded\n      when:\n        - item.1.url is defined\n        - not item.1.content is defined\n\n    - name: Create file with custom list content if defined\n      ansible.builtin.copy:\n        content: \"{{ item.1.content }}\"\n        dest: lists/{{ item.0 }}/{{ item.1.type }}/{{ item.1.name }}\n      loop: \"{{ group_names | product(dns_blocklists_lists) | list }}\"\n      loop_control:\n        label: \"{{ item.1.name }}\"\n      when:\n        - item.1.content is defined\n        - not item.1.url is defined\n\n    - name: Run dos2unix on all lists\n      ansible.builtin.command:\n        cmd: dos2unix lists/{{ item.0 }}/{{ item.1.type }}/{{ item.1.name }}\n      loop: \"{{ group_names | product(dns_blocklists_lists) | list }}\"\n      loop_control:\n        label: \"{{ item.1.name }}\"\n\n    - name: Replace localhost and IP addresses in files\n      ansible.builtin.replace:\n        path: lists/{{ item.0 }}/{{ item.1.type }}/{{ item.1.name }}\n        regexp: \"{{ item.2 }}\"\n        replace: ''\n      with_nested:\n        - \"{{ group_names }}\"\n        - \"{{ dns_blocklists_lists }}\"\n        - \"{{ _dns_blocklists_replace_address }}\"\n      vars:\n        # Often blocklists contain these IPs. We want to remove them from our lists\n        _dns_blocklists_replace_address:\n          - '([0]{1,3}\\.){3}[0]{1,3} '  # Beware of the necessary trailing whitespace!\n          - 'localhost '                # It is there to not match records like 1.2.3.4.domain.tld\n          - \"127.0.0.1\"\n          - '::1'\n      loop_control:\n        label: \"{{ item.1.name }}\"\n\n    - name: Remove custom hosts localhost in files\n      ansible.builtin.lineinfile:\n        path: lists/{{ item.0 }}/{{ item.1.type }}/{{ item.1.name }}\n        regexp: ' localhost'\n        state: absent\n      loop: \"{{ group_names | product(dns_blocklists_lists) | list }}\"\n      loop_control:\n        label: \"{{ item.1.name }}\"\n\n    - name: Remove unused lines from files\n      ansible.builtin.lineinfile:\n        path: lists/{{ item.0 }}/{{ item.1.type }}/{{ item.1.name }}\n        regexp: '^{{ item.2 }}'\n        state: absent\n      with_nested:\n        - \"{{ group_names }}\"\n        - \"{{ dns_blocklists_lists }}\"\n        - \"{{ _comments }}\"\n      vars:\n        _comments:\n          - \"#\"\n          - \";\"\n          - \"$\"\n          - \"@\"\n          - '\\$TTL'\n      loop_control:\n        label: \"{{ item.1.name }}\"\n\n    - name: Replace comments with ' ' from all lines \n      ansible.builtin.replace:\n        path: lists/{{ item.0 }}/{{ item.1.type }}/{{ item.1.name }}\n        regexp: '#.*$'\n        replace: ''\n      loop: \"{{ group_names | product(dns_blocklists_lists) | list }}\"\n\n    - name: Combine files into output\n      ansible.builtin.assemble:\n        src: lists/{{ item.0 }}/{{ item.1.type }}\n        dest: output/{{ item.0 }}/{{ item.0 }}_{{ item.1.type }}.txt\n      loop: \"{{ group_names | product(dns_blocklists_lists) | list }}\"\n      loop_control:\n        label: \"{{ item.1.name }}\"\n\n    - name: Remove whitespace at start of lines\n      ansible.builtin.replace:\n        path: \"output/{{ item.0 }}/{{ item.0 }}_{{ item.1.type }}.txt\"\n        regexp: '^ '\n      loop: \"{{ group_names | product(dns_blocklists_lists) | list }}\"\n      loop_control:\n        label: \"{{ item.1.name }}\"\n\n    # Prevent out of zone errors caused by trailing periods\n    - name: Remove full stops at the end of lines\n      ansible.builtin.replace:\n        path: output/{{ item.0 }}/{{ item.0 }}_{{ item.1.type }}.txt\n        regexp: '{{ item.2 }}'\n      with_nested:\n        - \"{{ group_names }}\"\n        - \"{{ dns_blocklists_lists }}\"\n        - \"{{ _eol }}\"\n      vars:\n        _eol:\n          - 'CNAME .$'\n          - '\\.$'\n      loop_control:\n        label: \"{{ item.1.name }}\"\n\n    - name: Replace whitespace with new line\n      ansible.builtin.replace:\n        path: output/{{ item.0 }}/{{ item.0 }}_{{ item.1.type }}.txt\n        regexp: ' '\n        replace: '\\n'\n      loop: \"{{ group_names | product(dns_blocklists_lists) | list }}\"\n      loop_control:\n        label: \"{{ item.1.name }}\"\n\n    - name: Remove empty lines\n      ansible.builtin.lineinfile:\n        path: output/{{ item.0 }}/{{ item.0 }}_{{ item.1.type }}.txt\n        regexp: '^\\n'\n        state: absent\n      loop: \"{{ group_names | product(dns_blocklists_lists) | list }}\"\n      loop_control:\n        label: \"{{ item.1.name }}\"\n\n    - name: Ensure excluded URLS are not included in any output file\n      ansible.builtin.lineinfile:\n        path: output/{{ item.0 }}/{{ item.0 }}_{{ item.1.type }}.txt\n        state: absent\n        regexp: \"{{ item.2 }}\"\n      loop: \"{{ group_names | product(dns_blocklists_lists, _dns_blocklists_exclude) | list }}\"\n      loop_control:\n        label: \"{{ item.2 }}\"\n      vars:\n        _dns_blocklists_exclude:\n          - mullvad.net\n          - angband.live # Reported via Mastodon as incorrect\n\n\n- name: Build zonefiles\n  hosts: all\n  become: false\n  tags: zonefile\n  connection: local\n  gather_facts: true\n  run_once: true\n\n  tasks:\n\n    - name: Find output files\n      ansible.builtin.find:\n        paths: ./output\n        recurse: true\n        use_regex: true\n        patterns: \".*.txt$\"   # Find raw output files\n        excludes: \".*.zone$\"  # Ignore existing zonefiles\n      register: _output_files\n\n    - name: Read output files\n      ansible.builtin.slurp:\n        path: \"{{ item }}\"\n      register: _output_files_slurp\n      loop: \"{{ _output_files.files | map(attribute='path') }}\"\n\n    - name: Generate zone files\n      ansible.builtin.copy:\n        content: |\n          $TTL 3600\n          ;namn   ttl     adr-    entry-  origin\n          ;               klass   typ\n          ;------------------------------------------------------------------------------\n          @                       IN      SOA     rpz.mullvad.net.     support.mullvadvpn.net. (\n                                                  {{ now(fmt='%s') }}    ; serial\n                                                  86400         ; refresh\n                                                  7200          ; retry\n                                                  2592000       ; expire\n                                                  3600 )        ; ttl\n                                  IN      NS      localhost.\n          ;------------------------------------------------------------------------------\n          {% for domain in _file_content.split('\\n') %}\n          {% if domain | length %}\n          {{ domain }} IN CNAME .\n          {% endif %}\n          {% endfor %}\n        dest: \"{{ _output_path }}\"\n        validate: named-checkzone _ %s\n      vars:\n        _filename_full: \"{{ item.source.split('/')[-1] }}\"          # relay_adblock.txt\n        _filename_short: \"{{ _filename_full.split('.') | first }}\"  # relay_adblock\n        _directory: \"{{ item.source.split('/')[:-1] | join('/') }}\" # output/relay\n        _output_path: \"{{ _directory }}/{{ _filename_short }}.zone\" # output/relay/relay_adblock.zone\n        _file_content: \"{{ item.content | b64decode }}\"\n      loop: \"{{ _output_files_slurp.results }}\"\n      loop_control:\n        label: \"{{ _output_path }}\"\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "templates",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}