{
  "metadata": {
    "timestamp": 1736568684120,
    "page": 765,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc2OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "japaric/trust",
      "stars": 1269,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.025390625,
          "content": "*.rs.bk\nCargo.lock\ntarget\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 4.341796875,
          "content": "# Based on the \"trust\" template v0.1.2\n# https://github.com/japaric/trust/tree/v0.1.2\n\ndist: trusty\nlanguage: rust\nservices: docker\nsudo: required\n\n# TODO Rust builds on stable by default, this can be\n# overridden on a case by case basis down below.\n\nenv:\n  global:\n    # TODO Update this to match the name of your project.\n    - CRATE_NAME=trust\n\nmatrix:\n  # TODO These are all the build jobs. Adjust as necessary. Comment out what you\n  # don't need\n  include:\n    # Android\n    - env: TARGET=aarch64-linux-android DISABLE_TESTS=1\n    - env: TARGET=arm-linux-androideabi DISABLE_TESTS=1\n    - env: TARGET=armv7-linux-androideabi DISABLE_TESTS=1\n    - env: TARGET=i686-linux-android DISABLE_TESTS=1\n    - env: TARGET=x86_64-linux-android DISABLE_TESTS=1\n\n    # iOS\n    - env: TARGET=aarch64-apple-ios DISABLE_TESTS=1\n      os: osx\n    - env: TARGET=armv7-apple-ios DISABLE_TESTS=1\n      os: osx\n    - env: TARGET=armv7s-apple-ios DISABLE_TESTS=1\n      os: osx\n    - env: TARGET=i386-apple-ios DISABLE_TESTS=1\n      os: osx\n    - env: TARGET=x86_64-apple-ios DISABLE_TESTS=1\n      os: osx\n\n    # Linux\n    - env: TARGET=aarch64-unknown-linux-gnu\n    - env: TARGET=arm-unknown-linux-gnueabi\n    - env: TARGET=armv7-unknown-linux-gnueabihf\n    - env: TARGET=i686-unknown-linux-gnu\n    - env: TARGET=i686-unknown-linux-musl\n    - env: TARGET=mips-unknown-linux-gnu\n    - env: TARGET=mips64-unknown-linux-gnuabi64\n    - env: TARGET=mips64el-unknown-linux-gnuabi64\n    - env: TARGET=mipsel-unknown-linux-gnu\n    - env: TARGET=powerpc-unknown-linux-gnu\n    - env: TARGET=powerpc64-unknown-linux-gnu\n    - env: TARGET=powerpc64le-unknown-linux-gnu\n    - env: TARGET=s390x-unknown-linux-gnu DISABLE_TESTS=1\n    - env: TARGET=x86_64-unknown-linux-gnu\n    - env: TARGET=x86_64-unknown-linux-musl\n\n    # OSX\n    - env: TARGET=i686-apple-darwin\n      os: osx\n    - env: TARGET=x86_64-apple-darwin\n      os: osx\n\n    # *BSD\n    - env: TARGET=i686-unknown-freebsd DISABLE_TESTS=1\n    - env: TARGET=x86_64-unknown-freebsd DISABLE_TESTS=1\n    - env: TARGET=x86_64-unknown-netbsd DISABLE_TESTS=1\n\n    # Windows\n    - env: TARGET=x86_64-pc-windows-gnu\n\n    # Bare metal\n    # These targets don't support std and as such are likely not suitable for\n    # most crates.\n    # - env: TARGET=thumbv6m-none-eabi\n    # - env: TARGET=thumbv7em-none-eabi\n    # - env: TARGET=thumbv7em-none-eabihf\n    # - env: TARGET=thumbv7m-none-eabi\n\n    # Testing other channels\n    - env: TARGET=x86_64-unknown-linux-gnu\n      rust: nightly\n    - env: TARGET=x86_64-apple-darwin\n      os: osx\n      rust: nightly\n\nbefore_install:\n  - set -e\n  - rustup self update\n\ninstall:\n  - sh ci/install.sh\n  - source ~/.cargo/env || true\n\nscript:\n  - bash ci/script.sh\n\nafter_script: set +e\n\nbefore_deploy:\n  - sh ci/before_deploy.sh\n\ndeploy:\n  # TODO update `api_key.secure`\n  # - Create a `public_repo` GitHub token. Go to: https://github.com/settings/tokens/new\n  # - Encrypt it: `travis encrypt 0123456789012345678901234567890123456789\n  # - Paste the output down here\n  api_key:\n    secure: A9v3PIzQQ4U08OHFmDPQzNXbNHEb7YHyLXCvMF+dXFuNSvhUNlmQYykxqUf3dvikhJL2/bsZ14umm7ni7fQh0tGwJ4+lPpNzYAcweGgNXnWvjTpY6ovuRbr3gs4/srkyxp/GBDmSW5L8wFN3hKCB+Lm0YnIPB9IA2afP8a30+8VTXT9nv7pNqGny4ilN41ycr4DZi3sQoXdbruy7ClN7gsWW/GUiudBccHVIjmTapOFKLwZHODaUl/1/RDWQzh+i+17e1ivXuJPktDSrqmHPTZ15OjklnHKd6t179ry6VkGRg4R/R/YukVIqGzeaXGWAwdAQ5gE8cjGZghJLVi2jkDBJ85z8MvT+zLZLyliiuhLc/X8y7mkE1n0FKFtXXzFVt0l7V1LaEKbIbiV6XX3jsir4qgkqWjPHBZqO5mkGNFS16Dmt30/ZtEPAzXiINFXbWuWrpQ/LZ4NSto8IMrRTcoyDbAga/KYxJiNIeVuCe1E9dbytDM7K0GLtxJTul/WnnSeI6r//EFyC4bxYjyHhCXaag4q14KM+ak4rB0QgxsYzyGuh2MqyCoVj8YJLjLdKnL/SV7W7LPD40xlxvI6VCYTVi2ILHwL6vCxpukXYteX0c5IAIWkISDKu6nNBEgmCHXXPSqYSrgE5g7/QoCQHI8++nR8iKe0s7TWxZRydby8=\n  file_glob: true\n  file: $CRATE_NAME-$TRAVIS_TAG-$TARGET.*\n  on:\n    # TODO Here you can pick which targets will generate binary releases\n    # In this example, there are some targets that are tested using the stable\n    # and nightly channels. This condition makes sure there is only one release\n    # for such targets and that's generated using the stable channel\n    condition: $TRAVIS_RUST_VERSION = stable\n    tags: true\n  provider: releases\n  skip_cleanup: true\n\ncache: cargo\nbefore_cache:\n  # Travis can't cache files that are not readable by \"others\"\n  - chmod -R a+r $HOME/.cargo\n\nbranches:\n  only:\n    # release tags\n    - /^v\\d+\\.\\d+\\.\\d+.*$/\n    - master\n\nnotifications:\n  email:\n    on_success: never\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 0.8046875,
          "content": "# Change Log\n\nAll notable changes to this project will be documented in this file.\nThis project adheres to [Semantic Versioning](http://semver.org/).\n\n## [Unreleased]\n\n## [v0.1.2] - 2017-12-23\n\n### Added\n\n- More test / deploy targets\n\n### Changed\n\n- Ensure rustup is always up to date\n- Always use the latest stable release of Cross\n- Don't install rustup twice (the Travis Rust now installs it by default)\n- The x86_64-unknown-linux-gnu target is now part of the target matrix\n\n## [v0.1.1] - 2017-01-08\n\n### Added\n\n- Cross compilation / deploy support for FreeBSD and NetBSD.\n\n## v0.1.0 - 2017-01-01\n\n- Initial release\n\n[Unreleased]: https://github.com/japaric/trust/compare/v0.1.2...HEAD\n[v0.1.2]: https://github.com/japaric/trust/compare/v0.1.1...v0.1.2\n[v0.1.1]: https://github.com/japaric/trust/compare/v0.1.0...v0.1.1\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.3193359375,
          "content": "[package]\nauthors = [\"Jorge Aparicio <japaricious@gmail.com>\"]\nbuild = \"build.rs\"\nname = \"trust\"\nversion = \"0.1.2\"\n\n[build-dependencies]\ncc = { git = \"https://github.com/alexcrichton/cc-rs\" }\n\n[target.'cfg(not(target_os = \"none\"))'.dependencies]\n# Just to test 'cache: cargo'\nclap = \"2.13.0\"\n\n[features]\nc = []\ndefault = [\"c\"]\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 10.5927734375,
          "content": "                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work.\n\n   To apply the Apache License to your work, attach the following\n   boilerplate notice, with the fields enclosed by brackets \"[]\"\n   replaced with your own identifying information. (Don't include\n   the brackets!)  The text should be enclosed in the appropriate\n   comment syntax for the file format. We also recommend that a\n   file or class name and description of purpose be included on the\n   same \"printed page\" as the copyright notice for easier\n   identification within third-party archives.\n\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n\thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.033203125,
          "content": "Copyright (c) 2016 Jorge Aparicio\n\nPermission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.04296875,
          "content": "# `trust`\n\n> Travis CI and AppVeyor template to test your Rust crate on 5 architectures\n> and publish [binary releases] of it for Linux, macOS and Windows\n\n[binary releases]: https://github.com/japaric/trust/releases\n\n### Features\n\n- CI test your crate (library or binary) on Linux, macOS and Windows and on more\n  than just the x86 architecture.\n\n- Cargo artifacts are cached and reused between CI builds.\n\n- \"Deploys\": Publish binary releases of your application by just pushing a new\n  (Git) tag.\n\n## Requirements\n\n- Your crate must be hosted on GitHub (free).\n\n- A [Travis CI](https://travis-ci.org/) account (free).\n\n- An [AppVeyor](https://www.appveyor.com/) account (free).\n\n## How-to\n\n### Use this template\n\nCopy the `ci` directory, and the `.travis.yml` and `appveyor.yml` files into the\nrepository where you host your Rust crate.\n\nYou'll have to adjust those files to meet your needs. Just look inside those\nfiles for comments that start with the word `TODO`; they'll tell you want needs\nto be changed.\n\nThis is an overview of what must / can be changed:\n\n- The GitHub token used for deploys.\n\n- The list of test targets. Trim it down to reduce test times.\n\n- The Rust channel used for testing / deploys.\n\n- The \"test phase\". Tweak how your crate is tested.\n\n- the \"package phase\". Tweak what goes into the release tarball / zipfile.\n\n### Generate binary releases\n\nYou only need to push an **annotated** tag to kick off the build process.\n\n```\n# Optional: Publish a new version of your crate to crates.io\n$ cargo publish\n\n$ git tag -a $TAG\n\n$ git push origin $TAG\n```\n\n### Use the binary releases on Travis CI\n\nThere's\nan [`install.sh`](https://github.com/japaric/trust/blob/gh-pages/install.sh)\nscript that you can use to quickly install a binary release produced using this\nCI template.\n\n```\n$ curl -LSfs https://japaric.github.io/trust/install.sh | \\\n    sh -s -- --git japaric/cross\n```\n\nFor more details about this installation script see `install.sh -h`\n\n### How to disable deploys?\n\nIf you don't want to generate binary releases at all, perhaps because your Cargo\nproject is a library or you only want to test your project, then you can simply\nchange `deploy.on.condition`, in `.travis.yml`, and `deploy.on`, in\n`appveyor.yml`, to always be false. For example:\n\n``` yml\n# .travis.yml\ndeploy:\n  on:\n    condition: $DEPLOY = never\n```\n\n### How to upgrade your CI configuration?\n\nFirst, figure out which version of the trust template you are using. The version\nis written in the header of the `.travis.yml` and `appveyor.yml` files. If\nthere's no header, that means you are using version `v0.1.0`.\n\nNext, look at the [change log](CHANGELOG.md) to check if there's a new release\nand to learn, at a high level, how the template has changed: what has been\nfixed, what has been added, etc.\n\nIf it makes sense for you to upgrade, you can see the required \"code\" changes by\nlooking at the \"diff\" between the version you are using and the version you are\ngoing to upgrade to. For example:\n\nhttps://github.com/japaric/trust/compare/v0.1.0...v0.1.1\n\nAs for the upgrade itself, GitHub can generate a patch from the above diff that\nthen you can apply to your repository with `git am` or similar:\n\nhttps://github.com/japaric/trust/compare/v0.1.0...v0.1.1.patch\n\n## Supported targets\n\n### Linux\n\nCourtesy of [`cross`](https://github.com/japaric/cross).\n\nIf you run into any problem with any of these targets, report them\nto [`cross`'s issue tracker](https://github.com/japaric/cross/issues) but first\ncheck if using a newer release (see `ci/install.sh`)\nwould\n[fix your problem](https://github.com/japaric/cross/blob/master/CHANGELOG.md).\n\n### Android\n\n- aarch64-linux-android\n\n- arm-linux-androideabi\n\n- armv7-linux-androideabi\n\n- i686-linux-android\n\n- x86_64-linux-android\n\n### iOS\n\n- aarch64-apple-ios\n\n- armv7-apple-ios\n\n- armv7s-apple-ios\n\n- i386-apple-ios\n\n- x86_64-apple-ios\n\n### Linux\n\n- `i686-unknown-linux-gnu`\n\n- `i686-unknown-linux-musl`\n\n- `x86_64-unknown-linux-gnu`\n\n- `x86_64-unknown-linux-musl`\n\n- `aarch64-unknown-linux-gnu`\n\n- `arm-unknown-linux-gnueabi`\n\n- `armv7-unknown-linux-gnueabihf`\n\n- `mips-unknown-linux-gnu`\n\n- `mips64-unknown-linux-gnuabi64`\n\n- `mips64el-unknown-linux-gnuabi64`\n\n- `mipsel-unknown-linux-gnu`\n\n- `powerpc-unknown-linux-gnu`\n\n- `powerpc64-unknown-linux-gnu`\n\n- `powerpc64le-unknown-linux-gnu`\n\n- `s390x-unknown-linux-gnu`\n\n### macOS\n\n- `i686-apple-darwin`\n\n- `x86_64-apple-darwin`\n\n### *BSD\n\n- `i686-unknown-freebsd`\n\n- `x86_64-unknown-freebsd`\n\n- `x86_64-unknown-netbsd`\n\n### Windows (MinGW)\n\n- `i686-pc-windows-gnu`\n\n- `x86_64-pc-windows-gnu`\n\n### Windows (MSVC)\n\n- `i686-pc-windows-msvc`\n\n- `x86_64-pc-windows-msvc`\n\n## License\n\nLicensed under either of\n\n- Apache License, Version 2.0 ([LICENSE-APACHE](LICENSE-APACHE) or\n  https://www.apache.org/licenses/LICENSE-2.0)\n- MIT license ([LICENSE-MIT](LICENSE-MIT) or https://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall be\ndual licensed as above, without any additional terms or conditions.\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 2.791015625,
          "content": "# Based on the \"trust\" template v0.1.2\n# https://github.com/japaric/trust/tree/v0.1.2\n\nenvironment:\n  global:\n  # TODO This is the Rust channel that build jobs will use by default but can be\n  # overridden on a case by case basis down below\n    RUST_VERSION: stable\n\n    # TODO Update this to match the name of your project.\n    CRATE_NAME: trust\n\n  # TODO These are all the build jobs. Adjust as necessary. Comment out what you\n  # don't need\n  matrix:\n    # MinGW\n    - TARGET: i686-pc-windows-gnu\n    - TARGET: x86_64-pc-windows-gnu\n\n    # MSVC\n    - TARGET: i686-pc-windows-msvc\n    - TARGET: x86_64-pc-windows-msvc\n\n    # Testing other channels\n    - TARGET: x86_64-pc-windows-gnu\n      RUST_VERSION: nightly\n    - TARGET: x86_64-pc-windows-msvc\n      RUST_VERSION: nightly\n\ninstall:\n  - ps: >-\n      If ($env:TARGET -eq 'x86_64-pc-windows-gnu') {\n        $env:PATH += ';C:\\msys64\\mingw64\\bin'\n      } ElseIf ($env:TARGET -eq 'i686-pc-windows-gnu') {\n        $env:PATH += ';C:\\msys64\\mingw32\\bin'\n      }\n  - curl -sSf -o rustup-init.exe https://win.rustup.rs/\n  - rustup-init.exe -y --default-host %TARGET% --default-toolchain %RUST_VERSION%\n  - set PATH=%PATH%;C:\\Users\\appveyor\\.cargo\\bin\n  - rustc -Vv\n  - cargo -V\n\n# TODO This is the \"test phase\", tweak it as you see fit\ntest_script:\n  # we don't run the \"test phase\" when doing deploys\n  - if [%APPVEYOR_REPO_TAG%]==[false] (\n      cargo build --target %TARGET% &&\n      cargo build --target %TARGET% --release &&\n      cargo test --target %TARGET% &&\n      cargo test --target %TARGET% --release &&\n      cargo run --target %TARGET% &&\n      cargo run --target %TARGET% --release\n    )\n\nbefore_deploy:\n  # TODO Update this to build the artifacts that matter to you\n  - cargo rustc --target %TARGET% --release --bin %CRATE_NAME% -- -C lto\n  - ps: ci\\before_deploy.ps1\n\ndeploy:\n  artifact: /.*\\.zip/\n  # TODO update `auth_token.secure`\n  # - Create a `public_repo` GitHub token. Go to: https://github.com/settings/tokens/new\n  # - Encrypt it. Go to https://ci.appveyor.com/tools/encrypt\n  # - Paste the output down here\n  auth_token:\n    secure: t3puM/2hOig26EHhAodcZBc61NywF7/PFEpimR6SwGaCiqS07KR5i7iAhSABmBp7\n  description: ''\n  on:\n    # TODO Here you can pick which targets will generate binary releases\n    # In this example, there are some targets that are tested using the stable\n    # and nightly channels. This condition makes sure there is only one release\n    # for such targets and that's generated using the stable channel\n    RUST_VERSION: stable\n    appveyor_repo_tag: true\n  provider: GitHub\n\ncache:\n  - C:\\Users\\appveyor\\.cargo\\registry\n  - target\n\nbranches:\n  only:\n    # Release tags\n    - /^v\\d+\\.\\d+\\.\\d+.*$/\n    - master\n\nnotifications:\n  - provider: Email\n    on_build_success: false\n\n# Building is done in the test phase, so we disable Appveyor's build phase.\nbuild: false\n"
        },
        {
          "name": "build.rs",
          "type": "blob",
          "size": 0.5849609375,
          "content": "extern crate cc;\n\nuse std::env;\nuse std::fs::File;\nuse std::io::Write;\nuse std::path::PathBuf;\n\nfn main() {\n    let out_dir = PathBuf::from(env::var_os(\"OUT_DIR\").unwrap());\n\n    File::create(out_dir.join(\"target.txt\"))\n        .unwrap()\n        .write_all(env::var(\"TARGET\").unwrap().as_bytes())\n        .unwrap();\n\n    if env::var_os(\"CARGO_FEATURE_C\").is_some() {\n        cc::Build::new()\n            .file(\"hello.c\")\n            .compile(\"libhello.a\");\n    }\n\n    let target = env::var(\"TARGET\").unwrap();\n\n    if target.starts_with(\"thumb\") {\n        println!(\"cargo:rustc-cfg=thumb\");\n    }\n}\n"
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "hello.c",
          "type": "blob",
          "size": 0.064453125,
          "content": "#include <stdio.h>\n\nvoid hello() {\n  printf(\"Hello, world!\\n\");\n}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}