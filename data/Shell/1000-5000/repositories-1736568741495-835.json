{
  "metadata": {
    "timestamp": 1736568741495,
    "page": 835,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgzOQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "anti-ddos/Anti-DDOS",
      "stars": 1174,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.0205078125,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*,cover\n.hypothesis/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# IPython Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# dotenv\n.env\n\n# virtualenv\nvenv/\nENV/\n\n# Spyder project settings\n.spyderproject\n\n# Rope project settings\n.ropeproject\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0498046875,
          "content": "MIT License\n\nCopyright (c) 2016 İSMAİL TAŞDELEN\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.12109375,
          "content": "## Anti DDOS | BASH SCRIPT\n\n<img src=\"https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg\"> <img src=\"https://img.shields.io/github/stars/anti-ddos/Anti-DDOS?style=social\"> <img src=\"https://img.shields.io/github/forks/anti-ddos/Anti-DDOS?style=social\"> <img src=\"https://img.shields.io/github/repo-size/anti-ddos/Anti-DDOS\"> <img src=\"https://img.shields.io/github/license/anti-ddos/Anti-DDOS\"> <img src=\"https://img.shields.io/github/issues/detail/author/anti-ddos/Anti-DDOS/1\"> <img src=\"https://img.shields.io/badge/platform-linux-success.svg\"> <img src=\"https://img.shields.io/badge/version-2.3-yellow\">\n\n\n![anti-ddos](https://user-images.githubusercontent.com/15425071/34910181-caa9f41c-f8c0-11e7-9ec5-6d43adfeb4bd.png) ![bash-language](https://user-images.githubusercontent.com/15425071/34910256-37569a6a-f8c2-11e7-81d8-42dec07d4ef8.png)\n\n### Programming Languages :\n\n* BASH\n\n### System :\n\n* Linux\n* [Windows (via MSYS2)](#windows-installation)\n### Explanation :\n\nAnti-DDOS project is an open source software project developed to protect against DOS and DDoS attacks. The project was written using bash programming language. By writing iptables rules into the Linux operating system. Takes the necessary defense configurations. And it only works on the linux operating system (or see [Windows Installation](#windows-installation) for Windows). 100% compatible for Linux operating systems. It does not provide 100% security, it will only help you to take the necessary measures.\n\n### How to use ?\n\nYou need to set the config file according to your system architecture.\n#### Windows Installation\nThis requires MSYS2 (`winget install msys2`).\n\n```batch\nmsys2\n```\n```sh\ngit clone https://github.com/anti-ddos/Anti-DDOS\ncd ~/Anti-DDOS\nbash ./anti-ddos.sh\n```\n### RUN\n```\nroot@ismailtasdelen:~# bash ./anti-ddos.sh\n```\n\n### Cloning an Existing Repository ( Clone with HTTPS )\n```\nroot@ismailtasdelen:~# git clone https://github.com/ismailtasdelen/Anti-DDOS.git\n```\n\n### Cloning an Existing Repository ( Clone with SSH )\n```\nroot@ismailtasdelen:~# git clone git@github.com:ismailtasdelen/Anti-DDOS.git\n```\n\n### About DOS and DDOS :\n\n##### Denial of Service : https://www.owasp.org/index.php/Denial_of_Service\n\n##### Denial of Service Cheat Sheet : https://www.owasp.org/index.php/Denial_of_Service_Cheat_Sheet\n\n##### Application Denial of Service : https://www.owasp.org/index.php/Application_Denial_of_Service\n\n##### Testing for Denial of Service : https://www.owasp.org/index.php/Testing_for_Denial_of_Service\n\n##### DRAFT Denial of Service Cheat Sheet : https://www.owasp.org/index.php/DRAFT_Denial_of_Service_Cheat_Sheet\n\n##### Regular expression Denial of Service - ReDoS : https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\n\n### Published Website :\n\n##### KitPloit - https://www.kitploit.com/2017/10/anti-ddos-anti-ddos-bash-script.html\n\n##### CISOfy - https://linuxsecurity.expert/tools/anti-ddos/\n\n### Contact :\n\n##### Mail : ismailtasdelen@protonmail.com\n\n##### Linkedin : https://www.linkedin.com/in/ismailtasdelen\n\n##### GitHub : https://github.com/ismailtasdelen\n\n##### Telegram : https://t.me/ismailtasdelen\n"
        },
        {
          "name": "_config.yml",
          "type": "blob",
          "size": 0.025390625,
          "content": "theme: jekyll-theme-hacker"
        },
        {
          "name": "anti-ddos.sh",
          "type": "blob",
          "size": 17.3671875,
          "content": "#!/bin/sh\n\n#########################################################\n#                 ANTI-DDOS BASH SCRIPT                 #\n######################################################### \n#                       CONTACT                         #\n#########################################################\n#              DEVELOPER : İSMAİL TAŞDELEN              #                       \n#           GMAIL : ismailtasdelen@protonmail.com       #\n# Linkedin : https://www.linkedin.com/in/ismailtasdelen #\n#           Telegram : https://t.me/ismailtasdelen      #\n#########################################################\n\n# For debugging use iptables -v.\nIPTABLES=\"/sbin/iptables\"\nIP6TABLES=\"/sbin/ip6tables\"\nMODPROBE=\"/sbin/modprobe\"\nRMMOD=\"/sbin/rmmod\"\nARP=\"/usr/sbin/arp\"\nSSHPORT=\"22\"\n\n# Logging options.\n#------------------------------------------------------------------------------\nLOG=\"LOG --log-level debug --log-tcp-sequence --log-tcp-options\"\nLOG=\"$LOG --log-ip-options\"\n\n# Defaults for rate limiting\n#------------------------------------------------------------------------------\nRLIMIT=\"-m limit --limit 3/s --limit-burst 8\"\n\n# Unprivileged ports.\n#------------------------------------------------------------------------------\nPHIGH=\"1024:65535\"\nPSSH=\"1000:1023\"\n\n# Load required kernel modules\n#------------------------------------------------------------------------------\n\"$MODPROBE\" ip_conntrack_ftp\n\"$MODPROBE\" ip_conntrack_irc\n\n# Mitigate ARP spoofing/poisoning and similar attacks.\n#------------------------------------------------------------------------------\n# Hardcode static ARP cache entries here\n# $ARP -s IP-ADDRESS MAC-ADDRESS\n\n# Kernel configuration.\n#------------------------------------------------------------------------------\n\n# Disable IP forwarding.\n# On => Off = (reset)\necho 1 > /proc/sys/net/ipv4/ip_forward\necho 0 > /proc/sys/net/ipv4/ip_forward\n\n# Enable IP spoofing protection\nfor i in /proc/sys/net/ipv4/conf/*/rp_filter; do echo 1 > \"$i\"; done\n\n# Protect against SYN flood attacks\necho 1 > /proc/sys/net/ipv4/tcp_syncookies\n\n# Ignore all incoming ICMP echo requests\necho 0 > /proc/sys/net/ipv4/icmp_echo_ignore_all\n\n# Ignore ICMP echo requests to broadcast\necho 1 > /proc/sys/net/ipv4/icmp_echo_ignore_broadcasts\n\n# Log packets with impossible addresses.\nfor i in /proc/sys/net/ipv4/conf/*/log_martians; do echo 1 > \"$i\"; done\n\n# Don't log invalid responses to broadcast\necho 1 > /proc/sys/net/ipv4/icmp_ignore_bogus_error_responses\n\n# Don't accept or send ICMP redirects.\nfor i in /proc/sys/net/ipv4/conf/*/accept_redirects; do echo 0 > \"$i\"; done\nfor i in /proc/sys/net/ipv4/conf/*/send_redirects; do echo 0 > \"$i\"; done\n\n# Don't accept source routed packets.\nfor i in /proc/sys/net/ipv4/conf/*/accept_source_route; do echo 0 > \"$i\"; done\n\n# Disable multicast routing\nfor i in /proc/sys/net/ipv4/conf/*/mc_forwarding; do echo 0 > \"$i\"; done\n\n# Disable proxy_arp.\nfor i in /proc/sys/net/ipv4/conf/*/proxy_arp; do echo 0 > \"$i\"; done\n\n# Enable secure redirects, i.e. only accept ICMP redirects for gateways\n# Helps against MITM attacks.\nfor i in /proc/sys/net/ipv4/conf/*/secure_redirects; do echo 1 > \"$i\"; done\n\n# Disable bootp_relay\nfor i in /proc/sys/net/ipv4/conf/*/bootp_relay; do echo 0 > \"$i\"; done\n\n# Default policies.\n#------------------------------------------------------------------------------\n\n# Drop everything by default.\n\"$IPTABLES\" -P INPUT DROP\n\"$IPTABLES\" -P FORWARD DROP\n\"$IPTABLES\" -P OUTPUT DROP\n\n# Set the nat/mangle/raw tables' chains to ACCEPT\n\"$IPTABLES\" -t nat -P PREROUTING ACCEPT\n\"$IPTABLES\" -t nat -P OUTPUT ACCEPT\n\"$IPTABLES\" -t nat -P POSTROUTING ACCEPT\n\n\"$IPTABLES\" -t mangle -P PREROUTING ACCEPT\n\"$IPTABLES\" -t mangle -P INPUT ACCEPT\n\"$IPTABLES\" -t mangle -P FORWARD ACCEPT\n\"$IPTABLES\" -t mangle -P OUTPUT ACCEPT\n\"$IPTABLES\" -t mangle -P POSTROUTING ACCEPT\n\n# Cleanup.\n#------------------------------------------------------------------------------\n\n# Delete all\n\"$IPTABLES\" -F\n\"$IPTABLES\" -t nat -F\n\"$IPTABLES\" -t mangle -F\n\n# Delete all\n\"$IPTABLES\" -X\n\"$IPTABLES\" -t nat -X\n\"$IPTABLES\" -t mangle -X\n\n# Zero all packets and counters.\n\"$IPTABLES\" -Z\n\"$IPTABLES\" -t nat -Z\n\"$IPTABLES\" -t mangle -Z\n\n# Completely disable IPv6.\n#------------------------------------------------------------------------------\n\n# Block all IPv6 traffic\n# If the ip6tables command is available, try to block all IPv6 traffic.\nif test -x \"$IP6TABLES\"; then\n# Set the default policies\n# drop everything\n\"$IP6TABLES\" -P INPUT DROP 2>/dev/null\n\"$IP6TABLES\" -P FORWARD DROP 2>/dev/null\n\"$IP6TABLES\" -P OUTPUT DROP 2>/dev/null\n\n# The mangle table can pass everything\n\"$IP6TABLES\" -t mangle -P PREROUTING ACCEPT 2>/dev/null\n\"$IP6TABLES\" -t mangle -P INPUT ACCEPT 2>/dev/null\n\"$IP6TABLES\" -t mangle -P FORWARD ACCEPT 2>/dev/null\n\"$IP6TABLES\" -t mangle -P OUTPUT ACCEPT 2>/dev/null\n\"$IP6TABLES\" -t mangle -P POSTROUTING ACCEPT 2>/dev/null\n\n# Delete all rules.\n\"$IP6TABLES\" -F 2>/dev/null\n\"$IP6TABLES\" -t mangle -F 2>/dev/null\n\n# Delete all chains.\n\"$IP6TABLES\" -X 2>/dev/null\n\"$IP6TABLES\" -t mangle -X 2>/dev/null\n\n# Zero all packets and counters.\n\"$IP6TABLES\" -Z 2>/dev/null\n\"$IP6TABLES\" -t mangle -Z 2>/dev/null\nfi\n\n# Custom user-defined chains.\n#------------------------------------------------------------------------------\n\n# LOG packets, then ACCEPT.\n\"$IPTABLES\" -N ACCEPTLOG\n\"$IPTABLES\" -A ACCEPTLOG -j \"$LOG\" \"$RLIMIT\" --log-prefix \"ACCEPT \"\n\"$IPTABLES\" -A ACCEPTLOG -j ACCEPT\n\n# LOG packets, then DROP.\n\"$IPTABLES\" -N DROPLOG\n\"$IPTABLES\" -A DROPLOG -j \"$LOG\" \"$RLIMIT\" --log-prefix \"DROP \"\n\"$IPTABLES\" -A DROPLOG -j DROP\n\n# LOG packets, then REJECT.\n# TCP packets are rejected with a TCP reset.\n\"$IPTABLES\" -N REJECTLOG\n\"$IPTABLES\" -A REJECTLOG -j \"$LOG\" \"$RLIMIT\" --log-prefix \"REJECT \"\n\"$IPTABLES\" -A REJECTLOG -p tcp -j REJECT --reject-with tcp-reset\n\"$IPTABLES\" -A REJECTLOG -j REJECT\n\n# Only allows RELATED ICMP types\n# (destination-unreachable, time-exceeded, and parameter-problem).\n# TODO: Rate-limit this traffic?\n# TODO: Allow fragmentation-needed?\n# TODO: Test.\n\"$IPTABLES\" -N RELATED_ICMP\n\"$IPTABLES\" -A RELATED_ICMP -p icmp --icmp-type destination-unreachable -j ACCEPT\n\"$IPTABLES\" -A RELATED_ICMP -p icmp --icmp-type time-exceeded -j ACCEPT\n\"$IPTABLES\" -A RELATED_ICMP -p icmp --icmp-type parameter-problem -j ACCEPT\n\"$IPTABLES\" -A RELATED_ICMP -j DROPLOG\n\n# Make It Even Harder To Multi-PING\n\"$IPTABLES\"  -A INPUT -p icmp -m limit --limit 1/s --limit-burst 2 -j ACCEPT\n\"$IPTABLES\"  -A INPUT -p icmp -m limit --limit 1/s --limit-burst 2 -j LOG --log-prefix PING-DROP:\n\"$IPTABLES\"  -A INPUT -p icmp -j DROP\n\"$IPTABLES\"  -A OUTPUT -p icmp -j ACCEPT\n\n# Only allow the minimally required/recommended parts of ICMP. Block the rest.\n#------------------------------------------------------------------------------\n\n# TODO: This section needs a lot of testing!\n\n# First, drop all fragmented ICMP packets (almost always malicious).\n\"$IPTABLES\" -A INPUT -p icmp --fragment -j DROPLOG\n\"$IPTABLES\" -A OUTPUT -p icmp --fragment -j DROPLOG\n\"$IPTABLES\" -A FORWARD -p icmp --fragment -j DROPLOG\n\n# Allow all ESTABLISHED ICMP traffic.\n\"$IPTABLES\" -A INPUT -p icmp -m state --state ESTABLISHED -j ACCEPT \"$RLIMIT\"\n\"$IPTABLES\" -A OUTPUT -p icmp -m state --state ESTABLISHED -j ACCEPT \"$RLIMIT\"\n\n# Allow some parts of the RELATED ICMP traffic, block the rest.\n\"$IPTABLES\" -A INPUT -p icmp -m state --state RELATED -j RELATED_ICMP \"$RLIMIT\"\n\"$IPTABLES\" -A OUTPUT -p icmp -m state --state RELATED -j RELATED_ICMP \"$RLIMIT\"\n\n# Allow incoming ICMP echo requests (ping), but only rate-limited.\n\"$IPTABLES\" -A INPUT -p icmp --icmp-type echo-request -j ACCEPT \"$RLIMIT\"\n\n# Allow outgoing ICMP echo requests (ping), but only rate-limited.\n\"$IPTABLES\" -A OUTPUT -p icmp --icmp-type echo-request -j ACCEPT \"$RLIMIT\"\n\n# Drop any other ICMP traffic.\n\"$IPTABLES\" -A INPUT -p icmp -j DROPLOG\n\"$IPTABLES\" -A OUTPUT -p icmp -j DROPLOG\n\"$IPTABLES\" -A FORWARD -p icmp -j DROPLOG\n\n# Selectively allow certain special types of traffic.\n#------------------------------------------------------------------------------\n\n# Allow loopback interface to do anything.\n\"$IPTABLES\" -A INPUT -i lo -j ACCEPT\n\"$IPTABLES\" -A OUTPUT -o lo -j ACCEPT\n\n# Allow incoming connections related to existing allowed connections.\n\"$IPTABLES\" -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT\n\n# Allow outgoing connections EXCEPT invalid\n\"$IPTABLES\" -A OUTPUT -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT\n\n# Miscellaneous.\n#------------------------------------------------------------------------------\n\n# We don't care about Milkosoft, Drop SMB/CIFS/etc..\n\"$IPTABLES\" -A INPUT -p tcp -m multiport --dports 135,137,138,139,445,1433,1434 -j DROP\n\"$IPTABLES\" -A INPUT -p udp -m multiport --dports 135,137,138,139,445,1433,1434 -j DROP\n\n# Explicitly drop invalid incoming traffic\n\"$IPTABLES\" -A INPUT -m state --state INVALID -j DROP\n\n# Drop invalid outgoing traffic, too.\n\"$IPTABLES\" -A OUTPUT -m state --state INVALID -j DROP\n\n# If we would use NAT, INVALID packets would pass - BLOCK them anyways\n\"$IPTABLES\" -A FORWARD -m state --state INVALID -j DROP\n\n# PORT Scanners (stealth also)\n\"$IPTABLES\" -A INPUT -m state --state NEW -p tcp --tcp-flags ALL ALL -j DROP\n\"$IPTABLES\" -A INPUT -m state --state NEW -p tcp --tcp-flags ALL NONE -j DROP\n\n# TODO: Some more anti-spoofing rules? For example:\n# \"$IPTABLES\" -A INPUT -p tcp --tcp-flags ALL FIN,URG,PSH -j DROP\n# \"$IPTABLES\" -A INPUT -p tcp --tcp-flags SYN,RST SYN,RST -j DROP\n# \"$IPTABLES\" -A INPUT -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP\n\"$IPTABLES\" -N SYN_FLOOD\n\"$IPTABLES\" -A INPUT -p tcp --syn -j SYN_FLOOD\n\"$IPTABLES\" -A SYN_FLOOD -m limit --limit 2/s --limit-burst 6 -j RETURN\n\"$IPTABLES\" -A SYN_FLOOD -j DROP\n\n# TODO: Block known-bad IPs (see http://www.dshield.org/top10.php).\n# \"$IPTABLES\" -A INPUT -s INSERT-BAD-IP-HERE -j DROPLOG\n\n# Drop any traffic from IANA-reserved IPs.\n#------------------------------------------------------------------------------\n\n\"$IPTABLES\" -A INPUT -s 0.0.0.0/7 -j DROP\n\"$IPTABLES\" -A INPUT -s 2.0.0.0/8 -j DROP\n\"$IPTABLES\" -A INPUT -s 5.0.0.0/8 -j DROP\n\"$IPTABLES\" -A INPUT -s 7.0.0.0/8 -j DROP\n\"$IPTABLES\" -A INPUT -s 10.0.0.0/8 -j DROP\n\"$IPTABLES\" -A INPUT -s 23.0.0.0/8 -j DROP\n\"$IPTABLES\" -A INPUT -s 27.0.0.0/8 -j DROP\n\"$IPTABLES\" -A INPUT -s 31.0.0.0/8 -j DROP\n\"$IPTABLES\" -A INPUT -s 36.0.0.0/7 -j DROP\n\"$IPTABLES\" -A INPUT -s 39.0.0.0/8 -j DROP\n\"$IPTABLES\" -A INPUT -s 42.0.0.0/8 -j DROP\n\"$IPTABLES\" -A INPUT -s 49.0.0.0/8 -j DROP\n\"$IPTABLES\" -A INPUT -s 50.0.0.0/8 -j DROP\n\"$IPTABLES\" -A INPUT -s 77.0.0.0/8 -j DROP\n\"$IPTABLES\" -A INPUT -s 78.0.0.0/7 -j DROP\n\"$IPTABLES\" -A INPUT -s 92.0.0.0/6 -j DROP\n\"$IPTABLES\" -A INPUT -s 96.0.0.0/4 -j DROP\n\"$IPTABLES\" -A INPUT -s 112.0.0.0/5 -j DROP\n\"$IPTABLES\" -A INPUT -s 120.0.0.0/8 -j DROP\n\"$IPTABLES\" -A INPUT -s 169.254.0.0/16 -j DROP\n\"$IPTABLES\" -A INPUT -s 172.16.0.0/12 -j DROP\n\"$IPTABLES\" -A INPUT -s 173.0.0.0/8 -j DROP\n\"$IPTABLES\" -A INPUT -s 174.0.0.0/7 -j DROP\n\"$IPTABLES\" -A INPUT -s 176.0.0.0/5 -j DROP\n\"$IPTABLES\" -A INPUT -s 184.0.0.0/6 -j DROP\n\"$IPTABLES\" -A INPUT -s 192.0.2.0/24 -j DROP\n\"$IPTABLES\" -A INPUT -s 197.0.0.0/8 -j DROP\n\"$IPTABLES\" -A INPUT -s 198.18.0.0/15 -j DROP\n\"$IPTABLES\" -A INPUT -s 223.0.0.0/8 -j DROP\n\"$IPTABLES\" -A INPUT -s 224.0.0.0/3 -j DROP\n\n# Selectively allow certain outbound connections, block the rest.\n#------------------------------------------------------------------------------\n\n# Allow outgoing DNS requests. Few things will work without this.\n\"$IPTABLES\" -A OUTPUT -m state --state NEW -p udp --dport 53 -j ACCEPT\n\"$IPTABLES\" -A OUTPUT -m state --state NEW -p tcp --dport 53 -j ACCEPT\n\n# Allow outgoing HTTP requests. Unencrypted, use with care.\n\"$IPTABLES\" -A OUTPUT -m state --state NEW -p tcp --dport 80 -j ACCEPT\n\n# Allow outgoing HTTPS requests.\n\"$IPTABLES\" -A OUTPUT -m state --state NEW -p tcp --dport 443 -j ACCEPT\n\n# Allow outgoing SMTPS requests. Do NOT allow unencrypted SMTP!\n# \"$IPTABLES\" -A OUTPUT -m state --state NEW -p tcp --dport 465 -j ACCEPT\n\n# Allow outgoing \"submission\" (RFC 2476) requests.\n\"$IPTABLES\" -A OUTPUT -m state --state NEW -p tcp --dport 587 -j ACCEPT\n\n# Allow outgoing POP3S requests.\n\"$IPTABLES\" -A OUTPUT -m state --state NEW -p tcp --dport 995 -j ACCEPT\n\n# Allow outgoing SSH requests.\n\"$IPTABLES\" -A OUTPUT -m state --state NEW -p tcp --dport \"$SSHPORT\" -j ACCEPT\n\n# Allow outgoing FTP requests. Unencrypted, use with care.\n\"$IPTABLES\" -A OUTPUT -m state --state NEW -p tcp --dport 21 -j ACCEPT\n\n# Allow outgoing NNTP requests. Unencrypted, use with care.\n# \"$IPTABLES\" -A OUTPUT -m state --state NEW -p tcp --dport 119 -j ACCEPT\n\n# Allow outgoing NTP requests. Unencrypted, use with care.\n# \"$IPTABLES\" -A OUTPUT -m state --state NEW -p udp --dport 123 -j ACCEPT\n\n# Allow outgoing IRC requests. Unencrypted, use with care.\n# Note: This usually needs the ip_conntrack_irc kernel module.\n# \"$IPTABLES\" -A OUTPUT -m state --state NEW -p tcp --dport 6667 -j ACCEPT\n\n# Allow outgoing requests to various proxies. Unencrypted, use with care.\n# \"$IPTABLES\" -A OUTPUT -m state --state NEW -p tcp --dport 8080 -j ACCEPT\n# \"$IPTABLES\" -A OUTPUT -m state --state NEW -p tcp --dport 8090 -j ACCEPT\n\n# Allow outgoing DHCP requests. Unencrypted, use with care.\n# TODO: This is completely untested, I have no idea whether it works!\n# TODO: I think this can be tightened a bit more.\n\"$IPTABLES\" -A OUTPUT -m state --state NEW -p udp --sport 67:68 --dport 67:68 -j ACCEPT\n\n# Allow outgoing CVS requests. Unencrypted, use with care.\n# \"$IPTABLES\" -A OUTPUT -m state --state NEW -p tcp --dport 2401 -j ACCEPT\n\n# Allow outgoing MySQL requests. Unencrypted, use with care.\n# \"$IPTABLES\" -A OUTPUT -m state --state NEW -p tcp --dport 3306 -j ACCEPT\n\n# Allow outgoing SVN requests. Unencrypted, use with care.\n# \"$IPTABLES\" -A OUTPUT -m state --state NEW -p tcp --dport 3690 -j ACCEPT\n\n# Allow outgoing PLESK requests. Unencrypted, use with care.\n# \"$IPTABLES\" -A OUTPUT -m state --state NEW -p tcp --dport 8443 -j ACCEPT\n\n# Allow outgoing Tor (http://tor.eff.org) requests.\n# Note: Do _not_ use unencrypted protocols over Tor (sniffing is possible)!\n# \"$IPTABLES\" -A OUTPUT -m state --state NEW -p tcp --dport 9001 -j ACCEPT\n# \"$IPTABLES\" -A OUTPUT -m state --state NEW -p tcp --dport 9002 -j ACCEPT\n# \"$IPTABLES\" -A OUTPUT -m state --state NEW -p tcp --dport 9030 -j ACCEPT\n# \"$IPTABLES\" -A OUTPUT -m state --state NEW -p tcp --dport 9031 -j ACCEPT\n# \"$IPTABLES\" -A OUTPUT -m state --state NEW -p tcp --dport 9090 -j ACCEPT\n# \"$IPTABLES\" -A OUTPUT -m state --state NEW -p tcp --dport 9091 -j ACCEPT\n\n# Allow outgoing OpenVPN requests.\n\"$IPTABLES\" -A OUTPUT -m state --state NEW -p udp --dport 1194 -j ACCEPT\n\n# TODO: ICQ, MSN, GTalk, Skype, Yahoo, etc...\n\n# Selectively allow certain inbound connections, block the rest.\n#------------------------------------------------------------------------------\n\n# Allow incoming DNS requests.\n\"$IPTABLES\" -A INPUT -m state --state NEW -p udp --dport 53 -j ACCEPT\n\"$IPTABLES\" -A INPUT -m state --state NEW -p tcp --dport 53 -j ACCEPT\n\n# Allow incoming HTTP requests.\n\"$IPTABLES\" -A INPUT -m state --state NEW -p tcp --dport 80 -j ACCEPT\n\n# Allow incoming HTTPS requests.\n\"$IPTABLES\" -A INPUT -m state --state NEW -p tcp --dport 443 -j ACCEPT\n\n# Allow incoming POP3 requests.\n\"$IPTABLES\" -A INPUT -m state --state NEW -p tcp --dport 110 -j ACCEPT\n\n# Allow incoming IMAP4 requests.\n\"$IPTABLES\" -A INPUT -m state --state NEW -p tcp --dport 143 -j ACCEPT\n\n# Allow incoming POP3S requests.\n\"$IPTABLES\" -A INPUT -m state --state NEW -p tcp --dport 995 -j ACCEPT\n\n# Allow incoming SMTP requests.\n\"$IPTABLES\" -A INPUT -m state --state NEW -p tcp --dport 25 -j ACCEPT\n\n# Allow incoming SSH requests.\n\"$IPTABLES\" -A INPUT -m state --state NEW -p tcp --dport \"$SSHPORT\" -j ACCEPT\n\n# Allow incoming FTP requests.\n\"$IPTABLES\" -A INPUT -m state --state NEW -p tcp --dport 21 -j ACCEPT\n\n# Allow incoming NNTP requests.\n# \"$IPTABLES\" -A INPUT -m state --state NEW -p tcp --dport 119 -j ACCEPT\n\n# Allow incoming MySQL requests.\n# \"$IPTABLES\" -A INPUT -m state --state NEW -p tcp --dport 3306 -j ACCEPT\n\n# Allow incoming PLESK requests.\n# \"$IPTABLES\" -A INPUT -m state --state NEW -p tcp --dport 8843 -j ACCEPT\n\n# Allow incoming BitTorrent requests.\n# TODO: Are these already handled by ACCEPTing established/related traffic?\n# \"$IPTABLES\" -A INPUT -m state --state NEW -p tcp --dport 6881 -j ACCEPT\n# \"$IPTABLES\" -A INPUT -m state --state NEW -p udp --dport 6881 -j ACCEPT\n\n# Allow incoming nc requests.\n# \"$IPTABLES\" -A INPUT -m state --state NEW -p tcp --dport 2030 -j ACCEPT\n# \"$IPTABLES\" -A INPUT -m state --state NEW -p udp --dport 2030 -j ACCEPT\n\n# Explicitly log and reject everything else.\n#------------------------------------------------------------------------------\n\n# Use REJECT instead of REJECTLOG if you don't need/want logging.\n\"$IPTABLES\" -A INPUT -j REJECTLOG\n\"$IPTABLES\" -A OUTPUT -j REJECTLOG\n\"$IPTABLES\" -A FORWARD -j REJECTLOG\n\n#------------------------------------------------------------------------------\n# Testing the firewall.\n#------------------------------------------------------------------------------\n\n# You should check/test that the firewall really works, using\n# iptables -vnL, nmap, ping, telnet, ...\n\n# Appending rules : Let’s add some more IPv6 rules to our firewall.\n\nsudo ip6tables -A INPUT -p tcp --dport \"$SSHPORT\" -s HOST_IPV6_IP -j ACCEPT\nsudo ip6tables -A INPUT -p tcp --dport 80 -j ACCEPT\nsudo ip6tables -A INPUT -p tcp --dport 21 -j ACCEPT\nsudo ip6tables -A INPUT -p tcp --dport 25 -j ACCEPT\n\n# To see the IPv6 rules with line numbers, type the following command:\n\nsudo ip6tables -L -n --line-numbers\n\n# Deleting rules\n\nsudo ip6tables -D INPUT -p tcp --dport 21 -j ACCEPT\n\n# Exit gracefully.\n#------------------------------------------------------------------------------\n\nexit 0\n"
        },
        {
          "name": "upload",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}