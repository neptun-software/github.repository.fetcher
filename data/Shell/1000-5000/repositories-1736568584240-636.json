{
  "metadata": {
    "timestamp": 1736568584240,
    "page": 636,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYzOQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "arloor/iptablesUtils",
      "stars": 1461,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.009765625,
          "content": ".idea\n\n*IP"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.8115234375,
          "content": "# 利用iptables设置端口转发的shell脚本\n\n## 项目作用\n\n1. 便捷地设置iptables流量转发规则\n2. 当域名解析的地址发生变化时，自动更新流量转发规则，不需要手动变更（适用于ddns域名）\n\n## 用法\n\n**国内机器使用**\n\n> 通过Github Proxy加速下载\n\n```shell\nbash <(curl -fsSL https://us.arloor.dev/https://raw.githubusercontent.com/arloor/iptablesUtils/master/natcfg.sh)\n```\n\n**国外机器使用**\n\n```\nbash <(curl -fsSL https://raw.githubusercontent.com/arloor/iptablesUtils/master/natcfg.sh)\n```\n\n### 输出如下：\n\n```\n#############################################################\n# Usage: setup iptables nat rules for domian/ip             #\n# Website:  http://www.arloor.com/                          #\n# Author: ARLOOR <admin@arloor.com>                         #\n# Github: https://github.com/arloor/iptablesUtils           #\n#############################################################\n\n你要做什么呢（请输入数字）？Ctrl+C 退出本脚本\n1) 增加转发规则          3) 列出所有转发规则\n2) 删除转发规则          4) 查看当前iptables配置\n#?\n```\n\n此时按照需要，输入1-4中的任意数字，然后按照提示即可。`Ctrl+C` 退出本脚本\n\n## 卸载\n\n**国内机器使用**\n\n> 通过Github Proxy加速下载\n\n```shell\nbash <(curl -SsLf https://us.arloor.dev/https://raw.githubusercontent.com/arloor/iptablesUtils/master/dnat-uninstall.sh)\n```\n\n**国外机器使用**\n\n```shell\nbash <(curl -SsLf https://raw.githubusercontent.com/arloor/iptablesUtils/master/dnat-uninstall.sh)\n```\n\n## 查看日志\n\n```shell\njournalctl -exu dnat\n```\n\n## 配置文件备份和导入导出\n\n配置文件在\n\n```shell\n/etc/dnat/conf\n```\n\n## trojan转发\n\n总是有人说，不能转发trojan，这么说的人大部分是证书配置不对。最简单的解决方案是：客户端选择不验证证书。复杂一点是自己把证书和中转机的域名搭配好。\n\n小白记住一句话就好：客户端不验证证书。\n\n-----------------------------------------------------------------------------\n\n## 推荐新项目——使用nftables实现nat转发\n\niptables的后继者nftables已经在debain和centos最新的操作系统中作为生产工具提供，nftables提供了很多新的特性，解决了iptables很多痛点。\n\n因此创建了一个新的项目[/arloor/nftables-nat-rust](https://github.com/arloor/nftables-nat-rust)。该项目使用nftables作为nat转发实现，相比本项目具有如下优点：\n\n1. 支持端口段转发\n2. 转发规则使用配置文件，可以进行备份以及导入\n3. 更加现代\n\n所以**强烈推荐**使用[/arloor/nftables-nat-rust](https://github.com/arloor/nftables-nat-rust)。不用担心，本项目依然可以正常稳定使用。\n\nPS: 新旧两个项目并不兼容，切换到新项目时，请先卸载此项目\n\n\n"
        },
        {
          "name": "dnat-uninstall.sh",
          "type": "blob",
          "size": 0.12890625,
          "content": "#! /bin/bash\n\nbase=/etc/dnat\nsystemctl disable --now dnat\nrm -rf $base\niptables -t nat -F PREROUTING\niptables -t nat -F POSTROUTING\n"
        },
        {
          "name": "natcfg.sh",
          "type": "blob",
          "size": 9.1923828125,
          "content": "red=\"\\033[31m\"\nblack=\"\\033[0m\"\n\nbase=/etc/dnat\nmkdir $base 2>/dev/null\nconf=$base/conf\ntouch $conf\n\n# wget wget --no-check-certificate -qO natcfg.sh http://blog.arloor.com/sh/iptablesUtils/natcfg.sh && bash natcfg.sh\n\n    clear\n    echo \"#############################################################\"\n    echo \"# Usage: setup iptables nat rules for domian/ip             #\"\n    echo \"# Website:  http://www.arloor.com/                          #\"\n    echo \"# Author: ARLOOR <admin@arloor.com>                         #\"\n    echo \"# Github: https://github.com/arloor/iptablesUtils           #\"\n    echo \"#############################################################\"\n    echo\n\n\nsetupService(){\n    cat > /usr/local/bin/dnat.sh <<\"AAAA\"\n#! /bin/bash\n[[ \"$EUID\" -ne '0' ]] && echo \"Error:This script must be run as root!\" && exit 1;\n\n\n\nbase=/etc/dnat\nmkdir $base 2>/dev/null\nconf=$base/conf\nfirstAfterBoot=1\nlastConfig=\"/iptables_nat.sh\"\nlastConfigTmp=\"/iptables_nat.sh_tmp\"\n\n\n####\necho \"正在安装依赖....\"\nyum install -y bind-utils &> /dev/null\napt install -y dnsutils &> /dev/null\necho \"Completed：依赖安装完毕\"\necho \"\"\n####\nturnOnNat(){\n    # 开启端口转发\n    echo \"1. 端口转发开启  【成功】\"\n    sed -n '/^net.ipv4.ip_forward=1/'p /etc/sysctl.conf | grep -q \"net.ipv4.ip_forward=1\"\n    if [ $? -ne 0 ]; then\n        echo -e \"net.ipv4.ip_forward=1\" >> /etc/sysctl.conf && sysctl -p\n    fi\n\n    #开放FORWARD链\n    echo \"2. 开放iptbales中的FORWARD链  【成功】\"\n    arr1=(`iptables -L FORWARD -n  --line-number |grep \"REJECT\"|grep \"0.0.0.0/0\"|sort -r|awk '{print $1,$2,$5}'|tr \" \" \":\"|tr \"\\n\" \" \"`)  #16:REJECT:0.0.0.0/0 15:REJECT:0.0.0.0/0\n    for cell in ${arr1[@]}\n    do\n        arr2=(`echo $cell|tr \":\" \" \"`)  #arr2=16 REJECT 0.0.0.0/0\n        index=${arr2[0]}\n        echo 删除禁止FOWARD的规则$index\n        iptables -D FORWARD $index\n    done\n    iptables --policy FORWARD ACCEPT\n}\nturnOnNat\n\n\n\ntestVars(){\n    local localport=$1\n    local remotehost=$2\n    local remoteport=$3\n    # 判断端口是否为数字\n    local valid=\n    echo \"$localport\"|[ -n \"`sed -n '/^[0-9][0-9]*$/p'`\" ] && echo $remoteport |[ -n \"`sed -n '/^[0-9][0-9]*$/p'`\" ]||{\n       echo  -e \"${red}本地端口和目标端口请输入数字！！${black}\";\n       return 1;\n    }\n}\n\ndnat(){\n     [ \"$#\" = \"3\" ]&&{\n        local localport=$1\n        local remote=$2\n        local remoteport=$3\n\n        cat >> $lastConfigTmp <<EOF\niptables -t nat -A PREROUTING -p tcp --dport $localport -j DNAT --to-destination $remote:$remoteport\niptables -t nat -A PREROUTING -p udp --dport $localport -j DNAT --to-destination $remote:$remoteport\niptables -t nat -A POSTROUTING -p tcp -d $remote --dport $remoteport -j SNAT --to-source $localIP\niptables -t nat -A POSTROUTING -p udp -d $remote --dport $remoteport -j SNAT --to-source $localIP\nEOF\n    }\n}\n\ndnatIfNeed(){\n  [ \"$#\" = \"3\" ]&&{\n    local needNat=0\n    # 如果已经是ip\n    if [ \"$(echo  $2 |grep -E -o '([0-9]{1,3}[\\.]){3}[0-9]{1,3}')\" != \"\" ];then\n        local remote=$2\n    else\n        local remote=$(host -t a  $2|grep -E -o \"([0-9]{1,3}[\\.]){3}[0-9]{1,3}\"|head -1)\n    fi\n\n    if [ \"$remote\" = \"\" ];then\n            echo Warn:解析失败\n          return 1;\n     fi\n  }||{\n      echo \"Error: host命令缺失或传递的参数数量有误\"\n      return 1;\n  }\n    echo $remote >$base/${1}IP\n    dnat $1 $remote $3\n}\n\n\necho \"3. 开始监听域名解析变化\"\necho \"\"\nwhile true ;\ndo\n## 获取本机地址\nlocalIP=$(ip -o -4 addr list | grep -Ev '\\s(docker|lo)' | awk '{print $4}' | cut -d/ -f1 | grep -Ev '(^127\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$)|(^10\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$)|(^172\\.1[6-9]{1}[0-9]{0,1}\\.[0-9]{1,3}\\.[0-9]{1,3}$)|(^172\\.2[0-9]{1}[0-9]{0,1}\\.[0-9]{1,3}\\.[0-9]{1,3}$)|(^172\\.3[0-1]{1}[0-9]{0,1}\\.[0-9]{1,3}\\.[0-9]{1,3}$)|(^192\\.168\\.[0-9]{1,3}\\.[0-9]{1,3}$)')\nif [ \"${localIP}\" = \"\" ]; then\n        localIP=$(ip -o -4 addr list | grep -Ev '\\s(docker|lo)' | awk '{print $4}' | cut -d/ -f1|head -n 1 )\nfi\necho  \"本机网卡IP [$localIP]\"\ncat > $lastConfigTmp <<EOF\niptables -t nat -F PREROUTING\niptables -t nat -F POSTROUTING\nEOF\narr1=(`cat $conf`)\nfor cell in ${arr1[@]}\ndo\n    arr2=(`echo $cell|tr \":\" \" \"|tr \">\" \" \"`)  #arr2=16 REJECT 0.0.0.0/0\n    # 过滤非法的行\n    [ \"${arr2[2]}\" != \"\" -a \"${arr2[3]}\" = \"\" ]&& testVars ${arr2[0]}  ${arr2[1]} ${arr2[2]}&&{\n        echo \"转发规则： ${arr2[0]} => ${arr2[1]}:${arr2[2]}\"\n        dnatIfNeed ${arr2[0]} ${arr2[1]} ${arr2[2]}\n    }\ndone\n\nlastConfigTmpStr=`cat $lastConfigTmp`\nlastConfigStr=`cat $lastConfig`\nif [ \"$firstAfterBoot\" = \"1\" -o \"$lastConfigTmpStr\" != \"$lastConfigStr\" ];then\n    echo '更新iptables规则[DOING]'\n    source $lastConfigTmp\n    cat $lastConfigTmp > $lastConfig\n    echo '更新iptables规则[DONE]，新规则如下：'\n    echo \"###########################################################\"\n    iptables -L PREROUTING -n -t nat --line-number\n    iptables -L POSTROUTING -n -t nat --line-number\n    echo \"###########################################################\"\nelse\n echo \"iptables规则未变更\"\nfi\n\nfirstAfterBoot=0\necho '' > $lastConfigTmp\nsleep 60\necho ''\necho ''\necho ''\ndone    \nAAAA\necho \n\n\ncat > /lib/systemd/system/dnat.service <<\\EOF\n[Unit]\nDescription=动态设置iptables转发规则\nAfter=network-online.target\nWants=network-online.target\n\n[Service]\nWorkingDirectory=/root/\nEnvironmentFile=\nExecStart=/bin/bash /usr/local/bin/dnat.sh\nRestart=always\nRestartSec=30\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsystemctl daemon-reload\nsystemctl enable dnat > /dev/null 2>&1\nservice dnat stop > /dev/null 2>&1\nservice dnat start > /dev/null 2>&1\n}\n\n\n## 获取本机地址\nlocalIP=$(ip -o -4 addr list | grep -Ev '\\s(docker|lo)' | awk '{print $4}' | cut -d/ -f1 | grep -Ev '(^127\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$)|(^10\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$)|(^172\\.1[6-9]{1}[0-9]{0,1}\\.[0-9]{1,3}\\.[0-9]{1,3}$)|(^172\\.2[0-9]{1}[0-9]{0,1}\\.[0-9]{1,3}\\.[0-9]{1,3}$)|(^172\\.3[0-1]{1}[0-9]{0,1}\\.[0-9]{1,3}\\.[0-9]{1,3}$)|(^192\\.168\\.[0-9]{1,3}\\.[0-9]{1,3}$)')\nif [ \"${localIP}\" = \"\" ]; then\n        localIP=$(ip -o -4 addr list | grep -Ev '\\s(docker|lo)' | awk '{print $4}' | cut -d/ -f1|head -n 1 )\nfi\n\n\naddDnat(){\n    local localport=\n    local remoteport=\n    local remotehost=\n    local valid=\n    echo -n \"本地端口号:\" ;read localport\n    echo -n \"远程端口号:\" ;read remoteport\n    # echo $localport $remoteport\n    # 判断端口是否为数字\n    echo \"$localport\"|[ -n \"`sed -n '/^[0-9][0-9]*$/p'`\" ] && echo $remoteport |[ -n \"`sed -n '/^[0-9][0-9]*$/p'`\" ]||{\n        echo  -e \"${red}本地端口和目标端口请输入数字！！${black}\"\n        return 1;\n    }\n\n    echo -n \"目标域名/IP:\" ;read remotehost\n    # # 检查输入的不是IP\n    # if [ \"$remotehost\" = \"\" -o \"$(echo  $remotehost |grep -E -o '([0-9]{1,3}[\\.]){3}[0-9]{1,3}')\" != \"\" ];then\n    #     isip=true\n    #     remote=$remotehost\n    #     echo -e \"${red}请输入一个ddns域名${black}\"\n    #     return 1\n    # fi\n\n    sed -i \"s/^$localport.*/$localport>$remotehost:$remoteport/g\" $conf\n    [ \"$(cat $conf|grep \"$localport>$remotehost:$remoteport\")\" = \"\" ]&&{\n            cat >> $conf <<LINE\n$localport>$remotehost:$remoteport\nLINE\n    }\n    echo \"成功添加转发规则 $localport>$remotehost:$remoteport\"\n    setupService\n}\n\nrmDnat(){\n    local localport=\n    echo -n \"本地端口号:\" ;read localport\n    sed -i \"/^$localport>.*/d\" $conf\n    echo \"done!\"\n}\n\ntestVars(){\n    local localport=$1\n    local remotehost=$2\n    local remoteport=$3\n    # 判断端口是否为数字\n    local valid=\n    echo \"$localport\"|[ -n \"`sed -n '/^[0-9][0-9]*$/p'`\" ] && echo $remoteport |[ -n \"`sed -n '/^[0-9][0-9]*$/p'`\" ]||{\n       # echo  -e \"${red}本地端口和目标端口请输入数字！！${black}\";\n       return 1;\n    }\n\n    # # 检查输入的不是IP\n    # if [ \"$(echo  $remotehost |grep -E -o '([0-9]{1,3}[\\.]){3}[0-9]{1,3}')\" != \"\" ];then\n    #     local isip=true\n    #     local remote=$remotehost\n\n    #     # echo -e \"${red}警告：你输入的目标地址是一个ip!${black}\"\n    #     return 2;\n    # fi\n}\n\nlsDnat(){\n    arr1=(`cat $conf`)\nfor cell in ${arr1[@]}  \ndo\n    arr2=(`echo $cell|tr \":\" \" \"|tr \">\" \" \"`)  #arr2=16 REJECT 0.0.0.0/0\n    # 过滤非法的行\n    [ \"${arr2[2]}\" != \"\" -a \"${arr2[3]}\" = \"\" ]&& testVars ${arr2[0]}  ${arr2[1]} ${arr2[2]}&&{\n        echo \"转发规则： ${arr2[0]}>${arr2[1]}:${arr2[2]}\"\n    }\ndone\n}\n\n\n\n\necho  -e \"${red}你要做什么呢（请输入数字）？Ctrl+C 退出本脚本${black}\"\nselect todo in 增加转发规则 删除转发规则 列出所有转发规则 查看当前iptables配置\ndo\n    case $todo in\n    增加转发规则)\n        addDnat\n        #break\n        ;;\n    删除转发规则)\n        rmDnat\n        #break\n        ;;\n    # 增加到IP的转发)\n    #     addSnat\n    #     #break\n    #     ;;\n    # 删除到IP的转发)\n    #     rmSnat\n    #     #break\n    #     ;;\n    列出所有转发规则)\n        lsDnat\n        ;;\n    查看当前iptables配置)\n        echo \"###########################################################\"\n        iptables -L PREROUTING -n -t nat --line-number\n        iptables -L POSTROUTING -n -t nat --line-number\n        echo \"###########################################################\"\n        ;;\n    *)\n        echo \"如果要退出，请按Ctrl+C\"\n        ;;\n    esac\ndone\n"
        },
        {
          "name": "wechat_shoukuan.jpg",
          "type": "blob",
          "size": 92.1591796875,
          "content": null
        }
      ]
    }
  ]
}