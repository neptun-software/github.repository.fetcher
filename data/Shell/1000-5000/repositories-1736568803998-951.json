{
  "metadata": {
    "timestamp": 1736568803998,
    "page": 951,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk1OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "sameersbn/docker-postgresql",
      "stars": 1056,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0634765625,
          "content": "/.git/\n/.github/\nLICENSE\nVERSION\nREADME.md\nChangelog.md\nMakefile\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "Changelog.md",
          "type": "blob",
          "size": 1.65625,
          "content": "# Changelog\n\n**9.6**\n- postgresql: upgrade to 9.6\n- upgrade baseimage to sameersbn/ubuntu:14.04.20170110\n\n**9.5**\n- postgresql: upgrade to 9.5\n\n**9.4-17**\n- added `DB_EXTENSION` configuration parameter\n\n**9.4-12**\n- removed use of single-user mode\n- added `DB_TEMPLATE` variable to specify the database template\n\n**9.4-11**\n- added `PG_PASSWORD` variable to specify password for `postgres` user\n\n**9.4-9**\n- complete rewrite\n- `PSQL_TRUST_LOCALNET` config parameter renamed to `PG_TRUST_LOCALNET`\n- `PSQL_MODE` config parameter renamed to `REPLICATION_MODE`\n- `PSQL_SSLMODE` config parameter renamed to `REPLICATION_SSLMODE`\n- defined `/etc/postgresql/certs` as the mountpoint to install SSL key and certificate\n- added `PG_SSL` parameter to enable/disable SSL support\n- `DB_LOCALE` config parameter renamed to `PG_LOCALE`\n- complete rewrite of the README\n- add support for creating backups using `pg_basebackup`\n- removed `PG_LOCALE` option (doesn't work!)\n- added `DEBUG` option to enable bash debugging\n\n**9.4-2**\n- added replication options\n\n**9.4-1**\n- start: removed `pwfile` logic\n- init: added `USERMAP_*` configuration options\n- base image update to fix SSL vulnerability\n\n**9.4**\n- postgresql: upgrade to 9.4\n\n**9.1-2**\n- use the official postgresql apt repo\n- feature: automatic data migration on upgrade\n\n**9.1-1**\n- upgrade to sameersbn/ubuntu:20141001, fixes shellshock\n- support creation of users and databases at launch (`docker run`)\n- mount volume at `/var/run/postgresql` allowing the postgresql unix socket to be exposed\n\n**9.1**\n- optimized image size by removing `/var/lib/apt/lists/*`.\n- update to the sameersbn/ubuntu:12.04.20140818 baseimage\n- removed use of supervisord\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.677734375,
          "content": "FROM ubuntu:jammy-20230605 AS add-apt-repositories\n\nRUN apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y wget gnupg \\\n && wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - \\\n && echo 'deb http://apt.postgresql.org/pub/repos/apt/ jammy-pgdg main' >> /etc/apt/sources.list\n\nFROM ubuntu:jammy-20230605\n\nLABEL maintainer=\"sameer@damagehead.com\"\n\nENV PG_APP_HOME=\"/etc/docker-postgresql\" \\\n    PG_VERSION=15 \\\n    PG_USER=postgres \\\n    PG_HOME=/var/lib/postgresql \\\n    PG_RUNDIR=/run/postgresql \\\n    PG_LOGDIR=/var/log/postgresql \\\n    PG_CERTDIR=/etc/postgresql/certs\n\nENV PG_BINDIR=/usr/lib/postgresql/${PG_VERSION}/bin \\\n    PG_DATADIR=${PG_HOME}/${PG_VERSION}/main\n\nCOPY --from=add-apt-repositories /etc/apt/trusted.gpg /etc/apt/trusted.gpg\n\nCOPY --from=add-apt-repositories /etc/apt/sources.list /etc/apt/sources.list\n\nRUN apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y acl sudo locales \\\n      postgresql-${PG_VERSION} postgresql-client-${PG_VERSION} postgresql-contrib-${PG_VERSION} \\\n && update-locale LANG=C.UTF-8 LC_MESSAGES=POSIX \\\n && locale-gen en_US.UTF-8 \\\n && DEBIAN_FRONTEND=noninteractive dpkg-reconfigure locales \\\n && ln -sf ${PG_DATADIR}/postgresql.conf /etc/postgresql/${PG_VERSION}/main/postgresql.conf \\\n && ln -sf ${PG_DATADIR}/pg_hba.conf /etc/postgresql/${PG_VERSION}/main/pg_hba.conf \\\n && ln -sf ${PG_DATADIR}/pg_ident.conf /etc/postgresql/${PG_VERSION}/main/pg_ident.conf \\\n && rm -rf ${PG_HOME} \\\n && rm -rf /var/lib/apt/lists/*\n\nCOPY runtime/ ${PG_APP_HOME}/\n\nCOPY entrypoint.sh /sbin/entrypoint.sh\n\nRUN chmod 755 /sbin/entrypoint.sh\n\nEXPOSE 5432/tcp\n\nWORKDIR ${PG_HOME}\n\nENTRYPOINT [\"/sbin/entrypoint.sh\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.052734375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2014 Sameer Naik\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.140625,
          "content": "all: build\n\nbuild:\n\t@docker build --tag=sameersbn/postgresql .\n\nrelease: build\n\t@docker build --tag=sameersbn/postgresql:$(shell cat VERSION) .\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 15.890625,
          "content": "# sameersbn/postgresql:15-20230628\n\n- [Introduction](#introduction)\n  - [Contributing](#contributing)\n  - [Issues](#issues)\n- [Getting started](#getting-started)\n  - [Installation](#installation)\n  - [Quickstart](#quickstart)\n  - [Persistence](#persistence)\n  - [Trusting local connections](#trusting-local-connections)\n  - [Setting `postgres` user password](#setting-postgres-user-password)\n  - [Creating database user](#creating-database-user)\n  - [Creating databases](#creating-databases)\n  - [Granting user access to a database](#granting-user-access-to-a-database)\n  - [Enabling extensions](#enabling-extensions)\n  - [Creating replication user](#creating-replication-user)\n  - [Setting up a replication cluster](#setting-up-a-replication-cluster)\n  - [Creating a snapshot](#creating-a-snapshot)\n  - [Creating a backup](#creating-a-backup)\n  - [Command-line arguments](#command-line-arguments)\n  - [Logs](#logs)\n  - [UID/GID mapping](#uidgid-mapping)\n- [Maintenance](#maintenance)\n  - [Upgrading](#upgrading)\n  - [Shell Access](#shell-access)\n\n# Introduction\n\n`Dockerfile` to create a [Docker](https://www.docker.com/) container image for [PostgreSQL](http://postgresql.org/).\n\nPostgreSQL is an object-relational database management system (ORDBMS) with an emphasis on extensibility and standards-compliance [[source](https://en.wikipedia.org/wiki/PostgreSQL)].\n\n## Contributing\n\nIf you find this image useful here's how you can help:\n\n- Send a pull request with your awesome features and bug fixes\n- Help users resolve their [issues](../../issues?q=is%3Aopen+is%3Aissue).\n- Support the development of this image with a [donation](http://www.damagehead.com/donate/)\n\n## Issues\n\nBefore reporting your issue please try updating Docker to the latest version and check if it resolves the issue. Refer to the Docker [installation guide](https://docs.docker.com/installation) for instructions.\n\nSELinux users should try disabling SELinux using the command `setenforce 0` to see if it resolves the issue.\n\nIf the above recommendations do not help then [report your issue](../../issues/new) along with the following information:\n\n- Output of the `docker vers6` and `docker info` commands\n- The `docker run` command or `docker-compose.yml` used to start the image. Mask out the sensitive bits.\n- Please state if you are using [Boot2Docker](http://www.boot2docker.io), [VirtualBox](https://www.virtualbox.org), etc.\n\n# Getting started\n\n## Installation\n\nAutomated builds of the image are available on [Dockerhub](https://hub.docker.com/r/sameersbn/postgresql) and is the recommended method of installation.\n\n> **Note**: Builds are also available on [Quay.io](https://quay.io/repository/sameersbn/postgresql)\n\n```bash\ndocker pull sameersbn/postgresql:15-20230628\n```\n\nAlternatively you can build the image yourself.\n\n```bash\ndocker build -t sameersbn/postgresql github.com/sameersbn/docker-postgresql\n```\n\n## Quickstart\n\nStart PostgreSQL using:\n\n```bash\ndocker run --name postgresql -itd --restart always \\\n  --publish 5432:5432 \\\n  --volume postgresql:/var/lib/postgresql \\\n  sameersbn/postgresql:15-20230628\n```\n\nLogin to the PostgreSQL server using:\n\n```bash\ndocker exec -it postgresql sudo -u postgres psql\n```\n\n*Alternatively, you can use the sample [docker-compose.yml](docker-compose.yml) file to start the container using [Docker Compose](https://docs.docker.com/compose/)*\n\n## Persistence\n\nFor PostgreSQL to preserve its state across container shutdown and startup you should mount a volume at `/var/lib/postgresql`. If you don't like the default volume destination then you can change it\n\n> *The [Quickstart](#quickstart) command already mounts a volume for persistence.*\n\nSELinux users should update the security context of the host mountpoint so that it plays nicely with Docker:\n\n```bash\nmkdir -p /srv/docker/postgresql\nchcon -Rt svirt_sandbox_file_t /srv/docker/postgresql\n```\n\n## Trusting local connections\n\nBy default connections to the PostgreSQL server need to authenticated using a password. If desired you can trust connections from the local network using the `PG_TRUST_LOCALNET` variable.\n\n```bash\ndocker run --name postgresql -itd --restart always \\\n  --env 'PG_TRUST_LOCALNET=true' \\\n  sameersbn/postgresql:15-20230628\n```\n\n> **Note**\n>\n> The local network here is network to which the container is attached. This has different meanings depending on the `--net` parameter specified while starting the container. In the default configuration, this parameter would trust connections from other containers on the `docker0` bridge.\n\n## Setting `postgres` user password\n\nBy default the `postgres` user is not assigned a password and as a result you can only login to the PostgreSQL server locally. If you wish to login remotely to the PostgreSQL server as the `postgres` user, you will need to assign a password for the user using the `PG_PASSWORD` variable.\n\n```bash\ndocker run --name postgresql -itd --restart always \\\n  --env 'PG_PASSWORD=passw0rd' \\\n  sameersbn/postgresql:15-20230628\n```\n\n\n> **Note**\n>\n> - When [persistence](#persistence) is in use, `PG_PASSWORD` is effective on the first run.\n> - This feature is only available in the `latest` and versions > `9.4-10`\n\n## Creating database user\n\nA new PostgreSQL database user can be created by specifying the `DB_USER` and `DB_PASS` variables while starting the container.\n\n```bash\ndocker run --name postgresql -itd --restart always \\\n  --env 'DB_USER=dbuser' --env 'DB_PASS=dbuserpass' \\\n  sameersbn/postgresql:15-20230628\n```\n\n> **Notes**\n>\n> - The created user can login remotely\n> - The container will error out if a password is not specified for the user\n> - No changes will be made if the user already exists\n> - Only a single user can be created at each launch\n\n## Creating databases\n\nA new PostgreSQL database can be created by specifying the `DB_NAME` variable while starting the container.\n\n```bash\ndocker run --name postgresql -itd --restart always \\\n  --env 'DB_NAME=dbname' \\\n  sameersbn/postgresql:15-20230628\n```\n\nBy default databases are created by copying the standard system database named `template1`. You can specify a different template for your database using the `DB_TEMPLATE` parameter. Refer to [Template Databases](http://www.postgresql.org/docs/9.4/static/manage-ag-templatedbs.html) for further information.\n\nAdditionally, more than one database can be created by specifying a comma separated list of database names in `DB_NAME`. For example, the following command creates two new databases named `dbname1` and `dbname2`.\n\n*This feature is only available in releases greater than `9.1-1`*\n\n```bash\ndocker run --name postgresql -itd --restart always \\\n  --env 'DB_NAME=dbname1,dbname2' \\\n  sameersbn/postgresql:15-20230628\n```\n\n## Granting user access to a database\n\nIf the `DB_USER` and `DB_PASS` variables are specified along with the `DB_NAME` variable, then the user specified in `DB_USER` will be granted access to all the databases listed in `DB_NAME`. Note that if the user and/or databases do not exist, they will be created.\n\n```bash\ndocker run --name postgresql -itd --restart always \\\n  --env 'DB_USER=dbuser' --env 'DB_PASS=dbuserpass' \\\n  --env 'DB_NAME=dbname1,dbname2' \\\n  sameersbn/postgresql:15-20230628\n```\n\nIn the above example `dbuser` with be granted access to both the `dbname1` and `dbname2` databases.\n\n# Enabling extensions\n\nThe image also packages the [postgres contrib module](http://www.postgresql.org/docs/9.4/static/contrib.html). A comma separated list of modules can be specified using the `DB_EXTENSION` parameter.\n\n```bash\ndocker run --name postgresql -itd \\\n  --env 'DB_NAME=db1,db2' --env 'DB_EXTENSION=unaccent,pg_trgm' \\\n  sameersbn/postgresql:15-20230628\n```\n\nThe above command enables the `unaccent` and `pg_trgm` modules on the databases listed in `DB_NAME`, namely `db1` and `db2`.\n\n> **NOTE**:\n>\n> This option deprecates the `DB_UNACCENT` parameter.\n\n## Creating replication user\n\nSimilar to the creation of a database user, a new PostgreSQL replication user can be created by specifying the `REPLICATION_USER` and `REPLICATION_PASS` variables while starting the container.\n\n```bash\ndocker run --name postgresql -itd --restart always \\\n  --env 'REPLICATION_USER=repluser' --env 'REPLICATION_PASS=repluserpass' \\\n  sameersbn/postgresql:15-20230628\n```\n\n> **Notes**\n>\n> - The created user can login remotely\n> - The container will error out if a password is not specified for the user\n> - No changes will be made if the user already exists\n> - Only a single user can be created at each launch\n\n*It is a good idea to create a replication user even if you are not going to use it as it will allow you to setup slave nodes and/or generate snapshots and backups when the need arises.*\n\n## Setting up a replication cluster\n\nWhen the container is started, it is by default configured to act as a master node in a replication cluster. This means that you can scale your PostgreSQL database backend when the need arises without incurring any downtime. However do note that a replication user must exist on the master node for this to work.\n\nBegin by creating the master node of our cluster:\n\n```bash\ndocker run --name postgresql-master -itd --restart always \\\n  --env 'DB_USER=dbuser' --env 'DB_PASS=dbuserpass' --env 'DB_NAME=dbname' \\\n  --env 'REPLICATION_USER=repluser' --env 'REPLICATION_PASS=repluserpass' \\\n  sameersbn/postgresql:15-20230628\n```\n\nNotice that no additional arguments are specified while starting the master node of the cluster.\n\nTo create a replication slave the `REPLICATION_MODE` variable should be set to `slave` and additionally the `REPLICATION_HOST`, `REPLICATION_PORT`, `REPLICATION_SSLMODE`, `REPLICATION_USER` and `REPLICATION_PASS` variables should be specified.\n\nCreate a slave node:\n\n```bash\ndocker run --name postgresql-slave01 -itd --restart always \\\n  --link postgresql-master:master \\\n  --env 'REPLICATION_MODE=slave' --env 'REPLICATION_SSLMODE=prefer' \\\n  --env 'REPLICATION_HOST=master' --env 'REPLICATION_PORT=5432'  \\\n  --env 'REPLICATION_USER=repluser' --env 'REPLICATION_PASS=repluserpass' \\\n  sameersbn/postgresql:15-20230628\n```\n\n*In the above command, we used docker links so that we can address the master node using the `master` alias in `REPLICATION_HOST`.*\n\n> **Note**\n>\n> - The default value of `REPLICATION_PORT` is `5432`\n> - The default value of `REPLICATION_SSLMODE` is `prefer`\n> - The value of `REPLICATION_USER` and `REPLICATION_PASS` should be the same as the ones specified on the master node.\n> - With [persistence](#persistence) in use, if the container is stopped and started, for the container continue to function as a slave you need to ensure that `REPLICATION_MODE=slave` is defined in the containers environment. In the absense of which the slave configuration will be turned off and the node will allow writing to it while having the last synced data from the master.\n\nAnd just like that with minimal effort you have a PostgreSQL replication cluster setup. You can create additional slaves to scale the cluster horizontally.\n\nHere are some important notes about a PostgreSQL replication cluster:\n\n - Writes can only occur on the master\n - Slaves are read-only\n - For best performance, limit the reads to the slave nodes\n\n## Creating a snapshot\n\nSimilar to a creating replication slave node, you can create a snapshot of the master by specifying `REPLICATION_MODE=snapshot`.\n\nOnce the master node is created as specified in [Setting up a replication cluster](#setting-up-a-replication-cluster), you can create a snapshot using:\n\n```bash\ndocker run --name postgresql-snapshot -itd --restart always \\\n  --link postgresql-master:master \\\n  --env 'REPLICATION_MODE=snapshot' --env 'REPLICATION_SSLMODE=prefer' \\\n  --env 'REPLICATION_HOST=master' --env 'REPLICATION_PORT=5432'  \\\n  --env 'REPLICATION_USER=repluser' --env 'REPLICATION_PASS=repluserpass' \\\n  sameersbn/postgresql:15-20230628\n```\n\nThe difference between a slave and a snapshot is that a slave is read-only and updated whenever the master data is updated (streaming replication), while a snapshot is read-write and is not updated after the initial snapshot of the data from the master.\n\nThis is useful for developers to quickly snapshot the current state of a live database and use it for development/debugging purposes without altering the database on the live instance.\n\n## Creating a backup\n\nJust as the case of setting up a slave node or generating a snapshot, you can also create a backup of the data on the master by specifying `REPLICATION_MODE=backup`.\n\n> The backups are generated with [pg_basebackup](http://www.postgresql.org/docs/9.4/static/app-pgbasebackup.html) using the replication protocol.\n\nOnce the master node is created as specified in [Setting up a replication cluster](#setting-up-a-replication-cluster), you can create a point-in-time backup using:\n\n```bash\ndocker run --name postgresql-backup -it --rm \\\n  --link postgresql-master:master \\\n  --env 'REPLICATION_MODE=backup' --env 'REPLICATION_SSLMODE=prefer' \\\n  --env 'REPLICATION_HOST=master' --env 'REPLICATION_PORT=5432'  \\\n  --env 'REPLICATION_USER=repluser' --env 'REPLICATION_PASS=repluserpass' \\\n  --volume /srv/docker/backups/postgresql.$(date +%Y%m%d%H%M%S):/var/lib/postgresql \\\n  sameersbn/postgresql:15-20230628\n```\n\nOnce the backup is generated, the container will exit and the backup of the master data will be available at `/srv/docker/backups/postgresql.XXXXXXXXXXXX/`. Restoring the backup involves starting a container with the data in `/srv/docker/backups/postgresql.XXXXXXXXXXXX`.\n\n## Command-line arguments\n\nYou can customize the launch command of PostgreSQL server by specifying arguments for `postgres` on the `docker run` command. For example the following command enables connection logging:\n\n```bash\ndocker run --name postgresql -itd --restart always \\\n  sameersbn/postgresql:15-20230628 -c log_connections=on\n```\n\nPlease refer to the documentation of [postgres](http://www.postgresql.org/docs/9.4/static/app-postgres.html) for the complete list of available options.\n\n## Logs\n\nBy default the PostgreSQL server logs are sent to the standard output. Using the [Command-line arguments](#command-line-arguments) feature you can configure the PostgreSQL server to send the log output to a file using the `-c logging_collector=on` argument:\n\n```bash\ndocker run --name postgresql -itd --restart always \\\n  sameersbn/postgresql:15-20230628 -c logging_collector=on\n```\n\nTo access the PostgreSQL logs you can use `docker exec`. For example:\n\n```bash\ndocker exec -it postgresql tail -f /var/log/postgresql/postgresql-9.4-main.log\n```\n\n# UID/GID mapping\n\nThe files and processes created by the container are owned by the `postgres` user that is internal to the container. In the absense of user namespace in docker the UID and GID of the containers `postgres` user may have different meaning on the host.\n\nFor example, a user on the host with the same UID and/or GID as the `postgres` user of the container will be able to access the data in the persistent volumes mounted from the host as well as be able to KILL the `postgres` server process started by the container.\n\nTo circumvent this issue you can specify the UID and GID for the `postgres` user of the container using the `USERMAP_UID` and `USERMAP_GID` variables respectively.\n\nFor example, if you want to assign the `postgres` user of the container the UID and GID `999`:\n\n```bash\ndocker run --name postgresql -itd --restart always \\\n  --env 'USERMAP_UID=999' --env 'USERMAP_GID=999' \\\n  sameersbn/postgresql:15-20230628\n```\n\n# Maintenance\n\n## Upgrading\n\nTo upgrade to newer releases:\n\n  1. Download the updated Docker image:\n\n  ```bash\n  docker pull sameersbn/postgresql:15-20230628\n  ```\n\n  2. Stop the currently running image:\n\n  ```bash\n  docker stop postgresql\n  ```\n\n  3. Remove the stopped container\n\n  ```bash\n  docker rm -v postgresql\n  ```\n\n  4. Start the updated image\n\n  ```bash\n  docker run --name postgresql -itd \\\n    [OPTIONS] \\\n    sameersbn/postgresql:15-20230628\n  ```\n\n## Shell Access\n\nFor debugging and maintenance purposes you may want access the containers shell. If you are using Docker version `1.3.0` or higher you can access a running containers shell by starting `bash` using `docker exec`:\n\n```bash\ndocker exec -it postgresql bash\n```\n"
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.01171875,
          "content": "15-20230628\n"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.416015625,
          "content": "PostgreSQL:\n  restart: always\n  image: sameersbn/postgresql:15-20230628\n  ports:\n    - \"5432:5432\"\n  environment:\n    - DEBUG=false\n\n    - DB_USER=\n    - DB_PASS=\n    - DB_NAME=\n    - DB_TEMPLATE=\n\n    - DB_EXTENSION=\n\n    - REPLICATION_MODE=\n    - REPLICATION_USER=\n    - REPLICATION_PASS=\n    - REPLICATION_SSLMODE=\n  command: \"--wal_keep_segments=32 --logging_collector=off\"\n  volumes:\n    - postgresql:/var/lib/postgresql\n"
        },
        {
          "name": "entrypoint.sh",
          "type": "blob",
          "size": 0.7119140625,
          "content": "#!/bin/bash\nset -e\n\n# shellcheck source=runtime/functions\nsource \"${PG_APP_HOME}/functions\"\n\n[[ ${DEBUG} == true ]] && set -x\n\n# allow arguments to be passed to postgres\nif [[ ${1:0:1} = '-' ]]; then\n  EXTRA_ARGS=\"$@\"\n  set --\nelif [[ ${1} == postgres || ${1} == $(command -v postgres) ]]; then\n  EXTRA_ARGS=\"${@:2}\"\n  set --\nfi\n\n# default behaviour is to launch postgres\nif [[ -z ${1} ]]; then\n  map_uidgid\n\n  create_datadir\n  create_certdir\n  create_logdir\n  create_rundir\n\n  set_resolvconf_perms\n\n  configure_postgresql\n\n  echo \"Starting PostgreSQL ${PG_VERSION}...\"\n  exec start-stop-daemon --start --chuid \"${PG_USER}:${PG_USER}\" \\\n    --exec \"${PG_BINDIR}/postgres\" -- -D \"${PG_DATADIR}\" ${EXTRA_ARGS}\nelse\n  exec \"$@\"\nfi\n\n"
        },
        {
          "name": "runtime",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}