{
  "metadata": {
    "timestamp": 1736568422311,
    "page": 375,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM3OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ttlequals0/autovpn",
      "stars": 2008,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0673828125,
          "content": "*.pem\n*.ovpn\nrec.sh\ntest.sh\ntest.log\nregions\n.DS_Store\n.vscode\n*.bak\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.029296875,
          "content": "Copyright (c) 2016 TTLequals0\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.8515625,
          "content": "# Overview\n\nScript that allows the easy creation of OpenVPN endpoints in any AWS region.  To create a VPN endpoint is done with a single command takes ~3 minutes. It will create the proper security groups. It spins up a tagged ec2  instance  and configures OpenVPN software. Once instance is configured an OpenVPN configuration file is downloaded and ready to use. There is also functionality to see which instances are running in which region and ability to terminate the instance when done. Additional functionality includes specifying instance type, generate ssh keypairs, specify custom ami,  change login user and more to come. \n\n[![asciicast](https://asciinema.org/a/102869.png)](https://asciinema.org/a/102869)\n\nUse Case\n  * Create on demand OpenVPN Endpoints in AWS that can easily be destroyed after done\n    only pay for what you use.\n\n## Dependencies\n\n1. Create a virtualenv:\n```\nmkvirtualenv -p python3 env/\nsource env/bin/activate\n````\n\n2. Install dependencies by running `pip install -r requirements.txt`\n\n3. Ensure that you have an AWS .credentials file by running: \n```\nvi ~/.aws/credentials\n```\nThen type in the following and add your keys (remove parenthesis):\n```\n[default]\naws_access_key_id = (your_access_key_here)\naws_secret_access_key = (your_secret_key_here)\n```\n4. Install OpenVPN client (if needed)\n\n## Installation\n\n1. Ensure dependencies are all installed.\n2. Clone repo to system.\n```\ngit clone https://github.com/ttlequals0/autovpn.git\n```\n3. To create SSH keypair execute autovpn with -G and -r options for AWS region of choice. (optional)\t\n   NOTE: Make sure to add new key to your ssh-agent.\n```\n./autovpn -G -r us-east-1\n```\n4. Execute autovpn with -C -k and -r options to deploy to AWS:\n```\n./autovpn -C -r us-east-1 -k us-east-1_vpnkey\n```\n4. OpenVPN config files are downloaded to current working directory.\n5. Import the OpenVPN config file and connect:\n```\nsudo openvpn us-east-1_aws_vpn.ovpn\n```\n\n## Man page\n```\nDESCRIPTION:\n    autovpn - On Demand AWS OpenVPN Endpoint Deployment Tool.\n\tProject found at https://github.com/ttlequals0/autovpn\nUSAGE:\n        ACTION\t [OPTIONS]\n       -C    Create VPN endpoint.\n       -D    Delete keypair from region.\n       -G    Generate new keypair.\n       -S    Get all running instances in a given region.\n       -T    Terminate a OpenVPN endpoint.\n       -d    Specify custom DNS server. (ex. 4.2.2.1)\n       -h    Displays this message.\n       -i    AWS Instance type (Optional, Default is t2.micro)\n\t     t2.nano t2.micro t2.small t2.medium t2.large.**\n       -k    Specify the name of AWS keypair (Required)\n       -m    Allow multiple connections to same endpoint.\n       -r    Specify AWS Region (Required)\n\t     us-east-1 us-west-1 us-east-2 us-west-2 eu-west-1 eu-west-2\n\t     eu-west-3 eu-central-1 eu-north-1 ap-southeast-1 ap-northeast-1\n\t     ap-northeast-2 ap-northeast-3 ap-southeast-2 sa-east-1\n       ap-east-1 ca-central-1 me-south-1\n       -p    Specify custom OpenVPN UDP port\n       -u    Specify custom ssh user.***\n       -y    Skip confirmations\n       -z    Specify instance id.\nEXAMPLES:\n  Create OpenVPN endpoint:\n\tautovpn -C -r us-east-1 -k us-east-1_vpnkey\n  Generate keypair in a region.\n\tautovpn -G -r us-east-1\n  Get running instances\n\tautovpn -S -r us-east-1\n  Terminate OpenVPN endpoint\n\tautovpn -T -r us-east-1 -z i-b933e00c\n  Using custom options\n    autovpn -C -r us-east-1 -k us-east-1_vpnkey -a ami-fce3c696 -u ec2_user -i m3.medium\nNOTES:\n        * - Custom AMI may be needed if changing instance type.\n        ** - Any instance size can be given but the t2.micro is more than enough.\n        *** - Custom user might be need if using a custom ami.\n\t**** - AWS IAM user must have EC2 or Administrator permissions set.\n```\n\n## To Do\n  * Continue to update documentation\n  * Add deletion of Securoty Group if it is no longer in use.\n  * Add ability to create more client configs for one endpoint.\n  * Pull Requests are welcome.\n\n"
        },
        {
          "name": "autovpn",
          "type": "blob",
          "size": 10.7236328125,
          "content": "#!/usr/bin/env bash\n\n#Variable deceleration\nscp_options=(-o StrictHostKeyChecking=no -o NumberOfPasswordPrompts=1 -o ConnectTimeout=30 -o \"UserKnownHostsFile /dev/null\")\nuser='ubuntu'\nlocal_script=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )/scripts/openvpn-autoinstall.sh\"\nremote_script=\"\\$HOME/openvpn-autoinstall.sh\"\nrun_script=\"sudo bash ./openvpn-autoinstall.sh\"\nremote_path=\"\\$HOME/aws_vpn.ovpn\"\nexport BOTO_USE_ENDPOINT_HEURISTICS=true\n\n#Terminal colors\ngray='\\033[0m'\ngreen='\\033[00;32m'\nred='\\033[01;31m'\nwhite='\\033[01;37m'\nyellow='\\033[00;33m'\n\n# function for help output\nfunction usage {\n  # ---------------------------------------------------------------------------\n  echo -e \"${white}DESCRIPTION:\\n $gray        $(basename \"$0\") - On Demand AWS OpenVPN Endpoint Deployment Tool.\\n\\t Project found at https://github.com/ttlequals0/autovpn\"\n  echo -e \"${white}USAGE:\\n $gray [OPTIONS]\\t [ACION]\n  $white-C$gray\\t Create VPN endpoint.\n  $white-D$gray\\t Delete keypair from region.\n  $white-G$gray\\t Generate new keypair.\n  $white-S$gray\\t Get all running instances in a given region.\n  $white-T$gray\\t Terminate a OpenVPN endpoint.\n  $white-d$gray\\t Specify a custom DNS server. (ex. 4.2.2.1)\n  $white-h$gray\\t Displays this message.\n  $white-i$gray\\t AWS Instance type (Optional, Default is t2.micro)\\n\\t t2.nano t2.micro t2.small t2.medium t2.large **\n  $white-k$gray\\t Specify the name of AWS keypair.\n  $white-m$gray\\t Allow multiple connections to same endpoint.\n  $white-r$gray\\t Specify AWS Region.\\n\\t us-east-1 us-east-2 us-west-1 us-west-2 eu-west-1 eu-west-2\\n\\t\\\n eu-west-3 eu-central-1 eu-north-1 ap-southeast-1 ap-northeast-1 ap-northeast-2\\n\\t ap-northeast-3 sa-east-1 ap-southeast-2 ap-south-1\\\n ap-east-1 ca-central-1 me-south-1.\n  $white-p$gray\\t Specify custom OpenVPN UDP port.\n  $white-u$gray\\t Specify custom ssh user.***\n  $white-t$gray\\t Specify custom timeout (in seconds) which is passed to ssh-keyscan to check whether instance is booted fully.***\n  $white-y$gray\\t Skip confirmations\n  $white-z$gray\\t Specify instance id.\"\n  echo -e \"${white}EXAMPLES:\\n $gray Create OpenVPN endpoint: \\n\\tautovpn -C -r us-east-1 -k us-east-1_vpnkey\\n\\\n  Generate keypar in a region.\\n\\tautovpn -G -r us-east-1\\n  Get running instances\\n\\tautovpn -S -r us-west-1\\n\\\n  Terminate OpenVPN endpoint\\n\\tautovpn -T -r us-west-1 -z i-b933e00c\\n  Using custom options\\n\\\n  \\tautovpn -C -r us-east-1 -k us-east-1_vpnkey -a ami-fce3c696 -u ec2_user -i m3.medium\"\n  echo -e \"${white}NOTES:\\n $gray* - Customs ami may be needed if changing instance type.\\n $gray** - In reality any\\\n  instance size can be given but the t2.micro\\n is more than enough.\\n\\\n $gray*** - Custom user might be need if using a custom ami.\\n **** - AWS IAM user must have EC2 or Administrator permissions set.\"\n}\n\n#SSH\nsshcmd() {\n  ssh \"${scp_options[@]}\" -t -t $@\n}\n\n#SCP\nscpcmd() {\n  scp \"${scp_options[@]}\" $@\n}\n\n#Function for error handling\nbail ()\n{\n  echo -e \"${red}Error code $1\"\n  usage\n  exit\n}\n\n#create backup of files\nbackup ()\n{\ncp ./scripts/$1{,.bak}\n}\n\n#check if file exists before modifications \nfilecheck ()\n{\n  if [[ -f ./scripts/$1.bak ]]; then\n    echo 0\n  else\n    backup \"$1\"\n    echo 0\n  fi\n}\n\n#Removes temporary files and resets terminal colors\ncleanup ()\n{\n  find ./scripts -type f  -iname \"*.bak\" -exec bash -c 'git checkout ./scripts/$(basename -s .bak \"$1\")' _ \"{}\" \\;\n  find ./scripts -type f  -iname \"*.bak\" -delete\n  tput sgr0\n  unset BOTO_USE_ENDPOINT_HEURISTICS\n  exit\n}\n\n#funtion to provide reason for failure\nfailed ()\n{\n  if [ \"$1\" == \"1\" ]; then\n  echo -e \"${red}Key already exists in AWS\\n\"\n  elif [ \"$1\" == \"2\" ]; then\n  echo -e \"${red}\\nFailed to terminate instance\"\n  elif [ \"$1\" == \"3\" ]; then\n  echo -e \"${red}\\nFailed to delete keypair\"\n  fi\n  cleanup\n  exit\n}\n\n#Parse and validate flags\nif ( ! getopts \"CDGSTyk:a:d:hmr:i:p:u:z:\" opt); then\n  usage;\n  exit 1;\nfi\n\nwhile getopts \":CDGSTyk:a:d:hmr:i:p:t:u:z:\" opt; do\n  case $opt in\n    C) Cflag=\"defined\" ;;\n    D) Dflag=\"defined\" ;;\n    G) Gflag=\"defined\" ;;\n    S) Sflag=\"defined\" ;;\n    T) Tflag=\"defined\" ;;\n    a) custom_ami=\"$OPTARG\" ;;\n    d) custom_DNS=\"$OPTARG\" ;;\n    h) usage && exit 0 ;;\n    i) instance_type=\"$OPTARG\" ;;\n    k) kflag=\"defined\"; keyname=\"$OPTARG\" ;;\n    m) mflag=\"defined\" ;;\n    r) rflag=\"defined\"\n      if [ \"$OPTARG\" == \"us-east-1\" ]; then region=\"us-east-1\"; ami=\"ami-0d5ae5525eb033d0a\"\n      elif [ \"$OPTARG\" == \"us-east-2\" ]; then region=\"us-east-2\"; ami=\"ami-0a7f2b5b6b87eaa1b\"\n      elif [ \"$OPTARG\" == \"us-west-1\" ]; then region=\"us-west-1\"; ami=\"ami-00a3e4424e9ab3e56\"\n      elif [ \"$OPTARG\" == \"us-west-2\" ]; then region=\"us-west-2\"; ami=\"ami-09c6723c6c24250c9\"\n      elif [ \"$OPTARG\" == \"eu-west-1\" ]; then region=\"eu-west-1\"; ami=\"ami-0e41581acd7dedd99\"\n      elif [ \"$OPTARG\" == \"eu-west-2\" ]; then region=\"eu-west-2\"; ami=\"ami-00f94dc949fea2adf\"\n      elif [ \"$OPTARG\" == \"eu-west-3\" ]; then region=\"eu-west-3\"; ami=\"ami-0df03c7641cf41947\"\n      elif [ \"$OPTARG\" == \"eu-central-1\" ]; then region=\"eu-central-1\"; ami=\"ami-040a1551f9c9d11ad\"\n      elif [ \"$OPTARG\" == \"eu-north-1\" ]; then region=\"eu-north-1\"; ami=\"ami-0567220a328fe4fee\"\n      elif [ \"$OPTARG\" == \"ap-northeast-1\" ]; then region=\"ap-northeast-1\"; ami=\"ami-0d5db3e2a1b98ca94\"\n      elif [ \"$OPTARG\" == \"ap-northeast-2\" ]; then region=\"ap-northeast-2\"; ami=\"ami-0f4362c71ffaf7759\"\n      elif [ \"$OPTARG\" == \"ap-northeast-3\" ]; then region=\"ap-northeast-3\"; ami=\"ami-07672d9af3947230d\"\n      elif [ \"$OPTARG\" == \"ap-southeast-1\" ]; then region=\"ap-southeast-1\"; ami=\"ami-0c199cae95cea87f0\"\n      elif [ \"$OPTARG\" == \"ap-southeast-2\" ]; then region=\"ap-southeast-2\"; ami=\"ami-0c0483bc96aef8b2f\"\n      elif [ \"$OPTARG\" == \"sa-east-1\" ]; then region=\"sa-east-1\"; ami=\"ami-0065a65613972a22a\"\n      elif [ \"$OPTARG\" == \"ap-south-1\" ]; then region=\"ap-south-1\"; ami=\"ami-0237472cf337d9529\"\n      elif [ \"$OPTARG\" == \"ap-east-1\" ]; then region=\"ap-east-1\"; ami=\"ami-d26218a3\"\n      elif [ \"$OPTARG\" == \"ca-central-1\" ]; then region=\"ca-central-1\"; ami=\"ami-0dbe45195223e250b\"\n      elif [ \"$OPTARG\" == \"me-south-1\" ]; then region=\"me-south-1\"; ami=\"ami-0a7794ed517908686\"\n      else echo \"Not a valid region\"; bail 3; fi\n      ;;\n    p) vpn_port=\"$OPTARG\" ;;\n    t) tflag=\"defined\"; ssh_keyscan_timeout=\"$OPTARG\" ;;\n    u) custom_user=\"$OPTARG\" ;;\n    y) yflag=\"defined\" ;;\n    z) zflag=\"defined\"; term_ids=\"$OPTARG\" ;;\n    \\?) echo \"Invalid option: -$OPTARG\" >&2 ; bail 1 ;;\n    :)  echo \"Option -$OPTARG requires an argument.\" >&2 ; bail 2\n  esac\ndone\n\nif [[ -z \"$instance_type\" ]]; then \tinstance_type=\"t2.micro\"; fi\nif [[ $region =~ ^(eu-north-1|ap-east-1) ]]; then  instance_type=\"t3.micro\"; fi\nif [[ -n \"$custom_user\" ]]; then  user=\"$custom_user\"; fi\nif [[ -n \"$custom_DNS\" ]]; then\n  dcheck=$(filecheck openvpn-autoinstall.sh)\n  [[ $dcheck == \"0\" ]]\n  sed -i '99,100d' ./scripts/openvpn-autoinstall.sh\n  sed -i \"100i echo 'push \\\"dhcp-option DNS $custom_DNS\\\"' >> /etc/openvpn/server.conf\" ./scripts/openvpn-autoinstall.sh\nfi\nif [[ -z \"$vpn_port\"  ]]; then\n  vpn_port=\"1194\"\nelse\n  pcheck=$(filecheck openvpn-autoinstall.sh)\n  [[ $pcheck == \"0\" ]]\n  sed -i \"s/1194/$vpn_port/g\"  ./scripts/openvpn-autoinstall.sh\nfi\nif [[ -n \"$mflag\" ]] ; then\n  mcheck=$(filecheck openvpn-autoinstall.sh)\n  [[ $mcheck == \"0\" ]]\n  sed -i \"112i echo 'duplicate-cn' >> /etc/openvpn/server.conf\" ./scripts/openvpn-autoinstall.sh\nfi\n\nlocal_path=\"$(pwd)/${region}_aws_vpn.ovpn\"\n\n#auto confirm delete when prompted\nconfirm ()\n{\n  if [[ -n \"$yflag\" ]]; then\n    REPLY=\"Y\"\n  else\n    read -p \"Are you sure you want to continue? y/n :\" -n 1 -r\n  fi\n}\n\n#Create ec2 instance\nif [ -n \"$Cflag\" ] && [ -n \"$rflag\" ] && [ -n \"$kflag\"  ] ; then\n  echo \"Creating ec2 instance in $region. This can take some time...\"\n  instance_ip=$(python3 ./scripts/create_ec2.py \"$keyname\" \"$instance_type\" \"$region\" \"$ami\" \"$vpn_port\")\n  [[ $instance_ip =~ ^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$ ]] || bail 4\n  echo -e \"${green}Instance has been created $instance_ip\"\n  echo -e \"${yellow}Giving new instance some time to fully boot up...\"\n  while [ \"$status\" != \"0\" ]\n    do\n      echo -e \"${yellow}$instance_ip is still booting...\"\n      sleep 15\n            if [[ -n \"$tflag\" ]]; then\n                ssh-keyscan -T $ssh_keyscan_timeout $instance_ip 2>&1 | grep -v \"^$\" > /dev/null\n            else\n                ssh-keyscan $instance_ip 2>&1 | grep -v \"^$\" > /dev/null\n            fi\n    status=$?\n  done\n  echo -e \"${white}Setting up VPN on $instance_ip\"\n  scpcmd \"$local_script\" $user@$instance_ip:\"$remote_script\" || bail 5\n  sshcmd \"$user\"@$instance_ip \"chmod +x $remote_script && $run_script\" || bail 6\n  scpcmd $user@$instance_ip:\"$remote_path\" \"$local_path\" || bail 7\n  echo -e \"${green}OpenVPN config file is located at $(pwd)\"\nfi\n\n#Generate Keypair\nif [ -n \"$Gflag\" ] && [ -n \"$rflag\" ] ; then\n  keypath=$(pwd)\n  if [ ! -f \"$keypath/${region}_vpnkey.pem\" ]; then\n    echo -e  \"${white}Generating new keypair for $region.\"\n    generate_key=$(python3 ./scripts/keygen.py \"${region}_vpnkey\" \"$region\" \"$keypath\")\n    [[ $generate_key == \"Success\" ]] || failed 1\n    echo -e \"${green}${region}_vpnkey has been created successfully.\"\n    ssh-add -l &>/dev/null\n    if [ \"$?\" == 2 ]; then\n      eval $(ssh-agent -s) &>/dev/null\n    fi\n    ssh-add \"$keypath/${region}_vpnkey.pem\" &>/dev/null\n  elif [ -f \"$keypath/${region}_vpnkey.pem\" ]; then\n    echo -e \"${yellow}A Keypair for this region already exists.\"\n  fi\n  echo -e \"${green}Use ${region}_vpnkey as keyname to create endpoint.\\nNote you may need to add ${region}_vpnkey to ssh-agent \"\nfi\n\n#Get status\nif [ -n \"$Sflag\" ] && [ -n \"$rflag\" ]  ; then\n  get_status=$(python3 ./scripts/get_status.py \"$region\")\n  if [[ -z ${get_status} ]] ; then\n    echo -e  \"${green}No instances running in ${region}\"\n  else\n    echo -e \"${green}Instances running in ${region}\\n ${get_status}\"\n  fi\nfi\n\n#Terminate ec2 instance\nif [ -n \"$Tflag\" ] && [ -n \"$rflag\" ] && [ -n \"$zflag\" ]  ; then\n  echo -e \"${yellow}WARNING: instance ${term_ids} in ${region} will be terminated. This is not reversible\"\n  confirm\n  if [[ $REPLY =~ ^[Yy]$ ]]; then\n    termec2=$(python3 ./scripts/terminate.py \"$region\" \"$term_ids\")\n    [[ $termec2 == \"Success\" ]] || failed 2\n    echo -e \"\\n${green}${term_ids} has been terminated.\"\n  elif [[ $REPLY =~ ^[Nn]$ ]]; then\n    echo -e \"\\n${green}No instances were terminated.\"\n  fi\nfi\n\n#Delete keypair from AWS\nif [ -n \"$Dflag\" ] && [ -n \"$rflag\" ] && [ -n \"$kflag\" ]  ; then\n  echo -e \"${yellow}WARNING: Keypair ${keyname} in ${region} will be deleted. This is not reversible\"\n  confirm\n  if [[ $REPLY =~ ^[Yy]$ ]]; then\n    delkey=$(python3 ./scripts/delete_key.py \"$region\" \"$keyname\")\n    [[ $delkey == \"Success\" ]] || failed 3\n    echo -e \"\\n${green}${keyname} has been deleted. Make sure to remove the .pem file on your box \"\n  elif [[ $REPLY =~ ^[Nn]$ ]]; then\n    echo -e \"\\n${green}No keypairs were deleted.\"\n  fi\nfi\n\n#call cleanup Function\ncleanup\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.013671875,
          "content": "boto\nparamiko\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}