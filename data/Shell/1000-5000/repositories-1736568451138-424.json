{
  "metadata": {
    "timestamp": 1736568451138,
    "page": 424,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQyOQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "udhos/update-golang",
      "stars": 1865,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.255859375,
          "content": "language: bash\n\nsudo: required\n\nscript:\n  - export GOROOT=\n  - echo GOROOT=$GOROOT\n  - ./shellcheck.sh\n  - sudo DEBUG=1 ./update-golang.sh\n  - sudo DEBUG=1 ./update-golang.sh\n  - ls -al /usr/local\n  - sudo DEBUG=1 ./update-golang.sh remove\n  - ls -al /usr/local\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.037109375,
          "content": "MIT License\n\nCopyright (c) 2017 udhos\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.541015625,
          "content": "[![license](http://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/udhos/update-golang/blob/master/LICENSE)\n[![Travis Build Status](https://travis-ci.org/udhos/update-golang.svg?branch=master)](https://travis-ci.org/udhos/update-golang)\n\n# update-golang\nupdate-golang is a script to easily fetch and install new Golang releases with minimum system intrusion.\n\nTable of Contents\n=================\n\n  * [How it works](#how-it-works)\n  * [Usage](#usage)\n  * [Caution](#caution)\n  * [Remove](#remove)\n  * [Example](#example)\n  * [Customization](#customization)\n  * [Per\\-user Install](#per-user-install)\n\nCreated by [gh-md-toc](https://github.com/ekalinin/github-markdown-toc.go)\n\nHow it works\n============\n\nThe script is based on official installation instructions from https://go.dev/doc/install.\n\nThis is the default behavior:\n\n1\\. Search for the latest binary release in https://go.dev/dl/.\n\n2\\. The script uses local system OS and ARCH to download the correct binary release. It is not harmful to run the script multiple times. Downloaded releases are kept as cache under '/usr/local'. You can erase them manually.\n\nBy default, the script only detects actual releases (not beta releases, not release candidates). However one can force any specific non-final release:\n\n    $ # force specific release candidate\n    $ sudo RELEASE=1.11rc1 ./update-golang.sh\n\n3\\. The release is installed at '/usr/local/go'.\n\n4\\. The path '/usr/local/go/bin' is added to PATH using '/etc/profile.d/golang_path.sh'.\n\n5\\. Only if needed, GOROOT is properly setup, also using '/etc/profile.d/golang_path.sh'.\n\nThe script DOES NOT ever modify the GOPATH variable.\n\nYou can customize the behavior by setting environment variables (see Customization below).\n\nUsage\n=====\n\n    git clone https://github.com/udhos/update-golang\n    cd update-golang\n    sudo ./update-golang.sh\n\nCaution\n=======\n\nBefore running the script, make sure you have an untampered copy by verifying the SHA256 checksum.\n\n    $ wget -qO hash.txt https://raw.githubusercontent.com/udhos/update-golang/master/update-golang.sh.sha256\n    $ sha256sum -c hash.txt\n    update-golang.sh: OK\n\nRemove\n======\n\nYou can use the 'remove' option to undo update-golang.sh work:\n\n    $ sudo ./update-golang.sh remove\n\nDeclutter\n======\n\nYou can use the '-declutter' option to prevent caching downloaded archives:\n\n    $ sudo ./update-golang.sh -declutter\n\nExample\n=======\n\nSample session:\n\n    lab@ubu1:~$ go\n    The program 'go' can be found in the following packages:\n     * golang-go\n     * gccgo-go\n    Try: sudo apt install <selected package>\n    lab@ubu1:~$\n    lab@ubu1:~$ git clone https://github.com/udhos/update-golang\n    Cloning into 'update-golang'...\n    remote: Counting objects: 481, done.\n    remote: Compressing objects: 100% (11/11), done.\n    remote: Total 481 (delta 4), reused 9 (delta 2), pack-reused 468\n    Receiving objects: 100% (481/481), 70.22 KiB | 125.00 KiB/s, done.\n    Resolving deltas: 100% (248/248), done.\n    lab@ubu1:~$\n    lab@ubu1:~$ cd update-golang\n    lab@ubu1:~/update-golang$ sudo ./update-golang.sh\n    update-golang.sh: version 0.15\n    update-golang.sh: find_latest: found last release: 1.10.2\n    update-golang.sh: user: uid=0(root) gid=0(root) groups=0(root)\n    update-golang.sh: RELEASE_LIST=https://golang.org/doc/devel/release.html\n    update-golang.sh: SOURCE=https://storage.googleapis.com/golang\n    update-golang.sh: DESTINATION=/usr/local\n    update-golang.sh: RELEASE=1.10.2\n    update-golang.sh: OS=linux\n    update-golang.sh: ARCH_PROBE=uname -m\n    update-golang.sh: ARCH=amd64\n    update-golang.sh: PROFILED=/etc/profile.d/golang_path.sh\n    update-golang.sh: CACHE=/usr/local\n    update-golang.sh: GOPATH=\n    update-golang.sh: DEBUG=\n    update-golang.sh: will install golang go1.10.2.linux-amd64 as: /usr/local/go\n    update-golang.sh: https://storage.googleapis.com/golang/go1.10.2.linux-amd64.tar.gz is remote\n    update-golang.sh: no need to download - file cached: /usr/local/go1.10.2.linux-amd64.tar.gz\n    update-golang.sh: remove_old_link: not found symlink for old install\n    update-golang.sh: untar: tar -x -f /usr/local/go1.10.2.linux-amd64.tar.gz\n    update-golang.sh: path: removing old settings from: /etc/profile.d/golang_path.sh\n    update-golang.sh: path: issuing new /usr/local/go/bin to /etc/profile.d/golang_path.sh\n    update-golang.sh: path: issuing /home/lab/go/bin to /etc/profile.d/golang_path.sh\n    update-golang.sh: golang go1.10.2.linux-amd64 installed at: /usr/local/go\n    update-golang.sh: testing: /usr/local/go/bin/go version\n    update-golang.sh: go version go1.10.2 linux/amd64\n    update-golang.sh: /usr/local/go/bin/go version: SUCCESS\n    update-golang.sh: testing: /usr/local/go/bin/go run /tmp/hello-tmpv1bX1rQN.go\n    update-golang.sh: hello, world\n    update-golang.sh: /usr/local/go/bin/go run /tmp/hello-tmpv1bX1rQN.go: SUCCESS\n    update-golang.sh: cleanup: /tmp/tmp.tcNY25eXNl\n    lab@ubu1:~/update-golang$\n\nCustomization\n=============\n\nThese environment variables are available for customization:\n\n    RELEASE_LIST=https://golang.org/doc/devel/release.html ;# search for new releases from this url\n    SOURCE=https://storage.googleapis.com/golang           ;# download source location\n    DESTINATION=/usr/local                                 ;# install destination\n    RELEASE=1.8.3                                          ;# force golang release\n    OS=linux                                               ;# force os\n    ARCH_PROBE='uname -m'                                  ;# force arch detection command\n    ARCH=amd64                                             ;# force arch\n    PROFILED=/etc/profile.d/golang_path.sh                 ;# update PATH, optionally set GOROOT\n    CACHE=/usr/local                                       ;# cache downloads in this dir\n    GOPATH=                                                ;# use this GOPATH\n    DEBUG=                                                 ;# set to enable debug\n\nExample:\n\n    $ sudo RELEASE=1.9beta1 ./update-golang.sh\n\nPer-user Install\n================\n\nDefault behavior is to install Golang globally for all system users.\n\nHowever you can use the environment variables to point locations to your per-user home directory.\n\nThe per-user installation does not need root (sudo) privileges.\n\nExample installing:\n\n    This example will install Golang under ~/golang for current user only.\n    \n    $ mkdir ~/golang\n    $ DESTINATION=~/golang PROFILED=~/.bash_profile ./update-golang.sh\n\nExample uninstalling:\n\n    To uninstall, make sure to provide the same env vars used for installing:\n\n    $ DESTINATION=~/golang PROFILED=~/.bash_profile ./update-golang.sh remove\n\nEND\n"
        },
        {
          "name": "pre-commit",
          "type": "blob",
          "size": 0.05078125,
          "content": "#!/usr/bin/env sh\n\ngit add \"$(./sha256-update.sh)\"\n\n"
        },
        {
          "name": "sha256-update.sh",
          "type": "blob",
          "size": 0.1728515625,
          "content": "#!/usr/bin/env sh\n\nsum=sha256sum\nout=update-golang.sh.sha256\n\nif hash $sum 2>/dev/null; then\n    $sum update-golang.sh > $out\nelse\n    echo >&2 \"$0: missing $sum\"\nfi\n\necho $out\n"
        },
        {
          "name": "shellcheck.sh",
          "type": "blob",
          "size": 0.10546875,
          "content": "#!/usr/bin/env bash\n\nshellcheck -e SC2153,SC2016 shellcheck.sh pre-commit sha256-update.sh update-golang.sh\n"
        },
        {
          "name": "update-golang.sh",
          "type": "blob",
          "size": 13.9521484375,
          "content": "#!/usr/bin/env bash\n#\n# update-golang is a script to easily fetch and install new Golang releases\n#\n# Home: https://github.com/udhos/update-golang\n#\n# PIPETHIS_AUTHOR udhos\n\n# ignore runtime environment variables\n# shellcheck disable=SC2153\nversion=0.28\n\nset -o pipefail\n\nme=$(basename \"$0\")\nmsg() {\n    echo >&2 \"$me\": \"$*\"\n}\n\ndebug() {\n    [ -n \"$DEBUG\" ] && msg debug: \"$*\"\n}\n\nlog_stdin() {\n    while read -r i; do\n        msg \"$i\"\n    done\n}\n\n# defaults\nrelease_list=https://go.dev/dl/\nsource=https://storage.googleapis.com/golang\n#source=https://dl.google.com/go\n#source=https://go.dev/dl\ndestination=/usr/local\nrelease=1.22.4 ;# just the default. the script detects the latest available release.\narch_probe=\"uname -m\"\nconnect_timeout=5\n\nos=$(uname -s | tr \"[:upper:]\" \"[:lower:]\")\n\nif [ -d /etc/profile.d ]; then\n    profiled=/etc/profile.d/golang_path.sh\nelse\n    profiled=/etc/profile\nfi\n\n[ -n \"$ARCH_PROBE\" ] && arch_probe=\"$ARCH_PROBE\"\n\narch=$($arch_probe)\ncase \"$arch\" in\n    i*)\n        arch=386\n        ;;\n    x*)\n        arch=amd64\n        ;;\n    aarch64)\n        #arch=armv6l\n        arch=arm64\n        ;;\n    armv7l)\n        # Go project does not provide a binary release for armv71\n        msg armv7l is not supported, using armv6l\n        arch=armv6l\n        ;;\nesac\n\nshow_version() {\n    msg version $version\n}\n\nshow_version\n\n# avoid trying 1.12beta because 1.12beta1 is valid while 1.12beta is not\n# if you want beta, force RELEASE=1.12beta1\nexclude_beta() {\n    grep -v -E 'go[0-9\\.]+(beta|rc)'\n}\n\nscan_versions() {\n    local fetch=\"$*\"\n    debug scan_versions: from \"$release_list\"\n    if has_cmd jq; then\n        local rl=\"$release_list?mode=json\"\n        msg \"scan_versions: fetch: $fetch $rl\"\n        msg \"scan_versions: parsing with jq from $rl\"\n        $fetch \"$rl\" | jq -r '.[].files[].version' | sort | uniq | exclude_beta | sed -e 's/go//' | sort -V\n    else\n        $fetch \"$release_list\" | exclude_beta | grep -E -o 'go[0-9\\.]+' | grep -E -o '[0-9]\\.[0-9]+(\\.[0-9]+)?' | sort -V | uniq\n    fi\n}\n\nhas_cmd() {\n    #command -v \"$1\" >/dev/null\n    hash \"$1\" 2>/dev/null\n}\n\nhas_wget() {\n    [ -z \"$SKIP_WGET\" ] && has_cmd wget\n}\n\nhas_curl() {\n    has_cmd curl\n}\n\ntmp='' ;# will be set\nsave_dir=$PWD\nprevious_install='' ;# will be set\ndeclutter='' ;# will be set\ntar_to_remove='' ;# will be set\ncleanup() {\n    [ -n \"$tmp\" ] && [ -f \"$tmp\" ] && msg cleanup: \"$tmp\" && rm \"$tmp\"\n    [ -n \"$declutter\" ] && [ -n \"$tar_to_remove\" ] && [ -f \"$tar_to_remove\" ] && msg cleanup: \"$tar_to_remove\" && rm \"$tar_to_remove\"\n    [ -n \"$save_dir\" ] && cd \"$save_dir\" || exit 2\n    [ -n \"$previous_install\" ] && msg remember to delete previous install saved as: \"$previous_install\"\n}\n\ndie() {\n    msg \"die: $*\"\n    cleanup\n    exit 3\n}\n\nwget_base() {\n    echo wget --connect-timeout \"$connect_timeout\" \"$FORCE_IPV4\"\n}\n\ncurl_base() {\n    echo curl --connect-timeout \"$connect_timeout\" \"$FORCE_IPV4\"\n}\n\nfind_latest() {\n    debug find_latest: built-in version: \"$release\"\n    debug find_latest: from \"$release_list\"\n    local last=\n    local fetch=\n    if has_wget; then\n        fetch=\"$(wget_base) -qO-\"\n    elif has_curl; then\n        fetch=\"$(curl_base) --silent\"\n    else\n        die \"find_latest: missing both 'wget' and 'curl'\"\n    fi\n    last=$(scan_versions \"$fetch\" | tail -1)\n    if echo \"$last\" | grep -q -E '[0-9]\\.[0-9]+(\\.[0-9]+)?'; then\n        msg find_latest: found last release: \"$last\"\n        release=$last\n    else\n        msg find_latest: FAILED\n    fi\n}\n\n[ -n \"$RELEASE_LIST\" ] && release_list=$RELEASE_LIST\n\nif [ -n \"$RELEASE\" ]; then\n    msg release forced to RELEASE=\"$RELEASE\"\n    release=\"$RELEASE\"\nelse\n    find_latest\nfi\n\n[ -n \"$SOURCE\" ] && source=$SOURCE\n[ -n \"$DESTINATION\" ] && destination=$DESTINATION\n[ -n \"$OS\" ] && os=$OS\n[ -n \"$ARCH\" ] && arch=$ARCH\ncache=$destination\n[ -n \"$CACHE\" ] && cache=$CACHE\n[ -n \"$PROFILED\" ] && profiled=$PROFILED\n[ -n \"$CONNECT_TIMEOUT\" ] && connect_timeout=$CONNECT_TIMEOUT\n\nshow_vars() {\n    echo user: \"$(id)\"\n\n    cat <<EOF\n\nRELEASE_LIST=$release_list\nSOURCE=$source\nDESTINATION=$destination\nRELEASE=$release\nOS=$os\nARCH_PROBE=$arch_probe\nARCH=$arch\nPROFILED=$profiled\nCACHE=$cache\nGOPATH=$GOPATH\nDEBUG=$DEBUG\nFORCE_IPV4=$FORCE_IPV4           ;# set FORCE_IPV4=-4 to force IPv4\nCONNECT_TIMEOUT=$connect_timeout\nSKIP_WGET=$SKIP_WGET             ;# set SKIP_WGET=1 to skip wget\n\nEOF\n}\n\nlabel=go$release.$os-$arch\nfilename=$label.tar.gz\nurl=$source/$filename\ngoroot=$destination/go\nfilepath=$cache/$filename\nnew_install=$destination/$label\n\nsolve() {\n    local path=$1\n    local p=\n    if echo \"$path\" | grep -E -q ^/; then\n        p=\"$path\"\n        local m=\n        m=$(file \"$p\")\n        debug \"solve: $p: $m\"\n    else\n        p=\"$save_dir/$path\"\n    fi\n    echo \"$p\"\n}\n\nabs_filepath=$(solve \"$filepath\")\nabs_url=$(solve \"$url\")\nabs_goroot=$(solve \"$goroot\")\nabs_new_install=$(solve \"$new_install\")\nabs_gobin=$abs_goroot/bin\nabs_gotool=$abs_gobin/go\nabs_profiled=$(solve \"$profiled\")\n\ndownload() {\n    if echo \"$url\" | grep -E -q '^https?:'; then\n        msg \"$url\" is remote\n        if [ -f \"$abs_filepath\" ]; then\n            msg no need to download - file cached: \"$abs_filepath\"\n        else\n            if has_wget; then\n                msg download: \"$(wget_base)\" -O \"$abs_filepath\" \"$url\"\n                $(wget_base) -O \"$abs_filepath\" \"$url\" || die could not download using wget from: \"$url\"\n                [ -f \"$abs_filepath\" ] || die missing file downloaded with wget: \"$abs_filepath\"\n            elif has_curl; then\n                msg download: \"$(curl_base)\" -o \"$abs_filepath\" \"$url\"\n                $(curl_base) -o \"$abs_filepath\" \"$url\" || die could not download using curl from: \"$url\"\n                [ -f \"$abs_filepath\" ] || die missing file downloaded with curl: \"$abs_filepath\"\n            else\n                die \"download: missing both 'wget' and 'curl'\"\n            fi\n        fi\n    else\n        msg \"$abs_url\" is local\n        cp \"$abs_url\" . || die could not copy from: \"$abs_url\"\n    fi\n}\n\nsymlink_test() {\n    #file \"$1\" | grep -q symbolic\n    readlink \"$1\" >/dev/null\n}\n\nsymlink_get() {\n    #local f=\n    #local j=\n    #f=$(file \"$1\")\n    #j=$(echo \"$f\" | awk '{print $NF}')\n    #debug \"symlink_get: $1: [$f]: [$j]\"\n    #echo \"$j\"\n    readlink \"$1\"\n}\n\nremove_old_link() {\n    if symlink_test \"$abs_goroot\"; then\n        abs_old_install=$(symlink_get \"$abs_goroot\")\n        msg remove_old_link: found symlink for old install: \"$abs_old_install\"\n        [ -r \"$abs_goroot\" ] && rm \"$abs_goroot\"\n    else\n        msg remove_old_link: not found symlink for old install\n        if [ -r \"$abs_goroot\" ]; then\n            local now\n            now=$(date +%Y%m%d-%H%M%S)\n            mv \"$abs_goroot\" \"$abs_goroot-$now\" || die could not rename existing goland directory: \"$abs_goroot\"\n            previous_install=\"$abs_goroot-$now\"\n            msg previous install renamed to: \"$previous_install\"\n        fi\n    fi\n    [ -r \"$abs_goroot\" ] && die could not remove existing golang directory: \"$abs_goroot\"\n}\n\nrm_dir() {\n    local dir=$1\n    rm -r \"$dir\"\n}\n\nuntar() {\n    if [ -d \"$abs_new_install\" ]; then\n        msg untar: rm_dir \"$abs_new_install\"\n        rm_dir \"$abs_new_install\" || die untar: could not remove: \"$abs_new_install\"\n    fi\n    [ -d \"$PWD\" ] || die untar: not a directory: \"$PWD\"\n    [ -w \"$PWD\" ] || die untar: unable to write: \"$PWD\"\n    local cmd=\"tar -x -f $abs_filepath\"\n    msg untar: \"$cmd\"\n    $cmd || die untar: failed: \"$abs_filepath\"\n    tar_to_remove=\"$abs_filepath\"\n}\n\nrelink() {\n    mv \"$abs_goroot\" \"$abs_new_install\"\n    ln -s \"$abs_new_install\" \"$abs_goroot\"\n}\n\npath_mark=update-golang.sh\n\nprofile_path_remove() {\n    if [ -f \"$abs_profiled\" ]; then\n        msg profile_path_remove: removing old settings from: \"$abs_profiled\"\n        tmp=$(mktemp -t profile-tmpXXXXXXXX) # save for later removal\n        if [ ! -f \"$tmp\" ]; then\n            msg profile_path_remove: could not create temporary file: \"$tmp\"\n            return\n        fi\n        sed \"/# DO NOT EDIT: installed by $path_mark/,/# $path_mark: end/d\" \"$abs_profiled\" > \"$tmp\"\n        cp \"$tmp\" \"$abs_profiled\"\n    fi\n}\n\ndefault_goroot=/usr/local/go\n\nprofile_path_add() {\n    profile_path_remove\n    { echo; echo \"# DO NOT EDIT: installed by $path_mark\"; echo \"\"; }  >> \"$abs_profiled\"\n\n    msg profile_path_add: issuing new \"$abs_gobin\" to \"$abs_profiled\"\n    { echo 'if ! echo \"$PATH\" | grep -Eq \"(^|:)'\"$abs_gobin\"'($|:)\"';\n    echo \"then\";\n    echo \"    export PATH=$abs_gobin:\\$PATH\";\n    echo \"fi\"; } >> \"$abs_profiled\"\n\n    local user_gobin=\n    [ -n \"$GOPATH\" ] && user_gobin=$(echo \"$GOPATH\" | awk -F: '{print $1}')/bin\n    # shellcheck disable=SC2016\n    [ -z \"$user_gobin\" ] && user_gobin='$HOME/go/bin'         ;# we want $HOME literal\n\n    msg profile_path_add: issuing \"$user_gobin\" to \"$abs_profiled\"\n    { echo 'if ! echo \"$PATH\" | grep -Eq \"(^|:)'\"$user_gobin\"'($|:)\"';\n    echo \"then\";\n    echo \"    export PATH=\\$PATH:$user_gobin\";\n    echo \"fi\"; } >> \"$abs_profiled\"\n\n    if [ \"$abs_goroot\" != $default_goroot ]; then\n        msg profile_path_add: setting up custom GOROOT=\"$abs_goroot\" to \"$abs_profiled\"\n        echo \"export GOROOT=$abs_goroot\" >> \"$abs_profiled\"\n    fi\n    echo \"# $path_mark: end\" >> \"$abs_profiled\"\n\n    chmod 755 \"$abs_profiled\"\n}\n\nrunning_as_root() {\n    [ \"$EUID\" -eq 0 ]\n}\n\nperm_build_cache() {\n    local buildcache\n    buildcache=$($abs_gotool env GOCACHE)\n\n    local own\n    own=\":\"\n\n    if running_as_root; then\n        # running as root - try user id from sudo\n        buildcache=$(sudo -i -u \"$SUDO_USER\" \"$abs_gotool\" env GOCACHE)\n        own=\"$SUDO_UID:$SUDO_GID\"\n    fi\n\n    if [ \"$own\" == \":\" ]; then\n        # try getting the usual user id\n        own=$(id -u):$(id -g)\n    fi\n\n    msg recursively forcing build cache [\"$buildcache\"] ownership to \"$own\"\n    chown -R \"$own\" \"$buildcache\"\n}\n\nunsudo() {\n    if running_as_root; then\n        # shellcheck disable=SC2068\n        msg unsudo: running_as_root:\"$SUDO_USER\": $@\n        # shellcheck disable=SC2068\n        sudo -i -u \"$SUDO_USER\" $@\n    else\n        # shellcheck disable=SC2068\n        msg unsudo: non_root: $@\n        # shellcheck disable=SC2068\n        $@\n    fi\n}\n\ntest_runhello() {\n    local ret=1\n    local t=\"$abs_gotool version\"\n    if [ \"$abs_goroot\" != $default_goroot ]; then\n        msg testing: GOROOT=\"$abs_goroot\" \"$t\"\n        # shellcheck disable=SC2086\n        GOROOT=$abs_goroot unsudo $t | log_stdin\n        ret=$?\n    else\n        msg testing: \"$t\"\n        # shellcheck disable=SC2086\n        unsudo $t | log_stdin\n        ret=$?\n    fi\n    if [ $ret -eq 0 ]; then\n        msg \"$t\": SUCCESS\n    else\n        msg \"$t\" FAIL\n    fi\n\n    local hello_tmp=\n    hello_tmp=$(unsudo mktemp -t hello-tmpXXXXXXXX)\".go\"\n\n    unsudo tee \"$hello_tmp\" >/dev/null <<__EOF__\npackage main\nimport (\n    \"fmt\"\n    \"runtime\"\n)\nfunc main() {\n    fmt.Printf(\"hello, world - %s\\n\", runtime.Version())\n}\n__EOF__\n\n    local abs_hello=\n    abs_hello=$(solve \"$hello_tmp\")\n    ret=1\n    t=\"$abs_gotool run $abs_hello\"\n    if [ \"$abs_goroot\" != $default_goroot ]; then\n        msg testing: GOROOT=\"$abs_goroot\" \"$t\"\n        # shellcheck disable=SC2086\n        GOROOT=$abs_goroot unsudo $t | log_stdin\n        ret=$?\n    else\n        msg testing: \"$t\"\n        # shellcheck disable=SC2086\n        unsudo $t | log_stdin\n        ret=$?\n    fi\n    if [ $ret -eq 0 ]; then\n        msg \"$t\": SUCCESS\n    else\n        msg \"$t\" FAIL\n    fi\n\n    rm \"$hello_tmp\"\n}\n\nremove_golang() {\n    if symlink_test \"$abs_goroot\"; then\n        local old_install=\n        old_install=$(symlink_get \"$abs_goroot\")\n        msg remove: found symlink for old install: \"$old_install\"\n        msg remove: removing symlink: \"$abs_goroot\"\n        rm \"$abs_goroot\"\n        msg remove: removing dir: \"$old_install\"\n        rm_dir \"$old_install\"\n    else\n        msg remove: not found symlink for old install\n    fi\n\n    profile_path_remove\n}\n\nremove_old_install() {\n    if [ -n \"$abs_old_install\" ]; then\n        if [ \"$abs_old_install\" != \"$abs_new_install\" ]; then\n            # remove old install only if it actually changed\n            msg removing old install: \"$abs_old_install\"\n            rm_dir \"$abs_old_install\"\n        fi\n    fi\n}\n\ncheck_package() {\n    if has_cmd dpkg && dpkg -s golang-go 2>/dev/null | grep ^Status | grep -q installed; then\n        msg\n        msg WARNING\n        msg WARNING: golang-go is installed, you should remove it: sudo apt remove golang-go\n        msg WARNING\n        msg\n    fi\n    if has_cmd rpm && rpm -q golang >/dev/null 2>/dev/null; then\n        msg\n        msg WARNING\n        msg WARNING: golang is installed, you should remove it: sudo yum remove golang\n        msg WARNING\n        msg\n    fi\n    if unsudo hash brew 2>/dev/null && unsudo brew ls --versions golang >/dev/null; then\n        msg\n        msg WARNING\n        msg WARNING: golang is installed, you should remove it: brew remove golang\n        msg WARNING\n        msg\n    fi\n}\n\n# update pre-commit hook\n[ -d .git ] && [ ! -h .git/hooks/pre-commit ] && ln -s ../../pre-commit .git/hooks/pre-commit\n\n#\n# main section: begin\n#\n\n[ -d \"$abs_profiled\" ] && die \"PROFILED=$profiled cannot be a directory\"\n\ncase \"$1\" in\n    -v)\n        show_version\n        exit 0\n        ;;\n    remove)\n        remove_golang\n        exit 0\n        ;;\n    -declutter)\n        declutter=\"true\"\n        ;;\n    '')\n        ;;\n    *)\n        msg unknown option: \"$1\"\n        echo >&2 usage: \"$me [-v] [remove] [-declutter]\"\n        exit 1\n        ;;\nesac\n\nshow_vars | log_stdin\ncheck_package\n\ncd \"$destination\" || die could not enter destination=\"$destination\"\n\nmsg will install golang \"$label\" as: \"$abs_goroot\"\n\ndownload\nremove_old_link\nuntar\nrelink\nremove_old_install\nprofile_path_add\n\nmsg golang \"$label\" installed at: \"$abs_goroot\"\n\ntest_runhello\nif running_as_root; then\n    msg running_as_root: yes\n    perm_build_cache ;# must come after test, since testing might create root:root files\nelse\n    msg running_as_root: no\nfi\ncleanup\n\nmsg\nmsg \"HINT: If this is the first time you run this script, the env vars\"\nmsg \"      updated in the profile will only take effect for new shells.\"\nmsg \"      If you want them to affect the current shell, use this:\"\nmsg\nmsg \"      source $abs_profiled\"\nmsg\n\nexit 0\n\n#\n# main section: end\n#\n"
        },
        {
          "name": "update-golang.sh.sha256",
          "type": "blob",
          "size": 0.0810546875,
          "content": "91e31f2eb7b3ffe08b781b63dca93e3ed9ecb156b0a7c6e954930412b6b05337  update-golang.sh\n"
        }
      ]
    }
  ]
}