{
  "metadata": {
    "timestamp": 1736568302434,
    "page": 203,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mac-cleanup/mac-cleanup-sh",
      "stars": 2648,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.421875,
          "content": "### OSX ###\n# General\n.DS_Store\n.AppleDouble\n.LSOverride\n\n# Icon must end with two \\r\nIcon\n\n\n# Thumbnails\n._*\n\n# Files that might appear in the root of a volume\n.DocumentRevisions-V100\n.fseventsd\n.Spotlight-V100\n.TemporaryItems\n.Trashes\n.VolumeIcon.icns\n.com.apple.timemachine.donotpresent\n\n# Directories potentially created on remote AFP share\n.AppleDB\n.AppleDesktop\nNetwork Trash Folder\nTemporary Items\n.apdisk\n\n.env\n.idea\n.vscode"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.271484375,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at florian@wartner.io. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.046875,
          "content": "MIT License\n\nCopyright (c) 2020 Florian Wartner\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.8857421875,
          "content": "# mac-cleanup\n\n### A cleanup script for macOS\n\n</br>\n\n<details>\n  <summary>\n  What does script do?\n  </summary>\n\n</br>\n\n* Empty the Trash on All Mounted Volumes and the Main HDD\n* Clear System Log Files\n* Clear Adobe Cache Files\n* Cleanup iOS Applications\n* Remove iOS Device Backups\n* Cleanup Xcode Derived Data and Archives\n* Reset iOS simulators\n* Cleanup Homebrew Cache\n* Cleanup Any Old Versions of Gems\n* Cleanup Dangling Docker Images\n* Purge Inactive Memory\n* Cleanup pip cache\n* Cleanup Pyenv-VirtualEnv Cache\n* Cleanup npm Cache\n* Cleanup Yarn Cache\n* Cleanup Docker Images and Stopped Containers\n* Cleanup CocoaPods Cache Files\n* Cleanup composer cache\n* Cleanup Dropbox cache\n* Remove PhpStorm logs\n* Remove Minecraft logs and cache\n* Remove Steam logs and cache\n* Remove Lunar Client logs and cache\n* Remove Microsoft Teams logs and cache\n* Remove Wget logs and hosts\n* Removes Cacher logs\n* Deletes Android caches\n* Clears Gradle caches\n* Deletes Kite logs\n* Clears Go module cache\n* Clears Poetry cache\n\n</details>\n\n\n\n## Install Automatically\n\n### Using homebrew\n\n```bash\nbrew tap fwartner/tap\nbrew install fwartner/tap/mac-cleanup\n```\n<details>\n  <summary>\n  Error: SHA256 mismatch\n  </summary>\n\n> If you'll see ```Error: SHA256 mismatch``` try this:\n> 1. Copy \"Actual\" hash from error\n> 2. Run ```brew edit fwartner/tap/mac-cleanup```\n> 3. Press ```I``` and change ```sha256 \"<some hash>\"``` with hash from step 1\n> 4. Press ```:```, then ```wq``` and ```Enter```\n> 5. Re-run installation \\\n> ```brew install fwartner/tap/mac-cleanup```\n\n</details>\n\n\n### Using curl\n\n```bash\ncurl -fsSL https://raw.githubusercontent.com/mac-cleanup/mac-cleanup-sh/main/installer.sh | bash -s install\n```\n\n### Using wget\n\n```bash\nwget https://raw.githubusercontent.com/mac-cleanup/mac-cleanup-sh/main/installer.sh -O - | bash -s install\n```\n\n## Step by Step Install\n\n1. Download: `curl -o cleanup https://raw.githubusercontent.com/mac-cleanup/mac-cleanup-sh/main/mac-cleanup`\n2. Make it executable: `chmod +x cleanup`\n3. Move to make it globally usable: `sudo mv cleanup /usr/local/bin/cleanup`\n\n### Note:\nIf installing with curl you need to call `cleanup` instead of `mac-cleanup`.\n\n## Update\n\n### Using curl\n\n```bash\ncurl -fsSL \"https://raw.githubusercontent.com/mac-cleanup/mac-cleanup-sh/main/installer.sh\" | bash -s update\n```\n\n### Using wget\n\n```bash\nwget \"https://raw.githubusercontent.com/mac-cleanup/mac-cleanup-sh/main/installer.sh\" -O - | bash -s update\n```\n\n## Uninstall\n\n### Using curl\n\n```bash\ncurl -fsSL \"https://raw.githubusercontent.com/mac-cleanup/mac-cleanup-sh/main/installer.sh\" | bash -s uninstall\n```\n\n### Using wget\n\n```bash\nwget \"https://raw.githubusercontent.com/mac-cleanup/mac-cleanup-sh/main/installer.sh\" -O - | bash -s uninstall\n```\n\n## Usage Options\n\nHelp menu:\n\n```\n$ mac-cleanup -h\n\nA Mac Cleanup Utility by fwartner\nhttps://github.com/mac-cleanup/mac-cleanup-sh\n\nUSAGE:\n mac-cleanup [FLAGS]\n\nFLAGS:\n-h, --help       Prints help menu\n-d, --dry-run    Print approx space to be cleaned\n-v, --verbose    Print script debug info\n-u, --update     Run brew update\n```\n\n## Contributors\n\n### Code Contributors\n\nThis project exists thanks to all the people who contribute.\n<a href=\"https://github.com/mac-cleanup/mac-cleanup-sh/graphs/contributors\"><img src=\"https://opencollective.com/mac-cleanup/contributors.svg?width=890&button=false\" /></a>\n\n<a href=\"https://opencollective.com/mac-cleanup/organization/0/website\"><img src=\"https://opencollective.com/mac-cleanup/organization/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/mac-cleanup/organization/1/website\"><img src=\"https://opencollective.com/mac-cleanup/organization/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/mac-cleanup/organization/2/website\"><img src=\"https://opencollective.com/mac-cleanup/organization/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/mac-cleanup/organization/3/website\"><img src=\"https://opencollective.com/mac-cleanup/organization/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/mac-cleanup/organization/4/website\"><img src=\"https://opencollective.com/mac-cleanup/organization/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/mac-cleanup/organization/5/website\"><img src=\"https://opencollective.com/mac-cleanup/organization/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/mac-cleanup/organization/6/website\"><img src=\"https://opencollective.com/mac-cleanup/organization/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/mac-cleanup/organization/7/website\"><img src=\"https://opencollective.com/mac-cleanup/organization/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/mac-cleanup/organization/8/website\"><img src=\"https://opencollective.com/mac-cleanup/organization/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/mac-cleanup/organization/9/website\"><img src=\"https://opencollective.com/mac-cleanup/organization/9/avatar.svg\"></a>\n\nIf you like what I am doing please consider [sponsor my work](https://github.com/sponsors/fwartner)!\n"
        },
        {
          "name": "installer.sh",
          "type": "blob",
          "size": 2.0732421875,
          "content": "#!/usr/bin/env bash\n\n# set -u will crash script on unset variables\nset -Eeo pipefail\ntrap cleanup SIGINT SIGTERM ERR EXIT\n\nscript_dir=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" &>/dev/null && pwd -P)\n\nusage() {\n    cat <<EOF\nInstaller of Mac Cleanup (https://github.com/fwartner/mac-cleanup)\n\nSYNOPSIS:\n    $(basename \"${BASH_SOURCE[0]}\") [-h] [-v] install\n    $(basename \"${BASH_SOURCE[0]}\") [-h] [-v] uninstall\n    $(basename \"${BASH_SOURCE[0]}\") [-h] [-v] update\n\nOPTIONS:\n    -h, --help      Print this help and exit\n    -v, --verbose   Print script debug info\nEOF\n    exit\n}\n\ncleanup() {\n    trap - SIGINT SIGTERM ERR EXIT\n    # script cleanup here\n}\n\nsetup_colors() {\n    if [[ -t 2 ]] && [[ -z \"${NO_COLOR-}\" ]] && [[ \"${TERM-}\" != \"dumb\" ]]; then\n        NOFORMAT='\\033[0m' RED='\\033[0;31m' GREEN='\\033[0;32m' ORANGE='\\033[0;33m' BLUE='\\033[0;34m' PURPLE='\\033[0;35m' CYAN='\\033[0;36m' YELLOW='\\033[1;33m'\n    else\n        NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''\n    fi\n}\n\nmsg() {\n    echo >&2 -e \"${1-}\"\n}\n\ndie() {\n    local msg=$1\n    local code=${2-1} # default exit status 1\n    msg \"$msg\"\n    exit \"$code\"\n}\n\ninstall() {\n    msg \"${BLUE}Download Mac Cleanup${NOFORMAT}\"\n    curl -o mac-cleanup https://raw.githubusercontent.com/mac-cleanup/mac-cleanup-sh/main/mac-cleanup\n    msg \"${BLUE}Init Mac Cleanup${NOFORMAT}\"\n    chmod +x mac-cleanup\n    msg \"${BLUE}Install Mac Cleanup${NOFORMAT}\"\n    sudo mv mac-cleanup /usr/local/bin/mac-cleanup\n    msg \"${GREEN}Done!${NOFORMAT}\"\n}\n\nuninstall() {\n    msg \"${BLUE}Uninstall Mac Cleanup${NOFORMAT}\"\n    sudo rm /usr/local/bin/mac-cleanup\n    msg \"${GREEN}Done!${NOFORMAT}\"\n}\n\nparse_params() {\n    # default values of variables set from params\n    flag=0\n    param=''\n\n    while :; do\n        case \"${1-}\" in\n        -h | --help) usage ;;\n        -v | --verbose) set -x ;;\n        --no-color) NO_COLOR=1 ;;\n        uninstall) uninstall ;;\n        update) install ;;\n        install) install ;;\n        -?*) die \"Unknown option: $1\" ;;\n        *) break ;;\n        esac\n        shift\n    done\n    return 0\n}\n\nsetup_colors\nparse_params \"$@\"\n"
        },
        {
          "name": "mac-cleanup",
          "type": "blob",
          "size": 12.69921875,
          "content": "#!/usr/bin/env bash\n\nset -E\ntrap cleanup SIGINT SIGTERM ERR EXIT\n\ncleanup() {\n\ttrap - SIGINT SIGTERM ERR EXIT\n}\n\n# Default arguments\nupdate=false\n\nusage() {\n\tcat <<EOF\nUsage: $(basename \"${BASH_SOURCE[0]}\") [-h] [-v] [-u]\n\nA Mac Cleaning up Utility by fwartner\nhttps://github.com/mac-cleanup/mac-cleanup-sh\n\nAvailable options:\n\n-h, --help       Print this help and exit\n-d, --dry-run    Print approx space to be cleaned\n-v, --verbose    Print script debug info\n-u, --update     Run brew update\nEOF\n\texit\n}\n\n# shellcheck disable=SC2034  # Unused variables left for readability\nsetup_colors() {\n\tif [[ -t 2 ]] && [[ -z \"${NO_COLOR-}\" ]] && [[ \"${TERM-}\" != \"dumb\" ]]; then\n\t\tNOFORMAT='\\033[0m' RED='\\033[0;31m' GREEN='\\033[0;32m' ORANGE='\\033[0;33m' BLUE='\\033[0;34m' PURPLE='\\033[0;35m' CYAN='\\033[0;36m' YELLOW='\\033[1;33m'\n\telse\n\t\tNOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''\n\tfi\n}\n\nmsg() {\n  if [ -z \"$dry_run\" ]; then\n\t  echo >&2 -e \"${1-}\"\n\tfi\n}\n\ndie() {\n\tlocal msg=$1\n\tlocal code=${2-1} # default exit status 1\n\tmsg \"$msg\"\n\texit \"$code\"\n}\n\nparse_params() {\n\t# default values of variables set from params\n\tupdate=false\n\n\twhile :; do\n\t\tcase \"${1-}\" in\n\t\t-h | --help) usage ;;\n\t\t-v | --verbose) set -x ;;\n\t\t-d | --dry-run) dry_run=true ;;\n\t\t--no-color) NO_COLOR=1 ;;\n\t\t-u | --update) update=true ;; # update flag\n\t\t-n) true ;;                   # This is a legacy option, now default behaviour\n\t\t-?*) die \"Unknown option: $1\" ;;\n\t\t*) break ;;\n\t\tesac\n\t\tshift\n\tdone\n\n\treturn 0\n}\n\nparse_params \"$@\"\nsetup_colors\n\ndeleteCaches() {\n\tlocal cacheName=$1\n\tshift\n\tlocal paths=(\"$@\")\n\techo \"Initiating cleanup ${cacheName} cache...\"\n\tfor folderPath in \"${paths[@]}\"; do\n\t\tif [[ -d ${folderPath} ]]; then\n\t\t\tdirSize=$(du -hs \"${folderPath}\" | awk '{print $1}')\n\t\t\techo \"Deleting ${folderPath} to free up ${dirSize}...\"\n\t\t\trm -rfv \"${folderPath}\"\n\t\tfi\n\tdone\n}\n\nbytesToHuman() {\n\tb=${1:-0}\n\td=''\n\ts=1\n\tS=(Bytes {K,M,G,T,E,P,Y,Z}iB)\n\twhile ((b > 1024)); do\n\t\td=\"$(printf \".%02d\" $((b % 1024 * 100 / 1024)))\"\n\t\tb=$((b / 1024))\n\t\t((s++))\n\tdone\n\tif [ -z \"$dry_results\" ]; then\n    msg \"$b$d ${S[$s]} of space was cleaned up\"\n  else\n    msg \"Approx $b$d ${S[$s]} of space will be cleaned up\"\n  fi\n}\n\ncount_dry() {\n  for path in \"${path_list[@]}\"; do\n    if [ -d \"$path\" ] || [ -f \"$path\" ]; then\n      temp_dry_results=$(sudo du -ck \"$path\" | tail -1 | awk '{ print $1 }')\n      dry_results=\"$((dry_results+temp_dry_results))\"\n    fi\n  done\n}\n\nremove_paths() {\n  if [ -z \"$dry_run\" ]; then\n    for path in \"${path_list[@]}\"; do\n      rm -rfv \"$path\" &>/dev/null\n    done\n    unset path_list\n  fi\n}\n\ncollect_paths() {\n  path_list+=(\"$@\")\n}\n\n# Ask for the administrator password upfront\nsudo -v\n\nHOST=$(whoami)\n\n# Keep-alive sudo until `mac-cleanup.sh` has finished\nwhile true; do\n\tsudo -n true\n\tsleep 60\n\tkill -0 \"$$\" || exit\ndone 2>/dev/null &\n\n# Enable extended regex\nshopt -s extglob\n\noldAvailable=$(df / | tail -1 | awk '{print $4}')\n\ncollect_paths /Volumes/*/.Trashes/*\ncollect_paths ~/.Trash/*\nmsg 'Emptying the Trash 🗑 on all mounted volumes and the main HDD...'\nremove_paths\n\ncollect_paths /Library/Caches/*\ncollect_paths /System/Library/Caches/*\ncollect_paths ~/Library/Caches/*\ncollect_paths /private/var/folders/bh/*/*/*/*\nmsg 'Clearing System Cache Files...'\nremove_paths\n\ncollect_paths /private/var/log/asl/*.asl\ncollect_paths /Library/Logs/DiagnosticReports/*\ncollect_paths /Library/Logs/CreativeCloud/*\ncollect_paths /Library/Logs/Adobe/*\ncollect_paths /Library/Logs/adobegc.log\ncollect_paths ~/Library/Containers/com.apple.mail/Data/Library/Logs/Mail/*\ncollect_paths ~/Library/Logs/CoreSimulator/*\nmsg 'Clearing System Log Files...'\nremove_paths\n\nif [ -d ~/Library/Logs/JetBrains/ ]; then\n  collect_paths ~/Library/Logs/JetBrains/*/\n  msg 'Clearing all application log files from JetBrains...'\n  remove_paths\nfi\n\nif [ -d ~/Library/Application\\ Support/Adobe/ ]; then\n  collect_paths ~/Library/Application\\ Support/Adobe/Common/Media\\ Cache\\ Files/*\n  msg 'Clearing Adobe Cache Files...'\n  remove_paths\nfi\n\nif [ -d ~/Library/Application\\ Support/Google/Chrome/ ]; then\n  collect_paths ~/Library/Application\\ Support/Google/Chrome/Default/Application\\ Cache/*\n  msg 'Clearing Google Chrome Cache Files...'\n  remove_paths\nfi\n\ncollect_paths ~/Music/iTunes/iTunes\\ Media/Mobile\\ Applications/*\nmsg 'Cleaning up iOS Applications...'\nremove_paths\n\ncollect_paths ~/Library/Application\\ Support/MobileSync/Backup/*\nmsg 'Removing iOS Device Backups...'\nremove_paths\n\ncollect_paths ~/Library/Developer/Xcode/DerivedData/*\ncollect_paths ~/Library/Developer/Xcode/Archives/*\ncollect_paths ~/Library/Developer/Xcode/iOS Device Logs/*\nmsg 'Cleaning up XCode Derived Data and Archives...'\nremove_paths\n\nif type \"xcrun\" &>/dev/null; then\n  if [ -z \"$dry_run\" ]; then\n    msg 'Cleaning up iOS Simulators...'\n    osascript -e 'tell application \"com.apple.CoreSimulator.CoreSimulatorService\" to quit' &>/dev/null\n    osascript -e 'tell application \"iOS Simulator\" to quit' &>/dev/null\n    osascript -e 'tell application \"Simulator\" to quit' &>/dev/null\n    xcrun simctl shutdown all &>/dev/null\n    xcrun simctl erase all &>/dev/null\n  else\n    collect_paths ~/Library/Developer/CoreSimulator/Devices/*/data/!(Library|var|tmp|Media)\n    collect_paths /Users/wah/Library/Developer/CoreSimulator/Devices/*/data/Library/!(PreferencesCaches|Caches|AddressBook)\n    collect_paths ~/Library/Developer/CoreSimulator/Devices/*/data/Library/Caches/*\n    collect_paths ~/Library/Developer/CoreSimulator/Devices/*/data/Library/AddressBook/AddressBook*\n  fi\nfi\n\n# support deleting Dropbox Cache if they exist\nif [ -d \"/Users/${HOST}/Dropbox\" ]; then\n  collect_paths ~/Dropbox/.dropbox.cache/*\n  msg 'Clearing Dropbox 📦 Cache Files...'\n  remove_paths\nfi\n\nif [ -d ~/Library/Application\\ Support/Google/DriveFS/ ]; then\n  collect_paths ~/Library/Application\\ Support/Google/DriveFS/[0-9a-zA-Z]*/content_cache\n  msg 'Clearing Google Drive File Stream Cache Files...'\n  killall \"Google Drive File Stream\"\n  remove_paths\nfi\n\nif type \"composer\" &>/dev/null; then\n  if [ -z \"$dry_run\" ]; then\n    msg 'Cleaning up composer...'\n    composer clearcache --no-interaction &>/dev/null\n  else\n    collect_paths ~/Library/Caches/composer\n  fi\nfi\n\n# Deletes Steam caches, logs, and temp files\n# -Astro\nif [ -d ~/Library/Application\\ Support/Steam/ ]; then\n  collect_paths ~/Library/Application\\ Support/Steam/appcache\n  collect_paths ~/Library/Application\\ Support/Steam/depotcache\n  collect_paths ~/Library/Application\\ Support/Steam/logs\n  collect_paths ~/Library/Application\\ Support/Steam/steamapps/shadercache\n  collect_paths ~/Library/Application\\ Support/Steam/steamapps/temp\n  collect_paths ~/Library/Application\\ Support/Steam/steamapps/download\n  msg 'Clearing Steam Cache, Log, and Temp Files...'\n  remove_paths\nfi\n\n# Deletes Minecraft logs\n# -Astro\nif [ -d ~/Library/Application\\ Support/minecraft ]; then\n  collect_paths ~/Library/Application\\ Support/minecraft/logs\n  collect_paths ~/Library/Application\\ Support/minecraft/crash-reports\n  collect_paths ~/Library/Application\\ Support/minecraft/webcache\n  collect_paths ~/Library/Application\\ Support/minecraft/webcache2\n  collect_paths ~/Library/Application\\ Support/minecraft/crash-reports\n  collect_paths ~/Library/Application\\ Support/minecraft/*.log\n  collect_paths ~/Library/Application\\ Support/minecraft/launcher_cef_log.txt\n  if [ -d ~/Library/Application\\ Support/minecraft/.mixin.out ]; then\n    collect_paths ~/Library/Application\\ Support/minecraft/.mixin.out\n  fi\n  msg 'Clearing Minecraft Cache and Log Files...'\n  remove_paths\nfi\n\n# Deletes Lunar Client logs (Minecraft alternate client)\n# -Astro\nif [ -d ~/.lunarclient ]; then\n  collect_paths ~/.lunarclient/game-cache\n  collect_paths ~/.lunarclient/launcher-cache\n  collect_paths ~/.lunarclient/logs\n  collect_paths ~/.lunarclient/offline/*/logs\n  collect_paths ~/.lunarclient/offline/files/*/logs\n  msg 'Deleting Lunar Client logs and caches...'\n  remove_paths\nfi\n\n# Deletes Wget logs\n# -Astro\nif [ -d ~/wget-log ]; then\n  collect_paths ~/wget-log\n  collect_paths ~/.wget-hsts\n  msg 'Deleting Wget log and hosts file...'\n  remove_paths\nfi\n\n# Deletes Cacher logs\n# I dunno either\n# -Astro\nif [ -d ~/.cacher ]; then\n  collect_paths ~/.cacher/logs\n  msg 'Deleting Cacher logs...'\n  remove_paths\nfi\n\n# Deletes Android (studio?) cache\n# -Astro\nif [ -d ~/.android ]; then\n  collect_paths ~/.android/cache\n  msg 'Deleting Android cache...'\n  remove_paths\nfi\n\n# Clears Gradle caches\n# -Astro\nif [ -d ~/.gradle ]; then\n  collect_paths ~/.gradle/caches\n  msg 'Clearing Gradle caches...'\n  remove_paths\nfi\n\n# Deletes Kite Autocomplete logs\n# -Astro\nif [ -d ~/.kite ]; then\n  collect_paths ~/.kite/logs\n  msg 'Deleting Kite logs...'\n  remove_paths\nfi\n\nif type \"brew\" &>/dev/null; then\n  if [ \"$update\" = true ]; then\n    msg 'Updating Homebrew Recipes...'\n    brew update &>/dev/null\n    msg 'Upgrading and removing outdated formulae...'\n    brew upgrade &>/dev/null\n  fi\n  collect_paths \"$(brew --cache)\"\n  msg 'Cleaning up Homebrew Cache...'\n  if [ -z \"$dry_run\" ]; then\n    brew cleanup -s &>/dev/null\n    remove_paths\n    brew tap --repair &>/dev/null\n  else\n    remove_paths\n  fi\nfi\n\nif type \"gem\" &>/dev/null; then  # TODO add count_dry\n  if [ -z \"$dry_run\" ]; then\n    msg 'Cleaning up any old versions of gems'\n    gem cleanup &>/dev/null\n  fi\nfi\n\nif type \"docker\" &>/dev/null; then  # TODO add count_dry\n  if [ -z \"$dry_run\" ]; then\n    if ! docker ps >/dev/null 2>&1; then\n      close_docker=true\n      open --background -a Docker\n    fi\n    msg 'Cleaning up Docker'\n    docker system prune -af &>/dev/null\n    if [ \"$close_docker\" = true ]; then\n      killall Docker\n    fi\n  fi\nfi\n\nif [ \"$PYENV_VIRTUALENV_CACHE_PATH\" ]; then\n  collect_paths \"$PYENV_VIRTUALENV_CACHE_PATH\"\n  msg 'Removing Pyenv-VirtualEnv Cache...'\n  remove_paths\nfi\n\nif type \"npm\" &>/dev/null; then\n  if [ -z \"$dry_run\" ]; then\n    msg 'Cleaning up npm cache...'\n    npm cache clean --force &>/dev/null\n  else\n    collect_paths ~/.npm/*\n  fi\nfi\n\nif type \"yarn\" &>/dev/null; then\n  if [ -z \"$dry_run\" ]; then\n    msg 'Cleaning up Yarn Cache...'\n    yarn cache clean --force &>/dev/null\n  else\n    collect_paths ~/Library/Caches/yarn\n  fi\nfi\n\nif type \"pnpm\" &>/dev/null; then\n  if [ -z \"$dry_run\" ]; then\n    msg 'Cleaning up pnpm Cache...'\n    pnpm store prune &>/dev/null\n  else\n    collect_paths ~/.pnpm-store/*\n  fi\nfi\n\nif type \"pod\" &>/dev/null; then\n  if [ -z \"$dry_run\" ]; then\n    msg 'Cleaning up Pod Cache...'\n    pod cache clean --all &>/dev/null\n  else\n    collect_paths ~/Library/Caches/CocoaPods\n  fi\nfi\n\nif type \"go\" &>/dev/null; then\n  if [ -z \"$dry_run\" ]; then\n    msg 'Clearing Go module cache...'\n    go clean -modcache &>/dev/null\n  else\n    if [ -n \"$GOPATH\" ]; then\n      collect_paths \"$GOPATH/pkg/mod\"\n    else\n      collect_paths ~/go/pkg/mod\n    fi\n  fi\nfi\n\n# Deletes all Microsoft Teams Caches and resets it to default - can fix also some performance issues\n# -Astro\nif [ -d ~/Library/Application\\ Support/Microsoft/Teams ]; then\n  collect_paths ~/Library/Application\\ Support/Microsoft/Teams/IndexedDB\n  collect_paths ~/Library/Application\\ Support/Microsoft/Teams/Cache\n  collect_paths ~/Library/Application\\ Support/Microsoft/Teams/Application\\ Cache\n  collect_paths ~/Library/Application\\ Support/Microsoft/Teams/Code\\ Cache\n  collect_paths ~/Library/Application\\ Support/Microsoft/Teams/blob_storage\n  collect_paths ~/Library/Application\\ Support/Microsoft/Teams/databases\n  collect_paths ~/Library/Application\\ Support/Microsoft/Teams/gpucache\n  collect_paths ~/Library/Application\\ Support/Microsoft/Teams/Local\\ Storage\n  collect_paths ~/Library/Application\\ Support/Microsoft/Teams/tmp\n  collect_paths ~/Library/Application\\ Support/Microsoft/Teams/*logs*.txt\n  collect_paths ~/Library/Application\\ Support/Microsoft/Teams/watchdog\n  collect_paths ~/Library/Application\\ Support/Microsoft/Teams/*watchdog*.json\n  msg 'Deleting Microsoft Teams logs and caches...'\n  remove_paths\nfi\n\n# Deletes Poetry cache\nif [ -d ~/Library/Caches/pypoetry ]; then\n  collect_paths ~/Library/Caches/pypoetry\n  msg 'Deleting Poetry cache...'\n  remove_paths\nfi\n\n# Removes Java heap dumps\ncollect_paths ~/*.hprof\nmsg 'Deleting Java heap dumps...'\nremove_paths\n\nif [ -z \"$dry_run\" ]; then\n  msg 'Cleaning up DNS cache...'\n  sudo dscacheutil -flushcache &>/dev/null\n  sudo killall -HUP mDNSResponder &>/dev/null\nfi\n\nif [ -z \"$dry_run\" ]; then\n  msg 'Purging inactive memory...'\n  sudo purge &>/dev/null\nfi\n\n# Disables extended regex\nshopt -u extglob\n\nif [ -z \"$dry_run\" ]; then\n  msg \"${GREEN}Success!${NOFORMAT}\"\n\n  newAvailable=$(df / | tail -1 | awk '{print $4}')\n  count=$((newAvailable - oldAvailable))\n  bytesToHuman $count\n  cleanup\nelse\n  count_dry\n  unset dry_run\n  bytesToHuman \"$dry_results\"\n  msg \"Continue? [enter]\"\n  read -r -s -n 1 clean_dry_run\n  if [[ $clean_dry_run = \"\" ]]; then\n    if [ \"$update\" = true ]; then\n      exec \"$0\" --update\n    else\n      exec \"$0\"\n    fi\n  fi\n  cleanup\nfi\n"
        }
      ]
    }
  ]
}