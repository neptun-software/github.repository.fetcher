{
  "metadata": {
    "timestamp": 1736568818166,
    "page": 979,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk4OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ku1ik/bitpocket",
      "stars": 1029,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.013671875,
          "content": "/bin\n/.bundle\n"
        },
        {
          "name": ".rspec",
          "type": "blob",
          "size": 0.0087890625,
          "content": "--colour\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.029296875,
          "content": "language: ruby\nrvm:\n  - 1.9.3\n"
        },
        {
          "name": "Gemfile",
          "type": "blob",
          "size": 0.09765625,
          "content": "source \"https://rubygems.org\"\n\ngem 'rake'\ngem 'rspec'\ngem 'guard'\ngem 'guard-rspec'\ngem 'libnotify'\n"
        },
        {
          "name": "Gemfile.lock",
          "type": "blob",
          "size": 0.5556640625,
          "content": "GEM\n  remote: https://rubygems.org/\n  specs:\n    diff-lcs (1.1.3)\n    ffi (1.0.11)\n    guard (1.0.1)\n      ffi (>= 0.5.0)\n      thor (~> 0.14.6)\n    guard-rspec (0.7.0)\n      guard (>= 0.10.0)\n    libnotify (0.7.1)\n      ffi (~> 1.0.0)\n    rake (0.9.2.2)\n    rspec (2.9.0)\n      rspec-core (~> 2.9.0)\n      rspec-expectations (~> 2.9.0)\n      rspec-mocks (~> 2.9.0)\n    rspec-core (2.9.0)\n    rspec-expectations (2.9.0)\n      diff-lcs (~> 1.1.3)\n    rspec-mocks (2.9.0)\n    thor (0.14.6)\n\nPLATFORMS\n  ruby\n\nDEPENDENCIES\n  guard\n  guard-rspec\n  libnotify\n  rake\n  rspec\n"
        },
        {
          "name": "Guardfile",
          "type": "blob",
          "size": 0.2236328125,
          "content": "# A sample Guardfile\n# More info at https://github.com/guard/guard#readme\n\nguard 'rspec', :version => 2, :cli => \"-f progress --color\", :binstubs => true do\n  watch(%r{^spec/.+_spec\\.rb$})\n  watch('bin/bitpocket') { 'spec' }\nend\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.0361328125,
          "content": "Copyright (c) 2011-2012 Marcin Kulik\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.8515625,
          "content": "# bitpocket\n\n## About\n\n**bitpocket** is a small but smart script that does 2-way directory\nsynchronization. It uses _rsync_ to do efficient data transfer and tracks local\nfile creation/removal to avoid known rsync problem when doing 2-way syncing\nwith deletion.\n\nbitpocket can use any server which you have ssh access to for its central\nstorage. If you have gigabytes of free disk space on your hosting server you\ncan finally make use of it.\n\n\n## Installation\n\nClone repository and symlink `bitpocket` bin to sth in your `$PATH`:\n\n    $ git clone git://github.com/ku1ik/bitpocket.git\n    $ ln -s `pwd`/bitpocket/bin/bitpocket ~/bin/bitpocket\n\nOr download script and place it in a directory in your `$PATH`:\n\n    $ curl -sL https://raw.github.com/ku1ik/bitpocket/master/bin/bitpocket > ~/bin/bitpocket\n    $ chmod +x ~/bin/bitpocket\n\n\n### Setting up master\n\nCreate an empty directory on some host that will be the master copy of your files:\n\n    $ ssh user@example.org\n    $ mkdir ~/BitPocketMaster\n\n\n### Setting up slaves\n\nOn each machine you want to synchronize initialize an empty directory as your bitpocket:\n\n    $ mkdir ~/BitPocket\n    $ cd ~/BitPocket\n    $ bitpocket init user@example.org ~/BitPocketMaster\n\n\n## Usage\n\nAfter installation, you use the `bitpocket` command for synchronization and other tasks.\nRunning `bitpocket help` will display the following message.\n\n    usage:  bitpocket { init [<REMOTE_HOST>] <REMOTE_PATH>\n                      | sync | help | pack | log | cron | list }\n\n    Available commands:\n       sync    Run the sync process. If no command is specified, sync is run by\n               default.\n       init    Initialize a new bitpocket folder. Requires path and optional\n               remote host params. Remote path must already exist.\n       pack    Pack any existing (automatic) backups into a git repository.\n       cron    Run sync optimized for cron, logging output to file instead of\n               stdout.\n       log     Display the log generated by the cron command\n       list    List all files in the sync set (honoring include/exclude/filter\n               config).\n       help    Show this message.\n\n    Options:\n       -f, --force      Clean up stale lock files automatically\n       -p, --pretend    Don't really perform the sync or update the current\n                        state. Instead, show what would be synchronized.\n\n    Note: All commands (apart from help), must be run in the root of a\n          new or existing bitpocket directory structure.\n\n### Manual sync (bitpocket sync)\n\nTo synchronize your local slave with master just run _bitpocket sync_ inside your\nbitpocket directory:\n\n    $ cd ~/BitPocket\n    $ bitpocket sync\n\nEnsure that you run bitpocket at least once immediately after creating a new slave and\nbefore adding new files to the slave directory. If there are files in the master they\nwill be pulled into the slave.  You may then move files into your slave directory and \nthey will be detected as added.\n\n\n### Maintaining backups (bitpocket pack)\n\nbitpocket does not include a full-fledged versioning system at the moment, but\nit does automatically create a local backup of any files before overwriting or \ndeleting with changes from the BitPocketMaster. These backups are placed into a \ntimestamped directory (one directory per sync). The path to this directory is:\n\n    .bitpocket/backups/YYYY-MM-DD.hhmmss\n\nAs these files accumulate, you may want to remove them, but you can also run\n`bitpocket pack` to combine all the backup files into a git repository contained\nwithin the _.bitpocket_ directory:\n\n    $ cd ~/BitPocket\n    $ bitpocket pack\n\nThis requires an installation of _git_, but\nallows all the space saving advantages of _git_ when making repeated changes\nto the same files.\n\nThere is a discussion about potential directions for versioning direction here:\n[github.com/ku1ik/bitpocket/issues/15](https://github.com/ku1ik/bitpocket/issues/15)\n\n\n### Redirecting output to log file (bitpocket cron)\n\nIf bitpocket is run with the cron parameter ( _bitpocket cron_ ), it will perform\na sync, but instead of showing the progress on stdout, it will redirect all \noutput to a log file: \n\n    $ cd ~/BitPocket\n    $ bitpocket cron\n\nAs the name of this parameter implies, this is mainly useful when running bitpocket\nthrough the _cron_ command. (See \"Automatic sync with cron\" for more information \nabout how to configure this).\n\n\n### Displaying logs (bitpocket log)\n\nWhen running bitpocket in cron with `bitpocket cron` it will append its output\nto _.bitpocket/log_ file. You can review the tail end of an existing log file,\nor watch live log as it is generated, with following command:\n\n    $ cd ~/BitPocket\n    $ bitpocket log\n\n\n### Displaying list of files to be synchronized (bitpocket list)\n\nYou may want to know which files will be synchronized before actually performing\nthe syncronization. You can verify which files are in the synchronization set\nby running `bitpocket list`:\n\n    $ cd ~/BitPocket\n    $ bitpocket list\n\nNote that this does _not_ list changed files, it only lists all the local files \nthat bitpocket will look at in determining which files to sync. Also, note that\nif there are new files in the master that will be added on a sync, they will \nnot be included here. This command is only intended to verify which files are\nin the synchronization set. (See \"Configuring file exclusion and inclusion\" for\ninformation about how to control which files are in the synchronization set).\n\n\n## Configuration\n\n### Automatic sync with cron\n\nAdd following line to your crontab to synchronize every 5 minutes:\n\n    */5 * * * * cd ~/BitPocket && nice ~/bin/bitpocket cron\n\nNote that cron usually has very limited environment and your ssh keys with\npassphrases won't work in cron jobs as ssh-agents/keyrings don't work there.\nThus it's preferable to generate passphrase-less ssh key for bitpocket\nauthentication:\n\n    $ cd ~/BitPocket\n    $ ssh-keygen -t rsa -C bitpocket-`hostname` -N '' -f .bitpocket/id_rsa\n    $ ssh-copy-id -i .bitpocket/id_rsa user@example.org\n\nand uncomment line with `RSYNC_SSH` in _.bitpocket/config_ file.\n\n\n### Configuring file exclusion and inclusion\n\nIf you want some files to be ignored by bitpocket you can create\n_.bitpocket/exclude_ file and list the paths there:\n\n    *.avi\n    jola\n    /misio.txt\n\n_*.avi_ and _jola_ will be matched anywhere in path, _misio.txt_ will be\nmatched at bitpocket root dir ( _~/BitPocket/misio.txt_ ).\n\nThis exclude file is passed to `rsync` as `--exclude-from` argument, check `man\nrsync` for _INCLUDE/EXCLUDE PATTERN RULES_.\n\nYou can set up even more advanced exclusion/inclusion rules. In all, there\nthere are three files that you can create to change this configuration:\n\n    .bitpocket/exclude\n    .bitpocket/include\n    .bitpocket/filter\n\nBe aware that all the quirks from rsync exclusion/inclusion rules carry over\ninto bitpocket. If you decide that you need such advanced configuration, make\nsure that you understand those rules very well, and consider double checking\nthem before syncing by running `bitpocket list`.\n\n### Backup options\n\nBoth local and remote backups can be enabled or disabled in the configuration.\nBy default, local backups are enabled and remote backups are not. Based on how\nintend to use bitpocket, you may wish to change this behavior. Add or change\nthese lines in your _.bitpocket/config_ file:\n\n    # BACKUPS=true\n    # REMOTE_BACKUPS=false\n\n### Custom rsync options\n\nYou can pass additional switches to `rsync` by setting `RSYNC_OPTS` in\n_.bitpocket/config_ file. Generated config file includes (commented out)\nexample setting for dereferencing symlinks:\n\n    # RSYNC_OPTS=\"-L\"\n\nJust uncomment it and change at will.\n\n\n### Slow sync callbacks\n\nWhen syncing takes more than 10 seconds (SLOW\\_SYNC\\_TIME setting) bitpocket\ncan fire off user provided command in background. This can be usefull to notify\nuser about long sync happening, preventing him from turning off the machine\nduring sync etc.\n\nThere are 3 settings that can be enabled in _.bitpocket/config_ file:\n\n    # SLOW_SYNC_TIME=10\n    # SLOW_SYNC_START_CMD=\"notify-send 'BitPocket sync in progress...'\"\n    # SLOW_SYNC_STOP_CMD=\"notify-send 'BitPocket sync finished'\"\n\nJust uncomment them and change at will.\n\nYou can show tray icon during long sync with\n[traytor](https://github.com/ku1ik/traytor) and following settings:\n\n    SLOW_SYNC_START_CMD='~/bin/traytor -t \"BitPocket syncing...\" -c \"xdg-open .\" .bitpocket/icons & echo $! >.bitpocket/traytor.pid'\n    SLOW_SYNC_STOP_CMD='kill `cat .bitpocket/traytor.pid`'\n\n\n### Failsafes\n\nYou can add a remote mount point check to ensure a remote path is available\nprior to the sync running. If the folder is not mounted on the remote server,\nthen the sync will be aborted. The path must be an absolute path which is\nexpected to be a mountpoint on the remote server. Add or change this lines in\nyour _.bitpocket/config_ file:\n\n    # REMOTE_MOUNTPOINT=/\n\n## Author\n\n* Marcin Kulik | @ku1ik | https://github.com/ku1ik | http://ku1ik.com/\n* torfason | https://github.com/torfason\n"
        },
        {
          "name": "Rakefile",
          "type": "blob",
          "size": 0.12890625,
          "content": "require \"rspec/core/rake_task\"\n\nRSpec::Core::RakeTask.new(:tests) do |t|\n  t.rspec_opts = %w{--colour}\nend\n\ntask :default => :tests\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "spec",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}