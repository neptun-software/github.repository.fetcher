{
  "metadata": {
    "timestamp": 1736568543598,
    "page": 559,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU2OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "m-ab-s/media-autobuild_suite",
      "stars": 1578,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1005859375,
          "content": "# Auto detect text files and perform LF normalization\n* text=auto\n*.bat text eol=crlf\n*.sh text eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5283203125,
          "content": "#################\n## media-autobuild_suite\n#################\n\n## ignore media-autobuild_suite folders and local specific files\n\n/build/*\n/local32/\n/local64/\n/msys64/\n/msys32/\n\nmintty.lnk\nupdate_suite.sh\n!build/bash.ps1\n!build/*.sh\n!build/patches/\n!build/extras/\n/build/post_suite.sh\n\n## VS Code\n.vscode\n\n#############\n## Windows detritus\n#############\n\n# Windows image file caches\nThumbs.db\nehthumbs.db\n\n# Folder config file\nDesktop.ini\n\n# Recycle Bin used on file shares\n$RECYCLE.BIN/\n\n# Mac crap\n.DS_Store\n\n# Ignore extra files\n*_extra.sh\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 34.32421875,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<https://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<https://www.gnu.org/licenses/why-not-lgpl.html>."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 20.11328125,
          "content": "# media-autobuild_suite\n\nBefore opening an issue, check if it's an issue directly from executing the suite. This isn't Doom9, reddit, stackoverflow or any other forum for general questions about the things being compiled. This script builds them, that's all.\n\nThis source code is also mirrored in [GitLab](https://gitlab.com/RiCON/media-autobuild_suite).\n\nMost git sources in the suite use GitHub, so if it's down, it's probably useless to run the suite at that time.\n\n## Download\n\n**[Click here to download latest version](https://github.com/m-ab-s/media-autobuild_suite/archive/master.zip)**\n\nFor information about the compiler environment see the wiki, there you also have a example of how to compile your own tools.\n\n## Included Tools And Libraries\n\n### [Information about FFmpeg external libraries](https://github.com/m-ab-s/media-autobuild_suite/wiki/ffmpeg_options.txt)\n\n- FFmpeg (shared or static) with these libraries (all optional, but compiled by default unless said otherwise):\n    - Light build:\n        - amd amf encoders (built-in)\n        - cuda (built-in)\n        - cuda-llvm (built-in)\n        - cuvid (built-in)\n        - ffnvcodec (git)\n        - libaom (git)\n        - libdav1d (git)\n        - libfdk-aac (git)\n            - needs non-free license if not LGPL\n        - libmp3lame (mingw-w64)\n        - libopus (mingw-w64)\n        - libvorbis (mingw-w64)\n        - libvpx (git)\n        - libx264 (git)\n        - libx265 (git)\n        - nvdec (built-in)\n        - nvenc (built-in)\n        - schannel with gmp (mingw-w64)\n            - enabled by default if openssl, libtls, mbedtls or gnutls aren't enabled\n            - gmp can be switched by gcrypt (mingw-w64) with --enable-gcrypt\n        - sdl2 (git tag) (needed for ffplay)\n            - enabled by default, use --disable-sdl2 if unneeded\n    - Zeranoe-emulating build (in addition to Light)\n        - avisynthplus (needs avisynth dll installed)\n        - fontconfig (latest release)\n        - only one of these TLS libs (including schannel) can be enabled at once:\n            - openssl (mingw-w64)\n                - preferred to gnutls and to libtls if all three are in options\n                - needs non-GPL license\n            - libtls (from libressl) (latest release)\n                - needs non-GPL license\n            - mbedtls (mingw-w64)\n                - preferred to gnutls if GPLv3 license is chosen\n            - gnutls (3.8.5)\n        - libass (git)\n            - by default with DirectWrite backend\n            - if --enable-fontconfig, fontconfig backend included\n            - with harfbuzz (git)\n        - libbluray (git)\n            - BD-J support requires installation of Java JDK\n            - BD-J support after compilation probably only requires JRE (untested)\n        - libfreetype (latest release)\n        - libgsm (mingw-w64)\n        - libmfx (git)\n        - libmodplug (mingw-w64)\n        - libopencore-amr(nb/wb) (mingw-w64)\n        - libopenjpeg2 (mingw-w64)\n        - libopenmpt (git tag)\n        - librav1e (git)\n        - libsnappy (mingw-w64)\n        - libsoxr (git)\n        - libspeex (mingw-w64)\n        - libsrt (git)\n        - libsvtav1 (git)\n        - libtheora (mingw-w64)\n        - libtwolame (mingw-w64)\n        - libvidstab (git)\n        - libvmaf (git)\n        - libvo-amrwbenc (0.1.3)\n        - libwebp (git)\n        - libxml2 (mingw-w64)\n        - libxvid (git)\n        - libzimg (git)\n    - Full build (in addition to Zeranoe)\n        - chromaprint (mingw-w64)\n        - cuda filters (needs CUDA SDK installed)\n            - needs non-free license\n        - decklink (12.5.1)\n            - needs non-free license\n        - frei0r (git)\n        - ladspa (mingw-w64)\n        - libaribb24 (git)\n        - libbs2b (3.1.0)\n        - libcaca (mingw-w64)\n        - libcdio (mingw-w64)\n        - libcodec2 (git)\n        - libdavs2 (git)\n        - libflite (git)\n        - libfribidi (git)\n        - libglslang (git)\n        - libgme (0.6.3)\n        - libilbc (git)\n        - libjxl (git)\n        - libkvazaar (git)\n        - libmysofa (git)\n            - needed for sofalizer filter\n        - libnpp (needs CUDA SDK installed)\n            - needs non-free license\n        - libopenh264 (official binaries)\n        - librist (git)\n        - librtmp (git)\n        - librubberband (git)\n        - libssh (broken)\n        - libsvthevc (git) (using non-upstream patch)\n        - libsvtvp9 (git) (using non-upstream patch)\n        - libtesseract (git)\n        - libuavs3d (git)\n        - libxavs (git)\n        - libxavs2 (git)\n        - libzmq (mingw-w64)\n        - libzvbi (git)\n        - openal (git)\n        - opencl (from system)\n        - opengl (from system)\n        - vapoursynth (R70)\n        - vulkan (git)\n\n- other tools\n    - aom (git)\n    - av1an (git)\n        - requires installation of [64-bit Python 3.8.x/3.12.x](https://www.python.org/downloads/) and [Vapoursynth](https://github.com/vapoursynth/vapoursynth/releases/latest)\n    - bmx (git)\n    - curl (git) with WinSSL/LibreSSL/OpenSSL/mbedTLS/GnuTLS backend\n    - cyanrip (git)\n    - dav1d (git)\n    - dssim (git)\n    - exhale (git)\n    - faac (git)\n    - fdk-aac (git)\n    - ffmbc (git) (unsupported)\n    - flac (git)\n    - haisrt tools (git)\n    - jo (git)\n    - jpeg-xl tools (git)\n    - jq (git)\n    - kvazaar (git)\n    - lame (3.100)\n    - libaacs (git) (shared)\n    - libavif (git) with following encoders/decoders:\n        - aom (enc/dec)\n        - dav1d (dec only)\n        - rav1e (enc only)\n        - svt-av1 (enc only)\n    - libbdplus (git) (shared)\n    - mediainfo cli (git)\n    - mp4box (git)\n    - mplayer (svn) (unsupported)\n    - mpv (git) including in addition to ffmpeg libs:\n        - Base build (ffmpegChoice=2 or 3)\n            - ANGLE Headers (git)\n                - requires ANGLE shared libraries from somewhere else (i.e. Chrome, Firefox) for gpu-context=angle support\n            - lcms2 (mingw-w64)\n            - libass (git)\n            - libbluray (git)\n                - BD-J support requires installation of Java JDK\n                - BD-J support after compilation probably only requires JRE (untested)\n            - luajit (git)\n            - mujs (git)\n            - rubberband (git snapshot)\n            - uchardet (mingw-w64)\n            - vulkan, shaderc, spirv-cross, libplacebo (git)\n            - vapoursynth (R52)\n        - Full build (ffmpegChoice=4)\n            - dvdnav (git)\n            - libarchive (mingw-w64)\n            - shared libmpv\n            - openal (git)\n    - opus-tools (git)\n    - rav1e (git)\n    - ripgrep (git)\n    - rtmpdump (git)\n    - sox (git)\n    - speex (git)\n    - svt-av1 (git)\n    - svt-hevc (git)\n    - tesseract (git)\n    - uvg266 (git)\n    - vlc (git) (broken)\n    - vvenc & vvdec (git)\n    - vorbis-tools (git)\n    - vpx (VP8 and VP9 8, 10 and 12 bit) (git)\n    - vvc tools (git)\n    - webp tools (git)\n    - x264 (8 and 10 bit, with l-smash [mp4 output], lavf and ffms2) (git)\n    - x265 (8, 10 and 12 bit) (git)\n    - xvc (git) (unsupported)\n    - xvid (git)\n\n--------\n\n## Requirements\n\n--------\n\n- Windows 64-bits (tested with Win10 & Win11 64-bits)\n  - 32-bit hosts are not supported.\n- NTFS drive\n- 23GB+ disk space for a full 32 and 64-bit build, 18GB+ for 64-bit\n- 4GB+ RAM\n- At least Powershell 4, Powershell core is not supported at this time\n  - Powershell 5.1 can be downloaded [here](https://www.microsoft.com/en-us/download/details.aspx?id=54616)\n\n--------\n\n## Information\n\n--------\n\nThis tool is inspired by the very nice, linux cross-compiling tool from Roger Pack (rdp):\n<https://github.com/rdp/ffmpeg-windows-build-helpers>\n\nIt is based on msys2 and tested under Windows 8.1, 10 and 11.\n<http://sourceforge.net/projects/msys2/>\n\nI use some jscript parts from nu774:\n<https://github.com/nu774/fdkaac_autobuild>\n\nThanks to all of them!\n\nThis Windows Batchscript setups a Mingw-w64/GCC compiler environment for building ffmpeg and other media tools under Windows.\nAfter building the environment it retrieves and compiles all tools. All tools get static compiled, no external .dlls needed (with some optional exceptions)\n\nHow to use it:\n\n- Download the file, and extract it to your target folder or `git clone` the project. Compilers and tools will get installed there. Please make sure you use a folder with a short path and without space characters. A good place might be: C:\\mabs\n- Double click the media-autobuild_suite.bat file\n- Select if you want to compile for Windows 32-bit, 64-bit or both\n- Select if you want to compile non-free tools like \"fdk-aac\"\n- Select the numbers of CPU (cores) you want to use\n- Wait a little bit, and hopefully after a while you'll find all your \"*.exe\" tools under local[32|64]\\bin-(audio|global|video)\n\nThe script writes an .ini file at /build/media-autobuild_suite.ini, so you only need to make these choices the first time what you want to build.\n\nThe script doesn't build any registry key or system variables, when you don't need it any more you can delete the folder and your system will be clean. Building everything from scratch takes about ~3 hours depending on how many CPU cores are utilized and what is enabled.\n\nCheck [forcing-recompilations](./doc/forcing-recompilations.md) for documentation on how you can force a rebuild of all libs/binaries.\n\nTo save a bit of space after compiling, you can delete all source folders (except the folders with a \"-git\" or \"-svn\" on end) in /build. There's an option in the .bat for the script to remove these folders automatically. To save even more space, you can delete /msys64 after compiling. If the suite is run after /msys64 has been deleted, it will download again.\n\nHave fun!\n\n## Troubleshooting\n\n--------\n\nIf there's some error during compilation follow these steps:\n\n1. Make sure you're using the latest version of this suite by downloading the [latest version](https://github.com/m-ab-s/media-autobuild_suite/archive/master.zip) and replacing all files with the new ones;\n2. If you know which part it's crashing on, delete that project's folder in /build and run the script again (ex: if x264 is failing, try deleting x264-git folder in /build);\n3. If it still doesn't work, [create an issue](https://github.com/m-ab-s/media-autobuild_suite/issues/new) and paste the URL to `logs.zip` that the script gives or attach the file yourself to the issue page.\n4. If the problem isn't reproducible by the contributors of the suite, it's probably a problem on your side. Delete /msys64 and /local[32|64] if they exist. /build is usually safe to keep and saves time;\n5. If the problem is reproducible, it could be a problem with the package itself or the contributors will find a way to probably make it work.\n6. If you compile with `--enable-libnpp` and/or `--enable-cuda-nvcc`, see [Notes about CUDA SDK](#notes-about-cuda-sdk)\n\n## What The Individual Files Do\n\n--------\n\n`media-autobuild_suite.bat`\n\n- This file sets up the msys2 system and the compiler environment. For normal use you only have to start this file. Every time you start this batch file it runs through the process, but after the first time it only checks some variables and run updates to the MinGW environment. After that it only compiles the tools that get updates from git.\n\n`/build/media-autobuild_suite.ini`\n\n- This file get generated after the first start and saves the settings that you have selected. Before the next run you can edit it.\n\n`/build/media-suite_compile.sh`\n\n- This is the compiling script, it builds all the libs and tools we want, like ffmpeg; mplayer; etc. You can also inspect it and see how to compile your own tools. Normally you can copy the code and paste it in the mintty shell (except `make -j $cpuCount`, here you need to put your cpu count). You don't need to start this script, it's called by the batch script.\n\n`/build/media-suite_update.sh`\n\n- This script runs every time you run the batch file. It checks for updates from msys2's pacman etc.\n\n`/build/media-suite_helper.sh`\n\n- This script contains helper functions used by compile and update that can also be `source`'d by the user if desired.\n\n`/build/media-suite_deps.sh`\n\n- This script contains the URLs for each git repo used by `build/media-suite_compile.sh`. These URLs can be appended with `#branch=BRANCH`, `#commit=COMMITHASH`, or `#tag=TAG` to build from a branch, commit, or tag respectively. They can also be replaced to build from forked repositories (For example, changing `SOURCE_REPO_SVTAV1=https://gitlab.com/AOMediaCodec/SVT-AV1.git` to `SOURCE_REPO_SVTAV1=https://github.com/gianni-rosato/svt-av1-psy.git`).\n\n`/build/ffmpeg_options.txt` & `/build/mpv_options.txt`\n\n- If you select the option to choose your own FFmpeg/mpv optional libraries, these files will contain options that get sent to FFmpeg/mpv's configure script before compiling. Edit them as you wish to get a custom FFmpeg/mpv with or without any features available, if supported by the suite.\n\n## Optional User Files\n\n--------\n\n`/local32|64/etc/custom_profile` & `$HOME/custom_build_options`\n\n- Put here any general/platform tweaks that you need for _your_ specific environment. See `/local32|64/etc/profile2.local` for example usage.\n\n## Custom Patches\n\n--------\n\nUsing custom patches is not officially supported, if you do use custom patches, do not expect much support from this suite. Either go to the patch's author or to a forum for help\n\n- It is assumed that you, the reader, have enough knowledge of bash specifically in order to understand some basic terminology. If not, please look up what you do not know.\n- It is highly recommended to look through the [compile script](build/media-suite_compile.sh) for the exact package you want to modify and cross-reference the functions with the [helper script](build/media-suite_compile.sh) to see what is actually being done.\n- Although it is recommended to use the functions provided in the helper script, there is nothing stopping you from using the actual commands.\n\n--------\n\n- To use a custom patch, within the build folder, create a script with the filename: `<repository's name>_extra.sh`.\n  - For ffmpeg, the folder name is ffmpeg-git, but the repository's name would be ffmpeg: `ffmpeg_extra.sh`.\n  - For game-music-emu, the folder name is game-music-emu-0.6.2, but the repository's name would be game-music-emu: `game-music-emu_extra.sh`\n  - Case-sensitivity applies, so for the folder name SVT-VP9-git (repo name SVT-VP9), the script filename would be: `SVT-VP9_extra.sh`\n\n- The commands will run in the cloned/unzipped folder unless otherwise stated. (flac_extra.sh would run commands within flac-git)\n\nTo reference the cloned folder itself (`flac-git` `ffmpeg-git`) you can use the variable `${REPO_DIR}`.\nTo reference the generated build folder, you would need to use `${REPO_DIR}/build-${bits}` to reference the build-64bit folder for 64 bit builds or build-32bit folder for 32 bit builds.\n\n- For some packages, the build folder may be slightly different (`build-shared-${bits}` for shared ffmpeg or `build-light-${bits}` for light build, etc. Try to compile at least once to see what folders are generated or look through the [compile script](build/media-suite_compile.sh))\n\nIf you are building for both 32 and 64-bit, you can gate certain commands using `if [[ $bits = 64bit ]]; then <command>; fi` to only run them when building for 64 bits.\\\nBe careful with certain packages due to their unique build process (x265, x264, and some others) so make sure to check the compile script\n\nExample Script: `/build/aom_extra.sh` for `aom-git`\n\n``` bash\n#!/bin/bash\n\n# Don't automatically run cmake || configure\ntouch do_not_reconfigure\n\n# Commands to run before running cmake\n_pre_cmake(){\n    # Installs libwebp\n    do_pacman_install libwebp\n    # Downloads the patch and then applies the patch\n    do_patch \"https://gist.githubusercontent.com/1480c1/9fa9292afedadcea2b3a3e067e96dca2/raw/50a3ed39543d3cf21160f9ad38df45d9843d8dc5/0001-Example-patch-for-learning-purpose.patch\"\n    # Change directory to the build folder\n    cd_safe \"build-${bits}\"\n    # Run cmake with custom options. This will override the previous cmake commands.\n    # $LOCALDESTDIR refers to local64 or local32\n    cmake .. -G\"Ninja\" -DCMAKE_INSTALL_PREFIX=\"$LOCALDESTDIR\" \\\n        -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=clang \\\n        -DBUILD_SHARED_LIBS=off -DENABLE_TOOLS=off\n}\n\n_post_cmake(){\n# post cmake and post configure will be unavailable due to \"touch do_not_reconfigure\"\n# as the do_not_reconfigure flag will skip the post commands.\n}\n\n# Commands to run before building using ninja\n_pre_ninja(){\n    # Change directory to the build folder (Absolute path or relative to aom-git)\n    cd_safe \"build-${bits}\"\n    # applies a local patch (Absolute or relative to aom-git)\n    do_patch \"My-Custom-Patches/test-diff-files.diff\"\n    # run a custom ninja command.\n    ninja aom_version_check\n    # Not necessary, but just for readability sake\n    cd_safe ..\n}\n\n```\n\nExample Script: `/build/ffmpeg_extra.sh` for `ffmpeg-git`\n\n``` bash\n#!/bin/bash\n\n# Force to the suite to think the package has updates to recompile.\n# Alternatively, you can use \"touch recompile\" for a similar effect.\ntouch custom_updated\n\n_pre_configure(){\n    #\n    # Apply a patch from ffmpeg's patchwork site.\n    do_patch \"https://patchwork.ffmpeg.org/patch/12563/mbox/\" am\n    #\n    # Apply a local patch inside the directory where is \"ffmpeg_extra.sh\"\n    patch -p1 -i \"$LOCALBUILDDIR/ffmpeg-0001-my_patch.patch\"\n    #\n    # Add extra configure options to ffmpeg (ffmpeg specific)\n    # If you want to add something to ffmpeg not within the suite already\n    # you will need to install it yourself, either through pacman\n    # or compiling from source.\n    FFMPEG_OPTS+=(--enable-libsvthevc)\n    #\n}\n\n_post_make(){\n    # Don't run configure again.\n    touch \"$(get_first_subdir -f)/do_not_reconfigure\"\n    # Don't clean the build folder on each successive run.\n    # This is for if you want to keep the current build folder as is and just recompile only.\n    touch \"$(get_first_subdir -f)/do_not_clean\"\n}\n```\n\nFor a list of possible directive, look under `unset_extra_script` in [media-suite_helper.sh](build/media-suite_helper.sh).\nBeware as they may change in the future.\n\n## Notes about CUDA SDK\n\n--------\n\n### This is for cuda-nvcc and libnpp, not for NVENC, it is built with ffmpeg by default\n\nFor `--enable-cuda-nvcc` and `--enable-libnpp` to work, you need NVIDIA's [CUDA SDK](https://developer.nvidia.com/cuda-toolkit) installed with `CUDA_PATH` variable to be set system-wide (Usually set by default on CUDA SDK install) and VS2017 or better installed which should come with `vswhere.exe`.\\\nIf for some reason `CUDA_PATH` isn't set and/or `vswhere.exe` isn't installed, you need to export the `CUDA_PATH` variable path using the above mentioned user files and manually export the correct `PATH` including the absolute `cygpath` converted path to MSVC's `cl.exe`.\n\n### You do not need to do the following if you installed the SDK with the default locations etc and you have 8.3 short paths enabled or if you installed to a directory without any spaces\n\nIf you did not understand any of the words above, assume the best and hope the compilation will succeed the first time, else try reinstalling the SDK and MSVC to a path without any spaces.\n\nYou will only need to be worried if running the following command in the mintty terminal produces a path with a space or if you have 8.3 short paths disabled.\n\n```bash\ncygpath -sm \"$CUDA_PATH\"\n```\n\nIf running the above command produces a path with a space, you will need to either disable cuda/npp stuff or reinstall your cuda sdk to a path without spaces.\n\n### Nothing should be disabled manually when installing CUDA SDK as disabling random things can cause the compilation to fail\n\nFor example, if you need to manually set the `CUDA_PATH` and include in the `PATH` the binaries for MSVC `cl.exe` and `nvcc.exe`, add this bit of bash script inside a text file in `/local64/etc/custom_profile`:\n\n```bash\n# adapt these to your environment\n_cuda_basepath=\"C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\"\n_cuda_version=10.0\n\n_msvc_basepath=\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\"\n_msvc_version=14.15.26726\n_msvc_hostarch=x64\n_msvc_targetarch=x64\n\n# you shouldn't need to change these unless your environment is weird or you know what you're doing\nexport CUDA_PATH=$(cygpath -sm \"${_cuda_basepath}\")/${_cuda_version}\nexport PATH=$PATH:$(dirname \"$(cygpath -u \"\\\\${_msvc_basepath}\\\\${_msvc_version}\\bin\\Host\\\\${_msvc_hostarch}\\\\${_msvc_targetarch}\\cl.exe\")\")\nexport PATH=$PATH:$CUDA_PATH/bin\n```\n"
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "media-autobuild_suite.bat",
          "type": "blob",
          "size": 83.61328125,
          "content": "@echo off\nrem -----------------------------------------------------------------------------\nrem LICENSE --------------------------------------------------------------------\nrem -----------------------------------------------------------------------------\nrem  This Windows Batchscript is for setup a compiler environment for building\nrem  ffmpeg and other media tools under Windows.\nrem\nrem    Copyright (C) 2013  jb_alvarado\nrem\nrem    This program is free software: you can redistribute it and/or modify\nrem    it under the terms of the GNU General Public License as published by\nrem    the Free Software Foundation, either version 3 of the License, or\nrem    (at your option) any later version.\nrem\nrem    This program is distributed in the hope that it will be useful,\nrem    but WITHOUT ANY WARRANTY; without even the implied warranty of\nrem    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nrem    GNU General Public License for more details.\nrem\nrem    You should have received a copy of the GNU General Public License\nrem    along with this program.  If not, see <https://www.gnu.org/licenses/>.\nrem -----------------------------------------------------------------------------\n\ncolor 70\ntitle media-autobuild_suite\n\nsetlocal\nchcp 65001 >nul 2>&1\ncd /d \"%~dp0\"\nset \"TERM=xterm-256color\"\nsetlocal\nset instdir=%CD%\n\nif %PROCESSOR_ARCHITECTURE%==x86 if NOT DEFINED PROCESSOR_ARCHITEW6432 (\n    echo ----------------------------------------------------------------------\n    echo. 32-bit host machine and OS are no longer supported by the suite\n    echo. nor upstream for building.\n    echo. Please consider either moving to a 64-bit machine and OS or use\n    echo. a 64-bit machine to compile the binaries you need.\n    pause\n    exit\n)\n\n\nif not exist %instdir% (\n    echo ----------------------------------------------------------------------\n    echo. You have probably run the script in a path with spaces.\n    echo. This is not supported.\n    echo. Please move the script to use a path without spaces. Example:\n    echo. Incorrect: C:\\build suite\\\n    echo. Correct:   C:\\build_suite\\\n    pause\n    exit\n)\n\nif not [\"%instdir:~32,1%\"]==[\"\"] (\n    echo -------------------------------------------------------------------------------\n    echo. The total filepath to the suite seems too large (larger than 32 characters^):\n    echo. %instdir%\n    echo. Some packages might fail building because of it.\n    echo. Please move the suite directory closer to the root of your drive and maybe\n    echo. rename the suite directory to a smaller name. Examples:\n    echo. Avoid:  C:\\Users\\Administrator\\Desktop\\testing\\media-autobuild_suite-master\n    echo. Prefer: C:\\media-autobuild_suite\n    echo. Prefer: C:\\ab-suite\n    pause\n)\n\nfor /f \"usebackq tokens=*\" %%f in (`powershell -noprofile -command $PSVersionTable.PSVersion.Major`) ^\ndo if %%f lss 4 (\n    echo ----------------------------------------------------------------------\n    echo. You do not have a powershell version greater than 4.\n    echo. This is not supported.\n    echo. Please upgrade your powershell either through downloading and installing WMF 5.1\n    echo. https://docs.microsoft.com/en-us/powershell/wmf/5.1/install-configure\n    echo. or by upgrading your OS.\n    echo. This is not Powershell Core. That is separate.\n    pause\n    exit\n)\n\n(\n    where lib.exe || ^\n    where cl.exe || ^\n    if DEFINED VSINSTALLDIR cd .\n) >nul 2>&1 && (\n    rem MSVCINSTALLED\n    echo ----------------------------------------------------------------------\n    echo. You are running in a MSVC environment (cl.exe or lib.exe detected^)\n    echo. This is not supported.\n    echo. Please run the script through a normal cmd.exe some other way.\n    echo.\n    echo. Detected Paths:\n    where lib.exe 2>nul\n    where cl.exe 2>nul\n    echo %VSINSTALLDIR%\n    pause\n    exit\n)\n\nset build=%instdir%\\build\nif not exist %build% mkdir %build%\n\nset msyspackages=asciidoc autoconf-wrapper automake-wrapper autogen base bison diffstat dos2unix filesystem help2man ^\nintltool libtool patch python xmlto make zip unzip git subversion wget p7zip man-db ^\ngperf winpty texinfo gyp doxygen autoconf-archive itstool ruby mintty flex msys2-runtime pacutils\n\nset mingwpackages=cmake dlfcn libpng nasm pcre tools-git yasm ninja pkgconf meson ccache jq ^\ngettext-tools\n\n:: built-ins\nset ffmpeg_options_builtin=--disable-autodetect amf bzlib cuda cuvid d3d12va d3d11va dxva2 ^\niconv lzma nvenc schannel zlib sdl2 ffnvcodec nvdec cuda-llvm\n\n:: common external libs\nset ffmpeg_options_basic=gmp libmp3lame libopus libvorbis libvpx libx264 libx265 ^\nlibdav1d libaom --disable-debug libfdk-aac\n\n:: options used in zeranoe builds and not present above\nset ffmpeg_options_zeranoe=fontconfig gnutls libass libbluray libfreetype ^\nlibharfbuzz libvpl libmysofa libopencore-amrnb libopencore-amrwb libopenjpeg libsnappy ^\nlibsoxr libspeex libtheora libtwolame libvidstab libvo-amrwbenc ^\nlibwebp libxml2 libzimg libshine gpl openssl libtls avisynth #mbedtls libxvid ^\nlibopenmpt version3 librav1e libsrt libgsm libvmaf libsvtav1\n\n:: options also available with the suite\nset ffmpeg_options_full=chromaprint decklink frei0r libaribb24 libbs2b libcaca ^\nlibcdio libflite libfribidi libgme libilbc libsvthevc ^\nlibsvtvp9 libkvazaar libmodplug librist librtmp librubberband #libssh ^\nlibtesseract libxavs libzmq libzvbi openal libcodec2 ladspa #vapoursynth #liblensfun ^\nlibglslang vulkan libdavs2 libxavs2 libuavs3d libplacebo libjxl libvvenc libvvdec liblc3\n\n:: options also available with the suite that add shared dependencies\nset ffmpeg_options_full_shared=opencl opengl cuda-nvcc libnpp libopenh264\n\n:: built-ins\nset mpv_options_builtin=#cplayer #manpage-build #lua #javascript ^\n#libbluray #uchardet #rubberband #lcms2 #libarchive #libavdevice ^\n#shaderc #spirv-cross #d3d11 #jpeg #vapoursynth #vulkan #libplacebo\n\n:: overriden defaults\nset mpv_options_basic=--disable-debug-build \"--lua=luajit\"\n\n:: all supported options\nset mpv_options_full=dvdnav cdda #egl-angle #html-build ^\n#pdf-build libmpv-shared openal sdl2 #sdl2-gamepad #sdl2-audio #sdl2-video\n\nset iniOptions=arch license2 vpx2 x2643 x2652 other265 flac fdkaac mediainfo ^\nsoxB ffmpegB2 ffmpegUpdate ffmpegChoice mp4box rtmpdump mplayer2 mpv cores deleteSource ^\nstrip pack logging bmx standalone updateSuite av1an aom faac exhale ffmbc curl cyanrip2 ^\nrav1e ripgrep dav1d libavif vvc uvg266 jq dssim avs2 dovitool hdr10plustool timeStamp ^\nnoMintty ccache svthevc svtav1 svtvp9 xvc jo vlc CC jpegxl vvenc vvdec ffmpegPath pkgUpdateTime\n@rem re-add autouploadlogs if we find some way to upload to github directly instead\n\nset deleteIni=0\nset ini=%build%\\media-autobuild_suite.ini\n\nrem Set all INI options to 0\nfor %%a in (%iniOptions%) do set %%aINI=0\n\nif exist %ini% (\n    rem Set INI options to what's found in the inifile\n    echo.foreach ($option in $env:iniOptions.split(\" \"^)^) { ^\n        $m = Select-String -Path $env:ini -CaseSensitive -SimpleMatch -Pattern $option; ^\n        if ($null -ne $m^) { ^\n            Write-Output \"set `\"${option}INI^=$($m.Line.Split(\"=\"^, 2^)[1]^)`\"\" ^\n        } else { ^\n            Write-Output \"set `\"${option}INI^=0^`\"\" ^\n        } ^\n    } | powershell -NoProfile -Command - > %build%\\options.bat\n    call %build%\\options.bat\n    del %build%\\options.bat\n) else set deleteIni=1\n\nsetlocal EnableDelayedExpansion\nrem Check if any of the *INI options are still unset (0)\nfor %%a in (%iniOptions%) do if [0]==[!%%aINI!] set deleteIni=1 && goto :endINIcheck\n:endINIcheck\nendlocal & set deleteIni=%deleteIni%\n\nif %deleteINI%==1 echo.[compiler list] >\"%ini%\"\n\n:selectSystem\nif [0]==[%archINI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Select the build target system:\n    echo. 1 = both [32 bit and 64 bit]\n    echo. 2 = 32 bit build system\n    echo. 3 = 64 bit build system\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P buildEnv=\"Build System: \"\n) else set buildEnv=%archINI%\n\nif \"%buildEnv%\"==\"\" GOTO selectSystem\nif %buildEnv%==1 set \"build32=yes\" && set \"build64=yes\"\nif %buildEnv%==2 set \"build32=yes\" && set \"build64=no\"\nif %buildEnv%==3 set \"build32=no\" && set \"build64=yes\"\nif %buildEnv% GTR 3 GOTO selectSystem\nif %deleteINI%==1 echo.arch=^%buildEnv%>>%ini%\n\n:ffmpeglicense\nif [0]==[%license2INI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Build FFmpeg with which license?\n    echo. 1 = Non-free [unredistributable, but can include anything]\n    echo. 2 = GPLv3 [disables OpenSSL and FDK-AAC]\n    echo. 3 = GPLv2.1\n    echo.   [Same disables as GPLv3 with addition of gmp, opencore codecs]\n    echo. 4 = LGPLv3\n    echo.   [Disables x264, x265, XviD, GPL filters, etc.\n    echo.    but reenables OpenSSL/FDK-AAC]\n    echo. 5 = LGPLv2.1 [same disables as LGPLv3 + GPLv2.1]\n    echo.\n    echo. If building for yourself, it's OK to choose non-free.\n    echo. If building to redistribute online, choose GPL or LGPL.\n    echo. If building to include in a GPLv2.1 binary, choose LGPLv2.1 or GPLv2.1.\n    echo. If you want to use FFmpeg together with closed source software, choose LGPL\n    echo. and follow instructions in https://www.ffmpeg.org/legal.html\n    echo.\n    echo. OpenSSL and FDK-AAC have licenses incompatible with GPL but compatible\n    echo. with LGPL, so they won't be disabled automatically if you choose LGPL.\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P ffmpegLicense=\"FFmpeg license: \"\n) else set ffmpegLicense=%license2INI%\n\nif \"%ffmpegLicense%\"==\"\" GOTO ffmpeglicense\nif %ffmpegLicense%==1 set \"license2=nonfree\"\nif %ffmpegLicense%==2 set \"license2=gplv3\"\nif %ffmpegLicense%==3 set \"license2=gpl\"\nif %ffmpegLicense%==4 set \"license2=lgplv3\"\nif %ffmpegLicense%==5 set \"license2=lgpl\"\nif %ffmpegLicense% GTR 5 GOTO ffmpeglicense\nif %deleteINI%==1 echo.license2=^%ffmpegLicense%>>%ini%\n\n:standalone\nif [0]==[%standaloneINI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Build standalone binaries for libraries included in FFmpeg?\n    echo. eg. Compile opusenc.exe if --enable-libopus\n    echo. 1 = Yes\n    echo. 2 = No\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P buildstandalone=\"Build standalone binaries: \"\n) else set buildstandalone=%standaloneINI%\n\nif \"%buildstandalone%\"==\"\" GOTO standalone\nif %buildstandalone%==1 set \"standalone=y\"\nif %buildstandalone%==2 set \"standalone=n\"\nif %buildstandalone% GTR 2 GOTO standalone\nif %deleteINI%==1 echo.standalone=^%buildstandalone%>>%ini%\n\n:av1an\nif [0]==[%av1anINI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Build Av1an [Scalable video encoding framework]?\n    echo. 1 = Yes [link with static FFmpeg]\n    echo. 2 = Yes [link with shared FFmpeg]\n    echo. 3 = No\n    echo.\n    echo. Av1an requires local installed copies of Python and Vapoursynth,\n    echo. an executable of FFmpeg and one of these encoders to function:\n    echo. aom, SVT-AV1, rav1e, vpx, x264, or x265\n    echo. If FFmpeg is built shared, then the Av1an executable will be in a subfolder.\n    echo. (Note: Not available for 32-bit due to Vapoursynth being broken in 32-bit!^)\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P buildav1an=\"Build av1an: \"\n) else set buildav1an=%av1anINI%\n\nif \"%buildav1an%\"==\"\" GOTO av1an\nif %buildav1an%==1 set \"av1an=y\"\nif %buildav1an%==2 set \"av1an=shared\"\nif %buildav1an%==3 set \"av1an=n\"\nif %buildav1an% GTR 3 GOTO av1an\nif %deleteINI%==1 echo.av1an=^%buildav1an%>>%ini%\n\n:vpx\nif [0]==[%vpx2INI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Build vpx [VP8/VP9 encoder]?\n    echo. 1 = Yes\n    echo. 2 = No\n    echo.\n    echo. Binaries being built depends on \"standalone/av1an=y\" and are always static.\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P buildvpx=\"Build vpx: \"\n) else set buildvpx=%vpx2INI%\n\nif \"%buildvpx%\"==\"\" GOTO vpx\nif %buildvpx%==1 set \"vpx2=y\"\nif %buildvpx%==2 set \"vpx2=n\"\nif %buildvpx% GTR 2 GOTO vpx\nif %deleteINI%==1 echo.vpx2=^%buildvpx%>>%ini%\n\n:aom\nif [0]==[%aomINI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Build aom [Alliance for Open Media codec]?\n    echo. 1 = Yes\n    echo. 2 = No\n    echo.\n    echo. Binaries being built depends on \"standalone/av1an=y\" and are always static.\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P buildaom=\"Build aom: \"\n) else set buildaom=%aomINI%\n\nif \"%buildaom%\"==\"\" GOTO aom\nif %buildaom%==1 set \"aom=y\"\nif %buildaom%==2 set \"aom=n\"\nif %buildaom% GTR 2 GOTO aom\nif %deleteINI%==1 echo.aom=^%buildaom%>>%ini%\n\n:rav1e\nif [0]==[%rav1eINI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Build rav1e [Alternative, faster AV1 standalone encoder]?\n    echo. 1 = Yes\n    echo. 2 = No\n    echo.\n    echo. Binaries being built depends on \"standalone/av1an=y\" and are always static.\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P buildrav1e=\"Build rav1e: \"\n) else set buildrav1e=%rav1eINI%\n\nif \"%buildrav1e%\"==\"\" GOTO rav1e\nif %buildrav1e%==1 set \"rav1e=y\"\nif %buildrav1e%==2 set \"rav1e=n\"\nif %buildrav1e% GTR 2 GOTO rav1e\nif %deleteINI%==1 echo.rav1e=^%buildrav1e%>>%ini%\n\n:dav1d\nif [0]==[%dav1dINI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Build dav1d [Alternative, faster AV1 decoder]?\n    echo. 1 = Yes\n    echo. 2 = No\n    echo.\n    echo. Binaries being built depends on \"standalone=y\" and are always static.\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P builddav1d=\"Build dav1d: \"\n) else set builddav1d=%dav1dINI%\n\nif \"%builddav1d%\"==\"\" GOTO dav1d\nif %builddav1d%==1 set \"dav1d=y\"\nif %builddav1d%==2 set \"dav1d=n\"\nif %builddav1d% GTR 2 GOTO dav1d\nif %deleteINI%==1 echo.dav1d=^%builddav1d%>>%ini%\n\n:libavif\nif [0]==[%libavifINI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Build libavif [AV1 image format encoder and decoder]?\n    echo. 1 = Yes\n    echo. 2 = No\n    echo.\n    echo. Binaries being built depends on \"standalone=y\" and are always static.\n    echo. Will build aom, dav1d, and rav1e if not already previously enabled\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P buildlibavif=\"Build libavif: \"\n) else set buildlibavif=%libavifINI%\n\nif \"%buildlibavif%\"==\"\" GOTO libavif\nif %buildlibavif%==1 set \"libavif=y\"\nif %buildlibavif%==2 set \"libavif=n\"\nif %buildlibavif% GTR 2 GOTO libavif\nif %deleteINI%==1 echo.libavif=^%buildlibavif%>>%ini%\n\n:jpegxl\nif [0]==[%jpegxlINI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Build jpeg-xl tools [JPEG XL image format encoder and decoder]?\n    echo. 1 = Yes\n    echo. 2 = No\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P buildjpegxl=\"Build jpegxl: \"\n) else set buildjpegxl=%jpegxlINI%\n\nif \"%buildjpegxl%\"==\"\" GOTO jpegxl\nif %buildjpegxl%==1 set \"jpegxl=y\"\nif %buildjpegxl%==2 set \"jpegxl=n\"\nif %buildjpegxl% GTR 2 GOTO jpegxl\nif %deleteINI%==1 echo.jpegxl=^%buildjpegxl%>>%ini%\n\n:x264\nif [0]==[%x2643INI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Build x264 [H.264 encoder]?\n    echo. 1 = Lib/binary with 8 and 10-bit\n    echo. 2 = No\n    echo. 3 = Lib/binary with only 10-bit\n    echo. 4 = Lib/binary with 8 and 10-bit, and libavformat and ffms2\n    echo. 5 = Shared lib/binary with 8 and 10-bit\n    echo. 6 = Same as 4 with video codecs only (can reduce size by ~3MB^)\n    echo. 7 = Lib/binary with only 8-bit\n    echo.\n    echo. Binaries being built depends on \"standalone/av1an=y\" and are always static.\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P buildx264=\"Build x264: \"\n) else set buildx264=%x2643INI%\n\nif \"%buildx264%\"==\"\" GOTO x264\nif %buildx264%==1 set \"x2643=yes\"\nif %buildx264%==2 set \"x2643=no\"\nif %buildx264%==3 set \"x2643=high\"\nif %buildx264%==4 set \"x2643=full\"\nif %buildx264%==5 set \"x2643=shared\"\nif %buildx264%==6 set \"x2643=fullv\"\nif %buildx264%==7 set \"x2643=o8\"\nif %buildx264% GTR 7 GOTO x264\nif %deleteINI%==1 echo.x2643=^%buildx264%>>%ini%\n\n:x265\nif [0]==[%x2652INI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Build x265 [H.265 encoder]?\n    echo. 1 = Lib/binary with Main, Main10 and Main12\n    echo. 2 = No\n    echo. 3 = Lib/binary with Main10 only\n    echo. 4 = Lib/binary with Main only\n    echo. 5 = Lib/binary with Main, shared libs with Main10 and Main12\n    echo. 6 = Same as 1 with XP support and non-XP compatible x265-numa.exe\n    echo. 7 = Lib/binary with Main12 only\n    echo.\n    echo. Binaries being built depends on \"standalone/av1an=y\" and are always static.\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P buildx265=\"Build x265: \"\n) else set buildx265=%x2652INI%\n\nif \"%buildx265%\"==\"\" GOTO x265\nif %buildx265%==1 set \"x2652=y\"\nif %buildx265%==2 set \"x2652=n\"\nif %buildx265%==3 set \"x2652=o10\"\nif %buildx265%==4 set \"x2652=o8\"\nif %buildx265%==5 set \"x2652=s\"\nif %buildx265%==6 set \"x2652=d\"\nif %buildx265%==7 set \"x2652=o12\"\nif %buildx265% GTR 7 GOTO x265\nif %deleteINI%==1 echo.x2652=^%buildx265%>>%ini%\n\n:other265\nif [0]==[%other265INI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Build Kvazaar? [H.265 encoder]\n    echo. 1 = Yes\n    echo. 2 = No\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P buildother265=\"Build kvazaar: \"\n) else set buildother265=%other265INI%\n\nif \"%buildother265%\"==\"\" GOTO other265\nif %buildother265%==1 set \"other265=y\"\nif %buildother265%==2 set \"other265=n\"\nif %buildother265% GTR 2 GOTO other265\nif %deleteINI%==1 echo.other265=^%buildother265%>>%ini%\n\n:svthevc\nif [0]==[%svthevcINI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Build SVT-HEVC? [H.265 encoder]\n    echo. 1 = Yes\n    echo. 2 = No\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P buildsvthevc=\"Build SVT-HEVC: \"\n) else set buildsvthevc=%svthevcINI%\n\nif \"%buildsvthevc%\"==\"\" GOTO svthevc\nif %buildsvthevc%==1 set \"svthevc=y\"\nif %buildsvthevc%==2 set \"svthevc=n\"\nif %buildsvthevc% GTR 2 GOTO svthevc\nif %deleteINI%==1 echo.svthevc=^%buildsvthevc%>>%ini%\n\n:xvc\nif [0]==[%xvcINI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Build xvc? [HEVC and AV1 competitor]\n    echo. 1 = Yes\n    echo. 2 = No\n    echo.\n    echo. Any issues with this will be considered low-priority due to lack of\n    echo. potential stability\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P buildxvc=\"Build xvc: \"\n) else set buildxvc=%xvcINI%\n\nif \"%buildxvc%\"==\"\" GOTO xvc\nif %buildxvc%==1 set \"xvc=y\"\nif %buildxvc%==2 set \"xvc=n\"\nif %buildxvc% GTR 2 GOTO xvc\nif %deleteINI%==1 echo.xvc=^%buildxvc%>>%ini%\n\n:vvc\nif [0]==[%vvcINI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Build VVC Reference Software? [H.265 successor enc/decoder]\n    echo. 1 = Yes\n    echo. 2 = No\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P buildvvc=\"Build vvc: \"\n) else set buildvvc=%vvcINI%\n\nif \"%buildvvc%\"==\"\" GOTO vvc\nif %buildvvc%==1 set \"vvc=y\"\nif %buildvvc%==2 set \"vvc=n\"\nif %buildvvc% GTR 2 GOTO vvc\nif %deleteINI%==1 echo.vvc=^%buildvvc%>>%ini%\n\n:uvg266\nif [0]==[%uvg266INI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Build uvg266? [H.266 encoder by ultravideo, the Kvazaar team]\n    echo. 1 = Yes\n    echo. 2 = No\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P builduvg266=\"Build uvg266: \"\n) else set builduvg266=%uvg266INI%\n\nif \"%builduvg266%\"==\"\" GOTO uvg266\nif %builduvg266%==1 set \"uvg266=y\"\nif %builduvg266%==2 set \"uvg266=n\"\nif %builduvg266% GTR 2 GOTO uvg266\nif %deleteINI%==1 echo.uvg266=^%builduvg266%>>%ini%\n\n:vvenc\nif [0]==[%vvencINI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Build vvenc? [Fraunhofer HHI Versatile Video Encoder]\n    echo. 1 = Yes\n    echo. 2 = No\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P buildvvenc=\"Build vvenc: \"\n) else set buildvvenc=%vvencINI%\n\nif \"%buildvvenc%\"==\"\" GOTO vvenc\nif %buildvvenc%==1 set \"vvenc=y\"\nif %buildvvenc%==2 set \"vvenc=n\"\nif %buildvvenc% GTR 2 GOTO vvenc\nif %deleteINI%==1 echo.vvenc=^%buildvvenc%>>%ini%\n\n:vvdec\nif [0]==[%vvdecINI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Build vvdec? [Fraunhofer HHI Versatile Video Decoder]\n    echo. 1 = Yes\n    echo. 2 = No\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P buildvvdec=\"Build vvdec: \"\n) else set buildvvdec=%vvdecINI%\n\nif \"%buildvvdec%\"==\"\" GOTO vvdec\nif %buildvvdec%==1 set \"vvdec=y\"\nif %buildvvdec%==2 set \"vvdec=n\"\nif %buildvvdec% GTR 2 GOTO vvdec\nif %deleteINI%==1 echo.vvdec=^%buildvvdec%>>%ini%\n\n:svtav1\nif [0]==[%svtav1INI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Build SVT-AV1? [AV1 encoder]\n    echo. 1 = Yes\n    echo. 2 = No\n    echo.\n    echo. Look at the link for hardware requirements\n    echo. https://github.com/OpenVisualCloud/SVT-AV1/blob/master/README.md#Hardware\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P buildsvtav1=\"Build SVT-AV1: \"\n) else set buildsvtav1=%svtav1INI%\n\nif \"%buildsvtav1%\"==\"\" GOTO svtav1\nif %buildsvtav1%==1 set \"svtav1=y\"\nif %buildsvtav1%==2 set \"svtav1=n\"\nif %buildsvtav1% GTR 2 GOTO svtav1\nif %deleteINI%==1 echo.svtav1=^%buildsvtav1%>>%ini%\n\n:svtvp9\nif [0]==[%svtvp9INI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Build SVT-VP9? [VP9 encoder]\n    echo. 1 = Yes\n    echo. 2 = No\n    echo.\n    echo. Look at the link for hardware requirements\n    echo. https://github.com/OpenVisualCloud/SVT-VP9#Hardware\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P buildsvtvp9=\"Build SVT-VP9: \"\n) else set buildsvtvp9=%svtvp9INI%\n\nif \"%buildsvtvp9%\"==\"\" GOTO svtvp9\nif %buildsvtvp9%==1 set \"svtvp9=y\"\nif %buildsvtvp9%==2 set \"svtvp9=n\"\nif %buildsvtvp9% GTR 2 GOTO svtvp9\nif %deleteINI%==1 echo.svtvp9=^%buildsvtvp9%>>%ini%\n\n:flac\nif [0]==[%flacINI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Build FLAC? [Free Lossless Audio Codec]\n    echo. 1 = Yes\n    echo. 2 = No\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P buildflac=\"Build flac: \"\n) else set buildflac=%flacINI%\n\nif \"%buildflac%\"==\"\" GOTO flac\nif %buildflac%==1 set \"flac=y\"\nif %buildflac%==2 set \"flac=n\"\nif %buildflac% GTR 2 GOTO flac\nif %deleteINI%==1 echo.flac=^%buildflac%>>%ini%\n\n:fdkaac\nif [0]==[%fdkaacINI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Build FDK-AAC library and binary? [AAC-LC/HE/HEv2 codec]\n    echo. 1 = Yes\n    echo. 2 = No\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P buildfdkaac=\"Build fdkaac: \"\n) else set buildfdkaac=%fdkaacINI%\n\nif \"%buildfdkaac%\"==\"\" GOTO fdkaac\nif %buildfdkaac%==1 set \"fdkaac=y\"\nif %buildfdkaac%==2 set \"fdkaac=n\"\nif %buildfdkaac% GTR 2 GOTO fdkaac\nif %deleteINI%==1 echo.fdkaac=^%buildfdkaac%>>%ini%\n\n:faac\nif [0]==[%faacINI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Build FAAC library and binary? [old, low-quality and nonfree AAC-LC codec]\n    echo. 1 = Yes\n    echo. 2 = No\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P buildfaac=\"Build faac: \"\n) else set buildfaac=%faacINI%\n\nif \"%buildfaac%\"==\"\" GOTO faac\nif %buildfaac%==1 set \"faac=y\"\nif %buildfaac%==2 set \"faac=n\"\nif %buildfaac% GTR 2 GOTO faac\nif %deleteINI%==1 echo.faac=^%buildfaac%>>%ini%\n\n:exhale\nif [0]==[%exhaleINI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Build exhale binary? [open-source ISO/IEC 23003-3 USAC, xHE-AAC encoder]\n    echo. 1 = Yes\n    echo. 2 = No\n    echo.\n    echo. Binaries being built do not depend on \"standalone=y\"\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P buildexhale=\"Build exhale: \"\n) else set buildexhale=%exhaleINI%\n\nif \"%buildexhale%\"==\"\" GOTO exhale\nif %buildexhale%==1 set \"exhale=y\"\nif %buildexhale%==2 set \"exhale=n\"\nif %buildexhale% GTR 2 GOTO exhale\nif %deleteINI%==1 echo.exhale=^%buildexhale%>>%ini%\n\n:mediainfo\nif [0]==[%mediainfoINI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Build mediainfo binaries [Multimedia file information tool]?\n    echo. 1 = Yes\n    echo. 2 = No\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P buildmediainfo=\"Build mediainfo: \"\n) else set buildmediainfo=%mediainfoINI%\n\nif \"%buildmediainfo%\"==\"\" GOTO mediainfo\nif %buildmediainfo%==1 set \"mediainfo=y\"\nif %buildmediainfo%==2 set \"mediainfo=n\"\nif %buildmediainfo% GTR 2 GOTO mediainfo\nif %deleteINI%==1 echo.mediainfo=^%buildmediainfo%>>%ini%\n\n:sox\nif [0]==[%soxBINI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Build sox binaries [Sound processing tool]?\n    echo. 1 = Yes\n    echo. 2 = No\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P buildsox=\"Build sox: \"\n) else set buildsox=%soxBINI%\n\nif \"%buildsox%\"==\"\" GOTO sox\nif %buildsox%==1 set \"sox=y\"\nif %buildsox%==2 set \"sox=n\"\nif %buildsox% GTR 2 GOTO sox\nif %deleteINI%==1 echo.soxB=^%buildsox%>>%ini%\n\n:ffmpeg\nif [0]==[%ffmpegB2INI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Build FFmpeg binaries and libraries:\n    echo. 1 = Yes [static] [recommended]\n    echo. 2 = No\n    echo. 3 = Shared\n    echo. 4 = Both static and shared [shared goes to an isolated directory]\n    echo. 5 = Shared-only with some shared dependencies (libass, freetype and fribidi^)\n    echo. 6 = Same as 4, but static compilation ignores shared dependencies\n    echo.\n    echo. Note: Option 5 differs from 3 in that libass, freetype and fribidi are\n    echo. compiled shared so they take less space. Currently broken if libass or libass\n    echo. dependees are enabled.\n    echo. Option 6 produces static and shared ffmpeg and ffmpeg libs where the static\n    echo. one includes only strictly static dependencies (opencl, opengl, cuda-nvcc,\n    echo. libnpp, libopenh264 are hard disabled.^)\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P buildffmpeg=\"Build FFmpeg: \"\n) else set buildffmpeg=%ffmpegB2INI%\n\nif \"%buildffmpeg%\"==\"\" GOTO ffmpeg\nif %buildffmpeg%==1 set \"ffmpeg=static\"\nif %buildffmpeg%==2 set \"ffmpeg=no\"\nif %buildffmpeg%==3 set \"ffmpeg=shared\"\nif %buildffmpeg%==4 set \"ffmpeg=both\"\nif %buildffmpeg%==5 set \"ffmpeg=sharedlibs\"\nif %buildffmpeg%==6 set \"ffmpeg=bothstatic\"\nif %buildffmpeg% GTR 6 GOTO ffmpeg\nif %deleteINI%==1 echo.ffmpegB2=^%buildffmpeg%>>%ini%\n\nset defaultFFmpegPath=https://git.ffmpeg.org/ffmpeg.git\n\n:ffmpegPath\nif [0]==[%ffmpegPathINI%] (\n    set ffmpegPath=%defaultFFmpegPath%\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Using default ffmpeg source path: https://git.ffmpeg.org/ffmpeg.git\n    echo.\n    echo. If you want to use a custom source repository, add a line like this \n    echo. to media-autobuild_suite.ini:\n    echo.\n    echo.     ffmpegPath=https://github.com/username/FFmpeg.git#branch=branchname\n    echo. \n    echo. or for a local repository like:\n    echo.\n    echo.     ffmpegPath=../myrepos/ffmpeg\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n) else set ffmpegPath=%ffmpegPathINI%\n\nif %deleteINI%==1 echo.ffmpegPath=%ffmpegPath%>>%ini%\n\nrem Handle relative paths and convert to absolute path\nrem after sanitizing: back- to forward-slashes, remove colon after drive letter\ncall :resolvePath %ffmpegPath%\nsetlocal EnableDelayedExpansion\nif exist %resolvePath% (\n    set nixdir=!resolvePath:\\=/!\n    set \"ffmpegPath=/!nixdir::=!\"\n)\nendlocal & set \"ffmpegPath=%ffmpegPath%\"\n\nif not [%defaultFFmpegPath%]==[%ffmpegPath%] (\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Using ffmpeg path: %ffmpegPath%\n    echo.\n    echo -------------------------------------------------------------------------------\n)\n\n:ffmpegUp\nif [0]==[%ffmpegUpdateINI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Always build FFmpeg when libraries have been updated?\n    echo. 1 = Yes\n    echo. 2 = No\n    echo. 3 = Only build FFmpeg/mpv and missing dependencies\n    echo.\n    echo. FFmpeg is updated a lot so you only need to select this if you\n    echo. absolutely need updated external libraries in FFmpeg.\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P buildffmpegUp=\"Build ffmpeg if lib is new: \"\n) else set buildffmpegUp=%ffmpegUpdateINI%\n\nif \"%buildffmpegUp%\"==\"\" GOTO ffmpegUp\nif %buildffmpegUp%==1 set \"ffmpegUpdate=y\"\nif %buildffmpegUp%==2 set \"ffmpegUpdate=n\"\nif %buildffmpegUp%==3 set \"ffmpegUpdate=onlyFFmpeg\"\nif %buildffmpegUp% GTR 3 GOTO ffmpegUp\nif %deleteINI%==1 echo.ffmpegUpdate=^%buildffmpegUp%>>%ini%\n\n:ffmpegChoice\nif [0]==[%ffmpegChoiceINI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Choose ffmpeg and mpv optional libraries?\n    echo. 1 = Yes\n    echo. 2 = No (Light build^)\n    echo. 3 = No (Mimic Zeranoe^)\n    echo. 4 = No (All available external libs^)\n    echo.\n    echo. Avoid the last two unless you really want useless libraries you'll never use.\n    echo. Just because you can include a shitty codec no one uses doesn't mean you should.\n    echo.\n    echo. If you select yes, we will create files with the default options\n    echo. we use with FFmpeg and mpv. You can remove any that you don't need or prefix\n    echo. them with #\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P buildffmpegChoice=\"Choose ffmpeg and mpv optional libs: \"\n) else set buildffmpegChoice=%ffmpegChoiceINI%\n\nif \"%buildffmpegChoice%\"==\"\" GOTO ffmpegChoice\nif %buildffmpegChoice%==1 (\n    set \"ffmpegChoice=y\"\n    if not exist %build%\\ffmpeg_options.txt (\n        (\n            echo.# Lines starting with this character are ignored\n            echo.# To override some options specifically for the shared build, create a ffmpeg_options_shared.txt file.\n            echo.\n            echo.# Basic built-in options, can be removed if you delete \"--disable-autodetect\"\n            call :writeOption %ffmpeg_options_builtin%\n            echo.\n            echo.# Common options\n            call :writeOption %ffmpeg_options_basic%\n            echo.\n            echo.# Zeranoe\n            call :writeOption %ffmpeg_options_zeranoe%\n            echo.\n            echo.# Full\n            call :writeOption %ffmpeg_options_full%\n            echo.\n            echo.# Full plus options that add shared dependencies\n            call :writeOption %ffmpeg_options_full_shared%\n            )>%build%\\ffmpeg_options.txt\n        echo -------------------------------------------------------------------------------\n        echo. File with default FFmpeg options has been created in\n        echo. %build%\\ffmpeg_options.txt\n        echo.\n        echo. Edit it now or leave it unedited to compile according to defaults.\n        echo -------------------------------------------------------------------------------\n        pause\n        )\n    if not exist %build%\\mpv_options.txt (\n        (\n            echo.# Lines starting with this character are ignored\n            echo.\n            echo.# Built-in options, use --disable- to disable them\n            call :writeOption %mpv_options_builtin%\n            echo.\n            echo.# Common options or overriden defaults\n            call :writeOption %mpv_options_basic%\n            echo.\n            echo.# Full\n            call :writeOption %mpv_options_full%\n            )>%build%\\mpv_options.txt\n        echo -------------------------------------------------------------------------------\n        echo. File with default mpv options has been created in\n        echo. %build%\\mpv_options.txt\n        echo.\n        echo. Edit it now or leave it unedited to compile according to defaults.\n        echo -------------------------------------------------------------------------------\n        pause\n        )\n    )\nif %buildffmpegChoice%==2 set \"ffmpegChoice=n\"\nif %buildffmpegChoice%==3 set \"ffmpegChoice=z\"\nif %buildffmpegChoice%==4 set \"ffmpegChoice=f\"\nif %buildffmpegChoice% GTR 4 GOTO ffmpegChoice\nif %deleteINI%==1 echo.ffmpegChoice=^%buildffmpegChoice%>>%ini%\n\n:mp4boxStatic\nif [0]==[%mp4boxINI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Build static mp4box [mp4 muxer/toolbox] binary?\n    echo. 1 = Yes\n    echo. 2 = No\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P buildMp4box=\"Build mp4box: \"\n) else set buildMp4box=%mp4boxINI%\n\nif \"%buildMp4box%\"==\"\" GOTO mp4boxStatic\nif %buildMp4box%==1 set \"mp4box=y\"\nif %buildMp4box%==2 set \"mp4box=n\"\nif %buildMp4box% GTR 2 GOTO mp4boxStatic\nif %deleteINI%==1 echo.mp4box=^%buildMp4box%>>%ini%\n\n:rtmpdump\nif [0]==[%rtmpdumpINI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Build static rtmpdump binaries [rtmp tools]?\n    echo. 1 = Yes\n    echo. 2 = No\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P buildrtmpdump=\"Build rtmpdump: \"\n) else set buildrtmpdump=%rtmpdumpINI%\n\nif \"%buildrtmpdump%\"==\"\" GOTO rtmpdump\nif %buildrtmpdump%==1 set \"rtmpdump=y\"\nif %buildrtmpdump%==2 set \"rtmpdump=n\"\nif %buildrtmpdump% GTR 2 GOTO rtmpdump\nif %deleteINI%==1 echo.rtmpdump=^%buildrtmpdump%>>%ini%\n\n:mplayer\nif [0]==[%mplayer2INI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo ######### UNSUPPORTED, IF IT BREAKS, IT BREAKS ################################\n    echo.\n    echo. Build static mplayer/mencoder binary?\n    echo. 1 = Yes\n    echo. 2 = No\n    echo.\n    echo. Don't bother opening issues about this if it breaks, I don't fucking care\n    echo. about ancient unmaintained shit code. One more issue open about this that\n    echo. isn't the suite's fault and mplayer goes fucking out.\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P buildmplayer=\"Build mplayer: \"\n) else set buildmplayer=%mplayer2INI%\n\nif \"%buildmplayer%\"==\"\" GOTO mplayer\nif %buildmplayer%==1 set \"mplayer=y\"\nif %buildmplayer%==2 set \"mplayer=n\"\nif %buildmplayer% GTR 2 GOTO mplayer\nif %deleteINI%==1 echo.mplayer2=^%buildmplayer%>>%ini%\n\n:mpv\nif [0]==[%mpvINI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Build mpv?\n    echo. 1 = Yes\n    echo. 2 = No\n    echo.\n    echo. Note: when built with shared-only FFmpeg, mpv is also shared.\n    echo. Note: the third option was removed since vapoursynth is now a delay-import\n    echo. dependency that is only required if you try to use the corresponding filter.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P buildmpv=\"Build mpv: \"\n) else set buildmpv=%mpvINI%\n\nif \"%buildmpv%\"==\"\" GOTO mpv\nif %buildmpv%==1 set \"mpv=y\"\nif %buildmpv%==2 set \"mpv=n\"\nif %buildmpv% GTR 2 GOTO mpv\nif %deleteINI%==1 echo.mpv=^%buildmpv%>>%ini%\n\n:vlc\nif [0]==[%vlcINI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Build VLC media player?\n    echo. Takes a long time because of qt5 and wouldn't recommend it if you\n    echo. don't have ccache enabled.\n    echo. 1 = Yes\n    echo. 2 = No\n    echo.\n    echo. Note: compilation of VLC is currently broken, do not enable unless you know\n    echo. what you are doing.\n    echo. \n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P buildvlc=\"Build vlc: \"\n) else set buildvlc=%vlcINI%\n\nif \"%buildvlc%\"==\"\" GOTO vlc\nif %buildvlc%==1 set \"vlc=y\"\nif %buildvlc%==2 set \"vlc=n\"\nif %buildvlc% GTR 2 GOTO vlc\nif %deleteINI%==1 echo.vlc=^%buildvlc%>>%ini%\n\n:bmx\nif [0]==[%bmxINI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Build static bmx tools?\n    echo. 1 = Yes\n    echo. 2 = No\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P buildbmx=\"Build bmx: \"\n) else set buildbmx=%bmxINI%\n\nif \"%buildbmx%\"==\"\" GOTO bmx\nif %buildbmx%==1 set \"bmx=y\"\nif %buildbmx%==2 set \"bmx=n\"\nif %buildbmx% GTR 2 GOTO bmx\nif %deleteINI%==1 echo.bmx=^%buildbmx%>>%ini%\n\n:curl\nif [0]==[%curlINI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Build static curl?\n    echo. 1 = Yes (same backend as FFmpeg's^)\n    echo. 2 = No\n    echo. 3 = SChannel backend\n    echo. 4 = GnuTLS backend\n    echo. 5 = OpenSSL backend\n    echo. 6 = LibreSSL backend\n    echo. 7 = mbedTLS backend\n    echo.\n    echo. A curl-ca-bundle.crt will be created to be used as trusted certificate store\n    echo. for all backends except SChannel.\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P buildcurl=\"Build curl: \"\n) else set buildcurl=%curlINI%\n\nif \"%buildcurl%\"==\"\" GOTO curl\nif %buildcurl%==1 set \"curl=y\"\nif %buildcurl%==2 set \"curl=n\"\nif %buildcurl%==3 set \"curl=schannel\"\nif %buildcurl%==4 set \"curl=gnutls\"\nif %buildcurl%==5 set \"curl=openssl\"\nif %buildcurl%==6 set \"curl=libressl\"\nif %buildcurl%==7 set \"curl=mbedtls\"\nif %buildcurl% GTR 7 GOTO curl\nif %deleteINI%==1 echo.curl=^%buildcurl%>>%ini%\n\n:ffmbc\nif [0]==[%ffmbcINI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo ######### UNSUPPORTED, IF IT BREAKS, IT BREAKS ################################\n    echo.\n    echo. Build FFMedia Broadcast binary?\n    echo. 1 = Yes\n    echo. 2 = No\n    echo.\n    echo. Note: this is a fork of FFmpeg 0.10. As such, it's very likely to fail\n    echo. to build, work, might burn your computer, kill your children, like mplayer.\n    echo. Only enable it if you absolutely need it. If it breaks, complain first to\n    echo. the author in #ffmbc in Freenode IRC.\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P buildffmbc=\"Build ffmbc: \"\n) else set buildffmbc=%ffmbcINI%\n\nif \"%buildffmbc%\"==\"\" GOTO ffmbc\nif %buildffmbc%==1 set \"ffmbc=y\"\nif %buildffmbc%==2 set \"ffmbc=n\"\nif %buildffmbc% GTR 2 GOTO ffmbc\nif %deleteINI%==1 echo.ffmbc=^%buildffmbc%>>%ini%\n\n:cyanrip\nif [0]==[%cyanrip2INI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Build cyanrip (CLI CD ripper^)?\n    echo. 1 = Yes\n    echo. 2 = No\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P buildcyanrip=\"Build cyanrip: \"\n) else set buildcyanrip=%cyanrip2INI%\n\nif \"%buildcyanrip%\"==\"\" GOTO cyanrip\nif %buildcyanrip%==1 set \"cyanrip=y\"\nif %buildcyanrip%==2 set \"cyanrip=n\"\nif %buildcyanrip% GTR 2 GOTO cyanrip\nif %deleteINI%==1 echo.cyanrip2=^%buildcyanrip%>>%ini%\n\n:ripgrep\nif [0]==[%ripgrepINI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Build ripgrep (faster grep in Rust^)?\n    echo. 1 = Yes\n    echo. 2 = No\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P buildripgrep=\"Build ripgrep: \"\n) else set buildripgrep=%ripgrepINI%\n\nif \"%buildripgrep%\"==\"\" GOTO ripgrep\nif %buildripgrep%==1 set \"ripgrep=y\"\nif %buildripgrep%==2 set \"ripgrep=n\"\nif %buildripgrep% GTR 2 GOTO ripgrep\nif %deleteINI%==1 echo.ripgrep=^%buildripgrep%>>%ini%\n\n:jq\nif [0]==[%jqINI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Build jq (CLI JSON processor^)?\n    echo. 1 = Yes\n    echo. 2 = No\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P buildjq=\"Build jq: \"\n) else set buildjq=%jqINI%\n\nif \"%buildjq%\"==\"\" GOTO jq\nif %buildjq%==1 set \"jq=y\"\nif %buildjq%==2 set \"jq=n\"\nif %buildjq% GTR 2 GOTO jq\nif %deleteINI%==1 echo.jq=^%buildjq%>>%ini%\n\n:jo\nif [0]==[%joINI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Build jo (CLI JSON from shell^)?\n    echo. 1 = Yes\n    echo. 2 = No\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P buildjo=\"Build jo: \"\n) else set buildjo=%joINI%\n\nif \"%buildjo%\"==\"\" GOTO jo\nif %buildjo%==1 set \"jo=y\"\nif %buildjo%==2 set \"jo=n\"\nif %buildjo% GTR 2 GOTO jo\nif %deleteINI%==1 echo.jo=^%buildjo%>>%ini%\n\n:dssim\nif [0]==[%dssimINI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Build dssim (multiscale SSIM in Rust^)?\n    echo. 1 = Yes\n    echo. 2 = No\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P builddssim=\"Build dssim: \"\n) else set builddssim=%dssimINI%\n\nif \"%builddssim%\"==\"\" GOTO dssim\nif %builddssim%==1 set \"dssim=y\"\nif %builddssim%==2 set \"dssim=n\"\nif %builddssim% GTR 2 GOTO dssim\nif %deleteINI%==1 echo.dssim=^%builddssim%>>%ini%\n\n:avs2\nif [0]==[%avs2INI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Build avs2 (Audio Video Coding Standard Gen2 encoder/decoder^)?\n    echo. 1 = Yes\n    echo. 2 = No\n    echo.\n    echo. Binaries being built depends on \"standalone=y\" and are always static.\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P buildavs2=\"Build avs2: \"\n) else set buildavs2=%avs2INI%\n\nif \"%buildavs2%\"==\"\" GOTO avs2\nif %buildavs2%==1 set \"avs2=y\"\nif %buildavs2%==2 set \"avs2=n\"\nif %buildavs2% GTR 2 GOTO avs2\nif %deleteINI%==1 echo.avs2=^%buildavs2%>>%ini%\n\n:dovitool\nif [0]==[%dovitoolINI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Build dovi_tool (CLI tool for working with Dolby Vision^)?\n    echo. 1 = Yes\n    echo. 2 = No\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P builddovitool=\"Build dovi_tool: \"\n) else set builddovitool=%dovitoolINI%\n\nif \"%builddovitool%\"==\"\" GOTO dovitool\nif %builddovitool%==1 set \"dovitool=y\"\nif %builddovitool%==2 set \"dovitool=n\"\nif %builddovitool% GTR 2 GOTO dovitool\nif %deleteINI%==1 echo.dovitool=^%builddovitool%>>%ini%\n\n:hdr10plustool\nif [0]==[%hdr10plustoolINI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Build hdr10plus_tool (CLI utility to work with HDR10+ in HEVC files^)?\n    echo. 1 = Yes\n    echo. 2 = No\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P buildhdr10plustool=\"Build hdr10plus_tool: \"\n) else set buildhdr10plustool=%hdr10plustoolINI%\n\nif \"%buildhdr10plustool%\"==\"\" GOTO hdr10plustool\nif %buildhdr10plustool%==1 set \"hdr10plustool=y\"\nif %buildhdr10plustool%==2 set \"hdr10plustool=n\"\nif %buildhdr10plustool% GTR 2 GOTO hdr10plustool\nif %deleteINI%==1 echo.hdr10plustool=^%buildhdr10plustool%>>%ini%\n\n:CC\nif [0]==[%CCINI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Use clang instead of gcc (C compiler^)?\n    echo. Experimental and possibly broken due to gcc assumptions\n    echo. 1 = Yes\n    echo. 2 = No [Recommended]\n    echo.\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P buildCC=\"Build using clang: \"\n) else set buildCC=%CCINI%\n\nif \"%buildCC%\"==\"\" GOTO CC\nif %buildCC%==1 set \"CC=clang\"\nif %buildCC%==2 set \"CC=gcc\"\nif %buildCC% GTR 2 GOTO CC\nif %deleteINI%==1 echo.CC=^%buildCC%>>%ini%\n\n:numCores\nif %NUMBER_OF_PROCESSORS% EQU 1 ( set coreHalf=1 ) else set /a coreHalf=%NUMBER_OF_PROCESSORS%/2\nif [0]==[%coresINI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Number of CPU Cores/Threads for compiling:\n    echo. [it is non-recommended to use all cores/threads!]\n    echo.\n    echo. Recommended: %coreHalf%\n    echo.\n    echo. If you have Windows Defender Real-time protection on, most of your processing\n    echo. power will go to it. It is recommended to whitelist this directory from\n    echo. scanning due to the amount of new files and copying/moving done by the suite.\n    echo. If you do not know how to do this, google it. If you don't care, ignore this.\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P cpuCores=\"Core/Thread Count: \"\n) else set cpuCores=%coresINI%\nfor /l %%a in (1,1,%cpuCores%) do set cpuCount=%%a\n\nif \"%cpuCount%\"==\"\" GOTO numCores\nif %deleteINI%==1 echo.cores=^%cpuCount%>>%ini%\n\nif [0]==[%deleteSourceINI%] (\n:delete\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Delete versioned source folders after compile is done?\n    echo. 1 = Yes [recommended]\n    echo. 2 = No\n    echo.\n    echo. This will save a bit of space for libraries not compiled from git.\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P deleteS=\"Delete source: \"\n) else set deleteS=%deleteSourceINI%\n\nif \"%deleteS%\"==\"\" GOTO delete\nif %deleteS%==1 set \"deleteSource=y\"\nif %deleteS%==2 set \"deleteSource=n\"\nif %deleteS% GTR 2 GOTO delete\nif %deleteINI%==1 echo.deleteSource=^%deleteS%>>%ini%\n\n:stripEXE\nif [0]==[%stripINI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Strip compiled files binaries?\n    echo. 1 = Yes [recommended]\n    echo. 2 = No\n    echo.\n    echo. Makes binaries smaller at only a small time cost after compiling.\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P stripF=\"Strip files: \"\n) else set stripF=%stripINI%\n\nif \"%stripF%\"==\"\" GOTO stripEXE\nif %stripF%==1 set \"stripFile=y\"\nif %stripF%==2 set \"stripFile=n\"\nif %stripF% GTR 2 GOTO stripEXE\nif %deleteINI%==1 echo.strip=^%stripF%>>%ini%\n\n:packEXE\nif [0]==[%packINI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Pack compiled files?\n    echo. 1 = Yes\n    echo. 2 = No [recommended]\n    echo.\n    echo. Attention: Some security applications may detect packed binaries as malware.\n    echo. Increases delay on runtime during which files need to be unpacked.\n    echo. Makes binaries smaller at a big time cost after compiling and on runtime.\n    echo.\n    echo. If distributing the files, consider packing them with 7-zip instead.\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P packF=\"Pack files: \"\n) else set packF=%packINI%\n\nif \"%packF%\"==\"\" GOTO packEXE\nif %packF%==1 set \"packFile=y\"\nif %packF%==2 set \"packFile=n\"\nif %packF% GTR 2 GOTO packEXE\nif %deleteINI%==1 echo.pack=^%packF%>>%ini%\n\n:logging\nif [0]==[%loggingINI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Write logs of compilation commands?\n    echo. 1 = Yes [recommended]\n    echo. 2 = No\n    echo.\n    echo Note: Setting this to yes will also hide output from these commands.\n    echo On successful compilation, these logs are deleted since they aren't needed.\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P loggingF=\"Write logs: \"\n) else set loggingF=%loggingINI%\n\nif \"%loggingF%\"==\"\" GOTO logging\nif %loggingF%==1 set \"logging=y\"\nif %loggingF%==2 set \"logging=n\"\nif %loggingF% GTR 2 GOTO logging\nif %deleteINI%==1 echo.logging=^%loggingF%>>%ini%\n\n@REM :autouploadlogs\n@REM if [0]==[%autouploadlogsINI%] (\n@REM     echo -------------------------------------------------------------------------------\n@REM     echo -------------------------------------------------------------------------------\n@REM     echo.\n@REM     echo. Automatically upload error logs to 0x0.st?\n@REM     echo. 1 = Yes [recommended]\n@REM     echo. 2 = No\n@REM     echo.\n@REM     echo This will upload logs.zip to 0x0.st for easy copy and pasting into github\n@REM     echo issues. If you choose no, then uploading logs will be your responsibility and\n@REM     echo no guarantees will be made for issues lacking logs.\n@REM     echo.\n@REM     echo -------------------------------------------------------------------------------\n@REM     echo -------------------------------------------------------------------------------\n@REM     set /P autouploadlogsF=\"Upload logs: \"\n@REM ) else set autouploadlogsF=%autouploadlogsINI%\n\n@REM if \"%autouploadlogsF%\"==\"\" GOTO autouploadlogs\n@REM if %autouploadlogsF%==1 set \"autouploadlogs=y\"\n@REM if %autouploadlogsF%==2 set \"autouploadlogs=n\"\n@REM if %autouploadlogsF% GTR 2 GOTO autouploadlogs\n@REM if %deleteINI%==1 echo.autouploadlogs=^%autouploadlogsF%>>%ini%\n\n:updateSuite\nif [0]==[%updateSuiteINI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Create script to update suite files automatically?\n    echo. 1 = Yes\n    echo. 2 = No\n    echo.\n    echo If you have made changes to the scripts, they will be reset but saved to a\n    echo .diff text file inside %build%\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P updateSuiteF=\"Create update script: \"\n) else set updateSuiteF=%updateSuiteINI%\n\nif \"%updateSuiteF%\"==\"\" GOTO updateSuite\nif %updateSuiteF%==1 set \"updateSuite=y\"\nif %updateSuiteF%==2 set \"updateSuite=n\"\nif %updateSuiteF% GTR 2 GOTO updateSuite\nif %deleteINI%==1 echo.updateSuite=^%updateSuiteF%>>%ini%\n\n:timeStamp\nif [0]==[%timeStampINI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Show timestamps of commands during compilation?\n    echo. 1 = Yes\n    echo. 2 = No\n    echo.\n    echo This will show the start times of commands during compilation.\n    echo Don't turn this on unless you really want to see the timestamps.\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P timeStampF=\"Show Timestamps: \"\n) else set timeStampF=%timeStampINI%\n\nif \"%timeStampF%\"==\"\" GOTO timestamp\nif %timeStampF%==1 set \"timeStamp=y\"\nif %timeStampF%==2 set \"timeStamp=n\"\nif %timeStampF% GTR 2 GOTO timeStamp\nif %deleteINI%==1 echo.timeStamp=^%timeStampF%>>%ini%\n\n:ccache\nif [0]==[%ccacheINI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Use ccache when compiling?\n    echo. Experimental.\n    echo. Speeds up rebuilds and recompilations, but requires the files to be\n    echo. compiled at least once before any effect is seen\n    echo. 1 = Yes\n    echo. 2 = No\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P buildwithccache=\"Use ccache: \"\n) else set buildwithccache=%ccacheINI%\n\nif \"%buildwithccache%\"==\"\" GOTO ccache\nif %buildwithccache%==1 set \"ccache=y\"\nif %buildwithccache%==2 set \"ccache=n\"\nif %buildwithccache% GTR 2 GOTO ccache\nif %deleteINI%==1 echo.ccache=^%buildwithccache%>>%ini%\n\n:noMintty\nif [0]==[%noMinttyINI%] (\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo. Are you running this script through ssh or similar?\n    echo. (Can't open another window outside of this terminal^)\n    echo. 1 = Yes\n    echo. 2 = No\n    echo.\n    echo This will disable the use of mintty and print the output to this console.\n    echo There is no guarantee that this will work properly.\n    echo You must make sure that you have ssh keep-alive enabled or something similar\n    echo to screen that will allow you to run this script in the background.\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo -------------------------------------------------------------------------------\n    set /P noMinttyF=\"SSH: \"\n) else set noMinttyF=%noMinttyINI%\n\nif \"%noMinttyF%\"==\"\" GOTO noMintty\nif %noMinttyF%==1 (\n    set \"noMintty=y\"\n    color\n)\nif %noMinttyF%==2 set \"noMintty=n\"\nif %noMinttyF% GTR 2 GOTO noMintty\nif %deleteINI%==1 echo.noMintty=^%noMinttyF%>>%ini%\n\nrem pkgUpdateTime\nif [0]==[%pkgUpdateTimeINI%] (\n    set pkgUpdateTime=86400\n) else set pkgUpdateTime=%pkgUpdateTimeINI%\nif %deleteINI%==1 echo.pkgUpdateTime=^%pkgUpdateTime%>>%ini%\n\nrem ------------------------------------------------------------------\nrem download and install basic msys2 system:\nrem ------------------------------------------------------------------\ncd %build%\nset scripts=media-suite_compile.sh media-suite_deps.sh media-suite_helper.sh media-suite_update.sh\nfor %%s in (%scripts%) do (\n    if not exist \"%build%\\%%s\" (\n        powershell -Command (New-Object System.Net.WebClient^).DownloadFile('\"https://github.com/m-ab-s/media-autobuild_suite/raw/master/build/%%s\"', '\"%%s\"' ^)\n    )\n)\n\nrem checkmsys2\nif not exist \"%instdir%\\msys64\\msys2_shell.cmd\" (\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo.- Download and install msys2 basic system\n    echo.\n    echo -------------------------------------------------------------------------------\n    echo [System.Net.ServicePointManager]::SecurityProtocol = 'Tls12'; ^\n        (New-Object System.Net.WebClient^).DownloadFile(^\n        'https://github.com/msys2/msys2-installer/releases/download/nightly-x86_64/msys2-base-x86_64-latest.sfx.exe', ^\n        \"$PWD\\msys2-base.sfx.exe\"^) | powershell -NoProfile -Command - || goto :errorMsys\n    :unpack\n    if exist %build%\\msys2-base.sfx.exe (\n        echo -------------------------------------------------------------------------------\n        echo.\n        echo.- unpacking msys2 basic system\n        echo.\n        echo -------------------------------------------------------------------------------\n        .\\msys2-base.sfx.exe x -y -o\"..\"\n        if exist msys2-base.sfx.exe del msys2-base.sfx.exe\n    )\n\n    if not exist %instdir%\\msys64\\usr\\bin\\msys-2.0.dll (\n        :errorMsys\n        echo -------------------------------------------------------------------------------\n        echo.\n        echo.- Download msys2 basic system failed,\n        echo.- please download it manually from:\n        echo.- http://repo.msys2.org/distrib/\n        echo.- extract and put the msys2 folder into\n        echo.- the root media-autobuid_suite folder\n        echo.- and start the batch script again!\n        echo.\n        echo -------------------------------------------------------------------------------\n        pause\n        GOTO :unpack\n    )\n)\n\nrem getMintty\nset \"bash=%instdir%\\msys64\\usr\\bin\\bash.exe\"\nset \"PATH=%instdir%\\msys64\\opt\\bin;%instdir%\\msys64\\usr\\bin;%PATH%\"\nif not exist %instdir%\\mintty.lnk (\n    echo -------------------------------------------------------------------------------\n    echo.- make a first run\n    echo -------------------------------------------------------------------------------\n    call :runBash firstrun.log exit\n\n    sed -i \"s/#Color/Color/;s/^^IgnorePkg.*/#&/\" %instdir%\\msys64\\etc\\pacman.conf\n\n    echo.-------------------------------------------------------------------------------\n    echo.first update\n    echo.-------------------------------------------------------------------------------\n    title first msys2 update\n    call :runBash firstUpdate.log pacman --noconfirm -Sy --asdeps pacman-mirrors\n\n    echo.-------------------------------------------------------------------------------\n    echo.critical updates\n    echo.-------------------------------------------------------------------------------\n    pacman -S --needed --ask=20 --noconfirm --asdeps bash pacman msys2-runtime\n\n    echo.-------------------------------------------------------------------------------\n    echo.second update\n    echo.-------------------------------------------------------------------------------\n    title second msys2 update\n    call :runBash secondUpdate.log pacman --noconfirm -Syu --asdeps\n\n    (\n        echo.Set Shell = CreateObject(\"WScript.Shell\"^)\n        echo.Set link = Shell.CreateShortcut(\"%instdir%\\mintty.lnk\"^)\n        if %CC%==clang (\n            echo.link.Arguments = \"-full-path -clang64 -where ..\"\n        ) else (\n            echo.link.Arguments = \"-full-path -mingw -where ..\"\n        )\n        echo.link.Description = \"msys2 shell console\"\n        echo.link.TargetPath = \"%instdir%\\msys64\\msys2_shell.cmd\"\n        echo.link.WindowStyle = 1\n        echo.link.IconLocation = \"%instdir%\\msys64\\msys2.ico\"\n        echo.link.WorkingDirectory = \"%instdir%\\msys64\"\n        echo.link.Save\n    )>%build%\\setlink.vbs\n    cscript /B /Nologo %build%\\setlink.vbs\n    del %build%\\setlink.vbs\n)\n\nrem createFolders\nif %build32%==yes call :createBaseFolders local32\nif %build64%==yes call :createBaseFolders local64\n\nrem checkFstab\nset \"removefstab=no\"\nset \"fstab=%instdir%\\msys64\\etc\\fstab\"\nif exist %fstab%. (\n    findstr trunk %fstab% >nul 2>&1 || set \"removefstab=yes\"\n    for /f \"tokens=1 delims= \" %%a in ('findstr trunk %fstab%') do if not [%%a]==[%instdir%\\] set \"removefstab=yes\"\n    findstr local32 %fstab% >nul 2>&1 && ( if [%build32%]==[no] set \"removefstab=yes\" ) || if [%build32%]==[yes] set \"removefstab=yes\"\n    findstr local64 %fstab% >nul 2>&1 && ( if [%build64%]==[no] set \"removefstab=yes\" ) || if [%build64%]==[yes] set \"removefstab=yes\"\n) else set removefstab=yes\n\nif not [%removefstab%]==[no] (\n    rem writeFstab\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo.- write fstab mount file\n    echo.\n    echo -------------------------------------------------------------------------------\n    (\n        echo.none / cygdrive binary,posix=0,noacl,user 0 0\n        echo.\n        echo.%instdir%\\ /trunk ntfs binary,posix=0,noacl,user 0 0\n        echo.%instdir%\\build\\ /build ntfs binary,posix=0,noacl,user 0 0\n        echo.%instdir%\\msys64\\mingw32\\ /mingw32 ntfs binary,posix=0,noacl,user 0 0\n        echo.%instdir%\\msys64\\mingw64\\ /mingw64 ntfs binary,posix=0,noacl,user 0 0\n        echo.%instdir%\\msys64\\clang32\\ /clang32 ntfs binary,posix=0,noacl,user 0 0\n        echo.%instdir%\\msys64\\clang64\\ /clang64 ntfs binary,posix=0,noacl,user 0 0\n        if \"%build32%\"==\"yes\" echo.%instdir%\\local32\\ /local32 ntfs binary,posix=0,noacl,user 0 0\n        if \"%build64%\"==\"yes\" echo.%instdir%\\local64\\ /local64 ntfs binary,posix=0,noacl,user 0 0\n    )>\"%instdir%\\msys64\\etc\\fstab.\"\n)\n\nif not exist \"%instdir%\\msys64\\home\\%USERNAME%\" mkdir \"%instdir%\\msys64\\home\\%USERNAME%\"\nset \"TERM=\"\ntype nul >>\"%instdir%\\msys64\\home\\%USERNAME%\\.minttyrc\"\nfor /F \"tokens=2 delims==\" %%b in ('findstr /i TERM \"%instdir%\\msys64\\home\\%USERNAME%\\.minttyrc\"') do set TERM=%%b\nif not defined TERM (\n    printf %%s\\n Locale=en_US Charset=UTF-8 Font=Consolas Columns=120 Rows=30 TERM=xterm-256color ^\n    > \"%instdir%\\msys64\\home\\%USERNAME%\\.minttyrc\"\n    set \"TERM=xterm-256color\"\n)\n\nrem gitsettings\nif not exist \"%instdir%\\msys64\\home\\%USERNAME%\\.gitconfig\" (\n    echo.[user]\n    echo.name = %USERNAME%\n    echo.email = %USERNAME%@%COMPUTERNAME%\n    echo.\n    echo.[color]\n    echo.ui = true\n    echo.\n    echo.[core]\n    echo.editor = vim\n    echo.autocrlf =\n    echo.\n    echo.[merge]\n    echo.tool = vimdiff\n    echo.\n    echo.[push]\n    echo.default = simple\n)>\"%instdir%\\msys64\\home\\%USERNAME%\\.gitconfig\"\n\nrem installbase\nif exist \"%instdir%\\msys64\\etc\\pac-base.pk\" del \"%instdir%\\msys64\\etc\\pac-base.pk\"\nfor %%i in (%msyspackages%) do echo.%%i>>%instdir%\\msys64\\etc\\pac-base.pk\n\nif not exist %instdir%\\msys64\\usr\\bin\\make.exe (\n    echo.-------------------------------------------------------------------------------\n    echo.install msys2 base system\n    echo.-------------------------------------------------------------------------------\n    if exist %build%\\install_base_failed del %build%\\install_base_failed\n    title install base system\n    (\n        echo.echo -ne \"\\033]0;install base system\\007\"\n        echo.msysbasesystem=\"$(cat /etc/pac-base.pk | tr '\\n\\r' '  ')\"\n        echo.[[ \"$(uname)\" = *6.1* ]] ^&^& nargs=\"-n 4\"\n        echo.echo $msysbasesystem ^| xargs $nargs pacman -Sw --noconfirm --ask=20 --needed\n        echo.echo $msysbasesystem ^| xargs $nargs pacman -S --noconfirm --ask=20 --needed\n        echo.echo $msysbasesystem ^| xargs $nargs pacman -D --asexplicit\n        echo.sleep ^3\n        echo.exit\n    )>%build%\\pacman.sh\n    call :runBash pacman.log /build/pacman.sh\n    del %build%\\pacman.sh\n)\n\nfor %%i in (%instdir%\\msys64\\usr\\ssl\\cert.pem) do if %%~zi==0 call :runBash cert.log update-ca-trust\n\nrem installmingw\nrem extra package for clang\nif %CC%==clang (\n    set \"mingwpackages=%mingwpackages% clang gcc-compat lld\"\n) else (\n    set \"mingwpackages=%mingwpackages% binutils gcc\"\n)\nif exist \"%instdir%\\msys64\\etc\\pac-mingw.pk\" del \"%instdir%\\msys64\\etc\\pac-mingw.pk\"\nfor %%i in (%mingwpackages%) do echo.%%i>>%instdir%\\msys64\\etc\\pac-mingw.pk\nif %build32%==yes call :getmingw 32\nif %build64%==yes call :getmingw 64\nif exist \"%build%\\mingw.sh\" del %build%\\mingw.sh\n\nrem updatebase\necho.-------------------------------------------------------------------------------\necho.update autobuild suite\necho.-------------------------------------------------------------------------------\n\ncd %build%\nif %updateSuite%==y (\n    if not exist %instdir%\\update_suite.sh (\n        echo -------------------------------------------------------------------------------\n        echo. Creating suite update file...\n        echo.\n        echo. Run this file by dragging it to mintty before the next time you run\n        echo. the suite and before reporting an issue.\n        echo.\n        echo. It needs to be run separately and with the suite not running!\n        echo -------------------------------------------------------------------------------\n    )\n    (\n        echo.#!/bin/bash\n        echo.\n        echo.# Run this file by dragging it to mintty shortcut.\n        echo.# Be sure the suite is not running before using it!\n        echo.\n        echo.update=yes\n        %instdir%\\msys64\\usr\\bin\\sed -n '/start suite update/,/end suite update/p' ^\n            %build%/media-suite_update.sh\n    )>%instdir%\\update_suite.sh\n)\n\nrem ------------------------------------------------------------------\nrem write config profiles:\nrem ------------------------------------------------------------------\n\nif %build32%==yes call :writeProfile 32\nif %build64%==yes call :writeProfile 64\n\nrem update\nif exist \"%instdir%\\build\\updated.log\" (\n    powershell -noprofile -command \"exit ([datetimeoffset]::now.tounixtimeseconds() - (get-content %instdir%\\build\\updated.log) -gt %pkgUpdateTime%)\" || set needsupdate=yes\n) else (\n    set needsupdate=yes\n)\nif defined needsupdate (\n    call :runBash update.log /build/media-suite_update.sh --build32=%build32% --build64=%build64% --CC=\"%CC%\"\n    powershell -noprofile -command \"[datetimeoffset]::now.tounixtimeseconds()\" > %instdir%\\build\\updated.log\n)\n\nif exist \"%build%\\update_core\" (\n    echo.-------------------------------------------------------------------------------\n    echo.critical updates\n    echo.-------------------------------------------------------------------------------\n    pacman -S --needed --noconfirm --ask=20 --asdeps bash pacman msys2-runtime\n    del \"%build%\\update_core\"\n)\n\nmkdir \"%instdir%\\msys64\\home\\%USERNAME%\\.gnupg\" > nul 2>&1\nfindstr hkps://keys.openpgp.org \"%instdir%\\msys64\\home\\%USERNAME%\\.gnupg\\gpg.conf\" >nul 2>&1 || echo keyserver hkps://keys.openpgp.org >> \"%instdir%\\msys64\\home\\%USERNAME%\\.gnupg\\gpg.conf\"\n\nrem loginProfile\nif exist %instdir%\\msys64\\etc\\profile.pacnew ^\n    move /y %instdir%\\msys64\\etc\\profile.pacnew %instdir%\\msys64\\etc\\profile\n(\n    echo.case \"$MSYSTEM\" in\n    echo.*32^) source /local32/etc/profile2.local ;;\n    echo.*64^) source /local64/etc/profile2.local ;;\n    echo.esac\n    echo.case $- in\n    echo.*i*^) ;;\n    echo.*^) export LANG=en_US.UTF-8 ;;\n    echo.esac\n)>%instdir%\\msys64\\etc\\profile.d\\Zab-suite.sh\n\nrem compileLocals\ncd %instdir%\n\ntitle MABSbat\n\nif exist %build%\\compilation_failed del %build%\\compilation_failed\nif exist %build%\\fail_comp del %build%\\compilation_failed\n\nendlocal & (\nset compileArgs=--cpuCount=%cpuCount% --build32=%build32% --build64=%build64% ^\n--deleteSource=%deleteSource% --mp4box=%mp4box% --vpx=%vpx2% --x264=%x2643% --x265=%x2652% ^\n--other265=%other265% --flac=%flac% --fdkaac=%fdkaac% --mediainfo=%mediainfo% --sox=%sox% ^\n--ffmpeg=%ffmpeg% --ffmpegUpdate=%ffmpegUpdate% --ffmpegChoice=%ffmpegChoice% --mplayer=%mplayer% ^\n--mpv=%mpv% --license=%license2%  --stripping=%stripFile% --packing=%packFile% --rtmpdump=%rtmpdump% ^\n--logging=%logging% --bmx=%bmx% --standalone=%standalone% --aom=%aom% --faac=%faac% --exhale=%exhale% ^\n--ffmbc=%ffmbc% --curl=%curl% --cyanrip=%cyanrip% --rav1e=%rav1e% --ripgrep=%ripgrep% --dav1d=%dav1d% ^\n--vvc=%vvc% --uvg266=%uvg266% --vvenc=%vvenc% --vvdec=%vvdec% --jq=%jq% --jo=%jo% --dssim=%dssim% ^\n--avs2=%avs2% --dovitool=%dovitool% --hdr10plustool=%hdr10plustool% --timeStamp=%timeStamp% ^\n--noMintty=%noMintty% --ccache=%ccache% --svthevc=%svthevc% --svtav1=%svtav1% --svtvp9=%svtvp9% ^\n--xvc=%xvc% --vlc=%vlc% --libavif=%libavif% --jpegxl=%jpegxl% --av1an=%av1an% ^\n--ffmpegPath=%ffmpegPath% --exitearly=%MABS_EXIT_EARLY%\n    @REM --autouploadlogs=%autouploadlogs%\n    set \"noMintty=%noMintty%\"\n    if %build64%==yes (\n        if %CC%==clang ( set \"MSYSTEM=CLANG64\" ) else set \"MSYSTEM=MINGW64\"\n    ) else (\n        if %CC%==clang ( set \"MSYSTEM=CLANG32\" ) else set \"MSYSTEM=MINGW32\"\n    )\n    set \"MSYS2_PATH_TYPE=inherit\"\n    if %noMintty%==y set \"PATH=%PATH%\"\n    set \"build=%build%\"\n    set \"instdir=%instdir%\"\n)\nif %noMintty%==y (\n    call :runBash compile.log /build/media-suite_compile.sh %compileArgs%\n) else (\n    if exist %build%\\compile.log del %build%\\compile.log\n    start \"compile\" /I /LOW %CD%\\msys64\\usr\\bin\\mintty.exe -i /msys2.ico -t \"media-autobuild_suite\" ^\n    --log 2>&1 %build%\\compile.log /bin/env MSYSTEM=%MSYSTEM% MSYS2_PATH_TYPE=inherit ^\n    /usr/bin/bash ^\n    --login /build/media-suite_compile.sh %compileArgs%\n)\ncolor\nexit /B %ERRORLEVEL%\nendlocal\ngoto :EOF\n\n:createBaseFolders\nif not exist %instdir%\\%1\\share (\n    echo.-------------------------------------------------------------------------------\n    echo.creating %1-bit install folders\n    echo.-------------------------------------------------------------------------------\n    mkdir %instdir%\\%1 2>NUL\n    mkdir %instdir%\\%1\\bin 2>NUL\n    mkdir %instdir%\\%1\\bin-audio 2>NUL\n    mkdir %instdir%\\%1\\bin-global 2>NUL\n    mkdir %instdir%\\%1\\bin-video 2>NUL\n    mkdir %instdir%\\%1\\etc 2>NUL\n    mkdir %instdir%\\%1\\include 2>NUL\n    mkdir %instdir%\\%1\\lib 2>NUL\n    mkdir %instdir%\\%1\\lib\\pkgconfig 2>NUL\n    mkdir %instdir%\\%1\\share 2>NUL\n)\ngoto :EOF\n\n:writeProfile\n(\n    echo.#!/usr/bin/bash\n    if %CC%==clang (\n        echo.MSYSTEM=CLANG%1\n    ) else (\n        echo.MSYSTEM=MINGW%1\n    )\n    echo.source /etc/msystem\n    echo.\n    echo.# package build directory\n    echo.export LOCALBUILDDIR='/build'\n    echo.# package installation prefix\n    echo.export LOCALDESTDIR='/local%1'\n    echo.\n    echo.bits='%1bit'\n    echo.\n    echo.export CONFIG_SITE=/etc/config.site\n    echo.alias dir='ls -la --color=auto'\n    echo.alias ls='ls --color=auto'\n    if %CC%==clang (\n        echo.export CC=\"ccache clang\"\n        echo.export CXX=\"ccache clang++\"\n    ) else (\n        echo.export CC=\"ccache gcc\"\n        echo.export CXX=\"ccache g++\"\n    )\n    echo.\n    echo.CARCH=\"${MINGW_CHOST%%%%-*}\"\n    echo.C_INCLUDE_PATH=\"$(cygpath -pm $LOCALDESTDIR/include:$MINGW_PREFIX/include)\"\n    echo.CPLUS_INCLUDE_PATH=\"$(cygpath -pm $LOCALDESTDIR/include)\"\n    echo.export C_INCLUDE_PATH CPLUS_INCLUDE_PATH\n    echo.\n    echo.MANPATH=\"${LOCALDESTDIR}/share/man:${MINGW_PREFIX}/share/man:/usr/share/man\"\n    echo.INFOPATH=\"${LOCALDESTDIR}/share/info:${MINGW_PREFIX}/share/info:/usr/share/info\"\n    echo.\n    echo.DXSDK_DIR=\"${MINGW_PREFIX}/${MINGW_CHOST}\"\n    echo.ACLOCAL_PATH=\"${LOCALDESTDIR}/share/aclocal:${MINGW_PREFIX}/share/aclocal:/usr/share/aclocal\"\n    echo.PKG_CONFIG=\"${MINGW_PREFIX}/bin/pkgconf --keep-system-cflags --static\"\n    echo.PKG_CONFIG_PATH=\"${LOCALDESTDIR}/lib/pkgconfig:${MINGW_PREFIX}/lib/pkgconfig\"\n    echo.\n    echo.CFLAGS=\"-D_FORTIFY_SOURCE=2 -fstack-protector-strong\" # security related flags\n    echo.CFLAGS+=\" -mtune=generic -O2 -pipe\" # performance related flags\n    echo.CFLAGS+=\" -D__USE_MINGW_ANSI_STDIO=1\" # mingw-w64 specific flags for c99 printf\n    echo.CXXFLAGS=\"${CFLAGS}\" # copy CFLAGS to CXXFLAGS\n    echo.LDFLAGS=\"${CFLAGS} -static-libgcc\" # copy CFLAGS to LDFLAGS\n    echo.case \"$CC\" in\n    echo.*clang^)\n    echo.    # clang complains about using static-libstdc++ with C files.\n    echo.    LDFLAGS+=\" --start-no-unused-arguments -static-libstdc++ --end-no-unused-arguments\"\n    echo.    CFLAGS+=\" --start-no-unused-arguments -mthreads --end-no-unused-arguments\" # mingw-w64 specific flags for windows threads.\n    echo.    CFLAGS+=\" -Qunused-arguments\" # clang 17.0.1 complains about -mwindows being present during compilation\n    echo.;;\n    echo.*gcc^)\n    echo.    # while gcc doesn't.\n    echo.    LDFLAGS+=\" -static-libstdc++\"\n    echo.    CFLAGS+=\" -mthreads\" # mingw-w64 specific flags for windows threads.\n    echo.;;\n    echo.esac\n    echo.# CPPFLAGS used to be here, but cmake ignores it, so it's not as useful.\n    echo.export DXSDK_DIR ACLOCAL_PATH PKG_CONFIG PKG_CONFIG_PATH CFLAGS CXXFLAGS LDFLAGS\n    echo.\n    echo.export CARGO_HOME=\"/opt/cargo\"\n    echo.if [[ -z \"$CCACHE_DIR\" ]]; then\n    echo.    export CCACHE_DIR=\"${LOCALBUILDDIR}/cache\"\n    echo.fi\n    echo.\n    echo.export PYTHONPATH=\n    echo.\n    echo.LANG=en_US.UTF-8\n    echo.PATH=\"${MINGW_PREFIX}/bin:${INFOPATH}:${MSYS2_PATH}:${ORIGINAL_PATH}\"\n    echo.PATH=\"${LOCALDESTDIR}/bin-audio:${LOCALDESTDIR}/bin-global:${LOCALDESTDIR}/bin-video:${LOCALDESTDIR}/bin:${PATH}\"\n    echo.PATH=\"/opt/bin:${PATH}\"\n    echo.source '/etc/profile.d/perlbin.sh'\n    echo.PS1='\\[\\033[32m\\]\\u@\\h \\[\\e[33m\\]\\w\\[\\e[0m\\]\\n\\$ '\n    echo.HOME=\"/home/${USERNAME}\"\n    echo.GIT_GUI_LIB_DIR=`cygpath -w /usr/share/git-gui/lib`\n    echo.export LANG PATH PS1 HOME GIT_GUI_LIB_DIR\n    echo.stty susp undef\n    echo.test -f \"$LOCALDESTDIR/etc/custom_profile\" ^&^& source \"$LOCALDESTDIR/etc/custom_profile\"\n)>%instdir%\\local%1\\etc\\profile2.local\n%instdir%\\msys64\\usr\\bin\\dos2unix -q %instdir%\\local%1\\etc\\profile2.local\ngoto :EOF\n\n:writeOption\nsetlocal enabledelayedexpansion\nfor %%i in (%*) do (\n    set _opt=%%~i\n    if [\"!_opt:~0,2!\"]==[\"--\"] (\n        echo !_opt!\n    ) else if [\"!_opt:~0,3!\"]==[\"#--\"] (\n        echo !_opt!\n    ) else if [\"!_opt:~0,1!\"]==[\"#\"] (\n        echo #--enable-!_opt:~1!\n    ) else (\n        echo --enable-!_opt!\n    )\n)\nendlocal\ngoto :EOF\n\n:runBash\nsetlocal enabledelayedexpansion\nset \"log=%1\"\nshift\nset \"command=%1\"\nshift\nset args=%*\nset arg=!args:%log% %command%=!\nif %noMintty%==y (\n    start \"bash\" /B /LOW /WAIT bash %build%\\bash.sh \"%build%\\%log%\" \"%command%\" \"%arg%\"\n) else (\n    if exist %build%\\%log% del %build%\\%log%\n    start /I /LOW /WAIT %instdir%\\msys64\\usr\\bin\\mintty.exe -d -i /msys2.ico ^\n    -t \"media-autobuild_suite\" --log 2>&1 %build%\\%log% /usr/bin/bash -lc ^\n    \"%command% %arg%\"\n)\nendlocal\ngoto :EOF\n\n:getmingw\nsetlocal\nset found=0\nif %CC%==clang (\n    set \"compiler=%instdir%\\msys64\\clang%1\\bin\\clang.exe\"\n) else set \"compiler=%instdir%\\msys64\\mingw%1\\bin\\gcc.exe\"\nif exist %compiler% set found=1\nif %found%==1 GOTO :EOF\necho.-------------------------------------------------------------------------------\necho.install %1 bit compiler\necho.-------------------------------------------------------------------------------\nif %CC%==clang (\n    if \"%1\"==\"32\" (\n        set prefix=mingw-w64-clang-i686-\n    ) else set prefix=mingw-w64-clang-x86_64-\n) else (\n    if \"%1\"==\"32\" (\n        set prefix=mingw-w64-i686-\n    ) else set prefix=mingw-w64-x86_64-\n)\n(\n    echo.printf '\\033]0;install %1 bit compiler\\007'\n    echo.[[ \"$(uname)\" = *6.1* ]] ^&^& nargs=\"-n 4\"\n    echo.sed 's/^^/%prefix%/g' /etc/pac-mingw.pk ^| xargs $nargs pacman -Sw --noconfirm --ask=20 --needed\n    echo.sed 's/^^/%prefix%/g' /etc/pac-mingw.pk ^| xargs $nargs pacman -S --noconfirm --ask=20 --needed\n    echo.sleep 3\n    echo.exit\n)>%build%\\mingw.sh\ncall :runBash mingw%1.log /build/mingw.sh\n\nif exist %compiler% set found=1\nif %found%==0 (\n    echo -------------------------------------------------------------------------------\n    echo.\n    echo.MinGW%1 compiler isn't installed; maybe the download didn't work\n    echo.Do you want to try it again?\n    echo.\n    echo -------------------------------------------------------------------------------\n    set /P try=\"try again [y/n]: \"\n\n    if [%try%]==[y] GOTO getmingw %1\n    exit\n)\nendlocal\ngoto :EOF\n\n:resolvePath\nset \"resolvePath=%~dpnx1\"\ngoto :EOF\n"
        }
      ]
    }
  ]
}