{
  "metadata": {
    "timestamp": 1736568620449,
    "page": 695,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY5OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Frogging-Family/linux-tkg",
      "stars": 1370,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.232421875,
          "content": ".*\n!.github\n!.gitignore\n*~\n*.orig\n*.log\n*.run\n*.tgz\n*.xz\n*.pkg\n*.bak\n*.tar.gz\n*.pkg.*\n*.old\n*.db\n*.files\n*/src/\nsrc/*\n*/pkg/\npkg/*\n*/linux-5*/\n*.myfrag\nlogs/*\nkernel_updates\ngnupg/\n*sha256sum*\ncurrent_env\nlinux-kernel.git/\nlinux-src-git/\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 17.66796875,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc.,\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Lesser General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n                            NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License along\n    with this program; if not, write to the Free Software Foundation, Inc.,\n    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w' and `show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.\n"
        },
        {
          "name": "PKGBUILD",
          "type": "blob",
          "size": 11.3134765625,
          "content": "# Based on the file created for Arch Linux by:\n# Tobias Powalowski <tpowa@archlinux.org>\n# Thomas Baechler <thomas@archlinux.org>\n\n# Contributor: Tk-Glitch <ti3nou at gmail dot com>\n# Contributor: Hyper-KVM <hyperkvmx86 at gmail dot com>\n\nplain '       .---.`               `.---.'\nplain '    `/syhhhyso-           -osyhhhys/`'\nplain '   .syNMdhNNhss/``.---.``/sshNNhdMNys.'\nplain '   +sdMh.`+MNsssssssssssssssNM+`.hMds+'\nplain '   :syNNdhNNhssssssssssssssshNNhdNNys:'\nplain '    /ssyhhhysssssssssssssssssyhhhyss/'\nplain '    .ossssssssssssssssssssssssssssso.'\nplain '   :sssssssssssssssssssssssssssssssss:'\nplain '  /sssssssssssssssssssssssssssssssssss/   Linux-tkg'\nplain ' :sssssssssssssoosssssssoosssssssssssss:        kernels'\nplain ' osssssssssssssoosssssssoossssssssssssso'\nplain ' osssssssssssyyyyhhhhhhhyyyyssssssssssso'\nplain ' /yyyyyyhhdmmmmNNNNNNNNNNNmmmmdhhyyyyyy/'\nplain '  smmmNNNNNNNNNNNNNNNNNNNNNNNNNNNNNmmms'\nplain '   /dNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNd/'\nplain '    `:sdNNNNNNNNNNNNNNNNNNNNNNNNNds:`'\nplain '       `-+shdNNNNNNNNNNNNNNNdhs+-`'\nplain '             `.-:///////:-.`'\n\n_where=\"$PWD\" # track basedir as different Arch based distros are moving srcdir around\n_ispkgbuild=\"true\"\n_distro=\"Arch\"\n\ndeclare -p -x > current_env\n\nsource \"$_where\"/customization.cfg # load default configuration from file\n\nif [ -e \"$_EXT_CONFIG_PATH\" ]; then\n  msg2 \"External configuration file $_EXT_CONFIG_PATH will be used and will override customization.cfg values.\"\n  source \"$_EXT_CONFIG_PATH\"\nfi\n\nsource current_env\n\nsource \"$_where\"/linux-tkg-config/prepare\n\n# Make sure we're in a clean state\nif [ ! -e \"$_where\"/BIG_UGLY_FROGMINER ]; then\n  _tkg_initscript\nfi\n\nsource \"$_where\"/BIG_UGLY_FROGMINER\n\nif [ -n \"$_custom_pkgbase\" ]; then\n  pkgbase=\"${_custom_pkgbase}\"\nelse\n  pkgbase=linux\"${_basever}\"-tkg-\"${_cpusched}\"${_compiler_name}\nfi\npkgname=(\"${pkgbase}\" \"${pkgbase}-headers\")\npkgver=\"${_basekernel}\".\"${_sub}\"\npkgrel=273\npkgdesc='Linux-tkg'\narch=('x86_64') # no i686 in here\nurl=\"https://www.kernel.org/\"\nlicense=('GPL2')\nmakedepends=('bison' 'xmlto' 'docbook-xsl' 'inetutils' 'bc' 'libelf' 'pahole' 'patchutils' 'flex' 'python-sphinx' 'python-sphinx_rtd_theme' 'graphviz' 'imagemagick' 'git' 'cpio' 'perl' 'tar' 'xz' 'wget')\nif [ \"$_compiler_name\" = \"-llvm\" ]; then\n  makedepends+=( 'lld' 'clang' 'llvm')\nfi\noptdepends=('schedtool')\noptions=('!strip' 'docs')\n\nfor f in \"$_where\"/linux-tkg-config/\"$_basekernel\"/* \"$_where\"/linux-tkg-patches/\"$_basekernel\"/*; do\n  source+=( \"$f\" )\n  sha256sums+=( \"SKIP\" )\ndone\n\nexport KBUILD_BUILD_HOST=archlinux\nexport KBUILD_BUILD_USER=$pkgbase\nexport KBUILD_BUILD_TIMESTAMP=\"$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})\"\n\nprepare() {\n  rm -rf $pkgdir # Nuke the entire pkg folder so it'll get regenerated clean on next build\n\n  _define_kernel_abs_paths\n  if [ -e \"${srcdir}/customization.cfg\" ]; then\n    msg2 \"Nuking remnant customization.cfg symlink\" && rm -rf \"${srcdir}/customization.cfg\"\n  fi\n  ln -s \"${_where}/customization.cfg\" \"${srcdir}\"\n  ln -s \"${_kernel_work_folder_abs}\" \"${srcdir}\"\n\n  source \"${_where}/current_env\"\n\n  _tkg_srcprep\n}\n\nbuild() {\n  cd \"$_kernel_work_folder_abs\"\n\n  # Use custom compiler paths if defined\n  if [ \"$_compiler_name\" = \"-llvm\" ] && [ -n \"${CUSTOM_LLVM_PATH}\" ]; then\n    PATH=\"${CUSTOM_LLVM_PATH}/bin:${CUSTOM_LLVM_PATH}/lib:${CUSTOM_LLVM_PATH}/include:${PATH}\"\n  elif [ -n \"${CUSTOM_GCC_PATH}\" ]; then\n    PATH=\"${CUSTOM_GCC_PATH}/bin:${CUSTOM_GCC_PATH}/lib:${CUSTOM_GCC_PATH}/include:${PATH}\"\n  fi\n\n  if [ \"$_force_all_threads\" = \"true\" ]; then\n    _force_all_threads=\"-j$((`nproc`+1))\"\n  else\n    _force_all_threads=\"${MAKEFLAGS}\"\n  fi\n\n  # ccache\n  if [ \"$_noccache\" != \"true\" ] && pacman -Qq ccache &> /dev/null; then\n    export PATH=\"/usr/lib/ccache/bin/:$PATH\"\n    export CCACHE_SLOPPINESS=\"file_macro,locale,time_macros\"\n    export CCACHE_NOHASHDIR=\"true\"\n    msg2 'ccache was found and will be used'\n  fi\n\n  # document the TkG variables, excluding \"_\", \"_EXT_CONFIG_PATH\", \"_where\", and \"_path\".\n  declare -p | cut -d ' ' -f 3 | grep -P '^_(?!=|EXT_CONFIG_PATH|where|path)' > \"${srcdir}/customization-full.cfg\"\n\n  # remove -O2 flag and place user optimization flag\n  CFLAGS=${CFLAGS/-O2/}\n  CFLAGS+=\" ${_compileropt}\"\n\n  # build!\n  if pacman -Qq schedtool &> /dev/null; then\n    msg2 \"Using schedtool\"\n    _schedtool=\"command schedtool -B -n 1\"\n    _ionice=\"command ionice -n 1\"\n  fi\n  _runtime=$(\n    if [ -n \"$_schedtool\" ]; then\n      _pid=\"$(exec bash -c 'echo \"$PPID\"')\"\n      $_schedtool \"$_pid\" ||:\n      $_ionice -p \"$_pid\" ||:\n    fi\n    time ( make ${_force_all_threads} ${llvm_opt} LOCALVERSION= bzImage modules 2>&1 ) 3>&1 1>&2 2>&3\n    return $?\n  )\n}\n\nhackbase() {\n  pkgdesc=\"The $pkgdesc kernel and modules - https://github.com/Frogging-Family/linux-tkg\"\n  depends=('coreutils' 'kmod' 'initramfs')\n  optdepends=('linux-docs: Kernel hackers manual - HTML documentation that comes with the Linux kernel.'\n              'crda: to set the correct wireless channels of your country.'\n              'linux-firmware: Firmware files for Linux'\n              'modprobed-db: Keeps track of EVERY kernel module that has ever been probed. Useful for make localmodconfig.'\n              'nvidia-tkg: NVIDIA drivers for all installed kernels - non-dkms version.'\n              'nvidia-dkms-tkg: NVIDIA drivers for all installed kernels - dkms version.'\n              'update-grub: Simple wrapper around grub-mkconfig.')\n  if [ -e \"${srcdir}/ntsync.rules\" ]; then\n    provides=(\"linux=${pkgver}\" \"${pkgbase}\" VIRTUALBOX-GUEST-MODULES WIREGUARD-MODULE NTSYNC-MODULE ntsync-header)\n  else\n    provides=(\"linux=${pkgver}\" \"${pkgbase}\" VIRTUALBOX-GUEST-MODULES WIREGUARD-MODULE)\n  fi\n  replaces=(virtualbox-guest-modules-arch wireguard-arch)\n\n  _define_kernel_abs_paths\n  cd \"$_kernel_work_folder_abs\"\n\n  # get kernel version\n  local _kernver=\"$(<version)\"\n  local modulesdir=\"$pkgdir/usr/lib/modules/$_kernver\"\n\n  msg2 \"Installing boot image...\"\n  # systemd expects to find the kernel here to allow hibernation\n  # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344\n  install -Dm644 \"$(make ${llvm_opt} -s image_name)\" \"$modulesdir/vmlinuz\"\n\n  # Used by mkinitcpio to name the kernel\n  echo \"$pkgbase\" | install -Dm644 /dev/stdin \"$modulesdir/pkgbase\"\n\n  msg2 \"Installing modules...\"\n  ZSTD_CLEVEL=19 make INSTALL_MOD_PATH=\"$pkgdir/usr\" INSTALL_MOD_STRIP=1 \\\n    DEPMOD=/doesnt/exist modules_install  # Suppress depmod\n\n  # remove build and source links\n  rm -f \"$modulesdir\"/{source,build}\n\n  # install cleanup pacman hook and script\n  sed -e \"s|cleanup|${pkgbase}-cleanup|g\" \"${srcdir}\"/90-cleanup.hook |\n    install -Dm644 /dev/stdin \"${pkgdir}/usr/share/libalpm/hooks/90-${pkgbase}.hook\"\n  install -Dm755 \"${srcdir}\"/cleanup \"${pkgdir}/usr/share/libalpm/scripts/${pkgbase}-cleanup\"\n\n  # install customization file, for reference\n  install -Dm644 \"${srcdir}\"/customization-full.cfg \"${pkgdir}/usr/share/doc/${pkgbase}/customization.cfg\"\n\n  # ntsync\n  if [ -e \"${srcdir}/ntsync.conf\" ]; then\n    # workaround for missing header with ntsync\n    if [ -e \"${_kernel_work_folder_abs}/include/uapi/linux/ntsync.h\" ] && [ ! -e \"/usr/include/linux/ntsync.h\" ]; then\n      msg2 \"Workaround missing ntsync header\"\n      install -Dm644 \"${_kernel_work_folder_abs}\"/include/uapi/linux/ntsync.h \"${pkgdir}/usr/include/linux/ntsync.h\"\n    fi\n    # load ntsync module at boot\n    msg2 \"Set the ntsync module to be loaded at boot through /etc/modules-load.d\"\n    install -Dm644 \"${srcdir}\"/ntsync.conf \"${pkgdir}/etc/modules-load.d/ntsync.conf\"\n  fi\n\n  # install udev rule for ntsync\n  if [ -e \"${srcdir}/ntsync.rules\" ]; then\n    msg2 \"Installing udev rule for ntsync\"\n    install -Dm644 \"${srcdir}\"/ntsync.rules \"${pkgdir}/etc/udev/rules.d/ntsync.rules\"\n  fi\n}\n\nhackheaders() {\n  pkgdesc=\"Headers and scripts for building modules for the $pkgdesc kernel - https://github.com/Frogging-Family/linux-tkg\"\n  provides=(\"linux-headers=${pkgver}\" \"${pkgbase}-headers=${pkgver}\")\n  case $_basever in\n    54|57|58|59|510)\n    ;;\n    *)\n      depends=('pahole')\n    ;;\n  esac\n\n  _define_kernel_abs_paths\n  cd \"$_kernel_work_folder_abs\"\n\n  local builddir=\"${pkgdir}/usr/lib/modules/$(<version)/build\"\n\n  msg2 \"Installing build files...\"\n  install -Dt \"$builddir\" -m644 .config Makefile Module.symvers System.map \\\n    localversion.* version vmlinux\n  install -Dt \"$builddir/kernel\" -m644 kernel/Makefile\n  install -Dt \"$builddir/arch/x86\" -m644 arch/x86/Makefile\n  cp -t \"$builddir\" -a scripts\n\n  # add objtool for external module building and enabled VALIDATION_STACK option\n  install -Dt \"$builddir/tools/objtool\" tools/objtool/objtool\n\n  # add xfs and shmem for aufs building\n  mkdir -p \"$builddir\"/{fs/xfs,mm}\n\n  # add resolve_btfids on 5.16+\n  if [[ $_basever = 6* ]] || [ $_basever -ge 516 ]; then\n    install -Dt \"$builddir\"/tools/bpf/resolve_btfids tools/bpf/resolve_btfids/resolve_btfids || ( warning \"$builddir/tools/bpf/resolve_btfids was not found. This is undesirable and might break dkms modules !!! Please review your config changes and consider using the provided defconfig and tweaks without further modification.\" && read -rp \"Press enter to continue anyway\" )\n  fi\n\n  msg2 \"Installing headers...\"\n  cp -t \"$builddir\" -a include\n  cp -t \"$builddir/arch/x86\" -a arch/x86/include\n  install -Dt \"$builddir/arch/x86/kernel\" -m644 arch/x86/kernel/asm-offsets.s\n\n  install -Dt \"$builddir/drivers/md\" -m644 drivers/md/*.h\n  install -Dt \"$builddir/net/mac80211\" -m644 net/mac80211/*.h\n\n  # http://bugs.archlinux.org/task/13146\n  install -Dt \"$builddir/drivers/media/i2c\" -m644 drivers/media/i2c/msp3400-driver.h\n\n  # http://bugs.archlinux.org/task/20402\n  install -Dt \"$builddir/drivers/media/usb/dvb-usb\" -m644 drivers/media/usb/dvb-usb/*.h\n  install -Dt \"$builddir/drivers/media/dvb-frontends\" -m644 drivers/media/dvb-frontends/*.h\n  install -Dt \"$builddir/drivers/media/tuners\" -m644 drivers/media/tuners/*.h\n\n  msg2 \"Installing KConfig files...\"\n  find . -name 'Kconfig*' -exec install -Dm644 {} \"$builddir/{}\" \\;\n\n  msg2 \"Removing unneeded architectures...\"\n  local arch\n  for arch in \"$builddir\"/arch/*/; do\n    [[ $arch = */x86/ ]] && continue\n    echo \"Removing $(basename \"$arch\")\"\n    rm -r \"$arch\"\n  done\n\n  msg2 \"Removing documentation...\"\n  rm -r \"$builddir/Documentation\"\n\n  msg2 \"Removing broken symlinks...\"\n  find -L \"$builddir\" -type l -printf 'Removing %P\\n' -delete\n\n  msg2 \"Removing loose objects...\"\n  find \"$builddir\" -type f -name '*.o' -printf 'Removing %P\\n' -delete\n\n  msg2 \"Stripping build tools...\"\n  local file\n  while read -rd '' file; do\n    case \"$(file -Sib \"$file\")\" in\n      application/x-sharedlib\\;*)      # Libraries (.so)\n        strip -v $STRIP_SHARED \"$file\" ;;\n      application/x-archive\\;*)        # Libraries (.a)\n        strip -v $STRIP_STATIC \"$file\" ;;\n      application/x-executable\\;*)     # Binaries\n        strip -v $STRIP_BINARIES \"$file\" ;;\n      application/x-pie-executable\\;*) # Relocatable binaries\n        strip -v $STRIP_SHARED \"$file\" ;;\n    esac\n  done < <(find \"$builddir\" -type f -perm -u+x ! -name vmlinux -print0)\n\n  msg2 \"Adding symlink...\"\n  mkdir -p \"$pkgdir/usr/src\"\n  ln -sr \"$builddir\" \"$pkgdir/usr/src/$pkgbase\"\n\n  if [ \"$_STRIP\" = \"true\" ]; then\n    echo \"Stripping vmlinux...\"\n    strip -v $STRIP_STATIC \"$builddir/vmlinux\"\n  fi\n\n  if [ \"$_NUKR\" = \"true\" ]; then\n    rm -rf \"$srcdir\" # Nuke the entire src folder so it'll get regenerated clean on next build\n  fi\n}\n\nsource /dev/stdin <<EOF\npackage_${pkgbase}() {\nhackbase\n}\n\npackage_${pkgbase}-headers() {\nhackheaders\n}\nEOF\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.4375,
          "content": "## linux-tkg\n\nThis repository provides scripts to automatically download, patch and compile the Linux Kernel from [the official Linux git repository](https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git), with a selection of patches aiming for better desktop/gaming experience. The provided patches can be enabled/disabled by editing the `customization.cfg` file and/or by following the interactive install script. You can use an external config file (default is `$HOME/.config/frogminer/linux-tkg.cfg`, tweakable with the `_EXT_CONFIG_PATH` variable in `customization.cfg`). You can also use your own patches (more information in `customization.cfg` file).\n\n### Important information\n\n- **Non-pacman distros support can be considered experimental. You're invited to report issues you might encounter with it.**\n- **If your distro isn't using systemd, please set _configfile=\"running-kernel\" in customization.cfg or you might end up with a non-bootable kernel**\n\n- Keep in mind building recent linux kernels with GCC will require ~20-25GB of disk space. Using llvm/clang, LTO, ccache and/or enabling more drivers in the defconfig will push that requirement higher, so make sure you have enough free space on the volume you're using to build.\n- In `intel_pstate` driver, frequency scaling aggressiveness has been changed with kernel 5.5 which results in stutters and poor performance in low/medium load scenarios (for higher power savings). As a workaround for our gaming needs, we are setting it to passive mode to make use of the `acpi_cpufreq` governor passthrough, keeping full support for turbo frequencies. It's combined with our aggressive ondemand governor by default for good performance on most CPUs while keeping frequency scaling for power savings. In a typical low/medium load scenario (Core i7 9700k, playing Mario Galaxy on Dolphin emulator) intel_pstate in performance mode gives a stuttery 45-50 fps experience, while passive mode + aggressive ondemand offers a locked 60 fps.\n- Nvidia's proprietary drivers might need to be patched if they don't support your chosen kernel OOTB: [Frogging-Family nvidia-all](https://github.com/Frogging-Family/nvidia-all) can do that automatically for you.\n- Note regarding kernels older than 5.9 on Arch Linux: since the switch to `zstd` compressed `initramfs` by default, you will face an `invalid magic at start of compress` error by default. You can workaround the issue by editing `/etc/mkinitcpio.conf` to uncomment the `COMPRESSION=\"lz4\"` (for example, since that's the best option after zstd) line and regenerating `initramfs` for all kernels with `sudo mkinitpcio -P`\n\n### Customization options\n#### Alternative CPU schedulers\n\n[CFS](https://en.wikipedia.org/wiki/Completely_Fair_Scheduler) is the only CPU scheduler available in the \"vanilla\" kernel sources ≤ 6.5.\n[EEVDF](https://lwn.net/Articles/925371/) is the only CPU scheduler available in the \"vanilla\" kernel sources ≥ 6.6.\n\nIts current implementation doesn't allow for injecting additional schedulers at kernel level, and requires replacing it. Only one scheduler can be patched in at a time.\nHowever, using [Sched-ext](https://github.com/sched-ext/scx), it's possible to inject CPU schedulers at runtime. We offer support for it on ≥ 6.8 by default.\nArch users get scx schedulers from the `scx-scheds` package or on the [AUR](https://aur.archlinux.org/packages/scx-scheds-git) thanks to @sirlucjan (for persistence, set scheduler in \"/etc/default/scx\" and enable the `scx` service).\n\nAlternative schedulers are optionally available in linux-tkg at build time:\n- Project C / PDS & BMQ by Alfred Chen: [blog](http://cchalpha.blogspot.com/ ), [code repository](https://gitlab.com/alfredchen/projectc)\n- MuQSS by Con Kolivas : [blog](http://ck-hack.blogspot.com/), [code repository](https://github.com/ckolivas/linux)\n- CacULE by Hamad Marri - CFS based : [code repository](https://github.com/hamadmarri/cacule-cpu-scheduler)\n- Task Type (TT) by Hamad Marri - CFS based : [code repository](https://github.com/hamadmarri/TT-CPU-Scheduler)\n- BORE (Burst-Oriented Response Enhancer) by Masahito Suzuki - CFS/EEVDF based : [code repository](https://github.com/firelzrd/bore-scheduler)\n- Undead PDS : TkG's port of the pre-Project C \"PDS-mq\" scheduler by Alfred Chen. While PDS-mq got dropped with kernel 5.1 in favor of its BMQ evolution/rework, it wasn't on par with PDS-mq in gaming. \"U\" PDS still performed better in some cases than other schedulers, so it's been kept undead for a while.\n\nThese alternative schedulers may offer a better performance/latency ratio in some scenarios. The availability of each scheduler depends on the chosen Kernel version: the script will display what's available on a per-version basis.\n#### Default tweaks\n- Memory management and swapping tweaks\n- Scheduling tweaks\n- `CFS/EEVDF` tweaks\n- Using the [\"Cake\"](https://www.bufferbloat.net/projects/codel/wiki/CakeTechnical/) network queue management system\n- Using `vm.max_map_count=16777216` by default\n- Cherry-picked patches from [Clear Linux's patchset](https://github.com/clearlinux-pkgs/linux)\n\n#### Optional tweaks\nThe `customization.cfg` file offers many toggles for extra tweaks:\n- [NTsync](https://repo.or.cz/linux/zf.git/shortlog/refs/heads/ntsync5), `Fsync` and `Futex2`(deprecated) support: can improve the performance in games, needs a patched wine like [wine-tkg](https://github.com/Frogging-Family/wine-tkg-git)\n- [Graysky's per-CPU-arch native optimizations](https://github.com/graysky2/kernel_compiler_patch): tunes the compiled code to to a specified CPU\n- Compile with GCC or Clang with optional `O2`/`O3` and `LTO` (Clang only) optimizations.\n  - **Warning regarding DKMS modules prior to v3.0.2 (2021-11-21) and Clang:** `DKMS` version v3.0.1 and earlier will default to using GCC, which will fail to build modules against a Clang-built kernel. This will - for example - break Nvidia drivers. Forcing older `DKMS` to use Clang can be done but isn't recommended.\n- Using [Modprobed-db](https://github.com/graysky2/modprobed-db)'s database can reduce the compilation time and produce a smaller kernel which will only contain the modules listed in it. **NOT recommended**\n  - **Warning**: make sure to read [thoroughly about it first](https://wiki.archlinux.org/index.php/Modprobed-db) since it comes with caveats that can lead to an unbootable kernel.\n- \"Zenify\" patchset using core blk, mm and scheduler tweaks from Zen\n- `ZFS` FPU symbols (<5.9)\n- Overrides for missing ACS capabilities\n- [Waydroid](https://wiki.archlinux.org/title/Waydroid) support\n- [OpenRGB](https://gitlab.com/CalcProgrammer1/OpenRGB) support\n- Provide own kernel `.config` file\n- ...\n#### User patches\n\nTo apply your own patch files using the provided scripts, you will need to put them in a `linux<VERSION><PATCHLEVEL>-tkg-userpatches` folder -- where _VERSION_ and _PATCHLEVEL_ are the kernel version and patch level, as specified in [linux Makefile](https://github.com/torvalds/linux/blob/master/Makefile), the patch works on, _e.g_ `linux65-tkg-userpatches` -- at the same level as the `PKGBUILD` file, with the `.mypatch` extension. The script will by default ask if you want to apply them, one by one. The option `_user_patches` should be set to `true` in the `customization.cfg` file for this to work.\n\n\n### Install procedure\n\nFor all the supported linux distributions, `linux-tkg` has to be cloned with `git`. Since it keeps a clone of the kernel's sources within (`linux-src-git`, created during the first build after a fresh clone), it is recommended to keep the cloned `linux-tkg` folder and simply update it with `git pull`, the install script does the necessary cleanup at every run.\n\n#### Arch & derivatives\n```shell\ngit clone https://github.com/Frogging-Family/linux-tkg.git\ncd linux-tkg\n# Optional: edit the \"customization.cfg\" file\nmakepkg -si\n```\nThe script will use a slightly modified Arch config from the `linux-tkg-config` folder, it can be changed through the `_configfile` variable in `customization.cfg`. The options selected at build-time are installed to `/usr/share/doc/$pkgbase/customization.cfg`, where `$pkgbase` is the package name.\n\n**Note:** the `base-devel` package group is expected to be installed, see [here](https://wiki.archlinux.org/title/Makepkg) for more information.\n\n#### DEB (Debian, Ubuntu and derivatives) and RPM (Fedora, SUSE and derivatives) based distributions\n\n**Important notes:**\nAn issue has been reported for Ubuntu where the stock kernel cannot boot properly any longer, the whereabouts are not entirely clear (only a single user reported that, see https://github.com/Frogging-Family/linux-tkg/issues/436).\n\nThe interactive `install.sh` script will create, depending on the selected distro, `.deb` or `.rpm` packages, move them in the the subfolder `DEBS` or `RPMS` then prompts to install them with the distro's package manager.\n```shell\ngit clone https://github.com/Frogging-Family/linux-tkg.git\ncd linux-tkg\n# Optional: edit the \"customization.cfg\" file\n./install.sh install\n```\nUninstalling custom kernels installed through the script has to be done\nmanually. `install.sh` can can help out with some useful information:\n```shell\ncd path/to/linux-tkg\n./install.sh uninstall-help\n```\nThe script will use a slightly modified Arch config from the `linux-tkg-config` folder, it can be changed through the `_configfile` variable in `customization.cfg`.\n\n#### Generic install\nThe interactive `install.sh` script can be used to perform a \"Generic\" install by choosing `Generic` when prompted. It git clones the kernel tree in the `linux-src-git` folder, patches the code and edits a `.config` file in it. The commands to do are the following:\n```shell\ngit clone https://github.com/Frogging-Family/linux-tkg.git\ncd linux-tkg\n# Optional: edit the \"customization.cfg\" file\n./install.sh install\n```\nThe script will compile the kernel then prompt before doing the following:\n```shell\nsudo cp -R . /usr/src/linux-tkg-${kernel_flavor}\ncd /usr/src/linux-tkg-${kernel_flavor}\nsudo make modules_install\nsudo make install\nsudo dracut --force --hostonly --kver $_kernelname $_dracut_options\nsudo grub-mkconfig -o /boot/grub/grub.cfg\n```\n**Notes:**\n- All the needed dependencies to patch, configure, compile or install the kernel are expected to be installed by the user beforehand.\n- If you only want the script to patch the sources in `linux-src-git`, you can use `./install.sh config`\n- `${kernel_flavor}` is a default naming scheme but can be customized with the variable `_kernel_localversion` in `customization.cfg`.\n- `_dracut_options` is a variable that can be changed in `customization.cfg`.\n- `_libunwind_replace` is a variable that can be changed in `customization.cfg` for replacing `libunwind` with `llvm-libunwind`.\n- The script uses Arch's `.config` file as a base. A custom one can be provided through `_configfile` in `customization.cfg`.\n- The installed files will not be tracked by your package manager and uninstalling requires manual intervention. `./install.sh uninstall-help` can help with useful information if your install procedure follows the `Generic` approach.\n\n#### Gentoo\nThe interactive `install.sh` script supports Gentoo by following the same procedure as `Generic`, symlinks the sources folder in `/usr/src/` to `/usr/src/linux`, then offers to do an `emerge @module-rebuild` for convenience\n```shell\ngit clone https://github.com/Frogging-Family/linux-tkg.git\ncd linux-tkg\n# Optional: edit the \"customization.cfg\" file\n./install.sh install\n```\n**Note:** If you're running openrc, you'll want to set `_configfile=\"running-kernel\"` to use your current kernel's defconfig instead of Arch's. Else the resulting kernel won't boot.\n"
        },
        {
          "name": "customization.cfg",
          "type": "blob",
          "size": 20.4228515625,
          "content": "# linux-TkG config file\n\n# Linux distribution you are using, options are \"Arch\", \"Ubuntu\", \"Debian\", \"Fedora\", \"Suse\", \"Gentoo\", \"Generic\".\n# It is automatically set to \"Arch\" when using PKGBUILD.\n# If left empty, the script will prompt\n_distro=\"\"\n\n# Kernel Version - x.x format without the subversion (will always grab latest available subversion) is recommended\n# you can also set a specific kernel version, e.g. \"6.0-rc4\" or \"5.10.51\",\n#  -> note however that a \"z\" too small on a \"x.y.z\" version may make patches fail\n#     as they got adapted for newer \"z\" values.\n_version=\"\"\n\n#### MISC OPTIONS ####\n\n# External config file to use - If the given file exists in path, it will override default config (customization.cfg) - Default is ~/.config/frogminer/linux-tkg.cfg\n_EXT_CONFIG_PATH=~/.config/frogminer/linux-tkg.cfg\n\n# [Arch specific] Set to anything else than \"true\" to limit cleanup operations and keep source and files generated during compilation.\n# Default is \"true\".\n_NUKR=\"true\"\n\n# Git mirror to use to get the kernel sources, possible values are \"kernel.org\", \"googlesource.com\", \"github.com\" and \"torvalds\"\n_git_mirror=\"\"\n\n# Root folder where to checkout the kernel sources (linux-src-git subdir) and build\n# Note: - Leave empty to use PKGBUILD's dir\n#       - Start with a '/' for an absolute path in which `linux-tkg/linux-src-git/` will be created\n#       - This setting can be used to set the work/build folder to a tmpfs folder\n#         - Requires >= 32GB ram when building a full kernel, should work with less ram with modprobed-db\n_kernel_work_folder=\"\"\n\n# Permanent root folder where to keep the git clone (linux-kernel.git subdir) and fetch new blobs\n# Note: - Leave empty to use PKGBUILD's dir\n#       - Start with a '/' for an absolute path in which `linux-tkg/linux-kernel.git/` will be created\n#       - If your internet is faster than your storage, it may be wise to put this folder\n#         in a tmpfs location (although it will reclone after each restart / tmpfs folder cleanup)\n_kernel_source_folder=\"\"\n\n# Custom compiler root dirs - Leave empty to use system compilers\n# Example: CUSTOM_GCC_PATH=\"/home/frog/PKGBUILDS/mostlyportable-gcc/gcc-mostlyportable-9.2.0\"\nCUSTOM_GCC_PATH=\"\"\n\n# Custom LLVM compiler root dirs - Leave empty to use system llvm compiler\n# Example: CUSTOM_LLVM_PATH=\"/home/frog/PKGBUILDS/mostlyportable-llvm/llvm-mostlyportable-11.0.0\"\nCUSTOM_LLVM_PATH=\"\"\n\n# Set to true to bypass makepkg.conf and use all available threads for compilation. False will respect your makepkg.conf options.\n_force_all_threads=\"true\"\n\n# Set to true to prevent ccache from being used and set CONFIG_GCC_PLUGINS=y (which needs to be disabled for ccache to work properly)\n_noccache=\"false\"\n\n# [Experimental] Build only a subset of the default kernel modules list to speedup compile time and lower needed space to build kernel\n#                Notes:\n#                - If the kernel fails to boot with this option active, disable it and rebuild\n#                - This option cannot be used with _modprobeddb=\"true\"\n_kernel_on_diet=\"false\"\n\n# Set to true to use modprobed db to clean config from unneeded modules. Speeds up compilation considerably. Requires root - https://wiki.archlinux.org/index.php/Modprobed-db\n# Using this option can trigger user prompts if the config doesn't go smoothly.\n# !!!! Make sure to have a well populated db !!!!\n_modprobeddb=\"false\"\n\n# modprobed-db database file location\n_modprobeddb_db_path=~/.config/modprobed.db\n\n# Set to \"1\" to call make menuconfig, \"2\" to call make nconfig, \"3\" to call make xconfig, before building the kernel. Set to false to disable and skip the prompt.\n_menunconfig=\"\"\n\n# Set to true to generate a kernel config fragment from your changes in menuconfig/nconfig. Set to false to disable and skip the prompt.\n_diffconfig=\"\"\n\n# Set to the file name where the generated config fragment should be written to. Only used if _diffconfig is active.\n_diffconfig_name=\"\"\n\n# [Generic and Gentoo specific] Dracut options when generating initramfs\n_dracut_options=\"--lz4\"\n\n#### KERNEL OPTIONS ####\n\n# Name of the default config file to use for the kernel\n# Default (empty)  : \"config.x86_64\" from the linux-tkg-config/5.y folder.\n# \"running-kernel\" : Picks the .config file from the currently running kernel.\n#                    It is recommended to be running an official kernel before running this script, to pick off a correct .config file\n# \"config_hardened.x86_64\" : config file for a hardened kernel, available for kernel version \"5.15\", \"5.13\", \"5.11\", \"5.10\", \"5.7\", \"5.4\".\n#                            To get a complete hardened setup, you have to use \"cfs\" as _cpusched.\n# User provided value : custom user provided file, the given path should be relative to the PKGBUILD file. This enables for example to use a user stripped down .config file.\n#         If the .config file isn't up to date with the chosen kernel version, any extra CONFIG_XXXX is set to its default value.\n# Note: the script copies the resulting .config file as \"kernelconfig.new\" next to the PKGBUILD as a convenience for an eventual re-use. It gets overwritten at each run.\n#       One can use \"kernelconfig.new\" here to always use the latest edited .config file. modprobed-db needs to be used only once for its changes to be picked up.\n_configfile=\"\"\n\n# Determine whether to call \"olddefconfig\" (default) or \"oldconfig\" for manual config updating interaction.\n_config_updating=\"olddefconfig\"\n\n# Disable some non-module debugging - See PKGBUILD for the list\n_debugdisable=\"false\"\n\n# Strip the vmlinux file after build is done. Set to anything other than \"true\" if you require debug headers. Default is \"true\"\n_STRIP=\"true\"\n\n# LEAVE AN EMPTY VALUE TO BE PROMPTED ABOUT FOLLOWING OPTIONS AT BUILD TIME\n\n# CPU scheduler - Options are \"pds\", \"bmq\", \"cacule\", \"tt\", \"bore\", \"bore-eevdf\", \"echo\", \"cfs\" (linux 6.5-) or \"eevdf\" (kernel's default, 6.6+)\n# \"upds\" (TkG's Undead PDS) and \"muqss\" are also available on legacy kernel revisions\n# If unsure, select \"eevdf\" (default)\n_cpusched=\"\"\n\n# Compiler to use - Options are \"gcc\" or \"llvm\".\n# For advanced users.\n_compiler=\"\"\n\n# [Generic and Gentoo specific] Replace `libunwind` with `llvm-libunwind`.\n# ! This is currently experimental.\n# ! It can only work with the `llvm-libunwind` `USE` flag in `sys-devel/clang-common` for Gentoo.\n# Set to \"true\" to enable.\n_libunwind_replace=\"\"\n\n# Use the LLVM Integrated Assembler for a complete LLVM toolchain built kernel. Default is \"1\" when using LLVM.\n# Set to \"0\" to disable if desired, otherwise stick to the default behavior.\n_llvm_ias=\"1\"\n\n# Clang LTO mode, only available with the \"llvm\" compiler - options are \"no\", \"full\" or \"thin\".\n# ! This is currently experimental and might result in an unbootable kernel - Not recommended !\n# \"no: do not enable LTO\"\n# \"full: uses 1 thread for Linking, slow and uses more memory, theoretically with the highest performance gains.\"\n# \"thin: uses multiple threads, faster and uses less memory, may have a lower runtime performance than Full.\"\n_lto_mode=\"\"\n\n# Apply PREEMPT_RT patchset to the kernel.\n# ! Only CFS CPU scheduler is compatible with this patchset !\n# Set to \"1\" to enable.\n_preempt_rt=\"\"\n\n# Forcibly apply the PREEMPT_RT patchset to the kernel, even when upstream does not officially support the kernel subversion.\n# ! This will still not apply when the patch itself or linux-tkg (see _version) do not support the kernel major version - Not recommended !\n# Set to \"1\" to enable.\n_preempt_rt_force=\"\"\n\n# CPU sched_yield_type - Choose what sort of yield sched_yield will perform\n# For PDS and MuQSS: 0: No yield. (Recommended option for gaming on PDS and MuQSS)\n#                    1: Yield only to better priority/deadline tasks. (Default - can be unstable with PDS on some platforms)\n#                    2: Expire timeslice and recalculate deadline. (Usually the slowest option for PDS and MuQSS, not recommended)\n# For BMQ:           0: No yield.\n#                    1: Deboost and requeue task. (Default)\n#                    2: Set rq skip task.\n_sched_yield_type=\"\"\n\n# Round Robin interval is the longest duration two tasks with the same nice level will be delayed for. When CPU time is requested by a task, it receives a time slice equal\n# to the rr_interval in addition to a virtual deadline. When using yield_type 2, a low value can help offset the disadvantages of rescheduling a process that has yielded.\n# MuQSS default: 6ms\"\n# PDS default: 4ms\"\n# BMQ default: 2ms\"\n# Set to \"1\" for 2ms, \"2\" for 4ms, \"3\" for 6ms, \"4\" for 8ms, or \"default\" to keep the chosen scheduler defaults.\n_rr_interval=\"\"\n\n# Set to \"true\" to disable FUNCTION_TRACER/GRAPH_TRACER, lowering overhead but limiting debugging and analyzing of kernel functions - Kernel default is \"false\"\n_ftracedisable=\"false\"\n\n# Set to \"true\" to disable NUMA, lowering overhead, but breaking CUDA/NvEnc on Nvidia equipped systems - Kernel default is \"false\"\n_numadisable=\"false\"\n\n# Set to \"true\" to enable misc additions - May contain temporary fixes pending upstream or changes that can break on non-Arch - Kernel default is \"true\"\n_misc_adds=\"true\"\n\n# Set to \"0\" for periodic ticks, \"1\" to use CattaRappa mode (enabling full tickless) and \"2\" for tickless idle only.\n# Full tickless can give higher performances in case you use isolation of CPUs for tasks\n# and it works only when using the nohz_full kernel parameter, otherwise behaves like idle.\n# Just tickless idle perform better for most platforms.\n_tickless=\"\"\n\n# Set to \"true\" to use ACS override patch - https://wiki.archlinux.org/index.php/PCI_passthrough_via_OVMF#Bypassing_the_IOMMU_groups_.28ACS_override_patch.29 - Kernel default is \"false\"\n_acs_override=\"\"\n\n# Set to \"true\" to add Bcache filesystem support. You'll have to install bcachefs-tools-git from AUR for utilities - https://bcachefs.org/\n# If in doubt, leave it to \"false\"\n# Note:\n# - only for linux <= 6.6, upstreamed (aka included) in linux >= 6.7\n# - this fs can be buggy and isn't recommended on production machines\n# - linux <= 6.0 : this option conflicts with MGLRU\n_bcachefs=\"false\"\n\n# Set to \"true\" to enable builtin support for ntsync, an experimental replacement for esync - requires patched wine - https://repo.or.cz/linux/zf.git/shortlog/refs/heads/ntsync5\n# ! Can't be used on multiple kernels installed side-by-side, which will require https://aur.archlinux.org/packages/ntsync-dkms instead of this option !\n_ntsync=\"false\"\n\n# Set to \"true\" to enable Binder modules to use Waydroid Android containers\n# !!! Not available on Project C schedulers (PDS & BMQ) due to disabled PSI on those !!!\n_waydroid=\"\"\n\n# Various patches and tweaks from Zen/Liquorix, Xanmod and the community - Default is \"true\"\n_glitched_base=\"true\"\n\n# A selection of patches from Zen/Liquorix kernel and additional tweaks for a better gaming experience (ZENIFY) - Default is \"true\"\n# ! depends on _glitched_base=\"true\" !\n_zenify=\"true\"\n\n# compiler optimization level - 1. Optimize for performance (-O2); 2. Optimize harder (-O3); 3. Optimize for size (-Os) - Kernel default is \"1\"\n_compileroptlevel=\"1\"\n\n# CPU compiler optimizations - Defaults to prompt at kernel config if left empty\n# AMD CPUs : \"k8\" \"k8sse3\" \"k10\" \"barcelona\" \"bobcat\" \"jaguar\" \"bulldozer\" \"piledriver\" \"steamroller\" \"excavator\" \"zen\" \"zen2\" \"zen3\" \"zen4\" \"zen5\" (zen3 opt support depends on GCC11) (zen4 opt support depends on GCC13) (zen5 opt support depends on GCC14 or CLANG 19.1)\n# Intel CPUs : \"mpsc\"(P4 & older Netburst based Xeon) \"atom\" \"core2\" \"nehalem\" \"westmere\" \"silvermont\" \"sandybridge\" \"ivybridge\" \"haswell\" \"broadwell\" \"skylake\" \"skylakex\" \"cannonlake\" \"icelake\" \"goldmont\" \"goldmontplus\" \"cascadelake\" \"cooperlake\" \"tigerlake\" \"sapphirerapids\" \"rocketlake\" \"alderlake\" \"raptorlake\" \"meteorlake\" (raptorlake and meteorlake opt support require GCC13)\n# Other options :\n# - \"native_amd\" (use compiler autodetection - Selecting your arch manually in the list above is recommended instead of this option)\n# - \"native_intel\" (use compiler autodetection - Selecting your arch manually in the list above is recommended instead of this option)\n# - \"generic\" (kernel's default - to share the package between machines with different CPU µarch as long as they are x86-64)\n#\n# https://en.wikipedia.org/wiki/X86-64#Microarchitecture_Levels)\n# **LEGACY options - deprecated on current trees**\n# - \"generic_v2\" (depends on GCC11 - to share the package between machines with different CPU µarch supporting at least x86-64-v2\n# - \"generic_v3\" (depends on GCC11 - to share the package between machines with different CPU µarch supporting at least x86-64-v3\n# - \"generic_v4\" (depends on GCC11 - to share the package between machines with different CPU µarch supporting at least x86-64-v4\n_processor_opt=\"\"\n\n# Desired x86_64 compiler ISA level for generic (depends on GCC11+ / CLANG12+) and _processor_opt=\"generic\".\n# \"1\" for x86-64-v1\n# \"2\" for x86-64-v2\n# \"3\" for x86-64-v3\n# To share the package between machines with different CPU µarch supporting at least x86-64-v*.\n# You can find the best version for your CPU by running one of the following:\n#    /lib/ld-linux-x86-64.so.2 --help | grep supported\n#    /lib64/ld-linux-x86-64.so.2 --help | grep supported\n_x86_64_isalvl=\"\"\n\n# CacULE only - Enable Response Driven Balancer, an experimental load balancer for CacULE\n_cacule_rdb=\"false\"\n\n# CacULE only - Load balance time period - Default is 19\n# https://github.com/hamadmarri/cacule-cpu-scheduler/blob/master/patches/CacULE/RDB/rdb.patch#L56\n_cacule_rdb_interval=\"19\"\n\n# TT only - Enable High HZ patch (available for 5.15 only) - Default is \"false\"\n_tt_high_hz=\"false\"\n\n# MuQSS and PDS only - SMT (Hyperthreading) aware nice priority and policy support (SMT_NICE) - Kernel default is \"true\" - You can disable this on non-SMT/HT CPUs for lower overhead\n_smt_nice=\"\"\n\n# EEVDF only (6.8+) - Add support for Sched-ext https://github.com/sched-ext/scx\n# Arch users can find scx schedulers on the AUR (https://aur.archlinux.org/packages/scx-scheds & https://aur.archlinux.org/packages/scx-scheds-git. For -git scx schedulers the latest rc kernel is reccomended) thanks to @sirlucjan (for persistence, set scheduler in \"/etc/default/scx\" and enable the `scx` service).\n_eevdf_sched_ext_support=\"true\"\n\n# BORE only - The default lower bound limit of the base slice. Setting this value too high can cause the system to boot with an unnecessarily large base slice, resulting in high scheduling latency and poor system responsiveness.\n# Default is 2000000\n_bore_min_base_slice_ns=\"2000000\"\n\n# Trust the CPU manufacturer to initialize Linux's CRNG (RANDOM_TRUST_CPU) - Kernel default is \"false\"\n_random_trust_cpu=\"true\"\n\n# Timer frequency - \"100\" \"250\" \"300\" \"500\" \"750\" \"1000\" (\"2000\" is available for cacule cpusched only, \"625\" is available for echo cpusched only) - More options available in kernel config prompt when left empty depending on selected cpusched with the default option pointed with a \">\" (2000 for cacule, 100 for muqss, 625 for echo and 1000 for other cpu schedulers)\n_timer_freq=\"\"\n\n# Default CPU governor - \"performance\", \"ondemand\", \"schedutil\" or leave empty for default (schedutil)\n_default_cpu_gov=\"ondemand\"\n\n# Use an aggressive ondemand governor instead of default ondemand to improve performance on low loads/high core count CPUs while keeping some power efficiency from frequency scaling.\n# It still requires you to either set ondemand as default governor or to select it in some way at runtime.\n_aggressive_ondemand=\"true\"\n\n# [Advanced] Default TCP IPv4 algorithm to use. Options are: \"yeah\", \"bbr\", \"cubic\", \"reno\", \"vegas\" and \"westwood\". Leave empty if unsure.\n# This config option will not be prompted\n# Can be changed at runtime with the command line `# echo \"$name\" > /proc/sys/net/ipv4/tcp_congestion_control` where $name is one of the options above.\n# Default (empty) and fallback : cubic\n_tcp_cong_alg=\"\"\n\n# You can pass a default set of kernel command line options here - example: \"intel_pstate=passive nowatchdog amdgpu.ppfeaturemask=0xfffd7fff mitigations=off\"\n_custom_commandline=\"intel_pstate=passive kernel.split_lock_mitigate=0\"\n\n# Selection of Clearlinux patches\n_clear_patches=\"true\"\n\n# Add OpenRGB compatibility for certain i2c controllers - https://gitlab.com/CalcProgrammer1/OpenRGB/-/blob/master/OpenRGB.patch\n_openrgb=\"true\"\n\n\n#### SPESHUL OPTION ####\n\n# [Arch only] If you want to bypass the stock naming scheme and enforce something else (example : \"linux\") - Useful for some bootloaders requiring manual entry editing on each release.\n# !!! It will also change pkgname - If you don't explicitely need this, don't use it !!!\n# Use _kernel_localversion instead on non-Arch based distros\n_custom_pkgbase=\"\"\n\n# [non-Arch only] Kernel localversion. Putting it to \"Mario\" will make for example the kernel version be 5.7.0-tkg-Mario (given by uname -r)\n# If left empty, it will use \"-tkg-${_cpusched}${_compiler}\" where \"${_cpusched}\" will be replaced by the user chosen scheduler, ${_compiler} will be replaced by \"-llvm\" if clang is used (nothing for GCC).\n# Use _custom_pkgbase instead on Arch based distros\n_kernel_localversion=\"\"\n\n# Set to your maximum number of CPUs (physical + logical cores) - Lower means less overhead - You can set it to \"$(nproc)\" to use the current host's CPU(s) core count, or leave empty to use default\n# If you set this to a lower value than you have cores, some cores will be disabled\n# Default Arch kernel value is 320\n_NR_CPUS_value=\"\"\n\n# [non-Arch only] Install kernel after the building is done ?\n# Options are: \"yes\", \"no\", \"prompt\"\n_install_after_building=\"prompt\"\n\n# [non-Arch only] Use 'script' command for logging\n_logging_use_script=\"yes\"\n\n#### LEGACY OPTIONS ####\n\n# Upstreamed version of Fsync from Linux 5.16 for previous kernel versions - https://github.com/andrealmeid/futex_waitv_patches\n# ! Only affect 5.13, 5.14 and 5.15 kernel branches. Safely ignored for 5.16 or newer !\n_fsync_backport=\"true\"\n\n# Fsync legacy, known as FUTEX_WAIT_MULTIPLE (opcode 31) - previous version of fsync required for Valve Proton 4.11, 5.0 and 5.13 - https://steamcommunity.com/games/221410/announcements/detail/2957094910196249305\n_fsync_legacy=\"true\"\n\n# Set to \"true\" to enable support for futex2, a DEPRECATED interface that can be used by proton-tkg and proton 5.13 experimental through Fsync - Can be enabled alongside fsync legacy to use it as a fallback\n# https://gitlab.collabora.com/tonyk/linux/-/tree/futex2-dev\n# ! Only affect 5.10-5.14 kernel branches. Safely ignored for 5.15 or newer !\n# ! required _fsync_backport=\"false\" !\n_fsync_futex2=\"false\"\n\n# Set to \"true\" to add back missing symbol for AES-NI/AVX support on ZFS - This is a legacy option that can be ignored on 5.10+ kernels - https://github.com/NixOS/nixpkgs/blob/master/pkgs/os-specific/linux/kernel/export_kernel_fpu_functions.patch\n_zfsfix=\"true\"\n\n# MuQSS only - CPU scheduler runqueue sharing - No sharing (RQ_NONE), SMT (hyperthread) siblings (RQ_SMT), Multicore siblings (RQ_MC), Symmetric Multi-Processing (RQ_SMP), NUMA (RQ_ALL)\n# Valid values are \"none\", \"smt\", \"mc\", \"mc-llc\"(for zen), \"smp\", \"all\" - Kernel default is \"smt\"\n_runqueue_sharing=\"\"\n\n# MuQSS only - Make IRQ threading compulsory (FORCE_IRQ_THREADING) - Default is \"false\"\n_irq_threading=\"false\"\n\n# Set to \"true\" to add multi-generational LRU framework support for improved memory pressure handling\n# Note:\n# - For kernel >= 5.18, Upstream for kernel >= 6.1\n# - Conflicts with bcachefs for linux <= 6.0\n# - More information https://lore.kernel.org/lkml/20220706220022.968789-1-yuzhao@google.com/\n# - Older kernel versions might have a patch available in the community-patches repo\n_mglru=\"true\"\n\n#### USER PATCHES ####\n\n# community patches - add patches (separated by a space) of your choice by name from the community-patches dir\n# example: _community_patches=\"clear_nack_in_tend_isr.myrevert ffb_regression_fix.mypatch 0008-drm-amd-powerplay-force-the-trim-of-the-mclk-dpm-levels-if-OD-is-enabled.mypatch\"\n_community_patches=\"\"\n\n# You can use your own patches by putting them in a subfolder called linux<VERSION><PATCHLEVEL>-tkg-userpatches (see README.md for more info) next to the PKGBUILD and giving them the .mypatch extension.\n# You can also revert patches by putting them in that same folder and giving them the .myrevert extension.\n\n# Also, userpatches variable below must be set to true for the above to work.\n_user_patches=\"true\"\n\n# Apply all user patches without confirmation - !!! NOT RECOMMENDED !!!\n_user_patches_no_confirm=\"false\"\n\n\n#### CONFIG FRAGMENTS ####\n\n# You can use your own kernel config fragments by putting them in the same folder as the PKGBUILD and giving them the .myfrag extension.\n\n# Also, the config fragments variable below must be set to true for the above to work.\n_config_fragments=\"true\"\n\n# Apply all config fragments without confirmation - !!! NOT RECOMMENDED !!!\n_config_fragments_no_confirm=\"false\"\n"
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 17.8212890625,
          "content": "#!/bin/bash\n\n# Stop the script at any ecountered error\nset -e\n\n###################### Definition of helper variables and functions\n\n_where=`pwd`\nsrcdir=\"$_where\"\n\n# Command used for superuser privileges (`sudo`, `doas`, `su`)\nif [ ! -x \"$(command -v sudo)\" ]; then\n  if [ -x \"$(command -v doas)\" ]; then\n    sudo() { doas \"$@\"; }\n  elif [ -x \"$(command -v su)\" -a -x \"$(command -v xargs)\" ]; then\n    sudo() { echo \"$@\" | xargs -I {} su -c '{}'; }\n  fi\nfi\n\nmsg2() {\n echo -e \" \\033[1;34m->\\033[1;0m \\033[1;1m$1\\033[1;0m\" >&2\n}\n\nerror() {\n echo -e \" \\033[1;31m==> ERROR: $1\\033[1;0m\" >&2\n}\n\nwarning() {\n echo -e \" \\033[1;33m==> WARNING: $1\\033[1;0m\" >&2\n}\n\nplain() {\n echo -e \"$1\" >&2\n}\n\n####################################################################\n\n################### Config sourcing\n\n# We are either not using script or not within the script sub-command yet\n# we don't export the environment in the script sub-command so sourcing current_env will\n# get us the actual environment\nif [[ -z \"$SCRIPT\" ]]; then\n  declare -p -x > current_env\nfi\n\nsource customization.cfg\n\nif [ -e \"$_EXT_CONFIG_PATH\" ]; then\n  msg2 \"External configuration file $_EXT_CONFIG_PATH will be used and will override customization.cfg values.\"\n  source \"$_EXT_CONFIG_PATH\"\nfi\n\n. current_env\n\nif [[ \"$_logging_use_script\" =~ ^(Y|y|Yes|yes)$ && -z \"$SCRIPT\" ]]; then\n  # using script is enabled, but we are not within the script sub-command\n  export SCRIPT=1\n  msg2 \"Using script\"\n  /usr/bin/script -q -e -c \"$0 $@\" shell-output.log\n  exit\nfi\n\nsource linux-tkg-config/prepare\n\n####################################################################\n\n_distro_prompt() {\n  echo \"Which linux distribution are you running ?\"\n  echo \"if it's not on the list, chose the closest one to it: Fedora/Suse for RPM, Ubuntu/Debian for DEB\"\n  _prompt_from_array \"Debian\" \"Fedora\" \"Suse\" \"Ubuntu\" \"Gentoo\" \"Generic\"\n  _distro=\"${_selected_value}\"\n}\n\n_install_dependencies() {\n  if [ \"$_compiler_name\" = \"llvm\" ]; then\n    clang_deps=\"llvm clang lld\"\n  fi\n  if [ \"$_distro\" = \"Debian\" -o \"$_distro\" = \"Ubuntu\" ]; then\n    msg2 \"Installing dependencies\"\n    sudo apt install bc bison build-essential ccache cpio fakeroot flex git kmod libelf-dev libncurses5-dev libssl-dev lz4 qtbase5-dev rsync schedtool wget zstd debhelper ${clang_deps} -y\n  elif [ \"$_distro\" = \"Fedora\" ]; then\n    msg2 \"Installing dependencies\"\n    sudo dnf install openssl-devel-engine hostname perl bison ccache dwarves elfutils-devel elfutils-libelf-devel fedora-packager fedpkg flex gcc-c++ git libXi-devel lz4 make ncurses-devel openssl openssl-devel perl-devel perl-generators pesign python3-devel qt5-qtbase-devel rpm-build rpmdevtools schedtool zstd bc rsync -y ${clang_deps} -y\n  elif [ \"$_distro\" = \"Suse\" ]; then\n    msg2 \"Installing dependencies\"\n    sudo zypper install -y hostname bc bison ccache dwarves elfutils flex gcc-c++ git libXi-devel libelf-devel libqt5-qtbase-common-devel libqt5-qtbase-devel lz4 make ncurses-devel openssl-devel patch pesign rpm-build rpmdevtools schedtool python3 rsync zstd ${clang_deps}\n  fi\n}\n\nif [ \"$1\" != \"install\" ] && [ \"$1\" != \"config\" ] && [ \"$1\" != \"uninstall-help\" ]; then\n  msg2 \"Argument not recognised, options are:\n        - config : interactive script that shallow clones the linux kernel git tree into the folder \\$_kernel_work_folder, then applies extra patches and prepares the .config file\n                   by copying the one from the currently running linux system and updates it.\n        - install : does the config step, proceeds to compile, then prompts to install\n                    - 'DEB' distros: it creates .deb packages that will be installed then stored in the DEBS folder.\n                    - 'RPM' distros: it creates .rpm packages that will be installed then stored in the RPMS folder.\n                    - 'Generic' distro: it uses 'make modules_install' and 'make install', uses 'dracut' to create an initramfs, then updates grub's boot entry.\n        - uninstall-help : [RPM and DEB based distros only], lists the installed kernels in this system, then gives hints on how to uninstall them manually.\"\n  exit 0\nfi\n\nif [ \"$1\" = \"install\" ] || [ \"$1\" = \"config\" ]; then\n\n  if [[ -z \"$_distro\" || ! \"$_distro\" =~ ^(Ubuntu|Debian|Fedora|Suse|Gentoo|Generic)$ ]]; then\n    msg2 \"Variable \\\"_distro\\\" in \\\"customization.cfg\\\" has been set to an unkown value. Prompting...\"\n    _distro_prompt\n  fi\n\n  # Run init script that is also run in PKGBUILD, it will define some env vars that we will use\n  _tkg_initscript\n\n  if [[ \"${_compiler}\" = \"llvm\" && \"${_distro}\" =~ ^(Generic|Gentoo)$ && \"${_libunwind_replace}\" = \"true\" ]]; then\n      export LDFLAGS_MODULE=\"-unwindlib=libunwind\"\n      export HOSTLDFLAGS=\"-unwindlib=libunwind\"\n  fi\n\n  # Install the needed dependencies if the user wants to install the kernel\n  # Not needed if the user asks for install.sh config\n  if [ \"$1\" == \"install\" ]; then\n    _install_dependencies\n  fi\n\n  _tkg_srcprep\n\n  _build_dir=\"$_kernel_work_folder_abs/..\"\n\n  # Uppercase characters are not allowed in source package name for debian based distros\n  if [[ \"$_distro\" =~ ^(Debian|Ubuntu)$ && \"$_cpusched\" = \"MuQSS\" ]]; then\n    _cpusched=\"muqss\"\n  fi\n\n  msg2 \"Configuration done.\"\nfi\n\nif [ \"$1\" = \"install\" ]; then\n\n  if [ -e \"${_where}/winesync.rules\" ]; then\n    msg2 \"Installing udev rule for winesync\"\n    sudo cp \"${_where}\"/winesync.rules /etc/udev/rules.d/winesync.rules\n    sudo chmod 644 /etc/udev/rules.d/winesync.rules\n\n    msg2 \"Adding winesync to '/etc/modules-load.d' for auto-loading by systemd - Password prompt incoming!\"\n    sudo sh -c 'echo \"winesync\" >/etc/modules-load.d/winesync.conf'\n  fi\n\n  # Use custom compiler paths if defined\n  if [ \"$_compiler_name\" = \"-llvm\" ] && [ -n \"${CUSTOM_LLVM_PATH}\" ]; then\n    PATH=\"${CUSTOM_LLVM_PATH}/bin:${CUSTOM_LLVM_PATH}/lib:${CUSTOM_LLVM_PATH}/include:${PATH}\"\n  elif [ -n \"${CUSTOM_GCC_PATH}\" ]; then\n    PATH=\"${CUSTOM_GCC_PATH}/bin:${CUSTOM_GCC_PATH}/lib:${CUSTOM_GCC_PATH}/include:${PATH}\"\n  fi\n\n  if [ \"$_force_all_threads\" = \"true\" ]; then\n    _thread_num=`nproc`\n  else\n    _thread_num=`expr \\`nproc\\` / 4`\n    if [ \"$_thread_num\" = \"0\" ]; then\n      _thread_num=1\n    fi\n  fi\n\n  # ccache\n  if [ \"$_noccache\" != \"true\" ]; then\n    export PATH=\"/usr/lib64/ccache/:/usr/lib/ccache/bin/:$PATH\"\n\n    export CCACHE_SLOPPINESS=\"file_macro,locale,time_macros\"\n    export CCACHE_NOHASHDIR=\"true\"\n    msg2 'Enabled ccache'\n  fi\n\n  if [ -z \"$_kernel_localversion\" ]; then\n    if [ \"$_preempt_rt\" = \"1\" ]; then\n      _kernel_flavor=\"tkg-${_cpusched}-rt${_compiler_name}\"\n    else\n      _kernel_flavor=\"tkg-${_cpusched}${_compiler_name}\"\n    fi\n  else\n    _kernel_flavor=\"tkg-${_kernel_localversion}\"\n  fi\n\n  # Setup kernel_subver variable\n  if [[ \"$_sub\" = rc* ]]; then\n    # if an RC version, subver will always be 0\n    _kernel_subver=0\n  else\n    _kernel_subver=\"${_sub}\"\n  fi\n\n  #_timed_build() {\n    #_runtime=$( time ( schedtool -B -n 1 -e ionice -n 1 \"$@\" 2>&1 ) 3>&1 1>&2 2>&3 ) || _runtime=$( time ( \"$@\" 2>&1 ) 3>&1 1>&2 2>&3 ) - Bash 5.2 is broken https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=1018727\n  #}\n\n  cd \"$_kernel_work_folder_abs\"\n\n  msg2 \"Add patched files to the diff.patch\"\n  git add .\n\n  if [[ \"$_distro\" =~ ^(Ubuntu|Debian)$ ]]; then\n\n    msg2 \"Building kernel DEB packages\"\n    make ${llvm_opt} -j ${_thread_num} bindeb-pkg LOCALVERSION=-${_kernel_flavor}\n    msg2 \"Building successfully finished!\"\n\n    # Create DEBS folder if it doesn't exist\n    cd \"$_where\"\n    mkdir -p DEBS\n\n    # Move deb files to DEBS folder inside the linux-tkg folder\n    mv \"$_build_dir\"/*.deb \"$_where\"/DEBS/\n\n    # Install only the winesync header in whatever kernel src there is, if there is\n    if [ -e \"${_where}/winesync.rules\" ]; then\n      sudo mkdir -p /usr/include/linux/\n      # install winesync header\n      sudo cp \"$_kernel_work_folder_abs\"/include/uapi/linux/winesync.h /usr/include/linux/winesync.h\n    fi\n\n    if [[ \"$_install_after_building\" = \"prompt\" ]]; then\n      read -p \"Do you want to install the new Kernel ? Y/[n]: \" _install\n    fi\n\n    if [[ \"$_install_after_building\" =~ ^(Y|y|Yes|yes)$ || \"$_install\" =~ ^(Y|y|Yes|yes)$ ]]; then\n      cd \"$_where\"\n      if [[ \"$_sub\" = rc* ]]; then\n        _kernelname=$_basekernel.$_kernel_subver-$_sub-$_kernel_flavor\n      else\n        _kernelname=$_basekernel.$_kernel_subver-$_kernel_flavor\n      fi\n      _headers_deb=\"linux-headers-${_kernelname}*.deb\"\n      _image_deb=\"linux-image-${_kernelname}_*.deb\"\n\n      cd DEBS\n      sudo dpkg -i $_headers_deb $_image_deb\n    fi\n\n  elif [[ \"$_distro\" =~ ^(Fedora|Suse)$ ]]; then\n\n    # Replace dashes with underscores, it seems that it's being done by binrpm-pkg\n    # Se we can actually refer properly to the rpm files.\n    _kernel_flavor=${_kernel_flavor//-/_}\n\n    if [[ \"$_sub\" == rc* ]]; then\n      _extra_ver_str=\"_${_sub}_${_kernel_flavor}\"\n    else\n      _extra_ver_str=\"_${_kernel_flavor}\"\n    fi\n\n    _fedora_work_dir=\"$_kernel_work_folder_abs/rpmbuild\"\n\n    msg2 \"Building kernel RPM packages\"\n    RPMOPTS=\"--define '_topdir ${_fedora_work_dir}'\" make ${llvm_opt} -j ${_thread_num} binrpm-pkg EXTRAVERSION=\"${_extra_ver_str}\"\n    msg2 \"Building successfully finished!\"\n\n    # Create RPMS folder if it doesn't exist\n    cd \"$_where\"\n    mkdir -p RPMS\n\n    # Move rpm files to RPMS folder inside the linux-tkg folder\n    mv ${_fedora_work_dir}/RPMS/x86_64/*tkg* \"$_where\"/RPMS/\n\n    # Install only the winesync header in whatever kernel src there is, if there is\n    if [ -e \"${_where}/winesync.rules\" ]; then\n      sudo mkdir -p /usr/include/linux/\n      # install winesync header\n      sudo cp \"$_kernel_work_folder_abs\"/include/uapi/linux/winesync.h /usr/include/linux/winesync.h\n    fi\n\n    if [[ \"$_install_after_building\" = \"prompt\" ]]; then\n      read -p \"Do you want to install the new Kernel ? Y/[n]: \" _install\n    fi\n\n    if [[ \"$_install_after_building\" =~ ^(Y|y|Yes|yes)$ || \"$_install\" =~ ^(Y|y|Yes|yes)$ ]]; then\n\n      if [[ \"$_sub\" = rc* ]]; then\n        _kernelname=$_basekernel.${_kernel_subver}_${_sub}_$_kernel_flavor\n      else\n        _kernelname=$_basekernel.${_kernel_subver}_$_kernel_flavor\n      fi\n\n      _kernel_rpm=\"kernel-${_kernelname}*.rpm\"\n      # The headers are actually contained in the kernel-devel RPM and not the headers one...\n      _kernel_devel_rpm=\"kernel-devel-${_kernelname}*.rpm\"\n      _kernel_syms_rpm=\"kernel-syms-${_kernelname}*.rpm\"\n\n      cd RPMS\n      if [ \"$_distro\" = \"Fedora\" ]; then\n        sudo dnf install $_kernel_rpm $_kernel_devel_rpm\n      elif [ \"$_distro\" = \"Suse\" ]; then\n        # It seems there is some weird behavior with relocking existing locks, so let's unlock first\n        sudo zypper removelock kernel-default-devel kernel-default kernel-devel kernel-syms\n\n        msg2 \"Some files from 'linux-glibc-devel' will be replaced by files from the custom kernel-hearders package\"\n        msg2 \"To revert back to the original kernel headers do 'sudo zypper install -f linux-glibc-devel'\"\n        sudo zypper install --oldpackage --allow-unsigned-rpm $_kernel_rpm $_kernel_devel_rpm $_kernel_syms_rpm\n\n        # Let's lock post install\n        warning \"By default, system kernel updates will overwrite your custom kernel.\"\n        warning \"Adding a lock will prevent this but skip system kernel updates.\"\n        msg2 \"You can remove the lock if needed with 'sudo zypper removelock kernel-default-devel kernel-default kernel-devel kernel-syms'\"\n        read -p \"Would you like to lock system kernel packages ? Y/[n]: \" _lock\n        if [[ \"$_lock\" =~ ^(Y|y|Yes|yes)$ ]]; then\n          sudo zypper addlock kernel-default-devel kernel-default kernel-devel kernel-syms\n        fi\n      fi\n\n      if [ \"$_distro\" = \"Suse\" ]; then\n        msg2 \"Creating initramfs\"\n        sudo dracut --force --hostonly ${_dracut_options} --kver $_kernelname\n        msg2 \"Updating GRUB\"\n        sudo grub2-mkconfig -o /boot/grub2/grub.cfg\n      fi\n\n      msg2 \"Install successful\"\n    fi\n\n  elif [[ \"$_distro\" =~ ^(Gentoo|Generic)$ ]]; then\n\n    ./scripts/config --set-str LOCALVERSION \"-${_kernel_flavor}\"\n\n    if [[ \"$_sub\" = rc* ]]; then\n      _kernelname=$_basekernel.${_kernel_subver}-${_sub}-$_kernel_flavor\n    else\n      _kernelname=$_basekernel.${_kernel_subver}-$_kernel_flavor\n    fi\n\n    msg2 \"Building kernel\"\n    make ${llvm_opt} -j ${_thread_num}\n    msg2 \"Build successful\"\n\n    if [ \"$_STRIP\" = \"true\" ]; then\n      echo \"Stripping vmlinux...\"\n      strip -v $STRIP_STATIC \"vmlinux\"\n    fi\n\n    _headers_folder_name=\"linux-$_kernelname\"\n\n    msg2 \"Removing unneeded architectures...\"\n    for arch in arch/*/; do\n      [[ $arch = */x86/ ]] && continue\n      echo \"Removing $(basename \"$arch\")\"\n      rm -r \"$arch\"\n    done\n\n    msg2 \"Removing broken symlinks...\"\n    find -L . -type l -printf 'Removing %P\\n' -delete\n\n    msg2 \"Removing loose objects...\"\n    find . -type f -name '*.o' -printf 'Removing %P\\n' -delete\n\n    msg2 \"Stripping build tools...\"\n    while read -rd '' file; do\n      case \"$(file -bi \"$file\")\" in\n        application/x-sharedlib\\;*)      # Libraries (.so)\n          strip -v $STRIP_SHARED \"$file\" ;;\n        application/x-archive\\;*)        # Libraries (.a)\n          strip -v $STRIP_STATIC \"$file\" ;;\n        application/x-executable\\;*)     # Binaries\n          strip -v $STRIP_BINARIES \"$file\" ;;\n        application/x-pie-executable\\;*) # Relocatable binaries\n          strip -v $STRIP_SHARED \"$file\" ;;\n      esac\n    done < <(find . -type f -perm -u+x ! -name vmlinux -print0)\n\n    echo -e \"\\n\\n\"\n\n    msg2 \"The installation process will run the following commands:\"\n    echo \"    # copy the patched and compiled sources to /usr/src/$_headers_folder_name\"\n    echo \"    sudo make modules_install\"\n    echo \"    sudo make install\"\n    echo \"    sudo dracut --force --hostonly ${_dracut_options} --kver $_kernelname\"\n    echo \"    sudo grub-mkconfig -o /boot/grub/grub.cfg\"\n\n    msg2 \"Note: Uninstalling requires manual intervention, use './install.sh uninstall-help' for more information.\"\n    read -p \"Continue ? Y/[n]: \" _continue\n\n    if ! [[ \"$_continue\" =~ ^(Y|y|Yes|yes)$ ]];then\n      exit 0\n    fi\n\n    msg2 \"Copying files over to /usr/src/$_headers_folder_name\"\n    if [ -d \"/usr/src/$_headers_folder_name\" ]; then\n      msg2 \"Removing old folder in /usr/src/$_headers_folder_name\"\n      sudo rm -rf \"/usr/src/$_headers_folder_name\"\n    fi\n    sudo cp -R . \"/usr/src/$_headers_folder_name\"\n    sudo rm -rf \"/usr/src/$_headers_folder_name\"/.git*\n    cd \"/usr/src/$_headers_folder_name\"\n\n    msg2 \"Installing modules\"\n    if [ \"$_STRIP\" = \"true\" ]; then\n      sudo make modules_install INSTALL_MOD_STRIP=\"1\"\n    else\n      sudo make modules_install\n    fi\n    msg2 \"Removing modules from source folder in /usr/src/${_kernel_src_gentoo}\"\n    sudo find . -type f -name '*.ko' -delete\n    sudo find . -type f -name '*.ko.cmd' -delete\n\n    msg2 \"Installing kernel\"\n    sudo make install\n\n    if [ \"$_distro\" = \"Gentoo\" ]; then\n\n      msg2 \"Selecting the kernel source code as default source folder\"\n      sudo ln -sfn \"/usr/src/$_headers_folder_name\" \"/usr/src/linux\"\n\n      msg2 \"Rebuild kernel modules with \\\"emerge @module-rebuild\\\" ?\"\n      if [ \"$_compiler\" = \"llvm\" ];then\n        warning \"Building modules with LLVM/Clang is mostly unsupported OOTB by \\\"emerge @module-rebuild\\\" except for Nvidia 465.31+\"\n        warning \"     Manually setting \\\"CC=clang\\\" for some modules may work if you haven't used LTO\"\n      fi\n\n      read -p \"Y/[n]: \" _continue\n      if [[ \"$_continue\" =~ ^(Y|y|Yes|yes)$ ]];then\n        sudo emerge @module-rebuild --keep-going\n      fi\n\n    else\n\n      msg2 \"Creating initramfs\"\n      sudo dracut --force --hostonly ${_dracut_options} --kver $_kernelname\n      msg2 \"Updating GRUB\"\n      sudo grub-mkconfig -o /boot/grub/grub.cfg\n\n    fi\n\n  fi\nfi\n\nif [ \"$1\" = \"uninstall-help\" ]; then\n\n  if [ -z $_distro ]; then\n    _distro_prompt\n  fi\n\n  cd \"$_where\"\n\n  if [[ \"$_distro\" =~ ^(Ubuntu|Debian)$ ]]; then\n    msg2 \"List of installed custom tkg kernels: \"\n    dpkg -l \"*tkg*\" | grep \"linux.*tkg\"\n    dpkg -l \"*linux-libc-dev*\" | grep \"linux.*tkg\"\n    msg2 \"To uninstall a version, you should remove the linux-image, linux-headers and linux-libc-dev associated to it (if installed), with: \"\n    msg2 \"      sudo apt remove linux-image-VERSION linux-headers-VERSION linux-libc-dev-VERSION\"\n    msg2 \"       where VERSION is displayed in the lists above, uninstall only versions that have \\\"tkg\\\" in its name\"\n    msg2 \"Note: linux-libc-dev packages are no longer created and installed, you can safely remove any remnants.\"\n  elif [ \"$_distro\" = \"Fedora\" ]; then\n    msg2 \"List of installed custom tkg kernels: \"\n    dnf list --installed | grep -i \"tkg\"\n    msg2 \"To uninstall a version, you should remove the kernel, kernel-headers and kernel-devel associated to it (if installed), with: \"\n    msg2 \"      sudo dnf remove --noautoremove kernel-VERSION kernel-devel-VERSION kernel-headers-VERSION\"\n    msg2 \"       where VERSION is displayed in the second column\"\n    msg2 \"Note: kernel-headers packages are no longer created and installed, you can safely remove any remnants.\"\n  elif [ \"$_distro\" = \"Suse\" ]; then\n    msg2 \"List of installed custom tkg kernels: \"\n    zypper packages --installed-only | grep \"kernel.*tkg\"\n    msg2 \"To uninstall a version, you should remove the kernel, kernel-headers and kernel-devel associated to it (if installed), with: \"\n    msg2 \"      sudo zypper remove --no-clean-deps kernel-VERSION kernel-devel-VERSION kernel-headers-VERSION\"\n    msg2 \"       where VERSION is displayed in the second to last column\"\n    msg2 \"Note: kernel-headers packages are no longer created and installed, you can safely remove any remnants.\"\n  elif [[ \"$_distro\" =~ ^(Generic|Gentoo)$ ]]; then\n    msg2 \"Folders in /lib/modules :\"\n    ls /lib/modules\n    msg2 \"Files in /boot :\"\n    ls /boot\n    msg2 \"To uninstall a kernel version installed through install.sh with 'Generic' as a distro:\"\n    msg2 \"  - Remove manually the corresponding folder in '/lib/modules'\"\n    msg2 \"  - Remove manually the corresponding 'System.map', 'vmlinuz', 'config' and 'initramfs' in the folder :/boot\"\n    msg2 \"  - Update the boot menu. e.g. 'sudo grub-mkconfig -o /boot/grub/grub.cfg'\"\n  fi\n\nfi\n"
        },
        {
          "name": "linux-tkg-config",
          "type": "tree",
          "content": null
        },
        {
          "name": "linux-tkg-patches",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}