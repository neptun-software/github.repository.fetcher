{
  "metadata": {
    "timestamp": 1736568351817,
    "page": 275,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "yonggekkk/x-ui-yg",
      "stars": 2330,
      "defaultBranch": "main",
      "files": [
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.0517578125,
          "content": "\n### x-ui精简修改版一键脚本，面板中的相关设置尽可能与原作者[vaxilu](https://github.com/vaxilu/x-ui)保持一致\n\n### 支持纯IPV4、纯IPV6、AMD64、ARM64的VPS直接安装\n\n### 支持alpine系统，推荐使用最新的Ubuntu系统\n\n### 本项目订阅节点为本地化生成，不使用节点转换等第三方外链引用，无需担心节点订阅被外链作者查看\n\n-----------------------------------------------\n### 关于XUI安全性说明：\n\n默认使用IP(http)登录方式（非安全），强烈推荐申请域名证书并开启域名(https)登录方式，以确保面版数据的安全\n\n关于安全问题的视频解读：[《侃侃墙》直播回顾：Xray作者炮轰XUI面版http明文安全性！GFW目前就那三板斧而已](https://youtu.be/eukGGt-MsS8)\n\n-----------------------------------------------\n\n### 相关说明及注意点请查看[博客说明](https://ygkkk.blogspot.com/2023/05/reality-xui-chatgpt.html)\n\n### 视频教程：\n\n[x-ui搭建xray协议大更新（一）：reality协议三模式，数据重置、备份、恢复详细操作](https://youtu.be/xlvKnjQoF7c)\n\n[x-ui搭建xray协议大更新（二）：集成Argo固定隧道、临时隧道](https://youtu.be/NCPCHAi8pzs)\n\n[x-ui搭建xray协议大更新（三）：支持多协议聚合订阅，自动生成Clash-meta、Sing-box配置文件](https://youtu.be/UlQm6c0UQ4U)\n\n[x-ui搭建xray协议大更新（四）：支持Alpine系统；ChatGPT客户端可以随便登录了，多IP分流设置详细说明](https://youtu.be/2G2f64Mm1UU)\n\n[x-ui搭建xray协议大更新（五）：集成oblivion warp免费vpn功能，支持本地WARP+赛风VPN切换分流(30个国家IP)](https://youtu.be/Zo65206HBRM)\n\n-----------------------------------------------------\n### 交流平台：[甬哥博客地址](https://ygkkk.blogspot.com)、[甬哥YouTube频道](https://www.youtube.com/@ygkkk)、[甬哥TG电报群组](https://t.me/+jZHc6-A-1QQ5ZGVl)、[甬哥TG电报频道](https://t.me/+DkC9ZZUgEFQzMTZl)\n\n-------------------------------\n\n### 一键脚本：\n```\nbash <(curl -Ls https://raw.githubusercontent.com/yonggekkk/x-ui-yg/main/install.sh)\n```\n或\n```\nbash <(wget -qO- https://raw.githubusercontent.com/yonggekkk/x-ui-yg/main/install.sh)\n```\n-----------------------------------------------------\n### x-ui-yg脚本菜单界面附加功能全开预览图（注：相关参数随意填写，仅供围观）\n\n![3b01adef46255df98053a3e49372373](https://github.com/user-attachments/assets/cea4568f-bb19-46b9-a35b-bacc67ac573a)\n\n-----------------------------------------------------\n### 感谢你右上角的star🌟\n[![Stargazers over time](https://starchart.cc/yonggekkk/x-ui-yg.svg)](https://starchart.cc/yonggekkk/x-ui-yg)\n\n### 参考项目[vaxilu](https://github.com/vaxilu/x-ui)，[MHSanaei](https://github.com/MHSanaei/3x-ui)，[qist](https://github.com/qist/xray-ui)，[warpplus](https://github.com/bepass-org/warp-plus)\n\n---------------------------------------\n#### 声明：\n\n#### 所有代码来源于Github参考项目与ChatGPT的整合，二进制文件未开源，介意者请勿安装使用。\n"
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 92.373046875,
          "content": "#!/bin/bash\nexport LANG=en_US.UTF-8\nsred='\\033[5;31m'\nred='\\033[0;31m'\ngreen='\\033[0;32m'\nyellow='\\033[0;33m'\nblue='\\033[0;36m'\nbblue='\\033[0;34m'\nplain='\\033[0m'\nred(){ echo -e \"\\033[31m\\033[01m$1\\033[0m\";}\ngreen(){ echo -e \"\\033[32m\\033[01m$1\\033[0m\";}\nyellow(){ echo -e \"\\033[33m\\033[01m$1\\033[0m\";}\nblue(){ echo -e \"\\033[36m\\033[01m$1\\033[0m\";}\nwhite(){ echo -e \"\\033[37m\\033[01m$1\\033[0m\";}\nreadp(){ read -p \"$(yellow \"$1\")\" $2;}\n[[ $EUID -ne 0 ]] && yellow \"请以root模式运行脚本\" && exit\n#[[ -e /etc/hosts ]] && grep -qE '^ *172.65.251.78 gitlab.com' /etc/hosts || echo -e '\\n172.65.251.78 gitlab.com' >> /etc/hosts\nif [[ -f /etc/redhat-release ]]; then\nrelease=\"Centos\"\nelif cat /etc/issue | grep -q -E -i \"alpine\"; then\nrelease=\"alpine\"\nelif cat /etc/issue | grep -q -E -i \"debian\"; then\nrelease=\"Debian\"\nelif cat /etc/issue | grep -q -E -i \"ubuntu\"; then\nrelease=\"Ubuntu\"\nelif cat /etc/issue | grep -q -E -i \"centos|red hat|redhat\"; then\nrelease=\"Centos\"\nelif cat /proc/version | grep -q -E -i \"debian\"; then\nrelease=\"Debian\"\nelif cat /proc/version | grep -q -E -i \"ubuntu\"; then\nrelease=\"Ubuntu\"\nelif cat /proc/version | grep -q -E -i \"centos|red hat|redhat\"; then\nrelease=\"Centos\"\nelse \nred \"不支持当前的系统，请选择使用Ubuntu,Debian,Centos系统。\" && exit\nfi\nvsid=$(grep -i version_id /etc/os-release | cut -d \\\" -f2 | cut -d . -f1)\nop=$(cat /etc/redhat-release 2>/dev/null || cat /etc/os-release 2>/dev/null | grep -i pretty_name | cut -d \\\" -f2)\n#if [[ $(echo \"$op\" | grep -i -E \"arch|alpine\") ]]; then\nif [[ $(echo \"$op\" | grep -i -E \"arch\") ]]; then\nred \"脚本不支持当前的 $op 系统，请选择使用Ubuntu,Debian,Centos系统。\" && exit\nfi\nversion=$(uname -r | cut -d \"-\" -f1)\n[[ -z $(systemd-detect-virt 2>/dev/null) ]] && vi=$(virt-what 2>/dev/null) || vi=$(systemd-detect-virt 2>/dev/null)\ncase $(uname -m) in\naarch64) cpu=arm64;;\nx86_64) cpu=amd64;;\n*) red \"目前脚本不支持$(uname -m)架构\" && exit;;\nesac\n\nif [[ -n $(sysctl net.ipv4.tcp_congestion_control 2>/dev/null | awk -F ' ' '{print $3}') ]]; then\nbbr=`sysctl net.ipv4.tcp_congestion_control | awk -F ' ' '{print $3}'`\nelif [[ -n $(ping 10.0.0.2 -c 2 | grep ttl) ]]; then\nbbr=\"Openvz版bbr-plus\"\nelse\nbbr=\"Openvz/Lxc\"\nfi\n\nif [ ! -f xuiyg_update ]; then\ngreen \"首次安装x-ui-yg脚本必要的依赖……\"\nif [[ x\"${release}\" == x\"alpine\" ]]; then\napk update\napk add wget curl tar jq tzdata openssl expect git socat iproute2\napk add virt-what\nelse\nif [[ $release = Centos && ${vsid} =~ 8 ]]; then\ncd /etc/yum.repos.d/ && mkdir backup && mv *repo backup/ \ncurl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-8.repo\nsed -i -e \"s|mirrors.cloud.aliyuncs.com|mirrors.aliyun.com|g \" /etc/yum.repos.d/CentOS-*\nsed -i -e \"s|releasever|releasever-stream|g\" /etc/yum.repos.d/CentOS-*\nyum clean all && yum makecache\ncd\nfi\n\nif [ -x \"$(command -v apt-get)\" ]; then\napt update -y\napt install jq tzdata -y\nelif [ -x \"$(command -v yum)\" ]; then\nyum update -y && yum install epel-release -y\nyum install jq tzdata -y\nelif [ -x \"$(command -v dnf)\" ]; then\ndnf update -y\ndnf install jq tzdata -y\nfi\nif [ -x \"$(command -v yum)\" ] || [ -x \"$(command -v dnf)\" ]; then\nif ! command -v \"cronie\" &> /dev/null; then\nif [ -x \"$(command -v yum)\" ]; then\nyum install -y cronie\nelif [ -x \"$(command -v dnf)\" ]; then\ndnf install -y cronie\nfi\nfi\nfi\n\npackages=(\"curl\" \"openssl\" \"tar\" \"expect\" \"xxd\" \"python3\" \"wget\" \"git\")\ninspackages=(\"curl\" \"openssl\" \"tar\" \"expect\" \"xxd\" \"python3\" \"wget\" \"git\")\nfor i in \"${!packages[@]}\"; do\npackage=\"${packages[$i]}\"\ninspackage=\"${inspackages[$i]}\"\nif ! command -v \"$package\" &> /dev/null; then\nif [ -x \"$(command -v apt-get)\" ]; then\napt-get install -y \"$inspackage\"\nelif [ -x \"$(command -v yum)\" ]; then\nyum install -y \"$inspackage\"\nelif [ -x \"$(command -v dnf)\" ]; then\ndnf install -y \"$inspackage\"\nfi\nfi\ndone\nfi\ntouch xuiyg_update\nfi\n\nif [[ $vi = openvz ]]; then\nTUN=$(cat /dev/net/tun 2>&1)\nif [[ ! $TUN =~ 'in bad state' ]] && [[ ! $TUN =~ '处于错误状态' ]] && [[ ! $TUN =~ 'Die Dateizugriffsnummer ist in schlechter Verfassung' ]]; then \nred \"检测到未开启TUN，现尝试添加TUN支持\" && sleep 4\ncd /dev && mkdir net && mknod net/tun c 10 200 && chmod 0666 net/tun\nTUN=$(cat /dev/net/tun 2>&1)\nif [[ ! $TUN =~ 'in bad state' ]] && [[ ! $TUN =~ '处于错误状态' ]] && [[ ! $TUN =~ 'Die Dateizugriffsnummer ist in schlechter Verfassung' ]]; then \ngreen \"添加TUN支持失败，建议与VPS厂商沟通或后台设置开启\" && exit\nelse\necho '#!/bin/bash' > /root/tun.sh && echo 'cd /dev && mkdir net && mknod net/tun c 10 200 && chmod 0666 net/tun' >> /root/tun.sh && chmod +x /root/tun.sh\ngrep -qE \"^ *@reboot root bash /root/tun.sh >/dev/null 2>&1\" /etc/crontab || echo \"@reboot root bash /root/tun.sh >/dev/null 2>&1\" >> /etc/crontab\ngreen \"TUN守护功能已启动\"\nfi\nfi\nfi\n\nargopid(){\nym=$(cat /usr/local/x-ui/xuiargoympid.log 2>/dev/null)\nls=$(cat /usr/local/x-ui/xuiargopid.log 2>/dev/null)\n}\n\nv4v6(){\nv4=$(curl -s4m5 icanhazip.com -k)\nv6=$(curl -s6m5 icanhazip.com -k)\n}\n\nwarpcheck(){\nwgcfv6=$(curl -s6m5 https://www.cloudflare.com/cdn-cgi/trace -k | grep warp | cut -d= -f2)\nwgcfv4=$(curl -s4m5 https://www.cloudflare.com/cdn-cgi/trace -k | grep warp | cut -d= -f2)\n}\n\nv6(){\nwarpcheck\nif [[ ! $wgcfv4 =~ on|plus && ! $wgcfv6 =~ on|plus ]]; then\nv4=$(curl -s4m5 icanhazip.com -k)\nif [ -z $v4 ]; then\nyellow \"检测到 纯IPV6 VPS，添加DNS64\"\necho -e \"nameserver 2a00:1098:2b::1\\nnameserver 2a00:1098:2c::1\\nnameserver 2a01:4f8:c2c:123f::1\" > /etc/resolv.conf\nfi\nfi\n}\n\nserinstall(){\ngreen \"下载并安装x-ui相关组件……\"\ncd /usr/local/\n#curl -L -o /usr/local/x-ui-linux-${cpu}.tar.gz --insecure https://gitlab.com/rwkgyg/x-ui-yg/raw/main/x-ui-linux-${cpu}.tar.gz\ncurl -L -o /usr/local/x-ui-linux-${cpu}.tar.gz -# --retry 2 --insecure https://raw.githubusercontent.com/yonggekkk/x-ui-yg/main/x-ui-linux-${cpu}.tar.gz\ntar zxvf x-ui-linux-${cpu}.tar.gz > /dev/null 2>&1\nrm x-ui-linux-${cpu}.tar.gz -f\ncd x-ui\nchmod +x x-ui bin/xray-linux-${cpu}\ncp -f x-ui.service /etc/systemd/system/ >/dev/null 2>&1\nsystemctl daemon-reload >/dev/null 2>&1\nsystemctl enable x-ui >/dev/null 2>&1\nsystemctl start x-ui >/dev/null 2>&1\ncd\nrm /usr/bin/x-ui -f\n#curl -L -o /usr/bin/x-ui --insecure https://gitlab.com/rwkgyg/x-ui-yg/raw/main/1install.sh >/dev/null 2>&1\ncurl -L -o /usr/bin/x-ui -# --retry 2 --insecure https://raw.githubusercontent.com/yonggekkk/x-ui-yg/main/install.sh\nchmod +x /usr/bin/x-ui\nif [[ x\"${release}\" == x\"alpine\" ]]; then\necho '#!/sbin/openrc-run\nname=\"x-ui\"\ncommand=\"/usr/local/x-ui/x-ui\"\ndirectory=\"/usr/local/${name}\"\npidfile=\"/var/run/${name}.pid\"\ncommand_background=\"yes\"\ndepend() {\nneed networking \n}' > /etc/init.d/x-ui\nchmod +x /etc/init.d/x-ui\nrc-update add x-ui default\nrc-service x-ui start\nfi\nif [[ -f /usr/bin/x-ui && -f /usr/local/x-ui/bin/xray-linux-${cpu} ]]; then\ngreen \"下载成功\"\nelse\nred \"下载失败，请检测VPS网络是否正常，脚本退出\"\nif [[ x\"${release}\" == x\"alpine\" ]]; then\nrc-service x-ui stop\nrc-update del x-ui default\nrm /etc/init.d/x-ui -f\nelse\nsystemctl stop x-ui\nsystemctl disable x-ui\nrm /etc/systemd/system/x-ui.service -f\nsystemctl daemon-reload\nsystemctl reset-failed\nfi\nrm /usr/bin/x-ui -f\nrm /etc/x-ui-yg/ -rf\nrm /usr/local/x-ui/ -rf\nrm -rf xuiyg_update\nexit\nfi\n}\n\nuserinstall(){\nreadp \"设置 x-ui 登录用户名（回车跳过为随机6位字符）：\" username\nsleep 1\nif [[ -z ${username} ]]; then\nusername=`date +%s%N |md5sum | cut -c 1-6`\nfi\nwhile true; do\nif [[ ${username} == *admin* ]]; then\nred \"不支持包含有 admin 字样的用户名，请重新设置\" && readp \"设置 x-ui 登录用户名（回车跳过为随机6位字符）：\" username\nelse\nbreak\nfi\ndone\nsleep 1\ngreen \"x-ui登录用户名：${username}\"\necho\nreadp \"设置 x-ui 登录密码（回车跳过为随机6位字符）：\" password\nsleep 1\nif [[ -z ${password} ]]; then\npassword=`date +%s%N |md5sum | cut -c 1-6`\nfi\nwhile true; do\nif [[ ${password} == *admin* ]]; then\nred \"不支持包含有 admin 字样的密码，请重新设置\" && readp \"设置 x-ui 登录密码（回车跳过为随机6位字符）：\" password\nelse\nbreak\nfi\ndone\nsleep 1\ngreen \"x-ui登录密码：${password}\"\n/usr/local/x-ui/x-ui setting -username ${username} -password ${password} >/dev/null 2>&1\n}\n\nportinstall(){\necho\nreadp \"设置 x-ui 登录端口[1-65535]（回车跳过为10000-65535之间的随机端口）：\" port\nsleep 1\nif [[ -z $port ]]; then\nport=$(shuf -i 10000-65535 -n 1)\nuntil [[ -z $(ss -tunlp | grep -w udp | awk '{print $5}' | sed 's/.*://g' | grep -w \"$port\") && -z $(ss -tunlp | grep -w tcp | awk '{print $5}' | sed 's/.*://g' | grep -w \"$port\") ]] \ndo\n[[ -n $(ss -tunlp | grep -w udp | awk '{print $5}' | sed 's/.*://g' | grep -w \"$port\") || -n $(ss -tunlp | grep -w tcp | awk '{print $5}' | sed 's/.*://g' | grep -w \"$port\") ]] && yellow \"\\n端口被占用，请重新输入端口\" && readp \"自定义端口:\" port\ndone\nelse\nuntil [[ -z $(ss -tunlp | grep -w udp | awk '{print $5}' | sed 's/.*://g' | grep -w \"$port\") && -z $(ss -tunlp | grep -w tcp | awk '{print $5}' | sed 's/.*://g' | grep -w \"$port\") ]]\ndo\n[[ -n $(ss -tunlp | grep -w udp | awk '{print $5}' | sed 's/.*://g' | grep -w \"$port\") || -n $(ss -tunlp | grep -w tcp | awk '{print $5}' | sed 's/.*://g' | grep -w \"$port\") ]] && yellow \"\\n端口被占用，请重新输入端口\" && readp \"自定义端口:\" port\ndone\nfi\nsleep 1\n/usr/local/x-ui/x-ui setting -port $port >/dev/null 2>&1\ngreen \"x-ui登录端口：${port}\"\n}\n\npathinstall(){\necho\nreadp \"设置 x-ui 登录根路径（回车跳过为随机3位字符）：\" path\nsleep 1\nif [[ -z $path ]]; then\npath=`date +%s%N |md5sum | cut -c 1-3`\nfi\n/usr/local/x-ui/x-ui setting -webBasePath ${path} >/dev/null 2>&1\ngreen \"x-ui登录根路径：${path}\"\n}\n\nshowxuiip(){\nxuilogin(){\nv4v6\nif [[ -z $v4 ]]; then\necho \"[$v6]\" > /usr/local/x-ui/xip\nelif [[ -n $v4 && -n $v6 ]]; then\necho \"$v4\" > /usr/local/x-ui/xip\necho \"[$v6]\" >> /usr/local/x-ui/xip\nelse\necho \"$v4\" > /usr/local/x-ui/xip\nfi\n}\nwarpcheck\nif [[ ! $wgcfv4 =~ on|plus && ! $wgcfv6 =~ on|plus ]]; then\nxuilogin\nelse\nsystemctl stop wg-quick@wgcf >/dev/null 2>&1\nkill -15 $(pgrep warp-go) >/dev/null 2>&1 && sleep 2\nxuilogin\nsystemctl start wg-quick@wgcf >/dev/null 2>&1\nsystemctl restart warp-go >/dev/null 2>&1\nsystemctl enable warp-go >/dev/null 2>&1\nsystemctl start warp-go >/dev/null 2>&1\nfi\n}\n\nresinstall(){\necho \"----------------------------------------------------------------------\"\nrestart\n#curl -sL https://gitlab.com/rwkgyg/x-ui-yg/-/raw/main/version/version | awk -F \"更新内容\" '{print $1}' | head -n 1 > /usr/local/x-ui/v\ncurl -sL https://raw.githubusercontent.com/yonggekkk/x-ui-yg/main/version | awk -F \"更新内容\" '{print $1}' | head -n 1 > /usr/local/x-ui/v\nshowxuiip\nsleep 2\nxuigo\ncronxui\necho \"----------------------------------------------------------------------\"\nblue \"x-ui-yg $(cat /usr/local/x-ui/v 2>/dev/null) 安装成功，自动进入 x-ui 显示管理菜单\" && sleep 4\necho\nshow_menu\n}\n\nxuiinstall(){\nv6\necho \"----------------------------------------------------------------------\"\nopenyn\necho \"----------------------------------------------------------------------\"\nserinstall\necho \"----------------------------------------------------------------------\"\nuserinstall\nportinstall\npathinstall\nresinstall\n#[[ -e /etc/gai.conf ]] && grep -qE '^ *precedence ::ffff:0:0/96  100' /etc/gai.conf || echo 'precedence ::ffff:0:0/96  100' >> /etc/gai.conf 2>/dev/null\n}\n\nupdate() {\nyellow \"升级也有可能出意外哦，建议如下：\"\nyellow \"一、点击x-ui面版中的备份与恢复，下载备份文件x-ui-yg.db\"\nyellow \"二、在 /etc/x-ui-yg 路径导出备份文件x-ui-yg.db\"\nreadp \"确定升级，请按回车(退出请按ctrl+c):\" ins\nif [[ -z $ins ]]; then\nif [[ x\"${release}\" == x\"alpine\" ]]; then\nrc-service x-ui stop\nelse\nsystemctl stop x-ui\nfi\nserinstall && sleep 2\nrestart\n#curl -sL https://gitlab.com/rwkgyg/x-ui-yg/-/raw/main/version/version | awk -F \"更新内容\" '{print $1}' | head -n 1 > /usr/local/x-ui/v\ncurl -sL https://raw.githubusercontent.com/yonggekkk/x-ui-yg/main/version | awk -F \"更新内容\" '{print $1}' | head -n 1 > /usr/local/x-ui/v\ngreen \"x-ui更新完成\" && sleep 2 && x-ui\nelse\nred \"输入有误\" && update\nfi\n}\n\nuninstall() {\nyellow \"本次卸载将清除所有数据，建议如下：\"\nyellow \"一、点击x-ui面版中的备份与恢复，下载备份文件x-ui-yg.db\"\nyellow \"二、在 /etc/x-ui-yg 路径导出备份文件x-ui-yg.db\"\nreadp \"确定卸载，请按回车(退出请按ctrl+c):\" ins\nif [[ -z $ins ]]; then\nif [[ x\"${release}\" == x\"alpine\" ]]; then\nrc-service x-ui stop\nrc-update del x-ui default\nrm /etc/init.d/x-ui -f\nelse\nsystemctl stop x-ui\nsystemctl disable x-ui\nrm /etc/systemd/system/x-ui.service -f\nsystemctl daemon-reload\nsystemctl reset-failed\nfi\nkill -15 $(cat /usr/local/x-ui/xuiargopid.log 2>/dev/null) >/dev/null 2>&1\nkill -15 $(cat /usr/local/x-ui/xuiargoympid.log 2>/dev/null) >/dev/null 2>&1\nkill -15 $(cat /usr/local/x-ui/xuiwpphid.log 2>/dev/null) >/dev/null 2>&1\nrm /usr/bin/x-ui -f\nrm /etc/x-ui-yg/ -rf\nrm /usr/local/x-ui/ -rf\nuncronxui\nrm -rf xuiyg_update\n#sed -i '/^precedence ::ffff:0:0\\/96  100/d' /etc/gai.conf 2>/dev/null\necho\ngreen \"x-ui已卸载完成\"\necho\nblue \"欢迎继续使用x-ui-yg脚本：bash <(curl -Ls https://raw.githubusercontent.com/yonggekkk/x-ui-yg/main/install.sh)\"\necho\nelse\nred \"输入有误\" && uninstall\nfi\n}\n\nreset_config() {\n/usr/local/x-ui/x-ui setting -reset\nsleep 1 \nportinstall\npathinstall\n}\n\nstop() {\nif [[ x\"${release}\" == x\"alpine\" ]]; then\nrc-service x-ui stop\nelse\nsystemctl stop x-ui\nfi\ncheck_status\nif [[ $? == 1 ]]; then\ncrontab -l > /tmp/crontab.tmp\nsed -i '/goxui.sh/d' /tmp/crontab.tmp\ncrontab /tmp/crontab.tmp\nrm /tmp/crontab.tmp\ngreen \"x-ui停止成功\"\nelse\nred \"x-ui停止失败，请运行 x-ui log 查看日志并反馈\" && exit\nfi\n}\n\nrestart() {\nyellow \"请稍等……\"\nif [[ x\"${release}\" == x\"alpine\" ]]; then\nrc-service x-ui restart\nelse\nsystemctl restart x-ui\nfi\nsleep 2\ncheck_status\nif [[ $? == 0 ]]; then\ncrontab -l > /tmp/crontab.tmp\nsed -i '/goxui.sh/d' /tmp/crontab.tmp\ncrontab /tmp/crontab.tmp\nrm /tmp/crontab.tmp\ncrontab -l > /tmp/crontab.tmp\necho \"* * * * * /usr/local/x-ui/goxui.sh\" >> /tmp/crontab.tmp\ncrontab /tmp/crontab.tmp\nrm /tmp/crontab.tmp\ngreen \"x-ui重启成功\"\nelse\nred \"x-ui重启失败，请运行 x-ui log 查看日志并反馈\" && exit\nfi\n}\n\nshow_log() {\nif [[ x\"${release}\" == x\"alpine\" ]]; then\nyellow \"暂不支持alpine查看日志\"\nelse\njournalctl -u x-ui.service -e --no-pager -f\nfi\n}\n\nget_char(){\nSAVEDSTTY=`stty -g`\nstty -echo\nstty cbreak\ndd if=/dev/tty bs=1 count=1 2> /dev/null\nstty -raw\nstty echo\nstty $SAVEDSTTY\n}\n\nback(){\nwhite \"------------------------------------------------------------------------------------\"\nwhite \" 回x-ui主菜单，请按任意键\"\nwhite \" 退出脚本，请按Ctrl+C\"\nget_char && show_menu\n}\n\nacme() {\nbash <(curl -Ls https://gitlab.com/rwkgyg/acme-script/raw/main/acme.sh)\nback\n}\n\nbbr() {\nbash <(curl -Ls https://raw.githubusercontent.com/teddysun/across/master/bbr.sh)\nback\n}\n\ncfwarp() {\nbash <(curl -Ls https://gitlab.com/rwkgyg/CFwarp/raw/main/CFwarp.sh)\nback\n}\n\nxuirestop(){\necho\nreadp \"1. 停止 x-ui \\n2. 重启 x-ui \\n0. 返回主菜单\\n请选择：\" action\nif [[ $action == \"1\" ]]; then\nstop\nelif [[ $action == \"2\" ]]; then\nrestart\nelse\nshow_menu\nfi\n}\n\nxuichange(){\necho\nreadp \"1. 更改 x-ui 用户名与密码 \\n2. 更改 x-ui 面板登录端口\\n3. 更改 x-ui 面板根路径\\n4. 重置 x-ui 面板设置（面板设置选项中所有设置都恢复出厂设置，登录端口与面板根路径将重新自定义，账号密码不变）\\n0. 返回主菜单\\n请选择：\" action\nif [[ $action == \"1\" ]]; then\nuserinstall && restart\nelif [[ $action == \"2\" ]]; then\nportinstall && restart\nelif [[ $action == \"3\" ]]; then\npathinstall && restart\nelif [[ $action == \"4\" ]]; then\nreset_config && restart\nelse\nshow_menu\nfi\n}\n\ncheck_status() {\nif [[ x\"${release}\" == x\"alpine\" ]]; then\nif [[ ! -f /etc/init.d/x-ui ]]; then\nreturn 2\nfi\ntemp=$(rc-service x-ui status | awk '{print $3}')\nif [[ x\"${temp}\" == x\"started\" ]]; then\nreturn 0\nelse\nreturn 1\nfi\nelse\nif [[ ! -f /etc/systemd/system/x-ui.service ]]; then\nreturn 2\nfi\ntemp=$(systemctl status x-ui | grep Active | awk '{print $3}' | cut -d \"(\" -f2 | cut -d \")\" -f1)\nif [[ x\"${temp}\" == x\"running\" ]]; then\nreturn 0\nelse\nreturn 1\nfi\nfi\n}\n\ncheck_enabled() {\nif [[ x\"${release}\" == x\"alpine\" ]]; then\ntemp=$(rc-status default | grep x-ui | awk '{print $1}')\nif [[ x\"${temp}\" == x\"x-ui\" ]]; then\nreturn 0\nelse\nreturn 1\nfi\nelse\ntemp=$(systemctl is-enabled x-ui)\nif [[ x\"${temp}\" == x\"enabled\" ]]; then\nreturn 0\nelse\nreturn 1\nfi\nfi\n}\n\ncheck_uninstall() {\ncheck_status\nif [[ $? != 2 ]]; then\nyellow \"x-ui已安装，可先选择2卸载，再安装\" && sleep 3\nif [[ $# == 0 ]]; then\nshow_menu\nfi\nreturn 1\nelse\nreturn 0\nfi\n}\n\ncheck_install() {\ncheck_status\nif [[ $? == 2 ]]; then\nyellow \"未安装x-ui，请先安装x-ui\" && sleep 3\nif [[ $# == 0 ]]; then\nshow_menu\nfi\nreturn 1\nelse\nreturn 0\nfi\n}\n\nshow_status() {\ncheck_status\ncase $? in\n0)\necho -e \"x-ui状态: $blue已运行$plain\"\nshow_enable_status\n;;\n1)\necho -e \"x-ui状态: $yellow未运行$plain\"\nshow_enable_status\n;;\n2)\necho -e \"x-ui状态: $red未安装$plain\"\nesac\nshow_xray_status\n}\n\nshow_enable_status() {\ncheck_enabled\nif [[ $? == 0 ]]; then\necho -e \"x-ui自启: $blue是$plain\"\nelse\necho -e \"x-ui自启: $red否$plain\"\nfi\n}\n\ncheck_xray_status() {\ncount=$(ps -ef | grep \"xray-linux\" | grep -v \"grep\" | wc -l)\nif [[ count -ne 0 ]]; then\nreturn 0\nelse\nreturn 1\nfi\n}\n\nshow_xray_status() {\ncheck_xray_status\nif [[ $? == 0 ]]; then\necho -e \"xray状态: $blue已启动$plain\"\nelse\necho -e \"xray状态: $red未启动$plain\"\nfi\n}\n\nxuigo(){\ncat>/usr/local/x-ui/goxui.sh<<-\\EOF\n#!/bin/bash\nxui=`ps -aux |grep \"x-ui\" |grep -v \"grep\" |wc -l`\nxray=`ps -aux |grep \"xray\" |grep -v \"grep\" |wc -l`\nif [ $xui = 0 ];then\nsystemctl restart x-ui\nfi\nif [ $xray = 0 ];then\nsystemctl restart x-ui\nfi\nEOF\nchmod +x /usr/local/x-ui/goxui.sh\n}\n\ncronxui(){\nuncronxui\ncrontab -l > /tmp/crontab.tmp\necho \"* * * * * /usr/local/x-ui/goxui.sh\" >> /tmp/crontab.tmp\necho \"0 2 * * * systemctl restart x-ui\" >> /tmp/crontab.tmp\ncrontab /tmp/crontab.tmp\nrm /tmp/crontab.tmp\n}\n\nuncronxui(){\ncrontab -l > /tmp/crontab.tmp\nsed -i '/goxui.sh/d' /tmp/crontab.tmp\nsed -i '/systemctl restart x-ui/d' /tmp/crontab.tmp\nsed -i '/xuiargoport.log/d' /tmp/crontab.tmp\nsed -i '/xuiargopid.log/d' /tmp/crontab.tmp\nsed -i '/xuiargoympid/d' /tmp/crontab.tmp\nsed -i '/xuiwpphid.log/d' /tmp/crontab.tmp\ncrontab /tmp/crontab.tmp\nrm /tmp/crontab.tmp\n}\n\nclose(){\nsystemctl stop firewalld.service >/dev/null 2>&1\nsystemctl disable firewalld.service >/dev/null 2>&1\nsetenforce 0 >/dev/null 2>&1\nufw disable >/dev/null 2>&1\niptables -P INPUT ACCEPT >/dev/null 2>&1\niptables -P FORWARD ACCEPT >/dev/null 2>&1\niptables -P OUTPUT ACCEPT >/dev/null 2>&1\niptables -t mangle -F >/dev/null 2>&1\niptables -F >/dev/null 2>&1\niptables -X >/dev/null 2>&1\nnetfilter-persistent save >/dev/null 2>&1\nif [[ -n $(apachectl -v 2>/dev/null) ]]; then\nsystemctl stop httpd.service >/dev/null 2>&1\nsystemctl disable httpd.service >/dev/null 2>&1\nservice apache2 stop >/dev/null 2>&1\nsystemctl disable apache2 >/dev/null 2>&1\nfi\nsleep 1\ngreen \"执行开放端口，关闭防火墙完毕\"\n}\n\nopenyn(){\necho\nreadp \"是否开放端口，关闭防火墙？\\n1、是，执行(回车默认)\\n2、否，跳过！自行处理\\n请选择：\" action\nif [[ -z $action ]] || [[ $action == \"1\" ]]; then\nclose\nelif [[ $action == \"2\" ]]; then\necho\nelse\nred \"输入错误,请重新选择\" && openyn\nfi\n}\n\nchangeserv(){\necho\nreadp \"1：设置Argo临时、固定隧道\\n2：设置vmess与vless节点在订阅链接中的优选IP地址\\n3：设置Gitlab订阅分享链接\\n4：获取warp-wireguard普通账号配置\\n0：返回上层\\n请选择【0-4】：\" menu\nif [ \"$menu\" = \"1\" ];then\nxuiargo\nelif [ \"$menu\" = \"2\" ];then\nxuicfadd\nelif [ \"$menu\" = \"3\" ];then\ngitlabsub\nelif [ \"$menu\" = \"4\" ];then\nwarpwg\nelse \nshow_menu\nfi\n}\n\nwarpwg(){\nwarpcode(){\nreg(){\nkeypair=$(openssl genpkey -algorithm X25519|openssl pkey -text -noout)\nprivate_key=$(echo \"$keypair\" | awk '/priv:/{flag=1; next} /pub:/{flag=0} flag' | tr -d '[:space:]' | xxd -r -p | base64)\npublic_key=$(echo \"$keypair\" | awk '/pub:/{flag=1} flag' | tr -d '[:space:]' | xxd -r -p | base64)\ncurl -X POST 'https://api.cloudflareclient.com/v0a2158/reg' -sL --tlsv1.3 \\\n-H 'CF-Client-Version: a-7.21-0721' -H 'Content-Type: application/json' \\\n-d \\\n'{\n\"key\":\"'${public_key}'\",\n\"tos\":\"'$(date +\"%Y-%m-%dT%H:%M:%S.000Z\")'\"\n}' \\\n| python3 -m json.tool | sed \"/\\\"account_type\\\"/i\\         \\\"private_key\\\": \\\"$private_key\\\",\"\n}\nreserved(){\nreserved_str=$(echo \"$warp_info\" | grep 'client_id' | cut -d\\\" -f4)\nreserved_hex=$(echo \"$reserved_str\" | base64 -d | xxd -p)\nreserved_dec=$(echo \"$reserved_hex\" | fold -w2 | while read HEX; do printf '%d ' \"0x${HEX}\"; done | awk '{print \"[\"$1\", \"$2\", \"$3\"]\"}')\necho -e \"{\\n    \\\"reserved_dec\\\": $reserved_dec,\"\necho -e \"    \\\"reserved_hex\\\": \\\"0x$reserved_hex\\\",\"\necho -e \"    \\\"reserved_str\\\": \\\"$reserved_str\\\"\\n}\"\n}\nresult() {\necho \"$warp_reserved\" | grep -P \"reserved\" | sed \"s/ //g\" | sed 's/:\"/: \"/g' | sed 's/:\\[/: \\[/g' | sed 's/\\([0-9]\\+\\),\\([0-9]\\+\\),\\([0-9]\\+\\)/\\1, \\2, \\3/' | sed 's/^\"/    \"/g' | sed 's/\"$/\",/g'\necho \"$warp_info\" | grep -P \"(private_key|public_key|\\\"v4\\\": \\\"172.16.0.2\\\"|\\\"v6\\\": \\\"2)\" | sed \"s/ //g\" | sed 's/:\"/: \"/g' | sed 's/^\"/    \"/g'\necho \"}\"\n}\nwarp_info=$(reg) \nwarp_reserved=$(reserved) \nresult\n}\noutput=$(warpcode)\nif ! echo \"$output\" 2>/dev/null | grep -w \"private_key\" > /dev/null; then\nv6=2606:4700:110:8f20:f22e:2c8d:d8ee:fe7\npvk=SGU6hx3CJAWGMr6XYoChvnrKV61hxAw2S4VlgBAxzFs=\nres=[15,242,244]\nelse\npvk=$(echo \"$output\" | sed -n 4p | awk '{print $2}' | tr -d ' \"' | sed 's/.$//')\nv6=$(echo \"$output\" | sed -n 7p | awk '{print $2}' | tr -d ' \"')\nres=$(echo \"$output\" | sed -n 1p | awk -F\":\" '{print $NF}' | tr -d ' ' | sed 's/.$//')\nfi\ngreen \"成功生成warp-wireguard普通账号配置，进入x-ui面板-面板设置-Xray配置出站设置，进行三要素替换\"\nblue \"Private_key私钥：$pvk\"\nblue \"IPV6地址：$v6\"\nblue \"reserved值：$res\"\n}\n\ncloudflaredargo(){\nif [ ! -e /usr/local/x-ui/cloudflared ]; then\ncase $(uname -m) in\naarch64) cpu=arm64;;\nx86_64) cpu=amd64;;\n#aarch64) cpu=car;;\n#x86_64) cpu=cam;;\nesac\ncurl -L -o /usr/local/x-ui/cloudflared -# --retry 2 https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-$cpu\n#curl -L -o /usr/local/x-ui/cloudflared -# --retry 2 https://gitlab.com/rwkgyg/sing-box-yg/-/raw/main/$cpu\nchmod +x /usr/local/x-ui/cloudflared\nfi\n}\n\nxuiargo(){\necho\nyellow \"开启Argo隧道节点的三个前提要求：\"\ngreen \"一、节点的传输协议是WS\"\ngreen \"二、节点的TLS必须关闭\"\ngreen \"三、节点的请求头留空不设\"\ngreen \"节点类别可选：vmess-ws、vless-ws、trojan-ws、shadowsocks-ws。推荐vmess-ws\"\necho\nyellow \"1：设置Argo临时隧道\"\nyellow \"2：设置Argo固定隧道\"\nyellow \"0：返回上层\"\nreadp \"请选择【0-2】：\" menu\nif [ \"$menu\" = \"1\" ]; then\ncfargo\nelif [ \"$menu\" = \"2\" ]; then\ncfargoym\nelse\nchangeserv\nfi\n}\n\ncfargo(){\necho\nyellow \"1：重置Argo临时隧道域名\"\nyellow \"2：停止Argo临时隧道\"\nyellow \"0：返回上层\"\nreadp \"请选择【0-2】：\" menu\nif [ \"$menu\" = \"1\" ]; then\nreadp \"请输入Argo监听的WS节点端口：\" port\necho \"$port\" > /usr/local/x-ui/xuiargoport.log\ncloudflaredargo\ni=0\nwhile [ $i -le 4 ]; do let i++\nyellow \"第$i次刷新验证Cloudflared Argo隧道域名有效性，请稍等……\"\nif [[ -n $(ps -e | grep cloudflared) ]]; then\nkill -15 $(cat /usr/local/x-ui/xuiargopid.log 2>/dev/null) >/dev/null 2>&1\nfi\n/usr/local/x-ui/cloudflared tunnel --url http://localhost:$port --edge-ip-version auto --no-autoupdate --protocol http2 > /usr/local/x-ui/argo.log 2>&1 &\necho \"$!\" > /usr/local/x-ui/xuiargopid.log\nsleep 20\nif [[ -n $(curl -sL https://$(cat /usr/local/x-ui/argo.log 2>/dev/null | grep -a trycloudflare.com | awk 'NR==2{print}' | awk -F// '{print $2}' | awk '{print $1}')/ -I | awk 'NR==1 && /404|400|503/') ]]; then\nargo=$(cat /usr/local/x-ui/argo.log 2>/dev/null | grep -a trycloudflare.com | awk 'NR==2{print}' | awk -F// '{print $2}' | awk '{print $1}')\nblue \"Argo隧道申请成功，域名验证有效：$argo\" && sleep 2\nbreak\nfi\nif [ $i -eq 5 ]; then\nred \"请注意\"\nyellow \"1：请确保你输入的端口是x-ui已创建WS协议端口\"\nyellow \"2：Argo域名验证暂不可用，稍后可能会自动恢复，或者再次重置\" && sleep 2\nfi\ndone\ncrontab -l > /tmp/crontab.tmp\nsed -i '/xuiargoport.log/d' /tmp/crontab.tmp\ncrontab /tmp/crontab.tmp\nrm /tmp/crontab.tmp\ncrontab -l > /tmp/crontab.tmp\necho '@reboot /bin/bash -c \"/usr/local/x-ui/cloudflared tunnel --url http://localhost:$(cat /usr/local/x-ui/xuiargoport.log) --edge-ip-version auto --no-autoupdate --protocol http2 > /usr/local/x-ui/argo.log 2>&1 & pid=\\$! && echo \\$pid > /usr/local/x-ui/xuiargopid.log\"' >> /tmp/crontab.tmp\ncrontab /tmp/crontab.tmp\nrm /tmp/crontab.tmp\nelif [ \"$menu\" = \"2\" ]; then\nkill -15 $(cat /usr/local/x-ui/xuiargopid.log 2>/dev/null) >/dev/null 2>&1\nrm -rf /usr/local/x-ui/argo.log /usr/local/x-ui/xuiargopid.log /usr/local/x-ui/xuiargoport.log\ncrontab -l > /tmp/crontab.tmp\nsed -i '/xuiargopid.log/d' /tmp/crontab.tmp\ncrontab /tmp/crontab.tmp\nrm /tmp/crontab.tmp\ngreen \"已卸载Argo临时隧道\"\nelse\nxuiargo\nfi\n}\n\ncfargoym(){\necho\nif [[ -f /usr/local/x-ui/xuiargotoken.log && -f /usr/local/x-ui/xuiargoym.log ]]; then\ngreen \"当前Argo固定隧道域名：$(cat /usr/local/x-ui/xuiargoym.log 2>/dev/null)\"\ngreen \"当前Argo固定隧道Token：$(cat /usr/local/x-ui/xuiargotoken.log 2>/dev/null)\"\nfi\necho\ngreen \"请确保Cloudflare官网 --- Zero Trust --- Networks --- Tunnels已设置完成\"\nyellow \"1：重置/设置Argo固定隧道域名\"\nyellow \"2：停止Argo固定隧道\"\nyellow \"0：返回上层\"\nreadp \"请选择【0-2】：\" menu\nif [ \"$menu\" = \"1\" ]; then\nreadp \"请输入Argo监听的WS节点端口：\" port\necho \"$port\" > /usr/local/x-ui/xuiargoymport.log\ncloudflaredargo\nreadp \"输入Argo固定隧道Token: \" argotoken\nreadp \"输入Argo固定隧道域名: \" argoym\nif [[ -n $(ps -e | grep cloudflared) ]]; then\nkill -15 $(cat /usr/local/x-ui/xuiargoympid.log 2>/dev/null) >/dev/null 2>&1\nfi\necho\nif [[ -n \"${argotoken}\" && -n \"${argoym}\" ]]; then\nnohup setsid /usr/local/x-ui/cloudflared tunnel --no-autoupdate --edge-ip-version auto --protocol http2 run --token ${argotoken} >/dev/null 2>&1 & echo \"$!\" > /usr/local/x-ui/xuiargoympid.log\nsleep 20\nfi\necho ${argoym} > /usr/local/x-ui/xuiargoym.log\necho ${argotoken} > /usr/local/x-ui/xuiargotoken.log\ncrontab -l > /tmp/crontab.tmp\nsed -i '/xuiargoympid/d' /tmp/crontab.tmp\necho '@reboot /bin/bash -c \"nohup setsid /usr/local/x-ui/cloudflared tunnel --no-autoupdate --edge-ip-version auto --protocol http2 run --token $(cat /usr/local/x-ui/xuiargotoken.log 2>/dev/null) >/dev/null 2>&1 & pid=\\$! && echo \\$pid > /usr/local/x-ui/xuiargoympid.log\"' >> /tmp/crontab.tmp\ncrontab /tmp/crontab.tmp\nrm /tmp/crontab.tmp\nargo=$(cat /usr/local/x-ui/xuiargoym.log 2>/dev/null)\nblue \"Argo固定隧道设置完成，固定域名：$argo\"\nelif [ \"$menu\" = \"2\" ]; then\nkill -15 $(cat /usr/local/x-ui/xuiargoympid.log 2>/dev/null) >/dev/null 2>&1\nrm -rf /usr/local/x-ui/xuiargoym.log /usr/local/x-ui/xuiargoymport.log /usr/local/x-ui/xuiargoympid.log /usr/local/x-ui/xuiargotoken.log\ncrontab -l > /tmp/crontab.tmp\nsed -i '/xuiargoympid/d' /tmp/crontab.tmp\ncrontab /tmp/crontab.tmp\nrm /tmp/crontab.tmp\ngreen \"已卸载Argo固定隧道\"\nelse\nxuiargo\nfi\n}\n\nxuicfadd(){\n[[ -s /usr/local/x-ui/bin/xuicdnip_ws.txt ]] && cdnwsname=$(cat /usr/local/x-ui/bin/xuicdnip_ws.txt 2>/dev/null)  || cdnwsname='域名或IP直连'\n[[ -s /usr/local/x-ui/bin/xuicdnip_argo.txt ]] && cdnargoname=$(cat /usr/local/x-ui/bin/xuicdnip_argo.txt 2>/dev/null)  || cdnargoname=www.visa.com.sg\necho\ngreen \"推荐使用稳定的世界大厂或组织的CDN网站作为客户端优选IP地址：\"\nblue \"www.visa.com.sg\"\nblue \"www.wto.org\"\nblue \"www.web.com\"\necho\nyellow \"1：设置所有主节点vmess/vless订阅节点客户端优选IP地址 【当前正使用：$cdnwsname】\"\nyellow \"2：设置Argo节点vmess/vless订阅节点客户端优选IP地址 【当前正使用：$cdnargoname】\"\nyellow \"0：返回上层\"\nreadp \"请选择【0-2】：\" menu\nif [ \"$menu\" = \"1\" ]; then\nred \"请确保本地IP已解析到CF托管的域名上，节点端口已设置为13个CF标准端口：\"\nred \"关tls端口：2052、2082、2086、2095、80、8880、8080\"\nred \"开tls端口：2053、2083、2087、2096、8443、443\"\nred \"如果VPS不支持以上13个CF标准端口（NAT类VPS），请在CF规则页面---Origin Rules页面下设置好回源规则\" && sleep 2\necho\nreadp \"输入自定义的优选IP/域名 (回车跳过表示恢复本地IP直连)：\" menu\n[[ -z \"$menu\" ]] && > /usr/local/x-ui/bin/xuicdnip_ws.txt || echo \"$menu\" > /usr/local/x-ui/bin/xuicdnip_ws.txt\ngreen \"设置成功，可选择7刷新\" && sleep 2 && show_menu\nelif [ \"$menu\" = \"2\" ]; then\nred \"请确保Argo临时隧道或者固定隧道的节点功能已启用\" && sleep 2\nreadp \"输入自定义的优选IP/域名 (回车跳过表示用默认优选域名：www.visa.com.sg)：\" menu\n[[ -z \"$menu\" ]] && > /usr/local/x-ui/bin/xuicdnip_argo.txt || echo \"$menu\" > /usr/local/x-ui/bin/xuicdnip_argo.txt\ngreen \"设置成功，可选择7刷新\" && sleep 2 && show_menu\nelse\nchangeserv\nfi\n}\n\ngitlabsub(){\necho\ngreen \"请确保Gitlab官网上已建立项目，已开启推送功能，已获取访问令牌\"\nyellow \"1：重置/设置Gitlab订阅链接\"\nyellow \"0：返回上层\"\nreadp \"请选择【0-1】：\" menu\nif [ \"$menu\" = \"1\" ]; then\nchown -R root:root /usr/local/x-ui/bin /usr/local/x-ui\ncd /usr/local/x-ui/bin\nreadp \"输入登录邮箱: \" email\nreadp \"输入访问令牌: \" token\nreadp \"输入用户名: \" userid\nreadp \"输入项目名: \" project\necho\ngreen \"多台VPS可共用一个令牌及项目名，可创建多个分支订阅链接\"\ngreen \"回车跳过表示不新建，仅使用主分支main订阅链接(首台VPS建议回车跳过)\"\nreadp \"新建分支名称(可随意填写): \" gitlabml\necho\nsharesub_sbcl >/dev/null 2>&1\nif [[ -z \"$gitlabml\" ]]; then\ngitlab_ml=''\ngit_sk=main\nrm -rf /usr/local/x-ui/bin/gitlab_ml_ml\nelse\ngitlab_ml=\":${gitlabml}\"\ngit_sk=\"${gitlabml}\"\necho \"${gitlab_ml}\" > /usr/local/x-ui/bin/gitlab_ml_ml\nfi\necho \"$token\" > /usr/local/x-ui/bin/gitlabtoken.txt\nrm -rf /usr/local/x-ui/bin/.git\ngit init >/dev/null 2>&1\ngit add xui_singbox.json xui_clashmeta.yaml xui_ty.txt>/dev/null 2>&1\ngit config --global user.email \"${email}\" >/dev/null 2>&1\ngit config --global user.name \"${userid}\" >/dev/null 2>&1\ngit commit -m \"commit_add_$(date +\"%F %T\")\" >/dev/null 2>&1\nbranches=$(git branch)\nif [[ $branches == *master* ]]; then\ngit branch -m master main >/dev/null 2>&1\nfi\ngit remote add origin https://${token}@gitlab.com/${userid}/${project}.git >/dev/null 2>&1\nif [[ $(ls -a | grep '^\\.git$') ]]; then\ncat > /usr/local/x-ui/bin/gitpush.sh <<EOF\n#!/usr/bin/expect\nspawn bash -c \"git push -f origin main${gitlab_ml}\"\nexpect \"Password for 'https://$(cat /usr/local/x-ui/bin/gitlabtoken.txt 2>/dev/null)@gitlab.com':\"\nsend \"$(cat /usr/local/x-ui/bin/gitlabtoken.txt 2>/dev/null)\\r\"\ninteract\nEOF\nchmod +x gitpush.sh\n./gitpush.sh \"git push -f origin main${gitlab_ml}\" cat /usr/local/x-ui/bin/gitlabtoken.txt >/dev/null 2>&1\necho \"https://gitlab.com/api/v4/projects/${userid}%2F${project}/repository/files/xui_singbox.json/raw?ref=${git_sk}&private_token=${token}\" > /usr/local/x-ui/bin/sing_box_gitlab.txt\necho \"https://gitlab.com/api/v4/projects/${userid}%2F${project}/repository/files/xui_clashmeta.yaml/raw?ref=${git_sk}&private_token=${token}\" > /usr/local/x-ui/bin/clash_meta_gitlab.txt\necho \"https://gitlab.com/api/v4/projects/${userid}%2F${project}/repository/files/xui_ty.txt/raw?ref=${git_sk}&private_token=${token}\" > /usr/local/x-ui/bin/xui_ty_gitlab.txt\nsharesubshow\nelse\nyellow \"设置Gitlab订阅链接失败，请反馈\"\nfi\ncd\nelse\nchangeserv\nfi\n}\n\nsharesubshow(){\ngreen \"当前X-ui-Sing-box节点已更新并推送\"\ngreen \"Sing-box订阅链接如下：\"\nblue \"$(cat /usr/local/x-ui/bin/sing_box_gitlab.txt 2>/dev/null)\"\necho\ngreen \"Sing-box订阅链接二维码如下：\"\nqrencode -o - -t ANSIUTF8 \"$(cat /usr/local/x-ui/bin/sing_box_gitlab.txt 2>/dev/null)\"\nsleep 3\necho\necho \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\necho\ngreen \"当前X-ui-Clash-meta节点配置已更新并推送\"\ngreen \"Clash-meta订阅链接如下：\"\nblue \"$(cat /usr/local/x-ui/bin/clash_meta_gitlab.txt 2>/dev/null)\"\necho\ngreen \"Clash-meta订阅链接二维码如下：\"\nqrencode -o - -t ANSIUTF8 \"$(cat /usr/local/x-ui/bin/clash_meta_gitlab.txt 2>/dev/null)\"\nsleep 3\necho\necho \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\necho\ngreen \"当前X-ui聚合通用节点配置已更新并推送\"\ngreen \"聚合通用节点订阅链接如下：\"\nblue \"$(cat /usr/local/x-ui/bin/xui_ty_gitlab.txt 2>/dev/null)\"\nsleep 3\necho\nyellow \"可以在网页上输入以上三个订阅链接查看配置内容，如果无配置内容，请自检Gitlab相关设置并重置\"\necho\n}\n\nsharesub(){\nsharesub_sbcl\necho\nred \"Gitlab订阅链接如下：\"\necho\ncd /usr/local/x-ui/bin\nif [[ $(ls -a | grep '^\\.git$') ]]; then\nif [ -f /usr/local/x-ui/bin/gitlab_ml_ml ]; then\ngitlab_ml=$(cat /usr/local/x-ui/bin/gitlab_ml_ml)\nfi\ngit rm --cached xui_singbox.json xui_clashmeta.yaml xui_ty.txt >/dev/null 2>&1\ngit commit -m \"commit_rm_$(date +\"%F %T\")\" >/dev/null 2>&1\ngit add xui_singbox.json xui_clashmeta.yaml xui_ty.txt >/dev/null 2>&1\ngit commit -m \"commit_add_$(date +\"%F %T\")\" >/dev/null 2>&1\nchmod +x gitpush.sh\n./gitpush.sh \"git push -f origin main${gitlab_ml}\" cat /usr/local/x-ui/bin/gitlabtoken.txt >/dev/null 2>&1\nsharesubshow\nelse\nyellow \"未设置Gitlab订阅链接\"\nfi\ncd\necho\nwhite \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\nred \"🚀X-UI聚合通用节点分享链接显示如下：\"\nred \"文件目录 /usr/local/x-ui/bin/xui_ty.txt ，可直接在客户端剪切板导入添加\" && sleep 2\necho\ncat /usr/local/x-ui/bin/xui_ty.txt\necho\nwhite \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\necho\nwhite \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\nred \"🚀X-UI-Clash-Meta配置文件操作如下：\"\nred \"文件目录 /usr/local/x-ui/bin/xui_clashmeta.yaml ，复制自建以yaml文件格式为准\" \necho\nred \"输入：cat /usr/local/x-ui/bin/xui_clashmeta.yaml 即可显示配置内容\" && sleep 2\necho\nwhite \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\necho\nwhite \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\nred \"🚀XUI-Sing-box-SFA/SFI/SFW配置文件操作如下：\"\nred \"文件目录 /usr/local/x-ui/bin/xui_singbox.json ，复制自建以json文件格式为准\"\necho\nred \"输入：cat /usr/local/x-ui/bin/xui_singbox.json 即可显示配置内容\" && sleep 2\necho\nwhite \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\necho\n}\n\nsharesub_sbcl(){\nif [[ -s /usr/local/x-ui/bin/xuicdnip_argo.txt ]]; then\ncdnargo=$(cat /usr/local/x-ui/bin/xuicdnip_argo.txt 2>/dev/null)\nelse\ncdnargo=www.visa.com.sg\nfi\ngreen \"请稍等……\"\nxip1=$(cat /usr/local/x-ui/xip 2>/dev/null | sed -n 1p)\nif [[ \"$xip1\" =~ : ]]; then\ndnsip='tls://[2001:4860:4860::8888]/dns-query'\nelse\ndnsip='tls://8.8.8.8/dns-query'\nfi\ncat > /usr/local/x-ui/bin/xui_singbox.json <<EOF\n{\n  \"log\": {\n    \"disabled\": false,\n    \"level\": \"info\",\n    \"timestamp\": true\n  },\n  \"experimental\": {\n    \"clash_api\": {\n      \"external_controller\": \"127.0.0.1:9090\",\n      \"external_ui\": \"ui\",\n      \"external_ui_download_url\": \"\",\n      \"external_ui_download_detour\": \"\",\n      \"secret\": \"\",\n      \"default_mode\": \"Rule\"\n       },\n      \"cache_file\": {\n            \"enabled\": true,\n            \"path\": \"cache.db\",\n            \"store_fakeip\": true\n        }\n    },\n    \"dns\": {\n        \"servers\": [\n            {\n                \"tag\": \"proxydns\",\n                \"address\": \"$dnsip\",\n                \"detour\": \"select\"\n            },\n            {\n                \"tag\": \"localdns\",\n                \"address\": \"h3://223.5.5.5/dns-query\",\n                \"detour\": \"direct\"\n            },\n            {\n                \"tag\": \"dns_fakeip\",\n                \"address\": \"fakeip\"\n            }\n        ],\n        \"rules\": [\n            {\n                \"outbound\": \"any\",\n                \"server\": \"localdns\",\n                \"disable_cache\": true\n            },\n            {\n                \"clash_mode\": \"Global\",\n                \"server\": \"proxydns\"\n            },\n            {\n                \"clash_mode\": \"Direct\",\n                \"server\": \"localdns\"\n            },\n            {\n                \"rule_set\": \"geosite-cn\",\n                \"server\": \"localdns\"\n            },\n            {\n                 \"rule_set\": \"geosite-geolocation-!cn\",\n                 \"server\": \"proxydns\"\n            },\n             {\n                \"rule_set\": \"geosite-geolocation-!cn\",         \n                \"query_type\": [\n                    \"A\",\n                    \"AAAA\"\n                ],\n                \"server\": \"dns_fakeip\"\n            }\n          ],\n           \"fakeip\": {\n           \"enabled\": true,\n           \"inet4_range\": \"198.18.0.0/15\",\n           \"inet6_range\": \"fc00::/18\"\n         },\n          \"independent_cache\": true,\n          \"final\": \"proxydns\"\n        },\n      \"inbounds\": [\n    {\n      \"type\": \"tun\",\n      \"tag\": \"tun-in\",\n      \"address\": [\n      \"172.19.0.1/30\",\n      \"fd00::1/126\"\n      ],\n      \"auto_route\": true,\n      \"strict_route\": true,\n      \"sniff\": true,\n      \"sniff_override_destination\": true,\n      \"domain_strategy\": \"prefer_ipv4\"\n    }\n  ],\n  \"outbounds\": [\n\n//_0\n\n    {\n      \"tag\": \"direct\",\n      \"type\": \"direct\"\n    },\n    {\n      \"tag\": \"select\",\n      \"type\": \"selector\",\n      \"default\": \"auto\",\n      \"outbounds\": [\n        \"auto\",\n\n//_1\n\n      ]\n    },\n    {\n      \"tag\": \"auto\",\n      \"type\": \"urltest\",\n      \"outbounds\": [\n\n//_2\n\n      ],\n      \"url\": \"https://www.gstatic.com/generate_204\",\n      \"interval\": \"1m\",\n      \"tolerance\": 50,\n      \"interrupt_exist_connections\": false\n    }\n  ],\n  \"route\": {\n      \"rule_set\": [\n            {\n                \"tag\": \"geosite-geolocation-!cn\",\n                \"type\": \"remote\",\n                \"format\": \"binary\",\n                \"url\": \"https://cdn.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@sing/geo/geosite/geolocation-!cn.srs\",\n                \"download_detour\": \"select\",\n                \"update_interval\": \"1d\"\n            },\n            {\n                \"tag\": \"geosite-cn\",\n                \"type\": \"remote\",\n                \"format\": \"binary\",\n                \"url\": \"https://cdn.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@sing/geo/geosite/geolocation-cn.srs\",\n                \"download_detour\": \"select\",\n                \"update_interval\": \"1d\"\n            },\n            {\n                \"tag\": \"geoip-cn\",\n                \"type\": \"remote\",\n                \"format\": \"binary\",\n                \"url\": \"https://cdn.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@sing/geo/geoip/cn.srs\",\n                \"download_detour\": \"select\",\n                \"update_interval\": \"1d\"\n            }\n        ],\n    \"auto_detect_interface\": true,\n    \"final\": \"select\",\n    \"rules\": [\n      {\n      \"inbound\": \"tun-in\",\n      \"action\": \"sniff\"\n      },\n      {\n      \"protocol\": \"dns\",\n      \"action\": \"hijack-dns\"\n      },\n      {\n      \"port\": 443,\n      \"network\": \"udp\",\n      \"action\": \"reject\"\n      },\n      {\n        \"clash_mode\": \"Direct\",\n        \"outbound\": \"direct\"\n      },\n      {\n        \"clash_mode\": \"Global\",\n        \"outbound\": \"select\"\n      },\n      {\n        \"rule_set\": \"geoip-cn\",\n        \"outbound\": \"direct\"\n      },\n      {\n        \"rule_set\": \"geosite-cn\",\n        \"outbound\": \"direct\"\n      },\n      {\n      \"ip_is_private\": true,\n      \"outbound\": \"direct\"\n      },\n      {\n        \"rule_set\": \"geosite-geolocation-!cn\",\n        \"outbound\": \"select\"\n      }\n    ]\n  },\n    \"ntp\": {\n    \"enabled\": true,\n    \"server\": \"time.apple.com\",\n    \"server_port\": 123,\n    \"interval\": \"30m\",\n    \"detour\": \"direct\"\n  }\n}\nEOF\n\ncat > /usr/local/x-ui/bin/xui_clashmeta.yaml <<EOF\nport: 7890\nallow-lan: true\nmode: rule\nlog-level: info\nunified-delay: true\nglobal-client-fingerprint: chrome\ndns:\n  enable: true\n  listen: :53\n  ipv6: true\n  enhanced-mode: fake-ip\n  fake-ip-range: 198.18.0.1/16\n  default-nameserver: \n    - 223.5.5.5\n    - 8.8.8.8\n  nameserver:\n    - https://dns.alidns.com/dns-query\n    - https://doh.pub/dns-query\n  fallback:\n    - https://1.0.0.1/dns-query\n    - tls://dns.google\n  fallback-filter:\n    geoip: true\n    geoip-code: CN\n    ipcidr:\n      - 240.0.0.0/4\n\nproxies:\n\n#_0\n\nproxy-groups:\n- name: 负载均衡\n  type: load-balance\n  url: https://www.gstatic.com/generate_204\n  interval: 300\n  strategy: round-robin\n  proxies: \n\n#_1\n\n\n- name: 自动选择\n  type: url-test\n  url: https://www.gstatic.com/generate_204\n  interval: 300\n  tolerance: 50\n  proxies:  \n\n#_2                         \n    \n- name: 🌍选择代理节点\n  type: select\n  proxies:\n    - 负载均衡                                         \n    - 自动选择\n    - DIRECT\n\n#_3\n\nrules:\n  - GEOIP,LAN,DIRECT\n  - GEOIP,CN,DIRECT\n  - MATCH,🌍选择代理节点\nEOF\n\nxui_sb_cl(){\nsed -i \"/#_0/r /usr/local/x-ui/bin/cl${i}.log\" /usr/local/x-ui/bin/xui_clashmeta.yaml\nsed -i \"/#_1/ i\\\\    - $tag\" /usr/local/x-ui/bin/xui_clashmeta.yaml\nsed -i \"/#_2/ i\\\\    - $tag\" /usr/local/x-ui/bin/xui_clashmeta.yaml\nsed -i \"/#_3/ i\\\\    - $tag\" /usr/local/x-ui/bin/xui_clashmeta.yaml\nsed -i \"/\\/\\/_0/r /usr/local/x-ui/bin/sb${i}.log\" /usr/local/x-ui/bin/xui_singbox.json\nsed -i \"/\\/\\/_1/ i\\\\ \\\"$tag\\\",\" /usr/local/x-ui/bin/xui_singbox.json\nsed -i \"/\\/\\/_2/ i\\\\ \\\"$tag\\\",\" /usr/local/x-ui/bin/xui_singbox.json\n}\n\ntag_count=$(jq '.inbounds | map(select(.protocol == \"vless\" or .protocol == \"vmess\" or .protocol == \"trojan\" or .protocol == \"shadowsocks\")) | length' /usr/local/x-ui/bin/config.json)\nfor ((i=0; i<tag_count; i++))\ndo\njq -c \".inbounds | map(select(.protocol == \\\"vless\\\" or .protocol == \\\"vmess\\\" or .protocol == \\\"trojan\\\" or .protocol == \\\"shadowsocks\\\"))[$i]\" /usr/local/x-ui/bin/config.json > \"/usr/local/x-ui/bin/$((i+1)).log\"\ndone\nrm -rf /usr/local/x-ui/bin/ty.txt\nxip1=$(cat /usr/local/x-ui/xip 2>/dev/null | sed -n 1p)\nymip=$(cat /root/ygkkkca/ca.log 2>/dev/null)\ndirectory=\"/usr/local/x-ui/bin/\"\nfor i in $(seq 1 $tag_count); do\nfile=\"${directory}${i}.log\"\nif [ -f \"$file\" ]; then\n#vless-reality-vision\nif grep -q \"vless\" \"$file\" && grep -q \"reality\" \"$file\" && grep -q \"vision\" \"$file\"; then\nfinger=$(jq -r '.streamSettings.realitySettings.fingerprint' /usr/local/x-ui/bin/${i}.log)\nvl_name=$(jq -r '.streamSettings.realitySettings.serverNames[0]' /usr/local/x-ui/bin/${i}.log)\npublic_key=$(jq -r '.streamSettings.realitySettings.publicKey' /usr/local/x-ui/bin/${i}.log)\nshort_id=$(jq -r '.streamSettings.realitySettings.shortIds[0]' /usr/local/x-ui/bin/${i}.log)\nuuid=$(jq -r '.settings.clients[0].id' /usr/local/x-ui/bin/${i}.log)\nvl_port=$(jq -r '.port' /usr/local/x-ui/bin/${i}.log)\ntag=$vl_port-vless-reality-vision\ncat > /usr/local/x-ui/bin/sb${i}.log <<EOF\n\n {\n      \"type\": \"vless\",\n      \"tag\": \"$tag\",\n      \"server\": \"$xip1\",\n      \"server_port\": $vl_port,\n      \"uuid\": \"$uuid\",\n      \"packet_encoding\": \"xudp\",\n      \"flow\": \"xtls-rprx-vision\",\n      \"tls\": {\n        \"enabled\": true,\n        \"server_name\": \"$vl_name\",\n        \"utls\": {\n          \"enabled\": true,\n          \"fingerprint\": \"$finger\"\n        },\n      \"reality\": {\n          \"enabled\": true,\n          \"public_key\": \"$public_key\",\n          \"short_id\": \"$short_id\"\n        }\n      }\n    },\nEOF\n\ncat > /usr/local/x-ui/bin/cl${i}.log <<EOF\n\n- name: $tag               \n  type: vless\n  server: $xip1                           \n  port: $vl_port                                \n  uuid: $uuid   \n  network: tcp\n  udp: true\n  tls: true\n  flow: xtls-rprx-vision\n  servername: $vl_name                 \n  reality-opts: \n    public-key: $public_key    \n    short-id: $short_id                      \n  client-fingerprint: $finger   \n\nEOF\necho \"vless://$uuid@$xip1:$vl_port?type=tcp&security=reality&sni=$vl_name&pbk=$public_key&flow=xtls-rprx-vision&sid=$short_id&fp=$finger#$tag\" >>/usr/local/x-ui/bin/ty.txt\nxui_sb_cl\n\n#vless-tcp-vision\nelif grep -q \"vless\" \"$file\" && grep -q \"vision\" \"$file\" && grep -q \"keyFile\" \"$file\"; then\n[[ -n $ymip ]] && servip=$ymip || servip=$xip1\nuuid=$(jq -r '.settings.clients[0].id' /usr/local/x-ui/bin/${i}.log)\nvl_port=$(jq -r '.port' /usr/local/x-ui/bin/${i}.log)\ntag=$vl_port-vless-tcp-vision\ncat > /usr/local/x-ui/bin/sb${i}.log <<EOF\n\n{\n            \"server\": \"$servip\",\n            \"server_port\": $vl_port,\n            \"tag\": \"$tag\",\n            \"tls\": {\n                \"enabled\": true,\n                \"insecure\": false\n            },\n            \"type\": \"vless\",\n            \"flow\": \"xtls-rprx-vision\",\n            \"uuid\": \"$uuid\"\n        },\nEOF\n\ncat > /usr/local/x-ui/bin/cl${i}.log <<EOF\n\n- name: $tag           \n  type: vless\n  server: $servip                     \n  port: $vl_port                                  \n  uuid: $uuid  \n  network: tcp\n  tls: true\n  udp: true\n  flow: xtls-rprx-vision\n\n\nEOF\necho \"vless://$uuid@$servip:$vl_port?type=tcp&security=tls&flow=xtls-rprx-vision#$tag\" >>/usr/local/x-ui/bin/ty.txt\nxui_sb_cl\n\n#vless-ws\nelif grep -q \"vless\" \"$file\" && grep -q \"ws\" \"$file\" && ! grep -qw \"{}}}\" \"$file\"; then\nws_path=$(jq -r '.streamSettings.wsSettings.path' /usr/local/x-ui/bin/${i}.log)\ntls=$(jq -r '.streamSettings.security' /usr/local/x-ui/bin/${i}.log)\nvl_port=$(jq -r '.port' /usr/local/x-ui/bin/${i}.log)\nif [[ $tls == 'tls' ]]; then\ntls=true \ntlsw=tls\nelse\ntls=false \ntlsw=''\nfi\nif ! [[ \"$vl_port\" =~ ^(2052|2082|2086|2095|80|8880|8080|2053|2083|2087|2096|8443|443)$ ]] && [[ -s /usr/local/x-ui/bin/xuicdnip_ws.txt ]]; then\nservip=$(cat /usr/local/x-ui/bin/xuicdnip_ws.txt 2>/dev/null)\nif [[ $(jq -r '.streamSettings.security' /usr/local/x-ui/bin/${i}.log) == 'tls' ]]; then\nvl_port=8443\ntag=$(jq -r '.port' /usr/local/x-ui/bin/${i}.log)-回源-vless-ws-tls\nelse\nvl_port=8880\ntag=$(jq -r '.port' /usr/local/x-ui/bin/${i}.log)-回源-vless-ws\nfi\nelif [[ \"$vl_port\" =~ ^(2052|2082|2086|2095|80|8880|8080|2053|2083|2087|2096|8443|443)$ ]] && [[ -s /usr/local/x-ui/bin/xuicdnip_ws.txt ]]; then\nservip=$(cat /usr/local/x-ui/bin/xuicdnip_ws.txt 2>/dev/null)\n[[ $(jq -r '.streamSettings.security' /usr/local/x-ui/bin/${i}.log) == 'tls' ]] && tag=$(jq -r '.port' /usr/local/x-ui/bin/${i}.log)-vless-ws-tls || tag=$(jq -r '.port' /usr/local/x-ui/bin/${i}.log)-vless-ws\nelse\n[[ -n $ymip ]] && servip=$ymip || servip=$xip1\n[[ $(jq -r '.streamSettings.security' /usr/local/x-ui/bin/${i}.log) == 'tls' ]] && tag=$(jq -r '.port' /usr/local/x-ui/bin/${i}.log)-vless-ws-tls || tag=$(jq -r '.port' /usr/local/x-ui/bin/${i}.log)-vless-ws\nfi\nvl_name=$(jq -r '.streamSettings.wsSettings.headers.Host' /usr/local/x-ui/bin/${i}.log)\nuuid=$(jq -r '.settings.clients[0].id' /usr/local/x-ui/bin/${i}.log)\n\n\n\ncat > /usr/local/x-ui/bin/sb${i}.log <<EOF\n\n{\n            \"server\": \"$servip\",\n            \"server_port\": $vl_port,\n            \"tag\": \"$tag\",\n            \"tls\": {\n                \"enabled\": $tls,\n                \"server_name\": \"$vl_name\",\n                \"insecure\": false,\n                \"utls\": {\n                    \"enabled\": true,\n                    \"fingerprint\": \"chrome\"\n                }\n            },\n            \"packet_encoding\": \"packetaddr\",\n            \"transport\": {\n                \"headers\": {\n                    \"Host\": [\n                        \"$vl_name\"\n                    ]\n                },\n                \"path\": \"$ws_path\",\n                \"type\": \"ws\"\n            },\n            \"type\": \"vless\",\n            \"uuid\": \"$uuid\"\n        },\nEOF\n\ncat > /usr/local/x-ui/bin/cl${i}.log <<EOF\n\n- name: $tag                         \n  type: vless\n  server: $servip                       \n  port: $vl_port                                     \n  uuid: $uuid     \n  udp: true\n  tls: $tls\n  network: ws\n  servername: $vl_name                    \n  ws-opts:\n    path: \"$ws_path\"                             \n    headers:\n      Host: $vl_name \n\nEOF\necho \"vless://$uuid@$servip:$vl_port?type=ws&security=$tlsw&sni=$vl_name&path=$ws_path&host=$vl_name#$tag\" >>/usr/local/x-ui/bin/ty.txt\nxui_sb_cl\n\n#vmess-ws\nelif grep -q \"vmess\" \"$file\" && grep -q \"ws\" \"$file\" && ! grep -qw \"{}}}\" \"$file\"; then\nws_path=$(jq -r '.streamSettings.wsSettings.path' /usr/local/x-ui/bin/${i}.log)\nvm_port=$(jq -r '.port' /usr/local/x-ui/bin/${i}.log)\ntls=$(jq -r '.streamSettings.security' /usr/local/x-ui/bin/${i}.log)\nif [[ $tls == 'tls' ]]; then\ntls=true \ntlsw=tls\nelse\ntls=false \ntlsw=''\nfi\nif ! [[ \"$vm_port\" =~ ^(2052|2082|2086|2095|80|8880|8080|2053|2083|2087|2096|8443|443)$ ]] && [[ -s /usr/local/x-ui/bin/xuicdnip_ws.txt ]]; then\nservip=$(cat /usr/local/x-ui/bin/xuicdnip_ws.txt 2>/dev/null)\nif [[ $(jq -r '.streamSettings.security' /usr/local/x-ui/bin/${i}.log) == 'tls' ]]; then\nvm_port=8443\ntag=$(jq -r '.port' /usr/local/x-ui/bin/${i}.log)-回源-vmess-ws-tls\nelse\nvm_port=8880\ntag=$(jq -r '.port' /usr/local/x-ui/bin/${i}.log)-回源-vmess-ws\nfi\nelif [[ \"$vm_port\" =~ ^(2052|2082|2086|2095|80|8880|8080|2053|2083|2087|2096|8443|443)$ ]] && [[ -s /usr/local/x-ui/bin/xuicdnip_ws.txt ]]; then\nservip=$(cat /usr/local/x-ui/bin/xuicdnip_ws.txt 2>/dev/null)\n[[ $(jq -r '.streamSettings.security' /usr/local/x-ui/bin/${i}.log) == 'tls' ]] && tag=$(jq -r '.port' /usr/local/x-ui/bin/${i}.log)-vmess-ws-tls || tag=$(jq -r '.port' /usr/local/x-ui/bin/${i}.log)-vmess-ws\nelse\n[[ -n $ymip ]] && servip=$ymip || servip=$xip1\n[[ $(jq -r '.streamSettings.security' /usr/local/x-ui/bin/${i}.log) == 'tls' ]] && tag=$(jq -r '.port' /usr/local/x-ui/bin/${i}.log)-vmess-ws-tls || tag=$(jq -r '.port' /usr/local/x-ui/bin/${i}.log)-vmess-ws\nfi\nvm_name=$(jq -r '.streamSettings.wsSettings.headers.Host' /usr/local/x-ui/bin/${i}.log)\nuuid=$(jq -r '.settings.clients[0].id' /usr/local/x-ui/bin/${i}.log)\ncat > /usr/local/x-ui/bin/sb${i}.log <<EOF\n\n{\n            \"server\": \"$servip\",\n            \"server_port\": $vm_port,\n            \"tag\": \"$tag\",\n            \"tls\": {\n                \"enabled\": $tls,\n                \"server_name\": \"$vm_name\",\n                \"insecure\": false,\n                \"utls\": {\n                    \"enabled\": true,\n                    \"fingerprint\": \"chrome\"\n                }\n            },\n            \"packet_encoding\": \"packetaddr\",\n            \"transport\": {\n                \"headers\": {\n                    \"Host\": [\n                        \"$vm_name\"\n                    ]\n                },\n                \"path\": \"$ws_path\",\n                \"type\": \"ws\"\n            },\n            \"type\": \"vmess\",\n            \"security\": \"auto\",\n            \"uuid\": \"$uuid\"\n        },\nEOF\n\ncat > /usr/local/x-ui/bin/cl${i}.log <<EOF\n\n- name: $tag                         \n  type: vmess\n  server: $servip                        \n  port: $vm_port                                     \n  uuid: $uuid       \n  alterId: 0\n  cipher: auto\n  udp: true\n  tls: $tls\n  network: ws\n  servername: $vm_name                    \n  ws-opts:\n    path: \"$ws_path\"                             \n    headers:\n      Host: $vm_name\n\nEOF\necho -e \"vmess://$(echo '{\"add\":\"'$servip'\",\"aid\":\"0\",\"host\":\"'$vm_name'\",\"id\":\"'$uuid'\",\"net\":\"ws\",\"path\":\"'$ws_path'\",\"port\":\"'$vm_port'\",\"ps\":\"'$tag'\",\"tls\":\"'$tlsw'\",\"sni\":\"'$vm_name'\",\"type\":\"none\",\"v\":\"2\"}' | base64 -w 0)\" >>/usr/local/x-ui/bin/ty.txt\nxui_sb_cl\n\n#vmess-tcp\nelif grep -q \"vmess\" \"$file\" && grep -q \"tcp\" \"$file\"; then\n[[ -n $ymip ]] && servip=$ymip || servip=$xip1\ntls=$(jq -r '.streamSettings.security' /usr/local/x-ui/bin/${i}.log)\nif [[ $tls == 'tls' ]]; then\ntls=true \ntlst=tls\nelse\ntls=false \ntlst=''\nfi\nuuid=$(jq -r '.settings.clients[0].id' /usr/local/x-ui/bin/${i}.log)\nvm_port=$(jq -r '.port' /usr/local/x-ui/bin/${i}.log)\ntag=$vm_port-vmess-tcp\ncat > /usr/local/x-ui/bin/sb${i}.log <<EOF\n\n{\n            \"server\": \"$servip\",\n            \"server_port\": $vm_port,\n            \"tag\": \"$tag\",\n            \"tls\": {\n                \"enabled\": $tls,\n                \"insecure\": false,\n                \"utls\": {\n                    \"enabled\": true,\n                    \"fingerprint\": \"chrome\"\n                }\n            },\n            \"packet_encoding\": \"packetaddr\",\n            \"type\": \"vmess\",\n            \"security\": \"auto\",\n            \"uuid\": \"$uuid\"\n        },\nEOF\n\ncat > /usr/local/x-ui/bin/cl${i}.log <<EOF\n\n- name: $tag                         \n  type: vmess\n  server: $servip                        \n  port: $vm_port                                     \n  uuid: $uuid       \n  alterId: 0\n  cipher: auto\n  udp: true\n  tls: $tls\n\nEOF\necho -e \"vmess://$(echo '{\"add\":\"'$servip'\",\"aid\":\"0\",\"id\":\"'$uuid'\",\"net\":\"tcp\",\"port\":\"'$vm_port'\",\"ps\":\"'$tag'\",\"tls\":\"'$tlst'\",\"type\":\"none\",\"v\":\"2\"}' | base64 -w 0)\" >>/usr/local/x-ui/bin/ty.txt\nxui_sb_cl\n\n#vless-tcp\nelif grep -q \"vless\" \"$file\" && grep -q \"tcp\" \"$file\"; then\n[[ -n $ymip ]] && servip=$ymip || servip=$xip1\ntls=$(jq -r '.streamSettings.security' /usr/local/x-ui/bin/${i}.log)\nif [[ $tls == 'tls' ]]; then\ntls=true \ntlst=tls\nelse\ntls=false \ntlst=''\nfi\nuuid=$(jq -r '.settings.clients[0].id' /usr/local/x-ui/bin/${i}.log)\nvl_port=$(jq -r '.port' /usr/local/x-ui/bin/${i}.log)\ntag=$vl_port-vless-tcp\ncat > /usr/local/x-ui/bin/sb${i}.log <<EOF\n\n{\n            \"server\": \"$servip\",\n            \"server_port\": $vl_port,\n            \"tag\": \"$tag\",\n            \"tls\": {\n                \"enabled\": $tls,\n                \"insecure\": false,\n                \"utls\": {\n                    \"enabled\": true,\n                    \"fingerprint\": \"chrome\"\n                }\n            },\n            \"packet_encoding\": \"packetaddr\",\n            \"type\": \"vless\",\n            \"uuid\": \"$uuid\"\n        },\nEOF\n\ncat > /usr/local/x-ui/bin/cl${i}.log <<EOF\n\n- name: $tag                         \n  type: vless\n  server: $servip                       \n  port: $vl_port                                     \n  uuid: $uuid     \n  udp: true\n  tls: $tls\n\nEOF\necho \"vless://$uuid@$servip:$vl_port?type=tcp&security=$tlst#$tag\" >>/usr/local/x-ui/bin/ty.txt\nxui_sb_cl\n\n#trojan-tcp-tls\nelif grep -q \"trojan\" \"$file\" && grep -q \"tcp\" \"$file\" && grep -q \"keyFile\" \"$file\"; then\n[[ -n $ymip ]] && servip=$ymip || servip=$xip1\npassword=$(jq -r '.settings.clients[0].password' /usr/local/x-ui/bin/${i}.log)\nvl_port=$(jq -r '.port' /usr/local/x-ui/bin/${i}.log)\ntag=$vl_port-trojan-tcp-tls\ncat > /usr/local/x-ui/bin/sb${i}.log <<EOF\n\n{\n            \"server\": \"$servip\",\n            \"server_port\": $vl_port,\n            \"tag\": \"$tag\",\n            \"tls\": {\n                \"enabled\": true,\n                \"insecure\": false\n            },\n            \"type\": \"trojan\",\n            \"password\": \"$password\"\n        },\nEOF\n\ncat > /usr/local/x-ui/bin/cl${i}.log <<EOF\n\n- name: $tag                         \n  type: trojan\n  server: $servip                       \n  port: $vl_port                                     \n  password: $password    \n  udp: true\n  sni: $servip\n  skip-cert-verify: false\n\nEOF\necho \"trojan://$password@$servip:$vl_port?security=tls&type=tcp#$tag\" >>/usr/local/x-ui/bin/ty.txt\nxui_sb_cl\n\n#trojan-ws-tls\nelif grep -q \"trojan\" \"$file\" && grep -q \"ws\" \"$file\" && grep -q \"keyFile\" \"$file\"; then\nws_path=$(jq -r '.streamSettings.wsSettings.path' /usr/local/x-ui/bin/${i}.log)\nvm_name=$(jq -r '.streamSettings.wsSettings.headers.Host' /usr/local/x-ui/bin/${i}.log)\n[[ -n $ymip ]] && servip=$ymip || servip=$xip1\ntls=$(jq -r '.streamSettings.security' /usr/local/x-ui/bin/${i}.log)\n[[ $tls == 'tls' ]] && tls=true || tls=false\npassword=$(jq -r '.settings.clients[0].password' /usr/local/x-ui/bin/${i}.log)\nvl_port=$(jq -r '.port' /usr/local/x-ui/bin/${i}.log)\ntag=$vl_port-trojan-ws-tls\ncat > /usr/local/x-ui/bin/sb${i}.log <<EOF\n\n{\n            \"server\": \"$servip\",\n            \"server_port\": $vl_port,\n            \"tag\": \"$tag\",\n            \"tls\": {\n                \"enabled\": $tls,\n                \"insecure\": false\n            },\n            \"transport\": {\n                \"headers\": {\n                    \"Host\": [\n                        \"$vm_name\"\n                    ]\n                },\n                \"path\": \"$ws_path\",\n                \"type\": \"ws\"\n            },\n            \"type\": \"trojan\",\n            \"password\": \"$password\"\n        },\nEOF\n\ncat > /usr/local/x-ui/bin/cl${i}.log <<EOF\n\n- name: $tag                         \n  type: trojan\n  server: $servip                       \n  port: $vl_port                                     \n  password: $password    \n  udp: true\n  sni: $servip\n  skip-cert-verify: false\n  network: ws                 \n  ws-opts:\n    path: \"$ws_path\"                             \n    headers:\n      Host: $vm_name\n\nEOF\necho \"trojan://$password@$servip:$vl_port?security=tls&type=ws&path=$ws_path&host=$vm_name#$tag\" >>/usr/local/x-ui/bin/ty.txt\nxui_sb_cl\n\n#shadowsocks-tcp\nelif grep -q \"shadowsocks\" \"$file\" && grep -q \"tcp\" \"$file\"; then\n[[ -n $ymip ]] && servip=$ymip || servip=$xip1\npassword=$(jq -r '.settings.password' /usr/local/x-ui/bin/${i}.log)\nvm_port=$(jq -r '.port' /usr/local/x-ui/bin/${i}.log)\nssmethod=$(jq -r '.settings.method' /usr/local/x-ui/bin/${i}.log)\ntag=$vm_port-ss-tcp\ncat > /usr/local/x-ui/bin/sb${i}.log <<EOF\n\n{\n      \"type\": \"shadowsocks\",\n      \"tag\": \"$tag\",\n      \"server\": \"$servip\",\n      \"server_port\": $vm_port,\n      \"method\": \"$ssmethod\",\n      \"password\": \"$password\"\n},\nEOF\n\ncat > /usr/local/x-ui/bin/cl${i}.log <<EOF\n\n- name: $tag                         \n  type: ss\n  server: $servip                        \n  port: $vm_port                                     \n  password: $password\n  cipher: $ssmethod\n  udp: true\n\nEOF\necho -e \"ss://$ssmethod:$password@$servip:$vm_port#$tag\" >>/usr/local/x-ui/bin/ty.txt\nxui_sb_cl\nfi\nelse\nred \"当前x-ui未设置有效的节点配置\" && exit\nfi\ndone\n\nargopid\nargoprotocol=$(jq -r --arg port \"$(cat /usr/local/x-ui/xuiargoport.log 2>/dev/null)\" '.inbounds[] | select(.port == ($port | tonumber)) | .protocol' /usr/local/x-ui/bin/config.json 2>/dev/null)\nuuid=$(jq -r --arg port \"$(cat /usr/local/x-ui/xuiargoport.log 2>/dev/null)\" '.inbounds[] | select(.port == ($port | tonumber)) | .settings.clients[0].id' /usr/local/x-ui/bin/config.json 2>/dev/null)\nws_path=$(jq -r --arg port \"$(cat /usr/local/x-ui/xuiargoport.log 2>/dev/null)\" '.inbounds[] | select(.port == ($port | tonumber)) | .streamSettings.wsSettings.path' /usr/local/x-ui/bin/config.json 2>/dev/null)\nargotls=$(jq -r --arg port \"$(cat /usr/local/x-ui/xuiargoport.log 2>/dev/null)\" '.inbounds[] | select(.port == ($port | tonumber)) | .streamSettings.security' /usr/local/x-ui/bin/config.json 2>/dev/null)\nargolsym=$(cat /usr/local/x-ui/argo.log 2>/dev/null | grep -a trycloudflare.com | awk 'NR==2{print}' | awk -F// '{print $2}' | awk '{print $1}')\nif [[ -n $(ps -e | grep -w $ls 2>/dev/null) ]] && [[ -f /usr/local/x-ui/xuiargoport.log ]] && [[ $argoprotocol =~ vless|vmess ]] && [[ ! \"$argotls\" = \"tls\" ]]; then\nif [[ $argoprotocol = vless ]]; then\n#vless-ws-tls-argo临时\ncat > /usr/local/x-ui/bin/sbvltargo.log <<EOF\n\n{\n            \"server\": \"$cdnargo\",\n            \"server_port\": 8443,\n            \"tag\": \"vl-tls-argo临时-8443\",\n            \"tls\": {\n                \"enabled\": true,\n                \"server_name\": \"$argolsym\",\n                \"insecure\": false,\n                \"utls\": {\n                    \"enabled\": true,\n                    \"fingerprint\": \"chrome\"\n                }\n            },\n            \"packet_encoding\": \"packetaddr\",\n            \"transport\": {\n                \"headers\": {\n                    \"Host\": [\n                        \"$argolsym\"\n                    ]\n                },\n                \"path\": \"$ws_path\",\n                \"type\": \"ws\"\n            },\n            \"type\": \"vless\",\n            \"uuid\": \"$uuid\"\n        },\nEOF\n\ncat > /usr/local/x-ui/bin/clvltargo.log <<EOF\n\n- name: vl-tls-argo临时-8443                         \n  type: vless\n  server: $cdnargo                       \n  port: 8443                                     \n  uuid: $uuid     \n  udp: true\n  tls: true\n  network: ws\n  servername: $argolsym                    \n  ws-opts:\n    path: \"$ws_path\"                             \n    headers:\n      Host: $argolsym \n\nEOF\n\n#vless-ws-argo临时\ncat > /usr/local/x-ui/bin/sbvlargo.log <<EOF\n\n{\n            \"server\": \"$cdnargo\",\n            \"server_port\": 8880,\n            \"tag\": \"vl-argo临时-8880\",\n            \"tls\": {\n                \"enabled\": false,\n                \"server_name\": \"$argolsym\",\n                \"insecure\": false,\n                \"utls\": {\n                    \"enabled\": true,\n                    \"fingerprint\": \"chrome\"\n                }\n            },\n            \"packet_encoding\": \"packetaddr\",\n            \"transport\": {\n                \"headers\": {\n                    \"Host\": [\n                        \"$argolsym\"\n                    ]\n                },\n                \"path\": \"$ws_path\",\n                \"type\": \"ws\"\n            },\n            \"type\": \"vless\",\n            \"uuid\": \"$uuid\"\n        },\nEOF\n\ncat > /usr/local/x-ui/bin/clvlargo.log <<EOF\n\n- name: vl-argo临时-8880                         \n  type: vless\n  server: $cdnargo                       \n  port: 8880                                     \n  uuid: $uuid     \n  udp: true\n  tls: false\n  network: ws\n  servername: $argolsym                    \n  ws-opts:\n    path: \"$ws_path\"                             \n    headers:\n      Host: $argolsym \n\nEOF\nsed -i \"/#_0/r /usr/local/x-ui/bin/clvltargo.log\" /usr/local/x-ui/bin/xui_clashmeta.yaml\nsed -i \"/#_1/ i\\\\    - vl-tls-argo临时-8443\" /usr/local/x-ui/bin/xui_clashmeta.yaml\nsed -i \"/#_2/ i\\\\    - vl-tls-argo临时-8443\" /usr/local/x-ui/bin/xui_clashmeta.yaml\nsed -i \"/#_3/ i\\\\    - vl-tls-argo临时-8443\" /usr/local/x-ui/bin/xui_clashmeta.yaml\nsed -i \"/#_0/r /usr/local/x-ui/bin/clvlargo.log\" /usr/local/x-ui/bin/xui_clashmeta.yaml\nsed -i \"/#_1/ i\\\\    - vl-argo临时-8880\" /usr/local/x-ui/bin/xui_clashmeta.yaml\nsed -i \"/#_2/ i\\\\    - vl-argo临时-8880\" /usr/local/x-ui/bin/xui_clashmeta.yaml\nsed -i \"/#_3/ i\\\\    - vl-argo临时-8880\" /usr/local/x-ui/bin/xui_clashmeta.yaml\nsed -i \"/\\/\\/_0/r /usr/local/x-ui/bin/sbvltargo.log\" /usr/local/x-ui/bin/xui_singbox.json\nsed -i \"/\\/\\/_1/ i\\\\ \\\"vl-tls-argo临时-8443\\\",\" /usr/local/x-ui/bin/xui_singbox.json\nsed -i \"/\\/\\/_2/ i\\\\ \\\"vl-tls-argo临时-8443\\\",\" /usr/local/x-ui/bin/xui_singbox.json\nsed -i \"/\\/\\/_0/r /usr/local/x-ui/bin/sbvlargo.log\" /usr/local/x-ui/bin/xui_singbox.json\nsed -i \"/\\/\\/_1/ i\\\\ \\\"vl-argo临时-8880\\\",\" /usr/local/x-ui/bin/xui_singbox.json\nsed -i \"/\\/\\/_2/ i\\\\ \\\"vl-argo临时-8880\\\",\" /usr/local/x-ui/bin/xui_singbox.json\necho \"vless://$uuid@$cdnargo:8880?type=ws&security=none&path=$ws_path&host=$argolsym#vl-argo临时-8880\" >>/usr/local/x-ui/bin/ty.txt\necho \"vless://$uuid@$cdnargo:8443?type=ws&security=tls&path=$ws_path&host=$argolsym#vl-tls-argo临时-8443\" >>/usr/local/x-ui/bin/ty.txt\n\nelif [[ $argoprotocol = vmess ]]; then\n#vmess-ws-tls-argo临时\ncat > /usr/local/x-ui/bin/sbvmtargo.log <<EOF\n\n{\n            \"server\": \"$cdnargo\",\n            \"server_port\": 8443,\n            \"tag\": \"vm-tls-argo临时-8443\",\n            \"tls\": {\n                \"enabled\": true,\n                \"server_name\": \"$argolsym\",\n                \"insecure\": false,\n                \"utls\": {\n                    \"enabled\": true,\n                    \"fingerprint\": \"chrome\"\n                }\n            },\n            \"packet_encoding\": \"packetaddr\",\n            \"transport\": {\n                \"headers\": {\n                    \"Host\": [\n                        \"$argolsym\"\n                    ]\n                },\n                \"path\": \"$ws_path\",\n                \"type\": \"ws\"\n            },\n            \"type\": \"vmess\",\n            \"security\": \"auto\",\n            \"uuid\": \"$uuid\"\n        },\nEOF\n\ncat > /usr/local/x-ui/bin/clvmtargo.log <<EOF\n\n- name: vm-tls-argo临时-8443                        \n  type: vmess\n  server: $cdnargo                        \n  port: 8443                                     \n  uuid: $uuid       \n  alterId: 0\n  cipher: auto\n  udp: true\n  tls: true\n  network: ws\n  servername: $argolsym                    \n  ws-opts:\n    path: \"$ws_path\"                             \n    headers:\n      Host: $argolsym\n\nEOF\n\n#vmess-ws-argo临时\ncat > /usr/local/x-ui/bin/sbvmargo.log <<EOF\n\n{\n            \"server\": \"$cdnargo\",\n            \"server_port\": 8880,\n            \"tag\": \"vm-argo临时-8880\",\n            \"tls\": {\n                \"enabled\": false,\n                \"server_name\": \"$argolsym\",\n                \"insecure\": false,\n                \"utls\": {\n                    \"enabled\": true,\n                    \"fingerprint\": \"chrome\"\n                }\n            },\n            \"packet_encoding\": \"packetaddr\",\n            \"transport\": {\n                \"headers\": {\n                    \"Host\": [\n                        \"$argolsym\"\n                    ]\n                },\n                \"path\": \"$ws_path\",\n                \"type\": \"ws\"\n            },\n            \"type\": \"vmess\",\n            \"security\": \"auto\",\n            \"uuid\": \"$uuid\"\n        },\nEOF\n\ncat > /usr/local/x-ui/bin/clvmargo.log <<EOF\n\n- name: vm-argo临时-8880                         \n  type: vmess\n  server: $cdnargo                       \n  port: 8880                                     \n  uuid: $uuid       \n  alterId: 0\n  cipher: auto\n  udp: true\n  tls: false\n  network: ws\n  servername: $argolsym                    \n  ws-opts:\n    path: \"$ws_path\"                             \n    headers:\n      Host: $argolsym\n\nEOF\nsed -i \"/#_0/r /usr/local/x-ui/bin/clvmtargo.log\" /usr/local/x-ui/bin/xui_clashmeta.yaml\nsed -i \"/#_1/ i\\\\    - vm-tls-argo临时-8443\" /usr/local/x-ui/bin/xui_clashmeta.yaml\nsed -i \"/#_2/ i\\\\    - vm-tls-argo临时-8443\" /usr/local/x-ui/bin/xui_clashmeta.yaml\nsed -i \"/#_3/ i\\\\    - vm-tls-argo临时-8443\" /usr/local/x-ui/bin/xui_clashmeta.yaml\nsed -i \"/#_0/r /usr/local/x-ui/bin/clvmargo.log\" /usr/local/x-ui/bin/xui_clashmeta.yaml\nsed -i \"/#_1/ i\\\\    - vm-argo临时-8880\" /usr/local/x-ui/bin/xui_clashmeta.yaml\nsed -i \"/#_2/ i\\\\    - vm-argo临时-8880\" /usr/local/x-ui/bin/xui_clashmeta.yaml\nsed -i \"/#_3/ i\\\\    - vm-argo临时-8880\" /usr/local/x-ui/bin/xui_clashmeta.yaml\nsed -i \"/\\/\\/_0/r /usr/local/x-ui/bin/sbvmtargo.log\" /usr/local/x-ui/bin/xui_singbox.json\nsed -i \"/\\/\\/_1/ i\\\\ \\\"vm-tls-argo临时-8443\\\",\" /usr/local/x-ui/bin/xui_singbox.json\nsed -i \"/\\/\\/_2/ i\\\\ \\\"vm-tls-argo临时-8443\\\",\" /usr/local/x-ui/bin/xui_singbox.json\nsed -i \"/\\/\\/_0/r /usr/local/x-ui/bin/sbvmargo.log\" /usr/local/x-ui/bin/xui_singbox.json\nsed -i \"/\\/\\/_1/ i\\\\ \\\"vm-argo临时-8880\\\",\" /usr/local/x-ui/bin/xui_singbox.json\nsed -i \"/\\/\\/_2/ i\\\\ \\\"vm-argo临时-8880\\\",\" /usr/local/x-ui/bin/xui_singbox.json\necho -e \"vmess://$(echo '{\"add\":\"'$cdnargo'\",\"aid\":\"0\",\"host\":\"'$argolsym'\",\"id\":\"'$uuid'\",\"net\":\"ws\",\"path\":\"'$ws_path'\",\"port\":\"8880\",\"ps\":\"vm-argo临时-8880\",\"v\":\"2\"}' | base64 -w 0)\" >>/usr/local/x-ui/bin/ty.txt\necho -e \"vmess://$(echo '{\"add\":\"'$cdnargo'\",\"aid\":\"0\",\"host\":\"'$argolsym'\",\"id\":\"'$uuid'\",\"net\":\"ws\",\"path\":\"'$ws_path'\",\"port\":\"8443\",\"ps\":\"vm-tls-argo临时-8443\",\"tls\":\"tls\",\"sni\":\"'$argolsym'\",\"type\":\"none\",\"v\":\"2\"}' | base64 -w 0)\" >>/usr/local/x-ui/bin/ty.txt\nfi\nfi\n\nargoprotocol=$(jq -r --arg port \"$(cat /usr/local/x-ui/xuiargoymport.log 2>/dev/null)\" '.inbounds[] | select(.port == ($port | tonumber)) | .protocol' /usr/local/x-ui/bin/config.json 2>/dev/null)\nuuid=$(jq -r --arg port \"$(cat /usr/local/x-ui/xuiargoymport.log 2>/dev/null)\" '.inbounds[] | select(.port == ($port | tonumber)) | .settings.clients[0].id' /usr/local/x-ui/bin/config.json 2>/dev/null)\nws_path=$(jq -r --arg port \"$(cat /usr/local/x-ui/xuiargoymport.log 2>/dev/null)\" '.inbounds[] | select(.port == ($port | tonumber)) | .streamSettings.wsSettings.path' /usr/local/x-ui/bin/config.json 2>/dev/null)\nargotls=$(jq -r --arg port \"$(cat /usr/local/x-ui/xuiargoymport.log 2>/dev/null)\" '.inbounds[] | select(.port == ($port | tonumber)) | .streamSettings.security' /usr/local/x-ui/bin/config.json 2>/dev/null)\nargoym=$(cat /usr/local/x-ui/xuiargoym.log 2>/dev/null)\nif [[ -n $(ps -e | grep -w $ym 2>/dev/null) ]] && [[ -f /usr/local/x-ui/xuiargoymport.log ]] && [[ $argoprotocol =~ vless|vmess ]] && [[ ! \"$argotls\" = \"tls\" ]]; then\nif [[ $argoprotocol = vless ]]; then\n#vless-ws-tls-argo固定\ncat > /usr/local/x-ui/bin/sbvltargoym.log <<EOF\n\n{\n            \"server\": \"$cdnargo\",\n            \"server_port\": 8443,\n            \"tag\": \"vl-tls-argo固定-8443\",\n            \"tls\": {\n                \"enabled\": true,\n                \"server_name\": \"$argoym\",\n                \"insecure\": false,\n                \"utls\": {\n                    \"enabled\": true,\n                    \"fingerprint\": \"chrome\"\n                }\n            },\n            \"packet_encoding\": \"packetaddr\",\n            \"transport\": {\n                \"headers\": {\n                    \"Host\": [\n                        \"$argoym\"\n                    ]\n                },\n                \"path\": \"$ws_path\",\n                \"type\": \"ws\"\n            },\n            \"type\": \"vless\",\n            \"uuid\": \"$uuid\"\n        },\nEOF\n\ncat > /usr/local/x-ui/bin/clvltargoym.log <<EOF\n\n- name: vl-tls-argo固定-8443                         \n  type: vless\n  server: $cdnargo                       \n  port: 8443                                     \n  uuid: $uuid     \n  udp: true\n  tls: true\n  network: ws\n  servername: $argoym                    \n  ws-opts:\n    path: \"$ws_path\"                             \n    headers:\n      Host: $argoym \n\nEOF\n\n#vless-ws-argo固定\ncat > /usr/local/x-ui/bin/sbvlargoym.log <<EOF\n\n{\n            \"server\": \"$cdnargo\",\n            \"server_port\": 8880,\n            \"tag\": \"vl-argo固定-8880\",\n            \"tls\": {\n                \"enabled\": false,\n                \"server_name\": \"$argoym\",\n                \"insecure\": false,\n                \"utls\": {\n                    \"enabled\": true,\n                    \"fingerprint\": \"chrome\"\n                }\n            },\n            \"packet_encoding\": \"packetaddr\",\n            \"transport\": {\n                \"headers\": {\n                    \"Host\": [\n                        \"$argoym\"\n                    ]\n                },\n                \"path\": \"$ws_path\",\n                \"type\": \"ws\"\n            },\n            \"type\": \"vless\",\n            \"uuid\": \"$uuid\"\n        },\nEOF\n\ncat > /usr/local/x-ui/bin/clvlargoym.log <<EOF\n\n- name: vl-argo固定-8880                         \n  type: vless\n  server: $cdnargo                       \n  port: 8880                                     \n  uuid: $uuid     \n  udp: true\n  tls: false\n  network: ws\n  servername: $argoym                    \n  ws-opts:\n    path: \"$ws_path\"                             \n    headers:\n      Host: $argoym \n\nEOF\nsed -i \"/#_0/r /usr/local/x-ui/bin/clvltargoym.log\" /usr/local/x-ui/bin/xui_clashmeta.yaml\nsed -i \"/#_1/ i\\\\    - vl-tls-argo固定-8443\" /usr/local/x-ui/bin/xui_clashmeta.yaml\nsed -i \"/#_2/ i\\\\    - vl-tls-argo固定-8443\" /usr/local/x-ui/bin/xui_clashmeta.yaml\nsed -i \"/#_3/ i\\\\    - vl-tls-argo固定-8443\" /usr/local/x-ui/bin/xui_clashmeta.yaml\nsed -i \"/#_0/r /usr/local/x-ui/bin/clvlargoym.log\" /usr/local/x-ui/bin/xui_clashmeta.yaml\nsed -i \"/#_1/ i\\\\    - vl-argo固定-8880\" /usr/local/x-ui/bin/xui_clashmeta.yaml\nsed -i \"/#_2/ i\\\\    - vl-argo固定-8880\" /usr/local/x-ui/bin/xui_clashmeta.yaml\nsed -i \"/#_3/ i\\\\    - vl-argo固定-8880\" /usr/local/x-ui/bin/xui_clashmeta.yaml\nsed -i \"/\\/\\/_0/r /usr/local/x-ui/bin/sbvltargoym.log\" /usr/local/x-ui/bin/xui_singbox.json\nsed -i \"/\\/\\/_1/ i\\\\ \\\"vl-tls-argo固定-8443\\\",\" /usr/local/x-ui/bin/xui_singbox.json\nsed -i \"/\\/\\/_2/ i\\\\ \\\"vl-tls-argo固定-8443\\\",\" /usr/local/x-ui/bin/xui_singbox.json\nsed -i \"/\\/\\/_0/r /usr/local/x-ui/bin/sbvlargoym.log\" /usr/local/x-ui/bin/xui_singbox.json\nsed -i \"/\\/\\/_1/ i\\\\ \\\"vl-argo固定-8880\\\",\" /usr/local/x-ui/bin/xui_singbox.json\nsed -i \"/\\/\\/_2/ i\\\\ \\\"vl-argo固定-8880\\\",\" /usr/local/x-ui/bin/xui_singbox.json\necho \"vless://$uuid@$cdnargo:8880?type=ws&security=none&path=$ws_path&host=$argoym#vl-argo临时-8880\" >>/usr/local/x-ui/bin/ty.txt\necho \"vless://$uuid@$cdnargo:8443?type=ws&security=tls&path=$ws_path&host=$argoym#vl-tls-argo临时-8443\" >>/usr/local/x-ui/bin/ty.txt\n\nelif [[ $argoprotocol = vmess ]]; then\n#vmess-ws-tls-argo固定\ncat > /usr/local/x-ui/bin/sbvmtargoym.log <<EOF\n\n{\n            \"server\": \"$cdnargo\",\n            \"server_port\": 8443,\n            \"tag\": \"vm-tls-argo固定-8443\",\n            \"tls\": {\n                \"enabled\": true,\n                \"server_name\": \"$argoym\",\n                \"insecure\": false,\n                \"utls\": {\n                    \"enabled\": true,\n                    \"fingerprint\": \"chrome\"\n                }\n            },\n            \"packet_encoding\": \"packetaddr\",\n            \"transport\": {\n                \"headers\": {\n                    \"Host\": [\n                        \"$argoym\"\n                    ]\n                },\n                \"path\": \"$ws_path\",\n                \"type\": \"ws\"\n            },\n            \"type\": \"vmess\",\n            \"security\": \"auto\",\n            \"uuid\": \"$uuid\"\n        },\nEOF\n\ncat > /usr/local/x-ui/bin/clvmtargoym.log <<EOF\n\n- name: vm-tls-argo固定-8443                        \n  type: vmess\n  server: $cdnargo                        \n  port: 8443                                     \n  uuid: $uuid       \n  alterId: 0\n  cipher: auto\n  udp: true\n  tls: true\n  network: ws\n  servername: $argoym                    \n  ws-opts:\n    path: \"$ws_path\"                             \n    headers:\n      Host: $argoym\n\nEOF\n\n#vmess-ws-argo固定\ncat > /usr/local/x-ui/bin/sbvmargoym.log <<EOF\n\n{\n            \"server\": \"$cdnargo\",\n            \"server_port\": 8880,\n            \"tag\": \"vm-argo固定-8880\",\n            \"tls\": {\n                \"enabled\": false,\n                \"server_name\": \"$argoym\",\n                \"insecure\": false,\n                \"utls\": {\n                    \"enabled\": true,\n                    \"fingerprint\": \"chrome\"\n                }\n            },\n            \"packet_encoding\": \"packetaddr\",\n            \"transport\": {\n                \"headers\": {\n                    \"Host\": [\n                        \"$argoym\"\n                    ]\n                },\n                \"path\": \"$ws_path\",\n                \"type\": \"ws\"\n            },\n            \"type\": \"vmess\",\n            \"security\": \"auto\",\n            \"uuid\": \"$uuid\"\n        },\nEOF\n\ncat > /usr/local/x-ui/bin/clvmargoym.log <<EOF\n\n- name: vm-argo固定-8880                         \n  type: vmess\n  server: $cdnargo                       \n  port: 8880                                     \n  uuid: $uuid       \n  alterId: 0\n  cipher: auto\n  udp: true\n  tls: false\n  network: ws\n  servername: $argoym                    \n  ws-opts:\n    path: \"$ws_path\"                             \n    headers:\n      Host: $argoym\n\nEOF\nsed -i \"/#_0/r /usr/local/x-ui/bin/clvmtargoym.log\" /usr/local/x-ui/bin/xui_clashmeta.yaml\nsed -i \"/#_1/ i\\\\    - vm-tls-argo固定-8443\" /usr/local/x-ui/bin/xui_clashmeta.yaml\nsed -i \"/#_2/ i\\\\    - vm-tls-argo固定-8443\" /usr/local/x-ui/bin/xui_clashmeta.yaml\nsed -i \"/#_3/ i\\\\    - vm-tls-argo固定-8443\" /usr/local/x-ui/bin/xui_clashmeta.yaml\nsed -i \"/#_0/r /usr/local/x-ui/bin/clvmargoym.log\" /usr/local/x-ui/bin/xui_clashmeta.yaml\nsed -i \"/#_1/ i\\\\    - vm-argo固定-8880\" /usr/local/x-ui/bin/xui_clashmeta.yaml\nsed -i \"/#_2/ i\\\\    - vm-argo固定-8880\" /usr/local/x-ui/bin/xui_clashmeta.yaml\nsed -i \"/#_3/ i\\\\    - vm-argo固定-8880\" /usr/local/x-ui/bin/xui_clashmeta.yaml\nsed -i \"/\\/\\/_0/r /usr/local/x-ui/bin/sbvmtargoym.log\" /usr/local/x-ui/bin/xui_singbox.json\nsed -i \"/\\/\\/_1/ i\\\\ \\\"vm-tls-argo固定-8443\\\",\" /usr/local/x-ui/bin/xui_singbox.json\nsed -i \"/\\/\\/_2/ i\\\\ \\\"vm-tls-argo固定-8443\\\",\" /usr/local/x-ui/bin/xui_singbox.json\nsed -i \"/\\/\\/_0/r /usr/local/x-ui/bin/sbvmargoym.log\" /usr/local/x-ui/bin/xui_singbox.json\nsed -i \"/\\/\\/_1/ i\\\\ \\\"vm-argo固定-8880\\\",\" /usr/local/x-ui/bin/xui_singbox.json\nsed -i \"/\\/\\/_2/ i\\\\ \\\"vm-argo固定-8880\\\",\" /usr/local/x-ui/bin/xui_singbox.json\necho -e \"vmess://$(echo '{\"add\":\"'$cdnargo'\",\"aid\":\"0\",\"host\":\"'$argoym'\",\"id\":\"'$uuid'\",\"net\":\"ws\",\"path\":\"'$ws_path'\",\"port\":\"8880\",\"ps\":\"vm-argo固定-8880\",\"v\":\"2\"}' | base64 -w 0)\" >>/usr/local/x-ui/bin/ty.txt\necho -e \"vmess://$(echo '{\"add\":\"'$cdnargo'\",\"aid\":\"0\",\"host\":\"'$argoym'\",\"id\":\"'$uuid'\",\"net\":\"ws\",\"path\":\"'$ws_path'\",\"port\":\"8443\",\"ps\":\"vm-tls-argo固定-8443\",\"tls\":\"tls\",\"sni\":\"'$argoym'\",\"type\":\"none\",\"v\":\"2\"}' | base64 -w 0)\" >>/usr/local/x-ui/bin/ty.txt\nfi\nfi\nline=$(grep -B1 \"//_1\" /usr/local/x-ui/bin/xui_singbox.json | grep -v \"//_1\")\nnew_line=$(echo \"$line\" | sed 's/,//g')\nsed -i \"/^$line$/s/.*/$new_line/g\" /usr/local/x-ui/bin/xui_singbox.json\nsed -i '/\\/\\/_0\\|\\/\\/_1\\|\\/\\/_2/d' /usr/local/x-ui/bin/xui_singbox.json\nsed -i '/#_0\\|#_1\\|#_2\\|#_3/d' /usr/local/x-ui/bin/xui_clashmeta.yaml\nfind /usr/local/x-ui/bin -type f -name \"*.log\" -delete\nurl=$(cat /usr/local/x-ui/bin/ty.txt 2>/dev/null)\nbaseurl=$(echo -e \"$url\" | base64 -w 0)\necho \"$baseurl\" > /usr/local/x-ui/bin/xui_ty.txt\n}\n\ninsxuiwpph(){\nins(){\nif [ ! -e /usr/local/x-ui/xuiwpph ]; then\ncase $(uname -m) in\naarch64) cpu=arm64;;\nx86_64) cpu=amd64;;\nesac\ncurl -L -o /usr/local/x-ui/xuiwpph -# --retry 2 --insecure https://raw.githubusercontent.com/yonggekkk/x-ui-yg/main/xuiwpph_$cpu\nchmod +x /usr/local/x-ui/xuiwpph\nfi\nif [[ -n $(ps -e | grep xuiwpph) ]]; then\nkill -15 $(cat /usr/local/x-ui/xuiwpphid.log 2>/dev/null) >/dev/null 2>&1\nfi\nv4v6\nif [[ -z $v4 ]]; then\nred \"IPV4不存在，确保安装过WARP-IPV4模式\"\nfi \n[[ -n $v6 ]] && sw46=6 || sw46=4\necho\nreadp \"设置WARP-plus-Socks5端口（回车跳过端口默认40000）：\" port\nif [[ -z $port ]]; then\nport=40000\nuntil [[ -z $(ss -tunlp | grep -w udp | awk '{print $5}' | sed 's/.*://g' | grep -w \"$port\") && -z $(ss -tunlp | grep -w tcp | awk '{print $5}' | sed 's/.*://g' | grep -w \"$port\") ]] \ndo\n[[ -n $(ss -tunlp | grep -w udp | awk '{print $5}' | sed 's/.*://g' | grep -w \"$port\") || -n $(ss -tunlp | grep -w tcp | awk '{print $5}' | sed 's/.*://g' | grep -w \"$port\") ]] && yellow \"\\n端口被占用，请重新输入端口\" && readp \"自定义端口:\" port\ndone\nelse\nuntil [[ -z $(ss -tunlp | grep -w udp | awk '{print $5}' | sed 's/.*://g' | grep -w \"$port\") && -z $(ss -tunlp | grep -w tcp | awk '{print $5}' | sed 's/.*://g' | grep -w \"$port\") ]]\ndo\n[[ -n $(ss -tunlp | grep -w udp | awk '{print $5}' | sed 's/.*://g' | grep -w \"$port\") || -n $(ss -tunlp | grep -w tcp | awk '{print $5}' | sed 's/.*://g' | grep -w \"$port\") ]] && yellow \"\\n端口被占用，请重新输入端口\" && readp \"自定义端口:\" port\ndone\nfi\n}\nunins(){\nkill -15 $(cat /usr/local/x-ui/xuiwpphid.log 2>/dev/null) >/dev/null 2>&1\nrm -rf /usr/local/x-ui/xuiwpph.log /usr/local/x-ui/xuiwpphid.log\ncrontab -l > /tmp/crontab.tmp\nsed -i '/xuiwpphid.log/d' /tmp/crontab.tmp\ncrontab /tmp/crontab.tmp\nrm /tmp/crontab.tmp\n}\necho\nyellow \"1：重置启用WARP-plus-Socks5本地Warp代理模式\"\nyellow \"2：重置启用WARP-plus-Socks5多地区Psiphon代理模式\"\nyellow \"3：停止WARP-plus-Socks5代理模式\"\nyellow \"0：返回上层\"\nreadp \"请选择【0-3】：\" menu\nif [ \"$menu\" = \"1\" ]; then\nins\nnohup setsid /usr/local/x-ui/xuiwpph -b 127.0.0.1:$port --gool -$sw46 >/dev/null 2>&1 & echo \"$!\" > /usr/local/x-ui/xuiwpphid.log\ngreen \"申请IP中……请稍等……\" && sleep 20\nresv1=$(curl -s --socks5 localhost:$port icanhazip.com)\nresv2=$(curl -sx socks5h://localhost:$port icanhazip.com)\nif [[ -z $resv1 && -z $resv2 ]]; then\nred \"WARP-plus-Socks5的IP获取失败\" && unins && exit\nelse\necho \"/usr/local/x-ui/xuiwpph -b 127.0.0.1:$port --gool -$sw46 >/dev/null 2>&1\" > /usr/local/x-ui/xuiwpph.log\ncrontab -l > /tmp/crontab.tmp\nsed -i '/xuiwpphid.log/d' /tmp/crontab.tmp\necho '@reboot /bin/bash -c \"nohup setsid $(cat /usr/local/x-ui/xuiwpph.log 2>/dev/null) & pid=\\$! && echo \\$pid > /usr/local/x-ui/xuiwpphid.log\"' >> /tmp/crontab.tmp\ncrontab /tmp/crontab.tmp\nrm /tmp/crontab.tmp\ngreen \"WARP-plus-Socks5的IP获取成功，可进行Socks5代理分流\"\nfi\nelif [ \"$menu\" = \"2\" ]; then\nins\necho '\n奥地利（AT）\n澳大利亚（AU）\n比利时（BE）\n保加利亚（BG）\n加拿大（CA）\n瑞士（CH）\n捷克 (CZ)\n德国（DE）\n丹麦（DK）\n爱沙尼亚（EE）\n西班牙（ES）\n芬兰（FI）\n法国（FR）\n英国（GB）\n克罗地亚（HR）\n匈牙利 (HU)\n爱尔兰（IE）\n印度（IN）\n意大利 (IT)\n日本（JP）\n拉脱维亚（LV）\n荷兰（NL）\n挪威 (NO)\n波兰（PL）\n葡萄牙（PT）\n罗马尼亚 (RO)\n塞尔维亚（RS）\n瑞典（SE）\n新加坡 (SG)\n斯洛伐克（SK）\n美国（US）\n'\nreadp \"可选择国家地区（输入末尾两个大写字母，如美国，则输入US）：\" guojia\nnohup setsid /usr/local/x-ui/xuiwpph -b 127.0.0.1:$port --cfon --country $guojia -$sw46 >/dev/null 2>&1 & echo \"$!\" > /usr/local/x-ui/xuiwpphid.log\ngreen \"申请IP中……请稍等……\" && sleep 20\nresv1=$(curl -s --socks5 localhost:$port icanhazip.com)\nresv2=$(curl -sx socks5h://localhost:$port icanhazip.com)\nif [[ -z $resv1 && -z $resv2 ]]; then\nred \"WARP-plus-Socks5的IP获取失败，尝试换个国家地区吧\" && unins && exit\nelse\necho \"/usr/local/x-ui/xuiwpph -b 127.0.0.1:$port --cfon --country $guojia -$sw46 >/dev/null 2>&1\" > /usr/local/x-ui/xuiwpph.log\ncrontab -l > /tmp/crontab.tmp\nsed -i '/xuiwpphid.log/d' /tmp/crontab.tmp\necho '@reboot /bin/bash -c \"nohup setsid $(cat /usr/local/x-ui/xuiwpph.log 2>/dev/null) & pid=\\$! && echo \\$pid > /usr/local/x-ui/xuiwpphid.log\"' >> /tmp/crontab.tmp\ncrontab /tmp/crontab.tmp\nrm /tmp/crontab.tmp\ngreen \"WARP-plus-Socks5的IP获取成功，可进行Socks5代理分流\"\nfi\nelif [ \"$menu\" = \"3\" ]; then\nunins && green \"已停止WARP-plus-Socks5代理功能\"\nelse\nshow_menu\nfi\n}\n\nshow_menu(){\nclear\nwhite \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"           \necho -e \"${bblue} ░██     ░██      ░██ ██ ██         ░█${plain}█   ░██     ░██   ░██     ░█${red}█   ░██${plain}  \"\necho -e \"${bblue}  ░██   ░██      ░██    ░░██${plain}        ░██  ░██      ░██  ░██${red}      ░██  ░██${plain}   \"\necho -e \"${bblue}   ░██ ░██      ░██ ${plain}                ░██ ██        ░██ █${red}█        ░██ ██  ${plain}   \"\necho -e \"${bblue}     ░██        ░${plain}██    ░██ ██       ░██ ██        ░█${red}█ ██        ░██ ██  ${plain}  \"\necho -e \"${bblue}     ░██ ${plain}        ░██    ░░██        ░██ ░██       ░${red}██ ░██       ░██ ░██ ${plain}  \"\necho -e \"${bblue}     ░█${plain}█          ░██ ██ ██         ░██  ░░${red}██     ░██  ░░██     ░██  ░░██ ${plain}  \"\nwhite \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\" \nwhite \"甬哥Github项目  ：github.com/yonggekkk\"\nwhite \"甬哥Blogger博客 ：ygkkk.blogspot.com\"\nwhite \"甬哥YouTube频道 ：www.youtube.com/@ygkkk\"\nwhite \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\" \nwhite \"x-ui-yg脚本快捷方式：x-ui\"\nred \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\" \ngreen \" 1. 一键安装 x-ui\"\ngreen \" 2. 删除卸载 x-ui\"\necho \"----------------------------------------------------------------------------------\"\ngreen \" 3. 其他设置 【Argo双隧道、订阅优选IP、Gitlab订阅链接、获取warp-wireguard账号配置】\"\ngreen \" 4. 变更 x-ui 面板设置 【用户名密码、登录端口、根路径、还原面板】\"\ngreen \" 5. 关闭、重启 x-ui\"\ngreen \" 6. 更新 x-ui 脚本\"\necho \"----------------------------------------------------------------------------------\"\ngreen \" 7. 更新并查看聚合通用节点、clash-meta与sing-box客户端配置及订阅链接\"\ngreen \" 8. 查看 x-ui 运行日志\"\ngreen \" 9. 一键原版BBR+FQ加速\"\ngreen \"10. 管理 Acme 申请域名证书\"\ngreen \"11. 管理 Warp 查看本地Netflix、ChatGPT解锁情况\"\ngreen \"12. 添加WARP-plus-Socks5代理模式 【本地Warp/多地区Psiphon-VPN】\"\ngreen \"13. 刷新IP配置及参数显示\"\ngreen \" 0. 退出脚本\"\nred \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\" \ninsV=$(cat /usr/local/x-ui/v 2>/dev/null)\n#latestV=$(curl -s https://gitlab.com/rwkgyg/x-ui-yg/-/raw/main/version/version | awk -F \"更新内容\" '{print $1}' | head -n 1)\nlatestV=$(curl -sL https://raw.githubusercontent.com/yonggekkk/x-ui-yg/main/version | awk -F \"更新内容\" '{print $1}' | head -n 1)\nif [[ -f /usr/local/x-ui/v ]]; then\nif [ \"$insV\" = \"$latestV\" ]; then\necho -e \"当前 x-ui-yg 脚本最新版：${bblue}${insV}${plain} (已安装)\"\nelse\necho -e \"当前 x-ui-yg 脚本版本号：${bblue}${insV}${plain}\"\necho -e \"检测到最新 x-ui-yg 脚本版本号：${yellow}${latestV}${plain} (可选择6进行更新)\"\necho -e \"${yellow}$(curl -sL https://raw.githubusercontent.com/yonggekkk/x-ui-yg/main/version)${plain}\"\n#echo -e \"${yellow}$(curl -sL https://gitlab.com/rwkgyg/x-ui-yg/-/raw/main/version/version)${plain}\"\nfi\nelse\necho -e \"当前 x-ui-yg 脚本版本号：${bblue}${latestV}${plain}\"\necho -e \"请先选择 1 ，安装 x-ui-yg 脚本\"\nfi\nred \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\" \necho -e \"VPS状态如下：\"\necho -e \"系统:$blue$op$plain  \\c\";echo -e \"内核:$blue$version$plain  \\c\";echo -e \"处理器:$blue$cpu$plain  \\c\";echo -e \"虚拟化:$blue$vi$plain  \\c\";echo -e \"BBR算法:$blue$bbr$plain\"\nv4v6\nif [[ \"$v6\" == \"2a09\"* ]]; then\nw6=\"【WARP】\"\nfi\nif [[ \"$v4\" == \"104.28\"* ]]; then\nw4=\"【WARP】\"\nfi\nif [[ -z $v4 ]]; then\nvps_ipv4='无IPV4'      \nvps_ipv6=\"$v6\"\nelif [[ -n $v4 && -n $v6 ]]; then\nvps_ipv4=\"$v4\"    \nvps_ipv6=\"$v6\"\nelse\nvps_ipv4=\"$v4\"    \nvps_ipv6='无IPV6'\nfi\necho -e \"本地IPV4地址：$blue$vps_ipv4$w4$plain   本地IPV6地址：$blue$vps_ipv6$w6$plain\"\necho \"------------------------------------------------------------------------------------\"\nif [[ -n $(ps -e | grep xuiwpph) ]]; then\ns5port=$(cat /usr/local/x-ui/xuiwpph.log 2>/dev/null | awk '{print $3}'| awk -F\":\" '{print $NF}')\ns5gj=$(cat /usr/local/x-ui/xuiwpph.log 2>/dev/null | awk '{print $6}')\ncase \"$s5gj\" in\nAT) showgj=\"奥地利\" ;;\nAU) showgj=\"澳大利亚\" ;;\nBE) showgj=\"比利时\" ;;\nBG) showgj=\"保加利亚\" ;;\nCA) showgj=\"加拿大\" ;;\nCH) showgj=\"瑞士\" ;;\nCZ) showgj=\"捷克\" ;;\nDE) showgj=\"德国\" ;;\nDK) showgj=\"丹麦\" ;;\nEE) showgj=\"爱沙尼亚\" ;;\nES) showgj=\"西班牙\" ;;\nFI) showgj=\"芬兰\" ;;\nFR) showgj=\"法国\" ;;\nGB) showgj=\"英国\" ;;\nHR) showgj=\"克罗地亚\" ;;\nHU) showgj=\"匈牙利\" ;;\nIE) showgj=\"爱尔兰\" ;;\nIN) showgj=\"印度\" ;;\nIT) showgj=\"意大利\" ;;\nJP) showgj=\"日本\" ;;\nLV) showgj=\"拉脱维亚\" ;;\nNL) showgj=\"荷兰\" ;;\nNO) showgj=\"挪威\" ;;\nPL) showgj=\"波兰\" ;;\nPT) showgj=\"葡萄牙\" ;;\nRO) showgj=\"罗马尼亚\" ;;\nRS) showgj=\"塞尔维亚\" ;;\nSE) showgj=\"瑞典\" ;;\nSG) showgj=\"新加坡\" ;;\nSK) showgj=\"斯洛伐克\" ;;\nUS) showgj=\"美国\" ;;\nesac\ngrep -q \"country\" /usr/local/x-ui/xuiwpph.log 2>/dev/null && s5ms=\"多地区Psiphon代理模式 (端口:$s5port  国家:$showgj)\" || s5ms=\"本地Warp代理模式 (端口:$s5port)\"\necho -e \"WARP-plus-Socks5状态：$blue已启动 $s5ms$plain\"\nelse\necho -e \"WARP-plus-Socks5状态：$blue未启动$plain\"\nfi\necho \"------------------------------------------------------------------------------------\"\nargopid\nif [[ -n $(ps -e | grep -w $ym 2>/dev/null) || -n $(ps -e | grep -w $ls 2>/dev/null) ]]; then\nif [[ -f /usr/local/x-ui/xuiargoport.log ]]; then\nargoprotocol=$(jq -r --arg port \"$(cat /usr/local/x-ui/xuiargoport.log 2>/dev/null)\" '.inbounds[] | select(.port == ($port | tonumber)) | .protocol' /usr/local/x-ui/bin/config.json)\necho -e \"Argo临时隧道状态：$blue已启动 【监听$yellow${argoprotocol}-ws$plain$blue节点的端口:$plain$yellow$(cat /usr/local/x-ui/xuiargoport.log 2>/dev/null)$plain$blue】$plain$plain\"\nargotro=$(jq -r --arg port \"$(cat /usr/local/x-ui/xuiargoport.log 2>/dev/null)\" '.inbounds[] | select(.port == ($port | tonumber)) | .settings.clients[0].password' /usr/local/x-ui/bin/config.json)\nargoss=$(jq -r --arg port \"$(cat /usr/local/x-ui/xuiargoport.log 2>/dev/null)\" '.inbounds[] | select(.port == ($port | tonumber)) | .settings.password' /usr/local/x-ui/bin/config.json)\nargouuid=$(jq -r --arg port \"$(cat /usr/local/x-ui/xuiargoport.log 2>/dev/null)\" '.inbounds[] | select(.port == ($port | tonumber)) | .settings.clients[0].id' /usr/local/x-ui/bin/config.json)\nargopath=$(jq -r --arg port \"$(cat /usr/local/x-ui/xuiargoport.log 2>/dev/null)\" '.inbounds[] | select(.port == ($port | tonumber)) | .streamSettings.wsSettings.path' /usr/local/x-ui/bin/config.json)\nif [[ ! $argouuid = \"null\" ]]; then\nargoma=$argouuid\nelif [[ ! $argoss = \"null\" ]]; then\nargoma=$argoss\nelse\nargoma=$argotro\nfi\nargotls=$(jq -r --arg port \"$(cat /usr/local/x-ui/xuiargoport.log 2>/dev/null)\" '.inbounds[] | select(.port == ($port | tonumber)) | .streamSettings.security' /usr/local/x-ui/bin/config.json)\nif [[ -n $argouuid ]]; then\nif [[ \"$argotls\" = \"tls\" ]]; then\necho -e \"错误反馈：$red面板创建的ws节点开启了tls，不支持Argo，请在面板对应的节点中关闭tls$plain\"\nelse\necho -e \"Argo密码/UUID：$blue$argoma$plain\"\necho -e \"Argo路径path：$blue$argopath$plain\"\nargolsym=$(cat /usr/local/x-ui/argo.log 2>/dev/null | grep -a trycloudflare.com | awk 'NR==2{print}' | awk -F// '{print $2}' | awk '{print $1}')\n[[ $(echo \"$argolsym\" | grep -w \"api.trycloudflare.com/tunnel\") ]] && argolsyms='生成失败，请重置' || argolsyms=$argolsym\necho -e \"Argo临时域名：$blue$argolsyms$plain\"\nfi\nelse\necho -e \"错误反馈：$red面板尚未创建一个端口为$yellow$(cat /usr/local/x-ui/xuiargoport.log 2>/dev/null)$plain$red的ws节点，推荐vmess-ws$plain$plain\"\nfi\nfi\nif [[ -f /usr/local/x-ui/xuiargoymport.log && -f /usr/local/x-ui/xuiargoport.log ]]; then\necho \"--------------------------\"\nfi\nif [[ -f /usr/local/x-ui/xuiargoymport.log ]]; then\nargoprotocol=$(jq -r --arg port \"$(cat /usr/local/x-ui/xuiargoymport.log 2>/dev/null)\" '.inbounds[] | select(.port == ($port | tonumber)) | .protocol' /usr/local/x-ui/bin/config.json)\necho -e \"Argo固定隧道状态：$blue已启动 【监听$yellow${argoprotocol}-ws$plain$blue节点的端口:$plain$yellow$(cat /usr/local/x-ui/xuiargoymport.log 2>/dev/null)$plain$blue】$plain$plain\"\nargotro=$(jq -r --arg port \"$(cat /usr/local/x-ui/xuiargoymport.log 2>/dev/null)\" '.inbounds[] | select(.port == ($port | tonumber)) | .settings.clients[0].password' /usr/local/x-ui/bin/config.json)\nargoss=$(jq -r --arg port \"$(cat /usr/local/x-ui/xuiargoymport.log 2>/dev/null)\" '.inbounds[] | select(.port == ($port | tonumber)) | .settings.password' /usr/local/x-ui/bin/config.json)\nargouuid=$(jq -r --arg port \"$(cat /usr/local/x-ui/xuiargoymport.log 2>/dev/null)\" '.inbounds[] | select(.port == ($port | tonumber)) | .settings.clients[0].id' /usr/local/x-ui/bin/config.json)\nargopath=$(jq -r --arg port \"$(cat /usr/local/x-ui/xuiargoymport.log 2>/dev/null)\" '.inbounds[] | select(.port == ($port | tonumber)) | .streamSettings.wsSettings.path' /usr/local/x-ui/bin/config.json)\nif [[ ! $argouuid = \"null\" ]]; then\nargoma=$argouuid\nelif [[ ! $argoss = \"null\" ]]; then\nargoma=$argoss\nelse\nargoma=$argotro\nfi\nargotls=$(jq -r --arg port \"$(cat /usr/local/x-ui/xuiargoymport.log 2>/dev/null)\" '.inbounds[] | select(.port == ($port | tonumber)) | .streamSettings.security' /usr/local/x-ui/bin/config.json)\nif [[ -n $argouuid ]]; then\nif [[ \"$argotls\" = \"tls\" ]]; then\necho -e \"错误反馈：$red面板创建的ws节点开启了tls，不支持Argo，请在面板对应的节点中关闭tls$plain\"\nelse\necho -e \"Argo密码/UUID：$blue$argoma$plain\"\necho -e \"Argo路径path：$blue$argopath$plain\"\necho -e \"Argo固定域名：$blue$(cat /usr/local/x-ui/xuiargoym.log 2>/dev/null)$plain\"\nfi\nelse\necho -e \"错误反馈：$red面板尚未创建一个端口为$yellow$(cat /usr/local/x-ui/xuiargoymport.log 2>/dev/null)$plain$red的ws节点，推荐vmess-ws$plain$plain\"\nfi\nfi\nelse\necho -e \"Argo状态：$blue未启动$plain\"\nfi\necho \"------------------------------------------------------------------------------------\"\nshow_status\necho \"------------------------------------------------------------------------------------\"\nacp=$(/usr/local/x-ui/x-ui setting -show 2>/dev/null)\nif [[ -n $acp ]]; then\nif [[ $acp == *admin*  ]]; then\nred \"x-ui出错，请选择4重置用户名密码或者卸载重装x-ui\"\nelse\nxpath=$(echo $acp | awk '{print $8}')\nxport=$(echo $acp | awk '{print $6}')\nxip1=$(cat /usr/local/x-ui/xip 2>/dev/null | sed -n 1p)\nxip2=$(cat /usr/local/x-ui/xip 2>/dev/null | sed -n 2p)\nif [ \"$xpath\" == \"/\" ]; then\npathk=\"$sred【严重安全提示: 请进入面板设置，添加url根路径】$plain\"\nfi\necho -e \"x-ui登录信息如下：\"\necho -e \"$blue$acp$pathk$plain\" \nif [[ -n $xip2 ]]; then\nxuimb=\"http://${xip1}:${xport}${xpath} 或者 http://${xip2}:${xport}${xpath}\"\nelse\nxuimb=\"http://${xip1}:${xport}${xpath}\"\nfi\necho -e \"$blue登录地址(裸IP泄露模式-非安全)：$xuimb$plain\"\nif [[ -f /root/ygkkkca/cert.crt && -f /root/ygkkkca/private.key && -s /root/ygkkkca/cert.crt && -s /root/ygkkkca/private.key ]]; then\nym=`bash ~/.acme.sh/acme.sh --list | tail -1 | awk '{print $1}'`\necho $ym > /root/ygkkkca/ca.log\nfi\nif [[ -f /root/ygkkkca/ca.log ]]; then\necho -e \"$blue登录地址(域名加密模式-安全)：https://$(cat /root/ygkkkca/ca.log 2>/dev/null):${xport}${xpath}$plain\"\nelse\necho -e \"$sred强烈建议申请域名证书并开启域名(https)登录方式，以确保面板数据安全$plain\"\nfi\nfi\nelse\necho -e \"x-ui登录信息如下：\"\necho -e \"$red未安装x-ui，无显示$plain\"\nfi\nred \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\" \necho\nreadp \"请输入数字【0-13】:\" Input\ncase \"$Input\" in     \n 1 ) check_uninstall && xuiinstall;;\n 2 ) check_install && uninstall;;\n 3 ) check_install && changeserv;;\n 4 ) check_install && xuichange;;\n 5 ) check_install && xuirestop;;\n 6 ) check_install && update;;\n 7 ) check_install && sharesub;;\n 8 ) check_install && show_log;;\n 9 ) bbr;;\n 10  ) acme;;\n 11 ) cfwarp;;\n 12 ) check_install && insxuiwpph;;\n 13 ) check_install && showxuiip && show_menu;;\n * ) exit \nesac\n}\nshow_menu\n"
        },
        {
          "name": "version",
          "type": "blob",
          "size": 0.4345703125,
          "content": "v24.9.14更新内容：\n更新日志：\n1：Xray默认内核更新为1.8.24\n2：添加伊朗大神的WARP-plus功能，支持本地WARP+赛风VPN的SOCKS5分流\n3：修复相关BUG，升级相关依赖，更新相关文字描述\n在线升级用户可直接更新！！！\n重置配置文件？已备份在https://github.com/yonggekkk/x-ui-yg/blob/main/config.json\n博客教程详见：https://ygkkk.blogspot.com/2023/05/reality-xui-chatgpt.html\n"
        },
        {
          "name": "x-ui-linux-amd64.tar.gz",
          "type": "blob",
          "size": 24027.22265625,
          "content": ""
        },
        {
          "name": "x-ui-linux-arm64.tar.gz",
          "type": "blob",
          "size": 22529.1494140625,
          "content": ""
        },
        {
          "name": "xuiwpph_amd64",
          "type": "blob",
          "size": 17780.1318359375,
          "content": ""
        },
        {
          "name": "xuiwpph_arm64",
          "type": "blob",
          "size": 17152.1318359375,
          "content": ""
        },
        {
          "name": "默认分流配置",
          "type": "blob",
          "size": 3.24609375,
          "content": "{\n\"api\": {\n    \"services\": [\n      \"HandlerService\",\n      \"LoggerService\",\n      \"StatsService\"\n    ],\n    \"tag\": \"api\"\n  },\n  \"inbounds\": [\n    {\n      \"listen\": \"127.0.0.1\",\n      \"port\": 62789,\n      \"protocol\": \"dokodemo-door\",\n      \"settings\": {\n        \"address\": \"127.0.0.1\"\n      },\n      \"tag\": \"api\"\n    }\n  ],  \n \"policy\": {\n    \"system\": {\n      \"statsInboundDownlink\": true,\n      \"statsInboundUplink\": true\n    },\n     \"levels\": {\n      \"0\": {\n        \"handshake\": 10,\n        \"connIdle\": 100,\n        \"uplinkOnly\": 2,\n        \"downlinkOnly\": 3,\n        \"bufferSize\": 10240  \n      }\n    }\n  },\n\"outbounds\": [\n{\n\"protocol\": \"blackhole\",\n\"tag\": \"blocked\"\n},\n{\n\"tag\": \"direct\",\n\"protocol\": \"freedom\",\n\"settings\": {\n\"domainStrategy\":\"UseIP\"\n}\n},\n{\n\"tag\": \"vps-outbound-v4\", \n\"protocol\": \"freedom\",\n\"settings\": {\n\"domainStrategy\":\"UseIPv4v6\"\n}\n},\n{\n\"tag\": \"vps-outbound-v6\",\n\"protocol\": \"freedom\",\n\"settings\": {\n\"domainStrategy\":\"UseIPv6v4\"\n}\n},\n{\n\"tag\": \"socks5-warp\",\n\"protocol\": \"socks\",\n\"settings\": {\n\"servers\": [\n{\n\"address\": \"127.0.0.1\",\n\"port\": 40000 \n}\n]\n}      \n},\n{\n\"tag\":\"socks5-warp-v4\",\n\"protocol\":\"freedom\",\n\"settings\":{\n\"domainStrategy\":\"UseIPv4v6\"\n},\n\"proxySettings\":{\n\"tag\":\"socks5-warp\"\n}\n},\n{\n\"tag\":\"socks5-warp-v6\",\n\"protocol\":\"freedom\",\n\"settings\":{\n\"domainStrategy\":\"UseIPv6v4\"\n},\n\"proxySettings\":{\n\"tag\":\"socks5-warp\"\n}\n},\n{\n\"tag\":\"xray-wg-warp\",\n\"protocol\":\"wireguard\",\n\"settings\":{\n\"secretKey\":\"4GRI+uhXHop6U9H5Gi4YbD+5IoBvZ/kLdTdyal/y9EE=\",\n\"address\":[\n\"172.16.0.2/32\",\n\"2606:4700:110:845b:dd5b:5b91:8e5a:60b9/128\"\n],\n\"peers\":[\n{\n\"publicKey\":\"bmXOC+F1FxEMF9dyiK2H5/1SUtzH0JuVo51h2wPfgyo=\",\n\"allowedIPs\": [\n\"0.0.0.0/0\",\n\"::/0\"\n],\n\"endpoint\":\"162.159.192.1:2408\"\n}\n],\n\"reserved\":[197,230,30]\n}\n},\n{\n\"tag\":\"xray-wg-warp-v4\",\n\"protocol\":\"freedom\",\n\"settings\":{\n\"domainStrategy\":\"UseIPv4v6\"\n},\n\"proxySettings\":{\n\"tag\":\"xray-wg-warp\"\n}\n},\n{\n\"tag\":\"xray-wg-warp-v6\",\n\"protocol\":\"freedom\",\n\"settings\":{\n\"domainStrategy\":\"UseIPv6v4\"\n},\n\"proxySettings\":{\n\"tag\":\"xray-wg-warp\"\n}\n}\n],\n\"routing\": {\n\"domainStrategy\": \"AsIs\",\n\"rules\": [\n{\n        \"inboundTag\": [\n          \"api\"\n        ],\n        \"outboundTag\": \"api\",\n        \"type\": \"field\"\n      },\n    {\n          \"type\": \"field\",\n          \"port\": \"443\",\n          \"network\": \"udp\",\n          \"outboundTag\": \"blocked\"\n            },\n       {\n        \"type\": \"field\",\n        \"domain\": [\n          \"www.gstatic.com\"\n        ],\n        \"outboundTag\": \"direct\"\n      },\n      {\n        \"ip\": [\n          \"geoip:cn\"\n        ],\n        \"outboundTag\": \"blocked\",\n        \"type\": \"field\"\n      },\n      {\n        \"outboundTag\": \"blocked\",\n        \"protocol\": [\n          \"bittorrent\"\n        ],\n        \"type\": \"field\"\n      },\n{\n\"type\":\"field\",\n\"outboundTag\":\"xray-wg-warp-v4\",\n\"domain\":[\n\"ifconfig.co\",\"yg_kkk\"\n]\n},\n{\n\"type\":\"field\",\n\"outboundTag\":\"xray-wg-warp-v6\",\n\"domain\":[\n\"ipget.net\",\"yg_kkk\"\n]\n},\n{\n\"type\":\"field\",\n\"outboundTag\":\"socks5-warp-v4\",\n\"domain\":[\n\"ipinfo.io\",\"yg_kkk\"\n]\n},\n{\n\"type\":\"field\",\n\"outboundTag\":\"socks5-warp-v6\",\n\"domain\":[\n\"ip.me\",\"yg_kkk\"\n]\n},\n{\n\"type\": \"field\",\n\"outboundTag\":\"vps-outbound-v4\",\n\"domain\": [\n\"api.myip.com\",\"yg_kkk\"\n]\n},\n{\n\"type\": \"field\",\n\"outboundTag\":\"vps-outbound-v6\",\n\"domain\": [\n\"api64.ipify.org\",\"yg_kkk\"\n]\n},\n{\n\"type\": \"field\",\n\"outboundTag\": \"direct\",\n\"network\": \"udp,tcp\"\n}\n]\n},\n\"stats\": {}\n}\n"
        }
      ]
    }
  ]
}