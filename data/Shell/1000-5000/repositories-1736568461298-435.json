{
  "metadata": {
    "timestamp": 1736568461298,
    "page": 435,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQzOQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ffffffff0x/f8x",
      "stars": 1842,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0185546875,
          "content": "*  text=auto eol=lf"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0517578125,
          "content": ".DS_Store\n/assets/Temp\n/vps\n/docker\n/releases\nTemp.md"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 10.0927734375,
          "content": "# Changelog\n\n## Details\n\n### [1.6.2] - 2022-9-4\n\n**兼容性**\n* 支持 CentOS 9 Stream\n* 支持 Fedora 36\n\n**功能添加**\n* -k 选项添加 iprange/dnsx/MoreFind\n* 添加 -wpscan 选项\n* 添加 -cs45 选项\n* 添加 -interactsh 选项\n* 添加 -merlin 选项\n* 添加 -msf 选项\n* 添加 -pupy 选项\n* 添加 -rg 选项\n* 添加 -sliver 选项\n* 添加 -sliver-client 选项\n* 添加 -sps 选项\n* 添加 -TerraformGoat 选项\n* 添加 -TerraformGoat 选项\n* 添加 -upgrade 选项\n\n**功能修改与优化**\n* 优化对docker环境的判断\n* 添加了对ruby的检测\n* 优化了对keytool工具的判断\n\n### [1.6.1] - 2022-6-6\n\n**兼容性**\n* 支持 ubuntu 22.04\n\n**功能添加**\n* -k 选项添加 [CDK](https://github.com/cdk-team/CDK)\n* 添加 -yakit 选项\n* 添加 -py310 选项\n* 添加 -oraclejdk11 选项\n* 添加 -docker 选项 (安装 docker)\n* 添加 -code 选项 (安装 [code-server](https://github.com/coder/code-server))\n\n**功能修改与优化**\n* bat 换成兼容更强的安装包\n* 目前 -py3(7/8/9/10) 可以调用 pyenv 进行 python3 版本的切换,无需重复安装\n* 目前 -oraclejdk(8/11) 可以调用 jenv 进行 java 版本的切换,无需重复安装\n\n**错误修复**\n* 修改一些拼写错误\n\n### [1.6.0] - 2022-3-11\n\n**兼容性**\n* 支持 linux arm 架构\n* 支持 kali 2022.1\n\n**功能添加**\n* -k 选项添加 netspy\n* -f 选项添加 duf/procs/ncdu/exa/htop/bat/fd\n\n**错误修复**\n* 修复更改py版本时没有更改环境变量的问题\n\n### [1.5.9] - 2021-12-10\n\n**功能添加**\n* k 选项添加 htpwdScan,WebCrack,ysomap,sttr\n\n**功能修改与优化**\n* git clone 加入 --depth 1\n\n### [1.5.8] - 2021-11-12\n\n**功能修改与优化**\n\n* 兼容 Ubuntu 21.10 impish\n* 兼容 AlmaLinux\n* 兼容 Fedora 35\n* 兼容 CentOS 8 Stream\n* 兼容 VzLinux\n* 兼容 Rocky\n* -python3 选项改为 -py3(7/8/9)\n* -python2 选项改为 -py2\n\n### [1.5.7] - 2021-10-22\n\n**功能添加**\n\n- -s 选项添加 fapro\n- -k 选项添加 marshalsec\n\n**功能修改与优化**\n\n* 修改 -k 的子选项为 -ka -kb -kc 以支持批量安装\n* 调整在 docker 环境下 -p 选项不会修改 DNS\n* -k 选项不在安装 gdb ,移动到 f8x-ctf 中\n* 优化已安装的检测速度\n* 优化了对 ubuntu 16.04 的支持\n\n**错误修复**\n\n* 修复了在 Ubuntu 修改 APT 源时由于没有正确注释导致格式错误的问题\n* 修改了 testssl 的安装方式,原先没有安装到正确的位置所以无法运行\n\n**项目协作**\n\n* 感谢 @Ar3h 提交的 pr\n\n### [1.5.6] - 2021-10-3\n\n**功能修改**\n\n* 更新 crawlergo 的下载链接\n* 更改显示语言 [#10](https://github.com/ffffffff0x/f8x/issues/10) [#11](https://github.com/ffffffff0x/f8x/issues/11)\n* 在安装 volatility3 时默认不会下载 Symbol Tables\n* 优化对已安装软件的检测,尽量避免重复安装\n* 修改一个重命名的bug\n* 移除 sharry 的安装选项\n\n### [1.5.5] - 2021-8-6\n\n**功能添加**\n\n* -k 支持部分软件安装\n  * -k -a 信息收集、扫描、爆破、抓取\n  * -k -b 漏洞利用\n  * -k -c 后渗透、C2\n  * -k -d 其他\n  * -k -e 功能重叠或长期不维护\n* -k 选项添加 Amass、gobuster、dirsearch、Gopherus、gron、unfurl、qsreplace、Interlace、SecLists、jaeles、subjs、assetfinder、hakrawler [#8](https://github.com/ffffffff0x/f8x/issues/8)\n* 添加 -lua 选项\n* 添加 -mock 选项\n\n**功能修改**\n\n* 修复 nuclei 的安装问题\n* 修复 remote-method-guesser 的安装问题\n\n本次添加内容较多,若存在问题,欢迎在 issue 反馈\n\n### [1.5.4] - 2021-07-12\n\n**功能添加**\n\n* -k 选项添加 JNDI-Injection-Exploit、Platypus、Neo-reGeorg、AppInfoScanner\n\n**功能修改**\n\n* 修复 naabu 的安装问题\n* 优化 -info 的信息输出\n\n### [1.5.3] - 2021-06-02\n\n**功能添加**\n\n* -k 选项添加 ZoomEye-python、nali、dalfox\n* -f 选项添加 anew\n\n**功能修改**\n\n* CobaltStrike4.1 更换至 CobaltStrike4.3\n* 修复小 bug\n* 更新大部分软件的版本\n\n### [1.5.2] - 2021-04-21\n\n**功能添加**\n* -k 选项添加 shiro_rce_tool\n* debian 系安装 nginx 时添加 zlib1g 和 zlib1g.dev [#6](https://github.com/ffffffff0x/f8x/issues/6)\n* debian 系安装 Python3 时添加 python3-distutils\n\n**功能修改**\n* 安装 xray 至 /usr/local/bin/\n* 下载 xray poc 至 /pentest/xray\n* 暂时注释 RustScan、WAFW00F、MassBleed、exploitdb 的安装\n\n### [1.5.1] - 2021-04-15\n\n* -k 选项添加 swagger-hack、shiro-exploit、ysoserial、remote-method-guesser、SSRFmap、See-SURF、testssl.sh、MassBleed\n\n### [1.5.0] - 2021-04-12\n\n* -k 选项添加 jadx、Diggy、CORScanner、swagger-exp\n* 修复安装 bettercap 时的一个错误\n* 修复安装 ApkAnalyser 时的一个错误\n* 添加2个变量,为后续走web代理做准备,并且可以忽略一些banner信息\n* -goby 选项添加服务端启动命令\n* 继续优化使用体验,添加对开发环境依赖、渗透杂项工具、pip 模块的重复安装检测\n\n### [1.4.9] - 2021-04-06\n\n* 添加 -clash 选项\n* 添加 -nginx 选项\n* 更新 -info 选项\n* 添加对 Ubuntu15.04、Ubuntu14.04、Ubuntu12.04 系统的支持\n* -k 选项添加 httpx、subfinder、mapcidr、apktool、OpenRedireX、gau、apkleaks\n* -f 选项添加 fzf、annie、you-get、ffmpeg、aria2、filebrowser、starship\n* -sharry 选项移至 -f\n* 优化使用体验,已安装过的不会重复安装\n\n### [1.4.8] - 2021-03-28\n\n* 添加 -aircrack 选项\n* 添加 -zsh 选项\n* -k 选项添加 commix、exploitdb、tplmap、routersploit、bettercap、mitmproxy、naabu、proxify、pypykatz、CrackMapExec\n* -s 选项添加 BruteShark\n* 更新所有软件安装的版本\n* 体积缩减 50%\n\n### [1.4.7] - 2021-03-21\n* -s 选项添加 anti-portscan\n* -k 选项添加 Responder、Girsh、ApkAnalyser\n* -f 选项添加 thefuck\n* 修改检查是否已安装状态的方法\n* 完善 -info 的输出\n* 调整默认的安装逻辑，在检测到前置软件为安装时会自动安装\n\n### [1.4.6] - 2021-03-10\n* 添加 -clamav 选项\n* 添加 -update 选项\n* -d 选项添加 SDKMAN\n* -rmlock 选项添加一条命令 `dpkg --configure -a > /dev/null 2>&1`\n* 修复 -pip2-force 选项的文件链接问题\n* 将 -ssr 选项的安装包移至 github,走 jsdelivr cdn 下载\n\n### [1.4.5] - 2021-02-28\n\n* 添加 -swap 选项,用于添加 swap 分区\n* 添加 -cloud 选项,用于安装 Terraform、Serverless Framework、wrangler\n* 添加 -bypass 选项,用于安装一些代码混淆的模块\n* 添加对 kali2021、Ubuntu 21.01、Ubuntu 19.10、Debian 11 系统的支持\n* 添加对 docker 环境下的判断\n* 添加 nn_Check、Rust_Check 用于检查依赖\n* Debian 系 Docker 安装完毕后会自动删除 /etc/apt/sources.list.d/docker.list\n* 修复 -rust 选项不会走代理的错误\n* 重构 -nn 选项的安装方式\n\n### [1.4.4] - 2021-02-24\n\n* 修复 -viper 选项的路径问题 [#2](https://github.com/ffffffff0x/f8x/issues/2)\n* 在安装渗透杂项工具时,删除 redis 的安装\n\n### [1.4.3] - 2021-02-21\n\n* 安装 volatility3 时添加下载 Symbol Tables\n* 部署 CobaltStrike 时添加 genCrossC2\n* 安装 Docker 时添加安装 lazydocker\n* 添加对不支持的平台的判断\n* -d 选项添加 Terraform\n* -b 选项安装基础工具中部分工具移动到 -d 选项\n* 参考 sast 工具优化一些问题\n\n### [1.4.2] - 2021-02-16\n\n* 现在默认4个系统已经完全兼容,无报错\n* 默认检查是否存在 /tmp 目录\n* 删除 /pentest 确认选项\n* 删除 wget 默认的输出报错\n* 默认 Python2_Install 模块中的 pip2 安装失败后,自动调用 pip2_Install\n\n### [1.4.1] - 2021-02-13\n* 添加 -hfish 选项\n* 添加 -lt 选项\n* 添加 -chromium 选项\n* -k 选项添加 rad\n* -k 选项添加 crawlergo\n* -k 选项添加 w13scan\n* -s 选项添加 chkrootkit\n* -s 选项添加 rkhunter\n* -s 选项添加 shellpub\n* -volatility 选项简化为 -vol\n* -volatility3 选项简化为 -vol3\n* -cs 选项的命令生成添加持久性支持\n* 修改 -h 显示效果\n* 修改默认下不走代理\n* 增强判断 Debian 系版本的兼容性\n* 修改 Proxychains-ng 的代理下载走 cdn.ffffffff0x.com\n* Python3_Install 函数新增安装 virtualenv\n\n### [1.4.0] - 2021-02-09\n* 添加 -mobsf 安装选项\n* 添加 -nodejsscan 安装选项\n* -k 选项添加 Nuclei 工具\n* 修改部署 CobaltStrike 环境的提示信息\n* 优化 -h 的排列效果\n\n### [1.3.9] - 2021-02-02\n* 提高 -pip2-force 选项的兼容性\n\n### [1.3.8] - 2021-02-02\n* 添加 -volatility3 安装选项\n* 添加一个 pip2_Check 函数单独判断 pip2 命令是否存在,不存在自动调用 Python2_Install 函数进行安装\n* 安装pip 渗透模块时添加 pefile\n\n### [1.3.7] - 2021-02-01\n* 添加 -viper 安装选项\n* -k 选项添加 pocsuite3 工具\n* 添加一个 pip3_Check 函数单独判断 pip3 命令是否存在,不存在自动调用 Python3_Install 函数进行安装\n* 安装开发环境依赖时,debian 系安装 libcurl4-openssl-dev\n* 修复安装 Impacket 时的一个错误\n\n### [1.3.6] - 2021-01-26\n* 修几个小 bug\n\n### [1.3.5] - 2021-01-26\n* 添加 -goby 安装选项\n* 添加 -awvs13 安装选项\n* 添加 -arl 安装选项\n* 将 fscan 集成到 -k 选项中\n\n### [1.3.4] - 2021-01-26\n* 参考 oneforall 丰富输出信息\n\n### [1.3.3] - 2021-01-26\n* 修复 python2 pip 的升级问题\n* 优化 -d 的逻辑\n\n### [1.3.2] - 2021-01-24\n* 删除 - b 中的一个重复安装\n* 修复代理开关中的逻辑错误\n* 添加 setuptools 模块的安装\n* python2 默认继承到 -d 选项中\n* -asciinema 选项添加判断, 用于通过 CI 检测\n\n### [1.3.1] - 2021-01-24\n* 添加 -rmlock 选项运行除锁模块\n* 给错误日志加上时间\n* 代理开关添加一个 IS_CI 变量的判断,便于CI运行\n* 添加 EPEL 源的判断\n* -b 选项中添加 aptitude 的安装\n* 修复 -nn 的小 bug\n* 修复 -asciinema 的小 bug\n\n### [1.3.0] - 2021-01-23\n* 添加 -remove 卸载国内vps云监控\n* 添加 -asciinema 安装 asciinema 截图工具\n* 所有报错默认生成错误日志\n* 在部署 CobaltStrike 环境时加入 jdk 环境检测\n* 安装 vlmcsd 环境前会检测已有环境\n* 安装 Bash_Insulter 环境前会检测已有环境\n\n### [1.2.0] - 2021-01-23\n* 添加 -vulfocus 安装选项\n* 略微修改报错信息\n\n### [1.1.0] - 2021-01-23\n* 将 xray 社区版集成到 -k 选项中\n* 将 masscan 集成到 -k 选项中\n* 将 Yum_Rm_Lock 与 Rm_Lock 合并\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.00390625,
          "content": "<h1 align=\"center\">\n  <br>\n  <img src=\"./assets/img/banner2.png\" width=\"300px\" alt=\"f8x\">\n</h1>\n\n<h4 align=\"center\">Red/Blue team environment automation deployment tool</h4>\n\n<p align=\"center\">\n  <a href=\"#start\">Start</a> •\n  <a href=\"#options\">Options</a> •\n  <a href=\"#example\">Example</a> •\n  <a href=\"#faq\">FAQ</a> •\n  <a href=\"#license\">License</a>\n</p>\n\n<p align=\"center\">\n    <img src=\"https://img.shields.io/badge/platform-linux-important?color=%23942000\">\n    <img src=\"https://img.shields.io/badge/Category-automation-yellow.svg\">\n    <img src=\"https://img.shields.io/github/release/ffffffff0x/f8x\"></a>\n    <img src=\"https://github.com/ffffffff0x/f8x/workflows/dev/badge.svg\">\n</p>\n\nEnglish | [简体中文](README.zh-cn.md)\n\n---\n\n## Start\n\n**Download**\n- Download via CF Workers [Recommend]\n  - wget : `wget -O f8x https://f8x.io/`\n  - curl : `curl -o f8x https://f8x.io/`\n\n- github raw\n  - wget : `wget -O f8x https://raw.githubusercontent.com/ffffffff0x/f8x/main/f8x`\n  - curl : `curl -o f8x https://raw.githubusercontent.com/ffffffff0x/f8x/main/f8x`\n\n> Subsequent releases will not be updated, so it is recommended not to download old versions of f8x from releases.\n\n**usage**\n```bash\nbash f8x -h\n```\n\nRecommended to add to environment variables\n- wget : `wget -O f8x https://f8x.io/ && mv --force f8x /usr/local/bin/f8x && chmod +x /usr/local/bin/f8x`\n  - `f8x -h`\n- curl : `curl -o f8x https://f8x.io/ && mv --force f8x /usr/local/bin/f8x && chmod +x /usr/local/bin/f8x`\n  - `f8x -h`\n\n**System Dependency**\n\nf8x basically doesn't need any dependencies, it is made to help you install various dependencies😁\n\n**f8x-ctf**\n\nThis script is used to deploy CTF environments (Web、Misc、Crypto、Pwn、Iot)\n\n- wget : `wget -O f8x-ctf https://f8x.io/ctf`\n  - `bash f8x-ctf -help`\n- curl : `curl -o f8x-ctf https://f8x.io/ctf`\n  - `bash f8x-ctf -help`\n\n**f8x-dev**\n\nDeployment of middleware, database (apache、nginx、tomcat、Database、php)\n\n- wget : `wget -O f8x-dev https://f8x.io/dev`\n  - `bash f8x-dev -help`\n- curl : `curl -o f8x-dev https://f8x.io/dev`\n  - `bash f8x-dev -help`\n\n---\n\n## Options\n\nThe following options are currently supported by f8x\n\n**Batch installation**\n- `-b`            : install Basic Environment (gcc、make、git、vim、telnet、jq、unzip and other basic tools)\n- `-p`            : install Proxy Environment (Warning : Use only when needed)\n- `-d`            : install Development Environment (python3、pip3、Go、Docker、Docker-Compose、SDKMAN)\n- `-k` (`a`/`b`/`c`/`d`/`e`): install Pentest environment (hashcat、ffuf、OneForAll、ksubdomain、impacket and other Pentest tools)\n- `-s`            : install Blue Team Environment (Fail2Ban、chkrootkit、rkhunter、shellpub)\n- `-f`            : install Other Tools (AdguardTeam、trash-cli、fzf)\n- `-cloud`        : install Cloud Applications (Terraform、Serverless Framework、wrangler)\n- `-all`          : fully automated deployment (Compatible with CentOS7/8,Debain10/9,Ubuntu20/18,Fedora33)\n\n**Development Environment**\n- `-docker`         : install docker\n- `-lua`            : install lua\n- `-nn`             : install npm & NodeJs\n- `-go`             : install go\n- `-oraclejdk(8/11)`: install oraclejdk\n- `-openjdk`        : install openjdk\n- `-py3(7/8/9/10)`  : install python3\n- `-py2`            : install python2\n- `-pip2-f`         : force install pip2 (It is recommended to run with the -python2 option failing)\n- `-perl`           : install perl\n- `-ruby`           : install ruby\n- `-rust`           : install rust\n- `-code`           : install code-server\n- `-chromium`       : install Chromium (Used with rad, crawlergo in the -k option)\n- `-phantomjs`      : install PhantomJS\n\n**Blue Team Service**\n- `-binwalk`      : install binwalk\n- `-binwalk-f`    : force install binwalk (It is recommended to run if the -binwalk option fails)\n- `-clamav`       : install ClamAV\n- `-lt`           : install LogonTracer (High hardware configuration requirements)\n- `-suricata`     : install Suricata\n- `-vol`          : install volatility\n- `-vol3`         : install volatility3\n\n**Red Team Service**\n- `-aircrack`     : install aircrack-ng\n- `-bypass`       : install Bypass\n- `-goby`         : install Goby (The client side requires a graphical environment, the server side does not.)\n- `-wpscan`       : install wpscan\n- `-yakit`        : install yakit\n\n**Red Team Infrastructure**\n- `-awvs14`       : install AWVS14 (~1.04 GB)\n- `-cs`           : install CobaltStrike 4.3\n- `-cs45`         : install CobaltStrike 4.5\n- `-frp`          : install frp\n- `-interactsh`   : install interactsh (https://github.com/projectdiscovery/interactsh)\n- `-merlin`       : install merlin (https://github.com/Ne0nd0g/merlin)\n- `-msf`          : install Metasploit\n- `-nps`          : install nps\n- `-pupy`         : install pupy (https://github.com/n1nj4sec/pupy)\n- `-rg`           : install RedGuard (https://github.com/wikiZ/RedGuard)\n- `-sliver`       : install sliver-server && client (https://github.com/BishopFox/sliver)\n- `-sliver-client` : install sliver-client\n- `-sps`          : install SharPyShell (https://github.com/antonioCoco/SharPyShell)\n- `-viper`        : install Viper (~2.1 GB)\n\n**Docker-based environment deployment**\n- `-arl`          : install ARL (~872 MB)\n- `-mobsf`        : install MobSF (~1.54 GB)\n- `-nodejsscan`   : install nodejsscan (~873 MB)\n- `-vulhub`       : install vulhub (~210 MB)\n- `-vulfocus`     : install vulfocus (~1.04 GB)\n- `-TerraformGoat`: install TerraformGoat\n\n**Miscellaneous Services**\n- `-asciinema`    : install asciinema\n- `-bt`           : install 宝塔服务\n- `-clash`        : install clash (https://github.com/juewuy/ShellClash)\n- `-nginx`        : install nginx\n- `-ssh`          : install ssh (RedHat is available by default, no need to reinstall)\n- `-ssr`          : install ssr\n- `-zsh`          : install zsh\n\n**Other**\n- `-clear`        : Clean up system usage traces\n- `-info`         : View system information\n- `-optimize`     : Improve device options and optimize performance\n- `-remove`       : Uninstall some vps cloud monitoring\n- `-rmlock`       : Run the Unlock module\n- `-swap`         : Configuring swap partitions\n- `-update`       : Update f8x\n- `-upgrade`      : Upgrade Pentest tools\n\n---\n\n## Example\n\n**-h View Help**\n\n<h3 align=\"center\">\n  <img src=\"./assets/img/1.png\"></a>\n</h3>\n\n**-all Fully automated deployment**\n\nTake vultr vps as an example\n\n| <br><b><p align=\"center\">CentOS 7</p> | <br><b><p align=\"center\">Debian 10</p> |\n| - | - |\n| <p align=\"center\"><a href=\"https://asciinema.org/a/WTGNRBd9WYLHUOgZcce9sjkeY\"><img src=\"https://asciinema.org/a/WTGNRBd9WYLHUOgZcce9sjkeY.svg\" /></p></a> | <p align=\"center\"><a href=\"https://asciinema.org/a/Mq0N07O9K2jWsDuUoukHTEVOt\"><img src=\"https://asciinema.org/a/Mq0N07O9K2jWsDuUoukHTEVOt.svg\" /></p></a> |\n| <br><b><p align=\"center\">Fedora 33</p> | <br><b><p align=\"center\">Ubuntu 20.10</p> |\n| <p align=\"center\"><a href=\"https://asciinema.org/a/NccoFLvW5Xcl0PW0HnTu32vHf\"><img src=\"https://asciinema.org/a/NccoFLvW5Xcl0PW0HnTu32vHf.svg\" /></p></a> | <p align=\"center\"><a href=\"https://asciinema.org/a/Us90ody5ffAOIrr9p93dmO8Ct\"><img src=\"https://asciinema.org/a/Us90ody5ffAOIrr9p93dmO8Ct.svg\" /></p></a> |\n\n---\n\n## FAQ\n\n**What does the -p option do?**\n\n1. Replace your DNS (default is 223.5.5.5)\n2. Check the base compilation environment\n3. Download Proxychains-ng, compile and install\n4. Modify the /etc/proxychains.conf file\n5. Modify the pip proxy to https://mirrors.aliyun.com/pypi/simple/\n6. Change the docker proxy to https://docker.mirrors.ustc.edu.cn , and restart the docker service\n\n**Want f8x to run in CI/CD, but not interactive?**\n\nJust create an empty file `IS_CI` in `/tmp`\n```bash\ntouch /tmp/IS_CI\nwget -O f8x https://f8x.io/ && mv --force f8x /usr/local/bin/f8x && chmod +x /usr/local/bin/f8x\nf8x -k\n```\n\n---\n\n## License\n\n[Apache License 2.0](https://github.com/ffffffff0x/f8x/blob/main/LICENSE)\n\n---\n\n# 404StarLink 2.0 - Galaxy\n\n![](https://github.com/knownsec/404StarLink-Project/raw/master/logo.png)\n\nf8x has joined 404Team [404StarLink 2.0 - Galaxy](https://github.com/knownsec/404StarLink2.0-Galaxy)\n\n---\n\n> create by ffffffff0x\n"
        },
        {
          "name": "README.zh-cn.md",
          "type": "blob",
          "size": 9.958984375,
          "content": "<h1 align=\"center\">\n  <br>\n  <img src=\"./assets/img/banner2.png\" width=\"300px\" alt=\"f8x\">\n</h1>\n\n<h4 align=\"center\">一款红/蓝队环境自动化部署工具,支持多种场景,渗透,开发,代理环境,服务可选项等.</h4>\n\n<p align=\"center\">\n  <a href=\"#开始\">开始</a> •\n  <a href=\"#支持选项\">支持选项</a> •\n  <a href=\"#实际效果\">实际效果</a> •\n  <a href=\"#faq\">FAQ</a> •\n  <a href=\"#license\">License</a>\n</p>\n\n<p align=\"center\">\n    <img src=\"https://img.shields.io/badge/platform-linux-important?color=%23942000\">\n    <img src=\"https://img.shields.io/badge/Category-automation-yellow.svg\">\n    <img src=\"https://img.shields.io/github/release/ffffffff0x/f8x\"></a>\n    <img src=\"https://github.com/ffffffff0x/f8x/workflows/dev/badge.svg\">\n</p>\n\n[English](README.md) | 简体中文\n\n---\n\n大多数场景下，在不同的云购买一些 vps 服务器用于部署红 / 蓝队设施，不能做到开箱即用，使用 f8x 可以快速部署所需要的各类服务。同时兼顾到本地 VM 虚拟机的需求，可以选择走 socket 代理进行安装部署，Proxychains-ng 也会自动安装，只需做好 Proxychains-ng 配置即可。\n\n## 开始\n\n**下载**\n- 通过 CF Workers 下载 [推荐]\n  - wget : `wget -O f8x https://f8x.io/`\n  - curl : `curl -o f8x https://f8x.io/`\n\n- github 直链\n  - wget : `wget -O f8x https://raw.githubusercontent.com/ffffffff0x/f8x/main/f8x`\n  - curl : `curl -o f8x https://raw.githubusercontent.com/ffffffff0x/f8x/main/f8x`\n\n> 后续不会更新 releases,建议不要下载 releases 的旧版本 f8x\n\n**使用**\n```bash\nbash f8x -h\n```\n\n如果你希望方便点使用可以直接加到环境变量中\n- wget : `wget -O f8x https://f8x.io/ && mv --force f8x /usr/local/bin/f8x && chmod +x /usr/local/bin/f8x`\n  - `f8x -h`\n- curl : `curl -o f8x https://f8x.io/ && mv --force f8x /usr/local/bin/f8x && chmod +x /usr/local/bin/f8x`\n  - `f8x -h`\n\n**系统依赖**\n\nf8x 基本上不需要任何依赖,或者说它就是为了帮助你安装各种依赖而生的😁\n\n**f8x-ctf**\n\n该脚本用于部署 CTF 环境,支持 (Web、Misc、Crypto、Pwn、Iot) 分类\n\n- wget : `wget -O f8x-ctf https://f8x.io/ctf`\n  - `bash f8x-ctf -help`\n- curl : `curl -o f8x-ctf https://f8x.io/ctf`\n  - `bash f8x-ctf -help`\n\n**f8x-dev**\n\n该脚本用于部署中间件和数据库环境,支持 (apache、nginx、tomcat、Database、php) 分类\n\n- wget : `wget -O f8x-dev https://f8x.io/dev`\n  - `bash f8x-dev -help`\n- curl : `curl -o f8x-dev https://f8x.io/dev`\n  - `bash f8x-dev -help`\n\n---\n\n## 支持选项\n\n目前 f8x 支持以下部署选项 (Linux arm64 下大部分都支持)\n\n**1. 批量化安装**\n- 使用 -b 选项安装基本环境 (gcc、make、git、vim、telnet、jq、unzip 等基本工具)\n- 使用 -p 选项安装代理环境 (警告:国外云服务器上不要用,会降速)\n- 使用 -d 选项安装开发环境 (python3、pip3、Go、Docker、Docker-Compose、SDKMAN)\n- 使用 -k 选项安装渗透环境 (hashcat、ffuf、OneForAll、ksubdomain、impacket 等渗透工具)\n  - -ka 信息收集、扫描、爆破、抓取\n  - -kb 漏洞利用\n  - -kc 后渗透、C2\n  - -kd 其他\n  - -ke 功能重叠或长期不维护\n- 使用 -s 选项安装蓝队环境 (Fail2Ban、chkrootkit、rkhunter、河马webshell查杀工具)\n- 使用 -f 选项安装其他工具 (Bash_Insulter、vlmcsd、AdguardTeam、trash-cli 等辅助工具)\n- 使用 -cloud 选项安装云应用 (Terraform、Serverless Framework、wrangler)\n- 使用 -all 选项全自动化部署 (默认不走代理,兼容 CentOS7/8,Debain10/9,Ubuntu20/18,Fedora33)\n\n**2. 开发环境**\n- 使用 -docker 选项安装 docker 环境\n- 使用 -lua 选项安装 lua 环境\n- 使用 -nn 选项安装 npm & NodeJs 环境\n- 使用 -go 选项安装 go 环境\n- 使用 -oraclejdk(8/11) 选项安装 oraclejdk 环境\n- 使用 -openjdk 选项安装 openjdk 环境\n- 使用 -py3(7/8/9/10) 选项安装 python3 环境\n- 使用 -py2 选项安装 python2 环境\n- 使用 -pip2-f 选项强制安装 pip2 环境 (建议在 -python2 选项失败的情况下运行)\n- 使用 -perl 选项安装 perl 环境\n- 使用 -ruby 选项安装 ruby 环境\n- 使用 -rust 选项安装 rust 环境\n- 使用 -code 选项安装 code-server 环境\n- 使用 -chromium 选项安装 Chromium 环境 (用于配合 -k 选项中的 rad、crawlergo)\n- 使用 -phantomjs 选项安装 PhantomJS\n\n**3. 蓝队工具**\n- 使用 -binwalk 选项安装 binwalk 环境\n- 使用 -binwalk-f 选项强制安装 binwalk 环境 (建议在 -binwalk 选项失败的情况下运行)\n- 使用 -clamav 选项安装 ClamAV 工具\n- 使用 -lt 选项部署 LogonTracer 环境 (非超高配置机器不要部署,这个应用太吃配置了)\n- 使用 -suricata 选项部署 Suricata 环境\n- 使用 -vol 选项安装 volatility 取证工具\n- 使用 -vol3 选项安装 volatility3 取证工具\n\n**4. 红队工具**\n- 使用 -aircrack 选项部署 aircrack-ng 环境\n- 使用 -bypass 选项部署 Bypass 环境\n- 使用 -goby 选项部署 Goby 环境 (需要图形化环境)\n- 使用 -wpscan 选项安装 wpscan 工具\n- 使用 -yakit 选项部署 yakit 环境\n\n**5. 红队基础设施**\n- 使用 -awvs14 选项部署 AWVS13 环境(1.04 GB)\n- 使用 -cs 选项部署 CobaltStrike4.3 环境\n- 使用 -cs45 选项部署 CobaltStrike4.5 环境\n- 使用 -frp 选项部署 frp 工具\n- 使用 -interactsh 选项部署 interactsh 工具 (https://github.com/projectdiscovery/interactsh)\n- 使用 -merlin 选项部署 merlin 环境 (https://github.com/Ne0nd0g/merlin)\n- 使用 -msf 选项部署 Metasploit 环境\n- 使用 -nps 选项部署 nps 工具\n- 使用 -pupy 选项部署 pupy 环境 (https://github.com/n1nj4sec/pupy)\n- 使用 -rg 选项部署 RedGuard 工具 (https://github.com/wikiZ/RedGuard)\n- 使用 -sliver 选项部署 sliver 环境 (https://github.com/BishopFox/sliver)\n- 使用 -sliver-client 选项安装 sliver-client 工具\n- 使用 -sps 选项部署 SharPyShell 工具 (https://github.com/antonioCoco/SharPyShell)\n- 使用 -viper 选项部署 Viper 环境(2.1 GB)\n\n**6. 基于 Docker 的环境部署**\n- 使用 -arl 选项部署 ARL 环境(872 MB)\n- 使用 -mobsf 选项部署 MobSF 环境(1.54 GB)\n- 使用 -nodejsscan 选项部署 nodejsscan 环境(873 MB)\n- 使用 -vulhub 选项部署 vulhub 环境(210 MB)\n- 使用 -vulfocus 选项部署 vulfocus 环境(1.04 GB)\n- 使用 -TerraformGoat 选项部署 TerraformGoat 环境\n\n**7. 杂项服务**\n- 使用 -asciinema 选项安装 asciinema 截图工具\n- 使用 -bt 选项部署宝塔服务\n- 使用 -clash 选项安装 clash 工具 (https://github.com/juewuy/ShellClash)\n- 使用 -nginx 选项配置 nginx 服务\n- 使用 -ssh 选项配置 ssh 环境 (RedHat 系默认可用,无需重复安装)\n- 使用 -ssr 选项部署 ssr 工具\n- 使用 -zsh 选项部署 zsh 工具\n\n**8. 其他**\n- 使用 -clear 选项清理系统使用痕迹\n- 使用 -info 选项查看系统各项信息\n- 使用 -optimize 选项改善设备选项,优化性能\n- 使用 -remove 选项卸载国内 vps 云监控\n- 使用 -rmlock 选项运行除锁模块\n- 使用 -swap 选项配置 swap 分区\n- 使用 -update 选项更新 f8x 工具\n- 使用 -upgrade 选项更新渗透工具\n\n---\n\n## 实际效果\n\n**-h 查看帮助**\n\n<h3 align=\"center\">\n  <img src=\"./assets/img/1.png\"></a>\n</h3>\n\n**-all 全自动化部署**\n\n以 vultr vps 为例,结果分别如下\n\n| <br><b><p align=\"center\">CentOS 7(完全兼容)</p> | <br><b><p align=\"center\">Debian 10(完全兼容)</p> |\n| - | - |\n| <p align=\"center\"><a href=\"https://asciinema.org/a/WTGNRBd9WYLHUOgZcce9sjkeY\"><img src=\"https://asciinema.org/a/WTGNRBd9WYLHUOgZcce9sjkeY.svg\" /></p></a> | <p align=\"center\"><a href=\"https://asciinema.org/a/Mq0N07O9K2jWsDuUoukHTEVOt\"><img src=\"https://asciinema.org/a/Mq0N07O9K2jWsDuUoukHTEVOt.svg\" /></p></a> |\n| <br><b><p align=\"center\">Fedora 33</p> | <br><b><p align=\"center\">Ubuntu 20.10</p> |\n| <p align=\"center\"><a href=\"https://asciinema.org/a/NccoFLvW5Xcl0PW0HnTu32vHf\"><img src=\"https://asciinema.org/a/NccoFLvW5Xcl0PW0HnTu32vHf.svg\" /></p></a> | <p align=\"center\"><a href=\"https://asciinema.org/a/Us90ody5ffAOIrr9p93dmO8Ct\"><img src=\"https://asciinema.org/a/Us90ody5ffAOIrr9p93dmO8Ct.svg\" /></p></a> |\n\n---\n\n## FAQ\n\n**-p 选项会执行什么**\n\n1. 替换你的 DNS(默认为 223.5.5.5), 如果判断是 debian 系还会帮你安装 resolvconf, 长期修改 DNS\n2. 检查基础的编译环境是否安装, 并通过默认的包管理器安装 gcc,make,unzip 这些基本软件\n3. 可选的从 https://github.com/rofl0r/proxychains-ng 或 ffffffff0x.com 下载 Proxychains-ng 的源码, 编译安装\n4. 要求你修改 /etc/proxychains.conf 文件\n5. 修改 pip 代理为 https://mirrors.aliyun.com/pypi/simple/\n6. 修改 docker 代理为 https://docker.mirrors.ustc.edu.cn , 并重启 docker 服务\n\n**我想跑在 CI/CD 里,不想要交互行不行?**\n\n当然没有问题, f8x 的 GitHub action 就是自动运行每个选项部署环境的。只需要在 /tmp 创建一个名为 IS_CI 的空文件即可\n```bash\ntouch /tmp/IS_CI\nwget -O f8x https://f8x.io/ && mv --force f8x /usr/local/bin/f8x && chmod +x /usr/local/bin/f8x\nf8x -k\n```\n\n**如何自定义版本**\n\nshell脚本在运行时，可以通过 `. ./test.sh` 这样同等进程运行修改当前shell环境变量，那么f8x对同目录下的 f8x_version.sh 文件做个判断，当有这个文件时，会加载这个文件中的内容，也就是覆盖f8x的变量值，这样只需要在当前目录下对 f8x_version.sh 文件做修改或定制，即可做到安装指定版本\n\n---\n\n## 开发日志\n\n[f8x 开发记录](https://r0fus0d.blog.ffffffff0x.com/post/f8x_development_record/)\n\n---\n\n## License\n\n[Apache License 2.0](https://github.com/ffffffff0x/f8x/blob/main/LICENSE)\n\n---\n\n# 404StarLink 2.0 - Galaxy\n\n![](https://github.com/knownsec/404StarLink-Project/raw/master/logo.png)\n\nf8x 是 404Team [星链计划2.0](https://github.com/knownsec/404StarLink2.0-Galaxy)中的一环，如果对 f8x 有任何疑问又或是想要找小伙伴交流，可以参考星链计划的加群方式。\n\n- [https://github.com/knownsec/404StarLink2.0-Galaxy#community](https://github.com/knownsec/404StarLink2.0-Galaxy#community)\n\n---\n\n> create by ffffffff0x\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "f8x",
          "type": "blob",
          "size": 377.962890625,
          "content": "#!/usr/bin/env bash\n#set -x\n\n# ======================== !! NOTE !! ========================\n#  ________ ________ ________ ________ ________ ________ ________ ________ ________     ___    ___\n# |\\  _____\\\\  _____\\\\  _____\\\\  _____\\\\  _____\\\\  _____\\\\  _____\\\\  _____\\\\   __  \\   |\\  \\  /  /|\n# \\ \\  \\__/\\ \\  \\__/\\ \\  \\__/\\ \\  \\__/\\ \\  \\__/\\ \\  \\__/\\ \\  \\__/\\ \\  \\__/\\ \\  \\|\\  \\  \\ \\  \\/  / /\n#  \\ \\   __\\\\ \\   __\\\\ \\   __\\\\ \\   __\\\\ \\   __\\\\ \\   __\\\\ \\   __\\\\ \\   __\\\\ \\  \\\\\\  \\  \\ \\    / /\n#   \\ \\  \\_| \\ \\  \\_| \\ \\  \\_| \\ \\  \\_| \\ \\  \\_| \\ \\  \\_| \\ \\  \\_| \\ \\  \\_| \\ \\  \\\\\\  \\  /     \\/\n#    \\ \\__\\   \\ \\__\\   \\ \\__\\   \\ \\__\\   \\ \\__\\   \\ \\__\\   \\ \\__\\   \\ \\__\\   \\ \\_______\\/  /\\   \\\n#     \\|__|    \\|__|    \\|__|    \\|__|    \\|__|    \\|__|    \\|__|    \\|__|    \\|_______/__/ /\\ __\\\n#                                                                                      |__|/ \\|__|\n# 注: 该脚本适用于 debian、kali、Ubuntu、Centos、RedHat、Fedora 等系列系统下\n# 注: 完全适配 debian 系列系统\n# 注: 基本适配 RedHat 系列系统\n# 注: 完全适配 x86 和 arm 架构\n# 注: 适配 Centos8 和 Fedora 系统时有些小bug,但不影响使用,可以忽略\n# 注: 走代理时,请确认配置好 Proxychains-ng 代理\n# Note: This script is available for debian, kali, Ubuntu, Centos, RedHat, Fedora, etc.\n# Note: Fully compatible with debian series systems\n# Note: Partially adapted to RedHat series systems\n# Note: Fully compatible with x86 and arm architectures\n# Note: There are some small bugs when adapting to Centos8 and Fedora systems, but it does not affect the use, can be ignored\n# Note: When using a proxy, please make sure the Proxychains-ng proxy is configured.\n\n# ===================== Basic variable settings =====================\nP_Dir=/pentest\nT_Dir=/ffffffff0x\nDefault_DNS=223.5.5.5\nProxy_URL=\"https://cdn.ffffffff0x.com/?durl=https://codeload.github.com/rofl0r/proxychains-ng/zip/master\"\nProxy_OK=\nDocker_OK=\nerror=0\nLinux_architecture_Name=\nF8x_Version=\"1.7.5 Dev(2024/09/02)\"\nwget_option=\"-q --show-progress\"\n\n# ===================== Software version variable setting (dev) =====================\n# https://www.ruby-lang.org/en/downloads/\nRuby_Ver=\"3.0\"\nRuby_Dir=\"ruby-3.0.0\"\nRuby_bin=\"ruby-3.0.0.tar.gz\"\n# https://go.dev/dl/\nGo_Version=\"go1.21.4\"\nGo_Bin_amd64=\"go1.21.4.linux-amd64.tar.gz\"\nGo_Bin_arm64=\"go1.21.4.linux-arm64.tar.gz\"\n# https://nodejs.org/dist/\nnode_Ver=\"v20.10.0\"\nnode_bin_amd64=\"node-v20.10.0-linux-x64.tar.xz\"\nnode_bin_arm64=\"node-v20.10.0-linux-arm64.tar.xz\"\nnode_Dir_amd64=\"node-v20.10.0-linux-x64\"\nnode_Dir_arm64=\"node-v20.10.0-linux-arm64\"\n# http://nginx.org/en/download.html\nnginx_Ver=\"1.18.0\"\nnginx_bin=\"nginx-1.18.0.tar.gz\"\n# https://www.lua.org/download.html\nlua_bin=\"lua-5.4.3.tar.gz\"\nlua_dir=\"lua-5.4.3\"\n# https://github.com/stedolan/jq/releases\njq_bin=\"jq-1.7.1.zip\"\njq_dir=\"jq-1.7.1\"\njq_ver=\"jq-1.7.1\"\n# https://github.com/tsl0922/ttyd/releases\nttyd_Ver=\"1.7.7\"\nttyd_bin_amd64=\"ttyd.x86_64\"\nttyd_bin_arm64=\"ttyd.arm\"\n# https://github.com/coder/code-server\ncode_server_Ver=\"v4.92.2\"\ncode_server_bin1_amd64=\"code-server-4.92.2-amd64.rpm\"\ncode_server_bin2_amd64=\"code-server_4.92.2_amd64.deb\"\ncode_server_bin1_arm64=\"code-server-4.92.2-arm64.rpm\"\ncode_server_bin2_arm64=\"code-server_4.92.2_arm64.deb\"\n# https://www.python.org/downloads/\npy37_ver=\"3.7.12\"\npy37_bin=\"Python-3.7.12.tar.xz\"\npy37_dir=\"Python-3.7.12\"\npy38_ver=\"3.8.12\"\npy38_bin=\"Python-3.8.12.tar.xz\"\npy38_dir=\"Python-3.8.12\"\npy39_ver=\"3.9.8\"\npy39_bin=\"Python-3.9.8.tar.xz\"\npy39_dir=\"Python-3.9.8\"\npy310_ver=\"3.10.4\"\npy310_bin=\"Python-3.10.4.tar.xz\"\npy310_dir=\"Python-3.10.4\"\n# https://www.googleapis.com/download/storage/v1/b/chromium-browser-snapshots/o/Linux_x64%2FLAST_CHANGE?alt=media\n# https://commondatastorage.googleapis.com/chromium-browser-snapshots/index.html?prefix=Linux_x64/958422/\nchromium_Ver=\"958422\"\n# https://phantomjs.org/download.html\nphantomjs_bin=\"phantomjs-2.1.1-linux-x86_64.tar.bz2\"\nphantomjs_dir=\"phantomjs-2.1.1-linux-x86_64\"\n\n# ===================== Software version variable setting (pentest) =====================\n# https://github.com/fatedier/frp/releases\nfrp_Ver=\"v0.60.0\"\nfrp_File_amd64=\"frp_0.60.0_linux_amd64.tar.gz\"\nfrp_File_arm64=\"frp_0.60.0_linux_arm64.tar.gz\"\nfrp_Dir_amd64=\"frp_0.60.0_linux_amd64\"\nfrp_Dir_arm64=\"frp_0.60.0_linux_arm64\"\n# https://github.com/ehang-io/nps/releases\nnps_Ver=\"v0.26.10\"\nnps_File_amd64=\"linux_amd64_server.tar.gz\"\nnps_File_arm64=\"linux_arm64_server.tar.gz\"\n# https://github.com/wikiZ/RedGuard/releases\nRedGuard_Ver=\"24.06.18\"\nRedGuard_File_amd64=\"RedGuard_64\"\n# https://github.com/RustScan/RustScan/releases\nRustScan_Version=\"2.0.1\"\nRustScan_Install=\"rustscan_2.0.1_amd64.deb\"\n# https://github.com/boy-hack/ksubdomain/releases\nksubdomain_Ver=\"v1.9.9\"\nksubdomain_Install=\"KSubdomain-v1.9.9-linux-amd64.tar\"\n# https://github.com/chaitin/xray/releases\nxray_Ver=\"1.9.11\"\nxray_File_amd64=\"xray_linux_amd64.zip\"\nxray_bin_amd64=\"xray_linux_amd64\"\nxray_File_arm64=\"xray_linux_arm64.zip\"\nxray_bin_arm64=\"xray_linux_arm64\"\n# https://github.com/gobysec/Goby/releases\ngoby_Ver=\"Beta1.9.325\"\ngoby_File=\"goby-linux-x64-1.9.325.zip\"\n# https://github.com/shadow1ng/fscan/releases\nfscan_Ver=\"1.8.4\"\nfscan_Install_amd64=\"fscan\"\nfscan_Install_arm64=\"fscan_arm64\"\n# https://github.com/ffuf/ffuf/releases\nffuf_Ver=\"v2.1.0\"\nffuf_Install_amd64=\"ffuf_2.1.0_linux_amd64.tar.gz\"\nffuf_Install_arm64=\"ffuf_2.1.0_linux_arm64.tar.gz\"\n# https://github.com/projectdiscovery/nuclei/releases\nNuclei_Ver=\"v3.3.1\"\nNuclei_Install_amd64=\"nuclei_3.3.1_linux_amd64.zip\"\nNuclei_Install_arm64=\"nuclei_3.3.1_linux_arm64.zip\"\n# https://github.com/Ne0nd0g/merlin/releases\nmerlin_Ver=\"v1.5.0\"\nmerlin_Install_amd64=\"merlinServer-Linux-x64.7z\"\nmerlin_agent_windows=\"merlinAgent-Windows-x64.7z\"\nmerlin_agent_linux=\"merlinAgent-Linux-x64.7z\"\nmerlin_agent_darwin=\"merlinAgent-Darwin-x64.7z\"\n# https://github.com/chaitin/rad/releases\nrad_Ver=\"1.0\"\nrad_File_amd64=\"rad_linux_amd64.zip\"\nrad_File_arm64=\"rad_linux_arm64.zip\"\nrad_bin_amd64=\"rad_linux_amd64\"\nrad_bin_arm64=\"rad_linux_arm64\"\n# https://github.com/Qianlitp/crawlergo/releases\ncrawlergo_Ver=\"v0.4.4\"\ncrawlergo_File_amd64=\"crawlergo_linux_amd64\"\ncrawlergo_File_arm64=\"crawlergo_linux_arm64\"\n# https://github.com/gloxec/CrossC2/releases\nCrossC2_Ver=\"v3.3\"\n# https://github.com/nodauf/Girsh/releases\nGirsh_Ver=\"v0.40\"\nGirsh_bin_amd64=\"Girsh_0.40_linux_amd64.tar.gz\"\nGirsh_bin_arm64=\"Girsh_0.40_linux_arm64.tar.gz\"\n# https://github.com/bettercap/bettercap/releases\nbettercap_Ver=\"v2.31.1\"\nbettercap_bin_amd64=\"bettercap_linux_amd64_v2.31.1.zip\"\nbettercap_bin_arm64=\"bettercap_linux_aarch64_v2.31.1.zip\"\n# https://github.com/mitmproxy/mitmproxy/releases\nmitmproxy_Ver=\"10.4.2\"\nmitmproxy_bin=\"mitmproxy-10.4.2-linux-x86_64.tar.gz\"\n# https://github.com/projectdiscovery/naabu/releases\nnaabu_Ver=\"v2.3.1\"\nnaabu_bin=\"naabu_2.3.1_linux_amd64.zip\"\n# https://github.com/projectdiscovery/proxify/releases\nproxify_Ver=\"v0.0.15\"\nproxify_bin_amd64=\"proxify_0.0.15_linux_amd64.zip\"\nproxify_bin_arm64=\"proxify_0.0.15_linux_arm64.zip\"\n# https://github.com/hashcat/hashcat/releases\nhashcat_Version=\"hashcat-6.2.6\"\n# https://github.com/projectdiscovery/subfinder/releases\nsubfinder_Ver=\"v2.6.6\"\nsubfinder_bin_amd64=\"subfinder_2.6.6_linux_amd64.zip\"\nsubfinder_bin_arm64=\"subfinder_2.6.6_linux_arm64.zip\"\n# https://github.com/projectdiscovery/httpx/releases\nhttpx_Ver=\"v1.6.8\"\nhttpx_bin_amd64=\"httpx_1.6.8_linux_amd64.zip\"\nhttpx_bin_arm64=\"httpx_1.6.8_linux_arm64.zip\"\n# https://github.com/projectdiscovery/mapcidr/releases\nmapcidr_Ver=\"v1.1.34\"\nmapcidr_bin_amd64=\"mapcidr_1.1.34_linux_amd64.zip\"\nmapcidr_bin_arm64=\"mapcidr_1.1.34_linux_arm64.zip\"\n# https://github.com/ffffffff0x/iprange/releases\niprange_Ver=\"v1.0.1\"\niprange_bin_amd64=\"iprange_1.0.1_linux_amd64.tar.gz\"\niprange_bin_arm64=\"iprange_1.0.1_linux_arm64.tar.gz\"\n# https://github.com/projectdiscovery/dnsx/releases\ndnsx_Ver=\"v1.2.1\"\ndnsx_bin_amd64=\"dnsx_1.2.1_linux_amd64.zip\"\ndnsx_bin_arm64=\"dnsx_1.2.1_linux_arm64.zip\"\n# https://github.com/iBotPeaches/Apktool/releases\napktool_Ver=\"v2.9.3\"\napktool_bin=\"apktool_2.9.3.jar\"\n# https://github.com/lc/gau/releases\ngau_Ver=\"v2.2.3\"\ngau_bin=\"gau_2.2.3_linux_amd64.tar.gz\"\n# https://github.com/skylot/jadx/releases\njadx_Ver=\"v1.5.0\"\njadx_bin=\"jadx-1.5.0.zip\"\n# https://github.com/qtc-de/remote-method-guesser/releases\nrmg_Ver=\"v5.1.0\"\nrmg_bin=\"rmg-5.1.0-jar-with-dependencies.jar\"\n# https://github.com/No-Github/anew/releases\nanew_Ver=\"v1.0.3\"\nanew_bin_amd64=\"anew_1.0.3_linux_amd64.tar.gz\"\nanew_bin_arm64=\"anew_1.0.3_linux_arm64.tar.gz\"\n# https://github.com/zu1k/nali/releases\nnali_Ver=\"v0.8.1\"\nnali_bin_amd64=\"nali-linux-amd64-v0.8.1.gz\"\nnali_bin_arm64=\"nali-linux-armv8-v0.8.1.gz\"\n# https://github.com/hahwul/dalfox/releases\ndalfox_Ver=\"v2.8.2\"\ndalfox_bin_amd64=\"dalfox_2.8.2_linux_amd64.tar.gz\"\ndalfox_bin_arm64=\"dalfox_2.8.2_linux_arm64.tar.gz\"\n# https://github.com/ffffffff0x/DomainSplit/releases\nDomainSplit_Ver=\"1.0\"\n# https://github.com/WangYihang/Platypus/releases\nPlatypus_Ver=\"v1.5.1\"\nPlatypus_bin_amd64=\"Platypus_linux_amd64\"\nPlatypus_bin_arm64=\"Platypus_linux_arm64\"\n# https://github.com/OWASP/Amass/releases\nAmass_Ver=\"v4.2.0\"\nAmass_bin_amd64=\"amass_linux_amd64.zip\"\nAmass_bin_arm64=\"amass_linux_arm64.zip\"\n# https://github.com/OJ/gobuster/releases\ngobuster_Ver=\"v3.6.0\"\ngobuster_bin_amd64=\"gobuster_Linux_x86_64.tar.gz\"\ngobuster_bin_arm64=\"gobuster_Linux_arm64.tar.gz\"\n# https://github.com/jaeles-project/gospider/releases\ngospider_Ver=\"v1.1.6\"\ngospider_bin_amd64=\"gospider_v1.1.6_linux_x86_64.zip\"\ngospider_dir_amd64=\"gospider_v1.1.6_linux_x86_64\"\ngospider_bin_arm64=\"gospider_v1.1.6_linux_arm64.zip\"\ngospider_dir_arm64=\"gospider_v1.1.6_linux_arm64\"\n# https://github.com/tomnomnom/unfurl/releases\nunfurl_Ver=\"v0.4.3\"\nunfurl_Bin=\"unfurl-linux-amd64-0.4.3.tgz\"\n# https://github.com/tomnomnom/qsreplace/releases\nqsreplace_Ver=\"v0.0.3\"\nqsreplace_bin=\"qsreplace-linux-amd64-0.0.3.tgz\"\n# https://github.com/jaeles-project/jaeles/releases\njaeles_Ver=\"beta-v0.17\"\njaeles_bin=\"jaeles-v0.17-linux.zip\"\njaeles_sbin=\"jaeles-v0.17-linux\"\n# https://github.com/lc/subjs/releases\nsubjs_Ver=\"v1.0.1\"\nsubjs_bin=\"subjs_1.0.1_linux_amd64.tar.gz\"\n# https://github.com/tomnomnom/assetfinder/releases\nassetfinder_Ver=\"v0.1.1\"\nassetfinder_bin=\"assetfinder-linux-amd64-0.1.1.tgz\"\n# https://github.com/zhzyker/dismap/releases\ndismap_Ver=\"v0.4\"\ndismap_bin_amd64=\"dismap-0.4-linux-amd64\"\ndismap_bin_arm64=\"dismap-0.4-linux-arm64\"\n# https://github.com/robhax/gojwtcrack/releases\ngojwtcrack_Ver=\"0.1\"\ngojwtcrack_bin=\"gojwtcrack-linux-amd64.gz\"\n# https://github.com/fofapro/fapro/releases\nfapro_Ver=\"v0.65\"\nfapro_bin_amd64=\"fapro_linux_x86_64.tar.gz\"\nfapro_bin_arm64=\"fapro_linux_arm64.tar.gz\"\n# https://github.com/wh1t3p1g/ysomap/releases\nysomap_Ver=\"v0.1.5\"\nysomap_bin=\"ysomap.jar\"\nJNDIExploit_Ver=\"1.1\"\nJNDIExploit_bin=\"JNDIExploit.zip\"\n# https://github.com/shmilylty/netspy/releases\nnetspy_Ver=\"v0.0.5\"\nnetspy_bin_amd64=\"netspy_linux_amd64.zip\"\nnetspy_bin_arm64=\"netspy_linux_arm64.zip\"\n# https://github.com/cdk-team/CDK/releases\ncdk_Ver=\"v1.5.3\"\ncdk_bin_amd64=\"cdk_linux_amd64\"\ncdk_bin_arm64=\"cdk_linux_arm64\"\n# https://github.com/projectdiscovery/interactsh/releases\ninteractsh_Ver=\"v1.2.0\"\ninteractsh_client_bin_amd64=\"interactsh-client_1.2.0_Linux_amd64.zip\"\ninteractsh_server_bin_amd64=\"interactsh-server_1.2.0_Linux_amd64.zip\"\ninteractsh_client_bin_arm64=\"interactsh-client_1.2.0_Linux_arm64.zip\"\ninteractsh_server_bin_arm64=\"interactsh-server_1.2.0_Linux_arm64.zip\"\n# https://github.com/BishopFox/sliver/releases\nsliver_Ver=\"v1.5.42\"\nsliver_bin_Server=\"sliver-server_linux\"\nsliver_bin_Client=\"sliver-client_linux\"\n# https://github.com/mstxq17/MoreFind/releases\nMoreFind_Ver=\"v1.5.7\"\nMoreFind_bin_amd64=\"MoreFind_v1.5.7_linux_x86_64.tar.gz\"\nMoreFind_bin_arm64=\"MoreFind_v1.5.7_Linux_arm64.tar.gz\"\n# https://github.com/praetorian-inc/fingerprintx\nfingerprintx_Ver=\"v1.1.13\"\nfingerprintx_Install_amd64=\"fingerprintx_1.1.13_linux_amd64.tar.gz\"\nfingerprintx_Install_arm64=\"fingerprintx_1.1.13_linux_arm64.tar.gz\"\n# https://github.com/teamssix/cf\ncf_Ver=\"v0.5.0\"\ncf_Install_amd64=\"cf_v0.5.0_linux_amd64.tar.gz\"\ncf_Install_arm64=\"cf_v0.5.0_linux_arm64.tar.gz\"\n# https://github.com/su18/ysoserial\nysuserial_Ver=\"v1.5\"\nysuserial_bin=\"ysuserial-1.5-su18-all.jar\"\n# https://github.com/projectdiscovery/katana\nkatana_Ver=\"v1.1.0\"\nkatana_bin_amd64=\"katana_1.1.0_linux_amd64.zip\"\nkatana_bin_arm64=\"katana_1.1.0_linux_arm64.zip\"\n# https://github.com/projectdiscovery/uncover\nuncover_Ver=\"v0.0.9\"\nuncover_bin_amd64=\"uncover_0.0.9_linux_amd64.zip\"\nuncover_bin_arm64=\"uncover_0.0.9_linux_arm64.zip\"\n# https://github.com/pmiaowu/HostCollision\nHostCollision_Ver=\"HostCollision-2.2.8\"\nHostCollision_Bin=\"HostCollision-2.2.8.zip\"\nHostCollision_dir=\"HostCollision-2.2.8\"\n# https://github.com/projectdiscovery/asnmap\nasnmap_Ver=\"v1.1.1\"\nasnmap_bin_amd64=\"asnmap_1.1.1_linux_amd64.zip\"\nasnmap_bin_arm64=\"asnmap_1.1.1_linux_arm64.zip\"\n# https://github.com/projectdiscovery/tlsx\ntlsx_Ver=\"v1.1.7\"\ntlsx_bin_amd64=\"tlsx_1.1.7_linux_amd64.zip\"\ntlsx_bin_arm64=\"tlsx_1.1.7_linux_arm64.zip\"\n# https://github.com/chainreactors/gogo\ngogo_Ver=\"v2.13.3\"\ngogo_File_amd64=\"gogo_linux_amd64\"\ngogo_File_arm64=\"gogo_linux_arm64\"\n# https://github.com/projectdiscovery/simplehttpserver\nsimplehttpserver_Ver=\"v0.0.6\"\nsimplehttpserver_bin_amd64=\"simplehttpserver_0.0.6_linux_amd64.zip\"\nsimplehttpserver_bin_arm64=\"simplehttpserver_0.0.6_linux_arm64.zip\"\n# https://github.com/ropnop/kerbrute\nkerbrute_bin=\"kerbrute_linux_amd64\"\nkerbrute_Ver=\"v1.0.3\"\n# https://github.com/lzzbb/Adinfo\nAdinfo_bin=\"Adinfo_linux\"\nAdinfo_Ver=\"v0.3\"\n# https://github.com/zema1/suo5\nsuo5_Ver=\"v1.3.0\"\nsuo5_bin_amd64=\"suo5-linux-amd64\"\nsuo5_bin_arm64=\"suo5-linux-arm64\"\n# https://github.com/projectdiscovery/alterx\nalterx_Ver=\"v0.0.4\"\nalterx_bin_amd64=\"alterx_0.0.4_linux_amd64.zip\"\nalterx_bin_arm64=\"alterx_0.0.4_linux_arm64.zip\"\n\n# ===================== Software version variable setting (other) =====================\n# https://github.com/AdguardTeam/AdGuardHome/releases\nAdGuardHome_Version=\"v0.107.52\"\nAdGuardHome_File_amd64=\"AdGuardHome_linux_amd64.tar.gz\"\nAdGuardHome_File_arm64=\"AdGuardHome_linux_arm64.tar.gz\"\n# https://github.com/junegunn/fzf/releases\nfzf_Ver=\"0.55.0\"\nfzf_bin_amd64=\"fzf-0.55.0-linux_amd64.tar.gz\"\nfzf_bin_arm64=\"fzf-0.55.0-linux_arm64.tar.gz\"\n# https://github.com/iawia002/lux/releases\nlux_Ver=\"v0.24.1\"\nlux_bin_amd64=\"lux_0.24.1_Linux_x86_64.tar.gz\"\nlux_bin_arm64=\"lux_0.24.1_Linux_ARM64.tar.gz\"\n# https://github.com/tomnomnom/gron/releases\ngron_Ver=\"v0.7.1\"\ngron_bin_amd64=\"gron-linux-amd64-0.7.1.tgz\"\ngron_bin_arm64=\"gron-linux-arm64-0.7.1.tgz\"\n# https://github.com/abhimanyu003/sttr/releases\nsttr_Ver=\"v0.2.23\"\nsttr_bin_amd64=\"sttr_0.2.23_linux_amd64.tar.gz\"\nsttr_bin_arm64=\"sttr_0.2.23_linux_arm64.tar.gz\"\n# https://github.com/sharkdp/bat/releases\nbat_Ver=\"v0.24.0\"\nbat_bin_amd64=\"bat-musl_0.24.0_amd64.deb\"\nbat_bin_arm64=\"bat-musl_0.24.0_i686.deb\"\n# https://github.com/muesli/duf/releases\nduf_Ver=\"v0.8.1\"\nduf_bin1_amd64=\"duf_0.8.1_linux_amd64.rpm\"\nduf_bin2_amd64=\"duf_0.8.1_linux_amd64.deb\"\nduf_bin1_arm64=\"duf_0.8.1_linux_arm64.rpm\"\nduf_bin2_arm64=\"duf_0.8.1_linux_arm64.deb\"\n# https://github.com/dalance/procs/releases\nprocs_Ver=\"v0.14.6\"\nprocs_bin=\"procs-v0.14.6-x86_64-linux.zip\"\n# https://github.com/sharkdp/fd/releases\nfd_Ver=\"v10.2.0\"\nfd_bin_amd64=\"fd_10.2.0_amd64.deb\"\nfd_bin_arm64=\"fd_10.2.0_arm64.deb\"\n# https://github.com/hashicorp/terraform/releases\nTerraform_Ver=\"1.9.5\"\nTerraform_bin_amd64=\"terraform_1.9.5_linux_amd64.zip\"\nTerraform_bin_arm64=\"terraform_1.9.5_linux_arm64.zip\"\n# https://github.com/aliyun/aliyun-cli/releases\naliyun_cli_Ver=\"v3.0.221\"\naliyun_cli_bin_amd64=\"aliyun-cli-linux-3.0.221-amd64.tgz\"\naliyun_cli_bin_arm64=\"aliyun-cli-linux-3.0.221-arm64.tgz\"\n# https://github.com/bcicen/ctop/releases/\nctop_Ver=\"v0.7.7\"\nctop_bin_amd64=\"ctop-0.7.7-linux-amd64\"\nctop_bin_arm64=\"ctop-0.7.7-linux-arm64\"\n# https://github.com/mikefarah/yq\nyq_Ver=\"v4.44.3\"\nyq_bin_amd64=\"yq_linux_amd64\"\nyq_bin_arm64=\"yq_linux_arm64\"\nyq_File_amd64=\"yq_linux_amd64.tar.gz\"\nyq_File_arm64=\"yq_linux_arm64.tar.gz\"\n# https://github.com/Dreamacro/clash\nclash_Ver=\"v1.17.0\"\nclash_bin_amd64=\"clash-linux-amd64-v1.17.0.gz\"\nclash_bin_arm64=\"clash-linux-arm64-v1.17.0.gz\"\nclash_File_amd64=\"clash-linux-amd64-v1.17.0\"\nclash_File_arm64=\"clash-linux-arm64-v1.17.0\"\n\n# ===================== 不可以修改的版本(从我的仓库下载,如果修改版本号,需要同时修改下载链接) =====================\n# https://www.oracle.com/java/technologies/downloads/\njdk8_Version=\"jdk1.8.0_321\"\norclejdk_tmp_ver=\"1.0.5\"\norclejdk8_bin_amd64=\"jdk-8u321-linux-x64.tar.gz\"\norclejdk8_bin_arm64=\"jdk-8u321-linux-aarch64.tar.gz\"\njdk11_Version=\"jdk-11.0.15\"\norclejdk11_bin_amd64=\"jdk-11.0.15_linux-x64_bin.tar.gz\"\norclejdk11_bin_arm64=\"jdk-11.0.15_linux-aarch64_bin.tar.gz\"\njdk17_Version=\"jdk-17.0.8\"\norclejdk17_bin_amd64=\"jdk-17.0.8_linux-x64_bin.tar.gz\"\norclejdk17_bin_arm64=\"jdk-17.0.8_linux-aarch64_bin.tar.gz\"\nCS_File=\"CobaltStrike4.3.zip\"\nCS_Version=\"CobaltStrike4.3\"\nCS45_File=\"CobaltStrike4.5.zip\"\nCS45_Version=\"CobaltStrike4.5\"\n\n# 加载自定义版本配置\nif test -e f8x_version.sh\nthen\n    . ./f8x_version.sh\nfi\n\n# ===================== Base Folder =====================\nBase_Dir(){\n\n    mkdir -p /tmp > /dev/null 2>&1\n\n    if test -d $T_Dir\n    then\n        Echo_INFOR \"$T_Dir folder already exists\"\n    else\n        mkdir -p $T_Dir && Echo_INFOR \"$T_Dir folder created\"\n    fi\n\n    date +\"%Y-%m-%d\" > /tmp/f8x_error.log\n\n}\n\n# ===================== Unlock Module =====================\nRm_Lock(){\n\n    case $Linux_Version in\n        *\"CentOS\"*|*\"RedHat\"*|*\"Fedora\"*|*\"AlmaLinux\"*|*\"VzLinux\"*|*\"Rocky\"*)\n            rm -f /var/run/yum.pid 1> /dev/null 2>> /tmp/f8x_error.log\n            rm -f /var/cache/dnf/metadata_lock.pid 1> /dev/null 2>> /tmp/f8x_error.log\n            ;;\n        *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n            rm -rf /var/cache/apt/archives/lock > /dev/null 2>&1\n            rm -rf /var/lib/dpkg/lock-frontend > /dev/null 2>&1\n            rm -rf /var/lib/dpkg/lock > /dev/null 2>&1\n            rm -rf /var/lib/apt/lists/lock > /dev/null 2>&1\n            apt-get --fix-broken install > /dev/null 2>&1\n            rm -rf /var/cache/apt/archives/lock > /dev/null 2>&1\n            rm -rf /var/lib/dpkg/lock-frontend > /dev/null 2>&1\n            rm -rf /var/lib/dpkg/lock > /dev/null 2>&1\n            rm -rf /var/lib/apt/lists/lock > /dev/null 2>&1\n            ;;\n        *) ;;\n    esac\n\n}\n\nDocker_run_Check(){\n\n    if test -e /.dockerenv\n    then\n        case $(ls -alh /.dockerenv 2>> /tmp/f8x_error.log) in\n        *\"docker\"*)\n            Echo_ALERT \"Currently running in a Docker environment, there may be unanticipated problems\"\n            Docker_OK=1\n            ;;\n        esac\n    else\n        case $(cat /proc/1/cgroup 2>> /tmp/f8x_error.log) in\n        *\"docker\"*)\n            Echo_ALERT \"Currently running in a Docker environment, there may be unanticipated problems\"\n            Docker_OK=1\n            ;;\n        esac\n    fi\n\n}\n\n# ===================== Dependency Check Module =====================\nBase_Check(){\n\n    Echo_ALERT \"Dependencies being checked\"\n    which unzip > /dev/null 2>&1 || error=1\n    which wget > /dev/null 2>&1 || error=1\n    which curl > /dev/null 2>&1 || error=1\n    which vim > /dev/null 2>&1 || error=1\n    which git > /dev/null 2>&1 || error=1\n    which 7za > /dev/null 2>&1 || error=1\n\n    if [ $error == 1 ]\n    then\n        Echo_ALERT \"Dependencies are not passed, basic dependencies will be installed automatically\"\n        Base_Install\n        error=0\n    else\n        Echo_INFOR \"Base dependencies passed\"\n    fi\n\n}\n\nPy_Check(){\n\n    Echo_ALERT \"Checking Python environment availability\"\n    which python2 > /dev/null 2>&1 || error=1\n    which python3 > /dev/null 2>&1 || error=1\n    which pip3 > /dev/null 2>&1 || error=1\n\n    if [ $error == 1 ]\n    then\n        Echo_ALERT \"Python environment check does not pass and starts installing Python environment automatically\"\n        Python3_def_Install\n        Python2_Install\n        error=0\n    else\n        Echo_INFOR \"Python environment passed\"\n    fi\n\n}\n\npip2_Check(){\n\n    case $Linux_Version in\n        *\"Debian\"*)\n            case $Linux_Version_Num in\n                \"12\")\n                    python2 -m pip --version > /dev/null 2>&1\n                    ;;\n                *)\n                    which pip2 > /dev/null 2>&1\n                    ;;\n            esac\n            ;;\n        *)\n            which pip2 > /dev/null 2>&1\n        ;;\n    esac\n\n    if [ $? == 0 ]\n    then\n        Echo_INFOR \"pip2 dependencies are normal\"\n    else\n        Echo_ALERT \"Dependencies not passed, start automatic installation of pip2\"\n        pip2_Install\n        #Python2_Install\n    fi\n}\n\npip3_Check(){\n\n    which pip3 > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_INFOR \"pip3 dependencies are normal\"\n    else\n        Echo_ALERT \"Dependencies not passed, start automatic installation of pip3\"\n        Python3_def_Install\n    fi\n}\n\nnn_Check(){\n\n    echo -e \"\\033[1;33m\\n>> Checking npm & nodejs environment availability\\n\\033[0m\"\n    npm version > /dev/null 2>&1 && Echo_INFOR \"npm available\" || error=1\n    node --version > /dev/null 2>&1 && Echo_INFOR \"node $(node --version) available\" || error=1\n\n    if [ $error == 1 ]\n    then\n        Echo_ALERT \"Dependencies not passed, start automatic installation of npm & nodejs\"\n        nn_Install\n        error=0\n    else\n        Echo_INFOR \"npm & nodejs passed\"\n    fi\n\n}\n\nRust_Check(){\n\n    echo -e \"\\033[1;33m\\n>> Checking Rust environment availability\\n\\033[0m\"\n    cargo -V > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_INFOR \"Rust passed~\"\n    else\n        Echo_ALERT \"Dependencies not passed, start automatic installation of Rust\"\n        Rust_Install\n    fi\n\n}\n\nJDK_Check(){\n\n    Echo_INFOR \"Checking JDK environment availability\"\n    which java > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_INFOR \"jdk passed~\"\n    else\n        Echo_ALERT \"Dependencies not passed, start automatic installation of oracle-jdk\"\n        Oraclejdk_Install\n    fi\n\n}\n\nGO_Check(){\n\n    Echo_INFOR \"Checking GO environment availability\"\n    which go > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_INFOR \"go passed~\"\n    else\n        Echo_ALERT \"Dependencies not passed, start automatic installation of go\"\n        echo -e \"\\033[1;33m\\n>> Installing Go\\n\\033[0m\"\n        Go_Install\n    fi\n\n}\n\nRuby_Check(){\n\n    Echo_INFOR \"Checking Ruby environment availability\"\n    which gem > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_INFOR \"Ruby passed~\"\n    else\n        Echo_ALERT \"Dependencies not passed, start automatic installation of Ruby\"\n        Ruby_Install\n    fi\n\n}\n\nDocker_Check(){\n\n    Echo_INFOR \"Checking Docker environment availability\"\n    which docker > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_INFOR \"Docker passed~\"\n        service docker start > /dev/null 2>&1\n        systemctl start docker > /dev/null 2>&1\n    else\n        Echo_ALERT \"Dependencies not passed, start automatic installation of Docker\"\n        Docker_Install\n    fi\n\n}\n\nDocker_Compose_Check(){\n\n    docker compose version > /dev/null 2>&1\n    if [ $? == 0 ]\n    then\n        Echo_INFOR \"Docker passed~\"\n    else\n        docker_compose_Install\n    fi\n\n    docker-compose -version > /dev/null 2>&1\n    if [ $? == 0 ]\n    then\n        Echo_INFOR \"Docker passed~\"\n    else\n        docker_compose_Install\n    fi\n\n}\n\nmac_Check(){\n\n    case $Running_Mode in\n        *\"Darwin\"*)\n            Echo_ALERT \"Not supported on mac platform\"\n            exit 1\n            ;;\n    esac\n\n}\n\nlinux_arm64_Check(){\n\n    case $Linux_architecture_Name in\n        *\"linux-arm64\"*)\n            Echo_ALERT \"Not supported on current architecture\"\n            exit 1\n            ;;\n    esac\n\n}\n\n# ===================== Abbreviations =====================\nEcho_INFOR(){\n\n    echo -e \"\\033[1;36m$(date +\"%H:%M:%S\")\\033[0m \\033[1;32m[INFOR]\\033[0m - \\033[1;32m$1\\033[0m\"\n\n}\n\nEcho_ALERT(){\n\n    echo -e \"\\033[1;36m$(date +\"%H:%M:%S\")\\033[0m \\033[1;33m[ALERT]\\033[0m - \\033[1;33m$1\\033[0m\"\n\n}\n\nEcho_ERROR(){\n\n    echo -e \"\\033[1;36m$(date +\"%H:%M:%S\")\\033[0m \\033[1;31m[ERROR]\\033[0m - \\033[1;31m$1\\n\\033[0m\"\n\n}\n\nEcho_ERROR2(){\n\n    Echo_ERROR \"$name download failed, please check if the network is reachable, proxychains4 configuration is correct\"\n\n}\n\nEcho_ERROR3(){\n\n    Echo_ERROR \"$name installation failed\"\n\n}\n\nEcho_ERROR4(){\n\n    Echo_ERROR \"$1 git clone failed\"\n\n}\n\nInstall_Switch(){\n\n    case $Linux_Version in\n        *\"CentOS\"*|*\"RedHat\"*|*\"Fedora\"*|*\"AlmaLinux\"*|*\"VzLinux\"*|*\"Rocky\"*)\n            yum install -y $1 1> /dev/null 2>> /tmp/f8x_error.log && Echo_INFOR \"Successfully installed $1 \" && return 0 || { Echo_ERROR \"$1 installation failed\"; return 1; }\n            ;;\n        *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n            apt-get install -y $1 1> /dev/null 2>> /tmp/f8x_error.log && Echo_INFOR \"Successfully installed $1 \" && return 0 || { Echo_ERROR \"$1 installation failed\"; return 1; }\n            ;;\n        *) ;;\n    esac\n\n}\n\nInstall_Switch2(){\n\n    apt-get install -yq --no-install-recommends $1 1> /dev/null 2>> /tmp/f8x_error.log && Echo_INFOR \"Successfully installed $1 \" || Echo_ERROR \"$1 installation failed\"\n\n}\n\nInstall_Switch3(){\n\n    python2 -m pip install $1 > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $1 (python2)\" && return 0 || { Echo_ERROR \"$1 module installation failed, please try changing the pip proxy or check if python2 is installed!\"; return 1; }\n\n}\n\nInstall_Switch4(){\n\n    case $Linux_Version in\n        *\"Debian\"*)\n            case $Linux_Version_Num in\n                \"12\")\n                    python3 -m pip install $1 --break-system-packages 1> /dev/null 2>> /tmp/f8x_error.log && Echo_INFOR \"Successfully installed $1 (python3)\" && return 0 || { Echo_ERROR \"$1 module installation failed\"; return 1; }\n                    ;;\n                *)\n                    pip3 install $1 1> /dev/null 2>> /tmp/f8x_error.log && Echo_INFOR \"Successfully installed $1 (python3)\" && return 0 || { Echo_ERROR \"$1 module installation failed\"; return 1; }\n                    ;;\n            esac\n            ;;\n        *)\n            pip3 install $1 1> /dev/null 2>> /tmp/f8x_error.log && Echo_INFOR \"Successfully installed $1 (python3)\" && return 0 || { Echo_ERROR \"$1 module installation failed\"; return 1; }\n        ;;\n    esac\n\n}\n\nInstall_Switch5(){\n\n\n    case $Linux_Version in\n        *\"Debian\"*)\n            case $Linux_Version_Num in\n                \"12\")\n                    python3 -m pip install $1 --break-system-packages 1> /dev/null 2>> /tmp/f8x_error.log && Echo_INFOR \"Successfully installed $1 (python3)\" && return 0 || { Echo_ERROR \"$1 module installation failed\"; return 1; }\n                    ;;\n                *)\n                    python3 -m pip install $1 1> /dev/null 2>> /tmp/f8x_error.log && Echo_INFOR \"Successfully installed $1 (python3)\" && return 0 || { Echo_ERROR \"$1 module installation failed\"; return 1; }\n                    ;;\n            esac\n            ;;\n        *)\n            python3 -m pip install $1 1> /dev/null 2>> /tmp/f8x_error.log && Echo_INFOR \"Successfully installed $1 (python3)\" && return 0 || { Echo_ERROR \"$1 module installation failed\"; return 1; }\n        ;;\n    esac\n\n}\n\nInstall_Switch6(){\n\n    case $Linux_Version in\n        *\"Debian\"*)\n            case $Linux_Version_Num in\n                \"12\")\n                    python3 -m pip install -r $1 --break-system-packages > /dev/null 2>&1\n                    ;;\n                *)\n                    python3 -m pip install -r $1 > /dev/null 2>&1\n                    ;;\n            esac\n            ;;\n        *)\n            python3 -m pip install -r $1 > /dev/null 2>&1\n        ;;\n    esac\n\n}\n\nInstall_Switch7(){\n\n    case $Linux_Version in\n        *\"Debian\"*)\n            case $Linux_Version_Num in\n                \"12\")\n                    python3 -m pip install -r $1 --break-system-packages > /dev/null 2>&1\n                    ;;\n                *)\n                    pip3 install -r $1 > /dev/null 2>&1\n                    ;;\n            esac\n            ;;\n        *)\n            pip3 install -r $1 > /dev/null 2>&1\n        ;;\n    esac\n\n}\n\n# ===================== Proxy Switch =====================\nProxy_Switch(){\n\n    if test -e /tmp/IS_CI\n    then\n        Echo_INFOR \"IS_CI\"\n    else\n        Echo_ALERT \"Some regions can be configured to use proxies to increase speed\"\n        echo -e \"\\033[1;33m\\n>> Does the runtime need to use a proxy? [y/N,Default N] \\033[0m\" && read -r input\n        case $input in\n            [yY][eE][sS]|[Yy])\n                export GOPROXY=https://proxy.golang.com.cn,direct\n                if test -e /etc/proxychains.conf\n                then\n                    Echo_INFOR \"Proxychains-ng is being called\"\n                    Proxy_OK=proxychains4\n                else\n                    Echo_ALERT \"Proxychains-ng is not detected, start automatic installation\"\n                    Proxychains_Install\n                    Proxy_OK=proxychains4\n                fi\n                ;;\n            *)\n                Echo_INFOR \"Pass~\"\n                ;;\n        esac\n    fi\n\n}\n\nBanner(){\n\n    echo -e \"\\033[1;34m  _______   ___   ___   ___ \\033[0m\"\n    echo -e \"\\033[1;32m |   ____| / _ \\  \\  \\ /  / \\033[0m\"\n    echo -e \"\\033[1;36m |  |__   | (_) |  \\  V  / \\033[0m\"\n    echo -e \"\\033[1;31m |   __|   > _ <    >   < \\033[0m\"\n    echo -e \"\\033[1;35m |  |     | (_) |  /  .  \\ \\033[0m\"\n    echo -e \"\\033[1;33m |__|      \\___/  /__/ \\__\\ \\n\\033[0m\"\n\n}\n\n# ===================== Default =====================\nSys_Version(){\n\n    case \"$(uname -m)\" in\n        *\"arm64\"*|*\"aarch64\"*)\n            Linux_architecture_Name=\"linux-arm64\"\n            ;;\n        *\"x86_64\"*)\n            Linux_architecture_Name=\"linux-x86_64\"\n            ;;\n        *)\n            echo \"Not supported on current architecture\"\n            exit 1\n            ;;\n    esac\n\n    case $(cat /etc/*-release | head -n 3) in\n        *\"Kali\"*|*\"kali\"*)\n            Linux_Version=\"Kali\"\n            case $(cat /etc/*-release | head -n 4) in\n                *\"2022\"*)\n                    Linux_Version_Num=\"kali-rolling\"\n                    Linux_Version_Name=\"buster\"\n                    ;;\n                *\"2021\"*)\n                    Linux_Version_Num=\"kali-rolling\"\n                    Linux_Version_Name=\"buster\"\n                    ;;\n                *\"2020\"*)\n                    Linux_Version_Num=\"kali-rolling\"\n                    Linux_Version_Name=\"buster\"\n                    ;;\n                *)\n                    Linux_Version_Num=\"kali-rolling\"\n                    Linux_Version_Name=\"stretch\"\n                    ;;\n            esac\n            ;;\n        *\"Ubuntu\"*|*\"ubuntu\"*)\n            Linux_Version=\"Ubuntu\"\n            case $(cat /etc/*-release | head -n 4) in\n                *\"noble\"*)\n                    Linux_Version_Num=\"24.04\"\n                    Linux_Version_Name=\"noble\"\n                    ;;\n                *\"mantic\"*)\n                    Linux_Version_Num=\"23.10\"\n                    Linux_Version_Name=\"mantic\"\n                    ;;\n                *\"lunar\"*)\n                    Linux_Version_Num=\"23.04\"\n                    Linux_Version_Name=\"lunar\"\n                    ;;\n                *\"kinetic\"*)\n                    Linux_Version_Num=\"22.10\"\n                    Linux_Version_Name=\"kinetic\"\n                    ;;\n                *\"jammy\"*)\n                    Linux_Version_Num=\"22.04\"\n                    Linux_Version_Name=\"jammy\"\n                    ;;\n                *\"impish\"*)\n                    Linux_Version_Num=\"21.10\"\n                    Linux_Version_Name=\"impish\"\n                    ;;\n                *\"hirsute\"*)\n                    Linux_Version_Num=\"21.04\"\n                    Linux_Version_Name=\"hirsute\"\n                    ;;\n                *\"groovy\"*)\n                    Linux_Version_Num=\"20.10\"\n                    Linux_Version_Name=\"groovy\"\n                    ;;\n                *\"focal\"*)\n                    Linux_Version_Num=\"20.04\"\n                    Linux_Version_Name=\"focal\"\n                    ;;\n                *\"eoan\"*)\n                    Linux_Version_Num=\"19.10\"\n                    Linux_Version_Name=\"eoan\"\n                    ;;\n                *\"disco\"*)\n                    Linux_Version_Num=\"19.04\"\n                    Linux_Version_Name=\"disco\"\n                    ;;\n                *\"cosmic\"*)\n                    Linux_Version_Num=\"18.10\"\n                    Linux_Version_Name=\"cosmic\"\n                    ;;\n                *\"bionic\"*)\n                    Linux_Version_Num=\"18.04\"\n                    Linux_Version_Name=\"bionic\"\n                    ;;\n                *\"xenial\"*)\n                    Linux_Version_Num=\"16.04\"\n                    Linux_Version_Name=\"xenial\"\n                    ;;\n                *\"vivid\"*)\n                    Linux_Version_Num=\"15.04\"\n                    Linux_Version_Name=\"vivid\"\n                    ;;\n                *\"trusty\"*)\n                    Linux_Version_Num=\"14.04\"\n                    Linux_Version_Name=\"trusty\"\n                    ;;\n                *\"precise\"*)\n                    Linux_Version_Num=\"12.04\"\n                    Linux_Version_Name=\"precise\"\n                    ;;\n                *)\n                    Echo_ALERT \"Unknown Ubuntu Codename, attempting automatic adaptation.\"\n                    Linux_Version_Num=$(cat /etc/*-release | awk -F \"=\" '/DISTRIB_RELEASE/ {print $2}')\n                    Linux_Version_Name=$(cat /etc/*-release | awk -F \"=\" '/DISTRIB_CODENAME/ {print $2}')\n                    ;;\n            esac\n            ;;\n        *\"Debian\"*|*\"debian\"*)\n            Linux_Version=\"Debian\"\n            case $(cat /etc/*-release | head -n 4) in\n                *\"bookworm\"*)\n                    Linux_Version_Num=\"12\"\n                    Linux_Version_Name=\"bookworm\"\n                    ;;\n                *\"bullseye\"*)\n                    Linux_Version_Num=\"11\"\n                    Linux_Version_Name=\"bullseye\"\n                    ;;\n                *\"buster\"*)\n                    Linux_Version_Num=\"10\"\n                    Linux_Version_Name=\"buster\"\n                    ;;\n                *\"stretch\"*)\n                    Linux_Version_Num=\"9\"\n                    Linux_Version_Name=\"stretch\"\n                    ;;\n                *\"jessie\"*)\n                    Linux_Version_Num=\"8\"\n                    Linux_Version_Name=\"jessie\"\n                    ;;\n                *\"wheezy\"*)\n                    Linux_Version_Num=\"7\"\n                    Linux_Version_Name=\"wheezy\"\n                    ;;\n                *)\n                    Echo_ALERT \"Unknown Debian Codename, attempting automatic adaptation.\"\n                    Linux_Version_Num=$(grep -Po '(?<=VERSION_ID=\")\\d+' /etc/*-release)\n                    Linux_Version_Name=$(cat /etc/*-release | awk -F \"=\" '/VERSION_CODENAME/ {print $2}')\n                    ;;\n            esac\n            ;;\n        *\"CentOS\"*|*\"centos\"*)\n            wget_option=\"\"\n            echo -e \"\\033[1;31mPlease replace your Centos, as Centos will not be maintained.\\033[0m\"\n            Linux_Version=\"CentOS\"\n            case $(cat /etc/*-release | head -n 1) in\n                *\"Stream release 9\"*)\n                    Linux_Version_Num=\"9 Stream\"\n                    Linux_Version_Name=\"\"\n                    ;;\n                *\"Stream release 8\"*)\n                    Linux_Version_Num=\"8 Stream\"\n                    Linux_Version_Name=\"\"\n                    ;;\n                *\"release 8\"*)\n                    Linux_Version_Num=\"8\"\n                    Linux_Version_Name=\"\"\n                    ;;\n                *\"release 7\"*)\n                    Linux_Version_Num=\"7\"\n                    Linux_Version_Name=\"\"\n                    ;;\n                *\"release 6\"*)\n                    Linux_Version_Num=\"6\"\n                    Linux_Version_Name=\"\"\n                    ;;\n                *)\n                    Echo_ERROR \"Unknown CentOS Codename\"\n                    exit 1\n                    ;;\n            esac\n            ;;\n        *\"RedHat\"*|*\"redhat\"*)\n            Linux_Version=\"RedHat\"\n            ;;\n        *\"Fedora\"*|*\"fedora\"*)\n            Linux_Version=\"Fedora\"\n            case $(cat /etc/*-release | head -n 1) in\n                *\"release 40\"*)\n                    Linux_Version_Num=\"40\"\n                    Linux_Version_Name=\"\"\n                    ;;\n                *\"release 39\"*)\n                    Linux_Version_Num=\"39\"\n                    Linux_Version_Name=\"\"\n                    ;;\n                *\"release 38\"*)\n                    Linux_Version_Num=\"38\"\n                    Linux_Version_Name=\"\"\n                    ;;\n                *\"release 37\"*)\n                    Linux_Version_Num=\"37\"\n                    Linux_Version_Name=\"\"\n                    ;;\n                *\"release 36\"*)\n                    Linux_Version_Num=\"36\"\n                    Linux_Version_Name=\"\"\n                    ;;\n                *\"release 35\"*)\n                    Linux_Version_Num=\"35\"\n                    Linux_Version_Name=\"\"\n                    ;;\n                *\"release 34\"*)\n                    Linux_Version_Num=\"34\"\n                    Linux_Version_Name=\"\"\n                    ;;\n                *\"release 33\"*)\n                    Linux_Version_Num=\"33\"\n                    Linux_Version_Name=\"\"\n                    ;;\n                *\"release 32\"*)\n                    Linux_Version_Num=\"32\"\n                    Linux_Version_Name=\"\"\n                    ;;\n                *)\n                    Echo_ALERT \"Unknown Fedora Codename, attempting automatic adaptation.\"\n                    Linux_Version_Num=$(cat /etc/*-release | awk -F \"=\" '/VERSION_ID/ {print $2}')\n                    Linux_Version_Name=\"\"\n                    ;;\n            esac\n            ;;\n        *\"AlmaLinux\"*)\n            Linux_Version=\"AlmaLinux\"\n            ;;\n        *\"Virtuozzo\"*)\n            Linux_Version=\"VzLinux\"\n            ;;\n        *\"Rocky\"*)\n            Linux_Version=\"Rocky\"\n            ;;\n        *)\n            Echo_ERROR \"Unknown version\"\n            echo -e \"\\033[1;33m\\nPlease enter distribution Kali[k] Ubuntu[u] Debian[d] Centos[c] RedHat[r] Fedora[f] AlmaLinux[a] VzLinux[v] Rocky[r]\\033[0m\" && read -r input\n            case $input in\n                [kK])\n                    Linux_Version=\"Kali\"\n                    ;;\n                [uU])\n                    Linux_Version=\"Ubuntu\"\n                    echo -e \"\\033[1;33m\\nPlease enter the system version number [22.04] [21.10] [21.04] [20.10] [20.04] [19.10] [19.04] [18.10] [18.04] [16.04] [15.04] [14.04] [12.04]\\033[0m\" && read -r input\n                    Linux_Version_Name=$input\n                    ;;\n                [dD])\n                    Linux_Version=\"Debian\"\n                    echo -e \"\\033[1;33m\\nPlease enter the system version number [11] [10] [9] [8] [7]\\033[0m\" && read -r input\n                    Linux_Version_Name=$input\n                    ;;\n                [cC])\n                    Linux_Version=\"CentOS\"\n                    echo -e \"\\033[1;33m\\nPlease enter the system version number [9 Stream] [8 Stream] [8] [7] [6]\\033[0m\" && read -r input\n                    Linux_Version_Name=$input\n                    ;;\n                [rR])\n                    Linux_Version=\"RedHat\"\n                    ;;\n                [aA])\n                    Linux_Version=\"AlmaLinux\"\n                    ;;\n                [fF])\n                    Linux_Version=\"Fedora\"\n                    echo -e \"\\033[1;33m\\nPlease enter the system version number [36] [35] [34] [33] [32]\\033[0m\" && read -r input\n                    Linux_Version_Name=$input\n                    ;;\n                [vV])\n                    Linux_Version=\"VzLinux\"\n                    ;;\n                [rR])\n                    Linux_Version=\"Rocky\"\n                    ;;\n                *)\n                    Echo_ERROR \"Unknown version\"\n                    exit 1\n                    ;;\n            esac\n            ;;\n    esac\n\n}\n\nSys_Version_Mac(){\n\n    Linux_Version=\"$(sw_vers -ProductName)\"\n\n    case \"$(uname -m)\" in\n        *\"arm64\"*)\n            Linux_architecture_Name=\"mac-arm64\"\n            Linux_Version_Num=\"$(sw_vers -productVersion)\"\n            Linux_Version_Name=\"$(sw_vers -BuildVersion)\"\n\n            P_Dir=\"~/pentest\"\n            T_Dir=\"~/ffffffff0x\"\n            ;;\n        *)\n            echo \"Not supported on current architecture\"\n            exit 1\n            ;;\n    esac\n\n}\n\nSys_Info(){\n\n    echo -e \"\\033[1;32mUID           :\\033[0m \\033[1;35m$UID \\033[0m\"\n    echo -e \"\\033[1;32mUser          :\\033[0m \\033[1;35m$(whoami) \\033[0m\"\n    echo -e \"\\033[1;32mDate          :\\033[0m \\033[1;35m$(date +\"%Y-%m-%d\") \\033[0m\"\n    echo -e \"\\033[1;32mTime          :\\033[0m \\033[1;35m$(date +\"%H:%M:%S\") \\033[0m\"\n    echo -e \"\\033[1;32mRuntime       :\\033[0m \\033[1;35m$(uptime 2>/dev/null | awk '{print $3 $4}' | sed 's/\\,.*$//g') \\033[0m\"\n    echo -e \"\\033[1;32mHostname      :\\033[0m \\033[1;35m$(hostname) \\033[0m\"\n    echo -e \"\\033[1;32mDistribution  :\\033[0m \\033[1;35m$Linux_Version $Linux_Version_Num $Linux_Version_Name $Linux_architecture_Name\\033[0m\"\n    echo -e \"\\033[1;32mf8x Version   :\\033[0m \\033[1;35m$F8x_Version \\033[0m\"\n\n    case $Linux_Version in\n        *\"CentOS\"*|*\"RedHat\"*|*\"Fedora\"*|*\"AlmaLinux\"*|*\"VzLinux\"*|*\"Rocky\"*)\n            if test -e /var/log/secure\n            then\n                echo -e \"\\033[1;32mLast login IP :\\033[0m\"\n                echo -e \"\\033[1;35m$(grep 'Accepted' /var/log/secure | awk '{print $11}' | sort | uniq -c | sort -nr) \\033[0m\"\n            fi\n            ;;\n        *\"Kali\"*)\n                echo \"\" > /dev/null\n            ;;\n        *)\n            if test -e /var/log/auth.log\n            then\n                echo -e \"\\033[1;32mLast login IP :\\033[0m\"\n                echo -e \"\\033[1;35m$(grep --text \"Accepted \" /var/log/auth.log | awk '{print $11}' | sort | uniq -c | sort -nr) \\033[0m\"\n            fi\n            ;;\n\n    esac\n\n}\n\n# ===================== Update apt source =====================\nUpdate_APT_Mirror(){\n\n    Echo_INFOR \"Updating $Linux_Version apt source\"\n\n    case $Linux_Version in\n        *\"Kali\"*)\n            Echo_INFOR \"kali\"\n            Echo_INFOR \"Backed up apt source\"\n            Update_kali_Mirror \"$1\" > /dev/null\n            ;;\n        *\"Ubuntu\"*)\n            case $Linux_Version_Num in\n                \"22.04\")\n                    Echo_INFOR \"Ubuntu22.04\"\n                    Echo_INFOR \"Backed up apt source\"\n                    Update_Ubuntu2204_Mirror \"$1\" > /dev/null\n                    ;;\n                \"21.10\")\n                    Echo_INFOR \"Ubuntu21.10\"\n                    Echo_INFOR \"Backed up apt source\"\n                    Update_Ubuntu2110_Mirror \"$1\" > /dev/null\n                    ;;\n                \"21.04\")\n                    Echo_INFOR \"Ubuntu21.04\"\n                    Echo_INFOR \"Backed up apt source\"\n                    Update_Ubuntu2104_Mirror \"$1\" > /dev/null\n                    ;;\n                \"20.10\")\n                    Echo_INFOR \"Ubuntu20.10\"\n                    Echo_INFOR \"Backed up apt source\"\n                    Update_Ubuntu2010_Mirror \"$1\" > /dev/null\n                    ;;\n                \"20.04\")\n                    Echo_INFOR \"Ubuntu20.04\"\n                    Echo_INFOR \"Backed up apt source\"\n                    Update_Ubuntu2004_Mirror \"$1\" > /dev/null\n                    ;;\n                \"19.10\")\n                    Echo_INFOR \"Ubuntu19.10\"\n                    Echo_INFOR \"Backed up apt source\"\n                    Update_Ubuntu1910_Mirror \"$1\" > /dev/null\n                    ;;\n                \"19.04\")\n                    Echo_INFOR \"Ubuntu19.04\"\n                    Echo_INFOR \"Backed up apt source\"\n                    Update_Ubuntu1804_Mirror \"$1\" > /dev/null\n                    ;;\n                \"18.10\")\n                    Echo_INFOR \"Ubuntu18.10\"\n                    Echo_INFOR \"Backed up apt source\"\n                    Update_Ubuntu1804_Mirror \"$1\" > /dev/null\n                    ;;\n                \"18.04\")\n                    Echo_INFOR \"Ubuntu18.04\"\n                    Echo_INFOR \"Backed up apt source\"\n                    Update_Ubuntu1804_Mirror \"$1\" > /dev/null\n                    ;;\n                \"16.04\")\n                    Echo_INFOR \"Ubuntu16.04\"\n                    Echo_INFOR \"Backed up apt source\"\n                    Update_Ubuntu1604_Mirror \"$1\" > /dev/null\n                    ;;\n                \"15.04\")\n                    Echo_INFOR \"Ubuntu15.04\"\n                    Echo_INFOR \"Backed up apt source\"\n                    Update_Ubuntu1504_Mirror \"$1\" > /dev/null\n                    ;;\n                \"14.04\")\n                    Echo_INFOR \"Ubuntu14.04\"\n                    Echo_INFOR \"Backed up apt source\"\n                    Update_Ubuntu1404_Mirror \"$1\" > /dev/null\n                    ;;\n                \"12.04\")\n                    Echo_INFOR \"Ubuntu12.04\"\n                    Echo_INFOR \"Backed up apt source\"\n                    Update_Ubuntu1204_Mirror \"$1\" > /dev/null\n                    ;;\n                *)\n                    Echo_ERROR \"Version error\"\n                    ;;\n            esac\n            ;;\n        *\"Debian\"*)\n            case $Linux_Version_Num in\n                \"12\")\n                    Echo_INFOR \"Debian12\"\n                    Echo_INFOR \"Backed up apt source\"\n                    Update_Debian12_Mirror \"$1\" > /dev/null\n                    ;;\n                \"11\")\n                    Echo_INFOR \"Debian11\"\n                    Echo_INFOR \"Backed up apt source\"\n                    Update_Debian11_Mirror \"$1\" > /dev/null\n                    ;;\n                \"10\")\n                    Echo_INFOR \"Debian10\"\n                    Echo_INFOR \"Backed up apt source\"\n                    Update_Debian10_Mirror \"$1\" > /dev/null\n                    ;;\n                \"9\")\n                    Echo_INFOR \"Debian9\"\n                    Echo_INFOR \"Backed up apt source\"\n                    Update_Debian9_Mirror \"$1\" > /dev/null\n                    ;;\n                \"8\")\n                    Echo_INFOR \"Debian8\"\n                    Echo_INFOR \"Backed up apt source\"\n                    Update_Debian8_Mirror \"$1\" > /dev/null\n                    ;;\n                \"7\")\n                    Echo_INFOR \"Debian7\"\n                    Echo_INFOR \"Backed up apt source\"\n                    Update_Debian7_Mirror > /dev/null\n                    ;;\n                *)\n                    Echo_ERROR \"Version error\"\n                    ;;\n            esac\n            ;;\n    esac\n\n    Echo_INFOR \"Updating apt package list\"\n    Rm_Lock\n    apt-get update 1> /dev/null 2>> /tmp/f8x_error.log || Echo_ERROR \"Update apt package list failed\"\n\n}\n\n# ===================== Modify kali apt source =====================\nUpdate_kali_Mirror(){\nrm -f /etc/apt/sources.list.bak > /dev/null 2>&1 && cp /etc/apt/sources.list /etc/apt/sources.list.bak > /dev/null 2>&1\n\nif [ $1 == aliyun ] 2>> /tmp/f8x_error.log\nthen\n\ntee /etc/apt/sources.list <<-'EOF'\ndeb https://mirrors.aliyun.com/kali kali-rolling main non-free contrib\n# deb-src https://mirrors.aliyun.com/kali kali-rolling main non-free contrib\nEOF\n\nelse\n\ntee /etc/apt/sources.list <<-'EOF'\ndeb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free\nEOF\n\nfi\n\n}\n\n# ===================== Modify Ubuntu apt sources =====================\nUpdate_Ubuntu2204_Mirror(){\nrm -f /etc/apt/sources.list.bak > /dev/null 2>&1 && cp /etc/apt/sources.list /etc/apt/sources.list.bak > /dev/null 2>&1\n\nif [ $1 == aliyun ] 2>> /tmp/f8x_error.log\nthen\n\ntee /etc/apt/sources.list <<-'EOF'\ndeb http://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ jammy-updates main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ jammy-backports main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ jammy-security main restricted universe multiverse\nEOF\n\nelse\n\ntee /etc/apt/sources.list <<-'EOF'\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-security main restricted universe multiverse\nEOF\n\nfi\n\n}\n\nUpdate_Ubuntu2110_Mirror(){\nrm -f /etc/apt/sources.list.bak > /dev/null 2>&1 && cp /etc/apt/sources.list /etc/apt/sources.list.bak > /dev/null 2>&1\n\nif [ $1 == aliyun ] 2>> /tmp/f8x_error.log\nthen\n\ntee /etc/apt/sources.list <<-'EOF'\ndeb http://mirrors.aliyun.com/ubuntu/ impish main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ impish-updates main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ impish-backports main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ impish-security main restricted universe multiverse\nEOF\n\nelse\n\ntee /etc/apt/sources.list <<-'EOF'\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ impish main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ impish-updates main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ impish-backports main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ impish-security main restricted universe multiverse\nEOF\n\nfi\n\n}\n\nUpdate_Ubuntu2104_Mirror(){\nrm -f /etc/apt/sources.list.bak > /dev/null 2>&1 && cp /etc/apt/sources.list /etc/apt/sources.list.bak > /dev/null 2>&1\n\nif [ $1 == aliyun ] 2>> /tmp/f8x_error.log\nthen\n\ntee /etc/apt/sources.list <<-'EOF'\ndeb http://mirrors.aliyun.com/ubuntu/ hirsute main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ hirsute-updates main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ hirsute-backports main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ hirsute-security main restricted universe multiverse\nEOF\n\nelse\n\ntee /etc/apt/sources.list <<-'EOF'\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ hirsute main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ hirsute-updates main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ hirsute-backports main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ hirsute-security main restricted universe multiverse\nEOF\n\nfi\n\n}\n\nUpdate_Ubuntu2010_Mirror(){\nrm -f /etc/apt/sources.list.bak > /dev/null 2>&1 && cp /etc/apt/sources.list /etc/apt/sources.list.bak > /dev/null 2>&1\n\nif [ $1 == aliyun ] 2>> /tmp/f8x_error.log\nthen\n\ntee /etc/apt/sources.list <<-'EOF'\ndeb http://mirrors.aliyun.com/ubuntu/ groovy main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ groovy-updates main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ groovy-backports main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ groovy-security main restricted universe multiverse\nEOF\n\nelse\n\ntee /etc/apt/sources.list <<-'EOF'\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ groovy main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ groovy-updates main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ groovy-backports main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ groovy-security main restricted universe multiverse\nEOF\n\nfi\n\n}\n\nUpdate_Ubuntu2004_Mirror(){\nrm -f /etc/apt/sources.list.bak > /dev/null 2>&1 && cp /etc/apt/sources.list /etc/apt/sources.list.bak > /dev/null 2>&1\n\nif [ $1 == aliyun ] 2>> /tmp/f8x_error.log\nthen\n\ntee /etc/apt/sources.list <<-'EOF'\ndeb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse\nEOF\n\nelse\n\ntee /etc/apt/sources.list <<-'EOF'\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse\nEOF\n\nfi\n\n}\n\nUpdate_Ubuntu1910_Mirror(){\nrm -f /etc/apt/sources.list.bak > /dev/null 2>&1 && cp /etc/apt/sources.list /etc/apt/sources.list.bak > /dev/null 2>&1\n\nif [ $1 == aliyun ] 2>> /tmp/f8x_error.log\nthen\n\ntee /etc/apt/sources.list <<-'EOF'\ndeb http://mirrors.aliyun.com/ubuntu/ eoan main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ eoan-updates main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ eoan-backports main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ eoan-security main restricted universe multiverse\nEOF\n\nelse\n\ntee /etc/apt/sources.list <<-'EOF'\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ eoan main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ eoan-updates main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ eoan-backports main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ eoan-security main restricted universe multiverse\nEOF\n\nfi\n\n}\n\nUpdate_Ubuntu1804_Mirror(){\nrm -f /etc/apt/sources.list.bak > /dev/null 2>&1 && cp /etc/apt/sources.list /etc/apt/sources.list.bak > /dev/null 2>&1\n\nif [ $1 == aliyun ] 2>> /tmp/f8x_error.log\nthen\n\ntee /etc/apt/sources.list <<-'EOF'\ndeb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse\nEOF\n\nelse\n\ntee /etc/apt/sources.list <<-'EOF'\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse\nEOF\n\nfi\n\n}\n\nUpdate_Ubuntu1604_Mirror(){\nrm -f /etc/apt/sources.list.bak > /dev/null 2>&1 && cp /etc/apt/sources.list /etc/apt/sources.list.bak > /dev/null 2>&1\n\nif [ $1 == aliyun ] 2>> /tmp/f8x_error.log\nthen\n\ntee /etc/apt/sources.list <<-'EOF'\ndeb http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse\nEOF\n\nelse\n\ntee /etc/apt/sources.list <<-'EOF'\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse\nEOF\n\nfi\n\n}\n\nUpdate_Ubuntu1504_Mirror(){\nrm -f /etc/apt/sources.list.bak > /dev/null 2>&1 && cp /etc/apt/sources.list /etc/apt/sources.list.bak > /dev/null 2>&1\n\nif [ $1 == aliyun ] 2>> /tmp/f8x_error.log\nthen\n\ntee /etc/apt/sources.list <<-'EOF'\ndeb http://mirrors.aliyun.com/ubuntu/ vivid main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ vivid-updates main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ vivid-backports main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ vivid-security main restricted universe multiverse\nEOF\n\nelse\n\ntee /etc/apt/sources.list <<-'EOF'\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ vivid main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ vivid-updates main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ vivid-backports main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ vivid-security main restricted universe multiverse\nEOF\n\nfi\n\n}\n\nUpdate_Ubuntu1404_Mirror(){\nrm -f /etc/apt/sources.list.bak > /dev/null 2>&1 && cp /etc/apt/sources.list /etc/apt/sources.list.bak > /dev/null 2>&1\n\nif [ $1 == aliyun ] 2>> /tmp/f8x_error.log\nthen\n\ntee /etc/apt/sources.list <<-'EOF'\ndeb http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse\nEOF\n\nelse\n\ntee /etc/apt/sources.list <<-'EOF'\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-updates main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-backports main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-security main restricted universe multiverse\nEOF\n\nfi\n\n}\n\nUpdate_Ubuntu1204_Mirror(){\nrm -f /etc/apt/sources.list.bak > /dev/null 2>&1 && cp /etc/apt/sources.list /etc/apt/sources.list.bak > /dev/null 2>&1\n\nif [ $1 == aliyun ] 2>> /tmp/f8x_error.log\nthen\n\ntee /etc/apt/sources.list <<-'EOF'\ndeb http://mirrors.aliyun.com/ubuntu/ precise main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ precise-updates main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ precise-backports main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ precise-security main restricted universe multiverse\nEOF\n\nelse\n\ntee /etc/apt/sources.list <<-'EOF'\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ precise main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ precise-updates main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ precise-backports main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ precise-security main restricted universe multiverse\nEOF\n\nfi\n\n}\n\n# ===================== 修改 Debian apt 源 (Modifying Debian apt sources) =====================\nUpdate_Debian12_Mirror(){\nrm -f /etc/apt/sources.list.bak > /dev/null 2>&1 && cp /etc/apt/sources.list /etc/apt/sources.list.bak > /dev/null 2>&1\n\nif [ $1 == aliyun ] 2>> /tmp/f8x_error.log\nthen\n\ntee /etc/apt/sources.list <<-'EOF'\ndeb http://mirrors.aliyun.com/debian/ bookworm main non-free contrib\ndeb http://mirrors.aliyun.com/debian/ bookworm-updates main non-free contrib\ndeb http://mirrors.aliyun.com/debian/ bookworm-backports main non-free contrib\ndeb http://mirrors.aliyun.com/debian-security bookworm/updates main\nEOF\n\nelse\n\ntee /etc/apt/sources.list <<-'EOF'\ndeb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm main contrib non-free\ndeb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-updates main contrib non-free\ndeb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-backports main contrib non-free\ndeb https://mirrors.tuna.tsinghua.edu.cn/debian-security bookworm-security main contrib non-free\nEOF\n\nfi\n\n}\n\nUpdate_Debian11_Mirror(){\nrm -f /etc/apt/sources.list.bak > /dev/null 2>&1 && cp /etc/apt/sources.list /etc/apt/sources.list.bak > /dev/null 2>&1\n\nif [ $1 == aliyun ] 2>> /tmp/f8x_error.log\nthen\n\ntee /etc/apt/sources.list <<-'EOF'\ndeb http://mirrors.aliyun.com/debian/ bullseye main non-free contrib\ndeb http://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib\ndeb http://mirrors.aliyun.com/debian/ bullseye-backports main non-free contrib\ndeb http://mirrors.aliyun.com/debian-security bullseye/updates main\nEOF\n\nelse\n\ntee /etc/apt/sources.list <<-'EOF'\ndeb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye main contrib non-free\ndeb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-updates main contrib non-free\ndeb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-backports main contrib non-free\ndeb https://mirrors.tuna.tsinghua.edu.cn/debian-security bullseye-security main contrib non-free\nEOF\n\nfi\n\n}\n\nUpdate_Debian10_Mirror(){\nrm -f /etc/apt/sources.list.bak > /dev/null 2>&1 && cp /etc/apt/sources.list /etc/apt/sources.list.bak > /dev/null 2>&1\n\nif [ $1 == aliyun ] 2>> /tmp/f8x_error.log\nthen\n\ntee /etc/apt/sources.list <<-'EOF'\ndeb http://mirrors.aliyun.com/debian/ buster main non-free contrib\ndeb http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib\ndeb http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib\ndeb http://mirrors.aliyun.com/debian-security buster/updates main\nEOF\n\nelse\n\ntee /etc/apt/sources.list <<-'EOF'\ndeb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free\ndeb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free\ndeb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free\ndeb https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free\nEOF\n\nfi\n\n}\n\nUpdate_Debian9_Mirror(){\nrm -f /etc/apt/sources.list.bak > /dev/null 2>&1 && cp /etc/apt/sources.list /etc/apt/sources.list.bak > /dev/null 2>&1\n\nif [ $1 == aliyun ] 2>> /tmp/f8x_error.log\nthen\n\ntee /etc/apt/sources.list <<-'EOF'\ndeb http://mirrors.aliyun.com/debian/ stretch main non-free contrib\ndeb http://mirrors.aliyun.com/debian/ stretch-updates main non-free contrib\ndeb http://mirrors.aliyun.com/debian/ stretch-backports main non-free contrib\ndeb http://mirrors.aliyun.com/debian-security stretch/updates main\nEOF\n\nelse\n\ntee /etc/apt/sources.list <<-'EOF'\ndeb https://mirrors.tuna.tsinghua.edu.cn/debian/ stretch main contrib non-free\ndeb https://mirrors.tuna.tsinghua.edu.cn/debian/ stretch-updates main contrib non-free\ndeb https://mirrors.tuna.tsinghua.edu.cn/debian/ stretch-backports main contrib non-free\ndeb https://mirrors.tuna.tsinghua.edu.cn/debian-security stretch/updates main contrib non-free\nEOF\n\nfi\n\n}\n\nUpdate_Debian8_Mirror(){\nrm -f /etc/apt/sources.list.bak > /dev/null 2>&1 && cp /etc/apt/sources.list /etc/apt/sources.list.bak > /dev/null 2>&1\n\nif [ $1 == aliyun ] 2>> /tmp/f8x_error.log\nthen\n\ntee /etc/apt/sources.list <<-'EOF'\ndeb http://mirrors.aliyun.com/debian/ jessie main non-free contrib\ndeb http://mirrors.aliyun.com/debian/ jessie-proposed-updates main non-free contrib\nEOF\n\nelse\n\ntee /etc/apt/sources.list <<-'EOF'\ndeb https://mirrors.tuna.tsinghua.edu.cn/debian/ jessie main contrib non-free\ndeb https://mirrors.tuna.tsinghua.edu.cn/debian/ jessie-updates main contrib non-free\ndeb https://mirrors.tuna.tsinghua.edu.cn/debian-security jessie/updates main contrib non-free\nEOF\n\nfi\n\n}\n\nUpdate_Debian7_Mirror(){\nrm -f /etc/apt/sources.list.bak > /dev/null 2>&1 && cp /etc/apt/sources.list /etc/apt/sources.list.bak > /dev/null 2>&1\ntee /etc/apt/sources.list <<-'EOF'\ndeb http://mirrors.aliyun.com/debian/ wheezy main non-free contrib\ndeb http://mirrors.aliyun.com/debian/ wheezy-proposed-updates main non-free contrib\nEOF\n\n}\n\n# ===================== Modifying YUM sources =====================\nUpdate_YUM_Mirror(){\n\n    Echo_ALERT \"Updating $Linux_Version yum sources\"\n\n    case $Linux_Version in\n        *\"CentOS\"*)\n            Update_CentOS_Mirror \"$1\"\n            Update_EPEL_Mirror \"$1\"\n            ;;\n        *\"RedHat\"*)\n            Echo_INFOR \"RedHat Pass~\"\n            ;;\n        *\"AlmaLinux\"*)\n            Echo_INFOR \"AlmaLinux Pass~\"\n            ;;\n        *\"VzLinux\"*)\n            Echo_INFOR \"VzLinux Pass~\"\n            ;;\n        *\"Rocky\"*)\n            Echo_INFOR \"Rocky Pass~\"\n            ;;\n        *\"Fedora\"*)\n            Echo_INFOR \"Fedora\"\n            rm -f /etc/yum.repos.d/fedora.repo.repo.bak > /dev/null 2>&1 && cp /etc/yum.repos.d/fedora.repo /etc/yum.repos.d/fedora.repo.bak > /dev/null 2>&1 && Echo_INFOR \"Backed up Yum sources\"\n\n            if [ $1 == aliyun ] 2>> /tmp/f8x_error.log\n            then\n                curl -o /etc/yum.repos.d/fedora.repo http://mirrors.aliyun.com/repo/fedora.repo > /dev/null 2>&1 && Echo_INFOR \"Downloaded aliyun Yum sources\" || Echo_ERROR \"aliyun Yum sources download failed\"\n                curl -o /etc/yum.repos.d/fedora-updates.repo http://mirrors.aliyun.com/repo/fedora-updates.repo > /dev/null 2>&1 && Echo_INFOR \"Downloaded aliyun Yum update sources\" || Echo_ERROR \"aliyun Yum update sources download failed\"\n            elif [ $1 == huawei ] 2>> /tmp/f8x_error.log\n            then\n                curl -o /etc/yum.repos.d/fedora.repo https://f8x.io/repo/fedora.repo > /dev/null 2>&1 && Echo_INFOR \"Downloaded huaweicloud Yum sources\" || Echo_ERROR \"huaweicloud Yum sources download failed\"\n                curl -o /etc/yum.repos.d/fedora-updates.repo https://f8x.io/repo/fedora-updates.repo > /dev/null 2>&1 && Echo_INFOR \"Downloaded huaweicloud Yum update sources\" || Echo_ERROR \"huaweicloud Yum update sources download failed\"\n            elif [ $1 == tuna ] 2>> /tmp/f8x_error.log\n            then\n                curl -o /etc/yum.repos.d/fedora.repo https://f8x.io/tuna/fedora.repo > /dev/null 2>&1 && Echo_INFOR \"Downloaded tuna Yum sources\" || Echo_ERROR \"tuna Yum sources download failed\"\n                curl -o /etc/yum.repos.d/fedora-updates.repo https://f8x.io/tuna/fedora-updates.repo > /dev/null 2>&1 && Echo_INFOR \"Downloaded tuna Yum update sources\" || Echo_ERROR \"tuna Yum update sources download failed\"\n            fi\n            ;;\n    esac\n\n    Echo_ALERT \"Updating yum cache\"\n    yum clean all > /dev/null 2>&1\n    Rm_Lock\n\n    case $Linux_Version in\n        *\"Fedora\"*)\n            Echo_ALERT \"Fedora ＞﹏＜\"\n            ;;\n        *)\n            yum makecache 1> /dev/null 2>> /tmp/f8x_error.log /dev/null || Echo_ERROR \"Yum makecache failed\"\n            ;;\n    esac\n\n}\n\n# ===================== Modify CentOS EPEL sources =====================\nUpdate_EPEL_Mirror(){\n\n    if test -e /etc/yum.repos.d/epel.repo\n    then\n        Echo_INFOR \"EPEL source is installed\"\n    else\n        Echo_ALERT \"epel source not detected, being installed automatically\"\n        Rm_Lock\n        case $Linux_Version_Num in\n            \"9 Stream\")\n                Install_Switch \"epel-release\"\n                ;;\n            \"8 Stream\")\n                Install_Switch \"epel-release\"\n                ;;\n            8)\n                if [ $1 == aliyun ] 2>> /tmp/f8x_error.log\n                then\n                    yum install -y https://mirrors.aliyun.com/epel/epel-release-latest-8.noarch.rpm > /dev/null 2>&1 && Echo_INFOR \"Downloaded aliyun EPEL sources\" || Echo_ERROR \"aliyun EPEL sources download failed\"\n                    sed -i 's|^#baseurl=https://download.fedoraproject.org/pub|baseurl=https://mirrors.aliyun.com|' /etc/yum.repos.d/epel*\n                    sed -i 's|^metalink|#metalink|' /etc/yum.repos.d/epel*\n                elif [ $1 == huawei ] 2>> /tmp/f8x_error.log\n                then\n                    yum install -y https://mirrors.huaweicloud.com/epel/epel-release-latest-8.noarch.rpm > /dev/null 2>&1 && Echo_INFOR \"Downloaded huaweicloud EPEL sources\" || Echo_ERROR \"huaweicloud EPEL sources download failed\"\n                elif [ $1 == tuna ] 2>> /tmp/f8x_error.log\n                then\n                    curl -o /etc/yum.repos.d/epel.repo https://f8x.io/tuna/epel-8.repo > /dev/null 2>&1 && Echo_INFOR \"Downloaded tuna EPEL sources\" || Echo_ERROR \"tuna EPEL sources download failed\"\n                fi\n                ;;\n            7)\n                if [ $1 == aliyun ] 2>> /tmp/f8x_error.log\n                then\n                    curl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo > /dev/null 2>&1 && Echo_INFOR \"Downloaded aliyun EPEL sources\" || Echo_ERROR \"aliyun EPEL sources download failed\"\n                elif [ $1 == huawei ] 2>> /tmp/f8x_error.log\n                then\n                    curl -o /etc/yum.repos.d/epel.repo https://f8x.io/repo/epel-7.repo > /dev/null 2>&1 && Echo_INFOR \"Downloaded huaweicloud EPEL sources\" || Echo_ERROR \"huaweicloud EPEL sources download failed\"\n                elif [ $1 == tuna ] 2>> /tmp/f8x_error.log\n                then\n                    curl -o /etc/yum.repos.d/epel.repo https://f8x.io/tuna/epel-7.repo > /dev/null 2>&1 && Echo_INFOR \"Downloaded tuna EPEL sources\" || Echo_ERROR \"tuna EPEL sources download failed\"\n                fi\n                ;;\n            6)\n                if [ $1 == aliyun ] 2>> /tmp/f8x_error.log\n                then\n                    curl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-6.repo > /dev/null 2>&1 && Echo_INFOR \"Downloaded aliyun EPEL sources\" || Echo_ERROR \"aliyun EPEL sources download failed\"\n                else\n                    curl -o /etc/yum.repos.d/epel.repo https://f8x.io/tuna/epel-6.repo > /dev/null 2>&1 && Echo_INFOR \"Downloaded tuna EPEL sources\" || Echo_ERROR \"tuna EPEL sources download failed\"\n                fi\n                ;;\n            *)\n                Echo_ERROR \"Version error\"\n                ;;\n        esac\n    fi\n\n}\n\n# ===================== Modify CentOS YUM sources =====================\nUpdate_CentOS_Mirror(){\n# CentOS 8和CentOS 6 及以下版本已被华为云官网下线\n\n    case $Linux_Version_Num in\n        \"9 Stream\")\n            Echo_INFOR \"pass\"\n            ;;\n        \"8 Stream\")\n            Echo_INFOR \"pass\"\n            ;;\n        8)\n            rm -f /etc/yum.repos.d/CentOS-Base.repo.bak > /dev/null 2>&1 && cp /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak > /dev/null 2>&1 && Echo_INFOR \"Backed up Yum sources\"\n            if [ $1 == aliyun ] 2>> /tmp/f8x_error.log\n            then\n                curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-8.repo > /dev/null 2>&1 && Echo_INFOR \"Downloaded aliyun Yum sources\" || Echo_ERROR \"aliyun Yum sources download failed\"\n            else\n                curl -o /etc/yum.repos.d/CentOS-Base.repo https://f8x.io/tuna/Centos-8.repo > /dev/null 2>&1 && Echo_INFOR \"Downloaded tuna Yum sources\" || Echo_ERROR \"tuna Yum sources download failed\"\n            fi\n            ;;\n        7)\n            rm -f /etc/yum.repos.d/CentOS-Base.repo.bak > /dev/null 2>&1 && cp /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak > /dev/null 2>&1 && Echo_INFOR \"Backed up Yum sources\"\n\n            if [ $1 == aliyun ] 2>> /tmp/f8x_error.log\n            then\n                curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo > /dev/null 2>&1 && Echo_INFOR \"Downloaded aliyun Yum sources\" || Echo_ERROR \"aliyun Yum sources download failed\"\n            elif [ $1 == huawei ] 2>> /tmp/f8x_error.log\n            then\n                curl -o /etc/yum.repos.d/CentOS-Base.repo https://f8x.io/repo/Centos-7.repo > /dev/null 2>&1 && Echo_INFOR \"Downloaded huaweicloud Yum sources\" || Echo_ERROR \"huaweicloud Yum sources download failed\"\n            elif [ $1 == tuna ] 2>> /tmp/f8x_error.log\n            then\n                curl -o /etc/yum.repos.d/CentOS-Base.repo https://f8x.io/tuna/Centos-7.repo > /dev/null 2>&1 && Echo_INFOR \"Downloaded tuna Yum sources\" || Echo_ERROR \"tuna Yum sources download failed\"\n            fi\n            ;;\n        6)\n            rm -f /etc/yum.repos.d/CentOS-Base.repo.bak > /dev/null 2>&1 && cp /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak > /dev/null 2>&1 && Echo_INFOR \"Backed up Yum sources\"\n\n            if [ $1 == aliyun ] 2>> /tmp/f8x_error.log\n            then\n                curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-6.repo > /dev/null 2>&1 && Echo_INFOR \"Downloaded aliyun Yum sources\" || Echo_ERROR \"aliyun Yum sources download failed\"\n            else\n                curl -o /etc/yum.repos.d/CentOS-Base.repo https://f8x.io/tuna/Centos-6.repo > /dev/null 2>&1 && Echo_INFOR \"Downloaded tuna Yum sources\" || Echo_ERROR \"tuna Yum sources download failed\"\n            fi\n            ;;\n        *)\n            Echo_ERROR \"Version error\"\n            ;;\n    esac\n\n}\n\n# ===================== Modify system package manager source =====================\nMirror(){\n\n    case $Linux_Version in\n        *\"CentOS\"*|*\"RedHat\"*|*\"Fedora\"*|*\"AlmaLinux\"*|*\"VzLinux\"*|*\"Rocky\"*)\n            echo -e \"\\033[1;33m\\n>> Update yum source? [Y/n,Default Y]\\033[0m\" && read -r input\n            case $input in\n                [nN][oO]|[nN])\n                    Echo_INFOR \"Pass~\"\n                    ;;\n                *)\n                    Update_YUM_Mirror \"$1\"\n                    Echo_INFOR \"yum source updated\"\n                    ;;\n            esac\n            ;;\n        *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n            echo -e \"\\033[1;33m\\n>> Update apt source? [Y/n,Default Y]\\033[0m\" && read -r input\n            case $input in\n                [nN][oO]|[nN])\n                    Echo_INFOR \"Pass~\"\n                    ;;\n                *)\n                    Update_APT_Mirror \"$1\"\n                    Echo_INFOR \"apt source updated\"\n                    ;;\n\n            esac\n            ;;\n        *)\n            Echo_ERROR \"Unknown version, update package source failed\"\n            ;;\n    esac\n\n    echo -e \"\\033[1;33m\\n>> Configuring the pip proxy\\n\\033[0m\"\n    pip_Proxy \"$1\" > /dev/null\n\n    Echo_INFOR \"Updated pip Proxy\"\n\n    echo -e \"\\033[1;33m\\n>> Configuring the docker proxy\\n\\033[0m\"\n    Docker_Proxy > /dev/null\n    systemctl restart docker > /dev/null 2>&1\n    systemctl daemon-reload > /dev/null 2>&1\n\n    Echo_INFOR \"Updated docker Proxy\"\n\n}\n\n# ===================== Check DNS IP format =====================\nChange_DNS_IP(){\n\n    read -r input\n\n    case $input in\n        [nN][oO]|[nN])\n            Echo_INFOR \"Pass~\"\n            ;;\n        *)\n            echo -e \"\\033[5;33mPlease enter the DNS server address [Default is $Default_DNS]\\033[0m\" && read -r input\n\n            VALID_CHECK=$(echo \"$input\"|awk -F. '$1<=255&&$2<=255&&$3<=255&&$4<=255{print \"yes\"}')\n            if echo \"$input\"|grep -E \"^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$\">/dev/null; then\n                if [ \"${VALID_CHECK:-no}\" == \"yes\" ]; then\n                    Default_DNS=$input\n                    Change_DNS\n                else\n                    Echo_ERROR \"$input invalid\"\n                    Change_DNS\n                fi\n            else\n                Echo_ERROR \"$input invalid\"\n                Change_DNS\n            fi\n            ;;\n    esac\n\n}\n\n# ===================== Update DNS =====================\nChange_DNS(){\n\n    echo \"nameserver $Default_DNS\" > /etc/resolv.conf\n    Echo_INFOR \"The default DNS is configured as: $Default_DNS\"\n\n}\n\n# ===================== Install DNS tools =====================\nDNS_T00ls(){\n\n    case $Linux_Version in\n        *\"CentOS\"*|*\"RedHat\"*|*\"Fedora\"*|*\"AlmaLinux\"*|*\"VzLinux\"*|*\"Rocky\"*)\n            Echo_INFOR \"RedHat system does not have resolvconf, this item Pass\"\n            ;;\n        *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n            Rm_Lock\n            Install_Switch \"resolvconf\"\n            echo \"nameserver $Default_DNS\" > /etc/resolvconf/resolv.conf.d/head\n            resolvconf -u ;;\n        *) ;;\n    esac\n\n}\n\n# ===================== Install Proxychains-ng =====================\nProxychains_Install(){\n\n    Rm_Lock\n    Install_Switch \"gcc\"\n    Install_Switch \"git\"\n    Install_Switch \"vim\"\n    Install_Switch \"make\"\n    Install_Switch \"wget\"\n    Install_Switch \"zip\"\n    Install_Switch \"unzip\"\n    case $Linux_Version in\n        *\"CentOS\"*|*\"RedHat\"*|*\"Fedora\"*|*\"AlmaLinux\"*|*\"VzLinux\"*|*\"Rocky\"*)\n            Install_Switch \"gcc-c++\"\n            ;;\n        *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n            Install_Switch \"g++\"\n            Install_Switch \"ca-certificates\"\n            ;;\n        *) ;;\n    esac\n\n    case $Linux_Version in\n        *\"Kali\"*)\n            rm -f /etc/proxychains.conf > /dev/null 2>&1\n            ;;\n        *) ;;\n    esac\n\n    if test -e /etc/proxychains.conf\n    then\n        Echo_ALERT \"Proxychains-ng installed\"\n    else\n        echo -e \"\\033[1;33m\\n>> Do you need to install proxychains-ng from ffffffff0x.com [Y/n,Default Y]\\033[0m\" && read -r input\n\n        case $input in\n            [nN][oO]|[nN])\n                cd $T_Dir && rm -rf proxychains-ng* > /dev/null 2>&1 && git clone --depth 1 ${GitProxy}https://github.com/rofl0r/proxychains-ng.git $T_Dir/proxychains-ng > /dev/null 2>&1 && Echo_INFOR \"Downloaded from github.com\" || Echo_ERROR \"Download failed\"\n                ;;\n            *)\n                cd $T_Dir && rm -rf proxychains-ng* > /dev/null 2>&1 && wget -O proxychains-ng.zip \"$Proxy_URL\" > /dev/null 2>&1 && Echo_INFOR \"Downloaded from ffffffff0x.com\" || Echo_ERROR \"Download failed\"\n                unzip proxychains-ng.zip > /dev/null 2>&1 && rm -f proxychains-ng.zip > /dev/null 2>&1\n                mv --force proxychains-ng-master proxychains-ng\n                ;;\n        esac\n\n        chmod -R 777 $T_Dir/proxychains-ng > /dev/null 2>&1\n        cd $T_Dir/proxychains-ng && chmod +x configure > /dev/null 2>&1\n        ./configure > /dev/null 2>&1\n        chmod +x ./tools/install.sh > /dev/null 2>&1\n        make > /dev/null 2>&1 && make install > /dev/null 2>&1\n        cp $T_Dir/proxychains-ng/src/proxychains.conf /etc/proxychains.conf\n        cd .. && rm -rf proxychains-ng > /dev/null 2>&1\n        vim /etc/proxychains.conf\n        Echo_INFOR \"Successfully installed Proxychains-ng, the configuration file is /etc/proxychains.conf\"\n    fi\n\n}\n\n# ===================== pip proxy =====================\npip_Proxy(){\n\nmkdir -p ~/.pip/\n\nif [ $1 == aliyun ] 2>> /tmp/f8x_error.log\nthen\n\ntee ~/.pip/pip.conf <<-'EOF'\n[global]\nindex-url = https://mirrors.aliyun.com/pypi/simple/\n\n[install]\ntrusted-host=mirrors.aliyun.com\nEOF\n\nelse\n\ntee ~/.pip/pip.conf <<-'EOF'\n[global]\nindex-url = https://pypi.tuna.tsinghua.edu.cn/simple/\n\n[install]\ntrusted-host=https://pypi.tuna.tsinghua.edu.cn\nEOF\n\nfi\n\n}\n\n# ===================== docker proxy =====================\nDocker_Proxy(){\n\nmkdir -p /etc/docker\ntee /etc/docker/daemon.json <<-'EOF'\n{\n  \"registry-mirrors\": [\"https://docker.mirrors.ustc.edu.cn\"]\n}\nEOF\n\n}\n\n# ===================== Install basic tools =====================\nBase_Tools(){\n\n    case $Linux_Version in\n        *\"CentOS\"*)\n            Update_EPEL_Mirror\n            ;;\n        *\"AlmaLinux\"*)\n            Rm_Lock\n            Install_Switch \"epel-release\"\n            ;;\n        *\"VzLinux\"*)\n            Rm_Lock\n            Install_Switch \"epel-release\"\n            ;;\n        *\"Rocky\"*)\n            Rm_Lock\n            Install_Switch \"epel-release\"\n            ;;\n        *) ;;\n    esac\n\n    Rm_Lock\n\n    case $Linux_Version in\n        *\"CentOS\"*|*\"RedHat\"*|*\"Fedora\"*|*\"AlmaLinux\"*|*\"VzLinux\"*|*\"Rocky\"*)\n            Install_Switch \"yum-utils\"\n            Install_Switch \"dnf\"\n            Install_Switch \"gcc-c++\"\n            Install_Switch \"glibc-headers\"\n            Install_Switch \"openssl-devel\"\n            Install_Switch \"kernel-devel\"\n            yum upgrade -y wget > /dev/null 2>&1\n            ;;\n        *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n            apt-get update > /dev/null 2>&1\n            Install_Switch \"zip\"\n            Install_Switch \"apt-transport-https\"\n            Install_Switch \"ca-certificates\"\n            Install_Switch \"p7zip-full\"\n            Install_Switch \"libssl-dev\"\n            Install_Switch \"libssh2-1-dev\"\n            Install_Switch \"aptitude\"\n            Install_Switch \"libcurl4-openssl-dev\"\n            Install_Switch \"apt-file\"\n            Install_Switch \"g++\"\n            ;;\n        *) ;;\n    esac\n\n    Install_Switch \"vim\"\n    Install_Switch \"make\"\n    Install_Switch \"cmake\"\n    Install_Switch \"gcc\"\n    Install_Switch \"git\"\n    Install_Switch \"curl\"\n    Install_Switch \"wget\"\n    Install_Switch \"lrzsz\"\n    Install_Switch \"unzip\"\n    Install_Switch \"p7zip\"\n    Install_Switch \"jq\"\n    Install_Switch \"openssl\"\n    Install_Switch \"unhide\"\n    Install_Switch \"net-tools\"\n    Install_Switch \"dos2unix\"\n    Install_Switch \"tmux\"\n\n}\n\n# ===================== Install development environment dependencies =====================\nDev_Base_Install(){\n\n    if test -e /tmp/f8x_Dev_Base.txt\n    then\n        Echo_ALERT \"Dependent installation records are detected, skip this step\"\n    else\n        echo -e \"\\033[1;33m\\n>> Installing development environment dependencies\\n\\033[0m\"\n\n        Rm_Lock\n        Install_Switch \"tree\"\n        Install_Switch \"tcpdump\"\n        case $Linux_Version in\n            *\"CentOS\"*|*\"RedHat\"*|*\"Fedora\"*|*\"AlmaLinux\"*|*\"VzLinux\"*|*\"Rocky\"*)\n                yum groupinstall -y \"Development Tools\" > /dev/null 2>&1 && Echo_INFOR \"Successfully installed Development Tools\" || Echo_ERROR \"Failed to install Development Tools\"\n                ;;\n            *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n                Install_Switch \"software-properties-common\"\n                Install_Switch \"build-essential\"\n                Install_Switch \"xfonts-intl-chinese\"\n                Install_Switch \"ttf-wqy-microhei\"\n                Install_Switch \"ttf-wqy-zenhei\"\n                Install_Switch \"xfonts-wqy\"\n                Install_Switch \"nethogs\"\n                ;;\n            *)\n                ;;\n        esac\n\n        touch /tmp/f8x_Dev_Base.txt > /dev/null 2>&1\n    fi\n\n}\n\n# ===================== Install Python and pip =====================\nPython3_Install(){\n\n    name=\"Python3\"\n\n    case \"$1\" in\n        py37)\n            pyenv_Install\n            Python37_Install_with_pyenv\n            # Python37_Install\n            ;;\n        py38)\n            pyenv_Install\n            Python38_Install_with_pyenv\n            # Python38_Install\n            ;;\n        py39)\n            pyenv_Install\n            Python39_Install_with_pyenv\n            # Python39_Install\n            ;;\n        py310)\n            pyenv_Install\n            Python310_Install_with_pyenv\n            # Python310_Install\n            ;;\n        *)\n            Python3_def_Install\n            ;;\n    esac\n\n}\n\npyenv_Install(){\n\n    name=\"pyenv\"\n    dir=\"$T_Dir/.pyenv\"\n    echo -e \"\\033[1;33m\\n>> Installing $name\\n\\033[0m\"\n\n    which pyenv > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_INFOR \"$name installed\"\n    else\n        if test -d $dir\n        then\n            Echo_ALERT \"$name is already installed in $dir\"\n        else\n            Base_Tools\n\n            Dev_Base_Install\n\n            case $Linux_Version in\n                *\"CentOS\"*|*\"RedHat\"*|*\"Fedora\"*|*\"AlmaLinux\"*|*\"VzLinux\"*|*\"Rocky\"*)\n                    Install_Switch \"bzip2\"\n                    Install_Switch \"bzip2-devel\"\n                    Install_Switch \"readline-devel\"\n                    Install_Switch \"sqlite\"\n                    Install_Switch \"sqlite-devel\"\n                    Install_Switch \"openssl-devel\"\n                    Install_Switch \"tk-devel\"\n                    Install_Switch \"libffi-devel\"\n                    Install_Switch \"xz-devel\"\n                    Install_Switch \"zlib-devel\"\n                    ;;\n                *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n                    Install_Switch \"zlib1g-dev\"\n                    Install_Switch \"libbz2-dev\"\n                    Install_Switch \"libedit-dev\"\n                    Install_Switch \"libncurses5-dev\"\n                    Install_Switch \"libreadline-dev\"\n                    Install_Switch \"libsqlite3-dev\"\n                    Install_Switch \"llvm\"\n                    Install_Switch \"libncursesw5-dev\"\n                    Install_Switch \"xz-utils\"\n                    Install_Switch \"tk-dev\"\n                    Install_Switch \"libffi-dev\"\n                    Install_Switch \"liblzma-dev\"\n                    ;;\n                *) ;;\n            esac\n\n            $Proxy_OK git clone --depth 1 ${GitProxy}https://github.com/pyenv/pyenv.git $dir > /dev/null 2>&1 && Echo_INFOR \"Successfully installed pyenv, environment variables may need to be re-entered in bash to take effect\\nexport PYENV_ROOT=\\\"$T_Dir/.pyenv\\\"\\ncommand -v pyenv >/dev/null || export PATH=\\\"\\$PYENV_ROOT/bin:\\$PATH\\\"\\neval \\\"\\$(pyenv init -)\\\"\" || Echo_ERROR2\n\n            case $Linux_Version in\n                *\"CentOS\"*|*\"RedHat\"*|*\"Fedora\"*|*\"AlmaLinux\"*|*\"VzLinux\"*|*\"Rocky\"*)\n                    echo \"export PYENV_ROOT=\\\"$T_Dir/.pyenv\\\"\" >> /etc/bashrc\n                    echo 'command -v pyenv >/dev/null || export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> /etc/bashrc\n                    echo 'eval \"$(pyenv init -)\"' >> /etc/bashrc\n                    ;;\n                *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n                    echo \"export PYENV_ROOT=\\\"$T_Dir/.pyenv\\\"\" >> /etc/bash.bashrc\n                    echo 'command -v pyenv >/dev/null || export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> /etc/bash.bashrc\n                    echo 'eval \"$(pyenv init -)\"' >> /etc/bash.bashrc\n                    ;;\n                *) ;;\n            esac\n        fi\n    fi\n\n}\n\nPython3_def_Install(){\n\n    Rm_Lock\n    Install_Switch \"python3\"\n    case $Linux_Version in\n        *\"CentOS\"*|*\"RedHat\"*|*\"Fedora\"*|*\"AlmaLinux\"*|*\"VzLinux\"*|*\"Rocky\"*)\n            Install_Switch \"python3-devel\"\n            Install_Switch \"python3-pip\"\n            python3 -m pip install --upgrade pip > /dev/null 2>&1 && Echo_INFOR \"Updated python3-pip\" || Echo_ERROR \"Update python3-pip failed\"\n\n            Install_Switch4 \"setuptools\"\n            Install_Switch4 \"virtualenv\"\n            ;;\n        *\"Kali\"*|*\"Debian\"*)\n            apt-get update > /dev/null 2>&1\n            Install_Switch \"python3-dev\"\n            Install_Switch \"python3-pip\"\n            Install_Switch \"python3-venv\"\n            Install_Switch \"python3-distutils\"\n            python3 -m pip install --upgrade pip > /dev/null 2>&1 && Echo_INFOR \"Updated python3-pip\" || Echo_ERROR \"Update python3-pip failed\"\n            ;;\n        *\"Ubuntu\"*)\n            apt-get update > /dev/null 2>&1\n            Install_Switch \"python3-dev\"\n            Install_Switch \"python3-pip\"\n            Install_Switch \"python3-venv\"\n            Install_Switch \"python3-distutils\"\n            case $Linux_Version_Num in\n                \"16.04\")\n                    mkdir -p /tmp/get-pip && cd /tmp/get-pip && rm -rf get-pip.py && $Proxy_OK wget https://bootstrap.pypa.io/pip/3.5/get-pip.py > /dev/null 2>&1\n                    $Proxy_OK python3 get-pip.py > /dev/null 2>&1\n                    rm -rf /tmp/get-pip && cd /tmp\n                    ;;\n            esac\n            python3 -m pip install --upgrade pip > /dev/null 2>&1 && Echo_INFOR \"Updated python3-pip\" || Echo_ERROR \"Update python3-pip failed\"\n            ;;\n        *)\n            ;;\n    esac\n\n}\n\nPython37_Install_with_pyenv(){\n\n    name=\"Python3.7\"\n\n    export PYENV_ROOT=\"$T_Dir/.pyenv\"\n    command -v pyenv >/dev/null || export PATH=\"$PYENV_ROOT/bin:$PATH\" > /dev/null 2>&1\n    eval \"$(pyenv init -)\" > /dev/null 2>&1\n\n    echo -e \"\\033[1;33m\\n>> Installing $name\\n\\033[0m\"\n\n    if [ \"$(pyenv versions | grep $py37_ver)\" ]\n    then\n        Echo_INFOR \"$name installed, Please run the following command:\\npyenv global $py37_ver && pyenv local $py37_ver\"\n        pyenv global $py37_ver && pyenv local $py37_ver\n    else\n        mkdir -p ~/.pyenv/cache/ && cd $_ && rm -f $py37_bin && $Proxy_OK wget https://www.python.org/ftp/python/$py37_ver/$py37_bin ${wget_option} && Echo_INFOR \"Downloaded from python.org\" || Echo_ERROR \"download failed, please check if the network is reachable, proxychains4 configuration is correct\"\n        pyenv install $py37_ver && pyenv global $py37_ver && pyenv local $py37_ver && Echo_INFOR \"Successfully installed Python, Please run the following command:\\npyenv global $py37_ver && pyenv local $py37_ver\"\n        rm -rf $py37_bin && cd /tmp\n    fi\n\n}\n\nPython37_Install(){\n\n    name=\"Python3.7\"\n    mkdir -p /tmp/py37 && cd $_ && rm -f $py37_bin && $Proxy_OK wget https://www.python.org/ftp/python/$py37_ver/$py37_bin ${wget_option} && Echo_INFOR \"Downloaded from python.org\" || Echo_ERROR \"download failed, please check if the network is reachable, proxychains4 configuration is correct\"\n    tar -xvJf $py37_bin > /dev/null 2>&1 && cd $py37_dir\n    Echo_INFOR \"configure\"\n    ./configure --prefix=/usr/local/python3 > /dev/null 2>&1\n    Echo_INFOR \"make\"\n    make > /dev/null 2>&1\n    Echo_INFOR \"make install\"\n    make install > /dev/null 2>&1\n\n    rm -f /usr/bin/python3\n    ln -s /usr/local/python3/bin/python3 /usr/bin/python3\n    python3 -V > /dev/null 2>&1 && Echo_INFOR \"Installation Location : /usr/local/python3\" || Echo_ERROR3\n    Echo_INFOR \"py3 output: $(python3 -V)\"\n\n    case $Linux_Version in\n        *\"CentOS\"*|*\"RedHat\"*|*\"Fedora\"*|*\"AlmaLinux\"*|*\"VzLinux\"*|*\"Rocky\"*)\n            echo \"PATH=\\$PATH:/usr/local/python3/bin\" >> /etc/bashrc\n            ;;\n        *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n            echo \"PATH=\\$PATH:/usr/local/python3/bin\" >> /etc/bash.bashrc\n            ;;\n        *) ;;\n    esac\n\n    rm -f /usr/bin/lsb_release > /dev/null 2>&1\n    python3 -m ensurepip > /dev/null 2>&1\n    python3 -m pip install --upgrade pip > /dev/null 2>&1\n\n    Echo_INFOR \"pip3 output: $(pip3 -V)\"\n    rm -rf /tmp/py37 && cd /tmp\n\n}\n\nPython38_Install_with_pyenv(){\n\n    name=\"Python3.8\"\n\n    export PYENV_ROOT=\"$T_Dir/.pyenv\"\n    command -v pyenv >/dev/null || export PATH=\"$PYENV_ROOT/bin:$PATH\" > /dev/null 2>&1\n    eval \"$(pyenv init -)\" > /dev/null 2>&1\n\n    echo -e \"\\033[1;33m\\n>> Installing $name\\n\\033[0m\"\n\n    if [ \"$(pyenv versions | grep $py38_ver)\" ]\n    then\n        Echo_INFOR \"$name installed, Please run the following command:\\npyenv global $py38_ver && pyenv local $py38_ver\"\n        pyenv global $py38_ver && pyenv local $py38_ver\n    else\n        mkdir -p ~/.pyenv/cache/ && cd $_ && rm -f $py38_bin && $Proxy_OK wget https://www.python.org/ftp/python/$py38_ver/$py38_bin ${wget_option} && Echo_INFOR \"Downloaded from python.org\" || Echo_ERROR \"download failed, please check if the network is reachable, proxychains4 configuration is correct\"\n        pyenv install $py38_ver && pyenv global $py38_ver && pyenv local $py38_ver && Echo_INFOR \"Successfully installed Python, Please run the following command:\\npyenv global $py38_ver && pyenv local $py38_ver\"\n        rm -rf $py38_bin && cd /tmp\n    fi\n\n}\n\nPython38_Install(){\n\n    name=\"Python3.8\"\n    mkdir -p /tmp/py38 && cd $_ && rm -f $py38_bin && $Proxy_OK wget https://www.python.org/ftp/python/$py38_ver/$py38_bin ${wget_option} && Echo_INFOR \"Downloaded from python.org\" || Echo_ERROR \"download failed, please check if the network is reachable, proxychains4 configuration is correct\"\n    tar -xvJf $py38_bin > /dev/null 2>&1 && cd $py38_dir\n    Echo_INFOR \"configure\"\n    ./configure --prefix=/usr/local/python3 > /dev/null 2>&1\n    Echo_INFOR \"make\"\n    make > /dev/null 2>&1\n    Echo_INFOR \"make install\"\n    make install > /dev/null 2>&1\n\n    rm -f /usr/bin/python3\n    ln -s /usr/local/python3/bin/python3 /usr/bin/python3\n    python3 -V > /dev/null 2>&1 && Echo_INFOR \"Installation Location : /usr/local/python3\" || Echo_ERROR3\n    Echo_INFOR \"py3 output: $(python3 -V)\"\n\n    case $Linux_Version in\n        *\"CentOS\"*|*\"RedHat\"*|*\"Fedora\"*|*\"AlmaLinux\"*|*\"VzLinux\"*|*\"Rocky\"*)\n            echo \"PATH=\\$PATH:/usr/local/python3/bin\" >> /etc/bashrc\n            ;;\n        *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n            echo \"PATH=\\$PATH:/usr/local/python3/bin\" >> /etc/bash.bashrc\n            ;;\n        *) ;;\n    esac\n\n    rm -f /usr/bin/lsb_release > /dev/null 2>&1\n    python3 -m ensurepip > /dev/null 2>&1\n    python3 -m pip install --upgrade pip > /dev/null 2>&1\n\n    Echo_INFOR \"pip3 output: $(pip3 -V)\"\n    rm -rf /tmp/py38 && cd /tmp\n\n}\n\nPython39_Install_with_pyenv(){\n\n    name=\"Python3.9\"\n\n    export PYENV_ROOT=\"$T_Dir/.pyenv\"\n    command -v pyenv >/dev/null || export PATH=\"$PYENV_ROOT/bin:$PATH\" > /dev/null 2>&1\n    eval \"$(pyenv init -)\" > /dev/null 2>&1\n\n    echo -e \"\\033[1;33m\\n>> Installing $name\\n\\033[0m\"\n\n    if [ \"$(pyenv versions | grep $py39_ver)\" ]\n    then\n        Echo_INFOR \"$name installed, Please run the following command:\\npyenv global $py39_ver && pyenv local $py39_ver\"\n        pyenv global $py39_ver && pyenv local $py39_ver\n    else\n        mkdir -p ~/.pyenv/cache/ && cd $_ && rm -f $py39_bin && $Proxy_OK wget https://www.python.org/ftp/python/$py39_ver/$py39_bin ${wget_option} && Echo_INFOR \"Downloaded from python.org\" || Echo_ERROR \"download failed, please check if the network is reachable, proxychains4 configuration is correct\"\n        pyenv install $py39_ver && pyenv global $py39_ver && pyenv local $py39_ver && Echo_INFOR \"Successfully installed Python, Please run the following command:\\npyenv global $py39_ver && pyenv local $py39_ver\"\n        rm -rf $py39_bin && cd /tmp\n    fi\n\n}\n\nPython39_Install(){\n\n    name=\"Python3.9\"\n    mkdir -p /tmp/py39 && cd $_ && rm -f $py39_bin && $Proxy_OK wget https://www.python.org/ftp/python/$py39_ver/$py39_bin ${wget_option} && Echo_INFOR \"Downloaded from python.org\" || Echo_ERROR \"download failed, please check if the network is reachable, proxychains4 configuration is correct\"\n    tar -xvJf $py39_bin > /dev/null 2>&1 && cd $py39_dir\n    Echo_INFOR \"configure\"\n    ./configure --prefix=/usr/local/python3 > /dev/null 2>&1\n    Echo_INFOR \"make\"\n    make > /dev/null 2>&1\n    Echo_INFOR \"make install\"\n    make install > /dev/null 2>&1\n\n    rm -f /usr/bin/python3\n    ln -s /usr/local/python3/bin/python3 /usr/bin/python3\n    python3 -V > /dev/null 2>&1 && Echo_INFOR \"Installation Location : /usr/local/python3\" || Echo_ERROR3\n    Echo_INFOR \"py3 output: $(python3 -V)\"\n\n    case $Linux_Version in\n        *\"CentOS\"*|*\"RedHat\"*|*\"Fedora\"*|*\"AlmaLinux\"*|*\"VzLinux\"*|*\"Rocky\"*)\n            echo \"PATH=\\$PATH:/usr/local/python3/bin\" >> /etc/bashrc\n            ;;\n        *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n            echo \"PATH=\\$PATH:/usr/local/python3/bin\" >> /etc/bash.bashrc\n            ;;\n        *) ;;\n    esac\n\n    rm -f /usr/bin/lsb_release > /dev/null 2>&1\n    python3 -m ensurepip > /dev/null 2>&1\n    python3 -m pip install --upgrade pip > /dev/null 2>&1\n\n    Echo_INFOR \"pip3 output: $(pip3 -V)\"\n    rm -rf /tmp/py39 && cd /tmp\n\n}\n\nPython310_Install_with_pyenv(){\n\n    name=\"Python3.10\"\n\n    export PYENV_ROOT=\"$T_Dir/.pyenv\"\n    command -v pyenv >/dev/null || export PATH=\"$PYENV_ROOT/bin:$PATH\" > /dev/null 2>&1\n    eval \"$(pyenv init -)\" > /dev/null 2>&1\n\n    echo -e \"\\033[1;33m\\n>> Installing $name\\n\\033[0m\"\n\n    if [ \"$(pyenv versions | grep $py310_ver)\" ]\n    then\n        Echo_INFOR \"$name installed, Please run the following command:\\npyenv global $py310_ver && pyenv local $py310_ver\"\n        pyenv global $py310_ver && pyenv local $py310_ver\n    else\n        mkdir -p ~/.pyenv/cache/ && cd $_ && rm -f $py310_bin && $Proxy_OK wget https://www.python.org/ftp/python/$py310_ver/$py310_bin ${wget_option} && Echo_INFOR \"Downloaded from python.org\" || Echo_ERROR \"download failed, please check if the network is reachable, proxychains4 configuration is correct\"\n        pyenv install $py310_ver && pyenv global $py310_ver && pyenv local $py310_ver && Echo_INFOR \"Successfully installed Python, Please run the following command:\\npyenv global $py310_ver && pyenv local $py310_ver\"\n        rm -rf $py310_bin && cd /tmp\n    fi\n\n}\n\nPython310_Install(){\n\n    name=\"Python3.10\"\n    mkdir -p /tmp/py310 && cd $_ && rm -f $py310_bin && $Proxy_OK wget https://www.python.org/ftp/python/$py310_dir/$py310_bin ${wget_option} && Echo_INFOR \"Downloaded from python.org\" || Echo_ERROR \"download failed, please check if the network is reachable, proxychains4 configuration is correct\"\n    tar -xvJf $py310_bin > /dev/null 2>&1 && cd $py310_dir\n    Echo_INFOR \"configure\"\n    ./configure --prefix=/usr/local/python3 > /dev/null 2>&1\n    Echo_INFOR \"make\"\n    make > /dev/null 2>&1\n    Echo_INFOR \"make install\"\n    make install > /dev/null 2>&1\n\n    rm -f /usr/bin/python3\n    ln -s /usr/local/python3/bin/python3 /usr/bin/python3\n    python3 -V > /dev/null 2>&1 && Echo_INFOR \"Installation Location : /usr/local/python3\" || Echo_ERROR3\n    Echo_INFOR \"py3 output: $(python3 -V)\"\n\n    case $Linux_Version in\n        *\"CentOS\"*|*\"RedHat\"*|*\"Fedora\"*|*\"AlmaLinux\"*|*\"VzLinux\"*|*\"Rocky\"*)\n            echo \"PATH=\\$PATH:/usr/local/python3/bin\" >> /etc/bashrc\n            ;;\n        *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n            echo \"PATH=\\$PATH:/usr/local/python3/bin\" >> /etc/bash.bashrc\n            ;;\n        *) ;;\n    esac\n\n    rm -f /usr/bin/lsb_release > /dev/null 2>&1\n    python3 -m ensurepip > /dev/null 2>&1\n    python3 -m pip install --upgrade pip > /dev/null 2>&1\n\n    Echo_INFOR \"pip3 output: $(pip3 -V)\"\n    rm -rf /tmp/py310 && cd /tmp\n\n}\n\n# -go\nGo_Option(){\n\n    name=\"go\"\n    which go > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Go_Version=$(curl -L -s https://golang.org/VERSION?m=text | grep -o 'go[0-9]\\+\\.[0-9]\\+\\.[0-9]\\+' | awk '{print $1}')\n        if test -e /tmp/IS_CI\n        then\n            input=\"y\"\n        else\n            Echo_ALERT \"已安装 $(go version),是否升级至 $Go_Version? [y/N,默认No]\" && read -r input\n        fi\n\n        case $input in\n            [yY][eE][sS]|[Yy])\n                case $Linux_architecture_Name in\n                    *\"linux-x86_64\"*)\n                        Go_Bin=\"${Go_Version}.linux-amd64.tar.gz\"\n                        ;;\n                    *\"linux-arm64\"*)\n                        Go_Bin=\"${Go_Version}.linux-arm64.tar.gz\"\n                        ;;\n                esac\n\n                rm -rf /usr/bin/go > /dev/null 2>&1\n                rm -rf /usr/local/go > /dev/null 2>&1\n                cd /tmp\n                Echo_ALERT \"Downloading Go (~120M)\" && $Proxy_OK wget -O $T_Dir/$Go_Bin ${GitProxy2}https://golang.org/dl/$Go_Bin ${wget_option} && tar -C /usr/local -xzf $T_Dir/$Go_Bin && Echo_INFOR \"Downloaded from golang.org\" || { Echo_ERROR \"download failed, please check if the network is reachable, proxychains4 configuration is correct\" ; rm -f ${T_Dir:?}/${Go_Bin} > /dev/null 2>&1; }\n                ln -s /usr/local/go/bin/go /usr/bin/go > /dev/null 2>&1\n                Echo_INFOR \"$(go version)\" || Echo_ERROR3\n                rm -f ${T_Dir:?}/${Go_Bin} > /dev/null 2>&1\n                ;;\n            *)\n                Echo_INFOR \"Pass~\"\n                ;;\n        esac\n    else\n        Go_Install\n    fi\n\n}\n\n# ===================== Install Go =====================\nGo_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            Go_Bin=$Go_Bin_amd64\n            ;;\n        *\"linux-arm64\"*)\n            Go_Bin=$Go_Bin_arm64\n            ;;\n    esac\n\n    name=\"go\"\n    which go > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        Echo_ALERT \"Downloading Go (~120M)\" && $Proxy_OK wget -O $T_Dir/$Go_Bin ${GitProxy2}https://go.dev/dl/$Go_Bin ${wget_option} && tar -C /usr/local -xzf $T_Dir/$Go_Bin && Echo_INFOR \"Downloaded from golang.org\" || Echo_ERROR \"download failed, please check if the network is reachable, proxychains4 configuration is correct\"\n\n        case $Linux_Version in\n            *\"CentOS\"*|*\"RedHat\"*|*\"Fedora\"*|*\"AlmaLinux\"*|*\"VzLinux\"*|*\"Rocky\"*)\n                #export PATH=\\$PATH:/usr/local/go/bin\n                #export GOROOT=/usr/local/go\n                export GOPATH=$HOME/go\n\n                echo \"GOROOT=/usr/local/go\" >> /etc/bashrc && Echo_INFOR \"GOROOT : /usr/local/go\"\n                echo \"GOBIN=\\$GOROOT/bin\" >> /etc/bashrc && Echo_INFOR \"GOBIN : \\$GOROOT/bin\"\n                echo \"GOPATH=\\$HOME/go\" >> /etc/bashrc && Echo_INFOR \"GOPATH : \\$HOME/go\"\n                echo \"PATH=\\$PATH:\\$GOROOT/bin:\\$GOPATH/bin:\\$GOBIN\" >> /etc/bashrc\n                source /etc/bashrc\n                ;;\n            *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n                #export PATH=\\$PATH:/usr/local/go/bin\n                #export GOROOT=/usr/local/go\n                export GOPATH=$HOME/go\n\n                echo \"GOROOT=/usr/local/go\" >> /etc/bash.bashrc && Echo_INFOR \"GOROOT : /usr/local/go\"\n                echo \"GOBIN=\\$GOROOT/bin\" >> /etc/bash.bashrc && Echo_INFOR \"GOBIN : \\$GOROOT/bin\"\n                echo \"GOPATH=\\$HOME/go\" >> /etc/bash.bashrc && Echo_INFOR \"GOPATH : \\$HOME/go\"\n                echo \"PATH=\\$PATH:\\$GOROOT/bin:\\$GOPATH/bin:\\$GOBIN\" >> /etc/bash.bashrc\n                source /etc/bash.bashrc\n                ;;\n            *) ;;\n        esac\n        cd /tmp\n        ln -s /usr/local/go/bin/go /usr/bin/go > /dev/null 2>&1\n        Echo_INFOR \"$(go version)\" || Echo_ERROR3\n        rm -f ${T_Dir:?}/${Go_Bin} > /dev/null 2>&1\n    fi\n\n}\n\n# ===================== Install Docker =====================\nDocker_Install(){\n\n    name=\"Docker\"\n    which docker > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n        service docker start > /dev/null 2>&1\n        systemctl start docker > /dev/null 2>&1\n    else\n        Rm_Lock\n        case $Linux_Version in\n            *\"Fedora\"*)\n                Install_Switch \"device-mapper-persistent-data\"\n                Install_Switch \"lvm2\"\n\n                Echo_ALERT \"Installing docker\" && $Proxy_OK yum install -y docker > /dev/null 2>&1 && Echo_INFOR \"Successfully installed docker\" || Echo_ERROR \"docker installation failed, please check if the network is reachable, proxychains4 configuration is correct\"\n                ;;\n            *\"CentOS\"*|*\"RedHat\"*|*\"AlmaLinux\"*|*\"VzLinux\"*|*\"Rocky\"*)\n                Install_Switch \"device-mapper-persistent-data\"\n                Install_Switch \"lvm2\"\n\n                if [ $1 == tuna ] 2>> /tmp/f8x_error.log\n                then\n                    $Proxy_OK curl -o /etc/yum.repos.d/docker-ce.repo https://f8x.io/docker-ce.repo > /dev/null 2>&1 && Echo_INFOR \"Finished downloading the docker yum source from mirrors.tuna.tsinghua.edu.cn\" || Echo_ERROR \"Failed to download docker yum source\"\n                else\n                    # https://docs.docker.com/engine/install/centos/#set-up-the-repository\n                    $Proxy_OK yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n                fi\n\n                $Proxy_OK yum makecache > /dev/null 2>&1 || Echo_ERROR \"yum Docker source update failed, please check if the network is reachable, proxychains4 configuration is correct\"\n                Rm_Lock\n                # https://docs.docker.com/engine/install/centos/#install-docker-engine\n                Echo_ALERT \"Installing docker\" && $Proxy_OK yum install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin > /dev/null 2>&1 && Echo_INFOR \"Successfully installed docker\" || Echo_ERROR \"docker installation failed, please check if the network is reachable, proxychains4 configuration is correct\"\n\n                which docker > /dev/null 2>&1\n                if [ $? == 0 ]\n                then\n                    service docker start > /dev/null 2>&1\n                    systemctl start docker > /dev/null 2>&1\n                else\n                    Echo_ALERT \"Installing docker(podman emulate)\" && $Proxy_OK yum install -y docker docker-buildx-plugin docker-compose-plugin > /dev/null 2>&1 && Echo_INFOR \"Successfully installed docker\" || Echo_ERROR \"docker installation failed, please check if the network is reachable, proxychains4 configuration is correct\"\n                fi\n                ;;\n            *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n                Echo_INFOR \"Uninstalling the Docker environment\"\n                apt-get remove -y docker > /dev/null 2>&1\n                apt-get remove -y docker-engine > /dev/null 2>&1\n                apt-get remove -y docker.io > /dev/null 2>&1\n                Rm_Lock\n                apt-get update > /dev/null 2>&1 || Echo_ERROR \"Update apt package list failed\"\n                Install_Switch \"apt-transport-https\"\n                Install_Switch \"ca-certificates\"\n                Install_Switch \"curl\"\n                Install_Switch \"software-properties-common\"\n                Install_Switch \"gnupg\"\n\n                if [ $1 == tuna ] 2>> /tmp/f8x_error.log\n                then\n                    $Proxy_OK curl -fsSL https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/debian/gpg | apt-key add -\n\n                    case $Linux_Version in\n                        *\"Kali\"*|*\"Debian\"*)\n                            echo -e 'deb https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/debian' \"$Linux_Version_Name\" 'stable'> /etc/apt/sources.list.d/docker.list\n                            ;;\n                        *\"Ubuntu\"*)\n                            echo -e 'deb https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/ubuntu/' \"$Linux_Version_Name\" 'stable'> /etc/apt/sources.list.d/docker.list\n                            ;;\n                    esac\n                else\n                    $Proxy_OK curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -\n\n                    case $Linux_Version in\n                        *\"Kali\"*|*\"Debian\"*)\n                            echo -e 'deb https://download.docker.com/linux/debian' \"$Linux_Version_Name\" 'stable'> /etc/apt/sources.list.d/docker.list\n                            ;;\n                        *\"Ubuntu\"*)\n                            echo -e 'deb https://download.docker.com/linux/ubuntu/' \"$Linux_Version_Name\" 'stable'> /etc/apt/sources.list.d/docker.list\n                            ;;\n                    esac\n                fi\n\n                Echo_INFOR \"Updating apt package list\" && apt-get update > /dev/null 2>&1 || Echo_ERROR \"Update apt package list failed\"\n\n                Echo_ALERT \"Installing docker\" && $Proxy_OK apt-get install -y docker-ce > /dev/null 2>&1 && Echo_INFOR \"Successfully installed docker-ce\" || Echo_ERROR \"docker-ce installation failed, please check if the network is reachable, proxychains4 configuration is correct\"\n                rm -f /etc/apt/sources.list.d/docker.list > /dev/null 2>&1\n                ;;\n            *)\n                ;;\n        esac\n\n        service docker start > /dev/null 2>&1\n        systemctl start docker > /dev/null 2>&1 && Echo_INFOR \"docker service is started\" || Echo_ERROR \"docker service startup failed\"\n        systemctl enable docker > /dev/null 2>&1 && Echo_INFOR \"Configure the docker service to start on boot\" || Echo_ERROR \"Failed to configure boot items\"\n    fi\n\n    # new\n    docker_compose_Install\n\n}\n\n# ===================== Install docker_compose =====================\ndocker_compose_Install(){\n\n    name=\"docker compose\"\n    docker compose version > /dev/null 2>&1\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        Rm_Lock\n        # ref https://docs.docker.com/compose/install/linux/\n        Install_Switch \"docker-compose-plugin\"\n    fi\n\n    # old\n    docker-compose -version > /dev/null 2>&1\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"docker-compose installed\"\n    else\n        pip3_Check && pip3 install --upgrade pip > /dev/null 2>&1\n        Install_Switch4 \"docker-compose\"\n    fi\n\n}\n\n# ===================== Install SDKMAN =====================\nSDKMAN_Install(){\n\n    name=\"SDKMAN\"\n    sdk version > /dev/null 2>&1\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/SDKMAN && cd /tmp/SDKMAN && $Proxy_OK curl -o sdkman.sh \"https://get.sdkman.io\" > /dev/null 2>&1 && $Proxy_OK bash sdkman.sh > /dev/null 2>&1\n        source \"/root/.sdkman/bin/sdkman-init.sh\"\n        sdk version && Echo_INFOR \"Successfully installed $name\" || Echo_ERROR3\n\n        rm -rf /tmp/SDKMAN && cd /tmp\n    fi\n\n}\n\n# ===================== Install Terraform =====================\nTerraform_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            Terraform_bin=$Terraform_bin_amd64\n            ;;\n        *\"linux-arm64\"*)\n            Terraform_bin=$Terraform_bin_arm64\n            ;;\n    esac\n\n    name=\"terraform\"\n    which terraform > /dev/null 2>&1\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        Echo_ALERT \"Downloading $name\"\n        mkdir -p /tmp/terraform && cd /tmp/terraform && $Proxy_OK wget https://releases.hashicorp.com/terraform/$Terraform_Ver/$Terraform_bin > /dev/null 2>&1 && Echo_INFOR \"Downloaded from hashicorp.com\" || Echo_ERROR2\n        unzip $Terraform_bin > /dev/null 2>&1\n        mv --force terraform /usr/local/bin/terraform > /dev/null 2>&1 && chmod +x /usr/local/bin/terraform && Echo_INFOR \"Successfully installed $name $Terraform_Ver\" || Echo_ERROR3\n        rm -rf /tmp/terraform && cd /tmp\n    fi\n\n}\n\n# ===================== Install aliyun-cli =====================\naliyun-cli_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            aliyun_cli_bin=$aliyun_cli_bin_amd64\n            ;;\n        *\"linux-arm64\"*)\n            aliyun_cli_bin=$aliyun_cli_bin_arm64\n            ;;\n    esac\n\n    name=\"aliyun\"\n    which aliyun > /dev/null 2>&1\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/aliyun-cli && cd /tmp/aliyun-cli && $Proxy_OK wget https://github.com/aliyun/aliyun-cli/releases/download/$aliyun_cli_Ver/$aliyun_cli_bin > /dev/null 2>&1 || Echo_ERROR2\n        tar zxvf $aliyun_cli_bin > /dev/null 2>&1\n        mv --force aliyun /usr/local/bin/aliyun > /dev/null 2>&1 && chmod +x /usr/local/bin/aliyun && Echo_INFOR \"Successfully installed $name $aliyun-cli_Ver\" || Echo_ERROR3\n        rm -rf /tmp/aliyun-cli && cd /tmp\n    fi\n\n}\n\n# ===================== Install aws-cli =====================\naws-cli_Install(){\n\n    name=\"aws\"\n    which aws > /dev/null 2>&1\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        Echo_ALERT \"Downloading $name\"\n        mkdir -p /tmp/aws-cli && cd /tmp/aws-cli && $Proxy_OK curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\" > /dev/null 2>&1 || Echo_ERROR2\n        unzip awscliv2.zip > /dev/null 2>&1\n        ./aws/install && Echo_INFOR \"Successfully installed $name\" || Echo_ERROR3\n        rm -rf /tmp/aws-cli && cd /tmp\n    fi\n\n}\n\n# ===================== Install Serverless_Framework =====================\nServerless_Framework_Install(){\n\n    name=\"Serverless Framework\"\n\n    which serverless > /dev/null 2>&1\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        npm config set prefix /usr/local\n        $Proxy_OK npm install -g serverless\n        serverless -v && Echo_INFOR \"Successfully installed $name\" || Echo_ERROR3\n    fi\n\n}\n\n# ===================== Install wrangler =====================\nwrangler_Install(){\n\n    name=\"wrangler\"\n\n    which wrangler > /dev/null 2>&1\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        $Proxy_OK cargo install wrangler\n        wrangler -V && Echo_INFOR \"Successfully installed $name\" || Echo_ERROR3\n    fi\n\n}\n\n# ===================== Install SSH =====================\nSSH_Tools(){\n\n    case $Linux_Version in\n        *\"CentOS\"*|*\"RedHat\"*|*\"Fedora\"*|*\"AlmaLinux\"*|*\"VzLinux\"*|*\"Rocky\"*)\n            Echo_INFOR \"RedHat is available by default, this item Pass\"\n            ;;\n        *\"Kali\"*|*\"Debian\"*)\n            Rm_Lock\n            Install_Switch \"ssh\"\n            echo \"PermitRootLogin yes\" >> /etc/ssh/sshd_config && echo \"PasswordAuthentication yes\" >> /etc/ssh/sshd_config\n            yes|ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key > /dev/null 2>&1\n            yes|ssh-keygen -t dsa -f /etc/ssh/ssh_host_rsa_key > /dev/null 2>&1\n            systemctl start ssh > /dev/null 2>&1 && Echo_INFOR \"SSH initialization completed\" || Echo_ERROR \"SSH initialization failed\"\n            systemctl enable ssh > /dev/null 2>&1 && Echo_INFOR \"SSH configuration boot-up\" || Echo_ERROR \"SSH configuration boot failure\"\n            ;;\n        *\"Ubuntu\"*)\n            Rm_Lock\n            echo \"PermitRootLogin yes\" >> /etc/ssh/sshd_config && echo \"PasswordAuthentication yes\" >> /etc/ssh/sshd_config\n            yes|ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key > /dev/null 2>&1\n            yes|ssh-keygen -t dsa -f /etc/ssh/ssh_host_rsa_key > /dev/null 2>&1\n            apt remove -y openssh-server > /dev/null 2>&1\n            apt remove -y ssh > /dev/null 2>&1\n            Install_Switch \"openssh-server\"\n            Install_Switch \"ssh\"\n            systemctl start ssh > /dev/null 2>&1 && Echo_INFOR \"SSH initialization completed\" || Echo_ERROR \"SSH initialization failed\"\n            systemctl enable ssh > /dev/null 2>&1 && Echo_INFOR \"SSH configuration boot-up\" || Echo_ERROR \"SSH configuration boot failure\"\n            ;;\n        *) ;;\n    esac\n\n}\n\n# ===================== pentest directory detection =====================\nPentest_Base_Install(){\n\n    if test -d $P_Dir\n    then\n        Echo_ALERT \"$P_Dir folder already exists\"\n    else\n        mkdir -p $P_Dir && Echo_INFOR \"$P_Dir folder created\"\n    fi\n\n}\n\n# ===================== AboutSecurity dictionary library =====================\nPentest_Dic_Install(){\n\n    name=\"AboutSecurity\"\n\n    if test -d $P_Dir/$name\n    then\n        Echo_ALERT \"$name dictionary already exists\"\n    else\n        rm -rf $P_Dir/$name > /dev/null 2>&1 && $Proxy_OK git clone --depth 1 ${GitProxy}https://github.com/ffffffff0x/AboutSecurity.git $P_Dir/$name > /dev/null 2>&1 && Echo_INFOR \"Downloaded $name in the $P_Dir/$name\" || Echo_ERROR \"Failed to download the $name dictionary from github\"\n    fi\n\n}\n\n# ===================== Install pentest misc tools =====================\nPentest_Misc_Install(){\n\n    if test -e /tmp/f8x_misc.txt\n    then\n        Echo_ALERT \"Tool installation record is detected, skip this step\"\n    else\n        Rm_Lock\n        Install_Switch \"parallel\"\n        Install_Switch \"rlwrap\"\n        Install_Switch \"yara\"\n        touch /tmp/f8x_misc.txt > /dev/null 2>&1\n    fi\n\n}\n\n# ===================== Install pentest pip module =====================\nPentest_pip_Install(){\n\n    if test -e /tmp/f8x_pip.txt\n    then\n        Echo_ALERT \"pip module record detected, skip this step\"\n    else\n        python3 -m pip install --upgrade pip > /dev/null 2>&1 && Echo_INFOR \"Updated python3-pip\" || Echo_ERROR \"python3-pip update failed\"\n        Install_Switch4 \"PyJWT\"\n        Install_Switch4 \"pyshark\"\n        Install_Switch4 \"requests\"\n        Install_Switch4 \"sqlparse\"\n        Install_Switch4 \"threadpool\"\n        Install_Switch4 \"urllib3\"\n        Install_Switch4 \"lxml\"\n        Install_Switch4 \"pyzbar\"\n        Install_Switch4 \"bs4\"\n        Install_Switch4 \"ftfy\"\n        Install_Switch4 \"trzsz\"\n        pip3 install updog > /dev/null 2>&1\n        pip3 install pefile > /dev/null 2>&1\n        Install_Switch3 \"yara\"\n        Install_Switch3 \"pycrypto\"\n        Install_Switch3 \"openpyxl\"\n        python2 -m pip install ujson > /dev/null 2>&1\n        Install_Switch3 \"Crypto\"\n        Install_Switch3 \"pycryptodome\"\n        Install_Switch3 \"pytz\"\n        python2 -m pip install pefile > /dev/null 2>&1\n        touch /tmp/f8x_pip.txt > /dev/null 2>&1\n    fi\n\n}\n\n# ===================== Install nmap =====================\nPentest_nmap_Install(){\n\n    name=\"nmap\"\n\n    which nmap > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        Rm_Lock\n        Install_Switch \"nmap\"\n    fi\n\n}\n\n# ===================== Install ffuf =====================\nPentest_ffuf_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            ffuf_Install=$ffuf_Install_amd64\n            ;;\n        *\"linux-arm64\"*)\n            ffuf_Install=$ffuf_Install_arm64\n            ;;\n    esac\n\n    name=\"ffuf\"\n    which ffuf > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/ffuf && cd /tmp/ffuf && rm -f $ffuf_Install && $Proxy_OK wget ${GitProxy}https://github.com/ffuf/ffuf/releases/download/$ffuf_Ver/$ffuf_Install > /dev/null 2>&1 || Echo_ERROR2\n        tar -zxvf $ffuf_Install > /dev/null 2>&1\n        mv --force ffuf /usr/local/bin/ && chmod +x /usr/local/bin/ffuf\n        rm -rf /tmp/ffuf && cd /tmp\n        ffuf -V > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $ffuf_Ver in the /usr/local/bin/\" || Echo_ERROR3\n    fi\n\n}\n\n# ===================== Install JSFinder =====================\nPentest_JSFinder_Install(){\n\n    name=\"JSFinder\"\n    dir=\"$P_Dir/JSFinder\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        $Proxy_OK git clone ${GitProxy}https://github.com/Threezh1/JSFinder.git $dir > /dev/null 2>&1 && cd $dir || Echo_ERROR2\n        python3 JSFinder.py -h > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the $dir\" || Echo_ERROR3\n    fi\n\n}\n\n# ===================== Install SecretFinder =====================\nPentest_SecretFinder_Install(){\n\n    name=\"SecretFinder\"\n    dir=\"$P_Dir/SecretFinder\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        $Proxy_OK git clone ${GitProxy}https://github.com/m4ll0k/SecretFinder.git $dir > /dev/null 2>&1 && cd $dir || Echo_ERROR2\n        Install_Switch7 \"requirements.txt\" && Echo_INFOR \"Installed dependency modules\" || { Echo_ERROR \"Failed to install dependency module\"; rm -rf $dir; cd /tmp; }\n        python3 SecretFinder.py -h > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the $dir\" || Echo_ERROR3\n    fi\n\n}\n\n# ===================== Install OneForAll =====================\nPentest_OneForAll_Install(){\n\n    name=\"OneForAll\"\n    dir=\"$P_Dir/OneForAll\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        Install_Switch5 \"setuptools\"\n        Install_Switch5 \"wheel\"\n        $Proxy_OK git clone --depth 1 ${GitProxy}https://github.com/shmilylty/OneForAll.git $dir > /dev/null 2>&1 && cd $dir || Echo_ERROR \"$name download failed, please check if the network is reachable, proxychains4 configuration is correct, or download using gitee git clone https://gitee.com/shmilylty/OneForAll.git \"\n        Echo_ALERT \"Installing dependency modules\\033[0m\" && Install_Switch7 \"requirements.txt\" || { Echo_ERROR \"Failed to install dependency module\"; rm -rf $dir; cd /tmp; }\n        python3 oneforall.py version > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the $dir\" && aarch64_massdns_Install || Echo_ERROR3\n    fi\n\n}\n\naarch64_massdns_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-arm64\"*)\n            mkdir -p /tmp/massdns && cd $_\n            $Proxy_OK git clone --depth 1 ${GitProxy}https://github.com/blechschmidt/massdns.git > /dev/null 2>&1\n            cd /tmp/massdns/massdns && make > /dev/null 2>&1\n            mv /tmp/massdns/massdns/bin/massdns $P_Dir/OneForAll/thirdparty/massdns/massdns_linux_aarch64 && Echo_INFOR \"Successfully installed massdns in the $P_Dir/OneForAll/thirdparty/massdns/\" && rm -rf /tmp/massdns && cd /tmp\n            ;;\n    esac\n\n}\n\n# ===================== Install ksubdomain =====================\nPentest_ksubdomain_Install(){\n\n    name=\"ksubdomain\"\n\n    which ksubdomain > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        case $Linux_architecture_Name in\n            *\"linux-x86_64\"*)\n                mkdir -p /tmp/ksubdomain && cd /tmp/ksubdomain && rm -f ${ksubdomain_Install} && $Proxy_OK wget ${GitProxy}https://github.com/boy-hack/ksubdomain/releases/download/$ksubdomain_Ver/$ksubdomain_Install > /dev/null 2>&1 || Echo_ERROR2\n                tar -xvf ${ksubdomain_Install} > /dev/null 2>&1\n                mv --force ksubdomain /usr/local/bin/ksubdomain && chmod +x /usr/local/bin/ksubdomain\n                rm -rf /tmp/ksubdomain && cd /tmp\n                ksubdomain > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $ksubdomain_Ver in the /usr/local/bin/\" || Echo_ERROR3\n                ;;\n            *\"linux-arm64\"*)\n                mkdir -p /tmp/ksubdomain && cd /tmp/ksubdomain && go install github.com/boy-hack/ksubdomain/cmd/ksubdomain@latest\n                mv $GOPATH/bin/ksubdomain /usr/local/bin/ksubdomain && chmod +x /usr/local/bin/ksubdomain || { mv /root/go/bin/ksubdomain /usr/local/bin/ksubdomain; chmod +x /usr/local/bin/ksubdomain; }\n                rm -rf /tmp/ksubdomain && cd /tmp\n                which ksubdomain > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the /usr/local/bin/\" || Echo_ERROR3\n                ;;\n        esac\n    fi\n\n}\n\n# ===================== Install masscan =====================\nPentest_masscan_Install(){\n\n    name=\"masscan\"\n\n    which masscan > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        Rm_Lock\n        Install_Switch \"masscan\"\n    fi\n\n}\n\n# ===================== Install fscan =====================\nPentest_fscan_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            fscan_Install=$fscan_Install_amd64\n            ;;\n        *\"linux-arm64\"*)\n            fscan_Install=$fscan_Install_arm64\n            ;;\n    esac\n\n    name=\"fscan\"\n    which fscan > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/fscan && cd /tmp/fscan && rm -f $fscan_Install && $Proxy_OK wget ${GitProxy}https://github.com/shadow1ng/fscan/releases/download/$fscan_Ver/$fscan_Install > /dev/null 2>&1 || Echo_ERROR2\n        mv --force $fscan_Install /usr/local/bin/fscan && chmod +x /usr/local/bin/fscan\n        fscan > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $fscan_Ver in the /usr/local/bin/\" || Echo_ERROR3\n        rm -rf /tmp/fscan && cd /tmp\n    fi\n\n}\n\n# ===================== Install fingerprintx =====================\nPentest_fingerprintx_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            fingerprintx_Install=$fingerprintx_Install_amd64\n            ;;\n        *\"linux-arm64\"*)\n            fingerprintx_Install=$fingerprintx_Install_arm64\n            ;;\n    esac\n\n    name=\"fingerprintx\"\n    which fingerprintx > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/fingerprintx && cd /tmp/fingerprintx && rm -f $fingerprintx_Install > /dev/null 2>&1 && $Proxy_OK wget ${GitProxy}https://github.com/praetorian-inc/fingerprintx/releases/download/$fingerprintx_Ver/$fingerprintx_Install > /dev/null 2>&1 || Echo_ERROR2\n        tar -zxvf $fingerprintx_Install > /dev/null 2>&1\n        mv --force fingerprintx /usr/local/bin/fingerprintx && chmod +x /usr/local/bin/fingerprintx\n        which fingerprintx > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $fingerprintx_Ver in the /usr/local/bin/\" || Echo_ERROR3\n        rm -rf /tmp/fingerprintx && cd /tmp\n    fi\n\n}\n\n# ===================== Install HostCollision =====================\nPentest_HostCollision_Install(){\n\n    JDK_Check\n\n    name=\"HostCollision\"\n    dir=\"$P_Dir/HostCollision\"\n\n    if test -e $dir/HostCollision.jar\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        mkdir -p $dir\n        mkdir -p /tmp/HostCollision && cd /tmp/HostCollision && rm -f $HostCollision_Bin > /dev/null 2>&1 && $Proxy_OK wget ${GitProxy}https://github.com/pmiaowu/HostCollision/releases/download/$HostCollision_Ver/$HostCollision_Bin > /dev/null 2>&1 || Echo_ERROR2\n        unzip $HostCollision_Bin > /dev/null 2>&1\n        mv --force $HostCollision_dir/* $dir\n        if test -e $dir/HostCollision.jar\n        then\n            Echo_INFOR \"Successfully installed $name $HostCollision_Ver in the $dir\"\n        else\n            Echo_ERROR3\n        fi\n        rm -rf /tmp/HostCollision && cd /tmp\n    fi\n\n}\n\n# ===================== Install asnmap =====================\nPentest_asnmap_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            asnmap_bin=$asnmap_bin_amd64\n            ;;\n        *\"linux-arm64\"*)\n            asnmap_bin=$asnmap_bin_arm64\n            ;;\n    esac\n\n    name=\"asnmap\"\n\n    which asnmap > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/asnmap && cd /tmp/asnmap && rm -f $asnmap_bin > /dev/null 2>&1 && $Proxy_OK wget ${GitProxy}https://github.com/projectdiscovery/asnmap/releases/download/$asnmap_Ver/$asnmap_bin > /dev/null 2>&1 || Echo_ERROR2\n        unzip $asnmap_bin > /dev/null 2>&1\n        mv --force asnmap /usr/local/bin/asnmap && chmod +x /usr/local/bin/asnmap\n        which asnmap > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $asnmap_Ver in the /usr/local/bin/\" || Echo_ERROR3\n        rm -rf /tmp/asnmap && cd /tmp\n    fi\n\n}\n\n# ===================== Install tlsx =====================\nPentest_tlsx_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            tlsx_bin=$tlsx_bin_amd64\n            ;;\n        *\"linux-arm64\"*)\n            tlsx_bin=$tlsx_bin_arm64\n            ;;\n    esac\n\n    name=\"tlsx\"\n\n    which tlsx > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/tlsx && cd /tmp/tlsx && rm -f $tlsx_bin > /dev/null 2>&1 && $Proxy_OK wget ${GitProxy}https://github.com/projectdiscovery/tlsx/releases/download/$tlsx_Ver/$tlsx_bin > /dev/null 2>&1 || Echo_ERROR2\n        unzip $tlsx_bin > /dev/null 2>&1\n        mv --force tlsx /usr/local/bin/tlsx && chmod +x /usr/local/bin/tlsx\n        which tlsx > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $tlsx_Ver in the /usr/local/bin/\" || Echo_ERROR3\n        rm -rf /tmp/tlsx && cd /tmp\n    fi\n\n}\n\n# ===================== Install gogo =====================\nPentest_gogo_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            gogo_File=$gogo_File_amd64\n            ;;\n        *\"linux-arm64\"*)\n            gogo_File=$gogo_File_arm64\n            ;;\n    esac\n\n    name=\"gogo\"\n\n    which gogo > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/gogo && cd /tmp/gogo && rm -f $gogo_File > /dev/null 2>&1 && $Proxy_OK wget ${GitProxy}https://github.com/chainreactors/gogo/releases/download/$gogo_Ver/$gogo_File > /dev/null 2>&1 || Echo_ERROR2\n        mv --force $gogo_File /usr/local/bin/gogo && chmod +x /usr/local/bin/gogo\n        which gogo > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $gogo_Ver in the /usr/local/bin/\" || Echo_ERROR3\n        rm -rf /tmp/gogo && cd /tmp\n    fi\n\n}\n\n# ===================== Install csprecon =====================\nPentest_csprecon_Install(){\n\n    GO_Check\n\n    name=\"csprecon\"\n    which csprecon > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/csprecon && cd /tmp/csprecon && go install github.com/edoardottt/csprecon/cmd/csprecon@latest\n        mv $GOPATH/bin/csprecon /usr/local/bin/csprecon && chmod +x /usr/local/bin/csprecon || { mv /root/go/bin/csprecon /usr/local/bin/csprecon; chmod +x /usr/local/bin/csprecon; }\n        rm -rf /tmp/csprecon && cd /tmp\n        which csprecon > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the /usr/local/bin/\" || Echo_ERROR3\n    fi\n\n}\n\n# ===================== Install rad =====================\nPentest_rad_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            rad_File=$rad_File_amd64\n            rad_bin=$rad_bin_amd64\n            ;;\n        *\"linux-arm64\"*)\n            rad_File=$rad_File_arm64\n            rad_bin=$rad_bin_arm64\n            ;;\n    esac\n\n    name=\"rad\"\n    which rad > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/rad && cd /tmp/rad && rm -f ${rad_File} > /dev/null 2>&1 && $Proxy_OK wget ${GitProxy}https://github.com/chaitin/rad/releases/download/$rad_Ver/$rad_File > /dev/null 2>&1 || Echo_ERROR2\n        unzip $rad_File > /dev/null 2>&1\n        mv --force $rad_bin /usr/local/bin/rad && chmod +x /usr/local/bin/rad\n        rm -rf /tmp/rad && cd /tmp\n        which rad > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $rad_Ver in the /usr/local/bin/\" || Echo_ERROR3\n        Echo_INFOR \"$name needs to be used with chromium, you can install chromium with the -chromium option\"\n    fi\n\n}\n\n# ===================== Install crawlergo =====================\nPentest_crawlergo_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            crawlergo_File=$crawlergo_File_amd64\n            ;;\n        *\"linux-arm64\"*)\n            crawlergo_File=$crawlergo_File_arm64\n            ;;\n    esac\n\n    name=\"crawlergo\"\n    which crawlergo > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/crawlergo && cd /tmp/crawlergo && rm -f $crawlergo_File && $Proxy_OK wget ${GitProxy}https://github.com/Qianlitp/crawlergo/releases/download/$crawlergo_Ver/$crawlergo_File > /dev/null 2>&1 || Echo_ERROR2\n        # unzip $crawlergo_File > /dev/null 2>&1\n        mv --force $crawlergo_File /usr/local/bin/crawlergo && chmod +x /usr/local/bin/crawlergo && Echo_INFOR \"Successfully installed $name $crawlergo_Ver in the /usr/local/bin/\" || Echo_ERROR3\n        rm -rf /tmp/crawlergo && cd /tmp\n        Echo_INFOR \"$name needs to be used with chromium, you can install chromium with the -chromium option\"\n    fi\n\n}\n\n# ===================== Install katana =====================\nPentest_katana_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            katana_bin=$katana_bin_amd64\n            ;;\n        *\"linux-arm64\"*)\n            katana_bin=$katana_bin_arm64\n            ;;\n    esac\n\n    name=\"katana\"\n    which katana > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/katana && cd /tmp/katana && rm -f $katana_bin > /dev/null 2>&1 && $Proxy_OK wget ${GitProxy}https://github.com/projectdiscovery/katana/releases/download/$katana_Ver/$katana_bin > /dev/null 2>&1 || Echo_ERROR2\n        unzip $katana_bin > /dev/null 2>&1\n        mv --force katana /usr/local/bin/katana && chmod +x /usr/local/bin/katana\n        which katana > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $katana_Ver in the /usr/local/bin/\" || Echo_ERROR3\n        rm -rf /tmp/katana && cd /tmp\n    fi\n\n}\n\n# ===================== Install Arjun =====================\nPentest_Arjun_Install(){\n\n    name=\"Arjun\"\n\n    which arjun > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        Install_Switch4 \"arjun\"\n    fi\n\n}\n\n# ===================== Install gospider =====================\nPentest_gospider_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            gospider_bin=$gospider_bin_amd64\n            gospider_dir=$gospider_dir_amd64\n            ;;\n        *\"linux-arm64\"*)\n            gospider_bin=$gospider_bin_arm64\n            gospider_dir=$gospider_dir_arm64\n            ;;\n    esac\n\n    name=\"gospider\"\n    which gospider > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/gospider && cd /tmp/gospider && rm -f ${gospider_bin} && rm -rf ${gospider_dir} && $Proxy_OK wget ${GitProxy}https://github.com/jaeles-project/gospider/releases/download/$gospider_Ver/$gospider_bin > /dev/null 2>&1 || Echo_ERROR2\n        unzip ${gospider_bin} > /dev/null 2>&1\n        mv --force ${gospider_dir}/gospider /usr/local/bin/gospider && chmod +x /usr/local/bin/gospider\n        rm -rf /tmp/gospider && cd /tmp\n        which gospider > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $gospider_Ver in the /usr/local/bin/\" || Echo_ERROR3\n    fi\n\n}\n\n# ===================== Install naabu =====================\nPentest_naabu_Install(){\n\n    name=\"naabu\"\n\n    which naabu > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        case $Linux_architecture_Name in\n            *\"linux-x86_64\"*)\n                Rm_Lock\n                case $Linux_Version in\n                    *\"CentOS\"*|*\"RedHat\"*|*\"Fedora\"*|*\"AlmaLinux\"*|*\"VzLinux\"*|*\"Rocky\"*)\n                        Install_Switch \"libpcap\"\n                        Install_Switch \"libpcap-devel\"\n                        ;;\n                    *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n                        Install_Switch \"libpcap-dev\"\n                        ;;\n                    *) ;;\n                esac\n                mkdir -p /tmp/naabu && cd /tmp/naabu && go install github.com/projectdiscovery/naabu/v2/cmd/naabu@latest\n                mv $GOPATH/bin/naabu /usr/local/bin/naabu && chmod +x /usr/local/bin/naabu || { mv /root/go/bin/naabu /usr/local/bin/naabu; chmod +x /usr/local/bin/naabu; }\n                rm -rf /tmp/naabu && cd /tmp\n                which naabu > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the /usr/local/bin/\" || Echo_ERROR3\n                # mkdir -p /tmp/naabu && cd /tmp/naabu && rm -f $naabu_bin > /dev/null 2>&1 && $Proxy_OK wget ${GitProxy}https://github.com/projectdiscovery/naabu/releases/download/$naabu_Ver/$naabu_bin > /dev/null 2>&1 || Echo_ERROR2\n                # unzip $naabu_bin > /dev/null 2>&1\n                # mv --force naabu /usr/local/bin/naabu && chmod +x /usr/local/bin/naabu\n                # rm -rf /tmp/naabu\n                # naabu -version > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $naabu_Ver in the /usr/local/bin/\" || Echo_ERROR3\n                ;;\n            *\"linux-arm64\"*)\n                Rm_Lock\n                case $Linux_Version in\n                    *\"CentOS\"*|*\"RedHat\"*|*\"Fedora\"*|*\"AlmaLinux\"*|*\"VzLinux\"*|*\"Rocky\"*)\n                        Install_Switch \"libpcap\"\n                        Install_Switch \"libpcap-devel\"\n                        ;;\n                    *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n                        Install_Switch \"libpcap-dev\"\n                        ;;\n                    *) ;;\n                esac\n                mkdir -p /tmp/naabu && cd /tmp/naabu && go install github.com/projectdiscovery/naabu/v2/cmd/naabu@latest\n                mv $GOPATH/bin/naabu /usr/local/bin/naabu && chmod +x /usr/local/bin/naabu || { mv /root/go/bin/naabu /usr/local/bin/naabu; chmod +x /usr/local/bin/naabu; }\n                rm -rf /tmp/naabu && cd /tmp\n                which naabu > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the /usr/local/bin/\" || Echo_ERROR3\n                ;;\n        esac\n    fi\n\n}\n\n# ===================== Install httpx =====================\nPentest_httpx_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            httpx_bin=$httpx_bin_amd64\n            ;;\n        *\"linux-arm64\"*)\n            httpx_bin=$httpx_bin_arm64\n            ;;\n    esac\n\n    name=\"httpx\"\n    which httpx > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/httpx && cd /tmp/httpx && rm -f ${httpx_bin} && $Proxy_OK wget ${GitProxy}https://github.com/projectdiscovery/httpx/releases/download/$httpx_Ver/$httpx_bin > /dev/null 2>&1 || Echo_ERROR2\n        unzip $httpx_bin > /dev/null 2>&1\n        mv --force httpx /usr/local/bin/httpx && chmod +x /usr/local/bin/httpx\n        rm -rf /tmp/httpx && cd /tmp\n        httpx -version > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $httpx_Ver in the /usr/local/bin/\" || Echo_ERROR3\n    fi\n\n}\n\n# ===================== Install subfinder =====================\nPentest_subfinder_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            subfinder_bin=$subfinder_bin_amd64\n            ;;\n        *\"linux-arm64\"*)\n            subfinder_bin=$subfinder_bin_arm64\n            ;;\n    esac\n\n    name=\"subfinder\"\n    which subfinder > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/subfinder && cd /tmp/subfinder && rm -f $subfinder_bin > /dev/null 2>&1 && $Proxy_OK wget ${GitProxy}https://github.com/projectdiscovery/subfinder/releases/download/$subfinder_Ver/$subfinder_bin > /dev/null 2>&1 || Echo_ERROR2\n        unzip $subfinder_bin > /dev/null 2>&1\n        mv --force subfinder /usr/local/bin/subfinder && chmod +x /usr/local/bin/subfinder\n        rm -rf /tmp/subfinder && cd /tmp\n        subfinder -version > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $subfinder_Ver in the /usr/local/bin/\" || Echo_ERROR3\n    fi\n\n}\n\n# ===================== Install gau =====================\nPentest_gau_Install(){\n\n    name=\"gau\"\n\n    which gau > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        case $Linux_architecture_Name in\n            *\"linux-x86_64\"*)\n                mkdir -p /tmp/gau && cd /tmp/gau && rm -f $gau_bin && $Proxy_OK wget ${GitProxy}https://github.com/lc/gau/releases/download/$gau_Ver/$gau_bin > /dev/null 2>&1 || Echo_ERROR2\n                tar -zxvf $gau_bin > /dev/null 2>&1\n                mv --force gau /usr/local/bin/gau && chmod +x /usr/local/bin/gau\n                rm -rf /tmp/gau && cd /tmp\n                which gau > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $gau_Ver in the /usr/local/bin/\" || Echo_ERROR3\n                ;;\n            *\"linux-arm64\"*)\n                mkdir -p /tmp/gau && cd /tmp/gau && go install github.com/lc/gau/v2/cmd/gau@latest\n                mv $GOPATH/bin/gau /usr/local/bin/gau && chmod +x /usr/local/bin/gau || { mv /root/go/bin/gau /usr/local/bin/gau; chmod +x /usr/local/bin/gau; }\n                rm -rf /tmp/gau && cd /tmp\n                which gau > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the /usr/local/bin/\" || Echo_ERROR3\n                ;;\n        esac\n    fi\n\n}\n\n# ===================== Install apktool =====================\nPentest_apktool_Install(){\n\n    JDK_Check\n\n    name=\"apktool\"\n\n    which apktool > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/apktool && cd /tmp/apktool && rm -f apktool && $Proxy_OK wget -O apktool ${GitProxy}https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool > /dev/null 2>&1 || Echo_ERROR2\n        rm -f $apktool_bin && $Proxy_OK wget ${GitProxy}https://github.com/iBotPeaches/Apktool/releases/download/$apktool_Ver/$apktool_bin > /dev/null 2>&1 || Echo_ERROR2\n        mv $apktool_bin apktool.jar && mv --force apktool.jar /usr/local/bin/apktool.jar && chmod +x /usr/local/bin/apktool.jar\n        mv --force apktool /usr/local/bin/apktool && chmod +x /usr/local/bin/apktool\n        rm -rf /tmp/apktool && cd /tmp\n        which apktool > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $apktool_Ver in the /usr/local/bin/\" || Echo_ERROR3\n    fi\n\n}\n\n# ===================== Install apkleaks =====================\nPentest_apkleaks_Install(){\n\n    name=\"apkleaks\"\n    which apkleaks > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        Install_Switch4 \"apkleaks\"\n    fi\n\n}\n\n# ===================== Install ApkAnalyser =====================\nPentest_ApkAnalyser_Install(){\n\n    name=\"ApkAnalyser\"\n    dir=\"$P_Dir/\"\n\n    if test -e $P_Dir/apkAnalyser.py\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        Install_Switch4 \"apkutils\" > /dev/null 2>&1\n        $Proxy_OK curl -o $P_Dir/apkAnalyser.py https://cdn.jsdelivr.net/gh/TheKingOfDuck/ApkAnalyser/apkAnalyser.py > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the $dir\" || Echo_ERROR3\n    fi\n\n}\n\n# ===================== Install Diggy =====================\nPentest_Diggy_Install(){\n\n    name=\"Diggy\"\n    dir=\"$P_Dir/\"\n\n    if test -e $P_Dir/diggy.sh\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        cd $P_Dir && $Proxy_OK curl -o diggy.sh https://cdn.jsdelivr.net/gh/s0md3v/Diggy/diggy.sh > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the $dir\" || Echo_ERROR3\n    fi\n\n}\n\n# ===================== Install AppInfoScanner =====================\nPentest_AppInfoScanner_Install(){\n\n    name=\"AppInfoScanner\"\n    dir=\"$P_Dir/AppInfoScanner\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        $Proxy_OK git clone ${GitProxy}https://github.com/kelvinBen/AppInfoScanner.git $dir > /dev/null 2>&1 && Echo_INFOR \"Downloaded $name\" || Echo_ERROR2\n        cd $dir && Install_Switch6 \"requirements.txt\" && Echo_INFOR \"Successfully installed $name in the $dir\" || Echo_ERROR3\n    fi\n\n}\n\n# ===================== Install Amass =====================\nPentest_Amass_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            Amass_bin=$Amass_bin_amd64\n            ;;\n        *\"linux-arm64\"*)\n            Amass_bin=$Amass_bin_arm64\n            ;;\n    esac\n\n    name=\"Amass\"\n    which amass > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/Amass && cd /tmp/Amass && rm -rf ${Amass_bin} && $Proxy_OK wget ${GitProxy}https://github.com/owasp-amass/amass/releases/download/$Amass_Ver/$Amass_bin > /dev/null 2>&1 || Echo_ERROR2\n        unzip ${Amass_bin} > /dev/null 2>&1 && rm -rf ${Amass_bin}\n        mv --force amass_*/amass /usr/local/bin/amass && chmod +x /usr/local/bin/amass\n        rm -rf /tmp/Amass && cd /tmp\n        which amass > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $Amass_Ver in the /usr/local/bin/\" || Echo_ERROR3\n    fi\n\n}\n\n# ===================== Install gobuster =====================\nPentest_gobuster_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            gobuster_bin=$gobuster_bin_amd64\n            ;;\n        *\"linux-arm64\"*)\n            gobuster_bin=$gobuster_bin_arm64\n            ;;\n    esac\n\n    name=\"gobuster\"\n\n    which gobuster > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/gobuster && cd /tmp/gobuster && rm -f ${gobuster_bin} && rm -rf gobuster-linux-amd64 && $Proxy_OK wget ${GitProxy}https://github.com/OJ/gobuster/releases/download/$gobuster_Ver/$gobuster_bin > /dev/null 2>&1 || Echo_ERROR2\n        tar -zxvf $gobuster_bin > /dev/null 2>&1 && rm -f $gobuster_bin > /dev/null 2>&1\n        mv --force gobuster /usr/local/bin/gobuster && chmod +x /usr/local/bin/gobuster\n        rm -rf /tmp/gobuster && cd /tmp\n        which gobuster > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $gobuster_Ver in the /usr/local/bin/\" || Echo_ERROR3\n    fi\n\n}\n\n# ===================== Install dirsearch =====================\nPentest_dirsearch_Install(){\n\n    name=\"dirsearch\"\n    dir=\"$P_Dir/dirsearch\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        cd $P_Dir && $Proxy_OK git clone --depth 1 ${GitProxy}https://github.com/maurosoria/dirsearch.git > /dev/null 2>&1 || Echo_ERROR2\n        cd $dir && Install_Switch7 \"requirements.txt\"\n        if test -d $dir\n        then\n            Echo_INFOR \"Successfully installed $name in the $dir\"\n        else\n            Echo_ERROR3\n        fi\n    fi\n\n}\n\n# ===================== Install dismap =====================\nPentest_dismap_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            dismap_bin=$dismap_bin_amd64\n            ;;\n        *\"linux-arm64\"*)\n            dismap_bin=$dismap_bin_arm64\n            ;;\n    esac\n\n    name=\"dismap\"\n    which dismap > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/dismap && cd /tmp/dismap && rm -f ${dismap_bin} && $Proxy_OK wget ${GitProxy}https://github.com/zhzyker/dismap/releases/download/$dismap_Ver/$dismap_bin > /dev/null 2>&1 || Echo_ERROR2\n        mv --force $dismap_bin /usr/local/bin/dismap && chmod +x /usr/local/bin/dismap\n        rm -rf /tmp/dismap && cd /tmp\n        which dismap > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $dismap_Ver in the /usr/local/bin/\" || Echo_ERROR3\n    fi\n\n}\n\n# ===================== Install htpwdScan =====================\nPentest_htpwdScan_Install(){\n\n    name=\"htpwdScan\"\n    dir=\"$P_Dir/htpwdScan\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        cd $P_Dir && $Proxy_OK git clone ${GitProxy}https://github.com/lijiejie/htpwdScan.git > /dev/null 2>&1 || Echo_ERROR2\n        cd $dir && Install_Switch7 \"requirements.txt\" && Echo_INFOR \"Successfully installed $name in the $dir\" || Echo_ERROR3\n    fi\n\n}\n\n# ===================== Install WebCrack =====================\nPentest_WebCrack_Install(){\n\n    name=\"WebCrack\"\n    dir=\"$P_Dir/WebCrack\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        cd $P_Dir && $Proxy_OK git clone ${GitProxy}https://github.com/yzddmr6/WebCrack.git > /dev/null 2>&1 || Echo_ERROR2\n        cd $dir && Install_Switch7 \"requirements.txt\" && Echo_INFOR \"Successfully installed $name in the $dir\" || Echo_ERROR3\n    fi\n\n}\n\n# ===================== Install netspy =====================\nPentest_netspy_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            netspy_bin=$netspy_bin_amd64\n            ;;\n        *\"linux-arm64\"*)\n            netspy_bin=$netspy_bin_arm64\n            ;;\n    esac\n\n    name=\"netspy\"\n    which netspy > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/netspy && cd /tmp/netspy && $Proxy_OK wget ${GitProxy}https://github.com/shmilylty/netspy/releases/download/$netspy_Ver/$netspy_bin > /dev/null 2>&1 || Echo_ERROR2\n        unzip $netspy_bin > /dev/null 2>&1\n        mv --force $netspy_bin /usr/local/bin/netspy && chmod +x /usr/local/bin/netspy\n        which netspy > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $netspy_Ver in the /usr/local/bin/\" || Echo_ERROR3\n        rm -rf /tmp/netspy && cd /tmp\n    fi\n\n}\n\nPentest_zscan_Install(){\n\n    name=\"zscan\"\n    which zscan > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/zscan && cd /tmp/zscan && go install github.com/zyylhn/zscan@latest\n        mv $GOPATH/bin/zscan /usr/local/bin/zscan && chmod +x /usr/local/bin/zscan || { mv /root/go/bin/zscan /usr/local/bin/zscan; chmod +x /usr/local/bin/zscan; }\n        rm -rf /tmp/zscan && cd /tmp\n        which zscan > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the /usr/local/bin/\" || Echo_ERROR3\n    fi\n\n}\n\n# ===================== Install Metasploit =====================\nPentest_Metasploit_Install(){\n\n    name=\"Metasploit\"\n\n    which msfconsole > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed , consider running 'msfupdate' to update to the latest version.\"\n        Echo_INFOR \"Before running msfconsole for the first time, it is necessary to start the database by running: msfdb init && msfdb start.\"\n    else\n        Rm_Lock\n        mkdir -p /tmp/Metasploit && cd /tmp/Metasploit && rm -f msfinstall && $Proxy_OK curl -o msfinstall https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb > /dev/null 2>&1 && chmod 777 msfinstall\n        Echo_ALERT \"Downloading Metasploit\" && $Proxy_OK ./msfinstall > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name\" && Echo_INFOR \"Before running msfconsole for the first time, it is necessary to start the database by running: msfdb init && msfdb start.\" || Echo_ERROR3\n        rm -rf /tmp/Metasploit && cd /tmp\n    fi\n\n}\n\n# ===================== Install Sqlmap =====================\nPentest_Sqlmap_Install(){\n\n    name=\"Sqlmap\"\n    dir=\"$P_Dir/sqlmap\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        Echo_ALERT \"Downloading Sqlmap\" && $Proxy_OK git clone --depth 1 ${GitProxy}https://github.com/sqlmapproject/sqlmap $dir > /dev/null 2>&1 || Echo_ERROR2\n        cd $dir && Echo_INFOR \"Successfully installed $name $(python3 sqlmap.py --version) in the $P_Dir/sqlmap\" || Echo_ERROR3\n    fi\n\n}\n\n# ===================== Install xray =====================\nPentest_xray_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            xray_File=$xray_File_amd64\n            xray_bin=$xray_bin_amd64\n            ;;\n        *\"linux-arm64\"*)\n            xray_File=$xray_File_arm64\n            xray_bin=$xray_bin_arm64\n            ;;\n    esac\n\n    name=\"xray\"\n    which xray > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/xray && cd /tmp/xray && rm -f $xray_File && $Proxy_OK wget ${GitProxy}https://github.com/chaitin/xray/releases/download/$xray_Ver/$xray_File > /dev/null 2>&1 || Echo_ERROR2\n        unzip $xray_File > /dev/null 2>&1 && rm -f $xray_File && mv --force $xray_bin /usr/local/bin/xray && chmod +x /usr/local/bin/xray\n        rm -rf /tmp/xray && cd /tmp\n        which xray > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $xray_Ver in the /usr/local/bin/\" || Echo_ERROR3\n    fi\n\n    #name=\"xray poc\"\n    #dir=\"$P_Dir/xray\"\n\n    #if test -d $dir\n    #then\n        #Echo_ALERT \"$name poc is already installed in $dir\"\n    #else\n        #$Proxy_OK git clone --depth 1 ${GitProxy}https://github.com/chaitin/xray.git $dir > /dev/null 2>&1 && Echo_INFOR \"Downloaded $name poc in the $dir\" || Echo_ERROR4 \"chaitin/xray\"\n    #fi\n\n}\n\n# ===================== Install pocsuite3 =====================\nPentest_pocsuite3_Install(){\n\n    name=\"pocsuite3\"\n\n    which pocsuite > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        Install_Switch4 \"pocsuite3\"\n    fi\n\n}\n\n# ===================== Install Nuclei =====================\nPentest_Nuclei_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            Nuclei_Install=$Nuclei_Install_amd64\n            ;;\n        *\"linux-arm64\"*)\n            Nuclei_Install=$Nuclei_Install_arm64\n            ;;\n    esac\n\n    name=\"Nuclei\"\n    which nuclei > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/nuclei && cd /tmp/nuclei && rm -f $Nuclei_Install && $Proxy_OK wget ${GitProxy}https://github.com/projectdiscovery/nuclei/releases/download/$Nuclei_Ver/$Nuclei_Install > /dev/null 2>&1 || Echo_ERROR2\n        unzip $Nuclei_Install > /dev/null 2>&1\n        mv --force nuclei /usr/local/bin/nuclei && chmod +x /usr/local/bin/nuclei\n        rm -rf /tmp/nuclei && cd /tmp\n        which nuclei > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $Nuclei_Ver in the /usr/local/bin/\" || Echo_ERROR3\n    fi\n\n}\n\nPentest_nuclei-templates_Install(){\n\n    echo -e \"\\033[1;33m\\n>> Updating nuclei-templates\\n\\033[0m\"\n    cd $P_Dir && $Proxy_OK nuclei -update-templates > /dev/null 2>&1 && Echo_INFOR \"Updated nuclei-templates \" || Echo_ERROR \"nuclei-templates update failed\"\n\n}\n\n# ===================== Install w13scan =====================\nPentest_w13scan_Install(){\n\n    name=\"w13scan\"\n    dir=\"$P_Dir/w13scan\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        $Proxy_OK git clone --depth 1 ${GitProxy}https://github.com/w-digital-scanner/w13scan.git $dir > /dev/null 2>&1 && Echo_INFOR \"Downloaded $name\" || Echo_ERROR2\n        cd $dir && Install_Switch7 \"requirements.txt\" && Install_Switch4 \"cowpy\" && cd W13SCAN && python3 w13scan.py -h > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the $dir\" || { Echo_ERROR3; rm -rf $dir; cd /tmp; }\n    fi\n\n}\n\n# ===================== Install commix =====================\nPentest_commix_Install(){\n\n    name=\"commix\"\n    dir=\"$P_Dir/commix\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        $Proxy_OK git clone --depth 1 ${GitProxy}https://github.com/commixproject/commix.git $dir > /dev/null 2>&1 && cd $dir || Echo_ERROR2\n        python3 commix.py -h > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the $dir\" || Echo_ERROR3\n    fi\n\n}\n\n# ===================== Install tplmap =====================\nPentest_tplmap_Install(){\n\n    name=\"tplmap\"\n    dir=\"$P_Dir/tplmap\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        $Proxy_OK git clone --depth 1 ${GitProxy}https://github.com/epinna/tplmap.git $dir > /dev/null 2>&1 && cd $dir || Echo_ERROR2\n        python2 tplmap.py -h > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the $dir\" || Echo_ERROR3\n    fi\n\n}\n\n# ===================== Install OpenRedireX =====================\nPentest_OpenRedireX_Install(){\n\n    name=\"OpenRedireX\"\n    dir=\"$P_Dir/OpenRedireX\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        cd $P_Dir && $Proxy_OK git clone --depth 1 ${GitProxy}https://github.com/No-Github/OpenRedireX.git > /dev/null 2>&1\n        cd $dir && Install_Switch4 \"aiohttp\" && Echo_INFOR \"Successfully installed $name in the $dir\" || { Echo_ERROR3; rm -rf $dir; }\n    fi\n\n}\n\n# ===================== Install CORScanner =====================\nPentest_CORScanner_Install(){\n\n    name=\"CORScanner\"\n    dir=\"$P_Dir/CORScanner\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        $Proxy_OK git clone --depth 1 ${GitProxy}https://github.com/chenjj/CORScanner.git $dir > /dev/null 2>&1 && Echo_INFOR \"Downloaded $name\" || Echo_ERROR2\n        cd $dir && Install_Switch7 \"requirements.txt\" && python3 cors_scan.py -h > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the $dir\" || { Echo_ERROR3; rm -rf $dir; cd /tmp; }\n    fi\n\n}\n\n# ===================== Install swagger-exp =====================\nPentest_swagger-exp_Install(){\n\n    name=\"swagger-exp\"\n    dir=\"$P_Dir/swagger-exp\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        cd $P_Dir && $Proxy_OK git clone ${GitProxy}https://github.com/lijiejie/swagger-exp.git > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the $dir\" || Echo_ERROR3\n    fi\n\n}\n\n# ===================== Install swagger-hack =====================\nPentest_swagger-hack_Install(){\n\n    name=\"swagger-hack\"\n    dir=\"$P_Dir/swagger-hack\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        Install_Switch4 \"loguru\"\n        cd $P_Dir && $Proxy_OK git clone ${GitProxy}https://github.com/jayus0821/swagger-hack.git > /dev/null 2>&1 && Echo_INFOR \"Downloaded $name\" || Echo_ERROR2\n        cd $dir && python3 swagger-hack2.0.py -h > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the $dir\" || Echo_ERROR3\n    fi\n\n}\n\n# jitpack.io often download fails\n# ===================== Install ysoserial =====================\nPentest_ysoserial_Install(){\n\n    name=\"ysoserial\"\n    dir=\"$P_Dir/ysoserial\"\n\n    if test -e $dir/ysoserial.jar\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        mkdir -p $dir && cd $_ && rm -f ysoserial.jar > /dev/null 2>&1 && $Proxy_OK wget -O ysoserial.jar ${GitProxy}https://github.com/frohoff/ysoserial/releases/download/v0.0.6/ysoserial-all.jar > /dev/null 2>&1 || Echo_ERROR2\n        if test -e $dir/ysoserial.jar\n        then\n            Echo_INFOR \"Successfully installed $name in the $dir\"\n        else\n            Echo_ERROR3\n        fi\n    fi\n\n}\n\n# ===================== Install ysuserial =====================\nPentest_ysuserial_Install(){\n\n    name=\"ysuserial\"\n    dir=\"$P_Dir/ysuserial\"\n\n    if test -e $dir/ysuserial.jar\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        mkdir -p $dir && cd $_ && rm -f ysuserial.jar > /dev/null 2>&1 && $Proxy_OK wget -O ysuserial.jar ${GitProxy}https://github.com/su18/ysoserial/releases/download/$ysuserial_Ver/$ysuserial_bin > /dev/null 2>&1 || Echo_ERROR2\n        if test -e $dir/ysuserial.jar\n        then\n            Echo_INFOR \"Successfully installed $name in the $dir\"\n        else\n            Echo_ERROR3\n        fi\n    fi\n\n}\n\n# ===================== Install remote-method-guesser =====================\nPentest_remote-method-guesser_Install(){\n\n    JDK_Check\n\n    name=\"remote-method-guesser\"\n    dir=\"$P_Dir/remote-method-guesser\"\n\n    if test -e $dir/rmg.jar\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        mkdir -p $dir && cd $_ && rm -f rmg.jar > /dev/null 2>&1 && $Proxy_OK wget -O rmg.jar ${GitProxy}https://github.com/qtc-de/remote-method-guesser/releases/download/$rmg_Ver/$rmg_bin > /dev/null 2>&1 || Echo_ERROR2\n        cd $dir && java -jar rmg.jar --help > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the $dir\" || Echo_ERROR3\n    fi\n\n}\n\n# ===================== Install SSRFmap =====================\nPentest_SSRFmap_Install(){\n\n    name=\"SSRFmap\"\n    dir=\"$P_Dir/SSRFmap\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        $Proxy_OK git clone ${GitProxy}https://github.com/swisskyrepo/SSRFmap.git $dir > /dev/null 2>&1 && Echo_INFOR \"Downloaded $name\" || Echo_ERROR2\n        cd $dir && Install_Switch7 \"requirements.txt\" && python3 ssrfmap.py -h > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the $dir\" || { Echo_ERROR3; rm -rf $dir; cd /tmp; }\n    fi\n\n}\n\n# ===================== Install testssl =====================\nPentest_testssl_Install(){\n\n    name=\"testssl\"\n    dir=\"$P_Dir/testssl.sh/\"\n\n    if test -e $P_Dir/testssl.sh\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        Rm_Lock\n        case $Linux_Version in\n            *\"CentOS\"*|*\"RedHat\"*|*\"Fedora\"*|*\"AlmaLinux\"*|*\"VzLinux\"*|*\"Rocky\"*)\n                Install_Switch \"bind-utils\"\n                ;;\n            *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n                Install_Switch \"dnsutils\"\n                ;;\n            *) ;;\n        esac\n        cd $P_Dir && git clone --depth 1 https://github.com/drwetter/testssl.sh.git > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the $dir\" || Echo_ERROR3\n    fi\n\n}\n\n# ===================== Install dalfox =====================\nPentest_dalfox_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            dalfox_bin=$dalfox_bin_amd64\n            ;;\n        *\"linux-arm64\"*)\n            dalfox_bin=$dalfox_bin_arm64\n            ;;\n    esac\n\n    name=\"dalfox\"\n    which dalfox > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/dalfox && cd /tmp/dalfox && rm -f $dalfox_bin && $Proxy_OK wget ${GitProxy}https://github.com/hahwul/dalfox/releases/download/$dalfox_Ver/$dalfox_bin > /dev/null 2>&1 || Echo_ERROR2\n        tar -zxvf $dalfox_bin > /dev/null 2>&1\n        mv dalfox /usr/local/bin/dalfox && chmod +x /usr/local/bin/dalfox\n        rm -rf /tmp/dalfox && cd /tmp\n        which dalfox > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $dalfox_Ver in the /usr/local/bin/\" || Echo_ERROR3\n    fi\n\n}\n\n# ===================== Install JNDI-Injection-Exploit =====================\nPentest_JNDI-Injection-Exploit_Install(){\n\n    name=\"JNDI-Injection-Exploit\"\n    dir=\"$P_Dir/JNDI-Injection-Exploit\"\n\n    if test -e $dir/JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        mkdir -p $dir && cd $_ && rm -f JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar > /dev/null 2>&1 && $Proxy_OK wget -O JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar ${GitProxy}https://github.com/welk1n/JNDI-Injection-Exploit/releases/download/v1.0/JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar > /dev/null 2>&1 || Echo_ERROR2\n        if test -e $dir/JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar\n        then\n            Echo_INFOR \"Successfully installed $name in the $dir\"\n        else\n            Echo_ERROR3\n        fi\n    fi\n\n}\n\n# ===================== Install Gopherus =====================\nPentest_Gopherus_Install(){\n\n    name=\"Gopherus\"\n    which gopherus > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        cd $P_Dir && rm -rf Gopherus && $Proxy_OK git clone ${GitProxy}https://github.com/tarunkant/Gopherus.git > /dev/null 2>&1 || Echo_ERROR2\n        Install_Switch3 \"argparse\"\n        Install_Switch3 \"requests\"\n        cd Gopherus && chmod +x gopherus.py\n        ln -sf $(pwd)/gopherus.py /usr/local/bin/gopherus\n        which gopherus > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the $P_Dir\" || Echo_ERROR3\n    fi\n\n}\n\n# ===================== Install redis-rogue-server =====================\nPentest_redis-rogue-server_Install(){\n\n    name=\"redis-rogue-server\"\n    dir=\"$P_Dir/redis-rogue-server\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        cd $P_Dir && $Proxy_OK git clone ${GitProxy}https://github.com/Dliv3/redis-rogue-server.git $dir > /dev/null 2>&1 || Echo_ERROR2\n        cd $dir && python3 redis-rogue-server.py -h > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the $dir\" || Echo_ERROR3\n    fi\n\n}\n\n# ===================== Install redis-rogue-server-win =====================\nPentest_redis-rogue-server-win_Install(){\n\n    name=\"redis-rogue-server-win\"\n    dir=\"$P_Dir/redis-rogue-server-win\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        cd $P_Dir && $Proxy_OK git clone ${GitProxy}https://github.com/No-Github/redis-rogue-server-win.git $dir > /dev/null 2>&1 || Echo_ERROR2\n        cd $dir && python3 redis-rogue-server.py -h > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the $dir\" || Echo_ERROR3\n    fi\n\n}\n\n# ===================== Install redis-rce =====================\nPentest_redis-rce_Install(){\n\n    name=\"redis-rce\"\n    dir=\"$P_Dir/redis-rce\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        Install_Switch4 \"six\"\n        rm -rf $dir && cd $P_Dir && $Proxy_OK git clone ${GitProxy}https://github.com/Ridter/redis-rce.git $dir > /dev/null 2>&1 || Echo_ERROR2\n        cd $dir && python3 redis-rce.py -h > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the $dir\" || Echo_ERROR3\n        cp $P_Dir/redis-rogue-server/exp.so $dir && Echo_INFOR \"Copied exp.so to $dir\"\n    fi\n\n}\n\n# ===================== Install redis_lua_exploit =====================\nPentest_redis_lua_exploit_Install(){\n\n    name=\"redis_lua_exploit\"\n    dir=\"$P_Dir/redis_lua_exploit\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        Install_Switch3 \"redis\"\n        cd $P_Dir && $Proxy_OK git clone ${GitProxy}https://github.com/QAX-A-Team/redis_lua_exploit.git $dir > /dev/null 2>&1 && Echo_INFOR \"Downloaded $name\" || Echo_ERROR2\n    fi\n\n}\n\n# ===================== Install shiro_rce_tool =====================\nPentest_shiro_rce_tool_Install(){\n\n    name=\"shiro_rce_tool\"\n    dir=\"$P_Dir/shiro_tool\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        mkdir -p $dir && cd $dir && rm -f shiro_tool.jar && $Proxy_OK wget -O shiro_tool.jar ${GitProxy}https://github.com/No-Github/Archive/releases/download/shiro/shiro_tool.jar > /dev/null 2>&1 || Echo_ERROR2\n        Echo_INFOR \"Successfully installed $name in the $dir\" || Echo_ERROR3\n    fi\n\n}\n\n# ===================== Install shiro-exploit =====================\nPentest_shiro-exploit_Install(){\n\n    name=\"shiro-exploit\"\n    dir=\"$P_Dir/shiro-exploit\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        cd $P_Dir && $Proxy_OK git clone ${GitProxy}https://github.com/Ares-X/shiro-exploit.git $dir > /dev/null 2>&1 || Echo_ERROR2\n        Install_Switch4 \"pycryptodome\"\n        cd $dir && python3 shiro-exploit.py -h > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the $dir\" || Echo_ERROR3\n    fi\n\n}\n\n# ===================== Install marshalsec =====================\nPentest_marshalsec_Install(){\n\n    name=\"marshalsec\"\n    dir=\"$P_Dir/marshalsec\"\n\n    if test -e $dir/marshalsec-0.0.3-SNAPSHOT-all.jar\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        mkdir -p $dir && cd $_ && rm -f marshalsec-0.0.3-SNAPSHOT-all.jar > /dev/null 2>&1\n        $Proxy_OK wget -O marshalsec-0.0.3-SNAPSHOT-all.jar ${GitProxy}https://github.com/No-Github/marshalsec/releases/download/v0.0.3/marshalsec-0.0.3-SNAPSHOT-all.jar > /dev/null 2>&1 || rm marshalsec-0.0.3-SNAPSHOT-all.jar\n        if test -e $dir/marshalsec-0.0.3-SNAPSHOT-all.jar\n        then\n            Echo_INFOR \"Successfully installed $name in the $dir\"\n        else\n            Echo_ERROR3\n        fi\n    fi\n\n}\n\n# ===================== Install ysomap =====================\nPentest_ysomap_Install(){\n\n    name=\"ysomap\"\n    dir=\"$P_Dir/ysomap\"\n\n    if test -e $dir/$ysomap_bin\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        mkdir -p $dir && cd $_ && rm -f $ysomap_bin > /dev/null 2>&1\n        $Proxy_OK wget -O $ysomap_bin ${GitProxy}https://github.com/wh1t3p1g/ysomap/releases/download/$ysomap_Ver/$ysomap_bin > /dev/null 2>&1 || rm $ysomap_bin\n        if test -e $dir/$ysomap_bin\n        then\n            Echo_INFOR \"Successfully installed $name in the $dir\"\n        else\n            Echo_ERROR3\n        fi\n    fi\n\n}\n\n# ===================== Install CDK =====================\nPentest_CDK_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            cdk_bin=$cdk_bin_amd64\n            ;;\n        *\"linux-arm64\"*)\n            cdk_bin=$cdk_bin_arm64\n            ;;\n    esac\n\n    name=\"CDK\"\n    which cdk > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/cdk && cd /tmp/cdk && rm -f ${cdk_bin} && $Proxy_OK wget ${GitProxy}https://github.com/cdk-team/CDK/releases/download/$cdk_Ver/$cdk_bin > /dev/null 2>&1 || Echo_ERROR2\n        mv --force $cdk_bin /usr/local/bin/cdk && chmod +x /usr/local/bin/cdk\n        rm -rf /tmp/cdk && cd /tmp\n        which cdk > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $cdk_Ver in the /usr/local/bin/\" || Echo_ERROR3\n    fi\n\n}\n\n# ===================== Install cf =====================\nPentest_cf_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            cf_bin=$cf_Install_amd64\n            ;;\n        *\"linux-arm64\"*)\n            cf_bin=$cf_Install_arm64\n            ;;\n    esac\n\n    name=\"cf\"\n    which cf > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/cf && cd /tmp/cf && rm -f $cf_bin > /dev/null 2>&1 && $Proxy_OK wget ${GitProxy}https://github.com/teamssix/cf/releases/download/$cf_Ver/$cf_bin > /dev/null 2>&1 || Echo_ERROR2\n        tar -zxvf $cf_bin > /dev/null 2>&1 && rm -f $cf_bin > /dev/null 2>&1\n        mv cf /usr/local/bin/cf && chmod +x /usr/local/bin/cf\n        rm -rf /tmp/cf && cd /tmp\n        which cf > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $cf_Ver in the /usr/local/bin/\" || Echo_ERROR3\n    fi\n\n}\n\n# 原项目删除,已将 jar 包备份一份到 Archive\nPentest_JNDIExploit_0x727_Install(){\n\n    name=\"JNDIExploit\"\n    dir=\"$P_Dir/JNDIExploit\"\n\n    if test -e $dir/JNDIExploit-1.3-SNAPSHOT.jar\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        mkdir -p $dir && cd $_\n        $Proxy_OK wget -O $JNDIExploit_bin ${GitProxy}https://github.com/0x727/JNDIExploit/releases/download/$JNDIExploit_Ver/$JNDIExploit_bin > /dev/null 2>&1 || rm $JNDIExploit_bin\n        unzip $JNDIExploit_bin > /dev/null 2>&1 && rm -f $JNDIExploit_bin\n        if test -e $dir/JNDIExploit-1.3-SNAPSHOT.jar\n        then\n            Echo_INFOR \"Successfully installed $name in the $dir\"\n        else\n            Echo_ERROR3\n        fi\n    fi\n\n}\n\n# 原项目删除,已将 jar 包备份一份到 Archive\nPentest_JNDIExploit_Install(){\n\n    name=\"JNDIExploit\"\n    dir=\"$P_Dir/JNDIExploit\"\n\n    if test -e $dir/JNDIExploit-1.2-SNAPSHOT.jar\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        mkdir -p $dir && cd $_ && rm -rf $JNDIExploit_dir > /dev/null 2>&1\n        $Proxy_OK wget -O $JNDIExploit_bin ${GitProxy}https://github.com/feihong-cs/JNDIExploit/releases/download/$JNDIExploit_Ver/$JNDIExploit_bin > /dev/null 2>&1 || rm $JNDIExploit_bin\n        unzip $JNDIExploit_bin > /dev/null 2>&1 && rm -f $JNDIExploit_bin\n        if test -e $dir/JNDIExploit-1.2-SNAPSHOT.jar\n        then\n            Echo_INFOR \"Successfully installed $name in the $dir\"\n        else\n            Echo_ERROR3\n        fi\n    fi\n\n}\n\n# ===================== Install Impacket =====================\nPentest_Impacket_Install(){\n\n    name=\"Impacket\"\n    dir=\"$P_Dir/impacket\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        $Proxy_OK git clone --depth 1 ${GitProxy}https://github.com/SecureAuthCorp/impacket.git $dir > /dev/null 2>&1 || Echo_ERROR2\n        cd $dir && pip3 install . > /dev/null 2>&1\n        python3 setup.py install > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the $dir\" || Echo_ERROR3\n    fi\n\n}\n\n# ===================== Install CobaltStrike 4.3 =====================\nPentest_CobaltStrike_Install(){\n\n    JDK_Check\n\n    name=\"CobaltStrike\"\n\n    if test -d $P_Dir/$CS_Version\n    then\n        Echo_ALERT \"$CS_Version is already installed in $P_Dir/$CS_Version\"\n    else\n        cd $P_Dir && rm -f $CS_File > /dev/null 2>&1 && $Proxy_OK wget -O $CS_File ${GitProxy2}https://raw.githubusercontent.com/No-Github/Archive/master/CS/$CS_File > /dev/null 2>&1 || Echo_ERROR \"$CS_File download failed, please check if the network is reachable, proxychains4 configuration is correct\"\n        rm -rf $CS_Version > /dev/null 2>&1 && unzip $CS_File > /dev/null 2>&1 && rm -f $CS_File > /dev/null 2>&1\n        cd $P_Dir/$CS_Version && chmod +x teamserver > /dev/null 2>&1\n        rm -f cobaltstrike.store > /dev/null 2>&1\n        Echo_INFOR \"Successfully installed $CS_Version in the $P_Dir/$CS_Version\" || Echo_ERROR3\n    fi\n\n    if test -e $P_Dir/$CS_Version/genCrossC2.Linux\n    then\n        Echo_ALERT \"genCrossC2.Linux file already exists \"\n    else\n        cd $P_Dir/$CS_Version && $Proxy_OK wget ${GitProxy}https://github.com/gloxec/CrossC2/releases/download/$CrossC2_Ver/genCrossC2.Linux > /dev/null 2>&1 && Echo_INFOR \"Downloaded CrossC2 in the $P_Dir/$CS_Version/genCrossC2.Linux \" || Echo_ERROR \"CrossC2 installation failed\"\n        chmod +x genCrossC2.Linux > /dev/null 2>&1\n    fi\n\n    Echo_INFOR \"CrossC2 command:\\n\\033[0m\\033[1;32mcd $P_Dir/$CS_Version/ && ./genCrossC2.Linux <IP> <port> ./.cobaltstrike.beacon_keys null Linux x64 <filename> \"\n\n    if test -e $P_Dir/$CS_Version/cobaltstrike.store\n    then\n        Echo_ALERT \"cobaltstrike.store file has been generated\"\n    else\n        cd $P_Dir/$CS_Version\n        keytool -keystore ./cobaltstrike.store -storepass sUp3r@dm1n -keypass sUp3r@dm1n -genkey -keyalg RSA -alias aliyun -dname \"CN=aliyun, OU=aliyun, O=aliyun, L=aliyun, S=aliyun, C=aliyun\" > /dev/null 2>&1\n\n        if test -e $P_Dir/$CS_Version/cobaltstrike.store\n        then\n            Echo_ALERT \"keytool 工具使用正常\"\n            rm -f cobaltstrike.store > /dev/null 2>&1\n        else\n            Echo_ERROR \"keytool 工具使用出现问题,正在重新配置 jenv\"\n            jenv_config \"/usr/local/java/$jdk8_Version\"\n            jenv local 1.8\n            keytool -keystore ./cobaltstrike.store -storepass sUp3r@dm1n -keypass sUp3r@dm1n -genkey -keyalg RSA -alias aliyun -dname \"CN=aliyun, OU=aliyun, O=aliyun, L=aliyun, S=aliyun, C=aliyun\" > /dev/null 2>&1\n\n            if test -e $P_Dir/$CS_Version/cobaltstrike.store\n            then\n                Echo_ALERT \"keytool 工具使用正常\"\n                rm -f cobaltstrike.store > /dev/null 2>&1\n            else\n                Echo_ERROR \"keytool 工具使用出现问题,请手动配置 jenv 环境\"\n            fi\n        fi\n    fi\n\n}\n\n# ===================== Install CobaltStrike 4.5 =====================\nPentest_CobaltStrike45_Install(){\n\n    JDK_Check\n\n    name=\"CobaltStrike4.5\"\n\n    if test -d $P_Dir/$CS45_Version\n    then\n        Echo_ALERT \"$CS45_Version is already installed in $P_Dir/$CS45_Version\"\n    else\n        cd $P_Dir && rm -f $CS45_File > /dev/null 2>&1 && $Proxy_OK wget -O $CS45_File ${GitProxy2}https://github.com/No-Github/Archive/releases/download/1.0.6/$CS45_File ${wget_option} || Echo_ERROR \"$CS45_File download failed, please check if the network is reachable, proxychains4 configuration is correct\"\n        rm -rf $CS45_Version > /dev/null 2>&1 && unzip $CS45_File > /dev/null 2>&1 && rm -f $CS45_File > /dev/null 2>&1\n        cd $P_Dir/$CS45_Version && chmod +x teamserver > /dev/null 2>&1\n        rm -f cobaltstrike.store > /dev/null 2>&1\n        Echo_INFOR \"Successfully installed $CS45_Version in the $P_Dir/$CS45_Version\" || Echo_ERROR3\n    fi\n\n    if test -e $P_Dir/$CS45_Version/genCrossC2.Linux\n    then\n        Echo_ALERT \"genCrossC2.Linux file already exists \"\n    else\n        cd $P_Dir/$CS45_Version && $Proxy_OK wget ${GitProxy}https://github.com/gloxec/CrossC2/releases/download/$CrossC2_Ver/genCrossC2.Linux ${wget_option} && Echo_INFOR \"Downloaded CrossC2 in the $P_Dir/$CS45_Version/genCrossC2.Linux \" || Echo_ERROR \"CrossC2 installation failed\"\n        chmod +x genCrossC2.Linux > /dev/null 2>&1\n    fi\n\n    Echo_INFOR \"CrossC2 command:\\n\\033[0m\\033[1;32mcd $P_Dir/$CS45_Version/ && ./genCrossC2.Linux <IP> <port> ./.cobaltstrike.beacon_keys null Linux x64 <filename> \"\n\n    if test -e $P_Dir/$CS45_Version/cobaltstrike.store\n    then\n        Echo_ALERT \"cobaltstrike.store file has been generated\"\n    else\n        cd $P_Dir/$CS45_Version\n        keytool -keystore ./cobaltstrike.store -storepass sUp3r@dm1n -keypass sUp3r@dm1n -genkey -keyalg RSA -alias aliyun -dname \"CN=aliyun, OU=aliyun, O=aliyun, L=aliyun, S=aliyun, C=aliyun\" > /dev/null 2>&1\n\n        if test -e $P_Dir/$CS45_Version/cobaltstrike.store\n        then\n            Echo_ALERT \"keytool 工具使用正常\"\n            rm -f cobaltstrike.store > /dev/null 2>&1\n        else\n            Echo_ERROR \"keytool 工具使用出现问题,正在重新配置 jenv\"\n            jenv_config \"/usr/local/java/$jdk8_Version\"\n            jenv local 1.8\n            keytool -keystore ./cobaltstrike.store -storepass sUp3r@dm1n -keypass sUp3r@dm1n -genkey -keyalg RSA -alias aliyun -dname \"CN=aliyun, OU=aliyun, O=aliyun, L=aliyun, S=aliyun, C=aliyun\" > /dev/null 2>&1\n\n            if test -e $P_Dir/$CS45_Version/cobaltstrike.store\n            then\n                Echo_ALERT \"keytool 工具使用正常\"\n                rm -f cobaltstrike.store > /dev/null 2>&1\n            else\n                Echo_ERROR \"keytool 工具使用出现问题,请手动配置 jenv 环境\"\n            fi\n        fi\n    fi\n\n}\n\n# ===================== Install Responder =====================\nPentest_Responder_Install(){\n\n    name=\"Responder\"\n    dir=\"$P_Dir/Responder\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        Install_Switch4 \"netifaces\"\n        $Proxy_OK git clone --depth 1 ${GitProxy}https://github.com/lgandx/Responder.git $dir > /dev/null 2>&1 && cd $dir || Echo_ERROR2\n        python3 Responder.py -h > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the $dir\" || Echo_ERROR3\n    fi\n}\n\n# ===================== Install krbrelayx =====================\nPentest_krbrelayx_Install(){\n\n    name=\"krbrelayx\"\n    dir=\"$P_Dir/krbrelayx\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        $Proxy_OK git clone ${GitProxy}https://github.com/dirkjanm/krbrelayx.git $dir > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the $dir\" || Echo_ERROR3\n    fi\n\n}\n\n# ===================== Install bettercap =====================\nPentest_bettercap_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            bettercap_bin=$bettercap_bin_amd64\n            ;;\n        *\"linux-arm64\"*)\n            bettercap_bin=$bettercap_bin_arm64\n            ;;\n    esac\n\n    name=\"bettercap\"\n    which bettercap > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n\n        mkdir -p /tmp/bettercap && cd /tmp/bettercap && rm -f $bettercap_bin > /dev/null 2>&1 && $Proxy_OK wget ${GitProxy}https://github.com/bettercap/bettercap/releases/download/$bettercap_Ver/$bettercap_bin > /dev/null 2>&1 || Echo_ERROR2\n        unzip $bettercap_bin > /dev/null 2>&1\n        mv --force bettercap /usr/local/bin/bettercap && chmod +x /usr/local/bin/bettercap\n        rm -rf /tmp/bettercap && cd /tmp\n        which bettercap > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $bettercap_Ver in the /usr/local/bin/\" || Echo_ERROR3\n\n        case $Linux_Version in\n            *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n                Rm_Lock\n                Install_Switch \"libnetfilter-queue-dev\"\n                Install_Switch \"libusb-1.0-0\"\n                ;;\n            *) ;;\n        esac\n\n    fi\n\n}\n\n# ===================== Install mitmproxy =====================\nPentest_mitmproxy_Install(){\n\n    name=\"mitmproxy\"\n    which mitmproxy > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/mitmproxy && cd /tmp/mitmproxy && rm -f $mitmproxy_bin && $Proxy_OK wget -O $mitmproxy_bin https://downloads.mitmproxy.org/$mitmproxy_Ver/$mitmproxy_bin > /dev/null 2>&1 || Echo_ERROR2\n        tar -zxvf $mitmproxy_bin > /dev/null 2>&1\n        mv --force mitmproxy /usr/local/bin/ && chmod +x /usr/local/bin/mitmproxy && rm -f /tmp/$mitmproxy_bin > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $mitmproxy_Ver in the /usr/local/bin/\" || Echo_ERROR3\n        mv --force mitmdump /usr/local/bin/ && chmod +x /usr/local/bin/mitmdump && Echo_INFOR \"Successfully installed $name in the /usr/local/bin/\" || Echo_ERROR \"mitmdump installation failed\"\n        mv --force mitmweb /usr/local/bin/ && chmod +x /usr/local/bin/mitmweb && Echo_INFOR \"Successfully installed $name in the /usr/local/bin/\" || Echo_ERROR \"mitmweb installation failed\"\n        rm -rf /tmp/mitmproxy && cd /tmp\n    fi\n\n}\n\n# ===================== Install pypykatz =====================\nPentest_pypykatz_Install(){\n\n    name=\"pypykatz\"\n    which pypykatz > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        Install_Switch4 \"pypykatz\"\n    fi\n\n}\n\n# ===================== Install CrackMapExec =====================\nPentest_CrackMapExec_Install(){\n\n    # https://wiki.porchetta.industries/getting-started/installation/installation-on-unix\n    name=\"CrackMapExec\"\n    # dir=\"$P_Dir/CrackMapExec\"\n    which crackmapexec > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        Install_Switch5 \"pipx\"\n        pipx ensurepath\n        pipx install crackmapexec\n\n        # 这个版本使用有些 bug,还是先安装旧版本\n        #$Proxy_OK git clone --depth 1 ${GitProxy}https://github.com/mpgn/CrackMapExec $dir > /dev/null 2>&1 && Echo_INFOR \"Downloaded $name in the $dir\" || Echo_ERROR2\n        #cd CrackMapExec\n        #$Proxy_OK pipx install .\n    fi\n\n}\n\n# ===================== Install Neo-reGeorg =====================\nPentest_Neo-reGeorg_Install(){\n\n    name=\"Neo-reGeorg\"\n    dir=\"$P_Dir/Neo-reGeorg\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        $Proxy_OK git clone --depth 1 ${GitProxy}https://github.com/L-codes/Neo-reGeorg.git $dir > /dev/null 2>&1 && Echo_INFOR \"Downloaded $name in the $dir\" || Echo_ERROR2\n    fi\n\n}\n\n# ===================== Install suo5 =====================\nPentest_suo5_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            suo5_bin=$suo5_bin_amd64\n            ;;\n        *\"linux-arm64\"*)\n            suo5_bin=$suo5_bin_arm64\n            ;;\n    esac\n\n    name=\"suo5\"\n    which suo5 > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/suo5 && cd /tmp/suo5 && $Proxy_OK wget ${GitProxy}https://github.com/zema1/suo5/releases/download/${suo5_Ver}/${suo5_bin} > /dev/null 2>&1 || Echo_ERROR2\n        mv ${suo5_bin} /usr/local/bin/suo5 && chmod +x /usr/local/bin/suo5\n        which suo5 > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name ${suo5_Ver} in the /usr/local/bin/\" || Echo_ERROR3\n        rm -rf /tmp/suo5 && cd /tmp\n    fi\n\n}\n\n# ===================== Install kerbrute =====================\nPentest_kerbrute_Install(){\n\n    name=\"kerbrute\"\n\n    which kerbrute > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        case $Linux_architecture_Name in\n            *\"linux-x86_64\"*)\n                mkdir -p /tmp/kerbrute && cd /tmp/kerbrute && rm -f $kerbrute_bin > /dev/null 2>&1 && $Proxy_OK wget ${GitProxy}https://github.com/ropnop/kerbrute/releases/download/$kerbrute_Ver/$kerbrute_bin > /dev/null 2>&1 || Echo_ERROR2\n                mv --force $kerbrute_bin /usr/local/bin/kerbrute && chmod +x /usr/local/bin/kerbrute && rm -f /tmp/$kerbrute_bin > /dev/null 2>&1\n                rm -rf /tmp/kerbrute && cd /tmp\n                which kerbrute > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $kerbrute_Ver in the /usr/local/bin/\" || Echo_ERROR3\n                ;;\n            *\"linux-arm64\"*)\n                mkdir -p /tmp/kerbrute && cd /tmp/kerbrute && go install github.com/ropnop/kerbrute@latest\n                mv $GOPATH/bin/kerbrute /usr/local/bin/kerbrute && chmod +x /usr/local/bin/kerbrute || { mv /root/go/bin/kerbrute /usr/local/bin/kerbrute; chmod +x /usr/local/bin/kerbrute; }\n                rm -rf /tmp/kerbrute && cd /tmp\n                which kerbrute > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the /usr/local/bin/\" || Echo_ERROR3\n                ;;\n        esac\n    fi\n\n}\n\n# ===================== Install Adinfo =====================\nPentest_Adinfo_Install(){\n\n    name=\"Adinfo\"\n\n    which Adinfo > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        case $Linux_architecture_Name in\n            *\"linux-x86_64\"*)\n                mkdir -p /tmp/Adinfo && cd /tmp/Adinfo && rm -f $Adinfo_bin > /dev/null 2>&1 && $Proxy_OK wget ${GitProxy}https://github.com/lzzbb/Adinfo/releases/download/$Adinfo_Ver/$Adinfo_bin > /dev/null 2>&1 || Echo_ERROR2\n                mv --force $Adinfo_bin /usr/local/bin/Adinfo && chmod +x /usr/local/bin/Adinfo && rm -f /tmp/$Adinfo_bin > /dev/null 2>&1\n                rm -rf /tmp/Adinfo && cd /tmp\n                which Adinfo > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $Adinfo_Ver in the /usr/local/bin/\" || Echo_ERROR3\n                ;;\n            *\"linux-arm64\"*)\n                # fork版更新了go.mod\n                mkdir -p /tmp/Adinfo && cd /tmp/Adinfo && go install github.com/No-Github/Adinfo@latest\n                mv $GOPATH/bin/Adinfo /usr/local/bin/Adinfo && chmod +x /usr/local/bin/Adinfo || { mv /root/go/bin/Adinfo /usr/local/bin/Adinfo; chmod +x /usr/local/bin/Adinfo; }\n                rm -rf /tmp/Adinfo && cd /tmp\n                which Adinfo > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the /usr/local/bin/\" || Echo_ERROR3\n                ;;\n        esac\n    fi\n\n}\n\n# ===================== Install PetitPotam =====================\nPentest_PetitPotam_Install(){\n\n    name=\"PetitPotam\"\n    dir=\"$P_Dir/PetitPotam\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        Install_Switch4 \"impacket\"\n        rm -rf $dir > /dev/null 2>&1\n        $Proxy_OK git clone --depth 1 ${GitProxy}https://github.com/topotam/PetitPotam.git $dir > /dev/null 2>&1 && Echo_INFOR \"Downloaded $name in the $dir\" || Echo_ERROR \"Failed to download the $name dictionary from github\"\n    fi\n\n}\n\n# ===================== Install Certipy =====================\nPentest_Certipy_Install(){\n\n    name=\"Certipy\"\n    which certipy > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        Install_Switch4 \"certipy-ad\"\n    fi\n\n}\n\n# ===================== Install PKINITtools =====================\nPentest_PKINITtools_Install(){\n\n    name=\"PKINITtools\"\n    dir=\"$P_Dir/PKINITtools\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        Install_Switch4 \"impacket\"\n        Install_Switch4 \"minikerberos\"\n        $Proxy_OK git clone --depth 1 ${GitProxy}https://github.com/dirkjanm/PKINITtools.git $dir > /dev/null 2>&1 && Echo_INFOR \"Downloaded $name in the $dir\" || Echo_ERROR \"Failed to download the $name dictionary from github\"\n        cd $dir && Install_Switch7 \"requirements.txt\"\n    fi\n\n}\n\n# ===================== Install hashcat、7z2hashcat =====================\nPentest_hashcat_Install(){\n\n    name=\"hashcat\"\n    dir=\"$P_Dir/${hashcat_Version}\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        rm -rf /usr/sbin/hashcat\n        rm -rf $P_Dir/hashcat-6.2.*\n        $Proxy_OK wget -O $P_Dir/${hashcat_Version}.7z ${GitProxy2}https://hashcat.net/files/${hashcat_Version}.7z --no-check-certificate ${wget_option} > /dev/null 2>&1 && Echo_INFOR \"Downloaded ${hashcat_Version}\" || Echo_ERROR2\n        7za x $P_Dir/${hashcat_Version}.7z -o$P_Dir > /dev/null 2>&1\n        rm -f $P_Dir/${hashcat_Version}.7z > /dev/null 2>&1\n        cd $P_Dir/hashcat* > /dev/null 2>&1 && chmod +x hashcat.bin && cp hashcat.bin hashcat\n        ln -s $P_Dir/${hashcat_Version}/hashcat /usr/sbin/hashcat > /dev/null 2>&1\n        which hashcat > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the $dir\" || Echo_ERROR3\n    fi\n\n    if test -e $P_Dir/7z2hashcat.pl\n    then\n        Echo_ALERT \"7z2hashcat is already installed in $P_Dir\"\n    else\n        name=\"7z2hashcat\"\n        $Proxy_OK curl -o $P_Dir/7z2hashcat.pl ${GitProxy}https://raw.githubusercontent.com/philsmd/7z2hashcat/master/7z2hashcat.pl > /dev/null 2>&1 && Echo_INFOR \"Downloaded 7z2hashcat.pl in the $P_Dir\" || Echo_ERROR2\n\n    fi\n\n}\n\n# ===================== Install ZoomEye-python =====================\nPentest_ZoomEye_Install(){\n\n    name=\"ZoomEye-python\"\n    which zoomeye > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        Install_Switch4 \"zoomeye\"\n    fi\n\n}\n\n# ===================== Install jadx =====================\nPentest_jadx_Install(){\n\n    name=\"jadx\"\n    which jadx > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /usr/local/jadx && cd /usr/local/jadx && rm -f $jadx_bin > /dev/null 2>&1 && $Proxy_OK wget ${GitProxy}https://github.com/skylot/jadx/releases/download/$jadx_Ver/$jadx_bin > /dev/null 2>&1 || Echo_ERROR2\n        unzip $jadx_bin > /dev/null 2>&1\n        chmod +x /usr/local/jadx/bin/jadx && ln -s /usr/local/jadx/bin/jadx /usr/local/bin/jadx && rm -f /usr/local/$jadx_bin > /dev/null 2>&1\n        which jadx > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $jadx_Ver in the /usr/local/jadx/\" || Echo_ERROR3\n\n    fi\n\n}\n\n# ===================== Install ncat =====================\nPentest_ncat_Install(){\n\n    name=\"ncat\"\n\n    case $Linux_Version in\n        *\"CentOS\"*|*\"RedHat\"*|*\"Fedora\"*|*\"AlmaLinux\"*|*\"VzLinux\"*|*\"Rocky\"*)\n            Echo_INFOR \"Installed when nmap was installed $name\"\n            ;;\n        *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n            ncat --version > /dev/null 2>&1\n\n            if [ $? == 0 ]\n            then\n                Echo_ALERT \"$name installed\"\n            else\n                Rm_Lock\n                Install_Switch \"ncat\"\n                Echo_INFOR \"If there is no response for a long time, please press enter manually\"\n                update-alternatives --set nc /usr/bin/ncat >/dev/null 2>&1 && Echo_INFOR \"The default nc is configured as /usr/bin/ncat\" || Echo_ERROR \"Set default nc to /usr/bin/ncat Failed\"\n            fi\n\n            ;;\n        *) ;;\n    esac\n\n}\n\n# ===================== Install Platypus =====================\nPentest_Platypus_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            Platypus_bin=$Platypus_bin_amd64\n            ;;\n        *\"linux-arm64\"*)\n            Platypus_bin=$Platypus_bin_arm64\n            ;;\n    esac\n\n    name=\"Platypus\"\n    which Platypus > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/Platypus && cd /tmp/Platypus && $Proxy_OK wget ${GitProxy}https://github.com/WangYihang/Platypus/releases/download/${Platypus_Ver}/${Platypus_bin} > /dev/null 2>&1 || Echo_ERROR2\n        mv ${Platypus_bin} /usr/local/bin/Platypus && chmod +x /usr/local/bin/Platypus\n        which Platypus > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name ${Platypus_Ver} in the /usr/local/bin/\" || Echo_ERROR3\n        rm -rf /tmp/Platypus && cd /tmp\n    fi\n\n}\n\n# ===================== Install MoreFind =====================\nPentest_MoreFind_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            MoreFind_bin=$MoreFind_bin_amd64\n            ;;\n        *\"linux-arm64\"*)\n            MoreFind_bin=$MoreFind_bin_arm64\n            ;;\n    esac\n\n    name=\"MoreFind\"\n    which MoreFind > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/MoreFind && cd /tmp/MoreFind && $Proxy_OK wget ${GitProxy}https://github.com/mstxq17/MoreFind/releases/download/$MoreFind_Ver/$MoreFind_bin > /dev/null 2>&1 || Echo_ERROR2\n        tar -zxvf $MoreFind_bin > /dev/null 2>&1\n        mv --force MoreFind /usr/local/bin/MoreFind && chmod +x /usr/local/bin/MoreFind\n        which MoreFind > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $MoreFind_Ver in the /usr/local/bin/\" || Echo_ERROR3\n        rm -rf /tmp/MoreFind && cd /tmp\n    fi\n\n}\n\n# ===================== Install alterx =====================\nPentest_alterx_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            alterx_bin=$alterx_bin_amd64\n            ;;\n        *\"linux-arm64\"*)\n            alterx_bin=$alterx_bin_arm64\n            ;;\n    esac\n\n    name=\"alterx\"\n    which alterx > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/alterx && cd /tmp/alterx && $Proxy_OK wget ${GitProxy}https://github.com/projectdiscovery/alterx/releases/download/$alterx_Ver/$alterx_bin > /dev/null 2>&1 || Echo_ERROR2\n        unzip $alterx_bin > /dev/null 2>&1\n        mv --force alterx /usr/local/bin/alterx && chmod +x /usr/local/bin/alterx\n        alterx -version > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $alterx_Ver in the /usr/local/bin/\" || Echo_ERROR3\n        rm -rf /tmp/alterx && cd /tmp\n    fi\n\n}\n\n# ===================== Install mapcidr =====================\nPentest_mapcidr_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            mapcidr_bin=$mapcidr_bin_amd64\n            ;;\n        *\"linux-arm64\"*)\n            mapcidr_bin=$mapcidr_bin_arm64\n            ;;\n    esac\n\n    name=\"mapcidr\"\n    which mapcidr > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/mapcidr && cd /tmp/mapcidr && $Proxy_OK wget ${GitProxy}https://github.com/projectdiscovery/mapcidr/releases/download/$mapcidr_Ver/$mapcidr_bin > /dev/null 2>&1 || Echo_ERROR2\n        unzip $mapcidr_bin > /dev/null 2>&1\n        mv --force mapcidr /usr/local/bin/mapcidr && chmod +x /usr/local/bin/mapcidr\n        mapcidr -version > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $mapcidr_Ver in the /usr/local/bin/\" || Echo_ERROR3\n        rm -rf /tmp/mapcidr && cd /tmp\n    fi\n\n}\n\n# 建议使用 mapcidr\n# ===================== Install iprange =====================\nPentest_iprange_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            iprange_bin=$iprange_bin_amd64\n            ;;\n        *\"linux-arm64\"*)\n            iprange_bin=$iprange_bin_arm64\n            ;;\n    esac\n\n    name=\"iprange\"\n    which iprange > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/iprange && cd /tmp/iprange && rm -f $iprange_bin > /dev/null 2>&1 && $Proxy_OK wget ${GitProxy}https://github.com/ffffffff0x/iprange/releases/download/$iprange_Ver/$iprange_bin > /dev/null 2>&1 || Echo_ERROR2\n        tar -zxvf $iprange_bin > /dev/null 2>&1\n        mv --force iprange /usr/local/bin/iprange && chmod +x /usr/local/bin/iprange\n        rm -rf /tmp/iprange && cd /tmp\n        which iprange > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $iprange_Ver in the /usr/local/bin/\" || Echo_ERROR3\n    fi\n\n}\n\n# ===================== Install dnsx =====================\nPentest_dnsx_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            dnsx_bin=$dnsx_bin_amd64\n            ;;\n        *\"linux-arm64\"*)\n            dnsx_bin=$dnsx_bin_arm64\n            ;;\n    esac\n\n    name=\"dnsx\"\n    which dnsx > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/dnsx && cd /tmp/dnsx && rm -f $dnsx_bin > /dev/null 2>&1 && $Proxy_OK wget ${GitProxy}https://github.com/projectdiscovery/dnsx/releases/download/$dnsx_Ver/$dnsx_bin > /dev/null 2>&1 || Echo_ERROR2\n        unzip $dnsx_bin > /dev/null 2>&1\n        mv --force dnsx /usr/local/bin/dnsx && chmod +x /usr/local/bin/dnsx\n        which dnsx > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $dnsx_Ver in the /usr/local/bin/\" || Echo_ERROR3\n        rm -rf /tmp/dnsx && cd /tmp\n    fi\n\n}\n\n# ===================== Install uncover =====================\nPentest_uncover_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            uncover_bin=$uncover_bin_amd64\n            ;;\n        *\"linux-arm64\"*)\n            uncover_bin=$uncover_bin_arm64\n            ;;\n    esac\n\n    name=\"uncover\"\n    which uncover > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/uncover && cd /tmp/uncover && $Proxy_OK wget ${GitProxy}https://github.com/projectdiscovery/uncover/releases/download/$uncover_Ver/$uncover_bin > /dev/null 2>&1 || Echo_ERROR2\n        unzip $uncover_bin > /dev/null 2>&1\n        mv --force uncover /usr/local/bin/uncover && chmod +x /usr/local/bin/uncover\n        which uncover > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $uncover_Ver in the /usr/local/bin/\" || Echo_ERROR3\n        rm -rf /tmp/uncover && cd /tmp\n    fi\n\n}\n\n# ===================== Install nali =====================\nPentest_nali_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            nali_bin=$nali_bin_amd64\n            ;;\n        *\"linux-arm64\"*)\n            nali_bin=$nali_bin_arm64\n            ;;\n    esac\n\n    name=\"nali\"\n    which nali > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/nali && cd /tmp/nali && $Proxy_OK wget ${GitProxy}https://github.com/zu1k/nali/releases/download/$nali_Ver/$nali_bin > /dev/null 2>&1 || Echo_ERROR2\n        gunzip $nali_bin > /dev/null 2>&1\n        mv nali-linux-* /usr/local/bin/nali && chmod +x /usr/local/bin/nali\n        which nali > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $nali_Ver in the /usr/local/bin/\" || Echo_ERROR3\n        rm -rf /tmp/nali && cd /tmp\n    fi\n\n}\n\n# ===================== Install anew =====================\nPentest_anew_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            anew_bin=$anew_bin_amd64\n            ;;\n        *\"linux-arm64\"*)\n            anew_bin=$anew_bin_arm64\n            ;;\n    esac\n\n    name=\"anew\"\n    which anew  > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/anew && cd /tmp/anew && $Proxy_OK wget ${GitProxy}https://github.com/No-Github/anew/releases/download/$anew_Ver/$anew_bin > /dev/null 2>&1 || Echo_ERROR2\n        tar -xzvf ${anew_bin} > /dev/null\n        mv anew /usr/local/bin/anew && chmod +x /usr/local/bin/anew\n        which anew > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $anew_Ver in the /usr/local/bin/\" || Echo_ERROR3\n        rm -rf /tmp/anew && cd /tmp\n    fi\n\n}\n\n# ===================== Install gron =====================\nPentest_gron_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            gron_bin=$gron_bin_amd64\n            ;;\n        *\"linux-arm64\"*)\n            gron_bin=$gron_bin_arm64\n            ;;\n    esac\n\n    name=\"gron\"\n    which gron > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/gron && cd /tmp/gron && rm -f ${gron_bin} > /dev/null 2>&1 && $Proxy_OK wget ${GitProxy}https://github.com/tomnomnom/gron/releases/download/${gron_Ver}/${gron_bin} > /dev/null 2>&1 || Echo_ERROR2\n        tar -xzvf ${gron_bin} > /dev/null 2>&1\n        mv /tmp/gron/gron /usr/local/bin/gron && chmod +x /usr/local/bin/gron\n        which gron > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name ${gron_Ver} in the /usr/local/bin/\" || Echo_ERROR3\n        rm -rf /tmp/gron && cd /tmp\n    fi\n\n}\n\n# ===================== Install unfurl =====================\nPentest_unfurl_Install(){\n\n    name=\"unfurl\"\n    which unfurl > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        case $Linux_architecture_Name in\n            *\"linux-x86_64\"*)\n                mkdir -p /tmp/unfurl && cd /tmp/unfurl && rm -f ${unfurl_Bin} > /dev/null 2>&1 && $Proxy_OK wget ${GitProxy}https://github.com/tomnomnom/unfurl/releases/download/${unfurl_Ver}/${unfurl_Bin} > /dev/null 2>&1 || Echo_ERROR2\n                tar -xzvf ${unfurl_Bin} > /dev/null 2>&1\n                mv /tmp/unfurl/unfurl /usr/local/bin/unfurl && chmod +x /usr/local/bin/unfurl\n                rm -rf /tmp/unfurl && cd /tmp\n                which unfurl > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name ${unfurl_Ver} in the /usr/local/bin/\" || Echo_ERROR3\n                ;;\n            *\"linux-arm64\"*)\n                mkdir -p /tmp/unfurl && cd /tmp/unfurl && go install github.com/tomnomnom/unfurl@latest\n                mv $GOPATH/bin/unfurl /usr/local/bin/unfurl && chmod +x /usr/local/bin/unfurl || { mv /root/go/bin/unfurl /usr/local/bin/unfurl; chmod +x /usr/local/bin/unfurl; }\n                rm -rf /tmp/unfurl && cd /tmp\n                which unfurl > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the /usr/local/bin/\" || Echo_ERROR3\n                ;;\n        esac\n    fi\n\n}\n\n# ===================== Install qsreplace =====================\nPentest_qsreplace_Install(){\n\n    name=\"qsreplace\"\n    which qsreplace > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        case $Linux_architecture_Name in\n            *\"linux-x86_64\"*)\n                mkdir -p /tmp/qsreplace && cd /tmp/qsreplace && rm -f ${qsreplace_bin} > /dev/null 2>&1 && $Proxy_OK wget ${GitProxy}https://github.com/tomnomnom/qsreplace/releases/download/${qsreplace_Ver}/${qsreplace_bin} > /dev/null 2>&1 || Echo_ERROR2\n                tar -xzvf ${qsreplace_bin} > /dev/null 2>&1\n                mv /tmp/qsreplace/qsreplace /usr/local/bin/qsreplace && chmod +x /usr/local/bin/qsreplace\n                rm -rf /tmp/qsreplace && cd /tmp\n                which qsreplace > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name ${qsreplace_Ver} in the /usr/local/bin/\" || Echo_ERROR3\n                ;;\n            *\"linux-arm64\"*)\n                mkdir -p /tmp/qsreplace && cd /tmp/qsreplace && go install github.com/tomnomnom/qsreplace@latest\n                mv $GOPATH/bin/qsreplace /usr/local/bin/qsreplace && chmod +x /usr/local/bin/qsreplace || { mv /root/go/bin/qsreplace /usr/local/bin/qsreplace; chmod +x /usr/local/bin/qsreplace; }\n                rm -rf /tmp/qsreplace && cd /tmp\n                which qsreplace > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the /usr/local/bin/\" || Echo_ERROR3\n                ;;\n        esac\n    fi\n\n}\n\n# ===================== Install Interlace =====================\nPentest_Interlace_Install(){\n\n    name=\"Interlace\"\n    which interlace > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/interlace && cd /tmp/interlace && rm -rf Interlace\n        $Proxy_OK git clone --depth 1 ${GitProxy}https://github.com/codingo/Interlace.git > /dev/null 2>&1 && Echo_INFOR \"Downloaded $name\" || Echo_ERROR2\n        cd Interlace && $Proxy_OK python3 setup.py install > /dev/null 2>&1\n        rm -rf /tmp/interlace && cd /tmp\n        which interlace > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name\" || Echo_ERROR3\n    fi\n\n}\n\n# ===================== Install sttr =====================\nPentest_sttr_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            sttr_bin=$sttr_bin_amd64\n            ;;\n        *\"linux-arm64\"*)\n            sttr_bin=$sttr_bin_arm64\n            ;;\n    esac\n\n    name=\"sttr\"\n    which sttr > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/sttr && cd /tmp/sttr && rm -f $sttr_bin > /dev/null 2>&1 && $Proxy_OK wget ${GitProxy}https://github.com/abhimanyu003/sttr/releases/download/$sttr_Ver/$sttr_bin > /dev/null 2>&1 || Echo_ERROR2\n        tar -zxvf $sttr_bin > /dev/null 2>&1\n        mv --force sttr /usr/local/bin/ && chmod +x /usr/local/bin/sttr\n        rm -rf /tmp/sttr && cd /tmp\n        which sttr > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $sttr_Ver in the /usr/local/bin/\" || Echo_ERROR3\n    fi\n\n}\n\n# ===================== Install jwtcat =====================\nPentest_jwtcat_Install(){\n\n    name=\"jwtcat\"\n    dir=\"$P_Dir/jwtcat\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        cd $P_Dir && $Proxy_OK git clone ${GitProxy}https://github.com/aress31/jwtcat.git $dir > /dev/null 2>&1 || Echo_ERROR2\n        cd $dir && Install_Switch6 \"requirements.txt\"\n        python3 jwtcat.py -h > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the $dir\" || Echo_ERROR3\n    fi\n\n}\n\n# ===================== Install gojwtcrack =====================\nPentest_gojwtcrack_Install(){\n\n    name=\"gojwtcrack\"\n    which gojwtcrack > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        case $Linux_architecture_Name in\n            *\"linux-x86_64\"*)\n                mkdir -p /tmp/gojwtcrack && cd /tmp/gojwtcrack && $Proxy_OK wget ${GitProxy}https://github.com/x1sec/gojwtcrack/releases/download/${gojwtcrack_Ver}/${gojwtcrack_bin} > /dev/null 2>&1 || Echo_ERROR2\n                gunzip ${gojwtcrack_bin} > /dev/null 2>&1\n                mv gojwtcrack-linux-* /usr/local/bin/gojwtcrack && chmod +x /usr/local/bin/gojwtcrack\n                rm -rf /tmp/gojwtcrack && cd /tmp\n                which gojwtcrack > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name ${gojwtcrack_Ver} in the /usr/local/bin/\" || Echo_ERROR3\n                ;;\n            *\"linux-arm64\"*)\n                mkdir -p /tmp/gojwtcrack && cd /tmp/gojwtcrack && go install github.com/x1sec/gojwtcrack@latest\n                mv $GOPATH/bin/gojwtcrack /usr/local/bin/gojwtcrack && chmod +x /usr/local/bin/gojwtcrack || { mv /root/go/bin/gojwtcrack /usr/local/bin/gojwtcrack; chmod +x /usr/local/bin/gojwtcrack; }\n                rm -rf /tmp/gojwtcrack && cd /tmp\n                which gojwtcrack > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the /usr/local/bin/\" || Echo_ERROR3\n                ;;\n        esac\n    fi\n\n}\n\n# 域名分割工具,默认不安装\n# ===================== Install DomainSplit =====================\nPentest_DomainSplit_Install(){\n\n    name=\"DomainSplit\"\n    dir=\"$P_Dir/DomainSplit\"\n\n    if test -e $dir/DomainSplit.jar\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        mkdir -p $dir && cd $_ && rm -f DomainSplit.jar > /dev/null 2>&1 && $Proxy_OK wget -O DomainSplit.jar ${GitProxy}https://github.com/ffffffff0x/DomainSplit/releases/download/$DomainSplit_Ver/DomainSplit.jar > /dev/null 2>&1 || Echo_ERROR2\n        if test -e $dir/DomainSplit.jar\n        then\n            Echo_INFOR \"Successfully installed $name in the $dir\"\n        else\n            Echo_ERROR3\n        fi\n    fi\n\n}\n\n# 实际使用较少,默认不安装\n# ===================== Install proxify =====================\nPentest_proxify_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            proxify_bin=$proxify_bin_amd64\n            ;;\n        *\"linux-arm64\"*)\n            proxify_bin=$proxify_bin_arm64\n            ;;\n    esac\n\n    name=\"proxify\"\n    which proxify > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/proxify && cd /tmp/proxify && rm -f $proxify_bin > /dev/null 2>&1 && $Proxy_OK wget ${GitProxy}https://github.com/projectdiscovery/proxify/releases/download/$proxify_Ver/$proxify_bin > /dev/null 2>&1 || Echo_ERROR2\n        unzip $proxify_bin > /dev/null 2>&1\n        mv --force proxify /usr/local/bin/proxify && chmod +x /usr/local/bin/proxify\n        proxify -version > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $proxify_Ver in the /usr/local/bin/\" || Echo_ERROR3\n        rm -rf /tmp/proxify && cd /tmp\n    fi\n\n}\n\n# 体积太大,默认放 E 分类\n# ===================== SecLists =====================\nPentest_SecLists_Install(){\n\n    name=\"SecLists\"\n\n    if test -d $P_Dir/$name\n    then\n        Echo_ALERT \"$name dictionary already exists\"\n    else\n        rm -rf $P_Dir/$name > /dev/null 2>&1 && $Proxy_OK git clone --depth 1 ${GitProxy}https://github.com/danielmiessler/SecLists.git $P_Dir/$name > /dev/null 2>&1 && Echo_INFOR \"Downloaded $name in the $P_Dir/$name\" || Echo_ERROR \"Failed to download the $name dictionary from github\"\n    fi\n\n}\n\n# ===================== Install jaeles =====================\nPentest_jaeles_Install(){\n\n    name=\"jaeles\"\n    which jaeles > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        case $Linux_architecture_Name in\n            *\"linux-x86_64\"*)\n                mkdir -p /tmp/jaeles && cd /tmp/jaeles && rm -f $jaeles_bin && $Proxy_OK wget ${GitProxy}https://github.com/jaeles-project/jaeles/releases/download/$jaeles_Ver/$jaeles_bin > /dev/null 2>&1 || Echo_ERROR2\n                unzip $jaeles_bin > /dev/null 2>&1\n                mv $jaeles_sbin /usr/local/bin/jaeles && chmod +x /usr/local/bin/jaeles\n                rm -rf /tmp/jaeles && cd /tmp\n                which jaeles > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $jaeles_Ver in the /usr/local/bin/\" || Echo_ERROR3\n                ;;\n            *\"linux-arm64\"*)\n                mkdir -p /tmp/jaeles && cd /tmp/jaeles && go install github.com/jaeles-project/jaeles@latest\n                mv $GOPATH/bin/jaeles /usr/local/bin/jaeles && chmod +x /usr/local/bin/jaeles || { mv /root/go/bin/jaeles /usr/local/bin/jaeles; chmod +x /usr/local/bin/jaeles; }\n                rm -rf /tmp/jaeles && cd /tmp\n                which jaeles > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the /usr/local/bin/\" || Echo_ERROR3\n                ;;\n        esac\n    fi\n\n}\n\n# ===================== Install Girsh =====================\nPentest_Girsh_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            Girsh_bin=$Girsh_bin_amd64\n            ;;\n        *\"linux-arm64\"*)\n            Girsh_bin=$Girsh_bin_arm64\n            ;;\n    esac\n\n    name=\"Girsh\"\n    which Girsh > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/Girsh && cd /tmp/Girsh && rm -f $Girsh_bin > /dev/null 2>&1 && $Proxy_OK wget ${GitProxy}https://github.com/nodauf/Girsh/releases/download/$Girsh_Ver/$Girsh_bin > /dev/null 2>&1 || Echo_ERROR2\n        tar -zxvf $Girsh_bin > /dev/null 2>&1\n        mv --force Girsh /usr/local/bin/ && chmod +x /usr/local/bin/Girsh && Echo_INFOR \"Successfully installed $name $Girsh_Ver in the /usr/local/bin/\" || Echo_ERROR3\n        rm -rf /tmp/Girsh && cd /tmp\n    fi\n\n}\n\n# ===================== Install See-SURF =====================\nPentest_See-SURF_Install(){\n\n    name=\"See-SURF\"\n    dir=\"$P_Dir/See-SURF\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        $Proxy_OK git clone --depth 1 ${GitProxy}https://github.com/In3tinct/See-SURF.git $dir > /dev/null 2>&1 && Echo_INFOR \"Downloaded $name\" || Echo_ERROR2\n        cd $dir && python3 see-surf.py -h > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the $dir\" || Echo_ERROR3\n    fi\n\n}\n\n# ===================== Install subjs =====================\nPentest_subjs_Install(){\n\n    name=\"subjs\"\n    which subjs > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        case $Linux_architecture_Name in\n            *\"linux-x86_64\"*)\n                mkdir -p /tmp/subjs && cd /tmp/subjs && rm -f $subjs_bin && $Proxy_OK wget ${GitProxy}https://github.com/lc/subjs/releases/download/$subjs_Ver/$subjs_bin > /dev/null 2>&1 || Echo_ERROR2\n                tar -zxvf $subjs_bin > /dev/null 2>&1\n                mv subjs /usr/local/bin/subjs && chmod +x /usr/local/bin/subjs\n                rm -rf /tmp/subjs && cd /tmp\n                which subjs > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $subjs_Ver in the /usr/local/bin/\" || Echo_ERROR3\n                ;;\n            *\"linux-arm64\"*)\n                mkdir -p /tmp/subjs && cd /tmp/subjs && go install github.com/lc/subjs@latest\n                mv $GOPATH/bin/subjs /usr/local/bin/subjs && chmod +x /usr/local/bin/subjs || { mv /root/go/bin/subjs /usr/local/bin/subjs; chmod +x /usr/local/bin/subjs; }\n                rm -rf /tmp/subjs && cd /tmp\n                which subjs > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the /usr/local/bin/\" || Echo_ERROR3\n                ;;\n        esac\n    fi\n\n}\n\n# ===================== Install assetfinder =====================\nPentest_assetfinder_Install(){\n\n    name=\"assetfinder\"\n    which assetfinder > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        case $Linux_architecture_Name in\n            *\"linux-x86_64\"*)\n                mkdir -p /tmp/assetfinder && cd /tmp/assetfinder && rm -f $assetfinder_bin && $Proxy_OK wget ${GitProxy}https://github.com/tomnomnom/assetfinder/releases/download/$assetfinder_Ver/$assetfinder_bin > /dev/null 2>&1 || Echo_ERROR2\n                tar -xzvf $assetfinder_bin > /dev/null 2>&1\n                mv assetfinder /usr/local/bin/assetfinder && chmod +x /usr/local/bin/assetfinder\n                rm -rf /tmp/assetfinder && cd /tmp\n                which assetfinder > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $assetfinder_Ver in the /usr/local/bin/\" || Echo_ERROR3\n                ;;\n            *\"linux-arm64\"*)\n                mkdir -p /tmp/assetfinder && cd /tmp/assetfinder && go install github.com/tomnomnom/assetfinder@latest\n                mv $GOPATH/bin/assetfinder /usr/local/bin/assetfinder && chmod +x /usr/local/bin/assetfinder || { mv /root/go/bin/assetfinder /usr/local/bin/assetfinder; chmod +x /usr/local/bin/assetfinder; }\n                rm -rf /tmp/assetfinder && cd /tmp\n                which assetfinder > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the /usr/local/bin/\" || Echo_ERROR3\n                ;;\n        esac\n    fi\n\n}\n\n# ===================== Install hakrawler =====================\nPentest_hakrawler_Install(){\n\n    GO_Check\n\n    name=\"hakrawler\"\n    which hakrawler > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        Echo_INFOR \"Local compilation and installation, if the compilation timeout, please deal with it yourself\"\n        mkdir -p /tmp/hakrawler && cd /tmp/hakrawler && rm -rf hakrawler\n        $Proxy_OK git clone --depth 1 ${GitProxy}https://github.com/hakluke/hakrawler.git > /dev/null 2>&1 && cd hakrawler || Echo_ERROR2\n        go build hakrawler.go\n        mv hakrawler /usr/local/bin/hakrawler && chmod +x /usr/local/bin/hakrawler\n        rm -rf /tmp/hakrawler && cd /tmp\n        which hakrawler > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the /usr/local/bin/\" || Echo_ERROR3\n    fi\n\n}\n\n# ===================== Install routersploit =====================\nPentest_routersploit_Install(){\n\n    name=\"routersploit\"\n    dir=\"$P_Dir/routersploit\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        $Proxy_OK git clone --depth 1 ${GitProxy}https://github.com/threat9/routersploit.git $dir > /dev/null 2>&1 && cd $dir || Echo_ERROR2\n        Echo_ALERT \"Installing dependency modules\" && Install_Switch7 \"requirements.txt\" && Echo_INFOR \"Successfully installed $name in the $dir\" || Echo_ERROR3\n        case $Linux_Version in\n            *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n                Echo_ALERT \"Installing Bluetooth Low Energy support\"\n                Rm_Lock\n                Install_Switch \"libglib2.0-dev\"\n                Install_Switch5 \"bluepy\"\n                ;;\n            *) ;;\n        esac\n\n    fi\n\n}\n\nPentest_simplehttpservert_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            simplehttpserver_bin=$simplehttpserver_bin_amd64\n            ;;\n        *\"linux-arm64\"*)\n            simplehttpserver_bin=$simplehttpserver_bin_arm64\n            ;;\n    esac\n\n    name=\"simplehttpserver\"\n    which simplehttpserver > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/simplehttpserver && cd /tmp/simplehttpserver && rm -f $simplehttpserver_bin > /dev/null 2>&1 && $Proxy_OK wget ${GitProxy}https://github.com/projectdiscovery/simplehttpserver/releases/download/$simplehttpserver_Ver/$simplehttpserver_bin > /dev/null 2>&1 || Echo_ERROR2\n        unzip $simplehttpserver_bin > /dev/null 2>&1\n        mv --force simplehttpserver /usr/local/bin/simplehttpserver && chmod +x /usr/local/bin/simplehttpserver\n        rm -rf /tmp/simplehttpserver && cd /tmp\n        which simplehttpserver > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $simplehttpserver_Ver in the /usr/local/bin/\" || Echo_ERROR3\n    fi\n\n}\n\n# git clone 时间过长,默认不安装\n# ===================== Install exploitdb 库 =====================\nPentest_exploitdb_Install(){\n\n    name=\"exploitdb\"\n    dir=\"$P_Dir/exploitdb\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        $Proxy_OK git clone --depth 1 ${GitProxy}https://github.com/offensive-security/exploitdb.git $dir > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the $dir\" || Echo_ERROR3\n    fi\n\n}\n\n# 不友好的 wiki 和使用帮助\n# ===================== Install RustScan =====================\nPentest_RustScan_Install(){\n\n    name=\"RustScan\"\n    which rustscan > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        case $Linux_Version in\n            *\"CentOS\"*|*\"RedHat\"*|*\"Fedora\"*|*\"AlmaLinux\"*|*\"VzLinux\"*|*\"Rocky\"*)\n                rm -f /var/cache/dnf/metadata_lock.pid > /dev/null 2>&1\n                $Proxy_OK dnf install -y 'dnf-command(copr)' > /dev/null 2>&1 && $Proxy_OK dnf copr enable atim/rustscan -y > /dev/null 2>&1 && $Proxy_OK dnf install -y rustscan > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name\" || Echo_ERROR3\n                ;;\n            *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n                mkdir -p /tmp/rustscan && cd /tmp/rustscan && rm -f $RustScan_Install && $Proxy_OK wget ${GitProxy}https://github.com/RustScan/RustScan/releases/download/$RustScan_Version/$RustScan_Install > /dev/null 2>&1 || Echo_ERROR2\n                dpkg -i $RustScan_Install > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name\" || Echo_ERROR3\n                rm -rf /tmp/rustscan && cd /tmp\n                ;;\n            *) ;;\n        esac\n\n    fi\n\n}\n\n# 使用较少,默认不安装\n# ===================== Install WAFW00F =====================\nPentest_WAFW00F_Install(){\n\n    name=\"WAFW00F\"\n    dir=\"$P_Dir/wafw00f\"\n\n    which wafw00f > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        rm -rf $dir && $Proxy_OK git clone --depth 1 ${GitProxy}https://github.com/EnableSecurity/wafw00f $dir > /dev/null 2>&1 || Echo_ERROR2\n        cd $dir && python3 setup.py install > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name\" || Echo_ERROR3\n    fi\n\n}\n\n# 依赖库报错,默认不安装\n# ===================== Install WebAliveScan =====================\nPentest_WebAliveScan_Install(){\n\n    name=\"WebAliveScan\"\n    dir=\"$P_Dir/WebAliveScan\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        $Proxy_OK git clone --depth 1 ${GitProxy}https://github.com/broken5/WebAliveScan.git $dir > /dev/null 2>&1 && cd $dir || Echo_ERROR2\n        Install_Switch7 \"requirements.txt\" && Echo_INFOR \"Installed dependency modules\" && Install_Switch4 \"gevent\" || { Echo_ERROR \"Failed to install dependency module\"; rm -rf $dir; cd /tmp; }\n        python3 webscan.py --help > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the $dir\" || Echo_ERROR3\n    fi\n\n}\n\n# 实际使用较少默认不安装\n# ===================== Install MassBleed =====================\nPentest_MassBleed_Install(){\n\n    name=\"MassBleed\"\n    dir=\"$P_Dir/MassBleed\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        $Proxy_OK git clone --depth 1 ${GitProxy}https://github.com/1N3/MassBleed.git $dir > /dev/null 2>&1 && Echo_INFOR \"Downloaded $name in the $dir\" || Echo_ERROR2\n    fi\n\n}\n\n# 实际使用较少默认不安装\n# ===================== Install jmet =====================\nPentest_jmet_Install(){\n\n    name=\"jmet\"\n    dir=\"$P_Dir/jmet\"\n\n    if test -e $dir/jmet.jar\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        mkdir -p $dir && cd $_ && rm -f jmet.jar > /dev/null 2>&1 && $Proxy_OK wget -O jmet.jar ${GitProxy2}https://github.com/matthiaskaiser/jmet/releases/download/0.1.0/jmet-0.1.0-all.jar > /dev/null 2>&1 || Echo_ERROR2\n        if test -e $dir/jmet.jar\n        then\n            Echo_INFOR \"Successfully installed $name in the $dir\"\n        else\n            Echo_ERROR3\n        fi\n    fi\n\n}\n\n# ===================== Install unyaffs =====================\nunyaffs_Install(){\n\n    name=\"unyaffs\"\n\n    cd $T_Dir && rm -f unyaffs > /dev/null 2>&1 && $Proxy_OK wget -O unyaffs ${GitProxy2}https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/unyaffs/unyaffs > /dev/null 2>&1 || Echo_ERROR2\n    mv --force unyaffs /usr/local/bin/unyaffs && chmod +x /usr/local/bin/unyaffs && Echo_INFOR \"Successfully installed $name 在 /usr/local/bin/\" || Echo_ERROR3\n\n}\n\n# ===================== Install Fail2Ban =====================\nSecure_Fail2Ban_Install(){\n\n    name=\"Fail2Ban\"\n    fail2ban-client -V > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        Rm_Lock\n        Install_Switch \"fail2ban\"\n        systemctl restart fail2ban > /dev/null 2>&1 && sleep 1.5\n        fail2ban-client ping\n    fi\n\n}\n\n# ===================== Install chkrootkit =====================\nSecure_chkrootkit_Install(){\n\n    name=\"chkrootkit\"\n\n    if test -d $T_Dir/chkrootkit-*\n    then\n        Echo_ALERT \"$name is already installed in $T_Dir/\"\n    else\n        cd $T_Dir && rm -f chkrootkit.tar.gz > /dev/null 2>&1 && $Proxy_OK wget ftp://ftp.pangeia.com.br/pub/seg/pac/chkrootkit.tar.gz > /dev/null 2>&1 && Echo_INFOR \"Downloaded $name\" || Echo_ERROR2\n        tar zxvf chkrootkit.tar.gz > /dev/null 2>&1 && rm -f chkrootkit.tar.gz > /dev/null 2>&1\n        cd chkrootkit-* && make sense > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the $T_Dir\" || Echo_ERROR3\n    fi\n\n}\n\n# ===================== Install rkhunter =====================\nSecure_rkhunter_Install(){\n\n    name=\"rkhunter\"\n    which rkhunter > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        Rm_Lock\n        Install_Switch \"rkhunter\"\n    fi\n\n}\n\n# ===================== Install shellpub =====================\nSecure_shellpub_Install(){\n\n    name=\"shellpub\"\n\n    if test -d $T_Dir/hm\n    then\n        Echo_ALERT \"$name is already installed in $T_Dir/hm\"\n    else\n        mkdir -p $T_Dir/hm && cd $_ && $Proxy_OK wget -O hm-linux.tgz http://dl.shellpub.com/hm/latest/hm-linux-amd64.tgz?version=1.8.2 > /dev/null 2>&1 && Echo_INFOR \"Downloaded shellpub\" || Echo_ERROR2\n        tar zxvf hm-linux.tgz > /dev/null 2>&1 && rm -f hm-linux.tgz > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the $T_Dir/hm\" || Echo_ERROR3\n    fi\n\n}\n\n# ===================== Install anti-portscan =====================\nSecure_anti_portscan_Install(){\n\n    name=\"anti-portscan\"\n\n    if test -d $T_Dir/anti-portscan\n    then\n        Echo_ALERT \"$name is already installed in $T_Dir/anti-portscan\"\n    else\n        cd $T_Dir && rm -f anti-portscan > /dev/null 2>&1 && $Proxy_OK git clone ${GitProxy}https://github.com/EtherDream/anti-portscan.git > /dev/null 2>&1 && Echo_INFOR \"Downloaded anti-portscan in the $T_Dir/anti-portscan\" || Echo_ERROR2\n    fi\n\n}\n\n# ===================== Install BruteShark =====================\nSecure_BruteShark_Install(){\n\n    name=\"BruteShark\"\n    dir=\"$T_Dir/BruteShark\"\n\n    if test -d $T_Dir/BruteShark\n    then\n        Echo_ALERT \"$name is already installed in $T_Dir/ \"\n    else\n        Rm_Lock\n        case $Linux_Version in\n            *\"CentOS\"*|*\"RedHat\"*|*\"Fedora\"*|*\"AlmaLinux\"*|*\"VzLinux\"*|*\"Rocky\"*)\n                Install_Switch \"libpcap\"\n                Install_Switch \"libpcap-devel\"\n                ;;\n            *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n                Install_Switch \"libpcap-dev\"\n                ;;\n            *) ;;\n        esac\n        mkdir -p $T_Dir/BruteShark && cd $_ && $Proxy_OK wget ${GitProxy}https://github.com/odedshimon/BruteShark/releases/latest/download/BruteSharkCli > /dev/null 2>&1 && chmod +x BruteSharkCli && Echo_INFOR \"Downloaded $name in the $dir \" || Echo_ERROR2\n        find /usr/lib/x86_64-linux-gnu -type f | grep libpcap | head -1 | xargs -i sudo ln -s {} /usr/lib/x86_64-linux-gnu/libpcap.so > /dev/null 2>&1\n    fi\n\n}\n\n# ===================== Install fapro =====================\nSecure_fapro_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            fapro_bin=$fapro_bin_amd64\n            ;;\n        *\"linux-arm64\"*)\n            fapro_bin=$fapro_bin_arm64\n            ;;\n    esac\n\n    name=\"fapro\"\n    which fapro > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/fapro && cd /tmp/fapro && rm -f $fapro_bin && $Proxy_OK wget ${GitProxy}https://github.com/fofapro/fapro/releases/download/$fapro_Ver/$fapro_bin > /dev/null 2>&1 || Echo_ERROR2\n        tar -zxvf $fapro_bin > /dev/null 2>&1\n        mv --force fapro /usr/local/bin/ && chmod +x /usr/local/bin/fapro && Echo_INFOR \"Successfully installed $name $fapro_Ver in the /usr/local/bin/\" || Echo_ERROR3\n        rm -rf /tmp/fapro && cd /tmp\n    fi\n\n}\n\n# ===================== Install vlmcsd =====================\nvlmcsd_Install(){\n\n    name=\"vlmcsd\"\n\n    if test -d $T_Dir/vlmcsd\n    then\n        Echo_ALERT \"$name is already installed in $T_Dir/vlmcsd\"\n    else\n        cd $T_Dir && rm -f binaries.tar.gz > /dev/null 2>&1 && $Proxy_OK wget ${GitProxy}https://github.com/Wind4/vlmcsd/releases/download/svn1113/binaries.tar.gz > /dev/null 2>&1 || Echo_ERROR2\n        tar -xzvf binaries.tar.gz > /dev/null 2>&1\n        mv --force binaries vlmcsd && rm -f binaries.tar.gz > /dev/null 2>&1 && Echo_INFOR \"$name is already installed in $T_Dir/vlmcsd, the vlmcsd service can be run with the following command:\\ncd $T_Dir/vlmcsd/Linux/intel/static && ./vlmcsd-x86-musl-static\"\n    fi\n\n}\n\n# ===================== Install AdGuardHome =====================\nAdGuardHome_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            AdGuardHome_File=$AdGuardHome_File_amd64\n            ;;\n        *\"linux-arm64\"*)\n            AdGuardHome_File=$AdGuardHome_File_arm64\n            ;;\n    esac\n\n    name=\"AdGuardHome\"\n\n    if test -d $T_Dir/AdGuardHome\n    then\n        Echo_ALERT \"AdGuardHome is already installed in $T_Dir/AdGuardHome\"\n    else\n        cd $T_Dir && rm -f $AdGuardHome_File > /dev/null 2>&1 && $Proxy_OK wget ${GitProxy}https://github.com/AdguardTeam/AdGuardHome/releases/download/$AdGuardHome_Version/$AdGuardHome_File > /dev/null 2>&1 || Echo_ERROR2\n        tar -xzvf $AdGuardHome_File > /dev/null 2>&1 && rm -f $AdGuardHome_File > /dev/null 2>&1\n        cd AdGuardHome && Echo_INFOR \"Successfully installed $name $AdGuardHome_Version , run the following command to enable the AdGuardHome service\\n\\033[0m\\033[1;32mcd $T_Dir/AdGuardHome && ./AdGuardHome -s install\" || Echo_ERROR3\n    fi\n\n}\n\n# ===================== Install trash-cli =====================\ntrash-cli_Install(){\n\n    name=\"trash-cli\"\n    trash-list --version > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        pip3 install trash-cli > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name\" || Echo_ERROR3\n    fi\n\n}\n\n# ===================== Install thefuck =====================\nthefuck_Install(){\n\n    name=\"thefuck\"\n    which thefuck > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        Install_Switch4 \"thefuck\"\n    fi\n\n}\n\n# ===================== Install fzf =====================\nfzf_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            fzf_bin=$fzf_bin_amd64\n            ;;\n        *\"linux-arm64\"*)\n            fzf_bin=$fzf_bin_arm64\n            ;;\n    esac\n\n    name=\"fzf\"\n    which fzf > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/fzf && cd /tmp/fzf && rm -f $fzf_bin && $Proxy_OK wget ${GitProxy}https://github.com/junegunn/fzf/releases/download/$fzf_Ver/$fzf_bin > /dev/null 2>&1 || Echo_ERROR2\n        tar -zxvf $fzf_bin > /dev/null 2>&1 && mv fzf /usr/local/bin/fzf && chmod +x /usr/local/bin/fzf\n        rm -rf /tmp/fzf && cd /tmp\n        fzf --version > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name\" || Echo_ERROR3\n    fi\n\n}\n\n# ===================== Install lux =====================\nlux_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            lux_bin=$lux_bin_amd64\n            ;;\n        *\"linux-arm64\"*)\n            lux_bin=$lux_bin_arm64\n            ;;\n    esac\n\n    name=\"lux\"\n    which lux > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/lux && cd /tmp/lux && rm -f $lux_bin && $Proxy_OK wget ${GitProxy}https://github.com/iawia002/lux/releases/download/$lux_Ver/$lux_bin > /dev/null 2>&1 || Echo_ERROR2\n        tar -zxvf $lux_bin > /dev/null 2>&1\n        mv --force lux /usr/local/bin/lux && chmod +x /usr/local/bin/lux\n        rm -rf /tmp/lux && cd /tmp\n        lux -v > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $lux_Ver in the /usr/local/bin/\" || Echo_ERROR3\n    fi\n\n}\n\n# ===================== Install you-get =====================\nyou-get_Install(){\n\n    name=\"you-get\"\n    which you-get > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        Install_Switch4 \"you-get\"\n    fi\n\n}\n\n# ===================== Install ffmpeg =====================\nffmpeg_Install(){\n\n    name=\"ffmpeg\"\n    which ffmpeg > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        Rm_Lock\n        case $Linux_Version in\n            *\"CentOS\"*|*\"RedHat\"*|*\"Fedora\"*|*\"AlmaLinux\"*|*\"VzLinux\"*|*\"Rocky\"*)\n                Echo_INFOR \"The current script does not support RedHat system, this item Pass\"\n                ;;\n            *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n                Install_Switch \"ffmpeg\"\n                ;;\n            *) ;;\n        esac\n    fi\n\n}\n\n# ===================== Install aria2 =====================\naria2_Install(){\n\n    name=\"aria2\"\n    which aria2c > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        Rm_Lock\n        Install_Switch \"aria2\"\n    fi\n\n    Echo_INFOR \"Recommended Projects : https://github.com/P3TERX/aria2.sh\"\n    Echo_INFOR \"wget -N git.io/aria2.sh && chmod +x aria2.sh && bash aria2.sh\"\n\n}\n\n# ===================== Install filebrowser =====================\nfilebrowser_Install(){\n\n    name=\"filebrowser\"\n    which filebrowser > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed, Run the following command to turn on the service:\"\n    else\n        mkdir -p /tmp/filebrowser && cd /tmp/filebrowser && $Proxy_OK curl -o install.sh https://raw.githubusercontent.com/filebrowser/get/master/get.sh > /dev/null 2>&1 && $Proxy_OK bash install.sh > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name, Run the following command to turn on the service:\" || Echo_ERROR2\n    fi\n\n    Echo_INFOR \"filebrowser -a [Listening IP] -r [Folder path]\" && Echo_INFOR \"Default account password admin\"\n\n}\n\n# ===================== Install starship =====================\nstarship_Install(){\n\n    name=\"starship\"\n    starship --version > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/starship && cd /tmp/starship && rm -f install.sh && $Proxy_OK curl -o install.sh https://starship.rs/install.sh > /dev/null 2>&1 && $Proxy_OK bash install.sh && Echo_INFOR \"Successfully installed $name\" || Echo_ERROR2\n        rm -rf /tmp/starship && cd /tmp\n    fi\n\n    Echo_INFOR \"Bash :  echo \\\"eval \\\\\\\"\\\\\\$(starship init bash)\\\\\\\"\\\" >> ~/.bashrc\"\n    Echo_INFOR \"Fish :  echo \\\"starship init fish | source\\\" >> ~/.config/fish/config.fish\"\n    Echo_INFOR \"Zsh  :  echo \\\"eval \\\\\\\"\\\\\\$(starship init zsh)\\\\\\\"\\\" >> ~/.zshrc\"\n\n}\n\n# ===================== Install ttyd =====================\nttyd_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            ttyd_bin=$ttyd_bin_amd64\n            ;;\n        *\"linux-arm64\"*)\n            ttyd_bin=$ttyd_bin_arm64\n            ;;\n    esac\n\n    name=\"ttyd\"\n    which ttyd > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        $Proxy_OK wget -O /usr/local/bin/ttyd ${GitProxy}https://github.com/tsl0922/ttyd/releases/download/$ttyd_Ver/$ttyd_bin > /dev/null 2>&1 || Echo_ERROR2\n        chmod +x /usr/local/bin/ttyd\n        which ttyd > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $ttyd_Ver in the /usr/local/bin/\" || Echo_ERROR3\n    fi\n\n}\n\n# ===================== Install duf =====================\nduf_Install(){\n\n    name=\"duf\"\n    which duf > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        case $Linux_Version in\n            *\"CentOS\"*|*\"RedHat\"*|*\"Fedora\"*|*\"AlmaLinux\"*|*\"VzLinux\"*|*\"Rocky\"*)\n\n                case $Linux_architecture_Name in\n                    *\"linux-x86_64\"*)\n                        duf_bin1=$duf_bin1_amd64\n                        ;;\n                    *\"linux-arm64\"*)\n                        duf_bin1=$duf_bin1_arm64\n                        ;;\n                esac\n\n                mkdir -p /tmp/dufinstall && cd $_ && $Proxy_OK wget ${GitProxy}https://github.com/muesli/duf/releases/download/$duf_Ver/$duf_bin1 > /dev/null 2>&1 || Echo_ERROR2\n                rpm -i $duf_bin1 > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $duf_Ver\" || Echo_ERROR3\n                rm -rf /tmp/dufinstall && cd /tmp\n                ;;\n            *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n\n                case $Linux_architecture_Name in\n                    *\"linux-x86_64\"*)\n                        duf_bin2=$duf_bin2_amd64\n                        ;;\n                    *\"linux-arm64\"*)\n                        duf_bin2=$duf_bin2_arm64\n                        ;;\n                esac\n\n                mkdir -p /tmp/dufinstall && cd $_ && $Proxy_OK wget ${GitProxy}https://github.com/muesli/duf/releases/download/$duf_Ver/$duf_bin2 > /dev/null 2>&1 || Echo_ERROR2\n                dpkg -i $duf_bin2 > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $duf_Ver\" || Echo_ERROR3\n                rm -rf /tmp/dufinstall && cd /tmp\n                ;;\n            *) ;;\n        esac\n    fi\n\n}\n\n# ===================== Install yq =====================\nyq_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            yq_File=$yq_File_amd64\n            yq_bin=$yq_bin_amd64\n            ;;\n        *\"linux-arm64\"*)\n            yq_File=$yq_File_arm64\n            yq_bin=$yq_bin_arm64\n            ;;\n    esac\n\n    name=\"yq\"\n    which yq > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/yqinstall && cd $_\n        $Proxy_OK wget ${GitProxy}https://github.com/mikefarah/yq/releases/download/$yq_Ver/$yq_File > /dev/null 2>&1 || Echo_ERROR2\n        tar -zxvf $yq_File > /dev/null 2>&1\n        mv --force $yq_bin /usr/local/bin/yq && chmod +x /usr/local/bin/yq\n        which yq > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $yq_Ver in the /usr/local/bin/\" || Echo_ERROR3\n        rm -rf /tmp/yqinstall && cd /tmp\n    fi\n\n}\n\n# ===================== Install procs =====================\nprocs_Install(){\n\n    name=\"procs\"\n    which procs > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/procsinstall && cd $_\n        $Proxy_OK wget ${GitProxy}https://github.com/dalance/procs/releases/download/$procs_Ver/$procs_bin > /dev/null 2>&1 || Echo_ERROR2\n        unzip $procs_bin > /dev/null 2>&1\n        mv --force procs /usr/local/bin/procs && chmod +x /usr/local/bin/procs\n        which procs > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $procs_Ver in the /usr/local/bin/\" || Echo_ERROR3\n        rm -rf /tmp/procsinstall && cd /tmp\n    fi\n\n}\n\n# ===================== Install ncdu =====================\nncdu_Install(){\n\n    name=\"ncdu\"\n    which ncdu > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        Install_Switch \"ncdu\"\n    fi\n\n}\n\n# ===================== Install exa =====================\nexa_Install(){\n\n    name=\"exa\"\n    which exa > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        Install_Switch \"exa\"\n    fi\n\n}\n\n# ===================== Install htop =====================\nhtop_Install(){\n\n    name=\"htop\"\n    which htop > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        Install_Switch \"htop\"\n    fi\n\n}\n\n# ===================== Install bat =====================\nbat_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            bat_bin=$bat_bin_amd64\n            ;;\n        *\"linux-arm64\"*)\n            bat_bin=$bat_bin_arm64\n            ;;\n    esac\n\n    name=\"bat\"\n    which bat > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/batinstall && cd $_\n        $Proxy_OK wget ${GitProxy}https://github.com/sharkdp/bat/releases/download/$bat_Ver/$bat_bin > /dev/null 2>&1 || Echo_ERROR2\n        dpkg -i $bat_bin > /dev/null 2>&1\n        which bat > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $bat_Ver\" || Echo_ERROR3\n        rm -rf /tmp/batinstall && cd /tmp\n    fi\n\n}\n\n# ===================== Install fd =====================\nfd_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            fd_bin=$fd_bin_amd64\n            ;;\n        *\"linux-arm64\"*)\n            fd_bin=$fd_bin_arm64\n            ;;\n    esac\n\n    name=\"fd\"\n    which fd > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/fdinstall && cd $_\n        $Proxy_OK wget ${GitProxy}https://github.com/sharkdp/fd/releases/download/$fd_Ver/$fd_bin > /dev/null 2>&1 || Echo_ERROR2\n        dpkg -i $fd_bin > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $fd_Ver\" || Echo_ERROR3\n        rm -rf /tmp/fdinstall && cd /tmp\n    fi\n\n}\n\n# ===================== Install ctop =====================\nctop_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            ctop_bin=$ctop_bin_amd64\n            ;;\n        *\"linux-arm64\"*)\n            ctop_bin=$ctop_bin_arm64\n            ;;\n    esac\n\n    name=\"ctop\"\n    which ctop > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/ctop && cd $_\n        $Proxy_OK wget ${GitProxy}https://github.com/bcicen/ctop/releases/download/$ctop_Ver/$ctop_bin > /dev/null 2>&1 || Echo_ERROR2\n        mv /tmp/ctop/$ctop_bin /usr/local/bin/ctop && chmod +x /usr/local/bin/ctop && rm -rf /tmp/ctop\n        which ctop > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $ctop_Ver\" || Echo_ERROR3\n        rm -rf /tmp/ctop && cd /tmp\n    fi\n\n}\n\n# -code\n# ===================== Install code-server =====================\ncode-server_Install(){\n\n    name=\"code-server\"\n    which code-server > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        case $Linux_Version in\n            *\"CentOS\"*|*\"RedHat\"*|*\"Fedora\"*|*\"AlmaLinux\"*|*\"VzLinux\"*|*\"Rocky\"*)\n                case $Linux_architecture_Name in\n                    *\"linux-x86_64\"*)\n                        code_server_bin1=$code_server_bin1_amd64\n                        ;;\n                    *\"linux-arm64\"*)\n                        code_server_bin1=$code_server_bin1_arm64\n                        ;;\n                esac\n\n                mkdir -p /tmp/code-serverinstall && cd $_ && $Proxy_OK wget ${GitProxy}https://github.com/cdr/code-server/releases/download/$code_server_Ver/$code_server_bin1 ${wget_option} || Echo_ERROR2\n                rpm -i $code_server_bin1 > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $code_server_Ver\" || Echo_ERROR3\n                rm -rf /tmp/code-serverinstall && cd /tmp\n                # sudo systemctl enable --now code-server@$USER\n                # Now visit http://127.0.0.1:8080. Your password is in ~/.config/code-server/config.yaml\n                ;;\n            *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n                case $Linux_architecture_Name in\n                    *\"linux-x86_64\"*)\n                        code_server_bin2=$code_server_bin2_amd64\n                        ;;\n                    *\"linux-arm64\"*)\n                        code_server_bin2=$code_server_bin2_arm64\n                        ;;\n                esac\n\n                mkdir -p /tmp/code-serverinstall && cd $_ && $Proxy_OK wget ${GitProxy}https://github.com/cdr/code-server/releases/download/$code_server_Ver/$code_server_bin2 ${wget_option} || Echo_ERROR2\n                dpkg -i $code_server_bin2 > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $code_server_Ver\" || Echo_ERROR3\n                rm -rf /tmp/code-serverinstall && cd /tmp\n                # sudo systemctl enable --now code-server@$USER\n                # Now visit http://127.0.0.1:8080. Your password is in ~/.config/code-server/config.yaml\n                ;;\n            *) ;;\n        esac\n    fi\n\n}\n\n# ===================== Install wait-for =====================\nwait-for_Install(){\n\n    name=\"wait-for\"\n    if test -e $T_Dir/wait-for\n    then\n        Echo_ALERT \"$name is already installed in $T_Dir\"\n    else\n        $Proxy_OK curl -o $T_Dir/wait-for ${GitProxy}https://raw.githubusercontent.com/eficode/wait-for/master/wait-for > /dev/null 2>&1 && Echo_INFOR \"Downloaded $name in the $T_Dir\" || Echo_ERROR2\n    fi\n\n}\n\n# -vol\nVolatility_Install(){\n\n    name=\"Volatility\"\n    echo -e \"\\033[1;33m\\n>> Installing $name\\n\\033[0m\"\n\n    case $Linux_Version in\n        *\"Ubuntu\"*|*\"Debian\"*)\n\n            which volatility > /dev/null 2>&1\n\n            if [ $? == 0 ]\n            then\n                Echo_ALERT \"$name installed\"\n            else\n                Rm_Lock\n                Install_Switch3 \"distorm3==3.4.4\"\n                Install_Switch3 \"yara-python\"\n                Install_Switch \"xdot\"\n                ln -s /usr/local/lib/python2.7/dist-packages/usr/lib/libyara.so /usr/lib/libyara.so > /dev/null 2>&1\n                Install_Switch \"volatility\"\n            fi\n\n            ;;\n        *)\n            if test -d $P_Dir/volatility\n            then\n                Echo_ALERT \"$name is already installed in $P_Dir/volatility\"\n            else\n                Rm_Lock\n                case $Linux_Version in\n                    *\"CentOS\"*|*\"RedHat\"*|*\"Fedora\"*|*\"AlmaLinux\"*|*\"VzLinux\"*|*\"Rocky\"*)\n                        Install_Switch \"pcre-devel\"\n                        Install_Switch \"libpcre++-devel\"\n                        Install_Switch \"python-devel\"\n                        Install_Switch \"pycrypto\"\n                        ;;\n                    *) ;;\n                esac\n\n                Install_Switch3 \"distorm3==3.4.4\"\n                Install_Switch3 \"yara-python\"\n                ln -s /usr/local/lib/python2.7/dist-packages/usr/lib/libyara.so /usr/lib/libyara.so > /dev/null 2>&1\n\n                $Proxy_OK git clone --depth 1 ${GitProxy}https://github.com/volatilityfoundation/volatility.git $P_Dir/volatility > /dev/null 2>&1 && Echo_INFOR \"Downloaded $name\" || Echo_ERROR2\n                cd $P_Dir/volatility && python setup.py build > /dev/null 2>&1 || Echo_ERROR \"Failed to install dependency module\"\n                python setup.py install > /dev/null 2>&1 || Echo_ERROR \"Failed to install dependency module\"\n                python vol.py --info > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the $P_Dir/volatility\" || Echo_ERROR3\n            fi\n            ;;\n    esac\n\n}\n\n# -vol3\nvolatility3_Install(){\n\n    name=\"volatility3\"\n    echo -e \"\\033[1;33m\\n>> Installing $name\\n\\033[0m\"\n\n    if test -d $P_Dir/volatility3\n    then\n        Echo_ALERT \"$name is already installed in $P_Dir/volatility3\"\n    else\n\n        case $Linux_Version in\n            *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n                Rm_Lock\n                Install_Switch \"xdot\"\n                ;;\n            *) ;;\n        esac\n\n        $Proxy_OK git clone --depth 1 ${GitProxy}https://github.com/volatilityfoundation/volatility3.git $P_Dir/volatility3 > /dev/null 2>&1 && Echo_INFOR \"Downloaded $name\" || Echo_ERROR2\n        cd $P_Dir/volatility3 && python3 setup.py build > /dev/null 2>&1 || Echo_ERROR \"Failed to install dependency module\"\n        python3 setup.py install > /dev/null 2>&1 || Echo_ERROR \"Failed to install dependency module\"\n        python3 vol.py -h > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the $P_Dir/volatility3\" || Echo_ERROR3\n    fi\n\n    if test -d $P_Dir/volatility3/symbols\n    then\n        Echo_ALERT \"$P_Dir/volatility3/symbols folder already exists\"\n    else\n        Echo_ALERT \"Symbol Tables download command is as follows, we suggest you download it by yourself\"\n        Echo_INFOR \"cd /tmp && wget https://downloads.volatilityfoundation.org/volatility3/symbols/windows.zip\"\n        Echo_INFOR \"wget https://downloads.volatilityfoundation.org/volatility3/symbols/mac.zip\"\n        Echo_INFOR \"wget https://downloads.volatilityfoundation.org/volatility3/symbols/linux.zip\"\n        Echo_INFOR \"mkdir -p $P_Dir/volatility3/symbols\"\n        Echo_INFOR \"mv --force /tmp/windows.zip $P_Dir/volatility3/symbols\"\n        Echo_INFOR \"mv --force /tmp/mac.zip $P_Dir/volatility3/symbols\"\n        Echo_INFOR \"mv --force /tmp/linux.zip $P_Dir/volatility3/symbols\"\n    fi\n\n}\n\n# -lt\nlt_Install(){\n\n    Docker_Check\n    Docker_Compose_Check\n    name=\"LogonTracer\"\n    echo -e \"\\033[1;33m\\n>> Installing $name\\n\\033[0m\"\n\n    docker pull jpcertcc/docker-logontracer && Echo_INFOR \"Pulled the latest LogonTracer image, please run through the following command:\\ndocker run --name logontracer --detach -p 7474:7474 -p 7687:7687 -p 8080:8080 -e LTHOSTNAME=[IP_Address] jpcertcc/docker-logontracer\\n\\n-browser access：http://[IP_Address]:8080/\" || Echo_ERROR3\n\n}\n\n# -binwalk\nbinwalk_Install(){\n\n    name=\"binwalk\"\n    which binwalk > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        echo -e \"\\033[1;33m\\n>> Installing binwalk\\n\\033[0m\"\n        case $Linux_Version in\n            *\"CentOS\"*|*\"RedHat\"*|*\"Fedora\"*|*\"AlmaLinux\"*|*\"VzLinux\"*|*\"Rocky\"*)\n                Echo_INFOR \"RedHat system is not recommended to install, this item Pass\\n\"\n                ;;\n            *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n                Echo_ALERT \"Installing binwalk\"\n                cd $T_Dir && rm -rf binwalk > /dev/null 2>&1 && $Proxy_OK git clone --depth 1 ${GitProxy}https://github.com/ReFirmLabs/binwalk.git > /dev/null 2>&1 && cd binwalk  > /dev/null 2>&1 || Echo_ERROR2\n                $Proxy_OK sudo ./deps.sh && python setup.py uninstall > /dev/null 2>&1 && python setup.py install > /dev/null 2>&1\n                binwalk -h > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name\" && touch /tmp/f8x_binwalk.txt > /dev/null 2>&1 || Echo_ERROR \"binwalk installation failed, recommended to use -binwalk-f for installation\"\n                echo -e \"\\033[1;33m\\n>> Installing unyaffs\\n\\033[0m\"\n                unyaffs_Install\n                ;;\n            *) ;;\n        esac\n    fi\n\n}\n\n# -binwalk-f\nbinwalk_force_Install(){\n\n    name=\"binwalk\"\n    which binwalk > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n\n        echo -e \"\\033[1;33m\\n>> Installing binwalk\\n\\033[0m\"\n        case $Linux_Version in\n            *\"CentOS\"*|*\"RedHat\"*|*\"Fedora\"*|*\"AlmaLinux\"*|*\"VzLinux\"*|*\"Rocky\"*)\n                Echo_INFOR \"RedHat system is not recommended to install, this item Pass\\n\"\n                ;;\n            *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n                Rm_Lock\n                Install_Switch \"python3-pip\"\n                Install_Switch \"python-lzma\"\n                Install_Switch \"python3-crypto\"\n                Install_Switch \"libqt4-opengl\"\n                Install_Switch \"python3-opengl\"\n                Install_Switch \"python3-pyqt4\"\n                Install_Switch \"python3-pyqt4.qtopengl\"\n                Install_Switch \"python3-numpy\"\n                Install_Switch \"python3-scipy\"\n                Install_Switch \"python3-pip\"\n                Install_Switch \"mtd-utils\"\n                Install_Switch \"gzip\"\n                Install_Switch \"bzip2\"\n                Install_Switch \"tar\"\n                Install_Switch \"arj\"\n                Install_Switch \"lhasa\"\n                Install_Switch \"p7zip\"\n                Install_Switch \"p7zip-full\"\n                Install_Switch \"cabextract\"\n                Install_Switch \"cramfsprogs\"\n                Install_Switch \"cramfsswap\"\n                Install_Switch \"squashfs-tools\"\n                Install_Switch \"sleuthkit\"\n                Install_Switch \"default-jdk\"\n                Install_Switch \"lzop\"\n                Install_Switch \"srecord\"\n                Install_Switch \"zlib1g-dev\"\n                Install_Switch \"liblzma-dev\"\n                Install_Switch \"liblzo2-dev\"\n                Install_Switch \"python-lzo\"\n                pip install cstruct > /dev/null 2>&1 && Echo_INFOR \"Successfully installed cstruct\" || Echo_ERROR \"cstruct installation failed\"\n\n                Install_Switch4 \"nose\"\n                Install_Switch4 \"coverage\"\n                Install_Switch4 \"pyqtgraph\"\n                Install_Switch4 \"capstone\"\n\n                # sasquatch\n                name=\"sasquatch\"\n                echo -e \"\\033[1;33m\\n>> Installing sasquatch\\n\\033[0m\"\n                cd $T_Dir && rm -rf sasquatch > /dev/null 2>&1 && $Proxy_OK git clone ${GitProxy}https://github.com/devttys0/sasquatch > /dev/null 2>&1 && cd sasquatch || Echo_ERROR2\n                $Proxy_OK ./build.sh > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name\" || Echo_ERROR3\n\n                # jefferson\n                name=\"jefferson\"\n                echo -e \"\\033[1;33m\\n>> Installing jefferson\\n\\033[0m\"\n                cd $T_Dir && rm -rf jefferson > /dev/null 2>&1 && $Proxy_OK git clone ${GitProxy}https://github.com/sviehb/jefferson > /dev/null 2>&1 && cd jefferson || Echo_ERROR2\n                $Proxy_OK python setup.py install > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name\" || Echo_ERROR3\n\n                # ubi_reader\n                name=\"ubi_reader\"\n                echo -e \"\\033[1;33m\\n>> Installing ubi_reader\\n\\033[0m\"\n                cd $T_Dir && rm -rf ubi_reader > /dev/null 2>&1 && $Proxy_OK git clone ${GitProxy}https://github.com/jrspruitt/ubi_reader > /dev/null 2>&1 && cd ubi_reader || Echo_ERROR2\n                $Proxy_OK python setup.py install > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name\" || Echo_ERROR3\n\n                # yaffshiv\n                name=\"yaffshiv\"\n                echo -e \"\\033[1;33m\\n>> Installing yaffshiv\\n\\033[0m\"\n                cd $T_Dir && rm -rf yaffshiv > /dev/null 2>&1 && $Proxy_OK git clone ${GitProxy}https://github.com/devttys0/yaffshiv > /dev/null 2>&1 && cd yaffshiv || Echo_ERROR2\n                $Proxy_OK python setup.py install > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name\" || Echo_ERROR3\n\n                # unstuff\n                name=\"unstuff\"\n                echo -e \"\\033[1;33m\\n>> Installing unstuff\\n\\033[0m\"\n                cd $T_Dir && $Proxy_OK curl -o stuffit520.611linux-i386.tar.gz ${GitProxy2}https://github.com/No-Github/Archive/releases/download/1.0.7/stuffit520.611linux-i386.tar.gz > /dev/null 2>&1 && tar -zxvf stuffit520.611linux-i386.tar.gz > /dev/null 2>&1\n                mv --force bin/unstuff /usr/local/bin/unstuff && chmod +x /usr/local/bin/unstuff && Echo_INFOR \"Successfully installed $name\" || Echo_ERROR3\n\n                # unyaffs\n                name=\"unyaffs\"\n                echo -e \"\\033[1;33m\\n>> Installing unyaffs\\n\\033[0m\"\n                unyaffs_Install\n\n                # binwalk\n                name=\"binwalk\"\n                echo -e \"\\033[1;33m\\n>> Installing binwalk\\n\\033[0m\"\n                cd $T_Dir && rm -rf binwalk > /dev/null 2>&1 && $Proxy_OK git clone --depth 1 ${GitProxy}https://github.com/ReFirmLabs/binwalk > /dev/null 2>&1 && cd binwalk || Echo_ERROR2\n\n                python3 setup.py install > /dev/null 2>&1\n\n                binwalk -h > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name\" && touch /tmp/f8x_binwalk_force.txt > /dev/null 2>&1 || Echo_ERROR3\n                ;;\n            *) ;;\n        esac\n\n    fi\n\n}\n\n# -clamav\nclamav_Install(){\n\n    name=\"clamav\"\n    echo -e \"\\033[1;33m\\n>> Installing $name\\n\\033[0m\"\n\n    clamscan --version > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        Rm_Lock\n        case $Linux_Version in\n            *\"CentOS\"*|*\"RedHat\"*|*\"Fedora\"*|*\"AlmaLinux\"*|*\"VzLinux\"*|*\"Rocky\"*)\n                Install_Switch \"clamav\"\n                Install_Switch \"clamav-update\"\n                $Proxy_OK freshclam\n                ;;\n            *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n                Install_Switch \"clamav\"\n                systemctl stop clamav-freshclam.service\n                $Proxy_OK freshclam -v\n                ;;\n            *) ;;\n        esac\n    fi\n\n}\n\n# -python2\nPython2_Install(){\n\n    name=\"python2\"\n    echo -e \"\\033[1;33m\\n>> Installing $name\\n\\033[0m\"\n\n    python2 -V > /dev/null 2>&1\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        Rm_Lock\n        case $Linux_Version in\n            *\"CentOS\"*|*\"RedHat\"*|*\"AlmaLinux\"*|*\"VzLinux\"*|*\"Rocky\"*)\n\n                ( (python -h > /dev/null 2>&1 || python2 -h > /dev/null 2>&1) && Echo_INFOR \"Successfully installed python2\" ) || ( ( (yum install -y python > /dev/null 2>&1 || yum install -y python2 > /dev/null 2>&1) && Echo_INFOR \"Successfully installed python2\") || Echo_ERROR \"python installation failed\")\n\n                ( yum install -y python-devel > /dev/null 2>&1 || yum install -y python2-devel > /dev/null 2>&1) && Echo_INFOR \"Successfully installed python-devel\" || Echo_ERROR \"python-devel installation failed\"\n                yum install -y python2-pip > /dev/null 2>&1 && Echo_INFOR \"Successfully installed python2-pip\" || { Echo_ERROR \"python2-pipinstallation failed, start autorun -pip2-force option\"; pip2_Install; }\n                ;;\n            *\"Fedora\"*)\n                yum install -y python > /dev/null 2>&1\n                yum install -y python2 > /dev/null 2>&1 && Echo_INFOR \"Successfully installed python2\" || Echo_ERROR \"python2 installation failed\"\n                yum install -y python-devel > /dev/null 2>&1\n                yum install -y python2-devel > /dev/null 2>&1\n                yum install -y python2-pip > /dev/null 2>&1 && Echo_INFOR \"Successfully installed python2-pip\" || { Echo_ERROR \"python2-pip installation failed, start autorun -pip2-force option\"; pip2_Install; }\n                ;;\n            *\"Kali\"*|*\"Debian\"*)\n                case $Linux_Version_Num in\n                    \"12\")\n                        Echo_INFOR \"Debian12\"\n                        mkdir -p /usr/local/py2713 && cd /usr/local/py2713 && $Proxy_OK wget https://www.python.org/ftp/python/2.7.13/Python-2.7.13.tgz ${wget_option}\n                        tar -xf Python-2.7.13.tgz > /dev/null 2>&1\n                        cd Python-2.7.13 && ./configure --with-pydebug\n                        # make -s -j16\n                        make install\n                        ln -s /usr/local/py2713/Python-2.7.13/python /usr/bin/python2\n                        python2 -V\n                        cd /tmp\n                        ;;\n                    *)\n                        Install_Switch \"python\"\n                        Install_Switch \"python-dev\"\n                        apt-get install -y python-pip > /dev/null 2>&1 && Echo_INFOR \"Successfully installed python2-pip\" || { Echo_ERROR \"python2-pip installation failed, start autorun -pip2-force option\"; pip2_Install; }\n                        Install_Switch3 \"setuptools\"\n                        ;;\n                esac\n                ;;\n            *\"Ubuntu\"*)\n                Install_Switch \"python\"\n                Install_Switch \"python-dev\"\n                apt-get install -y python-pip > /dev/null 2>&1 && Echo_INFOR \"Successfully installed python2-pip\" || { Echo_ERROR \"python2-pip installation failed, start autorun -pip2-force option\"; pip2_Install; }\n                Install_Switch3 \"setuptools\"\n                case $Linux_Version_Num in\n                    \"16.04\")\n                        mkdir -p /tmp/get-pip && cd /tmp/get-pip && rm -rf get-pip.py && $Proxy_OK wget https://bootstrap.pypa.io/pip/2.7/get-pip.py > /dev/null 2>&1\n                        $Proxy_OK python2 get-pip.py > /dev/null 2>&1 && rm -rf /tmp/get-pip && cd /tmp\n                        ;;\n                esac\n                ;;\n            *) ;;\n        esac\n    fi\n\n}\n\n# -pip2-force\npip2_Install(){\n\n    echo -e \"\\033[1;33m\\n>> Installing pip2\\n\\033[0m\"\n\n    case $Linux_Version in\n        *\"Debian\"*)\n            case $Linux_Version_Num in\n                \"12\")\n                    python2 -m ensurepip --upgrade\n                    python2 -m pip install --upgrade pip\n                    ;;\n                *)\n                    cd $T_Dir && $Proxy_OK curl https://bootstrap.pypa.io/pip/2.7/get-pip.py --output get-pip.py > /dev/null 2>&1 || Echo_ERROR \"https://bootstrap.pypa.io/get-pip.py download failed, please check if the network is reachable, proxychains4 configuration is correct\"\n                    $Proxy_OK python2 get-pip.py > /dev/null 2>&1 && Echo_INFOR \"Successfully installed python-pip\" || Echo_ERROR \"python-pip installation failed\"\n                    rm -f get-pip.py > /dev/null 2>&1\n                    ;;\n            esac\n            ;;\n        *)\n            cd $T_Dir && $Proxy_OK curl https://bootstrap.pypa.io/pip/2.7/get-pip.py --output get-pip.py > /dev/null 2>&1 || Echo_ERROR \"https://bootstrap.pypa.io/get-pip.py download failed, please check if the network is reachable, proxychains4 configuration is correct\"\n            $Proxy_OK python2 get-pip.py > /dev/null 2>&1 && Echo_INFOR \"Successfully installed python-pip\" || Echo_ERROR \"python-pip installation failed\"\n            rm -f get-pip.py > /dev/null 2>&1\n        ;;\n    esac\n\n    Install_Switch3 \"setuptools\"\n\n}\n\n# -ruby\nRuby_Install(){\n\n    name=\"ruby\"\n\n    echo -e \"\\033[1;33m\\n>> Installing Ruby\\n\\033[0m\"\n    Rm_Lock\n    case $Linux_Version in\n        *\"CentOS\"*|*\"RedHat\"*|*\"Fedora\"*|*\"AlmaLinux\"*|*\"VzLinux\"*|*\"Rocky\"*)\n            Install_Switch \"ruby\"\n            Install_Switch \"rubygems\"\n            Install_Switch \"ruby-devel\"\n            ;;\n        *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n            Install_Switch \"ruby\"\n            Install_Switch \"rubygems\"\n            Install_Switch \"ruby-dev\"\n            ;;\n        *) ;;\n    esac\n\n}\n\n# -ruby-f\nRuby_Install_f(){\n\n    name=\"ruby\"\n\n    echo -e \"\\033[1;33m\\n>> Installing Ruby\\n\\033[0m\"\n    cd $T_Dir && rm -f $Ruby_bin > /dev/null 2>&1 && $Proxy_OK wget https://cache.ruby-lang.org/pub/ruby/$Ruby_Ver/$Ruby_bin ${wget_option} || Echo_ERROR2\n    tar xvfvz $Ruby_bin > /dev/null 2>&1\n    cd $Ruby_Dir && ./configure > /dev/null 2>&1 && make > /dev/null 2>&1 && make install > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $(ruby -v) in the /usr/local/bin/\" || Echo_ERROR3\n    rm -f $T_Dir/$Ruby_bin\n\n}\n\n# -rust\nRust_Install(){\n\n    name=\"rust\"\n\n    echo -e \"\\033[1;33m\\n>> Installing rust\\n\\033[0m\"\n    $Proxy_OK curl https://sh.rustup.rs -sSf | $Proxy_OK sh\n\n}\n\n# -chromium\nchromium_Install(){\n\n    echo -e \"\\033[1;33m\\n>> Installing dependency libraries\\n\\033[0m\"\n\n    name=\"chromium\"\n\n    Rm_Lock\n    case $Linux_Version in\n        *\"CentOS\"*|*\"RedHat\"*|*\"Fedora\"*|*\"AlmaLinux\"*|*\"VzLinux\"*|*\"Rocky\"*)\n            Install_Switch \"pango.x86_64\"\n            Install_Switch \"libXcomposite.x86_64\"\n            Install_Switch \"libXcursor.x86_64\"\n            Install_Switch \"libXdamage.x86_64\"\n            Install_Switch \"libXext.x86_64\"\n            Install_Switch \"libXi.x86_64\"\n            Install_Switch \"libXtst.x86_64\"\n            Install_Switch \"cups-libs.x86_64\"\n            Install_Switch \"libXScrnSaver.x86_64\"\n            Install_Switch \"libXrandr.x86_64\"\n            Install_Switch \"libX11-xcb.x86_64\"\n            Install_Switch \"GConf2.x86_64\"\n            Install_Switch \"alsa-lib.x86_64\"\n            Install_Switch \"atk.x86_64\"\n            Install_Switch \"gtk3.x86_64\"\n            Install_Switch \"ipa-gothic-fonts\"\n            Install_Switch \"xorg-x11-fonts-100dpi\"\n            Install_Switch \"xorg-x11-fonts-75dpi\"\n            Install_Switch \"xorg-x11-utils\"\n            Install_Switch \"xorg-x11-fonts-cyrillic\"\n            Install_Switch \"xorg-x11-fonts-Type1\"\n            Install_Switch \"xorg-x11-fonts-misc\"\n            ;;\n        *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n            Install_Switch2 \"libasound2\"\n            Install_Switch2 \"libatk1.0-0\"\n            Install_Switch2 \"libc6\"\n            Install_Switch2 \"libcairo2\"\n            Install_Switch2 \"libcups2\"\n            Install_Switch2 \"libdbus-1-3\"\n            Install_Switch2 \"libexpat1\"\n            Install_Switch2 \"libfontconfig1\"\n            Install_Switch2 \"libgcc1\"\n            Install_Switch2 \"libgconf-2-4\"\n            Install_Switch2 \"libgdk-pixbuf2.0-0\"\n            Install_Switch2 \"libglib2.0-0\"\n            Install_Switch2 \"libgtk-3-0\"\n            Install_Switch2 \"libnspr4\"\n            Install_Switch2 \"libpango-1.0-0\"\n            Install_Switch2 \"libpangocairo-1.0-0\"\n            Install_Switch2 \"libstdc++6\"\n            Install_Switch2 \"libx11-6\"\n            Install_Switch2 \"libx11-xcb1\"\n            Install_Switch2 \"libxcb1\"\n            Install_Switch2 \"libxcursor1\"\n            Install_Switch2 \"libxdamage1\"\n            Install_Switch2 \"libxext6\"\n            Install_Switch2 \"libxfixes3\"\n            Install_Switch2 \"libxi6\"\n            Install_Switch2 \"libxrandr2\"\n            Install_Switch2 \"libxrender1\"\n            Install_Switch2 \"libxss1\"\n            Install_Switch2 \"libxtst6\"\n            Install_Switch2 \"libnss3\"\n            Install_Switch2 \"libgbm-dev\"\n            ;;\n        *) ;;\n    esac\n\n    linux_arm64_Check || exit 1\n\n    echo -e \"\\033[1;33m\\n>> Installing chromium (~120M)\\n\\033[0m\"\n\n    cd $T_Dir && rm -rf chrome-linux* > /dev/null 2>&1 && $Proxy_OK wget https://storage.googleapis.com/chromium-browser-snapshots/Linux_x64/$chromium_Ver/chrome-linux.zip ${wget_option} || Echo_ERROR \"download failed, please check if the network is reachable, proxychains4 configuration is correct\"\n\n    unzip chrome-linux.zip > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the $T_Dir/chrome-linux\" || Echo_ERROR3\n    rm -f chrome-linux.zip > /dev/null 2>&1\n\n}\n\n# -crawl\ncrawl_Install(){\n\n    Rm_Lock\n    case $Linux_Version in\n        *\"CentOS\"*|*\"RedHat\"*|*\"Fedora\"*|*\"AlmaLinux\"*|*\"VzLinux\"*|*\"Rocky\"*)\n            Install_Switch \"pango.x86_64\"\n            Install_Switch \"libXcomposite.x86_64\"\n            Install_Switch \"libXcursor.x86_64\"\n            Install_Switch \"libXdamage.x86_64\"\n            Install_Switch \"libXext.x86_64\"\n            Install_Switch \"libXi.x86_64\"\n            Install_Switch \"libXtst.x86_64\"\n            Install_Switch \"cups-libs.x86_64\"\n            Install_Switch \"libXScrnSaver.x86_64\"\n            Install_Switch \"libXrandr.x86_64\"\n            Install_Switch \"libX11-xcb.x86_64\"\n            Install_Switch \"GConf2.x86_64\"\n            Install_Switch \"alsa-lib.x86_64\"\n            Install_Switch \"atk.x86_64\"\n            Install_Switch \"gtk3.x86_64\"\n            Install_Switch \"ipa-gothic-fonts\"\n            Install_Switch \"xorg-x11-fonts-100dpi\"\n            Install_Switch \"xorg-x11-fonts-75dpi\"\n            Install_Switch \"xorg-x11-utils\"\n            Install_Switch \"xorg-x11-fonts-cyrillic\"\n            Install_Switch \"xorg-x11-fonts-Type1\"\n            Install_Switch \"xorg-x11-fonts-misc\"\n            ;;\n        *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n            Install_Switch2 \"libasound2\"\n            Install_Switch2 \"libatk1.0-0\"\n            Install_Switch2 \"libc6\"\n            Install_Switch2 \"libcairo2\"\n            Install_Switch2 \"libcups2\"\n            Install_Switch2 \"libdbus-1-3\"\n            Install_Switch2 \"libexpat1\"\n            Install_Switch2 \"libfontconfig1\"\n            Install_Switch2 \"libgcc1\"\n            Install_Switch2 \"libgconf-2-4\"\n            Install_Switch2 \"libgdk-pixbuf2.0-0\"\n            Install_Switch2 \"libglib2.0-0\"\n            Install_Switch2 \"libgtk-3-0\"\n            Install_Switch2 \"libnspr4\"\n            Install_Switch2 \"libpango-1.0-0\"\n            Install_Switch2 \"libpangocairo-1.0-0\"\n            Install_Switch2 \"libstdc++6\"\n            Install_Switch2 \"libx11-6\"\n            Install_Switch2 \"libx11-xcb1\"\n            Install_Switch2 \"libxcb1\"\n            Install_Switch2 \"libxcursor1\"\n            Install_Switch2 \"libxdamage1\"\n            Install_Switch2 \"libxext6\"\n            Install_Switch2 \"libxfixes3\"\n            Install_Switch2 \"libxi6\"\n            Install_Switch2 \"libxrandr2\"\n            Install_Switch2 \"libxrender1\"\n            Install_Switch2 \"libxss1\"\n            Install_Switch2 \"libxtst6\"\n            Install_Switch2 \"libnss3\"\n            Install_Switch2 \"libgbm-dev\"\n            ;;\n        *) ;;\n    esac\n\n    linux_arm64_Check || exit 1\n\n    Pentest_crawlergo_Install\n    Pentest_katana_Install\n    Echo_ALERT \"安装 chromium ,出现报错是正常的,可以忽略\"\n    katana -headless -u http://127.0.0.1\n\n}\n\n# -phantomjs\nphantomjs_Install(){\n\n    name=\"PhantomJS\"\n    phantomjs -v > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        echo -e \"\\033[1;33m\\n>> Installing $name\\n\\033[0m\"\n        Echo_ALERT \"$name installed\"\n    else\n        Rm_Lock\n        echo -e \"\\033[1;33m\\n>> Installing dependency libraries\\n\\033[0m\"\n        case $Linux_Version in\n            *\"CentOS\"*|*\"RedHat\"*|*\"Fedora\"*|*\"AlmaLinux\"*|*\"VzLinux\"*|*\"Rocky\"*)\n                Install_Switch \"gcc\"\n                Install_Switch \"gcc-c++\"\n                Install_Switch \"make\"\n                Install_Switch \"openssl-devel\"\n                Install_Switch \"freetype-devel\"\n                Install_Switch \"fontconfig-devel\"\n                ;;\n            *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n                Install_Switch \"build-essential\"\n                Install_Switch \"chrpath\"\n                Install_Switch \"git-core\"\n                Install_Switch \"libssl-dev\"\n                Install_Switch \"libfontconfig1-dev\"\n                Install_Switch \"libxft-dev\"\n                ;;\n            *) ;;\n        esac\n\n        echo -e \"\\033[1;33m\\n>> Installing $name\\n\\033[0m\"\n        mkdir -p /tmp/phantomjs && cd $_ && rm -rf $phantomjs_bin > /dev/null 2>&1 && $Proxy_OK wget https://bitbucket.org/ariya/phantomjs/downloads/$phantomjs_bin ${wget_option} || Echo_ERROR \"download failed, please check if the network is reachable, proxychains4 configuration is correct\"\n        tar -xvf $phantomjs_bin > /dev/null 2>&1\n        mv $phantomjs_dir/bin/phantomjs /usr/local/bin/phantomjs && chmod +x /usr/local/bin/phantomjs\n        rm -rf /tmp/phantomjs && cd /tmp\n        which phantomjs > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name\" || Echo_ERROR3\n    fi\n}\n\n# -k8s\nk8s_Install(){\n\n    kubectl_Install\n\n}\n\nkubectl_Install(){\n\n    name=\"kubectl\"\n    echo -e \"\\033[1;33m\\n>> Installing $name\\n\\033[0m\"\n\n    which kubectl > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_INFOR \"$name installed\"\n    else\n        case $Linux_architecture_Name in\n            *\"linux-x86_64\"*)\n                kubectl_version=$($Proxy_OK curl -L -s https://dl.k8s.io/release/stable.txt)\n                mkdir -p /tmp/kubectl && cd $_ && rm -rf kubectl > /dev/null 2>&1 && $Proxy_OK wget https://dl.k8s.io/release/$kubectl_version/bin/linux/amd64/kubectl ${wget_option} || Echo_ERROR \"download failed, please check if the network is reachable, proxychains4 configuration is correct\"\n                mv /tmp/kubectl/kubectl /usr/local/bin/kubectl && chmod +x /usr/local/bin/kubectl\n                rm -rf /tmp/kubectl && cd /tmp\n                which kubectl > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $kubectl_version in the /usr/local/bin/\" || Echo_ERROR3\n                ;;\n            *\"linux-arm64\"*)\n                kubectl_version=$($Proxy_OK curl -L -s https://dl.k8s.io/release/stable.txt)\n                mkdir -p /tmp/kubectl && cd $_ && rm -rf kubectl > /dev/null 2>&1 && $Proxy_OK wget https://dl.k8s.io/release/$kubectl_version/bin/linux/arm64/kubectl ${wget_option} || Echo_ERROR \"download failed, please check if the network is reachable, proxychains4 configuration is correct\"\n                mv /tmp/kubectl/kubectl /usr/local/bin/kubectl && chmod +x /usr/local/bin/kubectl\n                rm -rf /tmp/kubectl && cd /tmp\n                which kubectl > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $kubectl_version in the /usr/local/bin/\" || Echo_ERROR3\n                ;;\n        esac\n    fi\n\n}\n\n# -openjdk\nOpenjdk_Install(){\n\n    name=\"openjdk\"\n\n    java -version > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_INFOR \"java installed\"\n    else\n        echo -e \"\\033[1;33m\\n>> Installing Java environment(openjdk)\\n\\033[0m\"\n        Rm_Lock\n        case $Linux_Version in\n            *\"CentOS\"*|*\"RedHat\"*|*\"Fedora\"*|*\"AlmaLinux\"*|*\"VzLinux\"*|*\"Rocky\"*)\n                Install_Switch \"java-1.8.0-openjdk\"\n                Install_Switch \"java-1.8.0-openjdk-devel\"\n                java -version && Echo_INFOR \"Successfully installed Java environment(openjdk)\" || Echo_ERROR3\n                ;;\n            *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n                Install_Switch \"openjdk-11-jdk\"\n                java -version && Echo_INFOR \"Successfully installed Java environment(openjdk)\" || Echo_ERROR3\n                ;;\n            *) ;;\n        esac\n    fi\n\n}\n\nOraclejdk_Install(){\n\n    name=\"Oraclejdk\"\n\n    jenv_Install || jenv_Install\n\n    case \"$1\" in\n        oraclejdk8)\n            Oraclejdk8_Install\n            ;;\n        oraclejdk11)\n            Oraclejdk11_Install\n            ;;\n        oraclejdk17)\n            Oraclejdk17_Install\n            ;;\n        *)\n            Oraclejdk8_Install\n            ;;\n    esac\n\n}\n\n# -oraclejdk8\nOraclejdk8_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            orclejdk8_bin=$orclejdk8_bin_amd64\n            ;;\n        *\"linux-arm64\"*)\n            orclejdk8_bin=$orclejdk8_bin_arm64\n            ;;\n    esac\n\n    name=\"oraclejdk8\"\n    dir=\"/usr/local/java/$jdk8_Version\"\n\n    if test -d $dir\n    then\n        Echo_INFOR \"java8 installed\"\n    else\n        echo -e \"\\033[1;33m\\n>> Installing Java environment(oraclejdk8)\\n\\033[0m\"\n\n        cd $T_Dir && rm -f $orclejdk8_bin > /dev/null 2>&1 && $Proxy_OK wget ${GitProxy2}https://github.com/No-Github/Archive/releases/download/$orclejdk_tmp_ver/$orclejdk8_bin ${wget_option} || Echo_ERROR \"download failed, please check if the network is reachable, proxychains4 configuration is correct\"\n\n        tar -xzvf $orclejdk8_bin > /dev/null 2>&1\n        rm -rf /usr/local/java/ > /dev/null 2>&1 && mkdir -p /usr/local/java/\n        mv --force $jdk8_Version/ /usr/local/java\n\n        ln -s /usr/local/java/$jdk8_Version/bin/java /usr/bin/java > /dev/null 2>&1\n        ln -s /usr/local/java/$jdk8_Version/bin/keytool /usr/bin/keytool > /dev/null 2>&1\n\n        #case $Linux_Version in\n            #*\"CentOS\"*|*\"RedHat\"*|*\"Fedora\"*|*\"AlmaLinux\"*|*\"VzLinux\"*|*\"Rocky\"*)\n                #echo \"JAVA_HOME=/usr/local/java/$jdk8_Version\" >> /etc/bashrc\n                #echo \"JRE_HOME=\\$JAVA_HOME/jre\" >> /etc/bashrc\n                #echo \"CLASSPATH=.:\\$JAVA_HOME/lib:\\$JRE_HOME/lib\" >> /etc/bashrc\n                #echo \"PATH=\\$PATH:\\$JAVA_HOME/bin\" >> /etc/bashrc\n                #/usr/bin/java -version && Echo_INFOR \"Successfully installed java environment, environment variables may need to be re-entered in bash to take effect\" || Echo_ERROR \"java installation failed (Maybe a false positive, execute the following command and re-enter bash\\nexport JAVA_HOME=/usr/local/java/$jdk8_Version\\nexport JRE_HOME=\\$JAVA_HOME/jre\\nexport CLASSPATH=.:\\$JAVA_HOME/lib:\\$JRE_HOME/lib\\nexport PATH=\\$JAVA_HOME/bin:\\$PATH)\"\n                #;;\n            #*\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n                #echo \"JAVA_HOME=/usr/local/java/$jdk8_Version\" >> /etc/bash.bashrc\n                #echo \"JRE_HOME=\\$JAVA_HOME/jre\" >> /etc/bash.bashrc\n                #echo \"CLASSPATH=.:\\$JAVA_HOME/lib:\\$JRE_HOME/lib\" >> /etc/bash.bashrc\n                #echo \"PATH=\\$JAVA_HOME/bin:\\$PATH\" >> /etc/bash.bashrc\n                #/usr/bin/java -version && Echo_INFOR \"Successfully installed java environment, environment variables may need to be re-entered in bash to take effect\\nexport JAVA_HOME=/usr/local/java/$jdk8_Version\\nexport JRE_HOME=\\$JAVA_HOME/jre\\nexport CLASSPATH=.:\\$JAVA_HOME/lib:\\$JRE_HOME/lib\\nexport PATH=\\$JAVA_HOME/bin:\\$PATH\" || Echo_ERROR3\n                #;;\n            #*) ;;\n        #esac\n\n        rm -f $orclejdk8_bin > /dev/null 2>&1\n    fi\n\n    jenv_config \"/usr/local/java/$jdk8_Version\"\n    jenv global 1.8 && jenv local 1.8 && echo -e \"\" && Echo_INFOR \"Successfully installed java, Please run the following command:\\njenv global 1.8 && jenv local 1.8\"\n\n}\n\n# -oraclejdk11\nOraclejdk11_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            orclejdk11_bin=$orclejdk11_bin_amd64\n            ;;\n        *\"linux-arm64\"*)\n            orclejdk11_bin=$orclejdk11_bin_arm64\n            ;;\n    esac\n\n    name=\"oraclejdk11\"\n    dir=\"/usr/local/java/$jdk11_Version\"\n\n    if test -d $dir\n    then\n        Echo_INFOR \"java11 installed\"\n    else\n        echo -e \"\\033[1;33m\\n>> Installing Java environment(oraclejdk11)\\n\\033[0m\"\n\n        cd $T_Dir && rm -f $orclejdk11_bin > /dev/null 2>&1 && $Proxy_OK wget ${GitProxy2}https://github.com/No-Github/Archive/releases/download/$orclejdk_tmp_ver/$orclejdk11_bin ${wget_option} || Echo_ERROR \"download failed, please check if the network is reachable, proxychains4 configuration is correct\"\n\n        tar -xzvf $orclejdk11_bin > /dev/null 2>&1\n        # rm -rf /usr/local/java/ > /dev/null 2>&1\n        mkdir -p /usr/local/java/\n        mv --force $jdk11_Version/ /usr/local/java\n\n        ln -s /usr/local/java/$jdk11_Version/bin/java /usr/bin/java > /dev/null 2>&1\n        ln -s /usr/local/java/$jdk11_Version/bin/keytool /usr/bin/keytool > /dev/null 2>&1\n\n        #case $Linux_Version in\n            #*\"CentOS\"*|*\"RedHat\"*|*\"Fedora\"*|*\"AlmaLinux\"*|*\"VzLinux\"*|*\"Rocky\"*)\n                #echo \"JAVA_HOME=/usr/local/java/$jdk11_Version\" >> /etc/bashrc\n                #echo \"JRE_HOME=\\$JAVA_HOME/jre\" >> /etc/bashrc\n                #echo \"CLASSPATH=.:\\$JAVA_HOME/lib:\\$JRE_HOME/lib\" >> /etc/bashrc\n                #echo \"PATH=\\$PATH:\\$JAVA_HOME/bin\" >> /etc/bashrc\n                #/usr/bin/java -version && Echo_INFOR \"Successfully installed java environment, environment variables may need to be re-entered in bash to take effect\" || Echo_ERROR \"java installation failed (Maybe a false positive, execute the following command and re-enter bash\\nexport JAVA_HOME=/usr/local/java/$jdk11_Version\\nexport JRE_HOME=\\$JAVA_HOME/jre\\nexport CLASSPATH=.:\\$JAVA_HOME/lib:\\$JRE_HOME/lib\\nexport PATH=\\$JAVA_HOME/bin:\\$PATH)\"\n                #;;\n            #*\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n                #echo \"JAVA_HOME=/usr/local/java/$jdk11_Version\" >> /etc/bash.bashrc\n                #echo \"JRE_HOME=\\$JAVA_HOME/jre\" >> /etc/bash.bashrc\n                #echo \"CLASSPATH=.:\\$JAVA_HOME/lib:\\$JRE_HOME/lib\" >> /etc/bash.bashrc\n                #echo \"PATH=\\$JAVA_HOME/bin:\\$PATH\" >> /etc/bash.bashrc\n                #/usr/bin/java -version && Echo_INFOR \"Successfully installed java environment, environment variables may need to be re-entered in bash to take effect\\nexport JAVA_HOME=/usr/local/java/$jdk11_Version\\nexport JRE_HOME=\\$JAVA_HOME/jre\\nexport CLASSPATH=.:\\$JAVA_HOME/lib:\\$JRE_HOME/lib\\nexport PATH=\\$JAVA_HOME/bin:\\$PATH\" || Echo_ERROR3\n                #;;\n            #*) ;;\n        #esac\n\n        rm -f $orclejdk11_bin > /dev/null 2>&1\n    fi\n\n    jenv_config \"/usr/local/java/$jdk11_Version\"\n    jenv global 11 && jenv local 11 && echo -e \"\" && Echo_INFOR \"Successfully installed java, Please run the following command:\\njenv global 11 && jenv local 11\"\n\n}\n\n# -oraclejdk17\nOraclejdk17_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            orclejdk17_bin=$orclejdk17_bin_amd64\n            ;;\n        *\"linux-arm64\"*)\n            orclejdk17_bin=$orclejdk17_bin_arm64\n            ;;\n    esac\n\n    name=\"oraclejdk17\"\n    dir=\"/usr/local/java/$jdk17_Version\"\n\n    if test -d $dir\n    then\n        Echo_INFOR \"java17 installed\"\n    else\n        echo -e \"\\033[1;33m\\n>> Installing Java environment(oraclejdk17)\\n\\033[0m\"\n\n        cd $T_Dir && rm -f $orclejdk17_bin > /dev/null 2>&1 && $Proxy_OK wget ${GitProxy2}https://github.com/No-Github/Archive/releases/download/$orclejdk_tmp_ver/$orclejdk17_bin ${wget_option} || Echo_ERROR \"download failed, please check if the network is reachable, proxychains4 configuration is correct\"\n\n        tar -xzvf $orclejdk17_bin > /dev/null 2>&1\n        # rm -rf /usr/local/java/ > /dev/null 2>&1\n        mkdir -p /usr/local/java/\n        mv --force $jdk17_Version/ /usr/local/java\n\n        ln -s /usr/local/java/$jdk17_Version/bin/java /usr/bin/java > /dev/null 2>&1\n        ln -s /usr/local/java/$jdk17_Version/bin/keytool /usr/bin/keytool > /dev/null 2>&1\n\n        #case $Linux_Version in\n            #*\"CentOS\"*|*\"RedHat\"*|*\"Fedora\"*|*\"AlmaLinux\"*|*\"VzLinux\"*|*\"Rocky\"*)\n                #echo \"JAVA_HOME=/usr/local/java/$jdk17_Version\" >> /etc/bashrc\n                #echo \"JRE_HOME=\\$JAVA_HOME/jre\" >> /etc/bashrc\n                #echo \"CLASSPATH=.:\\$JAVA_HOME/lib:\\$JRE_HOME/lib\" >> /etc/bashrc\n                #echo \"PATH=\\$PATH:\\$JAVA_HOME/bin\" >> /etc/bashrc\n                #/usr/bin/java -version && Echo_INFOR \"Successfully installed java environment, environment variables may need to be re-entered in bash to take effect\" || Echo_ERROR \"java installation failed (Maybe a false positive, execute the following command and re-enter bash\\nexport JAVA_HOME=/usr/local/java/$jdk11_Version\\nexport JRE_HOME=\\$JAVA_HOME/jre\\nexport CLASSPATH=.:\\$JAVA_HOME/lib:\\$JRE_HOME/lib\\nexport PATH=\\$JAVA_HOME/bin:\\$PATH)\"\n                #;;\n            #*\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n                #echo \"JAVA_HOME=/usr/local/java/$jdk17_Version\" >> /etc/bash.bashrc\n                #echo \"JRE_HOME=\\$JAVA_HOME/jre\" >> /etc/bash.bashrc\n                #echo \"CLASSPATH=.:\\$JAVA_HOME/lib:\\$JRE_HOME/lib\" >> /etc/bash.bashrc\n                #echo \"PATH=\\$JAVA_HOME/bin:\\$PATH\" >> /etc/bash.bashrc\n                #/usr/bin/java -version && Echo_INFOR \"Successfully installed java environment, environment variables may need to be re-entered in bash to take effect\\nexport JAVA_HOME=/usr/local/java/$jdk11_Version\\nexport JRE_HOME=\\$JAVA_HOME/jre\\nexport CLASSPATH=.:\\$JAVA_HOME/lib:\\$JRE_HOME/lib\\nexport PATH=\\$JAVA_HOME/bin:\\$PATH\" || Echo_ERROR3\n                #;;\n            #*) ;;\n        #esac\n\n        rm -f $orclejdk17_bin > /dev/null 2>&1\n    fi\n\n    jenv_config \"/usr/local/java/$jdk17_Version\"\n    jenv global 17 && jenv local 17 && echo -e \"\" && Echo_INFOR \"Successfully installed java, Please run the following command:\\njenv global 17 && jenv local 17\"\n\n}\n\njenv_Install(){\n\n    name=\"jenv\"\n    dir=\"$T_Dir/.jenv\"\n    echo -e \"\\033[1;33m\\n>> Installing $name\\n\\033[0m\"\n\n    which jenv > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_INFOR \"$name installed\"\n    else\n        if test -d $dir\n        then\n            Echo_ALERT \"$name is already installed in $dir\"\n        else\n            $Proxy_OK git clone --depth 1 ${GitProxy}https://github.com/jenv/jenv.git $dir > /dev/null 2>&1 && Echo_INFOR \"Successfully installed jenv, environment variables may need to be re-entered in bash to take effect\\nexport PATH=\\\"$T_Dir/.jenv/bin:\\$PATH\\\"\\neval \\\"\\$(jenv init -)\\\"\" || { Echo_ERROR2; return 1; }\n\n            case $Linux_Version in\n                *\"CentOS\"*|*\"RedHat\"*|*\"Fedora\"*|*\"AlmaLinux\"*|*\"VzLinux\"*|*\"Rocky\"*)\n                    echo \"export PATH=\\\"$T_Dir/.jenv/bin:\\$PATH\\\"\" >> /etc/bashrc\n                    echo 'eval \"$(jenv init -)\"' >> /etc/bashrc\n                    ;;\n                *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n                    echo \"export PATH=\\\"$T_Dir/.jenv/bin:\\$PATH\\\"\" >> /etc/bash.bashrc\n                    echo 'eval \"$(jenv init -)\"' >> /etc/bash.bashrc\n                    ;;\n                *) ;;\n            esac\n        fi\n    fi\n\n}\n\njenv_config(){\n\n    name=\"jenv\"\n    dir=\"$T_Dir/.jenv\"\n\n    which jenv > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        jenv add $1\n        jenv doctor\n    else\n        if test -d $dir\n        then\n            export PATH=\"$T_Dir/.jenv/bin:$PATH\"\n            eval \"$(jenv init -)\"\n            jenv add $1\n            jenv doctor\n        else\n            Echo_ERROR \"不存在 jenv 环境\"\n        fi\n    fi\n\n}\n\n# -lua\nlua_Install(){\n\n    name=\"lua\"\n    echo -e \"\\033[1;33m\\n>> Installing $name\\n\\033[0m\"\n\n    which lua > /dev/null 2>&1\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/lua && cd /tmp/lua && rm -rf ${lua_bin} && $Proxy_OK curl -R -O http://www.lua.org/ftp/$lua_bin > /dev/null 2>&1 && Echo_INFOR \"Downloaded $lua_bin\" || Echo_ERROR \"$lua_bin download failed\"\n        tar -zxvf ${lua_bin} > /dev/null 2>&1 && cd ${lua_dir}\n        make linux test && make install && Echo_INFOR \"Successfully installed $name\" || Echo_ERROR3\n        rm -rf /tmp/lua && cd /tmp\n    fi\n\n    name=\"luajit\"\n    echo -e \"\\033[1;33m\\n>> Installing $name\\n\\033[0m\"\n\n    which luajit > /dev/null 2>&1\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/luajit && cd /tmp/luajit && rm -rf luajit && $Proxy_OK git clone --depth 1 ${GitProxy}https://luajit.org/git/luajit.git\n        cd luajit && make && make install\n        Echo_INFOR \"Please link by output information\"\n        rm -rf /tmp/luajit && cd /tmp\n    fi\n\n    echo -e \"\\033[1;33m\\n>> Installing common libraries\\n\\033[0m\"\n    Rm_Lock\n    Install_Switch \"luarocks\"\n    cd /tmp && luarocks install luafilesystem\n\n}\n\n# -perl\nPerl_Install(){\n\n    name=\"perl\"\n\n    echo -e \"\\033[1;33m\\n>> Installing $name(Pay attention to the installation options, if the installation does not respond for a long time, please press enter a few times, and after the installation is complete, you need to exit manually.)\\n\\033[0m\" && cd $T_Dir && $Proxy_OK sh <(curl -q https://platform.activestate.com/dl/cli/install.sh) --activate-default ActiveState/ActivePerl-5.28\n\n}\n\n\n# -nn\nnn_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            node_bin=$node_bin_amd64\n            node_Dir=$node_Dir_amd64\n            ;;\n        *\"linux-arm64\"*)\n            node_bin=$node_bin_arm64\n            node_Dir=$node_Dir_arm64\n            ;;\n    esac\n\n    name=\"nodejs && npm\"\n    echo -e \"\\033[1;33m\\n>> Installing $name\\n\\033[0m\"\n\n    if test -e /usr/local/bin/node\n    then\n        Echo_ALERT \"nodejs && npm installed\"\n    else\n        mkdir -p /tmp/nodejs && cd /tmp/nodejs && $Proxy_OK wget https://nodejs.org/dist/$node_Ver/$node_bin ${wget_option} && Echo_INFOR \"Downloaded $node_bin \" || Echo_ERROR \"$node_bin download failed, please check if the network is reachable, proxychains4 configuration is correct\"\n        mkdir -p /usr/local/nodejs/ && tar -C /usr/local/nodejs -xvJf $node_bin > /dev/null 2>&1\n        rm -rf /tmp/nodejs && cd /tmp\n        ln -s /usr/local/nodejs/$node_Dir/bin/node /usr/local/bin/node && Echo_INFOR \"Successfully installed nodejs\" || Echo_ERROR \"nodejs installation failed\"\n        ln -s /usr/local/nodejs/$node_Dir/bin/npm /usr/local/bin/npm && Echo_INFOR \"Successfully installed npm\" || Echo_ERROR \"npm installation failed\"\n\n        case $Linux_Version in\n            *\"CentOS\"*|*\"RedHat\"*|*\"Fedora\"*|*\"AlmaLinux\"*|*\"VzLinux\"*|*\"Rocky\"*)\n                echo \"PATH=\\$PATH:/usr/local/nodejs/$node_Dir/bin/\" >> /etc/bashrc\n                ;;\n            *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n                echo \"PATH=\\$PATH:/usr/local/nodejs/$node_Dir/bin/\" >> /etc/bash.bashrc\n                ;;\n            *) ;;\n        esac\n    fi\n\n}\n\n# -metarget\nmetarget_Install(){\n\n    Pentest_Base_Install\n    Docker_Check\n    Docker_Compose_Check\n    name=\"metarget\"\n    dir=\"$P_Dir/metarget\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        echo -e \"\\033[1;33m\\n>> Installing $name\\n\\033[0m\"\n\n        cd $P_Dir && rm -rf metarget > /dev/null 2>&1 && Echo_ALERT \"Downloading $name\" && $Proxy_OK git clone --depth 1 ${GitProxy}https://github.com/brant-ruan/metarget || Echo_ERROR2\n        cd metarget && Install_Switch7 \"requirements.txt\" && Echo_INFOR \"Downloaded $name in the $dir\" || Echo_ERROR3\n    fi\n\n}\n\n# -vulhub\nvulhub_Install(){\n\n    Pentest_Base_Install\n    Docker_Check\n    Docker_Compose_Check\n    name=\"vulhub\"\n    dir=\"$P_Dir/vulhub\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        echo -e \"\\033[1;33m\\n>> Installing $name\\n\\033[0m\"\n\n        cd $P_Dir && rm -rf vulhub > /dev/null 2>&1 && Echo_ALERT \"Downloading $name\" && $Proxy_OK git clone --depth 1 ${GitProxy}https://github.com/vulhub/vulhub || Echo_ERROR2\n        cd vulhub && Echo_INFOR \"Downloaded $name in the $dir\" || Echo_ERROR3\n    fi\n\n}\n\n# -vulfocus\nvulfocus_Install(){\n\n    Docker_Check\n    Docker_Compose_Check\n    name=\"vulfocus\"\n    echo -e \"\\033[1;33m\\n>> Installing $name\\n\\033[0m\"\n\n    docker pull vulfocus/vulfocus:latest && Echo_INFOR \"Pulled the latest vulfocus image, For more information, please refer to https://fofapro.github.io/vulfocus/#/INSTALL\" || Echo_ERROR3\n\n}\n\n# -TerraformGoat\nTerraformGoat_Install(){\n\n    Pentest_Base_Install\n    Docker_Check\n    Docker_Compose_Check\n    name=\"TerraformGoat\"\n    dir=\"$P_Dir/TerraformGoat\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n        Echo_INFOR \"Please run through the following command:\\ndocker run -itd --name terraformgoat terraformgoat:v0.0.3\\ndocker exec -it terraformgoat /bin/bash\\n\"\n    else\n        echo -e \"\\033[1;33m\\n>> Installing $name\\n\\033[0m\"\n        cd $P_Dir && rm -rf TerraformGoat > /dev/null 2>&1 && Echo_ALERT \"Downloading $name\" && $Proxy_OK git clone --depth 1 ${GitProxy}https://github.com/HXSecurity/TerraformGoat.git > /dev/null 2>&1 || Echo_ERROR2\n        cd TerraformGoat && Echo_INFOR \"Downloaded $name in the $P_Dir/TerraformGoat\" || Echo_ERROR3\n        docker build . -t terraformgoat:v0.0.3 && Echo_INFOR \"Please run through the following command:\\ndocker run -itd --name terraformgoat terraformgoat:v0.0.3\\ndocker exec -it terraformgoat /bin/bash\\n\" || Echo_ERROR3\n    fi\n\n}\n\n# -goby\nGoby_Install(){\n\n    name=\"goby\"\n    echo -e \"\\033[1;33m\\n>> Installing $name\\n\\033[0m\"\n\n    if test -d $P_Dir/goby\n    then\n        Echo_INFOR \"Goby is already installed in $P_Dir/goby, Please run through the following command:\\ncd $P_Dir/goby/goby* && ./goby (Graphical interface required)\"\n    else\n\n        Rm_Lock\n        case $Linux_Version in\n            *\"CentOS\"*|*\"RedHat\"*|*\"Fedora\"*|*\"AlmaLinux\"*|*\"VzLinux\"*|*\"Rocky\"*)\n                Install_Switch \"libXScrnSaver*\"\n                ;;\n            *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n                Install_Switch \"libgconf2\"\n                ;;\n            *) ;;\n        esac\n\n        Echo_ALERT \"Downloading Goby(~120M)\"\n        cd $P_Dir && mkdir -p $P_Dir/goby > /dev/null 2>&1 && $Proxy_OK wget https://cn.gobies.org/$goby_File ${wget_option} || Echo_ERROR \"$goby_File download failed\"\n        unzip $goby_File -d $P_Dir/goby > /dev/null 2>&1 && rm -f $goby_File && Echo_INFOR \"Goby $goby_Ver in the $P_Dir/goby, Please run through the following command:\\ncd $P_Dir/goby/goby* && ./goby (Graphical interface required)\" || Echo_ERROR3\n    fi\n\n    if test -d $P_Dir/goby\n    then\n\n        echo -e \"\\033[5;33m\\nSet up server-side account(Special characters should be preceded by a backslash \\\"\\\\\\\" Escape)\\033[0m\" && read -r input\n        Goby_User=$input\n        echo -e \"\\033[5;33m\\nSet server-side password(Special characters should be preceded by a backslash \\\"\\\\\\\" Escape)\\033[0m\" && read -r input\n        Goby_Pass=$input\n        Echo_INFOR \"请运行以下命令:\\n\\033[0m\\033[1;32mcd $P_Dir/goby/goby*/golib && nohup ./goby-cmd-linux -apiauth $Goby_User:$Goby_Pass -mode api -bind 0.0.0.0:8361 & \"\n\n    else\n        Echo_ERROR \"Goby is not installed, or is not in the specified path\"\n    fi\n\n}\n\nawvs15_Install_secfa(){\n\n    Docker_Check\n    Docker_Compose_Check\n    name=\"awvs\"\n    echo -e \"\\033[1;33m\\n>> Installing $name\\n\\033[0m\"\n\n    docker pull secfa/docker-awvs:beta && Echo_INFOR \"Pulled the latest awvs image, Please run through the following command:\\ndocker run -it -d -p 13443:3443 secfa/docker-awvs:beta\\n\\n- awvs username: admin@admin.com\\n- awvs password: Admin123\\n- browser access：https://127.0.0.1:13443/\\n\" || Echo_ERROR3\n\n    # Echo_INFOR \"Recommended Projects : https://github.com/test502git/awvs13_batch_py3\"\n\n}\n\n# https://www.fahai.org/index.php/archives/31/\nawvs15_Install_fahai(){\n\n    Docker_Check\n    Docker_Compose_Check\n    name=\"awvs15\"\n    echo -e \"\\033[1;33m\\n>> Installing $name\\n\\033[0m\"\n\n    bash <(curl -sLk https://www.fahai.org/aDisk/Awvs/check.sh) xrsec/awvs:v15\n    # docker pull xrsec/awvs:v15 && Echo_INFOR \"Pulled the latest awvs15 image, Please run through the following command:\\ndocker run -it -d -p 13443:3443 xrsec/awvs:v15\\n\\n-awvs username: awvs@awvs.lan\\n-awvs password: Awvs@awvs.lan\\n-browser access：https://127.0.0.1:13443/\\n\" || Echo_ERROR3\n\n}\n\n\n# -mobsf\nmobsf_Install(){\n\n    Docker_Check\n    Docker_Compose_Check\n    name=\"MobSF\"\n    echo -e \"\\033[1;33m\\n>> Installing $name\\n\\033[0m\"\n\n    docker pull opensecurity/mobile-security-framework-mobsf && Echo_INFOR \"Pulled the latest MobSF image, Please run through the following command:\\n$Proxy_OK docker run -it --rm -p 8000:8000 opensecurity/mobile-security-framework-mobsf:latest\\n\\n-browser access：http://127.0.0.1:8000/\" || Echo_ERROR3\n\n}\n\n# -mythic\n# 建议使用国外地区的vps,不然部署速度太慢了\nmythic_Install(){\n\n    Docker_Check\n    Docker_Compose_Check\n    name=\"Mythic\"\n    dir=\"$P_Dir/Mythic\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n        Echo_INFOR \"browser access：https://127.0.0.1:7443\"\n        cd $dir/Mythic && cat .env | grep 'MYTHIC_ADMIN' && ./mythic-cli status\n    else\n        echo -e \"\\033[1;33m\\n>> Installing $name\\n\\033[0m\"\n        mkdir -p $dir && cd $dir && git clone https://github.com/its-a-feature/Mythic\n        cd Mythic\n        ./mythic-cli install github https://github.com/MythicAgents/Apollo\n        ./mythic-cli install github https://github.com/MythicC2Profiles/http\n        ./mythic-cli install github https://github.com/MythicAgents/poseidon\n        ./mythic-cli install github https://github.com/MythicC2Profiles/websocket\n        ./mythic-cli install github https://github.com/MythicAgents/apfell\n        ./mythic-cli start\n\n        ./mythic-cli status\n        Echo_INFOR \"$name is already installed in $dir\"\n        Echo_INFOR \"browser access：https://127.0.0.1:7443\"\n        cat .env | grep 'MYTHIC_ADMIN'\n    fi\n\n}\n\n# -nodejsscan\nnodejsscan_Install(){\n\n    Docker_Check\n    Docker_Compose_Check\n    name=\"nodejsscan\"\n    echo -e \"\\033[1;33m\\n>> Installing $name\\n\\033[0m\"\n\n    docker pull opensecurity/nodejsscan:latest && Echo_INFOR \"Pulled the latest nodejsscan image, Please run through the following command:\\ndocker run -it -p 9090:9090 opensecurity/nodejsscan:latest\\n\\n-browser access：http://127.0.0.1:9090/\" || Echo_ERROR3\n\n}\n\n# -pupy\npupy_Install(){\n\n    Docker_Check\n    Docker_Compose_Check\n    name=\"pupy\"\n    echo -e \"\\033[1;33m\\n>> Installing $name\\n\\033[0m\"\n\n    docker pull alxchk/pupy:unstable && echo -e \"\" && Echo_INFOR \"Pulled the latest pupy image\" || Echo_ERROR3\n\n    echo -e \"\\033[5;33m\\n输入 pupy 容器 ssh 端口 (默认 2022)\\033[0m\" && read -r input\n    pupy_ssh_port=$input\n\n    if [ $pupy_ssh_port ==  ] 2>> /tmp/f8x_error.log\n    then\n        echo -e \"输入为空,默认监听端口为 2022\"\n        pupy_ssh_port=\"2022\"\n    fi\n\n    echo -e \"\\033[5;33m\\n输入 pupy 容器 http 端口 (默认 80)\\033[0m\" && read -r input\n    pupy_http_port=$input\n\n    if [ $pupy_http_port ==  ] 2>> /tmp/f8x_error.log\n    then\n        echo -e \"输入为空,默认监听端口为 80\"\n        pupy_http_port=\"80\"\n    fi\n\n    echo -e \"\\033[5;33m\\n输入 pupy 容器 https 端口 (默认 443)\\033[0m\" && read -r input\n    pupy_https_port=$input\n\n    if [ $pupy_https_port ==  ] 2>> /tmp/f8x_error.log\n    then\n        echo -e \"输入为空,默认监听端口为 443\"\n        pupy_https_port=\"443\"\n    fi\n\n    # echo -e \"\\033[5;33m\\n输入 pupy 容器 WebServer 端口 (默认 9000)\\033[0m\" && read -r input\n    # pupy_WebServer_port=$input\n\n    # if [ $pupy_WebServer_port ==  ] 2>> /tmp/f8x_error.log\n    # then\n    #     echo -e \"输入为空,默认监听端口为 9000\"\n    #     pupy_WebServer_port=\"9000\"\n    # fi\n\n    echo -e \"\\033[5;33m\\n输入 pupy 容器 自定义映射端口范围 (默认 8000-8100)(端口映射范围过多会导致资源占用率提升,建议 100 以内)\\033[0m\" && read -r input\n    pupy_custom_port=$input\n\n    if [ $pupy_custom_port ==  ] 2>> /tmp/f8x_error.log\n    then\n        echo -e \"输入为空,默认映射端口范围为 8000-8100\"\n        pupy_custom_port=\"-p 8000-8100:8000-8100\"\n    else\n        pupy_custom_port=\"-p $pupy_custom_port:$pupy_custom_port\"\n    fi\n\n    echo -e \"\\033[5;33m\\npupy 容器是否监听 53 端口 [y/N,Default N] (注意: 如果监听 53 会关闭系统自带 systemd-resolved,请知晓这个选项的用意)\\033[0m\" && read -r input\n    case $input in\n        [yY][eE][sS]|[Yy])\n            systemctl stop systemd-resolved\n            pupy_dns=\"-p 53:53 \"\n        ;;\n        *)\n            echo -e \"pass~\"\n        ;;\n    esac\n\n    echo -e \"\" && Echo_INFOR \"docker run -d --name pupy-server -p $pupy_ssh_port:22 $pupy_dns-p $pupy_http_port:80 -p $pupy_https_port:443 $pupy_custom_port -v /tmp/projects:/projects alxchk/pupy:unstable\"\n    docker run -d --name pupy-server -p $pupy_ssh_port:22 $pupy_dns-p $pupy_http_port:80 -p $pupy_https_port:443 $pupy_custom_port -v /tmp/projects:/projects alxchk/pupy:unstable\n\n    # ssh-keygen 免交互\n    yes | ssh-keygen -t rsa -N \"\" -C \"test@email.com\" -f ~/.ssh/id_rsa_pupy\n    cp ~/.ssh/id_rsa_pupy.pub /tmp/projects/keys/authorized_keys\n\n    # ssh首次交互免输入yes\n    # ssh -i ~/.ssh/id_rsa_pupy -p 2022 -o stricthostkeychecking=no pupy@127.0.0.1\n    Echo_INFOR \"pupy 交互命令:\\nssh -i ~/.ssh/id_rsa_pupy -p $pupy_ssh_port -o stricthostkeychecking=no pupy@127.0.0.1\"\n    Echo_INFOR \"如果提示 ssh: connect to host 127.0.0.1 port 2022: Connection timed out 的报错,重启机器,删除创建的pupy docker容器,重新 f8x -pupy 即可\"\n\n}\n\n# -sps\nSharPyShell_Install(){\n\n    name=\"SharPyShell\"\n    dir=\"$P_Dir/SharPyShell\"\n\n    if test -e $dir/SharPyShell.py\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        rm -rf $P_Dir/SharPyShell\n        cd $P_Dir && $Proxy_OK git clone --depth 1 ${GitProxy}https://github.com/antonioCoco/SharPyShell.git > /dev/null 2>&1\n        cd $dir\n\n        python2 -m pip install --upgrade --force pip > /dev/null 2>&1\n        python2 -m pip install install setuptools==33.1.1 > /dev/null 2>&1\n        python2 -m pip install pefile==2019.4.18 > /dev/null 2>&1\n\n        case $Linux_Version in\n            *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n                case $Linux_architecture_Name in\n                    *\"linux-arm64\"*)\n                        Rm_Lock\n                        Install_Switch \"libffi-dev\"\n                        Install_Switch \"libssl-dev\"\n                        Install_Switch \"libssh-dev\"\n\n                        Install_Switch3 \"cffi==1.12.3\"\n                        Install_Switch3 \"pyOpenSSL==19.0.0\"\n                        python2 -m pip install -r requirements.txt > /dev/null 2>&1\n                        ;;\n                esac\n                ;;\n        esac\n\n        python2 -m pip install -r requirements.txt > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the $dir\"\n    fi\n\n}\n\n# -viper\nviper_Install(){\n\n    Docker_Check\n    Docker_Compose_Check\n    name=\"viper\"\n    echo -e \"\\033[1;33m\\n>> Installing $name\\n\\033[0m\"\n\n    mkdir -p /root/VIPER && cd /root/VIPER && rm -f docker-compose.* > /dev/null 2>&1\n\n    viper_conf > /dev/null 2>&1\n\n    echo -e \"\\033[5;33m\\nPlease enter your Viper password(Password needs to be greater than 8 digits)\\033[0m\" && read -r input\n    Viper_Pass=$input\n    cat docker-compose.yml.bak | sed \"s/diypassword/$Viper_Pass/\" >> docker-compose.yml\n    cd /root/VIPER && docker compose up -d || docker-compose up -d\n    rm /root/VIPER/docker-compose.yml.bak\n    Echo_INFOR \"Waiting for the system to start(15s), access https://vpsip:60000 Login to the server. Username : root Password : $Viper_Pass\"\n\n}\n\nviper_conf(){\n\ntee docker-compose.yml.bak <<-'EOF'\nversion: \"3\"\nservices:\n  viper:\n    image: registry.cn-shenzhen.aliyuncs.com/toys/viper:latest\n    container_name: viper-c\n    network_mode: \"host\"\n    restart: always\n    volumes:\n      - ${PWD}/loot:/root/.msf4/loot\n      - ${PWD}/db:/root/viper/Docker/db\n      - ${PWD}/module:/root/viper/Docker/module\n      - ${PWD}/log:/root/viper/Docker/log\n      - ${PWD}/nginxconfig:/root/viper/Docker/nginxconfig\n    command: [\"diypassword\"]\nEOF\n\n}\n\n# -arl\narl_Install(){\n\n    Docker_Check\n    Docker_Compose_Check\n    name=\"ARL\"\n\n    echo -e \"\\033[1;33m\\n>> Installing $name\\n\\033[0m\"\n    cd $P_Dir && rm -rf ARL > /dev/null 2>&1 && $Proxy_OK git clone --depth 1 ${GitProxy}https://github.com/TophantTechnology/ARL > /dev/null 2>&1 || Echo_ERROR4 \"TophantTechnology/ARL\"\n    # docker pull tophant/arl && Echo_INFOR \"Pulled the latest ARL image\" || Echo_ERROR3\n    Echo_INFOR \"Please run through the following command:\\ncd $P_Dir/ARL/docker/ && docker volume create arl_db && docker compose up -d\\nDefault port: 5003\\nDefault username: admin\\n/Default password: arlpass\"\n\n}\n\n# -music\nmusic_Install(){\n\n    nn_Check\n    name=\"UnblockNeteaseMusic\"\n\n    echo -e \"\\033[1;33m\\n>> Installing $name\\n\\033[0m\"\n\n    Echo_ALERT \"Installing npx module\" && $Proxy_OK npm install npx -g > /dev/null 2>&1 && Echo_INFOR \"npx module installed successfully\" || Echo_ERROR \"npx module installation failed\"\n    cd $T_Dir && rm -rf UnblockNeteaseMusic > /dev/null 2>&1 && $Proxy_OK git clone --depth 1 ${GitProxy}https://github.com/nondanee/UnblockNeteaseMusic > /dev/null 2>&1 || Echo_ERROR4 \"nondanee/UnblockNeteaseMusic\"\n    cd UnblockNeteaseMusic && $Proxy_OK npm install && Echo_INFOR \"After installation, run the following command to start the service:\\n\\033[0m\\033[1;32mcd $T_Dir/UnblockNeteaseMusic && npx @nondanee/unblockneteasemusic\\n\" || Echo_ERROR3\n\n}\n\n# -nginx\nnginx_Install(){\n\n    name=\"nginx\"\n\n    echo -e \"\\033[1;33m\\n>> Installing $name $nginx_Ver\\n\\033[0m\"\n\n    nginx -h > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n\n        Rm_Lock\n        case $Linux_Version in\n            *\"CentOS\"*|*\"RedHat\"*|*\"Fedora\"*|*\"AlmaLinux\"*|*\"VzLinux\"*|*\"Rocky\"*)\n                Install_Switch \"pcre-devel\"\n                ;;\n            *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n                Install_Switch \"libpcre3-dev\"\n                Install_Switch \"zlib1g\"\n                Install_Switch \"zlib1g.dev\"\n                ;;\n            *) ;;\n        esac\n\n        mkdir -p /tmp/nginx && cd /tmp/nginx && rm -f $nginx_bin > /dev/null 2>&1 && $Proxy_OK wget -O $nginx_bin https://nginx.org/download/$nginx_bin > /dev/null 2>&1 || Echo_ERROR \"$nginx_bin download failed\"\n        tar -zxvf $nginx_bin > /dev/null 2>&1 && rm -f $nginx_bin && cd nginx-*\n        ./configure && make && make install && Echo_INFOR \"Compile successfully\" || Echo_ERROR \"Compile failure\"\n        rm -rf /tmp/nginx && cd /tmp\n        mv --force /usr/local/nginx/sbin/nginx /usr/local/bin/nginx && chmod +x /usr/local/bin/nginx && nginx -h > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name, the configuration file is located in /usr/local/nginx/conf/\" || Echo_ERROR3\n    fi\n\n}\n\n# -aircrack\naircrack_Install(){\n\n    name=\"aircrack-ng\"\n    dir=\"$P_Dir/aircrack-ng\"\n\n    echo -e \"\\033[1;33m\\n>> Installing $name\\n\\033[0m\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        cd $P_Dir && rm -rf aircrack-ng > /dev/null 2>&1 && $Proxy_OK git clone --depth 1 ${GitProxy}https://github.com/aircrack-ng/aircrack-ng.git > /dev/null 2>&1 && cd $dir || Echo_ERROR4 \"aircrack-ng/aircrack-ng\"\n\n        Rm_Lock\n        case $Linux_Version in\n            *\"CentOS\"*|*\"RedHat\"*|*\"AlmaLinux\"*|*\"VzLinux\"*|*\"Rocky\"*)\n                Update_EPEL_Mirror\n                case $Linux_Version_Num in\n                    8)\n                        yum config-manager --set-enabled powertools\n                        Install_Switch \"libtool\"\n                        Install_Switch \"pkgconfig sqlite-devel\"\n                        Install_Switch \"autoconf\"\n                        Install_Switch \"automake\"\n                        Install_Switch \"openssl-devel\"\n                        Install_Switch \"libpcap-devel\"\n                        Install_Switch \"pcre-devel\"\n                        Install_Switch \"rfkill\"\n                        Install_Switch \"libnl3-devel\"\n                        Install_Switch \"gcc\"\n                        Install_Switch \"gcc-c++\"\n                        Install_Switch \"ethtool\"\n                        Install_Switch \"hwloc-devel\"\n                        Install_Switch \"libcmocka-devl\"\n                        Install_Switch \"make\"\n                        Install_Switch \"file\"\n                        Install_Switch \"expect\"\n                        Install_Switch \"hostapd\"\n                        Install_Switch \"wpa_supplicant\"\n                        Install_Switch \"iw\"\n                        Install_Switch \"usbutils\"\n                        Install_Switch \"tcpdump\"\n                        Install_Switch \"screen\"\n                        Install_Switch \"zlib-devel\"\n                        ;;\n                    7)\n                        ./centos_autotools.sh\n                        yum remove -y autoconf automake\n                        Install_Switch \"sqlite-devel\"\n                        Install_Switch \"openssl-devel\"\n                        Install_Switch \"libpcap-devel\"\n                        Install_Switch \"pcre-devel\"\n                        Install_Switch \"rfkill\"\n                        Install_Switch \"libnl3-devel\"\n                        Install_Switch \"ethtool\"\n                        Install_Switch \"hwloc-devel\"\n                        Install_Switch \"libcmocka-devel\"\n                        Install_Switch \"make\"\n                        Install_Switch \"file\"\n                        Install_Switch \"expect\"\n                        Install_Switch \"hostapd\"\n                        Install_Switch \"wpa_supplicant\"\n                        Install_Switch \"iw\"\n                        Install_Switch \"usbutils\"\n                        Install_Switch \"tcpdump\"\n                        Install_Switch \"screen\"\n                        Install_Switch \"zlib-devel\"\n                        ;;\n                    *)\n                        Echo_ERROR \"版本不支持,pass\"\n                        ;;\n                esac\n                ;;\n            *\"Fedora\"*)\n                Install_Switch \"libtool\"\n                Install_Switch \"pkgconfig\"\n                Install_Switch \"sqlite-devel\"\n                Install_Switch \"autoconf\"\n                Install_Switch \"automake\"\n                Install_Switch \"openssl-devel\"\n                Install_Switch \"libpcap-devel\"\n                Install_Switch \"pcre-devel\"\n                Install_Switch \"rfkill\"\n                Install_Switch \"libnl3-devel\"\n                Install_Switch \"gcc\"\n                Install_Switch \"gcc-c++\"\n                Install_Switch \"ethtool\"\n                Install_Switch \"hwloc-devel\"\n                Install_Switch \"libcmocka-devel\"\n                Install_Switch \"make\"\n                Install_Switch \"file\"\n                Install_Switch \"expect\"\n                Install_Switch \"hostapd\"\n                Install_Switch \"wpa_supplicant\"\n                Install_Switch \"iw\"\n                Install_Switch \"usbutils\"\n                Install_Switch \"tcpdump\"\n                Install_Switch \"screen\"\n                Install_Switch \"zlib-devel\"\n                ;;\n            *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n                Install_Switch \"build-essential\"\n                Install_Switch \"autoconf\"\n                Install_Switch \"automake\"\n                Install_Switch \"libtool\"\n                Install_Switch \"pkg-config\"\n                Install_Switch \"libnl-3-dev\"\n                Install_Switch \"libnl-genl-3-dev\"\n                Install_Switch \"libssl-dev\"\n                Install_Switch \"ethtool\"\n                Install_Switch \"shtool\"\n                Install_Switch \"rfkill\"\n                Install_Switch \"zlib1g-dev\"\n                Install_Switch \"libpcap-dev\"\n                Install_Switch \"libsqlite3-dev\"\n                Install_Switch \"libpcre3-dev\"\n                Install_Switch \"libhwloc-dev\"\n                Install_Switch \"libcmocka-dev\"\n                Install_Switch \"hostapd\"\n                Install_Switch \"wpasupplicant\"\n                Install_Switch \"tcpdump\"\n                Install_Switch \"screen\"\n                Install_Switch \"iw\"\n                Install_Switch \"usbutils\"\n                ;;\n            *) ;;\n        esac\n\n        ./autogen.sh && ./configure && make && make install && ldconfig && Echo_INFOR \"Successfully installed $name\" || Echo_ERROR3\n\n    fi\n\n}\n\n# -bypass\nbypass_Install(){\n\n    GO_Check\n    Pentest_Base_Install\n\n    echo -e \"\\033[1;33m\\n>> Installing garble\\n\\033[0m\"\n    go env -w GO111MODULE=on\n    go get mvdan.cc/garble > /dev/null 2>&1 && Echo_INFOR \"Successfully installed garble in the $P_Dir/garble \" || Echo_ERROR \"garble installation failed\"\n\n    echo -e \"\\033[1;33m\\n>> Installing intensio-obfuscator\\n\\033[0m\"\n    Install_Switch5 \"intensio-obfuscator\"\n\n}\n\n# -cs\ncs_Install(){\n\n    Pentest_Base_Install\n\n    echo -e \"\\033[1;33m\\n>> Installing $CS_Version\\n\\033[0m\"\n    Pentest_CobaltStrike_Install\n    echo -e \"\\033[5;33m\\nPlease enter your teamserver server IP\\033[0m\" && read -r input\n    CS_IP=$input\n    echo -e \"\\033[5;33m\\nPlease enter your teamserver server password(Special characters should be preceded by a backslash \\\"\\\\\\\" to escape them)\\033[0m\" && read -r input\n    CS_Pass=$input\n    Echo_INFOR \"Please create a new bash session and run the following command:(Default Port 41337)\\n\\033[0m\\033[1;32mcd $P_Dir/$CS_Version/ && nohup ./teamserver $CS_IP $CS_Pass & \"\n\n}\n\n# -cs45\ncs45_Install(){\n\n    Pentest_Base_Install\n\n    echo -e \"\\033[1;33m\\n>> Installing $CS45_Version\\n\\033[0m\"\n    Pentest_CobaltStrike45_Install\n    echo -e \"\\033[5;33m\\nPlease enter your teamserver server IP\\033[0m\" && read -r input\n    CS_IP=$input\n    echo -e \"\\033[5;33m\\nPlease enter your teamserver server password(Special characters should be preceded by a backslash \\\"\\\\\\\" to escape them)\\033[0m\" && read -r input\n    CS_Pass=$input\n    Echo_INFOR \"Please create a new bash session and run the following command:(Default Port 50050)\\n\\033[0m\\033[1;32mcd $P_Dir/$CS45_Version/ && nohup ./teamserver $CS_IP $CS_Pass & \"\n\n}\n\n# -interactsh\ninteractsh_Install(){\n\n    name=\"interactsh-server\"\n    echo -e \"\\033[1;33m\\n>> Installing $name\\n\\033[0m\"\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            interactsh_server_bin=$interactsh_server_bin_amd64\n            ;;\n        *\"linux-arm64\"*)\n            interactsh_server_bin=$interactsh_server_bin_arm64\n            ;;\n    esac\n\n    which interactsh-server > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/interactsh && cd /tmp/interactsh && $Proxy_OK wget ${GitProxy}https://github.com/projectdiscovery/interactsh/releases/download/${interactsh_Ver}/${interactsh_server_bin} ${wget_option} || Echo_ERROR2\n        unzip ${interactsh_server_bin} > /dev/null 2>&1\n        mv /tmp/interactsh/interactsh-server /usr/local/bin/interactsh-server && chmod +x /usr/local/bin/interactsh-server\n        which interactsh-server > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name ${interactsh_Ver} in the /usr/local/bin/interactsh-server\" || Echo_ERROR3\n        rm -rf /tmp/interactsh && cd /tmp\n    fi\n\n    interactsh_client_Install\n\n}\n\ninteractsh_client_Install(){\n\n    name=\"interactsh-client\"\n    echo -e \"\\033[1;33m\\n>> Installing $name\\n\\033[0m\"\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            interactsh_client_bin=$interactsh_client_bin_amd64\n            ;;\n        *\"linux-arm64\"*)\n            interactsh_client_bin=$interactsh_client_bin_arm64\n            ;;\n    esac\n\n    which interactsh-client > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/interactsh && cd /tmp/interactsh && $Proxy_OK wget ${GitProxy}https://github.com/projectdiscovery/interactsh/releases/download/${interactsh_Ver}/${interactsh_client_bin} ${wget_option} || Echo_ERROR2\n        unzip ${interactsh_client_bin} > /dev/null 2>&1\n        mv /tmp/interactsh/interactsh-client /usr/local/bin/interactsh-client && chmod +x /usr/local/bin/interactsh-client\n        which interactsh-client > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name ${interactsh_Ver} in the /usr/local/bin/interactsh-client\" || Echo_ERROR3\n        rm -rf /tmp/interactsh && cd /tmp\n    fi\n\n}\n\n# -merlin\nmerlin_Install(){\n\n    name=\"merlin\"\n    echo -e \"\\033[1;33m\\n>> Installing $name\\n\\033[0m\"\n\n    which merlinServer > /dev/null 2>&1\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n        Echo_INFOR \"Merlin Server Command   : merlinServer\"\n    else\n        mkdir -p /tmp/merlin && cd /tmp/merlin && rm -f ${merlin_Install_amd64} > /dev/null 2>&1 && $Proxy_OK wget ${GitProxy}https://github.com/Ne0nd0g/merlin/releases/download/$merlin_Ver/$merlin_Install_amd64 > /dev/null 2>&1 || Echo_ERROR2\n        7za x -pmerlin ${merlin_Install_amd64} > /dev/null 2>&1\n        mv --force merlinServer-Linux-x64 /usr/local/bin/merlinServer && chmod +x /usr/local/bin/merlinServer\n        rm -rf /tmp/merlin && cd /tmp\n        which merlinServer > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $merlin_Ver in the /usr/local/bin/\" && Echo_INFOR \"Merlin Server Command   : merlinServer\" || Echo_ERROR3\n    fi\n\n    dir=\"$P_Dir/merlinAgent\"\n\n    if test -d $dir\n    then\n        Echo_INFOR \"Merlin Agent Folder     : $dir\"\n    else\n        mkdir $dir\n        mkdir -p /tmp/merlin && cd /tmp/merlin && rm -f ${merlin_agent_windows} > /dev/null 2>&1 && rm -f ${merlin_agent_linux} > /dev/null 2>&1 && rm -f ${merlin_agent_darwin} > /dev/null 2>&1\n        $Proxy_OK wget ${GitProxy}https://github.com/Ne0nd0g/merlin/releases/download/$merlin_Ver/$merlin_agent_windows > /dev/null 2>&1 || Echo_ERROR2\n        $Proxy_OK wget ${GitProxy}https://github.com/Ne0nd0g/merlin/releases/download/$merlin_Ver/$merlin_agent_linux > /dev/null 2>&1 || Echo_ERROR2\n        $Proxy_OK wget ${GitProxy}https://github.com/Ne0nd0g/merlin/releases/download/$merlin_Ver/$merlin_agent_darwin > /dev/null 2>&1 || Echo_ERROR2\n        7za x -pmerlin ${merlin_agent_windows} > /dev/null 2>&1\n        7za x -pmerlin ${merlin_agent_linux} > /dev/null 2>&1\n        7za x -pmerlin ${merlin_agent_darwin} > /dev/null 2>&1\n\n        mv --force merlinAgent-Windows-x64.exe $dir/merlinAgent-Windows-x64.exe\n        mv --force merlinAgent-Linux-x64 $dir/merlinAgent-Linux-x64\n        mv --force merlinAgent-Darwin-x64 $dir/merlinAgent-Darwin-x64 && Echo_INFOR \"Merlin Agent Folder     : $dir\" || Echo_ERROR3\n\n        rm -rf /tmp/merlin && cd /tmp\n    fi\n\n}\n\n# -frp\nfrp_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            frp_File=$frp_File_amd64\n            frp_Dir=$frp_Dir_amd64\n            ;;\n        *\"linux-arm64\"*)\n            frp_File=$frp_File_arm64\n            frp_Dir=$frp_Dir_arm64\n            ;;\n    esac\n\n    name=\"frp\"\n    echo -e \"\\033[1;33m\\n>> Installing $name\\n\\033[0m\"\n\n    if test -d $T_Dir/frp\n    then\n        Echo_INFOR \"$name is already installed in $T_Dir/frp\"\n    else\n        mkdir -p $T_Dir/frp && cd $T_Dir/frp && rm -rf frp* > /dev/null 2>&1 && $Proxy_OK wget ${GitProxy}https://github.com/fatedier/frp/releases/download/$frp_Ver/$frp_File ${wget_option} || Echo_ERROR \"$frp_File download failed\"\n        tar -zxvf $frp_File > /dev/null 2>&1\n        cd $frp_Dir && Echo_INFOR \"frp is already installed in $T_Dir/frp/$frp_Dir\" || Echo_ERROR3\n        rm -rf $T_Dir/frp/$frp_File > /dev/null 2>&1\n    fi\n\n}\n\n# -nps\nnps_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            nps_File=$nps_File_amd64\n            ;;\n        *\"linux-arm64\"*)\n            nps_File=$nps_File_arm64\n            ;;\n    esac\n\n    name=\"nps\"\n    echo -e \"\\033[1;33m\\n>> Installing $name\\n\\033[0m\"\n\n    if test -d $T_Dir/nps\n    then\n        Echo_INFOR \"$name is already installed in $T_Dir/nps\"\n    else\n        mkdir -p $T_Dir/nps && cd $T_Dir/nps && $Proxy_OK wget ${GitProxy}https://github.com/ehang-io/nps/releases/download/$nps_Ver/$nps_File ${wget_option} || Echo_ERROR \"$nps_File download failed\"\n        tar -zxvf $nps_File > /dev/null 2>&1\n        chmod +x $T_Dir/nps/nps && $T_Dir/nps/nps install > /dev/null 2>&1\n        $T_Dir/nps/nps -version > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $nps_Ver in the $T_Dir/nps\" || Echo_ERROR3\n        rm -f $T_Dir/nps/$nps_File > /dev/null 2>&1\n    fi\n\n}\n\n# -rg\nRedGuard_Install(){\n\n    name=\"RedGuard\"\n    which RedGuard > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/rg && cd /tmp/rg && $Proxy_OK wget ${GitProxy}https://github.com/wikiZ/RedGuard/releases/download/$RedGuard_Ver/$RedGuard_File_amd64 ${wget_option} || Echo_ERROR2\n        mv --force $RedGuard_File_amd64 /usr/local/bin/RedGuard && chmod +x /usr/local/bin/RedGuard\n        which RedGuard > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the /usr/local/bin/\" || Echo_ERROR3\n        rm -f /tmp/rg > /dev/null 2>&1\n    fi\n\n}\n\n# -sliver-server\nsliver-server_Install(){\n\n    name=\"sliver-server\"\n    echo -e \"\\033[1;33m\\n>> Installing $name\\n\\033[0m\"\n\n    if test -e /root/sliver-server\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        Rm_Lock\n        case $Linux_Version in\n            *\"CentOS\"*|*\"RedHat\"*|*\"Fedora\"*|*\"AlmaLinux\"*|*\"VzLinux\"*|*\"Rocky\"*)\n                Install_Switch \"git\"\n                Install_Switch \"gcc\"\n                Install_Switch \"gcc-c++\"\n                Install_Switch \"make\"\n                Install_Switch \"mingw64-gcc\"\n                ;;\n            *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n                Install_Switch \"git\"\n                Install_Switch \"build-essential\"\n                Install_Switch \"mingw-w64\"\n                Install_Switch \"binutils-mingw-w64\"\n                Install_Switch \"g++-mingw-w64\"\n                ;;\n            *) ;;\n        esac\n\n        mkdir -p /tmp/sliver-server && cd /tmp/sliver-server && $Proxy_OK wget ${GitProxy}https://github.com/BishopFox/sliver/releases/download/$sliver_Ver/$sliver_bin_Server ${wget_option} || Echo_ERROR2\n        mv --force $sliver_bin_Server /root/sliver-server && chmod 755 /root/sliver-server\n        /root/sliver-server unpack --force && Echo_INFOR \"Successfully installed $name in the /root/sliver-server\" || Echo_ERROR3\n        rm -f /tmp/sliver-server > /dev/null 2>&1\n\n        # systemd\n        Echo_INFOR \"Configuring systemd service ...\"\ncat > /etc/systemd/system/sliver.service <<-EOF\n[Unit]\nDescription=Sliver\nAfter=network.target\nStartLimitIntervalSec=0\n\n[Service]\nType=simple\nRestart=on-failure\nRestartSec=3\nUser=root\nExecStart=/root/sliver-server daemon\n\n[Install]\nWantedBy=multi-user.target\nEOF\n        chown root:root /etc/systemd/system/sliver.service\n        chmod 600 /etc/systemd/system/sliver.service\n\n        Echo_INFOR \"systemctl start sliver\"\n        systemctl start sliver\n\n        # Generate local configs\n        Echo_INFOR \"Generating operator configs ...\"\n        mkdir -p /root/.sliver-client/configs\n        /root/sliver-server operator --name root --lhost localhost --save /root/.sliver-client/configs\n        chown -R root:root /root/.sliver-client/\n\n        USER_DIRS=(/home/*)\n        for USER_DIR in \"${USER_DIRS[@]}\"; do\n            USER=$(basename \"$USER_DIR\")\n            if id -u \"$USER\" >/dev/null 2>&1; then\n                Echo_INFOR \"Generating operator configs for user $USER...\"\n                mkdir -p $USER_DIR/.sliver-client/configs\n                /root/sliver-server operator --name \"$USER\" --lhost localhost --save \"$USER_DIR/.sliver-client/configs\"\n                chown -R \"$USER\":\"$(id -gn \"$USER\")\" \"$USER_DIR/.sliver-client/\"\n            fi\n        done\n\n    fi\n\n    sliver-client_Install\n\n}\n\nsliver-client_Install(){\n\n    name=\"sliver-client\"\n    echo -e \"\\033[1;33m\\n>> Installing $name\\n\\033[0m\"\n\n    which sliver > /dev/null 2>&1\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/sliver-client && cd /tmp/sliver-client && $Proxy_OK wget ${GitProxy}https://github.com/BishopFox/sliver/releases/download/$sliver_Ver/$sliver_bin_Client ${wget_option} || Echo_ERROR2\n        mv --force $sliver_bin_Client /usr/local/bin/sliver && chmod 755 /usr/local/bin/sliver\n        which sliver > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the /usr/local/bin/sliver\" || Echo_ERROR3\n    fi\n\n}\n\n# -yakit\nyakit_Install(){\n\n    name=\"yakit\"\n    echo -e \"\\033[1;33m\\n>> Installing $name\\n\\033[0m\"\n    which yak > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/yakit && cd /tmp/yakit && rm -f yak_linux_amd64 && $Proxy_OK wget ${GitProxy2}https://yaklang.oss-cn-beijing.aliyuncs.com/yak/latest/yak_linux_amd64 ${wget_option} || Echo_ERROR2\n        mv --force yak_linux_amd64 /usr/local/bin/yak && chmod +x /usr/local/bin/yak\n        rm -rf /tmp/yakit && cd /tmp\n        which yak > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the /usr/local/bin/\" || Echo_ERROR3\n    fi\n\n}\n\n# -wpscan\nwpscan_Install(){\n\n    name=\"wpscan\"\n    echo -e \"\\033[1;33m\\n>> Installing $name\\n\\033[0m\"\n    which wpscan > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        gem update --system\n        gem install wpscan\n    fi\n\n}\n\n# -wx\nwx_Install(){\n\n    name=\"wxappUnpacker\"\n    dir=\"$P_Dir/wxappUnpacker\"\n    echo -e \"\\033[1;33m\\n>> Installing $name\\n\\033[0m\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        mkdir -p $dir\n        mkdir -p /tmp/wxappUnpacker && cd $dir && $Proxy_OK wget ${GitProxy}https://github.com/No-Github/Archive/releases/download/wx/wxappUnpacker.zip ${wget_option} || Echo_ERROR2\n        unzip wxappUnpacker.zip > /dev/null 2>&1\n        mv wxappUnpacker/* $dir && Echo_INFOR \"Successfully installed $name in the $dir\" || Echo_ERROR3\n        rm -rf /tmp/wxappUnpacker && cd /tmp\n    fi\n\n    echo -e \"\\033[1;33m\\n>> Installing npm package\\n\\033[0m\"\n    cd $dir\n    npm install\n    npm install esprima\n    npm install css-tree\n    npm install cssbeautify\n    npm install vm2\n    npm install uglify-es\n    npm install js-beautify\n\n}\n\n# -suricata\nsuricata_Install(){\n\n    name=\"suricata\"\n    echo -e \"\\033[1;33m\\n>> Installing $name\\n\\033[0m\"\n\n    case $Linux_Version in\n        *\"CentOS\"*|*\"RedHat\"*|*\"Fedora\"*|*\"AlmaLinux\"*|*\"VzLinux\"*|*\"Rocky\"*)\n            Echo_ERROR \"The script currently supports only Debian installations of suricata,bye bye~\\n\"\n            exit 1\n            ;;\n        *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n            Rm_Lock\n            add-apt-repository ppa:oisf/suricata-stable\n            Install_Switch \"jq\"\n            Install_Switch \"suricata\"\n            Install_Switch \"suricata-update\"\n            suricata-update && Echo_INFOR \"Updated suricata rules\" || Echo_ERROR \"Failure to update suricata rules\"\n            ;;\n        *) ;;\n    esac\n\n}\n\n# -ssr\nssr_Install(){\n\n    name=\"ssr\"\n    echo -e \"\\033[1;33m\\n>> Installing $name\\n\\033[0m\"\n\n    if test -d $T_Dir/shadowsocksr\n    then\n        Echo_ALERT \"$name is already installed in $T_Dir/shadowsocksr\"\n    else\n        cd $T_Dir && rm -f ssr.zip > /dev/null 2>&1 && wget https://cdn.jsdelivr.net/gh/No-Github/Archive@1.0.3/ssr/ssr.zip > /dev/null 2>&1\n        unzip -P 123456 ssr.zip > /dev/null 2>&1 && rm -f ssr.zip > /dev/null 2>&1\n        cd shadowsocksr && bash initcfg.sh && Echo_INFOR \"Successfully installed ssr\" || Echo_ERROR \"ssr installation failed\"\n        Echo_INFOR \"Run the following command to modify the ssr configuration:\\n\\033[0m\\033[1;32mvim $T_Dir/shadowsocksr/user-config.json\\n\"\n        Echo_INFOR \"Run the following command to enable the ssr service:\\n\\033[0m\\033[1;32mcd $T_Dir/shadowsocksr/shadowsocks/ && python local.py\"\n    fi\n\n}\n\n# -zsh\nzsh_Install(){\n\n    name=\"zsh\"\n    echo -e \"\\033[1;33m\\n>> Installing $name\\n\\033[0m\"\n\n    Echo_INFOR \"The current system shell presence is as follows:\"\n    cat /etc/shells\n    echo -e \"\"\n\n    Echo_INFOR \"The current default shell is:\"\n    echo -e $SHELL\n    echo -e \"\"\n\n    zsh --version > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"zsh installed\"\n    else\n        Rm_Lock\n        Echo_INFOR \"Installing zsh\"\n        Install_Switch \"zsh\"\n    fi\n\n    Echo_INFOR \"Configuring Oh My Zsh\"\n\n    if [ $Proxy_OK == proxychains4 ] 2>> /tmp/f8x_error.log\n    then\n        $Proxy_OK wget https://raw.githubusercontent.com/No-Github/Archive/master/zsh/install.sh > /dev/null 2>&1\n        $Proxy_OK bash install.sh\n        $Proxy_OK exec zsh -l\n    else\n        wget https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh > /dev/null 2>&1\n        Echo_INFOR \"Please exit the subshell environment manually when you see ➜ ~ to continue the installation\"\n        sleep 1\n        bash install.sh\n    fi\n\n    cat ~/.zshrc | sed \"s/robbyrussell/agnoster/\" >> ~/.zshrc\n\n    $Proxy_OK git clone --depth 1 ${GitProxy}https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n    cat ~/.zshrc | sed \"s/git/git zsh-syntax-highlighting/\" >> ~/.zshrc\n\n    $Proxy_OK git clone --depth 1 ${GitProxy}https://github.com/zsh-users/zsh-autosuggestions ~/.zsh/zsh-autosuggestions\n    echo 'source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh' >>~/.zshrc\n\n    echo -e \"\\033[1;33m\\n>> Do you need to configure powerlevel10k theme [Y/n,Default Y] \\033[0m\" && read -r input\n    case $input in\n        [nN][oO]|[nN])\n            Echo_INFOR \"Pass~\"\n            ;;\n        *)\n            $Proxy_OK git clone --depth 1 ${GitProxy}--depth=1 https://github.com/romkatv/powerlevel10k.git ~/powerlevel10k\n            echo 'source ~/powerlevel10k/powerlevel10k.zsh-theme' >>~/.zshrc\n            Echo_ALERT \"If you don't need it, you can delete the last few lines of powerlevel10k in ~/.zshrc file\"\n            ;;\n    esac\n\n    Echo_INFOR \"Over,Please reopen a shell to see the effect~\"\n\n}\n\n# -optimize\noptimize_setting(){\n\n    echo -e \"\\033[1;33m\\n>> In sync\\n\\033[0m\"\n    sync && Echo_INFOR \"sync\"\n    echo -e \"\\033[1;33m\\n>> Cache being released\\n\\033[0m\"\n    echo 1 > /proc/sys/vm/drop_caches && Echo_INFOR \"Cleared pagecache\"\n    echo 2 > /proc/sys/vm/drop_caches && Echo_INFOR \"Cleared dentries and inodes\"\n    echo 3 > /proc/sys/vm/drop_caches && Echo_INFOR \"Cleared pagecache、dentries and inodes\"\n    sync\n    echo -e \"\\033[1;33m\\n>> The limit on the number of open files is being removed\\n\\033[0m\"\n    ulimit -n 65535 && Echo_INFOR \"ulimit -n 65535\"\n    ulimit -u 65535 && Echo_INFOR \"ulimit -u 65535\"\n    echo -e \"\\033[1;33m\\n>> Memory settings are being optimized\\n\\033[0m\"\n    echo 128 > /proc/sys/vm/nr_hugepages > /dev/null 2>&1\n    sysctl -w vm.nr_hugepages=128 > /dev/null 2>&1 && Echo_INFOR \"vm.nr_hugepages=128\"\n\n}\n\n# -info\nSystem_info(){\n\n    rm -f /tmp/f8x_info.log > /dev/null 2>&1\n\n    date +\"%Y-%m-%d\" > /tmp/f8x_info.log\n\n    echo -e \"\\033[1;33m\\n>> System Info\\n\\033[0m\"\n\n    Echo_INFOR \"Current User:\"\n    w\n\n    echo -e \"\" && Echo_INFOR \"Current system administrator:\"\n    awk -F: '($3 == \"0\") {print}' /etc/passwd\n\n    echo -e \"\" && Echo_INFOR \"Last logins:\"\n    last\n\n    echo -e \"\\033[1;33m\\n>> Hardware Info\\n\\033[0m\"\n\n    Echo_INFOR \"Current Kernel Version:\"\n    uname -r\n\n    echo -e \"\" && Echo_INFOR \"Current CPU info:\"\n    case $Running_Mode in\n        *\"Darwin\"*)\n            sysctl -n machdep.cpu.brand_string\n            ;;\n        *\"Linux\"*)\n            cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq\n            ;;\n    esac\n\n    echo -e \"\" && Echo_INFOR \"Current CPU Usage:\"\n    uptime\n\n    awk '$0 ~/cpu[0-9]/' /proc/stat 2>/dev/null | while read line; do\n\techo \"$line\" | awk '{total=$2+$3+$4+$5+$6+$7+$8;free=$5;\\\n        print$1\" Free \"free/total*100\"%\",\\\n        \"Used \" (total-free)/total*100\"%\"}'\n    done\n\n    echo -e \"\" && Echo_INFOR \"Current CPU cores:\"\n    case $Running_Mode in\n        *\"Darwin\"*)\n            sysctl -n machdep.cpu.core_count\n            ;;\n        *\"Linux\"*)\n            cat /proc/cpuinfo | grep 'processor' | sort | uniq | wc -l\n            ;;\n    esac\n\n    echo -e \"\\033[1;33m\\n>> Resource Usage\\n\\033[0m\"\n\n    Echo_INFOR \"Current Memory Usage:\"\n    case $Running_Mode in\n        *\"Darwin\"*)\n            top -l 1 | head -n 10 | grep PhysMem\n            ;;\n        *\"Linux\"*)\n            free -h\n            ;;\n    esac\n\n    echo -e \"\" && Echo_INFOR \"The 10 processes that use the most CPU resources:\"\n    case $Running_Mode in\n        *\"Darwin\"*)\n            ps aux | sort -nr -k 3 | head -10\n            ;;\n        *\"Linux\"*)\n            ps auxf |sort -nr -k 3 |head -10\n            ;;\n    esac\n\n    echo -e \"\" && Echo_INFOR \"The 10 processes that use the most memory resources:\"\n    case $Running_Mode in\n        *\"Darwin\"*)\n            ps aux | sort -nr -k 4 | head -10\n            ;;\n        *\"Linux\"*)\n            ps auxf |sort -nr -k 4 |head -10\n            ;;\n    esac\n\n    echo -e \"\" && Echo_INFOR \"Disk space utilization:\"\n    df -h\n\n    df_a1=$(df -h|sed '1d'|awk '{print $5}'|sed 's/%//g'|sed -n 1p)\n    df_a2=$(df -h|sed '1d'|awk '{print $5}'|sed 's/%//g'|sed -n 2p)\n    df_a3=$(df -h|sed '1d'|awk '{print $5}'|sed 's/%//g'|sed -n 3p)\n    df_a4=$(df -h|sed '1d'|awk '{print $5}'|sed 's/%//g'|sed -n 4p)\n\n    df_b1=$(df -h|sed 1d|awk '{print $1}'|sed -n 1p)\n    df_b2=$(df -h|sed 1d|awk '{print $1}'|sed -n 2p)\n    df_b3=$(df -h|sed 1d|awk '{print $1}'|sed -n 3p)\n    df_b4=$(df -h|sed 1d|awk '{print $1}'|sed -n 4p)\n\n    if [ $df_a1 -gt 69 ];then Echo_ERROR \"$DAY $df_b1 over 70% usage !!!!!\"; fi\n    if [ $df_a2 -gt 69 ];then Echo_ERROR \"$DAY $df_b2 over 70% usage !!!!!\"; fi\n    if [ $df_a3 -gt 69 ];then Echo_ERROR \"$DAY $df_b3 over 70% usage !!!!!\"; fi\n    if [ $df_a4 -gt 69 ];then Echo_ERROR \"$DAY $df_b4 over 70% usage !!!!!\"; fi\n\n    echo -e \"\" && Echo_INFOR \"Available Device Info:\"\n    case $Running_Mode in\n        *\"Darwin\"*)\n            diskutil list\n            ;;\n        *\"Linux\"*)\n            lsblk\n            ;;\n    esac\n\n    case $Running_Mode in\n        *\"Linux\"*)\n            echo -e \"\" && Echo_INFOR \"Current swap partition usage: (empty means no swap partition is configured)\"\n            swapon -s 2>> /tmp/f8x_error.log\n            echo -e \"\" && Echo_INFOR \"Mount Status:\"\n            more /etc/fstab  | grep -v \"^#\" | grep -v \"^$\"\n            ;;\n    esac\n\n    echo -e \"\\033[1;33m\\n>> Network Status\\n\\033[0m\"\n\n    Echo_INFOR \"Current IP address:\"\n    case $Running_Mode in\n        *\"Darwin\"*)\n            ifconfig | grep inet | grep -v \"inet6\" | grep -v \"127.0.0.1\" | awk '{ print $2; }' | tr '\\n' '\\t'\n            ;;\n        *\"Linux\"*)\n            ip addr | grep inet | grep -v \"inet6\" | grep -v \"127.0.0.1\" | awk '{ print $2; }' | tr '\\n' '\\t'\n            ;;\n    esac\n\n    case $Running_Mode in\n        *\"Linux\"*)\n            echo -e \"\" && Echo_INFOR \"Current TCP connection:\"\n            cat  /proc/net/tcp | wc -l\n            echo -e \"\" && Echo_INFOR \"Routing forward status:\"\n            ip_forward=$(more /proc/sys/net/ipv4/ip_forward | awk -F: '{if ($1==1) print \"1\"}')\n            if [ -n \"$ip_forward\" ]; then\n                echo \"Route forward is enabled\"\n            else\n                echo \"Route forward is not enabled\"\n            fi\n            ;;\n    esac\n\n    echo -e \"\\n\" && Echo_INFOR \"Current routing table:\"\n    case $Running_Mode in\n        *\"Darwin\"*)\n            netstat -nr\n            ;;\n        *\"Linux\"*)\n            ip route 2>> /tmp/f8x_error.log || route -n 2>> /tmp/f8x_error.log\n            ;;\n    esac\n\n    echo -e \"\" && Echo_INFOR \"Listening port:\"\n    case $Running_Mode in\n        *\"Darwin\"*)\n            netstat -anvp tcp\n            netstat -anvp udp\n            ;;\n        *\"Linux\"*)\n            netstat -tunlp 2>> /tmp/f8x_error.log || ss -tnlp 2>> /tmp/f8x_error.log\n            ;;\n    esac\n\n    echo -e \"\\033[1;33m\\n>> Identity Information\\n\\033[0m\"\n\n    Echo_INFOR \"All system users:\"\n    echo -e \"\\n\\n\\n>> All system users: \" >> /tmp/f8x_info.log\n    cut -d: -f1 /etc/passwd >> /tmp/f8x_info.log && echo -e \"Due to more echoes, it has been output to /tmp/f8x_info.log\"\n\n    echo -e \"\" && Echo_INFOR \"System Super User:\"\n    grep -v -E \"^#\" /etc/passwd | awk -F: '$3 == 0 { print $1}'\n\n    case $Running_Mode in\n        *\"Linux\"*)\n            echo -e \"\" && Echo_INFOR \"Account information for remote login:\"\n            awk '/\\$1|\\$6/{print $1}' /etc/shadow\n            echo -e \"\" && Echo_INFOR \"Startup service:\"\n            echo -e \"\\n\\n\\n>> Startup service: \" >> /tmp/f8x_info.log\n            systemctl list-unit-files | grep enabled >> /tmp/f8x_info.log && echo -e \"Due to more echoes, it has been output to /tmp/f8x_info.log\"\n            ;;\n    esac\n\n    echo -e \"\" && Echo_INFOR \"All groups in the system:\"\n    echo -e \"\\n\\n\\n>> All groups in the system: \" >> /tmp/f8x_info.log\n    cut -d: -f1,2,3 /etc/group >> /tmp/f8x_info.log && echo -e \"Due to more echoes, it has been output to /tmp/f8x_info.log\"\n\n    echo -e \"\" && Echo_INFOR \"Scheduled tasks for the current user:\"\n    crontab -l\n\n    echo -e \"\" && Echo_INFOR \"Resource limits for currently logged-in users:\"\n    ulimit -a\n\n    echo -e \"\\033[1;33m\\n>> Security Information\\033[0m\"\n\n    echo -e \"\" && Echo_INFOR \"Environment Variables:\"\n    echo -e \"\\n\\n\\n>> Environment Variables: \" >> /tmp/f8x_info.log\n    env >> /tmp/f8x_info.log && echo -e \"Output to /tmp/f8x_info.log\"\n\n    case $Linux_Version in\n        *\"CentOS\"*|*\"RedHat\"*|*\"Fedora\"*|*\"AlmaLinux\"*|*\"VzLinux\"*|*\"Rocky\"*)\n            echo -e \"\" && Echo_INFOR \"Check all rpm packages to see which commands have been replaced:\"\n            rpm -Va\n            ;;\n        *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n            echo -e \"\" && Echo_INFOR \"View repository key:\"\n            echo -e \"\\n\\n\\n>> View repository key: \" >> /tmp/f8x_info.log\n            apt-key list 1>> /tmp/f8x_info.log 2>> /tmp/f8x_error.log && echo -e \"Output to /tmp/f8x_info.log\"\n            ;;\n    esac\n\n}\n\n# -clear\nclear_log(){\n\n    echo -e \"\\033[1;33m\\n>> System usage traces are being cleaned\\n\\033[0m\"\n\n    cat /dev/null > /var/log/auth.log && Echo_INFOR \"cat /dev/null > /var/log/auth.log\"\n    cat /dev/null > /var/log/kern.log && Echo_INFOR \"cat /dev/null > /var/log/kern.log\"\n    cat /dev/null > /var/log/cron.log && Echo_INFOR \"cat /dev/null > /var/log/cron.log\"\n    cat /dev/null > /var/log/mysqld.log && Echo_INFOR \"cat /dev/null > /var/log/mysqld.log\"\n    cat /dev/null > /var/log/system.log && Echo_INFOR \"cat /dev/null > /var/log/system.log\"\n\n    cat /dev/null > /var/log/boot.log && Echo_INFOR \"cat /dev/null > /var/log/boot.log\"\n    cat /dev/null > /var/log/yum.log && Echo_INFOR \"cat /dev/null > /var/log/yum.log\"\n    cat /dev/null > /var/log/mail.info && Echo_INFOR \"cat /dev/null > /var/log/mail.info\"\n    cat /dev/null > /var/log/wpa_supplicant.log && Echo_INFOR \"cat /dev/null > /var/log/wpa_supplicant.log\"\n\n    cat /dev/null > /var/log/btmp && Echo_INFOR \"cat /dev/null > /var/log/btmp\"\n    cat /dev/null > /var/log/cron && Echo_INFOR \"cat /dev/null > /var/log/cron\"\n    cat /dev/null > /var/log/dmesg && Echo_INFOR \"cat /dev/null > /var/log/dmesg\"\n    cat /dev/null > /var/log/firewalld && Echo_INFOR \"cat /dev/null > /var/log/firewalld\"\n    cat /dev/null > /var/log/grubby && Echo_INFOR \"cat /dev/null > /var/log/grubby\"\n    cat /dev/null > /var/log/lastlog && Echo_INFOR \"cat /dev/null > /var/log/lastlog\"\n    cat /dev/null > /var/log/maillog && Echo_INFOR \"cat /dev/null > /var/log/maillog\"\n    cat /dev/null > /var/log/messages && Echo_INFOR \"cat /dev/null > /var/log/messages\"\n    cat /dev/null > /var/log/secure && Echo_INFOR \"cat /dev/null > /var/log/secure\"\n    cat /dev/null > /var/log/spooler && Echo_INFOR \"cat /dev/null > /var/log/spooler\"\n    cat /dev/null > /var/log/syslog && Echo_INFOR \"cat /dev/null > /var/log/syslog\"\n    cat /dev/null > /var/log/tallylog && Echo_INFOR \"cat /dev/null > /var/log/tallylog\"\n    cat /dev/null > /var/log/wtmp && Echo_INFOR \"cat /dev/null > /var/log/wtmp\"\n    cat /dev/null > /var/log/utmp && Echo_INFOR \"cat /dev/null > /var/log/utmp\"\n\n    cat /dev/null > ~/.bash_history && Echo_INFOR \"cat /dev/null > ~/.bash_history\"\n    cat /dev/null > ~/.zsh_history && Echo_INFOR \"cat /dev/null > ~/.zsh_history\"\n\n    Echo_INFOR \"Cleaned up\"\n\n}\n\n# -remove\nremove_watcher(){\n\n    echo -e \"\\033[1;33m\\n>> Uninstall some vps cloud monitoring\\n\\033[0m\"\n\n    if ps aux | grep -i '[a]liyun'\n    then\n        # 卸载阿里云盾和监控服务\n        /etc/init.d/aegis uninstall\n        wget \"http://update2.aegis.aliyun.com/download/uninstall.sh\" && chmod +x uninstall.sh && ./uninstall.sh\n        wget http://update.aegis.aliyun.com/download/uninstall.sh && chmod +x uninstall.sh && ./uninstall.sh\n        wget http://update.aegis.aliyun.com/download/quartz_uninstall.sh && chmod +x quartz_uninstall.sh && ./quartz_uninstall.sh\n\n        sudo pkill aliyun-service\n        killall -9 aliyun-service\n        sudo pkill AliYunDun\n        killall -9 AliYunDun\n        sudo rm -fr /etc/init.d/agentwatch /usr/sbin/aliyun-service\n        sudo rm -rf /usr/local/aegis*\n        systemctl stop aliyun.service\n        systemctl disable aliyun.service\n\n        # 屏蔽云盾 IP，用包过滤屏蔽如下 IP\n        iptables -I INPUT -s 100.100.30.1/28 -j DROP\n        iptables -I INPUT -s 140.205.201.0/28 -j DROP\n        iptables -I INPUT -s 140.205.201.16/29 -j DROP\n        iptables -I INPUT -s 140.205.201.32/28 -j DROP\n        iptables -I INPUT -s 140.205.225.192/29 -j DROP\n        iptables -I INPUT -s 140.205.225.200/30 -j DROP\n        iptables -I INPUT -s 140.205.225.184/29 -j DROP\n        iptables -I INPUT -s 140.205.225.183/32 -j DROP\n        iptables -I INPUT -s 140.205.225.206/32 -j DROP\n        iptables -I INPUT -s 140.205.225.205/32 -j DROP\n        iptables -I INPUT -s 140.205.225.195/32 -j DROP\n        iptables -I INPUT -s 140.205.225.204/32 -j DROP\n        service iptables save\n        service iptables restart\n\n        rm -rf /etc/init.d/agentwatch /usr/sbin/aliyun-service\n        rm -rf /usr/local/aegis*\n        systemctl stop aliyun.service\n        systemctl disable aliyun.service\n        service bcm-agent stop\n        yum remove bcm-agent -y\n        apt-get remove bcm-agent -y\n\n        # 卸载云监控 Java 版本插件\n        sudo /usr/local/cloudmonitor/wrapper/bin/cloudmonitor.sh stop\n        sudo /usr/local/cloudmonitor/wrapper/bin/cloudmonitor.sh remove\n        sudo rm -rf /usr/local/cloudmonitor\n    elif ps aux | grep -i '[y]unjing'\n    then\n        # 卸载腾讯云镜\n        process=(sap100 secu-tcs-agent sgagent64 barad_agent agent agentPlugInD pvdriver )\n        for i in ${process[@]}\n        do\n            for A in $(ps aux | grep $i | grep -v grep | awk '{print $2}')\n            do\n                kill -9 $A\n            done\n        done\n        chkconfig --level 35 postfix off\n        service postfix stop\n        /usr/local/qcloud/stargate/admin/stop.sh\n        /usr/local/qcloud/stargate/admin/uninstall.sh\n        /usr/local/qcloud/YunJing/uninst.sh\n        /usr/local/qcloud/monitor/barad/admin/stop.sh\n        /usr/local/qcloud/monitor/barad/admin/uninstall.sh\n\n        rm -rf /usr/local/qcloud/\n        rm -rf /usr/local/sa/\n        rm -rf /usr/local/agenttools\n        rm -f /etc/cron.d/sgagenttask\n    fi\n\n    Echo_INFOR \"Uninstallation completed\"\n\n}\n\n# -swap\nswap_setting(){\n\n    echo -e \"\\033[1;33m\\n>> Swap partition configuration in progress\\n\\033[0m\"\n    Echo_INFOR \"The current swap partition usage is as follows: (Empty means no swap partition is configured)\"\n    swapon -s 2>> /tmp/f8x_error.log\n\n    if test -e /home/f8xswap\n    then\n        Echo_ALERT \"/home/f8xswap file already exists\"\n        exit 1\n    fi\n\n    echo -e \"\\033[5;33m\\nPlease enter the size of the swap partition(Unit is G) [Default 4G]\\033[0m\" && read -r input\n\n    VALID_CHECK=$(echo \"$input\"|awk -F. '$1>0&&$1<=254{print \"yes\"}')\n    if [ \"${VALID_CHECK:-no}\" == \"yes\" ]; then\n        echo -e \"\\033[1;32m\\n>> ${input}G\\033[0m\"\n        swap_bin=`expr ${input} \\* 1024`\n    else\n        echo -e \"\\033[1;32m\\n>> The default size will be used\\033[0m\"\n        swap_bin=\"4096\"\n    fi\n\n    echo -e \"\\033[1;33m\\n>> Swap file being created, time varies with size\\n\\033[0m\"\n    dd if=/dev/zero of=/home/f8xswap bs=1M count=$swap_bin && Echo_INFOR \"Created swap in the /home/f8xswap\"\n    mkswap /home/f8xswap 1> /dev/null\n    swapon /home/f8xswap 1> /dev/null && Echo_INFOR \"Mounted file partition /home/f8xswap\"\n    echo -e \"\\n/home/f8xswap swap swap default 0 0\" >> /etc/fstab\n    Echo_INFOR \"The current swap partition usage is as follows: (Empty means no swap partition is configured)\"\n    swapon -s 2>> /tmp/f8x_error.log\n\n}\n\n# -asciinema\nasciinema_Install(){\n\n    name=\"asciinema\"\n    echo -e \"\\033[1;33m\\n>> Installing $name\\n\\033[0m\"\n\n    asciinema --version > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        Install_Switch4 \"asciinema\"\n        asciinema --version > /dev/null 2>&1\n\n        if [ $? == 0 ]\n        then\n            Echo_INFOR \"pip is very useful, isn't it :)\"\n        else\n            Echo_ERROR \"pip3 failed to install $name, about to switch to package manager to install\"\n            Rm_Lock\n            Install_Switch \"asciinema\"\n        fi\n\n    fi\n    Echo_INFOR \"Run the following command to enable screenshots:\"\n    Echo_INFOR \"asciinema rec\"\n\n}\n\n# -bt\nbt_Install(){\n\n    echo -e \"\\033[1;33m\\n>> Installing 宝塔 Linux 面板\\n\\033[0m\"\n\n    case $Linux_Version in\n        *\"CentOS\"*|*\"RedHat\"*|*\"Fedora\"*|*\"AlmaLinux\"*|*\"VzLinux\"*|*\"Rocky\"*)\n            mkdir -p /tmp/bt && cd /tmp/bt && curl -o install.sh http://download.bt.cn/install/install_6.0.sh && sh install.sh\n            ;;\n        *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n            mkdir -p /tmp/bt && cd /tmp/bt && curl -o install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh && sudo bash install.sh\n            ;;\n        *) ;;\n    esac\n\n}\n\n# -aa\naaPanel_Install(){\n\n    echo -e \"\\033[1;33m\\n>> Installing aaPanel\\n\\033[0m\"\n\n    case $Linux_Version in\n        *\"CentOS\"*|*\"RedHat\"*|*\"Fedora\"*|*\"AlmaLinux\"*|*\"VzLinux\"*|*\"Rocky\"*)\n            mkdir -p /tmp/aaPanel && cd /tmp/aaPanel && curl -o install.sh http://www.aapanel.com/script/install_6.0_en.sh && bash install.sh aapanel\n            ;;\n        *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n            mkdir -p /tmp/aaPanel && cd /tmp/aaPanel && curl -o install.sh http://www.aapanel.com/script/install-ubuntu_6.0_en.sh && sudo bash install.sh aapanel\n            ;;\n        *) ;;\n    esac\n\n}\n\n# -1panel\n1Panel_Install(){\n\n    echo -e \"\\033[1;33m\\n>> Installing 1Panel\\n\\033[0m\"\n\n    mkdir -p /tmp/1panel && cd /tmp/1panel && curl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o quick_start.sh && bash quick_start.sh\n\n}\n\n# -clash\nclash_Install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            clash_File=$clash_File_amd64\n            clash_bin=$clash_bin_amd64\n            ;;\n        *\"linux-arm64\"*)\n            clash_File=$clash_File_arm64\n            clash_bin=$clash_bin_arm64\n            ;;\n    esac\n\n    name=\"clash\"\n    echo -e \"\\033[1;33m\\n>> Installing $name\\n\\033[0m\"\n    clash -v > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n        Echo_INFOR \"Config Flie: ~/.config/clash/config.yaml\"\n    else\n        mkdir -p /tmp/installclash && cd $_\n        $Proxy_OK wget ${GitProxy}https://github.com/Dreamacro/clash/releases/download/$clash_Ver/$clash_bin > /dev/null 2>&1 || Echo_ERROR2\n        gunzip $clash_bin > /dev/null 2>&1\n        mv --force $clash_File /usr/local/bin/clash && chmod +x /usr/local/bin/clash\n        clash -v > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $clash_Ver in the /usr/local/bin/\" || Echo_ERROR3\n        rm -rf /tmp/installclash && cd /tmp\n    fi\n\n}\n\n# -clash-old\nclash_Install_old(){\n\n    name=\"clash\"\n\n    echo -e \"\\033[1;33m\\n>> Installing $name\\n\\033[0m\"\n\n    clash -v > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n        Echo_INFOR \"如果提示找不到 clash 命令,请尝试输入 source /etc/profile &> /dev/null && clash\"\n    else\n        mkdir -p /tmp/clash_install && cd /tmp/clash_install\n        # https://github.com/juewuy/ShellClash\n        export tmp_url='https://cdn.jsdelivr.net/gh/juewuy/ShellClash@master' && curl -o install.sh $tmp_url/install.sh\n        bash install.sh\n        source /etc/profile &> /dev/null\n        Echo_INFOR \"如果提示找不到 clash 命令,请输入 source /etc/profile &> /dev/null && clash\"\n    fi\n\n}\n\n# Compile and install jq does not run by default\njq_Install(){\n\n    name=\"jq\"\n    which jq > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/jq && cd /tmp/jq && rm -rf ${jq_bin} && $Proxy_OK wget -O ${jq_bin} ${GitProxy}https://github.com/stedolan/jq/releases/download/${jq_ver}/${jq_bin} > /dev/null 2>&1 || Echo_ERROR \"${jq_bin} download failed\"\n        unzip ${jq_bin} > /dev/null 2>&1\n        cd ${jq_dir} && ./configure --prefix=/usr/local && make && make install\n        ls -s /opt/jq/${jq_dir}/jq /usr/local/bin/jq\n        rm -rf /tmp/jq && cd /tmp\n        jq -h > /dev/null 2>&1 && Echo_INFOR \"${name} installed\" || Echo_ERROR3\n    fi\n\n}\n\n# -upgrade\n# 更新已经安装的软件\npentest_tool_upgrade(){\n\n    ffuf -V 1> /dev/null 2>> /dev/null\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"ffuf 已安装,是否需要覆盖更新 ffuf $ffuf_Ver ? [y/N,默认No]\" && read -r input\n        case $input in\n            [yY][eE][sS]|[Yy])\n                rm -rf /usr/local/bin/ffuf > /dev/null 2>&1\n                rm -rf /usr/bin/ffuf > /dev/null 2>&1\n                Pentest_ffuf_Install\n                ;;\n            *)\n                sleep 0.001\n                ;;\n        esac\n    else\n        Echo_ERROR \"ffuf 未安装\"\n        Pentest_ffuf_Install\n    fi\n\n    nuclei -version > /dev/null 2>&1\n    if [ $? == 0 ]\n    then\n        if test -e /tmp/IS_CI\n        then\n            input=\"y\"\n        else\n            nuclei -version\n            Echo_ALERT \"Nuclei 已安装,是否需要覆盖更新 nuclei $Nuclei_Ver ? [y/N,默认No]\" && read -r input\n        fi\n        case $input in\n            [yY][eE][sS]|[Yy])\n                rm -rf /usr/local/bin/nuclei\n                Pentest_Nuclei_Install\n                ;;\n            *)\n                sleep 0.001\n                ;;\n        esac\n    else\n        Echo_ERROR \"Nuclei 未安装\"\n        Pentest_Nuclei_Install\n    fi\n\n    which httpx > /dev/null 2>&1\n    if [ $? == 0 ]\n    then\n        if test -e /tmp/IS_CI\n        then\n            input=\"y\"\n        else\n            httpx -version\n            Echo_ALERT \"httpx 已安装,是否需要覆盖更新 httpx $httpx_Ver ? [y/N,默认No]\" && read -r input\n        fi\n        case $input in\n            [yY][eE][sS]|[Yy])\n                rm -rf /usr/local/bin/httpx\n                Pentest_httpx_Install\n                ;;\n            *)\n                sleep 0.001\n                ;;\n        esac\n    else\n        Echo_ERROR \"httpx 未安装\"\n        Pentest_httpx_Install\n    fi\n\n    naabu -version > /dev/null 2>&1\n    if [ $? == 0 ]\n    then\n        if test -e /tmp/IS_CI\n        then\n            input=\"y\"\n        else\n            naabu -version\n            Echo_ALERT \"naabu 已安装,是否需要覆盖更新 naabu $naabu_Ver ? [y/N,默认No]\" && read -r input\n        fi\n        case $input in\n            [yY][eE][sS]|[Yy])\n                rm -rf /usr/local/bin/naabu\n                Pentest_naabu_Install\n                ;;\n            *)\n                sleep 0.001\n                ;;\n        esac\n    else\n        Echo_ERROR \"naabu 未安装\"\n        Pentest_naabu_Install\n    fi\n\n    which katana > /dev/null 2>&1\n    if [ $? == 0 ]\n    then\n        if test -e /tmp/IS_CI\n        then\n            input=\"y\"\n        else\n            katana -version\n            Echo_ALERT \"katana 已安装,是否需要覆盖更新 katana $katana_Ver ? [y/N,默认No]\" && read -r input\n        fi\n        case $input in\n            [yY][eE][sS]|[Yy])\n                rm -rf /usr/local/bin/katana\n                Pentest_katana_Install\n                ;;\n            *)\n                sleep 0.001\n                ;;\n        esac\n    else\n        Echo_ERROR \"katana 未安装\"\n        Pentest_katana_Install\n    fi\n\n    which subfinder > /dev/null 2>&1\n    if [ $? == 0 ]\n    then\n        if test -e /tmp/IS_CI\n        then\n            input=\"y\"\n        else\n            subfinder -version\n            Echo_ALERT \"subfinder 已安装,是否需要覆盖更新 subfinder $subfinder_Ver ? [y/N,默认No]\" && read -r input\n        fi\n        case $input in\n            [yY][eE][sS]|[Yy])\n                rm -rf /usr/local/bin/subfinder\n                Pentest_subfinder_Install\n                ;;\n            *)\n                sleep 0.001\n                ;;\n        esac\n    else\n        Echo_ERROR \"subfinder 未安装\"\n        Pentest_subfinder_Install\n    fi\n\n}\n\n# -all\nall_Install(){\n\n    Base_Install\n\n    optimize_setting\n\n    Dev_Tools\n\n    Oraclejdk_Install\n\n    nn_Install\n\n    kali_Tools\n\n}\n\n# -d\nDev_Tools(){\n\n    Dev_Base_Install\n    echo -e \"\\033[1;33m\\n>> Installing python3 and pip3\\n\\033[0m\"\n    Python3_def_Install\n    Python2_Install\n    echo -e \"\\033[1;33m\\n>> Installing Go\\n\\033[0m\"\n    Go_Install\n    echo -e \"\\033[1;33m\\n>> Installing Docker and Docker-compose\\n\\033[0m\"\n    Docker_Install\n    echo -e \"\\033[1;33m\\n>> Installing SDKMAN!\\n\\033[0m\"\n    SDKMAN_Install\n\n}\n\n# -f\nFun_Tools(){\n\n    echo -e \"\\033[1;33m\\n>> Installing AdGuardHome DNS\\n\\033[0m\"\n    AdGuardHome_Install\n    echo -e \"\\033[1;33m\\n>> Installing trash-cli\\n\\033[0m\"\n    trash-cli_Install\n    echo -e \"\\033[1;33m\\n>> Installing thefuck\\n\\033[0m\"\n    thefuck_Install\n    echo -e \"\\033[1;33m\\n>> Installing fzf\\n\\033[0m\"\n    fzf_Install\n    echo -e \"\\033[1;33m\\n>> Installing lux\\n\\033[0m\"\n    lux_Install\n    echo -e \"\\033[1;33m\\n>> Installing you-get\\n\\033[0m\"\n    you-get_Install\n    echo -e \"\\033[1;33m\\n>> Installing ffmpeg\\n\\033[0m\"\n    ffmpeg_Install\n    echo -e \"\\033[1;33m\\n>> Installing aria2\\n\\033[0m\"\n    aria2_Install\n    # echo -e \"\\033[1;33m\\n>> Installing filebrowser\\n\\033[0m\"\n    # filebrowser_Install\n    echo -e \"\\033[1;33m\\n>> Installing ttyd\\n\\033[0m\"\n    ttyd_Install\n    echo -e \"\\033[1;33m\\n>> Installing duf\\n\\033[0m\"\n    duf_Install\n    echo -e \"\\033[1;33m\\n>> Installing yq\\n\\033[0m\"\n    yq_Install\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            echo -e \"\\033[1;33m\\n>> Installing starship\\n\\033[0m\"\n            starship_Install\n            echo -e \"\\033[1;33m\\n>> Installing procs\\n\\033[0m\"\n            procs_Install\n            ;;\n    esac\n\n    case $Linux_Version in\n        *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n            echo -e \"\\033[1;33m\\n>> Installing ncdu\\n\\033[0m\"\n            ncdu_Install\n            echo -e \"\\033[1;33m\\n>> Installing exa\\n\\033[0m\"\n            exa_Install\n            echo -e \"\\033[1;33m\\n>> Installing htop\\n\\033[0m\"\n            htop_Install\n            echo -e \"\\033[1;33m\\n>> Installing bat\\n\\033[0m\"\n            bat_Install\n            echo -e \"\\033[1;33m\\n>> Installing fd\\n\\033[0m\"\n            fd_Install\n            ;;\n        *) ;;\n    esac\n\n    echo -e \"\\033[1;33m\\n>> Installing ctop\\n\\033[0m\"\n    ctop_Install\n\n    # vlmcsd_Install\n\n}\n\n# -k\nkali_Tools(){\n\n    echo -e \"\\033[1;33m\\n>> Configuring pentest environment\\n\\033[0m\"\n    Pentest_Base_Install\n    echo -e \"\\033[1;33m\\n>> Downloading AboutSecurity dictionary\\n\\033[0m\"\n    Pentest_Dic_Install\n    echo -e \"\\033[1;33m\\n>> Installing python modules\\n\\033[0m\"\n    Pentest_pip_Install\n\n    case \"$1\" in\n        a)\n            kali_Tools_TypeA\n            ;;\n        b)\n            kali_Tools_TypeB\n            ;;\n        c)\n            kali_Tools_TypeC\n            ;;\n        d)\n            kali_Tools_TypeD\n            ;;\n        e)\n            kali_Tools_TypeE\n            ;;\n        *)\n            echo -e \"\\033[1;33m\\n>> Install misc tools\\n\\033[0m\"\n            Pentest_Misc_Install\n            kali_Tools_TypeA\n            kali_Tools_TypeB\n            kali_Tools_TypeC\n            kali_Tools_TypeD\n            ;;\n    esac\n\n}\n\nkali_Tools_TypeA(){\n\n    echo -e \"\\033[1;33m\\n>> Installing nmap\\n\\033[0m\"\n    Pentest_nmap_Install\n    echo -e \"\\033[1;33m\\n>> Installing ffuf\\n\\033[0m\"\n    Pentest_ffuf_Install\n    echo -e \"\\033[1;33m\\n>> Installing JSFinder\\n\\033[0m\"\n    Pentest_JSFinder_Install\n    echo -e \"\\033[1;33m\\n>> Installing SecretFinder\\n\\033[0m\"\n    Pentest_SecretFinder_Install\n    echo -e \"\\033[1;33m\\n>> Installing OneForAll\\n\\033[0m\"\n    Pentest_OneForAll_Install\n    echo -e \"\\033[1;33m\\n>> Installing masscan\\n\\033[0m\"\n    Pentest_masscan_Install\n    echo -e \"\\033[1;33m\\n>> Installing rad\\n\\033[0m\"\n    Pentest_rad_Install\n    echo -e \"\\033[1;33m\\n>> Installing crawlergo\\n\\033[0m\"\n    Pentest_crawlergo_Install\n    echo -e \"\\033[1;33m\\n>> Installing katana\\n\\033[0m\"\n    Pentest_katana_Install\n    echo -e \"\\033[1;33m\\n>> Installing Arjun\\n\\033[0m\"\n    Pentest_Arjun_Install\n    echo -e \"\\033[1;33m\\n>> Installing httpx\\n\\033[0m\"\n    Pentest_httpx_Install\n    echo -e \"\\033[1;33m\\n>> Installing subfinder\\n\\033[0m\"\n    Pentest_subfinder_Install\n    echo -e \"\\033[1;33m\\n>> Installing apktool\\n\\033[0m\"\n    Pentest_apktool_Install\n    echo -e \"\\033[1;33m\\n>> Installing ApkAnalyser\\n\\033[0m\"\n    Pentest_ApkAnalyser_Install\n    echo -e \"\\033[1;33m\\n>> Installing apkleaks\\n\\033[0m\"\n    Pentest_apkleaks_Install\n    echo -e \"\\033[1;33m\\n>> Installing Diggy\\n\\033[0m\"\n    Pentest_Diggy_Install\n    echo -e \"\\033[1;33m\\n>> Installing AppInfoScanner\\n\\033[0m\"\n    Pentest_AppInfoScanner_Install\n    echo -e \"\\033[1;33m\\n>> Installing Amass\\n\\033[0m\"\n    Pentest_Amass_Install\n    echo -e \"\\033[1;33m\\n>> Installing dirsearch\\n\\033[0m\"\n    Pentest_dirsearch_Install\n    echo -e \"\\033[1;33m\\n>> Installing netspy\\n\\033[0m\"\n    Pentest_netspy_Install\n    echo -e \"\\033[1;33m\\n>> Installing naabu\\n\\033[0m\"\n    Pentest_naabu_Install\n    echo -e \"\\033[1;33m\\n>> Installing ksubdomain\\n\\033[0m\"\n    Pentest_ksubdomain_Install\n    echo -e \"\\033[1;33m\\n>> Installing gau\\n\\033[0m\"\n    Pentest_gau_Install\n    echo -e \"\\033[1;33m\\n>> Installing gobuster\\n\\033[0m\"\n    Pentest_gobuster_Install\n    echo -e \"\\033[1;33m\\n>> Installing fscan\\n\\033[0m\"\n    Pentest_fscan_Install\n    echo -e \"\\033[1;33m\\n>> Installing fingerprintx\\n\\033[0m\"\n    Pentest_fingerprintx_Install\n    echo -e \"\\033[1;33m\\n>> Installing HostCollision\\n\\033[0m\"\n    Pentest_HostCollision_Install\n    echo -e \"\\033[1;33m\\n>> Installing asnmap\\n\\033[0m\"\n    Pentest_asnmap_Install\n    echo -e \"\\033[1;33m\\n>> Installing tlsx\\n\\033[0m\"\n    Pentest_tlsx_Install\n    echo -e \"\\033[1;33m\\n>> Installing gogo\\n\\033[0m\"\n    Pentest_gogo_Install\n\n    # Pentest_gospider_Install\n    # Pentest_dismap_Install\n    # Pentest_htpwdScan_Install\n    # Pentest_WebCrack_Install\n    # Pentest_csprecon_Install\n    # Pentest_zscan_Install\n\n}\n\nkali_Tools_TypeB(){\n\n    echo -e \"\\033[1;33m\\n>> Installing/Update Metasploit\\n\\033[0m\"\n    Pentest_Metasploit_Install\n    echo -e \"\\033[1;33m\\n>> Installing Sqlmap\\n\\033[0m\"\n    Pentest_Sqlmap_Install\n    echo -e \"\\033[1;33m\\n>> Installing xray\\n\\033[0m\"\n    Pentest_xray_Install\n    echo -e \"\\033[1;33m\\n>> Installing Nuclei\\n\\033[0m\"\n    Pentest_Nuclei_Install\n    Pentest_nuclei-templates_Install\n    echo -e \"\\033[1;33m\\n>> Installing w13scan\\n\\033[0m\"\n    Pentest_w13scan_Install\n    echo -e \"\\033[1;33m\\n>> Installing swagger-exp\\n\\033[0m\"\n    Pentest_swagger-exp_Install\n    echo -e \"\\033[1;33m\\n>> Installing swagger-hack\\n\\033[0m\"\n    Pentest_swagger-hack_Install\n    echo -e \"\\033[1;33m\\n>> Installing ysoserial\\n\\033[0m\"\n    Pentest_ysoserial_Install\n    # echo -e \"\\033[1;33m\\n>> Installing ysuserial\\n\\033[0m\"\n    # Pentest_ysuserial_Install\n    echo -e \"\\033[1;33m\\n>> Installing JNDI-Injection-Exploit\\n\\033[0m\"\n    Pentest_JNDI-Injection-Exploit_Install\n    echo -e \"\\033[1;33m\\n>> Installing marshalsec\\n\\033[0m\"\n    Pentest_marshalsec_Install\n    echo -e \"\\033[1;33m\\n>> Installing ysomap\\n\\033[0m\"\n    Pentest_ysomap_Install\n    echo -e \"\\033[1;33m\\n>> Installing SSRFmap\\n\\033[0m\"\n    Pentest_SSRFmap_Install\n    echo -e \"\\033[1;33m\\n>> Installing Gopherus\\n\\033[0m\"\n    Pentest_Gopherus_Install\n    echo -e \"\\033[1;33m\\n>> Installing CDK\\n\\033[0m\"\n    Pentest_CDK_Install\n    # echo -e \"\\033[1;33m\\n>> Installing cf\\n\\033[0m\"\n    # Pentest_cf_Install\n\n    # echo -e \"\\033[1;33m\\n>> Installing testssl.sh\\n\\033[0m\"\n    # Pentest_testssl_Install\n    # echo -e \"\\033[1;33m\\n>> Installing dalfox\\n\\033[0m\"\n    # Pentest_dalfox_Install\n    # Pentest_pocsuite3_Install\n    # Pentest_commix_Install\n    # Pentest_tplmap_Install\n    # Pentest_OpenRedireX_Install\n    # Pentest_CORScanner_Install\n    # Pentest_remote-method-guesser_Install\n    # Pentest_redis-rogue-server_Install\n    # Pentest_redis-rogue-server-win_Install\n    # Pentest_redis-rce_Install\n    # Pentest_redis_lua_exploit_Install\n    # Pentest_shiro_rce_tool_Install\n    # Pentest_shiro-exploit_Install\n    # Pentest_JNDIExploit_Install\n    # Pentest_JNDIExploit_0x727_Install\n\n}\n\nkali_Tools_TypeC(){\n\n    echo -e \"\\033[1;33m\\n>> Installing impacket\\n\\033[0m\"\n    Pentest_Impacket_Install\n    echo -e \"\\033[1;33m\\n>> Installing Responder\\n\\033[0m\"\n    Pentest_Responder_Install\n    echo -e \"\\033[1;33m\\n>> Installing krbrelayx\\n\\033[0m\"\n    Pentest_krbrelayx_Install\n    echo -e \"\\033[1;33m\\n>> Installing bettercap\\n\\033[0m\"\n    Pentest_bettercap_Install\n    echo -e \"\\033[1;33m\\n>> Installing mitmproxy\\n\\033[0m\"\n    Pentest_mitmproxy_Install\n    echo -e \"\\033[1;33m\\n>> Installing pypykatz\\n\\033[0m\"\n    Pentest_pypykatz_Install\n    echo -e \"\\033[1;33m\\n>> Installing CrackMapExec\\n\\033[0m\"\n    Pentest_CrackMapExec_Install\n    echo -e \"\\033[1;33m\\n>> Installing Neo-reGeorg\\n\\033[0m\"\n    Pentest_Neo-reGeorg_Install\n    echo -e \"\\033[1;33m\\n>> Installing suo5\\n\\033[0m\"\n    Pentest_suo5_Install\n    echo -e \"\\033[1;33m\\n>> Installing kerbrute\\n\\033[0m\"\n    Pentest_kerbrute_Install\n    echo -e \"\\033[1;33m\\n>> Installing Adinfo\\n\\033[0m\"\n    Pentest_Adinfo_Install\n    echo -e \"\\033[1;33m\\n>> Installing PetitPotam\\n\\033[0m\"\n    Pentest_PetitPotam_Install\n\n}\n\nkali_Tools_TypeD(){\n\n    echo -e \"\\033[1;33m\\n>> Installing hashcat、7z2hashcat\\n\\033[0m\"\n    Pentest_hashcat_Install\n    echo -e \"\\033[1;33m\\n>> Installing ZoomEye-python\\n\\033[0m\"\n    Pentest_ZoomEye_Install\n    echo -e \"\\033[1;33m\\n>> Installing jadx\\n\\033[0m\"\n    Pentest_jadx_Install\n    echo -e \"\\033[1;33m\\n>> Installing ncat\\n\\033[0m\"\n    Pentest_ncat_Install\n    echo -e \"\\033[1;33m\\n>> Installing mapcidr\\n\\033[0m\"\n    Pentest_mapcidr_Install\n    echo -e \"\\033[1;33m\\n>> Installing dnsx\\n\\033[0m\"\n    Pentest_dnsx_Install\n    echo -e \"\\033[1;33m\\n>> Installing uncover\\n\\033[0m\"\n    Pentest_uncover_Install\n    echo -e \"\\033[1;33m\\n>> Installing nali\\n\\033[0m\"\n    Pentest_nali_Install\n    echo -e \"\\033[1;33m\\n>> Installing anew\\n\\033[0m\"\n    Pentest_anew_Install\n    echo -e \"\\033[1;33m\\n>> Installing gron\\n\\033[0m\"\n    Pentest_gron_Install\n    echo -e \"\\033[1;33m\\n>> Installing Interlace\\n\\033[0m\"\n    Pentest_Interlace_Install\n    echo -e \"\\033[1;33m\\n>> Installing sttr\\n\\033[0m\"\n    Pentest_sttr_Install\n    echo -e \"\\033[1;33m\\n>> Installing unfurl\\n\\033[0m\"\n    Pentest_unfurl_Install\n    echo -e \"\\033[1;33m\\n>> Installing qsreplace\\n\\033[0m\"\n    Pentest_qsreplace_Install\n    echo -e \"\\033[1;33m\\n>> Installing Platypus\\n\\033[0m\"\n    Pentest_Platypus_Install\n    echo -e \"\\033[1;33m\\n>> Installing MoreFind\\n\\033[0m\"\n    Pentest_MoreFind_Install\n    echo -e \"\\033[1;33m\\n>> Installing alterx\\n\\033[0m\"\n    Pentest_alterx_Install\n\n    # Pentest_iprange_Install\n    # Pentest_jwtcat_Install\n    # Pentest_gojwtcrack_Install\n    # Pentest_DomainSplit_Install\n    # Pentest_proxify_Install\n\n}\n\nkali_Tools_TypeE(){\n\n    echo -e \"\\033[1;33m\\n>> Installing SecLists(~500M),longer time, wait patiently\\n\\033[0m\"\n    Pentest_SecLists_Install\n    echo -e \"\\033[1;33m\\n>> Installing Girsh\\n\\033[0m\"\n    Pentest_Girsh_Install\n    echo -e \"\\033[1;33m\\n>> Installing See-SURF\\n\\033[0m\"\n    Pentest_See-SURF_Install\n    echo -e \"\\033[1;33m\\n>> Installing hakrawler\\n\\033[0m\"\n    Pentest_hakrawler_Install\n    echo -e \"\\033[1;33m\\n>> Installing jaeles\\n\\033[0m\"\n    Pentest_jaeles_Install\n    echo -e \"\\033[1;33m\\n>> Installing subjs\\n\\033[0m\"\n    Pentest_subjs_Install\n    echo -e \"\\033[1;33m\\n>> Installing assetfinder\\n\\033[0m\"\n    Pentest_assetfinder_Install\n\n    # Pentest_routersploit_Install\n    # Pentest_exploitdb_Install\n    # Pentest_RustScan_Install\n    # Pentest_WAFW00F_Install\n    # Pentest_WebAliveScan_Install\n    # Pentest_MassBleed_Install\n\n}\n\n# -ad\nAd_Tools(){\n\n    echo -e \"\\033[1;33m\\n>> Installing impacket\\n\\033[0m\"\n    Pentest_Impacket_Install\n    echo -e \"\\033[1;33m\\n>> Installing Responder\\n\\033[0m\"\n    Pentest_Responder_Install\n    echo -e \"\\033[1;33m\\n>> Installing krbrelayx\\n\\033[0m\"\n    Pentest_krbrelayx_Install\n    echo -e \"\\033[1;33m\\n>> Installing bettercap\\n\\033[0m\"\n    Pentest_bettercap_Install\n    echo -e \"\\033[1;33m\\n>> Installing mitmproxy\\n\\033[0m\"\n    Pentest_mitmproxy_Install\n    echo -e \"\\033[1;33m\\n>> Installing pypykatz\\n\\033[0m\"\n    Pentest_pypykatz_Install\n    echo -e \"\\033[1;33m\\n>> Installing CrackMapExec\\n\\033[0m\"\n    Pentest_CrackMapExec_Install\n    echo -e \"\\033[1;33m\\n>> Installing Neo-reGeorg\\n\\033[0m\"\n    Pentest_Neo-reGeorg_Install\n    echo -e \"\\033[1;33m\\n>> Installing suo5\\n\\033[0m\"\n    Pentest_suo5_Install\n    echo -e \"\\033[1;33m\\n>> Installing kerbrute\\n\\033[0m\"\n    Pentest_kerbrute_Install\n    echo -e \"\\033[1;33m\\n>> Installing Adinfo\\n\\033[0m\"\n    Pentest_Adinfo_Install\n    echo -e \"\\033[1;33m\\n>> Installing PetitPotam\\n\\033[0m\"\n    Pentest_PetitPotam_Install\n    echo -e \"\\033[1;33m\\n>> Installing Certipy\\n\\033[0m\"\n    Pentest_Certipy_Install\n    echo -e \"\\033[1;33m\\n>> Installing PKINITtools\\n\\033[0m\"\n    Pentest_PKINITtools_Install\n\n}\n\n# -b\nBase_Install(){\n\n    echo -e \"\\033[1;33m\\n>> Installing basic tools\\n\\033[0m\"\n    Base_Tools\n\n}\n\n# -s\nSecure(){\n\n    echo -e \"\\033[1;33m\\n>> Installing Fail2Ban\\n\\033[0m\"\n    Secure_Fail2Ban_Install\n    echo -e \"\\033[1;33m\\n>> Installing rkhunter\\n\\033[0m\"\n    Secure_rkhunter_Install\n    echo -e \"\\033[1;33m\\n>> Installing anti-portscan\\n\\033[0m\"\n    Secure_anti_portscan_Install\n    echo -e \"\\033[1;33m\\n>> Installing fapro\\n\\033[0m\"\n    Secure_fapro_Install\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            # echo -e \"\\033[1;33m\\n>> Installing chkrootkit\\n\\033[0m\"\n            # Secure_chkrootkit_Install\n            echo -e \"\\033[1;33m\\n>> Installing shellpub\\n\\033[0m\"\n            Secure_shellpub_Install\n            echo -e \"\\033[1;33m\\n>> Installing BruteShark\\n\\033[0m\"\n            Secure_BruteShark_Install\n            ;;\n    esac\n\n}\n\n# -cloud\ncloud(){\n\n    echo -e \"\\033[1;33m\\n>> Installing Terraform\\n\\033[0m\"\n    Terraform_Install\n\n    echo -e \"\\033[1;33m\\n>> Installing aliyun-cli\\n\\033[0m\"\n    aliyun-cli_Install\n\n    echo -e \"\\033[1;33m\\n>> Installing aws-cli\\n\\033[0m\"\n    aws-cli_Install\n\n    echo -e \"\\033[1;33m\\n>> Continue installation Serverless Framework? [y/N,Default N] \\033[0m\" && read -r input\n    case $input in\n        [yY][eE][sS]|[Yy])\n            nn_Check\n            echo -e \"\\033[1;33m\\n>> Installing Serverless Framework\\n\\033[0m\"\n            Serverless_Framework_Install\n            ;;\n        *)\n            Echo_INFOR \"Pass~\"\n            ;;\n    esac\n\n    # echo -e \"\\033[1;33m\\n>> Continue installation wrangler? [y/N,Default N] \\033[0m\" && read -r input\n    # case $input in\n    #     [yY][eE][sS]|[Yy])\n    #        Rust_Check\n    #        echo -e \"\\033[1;33m\\n>> Installing wrangler\\n\\033[0m\"\n    #        wrangler_Install\n    #        ;;\n    #    *)\n    #        Echo_INFOR \"Pass~\"\n    #        ;;\n    # esac\n\n}\n\n# -ssh\nSSH(){\n\n    echo -e \"\\033[1;33m\\n>> Configuring SSH\\n\\033[0m\"\n    SSH_Tools\n\n}\n\n# -h\nHelp(){\n\n    echo -e \"\\033[1;34mBatch installation \\033[0m\"\n    echo -e \"  \\033[1;34m-b\\033[0m \\033[0;34m               : install Basic Environment\\033[0m          \\033[1;32m(gcc、make、git、vim、telnet、jq、unzip ...)\\033[0m\"\n    echo -e \"  \\033[1;34m-p\\033[0m \\033[0;34m               : install Proxy Environment\\033[0m          \\033[1;31m(Warning : Use only when needed)\\033[0m\"\n    echo -e \"  \\033[1;34m-d\\033[0m \\033[0;34m               : install Development Environment\\033[0m    \\033[1;32m(python3、pip3、Go、Docker、Docker-Compose、SDKMAN)\\033[0m\"\n    echo -e \"  \\033[1;34m-k(a/b/c/d/e)\\033[0m\\033[0;34m     : install Pentest environment\\033[0m        \\033[1;32m(hashcat、ffuf、OneForAll、ksubdomain、impacket ...)\\033[0m\"\n    echo -e \"  \\033[1;34m-s\\033[0m \\033[0;34m               : install Blue Team Environment\\033[0m      \\033[1;32m(Fail2Ban、chkrootkit、rkhunter、shellpub)\\033[0m\"\n    echo -e \"  \\033[1;34m-f\\033[0m \\033[0;34m               : install Other Tools\\033[0m                \\033[1;32m(AdguardTeam、trash-cli、fzf)\\033[0m\"\n    echo -e \"  \\033[1;34m-cloud\\033[0m \\033[0;34m           : install Cloud Applications\\033[0m         \\033[1;32m(Terraform、Serverless Framework、wrangler)\\033[0m\"\n    echo -e \"  \\033[1;34m-all\\033[0m \\033[0;34m             : fully automated deployment\\033[0m\"\n    echo -e \"\"\n    echo -e \"\\033[1;34mDevelopment Environment \\033[0m\"\n    echo -e \"  \\033[1;34m-docker\\033[0m \\033[0;34m          : install docker\\033[0m\"\n    echo -e \"  \\033[1;34m-docker-cn\\033[0m \\033[0;34m       : install docker (aliyun source)\\033[0m\"\n    echo -e \"  \\033[1;34m-lua\\033[0m \\033[0;34m             : install lua\\033[0m\"\n    echo -e \"  \\033[1;34m-nn\\033[0m \\033[0;34m              : install npm & NodeJs\\033[0m\"\n    echo -e \"  \\033[1;34m-go\\033[0m\\033[0;34m               : install golang\\033[0m\"\n    echo -e \"  \\033[1;34m-oraclejdk(8/11/17)\\033[0m\\033[0;34m install oraclejdk\\033[0m\"\n    echo -e \"  \\033[1;34m-openjdk\\033[0m \\033[0;34m         : install openjdk\\033[0m\"\n    echo -e \"  \\033[1;34m-py3(7/8/9/10)\\033[0m\\033[0;34m    : install python3\\033[0m                    \\033[1;33m(Based on package manager)\\033[0m\"\n    echo -e \"  \\033[1;34m-py2\\033[0m \\033[0;34m             : install python2\\033[0m                    \\033[1;33m(Based on package manager)\\033[0m\"\n    echo -e \"  \\033[1;34m-pip2-f\\033[0m \\033[0;34m          : force install pip2\\033[0m                 \\033[1;33m(It is recommended to run with the -python2 option failing)\\033[0m\"\n    echo -e \"  \\033[1;34m-perl\\033[0m \\033[0;34m            : install perl\\033[0m\"\n    echo -e \"  \\033[1;34m-ruby\\033[0m \\033[0;34m            : install ruby\\033[0m                       \\033[1;33m(If that fails, try -ruby-f)\\033[0m\"\n    echo -e \"  \\033[1;34m-rust\\033[0m \\033[0;34m            : install rust\\033[0m\"\n    echo -e \"  \\033[1;34m-code\\033[0m \\033[0;34m            : install code-server\\033[0m\"\n    echo -e \"  \\033[1;34m-chromium\\033[0m \\033[0;34m        : install Chromium\\033[0m                   \\033[1;33m(Used with rad, crawlergo in the -k option) \\033[0m\"\n    echo -e \"  \\033[1;34m-crawl\\033[0m \\033[0;34m           : install crawl tools\\033[0m\"\n    echo -e \"  \\033[1;34m-phantomjs\\033[0m \\033[0;34m       : install PhantomJS\\033[0m\"\n    #echo -e \"  \\033[1;34m-k8s\\033[0m \\033[0;34m             : install k8s\\033[0m\"\n    echo -e \"\"\n    echo -e \"\\033[1;34mBlue Team Tools \\033[0m\"\n    echo -e \"  \\033[1;34m-binwalk\\033[0m \\033[0;34m         : install binwalk\\033[0m\"\n    echo -e \"  \\033[1;34m-binwalk-f\\033[0m \\033[0;34m       : force install binwalk\\033[0m              \\033[1;33m(It is recommended to run if the -binwalk option fails)\\033[0m\"\n    echo -e \"  \\033[1;34m-clamav\\033[0m \\033[0;34m          : install ClamAV\\033[0m\"\n    echo -e \"  \\033[1;34m-lt\\033[0m \\033[0;34m              : install LogonTracer\\033[0m                \\033[1;33m(High hardware configuration requirements)\\033[0m\"\n    echo -e \"  \\033[1;34m-suricata\\033[0m \\033[0;34m        : install Suricata\\033[0m\"\n    echo -e \"  \\033[1;34m-vol\\033[0m \\033[0;34m             : install volatility\\033[0m\"\n    echo -e \"  \\033[1;34m-vol3\\033[0m \\033[0;34m            : install volatility3\\033[0m\"\n    echo -e \"\"\n    echo -e \"\\033[1;34mRed Team Tools \\033[0m\"\n    echo -e \"  \\033[1;34m-aircrack\\033[0m \\033[0;34m        : install aircrack-ng\\033[0m\"\n    echo -e \"  \\033[1;34m-bypass\\033[0m \\033[0;34m          : install Bypass\\033[0m\"\n    echo -e \"  \\033[1;34m-goby\\033[0m \\033[0;34m            : install Goby\\033[0m                       \\033[1;33m(Requires GUI environment)\\033[0m\"\n    echo -e \"  \\033[1;34m-wpscan\\033[0m \\033[0;34m          : install wpscan\\033[0m\"\n    echo -e \"  \\033[1;34m-wx\\033[0m \\033[0;34m              : install wxappUnpacker\\033[0m\"\n    echo -e \"  \\033[1;34m-yakit\\033[0m \\033[0;34m           : install yakit\\033[0m\"\n    echo -e \"\"\n    echo -e \"\\033[1;34mRed Team Infrastructure \\033[0m\"\n    echo -e \"  \\033[1;34m-arl\\033[0m \\033[0;34m             : install ARL (~872 MB)\\033[0m              \\033[1;33m(https://github.com/TophantTechnology/ARL)\\033[0m\"\n    echo -e \"  \\033[1;34m-awvs15\\033[0m \\033[0;34m          : install AWVS15\\033[0m\"\n    # echo -e \"  \\033[1;34m-cs\\033[0m \\033[0;34m              : install CobaltStrike 4.3\\033[0m\"\n    echo -e \"  \\033[1;34m-cs45\\033[0m \\033[0;34m            : install CobaltStrike 4.5\\033[0m\"\n    echo -e \"  \\033[1;34m-frp\\033[0m \\033[0;34m             : install frp\\033[0m\"\n    echo -e \"  \\033[1;34m-interactsh\\033[0m \\033[0;34m      : install interactsh\\033[0m                 \\033[1;33m(https://github.com/projectdiscovery/interactsh)\\033[0m\"\n    echo -e \"  \\033[1;34m-merlin\\033[0m \\033[0;34m          : install merlin\\033[0m                     \\033[1;33m(https://github.com/Ne0nd0g/merlin)\\033[0m\"\n    echo -e \"  \\033[1;34m-msf\\033[0m \\033[0;34m             : install Metasploit\\033[0m\"\n    echo -e \"  \\033[1;34m-mobsf\\033[0m \\033[0;34m           : install MobSF (~1.54 GB)\\033[0m\"\n    echo -e \"  \\033[1;34m-mythic\\033[0m \\033[0;34m          : install mythic\\033[0m                     \\033[1;33m(建议使用国外地区的vps,不然部署速度太慢了)\\033[0m\"\n    echo -e \"  \\033[1;34m-nodejsscan\\033[0m \\033[0;34m      : install nodejsscan (~873 MB)\\033[0m\"\n    echo -e \"  \\033[1;34m-nps\\033[0m \\033[0;34m             : install nps\\033[0m\"\n    echo -e \"  \\033[1;34m-pupy\\033[0m \\033[0;34m            : install pupy\\033[0m\\033[0m                       \\033[1;33m(https://github.com/n1nj4sec/pupy)\\033[0m\"\n    echo -e \"  \\033[1;34m-rg\\033[0m \\033[0;34m              : install RedGuard\\033[0m                   \\033[1;33m(https://github.com/wikiZ/RedGuard)\\033[0m\"\n    echo -e \"  \\033[1;34m-http\\033[0m \\033[0;34m            : install simplehttpserver\\033[0m\"\n    echo -e \"  \\033[1;34m-sliver\\033[0m \\033[0;34m          : install sliver-server && client\\033[0m\\033[0m    \\033[1;33m(https://github.com/BishopFox/sliver)\\033[0m\"\n    echo -e \"  \\033[1;34m-sliver-client\\033[0m \\033[0;34m   : install sliver-client\\033[0m\\033[0m\"\n    echo -e \"  \\033[1;34m-sps\\033[0m \\033[0;34m             : install SharPyShell\\033[0m\\033[0m                \\033[1;33m(https://github.com/antonioCoco/SharPyShell)\\033[0m\"\n    echo -e \"  \\033[1;34m-viper\\033[0m \\033[0;34m           : install Viper (~2.1 GB)\\033[0m\\033[0m            \\033[1;33m(https://github.com/FunnyWolf/Viper)\\033[0m\"\n    echo -e \"\"\n    echo -e \"\\033[1;34mVulnerable Environments\\033[0m\"\n    echo -e \"  \\033[1;34m-metarget\\033[0m \\033[0;34m        : install metarget\\033[0m                   \\033[1;33m(https://github.com/Metarget/metarget)\\033[0m\"\n    echo -e \"  \\033[1;34m-vulhub\\033[0m \\033[0;34m          : install vulhub (~210 MB)\\033[0m           \\033[1;33m(https://github.com/vulhub/vulhub)\\033[0m\"\n    echo -e \"  \\033[1;34m-vulfocus\\033[0m \\033[0;34m        : install vulfocus (~1.04 GB)\\033[0m        \\033[1;33m(https://github.com/fofapro/vulfocus)\\033[0m\"\n    echo -e \"  \\033[1;34m-TerraformGoat\\033[0m \\033[0;34m   : install TerraformGoat\\033[0m              \\033[1;33m(https://github.com/HXSecurity/TerraformGoat)\\033[0m\"\n    echo -e \"\"\n    echo -e \"\\033[1;34mMiscellaneous Services \\033[0m\"\n    echo -e \"  \\033[1;34m-asciinema\\033[0m \\033[0;34m       : install asciinema\\033[0m\"\n    echo -e \"  \\033[1;34m-aa\\033[0m \\033[0;34m              : install aaPanel\\033[0m                    \\033[1;33m(https://www.aapanel.com/)\\033[0m\"\n    echo -e \"  \\033[1;34m-bt\\033[0m \\033[0;34m              : install 宝塔服务\\033[0m\"\n    echo -e \"  \\033[1;34m-clash\\033[0m \\033[0;34m           : install clash\\033[0m\"\n    # echo -e \"  \\033[1;34m-music\\033[0m \\033[0;34m           : install UnblockNeteaseMusic\\033[0m\"\n    echo -e \"  \\033[1;34m-nginx\\033[0m \\033[0;34m           : install nginx\\033[0m\"\n    echo -e \"  \\033[1;34m-ssh\\033[0m \\033[0;34m             : install ssh\\033[0m                        \\033[1;33m(RedHat is available by default, no need to reinstall)\\033[0m\"\n    echo -e \"  \\033[1;34m-ssr\\033[0m \\033[0;34m             : install ssr\\033[0m\"\n    echo -e \"  \\033[1;34m-zsh\\033[0m \\033[0;34m             : install zsh\\033[0m\"\n    echo -e \"\"\n    echo -e \"\\033[1;34mOther \\033[0m\"\n    echo -e \"  \\033[1;34m-clear\\033[0m \\033[0;34m           : Clean up system usage traces\\033[0m\"\n    echo -e \"  \\033[1;34m-info\\033[0m \\033[0;34m            : View system information\\033[0m\"\n    echo -e \"  \\033[1;34m-optimize\\033[0m \\033[0;34m        : Improve device options and optimize performance\\033[0m\"\n    echo -e \"  \\033[1;34m-remove\\033[0m \\033[0;34m          : Uninstall some vps cloud monitoring\\033[0m\"\n    echo -e \"  \\033[1;34m-rmlock\\033[0m \\033[0;34m          : Run the Unlock module\\033[0m\"\n    echo -e \"  \\033[1;34m-swap\\033[0m \\033[0;34m            : Configuring swap partitions\\033[0m\"\n    echo -e \"  \\033[1;34m-update\\033[0m \\033[0;34m          : Update f8x\\033[0m\"\n    echo -e \"  \\033[1;34m-upgrade\\033[0m \\033[0;34m         : Upgrade some tools\\033[0m\"\n    echo -e \"\"\n    echo -e \"\\033[1;37mAuthor r0fus0d , feel free to submit an issue if you need to add tool support or run into problems\\033[0m\"\n    echo -e \"\\033[1;37m|- create by ffffffff0x\\033[0m\"\n    echo -e \"\"\n\n}\n\n# -p\nProxy(){\n\n    echo -e \"\\033[1;33m\\n>> Do you want to update DNS settings? [Y/n,Default Y]\\033[0m\"\n    Change_DNS_IP\n\n    echo -e \"\\033[1;33m\\nPlease enter Source aliyun[a] huawei[h] tuna[t] 默认t\\033[0m\" && read -r input\n    case $input in\n        [aA])\n            Mirror \"aliyun\"\n            ;;\n        [hH])\n            Mirror \"huawei\"\n            ;;\n        [tT])\n            Mirror \"tuna\"\n            ;;\n        *)\n            Mirror \"tuna\"\n            ;;\n    esac\n\n    if [ $Docker_OK != 1 ] 2>> /tmp/f8x_error.log\n    then\n        echo -e \"\\033[1;33m\\n>> Installing resolvconf\\n\\033[0m\"\n        DNS_T00ls\n        echo -e \"\\033[1;33m\\n>> Configuring the base compilation environment\\n\\033[0m\"\n        Proxychains_Install\n    fi\n\n}\n\n# -debug\nDebug_Fun(){\n\n    echo -e \"none :>\"\n\n}\n\n# Main\nMain(){\n\n    case \"$(uname)\" in\n        *\"Darwin\"*)\n            Running_Mode=\"Darwin\"\n            ;;\n        *\"MINGW64_NT\"*)\n            echo \"Not supported on windows platform\"\n            exit 1\n            ;;\n        *)\n            Running_Mode=\"Linux\"\n            setenforce 0 > /dev/null 2>&1\n            ;;\n    esac\n\n    if [[ $UID != 0 ]]; then\n        Echo_ERROR \"Please run with sudo or root privileged account!\"\n        exit 1\n    fi\n\n    printf \"\\033c\"\n\n}\n\nMain\nBanner\n\ncase $Running_Mode in\n    *\"Darwin\"*)\n        Sys_Version_Mac\n        ;;\n    *\"Linux\"*)\n        Sys_Version\n        ;;\n    *)\n        exit 1\n        ;;\nesac\n\nSys_Info\necho -e \"\\033[1;36m \\n-----Start execution----- \\033[0m\"\necho -e \"\\033[1;33m\\n>> Initializing\\n\\033[0m\"\nBase_Dir\nDocker_run_Check\n\nfor cmd in $@\ndo\n    case $cmd in\n        -b | b)\n            mac_Check || exit 1\n            Base_Install\n            ;;\n        -p | p)\n            mac_Check || exit 1\n            Proxy\n            ;;\n        -d | d)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            Dev_Tools\n            ;;\n        -ad | ad)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            Py_Check\n            pip2_Check\n            GO_Check\n            Ad_Tools\n            ;;\n        -k | k)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            Py_Check\n            pip2_Check\n            GO_Check\n            kali_Tools\n            ;;\n        -ka | ka)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            Py_Check\n            kali_Tools \"a\"\n            ;;\n        -kb | kb)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            Py_Check\n            kali_Tools \"b\"\n            ;;\n        -kc | kc)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            Py_Check\n            kali_Tools \"c\"\n            ;;\n        -kd | kd)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            Py_Check\n            kali_Tools \"d\"\n            ;;\n        -ke | ke)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            Py_Check\n            kali_Tools \"e\"\n            ;;\n        -s | s)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            Secure\n            ;;\n        -f | f)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            pip3_Check\n            Fun_Tools\n            ;;\n        -h | h)\n            printf \"\\033c\"\n            Help\n            ;;\n        -cloud)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            cloud\n            ;;\n        -all)\n            mac_Check || exit 1\n            all_Install\n            ;;\n        -docker)\n            mac_Check || exit 1\n            Base_Check\n            Dev_Base_Install\n            Docker_Install\n            ;;\n        -docker-cn)\n            mac_Check || exit 1\n            Base_Check\n            Dev_Base_Install\n            Docker_Install \"tuna\"\n            ;;\n        -lua)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            lua_Install\n            ;;\n        -nn)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            nn_Install\n            ;;\n        -go)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            Go_Option\n            ;;\n        -jenv)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            jenv_Install\n            ;;\n        -openjdk)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            Openjdk_Install\n            ;;\n        -oraclejdk)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            Oraclejdk_Install\n            ;;\n        -oraclejdk8)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            Oraclejdk_Install \"oraclejdk8\"\n            ;;\n        -oraclejdk11)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            Oraclejdk_Install \"oraclejdk11\"\n            ;;\n        -oraclejdk17)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            Oraclejdk_Install \"oraclejdk17\"\n            ;;\n        -py3 | py3)\n            mac_Check || exit 1\n            Python3_Install\n            ;;\n        -py37 | py37)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            Python3_Install \"py37\"\n            ;;\n        -py38 | py38)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            Python3_Install \"py38\"\n            ;;\n        -py39 | py39)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            Python3_Install \"py39\"\n            ;;\n        -py310 | py310)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            Python3_Install \"py310\"\n            ;;\n        -py2 | py2)\n            mac_Check || exit 1\n            Python2_Install\n            ;;\n        -pip2-f)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            pip2_Install\n            ;;\n        -perl)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            Perl_Install\n            ;;\n        -ruby)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            Ruby_Install\n            ;;\n        -ruby-f)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            Ruby_Install_f\n            ;;\n        -rust)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            Rust_Install\n            ;;\n        -code)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            code-server_Install\n            ;;\n        -crawl)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            crawl_Install\n            ;;\n        -chromium)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            chromium_Install\n            ;;\n        -phantomjs)\n            mac_Check || exit 1\n            linux_arm64_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            phantomjs_Install\n            ;;\n        -k8s)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            k8s_Install\n            ;;\n        -binwalk)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            binwalk_Install\n            ;;\n        -binwalk-f)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            binwalk_force_Install\n            ;;\n        -clamav)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            clamav_Install\n            ;;\n        -vol)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            pip2_Check\n            Volatility_Install\n            ;;\n        -vol3)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            pip3_Check\n            volatility3_Install\n            ;;\n        -lt)\n            mac_Check || exit 1\n            Proxy_Switch\n            lt_Install\n            ;;\n        -aircrack)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            aircrack_Install\n            ;;\n        -bypass)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            Py_Check\n            bypass_Install\n            ;;\n        -cs)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            cs_Install\n            ;;\n        -cs45)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            cs45_Install\n            ;;\n        -interactsh)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            interactsh_Install\n            ;;\n        -merlin)\n            mac_Check || exit 1\n            linux_arm64_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            merlin_Install\n            ;;\n        -msf)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            Pentest_Metasploit_Install\n            ;;\n        -sps)\n            mac_Check || exit 1\n            linux_arm64_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            Pentest_Base_Install\n            Py_Check\n            SharPyShell_Install\n            ;;\n        -frp)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            frp_Install\n            ;;\n        -goby)\n            mac_Check || exit 1\n            linux_arm64_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            Goby_Install\n            ;;\n        -nps)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            nps_Install\n            ;;\n        -rg)\n            mac_Check || exit 1\n            linux_arm64_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            RedGuard_Install\n            ;;\n        -http)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            Pentest_simplehttpservert_Install\n            ;;\n        -sliver)\n            mac_Check || exit 1\n            linux_arm64_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            sliver-server_Install\n            ;;\n        -sliver-client)\n            mac_Check || exit 1\n            linux_arm64_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            sliver-client_Install\n            ;;\n        -wpscan)\n            mac_Check || exit 1\n            linux_arm64_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            Ruby_Check\n            wpscan_Install\n            ;;\n        -wx)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            nn_Check\n            wx_Install\n            ;;\n        -yakit)\n            mac_Check || exit 1\n            linux_arm64_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            yakit_Install\n            ;;\n        -suricata)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            suricata_Install\n            ;;\n        -arl)\n            mac_Check || exit 1\n            Proxy_Switch\n            Pentest_Base_Install\n            arl_Install\n            ;;\n        -awvs | -awvs14 | -awvs15)\n            mac_Check || exit 1\n            Proxy_Switch\n            awvs15_Install_secfa\n            ;;\n        -mobsf)\n            mac_Check || exit 1\n            Proxy_Switch\n            mobsf_Install\n            ;;\n        -mythic)\n            mac_Check || exit 1\n            Proxy_Switch\n            mythic_Install\n            ;;\n        -nodejsscan)\n            mac_Check || exit 1\n            Proxy_Switch\n            nodejsscan_Install\n            ;;\n        -pupy)\n            mac_Check || exit 1\n            Proxy_Switch\n            pupy_Install\n            ;;\n        -viper)\n            mac_Check || exit 1\n            Proxy_Switch\n            viper_Install\n            ;;\n        -metarget)\n            mac_Check || exit 1\n            Proxy_Switch\n            metarget_Install\n            ;;\n        -vulhub)\n            mac_Check || exit 1\n            Proxy_Switch\n            vulhub_Install\n            ;;\n        -vulfocus)\n            mac_Check || exit 1\n            Proxy_Switch\n            vulfocus_Install\n            ;;\n        -TerraformGoat)\n            mac_Check || exit 1\n            Proxy_Switch\n            TerraformGoat_Install\n            ;;\n        -asciinema)\n            mac_Check || exit 1\n            asciinema_Install\n            ;;\n        -bt)\n            mac_Check || exit 1\n            Base_Check\n            bt_Install\n            ;;\n        -aa)\n            mac_Check || exit 1\n            Base_Check\n            aaPanel_Install\n            ;;\n        -1panel)\n            mac_Check || exit 1\n            Base_Check\n            1Panel_Install\n            ;;\n        #-clash)\n        #    mac_Check || exit 1\n        #    Proxy_Switch\n        #    Base_Check\n        #    clash_Install\n        #    ;;\n        #-clash-old)\n        #    mac_Check || exit 1\n        #    Base_Check\n        #    clash_Install_old\n        #    ;;\n        -music)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            music_Install\n            ;;\n        -nginx)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            nginx_Install\n            ;;\n        -ssh)\n            mac_Check || exit 1\n            SSH\n            ;;\n        -ssr)\n            mac_Check || exit 1\n            linux_arm64_Check || exit 1\n            Base_Check\n            ssr_Install\n            ;;\n        -zsh)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            pip3_Check\n            zsh_Install\n            ;;\n        -jq)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            jq_Install\n            ;;\n        -clear)\n            mac_Check || exit 1\n            clear_log\n            ;;\n        -info)\n            # Base_Check\n            System_info\n            ;;\n        -optimize)\n            mac_Check || exit 1\n            optimize_setting\n            ;;\n        -remove)\n            mac_Check || exit 1\n            remove_watcher\n            ;;\n        -rmlock)\n            mac_Check || exit 1\n            Rm_Lock\n\n            case $Linux_Version in\n                *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n                    dpkg --configure -a > /dev/null 2>&1\n                    ;;\n                *) ;;\n            esac\n\n            ;;\n        -swap)\n            mac_Check || exit 1\n            swap_setting\n            ;;\n        -update)\n            mac_Check || exit 1\n            Proxy_Switch\n            if test -e /usr/local/bin/f8x\n            then\n                rm -f /usr/local/bin/f8x && $Proxy_OK curl -o /usr/local/bin/f8x https://f8x.io && chmod +x /usr/local/bin/f8x && Echo_INFOR \"Update successful\" || Echo_ERROR \"Update failed\"\n            else\n                rm -f f8x && $Proxy_OK curl -o f8x https://f8x.io > /dev/null 2>&1 && Echo_INFOR \"Update successful\" || Echo_ERROR \"Update failed\"\n            fi\n            ;;\n        -upgrade)\n            mac_Check || exit 1\n            Proxy_Switch\n            Base_Check\n            Py_Check\n            GO_Check\n            Pentest_Base_Install\n            pentest_tool_upgrade\n            ;;\n        -proxy)\n            mac_Check || exit 1\n            Proxychains_Install\n            ;;\n        -debug)\n            mac_Check || exit 1\n            Base_Check\n            Pentest_Base_Install\n            Proxy_Switch\n            Debug_Fun\n            ;;\n        *)\n            echo -e \"\"\n            echo -e \"\\033[1;34mUse the -h option to view the help documentation\\033[0m\"\n            ;;\n    esac\n\n    echo -e \"\\033[1;36m \\n-----End of execution-----\\n \\033[0m\"\ndone\n"
        },
        {
          "name": "f8x-ctf",
          "type": "blob",
          "size": 24.5283203125,
          "content": "#!/usr/bin/env bash\n\n# ===================== Basic variable settings =====================\n\nif test -e /usr/local/bin/f8x\nthen\n    sleep 0.001\n    # f8x -update\nelse\n    curl -o f8x https://f8x.io/ && mv --force f8x /usr/local/bin/f8x && chmod +x /usr/local/bin/f8x && echo -e \"\\033[1;36m$(date +\"%H:%M:%S\")\\033[0m \\033[1;32m[INFOR]\\033[0m - \\033[1;32mInstalled f8x tools\\033[0m\" || echo -e \"\\033[1;36m$(date +\"%H:%M:%S\")\\033[0m \\033[1;31m[ERROR]\\033[0m - \\033[1;31mf8x installation failed\\n\\033[0m\"\nfi\n\n. /usr/local/bin/f8x > /dev/null 2>&1\n\nF8x_ctf_Version=\"0.1.2 Dev(2024/01/03)\"\n\n# ===================== Software version variable setting =====================\n\nbkcrack_Ver=\"v1.7.0\"\nbkcrack_bin=\"bkcrack-1.7.0-Linux.tar.gz\"\nbkcrack_dir=\"bkcrack-1.7.0-Linux\"\nupx_Ver=\"v3.96\"\nupx_bin_amd64=\"upx-3.96-amd64_linux.tar.xz\"\nupx_dir_amd64=\"upx-3.96-amd64_linux\"\nupx_bin_arm64=\"upx-3.96-arm64_linux.tar.xz\"\nupx_dir_arm64=\"upx-3.96-arm64_linux\"\n\nMain\nPentest_Base_Install > /dev/null 2>&1\n\n# ===================== CTF WEB Tool =====================\n\nCTF_WEB_py3_module_install(){\n\n    Install_Switch4 \"itsdangerous\"\n\n}\n\nCTF_GitHack_install(){\n\n    name=\"GitHack\"\n    dir=\"$P_Dir/GitHack\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        $Proxy_OK git clone ${GitProxy}https://github.com/lijiejie/GitHack.git $dir > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the $dir\" || Echo_ERROR3\n    fi\n\n}\n\nCTF_Git_Extract_install(){\n\n    name=\"GitHack\"\n    dir=\"$P_Dir/Git_Extract\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        $Proxy_OK git clone ${GitProxy}https://github.com/gakki429/Git_Extract.git $dir > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the $dir\" || Echo_ERROR3\n    fi\n\n}\n\nCTF_dumpall_install(){\n\n    name=\"dumpall\"\n    which dumpall > /dev/null 2>&1\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        Install_Switch4 \"dumpall\"\n    fi\n\n}\n\nCTF_flask-session-cookie-manager_install(){\n\n    name=\"flask-session-cookie-manager\"\n    dir=\"$P_Dir/flask-session-cookie-manager\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        $Proxy_OK git clone --depth 1 ${GitProxy}https://github.com/noraj/flask-session-cookie-manager.git $dir > /dev/null 2>&1\n        cd $dir && python3 setup.py install > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the $dir\" || Echo_ERROR3\n    fi\n\n}\n\nPentest_redis-ssrf_Install(){\n\n    name=\"redis-ssrf\"\n    dir=\"$P_Dir/redis-ssrf\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        $Proxy_OK git clone ${GitProxy}https://github.com/xmsec/redis-ssrf.git $dir > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the $dir\" || Echo_ERROR3\n    fi\n\n}\n\n# ===================== CTF MISC Tool =====================\n\nCTF_Misc_install(){\n\n    Install_Switch \"strace\"\n    Install_Switch \"unrar\"\n    Install_Switch \"python3-tk\"\n    Install_Switch \"android-tools-adb\"\n    Install_Switch \"foremost\"\n    Install_Switch \"rarcrack\"\n\n}\n\nCTF_Misc_py3_module_install(){\n\n    Install_Switch4 \"base58\"\n    Install_Switch4 \"requests\"\n    Install_Switch4 \"zlib\" > /dev/null 2>&1\n    Install_Switch4 \"struct\" > /dev/null 2>&1\n    Install_Switch4 \"libnum\"\n    Install_Switch4 \"Plaso\"\n    Install_Switch4 \"matplotlib\"\n    Install_Switch4 \"tqdm\"\n    python3 -m pip install --upgrade Pillow > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name\"\n\n}\n\nCTF_Misc_py2_module_install(){\n\n    Install_Switch3 \"pybase62\"\n    Install_Switch3 \"base92\"\n    python2 -m pip install Pillow > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name\"\n\n}\n\nCTF_stegoveritas_install(){\n\n    name=\"stegoveritas\"\n    which stegoveritas > /dev/null 2>&1\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        pip3 install stegoveritas 1> /dev/null 2>> /tmp/f8x_error.log\n        stegoveritas_install_deps > /dev/null 2>&1\n        which stegoveritas > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name\" || Echo_ERROR2\n    fi\n\n}\n\nCTF_ImageMagick_install(){\n\n    name=\"ImageMagick\"\n    which convert > /dev/null 2>&1\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        Install_Switch \"graphicsmagick-imagemagick-compat\" || Echo_ERROR2\n        Install_Switch \"imagemagick\" && Echo_INFOR \"Successfully installed $name\" || Echo_ERROR2\n    fi\n\n}\n\nCTF_morse2ascii_install(){\n\n    name=\"morse2ascii\"\n    which morse2ascii > /dev/null 2>&1\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        Install_Switch \"morse2ascii\" && Echo_INFOR \"Successfully installed $name\" || Echo_ERROR2\n    fi\n\n}\n\nCTF_exiftool_install(){\n\n    name=\"exiftool\"\n    which exiftool > /dev/null 2>&1\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        Install_Switch \"exiftool\" && Echo_INFOR \"Successfully installed $name\" || Echo_ERROR2\n    fi\n\n}\n\nCTF_steghide_install(){\n\n    name=\"steghide\"\n    which steghide > /dev/null 2>&1\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        Install_Switch \"steghide\" && Echo_INFOR \"Successfully installed $name\" || Echo_ERROR2\n    fi\n\n}\n\nCTF_pdfinfo_install(){\n\n    name=\"pdfinfo\"\n    which pdfinfo > /dev/null 2>&1\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        Install_Switch \"poppler-utils\" && Echo_INFOR \"Successfully installed $name\" || Echo_ERROR2\n    fi\n\n}\n\nCTF_zbarimg_install(){\n\n    name=\"zbarimg\"\n    which zbarimg > /dev/null 2>&1\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        case $Linux_Version in\n            *\"CentOS\"*|*\"RedHat\"*|*\"Fedora\"*)\n                Install_Switch \"zbar\" && Echo_INFOR \"Successfully installed $name\" || Echo_ERROR2\n                ;;\n            *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n                Install_Switch \"zbar-tools\" && Echo_INFOR \"Successfully installed $name\" || Echo_ERROR2\n                ;;\n            *) ;;\n        esac\n    fi\n\n}\n\nCTF_outguess_install(){\n\n    name=\"outguess\"\n    which outguess > /dev/null 2>&1\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/outguess && cd /tmp/outguess\n        $Proxy_OK git clone --depth 1 https://github.com/crorvick/outguess > /dev/null 2>&1 || Echo_ERROR2\n        cd outguess\n        ./configure > /dev/null 2>&1 && make > /dev/null 2>&1 && make install > /dev/null 2>&1\n        which outguess > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name\" || Echo_ERROR3\n        rm -rf /tmp/outguess\n    fi\n\n}\n\nCTF_bkcrack_install(){\n\n    name=\"bkcrack\"\n    which bkcrack > /dev/null 2>&1\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/bkcrack && cd /tmp/bkcrack\n        $Proxy_OK wget https://github.com/kimci86/bkcrack/releases/download/$bkcrack_Ver/$bkcrack_bin > /dev/null 2>&1 || Echo_ERROR2\n        tar -zxvf $bkcrack_bin > /dev/null 2>&1\n        cp $bkcrack_dir/bkcrack /usr/sbin/bkcrack\n        which bkcrack > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name\" || Echo_ERROR3\n        rm -rf /tmp/bkcrack\n    fi\n\n}\n\nCTF_zsteg_install(){\n\n    name=\"zsteg\"\n    which zsteg > /dev/null 2>&1\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        $Proxy_OK gem install zsteg 1> /dev/null 2>> /tmp/f8x_error.log && Echo_INFOR \"Successfully installed $name\" || Echo_ERROR \"Calling gem to install zsteg failed! Please run the -ruby option to install the Ruby environment\"\n    fi\n\n}\n\nCTF_F5-steganography_install(){\n\n    name=\"F5-steganography\"\n    dir=\"$P_Dir/F5-steganography\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        cd $P_Dir && $Proxy_OK git clone --depth 1 https://github.com/matthewgao/F5-steganography.git > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the $dir\" || Echo_ERROR3\n    fi\n\n}\n\nCTF_LSB-Steganography_install(){\n\n    name=\"LSB-Steganography\"\n    dir=\"$P_Dir/LSB-Steganography\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        cd $P_Dir && $Proxy_OK git clone https://github.com/RobinDavid/LSB-Steganography.git > /dev/null 2>&1 || Echo_ERROR2\n        cd LSB-Steganography && pip3 install -r requirements.txt > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the $dir\" || Echo_ERROR3\n    fi\n\n}\n\nCTF_BlindWaterMark_install(){\n\n    name=\"BlindWaterMark\"\n    dir=\"$P_Dir/BlindWaterMark\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n\n        Install_Switch3 \"opencv-python==4.2.0.32\"\n        cd $P_Dir && $Proxy_OK git clone https://github.com/chishaxie/BlindWaterMark.git > /dev/null 2>&1 || Echo_ERROR2\n        cd $dir && python2 -m pip install -r requirements.txt > /dev/null\n        cd $dir && Echo_INFOR \"Successfully installed $name in the $dir\" || Echo_ERROR3\n    fi\n\n}\n\nCTF_crc32_install(){\n\n    name=\"crc32\"\n    dir=\"$P_Dir/crc32\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        cd $P_Dir && $Proxy_OK git clone https://github.com/theonlypwner/crc32.git > /dev/null 2>&1 || Echo_ERROR2\n        cd crc32\n        python3 crc32.py -h > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the $dir\" || Echo_ERROR3\n    fi\n\n}\n\nCTF_cloacked-pixel_install(){\n\n    name=\"cloacked-pixel\"\n    dir=\"$P_Dir/cloacked-pixel\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n\n        Install_Switch3 \"numpy\"\n        Install_Switch3 \"matplotlib\"\n\n        case $Linux_Version in\n            *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n                Install_Switch \"python-tk\"\n                apt-get install -y python-backports.functools-lru-cache > /dev/null 2>&1\n                ;;\n            *) ;;\n        esac\n\n        cd $P_Dir && $Proxy_OK git clone https://github.com/livz/cloacked-pixel.git > /dev/null 2>&1 || Echo_ERROR2\n        cd $dir && Echo_INFOR \"Successfully installed $name in the $dir\" || Echo_ERROR3\n    fi\n\n}\n\nCTF_stegosaurus_install(){\n\n    name=\"stegosaurus\"\n    dir=\"$P_Dir/stegosaurus\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        cd $P_Dir && $Proxy_OK git clone https://github.com/AngelKitty/stegosaurus.git > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the $dir\" || Echo_ERROR2\n    fi\n\n}\n\n# ===================== CTF CRYPTO Tool =====================\n\nCTF_Crypto_install(){\n\n    Install_Switch \"python-gmpy2\"\n    Install_Switch \"python3-gmpy2\"\n\n    case $Linux_Version in\n        *\"CentOS\"*|*\"RedHat\"*|*\"Fedora\"*)\n            echo \"\" # 暂时不填\n            ;;\n        *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n            Install_Switch \"libgmp-dev\"\n            Install_Switch \"libmpfr-dev\"\n            Install_Switch \"libmpc-dev\"\n            ;;\n        *) ;;\n    esac\n\n}\n\nCTF_Crypto_py3_module_install(){\n\n    #name=\"ciphey\"\n    #python3 -m pip install --upgrade ciphey > /dev/null 2>&1 && Echo_INFOR \"已安装 ciphey\" || Echo_ERROR \"尝试使用 --ignore-installed 安装\"\n    Install_Switch4 \"xortool\"\n    Install_Switch4 \"pycrypto\"\n    Install_Switch4 \"primefac\"\n    Install_Switch4 \"gmpy\"\n    Install_Switch4 \"gmpy2\"\n    Install_Switch4 \"rsa\"\n    Install_Switch4 \"owiener\"\n    Install_Switch4 \"factordb-python\"\n    Install_Switch4 \"sympy\"\n    Install_Switch4 \"Arithmetic\"\n    Install_Switch4 \"secret\"\n    Install_Switch4 \"gmssl\"\n\n}\n\nCTF_Crypto_py2_module_install(){\n\n    Install_Switch3 \"libnum\"\n    Install_Switch3 \"owiener\"\n    Install_Switch3 \"primefac\"\n\n}\n\nCTF_rsatool_install(){\n\n    name=\"rsatool\"\n    dir=\"$P_Dir/rsatool\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        cd $P_Dir && $Proxy_OK git clone --depth 1 https://github.com/ius/rsatool.git > /dev/null 2>&1 || Echo_ERROR2\n        cd rsatool && python3 rsatool.py -h > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the $dir\" || Echo_ERROR3\n    fi\n\n}\n\nCTF_RsaCtfTool_install(){\n\n    name=\"RsaCtfTool\"\n    dir=\"$P_Dir/RsaCtfTool\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        case $Linux_Version in\n            *\"Fedora\"*)\n                Install_Switch \"gmp-devel\"\n                Install_Switch \"mpfr-devel\"\n                Install_Switch \"libmpc-devel\"\n                ;;\n            *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n                Install_Switch \"libgmp3-dev\"\n                ;;\n            *) ;;\n        esac\n\n        cd $P_Dir && $Proxy_OK git clone --depth 1 https://github.com/Ganapati/RsaCtfTool.git > /dev/null 2>&1 || Echo_ERROR2\n        cd RsaCtfTool\n        pip3 install -r \"requirements.txt\" > /dev/null 2>&1\n        pip3 install -r \"optional-requirements.txt\" > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the $dir\" || Echo_ERROR3\n    fi\n\n}\n\nCTF_CTF-RSA-tool_install(){\n\n    name=\"CTF-RSA-tool\"\n    dir=\"$P_Dir/CTF-RSA-tool\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        cd $P_Dir && $Proxy_OK git clone --depth 1 https://github.com/3summer/CTF-RSA-tool.git > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the $dir\" || Echo_ERROR2\n    fi\n\n}\n\nCTF_rsa-wiener-attack_install(){\n\n    name=\"rsa-wiener-attack\"\n    dir=\"$P_Dir/rsa-wiener-attack\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        cd $P_Dir && $Proxy_OK git clone https://github.com/pablocelayes/rsa-wiener-attack.git > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the $dir\" || Echo_ERROR2\n    fi\n\n}\n\nCTF_basecrack_install(){\n\n    name=\"basecrack\"\n    dir=\"$P_Dir/basecrack\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        cd $P_Dir && $Proxy_OK git clone --depth 1 https://github.com/mufeedvh/basecrack.git > /dev/null 2>&1 || Echo_ERROR2\n        cd basecrack\n        pip3 install -r \"requirements.txt\" > /dev/null 2>&1\n        python3 basecrack.py -h > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the $dir\" || Echo_ERROR3\n    fi\n\n}\n\n# ===================== CTF IOT Tool =====================\n\nCTF_IOT_install(){\n\n    Install_Switch \"btscanner\"\n\n}\n\nCTF_firmware_mod_kit_Install(){\n\n    name=\"firmware-mod-kit\"\n    dir=\"/opt/firmware-mod-kit/trunk\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n\n        case $Linux_Version in\n            *\"CentOS\"*|*\"RedHat\"*|*\"Fedora\"*)\n                Install_Switch3 \"firmware-mod-kit\"\n                ;;\n            *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n                Install_Switch3 \"firmware-mod-kit\"\n                ;;\n            *) ;;\n        esac\n\n    fi\n\n}\n\n# ===================== CTF RE Tool =====================\n\nCTF_RE_py3_module_install(){\n\n    Install_Switch4 \"uncompyle6\"\n\n}\n\nCTF_RE_pyinstxtractor_install(){\n\n    name=\"pyinstxtractor\"\n    dir=\"$P_Dir/pyinstxtractor\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        cd $P_Dir && $Proxy_OK git clone https://github.com/extremecoders-re/pyinstxtractor.git > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the $dir\" || Echo_ERROR2\n    fi\n\n}\n\nCTF_RE_upx_install(){\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            upx_bin=$upx_bin_amd64\n            ;;\n        *\"linux-arm64\"*)\n            upx_bin=$upx_bin_arm64\n            ;;\n    esac\n\n    name=\"upx\"\n    which upx > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n    else\n        mkdir -p /tmp/upx && cd $_ && rm -f $upx_bin > /dev/null 2>&1 && $Proxy_OK wget ${GitProxy}https://github.com/upx/upx/releases/download/$upx_Ver/$upx_bin > /dev/null 2>&1 || Echo_ERROR2\n        tar -xvJf $upx_bin > /dev/null 2>&1 && cd $upx_dir\n        mv --force upx /usr/local/bin/upx && chmod +x /usr/local/bin/upx && rm -rf /tmp/upx > /dev/null 2>&1\n        which upx > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name $upx_Ver in the /usr/local/bin/\" || Echo_ERROR3\n    fi\n\n}\n\n# ===================== CTF PWN Tool =====================\n\nCTF_PWN_install(){\n\n    Install_Switch \"gdb\"\n\n    case $Linux_Version in\n        *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n            Install_Switch \"libssl-dev\"\n            Install_Switch \"libffi-dev\"\n            Install_Switch \"build-essential\"\n            Install_Switch \"gcc-multilib\"\n            Install_Switch \"python-dev\"\n            Install_Switch \"python3-dev\"\n            ;;\n        *) ;;\n    esac\n\n}\n\nCTF_PWN_py3_module_install(){\n\n    pip3 install --upgrade pip > /dev/null 2>&1\n    Install_Switch4 \"setuptools\"\n    Install_Switch4 \"capstone\"\n    Install_Switch4 \"filebytes\"\n    Install_Switch4 \"keystone-engine\"\n    Install_Switch4 \"ropper\"\n    Install_Switch4 \"pathlib2\"\n    Install_Switch4 \"psutil\"\n\n}\n\nCTF_PWN_py2_module_install(){\n\n    python2 -m pip install --upgrade pip > /dev/null 2>&1\n    Install_Switch3 \"pathlib2\"\n    Install_Switch3 \"psutil\"\n\n}\n\nCTF_PWN_pwntools_install(){\n\n    name=\"pwntools\"\n    Install_Switch3 \"pwntools\"\n    Install_Switch4 \"pwntools\"\n\n}\n\nCTF_PWN_pwndbg_install(){\n\n    name=\"pwndbg\"\n    dir=\"$P_Dir/pwndbg\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        cd $P_Dir && $Proxy_OK git clone --depth 1 https://github.com/pwndbg/pwndbg.git > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name in the $dir\" || Echo_ERROR3\n        cd $dir && echo \"source /pentest/pwndbg/gdbinit.py\" > ~/.gdbinit\n    fi\n\n}\n\nCTF_PWN_one_gadget_install(){\n\n    name=\"one_gadget\"\n    gem install one_gadget > /dev/null 2>&1 && Echo_INFOR \"Successfully installed $name\" || one_gadget_install2\n\n}\n\none_gadget_install2(){\n\n    Echo_ERROR \"one_gadget installation failed, try to reinstall one_gadget\"\n\n    case $Linux_Version in\n        *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n            add-apt-repository ppa:brightbox/ruby-ng\n            apt-get update\n            apt-get purge --auto-remove ruby\n            apt-get install -y ruby2.6 ruby2.6-dev\n            gem install one_gadget\n            ;;\n        *) ;;\n    esac\n\n}\n\n# -web\n\nCTF_WEB_tools(){\n\n    Rm_Lock\n    echo -e \"\\033[1;33m\\n>> Installing common py modules\\n\\033[0m\"\n    CTF_WEB_py3_module_install\n    echo -e \"\\033[1;33m\\n>> Installing Sqlmap\\n\\033[0m\"\n    Pentest_Sqlmap_Install\n    echo -e \"\\033[1;33m\\n>> Installing GitHack\\n\\033[0m\"\n    CTF_GitHack_install\n    echo -e \"\\033[1;33m\\n>> Installing Git_Extract\\n\\033[0m\"\n    CTF_Git_Extract_install\n    echo -e \"\\033[1;33m\\n>> Installing flask-session-cookie-manager\\n\\033[0m\"\n    CTF_flask-session-cookie-manager_install\n    echo -e \"\\033[1;33m\\n>> Installing Gopherus\\n\\033[0m\"\n    Pentest_Gopherus_Install\n    echo -e \"\\033[1;33m\\n>> Installing redis-rogue-server\\n\\033[0m\"\n    Pentest_redis-rogue-server_Install\n    echo -e \"\\033[1;33m\\n>> Installing redis-rogue-server-win\\n\\033[0m\"\n    Pentest_redis-rogue-server-win_Install\n    echo -e \"\\033[1;33m\\n>> Installing redis-rce\\n\\033[0m\"\n    Pentest_redis-rce_Install\n    echo -e \"\\033[1;33m\\n>> Installing redis_lua_exploit\\n\\033[0m\"\n    Pentest_redis_lua_exploit_Install\n    echo -e \"\\033[1;33m\\n>> Installing redis-ssrf\\n\\033[0m\"\n    Pentest_redis-ssrf_Install\n\n}\n\n# -misc\n\nCTF_MISC_tools(){\n\n    Rm_Lock\n    echo -e \"\\033[1;33m\\n>> Installing some misc tools\\n\\033[0m\"\n    CTF_Misc_install\n    echo -e \"\\033[1;33m\\n>> Installing common py modules\\n\\033[0m\"\n    CTF_Misc_py3_module_install\n    CTF_Misc_py2_module_install\n    echo -e \"\\033[1;33m\\n>> Installing hashcat、7z2hashcat\\n\\033[0m\"\n    Pentest_hashcat_Install\n    echo -e \"\\033[1;33m\\n>> Installing stegoveritas\\n\\033[0m\"\n    CTF_stegoveritas_install\n    echo -e \"\\033[1;33m\\n>> Installing ImageMagick\\n\\033[0m\"\n    CTF_ImageMagick_install\n    echo -e \"\\033[1;33m\\n>> Installing morse2ascii\\n\\033[0m\"\n    CTF_morse2ascii_install\n    echo -e \"\\033[1;33m\\n>> Installing exiftool\\n\\033[0m\"\n    CTF_exiftool_install\n    echo -e \"\\033[1;33m\\n>> Installing steghide\\n\\033[0m\"\n    CTF_steghide_install\n    echo -e \"\\033[1;33m\\n>> Installing pdfinfo\\n\\033[0m\"\n    CTF_pdfinfo_install\n    echo -e \"\\033[1;33m\\n>> Installing zbarimg\\n\\033[0m\"\n    CTF_zbarimg_install\n    echo -e \"\\033[1;33m\\n>> Installing outguess\\n\\033[0m\"\n    CTF_outguess_install\n    echo -e \"\\033[1;33m\\n>> Installing zsteg\\n\\033[0m\"\n    CTF_zsteg_install\n    echo -e \"\\033[1;33m\\n>> Installing F5-steganography\\n\\033[0m\"\n    CTF_F5-steganography_install\n    echo -e \"\\033[1;33m\\n>> Installing LSB-Steganography\\n\\033[0m\"\n    CTF_LSB-Steganography_install\n    echo -e \"\\033[1;33m\\n>> Installing BlindWaterMark\\n\\033[0m\"\n    CTF_BlindWaterMark_install\n    echo -e \"\\033[1;33m\\n>> Installing crc32\\n\\033[0m\"\n    CTF_crc32_install\n    echo -e \"\\033[1;33m\\n>> Installing cloacked-pixel\\n\\033[0m\"\n    CTF_cloacked-pixel_install\n    echo -e \"\\033[1;33m\\n>> Installing stegosaurus\\n\\033[0m\"\n    CTF_stegosaurus_install\n    Volatility_Install\n    volatility3_Install\n\n    case $Linux_architecture_Name in\n        *\"linux-x86_64\"*)\n            echo -e \"\\033[1;33m\\n>> Installing bkcrack\\n\\033[0m\"\n            CTF_bkcrack_install\n            ;;\n    esac\n\n}\n\n# -crypto\n\nCTF_Crypto_tools(){\n\n    Rm_Lock\n    echo -e \"\\033[1;33m\\n>> Installing some misc tools\\n\\033[0m\"\n    CTF_Crypto_install\n    echo -e \"\\033[1;33m\\n>> Installing common py modules\\n\\033[0m\"\n    CTF_Crypto_py3_module_install\n    CTF_Crypto_py2_module_install\n    echo -e \"\\033[1;33m\\n>> Installing rsatool\\n\\033[0m\"\n    CTF_rsatool_install\n    echo -e \"\\033[1;33m\\n>> Installing RsaCtfTool\\n\\033[0m\"\n    CTF_RsaCtfTool_install\n    echo -e \"\\033[1;33m\\n>> Installing CTF-RSA-tool\\n\\033[0m\"\n    CTF_CTF-RSA-tool_install\n    echo -e \"\\033[1;33m\\n>> Installing rsa-wiener-attack\\n\\033[0m\"\n    CTF_rsa-wiener-attack_install\n    echo -e \"\\033[1;33m\\n>> Installing basecrack\\n\\033[0m\"\n    CTF_basecrack_install\n\n}\n\n# -iot\n\nCTF_IOT_tools(){\n\n    Rm_Lock\n    echo -e \"\\033[1;33m\\n>> Installing some misc tools\\n\\033[0m\"\n    CTF_IOT_install\n    binwalk_Install\n    echo -e \"\\033[1;33m\\n>> Installing firmware-mod-kit\\n\\033[0m\"\n    CTF_firmware_mod_kit_Install\n\n}\n\n# -re\n\nCTF_RE_tools(){\n\n    Rm_Lock\n    #echo -e \"\\033[1;33m\\n>> Installing some misc tools\\n\\033[0m\"\n    #CTF_RE_install\n    echo -e \"\\033[1;33m\\n>> Installing common py modules\\n\\033[0m\"\n    CTF_RE_py3_module_install\n    #CTF_RE_py2_module_install\n    echo -e \"\\033[1;33m\\n>> Installing pyinstxtractor\\n\\033[0m\"\n    CTF_RE_pyinstxtractor_install\n    echo -e \"\\033[1;33m\\n>> Installing upx\\n\\033[0m\"\n    CTF_RE_upx_install\n\n}\n\n# -pwn\n\nCTF_PWN_tools(){\n\n    Rm_Lock\n    echo -e \"\\033[1;33m\\n>> Installing some misc tools\\n\\033[0m\"\n    CTF_PWN_install\n    echo -e \"\\033[1;33m\\n>> Installing common py modules\\n\\033[0m\"\n    CTF_PWN_py3_module_install\n    CTF_PWN_py2_module_install\n    echo -e \"\\033[1;33m\\n>> Installing pwntools\\n\\033[0m\"\n    CTF_PWN_pwntools_install\n    echo -e \"\\033[1;33m\\n>> Installing pwndbg\\n\\033[0m\"\n    CTF_PWN_pwndbg_install\n    echo -e \"\\033[1;33m\\n>> Installing one_gadget\\n\\033[0m\"\n    CTF_PWN_one_gadget_install\n\n}\n\n# -help\n\nHelp_Info(){\n\n    echo -e \"\\033[1;34mInstall by category \\033[0m\"\n    echo -e \"  \\033[1;34m-web\\033[0m \\033[0;34m   : install WEB environment\\033[0m\"\n    echo -e \"  \\033[1;34m-misc\\033[0m \\033[0;34m  : install MISC environment\\033[0m\"\n    echo -e \"  \\033[1;34m-crypto\\033[0m \\033[0;34m: install Crypto environment\\033[0m\"\n    echo -e \"  \\033[1;34m-iot\\033[0m \\033[0;34m   : install IOT environment\\033[0m\"\n    echo -e \"  \\033[1;34m-re\\033[0m \\033[0;34m   : install Reverse environment\\033[0m\"\n    echo -e \"  \\033[1;34m-pwn\\033[0m \\033[0;34m   : install PWN environment\\033[0m\"\n    echo -e \"\"\n    echo -e \"\\033[1;37mcreate by ffffffff0x\\033[0m\"\n    echo -e \"\"\n\n}\n\nfor cmd in $@\ndo\n    case $cmd in\n        -web)\n            Proxy_Switch\n            Base_Check\n            Py_Check\n            pip2_Check\n            JDK_Check\n            CTF_WEB_tools\n            ;;\n        -misc)\n            Proxy_Switch\n            Base_Check\n            Py_Check\n            pip2_Check\n            JDK_Check\n            CTF_MISC_tools\n            ;;\n        -crypto)\n            Proxy_Switch\n            Base_Check\n            Py_Check\n            pip2_Check\n            JDK_Check\n            CTF_Crypto_tools\n            ;;\n        -iot)\n            Proxy_Switch\n            Base_Check\n            Py_Check\n            pip2_Check\n            JDK_Check\n            CTF_IOT_tools\n            ;;\n        -re)\n            Proxy_Switch\n            Base_Check\n            Py_Check\n            pip2_Check\n            JDK_Check\n            CTF_RE_tools\n            ;;\n        -pwn)\n            Proxy_Switch\n            Base_Check\n            Py_Check\n            pip2_Check\n            JDK_Check\n            CTF_PWN_tools\n            ;;\n        -help | help)\n            printf \"\\033c\"\n            Help_Info\n            exit 1\n            ;;\n    esac\ndone\n\necho -e \"\\033[1;36m \\n-----OVER-----\\n \\033[0m\"\n"
        },
        {
          "name": "f8x-dev",
          "type": "blob",
          "size": 26.400390625,
          "content": "#!/usr/bin/env bash\n\n# ===================== Basic variable settings =====================\n\nif test -e /usr/local/bin/f8x\nthen\n    sleep 0.001\n    # f8x -update\nelse\n    curl -o f8x https://f8x.io/ && mv --force f8x /usr/local/bin/f8x && chmod +x /usr/local/bin/f8x && echo -e \"\\033[1;36m$(date +\"%H:%M:%S\")\\033[0m \\033[1;32m[INFOR]\\033[0m - \\033[1;32mInstalled f8x tools\\033[0m\" || echo -e \"\\033[1;36m$(date +\"%H:%M:%S\")\\033[0m \\033[1;31m[ERROR]\\033[0m - \\033[1;31mf8x installation failed\\n\\033[0m\"\nfi\n\n. /usr/local/bin/f8x > /dev/null 2>&1\n\nF8x_dev_Version=\"0.1.2 Dev\"\nran=$RANDOM\n\n# ===================== Software version variable setting =====================\n\ntomcat6_bin=\"apache-tomcat-6.0.53.tar.gz\"\ntomcat6_dir=\"apache-tomcat-6.0.53\"\ntomcat7_bin=\"apache-tomcat-7.0.109.tar.gz\"\ntomcat7_dir=\"apache-tomcat-7.0.109\"\ntomcat8_bin=\"apache-tomcat-8.5.68.tar.gz\"\ntomcat8_dir=\"apache-tomcat-8.5.68\"\ntomcat9_bin=\"apache-tomcat-9.0.50.tar.gz\"\ntomcat9_dir=\"apache-tomcat-9.0.50\"\n\nMain\nPentest_Base_Install > /dev/null 2>&1\n\n# ===================== Install mariadb (pkg) =====================\nmariadb_Install(){\n\n    name=\"mariadb\"\n\n    which mysql > /dev/null 2>&1\n\n    if [ $? == 0 ]\n    then\n        Echo_ALERT \"$name installed\"\n        systemctl start mariadb && Echo_INFOR \"systemctl start mariadb\"\n    else\n        Rm_Lock\n        case $Linux_Version in\n            *\"CentOS\"*|*\"RedHat\"*|*\"Fedora\"*)\n                Install_Switch \"mariadb\"\n                Install_Switch \"mariadb-server\"\n                ;;\n            *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n                Install_Switch \"mariadb-client\"\n                Install_Switch \"mariadb-server\"\n                ;;\n            *) ;;\n        esac\n\n        systemctl start mariadb\n        mysql_secure_installation\n\n        mysqlcmd=\"select User, host from mysql.user;\n        GRANT ALL PRIVILEGES ON *.* TO 'root'@'%'IDENTIFIED BY 'toor' WITH GRANT OPTION;\n        FLUSH PRIVILEGES;\"\n\n        mysql -u root -p -e \"${mysqlcmd}\"\n        Echo_INFOR \"Default root/toor For security reasons, please do not deploy in a public network environment.\"\n\n        systemctl restart mariadb\n\n        # If you can't connect, you need to modify the configuration file\n        # vim /etc/mysql/mariadb.conf.d/50-server.cnf\n        # bind-address = 0.0.0.0\n        # :wq\n        # systemctl restart mariadb\n    fi\n\n}\n\n# ===================== Install influxdb (docker) (x86) (arm64) =====================\ninfluxdb_docker_Install(){\n\n    name=\"influxdb\"\n\n    echo -e \"\\033[5;33m\\nPlease enter your influxdb listening port (Default 8086)\\033[0m\" && read -r input\n    influxdb_port=$input\n\n    if [ $influxdb_port ==  ] 2>> /tmp/f8x_error.log\n    then\n        echo -e \"输入为空,默认监听端口为 8086\"\n        influxdb_port=\"8086\"\n    fi\n\n    # https://hub.docker.com/_/influxdb\n    docker pull influxdb\n    docker run -d -p $influxdb_port:8086 --name f8x-influxdb-$ran influxdb:latest || { Echo_ERROR \"Deployment failed\"; exit 1; }\n    docker ps\n\n    Echo_ALERT \"Already listening to 0.0.0.0:$influxdb_port, please do not deploy in public network environment\"\n    Echo_INFOR \"Connect database with following setting:\\nlisten: 0.0.0.0:$influxdb_port\"\n\n}\n\n# ===================== Install mariadb (docker) (x86) (arm64) =====================\nmariadb_docker_Install(){\n\n    name=\"mariadb\"\n\n    echo -e \"\\033[5;33m\\nPlease enter your mariadb listening port (Default 3306)\\033[0m\" && read -r input\n    mariadb_port=$input\n\n    if [ $mariadb_port ==  ] 2>> /tmp/f8x_error.log\n    then\n        echo -e \"输入为空,默认监听端口为 3306\"\n        mariadb_port=\"3306\"\n    fi\n\n    echo -e \"\\033[5;33m\\nPlease enter your mariadb password (Default ffffffff0x)\\033[0m\" && read -r input\n    mariadb_pass=$input\n\n    if [ $mariadb_pass ==  ] 2>> /tmp/f8x_error.log\n    then\n        echo -e \"输入为空,默认密码为 ffffffff0x\"\n        mariadb_pass=\"ffffffff0x\"\n    fi\n\n    # https://hub.docker.com/_/mariadb\n    docker pull mariadb\n    docker run -d -p $mariadb_port:3306 --name f8x-mariadb-$ran -e MYSQL_ROOT_PASSWORD=$mariadb_pass mariadb:latest || { Echo_ERROR \"Deployment failed\"; exit 1; }\n    # Error : Can't initialize timers\n    # Use : docker run -d -p $mariadb_port:3306 -e MYSQL_ROOT_PASSWORD=$mariadb_pass mariadb:10.7\n    docker ps\n\n    Echo_ALERT \"Already listening to 0.0.0.0:$mariadb_port, please do not deploy in public network environment\"\n    Echo_INFOR \"Connect database with following setting:\\nlisten: 0.0.0.0:$mariadb_port\\nusername: root\\npassword: $mariadb_pass\"\n\n}\n\n# ===================== Install memcached (docker) =====================\nmemcached_docker_Install(){\n\n    name=\"memcached\"\n\n    echo -e \"\\033[5;33m\\nPlease enter your memcached listening port (Default 11211)\\033[0m\" && read -r input\n    memcached_port=$input\n\n    if [ $memcached_port ==  ] 2>> /tmp/f8x_error.log\n    then\n        echo -e \"输入为空,默认监听端口为 11211\"\n        memcached_port=\"11211\"\n    fi\n\n    # https://hub.docker.com/_/memcached\n    docker pull memcached\n    docker run -d -p $memcached_port:11211 --name f8x-memcached-$ran memcached || { Echo_ERROR \"Deployment failed\"; exit 1; }\n    docker ps\n\n    Echo_ALERT \"Already listening to 0.0.0.0:$memcached_port, please do not deploy in public network environment\"\n\n}\n\n# ===================== Install mongodb (docker) =====================\nmongodb_docker_Install(){\n\n    name=\"mongodb\"\n\n    echo -e \"\\033[5;33m\\nPlease enter your mongodb listening port (Default 27017)\\033[0m\" && read -r input\n    mongodb_port=$input\n\n    if [ $mongodb_port ==  ] 2>> /tmp/f8x_error.log\n    then\n        echo -e \"输入为空,默认监听端口为 27017\"\n        mongodb_port=\"27017\"\n    fi\n\n    # https://hub.docker.com/_/mongo\n    docker pull mongo\n    docker run -d -p $mongodb_port:27017 --name f8x-mongodb-$ran mongo || { Echo_ERROR \"Deployment failed\"; exit 1; }\n    docker ps\n\n    Echo_ALERT \"Already listening to 0.0.0.0:$mongodb_port, please do not deploy in public network environment\"\n\n}\n\n# ===================== Install mssql2019 (docker) =====================\nmssql2019_docker_Install(){\n\n    name=\"mssql2019\"\n\n    echo -e \"\\033[5;33m\\nPlease enter your mssql2019 listening port (Default 1433)\\033[0m\" && read -r input\n    mssql2019_port=$input\n\n    if [ $mssql2019_port ==  ] 2>> /tmp/f8x_error.log\n    then\n        echo -e \"输入为空,默认监听端口为 1433\"\n        mssql2019_port=\"1433\"\n    fi\n\n    echo -e \"\\033[5;33m\\nPlease enter your mssql2019 password(必须包含大小写、字母和数字、特殊符号)(Default Abcd1234!!)\\033[0m\" && read -r input\n    mssql2019_pass=$input\n\n    if [ $mssql2019_pass ==  ] 2>> /tmp/f8x_error.log\n    then\n        echo -e \"输入为空,默认密码为 Abcd1234!!\"\n        mssql2019_pass='Abcd1234!!'\n    fi\n\n    # https://hub.docker.com/_/microsoft-mssql-server\n    docker pull mcr.microsoft.com/mssql/server:2019-CU15-ubuntu-20.04\n    docker run -d -p $mssql2019_port:1433 --name=f8x-sqlserver -e 'ACCEPT_EULA=Y' -e SA_PASSWORD=$mssql2019_pass -e 'MSSQL_PID=Developer' mcr.microsoft.com/mssql/server:2019-CU15-ubuntu-20.04 || { Echo_ERROR \"Deployment failed\"; exit 1; }\n    docker ps\n\n    Echo_ALERT \"Already listening to 0.0.0.0:$mssql2019_port, please do not deploy in public network environment\"\n    Echo_INFOR \"Connect database with following setting:\\nlisten: 0.0.0.0:$mssql2019_port\\nusername: sa\\npassword: $mssql2019_pass\"\n\n}\n\n# ===================== Install mysql (docker) (x86) =====================\nmysql_docker_Install(){\n\n    name=\"mysql\"\n\n    echo -e \"\\033[5;33m\\nPlease enter your mysql listening port (Default 3306)\\033[0m\" && read -r input\n    mysql_port=$input\n\n    if [ $mysql_port ==  ] 2>> /tmp/f8x_error.log\n    then\n        echo -e \"输入为空,默认监听端口为 3306\"\n        mysql_port=\"3306\"\n    fi\n\n    echo -e \"\\033[5;33m\\nPlease enter your mysql password (Default ffffffff0x)\\033[0m\" && read -r input\n    mysql_pass=$input\n\n    if [ $mysql_pass ==  ] 2>> /tmp/f8x_error.log\n    then\n        echo -e \"输入为空,默认密码为 ffffffff0x\"\n        mysql_pass=\"ffffffff0x\"\n    fi\n\n    # https://hub.docker.com/_/mysql\n    docker pull mysql:latest\n    docker run -d -p $mysql_port:3306 --name f8x-mysql-$ran -e MYSQL_ROOT_PASSWORD=$mysql_pass mysql:latest || { Echo_ERROR \"Deployment failed\"; exit 1; }\n    docker ps\n\n    Echo_ALERT \"Already listening to 0.0.0.0:$mysql_port, please do not deploy in public network environment\"\n    Echo_INFOR \"Connect database with following setting:\\nlisten: 0.0.0.0:$mysql_port\\nusername: root\\npassword: $mysql_pass\"\n\n}\n\n# ===================== Install oracle11 (docker) =====================\noracle11_docker_Install(){\n\n    name=\"oracle11\"\n\n    echo -e \"\\033[5;33m\\nPlease enter your oracle11 listening port (Default 1521)\\033[0m\" && read -r input\n    oracle11_port=$input\n\n    if [ $oracle11_port ==  ] 2>> /tmp/f8x_error.log\n    then\n        echo -e \"输入为空,默认监听端口为 1521\"\n        oracle11_port=\"1521\"\n    fi\n\n    echo -e \"\\033[5;33m\\nPlease enter your oracle11 password (Default ffffffff0x)\\033[0m\" && read -r input\n    oracle11_pass=$input\n\n    if [ $oracle11_pass ==  ] 2>> /tmp/f8x_error.log\n    then\n        echo -e \"输入为空,默认密码为 ffffffff0x\"\n        oracle11_pass=\"ffffffff0x\"\n    fi\n\n    # https://hub.docker.com/r/gvenzl/oracle-xe\n    docker pull gvenzl/oracle-xe:11\n    docker run -d -p $oracle11_port:1521 --name f8x-oracle11-$ran -e ORACLE_PASSWORD=$oracle11_pass gvenzl/oracle-xe:11 || { Echo_ERROR \"Deployment failed\"; exit 1; }\n    docker ps\n\n    Echo_ALERT \"Already listening to 0.0.0.0:$oracle11_port, please do not deploy in public network environment\"\n    Echo_INFOR \"Connect database with following setting:\\nlisten: 0.0.0.0:$oracle11_port\\nsid : XE\\nusername: system\\npassword: $oracle11_pass\"\n\n}\n\n# ===================== Install postgres (docker) =====================\npostgres_docker_Install(){\n\n    name=\"postgres\"\n\n    echo -e \"\\033[5;33m\\nPlease enter your PostgreSQL listening port (Default 5432)\\033[0m\" && read -r input\n    postgres_port=$input\n\n    if [ $postgres_port ==  ] 2>> /tmp/f8x_error.log\n    then\n        echo -e \"输入为空,默认监听端口为 5432\"\n        postgres_port=\"5432\"\n    fi\n\n    echo -e \"\\033[5;33m\\nPlease enter your PostgreSQL password (Default ffffffff0x)\\033[0m\" && read -r input\n    postgres_pass=$input\n\n    if [ $postgres_pass ==  ] 2>> /tmp/f8x_error.log\n    then\n        echo -e \"输入为空,默认密码为 ffffffff0x\"\n        postgres_pass=\"ffffffff0x\"\n    fi\n\n    # https://hub.docker.com/_/postgres\n    docker pull postgres:14.7\n    docker run -d -p $postgres_port:5432 --name f8x-postgres-$ran -e POSTGRES_PASSWORD=$postgres_pass postgres:14.7 || { Echo_ERROR \"Deployment failed\"; exit 1; }\n    docker ps\n\n    Echo_ALERT \"Already listening to 0.0.0.0:$postgres_port, please do not deploy in public network environment\"\n    Echo_INFOR \"Connect database with following setting:\\nlisten: 0.0.0.0:$postgres_port\\nusername: postgres\\npassword: $postgres_pass\"\n\n}\n\n# ===================== Install redis (docker) =====================\nredis_docker_Install(){\n\n    name=\"redis\"\n\n    echo -e \"\\033[5;33m\\nPlease enter your redis listening port (Default 6379)\\033[0m\" && read -r input\n    redis_port=$input\n\n    if [ $redis_port ==  ] 2>> /tmp/f8x_error.log\n    then\n        echo -e \"输入为空,默认监听端口为 6379\"\n        redis_port=\"6379\"\n    fi\n\n    # https://hub.docker.com/_/redis\n    docker pull redis\n    docker run -d -p $redis_port:6379 --name f8x-redis-$ran redis || { Echo_ERROR \"Deployment failed\"; exit 1; }\n    docker ps\n\n    Echo_ALERT \"Already listening to 0.0.0.0:$redis_port, please do not deploy in public network environment!!!!\"\n    Echo_ALERT \"Already listening to 0.0.0.0:$redis_port, please do not deploy in public network environment!!!!\"\n    Echo_ALERT \"Already listening to 0.0.0.0:$redis_port, please do not deploy in public network environment!!!!\"\n\n}\n\n# ===================== Install tomcat7 (docker) (x86) (arm) =====================\ntomcat7_docker_Install(){\n\n    name=\"tomcat7\"\n\n    echo -e \"\\033[5;33m\\nPlease enter your tomcat listening port (Default 8080)\\033[0m\" && read -r input\n    tomcat7_port=$input\n\n    if [ $tomcat7_port ==  ] 2>> /tmp/f8x_error.log\n    then\n        echo -e \"输入为空,默认监听端口为 8080\"\n        tomcat7_port=\"8080\"\n    fi\n\n    # https://hub.docker.com/_/tomcat\n    docker pull tomcat:7.0\n    docker run -d -p $tomcat7_port:8080 tomcat:7.0\n    docker ps\n\n    Echo_ALERT \"Already listening to 0.0.0.0:$tomcat7_port\"\n\n}\n\n# ===================== Install tomcat8 (docker) (x86) =====================\ntomcat8_docker_Install(){\n\n    name=\"tomcat8\"\n\n    echo -e \"\\033[5;33m\\nPlease enter your tomcat listening port (Default 8080)\\033[0m\" && read -r input\n    tomcat8_port=$input\n\n    if [ $tomcat8_port ==  ] 2>> /tmp/f8x_error.log\n    then\n        echo -e \"输入为空,默认监听端口为 8080\"\n        tomcat8_port=\"8080\"\n    fi\n\n    # https://hub.docker.com/_/tomcat\n    docker pull tomcat:8.5.77\n    docker run -d -p $tomcat8_port:8080 tomcat:8.5.77\n    docker ps\n\n    Echo_ALERT \"Already listening to 0.0.0.0:$tomcat8_port\"\n\n}\n\n# ===================== Install tomcat9 (docker) (x86) (arm) =====================\ntomcat9_docker_Install(){\n\n    name=\"tomcat9\"\n\n    echo -e \"\\033[5;33m\\nPlease enter your tomcat listening port (Default 8080)\\033[0m\" && read -r input\n    tomcat9_port=$input\n\n    if [ $tomcat9_port ==  ] 2>> /tmp/f8x_error.log\n    then\n        echo -e \"输入为空,默认监听端口为 8080\"\n        tomcat9_port=\"8080\"\n    fi\n\n    # https://hub.docker.com/_/tomcat\n    docker pull tomcat:9.0\n    docker run -d -p $tomcat9_port:8080 tomcat:9.0\n    docker ps\n\n    Echo_ALERT \"Already listening to 0.0.0.0:$tomcat9_port\"\n\n}\n\n# ===================== Install tomcat6 (src) =====================\ntomcat6_src_Install(){\n\n    # Tomcat 6.0 requires JRE 5.0 or later.\n\n    name=\"tomcat6\"\n    dir=\"/usr/local/$tomcat6_dir\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        cd $T_Dir && rm -rf $tomcat6_bin && $Proxy_OK wget https://archive.apache.org/dist/tomcat/tomcat-6/v6.0.53/bin/$tomcat6_bin > /dev/null 2>&1 || Echo_ERROR2\n        tar -zxf $tomcat6_bin -C /usr/local/ > /dev/null 2>&1 && rm -rf $tomcat6_bin\n\n    fi\n\n    rm -rf /usr/local/tomcat\n    ln -s /usr/local/${tomcat6_dir}/ /usr/local/tomcat\n    Echo_INFOR \"Manually run the following command:\\nexport CATALINA_HOME=/usr/local/tomcat\\nexport PATH=\\$CATALINA_HOME/bin:\\$PATH\"\n    Echo_INFOR \"catalina.sh version\"\n    Echo_INFOR \"catalina.sh start\"\n\n}\n\n# ===================== Install tomcat7 (src) =====================\ntomcat7_src_Install(){\n\n    # Tomcat 7.0 requires Java 6 or later.\n\n    name=\"tomcat7\"\n    dir=\"/usr/local/$tomcat7_dir\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        cd $T_Dir && rm -rf $tomcat7_bin && $Proxy_OK wget https://archive.apache.org/dist/tomcat/tomcat-7/v7.0.109/bin/$tomcat7_bin > /dev/null 2>&1 || Echo_ERROR2\n        tar -zxf $tomcat7_bin -C /usr/local/ > /dev/null 2>&1 && rm -rf $tomcat7_bin\n    fi\n\n    rm -rf /usr/local/tomcat\n    ln -s /usr/local/${tomcat7_dir}/ /usr/local/tomcat\n    Echo_INFOR \"Manually run the following command:\\nexport CATALINA_HOME=/usr/local/tomcat\\nexport PATH=\\$CATALINA_HOME/bin:\\$PATH\"\n    Echo_INFOR \"catalina.sh version\"\n    Echo_INFOR \"catalina.sh start\"\n\n}\n\n# ===================== Install tomcat8 (src) =====================\ntomcat8_src_Install(){\n\n    # Tomcat 8.5 requires Java 7 or later.\n\n    name=\"tomcat8\"\n    dir=\"/usr/local/$tomcat8_dir\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        cd $T_Dir && rm -rf $tomcat8_bin && $Proxy_OK wget https://archive.apache.org/dist/tomcat/tomcat-8/v8.5.68/bin/$tomcat8_bin > /dev/null 2>&1 || Echo_ERROR2\n        tar -zxf $tomcat8_bin -C /usr/local/ > /dev/null 2>&1 && rm -rf $tomcat8_bin\n\n    fi\n\n    rm -rf /usr/local/tomcat\n    ln -s /usr/local/${tomcat8_dir}/ /usr/local/tomcat\n    Echo_INFOR \"Manually run the following command:\\nexport CATALINA_HOME=/usr/local/tomcat\\nexport PATH=\\$CATALINA_HOME/bin:\\$PATH\"\n    Echo_INFOR \"catalina.sh version\"\n    Echo_INFOR \"catalina.sh start\"\n\n}\n\n# ===================== Install tomcat9 (src) =====================\ntomcat9_src_Install(){\n\n    # Tomcat 9.0 requires Java 8 or later.\n\n    name=\"tomcat9\"\n    dir=\"/usr/local/$tomcat9_dir\"\n\n    if test -d $dir\n    then\n        Echo_ALERT \"$name is already installed in $dir\"\n    else\n        cd $T_Dir && rm -rf $tomcat9_bin && $Proxy_OK wget https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.50/bin/$tomcat9_bin > /dev/null 2>&1 || Echo_ERROR2\n        tar -zxf $tomcat9_bin -C /usr/local/ > /dev/null 2>&1 && rm -rf $tomcat9_bin\n\n    fi\n\n    rm -rf /usr/local/tomcat\n    ln -s /usr/local/${tomcat9_dir}/ /usr/local/tomcat\n    Echo_INFOR \"Manually run the following command:\\nexport CATALINA_HOME=/usr/local/tomcat\\nexport PATH=\\$CATALINA_HOME/bin:\\$PATH\"\n    Echo_INFOR \"catalina.sh version\"\n    Echo_INFOR \"catalina.sh start\"\n\n}\n\n# ===================== Install nginx (pkg) =====================\nnginx_Install_pkg(){\n\n    name=\"nginx\"\n\n    Rm_Lock\n    Install_Switch \"nginx\"\n\n    Echo_INFOR \"systemctl status nginx\"\n    systemctl status nginx\n\n}\n\n# ===================== Install apache (pkg) =====================\napache_Install_pkg(){\n\n    name=\"apache2\"\n\n    Rm_Lock\n    case $Linux_Version in\n        *\"CentOS\"*|*\"RedHat\"*|*\"Fedora\"*|*\"AlmaLinux\"*|*\"VzLinux\"*|*\"Rocky\"*)\n            Install_Switch \"httpd\"\n            Echo_INFOR \"systemctl status httpd\"\n            systemctl status httpd\n            ;;\n        *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n            Install_Switch \"apache2\"\n            Echo_INFOR \"systemctl status apache2\"\n            systemctl status apache2\n            ;;\n        *)\n            ;;\n    esac\n\n}\n\nphp_base_Install(){\n\n    Rm_Lock\n    case $Linux_Version in\n        *\"CentOS\"*|*\"RedHat\"*|*\"Fedora\"*|*\"AlmaLinux\"*|*\"VzLinux\"*|*\"Rocky\"*)\n            Echo_INFOR \"RedHat 系暂未适配\"\n            ;;\n        *\"Debian\"*|*\"Kali\"*)\n            Install_Switch \"software-properties-common\"\n            Install_Switch \"gnupg\"\n\n            curl -fsSL https://packages.sury.org/php/apt.gpg | sudo apt-key add -\n            sudo add-apt-repository \"deb https://packages.sury.org/php/ $(lsb_release -cs) main\"\n            apt-get update > /dev/null 2>&1\n            ;;\n        *\"Ubuntu\"*)\n            Install_Switch \"software-properties-common\"\n            Install_Switch \"gnupg\"\n\n            sudo add-apt-repository ppa:ondrej/php\n            apt-get update > /dev/null 2>&1\n            ;;\n        *) ;;\n    esac\n\n}\n\n# ===================== Install php5.6 (pkg) =====================\nphp56_Install(){\n\n    name=\"php5.6\"\n\n    php_base_Install\n    case $Linux_Version in\n        *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n            Install_Switch \"php5.6\"\n            Install_Switch \"php5.6-fpm\"\n            Install_Switch \"php5.6-mysql\"\n            Install_Switch \"php5.6-curl\"\n            Install_Switch \"php5.6-json\"\n            Install_Switch \"php5.6-mbstring\"\n            Install_Switch \"php5.6-gd\"\n            Install_Switch \"php5.6-xml\"\n            Install_Switch \"php5.6-intl\"\n            Install_Switch \"php5.6-odbc\"\n            Install_Switch \"php5.6-cgi\"\n            Install_Switch \"php5.6-zip\"\n\n            update-alternatives --config php\n            php -v\n            Echo_INFOR \"Run the following command to switch php version:\\nupdate-alternatives --config php\"\n            ;;\n        *) ;;\n    esac\n\n}\n\n# ===================== Install php7.2 (pkg) =====================\nphp72_Install(){\n\n    name=\"php7.2\"\n\n    php_base_Install\n    case $Linux_Version in\n        *\"Kali\"*|*\"Ubuntu\"*|*\"Debian\"*)\n            Install_Switch \"php7.2\"\n            Install_Switch \"php7.2-fpm\"\n            Install_Switch \"php7.2-mysql\"\n            Install_Switch \"php7.2-curl\"\n            Install_Switch \"php7.2-json\"\n            Install_Switch \"php7.2-mbstring\"\n            Install_Switch \"php7.2-gd\"\n            Install_Switch \"php7.2-xml\"\n            Install_Switch \"php7.2-intl\"\n            Install_Switch \"php7.2-odbc\"\n            Install_Switch \"php7.2-cgi\"\n            Install_Switch \"php7.2-zip\"\n\n            update-alternatives --config php\n            php -v\n            Echo_INFOR \"Run the following command to switch php version:\\nupdate-alternatives --config php\"\n            ;;\n        *) ;;\n    esac\n\n}\n\n# ===================== Install php7.2 (pkg) + nginx (pkg) + autoconfig =====================\nphp72_nginx_Install(){\n\n    service httpd stop > /dev/null 2>&1\n    apt remove -y apache2 > /dev/null 2>&1\n\n    nginx_Install_pkg\n    php72_Install\n\n    mkdir -p /var/www/php && cd $_\n    echo \"<?php phpinfo() ?>\" > /var/www/php/phpinfo.php\n\n    # nginx 配置\n    cd /etc/nginx/sites-available\n    rm -rf default\n\ntee default <<-'EOF'\nserver {\n        listen 7777 default_server;\n\n        location / {\n                root /var/www/php;\n                index index.php;\n\n                try_files $uri $uri/ =404;\n        }\n\n        location ~ \\.php$ {\n                root /var/www/php;\n\n                fastcgi_pass unix:/run/php/php7.2-fpm.sock;\n                fastcgi_index index.php;\n                fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n                include fastcgi_params;\n        }\n}\nEOF\n\n    /usr/sbin/php-fpm7.2 1> /dev/null 2>> /tmp/f8x_error.log\n    /usr/sbin/nginx -t 1> /dev/null 2>> /tmp/f8x_error.log\n\n    service nginx restart\n    ufw disable 1> /dev/null 2>> /tmp/f8x_error.log\n    service firewalld stop 1> /dev/null 2>> /tmp/f8x_error.log\n    systemctl start nginx.service\n    ss -tnlp\n\n    chmod -R 777 /var/www/php/\n\n    Echo_INFOR \"config : /etc/nginx/sites-available/default\"\n    Echo_INFOR \"www    : /var/www/php\"\n    Echo_INFOR \"test   : curl http://127.0.0.1:7777/phpinfo.php\"\n\n}\n\n# -help\nHelp_Info(){\n\n    echo -e \"\\033[1;34mapache \\033[0m\"\n    echo -e \"  \\033[1;34m-apache-pkg\\033[0m \\033[0;34m      : install apache    (Package Manager) \\033[0m\"\n    echo -e \"\"\n    echo -e \"\\033[1;34mnginx \\033[0m\"\n    echo -e \"  \\033[1;34m-nginx-pkg\\033[0m \\033[0;34m       : install nginx     (Package Manager) \\033[0m\"\n    echo -e \"  \\033[1;34m-nginx-src\\033[0m \\033[0;34m       : install nginx     (Compile) \\033[0m\"\n    echo -e \"\"\n    echo -e \"\\033[1;34mtomcat \\033[0m\"\n    echo -e \"  \\033[1;34m-tomcat6-src\\033[0m \\033[0;34m     : install tomcat6   (Compile)\\033[0m\"\n    echo -e \"  \\033[1;34m-tomcat7\\033[0m \\033[0;34m         : install tomcat7   (Docker)\\033[0m\"\n    echo -e \"  \\033[1;34m-tomcat7-src\\033[0m \\033[0;34m     : install tomcat7   (Compile)\\033[0m\"\n    echo -e \"  \\033[1;34m-tomcat8\\033[0m \\033[0;34m         : install tomcat8   (Docker)\\033[0m\"\n    echo -e \"  \\033[1;34m-tomcat8-src\\033[0m \\033[0;34m     : install tomcat8   (Compile)\\033[0m\"\n    echo -e \"  \\033[1;34m-tomcat9\\033[0m \\033[0;34m         : install tomcat9   (Docker)\\033[0m\"\n    echo -e \"  \\033[1;34m-tomcat9-src\\033[0m \\033[0;34m     : install tomcat9   (Compile)\\033[0m\"\n    echo -e \"\"\n    echo -e \"\\033[1;34mDatabase \\033[0m\"\n    echo -e \"  \\033[1;34m-influxdb\\033[0m \\033[0;34m        : install InfluxDB  (Docker) \\033[0m\"\n    echo -e \"  \\033[1;34m-mariadb\\033[0m \\033[0;34m         : install mariadb   (Docker) \\033[0m\"\n    echo -e \"  \\033[1;34m-memcached\\033[0m \\033[0;34m       : install memcached (Docker) \\033[0m\"\n    echo -e \"  \\033[1;34m-mongodb\\033[0m \\033[0;34m         : install mongodb   (Docker) \\033[0m\"\n    echo -e \"  \\033[1;34m-mssql2019\\033[0m \\033[0;34m       : install mssql2019 (Docker) \\033[0m\"\n    echo -e \"  \\033[1;34m-mysql\\033[0m \\033[0;34m           : install mysql     (Docker) \\033[0m\"\n    echo -e \"  \\033[1;34m-oracle11\\033[0m \\033[0;34m        : install oracle11  (Docker) \\033[0m\"\n    echo -e \"  \\033[1;34m-postgres\\033[0m \\033[0;34m        : install PostgreSQL(Docker) \\033[0m\"\n    echo -e \"  \\033[1;34m-redis\\033[0m \\033[0;34m           : install redis     (Docker) \\033[0m\"\n    echo -e \"\"\n    echo -e \"\\033[1;34mphp \\033[0m\"\n    echo -e \"  \\033[1;34m-php56\\033[0m \\033[0;34m           : install php5.6    (Package Manager)\\033[0m\"\n    echo -e \"  \\033[1;34m-php72\\033[0m \\033[0;34m           : install php7.2    (Package Manager)\\033[0m\"\n    echo -e \"  \\033[1;34m-php72-nginx\\033[0m \\033[0;34m     : install php7.2 + nginx (Package Manager) \\033[0m\"\n    echo -e \"\"\n    echo -e \"\\033[1;37mcreate by ffffffff0x\\033[0m\"\n    echo -e \"\"\n\n}\n\nfor cmd in $@\ndo\n    case $cmd in\n        -influxdb)\n            Base_Check\n            Docker_Check\n            influxdb_docker_Install\n            ;;\n        -mariadb)\n            Base_Check\n            Docker_Check\n            mariadb_docker_Install\n            ;;\n        -memcached)\n            Base_Check\n            Docker_Check\n            memcached_docker_Install\n            ;;\n        -mongodb)\n            Base_Check\n            Docker_Check\n            mongodb_docker_Install\n            ;;\n        -mssql2019)\n            Base_Check\n            Docker_Check\n            mssql2019_docker_Install\n            ;;\n        -mysql)\n            Base_Check\n            Docker_Check\n            mysql_docker_Install\n            ;;\n        -oracle11)\n            Base_Check\n            Docker_Check\n            oracle11_docker_Install\n            ;;\n        -postgres)\n            Base_Check\n            Docker_Check\n            postgres_docker_Install\n            ;;\n        -redis)\n            Base_Check\n            Docker_Check\n            redis_docker_Install\n            ;;\n        -tomcat7)\n            Base_Check\n            Docker_Check\n            tomcat7_docker_Install\n            ;;\n        -tomcat8)\n            Base_Check\n            Docker_Check\n            tomcat8_docker_Install\n            ;;\n        -tomcat9)\n            Base_Check\n            Docker_Check\n            tomcat9_docker_Install\n            ;;\n        -tomcat6-src)\n            Proxy_Switch\n            Base_Check\n            tomcat6_src_Install\n            ;;\n        -tomcat7-src)\n            Proxy_Switch\n            Base_Check\n            tomcat7_src_Install\n            ;;\n        -tomcat8-src)\n            Proxy_Switch\n            Base_Check\n            tomcat8_src_Install\n            ;;\n        -tomcat9-src)\n            Proxy_Switch\n            Base_Check\n            tomcat9_src_Install\n            ;;\n        -nginx-src)\n            Proxy_Switch\n            Base_Check\n            nginx_Install\n            ;;\n        -nginx-pkg)\n            nginx_Install_pkg\n            ;;\n        -apache-pkg)\n            apache_Install_pkg\n            ;;\n        -php56)\n            Base_Check\n            php56_Install\n            ;;\n        -php72)\n            Base_Check\n            php72_Install\n            ;;\n        -php72-nginx)\n            Base_Check\n            php72_nginx_Install\n            ;;\n        -help | help)\n            printf \"\\033c\"\n            Help_Info\n            exit 1\n            ;;\n    esac\ndone\n\necho -e \"\\033[1;36m \\n-----OVER-----\\n \\033[0m\"\n"
        },
        {
          "name": "f8x.ps1",
          "type": "blob",
          "size": 2.853515625,
          "content": "# ======================== !! NOTE !! ========================\n#  ________ ________ ________ ________ ________ ________ ________ ________ ________     ___    ___\n# |\\  _____\\\\  _____\\\\  _____\\\\  _____\\\\  _____\\\\  _____\\\\  _____\\\\  _____\\\\   __  \\   |\\  \\  /  /|\n# \\ \\  \\__/\\ \\  \\__/\\ \\  \\__/\\ \\  \\__/\\ \\  \\__/\\ \\  \\__/\\ \\  \\__/\\ \\  \\__/\\ \\  \\|\\  \\  \\ \\  \\/  / /\n#  \\ \\   __\\\\ \\   __\\\\ \\   __\\\\ \\   __\\\\ \\   __\\\\ \\   __\\\\ \\   __\\\\ \\   __\\\\ \\  \\\\\\  \\  \\ \\    / /\n#   \\ \\  \\_| \\ \\  \\_| \\ \\  \\_| \\ \\  \\_| \\ \\  \\_| \\ \\  \\_| \\ \\  \\_| \\ \\  \\_| \\ \\  \\\\\\  \\  /     \\/\n#    \\ \\__\\   \\ \\__\\   \\ \\__\\   \\ \\__\\   \\ \\__\\   \\ \\__\\   \\ \\__\\   \\ \\__\\   \\ \\_______\\/  /\\   \\\n#     \\|__|    \\|__|    \\|__|    \\|__|    \\|__|    \\|__|    \\|__|    \\|__|    \\|_______/__/ /\\ __\\\n#                                                                                      |__|/ \\|__|\n# 注: 该脚本仅用于安装基础软件\n# Note: This script is only used to install the base software\n# To execute this script:\n# 1) Open powershell window as administrator\n# 2) Allow script execution by running command \"set-ExecutionPolicy Unrestricted\"\n# 3) running \"curl -o f8x.ps1 https://f8x.io/ps1\"\n# 4) Unblock the install script by running \"Unblock-File .\\f8x.ps1\"\n# 5) Execute the script by running \".\\f8x.ps1\"\n\nparam (\n  [string]$chrome_link = \"http://dl.google.com/chrome/install/375.126/chrome_installer.exe\"\n)\n\nfunction Banner {\n\nWrite-Host \"  _______   ___   ___   ___ \"\nWrite-Host \" |   ____| / _ \\  \\  \\ /  / \"\nWrite-Host \" |  |__   | (_) |  \\  V  / \"\nWrite-Host \" |   __|   > _ <    >   < \"\nWrite-Host \" |  |     | (_) |  /  .  \\ \"\nWrite-Host \" |__|      \\___/  /__/ \\__\\ \"\n\n}\n\nfunction chocolatey-install {\n\n  Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\n\n}\n\nfunction chrome-install {\n    Write-Host \"Installing chrome\"\n    $Path = $env:TEMP; $Installer = \"chrome_installer.exe\";\n    Invoke-WebRequest $chrome_link -OutFile $Path\\$Installer;\n    Start-Process -FilePath $Path\\$Installer -Args \"/silent /install\" -Verb RunAs -Wait;\n    Remove-Item $Path\\$Installer\n    Write-Host \"Successfully installed chrome\"\n}\n\nBanner\n# chrome-install\nchocolatey-install\n\n# proxy\n# choco config set proxy <locationandport>\n\n# update\nchoco outdated\n\n# base_install\n# https://community.chocolatey.org/packages\nchoco install -y notepadplusplus.install\nchoco install -y 7zip.install\n# choco install -y jdk8\nchoco install -y jdk11\nchoco install -y python3\n# choco install -y git\n# choco install -y 010editor.install\nchoco install -y everything\n# choco install -y firefox\nchoco install -y wireshark\nchoco install -y go\nchoco install -y vscode\nchoco install -y processhacker\nchoco install -y psexec\nchoco install -y procexp\nchoco install -y googlechrome"
        },
        {
          "name": "f8x_version.sh",
          "type": "blob",
          "size": 14.1669921875,
          "content": "#!/usr/bin/env bash\n#set -x\n\n# ===================== Basic variable settings =====================\nP_Dir=/pentest\nT_Dir=/ffffffff0x\nDefault_DNS=223.5.5.5\nProxy_URL=\"https://cdn.ffffffff0x.com/?durl=https://codeload.github.com/rofl0r/proxychains-ng/zip/master\"\n\n# ===================== Software version variable setting (dev) =====================\n# https://www.ruby-lang.org/en/downloads/\nRuby_Ver=\"3.0\"\nRuby_Dir=\"ruby-3.0.0\"\nRuby_bin=\"ruby-3.0.0.tar.gz\"\n# https://go.dev/dl/\nGo_Version=\"go1.21.4\"\nGo_Bin_amd64=\"go1.21.4.linux-amd64.tar.gz\"\nGo_Bin_arm64=\"go1.21.4.linux-arm64.tar.gz\"\n# https://nodejs.org/dist/\nnode_Ver=\"v20.10.0\"\nnode_bin_amd64=\"node-v20.10.0-linux-x64.tar.xz\"\nnode_bin_arm64=\"node-v20.10.0-linux-arm64.tar.xz\"\nnode_Dir_amd64=\"node-v20.10.0-linux-x64\"\nnode_Dir_arm64=\"node-v20.10.0-linux-arm64\"\n# http://nginx.org/en/download.html\nnginx_Ver=\"1.18.0\"\nnginx_bin=\"nginx-1.18.0.tar.gz\"\n# https://www.lua.org/download.html\nlua_bin=\"lua-5.4.3.tar.gz\"\nlua_dir=\"lua-5.4.3\"\n# https://github.com/stedolan/jq/releases\njq_bin=\"jq-1.7.1.zip\"\njq_dir=\"jq-1.7.1\"\njq_ver=\"jq-1.7.1\"\n# https://github.com/tsl0922/ttyd/releases\nttyd_Ver=\"1.7.7\"\nttyd_bin_amd64=\"ttyd.x86_64\"\nttyd_bin_arm64=\"ttyd.arm\"\n# https://github.com/coder/code-server\ncode_server_Ver=\"v4.92.2\"\ncode_server_bin1_amd64=\"code-server-4.92.2-amd64.rpm\"\ncode_server_bin2_amd64=\"code-server_4.92.2_amd64.deb\"\ncode_server_bin1_arm64=\"code-server-4.92.2-arm64.rpm\"\ncode_server_bin2_arm64=\"code-server_4.92.2_arm64.deb\"\n# https://www.python.org/downloads/\npy37_ver=\"3.7.12\"\npy37_bin=\"Python-3.7.12.tar.xz\"\npy37_dir=\"Python-3.7.12\"\npy38_ver=\"3.8.12\"\npy38_bin=\"Python-3.8.12.tar.xz\"\npy38_dir=\"Python-3.8.12\"\npy39_ver=\"3.9.8\"\npy39_bin=\"Python-3.9.8.tar.xz\"\npy39_dir=\"Python-3.9.8\"\npy310_ver=\"3.10.4\"\npy310_bin=\"Python-3.10.4.tar.xz\"\npy310_dir=\"Python-3.10.4\"\n# https://www.googleapis.com/download/storage/v1/b/chromium-browser-snapshots/o/Linux_x64%2FLAST_CHANGE?alt=media\n# https://commondatastorage.googleapis.com/chromium-browser-snapshots/index.html?prefix=Linux_x64/958422/\nchromium_Ver=\"958422\"\n# https://phantomjs.org/download.html\nphantomjs_bin=\"phantomjs-2.1.1-linux-x86_64.tar.bz2\"\nphantomjs_dir=\"phantomjs-2.1.1-linux-x86_64\"\n\n# ===================== Software version variable setting (pentest) =====================\n# https://github.com/fatedier/frp/releases\nfrp_Ver=\"v0.60.0\"\nfrp_File_amd64=\"frp_0.60.0_linux_amd64.tar.gz\"\nfrp_File_arm64=\"frp_0.60.0_linux_arm64.tar.gz\"\nfrp_Dir_amd64=\"frp_0.60.0_linux_amd64\"\nfrp_Dir_arm64=\"frp_0.60.0_linux_arm64\"\n# https://github.com/ehang-io/nps/releases\nnps_Ver=\"v0.26.10\"\nnps_File_amd64=\"linux_amd64_server.tar.gz\"\nnps_File_arm64=\"linux_arm64_server.tar.gz\"\n# https://github.com/wikiZ/RedGuard/releases\nRedGuard_Ver=\"24.06.18\"\nRedGuard_File_amd64=\"RedGuard_64\"\n# https://github.com/RustScan/RustScan/releases\nRustScan_Version=\"2.0.1\"\nRustScan_Install=\"rustscan_2.0.1_amd64.deb\"\n# https://github.com/boy-hack/ksubdomain/releases\nksubdomain_Ver=\"v1.9.9\"\nksubdomain_Install=\"KSubdomain-v1.9.9-linux-amd64.tar\"\n# https://github.com/chaitin/xray/releases\nxray_Ver=\"1.9.11\"\nxray_File_amd64=\"xray_linux_amd64.zip\"\nxray_bin_amd64=\"xray_linux_amd64\"\nxray_File_arm64=\"xray_linux_arm64.zip\"\nxray_bin_arm64=\"xray_linux_arm64\"\n# https://github.com/gobysec/Goby/releases\ngoby_Ver=\"Beta1.9.325\"\ngoby_File=\"goby-linux-x64-1.9.325.zip\"\n# https://github.com/shadow1ng/fscan/releases\nfscan_Ver=\"1.8.4\"\nfscan_Install_amd64=\"fscan\"\nfscan_Install_arm64=\"fscan_arm64\"\n# https://github.com/ffuf/ffuf/releases\nffuf_Ver=\"v2.1.0\"\nffuf_Install_amd64=\"ffuf_2.1.0_linux_amd64.tar.gz\"\nffuf_Install_arm64=\"ffuf_2.1.0_linux_arm64.tar.gz\"\n# https://github.com/projectdiscovery/nuclei/releases\nNuclei_Ver=\"v3.3.1\"\nNuclei_Install_amd64=\"nuclei_3.3.1_linux_amd64.zip\"\nNuclei_Install_arm64=\"nuclei_3.3.1_linux_arm64.zip\"\n# https://github.com/Ne0nd0g/merlin/releases\nmerlin_Ver=\"v1.5.0\"\nmerlin_Install_amd64=\"merlinServer-Linux-x64.7z\"\nmerlin_agent_windows=\"merlinAgent-Windows-x64.7z\"\nmerlin_agent_linux=\"merlinAgent-Linux-x64.7z\"\nmerlin_agent_darwin=\"merlinAgent-Darwin-x64.7z\"\n# https://github.com/chaitin/rad/releases\nrad_Ver=\"1.0\"\nrad_File_amd64=\"rad_linux_amd64.zip\"\nrad_File_arm64=\"rad_linux_arm64.zip\"\nrad_bin_amd64=\"rad_linux_amd64\"\nrad_bin_arm64=\"rad_linux_arm64\"\n# https://github.com/Qianlitp/crawlergo/releases\ncrawlergo_Ver=\"v0.4.4\"\ncrawlergo_File_amd64=\"crawlergo_linux_amd64\"\ncrawlergo_File_arm64=\"crawlergo_linux_arm64\"\n# https://github.com/gloxec/CrossC2/releases\nCrossC2_Ver=\"v3.3\"\n# https://github.com/nodauf/Girsh/releases\nGirsh_Ver=\"v0.40\"\nGirsh_bin_amd64=\"Girsh_0.40_linux_amd64.tar.gz\"\nGirsh_bin_arm64=\"Girsh_0.40_linux_arm64.tar.gz\"\n# https://github.com/bettercap/bettercap/releases\nbettercap_Ver=\"v2.31.1\"\nbettercap_bin_amd64=\"bettercap_linux_amd64_v2.31.1.zip\"\nbettercap_bin_arm64=\"bettercap_linux_aarch64_v2.31.1.zip\"\n# https://github.com/mitmproxy/mitmproxy/releases\nmitmproxy_Ver=\"10.4.2\"\nmitmproxy_bin=\"mitmproxy-10.4.2-linux-x86_64.tar.gz\"\n# https://github.com/projectdiscovery/naabu/releases\nnaabu_Ver=\"v2.3.1\"\nnaabu_bin=\"naabu_2.3.1_linux_amd64.zip\"\n# https://github.com/projectdiscovery/proxify/releases\nproxify_Ver=\"v0.0.15\"\nproxify_bin_amd64=\"proxify_0.0.15_linux_amd64.zip\"\nproxify_bin_arm64=\"proxify_0.0.15_linux_arm64.zip\"\n# https://github.com/hashcat/hashcat/releases\nhashcat_Version=\"hashcat-6.2.6\"\n# https://github.com/projectdiscovery/subfinder/releases\nsubfinder_Ver=\"v2.6.6\"\nsubfinder_bin_amd64=\"subfinder_2.6.6_linux_amd64.zip\"\nsubfinder_bin_arm64=\"subfinder_2.6.6_linux_arm64.zip\"\n# https://github.com/projectdiscovery/httpx/releases\nhttpx_Ver=\"v1.6.8\"\nhttpx_bin_amd64=\"httpx_1.6.8_linux_amd64.zip\"\nhttpx_bin_arm64=\"httpx_1.6.8_linux_arm64.zip\"\n# https://github.com/projectdiscovery/mapcidr/releases\nmapcidr_Ver=\"v1.1.34\"\nmapcidr_bin_amd64=\"mapcidr_1.1.34_linux_amd64.zip\"\nmapcidr_bin_arm64=\"mapcidr_1.1.34_linux_arm64.zip\"\n# https://github.com/ffffffff0x/iprange/releases\niprange_Ver=\"v1.0.1\"\niprange_bin_amd64=\"iprange_1.0.1_linux_amd64.tar.gz\"\niprange_bin_arm64=\"iprange_1.0.1_linux_arm64.tar.gz\"\n# https://github.com/projectdiscovery/dnsx/releases\ndnsx_Ver=\"v1.2.1\"\ndnsx_bin_amd64=\"dnsx_1.2.1_linux_amd64.zip\"\ndnsx_bin_arm64=\"dnsx_1.2.1_linux_arm64.zip\"\n# https://github.com/iBotPeaches/Apktool/releases\napktool_Ver=\"v2.9.3\"\napktool_bin=\"apktool_2.9.3.jar\"\n# https://github.com/lc/gau/releases\ngau_Ver=\"v2.2.3\"\ngau_bin=\"gau_2.2.3_linux_amd64.tar.gz\"\n# https://github.com/skylot/jadx/releases\njadx_Ver=\"v1.5.0\"\njadx_bin=\"jadx-1.5.0.zip\"\n# https://github.com/qtc-de/remote-method-guesser/releases\nrmg_Ver=\"v5.1.0\"\nrmg_bin=\"rmg-5.1.0-jar-with-dependencies.jar\"\n# https://github.com/No-Github/anew/releases\nanew_Ver=\"v1.0.3\"\nanew_bin_amd64=\"anew_1.0.3_linux_amd64.tar.gz\"\nanew_bin_arm64=\"anew_1.0.3_linux_arm64.tar.gz\"\n# https://github.com/zu1k/nali/releases\nnali_Ver=\"v0.8.1\"\nnali_bin_amd64=\"nali-linux-amd64-v0.8.1.gz\"\nnali_bin_arm64=\"nali-linux-armv8-v0.8.1.gz\"\n# https://github.com/hahwul/dalfox/releases\ndalfox_Ver=\"v2.8.2\"\ndalfox_bin_amd64=\"dalfox_2.8.2_linux_amd64.tar.gz\"\ndalfox_bin_arm64=\"dalfox_2.8.2_linux_arm64.tar.gz\"\n# https://github.com/ffffffff0x/DomainSplit/releases\nDomainSplit_Ver=\"1.0\"\n# https://github.com/WangYihang/Platypus/releases\nPlatypus_Ver=\"v1.5.1\"\nPlatypus_bin_amd64=\"Platypus_linux_amd64\"\nPlatypus_bin_arm64=\"Platypus_linux_arm64\"\n# https://github.com/OWASP/Amass/releases\nAmass_Ver=\"v4.2.0\"\nAmass_bin_amd64=\"amass_linux_amd64.zip\"\nAmass_bin_arm64=\"amass_linux_arm64.zip\"\n# https://github.com/OJ/gobuster/releases\ngobuster_Ver=\"v3.6.0\"\ngobuster_bin_amd64=\"gobuster_Linux_x86_64.tar.gz\"\ngobuster_bin_arm64=\"gobuster_Linux_arm64.tar.gz\"\n# https://github.com/jaeles-project/gospider/releases\ngospider_Ver=\"v1.1.6\"\ngospider_bin_amd64=\"gospider_v1.1.6_linux_x86_64.zip\"\ngospider_dir_amd64=\"gospider_v1.1.6_linux_x86_64\"\ngospider_bin_arm64=\"gospider_v1.1.6_linux_arm64.zip\"\ngospider_dir_arm64=\"gospider_v1.1.6_linux_arm64\"\n# https://github.com/tomnomnom/unfurl/releases\nunfurl_Ver=\"v0.4.3\"\nunfurl_Bin=\"unfurl-linux-amd64-0.4.3.tgz\"\n# https://github.com/tomnomnom/qsreplace/releases\nqsreplace_Ver=\"v0.0.3\"\nqsreplace_bin=\"qsreplace-linux-amd64-0.0.3.tgz\"\n# https://github.com/jaeles-project/jaeles/releases\njaeles_Ver=\"beta-v0.17\"\njaeles_bin=\"jaeles-v0.17-linux.zip\"\njaeles_sbin=\"jaeles-v0.17-linux\"\n# https://github.com/lc/subjs/releases\nsubjs_Ver=\"v1.0.1\"\nsubjs_bin=\"subjs_1.0.1_linux_amd64.tar.gz\"\n# https://github.com/tomnomnom/assetfinder/releases\nassetfinder_Ver=\"v0.1.1\"\nassetfinder_bin=\"assetfinder-linux-amd64-0.1.1.tgz\"\n# https://github.com/zhzyker/dismap/releases\ndismap_Ver=\"v0.4\"\ndismap_bin_amd64=\"dismap-0.4-linux-amd64\"\ndismap_bin_arm64=\"dismap-0.4-linux-arm64\"\n# https://github.com/robhax/gojwtcrack/releases\ngojwtcrack_Ver=\"0.1\"\ngojwtcrack_bin=\"gojwtcrack-linux-amd64.gz\"\n# https://github.com/fofapro/fapro/releases\nfapro_Ver=\"v0.65\"\nfapro_bin_amd64=\"fapro_linux_x86_64.tar.gz\"\nfapro_bin_arm64=\"fapro_linux_arm64.tar.gz\"\n# https://github.com/wh1t3p1g/ysomap/releases\nysomap_Ver=\"v0.1.5\"\nysomap_bin=\"ysomap.jar\"\nJNDIExploit_Ver=\"1.1\"\nJNDIExploit_bin=\"JNDIExploit.zip\"\n# https://github.com/shmilylty/netspy/releases\nnetspy_Ver=\"v0.0.5\"\nnetspy_bin_amd64=\"netspy_linux_amd64.zip\"\nnetspy_bin_arm64=\"netspy_linux_arm64.zip\"\n# https://github.com/cdk-team/CDK/releases\ncdk_Ver=\"v1.5.3\"\ncdk_bin_amd64=\"cdk_linux_amd64\"\ncdk_bin_arm64=\"cdk_linux_arm64\"\n# https://github.com/projectdiscovery/interactsh/releases\ninteractsh_Ver=\"v1.2.0\"\ninteractsh_client_bin_amd64=\"interactsh-client_1.2.0_Linux_amd64.zip\"\ninteractsh_server_bin_amd64=\"interactsh-server_1.2.0_Linux_amd64.zip\"\ninteractsh_client_bin_arm64=\"interactsh-client_1.2.0_Linux_arm64.zip\"\ninteractsh_server_bin_arm64=\"interactsh-server_1.2.0_Linux_arm64.zip\"\n# https://github.com/BishopFox/sliver/releases\nsliver_Ver=\"v1.5.42\"\nsliver_bin_Server=\"sliver-server_linux\"\nsliver_bin_Client=\"sliver-client_linux\"\n# https://github.com/mstxq17/MoreFind/releases\nMoreFind_Ver=\"v1.5.7\"\nMoreFind_bin_amd64=\"MoreFind_v1.5.7_linux_x86_64.tar.gz\"\nMoreFind_bin_arm64=\"MoreFind_v1.5.7_Linux_arm64.tar.gz\"\n# https://github.com/praetorian-inc/fingerprintx\nfingerprintx_Ver=\"v1.1.13\"\nfingerprintx_Install_amd64=\"fingerprintx_1.1.13_linux_amd64.tar.gz\"\nfingerprintx_Install_arm64=\"fingerprintx_1.1.13_linux_arm64.tar.gz\"\n# https://github.com/teamssix/cf\ncf_Ver=\"v0.5.0\"\ncf_Install_amd64=\"cf_v0.5.0_linux_amd64.tar.gz\"\ncf_Install_arm64=\"cf_v0.5.0_linux_arm64.tar.gz\"\n# https://github.com/su18/ysoserial\nysuserial_Ver=\"v1.5\"\nysuserial_bin=\"ysuserial-1.5-su18-all.jar\"\n# https://github.com/projectdiscovery/katana\nkatana_Ver=\"v1.1.0\"\nkatana_bin_amd64=\"katana_1.1.0_linux_amd64.zip\"\nkatana_bin_arm64=\"katana_1.1.0_linux_arm64.zip\"\n# https://github.com/projectdiscovery/uncover\nuncover_Ver=\"v0.0.9\"\nuncover_bin_amd64=\"uncover_0.0.9_linux_amd64.zip\"\nuncover_bin_arm64=\"uncover_0.0.9_linux_arm64.zip\"\n# https://github.com/pmiaowu/HostCollision\nHostCollision_Ver=\"HostCollision-2.2.8\"\nHostCollision_Bin=\"HostCollision-2.2.8.zip\"\nHostCollision_dir=\"HostCollision-2.2.8\"\n# https://github.com/projectdiscovery/asnmap\nasnmap_Ver=\"v1.1.1\"\nasnmap_bin_amd64=\"asnmap_1.1.1_linux_amd64.zip\"\nasnmap_bin_arm64=\"asnmap_1.1.1_linux_arm64.zip\"\n# https://github.com/projectdiscovery/tlsx\ntlsx_Ver=\"v1.1.7\"\ntlsx_bin_amd64=\"tlsx_1.1.7_linux_amd64.zip\"\ntlsx_bin_arm64=\"tlsx_1.1.7_linux_arm64.zip\"\n# https://github.com/chainreactors/gogo\ngogo_Ver=\"v2.13.3\"\ngogo_File_amd64=\"gogo_linux_amd64\"\ngogo_File_arm64=\"gogo_linux_arm64\"\n# https://github.com/projectdiscovery/simplehttpserver\nsimplehttpserver_Ver=\"v0.0.6\"\nsimplehttpserver_bin_amd64=\"simplehttpserver_0.0.6_linux_amd64.zip\"\nsimplehttpserver_bin_arm64=\"simplehttpserver_0.0.6_linux_arm64.zip\"\n# https://github.com/ropnop/kerbrute\nkerbrute_bin=\"kerbrute_linux_amd64\"\nkerbrute_Ver=\"v1.0.3\"\n# https://github.com/lzzbb/Adinfo\nAdinfo_bin=\"Adinfo_linux\"\nAdinfo_Ver=\"v0.3\"\n# https://github.com/zema1/suo5\nsuo5_Ver=\"v1.3.0\"\nsuo5_bin_amd64=\"suo5-linux-amd64\"\nsuo5_bin_arm64=\"suo5-linux-arm64\"\n# https://github.com/projectdiscovery/alterx\nalterx_Ver=\"v0.0.4\"\nalterx_bin_amd64=\"alterx_0.0.4_linux_amd64.zip\"\nalterx_bin_arm64=\"alterx_0.0.4_linux_arm64.zip\"\n\n# ===================== Software version variable setting (other) =====================\n# https://github.com/AdguardTeam/AdGuardHome/releases\nAdGuardHome_Version=\"v0.107.52\"\nAdGuardHome_File_amd64=\"AdGuardHome_linux_amd64.tar.gz\"\nAdGuardHome_File_arm64=\"AdGuardHome_linux_arm64.tar.gz\"\n# https://github.com/junegunn/fzf/releases\nfzf_Ver=\"0.55.0\"\nfzf_bin_amd64=\"fzf-0.55.0-linux_amd64.tar.gz\"\nfzf_bin_arm64=\"fzf-0.55.0-linux_arm64.tar.gz\"\n# https://github.com/iawia002/lux/releases\nlux_Ver=\"v0.24.1\"\nlux_bin_amd64=\"lux_0.24.1_Linux_x86_64.tar.gz\"\nlux_bin_arm64=\"lux_0.24.1_Linux_ARM64.tar.gz\"\n# https://github.com/tomnomnom/gron/releases\ngron_Ver=\"v0.7.1\"\ngron_bin_amd64=\"gron-linux-amd64-0.7.1.tgz\"\ngron_bin_arm64=\"gron-linux-arm64-0.7.1.tgz\"\n# https://github.com/abhimanyu003/sttr/releases\nsttr_Ver=\"v0.2.23\"\nsttr_bin_amd64=\"sttr_0.2.23_linux_amd64.tar.gz\"\nsttr_bin_arm64=\"sttr_0.2.23_linux_arm64.tar.gz\"\n# https://github.com/sharkdp/bat/releases\nbat_Ver=\"v0.24.0\"\nbat_bin_amd64=\"bat-musl_0.24.0_amd64.deb\"\nbat_bin_arm64=\"bat-musl_0.24.0_i686.deb\"\n# https://github.com/muesli/duf/releases\nduf_Ver=\"v0.8.1\"\nduf_bin1_amd64=\"duf_0.8.1_linux_amd64.rpm\"\nduf_bin2_amd64=\"duf_0.8.1_linux_amd64.deb\"\nduf_bin1_arm64=\"duf_0.8.1_linux_arm64.rpm\"\nduf_bin2_arm64=\"duf_0.8.1_linux_arm64.deb\"\n# https://github.com/dalance/procs/releases\nprocs_Ver=\"v0.14.6\"\nprocs_bin=\"procs-v0.14.6-x86_64-linux.zip\"\n# https://github.com/sharkdp/fd/releases\nfd_Ver=\"v10.2.0\"\nfd_bin_amd64=\"fd_10.2.0_amd64.deb\"\nfd_bin_arm64=\"fd_10.2.0_arm64.deb\"\n# https://github.com/hashicorp/terraform/releases\nTerraform_Ver=\"1.9.5\"\nTerraform_bin_amd64=\"terraform_1.9.5_linux_amd64.zip\"\nTerraform_bin_arm64=\"terraform_1.9.5_linux_arm64.zip\"\n# https://github.com/aliyun/aliyun-cli/releases\naliyun_cli_Ver=\"v3.0.221\"\naliyun_cli_bin_amd64=\"aliyun-cli-linux-3.0.221-amd64.tgz\"\naliyun_cli_bin_arm64=\"aliyun-cli-linux-3.0.221-arm64.tgz\"\n# https://github.com/bcicen/ctop/releases/\nctop_Ver=\"v0.7.7\"\nctop_bin_amd64=\"ctop-0.7.7-linux-amd64\"\nctop_bin_arm64=\"ctop-0.7.7-linux-arm64\"\n# https://github.com/mikefarah/yq\nyq_Ver=\"v4.44.3\"\nyq_bin_amd64=\"yq_linux_amd64\"\nyq_bin_arm64=\"yq_linux_arm64\"\nyq_File_amd64=\"yq_linux_amd64.tar.gz\"\nyq_File_arm64=\"yq_linux_arm64.tar.gz\"\n# https://github.com/Dreamacro/clash\nclash_Ver=\"v1.17.0\"\nclash_bin_amd64=\"clash-linux-amd64-v1.17.0.gz\"\nclash_bin_arm64=\"clash-linux-arm64-v1.17.0.gz\"\nclash_File_amd64=\"clash-linux-amd64-v1.17.0\"\nclash_File_arm64=\"clash-linux-arm64-v1.17.0\"\n"
        }
      ]
    }
  ]
}