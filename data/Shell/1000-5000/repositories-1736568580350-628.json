{
  "metadata": {
    "timestamp": 1736568580350,
    "page": 628,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYyOQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "brson/rust-anthology",
      "stars": 1470,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0234375,
          "content": "*.md eol=lf\n* text=auto\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0107421875,
          "content": "*~\nbook\nout"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 1.271484375,
          "content": "[submodule \"sources/huonw.github.io\"]\n\tpath = sources/huonw.github.io\n\turl = https://github.com/huonw/huonw.github.io.git\n[submodule \"sources/rust-learning\"]\n\tpath = sources/rust-learning\n\turl = https://github.com/ctjhoa/rust-learning.git\n[submodule \"sources/blog\"]\n\tpath = sources/blog\n\turl = https://github.com/BurntSushi/blog.git\n[submodule \"sources/hoverbear.org\"]\n\tpath = sources/hoverbear.org\n\turl = https://github.com/Hoverbear/hoverbear.org\n[submodule \"sources/pnkfx-blog\"]\n\tpath = sources/pnkfx-blog\n\turl = https://github.com/pnkfelix/pnkfx-blog\n[submodule \"sources/blog.rust-lang.org\"]\n\tpath = sources/blog.rust-lang.org\n\turl = https://github.com/rust-lang/blog.rust-lang.org\n[submodule \"sources/llogiq.github.io\"]\n\tpath = sources/llogiq.github.io\n\turl = https://github.com/llogiq/llogiq.github.io\n[submodule \"sources/manishearth.github.io\"]\n\tpath = sources/manishearth.github.io\n\turl = https://github.com/Manishearth/manishearth.github.io\n[submodule \"sources/rustlog\"]\n\tpath = sources/rustlog\n\turl = https://github.com/lifthrasiir/rustlog\n[submodule \"sources/hjr3.github.io\"]\n\tpath = sources/hjr3.github.io\n\turl = https://github.com/hjr3/hjr3.github.io\n[submodule \"sources/DanielKeep.github.io\"]\n\tpath = sources/DanielKeep.github.io\n\turl = https://github.com/DanielKeep/DanielKeep.github.io\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.8974609375,
          "content": "language: rust\ndist: trusty\nrust: stable\n\nenv:\n  global:\n  - secure: \"EcVrZSDnlDXm7Uc9uKwSDzMFfHkVBe2bVmu0Bxd9LgXMqs08eCZOImXVLPi7ZFO+jjoCvpS8m/Vht95fcxt2CuuKof1s/bvDPrdhG78BJtTz7+ECFTusuoJbYyOykN6xKMG71kcttlaelumOqKNKAvVP+s8IpT5XoT/tV5pbEwSEqvwwEVsmW0vEc0/oT2UMlPGw/8emCGtcb+m/kOb3CpSsZ4I+9yQRd/hT+NRe2iZ8UcwJQDze6FrlwiOT7oEyK05brWZiCt5ndAoYJIuqW0vUn4mWcTsSn4Y6xrZQ1uTvyz0fkdkZ2AifJfgqhtw+N0bX+5n0jdGON8wPz5rjewUFPPIkmBhqRFn4ihxMJ52/Dw1kjPkznNmAjU7tP1TD3MZ0vu4NCJkwKUHqNvqLTP/i9IkwjYcb8dmSlAat+/3UXooIL7epla0nkoOxTut2LKR1FPtTnKRcKCP0ShlqEl25KVyh7/voa+vMXTRMsmoajrx9YU0G6Xo97xdD7pPoBcZi5HboBSRP8a3W78Z5o2T6E5SbVi/RZHi5cT3Ye9y+tUKkvh+JD24vBlceFs/EKXz2vQU/4QuBG5eIyNfQ7SZUk5kC4WMDV9lIC4vOmFxZfJpV0TpeHTqK7dRJ9ZkuYqBqoZtmVXkbaqHiJnBdG+LQR0Ej6HmvXzyWlP6xUx4=\"\n\nbefore_install:\n  - export PATH=$HOME/.cargo/bin:$PATH\n\ninstall:\n  - cargo install mdbook\n\nscript:\n  - ./build.sh\n  - mdbook test\n\nafter_success:\n  - ./deploy.sh\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.271484375,
          "content": "Some notes on Anthology maintenance.\n\nPresently, contributions that fix existing content are welcome.\nContributions that add chapters are not, as the selection process is\nunder reevalution.\n\n## Evaluating a blog post\n\n- Is there useful content? In particular, is there content that is not\n  already represented better in existing chapters?\n- Is the text well written? Brilliant prose is a no-brainer. We want\n  it. Average prose is also no reason to exclude a chapter, though for\n  practical reasons we need to keep the editing required to a\n  minimum. Poorer prose demands exceptional content.\n- Is the content substantial? A short text may not be a good\n  candidate, though short chapters with exceptional content that is\n  not well-represented elsewhere may still be good candidates.\n- Is the content likely to be obsoleted easily? Probably not a good\n  candidate.\n- Is the content too domain specific? Probably not a good candidate.\n- Does the content fit into some 'theme' with other content? Look for\n  places where we can group chapters into book sections.\n- Is the content still relevant and idiomatic?\n\n## Adding a blog post\n\nImporting a chapter to the book includes these steps:\n\n- Acquire the original source and convert it to markdown. This may\n  mean contacting the author if the source is not obviously\n  available. In these cases you should not assume they want their text\n  redistributed, so explain your purpose clearly. Sources to some\n  common blogs are in the `sources` directory of this repo as\n  submodules, but you may want to update the submodule before copying\n  them.\n- Create a markdown file in `src/` with a name reflecting the title.\n- If the source is spread across multiple blog posts, consolidate them\n  into one, with each given their own section heading, \"Part N:\n  $subtitle\".\n- Add a metadata footer, following existing convention. This does not\n  need to be complete yet, but if you have the original URL and the\n  licensing information, you may as well include it now.\n- Add the chapter in an appropriate place to `SUMMARY.md`.\n- Add the chapter to `into.md` with a one-paragraph description. If\n  the author does not have an entry in `authors.md` yet, you do not\n  need to add it now.\n- Run `mdbook test`. For any tests that fail either fix them or ignore\n  them. We will revisit later.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.130859375,
          "content": "# Rust Anthology 1\n\nThe best short-form writing about Rust, collected.\n\nRust needs more documentation, right? Well, yeah, it does, but there\nare actually a lot of great Rust docs out there right now, and a lot\nof great Rust writers! This project aims to collect their work into a\nsingle book.\n\n__Note: As of February 2020, this project is only lightly maintained. The only\nnotable thing here is [the master list](master-list.md), the final \"unevaluated\"\nsection which I add to occassionally.__\n\n[See the current draft](https://brson.github.io/rust-anthology).\n\n[![Travis Build Status][travis-build-status-svg]][travis-build-status]\n\n[travis-build-status]: https://travis-ci.org/brson/rust-anthology\n[travis-build-status-svg]: https://img.shields.io/travis/brson/rust-anthology.svg\n\n## Goals\n\n- The _primary_ goal is to collect valuable information into one\n  place, get it under test, and present it in a consistent way.\n- Celebrate authors of excellent Rust documentation.\n- Create a coherent full-length book.\n- Self-publish a book in print form to give away as conference prizes.\n- Create a yearly tradition of collecting the best Rust writing.\n- Incentivise yet more high-quality blogging about Rust with the anticipation\n  of being selected for next-year's book.\n\n## Building\n\nRust Anthology is built with [mdbook]. To build:\n\n```\ncargo install mdbook\nmdbook build\n```\n\n[mdbook]: https://github.com/azerupi/mdBook\n\nTesting is again with mdbook:\n\n```\nmdbook test\n```\n\n## Contributing\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md).\n\n## On curation\n\nThere is a lot of good writing about Rust. Not all of it will make the\ncut. We'll have to make some hard decisions, and some authors will\nprobably be disappointed at not being included. That's just reality,\nand we have to manage it as nicely as we can.\n\n## Authorship and licensing\n\nAuthors maintain the copyright to their chapters, and each chapter is\nlicensed individually according to the author's preference. Copyright\nof modifications to chapters as part of the editorial process is\nrelinquished to the original authors. Additional content, such as\nchapter descriptions, is owned by the contributing editor and licensed\nCC-BY-4.0.\n"
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 0.1650390625,
          "content": "#!/bin/bash\n\nset -ev\n\nmkdir -p out\nmdbook build --dest-dir out/1\n\nredirect='<meta http-equiv=\"refresh\" content=\"0; url=1/index.html\" />'\necho $redirect > out/index.html\n"
        },
        {
          "name": "deploy.sh",
          "type": "blob",
          "size": 0.7578125,
          "content": "#!/bin/bash\n\nset -ev\n\nif [ -z \"${TRAVIS_BRANCH:-}\" ]; then\n    echo \"This script may only be run from Travis!\"\n    exit 1\nfi\n\nif [ \"$TRAVIS_BRANCH\" != \"master\" ]; then\n    echo \"This commit was made against '$TRAVIS_BRANCH' and not master! No deploy!\"\n    exit 0\nfi\n\nif [ ! -d \"out\" ]; then\n    echo \"Run build.sh first\"\n    exit 1\nfi\n\necho \"Committing book directory to gh-pages branch\"\nREV=$(git rev-parse --short HEAD)\n\ncd out\n\ngit init\ngit remote add upstream \"https://${GH_TOKEN}@github.com/brson/rust-anthology.git\"\ngit config user.name \"Rust Anthology\"\ngit config user.email \"banderson@mozilla.com\"\ngit add -A .\ngit commit -qm \"Build Rust Anthology at ${TRAVIS_REPO_SLUG}@${REV}\"\n\necho \"Pushing gh-pages to GitHub\"\ngit push -q upstream HEAD:refs/heads/gh-pages --force\n"
        },
        {
          "name": "master-list.md",
          "type": "blob",
          "size": 28.2734375,
          "content": "# Rust Anthology Master List\n\nThis is a collection of substantial blog posts about Rust.\n\nIt additionally collects other notable sources of material that might\nbe useful to a Rust learner: [cheat sheets][cs], [examples and\nexercises][ee], and [additional long-form reading][lf]. In content it\nhas significant overlap with [rust-learning][rl], but with a different\nfocus.\n\n[cs]: #cheat-sheets\n[ee]: #examples-and-exercises\n[lf]: #additional-long-form-reading\n[rl]: https://github.com/ctjhoa/rust-learning\n\n__Note: As of February 2020, I am only adding \"unevaluated links\" to the bottom\nof this page. Someday I will get around to re-organizing this list.__\n\n## Anthology 1 candidates\n\n- Introduction\n  - [Understanding Over Guesswork](https://hoverbear.org/2015/09/12/understand-over-guesswork/)\n  - [An Alternative Introduction to Rust](http://words.steveklabnik.com/a-new-introduction-to-rust)\n  - [Learning Rust](https://medium.com/learning-rust)\n    - [Rust Basics](https://medium.com/learning-rust/rust-basics-e73304ab35c7)\n    - [Rust: Beyond the Basics](https://medium.com/learning-rust/rust-beyond-the-basics-4fc697e3bf4f)\n    - [Rust: The Tough Part](https://medium.com/learning-rust/rust-the-tough-part-2ea11ed3693e)\n  - [Rust and CSV Parsing](http://blog.burntsushi.net/csv/)\n  - [Rust for Functional Programmers](http://science.raphael.poss.name/rust-for-functional-programmers.html)\n  - Graydon's Lists\n    - [Five Lists of Six Things About Rust](http://graydon2.dreamwidth.org/214016.html)\n    - [Things Rust Shipped Without](http://graydon2.dreamwidth.org/218040.html)\n- Experience Reports\n  - [My Experience Writing Enjarify in Rust](https://medium.com/@robertgrosse/my-experience-rewriting-enjarify-in-rust-723089b406ad)\n  - [Rust: A Scala Engineer's Perspective](https://beachape.com/blog/2017/05/24/rust-from-scala/)\n  - [Giving up on wlroots-rs](http://way-cooler.org/blog/2019/04/29/rewriting-way-cooler-in-c.html)\n- Ownership\n  - [Where Rust Really Shines](https://manishearth.github.io/blog/2015/05/03/where-rust-really-shines/)\n  - [Rust Means Never Having to Close a Socket](http://blog.skylight.io/rust-means-never-having-to-close-a-socket/)\n  - [The Problem with Single-threaded Shared Mutability](https://manishearth.github.io/blog/2015/05/17/the-problem-with-shared-mutability/)\n  - [Rust Ownership the Hard Way](https://chrismorgan.info/blog/rust-ownership-the-hard-way.html)\n  - [Strategies for Solving \"cannot move out of\" Borrowing Errors](http://hermanradtke.com/2015/06/09/strategies-for-solving-cannot-move-out-of-borrowing-errors-in-rust.html)\n  - Interior Mutability In Rust\n    - [Interior mutability in Rust: what, why, how?](https://ricardomartins.cc/2016/06/08/interior-mutability)\n    - [Interior mutability in Rust, part 2: thread safety](https://ricardomartins.cc/2016/06/25/interior-mutability-thread-safety)\n    - [Interior mutability in Rust, part 3: behind the curtain](https://ricardomartins.cc/2016/07/11/interior-mutability-behind-the-curtain)\n  - [`&` vs. `ref` in Patterns](http://xion.io/post/code/rust-patterns-ref.html)\n  - Holy `std::borrow::Cow`\n    - [Holy `std::borrow::Cow`!](https://llogiq.github.io/2015/07/09/cow.html)\n    - [Holy `std::borrow::Cow` Redux!](https://llogiq.github.io/2015/07/10/cow-redux.html)\n  - [Graphical Depiction of Ownership and Borrowing in Rust](https://rufflewind.com/2017-02-15/rust-move-copy-borrow)\n  - [Wrapper Types in Rust: Choosing Your Guarantees](https://manishearth.github.io/blog/2015/05/27/wrapper-types-in-rust-choosing-your-guarantees/)\n- Traits\n  - [Abstraction Without Overhead](https://blog.rust-lang.org/2015/05/11/traits.html)\n  - [Going Down the Rabbit Hole with Rust Traits](http://www.jonathanturner.org/2016/02/down-the-rabbit-hole-with-traits.html)\n  - Huon's Trait Object Quadrilogy (All About Trait Objects)\n    - [Peeking Inside Trait Objects](https://huonw.github.io/blog/2015/01/peeking-inside-trait-objects/)\n    - [The `Sized` Trait](https://huonw.github.io/blog/2015/01/the-sized-trait/)\n    - [Object Safety](http://huonw.github.io/blog/2015/01/object-safety/)\n    - [Where `Self` meets `Sized`: Revisiting Object Safety](https://huonw.github.io/blog/2015/05/where-self-meets-sized-revisiting-object-safety/)\n  - [Rust Traits for Developer Friendly Libraries](https://benashford.github.io/blog/2015/05/24/rust-traits-for-developer-friendly-libraries/)\n- The Rust Language\n  - [The Many Kinds of Code Reuse in Rust](http://cglab.ca/~abeinges/blah/rust-reuse-and-recycle/)\n  - [Mixing Matching, Mutations and Moves](https://blog.rust-lang.org/2015/04/17/Enums-match-mutation-and-moves.html)\n  - [What are Sum, Product, and Pi types?](https://manishearth.github.io/blog/2017/03/04/what-are-sum-product-and-pi-types/)\n  - [Reading Rust Function Signatures](http://hoverbear.org/2015/07/10/reading-rust-function-signatures/)\n  - [Finding Closure in Rust](https://huonw.github.io/blog/2015/05/finding-closure-in-rust/)\n  - [Rust's Built-in Traits, the When, How & Why](https://llogiq.github.io/2015/07/30/traits.html)\n  - [Myths and Legends About Integer Overflow in Rust](https://huonw.github.io/blog/2016/04/myths-and-legends-about-integer-overflow-in-rust/)\n- Iterators\n  - [Effectively Using Iterators in Rust](http://hermanradtke.com/2015/06/22/effectively-using-iterators-in-rust.html)\n  - [A Journey Into Iterators](https://hoverbear.org/2015/05/02/a-journey-into-iterators/)\n  - [for loops in Rust](http://xion.io/post/code/rust-for-loop.html)\n  - [Little tour of multiple iterators implementation in Rust](https://blog.guillaume-gomez.fr/articles/2017-03-09+Little+tour+of+multiple+iterators+implementation+in+Rust)\n- Concurrency and Parallelism\n  - [Fearless Concurrency with Rust](http://blog.rust-lang.org/2015/04/10/Fearless-Concurrency.html)\n  - [How Rust Achieves Thread Safety](https://manishearth.github.io/blog/2015/05/30/how-rust-achieves-thread-safety/)\n  - [Defaulting to Thread-safety: Closures and Concurrency](https://huonw.github.io/blog/2015/05/defaulting-to-thread-safety/)\n  - [Some Notes on `Send` and `Sync`](https://huonw.github.io/blog/2015/02/some-notes-on-send-and-sync/)\n  - Niko's Rayon Quadrilogy\n    - [Rayon: Data Parallelism in Rust](http://smallcultfollowing.com/babysteps/blog/2015/12/18/rayon-data-parallelism-in-rust/)\n    - [Parallel Iterators in Rust Part 1: Foundations](http://smallcultfollowing.com/babysteps/blog/2016/02/19/parallel-iterators-part-1-foundations/)\n    - [Parallel Iterators in Rust Part 2: Producers](http://smallcultfollowing.com/babysteps/blog/2016/02/25/parallel-iterators-part-2-producers/)\n    - [Parallel Iterators in Rust Part 3: Consumers](http://smallcultfollowing.com/babysteps/blog/2016/11/14/parallel-iterators-part-3-consumers/)\n  - [Parallelizing Enjarify in Go and Rust](https://medium.com/@robertgrosse/parallelizing-enjarify-in-go-and-rust-21055d64af7e)\n  - [Lock-freedom Without Garbage Collection](https://aturon.github.io/blog/2015/08/27/epoch/)\n  - A Rusty Tale of Shared Memories and Passed Messages\n    - [Part 1](https://www.worthe-it.co.za/programming/2017/06/19/a-rusty-tale-of-shared-memories-and-passed-messages-1.html)\n    - [Part 2](https://www.worthe-it.co.za/programming/2017/07/11/a-rusty-tale-of-shared-memories-and-passed-messages-2.html)\n  - [Must Be This Tall to Write Multithreaded Code](https://bholley.net/blog/2015/must-be-this-tall-to-write-multi-threaded-code.html)\n- Rust in Practice\n  - [Rust Error Handling](http://blog.burntsushi.net/rust-error-handling/)\n  - [Why your first FizzBuzz implementation may not work](https://chrismorgan.info/blog/rust-fizzbuzz.html)\n  - Herman Radtke's `String` Trilogy\n    - [`String` vs. `&str` in Rust Functions](http://hermanradtke.com/2015/05/03/string-vs-str-in-rust-functions.html)\n    - [Creating a Rust Function That Accepts `String` or `&str`](http://hermanradtke.com/2015/05/06/creating-a-rust-function-that-accepts-string-or-str.html)\n    - [Creating a Rust Function That Returns `String` or `&str`](http://hermanradtke.com/2015/05/29/creating-a-rust-function-that-returns-string-or-str.html)\n  - Gankro's Collections Trilogy\n    - [Rust, Lifetimes, and Collections](http://cglab.ca/~abeinges/blah/rust-lifetimes-and-collections/)\n    - [Rust, Generics, and Collections](http://cglab.ca/~abeinges/blah/rust-generics-and-collections/)\n    - [Rust Collections Case Study: BTreeMap](http://cglab.ca/~abeinges/blah/rust-btree-case/)\n  - [Learning Rust with Entirely Too Many Linked Lists](http://cglab.ca/~abeinges/blah/too-many-lists/book/)\n  - [Working With C Unions in Rust FFI](http://hermanradtke.com/2016/03/17/unions-rust-ffi.html)\n  - [Quick tip: the `#[cfg_attr]` attribute](https://chrismorgan.info/blog/rust-cfg_attr.html)\n  - Using the `Option` Type Effectively\n    - [Part 1](http://blog.8thlight.com/dave-torre/2015/03/11/the-option-type.html)\n    - [Part 2](http://blog.8thlight.com/uku-taht/2015/04/29/using-the-option-type-effectively.html)\n  - [ripgrep code review](https://web.archive.org/web/20190401042439/http://blog.mbrt.it/2016-12-01-ripgrep-code-review/)\n  - [gnome-class: Integrating Rust and the GNOME object system](http://smallcultfollowing.com/babysteps/blog/2017/05/02/gnome-class-integrating-rust-and-the-gnome-object-system/)\n  - [Exploring Rust's standard library: system calls and errors](https://people.gnome.org/~federico/blog/rust-libstd-syscalls-and-errors.html)\n  - [I used to use pointers. Now what?](https://github.com/diwic/reffers-rs/blob/master/docs/Pointers.md)\n  - [Starting a New Rust Project Right, with error-chain](http://brson.github.io/2016/11/30/starting-with-error-chain)\n  - [Bugs You'll Probably Only Have in Rust](https://gankro.github.io/blah/only-in-rust/)\n  - [Using and_then and map combinators on the Rust Result Type](http://hermanradtke.com/2016/09/12/rust-using-and_then-and-map-combinators-on-result-type.html)\n  - [Mapping Over Arrays](https://llogiq.github.io/2016/04/28/arraymap.html)\n  - [From &str to Cow](http://blog.jwilm.io/from-str-to-cow/)\n- Idioms\n  - [Elegant Library APIs in Rust](https://scribbles.pascalhertleif.de/elegant-apis-in-rust.html)\n  - [Where Are You `From::from`?](https://llogiq.github.io/2015/11/27/from-into.html)\n  - [Rustic Bits](https://llogiq.github.io/2016/02/11/rustic.html)\n  - [Convenient and Idiomatic Conversions in Rust](https://ricardomartins.cc/2016/08/03/convenient_and_idiomatic_conversions_in_rust)\n  - [Pretty State Machine Patterns](https://hoverbear.org/2016/10/12/rust-state-machine-pattern/)\n- Macros\n  - [A Practical Introduction to Rust Macros](https://danielkeep.github.io/practical-intro-to-macros.html)\n  - Macros In Rust\n    - [Part 1](http://www.ncameron.org/blog/macros-in-rust-pt1/)\n    - [Part 2](http://www.ncameron.org/blog/macros-in-rust-pt2/)\n    - [Part 3](http://www.ncameron.org/blog/macros-in-rust-pt3/)\n    - [Part 4](http://www.ncameron.org/blog/macros-in-rust-pt4/)\n  - [Creating an enum iterator using Macros 1.1](https://cbreeden.github.io/Macros11/)\n  - [An Overview of Macros in Rust](http://words.steveklabnik.com/an-overview-of-macros-in-rust)\n- Unsafe Rust\n  - [Unsafe Rust: An Intro and Open Questions](http://cglab.ca/~abeinges/blah/rust-unsafe-intro/)\n  - [What Does Rust's `unsafe` Mean?](https://huonw.github.io/blog/2014/07/what-does-rusts-unsafe-mean/)\n  - [Memory Leaks are Memory Safe](https://huonw.github.io/blog/2016/04/memory-leaks-are-memory-safe/)\n  - [On Reference Counting and Leaks](http://smallcultfollowing.com/babysteps/blog/2015/04/29/on-reference-counting-and-leaks/)\n  - [A Few More Remarks on Reference Counting and Leaks](http://smallcultfollowing.com/babysteps/blog/2015/04/30/a-few-more-remarks-on-reference-counting-and-leaks/)\n  - [Pre-pooping Your Pants With Rust](http://cglab.ca/~abeinges/blah/everyone-poops/)\n  - Niko's Unsafe Abstractions Series\n    - [Unsafe Abstractions](http://smallcultfollowing.com/babysteps/blog/2016/05/23/unsafe-abstractions/)\n    - [The \"Tootsie Pop\" Model for Unsafe Code](http://smallcultfollowing.com/babysteps/blog/2016/05/27/the-tootsie-pop-model-for-unsafe-code/)\n    - [\"Tootsie Pop\" Followup](http://smallcultfollowing.com/babysteps/blog/2016/08/18/tootsie-pop-followup/)\n    - [Thoughts on Trusting Types in Unsafe Code](http://smallcultfollowing.com/babysteps/blog/2016/09/12/thoughts-on-trusting-types-and-unsafe-code/)\n    - [Observational Equivalence and Unsafe Code](http://smallcultfollowing.com/babysteps/blog/2016/10/02/observational-equivalence-and-unsafe-code/)\n    - [Assigning Blame to Unsafe Code](http://smallcultfollowing.com/babysteps/blog/2017/01/22/assigning-blame-to-unsafe-code/)\n    - [Unsafe Code and Shared References](http://smallcultfollowing.com/babysteps/blog/2017/02/01/unsafe-code-and-shared-references/)\n  - [How MutexGuard was Sync When It Should Not Have Been](https://www.ralfj.de/blog/2017/06/09/mutexguard-sync.html)\n  - [The Scope of Unsafe](https://www.ralfj.de/blog/2016/01/09/the-scope-of-unsafe.html)\n- Async I/O\n  - [Getting Acquainted with `mio`](https://hoverbear.org/2015/03/03/getting-acquainted-with-mio/)\n  - [My Basic Understanding of `mio` and Async I/O](http://hermanradtke.com/2015/07/12/my-basic-understanding-of-mio-and-async-io.html)\n  - [Creating a Simple Protocol With `mio`](http://hermanradtke.com/2015/09/12/creating-a-simple-protocol-when-using-rust-and-mio.html)\n  - [Managing Connection State With `mio`](http://hermanradtke.com/2015/10/23/managing-connection-state-with-mio-rust.html)\n  - [Zero-cost Futures in Rust](http://aturon.github.io/blog/2016/08/11/futures/)\n  - [Designing Futures for Rust](http://aturon.github.io/blog/2016/09/07/futures-design/)\n  - [Asynchronous Rust for Fun and Profit](http://xion.io/post/programming/rust-async-closer-look.html)\n  - [Understanding the Tokio Reactor Core](https://www.coredump.ch/2017/07/05/understanding-the-tokio-reactor-core/)\n- Web Programming\n  - [Touring a Fast, Safe, and Complete(ish) Web Service in Rust](https://brandur.org/rust-web)\n  - [Making a 100% Statically-Linked, Single-File Web App with React and Rust](https://anderspitman.net/2018/04/04/static-react-rust-webapp/)\n- Performance\n  - [Benchmarking In Rust](https://llogiq.github.io/2015/06/16/bench.html)\n  - [Profiling Rust Applications on Linux](https://llogiq.github.io/2015/07/15/profiling.html)\n  - [Does Your Code Leave a Trail of Slowness?](https://jackmott.github.io/2017/02/27/trail-of-slow.html)\n  - [Rust Faster!](https://llogiq.github.io/2015/10/03/fast.html)\n  - [Rust Performance: A story featuring perf and flamegraph on Linux](http://blog.adamperry.me/rust/2016/07/24/profiling-rust-perf-flamegraph/)\n  - [Zero-cost abstractions](https://ruudvanasseldonk.com/2016/11/30/zero-cost-abstractions)\n  - [ripgrep is faster than {grep, ag, git grep, ucg, pt, sift}](http://blog.burntsushi.net/ripgrep/)\n  - [Rust Performance Pitfalls](https://llogiq.github.io/2017/06/01/perf-pitfalls.html)\n  - [Optimizing `Rc` Memory Usage in Rust](https://medium.com/@robertgrosse/optimizing-rc-memory-usage-in-rust-6652de9e119e)\n  - [Why Is A Rust Executable Large?](https://lifthrasiir.github.io/rustlog/why-is-a-rust-executable-large.html)\n  - [Building Tiny Rust Binaries for Embedded Linux](https://jamesmunns.com/update/2018/04/01/tinyrocket.html)\n- Systems Programming\n  - [Making Terminal Applications in Rust with Termion](http://ticki.github.io/blog/making-terminal-applications-in-rust-with-termion/)\n  - [Rust + Nix = Easier Unix Systems Programming](http://kamalmarhubi.com/blog/2016/04/13/rust-nix-easier-unix-systems-programming-3/)\n- Embedded Programming\n  - Japaric's RTFM Series\n    - [Rust your ARM Microcontroller!](http://blog.japaric.io/quickstart/)\n    - [Fearless Concurrency in Your Microcontroller](http://blog.japaric.io/fearless-concurrency/)\n    - [Overhead Analysis of the RTFM Framework](http://blog.japaric.io/rtfm-overhead/)\n    - [The ITM and the Quest for Faster Logging](http://blog.japaric.io/itm/)\n    - [A CPU Monitor for the RTFM Framework](http://blog.japaric.io/cpu-monitor/)\n  - [Writing A Driver in Rust Using Embedded-Hal Traits for the RN4870 BLE Module](http://byronwasti.com/post/writing_a_ble_driver_in_rust/)\n- WASM\n  - [Making WebAssembly better for Rust and all languages](https://hacks.mozilla.org/2018/03/making-webassembly-better-for-rust-for-all-languages/)\n- The Rust Toolbox\n  - Travis on the Train\n    - [Helping Travis Catch the `rustc` Train](http://huonw.github.io/blog/2015/04/helping-travis-catch-the-rustc-train/)\n    - [Travis on the Train, Part 2](http://huonw.github.io/blog/2015/05/travis-on-the-train-part-2/)\n  - [Rust, Travis and GitHub Pages](http://hoverbear.org/2015/03/07/rust-travis-github-pages/)\n  - [Fuzzing is Magic](https://www.nibor.org/blog/fuzzing-is-magic---or-how-i-found-a-panic-in-rusts-regex-library/)\n  - [Rust Code Coverage Guide: kcov + Travis CI + Codecov / Coveralls](http://sunjay.ca/2016/07/25/rust-code-coverage)\n- Typesystem Trickery\n  - Type-level Shenanigans\n    - [Type-level Shenanigans](https://llogiq.github.io/2015/12/12/types.html)\n    - [More Type-level Shenanigans](https://llogiq.github.io/2016/02/23/moretypes.html)\n  - [Rust's Type System is Turing-Complete](https://sdleffler.github.io/RustTypeSystemTuringComplete/)\n- Internals\n  - [Four Years With Rust](http://words.steveklabnik.com/four-years-with-rust)\n  - [Optimizing Rust Struct Size: A 6-month Compiler Development Project](http://camlorn.net/posts/April%202017/rust-struct-field-reordering.html)\n  - [Rust Tidbits: What Is a Lang Item?](http://manishearth.github.io/blog/2017/01/11/rust-tidbits-what-is-a-lang-item/)\n  - [Reflections on Rusting Trust](https://manishearth.github.io/blog/2016/12/02/reflections-on-rusting-trust/)\n  - [How Rust is tested](https://brson.github.io/2017/07/10/how-rust-is-tested)\n- Culture\n  - [Stability as a Deliverable](https://blog.rust-lang.org/2014/10/30/Stability.html)\n  - [The Not Rocket Science Rule of Software Engineering](http://graydon2.dreamwidth.org/1597.html)\n  - [Rust Discovery, or: How I Figure Things Out](http://carol-nichols.com/2015/08/01/rustc-discovery/)\n  - RIIR\n    - [Rewrite Everything In Rust](http://robert.ocallahan.org/2016/02/rewrite-everything-in-rust.html)\n    - [Have You Considered Rewriting it In Rust?](http://transitiontech.ca/random/RIIR)\n    - [Why You Should, Actually, Rewrite it in Rust](https://unhandledexpression.com/2017/07/10/why-you-should-actually-rewrite-it-in-rust/)\n    - [How to Rewrite Your Project in Rust](https://unhandledexpression.com/2017/07/12/how-to-rewrite-you-project-in-rust/)\n  - [Making Your Open Source Project Newcomer Friendly](http://manishearth.github.io/blog/2016/01/03/making-your-open-source-project-newcomer-friendly/)\n  - [The Minimally-nice Open Source Software Maintainer](http://brson.github.io/2017/04/05/minimally-nice-maintainer)\n  - [Fireflowers](https://brson.github.io/fireflowers/)\n    - [Rust is More than Safety](http://words.steveklabnik.com/rust-is-more-than-safety)\n    - [Rust is Mostly Safety](http://graydon2.dreamwidth.org/247406.html)\n    - [Safety is Rust's Fireflower](https://thefeedbackloop.xyz/safety-is-rusts-fireflower/)\n    - [Fire Mario, Not Fire Flowers](http://words.steveklabnik.com/fire-mario-not-fire-flowers)\n    - [Fire Flowers and Marios](https://medium.com/@ag_dubs/fire-flowers-and-marios-marketing-rust-996b3fdbe8f3)\n    - [Rust is About Productivity](http://www.ncameron.org/blog/rust-is-about-productivity/)\n    - [Rust is Its Community](https://mgattozzi.com/rust-is)\n    - [My Thoughts on Rust in 2017](https://medium.com/@Hisako1337/rust-in-2017-8f2b57a67d9b#.3eegqri2g)\n    - [Rust is Software's Salvation](https://redox-os.org/news/rust-is-softwares-salvation-17/)\n    - [Rust is My Magic Whistle](http://anowell.com/posts/why-rust.html)\n    - [Rust is Something Old Made New](http://panpanick.ninja/30-12-2016.html)\n    - [Rust is Needed Now More than Ever](https://llogiq.github.io/2016/12/27/retro.html)\n    - [Rust is About Boldness](https://www.reddit.com/r/rust/comments/5lo6ny/rust_is_about_boldness/)\n    - [Rust is About Better Citizenship](https://kasma1990.gitlab.io/2017/01/01/rust-is-about-better-citizenship/)\n    - [Rust Marketing Pitch](https://santiagopastorino.com/rust-marketing-pitch/)\n- Uncategorized Chapters\n  - Let’s Stop Ascribing Meaning to Code Points\n    - [Let’s Stop Ascribing Meaning to Code Points](http://manishearth.github.io/blog/2017/01/14/stop-ascribing-meaning-to-unicode-code-points/)\n    - [Breaking Our Latin-1 Assumptions](https://manishearth.github.io/blog/2017/01/15/breaking-our-latin-1-assumptions/)\n  - [It's Time for a Memory Safety Intervention](https://tonyarcieri.com/it-s-time-for-a-memory-safety-intervention)\n  - [Rust Makes Invariants Explicit](https://medium.com/@robertgrosse/rust-makes-implicit-invariants-explicit-baf4cf17ae50)\n  - [Why Type Systems Matter](https://matthias-endler.de/2017/why-type-systems-matter/)\n  - [Building a Microservice in Rust](https://insanitybit.github.io/2017/07/10/building-a-microservice-in-rust)\n  - [100 Days of Rust, or, A Series of Brick Walls](https://brandur.org/fragments/rust-brick-walls)\n  - [Exploring 4 Languages: Integrity and Consistency](http://www.chriskrycho.com/2018/exploring-4-languages-integrity-and-consistency.html)\n  - [Cutting Corners vs. Productivity](https://llogiq.github.io/2018/04/03/corners.html)\n\n## Cheat Sheets\n\n- [Periodic Table of Rust Types](http://cosmic.mearie.org/2014/01/periodic-table-of-rust-types)\n- [Rust String Conversions Cheat Sheet](https://docs.google.com/spreadsheets/d/19vSPL6z2d50JlyzwxariaYD6EU2QQUQqIDOGbiGQC7Y/pubhtml?gid=0&single=true)\n- [Rust Iterator Cheat Sheet](https://danielkeep.github.io/itercheat_baked.html)\n- [Rust Container Cheet Sheet](https://docs.google.com/presentation/d/1q-c7UAyrUlM-eZyTo1pd8SZ0qwA_wYxmPZVOQkoDmH4/edit)\n- [Rust API Guidelines](https://github.com/brson/rust-api-guidelines)\n\n## Examples and Exercises\n\n- [Rust By Example](https://www.rustbyexample.com)\n- [rustlings](https://github.com/carols10cents/rustlings)\n- [exercism.io](http://www.exercism.io/languages/rust)\n- [Rust Cookbook](https://brson.github.io/rust-cookbook)\n\n## Additional Long-Form Reading\n\n- [The Little Book of Rust Books](https://lborb.github.io/book/)\n- [The Rust Book (2nd Edition)](https://doc.rust-lang.org/nightly/book/second-edition/)\n- [The Rust Book (1st Edition)](https://doc.rust-lang.org/nightly/book/first-edition/)\n- [The Unstable Book](https://doc.rust-lang.org/nightly/unstable-book/)\n- [The Rustonomicon](https://doc.rust-lang.org/nightly/nomicon/)\n- [The Rust Reference](https://doc.rust-lang.org/nightly/reference/)\n- [Writing an OS in Rust](http://os.phil-opp.com/)\n- [Rust 101](https://www.ralfj.de/projects/rust-101/main.html)\n- [The Little Book of Rust Macros](https://danielkeep.github.io/tlborm/)\n- [The Rust FFI Omnibus](http://jakegoulding.com/rust-ffi-omnibus/?updated=2015-11-08)\n- [Discovery: Discover the World of Microcontrollers Through Rust](https://japaric.github.io/discovery/)\n- [Roguelike Tutorial in Rust + tcod](https://tomassedovic.github.io/roguelike-tutorial/)\n- [Learning Rust](https://learning-rust.github.io)\n- [Unsafe Code Guidelines](https://rust-lang.github.io/unsafe-code-guidelines/)\n- [Rust in Easy English](https://dhghomon.github.io/easy_rust/Chapter_1.html)\n\n## Completely Unevaluated Links\n\n- https://dtolnay.github.io/rust-quiz/18\n- https://github.com/dtolnay/semver-trick\n- https://medium.com/@edwardpku/being-an-intermediate-rust-programmer-in-one-day-37283bb1b0b0?from=timeline&isappinstalled=0\n- https://blog.rust-lang.org/2018/12/21/Procedural-Macros-in-Rust-2018.html\n- https://rust-lang-nursery.github.io/api-guidelines/documentation.html#documentation\n- https://rust-random.github.io/book/\n- https://stjepang.github.io/2019/01/29/lock-free-rust-crossbeam-in-2019.html\n- https://limpet.net/mbrubeck/2019/02/07/rust-a-unique-perspective.html\n- https://doc.rust-lang.org/nomicon/aliasing.html\n- https://manishearth.github.io/blog/2015/05/17/the-problem-with-shared-mutability/\n- https://www.rust-lang.org/production\n- https://www.reddit.com/r/rust/comments/aohq6u/rust_velocity_and_defect_rates/eg189gu/\n- https://rufflewind.com/2017-02-15/rust-move-copy-borrow\n- https://blog.adamant-lang.org/2019/rust-lifetime-visualization-ideas/\n- http://pling.jondgoodwin.com/post/lifetimes/\n- https://github.com/rust-lang-nursery/rust-cookbook/issues/502#issue-387418261\n- https://smallcultfollowing.com/babysteps/blog/2012/11/18/imagine-never-hearing-the-phrase-aliasable/\n- https://manishearth.github.io/blog/2017/03/18/inhtpinhtpamaa/\n- https://areweasyncyet.rs/ - contains async blog posts\n- https://medium.com/@richardanaya/a-journey-through-rust-lifetimes-5a08782c7091\n- https://gill.net.in/posts/auth-microservice-rust-actix-web1.0-diesel-complete-tutorial/\n- https://medium.com/@ly.lee/hosting-embedded-rust-apps-on-apache-mynewt-with-stm32-blue-pill-c86b119fe5f?sk=f58f4cf6c608fded4b354063e474a93b\n- http://thume.ca/2019/04/29/comparing-compilers-in-rust-haskell-c-and-python/\n  - https://news.ycombinator.com/item?id=20192645\n- http://patshaughnessy.net/2018/3/15/how-rust-implements-tagged-unions\n- https://raphaelgomes.dev/blog/articles/2019-07-01-sharing-references-between-python-and-rust.html\n- https://dev.to/sendilkumarn/increase-rust-and-webassembly-performance-382h\n- https://medium.com/dwelo-r-d/we-rewrote-our-iot-platform-in-rust-and-got-away-with-it-2c8867c61b67\n- https://www.ncameron.org/blog/migrating-a-crate-from-futures-0-1-to-0-3/\n- https://raphlinus.github.io/rust/2019/08/21/rust-bloat.html\n- https://tmandry.gitlab.io/blog/posts/optimizing-await-1/\n- https://tmandry.gitlab.io/blog/posts/optimizing-await-2/\n- https://aturon.github.io/tech/2018/04/24/async-borrowing/\n- https://rust-lang.github.io/async-book/\n- https://cheats.rs/\n- https://hsivonen.fi/string-length/\n- https://github.com/ferrous-systems/elements-of-rust/\n- https://arxiv.org/pdf/1902.01906.pdf\n- http://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\n- https://docs.rs/dtolnay/*/dtolnay/macro._03__soundness_bugs.html\n- https://blog.dbrgn.ch/2019/12/24/testing-for-no-std-compatibility/\n- http://cliffle.com/blog/m4vga-in-rust/\n- https://stevedonovan.github.io/rustifications/2018/08/18/rust-closures-are-hard.html\n- https://stackoverflow.blog/2020/01/20/what-is-rust-and-why-is-it-so-popular/\n- https://gregoryszorc.com/blog/2020/01/13/mercurial%27s-journey-to-and-reflections-on-python-3/\n- http://cliffle.com/p/dangerust/\n- http://dtrace.org/blogs/bmc/2018/09/28/the-relative-performance-of-c-and-rust/\n- https://pitdicker.github.io/Interior-mutability-patterns/\n- https://medium.com/tadaweb/security-by-design-a-brief-introduction-to-rust-378060e45038\n- https://jitter.company/blog/2020/01/28/measuring-space-time-behaviours-of-piano-keys-with-rust/\n- https://blog.discordapp.com/why-discord-is-switching-from-go-to-rust-a190bbca2b1f\n- https://matklad.github.io/2020/02/14/why-rust-is-loved.html\n- https://fasterthanli.me/blog/2020/i-want-off-mr-golangs-wild-ride/\n- https://fasterthanli.me/blog/2020/a-half-hour-to-learn-rust/\n- https://lucumr.pocoo.org/2020/1/1/async-pressure/\n- https://www.pietroalbini.org/blog/shipping-a-compiler-every-six-weeks/\n- https://oribenshir.github.io/afternoon_rusting/blog/copy-on-write\n- https://os.phil-opp.com/async-await/\n- https://jason-williams.co.uk/a-possible-new-backend-for-rust\n- https://blog.logrocket.com/how-to-write-crap-rust-code/\n- https://ferrous-systems.com/blog/zero-sized-references/\n- https://msrc-blog.microsoft.com/2020/04/29/the-safety-boat-kubernetes-and-rust/\n- https://richardanaya.github.io/tour_of_rust/\n- https://fnordig.de/2020/05/02/rust-in-an-instant/\n- https://ferrous-systems.com/blog/stable-async-on-embedded/\n- http://kvark.github.io/web/gpu/native/2020/05/03/point-of-webgpu-native.html\n- https://nikic.github.io/2020/05/10/Make-LLVM-fast-again.html\n- https://medium.com/@polyglot_factotum/rust-concurrency-the-single-writer-principle-applied-aada2cdc6fb0\n- https://github.com/pretzelhammer/rust-blog/blob/master/posts/learning-rust-in-2020.md\n- https://nickwilcox.github.io/blog/autovec/\n- https://github.com/pretzelhammer/rust-blog/blob/master/posts/common-rust-lifetime-misconceptions.md\n- http://dtrace.org/blogs/bmc/2020/10/11/rust-after-the-honeymoon/\n- https://blog.darklang.com/why-dark-didnt-choose-rust/\n- https://foundation.rust-lang.org/posts/2021-02-08-hello-world/\n- https://manishearth.github.io/blog/2021/02/22/integrating-rust-and-c-plus-plus-in-firefox/\n- https://cacm.acm.org/magazines/2021/4/251364-safe-systems-programming-in-rust/fulltext\n- [Rust verification tools 2021](https://alastairreid.github.io/automatic-rust-verification-tools-2021/)\n- [Using `unwrap()` in Rust is okay](https://blog.burntsushi.net/unwrap/)\n- [A Guide to Error Handling in Rust](https://nrc.github.io/error-docs/)\n- [Accidentally Quadratic: Rust hash iteration+reinsertion](https://accidentallyquadratic.tumblr.com/post/153545455987/rust-hash-iteration-reinsertion)\n"
        },
        {
          "name": "sources",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}