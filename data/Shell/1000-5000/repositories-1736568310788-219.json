{
  "metadata": {
    "timestamp": 1736568310788,
    "page": 219,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "docker-library/python",
      "stars": 2577,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.130859375,
          "content": "/*/**/Dockerfile       linguist-generated\n/Dockerfile*.template  linguist-language=Dockerfile\n*                      text=auto eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0166015625,
          "content": ".jq-template.awk\n"
        },
        {
          "name": "3.10",
          "type": "tree",
          "content": null
        },
        {
          "name": "3.11",
          "type": "tree",
          "content": null
        },
        {
          "name": "3.12",
          "type": "tree",
          "content": null
        },
        {
          "name": "3.13",
          "type": "tree",
          "content": null
        },
        {
          "name": "3.14-rc",
          "type": "tree",
          "content": null
        },
        {
          "name": "3.9",
          "type": "tree",
          "content": null
        },
        {
          "name": "Dockerfile-linux.template",
          "type": "blob",
          "size": 8.0986328125,
          "content": "{{\n\tdef is_alpine:\n\t\tenv.variant | startswith(\"alpine\")\n\t;\n\tdef is_slim:\n\t\tenv.variant | startswith(\"slim-\")\n\t;\n\tdef rcVersion:\n\t\tenv.version | rtrimstr(\"-rc\")\n-}}\n{{ if is_alpine then ( -}}\nFROM alpine:{{ env.variant | ltrimstr(\"alpine\") }}\n{{ ) elif is_slim then ( -}}\nFROM debian:{{ env.variant | ltrimstr(\"slim-\") }}-slim\n{{ ) else ( -}}\nFROM buildpack-deps:{{ env.variant }}\n{{ ) end -}}\n\n# ensure local python is preferred over distribution python\nENV PATH /usr/local/bin:$PATH\n\n{{ if rcVersion | IN(\"3.9\", \"3.10\", \"3.11\", \"3.12\") then ( -}}\n{{ # only set LANG on versions less than 3.13 -}}\n# cannot remove LANG even though https://bugs.python.org/issue19846 is fixed\n# last attempted removal of LANG broke many users:\n# https://github.com/docker-library/python/pull/570\nENV LANG C.UTF-8\n\n{{ ) else \"\" end -}}\n# runtime dependencies\n{{ if is_alpine then ( -}}\nRUN set -eux; \\\n\tapk add --no-cache \\\n\t\tca-certificates \\\n\t\ttzdata \\\n\t;\n{{ ) else ( -}}\nRUN set -eux; \\\n\tapt-get update; \\\n\tapt-get install -y --no-install-recommends \\\n{{ if is_slim then ( -}}\n\t\tca-certificates \\\n\t\tnetbase \\\n\t\ttzdata \\\n{{ ) else ( -}}\n\t\tlibbluetooth-dev \\\n\t\ttk-dev \\\n\t\tuuid-dev \\\n{{ ) end -}}\n\t; \\\n\trm -rf /var/lib/apt/lists/*\n{{ ) end -}}\n\n{{\n\tdef should_pgp:\n\t\t# https://github.com/docker-library/python/issues/977\n\t\t# https://peps.python.org/pep-0761/\n\t\t# https://discuss.python.org/t/pep-761-deprecating-pgp-signatures-for-cpython-artifacts/67180\n\t\trcVersion | IN(\"3.9\", \"3.10\", \"3.11\", \"3.12\", \"3.13\")\n-}}\n{{ if should_pgp then ( -}}\nENV GPG_KEY {{\n\t{\n\t\t# gpg: key B26995E310250568: public key \"\\xc5\\x81ukasz Langa (GPG langa.pl) <lukasz@langa.pl>\" imported\n\t\t\"3.9\": \"E3FF2839C048B25C084DEBE9B26995E310250568\",\n\t\t# https://peps.python.org/pep-0596/#release-manager-and-crew\n\n\t\t# gpg: key 64E628F8D684696D: public key \"Pablo Galindo Salgado <pablogsal@gmail.com>\" imported\n\t\t\"3.10\": \"A035C8C19219BA821ECEA86B64E628F8D684696D\",\n\t\t# https://peps.python.org/pep-0619/#release-manager-and-crew\n\n\t\t# gpg: key 64E628F8D684696D: public key \"Pablo Galindo Salgado <pablogsal@gmail.com>\" imported\n\t\t\"3.11\": \"A035C8C19219BA821ECEA86B64E628F8D684696D\",\n\t\t# https://peps.python.org/pep-0664/#release-manager-and-crew\n\n\t\t# gpg: key A821E680E5FA6305: public key \"Thomas Wouters <thomas@python.org>\" imported\n\t\t\"3.12\": \"7169605F62C751356D054A26A821E680E5FA6305\",\n\t\t# https://peps.python.org/pep-0693/#release-manager-and-crew\n\n\t\t# gpg: key A821E680E5FA6305: public key \"Thomas Wouters <thomas@python.org>\" imported\n\t\t\"3.13\": \"7169605F62C751356D054A26A821E680E5FA6305\",\n\t\t# https://peps.python.org/pep-0719/#release-manager-and-crew\n\t}[rcVersion]\n}}\n{{ ) else \"\" end -}}\nENV PYTHON_VERSION {{ .version }}\n{{ if .checksums.source.sha256 then ( -}}\nENV PYTHON_SHA256 {{ .checksums.source.sha256 }}\n{{ ) else \"\" end -}}\n\nRUN set -eux; \\\n\t\\\n{{ if is_alpine then ( -}}\n\tapk add --no-cache --virtual .build-deps \\\n\t\tgnupg \\\n\t\ttar \\\n\t\txz \\\n\t\t\\\n\t\tbluez-dev \\\n\t\tbzip2-dev \\\n\t\tdpkg-dev dpkg \\\n\t\tfindutils \\\n\t\tgcc \\\n\t\tgdbm-dev \\\n\t\tlibc-dev \\\n\t\tlibffi-dev \\\n\t\tlibnsl-dev \\\n\t\tlibtirpc-dev \\\n\t\tlinux-headers \\\n\t\tmake \\\n\t\tncurses-dev \\\n\t\topenssl-dev \\\n\t\tpax-utils \\\n\t\treadline-dev \\\n\t\tsqlite-dev \\\n\t\ttcl-dev \\\n\t\ttk \\\n\t\ttk-dev \\\n\t\tutil-linux-dev \\\n\t\txz-dev \\\n\t\tzlib-dev \\\n\t; \\\n\t\\\n{{ ) elif is_slim then ( -}}\n\tsavedAptMark=\"$(apt-mark showmanual)\"; \\\n\tapt-get update; \\\n\tapt-get install -y --no-install-recommends \\\n\t\tdpkg-dev \\\n\t\tgcc \\\n\t\tgnupg \\\n\t\tlibbluetooth-dev \\\n\t\tlibbz2-dev \\\n\t\tlibc6-dev \\\n\t\tlibdb-dev \\\n\t\tlibffi-dev \\\n\t\tlibgdbm-dev \\\n\t\tliblzma-dev \\\n\t\tlibncursesw5-dev \\\n\t\tlibreadline-dev \\\n\t\tlibsqlite3-dev \\\n\t\tlibssl-dev \\\n\t\tmake \\\n\t\ttk-dev \\\n\t\tuuid-dev \\\n\t\twget \\\n\t\txz-utils \\\n\t\tzlib1g-dev \\\n\t; \\\n\t\\\n{{ ) else \"\" end -}}\n\twget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\"; \\\n{{ if .checksums.source.sha256 then ( -}}\n\techo \"$PYTHON_SHA256 *python.tar.xz\" | sha256sum -c -; \\\n{{ ) else \"\" end -}}\n{{ if should_pgp then ( -}}\n\twget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\"; \\\n\tGNUPGHOME=\"$(mktemp -d)\"; export GNUPGHOME; \\\n\tgpg --batch --keyserver hkps://keys.openpgp.org --recv-keys \"$GPG_KEY\"; \\\n\tgpg --batch --verify python.tar.xz.asc python.tar.xz; \\\n\tgpgconf --kill all; \\\n\trm -rf \"$GNUPGHOME\" python.tar.xz.asc; \\\n{{ ) else \"\" end -}}\n\tmkdir -p /usr/src/python; \\\n\ttar --extract --directory /usr/src/python --strip-components=1 --file python.tar.xz; \\\n\trm python.tar.xz; \\\n\t\\\n\tcd /usr/src/python; \\\n\tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \\\n\t./configure \\\n\t\t--build=\"$gnuArch\" \\\n\t\t--enable-loadable-sqlite-extensions \\\n{{\n\t# https://github.com/docker-library/python/pull/980 (fixing PGO runs tests that fail, but shouldn't)\n\t# https://github.com/python/cpython/issues/90548 (alpine failures; not likely to be fixed any time soon)\n\tif is_alpine then \"\" else (\n-}}\n\t\t--enable-optimizations \\\n{{ ) end -}}\n\t\t--enable-option-checking=fatal \\\n\t\t--enable-shared \\\n{{\n\t# <3.10 does not have -fno-semantic-interposition enabled and --with-lto does nothing for performance\n\tif rcVersion == \"3.9\" then \"\" else (\n-}}\n\t\t--with-lto \\\n{{ ) end -}}\n\t\t--with-ensurepip \\\n\t; \\\n\tnproc=\"$(nproc)\"; \\\n{{ if is_alpine then ( -}}\n# set thread stack size to 1MB so we don't segfault before we hit sys.getrecursionlimit()\n# https://github.com/alpinelinux/aports/commit/2026e1259422d4e0cf92391ca2d3844356c649d0\n\tEXTRA_CFLAGS=\"-DTHREAD_STACK_SIZE=0x100000\"; \\\n{{ ) else ( -}}\n\tEXTRA_CFLAGS=\"$(dpkg-buildflags --get CFLAGS)\"; \\\n\tLDFLAGS=\"$(dpkg-buildflags --get LDFLAGS)\"; \\\n{{ ) end -}}\n{{ if is_slim or is_alpine then ( -}}\n\tLDFLAGS=\"${LDFLAGS:--Wl},--strip-all\"; \\\n{{ ) else \"\" end -}}\n\tmake -j \"$nproc\" \\\n\t\t\"EXTRA_CFLAGS=${EXTRA_CFLAGS:-}\" \\\n\t\t\"LDFLAGS=${LDFLAGS:-}\" \\\n\t; \\\n# https://github.com/docker-library/python/issues/784\n# prevent accidental usage of a system installed libpython of the same version\n\trm python; \\\n\tmake -j \"$nproc\" \\\n\t\t\"EXTRA_CFLAGS=${EXTRA_CFLAGS:-}\" \\\n\t\t\"LDFLAGS=${LDFLAGS:--Wl},-rpath='\\$\\$ORIGIN/../lib'\" \\\n\t\tpython \\\n\t; \\\n\tmake install; \\\n{{ if is_alpine or is_slim then \"\" else ( -}}\n\t\\\n# enable GDB to load debugging data: https://github.com/docker-library/python/pull/701\n\tbin=\"$(readlink -ve /usr/local/bin/python3)\"; \\\n\tdir=\"$(dirname \"$bin\")\"; \\\n\tmkdir -p \"/usr/share/gdb/auto-load/$dir\"; \\\n\tcp -vL Tools/gdb/libpython.py \"/usr/share/gdb/auto-load/$bin-gdb.py\"; \\\n{{ ) end -}}\n\t\\\n\tcd /; \\\n\trm -rf /usr/src/python; \\\n\t\\\n\tfind /usr/local -depth \\\n\t\t\\( \\\n\t\t\t\\( -type d -a \\( -name test -o -name tests -o -name idle_test \\) \\) \\\n\t\t\t-o \\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' -o -name 'libpython*.a' \\) \\) \\\n\t\t\\) -exec rm -rf '{}' + \\\n\t; \\\n\t\\\n{{ if is_alpine then ( -}}\n\tfind /usr/local -type f -executable -not \\( -name '*tkinter*' \\) -exec scanelf --needed --nobanner --format '%n#p' '{}' ';' \\\n\t\t| tr ',' '\\n' \\\n\t\t| sort -u \\\n\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \\\n\t\t| xargs -rt apk add --no-network --virtual .python-rundeps \\\n\t; \\\n\tapk del --no-network .build-deps; \\\n{{ ) else ( -}}\n\tldconfig; \\\n{{ if is_slim then ( -}}\n\t\\\n\tapt-mark auto '.*' > /dev/null; \\\n\tapt-mark manual $savedAptMark; \\\n\tfind /usr/local -type f -executable -not \\( -name '*tkinter*' \\) -exec ldd '{}' ';' \\\n\t\t| awk '/=>/ { so = $(NF-1); if (index(so, \"/usr/local/\") == 1) { next }; gsub(\"^/(usr/)?\", \"\", so); printf \"*%s\\n\", so }' \\\n\t\t| sort -u \\\n\t\t| xargs -r dpkg-query --search \\\n\t\t| cut -d: -f1 \\\n\t\t| sort -u \\\n\t\t| xargs -r apt-mark manual \\\n\t; \\\n\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \\\n\trm -rf /var/lib/apt/lists/*; \\\n{{ ) else \"\" end -}}\n{{ ) end -}}\n\t\\\n\texport PYTHONDONTWRITEBYTECODE=1; \\\n\tpython3 --version; \\\n{{ if .setuptools then ( -}}\n\t\\\n\tpip3 install \\\n\t\t--disable-pip-version-check \\\n\t\t--no-cache-dir \\\n\t\t--no-compile \\\n\t\t{{ \"setuptools==\\( .setuptools.version )\" | @sh }} \\\n\t\twheel \\\n\t; \\\n{{ ) else \"\" end -}}\n\tpip3 --version\n\n# make some useful symlinks that are expected to exist (\"/usr/local/bin/python\" and friends)\nRUN set -eux; \\\n\tfor src in idle3 pip3 pydoc3 python3 python3-config; do \\\n\t\tdst=\"$(echo \"$src\" | tr -d 3)\"; \\\n\t\t[ -s \"/usr/local/bin/$src\" ]; \\\n\t\t[ ! -e \"/usr/local/bin/$dst\" ]; \\\n\t\tln -svT \"$src\" \"/usr/local/bin/$dst\"; \\\n\tdone\n\nCMD [\"python3\"]\n"
        },
        {
          "name": "Dockerfile-windows.template",
          "type": "blob",
          "size": 2.3876953125,
          "content": "FROM mcr.microsoft.com/windows/{{ env.windowsVariant }}:{{ env.windowsRelease }}\n\nSHELL [\"powershell\", \"-Command\", \"$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';\"]\n\n# https://github.com/docker-library/python/pull/557\nENV PYTHONIOENCODING UTF-8\n\nENV PYTHON_VERSION {{ .version }}\n{{ if .checksums.windows.sha256 then ( -}}\nENV PYTHON_SHA256 {{ .checksums.windows.sha256 }}\n{{ ) else \"\" end -}}\n\nRUN $url = ('https://www.python.org/ftp/python/{0}/python-{1}-amd64.exe' -f ($env:PYTHON_VERSION -replace '[a-z]+[0-9]*$', ''), $env:PYTHON_VERSION); \\\n\tWrite-Host ('Downloading {0} ...' -f $url); \\\n\t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \\\n\tInvoke-WebRequest -Uri $url -OutFile 'python.exe'; \\\n{{ if .checksums.windows.sha256 then ( -}}\n\t\\\n\tWrite-Host ('Verifying sha256 ({0}) ...' -f $env:PYTHON_SHA256); \\\n\tif ((Get-FileHash python.exe -Algorithm sha256).Hash -ne $env:PYTHON_SHA256) { \\\n\t\tWrite-Host 'FAILED!'; \\\n\t\texit 1; \\\n\t}; \\\n{{ ) else \"\" end -}}\n\t\\\n\tWrite-Host 'Installing ...'; \\\n# https://docs.python.org/3/using/windows.html#installing-without-ui\n\t$exitCode = (Start-Process python.exe -Wait -NoNewWindow -PassThru \\\n\t\t-ArgumentList @( \\\n\t\t\t'/quiet', \\\n\t\t\t'InstallAllUsers=1', \\\n\t\t\t'TargetDir=C:\\Python', \\\n\t\t\t'PrependPath=1', \\\n\t\t\t'Shortcuts=0', \\\n\t\t\t'Include_doc=0', \\\n\t\t\t'Include_pip=1', \\\n\t\t\t'Include_test=0' \\\n\t\t) \\\n\t).ExitCode; \\\n\tif ($exitCode -ne 0) { \\\n\t\tWrite-Host ('Running python installer failed with exit code: {0}' -f $exitCode); \\\n\t\tGet-ChildItem $env:TEMP | Sort-Object -Descending -Property LastWriteTime | Select-Object -First 1 | Get-Content; \\\n\t\texit $exitCode; \\\n\t} \\\n\t\\\n# the installer updated PATH, so we should refresh our local value\n\t$env:PATH = [Environment]::GetEnvironmentVariable('PATH', [EnvironmentVariableTarget]::Machine); \\\n\t\\\n\tWrite-Host 'Verifying install ...'; \\\n\tWrite-Host '  python --version'; python --version; \\\n\t\\\n\tWrite-Host 'Removing ...'; \\\n\tRemove-Item python.exe -Force; \\\n\tRemove-Item $env:TEMP/Python*.log -Force; \\\n\t\\\n\t$env:PYTHONDONTWRITEBYTECODE = '1'; \\\n{{ if .setuptools then ( -}}\n\t\\\n\tWrite-Host ('Installing setuptools and wheel ...'); \\\n\tpip install \\\n\t\t--disable-pip-version-check \\\n\t\t--no-cache-dir \\\n\t\t--no-compile \\\n\t\t'setuptools=={{ .setuptools.version }}' \\\n\t\twheel \\\n\t; \\\n{{ ) else \"\" end -}}\n\t\\\n\tWrite-Host 'Verifying pip install ...'; \\\n\tpip --version; \\\n\t\\\n\tWrite-Host 'Complete.'\n\nCMD [\"python\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.03125,
          "content": "Copyright (c) 2014 Docker, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.6318359375,
          "content": "# https://github.com/docker-library/python\n\n## Maintained by: [the Docker Community](https://github.com/docker-library/python)\n\nThis is the Git repo of the [Docker \"Official Image\"](https://github.com/docker-library/official-images#what-are-official-images) for [`python`](https://hub.docker.com/_/python/) (not to be confused with any official `python` image provided by `python` upstream). See [the Docker Hub page](https://hub.docker.com/_/python/) for the full readme on how to use this Docker image and for information regarding contributing and issues.\n\nThe [full image description on Docker Hub](https://hub.docker.com/_/python/) is generated/maintained over in [the docker-library/docs repository](https://github.com/docker-library/docs), specifically in [the `python` directory](https://github.com/docker-library/docs/tree/master/python).\n\n## See a change merged here that doesn't show up on Docker Hub yet?\n\nFor more information about the full official images change lifecycle, see [the \"An image's source changed in Git, now what?\" FAQ entry](https://github.com/docker-library/faq#an-images-source-changed-in-git-now-what).\n\nFor outstanding `python` image PRs, check [PRs with the \"library/python\" label on the official-images repository](https://github.com/docker-library/official-images/labels/library%2Fpython). For the current \"source of truth\" for [`python`](https://hub.docker.com/_/python/), see [the `library/python` file in the official-images repository](https://github.com/docker-library/official-images/blob/master/library/python).\n\n<!-- THIS FILE IS GENERATED BY https://github.com/docker-library/docs/blob/master/generate-repo-stub-readme.sh -->\n"
        },
        {
          "name": "apply-templates.sh",
          "type": "blob",
          "size": 1.552734375,
          "content": "#!/usr/bin/env bash\nset -Eeuo pipefail\n\n[ -f versions.json ] # run \"versions.sh\" first\n\njqt='.jq-template.awk'\nif [ -n \"${BASHBREW_SCRIPTS:-}\" ]; then\n\tjqt=\"$BASHBREW_SCRIPTS/jq-template.awk\"\nelif [ \"$BASH_SOURCE\" -nt \"$jqt\" ]; then\n\t# https://github.com/docker-library/bashbrew/blob/master/scripts/jq-template.awk\n\twget -qO \"$jqt\" 'https://github.com/docker-library/bashbrew/raw/9f6a35772ac863a0241f147c820354e4008edf38/scripts/jq-template.awk'\nfi\n\nif [ \"$#\" -eq 0 ]; then\n\tversions=\"$(jq -r 'keys | map(@sh) | join(\" \")' versions.json)\"\n\teval \"set -- $versions\"\nfi\n\ngenerated_warning() {\n\tcat <<-EOH\n\t\t#\n\t\t# NOTE: THIS DOCKERFILE IS GENERATED VIA \"apply-templates.sh\"\n\t\t#\n\t\t# PLEASE DO NOT EDIT IT DIRECTLY.\n\t\t#\n\n\tEOH\n}\n\nfor version; do\n\texport version\n\n\trm -rf \"$version/\"\n\n\tvariants=\"$(jq -r '.[env.version].variants | map(@sh) | join(\" \")' versions.json)\"\n\teval \"variants=( $variants )\"\n\n\tfor dir in \"${variants[@]}\"; do\n\t\tvariant=\"$(basename \"$dir\")\" # \"buster\", \"windowsservercore-1809\", etc\n\t\texport variant\n\n\t\tcase \"$dir\" in\n\t\t\twindows/*)\n\t\t\t\twindowsVariant=\"${variant%%-*}\" # \"windowsservercore\", \"nanoserver\"\n\t\t\t\twindowsRelease=\"${variant#$windowsVariant-}\" # \"ltsc2022\", \"1809\", etc\n\t\t\t\twindowsVariant=\"${windowsVariant#windows}\" # \"servercore\", \"nanoserver\"\n\t\t\t\texport windowsVariant windowsRelease\n\t\t\t\ttemplate='Dockerfile-windows.template'\n\t\t\t\t;;\n\n\t\t\t*)\n\t\t\t\ttemplate='Dockerfile-linux.template'\n\t\t\t\t;;\n\t\tesac\n\n\t\techo \"processing $version/$dir ...\"\n\t\tmkdir -p \"$version/$dir\"\n\n\t\t{\n\t\t\tgenerated_warning\n\t\t\tgawk -f \"$jqt\" \"$template\"\n\t\t} > \"$version/$dir/Dockerfile\"\n\tdone\ndone\n"
        },
        {
          "name": "generate-stackbrew-library.sh",
          "type": "blob",
          "size": 4.6806640625,
          "content": "#!/usr/bin/env bash\nset -Eeuo pipefail\n\ndeclare -A aliases=(\n\t[3.13]='3 latest'\n)\n\nself=\"$(basename \"$BASH_SOURCE\")\"\ncd \"$(dirname \"$(readlink -f \"$BASH_SOURCE\")\")\"\n\nif [ \"$#\" -eq 0 ]; then\n\tversions=\"$(jq -r 'keys | map(@sh) | join(\" \")' versions.json)\"\n\teval \"set -- $versions\"\nfi\n\n# sort version numbers with highest first\nIFS=$'\\n'; set -- $(sort -rV <<<\"$*\"); unset IFS\n\n# get the most recent commit which modified any of \"$@\"\nfileCommit() {\n\tgit log -1 --format='format:%H' HEAD -- \"$@\"\n}\n\n# get the most recent commit which modified \"$1/Dockerfile\" or any file COPY'd from \"$1/Dockerfile\"\ndirCommit() {\n\tlocal dir=\"$1\"; shift\n\t(\n\t\tcd \"$dir\"\n\t\tfiles=\"$(\n\t\t\tgit show HEAD:./Dockerfile | awk '\n\t\t\t\ttoupper($1) == \"COPY\" {\n\t\t\t\t\tfor (i = 2; i < NF; i++) {\n\t\t\t\t\t\tif ($i ~ /^--from=/) {\n\t\t\t\t\t\t\tnext\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprint $i\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t'\n\t\t)\"\n\t\tfileCommit Dockerfile $files\n\t)\n}\n\ngetArches() {\n\tlocal repo=\"$1\"; shift\n\tlocal officialImagesBase=\"${BASHBREW_LIBRARY:-https://github.com/docker-library/official-images/raw/HEAD/library}/\"\n\n\tlocal parentRepoToArchesStr\n\tparentRepoToArchesStr=\"$(\n\t\tfind -name 'Dockerfile' -exec awk -v officialImagesBase=\"$officialImagesBase\" '\n\t\t\t\ttoupper($1) == \"FROM\" && $2 !~ /^('\"$repo\"'|scratch|.*\\/.*)(:|$)/ {\n\t\t\t\t\tprintf \"%s%s\\n\", officialImagesBase, $2\n\t\t\t\t}\n\t\t\t' '{}' + \\\n\t\t\t| sort -u \\\n\t\t\t| xargs -r bashbrew cat --format '[\"{{ .RepoName }}:{{ .TagName }}\"]=\"{{ join \" \" .TagEntry.Architectures }}\"'\n\t)\"\n\teval \"declare -g -A parentRepoToArches=( $parentRepoToArchesStr )\"\n}\ngetArches 'python'\n\ncat <<-EOH\n# this file is generated via https://github.com/docker-library/python/blob/$(fileCommit \"$self\")/$self\n\nMaintainers: Tianon Gravi <admwiggin@gmail.com> (@tianon),\n             Joseph Ferguson <yosifkit@gmail.com> (@yosifkit)\nGitRepo: https://github.com/docker-library/python.git\nBuilder: buildkit\nEOH\n\n# prints \"$2$1$3$1...$N\"\njoin() {\n\tlocal sep=\"$1\"; shift\n\tlocal out; printf -v out \"${sep//%/%%}%s\" \"$@\"\n\techo \"${out#$sep}\"\n}\n\nfor version; do\n\texport version\n\tvariants=\"$(jq -r '.[env.version].variants | map(@sh) | join(\" \")' versions.json)\"\n\teval \"variants=( $variants )\"\n\n\tfullVersion=\"$(jq -r '.[env.version].version' versions.json)\"\n\n\tversionAliases=(\n\t\t$fullVersion\n\t\t$version\n\t\t${aliases[$version]:-}\n\t)\n\n\tdefaultDebianVariant=\"$(jq -r '\n\t\t.[env.version].variants\n\t\t| map(select(\n\t\t\tstartswith(\"alpine\")\n\t\t\tor startswith(\"slim-\")\n\t\t\tor startswith(\"windows/\")\n\t\t\t| not\n\t\t))\n\t\t| .[0]\n\t' versions.json)\"\n\tdefaultAlpineVariant=\"$(jq -r '\n\t\t.[env.version].variants\n\t\t| map(select(\n\t\t\tstartswith(\"alpine\")\n\t\t))\n\t\t| .[0]\n\t' versions.json)\"\n\n\tfor v in \"${variants[@]}\"; do\n\t\tdir=\"$version/$v\"\n\t\t[ -f \"$dir/Dockerfile\" ] || continue\n\t\tvariant=\"$(basename \"$v\")\"\n\n\t\tcommit=\"$(dirCommit \"$dir\")\"\n\n\t\tvariantAliases=( \"${versionAliases[@]/%/-$variant}\" )\n\t\tcase \"$variant\" in\n\t\t\t*-\"$defaultDebianVariant\") # slim-xxx -> slim\n\t\t\t\tvariantAliases+=( \"${versionAliases[@]/%/-${variant%-$defaultDebianVariant}}\" )\n\t\t\t\t;;\n\t\t\t\"$defaultAlpineVariant\")\n\t\t\t\tvariantAliases+=( \"${versionAliases[@]/%/-alpine}\" )\n\t\t\t\t;;\n\t\tesac\n\t\tvariantAliases=( \"${variantAliases[@]//latest-/}\" )\n\n\t\tcase \"$v\" in\n\t\t\twindows/*)\n\t\t\t\tvariantArches='windows-amd64'\n\t\t\t\t;;\n\n\t\t\t*)\n\t\t\t\tvariantParent=\"$(awk 'toupper($1) == \"FROM\" { print $2 }' \"$dir/Dockerfile\")\"\n\t\t\t\tvariantArches=\"${parentRepoToArches[$variantParent]}\"\n\t\t\t\t;;\n\t\tesac\n\n\t\tcase \"$version\" in\n\t\t\t3.9) ;;\n\t\t\t*)\n\t\t\t\tif [ \"$version\" != '3.10' ]; then\n\t\t\t\t\t# https://github.com/docker-library/python/pull/931\n\t\t\t\t\tvariantArches=\"$(sed <<<\" $variantArches \" -e 's/ riscv64 / /g')\"\n\t\t\t\tfi\n\t\t\t\t# https://github.com/python/cpython/issues/93619 + https://peps.python.org/pep-0011/\n\t\t\t\tvariantArches=\"$(sed <<<\" $variantArches \" -e 's/ mips64le / /g')\"\n\t\t\t\t;;\n\t\tesac\n\n\t\tif [ \"$fullVersion\" = '3.14.0a1' ]; then\n\t\t\t# https://github.com/python/cpython/issues/125535 - 3.14.0a1 fails to build on i386\n\t\t\t# https://github.com/python/cpython/pull/125244 (already fixed for the next release)\n\t\t\tvariantArches=\"$(sed <<<\" $variantArches \" -e 's/ i386 / /g')\"\n\t\tfi\n\n\t\tsharedTags=()\n\t\tfor windowsShared in windowsservercore nanoserver; do\n\t\t\tif [[ \"$variant\" == \"$windowsShared\"* ]]; then\n\t\t\t\tsharedTags=( \"${versionAliases[@]/%/-$windowsShared}\" )\n\t\t\t\tsharedTags=( \"${sharedTags[@]//latest-/}\" )\n\t\t\t\tbreak\n\t\t\tfi\n\t\tdone\n\t\tif [ \"$variant\" = \"$defaultDebianVariant\" ] || [[ \"$variant\" == 'windowsservercore'* ]]; then\n\t\t\tsharedTags+=( \"${versionAliases[@]}\" )\n\t\tfi\n\n\t\techo\n\t\techo \"Tags: $(join ', ' \"${variantAliases[@]}\")\"\n\t\tif [ \"${#sharedTags[@]}\" -gt 0 ]; then\n\t\t\techo \"SharedTags: $(join ', ' \"${sharedTags[@]}\")\"\n\t\tfi\n\t\tcat <<-EOE\n\t\t\tArchitectures: $(join ', ' $variantArches)\n\t\t\tGitCommit: $commit\n\t\t\tDirectory: $dir\n\t\tEOE\n\t\tif [[ \"$v\" == windows/* ]]; then\n\t\t\techo \"Constraints: $variant\"\n\t\t\techo 'Builder: classic'\n\t\tfi\n\tdone\ndone\n"
        },
        {
          "name": "update.sh",
          "type": "blob",
          "size": 0.130859375,
          "content": "#!/usr/bin/env bash\nset -Eeuo pipefail\n\ncd \"$(dirname \"$(readlink -f \"$BASH_SOURCE\")\")\"\n\n./versions.sh \"$@\"\n./apply-templates.sh \"$@\"\n"
        },
        {
          "name": "versions.json",
          "type": "blob",
          "size": 2.6396484375,
          "content": "{\n  \"3.10\": {\n    \"checksums\": {\n      \"source\": {\n        \"sha256\": \"bfb249609990220491a1b92850a07135ed0831e41738cf681d63cf01b2a8fbd1\"\n      }\n    },\n    \"setuptools\": {\n      \"version\": \"65.5.1\"\n    },\n    \"variants\": [\n      \"bookworm\",\n      \"slim-bookworm\",\n      \"bullseye\",\n      \"slim-bullseye\",\n      \"alpine3.21\",\n      \"alpine3.20\"\n    ],\n    \"version\": \"3.10.16\"\n  },\n  \"3.11\": {\n    \"checksums\": {\n      \"source\": {\n        \"sha256\": \"2a9920c7a0cd236de33644ed980a13cbbc21058bfdc528febb6081575ed73be3\"\n      }\n    },\n    \"setuptools\": {\n      \"version\": \"65.5.1\"\n    },\n    \"variants\": [\n      \"bookworm\",\n      \"slim-bookworm\",\n      \"bullseye\",\n      \"slim-bullseye\",\n      \"alpine3.21\",\n      \"alpine3.20\"\n    ],\n    \"version\": \"3.11.11\"\n  },\n  \"3.12\": {\n    \"checksums\": {\n      \"source\": {\n        \"sha256\": \"c909157bb25ec114e5869124cc2a9c4a4d4c1e957ca4ff553f1edc692101154e\"\n      },\n      \"windows\": {\n        \"sha256\": \"71bd44e6b0e91c17558963557e4cdb80b483de9b0a0a9717f06cf896f95ab598\"\n      }\n    },\n    \"variants\": [\n      \"bookworm\",\n      \"slim-bookworm\",\n      \"bullseye\",\n      \"slim-bullseye\",\n      \"alpine3.21\",\n      \"alpine3.20\",\n      \"windows/windowsservercore-ltsc2022\",\n      \"windows/windowsservercore-1809\"\n    ],\n    \"version\": \"3.12.8\"\n  },\n  \"3.13\": {\n    \"checksums\": {\n      \"source\": {\n        \"sha256\": \"9cf9427bee9e2242e3877dd0f6b641c1853ca461f39d6503ce260a59c80bf0d9\"\n      },\n      \"windows\": {\n        \"sha256\": \"6b33fa9a439a86f553f9f60e538ccabc857d2f308bc77c477c04a46552ade81f\"\n      }\n    },\n    \"variants\": [\n      \"bookworm\",\n      \"slim-bookworm\",\n      \"bullseye\",\n      \"slim-bullseye\",\n      \"alpine3.21\",\n      \"alpine3.20\",\n      \"windows/windowsservercore-ltsc2022\",\n      \"windows/windowsservercore-1809\"\n    ],\n    \"version\": \"3.13.1\"\n  },\n  \"3.14-rc\": {\n    \"checksums\": {\n      \"source\": {\n        \"sha256\": \"94349df207456a575a8867c20b4ca434f870e1920dcdcc8fdf797e1af49abe90\"\n      },\n      \"windows\": {\n        \"sha256\": \"b5ba25a9973a5cff264e62024a50633ce87c58c3baaab298f1d47d47890d6fe7\"\n      }\n    },\n    \"variants\": [\n      \"bookworm\",\n      \"slim-bookworm\",\n      \"bullseye\",\n      \"slim-bullseye\",\n      \"alpine3.21\",\n      \"alpine3.20\",\n      \"windows/windowsservercore-ltsc2022\",\n      \"windows/windowsservercore-1809\"\n    ],\n    \"version\": \"3.14.0a3\"\n  },\n  \"3.9\": {\n    \"checksums\": {\n      \"source\": {\n        \"sha256\": \"3126f59592c9b0d798584755f2bf7b081fa1ca35ce7a6fea980108d752a05bb1\"\n      }\n    },\n    \"setuptools\": {\n      \"version\": \"58.1.0\"\n    },\n    \"variants\": [\n      \"bookworm\",\n      \"slim-bookworm\",\n      \"bullseye\",\n      \"slim-bullseye\",\n      \"alpine3.21\",\n      \"alpine3.20\"\n    ],\n    \"version\": \"3.9.21\"\n  }\n}\n"
        },
        {
          "name": "versions.sh",
          "type": "blob",
          "size": 6.3466796875,
          "content": "#!/usr/bin/env bash\nset -Eeuo pipefail\nshopt -s nullglob\n\ncd \"$(dirname \"$(readlink -f \"$BASH_SOURCE\")\")\"\n\nversions=( \"$@\" )\nif [ ${#versions[@]} -eq 0 ]; then\n\tversions=( */ )\n\tjson='{}'\nelse\n\tjson=\"$(< versions.json)\"\nfi\nversions=( \"${versions[@]%/}\" )\n\ndeclare -A checksums=()\ncheck_file() {\n\tlocal dirVersion=\"$1\"; shift\n\tlocal fullVersion=\"$1\"; shift\n\tlocal type=\"${1:-source}\" # \"source\" or \"windows\"\n\n\tlocal filename=\"Python-$fullVersion.tar.xz\"\n\tif [ \"$type\" = 'windows' ]; then\n\t\tfilename=\"python-$fullVersion-amd64.exe\"\n\tfi\n\tlocal url=\"https://www.python.org/ftp/python/$dirVersion/$filename\"\n\n\tlocal sigstore\n\tif sigstore=\"$(\n\t\twget -qO- -o/dev/null \"$url.sigstore\" \\\n\t\t\t| jq -r '\n\t\t\t\t.messageSignature.messageDigest\n\t\t\t\t| if .algorithm != \"SHA2_256\" then\n\t\t\t\t\terror(\"sigstore bundle not using SHA2_256\")\n\t\t\t\telse .digest end\n\t\t\t'\n\t)\" && [ -n \"$sigstore\" ]; then\n\t\tsigstore=\"$(base64 -d <<<\"$sigstore\" | hexdump -ve '/1 \"%02x\"')\"\n\t\tchecksums[\"$fullVersion\"]=\"$(jq <<<\"${checksums[\"$fullVersion\"]:-null}\" --arg type \"$type\" --arg sha256 \"$sigstore\" '.[$type].sha256 = $sha256')\"\n\t\treturn 0\n\tfi\n\n\t# TODO is this even necessary/useful?  the sigstore-based version above is *much* faster, supports all current versions (not just 3.12+ like this), *and* should be more reliable 🤔\n\tlocal sbom\n\tif sbom=\"$(\n\t\twget -qO- -o/dev/null \"$url.spdx.json\" \\\n\t\t\t| jq --arg filename \"$filename\" '\n\t\t\t\tfirst(\n\t\t\t\t\t.packages[]\n\t\t\t\t\t| select(\n\t\t\t\t\t\t.name == \"CPython\"\n\t\t\t\t\t\tand .packageFileName == $filename\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t\t| .checksums\n\t\t\t\t| map({\n\t\t\t\t\tkey: (.algorithm // empty | ascii_downcase),\n\t\t\t\t\tvalue: (.checksumValue // empty),\n\t\t\t\t})\n\t\t\t\t| if length < 1 then\n\t\t\t\t\terror(\"no checksums found for \\($filename)\")\n\t\t\t\telse . end\n\t\t\t\t| from_entries\n\t\t\t\t| if has(\"sha256\") then . else\n\t\t\t\t\terror(\"missing sha256 for \\($filename); have \\(.)\")\n\t\t\t\tend\n\t\t\t'\n\t)\" && [ -n \"sbom\" ]; then\n\t\tchecksums[\"$fullVersion\"]=\"$(jq <<<\"${checksums[\"$fullVersion\"]:-null}\" --arg type \"$type\" --argjson sums \"$sbom\" '.[$type] += $sums')\"\n\t\treturn 0\n\tfi\n\n\tif ! wget -q -O /dev/null -o /dev/null --spider \"$url\"; then\n\t\treturn 1\n\tfi\n\n\treturn 0\n}\n\nfor version in \"${versions[@]}\"; do\n\trcVersion=\"${version%-rc}\"\n\texport version rcVersion\n\n\trcGrepV='-v'\n\tif [ \"$rcVersion\" != \"$version\" ]; then\n\t\trcGrepV=\n\tfi\n\n\tpossibles=( $(\n\t\t{\n\t\t\tgit ls-remote --tags https://github.com/python/cpython.git \"refs/tags/v${rcVersion}.*\" \\\n\t\t\t\t| sed -r 's!^.*refs/tags/v([0-9a-z.]+).*$!\\1!' \\\n\t\t\t\t| grep $rcGrepV -E -- '[a-zA-Z]+' \\\n\t\t\t\t|| :\n\n\t\t\t# this page has a very aggressive varnish cache in front of it, which is why we also scrape tags from GitHub\n\t\t\twget -qO- 'https://www.python.org/ftp/python/' \\\n\t\t\t\t| grep '<a href=\"'\"$rcVersion.\" \\\n\t\t\t\t| sed -r 's!.*<a href=\"([^\"/]+)/?\".*!\\1!' \\\n\t\t\t\t| grep $rcGrepV -E -- '[a-zA-Z]+' \\\n\t\t\t\t|| :\n\t\t} | sort -ruV\n\t) )\n\tfullVersion=\n\thasWindows=\n\tdeclare -A impossible=()\n\tfor possible in \"${possibles[@]}\"; do\n\t\trcPossible=\"${possible%%[a-z]*}\"\n\n\t\t# varnish is great until it isn't (usually the directory listing we scrape below is updated/uncached significantly later than the release being available)\n\t\tif check_file \"$rcPossible\" \"$possible\"; then\n\t\t\tfullVersion=\"$possible\"\n\t\t\tif check_file \"$rcPossible\" \"$possible\" windows; then\n\t\t\t\thasWindows=1\n\t\t\tfi\n\t\t\tbreak\n\t\tfi\n\n\t\tif [ -n \"${impossible[$rcPossible]:-}\" ]; then\n\t\t\tcontinue\n\t\tfi\n\t\timpossible[$rcPossible]=1\n\t\tpossibleVersions=( $(\n\t\t\twget -qO- -o /dev/null \"https://www.python.org/ftp/python/$rcPossible/\" \\\n\t\t\t\t| grep '<a href=\"Python-'\"$rcVersion\"'.*\\.tar\\.xz\"' \\\n\t\t\t\t| sed -r 's!.*<a href=\"Python-([^\"/]+)\\.tar\\.xz\".*!\\1!' \\\n\t\t\t\t| grep $rcGrepV -E -- '[a-zA-Z]+' \\\n\t\t\t\t| sort -rV \\\n\t\t\t\t|| true\n\t\t) )\n\t\tfor possibleVersion in \"${possibleVersions[@]}\"; do\n\t\t\tif check_file \"$rcPossible\" \"$possibleVersion\"; then\n\t\t\t\tfullVersion=\"$possibleVersion\"\n\t\t\t\tif check_file \"$rcPossible\" \"$possible\" windows; then\n\t\t\t\t\thasWindows=1\n\t\t\t\tfi\n\t\t\t\tbreak\n\t\t\tfi\n\t\tdone\n\tdone\n\n\tif [ -z \"$fullVersion\" ]; then\n\t\t{\n\t\t\techo\n\t\t\techo\n\t\t\techo \"  error: cannot find $version (alpha/beta/rc?)\"\n\t\t\techo\n\t\t\techo\n\t\t} >&2\n\t\texit 1\n\tfi\n\n\tensurepipVersions=\"$(\n\t\twget -qO- \"https://github.com/python/cpython/raw/v$fullVersion/Lib/ensurepip/__init__.py\" \\\n\t\t\t| grep -E '^[^[:space:]]+_VERSION[[:space:]]*='\n\t)\"\n\n\t# Note: We don't extract the pip version here, since our policy is now to use the pip version\n\t# that is installed during the Python build (which is the version bundled in ensurepip), and\n\t# to not support overriding it.\n\n\t# TODO remove setuptools version handling entirely once Python 3.11 is EOL\n\tsetuptoolsVersion=\"$(sed -nre 's/^_SETUPTOOLS_VERSION[[:space:]]*=[[:space:]]*\"(.*?)\".*/\\1/p' <<<\"$ensurepipVersions\")\"\n\tcase \"$rcVersion\" in\n\t\t3.9 | 3.10 | 3.11)\n\t\t\tif [ -z \"$setuptoolsVersion\" ]; then\n\t\t\t\techo >&2 \"error: $version: missing setuptools version\"\n\t\t\t\texit 1\n\t\t\tfi\n\t\t\tif ! wget -q -O /dev/null -o /dev/null --spider \"https://pypi.org/pypi/setuptools/$setuptoolsVersion/json\"; then\n\t\t\t\techo >&2 \"error: $version: setuptools version ($setuptoolsVersion) seems to be invalid?\"\n\t\t\t\texit 1\n\t\t\tfi\n\n\t\t\t# https://github.com/docker-library/python/issues/781 (TODO remove this if 3.10 and 3.11 embed a newer setuptools and this section no longer applies)\n\t\t\tif [ \"$setuptoolsVersion\" = '65.5.0' ]; then\n\t\t\t\tsetuptoolsVersion='65.5.1'\n\t\t\tfi\n\t\t\t;;\n\n\t\t*)\n\t\t\t# https://github.com/python/cpython/issues/95299 -> https://github.com/python/cpython/commit/ece20dba120a1a4745721c49f8d7389d4b1ee2a7\n\t\t\tif [ -n \"$setuptoolsVersion\" ]; then\n\t\t\t\techo >&2 \"error: $version: unexpected setuptools: $setuptoolsVersion\"\n\t\t\t\texit 1\n\t\t\tfi\n\t\t\t;;\n\tesac\n\n\techo \"$version: $fullVersion\"\n\n\texport fullVersion pipVersion setuptoolsVersion hasWindows\n\tdoc=\"$(jq -nc '\n\t\t{\n\t\t\tversion: env.fullVersion,\n\t\t\tvariants: [\n\t\t\t\t(\n\t\t\t\t\t\"bookworm\",\n\t\t\t\t\t\"bullseye\",\n\t\t\t\t\tempty\n\t\t\t\t| ., \"slim-\" + .), # https://github.com/docker-library/ruby/pull/142#issuecomment-320012893\n\t\t\t\t(\n\t\t\t\t\t\"3.21\",\n\t\t\t\t\t\"3.20\",\n\t\t\t\t\tempty\n\t\t\t\t| \"alpine\" + .),\n\t\t\t\tif env.hasWindows != \"\" then\n\t\t\t\t\t(\n\t\t\t\t\t\t\"ltsc2022\",\n\t\t\t\t\t\t\"1809\",\n\t\t\t\t\t\tempty\n\t\t\t\t\t| \"windows/windowsservercore-\" + .)\n\t\t\t\telse empty end\n\t\t\t],\n\t\t} + if env.setuptoolsVersion != \"\" then {\n\t\t\tsetuptools: {\n\t\t\t\tversion: env.setuptoolsVersion,\n\t\t\t},\n\t\t} else {} end\n\t')\"\n\n\tif [ -n \"${checksums[\"$fullVersion\"]:-}\" ]; then\n\t\tdoc=\"$(jq <<<\"$doc\" -c --argjson checksums \"${checksums[\"$fullVersion\"]}\" '.checksums = $checksums')\"\n\tfi\n\n\tjson=\"$(jq <<<\"$json\" -c --argjson doc \"$doc\" '.[env.version] = $doc')\"\ndone\n\njq <<<\"$json\" -S . > versions.json\n"
        }
      ]
    }
  ]
}