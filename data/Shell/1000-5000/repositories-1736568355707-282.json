{
  "metadata": {
    "timestamp": 1736568355707,
    "page": 282,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "subosito/flutter-action",
      "stars": 2302,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.076171875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2019 Alif Rachmawadi <arch@subosito.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.7490234375,
          "content": "# flutter-action\n\nFlutter environment for use in GitHub Actions. It works on Linux, Windows, and\nmacOS.\n\nOriginally created by [Alif Rachmawadi]. Maintained by [Bartek Pacia].\n\nThe following sections show how to configure this action.\n\n## Specifying Flutter version\n\n### Use specific version and channel\n\n```yaml\nsteps:\n  - name: Clone repository\n    uses: actions/checkout@v4\n  - name: Set up Flutter\n    uses: subosito/flutter-action@v2\n    with:\n      channel: stable\n      flutter-version: 3.19.0\n  - run: flutter --version\n```\n\n### Use version from pubspec.yaml\n\nThis is inspired by [`actions/setup-go`](https://github.com/actions/setup-go).\n\n```yaml\nsteps:\n  - name: Clone repository\n    uses: actions/checkout@v4\n  - name: Set up Flutter\n    uses: subosito/flutter-action@v2\n    with:\n      channel: stable\n      flutter-version-file: pubspec.yaml # path to pubspec.yaml\n  - run: flutter --version\n```\n\n> [!IMPORTANT]\n>\n> For `flutter-version-file` to work, you need to have the exact Flutter version\n> defined in your pubspec.yaml:\n>\n> **Good**\n>\n> ```yaml\n> environment:\n>   sdk: \">=3.3.0 <4.0.0\"\n>   flutter: 3.19.0\n> ```\n>\n> **Bad**\n>\n> ```yaml\n> environment:\n>   sdk: \">=3.3.0 <4.0.0\"\n>   flutter: \">= 3.19.0 <4.0.0\"\n> ```\n\n> [!NOTE]\n>\n> Using `flutter-version-file` requires [`yq`](https://github.com/mikefarah/yq),\n> which is not pre-installed in `windows` runners. Fortunately, since version\n> 2.18.0, this action installs `yq` automatically, so no action is required from\n> you.\n\n### Use latest release for particular channel\n\n```yaml\nsteps:\n  - name: Clone repository\n    uses: actions/checkout@v4\n  - name: Set up Flutter\n    uses: subosito/flutter-action@v2\n    with:\n      channel: stable # or: beta, master (or main)\n  - run: flutter --version\n```\n\n### Use latest release for particular version and/or channel\n\n```yaml\nsteps:\n  - name: Clone repository\n    uses: actions/checkout@v4\n  - name: Set up Flutter\n    uses: subosito/flutter-action@v2\n    with:\n      channel: dev\n      flutter-version: 1.22.x\n  - run: flutter --version\n```\n\n### Use particular version on any channel\n\n```yaml\nsteps:\n  - name: Clone repository\n    uses: actions/checkout@v4\n  - name: Set up Flutter\n    uses: subosito/flutter-action@v2\n    with:\n      channel: any\n      flutter-version: 3.x\n  - run: flutter --version\n```\n\n### Use particular git reference on master channel\n\n```yaml\nsteps:\n  - name: Clone repository\n    uses: actions/checkout@v4\n  - name: Set up Flutter\n    uses: subosito/flutter-action@v2\n    with:\n      channel: master\n      flutter-version: 5b12b74 # tag, commit or branch\n  - run: flutter --version\n```\n\n### Use alternative Flutter repository\n\nThis action supports \"alternative Flutters\" in addition to the official\n[`flutter/flutter`](https://github.com/flutter/flutter), for example:\n- [Flock](https://github.com/Flutter-Foundation/flutter.git)\n- [a Flutter fork that supports\n  HarmonyOS](https://gitee.com/harmonycommando_flutter/flutter.git)\n\n```yaml\nsteps:\n  - name: Clone repository\n    uses: actions/checkout@v4\n  - name: Set up Flutter\n    uses: subosito/flutter-action@v2\n    with:\n      channel: master\n      flutter-version: 3.24.0\n      git-source: https://github.com/Flutter-Foundation/flutter.git\n  - run: flutter --version\n```\n\n> [!NOTE]\n>\n> This feature was implemented in\n> [#344](https://github.com/subosito/flutter-action/pull/334) and is available\n> since v2.18.0.\n\n### Apply a patch\n\nSometimes you find a bug in Flutter and you fix it yourself (you're a\nrockstar!), and then submit a patch/PR to Flutter repository. However, everyone\nknows that code review takes time, but your app needs the fix _now_.\n\nYou can apply your patch like this:\n\n```yaml\nsteps:\n- name: Clone repository\n  uses: actions/checkout@v4\n- uses: subosito/flutter-action@v2\n  with:\n    flutter-version: 3.22.2\n    channel: stable\n- run: |\n    flutter --version\n    cd ${{ env.FLUTTER_ROOT }}\n    curl https://patch-diff.githubusercontent.com/raw/flutter/flutter/pull/137874.patch | git apply\n    git status\n```\n\n> [!NOTE]\n>\n> This was first discussed in [this issue](https://github.com/subosito/flutter-action/issues/310).\n\n## Build targets\n\nBuild **Android** APK and app bundle:\n\n```yaml\nsteps:\n  - name: Clone repository\n    uses: actions/checkout@v4\n  - name: Set up Flutter\n    uses: subosito/flutter-action@v2\n    with:\n      flutter-version: 3.24.0\n  - run: flutter pub get\n  - run: flutter test\n  - run: flutter build apk\n  - run: flutter build appbundle\n```\n\n### Build for iOS\n\n> [!NOTE]\n>\n> Building for iOS requires a macOS runner.\n\n```yaml\njobs:\n  main:\n    runs-on: macos-latest\n    steps:\n      - name: Clone repository\n        uses: actions/checkout@v4\n      - name: Set up Flutter\n        uses: subosito/flutter-action@v2\n        with:\n          channel: stable\n      - run: flutter pub get\n      - run: flutter test\n      - run: flutter build ios --release --no-codesign\n```\n\n### Build for the web\n\n```yaml\nsteps:\n  - name: Clone repository\n    uses: actions/checkout@v4\n  - name: Set up Flutter\n    uses: subosito/flutter-action@v2\n    with:\n      channel: stable\n  - run: flutter pub get\n  - run: flutter test\n  - run: flutter build web\n```\n\n### Build for Windows\n\n```yaml\njobs:\n  main:\n    runs-on: windows-latest\n    steps:\n      - name: Clone repository\n        uses: actions/checkout@v4\n      - name: Set up Flutter\n        uses: subosito/flutter-action@v2\n        with:\n          channel: stable\n      - run: flutter build windows\n```\n\n### Build for Linux desktop\n\n```yaml\njobs:\n  main:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Clone repository\n        uses: actions/checkout@v4\n      - name: Set up Flutter\n        uses: subosito/flutter-action@v2\n        with:\n          channel: stable\n      - run: |\n          sudo apt-get update -y\n          sudo apt-get install -y ninja-build libgtk-3-dev\n      - run: flutter build linux\n```\n\n### Build for macOS desktop\n\n> [!NOTE]\n>\n> Building for macOS requires a macOS runner.\n\n```yaml\njobs:\n  main:\n    runs-on: macos-latest\n    steps:\n      - name: Clone repository\n        uses: actions/checkout@v4\n      - name: Set up Flutter\n        uses: subosito/flutter-action@v2\n        with:\n          channel: stable\n      - run: flutter build macos\n```\n\n## Caching\n\nIntegration with [`actions/cache`](https://github.com/actions/cache):\n\n```yaml\nsteps:\n  - name: Clone repository\n    uses: actions/checkout@v4\n  - name: Set up Flutter\n    uses: subosito/flutter-action@v2\n    with:\n      channel: stable\n      cache: true\n      # optional parameters follow\n      cache-key: \"flutter-:os:-:channel:-:version:-:arch:-:hash:\" # optional, change this to force refresh cache\n      cache-path: \"${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:\" # optional, change this to specify the cache path\n      pub-cache-key: \"flutter-pub:os:-:channel:-:version:-:arch:-:hash:\" # optional, change this to force refresh cache of dart pub get dependencies\n      pub-cache-path: \"${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:\" # optional, change this to specify the cache path\n  - run: flutter --version\n```\n\nNote: `cache-key`, `pub-cache-key`, and `cache-path` have support for several\ndynamic values:\n\n- `:os:`\n- `:channel:`\n- `:version:`\n- `:arch:`\n- `:hash:`\n- `:sha256:`\n\nUse outputs from `flutter-action`:\n\n```yaml\nsteps:\n  - name: Clone repository\n  - uses: actions/checkout@v4\n  - name: Set up Flutter\n    uses: subosito/flutter-action@v2\n    id: flutter-action\n    with:\n      channel: stable\n  - name: Print outputs\n    shell: bash\n    run: |\n      echo CACHE-PATH=${{ steps.flutter-action.outputs.CACHE-PATH }}\n      echo CACHE-KEY=${{ steps.flutter-action.outputs.CACHE-KEY }}\n      echo CHANNEL=${{ steps.flutter-action.outputs.CHANNEL }}\n      echo VERSION=${{ steps.flutter-action.outputs.VERSION }}\n      echo ARCHITECTURE=${{ steps.flutter-action.outputs.ARCHITECTURE }}\n      echo PUB-CACHE-PATH=${{ steps.flutter-action.outputs.PUB-CACHE-PATH }}\n      echo PUB-CACHE-KEY=${{ steps.flutter-action.outputs.PUB-CACHE-KEY }}\n```\n\nIf you don't need to install Flutter and just want the outputs, you can use the\n`dry-run` option:\n\n```yaml\nsteps:\n  - name: Clone repository\n  - uses: actions/checkout@v4\n  - name: Set up Flutter\n    uses: subosito/flutter-action@v2\n    id: flutter-action\n    with:\n      channel: stable\n      dry-run: true\n  - run: |\n      echo CACHE-PATH=${{ steps.flutter-action.outputs.CACHE-PATH }}\n      echo CACHE-KEY=${{ steps.flutter-action.outputs.CACHE-KEY }}\n      echo CHANNEL=${{ steps.flutter-action.outputs.CHANNEL }}\n      echo VERSION=${{ steps.flutter-action.outputs.VERSION }}\n      echo ARCHITECTURE=${{ steps.flutter-action.outputs.ARCHITECTURE }}\n      echo PUB-CACHE-PATH=${{ steps.flutter-action.outputs.PUB-CACHE-PATH }}\n      echo PUB-CACHE-KEY=${{ steps.flutter-action.outputs.PUB-CACHE-KEY }}\n    shell: bash\n```\n[Alif Rachmawadi]: https://github.com/subosito\n[Bartek Pacia]: https://github.com/bartekpacia\n"
        },
        {
          "name": "action.yaml",
          "type": "blob",
          "size": 4.4599609375,
          "content": "name: Set up Flutter\ndescription: Setup your runner with Flutter environment\nauthor: Alif Rachmawadi\nbranding:\n  icon: maximize\n  color: blue\n\ninputs:\n  channel:\n    description: The Flutter build release channel\n    required: false\n    default: stable\n  flutter-version:\n    description: The Flutter version to make available on the path\n    required: false\n    default: \"\"\n  flutter-version-file:\n    description: The pubspec.yaml file with exact Flutter version defined\n    required: false\n    default: \"\"\n  architecture:\n    description: The architecture of Flutter SDK executable (x64 or arm64)\n    required: false\n    default: \"${{ runner.arch }}\"\n  cache:\n    description: Cache the Flutter SDK\n    required: false\n    default: \"false\"\n  cache-key:\n    description: Identifier for the Flutter SDK cache\n    required: false\n    default: \"\"\n  cache-path:\n    description: Flutter SDK cache path\n    required: false\n    default: \"\"\n  pub-cache-key:\n    description: Identifier for the Dart .pub-cache cache\n    required: false\n    default: \"\"\n  pub-cache-path:\n    description: Flutter pub cache path\n    required: false\n    default: default\n  dry-run:\n    description: If true, get outputs but do not install Flutter\n    required: false\n    default: \"false\"\n  git-source:\n    description: Git clone source\n    required: false\n    default: \"https://github.com/flutter/flutter.git\"\n\noutputs:\n  CHANNEL:\n    value: \"${{ steps.flutter-action.outputs.CHANNEL }}\"\n    description: The selected Flutter release channel\n  VERSION:\n    value: \"${{ steps.flutter-action.outputs.VERSION }}\"\n    description: The selected Flutter version\n  ARCHITECTURE:\n    value: \"${{ steps.flutter-action.outputs.ARCHITECTURE }}\"\n    description: The selected Flutter CPU architecture\n  CACHE-KEY:\n    value: \"${{ steps.flutter-action.outputs.CACHE-KEY }}\"\n    description: Key used to cache the Flutter SDK\n  CACHE-PATH:\n    value: \"${{ steps.flutter-action.outputs.CACHE-PATH }}\"\n    description: Path to Flutter SDK\n  PUB-CACHE-KEY:\n    value: \"${{ steps.flutter-action.outputs.PUB-CACHE-KEY }}\"\n    description: Key used to cache the pub dependencies\n  PUB-CACHE-PATH:\n    value: \"${{ steps.flutter-action.outputs.PUB-CACHE-PATH }}\"\n    description: Path to pub cache\n  GIT_SOURCE:\n    value: \"${{ steps.flutter-action.outputs.GIT_SOURCE }}\"\n    description: Git source of Flutter SDK repository to clone\n\nruns:\n  using: composite\n  steps:\n    # This is a cross-platform composite action that needs yq.\n    # It's not preinstalled on Windows runners.\n    # See https://github.com/actions/runner-images/issues/7443#issuecomment-1514597691\n    - name: Make yq tool available on Windows runners\n      if: runner.os == 'Windows'\n      run: choco install yq\n      shell: bash\n\n    - name: Make setup script executable\n      run: chmod +x \"$GITHUB_ACTION_PATH/setup.sh\"\n      shell: bash\n\n    - name: Set action inputs\n      id: flutter-action\n      shell: bash\n      run: |\n        $GITHUB_ACTION_PATH/setup.sh -p \\\n          -n '${{ inputs.flutter-version }}' \\\n          -f '${{ inputs.flutter-version-file }}' \\\n          -a '${{ inputs.architecture }}' \\\n          -k '${{ inputs.cache-key }}' \\\n          -c '${{ inputs.cache-path }}' \\\n          -l '${{ inputs.pub-cache-key }}' \\\n          -d '${{ inputs.pub-cache-path }}' \\\n          -g '${{ inputs.git-source }}' \\\n          ${{ inputs.channel }}\n\n    - name: Cache Flutter\n      uses: actions/cache@v4\n      if: ${{ inputs.cache == 'true' }}\n      with:\n        path: ${{ steps.flutter-action.outputs.CACHE-PATH }}\n        key: ${{ steps.flutter-action.outputs.CACHE-KEY }}\n        restore-keys: |\n          ${{ steps.flutter-action.outputs.CACHE-KEY }}\n\n    - name: Cache pub dependencies\n      uses: actions/cache@v4\n      if: ${{ inputs.cache == 'true' }}\n      with:\n        path: ${{ steps.flutter-action.outputs.PUB-CACHE-PATH }}\n        key: ${{ steps.flutter-action.outputs.PUB-CACHE-KEY }}-${{ hashFiles('**/pubspec.lock') }}\n        restore-keys: |\n          ${{ steps.flutter-action.outputs.PUB-CACHE-KEY }}-${{ hashFiles('**/pubspec.lock') }}\n          ${{ steps.flutter-action.outputs.PUB-CACHE-KEY }}\n\n    - name: Run setup script\n      shell: bash\n      if: ${{ inputs.dry-run != 'true' && inputs.dry-run != true }}\n      run: |\n        $GITHUB_ACTION_PATH/setup.sh \\\n          -n '${{ steps.flutter-action.outputs.VERSION }}' \\\n          -a '${{ steps.flutter-action.outputs.ARCHITECTURE }}' \\\n          -c '${{ steps.flutter-action.outputs.CACHE-PATH }}' \\\n          ${{ steps.flutter-action.outputs.CHANNEL }}\n"
        },
        {
          "name": "setup.sh",
          "type": "blob",
          "size": 7.052734375,
          "content": "#!/bin/bash\nset -eu\n\ncheck_command() {\n\tcommand -v \"$1\" >/dev/null 2>&1\n}\n\nif ! check_command jq; then\n\techo \"jq not found. Install it from https://stedolan.github.io/jq\"\n\texit 1\nfi\n\nOS_NAME=$(echo \"$RUNNER_OS\" | awk '{print tolower($0)}')\nARCH_NAME=$(echo \"$RUNNER_ARCH\" | awk '{print tolower($0)}')\nMANIFEST_BASE_URL=\"https://storage.googleapis.com/flutter_infra_release/releases\"\nMANIFEST_JSON_PATH=\"releases_$OS_NAME.json\"\nMANIFEST_URL=\"$MANIFEST_BASE_URL/$MANIFEST_JSON_PATH\"\n\nfilter_by_channel() {\n\tjq --arg channel \"$1\" '[.releases[] | select($channel == \"any\" or .channel == $channel)]'\n}\n\nfilter_by_arch() {\n\tjq --arg arch \"$1\" '[.[] | select(.dart_sdk_arch == $arch or ($arch == \"x64\" and (has(\"dart_sdk_arch\") | not)))]'\n}\n\nfilter_by_version() {\n\tjq --arg version \"$1\" '.[].version |= gsub(\"^v\"; \"\") | (if $version == \"any\" then .[0] else (map(select(.version == $version or (.version | startswith(($version | sub(\"\\\\.x$\"; \"\")) + \".\")) and .version != $version)) | .[0]) end)'\n}\n\nnot_found_error() {\n\techo \"Unable to determine Flutter version for channel: $1 version: $2 architecture: $3\"\n}\n\ntransform_path() {\n\tif [ \"$OS_NAME\" = windows ]; then\n\t\techo \"$1\" | sed -e 's/^\\///' -e 's/\\//\\\\/g'\n\telse\n\t\techo \"$1\"\n\tfi\n}\n\ndownload_archive() {\n\tarchive_url=\"$MANIFEST_BASE_URL/$1\"\n\tarchive_name=$(basename \"$1\")\n\tarchive_local=\"$RUNNER_TEMP/$archive_name\"\n\n\tcurl --connect-timeout 15 --retry 5 \"$archive_url\" >\"$archive_local\"\n\n\tmkdir -p \"$2\"\n\n\tcase \"$archive_name\" in\n\t*.zip)\n\t\tEXTRACT_PATH=\"$RUNNER_TEMP/_unzip_temp\"\n\t\tunzip -q -o \"$archive_local\" -d \"$EXTRACT_PATH\"\n\t\t# Remove the folder again so that the move command can do a simple rename\n\t\t# instead of moving the content into the target folder.\n\t\t# This is a little bit of a hack since the \"mv --no-target-directory\"\n\t\t# linux option is not available here\n\t\trm -r \"$2\"\n\t\tmv \"$EXTRACT_PATH\"/flutter \"$2\"\n\t\trm -r \"$EXTRACT_PATH\"\n\t\t;;\n\t*)\n\t\ttar xf \"$archive_local\" -C \"$2\" --strip-components=1\n\t\t;;\n\tesac\n\n\trm \"$archive_local\"\n}\n\nCACHE_PATH=\"\"\nCACHE_KEY=\"\"\nPUB_CACHE_PATH=\"\"\nPUB_CACHE_KEY=\"\"\nPRINT_ONLY=\"\"\nTEST_MODE=false\nARCH=\"\"\nVERSION=\"\"\nVERSION_FILE=\"\"\nGIT_SOURCE=\"\"\n\nwhile getopts 'tc:k:d:l:pa:n:f:g:' flag; do\n\tcase \"$flag\" in\n\tc) CACHE_PATH=\"$OPTARG\" ;;\n\tk) CACHE_KEY=\"$OPTARG\" ;;\n\td) PUB_CACHE_PATH=\"$OPTARG\" ;;\n\tl) PUB_CACHE_KEY=\"$OPTARG\" ;;\n\tp) PRINT_ONLY=true ;;\n\tt) TEST_MODE=true ;;\n\ta) ARCH=\"$(echo \"$OPTARG\" | awk '{print tolower($0)}')\" ;;\n\tn) VERSION=\"$OPTARG\" ;;\n\tf)\n\t\tVERSION_FILE=\"$OPTARG\"\n\t\tif [ -n \"$VERSION_FILE\" ] && ! check_command yq; then\n\t\t\techo \"yq not found. Install it from https://mikefarah.gitbook.io/yq\"\n\t\t\texit 1\n\t\tfi\n\t\t;;\n    g) GIT_SOURCE=\"$OPTARG\" ;;\n\t?) exit 2 ;;\n\tesac\ndone\n\n[ -z \"$ARCH\" ] && ARCH=\"$ARCH_NAME\"\n\nif [ -n \"$VERSION_FILE\" ]; then\n\tif [ -n \"$VERSION\" ]; then\n\t\techo \"Cannot specify both a version and a version file\"\n\t\texit 1\n\tfi\n\n\tVERSION=\"$(yq eval '.environment.flutter' \"$VERSION_FILE\")\"\nfi\n\nARR_CHANNEL=(\"${@:$OPTIND:1}\")\nCHANNEL=\"${ARR_CHANNEL[0]:-}\"\n\n[ -z \"$CHANNEL\" ] && CHANNEL=stable\n[ -z \"$VERSION\" ] && VERSION=any\n[ -z \"$ARCH\" ] && ARCH=x64\n[ -z \"$CACHE_PATH\" ] && CACHE_PATH=\"$RUNNER_TOOL_CACHE/flutter/:channel:-:version:-:arch:\"\n[ -z \"$CACHE_KEY\" ] && CACHE_KEY=\"flutter-:os:-:channel:-:version:-:arch:-:hash:\"\n[ -z \"$PUB_CACHE_KEY\" ] && PUB_CACHE_KEY=\"flutter-pub-:os:-:channel:-:version:-:arch:-:hash:\"\n[ -z \"$PUB_CACHE_PATH\" ] && PUB_CACHE_PATH=\"default\"\n[ -z \"$GIT_SOURCE\" ] && GIT_SOURCE=\"https://github.com/flutter/flutter.git\"\n\n# `PUB_CACHE` is what Dart and Flutter looks for in the environment, while\n# `PUB_CACHE_PATH` is passed in from the action.\n#\n# If `PUB_CACHE` is set already, then it should continue to be used. Otherwise, satisfy it\n# if the action requests a custom path, or set to the Dart default values depending\n# on the operating system.\nif [ -z \"${PUB_CACHE:-}\" ]; then\n\tif [ \"$PUB_CACHE_PATH\" != \"default\" ]; then\n\t\tPUB_CACHE=\"$PUB_CACHE_PATH\"\n\telif [ \"$OS_NAME\" = \"windows\" ]; then\n\t\tPUB_CACHE=\"$LOCALAPPDATA\\\\Pub\\\\Cache\"\n\telse\n\t\tPUB_CACHE=\"$HOME/.pub-cache\"\n\tfi\nfi\n\nif [ \"$TEST_MODE\" = true ]; then\n\tRELEASE_MANIFEST=$(cat \"$(dirname -- \"${BASH_SOURCE[0]}\")/test/$MANIFEST_JSON_PATH\")\nelse\n\tRELEASE_MANIFEST=$(curl --silent --connect-timeout 15 --retry 5 \"$MANIFEST_URL\")\nfi\n\nif [ \"$CHANNEL\" = \"master\" ] || [ \"$CHANNEL\" = \"main\" ]; then\n\tVERSION_MANIFEST=\"{\\\"channel\\\":\\\"$CHANNEL\\\",\\\"version\\\":\\\"$VERSION\\\",\\\"dart_sdk_arch\\\":\\\"$ARCH\\\",\\\"hash\\\":\\\"$CHANNEL\\\",\\\"sha256\\\":\\\"$CHANNEL\\\"}\"\nelse\n\tVERSION_MANIFEST=$(echo \"$RELEASE_MANIFEST\" | filter_by_channel \"$CHANNEL\" | filter_by_arch \"$ARCH\" | filter_by_version \"$VERSION\")\nfi\n\ncase \"$VERSION_MANIFEST\" in\n*null*)\n\tnot_found_error \"$CHANNEL\" \"$VERSION\" \"$ARCH\"\n\texit 1\n\t;;\nesac\n\nexpand_key() {\n\tversion_channel=$(echo \"$VERSION_MANIFEST\" | jq -r '.channel')\n\tversion_version=$(echo \"$VERSION_MANIFEST\" | jq -r '.version')\n\tversion_arch=$(echo \"$VERSION_MANIFEST\" | jq -r '.dart_sdk_arch // \"x64\"')\n\tversion_hash=$(echo \"$VERSION_MANIFEST\" | jq -r '.hash')\n\tversion_sha_256=$(echo \"$VERSION_MANIFEST\" | jq -r '.sha256')\n\n\texpanded_key=\"${1/:channel:/$version_channel}\"\n\texpanded_key=\"${expanded_key/:version:/$version_version}\"\n\texpanded_key=\"${expanded_key/:arch:/$version_arch}\"\n\texpanded_key=\"${expanded_key/:hash:/$version_hash}\"\n\texpanded_key=\"${expanded_key/:sha256:/$version_sha_256}\"\n\texpanded_key=\"${expanded_key/:os:/$OS_NAME}\"\n\n\techo \"$expanded_key\"\n}\n\nCACHE_KEY=$(expand_key \"$CACHE_KEY\")\nPUB_CACHE_KEY=$(expand_key \"$PUB_CACHE_KEY\")\nCACHE_PATH=$(expand_key \"$(transform_path \"$CACHE_PATH\")\")\n\nif [ \"$PRINT_ONLY\" = true ]; then\n\tversion_info=$(echo \"$VERSION_MANIFEST\" | jq -j '.channel,\":\",.version,\":\",.dart_sdk_arch // \"x64\"')\n\n\tinfo_channel=$(echo \"$version_info\" | awk -F ':' '{print $1}')\n\tinfo_version=$(echo \"$version_info\" | awk -F ':' '{print $2}')\n\tinfo_architecture=$(echo \"$version_info\" | awk -F ':' '{print $3}')\n\n\tif [ \"$TEST_MODE\" = true ]; then\n\t\techo \"CHANNEL=$info_channel\"\n\t\techo \"VERSION=$info_version\"\n\t\t# VERSION_FILE is not printed, because it is essentially same as VERSION\n\t\techo \"ARCHITECTURE=$info_architecture\"\n\t\techo \"CACHE-KEY=$CACHE_KEY\"\n\t\techo \"CACHE-PATH=$CACHE_PATH\"\n\t\techo \"PUB-CACHE-KEY=$PUB_CACHE_KEY\"\n\t\techo \"PUB-CACHE-PATH=$PUB_CACHE\"\n\t\texit 0\n\tfi\n\n\t{\n\t\techo \"CHANNEL=$info_channel\"\n\t\techo \"VERSION=$info_version\"\n\t\t# VERSION_FILE is not printed, because it is essentially same as VERSION\n\t\techo \"ARCHITECTURE=$info_architecture\"\n\t\techo \"CACHE-KEY=$CACHE_KEY\"\n\t\techo \"CACHE-PATH=$CACHE_PATH\"\n\t\techo \"PUB-CACHE-KEY=$PUB_CACHE_KEY\"\n\t\techo \"PUB-CACHE-PATH=$PUB_CACHE\"\n\t} >>\"${GITHUB_OUTPUT:-/dev/null}\"\n\n\texit 0\nfi\n\nif [ ! -x \"$CACHE_PATH/bin/flutter\" ]; then\n\tif [ \"$CHANNEL\" = \"master\" ] || [ \"$CHANNEL\" = \"main\" ]; then\n\t\tgit clone -b \"$CHANNEL\" \"$GIT_SOURCE\" \"$CACHE_PATH\"\n\t\tif [ \"$VERSION\" != \"any\" ]; then\n\t\t\tgit config --global --add safe.directory \"$CACHE_PATH\"\n\t\t\t(cd \"$CACHE_PATH\" && git checkout \"$VERSION\")\n\t\tfi\n\telse\n\t\tarchive_url=$(echo \"$VERSION_MANIFEST\" | jq -r '.archive')\n\t\tdownload_archive \"$archive_url\" \"$CACHE_PATH\"\n\tfi\nfi\n\n{\n\techo \"FLUTTER_ROOT=$CACHE_PATH\"\n\techo \"PUB_CACHE=$PUB_CACHE\"\n} >>\"${GITHUB_ENV:-/dev/null}\"\n\n{\n\techo \"$CACHE_PATH/bin\"\n\techo \"$CACHE_PATH/bin/cache/dart-sdk/bin\"\n\techo \"$PUB_CACHE/bin\"\n} >>\"${GITHUB_PATH:-/dev/null}\"\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}