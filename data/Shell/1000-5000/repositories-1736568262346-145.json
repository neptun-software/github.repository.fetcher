{
  "metadata": {
    "timestamp": 1736568262346,
    "page": 145,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "kewlbear/FFmpeg-iOS-build-script",
      "stars": 3044,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0546875,
          "content": "scratch*\nthin*\nfat*\nFFmpeg.framework\nFFmpeg-*\n.DS_Store\n"
        },
        {
          "name": ".sf",
          "type": "blob",
          "size": 0.9130859375,
          "content": "U2FsdGVkX1963CBvqs0HeUSGVyB5D9h3ZGt59hEumxSseCqcFaPYkWuVfH2Z7AAp\nIKSrSFVBJyjmOFCp0atyz43YHXRfNyxRr3+Y7fKAyTnkEnI+XZVl9GLCLAndeyiX\n76V9+YomXl8VXJF7GJoa/37HMbFJ2XniDCsxsPuQm51lkhRUDqU9/g91x3WcQgWN\nTpJv1YFg8tL1Dsf82b+zvQ+VhDcbTOcB+BKhHe+MYyR7p13caN20j7hbzvxGXFsV\ntjugHZuIhg8EbrDdSP0vAhqgKt7NoW3Enino54/EVjX8VysuP4B3Z9Hi24dWccJf\n9WxsTkoaAFPCPXkv5GZ95W73p41G1zPFh5kOHwnli7Kvb6IKSQq/yrfTf5SOTUox\n85JAYk3pCPqVSA/v5i6z1e11382jdAszNA8+B916gjK84YRFAkYB40Y+BHvsrqHW\n9XL0o6u0BZmUkx+hx78IrwmIewqbq2+6lU+vOTFWevl1pYHQIm8x3IwazM275zu/\ne4Rth3sDGiELASjW+LZs2+PwchL7uyxGmlF/YuHJDePWWEl18Hk8lVBebjiY1DqA\nZpaC9VdHpuioK5JxBcZktqw18hVR8hkVQpJUT0PokkEsEf2+oeymY6LgFbnIrO8/\nSwBgqjHHRKwbzrLok3cRUiC+gxNWjHi+x+W/QVG4l4On/bsCT/EAxiF+Q+p1U7OC\n4YkxNF7A2l1PcNk+PAhy4VyHfOtidcGeRomHj5DiS98QQJCLUaVE4kmVrF1wDYlO\npc9qKtyvhFGz/eEpXmLV9gzHD3S7pKdBU0NAU8wVeeaGOGyX9ISpztQlvEWlPyEQ\nke4M+Pj1CfOQxFc5rX6EoztI+qHogEUcBD9FBYtFswBAcSG9kYhIuORR44LPB6yF\nm98e+PfyXGVLGI5GFNV1Sw==\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.6953125,
          "content": "language: objective-c\n\nscript: ./build-ffmpeg.sh 2>.stderr\n\nenv:\n    global:\n        - secure: \"POoeB0wNaIPKORu8solBfDwSbgk6bsxSJpVWqVawledYiZHnYLXUDzDawoKOXzjJ1oQQiluZWCmv+RXDA9gthTNrH08fuUEvsUHBr7sgHqaOskEbKN/s2962FLy4FRZdQyZFkrrzNcqnc3xaxgF5ZyjRewtB0JioaOSAPEH8ALc=\"\n        - TARBALL=ffmpeg-ios-$TRAVIS_BRANCH.tar.bz2\n\nafter_success:\n    - tar cjf $TARBALL FFmpeg-iOS .stderr scratch/*/config.log ffmpeg*/LICENSE.md ffmpeg*/COPYING.* README.md\n    - openssl aes-256-cbc -k \"$secret\" -in .sf -d -a -out id_sf\n    - chmod 600 id_sf\n    - scp -i id_sf -o 'StrictHostKeyChecking no' $TARBALL koolbear@frs.sourceforge.net:/home/frs/project/ffmpeg-ios\n\nafter_failure: cat .stderr\n\nosx_image: xcode8.3\n\nsudo: false\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.0625,
          "content": "# FFmpeg iOS build script\n\nSee the following repository for Swift package, .xcframeworks and more:\n\nhttps://github.com/kewlbear/FFmpeg-iOS\n\n[![Build Status](https://travis-ci.org/kewlbear/FFmpeg-iOS-build-script.svg?branch=master)](https://travis-ci.org/kewlbear/FFmpeg-iOS-build-script)\n\nThis is a shell script to build FFmpeg libraries for iOS and tvOS apps.\n\nTested with:\n\n* FFmpeg 4.3.1\n* Xcode 12.2\n\n## Requirements\n\n* https://github.com/libav/gas-preprocessor\n* yasm 1.2.0\n\n## Usage\n\nUse build-ffmpeg-tvos.sh for tvOS.\n\n* To build everything:\n\n        ./build-ffmpeg.sh\n\n* To build arm64 libraries:\n\n        ./build-ffmpeg.sh arm64\n\n* To build fat libraries for armv7 and x86_64 (64-bit simulator):\n\n        ./build-ffmpeg.sh armv7 x86_64\n\n* To build fat libraries from separately built thin libraries:\n\n        ./build-ffmpeg.sh lipo\n\n## Download\n\nYou can download a binary for FFmpeg 4.3.1 release at https://downloads.sourceforge.net/project/ffmpeg-ios/ffmpeg-ios-master.tar.bz2\n\n## External libraries\n\nYou should link your app with\n\n* libz.dylib\n* libbz2.dylib\n* libiconv.dylib\n"
        },
        {
          "name": "build-ffmpeg-iOS-framework.sh",
          "type": "blob",
          "size": 5.95703125,
          "content": "#!/bin/sh\n\n# directories\nSCRATCH=`pwd`/\"scratch\"\nARCHS=\"arm64 armv7 i386 x86_64\"\n\nFFMPEG_VERSION=\"3.4\"\nexport FFMPEG_VERSION\nHEADER_SUFFIX=\".h\"\nCURRENT_FOLDER=`pwd`\nFRAMEWORK_NAME=\"FFmpeg\"\nFRAMEWORK_EXT=\".framework\"\nFRAMEWORK=\"$FRAMEWORK_NAME$FRAMEWORK_EXT\"\nBUILD_FOLDER=\"$CURRENT_FOLDER/FFmpeg-iOS\"\nBUILD_THIN_FOLDER=\"$CURRENT_FOLDER/thin\"\nBUILD_INCLUDE_FOLDER=\"$BUILD_FOLDER/include\"\nBUILD_LIB_FOLDER=\"$BUILD_FOLDER/lib\"\nOUTPUT_FOLDER=\"$CURRENT_FOLDER/$FRAMEWORK\"\nOUTPUT_INFO_PLIST_FILE=\"$OUTPUT_FOLDER/Info.plist\"\nOUTPUT_HEADER_FOLDER=\"$OUTPUT_FOLDER/Headers\"\nOUTPUT_UMBRELLA_HEADER=\"$OUTPUT_HEADER_FOLDER/ffmpeg.h\"\nOUTPUT_MODULES_FOLDER=\"$OUTPUT_FOLDER/Modules\"\nOUTPUT_MODULES_FILE=\"$OUTPUT_MODULES_FOLDER/module.modulemap\"\nVERSION_NEW_NAME=\"Version.h\"\nBUNDLE_ID=\"org.ffmpeg.FFmpeg\"\n\nfunction CreateFramework() {\n  rm -rf $OUTPUT_FOLDER\n  mkdir -p $OUTPUT_HEADER_FOLDER $OUTPUT_MODULES_FOLDER\n}\n\nfunction CompileSource() {\n  ./build-ffmpeg.sh $ARCHS\n  ./build-ffmpeg.sh lipo\n}\n\nfunction MergeStaticLibrary() {\n  local files=\"\"\n\n  for ARCH in $ARCHS; do\n    folder=\"$SCRATCH/$ARCH\"\n    name=\"$FRAMEWORK_NAME$ARCH.a\"\n    ar cru $name $(find $folder -name \"*.o\")\n    files=\"$files $name\"\n  done\n\n  lipo -create $files -output FFmpeg\n\n  for file in $files; do\n    rm -rf $file\n  done\n  mv $FRAMEWORK_NAME $OUTPUT_FOLDER\n}\n\nfunction RenameHeader() {\n  local include_folder=\"$(pwd)/FFmpeg-iOS/include\"\n  local need_replace_version_folder=\"\"\n  for folder in \"$include_folder\"/*; do\n    local folder_name=`basename $folder`\n    local verstion_file_name=\"$folder_name$VERSION_NEW_NAME\"\n    for header in \"$folder\"/*; do\n\t\t\tlocal header_name=`basename $header`\n\n\t\t\tlocal dst_name=$header_name\n\t\t\tif [ $header_name == \"version.h\" ]; then\n\t\t\t\tdst_name=$verstion_file_name\n\t\t\tfi\n\n\t\t\tlocal dst_folder=$OUTPUT_HEADER_FOLDER\n\t\t\tlocal file_name=\"$folder/$header_name\"\n\t\t\tlocal dst_file_name=\"$dst_folder/$dst_name\"\n\t\t\tcp $file_name $dst_file_name\n\t\t\tfind \"$dst_folder\" -name \"$dst_name\" -type f -exec sed -i '' \"s/\\\"version.h\\\"/\\\"$verstion_file_name\\\"/g\" {} \\;\n\t\tdone\n    need_replace_version_folder=\"$need_replace_version_folder $folder_name\"\n  done\n\n  for folder_name in $need_replace_version_folder; do\n    local verstion_file_name=\"$folder_name$VERSION_NEW_NAME\"\n    find $OUTPUT_HEADER_FOLDER -type f -exec sed -i '' \"s/\\\"$folder_name\\/version.h\\\"/\\\"$verstion_file_name\\\"/g\" {} \\;\n  done\n  find $OUTPUT_HEADER_FOLDER -type f -exec sed -i '' \"s/libavformat\\///g\" {} \\;\n  find $OUTPUT_HEADER_FOLDER -type f -exec sed -i '' \"s/libavutil\\///g\" {} \\;\n\tfind $OUTPUT_HEADER_FOLDER -type f -exec sed -i '' \"s/libavcodec\\///g\" {} \\;\n}\n\n# COPY MISSING inttypes.h\nfunction CopyInttype() {\n  local file=\"$(xcode-select -p)/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/clang/include/inttypes.h\"\n\tcp $file $OUTPUT_HEADER_FOLDER\n\tfind $OUTPUT_HEADER_FOLDER -type f -exec sed -i '' \"s/<inttypes.h>/\\\"inttypes.h\\\"/g\" {} \\;\n}\n\nfunction CreateModulemapAndUmbrellaHeader() {\n  #create ffmpeg.h\n  cat > $OUTPUT_UMBRELLA_HEADER <<EOF\n#import <Foundation/Foundation.h>\n#import <VideoToolbox/VideoToolbox.h>\n#import <AudioToolbox/AudioToolbox.h>\n#include \"avcodec.h\"\n#include \"avdevice.h\"\n#include \"avfilter.h\"\n#include \"avformat.h\"\n#include \"avutil.h\"\n#include \"swscale.h\"\n#include \"swresample.h\"\ndouble FFmpegVersionNumber = $FFMPEG_VERSION;\nEOF\n\n  cat > $OUTPUT_MODULES_FILE <<EOF\nframework module $FRAMEWORK_NAME {\n  umbrella header \"ffmpeg.h\"\n\n  export *\n  module * { export * }\n}\nEOF\n}\n\nfunction CreateInfoPlist() {\n  DEFAULT_iOS_SDK_VERSION=`defaults read $(xcode-select -p)/Platforms/iPhoneOS.platform/version CFBundleShortVersionString`\n  DTCompiler=`defaults read $(xcode-select -p)/../info DTCompiler`\n  DTPlatformBuild=`defaults read $(xcode-select -p)/../info DTPlatformBuild`\n  DTSDKBuild=`defaults read $(xcode-select -p)/../info DTSDKBuild`\n  DTXcode=`defaults read $(xcode-select -p)/../info DTXcode`\n  DTXcodeBuild=`defaults read $(xcode-select -p)/../info DTXcodeBuild`\n  OS_BUILD_VERSION=$(sw_vers -buildVersion)\n  cat > $OUTPUT_INFO_PLIST_FILE <<EOF\n  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  <!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n  <plist version=\"1.0\">\n  <dict>\n          <key>BuildMachineOSBuild</key>\n          <string>$OS_BUILD_VERSION</string>\n          <key>CFBundleDevelopmentRegion</key>\n          <string>en</string>\n          <key>CFBundleExecutable</key>\n          <string>$FRAMEWORK_NAME</string>\n          <key>CFBundleIdentifier</key>\n          <string>$BUNDLE_ID</string>\n          <key>CFBundleInfoDictionaryVersion</key>\n          <string>6.0</string>\n          <key>CFBundleName</key>\n          <string>$FRAMEWORK_NAME</string>\n          <key>CFBundlePackageType</key>\n          <string>FMWK</string>\n          <key>CFBundleShortVersionString</key>\n          <string>$FFMPEG_VERSION</string>\n          <key>CFBundleSignature</key>\n          <string>????</string>\n          <key>CFBundleSupportedPlatforms</key>\n          <array>\n          <string>iPhoneOS</string>\n          </array>\n          <key>CFBundleVersion</key>\n          <string>1</string>\n          <key>DTCompiler</key>\n          <string>$DTCompiler</string>\n          <key>DTPlatformBuild</key>\n          <string>$DTPlatformBuild</string>\n          <key>DTPlatformName</key>\n          <string>iphoneos</string>\n          <key>DTPlatformVersion</key>\n          <string>$DEFAULT_iOS_SDK_VERSION</string>\n          <key>DTSDKBuild</key>\n          <string>$DTSDKBuild</string>\n          <key>DTSDKName</key>\n          <string>iphoneos$DEFAULT_iOS_SDK_VERSION</string>\n          <key>DTXcode</key>\n          <string>$DTXcode</string>\n          <key>DTXcodeBuild</key>\n          <string>$DTXcodeBuild</string>\n          <key>MinimumOSVersion</key>\n          <string>8.0</string>\n          <key>UIDeviceFamily</key>\n          <array>\n          <integer>1</integer>\n          <integer>2</integer>\n          </array>\n  </dict>\n  </plist>\nEOF\n}\n\nCompileSource\nCreateFramework\nMergeStaticLibrary\nRenameHeader\nCreateModulemapAndUmbrellaHeader\nCopyInttype\nCreateInfoPlist\n"
        },
        {
          "name": "build-ffmpeg-tvos.sh",
          "type": "blob",
          "size": 3.1787109375,
          "content": "#!/bin/sh\n\n# directories\nSOURCE=\"ffmpeg-3.1.1\"\nFAT=\"FFmpeg-tvOS\"\n\nSCRATCH=\"scratch-tvos\"\n# must be an absolute path\nTHIN=`pwd`/\"thin-tvos\"\n\n# absolute path to x264 library\n#X264=`pwd`/../x264-ios/x264-iOS\n\n#FDK_AAC=`pwd`/fdk-aac/fdk-aac-ios\n\nCONFIGURE_FLAGS=\"--enable-cross-compile --disable-debug --disable-programs \\\n                 --disable-doc --enable-pic --disable-indev=avfoundation\"\n\nif [ \"$X264\" ]\nthen\n\tCONFIGURE_FLAGS=\"$CONFIGURE_FLAGS --enable-gpl --enable-libx264\"\nfi\n\nif [ \"$FDK_AAC\" ]\nthen\n\tCONFIGURE_FLAGS=\"$CONFIGURE_FLAGS --enable-libfdk-aac\"\nfi\n\n# avresample\n#CONFIGURE_FLAGS=\"$CONFIGURE_FLAGS --enable-avresample\"\n\nARCHS=\"arm64 x86_64\"\n\nCOMPILE=\"y\"\nLIPO=\"y\"\n\nDEPLOYMENT_TARGET=\"9.0\"\n\nif [ \"$*\" ]\nthen\n\tif [ \"$*\" = \"lipo\" ]\n\tthen\n\t\t# skip compile\n\t\tCOMPILE=\n\telse\n\t\tARCHS=\"$*\"\n\t\tif [ $# -eq 1 ]\n\t\tthen\n\t\t\t# skip lipo\n\t\t\tLIPO=\n\t\tfi\n\tfi\nfi\n\nif [ \"$COMPILE\" ]\nthen\n\tif [ ! `which yasm` ]\n\tthen\n\t\techo 'Yasm not found'\n\t\tif [ ! `which brew` ]\n\t\tthen\n\t\t\techo 'Homebrew not found. Trying to install...'\n                        ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" \\\n\t\t\t\t|| exit 1\n\t\tfi\n\t\techo 'Trying to install Yasm...'\n\t\tbrew install yasm || exit 1\n\tfi\n\tif [ ! `which gas-preprocessor.pl` ]\n\tthen\n\t\techo 'gas-preprocessor.pl not found. Trying to install...'\n\t\t(curl -L https://github.com/libav/gas-preprocessor/raw/master/gas-preprocessor.pl \\\n\t\t\t-o /usr/local/bin/gas-preprocessor.pl \\\n\t\t\t&& chmod +x /usr/local/bin/gas-preprocessor.pl) \\\n\t\t\t|| exit 1\n\tfi\n\n\tif [ ! -r $SOURCE ]\n\tthen\n\t\techo 'FFmpeg source not found. Trying to download...'\n\t\tcurl http://www.ffmpeg.org/releases/$SOURCE.tar.bz2 | tar xj \\\n\t\t\t|| exit 1\n\tfi\n\n\tCWD=`pwd`\n\tfor ARCH in $ARCHS\n\tdo\n\t\techo \"building $ARCH...\"\n\t\tmkdir -p \"$SCRATCH/$ARCH\"\n\t\tcd \"$SCRATCH/$ARCH\"\n\n\t\tCFLAGS=\"-arch $ARCH\"\n\t\tif [ \"$ARCH\" = \"x86_64\" ]\n\t\tthen\n\t\t    PLATFORM=\"AppleTVSimulator\"\n\t\t    CFLAGS=\"$CFLAGS -mtvos-simulator-version-min=$DEPLOYMENT_TARGET\"\n\t\telse\n\t\t    PLATFORM=\"AppleTVOS\"\n\t\t    CFLAGS=\"$CFLAGS -mtvos-version-min=$DEPLOYMENT_TARGET -fembed-bitcode\"\n\t\t    if [ \"$ARCH\" = \"arm64\" ]\n\t\t    then\n\t\t        EXPORT=\"GASPP_FIX_XCODE5=1\"\n\t\t    fi\n\t\tfi\n\n\t\tXCRUN_SDK=`echo $PLATFORM | tr '[:upper:]' '[:lower:]'`\n\t\tCC=\"xcrun -sdk $XCRUN_SDK clang\"\n\t\tAR=\"xcrun -sdk $XCRUN_SDK ar\"\n\t\tCXXFLAGS=\"$CFLAGS\"\n\t\tLDFLAGS=\"$CFLAGS\"\n\t\tif [ \"$X264\" ]\n\t\tthen\n\t\t\tCFLAGS=\"$CFLAGS -I$X264/include\"\n\t\t\tLDFLAGS=\"$LDFLAGS -L$X264/lib\"\n\t\tfi\n\t\tif [ \"$FDK_AAC\" ]\n\t\tthen\n\t\t\tCFLAGS=\"$CFLAGS -I$FDK_AAC/include\"\n\t\t\tLDFLAGS=\"$LDFLAGS -L$FDK_AAC/lib\"\n\t\tfi\n\n\t\tTMPDIR=${TMPDIR/%\\/} $CWD/$SOURCE/configure \\\n\t\t    --target-os=darwin \\\n\t\t    --arch=$ARCH \\\n\t\t    --cc=\"$CC\" \\\n\t\t    --ar=\"$AR\" \\\n\t\t    $CONFIGURE_FLAGS \\\n\t\t    --extra-cflags=\"$CFLAGS\" \\\n\t\t    --extra-ldflags=\"$LDFLAGS\" \\\n\t\t    --prefix=\"$THIN/`basename $PWD`\" \\\n\t\t|| exit 1\n\n\t\txcrun -sdk $XCRUN_SDK make -j3 install $EXPORT || exit 1\n\t\tcd $CWD\n\tdone\nfi\n\nif [ \"$LIPO\" ]\nthen\n\techo \"building fat binaries...\"\n\tmkdir -p $FAT/lib\n\tset - $ARCHS\n\tCWD=`pwd`\n\tcd $THIN/$1/lib\n\tfor LIB in *.a\n\tdo\n\t\tcd $CWD\n\t\techo lipo -create `find $THIN -name $LIB` -output $FAT/lib/$LIB 1>&2\n\t\tlipo -create `find $THIN -name $LIB` -output $FAT/lib/$LIB || exit 1\n\tdone\n\n\tcd $CWD\n\tcp -rf $THIN/$1/include $FAT\nfi\n\necho Done\n"
        },
        {
          "name": "build-ffmpeg.sh",
          "type": "blob",
          "size": 3.447265625,
          "content": "#!/bin/sh\n\n# directories\nFF_VERSION=\"4.3.1\"\n#FF_VERSION=\"snapshot-git\"\nif [[ $FFMPEG_VERSION != \"\" ]]; then\n  FF_VERSION=$FFMPEG_VERSION\nfi\nSOURCE=\"ffmpeg-$FF_VERSION\"\nFAT=\"FFmpeg-iOS\"\n\nSCRATCH=\"scratch\"\n# must be an absolute path\nTHIN=`pwd`/\"thin\"\n\n# absolute path to x264 library\n#X264=`pwd`/fat-x264\n\n#FDK_AAC=`pwd`/../fdk-aac-build-script-for-iOS/fdk-aac-ios\n\nCONFIGURE_FLAGS=\"--enable-cross-compile --disable-debug --disable-programs \\\n                 --disable-doc --enable-pic\"\n\nif [ \"$X264\" ]\nthen\n\tCONFIGURE_FLAGS=\"$CONFIGURE_FLAGS --enable-gpl --enable-libx264\"\nfi\n\nif [ \"$FDK_AAC\" ]\nthen\n\tCONFIGURE_FLAGS=\"$CONFIGURE_FLAGS --enable-libfdk-aac --enable-nonfree\"\nfi\n\n# avresample\n#CONFIGURE_FLAGS=\"$CONFIGURE_FLAGS --enable-avresample\"\n\nARCHS=\"arm64 armv7 x86_64 i386\"\n\nCOMPILE=\"y\"\nLIPO=\"y\"\n\nDEPLOYMENT_TARGET=\"8.0\"\n\nif [ \"$*\" ]\nthen\n\tif [ \"$*\" = \"lipo\" ]\n\tthen\n\t\t# skip compile\n\t\tCOMPILE=\n\telse\n\t\tARCHS=\"$*\"\n\t\tif [ $# -eq 1 ]\n\t\tthen\n\t\t\t# skip lipo\n\t\t\tLIPO=\n\t\tfi\n\tfi\nfi\n\nif [ \"$COMPILE\" ]\nthen\n\tif [ ! `which yasm` ]\n\tthen\n\t\techo 'Yasm not found'\n\t\tif [ ! `which brew` ]\n\t\tthen\n\t\t\techo 'Homebrew not found. Trying to install...'\n                        ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" \\\n\t\t\t\t|| exit 1\n\t\tfi\n\t\techo 'Trying to install Yasm...'\n\t\tbrew install yasm || exit 1\n\tfi\n\tif [ ! `which gas-preprocessor.pl` ]\n\tthen\n\t\techo 'gas-preprocessor.pl not found. Trying to install...'\n\t\t(curl -L https://github.com/libav/gas-preprocessor/raw/master/gas-preprocessor.pl \\\n\t\t\t-o /usr/local/bin/gas-preprocessor.pl \\\n\t\t\t&& chmod +x /usr/local/bin/gas-preprocessor.pl) \\\n\t\t\t|| exit 1\n\tfi\n\n\tif [ ! -r $SOURCE ]\n\tthen\n\t\techo 'FFmpeg source not found. Trying to download...'\n\t\tcurl http://www.ffmpeg.org/releases/$SOURCE.tar.bz2 | tar xj \\\n\t\t\t|| exit 1\n\tfi\n\n\tCWD=`pwd`\n\tfor ARCH in $ARCHS\n\tdo\n\t\techo \"building $ARCH...\"\n\t\tmkdir -p \"$SCRATCH/$ARCH\"\n\t\tcd \"$SCRATCH/$ARCH\"\n\n\t\tCFLAGS=\"-arch $ARCH\"\n\t\tif [ \"$ARCH\" = \"i386\" -o \"$ARCH\" = \"x86_64\" ]\n\t\tthen\n\t\t    PLATFORM=\"iPhoneSimulator\"\n\t\t    CFLAGS=\"$CFLAGS -mios-simulator-version-min=$DEPLOYMENT_TARGET\"\n\t\telse\n\t\t    PLATFORM=\"iPhoneOS\"\n\t\t    CFLAGS=\"$CFLAGS -mios-version-min=$DEPLOYMENT_TARGET -fembed-bitcode\"\n\t\t    if [ \"$ARCH\" = \"arm64\" ]\n\t\t    then\n\t\t        EXPORT=\"GASPP_FIX_XCODE5=1\"\n\t\t    fi\n\t\tfi\n\n\t\tXCRUN_SDK=`echo $PLATFORM | tr '[:upper:]' '[:lower:]'`\n\t\tCC=\"xcrun -sdk $XCRUN_SDK clang\"\n\n\t\t# force \"configure\" to use \"gas-preprocessor.pl\" (FFmpeg 3.3)\n\t\tif [ \"$ARCH\" = \"arm64\" ]\n\t\tthen\n\t\t    AS=\"gas-preprocessor.pl -arch aarch64 -- $CC\"\n\t\telse\n\t\t    AS=\"gas-preprocessor.pl -- $CC\"\n\t\tfi\n\n\t\tCXXFLAGS=\"$CFLAGS\"\n\t\tLDFLAGS=\"$CFLAGS\"\n\t\tif [ \"$X264\" ]\n\t\tthen\n\t\t\tCFLAGS=\"$CFLAGS -I$X264/include\"\n\t\t\tLDFLAGS=\"$LDFLAGS -L$X264/lib\"\n\t\tfi\n\t\tif [ \"$FDK_AAC\" ]\n\t\tthen\n\t\t\tCFLAGS=\"$CFLAGS -I$FDK_AAC/include\"\n\t\t\tLDFLAGS=\"$LDFLAGS -L$FDK_AAC/lib\"\n\t\tfi\n\n\t\tTMPDIR=${TMPDIR/%\\/} $CWD/$SOURCE/configure \\\n\t\t    --target-os=darwin \\\n\t\t    --arch=$ARCH \\\n\t\t    --cc=\"$CC\" \\\n\t\t    --as=\"$AS\" \\\n\t\t    $CONFIGURE_FLAGS \\\n\t\t    --extra-cflags=\"$CFLAGS\" \\\n\t\t    --extra-ldflags=\"$LDFLAGS\" \\\n\t\t    --prefix=\"$THIN/$ARCH\" \\\n\t\t|| exit 1\n\n\t\tmake -j3 install $EXPORT || exit 1\n\t\tcd $CWD\n\tdone\nfi\n\nif [ \"$LIPO\" ]\nthen\n\techo \"building fat binaries...\"\n\tmkdir -p $FAT/lib\n\tset - $ARCHS\n\tCWD=`pwd`\n\tcd $THIN/$1/lib\n\tfor LIB in *.a\n\tdo\n\t\tcd $CWD\n\t\techo lipo -create `find $THIN -name $LIB` -output $FAT/lib/$LIB 1>&2\n\t\tlipo -create `find $THIN -name $LIB` -output $FAT/lib/$LIB || exit 1\n\tdone\n\n\tcd $CWD\n\tcp -rf $THIN/$1/include $FAT\nfi\n\necho Done\n"
        }
      ]
    }
  ]
}