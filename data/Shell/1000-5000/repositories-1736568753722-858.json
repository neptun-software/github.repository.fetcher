{
  "metadata": {
    "timestamp": 1736568753722,
    "page": 858,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg2OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "twolfson/sexy-bash-prompt",
      "stars": 1140,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".bash_prompt",
          "type": "blob",
          "size": 13.6171875,
          "content": "#!/usr/bin/env bash\n# Sexy bash prompt by twolfson\n# https://github.com/twolfson/sexy-bash-prompt\n# Forked from gf3, https://gist.github.com/gf3/306785\n\n# If we are on a colored terminal\nif tput setaf 1 &> /dev/null; then\n  # Reset the shell from our `if` check\n  tput sgr0 &> /dev/null\n\n  # If you would like to customize your colors, use\n  # # Attribution: http://linuxtidbits.wordpress.com/2008/08/11/output-color-on-bash-scripts/\n  # for i in $(seq 0 $(tput colors)); do\n  #   echo \" $(tput setaf $i)Text$(tput sgr0) $(tput bold)$(tput setaf $i)Text$(tput sgr0) $(tput sgr 0 1)$(tput setaf $i)Text$(tput sgr0)  \\$(tput setaf $i)\"\n  # done\n\n  # Save common color actions\n  sexy_bash_prompt_bold=\"$(tput bold)\"\n  sexy_bash_prompt_reset=\"$(tput sgr0)\"\n\n  # If the terminal supports at least 256 colors, write out our 256 color based set\n  if [[ \"$(tput colors)\" -ge 256 ]] &> /dev/null; then\n    sexy_bash_prompt_user_color=\"$sexy_bash_prompt_bold$(tput setaf 27)\" # BOLD BLUE\n    sexy_bash_prompt_preposition_color=\"$sexy_bash_prompt_bold$(tput setaf 7)\" # BOLD WHITE\n    sexy_bash_prompt_device_color=\"$sexy_bash_prompt_bold$(tput setaf 39)\" # BOLD CYAN\n    sexy_bash_prompt_dir_color=\"$sexy_bash_prompt_bold$(tput setaf 76)\" # BOLD GREEN\n    sexy_bash_prompt_git_status_color=\"$sexy_bash_prompt_bold$(tput setaf 154)\" # BOLD YELLOW\n    sexy_bash_prompt_git_progress_color=\"$sexy_bash_prompt_bold$(tput setaf 9)\" # BOLD RED\n  else\n  # Otherwise, use colors from our set of 8\n    sexy_bash_prompt_user_color=\"$sexy_bash_prompt_bold$(tput setaf 4)\" # BOLD BLUE\n    sexy_bash_prompt_preposition_color=\"$sexy_bash_prompt_bold$(tput setaf 7)\" # BOLD WHITE\n    sexy_bash_prompt_device_color=\"$sexy_bash_prompt_bold$(tput setaf 6)\" # BOLD CYAN\n    sexy_bash_prompt_dir_color=\"$sexy_bash_prompt_bold$(tput setaf 2)\" # BOLD GREEN\n    sexy_bash_prompt_git_status_color=\"$sexy_bash_prompt_bold$(tput setaf 3)\" # BOLD YELLOW\n    sexy_bash_prompt_git_progress_color=\"$sexy_bash_prompt_bold$(tput setaf 1)\" # BOLD RED\n  fi\n\n  sexy_bash_prompt_symbol_color=\"$sexy_bash_prompt_bold\" # BOLD\n  sexy_bash_prompt_symbol_error_color=\"$sexy_bash_prompt_bold$(tput setaf 1)\" # BOLD RED\nelse\n# Otherwise, use ANSI escape sequences for coloring\n  # If you would like to customize your colors, use\n  # DEV: 30-39 lines up 0-9 from `tput`\n  # for i in $(seq 0 109); do\n  #   echo -n -e \"\\033[1;${i}mText$(tput sgr0) \"\n  #   echo \"\\033[1;${i}m\"\n  # done\n\n  sexy_bash_prompt_reset=\"\\033[m\"\n  sexy_bash_prompt_user_color=\"\\033[1;34m\" # BLUE\n  sexy_bash_prompt_preposition_color=\"\\033[1;37m\" # WHITE\n  sexy_bash_prompt_device_color=\"\\033[1;36m\" # CYAN\n  sexy_bash_prompt_dir_color=\"\\033[1;32m\" # GREEN\n  sexy_bash_prompt_git_status_color=\"\\033[1;33m\" # YELLOW\n  sexy_bash_prompt_git_progress_color=\"\\033[1;31m\" # RED\n  sexy_bash_prompt_symbol_color=\"\" # NORMAL\n  sexy_bash_prompt_symbol_error_color=\"\\033[1;31m\" # RED\nfi\n\n# Define the default prompt terminator character '$'\nif [[ \"$UID\" == 0 ]]; then\n  sexy_bash_prompt_symbol=\"#\"\nelse\n  sexy_bash_prompt_symbol=\"\\$\"\nfi\n\n# Apply any color overrides that have been set in the environment\nif [[ -n \"$PROMPT_USER_COLOR\" ]]; then sexy_bash_prompt_user_color=\"$PROMPT_USER_COLOR\"; fi\nif [[ -n \"$PROMPT_PREPOSITION_COLOR\" ]]; then sexy_bash_prompt_preposition_color=\"$PROMPT_PREPOSITION_COLOR\"; fi\nif [[ -n \"$PROMPT_DEVICE_COLOR\" ]]; then sexy_bash_prompt_device_color=\"$PROMPT_DEVICE_COLOR\"; fi\nif [[ -n \"$PROMPT_DIR_COLOR\" ]]; then sexy_bash_prompt_dir_color=\"$PROMPT_DIR_COLOR\"; fi\nif [[ -n \"$PROMPT_GIT_STATUS_COLOR\" ]]; then sexy_bash_prompt_git_status_color=\"$PROMPT_GIT_STATUS_COLOR\"; fi\nif [[ -n \"$PROMPT_GIT_PROGRESS_COLOR\" ]]; then sexy_bash_prompt_git_progress_color=\"$PROMPT_GIT_PROGRESS_COLOR\"; fi\nif [[ -n \"$PROMPT_SYMBOL\" ]]; then sexy_bash_prompt_symbol=\"$PROMPT_SYMBOL\"; fi\nif [[ -n \"$PROMPT_SYMBOL_COLOR\" ]]; then sexy_bash_prompt_symbol_color=\"$PROMPT_SYMBOL_COLOR\"; fi\nif [[ -n \"$PROMPT_SYMBOL_ERROR_COLOR\" ]]; then sexy_bash_prompt_symbol_error_color=\"$PROMPT_SYMBOL_ERROR_COLOR\"; fi\n\n# Set up symbols\nsexy_bash_prompt_synced_symbol=\"\"\nsexy_bash_prompt_dirty_synced_symbol=\"*\"\nsexy_bash_prompt_unpushed_symbol=\"△\"\nsexy_bash_prompt_dirty_unpushed_symbol=\"▲\"\nsexy_bash_prompt_unpulled_symbol=\"▽\"\nsexy_bash_prompt_dirty_unpulled_symbol=\"▼\"\nsexy_bash_prompt_unpushed_unpulled_symbol=\"⬡\"\nsexy_bash_prompt_dirty_unpushed_unpulled_symbol=\"⬢\"\n\n# Apply symbol overrides that have been set in the environment\n# DEV: Working unicode symbols can be determined via the following gist\n#   **WARNING: The following gist has 64k lines and may freeze your browser**\n#   https://gist.github.com/twolfson/9cc7968eb6ee8b9ad877\nif [[ -n \"$PROMPT_SYNCED_SYMBOL\" ]]; then sexy_bash_prompt_synced_symbol=\"$PROMPT_SYNCED_SYMBOL\"; fi\nif [[ -n \"$PROMPT_DIRTY_SYNCED_SYMBOL\" ]]; then sexy_bash_prompt_dirty_synced_symbol=\"$PROMPT_DIRTY_SYNCED_SYMBOL\"; fi\nif [[ -n \"$PROMPT_UNPUSHED_SYMBOL\" ]]; then sexy_bash_prompt_unpushed_symbol=\"$PROMPT_UNPUSHED_SYMBOL\"; fi\nif [[ -n \"$PROMPT_DIRTY_UNPUSHED_SYMBOL\" ]]; then sexy_bash_prompt_dirty_unpushed_symbol=\"$PROMPT_DIRTY_UNPUSHED_SYMBOL\"; fi\nif [[ -n \"$PROMPT_UNPULLED_SYMBOL\" ]]; then sexy_bash_prompt_unpulled_symbol=\"$PROMPT_UNPULLED_SYMBOL\"; fi\nif [[ -n \"$PROMPT_DIRTY_UNPULLED_SYMBOL\" ]]; then sexy_bash_prompt_dirty_unpulled_symbol=\"$PROMPT_DIRTY_UNPULLED_SYMBOL\"; fi\nif [[ -n \"$PROMPT_UNPUSHED_UNPULLED_SYMBOL\" ]]; then sexy_bash_prompt_unpushed_unpulled_symbol=\"$PROMPT_UNPUSHED_UNPULLED_SYMBOL\"; fi\nif [[ -n \"$PROMPT_DIRTY_UNPUSHED_UNPULLED_SYMBOL\" ]]; then sexy_bash_prompt_dirty_unpushed_unpulled_symbol=\"$PROMPT_DIRTY_UNPUSHED_UNPULLED_SYMBOL\"; fi\n\n# Set up behavior options\nsexy_bash_prompt_show_error_once=\"1\"\n\n# Apply behavior overrides that have been set in the environment\nif [[ -n \"$PROMPT_SHOW_ERROR_ONCE\" ]]; then sexy_bash_prompt_show_error_once=\"$PROMPT_SHOW_ERROR_ONCE\"; fi\n\n# Define all our helper functions\nfunction sexy_bash_prompt_get_git_branch() {\n  # On branches, this will return the branch name\n  # On non-branches, (no branch)\n  ref=\"$(git symbolic-ref HEAD 2> /dev/null | sed -e 's/refs\\/heads\\///')\"\n  if [[ \"$ref\" != \"\" ]]; then\n    echo \"$ref\"\n  else\n    echo \"(no branch)\"\n  fi\n}\n\nfunction sexy_bash_prompt_get_git_progress() {\n  # Detect in-progress actions (e.g. merge, rebase)\n  # https://github.com/git/git/blob/v1.9-rc2/wt-status.c#L1199-L1241\n  git_dir=\"$(git rev-parse --git-dir)\"\n\n  # git merge\n  if [[ -f \"$git_dir/MERGE_HEAD\" ]]; then\n    echo \" [merge]\"\n  elif [[ -d \"$git_dir/rebase-apply\" ]]; then\n    # git am\n    if [[ -f \"$git_dir/rebase-apply/applying\" ]]; then\n      echo \" [am]\"\n    # git rebase\n    else\n      echo \" [rebase]\"\n    fi\n  elif [[ -d \"$git_dir/rebase-merge\" ]]; then\n    # git rebase --interactive/--merge\n    echo \" [rebase]\"\n  elif [[ -f \"$git_dir/CHERRY_PICK_HEAD\" ]]; then\n    # git cherry-pick\n    echo \" [cherry-pick]\"\n  fi\n  if [[ -f \"$git_dir/BISECT_LOG\" ]]; then\n    # git bisect\n    echo \" [bisect]\"\n  fi\n  if [[ -f \"$git_dir/REVERT_HEAD\" ]]; then\n    # git revert --no-commit\n    echo \" [revert]\"\n  fi\n}\n\nsexy_bash_prompt_is_branch1_behind_branch2 () {\n  # $ git log origin/master..master -1\n  # commit 4a633f715caf26f6e9495198f89bba20f3402a32\n  # Author: Todd Wolfson <todd@twolfson.com>\n  # Date:   Sun Jul 7 22:12:17 2013 -0700\n  #\n  #     Unsynced commit\n\n  # Find the first log (if any) that is in branch1 but not branch2\n  first_log=\"$(git log $1..$2 -1 2> /dev/null)\"\n\n  # Exit with 0 if there is a first log, 1 if there is not\n  [[ -n \"$first_log\" ]]\n}\n\nsexy_bash_prompt_branch_exists () {\n  # List remote branches           | # Find our branch and exit with 0 or 1 if found/not found\n  git branch --remote 2> /dev/null | grep --quiet \"$1\"\n}\n\nsexy_bash_prompt_parse_git_ahead () {\n  # Grab the local and remote branch\n  branch=\"$(sexy_bash_prompt_get_git_branch)\"\n  remote=\"$(git config --get \"branch.${branch}.remote\" || echo -n \"origin\")\"\n  remote_branch=\"$remote/$branch\"\n\n  # $ git log origin/master..master\n  # commit 4a633f715caf26f6e9495198f89bba20f3402a32\n  # Author: Todd Wolfson <todd@twolfson.com>\n  # Date:   Sun Jul 7 22:12:17 2013 -0700\n  #\n  #     Unsynced commit\n\n  # If the remote branch is behind the local branch\n  # or it has not been merged into origin (remote branch doesn't exist)\n  if (sexy_bash_prompt_is_branch1_behind_branch2 \"$remote_branch\" \"$branch\" ||\n      ! sexy_bash_prompt_branch_exists \"$remote_branch\"); then\n    # echo our character\n    echo 1\n  fi\n}\n\nsexy_bash_prompt_parse_git_behind () {\n  # Grab the branch\n  branch=\"$(sexy_bash_prompt_get_git_branch)\"\n  remote=\"$(git config --get \"branch.${branch}.remote\" || echo -n \"origin\")\"\n  remote_branch=\"$remote/$branch\"\n\n  # $ git log master..origin/master\n  # commit 4a633f715caf26f6e9495198f89bba20f3402a32\n  # Author: Todd Wolfson <todd@twolfson.com>\n  # Date:   Sun Jul 7 22:12:17 2013 -0700\n  #\n  #     Unsynced commit\n\n  # If the local branch is behind the remote branch\n  if sexy_bash_prompt_is_branch1_behind_branch2 \"$branch\" \"$remote_branch\"; then\n    # echo our character\n    echo 1\n  fi\n}\n\nfunction sexy_bash_prompt_parse_git_dirty() {\n  # If the git status has *any* changes (e.g. dirty), echo our character\n  if [[ -n \"$(git status --porcelain 2> /dev/null)\" ]]; then\n    echo 1\n  fi\n}\n\nfunction sexy_bash_prompt_is_on_git() {\n  git rev-parse 2> /dev/null\n}\n\nfunction sexy_bash_prompt_get_git_status() {\n  # Grab the git dirty and git behind\n  dirty_branch=\"$(sexy_bash_prompt_parse_git_dirty)\"\n  branch_ahead=\"$(sexy_bash_prompt_parse_git_ahead)\"\n  branch_behind=\"$(sexy_bash_prompt_parse_git_behind)\"\n\n  # Iterate through all the cases and if it matches, then echo\n  if [[ \"$dirty_branch\" == 1 && \"$branch_ahead\" == 1 && \"$branch_behind\" == 1 ]]; then\n    echo \"$sexy_bash_prompt_dirty_unpushed_unpulled_symbol\"\n  elif [[ \"$branch_ahead\" == 1 && \"$branch_behind\" == 1 ]]; then\n    echo \"$sexy_bash_prompt_unpushed_unpulled_symbol\"\n  elif [[ \"$dirty_branch\" == 1 && \"$branch_ahead\" == 1 ]]; then\n    echo \"$sexy_bash_prompt_dirty_unpushed_symbol\"\n  elif [[ \"$branch_ahead\" == 1 ]]; then\n    echo \"$sexy_bash_prompt_unpushed_symbol\"\n  elif [[ \"$dirty_branch\" == 1 && \"$branch_behind\" == 1 ]]; then\n    echo \"$sexy_bash_prompt_dirty_unpulled_symbol\"\n  elif [[ \"$branch_behind\" == 1 ]]; then\n    echo \"$sexy_bash_prompt_unpulled_symbol\"\n  elif [[ \"$dirty_branch\" == 1 ]]; then\n    echo \"$sexy_bash_prompt_dirty_synced_symbol\"\n  else # clean\n    echo \"$sexy_bash_prompt_synced_symbol\"\n  fi\n}\n\nsexy_bash_prompt_get_git_info () {\n  # Grab the branch\n  branch=\"$(sexy_bash_prompt_get_git_branch)\"\n\n  # If there are any branches\n  if [[ \"$branch\" != \"\" ]]; then\n    # Echo the branch\n    output=\"$branch\"\n\n    # Add on the git status\n    output=\"$output$(sexy_bash_prompt_get_git_status)\"\n\n    # Echo our output\n    echo \"$output\"\n  fi\n}\n\nsexy_bash_prompt_get_symbol_color () {\n  # Verify we have an exit code set\n  if [[ \"$sexy_bash_prompt_exit_code\" == \"\" ]]; then\n    echo \"Missing \\`sexy_bash_prompt_exit_code\\` for prompt symbol coloring\" 1>&2\n    echo \"Please verify \\`PROMPT_COMMAND\\` includes \\`sexy_bash_prompt_command\\` (enabled unless overwritten)\" 1>&2\n    echo \"$sexy_bash_prompt_symbol_color\"\n    return\n  fi\n  exit_code=\"$sexy_bash_prompt_exit_code\"\n\n  # If we'd like to show errors once, then inspect further\n  # DEV: This is a personal preference around seeing a red $ on any failing command consistently\n  # DEV: This also works to ignore keyboard interrupts in the prompt itself (normally exit code 130)\n  #   This will respect keyboard interrupt in running programs though (e.g. `time cat`)\n  # DEV: Further explanation of all scenarios, https://github.com/twolfson/sexy-bash-prompt/pull/89#issuecomment-685239313\n  if [[ \"$sexy_bash_prompt_show_error_once\" == \"1\" ]]; then\n    # If the last command has not changed (including its timestamp), then ignore our exit code\n    # last_command=\"501  echo hi\"\n    if [[ \"$sexy_bash_prompt_last_command\" == \"$sexy_bash_prompt_current_command\" ]]; then\n      exit_code=\"0\"\n    fi\n  fi\n\n  # Determine and output our symbol color\n  symbol_color=\"$sexy_bash_prompt_symbol_color\"\n  if [[ \"$exit_code\" != 0 ]]; then\n    symbol_color=\"$sexy_bash_prompt_symbol_error_color\"\n  fi\n  echo \"$symbol_color\"\n}\n\n# Define our hooks for storing the exit code and past commands\nsexy_bash_prompt_current_command=\"\"\nsexy_bash_prompt_command () {\n  # Capture and expose exit code first before anything, otherwise it'll be lost\n  export sexy_bash_prompt_exit_code=\"$?\"\n\n  # Capture last commands for `SEXY_BASH_PROMPT_SHOW_ERROR_ONCE` logic\n  # DEV: We would save these in `get_symbol_color` but its subshell variables don't persist\n  export sexy_bash_prompt_last_command=\"$sexy_bash_prompt_current_command\"\n  export sexy_bash_prompt_current_command=\"$(history 1)\"\n\n  # DEV: We don't set PS1 in here as it would prevent extension, see https://github.com/twolfson/sexy-bash-prompt/issues/90\n}\n# DEV: Extend `PROMPT_COMMAND` if there already is one\nif [[ \"$PROMPT_COMMAND\" != \"\" ]]; then\n  PROMPT_COMMAND=\"sexy_bash_prompt_command ; $PROMPT_COMMAND\"\nelse\n  PROMPT_COMMAND=\"sexy_bash_prompt_command\"\nfi\n\n# Define the sexy-bash-prompt\nPS1=\"\\[$sexy_bash_prompt_reset\\]\\\n\\[$sexy_bash_prompt_user_color\\]\\u\\[$sexy_bash_prompt_reset\\] \\\n\\[$sexy_bash_prompt_preposition_color\\]at\\[$sexy_bash_prompt_reset\\] \\\n\\[$sexy_bash_prompt_device_color\\]\\h\\[$sexy_bash_prompt_reset\\] \\\n\\[$sexy_bash_prompt_preposition_color\\]in\\[$sexy_bash_prompt_reset\\] \\\n\\[$sexy_bash_prompt_dir_color\\]\\w\\[$sexy_bash_prompt_reset\\]\\\n\\$( sexy_bash_prompt_is_on_git && \\\n  echo -n \\\" \\[$sexy_bash_prompt_preposition_color\\]on\\[$sexy_bash_prompt_reset\\] \\\" && \\\n  echo -n \\\"\\[$sexy_bash_prompt_git_status_color\\]\\$(sexy_bash_prompt_get_git_info)\\\" && \\\n  echo -n \\\"\\[$sexy_bash_prompt_git_progress_color\\]\\$(sexy_bash_prompt_get_git_progress)\\\" && \\\n  echo -n \\\"\\[$sexy_bash_prompt_reset\\]\\\")\\n\\\n\\[\\$(sexy_bash_prompt_get_symbol_color)\\]$sexy_bash_prompt_symbol \\[$sexy_bash_prompt_reset\\]\"\n"
        },
        {
          "name": ".foundryrc",
          "type": "blob",
          "size": 0.0556640625,
          "content": "{\n  \"releaseCommands\": [\n    \"foundry-release-git\"\n  ]\n}\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.025390625,
          "content": "test.stderr\nnode_modules/\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.7255859375,
          "content": "language: bash\nenv:\n  - GIT_PPA='ppa:git-core/v1.8' # Default `git` provided by Travis CI, see 2c84541\n  - GIT_PPA='ppa:pdoes/ppa' # Near bleeding edge, http://blog.avirtualhome.com/git-ppa-for-ubuntu/\n  - GIT_PPA='1.7.9.5-1' # Ubuntu Precise stable, https://launchpad.net/ubuntu/+source/git\nbefore_script:\n  - ./test/before_script.sh # Take care of git version\n  - apt-cache policy git # Determine git PPA source\n  - git --version # Spit out the git version\nscript:\n  - make test # Run normal test\n  # DEV: Install test is disabled due to Travis CI not closing --login scripts\n  # - make test-install # Run install-specific test\n\nnotifications:\n  email:\n    recipients:\n      - todd@twolfson.com\n    on_success: change\n    on_failure: change\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 3.8037109375,
          "content": "# sexy-bash-prompt changelog\n1.1.0 - Added exit code support with PROMPT_COMMAND hook but PS1 persistence, also improved test feedback. Fixed #82 again\n\n1.0.1 - Reverted PROMPT_COMMAND and exit code support due to PS1 extension no longer working, see #90\n\n1.0.0 - Moved to PROMPT_COMMAND and added exit code support in #88 and #89. Fixed #82\n\n0.30.0 - Added one-line install retry via conditionals and documented install dependencies via @tnatanael\n\n0.29.0 - Added failure case instructions for installation. Fixes #84\n\n0.28.0 - Fixed reset locations inside of shell via @jservice-rvbd in #75\n\n0.27.0 - Added support for non-origin remotes via @abhijit86k in #69\n\n0.26.7 - Moved from Flattr to OpenCollective\n\n0.26.6 - Documented uninstall steps. Fixes #65\n\n0.26.5 - Updated installation documentation to ignore CRLF configuration. Fixes #63\n\n0.26.4 - Updated donation link\n\n0.26.3 - Added missing `node_modules` to `.gitignore`\n\n0.26.2 - Added foundry for release\n\n0.26.1 - Fixed symbol documentation via @theseyi in #54\n\n0.26.0 - Updated install script for better Windows support. Fixes #45\n\n0.25.0 - Added support for overriding prompt symbol via `PROMPT_SYMBOL`. Via @rpdelaney in #53\n\n0.24.2 - Moved from gratipay-badge to text prompt for support\n\n0.24.1 - Added low level symbol suggestions to README\n\n0.24.0 - Prefixed all local variables and functions with `sexy_bash_prompt_` via @luizfb in #40 and @twolfson in #44\n\n0.23.0 - Added support for symbol overrides\n\n0.22.0 - Lowercased install script variables and moved to `.bash` extension. Via @rpdelaney in #37\n\n0.21.2 - Fixed up Travis CI PPA issues and started testing against `git@2.x.x`\n\n0.21.1 - Added `sudo` check inside of tests via @rpdelaney in #34\n\n0.21.0 - Added remaining 'in progress' keywords (e.g. `rebase`, `cherry-pick`)\n\n0.20.0 - Added missing quotes and made quote style consistent\n\n0.19.0 - Added `[merge]` indicator when a merge is in progress\n\n0.18.0 - Added conservative check for .bashrc in profile script during install\n\n0.17.0 - Updated install script to check against interactive shell. Fixes #24\n\n0.16.2 - Added regression test for colors and color overrides\n\n0.16.1 - Fixed git status color for non-256 color terminals\n\n0.16.0 - Added ability to override colors via global PROMPT_ variables\n\n0.15.0 - Converted all UPPER_CASE variable names to lower_case\n\n0.14.0 - Added `#` as prompt symbol for root\n\n0.13.0 - Adjusted color comments and DRYed up colors\n\n0.12.0 - Removed `TERM` setting from .bash_prompt and fixed up colors for low-fi terminals\n\n0.11.0 - Robustified `make install` to handle .bashrc not being auto-invoked\n\n0.10.7 - Added FAQ section and information on prompt not appearing in new shells\n\n0.10.6 - Added testing against multiple `git` versions\n\n0.10.5 - Patched `get_git_branch` to allow compatibility with earlier Git versions\n\n0.10.4 - Added Support section to README\n\n0.10.3 - Updated donation section to use larger badge\n\n0.10.2 - Updates to test suite to get `git init` tests passing in Travis CI (problems between `git` versions)\n\n0.10.1 - Fixed edge case for `get_git_branch` with `git-init` directories and tested edge case for `is_on_git` with `git-init` directories\n\n0.10.0 - Cleaned up code via reddit's LukeShu's suggestions and added Travis CI\n\n0.9.0 - Moved `demo` script into `Makefile` and updated screenshot to include `non-git` state\n\n0.8.0 - Renamed `.bashrc` to `.bash_prompt` for semantic reasons\n\n0.7.0 - DRYed up source code to make use same function for ahead/behind\n\n0.6.0 - Namespaced colors, trimmed comments, and filled out README\n\n0.5.0 - Moved majority of bash commands to `Makefile`\n\n0.4.0 - Added `install.sh` for simplified setup\n\n0.3.0 - Updated colors to be consistent between sections\n\n0.2.0 - Introducing latest content from (e.g. prompt updates, tests)\n\n0.1.0 - Forked from https://gist.github.com/gf3/306785/a35d28b6bdd0f7c54318cce510738438f04dabaa\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.03125,
          "content": "Copyright (c) 2013 Todd Wolfson\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2.7353515625,
          "content": "TEST_DIRS := $(notdir $(wildcard test/test-files/*))\nDOTGIT_DIRS := $(wildcard test/test-files/*/dotgit)\nGIT_DIRS := $(wildcard test/test-files/*/.git)\n\ninstall:\n\t@echo \"# Copying .bash_prompt to ~/.bash_prompt\"\n\tcp -f \".bash_prompt\" \"$(HOME)/.bash_prompt\"\n\n\t@# Run install script\n\t./install.bash\n\n\t@echo \"# twolfson/sexy-bash-prompt installation complete!\"\n\texit 0\n\ninstall-link:\n\t@echo \"# Linking .bash_prompt to ~/.bash_prompt\"\n\tln -f -s \"$(PWD)/.bash_prompt\" \"$(HOME)/.bash_prompt\"\n\n\t@# Run install script\n\t./install.bash\n\n\t@echo \"# twolfson/sexy-bash-prompt installation complete!\"\n\texit 0\n\nclean:\n\t@echo \"# Cleaning up test files\"\n\t-rm test.stderr\n\ntest: clean\n\t# Running prompt test\n\t./test/run.sh\n\ntest-install:\n\t# Running install test\n\t./test/install_test.sh\n\nmove-dotgit-to-git:\n\t# Moving over the dotgit directories to git directories\n\t@$(foreach ORIG_DIR, $(DOTGIT_DIRS), \\\n\t\techo \"Moving $(ORIG_DIR) to $(ORIG_DIR)/../.git\"; \\\n\t\tmv $(ORIG_DIR) $(ORIG_DIR)/../.git; \\\n\t)\n\nmove-git-to-dotgit:\n\t# Moving over the git directories to dotgit directories\n\t@$(foreach ORIG_DIR, $(GIT_DIRS), \\\n\t\techo \"Moving $(ORIG_DIR) to $(ORIG_DIR)/../dotgit\"; \\\n\t\tmv $(ORIG_DIR) $(ORIG_DIR)/../dotgit; \\\n\t)\n\ndemo:\n\t# Move dotgit to git for copying\n\tmake move-dotgit-to-git\n\n\t# Make non-git directory for demo\n\tmkdir -p ~/non-git\n\n\t# Copy over all the directories to /tmp/\n\trm -rf /tmp/git/\n\tmkdir -p /tmp/git/\n\t$(foreach TEST_DIR, $(TEST_DIRS), \\\n\t\tcp -r test/test-files/$(TEST_DIR) /tmp/git/$(TEST_DIR); \\\n\t)\n\n\t# Move back git to dotgit dirs\n\tmake move-git-to-dotgit\n\n\t# Output follow up commands\n\t@echo \"Demo environment set up. Please run the following commands:\"\n\t@echo '\"\"\"'\n\t@echo \"cd ~/non-git\"\n\t@echo \"cd /tmp/git/synced\"\n\t@echo \"cd /tmp/git/dirty-synced\"\n\t@echo \"cd /tmp/git/unpushed\"\n\t@echo \"cd /tmp/git/dirty-unpushed\"\n\t@echo \"cd /tmp/git/unpulled\"\n\t@echo \"cd /tmp/git/dirty-unpulled\"\n\t@echo \"cd /tmp/git/unpushed-unpulled\"\n\t@echo \"cd /tmp/git/dirty-unpushed-unpulled\"\n\t@echo '\"\"\"'\n\t@echo ''\n\t@echo \"Showcase in progress keywords:\"\n\t@echo '\"\"\"'\n\t@echo \"cd /tmp/git/merge-in-progress\"\n\t@echo \"cd /tmp/git/rebase-in-progress\"\n\t@echo \"cd /tmp/git/bisect-in-progress\"\n\t@echo \"cd /tmp/git/cherry-pick-in-progress\"\n\t@echo '\"\"\"'\n\ncolor-check:\n\t@echo 'bash --norc'\n\t@echo 'TERM=xterm-256color . .bash_prompt'\n\t@echo 'TERM=xterm . .bash_prompt'\n\t@echo 'TERM=\"\" . .bash_prompt'\n\t@echo 'TERM=xterm-256color PROMPT_USER_COLOR=\"\\033[1;32m\" PROMPT_PREPOSITION_COLOR=\"\\033[1;33m\" PROMPT_DEVICE_COLOR=\"\\033[1;34m\" PROMPT_DIR_COLOR=\"\\033[1;35m\" PROMPT_GIT_STATUS_COLOR=\"\\033[1;36m\" PROMPT_SYMBOL_COLOR=\"\\033[1;37m\" . .bash_prompt'\n\t@echo 'TERM='' PROMPT_USER_COLOR=\"$$(TERM=xterm-256color tput bold)$$(TERM=xterm-256color tput setaf 100)\" . .bash_prompt'\n\t@echo 'exit'\n\n.PHONY: install install-link clean test demo\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 17.1533203125,
          "content": "# sexy-bash-prompt [![Build status](https://travis-ci.org/twolfson/sexy-bash-prompt.png?branch=master)](https://travis-ci.org/twolfson/sexy-bash-prompt)\n\n[Bash][bash] prompt with colors, git statuses, and git branches.\n\nProviding a unique symbol for every combination of a dirty, unpulled, and unpushed `git` branch.\n\n![sexy-bash-prompt screenshot][screenshot]\n\n[screenshot]: screenshot.png\n\nForked from [a gist by gf3][sexy-bash-orig].\n\n[sexy-bash-orig]: https://gist.github.com/gf3/306785/a35d28b6bdd0f7c54318cce510738438f04dabaa\n\n### Do you like `sexy-bash-prompt`?\n<!-- Derived from https://opencollective.com/sexy-bash-prompt/banner.md -->\n[Support us with a monthly donation and help us continue our activities][donations] or [spread word on Twitter][twitter]\n\n[donations]: https://opencollective.com/sexy-bash-prompt#backer\n[twitter]: https://twitter.com/intent/tweet?text=Bash%20prompt%20with%20colors%2C%20git%20statuses%2C%20and%20git%20branches&url=https%3A%2F%2Fgithub.com%2Ftwolfson%2Fsexy-bash-prompt&via=sexybashprompt\n\n<a href=\"https://opencollective.com/sexy-bash-prompt/backer/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/backer/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/backer/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/backer/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/backer/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/backer/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/backer/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/backer/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/backer/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/backer/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/backer/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/backer/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/backer/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/backer/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/backer/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/backer/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/backer/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/backer/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/backer/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/backer/9/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/backer/10/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/backer/10/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/backer/11/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/backer/11/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/backer/12/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/backer/12/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/backer/13/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/backer/13/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/backer/14/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/backer/14/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/backer/15/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/backer/15/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/backer/16/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/backer/16/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/backer/17/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/backer/17/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/backer/18/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/backer/18/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/backer/19/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/backer/19/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/backer/20/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/backer/20/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/backer/21/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/backer/21/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/backer/22/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/backer/22/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/backer/23/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/backer/23/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/backer/24/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/backer/24/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/backer/25/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/backer/25/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/backer/26/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/backer/26/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/backer/27/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/backer/27/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/backer/28/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/backer/28/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/backer/29/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/backer/29/avatar.svg\"></a>\n\n### Sponsors\nBecome a sponsor and get your logo on our README on GitHub with a link to your site. [Become a sponsor](https://opencollective.com/sexy-bash-prompt#sponsor)\n\n<a href=\"https://opencollective.com/sexy-bash-prompt/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/sponsor/9/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/sponsor/10/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/sponsor/10/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/sponsor/11/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/sponsor/11/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/sponsor/12/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/sponsor/12/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/sponsor/13/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/sponsor/13/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/sponsor/14/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/sponsor/14/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/sponsor/15/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/sponsor/15/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/sponsor/16/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/sponsor/16/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/sponsor/17/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/sponsor/17/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/sponsor/18/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/sponsor/18/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/sponsor/19/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/sponsor/19/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/sponsor/20/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/sponsor/20/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/sponsor/21/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/sponsor/21/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/sponsor/22/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/sponsor/22/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/sponsor/23/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/sponsor/23/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/sponsor/24/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/sponsor/24/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/sponsor/25/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/sponsor/25/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/sponsor/26/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/sponsor/26/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/sponsor/27/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/sponsor/27/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/sponsor/28/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/sponsor/28/avatar.svg\"></a>\n<a href=\"https://opencollective.com/sexy-bash-prompt/sponsor/29/website\" target=\"_blank\"><img src=\"https://opencollective.com/sexy-bash-prompt/sponsor/29/avatar.svg\"></a>\n\n## Installation\nOne line install (requires `git`, `make`):\n\n```bash\n(cd /tmp && ([[ -d sexy-bash-prompt ]] || git clone --depth 1 --config core.autocrlf=false https://github.com/twolfson/sexy-bash-prompt) && cd sexy-bash-prompt && make install) && source ~/.bashrc\n\n```\n\n### My colors don't look as advertised\nIf you are seeing a screen like this:\n\n![Bad TERM config](docs/bad_term.png)\n\nThen, your `TERM` environment variable may never have been configured. Run the script below to prefix our prompt with a `TERM` setup\n\n```bash\ncat > /tmp/.bash_prompt_term <<EOF\n#!/usr/bin/env bash\n# Determine what type of terminal we are using for \\`tput\\`\nif [[ \\$COLORTERM = gnome-* && \\$TERM = xterm ]]  && infocmp gnome-256color >/dev/null 2>&1; then export TERM=gnome-256color\nelif [[ \\$TERM != dumb ]] && infocmp xterm-256color >/dev/null 2>&1; then export TERM=xterm-256color\nfi\n\nEOF\nchmod +x /tmp/.bash_prompt_term\ncat ~/.bash_prompt >> /tmp/.bash_prompt_term\ncp /tmp/.bash_prompt_term ~/.bash_prompt\nrm /tmp/.bash_prompt_term\n```\n\n### Manual install\nRequirements: `git`, `make`\n\n```bash\n# Clone the repository\ngit clone --depth 1 --config core.autocrlf=false https://github.com/twolfson/sexy-bash-prompt\n# Cloning into 'sexy-bash-prompt'...\n# ...\n# Resolving deltas: 100% (13/13), done.\n\n# Go into the directory\ncd sexy-bash-prompt\n# Install the script\nmake install\n# # Copying .bash_prompt to ~/.bash_prompt\n# cp -f \".bash_prompt\" \"/home/todd/.bash_prompt\"\n# ./install.bash\n# # twolfson/sexy-bash-prompt installation complete!\n\n# Rerun your ~/.bashrc\nsource ~/.bashrc\n# todd at Euclid in ~/github/sexy-bash-prompt on master\n# Your PS1 should now look like this!\n```\n\n## Configuration\n### Behavior\nBehavior can be customized with the following environment variables:\n\n- `PROMPT_SHOW_ERROR_ONCE` - If enabled (default), then will only show error color once per command execution\n  - `bash` persists a non-zero exit code across missing commands (e.g. comment line only, keyboard interrupt, empty command)\n  - Setting this to `1` (default) means show error status once, `0` means always show same error status until a new command is executed\n\n### Colors\nColors can be customized by editing `.bash_prompt` directly, or by setting the following environment variables:\n\n- `PROMPT_USER_COLOR` - Color for username (e.g. `todd`)\n- `PROMPT_PREPOSITION_COLOR` - Color for 'at', 'in', 'on'\n- `PROMPT_DEVICE_COLOR` - Color for machine name (e.g. `Euclid`)\n- `PROMPT_DIR_COLOR` - Color for directory (e.g. `~/github/sexy-bash-prompt`)\n- `PROMPT_GIT_STATUS_COLOR` - Color for git branch and symbol (e.g. `master`)\n- `PROMPT_GIT_PROGRESS_COLOR` - Color for in progress git actions (e.g. `[merge]`)\n- `PROMPT_SYMBOL_COLOR` - Color for prompt symbol by default or on success (e.g. `$`)\n- `PROMPT_SYMBOL_ERROR_COLOR` - Color for prompt symbol on error (e.g. `$`)\n\nYou can set colors via [`tput`][] or [ANSI escape codes][]. For example:\n\n[`tput`]: http://en.wikipedia.org/wiki/Tput\n[ANSI escape codes]: http://en.wikipedia.org/wiki/ANSI_escape_code\n\n```bash\n# Inside your `.bashrc` or `.bash_profile`\nPROMPT_USER_COLOR=\"$(tput bold)$(tput setaf 9)\" # BOLD RED\nsource ~/.bash_prompt\n```\n\n![Color overridden prompt](docs/color_override.png)\n\n### Symbols\nSimilarly, symbols can be customized with the following environment variables:\n\n- `PROMPT_SYNCED_SYMBOL` - Symbol for clean and synced branch (e.g. empty string)\n- `PROMPT_DIRTY_SYNCED_SYMBOL` - Symbol for dirty and synced branch (e.g. `*`)\n- `PROMPT_UNPUSHED_SYMBOL` - Symbol for unpushed branch (e.g. `△`)\n- `PROMPT_DIRTY_UNPUSHED_SYMBOL` - Symbol for dirty and unpushed branch (e.g. `▲`)\n- `PROMPT_UNPULLED_SYMBOL` - Symbol for unpulled branch (e.g. `▽`)\n- `PROMPT_DIRTY_UNPULLED_SYMBOL` - Symbol for dirty and unpulled branch (e.g. `▼`)\n- `PROMPT_UNPUSHED_UNPULLED_SYMBOL` - Symbol for unpushed and unpulled branch (e.g. `⬡`)\n- `PROMPT_DIRTY_UNPUSHED_UNPULLED_SYMBOL` - Symbol for dirty, unpushed, and unpulled branch (e.g. `⬢`)\n- `PROMPT_SYMBOL` - Symbol given after each prompt (e.g. `$`)\n    - By default, this is `$` for normal users and `#` for root\n\n```bash\n# Inside your `.bashrc` or `.bash_profile`\nPROMPT_UNPUSHED_SYMBOL=\"↑\"\nsource ~/.bash_prompt\n```\n\n![Symbol overridden prompt](docs/symbol_override.png)\n\n#### Compatibility\nIn some situations, the default symbol set can be drawn incorrectly (e.g. as diamonds). To remedy that, a simpler set of symbols can be used:\n\n```bash\nPROMPT_SYNCED_SYMBOL=\"\"\nPROMPT_DIRTY_SYNCED_SYMBOL=\"*\"\nPROMPT_UNPUSHED_SYMBOL=\"↑\"\nPROMPT_DIRTY_UNPUSHED_SYMBOL=\"*↑\"\nPROMPT_UNPULLED_SYMBOL=\"↓\"\nPROMPT_DIRTY_UNPULLED_SYMBOL=\"*↓\"\nPROMPT_UNPUSHED_UNPULLED_SYMBOL=\"*↑↓\"\nPROMPT_DIRTY_UNPUSHED_UNPULLED_SYMBOL=\"*↑↓\"\n```\n\n## How does it work?\n[bash][bash] provides a special set of [variables for your prompts][ps-vars]. `PS1` is the one used by default. The install script adds a command to `~/.bashrc`, a file that is run every time a new terminal opens. Inside of the new command, we run our script and set your `PROMPT_COMMAND` and `PS1` which runs some `git` commands to determine its current state and outputs them as a string.\n\n[bash]: https://en.wikipedia.org/wiki/Bash_%28Unix_shell%29\n[ps-vars]: http://www.gnu.org/software/bash/manual/bashref.html#index-PS1\n\n## Support\nLinux and Mac OSX are supported platforms.\n\nWindows is supported to the best of my abilities. However, there have been [font issues][putty-issue] with using [PuTTY][].\n\n[PuTTY]: http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html\n[putty-issue]: https://github.com/twolfson/sexy-bash-prompt/issues/7\n\n## Uninstallation\nTo uninstall `sexy-bash-prompt`, perform the following steps:\n\n- Remove `. ~/.bash_prompt` from `~/.bashrc`\n- Delete `~/.bash_prompt` (e.g. `rm ~/.bash_prompt`)\n- During installation, we may have added a `. ~/.bashrc` invocation to `~/.bash_profile`, `~/.bash_login`, or `~/.profile`\n    - Feel free to remove this if it's no longer necessary\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Test via `make test`.\n\n## License\nCopyright (c) 2013 Todd Wolfson\n\nLicensed under the MIT license.\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "install.bash",
          "type": "blob",
          "size": 2.1845703125,
          "content": "#!/usr/bin/env bash\n\n# Create helper to determine if our PS1 is installed\nps1_is_installed () {\n  # If our prompt is being loaded, exit positively. Otherwise, negatively.\n  # DEV: Regression for ps1 check via #24\n  [[ -n \"$(bash --login -i -c 'echo $PS1' | grep 'get_git_info')\" ]]\n}\n\n# If the PS1 already contains our current prompt, leave\nps1_is_installed && exit 0\n\n# Add the .bash_prompt invocation to .bashrc\necho \"# Adding ~/.bash_prompt to ~/.bashrc\"\necho \"# Run twolfson/sexy-bash-prompt\" >> ~/.bashrc\necho \". ~/.bash_prompt\" >> ~/.bashrc\n\n# If our prompt is being loaded, leave\nps1_is_installed && exit 0\n\n# Find which exists .bash_profile, .bash_login, or .profile\n# By default, .bash_profile is our profile script\nif [[ -f ~/.bash_profile ]]; then\n  profile_script_short=\"~/.bash_profile\"\n  profile_script_full=~/.bash_profile\nelif [[ -f ~/.bash_login ]]; then\n  profile_script_short=\"~/.bash_login\"\n  profile_script_full=~/.bash_login\nelif [[ -f ~/.profile ]]; then\n  profile_script_short=\"~/.profile\"\n  profile_script_full=~/.profile\nelse\n  echo \"FATAL: Profile script not found. Please create one via \\`touch ~/.bash_profile\\` or a similar file (e.g. \\`~/.bash_login\\`, \\`~/.profile\\`)\" 1>&2\n  exit 1\nfi\n\n# If the current script does not have notes about .bashrc\n# DEV: Introduced due to #24, a regression that prevented users from logging in\nif ! grep .bashrc \"$profile_script_full\" &> /dev/null; then\n  # Add a bash invocation to the profile script\n  echo \"# Adding ~/.bashrc triggers to $profile_script_short\"\n  echo \"# Trigger ~/.bashrc commands\" >> \"$profile_script_full\"\n  echo \". ~/.bashrc\" >> \"$profile_script_full\"\n\n  # If our prompt is not being loaded, notify the user and leave angrily\n  if ! ps1_is_installed; then\n    echo \"sexy-bash-prompt was added to ~/.bashrc and $profile_script_short but is not being picked up by bash.\" 1>&2\n    exit 1\n  fi\n# Otherwise, notify the user about how to add it but do nothing\nelse\n  echo \"# We cannot confirm that sexy-bash-prompt has installed properly\" 1>&2\n  echo \"# Please open a new terminal window to confirm\" 1>&2\n  echo \"\" 1>&2\n  echo \"# If it has not, please run the following code:\" 1>&2\n  echo \"echo \\\". ~/.bashrc\\\" >> \\\"$profile_script_full\\\"\" 1>&2\n  exit 1\nfi\n"
        },
        {
          "name": "release.bash",
          "type": "blob",
          "size": 0.2265625,
          "content": "#!/usr/bin/env bash\n# Exit on first error\nset -e\n\n# Install our dependencies\nnpm install foundry@~4.3.2 foundry-release-git@~2.0.2\n\n# Run foundry release with an adjusted PATH\nPATH=\"$PATH:$PWD/node_modules/.bin/\"\nfoundry release $*\n"
        },
        {
          "name": "screenshot.png",
          "type": "blob",
          "size": 63.46875,
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}