{
  "metadata": {
    "timestamp": 1736557757992,
    "page": 917,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "OpenBMB/ChatDev",
      "stars": 26142,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.06,
          "content": "*.pyc\n.DS_Store\n.idea\n.vscode\n\n# env\n.env/\n.venv/\nenv/\nvenv/\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.15,
          "content": "[submodule \"WareHouse/Gomoku_GitMode_20231025184031\"]\n\tpath = WareHouse/Gomoku_GitMode_20231025184031\n\turl = ./WareHouse/Gomoku_GitMode_20231025184031\n"
        },
        {
          "name": "CompanyConfig",
          "type": "tree",
          "content": null
        },
        {
          "name": "Contribution.md",
          "type": "blob",
          "size": 13.92,
          "content": "# Community Contribution Software\n\n<table style=\"width:100%\">\n<thead>\n  <tr>\n    <th>Contributor</th>\n    <th>Software</th>\n    <th>ScreenShot</th>\n    <th>Status</th>\n    <th>LLM</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td rowspan=\"5\"><a href=\"https://github.com/THUNLP\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/THUNLP</a></td>\n    <td><a href=\"WareHouse/TsinghuaBambooWebsite_THUNLPDemo_2024\" target=\"_blank\" rel=\"noopener noreferrer\">Tsinghua Bamboo Website</a></td>\n    <td><img src=\"misc/tsinghua_bamboo_website.png\" width=\"200px\"></td>\n    <td>Perfect</td>\n    <td></td>\n  </tr>\n    <tr>\n    <td><a href=\"WareHouse/tetris_THUNLPDemo_2024\" target=\"_blank\" rel=\"noopener noreferrer\">A Tetris Game</a></td>\n    <td><img src=\"misc/tetris.png\" width=\"200px\"></td>  \n    <td>Perfect</td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><a href=\"WareHouse/pvz_THUNLPDemo_2024\" target=\"_blank\" rel=\"noopener noreferrer\">A Plant vs Zombie Game</a></td>\n    <td><img src=\"misc/pvz.png\" width=\"200px\"></td>  \n    <td>Perfect</td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><a href=\"WareHouse/car_THUNLPDemo_2024\" target=\"_blank\" rel=\"noopener noreferrer\">A Race Car Game</a></td>\n    <td><img src=\"misc/car_game.png\" width=\"200px\"></td>\n    <td>Perfect</td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><a href=\"WareHouse/snake_THUNLPDemo_2024\" target=\"_blank\" rel=\"noopener noreferrer\">A Snake Game</a></td>\n    <td><img src=\"misc/snake_game.png\" width=\"200px\"></td>\n    <td>Perfect</td>\n    <td></td>\n  </tr>\n  <tr>\n    <td rowspan=\"4\"><a href=\"https://github.com/qianc62\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/qianc62</a></td>\n    <td><a href=\"WareHouse/FlappyBird_THUNLP_20230726121145\" target=\"_blank\" rel=\"noopener noreferrer\">FlappyBirds Game</a></td>\n    <td><img src=\"misc/flappy_bird.png\" width=\"200px\"></td>\n    <td>Perfect</td>\n    <td>GPT3.5</td>\n  </tr>\n  <tr>\n    <td><a href=\"WareHouse/Gomoku_THUNLP_20230625201030\" target=\"_blank\" rel=\"noopener noreferrer\">A Gomoku Game</a></td>\n    <td><img src=\"misc/gomoku.png\" width=\"200px\"></td>  \n    <td>Perfect</td>\n    <td>GPT3.5</td>\n  </tr>\n  <tr>\n    <td><a href=\"WareHouse/Calculator_THUNLP_20230628184918\" target=\"_blank\" rel=\"noopener noreferrer\">A calculator with bottom icons generated by Agents</a></td>\n    <td><img src=\"misc/calc.jpg\" width=\"200px\"></td>\n    <td>Perfect</td>\n    <td>GPT3.5</td>\n  </tr>\n  <tr>\n    <td><a href=\"WareHouse/CatchGoldHTMLGame_THUNLP_202310181636\" target=\"_blank\" rel=\"noopener noreferrer\">A web game for catching coins</a></td>\n    <td><img src=\"misc/CatchGoldHTMLGame.png\" width=\"200px\"></td>\n    <td>Perfect</td>\n    <td>GPT3.5</td>\n  </tr>\n  <tr>\n    <td rowspan=\"17\"><a href=\"https://github.com/thinkwee\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/thinkwee</a></td>\n    <td><a href=\"WareHouse/ArtCanvas_THUNLP_20230825093558\" target=\"_blank\" rel=\"noopener noreferrer\">Painter</a></td>\n    <td><img src=\"misc/paint.png\" width=\"200px\"></td>\n    <td>Perfect</td>\n    <td>GPT3.5</td>\n  </tr>\n  <tr>\n    <td><a href=\"WareHouse/pingpong_THUNLP_20230817193956\" target=\"_blank\" rel=\"noopener noreferrer\">PingPong Game</a></td>\n    <td><img src=\"misc/pingpong.jpg\" width=\"200px\"></td>\n    <td>Biased</td>\n    <td>GPT3.5</td>\n  </tr>\n  <tr>\n    <td><a href=\"WareHouse/PixelRunner_THUNLP_20230825072339\" target=\"_blank\" rel=\"noopener noreferrer\">PixelRunner</a></td>\n    <td><img src=\"misc/jump_game.png\" width=\"200px\"></td>\n    <td>Runnable</td>\n    <td>GPT3.5</td>\n  </tr>\n  <tr>\n    <td><a href=\"WareHouse/MoneyCtrl_THUNLP_20230825093546\" target=\"_blank\" rel=\"noopener noreferrer\">BudgetControl</a></td>\n    <td><img src=\"misc/budget.png\" width=\"200px\"></td>\n    <td>Biased</td>\n    <td>GPT3.5</td>\n  </tr>\n  <tr>\n    <td><a href=\"WareHouse/PixelCraft_THUNLP_20230825072340\" target=\"_blank\" rel=\"noopener noreferrer\">PixelCraft</a></td>\n    <td><img src=\"misc/pixel_art.png\" width=\"200px\"></td>\n    <td>Runnable</td>\n    <td>GPT3.5</td>\n  </tr>\n  <tr>\n    <td><a href=\"WareHouse/MazeGenerator_THUNLP_20230825093601\" target=\"_blank\" rel=\"noopener noreferrer\">MazeGenerator</a></td>\n    <td><img src=\"misc/maze_generator.png\" width=\"200px\"></td>\n    <td>Perfect</td>\n    <td>GPT3.5</td>\n  </tr>\n  <tr>\n    <td><a href=\"WareHouse/Matchy_Match_THUNLP_20230825101854\" target=\"_blank\" rel=\"noopener noreferrer\">Matchy_Match</a></td>\n    <td><img src=\"misc/memory_card_game.png\" width=\"200px\"></td>\n    <td>Perfect</td>\n    <td>GPT3.5</td>\n  </tr>\n  <tr>\n    <td><a href=\"WareHouse/PasswordGenerator_THUNLP_20230825072337\" target=\"_blank\" rel=\"noopener noreferrer\">Password Generator</a></td>\n    <td><img src=\"misc/password_generator.png\" width=\"200px\"></td>\n    <td>Perfect</td>\n    <td>GPT3.5</td>\n  </tr>\n  <tr>\n    <td><a href=\"WareHouse/ToDo_THUNLP_20230825072331\" target=\"_blank\" rel=\"noopener noreferrer\">Todo</a></td>\n    <td><img src=\"misc/todo.png\" width=\"200px\"></td>\n    <td>Perfect</td>\n    <td>GPT3.5</td>\n  </tr>\n  <tr>\n    <td><a href=\"WareHouse/ExpenseEase_THUNLP_20230825093604\" target=\"_blank\" rel=\"noopener noreferrer\">Expensechart</a></td>\n    <td><img src=\"misc/expense_visualizer.png\" width=\"200px\"></td>\n    <td>Perfect</td>\n    <td>GPT3.5</td>\n  </tr>\n  <tr>\n    <td><a href=\"WareHouse/2048_THUNLP_20230822144615\" target=\"_blank\" rel=\"noopener noreferrer\">2048 Game</a></td>\n    <td><img src=\"misc/2048.png\" width=\"200px\"></td>\n    <td>Perfect</td>\n    <td>GPT3.5</td>\n  </tr>\n  <tr>\n    <td><a href=\"WareHouse/WordExpand_THUNLP_20230825093623\" target=\"_blank\" rel=\"noopener noreferrer\">WordExpand</a></td>\n    <td><img src=\"misc/vocab.png\" width=\"200px\"></td>\n    <td>Perfect</td>\n    <td>GPT3.5</td>\n  </tr>\n  <tr>\n    <td><a href=\"WareHouse/Fish_Tycoon_THUNLP_20230825093543\" target=\"_blank\" rel=\"noopener noreferrer\">Fish Tycoon</a></td>\n    <td><img src=\"misc/aquarium.png\" width=\"200px\"></td>\n    <td>Biased</td>\n    <td>GPT3.5</td>\n  </tr>\n  <tr>\n    <td><a href=\"WareHouse/DigitalClock_THUNLP_20230825093556\" target=\"_blank\" rel=\"noopener noreferrer\">Digital Clock</a></td>\n    <td><img src=\"misc/clock.png\" width=\"200px\"></td>\n    <td>Perfect</td>\n    <td>GPT3.5</td>\n  </tr>\n  <tr>\n    <td><a href=\"WareHouse/CurrencyWiz_THUNLP_20230825101851\" target=\"_blank\" rel=\"noopener noreferrer\">CurrencyWiz</a></td>\n    <td><img src=\"misc/currency_converter.png\" width=\"200px\"></td>\n    <td>Perfect</td>\n    <td>GPT3.5</td>\n  </tr>\n  <tr>\n    <td><a href=\"WareHouse/DesignDream_THUNLP_20230825072340\" target=\"_blank\" rel=\"noopener noreferrer\">Design Dream</a></td>\n    <td><img src=\"misc/home_design.png\" width=\"200px\"></td>\n    <td>Biased</td>\n    <td>GPT3.5</td>\n  </tr>\n  <tr>\n    <td><a href=\"WareHouse/DiceRollingSimulator_THUNLP_20230825072338\" target=\"_blank\" rel=\"noopener noreferrer\">DiceRollingSimulator</a></td>\n    <td><img src=\"misc/dice.png\" width=\"200px\"></td>\n    <td>Perfect</td>\n    <td>GPT3.5</td>\n  </tr>\n  <tr>\n    <td rowspan=\"5\"><a href=\"https://github.com/NA-Wen\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/NA-Wen</a></td>\n    <td><a href=\"WareHouse/md2html_THUNLP_20230823102935\" target=\"_blank\" rel=\"noopener noreferrer\">md2html</a></td>\n    <td><img src=\"misc/markdown2html.png\" width=\"200px\"></td>\n    <td>Runnable</td>\n    <td>GPT3.5</td>\n  </tr>\n  <tr>\n    <td><a href=\"WareHouse/gomokugameArtExample_THUNLP_20230831122822\" target=\"_blank\" rel=\"noopener noreferrer\">A Gomoku Game with assets generated by Agent</a></td>\n    <td><img src=\"misc/gomoku_art.png\" width=\"200px\"></td>  \n    <td>Perfect</td>\n    <td>GPT4</td>\n  </tr>\n  <tr>\n    <td><a href=\"WareHouse/mspaint_THUNLP_20230821204606\" target=\"_blank\" rel=\"noopener noreferrer\">MsPaint</a></td>\n    <td><img src=\"misc/mspaint.png\" width=\"200px\"></td>\n    <td>Runnable</td>\n    <td>GPT3.5</td>\n  </tr>\n  <tr>\n    <td><a href=\"WareHouse/ImgEditor_THUNLP_20230824142740\" target=\"_blank\" rel=\"noopener noreferrer\">Image Editor</a></td>\n    <td><img src=\"misc/image_editor.png\" width=\"200px\"></td>\n    <td>Perfect</td>\n    <td>GPT3.5</td>\n  </tr>\n  <tr>\n    <td><a href=\"WareHouse/TicTacToe_THUNLP_20230825093547\" target=\"_blank\" rel=\"noopener noreferrer\">TicTacToe</a></td>\n    <td><img src=\"misc/tictactoe.png\" width=\"200px\"></td>\n    <td>Runnable</td>\n    <td>GPT3.5</td>\n  </tr>\n  <tr>\n    <td rowspan=\"5\"><a href=\"https://github.com/lijiahao2022\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/lijiahao2022</a></td>\n    <td><a href=\"WareHouse/musicplayer_THUNLP_20230824113404\" target=\"_blank\" rel=\"noopener noreferrer\">Music Player</a></td>\n    <td><img src=\"misc/music_player.png\" width=\"200px\"></td>\n    <td>Perfect</td>\n    <td>GPT4</td>\n  </tr>\n  <tr>\n    <td><a href=\"WareHouse/Typing_THUNLP_20230824105537\" target=\"_blank\" rel=\"noopener noreferrer\">Typing Test</a></td>\n    <td><img src=\"misc/typing_test.png\" width=\"200px\"></td>\n    <td>Perfect</td>\n    <td>GPT3.5</td>\n  </tr>\n  <tr>\n    <td><a href=\"WareHouse/videoplayer_THUNLP_20230824233151\" target=\"_blank\" rel=\"noopener noreferrer\">Video Player</a></td>\n    <td><img src=\"misc/video_player.png\" width=\"200px\"></td>\n    <td>Runnable</td>\n    <td>GPT3.5</td>\n  </tr>\n  <tr>\n    <td><a href=\"WareHouse/timer_THUNLP_20230823091709\" target=\"_blank\" rel=\"noopener noreferrer\">Timer</a></td>\n    <td><img src=\"misc/timer.png\" width=\"200px\"></td>\n    <td>Perfect</td>\n    <td>GPT3.5</td>\n  </tr>\n  <tr>\n    <td><a href=\"WareHouse/BookBreeze_THUNLP_20230825072339\" target=\"_blank\" rel=\"noopener noreferrer\">BookBreeze</a></td>\n    <td><img src=\"misc/ebook_reader.png\" width=\"200px\"></td>\n    <td>Runnable</td>\n    <td>GPT3.5</td>\n  </tr>\n  <tr>\n    <td rowspan=\"1\"><a href=\"https://github.com/GeekyWizKid\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/GeekyWizKid</a></td>\n    <td><a href=\"WareHouse/tiny_rogue_like_DefaultOrganization_20230905232453\" target=\"_blank\" rel=\"noopener noreferrer\">Tiny Rogue-like Game</a></td>\n    <td><img src=\"misc/tiny_rogue.png\" width=\"200px\"></td>\n    <td>Biased</td>\n    <td>GPT3.5</td>\n  </tr>\n  <tr>\n    <td rowspan=\"2\"><a href=\"https://github.com/Munsif-Raza-T\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/Munsif-Raza-T</a></td>\n    <td><a href=\"WareHouse/Notebook Application_DefaultOrganization_20230918090434\" target=\"_blank\" rel=\"noopener noreferrer\">Notebook Application</a></td>\n    <td><img src=\"misc/Notebook.PNG\" width=\"200px\"></td>\n    <td>Perfect</td>\n    <td>GPT3.5</td>\n  </tr>\n  <tr>\n    <td><a href=\"WareHouse/BMI Calculator_DefaultOrganization_20230918110521\" target=\"_blank\" rel=\"noopener noreferrer\">BMI Calculator</a></td>\n    <td><img src=\"misc/BMI.PNG\" width=\"200px\"></td>\n    <td>Perfect</td>\n    <td>GPT3.5</td>\n  </tr>\n  <tr>\n    <td rowspan=\"1\"><a href=\"https://github.com/djbritt\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/djbritt</a></td>\n    <td><a href=\"WareHouse/trippy_avoid_game_DefaultOrganization_20231006224623\" target=\"_blank\" rel=\"noopener noreferrer\">Avoid Game</a></td>\n    <td><img src=\"misc/avoid_game.png\" width=\"200px\"></td>\n    <td>Perfect</td>\n    <td>GPT3.5</td>\n  </tr>\n  <tr>\n    <td rowspan=\"1\"><a href=\"https://github.com/Classified3939\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/Classified3939</a></td>\n    <td><a href=\"WareHouse/Space_Invasion_Classified39_20231006210047\" target=\"_blank\" rel=\"noopener noreferrer\">Space Invasion Game</a></td>\n    <td><img src=\"misc/space_invasion.png\" width=\"200px\"></td>\n    <td>Perfect</td>\n    <td>GPT3.5</td>\n  </tr>\n  <tr>\n    <td rowspan=\"5\"><a href=\"https://github.com/Aizhouym\" target=\"_blank\"  rel=\"noopener noreferrer\">https://github.com/Aizhouym</a></td>\n    <td><a href=\"WareHouse/Maze_THUNLP_20231006154305\" target=\"_blank\" rel=\"noopener noreferrer\">MazeGame</a></td>\n    <td><img src=\"misc/MazeGame.png\" width=\"200px\"></td>\n    <td>Runnable</td>\n    <td>GPT3.5</td>\n  </tr>\n  <tr>\n    <td><a href=\"WareHouse/GreedySnakeGame_THUNLP_20231008212648\" target=\"_blank\" rel=\"noopener noreferrer\">GreedySnakeGame</a></td>\n    <td><img src=\"misc/ GreedySnakeGame.png\" width=\"200px\"></td>\n    <td>Perfect</td>\n    <td>GPT3.5</td>\n  </tr>\n  <tr>\n    <td><a href=\"WareHouse/BackgroundRemoval_THUNLP_20231015220703\" target=\"_blank\" rel=\"noopener noreferrer\">BackgroundRemoval</a></td>\n    <td><img src=\"misc/ BackgroundRemoval.png\" width=\"200px\"></td>\n    <td>Biased</td>\n    <td>GPT3.5</td>\n  </tr>\n  <tr>\n    <td><a href=\"WareHouse/QRCodeGenerator_THUNLP_20231015214731\" target=\"_blank\" rel=\"noopener noreferrer\">QRCodeGenerator</a></td>\n    <td><img src=\"misc/QRCodeGenerator.png\" width=\"200px\"></td>\n    <td>Perfect</td>\n    <td>GPT3.5</td>\n  </tr>\n  <tr>\n    <td><a href=\"WareHouse/WordCloud_THUNLP_20231015215721\" target=\"_blank\" rel=\"noopener noreferrer\">WordCloud</a></td>\n    <td><img src=\"misc/ WordCloud.png\" width=\"200px\"></td>\n    <td>Perfect</td>\n    <td>GPT3.5</td>\n  </tr>\n  <tr>\n    <td rowspan=\"1\"><a href=\"https://github.com/eMcQuill\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/eMcQuill</a></td>\n    <td><a href=\"WareHouse/Poker1_DefaultOrganization_20231006035628\" target=\"_blank\" rel=\"noopener noreferrer\">Poker Game</a></td>\n    <td><img src=\"misc/poker.png\" width=\"200px\"></td>\n    <td>Perfect</td>\n    <td>GPT3.5</td>\n  </tr>\n  <tr>\n    <td rowspan=\"1\"><a href=\"https://github.com/janinehuang\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/janinehuang</a></td>\n    <td><a href=\"WareHouse/RGB_Color_Picker_DefaultOrganization_20231015003723\" target=\"_blank\" rel=\"noopener noreferrer\">RGB Picker</a></td>\n    <td><img src=\"misc/rgb.png\" width=\"200px\"></td>\n    <td>Perfect</td>\n    <td>GPT3.5</td>\n  </tr>\n  <tr>\n    <td rowspan=\"2\"><a href=\"https://github.com/Timaos123\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/Timaos123</a></td>\n    <td><a href=\"WareHouse/Good_code_ModelBest1024_20231023013519\" target=\"_blank\" rel=\"noopener noreferrer\">Good Code</a></td>\n    <td><img src=\"misc/goodcode.png\" width=\"200px\"></td>\n    <td>Perfect</td>\n    <td>GPT3.5</td>\n  </tr>\n  <tr>\n    <td><a href=\"WareHouse/Article_pic_DefaultOrganization_20231023003059\" target=\"_blank\" rel=\"noopener noreferrer\">Article Pic</a></td>\n    <td><img src=\"misc/article_pic.png\" width=\"200px\"></td>\n    <td>Need modification to run</td>\n    <td>GPT3.5</td>\n  </tr>\n  <tr>\n</tbody>\n</table>\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.67,
          "content": "# Start with a Python 3.9 base image\nFROM python:3.9-slim\n\n# Set the working directory in the container\nWORKDIR /app\n\n# Copy the current directory contents into the container at /app\nCOPY . /app\n\n# Install necessary libraries for GUI support\nRUN apt-get update && apt-get install -y python3-tk x11-apps\n\n# Install the project dependencies\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Set the environment variable for OpenAI API key\n# (you'll need to provide the actual key when running the container)\nENV OPENAI_API_KEY=your_OpenAI_API_key\n\n# Expose the port for visualizer/app.py\nEXPOSE 8000\n\n# Set an entry point that runs a shell for interactive mode\nENTRYPOINT [\"/bin/bash\"]"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.07,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2023 OpenBMB\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "MultiAgentEbook",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 15.75,
          "content": "# Communicative Agents for Software Development\n\n<p align=\"center\">\n  <img src='./misc/logo1.png' width=550>\n</p>\n\n<p align=\"center\">\n    【English | <a href=\"readme/README-Chinese.md\">Chinese</a> | <a href=\"readme/README-Japanese.md\">Japanese</a> | <a href=\"readme/README-Korean.md\">Korean</a> | <a href=\"readme/README-Filipino.md\">Filipino</a> | <a href=\"readme/README-French.md\">French</a> | <a href=\"readme/README-Slovak.md\">Slovak</a> | <a href=\"readme/README-Portuguese.md\">Portuguese</a> | <a href=\"readme/README-Spanish.md\">Spanish</a> | <a href=\"readme/README-Dutch.md\">Dutch</a> | <a href=\"readme/README-Turkish.md\">Turkish</a> | <a href=\"readme/README-Hindi.md\">Hindi</a> | <a href=\"readme/README-Bahasa-Indonesia.md\">Bahasa Indonesia</a> | <a href=\"readme/README-Russian.md\">Russian</a> | <a href=\"readme/README-Urdu.md\">Urdu</a>】\n</p>\n<p align=\"center\">\n    【📚 <a href=\"wiki.md\">Wiki</a> | 🚀 <a href=\"wiki.md#visualizer\">Visualizer</a> | 👥 <a href=\"Contribution.md\">Community Built Software</a> | 🔧 <a href=\"wiki.md#customization\">Customization</a> | 👾 <a href=\"https://discord.gg/bn4t2Jy6TT\")>Discord</a>】\n\n</p>\n\n## 📖 Overview\n\n- **ChatDev** stands as a **virtual software company** that operates through various **intelligent agents** holding\n  different roles, including Chief Executive Officer <img src='visualizer/static/figures/ceo.png' height=20>, Chief Product Officer <img src='visualizer/static/figures/cpo.png' height=20>, Chief Technology Officer <img src='visualizer/static/figures/cto.png' height=20>, Programmer <img src='visualizer/static/figures/programmer.png' height=20>, Reviewer <img src='visualizer/static/figures/reviewer.png' height=20>, Tester <img src='visualizer/static/figures/tester.png' height=20>, Art designer <img src='visualizer/static/figures/designer.png' height=20>. These\n  agents form a multi-agent organizational structure and are united by a mission to \"revolutionize the digital world\n  through programming.\" The agents within ChatDev **collaborate** by participating in specialized functional seminars,\n  including tasks such as designing, coding, testing and documenting.\n- The primary objective of ChatDev is to offer an **easy-to-use**, **highly customizable** and **extendable** framework,\n  which is based on large language models (LLMs) and serves as an ideal scenario for studying and understanding collective intelligence.\n\n<p align=\"center\">\n  <img src='./misc/company.png' width=600>\n</p>\n\n## 🎉 News\n**•June 25, 2024: 🎉To foster development in LLM-powered multi-agent collaboration🤖🤖 and related fields, the ChatDev team has curated a collection of seminal papers📄 presented in a [open-source](https://github.com/OpenBMB/ChatDev/tree/main/MultiAgentEbook) interactive e-book📚 format. Now you can explore the latest advancements on the [Ebook Website](https://thinkwee.top/multiagent_ebook) and download the [paper list](https://github.com/OpenBMB/ChatDev/blob/main/MultiAgentEbook/papers.csv).**\n  <p align=\"center\">\n  <img src='./misc/ebook.png' width=800>\n  </p>\n  \n•June 12, 2024: We introduced Multi-Agent Collaboration Networks (MacNet) 🎉, which utilize directed acyclic graphs to facilitate effective task-oriented collaboration among agents through linguistic interactions 🤖🤖. MacNet supports co-operation across various topologies and among more than a thousand agents without exceeding context limits. More versatile and scalable, MacNet can be considered as a more advanced version of ChatDev's chain-shaped topology. Our preprint paper is available at [https://arxiv.org/abs/2406.07155](https://arxiv.org/abs/2406.07155). This technique has been incorporated into the [macnet](https://github.com/OpenBMB/ChatDev/tree/macnet) branch, enhancing support for diverse organizational structures and offering richer solutions beyond software development (e.g., logical reasoning, data analysis, story generation, and more).\n  <p align=\"center\">\n  <img src='./misc/macnet.png' width=500>\n  </p>\n\n<details>\n<summary>Old News</summary>\n\n• May 07, 2024, we introduced \"Iterative Experience Refinement\" (IER), a novel method where instructor and assistant agents enhance shortcut-oriented experiences to efficiently adapt to new tasks. This approach encompasses experience acquisition, utilization, propagation and elimination across a series of tasks and making the pricess shorter and efficient. Our preprint paper is available at https://arxiv.org/abs/2405.04219, and this technique will soon be incorporated into ChatDev.\n  <p align=\"center\">\n  <img src='./misc/ier.png' width=220>\n  </p>\n\n• January 25, 2024: We have integrated Experiential Co-Learning Module into ChatDev. Please see the [Experiential Co-Learning Guide](wiki.md#co-tracking).\n\n• December 28, 2023: We present Experiential Co-Learning, an innovative approach where instructor and assistant agents accumulate shortcut-oriented experiences to effectively solve new tasks, reducing repetitive errors and enhancing efficiency.  Check out our preprint paper at https://arxiv.org/abs/2312.17025 and this technique will soon be integrated into ChatDev.\n  <p align=\"center\">\n  <img src='./misc/ecl.png' width=860>\n  </p>\n• November 15, 2023: We launched ChatDev as a SaaS platform that enables software developers and innovative entrepreneurs to build software efficiently at a very low cost and remove the barrier to entry. Try it out at https://chatdev.modelbest.cn/.\n  <p align=\"center\">\n  <img src='./misc/saas.png' width=560>\n  </p>\n\n• November 2, 2023: ChatDev is now supported with a new feature: incremental development, which allows agents to develop upon existing codes. Try ```--config \"incremental\" --path \"[source_code_directory_path]\"``` to start it.\n  <p align=\"center\">\n  <img src='./misc/increment.png' width=700>\n  </p>\n\n• October 26, 2023: ChatDev is now supported with Docker for safe execution (thanks to contribution from [ManindraDeMel](https://github.com/ManindraDeMel)). Please see [Docker Start Guide](wiki.md#docker-start).\n  <p align=\"center\">\n  <img src='./misc/docker.png' width=400>\n  </p>\n• September 25, 2023: The **Git** mode is now available, enabling the programmer <img src='visualizer/static/figures/programmer.png' height=20> to utilize Git for version control. To enable this feature, simply set ``\"git_management\"`` to ``\"True\"`` in ``ChatChainConfig.json``. See [guide](wiki.md#git-mode).\n  <p align=\"center\">\n  <img src='./misc/github.png' width=600>\n  </p>\n• September 20, 2023: The **Human-Agent-Interaction** mode is now available! You can get involved with the ChatDev team by playing the role of reviewer <img src='visualizer/static/figures/reviewer.png' height=20> and making suggestions to the programmer <img src='visualizer/static/figures/programmer.png' height=20>;\n  try ``python3 run.py --task [description_of_your_idea] --config \"Human\"``. See [guide](wiki.md#human-agent-interaction) and [example](WareHouse/Gomoku_HumanAgentInteraction_20230920135038).\n  <p align=\"center\">\n  <img src='./misc/Human_intro.png' width=600>\n  </p>\n• September 1, 2023: The **Art** mode is available now! You can activate the designer agent <img src='visualizer/static/figures/designer.png' height=20> to generate images used in the software;\n  try ``python3 run.py --task [description_of_your_idea] --config \"Art\"``. See [guide](wiki.md#art) and [example](WareHouse/gomokugameArtExample_THUNLP_20230831122822).\n• August 28, 2023: The system is publicly available.\n• August 17, 2023: The v1.0.0 version was ready for release.\n• July 30, 2023: Users can customize ChatChain, Phasea and Role settings. Additionally, both online Log mode and replay\n  mode are now supported.\n• July 16, 2023: The [preprint paper](https://arxiv.org/abs/2307.07924) associated with this project was published.\n• June 30, 2023: The initial version of the ChatDev repository was released.\n</details>\n\n## ❓ What Can ChatDev Do?\n\n![intro](misc/intro.png)\n\n<https://github.com/OpenBMB/ChatDev/assets/11889052/80d01d2f-677b-4399-ad8b-f7af9bb62b72>\n\n## ⚡️ Quickstart\n\n### 💻️ Quickstart with Web\n\nAccess the web page for visualization and configuration use: https://chatdev.modelbest.cn/\n\n### 🖥️ Quickstart with terminal\n\nTo get started, follow these steps:\n\n1. **Clone the GitHub Repository:** Begin by cloning the repository using the command:\n\n   ```\n   git clone https://github.com/OpenBMB/ChatDev.git\n   ```\n\n2. **Set Up Python Environment:** Ensure you have a version 3.9 or higher Python environment. You can create and\n   activate this environment using the following commands, replacing `ChatDev_conda_env` with your preferred environment\n   name:\n\n   ```\n   conda create -n ChatDev_conda_env python=3.9 -y\n   conda activate ChatDev_conda_env\n   ```\n\n3. **Install Dependencies:** Move into the `ChatDev` directory and install the necessary dependencies by running:\n\n   ```\n   cd ChatDev\n   pip3 install -r requirements.txt\n   ```\n\n4. **Set OpenAI API Key:** Export your OpenAI API key as an environment variable. Replace `\"your_OpenAI_API_key\"` with\n   your actual API key. Remember that this environment variable is session-specific, so you need to set it again if you\n   open a new terminal session.\n   On Unix/Linux:\n\n   ```\n   export OPENAI_API_KEY=\"your_OpenAI_API_key\"\n   ```\n\n   On Windows:\n\n   ```\n   $env:OPENAI_API_KEY=\"your_OpenAI_API_key\"\n   ```\n\n5. **Build Your Software:** Use the following command to initiate the building of your software,\n   replacing `[description_of_your_idea]` with your idea's description and `[project_name]` with your desired project name:\n   On Unix/Linux:\n\n   ```\n   python3 run.py --task \"[description_of_your_idea]\" --name \"[project_name]\"\n   ```\n\n   On Windows:\n\n   ```\n   python run.py --task \"[description_of_your_idea]\" --name \"[project_name]\"\n   ```\n\n6. **Run Your Software:** Once generated, you can find your software in the `WareHouse` directory under a specific\n   project folder, such as `project_name_DefaultOrganization_timestamp`. Run your software using the following command\n   within that directory:\n   On Unix/Linux:\n\n   ```\n   cd WareHouse/project_name_DefaultOrganization_timestamp\n   python3 main.py\n   ```\n\n   On Windows:\n\n   ```\n   cd WareHouse/project_name_DefaultOrganization_timestamp\n   python main.py\n   ```\n\n### 🐳 Quickstart with Docker\n\n- We thank [ManindraDeMel](https://github.com/ManindraDeMel) for providing Docker support. Please see [Docker Start Guide](wiki.md#docker-start).\n\n## ✨️ Advanced Skills\n\nFor more detailed information, please refer to our [Wiki](wiki.md), where you can find:\n\n- An introduction to all command run parameters.\n- A straightforward guide for setting up a local web visualizer demo, which can visualize real-time logs, replayed logs, and ChatChain.\n- An overview of the ChatDev framework.\n- A comprehensive introduction to all advanced parameters in ChatChain configuration.\n- Guides for customizing ChatDev, including:\n  - ChatChain: Design your own software development process (or any other process), such\n      as ``DemandAnalysis -> Coding -> Testing -> Manual``.\n  - Phase: Design your own phase within ChatChain, like ``DemandAnalysis``.\n  - Role: Defining the various agents in your company, such as the ``Chief Executive Officer``.\n\n## 🤗 Share Your Software\n\n**Code**: We are enthusiastic about your interest in participating in our open-source project. If you come across any\nproblems, don't hesitate to report them. Feel free to create a pull request if you have any inquiries or if you are prepared to share your work with us! Your contributions are highly valued. Please let me know if there's anything else\nyou need assistance!\n\n**Company**: Creating your own customized \"ChatDev Company\" is a breeze. This personalized setup involves three simple\nconfiguration JSON files. Check out the example provided in the ``CompanyConfig/Default`` directory. For detailed\ninstructions on customization, refer to our [Wiki](wiki.md).\n\n**Software**: Whenever you develop software using ChatDev, a corresponding folder is generated containing all the\nessential information. Sharing your work with us is as simple as making a pull request. Here's an example: execute the\ncommand ``python3 run.py --task \"design a 2048 game\" --name \"2048\"  --org \"THUNLP\" --config \"Default\"``. This will\ncreate a software package and generate a folder named ``/WareHouse/2048_THUNLP_timestamp``. Inside, you'll find:\n\n- All the files and documents related to the 2048 game software\n- Configuration files of the company responsible for this software, including the three JSON config files\n  from ``CompanyConfig/Default``\n- A comprehensive log detailing the software's building process that can be used to replay (``timestamp.log``)\n- The initial prompt used to create this software (``2048.prompt``)\n\n**See community contributed software [here](Contribution.md)!**\n\n## 👨‍💻‍ Contributors\n\n<a href=\"https://github.com/OpenBMB/ChatDev/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=OpenBMB/ChatDev\" />\n</a>\n\nMade with [contrib.rocks](https://contrib.rocks).\n\n## 🔎 Citation\n\n```\n@article{chatdev,\n    title = {ChatDev: Communicative Agents for Software Development},\n    author = {Chen Qian and Wei Liu and Hongzhang Liu and Nuo Chen and Yufan Dang and Jiahao Li and Cheng Yang and Weize Chen and Yusheng Su and Xin Cong and Juyuan Xu and Dahai Li and Zhiyuan Liu and Maosong Sun},\n    journal = {arXiv preprint arXiv:2307.07924},\n    url = {https://arxiv.org/abs/2307.07924},\n    year = {2023}\n}\n\n@article{colearning,\n    title = {Experiential Co-Learning of Software-Developing Agents},\n    author = {Chen Qian and Yufan Dang and Jiahao Li and Wei Liu and Zihao Xie and Yifei Wang and Weize Chen and Cheng Yang and Xin Cong and Xiaoyin Che and Zhiyuan Liu and Maosong Sun},\n    journal = {arXiv preprint arXiv:2312.17025},\n    url = {https://arxiv.org/abs/2312.17025},\n    year = {2023}\n}\n\n@article{macnet,\n    title={Scaling Large-Language-Model-based Multi-Agent Collaboration},\n    author={Chen Qian and Zihao Xie and Yifei Wang and Wei Liu and Yufan Dang and Zhuoyun Du and Weize Chen and Cheng Yang and Zhiyuan Liu and Maosong Sun}\n    journal={arXiv preprint arXiv:2406.07155},\n    url = {https://arxiv.org/abs/2406.07155},\n    year={2024}\n}\n\n@article{iagents,\n    title={Autonomous Agents for Collaborative Task under Information Asymmetry},\n    author={Wei Liu and Chenxi Wang and Yifei Wang and Zihao Xie and Rennai Qiu and Yufan Dnag and Zhuoyun Du and Weize Chen and Cheng Yang and Chen Qian},\n    journal={arXiv preprint arXiv:2406.14928},\n    url = {https://arxiv.org/abs/2406.14928},\n    year={2024}\n}\n```\nMore research from our lab can be accessed [here](https://thinkwee.top/multiagent_ebook/#more-works).\n\n## ⚖️ License\n\n- Source Code Licensing: Our project's source code is licensed under the Apache 2.0 License. This license permits the use, modification, and distribution of the code, subject to certain conditions outlined in the Apache 2.0 License.\n- Data Licensing: The related data utilized in our project is licensed under CC BY-NC 4.0. This license explicitly permits non-commercial use of the data. We would like to emphasize that any models trained using these datasets should strictly adhere to the non-commercial usage restriction and should be employed exclusively for research purposes.\n\n\n## 🤝 Acknowledgments\n\n<a href=\"http://nlp.csai.tsinghua.edu.cn/\"><img src=\"misc/thunlp.png\" height=50pt></a>&nbsp;&nbsp;\n<a href=\"https://modelbest.cn/\"><img src=\"misc/modelbest.png\" height=50pt></a>&nbsp;&nbsp;\n<a href=\"https://github.com/OpenBMB/AgentVerse/\"><img src=\"misc/agentverse.png\" height=50pt></a>&nbsp;&nbsp;\n<a href=\"https://github.com/OpenBMB/RepoAgent\"><img src=\"misc/repoagent.png\"  height=50pt></a>\n<a href=\"https://app.commanddash.io/agent?github=https://github.com/OpenBMB/ChatDev\"><img src=\"misc/CommandDash.png\" height=50pt></a>\n\n## 📬 Contact\n\nIf you have any questions, feedback, or would like to get in touch, please feel free to reach out to us via email at [qianc62@gmail.com](mailto:qianc62@gmail.com)\n"
        },
        {
          "name": "SRDD",
          "type": "tree",
          "content": null
        },
        {
          "name": "WareHouse",
          "type": "tree",
          "content": null
        },
        {
          "name": "camel",
          "type": "tree",
          "content": null
        },
        {
          "name": "chatdev",
          "type": "tree",
          "content": null
        },
        {
          "name": "ecl",
          "type": "tree",
          "content": null
        },
        {
          "name": "misc",
          "type": "tree",
          "content": null
        },
        {
          "name": "readme",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.32,
          "content": "colorama==0.4.6\nFlask==2.3.2\nFlask-SocketIO==5.3.4\nimportlib-metadata==6.8.0\nnumpy==1.24.3\nopenai==1.47.1\nregex==2023.6.3\nrequests==2.31.0\ntenacity==8.2.2\ntiktoken==0.8.0\nvirtualenv==20.23.0\nWerkzeug==3.0.3\nMarkdown==3.4.4\nPillow==10.3.0\nWikipedia-API==0.6.0\nbeautifulsoup4==4.12.2\nfaiss-cpu==1.7.4\npyyaml==6.0\neasydict==1.10\n"
        },
        {
          "name": "run.py",
          "type": "blob",
          "size": 5.32,
          "content": "# =========== Copyright 2023 @ CAMEL-AI.org. All Rights Reserved. ===========\n# Licensed under the Apache License, Version 2.0 (the “License”);\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an “AS IS” BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# =========== Copyright 2023 @ CAMEL-AI.org. All Rights Reserved. ===========\nimport argparse\nimport logging\nimport os\nimport sys\n\nfrom camel.typing import ModelType\n\nroot = os.path.dirname(__file__)\nsys.path.append(root)\n\nfrom chatdev.chat_chain import ChatChain\n\ntry:\n    from openai.types.chat.chat_completion_message_tool_call import ChatCompletionMessageToolCall\n    from openai.types.chat.chat_completion_message import FunctionCall\n\n    openai_new_api = True  # new openai api version\nexcept ImportError:\n    openai_new_api = False  # old openai api version\n    print(\n        \"Warning: Your OpenAI version is outdated. \\n \"\n        \"Please update as specified in requirement.txt. \\n \"\n        \"The old API interface is deprecated and will no longer be supported.\")\n\n\ndef get_config(company):\n    \"\"\"\n    return configuration json files for ChatChain\n    user can customize only parts of configuration json files, other files will be left for default\n    Args:\n        company: customized configuration name under CompanyConfig/\n\n    Returns:\n        path to three configuration jsons: [config_path, config_phase_path, config_role_path]\n    \"\"\"\n    config_dir = os.path.join(root, \"CompanyConfig\", company)\n    default_config_dir = os.path.join(root, \"CompanyConfig\", \"Default\")\n\n    config_files = [\n        \"ChatChainConfig.json\",\n        \"PhaseConfig.json\",\n        \"RoleConfig.json\"\n    ]\n\n    config_paths = []\n\n    for config_file in config_files:\n        company_config_path = os.path.join(config_dir, config_file)\n        default_config_path = os.path.join(default_config_dir, config_file)\n\n        if os.path.exists(company_config_path):\n            config_paths.append(company_config_path)\n        else:\n            config_paths.append(default_config_path)\n\n    return tuple(config_paths)\n\n\nparser = argparse.ArgumentParser(description='argparse')\nparser.add_argument('--config', type=str, default=\"Default\",\n                    help=\"Name of config, which is used to load configuration under CompanyConfig/\")\nparser.add_argument('--org', type=str, default=\"DefaultOrganization\",\n                    help=\"Name of organization, your software will be generated in WareHouse/name_org_timestamp\")\nparser.add_argument('--task', type=str, default=\"Develop a basic Gomoku game.\",\n                    help=\"Prompt of software\")\nparser.add_argument('--name', type=str, default=\"Gomoku\",\n                    help=\"Name of software, your software will be generated in WareHouse/name_org_timestamp\")\nparser.add_argument('--model', type=str, default=\"GPT_3_5_TURBO\",\n                    help=\"GPT Model, choose from {'GPT_3_5_TURBO', 'GPT_4', 'GPT_4_TURBO', 'GPT_4O', 'GPT_4O_MINI'}\")\nparser.add_argument('--path', type=str, default=\"\",\n                    help=\"Your file directory, ChatDev will build upon your software in the Incremental mode\")\nargs = parser.parse_args()\n\n# Start ChatDev\n\n# ----------------------------------------\n#          Init ChatChain\n# ----------------------------------------\nconfig_path, config_phase_path, config_role_path = get_config(args.config)\nargs2type = {'GPT_3_5_TURBO': ModelType.GPT_3_5_TURBO,\n             'GPT_4': ModelType.GPT_4,\n            #  'GPT_4_32K': ModelType.GPT_4_32k,\n             'GPT_4_TURBO': ModelType.GPT_4_TURBO,\n            #  'GPT_4_TURBO_V': ModelType.GPT_4_TURBO_V\n            'GPT_4O': ModelType.GPT_4O,\n            'GPT_4O_MINI': ModelType.GPT_4O_MINI,\n             }\nif openai_new_api:\n    args2type['GPT_3_5_TURBO'] = ModelType.GPT_3_5_TURBO_NEW\n\nchat_chain = ChatChain(config_path=config_path,\n                       config_phase_path=config_phase_path,\n                       config_role_path=config_role_path,\n                       task_prompt=args.task,\n                       project_name=args.name,\n                       org_name=args.org,\n                       model_type=args2type[args.model],\n                       code_path=args.path)\n\n# ----------------------------------------\n#          Init Log\n# ----------------------------------------\nlogging.basicConfig(filename=chat_chain.log_filepath, level=logging.INFO,\n                    format='[%(asctime)s %(levelname)s] %(message)s',\n                    datefmt='%Y-%d-%m %H:%M:%S', encoding=\"utf-8\")\n\n# ----------------------------------------\n#          Pre Processing\n# ----------------------------------------\n\nchat_chain.pre_processing()\n\n# ----------------------------------------\n#          Personnel Recruitment\n# ----------------------------------------\n\nchat_chain.make_recruitment()\n\n# ----------------------------------------\n#          Chat Chain\n# ----------------------------------------\n\nchat_chain.execute_chain()\n\n# ----------------------------------------\n#          Post Processing\n# ----------------------------------------\n\nchat_chain.post_processing()\n"
        },
        {
          "name": "visualizer",
          "type": "tree",
          "content": null
        },
        {
          "name": "wiki.md",
          "type": "blob",
          "size": 27.53,
          "content": "# Wiki\n\n## Quick Start Step By Step\n\n### 1. Install `ChatDev`:\n\n- Visit the [quickstart section](README.md#%EF%B8%8F-quickstart) of readme for installation instructions.\n\n### 2. Start building software in one command:\n\n- **Build Your Software:** Use the following command to initiate the building of your software,\n  replacing `[description_of_your_idea]` with your idea's description and `[project_name]` with your desired project\n  name:\n   ```\n   python3 run.py --task \"[description_of_your_idea]\" --name \"[project_name]\"\n   ```\n\n- here is the full params of run.py\n\n    ```commandline\n    usage: run.py [-h] [--config CONFIG] [--org ORG] [--task TASK] [--name NAME] [--model MODEL]\n\n    argparse\n\n    optional arguments:\n      -h, --help       show this help message and exit\n      --config CONFIG  Name of config, which is used to load configuration under CompanyConfig/; Please see CompanyConfig Section below\n      --org ORG        Name of organization, your software will be generated in WareHouse/name_org_timestamp\n      --task TASK      Prompt of your idea\n      --name NAME      Name of software, your software will be generated in WareHouse/name_org_timestamp\n      --model MODEL    GPT Model, choose from {'GPT_3_5_TURBO','GPT_4','GPT_4_32K'}\n    ```\n\n### 3. Check your software\n\n- the generated software is under ``WareHouse/NAME_ORG_timestamp``, including:\n    - all the files and manuals of this software\n    - config files of the company that made this software, including three config JSON files\n    - full log of the software building process\n    - prompt to make this software\n- A case of todo software is just like below, which is located in ``/WareHouse/todo_THUNLP_20230822165503``\n    ```\n    .\n    ├── 20230822165503.log # log file\n    ├── ChatChainConfig.json # Configuration\n    ├── PhaseConfig.json # Configuration\n    ├── RoleConfig.json # Configuration\n    ├── todo.prompt # User query prompt\n    ├── meta.txt # Software building metainformation\n    ├── main.py # Generated Software Files\n    ├── manual.md # Generated Software Files\n    ├── todo_app.py # Generated Software Files\n    ├── task.py # Generated Software Files\n    └── requirements.txt # Generated Software Files\n    ```\n- Usually, you just need to install requirements and run main.py to use your software\n    ```commandline\n    cd WareHouse/project_name_DefaultOrganization_timestamp\n    pip3 install -r requirements.txt\n    python3 main.py\n    ```\n\n## Visualizer\n\n- you can start a Flask app to get a Visualizer, which is a local web demo for visualizing real-time logs, replayed logs, and ChatChain.\n- the difference between real-time logs and replayed logs lies in that the former is mainly for debugging, which can print the agent's dialogue information, environment changes, and many additional system information in real-time during the process of software generation, such as file changes and Git information. The latter is used to replay the generated log and only prints the dialogue information of the agent.\n- just run\n```\npython3 visualizer/app.py\n```\n\nthen start building a software by ``python3 run.py`` and go to [Visualizer Website](http://127.0.0.1:8000/) to see an real-time visualized version of logs such as\n\n![demo](misc/demo.png)\n\n- You can also go to the [ChatChain Visualizer](http://127.0.0.1:8000/static/chain_visualizer.html) on this page and\n  upload any ``ChatChainConfig.json`` under ``CompanyConfig/`` to get a visualization on this chain, such as:\n\n![ChatChain Visualizer](misc/chatchain_vis.png)\n\n- You can also go to the [Chat Replay page](http://127.0.0.1:8000/static/replay.html) to replay the log file in the software folder\n    - click the ``File Upload`` bottom to upload a log, then click ``Replay``\n    - The replay only shows the dialogues in natural languages between agents, it will not contain debug logs.\n\n![Replay](misc/replay.gif)\n\n## Docker Start\n- You can use docker for a quick and safe use of ChatDev. You will need some extra steps to allow the execution of the GUI program in docker since ChatDev often creates software with GUI and executes it in the Test Phase.\n\n### Install Docker\n- Please refer to the [Docker Official Website](https://www.docker.com/get-started/) for installing Docker.\n\n### Prepare GUI connection between Host and Docker\n- Take macOS for example,\n  - Install Socat and xquartz, you may need to restart the computer after installing the xquartz\n  ```commandline\n  brew install socat xquartz\n  ```\n  - Open Xquartz and go into the settings, allow connections from network clients\n    - ![xquartz](misc/xquartz.jpg)\n  - run the following command on the host computer and keep it.\n  ```commandline\n   socat TCP-LISTEN:6000,reuseaddr,fork UNIX-CLIENT:\\\"$DISPLAY\\\"\n  ```\n  - run the following command on the host computer to check your ip (the address of inet).\n  ```commandline\n  ifconfig en0\n  ```\n\n### Build Docker images\n- under the ChatDev folder, run\n    ```commandline\n    docker build -t chatdev:latest .\n    ```\n  it will generate a 400MB+ docker image named chatdev.\n\n### Run Docker\n- run the following command to create and go into a container\n    ```commandline\n    docker run -it -p 8000:8000 -e OPENAI_API_KEY=YOUR_OPENAI_KEY -e DISPLAY=YOUR_IP:0 chatdev:latest\n    ```\n  ⚠️ You need to replace ``YOUR_OPENAI_KEY`` with your key and replace ``YOUR_IP`` with your inet address.\n- Then you can just play with ChatDev running ``python3 run.py``.\n- You can run ``python3 visualizer/app.py &`` first to start a background program so that you can use online log with a WebUI.\n\n### Copy the generated software out of Docker\n- run \n    ```commandline\n    docker cp container_id:/path/in/container /path/on/host\n    ```\n### Official Docker Image\n- in preparation\n\n## Experiential Co-Learning Guide\n### Co-Tracking\n\n- **Start Co-Tracking**: Use the following command to initiate the building of software, replacing `[description_of_your_idea]` with task descirption and `[project_name]` with project name. This is the same as starting ChatDev.\n   ```bash \n   python3 run.py --task \"[description_of_your_idea]\" --name \"[project_name]\"\n   ```\n  The software generated in co-tracking phase is ready for the agents' experience pool in the following steps.\n### Co-Memorizing\n- **Initiating Co-Memorizing**: To begin the memorization process for the generated software in a specified directory, run the `ecl.py` script using the following command:\n  ```bash\n    python3 ecl/ecl.py \"<path>\" \"[options]\"\n  ```\n  `<path>`: The path to the file or directory to process. \n  `[options]`: This can be set as `-d`. This flag indicates that the script should process all files in the given directory. If this flag is not set, the script will process the file specified in path.\nAfter this process, the experiences have been extracted from the production of software and added to the agents' experience pool in `ecl/memory/MemoryCards.json`.\n\\\n**For example:**\n  If you want to memorize only one software, you can use:\n  ```bash\n    python3 ecl/ecl.py \"<Software Path to file>\"\n  ```\n  And the software path should be like `\"WareHouse/project_name_DefaultOrganization_timestamp\"`.\n  \\\n  If you want to memorize all files in a directory, you can use:\n  ```bash\n    python3 ecl/ecl.py \"<Software Path to Directory>\" -d\n  ```\n  the software path should be like `\"WareHouse\"`.\n- **Memory Filter**: To get a higher quality experience pool, it is suggested to use `ecl/post_process/memory_filter.py` to filter the `MemoryCards.json`. When running the `memory_filter.py` script, you need to specify three arguments: the filter threshold, the input directory, and the output directory.\n  ```bash\n    python3 ecl/post_process/memory_filter.py \"<threshold>\" \"<directory>\" \"<filtered_directory>\"\n  ```\n  - `<threshold>`: Require a value within the range of 0 to 1 (exclusive). It is used as the threshold to filter experiences by their 'valuegain'. Only experiences with a 'valuegain' that is equal to or greater than this threshold will be considered.\n  - `<directory>`: The file path to the memory directory that you intend to process. \n  - `<filtered_directory>`: The file path to a directory where you want to store the processed data.\n\n  \\\n  **For example:**\n  ```bash\n    python3 ecl/post_process/memory_filter.py 0.9 \"ecl/memory/MemoryCards.json\" \"ecl/memory/MemoryCards_filtered.json\"\n  ```\n> **Notice:** By default, the `MemoryCards.json` is set to be empty. You can customize your own experience pool for agents following steps above. And we have also provided our `MemoryCards.json` used in our experiment in [MemoryCards.json](https://drive.google.com/drive/folders/1czsR4swQyqpoN8zwN0-rSFcTVl68zTDY?usp=sharing). You can download the json file through the link and put it under `ecl/memory` folder. This allows you to directly proceed to the Co-Reasoning phase without needing to redo the Co-Tracking and Co-Memorizing steps.\n### Co-Reasoning\n- **Memory Usage Configuration**:\n  In the `CompanyConfig/Default/ChatChainConfig.json` file, the `with_memory` option should be set **True**. \\\n  In the `ecl/config.yaml` file, you can adjust the settings for **top k** and **similarity threshold** for both code and text retrieval. \n  By default, `with_memory` is set as False and the system is configured to retrieve the top 1 result with a similarity threshold of zero for both code and text.\n- **Start Co-Reasoning**: Once you have completed memory usage configuration, similar to the Co-Tracking phase, you can use the command below to start the software building process. Replace `[description_of_your_idea]` with the task description from the test set and `[project_name]` with the project name from the test set:\n   ```\n   python3 run.py --task \"[description_of_your_idea]\" --name \"[project_name]\"\n   ```\n   In this process of software development, the agents will engage their experience pool(`MemoryCards.json`) into software development!\n\nDetailed descriptions and experiment results about this **Experiential Co-Learning** Module lies in our preprint paper at https://arxiv.org/abs/2312.17025.\n\n## Experiential Co-Evolving Guide\n- **Using Co-Evolving**: Use the following command to initiate the evolving of experiences, which uses the `ecl/ece.py` to eliminate `ecl/memory/UsedMemory.json` and `ecl/memory/NewMemory.json`. Then it combines the two parts of experiences to form a new experience pool in `ecl/memory/Evolved_directory.json`.\n\n  ```bash\n    python3 ecl/ece.py \"<Path_directory>\" \"<UsedMemory_directory>\" \"<NewMemory_directory>\" \"<Evolved_directory>\"\n  ```\n  `<Path_directory>`: The path to the directory of software , generated with the memory `UsedMemory_directory`. \\\n  `<UsedMemory_directory>`: The path to the directory of UsedMemory, which was used to generate the software in `Path_directory`. \\\n  `<NewMemory_directory>`: The path to the directory NewMemory, which acquires from the software in `Path_directory` using `ecl/ecl.py`. \\\n  `<Evolved_directory>`: The path to a directory where you want to store the evolved memory.\n  \\\n  **For example:**\n  ```bash\n    python3 ecl/ece.py \"WareHouse\" \"ecl/memory/UsedMemory.json\" \"ecl/memory/NewMemory.json\" \"ecl/memory/MemoryCards_Evolved.json\"\n  ```\n> **Notice:** The software directory and memory directory must correspond. The software in the \"<Path_directory>\" is generated using \"<UsedMemory_directory>\", and the \"<NewMemory_directory>\" is acquired from the software in the  \"<Path_directory>\". That's because when we calculate the frequency distribution of the experience, we need to ensure that the software corresponds to the experiences, which to eliminate certain experiences to obtain a subset with relatively high retrieval probability.\n\nDetailed descriptions and experiment results about this Experiential Co-Evolving Module lies in our preprint paper at https://arxiv.org/abs/2405.04219.\n\n## Customization\n\n- You can customize your company in three kinds of granularity:\n    - Customize ChatChain\n    - Customize Phase\n    - Customize Role\n- Here is the overview architecture of ChatDev, which illustrates the relationships among the above three classes:\n\n![arch](misc/arch.png)\n\n- All the configuration content related to ChatDev (such as the background prompt of the agent employee, the work content of each Phase, and how the Phase is combined into a ChatChain), are called a **CompanyConfig** (because ChatDev is like a virtual software company). These CompanyConfigs are in the ChatDev project Under ``CompanyConfig/``. You can check this [directory](https://github.com/OpenBMB/ChatDev/tree/main/CompanyConfig). In this directory, you will see different CompanyConfig (such as Default, Art, Human). Generally speaking, each CompanyConfig will contain 3 configuration files.\n  1. ChatChainConfig.json, which controls the overall development process of ChatDev, including which Phase each step is, how many times each Phase needs to be cycled, whether reflection is needed, etc.\n  2. PhaseConfig.json, which controls each Phase, and corresponds to ``chatdev/phase.py`` or ``chatdev/composed_phase.py`` in the ChatDev project. The Python file realizes the specific working logic of each phase. The JSON file here contains the configuration of each phase, such as the background prompt, which employees are participating in the phase, etc.\n  3. RoleConfig.json contains the configuration of each employee (agent). Currently, it only contains the background prompt of each employee, which is a bunch of text containing placeholders.\n- If a CompanyConfig does not contain all three configuration files (such as Art and Human), it means that the configuration files missing from this CompanyConfig are set according to Default. The official CompanyConfigs currently provided include:\n  1. Default, default configuration\n  2. Art, allows ChatDev to create image files according to needs, automatically generate image description prompts and call the OpenAI API to generate images\n  3. Human, allowing human users to participate in ChatDev’s code review process\n\n### Customize ChatChain\n\n- see ``CompanyConfig/Default/ChatChainConfig.json``\n- You can easily pick and organize phases to formulate a ChatChain from all phases (from ``chatdev/phase.py``\n  or ``chatdev/composed_phase.py``)\n  by modifying the JSON file\n\n### Customize Phase\n\n- This is the only part that needs to modify the code, and it brings much flexibility for customization.\n- you just need to\n    - implement your phase class (in the simplest case, only one functions need to be modified) extending the ``Phase``\n      class\n    - config this phase in ``PhaseConfig.json``, including writing phase prompt and assigning roles for this phase\n- Customize SimplePhase\n    - see ``CompanyConfig/Default/PhaseConfig.json`` for configuration, see ``chatdev/phase.py`` for implementing your\n      own phase\n    - each phase contains three steps:\n        - generate phase environment from the whole ChatChain environment\n        - use phase environment to control the phase prompt and execute the chatting between roles in this phase (which\n          usually does not need to be modified)\n        - get a seminar conclusion from the chatting, and use it to update the whole ChatChain environment\n    - below is a simple example phase of choosing the programming language of the software:\n        - generate phase environment: we pick the task, modality, and ideas from the ChatChain environment\n        - execute the phase: no need to implement, which is defined in the Phase class\n        - update ChatChain environment: we get the seminar conclusion (which language) and update the 'language' key in the\n          ChatChain environment\n          ```python\n          class LanguageChoose(Phase):\n              def __init__(self, **kwargs):\n                  super().__init__(**kwargs)\n\n              def update_phase_env(self, chat_env):\n                  self.phase_env.update({\"task\": chat_env.env_dict['task_prompt'],\n                                         \"modality\": chat_env.env_dict['modality'],\n                                         \"ideas\": chat_env.env_dict['ideas']})\n\n              def update_chat_env(self, chat_env) -> ChatEnv:\n                  if len(self.seminar_conclusion) > 0 and \"<INFO>\" in self.seminar_conclusion:\n                      chat_env.env_dict['language'] = self.seminar_conclusion.split(\"<INFO>\")[-1].lower().replace(\".\", \"\").strip()\n                  elif len(self.seminar_conclusion) > 0:\n                      chat_env.env_dict['language'] = self.seminar_conclusion\n                  else:\n                      chat_env.env_dict['language'] = \"Python\"\n                  return chat_env\n          ```\n          The configuration of this phase is like:\n          ```json\n          \"LanguageChoose\": {\n            \"assistant_role_name\": \"Chief Technology Officer\",\n            \"user_role_name\": \"Chief Executive Officer\",\n            \"phase_prompt\": [\n              \"According to the new user's task and some creative brainstorm ideas listed below: \",\n              \"Task: \\\"{task}\\\".\",\n              \"Modality: \\\"{modality}\\\".\",\n              \"Ideas: \\\"{ideas}\\\".\",\n              \"We have decided to complete the task through an executable software implemented via a programming language. \",\n              \"As the {assistant_role}, to satisfy the new user's demand and make the software realizable, you should propose a concrete programming language. If python can complete this task via Python, please answer Python; otherwise, answer another programming language (e.g., Java, C++, etc,).\",\n              \"Note that we must ONLY discuss the target programming language and do not discuss anything else! Once we all have expressed our opinion(s) and agree with the results of the discussion unanimously, any of us must actively terminate the discussion and conclude the best programming language we have discussed without any other words or reasons, using the format: \\\"<INFO> *\\\" where \\\"*\\\" represents a programming language.\"\n            ]\n          }\n          ```\n    - Customize ComposePhase\n        - see ``CompanyConfig/Default/ChatChainConfig.json`` for configuration and see ``chatdev/composed_phase.py`` for\n          implementation.\n        - **⚠️ Attention** We do not support Nested Composition yet so do not put ComposePhase in ComposePhase.\n        - ComposePhase contains multiple SimplePhase, and can be conducted in loop.\n        - ComposePhase has no Phase json but in the chatchain json file you can define which SimplePhase is in this\n          ComposePhase, such as:\n      ```json\n        {\n          \"phase\": \"CodeReview\",\n          \"phaseType\": \"ComposedPhase\",\n          \"cycleNum\": 2,\n          \"Composition\": [\n            {\n              \"phase\": \"CodeReviewComment\",\n              \"phaseType\": \"SimplePhase\",\n              \"max_turn_step\": -1,\n              \"need_reflect\": \"False\"\n            },\n            {\n              \"phase\": \"CodeReviewModification\",\n              \"phaseType\": \"SimplePhase\",\n              \"max_turn_step\": -1,\n              \"need_reflect\": \"False\"\n            }\n          ]\n        }\n      ```\n        - You also need to implement your own ComposePhase class, which you need to decide the phase_env update and\n          chat_env update (the same as SimplePhase, but for the whole ComposePhase) and the condition for stopping the\n          loop (optional):\n      ```python\n      class Test(ComposedPhase):\n          def __init__(self, **kwargs):\n              super().__init__(**kwargs)\n\n          def update_phase_env(self, chat_env):\n              self.phase_env = dict()\n\n          def update_chat_env(self, chat_env):\n              return chat_env\n\n          def break_cycle(self, phase_env) -> bool:\n              if not phase_env['exist_bugs_flag']:\n                  log_visualize(f\"**[Test Info]**\\n\\nAI User (Software Test Engineer):\\nTest Pass!\\n\")\n                  return True\n              else:\n                  return False\n      ```\n\n### Customize Role\n\n- see ``CompanyConfig/Default/RoleConfig.json``\n- you can use placeholders for using phase environment, which is the same as PhaseConfig.json\n- **⚠️ Attention** You need to keep at least \"Chief Executive Officer\" and \"Counselor\" in your own ``RoleConfig.json``\n  to make Reflection work.\n\n## ChatChain Parameters\n\n- *clear_structure*: Whether to clear non-software files in the WareHouse and cache files in the generated software path.\n- *gui_design*: Encourage ChatDev to generate software with GUI.\n- *git_management*: Whether to use git to manage the creation and changes of generated software.\n- *incremental_develop*: Whether to use incremental development on an existing project.\n- *self_improve*: flag for self-improvement on user input prompt. It is a special chat that LLM plays as a prompt engineer to improve the user input prompt. **⚠️ Attention** Model generated prompts contain uncertainty and there may\n  be a deviation from the requirement meaning contained in the original prompt.\n- *background_prompt*: background prompt that will be added to every inquiry to LLM\n- *with_memory*: Whether to utilize the experience pool for agents. The experience pool actually lies in in `ecl/memory/MemoryCards.json`.\n- params in SimplePhase:\n    - *max_turn_step*: Max number of chatting turn. You can increase max_turn_step for better performance but it will\n      take a longer time to finish the phase.\n    - *need_reflect*: Flag for reflection. Reflection is a special phase that automatically executes after a phase. It\n      will start a chat between the counselor and CEO to refine the conclusion of phase chatting.\n- params in ComposedPhase\n    - *cycleNum*: Number of cycles to execute SimplePhase in this ComposedPhase.\n\n## Project Structure\n\n```commandline\n├── CompanyConfig # Configuration Files for ChatDev, including ChatChain, Phase and Role config json.\n├── WareHouse # Folder for Generated Software\n├── camel # Camel RolePlay Component\n├── chatdev # ChatDev Core Code\n├── ecl # Experiential Co-Learning Module\n├── misc # Assets of Example and Demo\n├── visualizer # Visualizer Folder\n├── run.py # Entry of ChatDev\n├── requirements.txt\n├── README.md\n└── wiki.md\n```\n\n## CompanyConfig\n\n### Default\n![demo](misc/ChatChain_Visualization_Default.png)\n- As shown in the ChatChain visualization of the Default setting, ChatDev will produce software in the order of:\n  - Demand Analysis: decide the modality of the software\n  - Language Choose: decide the programming language\n  - Coding: write the code\n  - CodeCompleteAll: complete the missing function/class\n  - CodeReview: review and modify the code\n  - Test: run the software and modify the code based on the test report\n  - EnvironmentDoc: write the environment doc\n  - Manual: write the manual\n- You can use default setting using ``python3 run.py --config \"Default\"``.\n\n### Art\n![demo](misc/ChatChain_Visualization_Art.png)\n- Compared to Default, the Art setting adds a phase before CodeCompleteAll called Art\n- The Art phase will first discuss the name and description of the images assets, then use ``openai.Image.create`` to generate the images based on the description.\n- You can use default setting using ``python3 run.py --config \"Art\"`` or just ignore the config parameter.\n\n### Human-Agent Interaction\n![demo](misc/ChatChain_Visualization_Human.png)\n- Compared to Default, in ***Human-Agent-Interaction*** mode you can play as a reviewer and ask the programmer agent to modify the code based on your comments.\n- It adds a Phase called HumanAgentInteraction after the  dCodeReview Phase.\n- You can use ***Human-Agent-Interaction*** setting using ``python3 run.py --config \"Human\"``.\n- When chatdev executes to this Phase, on the command interface you will see a hint that asks for input.\n- You can run your software in the ``WareHouse/`` and see if it satisfies your needs. Then you can type anything you want (bug fix or new feature) in the command interface, then press Enter:\n![Human_command](misc/Human_command.png)\n- For example\n  - We first run the ChatDev with the task \"design a gomoku game\"\n  - Then we type \"Please add a restart button\" in the HumanAgentInteraction Phase, adding the first feature\n  - In the second loop of HumanAgentInteraction, we add another feature by typing \"Please add a current status bar showing whose turn it is\".\n  - At last, we early exit this mode by typing \"End\".\n  - Below are all three versions.\n    - <img src='misc/Human_v1.png' height=250>&nbsp;&nbsp;&nbsp;&nbsp;<img src='misc/Human_v2.png' height=250>&nbsp;&nbsp;&nbsp;&nbsp;<img src='misc/Human_v3.png' height=250>\n\n### Git Mode\n- Simply set ``\"git_management\"`` to ``\"True\"`` in ``ChatChainConfig.json`` to open the Git Mode, in which ChatDev will make the generated software folder a git repository and automatically make all commits.\n- Every change made on the code of generated software will create a commit, including:\n  - The initial commit, created after the ``Coding`` phase completed, with a commit message ``Finish Coding``.\n  - Complete ``ArtIntegration`` phase, with a commit message ``Finish Art Integration``.\n  - Complete ``CodeComplete`` phase, with a commit message ``Code Complete #1/2/3 Finished``(if the CodeComplete is executed in three loops).\n  - Complete ``CodeReviewModification`` phase, with a commit message ``Review #1/2/3 Finished``(if the CodeReviewModification is executed in three loops).\n  - Complete ``CodeReviewHuman`` phase, with a commit message ``Human Review #1/2/3 Finished``(if the CodeReviewHuman is executed in three loops).\n  - Complete ``TestModification`` phase, with a commit message ``Test #1/2/3 Finished``(if the TestModification is executed in three loops).\n  - All phases completed, with a commit message ``Final Version``.\n- On the terminal and online log UI you can see the git summary at the end of the process.\n  -  <img src='misc/git_summary_terminal.png' height=250>&nbsp;&nbsp;&nbsp;&nbsp;<img src='misc/git_summary_onlinelog.png' height=250>\n  - You can also search ``git Information`` in the log file to see when did commit happened.\n- ⚠️ There are a few things worth noting about Git Mode:\n  - ChatDev is a git project, and we need to create another git project in the generated software folder, so we use ``git submodule`` to make this \"git over git\" function. A ``.gitmodule`` file will be created.\n    - under the software folder, you can add/commit/push/checkout the software project just like a normal git project, and your commits would not modify the ChatDev git history.\n    - under the ChatDev folder, the new software has been added to the ChatDev as a whole folder.\n  - The generated log file would not be added into the software git project, since the log is closed and moved to the software folder after the final commit. We have to do this because the log should record all the git commits, including the final one. So the git operations must be done before the log is finalized. You will always see a log file to be added and committed in the software folder, like:\n    - ![img.png](misc/the_log_left.png)\n  - When you perform ``git add .`` under the ChatDev project, There will be information like (taking Gomoku for example):\n    ```commandline\n    Changes to be committed:\n        (use \"git restore --staged <file>...\" to unstage)\n            new file:   .gitmodules\n            new file:   WareHouse/Gomoku_GitMode_20231025184031\n\n    Changes not staged for commit:\n        (use \"git add <file>...\" to update what will be committed)\n        (use \"git restore <file>...\" to discard changes in working directory)\n        (commit or discard the untracked or modified content in submodules)\n            modified:   WareHouse/Gomoku_GitMode_20231025184031 (untracked content)\n    ```\n    If you add and commit the software log file under the software folder, there will be no ``Changes not staged for commit:``\n  - Some phase executions may not change the code, and thereby there is no commit. For example, the software is tested without problems and there is no modification, so the test phase would leave no commit.\n  \n"
        }
      ]
    }
  ]
}