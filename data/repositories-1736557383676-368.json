{
  "metadata": {
    "timestamp": 1736557383676,
    "page": 368,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "oobabooga/text-generation-webui",
      "stars": 41549,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.55,
          "content": "/cache\n/characters\n/css\n/extensions\n/grammars\n/installer_files\n/logs\n/loras\n/models\n/presets\n/prompts\n/repositories\n/softprompts\n/torch-dumps\n/training/datasets\n\n/CMD_FLAGS.txt\n/img_bot*\n/img_me*\n/models/config-user.yaml\n/notification.mp3\n/settings*.json\n/settings*.yaml\n\n.chroma\n.DS_Store\n.eslintrc.js\n.idea\n.venv\nvenv\n.envrc\n.direnv\n.vs\n.vscode\n*.bak\n*.ipynb\n*.log\n*pycache*\ncert.pem\nkey.pem\npackage.json\npackage-lock.json\nThumbs.db\nwandb\n\n# ignore user docker config and top level links to docker files\n/docker-compose.yaml\n/docker-compose.yml\n/Dockerfile\n.env\n"
        },
        {
          "name": "CMD_FLAGS.txt",
          "type": "blob",
          "size": 0.07,
          "content": "# Only used by the one-click installer.\n# Example:\n# --listen --api\n"
        },
        {
          "name": "Colab-TextGen-GPU.ipynb",
          "type": "blob",
          "size": 3.97,
          "content": "{\n  \"nbformat\": 4,\n  \"nbformat_minor\": 0,\n  \"metadata\": {\n    \"colab\": {\n      \"private_outputs\": true,\n      \"provenance\": [],\n      \"gpuType\": \"T4\"\n    },\n    \"kernelspec\": {\n      \"name\": \"python3\",\n      \"display_name\": \"Python 3\"\n    },\n    \"language_info\": {\n      \"name\": \"python\"\n    },\n    \"accelerator\": \"GPU\"\n  },\n  \"cells\": [\n    {\n      \"cell_type\": \"markdown\",\n      \"source\": [\n        \"# oobabooga/text-generation-webui\\n\",\n        \"\\n\",\n        \"After running both cells, a public gradio URL will appear at the bottom in around 10 minutes. You can optionally generate an API link.\\n\",\n        \"\\n\",\n        \"* Project page: https://github.com/oobabooga/text-generation-webui\\n\",\n        \"* Gradio server status: https://status.gradio.app/\"\n      ],\n      \"metadata\": {\n        \"id\": \"MFQl6-FjSYtY\"\n      }\n    },\n    {\n      \"cell_type\": \"code\",\n      \"source\": [\n        \"#@title 1. Keep this tab alive to prevent Colab from disconnecting you { display-mode: \\\"form\\\" }\\n\",\n        \"\\n\",\n        \"#@markdown Press play on the music player that will appear below:\\n\",\n        \"%%html\\n\",\n        \"<audio src=\\\"https://oobabooga.github.io/silence.m4a\\\" controls>\"\n      ],\n      \"metadata\": {\n        \"id\": \"f7TVVj_z4flw\"\n      },\n      \"execution_count\": null,\n      \"outputs\": []\n    },\n    {\n      \"cell_type\": \"code\",\n      \"source\": [\n        \"#@title 2. Launch the web UI\\n\",\n        \"\\n\",\n        \"#@markdown If unsure about the branch, write \\\"main\\\" or leave it blank.\\n\",\n        \"\\n\",\n        \"import os\\n\",\n        \"from pathlib import Path\\n\",\n        \"\\n\",\n        \"os.environ.pop('PYTHONPATH', None)\\n\",\n        \"\\n\",\n        \"if Path.cwd().name != 'text-generation-webui':\\n\",\n        \"  print(\\\"\\\\033[1;32;1m\\\\n --> Installing the web UI. This will take a while, but after the initial setup, you can download and test as many models as you like.\\\\033[0;37;0m\\\\n\\\")\\n\",\n        \"\\n\",\n        \"  !git clone https://github.com/oobabooga/text-generation-webui\\n\",\n        \"  %cd text-generation-webui\\n\",\n        \"\\n\",\n        \"  # Install the project in an isolated environment\\n\",\n        \"  !GPU_CHOICE=A \\\\\\n\",\n        \"  USE_CUDA118=FALSE \\\\\\n\",\n        \"  LAUNCH_AFTER_INSTALL=FALSE \\\\\\n\",\n        \"  INSTALL_EXTENSIONS=FALSE \\\\\\n\",\n        \"  ./start_linux.sh\\n\",\n        \"\\n\",\n        \"# Parameters\\n\",\n        \"model_url = \\\"https://huggingface.co/turboderp/gemma-2-9b-it-exl2\\\" #@param {type:\\\"string\\\"}\\n\",\n        \"branch = \\\"8.0bpw\\\" #@param {type:\\\"string\\\"}\\n\",\n        \"command_line_flags = \\\"--n-gpu-layers 128 --load-in-4bit --use_double_quant --no_flash_attn\\\" #@param {type:\\\"string\\\"}\\n\",\n        \"api = False #@param {type:\\\"boolean\\\"}\\n\",\n        \"\\n\",\n        \"if api:\\n\",\n        \"  for param in ['--api', '--public-api']:\\n\",\n        \"    if param not in command_line_flags:\\n\",\n        \"      command_line_flags += f\\\" {param}\\\"\\n\",\n        \"\\n\",\n        \"model_url = model_url.strip()\\n\",\n        \"if model_url != \\\"\\\":\\n\",\n        \"    if not model_url.startswith('http'):\\n\",\n        \"        model_url = 'https://huggingface.co/' + model_url\\n\",\n        \"\\n\",\n        \"    # Download the model\\n\",\n        \"    url_parts = model_url.strip('/').strip().split('/')\\n\",\n        \"    output_folder = f\\\"{url_parts[-2]}_{url_parts[-1]}\\\"\\n\",\n        \"    branch = branch.strip('\\\"\\\\' ')\\n\",\n        \"    if branch.strip() not in ['', 'main']:\\n\",\n        \"        output_folder += f\\\"_{branch}\\\"\\n\",\n        \"        !python download-model.py {model_url} --branch {branch}\\n\",\n        \"    else:\\n\",\n        \"        !python download-model.py {model_url}\\n\",\n        \"else:\\n\",\n        \"    output_folder = \\\"\\\"\\n\",\n        \"\\n\",\n        \"# Start the web UI\\n\",\n        \"cmd = f\\\"./start_linux.sh {command_line_flags} --share\\\"\\n\",\n        \"if output_folder != \\\"\\\":\\n\",\n        \"    cmd += f\\\" --model {output_folder}\\\"\\n\",\n        \"\\n\",\n        \"!$cmd\"\n      ],\n      \"metadata\": {\n        \"id\": \"LGQ8BiMuXMDG\",\n        \"cellView\": \"form\"\n      },\n      \"execution_count\": null,\n      \"outputs\": []\n    }\n  ]\n}\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 33.71,
          "content": "                    GNU AFFERO GENERAL PUBLIC LICENSE\n                       Version 3, 19 November 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU Affero General Public License is a free, copyleft license for\nsoftware and other kinds of works, specifically designed to ensure\ncooperation with the community in the case of network server software.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nour General Public Licenses are intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  Developers that use our General Public Licenses protect your rights\nwith two steps: (1) assert copyright on the software, and (2) offer\nyou this License which gives you legal permission to copy, distribute\nand/or modify the software.\n\n  A secondary benefit of defending all users' freedom is that\nimprovements made in alternate versions of the program, if they\nreceive widespread use, become available for other developers to\nincorporate.  Many developers of free software are heartened and\nencouraged by the resulting cooperation.  However, in the case of\nsoftware used on network servers, this result may fail to come about.\nThe GNU General Public License permits making a modified version and\nletting the public access it on a server without ever releasing its\nsource code to the public.\n\n  The GNU Affero General Public License is designed specifically to\nensure that, in such cases, the modified source code becomes available\nto the community.  It requires the operator of a network server to\nprovide the source code of the modified version running there to the\nusers of that server.  Therefore, public use of a modified version, on\na publicly accessible server, gives the public access to the source\ncode of the modified version.\n\n  An older license, called the Affero General Public License and\npublished by Affero, was designed to accomplish similar goals.  This is\na different license, not a version of the Affero GPL, but Affero has\nreleased a new version of the Affero GPL which permits relicensing under\nthis license.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU Affero General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Remote Network Interaction; Use with the GNU General Public License.\n\n  Notwithstanding any other provision of this License, if you modify the\nProgram, your modified version must prominently offer all users\ninteracting with it remotely through a computer network (if your version\nsupports such interaction) an opportunity to receive the Corresponding\nSource of your version by providing access to the Corresponding Source\nfrom a network server at no charge, through some standard or customary\nmeans of facilitating copying of software.  This Corresponding Source\nshall include the Corresponding Source for any work covered by version 3\nof the GNU General Public License that is incorporated pursuant to the\nfollowing paragraph.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the work with which it is combined will remain governed by version\n3 of the GNU General Public License.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU Affero General Public License from time to time.  Such new versions\nwill be similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU Affero General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU Affero General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU Affero General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as published\n    by the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If your software can interact with users remotely through a computer\nnetwork, you should also make sure that it provides a way for users to\nget its source.  For example, if your program is a web application, its\ninterface could display a \"Source\" link that leads users to an archive\nof the code.  There are many ways you could offer source, and different\nsolutions will be better for different programs; see section 13 for the\nspecific requirements.\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU AGPL, see\n<https://www.gnu.org/licenses/>.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 26.01,
          "content": "# Text generation web UI\n\nA Gradio web UI for Large Language Models.\n\nIts goal is to become the [AUTOMATIC1111/stable-diffusion-webui](https://github.com/AUTOMATIC1111/stable-diffusion-webui) of text generation.\n\n|![Image1](https://github.com/oobabooga/screenshots/raw/main/AFTER-INSTRUCT.png) | ![Image2](https://github.com/oobabooga/screenshots/raw/main/AFTER-CHAT.png) |\n|:---:|:---:|\n|![Image1](https://github.com/oobabooga/screenshots/raw/main/AFTER-DEFAULT.png) | ![Image2](https://github.com/oobabooga/screenshots/raw/main/AFTER-PARAMETERS.png) |\n\n## Features\n\n- Supports multiple text generation backends in one UI/API, including [Transformers](https://github.com/huggingface/transformers), [llama.cpp](https://github.com/ggerganov/llama.cpp), and [ExLlamaV2](https://github.com/turboderp-org/exllamav2). [TensorRT-LLM](https://github.com/NVIDIA/TensorRT-LLM) is supported via its own [Dockerfile](https://github.com/oobabooga/text-generation-webui/blob/main/docker/TensorRT-LLM/Dockerfile), and the Transformers loader is compatible with libraries like [AutoGPTQ](https://github.com/PanQiWei/AutoGPTQ), [AutoAWQ](https://github.com/casper-hansen/AutoAWQ), [HQQ](https://github.com/mobiusml/hqq), and [AQLM](https://github.com/Vahe1994/AQLM), but they must be installed manually.\n- OpenAI-compatible API with Chat and Completions endpoints – see [examples](https://github.com/oobabooga/text-generation-webui/wiki/12-%E2%80%90-OpenAI-API#examples).\n- Automatic prompt formatting using Jinja2 templates.\n- Three chat modes: `instruct`, `chat-instruct`, and `chat`, with automatic prompt templates in `chat-instruct`.\n- \"Past chats\" menu to quickly switch between conversations.\n- Free-form text generation in the Default/Notebook tabs without being limited to chat turns. You can send formatted conversations from the Chat tab to these.\n- Multiple sampling parameters and generation options for sophisticated text generation control.\n- Switch between different models easily in the UI without restarting.\n- Simple LoRA fine-tuning tool.\n- Requirements installed in a self-contained `installer_files` directory that doesn't interfere with the system environment.\n- Extension support, with numerous built-in and user-contributed extensions available. See the [wiki](https://github.com/oobabooga/text-generation-webui/wiki/07-%E2%80%90-Extensions) and [extensions directory](https://github.com/oobabooga/text-generation-webui-extensions) for details.\n\n## How to install\n\n1) Clone or [download the repository](https://github.com/oobabooga/text-generation-webui/archive/refs/heads/main.zip).\n2) Run the script that matches your OS: `start_linux.sh`, `start_windows.bat`, `start_macos.sh`, or `start_wsl.bat`.\n3) Select your GPU vendor when asked.\n4) Once the installation ends, browse to `http://localhost:7860`.\n5) Have fun!\n\nTo restart the web UI later, just run the same `start_` script. If you need to reinstall, delete the `installer_files` folder created during setup and run the script again.\n\nYou can use command-line flags, like `./start_linux.sh --help`, or add them to `CMD_FLAGS.txt` (such as `--api` to enable API use). To update the project, run `update_wizard_linux.sh`, `update_wizard_windows.bat`, `update_wizard_macos.sh`, or `update_wizard_wsl.bat`.\n\n<details>\n<summary>\nSetup details and information about installing manually\n</summary>\n\n### One-click-installer\n\nThe script uses Miniconda to set up a Conda environment in the `installer_files` folder.\n\nIf you ever need to install something manually in the `installer_files` environment, you can launch an interactive shell using the cmd script: `cmd_linux.sh`, `cmd_windows.bat`, `cmd_macos.sh`, or `cmd_wsl.bat`.\n\n* There is no need to run any of those scripts (`start_`, `update_wizard_`, or `cmd_`) as admin/root.\n* To install the requirements for extensions, you can use the `extensions_reqs` script for your OS. At the end, this script will install the main requirements for the project to make sure that they take precedence in case of version conflicts.\n* For additional instructions about AMD and WSL setup, consult [the documentation](https://github.com/oobabooga/text-generation-webui/wiki).\n* For automated installation, you can use the `GPU_CHOICE`, `USE_CUDA118`, `LAUNCH_AFTER_INSTALL`, and `INSTALL_EXTENSIONS` environment variables. For instance: `GPU_CHOICE=A USE_CUDA118=FALSE LAUNCH_AFTER_INSTALL=FALSE INSTALL_EXTENSIONS=TRUE ./start_linux.sh`.\n\n### Manual installation using Conda\n\nRecommended if you have some experience with the command-line.\n\n#### 0. Install Conda\n\nhttps://docs.conda.io/en/latest/miniconda.html\n\nOn Linux or WSL, it can be automatically installed with these two commands ([source](https://educe-ubc.github.io/conda.html)):\n\n```\ncurl -sL \"https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\" > \"Miniconda3.sh\"\nbash Miniconda3.sh\n```\n\n#### 1. Create a new conda environment\n\n```\nconda create -n textgen python=3.11\nconda activate textgen\n```\n\n#### 2. Install Pytorch\n\n| System | GPU | Command |\n|--------|---------|---------|\n| Linux/WSL | NVIDIA | `pip3 install torch==2.4.1 torchvision==0.19.1 torchaudio==2.4.1 --index-url https://download.pytorch.org/whl/cu121` |\n| Linux/WSL | CPU only | `pip3 install torch==2.4.1 torchvision==0.19.1 torchaudio==2.4.1 --index-url https://download.pytorch.org/whl/cpu` |\n| Linux | AMD | `pip3 install torch==2.4.1 torchvision==0.19.1 torchaudio==2.4.1 --index-url https://download.pytorch.org/whl/rocm6.1` |\n| MacOS + MPS | Any | `pip3 install torch==2.4.1 torchvision==0.19.1 torchaudio==2.4.1` |\n| Windows | NVIDIA | `pip3 install torch==2.4.1 torchvision==0.19.1 torchaudio==2.4.1 --index-url https://download.pytorch.org/whl/cu121` |\n| Windows | CPU only | `pip3 install torch==2.4.1 torchvision==0.19.1 torchaudio==2.4.1` |\n\nThe up-to-date commands can be found here: https://pytorch.org/get-started/locally/.\n\nFor NVIDIA, you also need to install the CUDA runtime libraries:\n\n```\nconda install -y -c \"nvidia/label/cuda-12.1.1\" cuda-runtime\n```\n\nIf you need `nvcc` to compile some library manually, replace the command above with\n\n```\nconda install -y -c \"nvidia/label/cuda-12.1.1\" cuda\n```\n\n#### 3. Install the web UI\n\n```\ngit clone https://github.com/oobabooga/text-generation-webui\ncd text-generation-webui\npip install -r <requirements file according to table below>\n```\n\nRequirements file to use:\n\n| GPU | CPU | requirements file to use |\n|--------|---------|---------|\n| NVIDIA | has AVX2 | `requirements.txt` |\n| NVIDIA | no AVX2 | `requirements_noavx2.txt` |\n| AMD | has AVX2 | `requirements_amd.txt` |\n| AMD | no AVX2 | `requirements_amd_noavx2.txt` |\n| CPU only | has AVX2 | `requirements_cpu_only.txt` |\n| CPU only | no AVX2 | `requirements_cpu_only_noavx2.txt` |\n| Apple | Intel | `requirements_apple_intel.txt` |\n| Apple | Apple Silicon | `requirements_apple_silicon.txt` |\n\n### Start the web UI\n\n```\nconda activate textgen\ncd text-generation-webui\npython server.py\n```\n\nThen browse to\n\n`http://localhost:7860/?__theme=dark`\n\n##### AMD GPU on Windows\n\n1) Use `requirements_cpu_only.txt` or `requirements_cpu_only_noavx2.txt` in the command above.\n\n2) Manually install llama-cpp-python using the appropriate command for your hardware: [Installation from PyPI](https://github.com/abetlen/llama-cpp-python#installation-with-hardware-acceleration).\n    * Use the `LLAMA_HIPBLAS=on` toggle.\n    * Note the [Windows remarks](https://github.com/abetlen/llama-cpp-python#windows-remarks).\n\n3) Manually install AutoGPTQ: [Installation](https://github.com/PanQiWei/AutoGPTQ#install-from-source).\n    * Perform the from-source installation - there are no prebuilt ROCm packages for Windows.\n\n##### Older NVIDIA GPUs\n\n1) For Kepler GPUs and older, you will need to install CUDA 11.8 instead of 12:\n\n```\npip3 install torch==2.4.1 torchvision==0.19.1 torchaudio==2.4.1 --index-url https://download.pytorch.org/whl/cu118\nconda install -y -c \"nvidia/label/cuda-11.8.0\" cuda-runtime\n```\n\n2) bitsandbytes >= 0.39 may not work. In that case, to use `--load-in-8bit`, you may have to downgrade like this:\n    * Linux: `pip install bitsandbytes==0.38.1`\n    * Windows: `pip install https://github.com/jllllll/bitsandbytes-windows-webui/raw/main/bitsandbytes-0.38.1-py3-none-any.whl`\n\n##### Manual install\n\nThe `requirements*.txt` above contain various wheels precompiled through GitHub Actions. If you wish to compile things manually, or if you need to because no suitable wheels are available for your hardware, you can use `requirements_nowheels.txt` and then install your desired loaders manually.\n\n### Alternative: Docker\n\n```\nFor NVIDIA GPU:\nln -s docker/{nvidia/Dockerfile,nvidia/docker-compose.yml,.dockerignore} .\nFor AMD GPU: \nln -s docker/{amd/Dockerfile,intel/docker-compose.yml,.dockerignore} .\nFor Intel GPU:\nln -s docker/{intel/Dockerfile,amd/docker-compose.yml,.dockerignore} .\nFor CPU only\nln -s docker/{cpu/Dockerfile,cpu/docker-compose.yml,.dockerignore} .\ncp docker/.env.example .env\n#Create logs/cache dir : \nmkdir -p logs cache\n# Edit .env and set: \n#   TORCH_CUDA_ARCH_LIST based on your GPU model\n#   APP_RUNTIME_GID      your host user's group id (run `id -g` in a terminal)\n#   BUILD_EXTENIONS      optionally add comma separated list of extensions to build\n# Edit CMD_FLAGS.txt and add in it the options you want to execute (like --listen --cpu)\n# \ndocker compose up --build\n```\n\n* You need to have Docker Compose v2.17 or higher installed. See [this guide](https://github.com/oobabooga/text-generation-webui/wiki/09-%E2%80%90-Docker) for instructions.\n* For additional docker files, check out [this repository](https://github.com/Atinoda/text-generation-webui-docker).\n\n### Updating the requirements\n\nFrom time to time, the `requirements*.txt` change. To update, use these commands:\n\n```\nconda activate textgen\ncd text-generation-webui\npip install -r <requirements file that you have used> --upgrade\n```\n</details>\n\n<details>\n<summary>\nList of command-line flags\n</summary>\n\n```txt\nusage: server.py [-h] [--multi-user] [--character CHARACTER] [--model MODEL] [--lora LORA [LORA ...]] [--model-dir MODEL_DIR] [--lora-dir LORA_DIR] [--model-menu] [--settings SETTINGS]\n                 [--extensions EXTENSIONS [EXTENSIONS ...]] [--verbose] [--idle-timeout IDLE_TIMEOUT] [--loader LOADER] [--cpu] [--auto-devices] [--gpu-memory GPU_MEMORY [GPU_MEMORY ...]]\n                 [--cpu-memory CPU_MEMORY] [--disk] [--disk-cache-dir DISK_CACHE_DIR] [--load-in-8bit] [--bf16] [--no-cache] [--trust-remote-code] [--force-safetensors] [--no_use_fast]\n                 [--use_flash_attention_2] [--use_eager_attention] [--load-in-4bit] [--use_double_quant] [--compute_dtype COMPUTE_DTYPE] [--quant_type QUANT_TYPE] [--flash-attn] [--tensorcores]\n                 [--n_ctx N_CTX] [--threads THREADS] [--threads-batch THREADS_BATCH] [--no_mul_mat_q] [--n_batch N_BATCH] [--no-mmap] [--mlock] [--n-gpu-layers N_GPU_LAYERS]\n                 [--tensor_split TENSOR_SPLIT] [--numa] [--logits_all] [--no_offload_kqv] [--cache-capacity CACHE_CAPACITY] [--row_split] [--streaming-llm] [--attention-sink-size ATTENTION_SINK_SIZE]\n                 [--tokenizer-dir TOKENIZER_DIR] [--gpu-split GPU_SPLIT] [--autosplit] [--max_seq_len MAX_SEQ_LEN] [--cfg-cache] [--no_flash_attn] [--no_xformers] [--no_sdpa]\n                 [--num_experts_per_token NUM_EXPERTS_PER_TOKEN] [--enable_tp] [--triton] [--no_inject_fused_mlp] [--no_use_cuda_fp16] [--desc_act] [--disable_exllama] [--disable_exllamav2]\n                 [--wbits WBITS] [--groupsize GROUPSIZE] [--hqq-backend HQQ_BACKEND] [--cpp-runner] [--cache_type CACHE_TYPE] [--deepspeed] [--nvme-offload-dir NVME_OFFLOAD_DIR]\n                 [--local_rank LOCAL_RANK] [--alpha_value ALPHA_VALUE] [--rope_freq_base ROPE_FREQ_BASE] [--compress_pos_emb COMPRESS_POS_EMB] [--listen] [--listen-port LISTEN_PORT]\n                 [--listen-host LISTEN_HOST] [--share] [--auto-launch] [--gradio-auth GRADIO_AUTH] [--gradio-auth-path GRADIO_AUTH_PATH] [--ssl-keyfile SSL_KEYFILE] [--ssl-certfile SSL_CERTFILE]\n                 [--subpath SUBPATH] [--old-colors] [--api] [--public-api] [--public-api-id PUBLIC_API_ID] [--api-port API_PORT] [--api-key API_KEY] [--admin-key ADMIN_KEY] [--nowebui]\n                 [--multimodal-pipeline MULTIMODAL_PIPELINE] [--model_type MODEL_TYPE] [--pre_layer PRE_LAYER [PRE_LAYER ...]] [--checkpoint CHECKPOINT] [--monkey-patch] [--no_inject_fused_attention]\n                 [--cache_4bit] [--cache_8bit] [--chat-buttons]\n\nText generation web UI\n\noptions:\n  -h, --help                                     show this help message and exit\n\nBasic settings:\n  --multi-user                                   Multi-user mode. Chat histories are not saved or automatically loaded. Warning: this is likely not safe for sharing publicly.\n  --character CHARACTER                          The name of the character to load in chat mode by default.\n  --model MODEL                                  Name of the model to load by default.\n  --lora LORA [LORA ...]                         The list of LoRAs to load. If you want to load more than one LoRA, write the names separated by spaces.\n  --model-dir MODEL_DIR                          Path to directory with all the models.\n  --lora-dir LORA_DIR                            Path to directory with all the loras.\n  --model-menu                                   Show a model menu in the terminal when the web UI is first launched.\n  --settings SETTINGS                            Load the default interface settings from this yaml file. See settings-template.yaml for an example. If you create a file called settings.yaml, this\n                                                 file will be loaded by default without the need to use the --settings flag.\n  --extensions EXTENSIONS [EXTENSIONS ...]       The list of extensions to load. If you want to load more than one extension, write the names separated by spaces.\n  --verbose                                      Print the prompts to the terminal.\n  --idle-timeout IDLE_TIMEOUT                    Unload model after this many minutes of inactivity. It will be automatically reloaded when you try to use it again.\n\nModel loader:\n  --loader LOADER                                Choose the model loader manually, otherwise, it will get autodetected. Valid options: Transformers, llama.cpp, llamacpp_HF, ExLlamav2_HF, ExLlamav2,\n                                                 AutoGPTQ.\n\nTransformers/Accelerate:\n  --cpu                                          Use the CPU to generate text. Warning: Training on CPU is extremely slow.\n  --auto-devices                                 Automatically split the model across the available GPU(s) and CPU.\n  --gpu-memory GPU_MEMORY [GPU_MEMORY ...]       Maximum GPU memory in GiB to be allocated per GPU. Example: --gpu-memory 10 for a single GPU, --gpu-memory 10 5 for two GPUs. You can also set values\n                                                 in MiB like --gpu-memory 3500MiB.\n  --cpu-memory CPU_MEMORY                        Maximum CPU memory in GiB to allocate for offloaded weights. Same as above.\n  --disk                                         If the model is too large for your GPU(s) and CPU combined, send the remaining layers to the disk.\n  --disk-cache-dir DISK_CACHE_DIR                Directory to save the disk cache to. Defaults to \"cache\".\n  --load-in-8bit                                 Load the model with 8-bit precision (using bitsandbytes).\n  --bf16                                         Load the model with bfloat16 precision. Requires NVIDIA Ampere GPU.\n  --no-cache                                     Set use_cache to False while generating text. This reduces VRAM usage slightly, but it comes at a performance cost.\n  --trust-remote-code                            Set trust_remote_code=True while loading the model. Necessary for some models.\n  --force-safetensors                            Set use_safetensors=True while loading the model. This prevents arbitrary code execution.\n  --no_use_fast                                  Set use_fast=False while loading the tokenizer (it's True by default). Use this if you have any problems related to use_fast.\n  --use_flash_attention_2                        Set use_flash_attention_2=True while loading the model.\n  --use_eager_attention                          Set attn_implementation= eager while loading the model.\n\nbitsandbytes 4-bit:\n  --load-in-4bit                                 Load the model with 4-bit precision (using bitsandbytes).\n  --use_double_quant                             use_double_quant for 4-bit.\n  --compute_dtype COMPUTE_DTYPE                  compute dtype for 4-bit. Valid options: bfloat16, float16, float32.\n  --quant_type QUANT_TYPE                        quant_type for 4-bit. Valid options: nf4, fp4.\n\nllama.cpp:\n  --flash-attn                                   Use flash-attention.\n  --tensorcores                                  NVIDIA only: use llama-cpp-python compiled with tensor cores support. This may increase performance on newer cards.\n  --n_ctx N_CTX                                  Size of the prompt context.\n  --threads THREADS                              Number of threads to use.\n  --threads-batch THREADS_BATCH                  Number of threads to use for batches/prompt processing.\n  --no_mul_mat_q                                 Disable the mulmat kernels.\n  --n_batch N_BATCH                              Maximum number of prompt tokens to batch together when calling llama_eval.\n  --no-mmap                                      Prevent mmap from being used.\n  --mlock                                        Force the system to keep the model in RAM.\n  --n-gpu-layers N_GPU_LAYERS                    Number of layers to offload to the GPU.\n  --tensor_split TENSOR_SPLIT                    Split the model across multiple GPUs. Comma-separated list of proportions. Example: 60,40.\n  --numa                                         Activate NUMA task allocation for llama.cpp.\n  --logits_all                                   Needs to be set for perplexity evaluation to work. Otherwise, ignore it, as it makes prompt processing slower.\n  --no_offload_kqv                               Do not offload the K, Q, V to the GPU. This saves VRAM but reduces the performance.\n  --cache-capacity CACHE_CAPACITY                Maximum cache capacity (llama-cpp-python). Examples: 2000MiB, 2GiB. When provided without units, bytes will be assumed.\n  --row_split                                    Split the model by rows across GPUs. This may improve multi-gpu performance.\n  --streaming-llm                                Activate StreamingLLM to avoid re-evaluating the entire prompt when old messages are removed.\n  --attention-sink-size ATTENTION_SINK_SIZE      StreamingLLM: number of sink tokens. Only used if the trimmed prompt does not share a prefix with the old prompt.\n  --tokenizer-dir TOKENIZER_DIR                  Load the tokenizer from this folder. Meant to be used with llamacpp_HF through the command-line.\n\nExLlamaV2:\n  --gpu-split GPU_SPLIT                          Comma-separated list of VRAM (in GB) to use per GPU device for model layers. Example: 20,7,7.\n  --autosplit                                    Autosplit the model tensors across the available GPUs. This causes --gpu-split to be ignored.\n  --max_seq_len MAX_SEQ_LEN                      Maximum sequence length.\n  --cfg-cache                                    ExLlamav2_HF: Create an additional cache for CFG negative prompts. Necessary to use CFG with that loader.\n  --no_flash_attn                                Force flash-attention to not be used.\n  --no_xformers                                  Force xformers to not be used.\n  --no_sdpa                                      Force Torch SDPA to not be used.\n  --num_experts_per_token NUM_EXPERTS_PER_TOKEN  Number of experts to use for generation. Applies to MoE models like Mixtral.\n  --enable_tp                                    Enable Tensor Parallelism (TP) in ExLlamaV2.\n\nAutoGPTQ:\n  --triton                                       Use triton.\n  --no_inject_fused_mlp                          Triton mode only: disable the use of fused MLP, which will use less VRAM at the cost of slower inference.\n  --no_use_cuda_fp16                             This can make models faster on some systems.\n  --desc_act                                     For models that do not have a quantize_config.json, this parameter is used to define whether to set desc_act or not in BaseQuantizeConfig.\n  --disable_exllama                              Disable ExLlama kernel, which can improve inference speed on some systems.\n  --disable_exllamav2                            Disable ExLlamav2 kernel.\n  --wbits WBITS                                  Load a pre-quantized model with specified precision in bits. 2, 3, 4 and 8 are supported.\n  --groupsize GROUPSIZE                          Group size.\n\nHQQ:\n  --hqq-backend HQQ_BACKEND                      Backend for the HQQ loader. Valid options: PYTORCH, PYTORCH_COMPILE, ATEN.\n\nTensorRT-LLM:\n  --cpp-runner                                   Use the ModelRunnerCpp runner, which is faster than the default ModelRunner but doesn't support streaming yet.\n\nCache:\n  --cache_type CACHE_TYPE                        KV cache type; valid options: llama.cpp - fp16, q8_0, q4_0; ExLlamaV2 - fp16, fp8, q8, q6, q4.\n\nDeepSpeed:\n  --deepspeed                                    Enable the use of DeepSpeed ZeRO-3 for inference via the Transformers integration.\n  --nvme-offload-dir NVME_OFFLOAD_DIR            DeepSpeed: Directory to use for ZeRO-3 NVME offloading.\n  --local_rank LOCAL_RANK                        DeepSpeed: Optional argument for distributed setups.\n\nRoPE:\n  --alpha_value ALPHA_VALUE                      Positional embeddings alpha factor for NTK RoPE scaling. Use either this or compress_pos_emb, not both.\n  --rope_freq_base ROPE_FREQ_BASE                If greater than 0, will be used instead of alpha_value. Those two are related by rope_freq_base = 10000 * alpha_value ^ (64 / 63).\n  --compress_pos_emb COMPRESS_POS_EMB            Positional embeddings compression factor. Should be set to (context length) / (model's original context length). Equal to 1/rope_freq_scale.\n\nGradio:\n  --listen                                       Make the web UI reachable from your local network.\n  --listen-port LISTEN_PORT                      The listening port that the server will use.\n  --listen-host LISTEN_HOST                      The hostname that the server will use.\n  --share                                        Create a public URL. This is useful for running the web UI on Google Colab or similar.\n  --auto-launch                                  Open the web UI in the default browser upon launch.\n  --gradio-auth GRADIO_AUTH                      Set Gradio authentication password in the format \"username:password\". Multiple credentials can also be supplied with \"u1:p1,u2:p2,u3:p3\".\n  --gradio-auth-path GRADIO_AUTH_PATH            Set the Gradio authentication file path. The file should contain one or more user:password pairs in the same format as above.\n  --ssl-keyfile SSL_KEYFILE                      The path to the SSL certificate key file.\n  --ssl-certfile SSL_CERTFILE                    The path to the SSL certificate cert file.\n  --subpath SUBPATH                              Customize the subpath for gradio, use with reverse proxy\n  --old-colors                                   Use the legacy Gradio colors, before the December/2024 update.\n\nAPI:\n  --api                                          Enable the API extension.\n  --public-api                                   Create a public URL for the API using Cloudfare.\n  --public-api-id PUBLIC_API_ID                  Tunnel ID for named Cloudflare Tunnel. Use together with public-api option.\n  --api-port API_PORT                            The listening port for the API.\n  --api-key API_KEY                              API authentication key.\n  --admin-key ADMIN_KEY                          API authentication key for admin tasks like loading and unloading models. If not set, will be the same as --api-key.\n  --nowebui                                      Do not launch the Gradio UI. Useful for launching the API in standalone mode.\n\nMultimodal:\n  --multimodal-pipeline MULTIMODAL_PIPELINE      The multimodal pipeline to use. Examples: llava-7b, llava-13b.\n```\n\n</details>\n\n## Documentation\n\nhttps://github.com/oobabooga/text-generation-webui/wiki\n\n## Downloading models\n\nModels should be placed in the folder `text-generation-webui/models`. They are usually downloaded from [Hugging Face](https://huggingface.co/models?pipeline_tag=text-generation&sort=downloads).\n\n* GGUF models are a single file and should be placed directly into `models`. Example:\n\n```\ntext-generation-webui\n└── models\n    └── llama-2-13b-chat.Q4_K_M.gguf\n```\n\n* The remaining model types (like 16-bit transformers models and GPTQ models) are made of several files and must be placed in a subfolder. Example:\n\n```\ntext-generation-webui\n├── models\n│   ├── lmsys_vicuna-33b-v1.3\n│   │   ├── config.json\n│   │   ├── generation_config.json\n│   │   ├── pytorch_model-00001-of-00007.bin\n│   │   ├── pytorch_model-00002-of-00007.bin\n│   │   ├── pytorch_model-00003-of-00007.bin\n│   │   ├── pytorch_model-00004-of-00007.bin\n│   │   ├── pytorch_model-00005-of-00007.bin\n│   │   ├── pytorch_model-00006-of-00007.bin\n│   │   ├── pytorch_model-00007-of-00007.bin\n│   │   ├── pytorch_model.bin.index.json\n│   │   ├── special_tokens_map.json\n│   │   ├── tokenizer_config.json\n│   │   └── tokenizer.model\n```\n\nIn both cases, you can use the \"Model\" tab of the UI to download the model from Hugging Face automatically. It is also possible to download it via the command-line with \n\n```\npython download-model.py organization/model\n```\n\nRun `python download-model.py --help` to see all the options.\n\n## Google Colab notebook\n\nhttps://colab.research.google.com/github/oobabooga/text-generation-webui/blob/main/Colab-TextGen-GPU.ipynb\n\n## Community\n\n* Subreddit: https://www.reddit.com/r/Oobabooga/\n* Discord: https://discord.gg/jwZCF2dPQN\n\n## Acknowledgment\n\nIn August 2023, [Andreessen Horowitz](https://a16z.com/) (a16z) provided a generous grant to encourage and support my independent work on this project. I am **extremely** grateful for their trust and recognition.\n"
        },
        {
          "name": "characters",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmd_linux.sh",
          "type": "blob",
          "size": 0.71,
          "content": "#!/usr/bin/env bash\n\ncd \"$(dirname \"${BASH_SOURCE[0]}\")\"\n\nif [[ \"$(pwd)\" =~ \" \" ]]; then echo This script relies on Miniconda which can not be silently installed under a path with spaces. && exit; fi\n\n# deactivate existing conda envs as needed to avoid conflicts\n{ conda deactivate && conda deactivate && conda deactivate; } 2> /dev/null\n\n# config\nCONDA_ROOT_PREFIX=\"$(pwd)/installer_files/conda\"\nINSTALL_ENV_DIR=\"$(pwd)/installer_files/env\"\n\n# environment isolation\nexport PYTHONNOUSERSITE=1\nunset PYTHONPATH\nunset PYTHONHOME\nexport CUDA_PATH=\"$INSTALL_ENV_DIR\"\nexport CUDA_HOME=\"$CUDA_PATH\"\n\n# activate env\nbash --init-file <(echo \"source \\\"$CONDA_ROOT_PREFIX/etc/profile.d/conda.sh\\\" && conda activate \\\"$INSTALL_ENV_DIR\\\"\")\n"
        },
        {
          "name": "cmd_macos.sh",
          "type": "blob",
          "size": 0.68,
          "content": "#!/bin/bash\n\ncd \"$(dirname \"${BASH_SOURCE[0]}\")\"\n\nif [[ \"$(pwd)\" =~ \" \" ]]; then echo This script relies on Miniconda which can not be silently installed under a path with spaces. && exit; fi\n\n# deactivate existing conda envs as needed to avoid conflicts\n{ conda deactivate && conda deactivate && conda deactivate; } 2> /dev/null\n\n# config\nCONDA_ROOT_PREFIX=\"$(pwd)/installer_files/conda\"\nINSTALL_ENV_DIR=\"$(pwd)/installer_files/env\"\n\n# environment isolation\nexport PYTHONNOUSERSITE=1\nunset PYTHONPATH\nunset PYTHONHOME\nexport CUDA_PATH=\"$INSTALL_ENV_DIR\"\nexport CUDA_HOME=\"$CUDA_PATH\"\n\n# activate env\nsource $CONDA_ROOT_PREFIX/etc/profile.d/conda.sh\nconda activate $INSTALL_ENV_DIR\nexec bash --norc\n"
        },
        {
          "name": "cmd_windows.bat",
          "type": "blob",
          "size": 0.92,
          "content": "@echo off\n\ncd /D \"%~dp0\"\n\nset PATH=%PATH%;%SystemRoot%\\system32\n\necho \"%CD%\"| findstr /C:\" \" >nul && echo This script relies on Miniconda which can not be silently installed under a path with spaces. && goto end\n\n@rem fix failed install when installing to a separate drive\nset TMP=%cd%\\installer_files\nset TEMP=%cd%\\installer_files\n\n@rem deactivate existing conda envs as needed to avoid conflicts\n(call conda deactivate && call conda deactivate && call conda deactivate) 2>nul\n\n@rem config\nset CONDA_ROOT_PREFIX=%cd%\\installer_files\\conda\nset INSTALL_ENV_DIR=%cd%\\installer_files\\env\n\n@rem environment isolation\nset PYTHONNOUSERSITE=1\nset PYTHONPATH=\nset PYTHONHOME=\nset \"CUDA_PATH=%INSTALL_ENV_DIR%\"\nset \"CUDA_HOME=%CUDA_PATH%\"\n\n@rem activate installer env\ncall \"%CONDA_ROOT_PREFIX%\\condabin\\conda.bat\" activate \"%INSTALL_ENV_DIR%\" || ( echo. && echo Miniconda hook not found. && goto end )\n\n@rem enter commands\ncmd /k \"%*\"\n\n:end\npause\n"
        },
        {
          "name": "cmd_wsl.bat",
          "type": "blob",
          "size": 0.23,
          "content": "@echo off\n\ncd /D \"%~dp0\"\n\nset PATH=%PATH%;%SystemRoot%\\system32\n\n@rem sed -i 's/\\x0D$//' ./wsl.sh converts newlines to unix format in the wsl script\ncall wsl -e bash -lic \"sed -i 's/\\x0D$//' ./wsl.sh; source ./wsl.sh cmd\"\n\n:end\npause\n"
        },
        {
          "name": "convert-to-safetensors.py",
          "type": "blob",
          "size": 1.65,
          "content": "'''\n\nConverts a transformers model to safetensors format and shards it.\n\nThis makes it faster to load (because of safetensors) and lowers its RAM usage\nwhile loading (because of sharding).\n\nBased on the original script by 81300:\n\nhttps://gist.github.com/81300/fe5b08bff1cba45296a829b9d6b0f303\n\n'''\n\nimport argparse\nfrom pathlib import Path\n\nimport torch\nfrom transformers import AutoModelForCausalLM, AutoTokenizer\n\nparser = argparse.ArgumentParser(formatter_class=lambda prog: argparse.HelpFormatter(prog, max_help_position=54))\nparser.add_argument('MODEL', type=str, default=None, nargs='?', help=\"Path to the input model.\")\nparser.add_argument('--output', type=str, default=None, help='Path to the output folder (default: models/{model_name}_safetensors).')\nparser.add_argument(\"--max-shard-size\", type=str, default=\"2GB\", help=\"Maximum size of a shard in GB or MB (default: %(default)s).\")\nparser.add_argument('--bf16', action='store_true', help='Load the model with bfloat16 precision. Requires NVIDIA Ampere GPU.')\nargs = parser.parse_args()\n\nif __name__ == '__main__':\n    path = Path(args.MODEL)\n    model_name = path.name\n\n    print(f\"Loading {model_name}...\")\n    model = AutoModelForCausalLM.from_pretrained(path, low_cpu_mem_usage=True, torch_dtype=torch.bfloat16 if args.bf16 else torch.float16)\n    tokenizer = AutoTokenizer.from_pretrained(path)\n\n    out_folder = args.output or Path(f\"models/{model_name}_safetensors\")\n    print(f\"Saving the converted model to {out_folder} with a maximum shard size of {args.max_shard_size}...\")\n    model.save_pretrained(out_folder, max_shard_size=args.max_shard_size, safe_serialization=True)\n    tokenizer.save_pretrained(out_folder)\n"
        },
        {
          "name": "css",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "download-model.py",
          "type": "blob",
          "size": 14.79,
          "content": "'''\nDownloads models from Hugging Face to models/username_modelname.\n\nExample:\npython download-model.py facebook/opt-1.3b\n\n'''\n\nimport argparse\nimport base64\nimport datetime\nimport hashlib\nimport json\nimport os\nimport re\nimport sys\nfrom pathlib import Path\nfrom time import sleep\n\nimport requests\nimport tqdm\nfrom requests.adapters import HTTPAdapter\nfrom requests.exceptions import ConnectionError, RequestException, Timeout\nfrom tqdm.contrib.concurrent import thread_map\n\nbase = os.environ.get(\"HF_ENDPOINT\") or \"https://huggingface.co\"\n\n\nclass ModelDownloader:\n    def __init__(self, max_retries=5):\n        self.max_retries = max_retries\n        self.session = self.get_session()\n\n    def get_session(self):\n        session = requests.Session()\n        if self.max_retries:\n            session.mount('https://cdn-lfs.huggingface.co', HTTPAdapter(max_retries=self.max_retries))\n            session.mount('https://huggingface.co', HTTPAdapter(max_retries=self.max_retries))\n\n        if os.getenv('HF_USER') is not None and os.getenv('HF_PASS') is not None:\n            session.auth = (os.getenv('HF_USER'), os.getenv('HF_PASS'))\n\n        try:\n            from huggingface_hub import get_token\n            token = get_token()\n        except ImportError:\n            token = os.getenv(\"HF_TOKEN\")\n\n        if token is not None:\n            session.headers = {'authorization': f'Bearer {token}'}\n\n        return session\n\n    def sanitize_model_and_branch_names(self, model, branch):\n        if model[-1] == '/':\n            model = model[:-1]\n\n        if model.startswith(base + '/'):\n            model = model[len(base) + 1:]\n\n        model_parts = model.split(\":\")\n        model = model_parts[0] if len(model_parts) > 0 else model\n        branch = model_parts[1] if len(model_parts) > 1 else branch\n\n        if branch is None:\n            branch = \"main\"\n        else:\n            pattern = re.compile(r\"^[a-zA-Z0-9._-]+$\")\n            if not pattern.match(branch):\n                raise ValueError(\n                    \"Invalid branch name. Only alphanumeric characters, period, underscore and dash are allowed.\")\n\n        return model, branch\n\n    def get_download_links_from_huggingface(self, model, branch, text_only=False, specific_file=None, exclude_pattern=None):\n        session = self.session\n        page = f\"/api/models/{model}/tree/{branch}\"\n        cursor = b\"\"\n\n        links = []\n        sha256 = []\n        classifications = []\n        has_pytorch = False\n        has_pt = False\n        has_gguf = False\n        has_safetensors = False\n        is_lora = False\n        while True:\n            url = f\"{base}{page}\" + (f\"?cursor={cursor.decode()}\" if cursor else \"\")\n            r = session.get(url, timeout=10)\n            r.raise_for_status()\n            content = r.content\n\n            dict = json.loads(content)\n            if len(dict) == 0:\n                break\n\n            for i in range(len(dict)):\n                fname = dict[i]['path']\n                if specific_file not in [None, ''] and fname != specific_file:\n                    continue\n\n                # Exclude files matching the exclude pattern\n                if exclude_pattern is not None and re.match(exclude_pattern, fname):\n                    continue\n\n                if not is_lora and fname.endswith(('adapter_config.json', 'adapter_model.bin')):\n                    is_lora = True\n\n                is_pytorch = re.match(r\"(pytorch|adapter|gptq)_model.*\\.bin\", fname)\n                is_safetensors = re.match(r\".*\\.safetensors\", fname)\n                is_pt = re.match(r\".*\\.pt\", fname)\n                is_gguf = re.match(r\".*\\.gguf\", fname)\n                is_tiktoken = re.match(r\".*\\.tiktoken\", fname)\n                is_tokenizer = re.match(r\"(tokenizer|ice|spiece).*\\.model\", fname) or is_tiktoken\n                is_text = re.match(r\".*\\.(txt|json|py|md)\", fname) or is_tokenizer\n                if any((is_pytorch, is_safetensors, is_pt, is_gguf, is_tokenizer, is_text)):\n                    if 'lfs' in dict[i]:\n                        sha256.append([fname, dict[i]['lfs']['oid']])\n\n                    if is_text:\n                        links.append(f\"{base}/{model}/resolve/{branch}/{fname}\")\n                        classifications.append('text')\n                        continue\n\n                    if not text_only:\n                        links.append(f\"{base}/{model}/resolve/{branch}/{fname}\")\n                        if is_safetensors:\n                            has_safetensors = True\n                            classifications.append('safetensors')\n                        elif is_pytorch:\n                            has_pytorch = True\n                            classifications.append('pytorch')\n                        elif is_pt:\n                            has_pt = True\n                            classifications.append('pt')\n                        elif is_gguf:\n                            has_gguf = True\n                            classifications.append('gguf')\n\n            cursor = base64.b64encode(f'{{\"file_name\":\"{dict[-1][\"path\"]}\"}}'.encode()) + b':50'\n            cursor = base64.b64encode(cursor)\n            cursor = cursor.replace(b'=', b'%3D')\n\n        # If both pytorch and safetensors are available, download safetensors only\n        # Also if GGUF and safetensors are available, download only safetensors\n        if (has_pytorch or has_pt or has_gguf) and has_safetensors:\n            has_gguf = False\n            for i in range(len(classifications) - 1, -1, -1):\n                if classifications[i] in ['pytorch', 'pt', 'gguf']:\n                    links.pop(i)\n\n        # For GGUF, try to download only the Q4_K_M if no specific file is specified.\n        if has_gguf and specific_file is None:\n            has_q4km = False\n            for i in range(len(classifications) - 1, -1, -1):\n                if 'q4_k_m' in links[i].lower():\n                    has_q4km = True\n\n            if has_q4km:\n                for i in range(len(classifications) - 1, -1, -1):\n                    if 'q4_k_m' not in links[i].lower():\n                        links.pop(i)\n            else:\n                for i in range(len(classifications) - 1, -1, -1):\n                    if links[i].lower().endswith('.gguf'):\n                        links.pop(i)\n\n        is_llamacpp = has_gguf and specific_file is not None\n        return links, sha256, is_lora, is_llamacpp\n\n    def get_output_folder(self, model, branch, is_lora, is_llamacpp=False, model_dir=None):\n        if model_dir:\n            base_folder = model_dir\n        else:\n            base_folder = 'models' if not is_lora else 'loras'\n\n        # If the model is of type GGUF, save directly in the base_folder\n        if is_llamacpp:\n            return Path(base_folder)\n\n        output_folder = f\"{'_'.join(model.split('/')[-2:])}\"\n        if branch != 'main':\n            output_folder += f'_{branch}'\n\n        output_folder = Path(base_folder) / output_folder\n        return output_folder\n\n    def get_single_file(self, url, output_folder, start_from_scratch=False):\n        filename = Path(url.rsplit('/', 1)[1])\n        output_path = output_folder / filename\n\n        max_retries = 7\n        attempt = 0\n        while attempt < max_retries:\n            attempt += 1\n            session = self.session\n            headers = {}\n            mode = 'wb'\n\n            try:\n                if output_path.exists() and not start_from_scratch:\n                    # Resume download\n                    r = session.get(url, stream=True, timeout=20)\n                    total_size = int(r.headers.get('content-length', 0))\n                    if output_path.stat().st_size >= total_size:\n                        return\n\n                    headers = {'Range': f'bytes={output_path.stat().st_size}-'}\n                    mode = 'ab'\n\n                with session.get(url, stream=True, headers=headers, timeout=30) as r:\n                    r.raise_for_status()  # If status is not 2xx, raise an error\n                    total_size = int(r.headers.get('content-length', 0))\n                    block_size = 1024 * 1024  # 1MB\n\n                    filename_str = str(filename)  # Convert PosixPath to string if necessary\n\n                    tqdm_kwargs = {\n                        'total': total_size,\n                        'unit': 'B',\n                        'unit_scale': True,\n                        'unit_divisor': 1024,\n                        'bar_format': '{desc}{percentage:3.0f}%|{bar:50}| {n_fmt}/{total_fmt} [{elapsed}<{remaining}, {rate_fmt}]',\n                        'desc': f\"{filename_str}: \"\n                    }\n\n                    if 'COLAB_GPU' in os.environ:\n                        tqdm_kwargs.update({\n                            'position': 0,\n                            'leave': True\n                        })\n\n                    with open(output_path, mode) as f:\n                        with tqdm.tqdm(**tqdm_kwargs) as t:\n                            count = 0\n                            for data in r.iter_content(block_size):\n                                f.write(data)\n                                t.update(len(data))\n                                if total_size != 0 and self.progress_bar is not None:\n                                    count += len(data)\n                                    self.progress_bar(float(count) / float(total_size), f\"{filename_str}\")\n\n                    break  # Exit loop if successful\n            except (RequestException, ConnectionError, Timeout) as e:\n                print(f\"Error downloading {filename}: {e}.\")\n                print(f\"That was attempt {attempt}/{max_retries}.\", end=' ')\n                if attempt < max_retries:\n                    print(f\"Retry begins in {2 ** attempt} seconds.\")\n                    sleep(2 ** attempt)\n                else:\n                    print(\"Failed to download after the maximum number of attempts.\")\n\n    def start_download_threads(self, file_list, output_folder, start_from_scratch=False, threads=4):\n        thread_map(lambda url: self.get_single_file(url, output_folder, start_from_scratch=start_from_scratch), file_list, max_workers=threads, disable=True)\n\n    def download_model_files(self, model, branch, links, sha256, output_folder, progress_bar=None, start_from_scratch=False, threads=4, specific_file=None, is_llamacpp=False):\n        self.progress_bar = progress_bar\n\n        # Create the folder and writing the metadata\n        output_folder.mkdir(parents=True, exist_ok=True)\n\n        if not is_llamacpp:\n            metadata = f'url: https://huggingface.co/{model}\\n' \\\n                       f'branch: {branch}\\n' \\\n                       f'download date: {datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")}\\n'\n\n            sha256_str = '\\n'.join([f'    {item[1]} {item[0]}' for item in sha256])\n            if sha256_str:\n                metadata += f'sha256sum:\\n{sha256_str}'\n\n            metadata += '\\n'\n            (output_folder / 'huggingface-metadata.txt').write_text(metadata)\n\n        if specific_file:\n            print(f\"Downloading {specific_file} to {output_folder}\")\n        else:\n            print(f\"Downloading the model to {output_folder}\")\n\n        self.start_download_threads(links, output_folder, start_from_scratch=start_from_scratch, threads=threads)\n\n    def check_model_files(self, model, branch, links, sha256, output_folder):\n        # Validate the checksums\n        validated = True\n        for i in range(len(sha256)):\n            fpath = (output_folder / sha256[i][0])\n\n            if not fpath.exists():\n                print(f\"The following file is missing: {fpath}\")\n                validated = False\n                continue\n\n            with open(output_folder / sha256[i][0], \"rb\") as f:\n                bytes = f.read()\n                file_hash = hashlib.sha256(bytes).hexdigest()\n                if file_hash != sha256[i][1]:\n                    print(f'Checksum failed: {sha256[i][0]}  {sha256[i][1]}')\n                    validated = False\n                else:\n                    print(f'Checksum validated: {sha256[i][0]}  {sha256[i][1]}')\n\n        if validated:\n            print('[+] Validated checksums of all model files!')\n        else:\n            print('[-] Invalid checksums. Rerun download-model.py with the --clean flag.')\n\n\nif __name__ == '__main__':\n\n    parser = argparse.ArgumentParser()\n    parser.add_argument('MODEL', type=str, default=None, nargs='?')\n    parser.add_argument('--branch', type=str, default='main', help='Name of the Git branch to download from.')\n    parser.add_argument('--threads', type=int, default=4, help='Number of files to download simultaneously.')\n    parser.add_argument('--text-only', action='store_true', help='Only download text files (txt/json).')\n    parser.add_argument('--specific-file', type=str, default=None, help='Name of the specific file to download (if not provided, downloads all).')\n    parser.add_argument('--exclude-pattern', type=str, default=None, help='Regex pattern to exclude files from download.')\n    parser.add_argument('--output', type=str, default=None, help='Save the model files to this folder.')\n    parser.add_argument('--model-dir', type=str, default=None, help='Save the model files to a subfolder of this folder instead of the default one (text-generation-webui/models).')\n    parser.add_argument('--clean', action='store_true', help='Does not resume the previous download.')\n    parser.add_argument('--check', action='store_true', help='Validates the checksums of model files.')\n    parser.add_argument('--max-retries', type=int, default=5, help='Max retries count when get error in download time.')\n    args = parser.parse_args()\n\n    branch = args.branch\n    model = args.MODEL\n    specific_file = args.specific_file\n    exclude_pattern = args.exclude_pattern\n\n    if model is None:\n        print(\"Error: Please specify the model you'd like to download (e.g. 'python download-model.py facebook/opt-1.3b').\")\n        sys.exit()\n\n    downloader = ModelDownloader(max_retries=args.max_retries)\n    # Clean up the model/branch names\n    try:\n        model, branch = downloader.sanitize_model_and_branch_names(model, branch)\n    except ValueError as err_branch:\n        print(f\"Error: {err_branch}\")\n        sys.exit()\n\n    # Get the download links from Hugging Face\n    links, sha256, is_lora, is_llamacpp = downloader.get_download_links_from_huggingface(\n        model, branch, text_only=args.text_only, specific_file=specific_file, exclude_pattern=exclude_pattern\n    )\n\n    # Get the output folder\n    if args.output:\n        output_folder = Path(args.output)\n    else:\n        output_folder = downloader.get_output_folder(model, branch, is_lora, is_llamacpp=is_llamacpp, model_dir=args.model_dir)\n\n    if args.check:\n        # Check previously downloaded files\n        downloader.check_model_files(model, branch, links, sha256, output_folder)\n    else:\n        # Download files\n        downloader.download_model_files(\n            model, branch, links, sha256, output_folder,\n            specific_file=specific_file, threads=args.threads, is_llamacpp=is_llamacpp\n        )\n"
        },
        {
          "name": "extensions",
          "type": "tree",
          "content": null
        },
        {
          "name": "grammars",
          "type": "tree",
          "content": null
        },
        {
          "name": "instruction-templates",
          "type": "tree",
          "content": null
        },
        {
          "name": "js",
          "type": "tree",
          "content": null
        },
        {
          "name": "loras",
          "type": "tree",
          "content": null
        },
        {
          "name": "models",
          "type": "tree",
          "content": null
        },
        {
          "name": "modules",
          "type": "tree",
          "content": null
        },
        {
          "name": "one_click.py",
          "type": "blob",
          "size": 19.08,
          "content": "import argparse\nimport glob\nimport hashlib\nimport os\nimport platform\nimport re\nimport signal\nimport site\nimport subprocess\nimport sys\n\n# Remove the '# ' from the following lines as needed for your AMD GPU on Linux\n# os.environ[\"ROCM_PATH\"] = '/opt/rocm'\n# os.environ[\"HSA_OVERRIDE_GFX_VERSION\"] = '10.3.0'\n# os.environ[\"HCC_AMDGPU_TARGET\"] = 'gfx1030'\n\n\n# Define the required PyTorch version\nTORCH_VERSION = \"2.4.1\"\nTORCHVISION_VERSION = \"0.19.1\"\nTORCHAUDIO_VERSION = \"2.4.1\"\n\n# Environment\nscript_dir = os.getcwd()\nconda_env_path = os.path.join(script_dir, \"installer_files\", \"env\")\n\n# Command-line flags\ncmd_flags_path = os.path.join(script_dir, \"CMD_FLAGS.txt\")\nif os.path.exists(cmd_flags_path):\n    with open(cmd_flags_path, 'r') as f:\n        CMD_FLAGS = ' '.join(line.strip().rstrip('\\\\').strip() for line in f if line.strip().rstrip('\\\\').strip() and not line.strip().startswith('#'))\nelse:\n    CMD_FLAGS = ''\n\nflags = f\"{' '.join([flag for flag in sys.argv[1:] if flag != '--update-wizard'])} {CMD_FLAGS}\"\n\n\ndef signal_handler(sig, frame):\n    sys.exit(0)\n\n\nsignal.signal(signal.SIGINT, signal_handler)\n\n\ndef is_linux():\n    return sys.platform.startswith(\"linux\")\n\n\ndef is_windows():\n    return sys.platform.startswith(\"win\")\n\n\ndef is_macos():\n    return sys.platform.startswith(\"darwin\")\n\n\ndef is_x86_64():\n    return platform.machine() == \"x86_64\"\n\n\ndef cpu_has_avx2():\n    try:\n        import cpuinfo\n\n        info = cpuinfo.get_cpu_info()\n        if 'avx2' in info['flags']:\n            return True\n        else:\n            return False\n    except:\n        return True\n\n\ndef cpu_has_amx():\n    try:\n        import cpuinfo\n\n        info = cpuinfo.get_cpu_info()\n        if 'amx' in info['flags']:\n            return True\n        else:\n            return False\n    except:\n        return True\n\n\ndef torch_version():\n    site_packages_path = None\n    for sitedir in site.getsitepackages():\n        if \"site-packages\" in sitedir and conda_env_path in sitedir:\n            site_packages_path = sitedir\n            break\n\n    if site_packages_path:\n        torch_version_file = open(os.path.join(site_packages_path, 'torch', 'version.py')).read().splitlines()\n        torver = [line for line in torch_version_file if line.startswith('__version__')][0].split('__version__ = ')[1].strip(\"'\")\n    else:\n        from torch import __version__ as torver\n\n    return torver\n\n\ndef update_pytorch():\n    print_big_message(\"Checking for PyTorch updates\")\n\n    torver = torch_version()\n    is_cuda = '+cu' in torver\n    is_cuda118 = '+cu118' in torver  # 2.1.0+cu118\n    is_rocm = '+rocm' in torver  # 2.0.1+rocm5.4.2\n    is_intel = '+cxx11' in torver  # 2.0.1a0+cxx11.abi\n    is_cpu = '+cpu' in torver  # 2.0.1+cpu\n\n    install_pytorch = f\"python -m pip install --upgrade torch=={TORCH_VERSION} torchvision=={TORCHVISION_VERSION} torchaudio=={TORCHAUDIO_VERSION} \"\n\n    if is_cuda118:\n        install_pytorch += \"--index-url https://download.pytorch.org/whl/cu118\"\n    elif is_cuda:\n        install_pytorch += \"--index-url https://download.pytorch.org/whl/cu121\"\n    elif is_rocm:\n        install_pytorch += \"--index-url https://download.pytorch.org/whl/rocm6.1\"\n    elif is_cpu:\n        install_pytorch += \"--index-url https://download.pytorch.org/whl/cpu\"\n    elif is_intel:\n        if is_linux():\n            install_pytorch = \"python -m pip install --upgrade torch==2.1.0a0 torchvision==0.16.0a0 torchaudio==2.1.0a0 intel-extension-for-pytorch==2.1.10+xpu --extra-index-url https://pytorch-extension.intel.com/release-whl/stable/xpu/us/\"\n        else:\n            install_pytorch = \"python -m pip install --upgrade torch==2.1.0a0 torchvision==0.16.0a0 torchaudio==2.1.0a0 intel-extension-for-pytorch==2.1.10 --extra-index-url https://pytorch-extension.intel.com/release-whl/stable/xpu/us/\"\n\n    run_cmd(f\"{install_pytorch}\", assert_success=True, environment=True)\n\n\ndef is_installed():\n    site_packages_path = None\n    for sitedir in site.getsitepackages():\n        if \"site-packages\" in sitedir and conda_env_path in sitedir:\n            site_packages_path = sitedir\n            break\n\n    if site_packages_path:\n        return os.path.isfile(os.path.join(site_packages_path, 'torch', '__init__.py'))\n    else:\n        return os.path.isdir(conda_env_path)\n\n\ndef check_env():\n    # If we have access to conda, we are probably in an environment\n    conda_exist = run_cmd(\"conda\", environment=True, capture_output=True).returncode == 0\n    if not conda_exist:\n        print(\"Conda is not installed. Exiting...\")\n        sys.exit(1)\n\n    # Ensure this is a new environment and not the base environment\n    if os.environ[\"CONDA_DEFAULT_ENV\"] == \"base\":\n        print(\"Create an environment for this project and activate it. Exiting...\")\n        sys.exit(1)\n\n\ndef clear_cache():\n    run_cmd(\"conda clean -a -y\", environment=True)\n    run_cmd(\"python -m pip cache purge\", environment=True)\n\n\ndef print_big_message(message):\n    message = message.strip()\n    lines = message.split('\\n')\n    print(\"\\n\\n*******************************************************************\")\n    for line in lines:\n        print(\"*\", line)\n\n    print(\"*******************************************************************\\n\\n\")\n\n\ndef calculate_file_hash(file_path):\n    p = os.path.join(script_dir, file_path)\n    if os.path.isfile(p):\n        with open(p, 'rb') as f:\n            return hashlib.sha256(f.read()).hexdigest()\n    else:\n        return ''\n\n\ndef run_cmd(cmd, assert_success=False, environment=False, capture_output=False, env=None):\n    # Use the conda environment\n    if environment:\n        if is_windows():\n            conda_bat_path = os.path.join(script_dir, \"installer_files\", \"conda\", \"condabin\", \"conda.bat\")\n            cmd = f'\"{conda_bat_path}\" activate \"{conda_env_path}\" >nul && {cmd}'\n        else:\n            conda_sh_path = os.path.join(script_dir, \"installer_files\", \"conda\", \"etc\", \"profile.d\", \"conda.sh\")\n            cmd = f'. \"{conda_sh_path}\" && conda activate \"{conda_env_path}\" && {cmd}'\n\n    # Set executable to None for Windows, bash for everything else\n    executable = None if is_windows() else 'bash'\n\n    # Run shell commands\n    result = subprocess.run(cmd, shell=True, capture_output=capture_output, env=env, executable=executable)\n\n    # Assert the command ran successfully\n    if assert_success and result.returncode != 0:\n        print(f\"Command '{cmd}' failed with exit status code '{str(result.returncode)}'.\\n\\nExiting now.\\nTry running the start/update script again.\")\n        sys.exit(1)\n\n    return result\n\n\ndef generate_alphabetic_sequence(index):\n    result = ''\n    while index >= 0:\n        index, remainder = divmod(index, 26)\n        result = chr(ord('A') + remainder) + result\n        index -= 1\n\n    return result\n\n\ndef get_user_choice(question, options_dict):\n    print()\n    print(question)\n    print()\n\n    for key, value in options_dict.items():\n        print(f\"{key}) {value}\")\n\n    print()\n\n    choice = input(\"Input> \").upper()\n    while choice not in options_dict.keys():\n        print(\"Invalid choice. Please try again.\")\n        choice = input(\"Input> \").upper()\n\n    return choice\n\n\ndef install_webui():\n    # Ask the user for the GPU vendor\n    if \"GPU_CHOICE\" in os.environ:\n        choice = os.environ[\"GPU_CHOICE\"].upper()\n        print_big_message(f\"Selected GPU choice \\\"{choice}\\\" based on the GPU_CHOICE environment variable.\")\n\n        # Warn about changed meanings and handle old NVIDIA choice\n        if choice == \"B\":\n            print_big_message(\"Warning: GPU_CHOICE='B' now means 'NVIDIA (CUDA 11.8)' in the new version.\")\n        elif choice == \"C\":\n            print_big_message(\"Warning: GPU_CHOICE='C' now means 'AMD' in the new version.\")\n        elif choice == \"D\":\n            print_big_message(\"Warning: GPU_CHOICE='D' now means 'Apple M Series' in the new version.\")\n        elif choice == \"A\" and \"USE_CUDA118\" in os.environ:\n            choice = \"B\" if os.environ.get(\"USE_CUDA118\", \"\").lower() in (\"yes\", \"y\", \"true\", \"1\", \"t\", \"on\") else \"A\"\n    else:\n        choice = get_user_choice(\n            \"What is your GPU?\",\n            {\n                'A': 'NVIDIA - CUDA 12.1 (recommended)',\n                'B': 'NVIDIA - CUDA 11.8 (legacy GPUs)',\n                'C': 'AMD - Linux/macOS only, requires ROCm 6.1',\n                'D': 'Apple M Series',\n                'E': 'Intel Arc (beta)',\n                'N': 'CPU mode'\n            },\n        )\n\n    # Convert choices to GPU names for compatibility\n    gpu_choice_to_name = {\n        \"A\": \"NVIDIA\",\n        \"B\": \"NVIDIA\",\n        \"C\": \"AMD\",\n        \"D\": \"APPLE\",\n        \"E\": \"INTEL\",\n        \"N\": \"NONE\"\n    }\n\n    selected_gpu = gpu_choice_to_name[choice]\n    use_cuda118 = (choice == \"B\")  # CUDA version is now determined by menu choice\n\n    # Write a flag to CMD_FLAGS.txt for CPU mode\n    if selected_gpu == \"NONE\":\n        with open(cmd_flags_path, 'r+') as cmd_flags_file:\n            if \"--cpu\" not in cmd_flags_file.read():\n                print_big_message(\"Adding the --cpu flag to CMD_FLAGS.txt.\")\n                cmd_flags_file.write(\"\\n--cpu\\n\")\n\n    # Handle CUDA version display\n    elif any((is_windows(), is_linux())) and selected_gpu == \"NVIDIA\":\n        if use_cuda118:\n            print(\"CUDA: 11.8\")\n        else:\n            print(\"CUDA: 12.1\")\n\n    # No PyTorch for AMD on Windows (?)\n    elif is_windows() and selected_gpu == \"AMD\":\n        print(\"PyTorch setup on Windows is not implemented yet. Exiting...\")\n        sys.exit(1)\n\n    # Find the Pytorch installation command\n    install_pytorch = f\"python -m pip install torch=={TORCH_VERSION} torchvision=={TORCHVISION_VERSION} torchaudio=={TORCHAUDIO_VERSION} \"\n\n    if selected_gpu == \"NVIDIA\":\n        if use_cuda118 == 'Y':\n            install_pytorch += \"--index-url https://download.pytorch.org/whl/cu118\"\n        else:\n            install_pytorch += \"--index-url https://download.pytorch.org/whl/cu121\"\n    elif selected_gpu == \"AMD\":\n        install_pytorch += \"--index-url https://download.pytorch.org/whl/rocm6.1\"\n    elif selected_gpu in [\"APPLE\", \"NONE\"]:\n        install_pytorch += \"--index-url https://download.pytorch.org/whl/cpu\"\n    elif selected_gpu == \"INTEL\":\n        if is_linux():\n            install_pytorch = \"python -m pip install torch==2.1.0a0 torchvision==0.16.0a0 torchaudio==2.1.0a0 intel-extension-for-pytorch==2.1.10+xpu --extra-index-url https://pytorch-extension.intel.com/release-whl/stable/xpu/us/\"\n        else:\n            install_pytorch = \"python -m pip install torch==2.1.0a0 torchvision==0.16.0a0 torchaudio==2.1.0a0 intel-extension-for-pytorch==2.1.10 --extra-index-url https://pytorch-extension.intel.com/release-whl/stable/xpu/us/\"\n\n    # Install Git and then Pytorch\n    print_big_message(\"Installing PyTorch.\")\n    run_cmd(f\"conda install -y -k ninja git && {install_pytorch} && python -m pip install py-cpuinfo==9.0.0\", assert_success=True, environment=True)\n\n    if selected_gpu == \"INTEL\":\n        # Install oneAPI dependencies via conda\n        print_big_message(\"Installing Intel oneAPI runtime libraries.\")\n        run_cmd(\"conda install -y -c https://software.repos.intel.com/python/conda/ -c conda-forge dpcpp-cpp-rt=2024.0 mkl-dpcpp=2024.0\")\n        # Install libuv required by Intel-patched torch\n        run_cmd(\"conda install -y libuv\")\n\n    # Install the webui requirements\n    update_requirements(initial_installation=True, pull=False)\n\n\ndef get_extensions_names():\n    return [foldername for foldername in os.listdir('extensions') if os.path.isfile(os.path.join('extensions', foldername, 'requirements.txt'))]\n\n\ndef install_extensions_requirements():\n    print_big_message(\"Installing extensions requirements.\\nSome of these may fail on Windows.\\nDon\\'t worry if you see error messages, as they will not affect the main program.\")\n    extensions = get_extensions_names()\n    for i, extension in enumerate(extensions):\n        print(f\"\\n\\n--- [{i + 1}/{len(extensions)}]: {extension}\\n\\n\")\n        extension_req_path = os.path.join(\"extensions\", extension, \"requirements.txt\")\n        run_cmd(f\"python -m pip install -r {extension_req_path} --upgrade\", assert_success=False, environment=True)\n\n\ndef update_requirements(initial_installation=False, pull=True):\n    # Create .git directory if missing\n    if not os.path.exists(os.path.join(script_dir, \".git\")):\n        git_creation_cmd = 'git init -b main && git remote add origin https://github.com/oobabooga/text-generation-webui && git fetch && git symbolic-ref refs/remotes/origin/HEAD refs/remotes/origin/main && git reset --hard origin/main && git branch --set-upstream-to=origin/main'\n        run_cmd(git_creation_cmd, environment=True, assert_success=True)\n\n    if pull:\n        print_big_message(\"Updating the local copy of the repository with \\\"git pull\\\"\")\n\n        files_to_check = [\n            'start_linux.sh', 'start_macos.sh', 'start_windows.bat', 'start_wsl.bat',\n            'update_wizard_linux.sh', 'update_wizard_macos.sh', 'update_wizard_windows.bat', 'update_wizard_wsl.bat',\n            'one_click.py'\n        ]\n\n        before_pull_hashes = {file_name: calculate_file_hash(file_name) for file_name in files_to_check}\n        run_cmd(\"git pull --autostash\", assert_success=True, environment=True)\n        after_pull_hashes = {file_name: calculate_file_hash(file_name) for file_name in files_to_check}\n\n        # Check for differences in installation file hashes\n        for file_name in files_to_check:\n            if before_pull_hashes[file_name] != after_pull_hashes[file_name]:\n                print_big_message(f\"File '{file_name}' was updated during 'git pull'. Please run the script again.\")\n                exit(1)\n\n    if os.environ.get(\"INSTALL_EXTENSIONS\", \"\").lower() in (\"yes\", \"y\", \"true\", \"1\", \"t\", \"on\"):\n        install_extensions_requirements()\n\n    # Update PyTorch\n    if not initial_installation:\n        update_pytorch()\n\n    # Detect the PyTorch version\n    torver = torch_version()\n    is_cuda = '+cu' in torver\n    is_cuda118 = '+cu118' in torver  # 2.1.0+cu118\n    is_rocm = '+rocm' in torver  # 2.0.1+rocm5.4.2\n    is_intel = '+cxx11' in torver  # 2.0.1a0+cxx11.abi\n    is_cpu = '+cpu' in torver  # 2.0.1+cpu\n\n    if is_rocm:\n        base_requirements = \"requirements_amd\" + (\"_noavx2\" if not cpu_has_avx2() else \"\") + \".txt\"\n    elif is_cpu or is_intel:\n        base_requirements = \"requirements_cpu_only\" + (\"_noavx2\" if not cpu_has_avx2() else \"\") + \".txt\"\n    elif is_macos():\n        base_requirements = \"requirements_apple_\" + (\"intel\" if is_x86_64() else \"silicon\") + \".txt\"\n    else:\n        base_requirements = \"requirements\" + (\"_noavx2\" if not cpu_has_avx2() else \"\") + \".txt\"\n\n    requirements_file = base_requirements\n\n    print_big_message(f\"Installing webui requirements from file: {requirements_file}\")\n    print(f\"TORCH: {torver}\\n\")\n\n    # Prepare the requirements file\n    textgen_requirements = open(requirements_file).read().splitlines()\n    if is_cuda118:\n        textgen_requirements = [\n            req.replace('+cu121', '+cu118').replace('+cu122', '+cu118')\n            for req in textgen_requirements\n            if \"autoawq\" not in req.lower()\n        ]\n\n    if is_windows() and is_cuda118:  # No flash-attention on Windows for CUDA 11\n        textgen_requirements = [req for req in textgen_requirements if 'oobabooga/flash-attention' not in req]\n\n    with open('temp_requirements.txt', 'w') as file:\n        file.write('\\n'.join(textgen_requirements))\n\n    # Workaround for git+ packages not updating properly.\n    git_requirements = [req for req in textgen_requirements if req.startswith(\"git+\")]\n    for req in git_requirements:\n        url = req.replace(\"git+\", \"\")\n        package_name = url.split(\"/\")[-1].split(\"@\")[0].rstrip(\".git\")\n        run_cmd(f\"python -m pip uninstall -y {package_name}\", environment=True)\n        print(f\"Uninstalled {package_name}\")\n\n    # Install/update the project requirements\n    run_cmd(\"python -m pip install -r temp_requirements.txt --upgrade\", assert_success=True, environment=True)\n    os.remove('temp_requirements.txt')\n\n    # Check for '+cu' or '+rocm' in version string to determine if torch uses CUDA or ROCm. Check for pytorch-cuda as well for backwards compatibility\n    if not any((is_cuda, is_rocm)) and run_cmd(\"conda list -f pytorch-cuda | grep pytorch-cuda\", environment=True, capture_output=True).returncode == 1:\n        clear_cache()\n        return\n\n    if not os.path.exists(\"repositories/\"):\n        os.mkdir(\"repositories\")\n\n    clear_cache()\n\n\ndef launch_webui():\n    run_cmd(f\"python server.py {flags}\", environment=True)\n\n\nif __name__ == \"__main__\":\n    # Verifies we are in a conda environment\n    check_env()\n\n    parser = argparse.ArgumentParser(add_help=False)\n    parser.add_argument('--update-wizard', action='store_true', help='Launch a menu with update options.')\n    args, _ = parser.parse_known_args()\n\n    if args.update_wizard:\n        while True:\n            choice = get_user_choice(\n                \"What would you like to do?\",\n                {\n                    'A': 'Update the web UI',\n                    'B': 'Install/update extensions requirements',\n                    'C': 'Revert local changes to repository files with \\\"git reset --hard\\\"',\n                    'N': 'Nothing (exit)'\n                },\n            )\n\n            if choice == 'A':\n                update_requirements()\n            elif choice == 'B':\n                choices = {'A': 'All extensions'}\n                for i, name in enumerate(get_extensions_names()):\n                    key = generate_alphabetic_sequence(i + 1)\n                    choices[key] = name\n\n                choice = get_user_choice(\"What extension?\", choices)\n\n                if choice == 'A':\n                    install_extensions_requirements()\n                else:\n                    extension_req_path = os.path.join(\"extensions\", choices[choice], \"requirements.txt\")\n                    run_cmd(f\"python -m pip install -r {extension_req_path} --upgrade\", assert_success=False, environment=True)\n\n                update_requirements(pull=False)\n            elif choice == 'C':\n                run_cmd(\"git reset --hard\", assert_success=True, environment=True)\n            elif choice == 'N':\n                sys.exit()\n    else:\n        if not is_installed():\n            install_webui()\n            os.chdir(script_dir)\n\n        if os.environ.get(\"LAUNCH_AFTER_INSTALL\", \"\").lower() in (\"no\", \"n\", \"false\", \"0\", \"f\", \"off\"):\n            print_big_message(\"Will now exit due to LAUNCH_AFTER_INSTALL.\")\n            sys.exit()\n\n        # Check if a model has been downloaded yet\n        if '--model-dir' in flags:\n            # Splits on ' ' or '=' while maintaining spaces within quotes\n            flags_list = re.split(' +(?=(?:[^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)|=', flags)\n            model_dir = [flags_list[(flags_list.index(flag) + 1)] for flag in flags_list if flag == '--model-dir'][0].strip('\"\\'')\n        else:\n            model_dir = 'models'\n\n        if len([item for item in glob.glob(f'{model_dir}/*') if not item.endswith(('.txt', '.yaml'))]) == 0:\n            print_big_message(\"You haven't downloaded any model yet.\\nOnce the web UI launches, head over to the \\\"Model\\\" tab and download one.\")\n\n        # Workaround for llama-cpp-python loading paths in CUDA env vars even if they do not exist\n        conda_path_bin = os.path.join(conda_env_path, \"bin\")\n        if not os.path.exists(conda_path_bin):\n            os.mkdir(conda_path_bin)\n\n        # Launch the webui\n        launch_webui()\n"
        },
        {
          "name": "presets",
          "type": "tree",
          "content": null
        },
        {
          "name": "prompts",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 5.01,
          "content": "accelerate==1.2.*\nbitsandbytes==0.45.*\ncolorama\ndatasets\neinops\nfastapi==0.112.4\ngradio==4.37.*\njinja2==3.1.5\nmarkdown\nnumba==0.59.*\nnumpy==1.26.*\npandas\npeft==0.12.*\nPillow>=9.5.0\npsutil\npydantic==2.8.2\npyyaml\nrequests\nrich\nsafetensors==0.5.*\nscipy\nsentencepiece\ntensorboard\ntransformers==4.47.*\ntqdm\nwandb\n\n# API\nSpeechRecognition==3.10.0\nflask_cloudflared==0.0.14\nsse-starlette==1.6.5\ntiktoken\n\n# llama-cpp-python (CPU only, AVX2)\nhttps://github.com/oobabooga/llama-cpp-python-cuBLAS-wheels/releases/download/cpu/llama_cpp_python-0.3.6+cpuavx2-cp311-cp311-linux_x86_64.whl; platform_system == \"Linux\" and platform_machine == \"x86_64\" and python_version == \"3.11\"\nhttps://github.com/oobabooga/llama-cpp-python-cuBLAS-wheels/releases/download/cpu/llama_cpp_python-0.3.6+cpuavx2-cp310-cp310-linux_x86_64.whl; platform_system == \"Linux\" and platform_machine == \"x86_64\" and python_version == \"3.10\"\nhttps://github.com/oobabooga/llama-cpp-python-cuBLAS-wheels/releases/download/cpu/llama_cpp_python-0.3.6+cpuavx2-cp311-cp311-win_amd64.whl; platform_system == \"Windows\" and python_version == \"3.11\"\nhttps://github.com/oobabooga/llama-cpp-python-cuBLAS-wheels/releases/download/cpu/llama_cpp_python-0.3.6+cpuavx2-cp310-cp310-win_amd64.whl; platform_system == \"Windows\" and python_version == \"3.10\"\n\n# llama-cpp-python (CUDA, no tensor cores)\nhttps://github.com/oobabooga/llama-cpp-python-cuBLAS-wheels/releases/download/textgen-webui/llama_cpp_python_cuda-0.3.6+cu121-cp311-cp311-win_amd64.whl; platform_system == \"Windows\" and python_version == \"3.11\"\nhttps://github.com/oobabooga/llama-cpp-python-cuBLAS-wheels/releases/download/textgen-webui/llama_cpp_python_cuda-0.3.6+cu121-cp310-cp310-win_amd64.whl; platform_system == \"Windows\" and python_version == \"3.10\"\nhttps://github.com/oobabooga/llama-cpp-python-cuBLAS-wheels/releases/download/textgen-webui/llama_cpp_python_cuda-0.3.6+cu121-cp311-cp311-linux_x86_64.whl; platform_system == \"Linux\" and platform_machine == \"x86_64\" and python_version == \"3.11\"\nhttps://github.com/oobabooga/llama-cpp-python-cuBLAS-wheels/releases/download/textgen-webui/llama_cpp_python_cuda-0.3.6+cu121-cp310-cp310-linux_x86_64.whl; platform_system == \"Linux\" and platform_machine == \"x86_64\" and python_version == \"3.10\"\n\n# llama-cpp-python (CUDA, tensor cores)\nhttps://github.com/oobabooga/llama-cpp-python-cuBLAS-wheels/releases/download/textgen-webui/llama_cpp_python_cuda_tensorcores-0.3.6+cu121-cp311-cp311-win_amd64.whl; platform_system == \"Windows\" and python_version == \"3.11\"\nhttps://github.com/oobabooga/llama-cpp-python-cuBLAS-wheels/releases/download/textgen-webui/llama_cpp_python_cuda_tensorcores-0.3.6+cu121-cp310-cp310-win_amd64.whl; platform_system == \"Windows\" and python_version == \"3.10\"\nhttps://github.com/oobabooga/llama-cpp-python-cuBLAS-wheels/releases/download/textgen-webui/llama_cpp_python_cuda_tensorcores-0.3.6+cu121-cp311-cp311-linux_x86_64.whl; platform_system == \"Linux\" and platform_machine == \"x86_64\" and python_version == \"3.11\"\nhttps://github.com/oobabooga/llama-cpp-python-cuBLAS-wheels/releases/download/textgen-webui/llama_cpp_python_cuda_tensorcores-0.3.6+cu121-cp310-cp310-linux_x86_64.whl; platform_system == \"Linux\" and platform_machine == \"x86_64\" and python_version == \"3.10\"\n\n# CUDA wheels\nhttps://github.com/oobabooga/exllamav2/releases/download/v0.2.7/exllamav2-0.2.7+cu121.torch2.4.1-cp311-cp311-win_amd64.whl; platform_system == \"Windows\" and python_version == \"3.11\"\nhttps://github.com/oobabooga/exllamav2/releases/download/v0.2.7/exllamav2-0.2.7+cu121.torch2.4.1-cp310-cp310-win_amd64.whl; platform_system == \"Windows\" and python_version == \"3.10\"\nhttps://github.com/oobabooga/exllamav2/releases/download/v0.2.7/exllamav2-0.2.7+cu121.torch2.4.1-cp311-cp311-linux_x86_64.whl; platform_system == \"Linux\" and platform_machine == \"x86_64\" and python_version == \"3.11\"\nhttps://github.com/oobabooga/exllamav2/releases/download/v0.2.7/exllamav2-0.2.7+cu121.torch2.4.1-cp310-cp310-linux_x86_64.whl; platform_system == \"Linux\" and platform_machine == \"x86_64\" and python_version == \"3.10\"\nhttps://github.com/oobabooga/exllamav2/releases/download/v0.2.7/exllamav2-0.2.7-py3-none-any.whl; platform_system == \"Linux\" and platform_machine != \"x86_64\"\nhttps://github.com/oobabooga/flash-attention/releases/download/v2.7.2.post1/flash_attn-2.7.2.post1+cu122torch2.4.1cxx11abiFALSE-cp311-cp311-win_amd64.whl; platform_system == \"Windows\" and python_version == \"3.11\"\nhttps://github.com/oobabooga/flash-attention/releases/download/v2.7.2.post1/flash_attn-2.7.2.post1+cu122torch2.4.1cxx11abiFALSE-cp310-cp310-win_amd64.whl; platform_system == \"Windows\" and python_version == \"3.10\"\nhttps://github.com/Dao-AILab/flash-attention/releases/download/v2.7.2.post1/flash_attn-2.7.2.post1+cu12torch2.4cxx11abiFALSE-cp311-cp311-linux_x86_64.whl; platform_system == \"Linux\" and platform_machine == \"x86_64\" and python_version == \"3.11\"\nhttps://github.com/Dao-AILab/flash-attention/releases/download/v2.7.2.post1/flash_attn-2.7.2.post1+cu12torch2.4cxx11abiFALSE-cp310-cp310-linux_x86_64.whl; platform_system == \"Linux\" and platform_machine == \"x86_64\" and python_version == \"3.10\"\n"
        },
        {
          "name": "requirements_amd.txt",
          "type": "blob",
          "size": 2.31,
          "content": "accelerate==1.2.*\ncolorama\ndatasets\neinops\nfastapi==0.112.4\ngradio==4.37.*\njinja2==3.1.5\nmarkdown\nnumba==0.59.*\nnumpy==1.26.*\npandas\npeft==0.12.*\nPillow>=9.5.0\npsutil\npydantic==2.8.2\npyyaml\nrequests\nrich\nsafetensors==0.5.*\nscipy\nsentencepiece\ntensorboard\ntransformers==4.47.*\ntqdm\nwandb\n\n# API\nSpeechRecognition==3.10.0\nflask_cloudflared==0.0.14\nsse-starlette==1.6.5\ntiktoken\n\n# llama-cpp-python (CPU only, AVX2)\nhttps://github.com/oobabooga/llama-cpp-python-cuBLAS-wheels/releases/download/cpu/llama_cpp_python-0.3.6+cpuavx2-cp311-cp311-linux_x86_64.whl; platform_system == \"Linux\" and platform_machine == \"x86_64\" and python_version == \"3.11\"\nhttps://github.com/oobabooga/llama-cpp-python-cuBLAS-wheels/releases/download/cpu/llama_cpp_python-0.3.6+cpuavx2-cp310-cp310-linux_x86_64.whl; platform_system == \"Linux\" and platform_machine == \"x86_64\" and python_version == \"3.10\"\nhttps://github.com/oobabooga/llama-cpp-python-cuBLAS-wheels/releases/download/cpu/llama_cpp_python-0.3.6+cpuavx2-cp311-cp311-win_amd64.whl; platform_system == \"Windows\" and python_version == \"3.11\"\nhttps://github.com/oobabooga/llama-cpp-python-cuBLAS-wheels/releases/download/cpu/llama_cpp_python-0.3.6+cpuavx2-cp310-cp310-win_amd64.whl; platform_system == \"Windows\" and python_version == \"3.10\"\n\n# AMD wheels\nhttps://github.com/oobabooga/llama-cpp-python-cuBLAS-wheels/releases/download/rocm/llama_cpp_python_cuda-0.3.6+rocm6.1.2-cp311-cp311-linux_x86_64.whl; platform_system == \"Linux\" and platform_machine == \"x86_64\" and python_version == \"3.11\"\nhttps://github.com/oobabooga/llama-cpp-python-cuBLAS-wheels/releases/download/rocm/llama_cpp_python_cuda-0.3.6+rocm6.1.2-cp310-cp310-linux_x86_64.whl; platform_system == \"Linux\" and platform_machine == \"x86_64\" and python_version == \"3.10\"\nhttps://github.com/oobabooga/exllamav2/releases/download/v0.2.7/exllamav2-0.2.7+rocm6.1.torch2.4.1-cp311-cp311-linux_x86_64.whl; platform_system == \"Linux\" and platform_machine == \"x86_64\" and python_version == \"3.11\"\nhttps://github.com/oobabooga/exllamav2/releases/download/v0.2.7/exllamav2-0.2.7+rocm6.1.torch2.4.1-cp310-cp310-linux_x86_64.whl; platform_system == \"Linux\" and platform_machine == \"x86_64\" and python_version == \"3.10\"\nhttps://github.com/oobabooga/exllamav2/releases/download/v0.2.7/exllamav2-0.2.7-py3-none-any.whl; platform_system != \"Darwin\" and platform_machine != \"x86_64\"\n"
        },
        {
          "name": "requirements_amd_noavx2.txt",
          "type": "blob",
          "size": 1.84,
          "content": "accelerate==1.2.*\ncolorama\ndatasets\neinops\nfastapi==0.112.4\ngradio==4.37.*\njinja2==3.1.5\nmarkdown\nnumba==0.59.*\nnumpy==1.26.*\npandas\npeft==0.12.*\nPillow>=9.5.0\npsutil\npydantic==2.8.2\npyyaml\nrequests\nrich\nsafetensors==0.5.*\nscipy\nsentencepiece\ntensorboard\ntransformers==4.47.*\ntqdm\nwandb\n\n# API\nSpeechRecognition==3.10.0\nflask_cloudflared==0.0.14\nsse-starlette==1.6.5\ntiktoken\n\n# llama-cpp-python (CPU only, no AVX2)\nhttps://github.com/oobabooga/llama-cpp-python-cuBLAS-wheels/releases/download/cpu/llama_cpp_python-0.3.6+cpuavx-cp311-cp311-linux_x86_64.whl; platform_system == \"Linux\" and platform_machine == \"x86_64\" and python_version == \"3.11\"\nhttps://github.com/oobabooga/llama-cpp-python-cuBLAS-wheels/releases/download/cpu/llama_cpp_python-0.3.6+cpuavx-cp310-cp310-linux_x86_64.whl; platform_system == \"Linux\" and platform_machine == \"x86_64\" and python_version == \"3.10\"\nhttps://github.com/oobabooga/llama-cpp-python-cuBLAS-wheels/releases/download/cpu/llama_cpp_python-0.3.6+cpuavx-cp311-cp311-win_amd64.whl; platform_system == \"Windows\" and python_version == \"3.11\"\nhttps://github.com/oobabooga/llama-cpp-python-cuBLAS-wheels/releases/download/cpu/llama_cpp_python-0.3.6+cpuavx-cp310-cp310-win_amd64.whl; platform_system == \"Windows\" and python_version == \"3.10\"\n\n# AMD wheels\nhttps://github.com/oobabooga/exllamav2/releases/download/v0.2.7/exllamav2-0.2.7+rocm6.1.torch2.4.1-cp311-cp311-linux_x86_64.whl; platform_system == \"Linux\" and platform_machine == \"x86_64\" and python_version == \"3.11\"\nhttps://github.com/oobabooga/exllamav2/releases/download/v0.2.7/exllamav2-0.2.7+rocm6.1.torch2.4.1-cp310-cp310-linux_x86_64.whl; platform_system == \"Linux\" and platform_machine == \"x86_64\" and python_version == \"3.10\"\nhttps://github.com/oobabooga/exllamav2/releases/download/v0.2.7/exllamav2-0.2.7-py3-none-any.whl; platform_system != \"Darwin\" and platform_machine != \"x86_64\"\n"
        },
        {
          "name": "requirements_apple_intel.txt",
          "type": "blob",
          "size": 1.51,
          "content": "accelerate==1.2.*\ncolorama\ndatasets\neinops\nfastapi==0.112.4\ngradio==4.37.*\njinja2==3.1.5\nmarkdown\nnumba==0.59.*\nnumpy==1.26.*\npandas\npeft==0.12.*\nPillow>=9.5.0\npsutil\npydantic==2.8.2\npyyaml\nrequests\nrich\nsafetensors==0.5.*\nscipy\nsentencepiece\ntensorboard\ntransformers==4.47.*\ntqdm\nwandb\n\n# API\nSpeechRecognition==3.10.0\nflask_cloudflared==0.0.14\nsse-starlette==1.6.5\ntiktoken\n\n# Mac wheels\nhttps://github.com/oobabooga/llama-cpp-python-cuBLAS-wheels/releases/download/metal/llama_cpp_python-0.3.6-cp311-cp311-macosx_15_0_x86_64.whl; platform_system == \"Darwin\" and platform_release >= \"24.0.0\" and platform_release < \"25.0.0\" and python_version == \"3.11\"\nhttps://github.com/oobabooga/llama-cpp-python-cuBLAS-wheels/releases/download/metal/llama_cpp_python-0.3.6-cp310-cp310-macosx_15_0_x86_64.whl; platform_system == \"Darwin\" and platform_release >= \"24.0.0\" and platform_release < \"25.0.0\" and python_version == \"3.10\"\nhttps://github.com/oobabooga/llama-cpp-python-cuBLAS-wheels/releases/download/metal/llama_cpp_python-0.3.6-cp311-cp311-macosx_14_0_x86_64.whl; platform_system == \"Darwin\" and platform_release >= \"23.0.0\" and platform_release < \"24.0.0\" and python_version == \"3.11\"\nhttps://github.com/oobabooga/llama-cpp-python-cuBLAS-wheels/releases/download/metal/llama_cpp_python-0.3.6-cp310-cp310-macosx_14_0_x86_64.whl; platform_system == \"Darwin\" and platform_release >= \"23.0.0\" and platform_release < \"24.0.0\" and python_version == \"3.10\"\nhttps://github.com/oobabooga/exllamav2/releases/download/v0.2.7/exllamav2-0.2.7-py3-none-any.whl\n"
        },
        {
          "name": "requirements_apple_silicon.txt",
          "type": "blob",
          "size": 2.02,
          "content": "accelerate==1.2.*\ncolorama\ndatasets\neinops\nfastapi==0.112.4\ngradio==4.37.*\njinja2==3.1.5\nmarkdown\nnumba==0.59.*\nnumpy==1.26.*\npandas\npeft==0.12.*\nPillow>=9.5.0\npsutil\npydantic==2.8.2\npyyaml\nrequests\nrich\nsafetensors==0.5.*\nscipy\nsentencepiece\ntensorboard\ntransformers==4.47.*\ntqdm\nwandb\n\n# API\nSpeechRecognition==3.10.0\nflask_cloudflared==0.0.14\nsse-starlette==1.6.5\ntiktoken\n\n# Mac wheels\nhttps://github.com/oobabooga/llama-cpp-python-cuBLAS-wheels/releases/download/metal/llama_cpp_python-0.3.6-cp311-cp311-macosx_15_0_arm64.whl; platform_system == \"Darwin\" and platform_release >= \"24.0.0\" and platform_release < \"25.0.0\" and python_version == \"3.11\"\nhttps://github.com/oobabooga/llama-cpp-python-cuBLAS-wheels/releases/download/metal/llama_cpp_python-0.3.6-cp310-cp310-macosx_15_0_arm64.whl; platform_system == \"Darwin\" and platform_release >= \"24.0.0\" and platform_release < \"25.0.0\" and python_version == \"3.10\"\nhttps://github.com/oobabooga/llama-cpp-python-cuBLAS-wheels/releases/download/metal/llama_cpp_python-0.3.6-cp311-cp311-macosx_14_0_arm64.whl; platform_system == \"Darwin\" and platform_release >= \"23.0.0\" and platform_release < \"24.0.0\" and python_version == \"3.11\"\nhttps://github.com/oobabooga/llama-cpp-python-cuBLAS-wheels/releases/download/metal/llama_cpp_python-0.3.6-cp310-cp310-macosx_14_0_arm64.whl; platform_system == \"Darwin\" and platform_release >= \"23.0.0\" and platform_release < \"24.0.0\" and python_version == \"3.10\"\nhttps://github.com/oobabooga/llama-cpp-python-cuBLAS-wheels/releases/download/metal/llama_cpp_python-0.3.6-cp311-cp311-macosx_13_0_arm64.whl; platform_system == \"Darwin\" and platform_release >= \"22.0.0\" and platform_release < \"23.0.0\" and python_version == \"3.11\"\nhttps://github.com/oobabooga/llama-cpp-python-cuBLAS-wheels/releases/download/metal/llama_cpp_python-0.3.6-cp310-cp310-macosx_13_0_arm64.whl; platform_system == \"Darwin\" and platform_release >= \"22.0.0\" and platform_release < \"23.0.0\" and python_version == \"3.10\"\nhttps://github.com/oobabooga/exllamav2/releases/download/v0.2.7/exllamav2-0.2.7-py3-none-any.whl\n"
        },
        {
          "name": "requirements_cpu_only.txt",
          "type": "blob",
          "size": 1.24,
          "content": "accelerate==1.2.*\ncolorama\ndatasets\neinops\nfastapi==0.112.4\ngradio==4.37.*\njinja2==3.1.5\nmarkdown\nnumba==0.59.*\nnumpy==1.26.*\npandas\npeft==0.12.*\nPillow>=9.5.0\npsutil\npydantic==2.8.2\npyyaml\nrequests\nrich\nsafetensors==0.5.*\nscipy\nsentencepiece\ntensorboard\ntransformers==4.47.*\ntqdm\nwandb\n\n# API\nSpeechRecognition==3.10.0\nflask_cloudflared==0.0.14\nsse-starlette==1.6.5\ntiktoken\n\n# llama-cpp-python (CPU only, AVX2)\nhttps://github.com/oobabooga/llama-cpp-python-cuBLAS-wheels/releases/download/cpu/llama_cpp_python-0.3.6+cpuavx2-cp311-cp311-linux_x86_64.whl; platform_system == \"Linux\" and platform_machine == \"x86_64\" and python_version == \"3.11\"\nhttps://github.com/oobabooga/llama-cpp-python-cuBLAS-wheels/releases/download/cpu/llama_cpp_python-0.3.6+cpuavx2-cp310-cp310-linux_x86_64.whl; platform_system == \"Linux\" and platform_machine == \"x86_64\" and python_version == \"3.10\"\nhttps://github.com/oobabooga/llama-cpp-python-cuBLAS-wheels/releases/download/cpu/llama_cpp_python-0.3.6+cpuavx2-cp311-cp311-win_amd64.whl; platform_system == \"Windows\" and python_version == \"3.11\"\nhttps://github.com/oobabooga/llama-cpp-python-cuBLAS-wheels/releases/download/cpu/llama_cpp_python-0.3.6+cpuavx2-cp310-cp310-win_amd64.whl; platform_system == \"Windows\" and python_version == \"3.10\"\n"
        },
        {
          "name": "requirements_cpu_only_noavx2.txt",
          "type": "blob",
          "size": 1.24,
          "content": "accelerate==1.2.*\ncolorama\ndatasets\neinops\nfastapi==0.112.4\ngradio==4.37.*\njinja2==3.1.5\nmarkdown\nnumba==0.59.*\nnumpy==1.26.*\npandas\npeft==0.12.*\nPillow>=9.5.0\npsutil\npydantic==2.8.2\npyyaml\nrequests\nrich\nsafetensors==0.5.*\nscipy\nsentencepiece\ntensorboard\ntransformers==4.47.*\ntqdm\nwandb\n\n# API\nSpeechRecognition==3.10.0\nflask_cloudflared==0.0.14\nsse-starlette==1.6.5\ntiktoken\n\n# llama-cpp-python (CPU only, no AVX2)\nhttps://github.com/oobabooga/llama-cpp-python-cuBLAS-wheels/releases/download/cpu/llama_cpp_python-0.3.6+cpuavx-cp311-cp311-linux_x86_64.whl; platform_system == \"Linux\" and platform_machine == \"x86_64\" and python_version == \"3.11\"\nhttps://github.com/oobabooga/llama-cpp-python-cuBLAS-wheels/releases/download/cpu/llama_cpp_python-0.3.6+cpuavx-cp310-cp310-linux_x86_64.whl; platform_system == \"Linux\" and platform_machine == \"x86_64\" and python_version == \"3.10\"\nhttps://github.com/oobabooga/llama-cpp-python-cuBLAS-wheels/releases/download/cpu/llama_cpp_python-0.3.6+cpuavx-cp311-cp311-win_amd64.whl; platform_system == \"Windows\" and python_version == \"3.11\"\nhttps://github.com/oobabooga/llama-cpp-python-cuBLAS-wheels/releases/download/cpu/llama_cpp_python-0.3.6+cpuavx-cp310-cp310-win_amd64.whl; platform_system == \"Windows\" and python_version == \"3.10\"\n"
        },
        {
          "name": "requirements_noavx2.txt",
          "type": "blob",
          "size": 5.04,
          "content": "accelerate==1.2.*\nbitsandbytes==0.45.*\ncolorama\ndatasets\neinops\nfastapi==0.112.4\ngradio==4.37.*\njinja2==3.1.5\nmarkdown\nnumba==0.59.*\nnumpy==1.26.*\npandas\npeft==0.12.*\nPillow>=9.5.0\npsutil\npydantic==2.8.2\npyyaml\nrequests\nrich\nsafetensors==0.5.*\nscipy\nsentencepiece\ntensorboard\ntransformers==4.47.*\ntqdm\nwandb\n\n# API\nSpeechRecognition==3.10.0\nflask_cloudflared==0.0.14\nsse-starlette==1.6.5\ntiktoken\n\n# llama-cpp-python (CPU only, no AVX2)\nhttps://github.com/oobabooga/llama-cpp-python-cuBLAS-wheels/releases/download/cpu/llama_cpp_python-0.3.6+cpuavx-cp311-cp311-linux_x86_64.whl; platform_system == \"Linux\" and platform_machine == \"x86_64\" and python_version == \"3.11\"\nhttps://github.com/oobabooga/llama-cpp-python-cuBLAS-wheels/releases/download/cpu/llama_cpp_python-0.3.6+cpuavx-cp310-cp310-linux_x86_64.whl; platform_system == \"Linux\" and platform_machine == \"x86_64\" and python_version == \"3.10\"\nhttps://github.com/oobabooga/llama-cpp-python-cuBLAS-wheels/releases/download/cpu/llama_cpp_python-0.3.6+cpuavx-cp311-cp311-win_amd64.whl; platform_system == \"Windows\" and python_version == \"3.11\"\nhttps://github.com/oobabooga/llama-cpp-python-cuBLAS-wheels/releases/download/cpu/llama_cpp_python-0.3.6+cpuavx-cp310-cp310-win_amd64.whl; platform_system == \"Windows\" and python_version == \"3.10\"\n\n# llama-cpp-python (CUDA, no tensor cores)\nhttps://github.com/oobabooga/llama-cpp-python-cuBLAS-wheels/releases/download/textgen-webui/llama_cpp_python_cuda-0.3.6+cu121avx-cp311-cp311-win_amd64.whl; platform_system == \"Windows\" and python_version == \"3.11\"\nhttps://github.com/oobabooga/llama-cpp-python-cuBLAS-wheels/releases/download/textgen-webui/llama_cpp_python_cuda-0.3.6+cu121avx-cp310-cp310-win_amd64.whl; platform_system == \"Windows\" and python_version == \"3.10\"\nhttps://github.com/oobabooga/llama-cpp-python-cuBLAS-wheels/releases/download/textgen-webui/llama_cpp_python_cuda-0.3.6+cu121avx-cp311-cp311-linux_x86_64.whl; platform_system == \"Linux\" and platform_machine == \"x86_64\" and python_version == \"3.11\"\nhttps://github.com/oobabooga/llama-cpp-python-cuBLAS-wheels/releases/download/textgen-webui/llama_cpp_python_cuda-0.3.6+cu121avx-cp310-cp310-linux_x86_64.whl; platform_system == \"Linux\" and platform_machine == \"x86_64\" and python_version == \"3.10\"\n\n# llama-cpp-python (CUDA, tensor cores)\nhttps://github.com/oobabooga/llama-cpp-python-cuBLAS-wheels/releases/download/textgen-webui/llama_cpp_python_cuda_tensorcores-0.3.6+cu121avx-cp311-cp311-win_amd64.whl; platform_system == \"Windows\" and python_version == \"3.11\"\nhttps://github.com/oobabooga/llama-cpp-python-cuBLAS-wheels/releases/download/textgen-webui/llama_cpp_python_cuda_tensorcores-0.3.6+cu121avx-cp310-cp310-win_amd64.whl; platform_system == \"Windows\" and python_version == \"3.10\"\nhttps://github.com/oobabooga/llama-cpp-python-cuBLAS-wheels/releases/download/textgen-webui/llama_cpp_python_cuda_tensorcores-0.3.6+cu121avx-cp311-cp311-linux_x86_64.whl; platform_system == \"Linux\" and platform_machine == \"x86_64\" and python_version == \"3.11\"\nhttps://github.com/oobabooga/llama-cpp-python-cuBLAS-wheels/releases/download/textgen-webui/llama_cpp_python_cuda_tensorcores-0.3.6+cu121avx-cp310-cp310-linux_x86_64.whl; platform_system == \"Linux\" and platform_machine == \"x86_64\" and python_version == \"3.10\"\n\n# CUDA wheels\nhttps://github.com/oobabooga/exllamav2/releases/download/v0.2.7/exllamav2-0.2.7+cu121.torch2.4.1-cp311-cp311-win_amd64.whl; platform_system == \"Windows\" and python_version == \"3.11\"\nhttps://github.com/oobabooga/exllamav2/releases/download/v0.2.7/exllamav2-0.2.7+cu121.torch2.4.1-cp310-cp310-win_amd64.whl; platform_system == \"Windows\" and python_version == \"3.10\"\nhttps://github.com/oobabooga/exllamav2/releases/download/v0.2.7/exllamav2-0.2.7+cu121.torch2.4.1-cp311-cp311-linux_x86_64.whl; platform_system == \"Linux\" and platform_machine == \"x86_64\" and python_version == \"3.11\"\nhttps://github.com/oobabooga/exllamav2/releases/download/v0.2.7/exllamav2-0.2.7+cu121.torch2.4.1-cp310-cp310-linux_x86_64.whl; platform_system == \"Linux\" and platform_machine == \"x86_64\" and python_version == \"3.10\"\nhttps://github.com/oobabooga/exllamav2/releases/download/v0.2.7/exllamav2-0.2.7-py3-none-any.whl; platform_system == \"Linux\" and platform_machine != \"x86_64\"\nhttps://github.com/oobabooga/flash-attention/releases/download/v2.7.2.post1/flash_attn-2.7.2.post1+cu122torch2.4.1cxx11abiFALSE-cp311-cp311-win_amd64.whl; platform_system == \"Windows\" and python_version == \"3.11\"\nhttps://github.com/oobabooga/flash-attention/releases/download/v2.7.2.post1/flash_attn-2.7.2.post1+cu122torch2.4.1cxx11abiFALSE-cp310-cp310-win_amd64.whl; platform_system == \"Windows\" and python_version == \"3.10\"\nhttps://github.com/Dao-AILab/flash-attention/releases/download/v2.7.2.post1/flash_attn-2.7.2.post1+cu12torch2.4cxx11abiFALSE-cp311-cp311-linux_x86_64.whl; platform_system == \"Linux\" and platform_machine == \"x86_64\" and python_version == \"3.11\"\nhttps://github.com/Dao-AILab/flash-attention/releases/download/v2.7.2.post1/flash_attn-2.7.2.post1+cu12torch2.4cxx11abiFALSE-cp310-cp310-linux_x86_64.whl; platform_system == \"Linux\" and platform_machine == \"x86_64\" and python_version == \"3.10\"\n"
        },
        {
          "name": "requirements_nowheels.txt",
          "type": "blob",
          "size": 0.37,
          "content": "accelerate==1.2.*\ncolorama\ndatasets\neinops\nfastapi==0.112.4\ngradio==4.37.*\njinja2==3.1.5\nmarkdown\nnumba==0.59.*\nnumpy==1.26.*\npandas\npeft==0.12.*\nPillow>=9.5.0\npsutil\npydantic==2.8.2\npyyaml\nrequests\nrich\nsafetensors==0.5.*\nscipy\nsentencepiece\ntensorboard\ntransformers==4.47.*\ntqdm\nwandb\n\n# API\nSpeechRecognition==3.10.0\nflask_cloudflared==0.0.14\nsse-starlette==1.6.5\ntiktoken\n"
        },
        {
          "name": "server.py",
          "type": "blob",
          "size": 9.91,
          "content": "import os\nimport warnings\n\nfrom modules import shared\n\nimport accelerate  # This early import makes Intel GPUs happy\n\nimport modules.one_click_installer_check\nfrom modules.block_requests import OpenMonkeyPatch, RequestBlocker\nfrom modules.logging_colors import logger\n\nos.environ['GRADIO_ANALYTICS_ENABLED'] = 'False'\nos.environ['BITSANDBYTES_NOWELCOME'] = '1'\nwarnings.filterwarnings('ignore', category=UserWarning, message='TypedStorage is deprecated')\nwarnings.filterwarnings('ignore', category=UserWarning, message='Using the update method is deprecated')\nwarnings.filterwarnings('ignore', category=UserWarning, message='Field \"model_name\" has conflict')\nwarnings.filterwarnings('ignore', category=UserWarning, message='The value passed into gr.Dropdown()')\nwarnings.filterwarnings('ignore', category=UserWarning, message='Field \"model_names\" has conflict')\n\nwith RequestBlocker():\n    from modules import gradio_hijack\n    import gradio as gr\n\nimport matplotlib\n\nmatplotlib.use('Agg')  # This fixes LaTeX rendering on some systems\n\nimport json\nimport os\nimport signal\nimport sys\nimport time\nfrom functools import partial\nfrom pathlib import Path\nfrom threading import Lock, Thread\n\nimport yaml\n\nimport modules.extensions as extensions_module\nfrom modules import (\n    chat,\n    training,\n    ui,\n    ui_chat,\n    ui_default,\n    ui_file_saving,\n    ui_model_menu,\n    ui_notebook,\n    ui_parameters,\n    ui_session,\n    utils\n)\nfrom modules.extensions import apply_extensions\nfrom modules.LoRA import add_lora_to_model\nfrom modules.models import load_model, unload_model_if_idle\nfrom modules.models_settings import (\n    get_fallback_settings,\n    get_model_metadata,\n    update_model_parameters\n)\nfrom modules.shared import do_cmd_flags_warnings\nfrom modules.utils import gradio\n\n\ndef signal_handler(sig, frame):\n    logger.info(\"Received Ctrl+C. Shutting down Text generation web UI gracefully.\")\n    sys.exit(0)\n\n\nsignal.signal(signal.SIGINT, signal_handler)\n\n\ndef create_interface():\n\n    title = 'Text generation web UI'\n\n    # Password authentication\n    auth = []\n    if shared.args.gradio_auth:\n        auth.extend(x.strip() for x in shared.args.gradio_auth.strip('\"').replace('\\n', '').split(',') if x.strip())\n    if shared.args.gradio_auth_path:\n        with open(shared.args.gradio_auth_path, 'r', encoding=\"utf8\") as file:\n            auth.extend(x.strip() for line in file for x in line.split(',') if x.strip())\n    auth = [tuple(cred.split(':')) for cred in auth]\n\n    # Import the extensions and execute their setup() functions\n    if shared.args.extensions is not None and len(shared.args.extensions) > 0:\n        extensions_module.load_extensions()\n\n    # Force some events to be triggered on page load\n    shared.persistent_interface_state.update({\n        'loader': shared.args.loader or 'Transformers',\n        'mode': shared.settings['mode'] if shared.settings['mode'] == 'instruct' else gr.update(),\n        'character_menu': shared.args.character or shared.settings['character'],\n        'instruction_template_str': shared.settings['instruction_template_str'],\n        'prompt_menu-default': shared.settings['prompt-default'],\n        'prompt_menu-notebook': shared.settings['prompt-notebook'],\n        'filter_by_loader': shared.args.loader or 'All'\n    })\n\n    if Path(\"cache/pfp_character.png\").exists():\n        Path(\"cache/pfp_character.png\").unlink()\n\n    # css/js strings\n    css = ui.css\n    js = ui.js\n    css += apply_extensions('css')\n    js += apply_extensions('js')\n\n    # Interface state elements\n    shared.input_elements = ui.list_interface_input_elements()\n\n    with gr.Blocks(css=css, analytics_enabled=False, title=title, theme=ui.theme) as shared.gradio['interface']:\n\n        # Interface state\n        shared.gradio['interface_state'] = gr.State({k: None for k in shared.input_elements})\n\n        # Audio notification\n        if Path(\"notification.mp3\").exists():\n            shared.gradio['audio_notification'] = gr.Audio(interactive=False, value=\"notification.mp3\", elem_id=\"audio_notification\", visible=False)\n\n        # Floating menus for saving/deleting files\n        ui_file_saving.create_ui()\n\n        # Temporary clipboard for saving files\n        shared.gradio['temporary_text'] = gr.Textbox(visible=False)\n\n        # Text Generation tab\n        ui_chat.create_ui()\n        ui_default.create_ui()\n        ui_notebook.create_ui()\n\n        ui_parameters.create_ui(shared.settings['preset'])  # Parameters tab\n        ui_model_menu.create_ui()  # Model tab\n        training.create_ui()  # Training tab\n        ui_session.create_ui()  # Session tab\n\n        # Generation events\n        ui_chat.create_event_handlers()\n        ui_default.create_event_handlers()\n        ui_notebook.create_event_handlers()\n\n        # Other events\n        ui_file_saving.create_event_handlers()\n        ui_parameters.create_event_handlers()\n        ui_model_menu.create_event_handlers()\n\n        # Interface launch events\n        shared.gradio['interface'].load(\n            None,\n            gradio('show_controls'),\n            None,\n            js=f\"\"\"(x) => {{\n                if ({str(shared.settings['dark_theme']).lower()}) {{\n                    document.getElementsByTagName('body')[0].classList.add('dark');\n                }}\n                else {{\n                    document.getElementsByTagName('body')[0].classList.remove('dark');\n                }}\n                {js}\n                {ui.show_controls_js}\n                toggle_controls(x);\n            }}\"\"\"\n        )\n\n        shared.gradio['interface'].load(partial(ui.apply_interface_values, {}, use_persistent=True), None, gradio(ui.list_interface_input_elements()), show_progress=False)\n\n        extensions_module.create_extensions_tabs()  # Extensions tabs\n        extensions_module.create_extensions_block()  # Extensions block\n\n    # Launch the interface\n    shared.gradio['interface'].queue()\n    with OpenMonkeyPatch():\n        shared.gradio['interface'].launch(\n            max_threads=64,\n            prevent_thread_lock=True,\n            share=shared.args.share,\n            server_name=None if not shared.args.listen else (shared.args.listen_host or '0.0.0.0'),\n            server_port=shared.args.listen_port,\n            inbrowser=shared.args.auto_launch,\n            auth=auth or None,\n            ssl_verify=False if (shared.args.ssl_keyfile or shared.args.ssl_certfile) else True,\n            ssl_keyfile=shared.args.ssl_keyfile,\n            ssl_certfile=shared.args.ssl_certfile,\n            root_path=shared.args.subpath,\n            allowed_paths=[\"cache\", \"css\", \"extensions\", \"js\"]\n        )\n\n\nif __name__ == \"__main__\":\n\n    logger.info(\"Starting Text generation web UI\")\n    do_cmd_flags_warnings()\n\n    # Load custom settings\n    settings_file = None\n    if shared.args.settings is not None and Path(shared.args.settings).exists():\n        settings_file = Path(shared.args.settings)\n    elif Path('settings.yaml').exists():\n        settings_file = Path('settings.yaml')\n    elif Path('settings.json').exists():\n        settings_file = Path('settings.json')\n\n    if settings_file is not None:\n        logger.info(f\"Loading settings from \\\"{settings_file}\\\"\")\n        file_contents = open(settings_file, 'r', encoding='utf-8').read()\n        new_settings = json.loads(file_contents) if settings_file.suffix == \"json\" else yaml.safe_load(file_contents)\n        shared.settings.update(new_settings)\n\n    # Fallback settings for models\n    shared.model_config['.*'] = get_fallback_settings()\n    shared.model_config.move_to_end('.*', last=False)  # Move to the beginning\n\n    # Activate the extensions listed on settings.yaml\n    extensions_module.available_extensions = utils.get_available_extensions()\n    for extension in shared.settings['default_extensions']:\n        shared.args.extensions = shared.args.extensions or []\n        if extension not in shared.args.extensions:\n            shared.args.extensions.append(extension)\n\n    available_models = utils.get_available_models()\n\n    # Model defined through --model\n    if shared.args.model is not None:\n        shared.model_name = shared.args.model\n\n    # Select the model from a command-line menu\n    elif shared.args.model_menu:\n        if len(available_models) == 0:\n            logger.error('No models are available! Please download at least one.')\n            sys.exit(0)\n        else:\n            print('The following models are available:\\n')\n            for i, model in enumerate(available_models):\n                print(f'{i+1}. {model}')\n\n            print(f'\\nWhich one do you want to load? 1-{len(available_models)}\\n')\n            i = int(input()) - 1\n            print()\n\n        shared.model_name = available_models[i]\n\n    # If any model has been selected, load it\n    if shared.model_name != 'None':\n        p = Path(shared.model_name)\n        if p.exists():\n            model_name = p.parts[-1]\n            shared.model_name = model_name\n        else:\n            model_name = shared.model_name\n\n        model_settings = get_model_metadata(model_name)\n        update_model_parameters(model_settings, initial=True)  # hijack the command-line arguments\n\n        # Load the model\n        shared.model, shared.tokenizer = load_model(model_name)\n        if shared.args.lora:\n            add_lora_to_model(shared.args.lora)\n\n    shared.generation_lock = Lock()\n\n    if shared.args.idle_timeout > 0:\n        timer_thread = Thread(target=unload_model_if_idle)\n        timer_thread.daemon = True\n        timer_thread.start()\n\n    if shared.args.nowebui:\n        # Start the API in standalone mode\n        shared.args.extensions = [x for x in shared.args.extensions if x != 'gallery']\n        if shared.args.extensions is not None and len(shared.args.extensions) > 0:\n            extensions_module.load_extensions()\n    else:\n        # Launch the web UI\n        create_interface()\n        while True:\n            time.sleep(0.5)\n            if shared.need_restart:\n                shared.need_restart = False\n                time.sleep(0.5)\n                shared.gradio['interface'].close()\n                time.sleep(0.5)\n                create_interface()\n"
        },
        {
          "name": "settings-template.yaml",
          "type": "blob",
          "size": 2.23,
          "content": "dark_theme: true\nshow_controls: true\nstart_with: ''\nmode: chat-instruct\nchat_style: cai-chat\nprompt-default: QA\nprompt-notebook: QA\npreset: min_p\nmax_new_tokens: 512\nmax_new_tokens_min: 1\nmax_new_tokens_max: 4096\nnegative_prompt: ''\nseed: -1\ntruncation_length: 2048\nmax_tokens_second: 0\nmax_updates_second: 0\nprompt_lookup_num_tokens: 0\ncustom_stopping_strings: ''\ncustom_token_bans: ''\nauto_max_new_tokens: false\nban_eos_token: false\nadd_bos_token: true\nskip_special_tokens: true\nstream: true\nstatic_cache: false\ncharacter: Assistant\nname1: You\ncustom_system_message: ''\ninstruction_template_str: |-\n  {%- set ns = namespace(found=false) -%}\n  {%- for message in messages -%}\n      {%- if message['role'] == 'system' -%}\n          {%- set ns.found = true -%}\n      {%- endif -%}\n  {%- endfor -%}\n  {%- if not ns.found -%}\n      {{- '' + 'Below is an instruction that describes a task. Write a response that appropriately completes the request.' + '\\n\\n' -}}\n  {%- endif %}\n  {%- for message in messages %}\n      {%- if message['role'] == 'system' -%}\n          {{- '' + message['content'] + '\\n\\n' -}}\n      {%- else -%}\n          {%- if message['role'] == 'user' -%}\n              {{-'### Instruction:\\n' + message['content'] + '\\n\\n'-}}\n          {%- else -%}\n              {{-'### Response:\\n' + message['content'] + '\\n\\n' -}}\n          {%- endif -%}\n      {%- endif -%}\n  {%- endfor -%}\n  {%- if add_generation_prompt -%}\n      {{-'### Response:\\n'-}}\n  {%- endif -%}\nchat_template_str: |-\n  {%- for message in messages %}\n      {%- if message['role'] == 'system' -%}\n          {%- if message['content'] -%}\n              {{- message['content'] + '\\n\\n' -}}\n          {%- endif -%}\n          {%- if user_bio -%}\n              {{- user_bio + '\\n\\n' -}}\n          {%- endif -%}\n      {%- else -%}\n          {%- if message['role'] == 'user' -%}\n              {{- name1 + ': ' + message['content'] + '\\n'-}}\n          {%- else -%}\n              {{- name2 + ': ' + message['content'] + '\\n' -}}\n          {%- endif -%}\n      {%- endif -%}\n  {%- endfor -%}\nchat-instruct_command: |-\n  Continue the chat dialogue below. Write a single reply for the character \"<|character|>\".\n\n  <|prompt|>\nautoload_model: false\ngallery-items_per_page: 50\ngallery-open: false\ndefault_extensions: []\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.06,
          "content": "[pycodestyle]\nmax-line-length = 120\nignore = E402, E501, E722"
        },
        {
          "name": "start_linux.sh",
          "type": "blob",
          "size": 2.31,
          "content": "#!/usr/bin/env bash\n\ncd \"$(dirname \"${BASH_SOURCE[0]}\")\"\n\nif [[ \"$(pwd)\" =~ \" \" ]]; then echo This script relies on Miniconda which can not be silently installed under a path with spaces. && exit; fi\n\n# deactivate existing conda envs as needed to avoid conflicts\n{ conda deactivate && conda deactivate && conda deactivate; } 2> /dev/null\n\nOS_ARCH=$(uname -m)\ncase \"${OS_ARCH}\" in\n    x86_64*)    OS_ARCH=\"x86_64\";;\n    arm64*)     OS_ARCH=\"aarch64\";;\n    aarch64*)     OS_ARCH=\"aarch64\";;\n    *)          echo \"Unknown system architecture: $OS_ARCH! This script runs only on x86_64 or arm64\" && exit\nesac\n\n# config\nINSTALL_DIR=\"$(pwd)/installer_files\"\nCONDA_ROOT_PREFIX=\"$(pwd)/installer_files/conda\"\nINSTALL_ENV_DIR=\"$(pwd)/installer_files/env\"\nMINICONDA_DOWNLOAD_URL=\"https://repo.anaconda.com/miniconda/Miniconda3-py310_23.3.1-0-Linux-${OS_ARCH}.sh\"\nconda_exists=\"F\"\n\n# figure out whether git and conda needs to be installed\nif \"$CONDA_ROOT_PREFIX/bin/conda\" --version &>/dev/null; then conda_exists=\"T\"; fi\n\n# (if necessary) install git and conda into a contained environment\n# download miniconda\nif [ \"$conda_exists\" == \"F\" ]; then\n    echo \"Downloading Miniconda from $MINICONDA_DOWNLOAD_URL to $INSTALL_DIR/miniconda_installer.sh\"\n\n    mkdir -p \"$INSTALL_DIR\"\n    curl -L \"$MINICONDA_DOWNLOAD_URL\" > \"$INSTALL_DIR/miniconda_installer.sh\"\n\n    chmod u+x \"$INSTALL_DIR/miniconda_installer.sh\"\n    bash \"$INSTALL_DIR/miniconda_installer.sh\" -b -p $CONDA_ROOT_PREFIX\n\n    # test the conda binary\n    echo \"Miniconda version:\"\n    \"$CONDA_ROOT_PREFIX/bin/conda\" --version\n\n    # delete the Miniconda installer\n    rm \"$INSTALL_DIR/miniconda_installer.sh\"\nfi\n\n# create the installer env\nif [ ! -e \"$INSTALL_ENV_DIR\" ]; then\n    \"$CONDA_ROOT_PREFIX/bin/conda\" create -y -k --prefix \"$INSTALL_ENV_DIR\" python=3.11\nfi\n\n# check if conda environment was actually created\nif [ ! -e \"$INSTALL_ENV_DIR/bin/python\" ]; then\n    echo \"Conda environment is empty.\"\n    exit\nfi\n\n# environment isolation\nexport PYTHONNOUSERSITE=1\nunset PYTHONPATH\nunset PYTHONHOME\nexport CUDA_PATH=\"$INSTALL_ENV_DIR\"\nexport CUDA_HOME=\"$CUDA_PATH\"\n\n# activate installer env\nsource \"$CONDA_ROOT_PREFIX/etc/profile.d/conda.sh\" # otherwise conda complains about 'shell not initialized' (needed when running in a script)\nconda activate \"$INSTALL_ENV_DIR\"\n\n# setup installer env\npython one_click.py $@\n"
        },
        {
          "name": "start_macos.sh",
          "type": "blob",
          "size": 2.28,
          "content": "#!/bin/bash\n\ncd \"$(dirname \"${BASH_SOURCE[0]}\")\"\n\nif [[ \"$(pwd)\" =~ \" \" ]]; then echo This script relies on Miniconda which can not be silently installed under a path with spaces. && exit; fi\n\n# deactivate existing conda envs as needed to avoid conflicts\n{ conda deactivate && conda deactivate && conda deactivate; } 2> /dev/null\n\n# M Series or Intel\nOS_ARCH=$(uname -m)\ncase \"${OS_ARCH}\" in\n    x86_64*)    OS_ARCH=\"x86_64\";;\n    arm64*)     OS_ARCH=\"arm64\";;\n    *)          echo \"Unknown system architecture: $OS_ARCH! This script runs only on x86_64 or arm64\" && exit\nesac\n\n# config\nINSTALL_DIR=\"$(pwd)/installer_files\"\nCONDA_ROOT_PREFIX=\"$(pwd)/installer_files/conda\"\nINSTALL_ENV_DIR=\"$(pwd)/installer_files/env\"\nMINICONDA_DOWNLOAD_URL=\"https://repo.anaconda.com/miniconda/Miniconda3-py310_23.3.1-0-MacOSX-${OS_ARCH}.sh\"\nconda_exists=\"F\"\n\n# figure out whether git and conda needs to be installed\nif \"$CONDA_ROOT_PREFIX/bin/conda\" --version &>/dev/null; then conda_exists=\"T\"; fi\n\n# (if necessary) install git and conda into a contained environment\n# download miniconda\nif [ \"$conda_exists\" == \"F\" ]; then\n    echo \"Downloading Miniconda from $MINICONDA_DOWNLOAD_URL to $INSTALL_DIR/miniconda_installer.sh\"\n\n    mkdir -p \"$INSTALL_DIR\"\n    curl -L \"$MINICONDA_DOWNLOAD_URL\" > \"$INSTALL_DIR/miniconda_installer.sh\"\n\n    chmod u+x \"$INSTALL_DIR/miniconda_installer.sh\"\n    bash \"$INSTALL_DIR/miniconda_installer.sh\" -b -p $CONDA_ROOT_PREFIX\n\n    # test the conda binary\n    echo \"Miniconda version:\"\n    \"$CONDA_ROOT_PREFIX/bin/conda\" --version\n\n    # delete the Miniconda installer\n    rm \"$INSTALL_DIR/miniconda_installer.sh\"\nfi\n\n# create the installer env\nif [ ! -e \"$INSTALL_ENV_DIR\" ]; then\n    \"$CONDA_ROOT_PREFIX/bin/conda\" create -y -k --prefix \"$INSTALL_ENV_DIR\" python=3.11\nfi\n\n# check if conda environment was actually created\nif [ ! -e \"$INSTALL_ENV_DIR/bin/python\" ]; then\n    echo \"Conda environment is empty.\"\n    exit\nfi\n\n# environment isolation\nexport PYTHONNOUSERSITE=1\nunset PYTHONPATH\nunset PYTHONHOME\nexport CUDA_PATH=\"$INSTALL_ENV_DIR\"\nexport CUDA_HOME=\"$CUDA_PATH\"\n\n# activate installer env\nsource \"$CONDA_ROOT_PREFIX/etc/profile.d/conda.sh\" # otherwise conda complains about 'shell not initialized' (needed when running in a script)\nconda activate \"$INSTALL_ENV_DIR\"\n\n# setup installer env\npython one_click.py $@\n"
        },
        {
          "name": "start_windows.bat",
          "type": "blob",
          "size": 3.7,
          "content": "@echo off\nsetlocal enabledelayedexpansion\n\ncd /D \"%~dp0\"\n\nset PATH=%PATH%;%SystemRoot%\\system32\n\necho \"%CD%\"| findstr /C:\" \" >nul && echo This script relies on Miniconda which can not be silently installed under a path with spaces. && goto end\n\n@rem Check for special characters in installation path\nset \"SPCHARMESSAGE=\"WARNING: Special characters were detected in the installation path!\" \"         This can cause the installation to fail!\"\"\necho \"%CD%\"| findstr /R /C:\"[!#\\$%&()\\*+,;<=>?@\\[\\]\\^`{|}~]\" >nul && (\n\tcall :PrintBigMessage %SPCHARMESSAGE%\n)\nset SPCHARMESSAGE=\n\n@rem fix failed install when installing to a separate drive\nset TMP=%cd%\\installer_files\nset TEMP=%cd%\\installer_files\n\n@rem deactivate existing conda envs as needed to avoid conflicts\n(call conda deactivate && call conda deactivate && call conda deactivate) 2>nul\n\n@rem config\nset INSTALL_DIR=%cd%\\installer_files\nset CONDA_ROOT_PREFIX=%cd%\\installer_files\\conda\nset INSTALL_ENV_DIR=%cd%\\installer_files\\env\nset MINICONDA_DOWNLOAD_URL=https://repo.anaconda.com/miniconda/Miniconda3-py310_23.3.1-0-Windows-x86_64.exe\nset MINICONDA_CHECKSUM=307194e1f12bbeb52b083634e89cc67db4f7980bd542254b43d3309eaf7cb358\nset conda_exists=F\n\n@rem figure out whether git and conda needs to be installed\ncall \"%CONDA_ROOT_PREFIX%\\_conda.exe\" --version >nul 2>&1\nif \"%ERRORLEVEL%\" EQU \"0\" set conda_exists=T\n\n@rem (if necessary) install git and conda into a contained environment\n@rem download conda\nif \"%conda_exists%\" == \"F\" (\n\techo Downloading Miniconda from %MINICONDA_DOWNLOAD_URL% to %INSTALL_DIR%\\miniconda_installer.exe\n\n\tmkdir \"%INSTALL_DIR%\"\n\tcall curl -Lk \"%MINICONDA_DOWNLOAD_URL%\" > \"%INSTALL_DIR%\\miniconda_installer.exe\" || ( echo. && echo Miniconda failed to download. && goto end )\n\n\tfor /f %%a in ('CertUtil -hashfile \"%INSTALL_DIR%\\miniconda_installer.exe\" SHA256 ^| find /i /v \" \" ^| find /i \"%MINICONDA_CHECKSUM%\"') do (\n\t\tset \"output=%%a\"\n\t)\n\n\tif not defined output (\n\t\techo The checksum verification for miniconda_installer.exe has failed.\n\t\tdel \"%INSTALL_DIR%\\miniconda_installer.exe\"\n\t\tgoto end\n\t) else (\n\t\techo The checksum verification for miniconda_installer.exe has passed successfully.\n\t)\n\n\techo Installing Miniconda to %CONDA_ROOT_PREFIX%\n\tstart /wait \"\" \"%INSTALL_DIR%\\miniconda_installer.exe\" /InstallationType=JustMe /NoShortcuts=1 /AddToPath=0 /RegisterPython=0 /NoRegistry=1 /S /D=%CONDA_ROOT_PREFIX%\n\n\t@rem test the conda binary\n\techo Miniconda version:\n\tcall \"%CONDA_ROOT_PREFIX%\\_conda.exe\" --version || ( echo. && echo Miniconda not found. && goto end )\n\n\t@rem delete the Miniconda installer\n\tdel \"%INSTALL_DIR%\\miniconda_installer.exe\"\n)\n\n@rem create the installer env\nif not exist \"%INSTALL_ENV_DIR%\" (\n\techo Packages to install: %PACKAGES_TO_INSTALL%\n\tcall \"%CONDA_ROOT_PREFIX%\\_conda.exe\" create --no-shortcuts -y -k --prefix \"%INSTALL_ENV_DIR%\" python=3.11 || ( echo. && echo Conda environment creation failed. && goto end )\n)\n\n@rem check if conda environment was actually created\nif not exist \"%INSTALL_ENV_DIR%\\python.exe\" ( echo. && echo Conda environment is empty. && goto end )\n\n@rem environment isolation\nset PYTHONNOUSERSITE=1\nset PYTHONPATH=\nset PYTHONHOME=\nset \"CUDA_PATH=%INSTALL_ENV_DIR%\"\nset \"CUDA_HOME=%CUDA_PATH%\"\n\n@rem activate installer env\ncall \"%CONDA_ROOT_PREFIX%\\condabin\\conda.bat\" activate \"%INSTALL_ENV_DIR%\" || ( echo. && echo Miniconda hook not found. && goto end )\n\n@rem setup installer env\ncall python one_click.py %*\n\n@rem below are functions for the script   next line skips these during normal execution\ngoto end\n\n:PrintBigMessage\necho. && echo.\necho *******************************************************************\nfor %%M in (%*) do echo * %%~M\necho *******************************************************************\necho. && echo.\nexit /b\n\n:end\npause\n"
        },
        {
          "name": "start_wsl.bat",
          "type": "blob",
          "size": 0.23,
          "content": "@echo off\n\ncd /D \"%~dp0\"\n\nset PATH=%PATH%;%SystemRoot%\\system32\n\n@rem sed -i 's/\\x0D$//' ./wsl.sh converts newlines to unix format in the wsl script\ncall wsl -e bash -lic \"sed -i 's/\\x0D$//' ./wsl.sh; source ./wsl.sh %*\"\n\n:end\npause\n"
        },
        {
          "name": "training",
          "type": "tree",
          "content": null
        },
        {
          "name": "update_wizard_linux.sh",
          "type": "blob",
          "size": 0.86,
          "content": "#!/usr/bin/env bash\n\ncd \"$(dirname \"${BASH_SOURCE[0]}\")\"\n\nif [[ \"$(pwd)\" =~ \" \" ]]; then echo This script relies on Miniconda which can not be silently installed under a path with spaces. && exit; fi\n\n# deactivate existing conda envs as needed to avoid conflicts\n{ conda deactivate && conda deactivate && conda deactivate; } 2> /dev/null\n\n# config\nCONDA_ROOT_PREFIX=\"$(pwd)/installer_files/conda\"\nINSTALL_ENV_DIR=\"$(pwd)/installer_files/env\"\n\n# environment isolation\nexport PYTHONNOUSERSITE=1\nunset PYTHONPATH\nunset PYTHONHOME\nexport CUDA_PATH=\"$INSTALL_ENV_DIR\"\nexport CUDA_HOME=\"$CUDA_PATH\"\n\n# activate installer env\nsource \"$CONDA_ROOT_PREFIX/etc/profile.d/conda.sh\" # otherwise conda complains about 'shell not initialized' (needed when running in a script)\nconda activate \"$INSTALL_ENV_DIR\"\n\n# update installer env\npython one_click.py --update-wizard && echo -e \"\\nDone!\"\n"
        },
        {
          "name": "update_wizard_macos.sh",
          "type": "blob",
          "size": 0.85,
          "content": "#!/bin/bash\n\ncd \"$(dirname \"${BASH_SOURCE[0]}\")\"\n\nif [[ \"$(pwd)\" =~ \" \" ]]; then echo This script relies on Miniconda which can not be silently installed under a path with spaces. && exit; fi\n\n# deactivate existing conda envs as needed to avoid conflicts\n{ conda deactivate && conda deactivate && conda deactivate; } 2> /dev/null\n\n# config\nCONDA_ROOT_PREFIX=\"$(pwd)/installer_files/conda\"\nINSTALL_ENV_DIR=\"$(pwd)/installer_files/env\"\n\n# environment isolation\nexport PYTHONNOUSERSITE=1\nunset PYTHONPATH\nunset PYTHONHOME\nexport CUDA_PATH=\"$INSTALL_ENV_DIR\"\nexport CUDA_HOME=\"$CUDA_PATH\"\n\n# activate installer env\nsource \"$CONDA_ROOT_PREFIX/etc/profile.d/conda.sh\" # otherwise conda complains about 'shell not initialized' (needed when running in a script)\nconda activate \"$INSTALL_ENV_DIR\"\n\n# update installer env\npython one_click.py --update-wizard && echo -e \"\\nDone!\"\n"
        },
        {
          "name": "update_wizard_windows.bat",
          "type": "blob",
          "size": 0.98,
          "content": "@echo off\n\ncd /D \"%~dp0\"\n\nset PATH=%PATH%;%SystemRoot%\\system32\n\necho \"%CD%\"| findstr /C:\" \" >nul && echo This script relies on Miniconda which can not be silently installed under a path with spaces. && goto end\n\n@rem fix failed install when installing to a separate drive\nset TMP=%cd%\\installer_files\nset TEMP=%cd%\\installer_files\n\n@rem deactivate existing conda envs as needed to avoid conflicts\n(call conda deactivate && call conda deactivate && call conda deactivate) 2>nul\n\n@rem config\nset CONDA_ROOT_PREFIX=%cd%\\installer_files\\conda\nset INSTALL_ENV_DIR=%cd%\\installer_files\\env\n\n@rem environment isolation\nset PYTHONNOUSERSITE=1\nset PYTHONPATH=\nset PYTHONHOME=\nset \"CUDA_PATH=%INSTALL_ENV_DIR%\"\nset \"CUDA_HOME=%CUDA_PATH%\"\n\n@rem activate installer env\ncall \"%CONDA_ROOT_PREFIX%\\condabin\\conda.bat\" activate \"%INSTALL_ENV_DIR%\" || ( echo. && echo Miniconda hook not found. && goto end )\n\n@rem update installer env\ncall python one_click.py --update-wizard && (\n    echo.\n    echo Done!\n)\n\n:end\npause\n"
        },
        {
          "name": "update_wizard_wsl.bat",
          "type": "blob",
          "size": 0.29,
          "content": "@echo off\n\ncd /D \"%~dp0\"\n\nset PATH=%PATH%;%SystemRoot%\\system32\n\n@rem sed -i 's/\\x0D$//' ./wsl.sh converts newlines to unix format in the wsl script   calling wsl.sh with 'update' will run updater\ncall wsl -e bash -lic \"sed -i 's/\\x0D$//' ./wsl.sh; source ./wsl.sh update-wizard\"\n\n:end\npause\n"
        },
        {
          "name": "wsl.sh",
          "type": "blob",
          "size": 4.27,
          "content": "#!/bin/bash\n\n# detect if build-essential is missing or broken\nif ! dpkg-query -W -f'${Status}' \"build-essential\" 2>/dev/null | grep -q \"ok installed\"; then\necho \"build-essential not found or broken!\n\nA C++ compiler is required to build needed Python packages!\nTo install one, run cmd_wsl.bat and enter these commands:\n\nsudo apt-get update\nsudo apt-get install build-essential\n\"\nread -n1 -p \"Continue the installer anyway? [y,n]\" EXIT_PROMPT\n# only continue if user inputs 'y' else exit\nif ! [[ $EXIT_PROMPT == \"Y\" || $EXIT_PROMPT == \"y\" ]]; then exit; fi\nfi\n\n# deactivate existing conda envs as needed to avoid conflicts\n{ conda deactivate && conda deactivate && conda deactivate; } 2> /dev/null\n\n# config   unlike other scripts, can't use current directory due to file IO bug in WSL, needs to be in virtual drive\nINSTALL_DIR_PREFIX=\"$HOME/text-gen-install\"\nif [[ ! $(realpath \"$(pwd)/..\") = /mnt/* ]]; then\n    INSTALL_DIR_PREFIX=\"$(realpath \"$(pwd)/..\")\" && INSTALL_INPLACE=1\nfi\nINSTALL_DIR=\"$INSTALL_DIR_PREFIX/text-generation-webui\"\nCONDA_ROOT_PREFIX=\"$INSTALL_DIR/installer_files/conda\"\nINSTALL_ENV_DIR=\"$INSTALL_DIR/installer_files/env\"\nMINICONDA_DOWNLOAD_URL=\"https://repo.anaconda.com/miniconda/Miniconda3-py310_23.3.1-0-Linux-x86_64.sh\"\nconda_exists=\"F\"\n\n# environment isolation\nexport PYTHONNOUSERSITE=1\nunset PYTHONPATH\nunset PYTHONHOME\nexport CUDA_PATH=\"$INSTALL_ENV_DIR\"\nexport CUDA_HOME=\"$CUDA_PATH\"\n\n# /usr/lib/wsl/lib needs to be added to LD_LIBRARY_PATH to fix years-old bug in WSL where GPU drivers aren't linked properly\nexport LD_LIBRARY_PATH=\"$CUDA_HOME/lib:/usr/lib/wsl/lib:$LD_LIBRARY_PATH\"\n\n# open bash cli if called with 'wsl.sh cmd' with workarounds for existing conda\nif [ \"$1\" == \"cmd\" ]; then\n    exec bash --init-file <(echo \". ~/.bashrc; conda deactivate 2> /dev/null; cd $INSTALL_DIR || cd $HOME; source $CONDA_ROOT_PREFIX/etc/profile.d/conda.sh; conda activate $INSTALL_ENV_DIR\")\n    exit\nfi\n\nif [[ \"$INSTALL_DIR\" =~ \" \" ]]; then echo This script relies on Miniconda which can not be silently installed under a path with spaces. && exit; fi\n\n# create install dir if missing\nif [ ! -d \"$INSTALL_DIR\" ]; then mkdir -p \"$INSTALL_DIR\" || exit; fi\n\n# figure out whether git and conda needs to be installed\nif \"$CONDA_ROOT_PREFIX/bin/conda\" --version &>/dev/null; then conda_exists=\"T\"; fi\n\n# (if necessary) install git and conda into a contained environment\n# download miniconda\nif [ \"$conda_exists\" == \"F\" ]; then\n    echo \"Downloading Miniconda from $MINICONDA_DOWNLOAD_URL to $INSTALL_DIR/miniconda_installer.sh\"\n\n    curl -L \"$MINICONDA_DOWNLOAD_URL\" > \"$INSTALL_DIR/miniconda_installer.sh\"\n\n    chmod u+x \"$INSTALL_DIR/miniconda_installer.sh\"\n    bash \"$INSTALL_DIR/miniconda_installer.sh\" -b -p $CONDA_ROOT_PREFIX\n\n    # test the conda binary\n    echo \"Miniconda version:\"\n    \"$CONDA_ROOT_PREFIX/bin/conda\" --version\n\n    # delete the Miniconda installer\n    rm \"$INSTALL_DIR/miniconda_installer.sh\"\nfi\n\n# create the installer env\nif [ ! -e \"$INSTALL_ENV_DIR\" ]; then\n    \"$CONDA_ROOT_PREFIX/bin/conda\" create -y -k --prefix \"$INSTALL_ENV_DIR\" python=3.11 git\nfi\n\n# check if conda environment was actually created\nif [ ! -e \"$INSTALL_ENV_DIR/bin/python\" ]; then\n    echo \"Conda environment is empty.\"\n    exit\nfi\n\n# activate installer env\nsource \"$CONDA_ROOT_PREFIX/etc/profile.d/conda.sh\" # otherwise conda complains about 'shell not initialized' (needed when running in a script)\nconda activate \"$INSTALL_ENV_DIR\"\n\npushd $INSTALL_DIR 1> /dev/null || exit\n\nif [ ! -f \"./server.py\" ]; then\n    git init -b main\n    git remote add origin https://github.com/oobabooga/text-generation-webui\n    git fetch\n    git remote set-head origin -a\n    git reset origin/HEAD --hard\n    git branch --set-upstream-to=origin/HEAD\n    git restore -- . :!./CMD_FLAGS.txt\nfi\n\n# copy CMD_FLAGS.txt to install dir to allow edits within Windows\nif [[ $INSTALL_INPLACE != 1 ]]; then\n    # workaround for old install migration\n    if [ ! -f \"./wsl.sh\" ]; then\n        git pull || exit\n        [ -f \"../webui.py\" ] && mv \"../webui.py\" \"../webui-old.py\"\n    fi\n    if [ -f \"$(dirs +1)/CMD_FLAGS.txt\" ] && [ -f \"./CMD_FLAGS.txt\" ]; then cp -u \"$(dirs +1)/CMD_FLAGS.txt\" \"$INSTALL_DIR\"; fi\nfi\n\n# setup installer env   update env if called with 'wsl.sh update'\ncase \"$1\" in\n(\"update-wizard\") python one_click.py --update-wizard;;\n(*) python one_click.py $@;;\nesac\n"
        }
      ]
    }
  ]
}