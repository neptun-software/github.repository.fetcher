{
  "metadata": {
    "timestamp": 1736557336955,
    "page": 284,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "NARKOZ/hacker-scripts",
      "stars": 47807,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".env.example",
          "type": "blob",
          "size": 0.27,
          "content": "# Set these environment variables or edit and copy this file into `.env`\n# See: https://github.com/bkeepers/dotenv\n\nTWILIO_ACCOUNT_SID=ACxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\nTWILIO_AUTH_TOKEN=yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\nGMAIL_USERNAME=admin@example.org\nGMAIL_PASSWORD=password\n"
        },
        {
          "name": "CSharp",
          "type": "tree",
          "content": null
        },
        {
          "name": "R",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.36,
          "content": "\nEnglish | [简体中文](./README.zh-CN.md)\n\n# Hacker Scripts\n\nBased on a _[true\nstory](https://www.jitbit.com/alexblog/249-now-thats-what-i-call-a-hacker/)_:\n\n> xxx: OK, so, our build engineer has left for another company. The dude was literally living inside the terminal. You know, that type of a guy who loves Vim, creates diagrams in Dot and writes wiki-posts in Markdown... If something - anything - requires more than 90 seconds of his time, he writes a script to automate that.\n\n> xxx: So we're sitting here, looking through his, uhm, \"legacy\"\n\n> xxx: You're gonna love this\n\n> xxx: [`smack-my-bitch-up.sh`](https://github.com/NARKOZ/hacker-scripts/blob/master/smack-my-bitch-up.sh) - sends a text message \"late at work\" to his wife (apparently). Automatically picks reasons from an array of strings, randomly. Runs inside a cron-job. The job fires if there are active SSH-sessions on the server after 9pm with his login.\n\n> xxx: [`kumar-asshole.sh`](https://github.com/NARKOZ/hacker-scripts/blob/master/kumar-asshole.sh) - scans the inbox for emails from \"Kumar\" (a DBA at our clients). Looks for keywords like \"help\", \"trouble\", \"sorry\" etc. If keywords are found - the script SSHes into the clients server and rolls back the staging database to the latest backup. Then sends a reply \"no worries mate, be careful next time\".\n\n> xxx: [`hangover.sh`](https://github.com/NARKOZ/hacker-scripts/blob/master/hangover.sh) - another cron-job that is set to specific dates. Sends automated emails like \"not feeling well/gonna work from home\" etc. Adds a random \"reason\" from another predefined array of strings. Fires if there are no interactive sessions on the server at 8:45am.\n\n> xxx: (and the oscar goes to) [`fucking-coffee.sh`](https://github.com/NARKOZ/hacker-scripts/blob/master/fucking-coffee.sh) - this one waits exactly 17 seconds (!), then opens a telnet session to our coffee-machine (we had no frikin idea the coffee machine is on the network, runs linux and has a TCP socket up and running) and sends something like `sys brew`. Turns out this thing starts brewing a mid-sized half-caf latte and waits another 24 (!) seconds before pouring it into a cup. The timing is exactly how long it takes to walk to the machine from the dudes desk.\n\n> xxx: holy sh*t I'm keeping those\n\nOriginal: http://bash.im/quote/436725 (in Russian)  (Archive.org [link](https://web.archive.org/web/20210226092253/http://bash.im/quote/436725))\nPull requests with other implementations (Python, Perl, Shell, etc) are welcome.\n\n## Usage\n\nYou need these environment variables:\n\n```sh\n# used in `smack-my-bitch-up` and `hangover` scripts\nTWILIO_ACCOUNT_SID=ACxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\nTWILIO_AUTH_TOKEN=yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\n\n# used in `kumar_asshole` script\nGMAIL_USERNAME=admin@example.org\nGMAIL_PASSWORD=password\n```\n\nFor Ruby scripts you need to install gems:\n`gem install dotenv twilio-ruby gmail`\n\n## Cron jobs\n\n```sh\n# Runs `smack-my-bitch-up.sh` monday to friday at 9:20 pm.\n20 21 * * 1-5 /path/to/scripts/smack-my-bitch-up.sh >> /path/to/smack-my-bitch-up.log 2>&1\n\n# Runs `hangover.sh` monday to friday at 8:45 am.\n45 8 * * 1-5 /path/to/scripts/hangover.sh >> /path/to/hangover.log 2>&1\n\n# Runs `kumar-asshole.sh` every 10 minutes.\n*/10 * * * * /path/to/scripts/kumar-asshole.sh\n\n# Runs `fucking-coffee.sh` hourly from 9am to 6pm on weekdays.\n0 9-18 * * 1-5 /path/to/scripts/fucking-coffee.sh\n```\n\n---\nCode is released under WTFPL.\n"
        },
        {
          "name": "README.zh-CN.md",
          "type": "blob",
          "size": 3.88,
          "content": "# Hacker Scripts\n\n根据 *[真实故事](https://www.jitbit.com/alexblog/249-now-thats-what-i-call-a-hacker/)*  改编:\n\n> xxx: 是这样的，我们的构建工程师离职去了另外一家公司，这货基本算是生活在终端里。 你知道么，这人热爱Vim，用Dot作图，甚至用MarkDown来写维基帖子...，如果有什么事情要花上他超过90秒，他一定会整个脚本来让这件事变得“自动化”。\n\n> xxx: 我们现在坐在他的工位上，看着他留下来的这些，呃，“遗产”？\n\n> xxx: 我觉得你们会喜欢这些的\n\n> xxx: [`smack-my-bitch-up.sh(拍老婆马屁脚本)`](https://github.com/NARKOZ/hacker-scripts/blob/master/smack-my-bitch-up.sh) - 它会给他的老婆（很明显是他老婆）发送一条“今晚要加班了”的短信，再自动从文本库中随机地选择一条理由。这个脚本被设置为定时触发，而且只有在工作日晚9点以后，服务器上还有他登陆的SSH进程在运行时才会执行。\n\n> xxx: [`kumar-asshole.sh（库马尔个傻*）`](https://github.com/NARKOZ/hacker-scripts/blob/master/kumar-asshole.sh) - 这个脚本会自动扫描邮箱，如果发现其中有库马尔（库马尔是我们客户公司的一位数据库管理员）发来的邮件，就会在其中寻找关键字如“求助”，“遇到麻烦了”，“抱歉”等等，如果发现了这些关键字，这个脚本会通过SSH连接上客户公司的服务器，把中间数据库（staging database）回滚到最新一次的可用备份。然后它会给邮件发送回复，“没事了哥们，下次小心点哈”。\n\n> xxx: [`hangover.sh（宿醉）`](https://github.com/NARKOZ/hacker-scripts/blob/master/hangover.sh) - 同样是个定时执行的任务，被设置为在特定日期触发，它会自动发送诸如“今天不太舒服”或“今天我在家上班”之类的邮件，同样会从文本库里随机选取一条理由。这个任务会在工作日清晨8点45分以后服务器上仍然没有可交互的SSH进程时真正执行。\n\n> xxx: (最牛的就是接下来这个) [`fucking-coffee.sh（**的咖啡）`](https://github.com/NARKOZ/hacker-scripts/blob/master/fucking-coffee.sh) - 这个脚本在启动之后，会先等待恰好17秒（！），然后启动一个登录进程连接到我们的咖啡机（淦，我们之前完全不知道我们的咖啡机是联网的，上面还运行着Linux系统，甚至还跑着TCP socket连接！），然后它会发送类似“系统！开始煮咖啡！”之类的消息，结果这条消息会让咖啡机开始工作，煮一杯 中杯大小、半咖啡因的拿铁，再等待恰好24秒（！）后，才倒进咖啡杯里。这些时间加起来刚好就是这位程序员从自己的工位走到机器前要的时间。\n\n> xxx: 天了噜我要把这些保留下来。\n\n原文: http://bash.im/quote/436725 (俄语)\n\n欢迎使用其它语言来实现 (Python, Perl, Shell等等)并提交PR。\n\n## 用法\n\n你需要以下这些环境变量：\n\n```bash\n# used in `smack-my-bitch-up` and `hangover` scripts\nTWILIO_ACCOUNT_SID=ACxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\nTWILIO_AUTH_TOKEN=yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\n\n# used in `kumar_asshole` script\nGMAIL_USERNAME=admin@example.org\nGMAIL_PASSWORD=password\n```\n\n为了执行Ruby脚本，你需要安装gems: `gem install dotenv twilio-ruby gmail`\n\n## 定时任务\n\n```bash\n# Runs `smack-my-bitch-up.sh` monday to friday at 9:20 pm.\n20 21 * * 1-5 /path/to/scripts/smack-my-bitch-up.sh >> /path/to/smack-my-bitch-up.log 2>&1\n\n# Runs `hangover.sh` monday to friday at 8:45 am.\n45 8 * * 1-5 /path/to/scripts/hangover.sh >> /path/to/hangover.log 2>&1\n\n# Runs `kumar-asshole.sh` every 10 minutes.\n*/10 * * * * /path/to/scripts/kumar-asshole.sh\n\n# Runs `fucking-coffee.sh` hourly from 9am to 6pm on weekdays.\n0 9-18 * * 1-5 /path/to/scripts/fucking-coffee.sh\n```\n\n------\n\n代码的使用遵循WTFPL（Do What The Fuck You Want To Public License）协议。\n"
        },
        {
          "name": "clojure",
          "type": "tree",
          "content": null
        },
        {
          "name": "coffee",
          "type": "tree",
          "content": null
        },
        {
          "name": "fucking-coffee.sh",
          "type": "blob",
          "size": 0.08,
          "content": "#!/bin/sh\n#\n# Requires fucking_coffee script in your bin\n#\n\nexec fucking_coffee\n"
        },
        {
          "name": "fucking_coffee.rb",
          "type": "blob",
          "size": 0.45,
          "content": "#!/usr/bin/env ruby\n\n# Exit early if no sessions with my username are found\nexit unless `who -q`.include? ENV['USER']\n\nrequire 'net/telnet'\n\ncoffee_machine_ip = '10.10.42.42'\npassword = '1234'\npassword_prompt = 'Password: '\ndelay_before_brew = 17\ndelay = 24\n\nsleep delay_before_brew\ncon = Net::Telnet.new('Host' => coffee_machine_ip)\ncon.cmd('String' => password, 'Match' => /#{password_prompt}/)\ncon.cmd('sys brew')\nsleep delay\ncon.cmd('sys pour')\ncon.close\n"
        },
        {
          "name": "go",
          "type": "tree",
          "content": null
        },
        {
          "name": "groovy",
          "type": "tree",
          "content": null
        },
        {
          "name": "hangover.rb",
          "type": "blob",
          "size": 0.67,
          "content": "#!/usr/bin/env ruby\n\n# Exit early if sessions with my username are found\nexit if `who -q`.include? ENV['USER']\n\nrequire 'dotenv'\nrequire 'twilio-ruby'\n\nDotenv.load\n\nTWILIO_ACCOUNT_SID = ENV['TWILIO_ACCOUNT_SID']\nTWILIO_AUTH_TOKEN  = ENV['TWILIO_AUTH_TOKEN']\n\n@twilio = Twilio::REST::Client.new TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN\n\n# Phone numbers\nmy_number      = '+xxx'\nnumber_of_boss = '+xxx'\n\nexcuse = [\n  'Locked out',\n  'Pipes broke',\n  'Food poisoning',\n  'Not feeling well'\n].sample\n\n# Send a text message\n@twilio.messages.create(\n  from: my_number, to: number_of_boss,\n  body: \"Gonna work from home. #{excuse}\"\n)\n\n# Log this\nputs \"Message sent at: #{Time.now} | Excuse: #{excuse}\"\n"
        },
        {
          "name": "hangover.sh",
          "type": "blob",
          "size": 0.67,
          "content": "#!/bin/sh -e\n\n# Exit early if any session with my username is found\nif who | grep -wq $USER; then\n  exit\nfi\n\n# Phone numbers\nMY_NUMBER='+xxx'\nNUMBER_OF_BOSS='+xxx'\n\nEXCUSES=(\n  'Locked out'\n  'Pipes broke'\n  'Food poisoning'\n  'Not feeling well'\n)\nrand=$[ $RANDOM % ${#EXCUSES[@]} ]\n\nRANDOM_EXCUSE=${EXCUSES[$rand]}\nMESSAGE=\"Gonna work from home. \"$RANDOM_EXCUSE\n\n# Send a text message\nRESPONSE=`curl -fSs -u \"$TWILIO_ACCOUNT_SID:$TWILIO_AUTH_TOKEN\" \\\n  -d \"From=$MY_NUMBER\" -d \"To=$NUMBER_OF_BOSS\" -d \"Body=$MESSAGE\" \\\n  \"https://api.twilio.com/2010-04-01/Accounts/$TWILIO_ACCOUNT_SID/Messages\"`\n\n# Log errors\nif [ $? -gt 0 ]; then\n  echo \"Failed to send SMS: $RESPONSE\"\n  exit 1\nfi\n"
        },
        {
          "name": "java",
          "type": "tree",
          "content": null
        },
        {
          "name": "kotlin",
          "type": "tree",
          "content": null
        },
        {
          "name": "kumar-asshole.sh",
          "type": "blob",
          "size": 0.08,
          "content": "#!/bin/sh\n#\n# Requires kumar_asshole script in your bin\n#\n\nexec kumar_asshole\n"
        },
        {
          "name": "kumar_asshole.rb",
          "type": "blob",
          "size": 1.03,
          "content": "#!/usr/bin/env ruby\n\nrequire 'dotenv'\nrequire 'gmail'\n\nDotenv.load\n\nGMAIL_USERNAME = ENV['GMAIL_USERNAME']\nGMAIL_PASSWORD = ENV['GMAIL_PASSWORD']\n\nGMAIL = Gmail.connect(GMAIL_USERNAME, GMAIL_PASSWORD)\nKUMARS_EMAIL = 'kumar.a@example.com'\n\nDB_NAME_REGEX  = /\\S+_staging/\nKEYWORDS_REGEX = /sorry|help|wrong/i\n\ndef create_reply(subject)\n  GMAIL.compose do\n    to KUMARS_EMAIL\n    subject \"RE: #{subject}\"\n    body \"No problem. I've fixed it. \\n\\n Please be careful next time.\"\n  end\nend\n\nGMAIL.inbox.find(:unread, from: KUMARS_EMAIL).each do |email|\n  if email.body.raw_source[KEYWORDS_REGEX] && (db_name = email.body.raw_source[DB_NAME_REGEX])\n    backup_file = \"/home/backups/databases/#{db_name}-\" + (Date.today - 1).strftime('%Y%m%d') + '.gz'\n    abort 'ERROR: Backup file not found' unless File.exist?(backup_file)\n\n    # Restore DB\n    `gunzip -c #{backup_file} | psql #{db_name}`\n\n    # Mark as read, add label and reply\n    email.read!\n    email.label('Database fixes')\n    reply = create_reply(email.subject)\n    GMAIL.deliver(reply)\n  end\nend\n"
        },
        {
          "name": "nodejs",
          "type": "tree",
          "content": null
        },
        {
          "name": "perl",
          "type": "tree",
          "content": null
        },
        {
          "name": "php",
          "type": "tree",
          "content": null
        },
        {
          "name": "powershell",
          "type": "tree",
          "content": null
        },
        {
          "name": "python",
          "type": "tree",
          "content": null
        },
        {
          "name": "python3",
          "type": "tree",
          "content": null
        },
        {
          "name": "scala",
          "type": "tree",
          "content": null
        },
        {
          "name": "smack-my-bitch-up.sh",
          "type": "blob",
          "size": 0.67,
          "content": "#!/bin/sh -e\n\n# Exit early if no sessions with my username are found\nif ! who | grep -wq $USER; then\n  exit\nfi\n\n# Phone numbers\nMY_NUMBER='+xxx'\nHER_NUMBER='+xxx'\n\nREASONS=(\n  'Working hard'\n  'Gotta ship this feature'\n  'Someone fucked the system again'\n)\nrand=$[ $RANDOM % ${#REASONS[@]} ]\n\nRANDOM_REASON=${REASONS[$rand]}\nMESSAGE=\"Late at work. \"$RANDOM_REASON\n\n# Send a text message\nRESPONSE=`curl -fSs -u \"$TWILIO_ACCOUNT_SID:$TWILIO_AUTH_TOKEN\" \\\n  -d \"From=$MY_NUMBER\" -d \"To=$HER_NUMBER\" -d \"Body=$MESSAGE\" \\\n  \"https://api.twilio.com/2010-04-01/Accounts/$TWILIO_ACCOUNT_SID/Messages\"`\n\n# Log errors\nif [ $? -gt 0 ]; then\n  echo \"Failed to send SMS: $RESPONSE\"\n  exit 1\nfi\n"
        },
        {
          "name": "smack_my_bitch_up.rb",
          "type": "blob",
          "size": 0.67,
          "content": "#!/usr/bin/env ruby\n\n# Exit early if no sessions with my username are found\nexit unless `who -q`.include? ENV['USER']\n\nrequire 'dotenv'\nrequire 'twilio-ruby'\n\nDotenv.load\n\nTWILIO_ACCOUNT_SID = ENV['TWILIO_ACCOUNT_SID']\nTWILIO_AUTH_TOKEN  = ENV['TWILIO_AUTH_TOKEN']\n\n@twilio = Twilio::REST::Client.new TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN\n\n# Phone numbers\nmy_number  = '+xxx'\nher_number = '+xxx'\n\nreason = [\n  'Working hard',\n  'Gotta ship this feature',\n  'Someone fucked the system again'\n].sample\n\n# Send a text message\n@twilio.messages.create(\n  from: my_number, to: her_number, body: \"Late at work. #{reason}\"\n)\n\n# Log this\nputs \"Message sent at: #{Time.now} | Reason: #{reason}\"\n"
        }
      ]
    }
  ]
}