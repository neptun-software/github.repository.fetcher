{
  "metadata": {
    "timestamp": 1736557313980,
    "page": 238,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "deepfakes/faceswap",
      "stars": 52840,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.03,
          "content": "*\n!requirements*\n!_requirements*\n"
        },
        {
          "name": ".fs_cache",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.38,
          "content": "# Global (Exclude all + retain files that are unlikely to pollute local installs)\n*\n!*.keep\n!*.md\n\n# Requirements files\n!/requirements/\n!/requirements/*requirements*.txt\n!/requirements/*conda*.yml\n\n# Root files\n!Dockerfile*\n!.pylintrc\n!setup.cfg\n!.travis.yml\n!/faceswap.py\n!/setup.py\n!/tools.py\n!/update_deps.py\n\n# Support files\n!/.github/\n!/.github/workflows/\n!/.github/workflows/*.yml\n!.install/\n!.install/**\n!config/\n!.readthedocs.yml\n!docs/\n!docs/full**\n!docs/_static**\n!locales/\n!locales/**\n!tests/\n!tests/**/\n!tests/**/*.py\n\n# Core files\n!.fs_cache\n!lib/\n!lib/**/\n!lib/**/*.py\n!lib/gui/**/icons/*.png\n!lib/gui/**/themes/default.json\n!lib/gui/**/presets/**/*.json\n!plugins/\n!plugins/**/\n!plugins/**/*.py\n!scripts/\n!scripts/*.py\n!tools/\n!tools/**/\n!tools/**/*.py\n\n# GUI Plugin Presets\n!lib/gui/**/presets/train/model_phaze_a_dfaker_preset.json\n!lib/gui/**/presets/train/model_phaze_a_dfl-h128_preset.json\n!lib/gui/**/presets/train/model_phaze_a_dfl-sae-df_preset.json\n!lib/gui/**/presets/train/model_phaze_a_dfl-sae-liae_preset.json\n!lib/gui/**/presets/train/model_phaze_a_dfl-saehd-df_preset.json\n!lib/gui/**/presets/train/model_phaze_a_dfl-saehd-liae_preset.json\n!lib/gui/**/presets/train/model_phaze_a_iae_preset.json\n!lib/gui/**/presets/train/model_phaze_a_lightweight_preset.json\n!lib/gui/**/presets/train/model_phaze_a_original_preset.json\n!lib/gui/**/presets/train/model_phaze_a_stojo_preset.json\n"
        },
        {
          "name": ".install",
          "type": "tree",
          "content": null
        },
        {
          "name": ".pylintrc",
          "type": "blob",
          "size": 14.88,
          "content": "[MASTER]\n\n# A comma-separated list of package or module names from where C extensions may\n# be loaded. Extensions are loading into the active Python interpreter and may\n# run arbitrary code.\nextension-pkg-whitelist=cv2\n\n# Add files or directories to the blacklist. They should be base names, not\n# paths.\nignore=CVS\n\n# Add files or directories matching the regex patterns to the blacklist. The\n# regex matches against base names, not paths.\nignore-patterns=\n\n# Python code to execute, usually for sys.path manipulation such as\n# pygtk.require().\n#init-hook=\n\n# Use multiple processes to speed up Pylint. Specifying 0 will auto-detect the\n# number of processors available to use.\njobs=0\n\n# Control the amount of potential inferred values when inferring a single\n# object. This can help the performance when dealing with large functions or\n# complex, nested conditions.\nlimit-inference-results=100\n\n# List of plugins (as comma separated values of python modules names) to load,\n# usually to register additional checkers.\nload-plugins=\n\n# Pickle collected data for later comparisons.\npersistent=yes\n\n# Specify a configuration file.\n#rcfile=\n\n# When enabled, pylint would attempt to guess common misconfiguration and emit\n# user-friendly hints instead of false-positive error messages.\nsuggestion-mode=yes\n\n# Allow loading of arbitrary C extensions. Extensions are imported into the\n# active Python interpreter and may run arbitrary code.\nunsafe-load-any-extension=no\n\n\n[MESSAGES CONTROL]\n\n# Only show warnings with the listed confidence levels. Leave empty to show\n# all. Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED.\nconfidence=\n\n# Disable the message, report, category or checker with the given id(s). You\n# can either give multiple identifiers separated by comma (,) or put this\n# option multiple times (only on the command line, not in the configuration\n# file where it should appear only once). You can also use \"--disable=all\" to\n# disable everything first and then reenable specific checks. For example, if\n# you want to run only the similarities checker, you can use \"--disable=all\n# --enable=similarities\". If you want to run only the classes checker, but have\n# no Warning level messages displayed, use \"--disable=all --enable=classes\n# --disable=W\".\ndisable=raw-checker-failed,\n        bad-inline-option,\n        locally-disabled,\n        file-ignored,\n        suppressed-message,\n        useless-suppression,\n        deprecated-pragma,\n        use-symbolic-message-instead\n\n# Enable the message, report, category or checker with the given id(s). You can\n# either give multiple identifier separated by comma (,) or put this option\n# multiple time (only on the command line, not in the configuration file where\n# it should appear only once). See also the \"--disable\" option for examples.\nenable=c-extension-no-member\n\n\n[REPORTS]\n\n# Python expression which should return a note less than 10 (10 is the highest\n# note). You have access to the variables errors warning, statement which\n# respectively contain the number of errors / warnings messages and the total\n# number of statements analyzed. This is used by the global evaluation report\n# (RP0004).\nevaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)\n\n# Template used to display messages. This is a python new-style format string\n# used to format the message information. See doc for all details.\n#msg-template=\n\n# Set the output format. Available formats are text, parseable, colorized, json\n# and msvs (visual studio). You can also give a reporter class, e.g.\n# mypackage.mymodule.MyReporterClass.\noutput-format=text\n\n# Tells whether to display a full report or only the messages.\nreports=no\n\n# Activate the evaluation score.\nscore=yes\n\n\n[REFACTORING]\n\n# Maximum number of nested blocks for function / method body\nmax-nested-blocks=5\n\n# Complete name of functions that never returns. When checking for\n# inconsistent-return-statements if a never returning function is called then\n# it will be considered as an explicit return statement and no message will be\n# printed.\nnever-returning-functions=sys.exit\n\n\n[BASIC]\n\n# Naming style matching correct argument names.\nargument-naming-style=snake_case\n\n# Regular expression matching correct argument names. Overrides argument-\n# naming-style.\n#argument-rgx=\n\n# Naming style matching correct attribute names.\nattr-naming-style=snake_case\n\n# Regular expression matching correct attribute names. Overrides attr-naming-\n# style.\n#attr-rgx=\n\n# Bad variable names which should always be refused, separated by a comma.\nbad-names=foo,\n          bar,\n          baz,\n          toto,\n          tutu,\n          tata\n\n# Naming style matching correct class attribute names.\nclass-attribute-naming-style=any\n\n# Regular expression matching correct class attribute names. Overrides class-\n# attribute-naming-style.\n#class-attribute-rgx=\n\n# Naming style matching correct class names.\nclass-naming-style=PascalCase\n\n# Regular expression matching correct class names. Overrides class-naming-\n# style.\n#class-rgx=\n\n# Naming style matching correct constant names.\nconst-naming-style=UPPER_CASE\n\n# Regular expression matching correct constant names. Overrides const-naming-\n# style.\n#const-rgx=\n\n# Minimum line length for functions/classes that require docstrings, shorter\n# ones are exempt.\ndocstring-min-length=-1\n\n# Naming style matching correct function names.\nfunction-naming-style=snake_case\n\n# Regular expression matching correct function names. Overrides function-\n# naming-style.\n#function-rgx=\n\n# Good variable names which should always be accepted, separated by a comma.\ngood-names=i,\n           j,\n           k,\n           ex,\n           Run,\n           _\n\n# Include a hint for the correct naming format with invalid-name.\ninclude-naming-hint=no\n\n# Naming style matching correct inline iteration names.\ninlinevar-naming-style=any\n\n# Regular expression matching correct inline iteration names. Overrides\n# inlinevar-naming-style.\n#inlinevar-rgx=\n\n# Naming style matching correct method names.\nmethod-naming-style=snake_case\n\n# Regular expression matching correct method names. Overrides method-naming-\n# style.\n#method-rgx=\n\n# Naming style matching correct module names.\nmodule-naming-style=snake_case\n\n# Regular expression matching correct module names. Overrides module-naming-\n# style.\n#module-rgx=\n\n# Colon-delimited sets of names that determine each other's naming style when\n# the name regexes allow several styles.\nname-group=\n\n# Regular expression which should only match function or class names that do\n# not require a docstring.\nno-docstring-rgx=^_\n\n# List of decorators that produce properties, such as abc.abstractproperty. Add\n# to this list to register other decorators that produce valid properties.\n# These decorators are taken in consideration only for invalid-name.\nproperty-classes=abc.abstractproperty\n\n# Naming style matching correct variable names.\nvariable-naming-style=snake_case\n\n# Regular expression matching correct variable names. Overrides variable-\n# naming-style.\n#variable-rgx=\n\n\n[LOGGING]\n\n# Format style used to check logging format string. `old` means using %\n# formatting, while `new` is for `{}` formatting.\nlogging-format-style=old\n\n# Logging modules to check that the string format arguments are in logging\n# function parameter format.\nlogging-modules=logging\n\n\n[SIMILARITIES]\n\n# Ignore comments when computing similarities.\nignore-comments=yes\n\n# Ignore docstrings when computing similarities.\nignore-docstrings=yes\n\n# Ignore imports when computing similarities.\nignore-imports=no\n\n# Minimum lines number of a similarity.\nmin-similarity-lines=4\n\n\n[SPELLING]\n\n# Limits count of emitted suggestions for spelling mistakes.\nmax-spelling-suggestions=4\n\n# Spelling dictionary name. Available dictionaries: none. To make it working\n# install python-enchant package..\nspelling-dict=\n\n# List of comma separated words that should not be checked.\nspelling-ignore-words=\n\n# A path to a file that contains private dictionary; one word per line.\nspelling-private-dict-file=\n\n# Tells whether to store unknown words to indicated private dictionary in\n# --spelling-private-dict-file option instead of raising a message.\nspelling-store-unknown-words=no\n\n\n[FORMAT]\n\n# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.\nexpected-line-ending-format=\n\n# Regexp for a line that is allowed to be longer than the limit.\nignore-long-lines=^\\s*(# )?<?https?://\\S+>?$\n\n# Number of spaces of indent required inside a hanging or continued line.\nindent-after-paren=4\n\n# String used as indentation unit. This is usually \"    \" (4 spaces) or \"\\t\" (1\n# tab).\nindent-string='    '\n\n# Maximum number of characters on a single line.\nmax-line-length=100\n\n# Maximum number of lines in a module.\nmax-module-lines=1000\n\n# Allow the body of a class to be on the same line as the declaration if body\n# contains single statement.\nsingle-line-class-stmt=no\n\n# Allow the body of an if to be on the same line as the test if there is no\n# else.\nsingle-line-if-stmt=no\n\n\n[STRING]\n\n# This flag controls whether the implicit-str-concat-in-sequence should\n# generate a warning on implicit string concatenation in sequences defined over\n# several lines.\ncheck-str-concat-over-line-jumps=no\n\n\n[VARIABLES]\n\n# List of additional names supposed to be defined in builtins. Remember that\n# you should avoid defining new builtins when possible.\nadditional-builtins=\n\n# Tells whether unused global variables should be treated as a violation.\nallow-global-unused-variables=yes\n\n# List of strings which can identify a callback function by name. A callback\n# name must start or end with one of those strings.\ncallbacks=cb_,\n          _cb\n\n# A regular expression matching the name of dummy variables (i.e. expected to\n# not be used).\ndummy-variables-rgx=_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_\n\n# Argument names that match this expression will be ignored. Default to name\n# with leading underscore.\nignored-argument-names=_.*|^ignored_|^unused_\n\n# Tells whether we should check for unused import in __init__ files.\ninit-import=no\n\n# List of qualified module names which can have objects that can redefine\n# builtins.\nredefining-builtins-modules=six.moves,past.builtins,future.builtins,builtins,io\n\n\n[TYPECHECK]\n\n# List of decorators that produce context managers, such as\n# contextlib.contextmanager. Add to this list to register other decorators that\n# produce valid context managers.\ncontextmanager-decorators=contextlib.contextmanager\n\n# List of members which are set dynamically and missed by pylint inference\n# system, and so shouldn't trigger E1101 when accessed. Python regular\n# expressions are accepted.\ngenerated-members=cv2.*\n\n# Tells whether missing members accessed in mixin class should be ignored. A\n# mixin class is detected if its name ends with \"mixin\" (case insensitive).\nignore-mixin-members=yes\n\n# Tells whether to warn about missing members when the owner of the attribute\n# is inferred to be None.\nignore-none=yes\n\n# This flag controls whether pylint should warn about no-member and similar\n# checks whenever an opaque object is returned when inferring. The inference\n# can return multiple potential results while evaluating a Python object, but\n# some branches might not be evaluated, which results in partial inference. In\n# that case, it might be useful to still emit no-member and other checks for\n# the rest of the inferred objects.\nignore-on-opaque-inference=yes\n\n# List of class names for which member attributes should not be checked (useful\n# for classes with dynamically set attributes). This supports the use of\n# qualified names.\nignored-classes=optparse.Values,thread._local,_thread._local\n\n# List of module names for which member attributes should not be checked\n# (useful for modules/projects where namespaces are manipulated during runtime\n# and thus existing member attributes cannot be deduced by static analysis. It\n# supports qualified module names, as well as Unix pattern matching.\nignored-modules=\n\n# Show a hint with possible names when a member name was not found. The aspect\n# of finding the hint is based on edit distance.\nmissing-member-hint=yes\n\n# The minimum edit distance a name should have in order to be considered a\n# similar match for a missing member name.\nmissing-member-hint-distance=1\n\n# The total number of similar names that should be taken in consideration when\n# showing a hint for a missing member.\nmissing-member-max-choices=1\n\n\n[MISCELLANEOUS]\n\n# List of note tags to take in consideration, separated by a comma.\nnotes=FIXME,\n      XXX,\n      TODO\n\n\n[DESIGN]\n\n# Maximum number of arguments for function / method.\nmax-args=10\n\n# Maximum number of attributes for a class (see R0902).\nmax-attributes=12\n\n# Maximum number of boolean expressions in an if statement.\nmax-bool-expr=5\n\n# Maximum number of branch for function / method body.\nmax-branches=12\n\n# Maximum number of locals for function / method body.\nmax-locals=15\n\n# Maximum number of parents for a class (see R0901).\nmax-parents=7\n\n# Maximum number of public methods for a class (see R0904).\nmax-public-methods=20\n\n# Maximum number of return / yield for function / method body.\nmax-returns=6\n\n# Maximum number of statements in function / method body.\nmax-statements=50\n\n# Minimum number of public methods for a class (see R0903).\nmin-public-methods=1\n\n\n[CLASSES]\n\n# List of method names used to declare (i.e. assign) instance attributes.\ndefining-attr-methods=__init__,\n                      __new__,\n                      setUp\n\n# List of member names, which should be excluded from the protected access\n# warning.\nexclude-protected=_asdict,\n                  _fields,\n                  _replace,\n                  _source,\n                  _make\n\n# List of valid names for the first argument in a class method.\nvalid-classmethod-first-arg=cls\n\n# List of valid names for the first argument in a metaclass class method.\nvalid-metaclass-classmethod-first-arg=cls\n\n\n[IMPORTS]\n\n# Allow wildcard imports from modules that define __all__.\nallow-wildcard-with-all=no\n\n# Analyse import fallback blocks. This can be used to support both Python 2 and\n# 3 compatible code, which means that the block might have code that exists\n# only in one or another interpreter, leading to false positives when analysed.\nanalyse-fallback-blocks=no\n\n# Deprecated modules which should not be used, separated by a comma.\ndeprecated-modules=optparse,tkinter.tix\n\n# Create a graph of external dependencies in the given file (report RP0402 must\n# not be disabled).\next-import-graph=\n\n# Create a graph of every (i.e. internal and external) dependencies in the\n# given file (report RP0402 must not be disabled).\nimport-graph=\n\n# Create a graph of internal dependencies in the given file (report RP0402 must\n# not be disabled).\nint-import-graph=\n\n# Force import order to recognize a module as part of the standard\n# compatibility libraries.\nknown-standard-library=\n\n# Force import order to recognize a module as part of a third party library.\nknown-third-party=enchant\n\n\n[EXCEPTIONS]\n\n# Exceptions that will emit a warning when being caught. Defaults to\n# \"BaseException, Exception\".\novergeneral-exceptions=builtins.BaseException,\n                       builtins.Exception\n"
        },
        {
          "name": ".readthedocs.yml",
          "type": "blob",
          "size": 0.6,
          "content": "# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.10\"\n\n# Build documentation in the docs/ directory with Sphinx\nsphinx:\n   configuration: docs/conf.py\n\n# If using Sphinx, optionally build your docs in additional formats such as PDF\n# formats:\n#    - pdf\n\n# Optionally declare the Python requirements required to build your docs\npython:\n   install:\n   - requirements: docs/sphinx_requirements.txt\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.28,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at deefakesrepo@gmail.com. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n"
        },
        {
          "name": "Dockerfile.cpu",
          "type": "blob",
          "size": 0.54,
          "content": "FROM ubuntu:22.04\n\n# To disable tzdata and others from asking for input\nENV DEBIAN_FRONTEND noninteractive\nENV FACESWAP_BACKEND cpu\n\nRUN apt-get update -qq -y\nRUN apt-get upgrade -y\nRUN apt-get install -y libgl1 libglib2.0-0 python3 python3-pip python3-tk git\n\nRUN ln -s $(which python3) /usr/local/bin/python\n\nRUN git clone --depth 1 --no-single-branch https://github.com/deepfakes/faceswap.git\nWORKDIR \"/faceswap\"\n\nRUN python -m pip install --upgrade pip\nRUN python -m pip --no-cache-dir install -r ./requirements/requirements_cpu.txt\n\nCMD [\"/bin/bash\"]\n"
        },
        {
          "name": "Dockerfile.gpu",
          "type": "blob",
          "size": 0.53,
          "content": "FROM nvidia/cuda:11.8.0-cudnn8-runtime-ubuntu22.04\n\nENV DEBIAN_FRONTEND=noninteractive\nENV FACESWAP_BACKEND nvidia\n\nRUN apt-get update -qq -y\nRUN apt-get upgrade -y\nRUN apt-get install -y libgl1 libglib2.0-0 python3 python3-pip python3-tk git\n\nRUN ln -s $(which python3) /usr/local/bin/python\n\nRUN git clone --depth 1 --no-single-branch https://github.com/deepfakes/faceswap.git\nWORKDIR \"/faceswap\"\n\nRUN python -m pip install --upgrade pip\nRUN python -m pip --no-cache-dir install -r ./requirements/requirements_nvidia.txt\n\nCMD [\"/bin/bash\"]\n"
        },
        {
          "name": "INSTALL.md",
          "type": "blob",
          "size": 15.71,
          "content": "# Installing faceswap\n- [Installing faceswap](#installing-faceswap)\n- [Prerequisites](#prerequisites)\n  - [Hardware Requirements](#hardware-requirements)\n  - [Supported operating systems](#supported-operating-systems)\n- [Important before you proceed](#important-before-you-proceed)\n- [Linux, Windows and macOS Install Guide](#linux-windows-and-macos-install-guide)\n  - [Installer](#installer)\n  - [Manual Install](#manual-install)\n  - [Prerequisites](#prerequisites-1)\n    - [Anaconda](#anaconda)\n    - [Git](#git)\n  - [Setup](#setup)\n    - [Anaconda](#anaconda-1)\n      - [Set up a virtual environment](#set-up-a-virtual-environment)\n      - [Entering your virtual environment](#entering-your-virtual-environment)\n    - [faceswap](#faceswap)\n      - [Easy install](#easy-install)\n      - [Manual install](#manual-install-1)\n  - [Running faceswap](#running-faceswap)\n  - [Create a desktop shortcut](#create-a-desktop-shortcut)\n  - [Updating faceswap](#updating-faceswap)\n- [macOS (Apple Silicon) Install Guide](#macos-apple-silicon-install-guide)\n  - [Prerequisites](#prerequisites-2)\n    - [OS](#os)\n    - [XCode Tools](#xcode-tools)\n    - [XQuartz](#xquartz)\n    - [Conda](#conda)\n  - [Setup](#setup-1)\n    - [Create and Activate the Environment](#create-and-activate-the-environment)\n    - [faceswap](#faceswap-1)\n      - [Easy install](#easy-install-1)\n- [General Install Guide](#general-install-guide)\n  - [Installing dependencies](#installing-dependencies)\n    - [Git](#git-1)\n    - [Python](#python)\n    - [Virtual Environment](#virtual-environment)\n  - [Getting the faceswap code](#getting-the-faceswap-code)\n  - [Setup](#setup-2)\n    - [About some of the options](#about-some-of-the-options)\n- [Docker Install Guide](#docker-install-guide)\n  - [Docker CPU](#docker-cpu)\n  - [Docker Nvidia](#docker-nvidia)\n- [Run the project](#run-the-project)\n  - [Notes](#notes)\n\n# Prerequisites\nMachine learning essentially involves a ton of trial and error. You're letting a program try millions of different settings to land on an algorithm that sort of does what you want it to do. This process is really really slow unless you have the hardware required to speed this up.\n\nThe type of computations that the process does are well suited for graphics cards, rather than regular processors. **It is pretty much required that you run the training process on a desktop or server capable GPU.** Running this on your CPU means it can take weeks to train your model, compared to several hours on a GPU.\n\n## Hardware Requirements\n**TL;DR: you need at least one of the following:**\n\n- **A powerful CPU**\n    - Laptop CPUs can often run the software, but will not be fast enough to train at reasonable speeds\n- **A powerful GPU**\n    - Currently, Nvidia GPUs are fully supported\n    - DirectX 12 AMD GPUs are supported on Windows through DirectML.\n    - More modern AMD GPUs are supported on Linux through ROCm.\n    - M-series Macs are supported through Tensorflow-Metal\n    - If using an Nvidia GPU, then it needs to support at least CUDA Compute Capability 3.5. (Release 1.0 will work on Compute Capability 3.0)\n      To see which version your GPU supports, consult this list: https://developer.nvidia.com/cuda-gpus\n      Desktop cards later than the 7xx series are most likely supported.\n- **A lot of patience**\n\n## Supported operating systems\n- **Windows 10/11**\n  Windows 7 and 8 might work for Nvidia. Your mileage may vary.\n  DirectML support is only available in Windows 10 onwards.\n  Windows has an installer which will set up everything you need. See: https://github.com/deepfakes/faceswap/releases\n- **Linux**\n  Most Ubuntu/Debian or CentOS based Linux distributions will work. There is a Linux install script that will install and set up everything you need. See: https://github.com/deepfakes/faceswap/releases\n- **macOS**\n  Experimental support for GPU-accelerated, native Apple Silicon processing (e.g. Apple M1 chips). Installation instructions can be found [further down this page](#macos-apple-silicon-install-guide).\n  Intel based macOS systems should work, but you will need to follow the [Manual Install](#manual-install) instructions.\n- All operating systems must be 64-bit for Tensorflow to run.\n\nAlternatively, there is a docker image that is based on Debian.\n\n# Important before you proceed\n**In its current iteration, the project relies heavily on the use of the command line, although a gui is available. if you are unfamiliar with command line tools, you may have difficulty setting up the environment and should perhaps not attempt any of the steps described in this guide.** This guide assumes you have intermediate knowledge of the command line.\n\nThe developers are also not responsible for any damage you might cause to your own computer.\n\n# Linux, Windows and macOS Install Guide\n\n## Installer\nWindows, Linux and macOS all have installers which set up everything for you. You can download the installer from https://github.com/deepfakes/faceswap/releases.\n\nIf you have issues with the installer then read on for the more manual way to install faceswap on Windows.\n\n## Manual Install\n\nSetting up faceswap can seem a little intimidating to new users, but it isn't that complicated, although a little time consuming. It is recommended to use Linux where possible as Windows will hog about 20% of your GPU Memory, making faceswap run a little slower, however using Windows is perfectly fine and 100% supported.\n\n## Prerequisites\n\n### Anaconda\nDownload and install the latest Python 3 Anaconda from: https://www.anaconda.com/download/. Unless you know what you are doing, you can leave all the options at default.\n\n### Git\nDownload and install Git for Windows: https://git-scm.com/download/win. Unless you know what you are doing, you can leave all the options at default.\n\n## Setup\nReboot your PC, so that everything you have just installed gets registered.\n\n### Anaconda\n#### Set up a virtual environment\n- Open up Anaconda Navigator\n- Select \"Environments\" on the left hand side\n- Select \"Create\" at the bottom\n- In the pop up:\n    - Give it the name: faceswap\n    - **IMPORTANT**: Select python version 3.10\n    - Hit \"Create\" (NB: This may take a while as it will need to download Python)\n![Anaconda virtual env setup](https://i.imgur.com/CLIDDfa.png)\n\n#### Entering your virtual environment\nTo enter the virtual environment:\n- Open up Anaconda Navigator\n- Select \"Environments\" on the left hand side\n- Hit the \">\" arrow next to your faceswap environment and select \"Open Terminal\"\n![Anaconda enter virtual env](https://i.imgur.com/rKSq2Pd.png)\n\n### faceswap\n- If you are not already in your virtual environment follow [these steps](#entering-your-virtual-environment)\n- Get the faceswap repo by typing: `git clone --depth 1 https://github.com/deepfakes/faceswap.git`\n- Enter the faceswap folder: `cd faceswap`\n\n#### Easy install\n- Enter the command `python setup.py` and follow the prompts:\n- If you have issues/errors follow the Manual install steps below.\n\n#### Manual install\nDo not follow these steps if the Easy Install above completed succesfully.\nIf you are using an Nvidia card make sure you have the correct versions of Cuda/cuDNN installed for the required version of Tensorflow\n- Install tkinter (required for the GUI) by typing: `conda install tk`\n- Install requirements:\n  - For Nvidia GPU users: `pip install -r ./requirements/requirements_nvidia.txt`\n  - For CPU users: `pip install -r ./requirements/requirements_cpu.txt`\n\n## Running faceswap\n- If you are not already in your virtual environment follow [these steps](#entering-your-virtual-environment)\n- Enter the faceswap folder: `cd faceswap`\n- Enter the following to see the list of commands: `python faceswap.py -h` or enter `python faceswap.py gui` to launch the GUI\n\n## Create a desktop shortcut\nA desktop shortcut can be added to easily launch straight into the faceswap GUI:\n\n- Open Notepad\n- Paste the following:\n```\n%USERPROFILE%\\Anaconda3\\envs\\faceswap\\python.exe %USERPROFILE%/faceswap/faceswap.py gui\n```\n- Save the file to your desktop as \"faceswap.bat\"\n\n## Updating faceswap\nIt's good to keep faceswap up to date as new features are added and bugs are fixed. To do so:\n- If using the GUI you can go to the Help menu and select \"Check for Updates...\". If updates are available go to the Help menu and select \"Update Faceswap\". Restart Faceswap to complete the update.\n- If you are not already in your virtual environment follow [these steps](#entering-your-virtual-environment)\n- Enter the faceswap folder: `cd faceswap`\n- Enter the following `git pull --all`\n- Once the latest version has downloaded, make sure your dependencies are up to date. There is a script to help with this: `python update_deps.py`\n\n# macOS (Apple Silicon) Install Guide\n\nmacOS now has [an installer](#linux-windows-and-macos-install-guide) which sets everything up for you, but if you run into difficulties and need to set things up manually, the steps are as follows:\n\n## Prerequisites\n\n### OS\nmacOS 12.0+\n\n### XCode Tools\n```sh\nxcode-select --install\n```\n\n### XQuartz\nDownload and install from:\n- https://www.xquartz.org/\n\n### Conda\nDownload and install the latest Conda env from:\n- https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-MacOSX-arm64.sh\n\nInstall Conda:\n```sh\n$ chmod +x ~/Downloads/Miniforge3-MacOSX-arm64.sh\n$ sh ~/Downloads/Miniforge3-MacOSX-arm64.sh\n$ source ~/miniforge3/bin/activate\n```\n## Setup\n### Create and Activate the Environment\n```sh\n$ conda create --name faceswap python=3.10\n$ conda activate faceswap\n```\n\n### faceswap\n- Download the faceswap repo and enter the faceswap folder:\n```sh\n$ git clone --depth 1 https://github.com/deepfakes/faceswap.git\n$ cd faceswap\n```\n\n#### Easy install\n```sh\n$ python setup.py\n```\n\n- If you have issues/errors follow the Manual install steps below.\n\n\n# General Install Guide\n\n## Installing dependencies\n### Git\nGit is required for obtaining the code and keeping your codebase up to date.\nObtain git for your distribution from the [git website](https://git-scm.com/downloads).\n\n### Python\nThe recommended install method is to use a Conda3 Environment as this will handle the installation of Nvidia's CUDA and cuDNN straight into your Conda Environment. This is by far the easiest and most reliable way to setup the project.\n  - MiniConda3 is recommended: [MiniConda3](https://docs.conda.io/en/latest/miniconda.html)\n\nAlternatively you can install Python (3.10 64-bit) for your distribution (links below.) If you go down this route and are using an Nvidia GPU you should install CUDA (https://developer.nvidia.com/cuda-zone) and cuDNN (https://developer.nvidia.com/cudnn). for your system. If you do not plan to build Tensorflow yourself, make sure you install the correct Cuda and cuDNN package for the currently installed version of Tensorflow (Current release: Tensorflow 2.9. Release v1.0: Tensorflow 1.15). You can check for the compatible versions here: (https://www.tensorflow.org/install/source#gpu).\n  - Python distributions:\n    - apt/yum install python3 (Linux)\n    - [Installer](https://www.python.org/downloads/release/python-368/) (Windows)\n    - [brew](https://brew.sh/) install python3 (macOS)\n\n### Virtual Environment\n  It is highly recommended that you setup faceswap inside a virtual environment. In fact we will not generally support installations that are not within a virtual environment as troubleshooting package conflicts can be next to impossible.\n\n  If using Conda3 then setting up virtual environments is relatively straight forward. More information can be found at [Conda Docs](https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html)\n\n  If using a default Python distribution then [virtualenv](https://github.com/pypa/virtualenv) and [virtualenvwrapper](https://virtualenvwrapper.readthedocs.io) may help when you are not using docker.\n\n\n## Getting the faceswap code\nIt is recommended to clone the repo with git instead of downloading the code from http://github.com/deepfakes/faceswap and extracting it as this will make it far easier to get the latest code (which can be done from the GUI). To clone a repo you can either use the Git GUI for your distribution or open up a command prompt, enter the folder where you want to store faceswap and enter:\n```bash\ngit clone https://github.com/deepfakes/faceswap.git\n```\n\n\n## Setup\nEnter your virtual environment and then enter the folder that faceswap has been downloaded to and run:\n```bash\npython setup.py\n```\nIf setup fails for any reason you can still manually install the packages listed within the files in the requirements folder.\n\n### About some of the options\n   - CUDA: For acceleration. Requires a good nVidia Graphics Card (which supports CUDA inside)\n   - Docker: Provide a ready-made image. Hide trivial details. Get you straight to the project.\n   - nVidia-Docker: Access to the nVidia GPU on host machine from inside container.\n\n# Docker Install Guide\n\nThis Faceswap repo contains Docker build scripts for CPU and Nvidia backends. The scripts will set up a Docker container for you and install the latest version of the Faceswap software.\n\nYou must first ensure that Docker is installed and running on your system. Follow the guide for downloading and installing Docker from their website:\n\n  - https://www.docker.com/get-started\n\nOnce Docker is installed and running, follow the relevant steps for your chosen backend\n## Docker CPU\nTo run the CPU version of Faceswap follow these steps:\n\n1. Build the Docker image For faceswap:\n```\ndocker build \\\n-t faceswap-cpu \\\nhttps://raw.githubusercontent.com/deepfakes/faceswap/master/Dockerfile.cpu\n```\n2. Launch and enter the Faceswap container:\n\n    a. For the **headless/command line** version of Faceswap run:\n    ```\n    docker run --rm -it faceswap-cpu\n    ```\n    You can then execute faceswap the standard way:\n    ```\n    python faceswap.py --help\n    ```\n    b. For the **GUI** version of Faceswap run:\n    ```\n    xhost +local: && \\\n    docker run --rm -it \\\n    -v /tmp/.X11-unix:/tmp/.X11-unix \\\n    -e DISPLAY=${DISPLAY} \\\n    faceswap-cpu\n    ```\n    You can then launch the GUI with\n    ```\n    python faceswap.py gui\n    ```\n  ## Docker Nvidia\nTo build the NVIDIA GPU version of Faceswap, follow these steps:\n\n1. Nvidia Docker builds need extra resources to provide the Docker container with access to your GPU.\n\n    a. Follow the instructions to install and apply the `Nvidia Container Toolkit` for your distribution from:\n    -  https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/install-guide.html\n\n    b. If Docker is already running, restart it to pick up the changes made by the Nvidia Container Toolkit.\n\n2. Build the Docker image For faceswap\n```\ndocker build \\\n-t faceswap-gpu \\\nhttps://raw.githubusercontent.com/deepfakes/faceswap/master/Dockerfile.gpu\n```\n1. Launch and enter the Faceswap container:\n\n    a. For the **headless/command line** version of Faceswap run:\n    ```\n    docker run --runtime=nvidia --rm -it faceswap-gpu\n    ```\n    You can then execute faceswap the standard way:\n    ```\n    python faceswap.py --help\n    ```\n    b. For the **GUI** version of Faceswap run:\n    ```\n    xhost +local: && \\\n    docker run --runtime=nvidia --rm -it \\\n    -v /tmp/.X11-unix:/tmp/.X11-unix \\\n    -e DISPLAY=${DISPLAY} \\\n    faceswap-gpu\n    ```\n    You can then launch the GUI with\n    ```\n    python faceswap.py gui\n    ```\n# Run the project\nOnce all these requirements are installed, you can attempt to run the faceswap tools. Use the `-h` or `--help` options for a list of options.\n\n```bash\npython faceswap.py -h\n```\n\nor run with `gui` to launch the GUI\n```bash\npython faceswap.py gui\n```\n\n\nProceed to [../blob/master/USAGE.md](USAGE.md)\n\n## Notes\nThis guide is far from complete. Functionality may change over time, and new dependencies are added and removed as time goes on.\n\nIf you are experiencing issues, please raise them in the [faceswap Forum](https://faceswap.dev/forum) instead of the main repo. Usage questions raised in the issues within this repo are liable to be closed without response.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 34.32,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<http://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.81,
          "content": "# deepfakes_faceswap\n\n### Important information for **Patreon** and **PayPal** supporters. Please see this forum post: https://forum.faceswap.dev/viewtopic.php?f=14&t=3120\n\n<p align=\"center\">\n  <a href=\"https://faceswap.dev\"><img src=\"https://i.imgur.com/zHvjHnb.png\"></img></a>\n<br />FaceSwap is a tool that utilizes deep learning to recognize and swap faces in pictures and videos.\n</p>\n<p align=\"center\">\n<img src = \"https://i.imgur.com/nWHFLDf.jpg\"></img>\n</p>\n\n<p align=\"center\">\n<a href=\"https://www.patreon.com/bePatron?u=23238350\"><img src=\"https://c5.patreon.com/external/logo/become_a_patron_button.png\"></img></a>\n&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://discord.gg/FC54sYg\"><img src=\"https://i.imgur.com/gIpztkv.png\"></img></a></p>\n\n<p align=\"center\">\n  <a href=\"https://www.dailymotion.com/video/x810mot\"><img src=\"https://user-images.githubusercontent.com/36920800/178301720-b69841bb-a1ca-4c20-91db-a2a10f5692ca.png\"></img></a>\n<br />Emma Stone/Scarlett Johansson FaceSwap using the Phaze-A model\n</p>\n\n<p align=\"center\">\n  <a href=\"https://www.youtube.com/watch?v=r1jng79a5xc\"><img src=\"https://img.youtube.com/vi/r1jng79a5xc/0.jpg\"></img></a>\n<br />Jennifer Lawrence/Steve Buscemi FaceSwap using the Villain model\n</p>\n\n\n![Build Status](https://github.com/deepfakes/faceswap/actions/workflows/pytest.yml/badge.svg) [![Documentation Status](https://readthedocs.org/projects/faceswap/badge/?version=latest)](https://faceswap.readthedocs.io/en/latest/?badge=latest)\n\nMake sure you check out [INSTALL.md](INSTALL.md) before getting started.\n\n- [deepfakes\\_faceswap](#deepfakes_faceswap)\n    - [Important information for **Patreon** and **PayPal** supporters. Please see this forum post: https://forum.faceswap.dev/viewtopic.php?f=14\\&t=3120](#important-information-for-patreon-and-paypal-supporters-please-see-this-forum-post-httpsforumfaceswapdevviewtopicphpf14t3120)\n- [Manifesto](#manifesto)\n  - [FaceSwap has ethical uses.](#faceswap-has-ethical-uses)\n- [How To setup and run the project](#how-to-setup-and-run-the-project)\n- [Overview](#overview)\n  - [Extract](#extract)\n  - [Train](#train)\n  - [Convert](#convert)\n  - [GUI](#gui)\n- [General notes:](#general-notes)\n- [Help I need support!](#help-i-need-support)\n  - [Discord Server](#discord-server)\n  - [FaceSwap Forum](#faceswap-forum)\n- [Donate](#donate)\n  - [Patreon](#patreon)\n  - [One time Donations](#one-time-donations)\n    - [@torzdf](#torzdf)\n    - [@andenixa](#andenixa)\n- [How to contribute](#how-to-contribute)\n  - [For people interested in the generative models](#for-people-interested-in-the-generative-models)\n  - [For devs](#for-devs)\n  - [For non-dev advanced users](#for-non-dev-advanced-users)\n  - [For end-users](#for-end-users)\n- [About machine learning](#about-machine-learning)\n  - [How does a computer know how to recognize/shape faces? How does machine learning work? What is a neural network?](#how-does-a-computer-know-how-to-recognizeshape-faces-how-does-machine-learning-work-what-is-a-neural-network)\n\n# Manifesto\n\n## FaceSwap has ethical uses.\n\nWhen faceswapping was first developed and published, the technology was groundbreaking, it was a huge step in AI development. It was also completely ignored outside of academia because the code was confusing and fragmentary. It required a thorough understanding of complicated AI techniques and took a lot of effort to figure it out. Until one individual brought it together into a single, cohesive collection. It ran, it worked, and as is so often the way with new technology emerging on the internet, it was immediately used to create inappropriate content. Despite the inappropriate uses the software was given originally, it was the first AI code that anyone could download, run and learn by experimentation without having a Ph.D. in math, computer theory, psychology, and more. Before \"deepfakes\" these techniques were like black magic, only practiced by those who could understand all of the inner workings as described in esoteric and endlessly complicated books and papers.\n\n\"Deepfakes\" changed all that and anyone could participate in AI development. To us, developers, the release of this code opened up a fantastic learning opportunity. It allowed us to build on ideas developed by others, collaborate with a variety of skilled coders, experiment with AI whilst learning new skills and ultimately contribute towards an emerging technology which will only see more mainstream use as it progresses.\n\nAre there some out there doing horrible things with similar software? Yes. And because of this, the developers have been following strict ethical standards. Many of us don't even use it to create videos, we just tinker with the code to see what it does. Sadly, the media concentrates only on the unethical uses of this software. That is, unfortunately, the nature of how it was first exposed to the public, but it is not representative of why it was created, how we use it now, or what we see in its future. Like any technology, it can be used for good or it can be abused. It is our intention to develop FaceSwap in a way that its potential for abuse is minimized whilst maximizing its potential as a tool for learning, experimenting and, yes, for legitimate faceswapping.\n\nWe are not trying to denigrate celebrities or to demean anyone. We are programmers, we are engineers, we are Hollywood VFX artists, we are activists, we are hobbyists, we are human beings. To this end, we feel that it's time to come out with a standard statement of what this software is and isn't as far as us developers are concerned.\n\n- FaceSwap is not for creating inappropriate content.\n- FaceSwap is not for changing faces without consent or with the intent of hiding its use.\n- FaceSwap is not for any illicit, unethical, or questionable purposes.\n- FaceSwap exists to experiment and discover AI techniques, for social or political commentary, for movies, and for any number of ethical and reasonable uses.\n\nWe are very troubled by the fact that FaceSwap can be used for unethical and disreputable things. However, we support the development of tools and techniques that can be used ethically as well as provide education and experience in AI for anyone who wants to learn it hands-on. We will take a zero tolerance approach to anyone using this software for any unethical purposes and will actively discourage any such uses.\n\n# How To setup and run the project\nFaceSwap is a Python program that will run on multiple Operating Systems including Windows, Linux, and MacOS.\n\nSee [INSTALL.md](INSTALL.md) for full installation instructions. You will need a modern GPU with CUDA support for best performance. Many AMD GPUs are supported through DirectML (Windows) and ROCm (Linux).\n\n# Overview\nThe project has multiple entry points. You will have to:\n - Gather photos and/or videos\n - **Extract** faces from your raw photos\n - **Train** a model on the faces extracted from the photos/videos\n - **Convert** your sources with the model\n\nCheck out [USAGE.md](USAGE.md) for more detailed instructions.\n\n## Extract\nFrom your setup folder, run `python faceswap.py extract`. This will take photos from `src` folder and extract faces into `extract` folder.\n\n## Train\nFrom your setup folder, run `python faceswap.py train`. This will take photos from two folders containing pictures of both faces and train a model that will be saved inside the `models` folder.\n\n## Convert\nFrom your setup folder, run `python faceswap.py convert`. This will take photos from `original` folder and apply new faces into `modified` folder.\n\n## GUI\nAlternatively, you can run the GUI by running `python faceswap.py gui`\n\n# General notes:\n- All of the scripts mentioned have `-h`/`--help` options with arguments that they will accept. You're smart, you can figure out how this works, right?!\n\nNB: there is a conversion tool for video. This can be accessed by running `python tools.py effmpeg -h`. Alternatively, you can use [ffmpeg](https://www.ffmpeg.org) to convert video into photos, process images, and convert images back to the video.\n\n\n**Some tips:**\n\nReusing existing models will train much faster than starting from nothing.\nIf there is not enough training data, start with someone who looks similar, then switch the data.\n\n# Help I need support!\n## Discord Server\nYour best bet is to join the [FaceSwap Discord server](https://discord.gg/FC54sYg) where there are plenty of users willing to help. Please note that, like this repo, this is a SFW Server!\n\n## FaceSwap Forum\nAlternatively, you can post questions in the [FaceSwap Forum](https://faceswap.dev/forum). Please do not post general support questions in this repo as they are liable to be deleted without response.\n\n# Donate\nThe developers work tirelessly to improve and develop FaceSwap. Many hours have been put in to provide the software as it is today, but this is an extremely time-consuming process with no financial reward. If you enjoy using the software, please consider donating to the devs, so they can spend more time implementing improvements.\n\n## Patreon\nThe best way to support us is through our Patreon page:\n\n[![become-a-patron](https://c5.patreon.com/external/logo/become_a_patron_button.png)](https://www.patreon.com/bePatron?u=23238350)\n\n## One time Donations\nAlternatively you can give a one off donation to any of our Devs:\n### @torzdf\n There is very little FaceSwap code that hasn't been touched by torzdf. He is responsible for implementing the GUI, FAN aligner, MTCNN detector and porting the Villain, DFL-H128 and DFaker models to FaceSwap, as well as significantly improving many areas of the code.\n\n**Bitcoin:** bc1qpm22suz59ylzk0j7qk5e4c7cnkjmve2rmtrnc6\n\n**Ethereum:** 0xd3e954dC241B87C4E8E1A801ada485DC1d530F01\n\n**Monero:** 45dLrtQZ2pkHizBpt3P3yyJKkhcFHnhfNYPMSnz3yVEbdWm3Hj6Kr5TgmGAn3Far8LVaQf1th2n3DJVTRkfeB5ZkHxWozSX\n\n**Paypal:** [![torzdf](https://www.paypalobjects.com/en_GB/i/btn/btn_donate_SM.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=JZ8PP3YE9J62L)\n\n### @andenixa\nCreator of the Unbalanced and OHR models, as well as expanding various capabilities within the training process. Andenixa is currently working on new models and will take requests for donations.\n\n**Paypal:** [![andenixa](https://www.paypalobjects.com/en_GB/i/btn/btn_donate_SM.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=NRVLQYGS6NWTU)\n\n# How to contribute\n\n## For people interested in the generative models\n - Go to the 'faceswap-model' to discuss/suggest/commit alternatives to the current algorithm.\n\n## For devs\n - Read this README entirely\n - Fork the repo\n - Play with it\n - Check issues with the 'dev' tag\n - For devs more interested in computer vision and openCV, look at issues with the 'opencv' tag. Also feel free to add your own alternatives/improvements\n\n## For non-dev advanced users\n - Read this README entirely\n - Clone the repo\n - Play with it\n - Check issues with the 'advuser' tag\n - Also go to the '[faceswap Forum](https://faceswap.dev/forum)' and help others.\n\n## For end-users\n - Get the code here and play with it if you can\n - You can also go to the [faceswap Forum](https://faceswap.dev/forum) and help or get help from others.\n - Be patient. This is a relatively new technology for developers as well. Much effort is already being put into making this program easy to use for the average user. It just takes time!\n - **Notice** Any issue related to running the code has to be opened in the [faceswap Forum](https://faceswap.dev/forum)!\n\n# About machine learning\n\n## How does a computer know how to recognize/shape faces? How does machine learning work? What is a neural network?\nIt's complicated. Here's a good video that makes the process understandable:\n[![How Machines Learn](https://img.youtube.com/vi/R9OHn5ZF4Uo/0.jpg)](https://www.youtube.com/watch?v=R9OHn5ZF4Uo)\n\nHere's a slightly more in depth video that tries to explain the basic functioning of a neural network:\n[![How Machines Learn](https://img.youtube.com/vi/aircAruvnKk/0.jpg)](https://www.youtube.com/watch?v=aircAruvnKk)\n\ntl;dr: training data + trial and error\n"
        },
        {
          "name": "USAGE.md",
          "type": "blob",
          "size": 11.57,
          "content": "# Workflow\n\n**Before attempting any of this, please make sure you have read, understood and completed the [installation instructions](../master/INSTALL.md). If you are experiencing issues, please raise them in the [faceswap Forum](https://faceswap.dev/forum) or the [FaceSwap Discord server](https://discord.gg/FdEwxXd) instead of the main repo.**\n\n- [Workflow](#workflow)\n- [Introduction](#introduction)\n  - [Disclaimer](#disclaimer)\n  - [Getting Started](#getting-started)\n- [Extract](#extract)\n  - [Gathering raw data](#gathering-raw-data)\n  - [Extracting Faces](#extracting-faces)\n  - [General Tips](#general-tips)\n- [Training a model](#training-a-model)\n  - [General Tips](#general-tips-1)\n- [Converting a video](#converting-a-video)\n  - [General Tips](#general-tips-2)\n- [GUI](#gui)\n- [Video's](#videos)\n- [EFFMPEG](#effmpeg)\n- [Extracting video frames with FFMPEG](#extracting-video-frames-with-ffmpeg)\n- [Generating a video](#generating-a-video)\n- [Notes](#notes)\n  \n# Introduction\n\n## Disclaimer\nThis guide provides a high level overview of the faceswapping process. It does not aim to go into every available option, but will provide a useful entry point to using the software. There are many more options available that are not covered by this guide. These can be found, and explained, by passing the `-h` flag to the command line (eg: `python faceswap.py extract -h`) or by hovering over the options within the GUI.\n\n## Getting Started\nSo, you want to swap faces in pictures and videos? Well hold up, because first you gotta understand what this application will do, how it does it and what it can't currently do.\n\nThe basic operation of this script is simple. It trains a machine learning model to recognize and transform two faces based on pictures. The machine learning model is our little \"bot\" that we're teaching to do the actual swapping and the pictures are the \"training data\" that we use to train it. Note that the bot is primarily processing faces. Other objects might not work.\n\nSo here's our plan. We want to create a reality where Donald Trump lost the presidency to Nic Cage; we have his inauguration video; let's replace Trump with Cage.\n\n# Extract\n## Gathering raw data\nIn order to accomplish this, the bot needs to learn to recognize both face A (Trump) and face B (Nic Cage). By default, the bot doesn't know what a Trump or a Nic Cage looks like. So we need to show it lots of pictures and let it guess which is which. So we need pictures of both of these faces first.\n\nA possible source is Google, DuckDuckGo or Bing image search. There are scripts to download large amounts of images. A better source of images are videos (from interviews, public speeches, or movies) as these will capture many more natural poses and expressions. Fortunately FaceSwap has you covered and can extract faces from both still images and video files. See [Extracting video frames](#Extracting_video_frames) for more information.\n\nFeel free to list your image sets in the [faceswap Forum](https://faceswap.dev/forum), or add more methods to this file.\n\nSo now we have a folder full of pictures/videos of Trump and a separate folder of Nic Cage. Let's save them in our directory where we put the FaceSwap project. Example: `~/faceswap/src/trump` and `~/faceswap/src/cage`\n\n## Extracting Faces\nSo here's a problem. We have a ton of pictures and videos of both our subjects, but these are just of them doing stuff or in an environment with other people. Their bodies are on there, they're on there with other people... It's a mess. We can only train our bot if the data we have is consistent and focuses on the subject we want to swap. This is where FaceSwap first comes in.\n\n**Command Line:**\n```bash\n# To extract trump from photos in a folder:\npython faceswap.py extract -i ~/faceswap/src/trump -o ~/faceswap/faces/trump\n# To extract trump from a video file:\npython faceswap.py extract -i ~/faceswap/src/trump.mp4 -o ~/faceswap/faces/trump\n# To extract cage from photos in a folder:\npython faceswap.py extract -i ~/faceswap/src/cage -o ~/faceswap/faces/cage\n# To extract cage from a video file:\npython faceswap.py extract -i ~/faceswap/src/cage.mp4 -o ~/faceswap/faces/cage\n```\n\n**GUI:**\n\nTo extract trump from photos in a folder (Right hand folder icon):\n![ExtractFolder](https://i.imgur.com/H3h0k36.jpg)\n\nTo extract cage from a video file (Left hand folder icon):\n![ExtractVideo](https://i.imgur.com/TK02F0u.jpg)\n\nFor input we either specify our photo directory or video file and for output we specify the folder where our extracted faces will be saved. The script will then try its best to recognize face landmarks, crop the images to a consistent size, and save the faces to the output folder. An `alignments.json` file will also be created and saved into your input folder. This file contains information about each of the faces that will be used by FaceSwap.\n\nNote: this script will make grabbing test data much easier, but it is not perfect. It will (incorrectly) detect multiple faces in some photos and does not recognize if the face is the person whom we want to swap. Therefore: **Always check your training data before you start training.** The training data will influence how good your model will be at swapping.\n\n## General Tips\nWhen extracting faces for training, you are looking to gather around 500 to 5000 faces for each subject you wish to train. These should be of a high quality and contain a wide variety of angles, expressions and lighting conditions. \n\nYou do not want to extract every single frame from a video for training as from frame to frame the faces will be very similar.\n\nYou can see the full list of arguments for extracting by hovering over the options in the GUI or passing the help flag. i.e:\n```bash\npython faceswap.py extract -h\n```\n\nSome of the plugins have configurable options. You can find the config options in: `<faceswap_folder>\\config\\extract.ini`. You will need to have run Extract or the GUI at least once for this file to be generated.\n\n# Training a model\nOk, now you have a folder full of Trump faces and a folder full of Cage faces. What now? It's time to train our bot! This creates a 'model' that contains information about what a Cage is and what a Trump is and how to swap between the two.\n\nThe training process will take the longest, how long depends on many factors; the model used, the number of images, your GPU etc. However, a ballpark figure is 12-48 hours on GPU and weeks if training on CPU.\n\nWe specify the folders where the two faces are, and where we will save our training model.\n\n**Command Line:**\n```bash\npython faceswap.py train -A ~/faceswap/faces/trump -B ~/faceswap/faces/cage -m ~/faceswap/trump_cage_model/\n# or -p to show a preview\npython faceswap.py train -A ~/faceswap/faces/trump -B ~/faceswap/faces/cage -m ~/faceswap/trump_cage_model/ -p \n```\n**GUI:**\n\n![Training](https://i.imgur.com/j8bjk4I.jpg)\n\nOnce you run the command, it will start hammering the training data. If you have a preview up, then you will see a load of blotches appear. These are the faces it is learning. They don't look like much, but then your model hasn't learned anything yet. Over time these will more and more start to resemble trump and cage.\n\nYou want to leave your model learning until you are happy with the images in the preview. To stop training you can:\n- Command Line: press \"Enter\" in the preview window or in the console\n- GUI: Press the Terminate button\n\nWhen stopping training, the model will save and the process will exit. This can take a little while, so be patient. The model will also save every 100 iterations or so.\n\nYou can stop and resume training at any time. Just point FaceSwap at the same folders and carry on.\n\n## General Tips\nIf you are training with a mask or using Warp to Landmarks, you will need to pass in an `alignments.json` file for each of the face sets. See [Extract - General Tips](#general-tips) for more information.\n\nThe model is automatically backed up at every save iteration where the overall loss has dropped (i.e. the model has improved). If your model corrupts for some reason, you can go into the model folder and remove the `.bk` extension from the backups to restore the model from backup.\n\nYou can see the full list of arguments for training by hovering over the options in the GUI or passing the help flag. i.e:\n\n```bash\npython faceswap.py train -h\n```\n\nSome of the plugins have configurable options. You can find the config options in: `<faceswap_folder>\\config\\train.ini`. You will need to have run Train or the GUI at least once for this file to be generated.\n\n\n# Converting a video\nNow that we're happy with our trained model, we can convert our video. How does it work? \n\nWell firstly we need to generate an `alignments.json` file for our swap. To do this, follow the steps in [Extracting Faces](#extracting-faces), only this time you want to run extract for every face in your source video. This file tells the convert process where the face is on the source frame.\n\nYou are likely going to want to cleanup your alignments file, by deleting false positives, badly aligned faces etc. These will not look good on your final convert. There are tools to help with this.\n\nJust like extract you can convert from a series of images or from a video file.\n\nRemember those initial pictures we had of Trump? Let's try swapping a face there. We will use that directory as our input directory, create a new folder where the output will be saved, and tell them which model to use.\n\n**Command Line:**\n```bash\npython faceswap.py convert -i ~/faceswap/src/trump/ -o ~/faceswap/converted/ -m ~/faceswap/trump_cage_model/\n```\n\n**GUI:**\n\n![convert](https://i.imgur.com/GzX1ME2.jpg)\n\nIt should now start swapping faces of all these pictures.\n\n\n## General Tips\nYou can see the full list of arguments for Converting by hovering over the options in the GUI or passing the help flag. i.e:\n\n```bash\npython faceswap.py convert -h\n```\n\nSome of the plugins have configurable options. You can find the config options in: `<faceswap_folder>\\config\\convert.ini`. You will need to have run Convert or the GUI at least once for this file to be generated.\n\n# GUI\nAll of the above commands and options can be run from the GUI. This is launched with:\n```bash\npython faceswap.py gui\n```\n\nThe GUI allows a more user friendly interface into the scripts and also has some extended functionality. Hovering over options in the GUI will tell you more about what the option does.\n\n# Video's\nA video is just a series of pictures in the form of frames. Therefore you can gather the raw images from them for your dataset or combine your results into a video.\n\n# EFFMPEG\nYou can perform various video processes with the built-in effmpeg tool. You can see the full list of arguments available by running:\n```bash\npython tools.py effmpeg -h\n```\n\n# Extracting video frames with FFMPEG\nAlternatively, you can split a video into separate frames using [ffmpeg](https://www.ffmpeg.org) for instance. Below is an example command to process a video to separate frames.\n\n```bash\nffmpeg -i /path/to/my/video.mp4 /path/to/output/video-frame-%d.png\n```\n\n# Generating a video\nIf you split a video, using [ffmpeg](https://www.ffmpeg.org) for example, and used them as a target for swapping faces onto you can combine these frames again. The command below stitches the png frames back into a single video again.\n\n```bash\nffmpeg -i video-frame-%0d.png -c:v libx264 -vf \"fps=25,format=yuv420p\" out.mp4\n```\n\n# Notes\nThis guide is far from complete. Functionality may change over time, and new dependencies are added and removed as time goes on. \n\nIf you are experiencing issues, please raise them in the [faceswap Forum](https://faceswap.dev/forum) or the [FaceSwap Discord server](https://discord.gg/FdEwxXd). Usage questions raised in this repo are likely to be closed without response.\n"
        },
        {
          "name": "_config.yml",
          "type": "blob",
          "size": 0.03,
          "content": "theme: jekyll-theme-cayman"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "faceswap.py",
          "type": "blob",
          "size": 2.01,
          "content": "#!/usr/bin/env python3\n\"\"\" The master faceswap.py script \"\"\"\nimport gettext\nimport locale\nimport os\nimport sys\n\n# Translations don't work by default in Windows, so hack in environment variable\nif sys.platform.startswith(\"win\"):\n    os.environ[\"LANG\"], _ = locale.getdefaultlocale()\n\nfrom lib.cli import args as cli_args  # pylint:disable=wrong-import-position\nfrom lib.cli.args_train import TrainArgs  # pylint:disable=wrong-import-position\nfrom lib.cli.args_extract_convert import ConvertArgs, ExtractArgs  # noqa:E501 pylint:disable=wrong-import-position\nfrom lib.config import generate_configs  # pylint:disable=wrong-import-position\n\n# LOCALES\n_LANG = gettext.translation(\"faceswap\", localedir=\"locales\", fallback=True)\n_ = _LANG.gettext\n\nif sys.version_info < (3, 10):\n    raise ValueError(\"This program requires at least python 3.10\")\n\n_PARSER = cli_args.FullHelpArgumentParser()\n\n\ndef _bad_args(*args) -> None:  # pylint:disable=unused-argument\n    \"\"\" Print help to console when bad arguments are provided. \"\"\"\n    print(cli_args)\n    _PARSER.print_help()\n    sys.exit(0)\n\n\ndef _main() -> None:\n    \"\"\" The main entry point into Faceswap.\n\n    - Generates the config files, if they don't pre-exist.\n    - Compiles the :class:`~lib.cli.args.FullHelpArgumentParser` objects for each section of\n      Faceswap.\n    - Sets the default values and launches the relevant script.\n    - Outputs help if invalid parameters are provided.\n    \"\"\"\n    generate_configs()\n\n    subparser = _PARSER.add_subparsers()\n    ExtractArgs(subparser, \"extract\", _(\"Extract the faces from pictures or a video\"))\n    TrainArgs(subparser, \"train\", _(\"Train a model for the two faces A and B\"))\n    ConvertArgs(subparser,\n                \"convert\",\n                _(\"Convert source pictures or video to a new one with the face swapped\"))\n    cli_args.GuiArgs(subparser, \"gui\", _(\"Launch the Faceswap Graphical User Interface\"))\n    _PARSER.set_defaults(func=_bad_args)\n    arguments = _PARSER.parse_args()\n    arguments.func(arguments)\n\n\nif __name__ == \"__main__\":\n    _main()\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "locales",
          "type": "tree",
          "content": null
        },
        {
          "name": "plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 1.26,
          "content": "[flake8]\nmax-line-length = 99\nmax-complexity=10\nstatistics = True\ncount = True\nexclude = .git, __pycache__\nper-file-ignores = \n    __init__.py:F401\n    lib/gpu_stats/directml.py:E402\n\n[mypy]\n[mypy-comtypes.*]\nignore_missing_imports = True\n[mypy-cv2.*]\nignore_missing_imports = True\n[mypy-fastcluster.*]\nignore_missing_imports = True\n[mypy-ffmpy.*]\nignore_missing_imports = True\n[mypy-imageio.*]\nignore_missing_imports = True\n[mypy-imageio_ffmpeg.*]\nignore_missing_imports = True\n[mypy-keras.*]\nignore_missing_imports = True\n[mypy-matplotlib.*]\nignore_missing_imports = True\n[mypy-numexpr.*]\nignore_missing_imports = True\n[mypy-numpy.*]\nignore_missing_imports = True\n[mypy-numpy.core._multiarray_umath.*]\nignore_missing_imports = True\n[mypy-pexpect.*]\nignore_missing_imports = True\n[mypy-PIL.*]\nignore_missing_imports = True\n[mypy-psutil.*]\nignore_missing_imports = True\n[mypy-pynvml.*]\nignore_missing_imports = True\n[mypy-pynvx.*]\nignore_missing_imports = True\n[mypy-pytest.*]\nignore_missing_imports = True\n[mypy-scipy.*]\nignore_missing_imports = True\n[mypy-sklearn.*]\nignore_missing_imports = True\n[mypy-tensorflow.*]\nignore_missing_imports = True\n[mypy-tqdm.*]\nignore_missing_imports = True\n[mypy-win32console.*]\nignore_missing_imports = True\n[mypy-winpty.*]\nignore_missing_imports = True\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 67.82,
          "content": "#!/usr/bin/env python3\n\"\"\" Install packages for faceswap.py \"\"\"\n# pylint:disable=too-many-lines\n\nimport logging\nimport ctypes\nimport json\nimport locale\nimport platform\nimport operator\nimport os\nimport re\nimport sys\nimport typing as T\nfrom shutil import which\nfrom subprocess import list2cmdline, PIPE, Popen, run, STDOUT\n\nfrom pkg_resources import parse_requirements\n\nfrom lib.logger import log_setup\n\nlogger = logging.getLogger(__name__)\nbackend_type: T.TypeAlias = T.Literal['nvidia', 'apple_silicon', 'directml', 'cpu', 'rocm', \"all\"]\n\n_INSTALL_FAILED = False\n# Packages that are explicitly required for setup.py\n_INSTALLER_REQUIREMENTS: list[tuple[str, str]] = [(\"pexpect>=4.8.0\", \"!Windows\"),\n                                                  (\"pywinpty==2.0.2\", \"Windows\")]\n# Conda packages that are required for a specific backend\n# TODO zlib-wapi is required on some Windows installs where cuDNN complains:\n# Could not locate zlibwapi.dll. Please make sure it is in your library path!\n# This only seems to occur on Anaconda cuDNN not conda-forge\n_BACKEND_SPECIFIC_CONDA: dict[backend_type, list[str]] = {\n    \"nvidia\": [\"cudatoolkit\", \"cudnn\", \"zlib-wapi\"],\n    \"apple_silicon\": [\"libblas\"]}\n# Packages that should only be installed through pip\n_FORCE_PIP: dict[backend_type, list[str]] = {\n    \"nvidia\": [\"tensorflow\"],\n    \"all\": [\n        \"tensorflow-cpu\",  # conda-forge leads to flatbuffer errors because of mixed sources\n        \"imageio-ffmpeg\"]}  # 17/11/23 Conda forge uses incorrect ffmpeg, so fallback to pip\n# Revisions of tensorflow GPU and cuda/cudnn requirements. These relate specifically to the\n# Tensorflow builds available from pypi\n_TENSORFLOW_REQUIREMENTS = {\">=2.10.0,<2.11.0\": [\">=11.2,<11.3\", \">=8.1,<8.2\"]}\n# ROCm min/max version requirements for Tensorflow\n_TENSORFLOW_ROCM_REQUIREMENTS = {\">=2.10.0,<2.11.0\": ((5, 2, 0), (5, 4, 0))}\n# TODO tensorflow-metal versioning\n\n# Mapping of Python packages to their conda names if different from pip or in non-default channel\n_CONDA_MAPPING: dict[str, tuple[str, str]] = {\n    \"cudatoolkit\": (\"cudatoolkit\", \"conda-forge\"),\n    \"cudnn\": (\"cudnn\", \"conda-forge\"),\n    \"fastcluster\": (\"fastcluster\", \"conda-forge\"),\n    \"ffmpy\": (\"ffmpy\", \"conda-forge\"),\n    # \"imageio-ffmpeg\": (\"imageio-ffmpeg\", \"conda-forge\"),\n    \"nvidia-ml-py\": (\"nvidia-ml-py\", \"conda-forge\"),\n    \"tensorflow-deps\": (\"tensorflow-deps\", \"apple\"),\n    \"libblas\": (\"libblas\", \"conda-forge\"),\n    \"zlib-wapi\": (\"zlib-wapi\", \"conda-forge\"),\n    \"xorg-libxft\": (\"xorg-libxft\", \"conda-forge\")}\n\n# Force output to utf-8\nsys.stdout.reconfigure(encoding=\"utf-8\", errors=\"replace\")  # type:ignore[attr-defined]\n\n\nclass Environment():\n    \"\"\" The current install environment\n\n    Parameters\n    ----------\n    updater: bool, Optional\n        ``True`` if the script is being called by Faceswap's internal updater. ``False`` if full\n        setup is running. Default: ``False``\n    \"\"\"\n\n    _backends = ((\"nvidia\", \"apple_silicon\", \"directml\", \"rocm\", \"cpu\"))\n\n    def __init__(self, updater: bool = False) -> None:\n        self.updater = updater\n        # Flag that setup is being run by installer so steps can be skipped\n        self.is_installer: bool = False\n        self.backend: backend_type | None = None\n        self.enable_docker: bool = False\n        self.cuda_cudnn = [\"\", \"\"]\n        self.rocm_version: tuple[int, ...] = (0, 0, 0)\n\n        self._process_arguments()\n        self._check_permission()\n        self._check_system()\n        self._check_python()\n        self._output_runtime_info()\n        self._check_pip()\n        self._upgrade_pip()\n        self._set_env_vars()\n\n    @property\n    def encoding(self) -> str:\n        \"\"\" Get system encoding \"\"\"\n        return locale.getpreferredencoding()\n\n    @property\n    def os_version(self) -> tuple[str, str]:\n        \"\"\" Get OS Version \"\"\"\n        return platform.system(), platform.release()\n\n    @property\n    def py_version(self) -> tuple[str, str]:\n        \"\"\" Get Python Version \"\"\"\n        return platform.python_version(), platform.architecture()[0]\n\n    @property\n    def is_conda(self) -> bool:\n        \"\"\" Check whether using Conda \"\"\"\n        return (\"conda\" in sys.version.lower() or\n                os.path.exists(os.path.join(sys.prefix, 'conda-meta')))\n\n    @property\n    def is_admin(self) -> bool:\n        \"\"\" Check whether user is admin \"\"\"\n        try:\n            retval = os.getuid() == 0  # type: ignore\n        except AttributeError:\n            retval = ctypes.windll.shell32.IsUserAnAdmin() != 0  # type: ignore\n        return retval\n\n    @property\n    def cuda_version(self) -> str:\n        \"\"\" str: The detected globally installed Cuda Version \"\"\"\n        return self.cuda_cudnn[0]\n\n    @property\n    def cudnn_version(self) -> str:\n        \"\"\" str: The detected globally installed cuDNN Version \"\"\"\n        return self.cuda_cudnn[1]\n\n    @property\n    def is_virtualenv(self) -> bool:\n        \"\"\" Check whether this is a virtual environment \"\"\"\n        if not self.is_conda:\n            retval = (hasattr(sys, \"real_prefix\") or\n                      (hasattr(sys, \"base_prefix\") and sys.base_prefix != sys.prefix))\n        else:\n            prefix = os.path.dirname(sys.prefix)\n            retval = os.path.basename(prefix) == \"envs\"\n        return retval\n\n    def _process_arguments(self) -> None:\n        \"\"\" Process any cli arguments and dummy in cli arguments if calling from updater. \"\"\"\n        args = [arg for arg in sys.argv]  # pylint:disable=unnecessary-comprehension\n        if self.updater:\n            from lib.utils import get_backend  # pylint:disable=import-outside-toplevel\n            args.append(f\"--{get_backend()}\")\n\n        logger.debug(args)\n        for arg in args:\n            if arg == \"--installer\":\n                self.is_installer = True\n            if not self.backend and (arg.startswith(\"--\") and\n                                     arg.replace(\"--\", \"\") in self._backends):\n                self.backend = arg.replace(\"--\", \"\").lower()  # type:ignore\n\n    def _check_permission(self) -> None:\n        \"\"\" Check for Admin permissions \"\"\"\n        if self.updater:\n            return\n        if self.is_admin:\n            logger.info(\"Running as Root/Admin\")\n        else:\n            logger.info(\"Running without root/admin privileges\")\n\n    def _check_system(self) -> None:\n        \"\"\" Check the system \"\"\"\n        if not self.updater:\n            logger.info(\"The tool provides tips for installation and installs required python \"\n                        \"packages\")\n        logger.info(\"Setup in %s %s\", self.os_version[0], self.os_version[1])\n        if not self.updater and not self.os_version[0] in [\"Windows\", \"Linux\", \"Darwin\"]:\n            logger.error(\"Your system %s is not supported!\", self.os_version[0])\n            sys.exit(1)\n        if self.os_version[0].lower() == \"darwin\" and platform.machine() == \"arm64\":\n            self.backend = \"apple_silicon\"\n\n            if not self.updater and not self.is_conda:\n                logger.error(\"Setting up Faceswap for Apple Silicon outside of a Conda \"\n                             \"environment is unsupported\")\n                sys.exit(1)\n\n    def _check_python(self) -> None:\n        \"\"\" Check python and virtual environment status \"\"\"\n        logger.info(\"Installed Python: %s %s\", self.py_version[0], self.py_version[1])\n\n        if self.updater:\n            return\n\n        if not ((3, 10) <= sys.version_info < (3, 11) and self.py_version[1] == \"64bit\"):\n            logger.error(\"Please run this script with Python version 3.10 64bit and try \"\n                         \"again.\")\n            sys.exit(1)\n\n    def _output_runtime_info(self) -> None:\n        \"\"\" Output run time info \"\"\"\n        if self.is_conda:\n            logger.info(\"Running in Conda\")\n        if self.is_virtualenv:\n            logger.info(\"Running in a Virtual Environment\")\n        logger.info(\"Encoding: %s\", self.encoding)\n\n    def _check_pip(self) -> None:\n        \"\"\" Check installed pip version \"\"\"\n        if self.updater:\n            return\n        try:\n            import pip  # noqa pylint:disable=unused-import,import-outside-toplevel\n        except ImportError:\n            logger.error(\"Import pip failed. Please Install python3-pip and try again\")\n            sys.exit(1)\n\n    def _upgrade_pip(self) -> None:\n        \"\"\" Upgrade pip to latest version \"\"\"\n        if not self.is_conda:\n            # Don't do this with Conda, as we must use Conda version of pip\n            logger.info(\"Upgrading pip...\")\n            pipexe = [sys.executable, \"-m\", \"pip\"]\n            pipexe.extend([\"install\", \"--no-cache-dir\", \"-qq\", \"--upgrade\"])\n            if not self.is_admin and not self.is_virtualenv:\n                pipexe.append(\"--user\")\n            pipexe.append(\"pip\")\n            run(pipexe, check=True)\n        import pip  # pylint:disable=import-outside-toplevel\n        pip_version = pip.__version__\n        logger.info(\"Installed pip: %s\", pip_version)\n\n    def set_config(self) -> None:\n        \"\"\" Set the backend in the faceswap config file \"\"\"\n        config = {\"backend\": self.backend}\n        pypath = os.path.dirname(os.path.realpath(__file__))\n        config_file = os.path.join(pypath, \"config\", \".faceswap\")\n        with open(config_file, \"w\", encoding=\"utf8\") as cnf:\n            json.dump(config, cnf)\n        logger.info(\"Faceswap config written to: %s\", config_file)\n\n    def _set_env_vars(self) -> None:\n        \"\"\" There are some foibles under Conda which need to be worked around in different\n        situations.\n\n        Linux:\n        Update the LD_LIBRARY_PATH environment variable when activating a conda environment\n        and revert it when deactivating.\n\n        Notes\n        -----\n        From Tensorflow 2.7, installing Cuda Toolkit from conda-forge and tensorflow from pip\n        causes tensorflow to not be able to locate shared libs and hence not use the GPU.\n        We update the environment variable for all instances using Conda as it shouldn't hurt\n        anything and may help avoid conflicts with globally installed Cuda\n        \"\"\"\n        if not self.is_conda:\n            return\n\n        linux_update = self.os_version[0].lower() == \"linux\" and self.backend == \"nvidia\"\n\n        if not linux_update:\n            return\n\n        conda_prefix = os.environ[\"CONDA_PREFIX\"]\n        activate_folder = os.path.join(conda_prefix, \"etc\", \"conda\", \"activate.d\")\n        deactivate_folder = os.path.join(conda_prefix, \"etc\", \"conda\", \"deactivate.d\")\n        os.makedirs(activate_folder, exist_ok=True)\n        os.makedirs(deactivate_folder, exist_ok=True)\n\n        activate_script = os.path.join(conda_prefix, activate_folder, \"env_vars.sh\")\n        deactivate_script = os.path.join(conda_prefix, deactivate_folder, \"env_vars.sh\")\n\n        if os.path.isfile(activate_script):\n            # Only create file if it does not already exist. There may be instances where people\n            # have created their own scripts, but these should be few and far between and those\n            # people should already know what they are doing.\n            return\n\n        conda_libs = os.path.join(conda_prefix, \"lib\")\n        activate = [\"#!/bin/sh\\n\\n\",\n                    \"export OLD_LD_LIBRARY_PATH=${LD_LIBRARY_PATH}\\n\",\n                    f\"export LD_LIBRARY_PATH='{conda_libs}':${{LD_LIBRARY_PATH}}\\n\"]\n        deactivate = [\"#!/bin/sh\\n\\n\",\n                      \"export LD_LIBRARY_PATH=${OLD_LD_LIBRARY_PATH}\\n\",\n                      \"unset OLD_LD_LIBRARY_PATH\\n\"]\n        logger.info(\"Cuda search path set to '%s'\", conda_libs)\n\n        with open(activate_script, \"w\", encoding=\"utf8\") as afile:\n            afile.writelines(activate)\n        with open(deactivate_script, \"w\", encoding=\"utf8\") as afile:\n            afile.writelines(deactivate)\n\n\nclass Packages():\n    \"\"\" Holds information about installed and required packages.\n    Handles updating dependencies based on running platform/backend\n\n    Parameters\n    ----------\n    environment: :class:`Environment`\n        Environment class holding information about the running system\n    \"\"\"\n    def __init__(self, environment: Environment) -> None:\n        self._env = environment\n\n        # Default TK has bad fonts under Linux. There is a better build in Conda-Forge, so set\n        # channel accordingly\n        tk_channel = \"conda-forge\" if self._env.os_version[0].lower() == \"linux\" else \"default\"\n        self._conda_required_packages: list[tuple[list[str] | str, str]] = [(\"tk\", tk_channel),\n                                                                            (\"git\", \"default\")]\n        self._update_backend_specific_conda()\n        self._installed_packages = self._get_installed_packages()\n        self._conda_installed_packages = self._get_installed_conda_packages()\n        self._required_packages: list[tuple[str, list[tuple[str, str]]]] = []\n        self._missing_packages: list[tuple[str, list[tuple[str, str]]]] = []\n        self._conda_missing_packages: list[tuple[list[str] | str, str]] = []\n\n    @property\n    def prerequisites(self) -> list[tuple[str, list[tuple[str, str]]]]:\n        \"\"\" list: Any required packages that the installer needs prior to installing the faceswap\n        environment on the specific platform that are not already installed \"\"\"\n        all_installed = self._all_installed_packages\n        candidates = self._format_requirements(\n            [pkg for pkg, plat in _INSTALLER_REQUIREMENTS\n             if self._env.os_version[0] == plat or (plat[0] == \"!\" and\n                                                    self._env.os_version[0] != plat[1:])])\n        retval = [(pkg, spec) for pkg, spec in candidates\n                  if pkg not in all_installed or (\n                    pkg in all_installed and\n                    not self._validate_spec(spec, all_installed.get(pkg, \"\"))\n                  )]\n        return retval\n\n    @property\n    def packages_need_install(self) -> bool:\n        \"\"\"bool: ``True`` if there are packages available that need to be installed \"\"\"\n        return bool(self._missing_packages or self._conda_missing_packages)\n\n    @property\n    def to_install(self) -> list[tuple[str, list[tuple[str, str]]]]:\n        \"\"\" list: The required packages that need to be installed \"\"\"\n        return self._missing_packages\n\n    @property\n    def to_install_conda(self) -> list[tuple[list[str] | str, str]]:\n        \"\"\" list: The required conda packages that need to be installed \"\"\"\n        return self._conda_missing_packages\n\n    @property\n    def _all_installed_packages(self) -> dict[str, str]:\n        \"\"\" dict[str, str]: The package names and version string for all installed packages across\n        pip and conda \"\"\"\n        return {**self._installed_packages, **self._conda_installed_packages}\n\n    def _update_backend_specific_conda(self) -> None:\n        \"\"\" Add backend specific packages to Conda required packages \"\"\"\n        assert self._env.backend is not None\n        to_add = _BACKEND_SPECIFIC_CONDA.get(self._env.backend)\n        if not to_add:\n            logger.debug(\"No backend packages to add for '%s'. All optional packages: %s\",\n                         self._env.backend, _BACKEND_SPECIFIC_CONDA)\n            return\n\n        combined_cuda = []\n        for pkg in to_add:\n            pkg, channel = _CONDA_MAPPING.get(pkg, (pkg, \"\"))\n            if pkg == \"zlib-wapi\" and self._env.os_version[0].lower() != \"windows\":\n                # TODO move this front and center\n                continue\n            if pkg in (\"cudatoolkit\", \"cudnn\"):  # TODO Handle multiple cuda/cudnn requirements\n                idx = 0 if pkg == \"cudatoolkit\" else 1\n                pkg = f\"{pkg}{list(_TENSORFLOW_REQUIREMENTS.values())[0][idx]}\"\n\n                combined_cuda.append(pkg)\n                continue\n\n            self._conda_required_packages.append((pkg, channel))\n            logger.info(\"Adding conda required package '%s' for backend '%s')\",\n                        pkg, self._env.backend)\n\n        if combined_cuda:\n            self._conda_required_packages.append((combined_cuda, channel))\n            logger.info(\"Adding conda required package '%s' for backend '%s')\",\n                        combined_cuda, self._env.backend)\n\n    @classmethod\n    def _format_requirements(cls, packages: list[str]\n                             ) -> list[tuple[str, list[tuple[str, str]]]]:\n        \"\"\" Parse a list of requirements.txt formatted package strings to a list of pkgresource\n        formatted requirements \"\"\"\n        return [(package.unsafe_name, package.specs)\n                for package in parse_requirements(packages)\n                if package.marker is None or package.marker.evaluate()]\n\n    @classmethod\n    def _validate_spec(cls,\n                       required: list[tuple[str, str]],\n                       existing: str) -> bool:\n        \"\"\" Validate whether the required specification for a package is met by the installed\n        version.\n\n        required: list[tuple[str, str]]\n            The required package version spec to check\n        existing: str\n            The version of the installed package\n\n        Returns\n        -------\n        bool\n            ``True`` if the required specification is met by the existing specification\n        \"\"\"\n        ops = {\"==\": operator.eq, \">=\": operator.ge, \"<=\": operator.le,\n               \">\": operator.gt, \"<\": operator.lt}\n        if not required:\n            return True\n\n        return all(ops[spec[0]]([int(s) for s in existing.split(\".\")],\n                                [int(s) for s in spec[1].split(\".\")])\n                   for spec in required)\n\n    def _get_installed_packages(self) -> dict[str, str]:\n        \"\"\" Get currently installed packages and add to :attr:`_installed_packages`\n\n        Returns\n        -------\n        dict[str, str]\n            The installed package name and version string\n        \"\"\"\n        installed_packages = {}\n        with Popen(f\"\\\"{sys.executable}\\\" -m pip freeze --local\", shell=True, stdout=PIPE) as chk:\n            installed = chk.communicate()[0].decode(self._env.encoding,\n                                                    errors=\"ignore\").splitlines()\n\n        for pkg in installed:\n            if \"==\" not in pkg:\n                continue\n            item = pkg.split(\"==\")\n            installed_packages[item[0]] = item[1]\n        logger.debug(installed_packages)\n        return installed_packages\n\n    def _get_installed_conda_packages(self) -> dict[str, str]:\n        \"\"\" Get currently installed conda packages\n\n        Returns\n        -------\n        dict[str, str]\n            The installed package name and version string\n        \"\"\"\n        if not self._env.is_conda:\n            return {}\n        chk = os.popen(\"conda list\").read()\n        installed = [re.sub(\" +\", \" \", line.strip())\n                     for line in chk.splitlines() if not line.startswith(\"#\")]\n        retval = {}\n        for pkg in installed:\n            item = pkg.split(\" \")\n            retval[item[0]] = item[1]\n        logger.debug(retval)\n        return retval\n\n    def get_required_packages(self) -> None:\n        \"\"\" Load the requirements from the backend specific requirements list \"\"\"\n        req_files = [\"_requirements_base.txt\", f\"requirements_{self._env.backend}.txt\"]\n        pypath = os.path.dirname(os.path.realpath(__file__))\n        requirements = []\n        for req_file in req_files:\n            requirements_file = os.path.join(pypath, \"requirements\", req_file)\n            with open(requirements_file, encoding=\"utf8\") as req:\n                for package in req.readlines():\n                    package = package.strip()\n                    if package and (not package.startswith((\"#\", \"-r\"))):\n                        requirements.append(package)\n\n        self._required_packages = self._format_requirements(requirements)\n        logger.debug(self._required_packages)\n\n    def _update_tf_dep_nvidia(self) -> None:\n        \"\"\" Update the Tensorflow dependency for global Cuda installs \"\"\"\n        if self._env.is_conda:  # Conda handles Cuda and cuDNN so nothing to do here\n            return\n        tf_ver = None\n        cuda_inst = self._env.cuda_version\n        cudnn_inst = self._env.cudnn_version\n        if len(cudnn_inst) == 1:  # Sometimes only major version is reported\n            cudnn_inst = f\"{cudnn_inst}.0\"\n        for key, val in _TENSORFLOW_REQUIREMENTS.items():\n            cuda_req = next(parse_requirements(f\"cuda{val[0]}\")).specs\n            cudnn_req = next(parse_requirements(f\"cudnn{val[1]}\")).specs\n            if (self._validate_spec(cuda_req, cuda_inst)\n                    and self._validate_spec(cudnn_req, cudnn_inst)):\n                tf_ver = key\n                break\n\n        if tf_ver:\n            # Remove the version of tensorflow in requirements file and add the correct version\n            # that corresponds to the installed Cuda/cuDNN versions\n            self._required_packages = [pkg for pkg in self._required_packages\n                                       if pkg[0] != \"tensorflow\"]\n            tf_ver = f\"tensorflow{tf_ver}\"\n            self._required_packages.append((\"tensorflow\", next(parse_requirements(tf_ver)).specs))\n            return\n\n        logger.warning(\n            \"The minimum Tensorflow requirement is 2.10 \\n\"\n            \"Tensorflow currently has no official prebuild for your CUDA, cuDNN combination.\\n\"\n            \"Either install a combination that Tensorflow supports or build and install your own \"\n            \"tensorflow.\\r\\n\"\n            \"CUDA Version: %s\\r\\n\"\n            \"cuDNN Version: %s\\r\\n\"\n            \"Help:\\n\"\n            \"Building Tensorflow: https://www.tensorflow.org/install/install_sources\\r\\n\"\n            \"Tensorflow supported versions: \"\n            \"https://www.tensorflow.org/install/source#tested_build_configurations\",\n            self._env.cuda_version, self._env.cudnn_version)\n\n        custom_tf = input(\"Location of custom tensorflow wheel (leave blank to manually \"\n                          \"install): \")\n        if not custom_tf:\n            return\n\n        custom_tf = os.path.realpath(os.path.expanduser(custom_tf))\n        global _INSTALL_FAILED  # pylint:disable=global-statement\n        if not os.path.isfile(custom_tf):\n            logger.error(\"%s not found\", custom_tf)\n            _INSTALL_FAILED = True\n        elif os.path.splitext(custom_tf)[1] != \".whl\":\n            logger.error(\"%s is not a valid pip wheel\", custom_tf)\n            _INSTALL_FAILED = True\n        elif custom_tf:\n            self._required_packages.append((custom_tf, [(custom_tf, \"\")]))\n\n    def _update_tf_dep_rocm(self) -> None:\n        \"\"\" Update the Tensorflow dependency for global ROCm installs \"\"\"\n        if not any(self._env.rocm_version):  # ROCm was not found and the install will be aborted\n            return\n\n        global _INSTALL_FAILED  # pylint:disable=global-statement\n        candidates = [key for key, val in _TENSORFLOW_ROCM_REQUIREMENTS.items()\n                      if val[0] <= self._env.rocm_version <= val[1]]\n\n        if not candidates:\n            _INSTALL_FAILED = True\n            logger.error(\"No matching Tensorflow candidates found for ROCm %s in %s\",\n                         \".\".join(str(v) for v in self._env.rocm_version),\n                         _TENSORFLOW_ROCM_REQUIREMENTS)\n            return\n\n        # set tf_ver to the minimum and maximum compatible range\n        tf_ver = f\"{candidates[0].split(',')[0]},{candidates[-1].split(',')[-1]}\"\n        # Remove the version of tensorflow-rocm in requirements file and add the correct version\n        # that corresponds to the installed ROCm version\n        self._required_packages = [pkg for pkg in self._required_packages\n                                   if not pkg[0].startswith(\"tensorflow-rocm\")]\n        tf_ver = f\"tensorflow-rocm{tf_ver}\"\n        self._required_packages.append((\"tensorflow-rocm\",\n                                        next(parse_requirements(tf_ver)).specs))\n\n    def update_tf_dep(self) -> None:\n        \"\"\" Update Tensorflow Dependency.\n\n        Selects a compatible version of Tensorflow for a globally installed GPU library\n        \"\"\"\n        if self._env.backend == \"nvidia\":\n            self._update_tf_dep_nvidia()\n        if self._env.backend == \"rocm\":\n            self._update_tf_dep_rocm()\n\n    def _check_conda_missing_dependencies(self) -> None:\n        \"\"\" Check for conda missing dependencies and add to :attr:`_conda_missing_packages` \"\"\"\n        if not self._env.is_conda:\n            return\n        for pkg in self._conda_required_packages:\n            reqs = next(parse_requirements(pkg[0]))  # TODO Handle '=' vs '==' for conda\n            key = reqs.unsafe_name\n            specs = reqs.specs\n\n            if pkg[0] == \"tk\" and self._env.os_version[0].lower() == \"linux\":\n                # Default tk has bad fonts under Linux. We pull in an explicit build from\n                # Conda-Forge that is compiled with better fonts.\n                # Ref: https://github.com/ContinuumIO/anaconda-issues/issues/6833\n                newpkg = (f\"{pkg[0]}=*=xft_*\", pkg[1])  # Swap out package for explicit XFT version\n                self._conda_missing_packages.append(newpkg)\n                # We also need to bring in xorg-libxft incase libXft does not exist on host system\n                self._conda_missing_packages.append(_CONDA_MAPPING[\"xorg-libxft\"])\n                continue\n\n            if key not in self._conda_installed_packages:\n                self._conda_missing_packages.append(pkg)\n                continue\n\n            if not self._validate_spec(specs, self._conda_installed_packages[key]):\n                self._conda_missing_packages.append(pkg)\n        logger.debug(self._conda_missing_packages)\n\n    def check_missing_dependencies(self) -> None:\n        \"\"\" Check for missing dependencies and add to :attr:`_missing_packages` \"\"\"\n        for key, specs in self._required_packages:\n\n            if self._env.is_conda:  # Get Conda alias for Key\n                key = _CONDA_MAPPING.get(key, (key, None))[0]\n\n            if key not in self._all_installed_packages:\n                # Add not installed packages to missing packages list\n                self._missing_packages.append((key, specs))\n                continue\n\n            if not self._validate_spec(specs, self._all_installed_packages.get(key, \"\")):\n                self._missing_packages.append((key, specs))\n\n        logger.debug(self._missing_packages)\n        self._check_conda_missing_dependencies()\n\n\nclass Checks():  # pylint:disable=too-few-public-methods\n    \"\"\" Pre-installation checks\n\n    Parameters\n    ----------\n    environment: :class:`Environment`\n        Environment class holding information about the running system\n    \"\"\"\n    def __init__(self, environment: Environment) -> None:\n        self._env:  Environment = environment\n        self._tips: Tips = Tips()\n    # Checks not required for installer\n        if self._env.is_installer:\n            return\n    # Checks not required for Apple Silicon\n        if self._env.backend == \"apple_silicon\":\n            return\n        self._user_input()\n        self._check_cuda()\n        self._check_rocm()\n        if self._env.os_version[0] == \"Windows\":\n            self._tips.pip()\n\n    def _rocm_ask_enable(self) -> None:\n        \"\"\" Set backend to 'rocm' if OS is Linux and ROCm support required \"\"\"\n        if self._env.os_version[0] != \"Linux\":\n            return\n        logger.info(\"ROCm support:\\r\\nIf you are using an AMD GPU, then select 'yes'.\"\n                    \"\\r\\nCPU/non-AMD GPU users should answer 'no'.\\r\\n\")\n        i = input(\"Enable ROCm Support? [y/N] \")\n        if i in (\"Y\", \"y\"):\n            logger.info(\"ROCm Support Enabled\")\n            self._env.backend = \"rocm\"\n\n    def _directml_ask_enable(self) -> None:\n        \"\"\" Set backend to 'directml' if OS is Windows and DirectML support required \"\"\"\n        if self._env.os_version[0] != \"Windows\":\n            return\n        logger.info(\"DirectML support:\\r\\nIf you are using an AMD or Intel GPU, then select 'yes'.\"\n                    \"\\r\\nNvidia users should answer 'no'.\")\n        i = input(\"Enable DirectML Support? [y/N] \")\n        if i in (\"Y\", \"y\"):\n            logger.info(\"DirectML Support Enabled\")\n            self._env.backend = \"directml\"\n\n    def _user_input(self) -> None:\n        \"\"\" Get user input for AMD/DirectML/ROCm/Cuda/Docker \"\"\"\n        self._directml_ask_enable()\n        self._rocm_ask_enable()\n        if not self._env.backend:\n            self._docker_ask_enable()\n            self._cuda_ask_enable()\n        if self._env.os_version[0] != \"Linux\" and (self._env.enable_docker\n                                                   and self._env.backend == \"nvidia\"):\n            self._docker_confirm()\n        if self._env.enable_docker:\n            self._docker_tips()\n            self._env.set_config()\n            sys.exit(0)\n\n    def _docker_ask_enable(self) -> None:\n        \"\"\" Enable or disable Docker \"\"\"\n        i = input(\"Enable  Docker? [y/N] \")\n        if i in (\"Y\", \"y\"):\n            logger.info(\"Docker Enabled\")\n            self._env.enable_docker = True\n        else:\n            logger.info(\"Docker Disabled\")\n            self._env.enable_docker = False\n\n    def _docker_confirm(self) -> None:\n        \"\"\" Warn if nvidia-docker on non-Linux system \"\"\"\n        logger.warning(\"Nvidia-Docker is only supported on Linux.\\r\\n\"\n                       \"Only CPU is supported in Docker for your system\")\n        self._docker_ask_enable()\n        if self._env.enable_docker:\n            logger.warning(\"CUDA Disabled\")\n            self._env.backend = \"cpu\"\n\n    def _docker_tips(self) -> None:\n        \"\"\" Provide tips for Docker use \"\"\"\n        if self._env.backend != \"nvidia\":\n            self._tips.docker_no_cuda()\n        else:\n            self._tips.docker_cuda()\n\n    def _cuda_ask_enable(self) -> None:\n        \"\"\" Enable or disable CUDA \"\"\"\n        i = input(\"Enable  CUDA? [Y/n] \")\n        if i in (\"\", \"Y\", \"y\"):\n            logger.info(\"CUDA Enabled\")\n            self._env.backend = \"nvidia\"\n\n    def _check_cuda(self) -> None:\n        \"\"\" Check for Cuda and cuDNN Locations. \"\"\"\n        if self._env.backend != \"nvidia\":\n            logger.debug(\"Skipping Cuda checks as not enabled\")\n            return\n\n        if self._env.is_conda:\n            logger.info(\"Skipping Cuda/cuDNN checks for Conda install\")\n            return\n\n        if self._env.os_version[0] in (\"Linux\", \"Windows\"):\n            global _INSTALL_FAILED  # pylint:disable=global-statement\n            check = CudaCheck()\n            if check.cuda_version:\n                self._env.cuda_cudnn[0] = check.cuda_version\n                logger.info(\"CUDA version: %s\", self._env.cuda_version)\n            else:\n                logger.error(\"CUDA not found. Install and try again.\\n\"\n                             \"Recommended version:      CUDA 10.1     cuDNN 7.6\\n\"\n                             \"CUDA: https://developer.nvidia.com/cuda-downloads\\n\"\n                             \"cuDNN: https://developer.nvidia.com/rdp/cudnn-download\")\n                _INSTALL_FAILED = True\n                return\n\n            if check.cudnn_version:\n                self._env.cuda_cudnn[1] = \".\".join(check.cudnn_version.split(\".\")[:2])\n                logger.info(\"cuDNN version: %s\", self._env.cudnn_version)\n            else:\n                logger.error(\"cuDNN not found. See \"\n                             \"https://github.com/deepfakes/faceswap/blob/master/INSTALL.md#\"\n                             \"cudnn for instructions\")\n                _INSTALL_FAILED = True\n            return\n\n        # If we get here we're on MacOS\n        self._tips.macos()\n        logger.warning(\"Cannot find CUDA on macOS\")\n        self._env.cuda_cudnn[0] = input(\"Manually specify CUDA version: \")\n\n    def _check_rocm(self) -> None:\n        \"\"\" Check for ROCm version \"\"\"\n        if self._env.backend != \"rocm\" or self._env.os_version[0] != \"Linux\":\n            logger.info(\"Skipping ROCm checks as not enabled\")\n            return\n\n        global _INSTALL_FAILED  # pylint:disable=global-statement\n        check = ROCmCheck()\n\n        str_min = \".\".join(str(v) for v in check.version_min)\n        str_max = \".\".join(str(v) for v in check.version_max)\n\n        if check.is_valid:\n            self._env.rocm_version = check.rocm_version\n            logger.info(\"ROCm version: %s\", \".\".join(str(v) for v in self._env.rocm_version))\n        else:\n            if check.rocm_version:\n                msg = f\"Incompatible ROCm version: {'.'.join(str(v) for v in check.rocm_version)}\"\n            else:\n                msg = \"ROCm not found\"\n            logger.error(\"%s.\\n\"\n                         \"A compatible version of ROCm must be installed to proceed.\\n\"\n                         \"ROCm versions between %s and %s are supported.\\n\"\n                         \"ROCm install guide: https://docs.amd.com/bundle/ROCm_Installation_Guide\"\n                         \"v5.0/page/Overview_of_ROCm_Installation_Methods.html\",\n                         msg,\n                         str_min,\n                         str_max)\n            _INSTALL_FAILED = True\n\n\ndef _check_ld_config(lib: str) -> str:\n    \"\"\" Locate a library in ldconfig\n\n    Parameters\n    ----------\n    lib: str The library to locate\n\n    Returns\n    -------\n    str\n        The library from ldconfig, or empty string if not found\n    \"\"\"\n    retval = \"\"\n    ldconfig = which(\"ldconfig\")\n    if not ldconfig:\n        return retval\n\n    retval = next((line.decode(\"utf-8\", errors=\"replace\").strip()\n                  for line in run([ldconfig, \"-p\"],\n                                  capture_output=True,\n                                  check=False).stdout.splitlines()\n                  if lib.encode(\"utf-8\") in line), \"\")\n\n    if retval or (not retval and not os.environ.get(\"LD_LIBRARY_PATH\")):\n        return retval\n\n    for path in os.environ[\"LD_LIBRARY_PATH\"].split(\":\"):\n        if not path or not os.path.exists(path):\n            continue\n\n        retval = next((fname.strip() for fname in reversed(os.listdir(path))\n                       if lib in fname), \"\")\n        if retval:\n            break\n\n    return retval\n\n\nclass ROCmCheck():  # pylint:disable=too-few-public-methods\n    \"\"\" Find the location of system installed ROCm on Linux \"\"\"\n    def __init__(self) -> None:\n        self.version_min = min(v[0] for v in _TENSORFLOW_ROCM_REQUIREMENTS.values())\n        self.version_max = max(v[1] for v in _TENSORFLOW_ROCM_REQUIREMENTS.values())\n        self.rocm_version: tuple[int, ...] = (0, 0, 0)\n        if platform.system() == \"Linux\":\n            self._rocm_check()\n\n    @property\n    def is_valid(self):\n        \"\"\" bool: `True` if ROCm has been detected and is between the minimum and maximum\n        compatible versions otherwise ``False`` \"\"\"\n        return self.version_min <= self.rocm_version <= self.version_max\n\n    def _rocm_check(self) -> None:\n        \"\"\" Attempt to locate the installed ROCm version from the dynamic link loader. If not found\n        with ldconfig then attempt to find it in LD_LIBRARY_PATH. If found, set the\n        :attr:`rocm_version` to the discovered version\n        \"\"\"\n        chk = _check_ld_config(\"librocm-core.so.\")\n        if not chk:\n            return\n\n        rocm_vers = chk.strip()\n        version = re.search(r\"rocm\\-(\\d+\\.\\d+\\.\\d+)\", rocm_vers)\n        if version is None:\n            return\n        try:\n            self.rocm_version = tuple(int(v) for v in version.groups()[0].split(\".\"))\n        except ValueError:\n            return\n\n\nclass CudaCheck():  # pylint:disable=too-few-public-methods\n    \"\"\" Find the location of system installed Cuda and cuDNN on Windows and Linux. \"\"\"\n\n    def __init__(self) -> None:\n        self.cuda_path: str | None = None\n        self.cuda_version: str | None = None\n        self.cudnn_version: str | None = None\n\n        self._os: str = platform.system().lower()\n        self._cuda_keys: list[str] = [key\n                                      for key in os.environ\n                                      if key.lower().startswith(\"cuda_path_v\")]\n        self._cudnn_header_files: list[str] = [\"cudnn_version.h\", \"cudnn.h\"]\n        logger.debug(\"cuda keys: %s, cudnn header files: %s\",\n                     self._cuda_keys, self._cudnn_header_files)\n        if self._os in (\"windows\", \"linux\"):\n            self._cuda_check()\n            self._cudnn_check()\n\n    def _cuda_check(self) -> None:\n        \"\"\" Obtain the location and version of Cuda and populate :attr:`cuda_version` and\n        :attr:`cuda_path`\n\n        Initially just calls `nvcc -V` to get the installed version of Cuda currently in use.\n        If this fails, drills down to more OS specific checking methods.\n        \"\"\"\n        with Popen(\"nvcc -V\", shell=True, stdout=PIPE, stderr=PIPE) as chk:\n            stdout, stderr = chk.communicate()\n        if not stderr:\n            version = re.search(r\".*release (?P<cuda>\\d+\\.\\d+)\",\n                                stdout.decode(locale.getpreferredencoding(), errors=\"ignore\"))\n            if version is not None:\n                self.cuda_version = version.groupdict().get(\"cuda\", None)\n            path = which(\"nvcc\")\n            if path:\n                path = path.split(\"\\n\")[0]  # Split multiple entries and take first found\n                while True:  # Get Cuda root folder\n                    path, split = os.path.split(path)\n                    if split == \"bin\":\n                        break\n                self.cuda_path = path\n            return\n\n        # Failed to load nvcc, manual check\n        getattr(self, f\"_cuda_check_{self._os}\")()\n        logger.debug(\"Cuda Version: %s, Cuda Path: %s\", self.cuda_version, self.cuda_path)\n\n    def _cuda_check_linux(self) -> None:\n        \"\"\" For Linux check the dynamic link loader for libcudart. If not found with ldconfig then\n        attempt to find it in LD_LIBRARY_PATH. \"\"\"\n        chk = _check_ld_config(\"libcudart.so.\")\n        if not chk:  # Cuda not found\n            return\n\n        cudavers = chk.strip().replace(\"libcudart.so.\", \"\")\n        self.cuda_version = cudavers[:cudavers.find(\" \")] if \" \" in cudavers else cudavers\n        cuda_path = chk[chk.find(\"=>\") + 3:chk.find(\"targets\") - 1]\n        if os.path.exists(cuda_path):\n            self.cuda_path = cuda_path\n\n    def _cuda_check_windows(self) -> None:\n        \"\"\" Check Windows CUDA Version and path from Environment Variables\"\"\"\n        if not self._cuda_keys:  # Cuda environment variable not found\n            return\n        self.cuda_version = self._cuda_keys[0].lower().replace(\"cuda_path_v\", \"\").replace(\"_\", \".\")\n        self.cuda_path = os.environ[self._cuda_keys[0][0]]\n\n    def _cudnn_check_files(self) -> bool:\n        \"\"\" Check header files for cuDNN version \"\"\"\n        cudnn_checkfiles = getattr(self, f\"_get_checkfiles_{self._os}\")()\n        cudnn_checkfile = next((hdr for hdr in cudnn_checkfiles if os.path.isfile(hdr)), None)\n        logger.debug(\"cudnn checkfiles: %s\", cudnn_checkfile)\n        if not cudnn_checkfile:\n            return False\n\n        found = 0\n        with open(cudnn_checkfile, \"r\", encoding=\"utf8\") as ofile:\n            for line in ofile:\n                if line.lower().startswith(\"#define cudnn_major\"):\n                    major = line[line.rfind(\" \") + 1:].strip()\n                    found += 1\n                elif line.lower().startswith(\"#define cudnn_minor\"):\n                    minor = line[line.rfind(\" \") + 1:].strip()\n                    found += 1\n                elif line.lower().startswith(\"#define cudnn_patchlevel\"):\n                    patchlevel = line[line.rfind(\" \") + 1:].strip()\n                    found += 1\n                if found == 3:\n                    break\n        if found != 3:  # Full version not determined\n            return False\n\n        self.cudnn_version = \".\".join([str(major), str(minor), str(patchlevel)])\n        logger.debug(\"cudnn version: %s\", self.cudnn_version)\n        return True\n\n    def _cudnn_check(self) -> None:\n        \"\"\" Check Linux or Windows cuDNN Version from cudnn.h and add to :attr:`cudnn_version`. \"\"\"\n        if self._cudnn_check_files():\n            return\n        if self._os == \"windows\":\n            return\n\n        chk = _check_ld_config(\"libcudnn.so.\")\n        if not chk:\n            return\n        cudnnvers = chk.strip().replace(\"libcudnn.so.\", \"\").split()[0]\n        if not cudnnvers:\n            return\n\n        self.cudnn_version = cudnnvers\n        logger.debug(\"cudnn version: %s\", self.cudnn_version)\n\n    def _get_checkfiles_linux(self) -> list[str]:\n        \"\"\" Return the the files to check for cuDNN locations for Linux by querying\n        the dynamic link loader.\n\n        Returns\n        -------\n        list\n            List of header file locations to scan for cuDNN versions\n        \"\"\"\n        chk = _check_ld_config(\"libcudnn.so.\")\n        chk = chk.strip().replace(\"libcudnn.so.\", \"\")\n        if not chk:\n            return []\n\n        cudnn_vers = chk[0]\n        header_files = [f\"cudnn_v{cudnn_vers}.h\"] + self._cudnn_header_files\n\n        cudnn_path = os.path.realpath(chk[chk.find(\"=>\") + 3:chk.find(\"libcudnn\") - 1])\n        cudnn_path = cudnn_path.replace(\"lib\", \"include\")\n        cudnn_checkfiles = [os.path.join(cudnn_path, header) for header in header_files]\n        return cudnn_checkfiles\n\n    def _get_checkfiles_windows(self) -> list[str]:\n        \"\"\" Return the check-file locations for Windows. Just looks inside the include folder of\n        the discovered :attr:`cuda_path`\n\n        Returns\n        -------\n        list\n            List of header file locations to scan for cuDNN versions\n        \"\"\"\n        # TODO A more reliable way of getting the windows location\n        if not self.cuda_path or not os.path.exists(self.cuda_path):\n            return []\n        scandir = os.path.join(self.cuda_path, \"include\")\n        cudnn_checkfiles = [os.path.join(scandir, header) for header in self._cudnn_header_files]\n        return cudnn_checkfiles\n\n\nclass Install():  # pylint:disable=too-few-public-methods\n    \"\"\" Handles installation of Faceswap requirements\n\n    Parameters\n    ----------\n    environment: :class:`Environment`\n        Environment class holding information about the running system\n    is_gui: bool, Optional\n        ``True`` if the caller is the Faceswap GUI. Used to prevent output of progress bars\n        which get scrambled in the GUI\n     \"\"\"\n    def __init__(self, environment: Environment, is_gui: bool = False) -> None:\n        self._env = environment\n        self._packages = Packages(environment)\n        self._is_gui = is_gui\n\n        if self._env.os_version[0] == \"Windows\":\n            self._installer: type[Installer] = WinPTYInstaller\n        else:\n            self._installer = PexpectInstaller\n\n        if not self._env.is_installer and not self._env.updater:\n            self._ask_continue()\n\n        self._packages.get_required_packages()\n        self._packages.update_tf_dep()\n        self._packages.check_missing_dependencies()\n\n        if self._env.updater and not self._packages.packages_need_install:\n            logger.info(\"All Dependencies are up to date\")\n            return\n\n        logger.info(\"Installing Required Python Packages. This may take some time...\")\n        self._install_setup_packages()\n        self._install_missing_dep()\n        if self._env.updater:\n            return\n        if not _INSTALL_FAILED:\n            logger.info(\"All python3 dependencies are met.\\r\\nYou are good to go.\\r\\n\\r\\n\"\n                        \"Enter:  'python faceswap.py -h' to see the options\\r\\n\"\n                        \"        'python faceswap.py gui' to launch the GUI\")\n        else:\n            logger.error(\"Some packages failed to install. This may be a temporary error which \"\n                         \"might be fixed by re-running this script. Otherwise please install \"\n                         \"these packages manually.\")\n            sys.exit(1)\n\n    def _ask_continue(self) -> None:\n        \"\"\" Ask Continue with Install \"\"\"\n        text = \"Please ensure your System Dependencies are met\"\n        if self._env.backend == \"rocm\":\n            text += (\"\\r\\nROCm users: Please ensure that your AMD GPU is supported by the \"\n                     \"installed ROCm version before proceeding.\")\n        text += \"\\r\\nContinue? [y/N] \"\n        inp = input(text)\n        if inp in (\"\", \"N\", \"n\"):\n            logger.error(\"Please install system dependencies to continue\")\n            sys.exit(1)\n\n    @classmethod\n    def _format_package(cls, package: str, version: list[tuple[str, str]]) -> str:\n        \"\"\" Format a parsed requirement package and version string to a format that can be used by\n        the installer.\n\n        Parameters\n        ----------\n        package: str\n            The package name\n        version: list\n            The parsed requirement version strings\n\n        Returns\n        -------\n        str\n            The formatted full package and version string\n        \"\"\"\n        return f\"{package}{','.join(''.join(spec) for spec in version)}\"\n\n    def _install_setup_packages(self) -> None:\n        \"\"\" Install any packages that are required for the setup.py installer to work. This\n        includes the pexpect package if it is not already installed.\n\n        Subprocess is used as we do not currently have pexpect\n        \"\"\"\n        for pkg in self._packages.prerequisites:\n            pkg_str = self._format_package(*pkg)\n            if self._env.is_conda:\n                cmd = [\"conda\", \"install\", \"-y\"]\n                if any(char in pkg_str for char in (\" \", \"<\", \">\", \"*\", \"|\")):\n                    pkg_str = f\"\\\"{pkg_str}\\\"\"\n            else:\n                cmd = [sys.executable, \"-m\", \"pip\", \"install\", \"--no-cache-dir\"]\n                if self._env.is_admin:\n                    cmd.append(\"--user\")\n            cmd.append(pkg_str)\n\n            clean_pkg = pkg_str.replace(\"\\\"\", \"\")\n            installer = SubProcInstaller(self._env, clean_pkg, cmd, self._is_gui)\n            if installer() != 0:\n                logger.error(\"Unable to install package: %s. Process aborted\", clean_pkg)\n                sys.exit(1)\n\n    def _install_conda_packages(self) -> None:\n        \"\"\" Install required conda packages \"\"\"\n        logger.info(\"Installing Required Conda Packages. This may take some time...\")\n        for pkg in self._packages.to_install_conda:\n            channel = \"\" if len(pkg) != 2 else pkg[1]\n            self._from_conda(pkg[0], channel=channel, conda_only=True)\n\n    def _install_python_packages(self) -> None:\n        \"\"\" Install required pip packages \"\"\"\n        conda_only = False\n        assert self._env.backend is not None\n        for pkg, version in self._packages.to_install:\n            if self._env.is_conda:\n                mapping = _CONDA_MAPPING.get(pkg, (pkg, \"\"))\n                channel = \"\" if mapping[1] is None else mapping[1]\n                pkg = mapping[0]\n                pip_only = pkg in _FORCE_PIP.get(self._env.backend, []) or pkg in _FORCE_PIP[\"all\"]\n            pkg = self._format_package(pkg, version) if version else pkg\n            if self._env.is_conda and not pip_only:\n                if self._from_conda(pkg, channel=channel, conda_only=conda_only):\n                    continue\n            self._from_pip(pkg)\n\n    def _install_missing_dep(self) -> None:\n        \"\"\" Install missing dependencies \"\"\"\n        self._install_conda_packages()  # Install conda packages first\n        self._install_python_packages()\n\n    def _from_conda(self,\n                    package: list[str] | str,\n                    channel: str = \"\",\n                    conda_only: bool = False) -> bool:\n        \"\"\" Install a conda package\n\n        Parameters\n        ----------\n        package: list[str] | str\n            The full formatted package(s), with version(s), to be installed\n        channel: str, optional\n            The Conda channel to install from. Select empty string for default channel.\n            Default: ``\"\"`` (empty string)\n        conda_only: bool, optional\n            ``True`` if the package is only available in Conda. Default: ``False``\n\n        Returns\n        -------\n        bool\n            ``True`` if the package was succesfully installed otherwise ``False``\n        \"\"\"\n        #  Packages with special characters need to be enclosed in double quotes\n        success = True\n        condaexe = [\"conda\", \"install\", \"-y\"]\n        if channel:\n            condaexe.extend([\"-c\", channel])\n\n        pkgs = package if isinstance(package, list) else [package]\n\n        for i, pkg in enumerate(pkgs):\n            if any(char in pkg for char in (\" \", \"<\", \">\", \"*\", \"|\")):\n                pkgs[i] = f\"\\\"{pkg}\\\"\"\n        condaexe.extend(pkgs)\n\n        clean_pkg = \" \".join([p.replace(\"\\\"\", \"\") for p in pkgs])\n        installer = self._installer(self._env, clean_pkg, condaexe, self._is_gui)\n        retcode = installer()\n\n        if retcode != 0 and not conda_only:\n            logger.info(\"%s not available in Conda. Installing with pip\", package)\n        elif retcode != 0:\n            logger.warning(\"Couldn't install %s with Conda. Please install this package \"\n                           \"manually\", package)\n        success = retcode == 0 and success\n        return success\n\n    def _from_pip(self, package: str) -> None:\n        \"\"\" Install a pip package\n\n        Parameters\n        ----------\n        package: str\n            The full formatted package, with version, to be installed\n        \"\"\"\n        pipexe = [sys.executable, \"-u\", \"-m\", \"pip\", \"install\", \"--no-cache-dir\"]\n        # install as user to solve perm restriction\n        if not self._env.is_admin and not self._env.is_virtualenv:\n            pipexe.append(\"--user\")\n        pipexe.append(package)\n\n        installer = self._installer(self._env, package, pipexe, self._is_gui)\n        if installer() != 0:\n            logger.warning(\"Couldn't install %s with pip. Please install this package manually\",\n                           package)\n            global _INSTALL_FAILED  # pylint:disable=global-statement\n            _INSTALL_FAILED = True\n\n\nclass ProgressBar():\n    \"\"\" Simple progress bar using STDLib for intercepting Conda installs and keeping the\n    terminal from getting jumbled \"\"\"\n    def __init__(self):\n        self._width_desc = 21\n        self._width_size = 9\n        self._width_bar = 35\n        self._width_pct = 4\n        self._marker = \"█\"\n\n        self._cursor_visible = True\n        self._current_pos = 0\n        self._bars = []\n\n    @classmethod\n    def _display_cursor(cls, visible: bool) -> None:\n        \"\"\" Sends ANSI code to display or hide the cursor\n\n        Parameters\n        ----------\n        visible: bool\n            ``True`` to display the cursor. ``False`` to hide the cursor\n        \"\"\"\n        code = \"\\x1b[?25h\" if visible else \"\\x1b[?25l\"\n        print(code, end=\"\\r\")\n\n    def _format_bar(self, description: str, size: str, percent: int) -> str:\n        \"\"\" Format the progress bar for display\n\n        Parameters\n        ----------\n        description: str\n            The description to display for the progress bar\n        size: str\n            The size of the download, including units\n        percent: int\n            The percentage progress of the bar\n        \"\"\"\n        size = size[:self._width_size].ljust(self._width_size)\n        bar_len = int(self._width_bar * (percent / 100))\n        progress = f\"{self._marker * bar_len}\"[:self._width_bar].ljust(self._width_bar)\n        pct = f\"{percent}%\"[:self._width_pct].rjust(self._width_pct)\n        return f\"  {description}| {size} | {progress} | {pct}\"\n\n    def _move_cursor(self, position: int) -> str:\n        \"\"\" Generate ANSI code for moving the cursor to the given progress bar's position\n\n        Parameters\n        ----------\n        position: int\n            The progress bar position to move to\n\n        Returns\n        -------\n        str\n            The ansi code to move to the given position\n        \"\"\"\n        move = position - self._current_pos\n        retval = \"\\x1b[A\" if move < 0 else \"\\x1b[B\" if move > 0 else \"\"\n        retval *= abs(move)\n        return retval\n\n    def __call__(self, description: str, size: str, percent: int) -> None:\n        \"\"\" Create or update a progress bar\n\n        Parameters\n        ----------\n        description: str\n            The description to display for the progress bar\n        size: str\n            The size of the download, including units\n        percent: int\n            The percentage progress of the bar\n        \"\"\"\n        if self._cursor_visible:\n            self._display_cursor(visible=False)\n\n        desc = description[:self._width_desc].ljust(self._width_desc)\n        if desc not in self._bars:\n            self._bars.append(desc)\n\n        position = self._bars.index(desc)\n        pbar = self._format_bar(desc, size, percent)\n\n        output = f\"{self._move_cursor(position)} {pbar}\"\n\n        print(output)\n        self._current_pos = position + 1\n\n    def close(self) -> None:\n        \"\"\" Reset all progress bars and re-enable the cursor \"\"\"\n        print(self._move_cursor(len(self._bars)), end=\"\\r\")\n        self._display_cursor(True)\n        self._cursor_visible = True\n        self._current_pos = 0\n        self._bars = []\n\n\nclass Installer():\n    \"\"\" Parent class for package installers.\n\n    PyWinPty is used for Windows, Pexpect is used for Linux, as these can provide us with realtime\n    output.\n\n    Subprocess is used as a fallback if any of the above fail, but this caches output, so it can\n    look like the process has hung to the end user\n\n    Parameters\n    ----------\n    environment: :class:`Environment`\n        Environment class holding information about the running system\n    package: str\n        The package name that is being installed\n    command: list\n        The command to run\n    is_gui: bool\n        ``True`` if the process is being called from the Faceswap GUI\n    \"\"\"\n    def __init__(self,\n                 environment: Environment,\n                 package: str,\n                 command: list[str],\n                 is_gui: bool) -> None:\n        logger.info(\"Installing %s\", package)\n        logger.debug(\"argv: %s\", command)\n        self._env = environment\n        self._package = package\n        self._command = command\n        self._is_conda = \"conda\" in command\n        self._is_gui = is_gui\n\n        self._progess_bar = ProgressBar()\n        self._re_conda = re.compile(\n            rb\"(?P<lib>^\\S+)\\s+\\|\\s+(?P<tot>\\d+\\.?\\d*\\s\\w+).*\\|\\s+(?P<prg>\\d+%)\")\n        self._re_pip_pkg = re.compile(rb\"^\\s*Downloading\\s(?P<lib>\\w+-.+?)-\")\n        self._re_pip = re.compile(rb\"(?P<done>\\d+\\.?\\d*)/(?P<tot>\\d+\\.?\\d*\\s\\w+)\")\n        self._pip_pkg = \"\"\n        self._seen_lines: set[str] = set()\n\n    def __call__(self) -> int:\n        \"\"\" Call the subclassed call function\n\n        Returns\n        -------\n        int\n            The return code of the package install process\n        \"\"\"\n        try:\n            returncode = self.call()\n        except Exception as err:  # pylint:disable=broad-except\n            logger.debug(\"Failed to install with %s. Falling back to subprocess. Error: %s\",\n                         self.__class__.__name__, str(err))\n            self._progess_bar.close()\n            returncode = SubProcInstaller(self._env, self._package, self._command, self._is_gui)()\n\n        logger.debug(\"Package: %s, returncode: %s\", self._package, returncode)\n        self._progess_bar.close()\n        return returncode\n\n    def call(self) -> int:\n        \"\"\" Override for package installer specific logic.\n\n        Returns\n        -------\n        int\n            The return code of the package install process\n        \"\"\"\n        raise NotImplementedError()\n\n    def _print_conda(self, text: bytes) -> None:\n        \"\"\" Output progress for Conda installs\n\n        Parameters\n        ----------\n        text: bytes\n            The text to print\n        \"\"\"\n        data = self._re_conda.match(text)\n        if not data:\n            return\n        lib = data.groupdict()[\"lib\"].decode(\"utf-8\", errors=\"replace\")\n        size = data.groupdict()[\"tot\"].decode(\"utf-8\", errors=\"replace\")\n        progress = int(data.groupdict()[\"prg\"].decode(\"utf-8\", errors=\"replace\")[:-1])\n        self._progess_bar(lib, size, progress)\n\n    def _print_pip(self, text: bytes) -> None:\n        \"\"\" Output progress for Pip installs\n\n        Parameters\n        ----------\n        text: bytes\n            The text to print\n        \"\"\"\n        pkg = self._re_pip_pkg.match(text)\n        if pkg:\n            logger.debug(\"Collected pip package '%s'\", pkg)\n            self._pip_pkg = pkg.groupdict()[\"lib\"].decode(\"utf-8\", errors=\"replace\")\n            return\n        data = self._re_pip.search(text)\n        if not data:\n            return\n        done = float(data.groupdict()[\"done\"].decode(\"utf-8\", errors=\"replace\"))\n        size = data.groupdict()[\"tot\"].decode(\"utf-8\", errors=\"replace\")\n        progress = int(round(done / float(size.split()[0]) * 100, 0))\n        self._progess_bar(self._pip_pkg, size, progress)\n\n    def _non_gui_print(self, text: bytes) -> None:\n        \"\"\" Print output to console if not running in the GUI\n\n        Parameters\n        ----------\n        text: bytes\n            The text to print\n        \"\"\"\n        if self._is_gui:\n            return\n        if self._is_conda:\n            self._print_conda(text)\n        else:\n            self._print_pip(text)\n\n    def _seen_line_log(self, text: str) -> None:\n        \"\"\" Output gets spammed to the log file when conda is waiting/processing. Only log each\n        unique line once.\n\n        Parameters\n        ----------\n        text: str\n            The text to log\n        \"\"\"\n        if text in self._seen_lines:\n            return\n        logger.debug(text)\n        self._seen_lines.add(text)\n\n\nclass PexpectInstaller(Installer):  # pylint:disable=too-few-public-methods\n    \"\"\" Package installer for Linux/macOS using Pexpect\n\n    Uses Pexpect for installing packages allowing access to realtime feedback\n\n    Parameters\n    ----------\n    environment: :class:`Environment`\n        Environment class holding information about the running system\n    package: str\n        The package name that is being installed\n    command: list\n        The command to run\n    is_gui: bool\n        ``True`` if the process is being called from the Faceswap GUI\n    \"\"\"\n    def call(self) -> int:\n        \"\"\" Install a package using the Pexpect module\n\n        Returns\n        -------\n        int\n            The return code of the package install process\n        \"\"\"\n        import pexpect  # pylint:disable=import-outside-toplevel,import-error\n        proc = pexpect.spawn(\" \".join(self._command), timeout=None)\n        while True:\n            try:\n                proc.expect([b\"\\r\\n\", b\"\\r\"])\n                line: bytes = proc.before\n                self._seen_line_log(line.decode(\"utf-8\", errors=\"replace\").rstrip())\n                self._non_gui_print(line)\n            except pexpect.EOF:\n                break\n        proc.close()\n        return proc.exitstatus\n\n\nclass WinPTYInstaller(Installer):  # pylint:disable=too-few-public-methods\n    \"\"\" Package installer for Windows using WinPTY\n\n    Spawns a pseudo PTY for installing packages allowing access to realtime feedback\n\n    Parameters\n    ----------\n    environment: :class:`Environment`\n        Environment class holding information about the running system\n    package: str\n        The package name that is being installed\n    command: list\n        The command to run\n    is_gui: bool\n        ``True`` if the process is being called from the Faceswap GUI\n    \"\"\"\n    def __init__(self,\n                 environment: Environment,\n                 package: str,\n                 command: list[str],\n                 is_gui: bool) -> None:\n        super().__init__(environment, package, command, is_gui)\n        self._cmd = which(command[0], path=os.environ.get('PATH', os.defpath))\n        self._cmdline = list2cmdline(command)\n        logger.debug(\"cmd: '%s', cmdline: '%s'\", self._cmd, self._cmdline)\n\n        self._pbar = re.compile(r\"(?:eta\\s[\\d\\W]+)|(?:\\s+\\|\\s+\\d+%)\\Z\")\n        self._eof = False\n        self._read_bytes = 1024\n\n        self._lines: list[str] = []\n        self._out = \"\"\n\n    def _read_from_pty(self, proc: T.Any, winpty_error: T.Any) -> None:\n        \"\"\" Read :attr:`_num_bytes` from WinPTY. If there is an error reading, recursively halve\n        the number of bytes read until we get a succesful read. If we get down to 1 byte without a\n        succesful read, assume we are at EOF.\n\n        Parameters\n        ----------\n        proc: :class:`winpty.PTY`\n            The WinPTY process\n        winpty_error: :class:`winpty.WinptyError`\n            The winpty error exception. Passed in as WinPTY is not in global scope\n        \"\"\"\n        try:\n            from_pty = proc.read(self._read_bytes)\n        except winpty_error:\n            # TODO Reinsert this check\n            # The error message \"pipe has been ended\" is language specific so this check\n            # fails on non english systems. For now we just swallow all errors until no\n            # bytes are left to read and then check the return code\n            # if any(val in str(err) for val in [\"EOF\", \"pipe has been ended\"]):\n            #    # Get remaining bytes. On a comms error, the buffer remains unread so keep\n            #    # halving buffer amount until down to 1 when we know we have everything\n            #     if self._read_bytes == 1:\n            #         self._eof = True\n            #     from_pty = \"\"\n            #     self._read_bytes //= 2\n            # else:\n            #     raise\n\n            # Get remaining bytes. On a comms error, the buffer remains unread so keep\n            # halving buffer amount until down to 1 when we know we have everything\n            if self._read_bytes == 1:\n                self._eof = True\n            from_pty = \"\"\n            self._read_bytes //= 2\n\n        self._out += from_pty\n\n    def _out_to_lines(self) -> None:\n        \"\"\" Process the winpty output into separate lines. Roll over any semi-consumed lines to the\n        next proc call. \"\"\"\n        if \"\\n\" not in self._out:\n            return\n\n        self._lines.extend(self._out.split(\"\\n\"))\n\n        if self._out.endswith(\"\\n\") or self._eof:  # Ends on newline or is EOF\n            self._out = \"\"\n        else:  # roll over semi-consumed line to next read\n            self._out = self._lines[-1]\n            self._lines = self._lines[:-1]\n\n    def call(self) -> int:\n        \"\"\" Install a package using the PyWinPTY module\n\n        Returns\n        -------\n        int\n            The return code of the package install process\n        \"\"\"\n        import winpty  # pylint:disable=import-outside-toplevel,import-error\n        # For some reason with WinPTY we need to pass in the full command. Probably a bug\n        proc = winpty.PTY(\n            100,\n            24,\n            backend=winpty.enums.Backend.WinPTY,  # ConPTY hangs and has lots of Ansi Escapes\n            agent_config=winpty.enums.AgentConfig.WINPTY_FLAG_PLAIN_OUTPUT)  # Strip all Ansi\n\n        if not proc.spawn(self._cmd, cmdline=self._cmdline):\n            del proc\n            raise RuntimeError(\"Failed to spawn winpty\")\n\n        while True:\n            self._read_from_pty(proc, winpty.WinptyError)\n            self._out_to_lines()\n            for line in self._lines:\n                self._seen_line_log(line.rstrip())\n                self._non_gui_print(line.encode(\"utf-8\", errors=\"replace\"))\n            self._lines = []\n\n            if self._eof:\n                returncode = proc.get_exitstatus()\n                break\n\n        del proc\n        return returncode\n\n\nclass SubProcInstaller(Installer):\n    \"\"\" The fallback package installer if either of the OS specific installers fail.\n\n    Uses the python Subprocess module to install packages. Feedback does not return in realtime\n    so the process can look like it has hung to the end user\n\n    Parameters\n    ----------\n    environment: :class:`Environment`\n        Environment class holding information about the running system\n    package: str\n        The package name that is being installed\n    command: list\n        The command to run\n    is_gui: bool\n        ``True`` if the process is being called from the Faceswap GUI\n    \"\"\"\n    def __init__(self,\n                 environment: Environment,\n                 package: str,\n                 command: list[str],\n                 is_gui: bool) -> None:\n        super().__init__(environment, package, command, is_gui)\n        self._shell = self._env.os_version[0] == \"Windows\" and command[0] == \"conda\"\n\n    def __call__(self) -> int:\n        \"\"\" Override default call function so we don't recursively call ourselves on failure. \"\"\"\n        returncode = self.call()\n        logger.debug(\"Package: %s, returncode: %s\", self._package, returncode)\n        return returncode\n\n    def call(self) -> int:\n        \"\"\" Install a package using the Subprocess module\n\n        Returns\n        -------\n        int\n            The return code of the package install process\n        \"\"\"\n        with Popen(self._command,\n                   bufsize=0, stdout=PIPE, stderr=STDOUT, shell=self._shell) as proc:\n            while True:\n                if proc.stdout is not None:\n                    lines = proc.stdout.readline()\n                returncode = proc.poll()\n                if lines == b\"\" and returncode is not None:\n                    break\n\n                for line in lines.split(b\"\\r\"):\n                    self._seen_line_log(line.decode(\"utf-8\", errors=\"replace\").rstrip())\n                    self._non_gui_print(line)\n\n        return returncode\n\n\nclass Tips():\n    \"\"\" Display installation Tips \"\"\"\n    @classmethod\n    def docker_no_cuda(cls) -> None:\n        \"\"\" Output Tips for Docker without Cuda \"\"\"\n        logger.info(\n            \"1. Install Docker from: https://www.docker.com/get-started\\n\\n\"\n            \"2. Enter the Faceswap folder and build the Docker Image For Faceswap:\\n\"\n            \"   docker build -t faceswap-cpu -f Dockerfile.cpu .\\n\\n\"\n            \"3. Launch and enter the Faceswap container:\\n\"\n            \"  a. Headless:\\n\"\n            \"     docker run --rm -it -v ./:/srv faceswap-cpu\\n\\n\"\n            \"  b. GUI:\\n\"\n            \"     xhost +local: && \\\\ \\n\"\n            \"     docker run --rm -it \\\\ \\n\"\n            \"     -v ./:/srv \\\\ \\n\"\n            \"     -v /tmp/.X11-unix:/tmp/.X11-unix \\\\ \\n\"\n            \"     -e DISPLAY=${DISPLAY} \\\\ \\n\"\n            \"     faceswap-cpu \\n\")\n        logger.info(\"That's all you need to do with docker. Have fun.\")\n\n    @classmethod\n    def docker_cuda(cls) -> None:\n        \"\"\" Output Tips for Docker with Cuda\"\"\"\n        logger.info(\n            \"1. Install Docker from: https://www.docker.com/get-started\\n\\n\"\n            \"2. Install latest CUDA 11 and cuDNN 8 from: https://developer.nvidia.com/cuda-\"\n            \"downloads\\n\\n\"\n            \"3. Install the the Nvidia Container Toolkit from https://docs.nvidia.com/datacenter/\"\n            \"cloud-native/container-toolkit/latest/install-guide\\n\\n\"\n            \"4. Restart Docker Service\\n\\n\"\n            \"5. Enter the Faceswap folder and build the Docker Image For Faceswap:\\n\"\n            \"   docker build -t faceswap-gpu -f Dockerfile.gpu .\\n\\n\"\n            \"6. Launch and enter the Faceswap container:\\n\"\n            \"  a. Headless:\\n\"\n            \"     docker run --runtime=nvidia --rm -it -v ./:/srv faceswap-gpu\\n\\n\"\n            \"  b. GUI:\\n\"\n            \"     xhost +local: && \\\\ \\n\"\n            \"     docker run --runtime=nvidia --rm -it \\\\ \\n\"\n            \"     -v ./:/srv \\\\ \\n\"\n            \"     -v /tmp/.X11-unix:/tmp/.X11-unix \\\\ \\n\"\n            \"     -e DISPLAY=${DISPLAY} \\\\ \\n\"\n            \"     faceswap-gpu \\n\")\n        logger.info(\"That's all you need to do with docker. Have fun.\")\n\n    @classmethod\n    def macos(cls) -> None:\n        \"\"\" Output Tips for macOS\"\"\"\n        logger.info(\n            \"setup.py does not directly support macOS. The following tips should help:\\n\\n\"\n            \"1. Install system dependencies:\\n\"\n            \"XCode from the Apple Store\\n\"\n            \"XQuartz: https://www.xquartz.org/\\n\\n\"\n\n            \"2a. It is recommended to use Anaconda for your Python Virtual Environment as this\\n\"\n            \"will handle the installation of CUDA and cuDNN for you:\\n\"\n            \"https://www.anaconda.com/distribution/\\n\\n\"\n\n            \"2b. If you do not want to use Anaconda you will need to manually install CUDA and \"\n            \"cuDNN:\\n\"\n            \"CUDA: https://developer.nvidia.com/cuda-downloads\"\n            \"cuDNN: https://developer.nvidia.com/rdp/cudnn-download\\n\\n\")\n\n    @classmethod\n    def pip(cls) -> None:\n        \"\"\" Pip Tips \"\"\"\n        logger.info(\"1. Install PIP requirements\\n\"\n                    \"You may want to execute `chcp 65001` in cmd line\\n\"\n                    \"to fix Unicode issues on Windows when installing dependencies\")\n\n\nif __name__ == \"__main__\":\n    logfile = os.path.join(os.path.dirname(os.path.realpath(sys.argv[0])), \"faceswap_setup.log\")\n    log_setup(\"INFO\", logfile, \"setup\")\n    logger.debug(\"Setup called with args: %s\", sys.argv)\n    ENV = Environment()\n    Checks(ENV)\n    ENV.set_config()\n    if _INSTALL_FAILED:\n        sys.exit(1)\n    Install(ENV)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools.py",
          "type": "blob",
          "size": 1.48,
          "content": "#!/usr/bin/env python3\n\"\"\" The master tools.py script \"\"\"\nimport gettext\nimport os\nimport sys\n\nfrom importlib import import_module\n\n# Importing the various tools\nfrom lib.cli.args import FullHelpArgumentParser\n\n# LOCALES\n_LANG = gettext.translation(\"tools\", localedir=\"locales\", fallback=True)\n_ = _LANG.gettext\n\n# Python version check\nif sys.version_info < (3, 10):\n    raise ValueError(\"This program requires at least python 3.10\")\n\n\ndef bad_args(*args):  # pylint:disable=unused-argument\n    \"\"\" Print help on bad arguments \"\"\"\n    PARSER.print_help()\n    sys.exit(0)\n\n\ndef _get_cli_opts():\n    \"\"\" Optain the subparsers and cli options for available tools \"\"\"\n    base_path = os.path.realpath(os.path.dirname(sys.argv[0]))\n    tools_dir = os.path.join(base_path, \"tools\")\n    for tool_name in sorted(os.listdir(tools_dir)):\n        cli_file = os.path.join(tools_dir, tool_name, \"cli.py\")\n        if os.path.exists(cli_file):\n            mod = \".\".join((\"tools\", tool_name, \"cli\"))\n            module = import_module(mod)\n            cliarg_class = getattr(module, f\"{tool_name.title()}Args\")\n            help_text = getattr(module, \"_HELPTEXT\")\n            yield tool_name, help_text, cliarg_class\n\n\nif __name__ == \"__main__\":\n    PARSER = FullHelpArgumentParser()\n    SUBPARSER = PARSER.add_subparsers()\n    for tool, helptext, cli_args in _get_cli_opts():\n        cli_args(SUBPARSER, tool, helptext)\n    PARSER.set_defaults(func=bad_args)\n    ARGUMENTS = PARSER.parse_args()\n    ARGUMENTS.func(ARGUMENTS)\n"
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "update_deps.py",
          "type": "blob",
          "size": 0.9,
          "content": "#!/usr/bin/env python3\n\"\"\" Installs any required third party libs for faceswap.py\n\n    Checks for installed Conda / Pip packages and updates accordingly\n\"\"\"\nimport logging\nimport os\nimport sys\n\nfrom lib.logger import log_setup\nfrom setup import Environment, Install\n\nlogger = logging.getLogger(__name__)\n\n\ndef main(is_gui=False) -> None:\n    \"\"\" Check for and update dependencies\n\n    Parameters\n    ----------\n    is_gui: bool, optional\n        ``True`` if being called by the GUI. Prevents the updater from outputting progress bars\n        which get scrambled in the GUI\n    \"\"\"\n    logger.info(\"Updating dependencies...\")\n    update = Environment(updater=True)\n    Install(update, is_gui=is_gui)\n    logger.info(\"Dependencies updated\")\n\n\nif __name__ == \"__main__\":\n    logfile = os.path.join(os.path.dirname(os.path.realpath(sys.argv[0])), \"faceswap_update.log\")\n    log_setup(\"INFO\", logfile, \"setup\")\n    main()\n"
        }
      ]
    }
  ]
}