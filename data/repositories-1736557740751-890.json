{
  "metadata": {
    "timestamp": 1736557740751,
    "page": 890,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "taichi-dev/taichi",
      "stars": 26566,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 2.75,
          "content": "---\nLanguage:        Cpp\n#BasedOnStyle:  Chromium\nAccessModifierOffset: -1\nAlignAfterOpenBracket: Align\nAlignConsecutiveAssignments: false\nAlignConsecutiveDeclarations: false\nAlignEscapedNewlinesLeft: true\nAlignOperands:   true\nAlignTrailingComments: true\nAllowAllParametersOfDeclarationOnNextLine: false\nAllowShortBlocksOnASingleLine: false\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: false\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: true\nAlwaysBreakTemplateDeclarations: true\nBinPackArguments: true\nBinPackParameters: false\nBraceWrapping:\n  AfterClass:      false\n  AfterControlStatement: false\n  AfterEnum:       false\n  AfterFunction:   false\n  AfterNamespace:  false\n  AfterObjCDeclaration: false\n  AfterStruct:     false\n  AfterUnion:      false\n  BeforeCatch:     false\n  BeforeElse:      false\n  IndentBraces:    false\nBreakBeforeBinaryOperators: None\nBreakBeforeBraces: Attach\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: false\nBreakAfterJavaFieldAnnotations: false\nBreakStringLiterals: true\nColumnLimit:     80\nCommentPragmas:  '^ IWYU pragma:'\nConstructorInitializerAllOnOneLineOrOnePerLine: true\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: true\nDerivePointerAlignment: false\nDisableFormat:   false\nExperimentalAutoDetectBinPacking: false\nForEachMacros:   [ foreach, Q_FOREACH, BOOST_FOREACH ]\nIncludeCategories:\n  - Regex:           '^<.*\\.h>'\n    Priority:        1\n  - Regex:           '^<.*'\n    Priority:        2\n  - Regex:           '.*'\n    Priority:        3\nIncludeIsMainRegex: '([-_](test|unittest))?$'\nIndentCaseLabels: true\nIndentWidth:     2\nIndentWrappedFunctionNames: false\nJavaScriptQuotes: Leave\nJavaScriptWrapImports: true\nKeepEmptyLinesAtTheStartOfBlocks: false\nMacroBlockBegin: ''\nMacroBlockEnd:   ''\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nObjCBlockIndentWidth: 2\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: false\nPenaltyBreakBeforeFirstCallParameter: 1\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakString: 1000\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 200\nPointerAlignment: Right\nReflowComments:  true\nSortIncludes:    false\nSpaceAfterCStyleCast: false\nSpaceAfterTemplateKeyword: true\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeParens: ControlStatements\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 2\nSpacesInAngles:  false\nSpacesInContainerLiterals: true\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nStandard:        Auto\nTabWidth:        8\nUseTab:          Never\n---\nLanguage: ObjC\n...\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 1.55,
          "content": "---\nChecks:  '-*,\n         bugprone-argument-comment,\n         bugprone-assert-side-effect,\n         bugprone-dangling-handle,\n         bugprone-inaccurate-erase,\n         bugprone-string-constructor,\n         bugprone-string-integer-assignment,\n         bugprone-unused-raii,\n         bugprone-use-after-move,\n         google-build-explicit-make-pair,\n         google-explicit-constructor,\n         modernize-avoid-bind,\n         modernize-make-shared,\n         modernize-make-unique,\n         modernize-replace-random-shuffle,\n         modernize-shrink-to-fit,\n         modernize-use-bool-literals,\n         modernize-use-equals-default\n         modernize-use-equals-delete,\n         modernize-use-noexcept,\n         modernize-use-nullptr,\n         modernize-use-override,\n         modernize-use-transparent-functors,\n         performance-inefficient-string-concatenation,\n         readability-identifier-naming,\n         readability-redundant-member-init,\n         '\nCheckOptions:\n  - { key: readability-identifier-naming.PrivateMemberSuffix,    value: _          }\n  - { key: readability-identifier-naming.PrivateMemberCase,      value: lower_case }\n  - { key: readability-identifier-naming.PrivateMethodSuffix,    value: \"\"         }\n  - { key: readability-identifier-naming.PrivateMethodCase,      value: lower_case }\n  - { key: readability-identifier-naming.PublicMethodSuffix,     value: \"\"         }\n  - { key: readability-identifier-naming.PublicMethodCase,       value: lower_case }\n  - { key: readability-identifier-naming.PublicMemberSuffix,     value: \"\"         }\n...\n"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.27,
          "content": "# Reformat everything (#617)\n02a4048b547e0c00c65856f47351c4ecf0163268\n\n# [misc] Relax Black formatter line length limit to 120 (#7824)\n4fe7f150790012e6d9298614a040bb0053acd0fb\n\n# [misc]  Switch code formatter from `yapf` to `black` (#7785)\ne0aa905991a01dfd68b7bcf1ad20f5132408febc\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.06,
          "content": "*.swp\n*.swo\n/.vs\n/.*_localrc\n/tags\n/Debug\n*.sdf\n/x64\n*.VC.opendb\n*.TMP\n/Tinge/x64\n/Tinge/Debug\n/output\n*.psess\n*.vsp\n/src/x64\n*.aux\n*.pdf\n*.log\n*.toc\n*.synctex.gz\n*.out\n.idea\n*.pyc\n.DS_Store\nCMakeFiles/\ncmake_install.cmake\nCMakeCache.txt\nFindNumpyPath.py\nruntimes/Taichi.pyd\nruntimes/tmp*\nruntimes/task*\nruntimes/*.exe\nruntimes/*.dll\nruntimes/Release\nruntimes/Debug\nruntimes/RelWithDebInfo\nruntimes/*.png\nruntimes/taichi_python*\nruntimes/libtaichi_python*\n.pypirc\ndist/\npython/MANIFEST\nbuild*/\nbin/\ntmp/\ncmake-build-*\nmodules.txt\n/external/lib\n__pycache__\n/outputs\n/benchmarks/output\n/benchmarks/baseline\n*.ppm\n*.png\n*.jpg\n!docs/**/*.jpg\n!docs/**/*.png\n!tests/python/expected/*.png\n!python/taichi/examples/algorithm/circle-packing/*.png\n*.egg-info\n.tlang_cache\n/taichi/common/version.h\n/taichi/common/commit_hash.h\n/python/test_env\n/CHANGELOG.md\n/.coverage\n/coverage.xml\n/htmlcov\nlibpython_path.txt\n.vscode\n_build\n*.bin\n*.gif\n*.mp4\n*.dat\n*.ptx\n*.ll\n*.bc\n*.yml\n!.github/**/*.yml\n*.dot\n*.json\n!tests/**/*.json\n!docs/**/*.json\nimgui.ini\n/venv/\n/_skbuild/\n.cache\n.do-not-clean\n*.dylib\n*.ply\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 2.39,
          "content": "[submodule \"assets\"]\n\tpath = assets\n\turl = https://github.com/yuanming-hu/taichi_assets\n\tshallow = true\n[submodule \"external/spdlog\"]\n\tpath = external/spdlog\n\turl = https://github.com/gabime/spdlog\n\tshallow = true\n[submodule \"external/glfw\"]\n\tpath = external/glfw\n\turl = https://github.com/taichi-dev/glfw\n\tshallow = true\n[submodule \"external/glad\"]\n\tpath = external/glad\n\turl = https://github.com/taichi-dev/taichi_glad_ready\n\tshallow = true\n[submodule \"external/assets\"]\n\tpath = external/assets\n\turl = https://github.com/taichi-dev/taichi_assets\n\tshallow = true\n[submodule \"external/googletest\"]\n\tpath = external/googletest\n\turl = https://github.com/google/googletest\n\tshallow = true\n[submodule \"external/SPIRV-Headers\"]\n\tpath = external/SPIRV-Headers\n\turl = https://github.com/KhronosGroup/SPIRV-Headers\n[submodule \"external/volk\"]\n\tpath = external/volk\n\turl = https://github.com/zeux/volk.git\n[submodule \"external/VulkanMemoryAllocator\"]\n\tpath = external/VulkanMemoryAllocator\n\turl = https://github.com/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator\n[submodule \"external/imgui\"]\n\tpath = external/imgui\n\turl = https://github.com/ocornut/imgui.git\n[submodule \"external/glm\"]\n\tpath = external/glm\n\turl = https://github.com/g-truc/glm.git\n[submodule \"external/eigen\"]\n\tpath = external/eigen\n\turl = https://gitlab.com/libeigen/eigen.git\n\tbranch = 3.3\n[submodule \"external/SPIRV-Reflect\"]\n\tpath = external/SPIRV-Reflect\n\turl = https://github.com/KhronosGroup/SPIRV-Reflect\n[submodule \"external/SPIRV-Tools\"]\n\tpath = external/SPIRV-Tools\n\turl = https://github.com/KhronosGroup/SPIRV-Tools\n[submodule \"external/SPIRV-Cross\"]\n\tpath = external/SPIRV-Cross\n\turl = https://github.com/KhronosGroup/SPIRV-Cross\n[submodule \"external/Vulkan-Headers\"]\n\tpath = external/Vulkan-Headers\n\turl = https://github.com/KhronosGroup/Vulkan-Headers\n[submodule \"external/FP16\"]\n\tpath = external/FP16\n\turl = https://github.com/Maratyszcza/FP16\n[submodule \"external/PicoSHA2\"]\n\tpath = external/PicoSHA2\n\turl = https://github.com/okdshin/PicoSHA2.git\n[submodule \"external/DirectX-Headers\"]\n\tpath = external/DirectX-Headers\n\turl = https://github.com/microsoft/DirectX-Headers.git\n[submodule \"external/backward_cpp\"]\n\tpath = external/backward_cpp\n\turl = https://github.com/bombela/backward-cpp.git\n[submodule \"./SPIRV-Tools\"]\n\tbranch = main\n[submodule \"./SPIRV-Cross\"]\n\tbranch = main\n[submodule \"./SPIRV-Headers\"]\n\tbranch = main\n[submodule \"./SPIRV-Reflect\"]\n\tbranch = main\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.78,
          "content": "ci:\n  autoupdate_schedule: quarterly\n  autoupdate_commit_msg: '[misc] Update pre-commit hooks'\n\ndefault_language_version:\n    python: python3.10\n\nexclude: ^((tests/python/test_exception)\\.py$|external/)\nrepos:\n  - repo: https://github.com/psf/black\n    rev: 23.3.0\n    hooks:\n      - id: black\n        language_version: python3.10\n        args: ['-l', '120']\n\n  - repo: https://github.com/pre-commit/mirrors-clang-format\n    rev: v15.0.7\n    hooks:\n      - id: clang-format\n        exclude: .*\\.json$\n\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.4.0\n    hooks:\n      - id: trailing-whitespace\n      - id: end-of-file-fixer\n\n  - repo: https://github.com/PyCQA/pylint\n    rev: v2.15.9\n    hooks:\n      - id: pylint\n        args: ['-rn', '-sn']\n        files: ^python/taichi/\n"
        },
        {
          "name": ".pylintrc",
          "type": "blob",
          "size": 0.2,
          "content": "[MESSAGES CONTROL]\ndisable=all\nenable=\n    C0121,C0200,C0209,C0321,C0325,C0415,\n    W0101,W0108,W0202,W0235,W0401,W0404,W0611,W0621,W0622,W612,W1309,\n    E1101,\n    R0201,R0205,R0402,R1703,R1705,R1710,R1732\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 8.19,
          "content": "#*********************************************************************\n# The Taichi Programming Language\n#*********************************************************************\n\ncmake_minimum_required(VERSION 3.17)\n\nproject(taichi)\n\ninclude(\"cmake/utils.cmake\")\n\nif (NOT DEFINED TI_VERSION_MAJOR)\n    message(WARNING \"It seems that you are running cmake manually, which may cause issues. Please use setup.py to build taichi from source, see https://docs.taichi-lang.org/docs/dev_install for more details.\")\n    file(READ \"${CMAKE_CURRENT_LIST_DIR}/version.txt\" TI_VERSION_LITERAL)\n    string(REGEX MATCH \"v([0-9]+)\\\\.([0-9]+)\\\\.([0-9]+)\" TI_VERSION_LITERAL ${TI_VERSION_LITERAL})\n    set(TI_VERSION_MAJOR ${CMAKE_MATCH_1})\n    set(TI_VERSION_MINOR ${CMAKE_MATCH_2})\n    set(TI_VERSION_PATCH ${CMAKE_MATCH_3})\nendif()\n\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED TRUE)\nset(CMAKE_EXPORT_COMPILECOMMANDS ON)\n\nexecute_process(\n  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}\n  COMMAND git rev-parse --short HEAD\n  RESULT_VARIABLE SHORT_HASH_RESULT\n  OUTPUT_VARIABLE TI_COMMIT_SHORT_HASH)\nexecute_process(\n  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}\n  COMMAND git rev-parse HEAD\n  RESULT_VARIABLE SHORT_HASH_RESULT\n  OUTPUT_VARIABLE TI_COMMIT_HASH)\nstring(STRIP ${TI_COMMIT_HASH} TI_COMMIT_HASH)\nstring(STRIP ${TI_COMMIT_SHORT_HASH} TI_COMMIT_SHORT_HASH)\n\nmessage(\"Taichi Version ${TI_VERSION_MAJOR}.${TI_VERSION_MINOR}.${TI_VERSION_PATCH}\")\nmessage(\"       Commit ${TI_COMMIT_HASH}\")\n\nif(NOT CMAKE_BUILD_TYPE)\n    set(CMAKE_BUILD_TYPE \"Release\" CACHE STRING\n            \"Choose the type of build, options are: Debug Release\nRelWithDebInfo MinSizeRel.\"\n            FORCE)\nendif(NOT CMAKE_BUILD_TYPE)\n\nset(TAICHI_CMAKE_DIR \"${CMAKE_CURRENT_LIST_DIR}/cmake/\")\n\nif (WIN32)\n    list(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_LIST_DIR}/cmake/\")\n    list(APPEND CMAKE_MODULE_PATH \"${CMAKE_ROOT}/Modules\")\nelse ()\n    list(APPEND CMAKE_MODULE_PATH \"${CMAKE_ROOT}/Modules\")\n    list(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_LIST_DIR}/cmake/\")\nendif ()\n\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}/build\")\n\nfind_program(CCACHE_PROGRAM ccache)\nif(CCACHE_PROGRAM)\n    set(CMAKE_CXX_COMPILER_LAUNCHER \"${CCACHE_PROGRAM}\")\nendif()\n\n# This compiles all the libraries with -fPIC, which is critical to link a static\n# library into a shared lib.\nset(CMAKE_POSITION_INDEPENDENT_CODE ON)\n\n\noption(USE_LLD \"Use lld (from llvm) linker\" OFF)\noption(USE_MOLD \"Use mold (A Modern Linker)\" OFF)\noption(TI_WITH_BACKTRACE \"Use backward-cpp to print out C++ stack trace upon failure\" OFF)  # wheel-tag: bt\noption(TI_GENERATE_PDB \"Generate Program Database (PDB) files (will make compilation uncacheable)\" OFF)\noption(TI_WITH_LTO \"Enable Link Time Optimization (LTO) (affects Windows + MSVC for now)\" OFF)  # wheel-tag: lto\n\nif(LINUX OR APPLE)\n    if (NOT IOS)\n        # (penguinliong) Not compatible with -fembed-bitcode. Not sure where it\n        # comes from; probably a XCode preset?\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -ffunction-sections -fdata-sections\")\n    endif()\nendif()\n\nif (USE_LLD)\n    set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -fuse-ld=lld\")\n    set(CMAKE_MODULE_LINKER_FLAGS \"${CMAKE_MODULE_LINKER_FLAGS} -fuse-ld=lld\")\n    set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -fuse-ld=lld\")\n\n    if (WIN32)\n        if (CMAKE_BUILD_TYPE EQUAL \"RelWithDebInfo\")\n            # -debug for LLD generates PDB files\n            set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -Wl,-debug\")\n            set(CMAKE_MODULE_LINKER_FLAGS \"${CMAKE_MODULE_LINKER_FLAGS} -Wl,-debug\")\n            set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -Wl,-debug\")\n        endif()\n    endif()\nendif()\n\nif (USE_MOLD)\n    set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -fuse-ld=mold\")\n    set(CMAKE_MODULE_LINKER_FLAGS \"${CMAKE_MODULE_LINKER_FLAGS} -fuse-ld=mold\")\n    set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -fuse-ld=mold\")\nendif()\n\nif (WIN32)\n  # For `Debug` configs MSVC links to a debuggable runtime by default which has\n  # symbol conflicts with the prebuilt LLVM in `Release`. We should be providing\n  # prebuilt LLVMs for both `Debug` and `Release` but LLVM 10 cannot be built by\n  # MSVC in `Debug` config because MSVC would try to fill uninitialize memory\n  # with `0xCC` but it too breaks `LLVMTableGen` which is depended on by almost\n  # every component in LLVM.\n  message(\"CMAKE_MSVC_RUNTIME_LIBRARY: ${CMAKE_MSVC_RUNTIME_LIBRARY}\")\nendif()\n\n# No support of Python for Android build; or in any case taichi is integrated\n# in another project as submodule.\noption(TI_WITH_PYTHON \"Build with Python language binding\" ON)\nif (TI_WITH_PYTHON AND NOT ANDROID)\n    include(cmake/PythonNumpyPybind11.cmake)\nendif()\n\nif (TI_WITH_BACKTRACE)\n  add_subdirectory(external/backward_cpp)\nendif()\n\nif (TI_DISTRIBUTED_COMPILE)\n    include(cmake/Distributed.cmake)\nendif()\n\ninclude(cmake/TaichiCXXFlags.cmake)\ninclude(cmake/TaichiCore.cmake)\n\noption(TI_BUILD_TESTS \"Build the CPP tests\" OFF)\n\nif (TI_BUILD_TESTS)\n  add_subdirectory(external/googletest EXCLUDE_FROM_ALL)\n  include(cmake/TaichiTests.cmake)\nendif()\n\noption(TI_BUILD_EXAMPLES \"Build the CPP examples\" ON)\noption(TI_BUILD_RHI_EXAMPLES \"Build the Unified Device API examples\" OFF)\n\nif(NOT TI_WITH_LLVM OR NOT TI_WITH_METAL)\n    set(TI_BUILD_EXAMPLES OFF)\nendif()\n\nmessage(\"C++ Flags: ${CMAKE_CXX_FLAGS}\")\nmessage(\"Build type: ${CMAKE_BUILD_TYPE}\")\n\nif (NOT TI_WITH_CUDA)\n    set(CUDA_VERSION \"0.0\")\n    set(CUDA_TOOLKIT_ROOT_DIR \"\")\nendif()\n\nif (TI_WITH_CUDA)\n    set(CUDA_ARCH \"cuda\")\nendif()\n\nif (TI_WITH_AMDGPU)\n    set(AMDGPU_ARCH \"amdgpu\")\nendif()\n\nif (TI_WITH_DX12)\n    set(DX12_ARCH \"dx12\")\nendif()\n\nif (TI_WITH_LLVM)\n    # Setup CLANG_EXECUTABLE\n    if (CLANG_EXECUTABLE)\n      message(\"CLANG_EXECUTABLE defined: ${CLANG_EXECUTABLE}\")\n    elseif (\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"Clang\")\n      set (CLANG_EXECUTABLE ${CMAKE_CXX_COMPILER})\n      message(\"Clang executable using host compiler ${CLANG_EXECUTABLE}\")\n    else()\n      find_program(CLANG_EXECUTABLE NAMES clang-15 clang-14 clang-13 clang-12 clang-11 clang-10 clang-9 clang-8 clang-7 clang)\n      message(\"Clang executable found at ${CLANG_EXECUTABLE}\")\n    endif()\n\n    if (NOT CLANG_EXECUTABLE)\n      message(FATAL_ERROR \"Cannot find any clang executable.\")\n    endif()\n\n    macro(check_clang_version)\n      execute_process(COMMAND ${CLANG_EXECUTABLE} --version OUTPUT_VARIABLE CLANG_VERSION_OUTPUT)\n      string(REGEX MATCH \"([0-9]+)\\\\.[0-9]+(\\\\.[0-9]+)?\" CLANG_VERSION \"${CLANG_VERSION_OUTPUT}\")\n\n      message(\"${CLANG_EXECUTABLE} --version: ${CLANG_VERSION}\")\n\n      set(CLANG_VERSION_MAJOR \"${CMAKE_MATCH_1}\")\n    endmacro()\n\n    if (APPLE)\n      set(CLANG_OSX_FLAGS \"-isysroot${CMAKE_OSX_SYSROOT}\")\n    endif()\n\n    # Highest clang version that we've tested\n    set(CLANG_HIGHEST_VERSION \"15\")\n\n    check_clang_version()\n\n    add_subdirectory(taichi/runtime/llvm/runtime_module)\nendif()\n\nconfigure_file(taichi/common/version.h.in ${CMAKE_SOURCE_DIR}/taichi/common/version.h)\nconfigure_file(taichi/common/commit_hash.h.in ${CMAKE_SOURCE_DIR}/taichi/common/commit_hash.h)\n\noption(TI_WITH_C_API \"build taichi runtime c-api library\" ON)  # wheel-tag: aot\noption(TI_WITH_STATIC_C_API \"build static taichi runtime c-api library\" OFF)  # wheel-tag: static_aot\n\nif(TI_WITH_STATIC_C_API)\n    set(TI_WITH_C_API ${TI_WITH_STATIC_C_API})\n    if(NOT APPLE)\n        message(FATAL_ERROR \"TI_WITH_STATIC_C_API requires Apple compilation sdk, thus only supported on MacOS\")\n    endif()\nendif()\n\nif (TI_WITH_C_API)\n  include(cmake/TaichiCAPI.cmake)\n  if (TI_BUILD_TESTS)\n    include(cmake/TaichiCAPITests.cmake)\n  endif()\nendif()\n\nif (TI_BUILD_EXAMPLES)\n  include(cmake/TaichiExamples.cmake)\nendif()\n\nif (TI_BUILD_RHI_EXAMPLES)\n  add_subdirectory(cpp_examples/rhi_examples)\nendif()\n\n\noption(TI_WITH_GRAPHVIZ \"generate dependency graphs between targets\" OFF)  # wheel-tag: viz\nif (TI_WITH_GRAPHVIZ)\n  set(GRAPHVIZ_GRAPH_NAME \"ti_targets\")\n  add_custom_target(graphviz ALL\n      COMMAND cp ${CMAKE_SOURCE_DIR}/cmake/CMakeGraphVizOptions.cmake .\n      COMMAND ${CMAKE_COMMAND} \"--graphviz=${GRAPHVIZ_GRAPH_NAME}.dot\" .\n      COMMAND dot -Tpng ${GRAPHVIZ_GRAPH_NAME}.dot -o ${GRAPHVIZ_GRAPH_NAME}.png\n      COMMAND cp ti_targets.png ${CMAKE_SOURCE_DIR}/build\n      WORKING_DIRECTORY \"${CMAKE_BINARY_DIR}\"\n  )\nendif()\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 2.93,
          "content": "# Taichi community Code of Conduct\n\n## Introduction\n\n- Diversity and inclusion make our community strong. We encourage participation from the most varied and diverse backgrounds possible and want to be very clear about where we stand.\n- Our goal is to maintain a safe, helpful and friendly community for everyone, regardless of experience, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, nationality, or other defining characteristic.\n- This code and related procedures apply to unacceptable behavior occurring in all community venues, including behavior outside the scope of community activities — online and in-person— as well as in all one-on-one communications, and anywhere such behavior has the potential to adversely affect the safety and well-being of community members.\n\n## Expected Behavior\n\n### Empathetic\n\nMost Taichi contributors have their main jobs. Please be considerate of others, who may live in different time zones with their own lifestyles. Please think of code reviews as a limited resource and use it wisely: the more concise and polished a PR is, the sooner it will get reviewed and merged.\n\n### Modest\n\nCommunicate politely and constructively. Please help us construct a respectful, blame-free, and inclusive community.\n\n### Pragmatic\n\nPractically solving problems is usually our development goal. Simple, readable, and maintainable solutions are often optimal in practice.\n\n### Focused\n\nQuality > quantity. Please try to behave professionally and exhibit attention to details. Finishing what you started earns you trust and reputation in the community.\n\n## Unacceptable Behavior\n\n- Conduct or speech which might be considered sexist, racist, homophobic, transphobic, ableist or otherwise discriminatory or offensive in nature.\n- Do not use unwelcome, suggestive, derogatory or inappropriate nicknames or terms.\n- Do not show disrespect towards others. (Jokes, innuendo, dismissive attitudes.)\nIntimidation or harassment (online or in-person).\n- Disrespect towards differences of opinion.\n- Inappropriate attention or contact. Be aware of how your actions affect others. If it makes someone uncomfortable, stop.\n- Not understanding the differences between constructive criticism and disparagement.\n- Sustained disruptions.\n- Violence, threats of violence or violent language.\n\n## Enforcement\n\n- Understand that speech and actions have consequences, and unacceptable behavior will not be tolerated.\n- If you are the subject of, or witness to any violations of this Code of Conduct, please contact us via email at community@taichi.graphics\n- If violations occur, organizers will take any action they deem appropriate for the infraction, up to and including expulsion.\n- Portions derived from [Slack Developer Community Code of Conduct](https://api.slack.com/community/code-of-conduct) under a Creative Commons [Attribution-ShareAlike](https://creativecommons.org/licenses/by-sa/3.0/) license.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.63,
          "content": "# Contributing Guide\n\nThank you for your interest in contributing to Taichi! Please check out the [Contribution Guidelines](https://docs.taichi-lang.org/docs/contributor_guide) for how to make a contribution.\n\nAll contributors are expected to follow the [code of conduct](https://github.com/taichi-dev/taichi/blob/master/CODE_OF_CONDUCT.md).\n\n## Developer installation\n\nTaichi is developed mainly in C++17 and Python3. Please check out the [Developer Installation](https://docs.taichi-lang.org/docs/dev_install) to build Taichi from source. Note that Taichi is LLVM-10.0.0 dependent and that we recommend installing [our pre-built LLVM libraries](https://docs.taichi-lang.org/docs/dev_install#install-llvm) for your platform.\n\n## Contribution opportunities\n\nIssues marked with [\"welcome contribution\"](https://github.com/taichi-dev/taichi/issues?q=is%3Aopen+is%3Aissue+label%3A%22welcome+contribution%22) are great places for starters. You can quickly get an idea of the entire workflow and how to join the community.\n\n**RFC**: We use the `RFC` (Request for Comments) mechanism to discuss and organize some of the more advanced and self-contained features. These are the projects that we would like to work on but still lack a concrete design or implementation roadmap for because of their complexity. We document these requests and the threaded proposals in the hope that we could provide the community with a good enough context and draw upon insights from the potentially passionate minds. You can find all the ongoing RFCs [here](https://github.com/taichi-dev/taichi/issues?q=is%3Aissue+is%3Aopen+label%3ARFC+), and you are also welcome to file new RFCs with us!\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.09,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.67,
          "content": "include python/taichi/*.md\nrecursive-include python/taichi/assets *\nrecursive-include python/taichi/examples *.py\ninclude python/taichi/examples/autodiff/diff_sph/fc1_pretrained.pkl\ninclude python/taichi/examples/autodiff/diff_sph/fc2_pretrained.pkl\ninclude python/taichi/examples/algorithm/circle-packing/taichi_logo.png\nrecursive-include python/taichi/_lib/c_api *\ninclude python/taichi/_lib/core/*.so\ninclude python/taichi/_lib/core/*.pyd\ninclude python/taichi/_lib/runtime/*.bc\ninclude python/taichi/_lib/runtime/*.dylib\ninclude python/taichi/shaders/*.spv\ninclude python/taichi/shaders/*.vert\ninclude python/taichi/shaders/*.frag\n\nglobal-exclude *.pyc *.pyo\nglobal-exclude ffmpeg\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.25,
          "content": "<div align=\"center\">\n  <img width=\"500px\" src=\"https://github.com/taichi-dev/taichi/raw/master/misc/logo.png\"/>\n</div>\n\n---\n[![Latest Release](https://img.shields.io/github/v/release/taichi-dev/taichi?color=blue&label=Latest%20Release)](https://github.com/taichi-dev/taichi/releases/latest)\n[![downloads](https://pepy.tech/badge/taichi)](https://pepy.tech/project/taichi)\n[![CI](https://github.com/taichi-dev/taichi/actions/workflows/testing.yml/badge.svg)](https://github.com/taichi-dev/taichi/actions/workflows/testing.yml)\n[![Nightly Release](https://github.com/taichi-dev/taichi/actions/workflows/release.yml/badge.svg)](https://github.com/taichi-dev/taichi/actions/workflows/release.yml)\n<a href=\"https://discord.gg/f25GRdXRfg\"><img alt=\"discord invitation link\" src=\"https://dcbadge.vercel.app/api/server/f25GRdXRfg?style=flat\"></a>\n\n```shell\npip install taichi  # Install Taichi Lang\nti gallery          # Launch demo gallery\n```\n\n## What is Taichi Lang?\n\nTaichi Lang is an open-source, imperative, parallel programming language for high-performance numerical computation. It is embedded in Python and uses just-in-time (JIT) compiler frameworks, for example LLVM, to offload the compute-intensive Python code to the native GPU or CPU instructions.\n\n<a href=\"https://github.com/taichi-dev/taichi/blob/master/python/taichi/examples/simulation/fractal.py#L1-L31\"> <img src=\"https://github.com/taichi-dev/public_files/raw/master/taichi/fractal_code.png\" height=\"270px\"></a>  <img src=\"https://raw.githubusercontent.com/taichi-dev/public_files/master/taichi/fractal_small.gif\" height=\"270px\">\n\nThe language has broad applications spanning real-time physical simulation, numerical computation, augmented reality, artificial intelligence, vision and robotics, visual effects in films and games, general-purpose computing, and much more.\n\n<a href=\"https://github.com/taichi-dev/taichi/blob/master/python/taichi/examples/simulation/mpm128.py\"><img src=\"https://github.com/taichi-dev/public_files/raw/master/taichi/mpm128.gif\" height=\"192px\"></a>\n<a href=\"https://github.com/taichi-dev/quantaichi\"> <img src=\"https://raw.githubusercontent.com/taichi-dev/public_files/master/taichi/smoke_3d.gif\" height=\"192px\"></a>\n<a href=\"https://github.com/taichi-dev/taichi/blob/master/python/taichi/examples/rendering/sdf_renderer.py\"><img src=\"https://github.com/taichi-dev/public_files/raw/master/taichi/sdf_renderer.jpg\" height=\"192px\"></a>\n<a href=\"https://github.com/taichi-dev/taichi/blob/master/python/taichi/examples/simulation/euler.py\"><img src=\"https://github.com/taichi-dev/public_files/raw/master/taichi/euler.gif\" height=\"192px\"></a>\n\n<a href=\"https://github.com/taichi-dev/quantaichi\"><img src=\"https://raw.githubusercontent.com/taichi-dev/public_files/master/taichi/elastic_letters.gif\" height=\"213px\"></a>\n<a href=\"https://github.com/taichi-dev/quantaichi\"><img src=\"https://raw.githubusercontent.com/taichi-dev/public_files/master/taichi/fluid_with_bunnies.gif\" height=\"213px\"></a>\n\n[...More](#demos)\n\n## Why Taichi Lang?\n\n- Built around Python: Taichi Lang shares almost the same syntax with Python, allowing you to write algorithms with minimal language barrier. It is also well integrated into the Python ecosystem, including NumPy and PyTorch.\n- Flexibility: Taichi Lang provides a set of generic data containers known as *SNode* (/ˈsnoʊd/), an effective mechanism for composing hierarchical, multi-dimensional fields. This can cover many use patterns in numerical simulation (e.g. [spatially sparse computing](https://docs.taichi-lang.org/docs/sparse)).\n- Performance: With the `@ti.kernel` decorator, Taichi Lang's JIT compiler automatically compiles your Python functions into efficient GPU or CPU machine code for parallel execution.\n- Portability: Write your code once and run it everywhere. Currently, Taichi Lang supports most mainstream GPU APIs, such as CUDA and Vulkan.\n- ... and many more features! A cross-platform, Vulkan-based 3D visualizer, [differentiable programming](https://docs.taichi-lang.org/docs/differentiable_programming),  [quantized computation](https://github.com/taichi-dev/quantaichi) (experimental), etc.\n\n## Getting Started\n\n### Installation\n\n<details>\n  <summary>Prerequisites</summary>\n\n<!--TODO: Precise OS versions-->\n\n- Operating systems\n  - Windows\n  - Linux\n  - macOS\n- Python: 3.6 ~ 3.10 (64-bit only)\n- Compute backends\n  - x64/ARM CPUs\n  - CUDA\n  - Vulkan\n  - OpenGL (4.3+)\n  - Apple Metal\n  - WebAssembly (experiemental)\n </details>\n\nUse Python's package installer **pip** to install Taichi Lang:\n\n```bash\npip install --upgrade taichi\n```\n\n*We also provide a nightly package. Note that nightly packages may crash because they are not fully tested.  We cannot guarantee their validity, and you are at your own risk trying out our latest, untested features. The nightly packages can be installed from our self-hosted PyPI (Using self-hosted PyPI allows us to provide more frequent releases over a longer period of time)*\n\n```bash\npip install -i https://pypi.taichi.graphics/simple/ taichi-nightly\n```\n\n### Run your \"Hello, world!\"\n\nHere is how you can program a 2D fractal in Taichi:\n\n```py\n# python/taichi/examples/simulation/fractal.py\n\nimport taichi as ti\n\nti.init(arch=ti.gpu)\n\nn = 320\npixels = ti.field(dtype=float, shape=(n * 2, n))\n\n\n@ti.func\ndef complex_sqr(z):\n    return ti.Vector([z[0]**2 - z[1]**2, z[1] * z[0] * 2])\n\n\n@ti.kernel\ndef paint(t: float):\n    for i, j in pixels:  # Parallelized over all pixels\n        c = ti.Vector([-0.8, ti.cos(t) * 0.2])\n        z = ti.Vector([i / n - 1, j / n - 0.5]) * 2\n        iterations = 0\n        while z.norm() < 20 and iterations < 50:\n            z = complex_sqr(z) + c\n            iterations += 1\n        pixels[i, j] = 1 - iterations * 0.02\n\n\ngui = ti.GUI(\"Julia Set\", res=(n * 2, n))\n\nfor i in range(1000000):\n    paint(i * 0.03)\n    gui.set_image(pixels)\n    gui.show()\n```\n\n*If Taichi Lang is properly installed, you should get the animation below 🎉:*\n\n<a href=\"https://github.com/taichi-dev/taichi/blob/master/python/taichi/examples/simulation/fractal.py#L1-L31\"> </a><img src=\"https://raw.githubusercontent.com/taichi-dev/public_files/master/taichi/fractal_small.gif\" height=\"270px\">\n\nSee [Get started](https://docs.taichi-lang.org) for more information.\n\n### Build from source\n\nIf you wish to try our our experimental features or build Taichi Lang for your own environments, see [Developer installation](https://docs.taichi-lang.org/docs/dev_install).\n\n## Documentation\n\n- [Technical documents](https://docs.taichi-lang.org/)\n- [API Reference](https://docs.taichi-lang.org/api/)\n- [Blog](https://docs.taichi-lang.org/blog)\n\n## Community activity [![Time period](https://images.repography.com/32602247/taichi-dev/taichi/recent-activity/RlhQybvihwEjfE7ngXyQR9tudBDYAvl27v-NVNMxUrg_badge.svg)](https://repography.com)\n[![Timeline graph](https://images.repography.com/32602247/taichi-dev/taichi/recent-activity/RlhQybvihwEjfE7ngXyQR9tudBDYAvl27v-NVNMxUrg_timeline.svg)](https://github.com/taichi-dev/taichi/commits)\n[![Issue status graph](https://images.repography.com/32602247/taichi-dev/taichi/recent-activity/RlhQybvihwEjfE7ngXyQR9tudBDYAvl27v-NVNMxUrg_issues.svg)](https://github.com/taichi-dev/taichi/issues)\n[![Pull request status graph](https://images.repography.com/32602247/taichi-dev/taichi/recent-activity/RlhQybvihwEjfE7ngXyQR9tudBDYAvl27v-NVNMxUrg_prs.svg)](https://github.com/taichi-dev/taichi/pulls)\n[![Trending topics](https://images.repography.com/32602247/taichi-dev/taichi/recent-activity/RlhQybvihwEjfE7ngXyQR9tudBDYAvl27v-NVNMxUrg_words.svg)](https://github.com/taichi-dev/taichi/commits)\n\n## Contributing\n\nKudos to all of our amazing contributors! Taichi Lang thrives through open-source. In that spirit, we welcome all kinds of contributions from the community. If you would like to participate, check out the [Contribution Guidelines](CONTRIBUTING.md) first.\n\n<a href=\"https://github.com/taichi-dev/taichi/graphs/contributors\"><img src=\"https://raw.githubusercontent.com/taichi-dev/public_files/master/taichi/contributors_taichi-dev_taichi_18.png\" width=\"800px\"></a>\n\n*Contributor avatars are randomly shuffled.*\n\n## License\n\nTaichi Lang is distributed under the terms of Apache License (Version 2.0).\n\nSee [Apache License](https://github.com/taichi-dev/taichi/blob/master/LICENSE) for details.\n\n## Community\n\nFor more information about the events or community, please refer to [this page](https://github.com/taichi-dev/community)\n\n\n### Join our discussions\n\n- [Discord](https://discord.gg/f25GRdXRfg)\n- [GitHub Discussions](https://github.com/taichi-dev/taichi/discussions)\n- [太极编程语言中文论坛](https://forum.taichi.graphics/)\n\n### Report an issue\n\n- If you spot an technical or documentation issue, file an issue at [GitHub Issues](https://github.com/taichi-dev/taichi/issues)\n- If you spot any security issue, mail directly to <a href = \"mailto:security@taichi.graphics?subject = Taichi Security Problem\">security@taichi.graphics</a>.\n\n### Contact us\n\n- [Discord](https://discord.gg/f25GRdXRfg)\n- [WeChat](https://forum.taichi-lang.cn/t/topic/2884)\n\n## Reference\n\n### Demos\n\n- [Nerf with Taichi](https://github.com/taichi-dev/taichi-nerfs)\n- [Taichi Lang examples](https://github.com/taichi-dev/taichi/tree/master/python/taichi/examples)\n- [Advanced Taichi Lang examples](https://github.com/taichi-dev/advanced_examples)\n- [Awesome Taichi](https://github.com/taichi-dev/awesome-taichi)\n- [DiffTaichi](https://github.com/taichi-dev/difftaichi)\n- [Taichi elements](https://github.com/taichi-dev/taichi_elements)\n- [Taichi Houdini](https://github.com/taichi-dev/taichi_houdini)\n- [More...](misc/links.md)\n\n\n### AOT deployment\n\n- [Taichi AOT demos & tutorial](https://github.com/taichi-dev/taichi-aot-demo/)\n\n\n### Lectures & talks\n\n- SIGGRAPH 2020 course on Taichi basics: [YouTube](https://youtu.be/Y0-76n3aZFA), [Bilibili](https://www.bilibili.com/video/BV1kA411n7jk/), [slides (pdf)](https://yuanming.taichi.graphics/publication/2020-taichi-tutorial/taichi-tutorial.pdf).\n- Chinagraph 2020 用太极编写物理引擎: [哔哩哔哩](https://www.bilibili.com/video/BV1gA411j7H5)\n- GAMES 201 高级物理引擎实战指南 2020: [课件](https://github.com/taichi-dev/games201)\n- 太极图形课第一季：[课件](https://github.com/taichiCourse01)\n- [TaichiCon](https://github.com/taichi-dev/taichicon): Taichi Developer Conferences\n- More to come...\n\n### Citations\n\nIf you use Taichi Lang in your research, please cite the corresponding papers:\n\n- [**(SIGGRAPH Asia 2019) Taichi: High-Performance Computation on Sparse Data Structures**](https://yuanming.taichi.graphics/publication/2019-taichi/taichi-lang.pdf) [[Video]](https://youtu.be/wKw8LMF3Djo) [[BibTex]](https://raw.githubusercontent.com/taichi-dev/taichi/master/misc/taichi_bibtex.txt) [[Code]](https://github.com/taichi-dev/taichi)\n- [**(ICLR 2020) DiffTaichi: Differentiable Programming for Physical Simulation**](https://arxiv.org/abs/1910.00935) [[Video]](https://www.youtube.com/watch?v=Z1xvAZve9aE) [[BibTex]](https://raw.githubusercontent.com/taichi-dev/taichi/master/misc/difftaichi_bibtex.txt) [[Code]](https://github.com/yuanming-hu/difftaichi)\n- [**(SIGGRAPH 2021) QuanTaichi: A Compiler for Quantized Simulations**](https://yuanming.taichi.graphics/publication/2021-quantaichi/quantaichi.pdf) [[Video]](https://www.youtube.com/watch?v=0jdrAQOxJlY) [[BibTex]](https://raw.githubusercontent.com/taichi-dev/taichi/master/misc/quantaichi_bibtex.txt) [[Code]](https://github.com/taichi-dev/quantaichi)\n"
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.py",
          "type": "blob",
          "size": 0.22,
          "content": "#!/usr/bin/env python3\n\nimport sys\nfrom pathlib import Path\n\npath = Path(__file__).resolve().parent / \".github\" / \"workflows\" / \"scripts\"\nsys.path.insert(0, str(path))\n\nimport ti_build.entry\n\nsys.exit(ti_build.entry.main())\n"
        },
        {
          "name": "c_api",
          "type": "tree",
          "content": null
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "conda",
          "type": "tree",
          "content": null
        },
        {
          "name": "cpp_examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "external",
          "type": "tree",
          "content": null
        },
        {
          "name": "misc",
          "type": "tree",
          "content": null
        },
        {
          "name": "netlify.toml",
          "type": "blob",
          "size": 0.99,
          "content": "[build]\n  command = \"git clone https://github.com/taichi-dev/docs.taichi.graphics.git; git clone https://github.com/taichi-dev/docstring-gen docsgen; export DOCSTRING_GEN_PATH=\\\"$(pwd)/docsgen\\\"; export TAICHI_PATH=\\\"$(pwd)/python/taichi\\\"; export TAICHI_MAIN=\\\"$(pwd)\\\"; export TAICHI_WEBSITE=\\\"$(pwd)/docs.taichi.graphics\\\"; export DO_NOT_THROW_ON_BROKEN_LINKS=true; pip install sphinx-autoapi==1.8.4 gitpython pydata-sphinx-theme==0.7.2; cd $DOCSTRING_GEN_PATH/experimental; export current_version=master; make clean; make version; make apideploy; cd $TAICHI_WEBSITE/website; git fetch origin master; git reset --hard origin/master; npm install --global yarn@1.22; yarn install; ./sync_version.sh; yarn build;\"\n\n  publish = \"docs.taichi.graphics/website/build\"\n  # Cancel the build if there're no changes detected in docs/ folder.\n  ignore = \"git remote add upstream https://github.com/taichi-dev/taichi.git; git fetch upstream master; git diff --quiet $COMMIT_REF upstream/master -- docs/ python/ netlify.toml\"\n"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.52,
          "content": "[build-system]\nrequires = [\n    \"setuptools\", \"wheel\",\n    \"numpy\", \"pybind11\", \"cmake\",\n    \"scikit-build\", \"ninja; platform_system != 'Windows'\",\n]\nbuild-backend = \"setuptools.build_meta\"\n\n[tool.pytest.ini_options]\nfilterwarnings = [\n    \"ignore:Calling non-taichi function\",\n    \"ignore:`np.int` is a deprecated alias\",\n    \"ignore:Operator \\\"is\\\" in Taichi scope is deprecated\",\n    \"ignore:Operator \\\"is not\\\" in Taichi scope is deprecated\"\n]\n\n[tool.yapf]\nbased_on_style = \"pep8\"\nblank_line_before_nested_class_or_def = false\n"
        },
        {
          "name": "python",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements_dev.txt",
          "type": "blob",
          "size": 0.17,
          "content": "cmake\ncolorama\ncoverage\nPillow\npybind11\nGitPython\nyapf\ndistro\nisort\npylint\nrequests\ntwine\nwheel\nastunparse\npre-commit\nscikit-build\nnumpy\nninja; platform_system != 'Windows'\n"
        },
        {
          "name": "requirements_test.txt",
          "type": "blob",
          "size": 0.22,
          "content": "Pillow\npytest\ngit+https://github.com/taichi-dev/pytest-xdist@a3b5ad3038#egg=pytest-xdist\npytest-rerunfailures\npytest-cov\nnumpy\npsutil\nautograd\nrequests\nmatplotlib<=3.7.3\ncffi\nscipy\nsetproctitle\nnbmake\nmarko\nPyYAML\npyevtk\nwget\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.1,
          "content": "[metadata]\nlong_description = file: README.md\nlong_description_content_type = text/markdown; charset=UTF-8\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 7.92,
          "content": "# Optional environment variables supported by setup.py:\n#   {DEBUG, RELWITHDEBINFO, MINSIZEREL}\n#     build the C++ taichi_python extension with various build types.\n#\n#   TAICHI_CMAKE_ARGS\n#     extra cmake args for C++ taichi_python extension.\n\nimport glob\nimport multiprocessing\nimport os\nimport platform\nimport shutil\nimport subprocess\nimport sys\nfrom distutils.command.clean import clean\nfrom distutils.dir_util import remove_tree\n\nfrom setuptools import find_packages\nfrom skbuild import setup\nfrom skbuild.command.egg_info import egg_info\n\nroot_dir = os.path.dirname(os.path.abspath(__file__))\n\nclassifiers = [\n    \"Development Status :: 5 - Production/Stable\",\n    \"Topic :: Software Development :: Compilers\",\n    \"Topic :: Multimedia :: Graphics\",\n    \"Topic :: Games/Entertainment :: Simulation\",\n    \"Intended Audience :: Science/Research\",\n    \"Intended Audience :: Developers\",\n    \"License :: OSI Approved :: Apache Software License\",\n    \"Programming Language :: Python :: 3.7\",\n    \"Programming Language :: Python :: 3.8\",\n    \"Programming Language :: Python :: 3.9\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Programming Language :: Python :: 3.11\",\n]\n\n\ndef get_version():\n    if os.getenv(\"RELEASE_VERSION\"):\n        version = os.environ[\"RELEASE_VERSION\"]\n    else:\n        version_file = os.path.join(os.path.dirname(__file__), \"version.txt\")\n        with open(version_file, \"r\") as f:\n            version = f.read().strip()\n    return version.lstrip(\"v\")\n\n\nproject_name = os.getenv(\"PROJECT_NAME\", \"taichi\")\nversion = get_version()\nTI_VERSION_MAJOR, TI_VERSION_MINOR, TI_VERSION_PATCH = version.split(\".\")\n\ndata_files = glob.glob(\"python/_lib/runtime/*\")\nprint(data_files)\npackages = find_packages(\"python\")\nprint(packages)\n\n# Our python package root dir is python/\npackage_dir = \"python\"\n\n\ndef remove_tmp(taichi_dir):\n    shutil.rmtree(os.path.join(taichi_dir, \"assets\"), ignore_errors=True)\n\n\nclass EggInfo(egg_info):\n    def finalize_options(self, *args, **kwargs):\n        if \"\" not in self.distribution.package_dir:\n            # Issue#4975: skbuild loses the root package dir\n            self.distribution.package_dir[\"\"] = package_dir\n        return super().finalize_options(*args, **kwargs)\n\n\ndef copy_assets():\n    taichi_dir = os.path.join(package_dir, \"taichi\")\n    remove_tmp(taichi_dir)\n\n    shutil.copytree(\"external/assets\", os.path.join(taichi_dir, \"assets\"))\n\n\nclass Clean(clean):\n    def run(self):\n        super().run()\n        self.build_temp = os.path.join(root_dir, \"_skbuild\")\n        if os.path.exists(self.build_temp):\n            remove_tree(self.build_temp, dry_run=self.dry_run)\n        generated_folders = (\n            \"bin\",\n            \"dist\",\n            \"python/taichi/assets\",\n            \"python/taichi/_lib/runtime\",\n            \"python/taichi/_lib/c_api\",\n            \"taichi.egg-info\",\n            \"python/taichi.egg-info\",\n            \"build\",\n        )\n        for d in generated_folders:\n            if os.path.exists(d):\n                remove_tree(d, dry_run=self.dry_run)\n        generated_files = [\"taichi/common/commit_hash.h\", \"taichi/common/version.h\"]\n        generated_files += glob.glob(\"taichi/runtime/llvm/runtime_*.bc\")\n        generated_files += glob.glob(\"python/taichi/_lib/core/*.so\")\n        generated_files += glob.glob(\"python/taichi/_lib/core/*.pyd\")\n        for f in generated_files:\n            if os.path.exists(f):\n                print(f\"removing generated file {f}\")\n                if not self.dry_run:\n                    os.remove(f)\n\n\ndef get_cmake_args():\n    import shlex\n\n    num_threads = os.getenv(\"BUILD_NUM_THREADS\", multiprocessing.cpu_count())\n    cmake_args = shlex.split(os.getenv(\"TAICHI_CMAKE_ARGS\", \"\").strip())\n\n    use_msbuild = False\n    use_xcode = False\n\n    if os.getenv(\"DEBUG\", \"0\") in (\"1\", \"ON\"):\n        cfg = \"Debug\"\n    elif os.getenv(\"RELWITHDEBINFO\", \"0\") in (\"1\", \"ON\"):\n        cfg = \"RelWithDebInfo\"\n    elif os.getenv(\"MINSIZEREL\", \"0\") in (\"1\", \"ON\"):\n        cfg = \"MinSizeRel\"\n    else:\n        cfg = None\n    build_options = []\n    if cfg:\n        build_options.extend([\"--build-type\", cfg])\n    if sys.platform == \"win32\":\n        if os.getenv(\"TAICHI_USE_MSBUILD\", \"0\") in (\"1\", \"ON\"):\n            use_msbuild = True\n        if use_msbuild:\n            build_options.extend([\"-G\", \"Visual Studio 17 2022\"])\n        else:\n            build_options.extend([\"-G\", \"Ninja\", \"--skip-generator-test\"])\n    if sys.platform == \"darwin\":\n        if os.getenv(\"TAICHI_USE_XCODE\", \"0\") in (\"1\", \"ON\"):\n            use_xcode = True\n        if use_xcode:\n            build_options.extend([\"-G\", \"Xcode\", \"--skip-generator-test\"])\n    sys.argv[2:2] = build_options\n\n    cmake_args += [\n        f\"-DTI_VERSION_MAJOR={TI_VERSION_MAJOR}\",\n        f\"-DTI_VERSION_MINOR={TI_VERSION_MINOR}\",\n        f\"-DTI_VERSION_PATCH={TI_VERSION_PATCH}\",\n    ]\n\n    if sys.platform == \"darwin\" and use_xcode:\n        os.environ[\"SKBUILD_BUILD_OPTIONS\"] = f\"-jobs {num_threads}\"\n    elif sys.platform != \"win32\":\n        os.environ[\"SKBUILD_BUILD_OPTIONS\"] = f\"-j{num_threads}\"\n    elif use_msbuild:\n        # /M uses multi-threaded build (similar to -j)\n        os.environ[\"SKBUILD_BUILD_OPTIONS\"] = f\"/M\"\n    if sys.platform == \"darwin\":\n        if platform.machine() == \"arm64\":\n            cmake_args += [\"-DCMAKE_OSX_ARCHITECTURES=arm64\"]\n        else:\n            cmake_args += [\"-DCMAKE_OSX_ARCHITECTURES=x86_64\"]\n    return cmake_args\n\n\n# Control files to be included in package data\nBLACKLISTED_FILES = [\n    \"libSPIRV-Tools-shared.so\",\n    \"libSPIRV-Tools-shared.dll\",\n]\n\nWHITELISTED_FILES = [\n    \"libMoltenVK.dylib\",\n]\n\n\ndef cmake_install_manifest_filter(manifest_files):\n    def should_include(f):\n        basename = os.path.basename(f)\n        if basename in WHITELISTED_FILES:\n            return True\n        if basename in BLACKLISTED_FILES:\n            return False\n        return f.endswith((\".so\", \"pyd\", \".dll\", \".bc\", \".h\", \".dylib\", \".cmake\", \".hpp\", \".lib\"))\n\n    return [f for f in manifest_files if should_include(f)]\n\n\ndef sign_development_for_apple_m1():\n    \"\"\"\n    Apple enforces codesigning for arm64 targets even for local development\n    builds. See discussion here:\n        https://github.com/supercollider/supercollider/issues/5603\n    \"\"\"\n    if sys.platform == \"darwin\" and platform.machine() == \"arm64\":\n        try:\n            for path in glob.glob(\"python/taichi/_lib/core/*.so\"):\n                print(f\"signing {path}..\")\n                subprocess.check_call([\"codesign\", \"--force\", \"--deep\", \"--sign\", \"-\", path])\n            for path in glob.glob(\"python/taichi/_lib/c_api/lib/*.so\"):\n                print(f\"signing {path}..\")\n                subprocess.check_call([\"codesign\", \"--force\", \"--deep\", \"--sign\", \"-\", path])\n        except:\n            print(\"cannot sign python shared library for macos arm64 build\")\n\n\ncopy_assets()\n\nforce_plat_name = os.getenv(\"TAICHI_FORCE_PLAT_NAME\", \"\").strip()\nif force_plat_name:\n    from skbuild.constants import set_skbuild_plat_name\n\n    set_skbuild_plat_name(force_plat_name)\n\nsetup(\n    name=project_name,\n    packages=packages,\n    package_dir={\"\": package_dir},\n    version=version,\n    description=\"The Taichi Programming Language\",\n    author=\"Taichi developers\",\n    author_email=\"yuanmhu@gmail.com\",\n    url=\"https://github.com/taichi-dev/taichi\",\n    python_requires=\">=3.6,<4.0\",\n    install_requires=[\n        \"numpy\",\n        \"colorama\",\n        \"dill\",\n        \"rich\",\n        'astunparse;python_version<\"3.9\"',\n    ],\n    data_files=[\n        (os.path.join(\"_lib\", \"runtime\"), data_files),\n    ],\n    keywords=[\"graphics\", \"simulation\"],\n    license=\"Apache Software License (http://www.apache.org/licenses/LICENSE-2.0)\",\n    include_package_data=True,\n    entry_points={\n        \"console_scripts\": [\n            \"ti=taichi._main:main\",\n        ],\n    },\n    classifiers=classifiers,\n    cmake_args=get_cmake_args(),\n    cmake_process_manifest_hook=cmake_install_manifest_filter,\n    cmdclass={\"egg_info\": EggInfo, \"clean\": Clean},\n    has_ext_modules=lambda: True,\n)\n\nsign_development_for_apple_m1()\n"
        },
        {
          "name": "taichi",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "version.txt",
          "type": "blob",
          "size": 0.01,
          "content": "v1.8.0\n"
        },
        {
          "name": "vs-chromium-project.txt",
          "type": "blob",
          "size": 0.27,
          "content": "[SourceExplorer.ignore]\n.git/\n.vs/\n.vscode/\n.pytest_cache/\n*.csproj\n*.vcxproj\n\n[SearchableFiles.ignore]\nout/\nbuild/\n.vs/\n.vscode/\n.pytest_cache/\n_skbuild/\nbuild_clang_tidy/\n.git/\n.vs/\n.vscode/\n\n[SearchableFiles.include]\n*.cpp\n*.c\n*.h\n*.cu\n*.cxx\n*.py\n*.json\n*.txt\n*.frag\n*.vert\n"
        }
      ]
    }
  ]
}