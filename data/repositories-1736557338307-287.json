{
  "metadata": {
    "timestamp": 1736557338307,
    "page": 287,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "romkatv/powerlevel10k",
      "stars": 47372,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.13,
          "content": "* text=auto\n*.zsh text eol=lf\n*.zsh-theme text eol=lf\n/prompt_powerlevel9k_setup text eol=lf\n/prompt_powerlevel10k_setup text eol=lf\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.01,
          "content": "*.zwc\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.32,
          "content": "Copyright (c) 2009-2014 Robby Russell and contributors (see https://github.com/robbyrussell/oh-my-zsh/contributors)\nCopyright (c) 2014-2017 Ben Hilburn <bhilburn@gmail.com>\nCopyright (c) 2019 Roman Perepelitsa <roman.perepelitsa@gmail.com> and contributors (see https://github.com/romkatv/powerlevel10k/contributors)\n\nMIT LICENSE\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.35,
          "content": "ZSH := $(shell command -v zsh 2> /dev/null)\n\nall:\n\nzwc:\n\t$(MAKE) -C gitstatus zwc\n\t$(or $(ZSH),:) -fc 'for f in *.zsh-theme internal/*.zsh; do zcompile -R -- $$f.zwc $$f || exit; done'\n\nminify:\n\t$(MAKE) -C gitstatus minify\n\trm -rf -- .git .gitattributes .gitignore LICENSE Makefile README.md font.md powerlevel10k.png\n\npkg: zwc\n\t$(MAKE) -C gitstatus pkg\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 102.61,
          "content": "# Powerlevel10k\n[![Gitter](https://badges.gitter.im/powerlevel10k/community.svg)](\n  https://gitter.im/powerlevel10k/community?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n\n- **THE PROJECT HAS VERY LIMITED SUPPORT**\n- **NO NEW FEATURES ARE IN THE WORKS**\n- **MOST BUGS WILL GO UNFIXED**\n- **HELP REQUESTS WILL BE IGNORED**\n\nPowerlevel10k is a theme for Zsh. It emphasizes [speed](#uncompromising-performance),\n[flexibility](#extremely-customizable) and [out-of-the-box experience](#configuration-wizard).\n\n![Powerlevel10k](\nhttps://raw.githubusercontent.com/romkatv/powerlevel10k-media/master/prompt-styles-high-contrast.png)\n\n- [Getting started](#getting-started)\n- [Features](#features)\n- [Installation](#installation)\n- [Configuration](#configuration)\n- [Fonts](#fonts)\n- [Try it in Docker](#try-it-in-docker)\n- [License](#license)\n- [FAQ](#faq)\n- [Troubleshooting](#troubleshooting)\n\n## Getting started\n\n1. [Install the recommended font](#meslo-nerd-font-patched-for-powerlevel10k). *Optional but highly\n   recommended.*\n1. [Install Powerlevel10k](#installation) itself.\n1. Restart Zsh with `exec zsh`.\n1. Type `p10k configure` if the configuration wizard doesn't start automatically.\n\n## Features\n\n- [Configuration wizard](#configuration-wizard)\n- [Uncompromising performance](#uncompromising-performance)\n- [Powerlevel9k compatibility](#powerlevel9k-compatibility)\n- [Pure compatibility](#pure-compatibility)\n- [Instant prompt](#instant-prompt)\n- [Show on command](#show-on-command)\n- [Transient prompt](#transient-prompt)\n- [Current directory that just works](#current-directory-that-just-works)\n- [Extremely customizable](#extremely-customizable)\n- [Batteries included](#batteries-included)\n- [Extensible](#extensible)\n\n### Configuration wizard\n\nType `p10k configure` to access the builtin configuration wizard right from your terminal.\n\n<details>\n  <summary>Screen recording</summary>\n\n  ![Powerlevel10k Configuration Wizard](\n    https://raw.githubusercontent.com/romkatv/powerlevel10k-media/master/configuration-wizard.gif)\n</details>\n\nAll styles except [Pure](#pure-compatibility) are functionally equivalent. They display the same\ninformation and differ only in presentation.\n\nConfiguration wizard creates `~/.p10k.zsh` based on your preferences. Additional prompt\ncustomization can be done by editing this file. It has plenty of comments to help you navigate\nthrough configuration options.\n\n*Tip*: Install [the recommended font](#meslo-nerd-font-patched-for-powerlevel10k) before\nrunning `p10k configure` to unlock all prompt styles.\n\n*FAQ:*\n\n- [What is the best prompt style in the configuration wizard?](\n    #what-is-the-best-prompt-style-in-the-configuration-wizard)\n- [What do different symbols in Git status mean?](\n    #what-do-different-symbols-in-git-status-mean)\n- [How do I change prompt colors?](#how-do-i-change-prompt-colors)\n\n*Troubleshooting*:\n\n- [Some prompt styles are missing from the configuration wizard](\n    #some-prompt-styles-are-missing-from-the-configuration-wizard).\n- [Question mark in prompt](#question-mark-in-prompt).\n- [Icons, glyphs or powerline symbols don't render](#icons-glyphs-or-powerline-symbols-dont-render).\n- [Sub-pixel imperfections around powerline symbols](\n    #sub-pixel-imperfections-around-powerline-symbols).\n- [Directory is difficult to see in prompt when using Rainbow style](\n    #directory-is-difficult-to-see-in-prompt-when-using-rainbow-style).\n\n### Uncompromising performance\n\nWhen you hit *ENTER*, the next prompt appears instantly. With Powerlevel10k there is no prompt lag.\nIf you install Cygwin on Raspberry Pi, `cd` into a Linux Git repository and activate enough prompt\nsegments to fill four prompt lines on both sides of the screen... wait, that's just crazy and no\none ever does that. Probably impossible, too. The point is, Powerlevel10k prompt is always fast, no\nmatter what you do!\n\n<details>\n  <summary>Screen recording</summary>\n\n  ![Powerlevel10k Performance](\n    https://raw.githubusercontent.com/romkatv/powerlevel10k-media/master/performance.gif)\n</details>\n\nNote how the effect of every command is instantly reflected by the very next prompt.\n\n| Command                       | Prompt Indicator | Meaning                                                               |\n|-------------------------------|:----------------:|----------------------------------------------------------------------:|\n| `timew start hack linux`      | `‚åö hack linux`  | time tracking enabled in [timewarrior](https://timewarrior.net/)      |\n| `touch x y`                   | `?2`             | 2 untracked files in the Git repo                                     |\n| `rm COPYING`                  | `!1`             | 1 unstaged change in the Git repo                                     |\n| `echo 3.7.3 >.python-version` | `üêç 3.7.3`       | the current python version in [pyenv](https://github.com/pyenv/pyenv) |\n\nOther Zsh themes capable of displaying the same information either produce prompt lag or print\nprompt that doesn't reflect the current state of the system and then refresh it later. With\nPowerlevel10k you get fast prompt *and* up-to-date information.\n\n*FAQ*: [Is it really fast?](#is-it-really-fast)\n\n### Powerlevel9k compatibility\n\nPowerlevel10k understands all [Powerlevel9k](https://github.com/Powerlevel9k/powerlevel9k)\nconfiguration parameters.\n\n<details>\n  <summary>Screen recording</summary>\n\n  ![Powerlevel10k Compatibility with 9k](\n    https://raw.githubusercontent.com/romkatv/powerlevel10k-media/master/9k-compatibility.gif)\n</details>\n\n[Migration](#installation) from Powerlevel9k to Powerlevel10k is a straightforward process. All\nyour `POWERLEVEL9K` configuration parameters will still work. Prompt will look the same as before\n([almost](\n  #does-powerlevel10k-always-render-exactly-the-same-prompt-as-powerlevel9k-given-the-same-config))\nbut it will be [much faster](#uncompromising-performance) ([certainly](#is-it-really-fast)).\n\n*FAQ*:\n\n- [I'm using Powerlevel9k with Oh My Zsh. How do I migrate?](\n    #im-using-powerlevel9k-with-oh-my-zsh-how-do-i-migrate)\n- [Does Powerlevel10k always render exactly the same prompt as Powerlevel9k given the same config?](\n    #does-powerlevel10k-always-render-exactly-the-same-prompt-as-powerlevel9k-given-the-same-config)\n- [What is the relationship between Powerlevel9k and Powerlevel10k?](\n    #What-is-the-relationship-between-powerlevel9k-and-powerlevel10k)\n\n### Pure compatibility\n\nPowerlevel10k can produce the same prompt as [Pure](https://github.com/sindresorhus/pure). Type\n`p10k configure` and select *Pure* style.\n\n<details>\n  <summary>Screen recording</summary>\n\n  ![Powerlevel10k Pure Style](\n    https://raw.githubusercontent.com/romkatv/powerlevel10k-media/master/pure-style.gif)\n</details>\n\nYou can still use Powerlevel10k features such as [transient prompt](#transient-prompt) or\n[instant prompt](#instant-prompt) when sporting Pure style.\n\nTo customize prompt, edit `~/.p10k.zsh`. Powerlevel10k doesn't recognize Pure configuration\nparameters, so you'll need to use `POWERLEVEL9K_COMMAND_EXECUTION_TIME_THRESHOLD=3` instead of\n`PURE_CMD_MAX_EXEC_TIME=3`, etc. All relevant parameters are in `~/.p10k.zsh`. This file has\nplenty of comments to help you navigate through it.\n\n*FAQ:* [What is the best prompt style in the configuration wizard?](\n  #what-is-the-best-prompt-style-in-the-configuration-wizard)\n\n### <a name='what-is-instant-prompt'></a>Instant prompt\n\nIf your `~/.zshrc` loads many plugins, or perhaps just a few slow ones\n(for example, [pyenv](https://github.com/pyenv/pyenv) or [nvm](https://github.com/nvm-sh/nvm)), you\nmay have noticed that it takes some time for Zsh to start.\n\n<details>\n  <summary>Screen recording</summary>\n\n  ![Powerlevel10k No Instant Prompt](\n    https://raw.githubusercontent.com/romkatv/powerlevel10k-media/master/no-instant-prompt.gif)\n</details>\n\nPowerlevel10k can remove Zsh startup lag **even if it's not caused by a theme**.\n\n<details>\n  <summary>Screen recording</summary>\n\n  ![Powerlevel10k Instant Prompt](\n    https://raw.githubusercontent.com/romkatv/powerlevel10k-media/master/instant-prompt.gif)\n</details>\n\nThis feature is called *Instant Prompt*. You need to explicitly enable it through `p10k configure`\nor [manually](#how-do-i-configure-instant-prompt). It does what it says on the tin -- prints prompt\ninstantly upon Zsh startup allowing you to start typing while plugins are still loading.\n\nOther themes *increase* Zsh startup lag -- some by a lot, others by a just a little. Powerlevel10k\n*removes* it outright.\n\nIf you are curious about how *Instant Prompt* works, see\n[this section in zsh-bench](https://github.com/romkatv/zsh-bench#instant-prompt).\n\n*FAQ:* [How do I configure instant prompt?](#how-do-i-configure-instant-prompt)\n\n### Show on command\n\nThe behavior of some commands depends on global environment. For example, `kubectl run ...` runs an\nimage on the cluster defined by the current kubernetes context. If you frequently change context\nbetween \"prod\" and \"testing\", you might want to display the current context in Zsh prompt. If you do\nlikewise for AWS, Azure and Google Cloud credentials, prompt will get pretty crowded.\n\nEnter *Show On Command*. This feature makes prompt segments appear only when they are relevant to\nthe command you are currently typing.\n\n<details>\n  <summary>Screen recording</summary>\n\n  ![Powerlevel10k Show On Command](\n    https://raw.githubusercontent.com/romkatv/powerlevel10k-media/master/show-on-command.gif)\n</details>\n\nConfigs created by `p10k configure` enable show on command for several prompt segments by default.\nHere's the relevant parameter for kubernetes context:\n\n```zsh\n# Show prompt segment \"kubecontext\" only when the command you are typing invokes one of these tools.\ntypeset -g POWERLEVEL9K_KUBECONTEXT_SHOW_ON_COMMAND='kubectl|helm|kubens'\n```\n\nTo customize when different prompt segments are shown, open `~/.p10k.zsh`, search for\n`SHOW_ON_COMMAND` and either remove these parameters to display affected segments unconditionally,\nor change their values.\n\n### Transient prompt\n\nWhen *Transient Prompt* is enabled through `p10k configure`, Powerlevel10k will trim down every\nprompt when accepting a command line.\n\n<details>\n  <summary>Screen recording</summary>\n\n  ![Powerlevel10k Transient Prompt](\n    https://raw.githubusercontent.com/romkatv/powerlevel10k-media/master/transient-prompt.gif)\n</details>\n\nTransient prompt makes it much easier to copy-paste series of commands from the terminal scrollback.\n\n*Tip*: If you enable transient prompt, take advantage of two-line prompt. You'll get the benefit of\nextra space for typing commands without the usual drawback of reduced scrollback density. Sparse\nprompt (with an empty line before prompt) also works great in combination with transient prompt.\n\n### Current directory that just works\n\nThe current working directory is perhaps the most important prompt segment. Powerlevel10k goes to\ngreat length to highlight its important parts and to truncate it with the least loss of information\nwhen horizontal space gets scarce.\n\n<details>\n  <summary>Screen recording</summary>\n\n  ![Powerlevel10k Directory Truncation](\n    https://raw.githubusercontent.com/romkatv/powerlevel10k-media/master/directory-truncation.gif)\n</details>\n\nWhen the full directory doesn't fit, the leftmost segment gets truncated to its shortest unique\nprefix. In the screencast, `~/work` becomes `~/wo`. It couldn't be truncated to `~/w` because it\nwould be ambiguous (there was `~/wireguard` when the session was recorded). The next segment --\n`projects` -- turns into `p` as there was nothing else that started with `p` in `~/work/`.\n\nDirectory segments are shown in one of three colors:\n\n- Truncated segments are bleak.\n- Important segments are bright and never truncated. These include the first and the last segment,\n  roots of Git repositories, etc.\n- Regular segments (not truncated but can be) use in-between color.\n\n*Tip*: If you copy-paste a truncated directory and hit *TAB*, it'll complete to the original.\n\n*Troubleshooting*: [Directory is difficult to see in prompt when using Rainbow style.](\n  #directory-is-difficult-to-see-in-prompt-when-using-rainbow-style)\n\n### Extremely customizable\n\nPowerlevel10k can be configured to look like any other Zsh theme out there.\n\n<details>\n  <summary>Screen recording</summary>\n\n  ![Powerlevel10k Other Theme Emulation](\n    https://raw.githubusercontent.com/romkatv/powerlevel10k-media/master/other-theme-emulation.gif)\n</details>\n\n[Pure](#pure-compatibility), [Powerlevel9k](#powerlevel9k-compatibility) and [robbyrussell](\n  #how-to-make-powerlevel10k-look-like-robbyrussell-oh-my-zsh-theme) emulations are built-in.\nTo emulate the appearance of other themes, you'll need to write a suitable configuration file. The\nbest way to go about it is to run `p10k configure`, select the style that is the closest to your\ngoal and then edit `~/.p10k.zsh`.\n\nThe full range of Powerlevel10k appearance spans from spartan:\n\n![Powerlevel10k Spartan Style](\n  https://raw.githubusercontent.com/romkatv/powerlevel10k-media/master/spartan-style.png)\n\nTo ~~ridiculous~~ extravagant:\n\n![Powerlevel10k Extravagant Style](\n  https://raw.githubusercontent.com/romkatv/powerlevel10k-media/master/extravagant-style.png)\n\n### Batteries included\n\nPowerlevel10k comes with dozens of built-in high quality prompt segments that can display\ninformation from a variety of sources. When you run `p10k configure` and choose any style\nexcept [Pure](#pure-compatibility), many of these segments get enabled by\ndefault while others can be manually enabled by opening `~/.p10k.zsh` and uncommenting them.\nYou can enable as many segments as you like. It won't slow down your prompt or Zsh startup.\n\n| Segment | Meaning |\n|--------:|---------|\n| `anaconda` | virtual environment from [conda](https://conda.io/) |\n| `asdf` | tool versions from [asdf](https://github.com/asdf-vm/asdf) |\n| `aws` | [aws profile](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html) |\n| `aws_eb_env` | [aws elastic beanstalk](https://aws.amazon.com/elasticbeanstalk/) environment |\n| `azure` | [azure](https://docs.microsoft.com/en-us/cli/azure) account name |\n| `background_jobs` | presence of background jobs |\n| `battery` | internal battery state and charge level (yep, batteries *literally* included) |\n| `command_execution_time` | duration (wall time) of the last command |\n| `context` | user@hostname |\n| `cpu_arch` | CPU architecture |\n| `dir` | current working directory |\n| `direnv` | [direnv](https://direnv.net/) status |\n| `disk_usage` | disk usage |\n| `dotnet_version` | [dotnet](https://dotnet.microsoft.com) version |\n| `fvm` | flutter environment from [fvm](https://github.com/leoafarias/fvm) |\n| `gcloud` | [google cloud](https://cloud.google.com/) cli account and project |\n| `goenv` | go environment from [goenv](https://github.com/syndbg/goenv) |\n| `google_app_cred` | [google application credentials](https://cloud.google.com/docs/authentication/production) |\n| `go_version` | [go](https://golang.org) version |\n| `haskell_stack` | haskell version from [stack](https://haskellstack.org/) |\n| `ip` | IP address and bandwidth usage for a specified network interface |\n| `java_version` | [java](https://www.java.com/) version |\n| `jenv` | java environment from [jenv](https://github.com/jenv/jenv) |\n| `kubecontext` | current [kubernetes](https://kubernetes.io/) context |\n| `laravel_version` | [laravel php framework](https://laravel.com/) version |\n| `load` | CPU load |\n| `luaenv` | lua environment from [luaenv](https://github.com/cehoffman/luaenv) |\n| `midnight_commander` | [midnight commander](https://midnight-commander.org/) shell |\n| `nix_shell` | [nix shell](https://nixos.org/nixos/nix-pills/developing-with-nix-shell.html) indicator |\n| `nnn` | [nnn](https://github.com/jarun/nnn) shell |\n| `lf` | [lf](https://github.com/gokcehan/lf) shell |\n| `chezmoi_shell` | [chezmoi](https://www.chezmoi.io/) shell |\n| `nodeenv` | node.js environment from [nodeenv](https://github.com/ekalinin/nodeenv) |\n| `nodenv` | node.js environment from [nodenv](https://github.com/nodenv/nodenv) |\n| `node_version` | [node.js](https://nodejs.org/) version |\n| `nordvpn` | [nordvpn](https://nordvpn.com/) connection status |\n| `nvm` | node.js environment from [nvm](https://github.com/nvm-sh/nvm) |\n| `os_icon` | your OS logo (apple for macOS, swirl for debian, etc.) |\n| `package` | `name@version` from [package.json](https://docs.npmjs.com/files/package.json) |\n| `per_directory_history` | Oh My Zsh [per-directory-history](https://github.com/jimhester/per-directory-history) local/global indicator |\n| `perlbrew` | perl version from [perlbrew](https://github.com/gugod/App-perlbrew) |\n| `phpenv` | php environment from [phpenv](https://github.com/phpenv/phpenv) |\n| `php_version` | [php](https://www.php.net/) version |\n| `plenv` | perl environment from [plenv](https://github.com/tokuhirom/plenv) |\n| `prompt_char` | multi-functional prompt symbol; changes depending on vi mode: `‚ùØ`, `‚ùÆ`, `V`, `‚ñ∂` for insert, command, visual and replace mode respectively; turns red on error |\n| `proxy` | system-wide http/https/ftp proxy |\n| `public_ip` | public IP address |\n| `pyenv` | python environment from [pyenv](https://github.com/pyenv/pyenv) |\n| `ram` | free RAM |\n| `ranger` | [ranger](https://github.com/ranger/ranger) shell |\n| `yazi` | [yazi](https://github.com/sxyazi/yazi) shell |\n| `rbenv` | ruby environment from [rbenv](https://github.com/rbenv/rbenv) |\n| `rust_version` | [rustc](https://www.rust-lang.org) version |\n| `rvm` | ruby environment from [rvm](https://rvm.io) |\n| `scalaenv` | scala version from [scalaenv](https://github.com/scalaenv/scalaenv) |\n| `status` | exit code of the last command |\n| `swap` | used swap |\n| `taskwarrior` | [taskwarrior](https://taskwarrior.org/) task count |\n| `terraform` | [terraform](https://www.terraform.io) workspace |\n| `terraform_version` | [terraform](https://www.terraform.io) version |\n| `time` | current time |\n| `timewarrior` | [timewarrior](https://timewarrior.net/) tracking status |\n| `todo` | [todo](https://github.com/todotxt/todo.txt-cli) items |\n| `toolbox` | [toolbox](https://github.com/containers/toolbox) name |\n| `vcs` | Git repository status |\n| `vim_shell` | [vim](https://www.vim.org/) shell (`:sh`) |\n| `virtualenv` | python environment from [venv](https://docs.python.org/3/library/venv.html) |\n| `vi_mode` | vi mode (you don't need this if you've enabled prompt_char) |\n| `vpn_ip` | virtual private network indicator |\n| `wifi` | WiFi speed |\n| `xplr` | [xplr](https://github.com/sayanarijit/xplr) shell |\n\n### Extensible\n\nIf there is no prompt segment that does what you need, implement your own. Powerlevel10k provides\npublic API for defining segments that are as fast and as flexible as built-in ones.\n\n<details>\n  <summary>Screen recording</summary>\n\n  ![Powerlevel10k Custom Segment](\n    https://raw.githubusercontent.com/romkatv/powerlevel10k-media/master/custom-segment.gif)\n</details>\n\nOn Linux you can fetch current CPU temperature by reading `/sys/class/thermal/thermal_zone0/temp`.\nThe screencast shows how to define a prompt segment to display this value. Once the segment is\ndefined, you can use it like any other segment. All standard customization parameters will work for\nit out of the box.\n\nType `p10k help segment` for reference.\n\n*Note*: If you modify `POWERLEVEL9K_*` parameters in an already initialized interactive shell (as\nopposed to editing `~/.p10k.zsh`), the changes might not be immediately effective. To apply the\nmodifications, invoke `p10k reload`. Setting `POWERLEVEL9K_DISABLE_HOT_RELOAD=false` eliminates the\nnecessity for `p10k reload` but results in a marginally slower prompt.\n\n*Tip*: Prefix names of your own segments with `my_` to avoid clashes with future versions of\nPowerlevel10k.\n\n## Installation\n\n- [Manual](#manual) üëà **choose this if confused or uncertain**\n- [Oh My Zsh](#oh-my-zsh)\n- [Prezto](#prezto)\n- [Zim](#zim)\n- [Antibody](#antibody)\n- [Antidote](#antidote)\n- [Antigen](#antigen)\n- [Zplug](#zplug)\n- [Zgen](#zgen)\n- [Zplugin](#zplugin)\n- [Zinit](#zinit)\n- [Zi](#zi)\n- [Zap](#zap)\n- [Homebrew](#homebrew)\n- [Arch Linux](#arch-linux)\n- [Alpine Linux](#alpine-linux)\n- [Fig](#fig)\n\n### Manual\n\n```zsh\ngit clone --depth=1 https://github.com/romkatv/powerlevel10k.git ~/powerlevel10k\necho 'source ~/powerlevel10k/powerlevel10k.zsh-theme' >>~/.zshrc\n```\n\nUsers in China can use the official mirror on gitee.com for faster download.<br>\n‰∏≠ÂõΩÁî®Êà∑ÂèØ‰ª•‰ΩøÁî® gitee.com ‰∏äÁöÑÂÆòÊñπÈïúÂÉèÂä†ÈÄü‰∏ãËΩΩ.\n\n```zsh\ngit clone --depth=1 https://gitee.com/romkatv/powerlevel10k.git ~/powerlevel10k\necho 'source ~/powerlevel10k/powerlevel10k.zsh-theme' >>~/.zshrc\n```\n\nThis is the simplest kind of installation and it works even if you are using a plugin manager. Just\nmake sure to disable the current theme in your plugin manager. See\n[troubleshooting](#cannot-make-powerlevel10k-work-with-my-plugin-manager) for help.\n\n### Oh My Zsh\n\n1. Clone the repository:\n    ```zsh\n    git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k\n    ```\n    Users in China can use the official mirror on gitee.com for faster download.<br>\n    ‰∏≠ÂõΩÁî®Êà∑ÂèØ‰ª•‰ΩøÁî® gitee.com ‰∏äÁöÑÂÆòÊñπÈïúÂÉèÂä†ÈÄü‰∏ãËΩΩ.\n\n    ```zsh\n    git clone --depth=1 https://gitee.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k\n    ```\n2. Open `~/.zshrc`, find the line that sets `ZSH_THEME`, and change its value to `\"powerlevel10k/powerlevel10k\"`.\n\n### Prezto\n\nAdd `zstyle :prezto:module:prompt theme powerlevel10k` to `~/.zpreztorc`.\n\n### Zim\n\nAdd `zmodule romkatv/powerlevel10k --use degit` to `~/.zimrc` and run `zimfw install`.\n\n### Antibody\n\nAdd `antibody bundle romkatv/powerlevel10k` to `~/.zshrc`.\n\n### Antidote\n\nAdd `romkatv/powerlevel10k` to `~/.zsh_plugins.txt`.\n\n### Antigen\n\nAdd `antigen theme romkatv/powerlevel10k` to `~/.zshrc`. Make sure you have `antigen apply`\nsomewhere after it.\n\n### Zplug\n\nAdd `zplug romkatv/powerlevel10k, as:theme, depth:1` to `~/.zshrc`.\n\n### Zgen\n\nAdd `zgen load romkatv/powerlevel10k powerlevel10k` to `~/.zshrc`.\n\n### Zplugin\n\nAdd `zplugin ice depth=1; zplugin light romkatv/powerlevel10k` to `~/.zshrc`.\n\nThe use of `depth=1` ice is optional. Other types of ice are neither recommended nor officially\nsupported by Powerlevel10k.\n\n### Zinit\n\nAdd `zinit ice depth=1; zinit light romkatv/powerlevel10k` to `~/.zshrc`.\n\nThe use of `depth=1` ice is optional. Other types of ice are neither recommended nor officially\nsupported by Powerlevel10k.\n\n### Zi\n\nAdd `zi ice depth=1; zi light romkatv/powerlevel10k` to `~/.zshrc`.\n\nThe use of `depth=1` ice is optional. Other types of ice are neither recommended nor officially\nsupported by Powerlevel10k.\n\n### Zap\n\nAdd `plug \"romkatv/powerlevel10k\"` to `~/.zshrc`.\n\n### Homebrew\n\n```zsh\nbrew install powerlevel10k\necho \"source $(brew --prefix)/share/powerlevel10k/powerlevel10k.zsh-theme\" >>~/.zshrc\n```\n\n### Arch Linux\n\n```zsh\nyay -S --noconfirm zsh-theme-powerlevel10k-git\necho 'source /usr/share/zsh-theme-powerlevel10k/powerlevel10k.zsh-theme' >>~/.zshrc\n```\n\n[zsh-theme-powerlevel10k-git](https://aur.archlinux.org/packages/zsh-theme-powerlevel10k-git/)\nreferenced above is the official Powerlevel10k package.\n\n### Alpine Linux\n\n```zsh\napk add zsh zsh-theme-powerlevel10k\nmkdir -p ~/.local/share/zsh/plugins\nln -s /usr/share/zsh/plugins/powerlevel10k ~/.local/share/zsh/plugins/\n```\n\n### Fig\n\nFollow the instructions on\n[this page](https://fig.io/plugins/other/powerlevel10k).\n\n## Configuration\n\n- [For new users](#for-new-users)\n- [For Powerlevel9k users](#for-powerlevel9k-users)\n\n### For new users\n\nOn the first run, Powerlevel10k [configuration wizard](#configuration-wizard) will ask you a few\nquestions and configure your prompt. If it doesn't trigger automatically, type `p10k configure`.\nConfiguration wizard creates `~/.p10k.zsh` based on your preferences. Additional prompt\ncustomization can be done by editing this file. It has plenty of comments to help you navigate\nthrough configuration options.\n\n*FAQ*:\n\n- [What is the best prompt style in the configuration wizard?](\n    #what-is-the-best-prompt-style-in-the-configuration-wizard)\n- [What do different symbols in Git status mean?](\n    #what-do-different-symbols-in-git-status-mean)\n- [How do I change the format of Git status?](#how-do-i-change-the-format-of-git-status)\n- [How do I add username and/or hostname to prompt?](\n    #how-do-i-add-username-andor-hostname-to-prompt)\n- [How do I change prompt colors?](#how-do-i-change-prompt-colors)\n- [Why some prompt segments appear and disappear as I'm typing?](\n    #why-some-prompt-segments-appear-and-disappear-as-im-typing)\n\n*Troubleshooting*:\n\n- [Question mark in prompt](#question-mark-in-prompt).\n- [Icons, glyphs or powerline symbols don't render](#icons-glyphs-or-powerline-symbols-dont-render).\n- [Sub-pixel imperfections around powerline symbols](\n    #sub-pixel-imperfections-around-powerline-symbols).\n- [Directory is difficult to see in prompt when using Rainbow style](\n    #directory-is-difficult-to-see-in-prompt-when-using-rainbow-style).\n\n### For Powerlevel9k users\n\nIf you've been using Powerlevel9k before, **do not remove the configuration options**. Powerlevel10k\nwill pick them up and provide you with the same prompt UI you are used to. See\n[Powerlevel9k compatibility](#powerlevel9k-compatibility).\n\n*FAQ*:\n\n- [I'm using Powerlevel9k with Oh My Zsh. How do I migrate?](\n    #im-using-powerlevel9k-with-oh-my-zsh-how-do-i-migrate)\n- [What is the relationship between Powerlevel9k and Powerlevel10k?](\n    #what-is-the-relationship-between-powerlevel9k-and-powerlevel10k)\n- [Does Powerlevel10k always render exactly the same prompt as Powerlevel9k given the same config?](\n    #does-powerlevel10k-always-render-exactly-the-same-prompt-as-powerlevel9k-given-the-same-config)\n\n*Troubleshooting*: [Extra or missing spaces in prompt compared to Powerlevel9k](\n  #extra-or-missing-spaces-in-prompt-compared-to-powerlevel9k).\n\n## Fonts\n\nPowerlevel10k doesn't require custom fonts but can take advantage of them if they are available.\nIt works well with [Nerd Fonts](https://github.com/ryanoasis/nerd-fonts),\n[Source Code Pro](https://github.com/adobe-fonts/source-code-pro),\n[Font Awesome](https://fontawesome.com/), [Powerline](https://github.com/powerline/fonts), and even\nthe default system fonts. The full choice of style options is available only when using\n[Nerd Fonts](https://github.com/ryanoasis/nerd-fonts).\n\nüëá **Recommended font**: Meslo Nerd Font patched for Powerlevel10k. üëá\n\n### <a name='recommended-meslo-nerd-font-patched-for-powerlevel10k'></a><a name='font'></a>Meslo Nerd Font patched for Powerlevel10k\n\nGorgeous monospace font designed by Jim Lyles for Bitstream, customized by the same for Apple,\nfurther customized by Andr√© Berg, and finally patched by yours truly with customized scripts\noriginally developed by Ryan L McIntyre of Nerd Fonts. Contains all glyphs and symbols that\nPowerlevel10k may need. Battle-tested in dozens of different terminals on all major operating\nsystems.\n\n*FAQ*: [How was the recommended font created?](#how-was-the-recommended-font-created)\n\n#### Automatic font installation\n\nIf you are using iTerm2 or Termux, `p10k configure` can install the recommended font for you.\nSimply answer `Yes` when asked whether to install *Meslo Nerd Font*.\n\nIf you are using a different terminal, proceed with manual font installation. üëá\n\n#### Manual font installation\n\n1. Download these four ttf files:\n   - [MesloLGS NF Regular.ttf](\n       https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Regular.ttf)\n   - [MesloLGS NF Bold.ttf](\n       https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Bold.ttf)\n   - [MesloLGS NF Italic.ttf](\n       https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Italic.ttf)\n   - [MesloLGS NF Bold Italic.ttf](\n       https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Bold%20Italic.ttf)\n1. Double-click on each file and click \"Install\". This will make `MesloLGS NF` font available to all\n   applications on your system.\n1. Configure your terminal to use this font:\n   - **iTerm2**: Type `p10k configure` and answer `Yes` when asked whether to install\n     *Meslo Nerd Font*. Alternatively, open *iTerm2 ‚Üí Preferences ‚Üí Profiles ‚Üí Text* and set *Font* to\n     `MesloLGS NF`.\n   - **Apple Terminal**: Open *Terminal ‚Üí Preferences ‚Üí Profiles ‚Üí Text*, click *Change* under *Font*\n     and select `MesloLGS NF` family.\n   - **Hyper**: Open *Hyper ‚Üí Edit ‚Üí Preferences* and change the value of `fontFamily` under\n     `module.exports.config` to `MesloLGS NF`.\n   - **Visual Studio Code**: Open *File ‚Üí Preferences ‚Üí Settings* (PC) or\n     *Code ‚Üí Preferences ‚Üí Settings* (Mac), enter `terminal.integrated.fontFamily` in the search box at\n     the top of *Settings* tab and set the value below to `MesloLGS NF`.\n     Consult [this screenshot](\n       https://raw.githubusercontent.com/romkatv/powerlevel10k-media/389133fb8c9a2347929a23702ce3039aacc46c3d/visual-studio-code-font-settings.jpg)\n     to see how it should look like or see [this issue](\n       https://github.com/romkatv/powerlevel10k/issues/671) for extra information.\n   - **GNOME Terminal** (the default Ubuntu terminal): Open *Terminal ‚Üí Preferences* and click on the\n     selected profile under *Profiles*. Check *Custom font* under *Text Appearance* and select\n     `MesloLGS NF Regular`.\n   - **Konsole**: Open *Settings ‚Üí Edit Current Profile ‚Üí Appearance*, click *Select Font* and select\n     `MesloLGS NF Regular`.\n   - **Tilix**: Open *Tilix ‚Üí Preferences* and click on the selected profile under *Profiles*. Check\n     *Custom font* under *Text Appearance* and select `MesloLGS NF Regular`.\n   - **Windows Console Host** (the old thing): Click the icon in the top left corner, then\n     *Properties ‚Üí Font* and set *Font* to `MesloLGS NF`.\n   - **Windows Terminal** by Microsoft (the new thing): Open *Settings* (<kbd>Ctrl+,</kbd>), click\n     either on the selected profile under *Profiles* or on *Defaults*, click *Appearance* and set\n     *Font face* to `MesloLGS NF`.\n   - **Conemu**: Open *Setup ‚Üí General ‚Üí Fonts* and set *Main console font* to `MesloLGS NF`.\n   - **IntelliJ** (and other IDEs by Jet Brains): Open *IDE ‚Üí Edit ‚Üí Preferences ‚Üí Editor ‚Üí\n     Color Scheme ‚Üí Console Font*. Select *Use console font instead of the default* and set the font\n     name to `MesloLGS NF`.\n   - **Termux**: Type `p10k configure` and answer `Yes` when asked whether to install\n     *Meslo Nerd Font*.\n   - **Blink**: Type `config`, go to *Appearance*, tap *Add a new font*, tap *Open Gallery*, select\n     *MesloLGS NF.css*, tap *import* and type `exit` in the home view to reload the font.\n   - **Tabby** (formerly **Terminus**): Open *Settings ‚Üí Appearance* and set *Font* to `MesloLGS NF`.\n   - **Terminator**: Open *Preferences* using the context menu. Under *Profiles* select the *General*\n     tab (should be selected already), uncheck *Use the system fixed width font* (if not already)\n     and select `MesloLGS NF Regular`. Exit the Preferences dialog by clicking *Close*.\n   - **Guake**: Right Click on an open terminal and open *Preferences*. Under *Appearance*\n     tab, uncheck *Use the system fixed width font* (if not already) and select `MesloLGS NF Regular`.\n     Exit the Preferences dialog by clicking *Close*.\n   - **MobaXterm**: Open *Settings* ‚Üí *Configuration* ‚Üí *Terminal* ‚Üí (under *Terminal look and feel*)\n     and change *Font* to `MesloLGS NF`. If you have *sessions*, you need to change the font in each\n     of them through *Settings* ‚Üí right click on an individual session ‚Üí *Edit Session* ‚Üí *Terminal\n     Settings* ‚Üí *Font settings*.\n   - **Asbr√∫ Connection Manager**: Open *Preferences ‚Üí Local Shell Options ‚Üí Look and Feel*, enable\n     *Use these personal options* and change *Font:* under *Terminal UI* to `MesloLGS NF Regular`.\n     To change the font for the remote host connections, go to *Preferences ‚Üí Terminal Options ‚Üí\n     Look and Feel* and change *Font:* under *Terminal UI* to `MesloLGS NF Regular`.\n   - **Warp**: Open Warp and Navigate to *Settings* then *Appearance*.  Scroll down to *Text* Section\n     and under *\"Terminal Font\"*, select the `MesloLGS NF` font.\n   - **WSLtty**: Right click on an open terminal and then on *Options*. In the *Text* section, under\n     *Font*, click *\"Select...\"* and set Font to `MesloLGS NF Regular`.\n   - **Yakuake**: Click *‚â°* ‚Üí *Manage Profiles* ‚Üí *New* ‚Üí *Appearance*. Click *Choose* next to the\n     *Font* dropdown, select `MesloLGS NF` and click *OK*. Click *OK* to save the profile. Select the\n     new profile and click *Set as Default*.\n   - **Alacritty**: Create or open `~/.config/alacritty/alacritty.toml` and add the following\n     section to it:\n     ```toml\n     [font.normal]\n     family = \"MesloLGS NF\"\n     ```\n   - **foot**: Create or open `~/.config/foot/foot.ini` and add the following section to it:\n     ```ini\n     font=MesloLGS NF:size=12\n     ```\n   - **kitty**: Create or open `~/.config/kitty/kitty.conf` and add the following line to it:\n      ```text\n      font_family MesloLGS NF\n      ```\n      Restart kitty by closing all sessions and opening a new session.\n   - **puTTY**: Set *Window* ‚Üí *Appearance* ‚Üí *Font* to `MesloLGS NF`. Requires puTTY\n     version >= 0.75.\n   - **WezTerm**: Create or open `$HOME/.config/wezterm/wezterm.lua` and add the following:\n     ```lua\n     local wezterm = require 'wezterm';\n     return {\n         font = wezterm.font(\"MesloLGS NF\"),\n     }\n     ```\n     If the file already exists, only add the line with the font to the existing return.\n     Also add the first line if it is not already present.\n   - **urxvt**: Create or open `~/.Xresources` and add the following line to it:\n     ```text\n     URxvt.font: xft:MesloLGS NF:size=11\n     ```\n     You can adjust the font size to your preference. After changing the config run\n     `xrdb ~/.Xresources` to reload it. The new config is applied to all new terminals.\n   - **xterm**: Create or open `~/.Xresources` and add the following line to it:\n     ```text\n     xterm*faceName: MesloLGS NF\n     ```\n     After changing the config run `xrdb ~/.Xresources` to reload it. The new config is applied to\n     all new terminals.\n   - **Zed**: Open `~/.config/zed/settings.json` and set `terminal.font_family` to `\"MesloLGS NF\"`.\n     ```jsonc\n     {\n       \"terminal\": {\n         \"font_family\": \"MesloLGS NF\"\n       },\n       // Other settings.\n     }\n     ```\n   - Crostini (Linux on Chrome OS): Open\n     chrome-untrusted://terminal/html/nassh_preferences_editor.html, set *Text font family* to\n      `'MesloLGS NF'` (including the quotes) and *Custom CSS (inline text)* to the following:\n     ```css\n     @font-face {\n      font-family: \"MesloLGS NF\";\n      src: url(\"https://raw.githubusercontent.com/romkatv/powerlevel10k-media/master/MesloLGS%20NF%20Regular.ttf\");\n      font-weight: normal;\n      font-style: normal;\n     }\n     @font-face {\n         font-family: \"MesloLGS NF\";\n         src: url(\"https://raw.githubusercontent.com/romkatv/powerlevel10k-media/master/MesloLGS%20NF%20Bold.ttf\");\n         font-weight: bold;\n         font-style: normal;\n     }\n     @font-face {\n         font-family: \"MesloLGS NF\";\n         src: url(\"https://raw.githubusercontent.com/romkatv/powerlevel10k-media/master/MesloLGS%20NF%20Italic.ttf\");\n         font-weight: normal;\n         font-style: italic;\n     }\n     @font-face {\n         font-family: \"MesloLGS NF\";\n         src: url(\"https://raw.githubusercontent.com/romkatv/powerlevel10k-media/master/MesloLGS%20NF%20Bold%20Italic.ttf\");\n         font-weight: bold;\n         font-style: italic;\n     }\n     ```\n     **_CAVEAT_**: If you open the normal terminal preferences these settings will be overwritten.\n   - **Deepin Terminal**: Create or open `~/.config/deepin/deepin-terminal/config.conf` and add the following section\n     to it:\n     ```ini\n     [basic.interface.font]\n     value = \"MesloLGS NF\"\n     ```\n   - **Ghostty**: Open *Menu ‚Üí Open Configuration* (Linux) or *Ghostty ‚Üí Settings...* (Mac) and add\n     the following line:\n     ```text\n     font-family = \"MesloLGS NF\"\n     ```\n1. Run `p10k configure` to generate a new `~/.p10k.zsh`. The old config may work\n   incorrectly with the new font.\n\n_Using a different terminal and know how to set the font for it? Share your knowledge by sending a\nPR to expand the list!_\n\n## Try it in Docker\n\nTry Powerlevel10k in Docker. You can safely make any changes to the file system while trying out\nthe theme. Once you exit Zsh, the container is deleted.\n\n```zsh\ndocker run -e TERM -e COLORTERM -e LC_ALL=C.UTF-8 -it --rm alpine sh -uec '\n  apk add git zsh nano vim\n  git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ~/powerlevel10k\n  echo \"source ~/powerlevel10k/powerlevel10k.zsh-theme\" >>~/.zshrc\n  cd ~/powerlevel10k\n  exec zsh'\n```\n\n*Tip*: Install [the recommended font](#meslo-nerd-font-patched-for-powerlevel10k) before\nrunning the Docker command to get access to all prompt styles.\n\n*Tip*: Run `p10k configure` while in Docker to try a different prompt style.\n\n## License\n\nPowerlevel10k is released under the\n[MIT license](https://github.com/romkatv/powerlevel10k/blob/master/LICENSE).\n\n## FAQ\n\n- [How do I update Powerlevel10k?](#how-do-i-update-powerlevel10k)\n- [How do I uninstall Powerlevel10k?](#how-do-i-uninstall-powerlevel10k)\n- [How do I install Powerlevel10k on a machine without Internet access?](#how-do-i-install-powerlevel10k-on-a-machine-without-internet-access)\n- [Where can I ask for help and report bugs?](#where-can-i-ask-for-help-and-report-bugs)\n- [Which aspects of shell and terminal does Powerlevel10k affect?](#which-aspects-of-shell-and-terminal-does-powerlevel10k-affect)\n- [I'm using Powerlevel9k with Oh My Zsh. How do I migrate?](#im-using-powerlevel9k-with-oh-my-zsh-how-do-i-migrate)\n- [Is it really fast?](#is-it-really-fast)\n- [How do I configure instant prompt?](#how-do-i-configure-instant-prompt)\n- [How do I initialize direnv when using instant prompt?](#how-do-i-initialize-direnv-when-using-instant-prompt)\n- [How do I export GPG_TTY when using instant prompt?](#how-do-i-export-gpg_tty-when-using-instant-prompt)\n- [What do different symbols in Git status mean?](#what-do-different-symbols-in-git-status-mean)\n- [How do I change the format of Git status?](#how-do-i-change-the-format-of-git-status)\n- [Why is Git status from `$HOME/.git` not displayed in prompt?](#why-is-git-status-from-homegit-not-displayed-in-prompt)\n- [Why does Git status sometimes appear grey and then gets colored after a short period of time?](#why-does-git-status-sometimes-appear-grey-and-then-gets-colored-after-a-short-period-of-time)\n- [How do I add username and/or hostname to prompt?](#how-do-i-add-username-andor-hostname-to-prompt)\n- [Why some prompt segments appear and disappear as I'm typing?](#why-some-prompt-segments-appear-and-disappear-as-im-typing)\n- [How do I change prompt colors?](#how-do-i-change-prompt-colors)\n- [Why does Powerlevel10k spawn extra processes?](#why-does-powerlevel10k-spawn-extra-processes)\n- [Are there configuration options that make Powerlevel10k slow?](#are-there-configuration-options-that-make-powerlevel10k-slow)\n- [Is Powerlevel10k fast to load?](#is-powerlevel10k-fast-to-load)\n- [What is the relationship between Powerlevel9k and Powerlevel10k?](#what-is-the-relationship-between-powerlevel9k-and-powerlevel10k)\n- [Does Powerlevel10k always render exactly the same prompt as Powerlevel9k given the same config?](#does-powerlevel10k-always-render-exactly-the-same-prompt-as-powerlevel9k-given-the-same-config)\n- [What is the best prompt style in the configuration wizard?](#what-is-the-best-prompt-style-in-the-configuration-wizard)\n- [How to make Powerlevel10k look like robbyrussell Oh My Zsh theme?](#how-to-make-powerlevel10k-look-like-robbyrussell-oh-my-zsh-theme)\n- [Can prompts for completed commands display error status for *those* commands instead of the commands preceding them?](#can-prompts-for-completed-commands-display-error-status-for-those-commands-instead-of-the-commands-preceding-them)\n- [What is the minimum supported Zsh version?](#what-is-the-minimum-supported-zsh-version)\n- [How were these screenshots and animated gifs created?](#how-were-these-screenshots-and-animated-gifs-created)\n- [How was the recommended font created?](#how-was-the-recommended-font-created)\n- [How to package Powerlevel10k for distribution?](#how-to-package-powerlevel10k-for-distribution)\n\n### How do I update Powerlevel10k?\n\nThe command to update Powerlevel10k depends on how it was installed.\n\n| Installation                  | Update command                                              |\n|-------------------------------|-------------------------------------------------------------|\n| [Manual](#manual)             | `git -C ~/powerlevel10k pull`                               |\n| [Oh My Zsh](#oh-my-zsh)       | `git -C ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k pull` |\n| [Prezto](#prezto)             | `zprezto-update`                                            |\n| [Zim](#zim)                   | `zimfw update`                                              |\n| [Antigen](#antigen)           | `antigen update`                                            |\n| [Antidote](#antidote)         | `antidote update`                                           |\n| [Zplug](#zplug)               | `zplug update`                                              |\n| [Zgen](#zgen)                 | `zgen update`                                               |\n| [Zplugin](#zplugin)           | `zplugin update`                                            |\n| [Zinit](#zinit)               | `zinit update`                                              |\n| [Zi](#zi)                     | `zi update`                                                 |\n| [Zap](#zap)                   | `zap update`                                              |\n| [Homebrew](#homebrew)         | `brew update && brew upgrade`                               |\n| [Arch Linux](#arch-linux)     | `yay -S --noconfirm zsh-theme-powerlevel10k-git`            |\n| [Alpine Linux](#alpine-linux) | `apk update && apk upgrade`                                 |\n\n**IMPORTANT**: Restart Zsh after updating Powerlevel10k. [Do not use `source ~/.zshrc`](\n  #weird-things-happen-after-typing-source-zshrc).\n\n### How do I uninstall Powerlevel10k?\n\n1. Remove all references to \"p10k\" from `~/.zshrc`. You might have this snippet at the top:\n   ```zsh\n   if [[ -r \"${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh\" ]]; then\n     source \"${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh\"\n   fi\n   ```\n   And this at the bottom:\n   ```zsh\n   [[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh\n   ```\n   These are added by the [configuration wizard](#configuration-wizard). Remove them.\n2. Remove all references to \"powerlevel10k\" from `~/.zshrc`, `~/.zpreztorc` and `~/.zimrc` (some\n   of these files may be missing -- this is normal). These references have been added manually by\n   yourself when installing Powerlevel10k. Refer to the [installation instructions](#installation)\n   if you need a reminder.\n3. Verify that all references to \"p10k\" and \"powerlevel10k\" are gone from `~/.zshrc`, `~/.zpreztorc`\n   and `~/.zimrc`.\n   ```zsh\n   grep -E 'p10k|powerlevel10k' ~/.zshrc ~/.zpreztorc ~/.zimrc 2>/dev/null\n   ```\n   If this command produces output, there are still references to \"p10k\" or \"powerlevel10k\". You\n   need to remove them.\n4. Delete Powerlevel10k configuration file. This file is created by the\n   [configuration wizard](#configuration-wizard) and may contain manual edits by yourself.\n   ```zsh\n   rm -f ~/.p10k.zsh\n   ```\n5. Delete Powerlevel10k source files. These files have been downloaded when you've installed\n   Powerlevel10k. The command to delete them depends on which installation method you'd chosen.\n   Refer to the [installation instructions](#installation) if you need a reminder.\n\n   | Installation                  | Uninstall command                                                |\n   |-------------------------------|------------------------------------------------------------------|\n   | [Manual](#manual)             | `rm -rf ~/powerlevel10k`                                         |\n   | [Oh My Zsh](#oh-my-zsh)       | `rm -rf -- ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k` |\n   | [Prezto](#prezto)             | n/a                                                              |\n   | [Zim](#zim)                   | `zimfw uninstall`                                                |\n   | [Antigen](#antigen)           | `antigen purge romkatv/powerlevel10k`                            |\n   | [Antidote](#antidote)         | `antidote purge romkatv/powerlevel10k`                           |\n   | [Zplug](#zplug)               | `zplug clean`                                                    |\n   | [Zgen](#zgen)                 | `zgen reset`                                                     |\n   | [Zplugin](#zplugin)           | `zplugin delete romkatv/powerlevel10k`                           |\n   | [Zinit](#zinit)               | `zinit delete romkatv/powerlevel10k`                             |\n   | [Zi](#zi)                     | `zi delete romkatv/powerlevel10k`                                |\n   | [Zap](#zap)                   | `zsh -ic 'zap clean'`                                            |\n   | [Homebrew](#homebrew)         | `brew uninstall powerlevel10k`                                   |\n   | [Arch Linux](#arch-linux)     | `yay -R --noconfirm zsh-theme-powerlevel10k-git`                 |\n   | [Alpine Linux](#alpine-linux) | `apk del zsh-theme-powerlevel10k`                                |\n6. Restart Zsh. [Do not use `source ~/.zshrc`](#weird-things-happen-after-typing-source-zshrc).\n7. Delete Powerlevel10k cache files.\n   ```zsh\n   rm -rf -- \"${XDG_CACHE_HOME:-$HOME/.cache}\"/p10k-*(N) \"${XDG_CACHE_HOME:-$HOME/.cache}\"/gitstatus\n   ```\n\n### How do I install Powerlevel10k on a machine without Internet access?\n\n1. Run this command on the machine without Internet access:\n   ```sh\n   uname -sm | tr '[A-Z]' '[a-z]'\n   ```\n2. Run these commands on a machine connected to the Internet after replacing the value of\n   `target_uname` with the output of the previous command:\n   ```sh\n   target_uname=\"replace this with the output of the previous command\"\n   git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ~/powerlevel10k\n   GITSTATUS_CACHE_DIR=\"$HOME\"/powerlevel10k/gitstatus/usrbin ~/powerlevel10k/gitstatus/install -f -s \"${target_uname% *}\" -m \"${target_uname#* }\"\n   ```\n3. Copy `~/powerlevel10k` from the machine connected to the Internet to the one without Internet\n   access.\n4. Add `source ~/powerlevel10k/powerlevel10k.zsh-theme` to `~/.zshrc` on the machine without\n   Internet access:\n   ```zsh\n   echo 'source ~/powerlevel10k/powerlevel10k.zsh-theme' >>~/.zshrc\n   ```\n5. If `~/.zshrc` on the machine without Internet access sets `ZSH_THEME`, remove that line.\n   ```zsh\n   sed -i.bak '/^ZSH_THEME=/d' ~/.zshrc\n   ```\n\nTo update, remove `~/powerlevel10k` on both machines and repeat steps 1-3.\n\n### Where can I ask for help and report bugs?\n\nThe best way to ask for help and to report bugs is to [open an issue](\n  https://github.com/romkatv/powerlevel10k/issues).\n\n[Gitter](\n  https://gitter.im/powerlevel10k/community?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\nis another option.\n\nIf all else fails, email roman.perepelitsa@gmail.com.\n\nIf necessary, encrypt your communication with [this PGP key](\n  https://api.github.com/users/romkatv/gpg_keys).\n\n### Which aspects of shell and terminal does Powerlevel10k affect?\n\nPowerlevel10k defines prompt and nothing else. It sets [prompt-related options](\n  http://zsh.sourceforge.net/Doc/Release/Options.html#Prompting), and parameters `PS1` and `RPS1`.\n\n![Prompt Highlight](\n  https://raw.githubusercontent.com/romkatv/powerlevel10k-media/master/prompt-highlight.png)\n\nEverything within the highlighted areas on the screenshot is produced by Powerlevel10k.\nPowerlevel10k has no control over the terminal content or colors outside these areas.\n\nPowerlevel10k does not affect:\n\n- Terminal window/tab title.\n- Colors used by `ls`.\n- The behavior of `git` command.\n- The content and style of <kbd>Tab</kbd> completions.\n- Command line colors (syntax highlighting, autosuggestions, etc.).\n- Key bindings.\n- Aliases.\n- Prompt parameters other than `PS1` and `RPS1`.\n- Zsh options other than those [related to prompt](\n    http://zsh.sourceforge.net/Doc/Release/Options.html#Prompting).\n- The set of available commands. Powerlevel10k does not install any new commands\n  with the only exception of `p10k`.\n\n### I'm using Powerlevel9k with Oh My Zsh. How do I migrate?\n\n1. Run this command:\n```zsh\n# Add powerlevel10k to the list of Oh My Zsh themes.\ngit clone --depth=1 https://github.com/romkatv/powerlevel10k.git $ZSH_CUSTOM/themes/powerlevel10k\n# Replace ZSH_THEME=\"powerlevel9k/powerlevel9k\" with ZSH_THEME=\"powerlevel10k/powerlevel10k\".\nsed -i.bak 's/powerlevel9k/powerlevel10k/g' ~/.zshrc\n# Restart Zsh.\nexec zsh\n```\n2. *Optional but highly recommended:*\n   1. Install [the recommended font](#meslo-nerd-font-patched-for-powerlevel10k).\n   1. Type `p10k configure` and choose your favorite prompt style.\n\n*Related:*\n  - [Powerlevel9k compatibility.](#powerlevel9k-compatibility)\n  - [Does Powerlevel10k always render exactly the same prompt as Powerlevel9k given the same config?](\n      #does-powerlevel10k-always-render-exactly-the-same-prompt-as-powerlevel9k-given-the-same-config)\n  - [Extra or missing spaces in prompt compared to Powerlevel9k.](\n      #extra-or-missing-spaces-in-prompt-compared-to-powerlevel9k)\n  - [Configuration wizard.](#configuration-wizard)\n\n### Is it really fast?\n\nYes. See [zsh-bench](https://github.com/romkatv/zsh-bench) or a direct comparison with\n[Powerlevel9k](https://asciinema.org/a/NHRjK3BMePw66jtRVY2livHwZ) and\n[Spaceship](https://asciinema.org/a/253094).\n\n### <a name='how-do-i-enable-instant-prompt'></a>How do I configure instant prompt?\n\nSee [instant prompt](#instant-prompt) to learn about instant prompt. This section explains how you\ncan enable and configure it and lists caveats that you should be aware of.\n\nInstant prompt can be enabled either through `p10k configure` or by manually adding the following\ncode snippet at the top of `~/.zshrc`:\n\n```zsh\n# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.\n# Initialization code that may require console input (password prompts, [y/n]\n# confirmations, etc.) must go above this block; everything else may go below.\nif [[ -r \"${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh\" ]]; then\n  source \"${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh\"\nfi\n```\n\nIt's important that you copy the lines verbatim. Don't replace `source` with something else, don't\ncall `zcompile`, don't redirect output, etc.\n\nWhen instant prompt is enabled, for the duration of Zsh initialization standard input is redirected\nto `/dev/null` and standard output with standard error are redirected to a temporary file. Once Zsh\nis fully initialized, standard file descriptors are restored and the content of the temporary file\nis printed out.\n\nWhen using instant prompt, you should carefully check any output that appears on Zsh startup as it\nmay indicate that initialization has been altered, or perhaps even broken, by instant prompt.\nInitialization code that may require console input, such as asking for a keyring password or for a\n*[y/n]* confirmation, must be moved above the instant prompt preamble in `~/.zshrc`. Initialization\ncode that merely prints to console but never reads from it will work correctly with instant prompt,\nalthough output that normally has colors may appear uncolored. You can either leave it be, suppress\nthe output, or move it above the instant prompt preamble.\n\nHere's an example of `~/.zshrc` that breaks when instant prompt is enabled:\n\n```zsh\nif [[ -r \"${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh\" ]]; then\n  source \"${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh\"\nfi\n\nkeychain id_rsa --agents ssh  # asks for password\nchatty-script                 # spams to stdout even when everything is fine\n# ...\n```\n\nFixed version:\n\n```zsh\nkeychain id_rsa --agents ssh  # moved before instant prompt\n\n# OK to perform console I/O before this point.\nif [[ -r \"${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh\" ]]; then\n  source \"${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh\"\nfi\n# From this point on, until zsh is fully initialized, console input won't work and\n# console output may appear uncolored.\n\nchatty-script >/dev/null      # spam output suppressed\n# ...\n```\n\nIf `POWERLEVEL9K_INSTANT_PROMPT` is unset or set to `verbose`, Powerlevel10k will print a warning\nwhen it detects console output during initialization to bring attention to potential issues. You can\nsilence this warning (without suppressing console output) with `POWERLEVEL9K_INSTANT_PROMPT=quiet`.\nThis is recommended if some initialization code in `~/.zshrc` prints to console and it's infeasible\nto move it above the instant prompt preamble or to suppress its output. You can completely disable\ninstant prompt with `POWERLEVEL9K_INSTANT_PROMPT=off`. Do this if instant prompt breaks Zsh\ninitialization and you don't know how to fix it.\n\nThe value of `POWERLEVEL9K_INSTANT_PROMPT` can be changed by running `p10k configure` and selecting\nthe appropriate option on the *Instant Prompt* screen. Alternatively, you can search for\n`POWERLEVEL9K_INSTANT_PROMPT` in the existing `~/.p10k.zsh` and change its value there.\n\n*Note*: Instant prompt requires Zsh >= 5.4. It's OK to enable it even when using an older version of\nZsh but it won't do anything.\n\n*FAQ*:\n\n- [How do I initialize direnv when using instant prompt?](\n    #how-do-i-initialize-direnv-when-using-instant-prompt)\n- [How do I export GPG_TTY when using instant prompt?](\n    #how-do-i-export-gpg_tty-when-using-instant-prompt)\n\n### How do I initialize direnv when using instant prompt?\n\nIf you've enabled [instant prompt](#instant-prompt), you should have these lines at the top of\n`~/.zshrc`:\n\n```zsh\nif [[ -r \"${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh\" ]]; then\n  source \"${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh\"\nfi\n```\n\nTo initialize direnv you need to add one line above that block and one line below it.\n\n```zsh\n(( ${+commands[direnv]} )) && emulate zsh -c \"$(direnv export zsh)\"\n\nif [[ -r \"${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh\" ]]; then\n  source \"${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh\"\nfi\n\n(( ${+commands[direnv]} )) && emulate zsh -c \"$(direnv hook zsh)\"\n```\n\n*Related*: [How do I export GPG_TTY when using instant prompt?](\n  #how-do-i-export-gpg_tty-when-using-instant-prompt)\n\n### How do I export GPG_TTY when using instant prompt?\n\nYou can export `GPG_TTY` like this anywhere in `~/.zshrc`:\n\n```zsh\nexport GPG_TTY=$TTY\n```\n\nThis works whether you are using [instant prompt](#instant-prompt) or not. It works even if you\naren't using powerlevel10k. As an extra bonus, it's much faster than the commonly used\n`export GPG_TTY=$(tty)`.\n\n*Related*: [How do I initialize direnv when using instant prompt?](\n  #how-do-i-initialize-direnv-when-using-instant-prompt)\n\n### What do different symbols in Git status mean?\n\nWhen using Lean, Classic or Rainbow style, Git status may look like this:\n\n```text\nfeature:master wip ‚á£42‚á°42 ‚á†42‚á¢42 *42 merge ~42 +42 !42 ?42\n```\n\n| Symbol    | Meaning                                                              | Source                                                 |\n| --------- | -------------------------------------------------------------------- | ------------------------------------------------------ |\n| `feature` | current branch; replaced with `#tag` or `@commit` if not on a branch | `git status --ignore-submodules=dirty`                 |\n| `master`  | remote tracking branch; only shown if different from local branch    | `git rev-parse --abbrev-ref --symbolic-full-name @{upstream}` |\n| `wip`     | the latest commit's summary contains \"wip\" or \"WIP\"                  | `git show --pretty=%s --no-patch HEAD`                 |\n| `=`       | up to date with the remote (neither ahead nor behind)                | `git rev-list --count HEAD...@{upstream}`              |\n| `‚á£42`     | this many commits behind the remote                                  | `git rev-list --right-only --count HEAD...@{upstream}` |\n| `‚á°42`     | this many commits ahead of the remote                                | `git rev-list --left-only --count HEAD...@{upstream}`  |\n| `‚á†42`     | this many commits behind the push remote                             | `git rev-list --right-only --count HEAD...@{push}`     |\n| `‚á¢42`     | this many commits ahead of the push remote                           | `git rev-list --left-only --count HEAD...@{push}`      |\n| `*42`     | this many stashes                                                    | `git stash list`                                       |\n| `merge`   | repository state                                                     | `git status --ignore-submodules=dirty`                 |\n| `~42`     | this many merge conflicts                                            | `git status --ignore-submodules=dirty`                 |\n| `+42`     | this many staged changes                                             | `git status --ignore-submodules=dirty`                 |\n| `!42`     | this many unstaged changes                                           | `git status --ignore-submodules=dirty`                 |\n| `?42`     | this many untracked files                                            | `git status --ignore-submodules=dirty`                 |\n| `‚îÄ`       | the number of staged, unstaged or untracked files is unknown         | `echo $POWERLEVEL9K_VCS_MAX_INDEX_SIZE_DIRTY` or `git config --get bash.showDirtyState` |\n\n*Related*: [How do I change the format of Git status?](#how-do-i-change-the-format-of-git-status)\n\n### How do I change the format of Git status?\n\nTo change the format of Git status, open `~/.p10k.zsh`, search for `my_git_formatter` and edit its\nsource code.\n\n*Related*: [What do different symbols in Git status mean?](\n  #what-do-different-symbols-in-git-status-mean)\n\n### Why is Git status from `$HOME/.git` not displayed in prompt?\n\nWhen using Lean, Classic or Rainbow style, `~/.p10k.zsh` contains the following parameter:\n\n```zsh\n# Don't show Git status in prompt for repositories whose workdir matches this pattern.\n# For example, if set to '~', the Git repository at $HOME/.git will be ignored.\n# Multiple patterns can be combined with '|': '~(|/foo)|/bar/baz/*'.\ntypeset -g POWERLEVEL9K_VCS_DISABLED_WORKDIR_PATTERN='~'\n```\n\nTo see Git status for `$HOME/.git` in prompt, open `~/.p10k.zsh` and remove\n`POWERLEVEL9K_VCS_DISABLED_WORKDIR_PATTERN`.\n\n### Why does Git status sometimes appear grey and then gets colored after a short period of time?\n\ntl;dr: When Git status in prompt is greyed out, it means Powerlevel10k is currently computing\nup-to-date Git status in the background. Prompt will get automatically refreshed when this\ncomputation completes.\n\nWhen your current directory is within a Git repository, Powerlevel10k computes up-to-date Git\nstatus after every command. If the repository is large, or the machine is slow, this computation\ncan take quite a bit of time. If it takes longer than 10 milliseconds (configurable via\n`POWERLEVEL9K_VCS_MAX_SYNC_LATENCY_SECONDS`), Powerlevel10k displays the last known Git status in\ngrey and continues to compute up-to-date Git status in the background. When the computation\ncompletes, Powerlevel10k refreshes prompt with new information, this time with colored Git status.\n\nWhen using *Rainbow* style, Git status is displayed as black on grey while it's still being\ncomputed. Depending on the terminal color palette, this may be difficult to read. In this case you\nmight want to change the background color to something lighter for more contrast. To do that, open\n`~/.p10k.zsh`, search for `POWERLEVEL9K_VCS_LOADING_BACKGROUND`, uncomment it if it's commented out,\nand change the value.\n\n```zsh\ntypeset -g POWERLEVEL9K_VCS_LOADING_BACKGROUND=244\n```\n\nType `source ~/.p10k.zsh` to apply your changes to the current Zsh session.\n\n*Related*: [How do I change prompt colors?](#how-do-i-change-prompt-colors)\n\n### How do I add username and/or hostname to prompt?\n\nWhen using Lean, Classic or Rainbow style, prompt shows `username@hostname` when you are logged in\nas root or via SSH. There is little value in showing `username` or `hostname` when you are logged in\nto your local machine as a normal user. So the absence of `username@hostname` in your prompt is an\nindication that you are working locally and that you aren't root. You can change it, however.\n\nOpen `~/.p10k.zsh`. Close to the top you can see the most important parameters that define which\nsegments are shown in your prompt. All generally useful prompt segments are listed in there. Some of\nthem are enabled, others are commented out. One of them is of interest to you.\n\n```zsh\ntypeset -g POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(\n  ...\n  context  # user@hostname\n  ...\n)\n```\n\nSearch for `context` to find the section in the config that lists parameters specific to this prompt\nsegment. You should see the following lines:\n\n```zsh\n# Don't show context unless running with privileges or in SSH.\n# Tip: Remove the next line to always show context.\ntypeset -g POWERLEVEL9K_CONTEXT_{DEFAULT,SUDO}_{CONTENT,VISUAL_IDENTIFIER}_EXPANSION=\n```\n\nIf you follow the tip and remove (or comment out) the last line, you'll always see\n`username@hostname` in prompt. You can change the format to just `username`, or change the color, by\nadjusting the values of parameters nearby. There are plenty of comments to help you navigate.\n\nYou can also move `context` to a different position in `POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS` or even\nto `POWERLEVEL9K_LEFT_PROMPT_ELEMENTS`.\n\n### Why some prompt segments appear and disappear as I'm typing?\n\nPrompt segments can be configured to be shown only when the current command you are typing invokes\na relevant tool.\n\n```zsh\n# Show prompt segment \"kubecontext\" only when the command you are typing invokes\n# invokes kubectl, helm, or kubens.\ntypeset -g POWERLEVEL9K_KUBECONTEXT_SHOW_ON_COMMAND='kubectl|helm|kubens'\n```\n\nConfigs created by `p10k configure` may contain parameters of this kind. To customize when different\nprompt segments are shown, open `~/.p10k.zsh`, search for `SHOW_ON_COMMAND` and either remove these\nparameters or change their values.\n\nYou can also define a function in `~/.zshrc` to toggle the display of a prompt segment between\n*always* and *on command*. This is similar to `kubeon`/`kubeoff` from\n[kube-ps1](https://github.com/jonmosco/kube-ps1).\n\n```zsh\nfunction kube-toggle() {\n  if (( ${+POWERLEVEL9K_KUBECONTEXT_SHOW_ON_COMMAND} )); then\n    unset POWERLEVEL9K_KUBECONTEXT_SHOW_ON_COMMAND\n  else\n    POWERLEVEL9K_KUBECONTEXT_SHOW_ON_COMMAND='kubectl|helm|kubens'\n  fi\n  p10k reload\n  if zle; then\n    zle push-input\n    zle accept-line\n  fi\n}\n```\n\nInvoke this function by typing `kube-toggle`. You can also bind it to a key by adding two more lines\nto `~/.zshrc`:\n\n```zsh\nzle -N kube-toggle\nbindkey '^]' kube-toggle  # ctrl-] to toggle kubecontext in powerlevel10k prompt\n```\n\n### How do I change prompt colors?\n\nYou can either [change the color palette used by your terminal](\n  #change-the-color-palette-used-by-your-terminal) or\n[set colors through Powerlevel10k configuration parameters](\n  #set-colors-through-Powerlevel10k-configuration-parameters).\n\n#### Change the color palette used by your terminal\n\nHow exactly you change the terminal color palette (a.k.a. color scheme, or theme) depends on the\nkind of terminal you are using. Look around in terminal's settings/preferences or consult\ndocumentation.\n\nWhen you change the terminal color palette, it usually affects only the first 16 colors, numbered\nfrom 0 to 15. In order to see any effect on Powerlevel10k prompt, you need to use prompt style that\nutilizes these low-numbered colors. Type `p10k configure` and select *Rainbow*, *Lean* ‚Üí *8 colors*\nor *Pure* ‚Üí *Original*. Other styles use higher-numbered colors, so they look the same in any\nterminal color palette.\n\n#### Set colors through Powerlevel10k configuration parameters\n\nOpen `~/.p10k.zsh`, search for \"color\", \"foreground\" and \"background\" and change values of\nappropriate parameters. For example, here's how you can set the foreground of `time` prompt segment\nto bright red:\n\n```zsh\ntypeset -g POWERLEVEL9K_TIME_FOREGROUND=160\n```\n\nColors are specified using numbers from 0 to 255. Colors from 0 to 15 look differently in different\nterminals. Many terminals also support customization of these colors through color palettes\n(a.k.a. color schemes, or themes). Colors from 16 to 255 always look the same.\n\nType `source ~/.p10k.zsh` to apply your changes to the current Zsh session.\n\nTo see how different numbered colors look in your terminal, run the following command:\n\n```zsh\nfor i in {0..255}; do print -Pn \"%K{$i}  %k%F{$i}${(l:3::0:)i}%f \" ${${(M)$((i%6)):#3}:+$'\\n'}; done\n```\n\nIf your terminal supports truecolor, you can use 24-bit colors in the `#RRGGBB` format in addition\nto the numbered colors.\n\n```zsh\ntypeset -g POWERLEVEL9K_TIME_FOREGROUND='#FF0000'\n```\n\n*Related:*\n  - [Directory is difficult to see in prompt when using Rainbow style.](\n      #directory-is-difficult-to-see-in-prompt-when-using-rainbow-style)\n  - [Incorrect foreground color in VSCode Terminal.](#incorrect-foreground-color-in-vscode-terminal)\n\nBy default, VSCode Terminal may arbitrarily replace the foreground color of your choice with a\ndifferent color. This behavior can be\n[turned off](https://code.visualstudio.com/docs/terminal/appearance#_minimum-contrast-ratio) in\nVSCode settings.\n\n### Why does Powerlevel10k spawn extra processes?\n\nPowerlevel10k uses [gitstatus](https://github.com/romkatv/gitstatus) as the backend behind `vcs`\nprompt; gitstatus spawns `gitstatusd` and `zsh`. See\n[gitstatus](https://github.com/romkatv/gitstatus) for details. Powerlevel10k may also spawn `zsh`\nto perform computation without blocking prompt. To avoid security hazard, these background processes\naren't shared by different interactive shells. They terminate automatically when the parent `zsh`\nprocess terminates or runs `exec(3)`.\n\n### Are there configuration options that make Powerlevel10k slow?\n\nNo, Powerlevel10k is always fast, with any configuration you throw at it. If you have noticeable\nprompt latency when using Powerlevel10k, please\n[open an issue](https://github.com/romkatv/powerlevel10k/issues).\n\n### Is Powerlevel10k fast to load?\n\nYes. See [zsh-bench](https://github.com/romkatv/zsh-bench).\n\n### What is the relationship between Powerlevel9k and Powerlevel10k?\n\nPowerlevel10k was forked from Powerlevel9k in March 2019 after a week-long discussion in\n[powerlevel9k#1170](https://github.com/Powerlevel9k/powerlevel9k/issues/1170). Powerlevel9k was\nalready a mature project with a large user base and a release cycle measured in months. Powerlevel10k\nwas spun off to iterate on performance improvements and new features at much higher pace.\n\nPowerlevel9k and Powerlevel10k are independent projects. When using one, you shouldn't install the\nother. Issues should be filed against the project that you actually use. There are no individuals\nthat have commit rights in both repositories. All bug fixes and new features committed to\nPowerlevel9k repository get ported to Powerlevel10k.\n\nOver time, virtually all code in Powerlevel10k has been rewritten. There is currently no meaningful\noverlap between the implementations of Powerlevel9k and Powerlevel10k.\n\nPowerlevel10k is committed to maintaining backward compatibility with all configs indefinitely. This\ncommitment covers all configuration parameters recognized by Powerlevel9k (see\n[Powerlevel9k compatibility](#powerlevel9k-compatibility)) and additional parameters that only\nPowerlevel10k understands. Names of all parameters in Powerlevel10k start with `POWERLEVEL9K_` for\nconsistency.\n\n### Does Powerlevel10k always render exactly the same prompt as Powerlevel9k given the same config?\n\nAlmost. There are a few differences.\n\n- By default only `git` vcs backend is enabled in Powerlevel10k. If you need `svn` and `hg`, add\n  them to `POWERLEVEL9K_VCS_BACKENDS`. These backends aren't yet optimized in Powerlevel10k, so\n  enabling them will make prompt *very slow*.\n- Powerlevel10k doesn't support `POWERLEVEL9K_VCS_SHOW_SUBMODULE_DIRTY=true`.\n- Powerlevel10k strives to be bug-compatible with Powerlevel9k but not when it comes to egregious\n  bugs. If you accidentally rely on these bugs, your prompt will differ between Powerlevel9k and\n  Powerlevel10k. Some examples:\n  - Powerlevel9k ignores some options that are set after the theme is sourced while Powerlevel10k\n    respects all options. If you see different icons in Powerlevel9k and Powerlevel10k, you've\n    probably defined `POWERLEVEL9K_MODE` before sourcing the theme. This parameter gets ignored\n    by Powerlevel9k but honored by Powerlevel10k. If you want your prompt to look in Powerlevel10k\n    the same as in Powerlevel9k, remove `POWERLEVEL9K_MODE`.\n  - Powerlevel9k doesn't respect `ZLE_RPROMPT_INDENT`. As a result, right prompt in Powerlevel10k\n    can have an extra space at the end compared to Powerlevel9k. Set `ZLE_RPROMPT_INDENT=0` if you\n    don't want that space. More details in\n    [troubleshooting](#extra-space-without-background-on-the-right-side-of-right-prompt).\n  - Powerlevel9k has inconsistent spacing around icons. This was fixed in Powerlevel10k. Set\n    `POWERLEVEL9K_LEGACY_ICON_SPACING=true` to get the same spacing as in Powerlevel9k.  More\n    details in [troubleshooting](#extra-or-missing-spaces-around-icons).\n  - There are dozens more bugs in Powerlevel9k that don't exist in Powerlevel10k.\n\nIf you notice any other changes in prompt appearance when switching from Powerlevel9k to\nPowerlevel10k, please [open an issue](https://github.com/romkatv/powerlevel10k/issues).\n\n### What is the best prompt style in the configuration wizard?\n\nThere are as many opinions on what constitutes the best prompt as there are people. It mostly comes\ndown to personal preference. There are, however, a few hidden implications of different choices.\n\nPure style is an exact replication of [Pure Zsh theme](https://github.com/sindresorhus/pure). It\nexists to ease the migration for users of this theme. Unless you are one of them, choose Lean\nstyle over Pure.\n\nIf you want to confine prompt colors to the selected terminal color palette (say, *Solarized Dark*),\nuse *Rainbow*, *Lean* ‚Üí *8 colors* or *Pure* ‚Üí *Original*. Other styles use fixed colors and thus\nlook the same in any terminal color palette.\n\nAll styles except Pure have an option to use *ASCII* charset. Prompt will look less pretty but will\nrender correctly with all fonts and in all locales.\n\nIf you enable transient prompt, take advantage of two-line prompt. You'll get the benefit of\nextra space for typing commands without the usual drawback of reduced scrollback density. Having\nall commands start from the same offset is also nice.\n\nSimilarly, if you enable transient prompt, sparse prompt (with an empty line before prompt) is a\ngreat choice.\n\nIf you are using vi keymap, choose prompt with `prompt_char` in it (shown as green `‚ùØ` in the\nwizard). This symbol changes depending on vi mode: `‚ùØ`, `‚ùÆ`, `V`, `‚ñ∂` for insert, command, visual\nand replace mode respectively. When a command fails, the symbol turns red. *Lean* style always has\n`prompt_char` in it. *Rainbow* and *Classic* styles have it only in the two-line configuration\nwithout left frame.\n\nIf you value horizontal space or prefer minimalist aesthetics:\n\n- Use a monospace font, such as [the recommended font](#meslo-nerd-font-patched-for-powerlevel10k).\n  Non-monospace fonts require extra space after icons that are larger than a single column.\n- Use Lean style. Compared to Classic and Rainbow, it saves two characters per prompt segment.\n- Disable *current time* and *frame*.\n- Use *few icons*. The extra icons enabled by the *many icons* option primarily serve decorative\n  function. Informative icons, such as background job indicator, will be shown either way.\n\n*Note*: You can run configuration wizard as many times as you like. Type `p10k configure` to try new\nprompt style.\n\n### How to make Powerlevel10k look like robbyrussell Oh My Zsh theme?\n\nUse [this config](\n  https://github.com/romkatv/powerlevel10k/blob/master/config/p10k-robbyrussell.zsh).\n\nYou can either download it, save as `~/.p10k.zsh` and `source ~/.p10k.zsh` from `~/.zshrc`, or\nsource `p10k-robbyrussell.zsh` directly from your cloned `powerlevel10k` repository.\n\n### Can prompts for completed commands display error status for *those* commands instead of the commands preceding them?\n\nNo. When you hit *ENTER* and the command you've typed starts running, its error status isn't yet\nknown, so it cannot be shown in prompt. When the command completes, the error status gets known but\nit's no longer possible to update prompt for *that* command. This is why the error status for every\ncommand is reflected in the *next* prompt.\n\nFor details, see [this post on /r/zsh](\nhttps://www.reddit.com/r/zsh/comments/eg49ff/powerlevel10k_prompt_history_exit_code_colors/fc5huku).\n\n### What is the minimum supported Zsh version?\n\nZsh 5.3 or newer should work. Fast startup requires Zsh >= 5.4.\n\n### How were these screenshots and animated gifs created?\n\nAll screenshots and animated gifs were recorded in GNOME Terminal with\n[the recommended font](#meslo-nerd-font-patched-for-powerlevel10k) and Tango Dark color palette with\ncustom background color (`#171A1B` instead of `#2E3436` -- twice as dark).\n\n![GNOME Terminal Color Settings](\n  https://raw.githubusercontent.com/romkatv/powerlevel10k-media/master/gnome-terminal-colors.png)\n\nSyntax highlighting, where present, was provided by [zsh-syntax-highlighting](\n  https://github.com/zsh-users/zsh-syntax-highlighting).\n\n### How was the recommended font created?\n\n[The recommended font](#meslo-nerd-font-patched-for-powerlevel10k) is the product of many\nindividuals. Its origin is *Bitstream Vera Sans Mono*, which has given birth to *Menlo*, which in\nturn has spawned *Meslo*. Finally, extra glyphs have been added to *Meslo* with scripts forked\nfrom Nerd Fonts. The final font is released under the terms of\n[Apache License](\n  https://raw.githubusercontent.com/romkatv/powerlevel10k-media/master/MesloLGS%20NF%20License.txt).\n\nMesloLGS NF font can be recreated with the following command (requires `git` and `docker`):\n\n```zsh\ngit clone --depth=1 https://github.com/romkatv/nerd-fonts.git\ncd nerd-fonts\n./build 'Meslo/S/*'\n```\n\nIf everything goes well, four `ttf` files will appear in `./out`.\n\n### How to package Powerlevel10k for distribution?\n\nIt's currently neither easy nor recommended to package and distribute Powerlevel10k. There are no\ninstructions you can follow that would allow you to easily update your package when new versions of\nPowerlevel10k are released. This may change in the future but not soon.\n\n## Troubleshooting\n\n- [`[oh-my-zsh] theme 'powerlevel10k/powerlevel10k' not found`](#oh-my-zsh-theme-powerlevel10kpowerlevel10k-not-found)\n- [Question mark in prompt](#question-mark-in-prompt)\n- [Icons, glyphs or powerline symbols don't render](#icons-glyphs-or-powerline-symbols-dont-render)\n- [Sub-pixel imperfections around powerline symbols](#sub-pixel-imperfections-around-powerline-symbols)\n- [Error: character not in range](#error-character-not-in-range)\n- [Cursor is in the wrong place](#cursor-is-in-the-wrong-place)\n- [Prompt wrapping around in a weird way](#prompt-wrapping-around-in-a-weird-way)\n- [Right prompt is in the wrong place](#right-prompt-is-in-the-wrong-place)\n- [Configuration wizard runs automatically every time Zsh is started](#configuration-wizard-runs-automatically-every-time-zsh-is-started)\n- [Some prompt styles are missing from the configuration wizard](#some-prompt-styles-are-missing-from-the-configuration-wizard)\n- [Cannot install the recommended font](#cannot-install-the-recommended-font)\n- [Extra or missing spaces in prompt compared to Powerlevel9k](#extra-or-missing-spaces-in-prompt-compared-to-powerlevel9k)\n  - [Extra space without background on the right side of right prompt](#extra-space-without-background-on-the-right-side-of-right-prompt)\n  - [Extra or missing spaces around icons](#extra-or-missing-spaces-around-icons)\n- [Weird things happen after typing `source ~/.zshrc`](#weird-things-happen-after-typing-source-zshrc)\n- [Transient prompt stops working after some time](#transient-prompt-stops-working-after-some-time)\n- [Cannot make Powerlevel10k work with my plugin manager](#cannot-make-powerlevel10k-work-with-my-plugin-manager)\n- [Directory is difficult to see in prompt when using Rainbow style](#directory-is-difficult-to-see-in-prompt-when-using-rainbow-style)\n- [Incorrect foreground color in VSCode Terminal.](#incorrect-foreground-color-in-vscode-terminal)\n- [Horrific mess when resizing terminal window](#horrific-mess-when-resizing-terminal-window)\n- [Icons cut off in Konsole](#icons-cut-off-in-konsole)\n- [Arch Linux logo has a dot in the bottom right corner](#arch-linux-logo-has-a-dot-in-the-bottom-right-corner)\n- [Incorrect git status in prompt](#incorrect-git-status-in-prompt)\n\n### `[oh-my-zsh] theme 'powerlevel10k/powerlevel10k' not found`\n\nWhen opening a terminal, or starting zsh manually, you may encounter this error message:\n\n```text\n[oh-my-zsh] theme 'powerlevel10k/powerlevel10k' not found\n```\n\n1. First, run `typeset -p P9K_VERSION` to check whether Powerlevel10k has been loaded.\n   - If `typeset -p P9K_VERSION` succeeds and prints something like `typeset P9K_VERSION=1.19.14`\n     (the version could be different), remove the following line from `~/.zshrc`:\n     ```zsh\n     ZSH_THEME=\"powerlevel10k/powerlevel10k\"\n     ```\n   - If `typeset -p P9K_VERSION` fails with the error `typeset: no such variable: P9K_VERSION`, run\n     the following command:\n     ```zsh\n     git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k\n     ```\n2. Restart Zsh with `exec zsh`.\n\n### Question mark in prompt\n\nIf it looks like a regular `?`, that's normal. It means you have untracked files in the current Git\nrepository. Type `git status` to see these files. You can change this symbol or disable the display\nof untracked files altogether. Search for `untracked files` in `~/.p10k.zsh`.\n\n*FAQ*: [What do different symbols in Git status mean?](\n  #what-do-different-symbols-in-git-status-mean)\n\nYou can also get a weird-looking question mark in your prompt if your terminal's font is missing\nsome glyphs. See [icons, glyphs or powerline symbols don't render](\n  #icons-glyphs-or-powerline-symbols-dont-render).\n\n### Icons, glyphs or powerline symbols don't render\n\nRestart your terminal, [install the recommended font](#meslo-nerd-font-patched-for-powerlevel10k)\nand run `p10k configure`.\n\n### Sub-pixel imperfections around powerline symbols\n\n![Powerline Prompt Imperfections](\n  https://raw.githubusercontent.com/romkatv/powerlevel10k-media/master/powerline-imperfections.png)\n\nThere are three imperfections on the screenshot. From left to right:\n\n1. A thin blue line (a sub-pixel gap) between the content of a prompt segment and the following\npowerline connection.\n1. Incorrect alignment of a powerline connection and the following prompt segment. The connection\nappears shifted to the right.\n1. A thin red line below a powerline connection. The connection appears shifted up.\n\nZsh themes don't have down-to-pixel control over the terminal content. Everything you see on the\nscreen is made of monospace characters. A white powerline prompt segment is made of text on white\nbackground followed by U+E0B0 (a right-pointing triangle).\n\n![Powerline Prompt Imperfections](\n  https://raw.githubusercontent.com/romkatv/powerlevel10k-media/master/powerline-anatomy.png)\n\nIf Powerlevel10k prompt has imperfections around powerline symbols, you'll see exactly the same\nimperfections with all powerline themes (Agnoster, Powerlevel9k, Powerline, etc.)\n\nThere are several things you can try to deal with these imperfections:\n\n- Try [the recommended font](#meslo-nerd-font-patched-for-powerlevel10k). If you are already using\n  it, switching to another font may help but is unlikely.\n- Change terminal font size one point up or down. For example, in iTerm2 powerline prompt looks\n  perfect at font sizes 11 and 13 but breaks down at 12.\n- Enable builtin powerline glyphs in terminal settings if your terminal supports it (iTerm2 does).\n- Change font hinting and/or anti-aliasing mode in the terminal settings.\n- Shift all text one pixel up/down/left/right if your terminal has an option to do so.\n- Try a different terminal.\n\nA more radical solution is to switch to prompt style without background. Type `p10k configure` and\nselect *Lean*. This style has a modern lightweight look. As a bonus, it doesn't suffer from\nrendering imperfections that afflict powerline-style prompt.\n\n### Error: character not in range\n\nType `echo '\\u276F'`. If you get an error saying \"zsh: character not in range\", your locale\ndoesn't support UTF-8. You need to fix it. If you are running Zsh over SSH, see\n[this](https://github.com/romkatv/powerlevel10k/issues/153#issuecomment-518347833). If you are\nrunning Zsh locally, Google \"set UTF-8 locale in *your OS*\".\n\n### Cursor is in the wrong place\n\nType `echo '\\u276F'`. If you get an error saying \"zsh: character not in range\", see the\n[previous section](#zsh-character-not-in-range).\n\nIf the `echo` command prints `‚ùØ` but the cursor is still in the wrong place, install\n[the recommended font](#meslo-nerd-font-patched-for-powerlevel10k) and run\n`p10k configure`.\n\nIf this doesn't help, add `unset ZLE_RPROMPT_INDENT` at the bottom of `~/.zshrc`.\n\nStill having issues? Run the following command to diagnose the problem:\n\n```zsh\n() {\n  emulate -L zsh\n  setopt err_return no_unset\n  local text\n  print -rl -- 'Select a part of your prompt from the terminal window and paste it below.' ''\n  read -r '?Prompt: ' text\n  local -i len=${(m)#text}\n  local frame=\"+-${(pl.$len..-.):-}-+\"\n  print -lr -- $frame \"| $text |\" $frame\n}\n```\n\n#### If the prompt line aligns with the frame\n\n```text\n+------------------------------+\n| romka@adam ‚úì ~/powerlevel10k |\n+------------------------------+\n```\n\nIf the output of the command is aligned for every part of your prompt (left and right), this\nindicates a bug in the theme or your config. Use this command to diagnose it:\n\n```zsh\nprint -rl -- ${(eq+)PROMPT} ${(eq+)RPROMPT}\n```\n\nLook for `%{...%}` and backslash escapes in the output. If there are any, they are the likely\nculprits. Open an issue if you get stuck.\n\n#### If the prompt line is longer than the frame\n\n```text\n+-----------------------------+\n| romka@adam ‚úì ~/powerlevel10k |\n+-----------------------------+\n```\n\nThis is usually caused by a terminal bug or misconfiguration that makes it print ambiguous-width\ncharacters as double-width instead of single width. For example,\n[this issue](https://github.com/romkatv/powerlevel10k/issues/165).\n\n#### If the prompt line is shorter than the frame and is mangled\n\n```text\n+------------------------------+\n| romka@adam ‚úì~/powerlevel10k |\n+------------------------------+\n```\n\nNote that this prompt is different from the original as it's missing a space after the check mark.\n\nThis can be caused by a low-level bug in macOS. See\n[this issue](https://github.com/romkatv/powerlevel10k/issues/241).\n\nThis can also happen if prompt contains glyphs designated as \"wide\" in the Unicode standard and your\nterminal incorrectly displays them as non-wide. Terminals suffering from this limitation include\nKonsole, Hyper and the integrated VSCode Terminal. The solution is to use a different terminal or\nremove all wide glyphs from prompt.\n\n#### If the prompt line is shorter than the frame and is not mangled\n\n```text\n+--------------------------------+\n| romka@adam ‚úì ~/powerlevel10k |\n+--------------------------------+\n```\n\nThis can be caused by misconfigured locale. See\n[this issue](https://github.com/romkatv/powerlevel10k/issues/251).\n\n### Prompt wrapping around in a weird way\n\nSee [cursor is in the wrong place](#cursor-is-in-the-wrong-place).\n\n### Right prompt is in the wrong place\n\nSee [cursor is in the wrong place](#cursor-is-in-the-wrong-place).\n\n### Configuration wizard runs automatically every time Zsh is started\n\nWhen Powerlevel10k starts, it automatically runs `p10k configure` if no `POWERLEVEL9K_*`\nparameters are defined. Based on your prompt style choices, the configuration wizard creates\n`~/.p10k.zsh` with a bunch of `POWERLEVEL9K_*` parameters in it and adds a line to `~/.zshrc` to\nsource this file. The next time you start Zsh, the configuration wizard shouldn't run automatically.\nIf it does, this means the evaluation of `~/.zshrc` terminates prematurely before it reaches the\nline that sources `~/.p10k.zsh`. This most often happens due to syntax errors in `~/.zshrc`. These\nerrors get hidden by the configuration wizard screen, so you don't notice them. When you exit\nconfiguration wizard, look for error messages. You can also use\n`POWERLEVEL9K_DISABLE_CONFIGURATION_WIZARD=true zsh` to start Zsh without automatically running the\nconfiguration wizard. Once you can see the errors, fix `~/.zshrc` to get rid of them.\n\n### Some prompt styles are missing from the configuration wizard\n\nIf Zsh version is below 5.7.1 or `COLORTERM` environment variable is neither `24bit` nor\n`truecolor`, configuration wizard won't offer Pure style with Snazzy color scheme. *Fix*: Install\nZsh >= 5.7.1 and use a terminal with truecolor support. Verify with `print -P '%F{#ff0000}red%f'`.\n\nIf the terminal can display fewer than 256 colors, configuration wizard preselects Lean style with\n8 colors. All other styles require at least 256 colors. *Fix*: Use a terminal with 256 color support\nand make sure that `TERM` environment variable is set correctly. Verify with\n`print $terminfo[colors]`.\n\nIf there is no UTF-8 locale on the system, configuration wizard won't offer prompt styles that use\nUnicode characters. *Fix*: Install a UTF-8 locale. Verify with `locale -a`.\n\nAnother case in which configuration wizard may not offer Unicode prompt styles is when the\n`MULTIBYTE` shell option is disabled. *Fix*: Enable the `MULTIBYTE` option, or rather don't disable\nit (this option is enabled in Zsh by default). Verify with `print -r -- ${options[MULTIBYTE]}`.\n\nWhen `MULTIBYTE` is enabled and a UTF-8 locale is available, the first few questions asked by the\nconfiguration wizard assess capabilities of the terminal font. If your answers indicate that some\nglyphs don't render correctly, configuration wizard won't offer prompt styles that use them. *Fix*:\nRestart your terminal and install\n[the recommended font](#meslo-nerd-font-patched-for-powerlevel10k). Verify by running\n`p10k configure` and checking that all glyphs render correctly.\n\n### Cannot install the recommended font\n\nOnce you download [the recommended font](#meslo-nerd-font-patched-for-powerlevel10k),\nyou can install it just like any other font. Google \"how to install fonts on *your OS*\".\n\n### Extra or missing spaces in prompt compared to Powerlevel9k\n\ntl;dr: Add `ZLE_RPROMPT_INDENT=0` and `POWERLEVEL9K_LEGACY_ICON_SPACING=true` to `~/.zshrc` to get\nthe same prompt spacing as in Powerlevel9k.\n\nWhen using Powerlevel10k with a Powerlevel9k config, you might get additional spaces in prompt here\nand there. These come in two flavors.\n\n#### Extra space without background on the right side of right prompt\n\ntl;dr: Add `ZLE_RPROMPT_INDENT=0` to `~/.zshrc` to get rid of that space.\n\nFrom [Zsh documentation](\n  http://zsh.sourceforge.net/Doc/Release/Parameters.html#index-ZLE_005fRPROMPT_005fINDENT):\n\n> `ZLE_RPROMPT_INDENT <S>`\n>\n> If set, used to give the indentation between the right hand side of the right prompt in the line\n> editor as given by `RPS1` or `RPROMPT` and the right hand side of the screen. If not set, the\n> value `1` is used.\n>\n> Typically this will be used to set the value to `0` so that the prompt appears flush with the\n> right hand side of the screen.\n\nPowerlevel10k respects this parameter. If you set `ZLE_RPROMPT_INDENT=1` (or leave it unset, which\nis the same thing as setting it to `1`), you'll get an empty space to the right of right prompt. If\nyou set `ZLE_RPROMPT_INDENT=0`, your prompt will go to the edge of the terminal. This is how it\nworks in every theme except Powerlevel9k.\n\n![ZLE_RPROMPT_INDENT: Powerlevel10k vs Powerlevel9k](\n  https://raw.githubusercontent.com/romkatv/powerlevel10k-media/master/p9k-vs-p10k-zle-rprompt-indent.png)\n\nPowerlevel9k issue: [powerlevel9k#1292](https://github.com/Powerlevel9k/powerlevel9k/issues/1292).\nIt's been fixed in the development branch of Powerlevel9k but the fix hasn't yet made it to\n`master`.\n\nAdd `ZLE_RPROMPT_INDENT=0` to `~/.zshrc` to get the same spacing on the right edge of prompt as in\nPowerlevel9k.\n\n*Note:* Several versions of Zsh have bugs that get triggered when you set `ZLE_RPROMPT_INDENT=0`.\nPowerlevel10k can work around these bugs when using powerline prompt style. If you notice visual\nartifacts in prompt, or wrong cursor position, try removing `ZLE_RPROMPT_INDENT` from `~/.zshrc`.\n\n#### Extra or missing spaces around icons\n\ntl;dr: Add `POWERLEVEL9K_LEGACY_ICON_SPACING=true` to `~/.zshrc` to get the same spacing around\nicons as in Powerlevel9k.\n\nSpacing around icons in Powerlevel9k is inconsistent.\n\n![ZLE_RPROMPT_INDENT: Powerlevel10k vs Powerlevel9k](\n  https://raw.githubusercontent.com/romkatv/powerlevel10k-media/master/p9k-vs-p10k-icon-spacing.png)\n\nThis inconsistency is a constant source of annoyance, so it was fixed in Powerlevel10k. You can add\n`POWERLEVEL9K_LEGACY_ICON_SPACING=true` to `~/.zshrc` to get the same spacing around icons as in\nPowerlevel9k.\n\n*Note:* It's not a good idea to define `POWERLEVEL9K_LEGACY_ICON_SPACING` when using\n`p10k configure`.\n\n### Weird things happen after typing `source ~/.zshrc`\n\nIt's almost always a bad idea to run `source ~/.zshrc`, whether you are using Powerlevel10k or not.\nThis command may result in random errors, misbehaving code and progressive slowdown of Zsh.\n\nIf you've made changes to `~/.zshrc` or to files sourced by it, restart Zsh to apply them. The most\nreliable way to do this is to type `exit` and then start a new Zsh session. You can also use\n`exec zsh`. While not exactly equivalent to complete Zsh restart, this command is much more reliable\nthan `source ~/.zshrc`.\n\n### Transient prompt stops working after some time\n\nSee [weird things happen after typing `source ~/.zshrc`](\n  #weird-things-happen-after-typing-source-zshrc).\n\n### Cannot make Powerlevel10k work with my plugin manager\n\nIf the [installation instructions](#installation) didn't work for you, try disabling your current\ntheme (so that you end up with no theme) and then installing Powerlevel10k manually.\n\n1. Disable the current theme in your framework / plugin manager.\n\n- **oh-my-zsh:** Open `~/.zshrc` and remove the line that sets `ZSH_THEME`. It might look like this:\n  `ZSH_THEME=\"powerlevel9k/powerlevel9k\"`.\n- **zplug:** Open `~/.zshrc` and remove the `zplug` command that refers to your current theme. For\n  example, if you are currently using Powerlevel9k, look for\n  `zplug bhilburn/powerlevel9k, use:powerlevel9k.zsh-theme`.\n- **prezto:** Open `~/.zpreztorc` and put `zstyle :prezto:module:prompt theme off` in it. Remove\n  any other command that sets `theme` such as `zstyle :prezto:module:prompt theme powerlevel9k`.\n- **antigen:** Open `~/.zshrc` and remove the line that sets `antigen theme`. It might look like\n  this: `antigen theme powerlevel9k/powerlevel9k`.\n\n2. Install Powerlevel10k manually.\n\n```zsh\ngit clone --depth=1 https://github.com/romkatv/powerlevel10k.git ~/powerlevel10k\necho 'source ~/powerlevel10k/powerlevel10k.zsh-theme' >>~/.zshrc\n```\n\nThis method of installation won't make anything slower or otherwise sub-par.\n\n### Directory is difficult to see in prompt when using Rainbow style\n\nIn Rainbow style the current working directory is shown with bright white text on blue background.\nThe white is fixed and always looks the same but the appearance of \"blue\" is defined by your\nterminal color palette. If it's very light, it may be difficult to see white text on it.\n\nThere are several ways to fix this.\n\n- Type `p10k configure` and choose a more readable prompt style.\n- [Change terminal color palette](#change-the-color-palette-used-by-your-terminal). Try Tango Dark\n  or Solarized Dark, or change just the \"blue\" color.\n- [Change directory background and/or foreground color](#set-colors-through-Powerlevel10k-configuration-parameters).\n  The parameters you are looking for are called `POWERLEVEL9K_DIR_BACKGROUND`,\n  `POWERLEVEL9K_DIR_FOREGROUND`, `POWERLEVEL9K_DIR_SHORTENED_FOREGROUND`,\n  `POWERLEVEL9K_DIR_ANCHOR_FOREGROUND` and `POWERLEVEL9K_DIR_ANCHOR_BOLD`. You can find them in\n  `~/.p10k.zsh`.\n\n*Related*: [Incorrect foreground color in VSCode Terminal.](#incorrect-foreground-color-in-vscode-terminal)\n\n### Incorrect foreground color in VSCode Terminal\n\nBy default, VSCode Terminal may arbitrarily replace the foreground color of your choice with a\ndifferent color. This behavior can be\n[turned off](https://code.visualstudio.com/docs/terminal/appearance#_minimum-contrast-ratio) in\nVSCode settings.\n\n### Horrific mess when resizing terminal window\n\nWhen you resize a terminal window horizontally back and forth a few times, you might see this ugly\npicture.\n\n![Powerlevel10k Resizing Mess](\n  https://raw.githubusercontent.com/romkatv/powerlevel10k-media/master/resizing-mess.png)\n\ntl;dr: This issue arises when a terminal reflows Zsh prompt upon resizing. It isn't specific to\nPowerlevel10k. See [mitigation](#mitigation).\n\n*Note: This section [used to say](\n  https://github.com/romkatv/powerlevel10k/blob/dce00cdb5daaa8a519df234a7012ba3257b644d4/README.md#horrific-mess-when-resizing-terminal-window)\nthat the problem is caused by a bug in Zsh. While it's true that it's possible to avoid the problem\nin many circumstances by modifying Zsh, it cannot be completely resolved this way. Thus it's unfair\nto pin the blame on Zsh.*\n\n#### The anatomy of the problem\n\nThe issue is manifested when the vertical distance between the start of the current prompt and the\ncursor (henceforth `VD`) changes when the terminal window is resized.\n\nWhen a terminal window gets shrunk horizontally, there are two ways for a terminal to handle long\nlines that no longer fit: *reflow* or *truncate*.\n\nTerminal content before shrinking:\n\n![Terminal Content Before Shrinking](\n  https://raw.githubusercontent.com/romkatv/powerlevel10k-media/master/resize-original.png)\n\nTerminal reflows text when shrinking:\n\n![Terminal Reflows Text When Shrinking](\n  https://raw.githubusercontent.com/romkatv/powerlevel10k-media/master/resize-reflow.png)\n\nTerminal truncates text when shrinking:\n\n![Terminal Truncates Text When Shrinking](\n  https://raw.githubusercontent.com/romkatv/powerlevel10k-media/master/resize-truncate.png)\n\nReflowing strategy can change the height of terminal content. If such content happens to be between\nthe start of the current prompt and the cursor, Zsh will print prompt on the wrong line. Truncation\nstrategy never changes the height of terminal content, so it doesn't trigger this issue.\n\nLet's see how the issue plays out in slow motion. We'll start by launching `zsh -f` and pasting\nthe following code:\n\n```zsh\nfunction pause() { read -s }\nfunctions -M pause 0\n\nreset\nprint -l {1..3}\nsetopt prompt_subst\nPROMPT=$'${$((pause()))+}left>${(pl.$((COLUMNS-12))..-.)}<right\\n> '\n```\n\nWhen `PROMPT` gets expanded, it calls `pause` to let us observe the state of the terminal. Here's\nthe initial state:\n\n![Terminal Resizing Bug 1](\n  https://raw.githubusercontent.com/romkatv/powerlevel10k-media/master/resize-bug-1.png)\n\nZsh keeps track of the cursor position relative to the start of the current prompt. In this case it\nknows that the cursor is one line below. When we shrink the terminal window, it looks like this:\n\n![Terminal Resizing Bug 2](\n  https://raw.githubusercontent.com/romkatv/powerlevel10k-media/master/resize-bug-2.png)\n\nAt this point the terminal sends `SIGWINCH` to Zsh to notify it about changes in the terminal\ndimensions. Note that this signal is sent *after* the content of the terminal has been reflown.\n\nWhen Zsh receives `SIGWINCH`, it attempts to erase the current prompt and print it anew. It goes to\nthe position where it *thinks* the current prompt is -- one line above the cursor (!) -- erases all\nterminal content that follows and prints reexpanded prompt there. However, after resizing prompt is\nno longer one line above the cursor. It's two lines above! Zsh ends up printing new prompt one line\ntoo low.\n\n![Terminal Resizing Bug 3](\n  https://raw.githubusercontent.com/romkatv/powerlevel10k-media/master/resize-bug-3.png)\n\nIn this case we ended up with unwanted junk content because `VD` has *increased*. When you make\nterminal window wider, `VD` can also *decrease*, which would result in the new prompt being printed\nhigher than intended, potentially erasing useful content in the process.\n\nHere are a few more examples where shrinking terminal window increased `VD`.\n\n- Simple one-line left prompt with right prompt. No `prompt_subst`. Note that the cursor is below\n  the prompt line (hit *ESC-ENTER* to get it there).\n  ![Zsh Prompt That Breaks on Terminal Shrinking 1](\n    https://raw.githubusercontent.com/romkatv/powerlevel10k-media/master/resize-breakable-1.png)\n- Simple one-line left prompt. No `prompt_subst`, no right prompt. Here `VD` is bound to increase\n  upon terminal shrinking due to the command line wrapping around.\n  ![Zsh Prompt That Breaks on Terminal Shrinking 2](\n    https://raw.githubusercontent.com/romkatv/powerlevel10k-media/master/resize-breakable-2.png)\n\n#### Zsh patch\n\n[This Zsh patch](https://github.com/romkatv/zsh/tree/fix-winchanged) fixes the issue on some\nterminals. The idea behind the patch is to use `sc` (save cursor) terminal capability before\nprinting prompt and `rc` (restore cursor) to move cursor back to the original position when prompt\nneeds to be refreshed.\n\nThe patch works only on terminals that reflow saved cursor position together with text when the\nterminal window is resized. The patch has no observable effect on terminals that don't reflow text\non resize (both patched and unpatched Zsh behave correctly) and on terminals that reflow text but\nnot the saved cursor position (both patched and unpatched Zsh redraw prompt at the same incorrect\nposition). In other words, the patch fixes the resizing issue on some terminals while keeping the\nbehavior unchanged on others.\n\nThere are two alternative approaches to patching Zsh that may seem to work at first glance but in\nfact don't:\n\n- Instead of `sc`, use `u7` terminal capability to query the current cursor position and then `cup`\n  to go back to it. This doesn't work because the absolute position of the start of the current\n  prompt changes when text gets reflown.\n- Recompute `VD` based on new terminal dimensions before attempting to refresh prompt. This doesn't\n  work because Zsh doesn't know whether terminal reflows text or truncates it. If Zsh could somehow\n  know that the terminal reflows text, this approach still wouldn't work on terminals that\n  continuously reflow text and rapid-fire `SIGWINCH` when the window is being resized. In such\n  environment real terminal dimensions go out of sync with what Zsh thinks the dimensions are.\n\nThere is no ETA for the patch making its way into upstream Zsh. See [discussion](\n  https://www.zsh.org/mla/workers//2019/msg00561.html).\n\n#### Mitigation\n\nThere are a few mitigation options for this issue.\n\n- Use [kitty](https://sw.kovidgoyal.net/kitty/) terminal version >= 0.24.0 and enable terminal-shell\n  integration in Powerlevel10k by defining `POWERLEVEL9K_TERM_SHELL_INTEGRATION=true` in\n  `~/.p10k.zsh`.\n- Apply [the patch](#zsh-patch) and [rebuild Zsh from source](\n    https://github.com/zsh-users/zsh/blob/master/INSTALL). It won't help if you are using Alacritty,\n  kitty or some other terminal that reflows text on resize but doesn't reflow saved cursor position.\n  On such terminals the patch will have no visible effect.\n- Disable text reflowing on window resize in terminal settings. If your terminal doesn't have this\n  setting, try a different terminal.\n- Avoid long lines between the start of prompt and cursor.\n  1. Disable ruler with `POWERLEVEL9K_SHOW_RULER=false`.\n  2. Disable prompt connection with `POWERLEVEL9K_MULTILINE_FIRST_PROMPT_GAP_CHAR=' '`.\n  3. Disable right frame with `POWERLEVEL9K_MULTILINE_FIRST_PROMPT_SUFFIX=''`,\n     `POWERLEVEL9K_MULTILINE_NEWLINE_PROMPT_SUFFIX=''` and\n     `POWERLEVEL9K_MULTILINE_LAST_PROMPT_SUFFIX=''`.\n  4. Set `POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=()`. Right prompt on the last prompt line will cause\n     resizing issues only when the cursor is below it. This isn't very common, so you might want to\n     keep some elements in `POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS` provided that none of them are\n     succeeded by `newline`.\n\n### Icons cut off in Konsole\n\nWhen using Konsole with a non-monospace font, icons may be cut off on the right side. Here\n\"non-monospace\" refers to any font with glyphs wider than a single column, or wider than two columns\nfor glyphs designated as \"wide\" in the Unicode standard.\n\n![Icons cut off in Konsole](\n  https://raw.githubusercontent.com/romkatv/powerlevel10k-media/master/konsole-non-monospace-font.png)\n\nThe last line on the screenshot shows a cut off Arch Linux logo.\n\nThere are several mitigation options for this issue.\n\n1. Use a different terminal. Konsole is the only terminal that exhibits this behavior.\n2. Use a monospace font.\n3. Manually add an extra space after the icon that gets cut off. For example, if the content of\n   `os_icon` prompt segment gets cut off, open `~/.p10k.zsh`, search for\n   `POWERLEVEL9K_OS_ICON_CONTENT_EXPANSION` and change it as follows:\n```zsh\ntypeset -g POWERLEVEL9K_OS_ICON_CONTENT_EXPANSION='${P9K_CONTENT} '  # extra space at the end\n```\n4. Use a different icon that is monospace. For example, if Arch Linux logo gets cut off, add\n   the following parameter to `~/.p10k.zsh`:\n```zsh\ntypeset -g POWERLEVEL9K_LINUX_ARCH_ICON='Arch'  # plain \"Arch\" in place of a logo\n```\n5. Disable the display of the icon that gets cut off. For example, if the content of\n   `os_icon` prompt segment gets cut off, open `~/.p10k.zsh` and remove `os_icon` from\n   `POWERLEVEL9K_LEFT_PROMPT_ELEMENTS` and `POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS`.\n\n*Note*: [Non-monospace fonts are not officially supported by Konsole](\n  https://bugs.kde.org/show_bug.cgi?id=418553#c5).\n\n### Arch Linux logo has a dot in the bottom right corner\n\n![Arch Linux Logo with a dot](\n  https://raw.githubusercontent.com/romkatv/powerlevel10k-media/master/arch-linux-logo-dot.png)\n\nSome fonts have this incorrect dotted icon in bold typeface. There are two ways to fix this issue.\n\n1. Use a font with a correct Arch Linux logo in bold typeface. For example,\n  [the recommended Powerlevel10k font](#meslo-nerd-font-patched-for-powerlevel10k).\n2. Display the icon in regular (non-bold) typeface. To do this, open `~/.p10k.zsh`, search for\n   `POWERLEVEL9K_OS_ICON_CONTENT_EXPANSION` and remove `%B` from its value.\n```zsh\ntypeset -g POWERLEVEL9K_OS_ICON_CONTENT_EXPANSION='${P9K_CONTENT}'  # not bold\n```\n\n### Incorrect git status in prompt\n\nPowerlevel10k uses [gitstatusd](https://github.com/romkatv/gitstatus) to inspect the state of git\nrepositories. The project relies on the [libgit2](https://github.com/libgit2/libgit2) library, which\nhas some gaps in its implementation. Under some conditions, this may result in discrepancies between\nthe real state of a git repository (reflected by `git status`) and what gets shown in the\nPowerlevel10k prompt.\n\nMost notably, [libgit2 does not support `skipHash`](https://github.com/libgit2/libgit2/issues/6531).\nIf you see incorrect git status in prompt, run `git config -l` and check whether `skipHash` is\nenabled. If it is, consider disabling it. Keep in mind that `skipHash` may be implicitly enabled\nwhen activating certain git features, such as `manyFiles`.\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "font.md",
          "type": "blob",
          "size": 9.7,
          "content": "# Recommended font: Meslo Nerd Font patched for Powerlevel10k\n\nGorgeous monospace font designed by Jim Lyles for Bitstream, customized by the same for Apple,\nfurther customized by Andr√© Berg, and finally patched by yours truly with customized scripts\noriginally developed by Ryan L McIntyre of Nerd Fonts. Contains all glyphs and symbols that\nPowerlevel10k may need. Battle-tested in dozens of different terminals on all major operating\nsystems.\n\n*FAQ*: [How was the recommended font created?](README.md#how-was-the-recommended-font-created)\n\n## Automatic font installation\n\nIf you are using iTerm2 or Termux, `p10k configure` can install the recommended font for you.\nSimply answer `Yes` when asked whether to install *Meslo Nerd Font*.\n\nIf you are using a different terminal, proceed with manual font installation. üëá\n\n## Manual font installation\n\n1. Download these four ttf files:\n   - [MesloLGS NF Regular.ttf](\n       https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Regular.ttf)\n   - [MesloLGS NF Bold.ttf](\n       https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Bold.ttf)\n   - [MesloLGS NF Italic.ttf](\n       https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Italic.ttf)\n   - [MesloLGS NF Bold Italic.ttf](\n       https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Bold%20Italic.ttf)\n1. Double-click on each file and click \"Install\". This will make `MesloLGS NF` font available to all\n   applications on your system.\n1. Configure your terminal to use this font:\n   - **iTerm2**: Type `p10k configure` and answer `Yes` when asked whether to install\n     *Meslo Nerd Font*. Alternatively, open *iTerm2 ‚Üí Preferences ‚Üí Profiles ‚Üí Text* and set *Font* to\n     `MesloLGS NF`.\n   - **Apple Terminal**: Open *Terminal ‚Üí Preferences ‚Üí Profiles ‚Üí Text*, click *Change* under *Font*\n     and select `MesloLGS NF` family.\n   - **Hyper**: Open *Hyper ‚Üí Edit ‚Üí Preferences* and change the value of `fontFamily` under\n     `module.exports.config` to `MesloLGS NF`.\n   - **Visual Studio Code**: Open *File ‚Üí Preferences ‚Üí Settings* (PC) or\n     *Code ‚Üí Preferences ‚Üí Settings* (Mac), enter `terminal.integrated.fontFamily` in the search box at\n     the top of *Settings* tab and set the value below to `MesloLGS NF`.\n     Consult [this screenshot](\n       https://raw.githubusercontent.com/romkatv/powerlevel10k-media/389133fb8c9a2347929a23702ce3039aacc46c3d/visual-studio-code-font-settings.jpg)\n     to see how it should look like or see [this issue](\n       https://github.com/romkatv/powerlevel10k/issues/671) for extra information.\n   - **GNOME Terminal** (the default Ubuntu terminal): Open *Terminal ‚Üí Preferences* and click on the\n     selected profile under *Profiles*. Check *Custom font* under *Text Appearance* and select\n     `MesloLGS NF Regular`.\n   - **Konsole**: Open *Settings ‚Üí Edit Current Profile ‚Üí Appearance*, click *Select Font* and select\n     `MesloLGS NF Regular`.\n   - **Tilix**: Open *Tilix ‚Üí Preferences* and click on the selected profile under *Profiles*. Check\n     *Custom font* under *Text Appearance* and select `MesloLGS NF Regular`.\n   - **Windows Console Host** (the old thing): Click the icon in the top left corner, then\n     *Properties ‚Üí Font* and set *Font* to `MesloLGS NF`.\n   - **Windows Terminal** by Microsoft (the new thing): Open *Settings* (<kbd>Ctrl+,</kbd>), click\n     either on the selected profile under *Profiles* or on *Defaults*, click *Appearance* and set\n     *Font face* to `MesloLGS NF`.\n   - **Conemu**: Open *Setup ‚Üí General ‚Üí Fonts* and set *Main console font* to `MesloLGS NF`.\n   - **IntelliJ** (and other IDEs by Jet Brains): Open *IDE ‚Üí Edit ‚Üí Preferences ‚Üí Editor ‚Üí\n     Color Scheme ‚Üí Console Font*. Select *Use console font instead of the default* and set the font\n     name to `MesloLGS NF`.\n   - **Termux**: Type `p10k configure` and answer `Yes` when asked whether to install\n     *Meslo Nerd Font*.\n   - **Blink**: Type `config`, go to *Appearance*, tap *Add a new font*, tap *Open Gallery*, select\n     *MesloLGS NF.css*, tap *import* and type `exit` in the home view to reload the font.\n   - **Tabby** (formerly **Terminus**): Open *Settings ‚Üí Appearance* and set *Font* to `MesloLGS NF`.\n   - **Terminator**: Open *Preferences* using the context menu. Under *Profiles* select the *General*\n     tab (should be selected already), uncheck *Use the system fixed width font* (if not already)\n     and select `MesloLGS NF Regular`. Exit the Preferences dialog by clicking *Close*.\n   - **Guake**: Right Click on an open terminal and open *Preferences*. Under *Appearance*\n     tab, uncheck *Use the system fixed width font* (if not already) and select `MesloLGS NF Regular`.\n     Exit the Preferences dialog by clicking *Close*.\n   - **MobaXterm**: Open *Settings* ‚Üí *Configuration* ‚Üí *Terminal* ‚Üí (under *Terminal look and feel*)\n     and change *Font* to `MesloLGS NF`. If you have *sessions*, you need to change the font in each\n     of them through *Settings* ‚Üí right click on an individual session ‚Üí *Edit Session* ‚Üí *Terminal\n     Settings* ‚Üí *Font settings*.\n   - **Asbr√∫ Connection Manager**: Open *Preferences ‚Üí Local Shell Options ‚Üí Look and Feel*, enable\n     *Use these personal options* and change *Font:* under *Terminal UI* to `MesloLGS NF Regular`.\n     To change the font for the remote host connections, go to *Preferences ‚Üí Terminal Options ‚Üí\n     Look and Feel* and change *Font:* under *Terminal UI* to `MesloLGS NF Regular`.\n   - **Warp**: Open Warp and Navigate to *Settings* then *Appearance*.  Scroll down to *Text* Section\n     and under *\"Terminal Font\"*, select the `MesloLGS NF` font.\n   - **WSLtty**: Right click on an open terminal and then on *Options*. In the *Text* section, under\n     *Font*, click *\"Select...\"* and set Font to `MesloLGS NF Regular`.\n   - **Yakuake**: Click *‚â°* ‚Üí *Manage Profiles* ‚Üí *New* ‚Üí *Appearance*. Click *Choose* next to the\n     *Font* dropdown, select `MesloLGS NF` and click *OK*. Click *OK* to save the profile. Select the\n     new profile and click *Set as Default*.\n   - **Alacritty**: Create or open `~/.config/alacritty/alacritty.toml` and add the following\n     section to it:\n     ```toml\n     [font.normal]\n     family = \"MesloLGS NF\"\n     ```\n   - **foot**: Create or open `~/.config/foot/foot.ini` and add the following section to it:\n     ```ini\n     font=MesloLGS NF:size=12\n     ```\n   - **kitty**: Create or open `~/.config/kitty/kitty.conf` and add the following line to it:\n     ```text\n     font_family MesloLGS NF\n     ```\n     Restart kitty by closing all sessions and opening a new session.\n   - **puTTY**: Set *Window* ‚Üí *Appearance* ‚Üí *Font* to `MesloLGS NF`. Requires puTTY\n     version >= 0.75.\n   - **WezTerm**: Create or open `$HOME/.config/wezterm/wezterm.lua` and add the following:\n     ```lua\n     local wezterm = require 'wezterm';\n     return {\n         font = wezterm.font(\"MesloLGS NF\"),\n     }\n     ```\n     If the file already exists, only add the line with the font to the existing return.\n     Also add the first line if it is not already present.\n   - **urxvt**: Create or open `~/.Xresources` and add the following line to it:\n     ```text\n     URxvt.font: xft:MesloLGS NF:size=11\n     ```\n     You can adjust the font size to your preference. After changing the config run\n     `xrdb ~/.Xresources` to reload it. The new config is applied to all new terminals.\n   - **xterm**: Create or open `~/.Xresources` and add the following line to it:\n     ```text\n     xterm*faceName: MesloLGS NF\n     ```\n     After changing the config run `xrdb ~/.Xresources` to reload it. The new config is applied to\n     all new terminals.\n   - **Zed**: Open `~/.config/zed/settings.json` and set `terminal.font_family` to `\"MesloLGS NF\"`.\n     ```jsonc\n     {\n       \"terminal\": {\n         \"font_family\": \"MesloLGS NF\"\n       },\n       // Other settings.\n     }\n     ```\n   - Crostini (Linux on Chrome OS): Open\n     chrome-untrusted://terminal/html/nassh_preferences_editor.html, set *Text font family* to\n      `'MesloLGS NF'` (including the quotes) and *Custom CSS (inline text)* to the following:\n     ```css\n     @font-face {\n      font-family: \"MesloLGS NF\";\n      src: url(\"https://raw.githubusercontent.com/romkatv/powerlevel10k-media/master/MesloLGS%20NF%20Regular.ttf\");\n      font-weight: normal;\n      font-style: normal;\n     }\n     @font-face {\n         font-family: \"MesloLGS NF\";\n         src: url(\"https://raw.githubusercontent.com/romkatv/powerlevel10k-media/master/MesloLGS%20NF%20Bold.ttf\");\n         font-weight: bold;\n         font-style: normal;\n     }\n     @font-face {\n         font-family: \"MesloLGS NF\";\n         src: url(\"https://raw.githubusercontent.com/romkatv/powerlevel10k-media/master/MesloLGS%20NF%20Italic.ttf\");\n         font-weight: normal;\n         font-style: italic;\n     }\n     @font-face {\n         font-family: \"MesloLGS NF\";\n         src: url(\"https://raw.githubusercontent.com/romkatv/powerlevel10k-media/master/MesloLGS%20NF%20Bold%20Italic.ttf\");\n         font-weight: bold;\n         font-style: italic;\n     }\n     ```\n     **_CAVEAT_**: If you open the normal terminal preferences these settings will be overwritten.\n   - **Deepin Terminal**: Create or open `~/.config/deepin/deepin-terminal/config.conf` and add the following section\n     to it:\n     ```ini\n     [basic.interface.font]\n     value = \"MesloLGS NF\"\n     ```\n   - **Ghostty**: Open *Menu ‚Üí Open Configuration* (Linux) or *Ghostty ‚Üí Settings...* (Mac) and add\n     the following line:\n     ```text\n     font-family = \"MesloLGS NF\"\n     ```\n1. Run `p10k configure` to generate a new `~/.p10k.zsh`. The old config may work\n   incorrectly with the new font.\n\n_Using a different terminal and know how to set the font for it? Share your knowledge by sending a\nPR to expand the list!_\n"
        },
        {
          "name": "gitstatus",
          "type": "tree",
          "content": null
        },
        {
          "name": "internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "powerlevel10k.png",
          "type": "blob",
          "size": 60.64,
          "content": null
        },
        {
          "name": "powerlevel10k.zsh-theme",
          "type": "blob",
          "size": 3.82,
          "content": "# vim:ft=zsh ts=2 sw=2 sts=2 et fenc=utf-8\n################################################################\n# Powerlevel10k Theme\n# https://github.com/romkatv/powerlevel10k\n#\n# Forked from Powerlevel9k Theme\n# https://github.com/bhilburn/powerlevel9k\n#\n# Which in turn was forked from Agnoster Theme\n# https://github.com/robbyrussell/oh-my-zsh/blob/74177c5320b2a1b2f8c4c695c05984b57fd7c6ea/themes/agnoster.zsh-theme\n################################################################\n\n# Temporarily change options.\n'builtin' 'local' '-a' '__p9k_src_opts'\n[[ ! -o 'aliases'         ]] || __p9k_src_opts+=('aliases')\n[[ ! -o 'sh_glob'         ]] || __p9k_src_opts+=('sh_glob')\n[[ ! -o 'no_brace_expand' ]] || __p9k_src_opts+=('no_brace_expand')\n'builtin' 'setopt' 'no_aliases' 'no_sh_glob' 'brace_expand'\n\n(( $+__p9k_root_dir )) || typeset -gr __p9k_root_dir=${POWERLEVEL9K_INSTALLATION_DIR:-${${(%):-%x}:A:h}}\n(( $+__p9k_intro )) || {\n  # Leading spaces before `local` are important. Otherwise Antigen will remove `local` (!!!).\n  # __p9k_trapint is to work around bugs in zsh: https://www.zsh.org/mla/workers/2020/msg00612.html.\n  # Likewise for `trap \":\"` instead of the plain `trap \"\"`.\n  typeset -gr __p9k_intro_base='emulate -L zsh -o no_hist_expand -o extended_glob -o no_prompt_bang -o prompt_percent -o no_prompt_subst -o no_aliases -o no_bg_nice -o typeset_silent -o no_rematch_pcre\n  (( $+__p9k_trapped )) || { local -i __p9k_trapped; trap : INT; trap \"trap ${(q)__p9k_trapint:--} INT\" EXIT }\n  local -a match mbegin mend\n  local -i MBEGIN MEND OPTIND\n  local MATCH OPTARG IFS=$'\\'' \\t\\n\\0'\\'\n  typeset -gr __p9k_intro_locale='[[ $langinfo[CODESET] != (utf|UTF)(-|)8 ]] && _p9k_init_locale && { [[ -n $LC_ALL ]] && local LC_ALL=$__p9k_locale || local LC_CTYPE=$__p9k_locale }'\n  typeset -gr __p9k_intro_no_locale=\"${${__p9k_intro_base/ match / match reply }/ MATCH / MATCH REPLY }\"\n  typeset -gr __p9k_intro_no_reply=\"$__p9k_intro_base; $__p9k_intro_locale\"\n  typeset -gr __p9k_intro=\"$__p9k_intro_no_locale; $__p9k_intro_locale\"\n}\n\nzmodload zsh/langinfo\n\nfunction _p9k_init_locale() {\n  if (( ! $+__p9k_locale )); then\n    typeset -g __p9k_locale=\n    (( $+commands[locale] )) || return\n    local -a loc\n    loc=(${(@M)$(locale -a 2>/dev/null):#*.(utf|UTF)(-|)8}) || return\n    (( $#loc )) || return\n    typeset -g __p9k_locale=${loc[(r)(#i)C.UTF(-|)8]:-${loc[(r)(#i)en_US.UTF(-|)8]:-$loc[1]}}\n  fi\n  [[ -n $__p9k_locale ]]\n}\n\n() {\n  eval \"$__p9k_intro\"\n  if (( $+__p9k_sourced )); then\n    (( $+functions[_p9k_setup] )) && _p9k_setup\n    return 0\n  fi\n  typeset -gr __p9k_dump_file=${XDG_CACHE_HOME:-~/.cache}/p10k-dump-${(%):-%n}.zsh\n  if [[ $__p9k_dump_file != $__p9k_instant_prompt_dump_file ]] && (( ! $+functions[_p9k_preinit] )) && source $__p9k_dump_file 2>/dev/null && (( $+functions[_p9k_preinit] )); then\n    _p9k_preinit\n  fi\n  typeset -gr __p9k_sourced=13\n  if [[ $ZSH_VERSION == (5.<1->*|<6->.*) ]]; then\n    if [[ -w $__p9k_root_dir && -w $__p9k_root_dir/internal && -w $__p9k_root_dir/gitstatus ]]; then\n      local f\n      for f in $__p9k_root_dir/{powerlevel9k.zsh-theme,powerlevel10k.zsh-theme,internal/p10k.zsh,internal/icons.zsh,internal/configure.zsh,internal/worker.zsh,internal/parser.zsh,gitstatus/gitstatus.plugin.zsh,gitstatus/install}; do\n        [[ $f.zwc -nt $f ]] && continue\n        zmodload -F zsh/files b:zf_mv b:zf_rm\n        local tmp=$f.tmp.$$.zwc\n        {\n          # `zf_mv -f src dst` fails on NTFS if `dst` is not writable, hence `zf_rm`.\n          zf_rm -f -- $f.zwc && zcompile -R -- $tmp $f && zf_mv -f -- $tmp $f.zwc\n        } always {\n          (( $? )) && zf_rm -f -- $tmp\n        }\n      done\n    fi\n  fi\n  builtin source $__p9k_root_dir/internal/p10k.zsh || true\n}\n\n(( $+__p9k_instant_prompt_active )) && unsetopt prompt_cr prompt_sp || setopt prompt_cr prompt_sp\n\n(( ${#__p9k_src_opts} )) && setopt ${__p9k_src_opts[@]}\n'builtin' 'unset' '__p9k_src_opts'\n"
        },
        {
          "name": "powerlevel9k.zsh-theme",
          "type": "blob",
          "size": 0.09,
          "content": "'builtin' 'source' \"${POWERLEVEL9K_INSTALLATION_DIR:-${${(%):-%x}:A:h}}/powerlevel10k.zsh-theme\"\n"
        },
        {
          "name": "prompt_powerlevel10k_setup",
          "type": "blob",
          "size": 0.09,
          "content": "'builtin' 'source' \"${POWERLEVEL9K_INSTALLATION_DIR:-${${(%):-%x}:A:h}}/powerlevel10k.zsh-theme\"\n"
        },
        {
          "name": "prompt_powerlevel9k_setup",
          "type": "blob",
          "size": 0.09,
          "content": "'builtin' 'source' \"${POWERLEVEL9K_INSTALLATION_DIR:-${${(%):-%x}:A:h}}/powerlevel10k.zsh-theme\"\n"
        }
      ]
    }
  ]
}