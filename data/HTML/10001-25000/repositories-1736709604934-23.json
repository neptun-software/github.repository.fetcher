{
  "metadata": {
    "timestamp": 1736709604934,
    "page": 23,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "desandro/masonry",
      "stars": 16493,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0634765625,
          "content": "components/\nbower_components/\nnode_modules/\nsandbox/**/bundle.js\n"
        },
        {
          "name": ".jshintrc",
          "type": "blob",
          "size": 0.0908203125,
          "content": "{\n  \"browser\": true,\n  \"devel\": false,\n  \"strict\": true,\n  \"undef\": true,\n  \"unused\": true\n}\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.017578125,
          "content": "# Masonry\n\n_Cascading grid layout library_\n\nMasonry works by placing elements in optimal position based on available vertical space, sort of like a mason fitting stones in a wall. Youâ€™ve probably seen it in use all over the Internet.\n\nSee [masonry.desandro.com](https://masonry.desandro.com) for complete docs and demos.\n\n## Install\n\n### Download\n\n+ [masonry.pkgd.js](https://unpkg.com/masonry-layout@4/dist/masonry.pkgd.js) un-minified, or\n+ [masonry.pkgd.min.js](https://unpkg.com/masonry-layout@4/dist/masonry.pkgd.min.js) minified\n\n### CDN\n\nLink directly to Masonry files on [unpkg](https://unpkg.com/).\n\n``` html\n<script src=\"https://unpkg.com/masonry-layout@4/dist/masonry.pkgd.js\"></script>\n<!-- or -->\n<script src=\"https://unpkg.com/masonry-layout@4/dist/masonry.pkgd.min.js\"></script>\n```\n\n### Package managers\n\n[npm](https://www.npmjs.com/package/masonry-layout): `npm install masonry-layout --save`\n\nBower: `bower install masonry-layout --save`\n\n## Support Masonry development\n\nMasonry has been actively maintained and improved upon for 8 years, with 900 GitHub issues closed. Please consider supporting its development by [purchasing a license for one of Metafizzy's commercial libraries](https://metafizzy.co).\n\n## Initialize\n\nWith jQuery\n\n``` js\n$('.grid').masonry({\n  // options...\n  itemSelector: '.grid-item',\n  columnWidth: 200\n});\n```\n\nWith vanilla JavaScript\n\n``` js\n// vanilla JS\n// init with element\nvar grid = document.querySelector('.grid');\nvar msnry = new Masonry( grid, {\n  // options...\n  itemSelector: '.grid-item',\n  columnWidth: 200\n});\n\n// init with selector\nvar msnry = new Masonry( '.grid', {\n  // options...\n});\n```\n\nWith HTML\n\nAdd a `data-masonry` attribute to your element. Options can be set in JSON in the value.\n\n``` html\n<div class=\"grid\" data-masonry='{ \"itemSelector\": \".grid-item\", \"columnWidth\": 200 }'>\n  <div class=\"grid-item\"></div>\n  <div class=\"grid-item\"></div>\n  ...\n</div>\n```\n\n## License\n\nMasonry is released under the [MIT license](http://desandro.mit-license.org). Have at it.\n\n* * *\n\nMade by David DeSandro\n"
        },
        {
          "name": "bower.json",
          "type": "blob",
          "size": 0.681640625,
          "content": "{\n  \"name\": \"masonry-layout\",\n  \"description\": \"Cascading grid layout library\",\n  \"main\": \"masonry.js\",\n  \"dependencies\": {\n    \"get-size\": \"^2.0.2\",\n    \"outlayer\": \"^2.1.0\"\n  },\n  \"devDependencies\": {\n    \"jquery-bridget\": \"~2.0.0\",\n    \"qunit\": \"^1.12\",\n    \"jquery\": \">=1.4.3 <4\"\n  },\n  \"ignore\": [\n    \"**/.*\",\n    \"node_modules\",\n    \"bower_components\",\n    \"test\",\n    \"tests\",\n    \"sandbox/\",\n    \"gulpfile.js\",\n    \"package.json\",\n    \"composer.json\"\n  ],\n  \"homepage\": \"https://masonry.desandro.com\",\n  \"authors\": [\n    \"David DeSandro\"\n  ],\n  \"keywords\": [\n    \"masonry\",\n    \"layout\",\n    \"outlayer\"\n  ],\n  \"license\": \"MIT\",\n  \"moduleType\": [\n    \"amd\",\n    \"globals\",\n    \"node\"\n  ]\n}\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.3837890625,
          "content": "{\n  \"name\": \"desandro/masonry\",\n  \"description\": \"Cascading grid layout library\",\n  \"type\": \"component\",\n  \"keywords\": [\"javascript\", \"library\", \"grid\", \"browser\", \"dom\", \"layout\", \"outlayer\"],\n  \"homepage\": \"https://masonry.desandro.com\",\n  \"license\": \"MIT\",\n  \"authors\": [\n    {\n      \"name\": \"David DeSandro\",\n      \"homepage\": \"http://desandro.com/\",\n      \"role\": \"developer\"\n    }\n  ]\n}\n"
        },
        {
          "name": "dist",
          "type": "tree",
          "content": null
        },
        {
          "name": "gulpfile.js",
          "type": "blob",
          "size": 3.1435546875,
          "content": "/*jshint node: true, strict: false */\n\nvar fs = require('fs');\nvar gulp = require('gulp');\nvar rename = require('gulp-rename');\nvar replace = require('gulp-replace');\n\n// ----- hint ----- //\n\nvar jshint = require('gulp-jshint');\n\ngulp.task( 'hint-js', function() {\n  return gulp.src('masonry.js')\n    .pipe( jshint() )\n    .pipe( jshint.reporter('default') );\n});\n\ngulp.task( 'hint-test', function() {\n  return gulp.src('test/unit/*.js')\n    .pipe( jshint() )\n    .pipe( jshint.reporter('default') );\n});\n\ngulp.task( 'hint-task', function() {\n  return gulp.src('gulpfile.js')\n    .pipe( jshint() )\n    .pipe( jshint.reporter('default') );\n});\n\nvar jsonlint = require('gulp-json-lint');\n\ngulp.task( 'jsonlint', function() {\n  return gulp.src( '*.json' )\n    .pipe( jsonlint() )\n    .pipe( jsonlint.report('verbose') );\n});\n\ngulp.task( 'hint', [ 'hint-js', 'hint-test', 'hint-task', 'jsonlint' ]);\n\n// -------------------------- RequireJS makes pkgd -------------------------- //\n\n// regex for banner comment\nvar reBannerComment = new RegExp('^\\\\s*(?:\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\/)\\\\s*');\n\nfunction getBanner() {\n  var src = fs.readFileSync( 'masonry.js', 'utf8' );\n  var matches = src.match( reBannerComment );\n  var banner = matches[0].replace( 'Masonry', 'Masonry PACKAGED' );\n  return banner;\n}\n\nfunction addBanner( str ) {\n  return replace( /^/, str );\n}\n\nvar rjsOptimize = require('gulp-requirejs-optimize');\n\ngulp.task( 'requirejs', function() {\n  var banner = getBanner();\n  // HACK src is not needed\n  // should refactor rjsOptimize to produce src\n  return gulp.src('masonry.js')\n    .pipe( rjsOptimize({\n      baseUrl: 'bower_components',\n      optimize: 'none',\n      include: [\n        'jquery-bridget/jquery-bridget',\n        'masonry/masonry'\n      ],\n      paths: {\n        masonry: '../',\n        jquery: 'empty:'\n      }\n    }) )\n    // remove named module\n    .pipe( replace( \"'masonry/masonry',\", '' ) )\n    // add banner\n    .pipe( addBanner( banner ) )\n    .pipe( rename('masonry.pkgd.js') )\n    .pipe( gulp.dest('dist') );\n});\n\n\n// ----- uglify ----- //\n\nvar uglify = require('gulp-uglify');\n\ngulp.task( 'uglify', [ 'requirejs' ], function() {\n  var banner = getBanner();\n  gulp.src('dist/masonry.pkgd.js')\n    .pipe( uglify() )\n    // add banner\n    .pipe( addBanner( banner ) )\n    .pipe( rename('masonry.pkgd.min.js') )\n    .pipe( gulp.dest('dist') );\n});\n\n// ----- version ----- //\n\n// set version in source files\n\nvar minimist = require('minimist');\nvar gutil = require('gulp-util');\nvar chalk = require('chalk');\n\n// use gulp version -t 1.2.3\ngulp.task( 'version', function() {\n  var args = minimist( process.argv.slice(3) );\n  var version = args.t;\n  if ( !version || !/^\\d\\.\\d+\\.\\d+/.test( version ) ) {\n    gutil.log( 'invalid version: ' + chalk.red( version ) );\n    return;\n  }\n  gutil.log( 'ticking version to ' + chalk.green( version ) );\n\n  gulp.src('masonry.js')\n    .pipe( replace( /Masonry v\\d\\.\\d+\\.\\d+/, 'Masonry v' + version ) )\n    .pipe( gulp.dest('.') );\n\n  gulp.src( [ 'package.json' ] )\n    .pipe( replace( /\"version\": \"\\d\\.\\d+\\.\\d+\"/, '\"version\": \"' + version + '\"' ) )\n    .pipe( gulp.dest('.') );\n});\n\n// ----- default ----- //\n\ngulp.task( 'default', [\n  'hint',\n  'uglify'\n]);\n"
        },
        {
          "name": "masonry.js",
          "type": "blob",
          "size": 7.2978515625,
          "content": "/*!\n * Masonry v4.2.2\n * Cascading grid layout library\n * https://masonry.desandro.com\n * MIT License\n * by David DeSandro\n */\n\n( function( window, factory ) {\n  // universal module definition\n  /* jshint strict: false */ /*globals define, module, require */\n  if ( typeof define == 'function' && define.amd ) {\n    // AMD\n    define( [\n        'outlayer/outlayer',\n        'get-size/get-size'\n      ],\n      factory );\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS\n    module.exports = factory(\n      require('outlayer'),\n      require('get-size')\n    );\n  } else {\n    // browser global\n    window.Masonry = factory(\n      window.Outlayer,\n      window.getSize\n    );\n  }\n\n}( window, function factory( Outlayer, getSize ) {\n\n'use strict';\n\n// -------------------------- masonryDefinition -------------------------- //\n\n  // create an Outlayer layout class\n  var Masonry = Outlayer.create('masonry');\n  // isFitWidth -> fitWidth\n  Masonry.compatOptions.fitWidth = 'isFitWidth';\n\n  var proto = Masonry.prototype;\n\n  proto._resetLayout = function() {\n    this.getSize();\n    this._getMeasurement( 'columnWidth', 'outerWidth' );\n    this._getMeasurement( 'gutter', 'outerWidth' );\n    this.measureColumns();\n\n    // reset column Y\n    this.colYs = [];\n    for ( var i=0; i < this.cols; i++ ) {\n      this.colYs.push( 0 );\n    }\n\n    this.maxY = 0;\n    this.horizontalColIndex = 0;\n  };\n\n  proto.measureColumns = function() {\n    this.getContainerWidth();\n    // if columnWidth is 0, default to outerWidth of first item\n    if ( !this.columnWidth ) {\n      var firstItem = this.items[0];\n      var firstItemElem = firstItem && firstItem.element;\n      // columnWidth fall back to item of first element\n      this.columnWidth = firstItemElem && getSize( firstItemElem ).outerWidth ||\n        // if first elem has no width, default to size of container\n        this.containerWidth;\n    }\n\n    var columnWidth = this.columnWidth += this.gutter;\n\n    // calculate columns\n    var containerWidth = this.containerWidth + this.gutter;\n    var cols = containerWidth / columnWidth;\n    // fix rounding errors, typically with gutters\n    var excess = columnWidth - containerWidth % columnWidth;\n    // if overshoot is less than a pixel, round up, otherwise floor it\n    var mathMethod = excess && excess < 1 ? 'round' : 'floor';\n    cols = Math[ mathMethod ]( cols );\n    this.cols = Math.max( cols, 1 );\n  };\n\n  proto.getContainerWidth = function() {\n    // container is parent if fit width\n    var isFitWidth = this._getOption('fitWidth');\n    var container = isFitWidth ? this.element.parentNode : this.element;\n    // check that this.size and size are there\n    // IE8 triggers resize on body size change, so they might not be\n    var size = getSize( container );\n    this.containerWidth = size && size.innerWidth;\n  };\n\n  proto._getItemLayoutPosition = function( item ) {\n    item.getSize();\n    // how many columns does this brick span\n    var remainder = item.size.outerWidth % this.columnWidth;\n    var mathMethod = remainder && remainder < 1 ? 'round' : 'ceil';\n    // round if off by 1 pixel, otherwise use ceil\n    var colSpan = Math[ mathMethod ]( item.size.outerWidth / this.columnWidth );\n    colSpan = Math.min( colSpan, this.cols );\n    // use horizontal or top column position\n    var colPosMethod = this.options.horizontalOrder ?\n      '_getHorizontalColPosition' : '_getTopColPosition';\n    var colPosition = this[ colPosMethod ]( colSpan, item );\n    // position the brick\n    var position = {\n      x: this.columnWidth * colPosition.col,\n      y: colPosition.y\n    };\n    // apply setHeight to necessary columns\n    var setHeight = colPosition.y + item.size.outerHeight;\n    var setMax = colSpan + colPosition.col;\n    for ( var i = colPosition.col; i < setMax; i++ ) {\n      this.colYs[i] = setHeight;\n    }\n\n    return position;\n  };\n\n  proto._getTopColPosition = function( colSpan ) {\n    var colGroup = this._getTopColGroup( colSpan );\n    // get the minimum Y value from the columns\n    var minimumY = Math.min.apply( Math, colGroup );\n\n    return {\n      col: colGroup.indexOf( minimumY ),\n      y: minimumY,\n    };\n  };\n\n  /**\n   * @param {Number} colSpan - number of columns the element spans\n   * @returns {Array} colGroup\n   */\n  proto._getTopColGroup = function( colSpan ) {\n    if ( colSpan < 2 ) {\n      // if brick spans only one column, use all the column Ys\n      return this.colYs;\n    }\n\n    var colGroup = [];\n    // how many different places could this brick fit horizontally\n    var groupCount = this.cols + 1 - colSpan;\n    // for each group potential horizontal position\n    for ( var i = 0; i < groupCount; i++ ) {\n      colGroup[i] = this._getColGroupY( i, colSpan );\n    }\n    return colGroup;\n  };\n\n  proto._getColGroupY = function( col, colSpan ) {\n    if ( colSpan < 2 ) {\n      return this.colYs[ col ];\n    }\n    // make an array of colY values for that one group\n    var groupColYs = this.colYs.slice( col, col + colSpan );\n    // and get the max value of the array\n    return Math.max.apply( Math, groupColYs );\n  };\n\n  // get column position based on horizontal index. #873\n  proto._getHorizontalColPosition = function( colSpan, item ) {\n    var col = this.horizontalColIndex % this.cols;\n    var isOver = colSpan > 1 && col + colSpan > this.cols;\n    // shift to next row if item can't fit on current row\n    col = isOver ? 0 : col;\n    // don't let zero-size items take up space\n    var hasSize = item.size.outerWidth && item.size.outerHeight;\n    this.horizontalColIndex = hasSize ? col + colSpan : this.horizontalColIndex;\n\n    return {\n      col: col,\n      y: this._getColGroupY( col, colSpan ),\n    };\n  };\n\n  proto._manageStamp = function( stamp ) {\n    var stampSize = getSize( stamp );\n    var offset = this._getElementOffset( stamp );\n    // get the columns that this stamp affects\n    var isOriginLeft = this._getOption('originLeft');\n    var firstX = isOriginLeft ? offset.left : offset.right;\n    var lastX = firstX + stampSize.outerWidth;\n    var firstCol = Math.floor( firstX / this.columnWidth );\n    firstCol = Math.max( 0, firstCol );\n    var lastCol = Math.floor( lastX / this.columnWidth );\n    // lastCol should not go over if multiple of columnWidth #425\n    lastCol -= lastX % this.columnWidth ? 0 : 1;\n    lastCol = Math.min( this.cols - 1, lastCol );\n    // set colYs to bottom of the stamp\n\n    var isOriginTop = this._getOption('originTop');\n    var stampMaxY = ( isOriginTop ? offset.top : offset.bottom ) +\n      stampSize.outerHeight;\n    for ( var i = firstCol; i <= lastCol; i++ ) {\n      this.colYs[i] = Math.max( stampMaxY, this.colYs[i] );\n    }\n  };\n\n  proto._getContainerSize = function() {\n    this.maxY = Math.max.apply( Math, this.colYs );\n    var size = {\n      height: this.maxY\n    };\n\n    if ( this._getOption('fitWidth') ) {\n      size.width = this._getContainerFitWidth();\n    }\n\n    return size;\n  };\n\n  proto._getContainerFitWidth = function() {\n    var unusedCols = 0;\n    // count unused columns\n    var i = this.cols;\n    while ( --i ) {\n      if ( this.colYs[i] !== 0 ) {\n        break;\n      }\n      unusedCols++;\n    }\n    // fit container to columns that have been used\n    return ( this.cols - unusedCols ) * this.columnWidth - this.gutter;\n  };\n\n  proto.needsResizeLayout = function() {\n    var previousWidth = this.containerWidth;\n    this.getContainerWidth();\n    return previousWidth != this.containerWidth;\n  };\n\n  return Masonry;\n\n}));\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.1162109375,
          "content": "{\n  \"name\": \"masonry-layout\",\n  \"version\": \"4.2.2\",\n  \"description\": \"Cascading grid layout library\",\n  \"main\": \"masonry.js\",\n  \"dependencies\": {\n    \"get-size\": \"^2.0.2\",\n    \"outlayer\": \"^2.1.0\"\n  },\n  \"devDependencies\": {\n    \"chalk\": \"^1.1.1\",\n    \"gulp\": \"^3.9.0\",\n    \"gulp-jshint\": \"^2.0.0\",\n    \"gulp-json-lint\": \"^0.1.0\",\n    \"gulp-rename\": \"^1.2.2\",\n    \"gulp-replace\": \"^0.5.4\",\n    \"gulp-requirejs-optimize\": \"metafizzy/gulp-requirejs-optimize\",\n    \"gulp-uglify\": \"^1.5.1\",\n    \"gulp-util\": \"^3.0.7\",\n    \"jquery\": \">=1.4.3 <4\",\n    \"jquery-bridget\": \"~2.0.0\",\n    \"jshint\": \"^2.8.0\",\n    \"minimist\": \"^1.2.0\",\n    \"qunitjs\": \"^1.12\"\n  },\n  \"directories\": {\n    \"test\": \"test\"\n  },\n  \"scripts\": {\n    \"test\": \"test/index.html\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/desandro/masonry.git\"\n  },\n  \"keywords\": [\n    \"DOM\",\n    \"browser\",\n    \"grid\",\n    \"layout\",\n    \"outlayer\"\n  ],\n  \"author\": \"David DeSandro\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/desandro/masonry/issues\"\n  },\n  \"homepage\": \"https://masonry.desandro.com\",\n  \"files\": [\n    \"dist\",\n    \"masonry.js\"\n  ]\n}\n"
        },
        {
          "name": "sandbox",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}