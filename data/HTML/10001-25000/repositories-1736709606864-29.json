{
  "metadata": {
    "timestamp": 1736709606864,
    "page": 29,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "tc39/ecma262",
      "stars": 15137,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1435546875,
          "content": "root = true\n\n[*]\ncharset = utf-8\nindent_style = space\nindent_size = 2\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1181640625,
          "content": "node_modules/\nout/\nvendor/esmeta\ntest*.js\naspell.txt\n\n# lockfiles we don't use are ignored\nnpm-shrinkwrap.json\nyarn.lock\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.328125,
          "content": "This repository is a TC39 project and subscribes to its [code of conduct](https://tc39.es/code-of-conduct/). It is available at [https://tc39.es/code-of-conduct/](https://tc39.es/code-of-conduct/).\n\nTo ask a question or report an issue, please email [tc39-conduct-reports@googlegroups.com](mailto:tc39-conduct-reports@googlegroups.com)."
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 8.6474609375,
          "content": "### Contributing to ECMAScript\n\nContributors to ECMAScript and TC39 are expected to follow our [Code of Conduct](https://tc39.es/code-of-conduct/).\n\nIf you are not an Ecma member, any non-trivial contributions require signing a legal agreement with Ecma. See the section \"Required Legal Agreements\" below for details.\n\n#### Issues and Pull Requests\n\nFor small changes to ECMAScript, you can contribute by filing an issue or a pull request against the current text of ECMA-262 standard in this repository.\n\nTo file an issue, go to the ecma262 [issues page](https://github.com/tc39/ecma262/issues). From there, [search](https://guides.github.com/features/issues/) in the existing issues to see if an issue already exists to track your problem. If so, add a comment to the existing issue; otherwise, [file a new issue](https://help.github.com/articles/creating-an-issue/) documenting the problem.\n\nTo make a pull request (PR), [fork](https://help.github.com/articles/fork-a-repo/) the [ecma262](https://github.com/tc39/ecma262) repository, apply changes to `spec.html`, and upload it to your fork on GitHub, using the web interface to file a pull request. Locally, to see how your change renders in HTML, run `npm install && npm run build` to build `spec.html` into an actual HTML file.\n\nCommits in pull requests should have a first line which starts with a tag, followed by a colon, indicating which type of patch they are:\n  * Normative: any changes that affect behavior required to correctly evaluate some ECMAScript source text (such as a script or module)\n  * Editorial: any non-normative changes to spec text including typo fixes, changes to the document style, etc.\n  * Markup: non-visible changes to markup in the spec\n  * Meta: changes to documents about this repository (e.g. readme.md or contributing.md) and other supporting documents or scripts (e.g. `package.json`, design documents, etc.)\n\nIf changes in the upstream `main` branch cause your PR to have conflicts, you should rebase your branch to `main` and force-push it to your repo (rather than doing a merge commit).\n\nIssues and PRs in the ecma262 repository are appropriate for minor modifications to the existing specification, for example to make behavior more consistent in an edge case, match what is implemented by the large majority of actual implementations, or to clarify wording. New features use the feature request process described below.\n\n##### Downstream dependencies\n\nIf you are changing the signature or behavior of an existing construct, please check if this affects downstream dependencies (searching for the construct's name is sufficient) and if needed file an issue:\n\n* [Web IDL](https://heycam.github.io/webidl/) — [file an issue](https://github.com/heycam/webidl/issues/new)\n* [HTML Standard](https://html.spec.whatwg.org/) — [file an issue](https://github.com/whatwg/html/issues/new)\n* [ECMAScript Intl API](https://tc39.es/ecma402/) - [file an issue](https://github.com/tc39/ecma402/issues/new)\n\n#### New feature proposals\n\nTC39 is open to accepting new feature requests for ECMAScript, referred to as \"proposals\". Proposals go through a four-stage process which is documented in the [TC39 process document](https://tc39.es/process-document/).\n\nFeature requests for future versions of ECMAScript should not be made in this repository. Instead, they are developed in separate GitHub repositories, which are then merged into the main repository once they have received \"Stage 4\".\n\n##### Creating a new proposal\n\nTo make a feature request, document the problem and a sketch of the solution with others in the community, including TC39 members. One place to do this is the [TC39 Discourse](https://es.discourse.group/); another is the [Matrix chat room][].\n\nYour goal will be to convince others that your proposal is a useful addition to the language and recruit TC39 members to help turn your request into a proposal and shepherd it into the language. Once a proposal is introduced to the committee, new features are considered by the committee according to the [TC39 process document](https://tc39.es/process-document/).\n\nYou can look at [existing proposals](https://github.com/tc39/proposals/) for examples of how proposals are structured, and some delegates use [this template](https://github.com/tc39/template-for-proposals) when creating repositories for their proposals. Proposals need to have a repository and be moved to the TC39 org on GitHub once they reach Stage 1.\n\n##### TC39 meetings and champions\n\nIf you have a new proposal you want to get into the language, you first need a TC39 \"champion\": a member of the committee who will make the case for the proposal at [in-person TC39 meetings](https://github.com/tc39/agendas#agendas) and help it move through the process. If you are a TC39 member, you can be a champion; otherwise, find a TC39 member to work with for this (e.g., through the [TC39 discussion group](https://es.discourse.group/) or the [Matrix chat room][]). Proposals may have multiple champions (a \"champion group\").\n\nTC39 meets six times a year, mostly in the United States, to discuss proposals. It is possible for members to join meetings remotely. At meetings, we discuss ways to resolve issues and feature requests. We spend most of the time considering proposals and advancing them through the stage process. Meetings follow an agenda which is developed in the [agendas GitHub repository](https://github.com/tc39/agendas/). After the meeting, notes are published in the [notes GitHub repository](https://github.com/tc39/tc39-notes/). To advance your proposal towards inclusion in the final specification, ensure that it is included on the agenda for an upcoming meeting and propose advancement at that time.\n\n##### Helping with existing proposals\n\nTC39 is currently considering adding several new features to the language. These proposals are linked from [the proposals repository](https://github.com/tc39/proposals). There are many ways to help with existing proposals:\n  * File issues in the individual proposal repository to provide constructive criticism and feedback.\n  * Make PRs against proposals, e.g., to clarify explanations of the motivation and use cases in `README.md`, or to fix issues in the proposal's specification text.\n  * Talk about what you think of the proposal, including sharing thoughts with the champion.\n  * Blog, tweet, give talks, etc about proposals to get more awareness and programmer feedback about them.\n  * Write [test262](https://github.com/tc39/test262) tests against the proposal, which are used to verify implementations. (If the proposal is at Stage 3, the tests can land; if earlier, they can be maintained in a PR.)\n  * Implement or prototype the proposal in script engines, parsers, transpilers, polyfills, type checkers, etc., possibly behind a flag or in a separate module, and report feedback. Note that proposals before Stage 3 are highly unstable, and all proposals before Stage 4 may be modified or dropped.\n\nTo track what's going on with a particular proposal, you can look in issues and commits in the individual proposal repository, read presentation slides which are linked from the TC39 agenda, and read the notes which came from the subsequent meetings. You can also reach out via the [Matrix chat room][], the [discussion group](https://es.discourse.group/), or direct communication with a proposal champion, if the other resources are unclear.\n\n#### Required legal agreements\n\nPeople associated with Ecma member organizations have a legal agreement in place with Ecma to ensure that intellectual property rights (IPR) of their contributions are appropriately licensed to be available to all ECMAScript programmers and implementers. For non-members to contribute, you are required to make these rights available by signing a Contributor License Agreement (CLA) for non-trivial contributions.\n\nIf you wish to submit a proposal or make a significant PR, and you are not a representative of a TC39 member, please [register as a TC39 RFTG contributor](https://tc39.es/agreements/contributor/).\n\nEcma TC39 accepts contributions from non-member individuals who have accepted the TC39 copyright and patent policies. Currently all ECMAScript related technical work is done by the TC39 RF TG (Royalty Free Task Group), for which the following IPR policies apply:\n\n  * [Ecma International RF Patent Policy](https://ecma-international.org/memento/Policies/Ecma_Royalty-Free_Patent_Policy_Extension_Option.htm)\n  * [Ecma International Software Copyright Policy](https://ecma-international.org/memento/Policies/Ecma_Policy_on_Submission_Inclusion_and_Licensing_of_Software.htm) ([PDF](https://ecma-international.org/memento/Policies/Ecma_Policy_on_Submission_Inclusion_and_Licensing_of_Software.pdf))\n\n[Matrix chat room]: https://github.com/tc39/how-we-work/blob/HEAD/matrix-guide.md\n"
        },
        {
          "name": "FAQ.md",
          "type": "blob",
          "size": 5.185546875,
          "content": "# Frequently Asked Questions\n\nAn index of frequently asked questions regarding all things ECMA-262.\n\n# Process Questions\n\n##### What is the process for proposing a new feature?\n\nNew features start life as a proposal to the [TC39](#what-is-a-tc39) committee and must be championed (or co-championed) by at least one member of the committee. Once the proposal is raised at a committee meeting, it will become a Stage 0 proposal and move along from there. For more details on how proposal stages work, check out the [proposal process document][proposal-process-document].\n\nIf you would like to contribute, please check out [Contributing to ECMAScript](https://github.com/tc39/ecma262/blob/HEAD/CONTRIBUTING.md).\n\n##### What is a \"TC39\"?\n\nTC39 stands for \"Technical Committee 39\" and is the committee responsible for iterating on and evolving the ECMAScript language specification. The committee generally meets around 6 times a year to discuss progress on pending proposals and collectively work on moving forward with changes to the spec.\n\n##### Why can't we remove feature X?\n\nChanges to ECMAScript must carefully consider the state of the world using the previous version of the language. This includes a large percentage of the web. As a result, in order to remove a feature from ECMAScript, TC39 must be able to show that the feature is used almost never (and thus can be removed). Going through this exercise is extremely difficult and sometimes impossible -- so in general ECMAScript *very* rarely removes features.\n\nBecause the web is so large, even features that behave in a way that's surprising and potentially lead to bugs are often relied upon by real programs. Therefore, only actual use data, and not a sense of whether some feature is correct or useful, can guide TC39 in potentially changing existing behavior.\n\n# Feature Questions\n\n### Arrow Functions\n\n##### Why isn't there a `->` version of arrow functions?\n\nThe motivation for `=>` was to address the oft-fired footgun of dynamic `this` bindings. Additionally, having two forms of arrows is confusing; So only one form was added.\n\n### Destructuring\n\n##### Why isn't the object property destructuring syntax flipped the other way?\n\n(i.e. `let {x: y} = {x: 42}` vs `let {y: x} = {x: 42}`)\n\nIn all other object patterns in the language, the syntax to the left of the colon represents the \"structure\" of an object; So having destructuring patterns match this convention was most consistent.\n\nMore fundamentally, however, flipping the syntax the other way would produce a grammar that requires infinite lookahead to properly disambiguate.\n\n### Modules\n\n##### Why don't `import` statements use real destructuring syntax?\n\n[`import` statements create an alias of a remote binding](#why-are-imported-module-bindings-aliased-instead-of-copied), they do not create a new local binding. First-class destructuring, however, allows for the creation of new bindings from substructures of objects and arrays. As a result first-class destructuring was not a good fit for the `import` statement.\n\n##### Why are imported module bindings aliased instead of copied?\n\nThe biggest reason for this is that it allows cyclic module dependencies to work.\n\nFor example, consider the following contrived scenario:\n\n```javascript\n// Even.js\nimport {isOdd} from \"./Odd.js\";\n\nexport function isEven(num) {\n  if (num === 0) {\n    return true;\n  } else {\n    return isOdd(num - 1);\n  }\n}\n```\n\n```javascript\n// Odd.js\nimport {isEven} from \"./Even.js\";\n\nexport function isOdd(num) {\n  if (num === 0) {\n    return false;\n  } else {\n    return isEven(num - 1);\n  }\n}\n```\n\n```javascript\n// main.js\nimport {isOdd} from \"./Odd\";\n\nisOdd(2);\n```\n\nThe list of operations that execute will go something like the following:\n\n1. Note that **main.js** has a named import called `isOdd` that comes from **Odd.js**\n2. Begin loading **Odd.js**.\n3. Once **Odd.js** has loaded, note that it has a named export called `isOdd` and a named import called `isEven` that comes from **Even.js**.\n4. Create an empty binding called `isOdd` for **Odd.js**'s exports.\n5. Begin loading **Even.js**.\n6. Once **Even.js** has loaded, note that it has a named export called `isEven` and a named import called `isOdd` that comes from **Odd.js**.\n7. Create an empty binding called `isEven` for **Even.js**'s exports.\n8. Now that all of the dependencies of **Even.js** have loaded, begin evaluating it with a variable called `isOdd` aliased to the (currently empty) `isOdd` binding we created in step 4.\n9. As we evaluate the `export function isEven() { ... }` statement in **Even.js**, fill in the value for the `isEven` binding created in step 7.\n10. Now that all of the dependencies of **Odd.js** have loaded, begin evaluating it with a variable called `isEven` aliased to the (no longer empty) `isEven` binding we created in step 9.\n11. As we evaluate the `export function isOdd() { ... }` statement in **Odd.js**, fill in the value for the `isOdd` binding created in step 4. Note that this now \"fills in\" the value for the alias to this binding noted in step 8.\n\nIf the exported bindings were copied between **Even.js** and **Odd.js** rather than aliased, the body of `isEven` would have received a copy of the uninitialized value for `isOdd`.\n\n[proposal-process-document]: https://tc39.es/process-document/\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 0.78515625,
          "content": "This repository is licensed according to Ecma International TC39's [Intellectual Property Policy](https://github.com/tc39/how-we-work/blob/HEAD/ip.md). In particular:\n\n- Natural language text is licensed under the [Alternative copyright notice of the Ecma text copyright policy](https://ecma-international.org/policies/by-ipr/ecma-text-copyright-policy/#alternative-copyright-notice).\n- Source code is licensed under Ecma's MIT-style [Ecma International Policy on Submission, Inclusion and Licensing of Software](https://www.ecma-international.org/memento/Policies/Ecma_Policy_on_Submission_Inclusion_and_Licensing_of_Software.htm).\n- Contributions are only accepted from either representatives of Ecma members or signatories of TC39's [Contributor Form](https://tc39.github.io/agreements/contributor/).\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.623046875,
          "content": "\nECMAScript\n====\n\n## This repo\n\nThis repository contains the source for the current draft of ECMA-262,\nthe ECMAScript® Language Specification.\n\nThis source is processed to obtain a human-readable version,\nwhich you can view [here](https://tc39.es/ecma262/).\n\nIf you want to explore how the specification was written, you can also view the source with its history in [searchfox](https://searchfox.org/ecma262/source/spec.html).\n\n## Current Proposals\n\nProposals follow [the TC39 process](https://tc39.es/process-document/) and are tracked in the [proposals repository](https://github.com/tc39/proposals).\n\n* [Finished Proposals](https://github.com/tc39/proposals/blob/HEAD/finished-proposals.md)\n* [Active Proposals](https://github.com/tc39/proposals)\n* [Stage 1 Proposals](https://github.com/tc39/proposals/blob/HEAD/stage-1-proposals.md)\n* [Stage 0 Proposals](https://github.com/tc39/proposals/blob/HEAD/stage-0-proposals.md)\n* [Inactive Proposals](https://github.com/tc39/proposals/blob/HEAD/inactive-proposals.md)\n\n### Contributing New Proposals\n\nPlease see [Contributing to ECMAScript](/CONTRIBUTING.md) for the most up-to-date information on contributing proposals to this standard.\n\n## Developing the Specification\n\nAfter cloning, do `npm install` to set up your environment. You can then do `npm run build` to build the spec or `npm run watch` to set up a continuous build. The results will appear in the `out` directory, which you can use `npm run clean` to delete.\n\n## Community\n\n* [ES discourse](https://es.discourse.group/): Forum for ECMAScript discussion and questions\n* [Matrix](https://github.com/tc39/how-we-work/blob/HEAD/matrix-guide.md): Chat\n"
        },
        {
          "name": "biblio",
          "type": "tree",
          "content": null
        },
        {
          "name": "esmeta-ignore.json",
          "type": "blob",
          "size": 0.533203125,
          "content": "[\n  \"AsyncFromSyncIteratorContinuation\",\n  \"AsyncGeneratorYield\",\n  \"ClassStaticBlockBody[0,0].EvaluateClassStaticBlockBody\",\n  \"CompareTypedArrayElements\",\n  \"DoWait\",\n  \"FunctionBody[0,0].EvaluateFunctionBody\",\n  \"GetViewByteLength\",\n  \"INTRINSICS.Atomics.notify\",\n  \"MakeMatchIndicesIndexPairArray\",\n  \"Record[SourceTextModuleRecord].ExecuteModule\",\n  \"Record[SourceTextModuleRecord].ResolveExport\",\n  \"SuperCall[0,0].Evaluation\",\n  \"TypedArrayGetElement\",\n  \"TypedArrayLength\",\n  \"TypedArraySetElement\",\n  \"YieldExpression[2,0].Evaluation\"\n]\n"
        },
        {
          "name": "img",
          "type": "tree",
          "content": null
        },
        {
          "name": "package-lock.json",
          "type": "blob",
          "size": 120.15625,
          "content": "{\n  \"name\": \"ecma262\",\n  \"version\": \"1.0.0\",\n  \"lockfileVersion\": 3,\n  \"requires\": true,\n  \"packages\": {\n    \"\": {\n      \"name\": \"ecma262\",\n      \"version\": \"1.0.0\",\n      \"license\": \"SEE LICENSE IN https://tc39.es/ecma262/#sec-copyright-and-software-license\",\n      \"devDependencies\": {\n        \"ecmarkup\": \"^20.0.0\",\n        \"glob\": \"^7.1.6\",\n        \"jsdom\": \"^15.0.0\",\n        \"pagedjs\": \"^0.4.3\",\n        \"pagedjs-cli\": \"^0.4.3\",\n        \"tar-stream\": \"^2.2.0\",\n        \"tiny-json-http\": \"^7.1.2\"\n      }\n    },\n    \"node_modules/@babel/code-frame\": {\n      \"version\": \"7.12.11\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.12.11.tgz\",\n      \"integrity\": \"sha512-Zt1yodBx1UcyiePMSkWnU4hPqhwq7hGi2nFL1LeA3EUl+q2LQx16MISgJ0+z7dnmgvP9QtIleuETGOiOH1RcIw==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"@babel/highlight\": \"^7.10.4\"\n      }\n    },\n    \"node_modules/@babel/helper-validator-identifier\": {\n      \"version\": \"7.22.20\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      }\n    },\n    \"node_modules/@babel/highlight\": {\n      \"version\": \"7.23.4\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"@babel/helper-validator-identifier\": \"^7.22.20\",\n        \"chalk\": \"^2.4.2\",\n        \"js-tokens\": \"^4.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      }\n    },\n    \"node_modules/@babel/highlight/node_modules/ansi-styles\": {\n      \"version\": \"3.2.1\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"color-convert\": \"^1.9.0\"\n      },\n      \"engines\": {\n        \"node\": \">=4\"\n      }\n    },\n    \"node_modules/@babel/highlight/node_modules/chalk\": {\n      \"version\": \"2.4.2\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"ansi-styles\": \"^3.2.1\",\n        \"escape-string-regexp\": \"^1.0.5\",\n        \"supports-color\": \"^5.3.0\"\n      },\n      \"engines\": {\n        \"node\": \">=4\"\n      }\n    },\n    \"node_modules/@babel/highlight/node_modules/color-convert\": {\n      \"version\": \"1.9.3\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"color-name\": \"1.1.3\"\n      }\n    },\n    \"node_modules/@babel/highlight/node_modules/color-name\": {\n      \"version\": \"1.1.3\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/@babel/polyfill\": {\n      \"version\": \"7.12.1\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"core-js\": \"^2.6.5\",\n        \"regenerator-runtime\": \"^0.13.4\"\n      }\n    },\n    \"node_modules/@babel/runtime\": {\n      \"version\": \"7.24.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"regenerator-runtime\": \"^0.14.0\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      }\n    },\n    \"node_modules/@babel/runtime/node_modules/regenerator-runtime\": {\n      \"version\": \"0.14.1\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/@esfx/async-canceltoken\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/@esfx/async-canceltoken/-/async-canceltoken-1.0.0.tgz\",\n      \"integrity\": \"sha512-3Ps/4NPd7qFltmHL+CYXCjZtNXcQGV9BZmpzu8Rt3/0SZMtbQve0gtX0uJDJGvAWa6w3IB4HrKVP12VPoFONmA==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"@esfx/cancelable\": \"^1.0.0\",\n        \"@esfx/canceltoken\": \"^1.0.0\",\n        \"@esfx/disposable\": \"^1.0.0\",\n        \"tslib\": \"^2.4.0\"\n      }\n    },\n    \"node_modules/@esfx/async-canceltoken/node_modules/tslib\": {\n      \"version\": \"2.6.2\",\n      \"resolved\": \"https://registry.npmjs.org/tslib/-/tslib-2.6.2.tgz\",\n      \"integrity\": \"sha512-AEYxH93jGFPn/a2iVAwW87VuUIkR1FVUKB77NwMF7nBTDkDrrT/Hpt/IrCJ0QXhW27jTBDcf5ZY7w6RiqTMw2Q==\",\n      \"dev\": true\n    },\n    \"node_modules/@esfx/cancelable\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/@esfx/cancelable/-/cancelable-1.0.0.tgz\",\n      \"integrity\": \"sha512-2dry/TuOT9ydpw86f396v09cyi/gLeGPIZSH4Gx+V/qKQaS/OXCRurCY+Cn8zkBfTAgFsjk9NE15d+LPo2kt9A==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"@esfx/disposable\": \"^1.0.0\"\n      }\n    },\n    \"node_modules/@esfx/canceltoken\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/@esfx/canceltoken/-/canceltoken-1.0.0.tgz\",\n      \"integrity\": \"sha512-/TgdzC5O89w5v0TgwE2wcdtampWNAFOxzurCtb4RxYVr3m72yk3Bg82vMdznx+H9nnf28zVDR0PtpZO9FxmOkw==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"@esfx/cancelable\": \"^1.0.0\",\n        \"@esfx/disposable\": \"^1.0.0\",\n        \"tslib\": \"^2.4.0\"\n      }\n    },\n    \"node_modules/@esfx/canceltoken/node_modules/tslib\": {\n      \"version\": \"2.6.2\",\n      \"resolved\": \"https://registry.npmjs.org/tslib/-/tslib-2.6.2.tgz\",\n      \"integrity\": \"sha512-AEYxH93jGFPn/a2iVAwW87VuUIkR1FVUKB77NwMF7nBTDkDrrT/Hpt/IrCJ0QXhW27jTBDcf5ZY7w6RiqTMw2Q==\",\n      \"dev\": true\n    },\n    \"node_modules/@esfx/disposable\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/@esfx/disposable/-/disposable-1.0.0.tgz\",\n      \"integrity\": \"sha512-hu7EI+YxlEWEKrb2himbS13HNaq5mlUePASf99KeQqkiNeqiAZbKqG4w59uDcLZs8JrV3qJqS/NYib5ZMhbfTQ==\",\n      \"dev\": true\n    },\n    \"node_modules/@nodelib/fs.scandir\": {\n      \"version\": \"2.1.5\",\n      \"resolved\": \"https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz\",\n      \"integrity\": \"sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"@nodelib/fs.stat\": \"2.0.5\",\n        \"run-parallel\": \"^1.1.9\"\n      },\n      \"engines\": {\n        \"node\": \">= 8\"\n      }\n    },\n    \"node_modules/@nodelib/fs.stat\": {\n      \"version\": \"2.0.5\",\n      \"resolved\": \"https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz\",\n      \"integrity\": \"sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">= 8\"\n      }\n    },\n    \"node_modules/@nodelib/fs.walk\": {\n      \"version\": \"1.2.8\",\n      \"resolved\": \"https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz\",\n      \"integrity\": \"sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"@nodelib/fs.scandir\": \"2.1.5\",\n        \"fastq\": \"^1.6.0\"\n      },\n      \"engines\": {\n        \"node\": \">= 8\"\n      }\n    },\n    \"node_modules/@pdf-lib/standard-fonts\": {\n      \"version\": \"1.0.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"pako\": \"^1.0.6\"\n      }\n    },\n    \"node_modules/@pdf-lib/upng\": {\n      \"version\": \"1.0.1\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"pako\": \"^1.0.10\"\n      }\n    },\n    \"node_modules/@puppeteer/browsers\": {\n      \"version\": \"1.4.6\",\n      \"dev\": true,\n      \"license\": \"Apache-2.0\",\n      \"dependencies\": {\n        \"debug\": \"4.3.4\",\n        \"extract-zip\": \"2.0.1\",\n        \"progress\": \"2.0.3\",\n        \"proxy-agent\": \"6.3.0\",\n        \"tar-fs\": \"3.0.4\",\n        \"unbzip2-stream\": \"1.4.3\",\n        \"yargs\": \"17.7.1\"\n      },\n      \"bin\": {\n        \"browsers\": \"lib/cjs/main-cli.js\"\n      },\n      \"engines\": {\n        \"node\": \">=16.3.0\"\n      },\n      \"peerDependencies\": {\n        \"typescript\": \">= 4.7.4\"\n      },\n      \"peerDependenciesMeta\": {\n        \"typescript\": {\n          \"optional\": true\n        }\n      }\n    },\n    \"node_modules/@puppeteer/browsers/node_modules/debug\": {\n      \"version\": \"4.3.4\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"ms\": \"2.1.2\"\n      },\n      \"engines\": {\n        \"node\": \">=6.0\"\n      },\n      \"peerDependenciesMeta\": {\n        \"supports-color\": {\n          \"optional\": true\n        }\n      }\n    },\n    \"node_modules/@puppeteer/browsers/node_modules/ms\": {\n      \"version\": \"2.1.2\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/@tootallnate/once\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/@tootallnate/once/-/once-2.0.0.tgz\",\n      \"integrity\": \"sha512-XCuKFP5PS55gnMVu3dty8KPatLqUoy/ZYzDzAGCQ8JNFCkLXzmI7vNHCR+XpbZaMWQK/vQubr7PkYq8g470J/A==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">= 10\"\n      }\n    },\n    \"node_modules/@tootallnate/quickjs-emscripten\": {\n      \"version\": \"0.23.0\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/@types/node\": {\n      \"version\": \"20.11.25\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"optional\": true,\n      \"dependencies\": {\n        \"undici-types\": \"~5.26.4\"\n      }\n    },\n    \"node_modules/@types/yauzl\": {\n      \"version\": \"2.10.3\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"optional\": true,\n      \"dependencies\": {\n        \"@types/node\": \"*\"\n      }\n    },\n    \"node_modules/abab\": {\n      \"version\": \"2.0.6\",\n      \"resolved\": \"https://registry.npmjs.org/abab/-/abab-2.0.6.tgz\",\n      \"integrity\": \"sha512-j2afSsaIENvHZN2B8GOpF566vZ5WVk5opAiMTvWgaQT8DkbOqsTfvNAvHoRGU2zzP8cPoqys+xHTRDWW8L+/BA==\",\n      \"deprecated\": \"Use your platform's native atob() and btoa() methods instead\",\n      \"dev\": true\n    },\n    \"node_modules/accepts\": {\n      \"version\": \"1.3.8\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"mime-types\": \"~2.1.34\",\n        \"negotiator\": \"0.6.3\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.6\"\n      }\n    },\n    \"node_modules/acorn\": {\n      \"version\": \"8.11.3\",\n      \"resolved\": \"https://registry.npmjs.org/acorn/-/acorn-8.11.3.tgz\",\n      \"integrity\": \"sha512-Y9rRfJG5jcKOE0CLisYbojUjIrIEE7AGMzA/Sm4BslANhbS+cDMpgBdcPT91oJ7OuJ9hYJBx59RjbhxVnrF8Xg==\",\n      \"dev\": true,\n      \"bin\": {\n        \"acorn\": \"bin/acorn\"\n      },\n      \"engines\": {\n        \"node\": \">=0.4.0\"\n      }\n    },\n    \"node_modules/acorn-globals\": {\n      \"version\": \"4.3.4\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"acorn\": \"^6.0.1\",\n        \"acorn-walk\": \"^6.0.1\"\n      }\n    },\n    \"node_modules/acorn-globals/node_modules/acorn\": {\n      \"version\": \"6.4.1\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"bin\": {\n        \"acorn\": \"bin/acorn\"\n      },\n      \"engines\": {\n        \"node\": \">=0.4.0\"\n      }\n    },\n    \"node_modules/acorn-walk\": {\n      \"version\": \"6.2.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=0.4.0\"\n      }\n    },\n    \"node_modules/agent-base\": {\n      \"version\": \"7.1.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"debug\": \"^4.3.4\"\n      },\n      \"engines\": {\n        \"node\": \">= 14\"\n      }\n    },\n    \"node_modules/agent-base/node_modules/debug\": {\n      \"version\": \"4.3.4\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"ms\": \"2.1.2\"\n      },\n      \"engines\": {\n        \"node\": \">=6.0\"\n      },\n      \"peerDependenciesMeta\": {\n        \"supports-color\": {\n          \"optional\": true\n        }\n      }\n    },\n    \"node_modules/agent-base/node_modules/ms\": {\n      \"version\": \"2.1.2\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/ajv\": {\n      \"version\": \"6.12.6\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"fast-deep-equal\": \"^3.1.1\",\n        \"fast-json-stable-stringify\": \"^2.0.0\",\n        \"json-schema-traverse\": \"^0.4.1\",\n        \"uri-js\": \"^4.2.2\"\n      },\n      \"funding\": {\n        \"type\": \"github\",\n        \"url\": \"https://github.com/sponsors/epoberezkin\"\n      }\n    },\n    \"node_modules/ansi-regex\": {\n      \"version\": \"6.0.1\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=12\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/chalk/ansi-regex?sponsor=1\"\n      }\n    },\n    \"node_modules/ansi-styles\": {\n      \"version\": \"4.3.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"color-convert\": \"^2.0.1\"\n      },\n      \"engines\": {\n        \"node\": \">=8\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/chalk/ansi-styles?sponsor=1\"\n      }\n    },\n    \"node_modules/argparse\": {\n      \"version\": \"2.0.1\",\n      \"dev\": true,\n      \"license\": \"Python-2.0\"\n    },\n    \"node_modules/array-back\": {\n      \"version\": \"3.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/array-back/-/array-back-3.1.0.tgz\",\n      \"integrity\": \"sha512-TkuxA4UCOvxuDK6NZYXCalszEzj+TLszyASooky+i742l9TqsOdYCMJJupxRic61hwquNtppB3hgcuq9SVSH1Q==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=6\"\n      }\n    },\n    \"node_modules/array-equal\": {\n      \"version\": \"1.0.0\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/array-flatten\": {\n      \"version\": \"1.1.1\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/asn1\": {\n      \"version\": \"0.2.4\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"safer-buffer\": \"~2.1.0\"\n      }\n    },\n    \"node_modules/assert-plus\": {\n      \"version\": \"1.0.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=0.8\"\n      }\n    },\n    \"node_modules/ast-types\": {\n      \"version\": \"0.13.4\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"tslib\": \"^2.0.1\"\n      },\n      \"engines\": {\n        \"node\": \">=4\"\n      }\n    },\n    \"node_modules/ast-types/node_modules/tslib\": {\n      \"version\": \"2.6.2\",\n      \"dev\": true,\n      \"license\": \"0BSD\"\n    },\n    \"node_modules/asynckit\": {\n      \"version\": \"0.4.0\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/aws-sign2\": {\n      \"version\": \"0.7.0\",\n      \"dev\": true,\n      \"license\": \"Apache-2.0\",\n      \"engines\": {\n        \"node\": \"*\"\n      }\n    },\n    \"node_modules/aws4\": {\n      \"version\": \"1.9.1\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/b4a\": {\n      \"version\": \"1.6.6\",\n      \"dev\": true,\n      \"license\": \"Apache-2.0\"\n    },\n    \"node_modules/balanced-match\": {\n      \"version\": \"1.0.0\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/bare-events\": {\n      \"version\": \"2.2.1\",\n      \"dev\": true,\n      \"license\": \"Apache-2.0\",\n      \"optional\": true\n    },\n    \"node_modules/base64-js\": {\n      \"version\": \"1.5.1\",\n      \"dev\": true,\n      \"funding\": [\n        {\n          \"type\": \"github\",\n          \"url\": \"https://github.com/sponsors/feross\"\n        },\n        {\n          \"type\": \"patreon\",\n          \"url\": \"https://www.patreon.com/feross\"\n        },\n        {\n          \"type\": \"consulting\",\n          \"url\": \"https://feross.org/support\"\n        }\n      ],\n      \"license\": \"MIT\"\n    },\n    \"node_modules/basic-ftp\": {\n      \"version\": \"5.0.5\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=10.0.0\"\n      }\n    },\n    \"node_modules/bcrypt-pbkdf\": {\n      \"version\": \"1.0.2\",\n      \"dev\": true,\n      \"license\": \"BSD-3-Clause\",\n      \"dependencies\": {\n        \"tweetnacl\": \"^0.14.3\"\n      }\n    },\n    \"node_modules/bl\": {\n      \"version\": \"4.1.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"buffer\": \"^5.5.0\",\n        \"inherits\": \"^2.0.4\",\n        \"readable-stream\": \"^3.4.0\"\n      }\n    },\n    \"node_modules/body-parser\": {\n      \"version\": \"1.20.2\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"bytes\": \"3.1.2\",\n        \"content-type\": \"~1.0.5\",\n        \"debug\": \"2.6.9\",\n        \"depd\": \"2.0.0\",\n        \"destroy\": \"1.2.0\",\n        \"http-errors\": \"2.0.0\",\n        \"iconv-lite\": \"0.4.24\",\n        \"on-finished\": \"2.4.1\",\n        \"qs\": \"6.11.0\",\n        \"raw-body\": \"2.5.2\",\n        \"type-is\": \"~1.6.18\",\n        \"unpipe\": \"1.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.8\",\n        \"npm\": \"1.2.8000 || >= 1.4.16\"\n      }\n    },\n    \"node_modules/body-parser/node_modules/qs\": {\n      \"version\": \"6.11.0\",\n      \"dev\": true,\n      \"license\": \"BSD-3-Clause\",\n      \"dependencies\": {\n        \"side-channel\": \"^1.0.4\"\n      },\n      \"engines\": {\n        \"node\": \">=0.6\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/ljharb\"\n      }\n    },\n    \"node_modules/brace-expansion\": {\n      \"version\": \"1.1.11\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"balanced-match\": \"^1.0.0\",\n        \"concat-map\": \"0.0.1\"\n      }\n    },\n    \"node_modules/braces\": {\n      \"version\": \"3.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/braces/-/braces-3.0.2.tgz\",\n      \"integrity\": \"sha512-b8um+L1RzM3WDSzvhm6gIz1yfTbBt6YTlcEKAvsmqCZZFw46z626lVj9j1yEPW33H5H+lBQpZMP1k8l+78Ha0A==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"fill-range\": \"^7.0.1\"\n      },\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/browser-process-hrtime\": {\n      \"version\": \"1.0.0\",\n      \"dev\": true,\n      \"license\": \"BSD-2-Clause\"\n    },\n    \"node_modules/buffer\": {\n      \"version\": \"5.7.1\",\n      \"dev\": true,\n      \"funding\": [\n        {\n          \"type\": \"github\",\n          \"url\": \"https://github.com/sponsors/feross\"\n        },\n        {\n          \"type\": \"patreon\",\n          \"url\": \"https://www.patreon.com/feross\"\n        },\n        {\n          \"type\": \"consulting\",\n          \"url\": \"https://feross.org/support\"\n        }\n      ],\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"base64-js\": \"^1.3.1\",\n        \"ieee754\": \"^1.1.13\"\n      }\n    },\n    \"node_modules/buffer-crc32\": {\n      \"version\": \"0.2.13\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \"*\"\n      }\n    },\n    \"node_modules/bytes\": {\n      \"version\": \"3.1.2\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.8\"\n      }\n    },\n    \"node_modules/call-bind\": {\n      \"version\": \"1.0.7\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"es-define-property\": \"^1.0.0\",\n        \"es-errors\": \"^1.3.0\",\n        \"function-bind\": \"^1.1.2\",\n        \"get-intrinsic\": \"^1.2.4\",\n        \"set-function-length\": \"^1.2.1\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.4\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/ljharb\"\n      }\n    },\n    \"node_modules/callsites\": {\n      \"version\": \"3.1.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=6\"\n      }\n    },\n    \"node_modules/caseless\": {\n      \"version\": \"0.12.0\",\n      \"dev\": true,\n      \"license\": \"Apache-2.0\"\n    },\n    \"node_modules/chalk\": {\n      \"version\": \"5.3.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \"^12.17.0 || ^14.13 || >=16.0.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/chalk/chalk?sponsor=1\"\n      }\n    },\n    \"node_modules/chromium-bidi\": {\n      \"version\": \"0.4.16\",\n      \"dev\": true,\n      \"license\": \"Apache-2.0\",\n      \"dependencies\": {\n        \"mitt\": \"3.0.0\"\n      },\n      \"peerDependencies\": {\n        \"devtools-protocol\": \"*\"\n      }\n    },\n    \"node_modules/clear-cut\": {\n      \"version\": \"2.0.2\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/cli-cursor\": {\n      \"version\": \"4.0.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"restore-cursor\": \"^4.0.0\"\n      },\n      \"engines\": {\n        \"node\": \"^12.20.0 || ^14.13.1 || >=16.0.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/cli-spinners\": {\n      \"version\": \"2.9.2\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=6\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/cliui\": {\n      \"version\": \"8.0.1\",\n      \"dev\": true,\n      \"license\": \"ISC\",\n      \"dependencies\": {\n        \"string-width\": \"^4.2.0\",\n        \"strip-ansi\": \"^6.0.1\",\n        \"wrap-ansi\": \"^7.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/cliui/node_modules/ansi-regex\": {\n      \"version\": \"5.0.1\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/cliui/node_modules/strip-ansi\": {\n      \"version\": \"6.0.1\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"ansi-regex\": \"^5.0.1\"\n      },\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/clone\": {\n      \"version\": \"1.0.4\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=0.8\"\n      }\n    },\n    \"node_modules/color-convert\": {\n      \"version\": \"2.0.1\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"color-name\": \"~1.1.4\"\n      },\n      \"engines\": {\n        \"node\": \">=7.0.0\"\n      }\n    },\n    \"node_modules/color-name\": {\n      \"version\": \"1.1.4\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/combined-stream\": {\n      \"version\": \"1.0.8\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"delayed-stream\": \"~1.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.8\"\n      }\n    },\n    \"node_modules/command-line-args\": {\n      \"version\": \"5.2.1\",\n      \"resolved\": \"https://registry.npmjs.org/command-line-args/-/command-line-args-5.2.1.tgz\",\n      \"integrity\": \"sha512-H4UfQhZyakIjC74I9d34fGYDwk3XpSr17QhEd0Q3I9Xq1CETHo4Hcuo87WyWHpAF1aSLjLRf5lD9ZGX2qStUvg==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"array-back\": \"^3.1.0\",\n        \"find-replace\": \"^3.0.0\",\n        \"lodash.camelcase\": \"^4.3.0\",\n        \"typical\": \"^4.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=4.0.0\"\n      }\n    },\n    \"node_modules/command-line-usage\": {\n      \"version\": \"6.1.3\",\n      \"resolved\": \"https://registry.npmjs.org/command-line-usage/-/command-line-usage-6.1.3.tgz\",\n      \"integrity\": \"sha512-sH5ZSPr+7UStsloltmDh7Ce5fb8XPlHyoPzTpyyMuYCtervL65+ubVZ6Q61cFtFl62UyJlc8/JwERRbAFPUqgw==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"array-back\": \"^4.0.2\",\n        \"chalk\": \"^2.4.2\",\n        \"table-layout\": \"^1.0.2\",\n        \"typical\": \"^5.2.0\"\n      },\n      \"engines\": {\n        \"node\": \">=8.0.0\"\n      }\n    },\n    \"node_modules/command-line-usage/node_modules/ansi-styles\": {\n      \"version\": \"3.2.1\",\n      \"resolved\": \"https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz\",\n      \"integrity\": \"sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"color-convert\": \"^1.9.0\"\n      },\n      \"engines\": {\n        \"node\": \">=4\"\n      }\n    },\n    \"node_modules/command-line-usage/node_modules/array-back\": {\n      \"version\": \"4.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/array-back/-/array-back-4.0.2.tgz\",\n      \"integrity\": \"sha512-NbdMezxqf94cnNfWLL7V/im0Ub+Anbb0IoZhvzie8+4HJ4nMQuzHuy49FkGYCJK2yAloZ3meiB6AVMClbrI1vg==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/command-line-usage/node_modules/chalk\": {\n      \"version\": \"2.4.2\",\n      \"resolved\": \"https://registry.npmjs.org/chalk/-/chalk-2.4.2.tgz\",\n      \"integrity\": \"sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"ansi-styles\": \"^3.2.1\",\n        \"escape-string-regexp\": \"^1.0.5\",\n        \"supports-color\": \"^5.3.0\"\n      },\n      \"engines\": {\n        \"node\": \">=4\"\n      }\n    },\n    \"node_modules/command-line-usage/node_modules/color-convert\": {\n      \"version\": \"1.9.3\",\n      \"resolved\": \"https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz\",\n      \"integrity\": \"sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"color-name\": \"1.1.3\"\n      }\n    },\n    \"node_modules/command-line-usage/node_modules/color-name\": {\n      \"version\": \"1.1.3\",\n      \"resolved\": \"https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz\",\n      \"integrity\": \"sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw==\",\n      \"dev\": true\n    },\n    \"node_modules/command-line-usage/node_modules/typical\": {\n      \"version\": \"5.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/typical/-/typical-5.2.0.tgz\",\n      \"integrity\": \"sha512-dvdQgNDNJo+8B2uBQoqdb11eUCE1JQXhvjC/CZtgvZseVd5TYMXnq0+vuUemXbd/Se29cTaUuPX3YIc2xgbvIg==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/commander\": {\n      \"version\": \"11.1.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=16\"\n      }\n    },\n    \"node_modules/concat-map\": {\n      \"version\": \"0.0.1\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/content-disposition\": {\n      \"version\": \"0.5.4\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"safe-buffer\": \"5.2.1\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.6\"\n      }\n    },\n    \"node_modules/content-type\": {\n      \"version\": \"1.0.5\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.6\"\n      }\n    },\n    \"node_modules/cookie\": {\n      \"version\": \"0.5.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.6\"\n      }\n    },\n    \"node_modules/cookie-signature\": {\n      \"version\": \"1.0.6\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/core-js\": {\n      \"version\": \"2.6.12\",\n      \"dev\": true,\n      \"hasInstallScript\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/core-util-is\": {\n      \"version\": \"1.0.2\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/cosmiconfig\": {\n      \"version\": \"8.2.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"import-fresh\": \"^3.2.1\",\n        \"js-yaml\": \"^4.1.0\",\n        \"parse-json\": \"^5.0.0\",\n        \"path-type\": \"^4.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=14\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/d-fischer\"\n      }\n    },\n    \"node_modules/cross-fetch\": {\n      \"version\": \"4.0.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"node-fetch\": \"^2.6.12\"\n      }\n    },\n    \"node_modules/cross-fetch/node_modules/node-fetch\": {\n      \"version\": \"2.7.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"whatwg-url\": \"^5.0.0\"\n      },\n      \"engines\": {\n        \"node\": \"4.x || >=6.0.0\"\n      },\n      \"peerDependencies\": {\n        \"encoding\": \"^0.1.0\"\n      },\n      \"peerDependenciesMeta\": {\n        \"encoding\": {\n          \"optional\": true\n        }\n      }\n    },\n    \"node_modules/css-tree\": {\n      \"version\": \"1.1.3\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"mdn-data\": \"2.0.14\",\n        \"source-map\": \"^0.6.1\"\n      },\n      \"engines\": {\n        \"node\": \">=8.0.0\"\n      }\n    },\n    \"node_modules/cssom\": {\n      \"version\": \"0.5.0\",\n      \"resolved\": \"https://registry.npmjs.org/cssom/-/cssom-0.5.0.tgz\",\n      \"integrity\": \"sha512-iKuQcq+NdHqlAcwUY0o/HL69XQrUaQdMjmStJ8JFmUaiiQErlhrmuigkg/CU4E2J0IyUKUrMAgl36TvN67MqTw==\",\n      \"dev\": true\n    },\n    \"node_modules/cssstyle\": {\n      \"version\": \"2.3.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"cssom\": \"~0.3.6\"\n      },\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/cssstyle/node_modules/cssom\": {\n      \"version\": \"0.3.8\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/d\": {\n      \"version\": \"1.0.2\",\n      \"dev\": true,\n      \"license\": \"ISC\",\n      \"dependencies\": {\n        \"es5-ext\": \"^0.10.64\",\n        \"type\": \"^2.7.2\"\n      },\n      \"engines\": {\n        \"node\": \">=0.12\"\n      }\n    },\n    \"node_modules/dashdash\": {\n      \"version\": \"1.14.1\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"assert-plus\": \"^1.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=0.10\"\n      }\n    },\n    \"node_modules/data-uri-to-buffer\": {\n      \"version\": \"4.0.1\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 12\"\n      }\n    },\n    \"node_modules/data-urls\": {\n      \"version\": \"1.1.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"abab\": \"^2.0.0\",\n        \"whatwg-mimetype\": \"^2.2.0\",\n        \"whatwg-url\": \"^7.0.0\"\n      }\n    },\n    \"node_modules/data-urls/node_modules/whatwg-url\": {\n      \"version\": \"7.1.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"lodash.sortby\": \"^4.7.0\",\n        \"tr46\": \"^1.0.1\",\n        \"webidl-conversions\": \"^4.0.2\"\n      }\n    },\n    \"node_modules/debug\": {\n      \"version\": \"2.6.9\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"ms\": \"2.0.0\"\n      }\n    },\n    \"node_modules/decimal.js\": {\n      \"version\": \"10.4.3\",\n      \"resolved\": \"https://registry.npmjs.org/decimal.js/-/decimal.js-10.4.3.tgz\",\n      \"integrity\": \"sha512-VBBaLc1MgL5XpzgIP7ny5Z6Nx3UrRkIViUkPUdtl9aya5amy3De1gsUUSB1g3+3sExYNjCAsAznmukyxCb1GRA==\",\n      \"dev\": true\n    },\n    \"node_modules/dedent-js\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/dedent-js/-/dedent-js-1.0.1.tgz\",\n      \"integrity\": \"sha512-OUepMozQULMLUmhxS95Vudo0jb0UchLimi3+pQ2plj61Fcy8axbP9hbiD4Sz6DPqn6XG3kfmziVfQ1rSys5AJQ==\",\n      \"dev\": true\n    },\n    \"node_modules/deep-extend\": {\n      \"version\": \"0.6.0\",\n      \"resolved\": \"https://registry.npmjs.org/deep-extend/-/deep-extend-0.6.0.tgz\",\n      \"integrity\": \"sha512-LOHxIOaPYdHlJRtCQfDIVZtfw/ufM8+rVj649RIHzcm/vGwQRXFt6OPqIFWsm2XEMrNIEtWR64sY1LEKD2vAOA==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=4.0.0\"\n      }\n    },\n    \"node_modules/deep-is\": {\n      \"version\": \"0.1.3\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/defaults\": {\n      \"version\": \"1.0.4\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"clone\": \"^1.0.2\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/define-data-property\": {\n      \"version\": \"1.1.4\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"es-define-property\": \"^1.0.0\",\n        \"es-errors\": \"^1.3.0\",\n        \"gopd\": \"^1.0.1\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.4\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/ljharb\"\n      }\n    },\n    \"node_modules/degenerator\": {\n      \"version\": \"5.0.1\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"ast-types\": \"^0.13.4\",\n        \"escodegen\": \"^2.1.0\",\n        \"esprima\": \"^4.0.1\"\n      },\n      \"engines\": {\n        \"node\": \">= 14\"\n      }\n    },\n    \"node_modules/degenerator/node_modules/escodegen\": {\n      \"version\": \"2.1.0\",\n      \"dev\": true,\n      \"license\": \"BSD-2-Clause\",\n      \"dependencies\": {\n        \"esprima\": \"^4.0.1\",\n        \"estraverse\": \"^5.2.0\",\n        \"esutils\": \"^2.0.2\"\n      },\n      \"bin\": {\n        \"escodegen\": \"bin/escodegen.js\",\n        \"esgenerate\": \"bin/esgenerate.js\"\n      },\n      \"engines\": {\n        \"node\": \">=6.0\"\n      },\n      \"optionalDependencies\": {\n        \"source-map\": \"~0.6.1\"\n      }\n    },\n    \"node_modules/degenerator/node_modules/estraverse\": {\n      \"version\": \"5.3.0\",\n      \"dev\": true,\n      \"license\": \"BSD-2-Clause\",\n      \"engines\": {\n        \"node\": \">=4.0\"\n      }\n    },\n    \"node_modules/delayed-stream\": {\n      \"version\": \"1.0.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=0.4.0\"\n      }\n    },\n    \"node_modules/depd\": {\n      \"version\": \"2.0.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.8\"\n      }\n    },\n    \"node_modules/destroy\": {\n      \"version\": \"1.2.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.8\",\n        \"npm\": \"1.2.8000 || >= 1.4.16\"\n      }\n    },\n    \"node_modules/devtools-protocol\": {\n      \"version\": \"0.0.1147663\",\n      \"dev\": true,\n      \"license\": \"BSD-3-Clause\"\n    },\n    \"node_modules/domexception\": {\n      \"version\": \"1.0.1\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"webidl-conversions\": \"^4.0.2\"\n      }\n    },\n    \"node_modules/ecc-jsbn\": {\n      \"version\": \"0.1.2\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"jsbn\": \"~0.1.0\",\n        \"safer-buffer\": \"^2.1.0\"\n      }\n    },\n    \"node_modules/ecmarkdown\": {\n      \"version\": \"8.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/ecmarkdown/-/ecmarkdown-8.1.0.tgz\",\n      \"integrity\": \"sha512-dx6cM6RFjzAXkWr2KQRikED4gy70NFQ0vTI4XUQM/LWcjUYRJUbGdd7nd++trXi5az1JSe49TeeCIVMKDXOtcQ==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"escape-html\": \"^1.0.1\"\n      }\n    },\n    \"node_modules/ecmarkup\": {\n      \"version\": \"20.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/ecmarkup/-/ecmarkup-20.0.0.tgz\",\n      \"integrity\": \"sha512-c5Km5oVo+pZVvfaS1lRvaweVj89lkXxjOKGdW5QfQWFaAxHu/q1sSFCwEIy2bwhtZr5EiijdjonF22D/e75yzQ==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"chalk\": \"^4.1.2\",\n        \"command-line-args\": \"^5.2.0\",\n        \"command-line-usage\": \"^6.1.1\",\n        \"dedent-js\": \"^1.0.1\",\n        \"ecmarkdown\": \"^8.1.0\",\n        \"eslint-formatter-codeframe\": \"^7.32.1\",\n        \"fast-glob\": \"^3.2.7\",\n        \"grammarkdown\": \"^3.3.2\",\n        \"highlight.js\": \"11.0.1\",\n        \"html-escape\": \"^1.0.2\",\n        \"js-yaml\": \"^3.13.1\",\n        \"jsdom\": \"^19.0.0\",\n        \"nwsapi\": \"2.2.0\",\n        \"parse5\": \"^6.0.1\",\n        \"prex\": \"^0.4.7\",\n        \"promise-debounce\": \"^1.0.1\"\n      },\n      \"bin\": {\n        \"ecmarkup\": \"bin/ecmarkup.js\",\n        \"emu-format\": \"bin/emu-format.js\"\n      },\n      \"engines\": {\n        \"node\": \">= 18\"\n      }\n    },\n    \"node_modules/ecmarkup/node_modules/acorn-globals\": {\n      \"version\": \"6.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/acorn-globals/-/acorn-globals-6.0.0.tgz\",\n      \"integrity\": \"sha512-ZQl7LOWaF5ePqqcX4hLuv/bLXYQNfNWw2c0/yX/TsPRKamzHcTGQnlCjHT3TsmkOUVEPS3crCxiPfdzE/Trlhg==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"acorn\": \"^7.1.1\",\n        \"acorn-walk\": \"^7.1.1\"\n      }\n    },\n    \"node_modules/ecmarkup/node_modules/acorn-globals/node_modules/acorn\": {\n      \"version\": \"7.4.1\",\n      \"resolved\": \"https://registry.npmjs.org/acorn/-/acorn-7.4.1.tgz\",\n      \"integrity\": \"sha512-nQyp0o1/mNdbTO1PO6kHkwSrmgZ0MT/jCCpNiwbUjGoRN4dlBhqJtoQuCnEOKzgTVwg0ZWiCoQy6SxMebQVh8A==\",\n      \"dev\": true,\n      \"bin\": {\n        \"acorn\": \"bin/acorn\"\n      },\n      \"engines\": {\n        \"node\": \">=0.4.0\"\n      }\n    },\n    \"node_modules/ecmarkup/node_modules/acorn-walk\": {\n      \"version\": \"7.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/acorn-walk/-/acorn-walk-7.2.0.tgz\",\n      \"integrity\": \"sha512-OPdCF6GsMIP+Az+aWfAAOEt2/+iVDKE7oy6lJ098aoe59oAmK76qV6Gw60SbZ8jHuG2wH058GF4pLFbYamYrVA==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=0.4.0\"\n      }\n    },\n    \"node_modules/ecmarkup/node_modules/agent-base\": {\n      \"version\": \"6.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/agent-base/-/agent-base-6.0.2.tgz\",\n      \"integrity\": \"sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"debug\": \"4\"\n      },\n      \"engines\": {\n        \"node\": \">= 6.0.0\"\n      }\n    },\n    \"node_modules/ecmarkup/node_modules/argparse\": {\n      \"version\": \"1.0.10\",\n      \"resolved\": \"https://registry.npmjs.org/argparse/-/argparse-1.0.10.tgz\",\n      \"integrity\": \"sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"sprintf-js\": \"~1.0.2\"\n      }\n    },\n    \"node_modules/ecmarkup/node_modules/chalk\": {\n      \"version\": \"4.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz\",\n      \"integrity\": \"sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"ansi-styles\": \"^4.1.0\",\n        \"supports-color\": \"^7.1.0\"\n      },\n      \"engines\": {\n        \"node\": \">=10\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/chalk/chalk?sponsor=1\"\n      }\n    },\n    \"node_modules/ecmarkup/node_modules/data-urls\": {\n      \"version\": \"3.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/data-urls/-/data-urls-3.0.2.tgz\",\n      \"integrity\": \"sha512-Jy/tj3ldjZJo63sVAvg6LHt2mHvl4V6AgRAmNDtLdm7faqtsx+aJG42rsyCo9JCoRVKwPFzKlIPx3DIibwSIaQ==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"abab\": \"^2.0.6\",\n        \"whatwg-mimetype\": \"^3.0.0\",\n        \"whatwg-url\": \"^11.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/ecmarkup/node_modules/data-urls/node_modules/whatwg-url\": {\n      \"version\": \"11.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/whatwg-url/-/whatwg-url-11.0.0.tgz\",\n      \"integrity\": \"sha512-RKT8HExMpoYx4igMiVMY83lN6UeITKJlBQ+vR/8ZJ8OCdSiN3RwCq+9gH0+Xzj0+5IrM6i4j/6LuvzbZIQgEcQ==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"tr46\": \"^3.0.0\",\n        \"webidl-conversions\": \"^7.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/ecmarkup/node_modules/debug\": {\n      \"version\": \"4.3.4\",\n      \"resolved\": \"https://registry.npmjs.org/debug/-/debug-4.3.4.tgz\",\n      \"integrity\": \"sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"ms\": \"2.1.2\"\n      },\n      \"engines\": {\n        \"node\": \">=6.0\"\n      },\n      \"peerDependenciesMeta\": {\n        \"supports-color\": {\n          \"optional\": true\n        }\n      }\n    },\n    \"node_modules/ecmarkup/node_modules/domexception\": {\n      \"version\": \"4.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/domexception/-/domexception-4.0.0.tgz\",\n      \"integrity\": \"sha512-A2is4PLG+eeSfoTMA95/s4pvAoSo2mKtiM5jlHkAVewmiO8ISFTFKZjH7UAM1Atli/OT/7JHOrJRJiMKUZKYBw==\",\n      \"deprecated\": \"Use your platform's native DOMException instead\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"webidl-conversions\": \"^7.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/ecmarkup/node_modules/escodegen\": {\n      \"version\": \"2.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/escodegen/-/escodegen-2.1.0.tgz\",\n      \"integrity\": \"sha512-2NlIDTwUWJN0mRPQOdtQBzbUHvdGY2P1VXSyU83Q3xKxM7WHX2Ql8dKq782Q9TgQUNOLEzEYu9bzLNj1q88I5w==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"esprima\": \"^4.0.1\",\n        \"estraverse\": \"^5.2.0\",\n        \"esutils\": \"^2.0.2\"\n      },\n      \"bin\": {\n        \"escodegen\": \"bin/escodegen.js\",\n        \"esgenerate\": \"bin/esgenerate.js\"\n      },\n      \"engines\": {\n        \"node\": \">=6.0\"\n      },\n      \"optionalDependencies\": {\n        \"source-map\": \"~0.6.1\"\n      }\n    },\n    \"node_modules/ecmarkup/node_modules/estraverse\": {\n      \"version\": \"5.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz\",\n      \"integrity\": \"sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=4.0\"\n      }\n    },\n    \"node_modules/ecmarkup/node_modules/form-data\": {\n      \"version\": \"4.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/form-data/-/form-data-4.0.0.tgz\",\n      \"integrity\": \"sha512-ETEklSGi5t0QMZuiXoA/Q6vcnxcLQP5vdugSpuAyi6SVGi2clPPp+xgEhuMaHC+zGgn31Kd235W35f7Hykkaww==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"asynckit\": \"^0.4.0\",\n        \"combined-stream\": \"^1.0.8\",\n        \"mime-types\": \"^2.1.12\"\n      },\n      \"engines\": {\n        \"node\": \">= 6\"\n      }\n    },\n    \"node_modules/ecmarkup/node_modules/has-flag\": {\n      \"version\": \"4.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz\",\n      \"integrity\": \"sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/ecmarkup/node_modules/html-encoding-sniffer\": {\n      \"version\": \"3.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/html-encoding-sniffer/-/html-encoding-sniffer-3.0.0.tgz\",\n      \"integrity\": \"sha512-oWv4T4yJ52iKrufjnyZPkrN0CH3QnrUqdB6In1g5Fe1mia8GmF36gnfNySxoZtxD5+NmYw1EElVXiBk93UeskA==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"whatwg-encoding\": \"^2.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/ecmarkup/node_modules/http-proxy-agent\": {\n      \"version\": \"5.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/http-proxy-agent/-/http-proxy-agent-5.0.0.tgz\",\n      \"integrity\": \"sha512-n2hY8YdoRE1i7r6M0w9DIw5GgZN0G25P8zLCRQ8rjXtTU3vsNFBI/vWK/UIeE6g5MUUz6avwAPXmL6Fy9D/90w==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"@tootallnate/once\": \"2\",\n        \"agent-base\": \"6\",\n        \"debug\": \"4\"\n      },\n      \"engines\": {\n        \"node\": \">= 6\"\n      }\n    },\n    \"node_modules/ecmarkup/node_modules/https-proxy-agent\": {\n      \"version\": \"5.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-5.0.1.tgz\",\n      \"integrity\": \"sha512-dFcAjpTQFgoLMzC2VwU+C/CbS7uRL0lWmxDITmqm7C+7F0Odmj6s9l6alZc6AELXhrnggM2CeWSXHGOdX2YtwA==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"agent-base\": \"6\",\n        \"debug\": \"4\"\n      },\n      \"engines\": {\n        \"node\": \">= 6\"\n      }\n    },\n    \"node_modules/ecmarkup/node_modules/iconv-lite\": {\n      \"version\": \"0.6.3\",\n      \"resolved\": \"https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.6.3.tgz\",\n      \"integrity\": \"sha512-4fCk79wshMdzMp2rH06qWrJE4iolqLhCUH+OiuIgU++RB0+94NlDL81atO7GX55uUKueo0txHNtvEyI6D7WdMw==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"safer-buffer\": \">= 2.1.2 < 3.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=0.10.0\"\n      }\n    },\n    \"node_modules/ecmarkup/node_modules/js-yaml\": {\n      \"version\": \"3.14.1\",\n      \"resolved\": \"https://registry.npmjs.org/js-yaml/-/js-yaml-3.14.1.tgz\",\n      \"integrity\": \"sha512-okMH7OXXJ7YrN9Ok3/SXrnu4iX9yOk+25nqX4imS2npuvTYDmo/QEZoqwZkYaIDk3jVvBOTOIEgEhaLOynBS9g==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"argparse\": \"^1.0.7\",\n        \"esprima\": \"^4.0.0\"\n      },\n      \"bin\": {\n        \"js-yaml\": \"bin/js-yaml.js\"\n      }\n    },\n    \"node_modules/ecmarkup/node_modules/jsdom\": {\n      \"version\": \"19.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/jsdom/-/jsdom-19.0.0.tgz\",\n      \"integrity\": \"sha512-RYAyjCbxy/vri/CfnjUWJQQtZ3LKlLnDqj+9XLNnJPgEGeirZs3hllKR20re8LUZ6o1b1X4Jat+Qd26zmP41+A==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"abab\": \"^2.0.5\",\n        \"acorn\": \"^8.5.0\",\n        \"acorn-globals\": \"^6.0.0\",\n        \"cssom\": \"^0.5.0\",\n        \"cssstyle\": \"^2.3.0\",\n        \"data-urls\": \"^3.0.1\",\n        \"decimal.js\": \"^10.3.1\",\n        \"domexception\": \"^4.0.0\",\n        \"escodegen\": \"^2.0.0\",\n        \"form-data\": \"^4.0.0\",\n        \"html-encoding-sniffer\": \"^3.0.0\",\n        \"http-proxy-agent\": \"^5.0.0\",\n        \"https-proxy-agent\": \"^5.0.0\",\n        \"is-potential-custom-element-name\": \"^1.0.1\",\n        \"nwsapi\": \"^2.2.0\",\n        \"parse5\": \"6.0.1\",\n        \"saxes\": \"^5.0.1\",\n        \"symbol-tree\": \"^3.2.4\",\n        \"tough-cookie\": \"^4.0.0\",\n        \"w3c-hr-time\": \"^1.0.2\",\n        \"w3c-xmlserializer\": \"^3.0.0\",\n        \"webidl-conversions\": \"^7.0.0\",\n        \"whatwg-encoding\": \"^2.0.0\",\n        \"whatwg-mimetype\": \"^3.0.0\",\n        \"whatwg-url\": \"^10.0.0\",\n        \"ws\": \"^8.2.3\",\n        \"xml-name-validator\": \"^4.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=12\"\n      },\n      \"peerDependencies\": {\n        \"canvas\": \"^2.5.0\"\n      },\n      \"peerDependenciesMeta\": {\n        \"canvas\": {\n          \"optional\": true\n        }\n      }\n    },\n    \"node_modules/ecmarkup/node_modules/ms\": {\n      \"version\": \"2.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/ms/-/ms-2.1.2.tgz\",\n      \"integrity\": \"sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==\",\n      \"dev\": true\n    },\n    \"node_modules/ecmarkup/node_modules/saxes\": {\n      \"version\": \"5.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/saxes/-/saxes-5.0.1.tgz\",\n      \"integrity\": \"sha512-5LBh1Tls8c9xgGjw3QrMwETmTMVk0oFgvrFSvWx62llR2hcEInrKNZ2GZCCuuy2lvWrdl5jhbpeqc5hRYKFOcw==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"xmlchars\": \"^2.2.0\"\n      },\n      \"engines\": {\n        \"node\": \">=10\"\n      }\n    },\n    \"node_modules/ecmarkup/node_modules/sprintf-js\": {\n      \"version\": \"1.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.0.3.tgz\",\n      \"integrity\": \"sha512-D9cPgkvLlV3t3IzL0D0YLvGA9Ahk4PcvVwUbN0dSGr1aP0Nrt4AEnTUbuGvquEC0mA64Gqt1fzirlRs5ibXx8g==\",\n      \"dev\": true\n    },\n    \"node_modules/ecmarkup/node_modules/supports-color\": {\n      \"version\": \"7.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz\",\n      \"integrity\": \"sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"has-flag\": \"^4.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/ecmarkup/node_modules/tough-cookie\": {\n      \"version\": \"4.1.3\",\n      \"resolved\": \"https://registry.npmjs.org/tough-cookie/-/tough-cookie-4.1.3.tgz\",\n      \"integrity\": \"sha512-aX/y5pVRkfRnfmuX+OdbSdXvPe6ieKX/G2s7e98f4poJHnqH3281gDPm/metm6E/WRamfx7WC4HUqkWHfQHprw==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"psl\": \"^1.1.33\",\n        \"punycode\": \"^2.1.1\",\n        \"universalify\": \"^0.2.0\",\n        \"url-parse\": \"^1.5.3\"\n      },\n      \"engines\": {\n        \"node\": \">=6\"\n      }\n    },\n    \"node_modules/ecmarkup/node_modules/tr46\": {\n      \"version\": \"3.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/tr46/-/tr46-3.0.0.tgz\",\n      \"integrity\": \"sha512-l7FvfAHlcmulp8kr+flpQZmVwtu7nfRV7NZujtN0OqES8EL4O4e0qqzL0DC5gAvx/ZC/9lk6rhcUwYvkBnBnYA==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"punycode\": \"^2.1.1\"\n      },\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/ecmarkup/node_modules/universalify\": {\n      \"version\": \"0.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/universalify/-/universalify-0.2.0.tgz\",\n      \"integrity\": \"sha512-CJ1QgKmNg3CwvAv/kOFmtnEN05f0D/cn9QntgNOQlQF9dgvVTHj3t+8JPdjqawCHk7V/KA+fbUqzZ9XWhcqPUg==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">= 4.0.0\"\n      }\n    },\n    \"node_modules/ecmarkup/node_modules/w3c-xmlserializer\": {\n      \"version\": \"3.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/w3c-xmlserializer/-/w3c-xmlserializer-3.0.0.tgz\",\n      \"integrity\": \"sha512-3WFqGEgSXIyGhOmAFtlicJNMjEps8b1MG31NCA0/vOF9+nKMUW1ckhi9cnNHmf88Rzw5V+dwIwsm2C7X8k9aQg==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"xml-name-validator\": \"^4.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/ecmarkup/node_modules/webidl-conversions\": {\n      \"version\": \"7.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-7.0.0.tgz\",\n      \"integrity\": \"sha512-VwddBukDzu71offAQR975unBIGqfKZpM+8ZX6ySk8nYhVoo5CYaZyzt3YBvYtRtO+aoGlqxPg/B87NGVZ/fu6g==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/ecmarkup/node_modules/whatwg-encoding\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/whatwg-encoding/-/whatwg-encoding-2.0.0.tgz\",\n      \"integrity\": \"sha512-p41ogyeMUrw3jWclHWTQg1k05DSVXPLcVxRTYsXUk+ZooOCZLcoYgPZ/HL/D/N+uQPOtcp1me1WhBEaX02mhWg==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"iconv-lite\": \"0.6.3\"\n      },\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/ecmarkup/node_modules/whatwg-mimetype\": {\n      \"version\": \"3.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/whatwg-mimetype/-/whatwg-mimetype-3.0.0.tgz\",\n      \"integrity\": \"sha512-nt+N2dzIutVRxARx1nghPKGv1xHikU7HKdfafKkLNLindmPU/ch3U31NOCGGA/dmPcmb1VlofO0vnKAcsm0o/Q==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/ecmarkup/node_modules/whatwg-url\": {\n      \"version\": \"10.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/whatwg-url/-/whatwg-url-10.0.0.tgz\",\n      \"integrity\": \"sha512-CLxxCmdUby142H5FZzn4D8ikO1cmypvXVQktsgosNy4a4BHrDHeciBBGZhb0bNoR5/MltoCatso+vFjjGx8t0w==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"tr46\": \"^3.0.0\",\n        \"webidl-conversions\": \"^7.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/ecmarkup/node_modules/xml-name-validator\": {\n      \"version\": \"4.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/xml-name-validator/-/xml-name-validator-4.0.0.tgz\",\n      \"integrity\": \"sha512-ICP2e+jsHvAj2E2lIHxa5tjXRlKDJo4IdvPvCXbXQGdzSfmSpNVyIKMvoZHjDY9DP0zV17iI85o90vRFXNccRw==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/ee-first\": {\n      \"version\": \"1.1.1\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/emoji-regex\": {\n      \"version\": \"8.0.0\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/encodeurl\": {\n      \"version\": \"1.0.2\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.8\"\n      }\n    },\n    \"node_modules/end-of-stream\": {\n      \"version\": \"1.4.4\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"once\": \"^1.4.0\"\n      }\n    },\n    \"node_modules/error-ex\": {\n      \"version\": \"1.3.2\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"is-arrayish\": \"^0.2.1\"\n      }\n    },\n    \"node_modules/es-define-property\": {\n      \"version\": \"1.0.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"get-intrinsic\": \"^1.2.4\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.4\"\n      }\n    },\n    \"node_modules/es-errors\": {\n      \"version\": \"1.3.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.4\"\n      }\n    },\n    \"node_modules/es5-ext\": {\n      \"version\": \"0.10.64\",\n      \"dev\": true,\n      \"hasInstallScript\": true,\n      \"license\": \"ISC\",\n      \"dependencies\": {\n        \"es6-iterator\": \"^2.0.3\",\n        \"es6-symbol\": \"^3.1.3\",\n        \"esniff\": \"^2.0.1\",\n        \"next-tick\": \"^1.1.0\"\n      },\n      \"engines\": {\n        \"node\": \">=0.10\"\n      }\n    },\n    \"node_modules/es6-iterator\": {\n      \"version\": \"2.0.3\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"d\": \"1\",\n        \"es5-ext\": \"^0.10.35\",\n        \"es6-symbol\": \"^3.1.1\"\n      }\n    },\n    \"node_modules/es6-symbol\": {\n      \"version\": \"3.1.4\",\n      \"dev\": true,\n      \"license\": \"ISC\",\n      \"dependencies\": {\n        \"d\": \"^1.0.2\",\n        \"ext\": \"^1.7.0\"\n      },\n      \"engines\": {\n        \"node\": \">=0.12\"\n      }\n    },\n    \"node_modules/escalade\": {\n      \"version\": \"3.1.2\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=6\"\n      }\n    },\n    \"node_modules/escape-html\": {\n      \"version\": \"1.0.3\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/escape-string-regexp\": {\n      \"version\": \"1.0.5\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=0.8.0\"\n      }\n    },\n    \"node_modules/escodegen\": {\n      \"version\": \"1.14.1\",\n      \"dev\": true,\n      \"license\": \"BSD-2-Clause\",\n      \"dependencies\": {\n        \"esprima\": \"^4.0.1\",\n        \"estraverse\": \"^4.2.0\",\n        \"esutils\": \"^2.0.2\",\n        \"optionator\": \"^0.8.1\"\n      },\n      \"bin\": {\n        \"escodegen\": \"bin/escodegen.js\",\n        \"esgenerate\": \"bin/esgenerate.js\"\n      },\n      \"engines\": {\n        \"node\": \">=4.0\"\n      },\n      \"optionalDependencies\": {\n        \"source-map\": \"~0.6.1\"\n      }\n    },\n    \"node_modules/eslint-formatter-codeframe\": {\n      \"version\": \"7.32.1\",\n      \"resolved\": \"https://registry.npmjs.org/eslint-formatter-codeframe/-/eslint-formatter-codeframe-7.32.1.tgz\",\n      \"integrity\": \"sha512-DK/3Q3+zVKq/7PdSYiCxPrsDF8H/TRMK5n8Hziwr4IMkMy+XiKSwbpj25AdajS63I/B61Snetq4uVvX9fOLyAg==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"@babel/code-frame\": \"7.12.11\",\n        \"chalk\": \"^4.0.0\"\n      },\n      \"engines\": {\n        \"node\": \"^10.12.0 || >=12.0.0\"\n      }\n    },\n    \"node_modules/eslint-formatter-codeframe/node_modules/chalk\": {\n      \"version\": \"4.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz\",\n      \"integrity\": \"sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"ansi-styles\": \"^4.1.0\",\n        \"supports-color\": \"^7.1.0\"\n      },\n      \"engines\": {\n        \"node\": \">=10\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/chalk/chalk?sponsor=1\"\n      }\n    },\n    \"node_modules/eslint-formatter-codeframe/node_modules/has-flag\": {\n      \"version\": \"4.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz\",\n      \"integrity\": \"sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/eslint-formatter-codeframe/node_modules/supports-color\": {\n      \"version\": \"7.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz\",\n      \"integrity\": \"sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"has-flag\": \"^4.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/esniff\": {\n      \"version\": \"2.0.1\",\n      \"dev\": true,\n      \"license\": \"ISC\",\n      \"dependencies\": {\n        \"d\": \"^1.0.1\",\n        \"es5-ext\": \"^0.10.62\",\n        \"event-emitter\": \"^0.3.5\",\n        \"type\": \"^2.7.2\"\n      },\n      \"engines\": {\n        \"node\": \">=0.10\"\n      }\n    },\n    \"node_modules/esprima\": {\n      \"version\": \"4.0.1\",\n      \"dev\": true,\n      \"license\": \"BSD-2-Clause\",\n      \"bin\": {\n        \"esparse\": \"bin/esparse.js\",\n        \"esvalidate\": \"bin/esvalidate.js\"\n      },\n      \"engines\": {\n        \"node\": \">=4\"\n      }\n    },\n    \"node_modules/estraverse\": {\n      \"version\": \"4.3.0\",\n      \"dev\": true,\n      \"license\": \"BSD-2-Clause\",\n      \"engines\": {\n        \"node\": \">=4.0\"\n      }\n    },\n    \"node_modules/esutils\": {\n      \"version\": \"2.0.3\",\n      \"dev\": true,\n      \"license\": \"BSD-2-Clause\",\n      \"engines\": {\n        \"node\": \">=0.10.0\"\n      }\n    },\n    \"node_modules/etag\": {\n      \"version\": \"1.8.1\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.6\"\n      }\n    },\n    \"node_modules/event-emitter\": {\n      \"version\": \"0.3.5\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"d\": \"1\",\n        \"es5-ext\": \"~0.10.14\"\n      }\n    },\n    \"node_modules/express\": {\n      \"version\": \"4.18.3\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"accepts\": \"~1.3.8\",\n        \"array-flatten\": \"1.1.1\",\n        \"body-parser\": \"1.20.2\",\n        \"content-disposition\": \"0.5.4\",\n        \"content-type\": \"~1.0.4\",\n        \"cookie\": \"0.5.0\",\n        \"cookie-signature\": \"1.0.6\",\n        \"debug\": \"2.6.9\",\n        \"depd\": \"2.0.0\",\n        \"encodeurl\": \"~1.0.2\",\n        \"escape-html\": \"~1.0.3\",\n        \"etag\": \"~1.8.1\",\n        \"finalhandler\": \"1.2.0\",\n        \"fresh\": \"0.5.2\",\n        \"http-errors\": \"2.0.0\",\n        \"merge-descriptors\": \"1.0.1\",\n        \"methods\": \"~1.1.2\",\n        \"on-finished\": \"2.4.1\",\n        \"parseurl\": \"~1.3.3\",\n        \"path-to-regexp\": \"0.1.7\",\n        \"proxy-addr\": \"~2.0.7\",\n        \"qs\": \"6.11.0\",\n        \"range-parser\": \"~1.2.1\",\n        \"safe-buffer\": \"5.2.1\",\n        \"send\": \"0.18.0\",\n        \"serve-static\": \"1.15.0\",\n        \"setprototypeof\": \"1.2.0\",\n        \"statuses\": \"2.0.1\",\n        \"type-is\": \"~1.6.18\",\n        \"utils-merge\": \"1.0.1\",\n        \"vary\": \"~1.1.2\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.10.0\"\n      }\n    },\n    \"node_modules/express/node_modules/qs\": {\n      \"version\": \"6.11.0\",\n      \"dev\": true,\n      \"license\": \"BSD-3-Clause\",\n      \"dependencies\": {\n        \"side-channel\": \"^1.0.4\"\n      },\n      \"engines\": {\n        \"node\": \">=0.6\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/ljharb\"\n      }\n    },\n    \"node_modules/ext\": {\n      \"version\": \"1.7.0\",\n      \"dev\": true,\n      \"license\": \"ISC\",\n      \"dependencies\": {\n        \"type\": \"^2.7.2\"\n      }\n    },\n    \"node_modules/extend\": {\n      \"version\": \"3.0.2\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/extract-zip\": {\n      \"version\": \"2.0.1\",\n      \"dev\": true,\n      \"license\": \"BSD-2-Clause\",\n      \"dependencies\": {\n        \"debug\": \"^4.1.1\",\n        \"get-stream\": \"^5.1.0\",\n        \"yauzl\": \"^2.10.0\"\n      },\n      \"bin\": {\n        \"extract-zip\": \"cli.js\"\n      },\n      \"engines\": {\n        \"node\": \">= 10.17.0\"\n      },\n      \"optionalDependencies\": {\n        \"@types/yauzl\": \"^2.9.1\"\n      }\n    },\n    \"node_modules/extract-zip/node_modules/debug\": {\n      \"version\": \"4.3.4\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"ms\": \"2.1.2\"\n      },\n      \"engines\": {\n        \"node\": \">=6.0\"\n      },\n      \"peerDependenciesMeta\": {\n        \"supports-color\": {\n          \"optional\": true\n        }\n      }\n    },\n    \"node_modules/extract-zip/node_modules/ms\": {\n      \"version\": \"2.1.2\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/extsprintf\": {\n      \"version\": \"1.3.0\",\n      \"dev\": true,\n      \"engines\": [\n        \"node >=0.6.0\"\n      ],\n      \"license\": \"MIT\"\n    },\n    \"node_modules/fast-deep-equal\": {\n      \"version\": \"3.1.1\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/fast-fifo\": {\n      \"version\": \"1.3.2\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/fast-glob\": {\n      \"version\": \"3.3.2\",\n      \"resolved\": \"https://registry.npmjs.org/fast-glob/-/fast-glob-3.3.2.tgz\",\n      \"integrity\": \"sha512-oX2ruAFQwf/Orj8m737Y5adxDQO0LAB7/S5MnxCdTNDd4p6BsyIVsv9JQsATbTSq8KHRpLwIHbVlUNatxd+1Ow==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"@nodelib/fs.stat\": \"^2.0.2\",\n        \"@nodelib/fs.walk\": \"^1.2.3\",\n        \"glob-parent\": \"^5.1.2\",\n        \"merge2\": \"^1.3.0\",\n        \"micromatch\": \"^4.0.4\"\n      },\n      \"engines\": {\n        \"node\": \">=8.6.0\"\n      }\n    },\n    \"node_modules/fast-json-stable-stringify\": {\n      \"version\": \"2.1.0\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/fast-levenshtein\": {\n      \"version\": \"2.0.6\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/fastq\": {\n      \"version\": \"1.17.1\",\n      \"resolved\": \"https://registry.npmjs.org/fastq/-/fastq-1.17.1.tgz\",\n      \"integrity\": \"sha512-sRVD3lWVIXWg6By68ZN7vho9a1pQcN/WBFaAAsDDFzlJjvoGx0P8z7V1t72grFJfJhu3YPZBuu25f7Kaw2jN1w==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"reusify\": \"^1.0.4\"\n      }\n    },\n    \"node_modules/fd-slicer\": {\n      \"version\": \"1.1.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"pend\": \"~1.2.0\"\n      }\n    },\n    \"node_modules/fetch-blob\": {\n      \"version\": \"3.2.0\",\n      \"dev\": true,\n      \"funding\": [\n        {\n          \"type\": \"github\",\n          \"url\": \"https://github.com/sponsors/jimmywarting\"\n        },\n        {\n          \"type\": \"paypal\",\n          \"url\": \"https://paypal.me/jimmywarting\"\n        }\n      ],\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"node-domexception\": \"^1.0.0\",\n        \"web-streams-polyfill\": \"^3.0.3\"\n      },\n      \"engines\": {\n        \"node\": \"^12.20 || >= 14.13\"\n      }\n    },\n    \"node_modules/fill-range\": {\n      \"version\": \"7.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/fill-range/-/fill-range-7.0.1.tgz\",\n      \"integrity\": \"sha512-qOo9F+dMUmC2Lcb4BbVvnKJxTPjCm+RRpe4gDuGrzkL7mEVl/djYSu2OdQ2Pa302N4oqkSg9ir6jaLWJ2USVpQ==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"to-regex-range\": \"^5.0.1\"\n      },\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/finalhandler\": {\n      \"version\": \"1.2.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"debug\": \"2.6.9\",\n        \"encodeurl\": \"~1.0.2\",\n        \"escape-html\": \"~1.0.3\",\n        \"on-finished\": \"2.4.1\",\n        \"parseurl\": \"~1.3.3\",\n        \"statuses\": \"2.0.1\",\n        \"unpipe\": \"~1.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.8\"\n      }\n    },\n    \"node_modules/find-replace\": {\n      \"version\": \"3.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/find-replace/-/find-replace-3.0.0.tgz\",\n      \"integrity\": \"sha512-6Tb2myMioCAgv5kfvP5/PkZZ/ntTpVK39fHY7WkWBgvbeE+VHd/tZuZ4mrC+bxh4cfOZeYKVPaJIZtZXV7GNCQ==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"array-back\": \"^3.0.1\"\n      },\n      \"engines\": {\n        \"node\": \">=4.0.0\"\n      }\n    },\n    \"node_modules/forever-agent\": {\n      \"version\": \"0.6.1\",\n      \"dev\": true,\n      \"license\": \"Apache-2.0\",\n      \"engines\": {\n        \"node\": \"*\"\n      }\n    },\n    \"node_modules/form-data\": {\n      \"version\": \"2.3.3\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"asynckit\": \"^0.4.0\",\n        \"combined-stream\": \"^1.0.6\",\n        \"mime-types\": \"^2.1.12\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.12\"\n      }\n    },\n    \"node_modules/formdata-polyfill\": {\n      \"version\": \"4.0.10\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"fetch-blob\": \"^3.1.2\"\n      },\n      \"engines\": {\n        \"node\": \">=12.20.0\"\n      }\n    },\n    \"node_modules/forwarded\": {\n      \"version\": \"0.2.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.6\"\n      }\n    },\n    \"node_modules/fresh\": {\n      \"version\": \"0.5.2\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.6\"\n      }\n    },\n    \"node_modules/fs-constants\": {\n      \"version\": \"1.0.0\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/fs-extra\": {\n      \"version\": \"11.2.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"graceful-fs\": \"^4.2.0\",\n        \"jsonfile\": \"^6.0.1\",\n        \"universalify\": \"^2.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=14.14\"\n      }\n    },\n    \"node_modules/fs.realpath\": {\n      \"version\": \"1.0.0\",\n      \"dev\": true,\n      \"license\": \"ISC\"\n    },\n    \"node_modules/function-bind\": {\n      \"version\": \"1.1.2\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/ljharb\"\n      }\n    },\n    \"node_modules/get-caller-file\": {\n      \"version\": \"2.0.5\",\n      \"dev\": true,\n      \"license\": \"ISC\",\n      \"engines\": {\n        \"node\": \"6.* || 8.* || >= 10.*\"\n      }\n    },\n    \"node_modules/get-intrinsic\": {\n      \"version\": \"1.2.4\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"es-errors\": \"^1.3.0\",\n        \"function-bind\": \"^1.1.2\",\n        \"has-proto\": \"^1.0.1\",\n        \"has-symbols\": \"^1.0.3\",\n        \"hasown\": \"^2.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.4\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/ljharb\"\n      }\n    },\n    \"node_modules/get-stream\": {\n      \"version\": \"5.2.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"pump\": \"^3.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=8\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/get-uri\": {\n      \"version\": \"6.0.3\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"basic-ftp\": \"^5.0.2\",\n        \"data-uri-to-buffer\": \"^6.0.2\",\n        \"debug\": \"^4.3.4\",\n        \"fs-extra\": \"^11.2.0\"\n      },\n      \"engines\": {\n        \"node\": \">= 14\"\n      }\n    },\n    \"node_modules/get-uri/node_modules/data-uri-to-buffer\": {\n      \"version\": \"6.0.2\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 14\"\n      }\n    },\n    \"node_modules/get-uri/node_modules/debug\": {\n      \"version\": \"4.3.4\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"ms\": \"2.1.2\"\n      },\n      \"engines\": {\n        \"node\": \">=6.0\"\n      },\n      \"peerDependenciesMeta\": {\n        \"supports-color\": {\n          \"optional\": true\n        }\n      }\n    },\n    \"node_modules/get-uri/node_modules/ms\": {\n      \"version\": \"2.1.2\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/getpass\": {\n      \"version\": \"0.1.7\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"assert-plus\": \"^1.0.0\"\n      }\n    },\n    \"node_modules/glob\": {\n      \"version\": \"7.1.6\",\n      \"dev\": true,\n      \"license\": \"ISC\",\n      \"dependencies\": {\n        \"fs.realpath\": \"^1.0.0\",\n        \"inflight\": \"^1.0.4\",\n        \"inherits\": \"2\",\n        \"minimatch\": \"^3.0.4\",\n        \"once\": \"^1.3.0\",\n        \"path-is-absolute\": \"^1.0.0\"\n      },\n      \"engines\": {\n        \"node\": \"*\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/isaacs\"\n      }\n    },\n    \"node_modules/glob-parent\": {\n      \"version\": \"5.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz\",\n      \"integrity\": \"sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"is-glob\": \"^4.0.1\"\n      },\n      \"engines\": {\n        \"node\": \">= 6\"\n      }\n    },\n    \"node_modules/gopd\": {\n      \"version\": \"1.0.1\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"get-intrinsic\": \"^1.1.3\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/ljharb\"\n      }\n    },\n    \"node_modules/graceful-fs\": {\n      \"version\": \"4.2.11\",\n      \"dev\": true,\n      \"license\": \"ISC\"\n    },\n    \"node_modules/grammarkdown\": {\n      \"version\": \"3.3.2\",\n      \"resolved\": \"https://registry.npmjs.org/grammarkdown/-/grammarkdown-3.3.2.tgz\",\n      \"integrity\": \"sha512-inNbeEotDr7MENqoZlms3x4gBzvK73wR2NGpNVnw4oEZcsq2METUbAh0J3VWtEqd9t2+U3poEqiJ9CDgBXr5Tg==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"@esfx/async-canceltoken\": \"^1.0.0-pre.13\",\n        \"@esfx/cancelable\": \"^1.0.0-pre.13\",\n        \"@esfx/disposable\": \"^1.0.0-pre.13\"\n      },\n      \"bin\": {\n        \"grammarkdown\": \"bin/grammarkdown\"\n      }\n    },\n    \"node_modules/har-schema\": {\n      \"version\": \"2.0.0\",\n      \"dev\": true,\n      \"license\": \"ISC\",\n      \"engines\": {\n        \"node\": \">=4\"\n      }\n    },\n    \"node_modules/har-validator\": {\n      \"version\": \"5.1.3\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"ajv\": \"^6.5.5\",\n        \"har-schema\": \"^2.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=6\"\n      }\n    },\n    \"node_modules/has-flag\": {\n      \"version\": \"3.0.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=4\"\n      }\n    },\n    \"node_modules/has-property-descriptors\": {\n      \"version\": \"1.0.2\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"es-define-property\": \"^1.0.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/ljharb\"\n      }\n    },\n    \"node_modules/has-proto\": {\n      \"version\": \"1.0.3\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.4\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/ljharb\"\n      }\n    },\n    \"node_modules/has-symbols\": {\n      \"version\": \"1.0.3\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.4\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/ljharb\"\n      }\n    },\n    \"node_modules/hasown\": {\n      \"version\": \"2.0.1\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"function-bind\": \"^1.1.2\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.4\"\n      }\n    },\n    \"node_modules/highlight.js\": {\n      \"version\": \"11.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/highlight.js/-/highlight.js-11.0.1.tgz\",\n      \"integrity\": \"sha512-EqYpWyTF2s8nMfttfBA2yLKPNoZCO33pLS4MnbXQ4hECf1TKujCt1Kq7QAdrio7roL4+CqsfjqwYj4tYgq0pJQ==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=12.0.0\"\n      }\n    },\n    \"node_modules/html-encoding-sniffer\": {\n      \"version\": \"1.0.2\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"whatwg-encoding\": \"^1.0.1\"\n      }\n    },\n    \"node_modules/html-entities\": {\n      \"version\": \"2.5.2\",\n      \"dev\": true,\n      \"funding\": [\n        {\n          \"type\": \"github\",\n          \"url\": \"https://github.com/sponsors/mdevils\"\n        },\n        {\n          \"type\": \"patreon\",\n          \"url\": \"https://patreon.com/mdevils\"\n        }\n      ],\n      \"license\": \"MIT\"\n    },\n    \"node_modules/html-escape\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/html-escape/-/html-escape-1.0.2.tgz\",\n      \"integrity\": \"sha512-r4cqVc7QAX1/jpPsW9OJNsTTtFhcf+ZBqoA3rWOddMg/y+n6ElKfz+IGKbvV2RTeECDzyrQXa2rpo3IFFrANWg==\",\n      \"dev\": true\n    },\n    \"node_modules/http-errors\": {\n      \"version\": \"2.0.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"depd\": \"2.0.0\",\n        \"inherits\": \"2.0.4\",\n        \"setprototypeof\": \"1.2.0\",\n        \"statuses\": \"2.0.1\",\n        \"toidentifier\": \"1.0.1\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.8\"\n      }\n    },\n    \"node_modules/http-proxy-agent\": {\n      \"version\": \"7.0.2\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"agent-base\": \"^7.1.0\",\n        \"debug\": \"^4.3.4\"\n      },\n      \"engines\": {\n        \"node\": \">= 14\"\n      }\n    },\n    \"node_modules/http-proxy-agent/node_modules/debug\": {\n      \"version\": \"4.3.4\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"ms\": \"2.1.2\"\n      },\n      \"engines\": {\n        \"node\": \">=6.0\"\n      },\n      \"peerDependenciesMeta\": {\n        \"supports-color\": {\n          \"optional\": true\n        }\n      }\n    },\n    \"node_modules/http-proxy-agent/node_modules/ms\": {\n      \"version\": \"2.1.2\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/http-signature\": {\n      \"version\": \"1.2.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"assert-plus\": \"^1.0.0\",\n        \"jsprim\": \"^1.2.2\",\n        \"sshpk\": \"^1.7.0\"\n      },\n      \"engines\": {\n        \"node\": \">=0.8\",\n        \"npm\": \">=1.3.7\"\n      }\n    },\n    \"node_modules/https-proxy-agent\": {\n      \"version\": \"7.0.4\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"agent-base\": \"^7.0.2\",\n        \"debug\": \"4\"\n      },\n      \"engines\": {\n        \"node\": \">= 14\"\n      }\n    },\n    \"node_modules/https-proxy-agent/node_modules/debug\": {\n      \"version\": \"4.3.4\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"ms\": \"2.1.2\"\n      },\n      \"engines\": {\n        \"node\": \">=6.0\"\n      },\n      \"peerDependenciesMeta\": {\n        \"supports-color\": {\n          \"optional\": true\n        }\n      }\n    },\n    \"node_modules/https-proxy-agent/node_modules/ms\": {\n      \"version\": \"2.1.2\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/iconv-lite\": {\n      \"version\": \"0.4.24\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"safer-buffer\": \">= 2.1.2 < 3\"\n      },\n      \"engines\": {\n        \"node\": \">=0.10.0\"\n      }\n    },\n    \"node_modules/ieee754\": {\n      \"version\": \"1.2.1\",\n      \"dev\": true,\n      \"funding\": [\n        {\n          \"type\": \"github\",\n          \"url\": \"https://github.com/sponsors/feross\"\n        },\n        {\n          \"type\": \"patreon\",\n          \"url\": \"https://www.patreon.com/feross\"\n        },\n        {\n          \"type\": \"consulting\",\n          \"url\": \"https://feross.org/support\"\n        }\n      ],\n      \"license\": \"BSD-3-Clause\"\n    },\n    \"node_modules/import-fresh\": {\n      \"version\": \"3.3.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"parent-module\": \"^1.0.0\",\n        \"resolve-from\": \"^4.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=6\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/inflight\": {\n      \"version\": \"1.0.6\",\n      \"dev\": true,\n      \"license\": \"ISC\",\n      \"dependencies\": {\n        \"once\": \"^1.3.0\",\n        \"wrappy\": \"1\"\n      }\n    },\n    \"node_modules/inherits\": {\n      \"version\": \"2.0.4\",\n      \"dev\": true,\n      \"license\": \"ISC\"\n    },\n    \"node_modules/ip-address\": {\n      \"version\": \"9.0.5\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"jsbn\": \"1.1.0\",\n        \"sprintf-js\": \"^1.1.3\"\n      },\n      \"engines\": {\n        \"node\": \">= 12\"\n      }\n    },\n    \"node_modules/ip-address/node_modules/jsbn\": {\n      \"version\": \"1.1.0\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/ip-regex\": {\n      \"version\": \"2.1.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=4\"\n      }\n    },\n    \"node_modules/ipaddr.js\": {\n      \"version\": \"1.9.1\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.10\"\n      }\n    },\n    \"node_modules/is-arrayish\": {\n      \"version\": \"0.2.1\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/is-extglob\": {\n      \"version\": \"2.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz\",\n      \"integrity\": \"sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=0.10.0\"\n      }\n    },\n    \"node_modules/is-fullwidth-code-point\": {\n      \"version\": \"3.0.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/is-glob\": {\n      \"version\": \"4.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz\",\n      \"integrity\": \"sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"is-extglob\": \"^2.1.1\"\n      },\n      \"engines\": {\n        \"node\": \">=0.10.0\"\n      }\n    },\n    \"node_modules/is-interactive\": {\n      \"version\": \"2.0.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=12\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/is-number\": {\n      \"version\": \"7.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz\",\n      \"integrity\": \"sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=0.12.0\"\n      }\n    },\n    \"node_modules/is-potential-custom-element-name\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/is-potential-custom-element-name/-/is-potential-custom-element-name-1.0.1.tgz\",\n      \"integrity\": \"sha512-bCYeRA2rVibKZd+s2625gGnGF/t7DSqDs4dP7CrLA1m7jKWz6pps0LpYLJN8Q64HtmPKJ1hrN3nzPNKFEKOUiQ==\",\n      \"dev\": true\n    },\n    \"node_modules/is-typedarray\": {\n      \"version\": \"1.0.0\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/is-unicode-supported\": {\n      \"version\": \"1.3.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=12\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/isstream\": {\n      \"version\": \"0.1.2\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/js-tokens\": {\n      \"version\": \"4.0.0\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/js-yaml\": {\n      \"version\": \"4.1.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"argparse\": \"^2.0.1\"\n      },\n      \"bin\": {\n        \"js-yaml\": \"bin/js-yaml.js\"\n      }\n    },\n    \"node_modules/jsbn\": {\n      \"version\": \"0.1.1\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/jsdom\": {\n      \"version\": \"15.2.1\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"abab\": \"^2.0.0\",\n        \"acorn\": \"^7.1.0\",\n        \"acorn-globals\": \"^4.3.2\",\n        \"array-equal\": \"^1.0.0\",\n        \"cssom\": \"^0.4.1\",\n        \"cssstyle\": \"^2.0.0\",\n        \"data-urls\": \"^1.1.0\",\n        \"domexception\": \"^1.0.1\",\n        \"escodegen\": \"^1.11.1\",\n        \"html-encoding-sniffer\": \"^1.0.2\",\n        \"nwsapi\": \"^2.2.0\",\n        \"parse5\": \"5.1.0\",\n        \"pn\": \"^1.1.0\",\n        \"request\": \"^2.88.0\",\n        \"request-promise-native\": \"^1.0.7\",\n        \"saxes\": \"^3.1.9\",\n        \"symbol-tree\": \"^3.2.2\",\n        \"tough-cookie\": \"^3.0.1\",\n        \"w3c-hr-time\": \"^1.0.1\",\n        \"w3c-xmlserializer\": \"^1.1.2\",\n        \"webidl-conversions\": \"^4.0.2\",\n        \"whatwg-encoding\": \"^1.0.5\",\n        \"whatwg-mimetype\": \"^2.3.0\",\n        \"whatwg-url\": \"^7.0.0\",\n        \"ws\": \"^7.0.0\",\n        \"xml-name-validator\": \"^3.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=8\"\n      },\n      \"peerDependencies\": {\n        \"canvas\": \"^2.5.0\"\n      },\n      \"peerDependenciesMeta\": {\n        \"canvas\": {\n          \"optional\": true\n        }\n      }\n    },\n    \"node_modules/jsdom/node_modules/acorn\": {\n      \"version\": \"7.2.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"bin\": {\n        \"acorn\": \"bin/acorn\"\n      },\n      \"engines\": {\n        \"node\": \">=0.4.0\"\n      }\n    },\n    \"node_modules/jsdom/node_modules/cssom\": {\n      \"version\": \"0.4.4\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/jsdom/node_modules/parse5\": {\n      \"version\": \"5.1.0\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/jsdom/node_modules/tough-cookie\": {\n      \"version\": \"3.0.1\",\n      \"dev\": true,\n      \"license\": \"BSD-3-Clause\",\n      \"dependencies\": {\n        \"ip-regex\": \"^2.1.0\",\n        \"psl\": \"^1.1.28\",\n        \"punycode\": \"^2.1.1\"\n      },\n      \"engines\": {\n        \"node\": \">=6\"\n      }\n    },\n    \"node_modules/jsdom/node_modules/whatwg-url\": {\n      \"version\": \"7.1.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"lodash.sortby\": \"^4.7.0\",\n        \"tr46\": \"^1.0.1\",\n        \"webidl-conversions\": \"^4.0.2\"\n      }\n    },\n    \"node_modules/jsdom/node_modules/ws\": {\n      \"version\": \"7.5.9\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=8.3.0\"\n      },\n      \"peerDependencies\": {\n        \"bufferutil\": \"^4.0.1\",\n        \"utf-8-validate\": \"^5.0.2\"\n      },\n      \"peerDependenciesMeta\": {\n        \"bufferutil\": {\n          \"optional\": true\n        },\n        \"utf-8-validate\": {\n          \"optional\": true\n        }\n      }\n    },\n    \"node_modules/json-parse-even-better-errors\": {\n      \"version\": \"2.3.1\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/json-schema\": {\n      \"version\": \"0.2.3\",\n      \"dev\": true\n    },\n    \"node_modules/json-schema-traverse\": {\n      \"version\": \"0.4.1\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/json-stringify-safe\": {\n      \"version\": \"5.0.1\",\n      \"dev\": true,\n      \"license\": \"ISC\"\n    },\n    \"node_modules/jsonfile\": {\n      \"version\": \"6.1.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"universalify\": \"^2.0.0\"\n      },\n      \"optionalDependencies\": {\n        \"graceful-fs\": \"^4.1.6\"\n      }\n    },\n    \"node_modules/jsprim\": {\n      \"version\": \"1.4.1\",\n      \"dev\": true,\n      \"engines\": [\n        \"node >=0.6.0\"\n      ],\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"assert-plus\": \"1.0.0\",\n        \"extsprintf\": \"1.3.0\",\n        \"json-schema\": \"0.2.3\",\n        \"verror\": \"1.10.0\"\n      }\n    },\n    \"node_modules/katex\": {\n      \"version\": \"0.16.9\",\n      \"dev\": true,\n      \"funding\": [\n        \"https://opencollective.com/katex\",\n        \"https://github.com/sponsors/katex\"\n      ],\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"commander\": \"^8.3.0\"\n      },\n      \"bin\": {\n        \"katex\": \"cli.js\"\n      }\n    },\n    \"node_modules/katex/node_modules/commander\": {\n      \"version\": \"8.3.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 12\"\n      }\n    },\n    \"node_modules/levn\": {\n      \"version\": \"0.3.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"prelude-ls\": \"~1.1.2\",\n        \"type-check\": \"~0.3.2\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.8.0\"\n      }\n    },\n    \"node_modules/lines-and-columns\": {\n      \"version\": \"1.2.4\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/lodash\": {\n      \"version\": \"4.17.21\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/lodash.camelcase\": {\n      \"version\": \"4.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/lodash.camelcase/-/lodash.camelcase-4.3.0.tgz\",\n      \"integrity\": \"sha512-TwuEnCnxbc3rAvhf/LbG7tJUDzhqXyFnv3dtzLOPgCG/hODL7WFnsbwktkD7yUV0RrreP/l1PALq/YSg6VvjlA==\",\n      \"dev\": true\n    },\n    \"node_modules/lodash.sortby\": {\n      \"version\": \"4.7.0\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/log-symbols\": {\n      \"version\": \"5.1.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"chalk\": \"^5.0.0\",\n        \"is-unicode-supported\": \"^1.1.0\"\n      },\n      \"engines\": {\n        \"node\": \">=12\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/lru-cache\": {\n      \"version\": \"7.18.3\",\n      \"dev\": true,\n      \"license\": \"ISC\",\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/mathjax\": {\n      \"version\": \"3.2.2\",\n      \"dev\": true,\n      \"license\": \"Apache-2.0\"\n    },\n    \"node_modules/mdn-data\": {\n      \"version\": \"2.0.14\",\n      \"dev\": true,\n      \"license\": \"CC0-1.0\"\n    },\n    \"node_modules/media-typer\": {\n      \"version\": \"0.3.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.6\"\n      }\n    },\n    \"node_modules/merge-descriptors\": {\n      \"version\": \"1.0.1\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/merge2\": {\n      \"version\": \"1.4.1\",\n      \"resolved\": \"https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz\",\n      \"integrity\": \"sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">= 8\"\n      }\n    },\n    \"node_modules/methods\": {\n      \"version\": \"1.1.2\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.6\"\n      }\n    },\n    \"node_modules/micromatch\": {\n      \"version\": \"4.0.5\",\n      \"resolved\": \"https://registry.npmjs.org/micromatch/-/micromatch-4.0.5.tgz\",\n      \"integrity\": \"sha512-DMy+ERcEW2q8Z2Po+WNXuw3c5YaUSFjAO5GsJqfEl7UjvtIuFKO6ZrKvcItdy98dwFI2N1tg3zNIdKaQT+aNdA==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"braces\": \"^3.0.2\",\n        \"picomatch\": \"^2.3.1\"\n      },\n      \"engines\": {\n        \"node\": \">=8.6\"\n      }\n    },\n    \"node_modules/mime\": {\n      \"version\": \"1.6.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"bin\": {\n        \"mime\": \"cli.js\"\n      },\n      \"engines\": {\n        \"node\": \">=4\"\n      }\n    },\n    \"node_modules/mime-db\": {\n      \"version\": \"1.52.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.6\"\n      }\n    },\n    \"node_modules/mime-types\": {\n      \"version\": \"2.1.35\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"mime-db\": \"1.52.0\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.6\"\n      }\n    },\n    \"node_modules/mimic-fn\": {\n      \"version\": \"2.1.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=6\"\n      }\n    },\n    \"node_modules/minimatch\": {\n      \"version\": \"3.0.4\",\n      \"dev\": true,\n      \"license\": \"ISC\",\n      \"dependencies\": {\n        \"brace-expansion\": \"^1.1.7\"\n      },\n      \"engines\": {\n        \"node\": \"*\"\n      }\n    },\n    \"node_modules/mitt\": {\n      \"version\": \"3.0.0\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/mkdirp-classic\": {\n      \"version\": \"0.5.3\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/ms\": {\n      \"version\": \"2.0.0\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/negotiator\": {\n      \"version\": \"0.6.3\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.6\"\n      }\n    },\n    \"node_modules/netmask\": {\n      \"version\": \"2.0.2\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.4.0\"\n      }\n    },\n    \"node_modules/next-tick\": {\n      \"version\": \"1.1.0\",\n      \"dev\": true,\n      \"license\": \"ISC\"\n    },\n    \"node_modules/node-domexception\": {\n      \"version\": \"1.0.0\",\n      \"dev\": true,\n      \"funding\": [\n        {\n          \"type\": \"github\",\n          \"url\": \"https://github.com/sponsors/jimmywarting\"\n        },\n        {\n          \"type\": \"github\",\n          \"url\": \"https://paypal.me/jimmywarting\"\n        }\n      ],\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=10.5.0\"\n      }\n    },\n    \"node_modules/node-fetch\": {\n      \"version\": \"3.3.2\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"data-uri-to-buffer\": \"^4.0.0\",\n        \"fetch-blob\": \"^3.1.4\",\n        \"formdata-polyfill\": \"^4.0.10\"\n      },\n      \"engines\": {\n        \"node\": \"^12.20.0 || ^14.13.1 || >=16.0.0\"\n      },\n      \"funding\": {\n        \"type\": \"opencollective\",\n        \"url\": \"https://opencollective.com/node-fetch\"\n      }\n    },\n    \"node_modules/nwsapi\": {\n      \"version\": \"2.2.0\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/oauth-sign\": {\n      \"version\": \"0.9.0\",\n      \"dev\": true,\n      \"license\": \"Apache-2.0\",\n      \"engines\": {\n        \"node\": \"*\"\n      }\n    },\n    \"node_modules/object-inspect\": {\n      \"version\": \"1.13.1\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/ljharb\"\n      }\n    },\n    \"node_modules/on-finished\": {\n      \"version\": \"2.4.1\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"ee-first\": \"1.1.1\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.8\"\n      }\n    },\n    \"node_modules/once\": {\n      \"version\": \"1.4.0\",\n      \"dev\": true,\n      \"license\": \"ISC\",\n      \"dependencies\": {\n        \"wrappy\": \"1\"\n      }\n    },\n    \"node_modules/onetime\": {\n      \"version\": \"5.1.2\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"mimic-fn\": \"^2.1.0\"\n      },\n      \"engines\": {\n        \"node\": \">=6\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/optionator\": {\n      \"version\": \"0.8.3\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"deep-is\": \"~0.1.3\",\n        \"fast-levenshtein\": \"~2.0.6\",\n        \"levn\": \"~0.3.0\",\n        \"prelude-ls\": \"~1.1.2\",\n        \"type-check\": \"~0.3.2\",\n        \"word-wrap\": \"~1.2.3\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.8.0\"\n      }\n    },\n    \"node_modules/ora\": {\n      \"version\": \"6.3.1\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"chalk\": \"^5.0.0\",\n        \"cli-cursor\": \"^4.0.0\",\n        \"cli-spinners\": \"^2.6.1\",\n        \"is-interactive\": \"^2.0.0\",\n        \"is-unicode-supported\": \"^1.1.0\",\n        \"log-symbols\": \"^5.1.0\",\n        \"stdin-discarder\": \"^0.1.0\",\n        \"strip-ansi\": \"^7.0.1\",\n        \"wcwidth\": \"^1.0.1\"\n      },\n      \"engines\": {\n        \"node\": \"^12.20.0 || ^14.13.1 || >=16.0.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/pac-proxy-agent\": {\n      \"version\": \"7.0.1\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"@tootallnate/quickjs-emscripten\": \"^0.23.0\",\n        \"agent-base\": \"^7.0.2\",\n        \"debug\": \"^4.3.4\",\n        \"get-uri\": \"^6.0.1\",\n        \"http-proxy-agent\": \"^7.0.0\",\n        \"https-proxy-agent\": \"^7.0.2\",\n        \"pac-resolver\": \"^7.0.0\",\n        \"socks-proxy-agent\": \"^8.0.2\"\n      },\n      \"engines\": {\n        \"node\": \">= 14\"\n      }\n    },\n    \"node_modules/pac-proxy-agent/node_modules/debug\": {\n      \"version\": \"4.3.4\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"ms\": \"2.1.2\"\n      },\n      \"engines\": {\n        \"node\": \">=6.0\"\n      },\n      \"peerDependenciesMeta\": {\n        \"supports-color\": {\n          \"optional\": true\n        }\n      }\n    },\n    \"node_modules/pac-proxy-agent/node_modules/ms\": {\n      \"version\": \"2.1.2\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/pac-resolver\": {\n      \"version\": \"7.0.1\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"degenerator\": \"^5.0.0\",\n        \"netmask\": \"^2.0.2\"\n      },\n      \"engines\": {\n        \"node\": \">= 14\"\n      }\n    },\n    \"node_modules/pagedjs\": {\n      \"version\": \"0.4.3\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"@babel/polyfill\": \"^7.10.1\",\n        \"@babel/runtime\": \"^7.21.0\",\n        \"clear-cut\": \"^2.0.2\",\n        \"css-tree\": \"^1.1.3\",\n        \"event-emitter\": \"^0.3.5\"\n      }\n    },\n    \"node_modules/pagedjs-cli\": {\n      \"version\": \"0.4.3\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"commander\": \"^11.0.0\",\n        \"express\": \"^4.18.2\",\n        \"html-entities\": \"^2.4.0\",\n        \"katex\": \"^0.16.8\",\n        \"lodash\": \"^4.17.21\",\n        \"mathjax\": \"^3.2.2\",\n        \"node-fetch\": \"^3.3.1\",\n        \"ora\": \"^6.3.1\",\n        \"pagedjs\": \"^0.4.3\",\n        \"pdf-lib\": \"1.17.1\",\n        \"puppeteer\": \"^20.9.0\",\n        \"replace-ext\": \"^2.0.0\"\n      },\n      \"bin\": {\n        \"pagedjs-cli\": \"src/cli.js\"\n      }\n    },\n    \"node_modules/pako\": {\n      \"version\": \"1.0.11\",\n      \"dev\": true,\n      \"license\": \"(MIT AND Zlib)\"\n    },\n    \"node_modules/parent-module\": {\n      \"version\": \"1.0.1\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"callsites\": \"^3.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=6\"\n      }\n    },\n    \"node_modules/parse-json\": {\n      \"version\": \"5.2.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"@babel/code-frame\": \"^7.0.0\",\n        \"error-ex\": \"^1.3.1\",\n        \"json-parse-even-better-errors\": \"^2.3.0\",\n        \"lines-and-columns\": \"^1.1.6\"\n      },\n      \"engines\": {\n        \"node\": \">=8\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/parse5\": {\n      \"version\": \"6.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/parse5/-/parse5-6.0.1.tgz\",\n      \"integrity\": \"sha512-Ofn/CTFzRGTTxwpNEs9PP93gXShHcTq255nzRYSKe8AkVpZY7e1fpmTfOyoIvjP5HG7Z2ZM7VS9PPhQGW2pOpw==\",\n      \"dev\": true\n    },\n    \"node_modules/parseurl\": {\n      \"version\": \"1.3.3\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.8\"\n      }\n    },\n    \"node_modules/path-is-absolute\": {\n      \"version\": \"1.0.1\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=0.10.0\"\n      }\n    },\n    \"node_modules/path-to-regexp\": {\n      \"version\": \"0.1.7\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/path-type\": {\n      \"version\": \"4.0.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/pdf-lib\": {\n      \"version\": \"1.17.1\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"@pdf-lib/standard-fonts\": \"^1.0.0\",\n        \"@pdf-lib/upng\": \"^1.0.1\",\n        \"pako\": \"^1.0.11\",\n        \"tslib\": \"^1.11.1\"\n      }\n    },\n    \"node_modules/pend\": {\n      \"version\": \"1.2.0\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/performance-now\": {\n      \"version\": \"2.1.0\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/picomatch\": {\n      \"version\": \"2.3.1\",\n      \"resolved\": \"https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz\",\n      \"integrity\": \"sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=8.6\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/jonschlinkert\"\n      }\n    },\n    \"node_modules/pn\": {\n      \"version\": \"1.1.0\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/prelude-ls\": {\n      \"version\": \"1.1.2\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">= 0.8.0\"\n      }\n    },\n    \"node_modules/prex\": {\n      \"version\": \"0.4.9\",\n      \"resolved\": \"https://registry.npmjs.org/prex/-/prex-0.4.9.tgz\",\n      \"integrity\": \"sha512-pQCB9AH8MXQRBaelDkhnTkqY6GRiXt1xWlx2hBReZYZwVA0m7EQcnF/K55zr87cCADDHmdD+qq7G6a8Pu+BRFA==\",\n      \"deprecated\": \"This package has been deprecated in favor of several '@esfx/*' packages that replace it. Please see the README for more information\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"@esfx/cancelable\": \"^1.0.0 || >=1.0.0-pre.13\",\n        \"@esfx/disposable\": \"^1.0.0 || >=1.0.0-pre.13\"\n      }\n    },\n    \"node_modules/progress\": {\n      \"version\": \"2.0.3\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=0.4.0\"\n      }\n    },\n    \"node_modules/promise-debounce\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/promise-debounce/-/promise-debounce-1.0.1.tgz\",\n      \"integrity\": \"sha512-jq3Crngf1DaaOXQIOUkPr7LsW4UsWyn0KW1MJ+yMn5njTJ+F1AuHmjjwJhod9HuoNSSMspSLS9PS3V7BrexwjQ==\",\n      \"dev\": true\n    },\n    \"node_modules/proxy-addr\": {\n      \"version\": \"2.0.7\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"forwarded\": \"0.2.0\",\n        \"ipaddr.js\": \"1.9.1\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.10\"\n      }\n    },\n    \"node_modules/proxy-agent\": {\n      \"version\": \"6.3.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"agent-base\": \"^7.0.2\",\n        \"debug\": \"^4.3.4\",\n        \"http-proxy-agent\": \"^7.0.0\",\n        \"https-proxy-agent\": \"^7.0.0\",\n        \"lru-cache\": \"^7.14.1\",\n        \"pac-proxy-agent\": \"^7.0.0\",\n        \"proxy-from-env\": \"^1.1.0\",\n        \"socks-proxy-agent\": \"^8.0.1\"\n      },\n      \"engines\": {\n        \"node\": \">= 14\"\n      }\n    },\n    \"node_modules/proxy-agent/node_modules/debug\": {\n      \"version\": \"4.3.4\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"ms\": \"2.1.2\"\n      },\n      \"engines\": {\n        \"node\": \">=6.0\"\n      },\n      \"peerDependenciesMeta\": {\n        \"supports-color\": {\n          \"optional\": true\n        }\n      }\n    },\n    \"node_modules/proxy-agent/node_modules/ms\": {\n      \"version\": \"2.1.2\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/proxy-from-env\": {\n      \"version\": \"1.1.0\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/psl\": {\n      \"version\": \"1.8.0\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/pump\": {\n      \"version\": \"3.0.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"end-of-stream\": \"^1.1.0\",\n        \"once\": \"^1.3.1\"\n      }\n    },\n    \"node_modules/punycode\": {\n      \"version\": \"2.1.1\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=6\"\n      }\n    },\n    \"node_modules/puppeteer\": {\n      \"version\": \"20.9.0\",\n      \"dev\": true,\n      \"hasInstallScript\": true,\n      \"license\": \"Apache-2.0\",\n      \"dependencies\": {\n        \"@puppeteer/browsers\": \"1.4.6\",\n        \"cosmiconfig\": \"8.2.0\",\n        \"puppeteer-core\": \"20.9.0\"\n      },\n      \"engines\": {\n        \"node\": \">=16.3.0\"\n      }\n    },\n    \"node_modules/puppeteer-core\": {\n      \"version\": \"20.9.0\",\n      \"dev\": true,\n      \"license\": \"Apache-2.0\",\n      \"dependencies\": {\n        \"@puppeteer/browsers\": \"1.4.6\",\n        \"chromium-bidi\": \"0.4.16\",\n        \"cross-fetch\": \"4.0.0\",\n        \"debug\": \"4.3.4\",\n        \"devtools-protocol\": \"0.0.1147663\",\n        \"ws\": \"8.13.0\"\n      },\n      \"engines\": {\n        \"node\": \">=16.3.0\"\n      },\n      \"peerDependencies\": {\n        \"typescript\": \">= 4.7.4\"\n      },\n      \"peerDependenciesMeta\": {\n        \"typescript\": {\n          \"optional\": true\n        }\n      }\n    },\n    \"node_modules/puppeteer-core/node_modules/debug\": {\n      \"version\": \"4.3.4\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"ms\": \"2.1.2\"\n      },\n      \"engines\": {\n        \"node\": \">=6.0\"\n      },\n      \"peerDependenciesMeta\": {\n        \"supports-color\": {\n          \"optional\": true\n        }\n      }\n    },\n    \"node_modules/puppeteer-core/node_modules/ms\": {\n      \"version\": \"2.1.2\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/qs\": {\n      \"version\": \"6.5.2\",\n      \"dev\": true,\n      \"license\": \"BSD-3-Clause\",\n      \"engines\": {\n        \"node\": \">=0.6\"\n      }\n    },\n    \"node_modules/querystringify\": {\n      \"version\": \"2.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/querystringify/-/querystringify-2.2.0.tgz\",\n      \"integrity\": \"sha512-FIqgj2EUvTa7R50u0rGsyTftzjYmv/a3hO345bZNrqabNqjtgiDMgmo4mkUjd+nzU5oF3dClKqFIPUKybUyqoQ==\",\n      \"dev\": true\n    },\n    \"node_modules/queue-microtask\": {\n      \"version\": \"1.2.3\",\n      \"resolved\": \"https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz\",\n      \"integrity\": \"sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==\",\n      \"dev\": true,\n      \"funding\": [\n        {\n          \"type\": \"github\",\n          \"url\": \"https://github.com/sponsors/feross\"\n        },\n        {\n          \"type\": \"patreon\",\n          \"url\": \"https://www.patreon.com/feross\"\n        },\n        {\n          \"type\": \"consulting\",\n          \"url\": \"https://feross.org/support\"\n        }\n      ]\n    },\n    \"node_modules/queue-tick\": {\n      \"version\": \"1.0.1\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/range-parser\": {\n      \"version\": \"1.2.1\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.6\"\n      }\n    },\n    \"node_modules/raw-body\": {\n      \"version\": \"2.5.2\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"bytes\": \"3.1.2\",\n        \"http-errors\": \"2.0.0\",\n        \"iconv-lite\": \"0.4.24\",\n        \"unpipe\": \"1.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.8\"\n      }\n    },\n    \"node_modules/readable-stream\": {\n      \"version\": \"3.6.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"inherits\": \"^2.0.3\",\n        \"string_decoder\": \"^1.1.1\",\n        \"util-deprecate\": \"^1.0.1\"\n      },\n      \"engines\": {\n        \"node\": \">= 6\"\n      }\n    },\n    \"node_modules/reduce-flatten\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/reduce-flatten/-/reduce-flatten-2.0.0.tgz\",\n      \"integrity\": \"sha512-EJ4UNY/U1t2P/2k6oqotuX2Cc3T6nxJwsM0N0asT7dhrtH1ltUxDn4NalSYmPE2rCkVpcf/X6R0wDwcFpzhd4w==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=6\"\n      }\n    },\n    \"node_modules/regenerator-runtime\": {\n      \"version\": \"0.13.11\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/replace-ext\": {\n      \"version\": \"2.0.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 10\"\n      }\n    },\n    \"node_modules/request\": {\n      \"version\": \"2.88.2\",\n      \"dev\": true,\n      \"license\": \"Apache-2.0\",\n      \"dependencies\": {\n        \"aws-sign2\": \"~0.7.0\",\n        \"aws4\": \"^1.8.0\",\n        \"caseless\": \"~0.12.0\",\n        \"combined-stream\": \"~1.0.6\",\n        \"extend\": \"~3.0.2\",\n        \"forever-agent\": \"~0.6.1\",\n        \"form-data\": \"~2.3.2\",\n        \"har-validator\": \"~5.1.3\",\n        \"http-signature\": \"~1.2.0\",\n        \"is-typedarray\": \"~1.0.0\",\n        \"isstream\": \"~0.1.2\",\n        \"json-stringify-safe\": \"~5.0.1\",\n        \"mime-types\": \"~2.1.19\",\n        \"oauth-sign\": \"~0.9.0\",\n        \"performance-now\": \"^2.1.0\",\n        \"qs\": \"~6.5.2\",\n        \"safe-buffer\": \"^5.1.2\",\n        \"tough-cookie\": \"~2.5.0\",\n        \"tunnel-agent\": \"^0.6.0\",\n        \"uuid\": \"^3.3.2\"\n      },\n      \"engines\": {\n        \"node\": \">= 6\"\n      }\n    },\n    \"node_modules/request-promise-core\": {\n      \"version\": \"1.1.3\",\n      \"dev\": true,\n      \"license\": \"ISC\",\n      \"dependencies\": {\n        \"lodash\": \"^4.17.15\"\n      },\n      \"engines\": {\n        \"node\": \">=0.10.0\"\n      },\n      \"peerDependencies\": {\n        \"request\": \"^2.34\"\n      }\n    },\n    \"node_modules/request-promise-native\": {\n      \"version\": \"1.0.8\",\n      \"dev\": true,\n      \"license\": \"ISC\",\n      \"dependencies\": {\n        \"request-promise-core\": \"1.1.3\",\n        \"stealthy-require\": \"^1.1.1\",\n        \"tough-cookie\": \"^2.3.3\"\n      },\n      \"engines\": {\n        \"node\": \">=0.12.0\"\n      },\n      \"peerDependencies\": {\n        \"request\": \"^2.34\"\n      }\n    },\n    \"node_modules/require-directory\": {\n      \"version\": \"2.1.1\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=0.10.0\"\n      }\n    },\n    \"node_modules/requires-port\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/requires-port/-/requires-port-1.0.0.tgz\",\n      \"integrity\": \"sha512-KigOCHcocU3XODJxsu8i/j8T9tzT4adHiecwORRQ0ZZFcp7ahwXuRU1m+yuO90C5ZUyGeGfocHDI14M3L3yDAQ==\",\n      \"dev\": true\n    },\n    \"node_modules/resolve-from\": {\n      \"version\": \"4.0.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=4\"\n      }\n    },\n    \"node_modules/restore-cursor\": {\n      \"version\": \"4.0.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"onetime\": \"^5.1.0\",\n        \"signal-exit\": \"^3.0.2\"\n      },\n      \"engines\": {\n        \"node\": \"^12.20.0 || ^14.13.1 || >=16.0.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/reusify\": {\n      \"version\": \"1.0.4\",\n      \"resolved\": \"https://registry.npmjs.org/reusify/-/reusify-1.0.4.tgz\",\n      \"integrity\": \"sha512-U9nH88a3fc/ekCF1l0/UP1IosiuIjyTh7hBvXVMHYgVcfGvt897Xguj2UOLDeI5BG2m7/uwyaLVT6fbtCwTyzw==\",\n      \"dev\": true,\n      \"engines\": {\n        \"iojs\": \">=1.0.0\",\n        \"node\": \">=0.10.0\"\n      }\n    },\n    \"node_modules/run-parallel\": {\n      \"version\": \"1.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz\",\n      \"integrity\": \"sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==\",\n      \"dev\": true,\n      \"funding\": [\n        {\n          \"type\": \"github\",\n          \"url\": \"https://github.com/sponsors/feross\"\n        },\n        {\n          \"type\": \"patreon\",\n          \"url\": \"https://www.patreon.com/feross\"\n        },\n        {\n          \"type\": \"consulting\",\n          \"url\": \"https://feross.org/support\"\n        }\n      ],\n      \"dependencies\": {\n        \"queue-microtask\": \"^1.2.2\"\n      }\n    },\n    \"node_modules/safe-buffer\": {\n      \"version\": \"5.2.1\",\n      \"dev\": true,\n      \"funding\": [\n        {\n          \"type\": \"github\",\n          \"url\": \"https://github.com/sponsors/feross\"\n        },\n        {\n          \"type\": \"patreon\",\n          \"url\": \"https://www.patreon.com/feross\"\n        },\n        {\n          \"type\": \"consulting\",\n          \"url\": \"https://feross.org/support\"\n        }\n      ],\n      \"license\": \"MIT\"\n    },\n    \"node_modules/safer-buffer\": {\n      \"version\": \"2.1.2\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/saxes\": {\n      \"version\": \"3.1.11\",\n      \"dev\": true,\n      \"license\": \"ISC\",\n      \"dependencies\": {\n        \"xmlchars\": \"^2.1.1\"\n      },\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/send\": {\n      \"version\": \"0.18.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"debug\": \"2.6.9\",\n        \"depd\": \"2.0.0\",\n        \"destroy\": \"1.2.0\",\n        \"encodeurl\": \"~1.0.2\",\n        \"escape-html\": \"~1.0.3\",\n        \"etag\": \"~1.8.1\",\n        \"fresh\": \"0.5.2\",\n        \"http-errors\": \"2.0.0\",\n        \"mime\": \"1.6.0\",\n        \"ms\": \"2.1.3\",\n        \"on-finished\": \"2.4.1\",\n        \"range-parser\": \"~1.2.1\",\n        \"statuses\": \"2.0.1\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.8.0\"\n      }\n    },\n    \"node_modules/send/node_modules/ms\": {\n      \"version\": \"2.1.3\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/serve-static\": {\n      \"version\": \"1.15.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"encodeurl\": \"~1.0.2\",\n        \"escape-html\": \"~1.0.3\",\n        \"parseurl\": \"~1.3.3\",\n        \"send\": \"0.18.0\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.8.0\"\n      }\n    },\n    \"node_modules/set-function-length\": {\n      \"version\": \"1.2.1\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"define-data-property\": \"^1.1.2\",\n        \"es-errors\": \"^1.3.0\",\n        \"function-bind\": \"^1.1.2\",\n        \"get-intrinsic\": \"^1.2.3\",\n        \"gopd\": \"^1.0.1\",\n        \"has-property-descriptors\": \"^1.0.1\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.4\"\n      }\n    },\n    \"node_modules/setprototypeof\": {\n      \"version\": \"1.2.0\",\n      \"dev\": true,\n      \"license\": \"ISC\"\n    },\n    \"node_modules/side-channel\": {\n      \"version\": \"1.0.6\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"call-bind\": \"^1.0.7\",\n        \"es-errors\": \"^1.3.0\",\n        \"get-intrinsic\": \"^1.2.4\",\n        \"object-inspect\": \"^1.13.1\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.4\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/ljharb\"\n      }\n    },\n    \"node_modules/signal-exit\": {\n      \"version\": \"3.0.7\",\n      \"dev\": true,\n      \"license\": \"ISC\"\n    },\n    \"node_modules/smart-buffer\": {\n      \"version\": \"4.2.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 6.0.0\",\n        \"npm\": \">= 3.0.0\"\n      }\n    },\n    \"node_modules/socks\": {\n      \"version\": \"2.8.1\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"ip-address\": \"^9.0.5\",\n        \"smart-buffer\": \"^4.2.0\"\n      },\n      \"engines\": {\n        \"node\": \">= 10.0.0\",\n        \"npm\": \">= 3.0.0\"\n      }\n    },\n    \"node_modules/socks-proxy-agent\": {\n      \"version\": \"8.0.2\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"agent-base\": \"^7.0.2\",\n        \"debug\": \"^4.3.4\",\n        \"socks\": \"^2.7.1\"\n      },\n      \"engines\": {\n        \"node\": \">= 14\"\n      }\n    },\n    \"node_modules/socks-proxy-agent/node_modules/debug\": {\n      \"version\": \"4.3.4\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"ms\": \"2.1.2\"\n      },\n      \"engines\": {\n        \"node\": \">=6.0\"\n      },\n      \"peerDependenciesMeta\": {\n        \"supports-color\": {\n          \"optional\": true\n        }\n      }\n    },\n    \"node_modules/socks-proxy-agent/node_modules/ms\": {\n      \"version\": \"2.1.2\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/source-map\": {\n      \"version\": \"0.6.1\",\n      \"dev\": true,\n      \"license\": \"BSD-3-Clause\",\n      \"engines\": {\n        \"node\": \">=0.10.0\"\n      }\n    },\n    \"node_modules/sprintf-js\": {\n      \"version\": \"1.1.3\",\n      \"dev\": true,\n      \"license\": \"BSD-3-Clause\"\n    },\n    \"node_modules/sshpk\": {\n      \"version\": \"1.16.1\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"asn1\": \"~0.2.3\",\n        \"assert-plus\": \"^1.0.0\",\n        \"bcrypt-pbkdf\": \"^1.0.0\",\n        \"dashdash\": \"^1.12.0\",\n        \"ecc-jsbn\": \"~0.1.1\",\n        \"getpass\": \"^0.1.1\",\n        \"jsbn\": \"~0.1.0\",\n        \"safer-buffer\": \"^2.0.2\",\n        \"tweetnacl\": \"~0.14.0\"\n      },\n      \"bin\": {\n        \"sshpk-conv\": \"bin/sshpk-conv\",\n        \"sshpk-sign\": \"bin/sshpk-sign\",\n        \"sshpk-verify\": \"bin/sshpk-verify\"\n      },\n      \"engines\": {\n        \"node\": \">=0.10.0\"\n      }\n    },\n    \"node_modules/statuses\": {\n      \"version\": \"2.0.1\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.8\"\n      }\n    },\n    \"node_modules/stdin-discarder\": {\n      \"version\": \"0.1.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"bl\": \"^5.0.0\"\n      },\n      \"engines\": {\n        \"node\": \"^12.20.0 || ^14.13.1 || >=16.0.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/stdin-discarder/node_modules/bl\": {\n      \"version\": \"5.1.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"buffer\": \"^6.0.3\",\n        \"inherits\": \"^2.0.4\",\n        \"readable-stream\": \"^3.4.0\"\n      }\n    },\n    \"node_modules/stdin-discarder/node_modules/buffer\": {\n      \"version\": \"6.0.3\",\n      \"dev\": true,\n      \"funding\": [\n        {\n          \"type\": \"github\",\n          \"url\": \"https://github.com/sponsors/feross\"\n        },\n        {\n          \"type\": \"patreon\",\n          \"url\": \"https://www.patreon.com/feross\"\n        },\n        {\n          \"type\": \"consulting\",\n          \"url\": \"https://feross.org/support\"\n        }\n      ],\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"base64-js\": \"^1.3.1\",\n        \"ieee754\": \"^1.2.1\"\n      }\n    },\n    \"node_modules/stealthy-require\": {\n      \"version\": \"1.1.1\",\n      \"dev\": true,\n      \"license\": \"ISC\",\n      \"engines\": {\n        \"node\": \">=0.10.0\"\n      }\n    },\n    \"node_modules/streamx\": {\n      \"version\": \"2.16.1\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"fast-fifo\": \"^1.1.0\",\n        \"queue-tick\": \"^1.0.1\"\n      },\n      \"optionalDependencies\": {\n        \"bare-events\": \"^2.2.0\"\n      }\n    },\n    \"node_modules/string_decoder\": {\n      \"version\": \"1.3.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"safe-buffer\": \"~5.2.0\"\n      }\n    },\n    \"node_modules/string-width\": {\n      \"version\": \"4.2.3\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"emoji-regex\": \"^8.0.0\",\n        \"is-fullwidth-code-point\": \"^3.0.0\",\n        \"strip-ansi\": \"^6.0.1\"\n      },\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/string-width/node_modules/ansi-regex\": {\n      \"version\": \"5.0.1\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/string-width/node_modules/strip-ansi\": {\n      \"version\": \"6.0.1\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"ansi-regex\": \"^5.0.1\"\n      },\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/strip-ansi\": {\n      \"version\": \"7.1.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"ansi-regex\": \"^6.0.1\"\n      },\n      \"engines\": {\n        \"node\": \">=12\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/chalk/strip-ansi?sponsor=1\"\n      }\n    },\n    \"node_modules/supports-color\": {\n      \"version\": \"5.5.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"has-flag\": \"^3.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=4\"\n      }\n    },\n    \"node_modules/symbol-tree\": {\n      \"version\": \"3.2.4\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/table-layout\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/table-layout/-/table-layout-1.0.2.tgz\",\n      \"integrity\": \"sha512-qd/R7n5rQTRFi+Zf2sk5XVVd9UQl6ZkduPFC3S7WEGJAmetDTjY3qPN50eSKzwuzEyQKy5TN2TiZdkIjos2L6A==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"array-back\": \"^4.0.1\",\n        \"deep-extend\": \"~0.6.0\",\n        \"typical\": \"^5.2.0\",\n        \"wordwrapjs\": \"^4.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=8.0.0\"\n      }\n    },\n    \"node_modules/table-layout/node_modules/array-back\": {\n      \"version\": \"4.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/array-back/-/array-back-4.0.2.tgz\",\n      \"integrity\": \"sha512-NbdMezxqf94cnNfWLL7V/im0Ub+Anbb0IoZhvzie8+4HJ4nMQuzHuy49FkGYCJK2yAloZ3meiB6AVMClbrI1vg==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/table-layout/node_modules/typical\": {\n      \"version\": \"5.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/typical/-/typical-5.2.0.tgz\",\n      \"integrity\": \"sha512-dvdQgNDNJo+8B2uBQoqdb11eUCE1JQXhvjC/CZtgvZseVd5TYMXnq0+vuUemXbd/Se29cTaUuPX3YIc2xgbvIg==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/tar-fs\": {\n      \"version\": \"3.0.4\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"mkdirp-classic\": \"^0.5.2\",\n        \"pump\": \"^3.0.0\",\n        \"tar-stream\": \"^3.1.5\"\n      }\n    },\n    \"node_modules/tar-fs/node_modules/tar-stream\": {\n      \"version\": \"3.1.7\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"b4a\": \"^1.6.4\",\n        \"fast-fifo\": \"^1.2.0\",\n        \"streamx\": \"^2.15.0\"\n      }\n    },\n    \"node_modules/tar-stream\": {\n      \"version\": \"2.2.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"bl\": \"^4.0.3\",\n        \"end-of-stream\": \"^1.4.1\",\n        \"fs-constants\": \"^1.0.0\",\n        \"inherits\": \"^2.0.3\",\n        \"readable-stream\": \"^3.1.1\"\n      },\n      \"engines\": {\n        \"node\": \">=6\"\n      }\n    },\n    \"node_modules/through\": {\n      \"version\": \"2.3.8\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/tiny-json-http\": {\n      \"version\": \"7.2.0\",\n      \"dev\": true,\n      \"license\": \"Apache-2.0\"\n    },\n    \"node_modules/to-regex-range\": {\n      \"version\": \"5.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz\",\n      \"integrity\": \"sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"is-number\": \"^7.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=8.0\"\n      }\n    },\n    \"node_modules/toidentifier\": {\n      \"version\": \"1.0.1\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=0.6\"\n      }\n    },\n    \"node_modules/tough-cookie\": {\n      \"version\": \"2.5.0\",\n      \"dev\": true,\n      \"license\": \"BSD-3-Clause\",\n      \"dependencies\": {\n        \"psl\": \"^1.1.28\",\n        \"punycode\": \"^2.1.1\"\n      },\n      \"engines\": {\n        \"node\": \">=0.8\"\n      }\n    },\n    \"node_modules/tr46\": {\n      \"version\": \"1.0.1\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"punycode\": \"^2.1.0\"\n      }\n    },\n    \"node_modules/tslib\": {\n      \"version\": \"1.14.1\",\n      \"dev\": true,\n      \"license\": \"0BSD\"\n    },\n    \"node_modules/tunnel-agent\": {\n      \"version\": \"0.6.0\",\n      \"dev\": true,\n      \"license\": \"Apache-2.0\",\n      \"dependencies\": {\n        \"safe-buffer\": \"^5.0.1\"\n      },\n      \"engines\": {\n        \"node\": \"*\"\n      }\n    },\n    \"node_modules/tweetnacl\": {\n      \"version\": \"0.14.5\",\n      \"dev\": true,\n      \"license\": \"Unlicense\"\n    },\n    \"node_modules/type\": {\n      \"version\": \"2.7.2\",\n      \"dev\": true,\n      \"license\": \"ISC\"\n    },\n    \"node_modules/type-check\": {\n      \"version\": \"0.3.2\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"prelude-ls\": \"~1.1.2\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.8.0\"\n      }\n    },\n    \"node_modules/type-is\": {\n      \"version\": \"1.6.18\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"media-typer\": \"0.3.0\",\n        \"mime-types\": \"~2.1.24\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.6\"\n      }\n    },\n    \"node_modules/typical\": {\n      \"version\": \"4.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/typical/-/typical-4.0.0.tgz\",\n      \"integrity\": \"sha512-VAH4IvQ7BDFYglMd7BPRDfLgxZZX4O4TFcRDA6EN5X7erNJJq+McIEp8np9aVtxrCJ6qx4GTYVfOWNjcqwZgRw==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/unbzip2-stream\": {\n      \"version\": \"1.4.3\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"buffer\": \"^5.2.1\",\n        \"through\": \"^2.3.8\"\n      }\n    },\n    \"node_modules/undici-types\": {\n      \"version\": \"5.26.5\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"optional\": true\n    },\n    \"node_modules/universalify\": {\n      \"version\": \"2.0.1\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 10.0.0\"\n      }\n    },\n    \"node_modules/unpipe\": {\n      \"version\": \"1.0.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.8\"\n      }\n    },\n    \"node_modules/uri-js\": {\n      \"version\": \"4.2.2\",\n      \"dev\": true,\n      \"license\": \"BSD-2-Clause\",\n      \"dependencies\": {\n        \"punycode\": \"^2.1.0\"\n      }\n    },\n    \"node_modules/url-parse\": {\n      \"version\": \"1.5.10\",\n      \"resolved\": \"https://registry.npmjs.org/url-parse/-/url-parse-1.5.10.tgz\",\n      \"integrity\": \"sha512-WypcfiRhfeUP9vvF0j6rw0J3hrWrw6iZv3+22h6iRMJ/8z1Tj6XfLP4DsUix5MhMPnXpiHDoKyoZ/bdCkwBCiQ==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"querystringify\": \"^2.1.1\",\n        \"requires-port\": \"^1.0.0\"\n      }\n    },\n    \"node_modules/util-deprecate\": {\n      \"version\": \"1.0.2\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/utils-merge\": {\n      \"version\": \"1.0.1\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.4.0\"\n      }\n    },\n    \"node_modules/uuid\": {\n      \"version\": \"3.4.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"bin\": {\n        \"uuid\": \"bin/uuid\"\n      }\n    },\n    \"node_modules/vary\": {\n      \"version\": \"1.1.2\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.8\"\n      }\n    },\n    \"node_modules/verror\": {\n      \"version\": \"1.10.0\",\n      \"dev\": true,\n      \"engines\": [\n        \"node >=0.6.0\"\n      ],\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"assert-plus\": \"^1.0.0\",\n        \"core-util-is\": \"1.0.2\",\n        \"extsprintf\": \"^1.2.0\"\n      }\n    },\n    \"node_modules/w3c-hr-time\": {\n      \"version\": \"1.0.2\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"browser-process-hrtime\": \"^1.0.0\"\n      }\n    },\n    \"node_modules/w3c-xmlserializer\": {\n      \"version\": \"1.1.2\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"domexception\": \"^1.0.1\",\n        \"webidl-conversions\": \"^4.0.2\",\n        \"xml-name-validator\": \"^3.0.0\"\n      }\n    },\n    \"node_modules/wcwidth\": {\n      \"version\": \"1.0.1\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"defaults\": \"^1.0.3\"\n      }\n    },\n    \"node_modules/web-streams-polyfill\": {\n      \"version\": \"3.3.3\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 8\"\n      }\n    },\n    \"node_modules/webidl-conversions\": {\n      \"version\": \"4.0.2\",\n      \"dev\": true,\n      \"license\": \"BSD-2-Clause\"\n    },\n    \"node_modules/whatwg-encoding\": {\n      \"version\": \"1.0.5\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"iconv-lite\": \"0.4.24\"\n      }\n    },\n    \"node_modules/whatwg-mimetype\": {\n      \"version\": \"2.3.0\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/whatwg-url\": {\n      \"version\": \"5.0.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"tr46\": \"~0.0.3\",\n        \"webidl-conversions\": \"^3.0.0\"\n      }\n    },\n    \"node_modules/whatwg-url/node_modules/tr46\": {\n      \"version\": \"0.0.3\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/whatwg-url/node_modules/webidl-conversions\": {\n      \"version\": \"3.0.1\",\n      \"dev\": true,\n      \"license\": \"BSD-2-Clause\"\n    },\n    \"node_modules/word-wrap\": {\n      \"version\": \"1.2.3\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=0.10.0\"\n      }\n    },\n    \"node_modules/wordwrapjs\": {\n      \"version\": \"4.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/wordwrapjs/-/wordwrapjs-4.0.1.tgz\",\n      \"integrity\": \"sha512-kKlNACbvHrkpIw6oPeYDSmdCTu2hdMHoyXLTcUKala++lx5Y+wjJ/e474Jqv5abnVmwxw08DiTuHmw69lJGksA==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"reduce-flatten\": \"^2.0.0\",\n        \"typical\": \"^5.2.0\"\n      },\n      \"engines\": {\n        \"node\": \">=8.0.0\"\n      }\n    },\n    \"node_modules/wordwrapjs/node_modules/typical\": {\n      \"version\": \"5.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/typical/-/typical-5.2.0.tgz\",\n      \"integrity\": \"sha512-dvdQgNDNJo+8B2uBQoqdb11eUCE1JQXhvjC/CZtgvZseVd5TYMXnq0+vuUemXbd/Se29cTaUuPX3YIc2xgbvIg==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/wrap-ansi\": {\n      \"version\": \"7.0.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"ansi-styles\": \"^4.0.0\",\n        \"string-width\": \"^4.1.0\",\n        \"strip-ansi\": \"^6.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=10\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/chalk/wrap-ansi?sponsor=1\"\n      }\n    },\n    \"node_modules/wrap-ansi/node_modules/ansi-regex\": {\n      \"version\": \"5.0.1\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/wrap-ansi/node_modules/strip-ansi\": {\n      \"version\": \"6.0.1\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"ansi-regex\": \"^5.0.1\"\n      },\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/wrappy\": {\n      \"version\": \"1.0.2\",\n      \"dev\": true,\n      \"license\": \"ISC\"\n    },\n    \"node_modules/ws\": {\n      \"version\": \"8.13.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=10.0.0\"\n      },\n      \"peerDependencies\": {\n        \"bufferutil\": \"^4.0.1\",\n        \"utf-8-validate\": \">=5.0.2\"\n      },\n      \"peerDependenciesMeta\": {\n        \"bufferutil\": {\n          \"optional\": true\n        },\n        \"utf-8-validate\": {\n          \"optional\": true\n        }\n      }\n    },\n    \"node_modules/xml-name-validator\": {\n      \"version\": \"3.0.0\",\n      \"dev\": true,\n      \"license\": \"Apache-2.0\"\n    },\n    \"node_modules/xmlchars\": {\n      \"version\": \"2.2.0\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/y18n\": {\n      \"version\": \"5.0.8\",\n      \"dev\": true,\n      \"license\": \"ISC\",\n      \"engines\": {\n        \"node\": \">=10\"\n      }\n    },\n    \"node_modules/yargs\": {\n      \"version\": \"17.7.1\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"cliui\": \"^8.0.1\",\n        \"escalade\": \"^3.1.1\",\n        \"get-caller-file\": \"^2.0.5\",\n        \"require-directory\": \"^2.1.1\",\n        \"string-width\": \"^4.2.3\",\n        \"y18n\": \"^5.0.5\",\n        \"yargs-parser\": \"^21.1.1\"\n      },\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/yargs-parser\": {\n      \"version\": \"21.1.1\",\n      \"dev\": true,\n      \"license\": \"ISC\",\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/yauzl\": {\n      \"version\": \"2.10.0\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"buffer-crc32\": \"~0.2.3\",\n        \"fd-slicer\": \"~1.1.0\"\n      }\n    }\n  }\n}\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.3203125,
          "content": "{\n  \"private\": true,\n  \"name\": \"ecma262\",\n  \"version\": \"1.0.0\",\n  \"description\": \"The ECMAScript specification\",\n  \"scripts\": {\n    \"ipr-check\": \"node scripts/check-form tc39/ecma262\",\n    \"build-head\": \"npm run build-only -- --lint-spec --strict\",\n    \"prebuild-only\": \"npm run clean && mkdir out && cp -R img out\",\n    \"build-only\": \"ecmarkup --verbose spec.html --multipage out\",\n    \"build\": \"npm run build-head\",\n    \"build-for-pdf\": \"ecmarkup --verbose spec.html --old-toc --assets external out/index.html\",\n    \"pdf\": \"npm run build-for-pdf && pagedjs-cli --page-size a4 out/index.html -o out/index.pdf\",\n    \"prebuild-snapshot\": \"npm run clean\",\n    \"build-snapshot\": \"npm run build-head && node scripts/insert_snapshot_warning.js\",\n    \"clean\": \"rm -rf out\",\n    \"format\": \"emu-format --write spec.html\",\n    \"test\": \"exit 0\",\n    \"watch\": \"npm run build-only -- --lint-spec --watch\",\n    \"check-commit\": \"node scripts/check-commit\"\n  },\n  \"repository\": \"tc39/ecma262\",\n  \"author\": \"ECMA TC39\",\n  \"license\": \"SEE LICENSE IN https://tc39.es/ecma262/#sec-copyright-and-software-license\",\n  \"homepage\": \"https://tc39.es/ecma262/\",\n  \"devDependencies\": {\n    \"ecmarkup\": \"^20.0.0\",\n    \"glob\": \"^7.1.6\",\n    \"jsdom\": \"^15.0.0\",\n    \"pagedjs\": \"^0.4.3\",\n    \"pagedjs-cli\": \"^0.4.3\",\n    \"tar-stream\": \"^2.2.0\",\n    \"tiny-json-http\": \"^7.1.2\"\n  }\n}\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "spec.html",
          "type": "blob",
          "size": 2800.263671875,
          "content": "<!DOCTYPE html>\n<html lang=\"en-GB-oxendict\">\n<meta charset=\"utf-8\">\n<link rel=\"icon\" href=\"img/favicon.ico\">\n<style>\n  #metadata-block {\n    margin: 4em 0;\n    padding: 10px;\n    border: 1px solid #ee8421;\n  }\n  #metadata-block h1 {\n    font-size: 1.5em;\n    margin-top: 0;\n  }\n  #metadata-block > ul {\n    list-style-type: none;\n    margin: 0; padding: 0;\n  }\n\n  #ecma-logo {\n    width: 500px;\n  }\n\n  .unicode-property-table {\n    table-layout: fixed;\n    width: 100%;\n    font-size: 80%;\n  }\n\n  .corner-cell {\n    position: relative;\n    height: 2lh;\n  }\n  .corner-cell .slash {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(to bottom left, transparent calc(50% - 1px), gray, transparent calc(50% + 1px));\n  }\n  .corner-cell > .column {\n    position: absolute;\n    bottom: 0.4em;\n    left: 1em;\n  }\n  .corner-cell > .row {\n    position: absolute;\n    top: 0.4em;\n    right: 1em;\n  }\n</style>\n<pre class=\"metadata\">\n  title: ECMAScript&reg; 2025 Language&nbsp;Specification\n  shortname: ECMA-262\n  status: draft\n  location: https://tc39.es/ecma262/\n  markEffects: true\n</pre>\n<p><img src=\"img/ecma-logo.svg\" id=\"ecma-logo\" alt=\"Ecma International logo\"></p>\n<div id=\"metadata-block\">\n  <h1>About this Specification</h1>\n  <p>The document at <a href=\"https://tc39.es/ecma262/\">https://tc39.es/ecma262/</a> is the most accurate and up-to-date ECMAScript specification. It contains the content of the most recent yearly snapshot plus any <a href=\"https://github.com/tc39/proposals/blob/HEAD/finished-proposals.md\">finished proposals</a> (those that have reached Stage&nbsp;4 in the <a href=\"https://tc39.es/process-document/\">proposal process</a> and thus are implemented in several implementations and will be in the next practical revision) since that snapshot was taken.</p>\n  <p>This document is available as <a href>a single page</a> and as <a href=\"multipage/\">multiple pages</a>.</p>\n  <h1>Contributing to this Specification</h1>\n  <p>This specification is developed on GitHub with the help of the ECMAScript community. There are a number of ways to contribute to the development of this specification:</p>\n  <ul>\n    <li>GitHub Repository: <a href=\"https://github.com/tc39/ecma262\">https://github.com/tc39/ecma262</a></li>\n    <li>Issues: <a href=\"https://github.com/tc39/ecma262/issues\">All Issues</a>, <a href=\"https://github.com/tc39/ecma262/issues/new\">File a New Issue</a></li>\n    <li>Pull Requests: <a href=\"https://github.com/tc39/ecma262/pulls\">All Pull Requests</a>, <a href=\"https://github.com/tc39/ecma262/pulls/new\">Create a New Pull Request</a></li>\n    <li>Test Suite: <a href=\"https://github.com/tc39/test262\">Test262</a></li>\n    <li>\n      Editors:\n      <ul>\n        <li><a href=\"mailto:syg at google dot com\">Shu-yu Guo</a> (<a href=\"https://twitter.com/_shu\">@_shu</a>)</li>\n        <li><a href=\"mailto:ecma262-editor-list at michael dot ficarra dot me\">Michael Ficarra</a> (<a href=\"https://twitter.com/smooshMap\">@smooshMap</a>)</li>\n        <li><a href=\"mailto:bakkot at gmail dot com\">Kevin Gibbons</a> (<a href=\"https://twitter.com/bakkoting\">@bakkoting</a>)</li>\n      </ul>\n    </li>\n    <li>\n      Community:\n      <ul>\n        <li>Discourse: <a href=\"https://es.discourse.group\">https://es.discourse.group/</a></li>\n        <li>Chat: <a href=\"https://github.com/tc39/how-we-work/blob/HEAD/matrix-guide.md\">Matrix</a></li>\n        <li>Mailing <emu-not-ref>List</emu-not-ref> Archives: <a href=\"https://esdiscuss.org\">https://esdiscuss.org/</a></li>\n      </ul>\n    </li>\n  </ul>\n  <p>Refer to the <emu-xref href=\"#sec-colophon\">colophon</emu-xref> for more information on how this document is created.</p>\n</div>\n\n<emu-intro id=\"sec-intro\">\n  <h1>Introduction</h1>\n  <p>This Ecma Standard defines the ECMAScript 2025 Language. It is the sixteenth edition of the ECMAScript Language Specification. Since publication of the first edition in 1997, ECMAScript has grown to be one of the world's most widely used general-purpose programming languages. It is best known as the language embedded in web browsers but has also been widely adopted for server and embedded applications.</p>\n  <p>ECMAScript is based on several originating technologies, the most well-known being JavaScript (Netscape) and JScript (Microsoft). The language was invented by Brendan Eich at Netscape and first appeared in that company's Navigator 2.0 browser. It has appeared in all subsequent browsers from Netscape and in all browsers from Microsoft starting with Internet Explorer 3.0.</p>\n  <p>The development of the ECMAScript Language Specification started in November 1996. The first edition of this Ecma Standard was adopted by the Ecma General Assembly of June 1997.</p>\n  <p>That Ecma Standard was submitted to ISO/IEC JTC 1 for adoption under the fast-track procedure, and approved as international standard ISO/IEC 16262, in April 1998. The Ecma General Assembly of June 1998 approved the second edition of ECMA-262 to keep it fully aligned with ISO/IEC 16262. Changes between the first and the second edition are editorial in nature.</p>\n  <p>The third edition of the Standard introduced powerful regular expressions, better string handling, new control statements, try/catch exception handling, tighter definition of errors, formatting for numeric output and minor changes in anticipation of future language growth. The third edition of the ECMAScript standard was adopted by the Ecma General Assembly of December 1999 and published as ISO/IEC 16262:2002 in June 2002.</p>\n  <p>After publication of the third edition, ECMAScript achieved massive adoption in conjunction with the World Wide Web where it has become the programming language that is supported by essentially all web browsers. Significant work was done to develop a fourth edition of ECMAScript. However, that work was not completed and not published as the fourth edition of ECMAScript but some of it was incorporated into the development of the sixth edition.</p>\n  <p>The fifth edition of ECMAScript (published as ECMA-262 5<sup>th</sup> edition) codified de facto interpretations of the language specification that have become common among browser implementations and added support for new features that had emerged since the publication of the third edition. Such features include accessor properties, reflective creation and inspection of objects, program control of property attributes, additional array manipulation functions, support for the JSON object encoding format, and a strict mode that provides enhanced error checking and program security. The fifth edition was adopted by the Ecma General Assembly of December 2009.</p>\n  <p>The fifth edition was submitted to ISO/IEC JTC 1 for adoption under the fast-track procedure, and approved as international standard ISO/IEC 16262:2011. Edition 5.1 of the ECMAScript Standard incorporated minor corrections and is the same text as ISO/IEC 16262:2011. The 5.1 Edition was adopted by the Ecma General Assembly of June 2011.</p>\n  <p>Focused development of the sixth edition started in 2009, as the fifth edition was being prepared for publication. However, this was preceded by significant experimentation and language enhancement design efforts dating to the publication of the third edition in 1999. In a very real sense, the completion of the sixth edition is the culmination of a fifteen year effort. The goals for this edition included providing better support for large applications, library creation, and for use of ECMAScript as a compilation target for other languages. Some of its major enhancements included modules, class declarations, lexical block scoping, iterators and generators, promises for asynchronous programming, destructuring patterns, and proper tail calls. The ECMAScript library of built-ins was expanded to support additional data abstractions including maps, sets, and arrays of binary numeric values as well as additional support for Unicode supplementary characters in strings and regular expressions. The built-ins were also made extensible via subclassing. The sixth edition provides the foundation for regular, incremental language and library enhancements. The sixth edition was adopted by the General Assembly of June 2015.</p>\n  <p>ECMAScript 2016 was the first ECMAScript edition released under Ecma TC39's new yearly release cadence and open development process. A plain-text source document was built from the ECMAScript 2015 source document to serve as the base for further development entirely on GitHub. Over the year of this standard's development, hundreds of pull requests and issues were filed representing thousands of bug fixes, editorial fixes and other improvements. Additionally, numerous software tools were developed to aid in this effort including Ecmarkup, Ecmarkdown, and Grammarkdown. ES2016 also included support for a new exponentiation operator and adds a new method to `Array.prototype` called `includes`.</p>\n  <p>ECMAScript 2017 introduced Async Functions, Shared Memory, and Atomics along with smaller language and library enhancements, bug fixes, and editorial updates. Async functions improve the asynchronous programming experience by providing syntax for promise-returning functions. Shared Memory and Atomics introduce a new memory model that allows multi-agent programs to communicate using atomic operations that ensure a well-defined execution order even on parallel CPUs. It also included new static methods on Object: `Object.values`, `Object.entries`, and `Object.getOwnPropertyDescriptors`.</p>\n  <p>ECMAScript 2018 introduced support for asynchronous iteration via the async iterator protocol and async generators. It also included four new regular expression features: the `dotAll` flag, named capture groups, Unicode property escapes, and look-behind assertions. Lastly it included object rest and spread properties.</p>\n  <p>ECMAScript 2019 introduced a few new built-in functions: `flat` and `flatMap` on `Array.prototype` for flattening arrays, `Object.fromEntries` for directly turning the return value of `Object.entries` into a new Object, and `trimStart` and `trimEnd` on `String.prototype` as better-named alternatives to the widely implemented but non-standard `String.prototype.trimLeft` and `trimRight` built-ins. In addition, it included a few minor updates to syntax and semantics. Updated syntax included optional catch binding parameters and allowing U+2028 (LINE SEPARATOR) and U+2029 (PARAGRAPH SEPARATOR) in string literals to align with JSON. Other updates included requiring that `Array.prototype.sort` be a stable sort, requiring that `JSON.stringify` return well-formed UTF-8 regardless of input, and clarifying `Function.prototype.toString` by requiring that it either return the corresponding original source text or a standard placeholder.</p>\n  <p>ECMAScript 2020, the 11<sup>th</sup> edition, introduced the `matchAll` method for Strings, to produce an iterator for all match objects generated by a global regular expression; `import()`, a syntax to asynchronously import Modules with a dynamic specifier; `BigInt`, a new number primitive for working with arbitrary precision integers; `Promise.allSettled`, a new Promise combinator that does not short-circuit; `globalThis`, a universal way to access the global `this` value; dedicated `export * as ns from 'module'` syntax for use within modules; increased standardization of `for-in` enumeration order; `import.meta`, a host-populated object available in Modules that may contain contextual information about the Module; as well as adding two new syntax features to improve working with “nullish” values (*undefined* or *null*): nullish coalescing, a value selection operator; and optional chaining, a property access and function invocation operator that short-circuits if the value to access/invoke is nullish.</p>\n  <p>ECMAScript 2021, the 12<sup>th</sup> edition, introduced the `replaceAll` method for Strings; `Promise.any`, a Promise combinator that short-circuits when an input value is fulfilled; `AggregateError`, a new Error type to represent multiple errors at once; logical assignment operators (`??=`, `&&=`, `||=`); `WeakRef`, for referring to a target object without preserving it from garbage collection, and `FinalizationRegistry`, to manage registration and unregistration of cleanup operations performed when target objects are garbage collected; separators for numeric literals (`1_000`); and `Array.prototype.sort` was made more precise, reducing the amount of cases that result in an implementation-defined sort order.</p>\n  <p>ECMAScript 2022, the 13<sup>th</sup> edition, introduced top-level `await`, allowing the keyword to be used at the top level of modules; new class elements: public and private instance fields, public and private static fields, private instance methods and accessors, and private static methods and accessors; static blocks inside classes, to perform per-class evaluation initialization; the `#x in obj` syntax, to test for presence of private fields on objects; regular expression match indices via the `/d` flag, which provides start and end indices for matched substrings; the `cause` property on `Error` objects, which can be used to record a causation chain in errors; the `at` method for Strings, Arrays, and TypedArrays, which allows relative indexing; and `Object.hasOwn`, a convenient alternative to `Object.prototype.hasOwnProperty`.</p>\n  <p>ECMAScript 2023, the 14<sup>th</sup> edition, introduced the `toSorted`, `toReversed`, `with`, `findLast`, and `findLastIndex` methods on `Array.prototype` and `TypedArray.prototype`, as well as the `toSpliced` method on `Array.prototype`; added support for `#!` comments at the beginning of files to better facilitate executable ECMAScript files; and allowed the use of most Symbols as keys in weak collections.</p>\n  <p>ECMAScript 2024, the 15<sup>th</sup> edition, added facilities for resizing and transferring ArrayBuffers and SharedArrayBuffers; added a new RegExp `/v` flag for creating RegExps with more advanced features for working with sets of strings; and introduced the `Promise.withResolvers` convenience method for constructing Promises, the `Object.groupBy` and `Map.groupBy` methods for aggregating data, the `Atomics.waitAsync` method for asynchronously waiting for a change to shared memory, and the `String.prototype.isWellFormed` and `String.prototype.toWellFormed` methods for checking and ensuring that strings contain only well-formed Unicode.</p>\n  <p>Dozens of individuals representing many organizations have made very significant contributions within Ecma TC39 to the development of this edition and to the prior editions. In addition, a vibrant community has emerged supporting TC39's ECMAScript efforts. This community has reviewed numerous drafts, filed thousands of bug reports, performed implementation experiments, contributed test suites, and educated the world-wide developer community about ECMAScript. Unfortunately, it is impossible to identify and acknowledge every person and organization who has contributed to this effort.</p>\n  <p>\n    Allen Wirfs-Brock<br>\n    ECMA-262, Project Editor, 6<sup>th</sup> Edition\n  </p>\n  <p>\n    Brian Terlson<br>\n    ECMA-262, Project Editor, 7<sup>th</sup> through 10<sup>th</sup> Editions\n  </p>\n  <p>\n    Jordan Harband<br>\n    ECMA-262, Project Editor, 10<sup>th</sup> through 12<sup>th</sup> Editions\n  </p>\n  <p>\n    Shu-yu Guo<br>\n    ECMA-262, Project Editor, 12<sup>th</sup> through 15<sup>th</sup> Editions\n  </p>\n  <p>\n    Michael Ficarra<br>\n    ECMA-262, Project Editor, 12<sup>th</sup> through 15<sup>th</sup> Editions\n  </p>\n  <p>\n    Kevin Gibbons<br>\n    ECMA-262, Project Editor, 12<sup>th</sup> through 15<sup>th</sup> Editions\n  </p>\n</emu-intro>\n\n<emu-clause id=\"sec-scope\">\n  <h1>Scope</h1>\n  <p>This Standard defines the ECMAScript 2025 general-purpose programming language.</p>\n</emu-clause>\n\n<emu-clause id=\"sec-conformance\">\n  <h1>Conformance</h1>\n  <p>A conforming implementation of ECMAScript must provide and support all the types, values, objects, properties, functions, and program syntax and semantics described in this specification.</p>\n  <p>A conforming implementation of ECMAScript must interpret source text input in conformance with the latest version of the Unicode Standard and ISO/IEC 10646.</p>\n  <p>A conforming implementation of ECMAScript that provides an application programming interface (API) that supports programs that need to adapt to the linguistic and cultural conventions used by different human languages and countries must implement the interface defined by the most recent edition of ECMA-402 that is compatible with this specification.</p>\n  <p>A conforming implementation of ECMAScript may provide additional types, values, objects, properties, and functions beyond those described in this specification. In particular, a conforming implementation of ECMAScript may provide properties not described in this specification, and values for those properties, for objects that are described in this specification.</p>\n  <p>A conforming implementation of ECMAScript may support program and regular expression syntax not described in this specification. In particular, a conforming implementation of ECMAScript may support program syntax that makes use of any “future reserved words” noted in subclause <emu-xref href=\"#sec-keywords-and-reserved-words\"></emu-xref> of this specification.</p>\n  <p>A conforming implementation of ECMAScript must not implement any extension that is listed as a Forbidden Extension in subclause <emu-xref href=\"#sec-forbidden-extensions\"></emu-xref>.</p>\n  <p>A conforming implementation of ECMAScript must not redefine any facilities that are not implementation-defined, implementation-approximated, or host-defined.</p>\n  <p>A conforming implementation of ECMAScript may choose to implement or not implement <dfn>Normative Optional</dfn> subclauses. If any Normative Optional behaviour is implemented, all of the behaviour in the containing Normative Optional clause must be implemented. A Normative Optional clause is denoted in this specification with the words \"Normative Optional\" in a coloured box, as shown below.</p>\n\n  <emu-clause id=\"sec-conformance-normative-optional\" oldids=\"sec-conformance.normative-optional\" example normative-optional>\n    <h1>Example Normative Optional Clause Heading</h1>\n    <p>Example clause contents.</p>\n  </emu-clause>\n  <p>A conforming implementation of ECMAScript must implement <dfn>Legacy</dfn> subclauses, unless they are also marked as Normative Optional. All of the language features and behaviours specified within Legacy subclauses have one or more undesirable characteristics. However, their continued usage in existing applications prevents their removal from this specification. These features are not considered part of the core ECMAScript language. Programmers should not use or assume the existence of these features and behaviours when writing new ECMAScript code.</p>\n\n  <emu-clause id=\"sec-conformance-legacy\" example legacy>\n    <h1>Example Legacy Clause Heading</h1>\n    <p>Example clause contents.</p>\n  </emu-clause>\n\n  <emu-clause id=\"sec-conformance-legacy-normative-optional\" example legacy normative-optional>\n    <h1>Example Legacy Normative Optional Clause Heading</h1>\n    <p>Example clause contents.</p>\n  </emu-clause>\n</emu-clause>\n\n<emu-clause id=\"sec-normative-references\">\n  <h1>Normative References</h1>\n  <p>The following referenced documents are indispensable for the application of this document. For dated references, only the edition cited applies. For undated references, the latest edition of the referenced document (including any amendments) applies.</p>\n  <p>IEEE 754-2019, <i>IEEE Standard for Floating-Point Arithmetic</i>.</p>\n  <p>\n    The Unicode Standard.<br>\n    <a href=\"https://unicode.org/versions/latest\">https://unicode.org/versions/latest</a>\n  </p>\n  <p>ISO/IEC 10646, <i>Information Technology — Universal Multiple-Octet Coded Character Set (UCS)</i> plus Amendment 1:2005, Amendment 2:2006, Amendment 3:2008, Amendment 4:2008, and additional amendments and corrigenda, or successor.</p>\n  <p>\n    ECMA-402, <i>ECMAScript Internationalization API Specification</i>, specifically the annual edition corresponding to this edition of this specification.<br>\n    <a href=\"https://www.ecma-international.org/publications-and-standards/standards/ecma-402/\">https://www.ecma-international.org/publications-and-standards/standards/ecma-402/</a>\n  </p>\n  <p>\n    ECMA-404, <i>The JSON Data Interchange Format</i>.<br>\n    <a href=\"https://www.ecma-international.org/publications-and-standards/standards/ecma-404/\">https://www.ecma-international.org/publications-and-standards/standards/ecma-404/</a>\n  </p>\n</emu-clause>\n\n<emu-clause id=\"sec-overview\">\n  <h1>Overview</h1>\n  <p>This section contains a non-normative overview of the ECMAScript language.</p>\n  <p>ECMAScript is an object-oriented programming language for performing computations and manipulating computational objects within a host environment. ECMAScript as defined here is not intended to be computationally self-sufficient; indeed, there are no provisions in this specification for input of external data or output of computed results. Instead, it is expected that the computational environment of an ECMAScript program will provide not only the objects and other facilities described in this specification but also certain environment-specific objects, whose description and behaviour are beyond the scope of this specification except to indicate that they may provide certain properties that can be accessed and certain functions that can be called from an ECMAScript program.</p>\n  <p>ECMAScript was originally designed to be used as a scripting language, but has become widely used as a general-purpose programming language. A <em>scripting language</em> is a programming language that is used to manipulate, customize, and automate the facilities of an existing system. In such systems, useful functionality is already available through a user interface, and the scripting language is a mechanism for exposing that functionality to program control. In this way, the existing system is said to provide a host environment of objects and facilities, which completes the capabilities of the scripting language. A scripting language is intended for use by both professional and non-professional programmers.</p>\n  <p>ECMAScript was originally designed to be a <em>Web scripting language</em>, providing a mechanism to enliven Web pages in browsers and to perform server computation as part of a Web-based client-server architecture. ECMAScript is now used to provide core scripting capabilities for a variety of host environments. Therefore the core language is specified in this document apart from any particular host environment.</p>\n  <p>ECMAScript usage has moved beyond simple scripting and it is now used for the full spectrum of programming tasks in many different environments and scales. As the usage of ECMAScript has expanded, so have the features and facilities it provides. ECMAScript is now a fully featured general-purpose programming language.</p>\n\n  <emu-clause id=\"sec-web-scripting\">\n    <h1>Web Scripting</h1>\n    <p>A web browser provides an ECMAScript host environment for client-side computation including, for instance, objects that represent windows, menus, pop-ups, dialog boxes, text areas, anchors, frames, history, cookies, and input/output. Further, the host environment provides a means to attach scripting code to events such as change of focus, page and image loading, unloading, error and abort, selection, form submission, and mouse actions. Scripting code appears within the HTML and the displayed page is a combination of user interface elements and fixed and computed text and images. The scripting code is reactive to user interaction, and there is no need for a main program.</p>\n    <p>A web server provides a different host environment for server-side computation including objects representing requests, clients, and files; and mechanisms to lock and share data. By using browser-side and server-side scripting together, it is possible to distribute computation between the client and server while providing a customized user interface for a Web-based application.</p>\n    <p>Each Web browser and server that supports ECMAScript supplies its own host environment, completing the ECMAScript execution environment.</p>\n  </emu-clause>\n\n  <emu-clause id=\"sec-hosts-and-implementations\">\n    <h1>Hosts and Implementations</h1>\n    <p>To aid integrating ECMAScript into host environments, this specification defers the definition of certain facilities (e.g., abstract operations), either in whole or in part, to a source outside of this specification. Editorially, this specification distinguishes the following kinds of deferrals.</p>\n    <!-- \"implementation\" below is not a dfn but an em to avoid excessive auto-linking. -->\n    <p>An <em id=\"implementation\">implementation</em> is an external source that further defines facilities enumerated in Annex <emu-xref href=\"#sec-host-layering-points\"></emu-xref> or those that are marked as implementation-defined or implementation-approximated. In informal use, an implementation refers to a concrete artefact, such as a particular web browser.</p>\n    <p>An <dfn id=\"implementation-defined\">implementation-defined</dfn> facility is one that defers its definition to an external source without further qualification. This specification does not make any recommendations for particular behaviours, and conforming implementations are free to choose any behaviour within the constraints put forth by this specification.</p>\n    <p>An <dfn id=\"implementation-approximated\">implementation-approximated</dfn> facility is one that defers its definition to an external source while recommending an ideal behaviour. While conforming implementations are free to choose any behaviour within the constraints put forth by this specification, they are encouraged to strive to approximate the ideal. Some mathematical operations, such as <emu-xref href=\"#sec-math.exp\"><code>Math.exp</code></emu-xref>, are implementation-approximated.</p>\n    <p>A <dfn id=\"host\" variants=\"hosts\">host</dfn> is an external source that further defines facilities listed in Annex <emu-xref href=\"#sec-host-layering-points\"></emu-xref> but does not further define other implementation-defined or implementation-approximated facilities. In informal use, a host refers to the set of all implementations, such as the set of all web browsers, that interface with this specification in the same way via Annex <emu-xref href=\"#sec-host-layering-points\"></emu-xref>. A host is often an external specification, such as WHATWG HTML (<a href=\"https://html.spec.whatwg.org/\">https://html.spec.whatwg.org/</a>). In other words, facilities that are host-defined are often further defined in external specifications.</p>\n    <p>A <dfn id=\"host-hook\" variants=\"host hooks\">host hook</dfn> is an abstract operation that is defined in whole or in part by an external source. All host hooks must be listed in Annex <emu-xref href=\"#sec-host-layering-points\"></emu-xref>. A host hook must conform to at least the following requirements:</p>\n    <ul>\n      <li>It must return either a normal completion or a throw completion.</li>\n    </ul>\n    <p>A <dfn id=\"host-defined\">host-defined</dfn> facility is one that defers its definition to an external source without further qualification and is listed in Annex <emu-xref href=\"#sec-host-layering-points\"></emu-xref>. Implementations that are not hosts may also provide definitions for host-defined facilities.</p>\n    <p>A <dfn id=\"host-environment\" variants=\"host environments\">host environment</dfn> is a particular choice of definition for all host-defined facilities. A host environment typically includes objects or functions which allow obtaining input and providing output as host-defined properties of the global object.</p>\n    <p>This specification follows the editorial convention of always using the most specific term. For example, if a facility is host-defined, it should not be referred to as implementation-defined.</p>\n    <p>Both hosts and implementations may interface with this specification via the language types, specification types, abstract operations, grammar productions, intrinsic objects, and intrinsic symbols defined herein.</p>\n  </emu-clause>\n\n  <emu-clause id=\"sec-ecmascript-overview\">\n    <h1>ECMAScript Overview</h1>\n    <p>The following is an informal overview of ECMAScript—not all parts of the language are described. This overview is not part of the standard proper.</p>\n    <p>ECMAScript is object-based: basic language and host facilities are provided by objects, and an ECMAScript program is a cluster of communicating objects. In ECMAScript, an <em>object</em> is a collection of zero or more <em>properties</em> each with <em>attributes</em> that determine how each property can be used—for example, when the Writable attribute for a property is set to *false*, any attempt by executed ECMAScript code to assign a different value to the property fails. Properties are containers that hold other objects, <em>primitive values</em>, or <em>functions</em>. A primitive value is a member of one of the following built-in types: <b>Undefined</b>, <b>Null</b>, <b>Boolean</b>, <b>Number</b>, <b>BigInt</b>, <b>String</b>, and <b>Symbol;</b> an object is a member of the built-in type <b>Object</b>; and a function is a callable object. A function that is associated with an object via a property is called a <em>method</em>.</p>\n    <p>ECMAScript defines a collection of <em>built-in objects</em> that round out the definition of ECMAScript entities. These built-in objects include the global object; objects that are fundamental to the runtime semantics of the language including `Object`, `Function`, `Boolean`, `Symbol`, and various `Error` objects; objects that represent and manipulate numeric values including `Math`, `Number`, and `Date`; the text processing objects `String` and `RegExp`; objects that are indexed collections of values including `Array` and nine different kinds of Typed Arrays whose elements all have a specific numeric data representation; keyed collections including `Map` and `Set` objects; objects supporting structured data including the `JSON` object, `ArrayBuffer`, `SharedArrayBuffer`, and `DataView`; objects supporting control abstractions including generator functions and `Promise` objects; and reflection objects including `Proxy` and `Reflect`.</p>\n    <p>ECMAScript also defines a set of built-in <em>operators</em>. ECMAScript operators include various unary operations, multiplicative operators, additive operators, bitwise shift operators, relational operators, equality operators, binary bitwise operators, binary logical operators, assignment operators, and the comma operator.</p>\n    <p>Large ECMAScript programs are supported by <em>modules</em> which allow a program to be divided into multiple sequences of statements and declarations. Each module explicitly identifies declarations it uses that need to be provided by other modules and which of its declarations are available for use by other modules.</p>\n    <p>ECMAScript syntax intentionally resembles Java syntax. ECMAScript syntax is relaxed to enable it to serve as an easy-to-use scripting language. For example, a variable is not required to have its type declared nor are types associated with properties, and defined functions are not required to have their declarations appear textually before calls to them.</p>\n\n    <emu-clause id=\"sec-objects\">\n      <h1>Objects</h1>\n      <p>Even though ECMAScript includes syntax for class definitions, ECMAScript objects are not fundamentally class-based such as those in C++, Smalltalk, or Java. Instead objects may be created in various ways including via a literal notation or via <em>constructors</em> which create objects and then execute code that initializes all or part of them by assigning initial values to their properties. Each constructor is a function that has a property named *\"prototype\"* that is used to implement <em>prototype-based inheritance</em> and <em>shared properties</em>. Objects are created by using constructors in <b>new</b> expressions; for example, `new Date(2009, 11)` creates a new Date object. Invoking a constructor without using <b>new</b> has consequences that depend on the constructor. For example, `Date()` produces a string representation of the current date and time rather than an object.</p>\n      <p>Every object created by a constructor has an implicit reference (called the object's <em>prototype</em>) to the value of its constructor's *\"prototype\"* property. Furthermore, a prototype may have a non-*null* implicit reference to its prototype, and so on; this is called the <em>prototype chain</em>. When a reference is made to a property in an object, that reference is to the property of that name in the first object in the prototype chain that contains a property of that name. In other words, first the object mentioned directly is examined for such a property; if that object contains the named property, that is the property to which the reference refers; if that object does not contain the named property, the prototype for that object is examined next; and so on.</p>\n      <emu-figure id=\"figure-1\" caption=\"Object/Prototype Relationships\">\n        <img alt=\"An image of lots of boxes and arrows.\" height=\"354\" src=\"img/figure-1.svg\" width=\"719\">\n      </emu-figure>\n      <p>In a class-based object-oriented language, in general, state is carried by instances, methods are carried by classes, and inheritance is only of structure and behaviour. In ECMAScript, the state and methods are carried by objects, while structure, behaviour, and state are all inherited.</p>\n      <p>All objects that do not directly contain a particular property that their prototype contains share that property and its value. Figure 1 illustrates this:</p>\n      <p><b>CF</b> is a constructor (and also an object). Five objects have been created by using `new` expressions: <b>cf<sub>1</sub></b>, <b>cf<sub>2</sub></b>, <b>cf<sub>3</sub></b>, <b>cf<sub>4</sub></b>, and <b>cf<sub>5</sub></b>. Each of these objects contains properties named *\"q1\"* and *\"q2\"*. The dashed lines represent the implicit prototype relationship; so, for example, <b>cf<sub>3</sub></b>'s prototype is <b>CF<sub>p</sub></b>. The constructor, <b>CF</b>, has two properties itself, named *\"P1\"* and *\"P2\"*, which are not visible to <b>CF<sub>p</sub></b>, <b>cf<sub>1</sub></b>, <b>cf<sub>2</sub></b>, <b>cf<sub>3</sub></b>, <b>cf<sub>4</sub></b>, or <b>cf<sub>5</sub></b>. The property named *\"CFP1\"* in <b>CF<sub>p</sub></b> is shared by <b>cf<sub>1</sub></b>, <b>cf<sub>2</sub></b>, <b>cf<sub>3</sub></b>, <b>cf<sub>4</sub></b>, and <b>cf<sub>5</sub></b> (but not by <b>CF</b>), as are any properties found in <b>CF<sub>p</sub></b>'s implicit prototype chain that are not named *\"q1\"*, *\"q2\"*, or *\"CFP1\"*. Notice that there is no implicit prototype link between <b>CF</b> and <b>CF<sub>p</sub></b>.</p>\n      <p>Unlike most class-based object languages, properties can be added to objects dynamically by assigning values to them. That is, constructors are not required to name or assign values to all or any of the constructed object's properties. In the above diagram, one could add a new shared property for <b>cf<sub>1</sub></b>, <b>cf<sub>2</sub></b>, <b>cf<sub>3</sub></b>, <b>cf<sub>4</sub></b>, and <b>cf<sub>5</sub></b> by assigning a new value to the property in <b>CF<sub>p</sub></b>.</p>\n      <p>Although ECMAScript objects are not inherently class-based, it is often convenient to define class-like abstractions based upon a common pattern of constructor functions, prototype objects, and methods. The ECMAScript built-in objects themselves follow such a class-like pattern. Beginning with ECMAScript 2015, the ECMAScript language includes syntactic class definitions that permit programmers to concisely define objects that conform to the same class-like abstraction pattern used by the built-in objects.</p>\n    </emu-clause>\n\n    <emu-clause id=\"sec-strict-variant-of-ecmascript\">\n      <h1>The Strict Variant of ECMAScript</h1>\n      <p>The ECMAScript Language recognizes the possibility that some users of the language may wish to restrict their usage of some features available in the language. They might do so in the interests of security, to avoid what they consider to be error-prone features, to get enhanced error checking, or for other reasons of their choosing. In support of this possibility, ECMAScript defines a strict variant of the language. The strict variant of the language excludes some specific syntactic and semantic features of the regular ECMAScript language and modifies the detailed semantics of some features. The strict variant also specifies additional error conditions that must be reported by throwing error exceptions in situations that are not specified as errors by the non-strict form of the language.</p>\n      <p>The strict variant of ECMAScript is commonly referred to as the <em>strict mode</em> of the language. Strict mode selection and use of the strict mode syntax and semantics of ECMAScript is explicitly made at the level of individual ECMAScript source text units as described in <emu-xref href=\"#sec-strict-mode-code\"></emu-xref>. Because strict mode is selected at the level of a syntactic source text unit, strict mode only imposes restrictions that have local effect within such a source text unit. Strict mode does not restrict or modify any aspect of the ECMAScript semantics that must operate consistently across multiple source text units. A complete ECMAScript program may be composed of both strict mode and non-strict mode ECMAScript source text units. In this case, strict mode only applies when actually executing code that is defined within a strict mode source text unit.</p>\n      <p>In order to conform to this specification, an ECMAScript implementation must implement both the full unrestricted ECMAScript language and the strict variant of the ECMAScript language as defined by this specification. In addition, an implementation must support the combination of unrestricted and strict mode source text units into a single composite program.</p>\n    </emu-clause>\n  </emu-clause>\n\n  <emu-clause id=\"sec-terms-and-definitions\">\n    <h1>Terms and Definitions</h1>\n    <p>For the purposes of this document, the following terms and definitions apply.</p>\n\n    <emu-clause id=\"sec-terms-and-definitions-implementation-approximated\">\n      <h1>implementation-approximated</h1>\n      <p>an implementation-approximated facility is defined in whole or in part by an external source but has a recommended, ideal behaviour in this specification</p>\n    </emu-clause>\n\n    <emu-clause id=\"sec-terms-and-definitions-implementation-defined\">\n      <h1>implementation-defined</h1>\n      <p>an implementation-defined facility is defined in whole or in part by an external source to this specification</p>\n    </emu-clause>\n\n    <emu-clause id=\"sec-terms-and-definitions-host-defined\">\n      <h1>host-defined</h1>\n      <p>same as implementation-defined</p>\n      <emu-note>\n        <p>Editorially, see clause <emu-xref href=\"#sec-hosts-and-implementations\"></emu-xref>.</p>\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-type\">\n      <h1>type</h1>\n      <p>set of data values as defined in clause <emu-xref href=\"#sec-ecmascript-data-types-and-values\"></emu-xref></p>\n    </emu-clause>\n\n    <emu-clause id=\"sec-primitive-value\">\n      <h1>primitive value</h1>\n      <p>member of one of the types Undefined, Null, Boolean, Number, BigInt, Symbol, or String as defined in clause <emu-xref href=\"#sec-ecmascript-data-types-and-values\"></emu-xref></p>\n      <emu-note>\n        <p>A primitive value is a datum that is represented directly at the lowest level of the language implementation.</p>\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-terms-and-definitions-object\">\n      <h1>object</h1>\n      <p>member of the type Object</p>\n      <emu-note>\n        <p>An object is a collection of properties and has a single prototype object. The prototype may be *null*.</p>\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-constructor\">\n      <h1>constructor</h1>\n      <p>function object that creates and initializes objects</p>\n      <emu-note>\n        <p>The value of a constructor's *\"prototype\"* property is a prototype object that is used to implement inheritance and shared properties.</p>\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-terms-and-definitions-prototype\">\n      <h1>prototype</h1>\n      <p>object that provides shared properties for other objects</p>\n      <emu-note>\n        <p>When a constructor creates an object, that object implicitly references the constructor's *\"prototype\"* property for the purpose of resolving property references. The constructor's *\"prototype\"* property can be referenced by the program expression <code><var>constructor</var>.prototype</code>, and properties added to an object's prototype are shared, through inheritance, by all objects sharing the prototype. Alternatively, a new object may be created with an explicitly specified prototype by using the `Object.create` built-in function.</p>\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-ordinary-object\">\n      <h1>ordinary object</h1>\n      <p>object that has the default behaviour for the essential internal methods that must be supported by all objects</p>\n    </emu-clause>\n\n    <emu-clause id=\"sec-exotic-object\">\n      <h1>exotic object</h1>\n      <p>object that does not have the default behaviour for one or more of the essential internal methods</p>\n      <emu-note>\n        <p>Any object that is not an ordinary object is an exotic object.</p>\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-standard-object\">\n      <h1>standard object</h1>\n      <p>object whose semantics are defined by this specification</p>\n    </emu-clause>\n\n    <emu-clause id=\"sec-built-in-object\">\n      <h1>built-in object</h1>\n      <p>object specified and supplied by an ECMAScript implementation</p>\n      <emu-note>\n        <p>Standard built-in objects are defined in this specification. An ECMAScript implementation may specify and supply additional kinds of built-in objects.</p>\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-undefined-value\">\n      <h1>undefined value</h1>\n      <p>primitive value used when a variable has not been assigned a value</p>\n    </emu-clause>\n\n    <emu-clause id=\"sec-terms-and-definitions-undefined-type\">\n      <h1>Undefined type</h1>\n      <p>type whose sole value is the *undefined* value</p>\n    </emu-clause>\n\n    <emu-clause id=\"sec-null-value\">\n      <h1>null value</h1>\n      <p>primitive value that represents the intentional absence of any object value</p>\n    </emu-clause>\n\n    <emu-clause id=\"sec-terms-and-definitions-null-type\">\n      <h1>Null type</h1>\n      <p>type whose sole value is the *null* value</p>\n    </emu-clause>\n\n    <emu-clause id=\"sec-terms-and-definitions-boolean-value\">\n      <h1>Boolean value</h1>\n      <p>member of the Boolean type</p>\n      <emu-note>\n        <p>There are only two Boolean values, *true* and *false*.</p>\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-terms-and-definitions-boolean-type\">\n      <h1>Boolean type</h1>\n      <p>type consisting of the primitive values *true* and *false*</p>\n    </emu-clause>\n\n    <emu-clause id=\"sec-boolean-object\">\n      <h1>Boolean object</h1>\n      <p>member of the Object type that is an instance of the standard built-in Boolean constructor</p>\n      <emu-note>\n        <p>A Boolean object is created by using the Boolean constructor in a `new` expression, supplying a Boolean value as an argument. The resulting object has an internal slot whose value is the Boolean value. A Boolean object can be coerced to a Boolean value.</p>\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-terms-and-definitions-string-value\">\n      <h1>String value</h1>\n      <p>primitive value that is a finite ordered sequence of zero or more 16-bit unsigned integer values</p>\n      <emu-note>\n        <p>A String value is a member of the String type. Each integer value in the sequence usually represents a single 16-bit unit of UTF-16 text. However, ECMAScript does not place any restrictions or requirements on the values except that they must be 16-bit unsigned integers.</p>\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-terms-and-definitions-string-type\">\n      <h1>String type</h1>\n      <p>set of all possible String values</p>\n    </emu-clause>\n\n    <emu-clause id=\"sec-string-object\">\n      <h1>String object</h1>\n      <p>member of the Object type that is an instance of the standard built-in String constructor</p>\n      <emu-note>\n        <p>A String object is created by using the String constructor in a `new` expression, supplying a String value as an argument. The resulting object has an internal slot whose value is the String value. A String object can be coerced to a String value by calling the String constructor as a function (<emu-xref href=\"#sec-string-constructor-string-value\"></emu-xref>).</p>\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-terms-and-definitions-number-value\">\n      <h1>Number value</h1>\n      <p>primitive value corresponding to a double-precision 64-bit binary format IEEE 754-2019 value</p>\n      <emu-note>\n        <p>A Number value is a member of the Number type and is a direct representation of a number.</p>\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-terms-and-definitions-number-type\">\n      <h1>Number type</h1>\n      <p>set of all possible Number values including the special “Not-a-Number” (NaN) value, positive infinity, and negative infinity</p>\n    </emu-clause>\n\n    <emu-clause id=\"sec-number-object\">\n      <h1>Number object</h1>\n      <p>member of the Object type that is an instance of the standard built-in Number constructor</p>\n      <emu-note>\n        <p>A Number object is created by using the Number constructor in a `new` expression, supplying a Number value as an argument. The resulting object has an internal slot whose value is the Number value. A Number object can be coerced to a Number value by calling the Number constructor as a function (<emu-xref href=\"#sec-number-constructor-number-value\"></emu-xref>).</p>\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-terms-and-definitions-infinity\">\n      <h1>Infinity</h1>\n      <p>Number value that is the positive infinite Number value</p>\n    </emu-clause>\n\n    <emu-clause id=\"sec-terms-and-definitions-nan\">\n      <h1>NaN</h1>\n      <p>Number value that is an IEEE 754-2019 “Not-a-Number” value</p>\n    </emu-clause>\n\n    <emu-clause id=\"sec-terms-and-definitions-bigint-value\">\n      <h1>BigInt value</h1>\n      <p>primitive value corresponding to an arbitrary-precision integer value</p>\n    </emu-clause>\n\n    <emu-clause id=\"sec-terms-and-definitions-bigint-type\">\n      <h1>BigInt type</h1>\n      <p>set of all possible BigInt values</p>\n    </emu-clause>\n\n    <emu-clause id=\"sec-bigint-object\">\n      <h1>BigInt object</h1>\n      <p>member of the Object type that is an instance of the standard built-in BigInt constructor</p>\n    </emu-clause>\n\n    <emu-clause id=\"sec-symbol-value\">\n      <h1>Symbol value</h1>\n      <p>primitive value that represents a unique, non-String Object property key</p>\n    </emu-clause>\n\n    <emu-clause id=\"sec-terms-and-definitions-symbol-type\">\n      <h1>Symbol type</h1>\n      <p>set of all possible Symbol values</p>\n    </emu-clause>\n\n    <emu-clause id=\"sec-symbol-object\">\n      <h1>Symbol object</h1>\n      <p>member of the Object type that is an instance of the standard built-in Symbol constructor</p>\n    </emu-clause>\n\n    <emu-clause id=\"sec-terms-and-definitions-function\">\n      <h1>function</h1>\n      <p>member of the Object type that may be invoked as a subroutine</p>\n      <emu-note>\n        <p>In addition to its properties, a function contains executable code and state that determine how it behaves when invoked. A function's code may or may not be written in ECMAScript.</p>\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-built-in-function\">\n      <h1>built-in function</h1>\n      <p>built-in object that is a function</p>\n      <emu-note>\n        <p>Examples of built-in functions include `parseInt` and `Math.exp`. A host or implementation may provide additional built-in functions that are not described in this specification.</p>\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-built-in-constructor\">\n      <h1>built-in constructor</h1>\n      <p>built-in function that is a constructor</p>\n      <emu-note>\n        <p>Examples of built-in constructors include `Object` and `Function`. A host or implementation may provide additional built-in constructors that are not described in this specification.</p>\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-property\">\n      <h1>property</h1>\n      <p>part of an object that associates a key (either a String value or a Symbol value) and a value</p>\n      <emu-note>\n        <p>Depending upon the form of the property the value may be represented either directly as a data value (a primitive value, an object, or a function object) or indirectly by a pair of accessor functions.</p>\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-method\">\n      <h1>method</h1>\n      <p>function that is the value of a property</p>\n      <emu-note>\n        <p>When a function is called as a method of an object, the object is passed to the function as its *this* value.</p>\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-built-in-method\">\n      <h1>built-in method</h1>\n      <p>method that is a built-in function</p>\n      <emu-note>\n        <p>Standard built-in methods are defined in this specification. A host or implementation may provide additional built-in methods that are not described in this specification.</p>\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-attribute\">\n      <h1>attribute</h1>\n      <p>internal value that defines some characteristic of a property</p>\n    </emu-clause>\n\n    <emu-clause id=\"sec-own-property\">\n      <h1>own property</h1>\n      <p>property that is directly contained by its object</p>\n    </emu-clause>\n\n    <emu-clause id=\"sec-inherited-property\">\n      <h1>inherited property</h1>\n      <p>property of an object that is not an own property but is a property (either own or inherited) of the object's prototype</p>\n    </emu-clause>\n  </emu-clause>\n\n  <emu-clause id=\"sec-organization-of-this-specification\">\n    <h1>Organization of This Specification</h1>\n    <p>The remainder of this specification is organized as follows:</p>\n    <p>Clause <emu-xref href=\"#sec-notational-conventions\"></emu-xref> defines the notational conventions used throughout the specification.</p>\n    <p>Clauses <emu-xref href=\"#sec-ecmascript-data-types-and-values\"></emu-xref> through <emu-xref href=\"#sec-ordinary-and-exotic-objects-behaviours\"></emu-xref> define the execution environment within which ECMAScript programs operate.</p>\n    <p>Clauses <emu-xref href=\"#sec-ecmascript-language-source-code\"></emu-xref> through <emu-xref href=\"#sec-error-handling-and-language-extensions\"></emu-xref> define the actual ECMAScript programming language including its syntactic encoding and the execution semantics of all language features.</p>\n    <p>Clauses <emu-xref href=\"#sec-ecmascript-standard-built-in-objects\"></emu-xref> through <emu-xref href=\"#sec-reflection\"></emu-xref> define the ECMAScript standard library. They include the definitions of all of the standard objects that are available for use by ECMAScript programs as they execute.</p>\n    <p>Clause <emu-xref href=\"#sec-memory-model\"></emu-xref> describes the memory consistency model of accesses on SharedArrayBuffer-backed memory and methods of the Atomics object.</p>\n  </emu-clause>\n</emu-clause>\n\n<emu-clause id=\"sec-notational-conventions\">\n  <h1>Notational Conventions</h1>\n\n  <emu-clause id=\"sec-syntactic-and-lexical-grammars\">\n    <h1>Syntactic and Lexical Grammars</h1>\n\n    <emu-clause id=\"sec-context-free-grammars\">\n      <h1>Context-Free Grammars</h1>\n      <p>A <em>context-free grammar</em> consists of a number of <em>productions</em>. Each production has an abstract symbol called a <em>nonterminal</em> as its <em>left-hand side</em>, and a sequence of zero or more nonterminal and <em>terminal</em> symbols as its <em>right-hand side</em>. For each grammar, the terminal symbols are drawn from a specified alphabet.</p>\n      <p>A <dfn variants=\"chain productions\">chain production</dfn> is a production that has exactly one nonterminal symbol on its right-hand side along with zero or more terminal symbols.</p>\n      <p>Starting from a sentence consisting of a single distinguished nonterminal, called the <dfn variants=\"goal symbols\">goal symbol</dfn>, a given context-free grammar specifies a <em>language</em>, namely, the (perhaps infinite) set of possible sequences of terminal symbols that can result from repeatedly replacing any nonterminal in the sequence with a right-hand side of a production for which the nonterminal is the left-hand side.</p>\n    </emu-clause>\n\n    <emu-clause id=\"sec-lexical-and-regexp-grammars\">\n      <h1>The Lexical and RegExp Grammars</h1>\n      <p>A <em>lexical grammar</em> for ECMAScript is given in clause <emu-xref href=\"#sec-ecmascript-language-lexical-grammar\"></emu-xref>. This grammar has as its terminal symbols Unicode code points that conform to the rules for |SourceCharacter| defined in <emu-xref href=\"#sec-source-text\"></emu-xref>. It defines a set of productions, starting from the goal symbol |InputElementDiv|, |InputElementTemplateTail|, |InputElementRegExp|, |InputElementRegExpOrTemplateTail|, or |InputElementHashbangOrRegExp|, that describe how sequences of such code points are translated into a sequence of input elements.</p>\n      <p>Input elements other than white space and comments form the terminal symbols for the syntactic grammar for ECMAScript and are called ECMAScript <em>tokens</em>. These tokens are the reserved words, identifiers, literals, and punctuators of the ECMAScript language. Moreover, line terminators, although not considered to be tokens, also become part of the stream of input elements and guide the process of automatic semicolon insertion (<emu-xref href=\"#sec-automatic-semicolon-insertion\"></emu-xref>). Simple white space and single-line comments are discarded and do not appear in the stream of input elements for the syntactic grammar. A |MultiLineComment| (that is, a comment of the form `/*`…`*/` regardless of whether it spans more than one line) is likewise simply discarded if it contains no line terminator; but if a |MultiLineComment| contains one or more line terminators, then it is replaced by a single line terminator, which becomes part of the stream of input elements for the syntactic grammar.</p>\n      <p>A <em>RegExp grammar</em> for ECMAScript is given in <emu-xref href=\"#sec-patterns\"></emu-xref>. This grammar also has as its terminal symbols the code points as defined by |SourceCharacter|. It defines a set of productions, starting from the goal symbol |Pattern|, that describe how sequences of code points are translated into regular expression patterns.</p>\n      <p>Productions of the lexical and RegExp grammars are distinguished by having two colons “<b>::</b>” as separating punctuation. The lexical and RegExp grammars share some productions.</p>\n    </emu-clause>\n\n    <emu-clause id=\"sec-numeric-string-grammar\">\n      <h1>The Numeric String Grammar</h1>\n      <p>A <em>numeric string grammar</em> appears in <emu-xref href=\"#sec-tonumber-applied-to-the-string-type\"></emu-xref>. It has as its terminal symbols |SourceCharacter|, and is used for translating Strings into numeric values starting from the goal symbol |StringNumericLiteral| (which is similar to but distinct from the <emu-xref href=\"#sec-literals-numeric-literals\">lexical grammar for numeric literals</emu-xref>).</p>\n      <p>Productions of the numeric string grammar are distinguished by having three colons “<b>:::</b>” as punctuation, and are never used for parsing source text.</p>\n    </emu-clause>\n\n    <emu-clause id=\"sec-syntactic-grammar\">\n      <h1>The Syntactic Grammar</h1>\n      <p>The <em>syntactic grammar</em> for ECMAScript is given in clauses <emu-xref href=\"#sec-ecmascript-language-expressions\"></emu-xref> through <emu-xref href=\"#sec-ecmascript-language-scripts-and-modules\"></emu-xref>. This grammar has ECMAScript tokens defined by the lexical grammar as its terminal symbols (<emu-xref href=\"#sec-lexical-and-regexp-grammars\"></emu-xref>). It defines a set of productions, starting from two alternative goal symbols |Script| and |Module|, that describe how sequences of tokens form syntactically correct independent components of ECMAScript programs.</p>\n      <p>When a stream of code points is to be parsed as an ECMAScript |Script| or |Module|, it is first converted to a stream of input elements by repeated application of the lexical grammar; this stream of input elements is then parsed by a single application of the syntactic grammar. The input stream is syntactically in error if the tokens in the stream of input elements cannot be parsed as a single instance of the goal nonterminal (|Script| or |Module|), with no tokens left over.</p>\n      <p>When a parse is successful, it constructs a <em>parse tree</em>, a rooted tree structure in which each node is a <dfn variants=\"Parse Nodes\">Parse Node</dfn>. Each Parse Node is an <em>instance</em> of a symbol in the grammar; it represents a span of the source text that can be derived from that symbol. The root node of the parse tree, representing the whole of the source text, is an instance of the parse's goal symbol. When a Parse Node is an instance of a nonterminal, it is also an instance of some production that has that nonterminal as its left-hand side. Moreover, it has zero or more <em>children</em>, one for each symbol on the production's right-hand side: each child is a Parse Node that is an instance of the corresponding symbol.</p>\n      <p>New Parse Nodes are instantiated for each invocation of the parser and never reused between parses even of identical source text. Parse Nodes are considered <dfn>the same Parse Node</dfn> if and only if they represent the same span of source text, are instances of the same grammar symbol, and resulted from the same parser invocation.</p>\n      <emu-note>\n        <p>Parsing the same String multiple times will lead to different Parse Nodes. For example, consider:</p>\n        <pre><code class=\"javascript\">\n          let str = \"1 + 1;\";\n          eval(str);\n          eval(str);\n        </code></pre>\n        <p>Each call to `eval` converts the value of `str` into ECMAScript source text and performs an independent parse that creates its own separate tree of Parse Nodes. The trees are distinct even though each parse operates upon a source text that was derived from the same String value.</p>\n      </emu-note>\n      <emu-note>Parse Nodes are specification artefacts, and implementations are not required to use an analogous data structure.</emu-note>\n      <p>Productions of the syntactic grammar are distinguished by having just one colon “<b>:</b>” as punctuation.</p>\n      <p>The syntactic grammar as presented in clauses <emu-xref href=\"#sec-ecmascript-language-expressions\"></emu-xref> through <emu-xref href=\"#sec-ecmascript-language-scripts-and-modules\"></emu-xref> is not a complete account of which token sequences are accepted as a correct ECMAScript |Script| or |Module|. Certain additional token sequences are also accepted, namely, those that would be described by the grammar if only semicolons were added to the sequence in certain places (such as before line terminator characters). Furthermore, certain token sequences that are described by the grammar are not considered acceptable if a line terminator character appears in certain “awkward” places.</p>\n      <p>In certain cases, in order to avoid ambiguities, the syntactic grammar uses generalized productions that permit token sequences that do not form a valid ECMAScript |Script| or |Module|. For example, this technique is used for object literals and object destructuring patterns. In such cases a more restrictive <em>supplemental grammar</em> is provided that further restricts the acceptable token sequences. Typically, an early error rule will then state that, in certain contexts, \"_P_ <dfn id=\"must-cover\">must cover</dfn> an _N_\", where _P_ is a Parse Node (an instance of the generalized production) and _N_ is a nonterminal from the supplemental grammar. This means:</p>\n      <ol>\n        <li>The sequence of tokens originally matched by _P_ is parsed again using _N_ as the goal symbol. If _N_ takes grammatical parameters, then they are set to the same values used when _P_ was originally parsed.</li>\n        <li>If the sequence of tokens can be parsed as a single instance of _N_, with no tokens left over, then:\n          <ol>\n            <li>We refer to that instance of _N_ (a Parse Node, unique for a given _P_) as \"the _N_ that is <dfn>covered</dfn> by _P_\".</li>\n            <li>All Early Error rules for _N_ and its derived productions also apply to the _N_ that is covered by _P_.</li>\n          </ol>\n        </li>\n        <li>Otherwise (if the parse fails), it is an early Syntax Error.</li>\n      </ol>\n    </emu-clause>\n\n    <emu-clause id=\"sec-grammar-notation\" namespace=\"grammar-notation\">\n      <h1>Grammar Notation</h1>\n\n      <emu-clause id=\"sec-terminal-symbols\">\n        <h1>Terminal Symbols</h1>\n        <p>In the ECMAScript grammars, some terminal symbols are shown in `fixed-width` font. These are to appear in a source text exactly as written. All terminal symbol code points specified in this way are to be understood as the appropriate Unicode code points from the Basic Latin block, as opposed to any similar-looking code points from other Unicode ranges. A code point in a terminal symbol cannot be expressed by a `\\\\` |UnicodeEscapeSequence|.</p>\n        <p>In grammars whose terminal symbols are individual Unicode code points (i.e., the lexical, RegExp, and numeric string grammars), a contiguous run of multiple fixed-width code points appearing in a production is a simple shorthand for the same sequence of code points, written as standalone terminal symbols.</p>\n        <p>For example, the production:</p>\n        <emu-grammar type=\"definition\" example>\n          HexIntegerLiteral :: `0x` HexDigits\n        </emu-grammar>\n        <p>is a shorthand for:</p>\n        <emu-grammar type=\"definition\" example>\n          HexIntegerLiteral :: `0` `x` HexDigits\n        </emu-grammar>\n        <p>In contrast, in the syntactic grammar, a contiguous run of fixed-width code points is a single terminal symbol.</p>\n        <p>Terminal symbols come in two other forms:</p>\n        <ul>\n          <li>In the lexical and RegExp grammars, Unicode code points without a conventional printed representation are instead shown in the form \"&lt;ABBREV>\" where \"ABBREV\" is a mnemonic for the code point or set of code points. These forms are defined in <emu-xref href=\"#sec-unicode-format-control-characters\" title></emu-xref>, <emu-xref href=\"#sec-white-space\" title></emu-xref>, and <emu-xref href=\"#sec-line-terminators\" title></emu-xref>.</li>\n          <li>In the syntactic grammar, certain terminal symbols (e.g. |IdentifierName| and |RegularExpressionLiteral|) are shown in italics, as they refer to the nonterminals of the same name in the lexical grammar.</li>\n        </ul>\n      </emu-clause>\n\n      <emu-clause id=\"sec-nonterminal-symbols-and-productions\">\n        <h1>Nonterminal Symbols and Productions</h1>\n        <p>Nonterminal symbols are shown in <i>italic</i> type. The definition of a nonterminal (also called a “production”) is introduced by the name of the nonterminal being defined followed by one or more colons. (The number of colons indicates to which grammar the production belongs.) One or more alternative right-hand sides for the nonterminal then follow on succeeding lines. For example, the syntactic definition:</p>\n        <emu-grammar type=\"definition\" example>\n          WhileStatement :\n            `while` `(` Expression `)` Statement\n        </emu-grammar>\n        <p>states that the nonterminal |WhileStatement| represents the token `while`, followed by a left parenthesis token, followed by an |Expression|, followed by a right parenthesis token, followed by a |Statement|. The occurrences of |Expression| and |Statement| are themselves nonterminals. As another example, the syntactic definition:</p>\n        <emu-grammar type=\"definition\" example>\n          ArgumentList :\n            AssignmentExpression\n            ArgumentList `,` AssignmentExpression\n        </emu-grammar>\n        <p>states that an |ArgumentList| may represent either a single |AssignmentExpression| or an |ArgumentList|, followed by a comma, followed by an |AssignmentExpression|. This definition of |ArgumentList| is recursive, that is, it is defined in terms of itself. The result is that an |ArgumentList| may contain any positive number of arguments, separated by commas, where each argument expression is an |AssignmentExpression|. Such recursive definitions of nonterminals are common.</p>\n      </emu-clause>\n\n      <emu-clause id=\"sec-optional-symbols\">\n        <h1>Optional Symbols</h1>\n        <p>The subscripted suffix “<sub>opt</sub>”, which may appear after a terminal or nonterminal, indicates an optional symbol. The alternative containing the optional symbol actually specifies two right-hand sides, one that omits the optional element and one that includes it. This means that:</p>\n        <emu-grammar type=\"definition\" example>\n          VariableDeclaration :\n            BindingIdentifier Initializer?\n        </emu-grammar>\n        <p>is a convenient abbreviation for:</p>\n        <emu-grammar type=\"definition\" example>\n          VariableDeclaration :\n            BindingIdentifier\n            BindingIdentifier Initializer\n        </emu-grammar>\n        <p>and that:</p>\n        <emu-grammar type=\"definition\" example>\n          ForStatement :\n            `for` `(` LexicalDeclaration Expression? `;` Expression? `)` Statement\n        </emu-grammar>\n        <p>is a convenient abbreviation for:</p>\n        <emu-grammar type=\"definition\" example>\n          ForStatement :\n            `for` `(` LexicalDeclaration `;` Expression? `)` Statement\n            `for` `(` LexicalDeclaration Expression `;` Expression? `)` Statement\n        </emu-grammar>\n        <p>which in turn is an abbreviation for:</p>\n        <emu-grammar type=\"definition\" example>\n          ForStatement :\n            `for` `(` LexicalDeclaration `;` `)` Statement\n            `for` `(` LexicalDeclaration `;` Expression `)` Statement\n            `for` `(` LexicalDeclaration Expression `;` `)` Statement\n            `for` `(` LexicalDeclaration Expression `;` Expression `)` Statement\n        </emu-grammar>\n        <p>so, in this example, the nonterminal |ForStatement| actually has four alternative right-hand sides.</p>\n      </emu-clause>\n\n      <emu-clause id=\"sec-grammatical-parameters\">\n        <h1>Grammatical Parameters</h1>\n        <p>A production may be parameterized by a subscripted annotation of the form “<sub>[parameters]</sub>”, which may appear as a suffix to the nonterminal symbol defined by the production. “<sub>parameters</sub>” may be either a single name or a comma separated list of names. A parameterized production is shorthand for a set of productions defining all combinations of the parameter names, preceded by an underscore, appended to the parameterized nonterminal symbol. This means that:</p>\n        <emu-grammar type=\"definition\" example>\n          StatementList[Return] :\n            ReturnStatement\n            ExpressionStatement\n        </emu-grammar>\n        <p>is a convenient abbreviation for:</p>\n        <emu-grammar type=\"definition\" example>\n          StatementList :\n            ReturnStatement\n            ExpressionStatement\n\n          StatementList_Return :\n            ReturnStatement\n            ExpressionStatement\n        </emu-grammar>\n        <p>and that:</p>\n        <emu-grammar type=\"definition\" example>\n          StatementList[Return, In] :\n            ReturnStatement\n            ExpressionStatement\n        </emu-grammar>\n        <p>is an abbreviation for:</p>\n        <emu-grammar type=\"definition\" example>\n          StatementList :\n            ReturnStatement\n            ExpressionStatement\n\n          StatementList_Return :\n            ReturnStatement\n            ExpressionStatement\n\n          StatementList_In :\n            ReturnStatement\n            ExpressionStatement\n\n          StatementList_Return_In :\n            ReturnStatement\n            ExpressionStatement\n        </emu-grammar>\n        <p>Multiple parameters produce a combinatoric number of productions, not all of which are necessarily referenced in a complete grammar.</p>\n        <p>References to nonterminals on the right-hand side of a production can also be parameterized. For example:</p>\n        <emu-grammar type=\"definition\" example>\n          StatementList :\n            ReturnStatement\n            ExpressionStatement[+In]\n        </emu-grammar>\n        <p>is equivalent to saying:</p>\n        <emu-grammar type=\"definition\" example>\n          StatementList :\n            ReturnStatement\n            ExpressionStatement_In\n        </emu-grammar>\n        <p>and:</p>\n        <emu-grammar type=\"definition\" example>\n          StatementList :\n            ReturnStatement\n            ExpressionStatement[~In]\n        </emu-grammar>\n        <p>is equivalent to:</p>\n        <emu-grammar type=\"definition\" example>\n          StatementList :\n            ReturnStatement\n            ExpressionStatement\n        </emu-grammar>\n        <p>A nonterminal reference may have both a parameter list and an “<sub>opt</sub>” suffix. For example:</p>\n        <emu-grammar type=\"definition\" example>\n          VariableDeclaration :\n            BindingIdentifier Initializer[+In]?\n        </emu-grammar>\n        <p>is an abbreviation for:</p>\n        <emu-grammar type=\"definition\" example>\n          VariableDeclaration :\n            BindingIdentifier\n            BindingIdentifier Initializer_In\n        </emu-grammar>\n        <p>Prefixing a parameter name with “<sub>?</sub>” on a right-hand side nonterminal reference makes that parameter value dependent upon the occurrence of the parameter name on the reference to the current production's left-hand side symbol. For example:</p>\n        <emu-grammar type=\"definition\" example>\n          VariableDeclaration[In] :\n            BindingIdentifier Initializer[?In]\n        </emu-grammar>\n        <p>is an abbreviation for:</p>\n        <emu-grammar type=\"definition\" example>\n          VariableDeclaration :\n            BindingIdentifier Initializer\n\n          VariableDeclaration_In :\n            BindingIdentifier Initializer_In\n        </emu-grammar>\n        <p>If a right-hand side alternative is prefixed with “[+parameter]” that alternative is only available if the named parameter was used in referencing the production's nonterminal symbol. If a right-hand side alternative is prefixed with “[\\~parameter]” that alternative is only available if the named parameter was <em>not</em> used in referencing the production's nonterminal symbol. This means that:</p>\n        <emu-grammar type=\"definition\" example>\n          StatementList[Return] :\n            [+Return] ReturnStatement\n            ExpressionStatement\n        </emu-grammar>\n        <p>is an abbreviation for:</p>\n        <emu-grammar type=\"definition\" example>\n          StatementList :\n            ExpressionStatement\n\n          StatementList_Return :\n            ReturnStatement\n            ExpressionStatement\n        </emu-grammar>\n        <p>and that:</p>\n        <emu-grammar type=\"definition\" example>\n          StatementList[Return] :\n            [~Return] ReturnStatement\n            ExpressionStatement\n        </emu-grammar>\n        <p>is an abbreviation for:</p>\n        <emu-grammar type=\"definition\" example>\n          StatementList :\n            ReturnStatement\n            ExpressionStatement\n\n          StatementList_Return :\n            ExpressionStatement\n        </emu-grammar>\n      </emu-clause>\n\n      <emu-clause id=\"sec-one-of\">\n        <h1>one of</h1>\n        <p>When the words “<b>one of</b>” follow the colon(s) in a grammar definition, they signify that each of the terminal symbols on the following line or lines is an alternative definition. For example, the lexical grammar for ECMAScript contains the production:</p>\n        <emu-grammar type=\"definition\" example>\n          NonZeroDigit :: one of\n            `1` `2` `3` `4` `5` `6` `7` `8` `9`\n        </emu-grammar>\n        <p>which is merely a convenient abbreviation for:</p>\n        <emu-grammar type=\"definition\" example>\n          NonZeroDigit ::\n            `1`\n            `2`\n            `3`\n            `4`\n            `5`\n            `6`\n            `7`\n            `8`\n            `9`\n        </emu-grammar>\n      </emu-clause>\n\n      <emu-clause id=\"sec-empty\">\n        <h1>[empty]</h1>\n        <p>If the phrase “[empty]” appears as the right-hand side of a production, it indicates that the production's right-hand side contains no terminals or nonterminals.</p>\n      </emu-clause>\n\n      <emu-clause id=\"sec-lookahead-restrictions\">\n        <h1>Lookahead Restrictions</h1>\n        <p>If the phrase “[lookahead = _seq_]” appears in the right-hand side of a production, it indicates that the production may only be used if the token sequence _seq_ is a prefix of the immediately following input token sequence. Similarly, “[lookahead ∈ _set_]”, where _set_ is a finite non-empty set of token sequences, indicates that the production may only be used if some element of _set_ is a prefix of the immediately following token sequence. For convenience, the set can also be written as a nonterminal, in which case it represents the set of all token sequences to which that nonterminal could expand. It is considered an editorial error if the nonterminal could expand to infinitely many distinct token sequences.</p>\n        <p>These conditions may be negated. “[lookahead ≠ _seq_]” indicates that the containing production may only be used if _seq_ is <em>not</em> a prefix of the immediately following input token sequence, and “[lookahead ∉ _set_]” indicates that the production may only be used if <em>no</em> element of _set_ is a prefix of the immediately following token sequence.</p>\n        <p>As an example, given the definitions:</p>\n        <emu-grammar type=\"definition\" example>\n          DecimalDigit :: one of\n            `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`\n\n          DecimalDigits ::\n            DecimalDigit\n            DecimalDigits DecimalDigit\n        </emu-grammar>\n        <p>the definition:</p>\n        <emu-grammar type=\"definition\" example>\n          LookaheadExample ::\n            `n` [lookahead &notin; { `1`, `3`, `5`, `7`, `9` }] DecimalDigits\n            DecimalDigit [lookahead &notin; DecimalDigit]\n        </emu-grammar>\n        <p>matches either the letter `n` followed by one or more decimal digits the first of which is even, or a decimal digit not followed by another decimal digit.</p>\n        <p>Note that when these phrases are used in the syntactic grammar, it may not be possible to unambiguously identify the immediately following token sequence because determining later tokens requires knowing which lexical goal symbol to use at later positions. As such, when these are used in the syntactic grammar, it is considered an editorial error for a token sequence _seq_ to appear in a lookahead restriction (including as part of a set of sequences) if the choices of lexical goal symbols to use could change whether or not _seq_ would be a prefix of the resulting token sequence.</p>\n      </emu-clause>\n\n      <emu-clause id=\"sec-no-lineterminator-here\">\n        <h1>[no |LineTerminator| here]</h1>\n        <p>If the phrase “[no |LineTerminator| here]” appears in the right-hand side of a production of the syntactic grammar, it indicates that the production is <em>a restricted production</em>: it may not be used if a |LineTerminator| occurs in the input stream at the indicated position. For example, the production:</p>\n        <emu-grammar type=\"definition\" example>\n          ThrowStatement :\n            `throw` [no LineTerminator here] Expression `;`\n        </emu-grammar>\n        <p>indicates that the production may not be used if a |LineTerminator| occurs in the script between the `throw` token and the |Expression|.</p>\n        <p>Unless the presence of a |LineTerminator| is forbidden by a restricted production, any number of occurrences of |LineTerminator| may appear between any two consecutive tokens in the stream of input elements without affecting the syntactic acceptability of the script.</p>\n      </emu-clause>\n\n      <emu-clause id=\"sec-but-not\">\n        <h1>but not</h1>\n        <p>The right-hand side of a production may specify that certain expansions are not permitted by using the phrase “<b>but not</b>” and then indicating the expansions to be excluded. For example, the production:</p>\n        <emu-grammar type=\"definition\" example>\n          Identifier ::\n            IdentifierName but not ReservedWord\n        </emu-grammar>\n        <p>means that the nonterminal |Identifier| may be replaced by any sequence of code points that could replace |IdentifierName| provided that the same sequence of code points could not replace |ReservedWord|.</p>\n      </emu-clause>\n\n      <emu-clause id=\"sec-descriptive-phrases\">\n        <h1>Descriptive Phrases</h1>\n        <p>Finally, a few nonterminal symbols are described by a descriptive phrase in sans-serif type in cases where it would be impractical to list all the alternatives:</p>\n        <emu-grammar type=\"definition\" example>\n          SourceCharacter ::\n            &gt; any Unicode code point\n        </emu-grammar>\n      </emu-clause>\n    </emu-clause>\n  </emu-clause>\n\n  <emu-clause id=\"sec-algorithm-conventions\">\n    <h1>Algorithm Conventions</h1>\n    <p>The specification often uses a numbered list to specify steps in an algorithm. These algorithms are used to precisely specify the required semantics of ECMAScript language constructs. The algorithms are not intended to imply the use of any specific implementation technique. In practice, there may be more efficient algorithms available to implement a given feature.</p>\n    <p>Algorithms may be explicitly parameterized with an ordered, comma-separated sequence of alias names which may be used within the algorithm steps to reference the argument passed in that position. Optional parameters are denoted with surrounding brackets ([ , _name_ ]) and are no different from required parameters within algorithm steps. A rest parameter may appear at the end of a parameter list, denoted with leading ellipsis (, ..._name_). The rest parameter captures all of the arguments provided following the required and optional parameters into a List. If there are no such additional arguments, that List is empty.</p>\n    <p>Algorithm steps may be subdivided into sequential substeps. Substeps are indented and may themselves be further divided into indented substeps. Outline numbering conventions are used to identify substeps with the first level of substeps labelled with lowercase alphabetic characters and the second level of substeps labelled with lowercase roman numerals. If more than three levels are required these rules repeat with the fourth level using numeric labels. For example:</p>\n    <emu-alg example>\n      1. Top-level step\n        1. Substep.\n        1. Substep.\n          1. Subsubstep.\n            1. Subsubsubstep\n              1. Subsubsubsubstep\n                1. Subsubsubsubsubstep\n    </emu-alg>\n    <p>A step or substep may be written as an “if” predicate that conditions its substeps. In this case, the substeps are only applied if the predicate is true. If a step or substep begins with the word “else”, it is a predicate that is the negation of the preceding “if” predicate step at the same level.</p>\n    <p>A step may specify the iterative application of its substeps.</p>\n    <p>A step that begins with “<dfn id=\"assert\">Assert</dfn>:” asserts an invariant condition of its algorithm. Such assertions are used to make explicit algorithmic invariants that would otherwise be implicit. Such assertions add no additional semantic requirements and hence need not be checked by an implementation. They are used simply to clarify algorithms.</p>\n    <p>Algorithm steps may declare named aliases for any value using the form “Let _x_ be _someValue_”. These aliases are reference-like in that both _x_ and _someValue_ refer to the same underlying data and modifications to either are visible to both. Algorithm steps that want to avoid this reference-like behaviour should explicitly make a copy of the right-hand side: “Let _x_ be a copy of _someValue_” creates a shallow copy of _someValue_.</p>\n    <p>Once declared, an alias may be referenced in any subsequent steps and must not be referenced from steps prior to the alias's declaration. Aliases may be modified using the form “Set _x_ to _someOtherValue_”.</p>\n\n    <emu-clause id=\"sec-algorithm-conventions-abstract-operations\">\n      <h1>Abstract Operations</h1>\n      <p>In order to facilitate their use in multiple parts of this specification, some algorithms, called <dfn>abstract operations</dfn>, are named and written in parameterized functional form so that they may be referenced by name from within other algorithms. Abstract operations are typically referenced using a functional application style such as OperationName(_arg1_, _arg2_). Some abstract operations are treated as polymorphically dispatched methods of class-like specification abstractions. Such method-like abstract operations are typically referenced using a method application style such as _someValue_.OperationName(_arg1_, _arg2_).</p>\n    </emu-clause>\n\n    <emu-clause id=\"sec-algorithm-conventions-syntax-directed-operations\">\n      <h1>Syntax-Directed Operations</h1>\n      <p>A <dfn variants=\"syntax-directed operations\">syntax-directed operation</dfn> is a named operation whose definition consists of algorithms, each of which is associated with one or more productions from one of the ECMAScript grammars. A production that has multiple alternative definitions will typically have a distinct algorithm for each alternative. When an algorithm is associated with a grammar production, it may reference the terminal and nonterminal symbols of the production alternative as if they were parameters of the algorithm. When used in this manner, nonterminal symbols refer to the actual alternative definition that is matched when parsing the source text. The <dfn oldids=\"sec-static-semantics-sourcetext\">source text matched by</dfn> a grammar production or Parse Node derived from it is the portion of the source text that starts at the beginning of the first terminal that participated in the match and ends at the end of the last terminal that participated in the match.</p>\n      <p>When an algorithm is associated with a production alternative, the alternative is typically shown without any “[ ]” grammar annotations. Such annotations should only affect the syntactic recognition of the alternative and have no effect on the associated semantics for the alternative.</p>\n      <p>Syntax-directed operations are invoked with a parse node and, optionally, other parameters by using the conventions on steps <emu-xref href=\"#step-sdo-invocation-example-1\"></emu-xref>, <emu-xref href=\"#step-sdo-invocation-example-2\"></emu-xref>, and <emu-xref href=\"#step-sdo-invocation-example-3\"></emu-xref> in the following algorithm:</p>\n      <emu-alg example>\n        1. [id=\"step-sdo-invocation-example-1\"] Let _status_ be SyntaxDirectedOperation of |SomeNonTerminal|.\n        1. Let _someParseNode_ be the parse of some source text.\n        1. [id=\"step-sdo-invocation-example-2\"] Perform SyntaxDirectedOperation of _someParseNode_.\n        1. [id=\"step-sdo-invocation-example-3\"] Perform SyntaxDirectedOperation of _someParseNode_ with argument *\"value\"*.\n      </emu-alg>\n      <p>Unless explicitly specified otherwise, all chain productions have an implicit definition for every operation that might be applied to that production's left-hand side nonterminal. The implicit definition simply reapplies the same operation with the same parameters, if any, to the chain production's sole right-hand side nonterminal and then returns the result. For example, assume that some algorithm has a step of the form: “Return Evaluation of |Block|” and that there is a production:</p>\n      <emu-grammar example>\n        Block :\n          `{` StatementList `}`\n      </emu-grammar>\n      <p>but the Evaluation operation does not associate an algorithm with that production. In that case, the Evaluation operation implicitly includes an association of the form:</p>\n      <p><b>Runtime Semantics: Evaluation</b></p>\n      <emu-grammar example>Block : `{` StatementList `}`</emu-grammar>\n      <emu-alg example>\n        1. Return Evaluation of |StatementList|.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-runtime-semantics\">\n      <h1>Runtime Semantics</h1>\n      <p>Algorithms which specify semantics that must be called at runtime are called <dfn>runtime semantics</dfn>. Runtime semantics are defined by abstract operations or syntax-directed operations.</p>\n\n      <emu-clause id=\"sec-completion-ao\" type=\"abstract operation\">\n        <h1>\n          Completion (\n            _completionRecord_: a Completion Record,\n          ): a Completion Record\n        </h1>\n        <dl class=\"header\">\n          <dt>description</dt>\n          <dd>It is used to emphasize that a Completion Record is being returned.</dd>\n          <dt>skip return checks</dt>\n          <dd>true</dd>\n        </dl>\n        <emu-alg>\n          1. Assert: _completionRecord_ is a Completion Record.\n          1. Return _completionRecord_.\n        </emu-alg>\n      </emu-clause>\n\n      <emu-clause id=\"sec-throw-an-exception\">\n        <h1>Throw an Exception</h1>\n        <p>Algorithms steps that say to throw an exception, such as</p>\n        <emu-alg example>\n          1. Throw a *TypeError* exception.\n        </emu-alg>\n        <p>mean the same things as:</p>\n        <emu-alg example>\n          1. Return ThrowCompletion(a newly created *TypeError* object).\n        </emu-alg>\n      </emu-clause>\n\n      <emu-clause id=\"sec-returnifabrupt\" aoid=\"ReturnIfAbrupt\">\n        <h1>ReturnIfAbrupt</h1>\n        <p>Algorithms steps that say or are otherwise equivalent to:</p>\n        <emu-alg example>\n          1. ReturnIfAbrupt(_argument_).\n        </emu-alg>\n        <p>mean the same thing as:</p>\n        <emu-alg example>\n          1. Assert: _argument_ is a Completion Record.\n          1. If _argument_ is an abrupt completion, return Completion(_argument_).\n          1. Else, set _argument_ to _argument_.[[Value]].\n        </emu-alg>\n        <p>Algorithms steps that say or are otherwise equivalent to:</p>\n        <emu-alg example>\n          1. ReturnIfAbrupt(AbstractOperation()).\n        </emu-alg>\n        <p>mean the same thing as:</p>\n        <emu-alg example>\n          1. Let _hygienicTemp_ be AbstractOperation().\n          1. Assert: _hygienicTemp_ is a Completion Record.\n          1. If _hygienicTemp_ is an abrupt completion, return Completion(_hygienicTemp_).\n          1. Else, set _hygienicTemp_ to _hygienicTemp_.[[Value]].\n        </emu-alg>\n        <p>Where _hygienicTemp_ is ephemeral and visible only in the steps pertaining to ReturnIfAbrupt.</p>\n        <p>Algorithms steps that say or are otherwise equivalent to:</p>\n        <emu-alg example>\n          1. Let _result_ be AbstractOperation(ReturnIfAbrupt(_argument_)).\n        </emu-alg>\n        <p>mean the same thing as:</p>\n        <emu-alg example>\n          1. Assert: _argument_ is a Completion Record.\n          1. If _argument_ is an abrupt completion, return Completion(_argument_).\n          1. Else, set _argument_ to _argument_.[[Value]].\n          1. Let _result_ be AbstractOperation(_argument_).\n        </emu-alg>\n      </emu-clause>\n\n      <emu-clause id=\"sec-returnifabrupt-shorthands\">\n        <h1>ReturnIfAbrupt Shorthands</h1>\n        <p>Invocations of abstract operations and syntax-directed operations that are prefixed by `?` indicate that ReturnIfAbrupt should be applied to the resulting Completion Record. For example, the step:</p>\n        <emu-alg example>\n          1. ? OperationName().\n        </emu-alg>\n        <p>is equivalent to the following step:</p>\n        <emu-alg example>\n          1. ReturnIfAbrupt(OperationName()).\n        </emu-alg>\n        <p>Similarly, for method application style, the step:</p>\n        <emu-alg example>\n          1. ? _someValue_.OperationName().\n        </emu-alg>\n        <p>is equivalent to:</p>\n        <emu-alg example>\n          1. ReturnIfAbrupt(_someValue_.OperationName()).\n        </emu-alg>\n        <p>Similarly, prefix `!` is used to indicate that the following invocation of an abstract or syntax-directed operation will never return an abrupt completion and that the resulting Completion Record's [[Value]] field should be used in place of the return value of the operation. For example, the step:</p>\n        <emu-alg example>\n          1. Let _val_ be ! OperationName().\n        </emu-alg>\n        <p>is equivalent to the following steps:</p>\n        <emu-alg example>\n          1. Let _val_ be OperationName().\n          1. Assert: _val_ is a normal completion.\n          1. Set _val_ to _val_.[[Value]].\n        </emu-alg>\n        <p>Syntax-directed operations for runtime semantics make use of this shorthand by placing `!` or `?` before the invocation of the operation:</p>\n        <emu-alg example>\n          1. Perform ! SyntaxDirectedOperation of |NonTerminal|.\n        </emu-alg>\n      </emu-clause>\n\n      <emu-clause id=\"sec-implicit-normal-completion\" oldids=\"sec-implicit-completion-values\">\n        <h1>Implicit Normal Completion</h1>\n        <p>In algorithms within abstract operations which are declared to return a Completion Record, and within all built-in functions, the returned value is first passed to NormalCompletion, and the result is used instead. This rule does not apply within the Completion algorithm or when the value being returned is clearly marked as a Completion Record in that step; these cases are:</p>\n        <ul>\n          <li>when the result of applying Completion, NormalCompletion, ThrowCompletion, or ReturnCompletion is directly returned</li>\n          <li>when the result of constructing a Completion Record is directly returned</li>\n        </ul>\n        <p>It is an editorial error if a Completion Record is returned from such an abstract operation through any other means. For example, within these abstract operations,</p>\n        <emu-alg example>\n          1. Return *true*.\n        </emu-alg>\n        <p>means the same things as any of</p>\n        <emu-alg example>\n          1. Return NormalCompletion(*true*).\n        </emu-alg>\n        <p>or</p>\n        <emu-alg example>\n          1. Let _completion_ be NormalCompletion(*true*).\n          1. Return Completion(_completion_).\n        </emu-alg>\n        <p>or</p>\n        <emu-alg example>\n          1. Return Completion Record { [[Type]]: ~normal~, [[Value]]: *true*, [[Target]]: ~empty~ }.\n        </emu-alg>\n        <p>Note that, through the ReturnIfAbrupt expansion, the following example is allowed, as within the expanded steps, the result of applying Completion is returned directly in the abrupt case and the implicit NormalCompletion application occurs after unwrapping in the normal case.</p>\n        <emu-alg example>\n          1. Return ? _completion_.\n        </emu-alg>\n        <p>The following example would be an editorial error because a Completion Record is being returned without being annotated in that step.</p>\n        <emu-alg example>\n          1. Let _completion_ be NormalCompletion(*true*).\n          1. Return _completion_.\n        </emu-alg>\n      </emu-clause>\n    </emu-clause>\n\n    <emu-clause id=\"sec-static-semantic-rules\">\n      <h1>Static Semantics</h1>\n      <p>Context-free grammars are not sufficiently powerful to express all the rules that define whether a stream of input elements form a valid ECMAScript |Script| or |Module| that may be evaluated. In some situations additional rules are needed that may be expressed using either ECMAScript algorithm conventions or prose requirements. Such rules are always associated with a production of a grammar and are called the <dfn>static semantics</dfn> of the production.</p>\n      <p>Static Semantic Rules have names and typically are defined using an algorithm. Named Static Semantic Rules are associated with grammar productions and a production that has multiple alternative definitions will typically have for each alternative a distinct algorithm for each applicable named static semantic rule.</p>\n      <p>A special kind of static semantic rule is an <dfn id=\"early-error-rule\">Early Error Rule</dfn>. Early error rules define early error conditions (see clause <emu-xref href=\"#sec-error-handling-and-language-extensions\"></emu-xref>) that are associated with specific grammar productions. Evaluation of most early error rules are not explicitly invoked within the algorithms of this specification. A conforming implementation must, prior to the first evaluation of a |Script| or |Module|, validate all of the early error rules of the productions used to parse that |Script| or |Module|. If any of the early error rules are violated the |Script| or |Module| is invalid and cannot be evaluated.</p>\n    </emu-clause>\n\n    <emu-clause id=\"sec-mathematical-operations\">\n      <h1>Mathematical Operations</h1>\n      <p>This specification makes reference to these kinds of numeric values:</p>\n      <ul>\n        <li><dfn id=\"mathematical-value\" variants=\"mathematical value,mathematical values\">Mathematical values</dfn>: Arbitrary real numbers, used as the default numeric type.</li>\n        <li><dfn id=\"extended-mathematical-value\" variants=\"extended mathematical value,extended mathematical values\">Extended mathematical values</dfn>: Mathematical values together with +∞ and -∞.</li>\n        <li><em>Numbers</em>: IEEE 754-2019 binary64 (double-precision floating point) values.</li>\n        <li><em>BigInts</em>: ECMAScript language values representing arbitrary integers in a one-to-one correspondence.</li>\n      </ul>\n\n      <p>In the language of this specification, numerical values are distinguished among different numeric kinds using subscript suffixes. The subscript <sub>𝔽</sub> refers to Numbers, and the subscript <sub>ℤ</sub> refers to BigInts. Numeric values without a subscript suffix refer to mathematical values. This specification denotes most numeric values in base 10; it also uses numeric values of the form 0x followed by digits 0-9 or A-F as base-16 values.</p>\n      <p>In general, when this specification refers to a numerical value, such as in the phrase, \"the length of _y_\" or \"the integer represented by the four hexadecimal digits ...\", without explicitly specifying a numeric kind, the phrase refers to a mathematical value. Phrases which refer to a Number or a BigInt value are explicitly annotated as such; for example, \"the Number value for the number of code points in …\" or \"the BigInt value for …\".</p>\n      <p>When the term <dfn id=\"integer\" oldids=\"mathematical integer\" variants=\"integers\">integer</dfn> is used in this specification, it refers to a mathematical value which is in the set of integers, unless otherwise stated. When the term <dfn id=\"integral-number\" oldids=\"sec-isintegralnumber,sec-isinteger\" variants=\"integral Numbers\">integral Number</dfn> is used in this specification, it refers to a finite Number value whose mathematical value is in the set of integers.</p>\n      <p>Numeric operators such as +, ×, =, and ≥ refer to those operations as determined by the type of the operands. When applied to mathematical values, the operators refer to the usual mathematical operations. When applied to extended mathematical values, the operators refer to the usual mathematical operations over the extended real numbers; indeterminate forms are not defined and their use in this specification should be considered an editorial error. When applied to Numbers, the operators refer to the relevant operations within IEEE 754-2019. When applied to BigInts, the operators refer to the usual mathematical operations applied to the mathematical value of the BigInt. Numeric operators applied to mixed-type operands (such as a Number and a mathematical value) are not defined and should be considered an editorial error in this specification.</p>\n      <p>Conversions between mathematical values and Numbers or BigInts are always explicit in this document. A conversion from a mathematical value or extended mathematical value _x_ to a Number is denoted as \"the Number value for _x_\" or <emu-eqn id=\"𝔽\" aoid=\"𝔽\">𝔽(_x_)</emu-eqn>, and is defined in <emu-xref href=\"#sec-ecmascript-language-types-number-type\"></emu-xref>. A conversion from an integer _x_ to a BigInt is denoted as \"the <dfn id=\"bigint-value-for\">BigInt value for</dfn> _x_\" or <emu-eqn id=\"ℤ\" aoid=\"ℤ\">ℤ(_x_)</emu-eqn>. A conversion from a Number or BigInt _x_ to a mathematical value is denoted as \"the <dfn id=\"mathematical-value-of\">mathematical value of</dfn> _x_\", or <emu-eqn id=\"ℝ\" aoid=\"ℝ\">ℝ(_x_)</emu-eqn>. The mathematical value of *+0*<sub>𝔽</sub> and *-0*<sub>𝔽</sub> is the mathematical value 0. The mathematical value of non-finite values is not defined. The <dfn id=\"extended-mathematical-value-of\">extended mathematical value of</dfn> _x_ is the mathematical value of _x_ for finite values, and is +∞ and -∞ for *+∞*<sub>𝔽</sub> and *-∞*<sub>𝔽</sub> respectively; it is not defined for *NaN*.</p>\n      <p>The mathematical function <emu-eqn id=\"eqn-abs\" aoid=\"abs\">abs(_x_)</emu-eqn> produces the absolute value of _x_, which is <emu-eqn>-_x_</emu-eqn> if _x_ &lt; 0 and otherwise is _x_ itself.</p>\n      <p>The mathematical function <emu-eqn id=\"eqn-min\" aoid=\"min\">min(_x1_, _x2_, … , _xN_)</emu-eqn> produces the mathematically smallest of <emu-eqn>_x1_</emu-eqn> through <emu-eqn>_xN_</emu-eqn>. The mathematical function <emu-eqn id=\"eqn-max\" aoid=\"max\">max(_x1_, _x2_, ..., _xN_)</emu-eqn> produces the mathematically largest of <emu-eqn>_x1_</emu-eqn> through <emu-eqn>_xN_</emu-eqn>. The domain and range of these mathematical functions are the extended mathematical values.</p>\n      <p>The notation “<emu-eqn id=\"eqn-modulo\" aoid=\"modulo\">_x_ modulo _y_</emu-eqn>” (_y_ must be finite and non-zero) computes a value _k_ of the same sign as _y_ (or zero) such that <emu-eqn>abs(_k_) &lt; abs(_y_) and _x_ - _k_ = _q_ × _y_</emu-eqn> for some integer _q_.</p>\n      <p>The phrase \"the result of <dfn id=\"clamping\">clamping</dfn> _x_ between _lower_ and _upper_\" (where _x_ is an extended mathematical value and _lower_ and _upper_ are mathematical values such that _lower_ ≤ _upper_) produces _lower_ if _x_ &lt; _lower_, produces _upper_ if _x_ > _upper_, and otherwise produces _x_.</p>\n      <p>The mathematical function <emu-eqn id=\"eqn-floor\" aoid=\"floor\">floor(_x_)</emu-eqn> produces the largest integer (closest to +∞) that is not larger than _x_.</p>\n      <emu-note>\n        <p><emu-eqn>floor(_x_) = _x_ - (_x_ modulo 1)</emu-eqn>.</p>\n      </emu-note>\n      <p>The mathematical function <emu-eqn id=\"eqn-truncate\" aoid=\"truncate\">truncate(_x_)</emu-eqn> removes the fractional part of _x_ by rounding towards zero, producing <emu-eqn>-floor(-_x_)</emu-eqn> if _x_ &lt; 0 and otherwise producing <emu-eqn>floor(_x_)</emu-eqn>.</p>\n      <p>Mathematical functions min, max, abs, floor, and truncate are not defined for Numbers and BigInts, and any usage of those methods that have non-mathematical value arguments would be an editorial error in this specification.</p>\n      <p>An <dfn id=\"interval\">interval</dfn> from lower bound _a_ to upper bound _b_ is a possibly-infinite, possibly-empty set of numeric values of the same numeric type. Each bound will be described as either inclusive or exclusive, but not both. There are four kinds of intervals, as follows:</p>\n      <ul>\n        <li>An interval from _a_ (inclusive) to _b_ (inclusive), also called an <dfn id=\"inclusive-interval\">inclusive interval</dfn> from _a_ to _b_, includes all values _x_ of the same numeric type such that _a_ ≤ _x_ ≤ _b_, and no others.</li>\n        <li>An interval from _a_ (inclusive) to _b_ (exclusive) includes all values _x_ of the same numeric type such that _a_ ≤ _x_ &lt; _b_, and no others.</li>\n        <li>An interval from _a_ (exclusive) to _b_ (inclusive) includes all values _x_ of the same numeric type such that _a_ &lt; _x_ ≤ _b_, and no others.</li>\n        <li>An interval from _a_ (exclusive) to _b_ (exclusive) includes all values _x_ of the same numeric type such that _a_ &lt; _x_ &lt; _b_, and no others.</li>\n      </ul>\n      <p>For example, the interval from 1 (inclusive) to 2 (exclusive) consists of all mathematical values between 1 and 2, including 1 and not including 2. For the purpose of defining intervals, *-0*<sub>𝔽</sub> &lt; <!-- this comment here to avoid ecmarkup complaining about comparison to 0 --> *+0*<sub>𝔽</sub>, so, for example, an inclusive interval with a lower bound of *+0*<sub>𝔽</sub> includes *+0*<sub>𝔽</sub> but not *-0*<sub>𝔽</sub>. *NaN* is never included in an interval.</p>\n    </emu-clause>\n\n    <emu-clause id=\"sec-value-notation\">\n      <h1>Value Notation</h1>\n      <p>In this specification, ECMAScript language values are displayed in *bold*. Examples include *null*, *true*, or *\"hello\"*. These are distinguished from ECMAScript source text such as `Function.prototype.apply` or `let n = 42;`.</p>\n    </emu-clause>\n\n    <emu-clause id=\"sec-identity\">\n      <h1>Identity</h1>\n      <p>In this specification, both specification values and ECMAScript language values are compared for equality. When comparing for equality, values fall into one of two categories. <dfn variants=\"values without identity,value without identity\">Values without identity</dfn> are equal to other values without identity if all of their innate characteristics are the same — characteristics such as the magnitude of an integer or the length of a sequence. Values without identity may be manifest without prior reference by fully describing their characteristics. In contrast, each <dfn variants=\"values with identity\">value with identity</dfn> is unique and therefore only equal to itself. Values with identity are like values without identity but with an additional unguessable, unchangeable, universally-unique characteristic called <em>identity</em>. References to existing values with identity cannot be manifest simply by describing them, as the identity itself is indescribable; instead, references to these values must be explicitly passed from one place to another. Some values with identity are mutable and therefore can have their characteristics (except their identity) changed in-place, causing all holders of the value to observe the new characteristics. A value without identity is never equal to a value with identity.</p>\n      <p>From the perspective of this specification, the word “is” is used to compare two values for equality, as in “If _bool_ is *true*, then ...”, and the word “contains” is used to search for a value inside lists using equality comparisons, as in \"If _list_ contains a Record _r_ such that _r_.[[Foo]] is *true*, then ...\". The <em>specification identity</em> of values determines the result of these comparisons and is axiomatic in this specification.</p>\n      <p>From the perspective of the ECMAScript language, language values are compared for equality using the SameValue abstract operation and the abstract operations it transitively calls. The algorithms of these comparison abstract operations determine <em>language identity</em> of ECMAScript language values.</p>\n      <p>For specification values, examples of values without specification identity include, but are not limited to: mathematical values and extended mathematical values; ECMAScript source text, surrogate pairs, Directive Prologues, etc; UTF-16 code units; Unicode code points; enums; abstract operations, including syntax-directed operations, host hooks, etc; and ordered pairs. Examples of specification values with specification identity include, but are not limited to: any kind of Records, including Property Descriptors, PrivateElements, etc; Parse Nodes; Lists; <emu-xref href=\"#sec-set-and-relation-specification-type\">Sets</emu-xref> and Relations; Abstract Closures; Data Blocks; Private Names; execution contexts and execution context stacks; agent signifiers; and WaiterList Records.</p>\n      <p>Specification identity agrees with language identity for all ECMAScript language values except Symbol values produced by <emu-xref href=\"#sec-symbol.for\">Symbol.for</emu-xref>. The ECMAScript language values without specification identity and without language identity are <emu-xref href=\"#sec-ecmascript-language-types-undefined-type\">*undefined*</emu-xref>, <emu-xref href=\"#sec-ecmascript-language-types-null-type\">*null*</emu-xref>, <emu-xref href=\"#sec-ecmascript-language-types-boolean-type\">Booleans</emu-xref>, <emu-xref href=\"#sec-ecmascript-language-types-string-type\">Strings</emu-xref>, <emu-xref href=\"#sec-ecmascript-language-types-number-type\">Numbers</emu-xref>, and <emu-xref href=\"#sec-ecmascript-language-types-bigint-type\">BigInts</emu-xref>. The ECMAScript language values with specification identity and language identity are <emu-xref href=\"#sec-ecmascript-language-types-symbol-type\">Symbols</emu-xref> not produced by <emu-xref href=\"#sec-symbol.for\">Symbol.for</emu-xref> and <emu-xref href=\"#sec-object-type\">Objects</emu-xref>. Symbol values produced by <emu-xref href=\"#sec-symbol.for\">Symbol.for</emu-xref> have specification identity, but not language identity.</p>\n    </emu-clause>\n  </emu-clause>\n</emu-clause>\n\n<emu-clause id=\"sec-ecmascript-data-types-and-values\">\n  <h1>ECMAScript Data Types and Values</h1>\n  <p>Algorithms within this specification manipulate values each of which has an associated type. The possible value types are exactly those defined in this clause. Types are further classified into ECMAScript language types and specification types.</p>\n\n  <emu-clause id=\"sec-ecmascript-language-types\">\n    <h1>ECMAScript Language Types</h1>\n    <p>An <dfn variants=\"ECMAScript language types\">ECMAScript language type</dfn> corresponds to values that are directly manipulated by an ECMAScript programmer using the ECMAScript language. The ECMAScript language types are Undefined, Null, Boolean, String, Symbol, Number, BigInt, and Object. An <dfn variants=\"ECMAScript language values\">ECMAScript language value</dfn> is a value that is characterized by an ECMAScript language type.</p>\n\n    <emu-clause id=\"sec-ecmascript-language-types-undefined-type\">\n      <h1>The Undefined Type</h1>\n      <p>The Undefined type has exactly one value, called *undefined*. Any variable that has not been assigned a value has the value *undefined*.</p>\n    </emu-clause>\n\n    <emu-clause id=\"sec-ecmascript-language-types-null-type\">\n      <h1>The Null Type</h1>\n      <p>The Null type has exactly one value, called *null*.</p>\n    </emu-clause>\n\n    <emu-clause id=\"sec-ecmascript-language-types-boolean-type\">\n      <h1>The Boolean Type</h1>\n      <p>The <dfn variants=\"is a Boolean,is not a Boolean\">Boolean type</dfn> represents a logical entity having two values, called *true* and *false*.</p>\n    </emu-clause>\n\n    <emu-clause id=\"sec-ecmascript-language-types-string-type\">\n      <h1>The String Type</h1>\n      <p>The <dfn variants=\"is a String,is not a String\">String type</dfn> is the set of all ordered sequences of zero or more 16-bit unsigned integer values (“elements”) up to a maximum length of 2<sup>53</sup> - 1 elements. The String type is generally used to represent textual data in a running ECMAScript program, in which case each element in the String is treated as a UTF-16 code unit value. Each element is regarded as occupying a position within the sequence. These positions are indexed with non-negative integers. The first element (if any) is at index 0, the next element (if any) at index 1, and so on. The length of a String is the number of elements (i.e., 16-bit values) within it. The empty String has length zero and therefore contains no elements.</p>\n      <p>ECMAScript operations that do not interpret String contents apply no further semantics. Operations that do interpret String values treat each element as a single UTF-16 code unit. However, ECMAScript does not restrict the value of or relationships between these code units, so operations that further interpret String contents as sequences of Unicode code points encoded in UTF-16 must account for ill-formed subsequences. Such operations apply special treatment to every code unit with a numeric value in the inclusive interval from 0xD800 to 0xDBFF (defined by the Unicode Standard as a <dfn id=\"leading-surrogate\" variants=\"leading surrogates\">leading surrogate</dfn>, or more formally as a <dfn id=\"high-surrogate-code-unit\" variants=\"high-surrogate code units\">high-surrogate code unit</dfn>) and every code unit with a numeric value in the inclusive interval from 0xDC00 to 0xDFFF (defined as a <dfn id=\"trailing-surrogate\" variants=\"trailing surrogates\">trailing surrogate</dfn>, or more formally as a <dfn id=\"low-surrogate-code-unit\" variants=\"low-surrogate code units\">low-surrogate code unit</dfn>) using the following rules:</p>\n      <ul>\n        <li>\n          A code unit that is not a leading surrogate and not a trailing surrogate is interpreted as a code point with the same value.\n        </li>\n        <li>\n          A sequence of two code units, where the first code unit _c1_ is a leading surrogate and the second code unit _c2_ a trailing surrogate, is a <dfn id=\"surrogate-pair\" variants=\"surrogate pairs\">surrogate pair</dfn> and is interpreted as a code point with the value (_c1_ - 0xD800) × 0x400 + (_c2_ - 0xDC00) + 0x10000. (See <emu-xref href=\"#sec-utf16decodesurrogatepair\"></emu-xref>)\n        </li>\n        <li>\n          A code unit that is a leading surrogate or trailing surrogate, but is not part of a surrogate pair, is interpreted as a code point with the same value.\n        </li>\n      </ul>\n      <p>The function `String.prototype.normalize` (see <emu-xref href=\"#sec-string.prototype.normalize\"></emu-xref>) can be used to explicitly normalize a String value. `String.prototype.localeCompare` (see <emu-xref href=\"#sec-string.prototype.localecompare\"></emu-xref>) internally normalizes String values, but no other operations implicitly normalize the strings upon which they operate. Operation results are not language- and/or locale-sensitive unless stated otherwise.</p>\n      <emu-note>\n        <p>The rationale behind this design was to keep the implementation of Strings as simple and high-performing as possible. If ECMAScript source text is in Normalized Form C, string literals are guaranteed to also be normalized, as long as they do not contain any Unicode escape sequences.</p>\n      </emu-note>\n      <p>In this specification, the phrase \"the <dfn id=\"string-concatenation\">string-concatenation</dfn> of _A_, _B_, ...\" (where each argument is a String value, a code unit, or a sequence of code units) denotes the String value whose sequence of code units is the concatenation of the code units (in order) of each of the arguments (in order).</p>\n      <p>The phrase \"the <dfn id=\"substring\">substring</dfn> of _S_ from _inclusiveStart_ to _exclusiveEnd_\" (where _S_ is a String value or a sequence of code units and _inclusiveStart_ and _exclusiveEnd_ are integers) denotes the String value consisting of the consecutive code units of _S_ beginning at index _inclusiveStart_ and ending immediately before index _exclusiveEnd_ (which is the empty String when _inclusiveStart_ = _exclusiveEnd_). If the \"to\" suffix is omitted, the length of _S_ is used as the value of _exclusiveEnd_.</p>\n      <p>\n        The phrase \"<dfn id=\"ASCII-word-characters\">the ASCII word characters</dfn>\" denotes the following String value, which consists solely of every letter and number in the Unicode Basic Latin block along with U+005F (LOW LINE):<br>\n        *\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_\"*.<br>\n        For historical reasons, it has significance to various algorithms.\n      </p>\n\n      <emu-clause id=\"sec-stringindexof\" type=\"abstract operation\">\n        <h1>\n          StringIndexOf (\n            _string_: a String,\n            _searchValue_: a String,\n            _fromIndex_: a non-negative integer,\n          ): a non-negative integer or ~not-found~\n        </h1>\n        <dl class=\"header\">\n        </dl>\n        <emu-alg>\n          1. Let _len_ be the length of _string_.\n          1. If _searchValue_ is the empty String and _fromIndex_ ≤ _len_, return _fromIndex_.\n          1. Let _searchLen_ be the length of _searchValue_.\n          1. For each integer _i_ such that _fromIndex_ ≤ _i_ ≤ _len_ - _searchLen_, in ascending order, do\n            1. Let _candidate_ be the substring of _string_ from _i_ to _i_ + _searchLen_.\n            1. If _candidate_ is _searchValue_, return _i_.\n          1. Return ~not-found~.\n        </emu-alg>\n        <emu-note>\n          <p>If _searchValue_ is the empty String and _fromIndex_ ≤ the length of _string_, this algorithm returns _fromIndex_. The empty String is effectively found at every position within a string, including after the last code unit.</p>\n        </emu-note>\n        <emu-note>\n          <p>This algorithm always returns ~not-found~ if _fromIndex_ + the length of _searchValue_ > the length of _string_.</p>\n        </emu-note>\n      </emu-clause>\n\n      <emu-clause id=\"sec-stringlastindexof\" type=\"abstract operation\">\n        <h1>\n          StringLastIndexOf (\n            _string_: a String,\n            _searchValue_: a String,\n            _fromIndex_: a non-negative integer,\n          ): a non-negative integer or ~not-found~\n        </h1>\n        <dl class=\"header\">\n        </dl>\n        <emu-alg>\n          1. Let _len_ be the length of _string_.\n          1. Let _searchLen_ be the length of _searchValue_.\n          1. Assert: _fromIndex_ + _searchLen_ ≤ _len_.\n          1. For each integer _i_ such that 0 ≤ _i_ ≤ _fromIndex_, in descending order, do\n            1. Let _candidate_ be the substring of _string_ from _i_ to _i_ + _searchLen_.\n            1. If _candidate_ is _searchValue_, return _i_.\n          1. Return ~not-found~.\n        </emu-alg>\n        <emu-note>\n          <p>If _searchValue_ is the empty String, this algorithm returns _fromIndex_. The empty String is effectively found at every position within a string, including after the last code unit.</p>\n        </emu-note>\n      </emu-clause>\n    </emu-clause>\n\n    <emu-clause id=\"sec-ecmascript-language-types-symbol-type\">\n      <h1>The Symbol Type</h1>\n      <p>The <dfn variants=\"is a Symbol,is not a Symbol\">Symbol type</dfn> is the set of all non-String values that may be used as the key of an Object property (<emu-xref href=\"#sec-object-type\"></emu-xref>).</p>\n      <p>Each possible Symbol value is unique and immutable.</p>\n      <p>Each Symbol value immutably holds an associated value called [[Description]] that is either *undefined* or a String value.</p>\n\n      <emu-clause id=\"sec-well-known-symbols\">\n        <h1>Well-Known Symbols</h1>\n        <p>Well-known symbols are built-in Symbol values that are explicitly referenced by algorithms of this specification. They are typically used as the keys of properties whose values serve as extension points of a specification algorithm. Unless otherwise specified, well-known symbols values are shared by all realms (<emu-xref href=\"#sec-code-realms\"></emu-xref>).</p>\n        <p>Within this specification a well-known symbol is referred to using the standard <emu-xref href=\"#sec-well-known-intrinsic-objects\">intrinsic notation</emu-xref> where the intrinsic is one of the values listed in <emu-xref href=\"#table-well-known-symbols\"></emu-xref>.</p>\n        <emu-note>Previous editions of this specification used a notation of the form @@name, where the current edition would use `%Symbol.name%`. In particular, the following names were used: @@asyncIterator, @@hasInstance, @@isConcatSpreadable, @@<emu-not-ref>iterator</emu-not-ref>, @@match, @@matchAll, @@replace, @@search, @@species, @@split, @@toPrimitive, @@toStringTag, and @@unscopables.</emu-note>\n        <emu-table id=\"table-well-known-symbols\" caption=\"Well-known Symbols\" oldids=\"table-1\">\n          <table>\n            <thead>\n              <tr>\n                <th>\n                  Specification Name\n                </th>\n                <th>\n                  [[Description]]\n                </th>\n                <th>\n                  Value and Purpose\n                </th>\n              </tr>\n            </thead>\n            <tr>\n              <td>\n                <dfn>%Symbol.asyncIterator%</dfn>\n              </td>\n              <td>\n                *\"Symbol.asyncIterator\"*\n              </td>\n              <td>\n                A method that returns the default async iterator for an object. Called by the semantics of the `for`-`await`-`of` statement.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <dfn>%Symbol.hasInstance%</dfn>\n              </td>\n              <td>\n                *\"Symbol.hasInstance\"*\n              </td>\n              <td>\n                A method that determines if a constructor object recognizes an object as one of the constructor's instances. Called by the semantics of the `instanceof` operator.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <dfn>%Symbol.isConcatSpreadable%</dfn>\n              </td>\n              <td>\n                *\"Symbol.isConcatSpreadable\"*\n              </td>\n              <td>\n                A Boolean valued property that if true indicates that an object should be flattened to its array elements by <emu-xref href=\"#sec-array.prototype.concat\">`Array.prototype.concat`</emu-xref>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <dfn>%Symbol.iterator%</dfn>\n              </td>\n              <td>\n                *\"Symbol.iterator\"*\n              </td>\n              <td>\n                A method that returns the default iterator for an object. Called by the semantics of the for-of statement.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <dfn>%Symbol.match%</dfn>\n              </td>\n              <td>\n                *\"Symbol.match\"*\n              </td>\n              <td>\n                A regular expression method that matches the regular expression against a string. Called by the <emu-xref href=\"#sec-string.prototype.match\">`String.prototype.match`</emu-xref> method.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <dfn>%Symbol.matchAll%</dfn>\n              </td>\n              <td>\n                *\"Symbol.matchAll\"*\n              </td>\n              <td>\n                A regular expression method that returns an iterator that yields matches of the regular expression against a string. Called by the <emu-xref href=\"#sec-string.prototype.matchall\">`String.prototype.matchAll`</emu-xref> method.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <dfn>%Symbol.replace%</dfn>\n              </td>\n              <td>\n                *\"Symbol.replace\"*\n              </td>\n              <td>\n                A regular expression method that replaces matched substrings of a string. Called by the <emu-xref href=\"#sec-string.prototype.replace\">`String.prototype.replace`</emu-xref> method.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <dfn>%Symbol.search%</dfn>\n              </td>\n              <td>\n                *\"Symbol.search\"*\n              </td>\n              <td>\n                A regular expression method that returns the index within a string that matches the regular expression. Called by the <emu-xref href=\"#sec-string.prototype.search\">`String.prototype.search`</emu-xref> method.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <dfn>%Symbol.species%</dfn>\n              </td>\n              <td>\n                *\"Symbol.species\"*\n              </td>\n              <td>\n                A function valued property that is the constructor function that is used to create derived objects.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <dfn>%Symbol.split%</dfn>\n              </td>\n              <td>\n                *\"Symbol.split\"*\n              </td>\n              <td>\n                A regular expression method that splits a string at the indices that match the regular expression. Called by the <emu-xref href=\"#sec-string.prototype.split\">`String.prototype.split`</emu-xref> method.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <dfn>%Symbol.toPrimitive%</dfn>\n              </td>\n              <td>\n                *\"Symbol.toPrimitive\"*\n              </td>\n              <td>\n                A method that converts an object to a corresponding primitive value. Called by the ToPrimitive abstract operation.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <dfn>%Symbol.toStringTag%</dfn>\n              </td>\n              <td>\n                *\"Symbol.toStringTag\"*\n              </td>\n              <td>\n                A String valued property that is used in the creation of the default string description of an object. Accessed by the built-in method <emu-xref href=\"#sec-object.prototype.tostring\">`Object.prototype.toString`</emu-xref>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <dfn>%Symbol.unscopables%</dfn>\n              </td>\n              <td>\n                *\"Symbol.unscopables\"*\n              </td>\n              <td>\n                An object valued property whose own and inherited property names are property names that are excluded from the `with` environment bindings of the associated object.\n              </td>\n            </tr>\n          </table>\n        </emu-table>\n      </emu-clause>\n    </emu-clause>\n\n    <emu-clause id=\"sec-numeric-types\">\n      <h1>Numeric Types</h1>\n      <p>ECMAScript has two built-in numeric types: Number and BigInt. The following abstract operations are defined over these numeric types. The \"Result\" column shows the return type, along with an indication if it is possible for some invocations of the operation to return an abrupt completion.</p>\n      <emu-table id=\"table-numeric-type-ops\" caption=\"Numeric Type Operations\">\n        <table>\n          <thead>\n            <tr>\n              <th>\n                Operation\n              </th>\n              <th>\n                Example source\n              </th>\n              <th>\n                Invoked by the Evaluation semantics of ...\n              </th>\n              <th>\n                Result\n              </th>\n            </tr>\n          </thead>\n\n          <tr>\n            <td>\n              Number::unaryMinus\n            </td>\n            <td rowspan=\"2\">\n              `-x`\n            </td>\n            <td rowspan=\"2\">\n              <emu-xref href=\"#sec-unary-minus-operator\" title></emu-xref>\n            </td>\n            <td>\n              Number\n            </td>\n          </tr>\n          <tr>\n            <td>\n              BigInt::unaryMinus\n            </td>\n            <td>\n              BigInt\n            </td>\n          </tr>\n\n          <tr>\n            <td>\n              Number::bitwiseNOT\n            </td>\n            <td rowspan=\"2\">\n              `~x`\n            </td>\n            <td rowspan=\"2\">\n              <emu-xref href=\"#sec-bitwise-not-operator\" title></emu-xref>\n            </td>\n            <td>\n              Number\n            </td>\n          </tr>\n          <tr>\n            <td>\n              BigInt::bitwiseNOT\n            </td>\n            <td>\n              BigInt\n            </td>\n          </tr>\n\n          <tr>\n            <td>\n              Number::exponentiate\n            </td>\n            <td rowspan=\"2\">\n              `x&nbsp;**&nbsp;y`\n            </td>\n            <td rowspan=\"2\">\n              <emu-xref href=\"#sec-exp-operator\" title></emu-xref>\n              and <emu-xref href=\"#sec-math.pow\" title></emu-xref>\n            </td>\n            <td>\n              Number\n            </td>\n          </tr>\n          <tr>\n            <td>\n              BigInt::exponentiate\n            </td>\n            <td>\n              either a normal completion containing a BigInt or a throw completion\n            </td>\n          </tr>\n\n          <tr>\n            <td>\n              Number::multiply\n            </td>\n            <td rowspan=\"2\">\n              `x&nbsp;*&nbsp;y`\n            </td>\n            <td rowspan=\"2\">\n              <emu-xref href=\"#sec-multiplicative-operators\" title></emu-xref>\n            </td>\n            <td>\n              Number\n            </td>\n          </tr>\n          <tr>\n            <td>\n              BigInt::multiply\n            </td>\n            <td>\n              BigInt\n            </td>\n          </tr>\n\n          <tr>\n            <td>\n              Number::divide\n            </td>\n            <td rowspan=\"2\">\n              `x&nbsp;/&nbsp;y`\n            </td>\n            <td rowspan=\"2\">\n              <emu-xref href=\"#sec-multiplicative-operators\" title></emu-xref>\n            </td>\n            <td>\n              Number\n            </td>\n          </tr>\n          <tr>\n            <td>\n              BigInt::divide\n            </td>\n            <td>\n              either a normal completion containing a BigInt or a throw completion\n            </td>\n          </tr>\n\n          <tr>\n            <td>\n              Number::remainder\n            </td>\n            <td rowspan=\"2\">\n              `x&nbsp;%&nbsp;y`\n            </td>\n            <td rowspan=\"2\">\n              <emu-xref href=\"#sec-multiplicative-operators\" title></emu-xref>\n            </td>\n            <td>\n              Number\n            </td>\n          </tr>\n          <tr>\n            <td>\n              BigInt::remainder\n            </td>\n            <td>\n              either a normal completion containing a BigInt or a throw completion\n            </td>\n          </tr>\n\n          <tr>\n            <td>\n              Number::add\n            </td>\n            <td rowspan=\"2\">\n              `x ++`<br>\n              `++ x`<br>\n              `x&nbsp;+&nbsp;y`\n            </td>\n            <td rowspan=\"2\">\n              <emu-xref href=\"#sec-postfix-increment-operator\" title></emu-xref>,\n              <emu-xref href=\"#sec-prefix-increment-operator\" title></emu-xref>,\n              and <emu-xref href=\"#sec-addition-operator-plus\" title></emu-xref>\n            </td>\n            <td>\n              Number\n            </td>\n          </tr>\n          <tr>\n            <td>\n              BigInt::add\n            </td>\n            <td>\n              BigInt\n            </td>\n          </tr>\n\n          <tr>\n            <td>\n              Number::subtract\n            </td>\n            <td rowspan=\"2\">\n              `x --`<br>\n              `-- x`<br>\n              `x&nbsp;-&nbsp;y`\n            </td>\n            <td rowspan=\"2\">\n              <emu-xref href=\"#sec-postfix-decrement-operator\" title></emu-xref>,\n              <emu-xref href=\"#sec-prefix-decrement-operator\" title></emu-xref>,\n              and <emu-xref href=\"#sec-subtraction-operator-minus\" title></emu-xref>\n            </td>\n            <td>\n              Number\n            </td>\n          </tr>\n          <tr>\n            <td>\n              BigInt::subtract\n            </td>\n            <td>\n              BigInt\n            </td>\n          </tr>\n\n          <tr>\n            <td>\n              Number::leftShift\n            </td>\n            <td rowspan=\"2\">\n              `x&nbsp;&lt;&lt;&nbsp;y`\n            </td>\n            <td rowspan=\"2\">\n              <emu-xref href=\"#sec-left-shift-operator\" title></emu-xref>\n            </td>\n            <td>\n              Number\n            </td>\n          </tr>\n          <tr>\n            <td>\n              BigInt::leftShift\n            </td>\n            <td>\n              BigInt\n            </td>\n          </tr>\n\n          <tr>\n            <td>\n              Number::signedRightShift\n            </td>\n            <td rowspan=\"2\">\n              `x&nbsp;>>&nbsp;y`\n            </td>\n            <td rowspan=\"2\">\n              <emu-xref href=\"#sec-signed-right-shift-operator\" title></emu-xref>\n            </td>\n            <td>\n              Number\n            </td>\n          </tr>\n          <tr>\n            <td>\n              BigInt::signedRightShift\n            </td>\n            <td>\n              BigInt\n            </td>\n          </tr>\n\n          <tr>\n            <td>\n              Number::unsignedRightShift\n            </td>\n            <td rowspan=\"2\">\n              `x&nbsp;>>>&nbsp;y`\n            </td>\n            <td rowspan=\"2\">\n              <emu-xref href=\"#sec-unsigned-right-shift-operator\" title></emu-xref>\n            </td>\n            <td>\n              Number\n            </td>\n          </tr>\n          <tr>\n            <td>\n              BigInt::unsignedRightShift\n            </td>\n            <td>\n              a throw completion\n            </td>\n          </tr>\n\n          <tr>\n            <td>\n              Number::lessThan\n            </td>\n            <td rowspan=\"2\">\n              `x&nbsp;&lt;&nbsp;y`<br>\n              `x&nbsp;>&nbsp;y`<br>\n              `x&nbsp;&lt;=&nbsp;y`<br>\n              `x&nbsp;>=&nbsp;y`\n            </td>\n            <td rowspan=\"2\">\n              <emu-xref href=\"#sec-relational-operators\" title></emu-xref>,\n              via <emu-xref href=\"#sec-islessthan\" title></emu-xref>\n            </td>\n            <td>\n              Boolean or *undefined* (for unordered inputs)\n            </td>\n          </tr>\n\n          <tr>\n            <td>\n              BigInt::lessThan\n            </td>\n            <td>\n              Boolean\n            </td>\n          </tr>\n\n          <tr>\n            <td>\n              Number::equal\n            </td>\n            <td rowspan=\"2\">\n              `x&nbsp;==&nbsp;y`<br>\n              `x&nbsp;!=&nbsp;y`<br>\n              `x&nbsp;===&nbsp;y`<br>\n              `x&nbsp;!==&nbsp;y`\n            </td>\n            <td rowspan=\"2\">\n              <emu-xref href=\"#sec-equality-operators\" title></emu-xref>,\n              via <emu-xref href=\"#sec-isstrictlyequal\" title></emu-xref>\n            </td>\n            <td rowspan=\"2\">\n              Boolean\n            </td>\n          </tr>\n          <tr>\n            <td>\n              BigInt::equal\n            </td>\n          </tr>\n\n          <tr>\n            <td>\n              Number::sameValue\n            </td>\n            <td>\n              `Object.is(x, y)`\n            </td>\n            <td>\n              Object internal methods,\n              via <emu-xref href=\"#sec-samevalue\" title></emu-xref>,\n              to test exact value equality\n            </td>\n            <td>\n              Boolean\n            </td>\n          </tr>\n\n          <tr>\n            <td>\n              Number::sameValueZero\n            </td>\n            <td>\n              `[x].includes(y)`\n            </td>\n            <td>\n              via <emu-xref href=\"#sec-samevaluezero\" title></emu-xref>,\n              to test value equality, ignoring the difference between *+0*<sub>𝔽</sub> and *-0*<sub>𝔽</sub>, as in Array, Map, and Set methods\n            </td>\n            <td>\n              Boolean\n            </td>\n          </tr>\n\n          <tr>\n            <td>\n              Number::bitwiseAND\n            </td>\n            <td rowspan=\"2\">\n              `x&nbsp;&amp;&nbsp;y`\n            </td>\n            <td rowspan=\"6\">\n              <emu-xref href=\"#sec-binary-bitwise-operators\" title></emu-xref>\n            </td>\n            <td>\n              Number\n            </td>\n          </tr>\n          <tr>\n            <td>\n              BigInt::bitwiseAND\n            </td>\n            <td>\n              BigInt\n            </td>\n          </tr>\n\n          <tr>\n            <td>\n              Number::bitwiseXOR\n            </td>\n            <td rowspan=\"2\">\n              `x&nbsp;^&nbsp;y`\n            </td>\n            <td>\n              Number\n            </td>\n          </tr>\n          <tr>\n            <td>\n              BigInt::bitwiseXOR\n            </td>\n            <td>\n              BigInt\n            </td>\n          </tr>\n\n          <tr>\n            <td>\n              Number::bitwiseOR\n            </td>\n            <td rowspan=\"2\">\n              `x&nbsp;|&nbsp;y`\n            </td>\n            <td>\n              Number\n            </td>\n          </tr>\n          <tr>\n            <td>\n              BigInt::bitwiseOR\n            </td>\n            <td>\n              BigInt\n            </td>\n          </tr>\n\n          <tr>\n            <td>\n              Number::toString\n            </td>\n            <td rowspan=\"2\">\n              `String(x)`\n            </td>\n            <td rowspan=\"2\">\n              Many expressions and built-in functions, via <emu-xref href=\"#sec-tostring\" title></emu-xref>\n            </td>\n            <td rowspan=\"2\">\n              String\n            </td>\n          </tr>\n          <tr>\n            <td>\n              BigInt::toString\n            </td>\n          </tr>\n        </table>\n      </emu-table>\n      <p>Because the numeric types are in general not convertible without loss of precision or truncation, the ECMAScript language provides no implicit conversion among these types. Programmers must explicitly call `Number` and `BigInt` functions to convert among types when calling a function which requires another type.</p>\n      <emu-note>\n        <p>The first and subsequent editions of ECMAScript have provided, for certain operators, implicit numeric conversions that could lose precision or truncate. These legacy implicit conversions are maintained for backward compatibility, but not provided for BigInt in order to minimize opportunity for programmer error, and to leave open the option of generalized <em>value types</em> in a future edition.</p>\n      </emu-note>\n\n      <emu-clause id=\"sec-ecmascript-language-types-number-type\">\n        <h1>The Number Type</h1>\n        <p>The <dfn variants=\"is a Number,is not a Number\">Number type</dfn> has exactly 18,437,736,874,454,810,627 (that is, <emu-eqn>2<sup>64</sup> - 2<sup>53</sup> + 3</emu-eqn>) values, representing the double-precision floating point IEEE 754-2019 binary64 values as specified in the IEEE Standard for Binary Floating-Point Arithmetic, except that the 9,007,199,254,740,990 (that is, <emu-eqn>2<sup>53</sup> - 2</emu-eqn>) distinct “Not-a-Number” values of the IEEE Standard are represented in ECMAScript as a single special *NaN* value. (Note that the *NaN* value is produced by the program expression `NaN`.) In some implementations, external code might be able to detect a difference between various Not-a-Number values, but such behaviour is implementation-defined; to ECMAScript code, all *NaN* values are indistinguishable from each other.</p>\n        <emu-note>\n          <p>The bit pattern that might be observed in an ArrayBuffer (see <emu-xref href=\"#sec-arraybuffer-objects\"></emu-xref>) or a SharedArrayBuffer (see <emu-xref href=\"#sec-sharedarraybuffer-objects\"></emu-xref>) after a Number value has been stored into it is not necessarily the same as the internal representation of that Number value used by the ECMAScript implementation.</p>\n        </emu-note>\n        <p>There are two other special values, called *positive Infinity* and *negative Infinity*. For brevity, these values are also referred to for expository purposes by the symbols *+∞*<sub>𝔽</sub> and *-∞*<sub>𝔽</sub>, respectively. (Note that these two infinite Number values are produced by the program expressions `+Infinity` (or simply `Infinity`) and `-Infinity`.)</p>\n        <p>The other 18,437,736,874,454,810,624 (that is, <emu-eqn>2<sup>64</sup> - 2<sup>53</sup></emu-eqn>) values are called the <dfn id=\"finite\">finite</dfn> numbers. Half of these are positive numbers and half are negative numbers; for every finite positive Number value there is a corresponding negative value having the same magnitude.</p>\n        <p>Note that there is both a *positive zero* and a *negative zero*. For brevity, these values are also referred to for expository purposes by the symbols *+0*<sub>𝔽</sub> and *-0*<sub>𝔽</sub>, respectively. (Note that these two different zero Number values are produced by the program expressions `+0` (or simply `0`) and `-0`.)</p>\n        <p>The 18,437,736,874,454,810,622 (that is, <emu-eqn>2<sup>64</sup> - 2<sup>53</sup> - 2</emu-eqn>) finite non-zero values are of two kinds:</p>\n        <p>18,428,729,675,200,069,632 (that is, <emu-eqn>2<sup>64</sup> - 2<sup>54</sup></emu-eqn>) of them are normalized, having the form</p>\n        <div class=\"math-display\">\n          _s_ × _m_ × 2<sup>_e_</sup>\n        </div>\n        <p>where _s_ is 1 or -1, _m_ is an integer in the interval from 2<sup>52</sup> (inclusive) to 2<sup>53</sup> (exclusive), and _e_ is an integer in the inclusive interval from -1074 to 971.</p>\n        <p>The remaining 9,007,199,254,740,990 (that is, <emu-eqn>2<sup>53</sup> - 2</emu-eqn>) values are denormalized, having the form</p>\n        <div class=\"math-display\">\n          _s_ × _m_ × 2<sup>_e_</sup>\n        </div>\n        <p>where _s_ is 1 or -1, _m_ is an integer in the interval from 0 (exclusive) to 2<sup>52</sup> (exclusive), and _e_ is -1074.</p>\n        <p>Note that all the positive and negative integers whose magnitude is no greater than 2<sup>53</sup> are representable in the Number type. The integer 0 has two representations in the Number type: *+0*<sub>𝔽</sub> and *-0*<sub>𝔽</sub>.</p>\n        <p>A finite number has an <em>odd significand</em> if it is non-zero and the integer _m_ used to express it (in one of the two forms shown above) is odd. Otherwise, it has an <em>even significand</em>.</p>\n        <p>In this specification, the phrase “the <dfn id=\"number-value-for\" oldids=\"number-value\">Number value for</dfn> _x_” where _x_ represents an exact real mathematical quantity (which might even be an irrational number such as π) means a Number value chosen in the following manner. Consider the set of all finite values of the Number type, with *-0*<sub>𝔽</sub> removed and with two additional values added to it that are not representable in the Number type, namely 2<sup>1024</sup> (which is <emu-eqn>+1 × 2<sup>53</sup> × 2<sup>971</sup></emu-eqn>) and <emu-eqn>-2<sup>1024</sup></emu-eqn> (which is <emu-eqn>-1 × 2<sup>53</sup> × 2<sup>971</sup></emu-eqn>). Choose the member of this set that is closest in value to _x_. If two values of the set are equally close, then the one with an even significand is chosen; for this purpose, the two extra values 2<sup>1024</sup> and <emu-eqn>-2<sup>1024</sup></emu-eqn> are considered to have even significands. Finally, if 2<sup>1024</sup> was chosen, replace it with *+∞*<sub>𝔽</sub>; if <emu-eqn>-2<sup>1024</sup></emu-eqn> was chosen, replace it with *-∞*<sub>𝔽</sub>; if *+0*<sub>𝔽</sub> was chosen, replace it with *-0*<sub>𝔽</sub> if and only if _x_ &lt; 0; any other chosen value is used unchanged. The result is the Number value for _x_. (This procedure corresponds exactly to the behaviour of the IEEE 754-2019 roundTiesToEven mode.)</p>\n        <p>The Number value for +∞ is *+∞*<sub>𝔽</sub>, and the Number value for -∞ is *-∞*<sub>𝔽</sub>.</p>\n        <p>Some ECMAScript operators deal only with integers in specific ranges such as the inclusive interval from <emu-eqn>-2<sup>31</sup></emu-eqn> to <emu-eqn>2<sup>31</sup> - 1</emu-eqn> or the inclusive interval from 0 to <emu-eqn>2<sup>16</sup> - 1</emu-eqn>. These operators accept any value of the Number type but first convert each such value to an integer value in the expected range. See the descriptions of the numeric conversion operations in <emu-xref href=\"#sec-type-conversion\"></emu-xref>.</p>\n\n        <emu-clause id=\"sec-numeric-types-number-unaryMinus\" type=\"numeric method\">\n          <h1>\n            Number::unaryMinus (\n              _x_: a Number,\n            ): a Number\n          </h1>\n          <dl class=\"header\">\n          </dl>\n          <emu-alg>\n            1. If _x_ is *NaN*, return *NaN*.\n            1. Return the negation of _x_; that is, compute a Number with the same magnitude but opposite sign.\n          </emu-alg>\n        </emu-clause>\n\n        <emu-clause id=\"sec-numeric-types-number-bitwiseNOT\" type=\"numeric method\">\n          <h1>\n            Number::bitwiseNOT (\n              _x_: a Number,\n            ): an integral Number\n          </h1>\n          <dl class=\"header\">\n          </dl>\n          <emu-alg>\n            1. Let _oldValue_ be ! ToInt32(_x_).\n            1. Return the bitwise complement of _oldValue_. The mathematical value of the result is exactly representable as a 32-bit two's complement bit string.\n          </emu-alg>\n        </emu-clause>\n\n        <emu-clause id=\"sec-numeric-types-number-exponentiate\" type=\"numeric method\" oldids=\"sec-applying-the-exp-operator\">\n          <h1>\n            Number::exponentiate (\n              _base_: a Number,\n              _exponent_: a Number,\n            ): a Number\n          </h1>\n          <dl class=\"header\">\n            <dt>description</dt>\n            <dd>It returns an implementation-approximated value representing the result of raising _base_ to the _exponent_ power.</dd>\n          </dl>\n          <emu-alg>\n            1. If _exponent_ is *NaN*, return *NaN*.\n            1. If _exponent_ is either *+0*<sub>𝔽</sub> or *-0*<sub>𝔽</sub>, return *1*<sub>𝔽</sub>.\n            1. If _base_ is *NaN*, return *NaN*.\n            1. If _base_ is *+∞*<sub>𝔽</sub>, then\n              1. If _exponent_ > *+0*<sub>𝔽</sub>, return *+∞*<sub>𝔽</sub>. Otherwise, return *+0*<sub>𝔽</sub>.\n            1. If _base_ is *-∞*<sub>𝔽</sub>, then\n              1. If _exponent_ > *+0*<sub>𝔽</sub>, then\n                1. If _exponent_ is an odd integral Number, return *-∞*<sub>𝔽</sub>. Otherwise, return *+∞*<sub>𝔽</sub>.\n              1. Else,\n                1. If _exponent_ is an odd integral Number, return *-0*<sub>𝔽</sub>. Otherwise, return *+0*<sub>𝔽</sub>.\n            1. If _base_ is *+0*<sub>𝔽</sub>, then\n              1. If _exponent_ > *+0*<sub>𝔽</sub>, return *+0*<sub>𝔽</sub>. Otherwise, return *+∞*<sub>𝔽</sub>.\n            1. If _base_ is *-0*<sub>𝔽</sub>, then\n              1. If _exponent_ > *+0*<sub>𝔽</sub>, then\n                1. If _exponent_ is an odd integral Number, return *-0*<sub>𝔽</sub>. Otherwise, return *+0*<sub>𝔽</sub>.\n              1. Else,\n                1. If _exponent_ is an odd integral Number, return *-∞*<sub>𝔽</sub>. Otherwise, return *+∞*<sub>𝔽</sub>.\n            1. Assert: _base_ is finite and is neither *+0*<sub>𝔽</sub> nor *-0*<sub>𝔽</sub>.\n            1. If _exponent_ is *+∞*<sub>𝔽</sub>, then\n              1. If abs(ℝ(_base_)) > 1, return *+∞*<sub>𝔽</sub>.\n              1. If abs(ℝ(_base_)) = 1, return *NaN*.\n              1. If abs(ℝ(_base_)) &lt; 1, return *+0*<sub>𝔽</sub>.\n            1. If _exponent_ is *-∞*<sub>𝔽</sub>, then\n              1. If abs(ℝ(_base_)) > 1, return *+0*<sub>𝔽</sub>.\n              1. If abs(ℝ(_base_)) = 1, return *NaN*.\n              1. If abs(ℝ(_base_)) &lt; 1, return *+∞*<sub>𝔽</sub>.\n            1. Assert: _exponent_ is finite and is neither *+0*<sub>𝔽</sub> nor *-0*<sub>𝔽</sub>.\n            1. If _base_ &lt; *-0*<sub>𝔽</sub> and _exponent_ is not an integral Number, return *NaN*.\n            1. Return an implementation-approximated Number value representing the result of raising ℝ(_base_) to the ℝ(_exponent_) power.\n          </emu-alg>\n          <emu-note>\n            <p>The result of _base_ `**` _exponent_ when _base_ is *1*<sub>𝔽</sub> or *-1*<sub>𝔽</sub> and _exponent_ is *+∞*<sub>𝔽</sub> or *-∞*<sub>𝔽</sub>, or when _base_ is *1*<sub>𝔽</sub> and _exponent_ is *NaN*, differs from IEEE 754-2019. The first edition of ECMAScript specified a result of *NaN* for this operation, whereas later revisions of IEEE 754 specified *1*<sub>𝔽</sub>. The historical ECMAScript behaviour is preserved for compatibility reasons.</p>\n          </emu-note>\n        </emu-clause>\n\n        <emu-clause id=\"sec-numeric-types-number-multiply\" type=\"numeric method\" oldids=\"sec-applying-the-mul-operator\">\n          <h1>\n            Number::multiply (\n              _x_: a Number,\n              _y_: a Number,\n            ): a Number\n          </h1>\n          <dl class=\"header\">\n            <dt>description</dt>\n            <dd>It performs multiplication according to the rules of IEEE 754-2019 binary double-precision arithmetic, producing the product of _x_ and _y_.</dd>\n          </dl>\n          <emu-alg>\n            1. If _x_ is *NaN* or _y_ is *NaN*, return *NaN*.\n            1. If _x_ is either *+∞*<sub>𝔽</sub> or *-∞*<sub>𝔽</sub>, then\n              1. If _y_ is either *+0*<sub>𝔽</sub> or *-0*<sub>𝔽</sub>, return *NaN*.\n              1. If _y_ > *+0*<sub>𝔽</sub>, return _x_.\n              1. Return -_x_.\n            1. If _y_ is either *+∞*<sub>𝔽</sub> or *-∞*<sub>𝔽</sub>, then\n              1. If _x_ is either *+0*<sub>𝔽</sub> or *-0*<sub>𝔽</sub>, return *NaN*.\n              1. If _x_ > *+0*<sub>𝔽</sub>, return _y_.\n              1. Return -_y_.\n            1. If _x_ is *-0*<sub>𝔽</sub>, then\n              1. If _y_ is *-0*<sub>𝔽</sub> or _y_ &lt; *-0*<sub>𝔽</sub>, return *+0*<sub>𝔽</sub>.\n              1. Else, return *-0*<sub>𝔽</sub>.\n            1. If _y_ is *-0*<sub>𝔽</sub>, then\n              1. If _x_ &lt; *-0*<sub>𝔽</sub>, return *+0*<sub>𝔽</sub>.\n              1. Else, return *-0*<sub>𝔽</sub>.\n            1. Return 𝔽(ℝ(_x_) × ℝ(_y_)).\n          </emu-alg>\n          <emu-note>\n            <p>Finite-precision multiplication is commutative, but not always associative.</p>\n          </emu-note>\n        </emu-clause>\n\n        <emu-clause id=\"sec-numeric-types-number-divide\" type=\"numeric method\" oldids=\"sec-applying-the-div-operator\">\n          <h1>\n            Number::divide (\n              _x_: a Number,\n              _y_: a Number,\n            ): a Number\n          </h1>\n          <dl class=\"header\">\n            <dt>description</dt>\n            <dd>It performs division according to the rules of IEEE 754-2019 binary double-precision arithmetic, producing the quotient of _x_ and _y_ where _x_ is the dividend and _y_ is the divisor.</dd>\n          </dl>\n          <emu-alg>\n            1. If _x_ is *NaN* or _y_ is *NaN*, return *NaN*.\n            1. If _x_ is either *+∞*<sub>𝔽</sub> or *-∞*<sub>𝔽</sub>, then\n              1. If _y_ is either *+∞*<sub>𝔽</sub> or *-∞*<sub>𝔽</sub>, return *NaN*.\n              1. If _y_ is *+0*<sub>𝔽</sub> or _y_ > *+0*<sub>𝔽</sub>, return _x_.\n              1. Return -_x_.\n            1. If _y_ is *+∞*<sub>𝔽</sub>, then\n              1. If _x_ is *+0*<sub>𝔽</sub> or _x_ > *+0*<sub>𝔽</sub>, return *+0*<sub>𝔽</sub>. Otherwise, return *-0*<sub>𝔽</sub>.\n            1. If _y_ is *-∞*<sub>𝔽</sub>, then\n              1. If _x_ is *+0*<sub>𝔽</sub> or _x_ > *+0*<sub>𝔽</sub>, return *-0*<sub>𝔽</sub>. Otherwise, return *+0*<sub>𝔽</sub>.\n            1. If _x_ is either *+0*<sub>𝔽</sub> or *-0*<sub>𝔽</sub>, then\n              1. If _y_ is either *+0*<sub>𝔽</sub> or *-0*<sub>𝔽</sub>, return *NaN*.\n              1. If _y_ > *+0*<sub>𝔽</sub>, return _x_.\n              1. Return -_x_.\n            1. If _y_ is *+0*<sub>𝔽</sub>, then\n              1. If _x_ > *+0*<sub>𝔽</sub>, return *+∞*<sub>𝔽</sub>. Otherwise, return *-∞*<sub>𝔽</sub>.\n            1. If _y_ is *-0*<sub>𝔽</sub>, then\n              1. If _x_ > *+0*<sub>𝔽</sub>, return *-∞*<sub>𝔽</sub>. Otherwise, return *+∞*<sub>𝔽</sub>.\n            1. Return 𝔽(ℝ(_x_) / ℝ(_y_)).\n          </emu-alg>\n        </emu-clause>\n\n        <emu-clause id=\"sec-numeric-types-number-remainder\" type=\"numeric method\" oldids=\"sec-applying-the-mod-operator\">\n          <h1>\n            Number::remainder (\n              _n_: a Number,\n              _d_: a Number,\n            ): a Number\n          </h1>\n          <dl class=\"header\">\n            <dt>description</dt>\n            <dd>It yields the remainder from an implied division of its operands where _n_ is the dividend and _d_ is the divisor.</dd>\n          </dl>\n          <emu-alg>\n            1. If _n_ is *NaN* or _d_ is *NaN*, return *NaN*.\n            1. If _n_ is either *+∞*<sub>𝔽</sub> or *-∞*<sub>𝔽</sub>, return *NaN*.\n            1. If _d_ is either *+∞*<sub>𝔽</sub> or *-∞*<sub>𝔽</sub>, return _n_.\n            1. If _d_ is either *+0*<sub>𝔽</sub> or *-0*<sub>𝔽</sub>, return *NaN*.\n            1. If _n_ is either *+0*<sub>𝔽</sub> or *-0*<sub>𝔽</sub>, return _n_.\n            1. Assert: _n_ and _d_ are finite and non-zero.\n            1. Let _quotient_ be ℝ(_n_) / ℝ(_d_).\n            1. Let _q_ be truncate(_quotient_).\n            1. Let _r_ be ℝ(_n_) - (ℝ(_d_) × _q_).\n            1. If _r_ = 0 and _n_ &lt; *-0*<sub>𝔽</sub>, return *-0*<sub>𝔽</sub>.\n            1. Return 𝔽(_r_).\n          </emu-alg>\n          <emu-note>\n            <p>In C and C++, the remainder operator accepts only integral operands; in ECMAScript, it also accepts floating-point operands.</p>\n          </emu-note>\n          <emu-note>The result of a floating-point remainder operation as computed by the `%` operator is not the same as the “remainder” operation defined by IEEE 754-2019. The IEEE 754-2019 “remainder” operation computes the remainder from a rounding division, not a truncating division, and so its behaviour is not analogous to that of the usual <emu-not-ref>integer</emu-not-ref> remainder operator. Instead the ECMAScript language defines `%` on floating-point operations to behave in a manner analogous to that of the Java <emu-not-ref>integer</emu-not-ref> remainder operator; this may be compared with the C library function fmod.</emu-note>\n        </emu-clause>\n\n        <emu-clause id=\"sec-numeric-types-number-add\" type=\"numeric method\" oldids=\"sec-applying-the-additive-operators-to-numbers\">\n          <h1>\n            Number::add (\n              _x_: a Number,\n              _y_: a Number,\n            ): a Number\n          </h1>\n          <dl class=\"header\">\n            <dt>description</dt>\n            <dd>It performs addition according to the rules of IEEE 754-2019 binary double-precision arithmetic, producing the sum of its arguments.</dd>\n          </dl>\n          <emu-alg>\n            1. If _x_ is *NaN* or _y_ is *NaN*, return *NaN*.\n            1. If _x_ is *+∞*<sub>𝔽</sub> and _y_ is *-∞*<sub>𝔽</sub>, return *NaN*.\n            1. If _x_ is *-∞*<sub>𝔽</sub> and _y_ is *+∞*<sub>𝔽</sub>, return *NaN*.\n            1. If _x_ is either *+∞*<sub>𝔽</sub> or *-∞*<sub>𝔽</sub>, return _x_.\n            1. If _y_ is either *+∞*<sub>𝔽</sub> or *-∞*<sub>𝔽</sub>, return _y_.\n            1. Assert: _x_ and _y_ are both finite.\n            1. If _x_ is *-0*<sub>𝔽</sub> and _y_ is *-0*<sub>𝔽</sub>, return *-0*<sub>𝔽</sub>.\n            1. Return 𝔽(ℝ(_x_) + ℝ(_y_)).\n          </emu-alg>\n          <emu-note>\n            <p>Finite-precision addition is commutative, but not always associative.</p>\n          </emu-note>\n        </emu-clause>\n\n        <emu-clause id=\"sec-numeric-types-number-subtract\" type=\"numeric method\">\n          <h1>\n            Number::subtract (\n              _x_: a Number,\n              _y_: a Number,\n            ): a Number\n          </h1>\n          <dl class=\"header\">\n            <dt>description</dt>\n            <dd>It performs subtraction, producing the difference of its operands; _x_ is the minuend and _y_ is the subtrahend.</dd>\n          </dl>\n          <emu-alg>\n            1. Return Number::add(_x_, Number::unaryMinus(_y_)).\n          </emu-alg>\n          <emu-note>\n            <p>It is always the case that `x - y` produces the same result as `x + (-y)`.</p>\n          </emu-note>\n        </emu-clause>\n\n        <emu-clause id=\"sec-numeric-types-number-leftShift\" type=\"numeric method\">\n          <h1>\n            Number::leftShift (\n              _x_: a Number,\n              _y_: a Number,\n            ): an integral Number\n          </h1>\n          <dl class=\"header\">\n          </dl>\n          <emu-alg>\n            1. Let _lNum_ be ! ToInt32(_x_).\n            1. Let _rNum_ be ! ToUint32(_y_).\n            1. Let _shiftCount_ be ℝ(_rNum_) modulo 32.\n            1. Return the result of left shifting _lNum_ by _shiftCount_ bits. The mathematical value of the result is exactly representable as a 32-bit two's complement bit string.\n          </emu-alg>\n        </emu-clause>\n\n        <emu-clause id=\"sec-numeric-types-number-signedRightShift\" type=\"numeric method\">\n          <h1>\n            Number::signedRightShift (\n              _x_: a Number,\n              _y_: a Number,\n            ): an integral Number\n          </h1>\n          <dl class=\"header\">\n          </dl>\n          <emu-alg>\n            1. Let _lNum_ be ! ToInt32(_x_).\n            1. Let _rNum_ be ! ToUint32(_y_).\n            1. Let _shiftCount_ be ℝ(_rNum_) modulo 32.\n            1. Return the result of performing a sign-extending right shift of _lNum_ by _shiftCount_ bits. The most significant bit is propagated. The mathematical value of the result is exactly representable as a 32-bit two's complement bit string.\n          </emu-alg>\n        </emu-clause>\n\n        <emu-clause id=\"sec-numeric-types-number-unsignedRightShift\" type=\"numeric method\">\n          <h1>\n            Number::unsignedRightShift (\n              _x_: a Number,\n              _y_: a Number,\n            ): an integral Number\n          </h1>\n          <dl class=\"header\">\n          </dl>\n          <emu-alg>\n            1. Let _lNum_ be ! ToUint32(_x_).\n            1. Let _rNum_ be ! ToUint32(_y_).\n            1. Let _shiftCount_ be ℝ(_rNum_) modulo 32.\n            1. Return the result of performing a zero-filling right shift of _lNum_ by _shiftCount_ bits. Vacated bits are filled with zero. The mathematical value of the result is exactly representable as a 32-bit unsigned bit string.\n          </emu-alg>\n        </emu-clause>\n\n        <emu-clause id=\"sec-numeric-types-number-lessThan\" type=\"numeric method\">\n          <h1>\n            Number::lessThan (\n              _x_: a Number,\n              _y_: a Number,\n            ): a Boolean or *undefined*\n          </h1>\n          <dl class=\"header\">\n          </dl>\n          <emu-alg>\n            1. If _x_ is *NaN*, return *undefined*.\n            1. If _y_ is *NaN*, return *undefined*.\n            1. If _x_ is _y_, return *false*.\n            1. If _x_ is *+0*<sub>𝔽</sub> and _y_ is *-0*<sub>𝔽</sub>, return *false*.\n            1. If _x_ is *-0*<sub>𝔽</sub> and _y_ is *+0*<sub>𝔽</sub>, return *false*.\n            1. If _x_ is *+∞*<sub>𝔽</sub>, return *false*.\n            1. If _y_ is *+∞*<sub>𝔽</sub>, return *true*.\n            1. If _y_ is *-∞*<sub>𝔽</sub>, return *false*.\n            1. If _x_ is *-∞*<sub>𝔽</sub>, return *true*.\n            1. Assert: _x_ and _y_ are finite.\n            1. If ℝ(_x_) &lt; ℝ(_y_), return *true*. Otherwise, return *false*.\n          </emu-alg>\n        </emu-clause>\n\n        <emu-clause id=\"sec-numeric-types-number-equal\" type=\"numeric method\">\n          <h1>\n            Number::equal (\n              _x_: a Number,\n              _y_: a Number,\n            ): a Boolean\n          </h1>\n          <dl class=\"header\">\n          </dl>\n          <emu-alg>\n            1. If _x_ is *NaN*, return *false*.\n            1. If _y_ is *NaN*, return *false*.\n            1. If _x_ is _y_, return *true*.\n            1. If _x_ is *+0*<sub>𝔽</sub> and _y_ is *-0*<sub>𝔽</sub>, return *true*.\n            1. If _x_ is *-0*<sub>𝔽</sub> and _y_ is *+0*<sub>𝔽</sub>, return *true*.\n            1. Return *false*.\n          </emu-alg>\n        </emu-clause>\n\n        <emu-clause id=\"sec-numeric-types-number-sameValue\" type=\"numeric method\">\n          <h1>\n            Number::sameValue (\n              _x_: a Number,\n              _y_: a Number,\n            ): a Boolean\n          </h1>\n          <dl class=\"header\">\n          </dl>\n          <emu-alg>\n            1. If _x_ is *NaN* and _y_ is *NaN*, return *true*.\n            1. If _x_ is *+0*<sub>𝔽</sub> and _y_ is *-0*<sub>𝔽</sub>, return *false*.\n            1. If _x_ is *-0*<sub>𝔽</sub> and _y_ is *+0*<sub>𝔽</sub>, return *false*.\n            1. If _x_ is _y_, return *true*.\n            1. Return *false*.\n          </emu-alg>\n        </emu-clause>\n\n        <emu-clause id=\"sec-numeric-types-number-sameValueZero\" type=\"numeric method\">\n          <h1>\n            Number::sameValueZero (\n              _x_: a Number,\n              _y_: a Number,\n            ): a Boolean\n          </h1>\n          <dl class=\"header\">\n          </dl>\n          <emu-alg>\n            1. If _x_ is *NaN* and _y_ is *NaN*, return *true*.\n            1. If _x_ is *+0*<sub>𝔽</sub> and _y_ is *-0*<sub>𝔽</sub>, return *true*.\n            1. If _x_ is *-0*<sub>𝔽</sub> and _y_ is *+0*<sub>𝔽</sub>, return *true*.\n            1. If _x_ is _y_, return *true*.\n            1. Return *false*.\n          </emu-alg>\n        </emu-clause>\n\n        <emu-clause id=\"sec-numberbitwiseop\" type=\"abstract operation\">\n          <h1>\n            NumberBitwiseOp (\n              _op_: `&amp;`, `^`, or `|`,\n              _x_: a Number,\n              _y_: a Number,\n            ): an integral Number\n          </h1>\n          <dl class=\"header\">\n          </dl>\n          <emu-alg>\n            1. Let _lNum_ be ! ToInt32(_x_).\n            1. Let _rNum_ be ! ToInt32(_y_).\n            1. Let _lBits_ be the 32-bit two's complement bit string representing ℝ(_lNum_).\n            1. Let _rBits_ be the 32-bit two's complement bit string representing ℝ(_rNum_).\n            1. If _op_ is `&amp;`, then\n              1. Let _result_ be the result of applying the bitwise AND operation to _lBits_ and _rBits_.\n            1. Else if _op_ is `^`, then\n              1. Let _result_ be the result of applying the bitwise exclusive OR (XOR) operation to _lBits_ and _rBits_.\n            1. Else,\n              1. Assert: _op_ is `|`.\n              1. Let _result_ be the result of applying the bitwise inclusive OR operation to _lBits_ and _rBits_.\n            1. Return the Number value for the integer represented by the 32-bit two's complement bit string _result_.\n          </emu-alg>\n        </emu-clause>\n\n        <emu-clause id=\"sec-numeric-types-number-bitwiseAND\" type=\"numeric method\">\n          <h1>\n            Number::bitwiseAND (\n              _x_: a Number,\n              _y_: a Number,\n            ): an integral Number\n          </h1>\n          <dl class=\"header\">\n          </dl>\n          <emu-alg>\n            1. Return NumberBitwiseOp(`&amp;`, _x_, _y_).\n          </emu-alg>\n        </emu-clause>\n\n        <emu-clause id=\"sec-numeric-types-number-bitwiseXOR\" type=\"numeric method\">\n          <h1>\n            Number::bitwiseXOR (\n              _x_: a Number,\n              _y_: a Number,\n            ): an integral Number\n          </h1>\n          <dl class=\"header\">\n          </dl>\n          <emu-alg>\n            1. Return NumberBitwiseOp(`^`, _x_, _y_).\n          </emu-alg>\n        </emu-clause>\n\n        <emu-clause id=\"sec-numeric-types-number-bitwiseOR\" type=\"numeric method\">\n          <h1>\n            Number::bitwiseOR (\n              _x_: a Number,\n              _y_: a Number,\n            ): an integral Number\n          </h1>\n          <dl class=\"header\">\n          </dl>\n          <emu-alg>\n            1. Return NumberBitwiseOp(`|`, _x_, _y_).\n          </emu-alg>\n        </emu-clause>\n\n        <emu-clause id=\"sec-numeric-types-number-tostring\" type=\"numeric method\" oldids=\"sec-tostring-applied-to-the-number-type\">\n          <h1>\n            Number::toString (\n              _x_: a Number,\n              _radix_: an integer in the inclusive interval from 2 to 36,\n            ): a String\n          </h1>\n          <dl class=\"header\">\n            <dt>description</dt>\n            <dd>It represents _x_ as a String using a positional numeral system with radix _radix_. The digits used in the representation of a number using radix _r_ are taken from the first _r_ code units of *\"0123456789abcdefghijklmnopqrstuvwxyz\"* in order. The representation of numbers with magnitude greater than or equal to *1*<sub>𝔽</sub> never includes leading zeroes.</dd>\n          </dl>\n          <emu-alg>\n            1. If _x_ is *NaN*, return *\"NaN\"*.\n            1. If _x_ is either *+0*<sub>𝔽</sub> or *-0*<sub>𝔽</sub>, return *\"0\"*.\n            1. If _x_ &lt; *-0*<sub>𝔽</sub>, return the string-concatenation of *\"-\"* and Number::toString(-_x_, _radix_).\n            1. If _x_ is *+∞*<sub>𝔽</sub>, return *\"Infinity\"*.\n            1. [id=\"step-number-tostring-intermediate-values\"] Let _n_, _k_, and _s_ be integers such that _k_ ≥ 1, _radix_<sup>_k_ - 1</sup> ≤ _s_ &lt; _radix_<sup>_k_</sup>, 𝔽(_s_ × _radix_<sup>_n_ - _k_</sup>) is _x_, and _k_ is as small as possible. Note that _k_ is the number of digits in the representation of _s_ using radix _radix_, that _s_ is not divisible by _radix_, and that the least significant digit of _s_ is not necessarily uniquely determined by these criteria.\n            1. If _radix_ ≠ 10 or _n_ is in the inclusive interval from -5 to 21, then\n              1. If _n_ ≥ _k_, then\n                1. Return the string-concatenation of:\n                  * the code units of the _k_ digits of the representation of _s_ using radix _radix_\n                  * _n_ - _k_ occurrences of the code unit 0x0030 (DIGIT ZERO)\n              1. Else if _n_ > 0, then\n                1. Return the string-concatenation of:\n                  * the code units of the most significant _n_ digits of the representation of _s_ using radix _radix_\n                  * the code unit 0x002E (FULL STOP)\n                  * the code units of the remaining _k_ - _n_ digits of the representation of _s_ using radix _radix_\n              1. Else,\n                1. Assert: _n_ ≤ 0.\n                1. Return the string-concatenation of:\n                  * the code unit 0x0030 (DIGIT ZERO)\n                  * the code unit 0x002E (FULL STOP)\n                  * -_n_ occurrences of the code unit 0x0030 (DIGIT ZERO)\n                  * the code units of the _k_ digits of the representation of _s_ using radix _radix_\n            1. NOTE: In this case, the input will be represented using scientific E notation, such as `1.2e+3`.\n            1. Assert: _radix_ is 10.\n            1. If _n_ &lt; 0, then\n              1. Let _exponentSign_ be the code unit 0x002D (HYPHEN-MINUS).\n            1. Else,\n              1. Let _exponentSign_ be the code unit 0x002B (PLUS SIGN).\n            1. If _k_ = 1, then\n              1. Return the string-concatenation of:\n                * the code unit of the single digit of _s_\n                * the code unit 0x0065 (LATIN SMALL LETTER E)\n                * _exponentSign_\n                * the code units of the decimal representation of abs(_n_ - 1)\n            1. Return the string-concatenation of:\n              * the code unit of the most significant digit of the decimal representation of _s_\n              * the code unit 0x002E (FULL STOP)\n              * the code units of the remaining _k_ - 1 digits of the decimal representation of _s_\n              * the code unit 0x0065 (LATIN SMALL LETTER E)\n              * _exponentSign_\n              * the code units of the decimal representation of abs(_n_ - 1)\n          </emu-alg>\n          <emu-note>\n            <p>The following observations may be useful as guidelines for implementations, but are not part of the normative requirements of this Standard:</p>\n            <ul>\n              <li>\n                If x is any Number value other than *-0*<sub>𝔽</sub>, then ToNumber(ToString(x)) is x.\n              </li>\n              <li>\n                The least significant digit of s is not always uniquely determined by the requirements listed in step <emu-xref href=\"#step-number-tostring-intermediate-values\"></emu-xref>.\n              </li>\n            </ul>\n          </emu-note>\n          <emu-note>\n            <p>For implementations that provide more accurate conversions than required by the rules above, it is recommended that the following alternative version of step <emu-xref href=\"#step-number-tostring-intermediate-values\"></emu-xref> be used as a guideline:</p>\n            <emu-alg replaces-step=\"step-number-tostring-intermediate-values\">\n              1. Let _n_, _k_, and _s_ be integers such that _k_ ≥ 1, _radix_<sup>_k_ - 1</sup> ≤ _s_ &lt; _radix_<sup>_k_</sup>, 𝔽(_s_ × _radix_<sup>_n_ - _k_</sup>) is _x_, and _k_ is as small as possible. If there are multiple possibilities for _s_, choose the value of _s_ for which _s_ × _radix_<sup>_n_ - _k_</sup> is closest in value to ℝ(_x_). If there are two such possible values of _s_, choose the one that is even. Note that _k_ is the number of digits in the representation of _s_ using radix _radix_ and that _s_ is not divisible by _radix_.\n            </emu-alg>\n          </emu-note>\n          <emu-note>\n            <p>Implementers of ECMAScript may find useful the paper and code written by David M. Gay for binary-to-decimal conversion of floating-point numbers:</p>\n            <p>\n              Gay, David M. Correctly Rounded Binary-Decimal and Decimal-Binary Conversions. Numerical Analysis, Manuscript 90-10. AT&amp;T Bell Laboratories (Murray Hill, New Jersey). 30 November 1990. Available as<br>\n              <a href=\"https://ampl.com/_archive/first-website/REFS/rounding.pdf\">https://ampl.com/_archive/first-website/REFS/rounding.pdf</a>. Associated code available as<br>\n              <a href=\"http://netlib.sandia.gov/fp/dtoa.c\">http://netlib.sandia.gov/fp/dtoa.c</a> and as<br>\n              <a href=\"http://netlib.sandia.gov/fp/g_fmt.c\">http://netlib.sandia.gov/fp/g_fmt.c</a> and may also be found at the various `netlib` mirror sites.\n            </p>\n          </emu-note>\n        </emu-clause>\n      </emu-clause>\n\n      <emu-clause id=\"sec-ecmascript-language-types-bigint-type\">\n        <h1>The BigInt Type</h1>\n        <p>The <dfn variants=\"is a BigInt,is not a BigInt\">BigInt type</dfn> represents an integer value. The value may be any size and is not limited to a particular bit-width. Generally, where not otherwise noted, operations are designed to return exact mathematically-based answers. For binary operations, BigInts act as two's complement binary strings, with negative numbers treated as having bits set infinitely to the left.</p>\n\n        <emu-clause id=\"sec-numeric-types-bigint-unaryMinus\" type=\"numeric method\">\n          <h1>\n            BigInt::unaryMinus (\n              _x_: a BigInt,\n            ): a BigInt\n          </h1>\n          <dl class=\"header\">\n          </dl>\n          <emu-alg>\n            1. If _x_ = *0*<sub>ℤ</sub>, return *0*<sub>ℤ</sub>.\n            1. Return -_x_.\n          </emu-alg>\n        </emu-clause>\n\n        <emu-clause id=\"sec-numeric-types-bigint-bitwiseNOT\" type=\"numeric method\">\n          <h1>\n            BigInt::bitwiseNOT (\n              _x_: a BigInt,\n            ): a BigInt\n          </h1>\n          <dl class=\"header\">\n            <dt>description</dt>\n            <dd>It returns the one's complement of _x_.</dd>\n          </dl>\n          <emu-alg>\n            1. Return -_x_ - *1*<sub>ℤ</sub>.\n          </emu-alg>\n        </emu-clause>\n\n        <emu-clause id=\"sec-numeric-types-bigint-exponentiate\" type=\"numeric method\">\n          <h1>\n            BigInt::exponentiate (\n              _base_: a BigInt,\n              _exponent_: a BigInt,\n            ): either a normal completion containing a BigInt or a throw completion\n          </h1>\n          <dl class=\"header\">\n          </dl>\n          <emu-alg>\n            1. If _exponent_ &lt; *0*<sub>ℤ</sub>, throw a *RangeError* exception.\n            1. If _base_ = *0*<sub>ℤ</sub> and _exponent_ = *0*<sub>ℤ</sub>, return *1*<sub>ℤ</sub>.\n            1. Return _base_ raised to the power _exponent_.\n          </emu-alg>\n        </emu-clause>\n\n        <emu-clause id=\"sec-numeric-types-bigint-multiply\" type=\"numeric method\">\n          <h1>\n            BigInt::multiply (\n              _x_: a BigInt,\n              _y_: a BigInt,\n            ): a BigInt\n          </h1>\n          <dl class=\"header\">\n          </dl>\n          <emu-alg>\n            1. Return _x_ × _y_.\n          </emu-alg>\n          <emu-note>Even if the result has a much larger bit width than the input, the exact mathematical answer is given.</emu-note>\n        </emu-clause>\n\n        <emu-clause id=\"sec-numeric-types-bigint-divide\" type=\"numeric method\">\n          <h1>\n            BigInt::divide (\n              _x_: a BigInt,\n              _y_: a BigInt,\n            ): either a normal completion containing a BigInt or a throw completion\n          </h1>\n          <dl class=\"header\">\n          </dl>\n          <emu-alg>\n            1. If _y_ = *0*<sub>ℤ</sub>, throw a *RangeError* exception.\n            1. Let _quotient_ be ℝ(_x_) / ℝ(_y_).\n            1. Return ℤ(truncate(_quotient_)).\n          </emu-alg>\n        </emu-clause>\n\n        <emu-clause id=\"sec-numeric-types-bigint-remainder\" type=\"numeric method\">\n          <h1>\n            BigInt::remainder (\n              _n_: a BigInt,\n              _d_: a BigInt,\n            ): either a normal completion containing a BigInt or a throw completion\n          </h1>\n          <dl class=\"header\">\n          </dl>\n          <emu-alg>\n            1. If _d_ = *0*<sub>ℤ</sub>, throw a *RangeError* exception.\n            1. If _n_ = *0*<sub>ℤ</sub>, return *0*<sub>ℤ</sub>.\n            1. Let _quotient_ be ℝ(_n_) / ℝ(_d_).\n            1. Let _q_ be ℤ(truncate(_quotient_)).\n            1. Return _n_ - (_d_ × _q_).\n          </emu-alg>\n          <emu-note>The sign of the result is the sign of the dividend.</emu-note>\n        </emu-clause>\n\n        <emu-clause id=\"sec-numeric-types-bigint-add\" type=\"numeric method\">\n          <h1>\n            BigInt::add (\n              _x_: a BigInt,\n              _y_: a BigInt,\n            ): a BigInt\n          </h1>\n          <dl class=\"header\">\n          </dl>\n          <emu-alg>\n            1. Return _x_ + _y_.\n          </emu-alg>\n        </emu-clause>\n\n        <emu-clause id=\"sec-numeric-types-bigint-subtract\" type=\"numeric method\">\n          <h1>\n            BigInt::subtract (\n              _x_: a BigInt,\n              _y_: a BigInt,\n            ): a BigInt\n          </h1>\n          <dl class=\"header\">\n          </dl>\n          <emu-alg>\n            1. Return _x_ - _y_.\n          </emu-alg>\n        </emu-clause>\n\n        <emu-clause id=\"sec-numeric-types-bigint-leftShift\" type=\"numeric method\">\n          <h1>\n            BigInt::leftShift (\n              _x_: a BigInt,\n              _y_: a BigInt,\n            ): a BigInt\n          </h1>\n          <dl class=\"header\">\n          </dl>\n          <emu-alg>\n            1. If _y_ &lt; *0*<sub>ℤ</sub>, then\n              1. Return ℤ(floor(ℝ(_x_) / 2<sup>-ℝ(_y_)</sup>)).\n            1. Return _x_ × *2*<sub>ℤ</sub><sup>_y_</sup>.\n          </emu-alg>\n          <emu-note>Semantics here should be equivalent to a bitwise shift, treating the BigInt as an infinite length string of binary two's complement digits.</emu-note>\n        </emu-clause>\n\n        <emu-clause id=\"sec-numeric-types-bigint-signedRightShift\" type=\"numeric method\">\n          <h1>\n            BigInt::signedRightShift (\n              _x_: a BigInt,\n              _y_: a BigInt,\n            ): a BigInt\n          </h1>\n          <dl class=\"header\">\n          </dl>\n          <emu-alg>\n            1. Return BigInt::leftShift(_x_, -_y_).\n          </emu-alg>\n        </emu-clause>\n\n        <emu-clause id=\"sec-numeric-types-bigint-unsignedRightShift\" type=\"numeric method\">\n          <h1>\n            BigInt::unsignedRightShift (\n              _x_: a BigInt,\n              _y_: a BigInt,\n            ): a throw completion\n          </h1>\n          <dl class=\"header\">\n          </dl>\n          <emu-alg>\n            1. Throw a *TypeError* exception.\n          </emu-alg>\n        </emu-clause>\n\n        <emu-clause id=\"sec-numeric-types-bigint-lessThan\" type=\"numeric method\">\n          <h1>\n            BigInt::lessThan (\n              _x_: a BigInt,\n              _y_: a BigInt,\n            ): a Boolean\n          </h1>\n          <dl class=\"header\">\n          </dl>\n          <emu-alg>\n            1. If ℝ(_x_) &lt; ℝ(_y_), return *true*; otherwise return *false*.\n          </emu-alg>\n        </emu-clause>\n\n        <emu-clause id=\"sec-numeric-types-bigint-equal\" type=\"numeric method\" oldids=\"sec-numeric-types-bigint-sameValue,sec-numeric-types-bigint-sameValueZero\">\n          <h1>\n            BigInt::equal (\n              _x_: a BigInt,\n              _y_: a BigInt,\n            ): a Boolean\n          </h1>\n          <dl class=\"header\">\n          </dl>\n          <emu-alg>\n            1. If ℝ(_x_) = ℝ(_y_), return *true*; otherwise return *false*.\n          </emu-alg>\n        </emu-clause>\n\n        <emu-clause id=\"sec-binaryand\" type=\"abstract operation\">\n          <h1>\n            BinaryAnd (\n              _x_: 0 or 1,\n              _y_: 0 or 1,\n            ): 0 or 1\n          </h1>\n          <dl class=\"header\">\n          </dl>\n          <emu-alg>\n            1. If _x_ = 1 and _y_ = 1, return 1.\n            1. Else, return 0.\n          </emu-alg>\n        </emu-clause>\n\n        <emu-clause id=\"sec-binaryor\" type=\"abstract operation\">\n          <h1>\n            BinaryOr (\n              _x_: 0 or 1,\n              _y_: 0 or 1,\n            ): 0 or 1\n          </h1>\n          <dl class=\"header\">\n          </dl>\n          <emu-alg>\n            1. If _x_ = 1 or _y_ = 1, return 1.\n            1. Else, return 0.\n          </emu-alg>\n        </emu-clause>\n\n        <emu-clause id=\"sec-binaryxor\" type=\"abstract operation\">\n          <h1>\n            BinaryXor (\n              _x_: 0 or 1,\n              _y_: 0 or 1,\n            ): 0 or 1\n          </h1>\n          <dl class=\"header\">\n          </dl>\n          <emu-alg>\n            1. If _x_ = 1 and _y_ = 0, return 1.\n            1. Else if _x_ = 0 and _y_ = 1, return 1.\n            1. Else, return 0.\n          </emu-alg>\n        </emu-clause>\n\n        <emu-clause id=\"sec-bigintbitwiseop\" type=\"abstract operation\">\n          <h1>\n            BigIntBitwiseOp (\n              _op_: `&amp;`, `^`, or `|`,\n              _x_: a BigInt,\n              _y_: a BigInt,\n            ): a BigInt\n          </h1>\n          <dl class=\"header\">\n          </dl>\n          <emu-alg>\n            1. Set _x_ to ℝ(_x_).\n            1. Set _y_ to ℝ(_y_).\n            1. Let _result_ be 0.\n            1. Let _shift_ be 0.\n            1. Repeat, until (_x_ = 0 or _x_ = -1) and (_y_ = 0 or _y_ = -1),\n              1. Let _xDigit_ be _x_ modulo 2.\n              1. Let _yDigit_ be _y_ modulo 2.\n              1. If _op_ is `&amp;`, then\n                1. Set _result_ to _result_ + 2<sup>_shift_</sup> × BinaryAnd(_xDigit_, _yDigit_).\n              1. Else if _op_ is `|`, then\n                1. Set _result_ to _result_ + 2<sup>_shift_</sup> × BinaryOr(_xDigit_, _yDigit_).\n              1. Else,\n                1. Assert: _op_ is `^`.\n                1. Set _result_ to _result_ + 2<sup>_shift_</sup> × BinaryXor(_xDigit_, _yDigit_).\n              1. Set _shift_ to _shift_ + 1.\n              1. Set _x_ to (_x_ - _xDigit_) / 2.\n              1. Set _y_ to (_y_ - _yDigit_) / 2.\n            1. If _op_ is `&amp;`, then\n              1. Let _tmp_ be BinaryAnd(_x_ modulo 2, _y_ modulo 2).\n            1. Else if _op_ is `|`, then\n              1. Let _tmp_ be BinaryOr(_x_ modulo 2, _y_ modulo 2).\n            1. Else,\n              1. Assert: _op_ is `^`.\n              1. Let _tmp_ be BinaryXor(_x_ modulo 2, _y_ modulo 2).\n            1. If _tmp_ ≠ 0, then\n              1. Set _result_ to _result_ - 2<sup>_shift_</sup>.\n              1. NOTE: This extends the sign.\n            1. Return the BigInt value for _result_.\n          </emu-alg>\n        </emu-clause>\n\n        <emu-clause id=\"sec-numeric-types-bigint-bitwiseAND\" type=\"numeric method\">\n          <h1>\n            BigInt::bitwiseAND (\n              _x_: a BigInt,\n              _y_: a BigInt,\n            ): a BigInt\n          </h1>\n          <dl class=\"header\">\n          </dl>\n          <emu-alg>\n            1. Return BigIntBitwiseOp(`&amp;`, _x_, _y_).\n          </emu-alg>\n        </emu-clause>\n\n        <emu-clause id=\"sec-numeric-types-bigint-bitwiseXOR\" type=\"numeric method\">\n          <h1>\n            BigInt::bitwiseXOR (\n              _x_: a BigInt,\n              _y_: a BigInt,\n            ): a BigInt\n          </h1>\n          <dl class=\"header\">\n          </dl>\n          <emu-alg>\n            1. Return BigIntBitwiseOp(`^`, _x_, _y_).\n          </emu-alg>\n        </emu-clause>\n\n        <emu-clause id=\"sec-numeric-types-bigint-bitwiseOR\" type=\"numeric method\">\n          <h1>\n            BigInt::bitwiseOR (\n              _x_: a BigInt,\n              _y_: a BigInt,\n            ): a BigInt\n          </h1>\n          <dl class=\"header\">\n          </dl>\n          <emu-alg>\n            1. Return BigIntBitwiseOp(`|`, _x_, _y_).\n          </emu-alg>\n        </emu-clause>\n\n        <emu-clause id=\"sec-numeric-types-bigint-tostring\" type=\"numeric method\">\n          <h1>\n            BigInt::toString (\n              _x_: a BigInt,\n              _radix_: an integer in the inclusive interval from 2 to 36,\n            ): a String\n          </h1>\n          <dl class=\"header\">\n            <dt>description</dt>\n            <dd>It represents _x_ as a String using a positional numeral system with radix _radix_. The digits used in the representation of a BigInt using radix _r_ are taken from the first _r_ code units of *\"0123456789abcdefghijklmnopqrstuvwxyz\"* in order. The representation of BigInts other than *0*<sub>ℤ</sub> never includes leading zeroes.</dd>\n          </dl>\n          <emu-alg>\n            1. If _x_ &lt; *0*<sub>ℤ</sub>, return the string-concatenation of *\"-\"* and BigInt::toString(-_x_, _radix_).\n            1. Return the String value consisting of the representation of _x_ using radix _radix_.\n          </emu-alg>\n        </emu-clause>\n      </emu-clause>\n    </emu-clause>\n\n    <emu-clause id=\"sec-object-type\">\n      <h1>The Object Type</h1>\n      <p>Each instance of the <dfn variants=\"is an Object,is not an Object\">Object type</dfn>, also referred to simply as “an Object”, represents a collection of properties. Each property is either a data property, or an accessor property:</p>\n      <ul>\n        <li>\n          A <dfn variants=\"data properties\">data property</dfn> associates a key value with an ECMAScript language value and a set of Boolean attributes.\n        </li>\n        <li>\n          An <dfn variants=\"accessor properties\">accessor property</dfn> associates a key value with one or two accessor functions, and a set of Boolean attributes. The accessor functions are used to store or retrieve an ECMAScript language value that is associated with the property.\n        </li>\n      </ul>\n      <p>The properties of an object are uniquely identified using property keys. A <dfn id=\"property-key\" variants=\"property keys\" oldids=\"sec-ispropertykey\">property key</dfn> is either a String or a Symbol. All Strings and Symbols, including the empty String, are valid as property keys. A <dfn id=\"property-name\">property name</dfn> is a property key that is a String.</p>\n      <p>An <dfn id=\"integer-index\" variants=\"integer indices,integer-indexed\">integer index</dfn> is a property name _n_ such that CanonicalNumericIndexString(_n_) returns an integral Number in the inclusive interval from *+0*<sub>𝔽</sub> to 𝔽(2<sup>53</sup> - 1). An <dfn id=\"array-index\" variants=\"array indices\">array index</dfn> is an integer index _n_ such that CanonicalNumericIndexString(_n_) returns an integral Number in the inclusive interval from *+0*<sub>𝔽</sub> to 𝔽(2<sup>32</sup> - 2).</p>\n      <emu-note>\n        <p>Every non-negative safe integer has a corresponding integer index. Every 32-bit unsigned integer except <emu-eqn>2<sup>32</sup> - 1</emu-eqn> has a corresponding array index. *\"-0\"* is neither an integer index nor an array index.</p>\n      </emu-note>\n      <p>Property keys are used to access properties and their values. There are two kinds of access for properties: <em>get</em> and <em>set</em>, corresponding to value retrieval and assignment, respectively. The properties accessible via get and set access includes both <em>own properties</em> that are a direct part of an object and <em>inherited properties</em> which are provided by another associated object via a property inheritance relationship. Inherited properties may be either own or inherited properties of the associated object. Each own property of an object must each have a key value that is distinct from the key values of the other own properties of that object.</p>\n      <p>All objects are logically collections of properties, but there are multiple forms of objects that differ in their semantics for accessing and manipulating their properties. Please see <emu-xref href=\"#sec-object-internal-methods-and-internal-slots\"></emu-xref> for definitions of the multiple forms of objects.</p>\n      <p>In addition, some objects are callable; these are referred to as functions or function objects and are described further below. All functions in ECMAScript are members of the Object type.</p>\n\n      <emu-clause id=\"sec-property-attributes\">\n        <h1>Property Attributes</h1>\n        <p>Attributes are used in this specification to define and explain the state of Object properties as described in <emu-xref href=\"#table-object-property-attributes\"></emu-xref>. Unless specified explicitly, the initial value of each attribute is its Default Value.</p>\n        <emu-table id=\"table-object-property-attributes\" caption=\"Attributes of an Object property\" oldids=\"table-2,table-3,table-4,table-data-property-attributes,table-accessor-property-attributes,table-default-attribute-values\">\n          <table>\n            <thead>\n              <tr>\n                <th>Attribute Name</th>\n                <th>Types of property for which it is present</th>\n                <th>Value Domain</th>\n                <th>Default Value</th>\n                <th>Description</th>\n              </tr>\n            </thead>\n            <tr>\n              <td>\n                [[Value]]\n              </td>\n              <td>\n                data property\n              </td>\n              <td>\n                an ECMAScript language value\n              </td>\n              <td>\n                *undefined*\n              </td>\n              <td>\n                The value retrieved by a get access of the property.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Writable]]\n              </td>\n              <td>\n                data property\n              </td>\n              <td>\n                a Boolean\n              </td>\n              <td>\n                *false*\n              </td>\n              <td>\n                If *false*, attempts by ECMAScript code to change the property's [[Value]] attribute using [[Set]] will not succeed.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Get]]\n              </td>\n              <td>\n                accessor property\n              </td>\n              <td>\n                an Object or *undefined*\n              </td>\n              <td>\n                *undefined*\n              </td>\n              <td>\n                If the value is an Object it must be a function object. The function's [[Call]] internal method (<emu-xref href=\"#table-additional-essential-internal-methods-of-function-objects\"></emu-xref>) is called with an empty arguments list to retrieve the property value each time a get access of the property is performed.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Set]]\n              </td>\n              <td>\n                accessor property\n              </td>\n              <td>\n                an Object or *undefined*\n              </td>\n              <td>\n                *undefined*\n              </td>\n              <td>\n                If the value is an Object it must be a function object. The function's [[Call]] internal method (<emu-xref href=\"#table-additional-essential-internal-methods-of-function-objects\"></emu-xref>) is called with an arguments list containing the assigned value as its sole argument each time a set access of the property is performed. The effect of a property's [[Set]] internal method may, but is not required to, have an effect on the value returned by subsequent calls to the property's [[Get]] internal method.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Enumerable]]\n              </td>\n              <td>\n                data property or accessor property\n              </td>\n              <td>\n                a Boolean\n              </td>\n              <td>\n                *false*\n              </td>\n              <td>\n                If *true*, the property will be enumerated by a for-in enumeration (see <emu-xref href=\"#sec-for-in-and-for-of-statements\"></emu-xref>). Otherwise, the property is said to be non-enumerable.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Configurable]]\n              </td>\n              <td>\n                data property or accessor property\n              </td>\n              <td>\n                a Boolean\n              </td>\n              <td>\n                *false*\n              </td>\n              <td>\n                If *false*, attempts to delete the property, change it from a data property to an accessor property or from an accessor property to a data property, or make any changes to its attributes (other than replacing an existing [[Value]] or setting [[Writable]] to *false*) will fail.\n              </td>\n            </tr>\n          </table>\n        </emu-table>\n      </emu-clause>\n\n      <emu-clause id=\"sec-object-internal-methods-and-internal-slots\">\n        <h1>Object Internal Methods and Internal Slots</h1>\n        <p>The actual semantics of objects, in ECMAScript, are specified via algorithms called <em>internal methods</em>. Each object in an ECMAScript engine is associated with a set of internal methods that defines its runtime behaviour. These internal methods are not part of the ECMAScript language. They are defined by this specification purely for expository purposes. However, each object within an implementation of ECMAScript must behave as specified by the internal methods associated with it. The exact manner in which this is accomplished is determined by the implementation.</p>\n        <p>Internal method names are polymorphic. This means that different object values may perform different algorithms when a common internal method name is invoked upon them. That actual object upon which an internal method is invoked is the “target” of the invocation. If, at runtime, the implementation of an algorithm attempts to use an internal method of an object that the object does not support, a *TypeError* exception is thrown.</p>\n        <p>Internal slots correspond to internal state that is associated with objects and used by various ECMAScript specification algorithms. Internal slots are not object properties and they are not inherited. Depending upon the specific internal slot specification, such state may consist of values of any ECMAScript language type or of specific ECMAScript specification type values. Unless explicitly specified otherwise, internal slots are allocated as part of the process of creating an object and may not be dynamically added to an object. Unless specified otherwise, the initial value of an internal slot is the value *undefined*. Various algorithms within this specification create objects that have internal slots. However, the ECMAScript language provides no direct way to associate internal slots with an object.</p>\n        <p>All objects have an internal slot named [[PrivateElements]], which is a List of PrivateElements. This List represents the values of the private fields, methods, and accessors for the object. Initially, it is an empty List.</p>\n        <p>Internal methods and internal slots are identified within this specification using names enclosed in double square brackets [[ ]].</p>\n        <p><emu-xref href=\"#table-essential-internal-methods\"></emu-xref> summarizes the <em>essential internal methods</em> used by this specification that are applicable to all objects created or manipulated by ECMAScript code. Every object must have algorithms for all of the essential internal methods. However, all objects do not necessarily use the same algorithms for those methods.</p>\n        <p>An <dfn id=\"ordinary-object\" variants=\"ordinary objects\">ordinary object</dfn> is an object that satisfies all of the following criteria:</p>\n        <ul>\n          <li>\n            For the internal methods listed in <emu-xref href=\"#table-essential-internal-methods\"></emu-xref>, the object uses those defined in <emu-xref href=\"#sec-ordinary-object-internal-methods-and-internal-slots\"></emu-xref>.\n          </li>\n          <li>\n            If the object has a [[Call]] internal method, it uses either the one defined in <emu-xref href=\"#sec-ecmascript-function-objects-call-thisargument-argumentslist\"></emu-xref> or the one defined in <emu-xref href=\"#sec-built-in-function-objects-call-thisargument-argumentslist\"></emu-xref>.\n          </li>\n          <li>\n            If the object has a [[Construct]] internal method, it uses either the one defined in <emu-xref href=\"#sec-ecmascript-function-objects-construct-argumentslist-newtarget\"></emu-xref> or the one defined in <emu-xref href=\"#sec-built-in-function-objects-construct-argumentslist-newtarget\"></emu-xref>.\n          </li>\n        </ul>\n        <p>An <dfn id=\"exotic-object\" variants=\"exotic objects\">exotic object</dfn> is an object that is not an ordinary object.</p>\n        <p>This specification recognizes different kinds of exotic objects by those objects' internal methods. An object that is behaviourally equivalent to a particular kind of exotic object (such as an Array exotic object or a bound function exotic object), but does not have the same collection of internal methods specified for that kind, is not recognized as that kind of exotic object.</p>\n        <p>The “Signature” column of <emu-xref href=\"#table-essential-internal-methods\"></emu-xref> and other similar tables describes the invocation pattern for each internal method. The invocation pattern always includes a parenthesized list of descriptive parameter names. If a parameter name is the same as an ECMAScript type name then the name describes the required type of the parameter value. If an internal method explicitly returns a value, its parameter list is followed by the symbol “→” and the type name of the returned value. The type names used in signatures refer to the types defined in clause <emu-xref href=\"#sec-ecmascript-data-types-and-values\"></emu-xref> augmented by the following additional names. “<em>any</em>” means the value may be any ECMAScript language type.</p>\n        <p>In addition to its parameters, an internal method always has access to the object that is the target of the method invocation.</p>\n        <p>An internal method implicitly returns a Completion Record, either a normal completion that wraps a value of the return type shown in its invocation pattern, or a throw completion.</p>\n        <emu-table id=\"table-essential-internal-methods\" caption=\"Essential Internal Methods\" oldids=\"table-5\">\n          <table>\n            <thead>\n              <tr>\n                <th>\n                  Internal Method\n                </th>\n                <th>\n                  Signature\n                </th>\n                <th>\n                  Description\n                </th>\n              </tr>\n            </thead>\n            <tr>\n              <td>\n                [[GetPrototypeOf]]\n              </td>\n              <td>\n                ( ) <b>→</b> Object | Null\n              </td>\n              <td>\n                Determine the object that provides inherited properties for this object. A *null* value indicates that there are no inherited properties.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[SetPrototypeOf]]\n              </td>\n              <td>\n                (Object | Null) <b>→</b> Boolean\n              </td>\n              <td>\n                Associate this object with another object that provides inherited properties. Passing *null* indicates that there are no inherited properties. Returns *true* indicating that the operation was completed successfully or *false* indicating that the operation was not successful.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[IsExtensible]]\n              </td>\n              <td>\n                ( ) <b>→</b> Boolean\n              </td>\n              <td>\n                Determine whether it is permitted to add additional properties to this object.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[PreventExtensions]]\n              </td>\n              <td>\n                ( ) <b>→</b> Boolean\n              </td>\n              <td>\n                Control whether new properties may be added to this object. Returns *true* if the operation was successful or *false* if the operation was unsuccessful.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[GetOwnProperty]]\n              </td>\n              <td>\n                (_propertyKey_) <b>→</b> Undefined | Property Descriptor\n              </td>\n              <td>\n                Return a Property Descriptor for the own property of this object whose key is _propertyKey_, or *undefined* if no such property exists.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[DefineOwnProperty]]\n              </td>\n              <td>\n                (_propertyKey_, _PropertyDescriptor_) <b>→</b> Boolean\n              </td>\n              <td>\n                Create or alter the own property, whose key is _propertyKey_, to have the state described by _PropertyDescriptor_. Return *true* if that property was successfully created/updated or *false* if the property could not be created or updated.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[HasProperty]]\n              </td>\n              <td>\n                (_propertyKey_) <b>→</b> Boolean\n              </td>\n              <td>\n                Return a Boolean value indicating whether this object already has either an own or inherited property whose key is _propertyKey_.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Get]]\n              </td>\n              <td>\n                (_propertyKey_, _Receiver_) <b>→</b> <em>any</em>\n              </td>\n              <td>\n                Return the value of the property whose key is _propertyKey_ from this object. If any ECMAScript code must be executed to retrieve the property value, _Receiver_ is used as the *this* value when evaluating the code.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Set]]\n              </td>\n              <td>\n                (_propertyKey_, _value_, _Receiver_) <b>→</b> Boolean\n              </td>\n              <td>\n                Set the value of the property whose key is _propertyKey_ to _value_. If any ECMAScript code must be executed to set the property value, _Receiver_ is used as the *this* value when evaluating the code. Returns *true* if the property value was set or *false* if it could not be set.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Delete]]\n              </td>\n              <td>\n                (_propertyKey_) <b>→</b> Boolean\n              </td>\n              <td>\n                Remove the own property whose key is _propertyKey_ from this object. Return *false* if the property was not deleted and is still present. Return *true* if the property was deleted or is not present.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[OwnPropertyKeys]]\n              </td>\n              <td>\n                ( ) <b>→</b> List of property keys\n              </td>\n              <td>\n                Return a List whose elements are all of the own property keys for the object.\n              </td>\n            </tr>\n          </table>\n        </emu-table>\n        <p><emu-xref href=\"#table-additional-essential-internal-methods-of-function-objects\"></emu-xref> summarizes additional essential internal methods that are supported by objects that may be called as functions. A <dfn id=\"function-object\" variants=\"function objects\">function object</dfn> is an object that supports the [[Call]] internal method. A <dfn id=\"constructor\" variants=\"constructors\">constructor</dfn> is an object that supports the [[Construct]] internal method. Every object that supports [[Construct]] must support [[Call]]; that is, every constructor must be a function object. Therefore, a constructor may also be referred to as a <em>constructor function</em> or <em>constructor function object</em>.</p>\n        <emu-table id=\"table-additional-essential-internal-methods-of-function-objects\" caption=\"Additional Essential Internal Methods of Function Objects\" oldids=\"table-6\">\n          <table>\n            <thead>\n              <tr>\n                <th>\n                  Internal Method\n                </th>\n                <th>\n                  Signature\n                </th>\n                <th>\n                  Description\n                </th>\n              </tr>\n            </thead>\n            <tr>\n              <td>\n                [[Call]]\n              </td>\n              <td>\n                (<em>any</em>, a List of <em>any</em>) <b>→</b> <em>any</em>\n              </td>\n              <td>\n                Executes code associated with this object. Invoked via a function call expression. The arguments to the internal method are a *this* value and a List whose elements are the arguments passed to the function by a call expression. Objects that implement this internal method are <em>callable</em>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Construct]]\n              </td>\n              <td>\n                (a List of <em>any</em>, Object) <b>→</b> Object\n              </td>\n              <td>\n                Creates an object. Invoked via the `new` operator or a `super` call. The first argument to the internal method is a List whose elements are the arguments of the constructor invocation or the `super` call. The second argument is the object to which the `new` operator was initially applied. Objects that implement this internal method are called <em>constructors</em>. A function object is not necessarily a constructor and such non-constructor function objects do not have a [[Construct]] internal method.\n              </td>\n            </tr>\n          </table>\n        </emu-table>\n        <p>The semantics of the essential internal methods for ordinary objects and standard exotic objects are specified in clause <emu-xref href=\"#sec-ordinary-and-exotic-objects-behaviours\"></emu-xref>. If any specified use of an internal method of an exotic object is not supported by an implementation, that usage must throw a *TypeError* exception when attempted.</p>\n      </emu-clause>\n\n      <emu-clause id=\"sec-invariants-of-the-essential-internal-methods\">\n        <h1>Invariants of the Essential Internal Methods</h1>\n        <p>The Internal Methods of Objects of an ECMAScript engine must conform to the list of invariants specified below. Ordinary ECMAScript Objects as well as all standard exotic objects in this specification maintain these invariants. ECMAScript Proxy objects maintain these invariants by means of runtime checks on the result of traps invoked on the [[ProxyHandler]] object.</p>\n        <p>Any implementation provided exotic objects must also maintain these invariants for those objects. Violation of these invariants may cause ECMAScript code to have unpredictable behaviour and create security issues. However, violation of these invariants must never compromise the memory safety of an implementation.</p>\n        <p>An implementation must not allow these invariants to be circumvented in any manner such as by providing alternative interfaces that implement the functionality of the essential internal methods without enforcing their invariants.</p>\n        <h2>Definitions:</h2>\n        <ul>\n          <li>\n            The <em>target</em> of an internal method is the object upon which the internal method is called.\n          </li>\n          <li>\n            A target is <em>non-extensible</em> if it has been observed to return *false* from its [[IsExtensible]] internal method, or *true* from its [[PreventExtensions]] internal method.\n          </li>\n          <li>\n            A <em>non-existent</em> property is a property that does not exist as an own property on a non-extensible target.\n          </li>\n          <li>\n            All references to <em>SameValue</em> are according to the definition of the SameValue algorithm.\n          </li>\n        </ul>\n        <h2>Return value:</h2>\n        <p>The value returned by any internal method must be a Completion Record with either:</p>\n        <ul>\n          <li>[[Type]] = ~normal~, [[Target]] = ~empty~, and [[Value]] = a value of the \"normal return type\" shown below for that internal method, or</li>\n          <li>[[Type]] = ~throw~, [[Target]] = ~empty~, and [[Value]] = any ECMAScript language value.</li>\n        </ul>\n        <emu-note>\n          <p>An internal method must not return a continue completion, a break completion, or a return completion.</p>\n        </emu-note>\n        <h2>[[GetPrototypeOf]] ( )</h2>\n        <ul>\n          <li>\n            The normal return type is either Object or Null.\n          </li>\n          <li>\n            If target is non-extensible, and [[GetPrototypeOf]] returns a value _V_, then any future calls to [[GetPrototypeOf]] should return the SameValue as _V_.\n          </li>\n        </ul>\n        <emu-note>\n          <p>An object's prototype chain should have finite length (that is, starting from any object, recursively applying the [[GetPrototypeOf]] internal method to its result should eventually lead to the value *null*). However, this requirement is not enforceable as an object level invariant if the prototype chain includes any exotic objects that do not use the ordinary object definition of [[GetPrototypeOf]]. Such a circular prototype chain may result in infinite loops when accessing object properties.</p>\n        </emu-note>\n        <h2>[[SetPrototypeOf]] ( _V_ )</h2>\n        <ul>\n          <li>\n            The normal return type is Boolean.\n          </li>\n          <li>\n            If target is non-extensible, [[SetPrototypeOf]] must return *false*, unless _V_ is the SameValue as the target's observed [[GetPrototypeOf]] value.\n          </li>\n        </ul>\n        <h2>[[IsExtensible]] ( )</h2>\n        <ul>\n          <li>\n            The normal return type is Boolean.\n          </li>\n          <li>\n            If [[IsExtensible]] returns *false*, all future calls to [[IsExtensible]] on the target must return *false*.\n          </li>\n        </ul>\n        <h2>[[PreventExtensions]] ( )</h2>\n        <ul>\n          <li>\n            The normal return type is Boolean.\n          </li>\n          <li>\n            If [[PreventExtensions]] returns *true*, all future calls to [[IsExtensible]] on the target must return *false* and the target is now considered non-extensible.\n          </li>\n        </ul>\n        <h2>[[GetOwnProperty]] ( _P_ )</h2>\n        <ul>\n          <li>\n            The normal return type is either Property Descriptor or Undefined.\n          </li>\n          <li>\n            If the return value is a Property Descriptor, it must be a fully populated Property Descriptor.\n          </li>\n          <li>\n            If _P_ is described as a non-configurable, non-writable own data property, all future calls to [[GetOwnProperty]] ( _P_ ) must return Property Descriptor whose [[Value]] is SameValue as _P_'s [[Value]] attribute.\n          </li>\n          <li>\n            If _P_'s attributes other than [[Writable]] and [[Value]] may change over time, or if the property might be deleted, then _P_'s [[Configurable]] attribute must be *true*.\n          </li>\n          <li>\n            If the [[Writable]] attribute may change from *false* to *true*, then the [[Configurable]] attribute must be *true*.\n          </li>\n          <li>\n            If the target is non-extensible and _P_ is non-existent, then all future calls to [[GetOwnProperty]] (_P_) on the target must describe _P_ as non-existent (i.e. [[GetOwnProperty]] (_P_) must return *undefined*).\n          </li>\n        </ul>\n        <emu-note>\n          <p>As a consequence of the third invariant, if a property is described as a data property and it may return different values over time, then either or both of the [[Writable]] and [[Configurable]] attributes must be *true* even if no mechanism to change the value is exposed via the other essential internal methods.</p>\n        </emu-note>\n        <h2>[[DefineOwnProperty]] ( _P_, _Desc_ )</h2>\n        <ul>\n          <li>\n            The normal return type is Boolean.\n          </li>\n          <li>\n            [[DefineOwnProperty]] must return *false* if _P_ has previously been observed as a non-configurable own property of the target, unless either:\n            <ol>\n              <li>\n                _P_ is a writable data property. A non-configurable writable data property can be changed into a non-configurable non-writable data property.\n              </li>\n              <li>\n                All attributes of _Desc_ are the SameValue as _P_'s attributes.\n              </li>\n            </ol>\n          </li>\n          <li>\n            [[DefineOwnProperty]] (_P_, _Desc_) must return *false* if target is non-extensible and _P_ is a non-existent own property. That is, a non-extensible target object cannot be extended with new properties.\n          </li>\n        </ul>\n        <h2>[[HasProperty]] ( _P_ )</h2>\n        <ul>\n          <li>\n            The normal return type is Boolean.\n          </li>\n          <li>\n            If _P_ was previously observed as a non-configurable own data or accessor property of the target, [[HasProperty]] must return *true*.\n          </li>\n        </ul>\n        <h2>[[Get]] ( _P_, _Receiver_ )</h2>\n        <ul>\n          <li>\n            The normal return type is any ECMAScript language type.\n          </li>\n          <li>\n            If _P_ was previously observed as a non-configurable, non-writable own data property of the target with value _V_, then [[Get]] must return the SameValue as _V_.\n          </li>\n          <li>\n            If _P_ was previously observed as a non-configurable own accessor property of the target whose [[Get]] attribute is *undefined*, the [[Get]] operation must return *undefined*.\n          </li>\n        </ul>\n        <h2>[[Set]] ( _P_, _V_, _Receiver_ )</h2>\n        <ul>\n          <li>\n            The normal return type is Boolean.\n          </li>\n          <li>\n            If _P_ was previously observed as a non-configurable, non-writable own data property of the target, then [[Set]] must return *false* unless _V_ is the SameValue as _P_'s [[Value]] attribute.\n          </li>\n          <li>\n            If _P_ was previously observed as a non-configurable own accessor property of the target whose [[Set]] attribute is *undefined*, the [[Set]] operation must return *false*.\n          </li>\n        </ul>\n        <h2>[[Delete]] ( _P_ )</h2>\n        <ul>\n          <li>\n            The normal return type is Boolean.\n          </li>\n          <li>\n            If _P_ was previously observed as a non-configurable own data or accessor property of the target, [[Delete]] must return *false*.\n          </li>\n        </ul>\n        <h2>[[OwnPropertyKeys]] ( )</h2>\n        <ul>\n          <li>\n            The normal return type is List.\n          </li>\n          <li>\n            The returned List must not contain any duplicate entries.\n          </li>\n          <li>\n            Each element of the returned List must be a property key.\n          </li>\n          <li>\n            The returned List must contain at least the keys of all non-configurable own properties that have previously been observed.\n          </li>\n          <li>\n            If the target is non-extensible, the returned List must contain only the keys of all own properties of the target that are observable using [[GetOwnProperty]].\n          </li>\n        </ul>\n        <h2>[[Call]] ( )</h2>\n        <ul>\n          <li>\n            The normal return type is any ECMAScript language type.\n          </li>\n        </ul>\n        <h2>[[Construct]] ( )</h2>\n        <ul>\n          <li>\n            The normal return type is Object.\n          </li>\n          <li>\n            The target must also have a [[Call]] internal method.\n          </li>\n        </ul>\n      </emu-clause>\n\n      <emu-clause id=\"sec-well-known-intrinsic-objects\">\n        <h1>Well-Known Intrinsic Objects</h1>\n        <p>Well-known intrinsics are built-in objects that are explicitly referenced by the algorithms of this specification and which usually have realm-specific identities. Unless otherwise specified each intrinsic object actually corresponds to a set of similar objects, one per realm.</p>\n        <p>Within this specification a reference such as %name% means the intrinsic object, associated with the current realm, corresponding to the name. A reference such as %name.a.b% means, as if the *\"b\"* property of the value of the *\"a\"* property of the intrinsic object %name% was accessed prior to any ECMAScript code being evaluated. Determination of the current realm and its intrinsics is described in <emu-xref href=\"#sec-execution-contexts\"></emu-xref>. The well-known intrinsics are listed in <emu-xref href=\"#table-well-known-intrinsic-objects\"></emu-xref>.</p>\n        <emu-table id=\"table-well-known-intrinsic-objects\" caption=\"Well-Known Intrinsic Objects\" oldids=\"table-7\">\n          <table>\n            <thead>\n              <tr>\n                <th>\n                  Intrinsic Name\n                </th>\n                <th>\n                  Global Name\n                </th>\n                <th>\n                  ECMAScript Language Association\n                </th>\n              </tr>\n            </thead>\n            <tr>\n              <td>\n                %AggregateError%\n              </td>\n              <td>\n                `AggregateError`\n              </td>\n              <td>\n                The `AggregateError` constructor (<emu-xref href=\"#sec-aggregate-error-constructor\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %Array%\n              </td>\n              <td>\n                `Array`\n              </td>\n              <td>\n                The Array constructor (<emu-xref href=\"#sec-array-constructor\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %ArrayBuffer%\n              </td>\n              <td>\n                `ArrayBuffer`\n              </td>\n              <td>\n                The ArrayBuffer constructor (<emu-xref href=\"#sec-arraybuffer-constructor\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %ArrayIteratorPrototype%\n              </td>\n              <td>\n              </td>\n              <td>\n                The prototype of Array Iterator objects (<emu-xref href=\"#sec-array-iterator-objects\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %AsyncFromSyncIteratorPrototype%\n              </td>\n              <td>\n              </td>\n              <td>\n                The prototype of async-from-sync iterator objects (<emu-xref href=\"#sec-async-from-sync-iterator-objects\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %AsyncFunction%\n              </td>\n              <td>\n              </td>\n              <td>\n                The constructor of async function objects (<emu-xref href=\"#sec-async-function-constructor\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %AsyncGeneratorFunction%\n              </td>\n              <td>\n              </td>\n              <td>\n                The constructor of async generator function objects (<emu-xref href=\"#sec-asyncgeneratorfunction-constructor\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %AsyncGeneratorPrototype%\n              </td>\n              <td>\n              </td>\n              <td>\n                The prototype of async generator objects (<emu-xref href=\"#sec-asyncgenerator-objects\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %AsyncIteratorPrototype%\n              </td>\n              <td>\n              </td>\n              <td>\n                An object that all standard built-in async iterator objects indirectly inherit from\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %Atomics%\n              </td>\n              <td>\n                `Atomics`\n              </td>\n              <td>\n                The `Atomics` object (<emu-xref href=\"#sec-atomics-object\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %BigInt%\n              </td>\n              <td>\n                `BigInt`\n              </td>\n              <td>\n                The BigInt constructor (<emu-xref href=\"#sec-bigint-constructor\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %BigInt64Array%\n              </td>\n              <td>\n                `BigInt64Array`\n              </td>\n              <td>\n                The BigInt64Array constructor (<emu-xref href=\"#sec-typedarray-objects\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %BigUint64Array%\n              </td>\n              <td>\n                `BigUint64Array`\n              </td>\n              <td>\n                The BigUint64Array constructor (<emu-xref href=\"#sec-typedarray-objects\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %Boolean%\n              </td>\n              <td>\n                `Boolean`\n              </td>\n              <td>\n                The Boolean constructor (<emu-xref href=\"#sec-boolean-constructor\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %DataView%\n              </td>\n              <td>\n                `DataView`\n              </td>\n              <td>\n                The DataView constructor (<emu-xref href=\"#sec-dataview-constructor\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %Date%\n              </td>\n              <td>\n                `Date`\n              </td>\n              <td>\n                The Date constructor (<emu-xref href=\"#sec-date-constructor\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %decodeURI%\n              </td>\n              <td>\n                `decodeURI`\n              </td>\n              <td>\n                The `decodeURI` function (<emu-xref href=\"#sec-decodeuri-encodeduri\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %decodeURIComponent%\n              </td>\n              <td>\n                `decodeURIComponent`\n              </td>\n              <td>\n                The `decodeURIComponent` function (<emu-xref href=\"#sec-decodeuricomponent-encodeduricomponent\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %encodeURI%\n              </td>\n              <td>\n                `encodeURI`\n              </td>\n              <td>\n                The `encodeURI` function (<emu-xref href=\"#sec-encodeuri-uri\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %encodeURIComponent%\n              </td>\n              <td>\n                `encodeURIComponent`\n              </td>\n              <td>\n                The `encodeURIComponent` function (<emu-xref href=\"#sec-encodeuricomponent-uricomponent\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %Error%\n              </td>\n              <td>\n                `Error`\n              </td>\n              <td>\n                The Error constructor (<emu-xref href=\"#sec-error-constructor\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %eval%\n              </td>\n              <td>\n                `eval`\n              </td>\n              <td>\n                The `eval` function (<emu-xref href=\"#sec-eval-x\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %EvalError%\n              </td>\n              <td>\n                `EvalError`\n              </td>\n              <td>\n                The EvalError constructor (<emu-xref href=\"#sec-native-error-types-used-in-this-standard-evalerror\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %FinalizationRegistry%\n              </td>\n              <td>\n                `FinalizationRegistry`\n              </td>\n              <td>\n                The FinalizationRegistry constructor (<emu-xref href=\"#sec-finalization-registry-constructor\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %Float32Array%\n              </td>\n              <td>\n                `Float32Array`\n              </td>\n              <td>\n                The Float32Array constructor (<emu-xref href=\"#sec-typedarray-objects\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %Float64Array%\n              </td>\n              <td>\n                `Float64Array`\n              </td>\n              <td>\n                The Float64Array constructor (<emu-xref href=\"#sec-typedarray-objects\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %ForInIteratorPrototype%\n              </td>\n              <td>\n              </td>\n              <td>\n                The prototype of For-In iterator objects (<emu-xref href=\"#sec-for-in-iterator-objects\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %Function%\n              </td>\n              <td>\n                `Function`\n              </td>\n              <td>\n                The Function constructor (<emu-xref href=\"#sec-function-constructor\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %GeneratorFunction%\n              </td>\n              <td>\n              </td>\n              <td>\n                The constructor of generator function objects (<emu-xref href=\"#sec-generatorfunction-constructor\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %GeneratorPrototype%\n              </td>\n              <td>\n              </td>\n              <td>\n                The prototype of generator objects (<emu-xref href=\"#sec-generator-objects\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %Int8Array%\n              </td>\n              <td>\n                `Int8Array`\n              </td>\n              <td>\n                The Int8Array constructor (<emu-xref href=\"#sec-typedarray-objects\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %Int16Array%\n              </td>\n              <td>\n                `Int16Array`\n              </td>\n              <td>\n                The Int16Array constructor (<emu-xref href=\"#sec-typedarray-objects\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %Int32Array%\n              </td>\n              <td>\n                `Int32Array`\n              </td>\n              <td>\n                The Int32Array constructor (<emu-xref href=\"#sec-typedarray-objects\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %isFinite%\n              </td>\n              <td>\n                `isFinite`\n              </td>\n              <td>\n                The `isFinite` function (<emu-xref href=\"#sec-isfinite-number\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %isNaN%\n              </td>\n              <td>\n                `isNaN`\n              </td>\n              <td>\n                The `isNaN` function (<emu-xref href=\"#sec-isnan-number\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %Iterator%\n              </td>\n              <td>\n                `Iterator`\n              </td>\n              <td>\n                The `Iterator` constructor (<emu-xref href=\"#sec-iterator-constructor\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %IteratorHelperPrototype%\n              </td>\n              <td>\n              </td>\n              <td>\n                The prototype of Iterator Helper objects (<emu-xref href=\"#sec-%iteratorhelperprototype%-object\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %JSON%\n              </td>\n              <td>\n                `JSON`\n              </td>\n              <td>\n                The `JSON` object (<emu-xref href=\"#sec-json-object\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %Map%\n              </td>\n              <td>\n                `Map`\n              </td>\n              <td>\n                The Map constructor (<emu-xref href=\"#sec-map-constructor\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %MapIteratorPrototype%\n              </td>\n              <td>\n              </td>\n              <td>\n                The prototype of Map Iterator objects (<emu-xref href=\"#sec-map-iterator-objects\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %Math%\n              </td>\n              <td>\n                `Math`\n              </td>\n              <td>\n                The `Math` object (<emu-xref href=\"#sec-math-object\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %Number%\n              </td>\n              <td>\n                `Number`\n              </td>\n              <td>\n                The Number constructor (<emu-xref href=\"#sec-number-constructor\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %Object%\n              </td>\n              <td>\n                `Object`\n              </td>\n              <td>\n                The Object constructor (<emu-xref href=\"#sec-object-constructor\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %parseFloat%\n              </td>\n              <td>\n                `parseFloat`\n              </td>\n              <td>\n                The `parseFloat` function (<emu-xref href=\"#sec-parsefloat-string\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %parseInt%\n              </td>\n              <td>\n                `parseInt`\n              </td>\n              <td>\n                The `parseInt` function (<emu-xref href=\"#sec-parseint-string-radix\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %Promise%\n              </td>\n              <td>\n                `Promise`\n              </td>\n              <td>\n                The Promise constructor (<emu-xref href=\"#sec-promise-constructor\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %Proxy%\n              </td>\n              <td>\n                `Proxy`\n              </td>\n              <td>\n                The Proxy constructor (<emu-xref href=\"#sec-proxy-constructor\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %RangeError%\n              </td>\n              <td>\n                `RangeError`\n              </td>\n              <td>\n                The RangeError constructor (<emu-xref href=\"#sec-native-error-types-used-in-this-standard-rangeerror\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %ReferenceError%\n              </td>\n              <td>\n                `ReferenceError`\n              </td>\n              <td>\n                The ReferenceError constructor (<emu-xref href=\"#sec-native-error-types-used-in-this-standard-referenceerror\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %Reflect%\n              </td>\n              <td>\n                `Reflect`\n              </td>\n              <td>\n                The `Reflect` object (<emu-xref href=\"#sec-reflect-object\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %RegExp%\n              </td>\n              <td>\n                `RegExp`\n              </td>\n              <td>\n                The RegExp constructor (<emu-xref href=\"#sec-regexp-constructor\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %RegExpStringIteratorPrototype%\n              </td>\n              <td>\n              </td>\n              <td>\n                The prototype of RegExp String Iterator objects (<emu-xref href=\"#sec-regexp-string-iterator-objects\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %Set%\n              </td>\n              <td>\n                `Set`\n              </td>\n              <td>\n                The Set constructor (<emu-xref href=\"#sec-set-constructor\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %SetIteratorPrototype%\n              </td>\n              <td>\n              </td>\n              <td>\n                The prototype of Set Iterator objects (<emu-xref href=\"#sec-set-iterator-objects\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %SharedArrayBuffer%\n              </td>\n              <td>\n                `SharedArrayBuffer`\n              </td>\n              <td>\n                The SharedArrayBuffer constructor (<emu-xref href=\"#sec-sharedarraybuffer-constructor\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %String%\n              </td>\n              <td>\n                `String`\n              </td>\n              <td>\n                The String constructor (<emu-xref href=\"#sec-string-constructor\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %StringIteratorPrototype%\n              </td>\n              <td>\n              </td>\n              <td>\n                The prototype of String Iterator objects (<emu-xref href=\"#sec-string-iterator-objects\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %Symbol%\n              </td>\n              <td>\n                `Symbol`\n              </td>\n              <td>\n                The Symbol constructor (<emu-xref href=\"#sec-symbol-constructor\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %SyntaxError%\n              </td>\n              <td>\n                `SyntaxError`\n              </td>\n              <td>\n                The SyntaxError constructor (<emu-xref href=\"#sec-native-error-types-used-in-this-standard-syntaxerror\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %ThrowTypeError%\n              </td>\n              <td>\n              </td>\n              <td>\n                A function object that unconditionally throws a new instance of %TypeError%\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %TypedArray%\n              </td>\n              <td>\n              </td>\n              <td>\n                The super class of all typed Array constructors (<emu-xref href=\"#sec-%typedarray%-intrinsic-object\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %TypeError%\n              </td>\n              <td>\n                `TypeError`\n              </td>\n              <td>\n                The TypeError constructor (<emu-xref href=\"#sec-native-error-types-used-in-this-standard-typeerror\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %Uint8Array%\n              </td>\n              <td>\n                `Uint8Array`\n              </td>\n              <td>\n                The Uint8Array constructor (<emu-xref href=\"#sec-typedarray-objects\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %Uint8ClampedArray%\n              </td>\n              <td>\n                `Uint8ClampedArray`\n              </td>\n              <td>\n                The Uint8ClampedArray constructor (<emu-xref href=\"#sec-typedarray-objects\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %Uint16Array%\n              </td>\n              <td>\n                `Uint16Array`\n              </td>\n              <td>\n                The Uint16Array constructor (<emu-xref href=\"#sec-typedarray-objects\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %Uint32Array%\n              </td>\n              <td>\n                `Uint32Array`\n              </td>\n              <td>\n                The Uint32Array constructor (<emu-xref href=\"#sec-typedarray-objects\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %URIError%\n              </td>\n              <td>\n                `URIError`\n              </td>\n              <td>\n                The URIError constructor (<emu-xref href=\"#sec-native-error-types-used-in-this-standard-urierror\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %WeakMap%\n              </td>\n              <td>\n                `WeakMap`\n              </td>\n              <td>\n                The WeakMap constructor (<emu-xref href=\"#sec-weakmap-constructor\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %WeakRef%\n              </td>\n              <td>\n                `WeakRef`\n              </td>\n              <td>\n                The WeakRef constructor (<emu-xref href=\"#sec-weak-ref-constructor\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %WeakSet%\n              </td>\n              <td>\n                `WeakSet`\n              </td>\n              <td>\n                The WeakSet constructor (<emu-xref href=\"#sec-weakset-constructor\"></emu-xref>)\n              </td>\n            </tr>\n            <tr>\n              <td>\n                %WrapForValidIteratorPrototype%\n              </td>\n              <td>\n              </td>\n              <td>\n                The prototype of wrapped iterator objects returned by Iterator.from (<emu-xref href=\"#sec-%wrapforvaliditeratorprototype%-object\"></emu-xref>)\n              </td>\n            </tr>\n          </table>\n        </emu-table>\n        <emu-note>\n          <p>Additional entries in <emu-xref href=\"#table-additional-well-known-intrinsic-objects\"></emu-xref>.</p>\n        </emu-note>\n      </emu-clause>\n    </emu-clause>\n  </emu-clause>\n\n  <emu-clause id=\"sec-ecmascript-specification-types\">\n    <h1>ECMAScript Specification Types</h1>\n    <p>A specification type corresponds to meta-values that are used within algorithms to describe the semantics of ECMAScript language constructs and ECMAScript language types. The specification types include Reference Record, List, Completion Record, Property Descriptor, Environment Record, Abstract Closure, and Data Block. Specification type values are specification artefacts that do not necessarily correspond to any specific entity within an ECMAScript implementation. Specification type values may be used to describe intermediate results of ECMAScript expression evaluation but such values cannot be stored as properties of objects or values of ECMAScript language variables.</p>\n\n    <emu-clause id=\"sec-enum-specification-type\">\n      <h1>The Enum Specification Type</h1>\n      <p><dfn variants=\"enum,enums\">Enums</dfn> are values which are internal to the specification and not directly observable from ECMAScript code. Enums are denoted using a ~sans-serif~ typeface. For instance, a Completion Record's [[Type]] field takes on values like ~normal~, ~return~, or ~throw~. Enums have no characteristics other than their name. The name of an enum serves no purpose other than to distinguish it from other enums, and implies nothing about its usage or meaning in context.</p>\n    </emu-clause>\n\n    <emu-clause id=\"sec-list-and-record-specification-type\">\n      <h1>The List and Record Specification Types</h1>\n      <p>The <dfn variants=\"Lists\">List</dfn> type is used to explain the evaluation of argument lists (see <emu-xref href=\"#sec-argument-lists\"></emu-xref>) in `new` expressions, in function calls, and in other algorithms where a simple ordered list of values is needed. Values of the List type are simply ordered sequences of list elements containing the individual values. These sequences may be of any length. The elements of a list may be randomly accessed using 0-origin indices. For notational convenience an array-like syntax can be used to access List elements. For example, _arguments_[2] is shorthand for saying the 3<sup>rd</sup> element of the List _arguments_.</p>\n      <p>When an algorithm iterates over the elements of a List without specifying an order, the order used is the order of the elements in the List.</p>\n      <p>For notational convenience within this specification, a literal syntax can be used to express a new List value. For example, « 1, 2 » defines a List value that has two elements each of which is initialized to a specific value. A new empty List can be expressed as « ».</p>\n      <p>In this specification, the phrase \"the <dfn id=\"list-concatenation\">list-concatenation</dfn> of _A_, _B_, ...\" (where each argument is a possibly empty List) denotes a new List value whose elements are the concatenation of the elements (in order) of each of the arguments (in order).</p>\n      <p>As applied to a List of Strings, the phrase \"sorted according to <dfn id=\"lexicographic-code-unit-order\">lexicographic code unit order</dfn>\" means sorting by the numeric value of each code unit up to the length of the shorter string, and sorting the shorter string before the longer string if all are equal, as described in the abstract operation IsLessThan.</p>\n      <p>The <dfn variants=\"Records\">Record</dfn> type is used to describe data aggregations within the algorithms of this specification. A Record type value consists of one or more named fields. The value of each field is an ECMAScript language value or specification value. Field names are always enclosed in double brackets, for example [[Value]].</p>\n      <p>For notational convenience within this specification, an object literal-like syntax can be used to express a Record value. For example, { [[Field1]]: 42, [[Field2]]: *false*, [[Field3]]: ~empty~ } defines a Record value that has three fields, each of which is initialized to a specific value. Field name order is not significant. Any fields that are not explicitly listed are considered to be absent.</p>\n      <p>In specification text and algorithms, dot notation may be used to refer to a specific field of a Record value. For example, if R is the record shown in the previous paragraph then R.[[Field2]] is shorthand for “the field of R named [[Field2]]”.</p>\n      <p>Schema for commonly used Record field combinations may be named, and that name may be used as a prefix to a literal Record value to identify the specific kind of aggregations that is being described. For example: PropertyDescriptor { [[Value]]: 42, [[Writable]]: *false*, [[Configurable]]: *true* }.</p>\n    </emu-clause>\n\n    <emu-clause id=\"sec-set-and-relation-specification-type\">\n      <h1>The Set and Relation Specification Types</h1>\n      <p>The <em>Set</em> type is used to explain a collection of unordered elements for use in the memory model. It is distinct from the ECMAScript collection type of the same name. To disambiguate, instances of the ECMAScript collection are consistently referred to as \"Set objects\" within this specification. Values of the Set type are simple collections of elements, where no element appears more than once. Elements may be added to and removed from Sets. Sets may be unioned, intersected, or subtracted from each other.</p>\n      <p>The <dfn variants=\"Relations\">Relation</dfn> type is used to explain constraints on Sets. Values of the Relation type are Sets of ordered pairs of values from its value domain. For example, a Relation on events is a set of ordered pairs of events. For a Relation _R_ and two values _a_ and _b_ in the value domain of _R_, _a_ _R_ _b_ is shorthand for saying the ordered pair (_a_, _b_) is a member of _R_. A Relation is the <dfn id=\"least-relation\">least Relation</dfn> with respect to some conditions when it is the smallest Relation that satisfies those conditions.</p>\n      <p>A <dfn variants=\"strict partial orders\">strict partial order</dfn> is a Relation value _R_ that satisfies the following.</p>\n      <ul>\n        <li>\n          <p>For all _a_, _b_, and _c_ in _R_'s domain:</p>\n          <ul>\n            <li>It is not the case that _a_ _R_ _a_, and</li>\n            <li>If _a_ _R_ _b_ and _b_ _R_ _c_, then _a_ _R_ _c_.</li>\n          </ul>\n        </li>\n      </ul>\n      <emu-note>\n        <p>The two properties above are called irreflexivity and transitivity, respectively.</p>\n      </emu-note>\n      <p>A <dfn variants=\"strict total orders\">strict total order</dfn> is a Relation value _R_ that satisfies the following.</p>\n      <ul>\n        <li>\n          <p>For all _a_, _b_, and _c_ in _R_'s domain:</p>\n          <ul>\n            <li>_a_ is _b_ or _a_ _R_ _b_ or _b_ _R_ _a_, and</li>\n            <li>It is not the case that _a_ _R_ _a_, and</li>\n            <li>If _a_ _R_ _b_ and _b_ _R_ _c_, then _a_ _R_ _c_.</li>\n          </ul>\n        </li>\n      </ul>\n      <emu-note>\n        <p>The three properties above are called totality, irreflexivity, and transitivity, respectively.</p>\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-completion-record-specification-type\">\n      <h1>The Completion Record Specification Type</h1>\n      <p>The <dfn variants=\"Completion Records\">Completion Record</dfn> specification type is used to explain the runtime propagation of values and control flow such as the behaviour of statements (`break`, `continue`, `return` and `throw`) that perform nonlocal transfers of control.</p>\n      <p>Completion Records have the fields defined in <emu-xref href=\"#table-completion-record-fields\"></emu-xref>.</p>\n      <emu-table id=\"table-completion-record-fields\" caption=\"Completion Record Fields\" oldids=\"table-8\">\n        <table>\n          <thead>\n            <tr>\n              <th>\n                Field Name\n              </th>\n              <th>\n                Value\n              </th>\n              <th>\n                Meaning\n              </th>\n            </tr>\n          </thead>\n          <tr>\n            <td>\n              [[Type]]\n            </td>\n            <td>\n              ~normal~, ~break~, ~continue~, ~return~, or ~throw~\n            </td>\n            <td>\n              The type of completion that occurred.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[Value]]\n            </td>\n            <td>\n              any value except a Completion Record\n            </td>\n            <td>\n              The value that was produced.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[Target]]\n            </td>\n            <td>\n              a String or ~empty~\n            </td>\n            <td>\n              The target label for directed control transfers.\n            </td>\n          </tr>\n        </table>\n      </emu-table>\n      <p>The following shorthand terms are sometimes used to refer to Completion Records.</p>\n      <ul>\n        <li><dfn variants=\"normal completions\">normal completion</dfn> refers to any Completion Record with a [[Type]] value of ~normal~.</li>\n        <li><dfn variants=\"break completions\">break completion</dfn> refers to any Completion Record with a [[Type]] value of ~break~.</li>\n        <li><dfn variants=\"continue completions\">continue completion</dfn> refers to any Completion Record with a [[Type]] value of ~continue~.</li>\n        <li><dfn variants=\"return completions\">return completion</dfn> refers to any Completion Record with a [[Type]] value of ~return~.</li>\n        <li><dfn variants=\"throw completions\">throw completion</dfn> refers to any Completion Record with a [[Type]] value of ~throw~.</li>\n        <li><dfn variants=\"abrupt completions\">abrupt completion</dfn> refers to any Completion Record with a [[Type]] value other than ~normal~.</li>\n        <li>a <dfn variants=\"normal completions containing\">normal completion containing</dfn> some type of value refers to a normal completion that has a value of that type in its [[Value]] field.</li>\n      </ul>\n      <p>Callable objects that are defined in this specification only return a normal completion or a throw completion. Returning any other kind of Completion Record is considered an editorial error.</p>\n      <p>Implementation-defined callable objects must return either a normal completion or a throw completion.</p>\n\n      <emu-clause id=\"sec-normalcompletion\" type=\"abstract operation\">\n        <h1>\n          NormalCompletion (\n            _value_: any value except a Completion Record,\n          ): a normal completion\n        </h1>\n        <dl class=\"header\">\n          <dt>skip return checks</dt>\n          <dd>true</dd>\n        </dl>\n        <emu-alg>\n          1. Return Completion Record { [[Type]]: ~normal~, [[Value]]: _value_, [[Target]]: ~empty~ }.\n        </emu-alg>\n      </emu-clause>\n\n      <emu-clause id=\"sec-throwcompletion\" type=\"abstract operation\">\n        <h1>\n          ThrowCompletion (\n            _value_: an ECMAScript language value,\n          ): a throw completion\n        </h1>\n        <dl class=\"header\">\n        </dl>\n        <emu-alg>\n          1. Return Completion Record { [[Type]]: ~throw~, [[Value]]: _value_, [[Target]]: ~empty~ }.\n        </emu-alg>\n      </emu-clause>\n\n      <emu-clause id=\"sec-returncompletion\" type=\"abstract operation\">\n        <h1>\n          ReturnCompletion (\n            _value_: an ECMAScript language value,\n          ): a return completion\n        </h1>\n        <dl class=\"header\">\n        </dl>\n        <emu-alg>\n          1. Return Completion Record { [[Type]]: ~return~, [[Value]]: _value_, [[Target]]: ~empty~ }.\n        </emu-alg>\n      </emu-clause>\n\n      <emu-clause id=\"sec-updateempty\" type=\"abstract operation\">\n        <h1>\n          UpdateEmpty (\n            _completionRecord_: a Completion Record,\n            _value_: any value except a Completion Record,\n          ): a Completion Record\n        </h1>\n        <dl class=\"header\">\n        </dl>\n        <emu-alg>\n          1. Assert: If _completionRecord_ is either a return completion or a throw completion, then _completionRecord_.[[Value]] is not ~empty~.\n          1. If _completionRecord_.[[Value]] is not ~empty~, return ? _completionRecord_.\n          1. Return Completion Record { [[Type]]: _completionRecord_.[[Type]], [[Value]]: _value_, [[Target]]: _completionRecord_.[[Target]] }.\n        </emu-alg>\n      </emu-clause>\n    </emu-clause>\n\n    <emu-clause id=\"sec-reference-record-specification-type\" oldids=\"sec-reference-specification-type\">\n      <h1>The Reference Record Specification Type</h1>\n      <p>The <dfn variants=\"Reference Records\">Reference Record</dfn> type is used to explain the behaviour of such operators as `delete`, `typeof`, the assignment operators, the `super` keyword and other language features. For example, the left-hand operand of an assignment is expected to produce a Reference Record.</p>\n      <p>A Reference Record is a resolved name or (possibly not-yet-resolved) property binding; its fields are defined by <emu-xref href=\"#table-reference-record-fields\"></emu-xref>.</p>\n\n      <emu-table id=\"table-reference-record-fields\" caption=\"Reference Record Fields\">\n        <table>\n          <thead>\n            <tr>\n              <th>Field Name</th>\n              <th>Value</th>\n              <th>Meaning</th>\n            </tr>\n          </thead>\n          <tr>\n            <td oldids=\"sec-getbase,ao-getbase\">[[Base]]</td>\n            <td>an ECMAScript language value, an Environment Record, or ~unresolvable~</td>\n            <td>The value or Environment Record which holds the binding. A [[Base]] of ~unresolvable~ indicates that the binding could not be resolved.</td>\n          </tr>\n          <tr>\n            <td oldids=\"sec-getreferencedname,ao-getreferencedname\">[[ReferencedName]]</td>\n            <td>an ECMAScript language value or a Private Name</td>\n            <td>The name of the binding. Always a String if [[Base]] value is an Environment Record. Otherwise, may be an ECMAScript language value other than a String or a Symbol until ToPropertyKey is performed.</td>\n          </tr>\n          <tr>\n            <td oldids=\"sec-isstrictreference,ao-isstrictreference\">[[Strict]]</td>\n            <td>a Boolean</td>\n            <td>*true* if the Reference Record originated in strict mode code, *false* otherwise.</td>\n          </tr>\n          <tr>\n            <td>[[ThisValue]]</td>\n            <td>an ECMAScript language value or ~empty~</td>\n            <td>If not ~empty~, the Reference Record represents a property binding that was expressed using the `super` keyword; it is called a <dfn id=\"super-reference-record\" oldids=\"super-reference\" variants=\"Super Reference Records\">Super Reference Record</dfn> and its [[Base]] value will never be an Environment Record. In that case, the [[ThisValue]] field holds the *this* value at the time the Reference Record was created.</td>\n          </tr>\n        </table>\n      </emu-table>\n\n      <p>The following abstract operations are used in this specification to operate upon Reference Records:</p>\n\n      <emu-clause id=\"sec-ispropertyreference\" type=\"abstract operation\" oldids=\"ao-ispropertyreference\">\n        <h1>\n          IsPropertyReference (\n            _V_: a Reference Record,\n          ): a Boolean\n        </h1>\n        <dl class=\"header\">\n        </dl>\n        <emu-alg>\n          1. If _V_.[[Base]] is ~unresolvable~, return *false*.\n          1. If _V_.[[Base]] is an Environment Record, return *false*; otherwise return *true*.\n        </emu-alg>\n      </emu-clause>\n\n      <emu-clause id=\"sec-isunresolvablereference\" type=\"abstract operation\" oldids=\"ao-isunresolvablereference\">\n        <h1>\n          IsUnresolvableReference (\n            _V_: a Reference Record,\n          ): a Boolean\n        </h1>\n        <dl class=\"header\">\n        </dl>\n        <emu-alg>\n          1. If _V_.[[Base]] is ~unresolvable~, return *true*; otherwise return *false*.\n        </emu-alg>\n      </emu-clause>\n\n      <emu-clause id=\"sec-issuperreference\" type=\"abstract operation\" oldids=\"ao-issuperreference\">\n        <h1>\n          IsSuperReference (\n            _V_: a Reference Record,\n          ): a Boolean\n        </h1>\n        <dl class=\"header\">\n        </dl>\n        <emu-alg>\n          1. If _V_.[[ThisValue]] is not ~empty~, return *true*; otherwise return *false*.\n        </emu-alg>\n      </emu-clause>\n\n      <emu-clause id=\"sec-isprivatereference\" type=\"abstract operation\">\n        <h1>\n          IsPrivateReference (\n            _V_: a Reference Record,\n          ): a Boolean\n        </h1>\n        <dl class=\"header\">\n        </dl>\n        <emu-alg>\n          1. If _V_.[[ReferencedName]] is a Private Name, return *true*; otherwise return *false*.\n        </emu-alg>\n      </emu-clause>\n\n      <emu-clause id=\"sec-getvalue\" type=\"abstract operation\">\n        <h1>\n          GetValue (\n            _V_: a Reference Record or an ECMAScript language value,\n          ): either a normal completion containing an ECMAScript language value or an abrupt completion\n        </h1>\n        <dl class=\"header\">\n        </dl>\n        <emu-alg>\n          1. If _V_ is not a Reference Record, return _V_.\n          1. If IsUnresolvableReference(_V_) is *true*, throw a *ReferenceError* exception.\n          1. If IsPropertyReference(_V_) is *true*, then\n            1. [id=\"step-getvalue-toobject\"] Let _baseObj_ be ? ToObject(_V_.[[Base]]).\n            1. If IsPrivateReference(_V_) is *true*, then\n              1. Return ? PrivateGet(_baseObj_, _V_.[[ReferencedName]]).\n            1. If _V_.[[ReferencedName]] is not a property key, then\n              1. Set _V_.[[ReferencedName]] to ? ToPropertyKey(_V_.[[ReferencedName]]).\n            1. Return ? <emu-meta effects=\"user-code\">_baseObj_.[[Get]]</emu-meta>(_V_.[[ReferencedName]], GetThisValue(_V_)).\n          1. Else,\n            1. Let _base_ be _V_.[[Base]].\n            1. Assert: _base_ is an Environment Record.\n            1. Return ? <emu-meta effects=\"user-code\">_base_.GetBindingValue</emu-meta>(_V_.[[ReferencedName]], _V_.[[Strict]]) (see <emu-xref href=\"#sec-environment-records\"></emu-xref>).\n        </emu-alg>\n        <emu-note>\n          <p>The object that may be created in step <emu-xref href=\"#step-getvalue-toobject\"></emu-xref> is not accessible outside of the above abstract operation and the ordinary object [[Get]] internal method. An implementation might choose to avoid the actual creation of the object.</p>\n        </emu-note>\n      </emu-clause>\n\n      <emu-clause id=\"sec-putvalue\" type=\"abstract operation\">\n        <h1>\n          PutValue (\n            _V_: a Reference Record or an ECMAScript language value,\n            _W_: an ECMAScript language value,\n          ): either a normal completion containing ~unused~ or an abrupt completion\n        </h1>\n        <dl class=\"header\">\n        </dl>\n        <emu-alg>\n          1. If _V_ is not a Reference Record, throw a *ReferenceError* exception.\n          1. If IsUnresolvableReference(_V_) is *true*, then\n            1. If _V_.[[Strict]] is *true*, throw a *ReferenceError* exception.\n            1. Let _globalObj_ be GetGlobalObject().\n            1. Perform ? Set(_globalObj_, _V_.[[ReferencedName]], _W_, *false*).\n            1. Return ~unused~.\n          1. If IsPropertyReference(_V_) is *true*, then\n            1. [id=\"step-putvalue-toobject\"] Let _baseObj_ be ? ToObject(_V_.[[Base]]).\n            1. If IsPrivateReference(_V_) is *true*, then\n              1. Return ? PrivateSet(_baseObj_, _V_.[[ReferencedName]], _W_).\n            1. If _V_.[[ReferencedName]] is not a property key, then\n              1. Set _V_.[[ReferencedName]] to ? ToPropertyKey(_V_.[[ReferencedName]]).\n            1. Let _succeeded_ be ? <emu-meta effects=\"user-code\">_baseObj_.[[Set]]</emu-meta>(_V_.[[ReferencedName]], _W_, GetThisValue(_V_)).\n            1. If _succeeded_ is *false* and _V_.[[Strict]] is *true*, throw a *TypeError* exception.\n            1. Return ~unused~.\n          1. Else,\n            1. Let _base_ be _V_.[[Base]].\n            1. Assert: _base_ is an Environment Record.\n            1. Return ? <emu-meta effects=\"user-code\">_base_.SetMutableBinding</emu-meta>(_V_.[[ReferencedName]], _W_, _V_.[[Strict]]) (see <emu-xref href=\"#sec-environment-records\"></emu-xref>).\n        </emu-alg>\n        <emu-note>\n          <p>The object that may be created in step <emu-xref href=\"#step-putvalue-toobject\"></emu-xref> is not accessible outside of the above abstract operation and the ordinary object [[Set]] internal method. An implementation might choose to avoid the actual creation of that object.</p>\n        </emu-note>\n      </emu-clause>\n\n      <emu-clause id=\"sec-getthisvalue\" type=\"abstract operation\">\n        <h1>\n          GetThisValue (\n            _V_: a Reference Record,\n          ): an ECMAScript language value\n        </h1>\n        <dl class=\"header\">\n        </dl>\n        <emu-alg>\n          1. Assert: IsPropertyReference(_V_) is *true*.\n          1. If IsSuperReference(_V_) is *true*, return _V_.[[ThisValue]]; otherwise return _V_.[[Base]].\n        </emu-alg>\n      </emu-clause>\n\n      <emu-clause id=\"sec-initializereferencedbinding\" type=\"abstract operation\">\n        <h1>\n          InitializeReferencedBinding (\n            _V_: a Reference Record,\n            _W_: an ECMAScript language value,\n          ): either a normal completion containing ~unused~ or an abrupt completion\n        </h1>\n        <dl class=\"header\">\n        </dl>\n        <emu-alg>\n          1. Assert: IsUnresolvableReference(_V_) is *false*.\n          1. Let _base_ be _V_.[[Base]].\n          1. Assert: _base_ is an Environment Record.\n          1. Return ? _base_.InitializeBinding(_V_.[[ReferencedName]], _W_).\n        </emu-alg>\n      </emu-clause>\n\n      <emu-clause id=\"sec-makeprivatereference\" type=\"abstract operation\">\n        <h1>\n          MakePrivateReference (\n            _baseValue_: an ECMAScript language value,\n            _privateIdentifier_: a String,\n          ): a Reference Record\n        </h1>\n        <dl class=\"header\">\n        </dl>\n        <emu-alg>\n          1. Let _privateEnv_ be the running execution context's PrivateEnvironment.\n          1. Assert: _privateEnv_ is not *null*.\n          1. Let _privateName_ be ResolvePrivateIdentifier(_privateEnv_, _privateIdentifier_).\n          1. Return the Reference Record { [[Base]]: _baseValue_, [[ReferencedName]]: _privateName_, [[Strict]]: *true*, [[ThisValue]]: ~empty~ }.\n        </emu-alg>\n      </emu-clause>\n    </emu-clause>\n\n    <emu-clause id=\"sec-property-descriptor-specification-type\">\n      <h1>The Property Descriptor Specification Type</h1>\n      <p>The <dfn variants=\"Property Descriptors\">Property Descriptor</dfn> type is used to explain the manipulation and reification of Object property attributes. A Property Descriptor is a Record with zero or more fields, where each field's name is an attribute name and its value is a corresponding attribute value as specified in <emu-xref href=\"#sec-property-attributes\"></emu-xref>. The schema name used within this specification to tag literal descriptions of Property Descriptor records is “PropertyDescriptor”.</p>\n      <p>Property Descriptor values may be further classified as data Property Descriptors and accessor Property Descriptors based upon the existence or use of certain fields. A data Property Descriptor is one that includes any fields named either [[Value]] or [[Writable]]. An accessor Property Descriptor is one that includes any fields named either [[Get]] or [[Set]]. Any Property Descriptor may have fields named [[Enumerable]] and [[Configurable]]. A Property Descriptor value may not be both a data Property Descriptor and an accessor Property Descriptor; however, it may be neither (in which case it is a generic Property Descriptor). A <dfn>fully populated Property Descriptor</dfn> is one that is either an accessor Property Descriptor or a data Property Descriptor and that has all of the corresponding fields defined in <emu-xref href=\"#table-object-property-attributes\"></emu-xref>.</p>\n      <p>The following abstract operations are used in this specification to operate upon Property Descriptor values:</p>\n\n      <emu-clause id=\"sec-isaccessordescriptor\" type=\"abstract operation\">\n        <h1>\n          IsAccessorDescriptor (\n            _Desc_: a Property Descriptor or *undefined*,\n          ): a Boolean\n        </h1>\n        <dl class=\"header\">\n        </dl>\n        <emu-alg>\n          1. If _Desc_ is *undefined*, return *false*.\n          1. If _Desc_ has a [[Get]] field, return *true*.\n          1. If _Desc_ has a [[Set]] field, return *true*.\n          1. Return *false*.\n        </emu-alg>\n      </emu-clause>\n\n      <emu-clause id=\"sec-isdatadescriptor\" type=\"abstract operation\">\n        <h1>\n          IsDataDescriptor (\n            _Desc_: a Property Descriptor or *undefined*,\n          ): a Boolean\n        </h1>\n        <dl class=\"header\">\n        </dl>\n        <emu-alg>\n          1. If _Desc_ is *undefined*, return *false*.\n          1. If _Desc_ has a [[Value]] field, return *true*.\n          1. If _Desc_ has a [[Writable]] field, return *true*.\n          1. Return *false*.\n        </emu-alg>\n      </emu-clause>\n\n      <emu-clause id=\"sec-isgenericdescriptor\" type=\"abstract operation\">\n        <h1>\n          IsGenericDescriptor (\n            _Desc_: a Property Descriptor or *undefined*,\n          ): a Boolean\n        </h1>\n        <dl class=\"header\">\n        </dl>\n        <emu-alg>\n          1. If _Desc_ is *undefined*, return *false*.\n          1. If IsAccessorDescriptor(_Desc_) is *true*, return *false*.\n          1. If IsDataDescriptor(_Desc_) is *true*, return *false*.\n          1. Return *true*.\n        </emu-alg>\n      </emu-clause>\n\n      <emu-clause id=\"sec-frompropertydescriptor\" type=\"abstract operation\">\n        <h1>\n          FromPropertyDescriptor (\n            _Desc_: a Property Descriptor or *undefined*,\n          ): an Object or *undefined*\n        </h1>\n        <dl class=\"header\">\n        </dl>\n        <emu-alg>\n          1. If _Desc_ is *undefined*, return *undefined*.\n          1. Let _obj_ be OrdinaryObjectCreate(%Object.prototype%).\n          1. Assert: _obj_ is an extensible ordinary object with no own properties.\n          1. If _Desc_ has a [[Value]] field, then\n            1. Perform ! CreateDataPropertyOrThrow(_obj_, *\"value\"*, _Desc_.[[Value]]).\n          1. If _Desc_ has a [[Writable]] field, then\n            1. Perform ! CreateDataPropertyOrThrow(_obj_, *\"writable\"*, _Desc_.[[Writable]]).\n          1. If _Desc_ has a [[Get]] field, then\n            1. Perform ! CreateDataPropertyOrThrow(_obj_, *\"get\"*, _Desc_.[[Get]]).\n          1. If _Desc_ has a [[Set]] field, then\n            1. Perform ! CreateDataPropertyOrThrow(_obj_, *\"set\"*, _Desc_.[[Set]]).\n          1. If _Desc_ has an [[Enumerable]] field, then\n            1. Perform ! CreateDataPropertyOrThrow(_obj_, *\"enumerable\"*, _Desc_.[[Enumerable]]).\n          1. If _Desc_ has a [[Configurable]] field, then\n            1. Perform ! CreateDataPropertyOrThrow(_obj_, *\"configurable\"*, _Desc_.[[Configurable]]).\n          1. Return _obj_.\n        </emu-alg>\n      </emu-clause>\n\n      <emu-clause id=\"sec-topropertydescriptor\" type=\"abstract operation\">\n        <h1>\n          ToPropertyDescriptor (\n            _Obj_: an ECMAScript language value,\n          ): either a normal completion containing a Property Descriptor or a throw completion\n        </h1>\n        <dl class=\"header\">\n        </dl>\n        <emu-alg>\n          1. If _Obj_ is not an Object, throw a *TypeError* exception.\n          1. Let _desc_ be a new Property Descriptor that initially has no fields.\n          1. Let _hasEnumerable_ be ? HasProperty(_Obj_, *\"enumerable\"*).\n          1. If _hasEnumerable_ is *true*, then\n            1. Let _enumerable_ be ToBoolean(? Get(_Obj_, *\"enumerable\"*)).\n            1. Set _desc_.[[Enumerable]] to _enumerable_.\n          1. Let _hasConfigurable_ be ? HasProperty(_Obj_, *\"configurable\"*).\n          1. If _hasConfigurable_ is *true*, then\n            1. Let _configurable_ be ToBoolean(? Get(_Obj_, *\"configurable\"*)).\n            1. Set _desc_.[[Configurable]] to _configurable_.\n          1. Let _hasValue_ be ? HasProperty(_Obj_, *\"value\"*).\n          1. If _hasValue_ is *true*, then\n            1. Let _value_ be ? Get(_Obj_, *\"value\"*).\n            1. Set _desc_.[[Value]] to _value_.\n          1. Let _hasWritable_ be ? HasProperty(_Obj_, *\"writable\"*).\n          1. If _hasWritable_ is *true*, then\n            1. Let _writable_ be ToBoolean(? Get(_Obj_, *\"writable\"*)).\n            1. Set _desc_.[[Writable]] to _writable_.\n          1. Let _hasGet_ be ? HasProperty(_Obj_, *\"get\"*).\n          1. If _hasGet_ is *true*, then\n            1. Let _getter_ be ? Get(_Obj_, *\"get\"*).\n            1. If IsCallable(_getter_) is *false* and _getter_ is not *undefined*, throw a *TypeError* exception.\n            1. Set _desc_.[[Get]] to _getter_.\n          1. Let _hasSet_ be ? HasProperty(_Obj_, *\"set\"*).\n          1. If _hasSet_ is *true*, then\n            1. Let _setter_ be ? Get(_Obj_, *\"set\"*).\n            1. If IsCallable(_setter_) is *false* and _setter_ is not *undefined*, throw a *TypeError* exception.\n            1. Set _desc_.[[Set]] to _setter_.\n          1. If _desc_ has a [[Get]] field or _desc_ has a [[Set]] field, then\n            1. If _desc_ has a [[Value]] field or _desc_ has a [[Writable]] field, throw a *TypeError* exception.\n          1. Return _desc_.\n        </emu-alg>\n      </emu-clause>\n\n      <emu-clause id=\"sec-completepropertydescriptor\" type=\"abstract operation\">\n        <h1>\n          CompletePropertyDescriptor (\n            _Desc_: a Property Descriptor,\n          ): ~unused~\n        </h1>\n        <dl class=\"header\">\n        </dl>\n        <emu-alg>\n          1. Let _like_ be the Record { [[Value]]: *undefined*, [[Writable]]: *false*, [[Get]]: *undefined*, [[Set]]: *undefined*, [[Enumerable]]: *false*, [[Configurable]]: *false* }.\n          1. If IsGenericDescriptor(_Desc_) is *true* or IsDataDescriptor(_Desc_) is *true*, then\n            1. If _Desc_ does not have a [[Value]] field, set _Desc_.[[Value]] to _like_.[[Value]].\n            1. If _Desc_ does not have a [[Writable]] field, set _Desc_.[[Writable]] to _like_.[[Writable]].\n          1. Else,\n            1. If _Desc_ does not have a [[Get]] field, set _Desc_.[[Get]] to _like_.[[Get]].\n            1. If _Desc_ does not have a [[Set]] field, set _Desc_.[[Set]] to _like_.[[Set]].\n          1. If _Desc_ does not have an [[Enumerable]] field, set _Desc_.[[Enumerable]] to _like_.[[Enumerable]].\n          1. If _Desc_ does not have a [[Configurable]] field, set _Desc_.[[Configurable]] to _like_.[[Configurable]].\n          1. Return ~unused~.\n        </emu-alg>\n      </emu-clause>\n    </emu-clause>\n\n    <emu-clause id=\"sec-lexical-environment-and-environment-record-specification-types\">\n      <h1>The Environment Record Specification Type</h1>\n      <p>The Environment Record type is used to explain the behaviour of name resolution in nested functions and blocks. This type and the operations upon it are defined in <emu-xref href=\"#sec-environment-records\"></emu-xref>.</p>\n    </emu-clause>\n\n    <emu-clause id=\"sec-abstract-closure\">\n      <h1>The Abstract Closure Specification Type</h1>\n      <p>The <dfn variants=\"Abstract Closures\">Abstract Closure</dfn> specification type is used to refer to algorithm steps together with a collection of values. Abstract Closures are meta-values and are invoked using function application style such as _closure_(_arg1_, _arg2_). Like abstract operations, invocations perform the algorithm steps described by the Abstract Closure.</p>\n      <p>In algorithm steps that create an Abstract Closure, values are captured with the verb \"capture\" followed by a list of aliases. When an Abstract Closure is created, it captures the value that is associated with each alias at that time. In steps that specify the algorithm to be performed when an Abstract Closure is called, each captured value is referred to by the alias that was used to capture the value.</p>\n      <p>If an Abstract Closure returns a Completion Record, that Completion Record must be either a normal completion or a throw completion.</p>\n      <p>Abstract Closures are created inline as part of other algorithms, shown in the following example.</p>\n      <emu-alg example>\n        1. Let _addend_ be 41.\n        1. Let _closure_ be a new Abstract Closure with parameters (_x_) that captures _addend_ and performs the following steps when called:\n          1. Return _x_ + _addend_.\n        1. Let _val_ be _closure_(1).\n        1. Assert: _val_ is 42.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-data-blocks\">\n      <h1>Data Blocks</h1>\n      <p>The <dfn variants=\"Data Blocks\">Data Block</dfn> specification type is used to describe a distinct and mutable sequence of byte-sized (8 bit) numeric values. A <dfn variants=\"byte values\">byte value</dfn> is an integer in the inclusive interval from 0 to 255. A Data Block value is created with a fixed number of bytes that each have the initial value 0.</p>\n      <p>For notational convenience within this specification, an array-like syntax can be used to access the individual bytes of a Data Block value. This notation presents a Data Block value as a 0-based <emu-not-ref>integer-indexed</emu-not-ref> sequence of bytes. For example, if _db_ is a 5 byte Data Block value then _db_[2] can be used to access its 3<sup>rd</sup> byte.</p>\n      <p>A data block that resides in memory that can be referenced from multiple agents concurrently is designated a <dfn variants=\"Shared Data Blocks\">Shared Data Block</dfn>. A Shared Data Block has an identity (for the purposes of equality testing Shared Data Block values) that is <em>address-free</em>: it is tied not to the virtual addresses the block is mapped to in any process, but to the set of locations in memory that the block represents. Two data blocks are equal only if the sets of the locations they contain are equal; otherwise, they are not equal and the intersection of the sets of locations they contain is empty. Finally, Shared Data Blocks can be distinguished from Data Blocks.</p>\n      <p>The semantics of Shared Data Blocks is defined using Shared Data Block events by the memory model. Abstract operations below introduce Shared Data Block events and act as the interface between evaluation semantics and the event semantics of the memory model. The events form a candidate execution, on which the memory model acts as a filter. Please consult the memory model for full semantics.</p>\n      <p>Shared Data Block events are modelled by Records, defined in the memory model.</p>\n      <p>The following abstract operations are used in this specification to operate upon Data Block values:</p>\n\n      <emu-clause id=\"sec-createbytedatablock\" type=\"abstract operation\">\n        <h1>\n          CreateByteDataBlock (\n            _size_: a non-negative integer,\n          ): either a normal completion containing a Data Block or a throw completion\n        </h1>\n        <dl class=\"header\">\n        </dl>\n        <emu-alg>\n          1. If _size_ > 2<sup>53</sup> - 1, throw a *RangeError* exception.\n          1. Let _db_ be a new Data Block value consisting of _size_ bytes. If it is impossible to create such a Data Block, throw a *RangeError* exception.\n          1. Set all of the bytes of _db_ to 0.\n          1. Return _db_.\n        </emu-alg>\n      </emu-clause>\n\n      <emu-clause id=\"sec-createsharedbytedatablock\" type=\"abstract operation\">\n        <h1>\n          CreateSharedByteDataBlock (\n            _size_: a non-negative integer,\n          ): either a normal completion containing a Shared Data Block or a throw completion\n        </h1>\n        <dl class=\"header\">\n        </dl>\n        <emu-alg>\n          1. Let _db_ be a new Shared Data Block value consisting of _size_ bytes. If it is impossible to create such a Shared Data Block, throw a *RangeError* exception.\n          1. Let _execution_ be the [[CandidateExecution]] field of the surrounding agent's Agent Record.\n          1. Let _eventsRecord_ be the Agent Events Record of _execution_.[[EventsRecords]] whose [[AgentSignifier]] is AgentSignifier().\n          1. Let _zero_ be « 0 ».\n          1. For each index _i_ of _db_, do\n            1. Append WriteSharedMemory { [[Order]]: ~init~, [[NoTear]]: *true*, [[Block]]: _db_, [[ByteIndex]]: _i_, [[ElementSize]]: 1, [[Payload]]: _zero_ } to _eventsRecord_.[[EventList]].\n          1. Return _db_.\n        </emu-alg>\n      </emu-clause>\n\n      <emu-clause id=\"sec-copydatablockbytes\" type=\"abstract operation\">\n        <h1>\n          CopyDataBlockBytes (\n            _toBlock_: a Data Block or a Shared Data Block,\n            _toIndex_: a non-negative integer,\n            _fromBlock_: a Data Block or a Shared Data Block,\n            _fromIndex_: a non-negative integer,\n            _count_: a non-negative integer,\n          ): ~unused~\n        </h1>\n        <dl class=\"header\">\n        </dl>\n        <emu-alg>\n          1. Assert: _fromBlock_ and _toBlock_ are distinct values.\n          1. Let _fromSize_ be the number of bytes in _fromBlock_.\n          1. Assert: _fromIndex_ + _count_ ≤ _fromSize_.\n          1. Let _toSize_ be the number of bytes in _toBlock_.\n          1. Assert: _toIndex_ + _count_ ≤ _toSize_.\n          1. Repeat, while _count_ > 0,\n            1. If _fromBlock_ is a Shared Data Block, then\n              1. Let _execution_ be the [[CandidateExecution]] field of the surrounding agent's Agent Record.\n              1. Let _eventsRecord_ be the Agent Events Record of _execution_.[[EventsRecords]] whose [[AgentSignifier]] is AgentSignifier().\n              1. Let _bytes_ be a List whose sole element is a nondeterministically chosen byte value.\n              1. NOTE: In implementations, _bytes_ is the result of a non-atomic read instruction on the underlying hardware. The nondeterminism is a semantic prescription of the memory model to describe observable behaviour of hardware with weak consistency.\n              1. Let _readEvent_ be ReadSharedMemory { [[Order]]: ~unordered~, [[NoTear]]: *true*, [[Block]]: _fromBlock_, [[ByteIndex]]: _fromIndex_, [[ElementSize]]: 1 }.\n              1. Append _readEvent_ to _eventsRecord_.[[EventList]].\n              1. Append Chosen Value Record { [[Event]]: _readEvent_, [[ChosenValue]]: _bytes_ } to _execution_.[[ChosenValues]].\n              1. If _toBlock_ is a Shared Data Block, then\n                1. Append WriteSharedMemory { [[Order]]: ~unordered~, [[NoTear]]: *true*, [[Block]]: _toBlock_, [[ByteIndex]]: _toIndex_, [[ElementSize]]: 1, [[Payload]]: _bytes_ } to _eventsRecord_.[[EventList]].\n              1. Else,\n                1. Set _toBlock_[_toIndex_] to _bytes_[0].\n            1. Else,\n              1. Assert: _toBlock_ is not a Shared Data Block.\n              1. Set _toBlock_[_toIndex_] to _fromBlock_[_fromIndex_].\n            1. Set _toIndex_ to _toIndex_ + 1.\n            1. Set _fromIndex_ to _fromIndex_ + 1.\n            1. Set _count_ to _count_ - 1.\n          1. Return ~unused~.\n        </emu-alg>\n      </emu-clause>\n    </emu-clause>\n\n    <emu-clause id=\"sec-privateelement-specification-type\">\n      <h1>The PrivateElement Specification Type</h1>\n      <p>The PrivateElement type is a Record used in the specification of private class fields, methods, and accessors. Although Property Descriptors are not used for private elements, private fields behave similarly to non-configurable, non-enumerable, writable data properties, private methods behave similarly to non-configurable, non-enumerable, non-writable data properties, and private accessors behave similarly to non-configurable, non-enumerable accessor properties.</p>\n      <p>Values of the PrivateElement type are Record values whose fields are defined by <emu-xref href=\"#table-privateelement-fields\"></emu-xref>. Such values are referred to as <dfn variants=\"PrivateElement\">PrivateElements</dfn>.</p>\n      <emu-table id=\"table-privateelement-fields\" caption=\"PrivateElement Fields\">\n        <table>\n          <thead>\n            <tr>\n              <th>\n                Field Name\n              </th>\n              <th>\n                Values of the [[Kind]] field for which it is present\n              </th>\n              <th>\n                Value\n              </th>\n              <th>\n                Meaning\n              </th>\n            </tr>\n          </thead>\n          <tr>\n            <td>\n              [[Key]]\n            </td>\n            <td>\n              All\n            </td>\n            <td>\n              a Private Name\n            </td>\n            <td>\n              The name of the field, method, or accessor.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[Kind]]\n            </td>\n            <td>\n              All\n            </td>\n            <td>\n              ~field~, ~method~, or ~accessor~\n            </td>\n            <td>\n              The kind of the element.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[Value]]\n            </td>\n            <td>\n              ~field~ and ~method~\n            </td>\n            <td>\n              an ECMAScript language value\n            </td>\n            <td>\n              The value of the field.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[Get]]\n            </td>\n            <td>\n              ~accessor~\n            </td>\n            <td>\n              a function object or *undefined*\n            </td>\n            <td>\n              The getter for a private accessor.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[Set]]\n            </td>\n            <td>\n              ~accessor~\n            </td>\n            <td>\n              a function object or *undefined*\n            </td>\n            <td>\n              The setter for a private accessor.\n            </td>\n          </tr>\n        </table>\n      </emu-table>\n    </emu-clause>\n\n    <emu-clause id=\"sec-classfielddefinition-record-specification-type\">\n      <h1>The ClassFieldDefinition Record Specification Type</h1>\n      <p>The ClassFieldDefinition type is a Record used in the specification of class fields.</p>\n      <p>Values of the ClassFieldDefinition type are Record values whose fields are defined by <emu-xref href=\"#table-classfielddefinition-fields\"></emu-xref>. Such values are referred to as <dfn variants=\"ClassFieldDefinition Record\">ClassFieldDefinition Records</dfn>.</p>\n      <emu-table id=\"table-classfielddefinition-fields\" caption=\"ClassFieldDefinition Record Fields\">\n        <table>\n          <thead>\n            <tr>\n              <th>\n                Field Name\n              </th>\n              <th>\n                Value\n              </th>\n              <th>\n                Meaning\n              </th>\n            </tr>\n          </thead>\n          <tr>\n            <td>\n              [[Name]]\n            </td>\n            <td>\n              a Private Name, a String, or a Symbol\n            </td>\n            <td>\n              The name of the field.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[Initializer]]\n            </td>\n            <td>\n              an ECMAScript function object or ~empty~\n            </td>\n            <td>\n              The initializer of the field, if any.\n            </td>\n          </tr>\n        </table>\n      </emu-table>\n    </emu-clause>\n\n    <emu-clause id=\"sec-private-names\">\n      <h1>Private Names</h1>\n      <p>The <dfn variants=\"Private Names\">Private Name</dfn> specification type is used to describe a globally unique value (one which differs from any other Private Name, even if they are otherwise indistinguishable) which represents the key of a private class element (field, method, or accessor). Each Private Name has an associated immutable [[Description]] which is a String value. A Private Name may be installed on any ECMAScript object with PrivateFieldAdd or PrivateMethodOrAccessorAdd, and then read or written using PrivateGet and PrivateSet.</p>\n    </emu-clause>\n\n    <emu-clause id=\"sec-classstaticblockdefinition-record-specification-type\">\n      <h1>The ClassStaticBlockDefinition Record Specification Type</h1>\n      <p>A <dfn variants=\"ClassStaticBlockDefinition Records\">ClassStaticBlockDefinition Record</dfn> is a Record value used to encapsulate the executable code for a class static initialization block.</p>\n      <p>ClassStaticBlockDefinition Records have the fields listed in <emu-xref href=\"#table-classstaticblockdefinition-record-fields\"></emu-xref>.</p>\n      <emu-table id=\"table-classstaticblockdefinition-record-fields\" caption=\"ClassStaticBlockDefinition Record Fields\">\n        <table>\n          <thead>\n            <tr>\n              <th>\n                Field Name\n              </th>\n              <th>\n                Value\n              </th>\n              <th>\n                Meaning\n              </th>\n            </tr>\n          </thead>\n          <tr>\n            <td>\n              [[BodyFunction]]\n            </td>\n            <td>\n              an ECMAScript function object\n            </td>\n            <td>\n              The function object to be called during static initialization of a class.\n            </td>\n          </tr>\n        </table>\n      </emu-table>\n    </emu-clause>\n  </emu-clause>\n</emu-clause>\n\n<emu-clause id=\"sec-abstract-operations\">\n  <h1>Abstract Operations</h1>\n  <p>These operations are not a part of the ECMAScript language; they are defined here solely to aid the specification of the semantics of the ECMAScript language. Other, more specialized abstract operations are defined throughout this specification.</p>\n\n  <emu-clause id=\"sec-type-conversion\">\n    <h1>Type Conversion</h1>\n    <p>The ECMAScript language implicitly performs automatic type conversion as needed. To clarify the semantics of certain constructs it is useful to define a set of conversion abstract operations. The conversion abstract operations are polymorphic; they can accept a value of any ECMAScript language type. But no other specification types are used with these operations.</p>\n    <p>The BigInt type has no implicit conversions in the ECMAScript language; programmers must call BigInt explicitly to convert values from other types.</p>\n\n    <emu-clause id=\"sec-toprimitive\" type=\"abstract operation\" oldids=\"table-9\">\n      <h1>\n        ToPrimitive (\n          _input_: an ECMAScript language value,\n          optional _preferredType_: ~string~ or ~number~,\n        ): either a normal completion containing an ECMAScript language value or a throw completion\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It converts its _input_ argument to a non-Object type. If an object is capable of converting to more than one primitive type, it may use the optional hint _preferredType_ to favour that type.</dd>\n      </dl>\n      <emu-alg>\n        1. If _input_ is an Object, then\n          1. Let _exoticToPrim_ be ? GetMethod(_input_, %Symbol.toPrimitive%).\n          1. If _exoticToPrim_ is not *undefined*, then\n            1. If _preferredType_ is not present, then\n              1. Let _hint_ be *\"default\"*.\n            1. Else if _preferredType_ is ~string~, then\n              1. Let _hint_ be *\"string\"*.\n            1. Else,\n              1. Assert: _preferredType_ is ~number~.\n              1. Let _hint_ be *\"number\"*.\n            1. Let _result_ be ? Call(_exoticToPrim_, _input_, « _hint_ »).\n            1. If _result_ is not an Object, return _result_.\n            1. Throw a *TypeError* exception.\n          1. If _preferredType_ is not present, let _preferredType_ be ~number~.\n          1. Return ? OrdinaryToPrimitive(_input_, _preferredType_).\n        1. Return _input_.\n      </emu-alg>\n      <emu-note>\n        <p>When ToPrimitive is called without a hint, then it generally behaves as if the hint were ~number~. However, objects may over-ride this behaviour by defining a %Symbol.toPrimitive% method. Of the objects defined in this specification only Dates (see <emu-xref href=\"#sec-date.prototype-%symbol.toprimitive%\"></emu-xref>) and Symbol objects (see <emu-xref href=\"#sec-symbol.prototype-%symbol.toprimitive%\"></emu-xref>) over-ride the default ToPrimitive behaviour. Dates treat the absence of a hint as if the hint were ~string~.</p>\n      </emu-note>\n\n      <emu-clause id=\"sec-ordinarytoprimitive\" type=\"abstract operation\">\n        <h1>\n          OrdinaryToPrimitive (\n            _O_: an Object,\n            _hint_: ~string~ or ~number~,\n          ): either a normal completion containing an ECMAScript language value or a throw completion\n        </h1>\n        <dl class=\"header\">\n        </dl>\n        <emu-alg>\n          1. If _hint_ is ~string~, then\n            1. Let _methodNames_ be « *\"toString\"*, *\"valueOf\"* ».\n          1. Else,\n            1. Let _methodNames_ be « *\"valueOf\"*, *\"toString\"* ».\n          1. For each element _name_ of _methodNames_, do\n            1. Let _method_ be ? Get(_O_, _name_).\n            1. If IsCallable(_method_) is *true*, then\n              1. Let _result_ be ? Call(_method_, _O_).\n              1. If _result_ is not an Object, return _result_.\n          1. Throw a *TypeError* exception.\n        </emu-alg>\n      </emu-clause>\n    </emu-clause>\n\n    <emu-clause id=\"sec-toboolean\" oldids=\"table-toboolean-conversions\" type=\"abstract operation\">\n      <h1>\n        ToBoolean (\n          _argument_: an ECMAScript language value,\n        ): a Boolean\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It converts _argument_ to a value of type Boolean.</dd>\n      </dl>\n      <emu-alg>\n        1. If _argument_ is a Boolean, return _argument_.\n        1. If _argument_ is one of *undefined*, *null*, *+0*<sub>𝔽</sub>, *-0*<sub>𝔽</sub>, *NaN*, *0*<sub>ℤ</sub>, or the empty String, return *false*.\n        1. [id=\"step-to-boolean-web-compat-insertion-point\"] NOTE: This step is replaced in section <emu-xref href=\"#sec-IsHTMLDDA-internal-slot-to-boolean\"></emu-xref>.\n        1. Return *true*.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-tonumeric\" type=\"abstract operation\">\n      <h1>\n        ToNumeric (\n          _value_: an ECMAScript language value,\n        ): either a normal completion containing either a Number or a BigInt, or a throw completion\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It returns _value_ converted to a Number or a BigInt.</dd>\n      </dl>\n      <emu-alg>\n        1. Let _primValue_ be ? ToPrimitive(_value_, ~number~).\n        1. If _primValue_ is a BigInt, return _primValue_.\n        1. Return ? <emu-meta suppress-effects=\"user-code\">ToNumber(_primValue_)</emu-meta>.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-tonumber\" oldids=\"table-tonumber-conversions\" type=\"abstract operation\">\n      <h1>\n        ToNumber (\n          _argument_: an ECMAScript language value,\n        ): either a normal completion containing a Number or a throw completion\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It converts _argument_ to a value of type Number.</dd>\n      </dl>\n      <emu-alg>\n        1. If _argument_ is a Number, return _argument_.\n        1. If _argument_ is either a Symbol or a BigInt, throw a *TypeError* exception.\n        1. If _argument_ is *undefined*, return *NaN*.\n        1. If _argument_ is either *null* or *false*, return *+0*<sub>𝔽</sub>.\n        1. If _argument_ is *true*, return *1*<sub>𝔽</sub>.\n        1. If _argument_ is a String, return StringToNumber(_argument_).\n        1. Assert: _argument_ is an Object.\n        1. Let _primValue_ be ? ToPrimitive(_argument_, ~number~).\n        1. Assert: _primValue_ is not an Object.\n        1. Return ? ToNumber(_primValue_).\n      </emu-alg>\n\n      <emu-clause id=\"sec-tonumber-applied-to-the-string-type\">\n        <h1>ToNumber Applied to the String Type</h1>\n        <p>The abstract operation StringToNumber specifies how to convert a String value to a Number value, using the following grammar.</p>\n        <h2>Syntax</h2>\n        <emu-grammar type=\"definition\">\n          StringNumericLiteral :::\n            StrWhiteSpace?\n            StrWhiteSpace? StrNumericLiteral StrWhiteSpace?\n\n          StrWhiteSpace :::\n            StrWhiteSpaceChar StrWhiteSpace?\n\n          StrWhiteSpaceChar :::\n            WhiteSpace\n            LineTerminator\n\n          StrNumericLiteral :::\n            StrDecimalLiteral\n            NonDecimalIntegerLiteral[~Sep]\n\n          StrDecimalLiteral :::\n            StrUnsignedDecimalLiteral\n            `+` StrUnsignedDecimalLiteral\n            `-` StrUnsignedDecimalLiteral\n\n          StrUnsignedDecimalLiteral :::\n            `Infinity`\n            DecimalDigits[~Sep] `.` DecimalDigits[~Sep]? ExponentPart[~Sep]?\n            `.` DecimalDigits[~Sep] ExponentPart[~Sep]?\n            DecimalDigits[~Sep] ExponentPart[~Sep]?\n        </emu-grammar>\n        <p>All grammar symbols not explicitly defined above have the definitions used in the Lexical Grammar for numeric literals (<emu-xref href=\"#sec-literals-numeric-literals\"></emu-xref>)</p>\n        <emu-note>\n          <p>Some differences should be noted between the syntax of a |StringNumericLiteral| and a |NumericLiteral|:</p>\n          <ul>\n            <li>\n              A |StringNumericLiteral| may include leading and/or trailing white space and/or line terminators.\n            </li>\n            <li>\n              A |StringNumericLiteral| that is decimal may have any number of leading `0` digits.\n            </li>\n            <li>\n              A |StringNumericLiteral| that is decimal may include a `+` or `-` to indicate its sign.\n            </li>\n            <li>\n              A |StringNumericLiteral| that is empty or contains only white space is converted to *+0*<sub>𝔽</sub>.\n            </li>\n            <li>\n              `Infinity` and `-Infinity` are recognized as a |StringNumericLiteral| but not as a |NumericLiteral|.\n            </li>\n            <li>\n              A |StringNumericLiteral| cannot include a |BigIntLiteralSuffix|.\n            </li>\n            <li>\n              A |StringNumericLiteral| cannot include a |NumericLiteralSeparator|.\n            </li>\n          </ul>\n        </emu-note>\n\n        <emu-clause id=\"sec-stringtonumber\" type=\"abstract operation\">\n          <h1>\n            StringToNumber (\n              _str_: a String,\n            ): a Number\n          </h1>\n          <dl class=\"header\">\n          </dl>\n          <emu-alg>\n            1. Let _literal_ be ParseText(_str_, |StringNumericLiteral|).\n            1. If _literal_ is a List of errors, return *NaN*.\n            1. Return the StringNumericValue of _literal_.\n          </emu-alg>\n        </emu-clause>\n\n        <emu-clause id=\"sec-runtime-semantics-stringnumericvalue\" type=\"sdo\" oldids=\"sec-runtime-semantics-mv-s\">\n          <h1>Runtime Semantics: StringNumericValue ( ): a Number</h1>\n          <dl class=\"header\">\n          </dl>\n          <emu-note>\n            <p>The conversion of a |StringNumericLiteral| to a Number value is similar overall to the determination of the NumericValue of a |NumericLiteral| (see <emu-xref href=\"#sec-literals-numeric-literals\"></emu-xref>), but some of the details are different.</p>\n          </emu-note>\n          <emu-grammar>StringNumericLiteral ::: StrWhiteSpace?</emu-grammar>\n          <emu-alg>\n            1. Return *+0*<sub>𝔽</sub>.\n          </emu-alg>\n          <emu-grammar>StringNumericLiteral ::: StrWhiteSpace? StrNumericLiteral StrWhiteSpace?</emu-grammar>\n          <emu-alg>\n            1. Return the StringNumericValue of |StrNumericLiteral|.\n          </emu-alg>\n          <emu-grammar>StrNumericLiteral ::: NonDecimalIntegerLiteral</emu-grammar>\n          <emu-alg>\n            1. Return 𝔽(MV of |NonDecimalIntegerLiteral|).\n          </emu-alg>\n          <emu-grammar>StrDecimalLiteral ::: `-` StrUnsignedDecimalLiteral</emu-grammar>\n          <emu-alg>\n            1. Let _a_ be the StringNumericValue of |StrUnsignedDecimalLiteral|.\n            1. If _a_ is *+0*<sub>𝔽</sub>, return *-0*<sub>𝔽</sub>.\n            1. Return -_a_.\n          </emu-alg>\n          <emu-grammar>StrUnsignedDecimalLiteral ::: `Infinity`</emu-grammar>\n          <emu-alg>\n            1. Return *+∞*<sub>𝔽</sub>.\n          </emu-alg>\n          <emu-grammar>StrUnsignedDecimalLiteral ::: DecimalDigits `.` DecimalDigits? ExponentPart?</emu-grammar>\n          <emu-alg>\n            1. Let _a_ be the MV of the first |DecimalDigits|.\n            1. If the second |DecimalDigits| is present, then\n              1. Let _b_ be the MV of the second |DecimalDigits|.\n              1. Let _n_ be the number of code points in the second |DecimalDigits|.\n            1. Else,\n              1. Let _b_ be 0.\n              1. Let _n_ be 0.\n            1. If |ExponentPart| is present, let _e_ be the MV of |ExponentPart|. Otherwise, let _e_ be 0.\n            1. Return RoundMVResult((_a_ + (_b_ × 10<sup>-_n_</sup>)) × 10<sup>_e_</sup>).\n          </emu-alg>\n          <emu-grammar>StrUnsignedDecimalLiteral ::: `.` DecimalDigits ExponentPart?</emu-grammar>\n          <emu-alg>\n            1. Let _b_ be the MV of |DecimalDigits|.\n            1. If |ExponentPart| is present, let _e_ be the MV of |ExponentPart|. Otherwise, let _e_ be 0.\n            1. Let _n_ be the number of code points in |DecimalDigits|.\n            1. Return RoundMVResult(_b_ × 10<sup>_e_ - _n_</sup>).\n          </emu-alg>\n          <emu-grammar>StrUnsignedDecimalLiteral ::: DecimalDigits ExponentPart?</emu-grammar>\n          <emu-alg>\n            1. Let _a_ be the MV of |DecimalDigits|.\n            1. If |ExponentPart| is present, let _e_ be the MV of |ExponentPart|. Otherwise, let _e_ be 0.\n            1. Return RoundMVResult(_a_ × 10<sup>_e_</sup>).\n          </emu-alg>\n        </emu-clause>\n\n        <emu-clause id=\"sec-roundmvresult\" type=\"abstract operation\">\n          <h1>\n            RoundMVResult (\n              _n_: a mathematical value,\n            ): a Number\n          </h1>\n          <dl class=\"header\">\n            <dt>description</dt>\n            <dd>It converts _n_ to a Number in an implementation-defined manner. For the purposes of this abstract operation, a digit is significant if it is not zero or there is a non-zero digit to its left and there is a non-zero digit to its right. For the purposes of this abstract operation, \"the mathematical value denoted by\" a representation of a mathematical value is the inverse of \"the decimal representation of\" a mathematical value.</dd>\n          </dl>\n          <emu-alg>\n            1. If the decimal representation of _n_ has 20 or fewer significant digits, return 𝔽(_n_).\n            1. Let _option1_ be the mathematical value denoted by the result of replacing each significant digit in the decimal representation of _n_ after the 20th with a 0 digit.\n            1. Let _option2_ be the mathematical value denoted by the result of replacing each significant digit in the decimal representation of _n_ after the 20th with a 0 digit and then incrementing it at the 20th position (with carrying as necessary).\n            1. Let _chosen_ be an implementation-defined choice of either _option1_ or _option2_.\n            1. Return 𝔽(_chosen_).\n          </emu-alg>\n        </emu-clause>\n      </emu-clause>\n    </emu-clause>\n\n    <emu-clause id=\"sec-tointegerorinfinity\" type=\"abstract operation\" oldids=\"sec-tointeger\">\n      <h1>\n        ToIntegerOrInfinity (\n          _argument_: an ECMAScript language value,\n        ): either a normal completion containing either an integer, +&infin;, or -&infin;, or a throw completion\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It converts _argument_ to an integer representing its Number value with fractional part truncated, or to +∞ or -∞ when that Number value is infinite.</dd>\n      </dl>\n      <emu-alg>\n        1. Let _number_ be ? ToNumber(_argument_).\n        1. If _number_ is one of *NaN*, *+0*<sub>𝔽</sub>, or *-0*<sub>𝔽</sub>, return 0.\n        1. If _number_ is *+∞*<sub>𝔽</sub>, return +∞.\n        1. If _number_ is *-∞*<sub>𝔽</sub>, return -∞.\n        1. Return truncate(ℝ(_number_)).\n      </emu-alg>\n      <emu-note>\n        𝔽(ToIntegerOrInfinity(_x_)) never returns *-0*<sub>𝔽</sub> for any value of _x_. The truncation of the fractional part is performed after converting _x_ to a mathematical value.\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-toint32\" type=\"abstract operation\">\n      <h1>\n        ToInt32 (\n          _argument_: an ECMAScript language value,\n        ): either a normal completion containing an integral Number or a throw completion\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It converts _argument_ to one of 2<sup>32</sup> integral Number values in the inclusive interval from 𝔽(-2<sup>31</sup>) to 𝔽(2<sup>31</sup> - 1).</dd>\n      </dl>\n      <emu-alg>\n        1. Let _number_ be ? ToNumber(_argument_).\n        1. If _number_ is not finite or _number_ is either *+0*<sub>𝔽</sub> or *-0*<sub>𝔽</sub>, return *+0*<sub>𝔽</sub>.\n        1. Let _int_ be truncate(ℝ(_number_)).\n        1. Let _int32bit_ be _int_ modulo 2<sup>32</sup>.\n        1. If _int32bit_ ≥ 2<sup>31</sup>, return 𝔽(_int32bit_ - 2<sup>32</sup>); otherwise return 𝔽(_int32bit_).\n      </emu-alg>\n      <emu-note>\n        <p>Given the above definition of ToInt32:</p>\n        <ul>\n          <li>\n            The ToInt32 abstract operation is idempotent: if applied to a result that it produced, the second application leaves that value unchanged.\n          </li>\n          <li>\n            ToInt32(ToUint32(_x_)) is the same value as ToInt32(_x_) for all values of _x_. (It is to preserve this latter property that *+∞*<sub>𝔽</sub> and *-∞*<sub>𝔽</sub> are mapped to *+0*<sub>𝔽</sub>.)\n          </li>\n          <li>\n            ToInt32 maps *-0*<sub>𝔽</sub> to *+0*<sub>𝔽</sub>.\n          </li>\n        </ul>\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-touint32\" type=\"abstract operation\">\n      <h1>\n        ToUint32 (\n          _argument_: an ECMAScript language value,\n        ): either a normal completion containing an integral Number or a throw completion\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It converts _argument_ to one of 2<sup>32</sup> integral Number values in the inclusive interval from *+0*<sub>𝔽</sub> to 𝔽(2<sup>32</sup> - 1).</dd>\n      </dl>\n      <emu-alg>\n        1. Let _number_ be ? ToNumber(_argument_).\n        1. If _number_ is not finite or _number_ is either *+0*<sub>𝔽</sub> or *-0*<sub>𝔽</sub>, return *+0*<sub>𝔽</sub>.\n        1. Let _int_ be truncate(ℝ(_number_)).\n        1. Let _int32bit_ be _int_ modulo 2<sup>32</sup>.\n        1. [id=\"step-touint32-return\"] Return 𝔽(_int32bit_).\n      </emu-alg>\n      <emu-note>\n        <p>Given the above definition of ToUint32:</p>\n        <ul>\n          <li>\n            Step <emu-xref href=\"#step-touint32-return\"></emu-xref> is the only difference between ToUint32 and ToInt32.\n          </li>\n          <li>\n            The ToUint32 abstract operation is idempotent: if applied to a result that it produced, the second application leaves that value unchanged.\n          </li>\n          <li>\n            ToUint32(ToInt32(_x_)) is the same value as ToUint32(_x_) for all values of _x_. (It is to preserve this latter property that *+∞*<sub>𝔽</sub> and *-∞*<sub>𝔽</sub> are mapped to *+0*<sub>𝔽</sub>.)\n          </li>\n          <li>\n            ToUint32 maps *-0*<sub>𝔽</sub> to *+0*<sub>𝔽</sub>.\n          </li>\n        </ul>\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-toint16\" type=\"abstract operation\">\n      <h1>\n        ToInt16 (\n          _argument_: an ECMAScript language value,\n        ): either a normal completion containing an integral Number or a throw completion\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It converts _argument_ to one of 2<sup>16</sup> integral Number values in the inclusive interval from 𝔽(-2<sup>15</sup>) to 𝔽(2<sup>15</sup> - 1).</dd>\n      </dl>\n      <emu-alg>\n        1. Let _number_ be ? ToNumber(_argument_).\n        1. If _number_ is not finite or _number_ is either *+0*<sub>𝔽</sub> or *-0*<sub>𝔽</sub>, return *+0*<sub>𝔽</sub>.\n        1. Let _int_ be truncate(ℝ(_number_)).\n        1. Let _int16bit_ be _int_ modulo 2<sup>16</sup>.\n        1. If _int16bit_ ≥ 2<sup>15</sup>, return 𝔽(_int16bit_ - 2<sup>16</sup>); otherwise return 𝔽(_int16bit_).\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-touint16\" type=\"abstract operation\">\n      <h1>\n        ToUint16 (\n          _argument_: an ECMAScript language value,\n        ): either a normal completion containing an integral Number or a throw completion\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It converts _argument_ to one of 2<sup>16</sup> integral Number values in the inclusive interval from *+0*<sub>𝔽</sub> to 𝔽(2<sup>16</sup> - 1).</dd>\n      </dl>\n      <emu-alg>\n        1. Let _number_ be ? ToNumber(_argument_).\n        1. If _number_ is not finite or _number_ is either *+0*<sub>𝔽</sub> or *-0*<sub>𝔽</sub>, return *+0*<sub>𝔽</sub>.\n        1. Let _int_ be truncate(ℝ(_number_)).\n        1. [id=\"step-touint16-mod\"] Let _int16bit_ be _int_ modulo 2<sup>16</sup>.\n        1. Return 𝔽(_int16bit_).\n      </emu-alg>\n      <emu-note>\n        <p>Given the above definition of ToUint16:</p>\n        <ul>\n          <li>\n            The substitution of 2<sup>16</sup> for 2<sup>32</sup> in step <emu-xref href=\"#step-touint16-mod\"></emu-xref> is the only difference between ToUint32 and ToUint16.\n          </li>\n          <li>\n            ToUint16 maps *-0*<sub>𝔽</sub> to *+0*<sub>𝔽</sub>.\n          </li>\n        </ul>\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-toint8\" type=\"abstract operation\">\n      <h1>\n        ToInt8 (\n          _argument_: an ECMAScript language value,\n        ): either a normal completion containing an integral Number or a throw completion\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It converts _argument_ to one of 2<sup>8</sup> integral Number values in the inclusive interval from *-128*<sub>𝔽</sub> to *127*<sub>𝔽</sub>.</dd>\n      </dl>\n      <emu-alg>\n        1. Let _number_ be ? ToNumber(_argument_).\n        1. If _number_ is not finite or _number_ is either *+0*<sub>𝔽</sub> or *-0*<sub>𝔽</sub>, return *+0*<sub>𝔽</sub>.\n        1. Let _int_ be truncate(ℝ(_number_)).\n        1. Let _int8bit_ be _int_ modulo 2<sup>8</sup>.\n        1. If _int8bit_ ≥ 2<sup>7</sup>, return 𝔽(_int8bit_ - 2<sup>8</sup>); otherwise return 𝔽(_int8bit_).\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-touint8\" type=\"abstract operation\">\n      <h1>\n        ToUint8 (\n          _argument_: an ECMAScript language value,\n        ): either a normal completion containing an integral Number or a throw completion\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It converts _argument_ to one of 2<sup>8</sup> integral Number values in the inclusive interval from *+0*<sub>𝔽</sub> to *255*<sub>𝔽</sub>.</dd>\n      </dl>\n      <emu-alg>\n        1. Let _number_ be ? ToNumber(_argument_).\n        1. If _number_ is not finite or _number_ is either *+0*<sub>𝔽</sub> or *-0*<sub>𝔽</sub>, return *+0*<sub>𝔽</sub>.\n        1. Let _int_ be truncate(ℝ(_number_)).\n        1. Let _int8bit_ be _int_ modulo 2<sup>8</sup>.\n        1. Return 𝔽(_int8bit_).\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-touint8clamp\" type=\"abstract operation\">\n      <h1>\n        ToUint8Clamp (\n          _argument_: an ECMAScript language value,\n        ): either a normal completion containing an integral Number or a throw completion\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It clamps and rounds _argument_ to one of 2<sup>8</sup> integral Number values in the inclusive interval from *+0*<sub>𝔽</sub> to *255*<sub>𝔽</sub>.</dd>\n      </dl>\n      <emu-alg>\n        1. Let _number_ be ? ToNumber(_argument_).\n        1. If _number_ is *NaN*, return *+0*<sub>𝔽</sub>.\n        1. Let _mv_ be the extended mathematical value of _number_.\n        1. Let _clamped_ be the result of clamping _mv_ between 0 and 255.\n        1. Let _f_ be floor(_clamped_).\n        1. If _clamped_ &lt; _f_ + 0.5, return 𝔽(_f_).\n        1. If _clamped_ > _f_ + 0.5, return 𝔽(_f_ + 1).\n        1. If _f_ is even, return 𝔽(_f_). Otherwise, return 𝔽(_f_ + 1).\n      </emu-alg>\n      <emu-note>\n        <p>Unlike most other ECMAScript integer conversion operations, ToUint8Clamp rounds rather than truncates non-integral values. It also uses “round half to even” tie-breaking, which differs from the “round half up” tie-breaking of <emu-xref href=\"#sec-math.round\">`Math.round`</emu-xref>.</p>\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-tobigint\" type=\"abstract operation\">\n      <h1>\n        ToBigInt (\n          _argument_: an ECMAScript language value,\n        ): either a normal completion containing a BigInt or a throw completion\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It converts _argument_ to a BigInt value, or throws if an implicit conversion from Number would be required.</dd>\n      </dl>\n      <emu-alg>\n        1. Let _prim_ be ? ToPrimitive(_argument_, ~number~).\n        1. Return the value that _prim_ corresponds to in <emu-xref href=\"#table-tobigint\"></emu-xref>.\n      </emu-alg>\n      <emu-table id=\"table-tobigint\" caption=\"BigInt Conversions\">\n        <table>\n          <thead>\n            <tr>\n              <th>\n                Argument Type\n              </th>\n              <th>\n                Result\n              </th>\n            </tr>\n          </thead>\n          <tr>\n            <td>\n              Undefined\n            </td>\n            <td>\n              Throw a *TypeError* exception.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Null\n            </td>\n            <td>\n              Throw a *TypeError* exception.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Boolean\n            </td>\n            <td>\n              Return `1n` if _prim_ is *true* and `0n` if _prim_ is *false*.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              BigInt\n            </td>\n            <td>\n              Return _prim_.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Number\n            </td>\n            <td>\n              Throw a *TypeError* exception.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              String\n            </td>\n            <td>\n              <emu-alg>\n                1. Let _n_ be StringToBigInt(_prim_).\n                1. If _n_ is *undefined*, throw a *SyntaxError* exception.\n                1. Return _n_.\n              </emu-alg>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Symbol\n            </td>\n            <td>\n              Throw a *TypeError* exception.\n            </td>\n          </tr>\n        </table>\n      </emu-table>\n    </emu-clause>\n\n    <emu-clause id=\"sec-stringtobigint\" type=\"abstract operation\">\n      <h1>\n        StringToBigInt (\n          _str_: a String,\n        ): a BigInt or *undefined*\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-alg>\n        1. Let _literal_ be ParseText(_str_, |StringIntegerLiteral|).\n        1. If _literal_ is a List of errors, return *undefined*.\n        1. Let _mv_ be the MV of _literal_.\n        1. Assert: _mv_ is an integer.\n        1. Return ℤ(_mv_).\n      </emu-alg>\n\n      <emu-clause id=\"sec-stringintegerliteral-grammar\">\n        <h1>StringIntegerLiteral Grammar</h1>\n        <p>StringToBigInt uses the following grammar.</p>\n        <h2>Syntax</h2>\n        <emu-grammar type=\"definition\">\n          StringIntegerLiteral :::\n            StrWhiteSpace?\n            StrWhiteSpace? StrIntegerLiteral StrWhiteSpace?\n\n          StrIntegerLiteral :::\n            SignedInteger[~Sep]\n            NonDecimalIntegerLiteral[~Sep]\n        </emu-grammar>\n      </emu-clause>\n\n      <emu-clause id=\"sec-runtime-semantics-mv-for-stringintegerliteral\">\n        <h1>Runtime Semantics: MV</h1>\n        <ul>\n          <li>\n            The MV of <emu-grammar>StringIntegerLiteral ::: StrWhiteSpace?</emu-grammar> is 0.\n          </li>\n          <li>\n            The MV of <emu-grammar>StringIntegerLiteral ::: StrWhiteSpace? StrIntegerLiteral StrWhiteSpace?</emu-grammar> is the MV of |StrIntegerLiteral|.\n          </li>\n        </ul>\n      </emu-clause>\n    </emu-clause>\n\n    <emu-clause id=\"sec-tobigint64\" type=\"abstract operation\">\n      <h1>\n        ToBigInt64 (\n          _argument_: an ECMAScript language value,\n        ): either a normal completion containing a BigInt or a throw completion\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It converts _argument_ to one of 2<sup>64</sup> BigInt values in the inclusive interval from ℤ(-2<sup>63</sup>) to ℤ(2<sup>63</sup> - 1).</dd>\n      </dl>\n      <emu-alg>\n        1. Let _n_ be ? ToBigInt(_argument_).\n        1. Let _int64bit_ be ℝ(_n_) modulo 2<sup>64</sup>.\n        1. If _int64bit_ ≥ 2<sup>63</sup>, return ℤ(_int64bit_ - 2<sup>64</sup>); otherwise return ℤ(_int64bit_).\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-tobiguint64\" type=\"abstract operation\">\n      <h1>\n        ToBigUint64 (\n          _argument_: an ECMAScript language value,\n        ): either a normal completion containing a BigInt or a throw completion\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It converts _argument_ to one of 2<sup>64</sup> BigInt values in the inclusive interval from *0*<sub>ℤ</sub> to ℤ(2<sup>64</sup> - 1).</dd>\n      </dl>\n      <emu-alg>\n        1. Let _n_ be ? ToBigInt(_argument_).\n        1. Let _int64bit_ be ℝ(_n_) modulo 2<sup>64</sup>.\n        1. Return ℤ(_int64bit_).\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-tostring\" oldids=\"table-tostring-conversions\" type=\"abstract operation\">\n      <h1>\n        ToString (\n          _argument_: an ECMAScript language value,\n        ): either a normal completion containing a String or a throw completion\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It converts _argument_ to a value of type String.</dd>\n      </dl>\n      <emu-alg>\n        1. If _argument_ is a String, return _argument_.\n        1. If _argument_ is a Symbol, throw a *TypeError* exception.\n        1. If _argument_ is *undefined*, return *\"undefined\"*.\n        1. If _argument_ is *null*, return *\"null\"*.\n        1. If _argument_ is *true*, return *\"true\"*.\n        1. If _argument_ is *false*, return *\"false\"*.\n        1. If _argument_ is a Number, return Number::toString(_argument_, 10).\n        1. If _argument_ is a BigInt, return BigInt::toString(_argument_, 10).\n        1. Assert: _argument_ is an Object.\n        1. Let _primValue_ be ? ToPrimitive(_argument_, ~string~).\n        1. Assert: _primValue_ is not an Object.\n        1. Return ? ToString(_primValue_).\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-toobject\" type=\"abstract operation\">\n      <h1>\n        ToObject (\n          _argument_: an ECMAScript language value,\n        ): either a normal completion containing an Object or a throw completion\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It converts _argument_ to a value of type Object according to <emu-xref href=\"#table-toobject-conversions\"></emu-xref>:</dd>\n      </dl>\n      <emu-table id=\"table-toobject-conversions\" caption=\"ToObject Conversions\" oldids=\"table-13\">\n        <table>\n          <thead>\n            <tr>\n              <th>\n                Argument Type\n              </th>\n              <th>\n                Result\n              </th>\n            </tr>\n          </thead>\n          <tr>\n            <td>\n              Undefined\n            </td>\n            <td>\n              Throw a *TypeError* exception.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Null\n            </td>\n            <td>\n              Throw a *TypeError* exception.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Boolean\n            </td>\n            <td>\n              Return a new Boolean object whose [[BooleanData]] internal slot is set to _argument_. See <emu-xref href=\"#sec-boolean-objects\"></emu-xref> for a description of Boolean objects.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Number\n            </td>\n            <td>\n              Return a new Number object whose [[NumberData]] internal slot is set to _argument_. See <emu-xref href=\"#sec-number-objects\"></emu-xref> for a description of Number objects.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              String\n            </td>\n            <td>\n              Return a new String object whose [[StringData]] internal slot is set to _argument_. See <emu-xref href=\"#sec-string-objects\"></emu-xref> for a description of String objects.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Symbol\n            </td>\n            <td>\n              Return a new Symbol object whose [[SymbolData]] internal slot is set to _argument_. See <emu-xref href=\"#sec-symbol-objects\"></emu-xref> for a description of Symbol objects.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              BigInt\n            </td>\n            <td>\n              Return a new BigInt object whose [[BigIntData]] internal slot is set to _argument_. See <emu-xref href=\"#sec-bigint-objects\"></emu-xref> for a description of BigInt objects.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Object\n            </td>\n            <td>\n              Return _argument_.\n            </td>\n          </tr>\n        </table>\n      </emu-table>\n    </emu-clause>\n\n    <emu-clause id=\"sec-topropertykey\" type=\"abstract operation\">\n      <h1>\n        ToPropertyKey (\n          _argument_: an ECMAScript language value,\n        ): either a normal completion containing a property key or a throw completion\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It converts _argument_ to a value that can be used as a property key.</dd>\n      </dl>\n      <emu-alg>\n        1. Let _key_ be ? ToPrimitive(_argument_, ~string~).\n        1. If _key_ is a Symbol, then\n          1. Return _key_.\n        1. Return ! ToString(_key_).\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-tolength\" type=\"abstract operation\">\n      <h1>\n        ToLength (\n          _argument_: an ECMAScript language value,\n        ): either a normal completion containing a non-negative integral Number or a throw completion\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It clamps and truncates _argument_ to a non-negative integral Number suitable for use as the length of an array-like object.</dd>\n      </dl>\n      <emu-alg>\n        1. Let _len_ be ? ToIntegerOrInfinity(_argument_).\n        1. If _len_ ≤ 0, return *+0*<sub>𝔽</sub>.\n        1. Return 𝔽(min(_len_, 2<sup>53</sup> - 1)).\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-canonicalnumericindexstring\" type=\"abstract operation\">\n      <h1>\n        CanonicalNumericIndexString (\n          _argument_: a String,\n        ): a Number or *undefined*\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>If _argument_ is either *\"-0\"* or exactly matches ToString(_n_) for some Number value _n_, it returns the respective Number value. Otherwise, it returns *undefined*.</dd>\n      </dl>\n      <emu-alg>\n        1. If _argument_ is *\"-0\"*, return *-0*<sub>𝔽</sub>.\n        1. Let _n_ be ! ToNumber(_argument_).\n        1. If ! ToString(_n_) is _argument_, return _n_.\n        1. Return *undefined*.\n      </emu-alg>\n      <p>A <dfn variants=\"canonical numeric strings\">canonical numeric string</dfn> is any String value for which the CanonicalNumericIndexString abstract operation does not return *undefined*.</p>\n    </emu-clause>\n\n    <emu-clause id=\"sec-toindex\" type=\"abstract operation\">\n      <h1>\n        ToIndex (\n          _value_: an ECMAScript language value,\n        ): either a normal completion containing a non-negative integer or a throw completion\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It converts _value_ to an integer and returns that integer if it is non-negative and corresponds with an integer index. Otherwise, it throws an exception.</dd>\n      </dl>\n      <emu-alg>\n        1. Let _integer_ be ? ToIntegerOrInfinity(_value_).\n        1. If _integer_ is not in the inclusive interval from 0 to 2<sup>53</sup> - 1, throw a *RangeError* exception.\n        1. Return _integer_.\n      </emu-alg>\n    </emu-clause>\n  </emu-clause>\n\n  <emu-clause id=\"sec-testing-and-comparison-operations\">\n    <h1>Testing and Comparison Operations</h1>\n\n    <emu-clause id=\"sec-requireobjectcoercible\" type=\"abstract operation\">\n      <h1>\n        RequireObjectCoercible (\n          _argument_: an ECMAScript language value,\n        ): either a normal completion containing an ECMAScript language value or a throw completion\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It throws an error if _argument_ is a value that cannot be converted to an Object using ToObject. It is defined by <emu-xref href=\"#table-requireobjectcoercible-results\"></emu-xref>:</dd>\n      </dl>\n      <emu-table id=\"table-requireobjectcoercible-results\" caption=\"RequireObjectCoercible Results\" oldids=\"table-14\">\n        <table>\n          <thead>\n            <tr>\n              <th>\n                Argument Type\n              </th>\n              <th>\n                Result\n              </th>\n            </tr>\n          </thead>\n          <tr>\n            <td>\n              Undefined\n            </td>\n            <td>\n              Throw a *TypeError* exception.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Null\n            </td>\n            <td>\n              Throw a *TypeError* exception.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Boolean\n            </td>\n            <td>\n              Return _argument_.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Number\n            </td>\n            <td>\n              Return _argument_.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              String\n            </td>\n            <td>\n              Return _argument_.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Symbol\n            </td>\n            <td>\n              Return _argument_.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              BigInt\n            </td>\n            <td>\n              Return _argument_.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Object\n            </td>\n            <td>\n              Return _argument_.\n            </td>\n          </tr>\n        </table>\n      </emu-table>\n    </emu-clause>\n\n    <emu-clause id=\"sec-isarray\" type=\"abstract operation\">\n      <h1>\n        IsArray (\n          _argument_: an ECMAScript language value,\n        ): either a normal completion containing a Boolean or a throw completion\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-alg>\n        1. If _argument_ is not an Object, return *false*.\n        1. If _argument_ is an Array exotic object, return *true*.\n        1. If _argument_ is a Proxy exotic object, then\n          1. Perform ? ValidateNonRevokedProxy(_argument_).\n          1. Let _proxyTarget_ be _argument_.[[ProxyTarget]].\n          1. Return ? IsArray(_proxyTarget_).\n        1. Return *false*.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-iscallable\" type=\"abstract operation\">\n      <h1>\n        IsCallable (\n          _argument_: an ECMAScript language value,\n        ): a Boolean\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It determines if _argument_ is a callable function with a [[Call]] internal method.</dd>\n      </dl>\n      <emu-alg>\n        1. If _argument_ is not an Object, return *false*.\n        1. If _argument_ has a [[Call]] internal method, return *true*.\n        1. Return *false*.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-isconstructor\" type=\"abstract operation\">\n      <h1>\n        IsConstructor (\n          _argument_: an ECMAScript language value,\n        ): a Boolean\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It determines if _argument_ is a function object with a [[Construct]] internal method.</dd>\n      </dl>\n      <emu-alg>\n        1. If _argument_ is not an Object, return *false*.\n        1. If _argument_ has a [[Construct]] internal method, return *true*.\n        1. Return *false*.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-isextensible-o\" type=\"abstract operation\">\n      <h1>\n        IsExtensible (\n          _O_: an Object,\n        ): either a normal completion containing a Boolean or a throw completion\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It is used to determine whether additional properties can be added to _O_.</dd>\n      </dl>\n      <emu-alg>\n        1. Return ? <emu-meta effects=\"user-code\">_O_.[[IsExtensible]]</emu-meta>().\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-isregexp\" type=\"abstract operation\">\n      <h1>\n        IsRegExp (\n          _argument_: an ECMAScript language value,\n        ): either a normal completion containing a Boolean or a throw completion\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-alg>\n        1. If _argument_ is not an Object, return *false*.\n        1. Let _matcher_ be ? Get(_argument_, %Symbol.match%).\n        1. If _matcher_ is not *undefined*, return ToBoolean(_matcher_).\n        1. If _argument_ has a [[RegExpMatcher]] internal slot, return *true*.\n        1. Return *false*.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-isstringwellformedunicode\" type=\"abstract operation\">\n      <h1>\n        Static Semantics: IsStringWellFormedUnicode (\n          _string_: a String,\n        ): a Boolean\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It interprets _string_ as a sequence of UTF-16 encoded code points, as described in <emu-xref href=\"#sec-ecmascript-language-types-string-type\"></emu-xref>, and determines whether it is a <a href=\"http://www.unicode.org/glossary/#well_formed_code_unit_sequence\">well formed</a> UTF-16 sequence.</dd>\n      </dl>\n      <emu-alg>\n        1. Let _len_ be the length of _string_.\n        1. Let _k_ be 0.\n        1. Repeat, while _k_ &lt; _len_,\n          1. Let _cp_ be CodePointAt(_string_, _k_).\n          1. If _cp_.[[IsUnpairedSurrogate]] is *true*, return *false*.\n          1. Set _k_ to _k_ + _cp_.[[CodeUnitCount]].\n        1. Return *true*.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-sametype\" type=\"abstract operation\">\n      <h1>\n        SameType (\n          _x_: an ECMAScript language value,\n          _y_: an ECMAScript language value,\n        ): a Boolean\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It determines whether or not the two arguments are the same type.</dd>\n      </dl>\n      <emu-alg>\n        1. If _x_ is *undefined* and _y_ is *undefined*, return *true*.\n        1. If _x_ is *null* and _y_ is *null*, return *true*.\n        1. If _x_ is a Boolean and _y_ is a Boolean, return *true*.\n        1. If _x_ is a Number and _y_ is a Number, return *true*.\n        1. If _x_ is a BigInt and _y_ is a BigInt, return *true*.\n        1. If _x_ is a Symbol and _y_ is a Symbol, return *true*.\n        1. If _x_ is a String and _y_ is a String, return *true*.\n        1. If _x_ is an Object and _y_ is an Object, return *true*.\n        1. Return *false*.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-samevalue\" type=\"abstract operation\">\n      <h1>\n        SameValue (\n          _x_: an ECMAScript language value,\n          _y_: an ECMAScript language value,\n        ): a Boolean\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It determines whether or not the two arguments are the same value.</dd>\n      </dl>\n      <emu-alg>\n        1. If SameType(_x_, _y_) is *false*, return *false*.\n        1. If _x_ is a Number, then\n          1. Return Number::sameValue(_x_, _y_).\n        1. Return SameValueNonNumber(_x_, _y_).\n      </emu-alg>\n      <emu-note>\n        <p>This algorithm differs from the IsStrictlyEqual Algorithm by treating all *NaN* values as equivalent and by differentiating *+0*<sub>𝔽</sub> from *-0*<sub>𝔽</sub>.</p>\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-samevaluezero\" type=\"abstract operation\">\n      <h1>\n        SameValueZero (\n          _x_: an ECMAScript language value,\n          _y_: an ECMAScript language value,\n        ): a Boolean\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It determines whether or not the two arguments are the same value (ignoring the difference between *+0*<sub>𝔽</sub> and *-0*<sub>𝔽</sub>).</dd>\n      </dl>\n      <emu-alg>\n        1. If SameType(_x_, _y_) is *false*, return *false*.\n        1. If _x_ is a Number, then\n          1. Return Number::sameValueZero(_x_, _y_).\n        1. Return SameValueNonNumber(_x_, _y_).\n      </emu-alg>\n      <emu-note>\n        <p>SameValueZero differs from SameValue only in that it treats *+0*<sub>𝔽</sub> and *-0*<sub>𝔽</sub> as equivalent.</p>\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-samevaluenonnumber\" type=\"abstract operation\" oldids=\"sec-samevaluenonnumeric\">\n      <h1>\n        SameValueNonNumber (\n          _x_: an ECMAScript language value, but not a Number,\n          _y_: an ECMAScript language value, but not a Number,\n        ): a Boolean\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-alg>\n        1. Assert: SameType(_x_, _y_) is *true*.\n        1. If _x_ is either *null* or *undefined*, return *true*.\n        1. If _x_ is a BigInt, then\n          1. Return BigInt::equal(_x_, _y_).\n        1. If _x_ is a String, then\n          1. If _x_ and _y_ have the same length and the same code units in the same positions, return *true*; otherwise, return *false*.\n        1. If _x_ is a Boolean, then\n          1. If _x_ and _y_ are both *true* or both *false*, return *true*; otherwise, return *false*.\n        1. NOTE: All other ECMAScript language values are compared by identity.\n        1. If _x_ is _y_, return *true*; otherwise, return *false*.\n      </emu-alg>\n      <emu-note>\n        For expository purposes, some cases are handled separately within this algorithm even if it is unnecessary to do so.\n      </emu-note>\n      <emu-note>\n        The specifics of what \"_x_ is _y_\" means are detailed in <emu-xref href=\"#sec-identity\"></emu-xref>.\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-islessthan\" type=\"abstract operation\" oldids=\"sec-abstract-relational-comparison\">\n      <h1>\n        IsLessThan (\n          _x_: an ECMAScript language value,\n          _y_: an ECMAScript language value,\n          _LeftFirst_: a Boolean,\n        ): either a normal completion containing either a Boolean or *undefined*, or a throw completion\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It provides the semantics for the comparison _x_ &lt; _y_, returning *true*, *false*, or *undefined* (which indicates that at least one operand is *NaN*). The _LeftFirst_ flag is used to control the order in which operations with potentially visible side-effects are performed upon _x_ and _y_. It is necessary because ECMAScript specifies left to right evaluation of expressions. If _LeftFirst_ is *true*, the _x_ parameter corresponds to an expression that occurs to the left of the _y_ parameter's corresponding expression. If _LeftFirst_ is *false*, the reverse is the case and operations must be performed upon _y_ before _x_.</dd>\n      </dl>\n      <emu-alg>\n        1. If _LeftFirst_ is *true*, then\n          1. Let _px_ be ? ToPrimitive(_x_, ~number~).\n          1. Let _py_ be ? ToPrimitive(_y_, ~number~).\n        1. Else,\n          1. NOTE: The order of evaluation needs to be reversed to preserve left to right evaluation.\n          1. Let _py_ be ? ToPrimitive(_y_, ~number~).\n          1. Let _px_ be ? ToPrimitive(_x_, ~number~).\n        1. [id=\"step-arc-string-check\"] If _px_ is a String and _py_ is a String, then\n          1. Let _lx_ be the length of _px_.\n          1. Let _ly_ be the length of _py_.\n          1. For each integer _i_ such that 0 ≤ _i_ &lt; min(_lx_, _ly_), in ascending order, do\n            1. Let _cx_ be the numeric value of the code unit at index _i_ within _px_.\n            1. Let _cy_ be the numeric value of the code unit at index _i_ within _py_.\n            1. If _cx_ &lt; _cy_, return *true*.\n            1. If _cx_ > _cy_, return *false*.\n          1. If _lx_ &lt; _ly_, return *true*. Otherwise, return *false*.\n        1. Else,\n          1. If _px_ is a BigInt and _py_ is a String, then\n            1. Let _ny_ be StringToBigInt(_py_).\n            1. If _ny_ is *undefined*, return *undefined*.\n            1. Return BigInt::lessThan(_px_, _ny_).\n          1. If _px_ is a String and _py_ is a BigInt, then\n            1. Let _nx_ be StringToBigInt(_px_).\n            1. If _nx_ is *undefined*, return *undefined*.\n            1. Return BigInt::lessThan(_nx_, _py_).\n          1. NOTE: Because _px_ and _py_ are primitive values, evaluation order is not important.\n          1. Let _nx_ be ? <emu-meta suppress-effects=\"user-code\">ToNumeric(_px_)</emu-meta>.\n          1. Let _ny_ be ? <emu-meta suppress-effects=\"user-code\">ToNumeric(_py_)</emu-meta>.\n          1. If SameType(_nx_, _ny_) is *true*, then\n            1. If _nx_ is a Number, then\n              1. Return Number::lessThan(_nx_, _ny_).\n            1. Else,\n              1. Assert: _nx_ is a BigInt.\n              1. Return BigInt::lessThan(_nx_, _ny_).\n          1. Assert: _nx_ is a BigInt and _ny_ is a Number, or _nx_ is a Number and _ny_ is a BigInt.\n          1. If _nx_ or _ny_ is *NaN*, return *undefined*.\n          1. If _nx_ is *-∞*<sub>𝔽</sub> or _ny_ is *+∞*<sub>𝔽</sub>, return *true*.\n          1. If _nx_ is *+∞*<sub>𝔽</sub> or _ny_ is *-∞*<sub>𝔽</sub>, return *false*.\n          1. If ℝ(_nx_) &lt; ℝ(_ny_), return *true*; otherwise return *false*.\n      </emu-alg>\n      <emu-note>\n        <p>Step <emu-xref href=\"#step-arc-string-check\"></emu-xref> differs from step <emu-xref href=\"#step-binary-op-string-check\"></emu-xref> in the algorithm that handles the addition operator `+` (<emu-xref href=\"#sec-applystringornumericbinaryoperator\"></emu-xref>) by using the logical-and operation instead of the logical-or operation.</p>\n      </emu-note>\n      <emu-note>\n        <p>The comparison of Strings uses a simple lexicographic ordering on sequences of UTF-16 code unit values. There is no attempt to use the more complex, semantically oriented definitions of character or string equality and collating order defined in the Unicode specification. Therefore String values that are canonically equal according to the Unicode Standard but not in the same normalization form could test as unequal. Also note that lexicographic ordering by <em>code unit</em> differs from ordering by <em>code point</em> for Strings containing surrogate pairs.</p>\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-islooselyequal\" type=\"abstract operation\" oldids=\"sec-abstract-equality-comparison\">\n      <h1>\n        IsLooselyEqual (\n          _x_: an ECMAScript language value,\n          _y_: an ECMAScript language value,\n        ): either a normal completion containing a Boolean or a throw completion\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It provides the semantics for the `==` operator.</dd>\n      </dl>\n      <emu-alg>\n        1. If SameType(_x_, _y_) is *true*, then\n          1. Return IsStrictlyEqual(_x_, _y_).\n        1. If _x_ is *null* and _y_ is *undefined*, return *true*.\n        1. If _x_ is *undefined* and _y_ is *null*, return *true*.\n        1. [id=\"step-abstract-equality-comparison-web-compat-insertion-point\"] NOTE: This step is replaced in section <emu-xref href=\"#sec-IsHTMLDDA-internal-slot-aec\"></emu-xref>.\n        1. If _x_ is a Number and _y_ is a String, return ! IsLooselyEqual(_x_, ! ToNumber(_y_)).\n        1. If _x_ is a String and _y_ is a Number, return ! IsLooselyEqual(! ToNumber(_x_), _y_).\n        1. If _x_ is a BigInt and _y_ is a String, then\n          1. Let _n_ be StringToBigInt(_y_).\n          1. If _n_ is *undefined*, return *false*.\n          1. Return ! IsLooselyEqual(_x_, _n_).\n        1. If _x_ is a String and _y_ is a BigInt, return ! IsLooselyEqual(_y_, _x_).\n        1. If _x_ is a Boolean, return ! IsLooselyEqual(! ToNumber(_x_), _y_).\n        1. If _y_ is a Boolean, return ! IsLooselyEqual(_x_, ! ToNumber(_y_)).\n        1. If _x_ is either a String, a Number, a BigInt, or a Symbol and _y_ is an Object, return ! IsLooselyEqual(_x_, ? ToPrimitive(_y_)).\n        1. If _x_ is an Object and _y_ is either a String, a Number, a BigInt, or a Symbol, return ! IsLooselyEqual(? ToPrimitive(_x_), _y_).\n        1. If _x_ is a BigInt and _y_ is a Number, or if _x_ is a Number and _y_ is a BigInt, then\n          1. If _x_ is not finite or _y_ is not finite, return *false*.\n          1. If ℝ(_x_) = ℝ(_y_), return *true*; otherwise return *false*.\n        1. Return *false*.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-isstrictlyequal\" type=\"abstract operation\" oldids=\"sec-strict-equality-comparison\">\n      <h1>\n        IsStrictlyEqual (\n          _x_: an ECMAScript language value,\n          _y_: an ECMAScript language value,\n        ): a Boolean\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It provides the semantics for the `===` operator.</dd>\n      </dl>\n      <emu-alg>\n        1. If SameType(_x_, _y_) is *false*, return *false*.\n        1. If _x_ is a Number, then\n          1. Return Number::equal(_x_, _y_).\n        1. Return SameValueNonNumber(_x_, _y_).\n      </emu-alg>\n      <emu-note>\n        <p>This algorithm differs from the SameValue Algorithm in its treatment of signed zeroes and NaNs.</p>\n      </emu-note>\n    </emu-clause>\n  </emu-clause>\n\n  <emu-clause id=\"sec-operations-on-objects\">\n    <h1>Operations on Objects</h1>\n\n    <emu-clause id=\"sec-makebasicobject\" type=\"abstract operation\">\n      <h1>\n        MakeBasicObject (\n          _internalSlotsList_: a List of internal slot names,\n        ): an Object\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It is the source of all ECMAScript objects that are created algorithmically, including both ordinary objects and exotic objects. It factors out common steps used in creating all objects, and centralizes object creation.</dd>\n      </dl>\n\n      <emu-alg>\n        1. Set _internalSlotsList_ to the list-concatenation of _internalSlotsList_ and « [[PrivateElements]] ».\n        1. Let _obj_ be a newly created object with an internal slot for each name in _internalSlotsList_.\n        1. Set _obj_.[[PrivateElements]] to a new empty List.\n        1. Set _obj_'s essential internal methods to the default ordinary object definitions specified in <emu-xref href=\"#sec-ordinary-object-internal-methods-and-internal-slots\"></emu-xref>.\n        1. Assert: If the caller will not be overriding both _obj_'s [[GetPrototypeOf]] and [[SetPrototypeOf]] essential internal methods, then _internalSlotsList_ contains [[Prototype]].\n        1. Assert: If the caller will not be overriding all of _obj_'s [[SetPrototypeOf]], [[IsExtensible]], and [[PreventExtensions]] essential internal methods, then _internalSlotsList_ contains [[Extensible]].\n        1. If _internalSlotsList_ contains [[Extensible]], set _obj_.[[Extensible]] to *true*.\n        1. Return _obj_.\n      </emu-alg>\n\n      <emu-note>\n        <p>Within this specification, exotic objects are created in abstract operations such as ArrayCreate and BoundFunctionCreate by first calling MakeBasicObject to obtain a basic, foundational object, and then overriding some or all of that object's internal methods. In order to encapsulate exotic object creation, the object's essential internal methods are never modified outside those operations.</p>\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-get-o-p\" type=\"abstract operation\">\n      <h1>\n        Get (\n          _O_: an Object,\n          _P_: a property key,\n        ): either a normal completion containing an ECMAScript language value or a throw completion\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It is used to retrieve the value of a specific property of an object.</dd>\n      </dl>\n      <emu-alg>\n        1. Return ? <emu-meta effects=\"user-code\">_O_.[[Get]]</emu-meta>(_P_, _O_).\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-getv\" type=\"abstract operation\">\n      <h1>\n        GetV (\n          _V_: an ECMAScript language value,\n          _P_: a property key,\n        ): either a normal completion containing an ECMAScript language value or a throw completion\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It is used to retrieve the value of a specific property of an ECMAScript language value. If the value is not an object, the property lookup is performed using a wrapper object appropriate for the type of the value.</dd>\n      </dl>\n      <emu-alg>\n        1. Let _O_ be ? ToObject(_V_).\n        1. Return ? <emu-meta effects=\"user-code\">_O_.[[Get]]</emu-meta>(_P_, _V_).\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-set-o-p-v-throw\" type=\"abstract operation\">\n      <h1>\n        Set (\n          _O_: an Object,\n          _P_: a property key,\n          _V_: an ECMAScript language value,\n          _Throw_: a Boolean,\n        ): either a normal completion containing ~unused~ or a throw completion\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It is used to set the value of a specific property of an object. _V_ is the new value for the property.</dd>\n      </dl>\n      <emu-alg>\n        1. Let _success_ be ? <emu-meta effects=\"user-code\">_O_.[[Set]]</emu-meta>(_P_, _V_, _O_).\n        1. If _success_ is *false* and _Throw_ is *true*, throw a *TypeError* exception.\n        1. Return ~unused~.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-createdataproperty\" type=\"abstract operation\">\n      <h1>\n        CreateDataProperty (\n          _O_: an Object,\n          _P_: a property key,\n          _V_: an ECMAScript language value,\n        ): either a normal completion containing a Boolean or a throw completion\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It is used to create a new own property of an object.</dd>\n      </dl>\n      <emu-alg>\n        1. Let _newDesc_ be the PropertyDescriptor { [[Value]]: _V_, [[Writable]]: *true*, [[Enumerable]]: *true*, [[Configurable]]: *true* }.\n        1. Return ? <emu-meta effects=\"user-code\">_O_.[[DefineOwnProperty]]</emu-meta>(_P_, _newDesc_).\n      </emu-alg>\n      <emu-note>\n        <p>This abstract operation creates a property whose attributes are set to the same defaults used for properties created by the ECMAScript language assignment operator. Normally, the property will not already exist. If it does exist and is not configurable or if _O_ is not extensible, [[DefineOwnProperty]] will return *false*.</p>\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-createdatapropertyorthrow\" type=\"abstract operation\">\n      <h1>\n        CreateDataPropertyOrThrow (\n          _O_: an Object,\n          _P_: a property key,\n          _V_: an ECMAScript language value,\n        ): either a normal completion containing ~unused~ or a throw completion\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It is used to create a new own property of an object. It throws a *TypeError* exception if the requested property update cannot be performed.</dd>\n      </dl>\n      <emu-alg>\n        1. Let _success_ be ? CreateDataProperty(_O_, _P_, _V_).\n        1. If _success_ is *false*, throw a *TypeError* exception.\n        1. Return ~unused~.\n      </emu-alg>\n      <emu-note>\n        <p>This abstract operation creates a property whose attributes are set to the same defaults used for properties created by the ECMAScript language assignment operator. Normally, the property will not already exist. If it does exist and is not configurable or if _O_ is not extensible, [[DefineOwnProperty]] will return *false* causing this operation to throw a *TypeError* exception.</p>\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-createnonenumerabledatapropertyorthrow\" type=\"abstract operation\">\n      <h1>\n        CreateNonEnumerableDataPropertyOrThrow (\n          _O_: an Object,\n          _P_: a property key,\n          _V_: an ECMAScript language value,\n        ): ~unused~\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It is used to create a new non-enumerable own property of an ordinary object.</dd>\n      </dl>\n      <emu-alg>\n        1. Assert: _O_ is an ordinary, extensible object with no non-configurable properties.\n        1. Let _newDesc_ be the PropertyDescriptor { [[Value]]: _V_, [[Writable]]: *true*, [[Enumerable]]: *false*, [[Configurable]]: *true* }.\n        1. Perform ! DefinePropertyOrThrow(_O_, _P_, _newDesc_).\n        1. Return ~unused~.\n      </emu-alg>\n      <emu-note>\n        <p>This abstract operation creates a property whose attributes are set to the same defaults used for properties created by the ECMAScript language assignment operator except it is not enumerable. Normally, the property will not already exist. If it does exist, DefinePropertyOrThrow is guaranteed to complete normally.</p>\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-definepropertyorthrow\" type=\"abstract operation\">\n      <h1>\n        DefinePropertyOrThrow (\n          _O_: an Object,\n          _P_: a property key,\n          _desc_: a Property Descriptor,\n        ): either a normal completion containing ~unused~ or a throw completion\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It is used to call the [[DefineOwnProperty]] internal method of an object in a manner that will throw a *TypeError* exception if the requested property update cannot be performed.</dd>\n      </dl>\n      <emu-alg>\n        1. Let _success_ be ? <emu-meta effects=\"user-code\">_O_.[[DefineOwnProperty]]</emu-meta>(_P_, _desc_).\n        1. If _success_ is *false*, throw a *TypeError* exception.\n        1. Return ~unused~.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-deletepropertyorthrow\" type=\"abstract operation\">\n      <h1>\n        DeletePropertyOrThrow (\n          _O_: an Object,\n          _P_: a property key,\n        ): either a normal completion containing ~unused~ or a throw completion\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It is used to remove a specific own property of an object. It throws an exception if the property is not configurable.</dd>\n      </dl>\n      <emu-alg>\n        1. Let _success_ be ? <emu-meta effects=\"user-code\">_O_.[[Delete]]</emu-meta>(_P_).\n        1. If _success_ is *false*, throw a *TypeError* exception.\n        1. Return ~unused~.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-getmethod\" type=\"abstract operation\">\n      <h1>\n        GetMethod (\n          _V_: an ECMAScript language value,\n          _P_: a property key,\n        ): either a normal completion containing either a function object or *undefined*, or a throw completion\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It is used to get the value of a specific property of an ECMAScript language value when the value of the property is expected to be a function.</dd>\n      </dl>\n      <emu-alg>\n        1. Let _func_ be ? GetV(_V_, _P_).\n        1. If _func_ is either *undefined* or *null*, return *undefined*.\n        1. If IsCallable(_func_) is *false*, throw a *TypeError* exception.\n        1. Return _func_.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-hasproperty\" type=\"abstract operation\">\n      <h1>\n        HasProperty (\n          _O_: an Object,\n          _P_: a property key,\n        ): either a normal completion containing a Boolean or a throw completion\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It is used to determine whether an object has a property with the specified property key. The property may be either own or inherited.</dd>\n      </dl>\n      <emu-alg>\n        1. Return ? <emu-meta effects=\"user-code\">_O_.[[HasProperty]]</emu-meta>(_P_).\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-hasownproperty\" type=\"abstract operation\">\n      <h1>\n        HasOwnProperty (\n          _O_: an Object,\n          _P_: a property key,\n        ): either a normal completion containing a Boolean or a throw completion\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It is used to determine whether an object has an own property with the specified property key.</dd>\n      </dl>\n      <emu-alg>\n        1. Let _desc_ be ? <emu-meta effects=\"user-code\">_O_.[[GetOwnProperty]]</emu-meta>(_P_).\n        1. If _desc_ is *undefined*, return *false*.\n        1. Return *true*.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-call\" type=\"abstract operation\">\n      <h1>\n        Call (\n          _F_: an ECMAScript language value,\n          _V_: an ECMAScript language value,\n          optional _argumentsList_: a List of ECMAScript language values,\n        ): either a normal completion containing an ECMAScript language value or a throw completion\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It is used to call the [[Call]] internal method of a function object. _F_ is the function object, _V_ is an ECMAScript language value that is the *this* value of the [[Call]], and _argumentsList_ is the value passed to the corresponding argument of the internal method. If _argumentsList_ is not present, a new empty List is used as its value.</dd>\n      </dl>\n      <emu-alg>\n        1. If _argumentsList_ is not present, set _argumentsList_ to a new empty List.\n        1. If IsCallable(_F_) is *false*, throw a *TypeError* exception.\n        1. Return ? <emu-meta effects=\"user-code\">_F_.[[Call]]</emu-meta>(_V_, _argumentsList_).\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-construct\" type=\"abstract operation\">\n      <h1>\n        Construct (\n          _F_: a constructor,\n          optional _argumentsList_: a List of ECMAScript language values,\n          optional _newTarget_: a constructor,\n        ): either a normal completion containing an Object or a throw completion\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It is used to call the [[Construct]] internal method of a function object. _argumentsList_ and _newTarget_ are the values to be passed as the corresponding arguments of the internal method. If _argumentsList_ is not present, a new empty List is used as its value. If _newTarget_ is not present, _F_ is used as its value.</dd>\n      </dl>\n      <emu-alg>\n        1. If _newTarget_ is not present, set _newTarget_ to _F_.\n        1. If _argumentsList_ is not present, set _argumentsList_ to a new empty List.\n        1. Return ? <emu-meta effects=\"user-code\">_F_.[[Construct]]</emu-meta>(_argumentsList_, _newTarget_).\n      </emu-alg>\n      <emu-note>\n        <p>If _newTarget_ is not present, this operation is equivalent to: `new F(...argumentsList)`</p>\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-setintegritylevel\" type=\"abstract operation\">\n      <h1>\n        SetIntegrityLevel (\n          _O_: an Object,\n          _level_: ~sealed~ or ~frozen~,\n        ): either a normal completion containing a Boolean or a throw completion\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It is used to fix the set of own properties of an object.</dd>\n      </dl>\n      <emu-alg>\n        1. Let _status_ be ? _O_.[[PreventExtensions]]().\n        1. If _status_ is *false*, return *false*.\n        1. Let _keys_ be ? _O_.[[OwnPropertyKeys]]().\n        1. If _level_ is ~sealed~, then\n          1. For each element _k_ of _keys_, do\n            1. Perform ? DefinePropertyOrThrow(_O_, _k_, PropertyDescriptor { [[Configurable]]: *false* }).\n        1. Else,\n          1. Assert: _level_ is ~frozen~.\n          1. For each element _k_ of _keys_, do\n            1. Let _currentDesc_ be ? <emu-meta effects=\"user-code\">_O_.[[GetOwnProperty]]</emu-meta>(_k_).\n            1. If _currentDesc_ is not *undefined*, then\n              1. If IsAccessorDescriptor(_currentDesc_) is *true*, then\n                1. Let _desc_ be the PropertyDescriptor { [[Configurable]]: *false* }.\n              1. Else,\n                1. Let _desc_ be the PropertyDescriptor { [[Configurable]]: *false*, [[Writable]]: *false* }.\n              1. Perform ? DefinePropertyOrThrow(_O_, _k_, _desc_).\n        1. Return *true*.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-testintegritylevel\" type=\"abstract operation\">\n      <h1>\n        TestIntegrityLevel (\n          _O_: an Object,\n          _level_: ~sealed~ or ~frozen~,\n        ): either a normal completion containing a Boolean or a throw completion\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It is used to determine if the set of own properties of an object are fixed.</dd>\n      </dl>\n      <emu-alg>\n        1. Let _extensible_ be ? IsExtensible(_O_).\n        1. If _extensible_ is *true*, return *false*.\n        1. NOTE: If the object is extensible, none of its properties are examined.\n        1. Let _keys_ be ? _O_.[[OwnPropertyKeys]]().\n        1. For each element _k_ of _keys_, do\n          1. Let _currentDesc_ be ? <emu-meta effects=\"user-code\">_O_.[[GetOwnProperty]]</emu-meta>(_k_).\n          1. If _currentDesc_ is not *undefined*, then\n            1. If _currentDesc_.[[Configurable]] is *true*, return *false*.\n            1. If _level_ is ~frozen~ and IsDataDescriptor(_currentDesc_) is *true*, then\n              1. If _currentDesc_.[[Writable]] is *true*, return *false*.\n        1. Return *true*.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-createarrayfromlist\" type=\"abstract operation\">\n      <h1>\n        CreateArrayFromList (\n          _elements_: a List of ECMAScript language values,\n        ): an Array\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It is used to create an Array whose elements are provided by _elements_.</dd>\n      </dl>\n      <emu-alg>\n        1. Let _array_ be ! ArrayCreate(0).\n        1. Let _n_ be 0.\n        1. For each element _e_ of _elements_, do\n          1. Perform ! CreateDataPropertyOrThrow(_array_, ! ToString(𝔽(_n_)), _e_).\n          1. Set _n_ to _n_ + 1.\n        1. Return _array_.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-lengthofarraylike\" type=\"abstract operation\">\n      <h1>\n        LengthOfArrayLike (\n          _obj_: an Object,\n        ): either a normal completion containing a non-negative integer or a throw completion\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It returns the value of the *\"length\"* property of an array-like object.</dd>\n      </dl>\n      <emu-alg>\n        1. Return ℝ(? ToLength(? Get(_obj_, *\"length\"*))).\n      </emu-alg>\n      <p>An <dfn variants=\"array-like objects\">array-like object</dfn> is any object for which this operation returns a normal completion.</p>\n      <emu-note>\n        Typically, an array-like object would also have some properties with integer index names. However, that is not a requirement of this definition.\n      </emu-note>\n      <emu-note>\n        Arrays and String objects are examples of array-like objects.\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-createlistfromarraylike\" type=\"abstract operation\">\n      <h1>\n        CreateListFromArrayLike (\n          _obj_: an ECMAScript language value,\n          optional _validElementTypes_: ~all~ or ~property-key~,\n        ): either a normal completion containing a List of ECMAScript language values or a throw completion\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It is used to create a List value whose elements are provided by the indexed properties of _obj_. _validElementTypes_ indicates the types of values that are allowed as elements.</dd>\n      </dl>\n      <emu-alg>\n        1. If _validElementTypes_ is not present, set _validElementTypes_ to ~all~.\n        1. If _obj_ is not an Object, throw a *TypeError* exception.\n        1. Let _len_ be ? LengthOfArrayLike(_obj_).\n        1. Let _list_ be a new empty List.\n        1. Let _index_ be 0.\n        1. Repeat, while _index_ &lt; _len_,\n          1. Let _indexName_ be ! ToString(𝔽(_index_)).\n          1. Let _next_ be ? Get(_obj_, _indexName_).\n          1. If _validElementTypes_ is ~property-key~ and _next_ is not a property key, throw a *TypeError* exception.\n          1. Append _next_ to _list_.\n          1. Set _index_ to _index_ + 1.\n        1. Return _list_.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-invoke\" type=\"abstract operation\">\n      <h1>\n        Invoke (\n          _V_: an ECMAScript language value,\n          _P_: a property key,\n          optional _argumentsList_: a List of ECMAScript language values,\n        ): either a normal completion containing an ECMAScript language value or a throw completion\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It is used to call a method property of an ECMAScript language value. _V_ serves as both the lookup point for the property and the *this* value of the call. _argumentsList_ is the list of arguments values passed to the method. If _argumentsList_ is not present, a new empty List is used as its value.</dd>\n      </dl>\n\n      <emu-alg>\n        1. If _argumentsList_ is not present, set _argumentsList_ to a new empty List.\n        1. Let _func_ be ? GetV(_V_, _P_).\n        1. Return ? Call(_func_, _V_, _argumentsList_).\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-ordinaryhasinstance\" type=\"abstract operation\">\n      <h1>\n        OrdinaryHasInstance (\n          _C_: an ECMAScript language value,\n          _O_: an ECMAScript language value,\n        ): either a normal completion containing a Boolean or a throw completion\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It implements the default algorithm for determining if _O_ inherits from the instance object inheritance path provided by _C_.</dd>\n      </dl>\n      <emu-alg>\n        1. If IsCallable(_C_) is *false*, return *false*.\n        1. If _C_ has a [[BoundTargetFunction]] internal slot, then\n          1. Let _BC_ be _C_.[[BoundTargetFunction]].\n          1. Return ? InstanceofOperator(_O_, _BC_).\n        1. If _O_ is not an Object, return *false*.\n        1. Let _P_ be ? Get(_C_, *\"prototype\"*).\n        1. If _P_ is not an Object, throw a *TypeError* exception.\n        1. Repeat,\n          1. Set _O_ to ? <emu-meta effects=\"user-code\">_O_.[[GetPrototypeOf]]</emu-meta>().\n          1. If _O_ is *null*, return *false*.\n          1. If SameValue(_P_, _O_) is *true*, return *true*.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-speciesconstructor\" type=\"abstract operation\">\n      <h1>\n        SpeciesConstructor (\n          _O_: an Object,\n          _defaultConstructor_: a constructor,\n        ): either a normal completion containing a constructor or a throw completion\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It is used to retrieve the constructor that should be used to create new objects that are derived from _O_. _defaultConstructor_ is the constructor to use if a constructor %Symbol.species% property cannot be found starting from _O_.</dd>\n      </dl>\n      <emu-alg>\n        1. Let _C_ be ? Get(_O_, *\"constructor\"*).\n        1. If _C_ is *undefined*, return _defaultConstructor_.\n        1. If _C_ is not an Object, throw a *TypeError* exception.\n        1. Let _S_ be ? Get(_C_, %Symbol.species%).\n        1. If _S_ is either *undefined* or *null*, return _defaultConstructor_.\n        1. If IsConstructor(_S_) is *true*, return _S_.\n        1. Throw a *TypeError* exception.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-enumerableownproperties\" type=\"abstract operation\" oldids=\"sec-enumerableownpropertynames\">\n      <h1>\n        EnumerableOwnProperties (\n          _O_: an Object,\n          _kind_: ~key~, ~value~, or ~key+value~,\n        ): either a normal completion containing a List of ECMAScript language values or a throw completion\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-alg>\n        1. Let _ownKeys_ be ? <emu-meta effects=\"user-code\">_O_.[[OwnPropertyKeys]]</emu-meta>().\n        1. Let _results_ be a new empty List.\n        1. For each element _key_ of _ownKeys_, do\n          1. If _key_ is a String, then\n            1. Let _desc_ be ? <emu-meta effects=\"user-code\">_O_.[[GetOwnProperty]]</emu-meta>(_key_).\n            1. If _desc_ is not *undefined* and _desc_.[[Enumerable]] is *true*, then\n              1. If _kind_ is ~key~, then\n                1. Append _key_ to _results_.\n              1. Else,\n                1. Let _value_ be ? Get(_O_, _key_).\n                1. If _kind_ is ~value~, then\n                  1. Append _value_ to _results_.\n                1. Else,\n                  1. Assert: _kind_ is ~key+value~.\n                  1. Let _entry_ be CreateArrayFromList(« _key_, _value_ »).\n                  1. Append _entry_ to _results_.\n        1. Return _results_.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-getfunctionrealm\" type=\"abstract operation\">\n      <h1>\n        GetFunctionRealm (\n          _obj_: a function object,\n        ): either a normal completion containing a Realm Record or a throw completion\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-alg>\n        1. If _obj_ has a [[Realm]] internal slot, then\n          1. Return _obj_.[[Realm]].\n        1. If _obj_ is a bound function exotic object, then\n          1. Let _boundTargetFunction_ be _obj_.[[BoundTargetFunction]].\n          1. Return ? GetFunctionRealm(_boundTargetFunction_).\n        1. If _obj_ is a Proxy exotic object, then\n          1. Perform ? ValidateNonRevokedProxy(_obj_).\n          1. Let _proxyTarget_ be _obj_.[[ProxyTarget]].\n          1. Assert: _proxyTarget_ is a function object.\n          1. Return ? GetFunctionRealm(_proxyTarget_).\n        1. [id=\"step-getfunctionrealm-default-return\"] Return the current Realm Record.\n      </emu-alg>\n      <emu-note>\n        <p>Step <emu-xref href=\"#step-getfunctionrealm-default-return\"></emu-xref> will only be reached if _obj_ is a non-standard function exotic object that does not have a [[Realm]] internal slot.</p>\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-copydataproperties\" type=\"abstract operation\">\n      <h1>\n        CopyDataProperties (\n          _target_: an Object,\n          _source_: an ECMAScript language value,\n          _excludedItems_: a List of property keys,\n        ): either a normal completion containing ~unused~ or a throw completion\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-alg>\n        1. If _source_ is either *undefined* or *null*, return ~unused~.\n        1. Let _from_ be ! ToObject(_source_).\n        1. Let _keys_ be ? <emu-meta effects=\"user-code\">_from_.[[OwnPropertyKeys]]</emu-meta>().\n        1. For each element _nextKey_ of _keys_, do\n          1. Let _excluded_ be *false*.\n          1. For each element _e_ of _excludedItems_, do\n            1. If SameValue(_e_, _nextKey_) is *true*, then\n              1. Set _excluded_ to *true*.\n          1. If _excluded_ is *false*, then\n            1. Let _desc_ be ? <emu-meta effects=\"user-code\">_from_.[[GetOwnProperty]]</emu-meta>(_nextKey_).\n            1. If _desc_ is not *undefined* and _desc_.[[Enumerable]] is *true*, then\n              1. Let _propValue_ be ? Get(_from_, _nextKey_).\n              1. Perform ! CreateDataPropertyOrThrow(_target_, _nextKey_, _propValue_).\n        1. Return ~unused~.\n      </emu-alg>\n      <emu-note>\n        <p>The target passed in here is always a newly created object which is not directly accessible in case of an error being thrown.</p>\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-privateelementfind\" type=\"abstract operation\">\n      <h1>\n        PrivateElementFind (\n          _O_: an Object,\n          _P_: a Private Name,\n        ): a PrivateElement or ~empty~\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-alg>\n        1. If _O_.[[PrivateElements]] contains a PrivateElement _pe_ such that _pe_.[[Key]] is _P_, then\n          1. Return _pe_.\n        1. Return ~empty~.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-privatefieldadd\" type=\"abstract operation\">\n      <h1>\n        PrivateFieldAdd (\n          _O_: an Object,\n          _P_: a Private Name,\n          _value_: an ECMAScript language value,\n        ): either a normal completion containing ~unused~ or a throw completion\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-alg>\n        1. If the host is a web browser, then\n          1. Perform ? HostEnsureCanAddPrivateElement(_O_).\n        1. Let _entry_ be PrivateElementFind(_O_, _P_).\n        1. If _entry_ is not ~empty~, throw a *TypeError* exception.\n        1. Append PrivateElement { [[Key]]: _P_, [[Kind]]: ~field~, [[Value]]: _value_ } to _O_.[[PrivateElements]].\n        1. Return ~unused~.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-privatemethodoraccessoradd\" type=\"abstract operation\">\n      <h1>\n        PrivateMethodOrAccessorAdd (\n          _O_: an Object,\n          _method_: a PrivateElement,\n        ): either a normal completion containing ~unused~ or a throw completion\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-alg>\n        1. Assert: _method_.[[Kind]] is either ~method~ or ~accessor~.\n        1. If the host is a web browser, then\n          1. Perform ? HostEnsureCanAddPrivateElement(_O_).\n        1. Let _entry_ be PrivateElementFind(_O_, _method_.[[Key]]).\n        1. If _entry_ is not ~empty~, throw a *TypeError* exception.\n        1. Append _method_ to _O_.[[PrivateElements]].\n        1. Return ~unused~.\n      </emu-alg>\n      <emu-note>\n        <p>The values for private methods and accessors are shared across instances. This operation does not create a new copy of the method or accessor.</p>\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-hostensurecanaddprivateelement\" type=\"host-defined abstract operation\">\n      <h1>\n        HostEnsureCanAddPrivateElement (\n          _O_: an Object,\n        ): either a normal completion containing ~unused~ or a throw completion\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It allows host environments to prevent the addition of private elements to particular host-defined exotic objects.</dd>\n      </dl>\n      <p>An implementation of HostEnsureCanAddPrivateElement must conform to the following requirements:</p>\n      <ul>\n        <li>If _O_ is not a host-defined exotic object, this abstract operation must return NormalCompletion(~unused~) and perform no other steps.</li>\n        <li>Any two calls of this abstract operation with the same argument must return the same kind of Completion Record.</li>\n      </ul>\n      <p>The default implementation of HostEnsureCanAddPrivateElement is to return NormalCompletion(~unused~).</p>\n      <p>This abstract operation is only invoked by ECMAScript hosts that are web browsers.</p>\n    </emu-clause>\n\n    <emu-clause id=\"sec-privateget\" type=\"abstract operation\">\n      <h1>\n        PrivateGet (\n          _O_: an Object,\n          _P_: a Private Name,\n        ): either a normal completion containing an ECMAScript language value or a throw completion\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-alg>\n        1. Let _entry_ be PrivateElementFind(_O_, _P_).\n        1. If _entry_ is ~empty~, throw a *TypeError* exception.\n        1. If _entry_.[[Kind]] is either ~field~ or ~method~, then\n          1. Return _entry_.[[Value]].\n        1. Assert: _entry_.[[Kind]] is ~accessor~.\n        1. If _entry_.[[Get]] is *undefined*, throw a *TypeError* exception.\n        1. Let _getter_ be _entry_.[[Get]].\n        1. Return ? Call(_getter_, _O_).\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-privateset\" type=\"abstract operation\">\n      <h1>\n        PrivateSet (\n          _O_: an Object,\n          _P_: a Private Name,\n          _value_: an ECMAScript language value,\n        ): either a normal completion containing ~unused~ or a throw completion\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-alg>\n        1. Let _entry_ be PrivateElementFind(_O_, _P_).\n        1. If _entry_ is ~empty~, throw a *TypeError* exception.\n        1. If _entry_.[[Kind]] is ~field~, then\n          1. Set _entry_.[[Value]] to _value_.\n        1. Else if _entry_.[[Kind]] is ~method~, then\n          1. Throw a *TypeError* exception.\n        1. Else,\n          1. Assert: _entry_.[[Kind]] is ~accessor~.\n          1. If _entry_.[[Set]] is *undefined*, throw a *TypeError* exception.\n          1. Let _setter_ be _entry_.[[Set]].\n          1. Perform ? Call(_setter_, _O_, « _value_ »).\n        1. Return ~unused~.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-definefield\" type=\"abstract operation\">\n      <h1>\n        DefineField (\n          _receiver_: an Object,\n          _fieldRecord_: a ClassFieldDefinition Record,\n        ): either a normal completion containing ~unused~ or a throw completion\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-alg>\n        1. Let _fieldName_ be _fieldRecord_.[[Name]].\n        1. Let _initializer_ be _fieldRecord_.[[Initializer]].\n        1. If _initializer_ is not ~empty~, then\n          1. Let _initValue_ be ? Call(_initializer_, _receiver_).\n        1. Else,\n          1. Let _initValue_ be *undefined*.\n        1. If _fieldName_ is a Private Name, then\n          1. Perform ? PrivateFieldAdd(_receiver_, _fieldName_, _initValue_).\n        1. Else,\n          1. Assert: _fieldName_ is a property key.\n          1. Perform ? CreateDataPropertyOrThrow(_receiver_, _fieldName_, _initValue_).\n        1. Return ~unused~.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-initializeinstanceelements\" type=\"abstract operation\">\n      <h1>\n        InitializeInstanceElements (\n          _O_: an Object,\n          _constructor_: an ECMAScript function object,\n        ): either a normal completion containing ~unused~ or a throw completion\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-alg>\n        1. Let _methods_ be the value of _constructor_.[[PrivateMethods]].\n        1. For each PrivateElement _method_ of _methods_, do\n          1. Perform ? PrivateMethodOrAccessorAdd(_O_, _method_).\n        1. Let _fields_ be the value of _constructor_.[[Fields]].\n        1. For each element _fieldRecord_ of _fields_, do\n          1. Perform ? DefineField(_O_, _fieldRecord_).\n        1. Return ~unused~.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-add-value-to-keyed-group\" type=\"abstract operation\">\n      <h1>\n        AddValueToKeyedGroup (\n          _groups_: a List of Records with fields [[Key]] (an ECMAScript language value) and [[Elements]] (a List of ECMAScript language values),\n          _key_: an ECMAScript language value,\n          _value_: an ECMAScript language value,\n        ): ~unused~\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-alg>\n        1. For each Record { [[Key]], [[Elements]] } _g_ of _groups_, do\n          1. If SameValue(_g_.[[Key]], _key_) is *true*, then\n            1. Assert: Exactly one element of _groups_ meets this criterion.\n            1. Append _value_ to _g_.[[Elements]].\n            1. Return ~unused~.\n        1. Let _group_ be the Record { [[Key]]: _key_, [[Elements]]: « _value_ » }.\n        1. Append _group_ to _groups_.\n        1. Return ~unused~.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-groupby\" type=\"abstract operation\">\n      <h1>\n        GroupBy (\n          _items_: an ECMAScript language value,\n          _callback_: an ECMAScript language value,\n          _keyCoercion_: ~property~ or ~collection~,\n        ): either a normal completion containing a List of Records with fields [[Key]] (an ECMAScript language value) and [[Elements]] (a List of ECMAScript language values), or a throw completion\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-alg>\n        1. Perform ? RequireObjectCoercible(_items_).\n        1. If IsCallable(_callback_) is *false*, throw a *TypeError* exception.\n        1. Let _groups_ be a new empty List.\n        1. Let _iteratorRecord_ be ? GetIterator(_items_, ~sync~).\n        1. Let _k_ be 0.\n        1. Repeat,\n          1. If _k_ ≥ 2<sup>53</sup> - 1, then\n            1. Let _error_ be ThrowCompletion(a newly created *TypeError* object).\n            1. Return ? IteratorClose(_iteratorRecord_, _error_).\n          1. Let _next_ be ? IteratorStepValue(_iteratorRecord_).\n          1. If _next_ is ~done~, then\n            1. Return _groups_.\n          1. Let _value_ be _next_.\n          1. Let _key_ be Completion(Call(_callback_, *undefined*, « _value_, 𝔽(_k_) »)).\n          1. IfAbruptCloseIterator(_key_, _iteratorRecord_).\n          1. If _keyCoercion_ is ~property~, then\n            1. Set _key_ to Completion(ToPropertyKey(_key_)).\n            1. IfAbruptCloseIterator(_key_, _iteratorRecord_).\n          1. Else,\n            1. Assert: _keyCoercion_ is ~collection~.\n            1. Set _key_ to CanonicalizeKeyedCollectionKey(_key_).\n          1. Perform AddValueToKeyedGroup(_groups_, _key_, _value_).\n          1. Set _k_ to _k_ + 1.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-SetterThatIgnoresPrototypeProperties\" type=\"abstract operation\">\n      <h1>\n        SetterThatIgnoresPrototypeProperties (\n          _thisValue_: an ECMAScript language value,\n          _home_: an Object,\n          _p_: a property key,\n          _v_: an ECMAScript language value,\n        ): either a normal completion containing ~unused~ or a throw completion\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-alg>\n        1. If _thisValue_ is not an Object, then\n          1. Throw a *TypeError* exception.\n        1. If SameValue(_thisValue_, _home_) is *true*, then\n          1. NOTE: Throwing here emulates assignment to a non-writable data property on the _home_ object in strict mode code.\n          1. Throw a *TypeError* exception.\n        1. Let _desc_ be ? _thisValue_.[[GetOwnProperty]](_p_).\n        1. If _desc_ is *undefined*, then\n          1. Perform ? CreateDataPropertyOrThrow(_thisValue_, _p_, _v_).\n        1. Else,\n          1. Perform ? Set(_thisValue_, _p_, _v_, *true*).\n        1. Return ~unused~.\n      </emu-alg>\n    </emu-clause>\n  </emu-clause>\n\n  <emu-clause id=\"sec-operations-on-iterator-objects\">\n    <h1>Operations on Iterator Objects</h1>\n    <p>See Common Iteration Interfaces (<emu-xref href=\"#sec-iteration\"></emu-xref>).</p>\n\n    <emu-clause id=\"sec-iterator-records\">\n      <h1>Iterator Records</h1>\n      <p>An <dfn variants=\"Iterator Records\">Iterator Record</dfn> is a Record value used to encapsulate an iterator or async iterator along with the `next` method.</p>\n      <p>Iterator Records have the fields listed in <emu-xref href=\"#table-iterator-record-fields\"></emu-xref>.</p>\n      <emu-table id=\"table-iterator-record-fields\" caption=\"Iterator Record Fields\">\n        <table>\n          <thead>\n            <tr>\n              <th>\n                Field Name\n              </th>\n              <th>\n                Value\n              </th>\n              <th>\n                Meaning\n              </th>\n            </tr>\n          </thead>\n          <tr>\n            <td>\n              [[Iterator]]\n            </td>\n            <td>\n              an Object\n            </td>\n            <td>\n              An object that conforms to the iterator interface or the async iterator interface.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[NextMethod]]\n            </td>\n            <td>\n              an ECMAScript language value\n            </td>\n            <td>\n              The `next` method of the [[Iterator]] object.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[Done]]\n            </td>\n            <td>\n              a Boolean\n            </td>\n            <td>\n              Whether the iterator has completed or been closed.\n            </td>\n          </tr>\n        </table>\n      </emu-table>\n    </emu-clause>\n\n    <emu-clause id=\"sec-getiteratordirect\" type=\"abstract operation\">\n      <h1>\n        GetIteratorDirect (\n          _obj_: an Object,\n        ): either a normal completion containing an Iterator Record or a throw completion\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-alg>\n        1. Let _nextMethod_ be ? Get(_obj_, *\"next\"*).\n        1. Let _iteratorRecord_ be the Iterator Record { [[Iterator]]: _obj_, [[NextMethod]]: _nextMethod_, [[Done]]: *false* }.\n        1. Return _iteratorRecord_.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-getiteratorfrommethod\" type=\"abstract operation\">\n      <h1>\n        GetIteratorFromMethod (\n          _obj_: an ECMAScript language value,\n          _method_: a function object,\n        ): either a normal completion containing an Iterator Record or a throw completion\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-alg>\n        1. Let _iterator_ be ? Call(_method_, _obj_).\n        1. If _iterator_ is not an Object, throw a *TypeError* exception.\n        1. Return ? GetIteratorDirect(_iterator_).\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-getiterator\" type=\"abstract operation\">\n      <h1>\n        GetIterator (\n          _obj_: an ECMAScript language value,\n          _kind_: ~sync~ or ~async~,\n        ): either a normal completion containing an Iterator Record or a throw completion\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-alg>\n        1. If _kind_ is ~async~, then\n          1. Let _method_ be ? GetMethod(_obj_, %Symbol.asyncIterator%).\n          1. If _method_ is *undefined*, then\n            1. Let _syncMethod_ be ? GetMethod(_obj_, %Symbol.iterator%).\n            1. If _syncMethod_ is *undefined*, throw a *TypeError* exception.\n            1. Let _syncIteratorRecord_ be ? GetIteratorFromMethod(_obj_, _syncMethod_).\n            1. Return CreateAsyncFromSyncIterator(_syncIteratorRecord_).\n        1. Else,\n          1. Let _method_ be ? GetMethod(_obj_, %Symbol.iterator%).\n        1. If _method_ is *undefined*, throw a *TypeError* exception.\n        1. Return ? GetIteratorFromMethod(_obj_, _method_).\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-getiteratorflattenable\" type=\"abstract operation\">\n      <h1>\n        GetIteratorFlattenable (\n          _obj_: an ECMAScript language value,\n          _primitiveHandling_: ~iterate-string-primitives~ or ~reject-primitives~,\n        ): either a normal completion containing an Iterator Record or a throw completion\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-alg>\n        1. If _obj_ is not an Object, then\n          1. If _primitiveHandling_ is ~reject-primitives~, throw a *TypeError* exception.\n          1. Assert: _primitiveHandling_ is ~iterate-string-primitives~.\n          1. If _obj_ is not a String, throw a *TypeError* exception.\n        1. Let _method_ be ? GetMethod(_obj_, %Symbol.iterator%).\n        1. If _method_ is *undefined*, then\n          1. Let _iterator_ be _obj_.\n        1. Else,\n          1. Let _iterator_ be ? Call(_method_, _obj_).\n        1. If _iterator_ is not an Object, throw a *TypeError* exception.\n        1. Return ? GetIteratorDirect(_iterator_).\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-iteratornext\" type=\"abstract operation\">\n      <h1>\n        IteratorNext (\n          _iteratorRecord_: an Iterator Record,\n          optional _value_: an ECMAScript language value,\n        ): either a normal completion containing an Object or a throw completion\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-alg>\n        1. If _value_ is not present, then\n          1. Let _result_ be Completion(Call(_iteratorRecord_.[[NextMethod]], _iteratorRecord_.[[Iterator]])).\n        1. Else,\n          1. Let _result_ be Completion(Call(_iteratorRecord_.[[NextMethod]], _iteratorRecord_.[[Iterator]], « _value_ »)).\n        1. If _result_ is a throw completion, then\n          1. Set _iteratorRecord_.[[Done]] to *true*.\n          1. Return ? _result_.\n        1. Set _result_ to ! _result_.\n        1. If _result_ is not an Object, then\n          1. Set _iteratorRecord_.[[Done]] to *true*.\n          1. Throw a *TypeError* exception.\n        1. Return _result_.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-iteratorcomplete\" type=\"abstract operation\">\n      <h1>\n        IteratorComplete (\n          _iteratorResult_: an Object,\n        ): either a normal completion containing a Boolean or a throw completion\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-alg>\n        1. Return ToBoolean(? Get(_iteratorResult_, *\"done\"*)).\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-iteratorvalue\" type=\"abstract operation\">\n      <h1>\n        IteratorValue (\n          _iteratorResult_: an Object,\n        ): either a normal completion containing an ECMAScript language value or a throw completion\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-alg>\n        1. Return ? Get(_iteratorResult_, *\"value\"*).\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-iteratorstep\" type=\"abstract operation\">\n      <h1>\n        IteratorStep (\n          _iteratorRecord_: an Iterator Record,\n        ): either a normal completion containing either an Object or ~done~, or a throw completion\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It requests the next value from _iteratorRecord_.[[Iterator]] by calling _iteratorRecord_.[[NextMethod]] and returns either ~done~ indicating that the iterator has reached its end or the IteratorResult object if a next value is available.</dd>\n      </dl>\n      <emu-alg>\n        1. Let _result_ be ? IteratorNext(_iteratorRecord_).\n        1. Let _done_ be Completion(IteratorComplete(_result_)).\n        1. If _done_ is a throw completion, then\n          1. Set _iteratorRecord_.[[Done]] to *true*.\n          1. Return ? _done_.\n        1. Set _done_ to ! _done_.\n        1. If _done_ is *true*, then\n          1. Set _iteratorRecord_.[[Done]] to *true*.\n          1. Return ~done~.\n        1. Return _result_.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-iteratorstepvalue\" type=\"abstract operation\">\n      <h1>\n        IteratorStepValue (\n          _iteratorRecord_: an Iterator Record,\n        ): either a normal completion containing either an ECMAScript language value or ~done~, or a throw completion\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It requests the next value from _iteratorRecord_.[[Iterator]] by calling _iteratorRecord_.[[NextMethod]] and returns either ~done~ indicating that the iterator has reached its end or the value from the IteratorResult object if a next value is available.</dd>\n      </dl>\n      <emu-alg>\n        1. Let _result_ be ? IteratorStep(_iteratorRecord_).\n        1. If _result_ is ~done~, then\n          1. Return ~done~.\n        1. Let _value_ be Completion(IteratorValue(_result_)).\n        1. If _value_ is a throw completion, then\n          1. Set _iteratorRecord_.[[Done]] to *true*.\n        1. Return ? _value_.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-iteratorclose\" type=\"abstract operation\">\n      <h1>\n        IteratorClose (\n          _iteratorRecord_: an Iterator Record,\n          _completion_: a Completion Record,\n        ): a Completion Record\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It is used to notify an iterator that it should perform any actions it would normally perform when it has reached its completed state.</dd>\n      </dl>\n      <emu-alg>\n        1. Assert: _iteratorRecord_.[[Iterator]] is an Object.\n        1. Let _iterator_ be _iteratorRecord_.[[Iterator]].\n        1. Let _innerResult_ be Completion(GetMethod(_iterator_, *\"return\"*)).\n        1. If _innerResult_ is a normal completion, then\n          1. Let _return_ be _innerResult_.[[Value]].\n          1. If _return_ is *undefined*, return ? _completion_.\n          1. Set _innerResult_ to Completion(Call(_return_, _iterator_)).\n        1. If _completion_ is a throw completion, return ? _completion_.\n        1. If _innerResult_ is a throw completion, return ? _innerResult_.\n        1. If _innerResult_.[[Value]] is not an Object, throw a *TypeError* exception.\n        1. Return ? _completion_.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-ifabruptcloseiterator\" aoid=\"IfAbruptCloseIterator\">\n      <h1>IfAbruptCloseIterator ( _value_, _iteratorRecord_ )</h1>\n      <p>IfAbruptCloseIterator is a shorthand for a sequence of algorithm steps that use an Iterator Record. An algorithm step of the form:</p>\n      <emu-alg>\n        1. IfAbruptCloseIterator(_value_, _iteratorRecord_).\n      </emu-alg>\n      <p>means the same thing as:</p>\n      <emu-alg>\n        1. Assert: _value_ is a Completion Record.\n        1. If _value_ is an abrupt completion, return ? IteratorClose(_iteratorRecord_, _value_).\n        1. Else, set _value_ to ! _value_.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-asynciteratorclose\" type=\"abstract operation\">\n      <h1>\n        AsyncIteratorClose (\n          _iteratorRecord_: an Iterator Record,\n          _completion_: a Completion Record,\n        ): a Completion Record\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It is used to notify an async iterator that it should perform any actions it would normally perform when it has reached its completed state.</dd>\n      </dl>\n      <emu-alg>\n        1. Assert: _iteratorRecord_.[[Iterator]] is an Object.\n        1. Let _iterator_ be _iteratorRecord_.[[Iterator]].\n        1. Let _innerResult_ be Completion(GetMethod(_iterator_, *\"return\"*)).\n        1. If _innerResult_ is a normal completion, then\n          1. Let _return_ be _innerResult_.[[Value]].\n          1. If _return_ is *undefined*, return ? _completion_.\n          1. Set _innerResult_ to Completion(Call(_return_, _iterator_)).\n          1. If _innerResult_ is a normal completion, set _innerResult_ to Completion(Await(_innerResult_.[[Value]])).\n        1. If _completion_ is a throw completion, return ? _completion_.\n        1. If _innerResult_ is a throw completion, return ? _innerResult_.\n        1. If _innerResult_.[[Value]] is not an Object, throw a *TypeError* exception.\n        1. Return ? _completion_.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-createiterresultobject\" type=\"abstract operation\">\n      <h1>\n        CreateIteratorResultObject (\n          _value_: an ECMAScript language value,\n          _done_: a Boolean,\n        ): an Object that conforms to the IteratorResult interface\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It creates an object that conforms to the IteratorResult interface.</dd>\n      </dl>\n      <emu-alg>\n        1. Let _obj_ be OrdinaryObjectCreate(%Object.prototype%).\n        1. Perform ! CreateDataPropertyOrThrow(_obj_, *\"value\"*, _value_).\n        1. Perform ! CreateDataPropertyOrThrow(_obj_, *\"done\"*, _done_).\n        1. Return _obj_.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-createlistiteratorRecord\" type=\"abstract operation\" oldids=\"sec-createlistiterator,sec-listiteratornext-functions,sec-listiterator-next\">\n      <h1>\n        CreateListIteratorRecord (\n          _list_: a List of ECMAScript language values,\n        ): an Iterator Record\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It creates an Iterator Record whose [[NextMethod]] returns the successive elements of _list_.</dd>\n      </dl>\n      <emu-alg>\n        1. Let _closure_ be a new Abstract Closure with no parameters that captures _list_ and performs the following steps when called:\n          1. For each element _E_ of _list_, do\n            1. Perform ? GeneratorYield(CreateIteratorResultObject(_E_, *false*)).\n          1. Return NormalCompletion(*undefined*).\n        1. Let _iterator_ be CreateIteratorFromClosure(_closure_, ~empty~, %Iterator.prototype%).\n        1. Return the Iterator Record { [[Iterator]]: _iterator_, [[NextMethod]]: %GeneratorPrototype.next%, [[Done]]: *false* }.\n      </emu-alg>\n      <emu-note>\n        <p>The list iterator object is never directly accessible to ECMAScript code.</p>\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-iteratortolist\" oldids=\"sec-iterabletolist\" type=\"abstract operation\">\n      <h1>\n        IteratorToList (\n          _iteratorRecord_: an Iterator Record,\n        ): either a normal completion containing a List of ECMAScript language values or a throw completion\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-alg>\n        1. Let _values_ be a new empty List.\n        1. Repeat,\n          1. Let _next_ be ? IteratorStepValue(_iteratorRecord_).\n          1. If _next_ is ~done~, then\n            1. Return _values_.\n          1. Append _next_ to _values_.\n      </emu-alg>\n    </emu-clause>\n  </emu-clause>\n</emu-clause>\n\n<emu-clause id=\"sec-syntax-directed-operations\">\n  <h1>Syntax-Directed Operations</h1>\n  <p>In addition to those defined in this section, specialized syntax-directed operations are defined throughout this specification.</p>\n\n  <emu-clause id=\"sec-evaluation\" type=\"sdo\">\n    <h1>Runtime Semantics: Evaluation ( ): a Completion Record</h1>\n    <dl class=\"header\">\n      <dt>effects</dt>\n      <dd>user-code</dd>\n    </dl>\n    <emu-note>\n      The definitions for this operation are distributed over the \"ECMAScript Language\" sections of this specification. Each definition appears after the defining occurrence of the relevant productions.\n    </emu-note>\n  </emu-clause>\n\n  <emu-clause id=\"sec-syntax-directed-operations-scope-analysis\">\n    <h1>Scope Analysis</h1>\n\n    <emu-clause id=\"sec-static-semantics-boundnames\" oldids=\"sec-identifiers-static-semantics-boundnames,sec-let-and-const-declarations-static-semantics-boundnames,sec-variable-statement-static-semantics-boundnames,sec-destructuring-binding-patterns-static-semantics-boundnames,sec-for-in-and-for-of-statements-static-semantics-boundnames,sec-function-definitions-static-semantics-boundnames,sec-arrow-function-definitions-static-semantics-boundnames,sec-generator-function-definitions-static-semantics-boundnames,sec-async-generator-function-definitions-static-semantics-boundnames,sec-class-definitions-static-semantics-boundnames,sec-async-function-definitions-static-semantics-BoundNames,sec-async-arrow-function-definitions-static-semantics-BoundNames,sec-imports-static-semantics-boundnames,sec-exports-static-semantics-boundnames\" type=\"sdo\">\n      <h1>Static Semantics: BoundNames ( ): a List of Strings</h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-note id=\"note-star-default-star\">\n        <p>*\"\\*default\\*\"* is used within this specification as a synthetic name for a module's default export when it does not have another name. An entry in the module's [[Environment]] is created with that name and holds the corresponding value, and resolving the export named *\"default\"* by calling <emu-xref href=\"#sec-resolveexport\" title></emu-xref> for the module will return a ResolvedBinding Record whose [[BindingName]] is *\"\\*default\\*\"*, which will then resolve in the module's [[Environment]] to the above-mentioned value. This is done only for ease of specification, so that anonymous default exports can be resolved like any other export. This *\"\\*default\\*\"* string is never accessible to ECMAScript code or to the module linking algorithm.</p>\n      </emu-note>\n      <emu-grammar>BindingIdentifier : Identifier</emu-grammar>\n      <emu-alg>\n        1. Return a List whose sole element is the StringValue of |Identifier|.\n      </emu-alg>\n      <emu-grammar>BindingIdentifier : `yield`</emu-grammar>\n      <emu-alg>\n        1. Return « *\"yield\"* ».\n      </emu-alg>\n      <emu-grammar>BindingIdentifier : `await`</emu-grammar>\n      <emu-alg>\n        1. Return « *\"await\"* ».\n      </emu-alg>\n      <emu-grammar>LexicalDeclaration : LetOrConst BindingList `;`</emu-grammar>\n      <emu-alg>\n        1. Return the BoundNames of |BindingList|.\n      </emu-alg>\n      <emu-grammar>BindingList : BindingList `,` LexicalBinding</emu-grammar>\n      <emu-alg>\n        1. Let _names1_ be the BoundNames of |BindingList|.\n        1. Let _names2_ be the BoundNames of |LexicalBinding|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      </emu-alg>\n      <emu-grammar>LexicalBinding : BindingIdentifier Initializer?</emu-grammar>\n      <emu-alg>\n        1. Return the BoundNames of |BindingIdentifier|.\n      </emu-alg>\n      <emu-grammar>LexicalBinding : BindingPattern Initializer</emu-grammar>\n      <emu-alg>\n        1. Return the BoundNames of |BindingPattern|.\n      </emu-alg>\n      <emu-grammar>VariableDeclarationList : VariableDeclarationList `,` VariableDeclaration</emu-grammar>\n      <emu-alg>\n        1. Let _names1_ be the BoundNames of |VariableDeclarationList|.\n        1. Let _names2_ be the BoundNames of |VariableDeclaration|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      </emu-alg>\n      <emu-grammar>VariableDeclaration : BindingIdentifier Initializer?</emu-grammar>\n      <emu-alg>\n        1. Return the BoundNames of |BindingIdentifier|.\n      </emu-alg>\n      <emu-grammar>VariableDeclaration : BindingPattern Initializer</emu-grammar>\n      <emu-alg>\n        1. Return the BoundNames of |BindingPattern|.\n      </emu-alg>\n      <emu-grammar>ObjectBindingPattern : `{` `}`</emu-grammar>\n      <emu-alg>\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>ObjectBindingPattern : `{` BindingPropertyList `,` BindingRestProperty `}`</emu-grammar>\n      <emu-alg>\n        1. Let _names1_ be the BoundNames of |BindingPropertyList|.\n        1. Let _names2_ be the BoundNames of |BindingRestProperty|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      </emu-alg>\n      <emu-grammar>ArrayBindingPattern : `[` Elision? `]`</emu-grammar>\n      <emu-alg>\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>ArrayBindingPattern : `[` Elision? BindingRestElement `]`</emu-grammar>\n      <emu-alg>\n        1. Return the BoundNames of |BindingRestElement|.\n      </emu-alg>\n      <emu-grammar>ArrayBindingPattern : `[` BindingElementList `,` Elision? `]`</emu-grammar>\n      <emu-alg>\n        1. Return the BoundNames of |BindingElementList|.\n      </emu-alg>\n      <emu-grammar>ArrayBindingPattern : `[` BindingElementList `,` Elision? BindingRestElement `]`</emu-grammar>\n      <emu-alg>\n        1. Let _names1_ be the BoundNames of |BindingElementList|.\n        1. Let _names2_ be the BoundNames of |BindingRestElement|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      </emu-alg>\n      <emu-grammar>BindingPropertyList : BindingPropertyList `,` BindingProperty</emu-grammar>\n      <emu-alg>\n        1. Let _names1_ be the BoundNames of |BindingPropertyList|.\n        1. Let _names2_ be the BoundNames of |BindingProperty|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      </emu-alg>\n      <emu-grammar>BindingElementList : BindingElementList `,` BindingElisionElement</emu-grammar>\n      <emu-alg>\n        1. Let _names1_ be the BoundNames of |BindingElementList|.\n        1. Let _names2_ be the BoundNames of |BindingElisionElement|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      </emu-alg>\n      <emu-grammar>BindingElisionElement : Elision? BindingElement</emu-grammar>\n      <emu-alg>\n        1. Return the BoundNames of |BindingElement|.\n      </emu-alg>\n      <emu-grammar>BindingProperty : PropertyName `:` BindingElement</emu-grammar>\n      <emu-alg>\n        1. Return the BoundNames of |BindingElement|.\n      </emu-alg>\n      <emu-grammar>SingleNameBinding : BindingIdentifier Initializer?</emu-grammar>\n      <emu-alg>\n        1. Return the BoundNames of |BindingIdentifier|.\n      </emu-alg>\n      <emu-grammar>BindingElement : BindingPattern Initializer?</emu-grammar>\n      <emu-alg>\n        1. Return the BoundNames of |BindingPattern|.\n      </emu-alg>\n      <emu-grammar>ForDeclaration : LetOrConst ForBinding</emu-grammar>\n      <emu-alg>\n        1. Return the BoundNames of |ForBinding|.\n      </emu-alg>\n      <emu-grammar>FunctionDeclaration : `function` BindingIdentifier `(` FormalParameters `)` `{` FunctionBody `}`</emu-grammar>\n      <emu-alg>\n        1. Return the BoundNames of |BindingIdentifier|.\n      </emu-alg>\n      <emu-grammar>FunctionDeclaration : `function` `(` FormalParameters `)` `{` FunctionBody `}`</emu-grammar>\n      <emu-alg>\n        1. Return « *\"\\*default\\*\"* ».\n      </emu-alg>\n      <emu-grammar>FormalParameters : [empty]</emu-grammar>\n      <emu-alg>\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>FormalParameters : FormalParameterList `,` FunctionRestParameter</emu-grammar>\n      <emu-alg>\n        1. Let _names1_ be the BoundNames of |FormalParameterList|.\n        1. Let _names2_ be the BoundNames of |FunctionRestParameter|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      </emu-alg>\n      <emu-grammar>FormalParameterList : FormalParameterList `,` FormalParameter</emu-grammar>\n      <emu-alg>\n        1. Let _names1_ be the BoundNames of |FormalParameterList|.\n        1. Let _names2_ be the BoundNames of |FormalParameter|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      </emu-alg>\n      <emu-grammar>ArrowParameters : CoverParenthesizedExpressionAndArrowParameterList</emu-grammar>\n      <emu-alg>\n        1. Let _formals_ be the |ArrowFormalParameters| that is covered by |CoverParenthesizedExpressionAndArrowParameterList|.\n        1. Return the BoundNames of _formals_.\n      </emu-alg>\n      <emu-grammar>GeneratorDeclaration : `function` `*` BindingIdentifier `(` FormalParameters `)` `{` GeneratorBody `}`</emu-grammar>\n      <emu-alg>\n        1. Return the BoundNames of |BindingIdentifier|.\n      </emu-alg>\n      <emu-grammar>GeneratorDeclaration : `function` `*` `(` FormalParameters `)` `{` GeneratorBody `}`</emu-grammar>\n      <emu-alg>\n        1. Return « *\"\\*default\\*\"* ».\n      </emu-alg>\n      <emu-grammar>AsyncGeneratorDeclaration : `async` `function` `*` BindingIdentifier `(` FormalParameters `)` `{` AsyncGeneratorBody `}`</emu-grammar>\n      <emu-alg>\n        1. Return the BoundNames of |BindingIdentifier|.\n      </emu-alg>\n      <emu-grammar>AsyncGeneratorDeclaration : `async` `function` `*` `(` FormalParameters `)` `{` AsyncGeneratorBody `}`</emu-grammar>\n      <emu-alg>\n        1. Return « *\"\\*default\\*\"* ».\n      </emu-alg>\n      <emu-grammar>ClassDeclaration : `class` BindingIdentifier ClassTail</emu-grammar>\n      <emu-alg>\n        1. Return the BoundNames of |BindingIdentifier|.\n      </emu-alg>\n      <emu-grammar>ClassDeclaration : `class` ClassTail</emu-grammar>\n      <emu-alg>\n        1. Return « *\"\\*default\\*\"* ».\n      </emu-alg>\n      <emu-grammar>\n        AsyncFunctionDeclaration : `async` `function` BindingIdentifier `(` FormalParameters `)` `{` AsyncFunctionBody `}`\n      </emu-grammar>\n      <emu-alg>\n        1. Return the BoundNames of |BindingIdentifier|.\n      </emu-alg>\n      <emu-grammar>\n        AsyncFunctionDeclaration : `async` `function` `(` FormalParameters `)` `{` AsyncFunctionBody `}`\n      </emu-grammar>\n      <emu-alg>\n        1. Return « *\"\\*default\\*\"* ».\n      </emu-alg>\n      <emu-grammar>\n        CoverCallExpressionAndAsyncArrowHead : MemberExpression Arguments\n      </emu-grammar>\n      <emu-alg>\n        1. Let _head_ be the |AsyncArrowHead| that is covered by |CoverCallExpressionAndAsyncArrowHead|.\n        1. Return the BoundNames of _head_.\n      </emu-alg>\n      <emu-grammar>ImportDeclaration : `import` ImportClause FromClause `;`</emu-grammar>\n      <emu-alg>\n        1. Return the BoundNames of |ImportClause|.\n      </emu-alg>\n      <emu-grammar>ImportDeclaration : `import` ModuleSpecifier `;`</emu-grammar>\n      <emu-alg>\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>ImportClause : ImportedDefaultBinding `,` NameSpaceImport</emu-grammar>\n      <emu-alg>\n        1. Let _names1_ be the BoundNames of |ImportedDefaultBinding|.\n        1. Let _names2_ be the BoundNames of |NameSpaceImport|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      </emu-alg>\n      <emu-grammar>ImportClause : ImportedDefaultBinding `,` NamedImports</emu-grammar>\n      <emu-alg>\n        1. Let _names1_ be the BoundNames of |ImportedDefaultBinding|.\n        1. Let _names2_ be the BoundNames of |NamedImports|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      </emu-alg>\n      <emu-grammar>NamedImports : `{` `}`</emu-grammar>\n      <emu-alg>\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>ImportsList : ImportsList `,` ImportSpecifier</emu-grammar>\n      <emu-alg>\n        1. Let _names1_ be the BoundNames of |ImportsList|.\n        1. Let _names2_ be the BoundNames of |ImportSpecifier|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      </emu-alg>\n      <emu-grammar>ImportSpecifier : ModuleExportName `as` ImportedBinding</emu-grammar>\n      <emu-alg>\n        1. Return the BoundNames of |ImportedBinding|.\n      </emu-alg>\n      <emu-grammar>\n        ExportDeclaration :\n          `export` ExportFromClause FromClause `;`\n          `export` NamedExports `;`\n      </emu-grammar>\n      <emu-alg>\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>ExportDeclaration : `export` VariableStatement</emu-grammar>\n      <emu-alg>\n        1. Return the BoundNames of |VariableStatement|.\n      </emu-alg>\n      <emu-grammar>ExportDeclaration : `export` Declaration</emu-grammar>\n      <emu-alg>\n        1. Return the BoundNames of |Declaration|.\n      </emu-alg>\n      <emu-grammar>ExportDeclaration : `export` `default` HoistableDeclaration</emu-grammar>\n      <emu-alg>\n        1. Let _declarationNames_ be the BoundNames of |HoistableDeclaration|.\n        1. If _declarationNames_ does not include the element *\"\\*default\\*\"*, append *\"\\*default\\*\"* to _declarationNames_.\n        1. Return _declarationNames_.\n      </emu-alg>\n      <emu-grammar>ExportDeclaration : `export` `default` ClassDeclaration</emu-grammar>\n      <emu-alg>\n        1. Let _declarationNames_ be the BoundNames of |ClassDeclaration|.\n        1. If _declarationNames_ does not include the element *\"\\*default\\*\"*, append *\"\\*default\\*\"* to _declarationNames_.\n        1. Return _declarationNames_.\n      </emu-alg>\n      <emu-grammar>ExportDeclaration : `export` `default` AssignmentExpression `;`</emu-grammar>\n      <emu-alg>\n        1. Return « *\"\\*default\\*\"* ».\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-static-semantics-declarationpart\" type=\"sdo\">\n      <h1>Static Semantics: DeclarationPart ( ): a Parse Node</h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-grammar>HoistableDeclaration : FunctionDeclaration</emu-grammar>\n      <emu-alg>\n        1. Return |FunctionDeclaration|.\n      </emu-alg>\n      <emu-grammar>HoistableDeclaration : GeneratorDeclaration</emu-grammar>\n      <emu-alg>\n        1. Return |GeneratorDeclaration|.\n      </emu-alg>\n      <emu-grammar>HoistableDeclaration : AsyncFunctionDeclaration</emu-grammar>\n      <emu-alg>\n        1. Return |AsyncFunctionDeclaration|.\n      </emu-alg>\n      <emu-grammar>HoistableDeclaration : AsyncGeneratorDeclaration</emu-grammar>\n      <emu-alg>\n        1. Return |AsyncGeneratorDeclaration|.\n      </emu-alg>\n      <emu-grammar>Declaration : ClassDeclaration</emu-grammar>\n      <emu-alg>\n        1. Return |ClassDeclaration|.\n      </emu-alg>\n      <emu-grammar>Declaration : LexicalDeclaration</emu-grammar>\n      <emu-alg>\n        1. Return |LexicalDeclaration|.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-static-semantics-isconstantdeclaration\" oldids=\"sec-let-and-const-declarations-static-semantics-isconstantdeclaration,sec-function-definitions-static-semantics-isconstantdeclaration,sec-generator-function-definitions-static-semantics-isconstantdeclaration,sec-async-generator-function-definitions-static-semantics-isconstantdeclaration,sec-class-definitions-static-semantics-isconstantdeclaration,sec-async-function-definitions-static-semantics-IsConstantDeclaration,sec-exports-static-semantics-isconstantdeclaration\" type=\"sdo\">\n      <h1>Static Semantics: IsConstantDeclaration ( ): a Boolean</h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-grammar>LexicalDeclaration : LetOrConst BindingList `;`</emu-grammar>\n      <emu-alg>\n        1. Return IsConstantDeclaration of |LetOrConst|.\n      </emu-alg>\n      <emu-grammar>LetOrConst : `let`</emu-grammar>\n      <emu-alg>\n        1. Return *false*.\n      </emu-alg>\n      <emu-grammar>LetOrConst : `const`</emu-grammar>\n      <emu-alg>\n        1. Return *true*.\n      </emu-alg>\n      <emu-grammar>\n        FunctionDeclaration :\n          `function` BindingIdentifier `(` FormalParameters `)` `{` FunctionBody `}`\n          `function` `(` FormalParameters `)` `{` FunctionBody `}`\n\n        GeneratorDeclaration :\n          `function` `*` BindingIdentifier `(` FormalParameters `)` `{` GeneratorBody `}`\n          `function` `*` `(` FormalParameters `)` `{` GeneratorBody `}`\n\n        AsyncGeneratorDeclaration :\n          `async` `function` `*` BindingIdentifier `(` FormalParameters `)` `{` AsyncGeneratorBody `}`\n          `async` `function` `*` `(` FormalParameters `)` `{` AsyncGeneratorBody `}`\n\n        AsyncFunctionDeclaration :\n          `async` `function` BindingIdentifier `(` FormalParameters `)` `{` AsyncFunctionBody `}`\n          `async` `function` `(` FormalParameters `)` `{` AsyncFunctionBody `}`\n      </emu-grammar>\n      <emu-alg>\n        1. Return *false*.\n      </emu-alg>\n      <emu-grammar>\n        ClassDeclaration :\n          `class` BindingIdentifier ClassTail\n          `class` ClassTail\n      </emu-grammar>\n      <emu-alg>\n        1. Return *false*.\n      </emu-alg>\n      <emu-grammar>\n        ExportDeclaration :\n          `export` ExportFromClause FromClause `;`\n          `export` NamedExports `;`\n          `export` `default` AssignmentExpression `;`\n      </emu-grammar>\n      <emu-alg>\n        1. Return *false*.\n      </emu-alg>\n      <emu-note>\n        <p>It is not necessary to treat `export default` |AssignmentExpression| as a constant declaration because there is no syntax that permits assignment to the internal bound name used to reference a module's default object.</p>\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-static-semantics-lexicallydeclarednames\" oldids=\"sec-block-static-semantics-lexicallydeclarednames,sec-switch-statement-static-semantics-lexicallydeclarednames,sec-labelled-statements-static-semantics-lexicallydeclarednames,sec-function-definitions-static-semantics-lexicallydeclarednames,sec-arrow-function-definitions-static-semantics-lexicallydeclarednames,sec-async-arrow-function-definitions-static-semantics-LexicallyDeclaredNames,sec-scripts-static-semantics-lexicallydeclarednames,sec-module-semantics-static-semantics-lexicallydeclarednames\" type=\"sdo\">\n      <h1>Static Semantics: LexicallyDeclaredNames ( ): a List of Strings</h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-grammar>Block : `{` `}`</emu-grammar>\n      <emu-alg>\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>StatementList : StatementList StatementListItem</emu-grammar>\n      <emu-alg>\n        1. Let _names1_ be the LexicallyDeclaredNames of |StatementList|.\n        1. Let _names2_ be the LexicallyDeclaredNames of |StatementListItem|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      </emu-alg>\n      <emu-grammar>StatementListItem : Statement</emu-grammar>\n      <emu-alg>\n        1. If |Statement| is <emu-grammar>Statement : LabelledStatement</emu-grammar>, return the LexicallyDeclaredNames of |LabelledStatement|.\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>StatementListItem : Declaration</emu-grammar>\n      <emu-alg>\n        1. Return the BoundNames of |Declaration|.\n      </emu-alg>\n      <emu-grammar>CaseBlock : `{` `}`</emu-grammar>\n      <emu-alg>\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>CaseBlock : `{` CaseClauses? DefaultClause CaseClauses? `}`</emu-grammar>\n      <emu-alg>\n        1. If the first |CaseClauses| is present, let _names1_ be the LexicallyDeclaredNames of the first |CaseClauses|.\n        1. Else, let _names1_ be a new empty List.\n        1. Let _names2_ be the LexicallyDeclaredNames of |DefaultClause|.\n        1. If the second |CaseClauses| is present, let _names3_ be the LexicallyDeclaredNames of the second |CaseClauses|.\n        1. Else, let _names3_ be a new empty List.\n        1. Return the list-concatenation of _names1_, _names2_, and _names3_.\n      </emu-alg>\n      <emu-grammar>CaseClauses : CaseClauses CaseClause</emu-grammar>\n      <emu-alg>\n        1. Let _names1_ be the LexicallyDeclaredNames of |CaseClauses|.\n        1. Let _names2_ be the LexicallyDeclaredNames of |CaseClause|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      </emu-alg>\n      <emu-grammar>CaseClause : `case` Expression `:` StatementList?</emu-grammar>\n      <emu-alg>\n        1. If the |StatementList| is present, return the LexicallyDeclaredNames of |StatementList|.\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>DefaultClause : `default` `:` StatementList?</emu-grammar>\n      <emu-alg>\n        1. If the |StatementList| is present, return the LexicallyDeclaredNames of |StatementList|.\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>LabelledStatement : LabelIdentifier `:` LabelledItem</emu-grammar>\n      <emu-alg>\n        1. Return the LexicallyDeclaredNames of |LabelledItem|.\n      </emu-alg>\n      <emu-grammar>LabelledItem : Statement</emu-grammar>\n      <emu-alg>\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>LabelledItem : FunctionDeclaration</emu-grammar>\n      <emu-alg>\n        1. Return the BoundNames of |FunctionDeclaration|.\n      </emu-alg>\n      <emu-grammar>FunctionStatementList : [empty]</emu-grammar>\n      <emu-alg>\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>FunctionStatementList : StatementList</emu-grammar>\n      <emu-alg>\n        1. Return the TopLevelLexicallyDeclaredNames of |StatementList|.\n      </emu-alg>\n      <emu-grammar>ClassStaticBlockStatementList : [empty]</emu-grammar>\n      <emu-alg>\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>ClassStaticBlockStatementList : StatementList</emu-grammar>\n      <emu-alg>\n        1. Return the TopLevelLexicallyDeclaredNames of |StatementList|.\n      </emu-alg>\n      <emu-grammar>ConciseBody : ExpressionBody</emu-grammar>\n      <emu-alg>\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>\n        AsyncConciseBody : ExpressionBody\n      </emu-grammar>\n      <emu-alg>\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>Script : [empty]</emu-grammar>\n      <emu-alg>\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>ScriptBody : StatementList</emu-grammar>\n      <emu-alg>\n        1. Return the TopLevelLexicallyDeclaredNames of |StatementList|.\n      </emu-alg>\n      <emu-note>\n        <p>At the top level of a |Script|, function declarations are treated like var declarations rather than like lexical declarations.</p>\n      </emu-note>\n      <emu-note>\n        <p>The LexicallyDeclaredNames of a |Module| includes the names of all of its imported bindings.</p>\n      </emu-note>\n      <emu-grammar>ModuleItemList : ModuleItemList ModuleItem</emu-grammar>\n      <emu-alg>\n        1. Let _names1_ be the LexicallyDeclaredNames of |ModuleItemList|.\n        1. Let _names2_ be the LexicallyDeclaredNames of |ModuleItem|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      </emu-alg>\n      <emu-grammar>ModuleItem : ImportDeclaration</emu-grammar>\n      <emu-alg>\n        1. Return the BoundNames of |ImportDeclaration|.\n      </emu-alg>\n      <emu-grammar>ModuleItem : ExportDeclaration</emu-grammar>\n      <emu-alg>\n        1. If |ExportDeclaration| is `export` |VariableStatement|, return a new empty List.\n        1. Return the BoundNames of |ExportDeclaration|.\n      </emu-alg>\n      <emu-grammar>ModuleItem : StatementListItem</emu-grammar>\n      <emu-alg>\n        1. Return the LexicallyDeclaredNames of |StatementListItem|.\n      </emu-alg>\n      <emu-note>\n        <p>At the top level of a |Module|, function declarations are treated like lexical declarations rather than like var declarations.</p>\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-static-semantics-lexicallyscopeddeclarations\" oldids=\"sec-block-static-semantics-lexicallyscopeddeclarations,sec-switch-statement-static-semantics-lexicallyscopeddeclarations,sec-labelled-statements-static-semantics-lexicallyscopeddeclarations,sec-function-definitions-static-semantics-lexicallyscopeddeclarations,sec-arrow-function-definitions-static-semantics-lexicallyscopeddeclarations,sec-async-arrow-function-definitions-static-semantics-LexicallyScopedDeclarations,sec-scripts-static-semantics-lexicallyscopeddeclarations,sec-module-semantics-static-semantics-lexicallyscopeddeclarations,sec-exports-static-semantics-lexicallyscopeddeclarations\" type=\"sdo\">\n      <h1>Static Semantics: LexicallyScopedDeclarations ( ): a List of Parse Nodes</h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-grammar>StatementList : StatementList StatementListItem</emu-grammar>\n      <emu-alg>\n        1. Let _declarations1_ be the LexicallyScopedDeclarations of |StatementList|.\n        1. Let _declarations2_ be the LexicallyScopedDeclarations of |StatementListItem|.\n        1. Return the list-concatenation of _declarations1_ and _declarations2_.\n      </emu-alg>\n      <emu-grammar>StatementListItem : Statement</emu-grammar>\n      <emu-alg>\n        1. If |Statement| is <emu-grammar>Statement : LabelledStatement</emu-grammar>, return the LexicallyScopedDeclarations of |LabelledStatement|.\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>StatementListItem : Declaration</emu-grammar>\n      <emu-alg>\n        1. Return a List whose sole element is the DeclarationPart of |Declaration|.\n      </emu-alg>\n      <emu-grammar>CaseBlock : `{` `}`</emu-grammar>\n      <emu-alg>\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>CaseBlock : `{` CaseClauses? DefaultClause CaseClauses? `}`</emu-grammar>\n      <emu-alg>\n        1. If the first |CaseClauses| is present, let _declarations1_ be the LexicallyScopedDeclarations of the first |CaseClauses|.\n        1. Else, let _declarations1_ be a new empty List.\n        1. Let _declarations2_ be the LexicallyScopedDeclarations of |DefaultClause|.\n        1. If the second |CaseClauses| is present, let _declarations3_ be the LexicallyScopedDeclarations of the second |CaseClauses|.\n        1. Else, let _declarations3_ be a new empty List.\n        1. Return the list-concatenation of _declarations1_, _declarations2_, and _declarations3_.\n      </emu-alg>\n      <emu-grammar>CaseClauses : CaseClauses CaseClause</emu-grammar>\n      <emu-alg>\n        1. Let _declarations1_ be the LexicallyScopedDeclarations of |CaseClauses|.\n        1. Let _declarations2_ be the LexicallyScopedDeclarations of |CaseClause|.\n        1. Return the list-concatenation of _declarations1_ and _declarations2_.\n      </emu-alg>\n      <emu-grammar>CaseClause : `case` Expression `:` StatementList?</emu-grammar>\n      <emu-alg>\n        1. If the |StatementList| is present, return the LexicallyScopedDeclarations of |StatementList|.\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>DefaultClause : `default` `:` StatementList?</emu-grammar>\n      <emu-alg>\n        1. If the |StatementList| is present, return the LexicallyScopedDeclarations of |StatementList|.\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>LabelledStatement : LabelIdentifier `:` LabelledItem</emu-grammar>\n      <emu-alg>\n        1. Return the LexicallyScopedDeclarations of |LabelledItem|.\n      </emu-alg>\n      <emu-grammar>LabelledItem : Statement</emu-grammar>\n      <emu-alg>\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>LabelledItem : FunctionDeclaration</emu-grammar>\n      <emu-alg>\n        1. Return « |FunctionDeclaration| ».\n      </emu-alg>\n      <emu-grammar>FunctionStatementList : [empty]</emu-grammar>\n      <emu-alg>\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>FunctionStatementList : StatementList</emu-grammar>\n      <emu-alg>\n        1. Return the TopLevelLexicallyScopedDeclarations of |StatementList|.\n      </emu-alg>\n      <emu-grammar>ClassStaticBlockStatementList : [empty]</emu-grammar>\n      <emu-alg>\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>ClassStaticBlockStatementList : StatementList</emu-grammar>\n      <emu-alg>\n        1. Return the TopLevelLexicallyScopedDeclarations of |StatementList|.\n      </emu-alg>\n      <emu-grammar>ConciseBody : ExpressionBody</emu-grammar>\n      <emu-alg>\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>\n        AsyncConciseBody : ExpressionBody\n      </emu-grammar>\n      <emu-alg>\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>Script : [empty]</emu-grammar>\n      <emu-alg>\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>ScriptBody : StatementList</emu-grammar>\n      <emu-alg>\n        1. Return the TopLevelLexicallyScopedDeclarations of |StatementList|.\n      </emu-alg>\n      <emu-grammar>Module : [empty]</emu-grammar>\n      <emu-alg>\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>ModuleItemList : ModuleItemList ModuleItem</emu-grammar>\n      <emu-alg>\n        1. Let _declarations1_ be the LexicallyScopedDeclarations of |ModuleItemList|.\n        1. Let _declarations2_ be the LexicallyScopedDeclarations of |ModuleItem|.\n        1. Return the list-concatenation of _declarations1_ and _declarations2_.\n      </emu-alg>\n      <emu-grammar>ModuleItem : ImportDeclaration</emu-grammar>\n      <emu-alg>\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>\n        ExportDeclaration :\n          `export` ExportFromClause FromClause `;`\n          `export` NamedExports `;`\n          `export` VariableStatement\n      </emu-grammar>\n      <emu-alg>\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>ExportDeclaration : `export` Declaration</emu-grammar>\n      <emu-alg>\n        1. Return a List whose sole element is the DeclarationPart of |Declaration|.\n      </emu-alg>\n      <emu-grammar>ExportDeclaration : `export` `default` HoistableDeclaration</emu-grammar>\n      <emu-alg>\n        1. Return a List whose sole element is the DeclarationPart of |HoistableDeclaration|.\n      </emu-alg>\n      <emu-grammar>ExportDeclaration : `export` `default` ClassDeclaration</emu-grammar>\n      <emu-alg>\n        1. Return a List whose sole element is |ClassDeclaration|.\n      </emu-alg>\n      <emu-grammar>ExportDeclaration : `export` `default` AssignmentExpression `;`</emu-grammar>\n      <emu-alg>\n        1. Return a List whose sole element is this |ExportDeclaration|.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-static-semantics-vardeclarednames\" oldids=\"sec-statement-semantics-static-semantics-vardeclarednames,sec-block-static-semantics-vardeclarednames,sec-variable-statement-static-semantics-vardeclarednames,sec-if-statement-static-semantics-vardeclarednames,sec-do-while-statement-static-semantics-vardeclarednames,sec-while-statement-static-semantics-vardeclarednames,sec-for-statement-static-semantics-vardeclarednames,sec-for-in-and-for-of-statements-static-semantics-vardeclarednames,sec-with-statement-static-semantics-vardeclarednames,sec-switch-statement-static-semantics-vardeclarednames,sec-labelled-statements-static-semantics-vardeclarednames,sec-try-statement-static-semantics-vardeclarednames,sec-function-definitions-static-semantics-vardeclarednames,sec-arrow-function-definitions-static-semantics-vardeclarednames,sec-async-arrow-function-definitions-static-semantics-VarDeclaredNames,sec-scripts-static-semantics-vardeclarednames,sec-module-semantics-static-semantics-vardeclarednames\" type=\"sdo\">\n      <h1>Static Semantics: VarDeclaredNames ( ): a List of Strings</h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-grammar>\n        Statement :\n          EmptyStatement\n          ExpressionStatement\n          ContinueStatement\n          BreakStatement\n          ReturnStatement\n          ThrowStatement\n          DebuggerStatement\n      </emu-grammar>\n      <emu-alg>\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>Block : `{` `}`</emu-grammar>\n      <emu-alg>\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>StatementList : StatementList StatementListItem</emu-grammar>\n      <emu-alg>\n        1. Let _names1_ be the VarDeclaredNames of |StatementList|.\n        1. Let _names2_ be the VarDeclaredNames of |StatementListItem|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      </emu-alg>\n      <emu-grammar>StatementListItem : Declaration</emu-grammar>\n      <emu-alg>\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>VariableStatement : `var` VariableDeclarationList `;`</emu-grammar>\n      <emu-alg>\n        1. Return the BoundNames of |VariableDeclarationList|.\n      </emu-alg>\n      <emu-grammar>IfStatement : `if` `(` Expression `)` Statement `else` Statement</emu-grammar>\n      <emu-alg>\n        1. Let _names1_ be the VarDeclaredNames of the first |Statement|.\n        1. Let _names2_ be the VarDeclaredNames of the second |Statement|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      </emu-alg>\n      <emu-grammar>IfStatement : `if` `(` Expression `)` Statement</emu-grammar>\n      <emu-alg>\n        1. Return the VarDeclaredNames of |Statement|.\n      </emu-alg>\n      <emu-grammar>DoWhileStatement : `do` Statement `while` `(` Expression `)` `;`</emu-grammar>\n      <emu-alg>\n        1. Return the VarDeclaredNames of |Statement|.\n      </emu-alg>\n      <emu-grammar>WhileStatement : `while` `(` Expression `)` Statement</emu-grammar>\n      <emu-alg>\n        1. Return the VarDeclaredNames of |Statement|.\n      </emu-alg>\n      <emu-grammar>ForStatement : `for` `(` Expression? `;` Expression? `;` Expression? `)` Statement</emu-grammar>\n      <emu-alg>\n        1. Return the VarDeclaredNames of |Statement|.\n      </emu-alg>\n      <emu-grammar>ForStatement : `for` `(` `var` VariableDeclarationList `;` Expression? `;` Expression? `)` Statement</emu-grammar>\n      <emu-alg>\n        1. Let _names1_ be the BoundNames of |VariableDeclarationList|.\n        1. Let _names2_ be the VarDeclaredNames of |Statement|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      </emu-alg>\n      <emu-grammar>ForStatement : `for` `(` LexicalDeclaration Expression? `;` Expression? `)` Statement</emu-grammar>\n      <emu-alg>\n        1. Return the VarDeclaredNames of |Statement|.\n      </emu-alg>\n      <emu-grammar>\n        ForInOfStatement :\n          `for` `(` LeftHandSideExpression `in` Expression `)` Statement\n          `for` `(` ForDeclaration `in` Expression `)` Statement\n          `for` `(` LeftHandSideExpression `of` AssignmentExpression `)` Statement\n          `for` `(` ForDeclaration `of` AssignmentExpression `)` Statement\n          `for` `await` `(` LeftHandSideExpression `of` AssignmentExpression `)` Statement\n          `for` `await` `(` ForDeclaration `of` AssignmentExpression `)` Statement\n      </emu-grammar>\n      <emu-alg>\n        1. Return the VarDeclaredNames of |Statement|.\n      </emu-alg>\n      <emu-grammar>\n        ForInOfStatement :\n          `for` `(` `var` ForBinding `in` Expression `)` Statement\n          `for` `(` `var` ForBinding `of` AssignmentExpression `)` Statement\n          `for` `await` `(` `var` ForBinding `of` AssignmentExpression `)` Statement\n      </emu-grammar>\n      <emu-alg>\n        1. Let _names1_ be the BoundNames of |ForBinding|.\n        1. Let _names2_ be the VarDeclaredNames of |Statement|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      </emu-alg>\n      <emu-note>\n        <p>This section is extended by Annex <emu-xref href=\"#sec-initializers-in-forin-statement-heads\"></emu-xref>.</p>\n      </emu-note>\n      <emu-grammar>WithStatement : `with` `(` Expression `)` Statement</emu-grammar>\n      <emu-alg>\n        1. Return the VarDeclaredNames of |Statement|.\n      </emu-alg>\n      <emu-grammar>SwitchStatement : `switch` `(` Expression `)` CaseBlock</emu-grammar>\n      <emu-alg>\n        1. Return the VarDeclaredNames of |CaseBlock|.\n      </emu-alg>\n      <emu-grammar>CaseBlock : `{` `}`</emu-grammar>\n      <emu-alg>\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>CaseBlock : `{` CaseClauses? DefaultClause CaseClauses? `}`</emu-grammar>\n      <emu-alg>\n        1. If the first |CaseClauses| is present, let _names1_ be the VarDeclaredNames of the first |CaseClauses|.\n        1. Else, let _names1_ be a new empty List.\n        1. Let _names2_ be the VarDeclaredNames of |DefaultClause|.\n        1. If the second |CaseClauses| is present, let _names3_ be the VarDeclaredNames of the second |CaseClauses|.\n        1. Else, let _names3_ be a new empty List.\n        1. Return the list-concatenation of _names1_, _names2_, and _names3_.\n      </emu-alg>\n      <emu-grammar>CaseClauses : CaseClauses CaseClause</emu-grammar>\n      <emu-alg>\n        1. Let _names1_ be the VarDeclaredNames of |CaseClauses|.\n        1. Let _names2_ be the VarDeclaredNames of |CaseClause|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      </emu-alg>\n      <emu-grammar>CaseClause : `case` Expression `:` StatementList?</emu-grammar>\n      <emu-alg>\n        1. If the |StatementList| is present, return the VarDeclaredNames of |StatementList|.\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>DefaultClause : `default` `:` StatementList?</emu-grammar>\n      <emu-alg>\n        1. If the |StatementList| is present, return the VarDeclaredNames of |StatementList|.\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>LabelledStatement : LabelIdentifier `:` LabelledItem</emu-grammar>\n      <emu-alg>\n        1. Return the VarDeclaredNames of |LabelledItem|.\n      </emu-alg>\n      <emu-grammar>LabelledItem : FunctionDeclaration</emu-grammar>\n      <emu-alg>\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>TryStatement : `try` Block Catch</emu-grammar>\n      <emu-alg>\n        1. Let _names1_ be the VarDeclaredNames of |Block|.\n        1. Let _names2_ be the VarDeclaredNames of |Catch|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      </emu-alg>\n      <emu-grammar>TryStatement : `try` Block Finally</emu-grammar>\n      <emu-alg>\n        1. Let _names1_ be the VarDeclaredNames of |Block|.\n        1. Let _names2_ be the VarDeclaredNames of |Finally|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      </emu-alg>\n      <emu-grammar>TryStatement : `try` Block Catch Finally</emu-grammar>\n      <emu-alg>\n        1. Let _names1_ be the VarDeclaredNames of |Block|.\n        1. Let _names2_ be the VarDeclaredNames of |Catch|.\n        1. Let _names3_ be the VarDeclaredNames of |Finally|.\n        1. Return the list-concatenation of _names1_, _names2_, and _names3_.\n      </emu-alg>\n      <emu-grammar>Catch : `catch` `(` CatchParameter `)` Block</emu-grammar>\n      <emu-alg>\n        1. Return the VarDeclaredNames of |Block|.\n      </emu-alg>\n      <emu-grammar>FunctionStatementList : [empty]</emu-grammar>\n      <emu-alg>\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>FunctionStatementList : StatementList</emu-grammar>\n      <emu-alg>\n        1. Return the TopLevelVarDeclaredNames of |StatementList|.\n      </emu-alg>\n      <emu-grammar>ClassStaticBlockStatementList : [empty]</emu-grammar>\n      <emu-alg>\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>ClassStaticBlockStatementList : StatementList</emu-grammar>\n      <emu-alg>\n        1. Return the TopLevelVarDeclaredNames of |StatementList|.\n      </emu-alg>\n      <emu-grammar>ConciseBody : ExpressionBody</emu-grammar>\n      <emu-alg>\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>\n        AsyncConciseBody : ExpressionBody\n      </emu-grammar>\n      <emu-alg>\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>Script : [empty]</emu-grammar>\n      <emu-alg>\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>ScriptBody : StatementList</emu-grammar>\n      <emu-alg>\n        1. Return the TopLevelVarDeclaredNames of |StatementList|.\n      </emu-alg>\n      <emu-grammar>ModuleItemList : ModuleItemList ModuleItem</emu-grammar>\n      <emu-alg>\n        1. Let _names1_ be the VarDeclaredNames of |ModuleItemList|.\n        1. Let _names2_ be the VarDeclaredNames of |ModuleItem|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      </emu-alg>\n      <emu-grammar>ModuleItem : ImportDeclaration</emu-grammar>\n      <emu-alg>\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>ModuleItem : ExportDeclaration</emu-grammar>\n      <emu-alg>\n        1. If |ExportDeclaration| is `export` |VariableStatement|, return the BoundNames of |ExportDeclaration|.\n        1. Return a new empty List.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-static-semantics-varscopeddeclarations\" oldids=\"sec-statement-semantics-static-semantics-varscopeddeclarations,sec-block-static-semantics-varscopeddeclarations,sec-variable-statement-static-semantics-varscopeddeclarations,sec-if-statement-static-semantics-varscopeddeclarations,sec-do-while-statement-static-semantics-varscopeddeclarations,sec-while-statement-static-semantics-varscopeddeclarations,sec-for-statement-static-semantics-varscopeddeclarations,sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations,sec-with-statement-static-semantics-varscopeddeclarations,sec-switch-statement-static-semantics-varscopeddeclarations,sec-labelled-statements-static-semantics-varscopeddeclarations,sec-try-statement-static-semantics-varscopeddeclarations,sec-function-definitions-static-semantics-varscopeddeclarations,sec-arrow-function-definitions-static-semantics-varscopeddeclarations,sec-async-arrow-function-definitions-static-semantics-VarScopedDeclarations,sec-scripts-static-semantics-varscopeddeclarations,sec-module-semantics-static-semantics-varscopeddeclarations\" type=\"sdo\">\n      <h1>Static Semantics: VarScopedDeclarations ( ): a List of Parse Nodes</h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-grammar>\n        Statement :\n          EmptyStatement\n          ExpressionStatement\n          ContinueStatement\n          BreakStatement\n          ReturnStatement\n          ThrowStatement\n          DebuggerStatement\n      </emu-grammar>\n      <emu-alg>\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>Block : `{` `}`</emu-grammar>\n      <emu-alg>\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>StatementList : StatementList StatementListItem</emu-grammar>\n      <emu-alg>\n        1. Let _declarations1_ be the VarScopedDeclarations of |StatementList|.\n        1. Let _declarations2_ be the VarScopedDeclarations of |StatementListItem|.\n        1. Return the list-concatenation of _declarations1_ and _declarations2_.\n      </emu-alg>\n      <emu-grammar>StatementListItem : Declaration</emu-grammar>\n      <emu-alg>\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>VariableDeclarationList : VariableDeclaration</emu-grammar>\n      <emu-alg>\n        1. Return « |VariableDeclaration| ».\n      </emu-alg>\n      <emu-grammar>VariableDeclarationList : VariableDeclarationList `,` VariableDeclaration</emu-grammar>\n      <emu-alg>\n        1. Let _declarations1_ be the VarScopedDeclarations of |VariableDeclarationList|.\n        1. Return the list-concatenation of _declarations1_ and « |VariableDeclaration| ».\n      </emu-alg>\n      <emu-grammar>IfStatement : `if` `(` Expression `)` Statement `else` Statement</emu-grammar>\n      <emu-alg>\n        1. Let _declarations1_ be the VarScopedDeclarations of the first |Statement|.\n        1. Let _declarations2_ be the VarScopedDeclarations of the second |Statement|.\n        1. Return the list-concatenation of _declarations1_ and _declarations2_.\n      </emu-alg>\n      <emu-grammar>IfStatement : `if` `(` Expression `)` Statement</emu-grammar>\n      <emu-alg>\n        1. Return the VarScopedDeclarations of |Statement|.\n      </emu-alg>\n      <emu-grammar>DoWhileStatement : `do` Statement `while` `(` Expression `)` `;`</emu-grammar>\n      <emu-alg>\n        1. Return the VarScopedDeclarations of |Statement|.\n      </emu-alg>\n      <emu-grammar>WhileStatement : `while` `(` Expression `)` Statement</emu-grammar>\n      <emu-alg>\n        1. Return the VarScopedDeclarations of |Statement|.\n      </emu-alg>\n      <emu-grammar>ForStatement : `for` `(` Expression? `;` Expression? `;` Expression? `)` Statement</emu-grammar>\n      <emu-alg>\n        1. Return the VarScopedDeclarations of |Statement|.\n      </emu-alg>\n      <emu-grammar>ForStatement : `for` `(` `var` VariableDeclarationList `;` Expression? `;` Expression? `)` Statement</emu-grammar>\n      <emu-alg>\n        1. Let _declarations1_ be the VarScopedDeclarations of |VariableDeclarationList|.\n        1. Let _declarations2_ be the VarScopedDeclarations of |Statement|.\n        1. Return the list-concatenation of _declarations1_ and _declarations2_.\n      </emu-alg>\n      <emu-grammar>ForStatement : `for` `(` LexicalDeclaration Expression? `;` Expression? `)` Statement</emu-grammar>\n      <emu-alg>\n        1. Return the VarScopedDeclarations of |Statement|.\n      </emu-alg>\n      <emu-grammar>\n        ForInOfStatement :\n          `for` `(` LeftHandSideExpression `in` Expression `)` Statement\n          `for` `(` ForDeclaration `in` Expression `)` Statement\n          `for` `(` LeftHandSideExpression `of` AssignmentExpression `)` Statement\n          `for` `(` ForDeclaration `of` AssignmentExpression `)` Statement\n          `for` `await` `(` LeftHandSideExpression `of` AssignmentExpression `)` Statement\n          `for` `await` `(` ForDeclaration `of` AssignmentExpression `)` Statement\n      </emu-grammar>\n      <emu-alg>\n        1. Return the VarScopedDeclarations of |Statement|.\n      </emu-alg>\n      <emu-grammar>\n        ForInOfStatement :\n          `for` `(` `var` ForBinding `in` Expression `)` Statement\n          `for` `(` `var` ForBinding `of` AssignmentExpression `)` Statement\n          `for` `await` `(` `var` ForBinding `of` AssignmentExpression `)` Statement\n      </emu-grammar>\n      <emu-alg>\n        1. Let _declarations1_ be « |ForBinding| ».\n        1. Let _declarations2_ be the VarScopedDeclarations of |Statement|.\n        1. Return the list-concatenation of _declarations1_ and _declarations2_.\n      </emu-alg>\n      <emu-note>\n        <p>This section is extended by Annex <emu-xref href=\"#sec-initializers-in-forin-statement-heads\"></emu-xref>.</p>\n      </emu-note>\n      <emu-grammar>WithStatement : `with` `(` Expression `)` Statement</emu-grammar>\n      <emu-alg>\n        1. Return the VarScopedDeclarations of |Statement|.\n      </emu-alg>\n      <emu-grammar>SwitchStatement : `switch` `(` Expression `)` CaseBlock</emu-grammar>\n      <emu-alg>\n        1. Return the VarScopedDeclarations of |CaseBlock|.\n      </emu-alg>\n      <emu-grammar>CaseBlock : `{` `}`</emu-grammar>\n      <emu-alg>\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>CaseBlock : `{` CaseClauses? DefaultClause CaseClauses? `}`</emu-grammar>\n      <emu-alg>\n        1. If the first |CaseClauses| is present, let _declarations1_ be the VarScopedDeclarations of the first |CaseClauses|.\n        1. Else, let _declarations1_ be a new empty List.\n        1. Let _declarations2_ be the VarScopedDeclarations of |DefaultClause|.\n        1. If the second |CaseClauses| is present, let _declarations3_ be the VarScopedDeclarations of the second |CaseClauses|.\n        1. Else, let _declarations3_ be a new empty List.\n        1. Return the list-concatenation of _declarations1_, _declarations2_, and _declarations3_.\n      </emu-alg>\n      <emu-grammar>CaseClauses : CaseClauses CaseClause</emu-grammar>\n      <emu-alg>\n        1. Let _declarations1_ be the VarScopedDeclarations of |CaseClauses|.\n        1. Let _declarations2_ be the VarScopedDeclarations of |CaseClause|.\n        1. Return the list-concatenation of _declarations1_ and _declarations2_.\n      </emu-alg>\n      <emu-grammar>CaseClause : `case` Expression `:` StatementList?</emu-grammar>\n      <emu-alg>\n        1. If the |StatementList| is present, return the VarScopedDeclarations of |StatementList|.\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>DefaultClause : `default` `:` StatementList?</emu-grammar>\n      <emu-alg>\n        1. If the |StatementList| is present, return the VarScopedDeclarations of |StatementList|.\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>LabelledStatement : LabelIdentifier `:` LabelledItem</emu-grammar>\n      <emu-alg>\n        1. Return the VarScopedDeclarations of |LabelledItem|.\n      </emu-alg>\n      <emu-grammar>LabelledItem : FunctionDeclaration</emu-grammar>\n      <emu-alg>\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>TryStatement : `try` Block Catch</emu-grammar>\n      <emu-alg>\n        1. Let _declarations1_ be the VarScopedDeclarations of |Block|.\n        1. Let _declarations2_ be the VarScopedDeclarations of |Catch|.\n        1. Return the list-concatenation of _declarations1_ and _declarations2_.\n      </emu-alg>\n      <emu-grammar>TryStatement : `try` Block Finally</emu-grammar>\n      <emu-alg>\n        1. Let _declarations1_ be the VarScopedDeclarations of |Block|.\n        1. Let _declarations2_ be the VarScopedDeclarations of |Finally|.\n        1. Return the list-concatenation of _declarations1_ and _declarations2_.\n      </emu-alg>\n      <emu-grammar>TryStatement : `try` Block Catch Finally</emu-grammar>\n      <emu-alg>\n        1. Let _declarations1_ be the VarScopedDeclarations of |Block|.\n        1. Let _declarations2_ be the VarScopedDeclarations of |Catch|.\n        1. Let _declarations3_ be the VarScopedDeclarations of |Finally|.\n        1. Return the list-concatenation of _declarations1_, _declarations2_, and _declarations3_.\n      </emu-alg>\n      <emu-grammar>Catch : `catch` `(` CatchParameter `)` Block</emu-grammar>\n      <emu-alg>\n        1. Return the VarScopedDeclarations of |Block|.\n      </emu-alg>\n      <emu-grammar>FunctionStatementList : [empty]</emu-grammar>\n      <emu-alg>\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>FunctionStatementList : StatementList</emu-grammar>\n      <emu-alg>\n        1. Return the TopLevelVarScopedDeclarations of |StatementList|.\n      </emu-alg>\n      <emu-grammar>ClassStaticBlockStatementList : [empty]</emu-grammar>\n      <emu-alg>\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>ClassStaticBlockStatementList : StatementList</emu-grammar>\n      <emu-alg>\n        1. Return the TopLevelVarScopedDeclarations of |StatementList|.\n      </emu-alg>\n      <emu-grammar>ConciseBody : ExpressionBody</emu-grammar>\n      <emu-alg>\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>\n        AsyncConciseBody : ExpressionBody\n      </emu-grammar>\n      <emu-alg>\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>Script : [empty]</emu-grammar>\n      <emu-alg>\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>ScriptBody : StatementList</emu-grammar>\n      <emu-alg>\n        1. Return the TopLevelVarScopedDeclarations of |StatementList|.\n      </emu-alg>\n      <emu-grammar>Module : [empty]</emu-grammar>\n      <emu-alg>\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>ModuleItemList : ModuleItemList ModuleItem</emu-grammar>\n      <emu-alg>\n        1. Let _declarations1_ be the VarScopedDeclarations of |ModuleItemList|.\n        1. Let _declarations2_ be the VarScopedDeclarations of |ModuleItem|.\n        1. Return the list-concatenation of _declarations1_ and _declarations2_.\n      </emu-alg>\n      <emu-grammar>ModuleItem : ImportDeclaration</emu-grammar>\n      <emu-alg>\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>ModuleItem : ExportDeclaration</emu-grammar>\n      <emu-alg>\n        1. If |ExportDeclaration| is `export` |VariableStatement|, return the VarScopedDeclarations of |VariableStatement|.\n        1. Return a new empty List.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-static-semantics-toplevellexicallydeclarednames\" oldids=\"sec-block-static-semantics-toplevellexicallydeclarednames,sec-labelled-statements-static-semantics-toplevellexicallydeclarednames\" type=\"sdo\">\n      <h1>Static Semantics: TopLevelLexicallyDeclaredNames ( ): a List of Strings</h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-grammar>StatementList : StatementList StatementListItem</emu-grammar>\n      <emu-alg>\n        1. Let _names1_ be the TopLevelLexicallyDeclaredNames of |StatementList|.\n        1. Let _names2_ be the TopLevelLexicallyDeclaredNames of |StatementListItem|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      </emu-alg>\n      <emu-grammar>StatementListItem : Statement</emu-grammar>\n      <emu-alg>\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>StatementListItem : Declaration</emu-grammar>\n      <emu-alg>\n        1. If |Declaration| is <emu-grammar>Declaration : HoistableDeclaration</emu-grammar>, then\n          1. Return a new empty List.\n        1. Return the BoundNames of |Declaration|.\n      </emu-alg>\n      <emu-note>\n        <p>At the top level of a function, or script, function declarations are treated like var declarations rather than like lexical declarations.</p>\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-static-semantics-toplevellexicallyscopeddeclarations\" oldids=\"sec-block-static-semantics-toplevellexicallyscopeddeclarations,sec-labelled-statements-static-semantics-toplevellexicallyscopeddeclarations\" type=\"sdo\">\n      <h1>Static Semantics: TopLevelLexicallyScopedDeclarations ( ): a List of Parse Nodes</h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-grammar>StatementList : StatementList StatementListItem</emu-grammar>\n      <emu-alg>\n        1. Let _declarations1_ be the TopLevelLexicallyScopedDeclarations of |StatementList|.\n        1. Let _declarations2_ be the TopLevelLexicallyScopedDeclarations of |StatementListItem|.\n        1. Return the list-concatenation of _declarations1_ and _declarations2_.\n      </emu-alg>\n      <emu-grammar>StatementListItem : Statement</emu-grammar>\n      <emu-alg>\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>StatementListItem : Declaration</emu-grammar>\n      <emu-alg>\n        1. If |Declaration| is <emu-grammar>Declaration : HoistableDeclaration</emu-grammar>, then\n          1. Return a new empty List.\n        1. Return « |Declaration| ».\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-static-semantics-toplevelvardeclarednames\" oldids=\"sec-block-static-semantics-toplevelvardeclarednames,sec-labelled-statements-static-semantics-toplevelvardeclarednames\" type=\"sdo\">\n      <h1>Static Semantics: TopLevelVarDeclaredNames ( ): a List of Strings</h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-grammar>StatementList : StatementList StatementListItem</emu-grammar>\n      <emu-alg>\n        1. Let _names1_ be the TopLevelVarDeclaredNames of |StatementList|.\n        1. Let _names2_ be the TopLevelVarDeclaredNames of |StatementListItem|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      </emu-alg>\n      <emu-grammar>StatementListItem : Declaration</emu-grammar>\n      <emu-alg>\n        1. If |Declaration| is <emu-grammar>Declaration : HoistableDeclaration</emu-grammar>, then\n          1. Return the BoundNames of |HoistableDeclaration|.\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>StatementListItem : Statement</emu-grammar>\n      <emu-alg>\n        1. If |Statement| is <emu-grammar>Statement : LabelledStatement</emu-grammar>, return the TopLevelVarDeclaredNames of |Statement|.\n        1. Return the VarDeclaredNames of |Statement|.\n      </emu-alg>\n      <emu-note>\n        <p>At the top level of a function or script, inner function declarations are treated like var declarations.</p>\n      </emu-note>\n      <emu-grammar>LabelledStatement : LabelIdentifier `:` LabelledItem</emu-grammar>\n      <emu-alg>\n        1. Return the TopLevelVarDeclaredNames of |LabelledItem|.\n      </emu-alg>\n      <emu-grammar>LabelledItem : Statement</emu-grammar>\n      <emu-alg>\n        1. If |Statement| is <emu-grammar>Statement : LabelledStatement</emu-grammar>, return the TopLevelVarDeclaredNames of |Statement|.\n        1. Return the VarDeclaredNames of |Statement|.\n      </emu-alg>\n      <emu-grammar>LabelledItem : FunctionDeclaration</emu-grammar>\n      <emu-alg>\n        1. Return the BoundNames of |FunctionDeclaration|.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-static-semantics-toplevelvarscopeddeclarations\" oldids=\"sec-block-static-semantics-toplevelvarscopeddeclarations,sec-labelled-statements-static-semantics-toplevelvarscopeddeclarations\" type=\"sdo\">\n      <h1>Static Semantics: TopLevelVarScopedDeclarations ( ): a List of Parse Nodes</h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-grammar>StatementList : StatementList StatementListItem</emu-grammar>\n      <emu-alg>\n        1. Let _declarations1_ be the TopLevelVarScopedDeclarations of |StatementList|.\n        1. Let _declarations2_ be the TopLevelVarScopedDeclarations of |StatementListItem|.\n        1. Return the list-concatenation of _declarations1_ and _declarations2_.\n      </emu-alg>\n      <emu-grammar>StatementListItem : Statement</emu-grammar>\n      <emu-alg>\n        1. If |Statement| is <emu-grammar>Statement : LabelledStatement</emu-grammar>, return the TopLevelVarScopedDeclarations of |Statement|.\n        1. Return the VarScopedDeclarations of |Statement|.\n      </emu-alg>\n      <emu-grammar>StatementListItem : Declaration</emu-grammar>\n      <emu-alg>\n        1. If |Declaration| is <emu-grammar>Declaration : HoistableDeclaration</emu-grammar>, then\n          1. Let _declaration_ be the DeclarationPart of |HoistableDeclaration|.\n          1. Return « _declaration_ ».\n        1. Return a new empty List.\n      </emu-alg>\n      <emu-grammar>LabelledStatement : LabelIdentifier `:` LabelledItem</emu-grammar>\n      <emu-alg>\n        1. Return the TopLevelVarScopedDeclarations of |LabelledItem|.\n      </emu-alg>\n      <emu-grammar>LabelledItem : Statement</emu-grammar>\n      <emu-alg>\n        1. If |Statement| is <emu-grammar>Statement : LabelledStatement</emu-grammar>, return the TopLevelVarScopedDeclarations of |Statement|.\n        1. Return the VarScopedDeclarations of |Statement|.\n      </emu-alg>\n      <emu-grammar>LabelledItem : FunctionDeclaration</emu-grammar>\n      <emu-alg>\n        1. Return « |FunctionDeclaration| ».\n      </emu-alg>\n    </emu-clause>\n  </emu-clause>\n\n  <emu-clause id=\"sec-syntax-directed-operations-labels\">\n    <h1>Labels</h1>\n\n    <emu-clause id=\"sec-static-semantics-containsduplicatelabels\" oldids=\"sec-statement-semantics-static-semantics-containsduplicatelabels,sec-block-static-semantics-containsduplicatelabels,sec-if-statement-static-semantics-containsduplicatelabels,sec-do-while-statement-static-semantics-containsduplicatelabels,sec-while-statement-static-semantics-containsduplicatelabels,sec-for-statement-static-semantics-containsduplicatelabels,sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels,sec-with-statement-static-semantics-containsduplicatelabels,sec-switch-statement-static-semantics-containsduplicatelabels,sec-labelled-statements-static-semantics-containsduplicatelabels,sec-try-statement-static-semantics-containsduplicatelabels,sec-function-definitions-static-semantics-containsduplicatelabels,sec-module-semantics-static-semantics-containsduplicatelabels\" type=\"sdo\">\n      <h1>\n        Static Semantics: ContainsDuplicateLabels (\n          _labelSet_: a List of Strings,\n        ): a Boolean\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-grammar>\n        Statement :\n          VariableStatement\n          EmptyStatement\n          ExpressionStatement\n          ContinueStatement\n          BreakStatement\n          ReturnStatement\n          ThrowStatement\n          DebuggerStatement\n\n        Block :\n          `{` `}`\n\n        StatementListItem :\n          Declaration\n      </emu-grammar>\n      <emu-alg>\n        1. Return *false*.\n      </emu-alg>\n      <emu-grammar>StatementList : StatementList StatementListItem</emu-grammar>\n      <emu-alg>\n        1. Let _hasDuplicates_ be ContainsDuplicateLabels of |StatementList| with argument _labelSet_.\n        1. If _hasDuplicates_ is *true*, return *true*.\n        1. Return ContainsDuplicateLabels of |StatementListItem| with argument _labelSet_.\n      </emu-alg>\n      <emu-grammar>IfStatement : `if` `(` Expression `)` Statement `else` Statement</emu-grammar>\n      <emu-alg>\n        1. Let _hasDuplicate_ be ContainsDuplicateLabels of the first |Statement| with argument _labelSet_.\n        1. If _hasDuplicate_ is *true*, return *true*.\n        1. Return ContainsDuplicateLabels of the second |Statement| with argument _labelSet_.\n      </emu-alg>\n      <emu-grammar>IfStatement : `if` `(` Expression `)` Statement</emu-grammar>\n      <emu-alg>\n        1. Return ContainsDuplicateLabels of |Statement| with argument _labelSet_.\n      </emu-alg>\n      <emu-grammar>DoWhileStatement : `do` Statement `while` `(` Expression `)` `;`</emu-grammar>\n      <emu-alg>\n        1. Return ContainsDuplicateLabels of |Statement| with argument _labelSet_.\n      </emu-alg>\n      <emu-grammar>WhileStatement : `while` `(` Expression `)` Statement</emu-grammar>\n      <emu-alg>\n        1. Return ContainsDuplicateLabels of |Statement| with argument _labelSet_.\n      </emu-alg>\n      <emu-grammar>\n        ForStatement :\n          `for` `(` Expression? `;` Expression? `;` Expression? `)` Statement\n          `for` `(` `var` VariableDeclarationList `;` Expression? `;` Expression? `)` Statement\n          `for` `(` LexicalDeclaration Expression? `;` Expression? `)` Statement\n      </emu-grammar>\n      <emu-alg>\n        1. Return ContainsDuplicateLabels of |Statement| with argument _labelSet_.\n      </emu-alg>\n      <emu-grammar>\n        ForInOfStatement :\n          `for` `(` LeftHandSideExpression `in` Expression `)` Statement\n          `for` `(` `var` ForBinding `in` Expression `)` Statement\n          `for` `(` ForDeclaration `in` Expression `)` Statement\n          `for` `(` LeftHandSideExpression `of` AssignmentExpression `)` Statement\n          `for` `(` `var` ForBinding `of` AssignmentExpression `)` Statement\n          `for` `(` ForDeclaration `of` AssignmentExpression `)` Statement\n          `for` `await` `(` LeftHandSideExpression `of` AssignmentExpression `)` Statement\n          `for` `await` `(` `var` ForBinding `of` AssignmentExpression `)` Statement\n          `for` `await` `(` ForDeclaration `of` AssignmentExpression `)` Statement\n      </emu-grammar>\n      <emu-alg>\n        1. Return ContainsDuplicateLabels of |Statement| with argument _labelSet_.\n      </emu-alg>\n      <emu-note>\n        <p>This section is extended by Annex <emu-xref href=\"#sec-initializers-in-forin-statement-heads\"></emu-xref>.</p>\n      </emu-note>\n      <emu-grammar>WithStatement : `with` `(` Expression `)` Statement</emu-grammar>\n      <emu-alg>\n        1. Return ContainsDuplicateLabels of |Statement| with argument _labelSet_.\n      </emu-alg>\n      <emu-grammar>SwitchStatement : `switch` `(` Expression `)` CaseBlock</emu-grammar>\n      <emu-alg>\n        1. Return ContainsDuplicateLabels of |CaseBlock| with argument _labelSet_.\n      </emu-alg>\n      <emu-grammar>CaseBlock : `{` `}`</emu-grammar>\n      <emu-alg>\n        1. Return *false*.\n      </emu-alg>\n      <emu-grammar>CaseBlock : `{` CaseClauses? DefaultClause CaseClauses? `}`</emu-grammar>\n      <emu-alg>\n        1. If the first |CaseClauses| is present, then\n          1. If ContainsDuplicateLabels of the first |CaseClauses| with argument _labelSet_ is *true*, return *true*.\n        1. If ContainsDuplicateLabels of |DefaultClause| with argument _labelSet_ is *true*, return *true*.\n        1. If the second |CaseClauses| is not present, return *false*.\n        1. Return ContainsDuplicateLabels of the second |CaseClauses| with argument _labelSet_.\n      </emu-alg>\n      <emu-grammar>CaseClauses : CaseClauses CaseClause</emu-grammar>\n      <emu-alg>\n        1. Let _hasDuplicates_ be ContainsDuplicateLabels of |CaseClauses| with argument _labelSet_.\n        1. If _hasDuplicates_ is *true*, return *true*.\n        1. Return ContainsDuplicateLabels of |CaseClause| with argument _labelSet_.\n      </emu-alg>\n      <emu-grammar>CaseClause : `case` Expression `:` StatementList?</emu-grammar>\n      <emu-alg>\n        1. If the |StatementList| is present, return ContainsDuplicateLabels of |StatementList| with argument _labelSet_.\n        1. Return *false*.\n      </emu-alg>\n      <emu-grammar>DefaultClause : `default` `:` StatementList?</emu-grammar>\n      <emu-alg>\n        1. If the |StatementList| is present, return ContainsDuplicateLabels of |StatementList| with argument _labelSet_.\n        1. Return *false*.\n      </emu-alg>\n      <emu-grammar>LabelledStatement : LabelIdentifier `:` LabelledItem</emu-grammar>\n      <emu-alg>\n        1. Let _label_ be the StringValue of |LabelIdentifier|.\n        1. If _labelSet_ contains _label_, return *true*.\n        1. Let _newLabelSet_ be the list-concatenation of _labelSet_ and « _label_ ».\n        1. Return ContainsDuplicateLabels of |LabelledItem| with argument _newLabelSet_.\n      </emu-alg>\n      <emu-grammar>LabelledItem : FunctionDeclaration</emu-grammar>\n      <emu-alg>\n        1. Return *false*.\n      </emu-alg>\n      <emu-grammar>TryStatement : `try` Block Catch</emu-grammar>\n      <emu-alg>\n        1. Let _hasDuplicates_ be ContainsDuplicateLabels of |Block| with argument _labelSet_.\n        1. If _hasDuplicates_ is *true*, return *true*.\n        1. Return ContainsDuplicateLabels of |Catch| with argument _labelSet_.\n      </emu-alg>\n      <emu-grammar>TryStatement : `try` Block Finally</emu-grammar>\n      <emu-alg>\n        1. Let _hasDuplicates_ be ContainsDuplicateLabels of |Block| with argument _labelSet_.\n        1. If _hasDuplicates_ is *true*, return *true*.\n        1. Return ContainsDuplicateLabels of |Finally| with argument _labelSet_.\n      </emu-alg>\n      <emu-grammar>TryStatement : `try` Block Catch Finally</emu-grammar>\n      <emu-alg>\n        1. If ContainsDuplicateLabels of |Block| with argument _labelSet_ is *true*, return *true*.\n        1. If ContainsDuplicateLabels of |Catch| with argument _labelSet_ is *true*, return *true*.\n        1. Return ContainsDuplicateLabels of |Finally| with argument _labelSet_.\n      </emu-alg>\n      <emu-grammar>Catch : `catch` `(` CatchParameter `)` Block</emu-grammar>\n      <emu-alg>\n        1. Return ContainsDuplicateLabels of |Block| with argument _labelSet_.\n      </emu-alg>\n      <emu-grammar>FunctionStatementList : [empty]</emu-grammar>\n      <emu-alg>\n        1. Return *false*.\n      </emu-alg>\n      <emu-grammar>ClassStaticBlockStatementList : [empty]</emu-grammar>\n      <emu-alg>\n        1. Return *false*.\n      </emu-alg>\n      <emu-grammar>ModuleItemList : ModuleItemList ModuleItem</emu-grammar>\n      <emu-alg>\n        1. Let _hasDuplicates_ be ContainsDuplicateLabels of |ModuleItemList| with argument _labelSet_.\n        1. If _hasDuplicates_ is *true*, return *true*.\n        1. Return ContainsDuplicateLabels of |ModuleItem| with argument _labelSet_.\n      </emu-alg>\n      <emu-grammar>\n        ModuleItem :\n          ImportDeclaration\n          ExportDeclaration\n      </emu-grammar>\n      <emu-alg>\n        1. Return *false*.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-static-semantics-containsundefinedbreaktarget\" oldids=\"sec-statement-semantics-static-semantics-containsundefinedbreaktarget,sec-block-static-semantics-containsundefinedbreaktarget,sec-if-statement-static-semantics-containsundefinedbreaktarget,sec-do-while-statement-static-semantics-containsundefinedbreaktarget,sec-while-statement-static-semantics-containsundefinedbreaktarget,sec-for-statement-static-semantics-containsundefinedbreaktarget,sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget,sec-break-statement-static-semantics-containsundefinedbreaktarget,sec-with-statement-static-semantics-containsundefinedbreaktarget,sec-switch-statement-static-semantics-containsundefinedbreaktarget,sec-labelled-statements-static-semantics-containsundefinedbreaktarget,sec-try-statement-static-semantics-containsundefinedbreaktarget,sec-function-definitions-static-semantics-containsundefinedbreaktarget,sec-module-semantics-static-semantics-containsundefinedbreaktarget\" type=\"sdo\">\n      <h1>\n        Static Semantics: ContainsUndefinedBreakTarget (\n          _labelSet_: a List of Strings,\n        ): a Boolean\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-grammar>\n        Statement :\n          VariableStatement\n          EmptyStatement\n          ExpressionStatement\n          ContinueStatement\n          ReturnStatement\n          ThrowStatement\n          DebuggerStatement\n\n        Block :\n          `{` `}`\n\n        StatementListItem :\n          Declaration\n      </emu-grammar>\n      <emu-alg>\n        1. Return *false*.\n      </emu-alg>\n      <emu-grammar>StatementList : StatementList StatementListItem</emu-grammar>\n      <emu-alg>\n        1. Let _hasUndefinedLabels_ be ContainsUndefinedBreakTarget of |StatementList| with argument _labelSet_.\n        1. If _hasUndefinedLabels_ is *true*, return *true*.\n        1. Return ContainsUndefinedBreakTarget of |StatementListItem| with argument _labelSet_.\n      </emu-alg>\n      <emu-grammar>IfStatement : `if` `(` Expression `)` Statement `else` Statement</emu-grammar>\n      <emu-alg>\n        1. Let _hasUndefinedLabels_ be ContainsUndefinedBreakTarget of the first |Statement| with argument _labelSet_.\n        1. If _hasUndefinedLabels_ is *true*, return *true*.\n        1. Return ContainsUndefinedBreakTarget of the second |Statement| with argument _labelSet_.\n      </emu-alg>\n      <emu-grammar>IfStatement : `if` `(` Expression `)` Statement</emu-grammar>\n      <emu-alg>\n        1. Return ContainsUndefinedBreakTarget of |Statement| with argument _labelSet_.\n      </emu-alg>\n      <emu-grammar>DoWhileStatement : `do` Statement `while` `(` Expression `)` `;`</emu-grammar>\n      <emu-alg>\n        1. Return ContainsUndefinedBreakTarget of |Statement| with argument _labelSet_.\n      </emu-alg>\n      <emu-grammar>WhileStatement : `while` `(` Expression `)` Statement</emu-grammar>\n      <emu-alg>\n        1. Return ContainsUndefinedBreakTarget of |Statement| with argument _labelSet_.\n      </emu-alg>\n      <emu-grammar>\n        ForStatement :\n          `for` `(` Expression? `;` Expression? `;` Expression? `)` Statement\n          `for` `(` `var` VariableDeclarationList `;` Expression? `;` Expression? `)` Statement\n          `for` `(` LexicalDeclaration Expression? `;` Expression? `)` Statement\n      </emu-grammar>\n      <emu-alg>\n        1. Return ContainsUndefinedBreakTarget of |Statement| with argument _labelSet_.\n      </emu-alg>\n      <emu-grammar>\n        ForInOfStatement :\n          `for` `(` LeftHandSideExpression `in` Expression `)` Statement\n          `for` `(` `var` ForBinding `in` Expression `)` Statement\n          `for` `(` ForDeclaration `in` Expression `)` Statement\n          `for` `(` LeftHandSideExpression `of` AssignmentExpression `)` Statement\n          `for` `(` `var` ForBinding `of` AssignmentExpression `)` Statement\n          `for` `(` ForDeclaration `of` AssignmentExpression `)` Statement\n          `for` `await` `(` LeftHandSideExpression `of` AssignmentExpression `)` Statement\n          `for` `await` `(` `var` ForBinding `of` AssignmentExpression `)` Statement\n          `for` `await` `(` ForDeclaration `of` AssignmentExpression `)` Statement\n      </emu-grammar>\n      <emu-alg>\n        1. Return ContainsUndefinedBreakTarget of |Statement| with argument _labelSet_.\n      </emu-alg>\n      <emu-note>\n        <p>This section is extended by Annex <emu-xref href=\"#sec-initializers-in-forin-statement-heads\"></emu-xref>.</p>\n      </emu-note>\n      <emu-grammar>BreakStatement : `break` `;`</emu-grammar>\n      <emu-alg>\n        1. Return *false*.\n      </emu-alg>\n      <emu-grammar>BreakStatement : `break` LabelIdentifier `;`</emu-grammar>\n      <emu-alg>\n        1. If _labelSet_ does not contain the StringValue of |LabelIdentifier|, return *true*.\n        1. Return *false*.\n      </emu-alg>\n      <emu-grammar>WithStatement : `with` `(` Expression `)` Statement</emu-grammar>\n      <emu-alg>\n        1. Return ContainsUndefinedBreakTarget of |Statement| with argument _labelSet_.\n      </emu-alg>\n      <emu-grammar>SwitchStatement : `switch` `(` Expression `)` CaseBlock</emu-grammar>\n      <emu-alg>\n        1. Return ContainsUndefinedBreakTarget of |CaseBlock| with argument _labelSet_.\n      </emu-alg>\n      <emu-grammar>CaseBlock : `{` `}`</emu-grammar>\n      <emu-alg>\n        1. Return *false*.\n      </emu-alg>\n      <emu-grammar>CaseBlock : `{` CaseClauses? DefaultClause CaseClauses? `}`</emu-grammar>\n      <emu-alg>\n        1. If the first |CaseClauses| is present, then\n          1. If ContainsUndefinedBreakTarget of the first |CaseClauses| with argument _labelSet_ is *true*, return *true*.\n        1. If ContainsUndefinedBreakTarget of |DefaultClause| with argument _labelSet_ is *true*, return *true*.\n        1. If the second |CaseClauses| is not present, return *false*.\n        1. Return ContainsUndefinedBreakTarget of the second |CaseClauses| with argument _labelSet_.\n      </emu-alg>\n      <emu-grammar>CaseClauses : CaseClauses CaseClause</emu-grammar>\n      <emu-alg>\n        1. Let _hasUndefinedLabels_ be ContainsUndefinedBreakTarget of |CaseClauses| with argument _labelSet_.\n        1. If _hasUndefinedLabels_ is *true*, return *true*.\n        1. Return ContainsUndefinedBreakTarget of |CaseClause| with argument _labelSet_.\n      </emu-alg>\n      <emu-grammar>CaseClause : `case` Expression `:` StatementList?</emu-grammar>\n      <emu-alg>\n        1. If the |StatementList| is present, return ContainsUndefinedBreakTarget of |StatementList| with argument _labelSet_.\n        1. Return *false*.\n      </emu-alg>\n      <emu-grammar>DefaultClause : `default` `:` StatementList?</emu-grammar>\n      <emu-alg>\n        1. If the |StatementList| is present, return ContainsUndefinedBreakTarget of |StatementList| with argument _labelSet_.\n        1. Return *false*.\n      </emu-alg>\n      <emu-grammar>LabelledStatement : LabelIdentifier `:` LabelledItem</emu-grammar>\n      <emu-alg>\n        1. Let _label_ be the StringValue of |LabelIdentifier|.\n        1. Let _newLabelSet_ be the list-concatenation of _labelSet_ and « _label_ ».\n        1. Return ContainsUndefinedBreakTarget of |LabelledItem| with argument _newLabelSet_.\n      </emu-alg>\n      <emu-grammar>LabelledItem : FunctionDeclaration</emu-grammar>\n      <emu-alg>\n        1. Return *false*.\n      </emu-alg>\n      <emu-grammar>TryStatement : `try` Block Catch</emu-grammar>\n      <emu-alg>\n        1. Let _hasUndefinedLabels_ be ContainsUndefinedBreakTarget of |Block| with argument _labelSet_.\n        1. If _hasUndefinedLabels_ is *true*, return *true*.\n        1. Return ContainsUndefinedBreakTarget of |Catch| with argument _labelSet_.\n      </emu-alg>\n      <emu-grammar>TryStatement : `try` Block Finally</emu-grammar>\n      <emu-alg>\n        1. Let _hasUndefinedLabels_ be ContainsUndefinedBreakTarget of |Block| with argument _labelSet_.\n        1. If _hasUndefinedLabels_ is *true*, return *true*.\n        1. Return ContainsUndefinedBreakTarget of |Finally| with argument _labelSet_.\n      </emu-alg>\n      <emu-grammar>TryStatement : `try` Block Catch Finally</emu-grammar>\n      <emu-alg>\n        1. If ContainsUndefinedBreakTarget of |Block| with argument _labelSet_ is *true*, return *true*.\n        1. If ContainsUndefinedBreakTarget of |Catch| with argument _labelSet_ is *true*, return *true*.\n        1. Return ContainsUndefinedBreakTarget of |Finally| with argument _labelSet_.\n      </emu-alg>\n      <emu-grammar>Catch : `catch` `(` CatchParameter `)` Block</emu-grammar>\n      <emu-alg>\n        1. Return ContainsUndefinedBreakTarget of |Block| with argument _labelSet_.\n      </emu-alg>\n      <emu-grammar>FunctionStatementList : [empty]</emu-grammar>\n      <emu-alg>\n        1. Return *false*.\n      </emu-alg>\n      <emu-grammar>ClassStaticBlockStatementList : [empty]</emu-grammar>\n      <emu-alg>\n        1. Return *false*.\n      </emu-alg>\n      <emu-grammar>ModuleItemList : ModuleItemList ModuleItem</emu-grammar>\n      <emu-alg>\n        1. Let _hasUndefinedLabels_ be ContainsUndefinedBreakTarget of |ModuleItemList| with argument _labelSet_.\n        1. If _hasUndefinedLabels_ is *true*, return *true*.\n        1. Return ContainsUndefinedBreakTarget of |ModuleItem| with argument _labelSet_.\n      </emu-alg>\n      <emu-grammar>\n        ModuleItem :\n          ImportDeclaration\n          ExportDeclaration\n      </emu-grammar>\n      <emu-alg>\n        1. Return *false*.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-static-semantics-containsundefinedcontinuetarget\" oldids=\"sec-statement-semantics-static-semantics-containsundefinedcontinuetarget,sec-block-static-semantics-containsundefinedcontinuetarget,sec-if-statement-static-semantics-containsundefinedcontinuetarget,sec-do-while-statement-static-semantics-containsundefinedcontinuetarget,sec-while-statement-static-semantics-containsundefinedcontinuetarget,sec-for-statement-static-semantics-containsundefinedcontinuetarget,sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget,sec-continue-statement-static-semantics-containsundefinedcontinuetarget,sec-with-statement-static-semantics-containsundefinedcontinuetarget,sec-switch-statement-static-semantics-containsundefinedcontinuetarget,sec-labelled-statements-static-semantics-containsundefinedcontinuetarget,sec-try-statement-static-semantics-containsundefinedcontinuetarget,sec-function-definitions-static-semantics-containsundefinedcontinuetarget,sec-module-semantics-static-semantics-containsundefinedcontinuetarget\" type=\"sdo\">\n      <h1>\n        Static Semantics: ContainsUndefinedContinueTarget (\n          _iterationSet_: a List of Strings,\n          _labelSet_: a List of Strings,\n        ): a Boolean\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-grammar>\n        Statement :\n          VariableStatement\n          EmptyStatement\n          ExpressionStatement\n          BreakStatement\n          ReturnStatement\n          ThrowStatement\n          DebuggerStatement\n\n        Block :\n          `{` `}`\n\n        StatementListItem :\n          Declaration\n      </emu-grammar>\n      <emu-alg>\n        1. Return *false*.\n      </emu-alg>\n      <emu-grammar>Statement : BlockStatement</emu-grammar>\n      <emu-alg>\n        1. Return ContainsUndefinedContinueTarget of |BlockStatement| with arguments _iterationSet_ and « ».\n      </emu-alg>\n      <emu-grammar>BreakableStatement : IterationStatement</emu-grammar>\n      <emu-alg>\n        1. Let _newIterationSet_ be the list-concatenation of _iterationSet_ and _labelSet_.\n        1. Return ContainsUndefinedContinueTarget of |IterationStatement| with arguments _newIterationSet_ and « ».\n      </emu-alg>\n      <emu-grammar>StatementList : StatementList StatementListItem</emu-grammar>\n      <emu-alg>\n        1. Let _hasUndefinedLabels_ be ContainsUndefinedContinueTarget of |StatementList| with arguments _iterationSet_ and « ».\n        1. If _hasUndefinedLabels_ is *true*, return *true*.\n        1. Return ContainsUndefinedContinueTarget of |StatementListItem| with arguments _iterationSet_ and « ».\n      </emu-alg>\n      <emu-grammar>IfStatement : `if` `(` Expression `)` Statement `else` Statement</emu-grammar>\n      <emu-alg>\n        1. Let _hasUndefinedLabels_ be ContainsUndefinedContinueTarget of the first |Statement| with arguments _iterationSet_ and « ».\n        1. If _hasUndefinedLabels_ is *true*, return *true*.\n        1. Return ContainsUndefinedContinueTarget of the second |Statement| with arguments _iterationSet_ and « ».\n      </emu-alg>\n      <emu-grammar>IfStatement : `if` `(` Expression `)` Statement</emu-grammar>\n      <emu-alg>\n        1. Return ContainsUndefinedContinueTarget of |Statement| with arguments _iterationSet_ and « ».\n      </emu-alg>\n      <emu-grammar>DoWhileStatement : `do` Statement `while` `(` Expression `)` `;`</emu-grammar>\n      <emu-alg>\n        1. Return ContainsUndefinedContinueTarget of |Statement| with arguments _iterationSet_ and « ».\n      </emu-alg>\n      <emu-grammar>WhileStatement : `while` `(` Expression `)` Statement</emu-grammar>\n      <emu-alg>\n        1. Return ContainsUndefinedContinueTarget of |Statement| with arguments _iterationSet_ and « ».\n      </emu-alg>\n      <emu-grammar>\n        ForStatement :\n          `for` `(` Expression? `;` Expression? `;` Expression? `)` Statement\n          `for` `(` `var` VariableDeclarationList `;` Expression? `;` Expression? `)` Statement\n          `for` `(` LexicalDeclaration Expression? `;` Expression? `)` Statement\n      </emu-grammar>\n      <emu-alg>\n        1. Return ContainsUndefinedContinueTarget of |Statement| with arguments _iterationSet_ and « ».\n      </emu-alg>\n      <emu-grammar>\n        ForInOfStatement :\n          `for` `(` LeftHandSideExpression `in` Expression `)` Statement\n          `for` `(` `var` ForBinding `in` Expression `)` Statement\n          `for` `(` ForDeclaration `in` Expression `)` Statement\n          `for` `(` LeftHandSideExpression `of` AssignmentExpression `)` Statement\n          `for` `(` `var` ForBinding `of` AssignmentExpression `)` Statement\n          `for` `(` ForDeclaration `of` AssignmentExpression `)` Statement\n          `for` `await` `(` LeftHandSideExpression `of` AssignmentExpression `)` Statement\n          `for` `await` `(` `var` ForBinding `of` AssignmentExpression `)` Statement\n          `for` `await` `(` ForDeclaration `of` AssignmentExpression `)` Statement\n      </emu-grammar>\n      <emu-alg>\n        1. Return ContainsUndefinedContinueTarget of |Statement| with arguments _iterationSet_ and « ».\n      </emu-alg>\n      <emu-note>\n        <p>This section is extended by Annex <emu-xref href=\"#sec-initializers-in-forin-statement-heads\"></emu-xref>.</p>\n      </emu-note>\n      <emu-grammar>ContinueStatement : `continue` `;`</emu-grammar>\n      <emu-alg>\n        1. Return *false*.\n      </emu-alg>\n      <emu-grammar>ContinueStatement : `continue` LabelIdentifier `;`</emu-grammar>\n      <emu-alg>\n        1. If _iterationSet_ does not contain the StringValue of |LabelIdentifier|, return *true*.\n        1. Return *false*.\n      </emu-alg>\n      <emu-grammar>WithStatement : `with` `(` Expression `)` Statement</emu-grammar>\n      <emu-alg>\n        1. Return ContainsUndefinedContinueTarget of |Statement| with arguments _iterationSet_ and « ».\n      </emu-alg>\n      <emu-grammar>SwitchStatement : `switch` `(` Expression `)` CaseBlock</emu-grammar>\n      <emu-alg>\n        1. Return ContainsUndefinedContinueTarget of |CaseBlock| with arguments _iterationSet_ and « ».\n      </emu-alg>\n      <emu-grammar>CaseBlock : `{` `}`</emu-grammar>\n      <emu-alg>\n        1. Return *false*.\n      </emu-alg>\n      <emu-grammar>CaseBlock : `{` CaseClauses? DefaultClause CaseClauses? `}`</emu-grammar>\n      <emu-alg>\n        1. If the first |CaseClauses| is present, then\n          1. If ContainsUndefinedContinueTarget of the first |CaseClauses| with arguments _iterationSet_ and « » is *true*, return *true*.\n        1. If ContainsUndefinedContinueTarget of |DefaultClause| with arguments _iterationSet_ and « » is *true*, return *true*.\n        1. If the second |CaseClauses| is not present, return *false*.\n        1. Return ContainsUndefinedContinueTarget of the second |CaseClauses| with arguments _iterationSet_ and « ».\n      </emu-alg>\n      <emu-grammar>CaseClauses : CaseClauses CaseClause</emu-grammar>\n      <emu-alg>\n        1. Let _hasUndefinedLabels_ be ContainsUndefinedContinueTarget of |CaseClauses| with arguments _iterationSet_ and « ».\n        1. If _hasUndefinedLabels_ is *true*, return *true*.\n        1. Return ContainsUndefinedContinueTarget of |CaseClause| with arguments _iterationSet_ and « ».\n      </emu-alg>\n      <emu-grammar>CaseClause : `case` Expression `:` StatementList?</emu-grammar>\n      <emu-alg>\n        1. If the |StatementList| is present, return ContainsUndefinedContinueTarget of |StatementList| with arguments _iterationSet_ and « ».\n        1. Return *false*.\n      </emu-alg>\n      <emu-grammar>DefaultClause : `default` `:` StatementList?</emu-grammar>\n      <emu-alg>\n        1. If the |StatementList| is present, return ContainsUndefinedContinueTarget of |StatementList| with arguments _iterationSet_ and « ».\n        1. Return *false*.\n      </emu-alg>\n      <emu-grammar>LabelledStatement : LabelIdentifier `:` LabelledItem</emu-grammar>\n      <emu-alg>\n        1. Let _label_ be the StringValue of |LabelIdentifier|.\n        1. Let _newLabelSet_ be the list-concatenation of _labelSet_ and « _label_ ».\n        1. Return ContainsUndefinedContinueTarget of |LabelledItem| with arguments _iterationSet_ and _newLabelSet_.\n      </emu-alg>\n      <emu-grammar>LabelledItem : FunctionDeclaration</emu-grammar>\n      <emu-alg>\n        1. Return *false*.\n      </emu-alg>\n      <emu-grammar>TryStatement : `try` Block Catch</emu-grammar>\n      <emu-alg>\n        1. Let _hasUndefinedLabels_ be ContainsUndefinedContinueTarget of |Block| with arguments _iterationSet_ and « ».\n        1. If _hasUndefinedLabels_ is *true*, return *true*.\n        1. Return ContainsUndefinedContinueTarget of |Catch| with arguments _iterationSet_ and « ».\n      </emu-alg>\n      <emu-grammar>TryStatement : `try` Block Finally</emu-grammar>\n      <emu-alg>\n        1. Let _hasUndefinedLabels_ be ContainsUndefinedContinueTarget of |Block| with arguments _iterationSet_ and « ».\n        1. If _hasUndefinedLabels_ is *true*, return *true*.\n        1. Return ContainsUndefinedContinueTarget of |Finally| with arguments _iterationSet_ and « ».\n      </emu-alg>\n      <emu-grammar>TryStatement : `try` Block Catch Finally</emu-grammar>\n      <emu-alg>\n        1. If ContainsUndefinedContinueTarget of |Block| with arguments _iterationSet_ and « » is *true*, return *true*.\n        1. If ContainsUndefinedContinueTarget of |Catch| with arguments _iterationSet_ and « » is *true*, return *true*.\n        1. Return ContainsUndefinedContinueTarget of |Finally| with arguments _iterationSet_ and « ».\n      </emu-alg>\n      <emu-grammar>Catch : `catch` `(` CatchParameter `)` Block</emu-grammar>\n      <emu-alg>\n        1. Return ContainsUndefinedContinueTarget of |Block| with arguments _iterationSet_ and « ».\n      </emu-alg>\n      <emu-grammar>FunctionStatementList : [empty]</emu-grammar>\n      <emu-alg>\n        1. Return *false*.\n      </emu-alg>\n      <emu-grammar>ClassStaticBlockStatementList : [empty]</emu-grammar>\n      <emu-alg>\n        1. Return *false*.\n      </emu-alg>\n      <emu-grammar>ModuleItemList : ModuleItemList ModuleItem</emu-grammar>\n      <emu-alg>\n        1. Let _hasUndefinedLabels_ be ContainsUndefinedContinueTarget of |ModuleItemList| with arguments _iterationSet_ and « ».\n        1. If _hasUndefinedLabels_ is *true*, return *true*.\n        1. Return ContainsUndefinedContinueTarget of |ModuleItem| with arguments _iterationSet_ and « ».\n      </emu-alg>\n      <emu-grammar>\n        ModuleItem :\n          ImportDeclaration\n          ExportDeclaration\n      </emu-grammar>\n      <emu-alg>\n        1. Return *false*.\n      </emu-alg>\n    </emu-clause>\n  </emu-clause>\n\n  <emu-clause id=\"sec-syntax-directed-operations-function-name-inference\">\n    <h1>Function Name Inference</h1>\n\n    <emu-clause id=\"sec-static-semantics-hasname\" oldids=\"sec-semantics-static-semantics-hasname,sec-function-definitions-static-semantics-hasname,sec-arrow-function-definitions-static-semantics-hasname,sec-generator-function-definitions-static-semantics-hasname,sec-async-generator-function-definitions-static-semantics-hasname,sec-class-definitions-static-semantics-hasname,sec-async-function-definitions-static-semantics-HasName,sec-async-arrow-function-definitions-static-semantics-HasName\" type=\"sdo\">\n      <h1>Static Semantics: HasName ( ): a Boolean</h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-grammar>PrimaryExpression : CoverParenthesizedExpressionAndArrowParameterList</emu-grammar>\n      <emu-alg>\n        1. Let _expr_ be the |ParenthesizedExpression| that is covered by |CoverParenthesizedExpressionAndArrowParameterList|.\n        1. If IsFunctionDefinition of _expr_ is *false*, return *false*.\n        1. Return HasName of _expr_.\n      </emu-alg>\n      <emu-grammar>\n        FunctionExpression :\n          `function` `(` FormalParameters `)` `{` FunctionBody `}`\n\n        GeneratorExpression :\n          `function` `*` `(` FormalParameters `)` `{` GeneratorBody `}`\n\n        AsyncGeneratorExpression :\n          `async` `function` `*` `(` FormalParameters `)` `{` AsyncGeneratorBody `}`\n\n        AsyncFunctionExpression :\n          `async` `function` `(` FormalParameters `)` `{` AsyncFunctionBody `}`\n\n        ArrowFunction :\n          ArrowParameters `=>` ConciseBody\n\n        AsyncArrowFunction :\n          `async` AsyncArrowBindingIdentifier `=>` AsyncConciseBody\n          CoverCallExpressionAndAsyncArrowHead `=>` AsyncConciseBody\n\n        ClassExpression :\n          `class` ClassTail\n      </emu-grammar>\n      <emu-alg>\n        1. Return *false*.\n      </emu-alg>\n      <emu-grammar>\n        FunctionExpression :\n          `function` BindingIdentifier `(` FormalParameters `)` `{` FunctionBody `}`\n\n        GeneratorExpression :\n          `function` `*` BindingIdentifier `(` FormalParameters `)` `{` GeneratorBody `}`\n\n        AsyncGeneratorExpression :\n          `async` `function` `*` BindingIdentifier `(` FormalParameters `)` `{` AsyncGeneratorBody `}`\n\n        AsyncFunctionExpression :\n          `async` `function` BindingIdentifier `(` FormalParameters `)` `{` AsyncFunctionBody `}`\n\n        ClassExpression :\n          `class` BindingIdentifier ClassTail\n      </emu-grammar>\n      <emu-alg>\n        1. Return *true*.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-static-semantics-isfunctiondefinition\" oldids=\"sec-semantics-static-semantics-isfunctiondefinition,sec-grouping-operator-static-semantics-isfunctiondefinition,sec-static-semantics-static-semantics-isfunctiondefinition,sec-update-expressions-static-semantics-isfunctiondefinition,sec-unary-operators-static-semantics-isfunctiondefinition,sec-exp-operator-static-semantics-isfunctiondefinition,sec-multiplicative-operators-static-semantics-isfunctiondefinition,sec-additive-operators-static-semantics-isfunctiondefinition,sec-bitwise-shift-operators-static-semantics-isfunctiondefinition,sec-relational-operators-static-semantics-isfunctiondefinition,sec-equality-operators-static-semantics-isfunctiondefinition,sec-binary-bitwise-operators-static-semantics-isfunctiondefinition,sec-binary-logical-operators-static-semantics-isfunctiondefinition,sec-conditional-operator-static-semantics-isfunctiondefinition,sec-assignment-operators-static-semantics-isfunctiondefinition,sec-comma-operator-static-semantics-isfunctiondefinition,sec-function-definitions-static-semantics-isfunctiondefinition,sec-generator-function-definitions-static-semantics-isfunctiondefinition,sec-async-generator-function-definitions-static-semantics-isfunctiondefinition,sec-class-definitions-static-semantics-isfunctiondefinition,sec-async-function-definitions-static-semantics-IsFunctionDefinition\" type=\"sdo\">\n      <h1>Static Semantics: IsFunctionDefinition ( ): a Boolean</h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-grammar>PrimaryExpression : CoverParenthesizedExpressionAndArrowParameterList</emu-grammar>\n      <emu-alg>\n        1. Let _expr_ be the |ParenthesizedExpression| that is covered by |CoverParenthesizedExpressionAndArrowParameterList|.\n        1. Return IsFunctionDefinition of _expr_.\n      </emu-alg>\n      <emu-grammar>\n        PrimaryExpression :\n          `this`\n          IdentifierReference\n          Literal\n          ArrayLiteral\n          ObjectLiteral\n          RegularExpressionLiteral\n          TemplateLiteral\n\n        MemberExpression :\n          MemberExpression `[` Expression `]`\n          MemberExpression `.` IdentifierName\n          MemberExpression TemplateLiteral\n          SuperProperty\n          MetaProperty\n          `new` MemberExpression Arguments\n          MemberExpression `.` PrivateIdentifier\n\n        NewExpression :\n          `new` NewExpression\n\n        LeftHandSideExpression :\n          CallExpression\n          OptionalExpression\n\n        UpdateExpression :\n          LeftHandSideExpression `++`\n          LeftHandSideExpression `--`\n          `++` UnaryExpression\n          `--` UnaryExpression\n\n        UnaryExpression :\n          `delete` UnaryExpression\n          `void` UnaryExpression\n          `typeof` UnaryExpression\n          `+` UnaryExpression\n          `-` UnaryExpression\n          `~` UnaryExpression\n          `!` UnaryExpression\n          AwaitExpression\n\n        ExponentiationExpression :\n          UpdateExpression `**` ExponentiationExpression\n\n        MultiplicativeExpression :\n          MultiplicativeExpression MultiplicativeOperator ExponentiationExpression\n\n        AdditiveExpression :\n          AdditiveExpression `+` MultiplicativeExpression\n          AdditiveExpression `-` MultiplicativeExpression\n\n        ShiftExpression :\n          ShiftExpression `&lt;&lt;` AdditiveExpression\n          ShiftExpression `&gt;&gt;` AdditiveExpression\n          ShiftExpression `&gt;&gt;&gt;` AdditiveExpression\n\n        RelationalExpression :\n          RelationalExpression `&lt;` ShiftExpression\n          RelationalExpression `&gt;` ShiftExpression\n          RelationalExpression `&lt;=` ShiftExpression\n          RelationalExpression `&gt;=` ShiftExpression\n          RelationalExpression `instanceof` ShiftExpression\n          RelationalExpression `in` ShiftExpression\n          PrivateIdentifier `in` ShiftExpression\n\n        EqualityExpression :\n          EqualityExpression `==` RelationalExpression\n          EqualityExpression `!=` RelationalExpression\n          EqualityExpression `===` RelationalExpression\n          EqualityExpression `!==` RelationalExpression\n\n        BitwiseANDExpression :\n          BitwiseANDExpression `&amp;` EqualityExpression\n\n        BitwiseXORExpression :\n          BitwiseXORExpression `^` BitwiseANDExpression\n\n        BitwiseORExpression :\n          BitwiseORExpression `|` BitwiseXORExpression\n\n        LogicalANDExpression :\n          LogicalANDExpression `&amp;&amp;` BitwiseORExpression\n\n        LogicalORExpression :\n          LogicalORExpression `||` LogicalANDExpression\n\n        CoalesceExpression :\n          CoalesceExpressionHead `??` BitwiseORExpression\n\n        ConditionalExpression :\n          ShortCircuitExpression `?` AssignmentExpression `:` AssignmentExpression\n\n        AssignmentExpression :\n          YieldExpression\n          LeftHandSideExpression `=` AssignmentExpression\n          LeftHandSideExpression AssignmentOperator AssignmentExpression\n          LeftHandSideExpression `&amp;&amp;=` AssignmentExpression\n          LeftHandSideExpression `||=` AssignmentExpression\n          LeftHandSideExpression `??=` AssignmentExpression\n\n        Expression :\n          Expression `,` AssignmentExpression\n      </emu-grammar>\n      <emu-alg>\n        1. Return *false*.\n      </emu-alg>\n      <emu-grammar>\n        AssignmentExpression :\n          ArrowFunction\n          AsyncArrowFunction\n\n        FunctionExpression :\n          `function` BindingIdentifier? `(` FormalParameters `)` `{` FunctionBody `}`\n\n        GeneratorExpression :\n          `function` `*` BindingIdentifier? `(` FormalParameters `)` `{` GeneratorBody `}`\n\n        AsyncGeneratorExpression :\n          `async` `function` `*` BindingIdentifier? `(` FormalParameters `)` `{` AsyncGeneratorBody `}`\n\n        AsyncFunctionExpression :\n          `async` `function` BindingIdentifier? `(` FormalParameters `)` `{` AsyncFunctionBody `}`\n\n        ClassExpression :\n          `class` BindingIdentifier? ClassTail\n      </emu-grammar>\n      <emu-alg>\n        1. Return *true*.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-isanonymousfunctiondefinition\" type=\"abstract operation\">\n      <h1>\n        Static Semantics: IsAnonymousFunctionDefinition (\n          _expr_: an |AssignmentExpression| Parse Node, an |Initializer| Parse Node, or an |Expression| Parse Node,\n        ): a Boolean\n      </h1>\n      <dl class=\"header\">\n        <dt>description</dt>\n        <dd>It determines if its argument is a function definition that does not bind a name.</dd>\n      </dl>\n      <emu-alg>\n        1. If IsFunctionDefinition of _expr_ is *false*, return *false*.\n        1. Let _hasName_ be HasName of _expr_.\n        1. If _hasName_ is *true*, return *false*.\n        1. Return *true*.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-static-semantics-isidentifierref\" oldids=\"sec-semantics-static-semantics-isidentifierref,sec-static-semantics-static-semantics-isidentifierref\" type=\"sdo\">\n      <h1>Static Semantics: IsIdentifierRef ( ): a Boolean</h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-grammar>PrimaryExpression : IdentifierReference</emu-grammar>\n      <emu-alg>\n        1. Return *true*.\n      </emu-alg>\n      <emu-grammar>\n        PrimaryExpression :\n          `this`\n          Literal\n          ArrayLiteral\n          ObjectLiteral\n          FunctionExpression\n          ClassExpression\n          GeneratorExpression\n          AsyncFunctionExpression\n          AsyncGeneratorExpression\n          RegularExpressionLiteral\n          TemplateLiteral\n          CoverParenthesizedExpressionAndArrowParameterList\n\n        MemberExpression :\n          MemberExpression `[` Expression `]`\n          MemberExpression `.` IdentifierName\n          MemberExpression TemplateLiteral\n          SuperProperty\n          MetaProperty\n          `new` MemberExpression Arguments\n          MemberExpression `.` PrivateIdentifier\n\n        NewExpression :\n          `new` NewExpression\n\n        LeftHandSideExpression :\n          CallExpression\n          OptionalExpression\n      </emu-grammar>\n      <emu-alg>\n        1. Return *false*.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-runtime-semantics-namedevaluation\" oldids=\"sec-grouping-operator-runtime-semantics-namedevaluation,sec-function-definitions-runtime-semantics-namedevaluation,sec-arrow-function-definitions-runtime-semantics-namedevaluation,sec-generator-function-definitions-runtime-semantics-namedevaluation,sec-asyncgenerator-definitions-namedevaluation,sec-class-definitions-runtime-semantics-namedevaluation,sec-async-function-definitions-runtime-semantics-namedevaluation,sec-async-arrow-function-definitions-runtime-semantics-namedevaluation\" type=\"sdo\">\n      <h1>\n        Runtime Semantics: NamedEvaluation (\n          _name_: a property key or a Private Name,\n        ): either a normal completion containing a function object or an abrupt completion\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-grammar>PrimaryExpression : CoverParenthesizedExpressionAndArrowParameterList</emu-grammar>\n      <emu-alg>\n        1. Let _expr_ be the |ParenthesizedExpression| that is covered by |CoverParenthesizedExpressionAndArrowParameterList|.\n        1. Return ? NamedEvaluation of _expr_ with argument _name_.\n      </emu-alg>\n      <emu-grammar>ParenthesizedExpression : `(` Expression `)`</emu-grammar>\n      <emu-alg>\n        1. Assert: IsAnonymousFunctionDefinition(|Expression|) is *true*.\n        1. Return ? NamedEvaluation of |Expression| with argument _name_.\n      </emu-alg>\n      <emu-grammar>FunctionExpression : `function` `(` FormalParameters `)` `{` FunctionBody `}`</emu-grammar>\n      <emu-alg>\n        1. Return InstantiateOrdinaryFunctionExpression of |FunctionExpression| with argument _name_.\n      </emu-alg>\n      <emu-grammar>GeneratorExpression : `function` `*` `(` FormalParameters `)` `{` GeneratorBody `}`</emu-grammar>\n      <emu-alg>\n        1. Return InstantiateGeneratorFunctionExpression of |GeneratorExpression| with argument _name_.\n      </emu-alg>\n      <emu-grammar>\n        AsyncGeneratorExpression : `async` `function` `*` `(` FormalParameters `)` `{` AsyncGeneratorBody `}`\n      </emu-grammar>\n      <emu-alg>\n        1. Return InstantiateAsyncGeneratorFunctionExpression of |AsyncGeneratorExpression| with argument _name_.\n      </emu-alg>\n      <emu-grammar>\n        AsyncFunctionExpression : `async` `function` `(` FormalParameters `)` `{` AsyncFunctionBody `}`\n      </emu-grammar>\n      <emu-alg>\n        1. Return InstantiateAsyncFunctionExpression of |AsyncFunctionExpression| with argument _name_.\n      </emu-alg>\n      <emu-grammar>ArrowFunction : ArrowParameters `=>` ConciseBody</emu-grammar>\n      <emu-alg>\n        1. Return InstantiateArrowFunctionExpression of |ArrowFunction| with argument _name_.\n      </emu-alg>\n      <emu-grammar>\n        AsyncArrowFunction :\n          `async` AsyncArrowBindingIdentifier `=>` AsyncConciseBody\n          CoverCallExpressionAndAsyncArrowHead `=>` AsyncConciseBody\n      </emu-grammar>\n      <emu-alg>\n        1. Return InstantiateAsyncArrowFunctionExpression of |AsyncArrowFunction| with argument _name_.\n      </emu-alg>\n      <emu-grammar>ClassExpression : `class` ClassTail</emu-grammar>\n      <emu-alg>\n        1. Let _value_ be ? ClassDefinitionEvaluation of |ClassTail| with arguments *undefined* and _name_.\n        1. Set _value_.[[SourceText]] to the source text matched by |ClassExpression|.\n        1. Return _value_.\n      </emu-alg>\n    </emu-clause>\n  </emu-clause>\n\n  <emu-clause id=\"sec-syntax-directed-operations-contains\">\n    <h1>Contains</h1>\n\n    <emu-clause id=\"sec-static-semantics-contains\" oldids=\"sec-object-initializer-static-semantics-contains,sec-static-semantics-static-semantics-contains,sec-function-definitions-static-semantics-contains,sec-arrow-function-definitions-static-semantics-contains,sec-generator-function-definitions-static-semantics-contains,sec-async-generator-function-definitions-static-semantics-contains,sec-class-definitions-static-semantics-contains,sec-async-function-definitions-static-semantics-Contains,sec-async-arrow-function-definitions-static-semantics-Contains\" type=\"sdo\">\n      <h1>\n        Static Semantics: Contains (\n          _symbol_: a grammar symbol,\n        ): a Boolean\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <p>Every grammar production alternative in this specification which is not listed below implicitly has the following default definition of Contains:</p>\n      <emu-alg>\n        1. For each child node _child_ of this Parse Node, do\n          1. If _child_ is an instance of _symbol_, return *true*.\n          1. If _child_ is an instance of a nonterminal, then\n            1. Let _contained_ be the result of _child_ Contains _symbol_.\n            1. If _contained_ is *true*, return *true*.\n        1. Return *false*.\n      </emu-alg>\n      <emu-grammar>\n        FunctionDeclaration :\n          `function` BindingIdentifier `(` FormalParameters `)` `{` FunctionBody `}`\n          `function` `(` FormalParameters `)` `{` FunctionBody `}`\n\n        FunctionExpression :\n          `function` BindingIdentifier? `(` FormalParameters `)` `{` FunctionBody `}`\n\n        GeneratorDeclaration :\n          `function` `*` BindingIdentifier `(` FormalParameters `)` `{` GeneratorBody `}`\n          `function` `*` `(` FormalParameters `)` `{` GeneratorBody `}`\n\n        GeneratorExpression :\n          `function` `*` BindingIdentifier? `(` FormalParameters `)` `{` GeneratorBody `}`\n\n        AsyncGeneratorDeclaration :\n          `async` `function` `*` BindingIdentifier `(` FormalParameters `)` `{` AsyncGeneratorBody `}`\n          `async` `function` `*` `(` FormalParameters `)` `{` AsyncGeneratorBody `}`\n\n        AsyncGeneratorExpression :\n          `async` `function` `*` BindingIdentifier? `(` FormalParameters `)` `{` AsyncGeneratorBody `}`\n\n        AsyncFunctionDeclaration :\n          `async` `function` BindingIdentifier `(` FormalParameters `)` `{` AsyncFunctionBody `}`\n          `async` `function` `(` FormalParameters `)` `{` AsyncFunctionBody `}`\n\n        AsyncFunctionExpression :\n          `async` `function` BindingIdentifier? `(` FormalParameters `)` `{` AsyncFunctionBody `}`\n      </emu-grammar>\n      <emu-alg>\n        1. Return *false*.\n      </emu-alg>\n      <emu-note>\n        <p>Static semantic rules that depend upon substructure generally do not look into function definitions.</p>\n      </emu-note>\n      <emu-grammar>ClassTail : ClassHeritage? `{` ClassBody `}`</emu-grammar>\n      <emu-alg>\n        1. If _symbol_ is |ClassBody|, return *true*.\n        1. If _symbol_ is |ClassHeritage|, then\n          1. If |ClassHeritage| is present, return *true*; otherwise return *false*.\n        1. If |ClassHeritage| is present, then\n          1. If |ClassHeritage| Contains _symbol_ is *true*, return *true*.\n        1. Return the result of ComputedPropertyContains of |ClassBody| with argument _symbol_.\n      </emu-alg>\n      <emu-note>\n        <p>Static semantic rules that depend upon substructure generally do not look into class bodies except for |PropertyName|s.</p>\n      </emu-note>\n      <emu-grammar>ClassStaticBlock : `static` `{` ClassStaticBlockBody `}`</emu-grammar>\n      <emu-alg>\n        1. Return *false*.\n      </emu-alg>\n      <emu-note>\n        <p>Static semantic rules that depend upon substructure generally do not look into `static` initialization blocks.</p>\n      </emu-note>\n      <emu-grammar>ArrowFunction : ArrowParameters `=>` ConciseBody</emu-grammar>\n      <emu-alg>\n        1. If _symbol_ is not one of |NewTarget|, |SuperProperty|, |SuperCall|, `super`, or `this`, return *false*.\n        1. If |ArrowParameters| Contains _symbol_ is *true*, return *true*.\n        1. Return |ConciseBody| Contains _symbol_.\n      </emu-alg>\n      <emu-grammar>ArrowParameters : CoverParenthesizedExpressionAndArrowParameterList</emu-grammar>\n      <emu-alg>\n        1. Let _formals_ be the |ArrowFormalParameters| that is covered by |CoverParenthesizedExpressionAndArrowParameterList|.\n        1. Return _formals_ Contains _symbol_.\n      </emu-alg>\n      <emu-grammar>\n        AsyncArrowFunction : `async` AsyncArrowBindingIdentifier `=>` AsyncConciseBody\n      </emu-grammar>\n      <emu-alg>\n        1. If _symbol_ is not one of |NewTarget|, |SuperProperty|, |SuperCall|, `super`, or `this`, return *false*.\n        1. Return |AsyncConciseBody| Contains _symbol_.\n      </emu-alg>\n      <emu-grammar>\n        AsyncArrowFunction : CoverCallExpressionAndAsyncArrowHead `=>` AsyncConciseBody\n      </emu-grammar>\n      <emu-alg>\n        1. If _symbol_ is not one of |NewTarget|, |SuperProperty|, |SuperCall|, `super`, or `this`, return *false*.\n        1. Let _head_ be the |AsyncArrowHead| that is covered by |CoverCallExpressionAndAsyncArrowHead|.\n        1. If _head_ Contains _symbol_ is *true*, return *true*.\n        1. Return |AsyncConciseBody| Contains _symbol_.\n      </emu-alg>\n      <emu-note>\n        <p>Contains is used to detect `new.target`, `this`, and `super` usage within an |ArrowFunction| or |AsyncArrowFunction|.</p>\n      </emu-note>\n      <emu-grammar>PropertyDefinition : MethodDefinition</emu-grammar>\n      <emu-alg>\n        1. If _symbol_ is |MethodDefinition|, return *true*.\n        1. Return the result of ComputedPropertyContains of |MethodDefinition| with argument _symbol_.\n      </emu-alg>\n      <emu-grammar>LiteralPropertyName : IdentifierName</emu-grammar>\n      <emu-alg>\n        1. Return *false*.\n      </emu-alg>\n      <emu-grammar>MemberExpression : MemberExpression `.` IdentifierName</emu-grammar>\n      <emu-alg>\n        1. If |MemberExpression| Contains _symbol_ is *true*, return *true*.\n        1. Return *false*.\n      </emu-alg>\n      <emu-grammar>SuperProperty : `super` `.` IdentifierName</emu-grammar>\n      <emu-alg>\n        1. If _symbol_ is the |ReservedWord| `super`, return *true*.\n        1. Return *false*.\n      </emu-alg>\n      <emu-grammar>CallExpression : CallExpression `.` IdentifierName</emu-grammar>\n      <emu-alg>\n        1. If |CallExpression| Contains _symbol_ is *true*, return *true*.\n        1. Return *false*.\n      </emu-alg>\n      <emu-grammar>OptionalChain : `?.` IdentifierName</emu-grammar>\n      <emu-alg>\n        1. Return *false*.\n      </emu-alg>\n      <emu-grammar>OptionalChain : OptionalChain `.` IdentifierName</emu-grammar>\n      <emu-alg>\n        1. If |OptionalChain| Contains _symbol_ is *true*, return *true*.\n        1. Return *false*.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-static-semantics-computedpropertycontains\" oldids=\"sec-object-initializer-static-semantics-computedpropertycontains,sec-method-definitions-static-semantics-computedpropertycontains,sec-generator-function-definitions-static-semantics-computedpropertycontains,sec-async-generator-function-definitions-static-semantics-computedpropertycontains,sec-class-definitions-static-semantics-computedpropertycontains,sec-async-function-definitions-static-semantics-ComputedPropertyContains\" type=\"sdo\">\n      <h1>\n        Static Semantics: ComputedPropertyContains (\n          _symbol_: a grammar symbol,\n        ): a Boolean\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-grammar>\n        ClassElementName : PrivateIdentifier\n\n        PropertyName : LiteralPropertyName\n      </emu-grammar>\n      <emu-alg>\n        1. Return *false*.\n      </emu-alg>\n      <emu-grammar>PropertyName : ComputedPropertyName</emu-grammar>\n      <emu-alg>\n        1. Return the result of |ComputedPropertyName| Contains _symbol_.\n      </emu-alg>\n      <emu-grammar>\n        MethodDefinition :\n          ClassElementName `(` UniqueFormalParameters `)` `{` FunctionBody `}`\n          `get` ClassElementName `(` `)` `{` FunctionBody `}`\n          `set` ClassElementName `(` PropertySetParameterList `)` `{` FunctionBody `}`\n      </emu-grammar>\n      <emu-alg>\n        1. Return the result of ComputedPropertyContains of |ClassElementName| with argument _symbol_.\n      </emu-alg>\n      <emu-grammar>GeneratorMethod : `*` ClassElementName `(` UniqueFormalParameters `)` `{` GeneratorBody `}`</emu-grammar>\n      <emu-alg>\n        1. Return the result of ComputedPropertyContains of |ClassElementName| with argument _symbol_.\n      </emu-alg>\n      <emu-grammar>AsyncGeneratorMethod : `async` `*` ClassElementName `(` UniqueFormalParameters `)` `{` AsyncGeneratorBody `}`</emu-grammar>\n      <emu-alg>\n        1. Return the result of ComputedPropertyContains of |ClassElementName| with argument _symbol_.\n      </emu-alg>\n      <emu-grammar>ClassElementList : ClassElementList ClassElement</emu-grammar>\n      <emu-alg>\n        1. Let _inList_ be ComputedPropertyContains of |ClassElementList| with argument _symbol_.\n        1. If _inList_ is *true*, return *true*.\n        1. Return the result of ComputedPropertyContains of |ClassElement| with argument _symbol_.\n      </emu-alg>\n      <emu-grammar>ClassElement : ClassStaticBlock</emu-grammar>\n      <emu-alg>\n        1. Return *false*.\n      </emu-alg>\n      <emu-grammar>ClassElement : `;`</emu-grammar>\n      <emu-alg>\n        1. Return *false*.\n      </emu-alg>\n      <emu-grammar>\n        AsyncMethod : `async` ClassElementName `(` UniqueFormalParameters `)` `{` AsyncFunctionBody `}`\n      </emu-grammar>\n      <emu-alg>\n        1. Return the result of ComputedPropertyContains of |ClassElementName| with argument _symbol_.\n      </emu-alg>\n      <emu-grammar>\n        FieldDefinition : ClassElementName Initializer?\n      </emu-grammar>\n      <emu-alg>\n        1. Return the result of ComputedPropertyContains of |ClassElementName| with argument _symbol_.\n      </emu-alg>\n    </emu-clause>\n  </emu-clause>\n\n  <emu-clause id=\"sec-syntax-directed-operations-miscellaneous\">\n    <h1>Miscellaneous</h1>\n    <p>These operations are used in multiple places throughout the specification.</p>\n\n    <emu-clause id=\"sec-runtime-semantics-instantiatefunctionobject\" type=\"sdo\">\n      <h1>\n        Runtime Semantics: InstantiateFunctionObject (\n          _env_: an Environment Record,\n          _privateEnv_: a PrivateEnvironment Record or *null*,\n        ): an ECMAScript function object\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-grammar>\n        FunctionDeclaration :\n          `function` BindingIdentifier `(` FormalParameters `)` `{` FunctionBody `}`\n          `function` `(` FormalParameters `)` `{` FunctionBody `}`\n      </emu-grammar>\n      <emu-alg>\n        1. Return InstantiateOrdinaryFunctionObject of |FunctionDeclaration| with arguments _env_ and _privateEnv_.\n      </emu-alg>\n      <emu-grammar>\n        GeneratorDeclaration :\n          `function` `*` BindingIdentifier `(` FormalParameters `)` `{` GeneratorBody `}`\n          `function` `*` `(` FormalParameters `)` `{` GeneratorBody `}`\n      </emu-grammar>\n      <emu-alg>\n        1. Return InstantiateGeneratorFunctionObject of |GeneratorDeclaration| with arguments _env_ and _privateEnv_.\n      </emu-alg>\n      <emu-grammar>\n        AsyncGeneratorDeclaration :\n          `async` `function` `*` BindingIdentifier `(` FormalParameters `)` `{` AsyncGeneratorBody `}`\n          `async` `function` `*` `(` FormalParameters `)` `{` AsyncGeneratorBody `}`\n      </emu-grammar>\n      <emu-alg>\n        1. Return InstantiateAsyncGeneratorFunctionObject of |AsyncGeneratorDeclaration| with arguments _env_ and _privateEnv_.\n      </emu-alg>\n      <emu-grammar>\n        AsyncFunctionDeclaration :\n          `async` `function` BindingIdentifier `(` FormalParameters `)` `{` AsyncFunctionBody `}`\n          `async` `function` `(` FormalParameters `)` `{` AsyncFunctionBody `}`\n      </emu-grammar>\n      <emu-alg>\n        1. Return InstantiateAsyncFunctionObject of |AsyncFunctionDeclaration| with arguments _env_ and _privateEnv_.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-runtime-semantics-bindinginitialization\" oldids=\"sec-identifiers-runtime-semantics-bindinginitialization,sec-destructuring-binding-patterns-runtime-semantics-bindinginitialization\" type=\"sdo\">\n      <h1>\n        Runtime Semantics: BindingInitialization (\n          _value_: an ECMAScript language value,\n          _environment_: an Environment Record or *undefined*,\n        ): either a normal completion containing ~unused~ or an abrupt completion\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-note>\n        <p>*undefined* is passed for _environment_ to indicate that a PutValue operation should be used to assign the initialization value. This is the case for `var` statements and formal parameter lists of some non-strict functions (See <emu-xref href=\"#sec-functiondeclarationinstantiation\"></emu-xref>). In those cases a lexical binding is hoisted and preinitialized prior to evaluation of its initializer.</p>\n      </emu-note>\n      <emu-grammar>BindingIdentifier : Identifier</emu-grammar>\n      <emu-alg>\n        1. Let _name_ be the StringValue of |Identifier|.\n        1. Return ? InitializeBoundName(_name_, _value_, _environment_).\n      </emu-alg>\n      <emu-grammar>BindingIdentifier : `yield`</emu-grammar>\n      <emu-alg>\n        1. Return ? InitializeBoundName(*\"yield\"*, _value_, _environment_).\n      </emu-alg>\n      <emu-grammar>BindingIdentifier : `await`</emu-grammar>\n      <emu-alg>\n        1. Return ? InitializeBoundName(*\"await\"*, _value_, _environment_).\n      </emu-alg>\n      <emu-grammar>BindingPattern : ObjectBindingPattern</emu-grammar>\n      <emu-alg>\n        1. Perform ? RequireObjectCoercible(_value_).\n        1. Return ? BindingInitialization of |ObjectBindingPattern| with arguments _value_ and _environment_.\n      </emu-alg>\n      <emu-grammar>BindingPattern : ArrayBindingPattern</emu-grammar>\n      <emu-alg>\n        1. Let _iteratorRecord_ be ? GetIterator(_value_, ~sync~).\n        1. Let _result_ be Completion(IteratorBindingInitialization of |ArrayBindingPattern| with arguments _iteratorRecord_ and _environment_).\n        1. If _iteratorRecord_.[[Done]] is *false*, return ? IteratorClose(_iteratorRecord_, _result_).\n        1. Return ? _result_.\n      </emu-alg>\n      <emu-grammar>ObjectBindingPattern : `{` `}`</emu-grammar>\n      <emu-alg>\n        1. Return ~unused~.\n      </emu-alg>\n      <emu-grammar>\n        ObjectBindingPattern :\n          `{` BindingPropertyList `}`\n          `{` BindingPropertyList `,` `}`\n      </emu-grammar>\n      <emu-alg>\n        1. Perform ? PropertyBindingInitialization of |BindingPropertyList| with arguments _value_ and _environment_.\n        1. Return ~unused~.\n      </emu-alg>\n      <emu-grammar>ObjectBindingPattern : `{` BindingRestProperty `}`</emu-grammar>\n      <emu-alg>\n        1. Let _excludedNames_ be a new empty List.\n        1. Return ? RestBindingInitialization of |BindingRestProperty| with arguments _value_, _environment_, and _excludedNames_.\n      </emu-alg>\n      <emu-grammar>ObjectBindingPattern : `{` BindingPropertyList `,` BindingRestProperty `}`</emu-grammar>\n      <emu-alg>\n        1. Let _excludedNames_ be ? PropertyBindingInitialization of |BindingPropertyList| with arguments _value_ and _environment_.\n        1. Return ? RestBindingInitialization of |BindingRestProperty| with arguments _value_, _environment_, and _excludedNames_.\n      </emu-alg>\n\n      <emu-clause id=\"sec-initializeboundname\" type=\"abstract operation\">\n        <h1>\n          InitializeBoundName (\n            _name_: a String,\n            _value_: an ECMAScript language value,\n            _environment_: an Environment Record or *undefined*,\n          ): either a normal completion containing ~unused~ or an abrupt completion\n        </h1>\n        <dl class=\"header\">\n        </dl>\n        <emu-alg>\n          1. If _environment_ is not *undefined*, then\n            1. Perform ! _environment_.InitializeBinding(_name_, _value_).\n            1. Return ~unused~.\n          1. Else,\n            1. Let _lhs_ be ? ResolveBinding(_name_).\n            1. Return ? PutValue(_lhs_, _value_).\n        </emu-alg>\n      </emu-clause>\n    </emu-clause>\n\n    <emu-clause id=\"sec-runtime-semantics-iteratorbindinginitialization\" oldids=\"sec-destructuring-binding-patterns-runtime-semantics-iteratorbindinginitialization,sec-function-definitions-runtime-semantics-iteratorbindinginitialization,sec-arrow-function-definitions-runtime-semantics-iteratorbindinginitialization,sec-async-arrow-function-definitions-IteratorBindingInitialization\" type=\"sdo\">\n      <h1>\n        Runtime Semantics: IteratorBindingInitialization (\n          _iteratorRecord_: an Iterator Record,\n          _environment_: an Environment Record or *undefined*,\n        ): either a normal completion containing ~unused~ or an abrupt completion\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-note>\n        <p>When *undefined* is passed for _environment_ it indicates that a PutValue operation should be used to assign the initialization value. This is the case for formal parameter lists of non-strict functions. In that case the formal parameter bindings are preinitialized in order to deal with the possibility of multiple parameters with the same name.</p>\n      </emu-note>\n      <emu-grammar>ArrayBindingPattern : `[` `]`</emu-grammar>\n      <emu-alg>\n        1. Return ~unused~.\n      </emu-alg>\n      <emu-grammar>ArrayBindingPattern : `[` Elision `]`</emu-grammar>\n      <emu-alg>\n        1. Return ? IteratorDestructuringAssignmentEvaluation of |Elision| with argument _iteratorRecord_.\n      </emu-alg>\n      <emu-grammar>ArrayBindingPattern : `[` Elision? BindingRestElement `]`</emu-grammar>\n      <emu-alg>\n        1. If |Elision| is present, then\n          1. Perform ? IteratorDestructuringAssignmentEvaluation of |Elision| with argument _iteratorRecord_.\n        1. Return ? IteratorBindingInitialization of |BindingRestElement| with arguments _iteratorRecord_ and _environment_.\n      </emu-alg>\n      <emu-grammar>ArrayBindingPattern : `[` BindingElementList `,` Elision `]`</emu-grammar>\n      <emu-alg>\n        1. Perform ? IteratorBindingInitialization of |BindingElementList| with arguments _iteratorRecord_ and _environment_.\n        1. Return ? IteratorDestructuringAssignmentEvaluation of |Elision| with argument _iteratorRecord_.\n      </emu-alg>\n      <emu-grammar>ArrayBindingPattern : `[` BindingElementList `,` Elision? BindingRestElement `]`</emu-grammar>\n      <emu-alg>\n        1. Perform ? IteratorBindingInitialization of |BindingElementList| with arguments _iteratorRecord_ and _environment_.\n        1. If |Elision| is present, then\n          1. Perform ? IteratorDestructuringAssignmentEvaluation of |Elision| with argument _iteratorRecord_.\n        1. Return ? IteratorBindingInitialization of |BindingRestElement| with arguments _iteratorRecord_ and _environment_.\n      </emu-alg>\n      <emu-grammar>BindingElementList : BindingElementList `,` BindingElisionElement</emu-grammar>\n      <emu-alg>\n        1. Perform ? IteratorBindingInitialization of |BindingElementList| with arguments _iteratorRecord_ and _environment_.\n        1. Return ? IteratorBindingInitialization of |BindingElisionElement| with arguments _iteratorRecord_ and _environment_.\n      </emu-alg>\n      <emu-grammar>BindingElisionElement : Elision BindingElement</emu-grammar>\n      <emu-alg>\n        1. Perform ? IteratorDestructuringAssignmentEvaluation of |Elision| with argument _iteratorRecord_.\n        1. Return ? IteratorBindingInitialization of |BindingElement| with arguments _iteratorRecord_ and _environment_.\n      </emu-alg>\n      <emu-grammar>SingleNameBinding : BindingIdentifier Initializer?</emu-grammar>\n      <emu-alg>\n        1. Let _bindingId_ be the StringValue of |BindingIdentifier|.\n        1. Let _lhs_ be ? ResolveBinding(_bindingId_, _environment_).\n        1. Let _v_ be *undefined*.\n        1. If _iteratorRecord_.[[Done]] is *false*, then\n          1. Let _next_ be ? IteratorStepValue(_iteratorRecord_).\n          1. If _next_ is not ~done~, then\n            1. Set _v_ to _next_.\n        1. If |Initializer| is present and _v_ is *undefined*, then\n          1. If IsAnonymousFunctionDefinition(|Initializer|) is *true*, then\n            1. Set _v_ to ? NamedEvaluation of |Initializer| with argument _bindingId_.\n          1. Else,\n            1. Let _defaultValue_ be ? Evaluation of |Initializer|.\n            1. Set _v_ to ? GetValue(_defaultValue_).\n        1. If _environment_ is *undefined*, return ? PutValue(_lhs_, _v_).\n        1. Return ? InitializeReferencedBinding(_lhs_, _v_).\n      </emu-alg>\n      <emu-grammar>BindingElement : BindingPattern Initializer?</emu-grammar>\n      <emu-alg>\n        1. Let _v_ be *undefined*.\n        1. If _iteratorRecord_.[[Done]] is *false*, then\n          1. Let _next_ be ? IteratorStepValue(_iteratorRecord_).\n          1. If _next_ is not ~done~, then\n            1. Set _v_ to _next_.\n        1. If |Initializer| is present and _v_ is *undefined*, then\n          1. Let _defaultValue_ be ? Evaluation of |Initializer|.\n          1. Set _v_ to ? GetValue(_defaultValue_).\n        1. Return ? BindingInitialization of |BindingPattern| with arguments _v_ and _environment_.\n      </emu-alg>\n      <emu-grammar>BindingRestElement : `...` BindingIdentifier</emu-grammar>\n      <emu-alg>\n        1. Let _lhs_ be ? ResolveBinding(StringValue of |BindingIdentifier|, _environment_).\n        1. Let _A_ be ! ArrayCreate(0).\n        1. Let _n_ be 0.\n        1. Repeat,\n          1. Let _next_ be ~done~.\n          1. If _iteratorRecord_.[[Done]] is *false*, then\n            1. Set _next_ to ? IteratorStepValue(_iteratorRecord_).\n          1. If _next_ is ~done~, then\n            1. If _environment_ is *undefined*, return ? PutValue(_lhs_, _A_).\n            1. Return ? InitializeReferencedBinding(_lhs_, _A_).\n          1. Perform ! CreateDataPropertyOrThrow(_A_, ! ToString(𝔽(_n_)), _next_).\n          1. Set _n_ to _n_ + 1.\n      </emu-alg>\n      <emu-grammar>BindingRestElement : `...` BindingPattern</emu-grammar>\n      <emu-alg>\n        1. Let _A_ be ! ArrayCreate(0).\n "
        },
        {
          "name": "stage0.md",
          "type": "blob",
          "size": 0.2626953125,
          "content": "# Stage 0 Proposals\n\nStage 0 proposals have been presented to the committee and not rejected definitively, but have not yet achieved any of the criteria to get into stage 1.\n\nThis list has moved [here](https://github.com/tc39/proposals/blob/HEAD/stage-0-proposals.md).\n"
        },
        {
          "name": "table-binary-unicode-properties-of-strings.html",
          "type": "blob",
          "size": 0.6591796875,
          "content": "<emu-table id=\"table-binary-unicode-properties-of-strings\">\n  <emu-caption>Binary Unicode properties of strings</emu-caption>\n  <table class=\"real-table unicode-property-table\">\n    <thead>\n      <tr>\n        <th>Property name</th>\n      </tr>\n    </thead>\n    <tr>\n      <td>`Basic_Emoji`</td>\n    </tr>\n    <tr>\n      <td>`Emoji_Keycap_Sequence`</td>\n    </tr>\n    <tr>\n      <td>`RGI_Emoji_Modifier_Sequence`</td>\n    </tr>\n    <tr>\n      <td>`RGI_Emoji_Flag_Sequence`</td>\n    </tr>\n    <tr>\n      <td>`RGI_Emoji_Tag_Sequence`</td>\n    </tr>\n    <tr>\n      <td>`RGI_Emoji_ZWJ_Sequence`</td>\n    </tr>\n    <tr>\n      <td>`RGI_Emoji`</td>\n    </tr>\n  </table>\n</emu-table>\n"
        },
        {
          "name": "table-binary-unicode-properties.html",
          "type": "blob",
          "size": 10.2021484375,
          "content": "<emu-table id=\"table-binary-unicode-properties\">\n  <emu-caption>Binary Unicode property aliases and their canonical property names</emu-caption>\n  <table class=\"real-table unicode-property-table\">\n    <thead>\n      <tr>\n        <th>Property name and aliases</th>\n        <th>Canonical property name</th>\n      </tr>\n    </thead>\n    <tr>\n      <td>`ASCII`</td>\n      <td><a href=\"https://unicode.org/reports/tr18/#General_Category_Property\">`ASCII`</a></td>\n    </tr>\n    <tr>\n      <td>`ASCII_Hex_Digit`</td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#ASCII_Hex_Digit\">`ASCII_Hex_Digit`</a></td>\n    </tr>\n    <tr>\n      <td>`AHex`</td>\n    </tr>\n    <tr>\n      <td>`Alphabetic`</td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Alphabetic\">`Alphabetic`</a></td>\n    </tr>\n    <tr>\n      <td>`Alpha`</td>\n    </tr>\n    <tr>\n      <td>`Any`</td>\n      <td><a href=\"https://unicode.org/reports/tr18/#General_Category_Property\">`Any`</a></td>\n    </tr>\n    <tr>\n      <td>`Assigned`</td>\n      <td><a href=\"https://unicode.org/reports/tr18/#General_Category_Property\">`Assigned`</a></td>\n    </tr>\n    <tr>\n      <td>`Bidi_Control`</td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Bidi_Control\">`Bidi_Control`</a></td>\n    </tr>\n    <tr>\n      <td>`Bidi_C`</td>\n    </tr>\n    <tr>\n      <td>`Bidi_Mirrored`</td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Bidi_Mirrored\">`Bidi_Mirrored`</a></td>\n    </tr>\n    <tr>\n      <td>`Bidi_M`</td>\n    </tr>\n    <tr>\n      <td>`Case_Ignorable`</td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Case_Ignorable\">`Case_Ignorable`</a></td>\n    </tr>\n    <tr>\n      <td>`CI`</td>\n    </tr>\n    <tr>\n      <td>`Cased`</td>\n      <td><a href=\"https://unicode.org/reports/tr44/#Cased\">`Cased`</a></td>\n    </tr>\n    <tr>\n      <td>`Changes_When_Casefolded`</td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#CWCF\">`Changes_When_Casefolded`</a></td>\n    </tr>\n    <tr>\n      <td>`CWCF`</td>\n    </tr>\n    <tr>\n      <td>`Changes_When_Casemapped`</td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#CWCM\">`Changes_When_Casemapped`</a></td>\n    </tr>\n    <tr>\n      <td>`CWCM`</td>\n    </tr>\n    <tr>\n      <td>`Changes_When_Lowercased`</td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#CWL\">`Changes_When_Lowercased`</a></td>\n    </tr>\n    <tr>\n      <td>`CWL`</td>\n    </tr>\n    <tr>\n      <td>`Changes_When_NFKC_Casefolded`</td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#CWKCF\">`Changes_When_NFKC_Casefolded`</a></td>\n    </tr>\n    <tr>\n      <td>`CWKCF`</td>\n    </tr>\n    <tr>\n      <td>`Changes_When_Titlecased`</td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#CWT\">`Changes_When_Titlecased`</a></td>\n    </tr>\n    <tr>\n      <td>`CWT`</td>\n    </tr>\n    <tr>\n      <td>`Changes_When_Uppercased`</td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#CWU\">`Changes_When_Uppercased`</a></td>\n    </tr>\n    <tr>\n      <td>`CWU`</td>\n    </tr>\n    <tr>\n      <td>`Dash`</td>\n      <td><a href=\"https://unicode.org/reports/tr44/#Dash\">`Dash`</a></td>\n    </tr>\n    <tr>\n      <td>`Default_Ignorable_Code_Point`</td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Default_Ignorable_Code_Point\">`Default_Ignorable_Code_Point`</a></td>\n    </tr>\n    <tr>\n      <td>`DI`</td>\n    </tr>\n    <tr>\n      <td>`Deprecated`</td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Deprecated\">`Deprecated`</a></td>\n    </tr>\n    <tr>\n      <td>`Dep`</td>\n    </tr>\n    <tr>\n      <td>`Diacritic`</td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Diacritic\">`Diacritic`</a></td>\n    </tr>\n    <tr>\n      <td>`Dia`</td>\n    </tr>\n    <tr>\n      <td>`Emoji`</td>\n      <td><a href=\"https://unicode.org/reports/tr51/#Emoji_Properties\">`Emoji`</a></td>\n    </tr>\n    <tr>\n      <td>`Emoji_Component`</td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr51/#Emoji_Properties\">`Emoji_Component`</a></td>\n    </tr>\n    <tr>\n      <td>`EComp`</td>\n    </tr>\n    <tr>\n      <td>`Emoji_Modifier`</td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr51/#Emoji_Properties\">`Emoji_Modifier`</a></td>\n    </tr>\n    <tr>\n      <td>`EMod`</td>\n    </tr>\n    <tr>\n      <td>`Emoji_Modifier_Base`</td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr51/#Emoji_Properties\">`Emoji_Modifier_Base`</a></td>\n    </tr>\n    <tr>\n      <td>`EBase`</td>\n    </tr>\n    <tr>\n      <td>`Emoji_Presentation`</td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr51/#Emoji_Properties\">`Emoji_Presentation`</a></td>\n    </tr>\n    <tr>\n      <td>`EPres`</td>\n    </tr>\n    <tr>\n      <td>`Extended_Pictographic`</td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr51/#Emoji_Properties\">`Extended_Pictographic`</a></td>\n    </tr>\n    <tr>\n      <td>`ExtPict`</td>\n    </tr>\n    <tr>\n      <td>`Extender`</td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Extender\">`Extender`</a></td>\n    </tr>\n    <tr>\n      <td>`Ext`</td>\n    </tr>\n    <tr>\n      <td>`Grapheme_Base`</td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Grapheme_Base\">`Grapheme_Base`</a></td>\n    </tr>\n    <tr>\n      <td>`Gr_Base`</td>\n    </tr>\n    <tr>\n      <td>`Grapheme_Extend`</td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Grapheme_Extend\">`Grapheme_Extend`</a></td>\n    </tr>\n    <tr>\n      <td>`Gr_Ext`</td>\n    </tr>\n    <tr>\n      <td>`Hex_Digit`</td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Hex_Digit\">`Hex_Digit`</a></td>\n    </tr>\n    <tr>\n      <td>`Hex`</td>\n    </tr>\n    <tr>\n      <td>`IDS_Binary_Operator`</td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#IDS_Binary_Operator\">`IDS_Binary_Operator`</a></td>\n    </tr>\n    <tr>\n      <td>`IDSB`</td>\n    </tr>\n    <tr>\n      <td>`IDS_Trinary_Operator`</td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#IDS_Trinary_Operator\">`IDS_Trinary_Operator`</a></td>\n    </tr>\n    <tr>\n      <td>`IDST`</td>\n    </tr>\n    <tr>\n      <td>`ID_Continue`</td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#ID_Continue\">`ID_Continue`</a></td>\n    </tr>\n    <tr>\n      <td>`IDC`</td>\n    </tr>\n    <tr>\n      <td>`ID_Start`</td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#ID_Start\">`ID_Start`</a></td>\n    </tr>\n    <tr>\n      <td>`IDS`</td>\n    </tr>\n    <tr>\n      <td>`Ideographic`</td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Ideographic\">`Ideographic`</a></td>\n    </tr>\n    <tr>\n      <td>`Ideo`</td>\n    </tr>\n    <tr>\n      <td>`Join_Control`</td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Join_Control\">`Join_Control`</a></td>\n    </tr>\n    <tr>\n      <td>`Join_C`</td>\n    </tr>\n    <tr>\n      <td>`Logical_Order_Exception`</td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Logical_Order_Exception\">`Logical_Order_Exception`</a></td>\n    </tr>\n    <tr>\n      <td>`LOE`</td>\n    </tr>\n    <tr>\n      <td>`Lowercase`</td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Lowercase\">`Lowercase`</a></td>\n    </tr>\n    <tr>\n      <td>`Lower`</td>\n    </tr>\n    <tr>\n      <td>`Math`</td>\n      <td><a href=\"https://unicode.org/reports/tr44/#Math\">`Math`</a></td>\n    </tr>\n    <tr>\n      <td>`Noncharacter_Code_Point`</td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Noncharacter_Code_Point\">`Noncharacter_Code_Point`</a></td>\n    </tr>\n    <tr>\n      <td>`NChar`</td>\n    </tr>\n    <tr>\n      <td>`Pattern_Syntax`</td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Pattern_Syntax\">`Pattern_Syntax`</a></td>\n    </tr>\n    <tr>\n      <td>`Pat_Syn`</td>\n    </tr>\n    <tr>\n      <td>`Pattern_White_Space`</td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Pattern_White_Space\">`Pattern_White_Space`</a></td>\n    </tr>\n    <tr>\n      <td>`Pat_WS`</td>\n    </tr>\n    <tr>\n      <td>`Quotation_Mark`</td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Quotation_Mark\">`Quotation_Mark`</a></td>\n    </tr>\n    <tr>\n      <td>`QMark`</td>\n    </tr>\n    <tr>\n      <td>`Radical`</td>\n      <td><a href=\"https://unicode.org/reports/tr44/#Radical\">`Radical`</a></td>\n    </tr>\n    <tr>\n      <td>`Regional_Indicator`</td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Regional_Indicator\">`Regional_Indicator`</a></td>\n    </tr>\n    <tr>\n      <td>`RI`</td>\n    </tr>\n    <tr>\n      <td>`Sentence_Terminal`</td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#STerm\">`Sentence_Terminal`</a></td>\n    </tr>\n    <tr>\n      <td>`STerm`</td>\n    </tr>\n    <tr>\n      <td>`Soft_Dotted`</td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Soft_Dotted\">`Soft_Dotted`</a></td>\n    </tr>\n    <tr>\n      <td>`SD`</td>\n    </tr>\n    <tr>\n      <td>`Terminal_Punctuation`</td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Terminal_Punctuation\">`Terminal_Punctuation`</a></td>\n    </tr>\n    <tr>\n      <td>`Term`</td>\n    </tr>\n    <tr>\n      <td>`Unified_Ideograph`</td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Unified_Ideograph\">`Unified_Ideograph`</a></td>\n    </tr>\n    <tr>\n      <td>`UIdeo`</td>\n    </tr>\n    <tr>\n      <td>`Uppercase`</td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Uppercase\">`Uppercase`</a></td>\n    </tr>\n    <tr>\n      <td>`Upper`</td>\n    </tr>\n    <tr>\n      <td>`Variation_Selector`</td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Variation_Selector\">`Variation_Selector`</a></td>\n    </tr>\n    <tr>\n      <td>`VS`</td>\n    </tr>\n    <tr>\n      <td>`White_Space`</td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#White_Space\">`White_Space`</a></td>\n    </tr>\n    <tr>\n      <td>`space`</td>\n    </tr>\n    <tr>\n      <td>`XID_Continue`</td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#XID_Continue\">`XID_Continue`</a></td>\n    </tr>\n    <tr>\n      <td>`XIDC`</td>\n    </tr>\n    <tr>\n      <td>`XID_Start`</td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#XID_Start\">`XID_Start`</a></td>\n    </tr>\n    <tr>\n      <td>`XIDS`</td>\n    </tr>\n  </table>\n</emu-table>\n"
        },
        {
          "name": "table-nonbinary-unicode-properties.html",
          "type": "blob",
          "size": 0.9296875,
          "content": "<emu-table id=\"table-nonbinary-unicode-properties\">\n  <emu-caption>Non-binary Unicode property aliases and their canonical property names</emu-caption>\n  <table class=\"real-table unicode-property-table\">\n    <thead>\n      <tr>\n        <th>Property name and aliases</th>\n        <th>Canonical property name</th>\n      </tr>\n    </thead>\n    <tr>\n      <td>`General_Category`</td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr18/#General_Category_Property\">`General_Category`</a></td>\n    </tr>\n    <tr>\n      <td>`gc`</td>\n    </tr>\n    <tr>\n      <td>`Script`</td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr24/#Script\">`Script`</a></td>\n    </tr>\n    <tr>\n      <td>`sc`</td>\n    </tr>\n    <tr>\n      <td>`Script_Extensions`</td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr24/#Script_Extensions\">`Script_Extensions`</a></td>\n    </tr>\n    <tr>\n      <td>`scx`</td>\n    </tr>\n  </table>\n</emu-table>\n"
        },
        {
          "name": "withdrawn-proposals.md",
          "type": "blob",
          "size": 0.115234375,
          "content": "# Withdrawn Proposals\n\nThis list has moved [here](https://github.com/tc39/proposals/blob/HEAD/inactive-proposals.md).\n"
        }
      ]
    }
  ]
}