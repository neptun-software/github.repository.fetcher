{
  "metadata": {
    "timestamp": 1736709592528,
    "page": 2,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "bitcoinbook/bitcoinbook",
      "stars": 23880,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.072265625,
          "content": "dump.asciidoc\ncode/python-env\n*.csv\n*.pdf\n.debris\n_build/\ndist/\nbook.html\n"
        },
        {
          "name": "BOOK.md",
          "type": "blob",
          "size": 1.009765625,
          "content": "# Mastering Bitcoin: Programming the Open Blockchain (3rd Edition)\n\n_By Andreas M. Antonopoulos and David A. Harding_\n\n## [Preface](preface.adoc)\n## [Chapter 1 - Introduction](ch01_intro.adoc)\n## [Chapter 2 - Overview](ch02_overview.adoc)\n## [Chapter 3 - Bitcoin Core](ch03_bitcoin-core.adoc)\n## [Chapter 4 - Keys and Addresses](ch04_keys.adoc)\n## [Chapter 5 - Wallets](ch05_wallets.adoc)\n## [Chapter 6 - Transactions](ch06_transactions.adoc)\n## [Chapter 7 - Authorization and Authentication](ch07_authorization-authentication.adoc)\n## [Chapter 8 - Signatures](ch08_signatures.adoc)\n## [Chapter 9 - Transaction Fees](ch09_fees.adoc)\n## [Chapter 10 - Bitcoin Network](ch10_network.adoc)\n## [Chapter 11 - Bitcoin Blockchain](ch11_blockchain.adoc)\n## [Chapter 12 - Mining](ch12_mining.adoc)\n## [Chapter 13 - Security](ch13_security.adoc)\n## [Chapter 14 - Applications](ch14_applications.adoc)\n## [Appendix A - The Bitcoin Whitepaper](appa_whitepaper.adoc)\n## [Appendix B - Errata](appb_errata.adoc)\n## [Appendix C - BIPS](appc_bips.adoc)"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.861328125,
          "content": "# Guide to contributing\n\nThis book is developed collaboratively and openly, here on GitHub. We accept comments, contributions and corrections from all.\n\n## Current Project STATUS\n\n**THIRD EDITION PUBLISHED**\n\n\n## License and attribution\n\nAll contributions must be properly licensed and attributed. If you are contributing your own original work, then you are offering it under a CC-BY license (Creative Commons Attribution). You are responsible for adding your own name or pseudonym in the [Github Contributors](github_contrib.asciidoc) section, as attribution for your contribution.\n\nIf you are sourcing a contribution from somewhere else, it must carry a compatible license. The book will initially be released under a CC-BY-NC-ND license which means that contributions must be licensed under open licenses such as MIT, CC0, CC-BY, etc. You need to indicate the original source and original license, by including an asciidoc markup comment above your contribution, like this:\n\n```asciidoc\n////\nSource: https://example.com/originaltext\nLicense: CC0\nAdded by: @aantonop\n////\n```\n\n\n## Contributing with a Pull Request\n\nPlease submit only PRs for errors that a non-domain-expert copy editor might miss. Do not submit PRs for typos, grammar and syntax, as those are part of the copy editors job. \n\nThe best way to contribute to this book is by making a pull request:\n\n1. Login with your GitHub account or create one now\n2. [Fork](https://github.com/bitcoinbook/bitcoinbook#fork-destination-box) the `bitcoinbook` repository. Work on your fork.\n3. Create a new branch on which to make your change, e.g. `git checkout -b my_code_contribution`, or make the change on the `develop` branch.\n4. Please do one pull request *per asciidoc file*, to avoid large merges. Edit the asciidoc file where you want to make a change.\n5. If you want attribution for your contribution, edit the file `meta/github_contrib.adoc` and add your own name to the list of contributors under the Acknowledgment section. Use your name, or a GitHub username, or a pseudonym. You are responsible for creating an attribution.\n6. Commit your change. Include a commit message describing the correction.\n7. Submit a pull request against the bitcoinbook repository.\n\n## Contributing with an issue\n\nIf you find a mistake and you're not sure how to fix it, or you don't know how to do a pull request, then you can file an Issue. Filing an Issue will help us see the problem and fix it.\n\n## Line endings\n\nAll submissions should use Unix-like line endings: LF (not CR, not CR/LF). All the postprocessing is done on Unix-like systems. Incorrect line endings, or changes to line endings cause confusion for the diff tools and make the whole file look like it has changed.\n\nIf you are unsure or your OS makes things difficult, consider using a developer's text editor such as VSCode.\n\n## Thanks\n\nWe are very grateful for the support of the entire Bitcoin community. Thank you!\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.525390625,
          "content": "Copyright © 2014 by Andreas M Antonopoulos LLC\nCopyright © 2017 by Andreas M Antonopoulos LLC\nCopyright © 2018 by aantonop Books LLC\nCopyright © 2023 David Harding\n\nDifferent editions of this book are covered by different licenses. Contributions to this book are made under public domain (CC0) or attribution licenses (CC-BY) - see CONTRIBUTING.md\n\n\"Mastering Bitcoin: Unlocking Digital Currencies\" (1st Edition) by Andreas M. Antonopoulos, which is tagged \"Edition1Print2\" is licensed under the Creative Commons Attribution-ShareAlike 4.0 International License. To view a copy of this license, visit http://creativecommons.org/licenses/by-sa/4.0/.\n\n\"Mastering Bitcoin: Programming the Open Blockchain\" (2nd Edition) by Andreas M. Antonopoulos, which is tagged \"second_edition_print3\" is licensed under the Creative Commons Attribution-ShareAlike 4.0 International License. To view a copy of this license, visit http://creativecommons.org/licenses/by-sa/4.0/.\n\n\"Mastering Bitcoin: Programming the Open Blockchain\" (3rd Edition) by Andreas M. Antonopoulos & David Harding, which is tagged \"third_edition_print1\" is licensed under the Creative Commons Attribution-ShareAlike 4.0 International License. To view a copy of this license, visit http://creativecommons.org/licenses/by-sa/4.0/ .\n\nThese \"Free Culture\" licenses were approved by the publisher O'Reilly Media (http://oreilly.com). O'Reilly Media is not just the world's best publisher of technical books but also a strong supporter of an open culture and the sharing of knowledge. \n\nThank you O'Reilly!\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.6826171875,
          "content": "# Mastering Bitcoin\n\nMastering Bitcoin is a technical book that explains what Bitcoin is and how it works.\n\nThis repository contains the complete text of three editions of the book Mastering Bitcoin as published in paperback and ebook formats by O'Reilly Media. Different editions of this book are covered by different open licenses (see [LICENSE](LICENSE)). The three editions are:\n\n* The [first edition, second print](https://github.com/bitcoinbook/bitcoinbook/releases/tag/Edition1Print2), published in December 2014\n* The [second edition, third print](https://github.com/bitcoinbook/bitcoinbook/releases/tag/second_edition_print3), published in March 2018\n* The [third edition, first print](https://github.com/bitcoinbook/bitcoinbook/releases/tag/third_edition_print1), published in December 2023\n\n# Reading This Book\n\nTo read this book *for free*, see [BOOK.md](https://github.com/bitcoinbook/bitcoinbook/blob/develop/BOOK.md). Click on each of the chapters to read in your browser. \n\n_Please note that some of the links in each chapter do not work when reading the book on Github. This is because those links are intended for the print and ebook editions of the book and only work when all the chapters are rendered together. Unfortunatelly, Github does not have the ability to render the complete book at once._\n\n<!-- /* This section no longer applies -harding */\n## Where is the PDF?\n\n**The current edition is not available as a PDF, deliberately**. Why? Because the publisher (O'Reilly Media) is a for-profit publisher who puts considerable resources behind producing, editing and distributing this book. The third edition of \"Mastering Bitcoin\" is available under a CC-BY-NC-ND license, not a CC-BY-SA license. The book will eventually (within a year of publication) be released under a CC-BY-SA license, at which point PDF copies and translations will be allowed (a PDF is a \"derivative\" product, which is what the \"ND-NoDerivatives\" part of the license prohibits). \n\nMaking PDF copies violates the license and interferes with the publisher's and the authors' ability to earn from their work. Furthermore, if you make it so the publisher can't recoup their investment, they may delay the release into CC-BY-SA. A beautifully rendered PDF or epub version of this book is offered for sale by the publisher. Convenient packaging is the for-profit product, whereas the version available here is slightly less convenient but entirely free for personal and non-commercial use. If you want convenience and nice packaging, buy the book!\n\nPlease don't create or distribute PDFs until the license is changed to CC-BY-SA. It is rare for a publisher to even agree to a CC-BY-NC-ND license. Don't make it harder for free culture by violating even that, already generous, license. \n-->\n\n# Mastering Bitcoin Third Edition\n\n*\"Mastering Bitcoin: Programming the Open Blockchain (3rd Edition)\"* is now available in paperback and ebook formats by many booksellers worldwide, such as:\n\n* [EBooks.com](https://www.ebooks.com/en-us/book/211147266/mastering-bitcoin/andreas-m-antonopoulos/)\n* [Amazon](https://www.amazon.com/Mastering-Bitcoin-Programming-Open-Blockchain/dp/1098150090)\n* [Barnes and Noble](https://www.barnesandnoble.com/w/mastering-bitcoin-andreas-m-antonopoulos/1126323222?ean=9781098150051)\n\nThe tag [third_edition_print_1](https://github.com/bitcoinbook/bitcoinbook/releases/tag/third_edition_print1) corresponds to the first print of the third edition of Mastering Bitcoin as published in paperback and ebook by O'Reilly Media in December 2023.\n\n <p xmlns:cc=\"http://creativecommons.org/ns#\" xmlns:dct=\"http://purl.org/dc/terms/\"><span property=\"dct:title\">Mastering Bitcoin: Programming the Open Blockchain (Third Edition)</span> by <span property=\"cc:attributionName\">Andreas M. Antonopoulos, David A. Harding</span> is licensed under <a rel=\"license\" href=\"https://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a> <a rel=\"license\" href=\"https://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a>\n\n# Other Editions and Languages\n\n## Mastering Bitcoin - First Edition\n\nThe tags [Edition1Print1](https://github.com/bitcoinbook/bitcoinbook/releases/tag/Edition1Print1), [Edition1Print2](https://github.com/bitcoinbook/bitcoinbook/releases/tag/Edition1Print2) correspond to the two existing prints of Mastering Bitcoin (First Edition) as published by O'Reilly Media.\n\n<a rel=\"license\" href=\"https://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a><br /><span xmlns:dct=\"https://purl.org/dc/terms/\" href=\"https://purl.org/dc/dcmitype/Text\" property=\"dct:title\" rel=\"dct:type\">Mastering Bitcoin - First Edition</span> by <a xmlns:cc=\"https://creativecommons.org/ns#\" href=\"https://aantonop.com/books\" property=\"cc:attributionName\" rel=\"cc:attributionURL\">aantonop Books LLC</a> is licensed under a <a rel=\"license\" href=\"https://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\n\n## Mastering Bitcoin - Second Edition\n\nThe tags, [second_edition_print_1](https://github.com/bitcoinbook/bitcoinbook/releases/tag/second_edition_print_1)  [second_edition_print2](https://github.com/bitcoinbook/bitcoinbook/releases/tag/second_edition_print2),  [second_edition_print3](https://github.com/bitcoinbook/bitcoinbook/releases/tag/second_edition_print3), correspond to the first (June 8th, 2017), second (July 20th, 2017) and third (March  23rd, 2018) print of Mastering Bitcoin (Second Edition), as published by O'Reilly Media.\n\n<a rel=\"license\" href=\"https://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a><br /><span xmlns:dct=\"https://purl.org/dc/terms/\" href=\"https://purl.org/dc/dcmitype/Text\" property=\"dct:title\" rel=\"dct:type\">Mastering Bitcoin - Second Edition</span> by <a xmlns:cc=\"https://creativecommons.org/ns#\" href=\"https://aantonop.com/books\" property=\"cc:attributionName\" rel=\"cc:attributionURL\">aantonop Books LLC</a> is licensed under a <a rel=\"license\" href=\"https://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\n\nMastering Bitcoin (Open Second Edition), based on the Seond Edition, is also available in English and Spanish at https://aantonop.com. Mastering Bitcoin 2nd Edition is also published in German, Polish, Japanese, Korean, Chinese and other languages by publishers in the respective countries.\n\n# Issues, Errors, Comments, Contributions\n\nTo contribute to this book, see [CONTRIBUTING.md](CONTRIBUTING.md). All contributions must be your original work and contributed under a public domain (CC0), or attribution (CC-BY) license. You must include your own attribution in the pull request, as an edit to the github_contrib.asciidoc file. \n\nIf you know how to make a pull request to contribute a fix, please write the correction and use a pull request to submit it for consideration against the [develop branch](https://github.com/bitcoinbook/bitcoinbook/tree/develop). If you are making several changes, please use a separate commit for each to make it easier to cherry-pick or resolve conflicts. Otherwise, please submit an issue, explaining the error or comment. If you would like to contribute extensive changes or new material, please coordinate with the author first; contact information can be found on his website: https://aantonop.com/\n\n# Translations\n\nIf you are interested in translating this book, please join our team of volunteers at: https://www.transifex.com/bitcoinbook/mastering-bitcoin/\n"
        },
        {
          "name": "appa_whitepaper.adoc",
          "type": "blob",
          "size": 29.380859375,
          "content": "[[satoshi_whitepaper]]\n[appendix]\n== The Bitcoin Whitepaper [.keep-together]#by Satoshi Nakamoto#\n\n\n[NOTE]\n====\nThis is the(((\"Bitcoin whitepaper\", \"original version\", id=\"bitcoin-whitepaper-original\")))(((\"whitepaper (Bitcoin)\", \"original version\", id=\"whitepaper-original\")))(((\"Nakamoto, Satoshi\"))) original whitepaper, reproduced in its entirety exactly as it was published by Satoshi Nakamoto in October 2008.\n====\n\n=== Bitcoin - A Peer-to-Peer Electronic Cash System\n\nSatoshi Nakamoto\n\n_satoshin@gmx.com_\n\npass:[<a href=\"https://bitcoin.org/en/\" class=\"orm:hideurl\"><em>www.bitcoin.org</em></a>]\n\n*Abstract.* A purely peer-to-peer version of electronic cash would allow online payments to be sent directly from one party to another without going through a financial institution. Digital signatures provide part of the solution, but the main benefits are lost if a trusted third party is still required to prevent double-spending. We propose a solution to the double-spending problem using a peer-to-peer network. The network timestamps transactions by hashing them into an ongoing chain of hash-based proof-of-work, forming a record that cannot be changed without redoing the proof-of-work. The longest chain not only serves as proof of the sequence of events witnessed, but proof that it came from the largest pool of CPU power. As long as a majority of CPU power is controlled by nodes that are not cooperating to attack the network, they'll generate the longest chain and outpace attackers. The network itself requires minimal structure. Messages are broadcast on a best effort basis, and nodes can leave and rejoin the network at will, accepting the longest proof-of-work chain as proof of what happened while they were gone.\n\n==== Introduction\nCommerce on the Internet has come to rely almost exclusively on financial institutions serving as trusted third parties to process electronic payments. While the system works well enough for most transactions, it still suffers from the inherent weaknesses of the trust based model. Completely non-reversible transactions are not really possible, since financial institutions cannot avoid mediating disputes. The cost of mediation increases transaction costs, limiting the minimum practical transaction size and cutting off the possibility for small casual transactions, and there is a broader cost in the loss of ability to make non-reversible payments for nonreversible services. With the possibility of reversal, the need for trust spreads. Merchants must be wary of their customers, hassling them for more information than they would otherwise need. A certain percentage of fraud is accepted as unavoidable. These costs and payment uncertainties can be avoided in person by using physical currency, but no mechanism exists to make payments over a communications channel without a trusted party.\n\nWhat is needed is an electronic payment system based on cryptographic proof instead of trust, allowing any two willing parties to transact directly with each other without the need for a trusted third party. Transactions that are computationally impractical to reverse would protect sellers from fraud, and routine escrow mechanisms could easily be implemented to protect buyers. In this paper, we propose a solution to the double-spending problem using a peer-to-peer distributed timestamp server to generate computational proof of the chronological order of transactions. The system is secure as long as honest nodes collectively control more CPU power than any cooperating group of attacker nodes.\n\n==== Transactions\nWe (((\"transactions\", \"in Bitcoin whitepaper\", secondary-sortas=\"Bitcoin whitepaper\", id=\"transaction-whitepaper\")))define an electronic coin as a chain of digital signatures. Each owner transfers the coin to the next by digitally signing a hash of the previous transaction and the public key of the next owner and adding these to the end of the coin. A payee can verify the signatures to verify the chain of ownership.\n\nimage::images/mbc3_0401.png[\"Transactions\"]\n\nThe problem of course is the payee can't verify that one of the owners did not double-spend the coin. A common solution is to introduce a trusted central authority, or mint, that checks every transaction for double spending. After each transaction, the coin must be returned to the mint to issue a new coin, and only coins issued directly from the mint are trusted not to be double-spent. The problem with this solution is that the fate of the entire money system depends on the company running the mint, with every transaction having to go through them, just like a bank.\n\nWe need a way for the payee to know that the previous owners did not sign any earlier transactions.  For our purposes, the earliest transaction is the one that counts, so we don't care about later attempts to double-spend. The only way to confirm the absence of a transaction is to be aware of all transactions. In the mint based model, the mint was aware of all transactions and decided which arrived first. To accomplish this without a trusted party, transactions must be publicly announced [1], and we need a system for participants to agree on a single history of the order in which they were received. The payee needs proof that at the time of each transaction, the majority of nodes agreed it was the (((\"transactions\", \"in Bitcoin whitepaper\", secondary-sortas=\"Bitcoin whitepaper\", startref=\"transaction-whitepaper\")))first received.\n\n==== Timestamp Server\nThe (((\"timestamp servers\")))solution we propose begins with a timestamp server. A timestamp server works by taking a hash of a block of items to be timestamped and widely publishing the hash, such as in a newspaper or Usenet post [2-5]. The timestamp proves that the data must have existed at the time, obviously, in order to get into the hash. Each timestamp includes the previous timestamp in its hash, forming a chain, with each additional timestamp reinforcing the ones before it.\n\nimage::images/mbc3_aain02.png[\"timestamp server\"]\n\n==== Proof-of-Work\nTo (((\"proof-of-work algorithm\", \"in Bitcoin whitepaper\", secondary-sortas=\"Bitcoin whitepaper\")))implement a distributed timestamp server on a peer-to-peer basis, we will need to use a proof-of-work system similar to Adam Back's Hashcash [6], rather than newspaper or Usenet posts. The proof-of-work involves scanning for a value that when hashed, such as with SHA-256, the hash begins with a number of zero bits. The average work required is exponential in the number of zero bits required and can be verified by executing a single hash.  For our timestamp network, we implement the proof-of-work by incrementing a nonce in the block until a value is found that gives the block's hash the required zero bits. Once the CPU effort has been expended to make it satisfy the proof-of-work, the block cannot be changed without redoing the work. As later blocks are chained after it, the work to change the block would include redoing all the blocks after it.\n\nimage::images/mbc3_aain03.png[\"pow\"]\n\nThe proof-of-work also solves the problem of determining representation in majority decision making. If the majority were based on one-IP-address-one-vote, it could be subverted by anyone able to allocate many IPs. Proof-of-work is essentially one-CPU-one-vote. The majority decision is represented by the longest chain, which has the greatest proof-of-work effort invested in it. If a majority of CPU power is controlled by honest nodes, the honest chain will grow the fastest and outpace any competing chains. To modify a past block, an attacker would have to redo the proof-of-work of the block and all blocks after it and then catch up with and surpass the work of the honest nodes. We will show later that the probability of a slower attacker catching up diminishes exponentially as subsequent blocks are added.\n\nTo compensate for increasing hardware speed and varying interest in running nodes over time, the proof-of-work difficulty is determined by a moving average targeting an average number of blocks per hour. If they're generated too fast, the difficulty increases.\n\n==== Network\n\nThe steps(((\"nodes\", \"in Bitcoin\", secondary-sortas=\"Bitcoin whitepaper\")))(((\"Bitcoin network\", \"in Bitcoin whitepaper\", secondary-sortas=\"Bitcoin whitepaper\"))) to run the network are as follows:\n\n1. New transactions are broadcast to all nodes.\n2. Each node collects new transactions into a block.\n3. Each node works on finding a difficult proof-of-work for its block.\n4. When a node finds a proof-of-work, it broadcasts the block to all nodes.\n5. Nodes accept the block only if all transactions in it are valid and not already spent.\n6. Nodes express their acceptance of the block by working on creating the next block in the chain, using the hash of the accepted block as the previous hash.\n\nNodes always consider the longest chain to be the correct one and will keep working on extending it. If two nodes broadcast different versions of the next block simultaneously, some nodes may receive one or the other first. In that case, they work on the first one they received, but save the other branch in case it becomes longer. The tie will be broken when the next proof-of-work is found and one branch becomes longer; the nodes that were working on the other branch will then switch to the longer one.\n\nNew transaction broadcasts do not necessarily need to reach all nodes. As long as they reach many nodes, they will get into a block before long. Block broadcasts are also tolerant of dropped messages. If a node does not receive a block, it will request it when it receives the next block and realizes it missed one.\n\n==== Incentive\nBy(((\"incentives\", id=\"incentive-whitepaper\"))) convention, the first transaction in a block is a special transaction that starts a new coin owned by the creator of the block. This adds an incentive for nodes to support the network, and provides a way to initially distribute coins into circulation, since there is no central authority to issue them. The steady addition of a constant of amount of new coins is analogous to gold miners expending resources to add gold to circulation. In our case, it is CPU time and electricity that is expended.\n\nThe incentive can also be funded with transaction fees. If the output value of a transaction is less than its input value, the difference is a transaction fee that is added to the incentive value of the block containing the transaction. Once a predetermined number of coins have entered circulation, the incentive can transition entirely to transaction fees and be completely inflation free.\n\nThe incentive may help encourage nodes to stay honest. If a greedy attacker is able to assemble more CPU power than all the honest nodes, he would have to choose between using it to defraud people by stealing back his payments, or using it to generate new coins. He ought to find it more profitable to play by the rules, such rules that favour him with more new coins than everyone else combined, than to undermine the system and the validity of his own(((\"incentives\", startref=\"incentive-whitepaper\"))) wealth.\n\n==== Reclaiming Disk Space\n\n++++\n<p>Once (((\"disk space\", \"reclaiming\")))(((\"reclaiming\", \"disk space\")))(((\"blocks\", \"reclaiming disk space\")))the latest transaction in a coin is buried under enough blocks, the spent transactions before it can be discarded to save disk space. To facilitate this without breaking the block's hash, transactions are hashed in a Merkle Tree <a href=\"#ref_seven\">[7]</a> <a href=\"#ref_two\">[2]</a> <a href=\"#ref_five\">[5]</a>, with only the root included in the block's hash. Old blocks can then be compacted by stubbing off branches of the tree. The interior hashes do not need to be stored.</p>\n++++\n\nimage::images/mbc3_aain04.png[\"disk\"]\n\nA block header with no transactions would be about 80 bytes. If we suppose blocks are generated every 10 minutes, +80 bytes * 6 * 24 * 365 = 4.2MB+ per year. With computer systems typically selling with 2GB of RAM as of 2008, and Moore's Law predicting current growth of 1.2GB per year, storage should not be a problem even if the block headers must be kept in memory.\n\n==== Simplified Payment Verification\nIt is (((\"payment verification\", \"in Bitcoin whitepaper\", secondary-sortas=\"Bitcoin whitepaper\", id=\"payment-verify\")))(((\"verifying\", \"payment\", \"in Bitcoin whitepaper\", tertiary-sortas=\"Bitcoin whitepaper\", id=\"verify-payment\")))possible to verify payments without running a full network node. A user only needs to keep a copy of the block headers of the longest proof-of-work chain, which he can get by querying network nodes until he's convinced he has the longest chain, and obtain the Merkle branch linking the transaction to the block it's timestamped in. He can't check the transaction for himself, but by linking it to a place in the chain, he can see that a network node has accepted it, and blocks added after it further confirm the network has accepted it.\n\nimage::images/mbc3_aain05.png[\"spv\"]\n\nAs such, the verification is reliable as long as honest nodes control the network, but is more vulnerable if the network is overpowered by an attacker. While network nodes can verify transactions for themselves, the simplified method can be fooled by an attacker's fabricated transactions for as long as the attacker can continue to overpower the network. One strategy to protect against this would be to accept alerts from network nodes when they detect an invalid block, prompting the user's software to download the full block and alerted transactions to confirm the inconsistency. Businesses that receive frequent payments will probably still want to run their own nodes for more independent security and quicker (((\"payment verification\", \"in Bitcoin whitepaper\", secondary-sortas=\"Bitcoin whitepaper\", startref=\"payment-verify\")))(((\"verifying\", \"payment\", \"in Bitcoin whitepaper\", tertiary-sortas=\"Bitcoin whitepaper\", startref=\"verify-payment\")))verification.\n\n==== Combining and Splitting Value\nAlthough (((\"transactions\", \"inputs\", \"in Bitcoin whitepaper\", tertiary-sortas=\"Bitcoin whitepaper\")))(((\"transactions\", \"outputs\", \"in Bitcoin whitepaper\", tertiary-sortas=\"Bitcoin whitepaper\")))(((\"inputs\", \"in Bitcoin whitepaper\", secondary-sortas=\"Bitcoin whitepaper\")))(((\"outputs\", \"in Bitcoin whitepaper\", secondary-sortas=\"Bitcoin whitepaper\")))it would be possible to handle coins individually, it would be unwieldy to make a separate transaction for every cent in a transfer. To allow value to be split and combined, transactions contain multiple inputs and outputs. Normally there will be either a single input from a larger previous transaction or multiple inputs combining smaller amounts, and at most two outputs: one for the payment, and one returning the change, if any, back to the sender.\n\nimage::images/mbc3_aain06.png[\"combining-splitting\"]\n\nIt should be noted that fan-out, where a transaction depends on several transactions, and those transactions depend on many more, is not a problem here. There is never the need to extract a complete standalone copy of a transaction's history.\n\n==== Privacy\nThe traditional(((\"privacy\", \"in Bitcoin whitepaper\", secondary-sortas=\"Bitcoin whitepaper\"))) banking model achieves a level of privacy by limiting access to information to the parties involved and the trusted third party. The necessity to announce all transactions publicly precludes this method, but privacy can still be maintained by breaking the flow of information in another place: by keeping public keys anonymous. The public can see that someone is sending an amount to someone else, but without information linking the transaction to anyone. This is similar to the level of information released by stock exchanges, where the time and size of individual trades, the \"tape\", is made public, but without telling who the parties were.\n\nimage::images/mbc3_aain07.png[\"privacy\"]\n\nAs an additional firewall, a new key pair should be used for each transaction to keep them from being linked to a common owner. Some linking is still unavoidable with multi-input transactions, which necessarily reveal that their inputs were owned by the same owner. The risk is that if the owner of a key is revealed, linking could reveal other transactions that belonged to the same owner.\n\n==== Calculations\nWe consider (((\"calculations\", \"in Bitcoin whitepaper\", secondary-sortas=\"Bitcoin whitepaper\", id=\"calculate-whitepaper\")))the scenario of an attacker trying to generate an alternate chain faster than the honest chain. Even if this is accomplished, it does not throw the system open to arbitrary changes, such as creating value out of thin air or taking money that never belonged to the attacker. Nodes are not going to accept an invalid transaction as payment, and honest nodes will never accept a block containing them. An attacker can only try to change one of his own transactions to take back money he recently spent.\n\nThe race between the honest chain and an attacker chain can be characterized as a (((\"Binomial Random Walk\")))Binomial Random Walk. The success event is the honest chain being extended by one block, increasing its lead by +1, and the failure event is the attacker's chain being extended by one block, reducing the gap by -1.\n\n++++\n<p>The probability of an attacker catching up from a given deficit is analogous to a (((\"Gambler&#x27;s Ruin problem\")))Gambler's Ruin problem. Suppose a gambler with unlimited credit starts at a deficit and plays potentially an infinite number of trials to try to reach breakeven. We can calculate the probability he ever reaches breakeven, or that an attacker ever catches up with the honest chain, as follows <a href=\"#ref_eight\">[8]</a>:</p>\n++++\n\np = probability an honest node finds the next block\n\nq = probability the attacker finds the next block\n\nq~z~ = probability the attacker will ever catch up from z blocks behind\n\n\n++++\n<div data-type=\"equation\">\n<math display=\"block\" xmlns=\"http://www.w3.org/1998/Math/MathML\" >\n  <mstyle mathsize=\"1.2000em\">\n    <msub>\n      <mi>q</mi>\n      <mi>z</mi>\n    </msub>\n    <mo>=</mo>\n    <mrow>\n      <mo fence=\"true\" form=\"prefix\">{</mo>\n      <mtable columnalign=\"center center\">\n        <mtr>\n          <mtd>\n            <mn>1</mn>\n          </mtd>\n          <mtd>\n            <mrow>\n              <mtext>if</mtext>\n              <mspace width=\"0.2778em\"></mspace>\n              <mi>p</mi>\n              <mo>≤</mo>\n              <mi>q</mi>\n            </mrow>\n          </mtd>\n        </mtr>\n        <mtr>\n          <mtd>\n            <mrow>\n              <mo form=\"prefix\" stretchy=\"false\">(</mo>\n              <mi>q</mi>\n              <mo lspace=\"0em\" rspace=\"0em\">⁄</mo>\n              <mi>p</mi>\n              <msup>\n                <mo form=\"postfix\" stretchy=\"false\">)</mo>\n                <mi>z</mi>\n              </msup>\n            </mrow>\n          </mtd>\n          <mtd>\n            <mrow>\n              <mtext>if</mtext>\n              <mspace width=\"0.2778em\"></mspace>\n              <mi>p</mi>\n              <mo>&gt;</mo>\n              <mi>q</mi>\n            </mrow>\n          </mtd>\n        </mtr>\n      </mtable>\n      <mo fence=\"true\" form=\"postfix\">}</mo>\n    </mrow>\n  </mstyle>\n</math>\n</div>\n++++\n\nGiven our assumption that p > q, the probability drops exponentially as the number of blocks the attacker has to catch up with increases. With the odds against him, if he doesn't make a lucky lunge forward early on, his chances become vanishingly small as he falls further behind.\n\nWe now consider how long the recipient of a new transaction needs to wait before being sufficiently certain the sender can't change the transaction. We assume the sender is an attacker who wants to make the recipient believe he paid him for a while, then switch it to pay back to himself after some time has passed. The receiver will be alerted when that happens, but the sender hopes it will be too late.\n\nThe receiver generates a new key pair and gives the public key to the sender shortly before signing. This prevents the sender from preparing a chain of blocks ahead of time by working on it continuously until he is lucky enough to get far enough ahead, then executing the transaction at that moment. Once the transaction is sent, the dishonest sender starts working in secret on a parallel chain containing an alternate version of his transaction.\n\nThe recipient waits until the transaction has been added to a block and z blocks have been linked after it. He doesn't know the exact amount of progress the attacker has made, but assuming the honest blocks took the average expected time per block, the attacker's potential progress will be a Poisson distribution with expected value:\n\n++++\n<div data-type=\"equation\">\n<math display=\"block\" xmlns=\"http://www.w3.org/1998/Math/MathML\" >\n  <mstyle mathsize=\"1.2000em\">\n    <mi>λ</mi>\n    <mo>=</mo>\n    <mi>z</mi>\n    <mfrac>\n      <mi>q</mi>\n      <mi>p</mi>\n    </mfrac>\n  </mstyle>\n</math>\n</div>\n++++\n\nTo get the probability the attacker could still catch up now, we multiply the Poisson density for each amount of progress he could have made by the probability he could catch up from that point:\n\n++++\n<div data-type=\"equation\">\n<math display=\"block\" xmlns=\"http://www.w3.org/1998/Math/MathML\" >\n  <mstyle mathsize=\"1.2000em\">\n    <mrow>\n      <munderover>\n        <mo movablelimits=\"false\">∑</mo>\n        <mrow>\n          <mi>k</mi>\n          <mo>=</mo>\n          <mn>0</mn>\n        </mrow>\n        <mi>∞</mi>\n      </munderover>\n    </mrow>\n    <mfrac>\n      <mrow>\n        <msup>\n          <mi>λ</mi>\n          <mi>k</mi>\n        </msup>\n        <msup>\n          <mi>e</mi>\n          <mrow>\n            <mo>−</mo>\n            <mi>λ</mi>\n          </mrow>\n        </msup>\n      </mrow>\n      <mrow>\n        <mi>k</mi>\n        <mo form=\"postfix\" stretchy=\"false\">!</mo>\n      </mrow>\n    </mfrac>\n    <mo>⋅</mo>\n    <mrow>\n      <mo fence=\"true\" form=\"prefix\">{</mo>\n      <mtable columnalign=\"center center\">\n        <mtr>\n          <mtd>\n            <mrow>\n              <mo form=\"prefix\" stretchy=\"false\">(</mo>\n              <mi>q</mi>\n              <mo lspace=\"0em\" rspace=\"0em\">⁄</mo>\n              <mi>p</mi>\n              <msup>\n                <mo form=\"postfix\" stretchy=\"false\">)</mo>\n                <mrow>\n                  <mo form=\"prefix\" stretchy=\"false\">(</mo>\n                  <mi>z</mi>\n                  <mo>−</mo>\n                  <mi>k</mi>\n                  <mo form=\"postfix\" stretchy=\"false\">)</mo>\n                </mrow>\n              </msup>\n            </mrow>\n          </mtd>\n          <mtd>\n            <mrow>\n              <mtext>if</mtext>\n              <mspace width=\"0.2778em\"></mspace>\n              <mi>k</mi>\n              <mo>≤</mo>\n              <mi>z</mi>\n            </mrow>\n          </mtd>\n        </mtr>\n        <mtr>\n          <mtd>\n            <mn>1</mn>\n          </mtd>\n          <mtd>\n            <mrow>\n              <mtext>if</mtext>\n              <mspace width=\"0.2778em\"></mspace>\n              <mi>k</mi>\n              <mo>&gt;</mo>\n              <mi>z</mi>\n            </mrow>\n          </mtd>\n        </mtr>\n      </mtable>\n      <mo fence=\"true\" form=\"postfix\">}</mo>\n    </mrow>\n  </mstyle>\n</math>\n</div>\n++++\n\nRearranging to avoid summing the infinite tail of the distribution...\n\n++++\n<div data-type=\"equation\">\n<math display=\"block\" xmlns=\"http://www.w3.org/1998/Math/MathML\" >\n  <mstyle mathsize=\"1.2000em\">\n    <mn>1</mn>\n    <mo>−</mo>\n    <mrow>\n      <munderover>\n        <mo movablelimits=\"false\">∑</mo>\n        <mrow>\n          <mi>k</mi>\n          <mo>=</mo>\n          <mn>0</mn>\n        </mrow>\n        <mi>z</mi>\n      </munderover>\n    </mrow>\n    <mfrac>\n      <mrow>\n        <msup>\n          <mi>λ</mi>\n          <mi>k</mi>\n        </msup>\n        <msup>\n          <mi>e</mi>\n          <mrow>\n            <mo>−</mo>\n            <mi>λ</mi>\n          </mrow>\n        </msup>\n      </mrow>\n      <mrow>\n        <mi>k</mi>\n        <mo form=\"postfix\" stretchy=\"false\">!</mo>\n      </mrow>\n    </mfrac>\n    <mrow>\n      <mo fence=\"true\" form=\"prefix\">(</mo>\n      <mn>1</mn>\n      <mo>−</mo>\n      <mo form=\"prefix\" stretchy=\"false\">(</mo>\n      <mi>q</mi>\n      <mo lspace=\"0em\" rspace=\"0em\">⁄</mo>\n      <mi>p</mi>\n      <msup>\n        <mo form=\"postfix\" stretchy=\"false\">)</mo>\n        <mrow>\n          <mo form=\"prefix\" stretchy=\"false\">(</mo>\n          <mi>z</mi>\n          <mo>−</mo>\n          <mi>k</mi>\n          <mo form=\"postfix\" stretchy=\"false\">)</mo>\n        </mrow>\n      </msup>\n      <mo fence=\"true\" form=\"postfix\">)</mo>\n    </mrow>\n  </mstyle>\n</math>\n</div>\n++++\n\nConverting to C code...\n\n[source,c]\n----\n#include <math.h>\ndouble AttackerSuccessProbability(double q, int z)\n{\n    double p = 1.0 - q;\n    double lambda = z * (q / p);\n    double sum = 1.0;\n    int i, k;\n    for (k = 0; k <= z; k++)\n    {\n        double poisson = exp(-lambda);\n        for (i = 1; i <= k; i++)\n            poisson *= lambda / i;\n        sum -= poisson * (1 - pow(q / p, z - k));\n    }\n    return sum;\n}\n----\n\nRunning some results, we can see the probability drop off exponentially with z.\n----\nq=0.1\nz=0 P=1.0000000\nz=1 P=0.2045873\nz=2 P=0.0509779\nz=3 P=0.0131722\nz=4 P=0.0034552\nz=5 P=0.0009137\nz=6 P=0.0002428\nz=7 P=0.0000647\nz=8 P=0.0000173\nz=9 P=0.0000046\nz=10 P=0.0000012\n----\n----\nq=0.3\nz=0 P=1.0000000\nz=5 P=0.1773523\nz=10 P=0.0416605\nz=15 P=0.0101008\nz=20 P=0.0024804\nz=25 P=0.0006132\nz=30 P=0.0001522\nz=35 P=0.0000379\nz=40 P=0.0000095\nz=45 P=0.0000024\nz=50 P=0.0000006\n----\nSolving for P less than 0.1%...\n----\nP < 0.001\nq=0.10 z=5\nq=0.15 z=8\nq=0.20 z=11\nq=0.25 z=15\nq=0.30 z=24\nq=0.35 z=41\nq=0.40 z=89\nq=0.45 z=340\n----\n\n==== Conclusion\nWe (((\"calculations\", \"in Bitcoin whitepaper\", secondary-sortas=\"Bitcoin whitepaper\", startref=\"calculate-whitepaper\")))have proposed a system for electronic transactions without relying on trust. We started with the usual framework of coins made from digital signatures, which provides strong control of ownership, but is incomplete without a way to prevent double-spending. To solve this, we proposed a peer-to-peer network using proof-of-work to record a public history of transactions that quickly becomes computationally impractical for an attacker to change if honest nodes control a majority of CPU power. The network is robust in its unstructured simplicity. Nodes work all at once with little coordination. They do not need to be identified, since messages are not routed to any particular place and only need to be delivered on a best effort basis. Nodes can leave and rejoin the network at will, accepting the proof-of-work chain as proof of what happened while they were gone. They vote with their CPU power, expressing their acceptance of valid blocks by working on extending them and rejecting invalid blocks by refusing to work on them. Any needed rules and incentives can be enforced with this consensus mechanism.\n\n==== References\n++++\n<p>\n<span id=\"ref_one\">[1]</span> W. Dai, \"b-money,\" <a href=\"http://www.weidai.com/bmoney.txt\"><em>http://www.weidai.com/bmoney.txt</em></a>, 1998.\n</p>\n<p>\n<span id=\"ref_two\">[2]</span> H. Massias, X.S. Avila, and J.-J. Quisquater, \"Design of a secure timestamping service with minimal trust requirements,\" In 20th Symposium on Information Theory in the Benelux, May 1999.\n</p>\n<p>\n<span id=\"ref_three\">[3]</span> S. Haber, W.S. Stornetta, \"How to time-stamp a digital document,\" In Journal of Cryptology, vol 3, no 2, pages 99-111, 1991.\n</p>\n\n<p>\n<span id=\"ref_four\">[4]</span> D. Bayer, S. Haber, W.S. Stornetta, \"Improving the efficiency and reliability of digital time-stamping,\" In Sequences II: Methods in Communication, Security and Computer Science, pages 329-334, 1993.\n</p>\n\n<p>\n<span id=\"ref_five\">[5]</span> S. Haber, W.S. Stornetta, \"Secure names for bit-strings,\" In Proceedings of the 4th ACM Conference on Computer and Communications Security, pages 28-35, April 1997.\n</p>\n\n<p>\n<span id=\"ref_six\">[6]</span> A. Back, \"Hashcash - a denial of service counter-measure,\" <a href=\"http://www.hashcash.org/papers/hashcash.pdf\"><em>http://www.hashcash.org/papers/hashcash.pdf</em></a>, 2002.\n</p>\n\n<p>\n<span id=\"ref_seven\">[7]</span> R.C. Merkle, \"Protocols for public key cryptosystems,\" In Proc. 1980 Symposium on Security and Privacy, IEEE Computer Society, pages 122-133, April 1980.\n</p>\n\n<p>\n<span id=\"ref_eight\">[8]</span> W. Feller, \"An introduction to probability theory and its applications,\" 1957.\n</p>\n++++\n\n=== License\n\nThis whitepaper was published in October 2008 by Satoshi Nakamoto. It was later (2009) added as supporting documentation to the bitcoin software and carries the same MIT license. It has been reproduced in this book, without modification other than formatting, under the terms of the MIT license:\n\nThe MIT License (MIT)\nCopyright (c) 2008 Satoshi Nakamoto\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS,\" WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN(((\"Bitcoin whitepaper\", \"original version\", startref=\"bitcoin-whitepaper-original\")))(((\"whitepaper (Bitcoin)\", \"original version\", startref=\"whitepaper-original\"))) THE SOFTWARE.\n"
        },
        {
          "name": "appb_errata.adoc",
          "type": "blob",
          "size": 11.310546875,
          "content": "[appendix]\n== Errata to the Bitcoin Whitepaper\n\nThis (((\"Bitcoin whitepaper\", \"errata\", id=\"bitcoin-whitepaper-errata\")))(((\"whitepaper (Bitcoin)\", \"errata\", id=\"whitepaper-errata\")))appendix contains a description of known problems in Satoshi Nakamoto’s paper, \"Bitcoin:\nA Peer-to-Peer Electronic Cash System,\" as well as notes on terminology\nchanges and how Bitcoin's implementation differs from that described in\nthe paper.\n\nThis document was originally published by a coauthor of this book in\n2016; it is reproduced here with updates.  The names of\nsections in this errata correspond to the names of the\nsections in Nakamoto's original paper.\n\n=== Abstract\n\n____\n\"The longest chain not only serves as proof of the sequence of events\nwitnessed, but proof that it came from the largest pool of CPU power.\"\n____\n\n* *Implementation detail:* If each link in the chain (called \"blocks\"\nin Bitcoin) was built using the same amount of _proof of work_ (PoW), the\nlongest chain would be the one backed by the largest pool of\ncomputational power. However, Bitcoin was implemented in such a way that\nthe amount of PoW can vary between blocks, so it became important not to\ncheck for the \"the longest chain\" but rather \"the chain demonstrating\nthe most PoW\"; this is often shortened to \"most-work chain.\"\n+\nThe\nhttps://oreil.ly/XYZzx[change]\nfrom checking for the longest chain to checking for the most-work chain\noccurred in July 2010, long after Bitcoin’s initial release:\n+\n[source,diff]\n----\n-    if (pindexNew->nHeight > nBestHeight)\n+    if (pindexNew->bnChainWork > bnBestChainWork)\n----\n\n[role=\"less_space pagebreak-before\"]\n* *Terminology change:* General CPUs were used to generate the PoW for\nthe earliest Bitcoin blocks, but PoW generation today is mostly performed\nby specialist Application Specific Integrated Circuits (ASICs), so\ninstead of saying \"CPU power\" it is perhaps more correct to say\n\"computational power\" or, simply, \"hash rate\" for the hashing used\nin generating the PoW.\n\n____\n\"As long as a majority of CPU power is controlled by nodes that are not\ncooperating to attack the network, they’ll generate the longest chain\nand outpace attackers.\"\n____\n\n* *Terminology change:* The term \"nodes\" today is used to refer to\nfull validation nodes, which are programs that enforce all the rules of\nthe system. Programs (and hardware) that extend the chain today are\ncalled \"miners\" based on Nakamoto’s analogy to gold miners in section\n6 of the paper. Nakamoto expected all miners to be nodes but the\nsoftware he released did not require all nodes to be miners. In the\noriginal software, a simple menu item in the node GUI allowed toggling\nthe mining function on or off.\n+\nToday it is the case that the overwhelming number of nodes are not\nminers and that many individuals who own mining hardware do not use it\nwith their own nodes (and even those that do mine with their own nodes\noften mine for short periods of time on top of newly discovered blocks\nwithout ensuring their node considers the new block valid). The early\nparts of the paper where \"nodes\" is mostly used without modification\nrefer to mining using a full validation node; the later parts of the\npaper which refer to \"network nodes\" is mainly about what nodes can do\neven if they aren’t mining.\n* *Post-publication discovery:* When a new block is produced, the miner\nwho produces that block can begin working on its sequel immediately but\nall other miners are unaware of the new block and cannot begin working\non it until it has propagated across the\nnetwork to them. This gives miners who produce many blocks an edge over\nminers who produce fewer blocks, and this can be exploited in what’s\nknown as the _selfish mining attack_ to allow an attacker with around\n30% of total network hash rate to make other miners less profitable,\nperhaps driving them into following the attacking miner’s policy. So\ninstead of saying \"a majority of CPU power is controlled by nodes that\nare not cooperating to attack the network,\" it is perhaps more correct\nto say \"as long as nodes cooperating to attack the network control less\nthan about 30% of the network.\"\n\n=== Transactions\n\n____\n\"We define(((\"transactions\", \"errata in Bitcoin whitepaper\", id=\"transaction-errata\"))) an electronic coin as a chain of digital signatures. Each\nowner transfers the coin to the next by digitally signing a hash of the\nprevious transaction and the public key of the next owner and adding\nthese to the end of the coin.\"\n____\n\n* *Implementation detail:* Bitcoin implements a more general version of\nthis system where digital signatures are not used directly but rather a\n\"deterministic expression\" is used instead. Just as a signature that\nmatches a known public key can be used to enable a payment, the data\nthat satisfies a known expression can also enable a payment.\nGenerically, the expression that must be satisfied in Bitcoin in order\nto spend a coin is known as an \"encumbrance.\" Almost all encumbrances\nin Bitcoin to date require providing at least one signature. So instead\nof saying \"a chain of digital signatures,\" it is more correct to say\n\"a chain of encumbrances.\" Given that transactions often have more\nthan one input and more than one output, the structure is not very\nchain-like; it’s more accurately described as a directed acyclic (((\"transactions\", \"errata in Bitcoin whitepaper\", startref=\"transaction-errata\")))graph\n(DAG).\n\n=== Proof of Work\n\n____\n\"...we(((\"proof-of-work algorithm\", \"errata in Bitcoin whitepaper\", id=\"proof-errata\"))) implement the proof-of-work by incrementing a nonce in the block\nuntil a value is found that gives the block’s hash the required zero\nbits.\"\n____\n\n* *Implementation detail:* Adam Back’s Hashcash implementation requires\nfinding a hash with the required number of leading zero bits. Bitcoin\ntreats the hash as an integer and requires that it be less than a\nspecified integer, which effectively allows a fractional number of bits\nto be specified.\n\n____\n\"Proof-of-work is essentially one-CPU-one-vote.\"\n____\n\n* *Important note:* The vote here is not on the rules of the system but\nmerely on the ordering of the transactions in order to provide\nassurances that an \"electronic coin\" cannot be easily double spent.\nThis is described in more detail in section 11 of the paper where it\nsays, \"We consider the scenario of an attacker trying to generate an\nalternate chain faster than the honest chain. Even if this is\naccomplished, it does not throw the system open to arbitrary changes,\nsuch as creating value out of thin air or taking money that never\nbelonged to the attacker. Nodes are not going to accept an invalid\ntransaction as payment, and honest nodes will never accept a block\ncontaining them.\"\n\n____\n\"...proof-of-work difficulty is determined by a moving average targeting an\naverage number of blocks per hour.\"\n____\n\n* *Implementation detail:* A moving average is not used. Instead, every\n2,016th block has its reported generation time compared to the\ngeneration time for an earlier block, and the difference between them is\nused to calculate the average used for adjustment.\n+\nFurther, the average implemented in Bitcoin targets an average number of\nblocks per two weeks (not per hour as might be implied by the text).\nOther implemented rules may further slow adjustments, such as a rule\nthat the adjustment cannot increase block production speed by more than\n300% per period, nor slow it by more (((\"proof-of-work algorithm\", \"errata in Bitcoin whitepaper\", startref=\"proof-errata\")))than 75%.\n\n=== Reclaiming Disk Space\n\n____\n\"Once the (((\"disk space, reclaiming\")))(((\"reclaiming disk space\")))(((\"blocks\", \"reclaiming disk space\")))latest transaction in a coin is buried under enough blocks, the\nspent transactions before it can be discarded to save disk space.\"\n____\n\n* *Possible post-publication discovery:* Although the merkle tree\nstructure described in this section can prove a transaction was included\nin a particular block, there is currently no way in Bitcoin to prove\nthat a transaction has not been spent except to process all subsequent\ndata in the blockchain. This means the method described here cannot be\nuniversally used for reclaiming disk space among all nodes, as all new\nnodes will need to process all transactions.\n\n=== Simplified Payment Verification\n\n____\n\"One strategy(((\"payment verification\", \"errata in Bitcoin whitepaper\")))(((\"verifying\", \"payment\", \"errata in Bitcoin whitepaper\"))) to protect against this would be to accept alerts from\nnetwork nodes when they detect an invalid block, prompting the user’s\nsoftware to download the full block and alerted transactions to confirm\nthe inconsistency.\"\n____\n\n* *Important Note:* Although software has been produced that implements\nsome parts of this section and calls that Simplified Payment\nVerification (SPV), none of these programs currently accepts alerts from\nnetwork nodes (full validation nodes) when invalid blocks have been\ndetected. This has placed bitcoins in so-called SPV wallets at risk in\nthe past.\n\n=== Privacy\n\n____\n\"Some linking(((\"privacy\", \"errata in Bitcoin whitepaper\"))) is still unavoidable with multi-input transactions, which\nnecessarily reveal that their inputs were owned by the same owner.\"\n____\n\n* *Post-publication invention:* It isn't clear that different inputs\nin the same transaction have the same owner if owners often mix their\ninputs with\ninputs belonging to other owners. For example, there’s no public\ndifference between Alice and Bob each contributing one of their inputs\ntoward paying Charlie and Dan than there is between just Alice\ncontributing two of her inputs toward paying Charlie and Dan.\n+\nThis technique is known today as\nhttps://oreil.ly/UBEJX[CoinJoin], and software implementing\nit has been in use since 2015.\n\n=== Calculations\n\n____\n\"The receiver (((\"calculations\", \"errata in Bitcoin whitepaper\")))generates a new key pair and gives the public key to the\nsender shortly before signing. This prevents the sender from preparing a\nchain of blocks ahead of time by working on it continuously until he is\nlucky enough to get far enough ahead, then executing the transaction at\nthat moment.\"\n____\n\n* *Post-publication discovery:* Nothing about the receiver generating a\npublic key shortly before the spender signs a transaction prevents the\nspender from preparing a chain of blocks ahead of time. Early Bitcoin\nuser Hal Finney discovered this attack and\nhttps://oreil.ly/kg_Xe[described\nit]: \"Suppose the attacker is generating blocks occasionally. In each\nblock he generates, he includes a transfer from address A to address B,\nboth of which he controls.\n+\n\"To cheat you, when he generates a block, he doesn’t broadcast it.\nInstead, he runs down to your store and makes a payment to your address\nC with his address A. You wait a few seconds, don’t hear anything, and\ntransfer the goods. He broadcasts his block now, and his transaction\nwill take precedence over yours.\"\n+\nThe attack works for any number of confirmations, and is sometimes named\nthe Finney Attack.\n\n'''''\n\n*Disclaimer:* The author of this document was not the first person to\nidentify any of the problems described here—he has merely collected them\ninto a single document.\n\n*License:* This errata document is released under the\nhttps://oreil.ly/xZeBR[CC0] 1.0 Universal\nPublic Domain Dedication\n\nFor updates made (((\"Bitcoin whitepaper\", \"errata\", startref=\"bitcoin-whitepaper-errata\")))(((\"whitepaper (Bitcoin)\", \"errata\", startref=\"whitepaper-errata\")))after the publication of this book, please see the\nhttps://oreil.ly/ygExa[Original\ndocument].\n"
        },
        {
          "name": "appc_bips.adoc",
          "type": "blob",
          "size": 9.3291015625,
          "content": "[[appdxbitcoinimpproposals]]\n[appendix]\n== Bitcoin Improvement Proposals\n\nBitcoin Improvement Proposals are design documents providing information to the Bitcoin community or describing a new feature for Bitcoin or its processes or environment.\n\nAs per BIP1 _BIP Purpose and Guidelines_, there are three(((\"BIPs (Bitcoin Improvement Proposals)\", \"types of\"))) kinds of BIPs:\n\n_Standard_ BIP:: Describes any change that affects most or all Bitcoin implementations, such as a change to the network protocol, a change in block or transaction validity rules, or any change or addition that affects the interoperability of applications using Bitcoin.\n_Informational_ BIP:: Describes a Bitcoin design issue or provides general guidelines or information to the Bitcoin community, but does not propose a new feature. Informational BIPs do not necessarily represent a Bitcoin community consensus or recommendation, so users and implementors may ignore informational BIPs or follow their advice.\n_Process_ BIP:: Describes a Bitcoin process or proposes a change to (or an event in) a process. Process BIPs are like standard BIPs but apply to areas other than the Bitcoin protocol itself. They might propose an implementation but not to Bitcoin's codebase; they often require community consensus. Unlike informational BIPs, they are more than recommendations, and users are typically not free to ignore them. Examples include procedures, guidelines, changes to the decision-making process, and changes to the tools or environment used in Bitcoin development. Any meta-BIP is also considered a process BIP.\n\nBIPs are recorded in a https://oreil.ly/jjO0R[versioned repository on GitHub].\nAn MIT-licensed document from the open source Bitcoin Core project,\nreproduced here in edited form, describes which BIPs it implements, including listing\nthe Pull Request (PR) and version of Bitcoin Core where support for each BIP was added or\nsignificantly changed.\n\nBIPs that are (((\"BIPs (Bitcoin Improvement Proposals)\", \"implemented by Bitcoin Core\", id=\"bips-implement\")))(((\"Bitcoin Core\", \"BIPs implemented by\", id=\"bitcoin-core-bips\")))implemented by Bitcoin Core:\n\n-    BIP9: The changes allowing multiple soft forks to be deployed in parallel have been implemented since v0.12.1 (PR #7575).\n-    BIP11: Multisig outputs are standard since v0.6.0 (PR #669).\n-    BIP13: The address format for P2SH addresses has been implemented since v0.6.0 (PR #669).\n-    BIP14: The subversion string is being used as User Agent since v0.6.0 (PR #669).\n-    BIP16: The pay-to-script-hash evaluation rules have been implemented since v0.6.0, and took effect on April 1st 2012 (PR #748).\n-    BIP21: The URI format for Bitcoin payments has been implemented since v0.6.0 (PR #176).\n-    BIP22: The 'getblocktemplate' (GBT) RPC protocol for mining has been implemented since v0.7.0 (PR #936).\n-    BIP23: Some extensions to GBT have been implemented since v0.10.0rc1, including longpolling and block proposals (PR #1816).\n-    BIP30: The evaluation rules to forbid creating new transactions with the same txid as previous not-fully-spent transactions were implemented since v0.6.0, and the rule took effect on March 15th 2012 (PR #915).\n-    BIP31: The 'pong' protocol message (and the protocol version bump to 60001) has been implemented since v0.6.1 (PR #1081).\n-    BIP32: Hierarchical Deterministic Wallets has been implemented since v0.13.0 (PR #8035).\n-    BIP34: The rule that requires blocks to contain their height (number) in the coinbase input, and the introduction of version 2 blocks has been implemented since v0.7.0. The rule took effect for version 2 blocks as of block 224413 (March 5th 2013), and version 1 blocks are no longer allowed since block 227931 (March 25th 2013) (PR #1526).\n-    BIP35: The 'mempool' protocol message (and the protocol version bump to 60002) has been implemented since v0.7.0 (PR #1641). As of v0.13.0, this is only available for +NODE_BLOOM+ (BIP111) peers.\n\n[role=\"less_space pagebreak-before\"]\n-    BIP37: The bloom filtering for transaction relaying, partial Merkle trees for blocks, and the protocol version bump to 70001 (enabling low-bandwidth lightweight clients) has been implemented since v0.8.0 (PR #1795). Disabled by default since v0.19.0, can be enabled by the +-peerbloomfilters+ option.\n-    BIP42: The bug that would have caused the subsidy schedule to resume after block 13440000 was fixed in v0.9.2 (PR #3842).\n-    BIP43: The experimental descriptor wallets introduced in v0.21.0 by default use the Hierarchical Deterministic Wallet derivation proposed by BIP43 (PR #16528).\n-    BIP44: The experimental descriptor wallets introduced in v0.21.0 by default use the Hierarchical Deterministic Wallet derivation proposed by BIP44 (PR #16528).\n-    BIP49: The experimental descriptor wallets introduced in v0.21.0 by default use the Hierarchical Deterministic Wallet derivation proposed by BIP49 (PR #16528).\n-    BIP61: The 'reject' protocol message (and the protocol version bump to 70002) was added in v0.9.0 (PR #3185). Starting v0.17.0, whether to send reject messages can be configured with the ++-enablebip61++ option, and support is deprecated (disabled by default) as of v0.18.0. Support was removed in v0.20.0 (PR #15437).\n-    BIP65: The ++CHECKLOCKTIMEVERIFY++ soft fork was merged in v0.12.0 (PR #6351), and backported to v0.11.2 and v0.10.4. Mempool-only +CLTV+ was added in PR #6124.\n-    BIP66: The strict DER rules and associated version 3 blocks have been implemented since v0.10.0 (PR #5713).\n-    BIP68: Sequence locks have been implemented as of v0.12.1 (PR #7184), and have been buried since v0.19.0 (PR #16060).\n-    BIP70 71 72: Payment Protocol support has been available in Bitcoin Core GUI since v0.9.0 (PR #5216). Support can be optionally disabled at build time since v0.18.0 (PR 14451), and it is disabled by default at build time since v0.19.0 (PR #15584). It has been removed as of v0.20.0 (PR 17165).\n-    BIP84: The experimental descriptor wallets introduced in v0.21.0 by default use the Hierarchical Deterministic Wallet derivation proposed by BIP84. (PR #16528)\n-    BIP86: Descriptor wallets by default use the Hierarchical Deterministic Wallet derivation proposed by BIP86 since v23.0 (PR #22364).\n-    BIP90: Trigger mechanism for activation of BIPs 34, 65, and 66 has been simplified to block height checks since v0.14.0 (PR #8391).\n-    BIP111: +NODE_BLOOM+ service bit added and enforced for all peer versions as of v0.13.0 (PR #6579 and PR #6641).\n-    BIP112: The +CHECKSEQUENCEVERIFY+ opcode has been implemented since v0.12.1 (PR #7524), and has been buried since v0.19.0 (PR #16060).\n-    BIP113: Median time past lock-time calculations have been implemented since v0.12.1 (PR #6566), and has been buried since v0.19.0 (PR #16060).\n-    BIP125: Opt-in full replace-by-fee signaling partially implemented. \n-    BIP130: direct headers announcement is negotiated with peer versions ≥70012 as of v0.12.0 (PR 6494).\n-    BIP133: feefilter messages are respected and sent for peer versions ≥70013 as of v0.13.0 (PR 7542).\n-    BIP141: Segregated Witness (Consensus Layer) as of v0.13.0 (PR 8149), defined for mainnet as of v0.13.1 (PR 8937), and buried since v0.19.0 (PR #16060).\n-    BIP143: Transaction Signature Verification for Version 0 Witness Program as of v0.13.0 (PR 8149), defined for mainnet as of v0.13.1 (PR 8937), and buried since v0.19.0 (PR #16060).\n-    BIP144: Segregated Witness as of 0.13.0 (PR 8149).\n-    BIP145: getblocktemplate updates for Segregated Witness as of v0.13.0 (PR 8149).\n-    BIP147: +NULLDUMMY+ soft fork as of v0.13.1 (PR 8636 and PR 8937), buried since v0.19.0 (PR #16060).\n-    BIP152: Compact block transfer and related optimizations are used as of v0.13.0 (PR 8068).\n-    BIP155: The 'addrv2' and 'sendaddrv2' messages which enable relay of Tor V3 addresses (and other networks) are supported as of v0.21.0 (PR 19954).\n-    BIP157 158: Compact Block Filters for Light Clients can be indexed as of v0.19.0 (PR #14121) and served to peers on the P2P network as of v0.21.0 (PR #16442).\n-    BIP159: The +NODE_NETWORK_LIMITED+ service bit is signalled as of v0.16.0 (PR 11740), and such nodes are connected to as of v0.17.0 (PR 10387).\n-    BIP173: Bech32 addresses for native Segregated Witness outputs are supported as of v0.16.0 (PR 11167). Bech32 addresses are generated by default as of v0.20.0 (PR 16884).\n-    BIP174: RPCs to operate on Partially Signed Bitcoin Transactions (PSBT) are present as of v0.17.0 (PR 13557).\n-    BIP176: Bits Denomination [QT only] is supported as of v0.16.0 (PR 12035).\n-    BIP325: Signet test network is supported as of v0.21.0 (PR 18267).\n-    BIP339: Relay of transactions by wtxid is supported as of v0.21.0 (PR 18044).\n-    BIP340 341 342: Validation rules for Taproot (including Schnorr signatures and Tapscript leaves) are implemented as of v0.21.0 (PR 19953), with mainnet activation as of v0.21.1 (PR 21377, PR 21686).\n-    BIP350: Addresses for native v1+ segregated Witness outputs use bech32m instead of bech32 as of v22.0 (PR 20861).\n-    BIP371: Taproot fields for PSBT as of v24.0 (PR 22558).\n-    BIP380 381 382 383 384 385: Output Script Descriptors, and most of Script Expressions are implemented as of v0.17.0 (PR 13697).\n-    BIP386: +tr()+ Output Script Descriptors are implemented as(((\"BIPs (Bitcoin Improvement Proposals)\", \"implemented by Bitcoin Core\", startref=\"bips-implement\")))(((\"Bitcoin Core\", \"BIPs implemented by\", startref=\"bitcoin-core-bips\"))) of v22.0 (PR 22051).\n"
        },
        {
          "name": "atlas.json",
          "type": "blob",
          "size": 1.669921875,
          "content": "{\n  \"branch\": \"master\",\n  \"files\": [\n    \"cover.html\",\n    \"praise.html\",\n    \"titlepage.html\",\n    \"copyright.html\",\n    \"dedication.html\",\n    \"toc.html\",\n    \"preface.asciidoc\",\n    \"ch01_intro.adoc\",\n    \"ch02_overview.adoc\",\n    \"ch03_bitcoin-core.adoc\",\n    \"ch04_keys.adoc\",\n    \"ch05_wallets.adoc\",\n    \"ch06_transactions.adoc\",\n    \"ch07_authorization-authentication.adoc\",\n    \"ch08_signatures.adoc\",\n    \"ch09_fees.adoc\",\n    \"ch10_network.adoc\",\n    \"ch11_blockchain.adoc\",\n    \"ch12_mining.adoc\",\n    \"ch13_security.adoc\",\n    \"ch14_applications.adoc\",\n    \"appa_whitepaper.adoc\",\n    \"appb_errata.adoc\",\n    \"appc_bips.adoc\",\n    \"ix.html\",\n    \"author_bio.html\",\n    \"colo.html\"\n  ],\n  \"formats\": {\n    \"pdf\": {\n      \"version\": \"print\",\n      \"toc\": true,\n      \"index\": true,\n      \"antennahouse_version\": \"AHFormatterV71_64-MR2\",\n      \"syntaxhighlighting\": true,\n      \"show_comments\": false,\n      \"color_count\": \"1\",\n      \"trim_size\": \"7inx9.1875in\"\n    },\n    \"epub\": {\n      \"index\": true,\n      \"toc\": true,\n      \"epubcheck\": true,\n      \"syntaxhighlighting\": true,\n      \"show_comments\": false,\n      \"downsample_images\": true,\n      \"mathmlreplacement\": false\n    },\n    \"mobi\": {\n      \"index\": true,\n      \"toc\": true,\n      \"syntaxhighlighting\": true,\n      \"show_comments\": false,\n      \"downsample_images\": false\n    },\n    \"html\": {\n      \"index\": true,\n      \"toc\": true,\n      \"consolidated\": false,\n      \"syntaxhighlighting\": true,\n      \"show_comments\": false\n    }\n  },\n  \"theme\": \"oreillymedia/animal_theme_sass\",\n  \"title\": \"Mastering Bitcoin\",\n  \"print_isbn13\": \"9781098150099\",\n  \"templating\": false,\n  \"lang\": \"en\",\n  \"accent_color\": \"\",\n  \"preprocessing\": \"none\"\n}"
        },
        {
          "name": "author_bio.html",
          "type": "blob",
          "size": 2.8134765625,
          "content": "<section class=\"abouttheauthor\" data-type=\"colophon\" xmlns=\"http://www.w3.org/1999/xhtml\">\n<h1>About the Authors</h1>\n\n<p><strong>Andreas M. Antonopoulos</strong> is a noted technologist and serial entrepreneur who has become one of the most well-known and well-respected figures in Bitcoin. As an engaging public speaker, teacher, and writer, Andreas makes complex subjects accessible and easy to understand. As an advisor, he helps startups recognize, evaluate, and navigate security and business risks.</p>\n\n<p>Andreas grew up with the internet, starting his first company, an early BBS and proto-ISP, as a teenager in his home in Greece. He earned degrees in computer science, data communications, and distributed systems from University College London (UCL)—recently ranked among the world’s top 10 universities. After moving to the United States, Andreas cofounded and managed a successful technology research company, and in that role advised dozens of Fortune 500 company executives on networking, security, data centers, and cloud computing. More than two hundred of his articles on security, cloud computing, and data centers have been published in print and syndicated worldwide. He holds two patents in networking and security.</p>\n\n<p>In 1990, Andreas started teaching various IT topics in private, professional, and academic environments. He honed his speaking skills in front of audiences ranging in size from five executives in a boardroom to thousands of people in large conferences. With more than four hundred speaking engagements under his belt, he is considered a world-class and charismatic public speaker and teacher. In 2014, he was appointed as a teaching fellow with the University of Nicosia, the first university in the world to offer a master's degree in digital currency. In this role, he helped develop the curriculum and cotaught the \"Introduction to Digital Currencies\" course, offered as a massive open online course (MOOC) through the university.</p>\n\n<p>As a Bitcoin entrepreneur, Andreas has founded a number of Bitcoin businesses and launched several community open source projects. He serves as an advisor to several Bitcoin and cryptocurrency companies. He is a widely published author of articles and blog posts on Bitcoin, a permanent host on the popular <em>Let’s Talk Bitcoin</em> podcast, and a frequent speaker at technology and security conferences worldwide.</p>\n\n<p><strong>David A. Harding</strong> is a technical writer focused on creating documentation for open source software. He is the coauthor of the <em>Bitcoin Optech</em> weekly newsletter <span class='keep-together'>(2018–2023),</span> <em>21.co Bitcoin Computer</em> tutorials (2015–2017), and Bitcoin.org developer documentation (2014–2015). He is also a Brink.dev grant committee member (2022–2023) and former board member (2020–2022).</p>\n</section>\n"
        },
        {
          "name": "book.adoc",
          "type": "blob",
          "size": 0.6884765625,
          "content": "= Mastering Bitcoin: Programming the Open Blockchain (3rd Edition)\n\nBy Andreas M. Antonopoulos and David A. Harding. \n\ninclude::preface.adoc[]\n\ninclude::ch01_intro.adoc[]\n\ninclude::ch02_overview.adoc[]\n\ninclude::ch03_bitcoin-core.adoc[]\n\ninclude::ch04_keys.adoc[]\n\ninclude::ch05_wallets.adoc[]\n\ninclude::ch06_transactions.adoc[]\n\ninclude::ch07_authorization-authentication.adoc[]\n\ninclude::ch08_signatures.adoc[]\n\ninclude::ch09_fees.adoc[]\n\ninclude::ch10_network.adoc[]\n\ninclude::ch11_blockchain.adoc[]\n\ninclude::ch12_mining.adoc[]\n\ninclude::ch13_security.adoc[]\n\ninclude::ch14_applications.adoc[]\n\ninclude::appa_whitepaper.adoc[]\n\ninclude::appb_errata.adoc[]\n\ninclude::appc_bips.adoc[]\n\n[index]\n== Index\n"
        },
        {
          "name": "ch01_intro.adoc",
          "type": "blob",
          "size": 34.2802734375,
          "content": "[role=\"pagenumrestart\"]\n[[ch01_intro_what_is_bitcoin]]\n== Introduction\n\nBitcoin(((\"Bitcoin\", \"operational overview\", id=\"bitcoin-operational-overview\"))) is a collection of concepts and technologies that form the basis of a digital money ecosystem. Units of currency called bitcoin are used to store and transmit value among participants in the Bitcoin network. Bitcoin users communicate with each other using the Bitcoin protocol primarily via the internet, although other transport networks can also be used. The Bitcoin protocol stack, available as open source software, can be run on a wide range of computing devices, including laptops and smartphones, making the technology easily accessible.\n\n[TIP]\n====\nIn this book, the (((\"bitcoins\", \"defined\")))unit of currency is called \"bitcoin\" with a small _b_,\nand the system is called \"Bitcoin,\" with a capital _B_.\n====\n\nUsers can transfer bitcoin over the network to do just about anything\nthat can be done with conventional currencies, including buying and selling\ngoods, sending money to people or organizations, or extending credit. Bitcoin\ncan be purchased, sold, and exchanged for other currencies at\nspecialized currency exchanges. Bitcoin is arguably the perfect form\nof money for the internet because it is fast, secure, and borderless.\n\nUnlike traditional currencies, the bitcoin currency is entirely virtual. There are no\nphysical coins or even individual digital coins. The coins are implied in\ntransactions that transfer value from spender to receiver. Users of\nBitcoin control keys that allow them to prove ownership of bitcoin in the\nBitcoin network. With these keys, they can sign transactions to unlock\nthe value and spend it by transferring it to a new owner. Keys are often\nstored in a digital wallet on each user’s computer or smartphone.\nPossession of the key that can sign a transaction is the only\nprerequisite to spending bitcoin, putting the control entirely in the\nhands of each user.\n\nBitcoin is a distributed, peer-to-peer system. As such, there is no\ncentral server or point of control. Units of bitcoin\nare created through a process(((\"bitcoins\", \"mining\")))(((\"mining\"))) called \"mining,\" which involves repeatedly\nperforming a computational task that references a list of recent Bitcoin\ntransactions. Any participant in the Bitcoin network may operate as a\nminer, using their computing devices to help secure\ntransactions. Every 10 minutes, on average, one Bitcoin miner can add security to\npast transactions and is rewarded with both brand new\nbitcoins and the fees paid by recent transactions. Essentially, Bitcoin\nmining decentralizes the currency-issuance\nand clearing functions of a central bank and replaces the need for any\ncentral bank.\n\n//-- Math for following paragraph --\n//total_btc = 0\n//for i in range(0, 10_000_000):\n//  total_btc += (50 /  (2**int(i/210000)) )\n//  if total_btc / 21e6 > 0.99:\n//     print(i)\n//     break\n\nThe Bitcoin protocol includes built-in algorithms that regulate the\nmining function across the network. The difficulty of the computational\ntask that miners must perform is adjusted dynamically so that, on\naverage, someone succeeds every 10 minutes regardless of how many miners\n(and how much processing) are competing at any moment. The protocol also\nperiodically decreases the number of new bitcoins that are created,\nlimiting the total number of bitcoins that will ever be created to a fixed total\njust below 21 million coins. The result is that the number of bitcoins in\ncirculation closely follows an easily predictable curve where half of\nthe remaining coins are added to circulation every four years.  At\napproximately block 1,411,200, which is expected to be produced around\nthe year 2035, 99% of all bitcoins\nthat will ever exist will have been issued.  Due to Bitcoin's\ndiminishing rate of issuance, over the long term, the Bitcoin currency\nis deflationary.  Furthermore, nobody can force you to accept\nany bitcoins that were created beyond the\nexpected issuance rate.\n\nBehind the scenes, Bitcoin is also the name of the protocol, a peer-to-peer network, and a distributed computing innovation. Bitcoin builds on decades of research in cryptography and distributed systems and includes at least four key innovations brought together in a unique and powerful combination. Bitcoin consists of:\n\n* A decentralized peer-to-peer network (the Bitcoin protocol)\n* A public transaction journal (the blockchain)\n* A set of rules for independent transaction validation and currency issuance (consensus rules)\n* A mechanism for reaching global decentralized consensus on the valid blockchain (proof-of-work algorithm)\n\nAs a developer, I see Bitcoin as akin to the internet of money, a network for propagating value and securing the ownership of digital assets via distributed computation. There's a lot more to Bitcoin than first meets (((\"Bitcoin\", \"operational overview\", startref=\"bitcoin-operational-overview\")))the eye.\n\nIn this chapter we'll get started by explaining some of the main concepts and terms, getting the necessary software, and using Bitcoin for simple transactions. In the following chapters, we'll start unwrapping the layers of technology that make Bitcoin possible and examine the inner workings of the Bitcoin network and protocol.\n\n.Digital Currencies Before Bitcoin\n****\n\nThe (((\"digital currencies, history of\")))(((\"history\", \"of digital currencies\", secondary-sortas=\"digital currencies\")))(((\"cryptography\")))emergence of viable digital money is closely linked to developments in cryptography. This is not surprising when one considers the fundamental challenges involved with using bits to represent value that can be exchanged for goods and services. Three basic questions for anyone accepting digital money are:\n\n*     Can I trust that the money is authentic and not counterfeit?\n*     Can I trust that the digital money can only be spent once (known as the “double-spend” problem)?\n*     Can I be sure that no one else can claim this money belongs to them and not me?\n\nIssuers of paper money are constantly battling the counterfeiting problem by using increasingly sophisticated papers and printing technology.  Physical money addresses the double-spend issue easily because the same paper note cannot be in two places at once. Of course, conventional money is also often stored and transmitted digitally. In these cases, the counterfeiting and double-spend issues are handled by clearing all electronic transactions through central authorities that have a global view of the currency in circulation. For digital money, which cannot take advantage of esoteric inks or holographic strips, cryptography provides the basis for trusting the legitimacy of a user’s claim to value.  Specifically, cryptographic digital signatures enable a user to sign a digital asset or transaction proving the ownership of that asset. With the appropriate architecture, digital signatures also can be used to address the double-spend issue.\n\nWhen cryptography started becoming more broadly available and understood in the late 1980s, many researchers began trying to use cryptography to build digital currencies. These early digital currency projects issued digital money, usually backed by a national currency or precious metal such as gold.\n\nAlthough these earlier digital currencies worked, they were centralized and, as a result, were easy to attack by governments and hackers. Early digital currencies used a central clearinghouse to settle all transactions at regular intervals, just like a traditional banking system. Unfortunately, in most cases these nascent digital currencies were targeted by worried governments and eventually litigated out of existence. Some failed in spectacular crashes when the parent company liquidated abruptly. To be robust against intervention by antagonists, whether legitimate governments or criminal elements, a _decentralized_ digital currency was needed to avoid a single point of attack. Bitcoin is such a system, decentralized by design, and free of any central authority or point of control that can be attacked or corrupted.\n\n****\n\n=== History of Bitcoin\n\nBitcoin was(((\"Bitcoin\", \"history of\")))(((\"history\", \"of Bitcoin\", secondary-sortas=\"Bitcoin\")))(((\"Nakamoto, Satoshi\"))) first described in 2008 with the publication of a\npaper titled \"Bitcoin: A Peer-to-Peer Electronic Cash\nSystem,\"footnote:[https://oreil.ly/KUaBM[\"Bitcoin: A Peer-to-Peer Electronic Cash System\"],\nSatoshi Nakamoto.] written under the\nalias of Satoshi Nakamoto (see <<satoshi_whitepaper>>). Nakamoto\ncombined several prior inventions such as digital signatures and Hashcash to create\na completely decentralized electronic cash system that does not rely on\na central authority for currency issuance or settlement and validation\nof transactions. A key innovation was to use a distributed computation\nsystem (called a \"proof-of-work\" algorithm) to conduct a global\nlottery every 10 minutes on average, allowing the decentralized network to\narrive at _consensus_ about the state of transactions. This\nelegantly solves the issue of double-spend where a single currency unit\ncan be spent twice. Previously, the double-spend problem was a weakness\nof digital currency and was addressed by clearing all transactions\nthrough a central clearinghouse.\n\nThe Bitcoin network started in 2009, based on a reference implementation\npublished by Nakamoto and since revised by many other programmers. The\nnumber and power of machines running the(((\"proof-of-work algorithm\", seealso=\"mining\"))) proof-of-work algorithm\n(mining) that provides security and resilience for Bitcoin have\nincreased exponentially, and their combined computational power now\nexceeds the combined number of computing operations of the\nworld's top supercomputers.\n\n\nSatoshi Nakamoto withdrew from the public in April 2011, leaving the responsibility of developing the code and network to a thriving group of volunteers. The identity of the person or people behind Bitcoin is still unknown. However, neither Satoshi Nakamoto nor anyone else exerts individual control over the Bitcoin system, which operates based on fully transparent mathematical principles, open source code, and consensus among participants. The invention itself is groundbreaking and has already spawned new science in the fields of distributed computing, economics, and econometrics.\n\n.A Solution to a Distributed Computing Problem\n****\nSatoshi Nakamoto's invention (((\"Byzantine Generals&#x27; Problem\")))(((\"distributed computing problem\")))is\nalso a practical and novel solution to a problem in distributed\ncomputing, known as the \"Byzantine Generals' Problem.\" Briefly, the\nproblem consists of trying to get multiple participants without a leader\nto agree on a course of action by exchanging information over an\nunreliable and potentially compromised network. Satoshi Nakamoto's solution, which uses the concept of\nproof of work to achieve consensus _without a central trusted\nauthority_, represents a breakthrough in distributed computing.\n****\n\n=== Getting Started\n\nBitcoin is(((\"Bitcoin\", \"wallets\", see=\"wallets\")))(((\"wallets\", \"explained\"))) a protocol that can be accessed using an\napplication that speaks the protocol. A \"Bitcoin wallet\" is the\nmost common user interface to the Bitcoin system, just like a web\nbrowser is the most common user interface for the HTTP protocol. There\nare many implementations and brands of Bitcoin wallets, just like there\nare many brands of web browsers (e.g., Chrome, Safari, and Firefox).\nAnd just like we all have our favorite browsers,\nBitcoin wallets vary in quality, performance, security, privacy, and\nreliability. There is also a reference implementation of the Bitcoin\nprotocol that includes a wallet, known as \"Bitcoin Core,\" which is\nderived from the original implementation written by Satoshi Nakamoto.\n\n==== Choosing a Bitcoin Wallet\n\nBitcoin wallets (((\"wallets\", \"choosing\")))(((\"selecting\", \"wallets\")))(((\"choosing\", see=\"selecting\")))are one of the most actively developed applications in the Bitcoin ecosystem. There is intense competition, and while a new wallet is probably being developed right now, several wallets from last year are no longer actively maintained. Many wallets focus on specific platforms or specific uses and some are more suitable for beginners while others are filled with features for advanced users. Choosing a wallet is highly subjective and depends on the use and user expertise. Therefore, it would be pointless to recommend a specific brand or wallet. However, we can categorize Bitcoin wallets according to their platform and function and provide some clarity about all the different types of wallets that exist. It is worth trying out several different wallets until you find one that fits your needs.\n\n===== Types of Bitcoin wallets\nBitcoin wallets (((\"wallets\", \"types of\", id=\"wallet-type\")))can be categorized as follows, according to the platform:\n\nDesktop wallet:: A (((\"desktop wallets\")))desktop wallet was the first type of Bitcoin wallet created as a reference implementation. Many users run desktop wallets for the features, autonomy, and control they offer. Running on general-use operating systems such as Windows and macOS has certain security disadvantages, however, as these platforms are often insecure and poorly configured.\n\nMobile wallet:: A (((\"mobile wallets\")))mobile wallet is the most common type of Bitcoin\nwallet. Running on smart-phone operating systems such as Apple iOS and\nAndroid, these wallets are often a great choice for new users. Many are\ndesigned for simplicity and ease-of-use, but there are also fully\nfeatured mobile wallets for power users.  To avoid downloading and\nstoring large amounts of data, most mobile wallets retrieve information\nfrom remote servers, reducing your privacy by disclosing to third\nparties information about your Bitcoin addresses and balances.\n\nWeb wallet:: Web wallets (((\"web wallets\")))are accessed through a web browser and store\nthe user's wallet on a server owned by a third party. This is similar to\nwebmail in that it relies entirely on a third-party server. Some of\nthese services operate using client-side code running in the user's\nbrowser, which keeps control of the Bitcoin keys in the hands of the\nuser, although the user's dependence on the server still compromises\ntheir privacy. Most, however, take control of the Bitcoin keys from\nusers in exchange for ease-of-use. It is inadvisable\nto store large amounts of bitcoin on third-party systems.\n\nHardware signing devices:: Hardware signing devices(((\"hardware signing devices\"))) are devices that can\nstore keys and sign transactions using special-purpose hardware and\nfirmware. They usually\nconnect to a desktop, mobile, or web wallet via USB cable,\nnear-field-communication (NFC), or a camera with QR codes.  By handling\nall Bitcoin-related operations on the specialized hardware, these\nwallets are less vulnerable to many types of attacks.  Hardware signing\ndevices are sometimes called \"hardware wallets\", but they need to be\npaired with a full-featured wallet to send and receive transactions, and\nthe security and privacy offered by that paired wallet plays a critical\nrole in how much security and privacy the user obtains when using the\nhardware signing device.\n\n===== Full node versus Lightweight\nAnother way to categorize Bitcoin wallets is by their degree of autonomy and how they interact with the Bitcoin network:\n\nFull node:: A full node (((\"full nodes\")))is a program that validates the\nentire history of Bitcoin transactions (every transaction by every user, ever).  Optionally, full nodes can also store previously validated\ntransactions and serve data to other Bitcoin programs, either on the\nsame computer or over the internet.  A full node uses substantial\ncomputer resources--about the same as watching an hour-long streaming\nvideo for each day of Bitcoin transactions--but the full node offers\ncomplete autonomy to its users.\n\nLightweight client:: \nA lightweight client,(((\"lightweight clients\")))(((\"simplified-payment-verification (SPV) clients\")))(((\"SPV (simplified-payment-verification) clients\"))) also known as a simplified-payment-verification (SPV) client,\nconnects to a full node or other remote server for receiving and sending\nBitcoin transaction information, but stores the user wallet locally,\npartially validates the transactions it receives, and independently\ncreates outgoing transactions.\n\nThird-party API client:: A third-party\nAPI client (((\"third-party API clients\")))is one that interacts with Bitcoin through a third-party\nsystem of APIs rather than by\nconnecting to the Bitcoin network directly. The wallet may be stored by\nthe user or by third-party servers, but the client trusts the remote\nserver to provide it with accurate information and protect its (((\"wallets\", \"types of\", startref=\"wallet-type\")))privacy.\n\n[TIP]\n====\nBitcoin (((\"Bitcoin\", \"as peer-to-peer network\", secondary-sortas=\"peer-to-peer network\")))(((\"peer-to-peer networks, Bitcoin as\")))(((\"peers\")))(((\"clients\")))is a peer-to-peer (P2P) network.  Full nodes are the _peers:_\neach peer individually validates every confirmed transaction and can\nprovide data to its user with complete authority.  Lightweight wallets\nand other software are _clients:_ each client depends on one or more peers\nto provide it with valid data.  Bitcoin clients can perform secondary\nvalidation on some of the data they receive and make connections to\nmultiple peers to reduce their dependence on the integrity of a single\npeer, but the security of a client ultimately relies on the integrity of\nits peers.\n====\n\n===== Who controls the keys\n\nA very(((\"wallets\", \"key control\")))(((\"keys, control of\")))(((\"bitcoins\", \"key control\"))) important additional consideration is _who controls the keys_. As\nwe will see in subsequent chapters, access to bitcoins is\ncontrolled by \"private keys,\" which are like very long PINs. If\nyou are the only one to have control over these private\nkeys, you are in control of your bitcoins. Conversely, if you do not have\ncontrol, then your bitcoins are managed by a third-party who\nultimately controls your funds on your behalf. Key management software falls into two\nimportant categories based on control: _wallets_, where you\ncontrol the keys, and the funds and accounts with custodians where some\nthird-party controls the keys. To emphasize this point, I (Andreas)\ncoined the phrase: _Your keys, your coins. Not your keys, not your coins_.\n\nCombining these categorizations, many Bitcoin wallets fall into a few\ngroups, with the three most common being desktop full node\n(you control the keys), mobile lightweight wallet (you control the keys), and web-based\naccounts with third parties (you don't control the keys). The lines between different categories\nare sometimes blurry, as software runs on multiple platforms and can\ninteract with the network in different ways.\n\n==== Quick Start\n\nAlice is not a\ntechnical user and only recently heard about Bitcoin from her friend\nJoe. While at a party, Joe is enthusiastically explaining\nBitcoin to everyone around him and is offering a demonstration. Intrigued,\nAlice asks how she can get started with Bitcoin. Joe says that a mobile\nwallet is best for new users and he recommends a few of his favorite\nwallets. Alice downloads one of Joe's recommendations\nand installs it on her phone.\n\nWhen Alice runs her wallet application for the first time, she chooses\nthe option to create a new Bitcoin wallet. Because the wallet she has\nchosen is a (((\"wallets\", \"noncustodial\")))(((\"noncustodial wallets\")))noncustodial wallet, Alice (and only Alice) will be in\ncontrol of her keys. Therefore, she bears responsibility for backing\nthem up, since losing the keys means she loses access to her bitcoins. To\nfacilitate this, her wallet produces a _recovery code_ that can be used\nto restore her wallet.\n\n[[recovery_code_intro]]\n==== Recovery Codes\n\nMost (((\"wallets\", \"recovery codes\", id=\"wallet-recovery\")))(((\"recovery codes\", id=\"recovery-code\")))(((\"backing up\", \"recovery codes\", see=\"recovery codes\")))modern noncustodial Bitcoin wallets will provide a recovery\ncode for their user\nto back up.  The recovery code usually consists of numbers, letters, or words\nselected randomly by the software, and is used as the basis for the keys\nthat are generated by the wallet. See <<recovery_code_sample>> for\nexamples.\n\n++++\n<table id=\"recovery_code_sample\">\n<caption>Sample recovery codes</caption>\n<thead>\n<tr>\n<th>Wallet</th>\n<th>Recovery code</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><p>BlueWallet</p></td>\n<td><p>(1) media (2) suspect (3) effort (4) dish (5) album (6) shaft (7) price (8) junk (9) pizza (10) situate (11) oyster (12) rib</p></td>\n</tr>\n<tr>\n<td><p>Electrum</p></td>\n<td><p>nephew dog crane clever quantum crazy purse traffic repeat fruit old clutch</p></td>\n</tr>\n<tr>\n<td><p>Muun</p></td>\n<td><p>LAFV TZUN V27E NU4D WPF4 BRJ4 ELLP BNFL</p></td>\n</tr>\n</tbody>\n</table>\n++++\n\n[TIP]\n====\nA recovery code is (((\"mnemonic phrases\", see=\"recovery codes\")))(((\"seed phrases\", see=\"recovery codes\")))sometimes called a \"mnemonic\" or \"mnemonic phrase,\"\nwhich implies you should memorize the phrase, but writing the phrase\ndown on paper takes less work and tends to be more reliable than most\npeople's memories.  Another alternative name is \"seed phrase\" because\nit provides the input (\"seed\") to the function that generates all of\na wallet's keys.\n====\n\nIf something happens to Alice's wallet, she can download a new copy of\nher wallet software and enter this recovery code to rebuild the wallet\ndatabase of all the onchain transactions she's ever sent or received.\nHowever, recovering from the recovery code will not by itself restore any additional\ndata Alice entered into her wallet, such as the labels she associated\nwith particular addresses or transactions.  Although losing access to\nthat metadata isn't as important as losing access to money, it can\nstill be important in its own way.  Imagine you need to review an old\nbank or credit card statement and the name of every entity you paid (or\nwho paid you) has been blanked out.  To prevent losing metadata, many\nwallets provide an additional backup feature beyond recovery codes.\n\nFor some wallets, that additional backup feature is even more important\ntoday than it used to be.  Many Bitcoin payments (((\"offchain technology\")))are now made using\n_offchain_ technology, where not every payment is stored in the public blockchain.  This reduces user's costs and improves privacy, among other\nbenefits, but it means that a mechanism like recovery codes that depends on\nonchain data can't guarantee recovery of all of a user's bitcoins.  For\napplications with offchain support, it's important to make frequent\nbackups of the wallet database.\n\nOf note, when receiving funds to a new mobile wallet for the first time,\nmany wallets will often re-verify that you have securely backed-up your\nrecovery code. This can range from a simple prompt to requiring the\nuser to manually re-enter the code.\n\n[WARNING]\n====\nAlthough many legitimate wallets will prompt you to re-enter\nyour recovery code, there are also many malware applications that mimic the\ndesign of a wallet, insist you enter your recovery code, and then\nrelay any entered code to the malware developer so they can steal\nyour funds.  This is the equivalent of phishing websites that try to\ntrick you into giving them your bank passphrase.  For most wallet\napplications, the only times they will ask for your recovery code are during\nthe initial set up (before you have received any bitcoins) and during\nrecovery (after you lost access to your original wallet).  If the application\nasks for your recovery code any other time, consult with an expert to\nensure you aren't (((\"wallets\", \"recovery codes\", startref=\"wallet-recovery\")))(((\"recovery codes\", startref=\"recovery-code\")))being phished.\n====\n\n==== Bitcoin Addresses\n\nAlice is (((\"addresses\", \"explained\")))now ready to start using her new Bitcoin wallet.  Her wallet application randomly generated a private key (described in more detail in <<private_keys>>) that will be used to derive Bitcoin addresses that direct to her wallet. At this point, her Bitcoin addresses are not known to the Bitcoin network or \"registered\" with any part of the Bitcoin system. Her Bitcoin addresses are simply numbers that correspond to her private key that she can use to control access to the funds. The addresses are generated independently by her wallet without reference or registration with any service.\n\n[TIP]\n====\nThere\nare a variety (((\"invoices\")))of Bitcoin addresses and invoice formats.  Addresses and\ninvoices can be shared with other Bitcoin users\nwho can use them to send bitcoins directly to your wallet.  You can share\nan address or invoice with other people without worrying about the\nsecurity of your bitcoins.  Unlike a bank account number, nobody who\nlearns one of your Bitcoin addresses can withdraw money from your wallet--you\nmust initiate all spends.  However, if you give two people the same\naddress, they will be able to see how many bitcoins the other person sent\nyou.  If you post your address publicly, everyone will be able to see\nhow much bitcoin other people sent to that address.  To protect your privacy, you\nshould generate a new invoice with a new address each time you request a\npayment.\n====\n\n==== Receiving Bitcoin\n\nAlice(((\"bitcoins\", \"receiving\")))(((\"receiving bitcoins\"))) uses the _Receive_ button, which displays a QR code, shown in <<wallet_receive>>.\n\n[role=\"width-50\"]\n[[wallet_receive]]\n.Alice uses the Receive screen on her mobile Bitcoin wallet and displays her address in a QR code format.\nimage::images/mbc3_0101.png[\"Wallet receive screen with QR code displayed.  Image derived from Bitcoin Design Guide CC-BY\"]\n\nThe QR code is the square with a pattern of black and white dots, serving as a form of barcode that contains the same information in a format that can be scanned by Joe's smartphone camera.\n\n[WARNING]\n====\nAny funds sent to the addresses in this book will be lost.  If you want\nto test sending bitcoins, please consider donating it to a\nbitcoin-accepting charity.\n====\n\n[[getting_first_bitcoin]]\n==== Getting Your First Bitcoin\n\nThe(((\"bitcoins\", \"acquiring\", id=\"bitcoin-acquire\")))(((\"acquiring bitcoins\", id=\"acquire-bitcoin\"))) first task for new users is to acquire some bitcoin.\n\nBitcoin transactions are irreversible. Most electronic payment networks such as credit cards, debit cards, PayPal, and bank account transfers are reversible. For someone selling bitcoin, this difference introduces a very high risk that the buyer will reverse the electronic payment after they have received bitcoin, in effect defrauding the seller. To mitigate this risk, companies accepting traditional electronic payments in return for bitcoin usually require buyers to undergo identity verification and credit-worthiness checks, which may take several days or weeks. As a new user, this means you cannot buy bitcoin instantly with a credit card. With a bit of patience and creative thinking, however, you won't need to.\n\n\nHere are some methods for acquiring bitcoin as a new user:\n\n* Find a friend who has bitcoins and buy some from him or her directly. Many Bitcoin users start this way. This method is the least complicated. One way to meet people with bitcoins is to attend a local Bitcoin meetup listed at pass:[<a href=\"https://meetup.com\" class=\"orm:hideurl\">Meetup.com</a>].\n* Earn bitcoin by selling a product or service for bitcoin. If you are a programmer, sell your programming skills. If you're a hairdresser, cut hair for bitcoins.\n* Use a Bitcoin ATM in your city.  A Bitcoin ATM is a machine that accepts cash and sends bitcoins to your smartphone Bitcoin wallet.\n* Use(((\"bitcoins\", \"currency exchanges\")))(((\"currency exchanges\"))) a Bitcoin currency exchange linked to your bank account. Many countries now have currency exchanges that offer a market for buyers and sellers to swap bitcoins with local currency. Exchange-rate listing services, such as https://bitcoinaverage.com[BitcoinAverage], often show a list of Bitcoin exchanges for each currency.\n\n[TIP]\n====\nOne of the advantages of\nBitcoin over other payment systems is that, when used correctly, it\naffords users much more privacy. Acquiring, holding, and spending\nbitcoin does not require you to divulge sensitive and personally\nidentifiable information to third parties. However, where bitcoin\ntouches traditional systems, such as currency exchanges, national and\ninternational regulations often apply. In order to exchange bitcoin for\nyour national currency, you will often be required to provide proof of\nidentity and banking information. Users should be aware that once a\nBitcoin address is attached to an identity, other associated Bitcoin\ntransactions may also become easy to identify and track--including\ntransactions made earlier. This is one reason\nmany users choose to maintain dedicated exchange accounts independent from\ntheir wallets.\n====\n\nAlice was introduced to Bitcoin by a friend, so she has an easy way to acquire her first bitcoins. Next, we will look at how she buys bitcoins from her friend Joe and how Joe sends the bitcoins to her (((\"bitcoins\", \"acquiring\", startref=\"bitcoin-acquire\")))(((\"acquiring bitcoins\", startref=\"acquire-bitcoin\")))wallet.\n\n[[bitcoin_price]]\n==== Finding the Current Price of Bitcoin\n\nBefore (((\"bitcoins\", \"exchange rate\", id=\"bitcoin-exchange-rate\")))(((\"exchange rate\", id=\"exchange-rate\")))(((\"current price of bitcoins\", id=\"current-price\")))Alice can buy bitcoin from Joe, they have to agree on the _exchange rate_ between bitcoin and US dollars. This brings up a common question for those new to Bitcoin: \"Who sets the price\nof bitcoins?\" The short answer is that the price is set by markets.\n\nBitcoin, like most other currencies, has a _floating exchange rate_. That means that the value of bitcoin fluctuates according to supply and demand in the various markets where it is traded. For example, the \"price\" of bitcoin in US dollars is calculated in each market based on the most recent trade of bitcoins and US dollars. As such, the price tends to fluctuate minutely several times per second. A pricing service will aggregate the prices from several markets and calculate a volume-weighted average representing the broad market exchange rate of a currency pair (e.g., BTC/USD).\n\nThere are hundreds of applications and websites that can provide the current market rate. Here are some of the most popular:\n\nhttps://bitcoinaverage.com[Bitcoin Average]:: A site that provides a simple view of the volume-weighted average for each currency.\nhttps://coincap.io[CoinCap]:: A service listing the market capitalization and exchange rates of hundreds of cryptocurrencies, including bitcoins.\nhttps://oreil.ly/ACieC[Chicago Mercantile Exchange Bitcoin Reference Rate]:: A reference rate that can be used for institutional and contractual reference, provided as part of investment data feeds by the CME.\n\nIn addition to these various sites and applications, some Bitcoin\nwallets will automatically convert amounts between bitcoin and other currencies.\n\n[[sending_receiving]]\n==== Sending and Receiving Bitcoin\n\nAlice (((\"bitcoins\", \"spending\", id=\"bitcoin-send\")))(((\"spending bitcoins\", id=\"send-bitcoin\")))(((\"bitcoins\", \"receiving\", id=\"bitcoin-receive\")))(((\"receiving bitcoins\", id=\"receive-bitcoin\")))has\ndecided to buy 0.001 bitcoins. After she and Joe check the exchange rate,\nshe gives Joe an appropriate amount of cash, opens her mobile wallet\napplication, and selects Receive. This\ndisplays a QR code with Alice's first Bitcoin address.\n\nJoe then selects Send on his smartphone wallet and opens the QR code\nscanner.  This allows Joe to scan the barcode with his smartphone camera\nso that he doesn't have to type in Alice's Bitcoin address, which is\nquite long.\n\nJoe now has Alice's Bitcoin address set as the recipient. Joe enters the amount as 0.001 bitcoins (BTC); see <<wallet-send>>.  Some wallets may\nshow the amount in a different denomination: 0.001 BTC is 1 millibitcoin\n(mBTC) or 100,000 satoshis (sats).\n\nSome wallets may also suggest Joe enter a label for this transaction; if\nso, Joe enters \"Alice\".  Weeks or months from now, this will help Joe\nremember why he sent these 0.001 bitcoins.  Some wallets may also prompt\nJoe about fees.  Depending on the wallet and how the transaction is\nbeing sent, the wallet may ask Joe to either enter a transaction fee rate or\nprompt him with a suggested fee (or fee rate).  The higher the transaction fee, the\nfaster the transaction will be confirmed (see <<confirmations>>).\n\n[[wallet-send]]\n.Bitcoin wallet send screen.\nimage::images/mbc3_0102.png[\"Wallet send screen.  Image derived from Bitcoin Design Guide CC-BY\"]\n\nJoe then carefully checks to make sure he has entered the correct\namount, because he is about to transmit money and mistakes will soon become\nirreversible. After double-checking the address and amount, he presses\nSend to transmit the transaction. Joe's mobile Bitcoin wallet constructs\na transaction that assigns 0.001 BTC to the address provided by Alice,\nsourcing the funds from Joe's wallet, and signing the transaction with\nJoe's private keys. This tells the Bitcoin network that Joe has\nauthorized a transfer of value to Alice's new address. As the\ntransaction is transmitted via the peer-to-peer protocol, it quickly\npropagates across the Bitcoin network. After just a few seconds, most of\nthe well-connected nodes in the network receive the transaction and see\nAlice's address for the first time.\n\nMeanwhile, Alice's wallet is constantly \"listening\" for new\ntransactions on the Bitcoin network, looking for any that match the\naddresses it contains. A few seconds after Joe's wallet transmits the\ntransaction, Alice's wallet will indicate that it is receiving\n0.001 BTC.\n\n[[confirmations]]\n.Confirmations\n****\nAt first, (((\"bitcoins\", \"clearing transactions\")))(((\"clearing transactions\")))(((\"transactions\", \"clearing\")))(((\"confirmations\")))Alice's address will show the transaction from Joe as \"Unconfirmed.\" This means that the transaction has been propagated to the network but has not yet been recorded in the Bitcoin transaction journal, known as the blockchain. To be confirmed, a transaction must be included in a block and added to the blockchain, which happens every 10 minutes, on average. In traditional financial terms this is known as _clearing_. For more details on propagation, validation, and clearing (confirmation) of bitcoin transactions, see <<mining>>.\n****\n\nAlice is now the proud owner of 0.001 BTC that she can spend. Over the next few days, Alice buys more bitcoin using an ATM and(((\"bitcoins\", \"spending\", startref=\"bitcoin-send\")))(((\"spending bitcoins\", startref=\"send-bitcoin\")))(((\"bitcoins\", \"receiving\", startref=\"bitcoin-receive\")))(((\"receiving bitcoins\", startref=\"receive-bitcoin\"))) an exchange. In the next chapter we will look at her first purchase with Bitcoin, and examine the underlying transaction and propagation technologies in more detail.\n"
        },
        {
          "name": "ch02_overview.adoc",
          "type": "blob",
          "size": 32.013671875,
          "content": "[[ch02_bitcoin_overview]]\n== How Bitcoin Works\n\nThe Bitcoin system, unlike traditional banking and\npayment systems, does not require trust in third parties. Instead of a central\ntrusted authority, in Bitcoin, each user can use software running on\ntheir own computer to verify the correct operation of every\naspect of the Bitcoin system.\nIn this chapter, we will examine Bitcoin from a high level by tracking a\nsingle transaction through the Bitcoin system and watch as it\nis recorded on the blockchain, the distributed journal of all\ntransactions. Subsequent chapters will delve into the technology behind\ntransactions, the network, and (((\"Bitcoin\", \"operational overview\", id=\"bitcoin-operational-overview-ch2\")))(((\"blockchain explorers\", id=\"blockchain-explorers\")))mining.\n\n=== Bitcoin Overview\n\n++++\n<p class=\"fix_tracking\">\nThe Bitcoin system consists of users with wallets containing keys,\ntransactions that are propagated across the network, and miners who\nproduce (through competitive computation) the consensus blockchain,\nwhich is the authoritative journal of all transactions.\n</p>\n\n<p class=\"fix_tracking2\">\nEach example in this chapter is based\non an actual transaction made on the Bitcoin network, simulating the\ninteractions between several users by sending\nfunds from one wallet to another. While tracking a transaction through\nthe Bitcoin network to the blockchain, we will use a <em>blockchain\nexplorer</em> site to visualize each step. A blockchain explorer is a web\napplication that operates as a Bitcoin search engine, in that it allows\nyou to search for addresses, transactions, and blocks and see the\nrelationships and flows between them.\n</p>\n++++\n\nPopular blockchain explorers include the following:\n\n* https://blockstream.info[Blockstream Explorer]\n* https://mempool.space[Mempool.Space]\n* https://live.blockcypher.com[BlockCypher Explorer]\n\nEach of these has a search function that can take a Bitcoin address,\ntransaction hash, block number, or block hash and retrieve corresponding\ninformation from the Bitcoin network. With each transaction or block\nexample, we will provide a URL so you can look it up yourself and study\nit in detail.\n\n[[block-explorer-privacy]]\n.Block Explorer Privacy Warning\n[WARNING]\n====\nSearching information(((\"privacy\", \"blockchain explorers\"))) on a block explorer may disclose to its operator\nthat you're interested in that information, allowing them to associate\nit with your IP address, browser details, past searches, or other\nidentifiable information.  If you look up the transactions in this book,\nthe operator of the block explorer might guess that you're learning\nabout Bitcoin, which shouldn't be a problem.  But if you look up your\nown transactions, the operator may be able to guess how many bitcoins\nyou've received, spent, and (((\"Bitcoin\", \"operational overview\", startref=\"bitcoin-operational-overview-ch2\")))(((\"blockchain explorers\", startref=\"blockchain-explorers\")))currently own.\n====\n\n[[spending_bitcoin]]\n=== Buying from an Online Store\n\nAlice, (((\"transactions\", \"spending bitcoins\", id=\"transaction-spend\")))(((\"bitcoins\", \"spending\", id=\"bitcoin-spend\")))(((\"spending bitcoins\", id=\"spend-bitcoin\")))introduced in the previous chapter, is a new user who has just\nacquired her first bitcoins. In <<getting_first_bitcoin>>, Alice met with\nher friend Joe to exchange some cash for bitcoins. Since then, Alice has\nbought additional bitcoins.  Now Alice will make\nher first spending transaction, buying access to a premium podcast episode from Bob's online store.\n\nBob's web store recently started accepting bitcoin payments by adding a\nBitcoin option to its website. The prices at Bob's store are listed in\nthe local currency (US dollars), but at checkout, customers have the\noption of paying in either dollars or bitcoin.\n\nAlice finds the podcast episode she wants to buy and proceeds to the checkout page. At checkout,\nAlice is offered the option to pay with bitcoin in addition to the\nusual options. The checkout cart displays the price in US dollars and\nalso in bitcoin (BTC), at Bitcoin's prevailing exchange rate.\n\nBob's\necommerce system will automatically create a QR code(((\"invoices\")))(((\"QR codes\"))) containing an\n_invoice_ (<<invoice-QR>>).\n\n////\nTODO: Replace QR code with test-BTC address\n////\n\n[[invoice-QR]]\n.Invoice QR code.\nimage::images/mbc3_0201.png[\"payment-request\"]\n\nUnlike a QR code that simply contains a destination Bitcoin address, this\ninvoice is a QR-encoded URI that contains a destination address,\na payment amount, and a description.\nThis allows a Bitcoin wallet application to prefill the\ninformation used to send the payment while showing a human-readable\ndescription to the user. You can scan the QR code with a bitcoin wallet\napplication to see what Alice would see:\n\n\n[[invoice-URI]]\n.The invoice QR code encodes the following URI, defined in BIP21:\n----\nbitcoin:bc1qk2g6u8p4qm2s2lh3gts5cpt2mrv5skcuu7u3e4?amount=0.01577764&\nlabel=Bob%27s%20Store&\nmessage=Purchase%20at%20Bob%27s%20Store\n\nComponents of the URI\n\nA Bitcoin address: \"bc1qk2g6u8p4qm2s2lh3gts5cpt2mrv5skcuu7u3e4\"\nThe payment amount: \"0.01577764\"\nA label for the recipient address: \"Bob's Store\"\nA description for the payment: \"Purchase at Bob's Store\"\n----\n\n[TIP]\n====\nTry to scan this with your wallet to see\nthe address and amount but DO NOT SEND MONEY.\n====\n\nAlice uses her smartphone to scan the barcode on display. Her smartphone\nshows a payment for the correct amount to +Bob's Store+ and she selects Send to\nauthorize the payment. Within a few seconds (about the same amount of\ntime as a credit card authorization), Bob sees the transaction on the\nregister.\n\n[NOTE]\n====\nThe\nBitcoin network(((\"bitcoins\", \"fractional values\")))(((\"fractional values of bitcoins\")))(((\"satoshis\")))(((\"millibitcoins\"))) can transact in fractional values, e.g., from\nmillibitcoin (1/1000th of a bitcoin) down to 1/100,000,000th of a\nbitcoin, which is known as a satoshi.  This book uses the same\npluralization rules used for dollars and other traditional currencies\nwhen talking about amounts greater than one bitcoin and when using\ndecimal notation, such as \"10 bitcoins\" or \"0.001 bitcoins.\"  The same\nrules also apply to other bitcoin bookkeeping units, such as\nmillibitcoins and satoshis.\n====\n\nYou can use a block explorer to examine blockchain data, such as the payment made to Bob in Alice's(((\"transactions\", \"spending bitcoins\", startref=\"transaction-spend\")))(((\"bitcoins\", \"spending\", startref=\"bitcoin-spend\")))(((\"spending bitcoins\", startref=\"spend-bitcoin\"))) https://oreil.ly/hAeyh[transaction].\n\nIn the following sections, we will examine this transaction in more\ndetail. We'll see how Alice's wallet constructed it, how it was\npropagated across the network, how it was verified, and finally, how Bob\ncan spend that amount in subsequent transactions.\n\n=== Bitcoin Transactions\n\nIn (((\"transactions\", \"defined\")))(((\"bitcoins\", \"transactions\", see=\"transactions\")))simple terms, a transaction tells the\nnetwork that the owner of certain bitcoins has authorized the transfer\nof that value to another owner. The new owner can now spend the bitcoin\nby creating another transaction that authorizes the transfer to another\nowner, and so on, in a chain of ownership.\n\n==== Transaction Inputs and Outputs\n\nTransactions(((\"transactions\", \"inputs\", id=\"transaction-input-ch2\")))(((\"transactions\", \"outputs\", id=\"transaction-output-ch2\")))(((\"inputs\", id=\"input\")))(((\"outputs\", id=\"output\"))) are like lines in a double-entry\nbookkeeping ledger.  Each transaction contains one or more _inputs_,\nwhich spend funds. On the other side of\nthe transaction, there are one or more _outputs_, which receive funds.\nThe inputs\nand outputs do not necessarily add up to the same\namount. Instead, outputs add up to slightly less than inputs and the\ndifference represents an (((\"transaction fees\")))implied _transaction fee_, which is a small\npayment collected by the miner who includes the transaction in the\nblockchain. A Bitcoin transaction is shown as a bookkeeping ledger entry in\n<<transaction-double-entry>>.\n\nThe transaction also contains proof of ownership for each amount of\nbitcoins (inputs) whose value is being spent, in the form of a digital\nsignature from the owner, which can be independently validated by\nanyone. In Bitcoin terms, spending\nis signing a transaction that transfers value from a previous\ntransaction over to a new owner identified by a Bitcoin address.\n\n[[transaction-double-entry]]\n.Transaction as double-entry bookkeeping.\nimage::images/mbc3_0202.png[\"Transaction Double-Entry\"]\n\n==== Transaction Chains\n\nAlice's (((\"transaction chains\", id=\"transaction-chains\")))payment to Bob's Store uses a\nprevious transaction's output as its input. In the previous chapter,\nAlice received bitcoins from her friend Joe in return for cash.\nWe've labeled that as _Transaction 1_ (Tx1) in <<transaction-chain>>.\n\nTx1 sent 0.001 bitcoins (100,000 satoshis) to an output locked by\nAlice's key. Her new transaction to Bob's Store (Tx2) references the\nprevious output as an input.  In the illustration, we show that\nreference using an arrow and by labeling the input as \"Tx1:0\".  In an\nactual transaction, the reference is the 32-byte transaction identifier\n(txid) for the transaction where Alice received the money from Joe.  The\n\":0\" indicates the position of the output where Alice received the\nmoney; in this case, the first position (position 0).\n\nAs shown, actual Bitcoin transactions don't\nexplicitly include the value of their input.  To determine the value of\nan input, software needs to use the input's reference to find the\nprevious transaction output being spent.\n\nAlice's Tx2 contains two new outputs, one paying 75,000 satoshis for the\npodcast and another paying 20,000 satoshis back to Alice to receive\nchange.\n\n////\n@startditaa\n      Transaction 1             Tx2                   Tx3\n     Inputs  Outputs         In     Out           In      Out\n   +-------+---------+   +-------+--------+    +-------+--------+\n   |       |         |   |       | cDDD   |    |       |        |\n<--+ Tx0꞉0 | 100,000 |<--+ Tx1꞉0 | 20,000 |  +-+ Tx2꞉1 | 67,000 |\n   |       |         |   |       |        |  | |       |        |\n   +-------+---------+   +-------+--------+  | +-------+--------+\n   |       | cDDD    |   |       |        |  | |       |        |\n   |       | 500,000 |   |       | 75,000 |<-+ |       |        |\n   |       |         |   |       |        |    |       |        |\n   +-------+---------+   +-------+--------+    +-------+--------+\n        Fee꞉ (unknown)           Fee꞉ 5,000            Fee꞉ 8,000\n@enddittaa\n////\n\n[[transaction-chain]]\n.A chain of transactions, where the output of one transaction is the input of the next transaction.\nimage::images/mbc3_0203.png[\"Transaction chain\"]\n\n[TIP]\n====\nSerialized Bitcoin transactions--the data format that software uses for\nsending transactions--encodes the value to transfer using an integer\nof the smallest defined onchain unit of value.  When Bitcoin was first\ncreated, this unit didn't have a name and some developers simply called\nit the _base unit._  Later many users began calling this unit a\n_satoshi_ (sat) in honor of Bitcoin's creator.  In <<transaction-chain>>\nand some other illustrations in this book, we use satoshi values because\nthat's what the protocol itself (((\"satoshis\")))uses.\n====\n\n==== Making Change\n\nIn addition(((\"transactions\", \"change output\", id=\"transaction-change-output\")))(((\"change output\", id=\"change-output\")))(((\"outputs\", \"change output\", id=\"output-change\"))) to one or more outputs that pay the receiver of\nbitcoins, many transactions will also include an output that pays the\nspender of the bitcoins, called a _change_ output.\nThis is because transaction inputs,\nlike currency notes, cannot be partly spent. If you purchase a $5 US item in a store but use a $20 bill to pay for the item, you\nexpect to receive $15 in change. The same concept applies to\nBitcoin transaction inputs. If you purchased an item that costs 5\nbitcoins but only had an input worth 20 bitcoins to use, you would send one\noutput of 5 bitcoins to the store owner and one output of 15 bitcoins back\nto yourself as change (not counting your transaction fee).\n\nAt the level of the Bitcoin protocol, there is no difference between a\nchange output (and the address it pays, called a _change address_) and a\npayment output.\n\nImportantly, the change address does not have to be the\nsame address as that of the input and, for privacy reasons, is often a new\naddress from the owner's wallet.  In ideal circumstances, the two\ndifferent uses of outputs both use never-before-seen addresses and\notherwise look identical, preventing any third party from determining\nwhich outputs are change and which are payments.  However, for\nillustration purposes, we've added shading to the change outputs in\n<<transaction-chain>>.\n\nNot every transaction has a change output.  Those that don't are (((\"changeless transactions\")))(((\"transactions\", \"changeless\")))called\n_changeless transactions_, and they can have only a single output.\nChangeless transactions are only a practical option if the amount being\nspent is roughly the same as the amount available in the transaction\ninputs minus the anticipated transaction fee.  In <<transaction-chain>>,\nwe see Bob creating Tx3 as a changeless transaction that spends the\noutput he received in Tx2.\n\n==== Coin Selection\n\nDifferent wallets(((\"transactions\", \"coin selection\")))(((\"coin selection in transactions\")))(((\"selecting\", \"coins in transactions\"))) use different strategies when choosing which\ninputs to use in a payment, called _coin selection_.\n\nThey might aggregate many small\ninputs, or use one that is equal to or larger than the desired payment.\nUnless the wallet can aggregate inputs in such a way to exactly match\nthe desired payment plus transaction fees, the wallet will need to\ngenerate some change. This is very similar to how people handle cash. If\nyou always use the largest bill in your pocket, you will end up with a\npocket full of loose change. If you only use the loose change, you'll\noften have only big bills. People subconsciously find a balance between\nthese two extremes, and Bitcoin wallet developers strive to program this\nbalance.\n\n==== Common Transaction Forms\n\nA very (((\"transactions\", \"common types\", id=\"transaction-common-ch2\")))common form of transaction is a simple payment. This type of\ntransaction has one input and two outputs and is shown in\n<<transaction-common>>.\n\n[[transaction-common]]\n.Most common transaction.\nimage::images/mbc3_0204.png[\"Common Transaction\"]\n\nAnother common form of transaction (((\"consolidation transactions\")))is a _consolidation transaction_, which spends several inputs\ninto a single output (<<transaction-consolidating>>). This represents\nthe real-world equivalent of exchanging a pile of coins and currency\nnotes for a single larger note. Transactions like these are sometimes\ngenerated by wallets and businesses to clean up lots of smaller amounts.\n\n[[transaction-consolidating]]\n.Consolidation transaction aggregating funds.\nimage::images/mbc3_0205.png[\"Aggregating Transaction\"]\n\nFinally, another transaction form that is seen often on the\nblockchain (((\"payment batching\")))is _payment batching_, which pays to multiple outputs\nrepresenting multiple recipients (<<transaction-distributing>>).\nThis type of transaction is sometimes used by commercial entities to\ndistribute funds, such as when processing payroll payments to multiple employees.\n\n[[transaction-distributing]]\n.Batch transaction distributing funds.\nimage::images/mbc3_0206.png[\"Distributing Transaction\"]\n\n=== Constructing a Transaction\n\nAlice's wallet(((\"transactions\", \"constructing\", id=\"transaction-construct\"))) application contains all\nthe logic for selecting inputs and generating outputs to build a\ntransaction to Alice's specification. Alice only needs to choose a\ndestination, amount, and transaction fee, and the rest happens in the wallet\napplication without her seeing the details. Importantly, if a wallet\nalready knows what inputs it controls, it can construct transactions\neven if it is completely offline.\nLike writing a check at home and later sending it to the bank in an\nenvelope, the transaction does not need to be constructed and signed\nwhile connected to the Bitcoin network.\n\n==== Getting the Right Inputs\n\nAlice's wallet\napplication (((\"inputs\", \"constructing transactions\")))will first have to find inputs that can pay the amount she\nwants to send to Bob. Most wallets keep track of all the available\noutputs belonging to addresses in the wallet. Therefore, Alice's wallet\nwould contain a copy of the transaction output from Joe's transaction,\nwhich was created in exchange for cash (see <<getting_first_bitcoin>>).\nA Bitcoin wallet application that runs on a full node actually\ncontains a copy of every confirmed transaction's (((\"UTXOs (unspent transaction outputs)\")))unspent outputs, called\n_unspent transaction outputs_ (UTXOs).\nHowever, because full nodes use more resources, many\nuser wallets run lightweight clients that track only the user's own\nUTXOs.\n\nIn this case, this single\nUTXO is sufficient to pay for the podcast. Had this not been the case,\nAlice's wallet application might have to combine several\nsmaller UTXOs, like picking coins from a purse, until it could\nfind enough to pay for the podcast. In both cases, there might be a need\nto get some change back, which we will see in the next section, as the\nwallet application creates the transaction outputs (payments).\n\n\n==== Creating the Outputs\n\nA transaction output(((\"outputs\", \"constructing transactions\"))) is\ncreated with a\nscript that says something like, \"This output is paid to whoever can\npresent a signature from the key corresponding to Bob's public address.\"\nBecause only Bob has the wallet with the keys corresponding to that\naddress, only Bob's wallet can present such a signature to later spend this\noutput. Alice will therefore _encumber_ the output value with a demand\nfor a signature from Bob.\n\nThis transaction will also include a second output (((\"change output\")))because Alice's\nfunds contain more money than the cost of the\npodcast. Alice's change\noutput is created in the very same\ntransaction as the payment to Bob. Essentially, Alice's wallet breaks\nher funds into two outputs: one to Bob and one back to herself. She can\nthen spend the change output in a subsequent transaction.\n\nFinally, for the transaction to be processed by the network in a(((\"transaction fees\"))) timely\nfashion, Alice's wallet application will add a small fee. The fee is not\nexplicitly stated in the transaction; it is implied by the difference in value between\ninputs and outputs.  This transaction fee is collected by the\nminer as a fee for including the transaction in a block\nthat gets recorded on the blockchain.\n\n[[transaction-alice-url]]\n[TIP]\n====\nView the https://oreil.ly/GwBq1[transaction from Alice to Bob's Store].\n====\n\n==== Adding the Transaction to the Blockchain\n\nThe (((\"transactions\", \"adding to blockchain\", id=\"transaction-add-blockchain\")))(((\"blockchain\", \"adding transactions to\", id=\"blockchain-add-transaction\")))transaction created by Alice's wallet application\ncontains everything necessary to confirm ownership of the funds and\nassign new owners. Now, the transaction must be transmitted to the\nBitcoin network where it will become part of the blockchain. In the next\nsection we will see how a transaction becomes part of a new block and\nhow the block is mined. Finally, we will see how the new block, once\nadded to the blockchain, is increasingly trusted by the network as more\nblocks are added.\n\n===== Transmitting the transaction\n\nBecause the transaction contains all\nthe information necessary for it to be processed, it does not matter how or where it\nis transmitted to the Bitcoin network. The Bitcoin network is a\npeer-to-peer network, with each Bitcoin peer participating by\nconnecting to several other Bitcoin peers. The purpose of the Bitcoin\nnetwork is to propagate transactions and blocks to all participants.\n\n===== How it propagates\n\n\nPeers in (((\"Bitcoin\", \"as peer-to-peer network\", secondary-sortas=\"peer-to-peer network\")))(((\"peer-to-peer networks, Bitcoin as\")))the Bitcoin peer-to-peer network are programs that have both\nthe software logic and the data necessary for them to fully verify the\ncorrectness of a new transaction.  The connections between peers are\noften visualized as edges (lines) in a graph, with the peers themselves\nbeing the nodes (dots).  For that reason, Bitcoin peers are commonly\ncalled \"full verification nodes,\" (((\"full nodes\")))or _full nodes_ for short.\n\nAlice's wallet application can send the new\ntransaction to any Bitcoin node over any type of\nconnection: wired, WiFi, mobile, etc.  It can also send the transaction\nto another program (such as a block explorer) that will relay it to a\nnode.  Her Bitcoin wallet does not have\nto be connected to Bob's Bitcoin wallet directly and she does not have\nto use the internet connection offered by Bob, though both those\noptions are possible too. Any Bitcoin node that receives a\nvalid transaction it has not seen before will forward it to\nall other nodes to which it is connected, a propagation technique known\n(((\"gossiping\")))as _gossiping_. Thus, the transaction rapidly propagates out across the\npeer-to-peer network, reaching a large percentage of the nodes within a\nfew seconds.\n\n===== Bob's view\n\nIf Bob's Bitcoin wallet application is directly connected to Alice's\nwallet application, Bob's wallet application might be the first to\nreceive the transaction. However, even if Alice's wallet sends the\ntransaction through other nodes, it will reach Bob's wallet within a few\nseconds. Bob's wallet will immediately identify Alice's transaction as\nan incoming payment because it contains an output redeemable by Bob's\nkeys. Bob's wallet application can also independently verify that the\ntransaction is well formed.  If Bob is using his own full node, his\nwallet can further verify Alice's transaction only spends(((\"transactions\", \"constructing\", startref=\"transaction-construct\")))(((\"transactions\", \"adding to blockchain\", startref=\"transaction-add-blockchain\")))(((\"blockchain\", \"adding transactions to\", startref=\"blockchain-add-transaction\"))) valid UTXOs.\n\n=== Bitcoin Mining\n\nAlice's transaction(((\"mining\", \"operational overview\", id=\"mining-operational-overview\"))) is now propagated on the Bitcoin\nnetwork. It does not become part of the _blockchain_ until it is\nincluded in a block by a process called _mining_ and that block has been\nvalidated by full nodes. See\n<<mining>> for a detailed explanation.\n\nBitcoin's system of counterfeit protection is based on computation.\nTransactions are bundled(((\"transactions\", \"in blocks\", secondary-sortas=\"blocks\")))(((\"blocks\"))) into _blocks_.  Blocks have a very small header\nthat must be formed in a very specific way, requiring an enormous\namount of computation to get right--but only a small amount of\ncomputation to verify as correct.\nThe mining process serves two purposes in Bitcoin:\n\n[role=\"less_space pagebreak-before\"]\n* Miners can only\nreceive honest income from creating blocks that follow all of(((\"consensus rules\"))) Bitcoin's\n_consensus rules_.  Therefore, miners are normally incentivized to\nonly include valid transactions in their blocks and the blocks they\nbuild upon.  This allows users to optionally make a trust-based\nassumption that any transaction in a block is a valid transaction.\n\n* Mining currently creates new bitcoins in each block, almost like a central bank\nprinting new money. The amount of bitcoin created per block is limited\nand diminishes with time, following a fixed issuance schedule.\n\n\nMining achieves a fine balance between cost and reward. Mining uses\nelectricity to solve a computational problem. A successful miner will\ncollect (((\"rewards\")))a _reward_ in the form of new bitcoins and transaction fees.\nHowever, the reward will only be collected if the miner has only\nincluded valid transactions, with the Bitcoin protocol's rules for\n_consensus_ determining what is valid.  This delicate balance provides\nsecurity for Bitcoin without a central authority.\n\nMining is designed to be a decentralized lottery.  Each miner can create\ntheir own lottery ticket by creating (((\"candidate blocks\")))a _candidate block_ that includes\nthe new transactions they want to mine plus some additional data fields.\nThe miner inputs their candidate into a specially designed algorithm that\nscrambles(((\"hash functions\"))) (or \"hashes\") the data, producing output that looks nothing\nlike the input data.  This _hash_ function will always produce the same\noutput for the same input--but nobody can predict what the output will\nlook like for a new input, even if it is only slightly different from a\nprevious input.  If the output of the hash function matches a template\ndetermined by the Bitcoin protocol, the miner wins the lottery and\nBitcoin users will accept the block with its transactions as a\nvalid block.  If the output doesn't match the template, the miner makes\na small change to their candidate block and tries again.  As of this\nwriting, the number of candidate blocks miners need to try before finding\na winning combination is about 168 billion trillion.  That's also how\nmany times the hash function needs to be run.\n\nHowever, once a winning combination has been found, anyone can verify\nthe block is valid by running the hash function just once.  That makes a\nvalid block something that requires an incredible amount of work to\ncreate but only a trivial amount of work to verify.  The simple\nverification process is able to probabalistically prove the work was\ndone, so the data necessary to generate that proof--in this case, the\nblock--is called(((\"proof-of-work algorithm\"))) _proof of work (PoW)_.\n\nTransactions are added to the new block, prioritized by the highest fee rate\ntransactions first and a few other criteria. Each miner starts the\nprocess of mining a new candidate block of transactions as soon as they receive the\nprevious block from the network, knowing that some other miner won that\niteration of the lottery.  They immediately create a new candidate block\nwith a commitment to the previous block, fill it with transactions, and start\ncalculating the PoW for the candidate block. Each miner includes a\nspecial transaction in their candidate blocks, one that pays their own Bitcoin address\nthe block reward plus the sum of\ntransaction fees from all the transactions included in the candidate block. If they\nfind a solution that makes the candidate into a valid block, they receive this reward\nafter their successful block is added to the global blockchain and the\nreward transaction they included becomes spendable. Miners who participate in a mining pool have set up their\nsoftware to create candidate blocks that assign the reward to a pool address.\nFrom there, a share of the reward is distributed to members of the pool\nminers in proportion to the amount of work they contributed.\n\nAlice's\ntransaction was picked up by the network and included in the pool of\nunverified transactions. Once validated by a full node, it was\nincluded in a candidate block.\nApproximately five minutes after the transaction was first transmitted\nby Alice's wallet, a miner finds a solution for the\nblock and announces it to the network. After each other miner\nvalidates the winning block, they start a new lottery to generate the next\nblock.\n\nThe winning block containing Alice's transaction became part of the\nblockchain. The block containing Alice's transaction is counted as (((\"confirmations\")))(((\"clearing transactions\")))(((\"transactions\", \"clearing\")))one\n_confirmation_ of that transaction.  After the block containing Alice's\ntransaction has propagated through the network, creating an alternative\nblock with a different version of Alice's transaction (such as a\ntransaction that doesn't pay Bob) would require performing the same\namount of work as it will take all Bitcoin miners to create an entirely\nnew block.  When there are multiple alternative blocks to choose from,\nBitcoin full nodes choose the chain of valid blocks with the most total\nPoW, called the _best blockchain_.  For the entire network to\naccept an alternative block, an additional new block would need to be\nmined on top of the alternative.\n\nThat means miners have a choice.  They can work with Alice on an\nalternative to the transaction where she pays Bob, perhaps with\nAlice paying miners a share of the money she previously paid Bob.  This\ndishonest behavior will require they expend the effort required to\ncreate two new blocks.  Instead, miners who behave honestly can create a\nsingle new block and receive all of the fees from the transactions\nthey include in it, plus the block subsidy.  Normally, the high cost of\ndishonestly creating two blocks for a small additional payment is much\nless profitable than honestly creating a new block, making it unlikely\nthat a confirmed transaction will be deliberately changed.  For Bob, this\nmeans that he can begin to believe that the payment from Alice can be\nrelied upon.\n\n[TIP]\n====\nYou can see the block that includes\nhttps://oreil.ly/7v_lH[Alice's transaction].\n====\n\nApproximately 19 minutes\nafter the block containing Alice's transaction is broadcast, a new block\nis mined by another miner. Because this\nnew block is built on top of the block that contained Alice's\ntransaction (giving Alice's transaction two confirmations), Alice's\ntransaction can now only be changed if two alternative blocks are\nmined--plus a new block built on top of them--for a total of three\nblocks that would need to be mined for Alice to take back the money she\nsent Bob.  Each block mined on top of the one containing Alice's\ntransaction counts as an additional confirmation.  As the blocks pile on\ntop of each other, it becomes harder to reverse the transaction, thereby\ngiving Bob more and more confidence that Alice's payment is secure.\n\nIn <<block-alice1>>,  we can see the block that contains Alice's transaction. Below it are\nhundreds of thousands of blocks, linked to each other in a chain of\nblocks (blockchain) all the way back to block #0, known as(((\"genesis block\"))) the _genesis\nblock_. Over time, as the \"height\" of new blocks increases, so does the\ncomputation difficulty for the chain as a whole.\nBy convention, any block with more than six confirmations\nis considered very hard to change, because it would require an immense amount of\ncomputation to recalculate six blocks (plus one new block). We will examine\nthe process of mining and the way it builds confidence in more (((\"mining\", \"operational overview\", startref=\"mining-operational-overview\")))detail in\n<<mining>>.\n\n[[block-alice1]]\n.Alice's transaction included in a block.\nimage::images/mbc3_0207.png[\"Alice's transaction included in a block\"]\n\n[role=\"less_space pagebreak-before\"]\n=== Spending the Transaction\n\nNow(((\"transactions\", \"spending bitcoins\", id=\"transaction-spend2\")))(((\"bitcoins\", \"spending\", id=\"bitcoin-spend2\")))(((\"spending bitcoins\", id=\"spend-bitcoin2\"))) that Alice's\ntransaction has been embedded in the blockchain as part of a block, it\nis visible to all Bitcoin\napplications. Each Bitcoin full node can independently verify the\ntransaction as valid and spendable. Full nodes validate every transfer\nof the funds from the moment the bitcoins were first generated in\na block through each subsequent transaction until they reach\nBob's address. Lightweight clients can partially verify payments\nby confirming that the\ntransaction is in the blockchain and has several blocks mined after it,\nthus providing assurance that the miners expended significant effort\ncommitting to it (see <<spv_nodes>>).\n\nBob can now spend the output from this and other transactions. For\nexample, Bob can pay a contractor or supplier by transferring value from\nAlice's podcast payment to these new owners.\nAs Bob spends the payments received from Alice and other customers, he\nextends the chain of transactions. Let's assume that Bob pays his web\ndesigner Gopesh\nfor a new website page. Now the chain of transactions will\nlook like <<block-alice2>>.\n\n[[block-alice2]]\n.Alice's transaction as part of a transaction chain from Joe to Gopesh.\nimage::images/mbc3_0208.png[\"Alice's transaction as part of a transaction chain\"]\n\nIn this chapter, we saw how transactions build a chain that moves value\nfrom owner to owner. We also tracked Alice's transaction from the\nmoment it was created in her wallet, through the Bitcoin network, and to\nthe miners who recorded it on the blockchain. In the rest of this book,\nwe will examine the specific technologies behind wallets, addresses,\nsignatures, transactions, the network, and finally, mining.\n"
        },
        {
          "name": "ch03_bitcoin-core.adoc",
          "type": "blob",
          "size": 53.947265625,
          "content": "[[ch03_bitcoin_client]]\n== Bitcoin Core: The Reference Implementation\n\nPeople only accept money in exchange for their valuable goods and\nservices if they believe that they'll be able to spend that money later.\nMoney that is counterfeit or unexpectedly debased may not be spendable\nlater, so every person accepting bitcoins has a strong incentive to\nverify the integrity of the bitcoins they receive.  The Bitcoin system\nwas designed so that it's possible for software running entirely on your\nlocal computer to perfectly prevent counterfeiting, debasement, and\nseveral other critical problems.  Software which provides that function\nis called a _full verification node_ because it verifies every confirmed\nBitcoin transaction against every rule in the system.  Full (((\"full nodes\")))verification\nnodes, _full nodes_ for short, may also provide tools and data for\nunderstanding how Bitcoin works and what is currently happening in the\nnetwork.\n\nIn this chapter, we'll install Bitcoin Core, the implementation that\nmost full node operators have used since the beginning of the Bitcoin\nnetwork.   We'll then inspect blocks, transactions, and other data from\nyour node, data which is authoritative--not because some powerful entity\ndesignated it as such but because your node independently verified it.\nThroughout the rest of this book, we'll continue using Bitcoin Core to\ncreate and examine data related to the blockchain and network.\n\n=== From Bitcoin to Bitcoin Core\n\nBitcoin (((\"Bitcoin Core\", \"explained\", id=\"bitcoin-core-explain\")))is an _open\nsource_ project and the source code is available under an open (MIT)\nlicense, free to download and use for any purpose.  More than just being\nopen source, Bitcoin is developed by\nan open community of volunteers. At first, that community consisted of\nonly (((\"Nakamoto, Satoshi\")))Satoshi Nakamoto. By 2023, Bitcoin's source code had more than 1,000\ncontributors with about a dozen developers working on the code almost\nfull time and several dozen more on a part-time basis. Anyone can\ncontribute to the code&#x2014;including you!\n\nWhen Bitcoin was created by Satoshi Nakamoto, the\nsoftware was mostly completed before publication of the whitepaper (reproduced in\n<<satoshi_whitepaper>>). Satoshi wanted to make sure the\nimplementation worked before publishing a paper about it. That first implementation, then simply\nknown as \"Bitcoin,\" has been heavily modified and\nimproved. It has evolved into what is known as _Bitcoin Core_, to\ndifferentiate it from other implementations. Bitcoin Core is\nthe _reference implementation_ of the Bitcoin system, meaning that it\nprovides a reference for how each part of the technology should be\nimplemented. Bitcoin Core implements all aspects of Bitcoin, including\nwallets, a transaction and block validation engine, tools for block construction, and all modern parts\nof Bitcoin peer-to-peer communication.\n\n<<bitcoin_core_architecture>> shows the architecture of Bitcoin\nCore.\n\n[[bitcoin_core_architecture]]\n.Bitcoin Core architecture (Source: Eric Lombrozo).\nimage::images/mbc3_0301.png[\"Bitcoin Core Architecture\"]\n\nAlthough Bitcoin Core serves as a reference implementation for many\nmajor parts of the system, the Bitcoin whitepaper describes several\nearly parts of the system.  Most major parts of the system since 2011\nhave been documented in a set of\nhttps://oreil.ly/BCXAQ[Bitcoin Improvement\nProposals (BIPs)].  Throughout(((\"BIPs (Bitcoin Improvement Proposals)\")))(((\"Bitcoin Improvement Proposals\", see=\"BIPs\"))) this book, we refer to BIP specifications\nby their number; for example, BIP9 describes a mechanism used for\nseveral major upgrades to(((\"Bitcoin Core\", \"explained\", startref=\"bitcoin-core-explain\"))) Bitcoin.\n\n=== Bitcoin Development Environment\n\nIf you're a\ndeveloper, you will want to set up a development environment with all\nthe tools, libraries, and support software for writing Bitcoin\napplications. In this highly technical chapter, we'll walk through that\nprocess step by step. If the material becomes too dense (and you're not\nactually setting up a development environment) feel free to skip to the\nnext chapter, which is less technical.\n\n[[compiling_core]]\n=== Compiling Bitcoin Core from the Source Code\n\nBitcoin Core's\nsource code(((\"Bitcoin Core\", \"compiling from source code\", id=\"bitcoin-core-compile\")))(((\"compiling Bitcoin Core from source code\", id=\"compile-bitcoin-core\")))(((\"source code, compiling Bitcoin Core\", id=\"source-code-compile\"))) can be downloaded as an archive or by cloning the\nsource repository from GitHub.  On the https://oreil.ly/hN9g1[Bitcoin Core download\npage], select the most recent version and download the compressed\narchive of the source code. Alternatively, use the Git command line to create a\nlocal copy of the source code from the\nhttps://oreil.ly/BdOwl[GitHub Bitcoin page].\n\n[TIP]\n====\nIn\nmany of the examples in this chapter, we will be using the operating\nsystem's command-line interface (also known as a \"shell\"), accessed via\na \"terminal\" application. The shell will display a prompt, you type a\ncommand, and the shell responds with some text and a new prompt for your\nnext command. The prompt may look different on your system, but in the\nfollowing examples, it is denoted by a +$+ symbol. In the examples, when\nyou see text after a +$+ symbol, don't type the +$+ symbol but type the\ncommand immediately following it, then press Enter to execute the\ncommand. In the examples, the lines below each command are the operating\nsystem's responses to that command. When you see the next +$+ prefix,\nyou'll know it's a new command and you should repeat the process.\n====\n\nHere, we use the +git+ command to create a\nlocal copy (\"clone\") of the source code:\n\n----\n$ git clone https://github.com/bitcoin/bitcoin.git\nCloning into 'bitcoin'...\nremote: Enumerating objects: 245912, done.\nremote: Counting objects: 100% (3/3), done.\nremote: Compressing objects: 100% (2/2), done.\nremote: Total 245912 (delta 1), reused 2 (delta 1), pack-reused 245909\nReceiving objects: 100% (245912/245912), 217.74 MiB | 13.05 MiB/s, done.\nResolving deltas: 100% (175649/175649), done.\n----\n\n[TIP]\n====\nGit is the most widely used\ndistributed version control system, an essential part of any software\ndeveloper's toolkit. You may need to install the +git+ command, or a\ngraphical user interface for Git, on your operating system if you do not\nhave it already.\n====\n\nWhen the Git cloning operation has completed, you will have a complete\nlocal copy of the source code repository in the directory _bitcoin_.\nChange to this directory using the +cd+ command:\n\n----\n$ cd bitcoin\n----\n\n==== Selecting a Bitcoin Core Release\n\nBy default,(((\"Bitcoin Core\", \"compiling from source code\", \"selecting release version\", id=\"bitcoin-core-compile-release\")))(((\"compiling Bitcoin Core from source code\", \"selecting release version\", id=\"compile-bitcoin-core-release\")))(((\"source code, compiling Bitcoin Core\", \"selecting release version\", id=\"source-code-compile-release\")))(((\"release version (Bitcoin Core), selecting\", id=\"release-select\")))(((\"selecting\", \"release version (Bitcoin Core)\", id=\"select-release\"))) the local copy will be synchronized with the\nmost recent code, which might be an unstable or beta version of Bitcoin.\nBefore compiling the code, select a specific version by checking out a\nrelease _tag_. This will synchronize the local copy with a specific\nsnapshot of the code repository identified by a keyword tag. Tags are\nused by the developers to mark specific releases of the code by version\nnumber. First, to find the available tags, we use the +git tag+ command:\n\n----\n$ git tag\nv0.1.5\nv0.1.6test1\nv0.10.0\n...\nv0.11.2\nv0.11.2rc1\nv0.12.0rc1\nv0.12.0rc2\n...\n----\n\nThe list of tags shows all the released versions of Bitcoin. By\nconvention, _release candidates_, which (((\"release candidates\")))are intended for testing, have\nthe suffix \"rc.\" Stable releases that can be run on production systems\nhave no suffix. From the preceding list, select the highest version\nrelease, which at the time of writing was v24.0.1. To synchronize the\nlocal code with this version, use the +git checkout+ command:\n\n----\n$ git checkout v24.0.1\nNote: switching to 'v24.0.1'.\n\nYou are in 'detached HEAD' state. You can look around, make experimental\nchanges and commit them, and you can discard any commits you make in this\nstate without impacting any branches by switching back to a branch.\n\nHEAD is now at b3f866a8d Merge bitcoin/bitcoin#26647: 24.0.1 final changes\n----\n\nYou can confirm you have the desired version \"checked out\" by(((\"Bitcoin Core\", \"compiling from source code\", \"selecting release version\", startref=\"bitcoin-core-compile-release\")))(((\"compiling Bitcoin Core from source code\", \"selecting release version\", startref=\"compile-bitcoin-core-release\")))(((\"source code, compiling Bitcoin Core\", \"selecting release version\", startref=\"source-code-compile-release\")))(((\"release version (Bitcoin Core), selecting\", startref=\"release-select\")))(((\"selecting\", \"release version (Bitcoin Core)\", startref=\"select-release\"))) issuing\nthe command +git status+:\n\n----\nHEAD detached at v24.0.1\nnothing to commit, working tree clean\n----\n\n==== Configuring the Bitcoin Core Build\n\nThe(((\"Bitcoin Core\", \"compiling from source code\", \"configuring build\", id=\"bitcoin-core-compile-configure\")))(((\"compiling Bitcoin Core from source code\", \"configuring build\", id=\"compile-bitcoin-core-configure\")))(((\"source code, compiling Bitcoin Core\", \"configuring build\", id=\"source-code-compile-configure\")))(((\"configuring\", \"Bitcoin Core build\", id=\"configure-build\"))) source code includes documentation, which\ncan be found in a number of files. Review the main documentation located\nin _README.md_ in the _bitcoin_ directory.\nIn this chapter, we will build the Bitcoin Core daemon\n(server), also known as +bitcoind+ on Linux (a Unix-like system). Review the instructions for\ncompiling the +bitcoind+ command-line client on your platform by reading\n_doc/build-unix.md_.  Alternative instructions can be found in\nthe _doc_ directory; for example, _build-windows.md_ for Windows\ninstructions.  As of this writing, instructions are available for\nAndroid, FreeBSD, NetBSD, OpenBSD, macOS (OSX), Unix, and Windows.\n\nCarefully review the build prerequisites, which are in the first part of\nthe build documentation. These are libraries that must be present on\nyour system before you can begin to compile Bitcoin. If these\nprerequisites are missing, the build process will fail with an error. If\nthis happens because you missed a prerequisite, you can install it and\nthen resume the build process from where you left off. Assuming the\nprerequisites are installed, you start the build process by generating a\nset of build scripts using the _autogen.sh_ script:\n\n----\n$ ./autogen.sh\nlibtoolize: putting auxiliary files in AC_CONFIG_AUX_DIR, 'build-aux'.\nlibtoolize: copying file 'build-aux/ltmain.sh'\nlibtoolize: putting macros in AC_CONFIG_MACRO_DIRS, 'build-aux/m4'.\n ...\nconfigure.ac:58: installing 'build-aux/missing'\nsrc/Makefile.am: installing 'build-aux/depcomp'\nparallel-tests: installing 'build-aux/test-driver'\n----\n\nThe _autogen.sh_ script creates a set of automatic configuration scripts\nthat will interrogate your system to discover the correct settings and\nensure you have all the necessary libraries to compile the code. The\nmost important of these is the +configure+ script that offers a number\nof different options to customize the build process. Use the\n+--help+ flag to see the various options:\n\n----\n$ ./configure --help\n`configure' configures Bitcoin Core 24.0.1 to adapt to many kinds of systems.\n\nUsage: ./configure [OPTION]... [VAR=VALUE]...\n\n...\nOptional Features:\n  --disable-option-checking  ignore unrecognized --enable/--with options\n  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)\n  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]\n  --enable-silent-rules   less verbose build output (undo: \"make V=1\")\n  --disable-silent-rules  verbose build output (undo: \"make V=0\")\n...\n----\n\nThe +configure+ script allows you to enable or disable certain features\nof +bitcoind+ through the use of the +--enable-FEATURE+ and\n+--disable-FEATURE+ flags, where pass:[<span\nclass=\"keep-together\"><code>FEATURE</code></span>] is replaced by the\nfeature name, as listed in the help output. In this chapter, we will\nbuild the +bitcoind+ client with all the default features. We won't be\nusing the configuration flags, but you should review them to understand\nwhat optional features are part of the client. If you are in an academic\nsetting, computer lab restrictions may require you to install\napplications in your home directory (e.g., using +--prefix=$HOME+).\n\nHere are some useful options that override the default behavior of the\n+configure+ script:\n\n++++\n<dl>\n<dt><code>--prefix=$HOME</code></dt>\n<dd><p>This overrides the default installation location (which is <em>/usr/local/</em>) for the resulting executable. Use <code>$HOME</code> to put everything in your home directory, or a different path.</p></dd>\n\n<dt><code>--disable-wallet</code></dt>\n<dd><p>This is used to disable the reference wallet implementation.</p></dd>\n\n<dt><code>--with-incompatible-bdb</code></dt>\n<dd><p>If you are building a wallet, allow the use of an incompatible version of the Berkeley DB library.</p></dd>\n\n<dt><code>--with-gui=no</code></dt>\n<dd><p>Don't build the graphical user interface, which requires the Qt library. This builds server and command-line Bitcoin Core only.</p></dd>\n</dl>\n++++\n\nNext, run the +configure+ script to automatically discover all the necessary libraries and create a customized build script for your system:\n\n----\n$ ./configure\nchecking for pkg-config... /usr/bin/pkg-config\nchecking pkg-config is at least version 0.9.0... yes\nchecking build system type... x86_64-pc-linux-gnu\nchecking host system type... x86_64-pc-linux-gnu\nchecking for a BSD-compatible install... /usr/bin/install -c\n...\n[many pages of configuration tests follow]\n...\n----\n\nIf all went well, the +configure+ command will end by creating the\ncustomized build scripts that will allow us to compile +bitcoind+. If\nthere are any missing libraries or errors, the +configure+ command will\nterminate with an error instead of creating the build scripts. If an\nerror occurs, it is most likely because of a missing or incompatible\nlibrary. Review the build documentation again and make sure you install\nthe missing prerequisites. Then run +configure+ again and see if that\nfixes the(((\"Bitcoin Core\", \"compiling from source code\", \"configuring build\", startref=\"bitcoin-core-compile-configure\")))(((\"compiling Bitcoin Core from source code\", \"configuring build\", startref=\"compile-bitcoin-core-configure\")))(((\"source code, compiling Bitcoin Core\", \"configuring build\", startref=\"source-code-compile-configure\")))(((\"configuring\", \"Bitcoin Core build\", startref=\"configure-build\"))) error.\n\n==== Building the Bitcoin Core Executables\n\nNext, you\nwill (((\"Bitcoin Core\", \"compiling from source code\", \"building executables\")))(((\"compiling Bitcoin Core from source code\", \"building executables\")))(((\"source code, compiling Bitcoin Core\", \"building executables\")))(((\"executables (Bitcoin Core), building\")))compile the source code, a process that can take up to an hour to\ncomplete, depending on the speed of your CPU and available memory.\nIf an error\noccurs, or the compilation process is interrupted, it can be resumed any\ntime by typing +make+ again. Type *+make+* to start compiling the\nexecutable application:\n\n----\n$ make\nMaking all in src\n  CXX      bitcoind-bitcoind.o\n  CXX      libbitcoin_node_a-addrdb.o\n  CXX      libbitcoin_node_a-addrman.o\n  CXX      libbitcoin_node_a-banman.o\n  CXX      libbitcoin_node_a-blockencodings.o\n  CXX      libbitcoin_node_a-blockfilter.o\n[... many more compilation messages follow ...]\n----\n\nOn a fast system with more than one CPU, you might want to set the\nnumber of parallel compile jobs. For instance, +make -j 2+ will use two\ncores if they are available. If all goes well, Bitcoin Core is now\ncompiled. You should run the unit test suite with +make check+ to ensure\nthe linked libraries are not broken in obvious ways. The final step is\nto install the various executables on your system using the +make\ninstall+ command. You may be prompted for your user password because\nthis step requires administrative privileges:\n\n----\n$ make check && sudo make install\nPassword:\nMaking install in src\n ../build-aux/install-sh -c -d '/usr/local/lib'\nlibtool: install: /usr/bin/install -c bitcoind /usr/local/bin/bitcoind\nlibtool: install: /usr/bin/install -c bitcoin-cli /usr/local/bin/bitcoin-cli\nlibtool: install: /usr/bin/install -c bitcoin-tx /usr/local/bin/bitcoin-tx\n...\n----\n\nThe default installation of +bitcoind+\nputs it in _/usr/local/bin_. You can confirm that Bitcoin Core is\ncorrectly installed by asking the system for the path of the\nexecutables, (((\"Bitcoin Core\", \"compiling from source code\", startref=\"bitcoin-core-compile\")))(((\"compiling Bitcoin Core from source code\", startref=\"compile-bitcoin-core\")))(((\"source code, compiling Bitcoin Core\", startref=\"source-code-compile\")))as follows:\n\n----\n$ which bitcoind\n/usr/local/bin/bitcoind\n\n$ which bitcoin-cli\n/usr/local/bin/bitcoin-cli\n----\n\n=== Running a Bitcoin Core Node\n\nBitcoin's (((\"Bitcoin Core\", \"nodes\", \"running\", id=\"bitcoin-core-nodes-running\")))(((\"nodes\", \"running\", id=\"nodes-running\")))(((\"running nodes\", id=\"running-nodes\")))peer-to-peer\nnetwork is composed of network \"nodes,\" run mostly by individuals and\nsome of the businesses that provide Bitcoin services. Those running\nBitcoin nodes have a direct and authoritative view of the Bitcoin\nblockchain, with a local copy of all the spendable bitcoins\nindependently validated by their own system. By running a node, you\ndon't have to rely on any third party to validate a transaction.\nAdditionally, by using a Bitcoin node to fully validate the transactions\nyou receive to your wallet, you contribute to the Bitcoin network and\nhelp make it more robust.\n\nRunning a node, however, requires downloading and processing over 500 GB\nof data initially and about 400 MB of Bitcoin transactions per day.\nThese figures are for 2023 and will likely increase over time.  If you\nshut down your node or get disconnected from the internet for several\ndays, your node will need to download the data that it missed.  For\nexample, if you close Bitcoin Core for 10 days, you will need to\ndownload approximately 4 GB the next time you start it.\n\nDepending on whether you choose to index all transactions and keep a\nfull copy of the blockchain, you may also need a lot of disk space--at\nleast 1 TB if you plan to run Bitcoin Core for several years.  By\ndefault, Bitcoin nodes also transmit transactions and blocks to other\nnodes (called \"peers\"), consuming upload internet bandwidth. If your\ninternet connection is limited, has a low data cap, or is metered\n(charged by the gigabit), you should probably not run a Bitcoin node on\nit, or run it in a way that constrains its bandwidth (see\n<<bitcoincorenode_config>>).  You may connect your node instead to an\nalternative network, such as a free satellite data provider like\nhttps://oreil.ly/cIwf3[Blockstream Satellite].\n\n[TIP]\n====\nBitcoin Core keeps a full\ncopy of the blockchain by default, with nearly every transaction that has ever\nbeen confirmed on the Bitcoin network since its inception in 2009. This\ndataset is hundreds of gigabytes in size and is downloaded incrementally\nover several hours or days, depending on the speed of your CPU and\ninternet connection. Bitcoin Core will not be able to process\ntransactions or update account balances until the full blockchain\ndataset is downloaded. Make sure you have enough disk space, bandwidth,\nand time to complete the initial synchronization. You can configure\nBitcoin Core to reduce the size of the blockchain by discarding old\nblocks, but it will still download the\nentire dataset.\n====\n\nDespite these resource requirements, thousands of people run Bitcoin\nnodes. Some are running on systems as simple as a Raspberry Pi (a $35\nUSD computer the size of a pack of cards).\n\n[role=\"less_space pagebreak-before\"]\nWhy would you want to run a node? Here are some of the most common\nreasons:\n\n- You do not want to rely on any third party to validate the\n  transactions you receive.\n\n- You do not want to disclose to third parties which transactions belong\n  to your wallet.\n\n- You are developing Bitcoin software and need to rely on a Bitcoin\n  node for programmable (API) access to the network and blockchain.\n\n- You are building applications that must validate transactions\n  according to Bitcoin's consensus rules. Typically, Bitcoin software\n  companies run several nodes.\n\n- You want to support Bitcoin. Running a node that you use to\n  validate the transactions you receive to your wallet makes the network\n  more robust.\n\nIf you're reading this book and interested in strong security, superior\nprivacy, or developing Bitcoin software, you should be running your (((\"Bitcoin Core\", \"nodes\", \"running\", startref=\"bitcoin-core-nodes-running\")))(((\"nodes\", \"running\", startref=\"nodes-running\")))(((\"running nodes\", startref=\"running-nodes\")))own\nnode.\n\n[[bitcoincorenode_config]]\n=== Configuring the Bitcoin Core Node\n\nBitcoin Core will(((\"Bitcoin Core\", \"nodes\", \"configuring\", id=\"bitcoin-core-nodes-configure\")))(((\"nodes\", \"configuring\", id=\"nodes-configure\")))(((\"configuring\", \"nodes\", id=\"configure-nodes\"))) look for a\nconfiguration file in its data directory on every start. In this section\nwe will examine the various configuration options and set up a\nconfiguration file. To locate the configuration file, run +bitcoind\n-printtoconsole+ in your terminal and look for the first couple of\nlines:\n\n----\n$ bitcoind -printtoconsole\n2023-01-28T03:21:42Z Bitcoin Core version v24.0.1\n2023-01-28T03:21:42Z Using the 'x86_shani(1way,2way)' SHA256 implementation\n2023-01-28T03:21:42Z Using RdSeed as an additional entropy source\n2023-01-28T03:21:42Z Using RdRand as an additional entropy source\n2023-01-28T03:21:42Z Default data directory /home/harding/.bitcoin\n2023-01-28T03:21:42Z Using data directory /home/harding/.bitcoin\n2023-01-28T03:21:42Z Config file: /home/harding/.bitcoin/bitcoin.conf\n...\n[a lot more debug output]\n...\n----\n\nYou can hit Ctrl-C to shut down the node once you determine the location\nof the config file. Usually the configuration file is inside the\n_.bitcoin_ data directory under your user's home directory. Open the\nconfiguration file in your preferred editor.\n\nBitcoin Core offers more than 100 configuration options that modify the\nbehavior of the network node, the storage of the blockchain, and many\nother aspects of its operation. To see a listing of these options, run\n+bitcoind  --help+:\n\n----\n$ bitcoind --help\nBitcoin Core version v24.0.1\n\nUsage:  bitcoind [options]                     Start Bitcoin Core\n\nOptions:\n\n  -?\n       Print this help message and exit\n\n  -alertnotify=<cmd>\n       Execute command when an alert is raised (%s in cmd is replaced by\n       message)\n...\n[many more options]\n----\n\nHere are some of\nthe most important options that you can set in the configuration file,\nor as command-line parameters to +bitcoind+:\n\n++alertnotify++:: Run (((\"alertnotify option (bitcoind option)\")))a specified command or script to send emergency alerts\nto the owner of this node.\n\n++conf++:: An (((\"conf option (bitcoind option)\")))alternative location for the configuration file. This only\nmakes sense as a command-line parameter to +bitcoind+, as it can't be\ninside the configuration file it refers to.\n\n++datadir++:: Select(((\"datadir option (bitcoind option)\"))) the directory and filesystem in which to put all the\nblockchain data. By default this is the _.bitcoin_ subdirectory of your\nhome directory. Depending on your configuration, this can use from about 10\nGB to almost 1 TB as of this writing, with the maximum size\nexpected to increase by several hundred gigabytes per year.\n\n++prune++:: Reduce the(((\"prune option (bitcoind option)\"))) blockchain disk space requirements to this many megabytes by\ndeleting old blocks. Use this on a resource-constrained node that can't\nfit the full blockchain.  Other parts of the system will use other disk\nspace that can't currently be pruned, so you will still need at least\nthe minimum amount of space mentioned in the +datadir+ option.\n\n++txindex++:: Maintain (((\"txindex option (bitcoind option)\")))an index of all transactions. This allows you to\nprogrammatically retrieve any transaction by its ID provided that the\nblock containing that transaction hasn't been pruned.\n\n[role=\"less_space pagebreak-before\"]\n++dbcache++:: The size(((\"dbcache option (bitcoind option)\"))) of the UTXO cache. The default is 450 mebibytes (MiB). Increase\nthis size on high-end hardware to read and write from your disk less\noften, or reduce the size on low-end hardware to save memory at the\nexpense of using your disk more frequently.\n\n++blocksonly++:: Minimize (((\"blocksonly option (bitcoind option)\")))your bandwidth usage by only accepting blocks of\nconfirmed transactions from your peers instead of relaying unconfirmed\ntransactions.\n\n++maxmempool++:: Limit (((\"maxmempool option (bitcoind option)\")))the transaction memory pool to this many megabytes.\nUse it to reduce memory use on memory-constrained nodes.\n\n[[txindex]]\n.Transaction Database Index and txindex Option\n****\nBy default,\nBitcoin Core builds(((\"txindex option (bitcoind option)\")))(((\"transactions\", \"building complete index\"))) a database containing _only_ the transactions\nrelated to the user's wallet. If you want to be able to access _any_\ntransaction with commands like +getrawtransaction+ (see\n<<exploring_and_decoding_transactions>>), you need to configure Bitcoin\nCore to build a complete transaction index, which can be achieved with\nthe +txindex+ option. Set +txindex=1+ in the Bitcoin Core configuration\nfile. If you don't set this option at first and later set it to full\nindexing, you need to\nwait for it to rebuild the index.\n****\n\n<<full_index_node>> shows how you might combine the preceding options\nwith a fully indexed node, running as an API backend for a bitcoin\napplication.\n\n[[full_index_node]]\n.Sample configuration of a full-index node\n====\n----\nalertnotify=myemailscript.sh \"Alert: %s\"\ndatadir=/lotsofspace/bitcoin\ntxindex=1\n----\n====\n\n<<constrained_resources>> shows a resource-constrained node running on a\nsmaller server.\n\n[[constrained_resources]]\n.Sample configuration of a resource-constrained system\n====\n----\nalertnotify=myemailscript.sh \"Alert: %s\"\nblocksonly=1\nprune=5000\ndbcache=150\nmaxmempool=150\n----\n====\n\nAfter you've edited the configuration file and set the options that best\nrepresent your needs, you can test +bitcoind+ with this configuration.\nRun Bitcoin Core with the option +printtoconsole+ to run in the\nforeground with output to the console:\n\n----\n$ bitcoind -printtoconsole\n2023-01-28T03:43:39Z Bitcoin Core version v24.0.1\n2023-01-28T03:43:39Z Using the 'x86_shani(1way,2way)' SHA256 implementation\n2023-01-28T03:43:39Z Using RdSeed as an additional entropy source\n2023-01-28T03:43:39Z Using RdRand as an additional entropy source\n2023-01-28T03:43:39Z Default data directory /home/harding/.bitcoin\n2023-01-28T03:43:39Z Using data directory /lotsofspace/bitcoin\n2023-01-28T03:43:39Z Config file: /home/harding/.bitcoin/bitcoin.conf\n2023-01-28T03:43:39Z Config file arg: [main] blockfilterindex=\"1\"\n2023-01-28T03:43:39Z Config file arg: [main] maxuploadtarget=\"1000\"\n2023-01-28T03:43:39Z Config file arg: [main] txindex=\"1\"\n2023-01-28T03:43:39Z Setting file arg: wallet = [\"msig0\"]\n2023-01-28T03:43:39Z Command-line arg: printtoconsole=\"\"\n2023-01-28T03:43:39Z Using at most 125 automatic connections \n2023-01-28T03:43:39Z Using 16 MiB out of 16 MiB requested for signature cache\n2023-01-28T03:43:39Z Using 16 MiB out of 16 MiB requested for script execution \n2023-01-28T03:43:39Z Script verification uses 3 additional threads\n2023-01-28T03:43:39Z scheduler thread start\n2023-01-28T03:43:39Z [http] creating work queue of depth 16\n2023-01-28T03:43:39Z Using random cookie authentication.\n2023-01-28T03:43:39Z Generated RPC cookie /lotsofspace/bitcoin/.cookie\n2023-01-28T03:43:39Z [http] starting 4 worker threads\n2023-01-28T03:43:39Z Using wallet directory /lotsofspace/bitcoin/wallets\n2023-01-28T03:43:39Z init message: Verifying wallet(s)…\n2023-01-28T03:43:39Z Using BerkeleyDB version Berkeley DB 4.8.30\n2023-01-28T03:43:39Z Using /16 prefix for IP bucketing\n2023-01-28T03:43:39Z init message: Loading P2P addresses…\n2023-01-28T03:43:39Z Loaded 63866 addresses from peers.dat  114ms\n[... more startup messages ...]\n----\n\nYou can hit Ctrl-C to interrupt the process once you are satisfied that\nit is loading the correct settings and running as you expect.\n\nTo run Bitcoin Core in the background as a process, start it with the\n+daemon+ option, as +bitcoind -daemon+.\n\nTo monitor the progress and runtime status of your Bitcoin node, start\nit in daemon mode and then use the command +bitcoin-cli getblockchaininfo+:\n\n----\n$ bitcoin-cli getblockchaininfo\n----\n\n[source,json]\n----\n{\n  \"chain\": \"main\",\n  \"blocks\": 0,\n  \"headers\": 83999,\n  \"bestblockhash\": \"[...]19d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\",\n  \"difficulty\": 1,\n  \"time\": 1673379796,\n  \"mediantime\": 1231006505,\n  \"verificationprogress\": 3.783041623201835e-09,\n  \"initialblockdownload\": true,\n  \"chainwork\": \"[...]000000000000000000000000000000000000000000000100010001\",\n  \"size_on_disk\": 89087,\n  \"pruned\": false,\n  \"warnings\": \"\"\n}\n----\n\nThis shows a node with a blockchain height of 0 blocks and 83,999\nheaders. The node first fetches the block headers from its peers in\norder to find the blockchain with the most proof of work and\nafterward continues to download the full blocks, validating them as it\ngoes.\n\nOnce you are happy with the configuration options you have selected, you\nshould add Bitcoin Core to the startup scripts in your operating system, so\nthat it runs continuously and restarts when the operating system\nrestarts. You will find a number of example startup scripts for various\noperating systems in Bitcoin Core's source directory under _contrib/init_ and\na _README.md_ file showing which system uses (((\"Bitcoin Core\", \"nodes\", \"configuring\", startref=\"bitcoin-core-nodes-configure\")))(((\"nodes\", \"configuring\", startref=\"nodes-configure\")))(((\"configuring\", \"nodes\", startref=\"configure-nodes\")))which script.\n\n=== Bitcoin Core API\n\nBitcoin Core\nimplements(((\"Bitcoin Core\", \"command-line interface\", \"help command\", id=\"bitcoin-core-command-help\")))(((\"command-line interface (Bitcoin Core)\", \"help command\", id=\"command-help\")))(((\"help command (Bitcoin Core)\", id=\"help\")))(((\"RPC commands\", see=\"command-line interface (Bitcoin Core)\")))(((\"bitcoin-cli command\", see=\"command-line interface (Bitcoin Core)\"))) a JSON-RPC interface that can also be accessed using\nthe command-line helper +bitcoin-cli+. The command line allows us to\nexperiment interactively with the capabilities that are also available\nprogrammatically via the API. To start, invoke the +help+ command to see a list of\nthe available Bitcoin Core RPC commands:\n\n[[bitcoind_commands]]\n\n----\n$ bitcoin-cli help\n+== Blockchain ==\ngetbestblockhash\ngetblock \"blockhash\" ( verbosity )\ngetblockchaininfo\n...\nwalletpassphrase \"passphrase\" timeout\nwalletpassphrasechange \"oldpassphrase\" \"newpassphrase\"\nwalletprocesspsbt \"psbt\" ( sign \"sighashtype\" bip32derivs finalize )\n----\n\nEach of these commands may take a number of parameters. To get\nadditional help, a detailed description, and information on the\nparameters, add the command name after +help+. For example, to see help\non the +getblockhash+ RPC command:\n\n----\n$ bitcoin-cli help getblockhash\ngetblockhash height\n\nReturns hash of block in best-block-chain at height provided.\n\nArguments:\n1. height    (numeric, required) The height index\n\nResult:\n\"hex\"    (string) The block hash\n\nExamples:\n> bitcoin-cli getblockhash 1000\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\": \"curltest\",\n  \"method\": \"getblockhash\", \n  \"params\": [1000]}' -H 'content-type: text/plain;' http://127.0.0.1:8332/\n----\n\nAt the end of the help information you will see two examples of the RPC\ncommand, using the +bitcoin-cli+ helper or the HTTP client +curl+. These\nexamples demonstrate how you might call the command. Copy the first\nexample and see the result:\n\n----\n$ bitcoin-cli getblockhash 1000\n00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\n----\n\nThe result is a block hash, which is described in more detail in the\nfollowing chapters. But for now, this command should return the same\nresult on your system, demonstrating that your Bitcoin Core node is\nrunning, is accepting commands, and has information about block 1,000 to\nreturn to you.\n\nIn the next sections we will demonstrate some very useful RPC commands\nand their expected (((\"Bitcoin Core\", \"command-line interface\", \"help command\", startref=\"bitcoin-core-command-help\")))(((\"command-line interface (Bitcoin Core)\", \"help command\", startref=\"command-help\")))(((\"help command (Bitcoin Core)\", startref=\"help\")))output.\n\n==== Getting Information on Bitcoin Core's Status\n\nBitcoin\nCore provides(((\"Bitcoin Core\", \"command-line interface\", \"status information\", id=\"bitcoin-core-command-status\")))(((\"command-line interface (Bitcoin Core)\", \"status information\", id=\"command-status\")))(((\"status information (Bitcoin Core)\", id=\"status-bitcoin-core\"))) status reports on different modules through the JSON-RPC\ninterface. The most important commands include +getblockchaininfo+,\n+getmempoo&#x2060;l&#x200b;info+, +getnetworkinfo+, and +getwalletinfo+.\n\nBitcoin's +getblockchaininfo+ RPC command was introduced earlier. The\n+getnetwor&#x2060;k&#x200b;info+ command displays basic information about the status of\nthe Bitcoin network node. Use +bitcoin-cli+ to run it:\n\n----\n$ bitcoin-cli getnetworkinfo\n----\n[source,json]\n----\n{\n  \"version\": 240001,\n  \"subversion\": \"/Satoshi:24.0.1/\",\n  \"protocolversion\": 70016,\n  \"localservices\": \"0000000000000409\",\n  \"localservicesnames\": [\n    \"NETWORK\",\n    \"WITNESS\",\n    \"NETWORK_LIMITED\"\n  ],\n  \"localrelay\": true,\n  \"timeoffset\": -1,\n  \"networkactive\": true,\n  \"connections\": 10,\n  \"connections_in\": 0,\n  \"connections_out\": 10,\n  \"networks\": [\n    \"...detailed information about all networks...\"\n  ],\n  \"relayfee\": 0.00001000,\n  \"incrementalfee\": 0.00001000,\n  \"localaddresses\": [\n  ],\n  \"warnings\": \"\"\n}\n----\n\nThe data is returned in JavaScript Object Notation (JSON), a format that\ncan easily be \"consumed\" by all programming languages but is also quite\nhuman-readable. Among this data we see the version numbers for the\nBitcoin Core software and Bitcoin protocol.  We see\nthe current number of connections and various information about the\nBitcoin network and the settings related to this node.\n\n[TIP]\n====\nIt will take some time, perhaps more than a day, for +bitcoind+\nto catch up to the current blockchain height as it downloads blocks from\nother Bitcoin nodes and validates every transaction in those\nblocks--almost a billion transactions as of this writing. You can check\nits progress using\n+getblockchaininfo+ to see the number of known blocks.  The examples in\nthe rest of this chapter assume you're at least at block 775,072.\nBecause the security of Bitcoin transactions depends on blocks, some of\nthe information in the following examples will change slightly depending\non how many blocks your (((\"Bitcoin Core\", \"command-line interface\", \"status information\", startref=\"bitcoin-core-command-status\")))(((\"command-line interface (Bitcoin Core)\", \"status information\", startref=\"command-status\")))(((\"status information (Bitcoin Core)\", startref=\"status-bitcoin-core\")))node has.\n====\n\n[[exploring_and_decoding_transactions]]\n==== Exploring and Decoding Transactions\n\nIn <<spending_bitcoin>>, Alice (((\"Bitcoin Core\", \"command-line interface\", \"exploring/decoding transactions\", id=\"bitcoin-core-command-transaction\")))(((\"command-line interface (Bitcoin Core)\", \"exploring/decoding transactions\", id=\"command-transaction\")))(((\"transactions\", \"exploring/decoding\", id=\"transactions-explore-decode\")))(((\"exploring\", \"transactions\", id=\"explore-transaction\")))(((\"decoding\", \"transactions\", id=\"decode-transaction\")))made a purchase from Bob's store. Her\ntransaction was recorded on the blockchain.\nLet's use the API to retrieve and examine that transaction by passing\nthe transaction ID (txid) as a parameter:\n\n[[alice_tx_serialized]]\n.Alice's serialized transaction\n----\n$ bitcoin-cli getrawtransaction 466200308696215bbc949d5141a49a41\\\n38ecdfdfaa2a8029c1f9bcecd1f96177\n\n01000000000101eb3ae38f27191aa5f3850dc9cad00492b88b72404f9da13569\n8679268041c54a0100000000ffffffff02204e0000000000002251203b41daba\n4c9ace578369740f15e5ec880c28279ee7f51b07dca69c7061e07068f8240100\n000000001600147752c165ea7be772b2c0acb7f4d6047ae6f4768e0141cf5efe\n2d8ef13ed0af21d4f4cb82422d6252d70324f6f4576b727b7d918e521c00b51b\ne739df2f899c49dc267c0ad280aca6dab0d2fa2b42a45182fc83e81713010000\n0000\n----\n\n[TIP]\n====\nA transaction ID (txid)\nis (((\"transaction IDs (txid)\")))not authoritative. Absence of a txid in the blockchain does not mean\nthe transaction was not processed. This is known as \"transaction\nmalleability,\" because transactions can be modified prior to\nconfirmation in a block, changing their txids.  After a transaction is\nincluded in a block, its txid cannot change unless there is a blockchain\nreorganization where that block is removed from the best blockchain.\nReorganizations are rare after a transaction has several confirmations.\n====\n\nThe command +getrawtransaction+ returns a serialized transaction in\nhexadecimal notation. To decode that, we use the +decoderawtransaction+\ncommand, passing the hex data as a parameter. You can copy the hex\nreturned by +getrawtransaction+ and paste it as a parameter to\n+decoderawtransaction+:\n\n++++\n<pre data-type=\"programlisting\">\n$ bitcoin-cli decoderawtransaction 01000000000101eb3ae38f27191aa5f3850dc9cad0\\\n0492b88b72404f9da135698679268041c54a0100000000ffffffff02204e00000000000022512\\\n03b41daba4c9ace578369740f15e5ec880c28279ee7f51b07dca69c7061e07068f82401000000\\\n00001600147752c165ea7be772b2c0acb7f4d6047ae6f4768e0141cf5efe2d8ef13ed0af21d4f\\\n4cb82422d6252d70324f6f4576b727b7d918e521c00b51be739df2f899c49dc267c0ad280aca6\\\ndab0d2fa2b42a45182fc83e817130100000000\n</pre>\n++++\n\n++++\n<pre data-type=\"programlisting\" data-code-language=\"json\">\n{\n  \"txid\": \"466200308696215bbc949d5141a49a4138ecdfdfaa2a8029c1f9bcecd1f96177\",\n  \"hash\": \"f7cdbc7cf8b910d35cc69962e791138624e4eae7901010a6da4c02e7d238cdac\",\n  \"version\": 1,\n  \"size\": 194,\n  \"vsize\": 143,\n  \"weight\": 569,\n  \"locktime\": 0,\n  \"vin\": [\n    {\n      \"txid\": \"4ac541802679866935a19d4f40728bb89204d0cac90d85f3a51a19...aeb\",\n      \"vout\": 1,\n      \"scriptSig\": {\n        \"asm\": \"\",\n        \"hex\": \"\"\n      },\n      \"txinwitness\": [\n        \"cf5efe2d8ef13ed0af21d4f4cb82422d6252d70324f6f4576b727b7d918e5...301\"\n      ],\n      \"sequence\": 4294967295\n    }\n  ],\n  \"vout\": [\n    {\n      \"value\": 0.00020000,\n      \"n\": 0,\n      \"scriptPubKey\": {\n        \"asm\": \"1 3b41daba4c9ace578369740f15e5ec880c28279ee7f51b07dca...068\",\n        \"desc\": \"rawtr(3b41daba4c9ace578369740f15e5ec880c28279ee7f51b...6ev\",\n        \"hex\": \"51203b41daba4c9ace578369740f15e5ec880c28279ee7f51b07d...068\",\n        \"address\": \"bc1p8dqa4wjvnt890qmfws83te0v3qxzsfu7ul63kp7u56w8q...5qn\",\n        \"type\": \"witness_v1_taproot\"\n      }\n    },\n    {\n      \"value\": 0.00075000,\n      \"n\": 1,\n      \"scriptPubKey\": {\n        \"asm\": \"0 7752c165ea7be772b2c0acb7f4d6047ae6f4768e\",\n        \"desc\": \"addr(bc1qwafvze0200nh9vkq4jmlf4sy0tn0ga5w0zpkpg)#qq404gts\",\n        \"hex\": \"00147752c165ea7be772b2c0acb7f4d6047ae6f4768e\",\n        \"address\": \"bc1qwafvze0200nh9vkq4jmlf4sy0tn0ga5w0zpkpg\",\n        \"type\": \"witness_v0_keyhash\"\n      }\n    }\n  ]\n}\n</pre>\n++++\n\nThe transaction decode shows all the components of this transaction,\nincluding the transaction inputs and outputs. In this case we see that\nthe transaction used one input and generated two outputs. The input to\nthis transaction was the output from a previously confirmed transaction\n(shown as the input +txid+). The two outputs correspond to the payment to\nBob and the change back to Alice.\n\nWe can further explore the blockchain by examining the previous\ntransaction referenced by its +txid+ in this transaction using the same\ncommands (e.g., [.keep-together]#+getrawtransaction+).# Jumping from transaction to\ntransaction, we can follow a chain of transactions back as the coins are\ntransmitted from one owner to the(((\"Bitcoin Core\", \"command-line interface\", \"exploring/decoding transactions\", startref=\"bitcoin-core-command-transaction\")))(((\"command-line interface (Bitcoin Core)\", \"exploring/decoding transactions\", startref=\"command-transaction\")))(((\"transactions\", \"exploring/decoding\", startref=\"transactions-explore-decode\")))(((\"exploring\", \"transactions\", startref=\"explore-transaction\")))(((\"decoding\", \"transactions\", startref=\"decode-transaction\"))) next.\n\n==== Exploring Blocks\n\nExploring\nblocks is(((\"Bitcoin Core\", \"command-line interface\", \"exploring blocks\", id=\"bitcoin-core-command-blocks\")))(((\"command-line interface (Bitcoin Core)\", \"exploring blocks\", id=\"command-blocks\")))(((\"blocks\", \"exploring\", id=\"blocks-explore\")))(((\"exploring\", \"blocks\", id=\"explore-blocks\"))) similar to exploring transactions. However, blocks can be\nreferenced either by the block _height_ or by the block _hash_. First,\nlet's find a block by its height.\nWe use the +getblockhash+ command, which takes the block height as the\nparameter and returns the block _header hash_ for that block:\n\n++++\n<pre data-type=\"programlisting\">\n$ bitcoin-cli getblockhash 123456\n0000000000002917ed80650c6174aac8dfc46f5fe36480aaef682ff6cd83c3ca\n</pre>\n++++\n\nNow that we know the header hash for our chosen block, we can\nquery that block. We use the +getblock+ command with the block hash as\nthe parameter:\n\n++++\n<pre data-type=\"programlisting\">\n$ bitcoin-cli getblock 0000000000002917ed80650c6174aac8dfc46f5fe36480aaef682f\\\nf6cd83c3ca\n</pre>\n++++\n\n++++\n<pre data-type=\"programlisting\" data-code-language=\"json\">\n{\n  \"hash\": \"0000000000002917ed80650c6174aac8dfc46f5fe36480aaef682ff6cd83c3ca\",\n  \"confirmations\": 651742,\n  \"height\": 123456,\n  \"version\": 1,\n  \"versionHex\": \"00000001\",\n  \"merkleroot\": \"0e60651a9934e8f0decd1c[...]48fca0cd1c84a21ddfde95033762d86c\",\n  \"time\": 1305200806,\n  \"mediantime\": 1305197900,\n  \"nonce\": 2436437219,\n  \"bits\": \"1a6a93b3\",\n  \"difficulty\": 157416.4018436489,\n  \"chainwork\": \"[...]00000000000000000000000000000000000000541788211ac227bc\",\n  \"nTx\": 13,\n  \"previousblockhash\": \"[...]60bc96a44724fd72daf9b92cf8ad00510b5224c6253ac40095\",\n  \"nextblockhash\": \"[...]00129f5f02be247070bf7334d3753e4ddee502780c2acaecec6d66\",\n  \"strippedsize\": 4179,\n  \"size\": 4179,\n  \"weight\": 16716,\n  \"tx\": [\n    \"5b75086dafeede555fc8f9a810d8b10df57c46f9f176ccc3dd8d2fa20edd685b\",\n    \"e3d0425ab346dd5b76f44c222a4bb5d16640a4247050ef82462ab17e229c83b4\",\n    \"137d247eca8b99dee58e1e9232014183a5c5a9e338001a0109df32794cdcc92e\",\n    \"5fd167f7b8c417e59106ef5acfe181b09d71b8353a61a55a2f01aa266af5412d\",\n    \"60925f1948b71f429d514ead7ae7391e0edf965bf5a60331398dae24c6964774\",\n    \"d4d5fc1529487527e9873256934dfb1e4cdcb39f4c0509577ca19bfad6c5d28f\",\n    \"7b29d65e5018c56a33652085dbb13f2df39a1a9942bfe1f7e78e97919a6bdea2\",\n    \"0b89e120efd0a4674c127a76ff5f7590ca304e6a064fbc51adffbd7ce3a3deef\",\n    \"603f2044da9656084174cfb5812feaf510f862d3addcf70cacce3dc55dab446e\",\n    \"9a4ed892b43a4df916a7a1213b78e83cd83f5695f635d535c94b2b65ffb144d3\",\n    \"dda726e3dad9504dce5098dfab5064ecd4a7650bfe854bb2606da3152b60e427\",\n    \"e46ea8b4d68719b65ead930f07f1f3804cb3701014f8e6d76c4bdbc390893b94\",\n    \"864a102aeedf53dd9b2baab4eeb898c5083fde6141113e0606b664c41fe15e1f\"\n  ]\n}\n</pre>\n++++\n\nThe +confirmations+ entry tells us the _depth_ of this block--how many\nblocks have been built on top of it, indicating the difficulty of\nchanging any of the transactions in this block.  The +height+ tells us\nhow many blocks preceeded this block.  We see the block's version, the\ntime it was created (according to its miner), the median time of the 11\nblocks that precede this block (a time measurement that's harder for\nminers to manipulate), and the size of the block in three different\nmeasurements (its legacy stripped size, its full size, and its size in\nweight units).  We also see some fields used for security and\nproof of work (merkle root, nonce, bits, difficulty, and chainwork);\nwe'll examine those (((\"Bitcoin Core\", \"command-line interface\", \"exploring blocks\", startref=\"bitcoin-core-command-blocks\")))(((\"command-line interface (Bitcoin Core)\", \"exploring blocks\", startref=\"command-blocks\")))(((\"blocks\", \"exploring\", startref=\"blocks-explore\")))(((\"exploring\", \"blocks\", startref=\"explore-blocks\")))in detail in <<mining>>.\n\n==== Using Bitcoin Core's Programmatic Interface\n\nThe\n+bitcoin-cli+ helper is (((\"Bitcoin Core\", \"command-line interface\", \"API access\", id=\"bitcoin-core-command-api\")))(((\"command-line interface (Bitcoin Core)\", \"API access\", id=\"command-api\")))(((\"API access\", id=\"api\")))very useful for exploring the Bitcoin Core API\nand testing functions. But the whole point of an API is to access functions programmatically. In this section we\nwill demonstrate accessing Bitcoin Core from another program.\n\nBitcoin Core's API is a JSON-RPC interface. JSON is a very convenient way to present data that\nboth humans and programs can easily read. RPC stands for remote\n[.keep-together]#procedure# call, which means that we are calling procedures (functions)\nthat are remote (on the Bitcoin Core node) via a network protocol. In\nthis case, the network protocol is HTTP.\n\nWhen we used the +bitcoin-cli+ command to get help on a command, it\nshowed us an example of using +curl+, the versatile command-line HTTP\nclient to construct one of these JSON-RPC calls:\n\n----\n$ curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\",\n  \"method\": \"getblockchaininfo\", \n  \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/\n----\n\nThis command shows that +curl+ submits an HTTP request to the local host\n(127.0.0.1), connecting to the default Bitcoin RPC port (8332), and\nsubmitting a  +jsonrpc+ request for the +getblockchaininfo+ method using\n+text/plain+ encoding.\n\nYou might notice that +curl+ will ask for credentials to be sent along\nwith the request. Bitcoin Core will create a random password on each\nstart and place it in the data directory under the name +.cookie+. The\n+bitcoin-cli+ helper can read this password file given the data\ndirectory. Similarly, you can copy the password and pass it to +curl+ (or\nany higher-level Bitcoin Core RPC wrappers), (((\"Bitcoin Core\", \"authentication\")))(((\"authentication\")))as seen in <<cookie_auth>>.\n\n[[cookie_auth]]\n.Using cookie-based authentication with Bitcoin Core\n====\n----\n$ cat .bitcoin/.cookie\n  __cookie__:17c9b71cef21b893e1a019f4bc071950c7942f49796ed061b274031b17b19cd0\n\n$ curl \n  --user __cookie__:17c9b71cef21b893e1a019f4bc071950c7942f49796ed061b274031b17b19cd0 \n  --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \n  \"method\": \"getblockchaininfo\", \n  \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/\n\n{\"result\":{\"chain\":\"main\",\"blocks\":799278,\"headers\":799278,\n\"bestblockhash\":\"000000000000000000018387c50988ec705a95d6f765b206b6629971e6978879\",\n\"difficulty\":53911173001054.59,\"time\":1689703111,\"mediantime\":1689701260,\n\"verificationprogress\":0.9999979206082515,\"initialblockdownload\":false,\n\"chainwork\":\"00000000000000000000000000000000000000004f3e111bf32bcb47f9dfad5b\",\n\"size_on_disk\":563894577967,\"pruned\":false,\"warnings\":\"\"},\"error\":null,\n\"id\":\"curltest\"}\n----\n====\n\nAlternatively, you can\ncreate a static password with the helper script provided in\n[.keep-together]#_./share/rpcauth/rpcauth.py_# in Bitcoin Core's source directory.\n\nIf you're implementing a JSON-RPC call in your own program, you can use\na generic HTTP library to construct the call, similar to what is shown\nin the preceding +curl+ example.\n\nHowever, there (((\"Bitcoin Core\", \"wrapper libraries\")))(((\"wrapper libraries\")))are libraries in most popular programming languages that\n\"wrap\" the Bitcoin Core API in a way that makes this a lot simpler. We\nwill use the +python-bitcoinlib+ library to simplify API access.\nThis library is not part of the Bitcoin Core project and needs to be\ninstalled the usual way you install Python libraries.\nRemember, this requires you to have a running Bitcoin Core instance,\nwhich will be used to make JSON-RPC calls.\n\nThe Python script in <<rpc_example>> makes a simple +getblockchaininfo+\ncall and prints the +block+ parameter from the data returned by Bitcoin\nCore.\n\n[[rpc_example]]\n.Running +getblockchaininfo+ via Bitcoin Core's JSON-RPC API\n====\n[source,python]\n----\ninclude::code/rpc_example.py[]\n----\n====\n\nRunning it gives us the following result:\n\n----\n$ python rpc_example.py\n773973\n----\n\nIt tells us how many blocks our local Bitcoin Core node has in its\nblockchain. Not a spectacular result, but it demonstrates the basic use\nof the library as a simplified interface to Bitcoin Core's JSON-RPC API.\n\nNext, let's(((\"Bitcoin Core\", \"command-line interface\", \"exploring/decoding transactions\", id=\"bitcoin-core-command-transaction2\")))(((\"command-line interface (Bitcoin Core)\", \"exploring/decoding transactions\", id=\"command-transaction2\")))(((\"transactions\", \"exploring/decoding\", id=\"transactions-explore-decode2\")))(((\"exploring\", \"transactions\", id=\"explore-transaction2\")))(((\"decoding\", \"transactions\", id=\"decode-transaction2\"))) use the +getrawtransaction+ and +decodetransaction+ calls to\nretrieve the details of Alice's payment to Bob. In <<rpc_transaction>>,\nwe retrieve Alice's transaction and list the transaction's outputs. For\neach output, we show the recipient address and value. As a reminder,\nAlice's transaction had one output paying Bob and one output for\nchange back to Alice.\n\n[[rpc_transaction]]\n.Retrieving a transaction and iterating its outputs\n====\n[source,python]\n----\ninclude::code/rpc_transaction.py[]\n----\n====\n\nRunning this code, we get:\n\n----\n$ python rpc_transaction.py\nbc1p8dqa4wjvnt890qmfws83te0v3qxzsfu7ul63kp7u56w8qc0qwp5qv995qn 0.00020000\nbc1qwafvze0200nh9vkq4jmlf4sy0tn0ga5w0zpkpg 0.00075000\n----\n\nBoth of the (((\"Bitcoin Core\", \"command-line interface\", \"exploring/decoding transactions\", startref=\"bitcoin-core-command-transaction2\")))(((\"command-line interface (Bitcoin Core)\", \"exploring/decoding transactions\", startref=\"command-transaction2\")))(((\"transactions\", \"exploring/decoding\", startref=\"transactions-explore-decode2\")))(((\"exploring\", \"transactions\", startref=\"explore-transaction2\")))(((\"decoding\", \"transactions\", startref=\"decode-transaction2\")))preceding examples are rather simple. You don't really need\na program to run them; you could just as easily use the +bitcoin-cli+\nhelper. The next example, however, requires several hundred RPC calls\nand more clearly demonstrates the use of a programmatic interface.\n\nIn <<rpc_block>>, we first (((\"Bitcoin Core\", \"command-line interface\", \"exploring blocks\", id=\"bitcoin-core-command-blocks2\")))(((\"command-line interface (Bitcoin Core)\", \"exploring blocks\", id=\"command-blocks2\")))(((\"blocks\", \"exploring\", id=\"blocks-explore2\")))(((\"exploring\", \"blocks\", id=\"explore-blocks2\")))retrieve a block, then retrieve each of\nthe transactions within it by reference to each transaction ID. Next,\nwe iterate through each of the transaction's outputs and add up the\nvalue.\n\n[[rpc_block]]\n.Retrieving a block and adding all the transaction outputs\n====\n[source,python]\n----\ninclude::code/rpc_block.py[]\n----\n====\n\nRunning this code, we get:\n\n----\n$ python rpc_block.py\n\nTotal value in block:  10322.07722534\n----\n\nOur example code calculates that the total value transacted in this\nblock is 10,322.07722534 BTC (including 25 BTC reward and 0.0909 BTC in\nfees). Compare that to the amount reported by a block explorer site by\nsearching for the block hash or height. Some block explorers report the\ntotal value excluding the reward and excluding the fees. See if you can\nspot the (((\"Bitcoin Core\", \"command-line interface\", \"API access\", startref=\"bitcoin-core-command-api\")))(((\"command-line interface (Bitcoin Core)\", \"API access\", startref=\"command-api\")))(((\"API access\", startref=\"api\")))(((\"Bitcoin Core\", \"command-line interface\", \"exploring blocks\", startref=\"bitcoin-core-command-blocks2\")))(((\"command-line interface (Bitcoin Core)\", \"exploring blocks\", startref=\"command-blocks2\")))(((\"blocks\", \"exploring\", startref=\"blocks-explore2\")))(((\"exploring\", \"blocks\", startref=\"explore-blocks2\")))difference.\n\n[[alt_libraries]]\n=== Alternative Clients, Libraries, and Toolkits\n\nThere\nare many alternative clients, libraries, toolkits, and even full-node\nimplementations in the Bitcoin ecosystem. These are implemented in a\nvariety of programming languages, offering programmers native interfaces\nin their preferred language.\n\nThe following sections list some of the best libraries, clients, and\ntoolkits, organized by programming languages.\n\n==== C/C++\nhttps://oreil.ly/BdOwl[Bitcoin Core] :: The reference(((\"C/C++ toolkits\")))(((\"Bitcoin Core\"))) implementation of Bitcoin\n\n==== JavaScript\nhttps://bcoin.io[bcoin]:: A modular(((\"JavaScript toolkits\")))(((\"bcoin\")))(((\"Bitcore\"))) and scalable full-node implementation with API\nhttps://bitcore.io[Bitcore] :: Full node, API, and library by Bitpay\nhttps://oreil.ly/4iqf2[BitcoinJS] :: A pure JavaScript Bitcoin library for node.js and browsers\n\n==== Java\nhttps://bitcoinj.github.io[bitcoinj]:: A (((\"Java toolkits\")))(((\"bitcoinj\")))Java full-node client library\n\n==== Python\nhttps://oreil.ly/xn_rg[python-bitcoinlib]::  A (((\"Python toolkits\")))(((\"python-bitcoinlib\")))(((\"pycoin\")))Python bitcoin library, consensus library, and node by Peter Todd\nhttps://oreil.ly/wcpXP[pycoin]:: A Python bitcoin library by Richard Kiss\n\n==== Go\nhttps://oreil.ly/h5MEI[btcd]:: A (((\"Go toolkits\")))(((\"btcd\")))Go language, full-node Bitcoin client\n\n==== Rust\nhttps://oreil.ly/me6gf[rust-bitcoin]:: Rust (((\"Rust toolkits\")))(((\"rust-bitcoin\")))bitcoin library for serialization, parsing, and API calls\n\n==== Scala\nhttps://bitcoin-s.org[bitcoin-s]:: A (((\"Scala toolkits\")))(((\"bitcoin-s\")))Bitcoin implementation in Scala\n\n==== C#\nhttps://oreil.ly/Qfjgq[NBitcoin]:: Comprehensive(((\"C# toolkits\")))(((\"NBitcoin\"))) bitcoin library for the .NET framework\n\nMany more libraries exist in a variety of other programming languages,\nand more are created all the time.\n\nIf you followed the instructions in this chapter, you now have Bitcoin\nCore running and have begun exploring the network and blockchain using\nyour own full node.  From now on you can independently use software you\ncontrol—on a computer you control—to verify that any bitcoins you receive\nfollow every rule in the Bitcoin system without having to trust any\noutside authority.  In the coming chapters, we'll learn more about the\nrules of the system and how your node and your wallet use them to secure\nyour money, protect your privacy, and make spending and receiving\n[.keep-together]#convenient.#\n"
        },
        {
          "name": "ch04_keys.adoc",
          "type": "blob",
          "size": 83.4189453125,
          "content": "[[ch04_keys_addresses]]\n== Keys and Addresses\n\nAlice wants to pay Bob, but the thousands of Bitcoin full nodes who\nwill verify her transaction don't know who Alice or Bob are--and we want\nto keep it that way to protect their privacy.  Alice needs to\ncommunicate that Bob should receive some of her bitcoins without tying\nany aspect of that transaction to Bob's real-world identity or to other\nBitcoin payments that Bob receives.  The method Alice uses must ensure\nthat only Bob can further spend the bitcoins he receives.\n\nThe original Bitcoin paper describes a very simple scheme for achieving\nthose goals, shown in <<pay-to-pure-pubkey>>.  \n\n[[pay-to-pure-pubkey]]\n.Transaction chain from original Bitcoin paper.\nimage::images/mbc3_aain01.png[\"Transaction chain from original Bitcoin paper\"]\n\nA receiver like Bob\naccepts bitcoins to a public key in a transaction that is signed by the\nspender (like Alice).  The bitcoins that Alice is spending had been\npreviously received to one of her public keys, and she uses the\ncorresponding private key to generate her signature.  Full nodes can\nverify that Alice's signature commits to the output of a hash function\nthat itself commits to Bob's public key and other transaction details.\n\nWe'll examine public keys, private keys, signatures, and hash functions\nin this chapter, and then use all of them together to describe\nthe addresses used by modern Bitcoin software.\n\n=== Public Key Cryptography\n\nPublic (((\"public key cryptography\", id=\"pub-key\")))key\ncryptography was invented in the 1970s and is a mathematical foundation\nfor modern computer and information security.\n\nSince the invention of public key cryptography, several suitable\nmathematical functions, such as prime number exponentiation and elliptic\ncurve multiplication, have been discovered. These mathematical functions\nare easy to calculate in\none direction and infeasible to calculate in the opposite direction\nusing the computers and algorithms available today.\nBased on these mathematical functions, cryptography enables the creation\nof unforgeable digital signatures. Bitcoin uses\nelliptic curve addition and multiplication as the basis for its cryptography.\n\nIn Bitcoin, we can use public key cryptography to create a (((\"key pairs\", id=\"key-pair\")))(((\"public keys\", \"purpose of\")))(((\"private keys\", \"purpose of\")))key pair that\ncontrols access to bitcoins. The key pair consists of a private key\nand a public key derived from the private key. The public key is used to\nreceive funds, and the private key is used to sign transactions to spend\nthe funds.\n\nThere is a mathematical relationship between the public and the private\nkey that allows the private key to be used to generate signatures on\nmessages. These signatures can be validated against the public key without\nrevealing the private key.\n\n[TIP]\n====\nIn some wallet\nimplementations, the private and public keys are stored together as a\n_key pair_ for convenience. However, the public key can be calculated\nfrom the private key, so storing only the private key is also possible.\n====\n\nA Bitcoin wallet contains a collection of key\npairs, each consisting of a private key and a public key. The private\nkey (_k_) is a number, usually derived from a number picked at random.\nFrom the private key, we\nuse elliptic curve multiplication, a one-way cryptographic function, to\ngenerate a public key (_K_).\n\n[role=\"less_space pagebreak-before\"]\n.Why Use Asymmetric Cryptography (Public/Private Keys)?\n****\nWhy is (((\"asymmetric cryptography\", see=\"public key cryptography\")))(((\"public key cryptography\", \"purpose in Bitcoin\")))(((\"digital signatures\")))asymmetric\ncryptography used in Bitcoin? It's not used to \"encrypt\" (make secret)\nthe transactions. Rather, a useful property of asymmetric cryptography\nis the ability to generate _digital signatures_. A private key can be\napplied to a transaction to produce a\nnumerical signature. This signature can only be produced by someone with\nknowledge of the private key. However, anyone with access to the public\nkey and the transaction can use them to _verify_ the\nsignature. This useful property of asymmetric cryptography makes it\npossible for anyone to verify every signature on every transaction,\nwhile ensuring that only the owners of private keys can produce valid\nsignatures.\n****\n\n[[private_keys]]\n==== Private Keys\n\nA\nprivate (((\"private keys\", \"generating\", id=\"private-key-generate\")))key is simply a number, picked at random.  Control\nover the private key is the root of user control over all funds\nassociated with the corresponding Bitcoin public key. The private key is\nused to create signatures that are used to spend bitcoins by proving\ncontrol of funds used in a transaction. The private key must remain\nsecret at all times because revealing it to third parties is equivalent\nto giving them control over the bitcoins secured by that key. The private\nkey must also be backed up and protected from accidental loss because\nif it's lost, it cannot be recovered and the funds secured by it are\nforever lost too.\n\n[TIP]\n====\nA Bitcoin private key is just a number. You can pick your private keys\nrandomly using just a coin, pencil, and paper: toss a coin 256 times and\nyou have the binary digits of a random private key you can use in a\nBitcoin wallet. The public key can then be generated from the private\nkey.  Be careful, though, as any process that's less than completely\nrandom can significantly reduce the security of your private key and the\nbitcoins it controls.\n====\n\nThe first and most important step in generating keys is to find a secure\nsource of randomness (which computer scientists (((\"entropy\")))call _entropy_). Creating a Bitcoin key is almost\nthe same as \"Pick a number between 1 and 2^256^.\" The exact method you\nuse to pick that number does not matter as long as it is not predictable\nor repeatable. Bitcoin software uses cryptographically secure random\nnumber generators to produce 256 bits of entropy.\n\n[role=\"less_space pagebreak-before\"]\nMore precisely, the private key can be any number between 0 and _n_ -\n1 inclusive, where _n_ is a constant (_n_ = 1.1578 × 10^77^, slightly less\nthan 2^256^) defined as the order of the elliptic curve used in Bitcoin\n(see <<elliptic_curve>>). To create such a key, we randomly pick a\n256-bit number and check that it is less than _n_. In programming terms,\nthis is usually achieved by feeding a larger string of random bits,\ncollected from a cryptographically secure source of randomness, into the\nSHA256 hash algorithm, which will conveniently produce a 256-bit value\nthat can be interpreted as a number.\nIf the result is less than _n_, we have a suitable private key.\nOtherwise, we simply try again with another random number.\n\n[WARNING]\n====\nDo not write your own code to create a random\nnumber or use a \"simple\" random number generator offered by your\nprogramming language. Use a cryptographically secure pseudorandom number\ngenerator (CSPRNG) with a seed from a source of sufficient entropy.\nStudy the documentation of the random number generator library you\nchoose to make sure it is cryptographically secure. Correct\nimplementation of the CSPRNG is critical to the security of the keys.\n====\n\nThe following is a randomly generated private key (_k_) shown in\nhexadecimal format (256 bits shown as 64 hexadecimal digits, each 4\nbits):\n\n----\n1E99423A4ED27608A15A2616A2B0E9E52CED330AC530EDCC32C8FFC6A526AEDD\n----\n\n[TIP]\n====\nThe size of Bitcoin's private key space (2^256^) is an unfathomably\nlarge number. It is approximately 10^77^ in decimal. For comparison, the\nvisible universe is estimated to(((\"private keys\", \"generating\", startref=\"private-key-generate\"))) contain 10^80^ atoms.\n====\n\n[[elliptic_curve]]\n==== Elliptic Curve Cryptography Explained\n\nElliptic curve cryptography (ECC) is(((\"public key cryptography\", \"elliptic curve cryptography as\", id=\"pub-key-ecc\")))(((\"elliptic curve cryptography (ECC)\", id=\"ecc\"))) a type of asymmetric\nor public key cryptography based on the discrete logarithm problem as\nexpressed by addition and multiplication on the points of an elliptic\ncurve.\n\n<<ecc-curve>> is an example of an elliptic curve, similar to that used\nby Bitcoin.\n\n[[ecc-curve]]\n[role=\"width-50\"]\n.An elliptic curve.\nimage::images/mbc3_0402.png[\"ecc-curve\"]\n\nBitcoin uses a specific elliptic curve and set of mathematical\nconstants, as defined in a standard called +secp256k1+, established by\nthe National Institute of Standards and Technology (NIST). The\n+secp256k1+ curve is defined by the following function, which produces\nan elliptic curve:\n\n[latexmath]\n++++\n\\begin{equation}\n{y^2 = (x^3 + 7)}~\\text{over}~(\\mathbb{F}_p)\n\\end{equation}\n++++\n\nor\n\n[latexmath]\n++++\n\\begin{equation}\n{y^2 \\mod p = (x^3 + 7) \\mod p}\n\\end{equation}\n++++\n\nThe _mod p_ (modulo prime number _p_) indicates that this curve is over a\nfinite field of prime order _p_, also written as latexmath:[\\(\n\\mathbb{F}_p\\)], where _p_ = 2^256^ – 2^32^ – 2^9^ – 2^8^ – 2^7^ – 2^6^ –\n2^4^ – 1, a very large prime number.\n\nBecause this curve is defined over a finite field of prime order instead\nof over the real numbers, it looks like a pattern of dots scattered in\ntwo dimensions, which makes it difficult to visualize. However, the math\nis identical to that of an elliptic curve over real numbers. As an\nexample, <<ecc-over-F17-math>> shows the same elliptic curve over a much\nsmaller finite field of prime order 17, showing a pattern of dots on a\ngrid. The +secp256k1+ Bitcoin elliptic curve can be thought of as a much\nmore complex pattern of dots on a unfathomably large grid.\n\n[[ecc-over-F17-math]]\n.Elliptic curve cryptography: visualizing an elliptic curve over F(p), with p=17.\nimage::images/mbc3_0403.png[\"ecc-over-F17-math\"]\n\nSo, for example, the following is a point P with coordinates (x, y) that\nis a point on the +secp256k1+ curve:\n\n[source, python]\n----\nP = \n(55066263022277343669578718895168534326250603453777594175500187360389116729240,\n32670510020758816978083085130507043184471273380659243275938904335757337482424)\n----\n\n<<example_4_1>> shows how you can check this yourself using Python.\n\n[[example_4_1]]\n.Using Python to confirm that this point is on the elliptic curve\n====\n[source, pycon]\n----\nPython 3.10.6 (main, Nov 14 2022, 16:10:14) [GCC 11.3.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n> p = 115792089237316195423570985008687907853269984665640564039457584007908834671663\n> x = 55066263022277343669578718895168534326250603453777594175500187360389116729240\n> y = 32670510020758816978083085130507043184471273380659243275938904335757337482424\n> (x ** 3 + 7 - y**2) % p\n0\n----\n====\n\n[role=\"less_space pagebreak-before\"]\nIn elliptic curve math, there is a point called the \"point at infinity,\"\nwhich roughly corresponds to the role of zero in addition. On computers,\nit's sometimes represented by x = y = 0 (which doesn't satisfy the\nelliptic curve equation, but it's an easy separate case that can be\nchecked).\n\nThere is also a pass:[+] operator, called \"addition,\" which has some\nproperties similar to the traditional addition of real numbers that\ngradeschool children learn. Given two points P~1~ and P~2~ on the\nelliptic curve, there is a third point P~3~ = P~1~ + P~2~, also on the\nelliptic curve.\n\nGeometrically, this third point P~3~ is calculated by drawing a line\nbetween P~1~ and P~2~. This line will intersect the elliptic curve in\nexactly one additional place. Call this point P~3~' = (x, y). Then\nreflect in the x-axis to get P~3~ = (x, –y).\n\nThere are a couple of special cases that explain the need for the \"point\nat infinity.\"\n\nIf P~1~ and P~2~ are the same point, the line \"between\" P~1~ and P~2~\nshould extend to be the tangent on the curve at this point P~1~. This\ntangent will intersect the curve in exactly one new point. You can use\ntechniques from calculus to determine the slope of the tangent line.\nThese techniques curiously work, even though we are restricting our\ninterest to points on the curve with two integer coordinates!\n\nIn some cases (i.e., if P~1~ and P~2~ have the same x values but\ndifferent y values), the tangent line will be exactly vertical, in which\ncase P~3~ = \"point at infinity.\"\n\nIf P~1~ is the \"point at infinity,\" then P~1~ + P~2~ = P~2~. Similarly,\nif P~2~ is the point at infinity, then P~1~ + P~2~ = P~1~. This shows\nhow the point at infinity plays the role of zero.\n\nIt turns out that pass:[+] is associative, which means that (A pass:[+]\nB) pass:[+] C = A pass:[+] (B pass:[+] C). That means we can write A\npass:[+] B pass:[+] C without parentheses and without ambiguity.\n\nNow that we have defined addition, we can define multiplication in the\nstandard way that extends addition. For a point P on the elliptic curve,\nif k is a whole number, then kP = P + P + P + ... + P (k times). Note\nthat k is sometimes confusingly called an \"exponent\" in (((\"public key cryptography\", \"elliptic curve cryptography as\", startref=\"pub-key-ecc\")))(((\"elliptic curve cryptography (ECC)\", startref=\"ecc\")))this case.\n\n[[public_key_derivation]]\n==== Public Keys\n\nThe (((\"public keys\", \"generating\", id=\"public-key-generate\")))(((\"elliptic curve multiplication\", id=\"elliptic-multiply\")))public key is calculated from\nthe private key using elliptic curve multiplication, which is\nirreversible: _K_ = _k_ × _G_, where _k_ is the private key, _G_ is a\nconstant point called the _generator point_, and _K_ is the resulting\npublic key. The reverse operation, known as \"finding the discrete\nlogarithm\"—calculating _k_ if you know __K__—is as difficult as trying\nall possible values of _k_ (i.e., a brute-force search). Before we\ndemonstrate how to generate a public key from a private key, let's look\nat elliptic curve cryptography in a bit more detail.\n\n[TIP]\n====\nElliptic curve multiplication is a type of function that cryptographers\ncall a \"trap door\" function: it is easy to do in one direction\n(multiplication) and impossible to do in the reverse direction\n(division). Someone with a private key can easily create the public\nkey and then share it with the world knowing that no one can reverse the\nfunction and calculate the private key from the public key. This\nmathematical trick becomes the basis for unforgeable and secure digital\nsignatures that prove control over bitcoin funds.\n====\n\nStarting with a private key in the\nform of a randomly generated number _k_, we multiply it by a\npredetermined point on the curve called the _generator point_ _G_ to\nproduce another point somewhere else on the curve, which is the\ncorresponding public key _K_. The generator point is specified as part\nof the +secp256k1+ standard and is always the same for all keys in\nbitcoin:\n\n[latexmath]\n++++\n\\begin{equation}\n{K = k \\times G}\n\\end{equation}\n++++\n\nwhere _k_ is the private key, _G_ is the generator point, and _K_ is the\nresulting public key, a point on the curve. Because the generator point\nis always the same for all Bitcoin users, a private key _k_ multiplied\nwith _G_ will always result in the same public key _K_. The relationship\nbetween _k_ and _K_ is fixed but can only be calculated in one\ndirection, from _k_ to _K_. That's why a Bitcoin public key (_K_) can be\nshared with anyone and does not reveal the user's private key (_k_).\n\n[TIP]\n====\nA private key can be converted into a public key, but a public key\ncannot be converted back into a private key because the math only works\none way.\n====\n\nImplementing the elliptic curve multiplication, we take the private key\n_k_ generated previously and multiply it with the generator point _G_ to\nfind the public key _K_:\n\n[source, python]\n----\nK = 1E99423A4ED27608A15A2616A2B0E9E52CED330AC530EDCC32C8FFC6A526AEDD × G\n----\n\nPublic key _K_ is defined as a point _K_ = (_x_, _y_):\n\n[latexmath]\n++++\n\\begin{equation}\nK = (x, y)\n\\end{equation}\n++++\n\n\nwhere,\n\n----\nx = F028892BAD7ED57D2FB57BF33081D5CFCF6F9ED3D3D7F159C2E2FFF579DC341A\ny = 07CF33DA18BD734C600B96A72BBC4749D5141C90EC8AC328AE52DDFE2E505BDB\n----\n\n\n\nTo visualize multiplication of a point with an integer, we will use the\nsimpler elliptic curve over real numbers&#x2014;remember, the math is\nthe same. Our goal is to find the multiple _kG_ of the generator point\n_G_, which is the same as adding _G_ to itself, _k_ times in a row. In\nelliptic curves, adding a point to itself is the equivalent of drawing a\ntangent line on the point and finding where it intersects the curve\nagain, then reflecting that point on the x-axis.\n\n<<ecc_illustrated>> shows the process for deriving _G_, _2G_, _4G_, as a\ngeometric operation on the curve.\n\n[TIP]\n====\nMany Bitcoin implementations use\nthe https://oreil.ly/wD60m[libsecp256k1 cryptographic\nlibrary] to do the elliptic curve(((\"public keys\", \"generating\", startref=\"public-key-generate\")))(((\"elliptic curve multiplication\", startref=\"elliptic-multiply\"))) math.\n====\n\n[[ecc_illustrated]]\n.Elliptic curve cryptography: visualizing the multiplication of a point G by an integer k on an elliptic curve.\nimage::images/mbc3_0404.png[\"ecc_illustrated\"]\n\n=== Output and Input Scripts\n\nAlthough(((\"public key cryptography\", \"input/output scripts\", id=\"pub-key-input-output\")))(((\"input scripts\", id=\"input-script\")))(((\"output scripts\", id=\"output-script\")))(((\"scripts\", \"input/output\", id=\"script-input-output\"))) the illustration from the original Bitcoin paper, <<pay-to-pure-pubkey>>,\nshows public keys (pubkeys) and signatures (sigs) being used directly,\nthe first version of Bitcoin instead had payments sent to a field called\n_output script_ and had spends of those bitcoins authorized by a field called _input script_.\nThese fields allow additional operations to be performed in addition to\n(or instead of) verifying that a signature corresponds to a public key.\nFor example, an output script can contain two public keys and require two\ncorresponding signatures be placed in the spending input script.\n\nLater, in <<tx_script>>, we'll learn about scripts in detail.  For now,\nall we need to understand is that bitcoins are received to an\noutput script that acts like a public key, and bitcoin spending is\nauthorized by an input script that acts like a (((\"public key cryptography\", \"input/output scripts\", startref=\"pub-key-input-output\")))(((\"input scripts\", startref=\"input-script\")))(((\"output scripts\", startref=\"output-script\")))(((\"scripts\", \"input/output\", startref=\"script-input-output\")))signature.\n\n[[p2pk]]\n=== IP Addresses: The Original Address for Bitcoin (P2PK)\n\nWe've (((\"public key cryptography\", \"IP address payments and\", id=\"pub-key-ipaddress\")))(((\"IP addresses for Bitcoin payments\", id=\"ipaddress-payment\")))(((\"payments\", \"via IP addresses\", id=\"payment-ipaddress\")))(((\"P2PK (pay to public key)\", id=\"p2pk-ch4\")))(((\"addresses\", \"P2PK (pay to public key)\", id=\"address-p2pk-ch4\")))established that Alice can pay Bob by assigning some of her\nbitcoins to one of Bob's public keys.  But how does Alice get one of\nBob's public keys?  Bob could just give her a copy, but let's look again\nat the public key we worked with in <<public_key_derivation>>.  Notice\nthat it's quite long.  Imagine Bob trying to read that to Alice over the\nphone:\n\n----\nx = F028892BAD7ED57D2FB57BF33081D5CFCF6F9ED3D3D7F159C2E2FFF579DC341A\ny = 07CF33DA18BD734C600B96A72BBC4749D5141C90EC8AC328AE52DDFE2E505BDB\n----\n\n\nInstead of direct public key entry, the earliest version of Bitcoin\nsoftware allowed a spender to enter the receiver's IP address, as shown in <<bitcoin_01_send>>.  This\nfeature was later removed--there are many problems\nwith using IP addresses--but a quick description of it will help us\nbetter understand why certain features may have been added to the\nBitcoin protocol.\n\n[[bitcoin_01_send]]\n.Early send screen for Bitcoin via https://oreil.ly/IDV1a[The Internet Archive].\nimage::images/mbc3_0405.png[\"Early Bitcoin send screen\"]\n\nIf Alice entered Bob's IP address in Bitcoin 0.1, her full node would\nestablish a connection with his full node and receive a new public key\nfrom Bob's wallet that his node had never previously given anyone.  This\nbeing a new public key was important to ensure that different\ntransactions paying Bob couldn't be connected together by someone\nlooking at the blockchain and noticing that all of the transactions paid\nthe same public key.\n\nUsing the public key her node received from Bob's node, Alice's wallet\nwould construct a transaction output paying a very simple output script:\n\n----\n<Bob's public key> OP_CHECKSIG\n----\n\nBob would later be able to spend that output with an input script consisting\nentirely of his signature:\n\n----\n<Bob's signature>\n----\n\nTo figure out what an output and input script are doing, you can\ncombine them together (input script first) and then note that each piece of\ndata (shown in angle brackets) is placed at the top of a list of items,\ncalled a stack.  When an operation code (opcode) is encountered, it uses\nitems from the stack, starting with the topmost items.  Let's look at\nhow that works by beginning with the combined script:\n\n----\n<Bob's signature> <Bob's public key> OP_CHECKSIG\n----\n\nFor this script, Bob's signature is put on the stack, then Bob's public\nkey is placed on top of it.  The +OP_CHECKSIG+ operation consumes two\nelements, starting with the public key and followed by the signature,\nremoving them from the stack.  It verifies the signature corresponds to\nthe public key and also commits to (signs) the various fields in the\ntransaction.  If the signature is correct, +OP_CHECKSIG+ replaces itself\non the stack with the value 1; if the signature was not correct, it\nreplaces itself with a 0.  If there's a nonzero item on top of the stack at the\nend of evaluation, the script passes.  If all scripts in a transaction\npass, and all of the other details about the transaction are valid, then\nfull nodes will consider the transaction to be valid.\n\nIn short, the preceding script uses the same public key and signature\ndescribed in the original paper but adds in the complexity of two script\nfields and an opcode.  That seems like extra work here, but we'll begin\nto see the benefits when we look at the following section.\n\nThis type of output is known today as _pay to public key_, or _P2PK_ for\nshort.  It was never widely used for payments, and no widely used\nprogram has supported IP address payments for almost(((\"public key cryptography\", \"IP address payments and\", startref=\"pub-key-ipaddress\")))(((\"IP addresses for Bitcoin payments\", startref=\"ipaddress-payment\")))(((\"payments\", \"via IP addresses\", startref=\"payment-ipaddress\")))(((\"P2PK (pay to public key)\", startref=\"p2pk-ch4\")))(((\"addresses\", \"P2PK (pay to public key)\", startref=\"address-p2pk-ch4\"))) a decade.\n\n[[addresses_for_p2pkh]]\n=== Legacy Addresses for P2PKH\n\nEntering (((\"public key cryptography\", \"hash functions and\", id=\"pub-key-hash\")))(((\"hash functions\", \"Bitcoin payments and\", id=\"hash-payment\")))(((\"payments\", \"with hash functions\", secondary-sortas=\"hash functions\", id=\"payment-hash\")))(((\"P2PKH (pay to public key hash)\", id=\"p2pkh-legacy\")))(((\"addresses\", \"P2PKH (pay to public key hash)\", id=\"address-p2pkh-legacy\")))the IP address of the person you want to pay has a number of\nadvantages, but it also has a number of downsides.  One particular\ndownside is that the receiver needs their wallet to be online at their\nIP address, and it needs to be accessible from the outside world.  For\na lot of people, that isn't an option.  They turn their computers off at\nnight, their laptops go to sleep, they're behind firewalls, or they're\nusing Network Address Translation (NAT).\n\nThis brings us back to the problem of receivers like Bob having to give\nspenders like Alice a long public key.  The shortest version of Bitcoin\npublic keys known to the developers of early Bitcoin were 65 bytes, the\nequivalent of 130 characters when written in hexadecimal.  However, Bitcoin\nalready contains several data structures much larger than 65 bytes\nthat need to be securely referenced in other parts of Bitcoin using the\nsmallest amount of data that was secure.\n\nBitcoin accomplishes that with a _hash function_, a function that takes\na potentially large amount of data, scrambles it (hashes it), and outputs a\nfixed amount of data.  A cryptographic hash function will always produce\nthe same output when given the same input, and a secure function will\nalso make it impractical for somebody to choose a different input that\nproduces a previously-seen output.  That makes the (((\"commitments\", id=\"commitment\")))output a _commitment_\nto the input.  It's a promise that, in practice, only input _x_ will\nproduce output _X_.\n\nFor example, imagine I want to ask you a question and also give you my\nanswer in a form that you can't read immediately.  Let's say the\nquestion is, \"in what year did Satoshi Nakamoto start working on\nBitcoin?\"  I'll give you a commitment to my answer in the form of\noutput from the(((\"SHA256 hash function\"))) SHA256 hash function, the function most commonly used in\nBitcoin:\n\n----\n94d7a772612c8f2f2ec609d41f5bd3d04a5aa1dfe3582f04af517d396a302e4e\n----\n\nLater, after you tell me your guess to the answer of the question, I can\nreveal my answer and prove to you that my answer, as input to the hash\nfunction, produces exactly the same output I gave you earlier:\n\n----\n$ echo \"2007.  He said about a year and a half before Oct 2008\" | sha256sum\n94d7a772612c8f2f2ec609d41f5bd3d04a5aa1dfe3582f04af517d396a302e4e\n----\n\nNow imagine that we ask Bob the question, \"what is your public key?\" Bob\ncan use a hash function to give us a cryptographically secure commitment\nto his public key.  If he later reveals his key, and we verify it\nproduces the same commitment he previously gave us, we can be sure it\nwas the exact same key that was used to create that earlier commitment.\n\nThe SHA256 hash function is considered to be very secure and produces\n256 bits (32 bytes) of output, less than half the size of original\nBitcoin public keys.  However, there are other slightly less secure hash\nfunctions that produce smaller output, such as the (((\"RIPEMD-160 hash function\")))RIPEMD-160 hash\nfunction whose output is 160 bits (20 bytes).  For reasons Satoshi\nNakamoto never stated, the original version of Bitcoin made commitments\nto public keys by first hashing the key with SHA256 and then hashing\nthat output with RIPEMD-160; this produced a 20-byte commitment to the\npublic key.\n\n[role=\"less_space pagebreak-before\"]\nWe can look at that algorithmically.\nStarting with the public key _K_, we compute the SHA256 hash and then\ncompute the RIPEMD-160 hash of the result, producing a 160-bit (20-byte)\nnumber:\n\n[latexmath]\n++++\n\\begin{equation}\n{A = RIPEMD160(SHA256(K))}\n\\end{equation}\n++++\n\nwhere _K_ is the public key and _A_ is the resulting commitment.\n\nNow that we understand how to make a commitment to a public key, we need\nto figure out how to use it in a transaction.  Consider the following\noutput script:\n\n----\nOP_DUP OP_HASH160 <Bob's commitment> OP_EQUAL OP_CHECKSIG\n----\n\nAnd also the following input script:\n\n----\n<Bob's signature> <Bob's public key>\n----\n\nTogether, they form the following script:\n\n----\n<sig> <pubkey> OP_DUP OP_HASH160 <commitment> OP_EQUALVERIFY OP_CHECKSIG\n----\n\nAs we did in <<p2pk>>, we start putting items on the stack.  Bob's\nsignature goes on first; his public key is then placed on top of the\nstack.  The +OP_DUP+ operation duplicates the top item, so the top and\nsecond-to-top item on the stack are now both Bob's public key.  The\n+OP_HASH160+ operation consumes (removes) the top public key and\nreplaces it with the result of hashing it with +RIPEMD160(SHA256(K))+,\nso now the top of the stack is a hash of Bob's public key.  Next, the\ncommitment to Bob's public key is added to the top of the stack.  The\n+OP_EQUALVERIFY+ operation consumes the top two items and verifies that\nthey are equal; that should be the case if the public key Bob provided\nin the input script is the same public key used to create the commitment in\nthe output script that Alice paid.  If +OP_EQUALVERIFY+ fails, the whole\nscript fails.  Finally, we're left with a stack containing just Bob's\nsignature and his public key; the +OP_CHECKSIG+ opcode verifies they\ncorrespond with each other and that the signature commits to the\ntransaction.\n\nAlthough this process of paying to a public key hash (_P2PKH_) may seem\nconvoluted, it allows Alice's payment to\nBob to contain only a 20 byte commitment to his public key instead of\nthe key itself, which would've been 65 bytes in the original version of\nBitcoin.  That's a lot less data for Bob to have to communicate to\nAlice.\n\nHowever, we haven't yet discussed how Bob gets those 20 bytes from his\nBitcoin wallet to Alice's wallet.  There are commonly used encodings for\nbyte values, such as hexadecimal, but any mistake made in copying a\ncommitment would result in the bitcoins being sent to an unspendable\noutput, causing them to be lost forever.  In the next section, we'll\nlook at compact encoding and reliable (((\"public key cryptography\", \"hash functions and\", startref=\"pub-key-hash\")))(((\"hash functions\", \"Bitcoin payments and\", startref=\"hash-payment\")))(((\"payments\", \"with hash functions\", secondary-sortas=\"hash functions\", startref=\"payment-hash\")))(((\"P2PKH (pay to public key hash)\", startref=\"p2pkh-legacy\")))(((\"addresses\", \"P2PKH (pay to public key hash)\", startref=\"address-p2pkh-legacy\")))(((\"commitments\", startref=\"commitment\")))checksums.\n\n[[base58]]\n=== Base58check Encoding\n\nIn order(((\"public key cryptography\", \"base58check encoding\", id=\"pub-key-base58\")))(((\"base58check encoding\", id=\"base58-ch4\")))(((\"encoding\", \"base58check\", id=\"encode-base58\"))) to represent long numbers in a compact way,\nusing fewer symbols, many computer systems use mixed-alphanumeric\nrepresentations with a base (or radix) higher than 10. For example,\nwhereas the traditional decimal system uses 10 numerals, 0 through 9,\nthe hexadecimal system uses 16, with the letters A through F as the six\nadditional symbols. A number represented in hexadecimal format is\nshorter than the equivalent decimal representation. Even more compact,\nbase64 representation (((\"base64 encoding\")))uses 26 lowercase letters, 26 capital letters, 10\nnumerals, and 2 more characters such as \"+\" and \"/\" to\ntransmit binary data over text-based media such as email.\n\nBase58 is a similar encoding to\nbase64, using upper- and lowercase letters and numbers,\nbut omitting some characters that are frequently mistaken for one\nanother and can appear identical when displayed in certain fonts.\nSpecifically, base58 is base64 without the 0 (number zero), O (capital\no), l (lower L), I (capital i), and the symbols \"+\" and\n\"/.\" Or, more simply, it is a set of lowercase and capital letters and\nnumbers without the four (0, O, l, I) just mentioned. <<base58alphabet>>\nshows the full base58 alphabet.\n\n[[base58alphabet]]\n.Bitcoin's base58 alphabet\n====\n----\n123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\n----\n====\n\nTo add extra security against typos or transcription errors, base58check\nincludes(((\"checksums\"))) a _checksum_ encoded in the base58 alphabet. The checksum is an\nadditional four bytes\nadded to the end of the data that is being encoded. The checksum is\nderived from the hash of the encoded data and can therefore be used to\ndetect transcription and typing errors. When presented with\nbase58check code, the decoding software will calculate the checksum of\nthe data and compare it to the checksum included in the code. If the two\ndo not match, an error has been introduced and the base58check data is\ninvalid. This prevents a mistyped Bitcoin address from being accepted by\nthe wallet software as a valid destination, an error that would\notherwise result in loss of funds.\n\nTo convert data (a number) into a base58check format, we first add a\nprefix to the data, called (((\"version prefixes\", id=\"version-prefix\")))the \"version byte,\" which serves to easily\nidentify the type of data that is encoded. For example, the prefix zero\n(0x00 in hex) indicates that the data should be used as the commitment (hash) in\na legacy P2PKH output script.  A list of common version prefixes is shown\nin <<base58check_versions>>.\n\nNext, we compute the \"double-SHA\" checksum, meaning we apply the SHA256\nhash-algorithm twice on the previous result (the prefix concatenated\nwith the data):\n\n----\nchecksum = SHA256(SHA256(prefix||data))\n----\n\nFrom the resulting 32-byte hash (hash-of-a-hash), we take only the first\nfour bytes. These four bytes serve as the error-checking code, or\nchecksum. The checksum is appended to the end.\n\nThe result is composed of three items: a prefix, the data, and a\nchecksum. This result is encoded using the base58 alphabet described\npreviously. <<base58check_encoding>> illustrates the base58check\nencoding process.\n\n[[base58check_encoding]]\n.Base58check encoding: a base58, versioned, and checksummed format for unambiguously encoding bitcoin data.\nimage::images/mbc3_0406.png[\"Base58checkEncoding\"]\n\n++++\n<p class=\"fix_tracking2\">\nIn Bitcoin, other data besides public key commitments are presented to the user in\nbase58check encoding to make that data compact, easy to read, and easy to detect\nerrors. The version prefix in base58check encoding is used to create\neasily distinguishable formats, which when encoded in base58 contain\nspecific characters at the beginning of the base58check-encoded payload.\nThese characters make it easy for humans to identify the type of data\nthat is encoded and how to use it. This is what differentiates, for\nexample, a base58check-encoded Bitcoin address that starts with a 1 from\na base58check-encoded private key wallet import format (WIF) that starts with a 5. Some example\nversion prefixes and the resulting base58 characters are shown in\n<a data-type=\"xref\" href=\"#base58check_versions\">#base58check_versions</a>.\n</p>\n++++\n\n++++\n<table id=\"base58check_versions\">\n<caption>Base58check version prefix and encoded result examples</caption>\n<thead>\n<tr>\n<th>Type</th>\n<th>Version prefix (hex)</th>\n<th>Base58 result prefix</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><p>Address for pay to public key hash (P2PKH)</p></td>\n<td><p>0x00</p></td>\n<td><p>1</p></td>\n</tr>\n<tr>\n<td><p>Address for pay to script hash (P2SH)</p></td>\n<td><p>0x05</p></td>\n<td><p>3</p></td>\n</tr>\n<tr>\n<td><p>Testnet Address for P2PKH</p></td>\n<td><p>0x6F</p></td>\n<td><p>m or n</p></td>\n</tr>\n<tr>\n<td><p>Testnet Address for P2SH</p></td>\n<td><p>0xC4</p></td>\n<td><p>2</p></td>\n</tr>\n<tr>\n<td><p>Private Key WIF</p></td>\n<td><p>0x80</p></td>\n<td><p>5, K, or L</p></td>\n</tr>\n<tr>\n<td><p>BIP32 Extended Public Key</p></td>\n<td><p>0x0488B21E</p></td>\n<td><p>xpub</p></td>\n</tr>\n</tbody>\n</table>\n++++\n\nCombining public keys, hash-based commitments, and base58check\nencoding, <<pubkey_to_address>> illustrates the conversion of a public key\ninto a Bitcoin (((\"public key cryptography\", \"base58check encoding\", startref=\"pub-key-base58\")))(((\"base58check encoding\", startref=\"base58-ch4\")))(((\"encoding\", \"base58check\", startref=\"encode-base58\")))(((\"version prefixes\", startref=\"version-prefix\")))address.\n\n[[pubkey_to_address]]\n.Public key to Bitcoin address: conversion of a public key to a Bitcoin address.\nimage::images/mbc3_0407.png[\"pubkey_to_address\"]\n\n[[comp_pub]]\n=== Compressed Public Keys\n\n//https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2011-November/000778.html\n\n\nWhen (((\"public key cryptography\", \"compressed public keys\", id=\"pub-key-compress\")))(((\"compressed public keys\", id=\"compress-pub-key\")))(((\"uncompressed public keys\", id=\"uncompress-pub-key\")))Bitcoin was first authored, its developers only knew how to create\n65-byte public keys.  However, a later developer became aware of an\nalternative encoding for public keys that used only 33 bytes and which\nwas backward compatible with all Bitcoin full nodes at the time,\nso there was no need to change the Bitcoin protocol.  Those 33-byte\npublic keys are known as _compressed public keys_, and the original 65-byte keys are known as _uncompressed public keys_.  Using smaller public keys\nresults in smaller transactions, allowing more payments to be made in the same\nblock.\n\nAs we saw in the section <<public_key_derivation>>, a public key is a point [.keep-together]#(x, y)# on an\nelliptic curve. Because the curve expresses a mathematical function, a\npoint on the curve represents a solution to the equation and, therefore,\nif we know the _x_ coordinate, we can calculate the _y_ coordinate by\nsolving the equation [.keep-together]#y^2^ mod p = (x^3^ + 7) mod p.# That allows us to\nstore only the _x_ coordinate of the public key point, omitting the _y_\ncoordinate and reducing the size of the key and the space required to\nstore it by 256 bits. An almost 50% reduction in size in every\ntransaction adds up to a lot of data saved over time!\n\nHere is the public key generated by the private key we created in\n<<public_key_derivation>>:\n\n----\nx = F028892BAD7ED57D2FB57BF33081D5CFCF6F9ED3D3D7F159C2E2FFF579DC341A\ny = 07CF33DA18BD734C600B96A72BBC4749D5141C90EC8AC328AE52DDFE2E505BDB\n----\n\nHere's the same public key shown as a 520-bit number (130 hex digits)\nwith the prefix +04+ followed by +x+ and then +y+ coordinates, as +04 x\ny+:\n\n++++\n<pre data-type=\"programlisting\">\nK = 04F028892BAD7ED57D2FB57BF33081D5CFCF6F9ED3D3D7F159C2E2FFF579DC341A\\\n    07CF33DA18BD734C600B96A72BBC4749D5141C90EC8AC328AE52DDFE2E505BDB\n</pre>\n++++\n\nWhereas uncompressed public keys have a prefix of +04+, compressed\npublic keys start with either a +02+ or a +03+ prefix. Let's look at why\nthere are two possible prefixes: because the left side of the equation\nis __y__^2^, the solution for _y_ is a square root, which can have a\npositive or negative value. Visually, this means that the resulting _y_\ncoordinate can be above or below the x-axis. As you can see from the\ngraph of the elliptic curve in <<ecc-curve>>, the curve is symmetric,\nmeaning it is reflected like a mirror by the x-axis. So, while we can\nomit the _y_ coordinate, we have to store the _sign_ of _y_ (positive or\nnegative); in other words, we have to remember if it was above or\nbelow the x-axis because each of those options represents a different\npoint and a different public key. When calculating the elliptic curve in\nbinary arithmetic on the finite field of prime order p, the _y_\ncoordinate is either even or odd, which corresponds to the\npositive/negative sign as explained earlier. Therefore, to distinguish\nbetween the two possible values of _y_, we store a compressed public key\nwith the prefix +02+ if the _y_ is even, and +03+ if it is odd, allowing\nthe software to correctly deduce the _y_ coordinate from the _x_\ncoordinate and uncompress the public key to the full coordinates of the\npoint. Public key compression is illustrated in <<pubkey_compression>>.\n\n\n[[pubkey_compression]]\n.Public key compression.\nimage::images/mbc3_0408.png[\"pubkey_compression\"]\n\n\nHere's the same public key generated in <<public_key_derivation>>, shown as a compressed\npublic key stored in 264 bits (66 hex digits) with the prefix +03+\nindicating the _y_ coordinate is odd:\n\n----\nK = 03F028892BAD7ED57D2FB57BF33081D5CFCF6F9ED3D3D7F159C2E2FFF579DC341A\n----\n\nThis compressed public key corresponds to the same private key, meaning\nit is generated from the same private key. However, it looks different\nfrom the uncompressed public key. More importantly, if we convert this\ncompressed public key to a commitment using the HASH160\nfunction (+RIPEMD160(SHA256(K))+), it will produce a _different_\ncommitment than the uncompressed public key, leading to a different\naddress. This can be confusing because it means that a single private\nkey can produce a public key expressed in two different formats\n(compressed and uncompressed) that produce two different Bitcoin\naddresses. However, the private key is identical for both Bitcoin\naddresses.\n\n\n\nCompressed public keys are now the default in almost all Bitcoin\nsoftware and were required when using certain new features added\nin later protocol upgrades.\n\nHowever, some software still needs to support uncompressed public keys,\nsuch as a wallet application importing private keys from an older\nwallet.  When the new wallet scans the blockchain for old P2PKH outputs\nand inputs, it needs to know whether to scan the 65-byte keys (and\ncommitments to those keys) or 33-byte keys (and their commitments).  Failure\nto scan for the correct type can lead to the user not being able to\nspend their full balance.  To resolve this issue, when private keys are\nexported from a wallet, the WIF that is used to\nrepresent them is implemented slightly differently in newer Bitcoin\nwallets to indicate that these private keys have been used to produce(((\"public key cryptography\", \"compressed public keys\", startref=\"pub-key-compress\")))(((\"compressed public keys\", startref=\"compress-pub-key\")))(((\"uncompressed public keys\", startref=\"uncompress-pub-key\")))\ncompressed public keys.\n\n[[addresses_for_p2sh]]\n=== Legacy Pay to Script Hash (P2SH)\n\nAs we've (((\"public key cryptography\", \"hash functions and\", id=\"pub-key-hash2\")))(((\"hash functions\", \"Bitcoin payments and\", id=\"hash-payment2\")))(((\"payments\", \"with hash functions\", secondary-sortas=\"hash functions\", id=\"payment-hash2\")))(((\"P2SH (pay to script hash)\", id=\"p2sh-ch4\")))(((\"addresses\", \"P2SH (pay to script hash)\", id=\"address-p2sh-ch4\")))seen in preceding sections, someone receiving bitcoins (like\nBob) can require that payments to him contain certain constraints in their\noutput script.  Bob will need to fulfill those constraints using an\ninput script when he spends those bitcoins.  In <<p2pk>>, the constraint\nwas simply that the input script needed to provide an appropriate\nsignature.  In <<addresses_for_p2pkh>>, an appropriate public key also needed to be\nprovided.\n\n++++\n<p class=\"fix_tracking3\">\nFor a spender (like Alice) to place the constraints Bob wants\nin the output script she uses to pay him, Bob needs to communicate those\nconstraints to her.  This is similar to the problem of Bob needing to\ncommunicate his public key to her.  Like that problem, where\npublic keys can be fairly large, the constraints Bob uses can also be\nquite large—potentially thousands of bytes.  That's not only thousands\nof bytes that need to be communicated to Alice, but thousands of bytes\nfor which she needs to pay transaction fees every time she wants to spend money to Bob.  However, the solution of using hash functions to create\nsmall commitments to large amounts of data also applies here.\n</p>\n++++\n\nThe BIP16 upgrade to the Bitcoin protocol in 2012 allows an\noutput script to (((\"redeem scripts\", id=\"redeem-script\")))commit to a _redemption script_ (_redeem script_).  When\nBob spends his bitcoins, his input script needs to provide a redeem script\nthat matches the commitment and also any data necessary to satisfy the\nredeem script (such as signatures).  Let's start by imagining Bob wants\nto require two signatures to spend his bitcoins, one signature from his\ndesktop wallet and one from a hardware signing device.  He puts those\nconditions into a redeem script:\n\n----\n<public key 1> OP_CHECKSIGVERIFY <public key 2> OP_CHECKSIG\n----\n\nHe then creates a commitment to the redeem script using the same\nHASH160 mechanism used for P2PKH commitments, +RIPEMD160(SHA256(script))+.\nThat commitment is placed into the output script using a special\ntemplate:\n\n----\nOP_HASH160 <commitment> OP_EQUAL\n----\n\n[WARNING]\n====\nWhen using pay to script hash (P2SH), you must use the specific P2SH template\nwith no extra data or conditions in the output script.  If the\noutput script is not exactly +OP_HASH160 <20 bytes> OP_EQUAL+, the\nredeem script will not be used and any bitcoins may either be unspendable\nor spendable by anyone (meaning anyone can take them).\n====\n\nWhen Bob goes to spend the payment he received to the commitment for his\nscript, he uses an input script that includes the redeem script, with it\nserialized as a single data element.  He also provides the signatures\nhe needs to satisfy the redeem script, putting them in the order that\nthey will be consumed by the opcodes:\n\n----\n<signature2> <signature1> <redeem script>\n----\n\nWhen Bitcoin full nodes receive Bob's spend, they'll verify that the\nserialized redeem script will hash to the same value as the commitment.\nThen they'll replace it on the stack with its deserialized value:\n\n----\n<signature2> <signature1> <pubkey1> OP_CHECKSIGVERIFY <pubkey2> OP_CHECKSIG\n----\n\nThe script is executed and, if it passes and all of the other\ntransaction details are correct, the transaction is valid.\n\nAddresses for P2SH are also created with\nbase58check.  The version prefix is set to 5, which results in an\nencoded address starting with a +3+. An example of a P2SH address is\n+3F6i6kwkevjR7AsAd4te2YB2zZyASEm1HM+.\n\n[TIP]\n====\nP2SH is not necessarily the same as a multisignature\ntransaction. A P2SH address _most often_ represents a multisignature\nscript, but it might also represent a script encoding other types of\ntransactions.\n====\n\nP2PKH and P2SH are the only two script templates used with base58check\nencoding.  They are now known as legacy addresses and have become less\ncommon over time.\nLegacy addresses were supplanted by the bech32 family of (((\"redeem scripts\", startref=\"redeem-script\")))addresses.\n\n[[p2sh_collision_attacks]]\n.P2SH Collision Attacks\n****\nAll addresses (((\"collision attacks\", id=\"collision\")))based on hash functions are theoretically vulnerable to an\nattacker independently finding the same input that produced the hash\nfunction output (commitment).  In the case of Bitcoin, if they find the\ninput the same way the original user did, they'll know the user's private\nkey and be able to spend that user's bitcoins.  The chance of an attacker\nindependently generating the input for an existing commitment is\nproportional to the strength of the hash algorithm.  For a secure\n160-bit algorithm like HASH160, the probability is 1-in-2^160^.  This (((\"preimage attacks\")))is\na _preimage attack_.\n\nAn attacker can also try to generate two different inputs (e.g., redeem\nscripts) that produce the same commitment.  For addresses created\nentirely by a single party, the chance of an attacker generating a\ndifferent input for an existing commitment is also about 1-in-2^160^ for\nthe HASH160 algorithm.  This is(((\"second preimage attacks\"))) a _second preimage attack_.\n\nHowever, this changes when an attacker is able to influence the original input\nvalue. For example, an attacker participates in the creation of a\nmultisignature script where they don't need to submit their public key until after they learn all of the other partys' public keys.\nIn that case, the strength of hash algorithm is reduced to its square\nroot.  For HASH160, the probability becomes 1-in-2^80^.  This is a\n_collision attack_.\n\n// bits80=$( echo '2^80' | bc )\n// seconds_per_hour=\"$(( 60 * 60))\"\n// bitcoin-cli getmininginfo | jq \"(.networkhashps / $bits80 * $seconds_per_hour)\"\n// 0.8899382363032076\n\nTo put those numbers in context, as of early 2023, all Bitcoin miners\ncombined execute about 2^80^ hash functions every hour.  They run a\ndifferent hash function than HASH160, so their existing hardware can't\ncreate collision attacks for it, but the existence of the Bitcoin\nnetwork proves that collision attacks against 160-bit functions like\nHASH160 are (((\"HASH160\")))practical.  Bitcoin miners have spent the equivalent of\nbillions of US dollars on special hardware, so creating a collision\nattack wouldn't be cheap, but there are organizations that expect to\nreceive billions of dollars in bitcoins to addresses generated by\nprocesses involving multiple parties, which could make the attack\nprofitable.\n\nThere are well-established cryptographic protocols for preventing\ncollision attacks, but a simple solution that doesn't require any\nspecial knowledge on the part of wallet developers is to simply use\na stronger hash function.  Later upgrades to Bitcoin made that possible,\nand newer Bitcoin addresses provide at least 128 bits of collision\nresistance.  To perform 2^128^ hash operations would take all current\nBitcoin miners about 32 billion years.\n\nAlthough we do not believe there is any immediate threat to anyone\ncreating new P2SH addresses, we recommend all new wallets use newer\ntypes of addresses to eliminate address collision attacks(((\"public key cryptography\", \"hash functions and\", startref=\"pub-key-hash2\")))(((\"hash functions\", \"Bitcoin payments and\", startref=\"hash-payment2\")))(((\"payments\", \"with hash functions\", secondary-sortas=\"hash functions\", startref=\"payment-hash2\")))(((\"P2SH (pay to script hash)\", startref=\"p2sh-ch4\")))(((\"addresses\", \"P2SH (pay to script hash)\", startref=\"address-p2sh-ch4\"))) as a concern.\n****\n\n=== Bech32 Addresses\n\nIn 2017, the (((\"public key cryptography\", \"bech32 addresses\", \"advantages of\", id=\"pub-key-bech32-adv\")))(((\"addresses\", \"bech32\", \"advantages of\", id=\"address-bech32-adv\")))(((\"bech32 addresses\", \"advantages of\", id=\"bech32-adv\")))Bitcoin protocol was upgraded.  When the upgrade is used,\nit prevents transaction\nidentifiers (txids) from being changed without the consent of a spending\nuser (or a quorum of signers when multiple signatures are required).\nThe upgrade, (((\"segregated witness (segwit)\", id=\"segwit-bech32\")))called _segregated witness_ (or _segwit_ for short),  also\nprovided additional capacity for transaction data in blocks and several\nother benefits.  However, users wanting direct access to segwit's\nbenefits had to accept payments to new output scripts.\n\nAs mentioned in <<p2sh>>, one of the advantages of the P2SH output type\nwas that a spender (such as Alice) didn't need to know the details of\nthe script the receiver (such as Bob) used.  The segwit upgrade was\ndesigned to use this mechanism, allowing users to\nimmediately begin accessing many of the new benefits by using a P2SH\naddress.  But for Bob to gain access to all of the benefits, he would\nneed Alice's wallet to pay him using a different type of script.  That\nwould require Alice's wallet to upgrade to support the new scripts.\n\nAt first, Bitcoin developers proposed BIP142, which would continue using\nbase58check with a new version byte, similar to the P2SH upgrade.  But\ngetting all wallets to upgrade to new scripts with a new base58check\nversion was expected to require almost as much work as getting them to\nupgrade to an entirely new address format, so several Bitcoin\ncontributors set out to design the best possible address format.  They\nidentified several problems(((\"public key cryptography\", \"base58check encoding\")))(((\"base58check encoding\")))(((\"encoding\", \"base58check\"))) with base58check:\n\n- Its mixed-case presentation made it inconvenient to read aloud or\n  transcribe.  Try reading one of the legacy addresses in this chapter\n  to a friend who you have transcribe it.  Notice how you have to prefix\n  every letter with the words \"uppercase\" and \"lowercase.\"  Also, note\n  when you review their writing that the uppercase and lowercase\n  versions of some letters can look similar in many people's\n  handwriting.\n\n- It can detect errors, but it can't help users correct those errors.\n  For example, if you accidentally transpose two characters when manually\n  entering an address, your wallet will almost certainly warn that a\n  mistake exists, but it won't help you figure out where the error is\n  located.  It might take you several frustrating minutes to eventually\n  discover the mistake.\n\n- A mixed-case alphabet also requires extra space to encode in QR codes,\n  which are commonly used to share addresses and invoices\n  between wallets.  That extra space means QR codes need to be larger at\n  the same resolution or they become harder to scan quickly.\n\n[role=\"less_space pagebreak-before\"]\n- It requires every spender wallet upgrade to support new protocol\n  features like P2SH and segwit.  Although the upgrades themselves might\n  not require much code, experience shows that many wallet authors are\n  busy with other work and can sometimes delay upgrading for years.\n  This adversely affects everyone who wants to use the new features.\n\nThe developers working on an address format for segwit found solutions\nfor each of these problems in a new address format called\nbech32 (pronounced with a soft \"ch\", as in \"besh thirty-two\").  The\n\"bech\" stands for BCH, the initials of the three individuals who\ndiscovered the cyclic code in 1959 and 1960 upon which bech32 is based.\nThe \"32\" stands for the number of characters in the bech32 alphabet\n(similar to the 58 in base58check):\n\n- Bech32 uses only numbers and a single case of letters (preferably\n  rendered in lowercase).  Despite its alphabet being almost half the\n  size of the base58check alphabet, a bech32 address for a pay to witness public key hash (P2WPKH) script\n  is only slightly longer than a legacy address for an equivalent P2PKH\n  script.\n\n- Bech32 can both detect and help correct errors.  In an address of an\n  expected length, it is mathematically guaranteed to detect any error\n  affecting four characters or less; that's more reliable than\n  base58check.  For longer errors, it will fail to detect them less than\n  one time in a billion, which is roughly the same reliability as\n  base58check.  Even better, for an address typed with just a few\n  errors, it can tell the user where those errors occurred, allowing them to\n  quickly correct minor transcription mistakes.  See <<bech32_typo_detection>>\n  for an example of an address entered with errors.\n+\n[[bech32_typo_detection]]\n.Bech32 typo detection\n====\nAddress:\n  bc1p9nh05ha8wrljf7ru236awpass:[<u><strong>n</strong></u>]4t2x0d5ctkkywmpass:[<u><strong>v</strong></u>]9sclnm4t0av2vgs4k3au7\n\nDetected errors shown in bold and underlined.  Generated using the\nhttps://oreil.ly/paWIx[bech32 address decoder demo].\n====\n\n- Bech32 is preferably written with only lowercase characters, but those\n  lowercase characters can be replaced with uppercase characters before\n  encoding an address in a QR code.  This allows the use of a special QR\n  encoding mode that uses less space.  Notice the difference in size and\n  complexity of the two QR codes for the same address in\n  <<bech32_qrcode_uc_lc>>.\n+\n[[bech32_qrcode_uc_lc]]\n.The same bech32 address QR encoded in lowercase and uppercase.\nimage::images/mbc3_0409.png[\"The same bech32 address QR encoded in lowercase and uppercase\"]\n\n- Bech32 takes advantage of an upgrade mechanism designed as part of\n  segwit to make it possible for spender wallets to be able to pay\n  output types that aren't in use yet.  The goal was to allow developers\n  to build a wallet today that allows spending to a bech32 address\n  and have that wallet remain able to spend to bech32 addresses for\n  users of new features added in future protocol upgrades.  It was\n  hoped that we might never again need to go through the system-wide\n  upgrade cycles necessary to allow people to fully use P2SH and(((\"public key cryptography\", \"bech32 addresses\", \"advantages of\", startref=\"pub-key-bech32-adv\")))(((\"addresses\", \"bech32\", \"advantages of\", startref=\"address-bech32-adv\")))(((\"bech32 addresses\", \"advantages of\", startref=\"bech32-adv\")))(((\"segregated witness (segwit)\", startref=\"segwit-bech32\"))) segwit.\n\n==== Problems with Bech32 Addresses\n\nBech32 addresses(((\"public key cryptography\", \"bech32 addresses\", \"problems with\", id=\"pub-key-bech32-prob\")))(((\"addresses\", \"bech32\", \"problems with\", id=\"address-bech32-prob\")))(((\"bech32 addresses\", \"problems with\", id=\"bech32-prob\"))) would have been a success in every area except for one\nproblem.  The mathematical guarantees about their ability to detect\nerrors only apply if the length of the address you enter into a wallet\nis the same length of the original address.  If you add or remove any\ncharacters during transcription, the guarantee doesn't apply and your\nwallet may spend funds to a wrong address.  However, even without the\nguarantee, it was thought that it would be very unlikely that a user adding\nor removing characters would produce a string with a valid checksum, ensuring\nusers' funds were safe.\n\nUnfortunately, the choice for one of the constants in the bech32\nalgorithm just happened to make it very easy to add or remove the letter\n\"q\" in the penultimate position of an address that ends with the letter\n\"p.\"  In those cases, you can also add or remove the letter \"q\" multiple\ntimes.  This will be caught by the checksum some of the time, but it\nwill be missed far more often than the one-in-a-billion expectations for\nbech32's substitution errors.  For an example, see <<bech32_length_extension_example>>.\n\n[role=\"less_space pagebreak-before\"]\n[[bech32_length_extension_example]]\n.Extending the length of bech32 address without invalidating its checksum\n====\n----\nIntended bech32 address:\nbc1pqqqsq9txsqp\n\nIncorrect addresses with a valid checksum:\nbc1pqqqsq9txsqqqqp\nbc1pqqqsq9txsqqqqqqp\nbc1pqqqsq9txsqqqqqqqqp\nbc1pqqqsq9txsqqqqqqqqqp\nbc1pqqqsq9txsqqqqqqqqqqqp\n----\n====\n//from segwit_addr import *\n//\n//for foo in range(0,1000):\n//    addr = encode('bc', 1, foo.to_bytes(3,'big'))\n//    print(foo, addr)\n\n\n\nFor the initial version of segwit (version 0), this wasn't a practical\nconcern.  Only two valid lengths were defined for v0 segwit outputs: 22\nbytes and 34 bytes.  Those correspond to bech32 addresses that are 42 characters\nor 62 characters long, so someone would need to add or remove the letter \"q\"\nfrom the penultimate position of a bech32 address 20 times in order to\nsend money to an invalid address without a wallet being able to detect\nit.  However, it would become a problem for users in the future if\na segwit-based upgrade were ever to be (((\"public key cryptography\", \"bech32 addresses\", \"problems with\", startref=\"pub-key-bech32-prob\")))(((\"addresses\", \"bech32\", \"problems with\", startref=\"address-bech32-prob\")))(((\"bech32 addresses\", \"problems with\", startref=\"bech32-prob\")))implemented.\n\n==== Bech32m\n\nAlthough(((\"public key cryptography\", \"bech32 addresses\", \"bech32m\", id=\"pub-key-bech32-bech32m\")))(((\"bech32 addresses\", \"bech32m\", id=\"bech32-bech32m\")))(((\"addresses\", \"bech32m\", id=\"address-bech32m\")))(((\"bech32m addresses\", id=\"bech32m\"))) bech32 worked well for segwit v0, developers didn't want to\nunnecessarily constrain output sizes in later versions of segwit.\nWithout constraints, adding or removing a single \"q\" in a bech32 address\ncould result in a user accidentally sending their money to an\noutput that was either unspendable or spendable by anyone (allowing\nthose bitcoins to be taken by anyone).  Developers exhaustively analyzed the bech32\nproblem and found that changing a single constant in their algorithm\nwould eliminate the problem, ensuring that any insertion or deletion of\nup to five characters will only fail to be detected less often than one\ntime in a billion.\n\n//https://gist.github.com/sipa/a9845b37c1b298a7301c33a04090b2eb\n\nThe version of bech32 with a single different constant is known as\nbech32 modified (bech32m).  All of the characters in bech32 and bech32m\naddresses for the same underlying data will be identical except for the\nlast six (the checksum).  That means a wallet will need to know which\nversion is in use in order to validate the checksum, but both address\ntypes contain an internal version byte that makes determining that easy.\n\n\n\nTo work with both bech32 and(((\"encoding\", \"bech32m addresses\", id=\"encode-bech32m\")))(((\"decoding\", \"addresses\", see=\"addresses\"))) bech32m, we'll look at the encoding and parsing rules for\nbech32m Bitcoin addresses since they encompass the ability to parse\nbech32 addresses and are the current recommended address format for\nBitcoin wallets.\n\nBech32m addresses start with a human readable part (HRP).  There are\nrules in BIP173 for creating your own HRPs, but for Bitcoin you only\nneed to know about the HRPs already chosen, shown in\n<<bech32_hrps_for_bitcoin>>.\n\n++++\n<table id=\"bech32_hrps_for_bitcoin\">\n<caption>Bech32 HRPs for Bitcoin</caption>\n<thead>\n<tr>\n<th>HRPs</th>\n<th>Network</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><p>bc</p></td>\n<td><p>Bitcoin mainnet</p></td>\n</tr>\n<tr>\n<td><p>tb</p></td>\n<td><p>Bitcoin testnet</p></td>\n</tr>\n</tbody>\n</table>\n++++\n\nThe HRP is followed by a separator, the number \"1.\"  Earlier proposals\nfor a protocol separator used a colon but some operating systems and\napplications that allow a user to double-click a word to highlight\nit for copy and pasting won't extend the highlighting to and past a\ncolon.  A number ensured double-click highlighting would work with any\nprogram that supports bech32m strings in general (which include other\nnumbers).  The number \"1\" was chosen because bech32 strings don't\notherwise use it in order to prevent accidental transliteration between\nthe number \"1\" and the lowercase letter \"l.\"\n\nThe other part of a bech32m address is called the \"data part.\"  There\nare three elements to this part:\n\nWitness version::\n  A single byte that encodes as a single character\n  in a bech32m Bitcoin address immediately following the separator.\n  This letter represents the segwit version.  The letter \"q\" is the\n  encoding of \"0\" for segwit v0, the initial version of segwit where\n  bech32 addresses were introduced.  The letter \"p\" is the encoding of\n  \"1\" for segwit v1 (also called taproot) where bech32m began to be\n  used.  There are seventeen possible versions of segwit and it's\n  required for Bitcoin that the first byte of a bech32m data part decode\n  to the number 0 through 16 (inclusive).\n\nWitness program::\n  From 2 to 40 bytes.  For segwit v0, this witness program\n  must be either 20 or 32 bytes; no other length is valid.  For segwit\n  v1, the only defined length as of this writing is 32 bytes but other\n  lengths may be defined later.\n\nChecksum::\n  Exactly 6 characters.  This is created using a BCH code, a type of\n  error correction code (although for Bitcoin addresses, we'll see later\n  that it's essential to use the checksum only for error detection--not\n  correction).\n//TODO\n\nLet's illustrate these rules by walking through an example of creating\nbech32 and bech32m addresses.  For all of the following examples, we'll use the\nhttps://oreil.ly/gpTT6[bech32m reference code\nfor Python].\n\nWe'll start by generating four output scripts, one for each of the\ndifferent segwit outputs in use at the time of publication, plus one for\na future segwit version that doesn't yet have a defined meaning.  The\nscripts are listed in <<scripts_for_diff_segwit_outputs>>.\n\n// bc1q9d3xa5gg45q2j39m9y32xzvygcgay4rgc6aaee\n// 2b626ed108ad00a944bb2922a309844611d25468\n//\n// bc1qvj9r9egtd7mu2gemy28kpf4zefq4ssqzdzzycj7zjhk4arpavfhsct5a3p\n// 648a32e50b6fb7c5233b228f60a6a2ca4158400268844c4bc295ed5e8c3d626f\n//\n// bc1p9nh05ha8wrljf7ru236awm4t2x0d5ctkkywmu9sclnm4t0av2vgs4k3au7\n// 2ceefa5fa770ff24f87c5475d76eab519eda6176b11dbe1618fcf755bfac5311\n//\n// bc1sqqqqkfw08p\n// O_16 OP_PUSH2 0000\n\n++++\n<table id=\"scripts_for_diff_segwit_outputs\">\n<caption>Scripts for different types of segwit outputs</caption>\n<thead>\n<tr>\n<th>Output type</th>\n<th>Example script</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><p>P2WPKH</p></td>\n<td><p><code>OP_0 2b626ed108ad00a944bb2922a309844611d25468</code></p></td>\n</tr>\n<tr>\n<td><p>P2WSH</p></td>\n<td><p><code>OP_0 648a32e50b6fb7c5233b228f60a6a2ca4158400268844c4bc295ed5e8c3d626f</code></p></td>\n</tr>\n<tr>\n<td><p>P2TR</p></td>\n<td><p><code>OP_1 2ceefa5fa770ff24f87c5475d76eab519eda6176b11dbe1618fcf755bfac5311</code></p></td>\n</tr>\n<tr>\n<td><p>Future Example</p></td>\n<td><p><code>OP_16 0000</code></p></td>\n</tr>\n</tbody>\n</table>\n++++\n\n\nFor the P2WPKH output, the witness program contains a commitment constructed in exactly the same\nway as the commitment for a P2PKH output seen in <<addresses_for_p2pkh>>.  A public key is passed into a SHA256 hash\nfunction.  The resultant 32-byte digest is then passed into a RIPEMD-160\nhash function.  The digest of that function (the commitment) is placed\nin the witness program.\n\nFor the pay to witness script hash (P2WSH) output, we don't use the P2SH algorithm.  Instead we take\nthe script, pass it into a SHA256 hash function, and use the 32-byte\ndigest of that function in the witness program.  For P2SH, the SHA256\ndigest was hashed again with RIPEMD-160, but that may not be secure in\nsome cases; for details, see <<p2sh_collision_attacks>>.  A result of\nusing SHA256 without RIPEMD-160 is that P2WSH commitments are 32 bytes\n(256 bits) instead of 20 bytes (160 bits).\n\nFor the pay-to-taproot (P2TR) output, the witness program is a point on\nthe secp256k1 curve.  It may be a simple public key, but in most cases\nit should be a public key that commits to some additional data.  We'll\nlearn more about that commitment in <<taproot>>.\n\n++++\n<p class=\"fix_tracking2\">\nFor the example of a future segwit version, we simply use the highest\npossible segwit version number (16) and the smallest allowed witness\nprogram (2 bytes) with a null value.</p>\n++++\n\nNow that we know the version number and the witness program, we can\nconvert each of them into a bech32 address.  Let's use the bech32m reference\nlibrary for Python to quickly generate those addresses, and then take a\ndeeper look at what's happening:\n\n----\n$ github=\"https://raw.githubusercontent.com\"\n$ wget $github/sipa/bech32/master/ref/python/segwit_addr.py\n\n$ python\n>>> from segwit_addr import *\n>>> from binascii import unhexlify\n\n>>> help(encode)\nencode(hrp, witver, witprog)\n    Encode a segwit address.\n\n>>> encode('bc', 0, unhexlify('2b626ed108ad00a944bb2922a309844611d25468'))\n'bc1q9d3xa5gg45q2j39m9y32xzvygcgay4rgc6aaee'\n>>> encode('bc', 0,\nunhexlify('648a32e50b6fb7c5233b228f60a6a2ca4158400268844c4bc295ed5e8c3d626f'))\n'bc1qvj9r9egtd7mu2gemy28kpf4zefq4ssqzdzzycj7zjhk4arpavfhsct5a3p'\n>>> encode('bc', 1, \nunhexlify('2ceefa5fa770ff24f87c5475d76eab519eda6176b11dbe1618fcf755bfac5311'))\n'bc1p9nh05ha8wrljf7ru236awm4t2x0d5ctkkywmu9sclnm4t0av2vgs4k3au7'\n>>> encode('bc', 16, unhexlify('0000'))\n'bc1sqqqqkfw08p'\n----\n\nIf we open the file __segwit_addr.py__ and look at what the code is doing,\nthe first thing we will notice\nis the sole difference between bech32 (used for segwit v0) and bech32m\n(used for later segwit versions) is the constant:\n\n----\nBECH32_CONSTANT = 1\nBECH32M_CONSTANT = 0x2bc830a3\n----\n\nNext we notice the code that produces the checksum.  In the final step of the\nchecksum, the appropriate constant is merged into the value using an xor\noperation.  That single value is the only difference between bech32 and\nbech32m.\n\nWith the checksum created, each 5-bit character in the data part\n(including the witness version, witness program, and checksum) is\nconverted to alphanumeric characters.\n\nFor decoding back into an output script, we work in reverse.  First let's\nuse the reference library to decode two of our addresses:\n\n----\n>>> help(decode)\ndecode(hrp, addr)\n    Decode a segwit address.\n\n>>> _ = decode(\"bc\", \"bc1q9d3xa5gg45q2j39m9y32xzvygcgay4rgc6aaee\")\n>>>  _[0], bytes(_[1]).hex()\n(0, '2b626ed108ad00a944bb2922a309844611d25468')\n>>> _ = decode(\"bc\",\n        \"bc1p9nh05ha8wrljf7ru236awm4t2x0d5ctkkywmu9sclnm4t0av2vgs4k3au7\")\n>>> _[0], bytes(_[1]).hex()\n(1, '2ceefa5fa770ff24f87c5475d76eab519eda6176b11dbe1618fcf755bfac5311')\n----\n\nWe get back both the witness version and the witness program.  Those can\nbe inserted into the template for our output script:\n\n----\n<version> <program>\n----\n\nFor example:\n\n----\nOP_0 2b626ed108ad00a944bb2922a309844611d25468\nOP_1 2ceefa5fa770ff24f87c5475d76eab519eda6176b11dbe1618fcf755bfac5311\n----\n\n[WARNING]\n====\nOne\npossible mistake here to be aware of is that a witness version of `0` is\nfor `OP_0`, which uses the byte 0x00--but a witness version of `1` uses\n`OP_1`, which is byte 0x51.  Witness versions `2` through `16` use 0x52\nthrough 0x60, respectively.\n====\n\nWhen implementing bech32m encoding or decoding, we very strongly\nrecommend that you use the test vectors provided in BIP350.  We also ask\nthat you ensure your code passes the test vectors related to paying future segwit\nversions that haven't been defined yet.  This will help make your\nsoftware usable for many years to come even if you aren't able to add\nsupport for new Bitcoin features as soon as they become (((\"public key cryptography\", \"bech32 addresses\", \"bech32m\", startref=\"pub-key-bech32-bech32m\")))(((\"bech32 addresses\", \"bech32m\", startref=\"bech32-bech32m\")))(((\"addresses\", \"bech32m\", startref=\"address-bech32m\")))(((\"bech32m addresses\", startref=\"bech32m\")))(((\"encoding\", \"bech32m addresses\", startref=\"encode-bech32m\")))available.\n\n[[priv_formats]]\n==== Private Key Formats\n\nThe (((\"private keys\", \"formats\", id=\"private-key-format\")))private key\ncan be represented in a number of different formats, all of which\ncorrespond to the same 256-bit number. <<table_4-2>> shows several common\nformats used to represent private keys. Different formats are used in\ndifferent circumstances. Hexadecimal and raw binary formats are used\ninternally in software and rarely shown to users. The WIF is used for\nimport/export of keys between wallets and often used in QR code\n(barcode) representations of private keys.\n\n.Modern Relevancy of Private Key Formats\n****\nEarly Bitcoin (((\"wallets\", \"private key formats\")))wallet software generated one or more independent private\nkeys when a new user wallet was initialized.  When the initial set of\nkeys had all been used, the wallet might generate additional private\nkeys.  Individual private keys could be exported or imported.  Any time\nnew private keys were generated or imported, a new backup of the wallet\nneeded to be created.\n\nLater Bitcoin wallets began using deterministic wallets where all\nprivate keys are generated from a single seed value.  These wallets only\never need to be backed up once for typical onchain use.  However, if a\nuser exports a single private key from one of these wallets and an\nattacker acquires that key plus some nonprivate data about the wallet,\nthey can potentially derive any private key in the wallet--allowing the\nattacker to steal all of the wallet funds.  Additionally, keys cannot be\nimported into deterministic wallets.  This means almost no modern\nwallets support the ability to export or import an individual key.  The\ninformation in this section is mainly of interest to anyone needing\ncompatibility with early Bitcoin wallets.\n\nSee <<hd_wallets>> for more information.\n\n****\n\n++++\n<table id=\"table_4-2\">\n<caption>Private key representations (encoding formats)</caption>\n<thead>\n<tr>\n<th>Type</th>\n<th>Prefix</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><p>Hex</p></td>\n<td><p>None</p></td>\n<td><p>64 hexadecimal digits</p></td>\n</tr>\n<tr>\n<td><p>WIF</p></td>\n<td><p>5</p></td>\n<td><p>Base58check encoding: base58 with version prefix of 128 and 32-bit checksum</p></td>\n</tr>\n<tr>\n<td><p>WIF-compressed</p></td>\n<td><p>K or L</p></td>\n<td><p>As above, with added suffix 0x01 before encoding</p></td>\n</tr>\n</tbody>\n</table>\n++++\n\n<<table_4-3>> shows the private key generated in several different formats.\n\n++++\n<table id=\"table_4-3\">\n<caption>Example: Same key, different formats</caption>\n<thead>\n<tr>\n<th>Format</th>\n<th>Private key</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><p>Hex</p></td>\n<td><p>1e99423a4ed27608a15a2616a2b0e9e52ced330ac530edcc32c8ffc6a526aedd</p></td>\n</tr>\n<tr>\n<td><p>WIF</p></td>\n<td><p>5J3mBbAH58CpQ3Y5RNJpUKPE62SQ5tfcvU2JpbnkeyhfsYB1Jcn</p></td>\n</tr>\n<tr>\n<td><p>WIF-compressed</p></td>\n<td><p>KxFC1jmwwCoACiCAWZ3eXa96mBM6tb3TYzGmf6YwgdGWZgawvrtJ</p></td>\n</tr>\n</tbody>\n</table>\n++++\n\nAll of these representations are different ways of showing the same\nnumber, the same private key. They look different, but any one format\ncan easily be converted to any other(((\"private keys\", \"formats\", startref=\"private-key-format\"))) format.\n\n[[comp_priv]]\n==== Compressed Private Keys\n\nThe commonly(((\"private keys\", \"compressed\", id=\"private-key-compress\")))(((\"compressed private keys\", id=\"compress-private-key\"))) used term \"compressed private key\" is a misnomer, because when a private\nkey is exported as WIF-compressed, it is actually one byte _longer_ than\nan \"uncompressed\" private key. That is because the private key has an\nadded one-byte suffix (shown as 01 in hex in <<table_4-4>>), which\nsignifies that the private key is from a newer wallet and should only be\nused to produce compressed public keys. Private keys are not themselves\ncompressed and cannot be compressed. The term _compressed private key_\nreally means \"private key from which only compressed public keys should\nbe derived,\" whereas _uncompressed private key_ really means \"private\nkey from which only uncompressed public keys should be derived.\" You\nshould only refer to the export format as \"WIF-compressed\" or \"WIF\" and\nnot refer to the private key itself as \"compressed\" to avoid further\nconfusion\n\n<<table_4-4>> shows the same key, encoded in WIF and WIF-compressed formats.\n\n++++\n<table id=\"table_4-4\">\n<caption>Example: Same key, different formats</caption>\n<thead>\n<tr>\n<th>Format</th>\n<th>Private key</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><p>Hex</p></td>\n<td><p>1E99423A4ED27608A15A2616A2B0E9E52CED330AC530EDCC32C8FFC6A526AEDD</p></td>\n</tr>\n<tr>\n<td><p>WIF</p></td>\n<td><p>5J3mBbAH58CpQ3Y5RNJpUKPE62SQ5tfcvU2JpbnkeyhfsYB1Jcn</p></td>\n</tr>\n<tr>\n<td><p>Hex-compressed</p></td>\n<td><p>1E99423A4ED27608A15A2616A2B0E9E52CED330AC530EDCC32C8FFC6A526AEDD01</p></td>\n</tr>\n<tr>\n<td><p>WIF-compressed</p></td>\n<td><p>KxFC1jmwwCoACiCAWZ3eXa96mBM6tb3TYzGmf6YwgdGWZgawvrtJ</p></td>\n</tr>\n</tbody>\n</table>\n++++\n\nNotice that the hex-compressed private key format has one extra byte at\nthe end (01 in hex). While the base58 encoding version prefix is the\nsame (0x80) for both WIF and WIF-compressed formats, the addition of one\nbyte on the end of the number causes the first character of the base58\nencoding to change from a 5 to either a _K_ or _L_. Think of this as the\nbase58 equivalent of the decimal encoding difference between the number\n100 and the number 99. While 100 is one digit longer than 99, it also\nhas a prefix of 1 instead of a prefix of 9. As the length changes, it\naffects the prefix. In base58, the prefix 5 changes to a _K_ or _L_ as\nthe length of the number increases by one byte.\n\nRemember, these formats are _not_ used interchangeably. In a newer\nwallet that implements compressed public keys, the private keys will\nonly ever be exported as WIF-compressed (with a _K_ or _L_ prefix). If\nthe wallet is an older implementation and does not use compressed public\nkeys, the private keys will only ever be exported as WIF (with a 5\nprefix). The goal here is to signal to the wallet importing these\nprivate keys whether it must search the blockchain for compressed or\nuncompressed public keys and addresses.\n\nIf a Bitcoin wallet is able to implement compressed public keys, it will\nuse those in all transactions. The private keys in the wallet will be\nused to derive the public key points on the curve, which will be\ncompressed. The compressed public keys will be used to produce Bitcoin\naddresses and those will be used in transactions. When exporting private\nkeys from a new wallet that implements compressed public keys, the WIF\nis modified, with the addition of a one-byte suffix +01+ to the private\nkey. The resulting base58check-encoded private key is called a\n\"compressed WIF\" and starts with the letter _K_ or _L_ instead of\nstarting with \"5,\" as is the case with WIF-encoded (uncompressed) keys\nfrom(((\"private keys\", \"compressed\", startref=\"private-key-compress\")))(((\"compressed private keys\", startref=\"compress-private-key\"))) older wallets.\n\n=== Advanced Keys and Addresses\n\nIn the\nfollowing sections we will look at advanced forms of keys and addresses,\nsuch as vanity addresses and paper wallets.\n\n==== Vanity Addresses\n\nVanity(((\"public key cryptography\", \"vanity addresses\", id=\"pub-key-vanity\")))(((\"vanity addresses\", id=\"vanity-addr\")))(((\"addresses\", \"vanity\", id=\"address-vanity\"))) addresses are valid Bitcoin\naddresses that contain human-readable messages. For example,\n+1LoveBPzzD72PUXLzCkYAtGFYmK5vYNR33+ is a valid address that contains\nthe letters forming the word \"Love\" as the first four base58 letters.\nVanity addresses require generating and testing billions of candidate\nprivate keys until a Bitcoin address with the desired pattern is found.\nAlthough there are some optimizations in the vanity generation\nalgorithm, the process essentially involves picking a private key at\nrandom, deriving the public key, deriving the Bitcoin address, and\nchecking to see if it matches the desired vanity pattern, repeating\nbillions of times until a match is found.\n\nOnce a vanity address matching the desired pattern is found, the private\nkey from which it was derived can be used by the owner to spend bitcoins\nin exactly the same way as any other address. Vanity addresses are no\nless or more secure than any other address. They depend on the same\nelliptic curve cryptography (ECC) and secure hash algorithm (SHA) as any other address. You can\nno more easily find the private key of an address starting with a vanity\npattern than you can any other address.\n\nEugenia is a children's\ncharity director operating in the Philippines. Let's say that Eugenia is\norganizing a fundraising drive and wants to use a vanity Bitcoin\naddress to publicize the fundraising. Eugenia will create a vanity\naddress that starts with \"1Kids\" to promote the children's charity\nfundraiser. Let's see how this vanity address will be created and what\nit means for the security of Eugenia's charity.\n\n===== Generating vanity addresses\n\nIt's important to realize that a Bitcoin address is simply a number\nrepresented by symbols in the base58 alphabet. The search for a pattern\nlike \"1Kids\" can be seen as searching for an address in the range from\n+1Kids11111111111111111111111111111+ to\n+1Kidszzzzzzzzzzzzzzzzzzzzzzzzzzzzz+. There are approximately 58^29^\n(approximately 1.4 × 10^51^) addresses in that range, all starting with\n\"1Kids.\" <<table_4-11>> shows the range of addresses that have the\nprefix 1Kids.\n\n++++\n<table id=\"table_4-11\">\n<caption>The range of vanity addresses starting with “1Kids”</caption>\n<tbody>\n<tr>\n<td><p><strong>From</strong></p></td>\n<td><p><code>1Kids11111111111111111111111111111</code></p></td>\n</tr>\n<tr>\n<td/>\n<td><p><code>1Kids11111111111111111111111111112</code></p></td>\n</tr>\n<tr>\n<td/>\n<td><p><code>1Kids11111111111111111111111111113</code></p></td>\n</tr>\n<tr>\n<td/>\n<td><p><code>…​</code></p></td>\n</tr>\n<tr>\n<td><p><strong>To</strong></p></td>\n<td><p><code>1Kidszzzzzzzzzzzzzzzzzzzzzzzzzzzzz</code></p></td>\n</tr>\n</tbody>\n</table>\n++++\n\nLet's look at the pattern \"1Kids\" as a number and see how frequently we\nmight find this pattern in a Bitcoin address (see <<table_4-12>>). An\naverage desktop computer PC, without any specialized hardware, can\nsearch approximately 100,000 keys per second.\n\n++++\n<table id=\"table_4-12\">\n<caption>The frequency of a vanity pattern (1KidsCharity) and average search time on a desktop PC</caption>\n<thead>\n<tr>\n<th>Length</th>\n<th>Pattern</th>\n<th>Frequency</th>\n<th>Average search time</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><p>1</p></td>\n<td><p>1K</p></td>\n<td><p>1 in 58 keys</p></td>\n<td><p>&lt; 1 milliseconds</p></td>\n</tr>\n<tr>\n<td><p>2</p></td>\n<td><p>1Ki</p></td>\n<td><p>1 in 3,364</p></td>\n<td><p>50 milliseconds</p></td>\n</tr>\n<tr>\n<td><p>3</p></td>\n<td><p>1Kid</p></td>\n<td><p>1 in 195,000</p></td>\n<td><p>&lt; 2 seconds</p></td>\n</tr>\n<tr>\n<td><p>4</p></td>\n<td><p>1Kids</p></td>\n<td><p>1 in 11 million</p></td>\n<td><p>1 minute</p></td>\n</tr>\n<tr>\n<td><p>5</p></td>\n<td><p>1KidsC</p></td>\n<td><p>1 in 656 million</p></td>\n<td><p>1 hour</p></td>\n</tr>\n<tr>\n<td><p>6</p></td>\n<td><p>1KidsCh</p></td>\n<td><p>1 in 38 billion</p></td>\n<td><p>2 days</p></td>\n</tr>\n<tr>\n<td><p>7</p></td>\n<td><p>1KidsCha</p></td>\n<td><p>1 in 2.2 trillion</p></td>\n<td><p>3–4 months</p></td>\n</tr>\n<tr>\n<td><p>8</p></td>\n<td><p>1KidsChar</p></td>\n<td><p>1 in 128 trillion</p></td>\n<td><p>13–18 years</p></td>\n</tr>\n<tr>\n<td><p>9</p></td>\n<td><p>1KidsChari</p></td>\n<td><p>1 in 7 quadrillion</p></td>\n<td><p>800 years</p></td>\n</tr>\n<tr>\n<td><p>10</p></td>\n<td><p>1KidsCharit</p></td>\n<td><p>1 in 400 quadrillion</p></td>\n<td><p>46,000 years</p></td>\n</tr>\n<tr>\n<td><p>11</p></td>\n<td><p>1KidsCharity</p></td>\n<td><p>1 in 23 quintillion</p></td>\n<td><p>2.5 million years</p></td>\n</tr>\n</tbody>\n</table>\n++++\n\nAs you can see, Eugenia won't be creating the vanity address\n\"1KidsCharity\" anytime soon, even if she had access to several thousand\ncomputers. Each additional character increases the difficulty by a\nfactor of 58. Patterns with more than seven characters are usually found\nby specialized hardware, such as custom-built desktops with multiple\ngraphics processing units (GPUs).\nVanity searches on GPU systems are many orders of magnitude\nfaster than on a general-purpose CPU.\n\nAnother(((\"vanity pools\"))) way to find a vanity address is to outsource the work to a pool\nof vanity miners. A https://oreil.ly/99K81[vanity pool] is a service that\nallows those with fast hardware to earn bitcoin searching for vanity\naddresses for others. For a fee, Eugenia can outsource the search for a\nseven-character pattern vanity address and get results in a few hours\ninstead of having to run a CPU search for months.\n\nGenerating a vanity address is a brute-force exercise: try a random key,\ncheck the resulting address to see if it matches the desired pattern,\nrepeat until successful.\n\n===== Vanity address security and privacy\n\nVanity addresses(((\"privacy\", \"vanity addresses\", id=\"privacy-vanity\"))) were popular in the\nearly years of Bitcoin but have almost entirely disappeared from use as\nof 2023.  There are two likely causes for this trend:\n\nDeterministic wallets:: As we saw in <<recovery_code_intro>>, it's possible to\nback up every key in most modern wallets by simply writing down a few\nwords or characters.  This is achieved by deriving every key in the\nwallet from those words or characters using a deterministic algorithm.\nIt's not possible to use vanity addresses with a deterministic wallet\nunless the user backs up additional data for every vanity address they\ncreate.  More practically, most wallets using deterministic key\ngeneration simply don't allow importing a private key or key tweak from\na vanity generator.\n\nAvoiding address reuse:: Using a vanity address to receive multiple\npayments to the same address creates a link between all of those\npayments.  This might be acceptable to Eugenia if her nonprofit needs\nto report its income and expenditures to a tax authority anyway.\nHowever, it also reduces the privacy of people who either pay Eugenia or\nreceive payments from her.  For example, Alice may want to donate\nanonymously and Bob may not want his other customers to know that he\ngives discount pricing to Eugenia.\n\n// https://github.com/MakisChristou/vanitybech\n\nWe don't expect to see many vanity addresses in\nthe future unless the preceding problems are(((\"addresses\", \"vanity\", startref=\"address-vanity\")))(((\"vanity addresses\", startref=\"vanity-addr\")))(((\"public key cryptography\", \"vanity addresses\", startref=\"pub-key-vanity\"))) solved.\n\n[[paper_wallets]]\n==== Paper Wallets\n\nPaper wallets(((\"public key cryptography\", \"paper wallets\", id=\"pub-key-paper\")))(((\"paper wallets\", id=\"paper-wallet\")))(((\"wallets\", \"paper\", id=\"wallet-paper\"))) are private keys printed on paper.\nOften the paper wallet also includes the corresponding Bitcoin address\nfor convenience, but this is not necessary because it can be derived\nfrom the private key.\n\n[WARNING]\n====\nPaper wallets are an OBSOLETE technology and are dangerous for most\nusers. There are many subtle pitfalls involved in generating them, not least of which is the possibility that the generating code is compromised\nwith a \"back door.\" Many bitcoins have been stolen this way. Paper\nwallets are shown here for informational purposes only and should not be\nused for storing bitcoin. Use a recovery code to back up your\nkeys, possibly with a hardware signing device to store keys and sign transactions. DO NOT\nUSE PAPER [.keep-together]#WALLETS.#\n====\n\n\nPaper wallets come in many designs and sizes, with many different\nfeatures. <<paper_wallet_simple>> shows a sample paper wallet.\n\n[[paper_wallet_simple]]\n.An example of a simple paper wallet.\nimage::images/mbc3_0410.png[]\n\nSome are intended to be given as gifts and have seasonal themes, such as\nChristmas and New Year's. Others are designed for storage in a\nbank vault or safe with the private key hidden in some way, either with\nopaque scratch-off stickers or folded and sealed with tamper-proof\nadhesive foil.  Other designs feature additional copies of the key and\naddress, in the form of detachable stubs similar to ticket stubs,\nallowing you to store multiple copies to protect against fire, flood, or\nother natural disasters.\n\nFrom the original public-key focused design of Bitcoin to modern addresses\nand scripts like bech32m and pay to taproot--and even addresses for\nfuture Bitcoin upgrades--you've learned how the Bitcoin protocol allows\nspenders to identify the wallets that should receive their payments.\nBut when it's actually your wallet receiving the payments, you're going\nto want the assurance that you'll still have access to that money even\nif something happens to your wallet data.  In the next chapter, we'll\nlook at how Bitcoin wallets are designed to protect their funds (((\"public key cryptography\", \"paper wallets\", startref=\"pub-key-paper\")))(((\"paper wallets\", startref=\"paper-wallet\")))(((\"wallets\", \"paper\", startref=\"wallet-paper\")))from a\nvariety of threats.\n"
        },
        {
          "name": "ch05_wallets.adoc",
          "type": "blob",
          "size": 79.8125,
          "content": "//FIXME:reduce difficulty / we ramp up too quick Lesmes feedback\n[[ch05_wallets]]\n== Wallet Recovery\n\nCreating pairs of private and public keys is a crucial part of allowing\nBitcoin wallets to receive and spend bitcoins.  But losing access to a\nprivate key can make it impossible for anyone to ever spend the bitcoins\nreceived to the corresponding public key.  Wallet and protocol\ndevelopers over the years have worked to design systems that allow users\nto recover access to their bitcoins after a problem without compromising\nsecurity the rest of the time.\n\nIn(((\"wallets\", \"key generation\", \"independent\", id=\"wallet-keygen-independent\")))(((\"key generation\", \"independent\", id=\"keygen-independent\")))(((\"independent key generation\", id=\"independent-keygen\")))(((\"public key cryptography\", \"wallet recovery key generation\", see=\"key generation\"))) this chapter, we'll examine some of the different methods employed by\nwallets to prevent the loss of data from becoming a loss of money.\nSome solutions have almost no downsides and are universally adopted by\nmodern wallets.  We'll simply recommend those solutions as best\npractices.  Other solutions have both advantages and disadvantages,\nleading different wallet authors to make different trade-offs.\nIn those cases, we'll describe the various options available.\n\n=== Independent Key Generation\n\n++++\n<p class=\"fix_tracking2\">\nWallets for physical cash hold that cash,\nso it's unsurprising that many people mistakenly believe that\nBitcoin wallets contain bitcoins.  In fact, what many people call a\nBitcoin wallet—which we call a <em>wallet database</em> to distinguish it\nfrom wallet applications—contains only keys.  Those keys are associated\nwith bitcoins recorded on the blockchain.  By proving to Bitcoin full nodes that you\ncontrol the keys, you can spend the associated bitcoins.\n</p>\n++++\n\nSimple wallet databases contain both the public keys to which bitcoins\nare received and the private keys that allow creating the signatures\nnecessary to authorize spending those bitcoins.  Other wallets' databases\nmay contain only public keys, or only some of the private keys necessary\nto authorize a spending transaction.  Their wallet applications produce\nthe necessary signatures by working with external tools, such as\nhardware signing devices or other wallets in a multisignature scheme.\n\nIt's possible for a wallet application to independently generate each of\nthe wallet keys it later plans to use, as illustrated in\n<<Type0_wallet>>.  All early Bitcoin wallet applications did\nthis, but it required users to back up the wallet database each time they\ngenerated and distributed new keys, which could be as often as each time\nthey generated a new address to receive a new payment.  Failure to back\nup the wallet database on time would lead to the user losing access to\nany funds received to keys that had not been backed up.\n\nFor each independently generated key, the user would need to back up\nabout 32 bytes, plus overhead.  Some users and wallet applications tried\nto minimize the amount of data that needed to be backed up\nby only using a single key.  Although that can be secure, it severely\nreduces the privacy of that user and all of the people with whom they\ntransact.  People who valued their privacy and those of their peers\ncreated new key pairs for each transaction, producing wallet databases\nthat could only reasonably be backed up using digital media.\n\n[[Type0_wallet]]\n[role=\"width-60\"]\n.Nondeterministic key generation: a collection of independently generated keys stored in a wallet database.\nimage::images/mbc3_0501.png[\"Non-Deterministic Wallet\"]\n\nModern wallet applications don't independently generate keys but instead\nderive them from a single random seed using a (((\"wallets\", \"key generation\", \"independent\", startref=\"wallet-keygen-independent\")))(((\"key generation\", \"independent\", startref=\"keygen-independent\")))(((\"independent key generation\", startref=\"independent-keygen\")))repeatable (deterministic)\nalgorithm.\n\n==== Deterministic Key Generation\n\nA hash function(((\"wallets\", \"key generation\", \"deterministic\", id=\"wallet-keygen-determine\")))(((\"key generation\", \"deterministic\", id=\"keygen-determine\")))(((\"deterministic key generation\", id=\"determine-keygen\")))(((\"hash functions\", \"deterministic key generation\", id=\"hash-determine\"))) will always produce the same output when given the same\ninput, but if the input is changed even slightly, the output will be\ndifferent.  If the function is cryptographically secure, nobody should\nbe able to predict the new output--not even if they know the new input.\n\nThis allows us to take one random value and transform it into a\npractically unlimited number of seemingly random values.  Even more\nuseful, later using the same hash function with the same (((\"seeds\")))input\n(called a _seed_) will produce the same seemingly random values:\n\n----\n# Collect some entropy (randomness)\n$ dd if=/dev/random count=1 status=none | sha256sum\nf1cc3bc03ef51cb43ee7844460fa5049e779e7425a6349c8e89dfbb0fd97bb73  -\n\n# Set our seed to the random value\n$ seed=f1cc3bc03ef51cb43ee7844460fa5049e779e7425a6349c8e89dfbb0fd97bb73\n\n# Deterministically generate derived values\n$ for i in {0..2} ; do echo \"$seed + $i\" | sha256sum ; done\n50b18e0bd9508310b8f699bad425efdf67d668cb2462b909fdb6b9bd2437beb3  -\na965dbcd901a9e3d66af11759e64a58d0ed5c6863e901dfda43adcd5f8c744f3  -\n19580c97eb9048599f069472744e51ab2213f687d4720b0efc5bb344d624c3aa  -\n----\n\nIf we use the derived values as our private keys, we can later generate\nexactly those same private keys by using our seed value with the\nalgorithm we used before.  A user of deterministic key generation can\nback up every key in their wallet by simply recording their seed and\na reference to the deterministic algorithm they used.  For example, even\nif Alice has a million bitcoins received to a million different\naddresses, all she needs to back up in order to later recover access to\nthose bitcoins is:\n\n----\nf1cc 3bc0 3ef5 1cb4 3ee7 8444 60fa 5049\ne779 e742 5a63 49c8 e89d fbb0 fd97 bb73\n----\n\nA logical diagram of basic sequential deterministic key generation is\nshown in <<Type1_wallet>>.  However, modern wallet applications have a\nmore clever way of accomplishing this that allows public keys to be\nderived separately from their corresponding private keys, making it\npossible to store private keys more securely than (((\"wallets\", \"key generation\", \"deterministic\", startref=\"wallet-keygen-determine\")))(((\"key generation\", \"deterministic\", startref=\"keygen-determine\")))(((\"deterministic key generation\", startref=\"determine-keygen\")))(((\"hash functions\", \"deterministic key generation\", startref=\"hash-determine\")))public keys.\n\n[[Type1_wallet]]\n[role=\"width-70\"]\n.Deterministic key generation: a deterministic sequence of keys derived from a seed for a wallet database.\nimage::images/mbc3_0502.png[\"Deterministic Wallet\"]\n\n\n[[public_child_key_derivation]]\n==== Public Child Key Derivation\n\nIn <<public_key_derivation>>, we learned(((\"wallets\", \"key generation\", \"public child key derivation\", id=\"wallet-keygen-public-child\")))(((\"key generation\", \"public child key derivation\", id=\"keygen-public-child\")))(((\"public child key derivation\", id=\"public-child-derive\")))(((\"child key pair derivation\", id=\"child-key-pair\"))) how to create a public key from a private key\nusing elliptic curve cryptography (ECC).  Although operations on an\nelliptic curve are not intuitive, they are analogous to the addition,\nsubtraction, and multiplication operations used in regular\narithmetic.  In other words, it's possible to add or subtract from a\npublic key, or to multiply it.  Consider the operation we used in\n<<public_key_derivation>> for\ngenerating a public key (_K_) from a private key (_k_) using the generator\npoint (_G_):\n\n[latexmath]\n++++\n\\begin{equation}\n{K = k \\times G}\n\\end{equation}\n++++\n\nIt's possible to create a derived key pair, called a child key pair, by\nsimply adding the same value to both sides of the equation:\n\n////\n[latexmath]\n++++\n\\begin{equation}\nK + (123 \\times G) =\\!\\!\\!= (k + 123) \\times G\n\\end{equation}\n++++\n////\n\n++++\n<div data-type=\"equation\">\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" alttext=\"upper K plus left-parenthesis 123 times upper G right-parenthesis equals equals left-parenthesis k plus 123 right-parenthesis times upper G\" display=\"block\">\n  <mrow>\n    <mi>K</mi>\n    <mo>+</mo>\n    <mo>(</mo>\n    <mn>123</mn>\n    <mo>×</mo>\n    <mi>G</mi>\n    <mo>)</mo>\n    <mo>==</mo>\n    <mo>(</mo>\n    <mi>k</mi>\n    <mo>+</mo>\n    <mn>123</mn>\n    <mo>)</mo>\n    <mo>×</mo>\n    <mi>G</mi>\n  </mrow>\n</math>\n</div>\n++++\n\n\n[TIP]\n====\nIn equations throughout this book, we use a single equals sign for\noperations such as _K_ = _k_ × _G_ where the value of a variable is\ncalculated.  We use a double equals sign to show both sides of an\nequation are equivalent, or that an operation should return false (not\ntrue) if the two sides aren't equivalent.\n====\n\nAn interesting consequence of this is that adding 123 to the public\nkey can be done using entirely public information.  For example, Alice\ngenerates public key _K_ and gives it to Bob.  Bob doesn't know the\nprivate key, but he does know the global constant _G_, so he can add any\nvalue to the public key to produce a derived public child key.  If he\nthen tells Alice the value he added to the public key, she can add the\nsame value to the private key, producing a derived private child key\nthat corresponds to the public child key Bob created.\n\nIn other words, it's possible to create child public keys even if you\ndon't know anything about the parent private key.  The value added to a\npublic key is (((\"key tweaks\")))known as a _key tweak._  If a deterministic algorithm is\nused for generating the key tweaks, then it's possible for someone\nwho doesn't know the private key to create an essentially unlimited\nsequence of public child keys from a single public parent key. The\nperson who controls the private parent key can then use the same key\ntweaks to create all the corresponding private child keys.\n\nThis technique is commonly used to separate wallet application\nfrontends (which don't require private keys) from signing operations\n(which do require private keys).  For example, Alice's frontend\ndistributes her public keys to people wanting to pay her.  Later, when\nshe wants to spend the received money, she can provide the key tweaks\nshe used(((\"hardware signing devices\"))) to a _hardware signing device_ (sometimes confusingly called a\n_hardware wallet_) that securely stores her original private key.  The\nhardware signer uses the tweaks to derive the necessary child private\nkeys and uses them to sign the transactions, returning the signed\ntransactions to the less-secure frontend for broadcast to the Bitcoin\nnetwork.\n\nPublic child key derivation can produce a linear sequence of keys\nsimilar to the previously seen <<Type1_wallet>>, but modern wallet\napplications use one more trick to provide a tree of keys instead a\nsingle sequence, as described in the(((\"wallets\", \"key generation\", \"public child key derivation\", startref=\"wallet-keygen-public-child\")))(((\"key generation\", \"public child key derivation\", startref=\"keygen-public-child\")))(((\"public child key derivation\", startref=\"public-child-derive\")))(((\"child key pair derivation\", startref=\"child-key-pair\"))) following section.\n\n[[hd_wallets]]\n==== Hierarchical Deterministic (HD) Key Generation (BIP32)\n\nEvery (((\"wallets\", \"key generation\", \"HD (hierarchical deterministic)\")))(((\"key generation\", \"HD (hierarchical deterministic)\")))(((\"HD (hierarchical deterministic) key generation\")))(((\"BIP32 HD (hierarchical deterministic) key generation\", primary-sortas=\"BIP032\")))modern Bitcoin wallet of which we're aware uses hierarchical\ndeterministic (HD) key generation by default.  This standard, defined in\nBIP32, uses deterministic key generation and optional public child key\nderivation with an algorithm that produces a tree of keys.\nIn this tree, any key can be the parent of a sequence of child keys, and\nany of those child keys can be a parent for another sequence of\nchild keys (grandchildren of the original key).  There's no arbitrary\nlimit on the depth of the tree.  This tree structure is illustrated in\n<<Type2_wallet>>.\n\n[[Type2_wallet]]\n.HD wallet: a tree of keys generated from a single seed.\nimage::images/mbc3_0503.png[\"HD wallet\"]\n\nThe tree structure can be used to express additional\norganizational meaning, such as when a specific branch of subkeys is\nused to receive incoming payments and a different branch is used to\nreceive change from outgoing payments. Branches of keys can also be used\nin corporate settings, allocating different branches to departments,\nsubsidiaries, specific functions, or accounting categories.\n\nWe'll provide a detailed exploration of HD wallets in <<hd_wallet_details>>.\n\n==== Seeds and Recovery Codes\n\nHD wallets(((\"wallets\", \"recovery codes\", id=\"wallet-recovery2\")))(((\"recovery codes\", id=\"recovery-code2\"))) are a very powerful mechanism for managing many\nkeys all derived from a single seed.  If your wallet database\nis ever corrupted or lost, you can regenerate all of the private keys\nfor your wallet using your (((\"seeds\")))original seed.  But, if someone else gets\nyour seed, they can also generate all of the private keys, allowing them\nto steal all of the bitcoins from a single-sig wallet and reduce the\nsecurity of bitcoins in multisignature wallets.  In this section, we'll\nlook at several _recovery codes_, which are intended to make backups\neasier and safer.\n\nAlthough seeds are large random numbers, usually 128 to 256 bits, most\nrecovery codes use human-language words.  A large part of the motivation\nfor using words was to make a recovery code easy to remember.  For\nexample, consider the recovery code encoded using both hexadecimal and\nwords in <<hex_seed_vs_recovery_words>>.\n\n[[hex_seed_vs_recovery_words]]\n.A seed encoded in hex and in English words\n====\n----\nHex-encoded:\n0C1E 24E5 9177 79D2 97E1 4D45 F14E 1A1A\n\nWord-encoded:\narmy van defense carry jealous true\ngarbage claim echo media make crunch\n----\n====\n\nThere may be cases where (((\"memorizing recovery codes\")))remembering a recovery code is a powerful\nfeature, such as when you are unable to transport physical belongings\n(like a recovery code written on paper) without them being seized or\ninspected by an outside party that might steal your bitcoins.  However,\nmost of the time, relying on memory alone is dangerous:\n\n- If you forget your recovery code and lose access to your original\n  wallet database, your bitcoins are lost to you forever.\n\n- If you die or suffer a severe injury, and your heirs don't have access\n  to your original wallet database, they won't be able to inherit your\n  bitcoins.\n\n- If someone thinks you have a recovery code memorized that will give\n  them access to bitcoins, they may attempt to coerce you into\n  disclosing that code.  As of this writing, Bitcoin contributor Jameson\n  Lopp has\n  https://oreil.ly/aw5XM[documented]\n  over 100 physical attacks against suspected owners of bitcoin and\n  other digital assets, including at least three deaths and numerous\n  occasions where someone was tortured, held hostage, or had their\n  family threatened.\n\n[TIP]\n====\nEven if you use a type of recovery code that was designed for easy\nmemorization, we very strongly encourage you to consider writing it down.\n====\n\nSeveral (((\"wallets\", \"recovery codes\", \"types of\", id=\"wallet-recovery-type\")))(((\"recovery codes\", \"types of\", id=\"recovery-code-type\")))different types of recovery codes are in wide use as of this\nwriting:\n\nBIP39::\n  The most (((\"BIP39 recovery codes\", primary-sortas=\"BIP039\")))popular method for generating recovery codes for the\n  past decade, BIP39 involves generating a random sequence of bytes,\n  adding a checksum to it, and encoding the data into a series of 12 to\n  24 words (which may be localized to a user's native language).  The\n  words (plus an optional passphrase) are run through a _key-stretching\n  function_, and the output is used as a seed.  BIP39 recovery codes have\n  several shortcomings, which later schemes attempt to address.\n\nElectrum v2::\n  Used in(((\"Electrum v2 recovery codes\"))) the Electrum wallet (version 2.0 and above), this word-based\n  recovery code has several advantages over BIP39.  It doesn't rely on a\n  global word list that must be implemented by every version of every\n  compatible program, plus its recovery codes include a version number that\n  improves reliability and efficiency.  Like BIP39, it supports an optional\n  passphrase (which Electrum calls a _seed extension_) and uses the same\n  key-stretching function.\n\nAezeed::\n  Used in (((\"Aezeed recovery codes\")))the LND wallet, this is another word-based recovery code that\n  offers improvements over BIP39.  It includes two version numbers: one\n  is internal and eliminates several issues with upgrading wallet\n  applications (like Electrum v2's version number); the other version\n  number is external, which can be incremented to change the underlying\n  cryptographic properties of the recovery code.  \n  It also includes a _wallet birthday_\n  in the recovery code, a reference to the date when the user created\n  the wallet database. This allows a restoration process to find all of\n  the funds associated with a wallet without scanning the entire\n  blockchain, which is especially useful for privacy-focused lightweight clients.\n  It includes support for changing the passphrase or changing other\n  aspects of the recovery code without needing to move funds to a new\n  seed--the user need only back up a new recovery code.  One\n  disadvantage compared to Electrum v2 is that, like BIP39, it depends\n  on both the backup and the recovery software supporting the same\n  word list.\n\n[role=\"less_space pagebreak-before\"]\nMuun::\n  Used in (((\"Muun recovery codes\")))the Muun wallet, which defaults to requiring spending\n  transactions be signed by multiple keys, this is a nonword code that\n  must be accompanied by additional information (which Muun currently\n  provides in a PDF).  This recovery code is unrelated to the seed and\n  is instead used to decrypt the private keys [.keep-together]#contained# in the PDF.\n  Although this is unwieldy compared to the BIP39, Electrum v2, and\n  Aezeed recovery codes, it provides support for new technologies and\n  standards that are becoming more common in new wallets, such as\n  Lightning Network (LN) support, output script descriptors, and miniscript.\n\nSLIP39::\n  A successor (((\"SLIP39 recovery codes\")))to BIP39 with some of the same authors, SLIP39 allows\n  a single seed to be distributed using multiple recovery codes that can\n  be stored in different places (or by different people).  When you\n  create the recovery codes, you can specify how many will be required\n  to recover the seed.  For example, you create five recovery codes but\n  only require three of them to recover the seed.  SLIP39 provides\n  support for an optional passphrase, depends on a global word list, and\n  doesn't directly provide versioning.\n\n[NOTE]\n====\nA new system(((\"Codex32 recovery codes\"))) for distributing recovery codes with similarities to SLIP39\nwas proposed during the writing of this book.  Codex32 allows creating\nand validating recovery codes with nothing except printed instructions,\nscissors, a precision knife, brass fasteners, and a pen--plus privacy\nand a few hours of spare time.  Alternatively, those who trust computers can create recovery codes\ninstantly using software on a digital device.  You can create up to 31\nrecovery codes to be stored in different places, specifying how many of\nthem will be required in order to recover the seed.  As a new proposal,\ndetails about Codex32 may change significantly before this book is\npublished, so we encourage (((\"wallets\", \"recovery codes\", \"types of\", startref=\"wallet-recovery-type\")))(((\"recovery codes\", \"types of\", startref=\"recovery-code-type\")))any readers interested in distributed\nrecovery codes to investigate its https://oreil.ly/Xx_Zq[current\nstatus].\n====\n\n.Recovery Code Passphrases\n****\nThe BIP39, (((\"wallets\", \"recovery codes\", \"passphrases\", id=\"wallet-recovery-passphrase\")))(((\"recovery codes\", \"passphrases\", id=\"recovery-code-passphrase\")))(((\"passphrases (for recovery codes)\", id=\"passphrase\")))Electrum v2, Aezeed, and SLIP39 schemes may all be used with an\noptional passphrase.  If the only place you keep this passphrase is in\nyour memory, it has the same advantages and disadvantages as memorizing\nyour recovery code.  However, there's a further set of trade-offs\nspecific to the way the passphrase is used by the recovery code.\n\nThree of the schemes (BIP39, Electrum v2, and SLIP39) do not include the optional passphrase in the\nchecksum they use to protect against data entry mistakes.  Every\npassphrase (including not using a passphrase) will result in producing a\nseed for a BIP32 tree of keys, but they won't be the same trees.\nDifferent passphrases will result in different keys.  That can be a\npositive or a negative, depending on your perspective:\n\n- On the positive, if someone obtains your recovery code (but not your\n  passphrase), they will see a valid BIP32 tree of keys.\n  If you prepared for that contingency and sent some bitcoins to the\n  nonpassphrase tree, they will steal that money.  Although having some\n  of your bitcoins stolen is normally a bad thing, it can also provide\n  you with a warning that your recovery code has been compromised,\n  allowing you to investigate and take corrective measures.\n  The ability to create multiple passphrases for the same recovery code\n  that all look valid is a type of _plausible deniability_.\n\n- On the negative, if you're coerced to give an attacker a recovery\n  code (with or without a passphrase) and it doesn't yield the amount of\n  bitcoins they expected, they may continue trying to coerce you until\n  you give them a different passphrase with access to more bitcoins.\n  Designing for plausible deniability means there's no way to prove to\n  an attacker that you've revealed all of your information, so they may\n  continue trying to coerce you even after you've given them all of\n  your bitcoins.\n\n- An additional negative is the reduced amount of error detection.  If\n  you enter a slightly wrong passphrase when restoring from a backup,\n  your wallet can't warn you about the mistake.  If you were expecting\n  a balance, you will know something is wrong when your wallet\n  application shows you a zero balance for the regenerated key tree.\n  However, novice users may think their money was permanently lost and do\n  something foolish, such as give up and throw away their recovery code.\n  Or, if you were actually expecting a zero balance, you might use the\n  wallet application for years after your mistake until the next time\n  you restore with the correct passphrase and see a zero balance.\n  Unless you can figure out what typo you previously made, your funds\n  are gone.\n\nUnlike the other schemes, the Aezeed seed encryption scheme\nauthenticates its optional passphrase and will return an error if you\nprovide an incorrect value.  This eliminates plausible deniability, adds\nerror detection, and makes it possible to prove that the passphrase has been\nrevealed.\n\nMany users and developers disagree on which approach is better, with\nsome strongly in favor of plausible deniability and others preferring the\nincreased safety that error detection gives novice users and those under\nduress.  We suspect the debate will continue for as long as recovery\ncodes continue to be widely (((\"wallets\", \"recovery codes\", startref=\"wallet-recovery2\")))(((\"recovery codes\", startref=\"recovery-code2\")))(((\"passphrases (for recovery codes)\", startref=\"passphrase\")))(((\"wallets\", \"recovery codes\", \"passphrases\", startref=\"wallet-recovery-passphrase\")))(((\"recovery codes\", \"passphrases\", startref=\"recovery-code-passphrase\")))used.\n****\n\n==== Backing Up Nonkey Data\n\nThe (((\"wallets\", \"nonkey data, backing up\", id=\"wallet-nonkey-backups\")))(((\"nonkey data, backing up\", id=\"nonkey-backups\")))(((\"backing up\", \"nonkey data\", id=\"backup-nonkey\")))most important data in a wallet database is its private keys.  If\nyou lose access to the private keys, you lose the ability to spend your\nbitcoins.  Deterministic key derivation and recovery codes provide a\nreasonably robust solution for backing up and recovering your keys and\nthe bitcoins they control.  However, it's important to consider that\nmany wallet databases store more than\njust keys--they also store user-provided information about every\ntransaction they sent or received.\n\nFor example, when Bob creates a new address as part of sending an\ninvoice to Alice, he (((\"labels, backing up\", id=\"label-backup\")))adds a _label_ to the address he generates\nso that he can distinguish her payment\nfrom other payments he receives.  When Alice pays Bob's address, she\nlabels the transaction as paying Bob for the same reason.  Some wallets\nalso add other useful information to transactions, such as the current\nexchange rate, which can be useful for calculating taxes in some\njurisdictions.  These labels are stored entirely within their own\nwallets--not shared with the network--protecting their privacy\nand keeping unnecessary personal data out of the blockchain.  For\nan example, see <<alice_tx_labels>>.\n\n++++\n<table id=\"alice_tx_labels\">\n<caption>Alice’s transaction history with each transaction labeled</caption>\n<thead>\n<tr>\n<th>Date</th>\n<th>Label</th>\n<th>BTC</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><p>2023-01-01</p></td>\n<td><p>Bought bitcoins from Joe</p></td>\n<td><p>+0.00100</p></td>\n</tr>\n<tr>\n<td><p>2023-01-02</p></td>\n<td><p>Paid Bob for podcast</p></td>\n<td><p>−0.00075</p></td>\n</tr>\n</tbody>\n</table>\n++++\n\nHowever, because address and transaction labels are stored only in each\nuser's wallet database and because they aren't deterministic, they can't\nbe restored by using just a recovery code.  If the only recovery is\nseed-based, then all the user will see is a list of approximate\ntransaction times and bitcoin amounts.  This can make it quite difficult\nto figure out how you used your money in the past.  Imagine reviewing a\nbank or credit card statement from a year ago that had the date and\namount of every transaction listed but a blank entry for the\n\"description\" field.\n\nWallets should provide their users with a convenient way to back up\nlabel data.  That seems obvious, but there are a number of\nwidely used wallet applications that make it easy to create and use\nrecovery codes but that provide no way to back up or restore label\ndata.\n\nAdditionally, it may be useful for wallet applications to provide a\nstandardized format to export labels so that they can be used in other\napplications (e.g., accounting software).  A standard for that format is\nproposed in BIP329.\n\nWallet applications implementing additional protocols beyond basic\nBitcoin support may also need or want to store other data.  For example,\nas of 2023, an increasing number of applications have added support for\nsending and receiving transactions over the Lightning Network (LN).\nAlthough the LN protocol provides a method to recover\nfunds in the event of a data loss, called _static channel backups_, it\ncan't guarantee results.  If the node your wallet connects to realizes\nyou've lost data, it may be able to steal bitcoins from you.  If it\nloses its wallet database at the same time you lose your database, and\nneither of you has an adequate backup, you'll both lose funds.\n\nAgain, this means users and wallet applications need to do more than just back up a\nrecovery code.\n\nOne solution implemented by a few wallet applications is to frequently\nand automatically create complete backups of their wallet database\nencrypted by one of the keys derived from their seed.  Bitcoin keys must\nbe unguessable and modern encryption algorithms are considered very\nsecure, so nobody should be able to open the encrypted backup except\nsomeone who can generate the seed. This makes it safe to store the backup on\nuntrusted computers such as cloud hosting services or even random\nnetwork peers.\n\nLater, if the original wallet database is lost, the user can enter their\nrecovery code into the wallet application to restore their seed.  The\napplication can then retrieve the latest backup file, regenerate the\nencryption key, decrypt the backup, and restore all of the user's labels\nand additional (((\"wallets\", \"nonkey data, backing up\", startref=\"wallet-nonkey-backups\")))(((\"nonkey data, backing up\", startref=\"nonkey-backups\")))(((\"backing up\", \"nonkey data\", startref=\"backup-nonkey\")))protocol data.\n\n==== Backing Up Key Derivation Paths\n\nIn a (((\"wallets\", \"key generation\", \"backing up derivation paths\", id=\"wallet-keygen-backups\")))(((\"key generation\", \"backing up derivation paths\", id=\"keygen-backups\")))(((\"backing up\", \"key derivation paths\", id=\"backup-key-derive\")))BIP32 tree of keys, there are approximately four billion first-level\nkeys; each of those keys can have its own four billion children, with\nthose children each potentially having four billion children of their\nown, and so on.  It's not possible for a wallet application to generate\neven a small fraction of every possible key in a BIP32 tree, which means\nthat recovering from data loss requires knowing more than just the\nrecovery code, the algorithm for obtaining your seed (e.g., BIP39), and\nthe deterministic key derivation algorithm\n(e.g., BIP32)—it also requires knowing what paths in the tree of keys\nyour wallet application used for generating the specific keys it distributed.\n\nTwo solutions to this problem have been adopted.  The first is using\nstandard paths.  Every time there's a change related to the addresses\nthat wallet applications might want to generate, someone creates a BIP\ndefining what key derivation path to use.  For example, BIP44 defines\n`m/44'/0'/0'` as the path to use for keys in P2PKH scripts (a\nlegacy address).  A wallet application implementing this standard uses\nthe keys in that path both when it is first started and after a\nrestoration from a recovery code.  We call(((\"implicit paths\", id=\"implicit-path\"))) this solution _implicit\npaths_. Several popular implicit paths defined by BIPs are shown in <<bip_implicit_paths>>\n\n++++\n<table id=\"bip_implicit_paths\">\n<caption>Implicit script paths defined by various BIPs</caption>\n<thead>\n<tr>\n<th>Standard</th>\n<th>Script</th>\n<th>BIP32 path</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><p>BIP44</p></td>\n<td><p>P2PKH</p></td>\n<td><p><code>m/44'/0'/0'</code></p></td>\n</tr>\n<tr>\n<td><p>BIP49</p></td>\n<td><p>Nested P2WPKH</p></td>\n<td><p><code>m/49'/1'/0'</code></p></td>\n</tr>\n<tr>\n<td><p>BIP84</p></td>\n<td><p>P2WPKH</p></td>\n<td><p><code>m/84'/0'/0'</code></p></td>\n</tr>\n<tr>\n<td><p>BIP86</p></td>\n<td><p>P2TR Single-key</p></td>\n<td><p><code>m/86'/0'/0'</code></p></td>\n</tr>\n</tbody>\n</table>\n++++\n\n[role=\"less_space pagebreak-before\"]\nThe second solution is to back up the path information with the recovery\ncode, making it clear which path is used with which scripts.  We (((\"explicit paths\", id=\"explicit-path\")))call\nthis _explicit paths_.\n\nThe advantage of implicit paths is that users don't need to keep a record\nof what paths they use.  If the user enters their recovery code into the\nsame wallet application they previously used, of the same version or\nhigher, it will automatically regenerate keys for the same paths it\npreviously used.\n\nThe disadvantage of implicit scripts is their inflexibility.  When a\nrecovery code is entered, a wallet application must generate the keys\nfor every path it supports and it must scan the blockchain for\ntransactions involving those keys, otherwise it might not find all of a\nuser's transactions.  This is wasteful in wallets that support many\nfeatures each with their own path if the user only tried a few of those\nfeatures.\n\nFor implicit path recovery codes that don't include a version number,\nsuch as BIP39 and SLIP39, a new version of a wallet application that drops support\nfor an older path can't warn users during the restore process that some\nof their funds may not be found.  The same problem happens in reverse if\na user enters their recovery code into older software: it won't find\nnewer paths to which the user may have received funds.  Recovery codes\nthat include version information, such as Electrum v2 and Aezeed, can\ndetect that a user is entering an older or newer recovery code and\ndirect them to appropriate resources.\n\nThe final consequence of implicit paths is that they can only include\ninformation that is either universal (such as a standardized path) or\nderived from the seed (such as keys).  Important nondeterministic\ninformation that's specific to a certain user can't be restored using\na recovery code.  For example, Alice, Bob, and Carol receive funds that\ncan only be spent with signatures from two out of three of them.  Although\nAlice only needs either Bob's or Carol's signature to spend, she needs\nboth of their public keys in order to find their joint funds on the\nblockchain.  That means each of them must back up the public keys for\nall three of them.  As multisignature and other advanced scripts become\nmore common on Bitcoin, the inflexibility of implicit paths becomes more\nsignificant.\n\nThe advantage of explicit paths is that they can describe exactly what\nkeys should be used with what scripts.  There's no need to support\noutdated scripts, no problems with backward or forward compatibility,\nand any extra information (like the public keys of other users) can be\nincluded directly.  Their disadvantage is that they require users to back\nup additional information along with their recovery code.  The\nadditional information usually can't compromise a user's security, so it\ndoesn't require as much protection as the recovery code, although it can\nreduce their privacy and does require some protection.\n\n[role=\"less_space pagebreak-before\"]\nAlmost all wallet applications that use explicit paths as of this\nwriting use the _output script descriptors_ standard (called\n_descriptors_ for short) as specified in BIPs 380, 381, 382, 383, 384,\n385, 386, and 389.  Descriptors\ndescribe a script and the keys (or key paths) to be used with it.\nA few example descriptors are shown in <<sample_descriptors>>.\n\n++++\n<table id=\"sample_descriptors\">\n<caption>Sample descriptors from Bitcoin Core documentation (with elision)</caption>\n<thead>\n<tr>\n<th>Descriptor</th>\n<th>Explanation</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><p><code>pkh(02c6…​9ee5)</code></p></td>\n<td><p>P2PKH script for the provided public key</p></td>\n</tr>\n<tr>\n<td><p><code>sh(multi(2,022f…​2a01,03ac…​ccbe))</code></p></td>\n<td><p>P2SH multisignature requiring two signatures corresponding to these two keys</p></td>\n</tr>\n<tr>\n<td><p><code>pkh([d34db33f/44'/0'/0']xpub6ERA…​RcEL/1/*)</code></p></td>\n<td><p>P2PKH scripts for the BIP32 <code>d34db33f</code> with the extended public key (xpub) at the path <code>M/44'/0'/0'</code>, which is <code>xpub6ERA…​RcEL</code>, using the keys at <code>M/1/*</code> of that xpub</p></td>\n</tr>\n</tbody>\n</table>\n++++\n\n\nIt has long been the trend for wallet applications designed only for\nsingle signature scripts to use implicit paths.  Wallet applications\ndesigned for multiple signatures or other advanced scripts are\nincreasingly adopting support for explicit paths using descriptors.\nApplications that do both will usually conform to the standards for\nimplicit paths and also provide (((\"wallets\", \"key generation\", \"backing up derivation paths\", startref=\"wallet-keygen-backups\")))(((\"key generation\", \"backing up derivation paths\", startref=\"keygen-backups\")))(((\"backing up\", \"key derivation paths\", startref=\"backup-key-derive\")))(((\"implicit paths\", startref=\"implicit-path\")))(((\"explicit paths\", startref=\"explicit-path\")))descriptors.\n\n=== A Wallet Technology Stack in Detail\n\nDevelopers of modern wallets can choose from a variety of different\ntechnologies to help users create and use backups--and new solutions\nappear every year.  Instead of going into detail about each of the\noptions we described earlier in this chapter, we'll focus the rest of\nthis chapter on the stack of technologies we think is most widely\nused in wallets as of early 2023:\n\n- BIP39 recovery codes\n- BIP32 HD key derivation\n- BIP44-style implicit paths\n\nAll of these standards have been around since 2014 or earlier, and\nyou'll have no problem finding additional resources for using them.\nHowever, if you're feeling bold, we do encourage you to investigate more\nmodern standards that may provide additional features or safety.\n\n[[recovery_code_words]]\n==== BIP39 Recovery Codes\n\nBIP39 (((\"wallets\", \"recovery codes\", id=\"wallet-recovery-bip39\")))(((\"recovery codes\", id=\"recovery-code-bip39\")))(((\"BIP39 recovery codes\", primary-sortas=\"BIP039\", id=\"bip39-recovery\")))recovery codes are word\nsequences that represent (encode) a random number used as a seed to\nderive a deterministic wallet. The sequence of words is sufficient to\nre-create the seed and from there, re-create all the\nderived keys. A wallet application that implements deterministic wallets\nwith a BIP39 recovery code will show the user a sequence of 12 to 24 words when\nfirst creating a wallet. That sequence of words is the wallet backup and\ncan be used to recover and re-create all the keys in the same or any\ncompatible wallet application. Recovery codes make it easier for users\nto back up because they are easy to read and correctly\ntranscribe.\n\n[TIP]\n====\nRecovery codes(((\"brainwallets\"))) are often confused with\n\"brainwallets.\" They are not the same. The primary difference is that a\nbrainwallet consists of words chosen by the user, whereas recovery codes\nare created randomly by the wallet and presented to the user. This\nimportant difference makes recovery codes much more secure because\nhumans are very poor sources of randomness.\n====\n\nNote that BIP39 is one implementation of a recovery code standard.\nBIP39 was proposed by the company behind the Trezor hardware wallet and\nis compatible with many other wallets applications, although certainly\nnot all.\n\nBIP39 defines the creation of a recovery code and seed, which we\ndescribe here in nine steps. For clarity, the process is split into two\nparts: steps 1 through 6 are shown in <<generating_recovery_words>> and\nsteps 7 through 9 are shown in <<recovery_to_seed>>.\n\n[[generating_recovery_words]]\n===== Generating a recovery code\n\nRecovery(((\"wallets\", \"recovery codes\", \"generating\", id=\"wallet-recovery-bip39-generate\")))(((\"recovery codes\", \"generating\", id=\"recovery-code-bip39-generate\")))(((\"BIP39 recovery codes\", \"generating\", primary-sortas=\"BIP039\", id=\"bip39-recovery-generate\")))(((\"entropy\", \"recovery code generation\", id=\"entropy-recovery-generate\"))) codes are generated automatically by the wallet application using the\nstandardized process defined in BIP39. The wallet starts from a source\nof entropy, adds a checksum, and then maps the entropy to a word list:\n\n1. Create a random sequence (entropy) of 128 to 256 bits.\n\n2. Create a checksum of the random sequence by taking the first\n(entropy-length/32) bits of its SHA256 hash.\n\n3. Add the checksum to the end of the random sequence.\n\n4. Split the result into 11-bit length segments.\n\n5. Map each 11-bit value to a word from the predefined dictionary of\n2,048 words.\n\n6. The recovery code is the sequence of words.\n\n<<generating_entropy_and_encoding>> shows how entropy is used to\ngenerate a BIP39 recovery code.\n\n[[generating_entropy_and_encoding]]\n.Generating entropy and encoding as a recovery code.\nimage::images/mbc3_0504.png[\"Generating entropy and encoding as a recovery code\"]\n\n<<table_4-5>> shows the relationship between the size of the entropy\ndata and the length of recovery code in(((\"wallets\", \"recovery codes\", \"generating\", startref=\"wallet-recovery-bip39-generate\")))(((\"recovery codes\", \"generating\", startref=\"recovery-code-bip39-generate\")))(((\"BIP39 recovery codes\", \"generating\", primary-sortas=\"BIP039\", startref=\"bip39-recovery-generate\")))(((\"entropy\", \"recovery code generation\", startref=\"entropy-recovery-generate\"))) words.\n\n++++\n<table id=\"table_4-5\">\n<caption>BIP39: entropy and word length</caption>\n<thead>\n<tr>\n<th>Entropy (bits)</th>\n<th>Checksum (bits)</th>\n<th>Entropy <strong>+</strong> checksum (bits)</th>\n<th>Recovery code words</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><p>128</p></td>\n<td><p>4</p></td>\n<td><p>132</p></td>\n<td><p>12</p></td>\n</tr>\n<tr>\n<td><p>160</p></td>\n<td><p>5</p></td>\n<td><p>165</p></td>\n<td><p>15</p></td>\n</tr>\n<tr>\n<td><p>192</p></td>\n<td><p>6</p></td>\n<td><p>198</p></td>\n<td><p>18</p></td>\n</tr>\n<tr>\n<td><p>224</p></td>\n<td><p>7</p></td>\n<td><p>231</p></td>\n<td><p>21</p></td>\n</tr>\n<tr>\n<td><p>256</p></td>\n<td><p>8</p></td>\n<td><p>264</p></td>\n<td><p>24</p></td>\n</tr>\n</tbody>\n</table>\n++++\n\n[role=\"less_space pagebreak-before\"]\n[[recovery_to_seed]]\n===== From recovery code to seed\n\nThe (((\"wallets\", \"recovery codes\", \"seed generation\", id=\"wallet-recovery-bip39-seed\")))(((\"recovery codes\", \"seed generation\", id=\"recovery-code-bip39-seed\")))(((\"BIP39 recovery codes\", \"seed generation\", primary-sortas=\"BIP039\", id=\"bip39-recovery-seed\")))(((\"entropy\", \"seed generation\", id=\"entropy-seed-generate\")))(((\"seeds\", \"generating\", id=\"seed-generate\")))(((\"key-stretching functions\", id=\"key-stretch\")))recovery code\nrepresents entropy with a length of 128 to 256 bits. The entropy is then\nused to derive a longer (512-bit) seed through the use of the\nhttps://oreil.ly/6lwbd[key-stretching function PBKDF2]. The seed produced is then used to build\na deterministic wallet and derive its keys.\n\nThe key-stretching function takes two\nparameters: the entropy and(((\"salt\"))) a _salt_. The purpose of a salt in a\nkey-stretching function is to make it difficult to build a lookup table\nenabling a brute-force attack. In the BIP39 standard, the salt has\nanother purpose--it allows the introduction of a passphrase that\nserves as an additional security factor protecting the seed, as we will\ndescribe in more detail in <<recovery_passphrase>>.\n\n[TIP]\n====\nThe key-stretching function, with its 2,048 rounds of hashing, makes it\nslightly harder to brute-force attack the recovery code using software.\nSpecial-purpose hardware is not significantly affected.  For an attacker\nwho needs to guess a user's entire recovery code, the length of the code\n(128 bits at a minimum) provides more than sufficient security.  But for\ncases where an attacker might learn a small part of the user's code,\nkey-stretching adds some security by slowing down how fast an attacker\ncan check different recovery code combinations.  BIP39's parameters were\nconsidered weak by modern standards even when it was first published\nalmost a decade ago, although that's likely a consequence of being\ndesigned for compatibility with hardware signing devices with low-powered\nCPUs.  Some alternatives to BIP39 use stronger key-stretching\nparameters, such as Aezeed's 32,768 rounds of hashing using the more\ncomplex Scrypt algorithm, although they may not be as convenient to run\non hardware signing devices.\n====\n\nThe process described in steps 7 through 9 continues from the process\ndescribed previously in <<generating_recovery_words>>:\n\n++++\n<ol start=\"7\">\n  <li>The first parameter to the PBKDF2 key-stretching function is the\n  <em>entropy</em> produced from step 6.</li>\n\n  <li>The second parameter to the PBKDF2 key-stretching function is a\n  <em>salt</em>. The salt is composed of the string constant\n  \"<code>mnemonic</code>\" concatenated with an optional user-supplied\n  passphrase string.</li>\n\n  <li>PBKDF2 stretches the recovery code and salt parameters using 2,048\n  rounds of hashing with the HMAC-SHA512 algorithm, producing a 512-bit\n  value as its final output. That 512-bit value is the seed.</li>\n</ol>\n++++\n\n<<fig_5_7>> shows how a recovery code is used to generate a seed.\n\n[[fig_5_7]]\n.From recovery code to seed.\nimage::images/mbc3_0505.png[\"From recovery code to seed\"]\n\n\nTables pass:[<a data-type=\"xref\" href=\"#bip39_128_no_pass\"\ndata-xrefstyle=\"select: labelnumber\">#bip39_128_no_pass</a>],\npass:[<a data-type=\"xref\" href=\"#bip39_128_w_pass\"\ndata-xrefstyle=\"select: labelnumber\">#bip39_128_w_pass</a>], and\npass:[<a data-type=\"xref\" href=\"#bip39_256_no_pass\"\ndata-xrefstyle=\"select: labelnumber\">#bip39_256_no_pass</a>] show\nsome examples of recovery codes and the seeds (((\"key-stretching functions\", startref=\"key-stretch\")))they produce.\n\n++++\n<table id=\"bip39_128_no_pass\">\n<caption>128-bit entropy BIP39 recovery code, no passphrase, resulting seed</caption>\n<tbody>\n<tr>\n<td><p><strong>Entropy input (128 bits)</strong></p></td>\n<td><p><code>0c1e24e5917779d297e14d45f14e1a1a</code></p></td>\n</tr>\n<tr>\n<td><p><strong>Recovery Code (12 words)</strong></p></td>\n<td><p><code>army van defense carry jealous true garbage claim echo media make crunch</code></p></td>\n</tr>\n<tr>\n<td><p><strong>Passphrase</strong></p></td>\n<td><p>(none)</p></td>\n</tr>\n<tr>\n<td><p><strong>Seed  (512 bits)</strong></p></td>\n<td><p><code>5b56c417303faa3fcba7e57400e120a0ca83ec5a4fc9ffba757fbe63fbd77a89a1a3be4</code>\n<code>c67196f57c39a88b76373733891bfaba16ed27a813ceed498804c0570</code></p></td>\n</tr>\n</tbody>\n</table>\n\n<table id=\"bip39_128_w_pass\" class=\"pagebreak-before less_space\">\n<caption>128-bit entropy BIP39 recovery code, with passphrase, resulting seed</caption>\n<tbody>\n<tr>\n<td><p><strong>Entropy input (128 bits)</strong></p></td>\n<td><p><code>0c1e24e5917779d297e14d45f14e1a1a</code></p></td>\n</tr>\n<tr>\n<td><p><strong>Recovery Code (12 words)</strong></p></td>\n<td><p><code>army van defense carry jealous true garbage claim echo media make crunch</code></p></td>\n</tr>\n<tr>\n<td><p><strong>Passphrase</strong></p></td>\n<td><p>SuperDuperSecret</p></td>\n</tr>\n<tr>\n<td><p><strong>Seed  (512 bits)</strong></p></td>\n<td><p><code>3b5df16df2157104cfdd22830162a5e170c0161653e3afe6c88defeefb0818c793dbb28</code>\n<code>ab3ab091897d0715861dc8a18358f80b79d49acf64142ae57037d1d54</code></p></td>\n</tr>\n</tbody>\n</table>\n<table id=\"bip39_256_no_pass\">\n<caption>256-bit entropy BIP39 recovery code, no passphrase, resulting seed</caption>\n<tbody>\n<tr>\n<td><p><strong>Entropy input (256 bits)</strong></p></td>\n<td><p><code>2041546864449caff939d32d574753fe684d3c947c3346713dd8423e74abcf8c</code></p></td>\n</tr>\n<tr>\n<td><p><strong>Recovery Code (24 words)</strong></p></td>\n<td><p><code>cake apple borrow silk endorse fitness top denial coil riot stay wolf\nluggage oxygen faint major edit measure invite love trap field dilemma oblige</code></p></td>\n</tr>\n<tr>\n<td><p><strong>Passphrase</strong></p></td>\n<td><p>(none)</p></td>\n</tr>\n<tr>\n<td><p><strong>Seed (512 bits)</strong></p></td>\n<td><p><code>3269bce2674acbd188d4f120072b13b088a0ecf87c6e4cae41657a0bb78f5315b33b3</code>\n<code>a04356e53d062e55f1e0deaa082df8d487381379df848a6ad7e98798404</code></p></td>\n</tr>\n</tbody>\n</table>\n++++\n\n\n.How Much Entropy Do You Need?\n****\nBIP32 allows seeds to be from 128 to 512 bits.  BIP39 accepts from 128\nto 256 bits of entropy; Electrum v2 accepts 132 bits of entropy; Aezeed\naccepts 128 bits of entropy; SLIP39 accepts either 128 or 256 bits.  The\nvariation in these numbers makes it unclear how much entropy is needed\nfor safety.  We'll try to demystify that.\n\nBIP32 extended private keys consist of a 256-bit key and a 256-bit chain\ncode, for a total of 512 bits.  That means there's a maximum of 2^512^\ndifferent possible extended private keys.  If you start with more than\n512 bits of entropy, you'll still get an extended private key containing\n512 bits of entropy--so there's no point in using more than 512 bits\neven if any of the standards we mentioned allowed that.\n\nHowever, even though there are 2^512^ different extended private keys,\nthere are only (slightly less than) 2^256^ regular private keys--and its\nthose private keys that actually secure your bitcoins.  That means, if\nyou use more than 256 bits of entropy for your seed, you still get private keys\ncontaining only 256 bits of entropy.  There may be future\nBitcoin-related protocols where extra entropy in the extended keys\nprovides extra security, but that's not currently the case.\n\nThe security strength of a Bitcoin public key is 128 bits.  An attacker\nwith a classical computer (the only kind which can be used for a\npractical attack as of this writing) would need to perform about 2^128^\noperations on Bitcoin's elliptic curve in order to find a private key\nfor another user's public key.  The implication of a security strength\nof 128 bits is that there's no apparent benefit to using more than 128\nbits of entropy (although you need to ensure your generated private\nkeys are selected uniformly from within the entire 2^256^ range of\nprivate keys).\n\nThere is one extra benefit of greater entropy: if a fixed percentage of\nyour recovery code (but not the whole code) is seen by an attacker, the\ngreater the entropy, the harder it will be for them to figure out part\nof the code they didn't see.  For example, if an attacker sees half of a\n128-bit code (64 bits), it's plausible that they'll be able to brute\nforce the remaining 64 bits.  If they see half of a 256-bit code (128\nbits), it's not plausible that they can brute force the other half.  We\ndon't recommend relying on this defense--either keep your recovery codes\nvery safe or use a method like SLIP39 that lets you distribute your\nrecovery code across multiple locations without relying on the safety of\nany individual code.\n\nAs of 2023, most modern wallets generate 128 bits of entropy for their\nrecovery codes (or a value near 128, such as(((\"wallets\", \"recovery codes\", \"seed generation\", startref=\"wallet-recovery-bip39-seed\")))(((\"recovery codes\", \"seed generation\", startref=\"recovery-code-bip39-seed\")))(((\"BIP39 recovery codes\", \"seed generation\", primary-sortas=\"BIP039\", startref=\"bip39-recovery-seed\")))(((\"entropy\", \"seed generation\", startref=\"entropy-seed-generate\")))(((\"seeds\", \"generating\", startref=\"seed-generate\"))) Electrum v2's 132 bits).\n****\n\n[[recovery_passphrase]]\n===== Optional passphrase in BIP39\n\nThe(((\"wallets\", \"recovery codes\", \"passphrases\", id=\"wallet-recovery-bip39-passphrase\")))(((\"recovery codes\", \"passphrases\", id=\"recovery-code-bip39-passphrase\")))(((\"BIP39 recovery codes\", \"passphrases\", primary-sortas=\"BIP039\", id=\"bip39-recovery-passphrase\")))(((\"passphrases (for recovery codes)\", id=\"passphrase-optional\"))) BIP39 standard allows the use of an optional\npassphrase in the derivation of the seed. If no passphrase is used, the\nrecovery code is stretched with a salt consisting of the constant string\n+\"mnemonic\"+, producing a specific 512-bit seed from any given recovery code.\nIf a passphrase is used, the stretching function produces a _different_\nseed from that same recovery code. In fact, given a single recovery code, every\npossible passphrase leads to a different seed. Essentially, there is no\n\"wrong\" passphrase. All passphrases are valid and they all lead to\ndifferent seeds, forming a vast set of possible uninitialized wallets.\nThe set of possible wallets is so large (2^512^) that there is no\npractical possibility of brute-forcing or accidentally guessing one that\nis in use.\n\n[TIP]\n====\nThere are no \"wrong\" passphrases in BIP39. Every passphrase leads to\nsome wallet, which unless previously used will be empty.\n====\n\nThe optional passphrase creates two important features:\n\n- A second factor (something memorized) that makes a recovery code useless on\n  its own, protecting recovery codes from compromise by a casual thief.  For\n  protection from a tech-savvy thief, you will need to use a very strong\n  passphrase.\n\n- A form of plausible deniability or \"duress wallet,\" where a chosen\n  passphrase leads to a wallet with a small amount of funds used to\n  distract an attacker from the \"real\" wallet that contains the majority\n  of funds.\n\nIt's important to note that the use of a passphrase also introduces the risk of loss:\n\n* If the wallet owner is incapacitated or dead and no one else knows the passphrase, the seed is useless and all the funds stored in the wallet are lost forever.\n\n* Conversely, if the owner backs up the passphrase in the same place as the seed, it defeats the purpose of a second(((\"wallets\", \"recovery codes\", startref=\"wallet-recovery-bip39\")))(((\"recovery codes\", startref=\"recovery-code-bip39\")))(((\"BIP39 recovery codes\", primary-sortas=\"BIP039\", startref=\"bip39-recovery\")))(((\"wallets\", \"recovery codes\", \"passphrases\", startref=\"wallet-recovery-bip39-passphrase\")))(((\"recovery codes\", \"passphrases\", startref=\"recovery-code-bip39-passphrase\")))(((\"BIP39 recovery codes\", \"passphrases\", primary-sortas=\"BIP039\", startref=\"bip39-recovery-passphrase\")))(((\"passphrases (for recovery codes)\", startref=\"passphrase-optional\"))) factor.\n\n++++\n<p class=\"fix_tracking2\">\nWhile passphrases are very useful, they should only be used in\ncombination with a carefully planned process for backup and recovery,\nconsidering the possibility of surviving the owner and allowing his or\nher family to recover the cryptocurrency estate.\n</p>\n++++\n\n[[hd_wallet_details]]\n==== Creating an HD Wallet from the Seed\n\nHD wallets (((\"wallets\", \"key generation\", \"HD (hierarchical deterministic)\", id=\"wallet-keygen-hd\")))(((\"key generation\", \"HD (hierarchical deterministic)\", id=\"keygen-hd\")))(((\"HD (hierarchical deterministic) key generation\", id=\"hd-keygen\")))(((\"BIP32 HD (hierarchical deterministic) key generation\", primary-sortas=\"BIP032\", id=\"bip32\")))(((\"seeds\", \"HD wallet creation\", id=\"seed-hdwallet\")))are created from a (((\"root seeds\")))single _root seed_, which is a\n128-, 256-, or 512-bit random number. Most commonly, this seed is\ngenerated by or decrypted from a recovery code as detailed in the previous section.\n\nEvery key in the HD wallet is deterministically derived from this root\nseed, which makes it possible to re-create the entire HD wallet from\nthat seed in any compatible HD wallet. This makes it easy to back up,\nrestore, export, and import HD wallets containing thousands or even\nmillions of keys by simply transferring only the recovery code that the root\nseed is derived from. The process of creating the master keys and master chain code for an HD\nwallet is shown in <<HDWalletFromSeed>>.\n\n[[HDWalletFromSeed]]\n.Creating master keys and chain code from a root seed.\nimage::images/mbc3_0506.png[\"HDWalletFromRootSeed\"]\n\nThe root seed is input into the HMAC-SHA512 algorithm and the resulting\nhash is used to create a _master private key_ (_m_) and a _master chain\ncode_ (_c_).\n\nThe master private key (_m_) then generates a corresponding master public\nkey (_M_) using the normal elliptic curve multiplication process _m_ × _G_\nthat we saw in <<public_key_derivation>>.\n\nThe master chain code (_c_) is used to introduce entropy in the function that\ncreates child keys from parent keys, as we will see in the next section.\n\n===== Private child key derivation\n\nHD wallets (((\"key generation\", \"HD (hierarchical deterministic)\", \"private child key derivation\", id=\"keygen-hd-private-child\")))(((\"HD (hierarchical deterministic) key generation\", \"private child key derivation\", id=\"hd-keygen-private-child\")))(((\"private child key derivation\", id=\"private-child\")))(((\"child key pair derivation\", \"private keys\", id=\"child-key-pair-private\")))use a _child key derivation_ (CKD)\nfunction to derive child keys from parent keys.\n\nThe child key derivation functions are based on a one-way hash function\nthat [.keep-together]#combines:#\n\n* A parent private or public key (uncompressed key)\n* A seed called a chain code (256 bits)\n* An index number (32 bits)\n\nThe chain code is used to introduce deterministic random data to the\nprocess, so that knowing the index and a child key is not sufficient to\nderive other child keys. Knowing a child key does not make it possible\nto find its siblings unless you also have the chain code. The initial\nchain code seed (at the root of the tree) is made from the seed, while\nsubsequent child chain codes are derived from each parent chain code.\n\nThese three items (parent key, chain code, and index) are combined and\nhashed to generate children keys, as follows.\n\nThe parent public key, chain code, and the index number are combined and\nhashed with the HMAC-SHA512 algorithm to produce a 512-bit hash. This\n512-bit hash is split into two 256-bit halves. The right-half 256 bits\nof the hash output become the chain code for the child. The left-half\n256 bits of the hash are added to the parent private key to produce the\nchild private key. In <<CKDpriv>>, we see this illustrated with the\nindex set to 0 to produce the \"zero\" (first by index) child of the\nparent.\n\n[[CKDpriv]]\n.Extending a parent private key to create a child private key.\nimage::images/mbc3_0507.png[\"ChildPrivateDerivation\"]\n\nChanging the index allows us to extend the parent and create the other\nchildren in the sequence (e.g., Child 0, Child 1, Child 2, etc.). Each\nparent key can have 2,147,483,647 (2^31^) children (2^31^ is half of the\nentire 2^32^ range available because the other half is reserved for a\nspecial type of derivation we will talk about later in this chapter).\n\nRepeating the process one level down the tree, each child can in turn\nbecome a parent and create its own children, in an infinite number of\ngenerations.\n\n===== Using derived child keys\n\nChild private keys are indistinguishable from nondeterministic (random)\nkeys. Because the derivation function is a one-way function, the child\nkey cannot be used to find the parent key. The child key also cannot be\nused to find any siblings. If you have the n^th^ child, you cannot find\nits siblings, such as the n–1 child or the n+1 child, or any\nother children that are part of the sequence. Only the parent key and\nchain code can derive all the children. Without the child chain code,\nthe child key cannot be used to derive any grandchildren either. You\nneed both the child private key and the child chain code to start a new\nbranch and derive grandchildren.\n\nSo what can the child private key be used for on its own? It can be used\nto make a public key and a Bitcoin address. Then, it can be used to sign\ntransactions to spend anything paid to that address.\n\n[TIP]\n====\nA child private key, the corresponding public key, and the Bitcoin\naddress are all indistinguishable from keys and addresses created\nrandomly. The fact that they are part of a sequence is not visible\noutside of the HD wallet function that created them. Once created, they\noperate exactly(((\"key generation\", \"HD (hierarchical deterministic)\", \"private child key derivation\", startref=\"keygen-hd-private-child\")))(((\"HD (hierarchical deterministic) key generation\", \"private child key derivation\", startref=\"hd-keygen-private-child\")))(((\"private child key derivation\", startref=\"private-child\")))(((\"child key pair derivation\", \"private keys\", startref=\"child-key-pair-private\"))) as \"normal\" keys.\n====\n\n===== Extended keys\n\nAs\nwe saw (((\"key generation\", \"HD (hierarchical deterministic)\", \"extended keys\", id=\"keygen-hd-extend\")))(((\"HD (hierarchical deterministic) key generation\", \"extended keys\", \"explained\", id=\"hd-keygen-extend\")))(((\"extended keys\", \"explained\", id=\"extend-key\")))earlier, the key derivation function can be used to create\nchildren at any level of the tree, based on the three inputs: a key, a\nchain code, and the index of the desired child. The two essential\ningredients are the key and chain code, and combined these are called an\n_extended key_. The term \"extended key\" could also be thought of as\n\"extensible key\" because such a key can be used to derive children.\n\nExtended keys are stored and represented simply as the concatenation of\nthe key and chain code. There\nare two types of extended keys. An extended private key is the\ncombination of a private key and chain code and can be used to derive\nchild private keys (and from them, child public keys). An extended\npublic key is a public key and chain code, which can be used to create\nchild public keys (_public only_), as described in\n<<public_key_derivation>>.\n\nThink of an extended key as the root of a branch in the tree structure\nof the HD wallet. With the root of the branch, you can derive the rest\nof the branch. The extended private key can create a complete branch,\nwhereas the extended public key can _only_ create a branch of public\nkeys.\n\nExtended keys are encoded using base58check, to easily export and import\nbetween different BIP32-compatible wallets. The base58check\ncoding for extended keys uses a special version number that results in\nthe prefix \"xprv\" and \"xpub\" when encoded in base58 characters to make\nthem easily recognizable. Because the extended key contains many more\nbytes than regular addresses,\nit is also much longer than other base58check-encoded strings we have\nseen previously.\n\nHere's an example of an extended _private_ key, encoded in base58check:\n\n----\nxprv9tyUQV64JT5qs3RSTJkXCWKMyUgoQp7F3hA1xzG6ZGu6u6Q9VMNjGr67Lctvy5P8oyaYAL9CA\nWrUE9i6GoNMKUga5biW6Hx4tws2six3b9c\n----\n\nHere's the corresponding extended _public_ key, encoded in base58check:\n\n----\nxpub67xpozcx8pe95XVuZLHXZeG6XWXHpGq6Qv5cmNfi7cS5mtjJ2tgypeQbBs2UAR6KECeeMVKZBP\nLrtJunSDMstweyLXhRgPxdp14sk9tJPW9\n----\n\n[role=\"less_space pagebreak-before\"]\n[[public__child_key_derivation]]\n===== Public child key derivation\n\nAs\nmentioned  previously, (((\"key generation\", \"HD (hierarchical deterministic)\", \"public child key derivation\", id=\"keygen-hd-public-child\")))(((\"HD (hierarchical deterministic) key generation\", \"public child key derivation\", id=\"hd-keygen-public-child\")))(((\"public child key derivation\", id=\"public-child\")))(((\"child key pair derivation\", \"public keys\", id=\"child-key-pair-public\")))a very useful characteristic of HD wallets is the\nability to derive public child keys from public parent keys _without_\nhaving the private keys. This gives us two ways to derive a child public\nkey: either from the child private key or directly from the parent\npublic key.\n\nAn extended public key can be used, therefore, to derive all of the\n_public_ keys (and only the public keys) in that branch of the HD wallet\nstructure.\n\nThis shortcut can be used to create public key–only\ndeployments where a server or application has a copy of an extended\npublic key and no private keys whatsoever. That kind of deployment can\nproduce an infinite number of public keys and Bitcoin addresses but\ncannot spend any of the money sent to those addresses. Meanwhile, on\nanother, more secure server, the extended private key can derive all the\ncorresponding private keys to sign transactions and spend the money.\n\nOne common application of this solution is to install an extended public\nkey on a web server that serves an ecommerce application. The web server\ncan use the public key derivation function to create a new Bitcoin\naddress for every transaction (e.g., for a customer shopping cart). The\nweb server will not have any private keys that would be vulnerable to\ntheft. Without HD wallets, the only way to do this is to generate\nthousands of Bitcoin addresses on a separate secure server and then\npreload them on the ecommerce server. That approach is cumbersome and\nrequires constant maintenance to ensure that the ecommerce server\ndoesn't \"run out\" of keys.\n\n.Mind the Gap\n****\nAn (((\"gap limit\", id=\"gap-limit\")))extended public key can generate approximately 4 billion direct\nchild keys, far more than any store or application should ever need.\nHowever, it would also take a wallet application an unreasonable amount\nof time to generate all 4 billion keys and scan the blockchain for\ntransactions involving those keys.  For that reason, most wallets only\ngenerate a few keys at a time, scan for payments involving those keys,\nand generate additional keys in the sequence as the previous keys are used.\nFor example, Alice's wallet generates 100 keys.  When it sees a payment\nto the first key, it generates the 101st key.\n\nSometimes a wallet application will distribute a key to someone who\nlater decides not to pay, creating a gap in the key chain.  That's fine as\nlong as the wallet has already generated keys after the gap so that it\nfinds later payments and continues generating more keys.  The maximum\nnumber of unused keys in a row that can fail to receive a payment\nwithout causing problems is called the _gap limit_.\n\nWhen a wallet application has distributed all of the keys up to its gap\nlimit and none of those keys have received a payment, it has three\noptions about how to handle future requests for new keys:\n\n[role=\"less_space pagebreak-before\"]\n1. It can refuse the requests, preventing it from receiving any further\npayments.  This is obviously an unpalatable option, although it's the\nsimplest to implement.\n\n2. It can generate new keys beyond its gap limit.  This ensures that\nevery person requesting to pay gets a unique key, preventing address\nreuse and improving privacy.  However, if the wallet needs to be\nrestored from a recovery code, or if the wallet owner is using other\nsoftware loaded with the same extended public key, those other wallets\nwon't see any payments received after the extended gap.\n\n3. It can distribute keys it previously distributed, ensuring a smooth\nrecovery but potentially reducing the privacy of the wallet owner and\nthe people with whom they transact.\n\nOpen source production systems for online merchants, such as BTCPay\nServer, attempt to dodge this problem by using very large gap limits and\nlimiting the rate at which they generate invoices.  Other solutions have\nbeen proposed, such as\nasking the spender's wallet to construct (but not broadcast) a\ntransaction paying a possibly reused address before they receive a fresh\naddress for the actual transaction.  However, these other solutions have\nnot been used in production as of this(((\"gap limit\", startref=\"gap-limit\"))) writing.\n****\n\nAnother common application of this solution is for\ncold-storage or hardware signing devices. In that scenario, the extended\nprivate key can be stored on a paper wallet or hardware device, while\nthe extended public key can be kept online. The\nuser can create \"receive\" addresses at will, while the private keys are\nsafely stored offline. To spend the funds, the user can use the extended\nprivate key on an offline software wallet application or\nthe hardware signing device. <<CKDpub>> illustrates the\nmechanism for extending a parent public key to derive child (((\"wallets\", \"key generation\", \"HD (hierarchical deterministic)\", startref=\"wallet-keygen-hd\")))(((\"key generation\", \"HD (hierarchical deterministic)\", startref=\"keygen-hd\")))(((\"HD (hierarchical deterministic) key generation\", startref=\"hd-keygen\")))(((\"BIP32 HD (hierarchical deterministic) key generation\", primary-sortas=\"BIP032\", startref=\"bip32\")))(((\"seeds\", \"HD wallet creation\", startref=\"seed-hdwallet\")))(((\"key generation\", \"HD (hierarchical deterministic)\", \"public child key derivation\", startref=\"keygen-hd-public-child\")))(((\"HD (hierarchical deterministic) key generation\", \"public child key derivation\", startref=\"hd-keygen-public-child\")))(((\"public child key derivation\", startref=\"public-child\")))(((\"child key pair derivation\", \"public keys\", startref=\"child-key-pair-public\")))public keys.\n\n[[CKDpub]]\n.Extending a parent public key to create a child public key.\nimage::images/mbc3_0508.png[\"ChildPublicDerivation\"]\n\n==== Using an Extended Public Key on a Web Store\n\nLet's see (((\"key generation\", \"HD (hierarchical deterministic)\", \"extended keys\", id=\"keygen-hd-extend-webstore\")))(((\"HD (hierarchical deterministic) key generation\", \"extended keys\", \"web store example\", id=\"hd-keygen-extend-webstore\")))(((\"extended keys\", \"web store example\", id=\"extend-key-webstore\")))(((\"web store example (extended keys)\", id=\"webstore-extend-key\")))how HD wallets are used by looking at\nGabriel's web store.\n\nGabriel first set up his web store as a hobby, based on a simple hosted\nWordPress page. His store was quite basic with only a few pages and an\norder form with a single Bitcoin address.\n\nGabriel used the first Bitcoin address generated by his regular wallet as\nthe main Bitcoin address for his store.\nCustomers would submit an order using the form and send payment to\nGabriel's published Bitcoin address, triggering an email with the order\ndetails for Gabriel to process. With just a few orders each week, this\nsystem worked well enough, even though it weakened the privacy of\nGabriel, his clients, and the people he paid.\n\nHowever, the little web store became quite successful and attracted many\norders from the local community. Soon, Gabriel was overwhelmed. With all\nthe orders paying the same address, it became difficult to correctly\nmatch orders and transactions, especially when multiple orders for the\nsame amount came in close together.\n\nThe only metadata that is chosen by the receiver of a typical Bitcoin\ntransaction are the amount and payment address.  There's no subject\nor message field that can be used to hold a unique identifier invoice number.\n\nGabriel's HD wallet offers a much better solution through the ability to\nderive public child keys without knowing the private keys. Gabriel can\nload an extended public key (xpub) on his website, which can be used to\nderive a unique address for every customer order.  The unique address\nimmediately improves privacy and also gives each order a unique\nidentifier that can be used for tracking which invoices have been paid.\n\nUsing the HD wallet allows Gabriel to spend the\nfunds from his personal wallet application, but the xpub loaded on the website can only\ngenerate addresses and receive funds. This feature of HD wallets is a\ngreat security feature. Gabriel's website does not contain any private\nkeys and therefore any hack of it can only steal the funds Gabriel would\nhave received in the future, not any funds he received in the past.\n\nTo export the xpub from his Trezor hardware signing device, Gabriel uses\nthe web-based Trezor wallet application. The Trezor device must be plugged in\nfor the public keys to be exported. Note that most hardware signing devices will\nnever export private keys--those always remain on the device.\n\nGabriel copies the xpub to his web store's Bitcoin payment processing\nsoftware, such as the widely used open source BTCPay Server.\n\n===== Hardened child key derivation\n\nThe (((\"private child key derivation\", \"hardened derivation\", id=\"private-child-harden\")))(((\"child key pair derivation\", \"hardened derivation\", id=\"child-key-pair-harden\")))(((\"hardened child key derivation\", id=\"harden-child-key\")))ability to derive a branch\nof public keys from an xpub is very useful, but it comes with a\npotential risk. Access to an xpub does not give access to child private\nkeys. However, because the xpub contains the chain code, if a child\nprivate key is known, or somehow leaked, it can be used with the chain\ncode to derive all the other child private keys. A single leaked child\nprivate key, together with a parent chain code, reveals all the private\nkeys of all the children. Worse, the child private key together with a\nparent chain code can be used to deduce the parent private key.\n\nTo counter this risk, HD wallets provide an alternative derivation function\ncalled _hardened derivation_, which breaks the relationship between\nparent public key and child chain code. The hardened derivation function\nuses the parent private key to derive the child chain code, instead of\nthe parent public key. This creates a \"firewall\" in the parent/child\nsequence, with a chain code that cannot be used to compromise a parent\nor sibling private key. The hardened derivation function looks almost\nidentical to the normal child private key derivation, except that the\nparent private key is used as input to the hash function, instead of the\nparent public key, as shown in the diagram in <<CKDprime>>.\n\n[[CKDprime]]\n.Hardened derivation of a child key; omits the parent public key.\nimage::images/mbc3_0509.png[\"ChildHardPrivateDerivation\"]\n\n\nWhen the hardened private derivation function is used, the resulting\nchild private key and chain code are completely different from what\nwould result from the normal derivation function. The resulting \"branch\"\nof keys can be used to produce extended public keys that are not\nvulnerable because the chain code they contain cannot be exploited to\nreveal any private keys for their siblings or parents. Hardened derivation is therefore used to create\na \"gap\" in the tree above the level where extended public keys are used.\n\nIn simple terms, if you want to use the convenience of an xpub to derive\nbranches of public keys, without exposing yourself to the risk of a\nleaked chain code, you should derive it from a hardened parent rather\nthan a normal parent. As a best practice, the level-1 children of the\nmaster keys are always derived through the hardened derivation to\nprevent compromise of the master keys.\n\n===== Index numbers for normal and hardened derivation\n\nThe index number (((\"index numbers for hardened derivation\")))used in the derivation function is a 32-bit integer. To\neasily distinguish between keys created through the normal derivation\nfunction versus keys derived through hardened derivation, this index\nnumber is split into two ranges. Index numbers between 0 and\n2^31^ &#x2013; 1 (0x0 to 0x7FFFFFFF) are used _only_ for normal\nderivation. Index numbers between 2^31^ and 2^32^ &#x2013; 1 (0x80000000\nto 0xFFFFFFFF) are used _only_ for hardened derivation. Therefore, if\nthe index number is less than 2^31^, the child is normal, whereas if the\nindex number is equal or above 2^31^, the child is hardened.\n\nTo make the index number easier to read and display, the index number\nfor hardened children is displayed starting from zero, but with a prime\nsymbol. The first normal child key is therefore displayed as 0, whereas\nthe first hardened child (index 0x80000000) is displayed as 0++&#x27;++.\nIn a sequence then, the second hardened key would have index 0x80000001\nand would be displayed as 1++&#x27;++, and so on. When you see an HD\nwallet index i++&#x27;++, that means 2^31^+i.  In regular ASCII text, the\nprime symbol is substituted with either a single apostrophe or the\nletter _h_.  For situations, such as in output script descriptors, where\ntext may be used in a shell or other context where a single apostrophe\nhas special meaning, using the letter _h_ is (((\"private child key derivation\", \"hardened derivation\", startref=\"private-child-harden\")))(((\"child key pair derivation\", \"hardened derivation\", startref=\"child-key-pair-harden\")))(((\"hardened child key derivation\", startref=\"harden-child-key\")))recommended.\n\n===== HD wallet key identifier (path)\n\nKeys in (((\"path references in HD wallets\")))(((\"key generation\", \"HD (hierarchical deterministic)\", \"path references\")))(((\"HD (hierarchical deterministic) key generation\", \"path references\")))an HD wallet are\nidentified using a \"path\" naming convention, with each level of the tree\nseparated by a slash (/) character (see <<table_4-8>>). Private keys\nderived from the master private key start with \"m.\" Public keys derived\nfrom the master public key start with \"M.\" Therefore, the first child\nprivate key of the master private key is m/0. The first child public key\nis M/0. The second grandchild of the first child is m/0/1, and so on.\n\nThe \"ancestry\" of a key is read from right to left, until you reach the\nmaster key from which it was derived. For example, identifier m/x/y/z\ndescribes the key that is the z-th child of key m/x/y, which is the y-th\nchild of key m/x, which is the x-th child of m.\n\n++++\n<table id=\"table_4-8\" class=\"pagebreak-before less_space\">\n<caption>HD wallet path examples</caption>\n<thead>\n<tr>\n<th>HD path</th>\n<th>Key described</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><p>m/0</p></td>\n<td><p>The first (0) child private key from the master private key (m)</p></td>\n</tr>\n<tr>\n<td><p>m/0/0</p></td>\n<td><p>The first grandchild private key from the first child (m/0)</p></td>\n</tr>\n<tr>\n<td><p>m/0'/0</p></td>\n<td><p>The first normal grandchild private key from the first <em>hardened</em> child (m/0')</p></td>\n</tr>\n<tr>\n<td><p>m/1/0</p></td>\n<td><p>The first grandchild private key from the second child (m/1)</p></td>\n</tr>\n<tr>\n<td><p>M/23/17/0/0</p></td>\n<td><p>The first great-great-grandchild public key from the first great-grandchild from the 18th grandchild from the 24th child</p></td>\n</tr>\n</tbody>\n</table>\n++++\n\n===== Navigating the HD wallet tree structure\n\nThe(((\"tree structure in HD wallets\", id=\"tree-hd-wallet\")))(((\"key generation\", \"HD (hierarchical deterministic)\", \"tree structure\", id=\"keygen-hd-tree\")))(((\"HD (hierarchical deterministic) key generation\", \"tree structure\", id=\"hd-keygen-tree\"))) HD wallet tree structure offers tremendous flexibility. Each parent\nextended key can have 4 billion children: 2 billion normal children and\n2 billion hardened children. Each of those children can have another 4\nbillion children, and so on. The tree can be as deep as you want, with\nan infinite number of generations. With all that flexibility, however,\nit becomes quite difficult to navigate this infinite tree. It is\nespecially difficult to transfer HD wallets between implementations\nbecause the possibilities for internal organization into branches and\nsubbranches are endless.\n\nTwo BIPs offer a solution to this complexity by creating some proposed\nstandards for the structure of HD wallet trees. (((\"BIP43 HD wallet tree structure\", primary-sortas=\"BIP043\")))BIP43 proposes the use\nof the first hardened child index as a special identifier that signifies\nthe \"purpose\" of the tree structure. Based on BIP43, an HD wallet\nshould use only one level-1 branch of the tree, with the index number\nidentifying the structure and namespace of the rest of the tree by\ndefining its purpose. For example, an HD wallet using only branch\nm/i++&#x27;++/ is intended to signify a specific purpose, and that\npurpose is identified by index number \"i.\"\n\nExtending that specification, (((\"BIP44 HD wallet tree structure\", primary-sortas=\"BIP044\", id=\"bip44\")))BIP44 proposes a multiaccount structure\nas \"purpose\" number +44'+ under BIP43. All HD wallets following the\nBIP44 structure are identified by the fact that they only used one\nbranch of the tree: m/44++'++/.\n\nBIP44 specifies the structure as consisting of five predefined tree levels:\n\n-----\nm / purpose' / coin_type' / account' / change / address_index\n-----\n\n\nThe first-level \"purpose\" is always set to ++44'++. The second-level\n\"coin_type\" specifies the type of cryptocurrency coin, allowing for\nmulticurrency HD wallets where each currency has its own subtree under\nthe second level.  Bitcoin is m/44++&apos;++/0++&apos;++ and Bitcoin Testnet is m/44++&apos;++/1++&apos;++.\n\nThe third level of the tree is \"account,\" which allows users to\nsubdivide their wallets into separate logical subaccounts for\naccounting or organizational purposes. For example, an HD wallet might\ncontain two Bitcoin \"accounts\": m/44++&#x27;++/0++&#x27;++/0++&#x27;++\nand m/44++&#x27;++/0++&#x27;++/1++&#x27;++. Each account is the root of\nits own subtree.\n\nOn the\nfourth level, \"change,\" an HD wallet has two subtrees, one for creating\nreceiving addresses and one for creating change addresses. Note that\nwhereas the previous levels used hardened derivation, this level uses\nnormal derivation. This is to allow this level of the tree to export\nextended public keys for use in a nonsecured environment. Usable\naddresses are derived by the HD wallet as children of the fourth level,\nmaking the fifth level of the tree the \"address_index.\" For example, the\nthird receiving address for payments in the primary account\nwould be M/44++&#x27;++/0++&#x27;++/0++&#x27;++/0/2. <<table_4-9>> shows\na few more examples.\n\n++++\n<table id=\"table_4-9\">\n<caption>BIP44 HD wallet structure examples</caption>\n<thead>\n<tr>\n<th>HD path</th>\n<th>Key described</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><p>M/44<code>'</code>/0<code>'</code>/0<code>'</code>/0/2</p></td>\n<td><p>The third receiving public key for the primary Bitcoin account</p></td>\n</tr>\n<tr>\n<td><p>M/44<code>'</code>/0<code>'</code>/3<code>'</code>/1/14</p></td>\n<td><p>The fifteenth change-address public key for the fourth Bitcoin account</p></td>\n</tr>\n<tr>\n<td><p>m/44<code>'</code>/2<code>'</code>/0<code>'</code>/0/1</p></td>\n<td><p>The second private key in the Litecoin main account, for signing transactions</p></td>\n</tr>\n</tbody>\n</table>\n++++\n\nMany people (((\"BIP44 HD wallet tree structure\", primary-sortas=\"BIP044\", startref=\"bip44\")))focus on securing their bitcoins against theft and other\nattacks, but one of the leading causes of lost bitcoins--perhaps _the_\nleading cause--is data loss.  If the keys and other essential data\nrequired to spend your bitcoins is lost, those bitcoins will forever be\nunspendable.  Nobody can get them back for you.  In this chapter, we\nlooked at the systems that modern wallet applications use to help you\nprevent losing that data.  Remember, however, that it's up to you to\nactually use the systems available to make good backups and (((\"key generation\", \"HD (hierarchical deterministic)\", \"extended keys\", startref=\"keygen-hd-extend-webstore\")))(((\"HD (hierarchical deterministic) key generation\", \"extended keys\", \"web store example\", startref=\"hd-keygen-extend-webstore\")))(((\"extended keys\", \"web store example\", startref=\"extend-key-webstore\")))(((\"web store example (extended keys)\", startref=\"webstore-extend-key\")))(((\"tree structure in HD wallets\", startref=\"tree-hd-wallet\")))(((\"key generation\", \"HD (hierarchical deterministic)\", \"tree structure\", startref=\"keygen-hd-tree\")))(((\"HD (hierarchical deterministic) key generation\", \"tree structure\", startref=\"hd-keygen-tree\")))regularly\ntest them.\n"
        },
        {
          "name": "ch06_transactions.adoc",
          "type": "blob",
          "size": 64.32421875,
          "content": "[[c_transactions]]\n== Transactions\n\nThe way we typically transfer physical cash has little resemblance to\nthe way we transfer bitcoins.  Physical cash is a bearer token.  Alice\npays Bob by handing him some number of tokens, such as dollar bills.\nBy comparison, bitcoins don't exist either physically or as digital\ndata--Alice can't hand Bob some bitcoins or send them by email.\n\nInstead, consider how Alice might transfer control over a parcel of land\nto Bob.  She can't physically pick up the land and hand it to Bob.\nRather there exists some sort of record (usually maintained by a local\ngovernment) that describes the land Alice owns.  Alice transfers that\nland to Bob by convincing the government to update the record to say\nthat Bob now owns the land.\n\nBitcoin works in a similar way.  There exists a database on every\nBitcoin full node that says that Alice controls some number of\nbitcoins. Alice pays Bob by convincing full nodes to update their\ndatabase to say that some of Alice's bitcoins are now controlled by Bob.\nThe data that Alice uses to convince full nodes to update their\ndatabases is called a _transaction_.  This is done without directly\nusing either Alice's or Bob's identities, as we'll see in\n<<c_authorization_authentication>>.\n\nIn this chapter we'll deconstruct a Bitcoin transaction and examine each\nof its parts to see how they facilitate the transfer of value in a way\nthat's highly expressive and amazingly reliable.\n\n[[tx_structure]]\n=== A Serialized Bitcoin Transaction\n\nIn <<exploring_and_decoding_transactions>>, we (((\"transactions\", \"serialized\", id=\"transaction-serialize\")))(((\"serialized transactions\", id=\"serial-transactions\")))(((\"Bitcoin Core\", \"serialized transactions\", id=\"bitcoin-core-serial-transaction\")))used Bitcoin Core with\nthe txindex option enabled to retrieve a copy of Alice's payment to Bob.\nLet's retrieve the transaction containing that payment again, as shown in <<alice_tx_serialized_reprint>>.\n\n[[alice_tx_serialized_reprint]]\n.Alice's serialized transaction\n====\n----\n$ bitcoin-cli getrawtransaction 466200308696215bbc949d5141a49a41\\\n38ecdfdfaa2a8029c1f9bcecd1f96177\n\n01000000000101eb3ae38f27191aa5f3850dc9cad00492b88b72404f9da13569\n8679268041c54a0100000000ffffffff02204e0000000000002251203b41daba\n4c9ace578369740f15e5ec880c28279ee7f51b07dca69c7061e07068f8240100\n000000001600147752c165ea7be772b2c0acb7f4d6047ae6f4768e0141cf5efe\n2d8ef13ed0af21d4f4cb82422d6252d70324f6f4576b727b7d918e521c00b51b\ne739df2f899c49dc267c0ad280aca6dab0d2fa2b42a45182fc83e81713010000\n0000\n----\n====\n\n\nBitcoin Core's serialization format is special because it's the format\nused to make commitments to transactions and to relay them across\nBitcoin's P2P network, but otherwise programs can use\na different format as long as they transmit all of the\nsame data.  However, Bitcoin Core's format is reasonably compact for the\ndata it transmits and simple to parse, so many other Bitcoin programs\nuse this format.\n\n[TIP]\n====\nThe only (((\"partially signed bitcoin transaction (PSBT) format\")))(((\"PSBT (partially signed bitcoin transaction) format\")))other widely used transaction serialization format that\nwe're aware of is the partially signed bitcoin transaction (PSBT) format\ndocumented in BIPs 174 and 370 (with extensions documented in other\nBIPs).  PSBT allows an untrusted program to produce a transaction\ntemplate that can be verified and updated by trusted programs (such as\nhardware signing devices) that have the necessary private keys or\nother sensitive data to fill in the template.  To accomplish this, PSBT\nallows storing a significant amount of metadata about a transaction,\nmaking it much less compact than the standard serialization format.\nThis book does not go into detail about PSBT, but we strongly recommend\nit to developers of wallets that plan to support signing\nwith multiple keys.\n====\n\nThe transaction displayed in hexadecimal in <<alice_tx_serialized_reprint>> is\nreplicated as a byte map in <<alice_tx_byte_map>>.  Note that it takes\n64 hexadecimal characters to display 32 bytes.  This map shows only the\ntop-level fields.  We'll examine each of them in the order they appear\nin the transaction and describe any additional fields that they(((\"transactions\", \"serialized\", startref=\"transaction-serialize\")))(((\"serialized transactions\", startref=\"serial-transactions\")))(((\"Bitcoin Core\", \"serialized transactions\", startref=\"bitcoin-core-serial-transaction\"))) contain.\n\n[[alice_tx_byte_map]]\n.A byte map of Alice's transaction.\nimage::images/mbc3_0601.png[\"A byte map of Alice's transaction\"]\n\n[[version]]\n=== Version\n\nThe first (((\"transactions\", \"version of\", id=\"transactions-version\")))(((\"version (of transactions)\", id=\"version-transactions\")))four bytes of a serialized Bitcoin transaction are its\nversion.  The original version of Bitcoin transactions was version 1\n(0x01000000).  All transactions in Bitcoin must follow\nthe rules of version 1 transactions, with many of those rules being\ndescribed throughout this book.\n\nVersion 2 Bitcoin transactions were introduced in the BIP68 soft fork\nchange to Bitcoin's consensus rules.  BIP68 places additional\nconstraints on the sequence field, but those constraints only apply to\ntransactions with version 2 or higher.  Version 1 transactions are\nunaffected.  BIP112, which was part of the same soft fork as BIP68,\nupgraded an opcode (++OP_CHECKSEQUENCEVERIFY++), which will now fail if it is\nevaluated as part of a transaction with a version less than 2.  Beyond\nthose two changes, version 2 transactions are identical to version 1\ntransactions.\n\n[role=\"less_space pagebreak-before\"]\n.Protecting Presigned Transactions\n****\nThe last step (((\"transactions\", \"presigned\", id=\"transaction-presign\")))(((\"presigned transactions\", id=\"presign-transaction\")))before broadcasting a transaction to the network for\ninclusion in the blockchain is to sign it.  However, it's possible to\nsign a transaction without broadcasting it immediately.  You can save\nthat presigned transaction for months or years in the belief that it\ncan be added to the blockchain later when you do broadcast it.  In the\ninterim, you may even lose access to the private key (or keys) necessary\nto sign an alternative transaction spending the funds.  This isn't\nhypothetical: several protocols built on Bitcoin, including Lightning\nNetwork, depend on presigned [.keep-together]#transactions.#\n\nThis creates a challenge for protocol developers when they assist users\nin upgrading the Bitcoin consensus protocol.  Adding new\nconstraints--such as BIP68 did to the sequence field--may invalidate\nsome presigned transactions.  If there's no way to create a new\nsignature for an equivalent transaction, then the money being spent in\nthe presigned transaction is permanently lost.\n\nThis problem is solved by reserving some transaction features for\nupgrades, such as version numbers.  Anyone creating presigned\ntransactions prior to BIP68 should have been using version 1\ntransactions, so only applying BIP68's additional constraints on\nsequence to transactions v2 or higher should not invalidate any\npresigned [.keep-together]#transactions.#\n\nIf you implement a protocol that uses presigned transactions, ensure\nthat it doesn't use any features that are reserved for future upgrades.\nBitcoin Core's default transaction relay policy does not allow the use\nof reserved features.  You can test whether a transaction complies with\nthat policy by using Bitcoin Core's +testmempoolaccept+ RPC on Bitcoin\nmainnet.\n****\n\nAs of this writing, a proposal to begin using version 3 transactions is\nbeing widely considered.  That proposal does not seek to change the\nconsensus rules but only the policy that Bitcoin full nodes use to relay\ntransactions.  Under the proposal, version 3 transactions would be\nsubject to additional constraints in order to prevent certain denial of\nservice (DoS) attacks that we'll discuss(((\"transactions\", \"version of\", startref=\"transactions-version\")))(((\"version (of transactions)\", startref=\"version-transactions\"))) further in <<transaction_pinning>>.\n\n=== Extended Marker and Flag\n\nThe next two fields(((\"transactions\", \"extended serialization format\")))(((\"extended serialization format\")))(((\"BIP144 extended serialization format\"))) of the example serialized transaction were added as\npart of the segregated witness (segwit) soft fork change to Bitcoin's\nconsensus rules.  The rules were changed according to BIPs 141 and 143,\nbut the _extended serialization format_ is defined in BIP144.\n\n[role=\"less_space pagebreak-before\"]\nIf the transaction includes a witness structure (which we'll describe in\n<<witness_structure>>), the marker must be zero (0x00) and the flag must be\nnonzero.  In the current P2P protocol, the flag should always be one\n(0x01); alternative flags are reserved for later protocol upgrades.\n\nIf the transaction doesn't need a witness stack, the marker and flag must not\nbe present.  This is compatible with the original version of Bitcoin's\ntransaction serialization format, now called _legacy serialization_.\nFor details, see <<legacy_serialization>>.\n\nIn (((\"transactions\", \"legacy serialization\")))(((\"legacy serialization\")))legacy serialization, the marker byte would have been interpreted as\nthe number of inputs (zero).  A transaction can't have zero inputs, so\nthe marker signals to modern programs that extended serialization is\nbeing used.  The flag field provides a similar signal and also\nsimplifies the process of updating the serialization format in the\nfuture.\n\n[[inputs]]\n=== Inputs\n\nThe(((\"transactions\", \"inputs\", id=\"transaction-input\")))(((\"inputs\", id=\"input-transaction\"))) inputs field contains several other fields, so let's start by showing a\nmap of those bytes in <<alice_tx_input_map>>.\n\n[[alice_tx_input_map]]\n.Map of bytes in the inputs field of Alice's transaction.\nimage::images/mbc3_0602.png[\"map of bytes in the inputs field of Alice's transaction\"]\n\n==== Length of Transaction Input List\n\nThe (((\"transactions\", \"inputs\", \"length of list\", id=\"transaction-input-length\")))(((\"inputs\", \"length of list\", id=\"input-transaction-length\")))transaction input list starts with an integer indicating the number of inputs\nin the transaction.  The minimum value is one.  There's no explicit\nmaximum value, but restrictions on the maximum size of a transaction\neffectively limit transactions to a few thousand inputs.  The number is\nencoded as a compactSize unsigned integer.\n\n[role=\"less_space pagebreak-before\"]\n.CompactSize Unsigned Integers\n****\nUnsigned integers(((\"compactSize  unsigned integers\", id=\"compactsize\")))(((\"unsigned integers\", id=\"unsigned\"))) in Bitcoin that often have low values, but which may\nsometimes have high values, are usually encoded using the compactSize\ndata type.  CompactSize is a version of a variable-length integer, so\nit's sometimes called var_int or varint (see, for example, documentation\nfor BIPs 37 and 144).\n\n\n[WARNING]\n====\nSeveral varieties of variable length integers are used\nin different programs, including in different Bitcoin programs.  For\nexample, Bitcoin Core serializes its UTXO database using a data type it\ncalls +VarInts+, which is different from compactSize.  Additionally, the\nnBits field in a Bitcoin block header is encoded using a custom data\ntype known as +Compact+, which is unrelated to compactSize.  When\ntalking about the variable length integers used in Bitcoin transaction\nserialization and other parts of the Bitcoin P2P protocol, we will\nalways use the full name compactSize.\n====\n\nFor numbers from 0 to 252, compactSize unsigned integers are identical\nto the C-language data type +uint8_t+, which is probably the native\nencoding familiar to any programmer.  For other numbers up to\n0xffffffffffffffff, a byte is prefixed to the number to indicate its\nlength—but otherwise the numbers look like regular C-language encoded\nunsigned integers:\n\n++++\n<table>\n<thead>\n<tr>\n<th>Value</th>\n<th>Bytes used</th>\n<th>Format</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><p>≥ <code>0</code> &amp;&amp; ≤ <code>252</code> (<code>0xfc</code>)</p></td>\n<td><p><code>1</code></p></td>\n<td><p><code>uint8_t</code></p></td>\n</tr>\n<tr>\n<td><p>≥ <code>253</code> &amp;&amp; ≤ <code>0xffff</code></p></td>\n<td><p>3</p></td>\n<td><p><code>0xfd</code> followed by the number as <code>uint16_t</code></p></td>\n</tr>\n<tr>\n<td><p>≥ <code>0x10000</code> &amp;&amp; ≤ <code>0xffffffff</code></p></td>\n<td><p><code>5</code></p></td>\n<td><p><code>0xfe</code> followed by the number as <code>uint32_t</code></p></td>\n</tr>\n<tr>\n<td><p>≥ <code>0x100000000</code> &amp;&amp; ≤ <code>0xffffffffffffffff</code></p></td>\n<td><p><code>9</code></p></td>\n<td><p><code>0xff</code> followed by the number as <code>uint64_t</code></p></td>\n</tr>\n</tbody>\n</table>\n++++\n****\n\nEach input in a transaction must contain three fields: an _outpoint_ field, a length-prefixed _input script_ field, and a _sequence_\n\nWe'll look at each of those fields in the following sections.  Some\ninputs also include a witness stack, but this is serialized at the end of a\ntransaction so we'll (((\"transactions\", \"inputs\", \"length of list\", startref=\"transaction-input-length\")))(((\"inputs\", \"length of list\", startref=\"input-transaction-length\")))examine it later.\n\n\n[[outpoints]]\n==== Outpoint\n\nA Bitcoin (((\"transactions\", \"inputs\", \"outpoint field\", id=\"transaction-input-outpoint\")))(((\"inputs\", \"outpoint field\", id=\"input-transaction-outpoint\")))(((\"outpoint field (transaction inputs)\", id=\"outpoint\")))transaction is a request for full nodes to update their\ndatabase of coin ownership information.  For Alice to transfer control\nof some of her bitcoins to Bob, she first needs to tell full nodes how\nto find the previous transfer where she received those bitcoins.  Since\ncontrol over bitcoins is assigned in transaction outputs, Alice _points_\nto the previous _output_ using an _outpoint_ field.  Each input must\ncontain a single outpoint.\n\nThe outpoint contains a 32-byte txid for the\ntransaction where Alice received the bitcoins she now wants to spend.\nThis txid is in Bitcoin's internal byte order for hashes; see\n<<internal_and_display_order>>.\n\nBecause transactions may contain multiple outputs, Alice also needs to\nidentify which particular output from that transaction to use, (((\"output indexes\")))called\nits _output index_.  Output indexes are 4-byte unsigned\nintegers starting from zero.\n\nWhen a full node encounters an outpoint, it uses that information to try\nto find the referenced output.  Full nodes are only required to look at earlier\ntransactions in the blockchain.  For example, Alice's transaction is\nincluded in block 774,958.  A full node verifying her transaction\nonly looks for the previous output referenced by her outpoint in that\nblock and previous blocks, not any later blocks.  Within block 774,958,\nthey will only look at transactions placed in the block prior to Alice's\ntransaction, as determined by the order of leaves in the block's merkle\ntree (see <<merkle_trees>>).\n\nUpon finding the previous output, the full node obtains several critical\npieces of information from it:\n\n- The amount of bitcoins assigned to that previous output.  All of those\n  bitcoins will be transferred in this transaction.  In the example\n  transaction, the value of the previous output was 100,000 satoshis.\n\n- The authorization conditions for that previous output.  These are the\n  conditions that must be fulfilled in order to spend the bitcoins\n  assigned to that previous output.\n\n- For confirmed transactions, the height of the block that confirmed it\n  and the median time past (MTP) for that block.  This is required for\n  relative timelocks (described in <<relative_timelocks>>) and outputs\n  of coinbase transactions (described in <<coinbase_transactions>>).\n\n- Proof that the previous output exists in the blockchain (or as a known\n  unconfirmed transaction) and that no other transaction has spent it.\n  One of Bitcoin's consensus rules forbids any output from being spent\n  more than once within a valid blockchain.  This is the(((\"double spending\")))(((\"conflicting transactions\"))) rule against\n  _double spending_: Alice can't use the same previous output to pay\n  both Bob and Carol in separate transactions.  Two transactions that each try to spend the\n  same previous output are called _conflicting transactions_ because\n  only one of them can be included in a valid blockchain.\n\nDifferent approaches to tracking previous outputs have been tried by\ndifferent full node implementations at various times.  Bitcoin Core\ncurrently uses the solution believed to be most effective at retaining\nall necessary information while minimizing disk space: it keeps a\ndatabase that stores every UTXO and\nessential metadata about it (like its confirmation block height).  Each\ntime a new block of transactions arrives, all of the outputs they spend\nare removed from the UTXO database and all of the outputs they create\nare added to the(((\"transactions\", \"inputs\", \"outpoint field\", startref=\"transaction-input-outpoint\")))(((\"inputs\", \"outpoint field\", startref=\"input-transaction-outpoint\")))(((\"outpoint field (transaction inputs)\", startref=\"outpoint\"))) database.\n\n[[internal_and_display_order]]\n.Internal and Display Byte Orders\n****\nBitcoin uses (((\"hash functions\", \"digests\")))(((\"digests\")))(((\"internal byte order\")))(((\"display byte order\")))the output of hash functions, called _digests_, in various\nways.  Digests provide unique identifiers for blocks and transactions;\nthey're used in commitments for addresses, blocks, transactions,\nsignatures, and more; and digests are iterated upon in Bitcoin's\nproof-of-work function. In some cases, hash digests are displayed to\nusers in one byte order but are used internally in a different byte\norder, creating confusion.  For example, consider the previous output\ntxid from the outpoint in our example transaction:\n\n----\neb3ae38f27191aa5f3850dc9cad00492b88b72404f9da135698679268041c54a\n----\n\nIf we try using that txid to retrieve that transaction using\nBitcoin Core, we get an error and must reverse its byte order:\n\n----\n$ bitcoin-cli getrawtransaction \\\n  eb3ae38f27191aa5f3850dc9cad00492b88b72404f9da135698679268041c54a\nerror code: -5\nerror message:\nNo such mempool or blockchain transaction. \nUse gettransaction for wallet transactions.\n\n$ echo eb3ae38f27191aa5f3850dc9cad00492b88b72404f9da135698679268041c54a \\\n  | fold -w2 | tac | tr -d \"\\n\"\n4ac541802679866935a19d4f40728bb89204d0cac90d85f3a51a19278fe33aeb\n\n$ bitcoin-cli getrawtransaction \\\n  4ac541802679866935a19d4f40728bb89204d0cac90d85f3a51a19278fe33aeb\n02000000000101c25ae90c9f3d40cc1fc509ecfd54b06e35450702...\n----\n\nThis odd behavior is probably an unintentional consequence of a\nhttps://oreil.ly/01JH2[design\ndecision in early Bitcoin software].  As a practical matter, it means\ndevelopers of Bitcoin software need to remember to reverse the order of\nbytes in transaction and block identifiers they show to users.\n\nIn this book, we use the term _internal byte order_ for the data that\nappears within transactions and blocks.  We use _display byte order_ for\nthe form displayed to users.  Another set of common terms is\n_little-endian byte order_ for the internal version and _big-endian byte\norder_ for the display version.\n****\n\n==== Input Script\n\nThe (((\"transactions\", \"inputs\", \"input script\")))(((\"inputs\", \"input script\")))(((\"input scripts\")))input script field is a remnant of the legacy transaction format.  Our\nexample transaction input spends a native segwit output that doesn't\nrequire any data in the input script, so the length prefix for the\ninput script is set to zero (0x00).\n\nFor an example of a length-prefixed input script that spends a legacy\noutput, we use one from an arbitrary transaction in the most recent\nblock as of this writing:\n\n----\n6b483045022100a6cc4e8cd0847951a71fad3bc9b14f24d44ba59d19094e0a8c\nfa2580bb664b020220366060ea8203d766722ed0a02d1599b99d3c95b97dab8e\n41d3e4d3fe33a5706201210369e03e2c91f0badec46c9c903d9e9edae67c167b\n9ef9b550356ee791c9a40896\n----\n\nThe length prefix is a compactSize unsigned integer indicating the\nlength of the serialized input script field.  In this case, it's a single\nbyte (0x6b) indicating the input script is 107 bytes.  We'll cover parsing\nand using scripts in detail in <<c_authorization_authentication>>.\n\n[[sequence]]\n==== Sequence\n\nThe (((\"transactions\", \"inputs\", \"sequence field\", id=\"transaction-input-sequence\")))(((\"inputs\", \"sequence field\", id=\"input-transaction-sequence\")))(((\"sequence field (transaction inputs)\", id=\"sequence-field\")))final four bytes of an input are its _sequence_ number.\nThe use and meaning of this field has changed over time.\n\n[[original_tx_replacement]]\n===== Original sequence-based transaction replacement\n\nThe (((\"sequence-based transaction replacement\", id=\"sequence-replace\")))sequence field was originally intended to allow creation of\nmultiple versions of the same transaction, with later versions replacing\nearlier versions as candidates for confirmation.  The sequence number\ntracked the version of the transaction.\n\nFor example, imagine Alice and Bob want to bet on a game of cards.  They\nstart by each signing a transaction that deposits some money into an\noutput with a script that requires signatures from both of them to (((\"multisignature scripts\")))(((\"setup transactions\")))spend, a\n_multisignature_ script (_multisig_ for short).  This is called the\n_setup transaction_.  They then create a transaction that spends that\noutput:\n\n- The first version of the transaction, with nSequence 0 (0x00000000),\n  pays Alice and Bob back the money they initially deposited.  This is\n  called a _refund transaction_.  Neither of them broadcasts the refund\n  transaction at this time.  They only need it if there's a problem.\n\n- Alice wins the first round of the card game, so the second version of\n  the transaction, with sequence 1, increases the amount of money paid\n  to Alice and decreases Bob's share.  They both sign the updated\n  transaction.  Again, they don't need to broadcast this version of the\n  transaction unless there's a problem.\n\n- Bob wins the second round, so the sequence is incremented to 2,\n  Alice's share is decreased, and Bob's share is increased.  They again\n  sign but don't broadcast.\n\n- After many more rounds where the sequence is incremented, the\n  funds redistributed, and the resulting transaction is signed but not\n  broadcast, they decide to finalize the transaction.  Creating a\n  transaction with the final balance of funds, they set sequence to its\n  maximum value (0xffffffff), finalizing the transaction.  They broadcast\n  this version of the transaction, it's relayed across the network, and\n  eventually confirmed by miners.\n\nWe can see the replacement rules for sequence at work if we consider\nalternative scenarios:\n\n- Imagine that Alice broadcasts the final transaction, with a sequence of\n  0xffffffff, and then Bob broadcasts one of the earlier transactions\n  where his balance was higher.  Because Bob's version of the\n  transaction has a lower sequence number, full nodes using the original\n  Bitcoin code won't relay it to miners, and miners who also used the\n  original code won't mine it.\n\n- In another scenario, imagine that Bob broadcasts an earlier version of\n  the transaction a few seconds before Alice broadcasts the final\n  version.  Nodes will relay Bob's version and miners will attempt to\n  mine it, but when Alice's version with its higher sequence number\n  arrives, nodes will also relay it and miners using the original\n  Bitcoin code will try to mine it instead of Bob's version.  Unless Bob\n  got lucky and a block was discovered before Alice's version arrived,\n  it's Alice's version of the transaction that will get confirmed.\n\nThis type of protocol is what we now (((\"payment channels\")))call a _payment channel_.\nBitcoin's creator, in an email attributed to him, called(((\"high-frequency transactions\"))) these\n_high-frequency transactions_ and described a number of features added to\nthe protocol to support them.  We'll learn about several of those other\nfeatures later and also discover how modern versions of payment channels\nare increasingly being used in Bitcoin today.\n\nThere were a few problems with purely sequence-based payment channels.\nThe first was that the rules for replacing a lower-sequence transaction\nwith a higher-sequence transaction were only a matter of software\npolicy.  There was no direct incentive for miners to prefer one version\nof the transaction over any other.  The second problem was that the\nfirst person to send their transaction might get lucky and have it\nconfirmed even if it wasn't the highest-sequence transaction.  A\nsecurity protocol that fails a few percent of the time due to bad luck\nisn't a very effective protocol.\n\nThe third problem was that it was possible to replace one version of a\ntransaction with a different version an unlimited number of\ntimes.  Each replacement would consume the bandwidth of all the relaying full nodes\non the network.  For example, as of this writing, there are about 50,000\nrelaying full nodes; an attacker creating 1,000 replacement transactions\nper minute at 200 bytes each would use about 20 KB of their\npersonal bandwidth but about 10 GB of full node network bandwidth\nevery minute.  Except for the cost of their 20 KB/minute bandwidth and\nthe occasional fee when a transaction got confirmed, the attacker wouldn't\nneed to pay any costs for the enormous burden they placed on full node\noperators.\n\nTo eliminate the risk of this attack, the original type of\nsequence-based transaction replacement was disabled in an early version\nof the Bitcoin software.  For several years, Bitcoin full nodes would\nnot allow an unconfirmed transaction containing a particular input (as\nindicated by its outpoint) to be replaced by a different transaction\ncontaining the same input.  However, that situation didn't (((\"sequence-based transaction replacement\", startref=\"sequence-replace\")))last forever.\n\n[[sequence-bip125]]\n===== Opt-in transaction replacement signaling\n\nAfter the(((\"opt-in transaction replacement\")))(((\"replace by fee (RBF)\")))(((\"transaction fees\", \"opt-in transaction replacement\"))) original sequence-based transaction replacement was disabled\ndue to the potential for abuse, a solution was proposed: programming\nBitcoin Core and other relaying full node software to allow a\ntransaction that paid a higher transaction fee rate to replace a\nconflicting transaction that paid a lower fee rate.  This is called\n_replace by fee_, or _RBF_ for short.  Some users and businesses\nobjected to adding support for transaction replacement back into Bitcoin\nCore, so a compromise was reached that once again used the sequence\nfield in support of replacement.\n\nAs documented in BIP125, an unconfirmed transaction with any input that\nhas a sequence set to a value below 0xfffffffe (i.e., at least 2 below\nthe maximum value) signals to the network that its signer wants it to be\nreplaceable by a conflicting transaction paying a higher fee rate.\nBitcoin Core allowed those unconfirmed transactions to be replaced and\ncontinued to disallow other transactions from being replaced.  This\nallowed users and businesses that objected to replacement to simply\nignore unconfirmed transactions containing the BIP125 signal until they\nbecame confirmed.\n\nThere's more to modern transaction replacement policies than fee rates\nand sequence signals, which we'll see in <<rbf>>.\n\n[[relative_timelocks]]\n===== Sequence as a consensus-enforced relative timelock\n\nIn <<version>>, we learned (((\"relative timelocks\", id=\"relative-timelock\")))that the BIP68 soft fork added\na new constraint to transactions with version numbers 2 or higher.  That\nconstraint applies to the sequence field.\n\nTransaction inputs with sequence values less than 2^31^ are\ninterpreted as having a relative timelock. Such a transaction may only\nbe included in the blockchain once the previous output (referenced by the\noutpoint) has aged by the relative timelock amount. For example, a\ntransaction with one input with a relative timelock of 30 blocks can\nonly be confirmed in a block with at least 29 blocks between it and the\nblock containing the output being spent on the same blockchain.\nSince sequence is a per-input field, a transaction may contain any\nnumber of timelocked inputs, all of which must have sufficiently aged\nfor the transaction to be valid. A disable flag allows a transaction to\ninclude both inputs with a relative timelock (sequence < 2^31^) and\ninputs without a relative timelock (sequence ≥ 2^31^).\n\nThe sequence value is specified in either blocks or seconds.\nA type-flag\nis used to differentiate between values counting blocks and values\ncounting time in seconds. The type-flag is set in the 23rd\nleast-significant bit (i.e., value 1<<22). If the type-flag is set, then\nthe sequence value is interpreted as a multiple of 512 seconds. If\nthe type-flag is not set, the sequence value is interpreted as a\nnumber of blocks.\n\n\nWhen interpreting sequence as a relative timelock, only the 16 least\nsignificant bits are considered. Once the flags (bits 32 and 23) are\nevaluated, the sequence value is usually \"masked\" with a 16-bit mask\n(e.g., +sequence+ & 0x0000FFFF).  The multiple of 512 seconds is\nroughly equal to the average amount of time between blocks, so the\nmaximum relative timelock in both blocks and seconds from 16 bits\n(2^16^) is a bit more than one year.\n\n<<bip_68_def_of_nseq>> shows the binary layout of the sequence value,\nas defined by BIP68.\n\n[[bip_68_def_of_nseq]]\n.BIP68 definition of sequence encoding (Source: BIP68).\nimage::images/mbc3_0603.png[\"BIP68 definition of sequence encoding\"]\n\nNote that any transaction that sets a relative timelock using sequence\nalso sends the signal for opt-in replace by fee (((\"transactions\", \"inputs\", startref=\"transaction-input\")))(((\"inputs\", startref=\"input-transaction\")))(((\"transactions\", \"inputs\", \"sequence field\", startref=\"transaction-input-sequence\")))(((\"inputs\", \"sequence field\", startref=\"input-transaction-sequence\")))(((\"sequence field (transaction inputs)\", startref=\"sequence-field\")))as described in\n<<sequence-bip125>>.\n\n=== Outputs\n\nThe (((\"transactions\", \"outputs\", id=\"transaction-output\")))(((\"outputs\", id=\"output-transaction\")))outputs field of a transaction contains several fields related to\nspecific outputs.  Just as we did with the inputs field, we'll start by\nlooking at the specific bytes of the outputs field from the example\ntransaction where Alice pays Bob, displayed as\na map of those bytes in <<output-byte-map>>.\n\n[[output-byte-map]]\n.A byte map of the outputs field from Alice's transaction.\nimage::images/mbc3_0604.png[\"A byte map of the outputs field from Alice's transaction\"]\n\n==== Outputs Count\n\nIdentical(((\"transactions\", \"outputs\", \"count\")))(((\"outputs\", \"count\"))) to the start of the inputs section of a transaction, the outputs\nfield begins with a count indicating the number of outputs in this\ntransaction.  It's a compactSize integer and must be greater than zero.\n\nThe example transaction has two outputs.\n\n==== Amount\n\nThe first(((\"transactions\", \"outputs\", \"amount field\", id=\"transaction-output-amount\")))(((\"outputs\", \"amount field\", id=\"output-transaction-amount\")))(((\"amount field (transaction outputs)\", id=\"amount-field\"))) field of a specific output is its _amount_, also called\n\"value\" in Bitcoin Core.  This is an 8-byte signed integer indicating\nthe number of satoshis to transfer.  A satoshi is the smallest unit of\nbitcoin that can be represented in an onchain Bitcoin transaction.\nThere are 100 million satoshis in a bitcoin.\n\nBitcoin's consensus rules allow an output to have a value as small as\nzero and as large as 21 million bitcoins (2.1 quadrillion satoshis).\n\n//TODO:describe early integer overflow problem\n\n[[uneconomical_outputs]]\n===== Uneconomical outputs and disallowed dust\n\nDespite not (((\"uneconomical outputs\", id=\"uneconomical\")))(((\"dust policies\", id=\"dust\")))having any value, a zero-value output can be spent under\nthe same rules as any other output.  However, spending an output (using\nit as the input in a transaction) increases the size of a transaction,\nwhich increases the amount of fee that needs to be paid.  If the value\nof the output is less than the cost of the additional fee, then it doesn't\nmake economic sense to spend the output.  Such outputs are known as\n_uneconomical outputs_.\n\nA zero-value output is always an uneconomical output; it wouldn't\ncontribute any value to a transaction spending it even if the\ntransaction's fee rate was zero.  However, many other outputs with low\nvalues can be uneconomical as well, even unintentionally.  For example,\nat a typical fee rate on the network today, an output might add more\nvalue to a transaction than it costs to spend--but tomorrow, fee rates\nmight rise and make the output uneconomical.\n\nThe need for full nodes to keep track of all UTXOs, as described in <<outpoints>>, means that every UTXO makes it\nslightly harder to run a full node.  For UTXOs containing significant\nvalue, there's an incentive to eventually spend them, so they aren't a\nproblem.  But there's no incentive for the person controlling an\nuneconomical UTXO to ever spend it, potentially making it a perpetual\nburden on operators of full nodes.  Because Bitcoin's decentralization\ndepends on many people being willing to run full nodes, several full\nnode implementations such as Bitcoin Core discourage the creation of\nuneconomical outputs using policies that affect the relay and mining of\nunconfirmed transactions.\n\n[role=\"less_space pagebreak-before\"]\nThe policies against relaying or mining transactions creating new\nuneconomical outputs are called _dust_ policies, based on a metaphorical\ncomparison between outputs with very small values and particles with\nvery small size.  Bitcoin Core's dust policy is complicated and contains\nseveral arbitrary numbers, so many programs we're aware of simply\nassume outputs with less than 546 satoshis are dust and will not be\nrelayed or mined by default.  There are occasionally proposals to lower\ndust limits, and counterproposals to raise them, so we encourage\ndevelopers using presigned transactions or multiparty protocols to\ncheck whether the policy has changed since publication of this book.\n\n[TIP]\n====\nSince Bitcoin's inception, every full node has needed to keep a copy of\nevery UTXO, but that might not always be\nthe case.  Several developers have been working on(((\"Utreexo\"))) Utreexo, a project\nthat allows full nodes to store a commitment to the set of UTXOs rather\nthan the data itself.  A minimal commitment might be only a kilobyte or\ntwo in size--compare that to the over five gigabytes Bitcoin Core stores\nas of this writing.\n\nHowever, Utreexo will still require some nodes to store all UTXO data,\nespecially nodes serving miners and other operations that need to\nquickly validate new blocks.  That means uneconomical outputs can still\nbe a problem for full nodes even in a possible future where most nodes\nuse Utreexo.\n====\n\nBitcoin Core's policy rules about dust do have one exception: output\nscripts starting with +OP_RETURN+, called _data carrier outputs_,\ncan have a value of zero.  The +OP_RETURN+ opcode causes the script to\nimmediately fail no matter what comes after it, so these outputs can\nnever be spent.  That means full nodes don't need to keep track of them,\na feature Bitcoin Core takes advantage of to allow users to store small\namounts of arbitrary data in the blockchain without increasing the size\nof its UTXO database.  Since the outputs are unspendable, they aren't\nuneconomical--any satoshis assigned to them become\npermanently unspendable--so allowing the amount to be zero ensures\nsatoshis aren't being (((\"transactions\", \"outputs\", \"amount field\", startref=\"transaction-output-amount\")))(((\"outputs\", \"amount field\", startref=\"output-transaction-amount\")))(((\"amount field (transaction outputs)\", startref=\"amount-field\")))(((\"uneconomical outputs\", startref=\"uneconomical\")))(((\"dust policies\", startref=\"dust\")))destroyed.\n\n==== Output Scripts\n\nThe (((\"transactions\", \"outputs\", \"output scripts\", id=\"transaction-output-script\")))(((\"outputs\", \"output scripts\", id=\"output-transaction-script\")))(((\"output scripts\", id=\"output-script2\")))output amount is followed by a compactSize integer indicating the\nlength of the _output script_, the script that contains the\nconditions that will need to be fulfilled in order to spend the\nbitcoins.  According to Bitcoin's\nconsensus rules, the minimum size of an output script is zero.\n\nThe consensus maximum allowed size of an output script varies depending on\nwhen it's being checked.  There's no explicit limit on the size of an\noutput script in the output of a transaction, but a later transaction can\nonly spend a previous output with a script of 10,000 bytes or\nsmaller.  Implicitly, an output script can be almost as large as the\ntransaction containing it, and a transaction can be almost as large as\nthe block containing it.\n\n[[anyone-can-spend]]\n[TIP]\n====\nAn output script with zero length can be spent by an input script containing\n++OP_TRUE++.  Anyone can create that input script, which means anyone\ncan spend an empty output script.  There are an essentially unlimited\nnumber of scripts that anyone can spend, and they are known to Bitcoin\nprotocol developers as _anyone can spends_.  Upgrades to Bitcoin's\nscript language often take an existing anyone-can-spend script and add\nnew constraints to it, making it only spendable under the new\nconditions.  Application developers should never need to use an\nanyone-can-spend script, but if you do, we highly recommend that you\nloudly announce your plans to Bitcoin users and developers so that\nfuture upgrades don't accidentally interfere with your system.\n====\n\nBitcoin Core's policy for relaying and mining transactions effectively\nlimits output scripts to just a few templates, (((\"standard transaction outputs\")))called _standard\ntransaction outputs_.  This was originally implemented after the\ndiscovery of several early bugs in Bitcoin related to the Script\nlanguage and is retained in modern Bitcoin Core to support\nanyone-can-spend upgrades and to encourage the best practice of placing\nscript conditions in P2SH redeem scripts, segwit v0 witness scripts, and\nsegwit v1 (taproot) leaf scripts.\n\nWe'll look at each of the current standard transaction templates and\nlearn how to (((\"transactions\", \"outputs\", startref=\"transaction-output\")))(((\"outputs\", startref=\"output-transaction\")))(((\"transactions\", \"outputs\", \"output scripts\", startref=\"transaction-output-script\")))(((\"outputs\", \"output scripts\", startref=\"output-transaction-script\")))(((\"output scripts\", startref=\"output-script2\")))parse scripts in <<c_authorization_authentication>>.\n\n[[witness_structure]]\n=== Witness Structure\n\nIn court,(((\"transactions\", \"witnesses\", id=\"transaction-witness\")))(((\"witnesses\", id=\"witness\"))) a witness is someone who testifies that they saw something\nimportant happen.  Human witnesses aren't always reliable, so courts\nhave various processes for interrogating witnesses to (ideally) only\naccept evidence from those who are reliable.\n\nImagine what a witness would look like for a math problem.  For example,\nif the important problem was _x + 2 == 4_ and someone claimed they\nwitnessed the solution, what would we ask them?  We'd want a\nmathematical proof that showed a value that could be summed with two to\nequal four.  We could even omit the need for a person and just use the\nproposed value for _x_ as our witness.  If we were told that the witness\nwas _two_, then we could fill in the equation, check that it was correct, and\ndecide that the important problem had been solved.\n\nWhen spending bitcoins, the important problem we want to solve is\ndetermining whether the spend was authorized by the person or people who\ncontrol those bitcoins.  The thousands of full nodes that enforce\nBitcoin's consensus rules can't interrogate human witnesses, but they can\naccept _witnesses_ that consist entirely of data for solving math\nproblems.  For example, a witness of _2_ will allow spending bitcoins\nprotected by the following script:\n\n----\n2 OP_ADD 4 OP_EQUAL\n----\n\nObviously, allowing your bitcoins to be spent by anyone who can solve a\nsimple equation wouldn't be secure.  As we'll see in <<c_signatures>>, an\nunforgeable digital signature scheme uses an equation that can only be\nsolved by someone in possession of certain data they're able to\nkeep secret.  They're able to reference that secret data using a public\nidentifier.  That public identifier is (((\"public keys\")))(((\"digital signatures\")))(((\"signatures\", see=\"digital signatures\")))called a _public key_ and a\nsolution to the equation is called a _signature_.\n\nThe following script contains a public key and an opcode that requires\na corresponding signature commit to the data in the spending transaction.  Like\nthe number _2_ in our simple example, the signature is our witness:\n\n----\n<public key> OP_CHECKSIG\n----\n\nWitnesses, the values used to solve the math problems that protect\nbitcoins, need to be included in the transactions where they're used in\norder for full nodes to verify them.  In the legacy transaction format\nused for all early Bitcoin transactions, signatures and other data are\nplaced in the input script field.  However, when developers started to\nimplement contract protocols on Bitcoin, such as we saw in\n<<original_tx_replacement>>, they discovered several significant\nproblems with placing witnesses in the input script field.\n\n==== Circular Dependencies\n\nMany (((\"transactions\", \"witnesses\", \"circular dependencies\", id=\"transaction-witness-circular\")))(((\"witnesses\", \"circular dependencies\", id=\"witness-circular\")))(((\"circular dependencies\", id=\"circular\")))contract protocols for Bitcoin involve a series of transactions\nthat are signed out of order.  For example, Alice and Bob want to\ndeposit funds into a script that can only be spent with signatures from\nboth of them, but they each also want to get their money back if the\nother person becomes unresponsive.  A simple solution is to sign\ntransactions out of order:\n\n- Tx~0~ pays money from Alice and money from Bob into an output with a\n  script that requires signatures from both Alice and Bob to spend.\n\n- Tx~1~ spends the previous output to two outputs, one refunding Alice\n  her money and one refunding Bob his money (minus a small amount for\n  transaction fees).\n\n- If Alice and Bob sign Tx~1~ before they sign Tx~0~, then they're both\n  guaranteed to be able to get a refund at any time.  The protocol\n  doesn't require either of them to trust the other, making (((\"trustless protocols\")))it a _trustless\n  protocol_.\n\nA problem with this construction in the legacy transaction format is\nthat every field, including the input script field that contains\nsignatures, is used to derive a [.keep-together]#transaction's# identifier (txid).  The\ntxid for Tx~0~ is part of the input's outpoint in Tx~1~.  That means\nthere's no way for Alice and Bob to construct Tx~1~ until both\nsignatures for Tx~0~ are known--but if they know the signatures for\nTx~0~, one of them can broadcast that transaction before signing the\nrefund transaction, eliminating the guarantee of a refund.  This is a\n_circular dependency_.\n\n==== Third-Party Transaction Malleability\n\nA more (((\"transactions\", \"witnesses\", \"third-party transaction malleability\", id=\"transaction-witness-third-party\")))(((\"witnesses\", \"third-party transaction malleability\", id=\"witness-circular-third-party\")))(((\"third-party transaction malleability\", id=\"third-party\")))complex series of transactions can sometimes eliminate a circular\ndependency, but many protocols will then encounter a new concern: it's\noften possible to solve the same script in different ways.  For example,\nconsider our simple script from <<witness_structure>>:\n\n----\n2 OP_ADD 4 OP_EQUAL\n----\n\nWe can make this script pass by providing the value _2_ in an input script,\nbut there are several ways to put that value on the stack in Bitcoin.\nHere are just a few:\n\n----\nOP_2\nOP_PUSH1 0x02\nOP_PUSH2 0x0002\nOP_PUSH3 0x000002\n...\nOP_PUSHDATA1 0x0102\nOP_PUSHDATA1 0x020002\n...\nOP_PUSHDATA2 0x000102\nOP_PUSHDATA2 0x00020002\n...\nOP_PUSHDATA4 0x0000000102\nOP_PUSHDATA4 0x000000020002\n...\n----\n\nEach alternative encoding of the number _2_ in an input script will produce\na slightly different transaction with a completely different txid.  Each\ndifferent version of the transaction spends the same inputs (outpoints)\nas every other version of the transaction, making them all _conflict_\nwith each other.  Only one version of a set of conflicting transactions\ncan be contained within a valid blockchain.\n\nImagine Alice creates one version of the transaction with +OP_2+ in the\ninput script and an output that pays Bob.  Bob then immediately spends that\noutput to Carol.  Anyone on the network can replace +OP_2+ with\n+OP_PUSH1 0x02+, creating a conflict with Alice's original version.  If\nthat conflicting transaction is confirmed, then there's no way to\ninclude Alice's original version in the same blockchain, which means\nthere's no way for Bob's transaction to spend its output.\nBob's payment to Carol has been made invalid even though neither Alice,\nBob, nor Carol did anything wrong.  Someone not involved in the\ntransaction (a third party) was able to change (mutate) Alice's\ntransaction, a problem called _unwanted third-party transaction\nmalleability_.\n\n[TIP]\n====\nThere are cases when people want their transactions to be malleable and\nBitcoin provides several features to support that, most notably the\nsignature hashes (sighash) we'll learn about in <<sighash_types>>.  For\nexample, Alice can use a sighash to allow Bob to help her pay some\ntransaction fees.  This mutates Alice's transaction but only in a way\nthat Alice wants.  For that reason, we will occasionally prefix the\nword _unwanted_ to the term _transaction malleability_.  Even when we\nand other Bitcoin technical writers use the shorter term, we're almost\ncertainly talking about the unwanted variant of(((\"transactions\", \"witnesses\", \"third-party transaction malleability\", startref=\"transaction-witness-third-party\")))(((\"witnesses\", \"third-party transaction malleability\", startref=\"witness-circular-third-party\")))(((\"third-party transaction malleability\", startref=\"third-party\"))) malleability.\n====\n\n==== Second-Party Transaction Malleability\n\nWhen the (((\"transactions\", \"witnesses\", \"second-party transaction malleability\", id=\"transaction-witness-second-party\")))(((\"witnesses\", \"second-party transaction malleability\", id=\"witness-circular-second-party\")))(((\"second-party transaction malleability\", id=\"second-party\")))legacy transaction format was the only transaction format,\ndevelopers worked on proposals to minimize third-party malleability,\nsuch as BIP62.  However, even if they were able to entirely eliminate\nthird-party malleability, users of contract protocols faced another problem:\nif they required a signature from someone else involved in the protocol,\nthat person could generate alternative signatures and change the txid.\n\nFor example, Alice and Bob have deposited their money into a script\nrequiring a signature from both of them to spend.  They've also created\na refund transaction that allows each of them to get their money back at\nany time.  Alice decides she wants to spend just some of the\nmoney, so she cooperates with Bob to create a chain of transactions:\n\n- Tx~0~ includes signatures from both Alice and Bob, spending its\n  bitcoins to two outputs.  The first output spends some of Alice's\n  money; the second output returns the remainder of the bitcoins back to\n  the script requiring Alice and [.keep-together]#Bob's signatures.#  Before signing this\n  transaction, they create a new refund transaction, Tx~1~.\n\n- Tx~1~ spends the second output of Tx~0~ to two new outputs, one to\n  Alice for her share of the joint funds, and one to Bob for his share.\n  Alice and Bob both sign this transaction before they sign Tx~0~.\n\nThere's no circular dependency here and, if we ignore third-party\ntransaction malleability, this looks like it should provide us with a\ntrustless protocol.  However, it's a property of Bitcoin signatures that\nthe signer has to choose a large random number when creating their\nsignature.  Choosing a different random number will produce a different\nsignature even if everything being signed stays the same.  It's sort of\nlike how, if you provide a handwritten signature for two copies of the\nsame contract, each of those physical signatures will look slightly\ndifferent.\n\nThis mutability of signatures means that, if Alice tries to broadcast\nTx~0~ (which contains Bob's signature), Bob can generate an alternative\nsignature to create a conflicting transaction with a different txid.  If\nBob's alternative version of Tx~0~ gets confirmed, then Alice can't use\nthe presigned version of Tx~1~ to claim her refund.  This type of\nmutation (((\"transactions\", \"witnesses\", \"second-party transaction malleability\", startref=\"transaction-witness-second-party\")))(((\"witnesses\", \"second-party transaction malleability\", startref=\"witness-circular-second-party\")))(((\"second-party transaction malleability\", startref=\"second-party\")))is called _unwanted second-party transaction malleability_.\n\n[[segwit]]\n==== Segregated Witness\n\nAs (((\"transactions\", \"witnesses\", \"segregated witness\", id=\"transaction-witness-segwit\")))(((\"witnesses\", \"segregated witness\", id=\"witness-segwit\")))(((\"segregated witness (segwit)\", id=\"segregated-witness-segwit\")))early as https://oreil.ly/---bp[2011],\nprotocol developers knew how to solve the problems of circular\ndependence, third-party malleability, and second-party malleability.  The\nidea was to avoid including the input script in the calculation that\nproduces a transaction's txid.  Recall that an abstract name for the data\nheld by an input script is a _witness_.  The idea of separating the rest of\nthe data in a transaction from its witness for the purpose of generating\na txid is called _segregated witness_ (segwit).\n\nThe obvious method for implementing segwit requires a\nchange to Bitcoin's consensus rules that would not be compatible with\nolder full nodes, also (((\"hard forks\")))(((\"forks\", \"hard forks\")))called\na _hard fork_.  Hard forks come with a lot of challenges, as we'll\ndiscuss further in <<hard_forks>>.\n\nAn alternative approach to segwit was described in late 2015.  This\nwould use a backward-compatible change to the consensus rules, (((\"soft forks\")))(((\"forks\", \"soft forks\")))called a\n_soft fork_.  Backward compatible means that full nodes implementing\nthe change must not accept any blocks that full nodes without the change\nwould consider invalid.  As long as they obey that rule, newer full\nnodes can reject blocks that older full nodes would accept, giving them\nthe ability to enforce new consensus rules (but only if the newer full\nnodes represent the economic consensus among Bitcoin users--we'll\nexplore the details of upgrading Bitcoin's consensus rules in\n<<mining>>).\n\nThe soft fork segwit approach is based on anyone-can-spend\noutput scripts.  A script that starts with any of the numbers 0 to 16\nand followed by 2 to 40 bytes of data is defined as a segwit\noutput script template.  The number indicates its version (e.g., 0 is\nsegwit version 0, or _segwit v0_).  The data is called a _witness\nprogram_.  It's also possible to wrap the segwit template in a P2SH\ncommitment, but we won't deal with that in this chapter.\n\nFrom the perspective of old nodes, these output script templates can be\nspent with an empty input script.  From the perspective of a new node that\nis aware of the new segwit rules, any payment to a segwit output script\ntemplate must only be spent with an empty input script.  Notice the\ndifference here: old nodes _allow_ an empty input script; new nodes\n_require_ an empty input script.\n\n[role=\"less_space pagebreak-before\"]\nAn empty input script keeps witnesses from affecting the txid, eliminating\ncircular dependencies, third-party transaction malleability, and\nsecond-party transaction malleability.  But, with no ability to put\ndata in an input script, users of segwit output script templates need a\nnew field.  That field is called the _witness structure_.\n\nThe introduction of witness programs and the witness structure complicates Bitcoin,\nbut it follows an existing trend of increasing abstraction.  Recall from\n<<ch04_keys_addresses>> that the original Bitcoin whitepaper describes a system\nwhere bitcoins were received to public keys (pubkeys) and spent with\nsignatures (sigs).  The public key defined who was _authorized_ to spend\nthe bitcoins (whoever controlled the corresponding private key) and the\nsignature provided _authentication_ that the spending transaction came\nfrom someone who controlled the private key.  To make that system more\nflexible, the initial release of Bitcoin introduced scripts that allow\nbitcoins to be received to output scripts and spent with input scripts.\nLater experience with contract protocols inspired allowing bitcoins to\nbe received to witness programs and spent with the witness structure. The terms and fields used in different versions of Bitcoin(((\"transactions\", \"witnesses\", \"segregated witness\", startref=\"transaction-witness-segwit\")))(((\"witnesses\", \"segregated witness\", startref=\"witness-segwit\")))(((\"segregated witness (segwit)\", startref=\"segregated-witness-segwit\"))) are shown in <<terms_used_authorization_authentication>>.\n\n++++\n<table id=\"terms_used_authorization_authentication\">\n<caption>Terms used for authorization and authentication data in different parts of Bitcoin</caption>\n<thead>\n<tr>\n<th/>\n<th><p>Authorization</p></th>\n<th class=\"right\"><p>Authentication</p></th>\n</tr></thead>\n<tbody>\n<tr>\n<td class=\"fakeheader\"><p><strong>Whitepaper</strong></p></td>\n<td><p>Public key</p></td>\n<td class=\"right\"><p>Signature</p></td>\n</tr>\n<tr>\n<td  class=\"fakeheader\"><p><strong>Original (Legacy)</strong></p></td>\n<td><p>Output script</p></td>\n<td class=\"right\"><p>Input script</p></td>\n</tr>\n<tr>\n<td  class=\"fakeheader\"><p><strong>Segwit</strong></p></td>\n<td><p>Witness program</p></td>\n<td class=\"right\"><p>Witness structure</p></td>\n</tr>\n</tbody>\n</table>\n++++\n\n==== Witness Structure Serialization\n\nSimilar to(((\"transactions\", \"witnesses\", \"count\", id=\"transaction-witness-count\")))(((\"witnesses\", \"count\", id=\"witness-count\"))) the inputs and outputs fields, the witness structure contains\nother fields, so we'll start with a map of those bytes from\nAlice's transaction in <<alice_tx_witness_map>>.\n\n[[alice_tx_witness_map]]\n.A byte map of the witness structure from Alice's transaction.\nimage::images/mbc3_0605.png[\"A byte map of the witness from Alice's transaction\"]\n\nUnlike the inputs and outputs fields, the overall witness structure doesn't\nstart with any indication of the total number of witness stacks it contains.\nInstead, this is implied by the inputs field--there's one witness\nstack for every input in a transaction.\n\nThe witness structure for a particular input does start with a count of the\nnumber of elements they contain.  Those elements are (((\"witness items\")))called _witness\nitems_.  We'll explore them in detail in\n<<c_authorization_authentication>>, but for now we need to know that\neach witness item is prefixed by a compactSize integer indicating its\nsize.\n\nLegacy inputs don't contain any witness items, so their witness stack\nconsists entirely of a count of zero (0x00).\n\nAlice's transaction contains one input and one (((\"transactions\", \"witnesses\", startref=\"transaction-witness\")))(((\"witnesses\", startref=\"witness\")))(((\"transactions\", \"witnesses\", \"count\", startref=\"transaction-witness-count\")))(((\"witnesses\", \"count\", startref=\"witness-count\")))witness item.\n\n[[lock_time]]\n=== Lock Time\n\nThe (((\"transactions\", \"lock time\")))(((\"lock time\")))final field in a serialized transaction is its lock time.  This\nfield was part of Bitcoin's original serialization format, but it was\ninitially only enforced by Bitcoin's policy for choosing which\ntransactions to mine.  Bitcoin's earliest known soft fork added a rule\nthat, starting at block height 31,000, forbid the inclusion of a\ntransaction in a block unless it satisfies one of the following rules:\n\n- The transaction indicates that it should be eligible for inclusion in\n  any block by setting its lock time to 0.\n\n- The transaction indicates that it wants to restrict which blocks it\n  can be included in by setting its lock time to a value less than\n  500,000,000.  In this case, the transaction can only be included in a\n  block that has a height equal to the lock time or higher.  For\n  example, a transaction with a lock time of 123,456 can be included in\n  block 123,456 or any later block.\n\n- The transaction indicates that it wants to restrict when it can be\n  included in the blockchain by setting its lock time to a value of\n  500,000,000 or greater.  In this case, the field is parsed as epoch\n  time (the number of seconds since 1970-01-01T00:00 UTC) and the\n  transaction can only be included in a (((\"median time past (MTP)\")))(((\"MTP (median time past)\")))block with a _median time past_\n  (MTP) greater than the lock time.  MTP is normally about an hour or\n  two behind the current time.  The rules for MTP are described in\n  <<mtp>>.\n\n[[coinbase_transactions]]\n=== Coinbase Transactions\n\nThe first (((\"transactions\", \"coinbase\", id=\"transaction-coinbase2\")))(((\"coinbase transactions\", id=\"coinbase-transaction\")))(((\"generation transactions\")))transaction in each block is a special case.  Most older\ndocumentation calls this a _generation transaction_, but most newer\ndocumentation calls it a _coinbase transaction_ (not to be confused with\ntransactions created by the company named \"Coinbase\").\n\nCoinbase transactions are created by the miner of the block that\nincludes them and gives the miner the option to claim any fees paid by\ntransactions in that block.  Additionally, up until block 6,720,000,\nminers are allowed to claim a subsidy consisting of bitcoins that have\nnever previously been circulated, called (((\"block subsidy\")))(((\"block reward\")))the _block subsidy_.  The total\namount a miner can claim for a block--the combination of fees and\nsubsidy--is called the _block reward_.\n\nSome of the special rules for coinbase transactions include:\n\n- They may only have one input.\n\n- The single input must have an outpoint with a null txid (consisting entirely\n  of zeros) and a maximal output index (0xffffffff).  This prevents the\n  coinbase transaction from referencing a previous transaction output,\n  which would (at the very least) be confusing given that the coinbase\n  transaction pays out fees and subsidy.\n\n- The field that would contain an input script in a normal transaction is\n  called a _coinbase_.  It's this field that gives the coinbase\n  transaction its name.  The coinbase field must be at least two bytes\n  and not longer than 100 bytes.  This script is not executed but legacy\n  transaction limits on the number of signature-checking operations\n  (sigops) do apply to it, so any arbitrary data placed in it should be\n  prefixed by a data-pushing opcode.  Since a 2013 soft fork defined in\n  BIP34, the first few bytes of this field must follow additional rules\n  we'll describe in <<duplicate_transactions>>.\n\n- The sum of the outputs must not exceed the value of the fees collected\n  from all the transactions in that block plus the subsidy.  The subsidy\n  started at 50 BTC per block and halves every 210,000 blocks\n  (approximately every four years).  Subsidy values are rounded down to the\n  nearest satoshi.\n\n- Since the 2017 segwit soft fork documented in BIP141, any block that contains\n  a transaction spending a segwit output must contain an output to the\n  coinbase transaction that commits to all of the transactions in the\n  block (including their witnesses).  We'll explore this commitment in\n  <<mining>>.\n\nA coinbase transaction can have any other outputs that would be valid in\na normal transaction.  However, a transaction spending one of those\noutputs cannot be included in any block until after the coinbase\ntransaction has received 100 confirmations.  This is called the\n_maturity rule_, and (((\"maturity rule\")))coinbase transaction outputs that don't yet have\n100 confirmations are called _immature_.\n\n//TODO:stretch goal to describe the reason for the maturity rule and,\n//by extension the reason for no expiring timelocks\n\nMost Bitcoin software doesn't need to deal with coinbase transactions,\nbut their special nature does mean they can occasionally be the cause of\nunusual problems in software that's not designed to expect(((\"transactions\", \"coinbase\", startref=\"transaction-coinbase2\")))(((\"coinbase transactions\", startref=\"coinbase-transaction\"))) them.\n\n// Useful content deleted\n// - no input amount in transactions\n// - no balances in transactions\n//   - UTXO model theory?\n// Coin selection\n// Change\n// Inability for lightweight clients to get old UTXOs\n\n=== Weight and Vbytes\n\nEach (((\"transactions\", \"weights\", id=\"transactions-weight\")))(((\"weights (of transactions)\", id=\"weights\")))(((\"vbytes\", id=\"vbytes\")))Bitcoin block is limited in the amount of transaction data it can\ncontain, so most Bitcoin software needs to be able to measure the\ntransactions it creates or processes.  The modern unit of measurement\nfor Bitcoin is called _weight_.  An alternative version of weight is\n_vbytes_, where four units of weight equal one vbyte, providing an easy\ncomparison to the original _byte_ measurement unit used in legacy\nBitcoin blocks.\n\nBlocks are limited to 4 million weight.  The block header takes up 240\nweight.  An additional field, the transaction count, uses either 4 or\n12 weight.  All of the remaining weight may be used for transaction\ndata.\n\nTo calculate the weight of a particular field in a transaction, the size\nof that serialized field in bytes is multiplied by a factor.  To\ncalculate the weight of a transaction, sum together the weights of all\nof its fields.  The factors for each of the fields in a transaction are\nshown in <<weight_factors>>.  To provide an example, we also calculate\nthe weight of each field in this chapter's example transaction from\nAlice to Bob.\n\nThe factors, and the fields to which they are applied, were chosen to\nreduce the weight used when spending a UTXO.  This helps discourage the\ncreation of uneconomical outputs as described in\n<<uneconomical_outputs>>.\n\n++++\n<table id=\"weight_factors\">\n<caption>Weight factors for all fields in a Bitcoin transaction</caption>\n<thead>\n<tr>\n<th><p>Field</p></th>\n<th><p>Factor</p></th>\n<th><p>Weight in Alice’s Tx</p></th>\n</tr> </thead>\n<tbody>\n<tr>\n<td><p>Version</p></td>\n<td><p>4</p></td>\n<td><p>16</p></td>\n</tr>\n<tr>\n<td><p>Marker &amp; Flag</p></td>\n<td><p>1</p></td>\n<td><p>2</p></td>\n</tr>\n<tr>\n<td><p>Inputs Count</p></td>\n<td><p>4</p></td>\n<td><p>4</p></td>\n</tr>\n<tr>\n<td><p>Outpoint</p></td>\n<td><p>4</p></td>\n<td><p>144</p></td>\n</tr>\n<tr>\n<td><p>Input script</p></td>\n<td><p>4</p></td>\n<td><p>4</p></td>\n</tr>\n<tr>\n<td><p>Sequence</p></td>\n<td><p>4</p></td>\n<td><p>16</p></td>\n</tr>\n<tr>\n<td><p>Outputs Count</p></td>\n<td><p>4</p></td>\n<td><p>4</p></td>\n</tr>\n<tr>\n<td><p>Amount</p></td>\n<td><p>4</p></td>\n<td><p>64 (2 outputs)</p></td>\n</tr>\n<tr>\n<td><p>Output script</p></td>\n<td><p>4</p></td>\n<td><p>232 (2 outputs with different scripts)</p></td>\n</tr>\n<tr>\n<td><p>Witness Count</p></td>\n<td><p>1</p></td>\n<td><p>1</p></td>\n</tr>\n<tr>\n<td><p>Witness items</p></td>\n<td><p>1</p></td>\n<td><p>66</p></td>\n</tr>\n<tr>\n<td><p>Lock time</p></td>\n<td><p>4</p></td>\n<td><p>16</p></td>\n</tr>\n<tr>\n<td><p><strong>Total</strong></p></td>\n<td><p><em>N/A</em></p></td>\n<td><p><strong>569</strong></p></td>\n</tr>\n</tbody>\n</table>\n++++\n\n[role=\"less_space pagebreak-before\"]\nWe can verify our weight calculation by getting the total for Alice's\ntransaction from Bitcoin Core:\n\n----\n$ bitcoin-cli getrawtransaction 466200308696215bbc949d5141a49a41\\\n38ecdfdfaa2a8029c1f9bcecd1f96177 2 | jq .weight\n569\n----\n\nAlice's transaction from <<alice_tx_serialized_reprint>> at the beginning of\nthis chapter is shown represented in weight units in\n<<alice_tx_weight_map>>.  You can see the factor at work by comparing\nthe difference in size between the various fields in the (((\"transactions\", \"weights\", startref=\"transactions-weight\")))(((\"weights (of transactions)\", startref=\"weights\")))(((\"vbytes\", startref=\"vbytes\")))two images.\n\n[[alice_tx_weight_map]]\n.A byte map of Alice's transaction.\nimage::images/mbc3_0606.png[\"A weight map of Alice's transaction\"]\n\n[[legacy_serialization]]\n=== Legacy Serialization\n\nThe (((\"transactions\", \"legacy serialization\")))(((\"legacy serialization\")))serialization format described in this chapter is used for the\nmajority of new Bitcoin transactions as of the writing of this book, but\nan older serialization format is still used for many transactions.  That\nolder format, called _legacy serialization_, must be used on the Bitcoin\nP2P network for any transaction with an empty witness structure (which is only\nvalid if the transaction doesn't spend any witness programs).\n\nLegacy serialization does not include the marker, flag, and witness structure\nfields.\n\n++++\n<p class=\"fix_tracking2\">\nIn this chapter, we looked at each of the fields in a transaction and\ndiscovered how they communicate to full nodes the details about the\nbitcoins to be transferred between users.  We only briefly looked at the\noutput script, input script, and witness structure that allow specifying and\nsatisfying conditions that restrict who can spend what bitcoins.\nUnderstanding how to construct and use these conditions is essential to\nensuring that only Alice can spend her bitcoins, so they will be the\nsubject of the next chapter.</p>\n++++\n\n//TODO:text long section or full chapter about psbts\n"
        },
        {
          "name": "ch07_authorization-authentication.adoc",
          "type": "blob",
          "size": 93.9306640625,
          "content": "[[c_authorization_authentication]]\n== Authorization and Authentication\n\nWhen you receive bitcoins, you have to decide who will have permission\nto spend them, (((\"authorization\")))(((\"authentication\")))called _authorization_.  You also have to decide how full\nnodes will distinguish the authorized spenders from everyone else,\ncalled _authentication_.  Your authorization instructions and the\nspender proof of authentication will be checked by thousands of\nindependent full nodes, which all need to come to the same conclusion\nthat a spend was authorized and authenticated in order for the transaction\ncontaining it to be valid.\n\nThe original description of Bitcoin used a public key for authorization.\nAlice paid Bob by putting his public key in the output of a transaction.\nAuthentication came from Bob in the form of a signature that committed to a\nspending transaction, such as from Bob to Carol.\n\nThe actual version of Bitcoin that was originally released provided a\nmore flexible mechanism for both authorization and authentication.\nImprovements since then have only increased that flexibility.  In this\nchapter, we'll explore those features and see how they're most commonly\nused.\n\n[[tx_script]]\n=== Transaction Scripts and Script Language\n\nThe(((\"transaction scripts\", see=\"scripts\")))(((\"Script programming language\"))) original version of Bitcoin introduced a new\nprogramming language called _Script_, a Forth-like stack-based\nlanguage.  Both the script placed in an output and the legacy\ninput script used in a spending transaction are written in this scripting\nlanguage.\n\nScript is a very simple language.  It requires minimal processing and\ncannot easily do many of the fancy things modern programming languages\ncan do.\n\nWhen legacy transactions were the\nmost commonly used type of transaction, the majority of transactions processed\nthrough the Bitcoin network had the form \"Payment to Bob's Bitcoin\naddress\" and used a script called a pay to public key hash (P2PKH) script.\nHowever, Bitcoin transactions are not limited to the \"Payment to Bob's\nBitcoin address\" script. In fact, scripts can be written to express a\nvast variety of complex conditions. In order to understand these more\ncomplex scripts, we must first understand the basics of transaction\nscripts and Script language.\n\nIn this section, we will demonstrate the basic components of the Bitcoin\ntransaction scripting language and show how it can be used to express\nconditions for spending and how those conditions can be satisfied.\n\n[TIP]\n====\nBitcoin transaction validation(((\"transactions\", \"validating\")))(((\"validating\", \"transactions\"))) is not based on\na static pattern but instead is achieved through the execution of a\nscripting language. This language allows for a nearly infinite variety\nof conditions to be expressed.\n====\n\n==== Turing Incompleteness\n\nThe (((\"scripts\", \"Turing incompleteness\")))(((\"Turing Complete\")))Bitcoin transaction script language\ncontains many operators, but is deliberately limited in one important\nway--there are no loops or complex flow control capabilities other than\nconditional flow control. This ensures that the language is not _Turing\nComplete_, meaning that scripts have limited complexity and predictable\nexecution times. Script is not a general-purpose language.\nThese\nlimitations ensure that the language cannot be used to create an\ninfinite loop or other form of \"logic bomb\" that could be embedded in a\ntransaction in a way that causes a denial-of-service attack against the\nBitcoin network. Remember, every transaction is validated by every full\nnode on the Bitcoin network. A limited language prevents the transaction\nvalidation mechanism from being used as a vulnerability.\n\n==== Stateless Verification\n\nThe (((\"scripts\", \"stateless verification\")))(((\"stateless script verification\")))(((\"verifying\", \"scripts\")))Bitcoin transaction script language is\nstateless, in that there is no state prior to execution of the script\nor state saved after execution of the script. All the\ninformation needed to execute a script is contained within the script\nand the transaction executing the script.  A\nscript will predictably execute the same way on any system. If your\nsystem verified a script, you can be sure that every other system in the\nBitcoin network will also verify the script, meaning that a valid\ntransaction is valid for everyone and everyone knows this. This\npredictability of outcomes is an essential benefit of the Bitcoin\nsystem.\n\n[[tx_lock_unlock]]\n==== Script Construction\n\nBitcoin's (((\"scripts\", \"input/output\", \"constructing\", id=\"script-input-output-construct\")))(((\"input scripts\", \"constructing\", id=\"input-script-construct\")))(((\"output scripts\", \"constructing\", id=\"output-script-construct\")))legacy transaction validation engine relies on two parts of scripts\nto validate transactions: an output script and an input script.\n\nAn output script\nspecifies the conditions that must be met to spend the output in the\nfuture, such as who is authorized to spend the output and how they will\nbe authenticated.\n\nAn input script is a script that satisfies the\nconditions placed in an output script and allows the output\nto be spent. Input scripts are part of every transaction input. Most\nof the time in legacy transactions they contain a digital signature produced by the user's\nwallet from his or her private key, but not all input scripts\nmust contain signatures.\n\nEvery Bitcoin(((\"transactions\", \"validating\")))(((\"validating\", \"transactions\"))) validating node will validate transactions by executing\nthe output and input scripts.  As we saw in\n<<c_transactions>>, each input contains an outpoint that refers to a\nprevious transaction output.  The input also contains an input script.  The\nvalidation software will copy the input script, retrieve the UTXO\nreferenced by the input, and copy the output script from that UTXO. The\ninput and output scripts are then executed together. The input is\nvalid if the input script satisfies the output script's conditions\n(see <<script_exec>>). All the inputs are validated independently as\npart of the overall validation of the transaction.\n\nNote that the preceding steps involve making copies of all data.  The\noriginal data in the previous output and current input is never changed.\nIn particular, the previous output is invariable and unaffected by\nfailed attempts to spend it.  Only a valid transaction that correctly\nsatisfies the conditions of the output script results in the output being\nconsidered as \"spent.\"\n\n<<input_and_output_scripts_legacy>> is an example of the output and\ninput scripts for the most common type of legacy Bitcoin transaction (a\npayment to a public key hash), showing the combined script resulting\nfrom the concatenation of the scripts prior to\nvalidation.\n\n[[input_and_output_scripts_legacy]]\n.Combining input and output scripts to evaluate a transaction script.\nimage::images/mbc3_0701.png[\"input_and_output_scripts\"]\n\n\n===== The script execution stack\n\nBitcoin's (((\"scripts\", \"stack\", id=\"script-stack\")))(((\"stack\", id=\"stack\")))scripting language is called a stack-based language because it\nuses a data structure called a _stack_. A stack is a very simple data\nstructure that can be visualized as a stack of cards. A stack has two\nbase operations: push and pop. Push adds an item on top of the stack. Pop\nremoves the top item from the stack.\n\nThe scripting language executes the script by processing each item from\nleft to right. Numbers (data constants) are pushed onto the stack.\nOperators push or pop one or more parameters from the stack, act on\nthem, and might push a result onto the stack. For example, +OP_ADD+ will\npop two items from the stack, add them, and push the resulting sum onto\nthe stack.\n\nConditional operators evaluate a condition, producing a boolean result\nof +TRUE+ or +FALSE+. For example, +OP_EQUAL+ pops two items from the stack\nand pushes +TRUE+ (+TRUE+ is represented by the number 1) if they are equal\nor +FALSE+ (represented by 0) if they are not equal. Bitcoin\ntransaction scripts usually contain a conditional operator so that they\ncan produce the +TRUE+ result that signifies a valid (((\"scripts\", \"stack\", startref=\"script-stack\")))(((\"stack\", startref=\"stack\")))transaction.\n\n===== A simple script\n\nNow let's (((\"scripts\", \"input/output\", \"examples of\", id=\"script-input-output-example\")))(((\"input scripts\", \"examples of\", id=\"input-script-example\")))(((\"output scripts\", \"examples of\", id=\"output-script-example\")))apply what we've learned about scripts and stacks to some simple examples.\n\nAs we will see in <<simplemath_script>>, the script +2 3 OP_ADD 5 OP_EQUAL+\ndemonstrates the arithmetic addition operator +OP_ADD+, adding two\nnumbers and putting the result on the stack, followed by the conditional\noperator +OP_EQUAL+, which checks that the resulting sum is equal to\n+5+. For brevity, the +OP_+ prefix may sometimes be omitted in examples\nin this book. For more details on the available script operators and\nfunctions, see https://oreil.ly/21vH9[Bitcoin Wiki's script\npage].\n\nAlthough most legacy output scripts refer to a public key hash (essentially, a\nlegacy Bitcoin address), thereby requiring proof of ownership to spend the\nfunds, the script does not have to be that complex. Any combination of\noutput and input scripts that results in a +TRUE+ value is valid. The\nsimple arithmetic we used as an example of the scripting language is\nalso a valid script.\n\nUse part of the arithmetic example script as the output script:\n\n----\n3 OP_ADD 5 OP_EQUAL\n----\n\nwhich can be satisfied by a transaction containing an input with the\ninput script:\n\n----\n2\n----\n\nThe validation software combines the scripts:\n\n----\n2 3 OP_ADD 5 OP_EQUAL\n----\n\nAs we see in <<simplemath_script>>, when\nthis script is executed, the result is +OP_TRUE+, making the transaction valid.  Although this is a valid transaction\noutput script, note that the resulting UTXO can be spent by anyone with\nthe arithmetic skills\nto know that the number 2 satisfies the script.\n\n\n[[simplemath_script]]\n.Bitcoin's script validation doing simple math.\nimage::images/mbc3_0702.png[\"TxScriptSimpleMathExample\"]\n\n[TIP]\n====\nTransactions are valid if the\ntop result on the stack is +TRUE+, which is any\nnonzero value.\nTransactions are invalid if the top value on the stack is +FALSE+ (the\nvalue zero or an empty stack), the script\nexecution is halted explicitly by an operator (such as +VERIFY+,\n+OP_RETURN+), or the script was not semantically valid (such as\ncontaining an +OP_IF+ statement that was not terminated by an +OP_ENDIF+\nopcode).  For details, see https://oreil.ly/J2DXt[Bitcoin\nWiki's script page].\n====\n\n\nThe following is a slightly more complex script, which calculates\n2 + 7 – 3 + 1. Notice that when the script contains several operators in\na row, the stack allows the results of one operator to be acted upon by\nthe next operator:\n\n----\n2 7 OP_ADD 3 OP_SUB 1 OP_ADD 7 OP_EQUAL\n----\n\nTry validating the preceding script yourself using pencil and paper.\nWhen the script execution ends, you should be left with a +TRUE+ value\non the (((\"scripts\", \"input/output\", \"examples of\", startref=\"script-input-output-example\")))(((\"input scripts\", \"examples of\", startref=\"input-script-example\")))(((\"output scripts\", \"examples of\", startref=\"output-script-example\")))stack.\n\n[[script_exec]]\n===== Separate execution of output and input scripts\n\nIn the (((\"scripts\", \"input/output\", \"separate execution\")))(((\"input scripts\", \"separate execution from output scripts\")))(((\"output scripts\", \"separate execution from input scripts\")))original Bitcoin\nclient, output and input scripts were concatenated and executed\nin sequence. For security reasons, this was changed in 2010 because of\na vulnerability known as the +1 OP_RETURN+ bug.  In the current\nimplementation, the scripts are executed separately with the stack\ntransferred between the two executions.\n\nFirst, the input script is executed using the stack execution\nengine. If the input script is executed without errors and has\nno operations left over, the stack is copied and the\noutput script is executed. If the result of executing the output script\nwith the stack data copied from the input script is +TRUE+,\nthe input script has succeeded in resolving the conditions imposed\nby the output script and, therefore, the input is a valid authorization\nto spend the UTXO. If any result other than +TRUE+ remains after\nexecution of the combined script, the input is invalid because it has\nfailed to satisfy the spending conditions placed on the output.\n\n//SOMEDAY:implications of not being able to use script in input script\n\n[[p2pkh]]\n==== Pay to Public Key Hash\n\n\nA (((\"P2PKH (pay to public key hash)\")))(((\"addresses\", \"P2PKH (pay to public key hash)\")))(((\"scripts\", \"P2PKH (pay to public key hash)\")))pay to public key hash (P2PKH) script uses an output script that\ncontains a hash that commits to a public key.  P2PKH is best known as\nthe basis for a legacy Bitcoin address. A P2PKH output can be spent by\npresenting a public key that matches the hash commitment and a digital\nsignature created by the corresponding private key (see\n<<c_signatures>>).  Let's look at an example of a P2PKH output script:\n\n----\nOP_DUP OP_HASH160 <Key Hash> OP_EQUALVERIFY OP_CHECKSIG\n----\n\n[role=\"less_space pagebreak-before\"]\nThe +Key Hash+ is the data that would be encoded into a legacy base58check\naddress.  Most applications would show the _public key hash_ in a script\nusing hexadecimal encoding and not the familiar Bitcoin\naddress base58check format that begins with [.keep-together]#a \"1.\"#\n\nThe preceding output script can be satisfied with an input script\nof the form:\n\n----\n<Signature> <Public Key>\n----\n\nThe two scripts together would form the following combined validation\nscript:\n\n----\n<Sig> <Pubkey> OP_DUP OP_HASH160 <Hash> OP_EQUALVERIFY OP_CHECKSIG\n----\n\nThe result will be +TRUE+ if the input script\nhas a valid signature from Bob's private key that corresponds to\nthe public key hash set as an encumbrance.\n\nFigures pass:[<a data-type=\"xref\" href=\"#P2PubKHash1\"\ndata-xrefstyle=\"select: labelnumber\">#P2PubKHash1</a>] and pass:[<a\ndata-type=\"xref\" href=\"#P2PubKHash2\" data-xrefstyle=\"select:\nlabelnumber\">#P2PubKHash2</a>] show (in two parts) a step-by-step\nexecution of the combined script, which will prove this is a valid\ntransaction.\n\n[[P2PubKHash1]]\n.Evaluating a script for a P2PKH transaction (part 1 of 2).\nimage::images/mbc3_0703.png[\"Tx_Script_P2PubKeyHash_1\"]\n\n[[P2PubKHash2]]\n.Evaluating a script for a P2PKH transaction (part 2 of 2).\nimage::images/mbc3_0704.png[\"Tx_Script_P2PubKeyHash_2\"]\n\n[[multisig]]\n=== Scripted Multisignatures\n\nMultisignature scripts(((\"scripted multisignatures\", id=\"script-multisignature\")))(((\"multisignature scripts\", id=\"multi-script\"))) set a condition where _k_ public keys\nare recorded in the script and at least _t_ of those must provide\nsignatures to spend the funds, called _t_-of-_k_.\nFor example, a 2-of-3 multisignature is one\nwhere three public keys are listed as potential signers and at least two\nof those must be used to create signatures for a valid transaction to\nspend the funds.\n\n[TIP]\n====\nSome Bitcoin documentation, including earlier editions of this book,\nuses the term \"m-of-n\" for a traditional multisignature.  However, it's hard\nto tell \"m\" and \"n\" apart when they're spoken, so we use the alternative\n_t_-of-_k_.  Both phrases refer to the same type of signature scheme.\n====\n\nThe general form of an output script setting a _t_-of-_k_ multisignature\ncondition is:\n\n----\nt <Public Key 1> <Public Key 2> ... <Public Key k> k OP_CHECKMULTISIG\n----\n\nwhere _k_ is the total number of listed public keys and _t_ is the threshold\nof required signatures to spend the output.\n\nAn output script setting a 2-of-3 multisignature condition looks like\nthis:\n\n----\n2 <Public Key A> <Public Key B> <Public Key C> 3 OP_CHECKMULTISIG\n----\n\nThe preceding output script can be satisfied with an input script\ncontaining [.keep-together]#signatures:#\n\n----\n<Signature B> <Signature C>\n----\n\nor any combination of two signatures from the private keys corresponding\nto the three listed public keys.\n\nThe two scripts together would form the combined validation script:\n\n----\n<Sig B> <Sig C> 2 <Pubkey A> <Pubkey B> <Pubkey C> 3 OP_CHECKMULTISIG\n----\n\nWhen executed, this combined script will evaluate to +TRUE+ if\nthe input script has\ntwo valid signatures from private keys that correspond to two of\nthe three public keys set as an encumbrance.\n\nAt this time, Bitcoin Core's transaction relay policy limits multisignature output scripts to, at most, three\nlisted public keys, meaning you can do anything from a 1-of-1 to a\n3-of-3 multisignature or any combination within that range.\nYou may want to check the +IsStandard()+ function to see what is currently\naccepted by the network. Note that the limit of three keys applies only to\nstandard (also known as \"bare\") multisignature scripts, not to\nscripts wrapped in another structure like P2SH, P2WSH, or P2TR.\nP2SH multisignature scripts are limited by both policy and consensus to\n15 keys, allowing for up to a 15-of-15 multisignature. We will learn about\nP2SH in <<p2sh>>.   All other scripts are consensus limited to 20 keys\nper +OP_CHECKMULTISIG+ or +OP_CHECKMULTISIGVERIFY+ opcode, although one\nscript may include multiple of those opcodes.\n\n[role=\"less_space pagebreak-before\"]\n[[multisig_bug]]\n==== An Oddity in CHECKMULTISIG Execution\n\nThere (((\"OP_CHECKMULTISIG execution\", id=\"op-checkmultisig\")))is an oddity in\n++OP_CHECKMULTISIG++'s execution that requires a slight workaround. When\n+OP_CHECKMULTISIG+ executes, it should consume _t_ + _k_ + 2 items on the stack as\nparameters. However, due to the oddity, +OP_CHECKMULTISIG+ will pop an extra\nvalue or one value more than expected.\n\nLet's look at this in greater detail using the previous validation\nexample:\n\n----\n<Sig B> <Sig C> 2 <Pubkey A> <Pubkey B> <Pubkey C> 3 OP_CHECKMULTISIG\n----\n\nFirst, +OP_CHECKMULTISIG+ pops the top item, which is _k_ (in this example\n\"3\"). Then it pops _k_ items, which are the public keys that can sign;\nin this example, public keys A, B, and C. Then, it pops one item, which\nis _t_, the quorum (how many signatures are needed). Here _t_ = 2. At this\npoint, +OP_CHECKMULTISIG+ should pop the final _t_ items, which are the\nsignatures, and see if they are valid. However, unfortunately, an oddity in\nthe implementation causes +OP_CHECKMULTISIG+ to pop one more item (_t_ + 1\ntotal) than it should. The extra item is called(((\"dummy stack element\"))) the _dummy stack\nelement_, and it is disregarded when checking the\nsignatures so it has no direct effect on +OP_CHECKMULTISIG+ itself.\nHowever, the dummy element must be present because, if it isn't present\nwhen +OP_CHECKMULTISIG+ attempts to pop on an empty stack, it will cause a\nstack error and script failure (marking the transaction as invalid).\nBecause the dummy element is disregarded, it can be anything. It became the custom early on to use +OP_0+, which later became a\nrelay policy rule and eventually a consensus rule (with the enforcement of BIP147).\n\nBecause popping the dummy element is part of the consensus rules, it must now be\nreplicated forever. Therefore a script should look\nlike this:\n\n----\nOP_0 <Sig B> <Sig C> 2 <Pubkey A> <Pubkey B> <Pubkey C> 3 OP_CHECKMULTISIG\n----\n\nThus the input script actually used in multisig is not:\n\n----\n<Signature B> <Signature C>\n----\n\nbut instead it is:\n\n----\nOP_0 <Sig B> <Sig C>\n----\n\nSome people believe this oddity was a bug in the original code for\nBitcoin, but a plausible alternative explanation exists.  Verifying\n_t_-of-_k_ signatures can require many more than _t_ or _k_ signature checking\noperations.  Let's consider a simple example of 1-in-5, with the\nfollowing combined script:\n\n----\n<dummy> <Sig4> 1 <key0> <key1> <key2> <key3> <key4> 5 OP_CHECKMULTISIG\n----\n\nThe signature is checked first against +key0+, then +key1+, and then\nthe other keys before it is finally compared to its corresponding\n+key4+.  That means five signature checking operations need to be\nperformed even though there's only one signature.  One way to eliminate\nthis redundancy would have been to provide +OP_CHECKMULTISIG+ a map\nindicating which provided signature corresponds to which public key,\nallowing the +OP_CHECKMULTISIG+ operation to only perform exactly _t_\nsignature-checking operations.  It's possible that Bitcoin's original\ndeveloper added the extra element (which we now call the dummy stack\nelement) in the original version of Bitcoin so they could add the\nfeature for allowing a map to be passed in a later soft fork.  However,\nthat feature was never implemented, and the BIP147 update to the\nconsensus rules in 2017 makes it impossible to add that feature in the\nfuture.\n\nOnly Bitcoin's original developer could tell us whether the dummy stack\nelement was the result of a bug or a plan for a future upgrade.  In this\nbook, we simply call it an oddity.\n\nFrom now on, if you see a multisig script, you should expect\nto see an extra +OP_0+ in the beginning, whose only purpose is as a\nworkaround to an oddity in the (((\"scripted multisignatures\", startref=\"script-multisignature\")))(((\"multisignature scripts\", startref=\"multi-script\")))(((\"OP_CHECKMULTISIG execution\", startref=\"op-checkmultisig\")))consensus rules.\n\n[[p2sh]]\n=== Pay to Script Hash\n\nPay to script hash (P2SH) was(((\"scripts\", \"P2SH (pay to script hash)\", id=\"script-p2sh\")))(((\"addresses\", \"P2SH (pay to script hash)\", id=\"address-p2sh-ch7\")))(((\"P2SH (pay to script hash)\", id=\"p2sh-ch7\")))\nintroduced in 2012 as a powerful new type of operation that greatly\nsimplifies the use of complex scripts. To explain the need\nfor P2SH, let's look at a practical example.\n\n\nMohammed is an electronics importer based in Dubai. Mohammed's\ncompany uses Bitcoin's multisignature feature extensively for its\ncorporate accounts. Multisignature scripts are one of the most common\nuses of Bitcoin's advanced scripting capabilities and are a very\npowerful feature. Mohammed's company\nuses a multisignature script for all customer payments.\nAny payments made by customers are locked in such\na way that they require at least two signatures to release.  Mohammed,\nhis three partners, and their attorney can each provide one signature.\nA multisignature scheme like that offers corporate governance\ncontrols and protects against theft, embezzlement, or loss.\n\nThe resulting script is quite long and looks like this:\n\n----\n2 <Mohammed's Public Key> <Partner1 Public Key> <Partner2 Public Key> \n<Partner3 Public Key> <Attorney Public Key> 5 OP_CHECKMULTISIG\n----\n\nAlthough multisignature scripts are a powerful feature, they are\ncumbersome to use. Given the preceding script, Mohammed would have to\ncommunicate this script to every customer prior to payment. Each\ncustomer would have to use special Bitcoin wallet software with the\nability to create custom transaction scripts.\nFurthermore, the resulting transaction would be about five times larger\nthan a simple payment transaction, because this script contains very\nlong public keys. The burden of that extra data would be\nborne by the customer in the form of extra transaction fees. Finally, a large transaction\nscript like this would be carried in the UTXO set in every full\nnode, until it was spent. All of these issues make using complex output scripts\ndifficult in practice.\n\nP2SH was developed to resolve these practical difficulties and to make\nthe use of complex scripts as easy as a payment to a single-key Bitcoin address.\nWith P2SH payments, the complex script is replaced with a\ncommitment, the digest of a cryptographic hash. When a transaction attempting\nto spend the UTXO is presented later, it must contain the script that\nmatches the commitment in addition to the data that satisfies the script. In simple terms,\nP2SH means \"pay to a script matching this hash, a script that will be\npresented later when this output is spent.\"\n\nIn P2SH\ntransactions, the script that is replaced by a hash is (((\"redeem scripts\")))referred\nto as the _redeem script_ because it is presented to the system at\nredemption time rather than as an output script. <<without_p2sh>> shows\nthe script without P2SH and <<with_p2sh>> shows the same script encoded\nwith P2SH.\n\n++++\n<table id=\"without_p2sh\">\n<caption>Complex script without P2SH</caption>\n<tbody>\n<tr>\n<td><p>Output script</p></td>\n<td><p>2 PubKey1 PubKey2 PubKey3 PubKey4 PubKey5 5 OP_CHECKMULTISIG</p></td>\n</tr>\n<tr>\n<td><p>Input script</p></td>\n<td><p>Sig1 Sig2</p></td>\n</tr>\n</tbody>\n</table>\n<table id=\"with_p2sh\">\n<caption>Complex script as P2SH</caption>\n<tbody>\n<tr>\n<td><p>Redeem script</p></td>\n<td><p>2 PubKey1 PubKey2 PubKey3 PubKey4 PubKey5 5 OP_CHECKMULTISIG</p></td>\n</tr>\n<tr>\n<td><p>Output script</p></td>\n<td><p>OP_HASH160 &lt;20-byte hash of redeem script&gt; OP_EQUAL</p></td>\n</tr>\n<tr>\n<td><p>Input script</p></td>\n<td><p>Sig1 Sig2 &lt;redeem script&gt;</p></td>\n</tr>\n</tbody>\n</table>\n++++\n\nAs you can see from the tables, with P2SH, the complex script that\ndetails the conditions for spending the output (redeem script) is not\npresented in the output script. Instead, only a hash of it is in the\noutput script, and the redeem script itself is presented later as part\nof the input script when the output is spent. This shifts the burden\nin fees and complexity from the spender to the receiver of the\ntransaction.\n\nLet's look at Mohammed's company, the complex multisignature script, and\nthe resulting P2SH scripts.\n\nFirst, the multisignature script that Mohammed's company uses for all\nincoming payments from customers:\n\n----\n2 <Mohammed's Public Key> <Partner1 Public Key> <Partner2 Public Key> \n<Partner3 Public Key> <Attorney Public Key> 5 OP_CHECKMULTISIG\n----\n\nThis entire script can instead be represented by a 20-byte cryptographic\nhash by first applying the SHA256 hashing algorithm and then applying\nthe RIPEMD-160 algorithm on the result.  For example, starting with the\nhash of Mohammed's redeem script:\n\n----\n54c557e07dde5bb6cb791c7a540e0a4796f5e97e\n----\n\nA P2SH transaction locks the output to this hash instead of the longer\nredeem script, using a special output script template:\n\n----\nOP_HASH160 54c557e07dde5bb6cb791c7a540e0a4796f5e97e OP_EQUAL\n----\n\nwhich, as you can see, is much shorter. Instead of \"pay to this 5-key\nmultisignature script,\" the P2SH equivalent transaction is \"pay to a\nscript with this hash.\" A customer making a payment to Mohammed's\ncompany need only include this much shorter output script in his\npayment. When Mohammed and his partners want to spend this UTXO, they\nmust present the original redeem script (the one whose hash locked the\nUTXO) and the signatures necessary to unlock it, like this:\n\n----\n<Sig1> <Sig2> <2 PK1 PK2 PK3 PK4 PK5 5 OP_CHECKMULTISIG>\n----\n\nThe two scripts are combined in two stages. First, the redeem script is\nchecked against the output script to make sure the hash matches:\n\n----\n<2 PK1 PK2 PK3 PK4 PK5 5 OP_CHECKMULTISIG> OP_HASH160 <script hash> OP_EQUAL\n----\n\nIf the redeem script hash matches, the redeem script is executed:\n\n----\n<Sig1> <Sig2> 2 <PK1> <PK2> <PK3> <PK4> <PK5> 5 OP_CHECKMULTISIG\n----\n\n==== P2SH Addresses\n\nAnother\nimportant part of the P2SH feature is the ability to encode a script\nhash as an address, as defined in BIP13. P2SH addresses are base58check\nencodings of the 20-byte hash of a script, just like Bitcoin addresses\nare base58check encodings of the 20-byte hash of a public key. P2SH\naddresses use the version prefix \"5,\" which results in\nbase58check-encoded addresses that start with a \"3.\"\n\nFor example, Mohammed's complex script, hashed and base58check-encoded\nas a P2SH address, becomes +39RF6JqABiHdYHkfChV6USGMe6Nsr66Gzw+.\n\nNow, Mohammed can give this \"address\" to his customers, and they can use\nalmost any Bitcoin wallet to make a simple payment, like any other\nBitcoin address. The 3 prefix gives them a hint that this is a special\ntype of address, one corresponding to a script instead of a public key,\nbut otherwise it works in exactly the same way as a payment to any other Bitcoin\naddress.\n\nP2SH addresses hide all of the complexity so the person making a\npayment does not see the script.\n\n==== Benefits of P2SH\n\nThe P2SH feature\noffers the following benefits compared to the direct use of complex\nscripts in outputs:\n\n- The similarity to original legacy addresses means the sender and the sender's\n  wallet don't need complex engineering to implement P2SH.\n\n- P2SH shifts the burden in data storage for the long script from the\n  output (which additionally to being stored on the blockchain is in the\n  UTXO set) to the input (only stored on the blockchain).\n\n- P2SH shifts the burden in data storage for the long script from the\n  present time (payment) to a future time (when it is spent).\n\n- P2SH shifts the transaction fee cost of a long script from the sender\n  to the recipient, who has to include the long redeem script to spend\n  it.\n\n==== Redeem Script and Validation\n\nYou are(((\"redeem scripts\", \"validating\")))(((\"validating\", \"redeem scripts\"))) not able to put a P2SH inside a P2SH redeem script because the\nP2SH specification is not recursive. Also, while it is technically\npossible to include +OP_RETURN+ (see <<op_return>>) in a redeem script, as\nnothing in the rules prevents you from doing so, it is of no practical\nuse because executing +OP_RETURN+ during validation will cause the\ntransaction to be marked invalid.\n\nNote that because the redeem script is not presented to the network\nuntil you attempt to spend a P2SH output, if you create an output with the\nhash of an invalid redeem script, you will not be able to spend\nit.  The spending transaction, which includes the redeem script,\nwill not be accepted because it is an invalid script. This creates a\nrisk because you can send bitcoin to a P2SH address that cannot be spent later.\n\n[WARNING]\n====\nP2SH output scripts\ncontain the hash of a redeem script, which gives no clues as to\nthe content of the redeem script. The P2SH output will be\nconsidered valid and accepted even if the redeem script is invalid. You\nmight accidentally receive bitcoin in such a way that it cannot later(((\"scripts\", \"P2SH (pay to script hash)\", startref=\"script-p2sh\")))(((\"P2SH (pay to script hash)\", startref=\"p2sh-ch7\")))(((\"addresses\", \"P2SH (pay to script hash)\", startref=\"address-p2sh-ch7\"))) be\nspent.\n====\n\n[[op_return]]\n=== Data Recording Output (OP_RETURN)\n\nBitcoin's\ndistributed (((\"scripts\", \"OP_RETURN\", id=\"script-op-return\")))(((\"OP_RETURN scripts\", id=\"op-return\")))(((\"nonpayment data\", id=\"nonpayment-data\")))(((\"blockchain\", \"nonpayment data in\", id=\"blockchain-nonpayment\")))(((\"output scripts\", \"OP_RETURN\", id=\"output-script-op-return\")))and timestamped blockchain has potential uses\nbeyond payments. Many developers have tried to use the transaction\nscripting language to take advantage of the security and resilience of\nthe system for applications such as digital notary services.\nEarly attempts to use Bitcoin's\nscript language for these purposes involved creating transaction outputs\nthat recorded data on the blockchain; for example, to record a commitment\nto a file in such a way that anyone could establish\nproof-of-existence of that file on a specific date by reference to that\ntransaction.\n\n[role=\"less_space pagebreak-before\"]\nThe use of Bitcoin's blockchain to store data\nunrelated to Bitcoin payments is a controversial subject. Many\npeople consider such use abusive and want to discourage it. Others\nview it as a demonstration of the powerful capabilities of blockchain\ntechnology and want to encourage such experimentation. Those who object\nto the inclusion of nonpayment data argue that it\nburdens those running full Bitcoin nodes with carrying the\ncost of disk storage for data that the blockchain was not intended to\ncarry. Moreover, such transactions may create UTXOs that cannot be spent,\nusing a legacy Bitcoin address as a freeform 20-byte field.\nBecause the address is used for data, it doesn't correspond to a private\nkey and the resulting UTXO can _never_ be spent; it's a fake payment.\nThese transactions that can never be spent are therefore never removed\nfrom the UTXO set and cause the size of the UTXO database to forever\nincrease, or \"bloat.\"\n\nA compromise was reached\nthat allows an output script starting with +OP_RETURN+ to\nadd nonpayment data to a transaction output. However, unlike\nthe use of \"fake\" UTXOs, the +OP_RETURN+ operator creates an explicitly\n_provably unspendable_ output, which does not need to be stored in the\nUTXO set. +OP_RETURN+ outputs are recorded on the blockchain, so they\nconsume disk space and contribute to the increase in the blockchain's\nsize, but they are not stored in the UTXO set and therefore do not bloat\nfull nodes with the cost of more\nexpensive database operations.\n\n+OP_RETURN+ scripts look like this:\n\n----\nOP_RETURN <data>\n----\n\nThe data portion\noften represents a hash, such as the output\nfrom the SHA256 algorithm (32 bytes). Some applications put a prefix in\nfront of the data to help identify the application. For example, the\nhttps://proofofexistence.com[Proof of Existence] digital notarization\nservice uses the 8-byte prefix +DOCPROOF+, which is ASCII encoded as +44\n4f 43 50 52 4f 4f 46+ in hexadecimal.\n\nKeep in mind that there is no input script that corresponds to\n+OP_RETURN+ that could possibly be used to \"spend\" an +OP_RETURN+ output. The\nwhole point of an +OP_RETURN+ output is that you can't spend the money locked in that\noutput, and therefore it does not need to be held in the UTXO set as\npotentially spendable: +OP_RETURN+ outputs are _provably unspendable_. +OP_RETURN+ outputs\nusually have a zero amount because any bitcoins\nassigned to such an output are effectively lost forever. If an +OP_RETURN+ output is\nreferenced as an input in a transaction, the script validation engine\nwill halt the execution of the validation script and mark the\ntransaction as invalid. The execution of +OP_RETURN+ essentially causes the\nscript to \"RETURN\" with a +FALSE+ and halt. Thus, if you accidentally\nreference an +OP_RETURN+ output as an input in a transaction, that\ntransaction(((\"scripts\", \"OP_RETURN\", startref=\"script-op-return\")))(((\"OP_RETURN scripts\", startref=\"op-return\")))(((\"nonpayment data\", startref=\"nonpayment-data\")))(((\"blockchain\", \"nonpayment data in\", startref=\"blockchain-nonpayment\")))(((\"output scripts\", \"OP_RETURN\", startref=\"output-script-op-return\"))) is invalid.\n\n[[lock_time_limitations]]\n==== Transaction Lock Time Limitations\n\nUse of the (((\"transactions\", \"timelocks\", \"limitations of\")))(((\"timelocks\", \"limitations of\")))(((\"lock time\", \"limitations of\")))(((\"scripts\", \"timelocks\", \"limitations of\")))lock time allows a spender to restrict a transaction from\nbeing included in a block until a specific block height, but it does not\nprevent spending the funds in another transaction earlier than that.\nLet's explain that with the following example.\n\nAlice signs a transaction spending one of her outputs to Bob's address and sets the transaction lock time to 3 months in the future. Alice sends that transaction to Bob to hold. With this transaction Alice and Bob know that:\n\n* Bob cannot transmit the transaction to redeem the funds until 3 months have elapsed.\n* Bob may transmit the transaction after 3 months.\n\nHowever:\n\n* Alice can create a conflicting transaction, spending the same inputs without a lock time. Thus, Alice can spend the same UTXO before the 3 months have elapsed.\n* Bob has no guarantee that Alice won't do that.\n\nIt is important to understand the limitations of transaction lock time. The only guarantee is that Bob will not be able to redeem the presigned transaction before 3 months have elapsed. There is no guarantee that Bob will get the funds. One way to guarantee that Bob will receive the funds but cannot spend them until 3 months have elapsed is to place the timelock restriction on the UTXO itself as part of the script, rather than on the transaction. This is achieved by the next form of timelock, called Check Lock Time Verify.\n\n==== Check Lock Time Verify (OP_CLTV)\n\nIn (((\"transactions\", \"timelocks\", \"verifying\", id=\"transaction-timelock-op-cltv\")))(((\"timelocks\", \"verifying\", id=\"timelock-op-cltv\")))(((\"lock time\", \"verifying\", id=\"lock-time-op-cltv\")))(((\"OP_CLTV  script operator\", id=\"op-cltv\")))(((\"verifying\", \"lock time\", id=\"verify-lock-time\")))(((\"scripts\", \"timelocks\", \"verifying\", id=\"script-timelock-verify\")))December 2015, a new form of\ntimelock was introduced to Bitcoin as a soft fork upgrade. Based on a\nspecification in BIP65, a new script operator called\n+OP_CHECKLOCKTIMEVERIFY+ (+OP_CLTV+) was added to the scripting language.\n+OP_CLTV+ is a per-output timelock rather than a per-transaction timelock,\nas is the case with lock time. This allows for additional\nflexibility in the way timelocks are applied.\n\nIn simple terms, by committing to the +OP_CLTV+ opcode in an\noutput, that output is restricted so that it can only be spent after the\nspecified time has elapsed.\n\n+OP_CLTV+ doesn't replace lock time, but rather restricts specific UTXOs\nsuch that they can only be spent in a future transaction with\nlock time set to a greater or equal value.\n\n[role=\"less_space pagebreak-before\"]\nThe +OP_CLTV+ opcode takes one parameter as input, expressed as a number in\nthe same format as lock time (either a block height or Unix epoch\ntime). As indicated by the +VERIFY+ suffix, +OP_CLTV+ is the type of opcode\nthat halts execution of the script if the outcome is +FALSE+. If it\nresults in +TRUE+, execution continues.\n\nIn order to use +OP_CLTV+, you insert it into the redeem script of the\noutput in the transaction that creates the output. For\nexample, if Alice is paying Bob, he might usually accept payment to \nthe following P2SH script:\n\n----\n<Bob's public key> OP_CHECKSIG\n----\n\nTo lock it to a time, say 3 months from now, his P2SH script would\ninstead be:\n\n----\n<Bob's pubkey> OP_CHECKSIGVERIFY <now + 3 months> OP_CHECKLOCKTIMEVERIFY\n----\n\nwhere +<now {plus} 3 months>+ is a block height or time value estimated\n3 months from the time the transaction is mined: current block height\n{plus} 12,960 (blocks) or current Unix epoch time {plus} 7,760,000\n(seconds).\n\nWhen Bob tries to spend this UTXO, he constructs a transaction that\nreferences the UTXO as an input. He uses his signature and public key in\nthe input script of that input and sets the transaction lock time\nto be equal or greater to the timelock in the +OP_CHECKLOCKTIMEVERIFY+\nAlice set. Bob then broadcasts the transaction on the Bitcoin network.\n\nBob's transaction is evaluated as follows. If the +OP_CHECKLOCKTIMEVERIFY+\nparameter Alice set is less than or equal to the spending transaction's\nlock time, script execution continues (acts as if a _no\noperation_ or +OP_NOP+ opcode was executed). Otherwise, script\nexecution halts and the transaction is deemed invalid.\n\nMore precisely, BIP65 explains that +OP_CHECKLOCKTIMEVERIFY+ fails and\nhalts execution if one of the following occurs:\n\n* The stack is empty.\n* The top item on the stack is less than 0.\n* The lock-time type (height versus timestamp) of the top stack item and the lock time field are not the same.\n* The top stack item is greater than the transaction's lock time field.\n* The sequence field of the input is 0xffffffff.\n\n[role=\"less_space pagebreak-before\"]\n[[timelock_conflicts]]\n.Timelock Conflicts\n****\n+OP_CLTV+ and (((\"transactions\", \"timelocks\", \"conflicts\")))(((\"timelocks\", \"conflicts\")))(((\"lock time\", \"conflicts\")))(((\"scripts\", \"timelocks\", \"conflicts\")))lock time use the same format to describe timelocks, either\na block height or the time elapsed in seconds since the Unix epoch.\nCritically, when used together, the format of lock time must match\nthat of +OP_CLTV+ in the outputs--they must both reference either\nblock height or time in seconds.\n\nThis implies that a script can never be valid if it must execute\ntwo different calls to +OP_CLTV+, one that uses a height and one that\nuses a time.  It can be easy to make this mistake when writing advanced\nscripts, so be sure to thoroughly test your scripts on a test network or\nuse a tool designed to prevent this issue, like a Miniscript compiler.\n\nAn additional implication is that only one variety of +OP_CLTV+ can be\nused in any of the scripts of a transaction.  If the script for one\ninput uses the height variety and a different script for a different\ninput uses the time variety, there is no way to construct a valid transaction\nthat spends both inputs.\n****\n\nAfter execution, if +OP_CLTV+ is satisfied, the parameter that\npreceded it remains as the top item on the stack and may need to be\ndropped, with +OP_DROP+, for correct execution of subsequent script\nopcodes. You will often see +OP_CHECKLOCKTIMEVERIFY+ followed by +OP_DROP+ in\nscripts for this reason.  +OP_CLTV+, like +OP_CSV+ (see <<op_csv>>)\nare unlike other +CHECKVERIFY+ opcodes in leaving items on the stack\nbecause the soft forks that added them redefined existing opcodes that\ndid not drop stack items, and the behavior of those previous\nno-operation (NOP) opcodes must be preserved.\n\nBy using lock time in conjunction with +OP_CLTV+, the scenario described in\n<<lock_time_limitations>> changes.  Alice sends her transaction\nimmediately, assigning the funds to Bob’s key. Alice can no longer spend\nthe money, but Bob cannot spend it before the 3-month lock time has\nexpired.\n\nBy introducing timelock functionality directly into the scripting\nlanguage, +OP_CLTV+ allows us to develop some very interesting complex\nscripts.\n\nThe standard(((\"transactions\", \"timelocks\", \"verifying\", startref=\"transaction-timelock-op-cltv\")))(((\"timelocks\", \"verifying\", startref=\"timelock-op-cltv\")))(((\"lock time\", \"verifying\", startref=\"lock-time-op-cltv\")))(((\"OP_CLTV  script operator\", startref=\"op-cltv\")))(((\"verifying\", \"lock time\", startref=\"verify-lock-time\")))(((\"scripts\", \"timelocks\", \"verifying\", startref=\"script-timelock-verify\"))) is defined in\nhttps://oreil.ly/YmJGD[BIP65\n(OP_CHECKLOCKTIMEVERIFY)].\n\n[[op_csv]]\n==== Relative Timelocks\n\nLock time(((\"absolute timelocks\")))(((\"transactions\", \"timelocks\", \"relative\", id=\"transaction-timelock-relative\")))(((\"timelocks\", \"relative\", id=\"timelock-relative\")))(((\"lock time\", \"relative\", id=\"locktime-relative\")))(((\"scripts\", \"timelocks\", \"relative\", id=\"script-timelock-relative\")))(((\"relative timelocks\", id=\"relative-timelock2\"))) and +OP_CLTV+ are both\n_absolute timelocks_ in that they specify an absolute point in time. The\nnext two timelock features we will examine are _relative timelocks_ in\nthat they specify, as a condition of spending an output, an elapsed time\nfrom the confirmation of the output in the blockchain.\n\n[role=\"less_space pagebreak-before\"]\nRelative timelocks are useful because they allow\nimposing a time\nconstraint on one transaction that is dependent on the elapsed time from\nthe confirmation of a previous transaction. In other words, the clock\ndoesn't start counting until the UTXO is recorded on the blockchain.\nThis functionality is especially useful in bidirectional state channels\nand Lightning Networks (LNs), as we will see in <<state_channels>>.\n\nRelative timelocks, like absolute timelocks, are implemented with both a\ntransaction-level feature and a script-level opcode. The\ntransaction-level relative timelock is implemented as a consensus rule\non the value of +sequence+, a transaction field that is set in every\ntransaction input. Script-level relative timelocks are implemented with\nthe +OP_CHECKSEQUENCEVERIFY+ (+OP_CSV+) opcode.\n\nRelative timelocks are\nimplemented according to the specifications in\nhttps://oreil.ly/ZuANb[BIP68,\nRelative Lock-Time Using Consensus-Enforced Sequence Numbers] and\nhttps://oreil.ly/dLA2r[BIP112,\nOP_CHECKSEQUENCEVERIFY].\n\nBIP68 and BIP112 were activated in May 2016 as a soft fork upgrade to\nthe consensus rules.\n\n==== Relative Timelocks with OP_CSV\n\nJust (((\"OP_CSV script opcode\", id=\"op-csv\")))like +OP_CLTV+\nand lock time, there is a script opcode for relative timelocks that\nleverages the sequence value in scripts. That opcode is\n+OP_CHECKSEQUENCEVERIFY+, commonly referred to as +OP_CSV+ for short.\n\nThe +OP_CSV+ opcode when evaluated in a UTXO's script allows\nspending only in a transaction whose input sequence value is greater\nthan or equal to the +OP_CSV+ parameter. Essentially, this restricts\nspending the UTXO until a certain number of blocks or seconds have\nelapsed relative to the time the UTXO was mined.\n\nAs with CLTV, the value in +OP_CSV+ must match the format in the\ncorresponding sequence value. If +OP_CSV+ is specified in terms of\nblocks, then so must sequence. If +OP_CSV+ is specified in terms of\nseconds, then so must sequence.\n\n[WARNING]\n====\nA script executing multiple +OP_CSV+ opcodes must only use the same\nvariety, either time-based or height-based.  Mixing varieties will\nproduce an invalid script that can never be spent, the same problem we\nsaw with +OP_CLTV+ in <<timelock_conflicts>>.  However, +OP_CSV+ allows\nany two valid inputs to be included in the same transaction, so the problem\nof interaction across inputs that occurs with +OP_CLTV+ doesn't affect +OP_CSV+.\n====\n\n[role=\"less_space pagebreak-before\"]\nRelative timelocks with +OP_CSV+ are especially useful when several\n(chained) transactions are created and signed but not propagated--that\nis, they're kept off the blockchain (_offchain_). A child transaction cannot be used until the\nparent transaction has been propagated, mined, and aged by the time\nspecified in the relative timelock. One application of this use case is shown in <<state_channels>> and <<lightning_network>>.\n\n+OP_CSV+ is defined(((\"transactions\", \"timelocks\", \"relative\", startref=\"transaction-timelock-relative\")))(((\"timelocks\", \"relative\", startref=\"timelock-relative\")))(((\"lock time\", \"relative\", startref=\"locktime-relative\")))(((\"scripts\", \"timelocks\", \"relative\", startref=\"script-timelock-relative\")))(((\"OP_CSV script opcode\", startref=\"op-csv\")))(((\"relative timelocks\", startref=\"relative-timelock2\"))) in detail in\nhttps://oreil.ly/z_Obw[BIP112,\nCHECKSEQUENCEVERIFY].\n\n=== Scripts with Flow Control (Conditional Clauses)\n\nOne of(((\"scripts\", \"flow control\", id=\"script-flow\")))(((\"flow control in scripts\", id=\"flow-control-script\")))(((\"conditional clauses in scripts\", id=\"conditional-clause-script\"))) the more\npowerful features of Bitcoin Script is flow control, also known as\nconditional clauses. You are probably familiar with flow control in\nvarious programming languages that use the construct +IF...THEN...ELSE+.\nBitcoin conditional clauses look a bit different but are essentially\nthe same construct.\n\nAt a basic level, Bitcoin conditional opcodes allow us to construct a\nscript that has two ways of being unlocked, depending on a\n+TRUE+/+FALSE+ outcome of evaluating a logical condition. For example,\nif x is +TRUE+, the executed code path is A and the +ELSE+ code path is B.\n\nAdditionally, Bitcoin conditional expressions can be \"nested\"\nindefinitely, meaning that a conditional clause can contain another\nwithin it, which contains another, etc. Bitcoin Script flow control can\nbe used to construct very complex scripts with hundreds\nof possible execution paths. There is no limit to nesting, but\nconsensus rules impose a limit on the maximum size of a\nscript in bytes.\n\nBitcoin implements flow control using the +OP_IF+, +OP_ELSE+, +OP_ENDIF+, and\n+OP_NOTIF+ opcodes. Additionally, conditional expressions can contain\nboolean operators such as +OP_BOOLAND+, +OP_BOOLOR+, and +OP_NOT+.\n\nAt first glance, you may find the Bitcoin's flow control scripts\nconfusing. That is because Bitcoin Script is a stack language. The same\nway that +1 {plus} 1+ looks \"backward\" when expressed as +1 1 OP_ADD+, flow\ncontrol clauses in Bitcoin also look \"backward.\"\n\nIn most traditional (procedural) programming languages, flow control\nlooks like this:\n\n.Pseudocode of flow control in most programming languages\n----\nif (condition):\n  code to run when condition is true\nelse:\n  code to run when condition is false\nendif\ncode to run in either case\n----\n\nIn a stack-based language like Bitcoin Script, the logical condition\ncomes before the +IF+, which makes it look \"backward\":\n\n[role=\"less_space pagebreak-before\"]\n.Bitcoin Script flow control\n----\ncondition\nIF\n  code to run when condition is true\nOP_ELSE\n  code to run when condition is false\nOP_ENDIF\ncode to run in either case\n----\n\nWhen reading Bitcoin Script, remember that the condition being evaluated\ncomes _before_ the +IF+ opcode.\n\n==== Conditional Clauses with VERIFY Opcodes\n\nAnother\nform of (((\"VERIFY opcodes\")))(((\"guard clauses in scripts\")))conditional in Bitcoin Script is any opcode that ends in\n+VERIFY+. The +VERIFY+ suffix means that if the condition evaluated is\nnot +TRUE+, execution of the script terminates immediately and the\ntransaction is deemed invalid.\n\nUnlike an +IF+ clause, which offers alternative\nexecution paths, the +VERIFY+ suffix acts as a _guard clause_,\ncontinuing only if a precondition is met.\n\nFor example, the following script requires Bob's signature and a\npreimage (secret) that produces a specific hash. Both conditions must\nbe satisfied to unlock:\n\n.A script with an +OP_EQUALVERIFY+  guard clause.\n----\nOP_HASH160 <expected hash> OP_EQUALVERIFY <Bob's Pubkey> OP_CHECKSIG\n----\n\nTo spend this, Bob must present a\nvalid preimage and a signature:\n\n.Satisfying the above script\n----\n<Bob's Sig> <hash pre-image>\n----\n\nWithout presenting the preimage, Bob can't get to the part of the\nscript that checks for his signature.\n\n\nThis script can be written with an +OP_IF+ instead:\n\n.A script with an +IF+ guard clause\n----\nOP_HASH160 <expected hash> OP_EQUAL\nOP_IF\n   <Bob's Pubkey> OP_CHECKSIG\nOP_ENDIF\n----\n\nBob's authentication data is identical:\n\n.Satisfying the above script\n----\n<Bob's Sig> <hash pre-image>\n----\n\nThe script with +OP_IF+ does the same thing as using an opcode with a\n+VERIFY+ suffix; they both operate as guard clauses. However, the\n+VERIFY+ construction is more efficient, using two fewer opcodes.\n\nSo, when do we use +VERIFY+ and when do we use +OP_IF+? If all we are\ntrying to do is to attach a precondition (guard clause), then +VERIFY+\nis better. If, however, we want to have more than one execution path\n(flow control), then we need an +OP_IF...OP_ELSE+ flow control clause.\n\n==== Using Flow Control in Scripts\n\nA very common use for flow control in Bitcoin Script is to construct a\nscript that offers multiple execution paths, each a different way\nof redeeming the UTXO.\n\nLet's look at a simple example where\nwe have two signers, Alice and Bob, and either one is able to redeem.\nWith multisig, this would be expressed as a 1-of-2 multisig script. For\nthe sake of demonstration, we will do the same thing with an +OP_IF+\nclause:\n\n----\nOP_IF\n <Alice's Pubkey>\nOP_ELSE\n <Bob's Pubkey>\nOP_ENDIF\nOP_CHECKSIG\n----\n\nLooking at this redeem script, you may be wondering: \"Where is the\ncondition? There is nothing preceding the +IF+ clause!\"\n\nThe condition is not part of the script. Instead, the condition\nwill be offered at spending time, allowing Alice and Bob to\n\"choose\" which execution path they want:\n\n.Alice satisfies the above script:\n----\n<Alice's Sig> OP_TRUE\n----\n\nThe +OP_TRUE+ at the end serves as the condition (+TRUE+) that will make\nthe +OP_IF+ clause execute the fist redemption path.  This conditions\nputs the public key on the stack for which Alice has a signature.\nThe +OP_TRUE+ opcode, also known as +OP_1+, will put the\nnumber 1 on the stack.\n\nFor Bob to redeem this, he would have to choose the second execution\npath in +OP_IF+ by giving a +FALSE+ value.  The +OP_FALSE+ opcode, also\nknown as +OP_0+, pushes an empty byte array to the stack:\n\n----\n<Bob's Sig> OP_FALSE\n----\n\nBob's input script causes the +OP_IF+ clause\nto execute the second (+OP_ELSE+) script, which requires Bob's signature.\n\nSince +OP_IF+ clauses can be nested, we can create a \"maze\" of execution\npaths. The input script can provide a \"map\" selecting which\nexecution path is actually executed:\n\n----\nOP_IF\n  subscript A\nOP_ELSE\n  OP_IF\n    subscript B\n  OP_ELSE\n    subscript C\n  OP_ENDIF\nOP_ENDIF\n----\n\nIn this scenario, there are three execution paths (+subscript A+, +subscript\nB+, and +subscript C+). The input script provides a path in the form of\na sequence of +TRUE+ or +FALSE+ values. To select path +subscript B+, for\nexample, the input script must end in +OP_1 OP_0+ (+TRUE+, +FALSE+). These\nvalues will be pushed onto the stack so that the second value (+FALSE+)\nends up at the top of the stack. The outer +OP_IF+ clause pops the +FALSE+\nvalue and executes the first +OP_ELSE+ clause. Then the +TRUE+ value moves\nto the top of the stack and is evaluated by the inner (nested) +OP_IF+,\nselecting the +B+ execution path.\n\nUsing this construct, we can build redeem scripts with tens or hundreds\nof execution paths, each offering a different way to redeem the UTXO. To\nspend, we construct an input script that navigates the execution\npath by putting the appropriate +TRUE+ and +FALSE+ values on the stack\nat each flow control(((\"scripts\", \"flow control\", startref=\"script-flow\")))(((\"flow control in scripts\", startref=\"flow-control-script\")))(((\"conditional clauses in scripts\", startref=\"conditional-clause-script\"))) point.\n\n=== Complex Script Example\n\nIn this(((\"scripts\", \"examples of\", id=\"script-example-complex\"))) section we combine many of\nthe concepts from this chapter into a single example.\n\nMohammed, a company owner in Dubai, operates an import/export\nbusiness; he\nwishes to construct a company capital account with flexible rules. The\nscheme he creates requires different levels of authorization depending\non timelocks. The participants in the multisig scheme are Mohammed, his\ntwo partners Saeed and Zaira, and their company lawyer. The three\npartners make decisions based on a majority rule, so two of the three\nmust agree. However, in the case of a problem with their keys, they want\ntheir lawyer to be able to recover the funds with one of the three\npartner signatures. Finally, if all partners are unavailable or\nincapacitated for a while, they want the lawyer to be able to manage the\naccount directly after he gains access to the capital account's\ntransaction records.\n\n<<variable_timelock_multisig>> is the redeem script that Mohammed designs to achieve this (line\nnumbers have been prefixed).\n\n[[variable_timelock_multisig]]\n.Variable multi-signature with timelock\n====\n----\n01  OP_IF\n02    OP_IF\n03      2\n04    OP_ELSE\n05      <30 days> OP_CHECKSEQUENCEVERIFY OP_DROP\n06      <Lawyer's Pubkey> OP_CHECKSIGVERIFY\n07      1\n08    OP_ENDIF\n09    <Mohammed's Pubkey> <Saeed's Pubkey> <Zaira's Pubkey> 3 OP_CHECKMULTISIG\n10  OP_ELSE\n11    <90 days> OP_CHECKSEQUENCEVERIFY OP_DROP\n12    <Lawyer's Pubkey> OP_CHECKSIG\n13  OP_ENDIF\n----\n====\n\nMohammed's script implements three execution paths using nested\n+OP_IF...OP_ELSE+ flow control clauses.\n\nIn the first execution path, this script operates as a simple 2-of-3\nmultisig with the three partners. This execution path consists of lines\n3 and 9. Line 3 sets the quorum of the multisig to +2+ (2-of-3). This\nexecution path can be selected by putting +OP_TRUE OP_TRUE+ at the end of the\ninput script:\n\n.Spending data for the first execution path (2-of-3 multisig)\n----\nOP_0 <Mohammed's Sig> <Zaira's Sig> OP_TRUE OP_TRUE\n----\n\n\n[TIP]\n====\nThe +OP_0+ at the beginning of this input script is because of an oddity in\n+OP_CHECKMULTISIG+ that pops an extra value from the stack. The extra value\nis disregarded by the +OP_CHECKMULTISIG+, but it must be present or the\nscript fails. Pushing an empty byte array with +OP_0+ is a workaround to the oddity, as\ndescribed in <<multisig_bug>>.\n====\n\nThe second execution path can only be used after 30 days have elapsed\nfrom the creation of the UTXO. At that time, it requires the signature\nof the lawyer and one of the three partners (a 1-of-3 multisig).\nThis is achieved by line 7, which sets the quorum for the multisig to\n+1+. To select this execution path, the input script would end in\n+OP_FALSE OP_TRUE+:\n\n.Spending data for the second execution path (Lawyer + 1-of-3)\n----\nOP_0 <Saeed's Sig> <Lawer's Sig> OP_FALSE OP_TRUE\n----\n\n[TIP]\n====\nWhy +OP_FALSE OP_TRUE+? Isn't that backward? +FALSE+ is pushed onto the\nstack, and +TRUE+ is pushed on top of it.\n+TRUE+ is therefore popped _first_ by the first +OP_IF+ opcode.\n====\n\nFinally, the third execution path allows the lawyer to spend the\nfunds alone, but only after 90 days. To select this execution path, the\ninput script has to end in +OP_FALSE+:\n\n.Input script for the third execution path (Lawyer only)\n----\n<Lawyer's Sig> OP_FALSE\n----\n\nTry running the script on paper to see how it behaves on the stack.\n\n==== Segregated Witness Output and Transaction Examples\n\nLet’s look at (((\"scripts\", \"segregated witness\", id=\"script-segwit\")))(((\"segregated witness (segwit)\", \"scripts and\", id=\"segwit-script\")))some of our example transactions and see how they would\nchange with segregated witness. We’ll first look at how a\n P2PKH payment can be accomplished as the\nsegregated witness program. Then, we’ll look at the segregated witness\nequivalent for P2SH scripts. Finally, we’ll look at\nhow both of the preceding segregated witness programs can be embedded\ninside a P2SH script.\n\n[[p2wpkh]]\n===== Pay to witness public key hash (P2WPKH)\n\nLet's start (((\"scripts\", \"segregated witness\", \"P2WPKH\", id=\"script-segwit-p2wpkh\")))(((\"segregated witness (segwit)\", \"scripts and\", \"P2WPKH\", id=\"segwit-script-p2wpkh\")))(((\"P2WPKH (pay to witness public key hash)\", id=\"p2wpkh-ch7\")))(((\"output scripts\", \"P2WPKH (pay to witness public key hash)\", id=\"output-script-p2wpkh\")))(((\"addresses\", \"P2WPKH (pay to witness public key hash)\", id=\"address-p2wpkh\")))by looking at the example of a P2PKH\noutput script:\n\n.Example P2PKH output script\n----\nOP_DUP OP_HASH160 ab68025513c3dbd2f7b92a94e0581f5d50f654e7 \nOP_EQUALVERIFY OP_CHECKSIG\n----\n\nWith segregated witness, Alice would create a\nP2WPKH script.  If that script commits\nto the same public key, it would look like this:\n\n.Example P2WPKH output script\n----\n0 ab68025513c3dbd2f7b92a94e0581f5d50f654e7\n----\n\nAs you can see, a P2WPKH output script is much\nsimpler than the P2PKH equivalent. It consists of two values that are\npushed onto the script evaluation stack. To an old (nonsegwit-aware)\nBitcoin client, the two pushes would look like an output that anyone can\nspend. To a newer, segwit-aware client, the first number (0)\nis interpreted as a version number (the _witness version_) and the\nsecond part (20 bytes) is a\n_witness program_. The 20-byte witness program is simply the hash of the\npublic key, as in a P2PKH script.\n\nNow, let’s look at the corresponding transaction that Bob uses to spend\nthis output. For the original script, the spending transaction\nwould have to include a signature within the transaction input:\n\n.Decoded transaction showing a P2PKH output being spent with a signature\n----\n[...]\n\"vin\" : [\n  \"txid\": \"abcdef12345...\",\n  \"vout\": 0,\n  \"scriptSig\": “<Bob’s scriptSig>”,\n]\n[...]\n----\n\nHowever, to spend the P2WPKH output, the transaction has no\nsignature on that input. Instead, Bob’s transaction has an empty\ninput script and includes a witness structure:\n\n.Decoded transaction showing a P2WPKH output being spent with a witness structure\n----\n[...]\n\"vin\" : [\n  \"txid\": \"abcdef12345...\",\n  \"vout\": 0,\n  \"scriptSig\": “”,\n]\n[...]\n“witness”: “<Bob’s witness structure>”\n[...]\n----\n\n===== Wallet construction of P2WPKH\n\nIt is extremely(((\"wallets\", \"P2WPKH (pay to witness public key hash)\"))) important to note that P2WPKH witness programs should only be created by\nthe receiver and not converted by the spender from a known\npublic key, P2PKH script, or address. The spender has no way of knowing\nif the receiver's wallet has the ability to construct segwit\ntransactions and spend P2WPKH outputs.\n\nAdditionally, P2WPKH outputs must be constructed from the hash of a\n_compressed_ public key. Uncompressed public keys are nonstandard in\nsegwit and may be explicitly disabled by a future soft fork. If the hash\nused in the P2WPKH came from an uncompressed public key, it may be\nunspendable and you may lose funds. P2WPKH outputs should be created by\nthe payee's wallet by deriving a compressed public key from their\nprivate key.\n\n[WARNING]\n====\nP2WPKH should be constructed by the receiver by converting a compressed\npublic key to a P2WPKH hash. Neither the spender nor anyone else should\never transform a P2PKH script, Bitcoin address, or uncompressed public\nkey to a P2WPKH witness script.  In general, a spender should only send\nto the receiver in the manner that the receiver indicated.\n====\n\n[[p2wsh]]\n===== Pay to witness script hash (P2WSH)\n\nThe (((\"scripts\", \"segregated witness\", \"P2WSH\", id=\"script-segwit-p2wsh\")))(((\"segregated witness (segwit)\", \"scripts and\", \"P2WSH\", id=\"segwit-script-p2wsh\")))(((\"P2WSH (pay to witness script hash)\", id=\"p2wsh-ch7\")))(((\"output scripts\", \"P2WSH (pay to witness script hash)\", id=\"output-script-p2wsh\")))(((\"addresses\", \"P2WSH (pay to witness script hash)\", id=\"address-p2wsh\")))second type of\nsegwit v0 witness program corresponds to a P2SH script. We\nsaw this type of script in <<p2sh>>. In that example, P2SH was used by\nMohammed's company to express a multisignature script. Payments to\nMohammed's company were encoded with a script like this:\n\n.Example P2SH output script\n----\nOP_HASH160 54c557e07dde5bb6cb791c7a540e0a4796f5e97e OP_EQUAL\n----\n\nThis P2SH script references the hash of a _redeem script_ that defines a\n2-of-3 multisignature requirement to spend funds. To spend this output,\nMohammed's company would present the redeem script (whose hash matches\nthe script hash in the P2SH output) and the signatures necessary to\nsatisfy that redeem script, all inside the transaction input:\n\n.Decoded transaction showing a P2SH output being spent\n----\n[...]\n\"vin\" : [\n  \"txid\": \"abcdef12345...\",\n  \"vout\": 0,\n  \"scriptSig\": “<SigA> <SigB> <2 PubA PubB PubC PubD PubE 5 OP_CHECKMULTISIG>”,\n]\n----\n\nNow, let's look at how this entire example would be upgraded to segwit v0.\nIf Mohammed's customers were using a segwit-compatible wallet, they\nwould make a payment, creating a P2WSH output that would look like this:\n\n.Example P2WSH output script\n----\n0 a9b7b38d972cabc7961dbfbcb841ad4508d133c47ba87457b4a0e8aae86dbb89\n----\n\nAgain, as with the example of P2WPKH, you can see that the segregated\nwitness equivalent script is a lot simpler and reduces the template\noverhead that you see in P2SH scripts. Instead, the segregated witness\noutput script consists of two values pushed to the stack: a witness version\n(0) and the 32-byte SHA256 hash of the witness script (the witness\nprogram).\n\n[TIP]\n====\nWhile P2SH uses the 20-byte +RIPEMD160(SHA256(script))+ hash, the P2WSH\nwitness program uses a 32-byte +SHA256(script)+ hash. This difference in\nthe selection of the hashing algorithm is deliberate\nto provide stronger security to\nP2WSH in certain use cases (128 bits of security in P2WSH versus 80 bits\nof security in P2SH).  For details, see <<p2sh_collision_attacks>>.\n====\n\nMohammed's company can spend the P2WSH output by presenting the\ncorrect witness script and sufficient signatures to satisfy it. The\nwitness script and the signatures would be\nincluded as part of the witness structure. No data would be placed in the\ninput script because this is a native witness program, which does not use\nthe legacy input script field:\n\n.Decoded transaction showing a P2WSH output being spent with witness structure\n----\n[...]\n\"vin\" : [\n  \"txid\": \"abcdef12345...\",\n  \"vout\": 0,\n  \"scriptSig\": “”,\n]\n[...]\n“witness”: “<SigA> <SigB> <2 PubA PubB PubC PubD PubE 5 OP_CHECKMULTISIG>”\n[...]\n----\n\n===== Differentiating between P2WPKH and P2WSH\n\nIn the(((\"scripts\", \"segregated witness\", \"P2WPKH\", startref=\"script-segwit-p2wpkh\")))(((\"segregated witness (segwit)\", \"scripts and\", \"P2WPKH\", startref=\"segwit-script-p2wpkh\")))(((\"P2WPKH (pay to witness public key hash)\", startref=\"p2wpkh-ch7\")))(((\"output scripts\", \"P2WPKH (pay to witness public key hash)\", startref=\"output-script-p2wpkh\")))(((\"addresses\", \"P2WPKH (pay to witness public key hash)\", startref=\"address-p2wpkh\"))) previous two sections, we demonstrated two types of witness\nprograms: <<p2wpkh>> and <<p2wsh>>. Both types of witness programs\nconsist of the same version number followed by a data push. They\nlook very similar, but are interpreted very differently: one is\ninterpreted as a public key hash, which is satisfied by a signature and\nthe other as a script hash, which is satisfied by a witness script. The\ncritical difference between them is the length of the witness program:\n\n- The witness program in P2WPKH is 20 bytes.\n- The witness program in P2WSH is 32 bytes.\n\nThis is the one difference that allows a full node to differentiate between\nthe two types of witness programs. By looking at the length of the hash,\na node can determine what type of witness program it is, P2WPKH (((\"P2WSH (pay to witness script hash)\", startref=\"p2wsh-ch7\")))(((\"output scripts\", \"P2WSH (pay to witness script hash)\", startref=\"output-script-p2wsh\")))(((\"addresses\", \"P2WSH (pay to witness script hash)\", startref=\"address-p2wsh\")))(((\"scripts\", \"segregated witness\", \"P2WSH\", startref=\"script-segwit-p2wsh\")))(((\"segregated witness (segwit)\", \"scripts and\", \"P2WSH\", startref=\"segwit-script-p2wsh\")))or\nP2WSH.\n\n==== Upgrading to Segregated Witness\n\nAs we (((\"scripts\", \"segregated witness\", \"upgrading to\", id=\"script-segwit-upgrade\")))(((\"segregated witness (segwit)\", \"scripts and\", \"upgrading to\", id=\"segwit-script-upgrade\")))(((\"upgrading to segregated witness\", id=\"upgrade-segwit\")))can see from the previous examples, upgrading to segregated\nwitness is a two-step process. First, wallets must create segwit\ntype outputs. Then, these outputs can be spent by wallets that know how\nto construct segregated witness transactions. In the examples, Alice's\nwallet is able to create outputs paying\nsegregated witness output scripts. Bob's wallet is also segwit-aware and able\nto spend those outputs.\n\nSegregated witness was implemented as a\nbackward-compatible upgrade, where _old and new clients can coexist_.\nWallet developers independently upgraded wallet software to add\nsegwit capabilities.\nLegacy P2PKH and\nP2SH continue to work for [.keep-together]#nonupgraded# wallets. That leaves two\nimportant scenarios, which are addressed in the next section:\n\n- Ability of a spender's wallet that is not segwit-aware to make a\n  payment to a recipient's wallet that can process segwit transactions.\n\n- Ability of a spender's wallet that is segwit-aware to recognize and\n  distinguish between recipients that are segwit-aware and ones that are\n  not, by their _addresses_.\n\n===== Embedding segregated witness inside P2SH\n\nLet's assume,(((\"embedded segregated witness\")))(((\"P2SH (pay to script hash)\", \"embedded segregated witness\"))) for example, that Alice's wallet is not upgraded to\nsegwit, but Bob's wallet is upgraded and can handle segwit transactions.\nAlice and Bob can use legacy non-segwit outputs. But Bob would\nlikely want to use segwit to reduce transaction fees, taking advantage\nof the reduced cost of witness structure.\n\nIn this case, Bob's wallet can construct a P2SH address that contains a\nsegwit script inside it. Alice's wallet can make payments to it without\nany knowledge of segwit.\nBob's wallet can then spend this payment with a segwit transaction,\ntaking advantage of segwit and reducing transaction fees.\n\nBoth forms of witness scripts, P2WPKH and P2WSH, can be embedded in a\nP2SH address. The first is noted as nested P2WPKH, and the second is noted\nas nested P2WSH.\n\n===== Nested pay to witness public key hash\n\nThe first(((\"P2WPKH (pay to witness public key hash)\", \"nesting\", id=\"p2wpkh-nest\")))(((\"nesting\", \"P2WPKH (pay to witness public key hash)\", id=\"nest-p2wpkh-ch7\")))(((\"addresses\", \"P2WPKH (pay to witness public key hash)\", \"nesting\", id=\"address-p2wpkh-nest\"))) form of output script we will examine is nested P2WPKH. This\nis a pay to witness public key hash witness program, embedded inside a\npay to script hash script, so that a wallet that is\nnot aware of segwit can pay the output script.\n\nBob's wallet constructs a P2WPKH witness program with Bob's public key.\nThis witness program is then hashed and the resulting hash is encoded as\na P2SH script. The P2SH script is converted to a Bitcoin address, one\nthat starts with a \"3,\" as we saw in <<p2sh>>.\n\nBob's wallet starts with the P2WPKH witness version and witness program we saw earlier:\n\n.Bob's P2WPKH witness version and witness program\n----\n0 ab68025513c3dbd2f7b92a94e0581f5d50f654e7\n----\n\nThe data consists of the witness version and Bob's\n20-byte public key hash.\n\nBob's wallet then hashes the data, first with\nSHA256, then with RIPEMD-160, producing another 20-byte hash.\nNext, the redeem script hash is converted to a Bitcoin address.\nFinally, Alice's wallet can make a payment to\n+37Lx99uaGn5avKBxiW26HjedQE3LrDCZru+, just as it would to any other\nBitcoin address.\n\nTo pay Bob, Alice's wallet would lock the output with a P2SH script:\n----\nOP_HASH160 3e0547268b3b19288b3adef9719ec8659f4b2b0b OP_EQUAL\n----\n\nEven though Alice's wallet has no support for segwit, the payment it\ncreates can be spent by Bob with a segwit (((\"P2WPKH (pay to witness public key hash)\", \"nesting\", startref=\"p2wpkh-nest\")))(((\"nesting\", \"P2WPKH (pay to witness public key hash)\", startref=\"nest-p2wpkh-ch7\")))(((\"addresses\", \"P2WPKH (pay to witness public key hash)\", \"nesting\", startref=\"address-p2wpkh-nest\")))transaction.\n\n===== Nested pay to witness script hash\n\nSimilarly, (((\"P2WSH (pay to witness script hash)\", \"nesting\", id=\"p2wsh-nest\")))(((\"nesting\", \"P2WSH (pay to witness script hash)\", id=\"nest-p2wsh-ch7\")))(((\"addresses\", \"P2WSH (pay to witness script hash)\", \"nesting\", id=\"address-p2wsh-nest\")))a P2WSH witness program for a multisig script or other\ncomplicated script can be embedded inside a P2SH script and address,\nmaking it possible for any wallet to make payments that are segwit\ncompatible.\n\nAs we saw in <<p2wsh>>, Mohammed's company is using segregated witness payments to\nmultisignature scripts. To make it possible for any client to pay his\ncompany, regardless of whether their wallets are upgraded for segwit,\nMohammed's wallet can embed the P2WSH witness program inside a P2SH\nscript.\n\nFirst, Mohammed's wallet hashes the witness script with SHA256 (just\nonce), producing the hash:\n\n----\n9592d601848d04b172905e0ddb0adde59f1590f1e553ffc81ddc4b0ed927dd73\n----\n\nNext, the hashed witness script is turned into a version-prefixed P2WSH witness program:\n\n----\n0 9592d601848d04b172905e0ddb0adde59f1590f1e553ffc81ddc4b0ed927dd73\n----\n\nThen, the witness program itself is hashed with SHA256 and RIPEMD-160,\nproducing a new 20-byte hash:\n\n----\n86762607e8fe87c0c37740cddee880988b9455b2\n----\n\nNext, the wallet constructs a P2SH Bitcoin address from this hash:\n\n.P2SH Bitcoin address\n----\n3Dwz1MXhM6EfFoJChHCxh1jWHb8GQqRenG\n----\n\nNow, Mohammed's clients can make payments to this address even if they\ndon't support segwit. To send a payment to Mohammed, a wallet would\nlock the output with the following P2SH script:\n\n.P2SH script used to lock payments to Mohammed's multisig\n----\nOP_HASH160 86762607e8fe87c0c37740cddee880988b9455b2 OP_EQUAL\n----\n\nMohammed's company can then construct segwit transactions to spend these\npayments, taking advantage of segwit features including (((\"scripts\", \"examples of\", startref=\"script-example-complex\")))(((\"scripts\", \"segregated witness\", startref=\"script-segwit\")))(((\"segregated witness (segwit)\", \"scripts and\", startref=\"segwit-script\")))(((\"scripts\", \"segregated witness\", \"upgrading to\", startref=\"script-segwit-upgrade\")))(((\"segregated witness (segwit)\", \"scripts and\", \"upgrading to\", startref=\"segwit-script-upgrade\")))(((\"upgrading to segregated witness\", startref=\"upgrade-segwit\")))(((\"P2WSH (pay to witness script hash)\", \"nesting\", startref=\"p2wsh-nest\")))(((\"nesting\", \"P2WSH (pay to witness script hash)\", startref=\"nest-p2wsh-ch7\")))(((\"addresses\", \"P2WSH (pay to witness script hash)\", \"nesting\", startref=\"address-p2wsh-nest\")))lower\ntransaction fees.\n\n[[mast]]\n=== Merklized Alternative Script Trees (MAST)\n\nUsing +OP_IF+, you (((\"scripts\", \"MAST\", id=\"script-mast\")))(((\"MAST (merklized alternative script trees)\", id=\"mast-ch7\")))(((\"merkle trees\", \"MAST\", id=\"merkle-tree-mast\")))can authorize multiple different spending conditions,\nbut this approach has several undesirable aspects:\n\nWeight (cost)::\nEvery condition you add increases the size of the\n  script, increasing the weight of the transaction and the amount of fee\n  that will need to be paid in order to spend bitcoins protected by\n  that script.\n\nLimited size::\nEven if you're willing to pay for extra conditions,\n  there's a limit to the maximum number you can put in a script.  For\n  example, legacy script is limited to 10,000 bytes, practically\n  limiting you to a few hundred conditional branches at most.  Even if\n  you could create a script as large as an entire block, it could still\n  only contain about 20,000 useful branches.  That's a lot for simple\n  payments but tiny compared to some imagined uses of Bitcoin.\n\nLack of privacy:: \nEvery condition you add to your script becomes\n  public knowledge when you spend bitcoins protected by that script.\n  For example, Mohammed's lawyer and business partners will be able to\n  see the entire script in <<variable_timelock_multisig>> whenever\n  anyone spends from it.  That means their lawyer, even if he's not\n  needed for signing, will be able to track all of their transactions.\n\nHowever, Bitcoin already uses a data structure known as a merkle tree\nthat allows verifying an element is a member of a set without\nneeding to identify every other member of the set.\n\nWe'll learn more about merkle trees in <<merkle_trees>>, but the\nessential information is that members of the set of data we want\n(e.g., authorization conditions of any length) can be passed into a hash\nfunction to create a short commitment (called a _leaf_ of the merkle\ntree).  Each of those leaves is then paired with another leaf\nand hashed again, creating a commitment to the leaves, called a\n_branch_ commitment.  A commitment to a pair of branches can be created\nthe same way.  This step is repeated for the branches until only one\nidentifier remains, called the _merkle root_.  Using our example script\nfrom <<variable_timelock_multisig>>, we construct a merkle tree for each\nof the three authorization conditions in <<diagram_mast1>>.\n\n[[diagram_mast1]]\n.A MAST with three subscripts.\nimage::images/mbc3_0705.png[\"A MAST with three sub-scripts\"]\n\nWe can now create a compact membership proof that proves a particular\nauthorization condition is a member of the merkle tree without\ndisclosing any details about the other members of the merkle tree.  See\n<<diagram_mast2>>, and note that the shaded nodes can be\ncomputed from other data provided by the user, so they don't need to be\nspecified at spend time.\n\n[[diagram_mast2]]\n.A MAST membership proof for one of the subscripts.\nimage::images/mbc3_0706.png[\"A MAST membership proof for one of the sub-scripts\"]\n\n[role=\"less_space pagebreak-before\"]\nThe hash digests used to create the commitments are each 32 bytes, so\nproving that a spend of <<diagram_mast2>> is authorized (using a merkle tree and the\nparticular conditions) and authenticated (using signatures) uses 383\nbytes.  By comparison, the same spend without a merkle tree (i.e., providing all possible authorization conditions) uses 412 bytes.\n\nSaving 29 bytes (7%) in this example doesn't fully\ncapture the potential savings.  The binary-tree nature of a merkle tree\nmeans that you only need an additional 32-byte commitment every time\nyou double the number of members in the set (in this case, authorization\nconditions).  In this instance, with three conditions, we need to use three\ncommitments (one of them being the merkle root, which will need to be\nincluded in the authorization data); we could also have four\ncommitments for the same cost.  An extra commitment would give us up to\neight conditions.  With just 16 commitments--512 bytes of commitments--we could have\nover 32,000 authorization conditions, far more than could be effectively\nused in an entire block of transactions filled with +OP_IF+ statements.  With 128 commitments\n(4,096 bytes), the number of conditions we could create in theory far\nexceeds the number of conditions that all the computers in the world\ncould create.\n\nIt's commonly the case that not every authorization condition is equally\nas likely to be used.  In the our example case, we expect Mohammed and\nhis partners to spend their money frequently; the time delayed\nconditions only exist in case something goes wrong.  We can restructure\nour tree with this knowledge as shown in <<diagram_mast3>>.\n\n[[diagram_mast3]]\n.A MAST with the most-expected script in the best position.\nimage::images/mbc3_0707.png[\"A MAST with the most-expected script in the best position\"]\n\n[role=\"less_space pagebreak-before\"]\nNow we only need to provide two commitments for the common case (saving 32\nbytes), although we still need three commitments for the less common cases.\nIf you know (or can guess) the probabilities of\nusing the different authorization conditions, you can use the Huffman\nalgorithm to place them into a maximally efficient tree; see BIP341 for\ndetails.\n\nRegardless of how the tree is constructed, we can see in the previous\nexamples that we're only revealing the actual authorization conditions\nthat get used.  The other conditions remain private.  Also remaining\nprivate are the number of conditions: a tree could have a single condition\nor a trillion conditions--there's no way for someone looking only at the\nonchain data for a single transaction to tell.\n\nExcept for increasing the complexity of Bitcoin slightly, there are no\nsignificant downsides of MAST for Bitcoin and there were two solid\nproposals for it, BIP114 and BIP116, before an improved approach was\ndiscovered, which we'll see in <<taproot>>.\n\n.MAST Versus MAST\n****\nThe earliest(((\"abstract syntax trees (AST)\")))(((\"AST (abstract syntax trees)\"))) idea for what we now know as _MAST_ in Bitcoin was\n_merklized abstract syntax trees_.  In an abstract syntax tree (AST),\nevery condition in a script creates a new branch, as show in <<ast>>.\n\n[[ast]]\n.An abstract syntax tree (AST) for a script.\nimage::images/mbc3_0708.png[\"An Abstract Syntax Tree (AST) for a script\"]\n\nASTs are widely used by programs that parse and optimize code for other\nprograms, such as compilers.  A merklized AST would commit to every part\nof a program and enable the features described in \n<<mast>>, but it would require revealing at least one 32-byte digest for\nevery separate part of the program, which would not be very space\nefficient on the blockchain for most programs.\n\nWhat people in most cases call _MAST_ in Bitcoin today is\n_merklized alternative script trees_, a backronym coined by developer\nAnthony Towns.  An alternative script tree is a set of scripts, each\none of them complete by itself, where only one can be selected--making\nthem alternatives for each other, as shown in <<alt_script>>.\n\n[[alt_script]]\n.An alternative script tree.\nimage::images/mbc3_0709.png[\"An alternative script tree\"]\n\nAlternative script trees only require revealing one 32-byte digest for\neach level of depth between the spender's chosen script and the root of\nthe tree.  For most scripts, this is a much more efficient use of space\nin the(((\"scripts\", \"MAST\", startref=\"script-mast\")))(((\"MAST (merklized alternative script trees)\", startref=\"mast-ch7\")))(((\"merkle trees\", \"MAST\", startref=\"merkle-tree-mast\"))) blockchain.\n****\n\n[[pay_to_contract]]\n=== Pay to Contract (P2C)\n\nAs we(((\"P2C (pay to contract)\", id=\"p2c\")))(((\"key tweaks\", id=\"key-tweak\")))(((\"public key cryptography\", \"key tweaks\", id=\"pub-key-tweak\"))) saw in <<public_child_key_derivation>>, the math of elliptic curve\ncryptography (ECC) allows Alice to use a private key to derive a public\nkey that she gives to Bob.  He can add an arbitrary value to that public\nkey to create a derived public key.  If he gives that arbitrary value to Alice, she can\nadd it to her private key to derive the private key for the derived\npublic key.  In short, Bob can create child public keys for which only\nAlice can create the corresponding private keys.  This is useful for\nBIP32-style Hierarchical Deterministic (HD) wallet recovery, but it can\nalso serve another use.\n\nLet's imagine Bob wants to buy something from Alice but he also wants to\nbe able prove later what he paid for in case there's any dispute.  Alice\nand Bob agree on the name of the item or service being sold (e.g.,\n\"Alice's podcast episode #123\"), and transform that description into a\nnumber by hashing it and interpreting the hash digest as a number.  Bob\nadds that number to Alice's public key and pays it.  The process is\ncalled _key tweaking_, and the number is known as a _tweak_.\n\nAlice can spend the funds by tweaking her private key using the same\nnumber (tweak).\n\nLater, Bob can prove to anyone what he paid Alice by revealing her\nunderlying key and the description they used.  Anyone can verify that\nthe public key, which was paid, equals the underlying key plus the\nhash commitment to the description.  If Alice admits that key is hers,\nthen she received the payment.  If Alice spent the funds, this further\nproves she knew the description at the time she signed the spending\ntransaction since she could only create a valid signature for the\ntweaked public key if she knew the tweak (the description).\n\nIf neither Alice nor Bob decided to publicly reveal the description they\nuse, the payment between them looks like any other payment.  There's no\nprivacy loss.\n\nBecause P2C is private by default, we can't know how often it is used\nfor its original purpose--in theory every payment could be using it,\nalthough we consider that unlikely.  However, P2C is widely used today\nin a slightly different form, which we'll(((\"P2C (pay to contract)\", startref=\"p2c\")))(((\"key tweaks\", startref=\"key-tweak\")))(((\"public key cryptography\", \"key tweaks\", startref=\"pub-key-tweak\"))) see in <<taproot>>.\n\n[[scriptless_multisignatures_and_threshold_signatures]]\n=== Scriptless Multisignatures and Threshold Signatures\n\nIn <<multisig>>, we (((\"scriptless multisignatures\", id=\"scriptless-multi\")))(((\"multisignature scripts\", \"scriptless\", id=\"multisignature-scriptless\")))(((\"threshold signatures\", id=\"threshold-signature\")))(((\"public key cryptography\", \"scriptless multisignatures\", id=\"pub-key-scriptless\")))looked at scripts that require signatures from\nmultiple keys.  However, there's another way to require cooperation from\nmultiple keys, which is also confusingly called _multisignature_.  To\ndistinguish between the two types in this section, we'll call the\nversion involving `OP_CHECKSIG`-style opcodes _script multisignatures_\nand the other version _scriptless multisignatures_.\n\nScriptless multisignatures involve each participant creating their own\nsecret the same way they create a private key.  We'll call this (((\"partial private keys\")))(((\"private keys\", \"partial\")))secret a\n_partial private key_, although we should note that it's the same length\nas a regular full private key.  From the partial private key, each\nparticipant derives a partial public key using the same algorithm used\nfor regular public keys we described in <<public_key_derivation>>.  Each\nparticipant shares their partial public keys with all the other\nparticipants and then combines all of the keys together to create the\nscriptless multisignature public key.\n\nThis combined public key looks the same as any other Bitcoin public key.\nA third party can't distinguish between a multiparty public key and an\nordinary key generated by a single user.\n\nTo spend bitcoins protected by the scriptless multisignature public key,\neach participant generates a partial signature.  The partial signatures\nare then combined to create a regular full signature.  There are\nmany known methods for creating and combining the partial signatures;\nwe'll look at this topic more in <<c_signatures>>.  Similar to the public\nkeys for scriptless multisignatures, the signatures generated by this\nprocess look the same as any other Bitcoin signature.  Third parties\ncan't determine whether a signature was created by a single person or a\nmillion people cooperating with each other.\n\nScriptless multisignatures are smaller and more private than scripted\nmultisignatures.  For scripted multisignatures, the number of bytes\nplaced in a transaction increases for every key and signature involved.\nFor scriptless multisignatures, the size is constant--a million\nparticipants each providing their own partial key and partial signature\nputs exactly the same amount of data in a transaction as an individual\nusing a single key and signature.  The story is the same for privacy:\nbecause each new key or signature adds data to a transaction, scripted\nmultisignatures disclose data about how many keys and signatures are\nbeing used--which may make it easy to figure out which transactions were\ncreated by which group of participants.  However, because every scriptless\nmultisignatures looks like every other scriptless\nmultisignature and every single-signature, no privacy-reducing data is\nleaked.\n\n++++\n<p class=\"fix_tracking\">\nThere are two downsides of scriptless multisignatures.  The first is\nthat all known secure algorithms for creating them for Bitcoin require more\nrounds of interaction or more careful management of state than\nscripted multisignatures.  This can be challenging in cases where\nsignatures are being generated by nearly stateless hardware signing\ndevices and the keys are physically distributed.  For example, if you\nkeep a hardware signing device in a bank safe deposit box, you would\nneed to visit that box once to create a scripted multisignature but\npossibly two or three times for a scriptless multisignature.\n</p>\n++++\n\nThe other downside is that threshold signing doesn't reveal who signed.\nIn scripted threshold signing, Alice, Bob, and Carol agree (for example)\nthat any two of them signing will be sufficient to spend the funds.\nIf Alice and Bob sign, this requires putting signatures from each of\nthem on chain, proving to anyone who knows their keys that they signed\nand Carol didn't.  In scriptless threshold signing, a signature from\nAlice and Bob is indistinguishable from a signature between Alice and\nCarol or Bob and Carol.  This is beneficial for privacy, but it means\nthat, even if Carol claims she didn't sign, she can't\nprove that she didn't, which may be bad for accountability and\nauditability.\n\nFor many users and use cases, the always reduced size and increased\nprivacy of multisignatures outweighs its occasional challenges for\ncreating and auditing(((\"scriptless multisignatures\", startref=\"scriptless-multi\")))(((\"multisignature scripts\", \"scriptless\", startref=\"multisignature-scriptless\")))(((\"threshold signatures\", startref=\"threshold-signature\")))(((\"public key cryptography\", \"scriptless multisignatures\", startref=\"pub-key-scriptless\"))) signatures.\n\n[[taproot]]\n=== Taproot\n\nOne reason (((\"scripts\", \"MAST\", \"taproot\", id=\"script-mast-taproot\")))(((\"MAST (merklized alternative script trees)\", \"taproot\", id=\"mast-taproot\")))(((\"merkle trees\", \"MAST\", \"taproot\", id=\"merkle-tree-mast-taproot\")))(((\"taproot\", id=\"taproot-ch7\")))(((\"mutual satisfaction contracts\", \"taproot\", id=\"mutual-satisfaction-taproot\")))people choose to use Bitcoin is that it's possible to create\ncontracts with highly predictable outcomes.  Legal contracts enforced by\na court of law depend in part on decisions by the judges and jurors\ninvolved in the case.  By contrast, Bitcoin contracts often require\nactions by their participants but are otherwise enforced by thousands of\nfull nodes all running functionally identical code.  When given the same\ncontract and the same input, every full node will always produce the\nsame result.  Any deviation would mean that Bitcoin was broken.\nHuman judges and juries can be much more flexible than software, but\nwhen that flexibility isn't wanted or needed, the predictability of\nBitcoin contracts is a major asset.\n\nIf all of the participants in a contract recognize that its outcome has\nbecome completely predictable, there's not actually any need for them to\ncontinue using the contract.  They could just do whatever the contract\ncompels them to do and then terminate the contract.  In society, this\nis how most contracts terminate: if the interested parties are\nsatisfied, they never take the contract before a judge or jury.  In\nBitcoin, it means that any contract that will use a significant amount\nof block space to settle should also provide a clause that allows it to\ninstead be settled by mutual satisfaction.\n\nIn MAST and with scriptless multisignatures, a mutual satisfaction\nclause is easy to design.  We simply make one of the top leaves of the\nscript tree a scriptless multisignature between all interested parties.\nWe already saw a complex contract between several parties with a\nsimple mutual satisfaction clause in <<diagram_mast3>>.  We could make\nthat more optimized by switching from scripted multisignature to\nscriptless multisignature.\n\nThat's reasonably efficient and private.  If the mutual satisfaction\nclause is used, we only need to provide a single merkle branch and all\nwe reveal is that a signature was involved (it could be from one person\nor it could be from thousands of different participants).  But\ndevelopers in 2018 realized that we could do better if we also used\npay to contract.\n\nIn our previous description of pay to contract in <<pay_to_contract>>,\nwe tweaked a public key to commit to the text of an agreement between\nAlice and Bob.  We can instead commit to the program code of a contract\nby committing to the root of a MAST.  The public key we tweak\nis a regular Bitcoin public key, meaning it could require a signature\nfrom a single person or it could require a signature from multiple\npeople (or it could be created in a special way to make it impossible to\ngenerate a signature for it).  That means we can satisfy the contract\neither with a single signature from all interested parties or by\nrevealing the MAST branch we want to use.  That commitment tree\ninvolving both a public key and a MAST is shown in <<diagram_taproot1>>.\n\n[[diagram_taproot1]]\n.A taproot with the public key committing to a merkle root.\nimage::images/mbc3_0710.png[\"A taproot with the public key committing to a merkle root\"]\n\nThis makes the mutual satisfaction clause using a multisignature\nextremely efficient and very private.  It's even more private than it\nmay appear because any transaction created by a single user who wants it\nto be satisfied by a single signature (or a multisignature generated by\nmultiple different wallets they control) looks identical onchain to a\nmutual-satisfaction spend.  There's no onchain difference in this case\nbetween a spend by a million users involved in an extraordinarily complex\ncontract or a single user just spending their saved bitcoins.\n\nWhen spending is possible using just the key, such as for a single signature\nor scriptless multisignature, that is(((\"keypath spending\")))(((\"scriptpath spending\"))) called _keypath spending_.  When\nthe tree of scripts is used, that is called _scriptpath spending_.\nFor keypath spending, the data that gets put onchain is the public key\n(in a witness program) and the signature (on the witness stack).\n\nFor scriptpath spending, the onchain data also includes the public key,\nwhich is placed in a witness program and called the _taproot output key_\nin this context.  The witness structure includes the following information:\n\n* A version number.\n\n* The underlying key--the key that existed before being tweaked by the\n   merkle root to produce the taproot output key.  This underlying key\n   is called the _taproot internal key_.\n\n* The script to execute, called the _leaf script_.\n\n* One 32-byte hash for each junction in merkle tree along the path that connects the leaf to the merkle root.\n\n* Any data necessary to satisfy the script (such as signatures or hash preimages).\n\n// Source for 33 bytes: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-February/017622.html\n\nWe're only aware of one significant described downside of taproot:\ncontracts whose participants want to use MAST but who don't want a\nmutual satisfaction clause have to include a taproot internal key on the\nblockchain, adding about 33 bytes of overhead. Given that almost\nall contracts are expected to benefit from a mutual satisfaction clause,\nor other multisignature clause that uses the top-level public key, and\nall users benefit from the increased anonymity set of outputs looking\nsimilar to each other, that rare overhead was not considered important\nby most users who participated in taproot's activation.\n\nSupport for taproot was added to Bitcoin in a soft fork that (((\"scripts\", \"MAST\", \"taproot\", startref=\"script-mast-taproot\")))(((\"MAST (merklized alternative script trees)\", \"taproot\", startref=\"mast-taproot\")))(((\"merkle trees\", \"MAST\", \"taproot\", startref=\"merkle-tree-mast-taproot\")))(((\"taproot\", startref=\"taproot-ch7\")))(((\"mutual satisfaction contracts\", \"taproot\", startref=\"mutual-satisfaction-taproot\")))activated\nin November 2021.\n\n=== Tapscript\n\n//FIXME:mention \"control block\" (maybe in MAST section)\n\nTaproot (((\"tapscript\", id=\"tapscript\")))(((\"mutual satisfaction contracts\", \"tapscript\", id=\"mutual-satisfaction-tapscript\")))enables MAST but only with a slightly different version of the\nBitcoin Script language than previously used, the new version being\ncalled _tapscript_.  The major differences include:\n\n[role=\"less_space pagebreak-before\"]\nScripted multisignature changes::\n  The old +OP_CHECKMULTISIG+ and +OP_CHECKMULTISIGVERIFY+ opcodes are\n  removed.  Those opcodes don't combine well with one of the other\n  changes in the taproot soft fork, the ability to use schnorr signatures\n  with batch validation (see <<schnorr_signatures>>).  A new +OP_CHECKSIGADD+ opcode is provided\n  instead.  When it successfully verifies a signature, this new opcode\n  increments a counter by one, making it possible to conveniently count\n  how many signatures passed, which can be compared against the desired number\n  of successful signatures to reimplement the same behavior as\n  +OP_CHECKMULTISIG+.\n\nChanges to all signatures::\n  All signature operations in tapscript use the schnorr signature\n  algorithm as defined in BIP340.  We'll explore schnorr signatures more\n  in <<c_signatures>>.\n+\nAdditionally, any signature-checking operation that is not expected\n  to succeed must be fed the value +OP_FALSE+ (also called +OP_0+)\n  instead of an actual signature.  Providing anything else to a failed\n  signature-checking operation will cause the entire script to fail.\n  This also helps support batch validation of schnorr signatures.\n\n++OP_SUCCESSx++ opcodes::\n  Opcodes in previous versions of Script that were unusable are now\n  redefined to cause an entire script to succeed if they are used.\n  This allows future soft forks to redefine them as not succeeding under\n  certain circumstances, which\n  is a restriction and so is possible to do in a soft fork.  (The\n  opposite, to define a not-succeeding operation as a success can only\n  be done in a hard fork, which is a much more challenging upgrade\n  path.)\n\nAlthough we've looked at authorization and authentication in depth in\nthis chapter, we've skipped over one very important part of how Bitcoin\nauthenticates spenders: its signatures.  We'll look at that(((\"tapscript\", startref=\"tapscript\")))(((\"mutual satisfaction contracts\", \"tapscript\", startref=\"mutual-satisfaction-tapscript\"))) next in\n<<c_signatures>>.\n\n//FIXME:text \"I think more information should be added concerning: tapscript in general. I think the MAST section would better serve to be condensed and integrated in the section on taproot. It should also mention how the taproot merle tree is unique (sorting the leaves, tagged hashes, etc, etc).\"\n"
        },
        {
          "name": "ch08_signatures.adoc",
          "type": "blob",
          "size": 53.9765625,
          "content": "[[c_signatures]]\n== Digital Signatures\n\nTwo (((\"digital signatures\", \"schnorr signature algorithm\")))(((\"schnorr signature algorithm\")))(((\"digital signatures\", \"ECDSA\")))(((\"ECDSA (Elliptic Curve Digital Signature Algorithm)\")))(((\"transactions\", \"signatures\", see=\"digital signatures\")))signature algorithms are currently\nused in Bitcoin, the _schnorr signature algorithm_ and the _Elliptic\nCurve Digital Signature Algorithm_ (_ECDSA_).\nThese algorithms are used for digital signatures based on elliptic\ncurve private/public key pairs, as described in <<elliptic_curve>>.\nThey are used for spending segwit v0 P2WPKH outputs, segwit v1 P2TR\nkeypath spending, and by the script functions +OP_CHECKSIG+,\n+OP_CHECKSIGVERIFY+, +OP_CHECKMULTISIG+, [.keep-together]#+OP_CHECKMULTISIGVERIFY+,# and\n+OP_CHECKSIGADD+.\nAny time one of those is executed, a signature must be\nprovided.\n\nA digital signature(((\"digital signatures\", \"purpose of\"))) serves\nthree purposes in Bitcoin. First, the\nsignature proves that the controller of a private key, who is by\nimplication the owner of the funds, has _authorized_ the spending of\nthose funds. Secondly, the proof of authorization is _undeniable_\n(nonrepudiation). Thirdly, that the authorized transaction cannot be\nchanged by unauthenticated third parties--that its _integrity_ is\nintact.\n\n[NOTE]\n====\nEach transaction input and any signatures it may contain is _completely_\nindependent of any other input or signature. Multiple parties can\ncollaborate to construct transactions and sign only one input each.\nSeveral protocols use this fact to create multiparty transactions for\nprivacy.\n====\n\nIn this chapter we look at how digital signatures work and how they can\npresent proof of control of a private key without revealing that private\nkey.\n\n[role=\"less_space pagebreak-before\"]\n=== How Digital Signatures Work\n\nA digital signature\nconsists of two parts. The first part is an algorithm for creating a\nsignature for a message (the transaction) using a private key (the\nsigning key). The second part is an algorithm\nthat allows anyone to verify the signature, given also the message and the corresponding\npublic key.\n\n==== Creating a Digital Signature\n\nIn Bitcoin's(((\"digital signatures\", \"creating\"))) use of digital signature algorithms, the \"message\" being\nsigned is the transaction, or more accurately a hash of a specific\nsubset of the data in the transaction, (((\"commitment hash\")))called the _commitment hash_ (see\n<<sighash_types>>). The\nsigning key is the user's private key. The result is the signature:\n\n[latexmath]\n++++\n\\begin{equation}\nSig = F_{sig}(F_{hash}(m), x)\n\\end{equation}\n++++\n\nwhere:\n\n* _x_ is the signing private key\n* _m_ is the message to sign, the commitment hash (such as parts of a transaction)\n* _F_~_hash_~ is the hashing function\n* _F_~_sig_~ is the signing algorithm\n* _Sig_ is the resulting signature\n\nYou can find more details on the mathematics of schnorr and ECDSA signatures in <<schnorr_signatures>>\nand <<ecdsa_signatures>>.\n\nIn both schnorr and ECDSA signatures, the function _F_~_sig_~ produces a signature +Sig+ that is composed of\ntwo values.  There are differences between the two values in the\ndifferent algorithms, which we'll explore later. After the two values\nare calculated, they are serialized into a byte stream.  For ECDSA\nsignatures, the encoding uses an international standard encoding scheme\ncalled the\n_Distinguished Encoding Rules_, or _DER_.  For schnorr signatures, a\nsimpler serialization format is used.\n\n==== Verifying the Signature\n\nThe(((\"digital signatures\", \"verifying\")))(((\"verifying\", \"digital signatures\"))) signature verification algorithm takes the message (a hash of parts of the transaction and related data), the signer's public key and the signature, and returns ++TRUE++ if the signature is valid for this message and public key.\n\nTo verify the signature, one must have the signature, the serialized\ntransaction, some data about the output being spent, and the public key\nthat corresponds to the private key used to create the signature.\nEssentially, verification of a signature means \"Only the controller of\nthe private key that generated this public key could have produced this\nsignature on this transaction.\"\n\n[[sighash_types]]\n==== Signature Hash Types (SIGHASH)\n\nDigital signatures(((\"digital signatures\", \"SIGHASH flags\", id=\"digital-signature-sighash\")))(((\"SIGHASH flags\", id=\"sighash\"))) apply to messages,\nwhich in the case of Bitcoin, are the transactions themselves. The\nsignature proves a _commitment_ by the signer to specific transaction\ndata. In the simplest form, the signature applies to almost the entire\ntransaction, thereby committing to all the inputs, outputs, and other\ntransaction fields. However, a signature can commit to only a subset of\nthe data in a transaction, which is useful for a number of scenarios as\nwe will see in this section.\n\nBitcoin signatures have a way of indicating which\npart of a transaction's data is included in the hash signed by the\nprivate key using a +SIGHASH+ flag. The +SIGHASH+ flag is a single byte\nthat is appended to the signature. Every signature has either an\nexplicit or implicit +SIGHASH+ flag,\nand the flag can be different from input to input. A transaction with\nthree signed inputs may have three signatures with different +SIGHASH+\nflags, each signature signing (committing) to different parts of the\ntransaction.\n\nRemember, each input may contain one or more signatures. As\na result, an input may have signatures\nwith different +SIGHASH+ flags that commit to different parts of the\ntransaction. Note also that Bitcoin transactions\nmay contain inputs from different \"owners,\" who may sign only one input\nin a partially constructed transaction, collaborating with\nothers to gather all the necessary signatures to make a valid\ntransaction. Many of the +SIGHASH+ flag types only make sense if you\nthink of multiple participants collaborating outside the Bitcoin network\nand updating a partially signed transaction.\n\nThere are three +SIGHASH+ flags: +ALL+, +NONE+, and +SINGLE+, as shown\nin <<sighash_types_and_their>>.\n\n++++\n<table id=\"sighash_types_and_their\">\n<caption>\n<span class=\"plain\"><code>SIGHASH</code></span> types and their meanings</caption>\n<thead>\n<tr>\n<th><code>SIGHASH</code> flag</th>\n<th>Value</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><p><code>ALL</code></p></td>\n<td><p><code>0x01</code></p></td>\n<td><p>Signature applies to all inputs and outputs</p></td>\n</tr>\n<tr>\n<td><p><code>NONE</code></p></td>\n<td><p><code>0x02</code></p></td>\n<td><p>Signature applies to all inputs, none of the outputs</p></td>\n</tr>\n<tr>\n<td><p><code>SINGLE</code></p></td>\n<td><p><code>0x03</code></p></td>\n<td><p>Signature applies to all inputs but only the one output with the same index number as the signed input</p></td>\n</tr>\n</tbody>\n</table>\n++++\n\nIn addition, there is a modifier flag, +SIGHASH_ANYONECANPAY+, which can\nbe combined with each of the preceding flags. When +ANYONECANPAY+ is\nset, only one input is signed, leaving the rest (and their sequence\nnumbers) open for modification. The +ANYONECANPAY+ has the value +0x80+\nand is applied by bitwise OR, resulting in the combined flags as shown\nin <<sighash_types_with_modifiers>>.\n\n[role=\"less_space pagebreak-before\"]\n++++\n<table id=\"sighash_types_with_modifiers\">\n<caption>\n<span class=\"plain\"><code>SIGHASH</code></span> types with modifiers and their meanings</caption>\n<thead>\n<tr>\n<th><code>SIGHASH</code> flag</th>\n<th>Value</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><p><code>ALL|ANYONECANPAY</code></p></td>\n<td><p><code>0x81</code></p></td>\n<td><p>Signature applies to one input and all outputs</p></td>\n</tr>\n<tr>\n<td><p><code>NONE|ANYONECANPAY</code></p></td>\n<td><p><code>0x82</code></p></td>\n<td><p>Signature applies to one input, none of the outputs</p></td>\n</tr>\n<tr>\n<td><p><code>SINGLE|ANYONECANPAY</code></p></td>\n<td><p><code>0x83</code></p></td>\n<td><p>Signature applies to one input and the output with the same index number</p></td>\n</tr>\n</tbody>\n</table>\n++++\n\nThe way +SIGHASH+ flags are applied during signing and verification is\nthat a copy of the transaction is made and certain fields within are\neither omitted or truncated (set to zero length and emptied). The resulting transaction is\nserialized. The +SIGHASH+ flag is included in the serialized\ntransaction data and the result is hashed. The hash digest itself is the \"message\"\nthat is signed. Depending on which +SIGHASH+ flag is used, different\nparts of the transaction are included.\nBy including the\n+SIGHASH+ flag itself, the signature commits the\n+SIGHASH+ type as well, so it can't be changed (e.g., by a miner).\n\nIn\n<<serialization_of_signatures_der>>, we will see that the last part of the\nDER-encoded signature was +01+, which is the +SIGHASH_ALL+ flag for ECDSA signatures. This\nlocks the transaction data, so Alice's signature is committing to the state\nof all inputs and outputs. This is the most common signature form.\n\nLet's look at some of the other +SIGHASH+ types and how they can be used\nin practice:\n\n+ALL|ANYONECANPAY+ :: This (((\"crowdfunding\")))construction can be used to make a\n\"crowdfunding&#x201d;-style transaction. Someone attempting to raise\nfunds can construct a transaction with a single output. The single\noutput pays the \"goal\" amount to the fundraiser. Such a transaction is\nobviously not valid, as it has no inputs. However, others can now amend\nit by adding an input of their own as a donation. They sign their own\ninput with +ALL|ANYONECANPAY+. Unless enough inputs are gathered to\nreach the value of the output, the transaction is invalid. Each donation\nis a \"pledge,\" which cannot be collected by the fundraiser until the\nentire goal amount is raised.  Unfortunately, this protocol can be\ncircumvented by the fundraiser adding an input of their own (or from\nsomeone who lends them funds), allowing them to collect the donations\neven if they haven't reached the specified value.\n\n+NONE+ :: This construction can be used to create a \"bearer check\" or\n\"blank check\" of a specific amount. It commits to all inputs but allows\nthe outputs to be changed. Anyone can write their own\nBitcoin address into the output script.\nBy itself, this allows any miner to change\nthe output destination and claim the funds for themselves, but if other\nrequired signatures in the transaction use +SIGHASH_ALL+ or another type\nthat commits to the output, it allows those spenders to change the\ndestination without allowing any third parties (like miners) to modify\nthe outputs.\n\n+NONE|ANYONECANPAY+ :: This construction can be used to build a \"dust\ncollector.\" Users who have tiny UTXOs in their wallets can't spend these\nwithout the cost in fees exceeding the value of the UTXO; see\n<<uneconomical_outputs>>. With this type\nof signature, the uneconomical UTXOs can be donated for anyone to aggregate and\nspend whenever they want.\n\nThere are some proposals to modify or\nexpand the +SIGHASH+ system.  The most widely discussed proposal as of\nthis writing is (((\"BIP118 SIGHASH flags\")))BIP118, which proposes to add two\nnew sighash flags.  A signature using +SIGHASH_ANYPREVOUT+ would not\ncommit to an input's outpoint field, allowing it to be used to spend any\nprevious output for a particular witness program.  For example, if Alice\nreceives two outputs for the same amount to the same witness program\n(e.g., requiring a single signature from her wallet), a\n+SIGHASH_ANYPREVOUT+ signature for spending either one of those outputs\ncould be copied and used to spend the other output to the same\ndestination.\n\nA signature using +SIGHASH_ANYPREVOUTANYSCRIPT+ would not\ncommit to the outpoint, the amount, the witness program, or the\nspecific leaf in the taproot merkle tree (script tree), allowing it to spend any previous output that the signature could satisfy.  For example, if Alice received two\noutputs for different amounts and different witness programs (e.g., one\nrequiring a single signature and another requiring her signature plus some\nother data), a +SIGHASH_ANYPREVOUTANYSCRIPT+ signature for spending\neither one of those outputs could be copied and used to spend the other\noutput to the same destination (assuming the extra data for the second\noutput was known).\n\nThe main expected use for the two ++SIGHASH_ANYPREVOUT++ opcodes is improved\npayment channels, such as those used in the Lightning Network (LN), although\nseveral other uses have been described.\n\n[NOTE]\n====\nYou will not often see +SIGHASH+ flags presented as an option in a user's\nwallet application.  Simple wallet applications\nsign with [.keep-together]#+SIGHASH_ALL+# flags.  More sophisticated applications, such as\nLN nodes, may use alternative +SIGHASH+ flags, but they\nuse protocols that have been extensively reviewed to understand the\ninfluence of the alternative (((\"digital signatures\", \"SIGHASH flags\", startref=\"digital-signature-sighash\")))(((\"SIGHASH flags\", startref=\"sighash\")))flags.\n====\n\n[[schnorr_signatures]]\n=== Schnorr Signatures\n\nIn 1989, (((\"digital signatures\", \"schnorr signature algorithm\", id=\"digital-sigs-schnorr\")))(((\"schnorr signature algorithm\", id=\"schnorr\")))Claus Schnorr published a paper describing the signature\nalgorithm that's become eponymous with him.  The algorithm isn't\nspecific to the elliptic curve cryptography (ECC) that Bitcoin and many\nother applications use, although it is perhaps most strongly associated\nwith ECC today.  Schnorr signatures have a number of nice properties:\n\nProvable security::\n  A mathematical (((\"digital signatures\", \"schnorr signature algorithm\", \"properties of\")))(((\"schnorr signature algorithm\", \"properties of\")))proof of the security of schnorr signatures depends on\n  only the difficulty of solving the Discrete Logarithm Problem (DLP),\n  particularly for elliptic curves (EC) for Bitcoin, and the ability of\n  a hash function (like the SHA256 function used in Bitcoin) to produce\n  unpredictable values, called the random oracle model (ROM).  Other\n  signature algorithms have additional dependencies or require much\n  larger public keys or signatures for equivalent security to\n  ECC-Schnorr (when the threat is defined as classical computers; other\n  algorithms may provide more efficient security against quantum\n  computers).\n\nLinearity::\n  Schnorr signatures have a property that mathematicians (((\"linearity\")))call\n  _linearity_, which applies to functions with two particular\n  properties.  The first property is that summing together two or more\n  variables and then running a function on that sum will produce the\n  same value as running the function on each of the variables\n  independently and then summing together the results, e.g.,\n  _f(x_ + _y_ + _z)_ == _f(x)_ + _f(y)_ + _f(z)_; this property is(((\"additivity\"))) called\n  _additivity_.  The second property is that multiplying a variable and\n  then running a function on that product will produce the same value as\n  running the function on the variable and then multiplying it by the\n  same amount, e.g., _f(a_ × _x)_ == _a_ × _f(x)_; this property is (((\"homogeneity of degree 1\")))called\n  _homogeneity of degree 1_.\n+\nIn cryptographic operations, some functions may be private (such\n  as functions involving private keys or secret nonces), so being able\n  to get the same result whether performing an operation inside or\n  outside of a function makes it easy for multiple parties to coordinate\n  and cooperate without sharing their secrets.  We'll see some of the\n  specific benefits of linearity in schnorr signatures in\n  <<schnorr_multisignatures>> and <<schnorr_threshold_signatures>>.\n\nBatch verification::\n  When used(((\"batch verification of digital signatures\"))) in a certain way (which Bitcoin does), one consequence of\n  schnorr's linearity is that it's relatively straightforward to verify\n  more than one schnorr signature at the same time in less time than it\n  would take to verify each signature independently.  The more\n  signatures that are verified in a batch, the greater the speed up.\n  For the typical number of signatures in a block, it's possible to\n  batch verify them in about half the amount of time it would take to\n  verify each signature independently.\n\nLater in this chapter, we'll describe the schnorr signature algorithm\nexactly as it's used in Bitcoin, but we're going to start with a\nsimplified version of it and work our way toward the actual protocol in\nstages.\n\n[role=\"less_space pagebreak-before\"]\nAlice(((\"digital signatures\", \"schnorr signature algorithm\", \"examples of usage\")))(((\"schnorr signature algorithm\", \"examples of usage\"))) starts by choosing a large random number (_x_), which we call her\n_private key_.  She also knows a public point on Bitcoin's elliptic\ncurve called the Generator (_G_) (see <<public_key_derivation>>).  Alice uses EC\nmultiplication to multiply _G_ by her private key _x_, in which case _x_\nis called a _scalar_ because it scales up _G_.  The result is _xG_,\nwhich we call Alice's _public key_.  Alice gives her public key to Bob.\nEven though Bob also knows _G_, the DLP prevents Bob from being able to divide _xG_ by _G_ to derive Alice's\nprivate key.\n\nAt some later time, Bob wants Alice to identify herself by proving\nthat she knows the scalar _x_ for the public key (_xG_) that Bob\nreceived earlier.  Alice can't give Bob _x_ directly because that would\nallow him to identify as her to other people, so she needs to prove\nher knowledge of _x_ without revealing _x_ to Bob,(((\"zero-knowledge proof\"))) called a\n_zero-knowledge proof_.  For that, we begin the schnorr identity\nprocess:\n\n1. Alice chooses another large random number (_k_), which we call the\n  _private nonce_.  Again she uses it as a scalar, multiplying it by _G_\n  to produce _kG_, which we call the _public nonce_.  She gives the\n  public nonce to Bob.\n\n2. Bob chooses a large random number of his own, _e_, which we call the\n  _challenge scalar_.  We say \"challenge\" because it's used to challenge\n  Alice to prove that she knows the private key (_x_) for the public key\n  (_xG_) she previously gave Bob; we say \"scalar\" because it will later\n  be used to multiply an EC point.\n\n3. Alice now has the numbers (scalars) _x_, _k_, and _e_.  She combines\n  them together to produce a final scalar _s_ using the formula\n  _s_ = _k_ + _ex_.  She gives _s_ to Bob.\n\n4. Bob now knows the scalars _s_ and _e_, but not _x_ or _k_.  However,\n  Bob does know _xG_ and _kG_, and he can compute for himself _sG_ and\n  _exG_.  That means he can check the equality of a scaled-up version of\n  the operation Alice performed: [.keep-together]#_sG_ == _kG_ + _exG_.#  If that is equal,\n  then Bob can be sure that Alice knew _x_ when she generated _s_.\n\n.Schnorr Identity Protocol with Integers Instead of Points\n****\nIt might be easier to understand the interactive schnorr identity\nprotocol if we create an insecure oversimplification by substituting each of the preceding values (including _G_) with simple integers instead of points on an elliptic curve.\nFor example, we'll use the prime numbers starting with 3:\n\nSetup: Alice chooses _x_ = 3 as her private key.  She multiplies it by the\ngenerator _G_ = 5 to get her public key _xG_ = 15.  She gives Bob 15.\n\n1. Alice chooses the private nonce _k_ = 7 and generates the public nonce\n  _kG_ = 35.  She gives Bob 35.\n\n2. Bob chooses _e_ = 11 and gives it to Alice.\n\n3. Alice generates _s_ = 40 = 7 + 11 × 3.  She gives Bob 40.\n\n4. Bob derives _sG_ = 200 = 40 × 5 and _exG_ = 165 = 11 × 15.  He then\n  verifies that [.keep-together]#200 == 35 + 165.#  Note that this is the same operation\n  that Alice performed, but all of the values have been scaled up by 5\n  (the value of _G_).\n\nOf course, this is an oversimplified example.  When working with simple\nintegers, we can divide products by the generator _G_ to get the\nunderlying scalar, which isn't secure.  This is why a critical property\nof the elliptic curve cryptography used in Bitcoin is that\nmultiplication is easy but division by a point on the curve is impractical.  Also, with numbers\nthis small, finding underlying values (or valid substitutes) through\nbrute force is easy; the numbers used in Bitcoin are much larger.\n****\n\nLet's discuss some of the features of the interactive schnorr\nidentity protocol that make it secure:\n\nThe nonce (k)::\nIn step 1, (((\"digital signatures\", \"schnorr signature algorithm\", \"security features\")))(((\"schnorr signature algorithm\", \"security features\")))Alice chooses a number that Bob doesn't\n  know and can't guess and gives him the scaled form of that number,\n  _kG_.  At that point, Bob also already has her public key (_xG_),\n  which is the scaled form of _x_, her private key.  That means when Bob is working on\n  the final equation (_sG_ = _kG_ + _exG_), there are two independent\n  variables that Bob doesn't know (_x_ and _k_).  It's possible to use\n  simple algebra to solve an equation with one unknown variable but not\n  two independent unknown variables, so the presence of Alice's nonce\n  prevents Bob from being able to derive her private key.  It's critical\n  to note that this protection depends on nonces being unguessable in\n  any way.  If there's anything predictable about Alice's nonce, Bob may\n  be able to leverage that into figuring out Alice's private key.  See\n  <<nonce_warning>> for more details.\n\nThe challenge scalar (e)::\nBob waits to receive Alice's public nonce\n  and then proceeds in step 2 to give her a number (the challenge\n  scalar) that Alice didn't previously know and couldn't have guessed.\n  It's critical that Bob only give her the challenge scalar after she\n  commits to her public nonce.  Consider what could happen if someone\n  who didn't know _x_ wanted to impersonate Alice, and Bob accidentally\n  gave them the challenge scalar _e_ before they told him the public\n  nonce _kG_.  This allows the impersonator to change parameters on both sides of\n  the equation that Bob will use for verification, _sG_ == _kG_ + _exG_;\n  specifically, they can change both _sG_ and _kG_.  Think about a\n  simplified form of that expression: _x_ = _y_ + _a_.  If you can change both\n  _x_ and _y_, you can cancel out _a_ using _x_++'++ = (_x_ – _a_) + _a_.  Any\n  value you choose for _x_ will now satisfy the equation.  For the\n  actual equation the impersonator simply chooses a random number for _s_, generates\n  _sG_, and then uses EC subtraction to select a _kG_ that equals _kG_ =\n  _sG_ – _exG_.  They give Bob their calculated _kG_ and later their random\n  _sG_, and Bob thinks that's valid because [.keep-together]#_sG_ == (_sG_ – _exG_)# + _exG_.\n  This explains why the order of operations in the protocol is\n  essential: Bob must only give Alice the challenge scalar after Alice\n  has committed to her public nonce.\n\n++++\n<p class=\"fix_tracking\">\nThe interactive identity protocol described here matches part of Claus\nSchnorr's original description, but it lacks two essential features we\nneed for the decentralized Bitcoin network.  The first of these is that\nit relies on Bob waiting for Alice to commit to her public nonce and\nthen Bob giving her a random challenge scalar.  In Bitcoin, the spender\nof every transaction needs to be authenticated by thousands of Bitcoin\nfull nodes—including future nodes that haven't been started yet but\nwhose operators will one day want to ensure the bitcoins they receive\ncame from a chain of transfers where every transaction was valid.  Any\nBitcoin node that is unable to communicate with Alice, today or in the\nfuture, will be unable to authenticate her transaction and will be in\ndisagreement with every other node that did authenticate it.  That's not\nacceptable for a consensus system like Bitcoin.  For Bitcoin to work, we\nneed a protocol that doesn't require interaction between Alice and each\nnode that wants to authenticate her.\n</p>\n++++\n\nA simple technique, known as the Fiat-Shamir transform after its\ndiscoverers, can turn the schnorr interactive identity protocol\ninto a noninteractive digital signature scheme.  Recall the importance\nof steps 1 and 2--including that they be performed in order.  Alice must\ncommit to an unpredictable nonce; Bob must give Alice an unpredictable\nchallenge scalar only after he has received her commitment.  Recall also\nthe properties of secure cryptographic hash functions we've used\nelsewhere in this book: it will always produce the same output when\ngiven the same input but it will produce a value indistinguishable from\nrandom data when given a different input.\n\nThis allows Alice to choose her private nonce, derive her public nonce,\nand then hash the public nonce to get the challenge scalar.  Because\nAlice can't predict the output of the hash function (the challenge), and\nbecause it's always the same for the same input (the nonce), this\nensures that Alice gets a random challenge even though she chooses the nonce\nand hashes it herself.  We no longer need interaction from Bob.  She can\nsimply publish her public nonce _kG_ and the scalar _s_, and each of the\nthousands of full nodes (past and future) can hash _kG_ to produce _e_,\nuse that to produce _exG_, and then verify _sG_ == _kG_ + _exG_.  Written\nexplicitly, the verification equation becomes [.keep-together]#_sG_ == _kG_ + _hash_(_kG_) × _xG_.#\n\nWe need one other thing to finish converting the interactive schnorr\nidentity protocol into a digital signature protocol useful for\nBitcoin.  We don't just want Alice to prove that she knows her private\nkey; we also want to give her the ability to commit to a message.  Specifically,\nwe want her to commit to the data related to the Bitcoin transaction she\nwants to send.  With the Fiat-Shamir transform in place, we already\nhave a commitment, so we can simply have it additionally commit to the\nmessage.  Instead of _hash_(_kG_), we now also commit to the message\n_m_ using _hash_(_kG_ || _m_), where || stands for concatenation.\n\nWe've now defined a version of the schnorr signature protocol, but\nthere's one more thing we need to do to address a Bitcoin-specific\nconcern.  In BIP32 key derivation, as described in\n<<public_child_key_derivation>>, the algorithm for unhardened derivation\ntakes a public key and adds to it a nonsecret value to produce a\nderived public key.  That means it's also possible to add that\nnonsecret value to a valid signature for one key to produce a signature\nfor a related key.  That related signature is valid but it wasn't\nauthorized by the person possessing the private key, which is a major\nsecurity failure.  To protect BIP32 unhardened derivation and\nalso support several protocols people wanted to build on top of schnorr\nsignatures, Bitcoin's version of schnorr signatures, called _BIP340\nschnorr signatures for secp256k1_, also commits to the public key being\nused in addition to the public nonce and the message.  That makes the\nfull commitment _hash_(_kG_ || _xG_ || _m_).\n\nNow that we've described each part of the BIP340 schnorr signature\nalgorithm and explained what it does for us, we can define the protocol.\nMultiplication of integers are performed _modulus p_, indicating that the\nresult of the operation is divided by the number _p_ (as defined in the\nsecp256k1 standard) and the remainder is used.  The number _p_ is very\nlarge, but if it was 3 and the result of an operation was 5, the actual\nnumber we would use is 2 (i.e., 5 divided by 3 has a remainder of 2).\n\nSetup: Alice chooses a large random number (_x_) as her private key\n(either directly or by using a protocol like BIP32 to deterministically\ngenerate a private key from a large random seed value).  She uses the\nparameters defined in secp256k1 (see <<elliptic_curve>>) to multiply the\ngenerator _G_ by her scalar _x_, producing _xG_ (her public key).  She\ngives her public key to everyone who will later authenticate her Bitcoin\ntransactions (e.g., by having _xG_ included in a transaction output).  When\nshe's ready to spend, she begins generating her signature:\n\n1. Alice chooses a large random private nonce _k_ and derives the public\n   nonce _kG_.\n\n2. She chooses her message _m_ (e.g., transaction data) and generates the\n   challenge scalar _e_ = _hash_(_kG_ || _xG_ || _m_).\n\n3. She produces the scalar _s_ = _k_ + _ex_.  The two values _kG_ and _s_\n   are her signature.  She gives this signature to everyone who wants to\n   verify that signature; she also needs to ensure everyone receives her\n   message _m_.  In Bitcoin, this is done by including her signature in\n   the witness structure of her spending transaction and then relaying that\n   transaction to full nodes.\n\n4. The verifiers (e.g., full nodes) use _s_ to derive _sG_ and then\n   verify that _sG_ == _kG_ + _hash_(_kG_ || _xG_ || _m_) × _xG_.  If the equation is\n   valid, Alice proved that she knows her private key _x_ (without\n   revealing it) and committed to the message _m_ (containing the\n   transaction data).\n\n==== Serialization of Schnorr Signatures\n\nA schnorr signature (((\"digital signatures\", \"schnorr signature algorithm\", \"serialization\")))(((\"schnorr signature algorithm\", \"serialization\")))(((\"serialization\", \"of schnorr signature algorithm\", secondary-sortas=\"schnorr\")))consists of two values, _kG_ and _s_.  The value\n_kG_ is a point on Bitcoin's elliptic curve (called secp256k1) and would normally be represented by two 32-byte coordinates, e.g., (_x_, _y_).\nHowever, only the _x_ coordinate is needed, so only that value is\nincluded.  When you see _kG_ in schnorr signatures for Bitcoin, note that it's only that point's _x_\ncoordinate.\n\nThe value _s_ is a scalar (a number meant to multiply other numbers).  For\nBitcoin's secp256k1 curve, it can never be more than 32 bytes long.\n\nAlthough both _kG_ and _s_ can sometimes be values that can be\nrepresented with fewer than 32 bytes, it's improbable that they'd be\nmuch smaller than 32 bytes, so they're serialized as two 32-byte\nvalues (i.e., values smaller than 32 bytes have leading zeros).\nThey're serialized in the order of _kG_ and then _s_, producing exactly\n64 bytes.\n\nThe taproot soft fork, also called v1 segwit, introduced schnorr signatures\nto Bitcoin and is the only way they are used in Bitcoin as of this writing.  When\nused with either taproot keypath or scriptpath spending, a 64-byte\nschnorr signature is considered to use a default signature hash (sighash)\nthat is +SIGHASH_ALL+.  If an alternative sighash is used, or if the\nspender wants to waste space to explicitly specify +SIGHASH_ALL+, a\nsingle additional byte is appended to the signature that specifies the\nsignature hash, making the signature 65 bytes.\n\nAs we'll see, either 64 or 65 bytes is considerably more efficient that\nthe serialization used for ECDSA signatures described in\n<<serialization_of_signatures_der>>.\n\n[[schnorr_multisignatures]]\n==== Schnorr-based Scriptless Multisignatures\n\nIn the(((\"digital signatures\", \"schnorr signature algorithm\", \"scriptless multisignatures\", id=\"digital-sigs-schnorr-multisig\")))(((\"schnorr signature algorithm\", \"scriptless multisignatures\", id=\"schnorr-multisig\")))(((\"scriptless multisignatures\", \"in schnorr signature algorithm\", secondary-sortas=\"schnorr\", id=\"scriptless-multi-schnorr\")))(((\"multisignature scripts\", \"in schnorr signature algorithm\", secondary-sortas=\"schnorr\", id=\"multi-script-schnorr\"))) single-signature schnorr protocol described in <<schnorr_signatures>>, Alice\nuses a signature (_kG_, _s_) to publicly prove her knowledge of her\nprivate key, which in this case we'll call _y_.  Imagine if Bob also has\na private key (_z_) and he's willing to work with Alice to prove that\ntogether they know _x_ = _y_ + _z_ without either of them revealing their\nprivate key to each other or anyone else.  Let's go through the BIP340\nschnorr signature protocol again.\n\n[WARNING]\n====\nThe simple protocol we are about to describe is not secure for the\nreasons we will explain shortly.  We use it only to demonstrate the\nmechanics of schnorr multisignatures before describing related protocols\nthat are believed to be secure.\n====\n\nAlice and Bob need to derive the public key for _x_, which is _xG_.\nSince it's possible to use elliptic curve operations to add two EC\npoints together, they start by Alice deriving _yG_ and Bob deriving\n_zG_.  They then add them together to create [.keep-together]#_xG_ = _yG_ + _zG_.#  The point\n_xG_ is (((\"aggregated public keys\")))(((\"public keys\", \"aggregated\")))their _aggregated public key_.  To create a signature, they begin the\nsimple multisignature protocol:\n\n1. They each individually choose a large random private nonce, _a_ for\n   Alice and _b_ for Bob.  They also individually derive the corresponding\n   public nonce _aG_ and _bG_.  Together, they produce an aggregated\n   public nonce _kG_ = _aG_ + _bG_.\n\n2. They agree on the message to sign, _m_ (e.g., a transaction), and\n   each generates a copy of the challenge scalar: _e_ = _hash_(_kG_ || _xG_ || _m_).\n\n3. Alice produces the scalar _q_ = _a_ + _ey_.  Bob produces the scalar\n   _r_ = _b_ + _ez_.  They add the scalars together to produce\n   _s_ = _q_ + _r_.  Their signature is the two values _kG_ [.keep-together]#and _s_.#\n\n4. The verifiers check their public key and signature using the normal\n   equation: [.keep-together]#_sG_ ==# _kG_ + _hash_(_kG_ || _xG_ || _m_) × _xG_.\n\nAlice and Bob have proven that they know the sum of their private keys without\neither one of them revealing their private key to the other or anyone\nelse.  The protocol can be extended to any number of participants (e.g.,\na million people could prove they knew the sum of their million\ndifferent keys).\n\nThe preceding protocol has several security problems.  Most notable is that one\nparty might learn the public keys of the other parties before committing\nto their own public key.  For example, Alice generates her public key\n_yG_ honestly and shares it with Bob.  Bob generates his public key\nusing _zG_ – _yG_.  When their two keys are combined [.keep-together]#(_yG_ + _zG_ – _yG_),# the\npositive and negative _yG_ terms cancel out so the public key only represents\nthe private key for _z_ (i.e., Bob's private key).  Now Bob can create a\nvalid signature without any assistance from Alice.  This is (((\"key cancellation attacks\")))called a\n_key cancellation attack_.\n\nThere are various ways to solve the key cancellation attack.  The\nsimplest scheme would be to require each participant commit to their\npart of the public key before sharing anything about that key with all\nof the other participants.  For example, Alice and Bob each individually\nhash their public keys and share their digests with each other.  When\nthey both have the other's digest, they can share their keys.  They\nindividually check that the other's key hashes to the previously\nprovided digest and then proceed with the protocol normally.  This prevents\neither one of them from choosing a public key that cancels out the keys\nof the other participants.  However, it's easy to fail to implement this\nscheme correctly, such as using it in a naive way with unhardened\nBIP32 public key derivation.  Additionally, it adds an extra step for\ncommunication between the participants, which may be undesirable in many\ncases.  More complex schemes have been proposed that address these\nshortcomings.\n\nIn addition to the key cancellation attack, there are a number of\nattacks possible against (((\"nonce attacks\")))nonces.  Recall that the purpose of the nonce\nis to prevent anyone from being able to use their knowledge of other values\nin the signature verification equation to solve for your private key,\ndetermining its value.  To effectively accomplish that, you must use a\ndifferent nonce every time you sign a different message or change other\nsignature parameters.  The different nonces must not be related in any\nway.  For a multisignature, every participant must follow these rules or\nit could compromise the security of other participants.  In addition,\ncancellation and other attacks need to be prevented.  Different\nprotocols that accomplish these aims make different trade-offs, so\nthere's no single multisignature protocol to recommend in all cases.\nInstead, we'll note three from the MuSig family of protocols:\n\nMuSig::\n  Also called _MuSig1_, this protocol(((\"MuSig protocol\"))) requires three rounds of\n  communication during the signing process, making it similar to the\n  process we just described.  MuSig1's greatest advantage is its\n  simplicity.\n\nMuSig2::\n  This only (((\"MuSig2 protocol\")))requires two rounds of communication and can sometimes allow\n  one of the rounds to be combined with key exchange.  This can\n  significantly speed up signing for certain protocols, such as how\n  scriptless multisignatures are planned to be used in the LN.  MuSig2 is specified in BIP327 (the only scriptless\n  multisignature protocol that has a BIP as of this writing).\n\nMuSig-DN::\n  DN stands (((\"MuSig-DN protocol\")))(((\"repeated session attacks\")))for Deterministic Nonce, which eliminates as a concern a\n  problem known as the _repeated session attack_.  It can't be combined\n  with key exchange and it's significantly more complex to implement\n  than MuSig or MuSig2.\n\nFor most applications, MuSig2 is the best multisignature protocol\navailable at the time(((\"digital signatures\", \"schnorr signature algorithm\", \"scriptless multisignatures\", startref=\"digital-sigs-schnorr-multisig\")))(((\"schnorr signature algorithm\", \"scriptless multisignatures\", startref=\"schnorr-multisig\")))(((\"scriptless multisignatures\", \"in schnorr signature algorithm\", secondary-sortas=\"schnorr\", startref=\"scriptless-multi-schnorr\")))(((\"multisignature scripts\", \"in schnorr signature algorithm\", secondary-sortas=\"schnorr\", startref=\"multi-script-schnorr\"))) of writing.\n\n[[schnorr_threshold_signatures]]\n==== Schnorr-based Scriptless Threshold Signatures\n\nScriptless (((\"digital signatures\", \"schnorr signature algorithm\", \"scriptless threshold signatures\", id=\"digital-sigs-schnorr-threshold\")))(((\"schnorr signature algorithm\", \"scriptless threshold signatures\", id=\"schnorr-threshold\")))(((\"scriptless threshold signatures\", id=\"scriptless-threshold-schnorr\")))(((\"threshold signatures\", \"in schnorr signature algorithm\", secondary-sortas=\"schnorr\", id=\"threshold-schnorr\")))multisignature protocols only work for _k_-of-_k_ signing.\nEveryone with a partial public key that becomes part of the aggregated\npublic key must contribute a partial signature and partial nonce to the\nfinal signature.  Sometimes, though, the participants want to allow a\nsubset of them to sign, such as _t_-of-_k_ where a threshold (_t_) number of participants can sign for\na key constructed by _k_ participants.  That type of signature is called a\n_threshold signature_.\n\nWe saw script-based threshold signatures in\n<<multisig>>.  But just as\nscriptless multisignatures save space and increase privacy compared to\nscripted multisignatures, _scriptless threshold signatures_ save space and\nincrease privacy compared to _scripted threshold signatures_.  To anyone\nnot involved in the signing, a _scriptless threshold signature_ looks\nlike any other signature that could've been created by a single-sig\nuser or through a scriptless multisignature protocol.\n\nVarious methods are known for generating scriptless threshold\nsignatures, with the simplest being a slight modification of how we\ncreated scriptless multisignatures previously.  This protocol also\ndepends on verifiable secret sharing (which itself depends on secure\nsecret sharing).\n\nBasic secret sharing can work through simple splitting.  Alice has a\nsecret number that she splits into three equal-length parts and shares\nwith Bob, Carol, and Dan.  Those three can combine the partial numbers\nthey received (called _shares_) in the correct order to reconstruct\nAlice's secret.  A more sophisticated scheme would involve Alice adding\non some additional information to each share, called a correction code,\nthat allows any two of them to recover the number.  This scheme is not\nsecure because each share gives its holder partial knowledge of Alice's\nsecret, making it easier for the participant to guess Alice's secret\nthan a nonparticipant who didn't have a share.\n\nA secure secret sharing scheme prevents participants from learning\nanything about the secret unless they combine the minimum threshold\nnumber of shares.  For example, Alice can choose a threshold of\n2 if she wants any two of Bob, Carol, and Dan to be able to\nreconstruct her secret.  The best known secure secret sharing algorithm\nis _Shamir's Secret Sharing Scheme_, commonly abbreviated SSSS and named\nafter its discoverer, one of the same discoverers of the Fiat-Shamir\ntransform we saw in <<schnorr_signatures>>.\n\nIn some cryptographic protocols, such as the scriptless threshold signature\nschemes we're working toward, it's critical for Bob, Carol, and Dan to\nknow that Alice followed her side of the protocol correctly.  They need to\nknow that the shares she creates all derive from the same secret, that\nshe used the threshold value she claims, and that she gave each one of\nthem a different share.  A protocol that can accomplish all of that,\nand still be a secure secret sharing scheme, is a _verifiable secret\nsharing scheme_.\n\nTo see how multisignatures and verifiable secret sharing work for\nAlice, Bob, and Carol, imagine they each wish to receive funds that can\nbe spent by any two of them.  They collaborate as described in\n<<schnorr_multisignatures>> to produce a regular multisignature public\nkey to accept the funds (k-of-k).  Then each participant derives two\nsecret shares from their private key--one for each of two the other\nparticipants. The shares allow any two of them to reconstruct the\noriginating partial private key for the multisignature. Each participant\ndistributes one of their secret shares to the other two participants,\nresulting in each participant storing their own partial private key and\none share for every other participant. Subsequently, each participant\nverifies the authenticity and uniqueness of the shares they received\ncompared to the shares given to the other participants.\n\nLater on, when (for example) Alice and Bob want to generate a scriptless\nthreshold signature without Carol's involvement, they exchange the two\nshares they possess for Carol. This enables them to reconstruct Carol's\npartial private key.  Alice and Bob also have their private keys,\nallowing them to create a scriptless multisignature with all three\nnecessary keys.\n\nIn other words, the scriptless threshold signature scheme just described\nis the same as a scriptless multisignature scheme except that\na threshold number of participants have the ability to reconstruct the\npartial private keys of any other participants who are unable or\nunwilling to sign.\n\nThis does point to a few things to be aware about when considering a\nscriptless threshold signature protocol:\n\nNo accountability::\nBecause Alice and Bob reconstruct Carol's partial\nprivate key, there can be no fundamental difference between a scriptless\nmultisignature produced by a process that involved Carol and one that\ndidn't.  Even if Alice, Bob, or Carol claim that they didn't sign,\nthere's no guaranteed way for them to prove that they didn't\nhelp produce the signature.  If it's important to know which members of\nthe group signed, you will need to use a script.\n\nManipulation attacks::\nImagine that Bob tells Alice that Carol is\nunavailable, so they work together to reconstruct Carol's partial\nprivate key.  Then Bob tells Carol that Alice is unavailable, so they\nwork together to reconstruct Alice's partial private key.  Now Bob has\nhis own partial private key plus the keys of Alice and Carol, allowing\nhim to spend the funds himself without their involvement.  This attack can\nbe addressed if all of the participants agree to only communicate using a\nscheme that allows any one of them to see all of the other's messages\n(e.g., if Bob tells Alice that Carol is unavailable, Carol is able to see\nthat message before she begins working with Bob).  Other solutions,\npossibly more robust solutions, to this problem were being researched at\nthe time of writing.\n\nNo scriptless threshold signature protocol has been proposed as a BIP\nyet, although significant research into the subject has been performed\nby multiple Bitcoin contributors and we expect peer-reviewed solutions\nwill become available after the publication of this(((\"digital signatures\", \"schnorr signature algorithm\", startref=\"digital-sigs-schnorr\")))(((\"schnorr signature algorithm\", startref=\"schnorr\")))(((\"digital signatures\", \"schnorr signature algorithm\", \"scriptless threshold signatures\", startref=\"digital-sigs-schnorr-threshold\")))(((\"schnorr signature algorithm\", \"scriptless threshold signatures\", startref=\"schnorr-threshold\")))(((\"scriptless threshold signatures\", startref=\"scriptless-threshold-schnorr\")))(((\"threshold signatures\", \"in schnorr signature algorithm\", secondary-sortas=\"schnorr\", startref=\"threshold-schnorr\"))) book.\n\n[[ecdsa_signatures]]\n=== ECDSA Signatures\n\nUnfortunately (((\"digital signatures\", \"ECDSA\", id=\"digital-signature-ecdsa\")))(((\"ECDSA (Elliptic Curve Digital Signature Algorithm)\", id=\"ecdsa\")))for the future development of Bitcoin and many other\napplications, Claus Schnorr patented the algorithm he discovered and\nprevented its use in open standards and open source software for almost\ntwo decades.  Cryptographers in the early 1990s who were blocked from\nusing the schnorr signature scheme developed an alternative construction\ncalled the _Digital Signature Algorithm_ (DSA), with a version adapted\nto elliptic curves called ECDSA.\n\nThe ECDSA scheme and standardized parameters for suggested curves it could be used\nwith were widely implemented in cryptographic libraries by the time\ndevelopment on Bitcoin began in 2007.  This was almost certainly the\nreason why ECDSA was the only digital signature protocol that Bitcoin\nsupported from its first release version until the activation of the\ntaproot soft fork in 2021.  ECDSA remains supported today for all\nnon-taproot transactions.  Some of the differences compared to schnorr\nsignatures include:\n\nMore complex::\n  As we'll see, ECDSA requires more operations to create or verify a\n  signature than the schnorr signature protocol.  It's not significantly\n  more complex from an implementation standpoint, but that extra\n  complexity makes ECDSA less flexible, less performant, and harder to\n  prove secure.\n\nLess provable security::\n  The interactive schnorr signature identification protocol depends only\n  on the strength of the elliptic curve Discrete Logarithm Problem\n  (ECDLP).  The non-interactive authentication protocol used in Bitcoin\n  also relies on the random oracle model (ROM).  However, ECDSA's extra\n  complexity has prevented a complete proof of its security being\n  published (to the best of our knowledge).  We are not experts in\n  proving cryptographic algorithms, but it seems unlikely after 30 years\n  that ECDSA will be proven to only require the same two assumptions as\n  schnorr.\n\nNonlinear::\n  ECDSA signatures cannot be easily combined to create scriptless\n  multisignatures or used in related advanced applications, such as\n  multiparty signature adaptors.  There are workarounds for this\n  problem, but they involve additional extra complexity that\n  significantly slows down operations and which, in some cases, has\n  resulted in software accidentally leaking private keys.\n\n==== ECDSA Algorithm\n\nLet's look at the math of ECDSA.\nSignatures are created by a mathematical function _F_~_sig_~\nthat produces a signature composed of two values.  In ECDSA, those two\nvalues are _R_ and _s_.\n\nThe signature\nalgorithm first generates a private nonce (_k_) and derives from it a public\nnonce (_K_).  The _R_ value of the digital signature is then the _x_\ncoordinate of the nonce _K_.\n\nFrom there, the algorithm calculates the _s_ value of the signature.  Like we did with schnorr signatures, operations involving\nintegers are modulus p:\n\n[latexmath]\n++++\n\\begin{equation}\ns = k^{-1} (Hash(m) + x \\times R)\n\\end{equation}\n++++\n\n\nwhere:\n\n* _k_ is the private nonce\n* _R_ is the _x_ coordinate of the public nonce\n* _x_ is the Alice's private key\n* _m_ is the message (transaction data)\n\nVerification is the inverse of the signature generation function, using\nthe _R_, _s_ values and the public key to calculate a value _K_, which\nis a point on the elliptic curve (the public nonce used in\nsignature creation):\n\n[latexmath]\n++++\n\\begin{equation}\nK = s^{-1} \\times Hash(m) \\times G + s^{-1} \\times R \\times X\n\\end{equation}\n++++\n\nwhere:\n\n- _R_ and _s_ are the signature values\n- _X_ is Alice's public key\n- _m_ is the message (the transaction data that was signed)\n- _G_ is the elliptic curve generator point\n\nIf the _x_ coordinate of the calculated point _K_ is equal to _R_, then\nthe verifier can conclude that the signature is valid.\n\n[TIP]\n====\nECDSA is necessarily a fairly complicated piece of math; a full\nexplanation is beyond the scope of this book. A number of great guides\nonline take you through it step by step: search for \"ECDSA explained.\"\n====\n\n[[serialization_of_signatures_der]]\n==== Serialization of ECDSA Signatures (DER)\n\nLet's (((\"serialization\", \"ECDSA signatures\")))look at\nthe following DER-encoded signature:\n\n----\n3045022100884d142d86652a3f47ba4746ec719bbfbd040a570b1deccbb6498c75c4ae24cb02204\nb9f039ff08df09cbe9f6addac960298cad530a863ea8f53982c09db8f6e381301\n----\n\nThat signature is a serialized byte stream of the _R_ and _s_ values\nproduced by the signer to prove control of the private key authorized\nto spend an output. The serialization format consists of nine elements\nas follows:\n\n* +0x30+, indicating the start of a DER sequence\n* +0x45+, the length of the sequence (69 bytes)\n  * +0x02+, an integer value follows\n  * +0x21+, the length of the integer (33 bytes)\n  * +R+, ++00884d142d86652a3f47ba4746ec719bbfbd040a570b1deccbb6498c75c4ae24cb++\n  * +0x02+, another integer follows\n  * +0x20+, the length of the integer (32 bytes)\n  * +S+, ++4b9f039ff08df09cbe9f6addac960298cad530a863ea8f53982c09db8f6e3813++\n* A suffix (+0x01+) indicating the type of hash(((\"digital signatures\", \"ECDSA\", startref=\"digital-signature-ecdsa\")))(((\"ECDSA (Elliptic Curve Digital Signature Algorithm)\", startref=\"ecdsa\"))) used (+SIGHASH_ALL+)\n\n[[nonce_warning]]\n=== The Importance of Randomness in Signatures\n\nAs we(((\"digital signatures\", \"randomness, importance of\", id=\"digital-signature-random\")))(((\"randomness, importance in digital signatures\", id=\"random-digital-signature\"))) saw in <<schnorr_signatures>> and <<ecdsa_signatures>>,\nthe signature generation algorithm uses a random number _k_ as the basis\nfor a private/public nonce pair. The value of _k_ is not\nimportant, _as long as it is random_. If signatures from the same\nprivate key use the private nonce _k_ with different messages\n(transactions), then the\nsigning _private key_ can be calculated by anyone. Reuse of the same\nvalue for _k_ in a signature algorithm leads to exposure of the private\nkey!\n\n[WARNING]\n====\nIf the same value _k_\nis used in the signing algorithm on two different transactions, the\nprivate key can be calculated and exposed to the world!\n====\n\nThis is not just a theoretical possibility. We have seen this issue lead\nto exposure of private keys in a few different implementations of\ntransaction-signing algorithms in Bitcoin. People have had funds stolen\nbecause of inadvertent reuse of a _k_ value. The most common reason for\nreuse of a _k_ value is an improperly initialized random-number\ngenerator.\n\nTo avoid this\nvulnerability, the industry best practice is to not generate _k_ with a\nrandom-number generator seeded only with entropy, but instead to use a\nprocess seeded in part with the transaction data itself plus the\nprivate key being used to sign.\nThis ensures that each transaction produces a different _k_. The\nindustry-standard algorithm for deterministic initialization of _k_ for\nECDSA is defined in https://oreil.ly/yuabl[RFC6979], published by\nthe Internet Engineering Task Force.  For schnorr signatures, BIP340\nrecommends a default signing algorithm.\n\nBIP340 and RFC6979 can generate _k_ entirely deterministically, meaning the same\ntransaction data will always produce the same _k_.  Many wallets do this\nbecause it makes it easy to write tests to verify their safety-critical\nsigning code is producing _k_ values correctly.  BIP340 and RFC6979 both also allow\nincluding additional data in the calculation.  If that data is entropy,\nthen a different _k_ will be produced even if the exact same transaction\ndata is signed.  This can increase protection against sidechannel and\nfault-injection attacks.\n\nIf you are implementing an algorithm to sign transactions in Bitcoin,\nyou _must_ use BIP340, RFC6979, or a similar algorithm to\nensure you generate a different _k_ for each (((\"digital signatures\", \"randomness, importance of\", startref=\"digital-signature-random\")))(((\"randomness, importance in digital signatures\", startref=\"random-digital-signature\")))transaction.\n\n=== Segregated Witness's New Signing Algorithm\n\nSignatures in(((\"digital signatures\", \"segregated witness and\")))(((\"segregated witness (segwit)\", \"digital signatures and\")))(((\"commitment hash\"))) Bitcoin transactions are applied on a _commitment hash_,\nwhich is calculated from the transaction data, locking specific parts of\nthe data indicating the signer's commitment to those values. For\nexample, in a simple +SIGHASH_ALL+ type signature, the commitment hash\nincludes all inputs and outputs.\n\nUnfortunately, the way the legacy commitment hashes were calculated introduced the\npossibility that a node verifying a signature can be forced to perform\na significant number of hash computations. Specifically, the hash\noperations increase roughly quadratically with respect to the number of\ninputs in the transaction. An attacker could therefore create a\ntransaction with a very large number of signature operations, causing\nthe entire Bitcoin network to have to perform hundreds or thousands of\nhash operations to verify the transaction.\n\nSegwit represented an opportunity to address this problem by changing\nthe way the commitment hash is calculated. For segwit version 0 witness\nprograms, signature verification occurs using an improved commitment\nhash algorithm as specified in BIP143.\n\nThe new algorithm allows the number of\nhash operations to increase by a much more gradual O(n) to the number of\nsignature operations, reducing the opportunity to create\ndenial-of-service attacks with overly complex transactions.\n\nIn this chapter, we learned about schnorr and ECDSA signatures for\nBitcoin.  This explains how full nodes authenticate transactions to\nensure that only someone controlling the key to which bitcoins were\nreceived can spend those bitcoins.  We also examined several advanced\napplications of signatures, such as scriptless multisignatures and\nscriptless threshold signatures that can be used to improve the\nefficiency and privacy of Bitcoin.  In the past few chapters, we've\nlearned how to create transactions, how to secure them with\nauthorization and authentication, and how to sign them.  We will next\nlearn how to encourage miners to confirm them by adding fees to the\ntransactions we create.\n\n//FIXME: mention segwit v0 and v1 coverage of values to aid hardware\n//wallets\n"
        },
        {
          "name": "ch09_fees.adoc",
          "type": "blob",
          "size": 37.8857421875,
          "content": "[[tx_fees]]\n== Transaction Fees\n\n++++\n<p class=\"fix_tracking\">\nThe digital signature we saw Alice create in <a data-type=\"xref\" href=\"#c_signatures\">#c_signatures</a> only\nproves that she knows her private key and that she committed to a\ntransaction that pays Bob.  She can create another signature that\ninstead commits to a transaction paying Carol—a transaction that spends\nthe same output (bitcoins) that she used to pay Bob.  Those two\ntransactions are now <em>conflicting transactions</em> because only one\ntransaction spending a particular output can be included in the valid\nblockchain with the most proof of work—the blockchain that full nodes\nuse to determine which keys control which bitcoins.\n</p>\n++++\n\nTo(((\"conflicting transactions\")))(((\"transactions\", \"conflicts in\"))) protect himself against conflicting transactions, it would be wise\nfor Bob to wait until the transaction from Alice is included in the\nblockchain to a sufficient depth before he considers the money he\nreceived as his to spend (see <<confirmations>>).\nFor Alice's transaction to be included in the\nblockchain, it must be included in a _block_ of transactions.  There are\na limited number of(((\"blocks\", \"transactions in\")))(((\"transactions\", \"in blocks\", secondary-sortas=\"blocks\"))) blocks produced in a given amount of time, and each\nblock only has a limited amount of space.  Only the miner who creates\nthat block gets to choose which transactions to include.  Miners may\nselect transactions by any criteria they want, including refusing to\ninclude any transactions at all.\n\n++++\n<div data-type=\"note\">\n<p class=\"fix_tracking\"> When we say \"transactions\" in this chapter, we refer to every\ntransaction in a block except for the first transaction.  The first\ntransaction in a block is a <em>coinbase transaction</em>, described in\n<a data-type=\"xref\" href=\"#coinbase_transactions\">#coinbase_transactions</a>, which allows the miner of the block to\ncollect their reward for producing the block.  Unlike other\ntransactions, a coinbase transaction doesn't spend the output of a\nprevious transaction and is also an exception to several other rules\nthat apply to other transactions.  Coinbase transactions don't pay\ntransaction fees, don't need to be fee bumped, aren't subject to\ntransaction pinning, and are largely uninteresting to the following\ndiscussion about fees—so we're going to ignore them in this chapter.\n</p>\n</div>\n++++\n\n\nThe criterion that almost all miners use to select which transactions to\ninclude in their blocks is to maximize their revenue.  Bitcoin was\nspecifically designed to accommodate this by providing a mechanism that\nallows a transaction to give money to the miner who includes that\ntransaction in a block.  We call that mechanism _transaction fees_,\nalthough it's not a fee in the usual sense of that word.  It's not an\namount set by the protocol or by any particular miner--it's much more\nlike a bid in an auction.  The good being purchased is the portion of\nlimited space in a block that a transaction will consume.  Miners choose\nthe set of transactions whose bids will allow them to earn the greatest\nrevenue.\n\nIn this chapter, we'll explore various aspects of those\nbids--transaction fees--and how they influence the creation and\nmanagement of Bitcoin transactions.\n\n=== Who Pays the Transaction Fee?\n\nMost (((\"transaction fees\", \"responsibility for\", id=\"fees-responsibility\")))(((\"payments\", \"transaction fees\", see=\"transaction fees\")))(((\"fees\", see=\"transaction fees\")))payment systems involve some sort of fee for transacting, but\noften this fee is hidden from typical buyers.  For example, a merchant\nmay advertise the same item for the same price whether you pay with cash\nor a credit card even though their payment processor may charge them\na higher fee for credit transactions than their bank charges them for\ncash deposits.\n\nIn Bitcoin, every spend of bitcoins must be authenticated (typically\nwith a signature), so it's not possible for a transaction to pay a fee\nwithout the permission of the spender.  It is possible for the receiver\nof a transaction to pay a fee in a different transaction--and we'll see\nthat in use later--but if we want a single transaction to pay its own\nfee, that fee needs to be something agreed upon by the spender.  It\ncan't be hidden.\n\nBitcoin transactions are designed so that it doesn't take any extra\nspace in a transaction for a spender to commit to the fee it pays.  That\nmeans that, even though it's possible to pay the fee in a different\ntransaction, it's most efficient (and thus cheapest) to pay the fee in a\nsingle transaction.\n\nIn Bitcoin,\nthe fee is a bid and the amount paid contributes to determining how long\nit will take the transaction to confirm.  Both spenders and receivers of\na payment typically have an interest in having it confirming quickly, so\nnormally allowing only spenders to choose fees can sometimes be a\nproblem; we'll look at a solution to that problem in <<cpfp>>.  However,\nin many common payment flows, the parties with the highest desire to see a\ntransaction confirm quickly--that is, the parties who would be the most\nwilling to pay higher fees--are the spenders.\n\nFor those reasons, both technical and practical, it is customary in\nBitcoin for spenders to pay transaction fees.  There are exceptions,\nsuch as for merchants that accept unconfirmed transactions and in\nprotocols that don't immediately broadcast [.keep-together]#transactions# after they are\nsigned (preventing the spender from being able to choose an appropriate\nfee for the current market).  We'll explore those exceptions(((\"transaction fees\", \"responsibility for\", startref=\"fees-responsibility\"))) later.\n\n=== Fees and Fee Rates\n\nEach (((\"transaction fees\", \"fee rates\", id=\"fees-rates\")))(((\"fee rates\", id=\"fee-rate\")))transaction only pays a single fee--it doesn't matter how large the\ntransaction is.  However, the larger transactions become, the fewer of\nthem a miner will be able to fit in a block.  For that reason, miners\nevaluate transactions the same way you might comparison shop between\nseveral equivalent items at the market: they divide the price by the\nquantity.\n\nWhereas you might divide the cost of several different bags of rice by\neach bag's weight to find the lowest price per weight (best deal), miners\ndivide the fee of a transaction by its size (also called its weight) to\nfind the highest fee per weight (most revenue).  In Bitcoin, we use the\nterm _fee rate_ for a transaction's size divided by weight.  Due to\nchanges in Bitcoin over the years, fee rate can be expressed in\ndifferent units:\n\n- BTC/Bytes (a legacy unit rarely used anymore)\n- BTC/Kilobytes (a legacy unit rarely used anymore)\n- BTC/Vbytes (rarely used)\n- BTC/Kilo-vbyte (used mainly in Bitcoin Core)\n- Satoshi/Vbyte (most commonly used today)\n- Satoshi/Weight (also commonly used today)\n\nWe recommend either the sat/vbyte or sat/weight units for displaying\nfee rates.\n\n[WARNING]\n====\nBe careful (((\"absurd fees\")))(((\"excessive fees\")))(((\"transaction fees\", \"overpaying\")))(((\"overpaying transaction fees\")))accepting input for fee rates.  If a user copies and pastes a\nfee rate printed in one denominator into a field using a different\ndenominator, they could overpay fees by 1,000 times.  If they instead\nswitch the numerator, they could theoretically overpay by 100,000,000\ntimes.  Wallets should make it hard for the user to pay an excessive\nfee rate and may want to prompt the user to confirm any fee rate that was\nnot generated by the wallet itself using a trusted data source.\n\nAn excessive fee, also called an _absurd fee_, is any fee rate that's\nsignificantly higher than the amount that fee rate estimators currently\nexpect is necessary to get a transaction confirmed in the next block.\nNote that wallets should not entirely prevent users from choosing an\nexcessive fee rate--they should only make using such a fee rate hard to do\nby accident.  There are legitimate reasons for users to overpay fees on\nrare occasions.\n====\n\n=== Estimating Appropriate Fee Rates\n\nWe've (((\"estimating fee rates\", id=\"estimate-fee-rate\")))established that you can pay a lower fee rate if you're willing to\nwait longer for your transaction to be confirmed, with the exception\nthat paying too low of a fee rate could result in your transaction never\nconfirming.  Because fee rates are bids in an open auction for block\nspace, it's not possible to perfectly predict what fee rate you need to\npay to get your transaction confirmed by a certain time.  However, we\ncan generate a rough estimate based on what fee rates other transactions\nhave paid in the recent past.\n\nA full node can record three pieces of information about each\ntransactions it sees: the time (block height) when it first received\nthat transaction, the block height when that transaction was confirmed,\nand the fee rate paid by that transaction.  By grouping together\ntransactions that arrived at similar heights, were confirmed at similar\nheights, and which paid similar fees, we can calculate how many blocks it\ntook to confirm transactions paying a certain fee rate.  We can then\nassume that a transaction paying a similar fee rate now will take a\nsimilar number of blocks to confirm.  Bitcoin Core includes a fee rate\nestimator that uses these principles, which can be called using the\n`estimatesmartfee` RPC with a parameter specifying how many blocks\nyou're willing to wait before the transaction is highly likely to\nconfirm (for example, 144 blocks is about 1 day):\n\n----\n$ bitcoin-cli -named estimatesmartfee conf_target=144\n{\n  \"feerate\": 0.00006570,\n  \"blocks\": 144\n}\n----\n\nMany web-based services also provide fee estimation as an API.  For a\ncurrent list, see https://oreil.ly/TB6IN.\n\nAs mentioned, fee rate estimation can never be perfect.  One common\nproblem is that the fundamental demand might change, adjusting the\nequilibrium and either increasing prices (fees) to new heights or\ndecreasing them toward the minimum.\nIf fee rates go down, then a transaction\nthat previously paid a normal fee rate might now be paying a high fee\nrate and it will be confirmed earlier than expected.  There's no way to\nlower the fee rate on a transaction you've already sent, so you're stuck\npaying a higher fee rate.  But, when fee rates go up, there's a need for\nmethods to be able to increase the fee rates on those transactions,\nwhich is called _fee bumping_.  There are two commonly used types of fee\nbumping in Bitcoin, replace by fee (RBF) and child pays for (((\"fee rates\", startref=\"fee-rate\")))(((\"transaction fees\", \"fee rates\", startref=\"fees-rates\")))parent\n(CPFP).\n\n[[rbf]]\n=== Replace By Fee (RBF) Fee Bumping\n\nTo(((\"transaction fees\", \"fee bumping\", \"RBF (replace by fee)\", id=\"transaction-fees-bump-rbf\")))(((\"fee bumping\", \"RBF (replace by fee)\", id=\"fee-bump-rbf\")))(((\"RBF (replace by fee) fee bumping\", id=\"rbf-ch9\"))) increase the fee of a transaction using RBF fee bumping, you create\na conflicting version of the transaction that pays a higher fee.  Two\nor more transactions are considered(((\"conflicting transactions\")))(((\"transactions\", \"conflicts in\"))) to be _conflicting transactions_ if\nonly one of them can be included in a valid blockchain, forcing a miner\nto choose only one of them.  Conflicts occur when two or more transactions\neach try to spend one of the same UTXOs, i.e., they each include an input\nthat has the same outpoint (reference to the output of a previous\ntransaction).\n\nTo prevent someone from consuming large amounts of bandwidth by creating\nan unlimited number of conflicting transactions and sending them through\nthe network of relaying full nodes, Bitcoin Core and other full nodes\nthat support transaction replacement require each replacement\ntransaction to pay a higher fee rate than the transaction being\nreplaced.  Bitcoin Core also currently requires the replacement\ntransaction to pay a higher total fee than the original transaction, but\nthis requirement has undesired side effects and developers have been\nlooking for ways to remove it at the time of writing.\n\nBitcoin Core(((\"Bitcoin Core\", \"RBF variants\", id=\"bitcoin-core-rbf\"))) currently supports two variations of RBF:\n\nOpt-in RBF::\n  An unconfirmed transaction can signal to miners and full nodes that\n  the creator of the transaction wants to allow it to be replaced by a\n  higher fee rate version.  This signal and the rules for using it\n  are specified in BIP125.  As of this writing, this has been enabled by\n  default in Bitcoin Core for several years.\n\nFull RBF::\n  Any unconfirmed transaction can be replaced by a higher fee rate\n  version.  As of this writing, this can be optionally enabled in\n  Bitcoin Core (but it is disabled by default).\n\n.Why Are There Two Variants of RBF?\n****\nThe reason for the two different versions of RBF is that full RBF has\nbeen controversial.  Early versions of Bitcoin allowed transaction\nreplacement, but this behavior was disabled for several releases.  During\nthat time, a miner or full node using the software now called Bitcoin\nCore would not replace the first version of an unconfirmed transaction\nthey received with any different version.  Some merchants came to expect\nthis behavior: they assumed that any valid unconfirmed transaction that\npaid an appropriate fee rate would eventually become a confirmed\ntransaction, so they provided their goods or services shortly after\nreceiving such an unconfirmed transaction.\n\nHowever, there's no way for the Bitcoin protocol to guarantee that any\nunconfirmed transaction will eventually be confirmed.  As mentioned\nearlier in this chapter, every miner gets to choose for themselves which\ntransactions they will try to confirm--including which versions of those\ntransactions.  Bitcoin Core is open source software, so anyone with a\ncopy of its source code can add (or remove) transaction replacement.\nEven if Bitcoin Core wasn't open source, Bitcoin is an open protocol\nthat can be reimplemented from scratch by a sufficiently competent\nprogrammer, allowing the reimplementor to include or not include\ntransaction replacement.\n\nTransaction replacement breaks the assumption of some merchants that\nevery reasonable unconfirmed transaction will eventually be confirmed.\nAn alternative version of a transaction can pay the same outputs as the\noriginal, but it isn't required to pay any of those outputs.  If the\nfirst version of an unconfirmed transaction pays a merchant, the second\nversion might not pay them.  If the merchant provided goods or services\nbased on the first version, but the second version gets confirmed, then\nthe merchant will not receive payment for its costs.\n\nSome merchants, and people supporting them, requested that transaction\nreplacement not be reenabled in Bitcoin Core.  Other people pointed out\nthat transaction replacement provides benefits, including the ability to\nfee bump transactions that initially paid too low of a fee rate.\n\nEventually, developers working on Bitcoin Core implemented a compromise:\ninstead of allowing every unconfirmed transaction to be replaced (full\nRBF), they only programmed Bitcoin Core to allow replacement of\ntransactions that signaled they wanted to allow replacement (opt-in RBF).\nMerchants can check the transactions they receive for the opt-in\nsignal and treat those transactions differently than those without the\nsignal.\n\nThis doesn't change the fundamental concern: anyone can still alter\ntheir copy of Bitcoin Core, or create a reimplementation, to allow full\nRBF--and some developers even did this, but seemingly few people used\ntheir software.\n\nAfter several years, developers working on Bitcoin Core changed the\ncompromise slightly.  In addition to keeping opt-in RBF by default, they\nadded an option that allows users to enable full RBF.  If enough mining\nhash rate and relaying full nodes enable this option, it will be\npossible for any unconfirmed transaction to eventually be replaced by a\nversion paying a higher fee rate.  As of this writing, it's not clear\nwhether or not that has happened (((\"Bitcoin Core\", \"RBF variants\", startref=\"bitcoin-core-rbf\")))yet.\n****\n\nAs a user, if you plan to use RBF fee bumping, you will first need to\nchoose a wallet that supports it, such as one of the wallets listed as\nhaving \"Sending support\" on\nhttps://oreil.ly/IhMzx.\n\nAs a developer, if you plan to implement RBF fee bumping, you will first\nneed to decide whether to perform opt-in RBF or full RBF.  At the time\nof writing, opt-in RBF is the only method that's sure to work.  Even if\nfull RBF becomes reliable, there will likely be several years where\nreplacements of opt-in transactions get confirmed slightly faster than\nfull-RBF replacements.  If you choose opt-in RBF, your wallet will need\nto implement the signaling specified in BIP125, which is a simple\nmodification to any one of the sequence fields in a transaction (see\n<<sequence>>).  If you choose full RBF, you don't need to include any\nsignaling in your transactions.  Everything else related to RBF is the\nsame for both approaches.\n\nWhen you need to fee bump a transaction, you will simply create a new\ntransaction that spends at least one of the same UTXOs as the original\ntransaction you want to replace.  You will likely want to keep the\nsame outputs in the transaction that pay the receiver (or receivers).\nYou may pay the increased fee by reducing the value of your change\noutput or by adding additional inputs to the transaction.  Developers\nshould provide users with a fee-bumping interface that does all of this\nwork for them and simply asks them (or suggests to them) how much the\nfee rate should be increased.\n\n[WARNING]\n====\nBe very careful when creating more than one replacement of the same\ntransaction.  You must ensure than all versions of the transactions\nconflict with each other.  If they aren't all conflicts, it may be\npossible for multiple separate transactions to confirm, leading you to\noverpay the receivers.  For example:\n\n- Transaction version 0 includes input _A_.\n- Transaction version 1 includes inputs _A_ and _B_ (e.g., you had to add\n  input _B_ to pay the extra fees)\n- Transaction version 2 includes inputs _B_ and _C_ (e.g., you had to add input\n  _C_ to pay the extra fees but _C_ was large enough that you no longer\n  need input _A_).\n\nIn this scenario, any miner who saved version 0 of the transaction\nwill be able to confirm both it and version 2 of the transaction.  If\nboth versions pay the same receivers, they'll be paid twice (and the\nminer will receive transaction fees from two separate transactions).\n\nA simple method to avoid this problem is to ensure the replacement\ntransaction always includes all of the same inputs as the previous\nversion of the transaction.\n====\n\nThe advantage of RBF fee bumping over other types of fee bumping is that\nit can be very efficient at using block space.  Often, a replacement\ntransaction is the same size as the transaction it replaces.  Even when\nit's larger, it's often the same size as the transaction the user would\nhave created if they had paid the increased fee rate in the first place.\n\nThe fundamental disadvantage of RBF fee bumping is that it can normally\nonly be performed by the creator of the transaction--the person or\npeople who were required to provide signatures or other authentication\ndata for the transaction.  An exception to this is transactions that\nwere designed to allow additional inputs to be added by using sighash\nflags (see <<sighash_types>>), but that presents its own challenges.  In\ngeneral, if you're the receiver of an unconfirmed transaction and you\nwant to make it confirm faster (or at all), you can't use an RBF fee\nbump; you need some other method.\n\nThere are additional problems (((\"transaction fees\", \"fee bumping\", \"RBF (replace by fee)\", startref=\"transaction-fees-bump-rbf\")))(((\"fee bumping\", \"RBF (replace by fee)\", startref=\"fee-bump-rbf\")))(((\"RBF (replace by fee) fee bumping\", startref=\"rbf-ch9\")))with RBF that we'll explore in <<transaction_pinning>>.\n\n[[cpfp]]\n=== Child Pays for Parent (CPFP) Fee Bumping\n\nAnyone (((\"transaction fees\", \"fee bumping\", \"CPFP (child pays for parent)\", id=\"transaction-fees-bump-cpfp\")))(((\"fee bumping\", \"CPFP (child pays for parent)\", id=\"fee-bump-cpfp\")))(((\"CPFP (child pays for parent) fee bumping\", id=\"cpfp-ch9\")))who receives the output of an unconfirmed transaction can\nincentivize miners to confirm that transaction by spending that output.\nThe transaction you want to get confirmed is called the _parent\ntransaction_.  A transaction that spends an output of the parent\ntransaction is called a _child transaction_.\n\nAs we learned in <<outpoints>>, every input in a confirmed transaction\nmust reference the unspent output of a transaction that appears earlier\nin the blockchain (whether earlier in the same block or in a previous\nblock).  That means a miner who wants to confirm a child transaction\nmust also ensure that its parent transaction is confirmed.  If the\nparent transaction hasn't been confirmed yet but the child transaction\npays a high enough fee, the miner can consider whether it would be\nprofitable to confirm both of them in the same block.\n\nTo evaluate the profitability of mining both a parent and child\ntransaction, the miner looks at them as a _package of transactions_ with\nan aggregate size and aggregate fees, from which the fees can be divided\nby the size to calculate(((\"package fee rate\"))) a _package fee rate_.  The miner can then sort\nall of the individual transactions and transaction packages they know\nabout by fee rate and include the highest-revenue ones in the block\nthey're attempting to mine, up to the maximum size (weight) allowed to\nbe included in a block.  To find even more packages that might be\nprofitable to mine, the miner can evaluate packages across multiple\ngenerations (e.g., an unconfirmed parent transaction being combined with\nboth its child and grandchild).  This is (((\"ancestor fee rate mining\")))(((\"CPFP (child pays for parent) fee bumping\", \"ancestor fee rate mining\")))called _ancestor fee rate\nmining_.\n\nBitcoin Core has implemented ancestor fee rate mining for many years,\nand it's believed that almost all miners use it at the time of writing.\nThat means it's practical for wallets to use this feature to fee bump an\nincoming transaction by using a child transaction to pay for its parent\n(CPFP).\n\nCPFP has several advantages over RBF.  Anyone who receives an output\nfrom a transaction can use CPFP--that includes both the receivers of\npayments and the spender (if the spender included a change output).  It\nalso doesn't require replacing the original transaction, which makes it\nless disruptive to some merchants than RBF.\n\nThe primary disadvantage of CPFP compared to RBF is that CPFP typically\nuses more block space.  In RBF, a fee bump transaction is often the same\nsize as the transaction it replaces.  In CPFP, a fee bump adds a whole\nseparate transaction.  Using extra block space requires paying extra\nfees beyond the cost of the fee bump.\n\nThere are several challenges with CPFP, some of which we'll explore in\n<<transaction_pinning>>.  One other problem that we\nspecifically need to mention is the minimum relay fee rate problem,\nwhich is addressed by (((\"transaction fees\", \"fee bumping\", \"CPFP (child pays for parent)\", startref=\"transaction-fees-bump-cpfp\")))(((\"fee bumping\", \"CPFP (child pays for parent)\", startref=\"fee-bump-cpfp\")))(((\"CPFP (child pays for parent) fee bumping\", startref=\"cpfp-ch9\")))package relay.\n\n=== Package Relay\n\nEarly versions(((\"transaction fees\", \"package relay\", id=\"transaction-fee-package-relay\")))(((\"package relay\", id=\"package-relay\"))) of Bitcoin Core didn't place any limits on the number of\nunconfirmed transactions they stored for later relay and mining in their\nmempools (see <<mempool>>).  Of course, computers have physical limits, whether\nit's the memory (RAM) or disk space--it's not possible for a full node\nto store an unlimited number of unconfirmed transactions.  Later\nversions of Bitcoin Core limited the size of the mempool to hold about\none day's worth of transactions, storing only the transactions or packages\nwith the highest fee rate.\n\nThat works extremely well for most things, but it creates a dependency\nproblem.  In order to calculate the fee rate for a transaction package,\nwe need both the parent and descendant transactions--but if the parent\ntransaction doesn't pay a high enough fee rate, it won't be kept in a\nnode's mempool.  If a node receives a child transaction without having\naccess to its parent, it can't do anything with that transaction.\n\nThe solution to this problem is the ability to relay transactions as a\npackage, called _package relay_, allowing the receiving node to evaluate\nthe fee rate of the entire package before operating on any individual\ntransaction.  As of this writing, developers working on Bitcoin Core\nhave made significant progress on implementing package relay, and a\nlimited early version of it may be available by the time this book is\npublished.\n\nPackage relay is especially important for protocols based on\ntime-sensitive presigned transactions, such as Lightning Network (LN).  In\nnon-cooperative cases, some presigned transactions can't be fee bumped\nusing RBF, forcing them to depend on CPFP.  In those protocols, some\ntransactions may also be created long before they need to be broadcast,\nmaking it effectively impossible to estimate an appropriate fee rate.\nIf a presigned transaction pays a fee rate below the amount necessary to\nget into a node's mempool, there's no way to fee bump it with a child.\nIf that prevents the transaction from confirming in time, an honest user\nmight lose money.  Package relay is the solution for this critical\nproblem.\n\n[[transaction_pinning]]\n=== Transaction Pinning\n\n++++\n<p class=\"fix_tracking\">\nAlthough both RBF and CPFP fee bumping work in the basic cases we\ndescribed, there are rules related to both\nmethods that are designed to prevent denial-of-service attacks on miners\nand relaying full nodes.  An unfortunate side effect of those rules\nis that they can sometimes prevent someone from being able to use fee\nbumping.  Making it impossible or difficult to fee bump a transaction is\ncalled <em>transaction pinning</em>.</p>\n++++\n\nOne(((\"transaction fees\", \"fee bumping\", \"transaction pinning\", id=\"transaction-fee-bump-pin\")))(((\"fee bumping\", \"transaction pinning\", id=\"fee-bump-pin\")))(((\"transaction pinning\", id=\"transaction-pin\")))(((\"RBF (replace by fee) fee bumping\", \"transaction pinning\", id=\"rbf-pin\")))(((\"CPFP (child pays for parent) fee bumping\", \"transaction pinning\", id=\"cpfp-pin\"))) of the major denial of service concerns revolves around the effect of\ntransaction relationships.  Whenever the output of a transaction is\nspent, that transaction's identifier (txid) is referenced by the child\ntransaction.  However, when a transaction is replaced, the replacement\nhas a different txid.  If that replacement transaction gets confirmed,\nnone of its descendants can be included in the same blockchain.  It's\npossible to re-create and re-sign the descendant transactions, but that's\nnot guaranteed to happen.  This has related but divergent implications\nfor RBF and CPFP:\n\n- In the context of RBF, when Bitcoin Core accepts a replacement\n  transaction, it keeps things simple by forgetting about the original\n  transaction and all descendant transactions that depended on that\n  original.  To ensure that it's more profitable for miners to accept\n  replacements, Bitcoin Core only accepts a replacement transaction if it\n  pays more fees than all the transactions that will be forgotten.\n+\nThe downside of this approach is that Alice can create a small\ntransaction that pays Bob.  Bob can then use his output to create a\nlarge child transaction.  If Alice then wants to replace her original\ntransaction, she needs to pay a fee that's larger than what both she and\nBob originally paid.  For example, if Alice's original transaction was\nabout 100 vbytes and Bob's transaction was about 100,000 vbytes, and\nthey both used the same fee rate, Alice now needs to pay more than 1,000\ntimes as much as she originally paid in order to RBF fee bump her\ntransaction.\n\n- In the context of CPFP, any time the node considers including a\n  package in a block, it must remove the transactions in that package\n  from any other package it wants to consider for the same block.  For\n  example, if a child transaction pays for 25 ancestors, and each of\n  those ancestors has 25 other children, then including the package in\n  the block requires updating approximately 625 packages (25^2^).\n  Similarly, if a transaction with 25 descendants is removed from a\n  node's mempool (such as for being included in a block), and each of\n  those descendants has 25 other ancestors, another 625 packages need to\n  be updated.  Each time we double our parameter (e.g., from 25 to 50),\n  we quadruple the amount of work our node needs to perform.\n+\nAdditionally, a transaction and all of its descendants is not\n  useful to keep in a mempool long term if an alternative version of\n  that transaction is mined--none of those transactions can now be\n  confirmed unless there's a rare blockchain reorganization.  Bitcoin\n  Core will remove from its mempool every transaction that can no longer\n  be confirmed on the current blockchain.  At it's worst, that can\n  waste an enormous amount of your node's bandwidth and possibly be used\n  to prevent transactions from propagating correctly.\n+\nTo prevent these problems, and other related\n  problems, Bitcoin Core limits a parent transaction to having a maximum\n  of 25 ancestors or descendants in its mempool and limits the\n  total size of all those transactions to 100,000 vbytes.  The downside\n  of this approach is that users are prevented from creating CPFP fee\n  bumps if a transaction already has too many descendants (or if it and\n  its descendants are too large).\n\nTransaction pinning can happen by accident, but it also represents a\nserious vulnerability for multiparty time-sensitive protocols such as\nLN.  If your counterparty can prevent one of your\ntransactions from confirming by a deadline, they may be able to steal\nmoney from you.\n\nProtocol developers have been working on mitigating problems with\ntransaction pinning for several years.  One partial solution is\ndescribed in <<cpfp_carve_out>>.  Several other solutions have been\nproposed, and at least one solution is being actively (((\"transaction fees\", \"fee bumping\", \"transaction pinning\", startref=\"transaction-fee-bump-pin\")))(((\"fee bumping\", \"transaction pinning\", startref=\"fee-bump-pin\")))(((\"transaction pinning\", startref=\"transaction-pin\")))(((\"RBF (replace by fee) fee bumping\", \"transaction pinning\", startref=\"rbf-pin\")))(((\"CPFP (child pays for parent) fee bumping\", \"transaction pinning\", startref=\"cpfp-pin\")))(((\"transaction fees\", \"fee bumping\", \"CPFP carve outs\", id=\"transaction-fee-bump-carveout\")))(((\"fee bumping\", \"CPFP carve outs\", id=\"fee-bump-carveout\")))(((\"carve outs (CPFP)\", id=\"carveout\")))(((\"CPFP (child pays for parent) fee bumping\", \"carve outs\", id=\"cpfp-carveout\")))developed as of\nthis writing&mdash;https://oreil.ly/300dv[ephemeral anchors].\n\n[[cpfp_carve_out]]\n=== CPFP Carve Out and Anchor Outputs\n\n++++\n<p class=\"fix_tracking2\">\nIn 2018, developers working on LN had a problem.\nTheir protocol uses transactions that require signatures from two\ndifferent parties.  Neither party wants to trust the other, so they sign\ntransactions at a point in the protocol when trust isn't needed,\nallowing either of them to broadcast one of those transactions at a\nlater time when the other party may not want to (or be able to) fulfill\nits obligations.  The problem with this approach is that the\ntransactions might need to be broadcast at an unknown time, far in the future, beyond any\nreasonable ability to estimate an appropriate fee rate for the\ntransactions.</p>\n++++\n\nIn theory, the developers could have designed their transactions to\nallow fee bumping with either RBF (using special sighash flags) or CPFP,\nbut both of those protocols are vulnerable to transaction pinning.\nGiven that the involved transactions are time sensitive, allowing a\ncounterparty to use transaction pinning to delay confirmation of a\ntransaction can easily lead to a repeatable exploit that malicious\nparties could use to steal money from honest parties.\n\nLN developer Matt Corallo proposed a solution: give the rules for CPFP\nfee bumping a special exception, called _CPFP carve out_.  The normal\nrules for CPFP forbid the inclusion of an additional descendant if it\nwould cause a parent transaction to have 26 or more descendants or if it\nwould cause a parent and all of its descendants to exceed 100,000 vbytes\nin size.  Under the rules of CPFP carve out, a single additional\ntransaction up to 1,000 vbytes in size can be added to a package even if\nit would exceed the other limits as long as it is a direct child of an\nunconfirmed transaction with no unconfirmed ancestors.\n\n++++\n<p class=\"fix_tracking\">\nFor example, Bob and Mallory both co-sign a transaction with two\noutputs, one to each of them.  Mallory broadcasts that transaction and\nuses her output to attach either 25 child transactions or any smaller\nnumber of child transactions equaling 100,000 vbytes in size.  Without\ncarve-out, Bob would be unable to attach another child transaction to\nhis output for CPFP fee bumping.  With carve-out, he can spend one of\nthe two outputs in the transaction, the one that belongs to him, as long\nas his child transaction is less than 1,000 vbytes in size (which should\nbe more than enough space).</p>\n++++\n\nIt's not allowed to use CPFP carve-out more than once, so it only works\nfor two-party protocols.  There have been proposals to extend it to\nprotocols involving more participants, but there hasn't been much demand\nfor that and developers are focused on building more generic solutions\nto transaction pinning attacks.\n\nAs of this writing, most popular LN implementations use a transaction\ntemplate called _anchor outputs_, which is designed to be used (((\"anchor outputs (CPFP)\")))(((\"transaction fees\", \"fee bumping\", \"CPFP carve outs\", startref=\"transaction-fee-bump-carveout\")))(((\"fee bumping\", \"CPFP carve outs\", startref=\"fee-bump-carveout\")))(((\"carve outs (CPFP)\", startref=\"carveout\")))(((\"CPFP (child pays for parent) fee bumping\", \"carve outs\", startref=\"cpfp-carveout\")))with CPFP\ncarve out.\n\n=== Adding Fees to Transactions\n\nThe data(((\"transaction fees\", \"change outputs and\")))(((\"change output\", \"transaction fees and\")))(((\"outputs\", \"transaction fees and\")))(((\"inputs\", \"transaction fees and\"))) structure of transactions does not have a field for fees.\nInstead, fees are implied as the difference between the sum of inputs\nand the sum of outputs. Any excess amount that remains after all outputs\nhave been deducted from all inputs is the fee that is collected by the\nminers:\n\n[latexmath]\n++++\n\\begin{equation}\n{Fees = Sum(Inputs) - Sum(Outputs)}\n\\end{equation}\n++++\n\n\nThis is a somewhat confusing element of transactions and an important\npoint to understand because if you are constructing your own\ntransactions, you must ensure you do not inadvertently include a very\nlarge fee by underspending the inputs. That means that you must account\nfor all inputs, if necessary, by creating change, or you will end up\ngiving the miners a very big tip!\n\nFor example, if you spend a 20-bitcoin UTXO to make a 1-bitcoin\npayment, you must include a 19-bitcoin change output back to your\nwallet. Otherwise, the 19-bitcoin \"leftover\" will be counted as a\ntransaction fee and will be collected by the miner who mines your\ntransaction in a block. Although you will receive priority processing\nand make a miner very happy, this is probably not what you intended.\n\n[WARNING]\n====\nIf you forget to add a\nchange output in a manually constructed transaction, you will be paying\nthe change as a transaction fee. \"Keep the change!\" might not be what\nyou intended.\n====\n\n[[fee_sniping]]\n=== Timelock Defense Against Fee Sniping\n\nFee sniping (((\"transaction fees\", \"fee sniping\", id=\"transaction-fee-sniping\")))(((\"fee sniping\", id=\"fee-snipe\")))(((\"timelocks\", \"fee sniping and\", id=\"timelock-fee-snipe\")))(((\"lock time\", \"fee sniping and\", id=\"lock-time-fee-snipe\")))is a theoretical\nattack scenario where miners attempting to rewrite past blocks \"snipe\"\nhigher-fee transactions from future blocks to maximize their\n[.keep-together]#profitability.#\n\nFor example, let's say the highest block in existence is block\n#100,000. If instead of attempting to mine block #100,001 to extend the\nchain, some miners attempt to remine  #100,000. These miners can choose\nto include any valid transaction (that hasn't been mined yet) in their\ncandidate block  #100,000. They don't have to remine the block with the\nsame transactions. In fact, they have the incentive to select the most\nprofitable (highest fee per kB) transactions to include in their block.\nThey can include any transactions that were in the \"old\" block\n#100,000, as well as any transactions from the current mempool.\nEssentially they have the option to pull transactions from the \"present\"\ninto the rewritten \"past\" when they re-create block  #100,000.\n\nToday, this attack is not very lucrative because the block subsidy is much\nhigher than total fees per block. But at some point in the future,\ntransaction fees will be the majority of the reward (or even the\nentirety of the reward). At that time, this scenario becomes inevitable.\n\nSeveral wallets discourage fee sniping by creating transactions with a\nlock time that limits those transactions to being included in the next\nblock or any later block. In our\nscenario, our wallet would set lock time to 100,001 on any\ntransaction it created. Under normal circumstances, this lock time has\nno effect&#x2014;the transactions could only be included in block\n#100,001 anyway; it's the next block.\n\nBut under a reorganization attack, the miners would not be able to pull\nhigh-fee transactions from the mempool because all those transactions\nwould be timelocked to block #100,001. They can only remine  #100,000\nwith whatever transactions were valid at that time, essentially gaining\nno new fees.\n\nThis does not entirely prevent fee sniping, but it does make it less\nprofitable in some cases and can help preserve the stability of the\nBitcoin network as the block subsidy declines.  We recommend all wallets\nimplement anti-fee sniping when it doesn't interfere with the wallet's\nother uses of the lock time field.\n\nAs Bitcoin continues to mature, and as the subsidy continues to decline,\nfees become more and more important to Bitcoin users, both in their\nday-to-day use for getting transactions confirmed quickly and in\nproviding an incentive for miners to continue securing Bitcoin\ntransactions with new proof of work.\n"
        },
        {
          "name": "ch10_network.adoc",
          "type": "blob",
          "size": 65.7763671875,
          "content": "[[bitcoin_network_ch08]]\n== The Bitcoin Network\n\nBitcoin is (((\"Bitcoin\", \"as peer-to-peer network\", secondary-sortas=\"peer-to-peer network\", seealso=\"Bitcoin network\")))(((\"peer-to-peer networks, Bitcoin as\", seealso=\"Bitcoin network\")))(((\"networks (Bitcoin)\", see=\"Bitcoin network\")))(((\"Bitcoin network\")))structured as a peer-to-peer network architecture on\ntop of the internet. The term peer-to-peer, or P2P, means that the\nfull nodes that participate in the network are peers to each other, that\nthey can all perform the same functions, and that there are no \"special\" nodes.\nThe network nodes\ninterconnect in a mesh network with a \"flat\" topology. There is no\nserver, no centralized service, and no hierarchy within the network.\nNodes in a P2P network both provide and consume services at the same\ntime. P2P\nnetworks are inherently resilient, decentralized, and open. A preeminent\nexample of a P2P network architecture was the early internet itself,\nwhere nodes on the IP network were equal. Today's internet architecture\nis more hierarchical, but the Internet Protocol still retains its\nflat-topology essence. Beyond Bitcoin and the internet, the largest and most successful\napplication of P2P technologies is file sharing, with Napster as the\npioneer and BitTorrent as the most recent evolution of the architecture.\n\nBitcoin's P2P network architecture is much more than a topology choice.\nBitcoin is a P2P digital cash system by design, and the network\narchitecture is both a reflection and a foundation of that core\ncharacteristic. Decentralization of control is a core design principle\nthat can only be achieved and maintained by a flat and decentralized P2P\nconsensus network.\n\nThe term \"Bitcoin network\" refers to\nthe collection of nodes running the Bitcoin P2P protocol. In addition to\nthe Bitcoin P2P protocol, there are other protocols that\nare used for mining and lightweight wallets. These additional\nprotocols are provided by gateway routing servers that access the\nBitcoin network using the Bitcoin P2P protocol and then extend that\nnetwork to nodes running other protocols. For example, Stratum servers\nconnect Stratum mining nodes via the Stratum protocol to the main\nBitcoin network and bridge the Stratum protocol to the Bitcoin P2P\nprotocol. We will describe some of the most commonly used of those\nprotocols in this chapter in addition to the base Bitcoin P2P protocol.\n\n=== Node Types and Roles\n\nAlthough(((\"Bitcoin network\", \"nodes\", \"types of\")))(((\"nodes\", \"types of\")))(((\"full nodes\", \"purpose of\")))(((\"peers\"))) full nodes (peers) in the Bitcoin P2P network are equal to each other,\nthey may take on different roles depending on the functionality they are\nsupporting. A Bitcoin full node validates blocks and may contain other\nfunctions, such as routing, mining, and wallet services.\n\nSome nodes, called _archival full nodes_, also (((\"archival full nodes\")))maintain a\ncomplete and up-to-date copy of the blockchain.\nThose nodes can\nserve data to clients that store\nonly a subset of the blockchain and partly verify transactions using a method\n(((\"SPV (simplified-payment-verification) clients\")))(((\"lightweight clients\")))called _simplified payment verification_, or SPV. These clients are known as lightweight clients.\n\nMiners compete to create new blocks by\nrunning specialized hardware to solve the proof-of-work algorithm. Some\nminers operate full nodes, validating every block on the\nblockchain, while others are clients participating in pool\nmining and depending on a pool server to provide them with work.\n\nUser wallets might connect to the user's own full node, as is sometimes the case with\ndesktop Bitcoin clients, but many user wallets, especially\nthose running on resource-constrained devices such as smartphones, are\nlightweight nodes.\n\nIn addition to the main node types on the Bitcoin P2P protocol, there\nare servers and nodes running other protocols, such as specialized\nmining pool protocols and lightweight client-access protocols.\n\n=== The Network\n\nAs (((\"Bitcoin network\", \"nodes\", \"number of\")))(((\"nodes\", \"number of\")))of this writing, the main Bitcoin network,\nrunning the Bitcoin P2P protocol, consists of about 10,000\nlistening nodes running various versions of Bitcoin Core and a few\nhundred nodes running various other implementations of the Bitcoin P2P\nprotocol such as BitcoinJ, btcd, and bcoin. A small\npercentage of the nodes on the Bitcoin P2P network are also mining\nnodes. Various individuals and companies interface with the Bitcoin\nnetwork by running archival full nodes,\nwith full copies of the blockchain and a network node, but without\nmining or wallet functions. These nodes act as network edge routers,\nallowing various other services (exchanges, wallets, block explorers,\nmerchant payment processing) to be built on top.\n\n\n[role=\"less_space pagebreak-before\"]\n=== Compact Block Relay\n\nWhen a (((\"Bitcoin network\", \"nodes\", \"compact block relay\", id=\"bitcoin-network-node-compact-relay\")))(((\"nodes\", \"compact block relay\", id=\"node-compact-relay\")))(((\"blocks\", \"compact block relay\", id=\"block-compact-relay\")))(((\"compact block relay\", id=\"compact-block-relay\")))(((\"mining\", \"blocks\", \"compact block relay\", id=\"mining-block-compact-relay\")))miner finds a new block, they announce it to the Bitcoin network\n(which includes other miners).  The miner who found that block can start\nbuilding on top of it immediately; all other miners who haven't learned\nabout the block yet will continue building on top of the previous block\nuntil they do learn about it.\n\nIf, before they learn about the new block, one of those other\nminers creates a block, their block will be in competition with the\nfirst miner's new block.  Only one of the blocks will ever be included\nin the blockchain used by all full nodes, and miners only get paid for\nblocks that are widely accepted.\n\nWhichever block has a second block built on top of it first wins (unless\nthere's another near-tie), which is (((\"block-finding races\")))called a _block-finding race_ and is\nillustrated in <<mining_race>>.\nBlock-finding races give the advantage to the largest miners, so they\nact in opposition to Bitcoin's essential decentralization.  To prevent\nblock-finding races and allow miners of any size to participate equally\nin the lottery that is Bitcoin mining, it's extremely useful to minimize\nthe time between when one miner announces a new block and when other\nminers receive that block.\n\n[[mining_race]]\n.A blockchain fork requiring a mining race.\nimage::images/mbc3_1001.png[\"Mining race\"]\n\nIn 2015, a new version of Bitcoin Core added a feature called\n_compact block relay_ (specified in BIP152) that allows transferring new\nblocks both faster and with less bandwidth.\n\nAs background, full nodes that relay unconfirmed transactions also store\nmany of those transactions in their mempools (see <<mempool>>).  When\nsome of those transactions are confirmed in a new block, the node\ndoesn't need to receive a second copy of those transactions.\n\nInstead of receiving redundant unconfirmed transactions, compact blocks\nallow a peer to instead send a short 6-byte identifier for each transaction.\nWhen your node receives a compact block with one or more identifiers, it\nchecks its mempool for those transactions and uses them if they are\nfound.  For any transaction that isn't found in your local node's\nmempool, your node can send a request to the peer for a copy.\n\nConversely, if the remote peer believes your node's mempool doesn't have\nsome of the transactions that appear in the block, it can include a copy of\nthose transactions in the compact block.  For example, Bitcoin Core\nalways sends a block's coinbase transaction.\n\nIf the remote peer guesses correctly about what transactions your node\nhas in its mempool, and which it does not, it will send a block nearly\nas efficiently as is theoretically possible (for a typical block, it'll\nbe between 97% and 99% efficient).\n\n[TIP]\n====\nCompact block relay does not decrease the size of blocks.  It just\nprevents the redundant transfer of information that a node already has.\nWhen a node doesn't previously have information about a block, for\nexample when a node is first started, it must receive complete copies of\neach block.\n====\n\nThere are two modes that Bitcoin Core currently implements for sending\ncompact blocks, illustrated in <<bip152_illustration>>:\n\nLow-bandwidth mode::\n  When your(((\"low-bandwidth mode (compact block relay)\"))) node requests that a peer use low-bandwidth mode (the default),\n  that peer will tell your node the 32-byte identifier (header hash) of a\n  new block but will not send your node any details about it.  If your\n  node acquires that block first from another source, this avoids\n  wasting any more of your bandwidth acquiring a redundant copy of that\n  block.  If your node does need the block, it will request a compact\n  block.\n\nHigh-bandwidth mode::\n  When your node (((\"high-bandwidth mode (compact block relay)\")))requests that a peer use high-bandwidth mode, that peer\n  will send your node a compact block for a new block even before it has\n  fully verified that the block is valid.  The only validation the peer\n  will perform is ensuring that the block's header contains the correct\n  amount of proof of work.  Since proof of work is expensive to generate\n  (about $150,000 USD at the time of writing), it's unlikely that a\n  miner would fake it just to waste the bandwidth of relay nodes.\n  Skipping validation before relay allows new blocks to travel across\n  the network with minimal delays at each hop.\n+\nThe downside of high-bandwidth mode is that your node is likely to\nreceive redundant information from each high-bandwidth peer it chooses.\nAs of this writing, Bitcoin Core currently only asks three peers to use\nhigh-bandwidth mode (and it tries to choose peers that have a history of\nquickly announcing blocks).\n\n// released into the public domain by Nicolas Dorier\n[[bip152_illustration]]\n.BIP152 modes compared (from BIP152).  The shaded bar indicates the time it takes the node to validate the block.\nimage::images/mbc3_1002.png[\"BIP152\"]\n\nThe names of the two methods (which are taken from BIP152) can be a bit\nconfusing.  Low-bandwidth mode saves bandwidth by not sending blocks in\nmost cases.  High-bandwidth mode uses more bandwidth than low-bandwidth\nmode but, in most cases, much less bandwidth than was used for block\nrelay before compact blocks were (((\"Bitcoin network\", \"nodes\", \"compact block relay\", startref=\"bitcoin-network-node-compact-relay\")))(((\"nodes\", \"compact block relay\", startref=\"node-compact-relay\")))(((\"blocks\", \"compact block relay\", startref=\"block-compact-relay\")))(((\"compact block relay\", startref=\"compact-block-relay\")))(((\"mining\", \"blocks\", \"compact block relay\", startref=\"mining-block-compact-relay\")))implemented.\n\n=== Private Block Relay Networks\n\nAlthough(((\"Bitcoin network\", \"nodes\", \"private block relay\", id=\"bitcoin-network-node-private-relay\")))(((\"nodes\", \"private block relay\", id=\"node-private-relay\")))(((\"blocks\", \"private block relay\", id=\"block-private-relay\")))(((\"private block relay\", id=\"private-block-relay\")))(((\"mining\", \"blocks\", \"private block relay\", id=\"mining-block-private-relay\"))) compact blocks go a long way toward minimizing the time it\ntakes for blocks to propagate across the network,\nit's possible to minimize latency further.  Unlike\ncompact blocks, though, the other solutions involve trade-offs that\nmake them unavailable or unsuitable for the public P2P relay network.\nFor that reason, there has been experimentation with private relay\nnetworks for blocks.\n\nOne simple technique is to preselect a route between endpoints.  For\nexample, a relay network with servers running in datacenters near major\ntrans-oceanic fiber optic lines might be able to forward new blocks\nfaster than waiting for the block to arrive at the node run by some home\nuser many kilometers away from the fiber optic line.\n\nAnother, more complex technique, is(((\"FEC (Forward Error Correction)\")))(((\"Forward Error Correction (FEC)\"))) Forward Error Correction (FEC).\nThis allows a compact block message to be split into several parts, with\neach part having extra data appended.  If any of the parts isn't\nreceived, that part can be reconstructed from the parts that are\nreceived.  Depending on the settings, up to several parts may be\nreconstructed if they are lost.\n\nFEC avoids the problem of a compact block (or some parts of it) not\narriving due to problems with the underlying network connection.\nThose problems frequently occur but we don't often notice them\nbecause we mostly use protocols that automatically re-request the\nmissing data.  However, requesting missing data triples the time to\nreceive it.  For example:\n\n1. Alice sends some data to Bob.\n2. Bob doesn't receive the data (or it is damaged).   Bob re-requests\n   the data from Alice.\n3. Alice sends the data again.\n\nA third technique is to assume all nodes receiving the data have\nalmost all of the same transactions in their mempool, so they can all\naccept the same compact block.  That not only saves us time computing\na compact block at each hop, but it means that each hop can simply\nrelay the FEC packets to the next hop even before validating them.\n\nThe trade-off for each of the preceding methods is that they work well with\ncentralization but not in a decentralized network where individual nodes\ncan't trust other nodes.  Servers in datacenters cost money and can\noften be accessed by operators of the datacenter, making them less\ntrustworthy than a secure home computer.  Relaying data before\nvalidating makes it easy to waste bandwidth, so it can only reasonably\nbe used on a private network where there's some level of trust and\naccountability between parties.\n\nThe original\nhttps://oreil.ly/30ZKi[Bitcoin Relay Network] was(((\"Bitcoin Relay Network\"))) created by\ndeveloper Matt Corallo in 2015 to enable fast synchronization of\nblocks between miners with very low latency. The network consisted of\nseveral virtual private servers (VPSes) hosted on\ninfrastructure around the world and served to connect the majority of\nminers and mining pools.\n\nThe original Bitcoin Relay Network was replaced in 2016\nwith the introduction (((\"FIBRE (Fast Internet Bitcoin Relay Engine)\")))(((\"Fast Internet Bitcoin Relay Engine (FIBRE)\")))of the _Fast Internet Bitcoin Relay Engine_ or\nhttps://bitcoinfibre.org[_FIBRE_], also created by developer Matt\nCorallo. FIBRE is software that allows operating a UDP-based relay network that relays blocks within a\nnetwork of nodes. FIBRE implements FEC and the _compact block_ optimization to\nfurther reduce the amount of data transmitted and the (((\"Bitcoin network\", \"nodes\", \"private block relay\", startref=\"bitcoin-network-node-private-relay\")))(((\"nodes\", \"private block relay\", startref=\"node-private-relay\")))(((\"blocks\", \"private block relay\", startref=\"block-private-relay\")))(((\"private block relay\", startref=\"private-block-relay\")))(((\"mining\", \"blocks\", \"private block relay\", startref=\"mining-block-private-relay\")))network latency.\n\n=== Network Discovery\n\nWhen a (((\"Bitcoin network\", \"nodes\", \"network discovery\", id=\"bitcoin-network-node-discovery\")))(((\"nodes\", \"network discovery\", id=\"node-discovery\")))(((\"network discovery\", id=\"network-discovery\")))new node boots up, it must discover other\nBitcoin nodes on the network in order to participate. To start this\nprocess, a new node must discover at least one existing node on the\nnetwork and connect to it. The geographic location of other nodes is\nirrelevant; the Bitcoin network topology is not geographically defined.\nTherefore, any existing Bitcoin nodes can be selected at random.\n\nTo connect to a known peer, nodes establish a TCP connection, usually to\nport 8333 (the port generally known as the one used by Bitcoin), or an\nalternative port if one is provided. Upon establishing a connection, the\nnode will start a \"handshake\" (see <<network_handshake>>) by\ntransmitting a  +version+ message, which contains basic identifying\ninformation, including:\n\n+Version+:: The Bitcoin P2P protocol version the client \"speaks\" (e.g., 70002)\n+nLocalServices+:: A list of local services supported by the node\n+nTime+:: The current time\n+addrYou+:: The IP address of the remote node, as seen from this node\n+addrMe+:: The IP address of the local node, as discovered by the local node\n+subver+:: A subversion showing the type of software running on this node (e.g., [.keep-together]#+/Satoshi:0.9.2.1/+#)\n+BestHeight+:: The block height of this node's blockchain\n+fRelay+:: A field added by BIP37 for requesting not to receive unconfirmed transactions\n\nThe +version+ message is always the first message sent by any peer to\nanother peer. The local peer receiving a +version+ message will examine\nthe remote peer's reported +Version+ and decide if the remote peer is\ncompatible. If the remote peer is compatible, the local peer will\nacknowledge the +version+ message and establish a connection by sending\na +verack+.\n\n[role=\"less_space pagebreak-before\"]\nHow does a new node find peers? The first method is to query DNS using a\nnumber of _DNS seeds_, which are(((\"DNS seeds\"))) DNS servers that provide a list of IP\naddresses of Bitcoin nodes. Some of those DNS seeds provide a static\nlist of IP addresses of stable Bitcoin listening nodes. Some of the DNS\nseeds are custom implementations of BIND (Berkeley Internet Name Daemon)\nthat return a random subset from a list of Bitcoin node addresses\ncollected by a crawler or a long-running Bitcoin node.  The Bitcoin Core\nclient contains the names of several different DNS seeds. The diversity of\nownership and diversity of implementation of the different DNS seeds\noffers a high level of reliability for the initial bootstrapping\nprocess. In the Bitcoin Core client, the option to use the DNS seeds is\ncontrolled by the option switch +-dnsseed+ (set to 1 by default, to use\nthe DNS seed).\n\nAlternatively, a bootstrapping node that knows nothing of the network\nmust be given the IP address of at least one Bitcoin node, after which\nit can establish connections through further introductions. The\ncommand-line argument +-seednode+ can be used to connect to one node\njust for introductions using it as a seed. After the initial seed node\nis used to form introductions, the client will disconnect from it and\nuse the newly discovered peers.\n\n[[network_handshake]]\n.The initial handshake between peers.\nimage::images/mbc3_1003.png[\"NetworkHandshake\"]\n\nOnce one or more connections are established, the new node will send an\n+addr+ message containing its own IP address to its neighbors. The\nneighbors will, in turn, forward the +addr+ message to their neighbors,\nensuring that the newly connected node becomes well known and better\nconnected. Additionally, the newly connected node can send +getaddr+ to\nits neighbors, asking them to return a list of IP addresses of other\npeers. That way, a node can find peers to connect to and advertise its\nexistence on the network for other nodes to find it.\n<<address_propagation>> shows the address discovery protocol.\n\n\n[[address_propagation]]\n.Address propagation and discovery.\nimage::images/mbc3_1004.png[\"AddressPropagation\"]\n\nA node must connect to a few different peers in order to establish\ndiverse paths into the Bitcoin network. Paths are not reliable—nodes\ncome and go—and so the node must continue to discover new nodes as it\nloses old connections as well as assist other nodes when they bootstrap.\nOnly one connection is needed to bootstrap because the first node can\noffer introductions to its peer nodes and those peers can offer further\nintroductions. It's also unnecessary and wasteful of network resources\nto connect to more than a handful of nodes. After bootstrapping, a node\nwill remember its most recent successful peer connections so if it\nis rebooted, it can quickly reestablish connections with its former peer\nnetwork. If none of the former peers respond to its connection request,\nthe node can use the seed nodes to bootstrap again.\n\nOn a node running the Bitcoin Core client, you can list the peer\nconnections with the command +getpeerinfo+:\n\n[source,bash]\n----\n$ bitcoin-cli getpeerinfo\n----\n[source,json]\n----\n[\n  {\n    \"id\": 0,\n    \"addr\": \"82.64.116.5:8333\",\n    \"addrbind\": \"192.168.0.133:50564\",\n    \"addrlocal\": \"72.253.6.11:50564\",\n    \"network\": \"ipv4\",\n    \"services\": \"0000000000000409\",\n    \"servicesnames\": [\n      \"NETWORK\",\n      \"WITNESS\",\n      \"NETWORK_LIMITED\"\n    ],\n    \"lastsend\": 1683829947,\n    \"lastrecv\": 1683829989,\n    \"last_transaction\": 0,\n    \"last_block\": 1683829989,\n    \"bytessent\": 3558504,\n    \"bytesrecv\": 6016081,\n    \"conntime\": 1683647841,\n    \"timeoffset\": 0,\n    \"pingtime\": 0.204744,\n    \"minping\": 0.20337,\n    \"version\": 70016,\n    \"subver\": \"/Satoshi:24.0.1/\",\n    \"inbound\": false,\n    \"bip152_hb_to\": true,\n    \"bip152_hb_from\": false,\n    \"startingheight\": 788954,\n    \"presynced_headers\": -1,\n    \"synced_headers\": 789281,\n    \"synced_blocks\": 789281,\n    \"inflight\": [\n    ],\n    \"relaytxes\": false,\n    \"minfeefilter\": 0.00000000,\n    \"addr_relay_enabled\": false,\n    \"addr_processed\": 0,\n    \"addr_rate_limited\": 0,\n    \"permissions\": [\n    ],\n    \"bytessent_per_msg\": {\n      ...\n    },\n    \"bytesrecv_per_msg\": {\n      ...\n    },\n    \"connection_type\": \"block-relay-only\"\n  },\n]\n----\n\nTo override the automatic management of peers and to specify a list of\nIP addresses, users can provide the option +-connect=<IPAddress>+ and\nspecify one or more IP addresses. If this option is used, the node will\nonly connect to the selected IP addresses instead of discovering and\nmaintaining the peer connections automatically.\n\nIf there is no traffic on a connection, nodes will periodically send a\nmessage to maintain the connection. If a node has not communicated on a\nconnection for too long, it is assumed to be disconnected\nand a new peer will be sought. Thus, the network dynamically adjusts to\ntransient nodes and network problems and can organically grow and\nshrink as needed without any (((\"Bitcoin network\", \"nodes\", \"network discovery\", startref=\"bitcoin-network-node-discovery\")))(((\"nodes\", \"network discovery\", startref=\"node-discovery\")))(((\"network discovery\", startref=\"network-discovery\")))central control.\n\n=== Full Nodes\n\nFull nodes (((\"Bitcoin network\", \"full nodes, purpose of\")))(((\"full nodes\", \"purpose of\")))are nodes that verify every transaction in every block on the\nvalid blockchain with the most proof of work.\n\nFull nodes\nindependently process every block, starting after the very first\nblock (genesis block) and building up to the latest known block in the\nnetwork. A full node can independently and authoritatively\nverify any transaction.\nThe full node relies on the network to\nreceive updates about new blocks of transactions, which it then verifies\nand incorporates into its local view of which scripts control which\nbitcoins, called the set (((\"UTXOs (unspent transaction outputs)\")))of _unspent transaction outputs_ (UTXOs).\n\nRunning a full node gives\nyou the pure Bitcoin experience: independent verification of all\ntransactions without the need to rely on, or trust, any other systems.\n\nThere are a few alternative implementations of\nfull nodes, built using different programming\nlanguages and software architectures, or which made different design\ndecisions. However, the most common\nimplementation is Bitcoin Core.\nMore than 95% of full nodes on the Bitcoin network run\nvarious versions of Bitcoin Core. It is identified as \"Satoshi\" in the\nsubversion string sent in the +version+ message and shown by the\ncommand +getpeerinfo+ as we saw earlier; for example, [.keep-together]#+/Satoshi:24.0.1/+#.\n\n=== Exchanging \"Inventory\"\n\nThe first thing(((\"Bitcoin network\", \"nodes\", \"syncing blockchain\", id=\"bitcoin-network-node-sync\")))(((\"nodes\", \"syncing blockchain\", id=\"node-sync\")))(((\"full nodes\", \"syncing blockchain\", id=\"full-node-sync\")))(((\"blockchain\", \"syncing\", id=\"blockchain-sync\")))(((\"syncing blockchain\", id=\"sync-blockchain\"))) a full\nnode will do once it connects to peers is try to construct a complete\nchain of block headers. If it is a brand-new node and has no blockchain at all, it\nonly knows one block, the genesis block, which is statically embedded in\nthe client software. Starting after block #0 (the genesis block), the new\nnode will have to download hundreds of thousands of blocks to\nsynchronize with the network and reestablish the full blockchain.\n\nThe\nprocess of syncing the blockchain starts with the +version+ message\nbecause that contains +BestHeight+, a node's current blockchain height\n(number of blocks). A node will see the +version+ messages from its\npeers, know how many blocks they each have, and be able to compare to\nhow many blocks it has in its own blockchain. Peered nodes will exchange\na +getheaders+ message that contains the hash of the top\nblock on their local blockchain. One of the peers will be able to\nidentify the received hash as belonging to a block that is not at the\ntop, but rather belongs to an older block, thus deducing that its own\nlocal blockchain is longer than the remote node's blockchain.\n\nThe peer that has the longer blockchain has more blocks than the other\nnode and can identify which headers the other node needs in order to\n\"catch up.\" It will identify the first 2,000 headers to share using a\n+headers+ message.  The node will keep requesting additional headers\nuntil it has received one for every block the remote peer claims to\nhave.\n\nIn parallel, the node will begin requesting the blocks for each header\nit previously received using a +getdata+ message.  The node will request\ndifferent blocks from each of its selected peers, which allows it to drop\nconnections to peers that are significantly slower than the average in\norder to find newer (and possibly faster) peers.\n\nLet's assume, for example, that a node only has the genesis block. It\nwill then receive a +headers+ message from its peers containing the headers\nof the next 2,000 blocks in the chain. It will start requesting blocks\nfrom all of its connected peers, keeping a queue of up to 1,024 blocks.\nBlocks need to be validated in order, so if the oldest block in the\nqueue--the block the node next needs to validate--hasn't been received\nyet, the node drops the connection to the peer that was supposed to\nprovide that block.  It then finds a new peer that may be able to\nprovide one block before all of the node's other peers are able to\nprovide 1,023 blocks.\n\nAs each block is received, it is added to the\nblockchain, as we will see in <<blockchain>>. As the local blockchain is\ngradually built up, more blocks are requested and received, and the\nprocess continues until the node catches up to the rest of the network.\n\nThis process of comparing the local blockchain with the peers and\nretrieving any missing blocks happens any time a node has been offline for\nan extended period(((\"Bitcoin network\", \"nodes\", \"syncing blockchain\", startref=\"bitcoin-network-node-sync\")))(((\"nodes\", \"syncing blockchain\", startref=\"node-sync\")))(((\"full nodes\", \"syncing blockchain\", startref=\"full-node-sync\")))(((\"blockchain\", \"syncing\", startref=\"blockchain-sync\")))(((\"syncing blockchain\", startref=\"sync-blockchain\"))) of time.\n\n[[spv_nodes]]\n=== Lightweight Clients\n\nMany (((\"Bitcoin network\", \"lightweight clients\", id=\"bitcoin-network-lightweight\")))(((\"lightweight clients\", id=\"lightweight\")))(((\"SPV (simplified-payment-verification) clients\", id=\"spv-lightweight\")))Bitcoin clients are designed to run on space- and\npower-constrained devices, such as smartphones, tablets, or embedded\nsystems. For such devices, a _simplified payment verification_ (SPV)\nmethod is used to allow them to operate without validating the full\nblockchain. These types of clients are called lightweight\nclients.\n\nLightweight clients download only the block headers and do not download the\ntransactions included in each block. The resulting chain of headers,\nwithout transactions, is about 10,000 times smaller than the full blockchain.\nLightweight clients cannot construct a full picture of all the UTXOs that are\navailable for spending because they do not know about all the\ntransactions on the network. Instead, they verify transactions using a\nslightly different method that relies on peers to provide partial views\nof relevant parts of the blockchain on demand.\n\nAs an analogy, a full node is like a tourist in a strange city, equipped\nwith a detailed map of every street and every address. By comparison, a\nlightweight client is like a tourist in a strange city asking random strangers for\nturn-by-turn directions while knowing only one main avenue. Although\nboth tourists can verify the existence of a street by visiting it, the\ntourist without a map doesn't know what lies down any of the side\nstreets and doesn't know what other streets exist. Positioned in front\nof 23 Church Street, the tourist without a map cannot know if there are\na dozen other [.keep-together]#\"23 Church# Street\" addresses in the city and whether this\nis the right one. The mapless tourist's best chance is to ask enough\npeople and hope some of them are not trying to mug him.\n\nLightweight clients verify transactions by reference to their _depth_ in the blockchain. Whereas a full node will construct a fully verified chain of thousands of blocks and millions of transactions reaching down the blockchain (back in time) all the way to the genesis block, a lightweight client will verify the proof of work of all blocks (but not whether the blocks and all of their transactions are valid) and link that chain to the transaction of interest.\n\nFor example, when examining a transaction in block 800,000, a full node\nverifies all 800,000 blocks down to the genesis block and builds a full\ndatabase of UTXOs, establishing the validity of the transaction by\nconfirming that the transaction exists and its output remains unspent. A lightweight client can\nonly verify that the transaction exists. The client establishes a link\nbetween the transaction and the block that contains it, using a _merkle\npath_ (see <<merkle_trees>>). Then, the lightweight client waits until it sees the\nsix blocks 800,001 through 800,006 piled on top of the block containing\nthe transaction and verifies it by establishing its depth under blocks\n800,006 to 800,001. The fact that other nodes on the network accepted\nblock 800,000 and that miners did the necessary work to produce six more blocks\non top of it is proof, by proxy, that the transaction actually exists.\n\nA lightweight client cannot normally be persuaded that a transaction exists in a block\nwhen the transaction does not in fact exist. The lightweight client establishes\nthe existence of a transaction in a block by requesting a merkle path\nproof and by validating the proof of work in the chain of blocks.\nHowever, a transaction's existence can be \"hidden\" from a lightweight client. A\nlightweight client can definitely verify that a transaction exists but cannot\nverify that a transaction, such as a double-spend of the same UTXO,\ndoesn't exist because it doesn't have a record of all transactions. This\nvulnerability can be used in a denial-of-service attack or for a\ndouble-spending attack against lightweight clients. To defend against this, a lightweight\nclient needs to connect randomly to several clients to increase the\nprobability that it is in contact with at least one honest node. This\nneed to randomly connect means that lightweight clients also are vulnerable to\nnetwork partitioning attacks or Sybil attacks, where they are connected\nto fake nodes or fake networks and do not have access to honest nodes or\nthe real Bitcoin network.\n\nFor many practical purposes, well-connected lightweight clients are secure enough,\nstriking a balance between resource needs, practicality, and security.\nFor infallible security, however, nothing beats running a full\nnode.\n\n[TIP]\n====\nA full node verifies a transaction by checking the entire chain of\nthousands of blocks below it in order to guarantee that the UTXO exists\nand is not spent, whereas a lightweight client only proves that a transaction\nexists and checks that the block containing that transaction is\nburied by a handful of blocks above it.\n====\n\nTo get the block headers it needs to verify a transaction is part of the\nchain, lightweight clients use a +getheaders+ message.\nThe responding peer will send up to 2,000 block headers\nusing a single +headers+ message.  See the illustration in\n<<spv_synchronization>>.\n\n[[spv_synchronization]]\n.Lightweight client synchronizing the block headers.\nimage::images/mbc3_1005.png[\"Header synchronization\"]\n\nBlock headers allow a lightweight client to verify that any individual block\nbelongs to the blockchain with the most proof of work, but they don't\ntell the client which blocks contain transactions that are interesting to\nits wallet.  The client could download every block and check, but that\nwould use a large fraction of the resources it would take to run a full\nnode, so developers have looked for other ways to solve the problem.\n\nShortly after the introduction of lightweight clients, Bitcoin\ndevelopers added a feature called _bloom filters_ in an attempt to\nreduce the bandwidth that lightweight clients needed to use to learn about their\nincoming and outgoing transactions.\nBloom filters allow lightweight clients to receive a subset of\nthe transactions without directly revealing precisely which addresses they are\ninterested in, through a filtering mechanism that uses probabilities\nrather than (((\"Bitcoin network\", \"lightweight clients\", startref=\"bitcoin-network-lightweight\")))(((\"lightweight clients\", startref=\"lightweight\")))(((\"SPV (simplified-payment-verification) clients\", startref=\"spv-lightweight\")))fixed patterns.\n\n[[bloom_filters]]\n=== Bloom Filters\n\nA bloom filter(((\"Bitcoin network\", \"bloom filters\", \"operational overview\", id=\"bitcoin-network-bloom-overview\")))(((\"bloom filters\", \"operational overview\", id=\"bloom-overview\"))) is a probabilistic search filter, a way\nto describe a desired pattern without specifying it exactly. Bloom\nfilters offer an efficient way to express a search pattern while\nprotecting privacy. They are used by lightweight clients to ask their peers for\ntransactions matching a specific pattern without revealing exactly\nwhich addresses, keys, or transactions they are searching for.\n\nIn our previous analogy, a tourist without a map is asking for\ndirections to a specific address, \"23 Church St.\" If they ask a stranger\nfor directions to this street, they inadvertently reveal their\ndestination. A bloom filter is like asking, \"Are there any streets in\nthis neighborhood whose name ends in R-C-H?\" A question like that\nreveals slightly less about the desired destination than asking for \"23\nChurch St.\" Using this technique, a tourist could specify the desired\naddress in more detail such as \"ending in U-R-C-H\" or less detail such as\n\"ending in H.\" By varying the precision of the search, the tourist\nreveals more or less information at the expense of getting more or less\nspecific results. If they ask for a less specific pattern, they get a lot\nmore possible addresses and better privacy, but many of the results are\nirrelevant. If they ask for a very specific pattern, they get fewer\nresults but lose privacy.\n\nBloom filters serve this function by allowing a lightweight client to specify a\nsearch pattern for transactions that can be tuned toward precision or\nprivacy. A more specific bloom filter will produce accurate results, but\nat the expense of revealing what patterns the lightweight client is interested in,\nthus revealing the addresses owned by the user's wallet. A less specific\nbloom filter will produce more data about more transactions, many\nirrelevant to the client, but will allow the client to maintain better\nprivacy.\n\n==== How Bloom Filters Work\n\nBloom filters are implemented as a variable-size array of N binary\ndigits (a bit field) and a variable number of M hash functions. The hash\nfunctions are designed to always produce an output that is between 1 and\nN, corresponding to the array of binary digits. The hash functions are\ngenerated deterministically, so that any client implementing a bloom\nfilter will always use the same hash functions and get the same results\nfor a specific input. By choosing different length (N) bloom filters and\na different number (M) of hash functions, the bloom filter can be tuned,\nvarying the level of accuracy and therefore privacy.\n\nIn <<bloom1>>, we use a very small array of 16 bits and a set of three\nhash functions to demonstrate how bloom filters work.\n\n[[bloom1]]\n.An example of a simplistic bloom filter, with a 16-bit field and three hash functions.\nimage::images/mbc3_1006.png[\"Bloom1\"]\n\nThe bloom filter is initialized so that the array of bits is all zeros.\nTo add a pattern to the bloom filter, the pattern is hashed by each hash\nfunction in turn. Applying the first hash function to the input results\nin a number between 1 and N. The corresponding bit in the array (indexed\nfrom 1 to N) is found and set to +1+, thereby recording the output of\nthe hash function. Then, the next hash function is used to set another\nbit and so on. Once all M hash functions have been applied, the search\npattern will be \"recorded\" in the bloom filter as M bits that have been\nchanged from +0+ to +1+.\n\n<<bloom2>> is an example of adding a pattern \"A\" to the simple bloom filter shown in <<bloom1>>.\n\nAdding a second pattern is as simple as repeating this process. The\npattern is hashed by each hash function in turn, and the result is\nrecorded by setting the bits to +1+. Note that as a bloom filter is\nfilled with more patterns, a hash function result might coincide with a\nbit that is already set to +1+, in which case the bit is not changed. In\nessence, as more patterns record on overlapping bits, the bloom filter\nstarts to become saturated with more bits set to +1+ and the accuracy of\nthe filter decreases. This is why the filter is a probabilistic data\nstructure—it gets less accurate as more patterns are added. The accuracy\ndepends on the number of patterns added versus the size of the bit array\n(N) and number of hash functions (M). A larger bit array and more hash\nfunctions can record more patterns with higher accuracy. A smaller bit\narray or fewer hash functions will record fewer patterns and produce\nless accuracy.\n\n[[bloom2]]\n.Adding a pattern \"A\" to our simple bloom filter.\nimage::images/mbc3_1007.png[\"Bloom2\"]\n\n<<bloom3>> is an example of adding a second pattern \"B\" to the simple bloom filter.\n\n[[bloom3]]\n.Adding a second pattern \"B\" to our simple bloom filter.\nimage::images/mbc3_1008.png[\"Bloom3\"]\n\n[role=\"less_space pagebreak-before\"]\nTo test if a pattern is part of a bloom filter, the pattern is hashed by\neach hash function and the resulting bit pattern is tested against the\nbit array. If all the bits indexed by the hash functions are set to +1+,\nthen the pattern is _probably_ recorded in the bloom filter. Because the\nbits may be set because of overlap from multiple patterns, the answer is\nnot certain, but is rather probabilistic. In simple terms, a bloom\nfilter positive match is a \"Maybe, yes.\"\n\n<<bloom4>> is an example of testing the existence of pattern \"X\" in the\nsimple bloom filter. The corresponding bits are set to +1+, so the\npattern is probably a match.\n\n[[bloom4]]\n.Testing the existence of pattern \"X\" in the bloom filter. The result is a probabilistic positive match, meaning \"Maybe.\"\nimage::images/mbc3_1009.png[\"Bloom4\"]\n\nOn the contrary, if a pattern is tested against the bloom filter and any\none of the bits is set to +0+, this proves that the pattern was not\nrecorded in the bloom filter. A negative result is not a probability, it\nis a certainty. In simple terms, a negative match on a bloom filter is a\n\"Definitely not!\"\n\n<<bloom5>> is an example of testing the existence of pattern \"Y\" in the\nsimple bloom filter. One of the corresponding bits is set to +0+, so the\npattern is definitely(((\"Bitcoin network\", \"bloom filters\", \"operational overview\", startref=\"bitcoin-network-bloom-overview\")))(((\"bloom filters\", \"operational overview\", startref=\"bloom-overview\"))) not a match.\n\n[[bloom5]]\n.Testing the existence of pattern \"Y\" in the bloom filter. The result is a definitive negative match, meaning \"Definitely Not!\"\nimage::images/mbc3_1010.png[]\n\n==== How Lightweight Clients Use Bloom Filters\n\nBloom filters (((\"Bitcoin network\", \"bloom filters\", \"lightweight clients and\", id=\"bitcoin-network-bloom-lightweight\")))(((\"bloom filters\", \"lightweight clients and\", id=\"bloom-lightweight\")))(((\"lightweight clients\", \"bloom filters and\", id=\"lightweight-bloom\")))are used to filter the transactions (and blocks containing\nthem) that a lightweight client receives from its peers, selecting only\ntransactions of interest to the lightweight client without revealing exactly which\naddresses or keys it is interested in.\n\nA lightweight client will initialize a bloom filter\nas \"empty\"; in that state, the bloom filter will not match any patterns.\nThe lightweight client will then make a list of all the addresses, keys, and\nhashes that it is interested in. It will do this by extracting the\npublic key hash, script hash, and transaction IDs from any UTXO\ncontrolled by its wallet. The lightweight client then adds each of these to the\nbloom filter so that the bloom filter will \"match\" if these patterns\nare present in a transaction, without revealing the patterns themselves.\n\nThe lightweight client will then send a\n+filterload+ message to the peer containing the bloom filter to use on\nthe connection. On the peer, bloom filters are checked against each\nincoming transaction. The full node checks several parts of the\ntransaction against the bloom filter, looking for a match including:\n\n++++\n<ul>\n<li>The transaction ID</li>\n<li>The data components from the scripts of each of the transaction outputs (every key and hash in the script)</li>\n<li class=\"less_space pagebreak-before\">Each of the transaction inputs</li>\n<li>Each of the input signature data components (or witness scripts)</li>\n</ul>\n++++\n\n\nBy checking against all these components, bloom filters can be used to\nmatch public key hashes, scripts, +OP_RETURN+ values, public keys in\nsignatures, or any future component of a smart contract or complex\nscript.\n\nAfter a filter is established, the peer will then test each\ntransaction's outputs against the bloom filter. Only transactions that\nmatch the filter are sent to the client.\n\nIn response to a +getdata+ message from the client, peers will send a\n+merkleblock+ message that contains only block headers for blocks\nmatching the filter and a merkle path (see <<merkle_trees>>) for each\nmatching transaction. The peer will then also send +tx+ messages\ncontaining the transactions matched by the filter.\n\nAs the full node sends transactions to the lightweight client, the lightweight client\ndiscards any false positives and uses the correctly matched transactions\nto update its UTXO set and wallet balance. As it updates its own view of\nthe UTXO set, it also modifies the bloom filter to match any future\ntransactions referencing the UTXO it just found. The full node then uses\nthe new bloom filter to match new transactions and the whole process\nrepeats.\n\nThe client setting the bloom filter can interactively add patterns to the\nfilter by sending a +filteradd+ message. To clear the bloom filter, the\nclient can send a +filterclear+ message. Because it is not possible to\nremove a pattern from a bloom filter, a client has to clear and resend a\nnew bloom filter if a pattern is no longer desired.\n\nThe network protocol and bloom filter mechanism for lightweight clients is defined\nin BIP37.\n\nUnfortunately, after the deployment of bloom filters, it became clear\nthat they didn't offer very much privacy.  A full node receiving a bloom\nfilter from a peer could apply that filter to the entire blockchain to\nfind all of the client's transactions (plus false positives).  It could\nthen look for patterns and relationships between the transactions.\nRandomly selected false positive transactions would be unlikely to have\na parent-child relationship from output to input, but transactions from\nthe user's wallet would be very likely to have that relationship.  If\nall of the related transactions have certain characteristics, such as\nat least one P2PKH output, then transactions without that characteristic\ncan be assumed not to belong to the wallet.\n\nIt was also discovered that specially constructed filters could force\nthe full nodes that processed them to perform a large amount of work,\nwhich could lead to denial-of-service attacks.\n\nFor both of those reasons, Bitcoin Core eventually limited support for\nbloom filters to only clients on IP addresses that were explicitly\nallowed by the node operator.  This meant that an alternative method for\nhelping lightweight clients find their transactions(((\"Bitcoin network\", \"bloom filters\", \"lightweight clients and\", startref=\"bitcoin-network-bloom-lightweight\")))(((\"bloom filters\", \"lightweight clients and\", startref=\"bloom-lightweight\")))(((\"lightweight clients\", \"bloom filters and\", startref=\"lightweight-bloom\"))) was needed.\n\n=== Compact Block Filters\n\n// https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-May/012636.html\n\nAn idea was (((\"Bitcoin network\", \"compact block filters\", id=\"bitcoin-network-compact-filter\")))(((\"compact block filters\", id=\"compact-block-filter\")))(((\"blocks\", \"compact block filters\", id=\"block-compact-filter\")))posted to the Bitcoin-Dev mailing list by an anonymous\ndeveloper in 2016 of reversing the bloom filter process.  With a BIP37\nbloom filter, each client hashes their addresses to create a bloom\nfilter and nodes hash parts of each transaction to attempt to match\nthat filter.  In the new proposal, nodes hash parts of each transaction\nin a block to create a bloom filter and clients hash their addresses to\nattempt to match that filter.  If a client finds a match, they download\nthe entire block.\n\n[NOTE]\n====\nDespite the similarities in names, BIP152 _compact blocks_ and\nBIP157/158 _compact block filters_ are unrelated.\n====\n\nThis allows nodes to create a single filter for every block, which they\ncan save to disk and serve over and over, eliminating the\ndenial-of-service vulnerabilities with BIP37.  Clients don't give full\nnodes any information about their past or future addresses.  They only\ndownload blocks, which may contain thousands of transactions that\nweren't created by the client.  They can even download each matching\nblock from a different peer, making it harder for full nodes to connect\ntransactions belonging to a single client across multiple blocks.\n\nThis idea for server-generated filters doesn't offer perfect privacy;\nit still places some costs on full nodes (and it does require lightweight\nclients to use more bandwidth for the block download), and the filters can\nonly be used for confirmed transactions (not unconfirmed transactions). However,\nit is much more private and reliable than BIP37 client-requested\nbloom filters.\n\nAfter the description of the original idea based on bloom filters,\ndevelopers realized there was a better data structure for\nserver-generated filters, called Golomb-Rice Coded Sets (GCS).\n\n==== Golomb-Rice Coded Sets (GCS)\n\nImagine (((\"Bitcoin network\", \"compact block filters\", \"GCS (Golomb-Rice coded sets)\", id=\"bitcoin-network-compact-filter-gcs\")))(((\"compact block filters\", \"GCS (Golomb-Rice coded sets)\", id=\"compact-block-filter-gcs\")))(((\"blocks\", \"compact block filters\", \"GCS (Golomb-Rice coded sets)\", id=\"block-compact-filter-gcs\")))(((\"GCS (Golomb-Rice coded sets)\", id=\"gcs-filter\")))that Alice wants to send a list of numbers to Bob.  The simple\nway to do that is to just send him the entire list of numbers:\n\n----\n849\n653\n476\n900\n379\n----\n\nBut there's a more efficient way.  First, Alice puts the list in\nnumerical order:\n\n----\n379\n476\n653\n849\n900\n----\n\nThen, Alice sends the first number.  For the remaining numbers, she\nsends the difference between that number and the preceding number.  For\nexample, for the second number, she sends 97 (476 – 379); for the third\nnumber, she sends 177 (653 – 476); and so on:\n\n----\n379\n97\n177\n196\n51\n----\n\nWe can see that the differences between two numbers in an ordered list\nproduces numbers that are shorter than the original numbers.  Upon\nreceiving this list, Bob can reconstruct the original list by simply\nadding each number with its predecessor.  That means we save space\nwithout losing any information, which is (((\"lossless encoding\")))called _lossless encoding_.\n\nIf we randomly select numbers within a fixed range of values, then the\nmore numbers we select, the smaller the average (mean) size of the\ndifferences.  That means the amount of data we need to transfer doesn't\nincrease as fast as the length of our list increases (up to a point).\n\nEven more usefully, the length of the randomly selected numbers in a\nlist of differences is naturally biased toward smaller lengths.\nConsider selecting two random numbers from 1 to 6; this is the same\nas rolling two dice.  There are 36 distinct combinations of two dice:\n\n[cols=\"1,1,1,1,1,1\"]\n|===\n| 1 1 | 1 2 | 1 3 | 1 4 | 1 5 | 1 6\n| 2 1 | 2 2 | 2 3 | 2 4 | 2 5 | 2 6\n| 3 1 | 3 2 | 3 3 | 3 4 | 3 5 | 3 6\n| 4 1 | 4 2 | 4 3 | 4 4 | 4 5 | 4 6\n| 5 1 | 5 2 | 5 3 | 5 4 | 5 5 | 5 6\n| 6 1 | 6 2 | 6 3 | 6 4 | 6 5 | 6 6\n|===\n\nLet's find the difference between the larger of the numbers and the\nsmaller of the numbers:\n\n[role=\"less_space pagebreak-before\"]\n[cols=\"1,1,1,1,1,1\"]\n|===\n| 0 | 1 | 2 | 3 | 4 | 5\n| 1 | 0 | 1 | 2 | 3 | 4\n| 2 | 1 | 0 | 1 | 2 | 3\n| 3 | 2 | 1 | 0 | 1 | 2\n| 4 | 3 | 2 | 1 | 0 | 1\n| 5 | 4 | 3 | 2 | 1 | 0\n|===\n\nIf we count the frequency of each difference occurring, we see that the\nsmall differences are much more likely to occur than the large\ndifferences:\n\n++++\n<table>\n\n<thead>\n<tr>\n<th>Difference</th>\n<th>Occurrences</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><p>0</p></td>\n<td><p>6</p></td>\n</tr>\n<tr>\n<td><p>1</p></td>\n<td><p>10</p></td>\n</tr>\n<tr>\n<td><p>2</p></td>\n<td><p>8</p></td>\n</tr>\n<tr>\n<td><p>3</p></td>\n<td><p>6</p></td>\n</tr>\n<tr>\n<td><p>4</p></td>\n<td><p>4</p></td>\n</tr>\n<tr>\n<td><p>5</p></td>\n<td><p>2</p></td>\n</tr>\n</tbody>\n</table>\n++++\n\nIf we know that we might need to store large numbers (because large\ndifferences can happen, even if they are rare), but we'll most often need\nto store small numbers, we can encode each number using a system that\nuses less space for small numbers and extra space for large numbers.\nOn average, that system will perform better than using the same amount\nof space for every number.\n\nGolomb coding provides that facility.  Rice coding is a subset of Golomb\ncoding that's more convenient to use in some situations, including the\napplication of Bitcoin (((\"Bitcoin network\", \"compact block filters\", \"GCS (Golomb-Rice coded sets)\", startref=\"bitcoin-network-compact-filter-gcs\")))(((\"compact block filters\", \"GCS (Golomb-Rice coded sets)\", startref=\"compact-block-filter-gcs\")))(((\"blocks\", \"compact block filters\", \"GCS (Golomb-Rice coded sets)\", startref=\"block-compact-filter-gcs\")))(((\"GCS (Golomb-Rice coded sets)\", startref=\"gcs-filter\")))block filters.\n\n==== What Data to Include in a Block Filter\n\nOur primary (((\"Bitcoin network\", \"compact block filters\", \"what to include\", id=\"bitcoin-network-compact-filter-include\")))(((\"compact block filters\", \"what to include\", id=\"compact-block-filter-include\")))(((\"blocks\", \"compact block filters\", \"what to include\", id=\"block-compact-filter-include\")))goal is to allow wallets to learn whether a block contains a\ntransaction affecting that wallet.  For a wallet to be effective, it\nneeds to learn two types of information:\n\nWhen it has received money::\n\nSpecifically, when a transaction\n   output contains a script that the wallet controls (such as by\n   controlling the authorized private key)\n\nWhen it has spent money::  \n\nSpecifically, when a transaction input\n   references a previous transaction output that the wallet controlled\n\nA secondary goal during the design of compact block filters was to allow\nthe wallet receiving the filter to verify that it received an accurate\nfilter from a peer.  For example, if the wallet downloaded the block\nfrom which the filter was created, the wallet could generate its own\nfilter.  It could then compare its filter to the peer's filter and\nverify that they were identical, proving the peer had generated an\naccurate filter.\n\nFor both the primary and secondary goals to be met, a filter would need\nto reference two types of information:\n\n* The script for every output in every transaction in a block\n\n* The outpoint for every input in every transaction in a block\n\nAn early design for compact block filters included both of those pieces\nof information, but it was realized there was a more efficient way\nto accomplish the primary goal if we sacrificed the secondary goal.  In\nthe new design, a block filter would still reference two types of\ninformation, but they'd be more closely related:\n\n* As before, the script for every output in every transaction in a\nblock.\n\n* In a change, it would also reference the script of the output\nreferenced by the outpoint for every input in every transaction in a\nblock.  In other words, the output script being spent.\n\nThis had several advantages.  First, it meant that wallets didn't need\nto track outpoints; they could instead just scan for the\noutput scripts to which they expected to receive money. Second, any time a\nlater transaction in a block spends the output of an earlier\ntransaction in the same block, they'll both reference the same\noutput script.  More than one reference to the same output script is\nredundant in a compact block filter, so the redundant copies can be\nremoved, shrinking the size of the filters.\n\nWhen full nodes validate a block, they need access to the output scripts\nfor both the current transaction outputs in a block and the transaction\noutputs from previous blocks that are being referenced in inputs, so\nthey're able to build compact block filters in this simplified model.\nBut a block itself doesn't include the output scripts from transactions\nincluded in previous blocks, so there's no convenient way for a client\nto verify a block filter was built correctly.  However, there is an\nalternative that can help a client detect if a peer is lying to it:\nobtaining the same filter from (((\"Bitcoin network\", \"compact block filters\", \"what to include\", startref=\"bitcoin-network-compact-filter-include\")))(((\"compact block filters\", \"what to include\", startref=\"compact-block-filter-include\")))(((\"blocks\", \"compact block filters\", \"what to include\", startref=\"block-compact-filter-include\")))multiple peers.\n\n==== Downloading Block Filters from Multiple Peers\n\nA peer (((\"Bitcoin network\", \"compact block filters\", \"downloading multiple\", id=\"bitcoin-network-compact-filter-download\")))(((\"compact block filters\", \"downloading multiple\", id=\"compact-block-filter-download\")))(((\"blocks\", \"compact block filters\", \"downloading multiple\", id=\"block-compact-filter-download\")))(((\"downloading multiple block filters\", id=\"download-multiple-block\")))(((\"multiple block filters, downloading\", id=\"multiple-block-download\")))can provide a wallet with an inaccurate filter.  There are two ways\nto create an inaccurate filter.  The peer can create a filter that\nreferences transactions that don't actually appear in the associated\nblock (a false positive).  Alternatively, the peer can create a filter\nthat doesn't reference transactions that do actually appear in the\nassociated block (a false negative).\n\nThe first protection against an inaccurate filter is for a client to\nobtain a filter from multiple peers.  The BIP157 protocol allows a\nclient to download just a short 32-byte commitment to a filter to\ndetermine whether each peer is advertising the same filter as all of the\nclient's other peers.  That minimizes the amount of bandwidth the client\nmust expend to query many different peers for their filters, if all of\nthose peers agree.\n\nIf two or more different peers have different filters for the same\nblock, the client can download all of them.  It can then also download\nthe associated block.  If the block contains any transaction related to\nthe wallet that is not part of one of the filters, then the wallet can\nbe sure that whichever peer created that filter was\ninaccurate--Golomb-Rice Coded Sets will always include a\npotential match.\n\nAlternatively, if the block doesn't contain a transaction that the\nfilter said might match the wallet, that isn't proof that the filter was\ninaccurate.  To minimize the size of a GCS, we allow a certain number of\nfalse positives.  What the wallet can do is continue downloading\nadditional filters from the peer, either randomly or when they indicate\na match, and then track the client's false positive rate.  If it\ndiffers significantly from the false positive rate that filters were\ndesigned to use, the wallet can stop using that peer.  In most cases,\nthe only consequence of the inaccurate filter is that the wallet uses\nmore bandwidth than(((\"Bitcoin network\", \"compact block filters\", \"downloading multiple\", startref=\"bitcoin-network-compact-filter-download\")))(((\"compact block filters\", \"downloading multiple\", startref=\"compact-block-filter-download\")))(((\"blocks\", \"compact block filters\", \"downloading multiple\", startref=\"block-compact-filter-download\")))(((\"downloading multiple block filters\", startref=\"download-multiple-block\")))(((\"multiple block filters, downloading\", startref=\"multiple-block-download\"))) expected.\n\n==== Reducing Bandwidth with Lossy Encoding\n\nThe data (((\"Bitcoin network\", \"compact block filters\", \"lossy encoding\")))(((\"compact block filters\", \"lossy encoding\")))(((\"blocks\", \"compact block filters\", \"lossy encoding\")))(((\"lossy encoding\")))about the transactions in a block that we want to communicate\nis an output script.  Output scripts vary in length and follow patterns,\nwhich means the differences between them won't be evenly distributed\nlike we want.  However, we've already seen in many places in this book\nthat we can use a hash function to create a commitment to some data and\nalso produce a value that looks like a randomly selected number.\n\nIn other places in this book, we've used a cryptographically secure hash\nfunction that provides assurances about the strength of its commitment\nand how indistinguishable from random its output is.  However, there are\nfaster and more configurable non-cryptographic hash functions, such as\nthe SipHash function we'll use for compact block filters.\n\nThe details of the algorithm used are described in BIP158, but the gist\nis that each output script is reduced to a 64-bit commitment using\nSipHash and some arithmetic operations.  You can think of this as\ntaking a set of large numbers and truncating them to shorter numbers, a\nprocess that loses data (so it's called _lossy encoding_).  By losing\nsome information, we don't need to store as much information later,\nwhich saves space.  In this case, we go from a typical output script\nthat's 160 bits or longer down to just 64 bits.\n\n==== Using Compact Block Filters\n\nThe 64-bit values for every commitment to an output script in a block are\nsorted, duplicate entries are removed, and the GCS is constructed by\nfinding the differences (deltas) between each entry.  That compact block\nfilter is then distributed by peers to their clients (such as wallets).\n\nA client uses the deltas to reconstruct the original commitments.  The\nclient, such as a wallet, also takes all the output scripts it is\nmonitoring for and generates commitments in the same way as BIP158.  It\nchecks whether any of its generated commitments match the commitments in\nthe filter.\n\nRecall our example of the lossiness of compact block filters being\nsimilar to truncating a number.  Imagine a client is looking for a block\nthat contains the number 123456 and that an accurate (but lossy)\ncompact block filter contains the number 1234.  When a client sees that\n1234, it will download the associated block.\n\nThere's a 100% guarantee that an accurate filter containing 1234 will\nallow a client to learn about a block containing 123456, called a _true\npositive_.  However, there's also a chance that the block might contain\n123400, 123401, or almost a hundred other entries that are not what the\nclient is looking for (in this example), (((\"false positives\")))called a _false positive_.\n\nA 100% true positive match rate is great.  It means that a wallet can\ndepend on compact block filters to find every transaction affecting that\nwallet.  A nonzero false positive rate means that the wallet will end\nup downloading some blocks that don't contain transactions interesting\nto the wallet.  The main consequence of this is that the client will use\nextra bandwidth, which is not a huge problem.  The actual\nfalse positive rate for BIP158 compact block filters is very low, so\nit's not a major problem.  A false positive rate can also help improve a\nclient's privacy, as it does with bloom filters, although anyone wanting\nthe best possible privacy should still use their own full node.\n\nIn the long term, some developers advocate for having blocks commit to\nthe filter for that block, with the most likely scheme having each\ncoinbase transaction commit to the filter for that block.  Full nodes\nwould calculate the filter for each block themselves and only accept a\nblock if it contained an accurate commitment.  That would allow a\nlightweight client to download an 80-byte block header, a (usually)\nsmall coinbase transaction, and the filter for that block to receive\nstrong evidence that the filter (((\"Bitcoin network\", \"compact block filters\", startref=\"bitcoin-network-compact-filter\")))(((\"compact block filters\", startref=\"compact-block-filter\")))(((\"blocks\", \"compact block filters\", startref=\"block-compact-filter\")))was accurate.\n\n\n[role=\"less_space pagebreak-before\"]\n=== Lightweight Clients and Privacy\n\nLightweight clients (((\"Bitcoin network\", \"lightweight clients\", \"privacy\")))(((\"lightweight clients\", \"privacy\")))(((\"privacy\", \"lightweight clients\")))have weaker privacy than a full node. A full\nnode downloads all transactions and therefore reveals no information\nabout whether it is using some address in its wallet. A lightweight client\nonly downloads transactions that are related to its wallet in some way.\n\nBloom filters and compact block filters are ways to reduce the loss of privacy. Without them, a\nlightweight client would have to explicitly list the addresses it was interested\nin, creating a serious breach of privacy. However, even with\nfilters, an adversary monitoring the traffic of a lightweight client or\nconnected to it directly as a node in the P2P network may be able to collect enough\ninformation over time to learn the addresses in the wallet of the lightweight\nclient.\n\n=== Encrypted and Authenticated Connections\n\nMost new(((\"Bitcoin network\", \"encryption\")))(((\"encryption\")))(((\"Tor transport\"))) users of\nBitcoin assume that the network communications of a Bitcoin node are\nencrypted. In fact, the original implementation of Bitcoin communicates\nentirely in the clear, as does the modern implementation of Bitcoin Core\nat the time of writing.\n\nAs a way to increase the privacy and security of the Bitcoin P2P\nnetwork, there is a solution that provides encryption of the\ncommunications: _Tor transport_.\n\nTor, which\nstands for _The Onion Routing network_, is a software project and\nnetwork that offers encryption and encapsulation of data through\nrandomized network paths that offer anonymity, untraceability, and\nprivacy.\n\nBitcoin Core (((\"Bitcoin Core\", \"Tor transport\")))offers several configuration options that allow you to run\na Bitcoin node with its traffic transported over the Tor network. In\naddition, Bitcoin Core can also offer a Tor hidden service allowing\nother Tor nodes to connect to your node directly over Tor.\n\nAs of Bitcoin Core version 0.12, a node will offer a hidden Tor service\nautomatically if it is able to connect to a local Tor service. If you\nhave Tor installed and the Bitcoin Core process runs as a user with\nadequate permissions to access the Tor authentication cookie, it should\nwork automatically. Use the +debug+ flag to turn on Bitcoin Core's\ndebugging for the Tor service like this:\n\n----\n$ bitcoind --daemon --debug=tor\n----\n\nYou should see ++tor: ADD_ONION successful++ in the logs, indicating that\nBitcoin Core has added a hidden service to the Tor network.\n\nYou can find more instructions on running Bitcoin Core as a Tor hidden\nservice in the Bitcoin Core documentation (_docs/tor.md_) and various\nonline tutorials.\n\n[role=\"less_space pagebreak-before\"]\n[[mempool]]\n=== Mempools and Orphan Pools\n\nAlmost(((\"Bitcoin network\", \"mempools\")))(((\"Bitcoin network\", \"orphan pools\")))(((\"memory pool\")))(((\"orphan pools\")))(((\"unconfirmed transactions\")))(((\"transactions\", \"unconfirmed\"))) every node on the Bitcoin\nnetwork maintains a temporary list of unconfirmed transactions called\nthe _memory pool_ (_mempool_). Nodes use this pool\nto keep track of transactions that are known to the network but are not\nyet included in the blockchain, called _unconfirmed transactions_.\n\nAs unconfirmed transactions are received and verified, they are added to the\nmempool and relayed to the neighboring nodes to propagate on\nthe network.\n\nSome node\nimplementations also maintain a separate pool of orphaned transactions.\nIf a transaction's inputs refer to a transaction that is not yet known,\nsuch as a missing parent, the orphan transaction will be stored\ntemporarily in the orphan pool until the parent transaction arrives.\n\nWhen a transaction is added to the mempool, the orphan pool is\nchecked for any orphans that reference this transaction's outputs (its\nchildren). Any matching orphans are then validated. If valid, they are\nremoved from the orphan pool and added to the mempool,\ncompleting the chain that started with the parent transaction. In light\nof the newly added transaction, which is no longer an orphan, the\nprocess is repeated recursively looking for any further descendants\nuntil no more descendants are found. Through this process, the arrival\nof a parent transaction triggers a cascade reconstruction of an entire\nchain of interdependent transactions by reuniting the orphans with\ntheir parents all the way down the chain.\n\nSome implementations of Bitcoin also maintain a UTXO\ndatabase, which is the set of all unspent outputs on the\nblockchain. This represents a different set of data from the mempool. Unlike the\nmempool and orphan pools, the UTXO database\ncontains millions of entries of unspent transaction outputs,\neverything that is unspent from all the way back to the genesis block.\nThe UTXO database is stored as a\ntable on persistent storage.\n\nWhereas the mempool and orphan pools represent a single node's local\nperspective and might vary significantly from node to node depending\non when the node was started or restarted, the UTXO database represents\nthe emergent consensus of the network and therefore will not usually\nvary between nodes.\n\nNow that we have an understanding of many of the data types and\nstructures used by nodes and clients to send data across the Bitcoin\nnetwork, it's time to look at the software that's responsible for\nkeeping the network secure and operational.\n"
        },
        {
          "name": "ch11_blockchain.adoc",
          "type": "blob",
          "size": 37.7841796875,
          "content": "[[blockchain]]\n== The Blockchain\n\nThe (((\"blockchain\", \"explained\", id=\"blockchain-explain\")))blockchain is the history of every confirmed Bitcoin transaction.\nIt's what allows every full node to independently determine what keys and\nscripts control which bitcoins.  In this chapter, we'll look at the\nstructure of the blockchain and see how it uses cryptographic\ncommitments and other clever tricks to make every part of it easy for\nfull nodes (and sometimes lightweight clients) to validate.\n\nThe blockchain data structure is\nan ordered, back-linked list of blocks of transactions.  The blockchain\ncan be stored as a flat file or in a simple database.\nBlocks are linked \"back,\" each referring to the previous block in the\nchain. The blockchain is often visualized\nas a vertical stack, with blocks layered on top of each other and the\nfirst block serving as the foundation of the stack. The visualization of\nblocks stacked on top of each other results in the use of terms such as\n\"height\" to refer to the distance from the first block, and \"top\" or\n\"tip\" to refer to the most recently added block.\n\nEach block\nwithin the blockchain is identified by a hash, generated using the\nSHA256 cryptographic hash algorithm on the header of the block. Each\nblock also commits to the previous block, known as (((\"parent blocks\")))the _parent_ block,\nthrough the \"previous block hash\" field in the block header.\nThe sequence of hashes linking each block to its parent creates a chain\ngoing back all the way to the first block ever created, known (((\"genesis block\")))as the\n_genesis block_.\n\nAlthough a block has just one parent, it can have (((\"child blocks\")))multiple\nchildren. Each of the children commits to the same parent block.\nMultiple children arise during a blockchain \"fork,\" a temporary\nsituation that can occur when different blocks are discovered almost\nsimultaneously by different miners (see <<forks>>). Eventually only one\nchild block becomes part of the blockchain accepted by all full nodes, and the \"fork\" is resolved.\n\nThe \"previous block hash\" field is inside the block header and thereby\naffects the _current_ block's hash.\nAny change to a parent block\nrequires a child block's hash to change, which requires a change in the\npointer of the grandchild, which in turn changes the grandchild, and so\non. This sequence ensures that, once a block has many generations\nfollowing it, it cannot be changed without forcing a recalculation of\nall subsequent blocks. Because such a recalculation would require\nenormous computation (and therefore energy consumption), the existence\nof a long chain of blocks makes the blockchain's deep history impractical to change,\nwhich is a key feature of Bitcoin's security.\n\nOne way to think about the blockchain is like layers in a geological\nformation, or glacier core sample. The surface layers might change with\nthe seasons, or even be blown away before they have time to settle. But\nonce you go a few inches deep, geological layers become more and more\nstable. By the time you look a few hundred feet down, you are looking at\na snapshot of the past that has remained undisturbed for millions of\nyears. In the blockchain, the most recent few blocks might be revised if\nthere is a chain reorganization due to a fork. The top six blocks are\nlike a few inches of topsoil. But once you go more deeply into the\nblockchain, beyond six blocks, blocks are less and less likely to\nchange. After 100 blocks back there is so much stability that\nthe coinbase transaction--the transaction containing the reward in\nbitcoin for creating a new block--can be spent.\nWhile the\nprotocol always allows a chain to be undone by a longer chain and while\nthe possibility of any block being reversed always exists, the\nprobability of such an event decreases as time passes until it (((\"blockchain\", \"explained\", startref=\"blockchain-explain\")))becomes\ninfinitesimal.\n\n=== Structure of a Block\n\nA block (((\"blocks\", \"structure of\")))is a container data structure that aggregates\ntransactions for inclusion in the blockchain. The\nblock is made of a header, containing metadata, followed by a long list\nof transactions that make up the bulk of its size. The block header is\n80 bytes, whereas the total size of all transactions in a block can be\nup to about 4,000,000 bytes.  A complete block,\nwith all transactions, can therefore be almost 50,000 times larger than the block\nheader. <<block_structure1>> describes how Bitcoin Core stores the structure of a block.\n\n++++\n<table id=\"block_structure1\">\n<caption>The structure of a block</caption>\n<thead>\n<tr>\n<th>Size</th>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><p>4 bytes</p></td>\n<td><p>Block Size</p></td>\n<td><p>The size of the block, in bytes, following this field</p></td>\n</tr>\n<tr>\n<td><p>80 bytes</p></td>\n<td><p>Block Header</p></td>\n<td><p>Several fields form the block header</p></td>\n</tr>\n<tr>\n<td><p>1–3 bytes (compactSize)</p></td>\n<td><p>Transaction Counter</p></td>\n<td><p>How many transactions follow</p></td>\n</tr>\n<tr>\n<td><p>Variable</p></td>\n<td><p>Transactions</p></td>\n<td><p>The transactions recorded in this block</p></td>\n</tr>\n</tbody>\n</table>\n++++\n\n\n[[block_header]]\n=== Block Header\n\nThe (((\"blocks\", \"block header\")))(((\"block header\")))block header consists of\nblock metadata as shown in <<block_header_structure_ch09>>.\n\n++++\n<table id=\"block_header_structure_ch09\">\n<caption>The structure of the block header</caption>\n<thead>\n<tr>\n<th>Size</th>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><p>4 bytes</p></td>\n<td><p>Version</p></td>\n<td><p>Originally a version field; its use has evolved over time</p></td>\n</tr>\n<tr>\n<td><p>32 bytes</p></td>\n<td><p>Previous Block Hash</p></td>\n<td><p>A hash of the previous (parent) block in the chain</p></td>\n</tr>\n<tr>\n<td><p>32 bytes</p></td>\n<td><p>Merkle Root</p></td>\n<td><p>The root hash of the merkle tree of this block’s transactions</p></td>\n</tr>\n<tr>\n<td><p>4 bytes</p></td>\n<td><p>Timestamp</p></td>\n<td><p>The approximate creation time of this block (Unix epoch time)</p></td>\n</tr>\n<tr>\n<td><p>4 bytes</p></td>\n<td><p>Target</p></td>\n<td><p>A compact encoding of the proof-of-work target for this block</p></td>\n</tr>\n<tr>\n<td><p>4 bytes</p></td>\n<td><p>Nonce</p></td>\n<td><p>Arbitrary data used for the proof-of-work algorithm</p></td>\n</tr>\n</tbody>\n</table>\n++++\n\nThe nonce, target, and timestamp are used in the mining\nprocess and will be discussed in more detail in <<mining>>.\n\n[[block_hash]]\n=== Block Identifiers: Block Header Hash and Block Height\n\nThe (((\"blocks\", \"identifiers\", id=\"block-identify\")))(((\"block header hash\", id=\"block-header-hash\")))(((\"block height\", id=\"block-height\")))primary identifier of a block\nis its cryptographic hash, a commitment made by hashing the\nblock header twice through the SHA256 algorithm. The resulting 32-byte\nhash is called the _block hash_ but is more accurately the _block header\nhash_, pass:[<span class=\"keep-together\">because only the block header is\nused to compute it. For example,</span>]\n+000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f+ is\nthe block hash of the first block on Bitcoin's blockchain. The block hash\nidentifies a block uniquely and unambiguously and can be independently\nderived by any node by simply hashing the block header.\n\nNote that the block hash is not actually included inside the block's\ndata structure.\nInstead, the block's hash is computed by each node as the\nblock is received from the network. The block hash might be stored in a\nseparate database table as part of the block's metadata, to facilitate\nindexing and faster retrieval of blocks from disk.\n\nA second way to identify a block is by its position in the blockchain,\ncalled the pass:[<span class=\"keep-together\"><em>block height</em>. The\ngenesis block is at block height 0 (zero) and is the</span>]\npass:[<span class=\"keep-together\">same block that was previously\nreferenced by the following block hash</span>]\n+000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f+. A\nblock can thus be identified in two ways: by referencing the block hash\nor by referencing the block height. Each subsequent block added \"on top\"\nof that first block is one position \"higher\" in the blockchain, like\nboxes stacked one on top of the other. The block height 800,000 was\nreached during the writing of this book in mid-2023, meaning there were\n800,000 blocks stacked on top of the first block created in January\n2009.\n\nUnlike the block hash, the block height is not a unique identifier.\nAlthough a single block will always have a specific and invariant block\nheight, the reverse is not true—the block height does not always\nidentify a single block. Two or more blocks might have the same block\nheight, competing for the same position in the blockchain. This scenario\nis discussed in detail in the section <<forks>>.  In early blocks, the block height was\nalso not a part of the block's data structure; it was not stored within\nthe block. Each node dynamically identified a block's position (height)\nin the blockchain when it was received from the Bitcoin network.  A\nlater protocol change (BIP34) began including the block height in the\ncoinbase transaction, although its purpose was to ensure each block had\na different coinbase transaction.  Nodes still need to dynamically\nidentify a block's height in order to validate the coinbase field.  The\nblock height might also be stored as metadata in an indexed database\ntable for faster retrieval.\n\n[TIP]\n====\nA block's _block hash_ always identifies a single block uniquely. A\nblock also always has a specific _block height_. However, it is not\nalways the case that a specific block height identifies a single\nblock. Rather, two or more blocks might compete for a single position(((\"blocks\", \"identifiers\", startref=\"block-identify\")))(((\"block header hash\", startref=\"block-header-hash\")))(((\"block height\", startref=\"block-height\"))) in\nthe blockchain.\n====\n\n=== The Genesis Block\n\nThe first block(((\"blockchain\", \"genesis block\", id=\"blockchain-genesis\")))(((\"genesis block\", id=\"genesis-block\")))(((\"Bitcoin Core\", \"genesis block\", id=\"bitcoin-core-genesis\"))) in the blockchain is called the _genesis block_\nand was created in 2009. It is the common ancestor of all the blocks in\nthe blockchain, meaning that if you start at any block and follow the\nchain backward in time, you will eventually arrive at the genesis block.\n\nEvery node always starts with a blockchain of at least one block because\nthe genesis block is statically encoded within Bitcoin Core,\nsuch that it cannot be altered. Every node always \"knows\" the\ngenesis block's hash and structure, the fixed time it was created, and\neven the single transaction within. Thus, every node has the starting\npoint for the blockchain, a secure \"root\" from which to build a trusted\nblockchain.\n\nSee the statically encoded genesis block inside the Bitcoin Core client\nin https://oreil.ly/FqPW5[_chainparams.cpp_].\n\nThe following identifier hash belongs to the genesis block:\n\n----\n000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\n----\n\nYou can search for that block hash in almost any block explorer website, such\nas _blockstream.info_, and you will find a page describing the contents\nof this block, with a URL containing that hash:\n\n[quote]\n____\nhttps://blockstream.info/block/000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\n____\n\nAlternatively, you can get the block using Bitcoin Core on the command line:\n\n----\n$ bitcoin-cli getblock \\\n  000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\n----\n[source,json]\n----\n{\n  \"hash\": \"000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\",\n  \"confirmations\": 790496,\n  \"height\": 0,\n  \"version\": 1,\n  \"versionHex\": \"00000001\",\n  \"merkleroot\": \"4a5e1e4baab89f3a32518a88c3[...]76673e2cc77ab2127b7afdeda33b\",\n  \"time\": 1231006505,\n  \"mediantime\": 1231006505,\n  \"nonce\": 2083236893,\n  \"bits\": \"1d00ffff\",\n  \"difficulty\": 1,\n  \"chainwork\": \"[...]000000000000000000000000000000000000000000000100010001\",\n  \"nTx\": 1,\n  \"nextblockhash\": \"00000000839a8e6886ab5951d7[...]fc90947ee320161bbf18eb6048\",\n  \"strippedsize\": 285,\n  \"size\": 285,\n  \"weight\": 1140,\n  \"tx\": [\n    \"4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\"\n  ]\n}\n----\n\nThe genesis block contains a message within it. The coinbase\ntransaction input contains the text \"The Times 03/Jan/2009 Chancellor on\nbrink of second bailout for banks.\" This message was intended to offer\nproof of the earliest date this block could have been created, by referencing the\nheadline of the British newspaper _The Times_. It also serves as a\ntongue-in-cheek reminder of the importance of an independent monetary\nsystem, with Bitcoin's launch occurring at the same time as an\nunprecedented worldwide monetary crisis. The message was embedded in the\nfirst block by Satoshi Nakamoto, Bitcoin's (((\"Nakamoto, Satoshi\")))(((\"blockchain\", \"genesis block\", startref=\"blockchain-genesis\")))(((\"genesis block\", startref=\"genesis-block\")))(((\"Bitcoin Core\", \"genesis block\", startref=\"bitcoin-core-genesis\")))creator.\n\n=== Linking Blocks in the Blockchain\n\nBitcoin(((\"blockchain\", \"linking blocks\", id=\"blockchain-link\")))(((\"blocks\", \"linking in blockchain\", id=\"block-link\")))(((\"linking blocks in blockchain\", id=\"link-block\"))) full nodes validate every\nblock in the blockchain after the genesis block. Their local view of\nthe blockchain is constantly updated as new blocks are found and used to\nextend the chain. As a node receives incoming blocks from the network,\nit will validate these blocks and then link them to its view of the existing\nblockchain. To establish a link, a node will examine the incoming block\nheader and look for the \"previous block hash.\"\n\n[role=\"less_space pagebreak-before\"]\nLet's assume, for example, that a node has 277,314 blocks in the local\ncopy of the blockchain. The last block the node knows about is block\n277,314, with a block header hash of:\n\n----\n00000000000000027e7ba6fe7bad39faf3b5a83daed765f05f7d1b71a1632249\n----\n\nThe Bitcoin node then receives a new block from the network, which it\nparses as follows:\n\n[source,json]\n----\n{\n    \"size\" : 43560,\n    \"version\" : 2,\n    \"previousblockhash\" :\n        \"00000000000000027e7ba6fe7bad39faf3b5a83daed765f05f7d1b71a1632249\",\n    \"merkleroot\" :\n        \"5e049f4030e0ab2debb92378f53c0a6e09548aea083f3ab25e1d94ea1155e29d\",\n    \"time\" : 1388185038,\n    \"difficulty\" : 1180923195.25802612,\n    \"nonce\" : 4215469401,\n    \"tx\" : [\n        \"257e7497fb8bc68421eb2c7b699dbab234831600e7352f0d9e6522c7cf3f6c77\",\n        \"[... many more transactions omitted ...]\",\n        \"05cfd38f6ae6aa83674cc99e4d75a1458c165b7ab84725eda41d018a09176634\"\n    ]\n}\n----\n\nLooking at this new block, the node finds the +previousblockhash+ field,\nwhich contains the hash of its parent block. It is a hash known to the\nnode, that of the last block on the chain at height 277,314. Therefore,\nthis new block is a child of the last block on the chain and extends the\nexisting blockchain. The node adds this new block to the end of the\nchain, making the blockchain longer with a new height of 277,315.\n<<chain_of_blocks>> shows the chain of three blocks, linked by\nreferences in(((\"blockchain\", \"linking blocks\", startref=\"blockchain-link\")))(((\"blocks\", \"linking in blockchain\", startref=\"block-link\")))(((\"linking blocks in blockchain\", startref=\"link-block\"))) the +previousblockhash+ field.\n\n[[chain_of_blocks]]\n.Blocks linked in a chain by each referencing the previous block header hash.\nimage::images/mbc3_1101.png[]\n\n[[merkle_trees]]\n=== Merkle Trees\n\nEach block(((\"blockchain\", \"merkle trees\", id=\"blockchain-merkle\")))(((\"merkle trees\", id=\"merkle-tree-explain\"))) in the Bitcoin blockchain contains\na summary of all the transactions in the block using a _merkle tree_.\n\nA _merkle tree_, also known\nas a _binary hash tree_, is (((\"binary hash trees\")))a data structure used for efficiently\nsummarizing and verifying the integrity of large sets of data. Merkle\ntrees are binary trees containing cryptographic hashes. The term \"tree\"\nis used in computer science to describe a branching data structure, but\nthese trees are usually displayed upside down with the \"root\" at the top\nand the \"leaves\" at the bottom of a diagram, as you will see in the\nexamples that follow.\n\nMerkle trees are used in Bitcoin to summarize all the transactions in a\nblock, producing an overall commitment to the entire set of\ntransactions and permitting a very efficient process to verify whether a\ntransaction is included in a block. A merkle tree is constructed by\nrecursively hashing pairs of elements until there is only one hash, called\nthe _root_, or _merkle root_. The cryptographic hash algorithm used in\nBitcoin's merkle trees is SHA256 applied twice, also known as\ndouble-SHA256.\n\nWhen N data elements are hashed and summarized in a merkle tree, you can\ncheck to see if any one data element is included in the tree with \nabout +log~2~(N)+ calculations, making this a very efficient data\nstructure.\n\nThe merkle tree is constructed bottom-up. In the following example, we\nstart with four transactions, A, B, C, and D, which form the _leaves_ of\nthe merkle tree, as shown in <<simple_merkle>>. The transactions are not\nstored in the merkle tree; rather, their data is hashed and the\nresulting hash is stored in each leaf node as H~A~, H~B~, H~C~, and\nH~D~:\n\n++++\n<pre data-type=\"codelisting\">\nH<sub>A</sub> = SHA256(SHA256(Transaction A))\n</pre>\n++++\n\nConsecutive pairs of leaf nodes are then summarized in a parent node by\nconcatenating the two hashes and hashing them together. For example, to\nconstruct the parent node H~AB~, the two 32-byte hashes of the children\nare concatenated to create a 64-byte string. That string is then\ndouble-hashed to produce the parent node's hash:\n\n++++\n<pre data-type=\"codelisting\">\nH<sub>AB</sub> = SHA256(SHA256(H<sub>A</sub> || H<sub>B</sub>))\n</pre>\n++++\n\nThe process continues until there is only one node at the top, the node\nknown as the merkle root. That 32-byte hash is stored in the block\nheader and summarizes all the data in all four transactions.\n<<simple_merkle>> shows how the root is calculated by pair-wise hashes\nof the nodes.\n\n[[simple_merkle]]\n.Calculating the nodes in a merkle tree.\nimage::images/mbc3_1102.png[\"merkle_tree\"]\n\nBecause the merkle tree is a binary tree, it needs\nan even number of leaf nodes. If there are an odd number of transactions\nto summarize, the last transaction hash will be duplicated to create an\neven number of leaf nodes, also known (((\"balanced merkle trees\")))as a _balanced tree_. This is\nshown in <<merkle_tree_odd>>, where transaction C is duplicated.\nSimilarly, if there are an odd number of hashes to process at any level,\nthe last hash is duplicated.\n\n[[merkle_tree_odd]]\n.Duplicating one data element achieves an even number of data elements.\nimage::images/mbc3_1103.png[\"merkle_tree_odd\"]\n\n.A Design Flaw in Bitcoin's Merkle Tree\n****\nAn extended comment in Bitcoin Core's source code, reproduced here with slight revisions, describes a\nsignificant problem in the design of Bitcoin's duplication of odd\nelements in its merkle tree:\n\n\n____\nWARNING! If you're reading this because you're learning about crypto\nand/or designing a new system that will use merkle trees, keep in mind\nthat the following merkle tree algorithm has a serious flaw related to\nduplicate txids, resulting in a vulnerability (CVE-2012-2459).\n\nThe reason is that if the number of hashes in the list at a given level\nis odd, the last one is duplicated before computing the next level (which\nis unusual in merkle trees). This results in certain sequences of\ntransactions leading to the same merkle root. For example, the two\ntrees in <<cve_tree>>:\n\n[[cve_tree]]\n[role=\"width-90\"]\n.Two Bitcoin-style merkle trees with the same root but a different number of leaves.\nimage::images/mbc3_1104.png[\"Two Bitcoin-style merkle trees with the same root but a different number of leaves\"]\n\nThe transaction lists [1,2,3,4,5,6] and [1,2,3,4,5,6,5,6] (where 5 and\n6 are repeated) result in the same root hash A (because the hash of both\nof (F) and (F,F) is C).\n\nThe vulnerability results from being able to send a block with such a\ntransaction list, with the same merkle root, and the same block hash as\nthe original without duplication, resulting in failed validation. If the\nreceiving node proceeds to mark that block as permanently invalid\nhowever, it will fail to accept further unmodified (and thus potentially\nvalid) versions of the same block. We defend against this by detecting\nthe case where we would hash two identical hashes at the end of the list\ntogether, and treating that identically to the block having an invalid\nmerkle root. Assuming no double-SHA256 collisions, this will detect all\nknown ways of changing the transactions without affecting the merkle\nroot.\n\n++++\n<p data-type=\"attribution\">Bitcoin Core <em>src/consensus/merkle.cpp</em></p>\n++++\n____\n\n****\n\n[role=\"less_space pagebreak-before\"]\nThe same method for constructing a tree from four transactions can be\ngeneralized to construct trees of any size. In Bitcoin it is common to\nhave several thousand transactions in a single\nblock, which are summarized in exactly the same way, producing just 32\nbytes of data as the single merkle root. In <<merkle_tree_large>>, you\nwill see a tree built from 16 transactions. Note that although the root\nlooks bigger than the leaf nodes in the diagram, it is the exact same\nsize, just 32 bytes. Whether there is one transaction or ten\nthousand transactions in the block, the merkle root always summarizes\nthem into 32 bytes.\n\nTo prove that a specific transaction is\nincluded in a block, a node only needs to produce approximately +log~2~(N)+ 32-byte\nhashes, constituting (((\"authentication path\")))(((\"merkle path\")))an _authentication path_ or _merkle path_\nconnecting the specific transaction to the root of the tree. This is\nespecially important as the number of transactions increases because\nthe base-2 logarithm of the number of transactions increases much more\nslowly. This allows Bitcoin nodes to efficiently produce paths of 10 or\n12 hashes (320–384 bytes), which can provide proof of a single\ntransaction out of more than a thousand transactions in a multimegabyte\nblock.\n\n[[merkle_tree_large]]\n.A merkle tree summarizing many data elements.\nimage::images/mbc3_1105.png[\"merkle_tree_large\"]\n\nIn <<merkle_tree_path>>, a node can prove that a transaction K is\nincluded in the block by producing a merkle path that is only four\n32-byte hashes long (128 bytes total). The path consists of the four\nhashes (shown with a shaded background) H~L~,\nH~IJ~, H~MNOP~, and H~ABCDEFGH~. With those four hashes provided as an\nauthentication path, any node can prove that H~K~ (with a black\nbackground at the bottom of the diagram) is included in the merkle root\nby computing four additional pair-wise hashes H~KL~, H~IJKL~,\nH~IJKLMNOP~, and the merkle tree root (outlined in a dashed line in the\ndiagram).\n\n[[merkle_tree_path]]\n.A merkle path used to prove inclusion of a data element.\nimage::images/mbc3_1106.png[\"merkle_tree_path\"]\n\nThe efficiency of merkle trees becomes obvious as the scale increases.\nThe largest possible block can hold almost 16,000 transactions in 4,000,000\nbytes, but proving any particular one of those 16,000 transactions\nis a part of that block only requires a copy of the transaction, a copy\nof the 80-byte block header, and 448 bytes for the merkle proof.  That\nmakes the largest possible proof almost 10,000 times smaller than the\nlargest possible Bitcoin block.\n\n=== Merkle Trees and Lightweight Clients\n\nMerkle trees are (((\"Bitcoin network\", \"lightweight clients\", \"merkle trees and\")))(((\"lightweight clients\", \"merkle trees and\")))used extensively by lightweight clients. Lightweight clients don't\nhave all transactions and do not download full blocks, just block\nheaders. In order to verify that a transaction is included in a block,\nwithout having to download all the transactions in the block, they use\na merkle path.\n\nConsider, for example, a lightweight client that is interested in incoming\npayments to an address contained in its wallet. The lightweight client will\nestablish a bloom filter (see <<bloom_filters>>) on its connections to\npeers to limit the transactions received to only those containing\naddresses of interest. When a peer sees a transaction that matches the\nbloom filter, it will send that block using a +merkleblock+ message. The\n+merkleblock+ message contains the block header as well as a merkle path\nthat links the transaction of interest to the merkle root in the block.\nThe lightweight client can use this merkle path to connect the transaction to the\nblock header and verify that the transaction is included in the block. The lightweight\nclient also uses the block header to link the block to the rest of the\nblockchain. The combination of these two links, between the transaction\nand block and between the block and blockchain, proves that the\ntransaction is recorded in the blockchain. All in all, the lightweight client will\nhave received less than a kilobyte of data for the block header and\nmerkle path, an amount of data that is more than a thousand times less\nthan a full block (about 2 MB (((\"blockchain\", \"merkle trees\", startref=\"blockchain-merkle\")))(((\"merkle trees\", startref=\"merkle-tree-explain\")))currently).\n\n=== Bitcoin's Test Blockchains\n\nYou might be\nsurprised to learn that there is more than one blockchain used with Bitcoin. The\n\"main\" Bitcoin blockchain, the one created by Satoshi Nakamoto on\nJanuary 3rd, 2009, the one with the genesis block we studied in this\nchapter, is (((\"mainnet\")))called _mainnet_.  There are other Bitcoin blockchains that\nare used for testing purposes: at this time _testnet_, _signet_, and\n_regtest_. Let's look at each in turn.\n\n==== Testnet: Bitcoin's Testing Playground\n\nTestnet is (((\"blockchain\", \"test blockchains\", \"testnet\", id=\"blockchain-test-testnet\")))(((\"test blockchains\", \"testnet\", id=\"test-block-testnet\")))(((\"testnet\", id=\"testnet\")))the name of the test blockchain, network, and currency that\nis used for testing purposes. The testnet is a fully featured live P2P\nnetwork, with wallets, test bitcoins (testnet coins), mining, and all\nthe other features of mainnet.  The most important difference is that\ntestnet coins are meant to be worthless.\n\nAny software development that is intended for production use on\nBitcoin's mainnet can first be tested on testnet with test coins.\nThis protects both the developers from monetary losses due to bugs and\nthe network from unintended behavior due to bugs.\n\nThe current testnet is called _testnet3_, the third iteration of\ntestnet, restarted in February 2011 to reset the difficulty from the\nprevious testnet.  Testnet3 is a large blockchain, in excess of 30 GB in\n2023. It will take a while to sync fully and use up resources\non your computer. Not as much as mainnet, but not exactly \"lightweight\"\neither.\n\n[TIP]\n====\nTestnet and the other test blockchains described in this book don't use\nthe same address prefixes as mainnet addresses to prevent someone from\naccidentally sending real bitcoins to a test address.  Mainnet addresses\nbegin with +1+, +3+, or +bc1+.  Addresses for the test networks\nmentioned in this book begin with +m+, +n+, or +tb1+.  Other test\nnetworks, or new protocols being developed on test networks, may use\nother address prefixes or alterations.\n====\n\n===== Using testnet\n\nBitcoin Core, like(((\"Bitcoin Core\", \"testnet\"))) many other Bitcoin programs, has full support\nfor operation on testnet as an alternative mainnet. All of Bitcoin Core's\nfunctions work on testnet, including the wallet, mining testnet coins,\nand syncing a full testnet node.\n\n[role=\"less_space pagebreak-before\"]\nTo start Bitcoin Core on testnet instead of mainnet you use the\n+testnet+ switch:\n\n----\n$ bitcoind -testnet\n----\n\nIn the logs you should see that bitcoind is building a new blockchain in\nthe +testnet3+ subdirectory of the default bitcoind directory:\n\n----\nbitcoind: Using data directory /home/username/.bitcoin/testnet3\n----\n\nTo connect to bitcoind, you use the +bitcoin-cli+ command-line tool, but\nyou must also switch it to testnet mode:\n\n----\n$ bitcoin-cli -testnet getblockchaininfo\n{\n  \"chain\": \"test\",\n  \"blocks\": 1088,\n  \"headers\": 139999,\n  \"bestblockhash\": \"0000000063d29909d475a1c[...]368e56cce5d925097bf3a2084370128\",\n  \"difficulty\": 1,\n  \"mediantime\": 1337966158,\n  \"verificationprogress\": 0.001644065914099759,\n  \"chainwork\": \"[...]000000000000000000000000000000000000000000044104410441\",\n  \"pruned\": false,\n  \"softforks\": [\n\n  [...]\n----\n\nYou can also run on testnet3 with other full-node implementations, such\nas +btcd+ (written in Go) and +bcoin+ (written in JavaScript), to\nexperiment and learn in other programming languages and frameworks.\n\nTestnet3 supports all the features of mainnet, including\nsegregated witness v0 and v1 (see <<segwit>> and <<taproot>>). Therefore, testnet3 can also be\nused to test segregated witness features.\n\n===== Problems with testnet\n\nTestnet doesn't just use the same data structures as Bitcoin, it also\nuses almost exactly the same proof-of-work security mechanism as\nBitcoin.  The notable differences for testnet are that its minimum\ndifficulty is half that of Bitcoin and that it's allowed to include a\nblock at the minimum difficulty if that block's timestamp is more than\n20 minutes after the previous block.\n\nUnfortunately, Bitcoin's PoW security mechanism was designed to depend\non economic incentives--incentives which don't exist in a test\nblockchain that is forbidden from having value.  On mainnet, miners are\nincentivized to include user transactions in their blocks because those\ntransactions pay fees.  On testnet, transactions still contain something\ncalled fees, but those fees don't have any economic value.  That means\nthe only incentive for a testnet miner to include transactions is\nbecause they want to help users and developers to test their software.\n\nAlas, people who like to disrupt systems often feel a stronger\nincentive, at least in the short term.  Because PoW mining is designed\nto be permissionless, anyone can mine, whether their intention is good\nor not.  That means disruptive miners can create many blocks in a row on\ntestnet without including any user transactions.  When those attacks\nhappen, testnet becomes unusable for users and (((\"blockchain\", \"test blockchains\", \"testnet\", startref=\"blockchain-test-testnet\")))(((\"test blockchains\", \"testnet\", startref=\"test-block-testnet\")))(((\"testnet\", startref=\"testnet\")))developers.\n\n==== Signet: The Proof of Authority Testnet\n\nThere's no (((\"blockchain\", \"test blockchains\", \"signet\", id=\"blockchain-test-signet\")))(((\"test blockchains\", \"signet\", id=\"test-block-signet\")))(((\"signet\", id=\"signet\")))known way for a system dependent on permissionless PoW to\nprovide a highly usable blockchain without introducing economic\nincentives, so Bitcoin protocol developers began considering\nalternatives.  The primary goal was to preserve as much of the structure of\nBitcoin as possible so that software could run on a testnet with minimal\nchanges--but to also provide an environment that would remain useful.\nA secondary goal was to produce a reusable design that would allow\ndevelopers of new software to easily create their own test networks.\n\nThe solution implemented in Bitcoin Core and other software is called\n_signet_, as defined by BIP325.  A signet is a test network where each\nblock must contain proof (such as a signature) that the creation of that\nblock was sanctioned by a trusted authority.\n\nWhereas mining in Bitcoin is permissionless--anyone can do it--mining on\nsignet is fully permissioned.  Only those with permission can do it.\nThis would be a completely unacceptable change to Bitcoin's mainnet--no\none would use that software--but it's reasonable on a testnet where coins have\nno value and the only purpose is testing software and systems.\n\nBIP325 signets are designed to make it very easy to create your own.  If\nyou disagree with how someone else is running their signet, you can\nstart your own signet and connect your software to it.\n\n===== The default signet and custom signets\n\nBitcoin Core supports(((\"Bitcoin Core\", \"signet\")))(((\"default signet\")))(((\"custom signets\"))) a default signet, which we believe to be the most\nwidely used signet at the time of writing.  It is currently operated by\ntwo contributors to that project.  If you start Bitcoin Core with the\n+signet+ parameter and no other signet-related parameters, this is the\nsignet you will be using.\n\nAs of this writing, the default signet has about 150,000 blocks and is\nabout a gigabyte in size.  It supports all of the same features as\nBitcoin's mainnet and is also used for testing proposed upgrades through\nthe Bitcoin Inquisition project, which is a software fork of Bitcoin\nCore that's only designed to run on signet.\n\nIf you want to use a different signet, called a _custom signet_, you\nwill need to know the script used to determine when a block is\nauthorized, called(((\"challenge script\"))) the _challenge_ script.  This is a standard Bitcoin\nscript, so it can use features such as multisig to allow multiple people\nto authorize blocks.  You may also need to connect to a seed node that\nwill provide you with the addresses of peers on the custom signet.  For\nexample:\n\n----\nbitcoind -signet -signetchallenge=0123...cdef -signetseednode=example.com:1234\n----\n\nAs of this writing, we generally recommend that the public testing of\nmining software occur on testnet3 and that all other public testing of\nBitcoin software occur on the default signet.\n\nTo interact with your chosen signet, you can use the +-signet+ parameter\nwith +bitcoin-cli+, similar to how you used testnet.  For(((\"blockchain\", \"test blockchains\", \"signet\", startref=\"blockchain-test-signet\")))(((\"test blockchains\", \"signet\", startref=\"test-block-signet\")))(((\"signet\", startref=\"signet\"))) example:\n\n----\n$ bitcoin-cli -signet getblockchaininfo\n{\n  \"chain\": \"signet\",\n  \"blocks\": 143619,\n  \"headers\": 143619,\n  \"bestblockhash\": \"000000c46cb3505ddd296537[...]ad1c5768e2908439382447572a93\",\n  \"difficulty\": 0.003020638517858618,\n  \"time\": 1684530244,\n  \"mediantime\": 1684526116,\n  \"verificationprogress\": 0.999997961940662,\n  \"initialblockdownload\": false,\n  \"chainwork\": \"[...]000000000000000000000000000000000000000000019ab37d2194\",\n  \"size_on_disk\": 769525915,\n  \"pruned\": false,\n  \"warnings\": \"\"\n}\n----\n\n==== Regtest: The Local Blockchain\n\nRegtest, (((\"blockchain\", \"test blockchains\", \"regtest\", id=\"blockchain-test-regtest\")))(((\"test blockchains\", \"regtest\", id=\"test-block-regtest\")))(((\"regtest\", id=\"regtest\")))which stands for\n\"Regression Testing,\" is a Bitcoin Core feature that allows you to\ncreate a local blockchain for testing purposes. Unlike signet and testnet3, which\nare public and shared test blockchains, the regtest blockchains are\nintended to be run as closed systems for local testing. You launch a\nregtest blockchain from scratch. You may\nadd other nodes to the network or run it with a single node only to\ntest the Bitcoin Core software.\n\nTo start (((\"Bitcoin Core\", \"regtest\")))Bitcoin Core in regtest mode, you use the +regtest+ flag:\n\n----\n$ bitcoind -regtest\n----\n\nJust like with testnet, Bitcoin Core will initialize a new blockchain\nunder the _regtest_ subdirectory of your bitcoind default directory:\n\n----\nbitcoind: Using data directory /home/username/.bitcoin/regtest\n----\n\n[role=\"less_space pagebreak-before\"]\nTo use the command-line tool, you need to specify the +regtest+ flag\ntoo. Let's try the +getblockchaininfo+ command to inspect the regtest\nblockchain:\n\n----\n$ bitcoin-cli -regtest getblockchaininfo\n{\n  \"chain\": \"regtest\",\n  \"blocks\": 0,\n  \"headers\": 0,\n  \"bestblockhash\": \"0f9188f13cb7b2c71f2a335e3[...]b436012afca590b1a11466e2206\",\n  \"difficulty\": 4.656542373906925e-10,\n  \"mediantime\": 1296688602,\n  \"verificationprogress\": 1,\n  \"chainwork\": \"[...]000000000000000000000000000000000000000000000000000002\",\n  \"pruned\": false,\n  [...]\n----\n\nAs you can see, there are no blocks yet. Let's create a default wallet,\nget an address, and then mine some (500 blocks) to earn the reward:\n\n----\n$ bitcoin-cli -regtest createwallet \"\"\n\n$ bitcoin-cli -regtest getnewaddress\nbcrt1qwvfhw8pf79kw6tvpmtxyxwcfnd2t4e8v6qfv4a\n\n$ bitcoin-cli -regtest generatetoaddress 500 \\\n  bcrt1qwvfhw8pf79kw6tvpmtxyxwcfnd2t4e8v6qfv4a\n[\n  \"3153518205e4630d2800a4cb65b9d2691ac68eea99afa7fd36289cb266b9c2c0\",\n  \"621330dd5bdabcc03582b0e49993702a8d4c41df60f729cc81d94b6e3a5b1556\",\n  \"32d3d83538ba128be3ba7f9dbb8d1ef03e1b536f65e8701893f70dcc1fe2dbf2\",\n  ...,\n  \"32d55180d010ffebabf1c3231e1666e9eeed02c905195f2568c987c2751623c7\"\n]\n----\n\nIt will only take a few seconds to mine all these blocks, which\ncertainly makes it easy for testing. If you check your wallet balance,\nyou will see that you earned the rewards for the first 400 blocks (coinbase\nrewards must be 100 blocks deep before you can (((\"blockchain\", \"test blockchains\", \"regtest\", startref=\"blockchain-test-regtest\")))(((\"test blockchains\", \"regtest\", startref=\"test-block-regtest\")))(((\"regtest\", startref=\"regtest\")))spend them):\n\n----\n$ bitcoin-cli -regtest getbalance\n12462.50000000\n----\n\n=== Using Test Blockchains for Development\n\nBitcoin's (((\"blockchain\", \"test blockchains\", \"development usage\")))(((\"test blockchains\", \"development usage\")))various\nblockchains (regtest, signet, testnet3, mainnet) offer a range\nof testing environments for bitcoin development. Use the test\nblockchains whether you are developing for Bitcoin Core or another\nfull-node consensus client; developing an application such as a wallet, exchange,\necommerce site; or even developing novel smart contracts and complex\nscripts).\n\nYou can use the test blockchains to establish a development pipeline.\nTest your code locally on a regtest as you develop it. Once you are\nready to try it on a public network, switch to signet or testnet to expose your\ncode to a more dynamic environment with more diversity of code and\napplications. Finally, once you are confident your code works as\nexpected, switch to mainnet to deploy it in production. As you make\nchanges, improvements, bug fixes, etc., start the pipeline again,\ndeploying each change first on regtest, then on signet or testnet, and finally\ninto production.\n\nNow that we know what data the blockchain contains and how cryptographic\ncommitments securely tie the various parts together, we will look at the\nspecial commitment that both provide computational security and\nensure no block can be changed without invalidating all other blocks\nbuilt on top of it: Bitcoin's mining function.\n"
        },
        {
          "name": "ch12_mining.adoc",
          "type": "blob",
          "size": 116.2998046875,
          "content": "[[mining]]\n== Mining and Consensus\n\nThe (((\"mining\", \"purpose of\")))word \"mining\" is somewhat\nmisleading. By evoking the extraction of precious metals, it focuses our\nattention on the reward for mining, the new bitcoins created in each\nblock. Although mining is incentivized by this reward, the primary\npurpose of mining is not the reward or the generation of new bitcoins. If\nyou view mining only as the process by which bitcoins are created, you are\nmistaking the means (incentives) as the goal of the process. Mining is\nthe mechanism that underpins the decentralized clearinghouse, by which\ntransactions are validated and cleared. Mining is one of the inventions that\nmakes Bitcoin special, a decentralized consensus mechanism that is the\nbasis for P2P digital cash.\n\nMining _secures the Bitcoin system_ and enables the\nemergence of network-wide _consensus without a central authority_.\nThe reward of newly minted bitcoins and\ntransaction fees is an incentive scheme that aligns the actions of\nminers with the security of the network, while simultaneously\nimplementing the monetary supply.\n\n[TIP]\n====\n\nMining\nis one of the mechanisms by which Bitcoin's _consensus security_ is _decentralized_.\n====\n\nMiners (((\"mining\", \"operational overview\", id=\"mining-overview\")))record new transactions on the global blockchain. A\nnew block, containing transactions that occurred since the last block,\nis _mined_ every 10 minutes on average, thereby adding those\ntransactions to the blockchain. Transactions that become part of a block\nand added to the blockchain are considered _confirmed_, which allows the\nnew owners of the bitcoins to know that irrevocable effort was expended\nsecuring the bitcoins they received in those\ntransactions.\n\nAdditionally, transactions in the blockchain have a _topological order_\ndefined by their position in the blockchain.  One transaction is\nearlier than another if it appears in an earlier block or if it appears\nearlier in the same block.  In the Bitcoin protocol, a transaction is\nonly valid if it spends the outputs of transactions that appeared\nearlier in the blockchain (whether they are earlier in the same block or\nin an earlier block), and only if no previous transaction spent any of\nthose same outputs.  Within a single chain of blocks, the enforcement of\ntopological ordering ensures no two valid transactions can spend the same\noutput, eliminating the problem of _double spending_.\n\nIn some protocols built on top of Bitcoin, the topological order of\nBitcoin transactions is also used to establish a sequence of events;\nwe'll discuss that idea further in <<single_use_seals>>.\n\nMiners(((\"bitcoins\", \"mining\", \"incentives\")))(((\"mining\", \"incentives\")))(((\"incentives\"))) receive two types of rewards in\nreturn for the security provided by mining: new bitcoins created with each\nnew block (called the _subsidy_), and transaction fees from all the transactions included in\nthe block. To earn this reward, miners compete to satisfy a challenge\nbased on a cryptographic hash algorithm. The\nsolution to the problem, called the proof of work, is included in the\nnew block and acts as proof that the miner expended significant\ncomputing effort. The competition to solve the proof-of-work algorithm\nto earn the reward and the right to record transactions on the\nblockchain is the basis for Bitcoin's security model.\n\nBitcoin's money supply is created in a process that's similar to how\na central bank issues new money by printing bank notes. The maximum\namount of newly created bitcoin a miner can add to a block decreases\napproximately every four years (or precisely every 210,000 blocks). It\nstarted at 50 bitcoins per block in January 2009 and halved to 25\nbitcoins per block in November 2012. It halved again to 12.5 bitcoins\nin July 2016, and again to 6.25 in May 2020. Based on this formula, mining rewards decrease\nexponentially until approximately the year 2140, when all bitcoins\nwill have been issued. After 2140, no new bitcoin\nwill be issued.\n\nBitcoin miners (((\"transaction fees\")))also earn fees from transactions. Every transaction may\ninclude a transaction fee in the form of a surplus of bitcoins between\nthe transaction's inputs and outputs. The winning bitcoin miner gets to\n\"keep the change\" on the transactions included in the winning block.\nToday, the fees usually represent only a small percentage of a\nminer's income, with the\nvast majority coming from the newly minted bitcoins. However, as the\nreward decreases over time and the number of transactions per block\nincreases, a greater proportion of mining earnings will come\nfrom fees. Gradually, the mining reward will be dominated by transaction\nfees, which will form the primary incentive for miners. After 2140, the\namount of new bitcoins in each block drops to zero and mining\nwill be incentivized only by transaction fees.\n\nIn this chapter, we will first examine mining as a monetary supply\nmechanism and then look at the most important function of mining: the\ndecentralized consensus mechanism that underpins Bitcoin's security.\n\nTo understand mining and consensus, we will track Alice's transaction\nas it is received and added to a block by Jing's mining equipment. Then\nwe will follow the block as it is mined, added to the blockchain, and\naccepted by the Bitcoin network through the process of (((\"mining\", \"operational overview\", startref=\"mining-overview\")))emergent\nconsensus.\n\n=== Bitcoin Economics and Currency Creation\n\nBitcoin are (((\"bitcoins\", \"mining\", \"currency creation\", id=\"bitcoin-mining-create\")))(((\"mining\", \"currency creation\", id=\"mining-create\")))(((\"currency creation\", id=\"currency-create\")))(((\"Bitcoin\", \"economics of\", id=\"bitcoin-economics\")))(((\"economics of Bitcoin\", id=\"economics\")))minted during the creation of each block at a\nfixed and diminishing rate. Each block, generated on average every 10\nminutes, contains entirely new bitcoins, created from nothing. Every\n210,000 blocks, or approximately every four years, the currency issuance\nrate is decreased by 50%. For the first four years of operation of the\nnetwork, each block contained 50 new bitcoins.\n\nThe first halving occurred at block 210,000.  The next expected halving\nafter publication of this book will occur at block 840,000, which will\nprobably be produced in April or May of 2024.\nThe rate of new bitcoins decreases\nexponentially over 32 of these _halvings_ until block 6,720,000 (mined\napproximately in year 2137), when it reaches the minimum currency unit\nof 1 satoshi. Finally, after 6.93 million blocks, in approximately 2140,\nalmost 2,099,999,997,690,000 satoshis, or almost 21 million bitcoin,\nwill have been issued. Thereafter, blocks will contain no new bitcoins, and\nminers will be rewarded solely through the transaction fees.\n<<bitcoin_money_supply>> shows the total bitcoins in circulation over\ntime, as the issuance of currency decreases.\n\n[[bitcoin_money_supply]]\n.Supply of bitcoin currency over time based on a geometrically decreasing issuance rate.\nimage::images/mbc3_1201.png[\"BitcoinMoneySupply\"]\n\n[NOTE]\n====\nThe maximum number of bitcoins mined is the _upper limit_ of possible\nmining rewards for Bitcoin. In practice, a miner may intentionally mine\na block taking less than the full reward. Such blocks have already been\nmined and more may be mined in the future, resulting in a lower total\nissuance of the currency.\n====\n\nIn the code in <<max_money>>, we calculate the total amount of\nbitcoin that will be issued.\n\n[[max_money]]\n.A script for calculating how much total bitcoin will be issued\n====\n[source, python]\n----\ninclude::code/max_money.py[]\n----\n====\n\n<<max_money_run>> shows the output produced by running this script.\n\n[[max_money_run]]\n.Running the max_money.py script\n====\n[source,bash]\n----\n$ python max_money.py\nTotal BTC to ever be created: 2099999997690000 Satoshis\n----\n====\n\nThe finite and diminishing issuance creates a fixed monetary supply that\nresists inflation. Unlike a fiat currency, which can be printed in\ninfinite numbers by a central bank, no individual party has the ability\nto inflate the supply of (((\"bitcoins\", \"mining\", \"currency creation\", startref=\"bitcoin-mining-create\")))(((\"mining\", \"currency creation\", startref=\"mining-create\")))(((\"currency creation\", startref=\"currency-create\")))bitcoin.\n\n.Deflationary Money\n****\nThe most (((\"deflation\", id=\"deflation\")))(((\"inflation\", id=\"inflation\")))important and debated consequence of\nfixed and diminishing monetary issuance is that the currency tends to be\ninherently _deflationary_. Deflation is the phenomenon of appreciation\nof value due to a mismatch in supply and demand that drives up the value\n(and exchange rate) of a currency. Price deflation is the opposite of inflation; it means that the money has more purchasing power over time.\n\nMany economists argue that a deflationary economy is a disaster that\nshould be avoided at all costs. That is because in a period of rapid\ndeflation, people tend to hoard money instead of spending it, hoping\nthat prices will fall. Such a phenomenon unfolded during Japan's \"Lost\nDecade,\" when a complete collapse of demand pushed the currency into a\ndeflationary spiral.\n\nBitcoin experts argue that deflation is not bad per se. Rather,\ndeflation is associated with a collapse in demand because that is the\nmost obvious example of deflation we have to study. In a fiat currency with the\npossibility of unlimited printing, it is very difficult to enter a\ndeflationary spiral unless there is a complete collapse in demand and an\nunwillingness to print money. Deflation in Bitcoin is not caused by a\ncollapse in demand, but by a predictably constrained supply.\n\nThe positive aspect of deflation, of course, is that it is the opposite\nof inflation. Inflation causes a slow but inevitable debasement of\ncurrency, resulting in a form of hidden taxation that punishes savers in\norder to bail out debtors (including the biggest debtors, governments\nthemselves). Currencies under government control suffer from the moral\nhazard of easy debt issuance that can later be erased through debasement\nat the expense of savers.\n\nIt remains to be seen whether the deflationary aspect of the currency is\na problem when it is not driven by rapid economic retraction, or an\nadvantage because the protection from inflation and debasement\noutweighs the risks of(((\"Bitcoin\", \"economics of\", startref=\"bitcoin-economics\")))(((\"economics of Bitcoin\", startref=\"economics\")))(((\"deflation\", startref=\"deflation\")))(((\"inflation\", startref=\"inflation\"))) deflation.\n****\n\n=== Decentralized Consensus\n\nIn the (((\"mining\", \"decentralized consensus\", id=\"mining-consensus\")))(((\"decentralized consensus\", id=\"decentral-consensus\")))(((\"emergent consensus\", id=\"emergent-consensus\")))(((\"consensus\", see=\"decentralized consensus\")))previous chapter we looked at the\nblockchain, the global list of all transactions, which\neveryone in the Bitcoin network accepts as the authoritative record of\nownership transfers.\n\nBut how can everyone in the network agree on a single universal \"truth\"\nabout who owns what, without having to trust anyone? All traditional\npayment systems depend on a trust model that has a central authority\nproviding a clearinghouse service, basically verifying and clearing all\ntransactions. Bitcoin has no central authority, yet somehow every full\nnode has a complete copy of a public blockchain that it can trust as the\nauthoritative record. The blockchain is not created by a central\nauthority but is assembled independently by every node in the network.\nSomehow, every node in the network, acting on information transmitted\nacross insecure network connections, can arrive at the same conclusion\nand assemble a copy of the same blockchain as everyone else. This\nchapter examines the process by which the Bitcoin network achieves\nglobal consensus without central authority.\n\nOne of Satoshi Nakamoto's inventions is the decentralized\nmechanism for _emergent consensus_. Emergent because consensus is not\nachieved explicitly—there is no election or fixed moment when consensus\noccurs. Instead, consensus is an emergent artifact of the asynchronous\ninteraction of thousands of independent nodes, all following simple\nrules. All the properties of Bitcoin, including currency, transactions,\npayments, and the security model that does not depend on central\nauthority or trust, derive from this invention.\n\nBitcoin's decentralized consensus emerges from the interplay of four\nprocesses that occur independently on nodes across the network:\n\n- Independent verification of each transaction, by every full node,\n  based on a comprehensive list of criteria\n\n- Independent aggregation of those transactions into new blocks by\n  mining nodes, coupled with demonstrated computation through a\n  proof-of-work algorithm\n\n- Independent verification of the new blocks by every node and assembly\n  into a chain\n\n- Independent selection, by every node, of the chain with the most\n  cumulative computation demonstrated through proof of work\n\nIn the next few sections, we will examine these processes and how they\ninteract to create the emergent property of network-wide consensus that\nallows any Bitcoin node to assemble its own copy of the authoritative,\ntrusted, public, global (((\"mining\", \"decentralized consensus\", startref=\"mining-consensus\")))(((\"decentralized consensus\", startref=\"decentral-consensus\")))(((\"emergent consensus\", startref=\"emergent-consensus\")))blockchain.\n\n[[tx_verification]]\n=== Independent Verification of Transactions\n\nIn\n<<c_transactions>>, we saw (((\"mining\", \"independent transaction verification\", id=\"mining-verify\")))(((\"transactions\", \"independent verification\", id=\"transaction-verify\")))(((\"independent transaction verification\", id=\"independent-transaction-verify\")))(((\"verifying\", \"transactions\", id=\"verify-transaction\")))(((\"nodes\", \"transaction verification\", id=\"node-verify\")))how wallet software creates transactions by\ncollecting UTXOs, providing the appropriate authentication data, and then\nconstructing new outputs assigned to a new owner. The resulting\ntransaction is then sent to the neighboring nodes in the Bitcoin network\nso that it can be propagated across the entire Bitcoin network.\n\nHowever, before forwarding transactions to its neighbors, every Bitcoin\nnode that receives a transaction will first verify the transaction. This\nensures that only valid transactions are propagated across the network,\nwhile invalid transactions are discarded at the first node that\nencounters them.\n\nEach node verifies every transaction against a long checklist of\ncriteria:\n\n- The transaction's syntax and data structure must be correct.\n\n- Neither lists of inputs nor outputs are empty.\n\n- The transaction weight is low enough to allow it to fit in a block.\n\n- Each output value, as well as the total, must be within the allowed\n  range of values (zero or more, but not exceeding 21 million bitcoins).\n\n- Lock time is equal to +INT_MAX+, or lock time and sequence\n  values are satisfied according to the lock time and BIP68 rules.\n\n- The number of signature operations (SIGOPS) contained in the\n  transaction is less than the signature operation limit.\n\n- The outputs being spent match outputs in the mempool or unspent\n  outputs in a block in the main branch.\n\n- For each input, if the referenced output transaction is a coinbase\n  output, it must have at least +COINBASE_MATURITY+ (100) confirmations.\n  Any absolute or relative lock time must also be satisfied.  Nodes may\n  relay transactions a block before they mature since they will be\n  mature if included in the next block.\n\n- Reject if the sum of input values is less than sum of output values.\n\n- The scripts for each input must validate against the\n  corresponding output scripts.\n\nNote that the conditions change over time, to add new features or\naddress new types of denial-of-service attacks.\n\nBy independently verifying each transaction as it is received and before\npropagating it, every node builds a pool of valid (but unconfirmed)\ntransactions known (((\"mining\", \"independent transaction verification\", startref=\"mining-verify\")))(((\"transactions\", \"independent verification\", startref=\"transaction-verify\")))(((\"independent transaction verification\", startref=\"independent-transaction-verify\")))(((\"verifying\", \"transactions\", startref=\"verify-transaction\")))(((\"nodes\", \"transaction verification\", startref=\"node-verify\")))(((\"memory pool\")))as the _memory pool_ or\n_mempool_.\n\n=== Mining Nodes\n\nSome of the(((\"mining\", \"miner nodes, purpose of\", id=\"mining-nodes-purpose\")))(((\"nodes\", \"miner nodes\", \"purpose of\", id=\"nodes-miner-purpose\"))) nodes on the Bitcoin network are specialized nodes\ncalled _miners_. Jing is a\nBitcoin miner; he\nearns bitcoin by running a \"mining rig,\" which is a specialized\ncomputer-hardware system designed to mine bitcoin. Jing's specialized\nmining hardware is connected to a server running a full node.\nLike every other full node, Jing's node receives and\npropagates unconfirmed transactions on the Bitcoin network. Jing's node,\nhowever, also aggregates these transactions into new blocks.\n\nLet's follow the blocks that were created during the time Alice made a\npurchase from Bob (see <<spending_bitcoin>>).  For the purpose of\ndemonstrating the concepts in this chapter, let's assume the block\ncontaining Alice's transaction was mined by Jing's mining system and\nfollow Alice's transaction as it becomes part of this new block.\n\nJing's mining node maintains a local copy of the blockchain. By the time\nAlice buys something, Jing's\nnode is caught up with the chain of blocks with the most proof of work.\nJing's node is listening\nfor transactions, trying to mine a new block and also listening for\nblocks discovered by other nodes. As Jing's node is mining, it receives\na new block through the Bitcoin network. The arrival of this block\nsignifies the end of the search for that block and the beginning\nof the search to create the next block.\n\nDuring the previous several minutes, while Jing's node was searching for a\nsolution to the previous block, it was also collecting transactions in\npreparation for the next block. By now it has collected a few thousand\ntransactions in its memory pool. Upon receiving the new block and\nvalidating it, Jing's node will also compare it against all the\ntransactions in the memory pool and remove any that were included in\nthat block. Whatever transactions remain in the memory pool are\nunconfirmed and are waiting to be recorded in a new block.\n\nJing's node immediately constructs a new partial block, a\ncandidate for the next block. This block is (((\"candidate blocks\")))(((\"blocks\", \"candidate blocks\")))called a _candidate block_\nbecause it is not yet a valid block, as it does not contain a valid\nproof-of-work. The block becomes valid only if the miner succeeds in\nfinding a solution according to the proof-of-work algorithm.\n\nWhen Jing's node aggregates all the transactions from the memory pool,\nthe new candidate block has several thousand transactions that each pay\ntransaction fees he'll attempt to(((\"mining\", \"miner nodes, purpose of\", startref=\"mining-nodes-purpose\")))(((\"nodes\", \"miner nodes\", \"purpose of\", startref=\"nodes-miner-purpose\"))) claim.\n\n==== The Coinbase Transaction\n\nThe (((\"bitcoins\", \"mining\", \"coinbase transactions\", id=\"bitcoin-mining-coinbase\")))(((\"mining\", \"coinbase transactions\", id=\"mining-coinbase\")))(((\"nodes\", \"miner nodes\", \"coinbase transactions\", id=\"nodes-miner-coinbase\")))(((\"coinbase transactions\", id=\"coinbase\")))(((\"transactions\", \"coinbase\", id=\"transaction-coinbase\")))first transaction in any\nblock is a special transaction, called a _coinbase transaction_. This\ntransaction is constructed by Jing's node and pays out his _reward_ for\nthe mining effort.\n\nJing's node creates the coinbase transaction as a payment to his own\nwallet. The total amount of\nreward that Jing collects for mining a block is the sum of the block\nsubsidy (6.25 new bitcoins in 2023) and the transaction fees from all\nthe transactions included in the block.\n\nUnlike regular transactions, the coinbase transaction does not consume\n(spend) UTXOs as inputs. Instead, it has only one input, called the\n_coinbase input_, which implicitly contains the block reward. The coinbase transaction\nmust have at least one output and may have as many outputs as will fit\nin the block.  It's common for coinbase transactions in 2023 to have two\noutputs: one of these is a zero-value output that uses +OP_RETURN+ to\ncommit to all of the witnesses for segregated witness (segwit)\ntransactions in the block.  The other output pays the miner their\nreward.\n\n==== Coinbase Reward and Fees\n\nTo construct(((\"rewards\", id=\"reward-coinbase\")))(((\"transaction fees\", \"in coinbase transactions\", secondary-sortas=\"coinbase transactions\", id=\"transaction-fee-coinbase\"))) the\ncoinbase transaction, Jing's node first calculates the total amount of\ntransaction fees:\n\n[latexmath]\n++++\n\\begin{equation}\nTotal\\:Fees = Sum(Inputs) - Sum(Outputs)\n\\end{equation}\n++++\n\n\nNext, Jing's node calculates the correct reward for the new block. The\nreward is calculated based on the block height, starting at 50 bitcoin\nper block and reduced by half every 210,000 blocks.\n\nThe calculation can be seen in function +GetBlockSubsidy+ in the Bitcoin\nCore client, as shown in <<getblocksubsidy_source>>.\n\n[[getblocksubsidy_source]]\n.Calculating the block reward&#x2014;Function [.plain]#+GetBlockSubsidy+,# Bitcoin Core Client, [.plain]#main.cpp#\n====\n[role=\"c_less_space\"]\n[source, cpp]\n----\nCAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams)\n{\n    int halvings = nHeight / consensusParams.nSubsidyHalvingInterval;\n    // Force block reward to zero when right shift is undefined.\n    if (halvings >= 64)\n        return 0;\n\n    CAmount nSubsidy = 50 * COIN;\n    // Subsidy is cut in half every 210,000 blocks.\n    nSubsidy >>= halvings;\n    return nSubsidy;\n}\n----\n====\n\nThe initial subsidy is calculated in satoshis by multiplying 50 with the\n+COIN+ constant (100,000,000 satoshis). This sets the initial reward\n(+nSubsidy+) at 5 billion satoshis.\n\nNext, the function calculates the number of +halvings+\nthat have occurred by dividing the current block height by the halving\ninterval (+SubsidyHalvingInterval+).\n\nNext, the function uses the binary-right-shift operator to divide the\nreward [.keep-together]#(+nSubsidy+)# by two for each round of halving. In the case of\nblock 277,316, this would binary-right-shift the reward of 5 billion\nsatoshis once (one halving) and result in 2.5 billion satoshis, or 25\nbitcoins. After the 33rd halving, the subsidy will be rounded down to\nzero.  The binary-right-shift operator is used because it is more\nefficient than multiple repeated divisions. To avoid a potential bug,\nthe shift operation is skipped after 63 halvings, and the subsidy is set\nto 0.\n\nFinally, the coinbase reward (+nSubsidy+) is added to the transaction\nfees (+nFees+), and the sum is returned.\n\n[TIP]\n====\nIf Jing's mining node writes the coinbase transaction, what stops Jing\nfrom \"rewarding\" himself 100 or 1,000 bitcoin? The answer is that an\ninflated reward would result in the block being deemed invalid by\neveryone else, wasting Jing's electricity used for PoW. Jing\nonly gets to spend the reward if the block is accepted by (((\"rewards\", startref=\"reward-coinbase\")))(((\"transaction fees\", \"in coinbase transactions\", secondary-sortas=\"coinbase transactions\", startref=\"transaction-fee-coinbase\")))everyone.\n====\n\n==== Structure of the Coinbase Transaction\n\nWith these calculations,\nJing's node then constructs the coinbase transaction to pay himself\nthe block reward.\n\nThe coinbase transaction\nhas a special format. Instead of a transaction input specifying a\nprevious UTXO to spend, it has a \"coinbase\" input. We examined\ntransaction inputs in <<inputs>>. Let's compare a regular transaction\ninput with a coinbase transaction input. <<table_8-1>> shows the\nstructure of a regular transaction, while <<table_8-2>> shows the\nstructure of the(((\"inputs\", \"coinbase versus regular transactions\"))) coinbase transaction's input.\n\n++++\n<table id=\"table_8-1\">\n<caption>The structure of a “normal” transaction input</caption>\n<thead>\n<tr>\n<th>Size</th>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><p>32 bytes</p></td>\n<td><p>Transaction Hash</p></td>\n<td><p>Pointer to the transaction containing the UTXO to be spent</p></td>\n</tr>\n<tr>\n<td><p>4 bytes</p></td>\n<td><p>Output Index</p></td>\n<td><p>The index number of the UTXO to be spent, first one is 0</p></td>\n</tr>\n<tr>\n<td><p>1–9 bytes (compactSize)</p></td>\n<td><p>Script Size</p></td>\n<td><p>Script length in bytes, to follow</p></td>\n</tr>\n<tr>\n<td><p>Variable</p></td>\n<td><p>Input Script</p></td>\n<td><p>A script that fulfills the conditions of the UTXO output script</p></td>\n</tr>\n<tr>\n<td><p>4 bytes</p></td>\n<td><p>Sequence Number</p></td>\n<td><p>Multipurpose field used for BIP68 timelocks and transaction replacement signaling</p></td>\n</tr>\n</tbody>\n</table>\n<table id=\"table_8-2\">\n<caption>The structure of a coinbase transaction input</caption>\n<thead>\n<tr>\n<th>Size</th>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><p>32 bytes</p></td>\n<td><p>Transaction Hash</p></td>\n<td><p>All bits are zero: Not a transaction hash reference</p></td>\n</tr>\n<tr>\n<td><p>4 bytes</p></td>\n<td><p>Output Index</p></td>\n<td><p>All bits are ones: 0xFFFFFFFF</p></td>\n</tr>\n<tr>\n<td><p>1 byte</p></td>\n<td><p>Coinbase Data Size</p></td>\n<td><p>Length of the coinbase data, from 2 to 100 bytes</p></td>\n</tr>\n<tr>\n<td><p>Variable</p></td>\n<td><p>Coinbase Data</p></td>\n<td><p>Arbitrary data used for extra nonce and mining tags; in v2 blocks, must begin with block height</p></td>\n</tr>\n<tr>\n<td><p>4 bytes</p></td>\n<td><p>Sequence Number</p></td>\n<td><p>Set to 0xFFFFFFFF</p></td>\n</tr>\n</tbody>\n</table>\n++++\n\nIn a coinbase transaction, the first two fields are set to values that\ndo not represent a UTXO reference. Instead of a \"transaction hash,\" the\nfirst field is filled with 32 bytes all set to zero. The \"output index\"\nis filled with 4 bytes all set to 0xFF (255 decimal). The\ninput script is replaced by coinbase data, a data field used by\nthe miners, as we will see next.\n\n[[duplicate_transactions]]\n==== Coinbase Data\n\nCoinbase (((\"coinbase data\")))transactions do\nnot have an input script field. Instead, this\nfield is replaced by coinbase data, which must be between 2 and 100\nbytes. Except for the first few bytes, the rest of the coinbase data can\nbe used by miners in any way they want; it is arbitrary data.\n\nIn the genesis block, for\nexample, Satoshi Nakamoto added the text \"The Times 03/Jan/2009\nChancellor on brink of second bailout for banks\" in the coinbase data,\nusing it as a proof of the earliest date this block could have been\ncreated and to convey a message. Currently,\nminers often use the coinbase data to include extra nonce values and strings\nidentifying the mining pool.\n\n[role=\"less_space pagebreak-before\"]\nThe first few bytes of the coinbase used to be arbitrary, but that is no\nlonger the case. As per BIP34, version-2 blocks (blocks with the\nversion field set to 2 or higher) must contain the block height as a script\n\"push\" operation in the beginning of the (((\"bitcoins\", \"mining\", \"coinbase transactions\", startref=\"bitcoin-mining-coinbase\")))(((\"mining\", \"coinbase transactions\", startref=\"mining-coinbase\")))(((\"nodes\", \"miner nodes\", \"coinbase transactions\", startref=\"nodes-miner-coinbase\")))(((\"coinbase transactions\", startref=\"coinbase\")))(((\"transactions\", \"coinbase\", startref=\"transaction-coinbase\")))coinbase field.\n\n=== Constructing the Block Header\n\nTo\nconstruct (((\"mining\", \"constructing block header\", id=\"mining-blockheader\")))(((\"nodes\", \"miner nodes\", \"constructing block header\", id=\"nodes-miner-blockheader\")))(((\"block header\", \"constructing\", id=\"block-header-construct\")))the block header, the mining node needs to fill in six fields,\nas listed in <<block_header_structure_ch10>>.\n\n++++\n<table id=\"block_header_structure_ch10\">\n<caption>The structure of the block header</caption>\n<thead>\n<tr>\n<th>Size</th>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><p>4 bytes</p></td>\n<td><p>Version</p></td>\n<td><p>A multipurpose bitfield</p></td>\n</tr>\n<tr>\n<td><p>32 bytes</p></td>\n<td><p>Previous Block Hash</p></td>\n<td><p>A reference to the hash of the previous (parent) block in the chain</p></td>\n</tr>\n<tr>\n<td><p>32 bytes</p></td>\n<td><p>Merkle Root</p></td>\n<td><p>A hash that is the root of the merkle tree of this block’s transactions</p></td>\n</tr>\n<tr>\n<td><p>4 bytes</p></td>\n<td><p>Timestamp</p></td>\n<td><p>The approximate creation time of this block (seconds from Unix Epoch)</p></td>\n</tr>\n<tr>\n<td><p>4 bytes</p></td>\n<td><p>Target</p></td>\n<td><p>The proof-of-work algorithm target for this block</p></td>\n</tr>\n<tr>\n<td><p>4 bytes</p></td>\n<td><p>Nonce</p></td>\n<td><p>A counter used for the proof-of-work algorithm</p></td>\n</tr>\n</tbody>\n</table>\n++++\n\nThe version field was originally an integer field and was used in three\nupgrades to the Bitcoin network, those defined in BIPs 34, 66, and 65.\nEach time, the version number was incremented.  Later upgrades defined\nthe version field as a bitfield, called _versionbits_, allowing up to 29\nupgrades to be in progress simultaneously; see <<bip9>> for details.\nEven later, miners began using some of the versionbits as an auxiliary\nnonce field.\n\n[TIP]\n====\nThe protocol upgrades defined in BIPs 34, 66, and 65 occurred in that\norder, with BIP66 (strict DER) occurring before BIP65\n(+OP_CHECKTIMELOCKVERIFY+), so Bitcoin developers often list them in\nthat order rather than sorted numerically.\n====\n\nToday, the versionbits field has no meaning unless there's an attempt to\nupgrade the consensus protocol underway, in which case you will need to\nread its documentation to determine how it is using versionbits.\n\nNext, the mining\nnode needs to add the \"Previous Block Hash\" (also known as [.keep-together]#+prevhash+).#\nThat is the hash of the block header of the previous block\nreceived from the network, which Jing's node has accepted and\nselected as the _parent_ of his candidate block.\n\n[TIP]\n====\nBy selecting the specific _parent_ block, indicated by the Previous\nBlock Hash field in the candidate block header, Jing is committing his\nmining power to extending the chain that ends in that specific block.\n====\n\nThe next\nstep is to commit to all the transactions using merkle trees.  Each\ntransaction is listed using its witness transaction identifier (_wtxid_)\nin topographical order, with 32 0x00 bytes standing in for the wtxid of\nthe first transaction (the coinbase).  As we saw in the <<merkle_trees>>\nthe last wtxid is hashed with itself if there are an odd number of wtxids,\ncreating nodes that each contain the hash of one transaction. The\ntransaction hashes are then combined, in pairs, creating each level of\nthe tree, until all the transactions are summarized into one node at the\n\"root\" of the tree. The root of the merkle tree summarizes all the\ntransactions into a single 32-byte value, which is the _witness root\nhash_.\n\nThe witness root hash is added to an output of the coinbase transaction.\nThis step may be skipped if none of the transactions in the block are\nrequired to contain a witness structure.  Each transaction (including\nthe coinbase transaction) is then listed using its transaction\nidentifier (txid) and used to build a second merkle tree, the root of\nwhich becomes the merkle root, to which the block header commits.\n\nJing's mining node will then add a 4-byte timestamp, encoded as a Unix\n\"epoch\" timestamp, which is based on the number of seconds elapsed from\nJanuary 1, 1970, midnight UTC/GMT.\n\nJing's node then fills in the nBits target, which must be set to a\ncompact representation of the required\nPoW to make this a valid block. The target is stored in the\nblock as a \"target bits\" metric, which is a mantissa-exponent encoding\nof the target. The encoding has a 1-byte exponent, followed by a 3-byte\nmantissa (coefficient). In block 277,316, for example, the target bits\nvalue is +0x1903a30c+. The first part +0x19+ is a hexadecimal exponent,\nwhile the next part, +0x03a30c+, is the coefficient. The concept of a\ntarget is explained in <<target>> and the \"target bits\" representation\nis explained in <<target_bits>>.\n\nThe final field is the nonce, which is initialized to zero.\n\nWith all the other fields filled, the header of the candidate block is now complete and\nthe process of mining can begin. The goal is now to find a header\nthat results in a hash that is less than the target.\nThe mining node will need to test billions or trillions of variations of\nthe header before a version is found that satisfies the(((\"mining\", \"constructing block header\", startref=\"mining-blockheader\")))(((\"nodes\", \"miner nodes\", \"constructing block header\", startref=\"nodes-miner-blockheader\")))(((\"block header\", \"constructing\", startref=\"block-header-construct\"))) requirement.\n\n[role=\"less_space pagebreak-before\"]\n=== Mining the Block\n\nNow\nthat(((\"candidate blocks\", \"mining\", id=\"candidate-mine\")))(((\"blocks\", \"candidate blocks\", \"mining\", id=\"block-candidate-mine\")))(((\"mining\", \"candidate blocks\", id=\"mining-candidate\"))) a candidate block has been constructed by Jing's node, it is time\nfor Jing's hardware mining rig to \"mine\" the block, to find a solution\nto the proof-of-work algorithm that makes the block valid. Throughout\nthis book we have studied cryptographic hash functions as used in\nvarious aspects of the Bitcoin system. The hash function SHA256 is the\nfunction used in Bitcoin's mining process.\n\nIn the simplest terms, mining is\nthe process of hashing the candidate block header repeatedly, changing one\nparameter, until the resulting hash matches a specific target. The hash\nfunction's result cannot be determined in advance, nor can a pattern be\ncreated that will produce a specific hash value. This feature of hash\nfunctions means that the only way to produce a hash result matching a\nspecific target is to try again and again, modifying the input\nuntil the desired hash result appears by chance.\n\n==== Proof-of-Work Algorithm\n\nA hash(((\"mining\", \"proof-of-work algorithm\", id=\"mining-proof\")))(((\"hash functions\", \"proof-of-work algorithm\", id=\"hash-proof\")))(((\"proof-of-work algorithm\", id=\"proof-mining\"))) algorithm takes an\narbitrary-length data input and produces a fixed-length deterministic\nresult, called a _digest_.  The digest is a digital commitment to the\ninput. For any specific input, the resulting digest will always be the\nsame and can be easily calculated and\nverified by anyone implementing the same hash algorithm.\nA key characteristic of a cryptographic hash\nalgorithm is that it is computationally infeasible to find two different\ninputs that produce the same digest (known as a _collision_). As a\ncorollary, it is also virtually impossible to select an input in such a\nway as to produce a desired digest, other than trying random\ninputs.\n\nWith(((\"SHA256 hash function\"))) SHA256, the output is always 256 bits long, regardless of the size\nof the input. For example, we will calculate the SHA256 hash of the\nphrase, \"Hello, World!\":\n\n----\n$ echo \"Hello, world!\" | sha256sum\nd9014c4624844aa5bac314773d6b689ad467fa4e1d1a50a1b8a99d5a95f72ff5  -\n----\n\nThis\n256-bit output (represented in hex) is the _hash_ or _digest_ of the phrase and depends on\nevery part of the phrase. Adding a single letter, punctuation mark, or\nany other character will produce a different hash.\n\nA variable used in such a scenario is called a _nonce_.\nThe nonce is used to vary the output of a cryptographic function, in\nthis case to vary the output of the SHA256 commitment to the phrase.\n\nTo make a challenge out of this algorithm, let's set a target: find a\nphrase that produces a hexadecimal hash that starts with a zero.\nFortunately, this isn't difficult, as shown in <<sha256_example_generator_output2>>.\n\n[[sha256_example_generator_output2]]\n.Simple proof-of-work implementation\n====\n----\n$ for nonce in $( seq 100 ) ; do echo \"Hello, world! $nonce\" | sha256sum ; done\n3194835d60e85bf7f728f3e3f4e4e1f5c752398cbcc5c45e048e4dbcae6be782  -\nbfa474bbe2d9626f578d7d8c3acc1b604ec4a7052b188453565a3c77df41b79e  -\n[...]\nf75a100821c34c84395403afd1a8135f685ca69ccf4168e61a90e50f47552f61  -\n09cb91f8250df04a3db8bd98f47c7cecb712c99835f4123e8ea51460ccbec314  -\n----\n====\n\nThe phrase \"Hello, World! 32\" produces the following hash, which fits our criteria: \n+09cb91f8250df04a3db8bd98f47c7cecb712c99835f4123e8ea51460ccbec314+. It took 32 attempts to find it. In terms of\nprobabilities, if the output of the hash function is evenly distributed,\nwe would expect to find a result with a 0 as the hexadecimal prefix once\nevery 16 hashes (one out of 16 hexadecimal digits 0 through F). In\nnumerical terms, that means finding a hash value that is less than\n+0x1000000000000000000000000000000000000000000000000000000000000000+. We\ncall this threshold the _target_, and the goal is to find a hash that is\nnumerically less than the target. If we decrease the target, the task of\nfinding a hash that is less than the target becomes more and more\ndifficult.\n\n++++\n<p class=\"fix_tracking3\">\nTo give a simple analogy, imagine a game where players throw a pair of\ndice repeatedly, trying to throw less than a specified target. In the\nfirst round, the target is 12. Unless you throw double-6, you win. In\nthe next round the target is 11. Players must throw 10 or less to win,\nagain an easy task. Let's say a few rounds later the target is down to\n5. Now, more than half the dice throws will exceed the target and\ntherefore be invalid. It takes more dice throws to win\nthe lower the target gets. Eventually, when the target is 3 (the minimum\npossible), only one throw out of every 36, or about 3% of them, will produce a\nwinning result.\n</p>\n++++\n\nFrom the perspective of an observer who knows that the target of the\ndice game is 3, if someone has succeeded in casting a winning throw it\ncan be assumed that they attempted, on average, 36 throws. In other\nwords, one can estimate the amount of work it takes to succeed from the\ndifficulty imposed by the target. When the algorithm is based on a\ndeterministic function such as SHA256, the input itself constitutes\n_proof_ that a certain amount of _work_ was done to produce a result\nbelow the target. Hence, _proof of work_.\n\n[TIP]\n====\nEven though each attempt produces a random outcome, the probability of\nany possible outcome can be calculated in advance. Therefore, an outcome\nof specified difficulty constitutes proof of a specific amount of work.\n====\n\nIn <<sha256_example_generator_output2>>, the winning \"nonce\" is 32, and\nthis result can be confirmed by anyone independently. Anyone can add the\nnumber 32 as a suffix to the phrase \"Hello, world!\" and compute\nthe hash, verifying that it is less than the target:\n\n----\n$ echo \"Hello, world! 32\" | sha256sum\n09cb91f8250df04a3db8bd98f47c7cecb712c99835f4123e8ea51460ccbec314  -\n----\n\n++++\n<p class=\"fix_tracking3\">\nAlthough it only takes one hash computation to verify, it took\nus 32 hash computations to find a nonce that worked. If we had a lower\ntarget (higher difficulty), it would take many more hash computations to\nfind a suitable nonce, but only one hash computation for anyone to\nverify. And by knowing the target, anyone can estimate the\ndifficulty using statistics and therefore know roughly how much work was needed\nto find such a nonce.\n</p>\n++++\n\n[TIP]\n====\nThe PoW must produce a hash that is _less than_ the target. A\nhigher target means it is less difficult to find a hash that is below\nthe target. A lower target means it is more difficult to find a hash\nbelow the target. The target and difficulty are inversely related.\n====\n\n++++\n<p class=\"fix_tracking3\">\nBitcoin's PoW is very similar to the challenge\nshown in <a data-type=\"xref\" href=\"#sha256_example_generator_output2\">#sha256_example_generator_output2</a>. The miner constructs a\ncandidate block filled with transactions. Next, the miner calculates the\nhash of this block's header and sees if it is smaller than the current\n<em>target</em>. If the hash is not less than the target, the miner will modify\nthe nonce (usually just incrementing it by one) and try again. At the\ncurrent difficulty in the Bitcoin network, miners have to try\na huge number of times before finding a nonce that results in a low\nenough block header hash.\n</p>\n++++\n\n[[target_bits]]\n==== Target Representation\n\n//TODO:use visual representation like I did on bitcoin.org\n\n\nBlock headers (((\"mining\", \"proof-of-work algorithm\", startref=\"mining-proof\")))(((\"hash functions\", \"proof-of-work algorithm\", startref=\"hash-proof\")))(((\"proof-of-work algorithm\", startref=\"proof-mining\")))(((\"mining\", \"target representation\", id=\"mining-target\")))(((\"targets\", \"representation of\", id=\"target-represent\")))(((\"proof-of-work algorithm\", \"target representation\", id=\"proof-target\")))contain the target in a notation called \"target\nbits\" or just \"bits,\" which in block 277,316 has the value of\n+0x1903a30c+. This notation expresses the proof-of-work target as a\ncoefficient/exponent format, with the first two hexadecimal digits for\nthe exponent and the next six hex digits as the coefficient. In this\nblock, therefore, the exponent is +0x19+ and the coefficient is\n+0x03a30c+.\n\nThe formula to calculate the difficulty target from this representation\nis:\n\n++++\n<ul class=\"simplelist\">\n  <li>target = coefficient × 2<sup>(8 × (exponent – 3))</sup></li>\n</ul>\n++++\n\nUsing that formula, and the difficulty bits value 0x1903a30c, we get:\n\n++++\n<ul class=\"simplelist\">\n  <li>target = 0x03a30c × 2<sup>0x08 × (0x19 – 0x03)</sup></li>\n</ul>\n++++\n\nwhich is:\n\n++++\n<ul class=\"simplelist\">\n  <li>22,829,202,948,393,929,850,749,706,076,701,368,331,072,452,018,388,575,715,328</li>\n</ul>\n++++\n\nOr, in hexadecimal:\n\n++++\n<ul class=\"simplelist\">\n  <li>0x0000000000000003A30C00000000000000000000000000000000000000000000</li>\n</ul>\n++++\n\nThis means that a valid block for height 277,316 is one that has a block\nheader hash less than the target. In binary that number must\nhave more than 60 leading bits set to zero. With this level of\ndifficulty, a single miner processing 1 trillion hashes per second (1\nterahash per second or 1 TH/sec) would only find a solution once every\n8,496 blocks or once every 59 days, (((\"mining\", \"target representation\", startref=\"mining-target\")))(((\"targets\", \"representation of\", startref=\"target-represent\")))(((\"proof-of-work algorithm\", \"target representation\", startref=\"proof-target\")))on average.\n\n[[target]]\n==== Retargeting to Adjust Difficulty\n\nAs we saw, (((\"mining\", \"adjusting difficulty\", id=\"mining-difficulty\")))(((\"targets\", \"adjusting difficulty\", id=\"target-difficulty\")))(((\"proof-of-work algorithm\", \"adjusting difficulty\", id=\"proof-difficulty\")))(((\"difficulty\", \"adjusting\", id=\"difficulty-adjust\")))the target determines the difficulty and\ntherefore affects how long it takes to find a solution to the\nproof-of-work algorithm. This leads to the obvious questions: Why is the\ndifficulty adjustable, who adjusts it, and how?\n\nBitcoin's blocks are generated every 10 minutes, on average. This is\nBitcoin's heartbeat and underpins the frequency of currency issuance and\nthe speed of transaction settlement. It has to remain constant not just\nover the short term, but over a period of many decades. Over this time,\nit is expected that computer power will continue to increase at a rapid\npace. Furthermore, the number of participants in mining and the\ncomputers they use will also constantly change. To keep the block\ngeneration time at 10 minutes, the difficulty of mining must be adjusted\nto account for these changes. In fact, the proof-of-work target is a\ndynamic parameter that is periodically adjusted to meet a 10-minute\nblock interval goal. In simple terms, the target is set so that the\ncurrent mining power will result in a 10-minute block interval.\n\nHow, then, is such an adjustment made in a completely decentralized\nnetwork? Retargeting occurs automatically and on every node\nindependently. Every 2,016 blocks, all nodes retarget the PoW.\nThe ratio between the actual time span and desired time span of 10\nminutes per block is calculated and a\nproportionate adjustment (up or down) is made to the target. In simple\nterms: If the network is finding blocks faster than every 10 minutes,\nthe difficulty increases (target decreases). If block discovery is\nslower than expected, the difficulty decreases (target increases).\n\nThe equation can be summarized as:\n\n\n----\nNew Target = Old Target * (20,160 minutes / Actual Time of Last 2015 Blocks)\n----\n\n[NOTE]\n====\nWhile the target calibration happens every 2,016 blocks, because of an\noff-by-one error in the original Bitcoin software, it is based on the\ntotal time of the previous 2,015 blocks (not 2,016 as it should be),\nresulting in a retargeting bias toward higher difficulty by 0.05%.\n====\n\n<<retarget_code>> shows the code used in the Bitcoin Core client.\n\n[[retarget_code]]\n.Retargeting the proof of work: [.plain]#++CalculateNextWorkRequired()++# in [.plain]#pow.cpp#\n====\n[source,cpp]\n----\n\n   // Limit adjustment step\n    int64_t nActualTimespan = pindexLast->GetBlockTime() - nFirstBlockTime;\n    LogPrintf(\"  nActualTimespan = %d  before bounds\\n\", nActualTimespan);\n    if (nActualTimespan < params.nPowTargetTimespan/4)\n        nActualTimespan = params.nPowTargetTimespan/4;\n    if (nActualTimespan > params.nPowTargetTimespan*4)\n        nActualTimespan = params.nPowTargetTimespan*4;\n\n    // Retarget\n    const arith_uint256 bnPowLimit = UintToArith256(params.powLimit);\n    arith_uint256 bnNew;\n    arith_uint256 bnOld;\n    bnNew.SetCompact(pindexLast->nBits);\n    bnOld = bnNew;\n    bnNew *= nActualTimespan;\n    bnNew /= params.nPowTargetTimespan;\n\n    if (bnNew > bnPowLimit)\n        bnNew = bnPowLimit;\n\n----\n====\n\nThe parameters +Interval+ (2,016 blocks) and +TargetTimespan+ (two weeks\nas 1,209,600 seconds) are defined in _chainparams.cpp_.\n\nTo avoid extreme volatility in the difficulty, the retargeting\nadjustment must be less than a factor of four (4) per cycle. If the\nrequired target adjustment is greater than a factor of four, it will be\nadjusted by a factor of 4 and not more. Any further adjustment will be\naccomplished in the next retargeting period because the imbalance will\npersist through the next 2,016 blocks. Therefore, large discrepancies\nbetween hashing power and difficulty might take several 2,016-block\ncycles to balance out.\n\nNote that the target is independent of the number of transactions or the\nvalue of transactions. This means that the amount of hashing power and\ntherefore electricity expended to secure bitcoin is also entirely\nindependent of the number of transactions. Bitcoin can scale up\nand remain secure without any increase in hashing\npower from today's level. The increase in hashing power represents\nmarket forces as new miners enter the market.\nAs long as enough hashing power is under the control of miners acting\nhonestly in pursuit of the reward, it is enough to prevent \"takeover\"\nattacks and, therefore, it is enough to secure bitcoin.\n\nThe difficulty of mining is closely related to the cost of electricity\nand the exchange rate of bitcoin vis-a-vis the currency used to pay for\nelectricity. High-performance mining systems are about as efficient as\npossible with the current generation of silicon fabrication, converting\nelectricity into hashing computation at the highest rate possible. The\nprimary influence on the mining market is the price of one kilowatt-hour\nof electricity in bitcoin because that determines the profitability of\nmining and therefore the incentives to enter or exit the (((\"mining\", \"adjusting difficulty\", startref=\"mining-difficulty\")))(((\"targets\", \"adjusting difficulty\", startref=\"target-difficulty\")))(((\"proof-of-work algorithm\", \"adjusting difficulty\", startref=\"proof-difficulty\")))(((\"difficulty\", \"adjusting\", startref=\"difficulty-adjust\")))mining\nmarket.\n\n[[mtp]]\n=== Median Time Past (MTP)\n\nIn Bitcoin (((\"decentralized consensus\", \"timestamps and\", id=\"decentral-consensus-timestamp\")))(((\"consensus rules\", \"timestamps and\", id=\"consensus-timestamp\")))(((\"timestamps\", id=\"timestamp\")))(((\"median time past (MTP)\", id=\"median-time-past\")))(((\"MTP (median time past)\", id=\"mtp-median\")))(((\"mining\", \"timestamps\", id=\"mining-timestamps\")))there is a subtle, but very\nsignificant, difference between wall time and consensus time. Bitcoin is\na decentralized network, which means that each participant has his or\nher own perspective of time. Events on the network do not occur\ninstantaneously everywhere. Network latency must be factored into the\nperspective of each node. Eventually everything is synchronized to\ncreate a common blockchain. Bitcoin reaches consensus every 10 minutes about\nthe state of the blockchain as it existed in the _past_.\n\n++++\n<p class=\"fix_tracking\">\nThe timestamps set in block headers are set by the miners. There is a\ncertain degree of latitude allowed by the consensus rules to account for\ndifferences in clock accuracy between decentralized nodes. However, this\ncreates an unfortunate incentive for miners to lie about the time in a\nblock.  For example, if a miner sets their time in the future, they can\nlower difficulty, allowing them to mine more blocks and claim some of\nthe block subsidy reserved for future miners.  If they can set their\ntimes in the past for some blocks, they can use the current time for\nsome other blocks, and so again make it look like there's a long time\nbetween blocks for the purpose of manipulating difficulty.\n</p>\n++++\n\nTo prevent manipulation, Bitcoin has two consensus rules.  The first is\nthat no node will accept any block with a time further in the future\nthan two hours.  The second is that no node will accept a block with a\ntime less than or equal to the median time of the last 11 blocks, called\n_median time past_ (MTP).\n\nAs part of the activation of BIP68 relative timelocks,\nthere was also a change in the way \"time\" is calculated for timelocks\n(both absolute and relative) in transactions.   Previously, a miner\ncould include any transaction in a block with a timelock equal to or\nbelow the time of the block.  That incentivized miners to use the latest\ntime they thought was possible (close to two hours in the future)\nso that more transactions would be eligible for their block.\n\nTo remove the incentive to lie and strengthen the security of timelocks,\nBIP113 was proposed and activated at the same time as the BIPs for\nrelative timelocks.\nThe MTP became the consensus\ntime used for all timelock calculations. By taking the midpoint\nfrom approximately two hours in the past, the influence of any one\nblock's timestamp is reduced. By incorporating 11 blocks, no single\nminer can influence the timestamps in order to gain fees from\ntransactions with a timelock that hasn't yet matured.\n\nMTP changes the implementation of time calculations for\nlock time, +CLTV+, sequence, and +CSV+. The consensus time\ncalculated by MTP is usually about one hour behind\nwall clock time. If you create timelock transactions, you should account\nfor it when estimating the desired value to encode in lock time,\nsequence, +CLTV+, and +CSV+.\n\n=== Successfully Mining the Block\n\n++++\n<p class=\"fix_tracking\">\nAs\nwe saw earlier, Jing's node has constructed a candidate block and\nprepared it for mining. Jing has several hardware mining rigs with\napplication-specific integrated circuits, where hundreds of thousands of\nintegrated circuits run Bitcoin's double SHA256 algorithm in parallel at incredible\nspeeds. Many of these specialized machines are connected to his mining\nnode over USB or a local area network. Next, the mining node running on\nJing's desktop transmits the block header to his mining hardware, which\nstarts testing trillions of variations of the header per second. Because\nthe nonce is only\n32 bits, after exhausting all the nonce possibilities (about 4 billion),\nthe mining hardware changes the block header (adjusting the coinbase\nextra nonce space, versionbits, or timestamp) and resets the nonce counter, testing\nnew combinations.</p>\n++++\n\nAlmost 11 minutes after starting to mine a particular block, one of the\nhardware mining machines finds a solution and sends it back to the\nmining node.\n\nImmediately, Jing's mining node transmits the block to all its peers.\nThey receive, validate, and then propagate the new block. As the block\nripples out across the network, each node adds it to its own copy of the\nblockchain, extending it to a new height. As mining\nnodes receive and validate the block, they abandon their efforts to find\na block at the same height and immediately start computing the next\nblock in the chain, using Jing's block as the \"parent.\" By building on\ntop of Jing's newly discovered block, the other miners are essentially\nusing their mining power to endorse Jing's block and the\nchain(((\"candidate blocks\", \"mining\", startref=\"candidate-mine\")))(((\"blocks\", \"candidate blocks\", \"mining\", startref=\"block-candidate-mine\")))(((\"mining\", \"candidate blocks\", startref=\"mining-candidate\"))) it extends.\n\nIn the next section, we'll look at the process each node uses to\nvalidate a block and select the most-work chain, creating the consensus\nthat forms the decentralized blockchain.\n\n=== Validating a New Block\n\nThe third (((\"mining\", \"validating blocks\", id=\"mining-validate\")))(((\"blocks\", \"validating\", id=\"block-validate\")))(((\"validating\", \"blocks\", id=\"validate-block\")))(((\"decentralized consensus\", \"validating blocks\", id=\"decentral-consensus-validate\")))(((\"nodes\", \"validating blocks\", id=\"nodes-validate\")))step in Bitcoin's\nconsensus mechanism is independent validation of each new block by every\nnode on the network. As the newly solved block moves across the network,\neach node performs a series of tests to validate it.\nThe independent validation also ensures that only blocks that follow the\nconsensus rules are incorporated in the blockchain, thus earning\ntheir miners the reward. Blocks that violate the rules are rejected\nand not only lose their miners the reward, but also waste the effort expended to find\na proof-of-work solution, thus incurring upon those miners all of the costs of creating a\nblock but giving them none of the rewards.\n\nWhen a node receives a new block, it will validate the block by checking\nit against a long list of criteria that must all be met; otherwise, the\nblock is rejected. These criteria can be seen in the Bitcoin Core client\nin the functions +CheckBlock+ and +CheckBlockHeader+ and include:\n\n- The block data structure is syntactically valid.\n\n- The block header hash is less than the target (enforces the\n  proof of work).\n\n- The block timestamp is between the MTP and two\n  hours in the future (allowing for time errors).\n\n- The block weight is within acceptable limits.\n\n- The first transaction (and only the first) is a coinbase transaction.\n\n- All transactions within the block are valid using the transaction\n  checklist discussed in <<tx_verification>>.\n\nThe independent validation of each new block by every node on the\nnetwork ensures that the miners cannot cheat. In previous sections we\nsaw how miners get to write a transaction that awards them the new\nbitcoin created within the block and claim the transaction fees. Why\ndon't miners write themselves a transaction for a thousand bitcoins\ninstead of the correct reward? Because every node validates blocks\naccording to the same rules. An invalid coinbase transaction would make\nthe entire block invalid, which would result in the block being rejected\nand, therefore, that transaction would never become part of the blockchain.\nThe miners have to construct a block, based on the shared rules\nthat all nodes follow, and mine it with a correct solution to the\nPoW. To do so, they expend a lot of electricity in mining, and\nif they cheat, all the electricity and effort is wasted. This is why\nindependent validation is a key component of (((\"mining\", \"validating blocks\", startref=\"mining-validate\")))(((\"blocks\", \"validating\", startref=\"block-validate\")))(((\"validating\", \"blocks\", startref=\"validate-block\")))(((\"decentralized consensus\", \"validating blocks\", startref=\"decentral-consensus-validate\")))(((\"nodes\", \"validating blocks\", startref=\"nodes-validate\")))decentralized consensus.\n\n//FIXME:normalize terminology between \"block-finding race\", \"mining\n//race\", and \"forks\"\n[[forks]]\n=== Assembling and Selecting Chains of Blocks\n\nThe final (((\"mining\", \"assembling blockchain\", id=\"mining-assemble\")))(((\"blockchain\", \"assembling\", id=\"blockchain-assemble\")))(((\"decentralized consensus\", \"assembling blockchain\", id=\"decentral-consensus-assemble\")))part in Bitcoin's decentralized\nconsensus mechanism is the assembly of blocks into chains and the\nselection of the chain with the most proof of work.\n\nA _best blockchain_ is whichever valid chain of blocks has\nthe most cumulative PoW associated with it.\nThe\nbest chain may also have branches with blocks that are \"siblings\" to\nthe blocks on the best chain. These blocks are valid but not part of the\nbest chain. They are kept for future reference in case one of those\nsecondary chains later becomes primary.  When sibling blocks occur,\nthey're usually the result of an\nalmost simultaneous mining of different blocks at the same height.\n\nWhen a new block is received, a node will try to add it onto the\nexisting blockchain. The node will look at the block's \"previous block\nhash\" field, which is the reference to the block's parent. Then, the\nnode will attempt to find that parent in the existing blockchain. Most\nof the time, the parent will be the \"tip\" of the best chain, meaning\nthis new block extends the best chain.\n\nSometimes the new block does not extend\nthe best chain.  In that case, the node will attach the new block's\nheader to a\nsecondary chain and then compare the work of the secondary chain to the\nprevious best chain. If the secondary chain is now the best chain, the\nnode will accordingly _reorganize_ its view of confirmed transactions\nand available UTXOs.  If the node is a miner, it will now construct a\ncandidate block extending this new, more-proof-of-work, chain.\n\nBy selecting the greatest-cumulative-work valid chain, all nodes\neventually achieve network-wide consensus. Temporary discrepancies\nbetween chains are resolved eventually as more work is added, extending\none of the possible chains.\n\n[TIP]\n====\nThe blockchain forks (((\"blockchain\", \"forks\")))(((\"forks\")))described in this section occur naturally as a\nresult of transmission delays in the global network. We will also look\nat deliberately induced forks later in this chapter.\n====\n\nForks are almost always resolved within one block.\nIt is possible for an accidental fork to extend to two blocks if both\nblocks are found almost simultaneously by miners on opposite \"sides\" of\na previous fork. However, the chance of that happening is low.\n\nBitcoin's block interval of 10 minutes is a design compromise between\nfast confirmation times and the probability\nof a fork. A faster block time would make transactions seem to clear faster but\nlead to more frequent blockchain forks, whereas a slower block time\nwould decrease the number of forks but make settlement seem slower.\n\n[NOTE]\n====\nWhich is more secure: a transaction included in one block where the\naverage time between blocks is 10 minutes, or a transaction included in\na block with nine blocks built on top of it where the average time\nbetween blocks is one minute?  The answer is that they're equally\nsecure.  A malicious miner wanting to double spend that transaction\nwould need to do an amount of work equal to 10 minutes of the total\nnetwork hash rate in order to create a chain with equal proof of work.\n\nShorter times between blocks doesn't result in earlier settlement.  Its\nonly advantage is providing weaker guarantees to people who are willing\nto accept those guarantees.  For example, if you're willing to accept\nthree minutes of miners agreeing on the best blockchain as sufficient\nsecurity, you'd prefer a system with 1-minute blocks, where you could\nwait for three blocks, over a system with 10-minute blocks.  The shorter\nthe time between blocks, the more miner work is wasted on accidental\nforks (in addition to other problems), so many people prefer Bitcoin's\n10-minute blocks over shorter block (((\"mining\", \"assembling blockchain\", startref=\"mining-assemble\")))(((\"blockchain\", \"assembling\", startref=\"blockchain-assemble\")))(((\"decentralized consensus\", \"assembling blockchain\", startref=\"decentral-consensus-assemble\")))intervals.\n====\n\n\n\n=== Mining and the Hash Lottery\n\nBitcoin mining (((\"mining\", \"competitiveness of\", id=\"mining-competitive\")))is an extremely competitive industry.\nThe hashing power has increased exponentially every year of Bitcoin's\nexistence. Some years the growth has reflected a complete change of\ntechnology, such as in 2010 and 2011 when many miners switched from\nusing CPU mining to GPU mining and field programmable gate array (FPGA)\nmining. In 2013 the introduction of ASIC mining led to another giant\nleap in mining power, by placing the double-SHA256 function directly on silicon\nchips specialized for the purpose of mining. The first such chips could\ndeliver more mining power in a single box than the entire Bitcoin\nnetwork in 2010.\n\nAt the time of writing, it is believed that there are no more giant\nleaps left in Bitcoin mining equipment\nbecause the industry has reached the forefront of(((\"Moore&#x27;s Law\"))) Moore's Law, which\nstipulates that computing density will double approximately every 18\nmonths. Still, the mining power of the network continues to advance at\na rapid pace.\n\n[[extra_nonce]]\n==== The Extra Nonce Solution\n\nSince 2012, mining(((\"mining\", \"extra nonce solution\", id=\"mining-nonce\")))(((\"extra nonce solution\", id=\"extra-nonce\"))) has evolved to resolve a\nfundamental limitation in the structure of the block header. In the\nearly days of Bitcoin, a miner could find a block by iterating through\nthe nonce until the resulting hash was below the target. As difficulty\nincreased, miners often cycled through all 4 billion values of the nonce\nwithout finding a block. However, this was easily resolved by updating\nthe block timestamp to account for the elapsed time. Because the\ntimestamp is part of the header, the change would allow miners to\niterate through the values of the nonce again with different results.\nOnce mining hardware exceeded 4 GH/sec, however, this approach became\nincreasingly difficult because the nonce values were exhausted in less\nthan a second. As ASIC mining equipment started \nexceeding the TH/sec hash rate, the mining software needed more space\nfor nonce values in order to find valid blocks. The timestamp could be\nstretched a bit, but moving it too far into the future would cause the\nblock to become invalid. A new source of variation was needed in the\nblock header.\n\nOne solution that was widely implemented was to use the coinbase transaction as a\nsource of extra nonce values. Because the coinbase script can store\nbetween 2 and 100 bytes of data, miners started using that space as\nextra nonce space, allowing them to explore a much larger range of block\nheader values to find valid blocks. The coinbase transaction is included\nin the merkle tree, which means that any change in the coinbase script\ncauses the merkle root to change. Eight bytes of extra nonce, plus the 4\nbytes of \"standard\" nonce, allow miners to explore a total 2^96^ (8\nfollowed by 28 zeros) possibilities _per second_ without having to\nmodify the timestamp.\n\nAnother solution widely used today is to use up to 16 bits of the block\nheader versionbits field for mining, as described in BIP320.  If each\npiece of mining equipment has its own coinbase transaction, this allows\nan individual piece of mining equipment to perform up to 281 TH/s by\nonly making changes to the block header.  This keeps mining equipment\nand protocols simpler than incrementing the extra nonce in the coinbase\ntransaction every 4 billion hashes, which requires recalculating the\nentire left flank of the merkle tree up to (((\"mining\", \"extra nonce solution\", startref=\"mining-nonce\")))(((\"extra nonce solution\", startref=\"extra-nonce\")))the root.\n\n[[mining_pools]]\n==== Mining Pools\n\nIn this (((\"mining\", \"mining pools\", id=\"mining-mining-pools\")))(((\"mining pools\", id=\"mining-pools\")))highly competitive environment, individual miners working\nalone (also known as solo miners) don't stand a chance. The likelihood\nof them finding a block to offset their electricity and hardware costs\nis so low that it represents a gamble, like playing the lottery. Even\nthe fastest consumer ASIC mining system cannot keep up with commercial\noperations that stack tens of thousands of these systems in giant warehouses\nnear powerstations. Many miners now collaborate to form mining\npools, pooling their hashing power and sharing the reward among\nthousands of participants. By participating in a pool, miners get a\nsmaller share of the overall reward, but typically get rewarded every\nday, reducing uncertainty.\n\nLet's look at a specific example. Assume a miner has purchased mining\nhardware with a combined hashing rate of 0.0001% of current the total\nnetwork hash rate.  If the protocol difficulty never changes, that miner\nwill find a new block approximately once every 20 years.  That's a\npotentially long time to wait to get paid.  However, if that miner works\ntogether in a mining pool with other miners whose aggregate hash rate is\n1% of the total network hash rate, they'll average more than one block\nper day.  That miner will only receive their portion of the rewards\n(minus any fees charged by the pool), so they'll only receive a small\namount per day.  If they mined every day for 20 years, they'd earn the\nsame amount (not counting pool fees) as if they found an average block\non their own.  The only fundamental difference is the frequency of the\npayments they receive.\n\nMining pools coordinate many hundreds or thousands of miners over\nspecialized pool-mining protocols. The individual miners configure their\nmining equipment to connect to a pool server, after creating an account\nwith the pool. Their mining hardware remains connected to the pool\nserver while mining, synchronizing their efforts with the other miners.\nThus, the pool miners share the effort to mine a block and then share in\nthe rewards.\n\nSuccessful blocks pay the reward to a pool Bitcoin address rather than to\nindividual miners. The pool server will periodically make payments to\nthe miners' Bitcoin addresses once their share of the rewards has\nreached a certain threshold. Typically, the pool server charges a\npercentage fee of the rewards for providing the pool-mining service.\n\nMiners participating in a pool split\nthe work of searching for a solution to a candidate block, earning\n\"shares\" for their mining contribution. The mining pool sets a higher\ntarget (lower difficulty) for earning a share, typically more than 1,000\ntimes easier than the Bitcoin network's target. When someone in the pool\nsuccessfully mines a block, the reward is earned by the pool and then\nshared with all miners in proportion to the number of shares they\ncontributed to the effort.\n\nMany pools are open to any miner, big or small, professional or amateur. A\npool will therefore have some participants with a single small mining\nmachine, and others with a garage full of high-end mining hardware. Some\nwill be mining with a few tens of a kilowatt of electricity, others will\nbe running a data center consuming megawatts of power. How does a\nmining pool measure the individual contributions, so as to fairly\ndistribute the rewards, without the possibility of cheating? The answer\nis to use Bitcoin's proof-of-work algorithm to measure each pool miner's\ncontribution, but set at a lower difficulty so that even the smallest\npool miners win a share frequently enough to make it worthwhile to\ncontribute to the pool. By setting a lower difficulty for earning\nshares, the pool measures the amount of work done by each miner. Each\ntime a pool miner finds a block header hash that is less than the pool\ntarget, they prove they have done the hashing work to find that result.\nThat header ultimately commits to the coinbase transaction and can\nbe used to prove the miner used a coinbase transaction that would have\npaid the block reward to the pool.  Each pool miner is given a\nslightly different coinbase transaction template so each of them hashes\ndifferent candidate block headers, preventing duplication of effort.\n\nThe work to find shares contributes, in a\nstatistically measurable way, to the overall effort to find a hash lower\nthan the Bitcoin network's target. Thousands of miners trying to find\nlow-value hashes will eventually find one low enough to satisfy the\nBitcoin network target.\n\nLet's return to the analogy of a dice game. If the dice players are\nthrowing dice with a goal of throwing less than four (the overall\nnetwork difficulty), a pool would set an easier target, counting how\nmany times the pool players managed to throw less than eight. When pool\nplayers throw less than eight (the pool share target), they earn shares,\nbut they don't win the game because they don't achieve the game target\n(less than four). The pool players will achieve the easier pool target\nmuch more often, earning them shares very regularly, even when they\ndon't achieve the harder target of winning the game. Every now and then,\none of the pool players will throw a combined dice throw of less than\nfour and the pool wins. Then, the earnings can be distributed to the\npool players based on the shares they earned. Even though the target of\neight-or-less wasn't winning, it was a fair way to measure dice throws\nfor the players, and it occasionally produces a less-than-four throw.\n\nSimilarly, a mining pool will set a (higher and easier) pool target that\nwill ensure that an individual pool miner frequently earns shares by finding block header hashes that are less than the pool target. Every now and\nthen, one of these attempts will produce a block header hash that is\nless than the Bitcoin network target, making it a valid block and the\nwhole pool wins.\n\n===== Managed pools\n\nMost(((\"managed pools\", id=\"manage-pool\"))) mining pools are \"managed,\" meaning that\nthere is a company or individual running a pool server. The owner of the\npool server is called the _pool operator_, and they charge pool miners a\npercentage fee of the earnings.\n\nThe pool server runs specialized software and a pool-mining protocol\nthat coordinate the activities of the pool miners. The pool server is\nalso connected to one or more full Bitcoin nodes.\nThis allows the pool server\nto validate blocks and transactions on behalf of the pool miners,\nrelieving them of the burden of running a full node.\nFor some miners,\nthe ability to mine without running a full node is another benefit\nof joining a managed pool.\n\nPool miners connect to the pool server using a mining protocol(((\"Stratum\"))) such as\nStratum (either version 1 or version 2).\nStratum v1 creates block _templates_ that contain a template of a\ncandidate block header. The pool server constructs a candidate block by\naggregating transactions, adding a coinbase transaction (with extra\nnonce space), calculating the merkle root, and linking to the previous\nblock hash. The header of the candidate block is then sent to each of\nthe pool miners as a template. Each pool miner then mines using the\nblock template, at a higher (easier) target than the Bitcoin network\ntarget, and sends any successful results back to the pool server to earn\nshares.\n\nStratum v2 optionally allows individual miners in the pool to choose\nwhich transactions appear in their own blocks, which they can select\nusing their own full node.\n\n===== Peer-to-peer mining pool (P2Pool)\n\nManaged pools (((\"P2Pool (peer-to-peer mining pool)\", id=\"p2pool\")))using Stratum v1 create the possibility of cheating by\nthe pool operator, who might direct the pool effort to double-spend\ntransactions or invalidate blocks (see <<consensus_attacks>>).\nFurthermore, centralized pool servers represent a\nsingle point of failure. If the pool server is down or is slowed by a\ndenial-of-service attack, the pool miners cannot mine. In 2011, to\nresolve these issues of centralization, a new pool mining method was\nproposed and implemented: P2Pool, a peer-to-peer mining pool without a\ncentral operator.\n\nP2Pool works by decentralizing the functions of the pool server,\nimplementing a parallel blockchain-like system called(((\"share chains\"))) a _share chain_. A\nshare chain is a blockchain running at a lower difficulty than the\nBitcoin blockchain. The share chain allows pool miners to collaborate in\na decentralized pool by mining shares on the share chain at a rate of\none share block every 30 seconds. Each of the blocks on the share chain\nrecords a proportionate share reward for the pool miners who contribute\nwork, carrying the shares forward from the previous share block. When\none of the share blocks also achieves the Bitcoin network target, it is\npropagated and included on the Bitcoin blockchain, rewarding all the\npool miners who contributed to all the shares that preceded the winning\nshare block. Essentially, instead of a pool server keeping track of pool\nminer shares and rewards, the share chain allows all pool miners to keep\ntrack of all shares using a decentralized consensus mechanism like\nBitcoin's blockchain consensus mechanism.\n\nP2Pool mining is more complex than pool mining because it requires that\nthe pool miners run a dedicated computer with enough disk space, memory,\nand internet bandwidth to support a Bitcoin full node and the P2Pool\nnode software. P2Pool miners connect their mining hardware to their\nlocal P2Pool node, which simulates the functions of a pool server by\nsending block templates to the mining hardware. On P2Pool, individual\npool miners construct their own candidate blocks, aggregating\ntransactions much like solo miners, but then mine collaboratively on the\nshare chain. P2Pool is a hybrid approach that has the advantage of much\nmore granular payouts than solo mining, but without giving too much\ncontrol to a pool operator like managed pools.\n\nEven though P2Pool reduces the concentration of power by mining pool\noperators, it is conceivably vulnerable to 51% attacks against the share\nchain itself. A much broader adoption of P2Pool does not solve the 51%\nattack problem for Bitcoin itself. Rather, P2Pool makes Bitcoin more\nrobust overall, as part of a diversified mining ecosystem.  As of this\nwriting, P2Pool has fallen into disuse, but new protocols such as\nStratum v2 can allow individual miners to choose the transactions they\ninclude in their(((\"mining\", \"competitiveness of\", startref=\"mining-competitive\")))(((\"mining\", \"mining pools\", startref=\"mining-mining-pools\")))(((\"mining pools\", startref=\"mining-pools\")))(((\"P2Pool (peer-to-peer mining pool)\", startref=\"p2pool\"))) blocks.\n\n[[consensus_attacks]]\n=== Hashrate Attacks\n\nBitcoin's (((\"decentralized consensus\", \"hashrate attacks\", id=\"decentral-consensus-hashrate\")))(((\"mining\", \"hashrate attacks\", id=\"mining-hashrate\")))(((\"hashrate attacks\", id=\"hashrate\")))(((\"forks\", \"hashrate attacks\", id=\"fork-hashrate\")))consensus mechanism is, at least\ntheoretically, vulnerable to attack by miners (or pools) that attempt to\nuse their hashing power to dishonest or destructive ends. As we saw, the\nconsensus mechanism depends on having a majority of the miners acting\nhonestly out of self-interest. However, if a miner or group of miners\ncan achieve a significant share of the mining power, they can attack the\nconsensus mechanism so as to disrupt the security and availability of\nthe Bitcoin network.\n\nIt is important to note that hashrate attacks have the greatest effect on future\nconsensus. Confirmed transactions on the best blockchain\n become more and more immutable as time passes. While in theory,\na fork can be achieved at any depth, in practice, the computing power\nneeded to force a very deep fork is immense, making old blocks\nvery hard to change. Hashrate attacks also do not affect the security\nof the private keys and signing algorithms.\n\nOne attack scenario against the consensus mechanism is (((\"majority attacks\", id=\"majority-attack\")))(((\"51% attacks\", id=\"attack-51\")))(((\"double-spend attacks\", id=\"double-spend\")))called the _majority\nattack_ or _51% attack._ In this scenario a group of miners, controlling a majority\nof the total network's hashing power (such as 51%), collude to attack Bitcoin.\nWith the ability to mine the majority of the blocks, the attacking\nminers can cause deliberate \"forks\" in the blockchain and double-spend\ntransactions or execute denial-of-service attacks against specific\ntransactions or addresses. A fork/double-spend attack is where the\nattacker causes previously confirmed blocks to be invalidated by forking\nbelow them and reconverging on an alternate chain. With sufficient\npower, an attacker can invalidate six or more blocks in a row, causing\ntransactions that were considered immutable (six confirmations) to be\ninvalidated. Note that a double-spend can only be done on the attacker's\nown transactions, for which the attacker can produce a valid signature.\nDouble-spending one's own transactions can be profitable if invalidating\na transaction allows the attacker to get an irreversible exchange payment or\nproduct without paying for it.\n\nLet's examine a practical example of a 51% attack. In the first chapter,\nwe looked at a transaction between Alice and Bob. Bob, the seller, is\nwilling to accept payment without waiting for\nconfirmation (mining in a block) because the risk of a double-spend on\na small item is low in comparison to the convenience of rapid\ncustomer service. This is similar to the practice of coffee shops that\naccept credit card payments without a signature for amounts below $25,\nbecause the risk of a credit-card chargeback is low while the cost of\ndelaying the transaction to obtain a signature is comparatively larger.\nIn contrast, selling a more expensive item for bitcoins runs the risk of\na double-spend attack, where the buyer broadcasts a competing\ntransaction that spends one of the same inputs (UTXOs) and cancels the payment\nto the merchant.\nA 51% attack allows attackers\nto double-spend their own transactions in the new chain, thus undoing\nthe corresponding transaction in the old chain.\n\n//TODO:distinguish between majority attack and sub-majority \"reorg\"\n//attack.\n\nIn our example, malicious attacker Mallory goes to Carol's gallery and purchases a\nset of beautiful paintings depicting Satoshi Nakamoto as Prometheus.\nCarol sells the paintings for $250,000 in bitcoins to\nMallory. Instead of waiting for six or more confirmations on the\ntransaction, Carol wraps and hands the paintings to Mallory after only\none confirmation. Mallory works with an accomplice, Paul, who operates a\nlarge mining pool, and the accomplice launches an attack as soon as\nMallory's transaction is included in a block. Paul directs the mining\npool to remine the same block height as the block containing Mallory's\ntransaction, replacing Mallory's payment to Carol with a transaction\nthat double-spends the same input as Mallory's payment. The double-spend\ntransaction consumes the same UTXO and pays it back to Mallory's wallet\ninstead of paying it to Carol, essentially allowing Mallory to keep the\nbitcoins. Paul then directs the mining pool to mine an additional block,\nso as to make the chain containing the double-spend transaction longer\nthan the original chain (causing a fork below the block containing\nMallory's transaction). When the blockchain fork resolves in favor of\nthe new (longer) chain, the double-spent transaction replaces the\noriginal payment to Carol. Carol is now missing the three paintings and\nalso has no payment. Throughout all this activity, Paul's mining\npool participants might remain blissfully unaware of the double-spend\nattempt because they mine with automated miners and cannot monitor\nevery transaction or block.\n\nTo protect against this\nkind of attack, a merchant selling large-value items must wait at least\nsix confirmations before giving the product to the buyer. Waiting for\nmore than six confirmations may sometimes be warranted.  Alternatively,\nthe merchant should use an escrow multisignature account, again waiting\nfor several confirmations after the escrow account is funded. The more\nconfirmations elapse, the harder it becomes to invalidate a transaction\nby reorganizing the blockchain. For high-value items, payment by bitcoin will still\nbe convenient and efficient even if the buyer has to wait 24 hours for\ndelivery, which would correspond to approximately 144 confirmations.\n\nIn addition to a double-spend attack, the other scenario for a consensus\nattack is to deny service to specific participants (specific\nBitcoin addresses). An attacker with a majority of the mining power can\ncensor transactions. If they are included in a block\nmined by another miner, the attacker can deliberately fork and remine\nthat block, again excluding the specific transactions. This type of\nattack can result in a sustained denial-of-service against a specific\naddress or set of addresses for as long as the attacker controls the\nmajority of the mining power.\n\n//TODO: update to not use 51% attack name (see other TODO in this\n//chapter)\n\nDespite its (((\"majority attacks\", startref=\"majority-attack\")))(((\"51% attacks\", startref=\"attack-51\")))(((\"double-spend attacks\", startref=\"double-spend\")))name, the 51% attack scenario doesn't actually require 51%\nof the hashing power. In fact, such an attack can be attempted with a\nsmaller percentage of the hashing power. The 51% threshold is simply the\nlevel at which such an attack is almost guaranteed to succeed. A\nhashrate attack is essentially a tug-of-war for the next block, and the\n\"stronger\" group is more likely to win. With less hashing power, the\nprobability of success is reduced because other miners control the\ngeneration of some blocks with their \"honest\" mining power. One way to\nlook at it is that the more hashing power an attacker has, the longer\nthe fork he can deliberately create, the more blocks in the recent past\nhe can invalidate, or the more blocks in the future he can control.\nSecurity research groups have used statistical modeling to claim that\nvarious types of hashrate attacks are possible with as little as 30% of\nthe hashing power.\n\nThe centralization of control (((\"mining pools\")))caused by mining pools has\nintroduced the risk of for-profit attacks by a mining pool operator. The\npool operator in a managed pool controls the construction of candidate\nblocks and also controls which transactions are included. This gives the\npool operator the power to exclude transactions or introduce\ndouble-spend transactions. If such abuse of power is done in a limited\nand subtle way, a pool operator could conceivably profit from a\nhashrate attack without being noticed.\n\nNot all attackers will be motivated by profit, however. One potential\nattack scenario is where an attacker intends to disrupt the Bitcoin\nnetwork without the possibility of profiting from such disruption. A\nmalicious attack aimed at crippling Bitcoin would require enormous\ninvestment and covert planning but could conceivably be launched by a\nwell-funded, most likely state-sponsored, attacker. Alternatively, a\nwell-funded attacker could attack Bitcoin by simultaneously\namassing mining hardware, compromising pool operators, and attacking\nother pools with denial-of-service. All of these scenarios are\ntheoretically possible.\n\nUndoubtedly, a serious hashrate attack would erode confidence in\nBitcoin in the short term, possibly causing a significant price decline.\nHowever, the Bitcoin network and software are constantly evolving, so\nattacks would be met with countermeasures by the\nBitcoin (((\"decentralized consensus\", \"hashrate attacks\", startref=\"decentral-consensus-hashrate\")))(((\"mining\", \"hashrate attacks\", startref=\"mining-hashrate\")))(((\"hashrate attacks\", startref=\"hashrate\")))(((\"forks\", \"hashrate attacks\", startref=\"fork-hashrate\")))community.\n\n[[consensus_changes]]\n=== Changing the Consensus Rules\n\nThe rules(((\"consensus rules\"))) of consensus determine the validity of\ntransactions and blocks. These rules are the basis for collaboration\nbetween all Bitcoin nodes and are responsible for the convergence of all\nlocal perspectives into a single consistent blockchain across the entire\nnetwork.\n\nWhile the consensus rules are invariable in the short term and must be\nconsistent across all nodes, they are not invariable in the long term.\nIn order to evolve and develop the Bitcoin system, the rules can\nchange from time to time to accommodate new features, improvements, or\nbug fixes. Unlike traditional software development, however, upgrades to\na consensus system are much more difficult and require coordination\nbetween all participants.\n\n[[hard_forks]]\n==== Hard Forks\n\nIn <<forks>> we looked(((\"consensus rules\", \"hard forks\", \"explained\", id=\"consensus-hard-fork\")))(((\"forks\", \"hard forks\", \"explained\", id=\"forks-hard\")))(((\"hard forks\", \"explained\", id=\"hard-forks-ch12\"))) at how\nthe Bitcoin network may briefly diverge, with two parts of the network\nfollowing two different branches of the blockchain for a short time. We\nsaw how this process occurs naturally, as part of the normal operation\nof the network and how the network converges on a common blockchain\nafter one or more blocks are mined.\n\nThere is another scenario in which the network may diverge into\nfollowing two chains: a change in the consensus rules. This type of fork\nis called a _hard fork_, because after the fork, the network may not\nconverge onto a single chain. Instead, the two chains can evolve\nindependently. Hard forks occur when part of the network is operating\nunder a different set of consensus rules than the rest of the network.\nThis may occur because of a bug or because of a deliberate change in the\nimplementation of the consensus rules.\n\nHard forks can be used to change the rules of consensus, but they\nrequire coordination between all participants in the system. Any nodes\nthat do not upgrade to the new consensus rules are unable to participate\nin the consensus mechanism and are forced onto a separate chain at the\nmoment of the hard fork. Thus, a change introduced by a hard fork can be\nthought of as not \"forward compatible,\" in that nonupgraded systems can\nno longer process blocks because of the new consensus rules.\n\nLet's examine the mechanics of a hard fork with a specific example.\n\n<<blockchainwithforks>> shows a blockchain with two forks. At block\nheight 4, a one-block fork occurs. This is the type of spontaneous fork\nwe saw in <<forks>>. With the mining of block 5, the network converges\non one chain and the fork is resolved.\n\n[[blockchainwithforks]]\n.A blockchain with forks.\nimage::images/mbc3_1202.png[A blockchain with forks]\n\nLater, however, at block height 6,\na new implementation of the client is released with a change in the\nconsensus rules. Starting on block height 7, miners running this new\nimplementation will accept a new type of bitcoin; let's call\nit a \"foocoin.\" Immediately after, a\nnode running the new implementation creates a transaction that contains\na foocoin and a miner with the updated software mines block 7b\ncontaining this transaction.\n\nAny node or miner that has not upgraded the software to validate foocoin\nis now unable to process block 7b. From their perspective,\nboth the transaction that contained a foocoin and block 7b that\ncontained that transaction are invalid because they are evaluating them\nbased upon the old consensus rules. These nodes will reject the\ntransaction and the block and will not propagate them. Any miners that\nare using the old rules will not accept block 7b and will continue to\nmine a candidate block whose parent is block 6. In fact, miners using\nthe old rules may not even receive block 7b if all the nodes they are\nconnected to are also obeying the old rules and therefore not\npropagating the block. Eventually, they will be able to mine block 7a,\nwhich is valid under the old rules and does not contain any transactions\nwith foocoins.\n\nThe two chains continue to diverge from this point. Miners on the \"b\"\nchain will continue to accept and mine transactions containing foocoins,\nwhile miners on the \"a\" chain will continue to ignore these\ntransactions. Even if block 8b does not contain any foocoin\ntransactions, the miners on the \"a\" chain cannot process it. To them it\nappears to be an invalid block, as its parent \"7b\" is not recognized as a\n(((\"consensus rules\", \"hard forks\", \"explained\", startref=\"consensus-hard-fork\")))(((\"forks\", \"hard forks\", \"explained\", startref=\"forks-hard\")))(((\"hard forks\", \"explained\", startref=\"hard-forks-ch12\")))valid block.\n\n===== Hard forks: Software, network, mining, and chain\n\nFor (((\"software forks\", id=\"software-fork\")))(((\"network forks\", id=\"network-fork\")))(((\"mining forks\", id=\"mining-fork\")))(((\"chain forks\", id=\"chain-fork\")))(((\"consensus rules\", \"hard forks\", \"types of\", id=\"consensus-hard-fork-type\")))(((\"forks\", \"hard forks\", \"types of\", id=\"forks-hard-type\")))(((\"hard forks\", \"types of\", id=\"hard-forks-type\")))software\ndevelopers, the term \"fork\" has another meaning, adding confusion to the\nterm \"hard fork.\" In open source software, a fork occurs when a group of\ndevelopers choose to follow a different software roadmap and start a\ncompeting implementation of an open source project. We've already\ndiscussed two circumstances that will lead to a hard fork: a bug in the\nconsensus rules and a deliberate modification of the consensus rules. In\nthe case of a deliberate change to the consensus rules, a software fork\nprecedes the hard fork. However, for this type of hard fork to occur, a\nnew software implementation of the consensus rules must be developed,\nadopted, and launched.\n\nExamples of software forks that have attempted to change consensus rules\ninclude Bitcoin XT and Bitcoin Classic.\nHowever, neither of those programs resulted in a hard\nfork. While a software fork is a necessary precondition, it is not in\nitself sufficient for a hard fork to occur. For a hard fork to occur,\nthe competing implementation must be adopted and the new rules\nactivated, by miners, wallets, and intermediary nodes. Conversely, there\nare numerous alternative implementations of Bitcoin Core, and even\nsoftware forks, that do not change the consensus rules and barring a\nbug, can coexist on the network and interoperate without causing a hard\nfork.\n\nConsensus rules may differ in obvious and explicit ways, in the\nvalidation of transactions or blocks. The rules may also differ in more\nsubtle ways, in the implementation of the consensus rules as they apply\nto Bitcoin scripts or cryptographic primitives such as digital\nsignatures. Finally, the consensus rules may differ in unanticipated\nways because of implicit consensus constraints imposed by system\nlimitations or implementation details. An example of the latter was seen\nin the unanticipated hard fork during the upgrade of Bitcoin Core 0.7 to\n0.8, which was caused by a limitation in the Berkeley DB implementation\nused to store blocks.\n\nConceptually, we can think of a hard fork as developing in four stages:\na software fork, a network fork, a mining fork, and a chain fork.\nThe process begins when an alternative implementation of the client,\nwith modified consensus rules, is created by developers.\n\nWhen this forked implementation is deployed in the network, a certain\npercentage of miners, wallet users, and intermediate nodes may adopt and\nrun this implementation.\nFirst, the network will fork. Nodes based on the original implementation\nof the consensus rules will reject any transactions and blocks that are\ncreated under the new rules. Furthermore, the nodes following the\noriginal consensus rules may disconnect from any\nnodes that are sending them these invalid transactions and blocks. As a\nresult, the network may partition into two: old nodes will only remain\nconnected to old nodes and new nodes will only be connected to new\nnodes. A single block based on the new rules will ripple\nthrough the network and result in a partition into two networks.\n\nNew miners may mine on top of the new block,\nwhile old miners will mine a separate chain based on the old rules. The\npartitioned network will make it so that the miners operating on\nseparate consensus rules won't likely receive each other's blocks, as\nthey are connected to two separate (((\"software forks\", startref=\"software-fork\")))(((\"network forks\", startref=\"network-fork\")))(((\"mining forks\", startref=\"mining-fork\")))(((\"chain forks\", startref=\"chain-fork\")))(((\"consensus rules\", \"hard forks\", \"types of\", startref=\"consensus-hard-fork-type\")))(((\"forks\", \"hard forks\", \"types of\", startref=\"forks-hard-type\")))(((\"hard forks\", \"types of\", startref=\"hard-forks-type\")))networks.\n\n===== Diverging miners and difficulty\n\nAs miners (((\"consensus rules\", \"hard forks\", \"difficulty and\", id=\"consensus-hard-fork-difficult\")))(((\"forks\", \"hard forks\", \"difficulty and\", id=\"forks-hard-difficult\")))(((\"hard forks\", \"difficulty and\", id=\"hard-forks-difficult\")))(((\"difficulty\", \"hard forks and\", id=\"difficulty-hardfork\")))diverge into mining two different chains, the\nhashing power is split between the chains. The mining power can be split\nin any proportion between the two chains. The new rules may only be\nfollowed by a minority, or by the vast majority of the mining power.\n\nLet's assume, for example, an 80%&#x2013;20% split, with the majority of\nthe mining power using the new consensus rules. Let's also assume that\nthe fork occurs immediately after a retargeting period.\n\nThe two chains would each inherit the difficulty from the retargeting\nperiod. The new consensus rules would have 80% of the previously\navailable mining power committed to them. From the perspective of this\nchain, the mining power has suddenly declined by 20% vis-a-vis the\nprevious period. Blocks will be found on average every 12.5 minutes,\nrepresenting the 20% decline in mining power available to extend this\nchain. This rate of block issuance will continue (barring any changes in\nhashing power) until 2,016 blocks are mined, which will take\napproximately 25,200 minutes (at 12.5 minutes per block), or 17.5 days.\nAfter 17.5 days, a retarget will occur and the difficulty will adjust\n(reduced by 20%) to produce 10-minute blocks again, based on the reduced\namount of hashing power in this chain.\n\nThe minority chain, mining under the old rules with only 20% of the\nhashing power, will face a much more difficult task. On this chain,\nblocks will now be mined every 50 minutes on average. The difficulty\nwill not be adjusted for 2,016 blocks, which will take 100,800 minutes,\nor approximately 10 weeks to mine. Assuming a fixed capacity per block,\nthis will also result in a reduction of transaction capacity by a factor\nof 5, as there are fewer blocks per hour available to record transactions.\n\n===== Contentious hard forks\n\nThis is (((\"consensus rules\", \"hard forks\", \"contentious forks\")))(((\"forks\", \"hard forks\", \"contentious forks\")))(((\"hard forks\", \"contentious forks\")))(((\"contentious hard forks\")))the dawn of the development of software\nfor decentralized consensus. Just as other innovations in development changed both the methods\nand products of software and created new methodologies, new tools, and\nnew communities in its wake, consensus software development also\nrepresents a new frontier in computer science. Out of the debates,\nexperiments, and tribulations of Bitcoin development, we\nwill see new development tools, practices, methodologies, and\ncommunities emerge.\n\nHard forks are seen as risky because they force a minority to either\nupgrade or remain on a minority chain. The risk of splitting the entire\nsystem into two competing systems is seen by many as an unacceptable\nrisk. As a result, many developers are reluctant to use the hard fork\nmechanism to implement upgrades to the consensus rules, unless there is\nnear-unanimous support from the entire network. Any hard fork proposals\nthat do not have near-unanimous support are considered too contentious\nto attempt without risking a partition of the system.\n\nAlready we have seen the emergence of new methodologies to address the\nrisks of hard forks. In the next section, we will look at soft forks\nand the methods for signaling and activation of\nconsensus modifications.\n\n==== Soft Forks\n\nNot all(((\"consensus rules\", \"soft forks\", \"explained\", id=\"consensus-soft-explain\")))(((\"forks\", \"soft forks\", \"explained\", id=\"fork-soft-explain\")))(((\"soft forks\", \"explained\", id=\"soft-fork-explain\"))) consensus rule changes cause a hard fork. Only\nconsensus changes that are forward-incompatible cause a fork. If the\nchange is implemented in such a way that an unmodified client still sees\nthe transaction or block as valid under the previous rules, the change\ncan happen without a fork.\n\nThe term _soft fork_ was introduced to distinguish this upgrade method\nfrom a \"hard fork.\" In practice, a soft fork is not a fork at all. A\nsoft fork is a forward-compatible change to the consensus rules that\nallows unupgraded clients to continue to operate in consensus with the\nnew rules.\n\nOne aspect of soft forks that is not immediately obvious is that soft\nfork upgrades can only be used to constrain the consensus rules, not to\nexpand them. In order to be forward compatible, transactions and blocks\ncreated under the new rules must be valid under the old rules too, but\nnot vice versa. The new rules can only limit what is valid; otherwise,\nthey will trigger a hard fork when rejected under the old rules.\n\nSoft forks can be implemented in a number of ways&#x2014;the term does\nnot specify a particular method, but rather a set of methods that all have\none thing in common: they don't require all nodes to upgrade or force\nnonupgraded nodes out of consensus.\n\nTwo soft forks have been\nimplemented in Bitcoin, based on the re-interpretation(((\"NOP opcodes\")))(((\"OP_NOP opcodes\"))) of NOP opcodes.\nBitcoin Script had 10 opcodes reserved for future use, NOP1 through\nNOP10. Under the consensus rules, the presence of these opcodes in a\nscript is interpreted as a null-potent operator, meaning they have no\neffect. Execution continues after the NOP opcode as if it wasn't there.\n\nA soft fork therefore can modify the semantics of a NOP code to give it\nnew meaning. For example, BIP65 (+CHECKLOCKTIMEVERIFY+) reinterpreted\nthe NOP2 opcode. Clients implementing BIP65 interpret NOP2 as\n+OP_CHECKLOCKTIMEVERIFY+ and impose an absolute lock time consensus rule\non UTXOs that contain this opcode in their locking scripts. This change\nis a soft fork because a transaction that is valid under BIP65 is also\nvalid on any client that is not implementing (ignorant of) BIP65. To\nthe old clients, the script contains an NOP code, which is(((\"consensus rules\", \"soft forks\", \"explained\", startref=\"consensus-soft-explain\")))(((\"forks\", \"soft forks\", \"explained\", startref=\"fork-soft-explain\")))(((\"soft forks\", \"explained\", startref=\"soft-fork-explain\"))) ignored.\n\n===== Criticisms of soft forks\n\nSoft forks (((\"consensus rules\", \"soft forks\", \"criticisms of\", id=\"consensus-soft-critic\")))(((\"forks\", \"soft forks\", \"criticisms of\", id=\"fork-soft-critic\")))(((\"soft forks\", \"criticisms of\", id=\"soft-fork-critic\")))based on the NOP opcodes are\nrelatively uncontroversial. The NOP opcodes were placed in Bitcoin\nScript with the explicit goal of allowing non-disruptive upgrades.\n\nHowever, many developers are concerned that other methods of soft fork\nupgrades make unacceptable trade-offs. Common criticisms of soft fork\nchanges include:\n\nTechnical debt:: Because soft forks are more technically complex than a\nhard fork upgrade, they (((\"technical debt\")))introduce _technical debt_, a term that refers\nto increasing the future cost of code maintenance because of design\ntrade-offs made in the past. Code complexity in turn increases the\nlikelihood of bugs and security vulnerabilities.\n\nValidation relaxation:: Unmodified clients see transactions as valid\nwithout evaluating the modified consensus rules. In effect, the\nunmodified clients are not validating using the full range of consensus\nrules, as they are blind to the new rules. This applies to NOP-based\nupgrades, as well as other soft fork upgrades.\n\nIrreversible upgrades:: Because soft forks create transactions with\nadditional consensus constraints, they become irreversible upgrades in\npractice. If a soft fork upgrade were to be reversed after being\nactivated, any transactions created under the new rules could result in\na loss of funds under the old rules. For example, if a CLTV transaction\nis evaluated under the old rules, there is no timelock constraint and it\ncan be spent at any time. Therefore, critics contend that a failed soft\nfork that had to be reversed because of a bug would almost certainly\nlead to loss of funds.\n\n[[softforksignaling]]\n===== Soft fork signaling with block version\n\nSince soft forks allow\nunmodified clients to continue to operate within consensus, one\nmechanism for \"activating\" a soft fork is through miners signaling that\nthey are ready and willing to enforce the new consensus rules.  If\nall miners enforce the new rules, there's no risk of unmodified\nnodes accepting a block that upgraded nodes would reject.\nThis mechanism was introduced by BIP34.\n\n===== BIP34: Signaling and activation\n\nBIP34 used (((\"consensus rules\", \"soft forks\", \"BIP34 signaling/activation\", tertiary-sortas=\"BIP034\", id=\"consensus-soft-bip34\")))(((\"forks\", \"soft forks\", \"BIP34 signaling/activation\", tertiary-sortas=\"BIP034\", id=\"fork-soft-bip34\")))(((\"soft forks\", \"BIP34 signaling/activation\", secondary-sortas=\"BIP034\", id=\"soft-fork-bip34\")))(((\"signaling\", \"BIP34\", secondary-sortas=\"BIP034\", id=\"signal-bip34\")))(((\"activation (soft forks)\", \"BIP34\", secondary-sortas=\"BIP034\", id=\"activation-bip34\")))(((\"BIP34 signaling/activation\", primary-sortas=\"BIP034\", id=\"bip34\")))the block version\nfield to allow miners to signal readiness for a specific consensus rule\nchange. Prior to BIP34, the block version was set to \"1\" by\n_convention_ not enforced by _consensus_.\n\nBIP34 defined a consensus rule change that required the coinbase field\n(input) of the coinbase transaction to contain the block height. Prior\nto BIP34, the coinbase could contain any arbitrary data the miners\nchose to include. After activation of BIP34, valid blocks had to\ncontain a specific block height at the beginning of the coinbase and be\nidentified with a block version number greater than or equal to \"2.\"\n\nTo signal their readiness to enforce the rules of BIP34, miners set the block\nversion to \"2,\" instead of \"1.\" This did not immediately make version\n\"1\" blocks invalid. Once activated, version \"1\" blocks would become\ninvalid and all version \"2\" blocks would be required to contain the\nblock height in the coinbase to be valid.\n\nBIP34 defined a two-step activation mechanism based on a rolling\nwindow of 1,000 blocks. A miner would signal their individual\nreadiness for BIP34 by constructing blocks with \"2\" as the version\nnumber. Strictly speaking, these blocks did not yet have to comply with\nthe new consensus rule of including the block height in the coinbase\ntransaction because the consensus rule had not yet been activated. The\nconsensus rules activated in two steps:\n\n- If 75% (750 of the most recent 1,000 blocks) are marked with version\n  \"2,\" then version \"2\" blocks must contain block height in the coinbase\n  transaction or they are rejected as invalid. Version \"1\" blocks are\n  still accepted by the network and do not need to contain block height.\n  The old and new consensus rules coexist during this period.\n\n- When 95% (950 of the most recent 1,000 blocks) are version \"2,\" version\n  \"1\" blocks are no longer considered valid. Version \"2\" blocks are\n  valid only if they contain the block height in the coinbase (as per\n  the previous threshold). Thereafter, all blocks must comply with the\n  new consensus rules, and all valid blocks must contain block height in\n  the coinbase transaction.\n\nAfter successful signaling and activation under the BIP34 rules, this\nmechanism was used twice more to activate soft forks:\n\n- https://oreil.ly/Xes2l[BIP66]\n  Strict DER Encoding of Signatures was activated by BIP34 style\n  signaling with a block version \"3.\"\n\n- https://oreil.ly/pk8tz[BIP65]\n  +CHECKLOCKTIMEVERIFY+ was activated by BIP34 style signaling with a\n  block version \"4.\"\n\nAfter the activation of BIP65, the signaling and activation mechanism\nof BIP34 was retired and replaced with (((\"consensus rules\", \"soft forks\", \"BIP34 signaling/activation\", tertiary-sortas=\"BIP034\", startref=\"consensus-soft-bip34\")))(((\"forks\", \"soft forks\", \"BIP34 signaling/activation\", tertiary-sortas=\"BIP034\", startref=\"fork-soft-bip34\")))(((\"soft forks\", \"BIP34 signaling/activation\", secondary-sortas=\"BIP034\", startref=\"soft-fork-bip34\")))(((\"signaling\", \"BIP34\", secondary-sortas=\"BIP034\", startref=\"signal-bip34\")))(((\"activation (soft forks)\", \"BIP34\", secondary-sortas=\"BIP034\", startref=\"activation-bip34\")))(((\"BIP34 signaling/activation\", primary-sortas=\"BIP034\", startref=\"bip34\")))the BIP9 signaling mechanism\ndescribed next.\n\n[role=\"less_space pagebreak-before\"]\n[[bip9]]\n===== BIP9: Signaling and activation\n\nThe (((\"consensus rules\", \"soft forks\", \"BIP9 signaling/activation\", tertiary-sortas=\"BIP009\", id=\"consensus-soft-bip9\")))(((\"forks\", \"soft forks\", \"BIP9 signaling/activation\", tertiary-sortas=\"BIP009\", id=\"fork-soft-bip9\")))(((\"soft forks\", \"BIP9 signaling/activation\", secondary-sortas=\"BIP009\", id=\"soft-fork-bip9\")))(((\"signaling\", \"BIP9\", secondary-sortas=\"BIP009\", id=\"signal-bip9\")))(((\"activation (soft forks)\", \"BIP9\", secondary-sortas=\"BIP009\", id=\"activation-bip9\")))(((\"BIP9 signaling/activation\", primary-sortas=\"BIP009\", id=\"bip9-ch12\")))mechanism used by BIP34, BIP66, and BIP65 was\nsuccessful in activating three soft forks. However, it was replaced\nbecause it had several limitations:\n\n- By using the integer value of the block version, only one soft fork\n  could be activated at a time, so it required coordination between soft\n  fork proposals and agreement on their prioritization and sequencing.\n\n- Furthermore, because the block version was incremented, the mechanism\n  didn't offer a straightforward way to reject a change and then propose\n  a different one. If old clients were still running, they could mistake\n  signaling for a new change as signaling for the previously rejected\n  change.\n\n- Each new change irrevocably reduced the available block versions for\n  future changes.\n\nBIP9 was proposed to overcome these challenges and improve the rate and\nease of implementing future changes.\n\nBIP9 interprets the block version as a bit field instead of an integer.\nBecause the block version was originally used as an integer for versions 1\nthrough 4, only 29 bits remain available to be used as a bit field. This\nleaves 29 bits that can be used to independently and simultaneously\nsignal readiness on 29 different proposals.\n\nBIP9 also sets a maximum time for signaling and activation. This way\nminers don't need to signal forever. If a proposal is not activated\nwithin the +TIMEOUT+ period (defined in the proposal), the proposal is\nconsidered rejected. The proposal may be resubmitted for signaling with\na different bit, renewing the activation period.\n\nFurthermore, after the +TIMEOUT+ has passed and a feature has been\nactivated or rejected, the signaling bit can be reused for another\nfeature without confusion. Therefore, up to 29 changes can be signaled\nin parallel. After +TIMEOUT+, the bits can be \"recycled\" to propose\nnew changes.\n\n[NOTE]\n====\nWhile signaling bits can be reused or recycled, as long as the voting\nperiod does not overlap, the authors of BIP9 recommend that bits are\nreused only when necessary; unexpected behavior could occur due to bugs\nin older software. In short, we should not expect to see reuse until all\n29 bits have been used once.\n====\n\nProposed changes are identified by a data structure that contains the following fields:\n\nname:: A short description used to distinguish between proposals. Most\noften the BIP describing the proposal, as \"bipN,\" where N is the BIP\nnumber.\n\nbit:: 0 through 28, the bit in the block version that miners use to\nsignal approval for this proposal.\n\nstarttime:: The time (based on MTP) that signaling\nstarts after which the bit's value is interpreted as signaling readiness\nfor the proposal.\n\nendtime:: The time (based on MTP) after which the change is considered\nrejected if it has not reached the activation threshold.\n\nUnlike BIP34, BIP9 counts activation signaling in whole intervals\nbased on the difficulty retarget period of 2,016 blocks. For every\nretarget period, if the sum of blocks signaling for a proposal exceeds\n95% (1,916 of 2,016), the proposal will be activated one retarget period\nlater.\n\nBIP9 offers a proposal state diagram to illustrate the various stages\nand transitions for a proposal, as shown in <<bip9states>>.\n\n\n[[bip9states]]\n.BIP9 state transition diagram.\nimage::images/mbc3_1203.png[BIP9 Proposal State Transition Diagram]\n\n\nProposals start in the +DEFINED+ state once their parameters are known\n(defined) in the Bitcoin software. For blocks with MTP after the start\ntime, the proposal state transitions to +STARTED+. If the voting\nthreshold is exceeded within a retarget period and the timeout has not\nbeen exceeded, the proposal state transitions to +LOCKED_IN+. One\nretarget period later, the proposal becomes +ACTIVE+. Proposals remain\nin the +ACTIVE+ state perpetually once they reach that state. If the\ntimeout elapses before the voting threshold has been reached, the\nproposal state changes to +FAILED+, indicating a rejected proposal.\n+FAILED+ proposals remain in that state perpetually.\n\nBIP9 was first implemented for the activation of +CHECKSEQUENCEVERIFY+\nand associated BIPs (68, 112, 113). The proposal named \"csv\" was\nactivated successfully in July of 2016.\n\nThe (((\"consensus rules\", \"soft forks\", \"BIP9 signaling/activation\", tertiary-sortas=\"BIP009\", startref=\"consensus-soft-bip9\")))(((\"forks\", \"soft forks\", \"BIP9 signaling/activation\", tertiary-sortas=\"BIP009\", startref=\"fork-soft-bip9\")))(((\"soft forks\", \"BIP9 signaling/activation\", secondary-sortas=\"BIP009\", startref=\"soft-fork-bip9\")))(((\"signaling\", \"BIP9\", secondary-sortas=\"BIP009\", startref=\"signal-bip9\")))(((\"activation (soft forks)\", \"BIP9\", secondary-sortas=\"BIP009\", startref=\"activation-bip9\")))(((\"BIP9 signaling/activation\", primary-sortas=\"BIP009\", startref=\"bip9-ch12\")))standard is defined in\nhttps://oreil.ly/FoCsz[BIP9\n(Version bits with timeout and delay)].\n\n===== BIP8: Mandatory lock-in with early activation\n\nAfter(((\"consensus rules\", \"soft forks\", \"BIP8 mandatory lock-in\", tertiary-sortas=\"BIP008\", id=\"consensus-soft-bip8\")))(((\"forks\", \"soft forks\", \"BIP8 mandatory lock-in\", tertiary-sortas=\"BIP008\", id=\"fork-soft-bip8\")))(((\"soft forks\", \"BIP8 mandatory lock-in\", secondary-sortas=\"BIP008\", id=\"soft-fork-bip8\")))(((\"activation (soft forks)\", \"BIP8\", secondary-sortas=\"BIP008\", id=\"activate-soft-fork-bip8\")))(((\"BIP8 mandatory lock-in\", primary-sortas=\"BIP008\", id=\"bip8\")))(((\"mandatory lock-in\", id=\"mandatory-lockin\")))(((\"lock-in, mandatory\", id=\"lockin-mandatory\")))(((\"segregated witness (segwit)\", id=\"segwit-bip8\"))) BIP9 was successfully used for the CSV-related soft fork, the next\nimplementation of a soft fork consensus change also attempted to use it\nfor miner-enforced activation.  However, some people opposed that soft\nfork proposal, called _segwit_, and very few miners signaled readiness\nto enforce segwit for several months.\n\nIt was later discovered that some miners, especially miners associated\nwith the dissenters, may have been using hardware that gave them a\nhidden advantage over other miners using a feature called _covert\nASICBoost_.  Unintentionally, segwit interfered with the ability to use\ncovert ASICBoost--if segwit was activated, the miners using it would\nlose their hidden advantage.\n\nAfter the community discovered this conflict of interest, some users\ndecided they wanted to exercise their power not to accept blocks from\nminers unless those blocks followed certain rules.  The rules the users\nultimately wanted were the new rules added by segwit, but the users\nwanted to multiply their efforts by taking advantage of the large\nnumbers of nodes that planned to enforce the rules of segwit if enough\nminers signaled readiness for it.  A pseudonymous developer proposed\nBIP148, (((\"BIP148 activation of segwit\")))which required any node implementing it to reject all blocks\nthat didn't signal for segwit starting on a certain date and continuing\nuntil segwit activated.\n\nAlthough only a limited number of users actually ran BIP148 code, many\nother users seemed to agree with the sentiment and may have been\nprepared to commit to BIP148.  A few days before BIP148 was due to go\ninto effect, almost all miners began signaling their readiness to\nenforce segwit's rules.  Segwit reached its lock-in threshold about two\nweeks later and activated about two weeks after that.\n\nMany users came to believe that it was a flaw in BIP9 that miners could\nprevent an activation attempt from being successful by not signaling for\na year.  They wanted a mechanism that would ensure a soft fork was\nactivated by a particular block height but which also allowed miners to\nsignal they were ready to lock it in earlier.\n\nThe method developed for that was BIP8, which is similar to BIP9 except\nthat it defines a +MUST_SIGNAL+ period where miners must signal that\nthey are ready to enforce the soft fork proposal.\n\nSoftware was published that used BIP8 to attempt to activate the\ntaproot proposal in 2021, and there was evidence that at least a\nsmall number of users ran that software.  Some of those users also claim\nthat their willingness to use BIP8 to force miners to activate taproot\nwas the reason it did eventually activate.  They claim that if taproot\nhad not been activated quickly, other users would have also begun\nrunning BIP8.  Unfortunately, there's no way to prove what would have\nhappened, and so we can't say for sure how much BIP8 contributed to the\nactivation of(((\"consensus rules\", \"soft forks\", \"BIP8 mandatory lock-in\", tertiary-sortas=\"BIP008\", startref=\"consensus-soft-bip8\")))(((\"forks\", \"soft forks\", \"BIP8 mandatory lock-in\", tertiary-sortas=\"BIP008\", startref=\"fork-soft-bip8\")))(((\"soft forks\", \"BIP8 mandatory lock-in\", secondary-sortas=\"BIP008\", startref=\"soft-fork-bip8\")))(((\"activation (soft forks)\", \"BIP8\", secondary-sortas=\"BIP008\", startref=\"activate-soft-fork-bip8\")))(((\"BIP8 mandatory lock-in\", primary-sortas=\"BIP008\", startref=\"bip8\")))(((\"mandatory lock-in\", startref=\"mandatory-lockin\")))(((\"lock-in, mandatory\", startref=\"lockin-mandatory\")))(((\"segregated witness (segwit)\", startref=\"segwit-bip8\"))) taproot.\n\n===== Speedy trial: Fail fast or succeed eventually\n\nAlthough (((\"consensus rules\", \"soft forks\", \"speedy trial activation\", id=\"consensus-soft-speed\")))(((\"forks\", \"soft forks\", \"speedy trial activation\", id=\"fork-soft-speed\")))(((\"soft forks\", \"speedy trial activation\", id=\"soft-fork-speed\")))(((\"speedy trial activation\", id=\"speed-trial\")))(((\"activation (soft forks)\", \"speedy trial\", id=\"activation-speed\")))BIP9 by itself did not seem to result in the activation of\nsegwit despite widespread support for the proposal, it was unclear to\nmany protocol developers that BIP9 was itself a failure.  As mentioned,\nthe failure of miners to initially signal support for segwit may have\nbeen largely the result of a one-time conflict of interest that wouldn't\napply in the future.  To some, it seemed worth trying BIP9 again.\nOthers disagreed and wanted to use BIP8.\n\nAfter months of discussions between those who were the most interested\nin specific activation ideas, a compromise was suggested in order to\nactivate taproot.  A modified version of BIP9 was suggested that would\nonly give miners a very short amount of time to signal their intention\nto enforce taproot rules.  If signaling was unsuccessful, a different\nactivation mechanism could be used (or, potentially, the idea could be\nabandoned).  If signaling was successful, enforcement would begin about\nsix months later at a specified block height.  This mechanism was named\n_speedy trial_ by one of the people who helped promote it.\n\nSpeedy trial activation was tried, miners quickly signaled their\nwillingness to enforce the rules of taproot, and taproot was successfully\nactivated about six months later.  To proponents of speedy trial, it was\na clear success.  Others were still disappointed that BIP8 wasn't used.\n\nIt's not clear whether or not speedy trial will be used again for a\nfuture attempt to activate a soft fork.\n\n==== Consensus Software Development\n\nConsensus software(((\"consensus rules\", \"software development\")))(((\"software development for consensus rules\")))(((\"forks\", \"consensus rule software development\"))) continues to evolve, and there is much\ndiscussion on the various mechanisms for changing the consensus rules.\nBy its very nature, Bitcoin sets a very high bar on coordination and\nconsensus for changes. As a decentralized system, it has no \"authority\"\nthat can impose its will on the participants of the network. Power is\ndiffused between multiple constituencies such as miners, protocol\ndevelopers, wallet developers, exchanges, merchants, and end users.\nDecisions cannot be made unilaterally by any of these constituencies.\nFor example, while miners can censor transactions by simple\nmajority (51%), they are constrained by the consent of the other\nconstituencies. If they act unilaterally, the rest of the participants\nmay refuse to accept their blocks, keeping the economic activity on a\nminority chain. Without economic activity (transactions, merchants,\nwallets, exchanges), the miners will be mining a worthless currency with\nempty blocks. This diffusion of power means that all the participants\nmust coordinate, or no changes can be made. Status quo is the stable\nstate of this system with only a few changes possible if there is strong\nconsensus by a very large majority. The 95% threshold for soft forks is\nreflective of this reality.\n\nIt is important to recognize that there is no perfect\nsolution for consensus development. Both hard forks and soft forks\ninvolve trade-offs. For some types of changes, soft forks may be a better\nchoice; for others, hard forks may be a better choice. There is no\nperfect choice; both carry risks. The one constant characteristic of\nconsensus software development is that change is difficult and consensus\nforces compromise.\n\nSome see this as a weakness of consensus systems. In time, you may come\nto see it as the system's greatest strength.\n\nAt this point in the book, we've finished talking about the Bitcoin\nsystem itself.  What's left are software, tools, and other protocols\nbuilt on top of Bitcoin.\n"
        },
        {
          "name": "ch13_security.adoc",
          "type": "blob",
          "size": 17.0615234375,
          "content": "[[ch11]]\n== Bitcoin Security\n\nSecuring your bitcoins is challenging because bitcoins are\nare not like a balance in a bank account. Your bitcoins are very\nmuch like digital cash or gold. You've probably heard the expression,\n\"Possession is nine-tenths of the law.\" Well, in Bitcoin, possession is\nten-tenths of the law. Possession of the keys to spend certain bitcoins is\nequivalent to possession of cash or a chunk of precious metal. You can\nlose it, misplace it, have it stolen, or accidentally give the wrong\namount to someone. In every one of these cases, users have no recourse\nwithin the protocol, just as if they dropped cash on a public sidewalk.\n\nHowever, the Bitcoin system has capabilities that cash, gold, and bank accounts do\nnot. A Bitcoin wallet, containing your keys, can be backed up like any\nfile. It can be stored in multiple copies, even printed on paper for\nhard-copy backup. You can't \"back up\" cash, gold, or bank accounts.\nBitcoin is different enough from anything that has come before that we\nneed to think about securing our bitcoins in a novel way too.\n\n=== Security Principles\n\nThe (((\"Bitcoin\", \"security\", \"principles of\", id=\"bitcoin-security-principle\")))(((\"security\", \"principles of\", id=\"security-principle\")))(((\"decentralized consensus\", \"as security principle\", secondary-sortas=\"security principle\", id=\"decentral-consensus-principle\")))core principle in Bitcoin is\ndecentralization and it has important implications for security. A\ncentralized model, such as a traditional bank or payment network,\ndepends on access control and vetting to keep bad actors out of the\nsystem. By comparison, a decentralized system like Bitcoin pushes the\nresponsibility and control to the users. Because the security of the network\nis based on independent verification, the network can be open\nand no encryption is required for Bitcoin traffic (although encryption\ncan still be useful).\n\nOn a traditional payment network, such as a credit card system, the\npayment is open-ended because it contains the user's private identifier\n(the credit card number). After the initial charge, anyone with access\nto the identifier can \"pull\" funds and charge the owner again and again.\nThus, the payment network has to be secured end-to-end with encryption\nand must ensure that no eavesdroppers or intermediaries can compromise\nthe payment traffic in transit or when it is stored (at rest). If a bad\nactor gains access to the system, he can compromise current transactions\n_and_ payment tokens that can be used to create new transactions. Worse,\nwhen customer data is compromised, the customers are exposed to identity\ntheft and must take action to prevent fraudulent use of the compromised\naccounts.\n\nBitcoin is dramatically different. A Bitcoin transaction authorizes only\na specific value to a specific recipient and cannot be forged.\nIt does not reveal any private information, such as the\nidentities of the parties, and cannot be used to authorize additional\npayments. Therefore, a Bitcoin payment network does not need to be\nencrypted or protected from eavesdropping. In fact, you can broadcast\nBitcoin transactions over an open public channel, such as unsecured WiFi\nor Bluetooth, with no loss of security.\n\nBitcoin's decentralized security model puts a lot of power in the hands\nof the users. With that power comes responsibility for maintaining the\nsecrecy of their keys. For most users that is not easy to do, especially\non general-purpose computing devices such as internet-connected\nsmartphones or laptops. Although Bitcoin's decentralized model prevents\nthe type of mass compromise seen with credit cards, many users are not\nable to adequately secure their keys and get hacked, one by one.\n\n==== Developing Bitcoin Systems Securely\n\nA critical principle\nfor Bitcoin developers is decentralization. Most developers will be\nfamiliar with centralized security models and might be tempted to apply\nthese models to their Bitcoin applications, with disastrous results.\n\nBitcoin's security relies on decentralized control over keys and on\nindependent transaction validation by users. If you want to leverage\nBitcoin's security, you need to ensure that you remain within the\nBitcoin security model. In simple terms: don't take control of keys away\nfrom users and don't outsource validation.\n\nFor example, many early Bitcoin exchanges concentrated all user funds in\na single \"hot\" wallet with keys stored on a single server. Such a design\nremoves control from users and centralizes control over keys in a single\nsystem. Many such systems have been hacked, with disastrous consequences\nfor their customers.\n\nUnless you are prepared to invest heavily in operational security,\nmultiple layers of access control, and audits (as the traditional banks\ndo), you should think very carefully before taking funds outside of\nBitcoin's decentralized security context. Even if you have the funds and\ndiscipline to implement a robust security model, such a design merely\nreplicates the fragile model of traditional financial networks, plagued\nby identity theft, corruption, and embezzlement. To take advantage of\nBitcoin's unique decentralized security model, you have to avoid the\ntemptation of centralized architectures that might feel familiar but\nultimately subvert Bitcoin's (((\"decentralized consensus\", \"as security principle\", secondary-sortas=\"security principle\", startref=\"decentral-consensus-principle\")))security.\n\n==== The Root of Trust\n\nTraditional (((\"root of trust\", id=\"root-trust\")))security architecture is based\nupon a concept called the _root of trust_, which is a trusted core used\nas the foundation for the security of the overall system or application.\nSecurity architecture is developed around the root of trust as a series\nof concentric circles, like layers in an onion, extending trust outward\nfrom the center. Each layer builds upon the more-trusted inner layer\nusing access controls, digital signatures, encryption, and other\nsecurity primitives. As software systems become more complex, they are\nmore likely to contain bugs, which make them vulnerable to security\ncompromise. As a result, the more complex a software system becomes, the\nharder it is to secure. The root of trust concept ensures that most of\nthe trust is placed within the least complex part of the system, and\ntherefore the least vulnerable parts of the system, while more complex\nsoftware is layered around it. This security architecture is repeated at\ndifferent scales, first establishing a root of trust within the hardware\nof a single system, then extending that root of trust through the\noperating system to higher-level system services, and finally across\nmany servers layered in concentric circles of diminishing trust.\n\nBitcoin security\narchitecture is different. In Bitcoin, the consensus system creates a\ntrusted blockchain that is completely decentralized. A correctly\nvalidated blockchain uses the genesis block as the root of trust,\nbuilding a chain of trust up to the current block. Bitcoin systems can\nand should use the blockchain as their root of trust. When designing a\ncomplex Bitcoin application that consists of services on many different\nsystems, you should carefully examine the security architecture in order\nto ascertain where trust is being placed. Ultimately, the only thing\nthat should be explicitly trusted is a fully validated blockchain. If\nyour application explicitly or implicitly vests trust in anything but\nthe blockchain, that should be a source of concern because it introduces\nvulnerability. A good method to evaluate the security architecture of\nyour application is to consider each individual component and evaluate a\nhypothetical scenario where that component is completely compromised and\nunder the control of a malicious actor. Take each component of your\napplication, in turn, and assess the impacts on the overall security if\nthat component is compromised. If your application is no longer secure\nwhen components are compromised, that shows you have misplaced trust in\nthose components. A Bitcoin application without vulnerabilities should\nbe vulnerable only to a compromise of the Bitcoin consensus mechanism,\nmeaning that its root of trust is based on the strongest part of the\nBitcoin security architecture.\n\nThe numerous examples of hacked Bitcoin exchanges serve to underscore\nthis point because their security architecture and design fails even\nunder the most casual scrutiny. These centralized implementations had\ninvested trust explicitly in numerous components outside the Bitcoin\nblockchain, such as hot wallets, centralized databases,\nvulnerable encryption keys, and (((\"Bitcoin\", \"security\", \"principles of\", startref=\"bitcoin-security-principle\")))(((\"security\", \"principles of\", startref=\"security-principle\")))(((\"root of trust\", startref=\"root-trust\")))similar schemes.\n\n=== User Security Best Practices\n\nHumans (((\"Bitcoin\", \"security\", \"best practices\", id=\"bitcoin-security-best-practice\")))(((\"security\", \"best practices\", id=\"security-best-practice\")))(((\"best practices, security\", id=\"best-practice-security\")))have\nused physical security controls for thousands of years. By comparison,\nour experience with digital security is less than 50 years old. Modern\ngeneral-purpose operating systems are not very secure and not\nparticularly suited to storing digital money. Our computers are\nconstantly exposed to external threats via always-on internet\nconnections. They run thousands of software components from hundreds of\nauthors, often with unconstrained access to the user's files. A single\npiece of rogue software, among the many thousands installed on your\ncomputer, can compromise your keyboard and files, stealing any bitcoins\nstored in wallet applications. The level of computer maintenance\nrequired to keep a computer virus-free and trojan-free is beyond the\nskill level of all but a tiny minority of computer users.\n\nDespite decades of research and advancements in information security,\ndigital assets are still woefully vulnerable to a determined adversary.\nEven the most highly protected and restricted systems, in financial\nservices companies, intelligence agencies, and defense contractors, are\nfrequently breached. Bitcoin creates digital assets that have intrinsic\nvalue and can be stolen and diverted to new owners instantly and\nirrevocably. This creates a massive incentive for hackers. Until now,\nhackers had to convert identity information or account tokens—such as\ncredit cards and bank accounts—into value after compromising them.\nDespite the difficulty of fencing and laundering financial information,\nwe have seen ever-escalating thefts. Bitcoin escalates this problem\nbecause it doesn't need to be fenced or laundered; bitcoins are valuable\nby themselves.\n\nBitcoin also creates the incentives to improve computer\nsecurity. Whereas previously the risk of computer compromise was vague\nand indirect, Bitcoin makes these risks clear and obvious. Holding\nbitcoins on a computer serves to focus the user's mind on the need for\nimproved computer security. As a direct result of the proliferation and\nincreased adoption of Bitcoin and other digital currencies, we have seen\nan escalation in both hacking techniques and security solutions. In\nsimple terms, hackers now have a very juicy target and users have a\nclear incentive to defend themselves.\n\nOver the past three years, as a direct result of Bitcoin adoption, we\nhave seen tremendous innovation in the realm of information security in\nthe form of hardware encryption, key storage and hardware signing devices,\nmultisignature technology, and digital escrow. In the following sections\nwe will examine various best practices for practical user security.\n\n==== Physical Bitcoin Storage\n\nBecause most (((\"bitcoins\", \"physical storage\")))(((\"physical bitcoin storage\")))(((\"storing bitcoins\", id=\"storing-bitcoin\")))users are far more\ncomfortable with physical security than information security, a very\neffective method for protecting bitcoins is to convert them into physical\nform. Bitcoin keys, and the seeds used to create them, are nothing more than long numbers. This means that\nthey can be stored in a physical form, such as printed on paper or\netched on a metal plate. Securing the keys then becomes as simple as\nphysically securing a printed copy of the key seed. A seed\nthat is printed on paper is called a \"paper backup,\" and\nmany wallets can create them.\nKeeping bitcoins\noffline is (((\"cold storage\")))called _cold storage_ and it is one of the most effective\nsecurity techniques. A cold storage system is one where the keys are\ngenerated on an offline system (one never connected to the internet) and\nstored offline either on paper or on digital media, such as a USB memory\nstick.\n\n==== Hardware Signing Devices\n\nIn the (((\"hardware signing devices\")))long term, Bitcoin security may increasingly take the\nform of tamper-proof hardware signing devices. Unlike a smartphone or desktop\ncomputer, a Bitcoin hardware signing device only needs to hold keys and\nuse them to generate signatures.  Without general-purpose software to\ncompromise and\nwith limited interfaces, hardware signing devices can deliver strong\nsecurity to nonexpert users. Hardware\nsigning devices may become the predominant method of storing bitcoins.\n\n==== Ensuring Your Access\n\nAlthough\nmost users (((\"backing up\", \"importance of\")))are rightly concerned about theft of their bitcoins, there is an even\nbigger risk. Data files get lost all the time. If they contain Bitcoin keys,\nthe loss is much more painful. In the effort to secure their Bitcoin\nwallets, users must be very careful not to go too far and end up losing\ntheir bitcoins. In July 2011, a well-known Bitcoin awareness and education\nproject lost almost 7,000 bitcoin. In their effort to prevent theft, the\nowners had implemented a complex series of encrypted backups. In the end\nthey accidentally lost the encryption keys, making the backups worthless\nand losing a fortune. Like hiding money by burying it in the desert, if\nyou secure your bitcoins too well you might not be able to find them again.\n\n[WARNING]\n====\nTo spend bitcoins, you may(((\"wallets\", \"recovery codes\")))(((\"recovery codes\"))) need to back up more than just your private\nkeys or the BIP32 seed used to derive them.  This is especially the case\nwhen multisignatures or complex scripts are being used.  Most output\nscripts commit to the actual conditions that must be fulfilled to spend\nthe bitcoins in that output, and it's not possible to fulfill that\ncommitment unless your wallet software can reveal those conditions to\nthe network.  Wallet recovery codes must include this information.  For\nmore details, see <<ch05_wallets>>.\n====\n\n==== Diversifying Risk\n\nWould you(((\"risk diversification\")))(((\"storing bitcoins\", startref=\"storing-bitcoin\"))) carry your entire net worth in cash in your wallet? Most\npeople would consider that reckless, yet Bitcoin users often keep all\ntheir bitcoins using a single wallet application. Instead, users should spread the risk\namong multiple and diverse Bitcoin applications. Prudent users will keep only\na small fraction, perhaps less than 5%, of their bitcoins in an online or\nmobile wallet as \"pocket change.\" The rest should be split between a few\ndifferent storage mechanisms, such as a desktop wallet and offline (cold\nstorage).\n\n==== Multisig and Governance\n\nWhenever a (((\"multisignature addresses\")))(((\"addresses\", \"multisignature\")))company or individual stores large amounts of\nbitcoins, they should consider using a multisignature Bitcoin address.\nMultisignature addresses secure funds by requiring more than one\nsignature to make a payment. The signing keys should be stored in a\nnumber of different locations and under the control of different people.\nIn a corporate environment, for example, the keys should be generated\nindependently and held by several company executives to ensure that no\nsingle person can compromise the funds. Multisignature addresses can\nalso offer redundancy, where a single person holds several keys that are\nstored in different locations.\n\n\n==== Survivability\n\nOne important\nsecurity (((\"survivability (of bitcoin access)\")))(((\"estate planning\")))consideration that is often overlooked is availability,\nespecially in the context of incapacity or death of the key holder.\nBitcoin users are told to use complex passwords and keep their keys\nsecure and private, not sharing them with anyone. Unfortunately, that\npractice makes it almost impossible for the user's family to recover any\nfunds if the user is not available to unlock them. In most cases, in\nfact, the families of Bitcoin users might be completely unaware of the\nexistence of the bitcoin funds.\n\nIf you have a lot of bitcoins, you should consider sharing access details\nwith a trusted relative or lawyer. A more complex survivability scheme\ncan be set up with multisignature access and estate planning through a\nlawyer specialized as a \"digital asset executor.\"\n\nBitcoin is a complex new technology that is still being explored by developers. Over\ntime we will develop better security tools and practices that are easier\nto use by nonexperts. For now, Bitcoin users can use many of the tips\ndiscussed here to enjoy a secure and trouble-free Bitcoin (((\"Bitcoin\", \"security\", \"best practices\", startref=\"bitcoin-security-best-practice\")))(((\"security\", \"best practices\", startref=\"security-best-practice\")))(((\"best practices, security\", startref=\"best-practice-security\")))experience.\n"
        },
        {
          "name": "ch14_applications.adoc",
          "type": "blob",
          "size": 69.876953125,
          "content": "[[ch12]]\n== Second-Layer Applications\n\nLet's now build on our understanding of the primary Bitcoin system (the\n_first layer_) by looking at it as a\nplatform for other applications, or _second layers_. \nIn this chapter we will look at the features offered by Bitcoin\nas an application platform. We will consider the application\nbuilding _primitives_, which form the building blocks of any blockchain\napplication. We will look at several important applications that use\nthese primitives, such as client-side validation, payment channels, and\nrouted payment channels (Lightning Network).\n\n=== Building Blocks (Primitives)\n\nWhen (((\"Bitcoin\", \"as application platform\", \"primitives, list of\", secondary-sortas=\"application platform\", id=\"bitcoin-app-platform-primitive\")))(((\"application platform, Bitcoin as\", \"primitives, list of\", id=\"app-platform-primitive\")))(((\"primitives\", id=\"primitive-list\")))(((\"building blocks\", id=\"build-block\")))operating correctly and over the\nlong term, the Bitcoin system offers certain guarantees, which can be\nused as building blocks to create applications. These include:\n\nNo double-spend:: The most fundamental guarantee of Bitcoin's\ndecentralized consensus algorithm ensures that no UTXO can be spent\ntwice in the same valid chain of blocks.\n\nImmutability:: Once a transaction is recorded in the blockchain and\nsufficient work has been added with subsequent blocks, the transaction's\ndata becomes practically immutable. Immutability is underwritten by energy, as\nrewriting the blockchain requires the expenditure of energy to produce\nPoW. The energy required and therefore the degree of\nimmutability increases with the amount of work committed on top of the\nblock containing a transaction.\n\n[role=\"less_space pagebreak-before\"]\nNeutrality:: The decentralized Bitcoin network propagates valid\ntransactions regardless of the origin of those transactions.\nThis means that anyone can create a valid transaction with sufficient\nfees and trust they will be able to transmit that transaction and have\nit included in the blockchain at any time.\n\nSecure timestamping:: The consensus rules reject any block whose\ntimestamp is too far in the future and attempt to prevent blocks with\ntimestamps too far in the past. This ensures that timestamps\non blocks can be trusted to a certain degree. The timestamp on a block implies an\nunspent-before reference for the inputs of all included transactions.\n\nAuthorization:: Digital signatures, validated in a decentralized\nnetwork, offer authorization guarantees. Scripts that contain a\nrequirement for a digital signature cannot be executed without\nauthorization by the holder of the private key implied in the script.\n\nAuditability:: All transactions are public and can be audited. All\ntransactions and blocks can be linked back in an unbroken chain to the\ngenesis block.\n\nAccounting:: In any transaction (except the coinbase transaction) the\nvalue of inputs is equal to the value of outputs plus fees. It is not\npossible to create or destroy bitcoin value in a transaction. The\noutputs cannot exceed the inputs.\n\nNonexpiration:: A valid transaction does not expire. If it is valid\ntoday, it will be valid in the near future, as long as the inputs remain\nunspent and the consensus rules do not change.\n\nIntegrity:: The outputs of a Bitcoin transaction signed with +SIGHASH_ALL+ or parts of\na transaction signed by another +SIGHASH+ type cannot be modified\nwithout invalidating the signature, thus invalidating the transaction\nitself.\n\nTransaction atomicity:: Bitcoin transactions are atomic. They are either\nvalid and confirmed (mined) or not. Partial transactions cannot be mined,\nand there is no interim state for a transaction. At any point in time a\ntransaction is either mined or not.\n\nDiscrete (indivisible) units of value:: Transaction outputs are discrete\nand indivisible units of value. They can either be spent or unspent, in\nfull. They cannot be divided or partially spent.\n\nQuorum of control:: Multisignature constraints in scripts impose a\nquorum of authorization, predefined in the multisignature scheme. The\nrequirement is enforced by the consensus rules.\n\nTimelock/aging:: Any script clause containing a relative or absolute\ntimelock can only be executed after its age exceeds the time specified.\n\nReplication:: The decentralized storage of the blockchain ensures that\nwhen a transaction is mined, after sufficient confirmations, it is\nreplicated across the network and becomes durable and resilient to power\nloss, data loss, etc.\n\nForgery protection:: A transaction can only spend existing, validated\noutputs. It is not possible to create or counterfeit value.\n\nConsistency:: In the absence of miner partitions, blocks that are\nrecorded in the blockchain are subject to reorganization or disagreement\nwith exponentially decreasing likelihood, based on the depth at which\nthey are recorded. Once deeply recorded, the computation and energy\nrequired to change makes change practically infeasible.\n\nRecording external state:: A transaction can commit to a data value, via\n+OP_RETURN+ or pay to contract, representing a state transition in an external state\nmachine.\n\nPredictable issuance:: Less than 21 million bitcoin will be issued at a\npredictable rate.\n\nThe list of building blocks is not complete, and more are added with each\nnew feature introduced (((\"Bitcoin\", \"as application platform\", \"primitives, list of\", secondary-sortas=\"application platform\", startref=\"bitcoin-app-platform-primitive\")))(((\"application platform, Bitcoin as\", \"primitives, list of\", startref=\"app-platform-primitive\")))(((\"primitives\", startref=\"primitive-list\")))(((\"building blocks\", startref=\"build-block\")))into Bitcoin.\n\n=== Applications from Building Blocks\n\nThe (((\"Bitcoin\", \"as application platform\", \"example applications\", secondary-sortas=\"application platform\", id=\"bitcoin-app-platform-example\")))(((\"application platform, Bitcoin as\", \"example applications\", id=\"app-platform-example\")))building blocks\noffered by Bitcoin are elements of a trust platform that can be used to\ncompose applications. Here are some examples of applications that exist\ntoday and the building blocks they use:\n\nProof-of-Existence (Digital Notary):: Immutability + Timestamp + Durability.\nA transaction on the blockchain can commit to a value,\nproving that a piece of data existed at the time\nit was recorded (Timestamp). The commitment cannot be modified ex-post-facto\n(Immutability), and the proof will be stored permanently (Durability).\n\nKickstarter (Lighthouse):: Consistency + Atomicity + Integrity. If you\nsign one input and the output (Integrity) of a fundraiser transaction,\nothers can contribute to the fundraiser but it cannot be spent\n(Atomicity) until the goal (output amount) is funded (Consistency).\n\nPayment Channels:: Quorum of Control + Timelock + No Double Spend + Nonexpiration\n+ Censorship Resistance + Authorization. A multisig 2-of-2\n(Quorum) with a timelock (Timelock) used as the \"settlement\" transaction\nof a payment channel can be held (Nonexpiration) and spent at any time\n(Censorship Resistance) by either party (Authorization). The two parties\ncan then create commitment transactions that supersede (No\nDouble-Spend) the settlement on a shorter timelock(((\"Bitcoin\", \"as application platform\", \"example applications\", secondary-sortas=\"application platform\", startref=\"bitcoin-app-platform-example\")))(((\"application platform, Bitcoin as\", \"example applications\", startref=\"app-platform-example\"))) (Timelock).\n\n=== Colored Coins\n\nThe first\nblockchain(((\"Bitcoin\", \"as application platform\", \"colored coins application\", secondary-sortas=\"application platform\", id=\"bitcoin-app-platform-color\")))(((\"application platform, Bitcoin as\", \"colored coins application\", id=\"app-platform-color\")))(((\"colored coins application\", id=\"color-coin\"))) application we will discuss is _colored coins_.\n\nColored coins refers to a set of\nsimilar technologies that use Bitcoin transactions to record the\ncreation, ownership, and transfer of extrinsic assets other than\nbitcoin. By \"extrinsic\" we mean assets that are not stored directly on\nthe Bitcoin blockchain, as opposed to bitcoin itself, which is an asset\nintrinsic to the blockchain.\n\nColored coins are used to track digital\nassets as well as physical assets held by third parties and traded\nthrough certificates of ownership associated with colored coins. Digital asset colored\ncoins can represent intangible assets such as a stock certificate,\nlicense, virtual property (game items), or most any form of licensed\nintellectual property (trademarks, copyrights, etc.). Tangible asset\ncolored coins can represent certificates of ownership of commodities\n(gold, silver, oil), land titles, automobiles, boats, aircraft, etc.\n\nThe term derives\nfrom the idea of \"coloring\" or marking a nominal amount of bitcoin, for\nexample, a single satoshi, to represent something other than the bitcoin\namount itself. As an analogy, consider stamping a $1 note with a message\nsaying, \"this is a stock certificate of ACME\" or \"this note can be\nredeemed for 1 oz of silver\" and then trading the $1 note as a\ncertificate of ownership of this other asset. The first implementation\nof colored coins, named _Enhanced Padded-Order-Based Coloring_ or\n_EPOBC_, assigned extrinsic assets to a 1-satoshi output. In this way,\nit was a true \"colored coin,\" as each asset was added as an attribute\n(color) of a single satoshi.\n\nMore recent implementations of colored coins use other mechanisms\nto attach metadata with a transaction, in conjunction with external\ndata stores that associate the metadata to specific assets.  The three\nmain mechanisms used as of this writing are single-use seals,\npay to contract, and client-side validation.\n\n[[single_use_seals]]\n==== Single-Use Seals\n\nSingle-use seals (((\"colored coins application\", \"single-use seals\")))(((\"single-use seals\")))originate in physical security.  Someone shipping an\nitem through a third party needs a way to detect tampering, so they\nsecure their package with a special mechanism that will become clearly\ndamaged if the package is opened.  If the package arrives with the seal\nintact, the sender and receiver can be confident that the package wasn't\nopened in transit.\n\nIn the context of colored coins, single-use seals refer to a data\nstructure than can only be associated with another data structure once.\nIn Bitcoin, this(((\"UTXOs (unspent transaction outputs)\"))) definition is fulfilled by unspent transaction outputs\n(UTXOs).  A UTXO can only be spent once within a valid blockchain, and\nthe process of spending them associates them with the data in the\nspending transaction.\n\nThis provides part of the basis for the modern transfer for colored\ncoins.  One or more colored coins are received to a UTXO.  When that\nUTXO is spent, the spending transaction must describe how the colored\ncoins are to be spent.  That brings us to pay to contract (P2C).\n\n[[p2c_for_colored_coins]]\n==== Pay to Contract (P2C)\n\nWe (((\"colored coins application\", \"P2C (pay to contract)\", id=\"color-coin-p2c\")))(((\"P2C (pay to contract)\", id=\"p2c-color-coin\")))previously learned about P2C in <<pay_to_contract>>, where it became\npart of the basis for the taproot upgrade to Bitcoin's consensus rules.\nAs a short reminder, P2C allows a spender (Bob) and receiver (Alice) to\nagree on some data, such as a contract, and then(((\"key tweaks\"))) tweak Alice's public\nkey so that it commits to the contract.  At any time, Bob can reveal\nAlice's underlying key and the tweak used to commit to the contract,\nproving that she received the funds.  If Alice spends the funds, that\nfully proves that she knew about the contract, since the only way she\ncould spend the funds received to a P2C tweaked key is by knowing the\ntweak (the contract).\n\nA powerful attribute of P2C tweaked keys is that they look like any\nother public keys to everyone besides Alice and Bob, unless they choose\nto reveal the contract used to tweak the keys.  Nothing is publicly\nrevealed about the contract--not even that a contract between them\nexists.\n\nA P2C contract can be arbitrarily long and detailed, the terms can be written\nin any language, and it can reference anything the participants want\nbecause the contract is not validated by full nodes and only the public\nkey with the commitment is published to the blockchain.\n\nIn the context of colored coins, Bob can open the single-use seal\ncontaining his colored coins by spending the associated UTXO.  In the\ntransaction spending that UTXO, he can commit to a contract indicating\nthe terms that the next owner (or owners) of the colored coins must\nfulfill in order to further spend the coins.  The new owner doesn't need\nto be Alice, even though Alice is the one receiving the UTXO that Bob\nspends and Alice has tweaked her public key by the contract terms.\n\nBecause full nodes don't (and can't) validate that the contract is\nfollowed correctly, we need to figure out who is responsible for\nvalidation.  That brings (((\"colored coins application\", \"P2C (pay to contract)\", startref=\"color-coin-p2c\")))(((\"P2C (pay to contract)\", startref=\"p2c-color-coin\")))us to _client-side validation._\n\n==== Client-Side Validation\n\nBob had (((\"colored coins application\", \"client-side validation\")))(((\"client-side validation\")))(((\"validating\", \"with client-side validation\", secondary-sortas=\"client-side validation\")))some colored coins associated with a UTXO.  He spent that UTXO\nin a way that committed to a contract that indicated how the next\nreceiver (or receivers) of the colored coins will prove their ownership\nover the coins in order to further spend them.\n\nIn practice, Bob's P2C contract likely simply committed to one or more\nunique identifiers for the UTXOs that will be used as single-use seals\nfor deciding when the colored coins are next spent.  For example, Bob's\ncontract may have indicated that the UTXO Alice received to her P2C\ntweaked public key now controls half of his colored coins, with the\nother half of his colored coins now being assigned to a different UTXO\nthat may have nothing to do with the transaction between Alice and Bob.\nThis provides significant privacy against blockchain surveillance.\n\nWhen Alice later wants to spend her colored coins to Dan, she first\nneeds to prove to Dan that she controls the colored coins.  Alice can do\nthis by revealing to Dan her underlying P2C public key and the P2C contract\nterms chosen by Bob.  Alice also reveals to Dan the UTXO that Bob used\nas the single-use seal and any information that Bob gave her about the\nprevious owners of the colored coins.  In short, Alice gives Dan a\ncomplete set of history about every previous transfer of the colored\ncoins, with each step anchored in the Bitcoin blockchain (but not\nstoring any special data in the chain--just regular public keys).  That\nhistory is a lot like the history of regular Bitcoin transactions that\nwe call the blockchain, but the colored history is completely invisible\nto other users of the blockchain.\n\nDan validates this history using his software, called _client-side\nvalidation_.  Notably, Dan only needs to receive and validate the parts\nof history that pertain to the colored coins he wants to receive.  He\ndoesn't need information about what happened to other people's colored\ncoins--for example, he'll never need to know what happened to the other\nhalf of Bob's coins, the ones that Bob didn't transfer to Alice.  This\nhelps enhance the privacy of the colored coin protocol.\n\nNow that we've learned about single-use seals, pay to contract, and\nclient-side validation, we can look at the two main protocols that use\nthem as of this writing, RGB and Taproot Assets.\n\n==== RGB\n\nDevelopers (((\"colored coins application\", \"RGB protocol\", id=\"color-coin-rgb\")))(((\"RGB protocol\", id=\"rgb\")))of the RGB protocol pioneered many of the ideas used in\nmodern Bitcoin-based colored coin protocols.  A primary requirement of\nthe design for RGB was making the protocol compatible with offchain\npayment channels (see <<state_channels>>), such as those used in\nLightning Network (LN).  That's accomplished at each layer of the RGB\nprotocol:\n\nSingle-use seals:: \nTo create a payment channel, Bob assigns his colored\n  coins to a UTXO that requires signatures from both him and Alice to\n  spend.  Their mutual control over that UTXO serves as the single-use\n  seal for future transfers.\n\nPay to contract (P2C)::\nAlice and Bob can now sign multiple versions of\n  a P2C contract.  The enforcement mechanism of the underlying payment\n  channel ensures that both parties are incentivized to only publish the\n  latest version of the contract onchain.\n\nClient-side validation::\nTo ensure that neither Alice nor Bob needs to\n  trust each other, they each check all previous transfers of the\n  colored coins back to their creation to ensure all contract rules were\n  followed correctly.\n\nThe developers of RGB have described other uses for their protocol, such\nas creating identity tokens that can be periodically updated to protect\nagainst private key compromise.\n\nFor more information, (((\"colored coins application\", \"RGB protocol\", startref=\"color-coin-rgb\")))(((\"RGB protocol\", startref=\"rgb\")))see https://rgb.tech[RGB's documentation].\n\n==== Taproot Assets\n\nFormerly (((\"colored coins application\", \"Taproot Assets\", id=\"color-coin-taproot\")))(((\"Taproot Assets\", id=\"taproot-assets\")))called Taro, Taproot Assets are a colored coin protocol that is\nheavily influenced by RGB.  Compared to RGB, Taproot Assets use a form\nof P2C contracts that is very similar to the version used by taproot for\nenabling MAST functionality (see <<mast>>).  The claimed advantage of\nTaproot Assets over RGB is that its similarity to the widely used\ntaproot protocol makes it simpler for wallets and other software to\nimplement.  One downside is that it may not be as flexible as the RGB\nprotocol, especially when it comes to implementing nonasset features\nsuch as identity tokens.\n\n[NOTE]\n====\n_Taproot_ is part of the Bitcoin protocol.  _Taproot Assets_ is not,\ndespite the similar name.  Both RGB and Taproot Assets are protocols\nbuilt on top of the Bitcoin protocol.  The only asset natively supported\nby Bitcoin is bitcoin.\n====\n\nEven more than RGB, Taproot Assets has been designed to be compatible\nwith LN.  One challenge with forwarding nonbitcoin assets\nover LN is that there are two ways to accomplish the\nsending, each with a different set of trade-offs:\n\nNative forwarding::\n  Every (((\"native forwarding\")))hop in the path between the spender and the receiver must know\n  about the particular asset (type of colored coin) and have a\n  sufficient balance of it to support forwarding a payment.\n\nTranslated forwarding::\n  The hop next to the spender and(((\"translated forwarding\"))) the hop next to the receiver must know\n  about the particular asset and have a sufficient balance of it to\n  support forwarding a payment, but every other hop only needs to\n  support forwarding bitcoin [.keep-together]#payments.#\n\nNative forwarding is conceptually simpler but essentially requires a\nseparate Lightning-type network for every asset.  Translated forwarding\nallows building on the economies of scale of the Bitcoin LN, but it may be vulnerable to a problem called(((\"free American call option\"))) the _free American\ncall option_, where a receiver may selectively accept or reject certain\npayments depending on recent changes to the exchange rate in order to\nsiphon money from the hop next to them.  Although there's no known\nperfect solution to the free American call option, there may be\npractical solutions that limit its harm.\n\nBoth Taproot Assets and RGB can technically support both native and\ntranslated forwarding.  Taproot Assets is specifically designed around\ntranslated forwarding, whereas RGB has seen proposals to implement both.\n\nFor more information, see\nhttps://oreil.ly/Ef4hb[Taproot\nAsset's documentation].  Additionally, the Taproot Asset developers are\nworking on BIPs that may be available after this book goes(((\"Bitcoin\", \"as application platform\", \"colored coins application\", secondary-sortas=\"application platform\", startref=\"bitcoin-app-platform-color\")))(((\"application platform, Bitcoin as\", \"colored coins application\", startref=\"app-platform-color\")))(((\"colored coins application\", startref=\"color-coin\")))(((\"colored coins application\", \"Taproot Assets\", startref=\"color-coin-taproot\")))(((\"Taproot Assets\", startref=\"taproot-assets\"))) into print.\n\n[[state_channels]]\n=== Payment Channels and State Channels\n\n_Payment channels_ are (((\"Bitcoin\", \"as application platform\", \"payment channels\", secondary-sortas=\"application platform\", id=\"bitcoin-app-platform-payment\")))(((\"application platform, Bitcoin as\", \"payment channels\", id=\"app-platform-payment\")))(((\"payment channels\", id=\"payment-channel\")))a trustless mechanism for exchanging Bitcoin\ntransactions between two parties outside of the Bitcoin blockchain.\nThese transactions, which would be valid if settled on the Bitcoin\nblockchain, are held offchain instead, waiting for\neventual batch settlement. Because the transactions are not settled,\nthey can be exchanged without the usual settlement latency, allowing\nextremely high transaction throughput, low latency, and\nfine granularity.\n\nActually, the term _channel_ is a metaphor. State channels are virtual\nconstructs represented by the exchange of state between two parties\noutside of the blockchain. There are no \"channels\" per se, and the\nunderlying data transport mechanism is not the channel. We use the term\n_channel_ to represent the relationship and shared state between two\nparties outside of the blockchain.\n\nTo further explain this\nconcept, think of a TCP stream. From the perspective of higher-level\nprotocols, it is a \"socket\" connecting two applications across the\ninternet. But if you look at the network traffic, a TCP stream is just a\nvirtual channel over IP packets. Each endpoint of the TCP stream\nsequences and assembles IP packets to create the illusion of a stream of\nbytes. Underneath, it's all disconnected packets. Similarly, a payment\nchannel is just a series of transactions. If properly sequenced and\nconnected, they create redeemable obligations that you can trust even\nthough you don't trust the other side of the channel.\n\nIn this section we will look at various forms of payment channels.\nFirst, we will examine the mechanisms used to construct a one-way\n(unidirectional) payment channel for a metered micropayment service,\nsuch as streaming video. Then, we will expand on this mechanism and\nintroduce bidirectional payment channels. Finally, we will look at how\nbidirectional channels can be connected end-to-end to form multihop\nchannels in a routed network, first proposed under the name _Lightning\nNetwork_.\n\nPayment channels are part of the broader concept of a _state channel_,\nwhich represents an offchain alteration of state, secured by eventual\nsettlement in a blockchain. A payment channel is a state channel where\nthe state being altered is the balance of a virtual currency.\n\n==== State Channels&#x2014;Basic Concepts and Terminology\n\nA state channel(((\"payment channels\", \"state channels\", id=\"payment-channel-state\")))(((\"state channels\", id=\"state-channel-terminology\")))(((\"transactions\", \"state channels\", id=\"transaction-state\"))) is\nestablished between two parties through a transaction that locks a\nshared state on the blockchain. This is called (((\"funding transactions\")))the _funding transaction_.\nThis single transaction must be transmitted to\nthe network and mined to establish the channel. In the example of a\npayment channel, the locked state is the initial balance (in currency)\nof the channel.\n\nThe two parties then exchange signed transactions, (((\"commitment transactions\")))called _commitment\ntransactions_, that alter the initial state. These transactions are\nvalid transactions in that they _could_ be submitted for settlement by\neither party, but instead are held offchain by each party pending the\nchannel closure. State updates can be created as fast as each party can\ncreate, sign, and transmit a transaction to the other party. In practice\nthis means that dozens of transactions per second can be exchanged.\n\nWhen exchanging commitment transactions the two parties also discourage\nuse of the previous states, so that the most up-to-date commitment transaction\nis always the best one to be redeemed. This discourages either party\nfrom cheating by unilaterally closing the channel with a prior\nstate that is more favorable to them than the current state. We will\nexamine the various mechanisms that can be used to discourage\npublication of prior states in the rest of this chapter.\n\nFinally, the channel can be closed either cooperatively, by (((\"settlement transactions\")))submitting a\nfinal _settlement transaction_ to the blockchain, or unilaterally, by\neither party submitting the last commitment transaction to the\nblockchain. A unilateral close option is needed in case one of the\nparties unexpectedly disconnects. The settlement transaction represents\nthe final state of the channel and is settled on the blockchain.\n\nIn the entire lifetime of the channel, only two transactions need to be\nsubmitted for mining on the blockchain: the funding and settlement\ntransactions. In between these two states, the two parties can exchange\nany number of commitment transactions that are never seen by anyone\nelse or submitted to the blockchain.\n\n<<payment_channel>> illustrates a payment channel between Bob and Alice,\nshowing the funding, commitment, and settlement (((\"payment channels\", \"state channels\", startref=\"payment-channel-state\")))(((\"state channels\", startref=\"state-channel-terminology\")))(((\"transactions\", \"state channels\", startref=\"transaction-state\")))transactions.\n\n[[payment_channel]]\n.A payment channel between Bob and Alice, showing the funding, commitment, and settlement transactions.\nimage::images/mbc3_1401.png[\"A payment channel between Bob and Alice, showing the funding, commitment, and settlement transactions\"]\n\n==== Simple Payment Channel Example\n\nTo\nexplain (((\"payment channels\", \"example of\", id=\"payment-channel-example\")))state channels, we start with a very simple example. We\ndemonstrate a one-way channel, meaning that value is flowing in one\ndirection only. We will also start with the naive assumption that no one\nis trying to cheat to keep things simple. Once we have the basic\nchannel idea explained, we will then look at what it takes to make it\ntrustless so that neither party _can_ cheat, even if they are trying to.\n\n//TODO:change to using sats rather than millibits.  Or maybe drop\n//specific amounts so that the example doesn't become outdated as price\n//changes.\n\nFor this example we will assume two participants: Emma and Fabian.\nFabian offers a video streaming service that is billed by the second\nusing a micropayment channel. Fabian charges 0.01 millibit (0.00001 BTC)\nper second of video, equivalent to 36 millibits (0.036 BTC) per hour of\nvideo. Emma is a user who purchases this streaming video service from\nFabian. <<emma_fabian_streaming_video>> shows Emma buying the video\nstreaming service from Fabian using a payment channel.\n\n[[emma_fabian_streaming_video]]\n.Emma purchases streaming video from Fabian with a payment channel, paying for each second of video.\nimage::images/mbc3_1402.png[\"Emma purchases streaming video from Fabian with a payment channel, paying for each second of video\"]\n\nIn this example, Fabian and Emma are using special software that handles\nboth the payment channel and the video streaming. Emma is running the\nsoftware in her browser; Fabian is running it on a server. The software\nincludes basic Bitcoin wallet functionality and can create and sign\nBitcoin transactions. Both the concept and the term \"payment channel\"\nare completely hidden from the users. What they see is video that is\npaid for by the second.\n\nTo set up the payment channel, Emma and Fabian establish a 2-of-2\nmultisignature address, with each of them holding one of the keys. From\nEmma's perspective, the software in her browser presents a QR code with\nthe address, and asks her to submit a \"deposit\"\nfor up to 1 hour of video. The address is then funded by Emma. Emma's\ntransaction, paying to the multisignature address, is the funding or\nanchor transaction for the payment channel.\n\nFor this example, let's say that Emma funds the channel with 36\nmillibits (0.036 BTC). This will allow Emma to consume _up to_ 1 hour of\nstreaming video. The funding transaction in this case sets the maximum\namount that can be transmitted in this channel, setting the _channel\ncapacity_.\n\nThe funding transaction consumes one or more inputs from Emma's wallet,\nsourcing the funds. It creates one output with an amount of 36 millibits\npaid to the multisignature 2-of-2 address controlled jointly between\nEmma and Fabian. It may have additional outputs for change back to\nEmma's wallet.\n\nAfter the funding transaction is confirmed to a sufficient depth, Emma can start streaming\nvideo. Emma's software creates and signs a commitment transaction that\nchanges the channel balance to credit 0.01 millibit to Fabian's address\nand refund 35.99 millibits back to Emma. The transaction signed by Emma\nconsumes the 36 millibits output created by the funding transaction and\ncreates two outputs: one for her refund, the other for Fabian's payment.\nThe transaction is only partially signed&#x2014;it requires two\nsignatures (2-of-2), but only has Emma's signature. When Fabian's server\nreceives this transaction, it adds the second signature (for the 2-of-2\ninput) and returns it to Emma together with 1 second worth of video. Now\nboth parties have a fully signed commitment transaction that either can\nredeem, representing the correct up-to-date balance of the channel.\nNeither party broadcasts this transaction to the network.\n\nIn the next round, Emma's software creates and signs another commitment\ntransaction (commitment #2) that consumes the _same_ 2-of-2 output from\nthe funding transaction. The second commitment transaction allocates one\noutput of 0.02 millibits to Fabian's address and one output of 35.98\nmillibits back to Emma's address. This new transaction is payment for\ntwo cumulative seconds of video. Fabian's software signs and returns the\nsecond commitment transaction, together with another second of video.\n\nIn this way, Emma's software continues to send commitment transactions\nto Fabian's server in exchange for streaming video. The balance of the\nchannel gradually accumulates in favor of Fabian as Emma consumes more\nseconds of video. Let's say Emma watches 600 seconds (10 minutes) of\nvideo, creating and signing 600 commitment transactions. The last\ncommitment transaction (#600) will have two outputs, splitting the\nbalance of the channel, 6 millibits to Fabian and 30 millibits to Emma.\n\nFinally, Emma clicks \"Stop\" to stop streaming video. Either Fabian or\nEmma can now transmit the final state transaction for settlement. This\nlast transaction is the _settlement transaction_ and pays Fabian for all\nthe video Emma consumed, refunding the remainder of the funding\ntransaction to Emma.\n\n<<video_payment_channel>> shows the channel between Emma and Fabian and\nthe commitment transactions that update the balance of the channel.\n\nIn the end, only two transactions are recorded on the blockchain: the\nfunding transaction that established the channel and a settlement\ntransaction that allocated the final balance correctly between(((\"payment channels\", \"example of\", startref=\"payment-channel-example\"))) the two\nparticipants.\n\n[[video_payment_channel]]\n.Emma's payment channel with Fabian, showing the commitment transactions that update the balance of the channel.\nimage::images/mbc3_1403.png[\"Emma's payment channel with Fabian, showing the commitment transactions that update the balance of the channel\"]\n\n==== Making Trustless Channels\n\nThe channel (((\"payment channels\", \"trustless channels\", id=\"payment-channel-trustless\")))(((\"trustless channels\", id=\"trustless-channel\")))(((\"timelocks\", \"trustless channels\", id=\"timelock-trustless\")))(((\"commitment transactions\", \"trustless channels\", id=\"commit-trustless\")))we just described works, but only if both\nparties cooperate, without any failures or attempts to cheat. Let's look\nat some of the scenarios that break this channel and see what is needed\nto fix those:\n\n[role=\"less_space pagebreak-before\"]\n- Once the funding transaction happens, Emma needs Fabian's signature to\n  get any money back. If Fabian disappears, Emma's funds are locked in a\n  2-of-2 and effectively lost. This channel, as constructed, leads to a\n  loss of funds if one of the parties becomes unavailable before there is at\n  least one commitment transaction signed by both parties.\n\n- While the channel is running, Emma can take any of the commitment\n  transactions Fabian has countersigned and transmit one to the\n  blockchain. Why pay for 600 seconds of video if she can transmit\n  commitment transaction #1 and only pay for 1 second of video? The\n  channel fails because Emma can cheat by broadcasting a prior\n  commitment that is in her favor.\n\nBoth of these problems can be solved with timelocks&#x2014;let's look at\nhow we could use transaction-level timelocks.\n\nEmma cannot risk funding a 2-of-2 multisig unless she has a guaranteed\nrefund. To solve this problem, Emma constructs the funding and refund\ntransaction at the same time. She signs the funding transaction but\ndoesn't transmit it to anyone. Emma transmits only the refund\ntransaction to Fabian and obtains his signature.\n\nThe refund transaction acts as the first commitment transaction, and its\ntimelock establishes the upper bound for the channel's life. In this\ncase, Emma could set the lock time to 30 days or 4,320 blocks into the\nfuture. All subsequent commitment transactions must have a shorter\ntimelock so they can be redeemed before the refund transaction.\n\nNow that Emma has a fully signed refund transaction, she can confidently\ntransmit the signed funding transaction knowing that she can eventually,\nafter the timelock expires, redeem the refund transaction even if Fabian\ndisappears.\n\nEvery commitment transaction the parties exchange during the life of the\nchannel will be timelocked into the future. But the delay will be\nslightly shorter for each commitment, so the most recent commitment can\nbe redeemed before the prior commitment it invalidates. Because of the\nlock time, neither party can successfully propagate any of the\ncommitment transactions until their timelock expires. If all goes well,\nthey will cooperate and close the channel gracefully with a settlement\ntransaction, making it unnecessary to transmit an intermediate\ncommitment transaction. If not, the most recent commitment transaction\ncan be propagated to settle the account and invalidate all prior\ncommitment transactions.\n\nFor example, if commitment transaction #1 is timelocked to 4,320 blocks\nin the future, then commitment transaction #2 is timelocked to 4,319\nblocks in the future. Commitment transaction #600 can be spent 600\nblocks before commitment transaction #1 becomes valid.\n\n<<timelocked_commitments>> shows each commitment transaction setting a\nshorter timelock, allowing it to be spent before the previous\ncommitments become valid.\n\n[[timelocked_commitments]]\n.Each commitment sets a shorter timelock, allowing it to be spent before the previous commitments become valid.\nimage::images/mbc3_1404.png[\"Each commitment sets a shorter timelock, allowing it to be spent before the previous commitments become valid\"]\n\nEach subsequent commitment transaction must have a shorter timelock so\nthat it may be broadcast before its predecessors and before the refund\ntransaction. The ability to broadcast a commitment earlier ensures it\nwill be able to spend the funding output and preclude any other\ncommitment transaction from being redeemed by spending the output. The\nguarantees offered by the Bitcoin blockchain, preventing double-spends\nand enforcing timelocks, effectively allow each commitment transaction\nto invalidate its predecessors.\n\nState channels use timelocks to enforce smart contracts across a time\ndimension. In this example we saw how the time dimension guarantees that\nthe most recent commitment transaction becomes valid before any earlier\ncommitments. Thus, the most recent commitment transaction can be\ntransmitted, spending the inputs and invalidating prior commitment\ntransactions. The enforcement of smart contracts with absolute timelocks\nprotects against cheating by one of the parties. This implementation\nneeds nothing more than absolute transaction-level lock time.\nNext, we will see how script-level timelocks,\n+CHECKLOCKTIMEVERIFY+ and +CHECKSEQUENCEVERIFY+, can be used to\nconstruct more flexible, useful, and sophisticated state channels.\n\nTimelocks are not the only way to invalidate prior commitment\ntransactions. In the next sections we will see how a revocation key can\nbe used to achieve the same result. Timelocks are effective, but they\nhave two distinct disadvantages. By establishing a maximum timelock when\nthe channel is first opened, they limit the lifetime of the channel.\nWorse, they force channel implementations to strike a balance between\nallowing long-lived channels and forcing one of the participants to wait\na very long time for a refund in case of premature closure. For example,\nif you allow the channel to remain open for 30 days by setting the\nrefund timelock to 30 days, if one of the parties disappears immediately,\nthe other party must wait 30 days for a refund. The more distant the\nendpoint, the more distant the refund.\n\nThe second problem is that since each subsequent commitment transaction\nmust decrement the timelock, there is an explicit limit on the number of\ncommitment transactions that can be exchanged between the parties. For\nexample, a 30-day channel, setting a timelock of 4,320 blocks into the\nfuture, can only accommodate 4,320 intermediate commitment transactions\nbefore it must be closed. There is a danger in setting the timelock\ncommitment transaction interval at 1 block. By setting the timelock\ninterval between commitment transactions to 1 block, a developer is\ncreating a very high burden for the channel participants who have to be\nvigilant, remain online and watching, and be ready to transmit the right\ncommitment transaction at any time.\n\nIn the preceding example of a single-direction channel, it's easy to\neliminate the per-commitment timelock.  After Emma receives the\nsignature on the timelocked refund transaction from Fabian, no timelocks\nare placed on the commitment transactions.  Instead, Emma sends her\nsignature on each commitment transaction to Fabian but Fabian doesn't\nsend her any of his signatures on the commitment transactions.  That\nmeans only Fabian has both signatures for a commitment transaction, so\nonly he can broadcast one of those commitments.  When Emma finishes\nstreaming video, Fabian will always prefer to broadcast the transaction\nthat pays him the most--which will be the latest state.  This\nconstruction in called a Spillman-style payment channel, which was first\ndescribed and implemented in 2013, although they are only safe to use\nwith witness (segwit) transactions, which didn't become available until\n2017.\n\nNow that we understand how timelocks can be used to invalidate prior\ncommitments, we can see the difference between closing the channel\ncooperatively and closing it unilaterally by broadcasting a commitment\ntransaction. All commitment transactions in our prior example were timelocked, therefore\nbroadcasting a commitment transaction will always involve waiting until\nthe timelock has expired. But if the two parties agree on what the final\nbalance is and know they both hold commitment transactions that will\neventually make that balance a reality, they can construct a settlement\ntransaction without a timelock representing that same balance. In a\ncooperative close, either party takes the most recent commitment\ntransaction and builds a settlement transaction that is identical in\nevery way except that it omits the timelock. Both parties can sign this\nsettlement transaction knowing there is no way to cheat and get a more\nfavorable balance. By cooperatively signing and transmitting the\nsettlement transaction, they can close the channel and redeem their\nbalance immediately. Worst case, one of the parties can be petty, refuse\nto cooperate, and force the other party to do a unilateral close with\nthe most recent commitment transaction. If they do that, they have\nto wait for their funds (((\"payment channels\", \"trustless channels\", startref=\"payment-channel-trustless\")))(((\"trustless channels\", startref=\"trustless-channel\")))(((\"timelocks\", \"trustless channels\", startref=\"timelock-trustless\")))(((\"commitment transactions\", \"trustless channels\", startref=\"commit-trustless\")))too.\n\n[role=\"less_space pagebreak-before\"]\n==== Asymmetric Revocable Commitments\n\nAnother way(((\"payment channels\", \"asymmetric revocable commitments\", id=\"payment-channel-revoke\")))(((\"asymmetric revocable commitments\", id=\"asymmetric-revoke-commit\")))(((\"commitment transactions\", \"asymmetric revocable commitments\", id=\"commit-revoke\")))(((\"revocable commitments\", id=\"revoke-commit\"))) to handle the prior commitment states\nis to explicitly revoke them. However, this is not easy to achieve. A\nkey characteristic of Bitcoin is that once a transaction is valid, it\nremains valid and does not expire. The only way to cancel a transaction\nis to get a conflicting transaction confirmed.\nThat's why we used timelocks in the simple payment channel\nexample to ensure that more recent commitments could be spent\nbefore older commitments were valid. However, sequencing commitments in\ntime creates a number of constraints that make payment channels\ndifficult to use.\n\nEven though a transaction cannot be canceled, it can be constructed in\nsuch a way as to make it undesirable to use. The way we do that is by\ngiving each party a _revocation key_ that can be used to punish the\nother party if they try to cheat. This mechanism for revoking prior\ncommitment transactions was first proposed as part of the LN.\n\nTo explain revocation keys, we will construct a more complex payment\nchannel between two exchanges run by Hitesh and Irene. Hitesh and Irene\nrun Bitcoin exchanges in India and the USA, respectively. Customers of\nHitesh's Indian exchange often send payments to customers of Irene's USA\nexchange and vice versa. Currently, these transactions occur on the\nBitcoin blockchain, but this means paying fees and waiting several\nblocks for confirmations. Setting up a payment channel between the\nexchanges will significantly reduce the cost and accelerate the\ntransaction flow.\n\nHitesh and Irene start the channel by collaboratively constructing a\nfunding transaction, each funding the channel with 5 bitcoin.  Before\nthey sign the funding transaction, they must sign the first set of\ncommitments (called the _refund_) that assigns the\ninitial balance of 5 bitcoin for Hitesh and 5 bitcoin for Irene. The\nfunding transaction locks the channel state in a 2-of-2 multisig, just\nlike in the example of a simple channel.\n\nThe funding transaction may have one or more inputs from Hitesh (adding\nup to 5 bitcoins or more), and one or more inputs from Irene (adding up\nto 5 bitcoins or more). The inputs have to slightly exceed the channel\ncapacity in order to cover the transaction fees. The transaction has one\noutput that locks the 10 total bitcoins to a 2-of-2 multisig address\ncontrolled by both Hitesh and Irene. The funding transaction may also\nhave one or more outputs returning change to Hitesh and Irene if their\ninputs exceeded their intended channel contribution. This is a single\ntransaction with inputs offered and signed by two parties. It has to be\nconstructed in collaboration and signed by each party before it is\ntransmitted.\n\nNow, instead of creating a single commitment transaction that both\nparties sign, Hitesh and Irene create two different commitment\ntransactions that are _asymmetric_.\n\n[role=\"less_space pagebreak-before\"]\nHitesh has a commitment transaction with two outputs. The first output\npays Irene the 5 bitcoins she is owed _immediately_. The second output\npays Hitesh the 5 bitcoins he is owed, but only after a timelock of 1,000\nblocks. The transaction outputs look like this:\n\n----\nInput: 2-of-2 funding output, signed by Irene\n\nOutput 0 <5 bitcoins>:\n    <Irene's Public Key> CHECKSIG\n\nOutput 1 <5 bitcoins>:\n    <1000 blocks>\n    CHECKSEQUENCEVERIFY\n    DROP\n    <Hitesh's Public Key> CHECKSIG\n----\n\nIrene has a different commitment transaction with two outputs. The first\noutput pays Hitesh the 5 bitcoins he is owed immediately. The second\noutput pays Irene the 5 bitcoins she is owed but only after a timelock of\n1,000 blocks. The commitment transaction Irene holds (signed by Hitesh)\nlooks like this:\n\n----\nInput: 2-of-2 funding output, signed by Hitesh\n\nOutput 0 <5 bitcoins>:\n    <Hitesh's Public Key> CHECKSIG\n\nOutput 1 <5 bitcoins>:\n    <1000 blocks>\n    CHECKSEQUENCEVERIFY\n    DROP\n    <Irene's Public Key> CHECKSIG\n----\n\nThis way, each party has a commitment transaction, spending the 2-of-2\nfunding output. This input is signed by the _other_ party. At any time\nthe party holding the transaction can also sign (completing the 2-of-2)\nand broadcast. However, if they broadcast the commitment transaction, it\npays the other party immediately, whereas they have to wait for a\ntimelock to expire. By imposing a delay on the redemption of one of the\noutputs, we put each party at a slight disadvantage when they choose to\nunilaterally broadcast a commitment transaction. But a time delay alone\nisn't enough to encourage fair conduct.\n\n<<asymmetric_commitments>> shows two asymmetric commitment transactions,\nwhere the output paying the holder of the commitment is delayed.\n\n[[asymmetric_commitments]]\n.Two asymmetric commitment transactions with delayed payment for the party holding the transaction.\nimage::images/mbc3_1405.png[\"Two asymmetric commitment transactions with delayed payment for the party holding the transaction\"]\n\nNow we introduce the final element of this scheme: a revocation key that\nprevents a cheater from broadcasting an expired commitment. The\nrevocation key allows the wronged party to punish the cheater by taking\nthe entire balance of the channel.\n\nThe revocation key is composed of two secrets, each half generated\nindependently by each channel participant. It is similar to a 2-of-2\nmultisig, but constructed using elliptic curve arithmetic, so that both\nparties know the revocation public key but each party knows only half\nthe revocation secret key.\n\nIn each round, both parties reveal their half of the revocation secret\nto the other party, thereby giving the other party (who now has both\nhalves) the means to claim the penalty output if this revoked\ntransaction is ever broadcast.\n\nEach of the commitment transactions has a \"delayed\" output. The\nredemption script for that output allows one party to redeem it after\n1,000 blocks, _or_ the other party to redeem it if they have a revocation\nkey, penalizing transmission of a revoked commitment.\n\nSo when Hitesh creates a commitment transaction for Irene to sign, he\nmakes the second output payable to himself after 1,000 blocks or to the\nrevocation public key (of which he only knows half the secret). Hitesh\nconstructs this transaction. He will only reveal his half of the\nrevocation secret to Irene when he is ready to move to a new channel\nstate and wants to revoke this commitment.\n\n[role=\"less_space pagebreak-before\"]\nThe second output's script looks like this:\n\n----\nOutput 0 <5 bitcoins>:\n    <Irene's Public Key> CHECKSIG\n\nOutput 1 <5 bitcoins>:\nIF\n    # Revocation penalty output\n    <Revocation Public Key>\nELSE\n    <1000 blocks>\n    CHECKSEQUENCEVERIFY\n    DROP\n    <Hitesh's Public Key>\nENDIF\nCHECKSIG\n----\n\nIrene can confidently sign this transaction since if transmitted, it\nwill immediately pay her what she is owed. Hitesh holds the transaction\nbut knows that if he transmits it in a unilateral channel closing, he\nwill have to wait 1,000 blocks to get paid.\n\nAfter the channel is advanced to the next state, Hitesh has to _revoke_\nthis commitment transaction before Irene will agree to sign any further\ncommitment transactions. To do that, all he has to do is send his half of\nthe _revocation key_ to Irene. Once Irene has both halves of the\nrevocation secret key for this commitment, she can sign a future\ncommitment with confidence. She knows that if Hitesh tries to cheat by\npublishing the prior commitment, she can use the revocation key to\nredeem Hitesh's delayed output. _If Hitesh cheats, Irene gets BOTH\noutputs_. Meanwhile, Hitesh only has half the revocation secret for that\nrevocation public key and can't redeem the output until 1,000 blocks.\nIrene will be able to redeem the output and punish Hitesh before the\n1,000 blocks have elapsed.\n\nThe revocation protocol is bilateral, meaning that in each round, as the\nchannel state is advanced, the two parties exchange new commitments,\nexchange revocation secrets for the previous commitments, and sign each\nother's new commitment transactions. After they accept a new state, they\nmake the prior state impossible to use by giving each other the\nnecessary revocation secrets to punish any cheating.\n\nLet's look at an example of how it works. One of Irene's customers wants\nto send 2 bitcoins to one of Hitesh's customers. To transmit 2 bitcoins\nacross the channel, Hitesh and Irene must advance the channel state to\nreflect the new balance. They will commit to a new state (state number\n2) where the channel's 10 bitcoins are split, 7 bitcoins to Hitesh and 3\nbitcoins to Irene. To advance the state of the channel, they will each\ncreate new commitment transactions reflecting the new channel balance.\n\n[role=\"less_space pagebreak-before\"]\nAs before, these commitment transactions are asymmetric so the\ncommitment transaction each party holds forces them to wait if they\nredeem it. Crucially, before signing new commitment transactions, they\nmust first exchange revocation keys to invalidate any outdated commitments.\nIn this particular case, Hitesh's interests are aligned with the real\nstate of the channel and therefore he has no reason to broadcast a prior\nstate. However, for Irene, state number 1 leaves her with a higher\nbalance than state 2. When Irene gives Hitesh the revocation key for her\nprior commitment transaction (state number 1), she is effectively\nrevoking her ability to profit from regressing the channel to a prior\nstate because with the revocation key, Hitesh can redeem both outputs of\nthe prior commitment transaction without delay. Meaning if Irene\nbroadcasts the prior state, Hitesh can exercise his right to take all of\nthe outputs.\n\nImportantly, the revocation doesn't happen automatically. While Hitesh\nhas the ability to punish Irene for cheating, he has to watch the\nblockchain diligently for signs of cheating. If he sees a prior\ncommitment transaction broadcast, he has 1,000 blocks to take action and\nuse the revocation key to thwart Irene's cheating and punish her by\ntaking the entire balance, all 10 bitcoins.\n\nAsymmetric revocable commitments with relative time locks (+CSV+) are a\nmuch better way to implement payment channels and a very significant\ninnovation in this technology.  With this construct, the channel can\nremain open indefinitely and can have billions of intermediate\ncommitment transactions. In implementations of LN, the commitment state is identified by a 48-bit index, allowing\nmore than 281 trillion (2.8 × 10^14^) state transitions in (((\"payment channels\", \"asymmetric revocable commitments\", startref=\"payment-channel-revoke\")))(((\"asymmetric revocable commitments\", startref=\"asymmetric-revoke-commit\")))(((\"commitment transactions\", \"asymmetric revocable commitments\", startref=\"commit-revoke\")))(((\"revocable commitments\", startref=\"revoke-commit\")))any single\nchannel.\n\n==== Hash Time Lock Contracts (HTLC)\n\nPayment channels (((\"payment channels\", \"HTLC (Hash Time Lock Contract)\", id=\"payment-channel-htlc\")))(((\"HTLC (Hash Time Lock Contract)\", id=\"htlc\")))(((\"Hash Time Lock Contract (HTLC)\", id=\"hash-time-lock-contract\")))can be further\nextended with a special type of smart contract that allows the\nparticipants to commit funds to a redeemable secret, with an expiration\ntime. This feature is called a _hash time lock contract_, or _HTLC_, and\nis used in both bidirectional and routed payment channels.\n\nLet's first explain the \"hash\" part of the HTLC. To create an HTLC, the\nintended recipient of the payment will first create a secret _R_. They\nthen calculate the hash of this secret _H_:\n\n[latexmath]\n++++\n\\begin{equation}\nH = Hash(R)\n\\end{equation}\n++++\n\nThis produces a hash _H_ that can be included in an output's\nscript. Whoever knows the secret can use it to redeem the output. The\nsecret _R_ is also referred to as a _preimage_ to the hash function. The\npreimage is just the data that is used as input to a hash function.\n\n[role=\"less_space pagebreak-before\"]\nThe second part of an HTLC is the \"time lock\" component. If the secret\nis not revealed, the payer of the HTLC can get a \"refund\" after some\ntime. This is achieved with an absolute timelock using\n+CHECKLOCKTIMEVERIFY+.\n\nThe script implementing an HTLC might look like this:\n\n----\nIF\n    # Payment if you have the secret R\n    HASH160 <H> EQUALVERIFY\n    <Receiver Public Key> CHECKSIG\nELSE\n    # Refund after timeout.\n    <lock time> CHECKLOCKTIMEVERIFY DROP\n    <Payer Public Key> CHECKSIG\nENDIF\n----\n\nAnyone who knows the secret _R_, which when hashed equals to _H_, can\nredeem this output by exercising the first clause of the +IF+ flow.\n\nIf the secret is not revealed and the HTLC claimed after a certain\nnumber of blocks, the payer can claim a refund using the second clause in\nthe +IF+ flow.\n\nThis is a basic implementation of an HTLC. This type of HTLC can be\nredeemed by _anyone_ who has the secret _R_. An HTLC can take many\ndifferent forms with slight variations to the script. For example,\nadding a +CHECKSIG+ operator and a public key in the first clause\nrestricts redemption of the hash to a particular recipient, who must also\nknow the(((\"Bitcoin\", \"as application platform\", \"payment channels\", secondary-sortas=\"application platform\", startref=\"bitcoin-app-platform-payment\")))(((\"application platform, Bitcoin as\", \"payment channels\", startref=\"app-platform-payment\")))(((\"payment channels\", startref=\"payment-channel\")))(((\"payment channels\", \"HTLC (Hash Time Lock Contract)\", startref=\"payment-channel-htlc\")))(((\"HTLC (Hash Time Lock Contract)\", startref=\"htlc\")))(((\"Hash Time Lock Contract (HTLC)\", startref=\"hash-time-lock-contract\"))) secret _R_.\n\n[[lightning_network]]\n=== Routed Payment Channels (Lightning Network)\n\nThe(((\"LN\", see=\"Lightning Network\")))(((\"Bitcoin\", \"as application platform\", \"routed payment channels (Lightning Network)\", secondary-sortas=\"application platform\", id=\"bitcoin-app-platform-ln\")))(((\"application platform, Bitcoin as\", \"routed payment channels (Lightning Network)\", id=\"app-platform-ln\")))(((\"payment channels\", \"Lightning Network\", id=\"payment-channel-ln\")))(((\"Lightning Network (LN)\", id=\"lightning\")))(((\"routed payment channels\", see=\"Lightning Network\"))) Lightning Network (LN) is a proposed routed network of\nbidirectional payment channels connected end-to-end. A network like this\ncan allow any participant to route a payment from channel to channel\nwithout trusting any of the intermediaries. The LN was\nhttps://oreil.ly/NM8LC[first described by\nJoseph Poon and Thadeus Dryja in February 2015], building on the concept\nof payment channels as proposed and elaborated upon by many others.\n\n\"Lightning Network\" refers to a specific design for a routed payment\nchannel network, which has now been implemented by at least five\ndifferent open source teams. The independent implementations are coordinated by a set of\ninteroperability standards described in the\nhttps://oreil.ly/lIGIA[_Basics of Lightning Technology (BOLT)_ repository].\n\n[role=\"less_space pagebreak-before\"]\n==== Basic Lightning Network Example\n\nLet's (((\"payment channels\", \"Lightning Network\", \"example of\", id=\"payment-channel-ln-example\")))(((\"Lightning Network (LN)\", \"example of\", id=\"lightning-example\")))see how this works.\n\nIn this example, we have five participants: Alice, Bob, Carol, Diana,\nand Eric. These five participants have opened payment channels with each\nother, in pairs. Alice has a payment channel with Bob. Bob is connected\nto Carol, Carol to Diana, and Diana to Eric. For simplicity let's assume\neach channel is funded with 2 bitcoins by each participant, for a total\ncapacity of 4 bitcoins in each channel.\n\n<<lightning_network_fig>> shows five participants in an LN, connected by bidirectional payment channels that can be linked\nto make a payment from Alice to Eric (see <<lightning_network>>).\n\n[[lightning_network_fig]]\n.A series of bidirectional payment channels linked to form an LN that can route a payment from Alice to Eric.\nimage::images/mbc3_1406.png[\"A series of bi-directional payment channels linked to form a Lightning Network\"]\n\nAlice wants to pay Eric 1 bitcoin. However, Alice is not connected to\nEric by a payment channel. Creating a payment channel requires a funding\ntransaction, which must be committed to the Bitcoin blockchain. Alice\ndoes not want to open a new payment channel and commit more of her\nfunds. Is there a way to pay Eric indirectly?\n\n<<ln_payment_process>> shows the step-by-step process of routing a\npayment from Alice to Eric, through a series of HTLC commitments on the\npayment channels connecting the participants.\n\n[[ln_payment_process]]\n.Step-by-step payment routing through an LN.\nimage::images/mbc3_1407.png[\"Step-by-step payment routing through a Lightning Network\"]\n\nAlice is running an LN node that is keeping track of\nher payment channel to Bob and has the ability to discover routes\nbetween payment channels. Alice's LN node also has the ability to\nconnect over the internet to Eric's LN node. Eric's LN node creates a\nsecret +R+ using a random number generator. Eric's node does not reveal\nthis secret to anyone. Instead, Eric's node calculates a hash +H+ of the\nsecret +R+ and transmits this hash to Alice's node in the form of an\ninvoice (see <<ln_payment_process>>, [.keep-together]#step 1).#\n\nNow Alice's LN node constructs a route between Alice's LN node and\nEric's LN node. The pathfinding algorithm used will be examined in more\ndetail later, but for now let's assume that Alice's node can find an\nefficient route.\n\nAlice's node then constructs an HTLC, payable to the hash +H+, with a\n10-block refund timeout (current block + 10), for an amount of 1.003\nbitcoins (see <<ln_payment_process>>, step 2). The extra 0.003 will be\nused to compensate the intermediate nodes for their participation in\nthis payment route. Alice offers this HTLC to Bob, deducting 1.003\nbitcoins from her channel balance with Bob and committing it to the HTLC.\nThe HTLC has the following meaning: _\"Alice is committing 1.003 bitcoins of her\nchannel balance to be paid to Bob if Bob knows the secret, or refunded\nback to Alice's balance if 10 blocks elapse.\"_ The channel balance\nbetween Alice and Bob is now expressed by commitment transactions with\nthree outputs: 2 bitcoins balance to Bob, 0.997 bitcoins balance to Alice,\n1.003 bitcoins committed in Alice's HTLC. Alice's balance is reduced by\nthe amount committed to the HTLC.\n\nBob now has a commitment that if he is able to get the secret +R+ within\nthe next 10 blocks, he can claim the 1.003 bitcoins locked by Alice. With this\ncommitment in hand, Bob's node constructs an HTLC on his payment channel\nwith Carol. Bob's HTLC commits 1.002 bitcoins to hash +H+ for 9 blocks,\nwhich Carol can redeem if she has secret +R+ (see <<ln_payment_process>>\nstep 3). Bob knows that if Carol can claim his HTLC, she has to produce\n+R+. If Bob has +R+ in nine blocks, he can use it to claim Alice's HTLC\nto him. He also makes 0.001 bitcoins for committing his channel balance\nfor nine blocks. If Carol is unable to claim his HTLC and he is unable\nto claim Alice's HTLC, everything reverts back to the prior channel\nbalances and no one is at a loss. The channel balance between Bob and\nCarol is now: 2 to Carol, 0.998 to Bob, 1.002 committed by Bob to the\nHTLC.\n\nCarol now has a commitment that if she gets +R+ within the next nine\nblocks, she can claim 1.002 bitcoins locked by Bob. Now she can make an\nHTLC commitment on her channel with Diana. She commits an HTLC of 1.001\nbitcoins to hash +H+, for eight blocks, which Diana can redeem if she has\nsecret +R+ (see <<ln_payment_process>>, step 4). From Carol's\nperspective, if this works she is 0.001 bitcoins better off and if it\ndoesn't she loses nothing. Her HTLC to Diana is only viable if +R+ is\nrevealed, at which point she can claim the HTLC from Bob. The channel\nbalance between Carol and Diana is now: 2 to Diana, 0.999 to Carol,\n1.001 committed by Carol to the HTLC.\n\nFinally, Diana can offer an HTLC to Eric, committing 1 bitcoin for seven\nblocks to hash +H+ (see <<ln_payment_process>>, step 5). The channel\nbalance between Diana and Eric is now: 2 to Eric, 1 to Diana, 1\ncommitted by Diana to the HTLC.\n\nHowever, at this hop in the route, Eric _has_ secret +R+. He can\ntherefore claim the HTLC offered by Diana. He sends +R+ to Diana and\nclaims the 1 bitcoin, adding it to his channel balance (see\n<<ln_payment_process>>, step 6). The channel balance is now: 1 to Diana,\n3 to Eric.\n\nNow, Diana has secret +R+. Therefore, she can now claim the HTLC from\nCarol. Diana transmits +R+ to Carol and adds the 1.001 bitcoins to her\nchannel balance (see <<ln_payment_process>>, step 7). Now the channel\nbalance between Carol and Diana is: 0.999 to Carol, 3.001 to Diana.\nDiana has \"earned\" 0.001 for participating in this payment route.\n\nFlowing back through the route, the secret +R+ allows each participant\nto claim the outstanding HTLCs. Carol claims 1.002 from Bob, setting the\nbalance on their channel to: 0.998 to Bob, 3.002 to Carol (see\n<<ln_payment_process>>, step 8). Finally, Bob claims the HTLC from Alice\n(see <<ln_payment_process>>, step 9). Their channel balance is updated\nas: 0.997 to Alice, 3.003 to Bob.\n\nAlice has paid Eric 1 bitcoin without opening a channel to Eric. None of\nthe intermediate parties in the payment route had to trust each other.\nFor the short-term commitment of their funds in the channel they are\nable to earn a small fee, with the only risk being a small delay in\nrefund if the channel was closed or the routed payment(((\"payment channels\", \"Lightning Network\", \"example of\", startref=\"payment-channel-ln-example\")))(((\"Lightning Network (LN)\", \"example of\", startref=\"lightning-example\"))) failed.\n\n==== Lightning Network Transport and Pathfinding\n\nAll (((\"payment channels\", \"Lightning Network\", \"pathfinding\", id=\"payment-channel-ln-path\")))(((\"Lightning Network (LN)\", \"pathfinding\", id=\"lightning-path\")))(((\"pathfinding in Lightning Network\", id=\"path-lightning\")))communications\nbetween LN nodes are encrypted point-to-point. In addition, nodes have a\nlong-term public key that they use as an\nidentifier and to authenticate each other.\n\nWhenever a node wishes to send a payment to another node, it must first\nconstruct a _path_ through the network by connecting payment channels\nwith sufficient capacity. Nodes advertise routing information, including\nwhat channels they have open, how much capacity each channel has, and\nwhat fees they charge to route payments. The routing information can be\nshared in a variety of ways, and different pathfinding protocols have\nemerged as LN technology has advanced.\nCurrent implementations of\nroute discovery use a P2P model where nodes propagate channel\nannouncements to their peers in a \"flooding\" model, similar to how\nBitcoin propagates transactions.\n\n++++\n<p class=\"fix_tracking3\">\nIn our previous example, Alice's node uses one of these route discovery\nmechanisms to find one or more paths connecting her node to Eric's node.\nOnce Alice's node has constructed a path, she will initialize that path\nthrough the network by propagating a series of encrypted and nested\ninstructions to connect each of the adjacent payment channels.\n</p>\n\n<p class=\"fix_tracking2\">\nImportantly, this path is only known to Alice's node. All other\nparticipants in the payment route see only the adjacent nodes. From\nCarol's perspective, this looks like a payment from Bob to Diana. Carol\ndoes not know that Bob is actually relaying a payment from Alice. She\nalso doesn't know that Diana will be relaying a payment to Eric.</p>\n++++\n\nThis is a critical feature of the LN because it ensures\nprivacy of payments and makes it difficult to apply surveillance,\ncensorship, or blacklists. But how does Alice establish this payment\npath without revealing anything to the intermediary nodes?\n\nThe LN implements an onion-routed protocol based on a\nscheme called https://oreil.ly/fuCiK[Sphinx]. This routing protocol\nensures that a payment sender can construct and communicate a path\nthrough the LN such that:\n\n++++\n<ul>\n<li> Intermediate nodes can verify and decrypt their portion of route\n  information and find the next hop.</li>\n\n<li> Other than the previous and next hops, they cannot learn about any\n  other nodes that are part of the path.</li>\n\n<li>They cannot identify the length of the payment path or their own\n  position in that path.</li>\n\n<li>Each part of the path is encrypted in such a way that a network-level\n  attacker cannot associate the packets from different parts of the path\n  to each other.</li>\n\n<li><p class=\"fix_tracking3\">Unlike Tor (an onion-routed anonymization protocol on the internet),\n  there are no \"exit nodes\" that can be placed under surveillance. The\n  payments do not need to be transmitted to the Bitcoin blockchain; the\n  nodes just update channel balances.</p>\n  </li>\n  </ul>\n++++\n\n\nUsing this onion-routed protocol, Alice wraps each element of the path\nin a layer of encryption, starting with the end and working backward.\nShe encrypts a message to Eric with Eric's public key. This message is\nwrapped in a message encrypted to Diana, identifying Eric as the next\nrecipient. The message to Diana is wrapped in a message encrypted to\nCarol's public key and identifying Diana as the next recipient. The\nmessage to Carol is encrypted to Bob's key. Thus, Alice has constructed\nthis encrypted multilayer \"onion\" of messages. She sends this to Bob,\nwho can only decrypt and unwrap the outer layer. Inside, Bob finds a\nmessage addressed to Carol that he can forward to Carol but cannot\ndecipher himself. Following the path, the messages get forwarded,\ndecrypted, forwarded, etc., all the way to Eric. Each participant knows\nonly the previous and next node in each hop.\n\nEach element of the path contains information on the HTLC that must be\nextended to the next hop, the amount that is being sent, the fee to\ninclude, and the CLTV lock time (in blocks) expiration of the HTLC. As\nthe route information propagates, the nodes make HTLC commitments\nforward to the next hop.\n\nAt this point, you might be wondering how it is possible that the nodes\ndo not know the length of the path and their position in that path.\nAfter all, they receive a message and forward it to the next hop.\nDoesn't it get shorter, allowing them to deduce the path size and their\nposition? To prevent this, the packet size is fixed and\npadded with random data. Each node sees the next hop and a fixed-length\nencrypted message to forward. Only the final recipient sees that there\nis no next hop. To everyone else it seems as if there are always (((\"payment channels\", \"Lightning Network\", \"pathfinding\", startref=\"payment-channel-ln-path\")))(((\"Lightning Network (LN)\", \"pathfinding\", startref=\"lightning-path\")))(((\"pathfinding in Lightning Network\", startref=\"path-lightning\")))more\nhops to go.\n\n==== Lightning Network Benefits\n\nAn(((\"payment channels\", \"Lightning Network\", \"benefits of\", id=\"payment-channel-ln-benefits\")))(((\"Lightning Network (LN)\", \"benefits of\", id=\"lightning-benefits\"))) LN is a\nsecond-layer routing technology. It can be applied to any blockchain\nthat supports some basic capabilities, such as multisignature\ntransactions, timelocks, and basic smart contracts.\n\nLN is layered on top of the Bitcoin network, giving\nBitcoin a significant increase in capacity, privacy,\ngranularity, and speed, without sacrificing the principles of trustless\noperation without intermediaries:\n\nPrivacy:: LN payments are much more private than payments\non the Bitcoin blockchain, as they are not public. While participants in\na route can see payments propagated across their channels, they do not\nknow the sender or recipient.\n\nFungibility:: An LN makes it much more difficult to apply\nsurveillance and blacklists on Bitcoin, increasing the fungibility of\nthe currency.\n\nSpeed:: Bitcoin transactions using LN are settled in\nmilliseconds, rather than minutes or hours, as HTLCs are cleared without\ncommitting transactions to a block.\n\nGranularity:: An LN can enable payments at least as small\nas the Bitcoin \"dust\" limit, perhaps even smaller.\n\nCapacity:: An LN increases the capacity of the Bitcoin\nsystem by several orders of magnitude. The upper bound\nto the number of payments per second that can be routed over a Lightning\nNetwork depends only on the capacity and speed of each node.\n\nTrustless Operation:: An LN uses Bitcoin transactions\nbetween nodes that operate as peers without trusting each other. Thus, an LN preserves the principles of the Bitcoin system, while\nexpanding its operating parameters (((\"Bitcoin\", \"as application platform\", \"routed payment channels (Lightning Network)\", secondary-sortas=\"application platform\", startref=\"bitcoin-app-platform-ln\")))(((\"application platform, Bitcoin as\", \"routed payment channels (Lightning Network)\", startref=\"app-platform-ln\")))(((\"payment channels\", \"Lightning Network\", startref=\"payment-channel-ln\")))(((\"Lightning Network (LN)\", startref=\"lightning\")))(((\"payment channels\", \"Lightning Network\", \"benefits of\", startref=\"payment-channel-ln-benefits\")))(((\"Lightning Network (LN)\", \"benefits of\", startref=\"lightning-benefits\")))significantly.\n\nWe have examined just a few of the emerging applications that can be\nbuilt using the Bitcoin blockchain as a trust platform. These\napplications expand the scope of Bitcoin beyond payments.\n\nNow that you have reached the end of this book, what will you do with\nthe knowledge you have gained?  Millions of people, perhaps billions,\nknow the name \"Bitcoin,\" but only a small percentage of them know as\nmuch about how Bitcoin works as you now do.  That knowledge is precious.\nEven more precious are the people, such as yourself, who are so\ninterested in Bitcoin that you are willing to read several hundred pages\nabout it.\n\nIf you haven't already begun doing so, please consider contributing to\nBitcoin in some way.  You can run a full node to validate the Bitcoin\npayments you receive, build applications that make it easier for other\npeople to use Bitcoin, or help educate other people about Bitcoin and\nits potential.  You can even take the rare step of contributing to open\nsource Bitcoin infrastructure software, such as Bitcoin Core, carefully\nworking with a small number of incredibly smart people to build tools\nthat no one will ever pay for but that billions may one day depend upon.\n\nWhatever your Bitcoin journey, we thank you for making _Mastering\nBitcoin_ a part [.keep-together]#of it.#\n"
        },
        {
          "name": "code",
          "type": "tree",
          "content": null
        },
        {
          "name": "colo.html",
          "type": "blob",
          "size": 2.3056640625,
          "content": "<section id=\"colophon\" data-type=\"colophon\" xmlns=\"http://www.w3.org/1999/xhtml\" class=\"pagebreak-before\">\n\n  <h1 class=\"less_space\">Colophon</h1>\n\n<p>The animal on the cover of <em>Mastering Bitcoin</em> is a leafcutter ant (<em>Atta colombica</em>). The leafcutter ant (a nongeneric name) is a tropical, fungus-growing ant endemic to South and Central America, Mexico, and southern United States. Aside from humans, leafcutter ants form the largest and most complex animal societies on the planet. They are named for the way they chew leaves, which serve as nutrition for their fungal garden.</p>\n\n<p>Winged ants, both male and female, take part in a mass exit of their nest known as the <em>revoada</em>, or a nuptial flight. Females mate with multiple males to collect the 300 million sperm necessary to set up a colony. Females also store bits of the parental fungus garden mycelium in the infrabuccal pocket located in their oral cavity; they will use this to start their own fungal gardens.  Once grounded, the female loses her wings and sets up an underground lair for her colony. The success rate for new queens is low: 2.5% establish a long-lived colony.</p>\n\n<p>Once a colony has matured, ants are divided into castes based on size, with each caste performing various functions. There are usually four castes: minims, the smallest workers that tend to the young and fungus gardens; minors, slightly larger than minima, are the first line of defense for the colony and patrol the surrounding terrain and attack enemies; mediae, the general foragers that cut leaves and bring back leaf fragments to the nest; and majors, the largest worker ants that act as soldiers, defending the nest from intruders. Recent research has shown that majors also clear main foraging trails and carry bulky items back to the nest.</p> \n\n<p>Many of the animals on O'Reilly covers are endangered; all of them are important to the world. To learn more about how you can help, go to <a class=\"orm:hideurl\" href=\"https://animals.oreilly.com\"><em>animals.oreilly.com</em></a>.</p>\n\n<p>The cover illustration is by Karen Montgomery, based on an image from <em>Insects Abroad</em>. The cover fonts are Gilroy Semibold and Guardian Sans. The text font is Adobe Minion Pro; the heading font is Adobe Myriad Condensed; and the code font is Dalton Maag's Ubuntu Mono.</p>\n</section>\n"
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "copyright.html",
          "type": "blob",
          "size": 3.7275390625,
          "content": "<section data-type=\"copyright-page\" xmlns=\"http://www.w3.org/1999/xhtml\">\n<h1>Mastering Bitcoin</h1>\n\n<p class=\"author\">by <span class=\"firstname\">Andreas </span> <span class=\"othername mi\">M. </span> <span class=\"surname\">Antonopoulos</span> and <span class=\"firstname\">David </span> <span class=\"othername mi\">A. </span> <span class=\"surname\">Harding</span></p>\n\n<p class=\"copyright\">Copyright © 2024 David Harding. All rights reserved.</p>\n\n<p class=\"printlocation\">Printed in the United States of America.</p>\n\n<p class=\"publisher\">Published by <span class=\"publishername\">O'Reilly Media, Inc.</span>, 1005 Gravenstein Highway North, Sebastopol, CA 95472.</p>\n\n<p>O'Reilly books may be purchased for educational, business, or sales promotional use. Online editions are also available for most titles (<a href=\"https://oreilly.com\">https://oreilly.com</a>). For more information, contact our corporate/institutional sales department: 800-998-9938 or <span data-type=\"email\"><em>corporate@oreilly.com</em></span>.</p>\n\n<ul class=\"stafflist\">\n\t<li><span class=\"staffrole\">Acquisitions Editor: </span>Michelle Smith</li>\n\t<li><span class=\"staffrole\">Development Editor: </span>Angela Rufino</li>\n\t<li><span class=\"staffrole\">Production Editor:</span> Clare Laylock</li>\n\t<li><span class=\"staffrole\">Copyeditor:</span> Kim Cofer</li>\n\t<li><span class=\"staffrole\">Proofreader:</span> Heather Walley</li>\n\t<li><span class=\"staffrole\">Indexer:</span> nSight, Inc.</li>\n\t<li><span class=\"staffrole\">Interior Designer:</span> David Futato</li>\n\t<li><span class=\"staffrole\">Cover Designer:</span> Randy Comer</li>\n\t<li><span class=\"staffrole\">Illustrator:</span> Kate Dullea</li>\n</ul>\n<!--Add additional printedition spans below as needed.-->\n\n<ul class=\"printings\">\n\t<li><span class=\"printedition\">December 2014:</span> First Edition</li>\n\t<li><span class=\"printedition\">June 2017:</span> Second Edition</li>\n\t<li><span class=\"printedition\">November 2023:</span> Third Edition</li>\n</ul>\n<!--Add additional revdate spans below as needed.-->\n\n<div>\n<h1 class=\"revisions\">Revision History for the Third Edition</h1>\n\n<!--ul class=\"releases\">\n\t<li><span class=\"revdate\">2023-02-22:</span> First Release</li>\n</ul-->\n<ul class=\"releases\">\n\t<li><span class=\"revdate\">2023-11-03:</span> First Release</li>\n</ul>\n</div>\n\n<p class=\"errata\">See <a href=\"https://oreilly.com/catalog/errata.csp?isbn=9781098150099\">https://oreilly.com/catalog/errata.csp?isbn=9781098150099</a> for release details.</p>\n\n<div class=\"legal\">\n<p>The O’Reilly logo is a registered trademark of O’Reilly Media, Inc. <em>Mastering Bitcoin</em>, the cover image, and related trade dress are trademarks of O’Reilly Media, Inc.</p>\n\n<p>While the publisher and the authors have used good faith efforts to ensure that the information and instructions contained in this work are accurate, the publisher and the authors disclaim all responsibility for errors or omissions, including without limitation responsibility for damages resulting from the use of or reliance on this work. Use of the information and instructions contained in this work is at your own risk. If any code samples or other technology this work contains or describes is subject to open source licenses or the intellectual property rights of others, it is your responsibility to ensure that your use thereof complies with such licenses and/or rights. <!--PROD: Uncomment the following sentence if appropriate and add it to the \n        above para:--> <!--This book is not intended as [legal/medical/financial; use the appropriate\n        reference] advice. Please consult a qualified professional if you \n        require [legal/medical/financial] advice.--></p>\n</div>\n\n<div class=\"copyright-bottom\">\n<p class=\"isbn\">978-1-098-15009-9</p>\n\n<p class=\"printer\">[LSI]</p>\n</div>\n</section>\n"
        },
        {
          "name": "cover.html",
          "type": "blob",
          "size": 0.0654296875,
          "content": "<figure data-type=\"cover\">\n<img src=\"images/cover.png\"/>\n</figure>\n"
        },
        {
          "name": "dedication.html",
          "type": "blob",
          "size": 0.4169921875,
          "content": "<section data-type=\"dedication\" xmlns=\"http://www.w3.org/1999/xhtml\" >\n\n<p>Dedicated to my mum, Theresa (1946&#x2013;2017)</p>\n<p>She taught me to love books and question authority</p>\n<p>Thank you, mum</p>\n<p data-type=\"attribution\">—Andreas</p>\n<br/><br/><br/><br/><br/>\n\n<p>For Amanda</p>\n<p>It wasn't until I met you that I</p>\n<p>actually began living in paradise</p>\n\n\n<p data-type=\"attribution\">—Dave</p>\n</section>\n"
        },
        {
          "name": "draft_images",
          "type": "tree",
          "content": null
        },
        {
          "name": "glossary.asciidoc",
          "type": "blob",
          "size": 16.953125,
          "content": "[preface]\n== Quick Glossary\n\n//FIXME:include this?\n\nThis quick glossary contains many of the terms used in relation to bitcoin. These terms are used throughout the book, so bookmark this for a quick reference.\n\naddress::\n    A Bitcoin address looks like +1DSrfJdB2AnWaFNgSbv3MZC2m74996JafV+. It consists of a string of letters and numbers. It's really an encoded base58check version of a public key 160-bit hash. Just as you ask others to send an email to your email address, you would ask others to send you bitcoin to one of your Bitcoin addresses.\n\nbip::\n    Bitcoin Improvement Proposals.  A set of proposals that members of the bitcoin community have submitted to improve bitcoin. For example, BIP21 is a proposal to improve the bitcoin uniform resource identifier (URI) scheme.\n\nbitcoin::\n    The name of the currency unit (the coin), the network, and the software.\n\nblock::\n    A grouping of transactions, marked with a timestamp, and a commitment to the previous block. The block header is hashed to produce a proof of work, thereby validating the transactions. Valid blocks are added to the main blockchain by network consensus.\n\nblockchain::\n\tA list of validated blocks, each linking to its predecessor all the way to the genesis block.\n\nByzantine Generals Problem::\n    A reliable computer system must be able to cope with the failure of one or more of its components. A failed component may exhibit a type of behavior that is often overlooked--namely, sending conflicting information to different parts of the system. The problem of coping with this type of failure is expressed abstractly as the Byzantine Generals Problem.\n\ncoinbase::\n\tA special field used as the sole input for coinbase transactions. The coinbase allows claiming the block reward and provides up to 100 bytes for arbitrary data.\n\tNot to be confused with Coinbase transaction.\n\ncoinbase transaction::\n\tThe first transaction in a block. Always created by a miner, it includes a single coinbase.\n\tNot to be confused with Coinbase.\n\ncold storage::\n\tRefers to keeping a reserve of bitcoin offline. Cold storage is achieved when Bitcoin private keys are created and stored in a secure offline environment. Cold storage is important for anyone with bitcoin holdings. Online computers are vulnerable to hackers and should not be used to store a significant amount of bitcoin.\n\ncolored coins::\n\tAn open source Bitcoin 2.0 protocol that enables developers to create digital assets on top of bitcoin blockchain utilizing its functionalities beyond currency.\n\nconfirmations::\n\tOnce a transaction is included in a block, it has one confirmation. As soon as _another_ block is mined on the same blockchain, the transaction has two confirmations, and so on. Six or more confirmations is considered sufficient proof that a transaction cannot be reversed.\n\nconsensus::\n    When several nodes, usually most nodes on the network, all have the same blocks in their locally-validated best blockchain.\n    Not to be confused with consensus rules.\n\nconsensus rules::\n    The block validation rules that full nodes follow to stay in consensus with other nodes.\n    Not to be confused with consensus.\n\ndifficulty::\n\tA network-wide setting that controls how much computation is required to produce a proof of work.\n\ndifficulty retargeting::\n\tA network-wide recalculation of the difficulty that occurs once every 2,016 blocks and considers the hashing power of the previous 2,016 blocks.\n\ndifficulty target::\n    A difficulty at which all the computation in the network will find blocks approximately every 10 minutes.\n\ndouble-spending::\n    Double spending is the result of successfully spending some money more than once. Bitcoin protects against double-spending by verifying each transaction added to the blockchain to ensure that the inputs for the transaction had not previously already been spent.\n\nECDSA::\n    Elliptic Curve Digital Signature Algorithm or ECDSA is a cryptographic algorithm used by Bitcoin to ensure that funds can only be spent by their rightful owners.\n\nextra nonce::\n    As difficulty increased, miners often cycled through all 4 billion values of the nonce without finding a block. Because the coinbase script can store between 2 and 100 bytes of data, miners started using that space as extra nonce space, allowing them to explore a much larger range of block header values to find valid blocks.\n\nfees::\n\tThe sender of a transaction often includes a fee to the network for processing the requested transaction.  Most transactions require a minimum fee of 0.5 mBTC.\n\nfork::\n    Fork, also known as accidental fork, occurs when two or more blocks have the same block height, forking the blockchain. Typically occurs when two or more miners find blocks at nearly the same time. Can also happen as part of an attack.\n\ngenesis block::\n\tThe first block in the blockchain, used to initialize the cryptocurrency.\n\nhard fork::\n    Hard fork, also known as Hard-Forking Change, is a permanent divergence in the blockchain, commonly occurs when non-upgraded nodes can’t validate blocks created by upgraded nodes that follow newer consensus rules.\n    Not to be confused with fork, soft fork, software fork or Git fork.\n\nhardware wallet::\n    A hardware wallet is a special type of bitcoin wallet which stores the user's private keys in a secure hardware device.\n\n//FIXME: needs improvement\nhash::\n    A digital commitment to some binary input.\n\nhashlocks::\n    A hashlock is a type of encumbrance that restricts the spending of an output until a specified piece of data is publicly revealed. Hashlocks have the useful property that once any hashlock is opened publicly, any other hashlock secured using the same key can also be opened. This makes it possible to create multiple outputs that are all encumbered by the same hashlock and which all become spendable at the same time.\n\nHD protocol::\n    The Hierarchical Deterministic (HD) key creation and transfer protocol (BIP32), which allows creating child keys from parent keys in a hierarchy.\n\nHD wallet::\n    Wallets using the Hierarchical Deterministic (HD Protocol) key creation and transfer protocol (BIP32).\n\nHD wallet seed::\n    HD wallet seed or root seed is a potentially-short value used as a seed to generate the master private key and master chain code for an HD wallet.\n\nHTLC::\n    A Hashed TimeLock Contract or HTLC is a class of payments that use hashlocks and timelocks to require that the receiver of a payment either acknowledge receiving the payment prior to a deadline by generating cryptographic proof of payment or forfeit the ability to claim the payment, returning it to the payer.\n\nKYC::\n    Know your customer (KYC) is the process of a business, identifying and verifying the identity of its clients. The term is also used to refer to the bank regulation which governs these activities.\n\nLevelDB::\n    LevelDB is an open source on-disk key-value store. LevelDB is a light-weight, single-purpose library for persistence with bindings to many platforms.\n\nLightning Networks::\n    Lightning Network is a proposed implementation of Hashed Timelock Contracts (HTLCs) with bi-directional payment channels which allows payments to be securely routed across multiple peer-to-peer payment channels. This allows the formation of a network where any peer on the network can pay any other peer even if they don't directly have a channel open between each other.\n\nLock time::\n    Lock time is the part of a transaction which indicates the earliest time or earliest block when that transaction may be added to the blockchain.\n\nmempool::\n    The bitcoin Mempool (memory pool) is a collection of all transaction data in a block that have been verified by Bitcoin nodes, but are not yet confirmed.\n\nmerkle root::\n    The root node of a merkle tree, a descendant of all the hashed pairs in the tree. Block headers must include a valid merkle root descended from all transactions in that block.\n\nmerkle tree::\n    A tree constructed by hashing paired data (the leaves), then pairing and hashing the results until a single hash remains, the merkle root. In Bitcoin, the leaves are almost always transactions from a single block.\n\nminer::\n    A network node that finds valid proof of work for new blocks, by repeated hashing.\n\nmultisignature::\n    Multisignature (multisig) refers to requiring more than one key to authorize a bitcoin transaction.\n\nnetwork::\n    A peer-to-peer network that propagates transactions and blocks to every Bitcoin node on the network.\n\nnonce::\n    The \"nonce\" in a bitcoin block is a 32-bit (4-byte) field whose value is set so that the hash of the block will contain a run of leading zeros. The rest of the fields may not be changed, as they have a defined meaning.\n\noffchain transactions::\n    An offchain transaction is the movement of value outside of the blockchain. While an onchain transaction&#x2014;usually referred to as simply __a transaction__&#x2014;modifies the blockchain and depends on the blockchain to determine its validity an offchain transaction relies on other methods to record and validate the transaction.\n\nopcode::\n    Operation codes from the Bitcoin Script language which push data or perform functions within a pubkey script or signature script.\n\nOP_RETURN::\n    An opcode used in one of the outputs in an OP_RETURN transaction. Not to be confused with OP_RETURN transaction.\n\nOP_RETURN transaction::\n    A transaction type that adds arbitrary data to a provably unspendable pubkey script that full nodes don’t have to store in their UTXO database. Not to be confused with OP_RETURN opcode.\n\norphan block::\n    Blocks whose parent block has not been processed by the local node, so they can’t be fully validated yet. Not to be confused with stale block.\n\norphan transactions::\n    Transactions that can't go into the pool due to one or more missing input transactions.\n\noutput::\n    Output, transaction output, or TxOut is an output in a transaction which contains two fields: a value field for transferring zero or more satoshis and a pubkey script for indicating what conditions must be fulfilled for those satoshis to be further spent.\n\nP2PKH::\n    Transactions that pay a Bitcoin address contain P2PKH or Pay To PubKey Hash scripts. An output locked by a P2PKH script can be unlocked (spent) by presenting a public key and a digital signature created by the corresponding private key.\n\nP2SH::\n    P2SH or Pay-to-Script-Hash is a powerful new type of transaction that greatly simplifies the use of complex transaction scripts. With P2SH the complex script that details the conditions for spending the output (redeem script) is not presented in the locking script. Instead, only a hash of it is in the locking script.\n\nP2SH address::\n    P2SH addresses are Base58Check encodings of the 20-byte hash of a script, P2SH addresses use the version prefix \"5\", which results in Base58Check-encoded addresses that start with a \"3\". P2SH addresses hide all of the complexity, so that the person making a payment does not see the script.\n\nP2WPKH::\n    The signature of a P2WPKH (Pay-to-Witness-Public-Key-Hash) contains the same information as a P2PKH spending, but is located in the witness structure instead of the input script. The output script is also modified.\n\nP2WSH::\n    The difference between P2SH and P2WSH (Pay-to-Witness-Script-Hash) is about the cryptographic proof location change from the input script to the witness structure and the output script that is also modified.\n\npaper wallet::\n    In the most specific sense, a paper wallet is a document containing all of the data necessary to generate any number of Bitcoin private keys, forming a wallet of keys. However, people often use the term to mean any way of storing bitcoin offline as a physical document. This second definition also includes paper keys and redeemable codes.\n\npayment channels::\n    A micropayment channel or payment channel is class of techniques designed to allow users to make multiple Bitcoin transactions without committing all of the transactions to the bitcoin blockchain. In a typical payment channel, only two transactions are added to the blockchain but an unlimited or nearly unlimited number of payments can be made between the participants.\n\npooled mining::\n    Pooled mining is a mining approach where multiple generating clients contribute to the generation of a block, and then split the block reward according the contributed processing power.\n\nProof-of-Stake::\n    Proof-of-Stake (PoS) is a method by which a cryptocurrency blockchain network aims to achieve distributed consensus. Proof-of-Stake asks users to prove ownership of a certain amount of currency (their \"stake\" in the currency).\n\nProof-of-Work::\n    A piece of data that requires significant computation to find. In bitcoin, miners must find a numeric solution to the SHA256 algorithm that meets a network-wide target, the difficulty target.\n\nreward::\n    An amount included in each new block as a reward by the network to the miner who found the Proof-of-Work solution. It is currently 12.5 BTC per block.\n\nRIPEMD-160::\n    RIPEMD-160 is a 160-bit cryptographic hash function. RIPEMD-160 is a strengthened version of RIPEMD with a 160-bit hash result, and is expected to be secure for the next ten years or more.\n\nsatoshi::\n    A satoshi is the smallest denomination of bitcoin that can be recorded on the blockchain. It is the equivalent of 0.00000001 bitcoin and is named after the creator of Bitcoin, Satoshi Nakamoto. \n\nSatoshi Nakamoto::\n    Satoshi Nakamoto is the name used by the person or people who designed Bitcoin and created its original reference implementation, Bitcoin Core. As a part of the implementation, they also devised the first blockchain database. In the process they were the first to solve the double-spending problem for digital currency. Their real identity remains unknown.\n\nScript::\n    Bitcoin uses a scripting system for transactions. Forth-like, Script is simple, stack-based, and processed from left to right. It is purposefully not Turing-complete, with no loops.\n\nOutput script::\n    A script included in outputs which sets the conditions that must be fulfilled for those satoshis to be spent. Data for fulfilling the conditions can be provided in a signature script.\n\nInput script::\n    The data generated by a spender which is almost always used as variables to satisfy an output script.\n\nsecret key (aka private key)::\n\tThe secret number that unlocks bitcoin sent to the corresponding address.  pass:[<span class=\"keep-together\">A secret</span>] key looks like the following:\n+\n----\n5J76sF8L5jTtzE96r66Sf8cka9y44wdpJjMwCxR3tzLh3ibVPxh\n----\n\nSegregated Witness::\n    Segregated Witness is a proposed upgrade to the Bitcoin protocol which technological innovation separates signature data from bitcoin transactions. Segregated Witness is a proposed soft fork; a change that technically makes Bitcoin’s protocol rules more restrictive.\n\nSHA::\n    The Secure Hash Algorithm or SHA is a family of cryptographic hash functions published by the National Institute of Standards and Technology (NIST).\n\nSimplified Payment Verification (SPV)::\n    A method for verifying particular transactions were included in a block without downloading the entire block. The method is used by some lightweight Bitcoin clients.\n\nsoft fork::\n    soft fork or Soft-Forking Change is a temporary fork in the blockchain which commonly occurs when miners using non-upgraded nodes don't follow a new consensus rule their nodes don’t know about.\n    Not to be confused with fork, hard fork, software fork or Git fork.\n\nstale block::\n    Block that was successfully mined but that isn’t included on the current best blockchain, likely because some other block at the same height had its chain extended first. Not to be confused with orphan block.\n\ntimelocks::\n    A timelock is a type of encumbrance that restricts the spending of some bitcoin until a specified future time or block height. Timelocks feature prominently in many Bitcoin contracts, including payment channels and hashed timelock contracts.\n\ntransaction::\n    In simple terms, a transfer of bitcoin from one address to another. More precisely, a transaction is a signed data structure expressing a transfer of value. Transactions are transmitted over the Bitcoin network, collected by miners, and included into blocks, made permanent on the blockchain.\n\ntransaction pool::\n    An unordered collection of transactions that are not in blocks in the main chain, but for which we have input transactions.\n\nTuring completeness::\n    A program language is called \"Turing complete\" if it can run any program that a Turing machine can run, given enough time and memory.\n\nunspent transaction output (UTXO)::\n    UTXO is an unspent transaction output that can be spent as an input in a new transaction.\n\nwallet::\n    Software that holds all your Bitcoin addresses and secret keys. Use it to send, receive, and store your bitcoin.\n\nWallet Import Format (WIF)::\n    WIF or Wallet Import Format is a data interchange format designed to allow exporting and importing a single private key with a flag indicating whether or not it uses a compressed public key.\n\nSome contributed definitions have been sourced under a CC-BY license from the https://en.bitcoin.it/wiki/Main_Page[bitcoin Wiki] or from other open source documentation sources.\n"
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "ix.html",
          "type": "blob",
          "size": 0.02734375,
          "content": "<section data-type=\"index\"/>"
        },
        {
          "name": "meta",
          "type": "tree",
          "content": null
        },
        {
          "name": "praise.html",
          "type": "blob",
          "size": 1.7021484375,
          "content": "<section data-type=\"dedication\" xmlns=\"http://www.w3.org/1999/xhtml\" class=\"praise\">\n<h1>Praise for <em>Mastering Bitcoin</em>, Third Edition</h1>\n<blockquote>\n  <p><em><span class=\"plainpraise\">Mastering Bitcoin</span></em> is very useful for anyone who wants or needs to understand <span class=\"keep-together\">the\ntechnology</span> of Bitcoin and the concepts of the protocol.\n</p>\n  <p data-type=\"attribution\">René Pickhardt, Bitcoin Lightning Network developer</p>\n</blockquote>\n<blockquote>\n  <p>Delve into the fascinating world of Bitcoin with <em><span class=\"plainpraise\">Mastering Bitcoin</span></em>, the definitive guide that navigates through the intricacies of this digital currency. Whether you're a developer, an investor, or simply curious about the future of money, this comprehensive book serves as your roadmap, providing essential knowledge and empowering you <span class=\"keep-together\">to participate confidently</span> in the Internet of money era.\n\n</p>\n  <p data-type=\"attribution\">Jorge Lesmes, Senior Director at NTT DATA</p>\n</blockquote>\n<blockquote>\n  <p>Nearly a decade after the initial publishing, the third edition of <em><span class=\"plainpraise\">Mastering Bitcoin</span></em> cements the book’s role as the go-to source of technical Bitcoin educational content. <span class=\"keep-together\">No other book is as comprehensive</span> or up-to-date.</p>\n  <p data-type=\"attribution\">Olaoluwa Osuntokun, CTO at Lightning Labs</p>\n</blockquote>\n<blockquote>\n  <p>A comprehensive overview of what goes on under Bitcoin’s hood <span class=\"keep-together\">and how things fit together.</span>\n\n</p>\n  <p data-type=\"attribution\">Mark \"Murch\" Erhardt, Bitcoin engineer, Chaincode Labs</p>\n</blockquote>\n</section>\n"
        },
        {
          "name": "preface.adoc",
          "type": "blob",
          "size": 18.1416015625,
          "content": "[preface]\n== Preface\n\n=== Writing the Bitcoin Book\n\nI (Andreas) first stumbled upon Bitcoin in mid-2011. My immediate reaction was more or less \"Pfft! Nerd money!\" and I ignored it for another six months, failing to grasp its importance. This is a reaction that I have seen repeated among many of the smartest people I know, which gives me some consolation. The second time I came across Bitcoin, in a mailing list discussion, I decided to read the whitepaper written by Satoshi Nakamoto and see what it was all about. I still remember the moment I finished reading those nine pages, when I realized that Bitcoin was not simply a digital currency, but a network of trust that could also provide the basis for so much more than just currencies. The realization that \"this isn't money, it's a decentralized trust network,\" started me on a four-month journey to devour every scrap of information about Bitcoin I could find. I became obsessed and enthralled, spending 12 or more hours each day glued to a screen, reading, writing, coding, and learning as much as I could. I emerged from this state of fugue, more than 20 pounds lighter from lack of consistent meals, determined to dedicate myself to working on Bitcoin.\n\nTwo years later, after creating a number of small startups to explore various Bitcoin-related services and products, I decided that it was time to write my first book. Bitcoin was the topic that had driven me into a frenzy of creativity and consumed my thoughts; it was the most exciting technology I had encountered since the internet. It was now time to share my passion about this amazing technology with a broader audience.\n\n=== Intended Audience\n\nThis book is mostly intended for coders. If you can use a programming language, this book will teach you how cryptographic currencies work, how to use them, and how to develop software that works with them. The first few chapters are also suitable as an in-depth introduction to Bitcoin for noncoders—those trying to understand the inner workings of Bitcoin and cryptocurrencies.\n\n=== Why Are There Bugs on the Cover?\n\nThe leafcutter ant is a species that exhibits highly complex behavior in a colony super-organism, but each individual ant operates on a set of simple rules driven by social interaction and the exchange of chemical scents (pheromones). Per Wikipedia: \"Next to humans, leafcutter ants form the largest and most complex animal societies on Earth.\" Leafcutter ants don't actually eat leaves, but rather use them to farm a fungus, which is the central food source for the colony. Get that? These ants are farming!\n\nAlthough ants form a caste-based society and have a queen for producing offspring, there is no central authority or leader in an ant colony. The highly intelligent and sophisticated behavior exhibited by a multimillion-member colony is an emergent property from the interaction of the individuals in a social network.\n\nNature demonstrates that decentralized systems can be resilient and can produce emergent complexity and incredible sophistication without the need for a central authority, hierarchy, or complex parts.\n\nBitcoin is a highly sophisticated decentralized trust network that can support myriad financial processes. Yet, each node in the Bitcoin network follows a few simple rules. The interaction between many nodes is what leads to the emergence of the sophisticated behavior, not any inherent complexity or trust in any single node. Like an ant colony, the Bitcoin network is a resilient network of simple nodes following simple rules that together can do amazing things without any central coordination.\n\n=== Conventions Used in This Book\n\nThe following typographical conventions are used in this book:\n\n_Italic_:: Indicates new terms, URLs, email addresses, filenames, and file extensions.\n\n+Constant width+:: Used for program listings, as well as within paragraphs to refer to program elements such as variable or function names, databases, data types, environment variables, statements, and keywords.\n\n**`Constant width bold`**:: Shows commands or other text that should be typed literally by the user.\n\n_++Constant width italic++_:: Shows text that should be replaced with user-supplied values or by values determined by context.\n\n\n[TIP]\n====\nThis element signifies a tip or suggestion.\n====\n\n[NOTE]\n====\nThis element signifies a general note.\n====\n\n[WARNING]\n====\nThis element indicates a warning or caution.\n====\n\n=== Code Examples\n\nAll the code snippets can be replicated on most operating systems with a minimal installation of compilers and interpreters for the corresponding languages. Where necessary, we provide basic installation instructions and step-by-step examples of the output of those instructions.\n\nSome of the code snippets and code output have been reformatted for print. In all such cases, the lines have been split by a backslash (\\) character, followed by a newline character. When transcribing the examples, remove those two characters and join the lines again and you should see identical results as shown in the example.\n\nAll the code snippets use real values and calculations where possible, so that you can build from example to example and see the same results in any code you write to calculate the same values.\n\n=== Using Code Examples\n\nThis book is here to help you get your job done. In general, if example code is offered with this book, you may use it in your programs and documentation. You do not need to contact us for permission unless you’re reproducing a significant portion of the code. For example, writing a program that uses several chunks of code from this book does not require permission. Selling or distributing examples from O’Reilly books does require permission. Answering a question by citing this book and quoting example code does not require permission. Incorporating a significant amount of example code from this book into your product’s documentation does require permission.\n\nWe appreciate, but do not require, attribution. An attribution usually includes [.keep-together]#the title,# author, publisher, and ISBN. For example: “_Mastering Bitcoin_, 3rd ed., by [.keep-together]#Andreas M.# Antonopoulos and David A. Harding (O’Reilly). Copyright 2024 David Harding, ISBN 978-1-098-15009-9.”\n\nSome editions of this book are offered under an open source license, such as https://oreil.ly/RzUHE[CC-BY-NC], in which case the terms of that license apply.\n\nIf you feel your use of code examples falls outside fair use or the permission given above, feel free to contact us at pass:[<a href=\"mailto:permissions@oreilly.com\">permissions@oreilly.com</a>].\n\n=== Changes Since the Previous Edition\n\ninclude::meta/third_edition_changes.asciidoc[]\n\n=== Bitcoin Addresses and Transactions in This Book\n\nThe Bitcoin addresses, transactions, keys, QR codes, and blockchain data used in this book are, for the most part, real. That means you can browse the blockchain, look at the transactions offered as examples, retrieve them with your own scripts or programs, etc.\n\nHowever, note that the private keys used to construct addresses are either printed in this book or have been \"burned.\" That means if you send money to any of these addresses, the money will either be lost forever, or in some cases everyone who can read the book can take it using the private keys printed in here.\n\n[WARNING]\n====\nDO NOT SEND MONEY TO ANY OF THE ADDRESSES IN THIS BOOK. Your money will be taken by another reader or lost forever.\n====\n\n=== O'Reilly Online Learning\n[role = \"ormenabled\"]\n[NOTE]\n====\nFor more than 40 years, pass:[<a href=\"https://oreilly.com\" class=\"orm:hideurl\"><em class=\"hyperlink\">O’Reilly Media</em></a>] has provided technology and business training, knowledge, and insight to help companies succeed.\n====\n\nOur unique network of experts and innovators share their knowledge and expertise through books, articles, and our online learning platform. O’Reilly’s online learning platform gives you on-demand access to live training courses, in-depth learning paths, interactive coding environments, and a vast collection of text and video from O'Reilly and 200+ other publishers. For more information, visit pass:[<a href=\"https://oreilly.com\" class=\"orm:hideurl\"><em>https://oreilly.com</em></a>].\n\n=== How to Contact Us\n\nPlease address comments and questions concerning this book to the publisher:\n\n++++\n<ul class=\"simplelist\">\n  <li>O’Reilly Media, Inc.</li>\n  <li>1005 Gravenstein Highway North</li>\n  <li>Sebastopol, CA 95472</li>\n  <li>800-889-8969 (in the United States or Canada)</li>\n  <li>707-829-7019 (international or local)</li>\n  <li>707-829-0104 (fax)</li>\n  <li><a class=\"email\" href=\"mailto:support@oreilly.com\"><em>support@oreilly.com</em></a></li>\n  <li><a href=\"https://www.oreilly.com/about/contact.html\"><em>https://www.oreilly.com/about/contact.html</em></a></li>\n</ul>\n++++\n\nWe have a web page for this book, where we list errata, examples, and any additional information. You can access this page at link:$$https://oreil.ly/MasteringBitcoin3e$$[].\n\n++++\n<!--Don't forget to update the link above.-->\n++++\n\nFor news and information about our books and courses, visit link:$$https://oreilly.com$$[].\n\nFind us on LinkedIn: link:$$https://linkedin.com/company/oreilly-media$$[].\n\nFollow us on Twitter: link:$$https://twitter.com/oreillymedia$$[].\n\nWatch us on YouTube: link:$$https://youtube.com/oreillymedia$$[].\n\n\n=== Contacting the Authors\n\n++++\n<p class=\"left-align\">\nYou can contact Andreas M. Antonopoulos on his personal site:\n<span class=\"keep-together\"><a href=\"https://antonopoulos.com\"><em class=\"hyperlink\">https://antonopoulos.com</em></a>.</span></p>\n++++\n\nFollow Andreas on Facebook:\nlink:$$https://facebook.com/AndreasMAntonopoulos$$[].\n\nFollow Andreas on Twitter:\nlink:$$https://twitter.com/aantonop$$[].\n\nFollow Andreas on LinkedIn:\nlink:$$https://linkedin.com/company/aantonop$$[].\n\nMany thanks to all of Andreas's patrons who support his work through monthly donations. You can follow his Patreon page here:\nlink:$$https://patreon.com/aantonop$$[].\n\nInformation about _Mastering Bitcoin_, as well as Andreas's Open Edition and translations, is available on\nlink:$$https://bitcoinbook.info$$[].\n\nYou can contact David A. Harding on his personal site:\nlink:$$https://dtrt.org$$[].\n\n=== Acknowledgments for the First and Second Editions\n\n_By Andreas M. Antonopoulos_\n\nThis book represents the efforts and contributions of many people. I am grateful for all the help I received from friends, colleagues, and even complete strangers, who joined me in this effort to write the definitive technical book on cryptocurrencies and Bitcoin.\n\nIt is impossible to make a distinction between the Bitcoin technology and the Bitcoin community, and this book is as much a product of that community as it is a book on the technology. My work on this book was encouraged, cheered on, supported, and rewarded by the entire Bitcoin community from the very beginning until the very end. More than anything, this book has allowed me to be part of a wonderful community for two years and I can't thank you enough for accepting me into this community. There are far too many people to mention by name—people I've met at conferences, events, seminars, meetups, pizza gatherings, and small private gatherings, as well as many who communicated with me by Twitter, on reddit, on bitcointalk.org, and on GitHub who have had an impact on this book. Every idea, analogy, question, answer, and explanation you find in this book was at some point inspired, tested, or improved through my interactions with the community. Thank you all for your support; without you this book would not have happened. I am forever grateful.\n\nThe journey to becoming an author starts long before the first book, of course. My first language (and schooling) was Greek, so I had to take a remedial English writing course in my first year of university. I owe thanks to Diana Kordas, my English writing teacher, who helped me build confidence and skills that year. Later, as a professional, I developed my technical writing skills on the topic of data centers, writing for _Network World_ magazine. I owe thanks to John Dix and John Gallant, who gave me my first writing job as a columnist at _Network World_ and to my editor Michael Cooney and my colleague Johna Till Johnson who edited my columns and made them fit for publication. Writing 500 words a week for four years gave me enough experience to eventually consider becoming an author.\n\nThanks also to those who supported me when I submitted my book proposal to O'Reilly by providing references and reviewing the proposal. Specifically, thanks to John Gallant, Gregory Ness, Richard Stiennon, Joel Snyder, Adam B. Levine, Sandra Gittlen, John Dix, Johna Till Johnson, Roger Ver, and Jon Matonis. Special thanks to Richard Kagan and Tymon Mattoszko, who reviewed early versions of the proposal and Matthew Taylor, who copyedited the proposal.\n\nThanks to Cricket Liu, author of the O'Reilly title _DNS and BIND_, who introduced me to O'Reilly. Thanks also to Michael Loukides and Allyson MacDonald at O'Reilly, who worked for months to help make this book happen. Allyson was especially patient when deadlines were missed and deliverables delayed as life intervened in our planned schedule. For the second edition, I thank Timothy McGovern for guiding the process, Kim Cofer for patiently editing, and Rebecca Panzer for illustrating many new diagrams.\n\nThe first few drafts of the first few chapters were the hardest, because Bitcoin is a difficult subject to unravel. Every time I pulled on one thread of the Bitcoin technology, I had to pull on the whole thing. I repeatedly got stuck and a bit despondent as I struggled to make the topic easy to understand and create a narrative around such a dense technical subject. Eventually, I decided to tell the story of Bitcoin through the stories of the people using Bitcoin and the whole book became a lot easier to write. I owe thanks to my friend and mentor, Richard Kagan, who helped me unravel the story and get past the moments of writer's block. I thank Pamela Morgan, who reviewed early drafts of each chapter in the first and second edition of the book and asked the hard questions to make them better. Also, thanks to the developers of the San Francisco Bitcoin Developers Meetup group as well as Taariq Lewis and Denise Terry for helping test the early material. Thanks also to Andrew Naugler for infographic design.\n\nDuring the development of the book, I made early drafts available on GitHub and invited public comments. More than a hundred comments, suggestions, corrections, and contributions were submitted in response. Those contributions are explicitly acknowledged, with my thanks, in <<github_contrib>>. Most of all, my sincere thanks to my volunteer GitHub editors Ming T. Nguyen (1st edition) and Will Binns (2nd edition), who worked tirelessly to curate, manage, and resolve pull requests, issue reports, and perform bug fixes on GitHub.\n\nOnce the book was drafted, it went through several rounds of technical review. Thanks to Cricket Liu and Lorne Lantz for their thorough review, comments, and support.\n\nSeveral Bitcoin developers contributed code samples, reviews, comments, and encouragement. Thanks to Amir Taaki and Eric Voskuil for example code snippets and many great comments; Chris Kleeschulte for contributing information about Bitcore; Vitalik Buterin and Richard Kiss for help with elliptic curve math and code contributions; Gavin Andresen for corrections, comments, and encouragement; Michalis Kargakis for comments, contributions, and btcd writeup; and Robin Inge for errata submissions improving the second print. In the second edition, I again received a lot of help from many Bitcoin Core developers, including Eric Lombrozo who demystified segregated witness, Luke Dashjr who helped improve the chapter on transactions, Johnson Lau who reviewed segregated witness and other chapters, and many others. I owe thanks to Joseph Poon, Tadge Dryja, and Olaoluwa Osuntokun who explained Lightning Network, reviewed my writing, and answered questions when I got stuck.\n\nI owe my love of words and books to my mother, Theresa, who raised me in a house with books lining every wall. My mother also bought me my first computer in 1982, despite being a self-described technophobe. My father, Menelaos, a civil engineer who just published his first book at 80 years old, was the one who taught me logical and analytical thinking and a love of science and engineering.\n\nThank you all for supporting me throughout this journey.\n\n=== Acknowledgments for the Third Edition\n\n_By David A. Harding_\n\nThe introduction to the noninteractive schnorr signature protocol that\nstarts with first describing the interactive schnorr identity protocol\nin <<schnorr_signatures>> was heavily influenced by the introduction to\nthe subject in \"Borrommean Ring Signatures\" (2015) by Gregory Maxwell and\nAndrew Poelstra.  I am deeply indebted to each of them for all of their\nfreely provided assistance over the past decade.\n\nInvaluable technical reviews on drafts of this manuscript were provided\nby Jorge Lesmes, Olaoluwa Osuntokun, René Pickhardt, and Mark \"Murch\"\nErhardt.  In particular, Murch's incredibly in-depth and insightful\nreview, and his willingness to evaluate multiple iterations of the same\ntext, have elevated the quality of this book beyond my highest\nexpectations.\n\nI also owe a debt of gratitude to Jimmy Song for suggesting me for this\nproject, to my coauthor Andreas for allowing me to update his\nbestselling text, to Angela Rufino for guiding me through the O'Reilly\nauthorship process, and to all of the other staff at O'Reilly for making\nthe writing of the third edition a pleasant and productive experience.\n\nFinally, I don't know how I can thank all of the Bitcoin contributors\nwho have helped me on my journey--from creating the software I use, to\nteaching me how it works, to helping me pass on what little knowledge\nI've gained.  There are too many of you to list your names, but I think\nof you often and know that my contributions to this book would not have\nbeen possible without all that you've done for me.\n\n[[github_contrib]]\n=== Early Release Draft (GitHub Contributions)\n\nMany contributors offered comments, corrections, and additions to the early-release draft on GitHub. Thank you all for your contributions to this book.\n\nFollowing is a list of notable GitHub contributors, including their GitHub ID in parentheses:\n\ninclude::meta/github_contrib.adoc[]\n"
        },
        {
          "name": "snippets",
          "type": "tree",
          "content": null
        },
        {
          "name": "tapscript.asciidoc",
          "type": "blob",
          "size": 0.1279296875,
          "content": "\n[[taproot_scripts]]\n[[tapscript]]\n=== Taproot Scripts (Tapscript)\n\nhttps://github.com/bitcoin/bips/blob/master/bip-0342.mediawiki\n"
        },
        {
          "name": "theme",
          "type": "tree",
          "content": null
        },
        {
          "name": "titlepage.html",
          "type": "blob",
          "size": 0.263671875,
          "content": "<section data-type=\"titlepage\" xmlns=\"http://www.w3.org/1999/xhtml\">\n<h1>Mastering Bitcoin</h1>\n\n<p class=\"edition\">Third Edition</p>\n\n<p class=\"subtitle\">Programming the Open Blockchain</p>\n\n<p class=\"author\">Andreas M. Antonopoulos and David A. Harding</p>\n</section>\n"
        },
        {
          "name": "toc.html",
          "type": "blob",
          "size": 0.05859375,
          "content": "<nav data-type=\"toc\" xmlns=\"http://www.w3.org/1999/xhtml\"/>\n"
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}