{
  "metadata": {
    "timestamp": 1736709601454,
    "page": 16,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Prinzhorn/skrollr",
      "stars": 18521,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0126953125,
          "content": "node_modules/"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.0341796875,
          "content": "language: node_js\nnode_js:\n  - 0.10"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.572265625,
          "content": "Questions belong to StackOverflow\n=====\n\nGitHub is for issues and feature requests. Anything else belongs to [StackOverflow](http://stackoverflow.com/questions/ask?tags=skrollr).\n\nPull requests\n=====\n\nWill be ignored if the Travis build fails. Install grunt and run `grunt jshint qunit` locally before submitting pull requests.\n\nDo not include build files in your pull request (e.g. `skrollr.min.js`).\n\nDo not change the version number in your pull request.\n\nDo not try to fix multiple issues or add multiple features with a single pull request. A pull request should only do one thing."
        },
        {
          "name": "Gruntfile.js",
          "type": "blob",
          "size": 1.123046875,
          "content": "module.exports = function(grunt) {\n\t//Configuration.\n\tgrunt.initConfig({\n\t\tpkg: grunt.file.readJSON('package.json') ,\n\t\tjshint: {\n\t\t\toptions: {\n\t\t\t\tsmarttabs: false,\n\t\t\t\tcurly: true,\n\t\t\t\timmed: true,\n\t\t\t\tlatedef: true,\n\t\t\t\tnoarg: true,\n\t\t\t\tquotmark: 'single',\n\t\t\t\tundef: true,\n\t\t\t\tunused: true,\n\t\t\t\tstrict: true,\n\t\t\t\ttrailing: true,\n\t\t\t\tglobals: {\n\t\t\t\t\twindow: true,\n\t\t\t\t\tdocument: true,\n\t\t\t\t\tnavigator: true,\n\t\t\t\t\tdefine: true,\n\t\t\t\t\tmodule: true\n\t\t\t\t}\n\t\t\t},\n\t\t\tall: ['src/**/*.js']\n\t\t},\n\t\tqunit: {\n\t\t\tall: ['test/index.html', 'test/loading.html']\n\t\t},\n\t\tuglify: {\n\t\t\toptions: {\n\t\t\t\tbanner: '/*! skrollr <%= pkg.version %> (<%= grunt.template.today(\"yyyy-mm-dd\") %>) | Alexander Prinzhorn - https://github.com/Prinzhorn/skrollr | Free to use under terms of MIT license */\\n'\n\t\t\t},\n\n\t\t\tall: {\n\t\t\t\tfiles: {\n\t\t\t\t\t'dist/skrollr.min.js': 'src/skrollr.js'\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t//Dependencies.\n\tgrunt.loadNpmTasks('grunt-contrib-jshint');\n\tgrunt.loadNpmTasks('grunt-contrib-qunit');\n\tgrunt.loadNpmTasks('grunt-contrib-uglify');\n\n\t//Tasks.\n\tgrunt.registerTask('default', ['jshint', 'qunit', 'uglify']);\n\tgrunt.registerTask('travis', ['jshint', 'qunit']);\n};"
        },
        {
          "name": "HISTORY.md",
          "type": "blob",
          "size": 9.7490234375,
          "content": "0.6.30 (2015-06-19)\n-------------------\n\n* Respect result of beforerender callback on mobile (#717)\n* Allow for a duration of 0 when scrolling (#720)\n\n0.6.29 (2014-11-17)\n-------------------\n\n* Make the ID of `skrollr-body` configurable (#592)\n\n0.6.28 (2014-11-15)\n-------------------\n\n* In cases where skrollr-body has a height other than `auto` the height of its content is now correctly calculated. This should solve many issues on mobile where scrolling got stock before reaching the bottom (#633)\n\n0.6.27 (2014-09-28)\n-------------------\n\n* Fixed AMD module definition (#609)\n\n0.6.26 (2014-06-08)\n-------------------\n\n* Fixed easing functions not working when animating attributes (#533)\n\n0.6.25 (2014-05-22)\n-------------------\n\n* CommonJS (#519).\n\n0.6.24 (2014-04-25)\n-------------------\n\n* Fixed some issue with forceHeight (#347).\n* Fixed a regression caused by #486 breaking IE 8 (#494).\n* Added support for animating attributes (#204).\n\n0.6.23 (2014-04-18)\n-------------------\n\n**note**: This particular version is broken in IE!\n\n* Experimental support for emitting events when the scrolling passes a keyframe (check out the docs for `keyframe` option/event).\n* When using `refresh`, make sure elements which do not longer have keyframes get properly cleaned up (#486).\n* Fixed `refresh` not accepting `NodeList`s (#435).\n* Expose the status of mobile mode as `isMobile()` function (#488).\n\n0.6.22 (2014-02-21)\n-------------------\n\n* Experimental AMD support (#409). Please read the documentation about it.\n\n0.6.21 (2014-01-06)\n-------------------\n\n* Disabled mobile mode on Windows Phone, since it's not needed there (#408).\n\n0.6.20 (2014-01-03)\n-------------------\n\n* Fixed broken percentage constants.\n\n0.6.19 (2014-01-02)\n-------------------\n\n* Constants can now be defined as functions or percentage offsets (#148, #404).\n\n**breaking**: When using a constant of value `100` together with percentage offsets like `data-_foo-75p`,\nthe value was implicitly handled as percentage value `100p`. Starting with this version you need to explcitly use `100p` if you want percentage constants.\nOn the plus side, you can now mix an absolute constant with a percentage keyframe or a percentage constant with an absolute keyframe.\n\n0.6.18 (2013-12-18)\n-------------------\n\n* Fixed scrolling on input elements (#397).\n\n0.6.17 (2013-10-19)\n------\n\n* Fixed keyboard not appearing on some mobile browsers when an input was focused (#349).\n\n0.6.16 (2013-10-18)\n------\n\n* Fixed `z-index:auto;` not working because it was always coerced to an integer (#351).\n\n0.6.15 (2013-10-03)\n------\n\n* Fixed clicking on links (and other elements) on mobile (#263, #303, #338).\n* Added `getMaxScrollTop` method (#238).\n\n0.6.14 (2013-10-03)\n------\n\n* Fixed the `direction` parameter that's passed to the render events (#339).\n\n0.6.13 (2013-09-29)\n-----\n\n* Added support for percentage offsets (#185).\n\n0.6.12 (2013-09-17)\n-----\n\n* Added `destroy` method (#109).\n\n0.6.11 (2013-08-13)\n-----\n\n* Made the mobile deceleration configurable and lowered the default (#222, #229).\n\n0.6.10 (2013-07-30)\n-----\n\n* Fixed bug which caused IE to perform an endless loop (#271).\n\n0.6.9 (2013-07-01)\n-----\n\n* Improved overall performance for mobile (#249).\n\n0.6.8 (2013-06-17)\n-----\n\n* Added a new option `smoothScrollingDuration`.\n\n0.6.7 (2013-06-17)\n-----\n\n* Changed the default value of `edgeStrategy` from `ease` to `set`. There are too many cases where `ease` was not wanted and unexpected.\n\n0.6.6 (2013-06-05)\n-----\n\n* Fixed IE plugin not working. This was caused by assigning `skrollr.setStyle` to a local variable inside the skrollr core. Since the IE plugin monkey-patches the skrollr.setStyle function, the core didn't notice the change (#199 comment 18986949).\n\n0.6.5 (2013-05-22)\n-----\n\n* Fixed crash in IE < 9 because the detected prefix was `null` (#220).\n\n0.6.4 (2013-05-21)\n-----\n\n* Fixed that some elements got the `skrollable-before` **and** `skrollable-after` class at the same time.\n\n0.6.3 (2013-05-19)\n-----\n\n* When resizing the browser, the scroll position was reset to 0 (#217)\n\n0.6.2 (2013-05-18)\n-----\n\n* When resizing the browser, `forceHeight` was colliding with the already forced height (#216).\n\n0.6.1 (2013-05-18)\n-----\n\n* Allow numbers inside of easing function names (#152).\n\n0.6.0 (2013-05-18)\n-----\n\n**Expect things to break when coming from 0.5! Read through the changelog. Migration is not hard.**\n\n* **[breaking]** There's no more `skrollr.mobile.js` file. You only need `skrollr.js`. You no longer need to conditionally include `skrollr.mobile.js`.\n* You can configure how skrollr detects mobile browsers using the `mobileCheck` option (check out the documentation).\n* **[possibly breaking]** The meaning of the `#skrollr-body` element changed. Put all static elements inside of it and all absolute/fixed elements outside. It doesn't need to be the first child of the body anymore.\n* **[breaking]** The `rendered` and `unrendered` classes where renamed because they were confusing and wrong. They're now called `skrollable-before` and `skrollable-after`, because that's their meaning (the element with these classes is before/after the first/last keyframe).\n\t* Added a new class `skrollable-between`, because symmetry. That's why.\n* Easing functions are now applied when exactly at a keyframe (#132).\n* **[possibly breaking]** The behavior changed for the case when the scroll position is before/after the first/last keyframe (I'm just gonna use \"before first\" from now on, because \"after last\" is analog). In 0.5 the behavior was not exactly specified and buggy (see item above regarding #132). Skrollr was applying the styles of the first keyframe to the element for all scroll position that were before the first keyframe. E.g. when `data-100=\"top:200px;\"` was the first keyframe, the element had `top:200px;` at all scroll positions before (all from `0` to `99`). From now on you can specify the behavior you want (see `edgeStrategy` option for details, set it to `set` for old behavior). **Note: 0.6.7 and up use `set` as default.**\n\n\n0.5.14\n-----\n\n* Add a `skrollr-mobile` class to the html element when the mobile script is included.\n\n0.5.13 (2013-02-08)\n-----\n\n* #131: Use a cross browser approach for getting the body scroll-height.\n* #133: Use the maximum of document height or the max keyframe for edge cases where absolute keyframes are used in a relative-mode-like document and `data-end` was calculated wrong.\n\n0.5.12 (2013-02-08)\n-----\n\n* #121: Fixed prefix detection in Safari.\n\n0.5.11 (2013-01-18)\n-----\n\n* #126: When calling refresh(), force rerendering, even if the scrollbar didn't move.\n\n0.5.10\n-----\n\n* #104: Fixed the most annoying bug on mobile. There was a large blank space at the bottom of the page.\n\n0.5.9\n-----\n\n* #118: Fixed broken prefix detection. Was broken all the time, but worked before Firefox 18.\n\n0.5.8 (2013-01-12)\n-----\n\n* #116 + #117: SVG support was broken for relative mode.\n\n0.5.7\n-----\n\n* #103: skrollr no longer depends on being added to the bottom of the document.\n\n0.5.6\n-----\n\n* #105: Fixed inconsistent behaviour for adding `rendered` and `unrendered` class on page load\n\n0.5.5\n-----\n\n* #100: Fixed relative-mode not working correctly in IE < 9 due to crippled getBoundingClientRect\n\n0.5.4 (2012-11-18)\n-----\n\n* #80: When resizing the browser window the calculation of relative mode was wrong when the element's vertical position was changed before.\n\n0.5.3\n-----\n\n* #66: Make IE 7 support a light version of `data-anchor-target` by mapping `querySelector` to `getElementById`.\n\n0.5.2\n-----\n\n* #78: Fixed that new parser didn't allowed omitting the last semicolon in a keyframe property list.\n\n0.5.1 (2012-10-29)\n-----\n\n* Fixed `setScrollTop` and `animateTo` not working because iScroll uses negative offset.\n\n0.5.0 (2012-10-09)\n-----\n\n* *breaking* the `plugin` api has been removed (the IE plugin has been updated to a new, hidden api).\n* Full mobile support using iscroll.\n* #73: Fixed parser to not mess up colons inside URLs\n* #74: Fixed parser to not treat single periods as decimal numbers\n* #76: Fixed dummy element overlaping the content, even though it should be unobtrusive\n\n0.4.13\n-----\n\n* #58: `forceHeight` now handles relative mode like a boss.\n* #59: Make `scale` option only affect absolute mode.\n\n0.4.12\n-----\n\n* #64: Setting `float` property using JavaScript didn't work across browser. Now using `styleFloat` and `cssFloat` properties.\n\n0.4.11 (2012-09-17)\n-----\n\n* The `scale` option does not affect `constants`.\n\n0.4.10\n-----\n\n* Allow smooth scrolling on element level using `data-smooth-scrolling`\n\n0.4.9\n-----\n\n* Added experimental smooth scrolling (no more CSS transitions. WORKS IN IE.).\n\n0.4.8\n-----\n\n* Added `stopAnimateTo` method.\n\n0.4.7\n-----\n\n* Updated the requestAnimationFrame polyfill for smoother animations\n* Updated the way requestAnimationFrame is used for even smoother animations\n\n0.4.6\n-----\n\n* New method `relativeToAbsolute` which was formerly private\n* New method `isAnimatingTo` to check if an animation caused by `animateTo` is running\n* Added `sqrt` easing function\n\n0.4.5\n-----\n\n* Experimental mobile support using https://github.com/zynga/scroller\n\n0.4.4\n-----\n\n* A `skrollr` class is added to the HTML element and a `no-skrollr` class is removed when `init` is called. Useful for fallback styling.\n\n0.4.3 (2012-08-02)\n-----\n\n* Added new feature \"constants\".\n\n0.4.2 (2012-07-26)\n-----\n\n* Added new feature \"anchor-target\" which allows elements to react to other elements leaving/entering the viewport.\n\n0.4.1 (2012-07-25)\n-----\n\n* Fixed a bug which broke skrollr in IE caused by wrong regular expression behavior\n\n0.4.0 (2012-07-22)\n-----\n\n* *breaking* the `data-end-[offset]` syntax changed. It's now `data-[offset]-end`.\n* Fixed a bug where white spaces between style declarations were not ignored.\n* Added support for anchors. Animations can now be specified relative to the elements position within the viewport.\n* Added support for SVG elements.\n* Added new method `refresh()`."
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.072265625,
          "content": "The MIT License\n\nCopyright (c) 2012-2014 Alexander Prinzhorn (@Prinzhorn)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 31.2158203125,
          "content": "[![Build Status](https://secure.travis-ci.org/Prinzhorn/skrollr.png)](http://travis-ci.org/Prinzhorn/skrollr)\n\nPlease note:\n============\n\n**skrollr hasn't been under active development since about September 2014** (check out the contributions graphs on https://github.com/Prinzhorn/skrollr/graphs/contributors) and I don't have any plans for doing major changes to it. Please consider this before using skrollr in production as problems with new browser versions, especially on mobile, will most definitely surface. To be honest, mobile support always sucked (because mobile browsers are hard) and you shouldn't compromise UX for some fancy UI effects. Ever.\n\nskrollr 0.6.30\n==============\n\nStand-alone **parallax scrolling** JavaScript library for **mobile (Android, iOS, etc.) and desktop** in about 12k minified.\n\nDesigner friendly. No JavaScript skills needed. Just plain CSS and HTML.\n\n_Actually, skrollr is much more than \"just\" **parallax scrolling**. It's a full-fledged scrolling animation library. In fact, you can use it and still have no parallax scrolling at all. But I wanted to sound hip and use some buzz-words. By the way, skrollr leverages HTML5 and CSS3 ;-)_\n\nResources\n=====\n\nPlugins\n-----\n\n### Official\n\n* [skrollr-menu](https://github.com/Prinzhorn/skrollr-menu) - Hash navigation\n* [skrollr-ie](https://github.com/Prinzhorn/skrollr-ie) - IE < 9 CSS fixes\n* [skrollr-stylesheets](https://github.com/Prinzhorn/skrollr-stylesheets) - Keyframes inside CSS files\n\n### Third party\n\n* [skrollr-colors](https://github.com/FezVrasta/skrollr-colors) - Mix and match hex, rgb and hsl colors.\n* [skrollr-decks](https://github.com/TrySound/skrollr-decks) - Fullpage presentation decks.\n\nIn the wild\n-----\n\nCheck out the [wiki page](https://github.com/Prinzhorn/skrollr/wiki/In-the-wild) for websites using skrollr and feel free to add your own website :). You can also shamelessly add yourself to the list [here](https://github.com/Prinzhorn/skrollr/wiki/Agencies-and-freelancers) if you are offering paid skrollr support.\n\nFurther resources (tutorials etc.)\n-----\n\nMoved to the [wiki](https://github.com/Prinzhorn/skrollr/wiki/Resources).\n\n\nDocumentation\n=====\n\nFirst of all: look at the [examples and read the source ;-)](https://github.com/Prinzhorn/skrollr/tree/master/examples). This might give you a feeling of how stuff works and you can see how some patterns can be implemented.\n\nAbstract\n------\n\nskrollr allows you to animate any CSS property of any element depending on the horizontal scrollbar position. All you need to do is define key frames for each element at certain points in top scroll offset.\n\nOther libraries require you to write JavaScript in order to define your animations. This introduces two main problems:\n\n* Animation and element are not at one place. In order to find out if any animations are defined for a given element, you have to scroll through many (sometimes thousands) of lines of JavaScript.\n* You have to learn a new syntax which is often very verbose and limited at the same time.\n\nWith skrollr, you put the definition of your key frames right where they belong (to the element) using a syntax you already know (plain CSS).\n\nIf you would rather have the keyframes inside a separate file, take a look at [skrollr-stylesheets](https://github.com/Prinzhorn/skrollr-stylesheets).\n\nIf you prefer to use JavaScript to define your animations make sure to take a look at [ScrollMagic](https://github.com/janpaepke/ScrollMagic). It depends on both jQuery and the Greensock Animation Platform (GSAP) and gives you full control over every detail of your animations.\n\nLet's get serious\n------\n\nFirst of all you want to include the `skrollr.min.js` file at the bottom of your document (right before the closing `</body>`) and then call `skrollr.init()`. Or you can place it inside the `<head>` if you want to, but make sure to call `init()` once the document has been loaded (e.g. jQuery's `ready` event or even `window.onload`).\n\n```html\n\t<script type=\"text/javascript\" src=\"skrollr.min.js\"></script>\n\t<script type=\"text/javascript\">\n\tvar s = skrollr.init();\n\t</script>\n</body>\n```\n\nIf you are using require.js to structure your project, you can use skrollr as a module as well.\n\n```javascript\nrequire(['skrollr'], function(skrollr){\n\tvar s = skrollr.init();\n});\n```\n\nIf you're familiar with CSS, you already know the `style` attribute. In order to create an animation you would need several, at least two, of them. That's what skrollr does. You use the HTML5 `data-` attributes to define multiple sets of styles (we call each of them **keyframe**) and skrollr interpolates between them.\n\n#### Let's change the background-color of a `div` starting at `#00f` when the scrollbar is at the top and ending with `#f00` when the user scrolled 500 pixels down\n\n```html\n<div data-0=\"background-color:rgb(0,0,255);\" data-500=\"background-color:rgb(255,0,0);\">WOOOT</div>\n```\n[View in browser](http://prinzhorn.github.io/skrollr/examples/docu/1.html)\n\n##### Lessons learned\n\n* Skrollr ensures that you can actually scroll down 500 pixels or more, even if there's not enough content. You can suppress this by using the `forceHeight` option.\n* You can't use `#00f` or `#0000ff`. You need to use `rgb` or `hsl` and explicitly decide which color space you want because they result in different animations (HSL is much cooler most of the time). Don't worry, the IE plugin teaches IE < 9 to display `rgb` and `hsl` correctly.\n\n#### Now let's do a barrel roll at the same time\n\n```html\n<div data-0=\"background-color:rgb(0,0,255);transform:rotate(0deg);\" data-500=\"background-color:rgb(255,0,0);transform:rotate(360deg);\">WOOOT</div>\n```\n[View in browser](http://prinzhorn.github.io/skrollr/examples/docu/2.html)\n\n##### Lessons learned\n\n* Skrollr handles all these nasty CSS prefixes for you. Just -moz-relax and get yourself a cup of -webkit-coffee.\n\n#### Now let the rotation bounce like it were a hip-hop video\n\n```html\n<div data-0=\"background-color:rgb(0,0,255);transform[bounce]:rotate(0deg);\" data-500=\"background-color:rgb(255,0,0);transform[bounce]:rotate(360deg);\">WOOOT</div>\n```\n[View in browser](http://prinzhorn.github.io/skrollr/examples/docu/3.html)\n\n#### Lessons learned\n\n* Skrollr allows non-linear animations. The so called *easing functions* can be used per-property by putting them in square brackets behind the property. There's a built-in list of easing functions (see below in the [JavaScript](#javascript) section) and you can use your own functions by using the `easings` options.\n\nNow you may have noticed that using `500` as a keyframe position is kind of random and the look depends on your browser size.\n\n#### Let's have the animation end when the top of the element reaches the top of the viewport (element leaves the viewport)\n\n```html\n<div data-0=\"background-color:rgb(0,0,255);transform[bounce]:rotate(0deg);\" data-top=\"background-color:rgb(255,0,0);transform[bounce]:rotate(360deg);\">WOOOT</div>\n```\n[View in browser](http://prinzhorn.github.io/skrollr/examples/docu/4.html)\n\n##### Lessons learned\n\n* Skrollr keyframes can either be [absolute](#absolute-mode-or-document-mode) or [relative](#relative-mode-or-viewport-mode).\n\nThat's the end of this short intro. The following sections will explain some more things in detail.\n\nIf you're not a fan of `data-attributes` or if you're planning a big website where you want a better and more flexible structure, take a look at [skrollr-stylesheets](https://github.com/Prinzhorn/skrollr-stylesheets).\n\nMobile support\n-----\nStarting with version 0.5.0 skrollr officially supports mobile browsers including Android and iOS. Furthermore, mobile support has been rewritten from scratch for skrollr 0.6.0.\n\n### The Problem with mobile and the solution\n\n(If you're not interested in the details, just scroll down a bit to see what you need to do for mobile support.)\n\nSome words on why this is an important milestone and why others failed: Mobile browsers try to save battery wherever they can. That's why mobile browsers delay the execution of JavaScript while you are scrolling. iOS in particular does this very aggressively and completely stops JavaScript. In short, that's the reason why many scrolling libraries either don't work on mobile devices or they come with their own scrollbar which is a usability nightmare on desktop. It was an important requirement while I developed skrollr that I don't force you to scroll the way I want it. skrollr on desktop uses a native scrollbar and you can scroll the way you want to (keyboard, mouse, etc.).\n\nYou just told me it doesn't work on mobile, but why does it? The answer is simple. When using skrollr on mobile you don't actually scroll. When detecting a mobile browser, skrollr disables native scrolling and instead listens for touch events and moves the content (more specific the `#skrollr-body` element) using CSS transforms.\n\n### What you need in order to support mobile browsers\n\nStarting with skrollr 0.6.0 there's just one thing you need to do: Include an element on your page with the id `skrollr-body`. That's the element we move in order to fake scrolling. The only case where you don't need a `#skrollr-body` is when using `position:fixed` exclusively. In fact, the skrollr website doesn't include a `#skrollr-body` element. If you need both fixed and non-fixed (i.e. static) elements, put the static ones inside the `#skrollr-body` element.\n\nOr to put it differently: On mobile the `skrollr-body` element is moved using CSS transforms. You can't have `position:fixed` or `background-attachment:fixed` inside elements which use CSS transforms as per CSS spec (http://meyerweb.com/eric/thoughts/2011/09/12/un-fixing-fixed-elements-with-css-transforms/). That's why those elements need to be **outside** of the `skrollr-body` element.\n\nThe `skrollr-body` element might be configured within the [init-options](#skrollrinitoptions).\n\nAMD\n---\n\nStarting with `0.6.22` there's experimental AMD support. Please note that only skrollr core has AMD support so far. We will update the plugins in the future.\n\n```js\nrequire(['skrollr'], function(skrollr){\n\tskrollr.init();\n});\n```\n\nAbsolute vs relative mode\n-----\n\nBeing only able to define key frames in absolute values is simply insufficient for some cases. For example, if you don't know exactly where an element will be in the document. That's why there are two modes for key frames, namely `absolute` and `relative` mode.\n\n### absolute mode (or document mode)\n\nThe key frames are defined as absolute values describing how much the **document** has been scrolled down.\n\nThe syntax is `data-[offset]-[anchor]`, where `offset` can be any integer (0 is default) and `anchor` can be either `start` (default) or `end`. Either `offset` or `anchor` can be omitted in some situations. Here are some examples of key frames and their meaning.\n\n* `data-0` = `data-start` = `data-0-start`: When the scroll top is 0.\n* `data-100` = `data-100-start`: When the scroll top is 100.\n* `data--100` = `data--100-start`: When the scroll top is -100 (sounds like nonsense, but keep in mind that interpolation will be relative to this point).\n* `data-end` = `data-0-end`: When offset is 0, but counting from the bottom of the document instead of from the top. In short: when you reach the bottom of the page.\n* `data-100-end`: 100px before we reach the bottom.\n* `data--100-end`: 100px after we reach the bottom (again, it's up to you whether you need it).\n\n### relative mode (or viewport mode)\n\nInstead of defining key frames relative to the **document** (i.e. absolute), we are able to define them depending on the position of any element in relation to the **viewport**.\n\nThe syntax is `data-[offset]-(viewport-anchor)-[element-anchor]`, where `offset` can again be any integer and defaults to 0. Both `viewport-anchor` (mandatory) and `element-anchor` (optional) can be one of `top`, `center` or `bottom`. If `element-anchor` is omitted, the value of `viewport-anchor` will be taken (just like with background-position). Here are some examples of key frames and their meaning.\n\n* `data-top` = `data-0-top` = `data-top-top` = `data-0-top-top`: When the element's top is aligned with the top of the viewport.\n* `data-100-top` = `data-100-top-top`: When the element's top is 100px above the top of the viewport.\n* `data--100-top` = `data--100-top-top`: When the element's top is 100px below the top of the viewport.\n* `data-top-bottom `= `data-0-top-bottom`: When the bottom of the element is at the top of the viewport (it's just not visible).\n* `data-center-center` = `data-0-center-center`: When the element is at the center of the viewport.\n* `data-bottom-center` = `data-0-bottom-center`: When the element's center is at the bottom of the viewport, thus the upper half of the element is visible.\n\nBy default the keyframes are triggered by the position of the element where the keyframes are described.  However there are times when the position of a second element should trigger the first element's keyframes.  The  `data-anchor-target` attribute can be used in these cases.  The `data-anchor-target` attribute accepts any CSS selector and the position of the first element on the page matching the selector will be used to trigger keyframes on the element where the attribute is defined. `data-anchor-target` requires IE 8 or greater.\n\nExamples: `<div `data-anchor-target=\"#foo\"`>`  will have it's keyframes tiggered by  the position of the `#foo element`.  Any CSS selector can be used, i.e  `data-anchor-target=\".bar:not(.bacon) ~ span > a[href]\"`\n\n**Note**: If you need to support IE 7, then you may only use IDs as `anchor-target`s, i.e. `#foo`. The IE plugin maps `querySelector` to `getElementById`.\n\nHere's an infographic for better understanding of anchors (click to open PDF):\n\n[![Anchors Guide](https://raw.github.com/Prinzhorn/skrollr/master/guide/anchor-position-guide.png)](https://raw.github.com/Prinzhorn/skrollr/master/guide/anchor-position-guide.pdf)\n\n**Important**: All those values will be calculated up-front and transformed to `absolute` mode. So if either the element's box height changes (height, padding, border) or the elements position within the document, you probably need to call `refresh()` (see documentation in JavaScript section below). **Window resizing is handled by skrollr.**\n\n\nPercentage offsets\n------------------\n\nAll offsets shown above are given in absolute pixel values, e.g. `data-300` for `300px` from the top or `data-13-top-bottom` for a `13px` offset to the `top-bottom` anchor. As of skrollr `0.6.13` you can also have offsets as percentages of the viewport by appending a `p` to the number. For example `data-75p` for when you scrolled down `75%` of the viewport or `data-10p-center` to have a `10%` offset from the `center` anchor.\n\n\nHash navigation\n-----\n\nCheck out the [skrollr-menu](https://github.com/Prinzhorn/skrollr-menu) plugin.\n\nWorking with constants\n-----\n\nI was lying to you. The syntax for absolute mode is not `data-[offset]-[anchor]` and for relative mode it's not `data-[offset]-(viewport-anchor)-[element-anchor]`. In both cases, `offset` can be preceded by a constant which can be passed to the `init` method. The name of the constant needs to be preceded with an underscore.\n\nExample:\n\n```js\nskrollr.init({\n\tconstants: {\n\t\tfoobar: 1337\n\t}\n});\n```\n\n```html\n<div data-_foobar=\"left:0%;\" data-_foobar--100=\"left:50%;\" data-_foobar-100=\"left:100%;\"></div>\n\n<!--Equal to-->\n\n<div data-1337=\"left:0%;\" data-1237=\"left:50%;\" data-1437=\"left:100%;\"></div>\n```\n\nValid characters for a constant are `[a-z0-9_]`.\n\nDynamic constants\n-----------------\n\nStarting with skrollr `0.6.19` the word \"constants\" doesn't quite fit anymore, but who cares.\n\nYou can now use functions and percentages as constants. They are automatically evaluated when the window is resized or if you call `refresh`.\n\n```js\nskrollr.init({\n\tconstants: {\n\t\tfoo: function() {\n\t\t\t//Note: you can access the skrollr instance with `this` for things like `this.relativeToAbsolute`\n\t\t\treturn Math.random() * 100;//trolololol\n\t\t},\n\t\tvh: '100p'\n\t}\n});\n```\n\nCSS classes\n-----\n\nskrollr will add a `skrollr` class to the `HTML` element when calling `init` and will remove a `no-skrollr` class if present. Additionally, it will add a `skrollr-desktop` or `skrollr-mobile` class depending on which it detects. This allows fallback CSS rules to create a good user experience on unsupported devices or when JavaScript or skrollr are disabled.\n\nAll elements under skrollr's control (elements with appropriate data-attributes) will get the `skrollable` class. In addition, we add either the `skrollable-before`, `skrollable-between` **or** `skrollable-after` class, depending on whether the current scroll position is before, between or after the first/last (smallest/largest) keyframe of an element.\n\nAnimating attributes\n--------------------\n\nStarting with skrollr 0.6.24 you can also animate attribute and not just style properties. This is especially a big thing because in the SVG world many properties are implemented as attributes and not in CSS. Animating an attribute couldn't be simplier, just prefix the property with an `@` symbol!\n\n```html\n<polygon\n\tpoints='426,720   -200,720   -200,0   955,0'\n\tdata-0=\"@points:426,720   -200,720   -200,0   955,0\"\n\tdata-500=\"@points:380,720   -200,720   -200,0   1302,0\">\n</polygon>\n```\n\nNote: as always, skrollr doesn't do any magic. It doesn't understand what a polygon or points are. It's only interpolating numbers, that's it. So make sure you have the same number of numbers in your keyframes (8 in this case).\n\nFilling missing values\n-----\n\nImagine the following animation\n\n```html\n<div data-100=\"left:0%;\" data-200=\"top:0%;\" data-300=\"left:50%;\" data-400=\"top:50%;\"></div>\n```\n\nOne could expect `left` to have a value of `25%` at keyframe `200`. That is **not** the case. By design, skrollr only interpolates values between key frames which are direct **neighbors**. What actually happens is that skrollr internally fills out all holes once from left and then from right. So the above is equivalent to\n\n```html\n<div data-100=\"left:0%;top:0%;\" data-200=\"left:0%;top:0%;\" data-300=\"left:50%;top:0%;\" data-400=\"left:50%;top:50%;\"></div>\n```\n\nPreventing interpolation\n-----\n\nThe reason why skrollr is so lightweight and powerful is because it literally interpolates **every** number it can find. If you want to prevent some side effect, you can suppress interpolation for a specific value by prepending an exclamation point.\n\nExample:\n```html\n<!-- This will get your image url f***** up because there's no \"kitten1.4561799.jpg\" and the like -->\n<div data-0=\"background-image:url(kitten1.jpg);\" data-100=\"background-image:url(kitten2.jpg)\"></div>\n\n<!-- Better -->\n<div data-0=\"background-image:!url(kitten1.jpg);\" data-100=\"background-image:!url(kitten2.jpg)\"></div>\n```\n\n**Note:** The values for both keyframes (if they contain a number) need to be prefixed if you want to avoid skrollr throwing an exception at you!\n\nLimitations\n-----\n\nThere are some limitations of skrollr you should be aware of.\n\n* All numeric values have to have the same unit, even `0` needs a unit. It's not possible to animate from `5%` to `100px`. skrollr won't complain, but results are undefined.\n* Animations between values which are composed of multiple numeric values like `margin:0 0 0 0;` are only possible for the same number of values. `margin:0px 0px 0px 0px;` to `margin:0px 100px 50px 3px;` is fine, but not `margin:10px;` to `margin:5px 10px;`.\n* Animations between CSS transforms only work when they use the same functions in same order. From `rotate(0deg) scale(1)` to `rotate(1000deg) scale(5)` is fine.\n* Color animations don't support named values like \"red\" or hex values like \"#ff0000\". Instead, you have to use `rgb()`, `rgba()`, `hsl()` and `hsla()`. Don't worry, there's a skrollr plugin for IE < 9 to support `hsl()` (without \"a\"!) and to fall rgba back to rgb.\n* Color animations only work for same color functions. `hsl()` to `hsl()` or `hsla()` is fine, but not `rgb()` to `hsl()`. Which makes sense, because animating from the same colors in rgb space and in hsl space results in different animations (hsl gives you the nice rainbow stuff).\n\nBut feel free to send in a pull request to fix any of them. Just keep in mind that keeping skrollr as lightweight as possible has high priority.\n\nJavaScript\n====\n\nOn the JavaScript part there's not much to do (you can, if you want to!). So if you only know CSS and HTML, perfect.\n\nskrollr.init([options])\n-----\n\nAll there is to do is to call `skrollr.init([options]);` which returns an instance of the singleton skrollr class. Subsequent calls to `init()` will just return the same skrollr instance again.\n\nPossible options for `init()` are\n\n### smoothScrolling=true\n\nSmooth scrolling smoothens your animations. When you scroll down 50 pixels, the animations will transition instead of jumping to the new position.\n\nThe global setting can be overridden per element by setting `data-smooth-scrolling` to `on` or `off`.\n\n### smoothScrollingDuration=200\n\nThe number of milliseconds the animations run after the scroll position changed the last time.\n\n### constants={}\n\nAn object containing integers as values. The keys can contain `[a-z0-9_]`. They *do not* need a leading underscore.\n\nExample: `data-_myconst-200` and `skrollr.init({constants: {myconst: 300}})` result in `data-500`.\n\n### scale=1\n\nBy default, skrollr uses the largest key frame and makes document height + viewport height this high, thus the max possible scroll top offset. If your animation runs too fast or too slow, just adjust the scale value.\n\n`scale` only affects keyframes in absolute mode.\n\nWhen `forceHeight` is set to false, `scale` is ignored.\n\n`scale` affects `constants` as well.\n\n`scale` does only affect key frames in absolute mode, e.g. `data-500` but not `data-top`.\n\n###forceHeight=true\n\n`true`: Make sure the document is high enough that all key frames fit inside. Example: You use `data-1000`, but the content only makes the document 500px high. skrollr will ensure that you can scroll down the whole 1000px. Or if you use relative mode, e.g. `data-top-bottom`, skrollr will make sure the bottom of the element can actually reach the top of the viewport.\n\n`false`: Don't manipulate the document and just keep the natural scrollbar.\n\n###mobileCheck=function() {...}\n\nThis option allows you to pass a function to skrollr overwriting the check for mobile devices. The function should return `true` when mobile scrolling should be used and `false` if not.\n\nThe default looks like this\n\n```js\nfunction() {\n\treturn (/Android|iPhone|iPad|iPod|BlackBerry/i).test(navigator.userAgent || navigator.vendor || window.opera);\n}\n```\n\n### mobileDeceleration=0.004\n\nThe amount of deceleration for momentum scrolling on mobile devices. This options tells skrollr how fast or slow you want the scrolling to stop after the user lifted his finger.\n\nSet it to `1` to disable momentum scrolling.\n\n### skrollrBody='skrollr-body'\n\nThis option allows you to override the default id-selector used for supporting mobile browsers. It might come in handy when the element in question already has a assigned id or if you would like to define more then one skrollrBody depending on preceding JavaScript-logic.\n\n### edgeStrategy='set'\n\nThis option specifies how to handle animations when the scroll position is outside the range on the keyframes (i.e. before the first or after the last keyframe).\n\nOne of three options are possible\n\n* `set` _(default)_: When before/after the first/last keyframe, apply the styles of the first/last keyframe to the element.\n* `ease`: Same as set, but the values will be transformed using the given easing function.\n* `reset`: When before/after the first/last keyframe, apply the styles which the element had before skrollr did anything. This means resetting the class attribute as well as removing all styles which have been applied to the `style` property. This means the element won't have any `skrollable-*` CSS classes.\n\nExample:\n\nGiven the following element with two keyframes\n\n```html\n<div data-1000=\"left:0%;top:0%;\" data-2000=\"left:50%;top:100%;\" style=\"left:-100%;\" class=\"section\"></div>\n```\n\nand the following easing function which always returns `0.5` (I know it's pointless, but it's just an example. A real world example would be an easing function that represents a curve and starts somewhere between `0` and `1`, but not at `1`)\n\n```js\nfunction(p) {\n\treturn 0.5;\n}\n```\n\nand imagine the scrollbar is at `237`, which is below the first keyframe which is at `1000`.\n\n* `set` will result in `<div style=\"left:0%;top:0%;\" class=\"section skrollable skrollable-before\"></div>` which is plain `data-1000`.\n* `ease` will result in `<div style=\"left:25%;top:50%;\" class=\"section skrollable skrollable-before\"></div>` which is `0.5 * data-1000`.\n* `reset` will result in `<div style=\"left:-100%;\" class=\"section\"></div>` which is what the element originally had. Note how `top` is missing.\n\n\n### beforerender\n\nA listener function that gets called each time right before we render everything. The function will be passed an object with the following properties:\n\n```js\n{\n\tcurTop: 10, //the current scroll top offset\n\tlastTop: 0, //the top value of last time\n\tmaxTop: 100, //the max value you can scroll to. curTop/maxTop will give you the current progress.\n\tdirection: 'down' //either up or down\n}\n```\n\nReturning `false` will prevent rendering.\n\n### render\n\nA listener function that gets called right after we finished rendering everything. The function will be passed with the same parameters as `beforerender`.\n\nExample\n\n```js\nskrollr.init({\n\trender: function(data) {\n\t\t//Log the current scroll position.\n\t\tconsole.log(data.curTop);\n\t}\n});\n```\n\n### keyframe\n\n**Experimental**\n\nIn order to receive `keyframe` events from an element, add the `data-emit-events` attribute to the element. The keyframe function will be called with three arguments\n\n1. The `element` that passed the keyframe.\n2. The `name` of the keyframe, camel-cased (see example).\n3. The `direction` the user is scrolling.\n\nExample:\n\n```html\n<div\n\tdata-500=\"...\"\n\tdata-top-bottom=\"...\"\n\tdata-_offset-center=\"...\"\n\tdata-emit-events\n>\n\tSome content\n</div>\n```\n\n```js\nskrollr.init({\n\tkeyframe: function(element, name, direction) {\n\t\t//name will be one of data500, dataTopBottom, data_offsetCenter\n\t}\n});\n```\n\nNote: this is experimental, expect the API to change! Originally I wanted to emit the events right on the element, so you could do this\n\n```js\n//Wouldn't this be nice?\ndocument.querySelector('#foo').addEventListener('skrollr.dataTopBottom.up', function() {\n\t//#foo just passed the data-top-bottom keyframe while scrolling up\n}, false)\n```\n\nbut IE.\n\n### easing\n\nAn object defining new easing functions or overwriting existing ones. Easing functions get just one argument, which is a value between 0 and 1 (the percentage of how much of the animation is done). The function should return a value between 0 and 1 as well, but for some easings a value less than 0 or greater than 1 is just fine.\n\nAn easing function basically transforms the timeline for an animation. When the animation should be 50% done, you can transform it to be 90% done or whatever your function does.\n\nExample:\n\n```js\nskrollr.init({\n\teasing: {\n\t\t//This easing will sure drive you crazy\n\t\twtf: Math.random,\n\t\tinverted: function(p) {\n\t\t\treturn 1 - p;\n\t\t}\n\t}\n});\n```\n\nYou can now use the easing functions like any other.\n\nskrollr ships with some built in functions:\n\n* linear: The default. Doesn't need to be specified.\n* quadratic: To the power of two. So 50% looks like 25%.\n* cubic: To the power of three. So 50% looks like 12.5%\n* begin/end: They always return 0 or 1 respectively. No animation.\n* swing: Slow at the beginning and accelerates at the end. So 25% -> 14.6%, 50% -> 50%, 75% -> 85.3%\n* sqrt: Square root. Starts fast, slows down at the end.\n* outCubic\n* bounce: Bounces like a ball. See https://www.desmos.com/calculator/tbr20s8vd2 for a graphical representation.\n\n**Custom easing**\n\n* Use [this](http://www.timotheegroleau.com/Flash/experiments/easing_function_generator.htm) generator\n* Insert the given polynomial coeficients instead of t, t2, t3, t4 and t5\n```\nt5*(p*p*p*p*p) + t4*(p*p*p*p) + t3*(p*p*p) + t2*(p*p) + t*p\n```\nExample shown with the values for easeOutElasticBig\n```\neaseOutElasticBig: function(p) {\n  return 56*(p*p*p*p*p) - 175*(p*p*p*p) + 200*(p*p*p) - 100*(p*p) + 20*p;\n}\n```\n\nskrollr.get()\n-----\n\nReturns the skrollr instance if `init()` has been called before or `undefined`.\n\nPublic API\n-----\n\nCalling `init()` returns an instance of skrollr which exposes a public api.\n\n### refresh([elements])\n\nReparses all given `elements`. You can pass a single element or an array-like element (Array, NodeList or jQuery object)\n\nUseful when\n\n* Elements in `relative` mode change and need to be updated.\n* Data-attributes are manipulated dynamically.\n* New elements are added to the DOM and should be controlled by skrollr.\n\nWhen no `elements` are given, all elements in the document will be parsed again. In fact, when calling `skrollr.init()` skrollr uses `refresh()` without parameters internally.\n\nTime consuming operations, should not be called on every rendering.\n\n### relativeToAbsolute(element, viewportAnchor, elementAnchor)\n\nReturns an integer which represents the absolute scroll position which correlates to the relative anchor.\n\n`element` must be a DOM element.\n\n`viewportAnchor` and `elementAnchor` must be one of `top`, `center` or `bottom`\n\nExample:\n\n```js\nvar offset = s.relativeToAbsolute(document.getElementById('foo'), 'top', 'bottom');\n\n//offset contains the scroll position at which #foo's bottom is at the top of the viewport.\n//If you now use setScrollTop(offset) or animateTo(offset) #foo's bottom will be perfectly aligned with the top of the viewport. Yay.\n```\n\n### getScrollTop()\n\nReturns the current scroll offset in pixels. Normalizes different browser quirks and handles mobile scrolling.\n\n### getMaxScrollTop()\n\nReturns the number of pixels that can be scrolled down in total. If `forceHeight` is true, that's usually the largest keyframe. Otherwise it's the height of the document minus the viewport height.\n\n### setScrollTop(top[, force = false])\n\nSets the top offset using `window.scrollTo(0, top)` on desktop or updating the internal state in case of mobile scrolling.\n\nWhen `force` is set to `true`, skrollr will jump to the new position without any kind of transition. By default, the global `smoothScrolling` setting applies.\n\n### isMobile()\n\nReturns if skrollr runs in mobile mode (see also `mobileCheck` option).\n\n### animateTo(top[, options])\n\nAnimates the scroll position from current position to `top`. Possible `options` are\n\n#### duration\n\nHow long the animation should run in milliseconds. The default is `1000` or one second.\n\n#### easing\n\nThe name of an easing function. The same functions can be used as for property animations. Default is `linear` .\n\n#### done\n\nA function to be called after the animation finished. When you pass a `top` value, which is the same as the current, then the function will be called immediately. The function gets a boolean argument `interrupted` which indicates if the animation was interrupted by `stopAnimateTo` or finished to the end.\n\n### stopAnimateTo()\n\nStops the animation and calls the `done` callback passing `true` as `interrupted` arguments.\n\n### isAnimatingTo()\n\nReturns if an animation caused by animateTo is running.\n\n### on(name, fn)\n\nSet a listener function for one of the events described in the options section (beforerender, render, keyframe). Only one listener can be attached at a given time. This method overwrites the current listener, if any.\n\n### off(name)\n\nRemoves the listener for the given event.\n\n\n### destroy()\n\nDestroys skrollr. All `class` and `style` attributes will be set to the values they had before.\n\nChangelog\n=====\n\nSee [HISTORY.md](https://github.com/Prinzhorn/skrollr/blob/master/HISTORY.md).\n"
        },
        {
          "name": "bower.json",
          "type": "blob",
          "size": 0.50390625,
          "content": "{\n  \"name\": \"skrollr\",\n  \"homepage\": \"http://prinzhorn.github.io/skrollr/\",\n  \"authors\": [\n    \"Alexander Prinzhorn\"\n  ],\n  \"description\": \"Stand-alone parallax scrolling library for mobile (Android + iOS) and desktop\",\n  \"main\": \"src/skrollr.js\",\n  \"moduleType\": [\n    \"globals\"\n  ],\n  \"keywords\": [\n    \"parallax\",\n    \"scroll\",\n    \"animation\",\n    \"html5\",\n    \"css3\",\n    \"transition\"\n  ],\n  \"license\": \"MIT\",\n  \"ignore\": [\n    \"**/.*\",\n    \"node_modules\",\n    \"bower_components\",\n    \"test\",\n    \"tests\"\n  ]\n}\n"
        },
        {
          "name": "dist",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "guide",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.html",
          "type": "blob",
          "size": 4.7724609375,
          "content": "<!DOCTYPE html>\n<html>\n<head>\n\t<meta charset=\"utf-8\">\n\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\">\n\n\t<title>skrollr - parallax scrolling for the masses</title>\n\n\t<link href=\"examples/fixed-positioning.css\" rel=\"stylesheet\" type=\"text/css\" />\n\t<link href=\"examples/main.css\" rel=\"stylesheet\" type=\"text/css\" />\n</head>\n\n<body>\n\t<div id=\"bg1\" data-0=\"background-position:0px 0px;\" data-end=\"background-position:-500px -10000px;\"></div>\n\t<div id=\"bg2\" data-0=\"background-position:0px 0px;\" data-end=\"background-position:-500px -8000px;\"></div>\n\t<div id=\"bg3\" data-0=\"background-position:0px 0px;\" data-end=\"background-position:-500px -6000px;\"></div>\n\n\t<div id=\"progress\" data-0=\"width:0%;background:hsl(200, 100%, 50%);\" data-end=\"width:100%;background:hsl(920, 100%, 50%);\"></div>\n\n\t<div id=\"intro\" data-0=\"opacity:1;top:3%;transform:rotate(0deg);transform-origin:0 0;\" data-500=\"opacity:0;top:-10%;transform:rotate(-90deg);\">\n\t\t<h1><a href=\"https://github.com/Prinzhorn/skrollr\">skrollr</a></h1>\n\t\t<h2>parallax scrolling for the masses</h2>\n\t\t<p>let's get scrollin' ;-)</p>\n\t\t<p class=\"arrows\">▼&nbsp;▼&nbsp;▼</p>\n\t</div>\n\n\t<div id=\"transform\" data-500=\"transform:scale(0) rotate(0deg);\" data-1000=\"transform:scale(1) rotate(1440deg);opacity:1;\" data-1600=\"\" data-1700=\"transform:scale(5) rotate(3240deg);opacity:0;\">\n\t\t<h2>transform</h2>\n\t\t<p>scale, skew and rotate the sh** out of any element</p>\n\t</div>\n\n\t<div id=\"properties\" data-1700=\"top:100%;\" data-2200=\"top:0%;\" data-3000=\"display:block;\" data-3700=\"top:-100%;display:none;\">\n\t\t<h2>all numeric properties</h2>\n\t\t<p>width, height, padding, font-size, z-index, blah blah blah</p>\n\t</div>\n\n\t<div id=\"easing_wrapper\" data-0=\"display:none;\" data-3900=\"display:block;\" data-4900=\"background:rgba(0, 0, 0, 0);color[swing]:rgb(0,0,0);\" data-5900=\"background:rgba(0,0,0,1);color:rgb(255,255,255);\" data-10000=\"top:0%;\" data-12000=\"top:-100%;\">\n\t\t<div id=\"easing\" data-3900=\"left:100%\" data-4600=\"left:25%;\">\n\t\t\t<h2>easing?</h2>\n\t\t\t<p>sure.</p>\n\t\t\t<p>let me dim the <span data-3900=\"\" data-4900=\"color[swing]:rgb(0,0,0);\" data-5900=\"color:rgb(255,255,0);\">lights</span> for this one...</p>\n\t\t\t<p data-5900=\"opacity:0;font-size:100%;\" data-6500=\"opacity:1;font-size:150%;\">you can set easings for each property and define own easing functions</p>\n\t\t</div>\n\n\t\t<div class=\"drop\" data-6500=\"left:15%;bottom:100%;\" data-9500=\"bottom:0%;\">linear</div>\n\t\t<div class=\"drop\" data-6500=\"left:25%;bottom[quadratic]:100%;\" data-9500=\"bottom:0%;\">quadratic</div>\n\t\t<div class=\"drop\" data-6500=\"left:35%;bottom[cubic]:100%;\" data-9500=\"bottom:0%;\">cubic</div>\n\t\t<div class=\"drop\" data-6500=\"left:45%;bottom[swing]:100%;\" data-9500=\"bottom:0%;\">swing</div>\n\t\t<div class=\"drop\" data-6500=\"left:55%;bottom[WTF]:100%;\" data-9500=\"bottom:0%;\">WTF</div>\n\t\t<div class=\"drop\" data-6500=\"left:65%;bottom[inverted]:100%;\" data-9500=\"bottom:0%;\">inverted</div>\n\t\t<div class=\"drop\" data-6500=\"left:75%;bottom[bounce]:100%;\" data-9500=\"bottom:0%;\">bounce</div>\n\t</div>\n\n\t<div id=\"download\" data-10000=\"top[cubic]:100%;border-radius[cubic]:0em;background:rgb(0,50,100);border-width:0px;\" data-12000=\"top:10%;border-radius:2em;background:rgb(190,230,255);border-width:10px;\">\n\t\t<h2>the end</h2>\n\t\t<p>by the way, you can also animate colors (you did notice this, didn't you?)</p>\n\t\t<p><strong>Now get this thing on <a href=\"https://github.com/Prinzhorn/skrollr\">GitHub</a> and spread the word, it's open source!</strong> <a href=\"https://twitter.com/share\" class=\"twitter-share-button\" data-url=\"http://prinzhorn.github.com/skrollr/\" data-via=\"Prinzhorn\">Tweet</a>\n\t\t<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=\"//platform.twitter.com/widgets.js\";fjs.parentNode.insertBefore(js,fjs);}}(document,\"script\",\"twitter-wjs\");</script></p>\n\t\t<p>Check out more <a href=\"https://github.com/Prinzhorn/skrollr/tree/master/examples#examples\">examples</a>.</p>\n\t\t<p>Handcrafted by <a href=\"https://twitter.com/Prinzhorn\" class=\"twitter-follow-button\" data-show-count=\"false\">Follow @Prinzhorn</a>\n\t\t<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=\"//platform.twitter.com/widgets.js\";fjs.parentNode.insertBefore(js,fjs);}}(document,\"script\",\"twitter-wjs\");</script></p>\n\t</div>\n\n\t<div id=\"scrollbar\" data-0=\"top:0%;margin-top:2px;\" data-end=\"top:100%;margin-top:-52px;\"></div>\n\n\t<script type=\"text/javascript\" src=\"dist/skrollr.min.js\"></script>\n\n\t<!--[if lt IE 9]>\n\t<script type=\"text/javascript\" src=\"../skrollr-ie/dist/skrollr.ie.min.js\"></script>\n\t<![endif]-->\n\n\t<script type=\"text/javascript\">\n\tvar s = skrollr.init({\n\t\tedgeStrategy: 'set',\n\t\teasing: {\n\t\t\tWTF: Math.random,\n\t\t\tinverted: function(p) {\n\t\t\t\treturn 1-p;\n\t\t\t}\n\t\t}\n\t});\n\t</script>\n</body>\n\n</html>\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.951171875,
          "content": "{\n  \"name\": \"skrollr\",\n  \"title\": \"skrollr\",\n  \"description\": \"Stand-alone parallax scrolling library with zero dependencies.\",\n  \"version\": \"0.6.30\",\n  \"homepage\": \"https://github.com/Prinzhorn/skrollr\",\n  \"author\": {\n    \"name\": \"Alexander Prinzhorn\",\n    \"email\": \"alexander@prinzhorn.it\",\n    \"url\": \"http://www.prinzhorn.it/\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/Prinzhorn/skrollr.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/Prinzhorn/skrollr/issues\"\n  },\n  \"licenses\": [\n    {\n      \"type\": \"MIT\",\n      \"url\": \"https://github.com/Prinzhorn/skrollr/blob/master/LICENSE.txt\"\n    }\n  ],\n  \"main\": \"dist/skrollr.min.js\",\n  \"engines\": {\n    \"node\": \"0.10.x\"\n  },\n  \"scripts\": {\n    \"test\": \"grunt travis --verbose\"\n  },\n  \"devDependencies\": {\n    \"grunt-cli\": \"~0.1.7\",\n    \"grunt\": \"~0.4.1\",\n    \"grunt-contrib-uglify\": \"~0.2.0\",\n    \"grunt-contrib-jshint\": \"~0.3.0\",\n    \"grunt-contrib-qunit\": \"~0.2.0\"\n  },\n  \"keywords\": []\n}\n"
        },
        {
          "name": "shim.html",
          "type": "blob",
          "size": 0.72265625,
          "content": "<!DOCTYPE html>\n<html>\n<head class=\"no-skrollr\">\n\t<meta charset=\"utf-8\">\n\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, user-scalable=no\">\n\n\t<title>Your title</title>\n</head>\n\n<body>\n\t<div id=\"skrollr-body\">\n\t<!--\n\t\tPut all your elements here.\n\t-->\n\t</div>\n\n\t<script type=\"text/javascript\" src=\"dist/skrollr.min.js\"></script>\n\n\t<!--[if lt IE 9]>\n\t<script type=\"text/javascript\" src=\"dist/skrollr.ie.min.js\"></script>\n\t<![endif]-->\n\n\t<script type=\"text/javascript\">\n\tvar s = skrollr.init();\n\n\t//Or you may call the init-function at some other point. You could for example use an image preloader.\n\t/*\n\twindow.onload = function() {\n\t\t//Calling it twice doesn't hurt.\n\t\tskrollr.init();\n\t};\n\t*/\n\t</script>\n</body>\n\n</html>"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}