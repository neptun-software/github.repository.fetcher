{
  "metadata": {
    "timestamp": 1736709621261,
    "page": 61,
    "hasNextPage": false,
    "endCursor": "Y3Vyc29yOjY0",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "sovereign/sovereign",
      "stars": 10425,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".ansible-lint",
          "type": "blob",
          "size": 0.0849609375,
          "content": "use_default_rules: true\nskip_list:\n- '405'  # Remote package tasks should have a retry\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1259765625,
          "content": ".vagrant/provisioners/ansible/inventory/vagrant_ansible_inventory\n.vagrant/machines\n.vagrant/rgloader\n*.log\n*.pyc\n*.retry\nsecret\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.244140625,
          "content": "language: python\npython: \"2.7\"\ncache:\n  directories:\n    - $HOME/.cache/pip\ninstall:\n  - pip install -r requirements.txt\n  - pip install -r test-requirements.txt\nscript:\n  - ansible-playbook --syntax-check -i hosts site.yml\n  - ansible-lint site.yml\n"
        },
        {
          "name": ".vagrant",
          "type": "tree",
          "content": null
        },
        {
          "name": "AUTHORS.md",
          "type": "blob",
          "size": 0.330078125,
          "content": "# Authors\n\nOriginated by [Alex Payne](https://al3x.net) ([@al3x](https://github.com/al3x)).\n\nMajor contributions from [Luke Cyca](http://lukecyca.com/) ([@lukecyca](https://github.com/lukecyca)).\n\nOther talented and generous contributors to Sovereign can be viewed [on GitHub](https://github.com/sovereign/sovereign/graphs/contributors).\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.7373046875,
          "content": "# Contributing to Sovereign\n\n## Intellectual property\n\nMake sure you agree with the license (GPLv3). See [LICENSE.md](./LICENSE.md) for details.\n\nCode that is committed to the master branch should work with both Debian 8 \"Jessie\" and Ubuntu 16.04 LTS \"Xenial\".\n\n## Development environment\n\nYou'll want to set up a [local development environment](https://github.com/sovereign/sovereign/wiki/Development-Environment) so that you don't have to test on a remote server.\n\n## Module design principles\n\nSovereign is an Ansible playbook that uses the modules in this repository to configure a server. Modules should conform to the following design principles.\n\n### Naming\n\nModules should be named after the software they add (as opposed to the functionality they provide). Soverign is currently inconsistent on this. For example, there are the `ircbouncer` and `blog` modules, but there are also the `owncloud` and `tarsnap` modules. Please name modules after the software used, though, so that it is possible to provide alternatives for functionality.\n\n### Making decisions\n\nA module exists to make decisions about how a service should be installed and configured. Make these decisions and minimize or eliminate configuration options exposed to the user. When in doubt, make a decision, and if the community feedback is vocal enough, only then expose an option.\n\n### Idempotency\n\nA module must be idempotent. If it's run once or many times, the result should be the same. This means that in some cases the user will be left with post-installation finalization work to do. Post-install finalization should be reduced or eliminated if possible, but not at the cost of idempotency.\n\n### Databases\n\nA module that introduces a database-backed service must use PostgreSQL if possible.  In order to minimize server load of having two database servers running, MySQL should not be used unless absolutely necessary. Sqlite may be used if persistent data requirements are bounded for all users and are within Sqlite's design limits.\n\n### Registrations\n\nA module should configure the server in a way that minimizes the data posted to other services. This includes names, email addresses, and other personally-identifable information. \n\n### Upgrades\n\nA module's design should anticipate upgrades to the services it provides. Configuration files that work for the current version of the service may become out of date on future versions of the service and lead to difficult-to-find bugs. This also introduces work for maintaining the module.  Whenever possible, design the module to use the service to handle initial configuration and upgrades.\n\n### Performance\n\nA module should be designed and implemented to run as quickly as possible in order to minimize the time to run an entire playbook or even the role itself. A small performance penalty here and a small penalty there eventually adds to a very slow deployment system. Performance is important.\n\n### Tests\n\nA module should have tests. TBD: more about this and what the expectation is.\n\n### Design document\n\nA module should have a design description explaining the approach to implementing a service and what tradeoffs were made when choosing the design that was implemented. Do not leave this for comments in a pull request as we want this close to the code for the sake of future maintainers.\n\nThe design description should be succinct and to the point. Assume the reader is familiar with Sovereign but not your module. As a rule of thumb, 500-1000 words is about the right length for a module design description.\n\n## Design checklist\n\nConsider the following checklist when reviewing a module's design.\n\n- Does the role create data on the server that is impossible or difficult to reproduce, e.g., private keys? If so, update the tarsnap role to include precious data in backups.\n- Does the role need an SSL certificate for a new subdomain?  If so, update the letsencrypt tasklist in the common role.\n- Does the role add an Apache virtual site?  If so, has somebody knowledgable in Apache configuration and security reviewed the configuration?\n- Does README.md need to be updated based on new or changed finalization instructions?\n\n## Submitting pull requests\n\nVerify that your changes pass [ansible-lint](https://github.com/willthames/ansible-lint) before submitting a pull request.\n\nUse good commit practices to document your changes. Don't assume the developer reviewing your commits has access to GitHub. The developer could be a future maintainer in a different environment. Similarly, as you address feedback on the pull request, do not assume the reviewer has access to GitHub.\n\nWhen you issue a pull request, please specify what distribution you used for testing (if any).  Code that is committed to the master branch should work with both Debian 7 and Ubuntu 14.04 LTS.  Support for Debian 8 is coming.\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 0.94921875,
          "content": "# License\n\nOriginal content is [GPLv3](http://gplv3.fsf.org/), the same license used by [Ansible](http://www.ansible.com/):\n\n```\nSovereign: a set of Ansible playbooks to configure a personal cloud.\n\nCopyright (C) 2015 Alex Payne and contributors\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n```\n\nAll files and templates based on third-party software should be considered under their respective licenses.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.8564453125,
          "content": "[![Build Status](https://travis-ci.org/sovereign/sovereign.svg?branch=master)](https://travis-ci.org/sovereign/sovereign)\n[![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/460/badge)](https://bestpractices.coreinfrastructure.org/projects/460)\n\nIntroduction\n============\n\nSovereign is a set of [Ansible](http://ansible.com) playbooks that you can use to build and maintain your own [personal cloud](http://www.urbandictionary.com/define.php?term=clown%20computing) based entirely on open source software, so you’re in control.\n\nIf you’ve never used Ansible before, you might find these playbooks useful to learn from, since they show off a fair bit of what the tool can do.\n\nThe original author's [background and motivations](https://github.com/sovereign/sovereign/wiki/Background-and-Motivations) might be of interest. tl;dr: frustrations with Google Apps and concerns about privacy and long-term support.\n\nSovereign offers useful cloud services while being reasonably secure and low-maintenance. Use it to set up your server, SSH in every couple weeks, but mostly forget about it.\n\nServices Provided\n-----------------\n\nWhat do you get if you point Sovereign at a server? All kinds of good stuff!\n\n-   [IMAP](https://en.wikipedia.org/wiki/Internet_Message_Access_Protocol) over SSL via [Dovecot](http://dovecot.org/), complete with full text search provided by [Solr](https://lucene.apache.org/solr/).\n-   [POP3](https://en.wikipedia.org/wiki/Post_Office_Protocol) over SSL, also via Dovecot\n-   [SMTP](https://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol) over SSL via Postfix, including a nice set of [DNSBLs](https://en.wikipedia.org/wiki/DNSBL) to discard spam before it ever hits your filters.\n-   Virtual domains for your email, backed by [PostgreSQL](http://www.postgresql.org/).\n-   Spam fighting via [Rspamd](https://www.rspamd.com/).\n-   Mail server verification using [DKIM](http://www.dkim.org/) and [DMARC](http://www.dmarc.org/) so the Internet knows your mailserver is legit.\n-   Secure on-disk storage for email and more via [EncFS](http://www.arg0.net/encfs).\n-   Webmail via [Roundcube](http://www.roundcube.net/).\n-   Mobile push notifications via [Z-Push](http://z-push.sourceforge.net/soswp/index.php?pages_id=1&t=home).\n-   Email client [automatic configuration](https://developer.mozilla.org/en-US/docs/Mozilla/Thunderbird/Autoconfiguration).\n-   Jabber/[XMPP](http://xmpp.org/) instant messaging via [Prosody](http://prosody.im/).\n-   An RSS Reader via [Selfoss](http://selfoss.aditu.de/).\n-   [CalDAV](https://en.wikipedia.org/wiki/CalDAV) and [CardDAV](https://en.wikipedia.org/wiki/CardDAV) to keep your calendars and contacts in sync, via [ownCloud](http://owncloud.org/).\n-   Your own private storage cloud via [ownCloud](http://owncloud.org/).\n-   Your own VPN server via [OpenVPN](http://openvpn.net/index.php/open-source.html).\n-   An IRC bouncer via [ZNC](http://wiki.znc.in/ZNC).\n-   [Monit](http://mmonit.com/monit/) to keep everything running smoothly (and alert you when it’s not).\n-   [collectd](http://collectd.org/) to collect system statistics.\n-   Web hosting (ex: for your blog) via [Apache](https://www.apache.org/).\n-   Firewall management via [Uncomplicated Firewall (ufw)](https://wiki.ubuntu.com/UncomplicatedFirewall).\n-   Intrusion prevention via [fail2ban](http://www.fail2ban.org/) and rootkit detection via [rkhunter](http://rkhunter.sourceforge.net).\n-   SSH configuration preventing root login and insecure password authentication\n-   [RFC6238](http://tools.ietf.org/html/rfc6238) two-factor authentication compatible with [Google Authenticator](http://en.wikipedia.org/wiki/Google_Authenticator) and various hardware tokens\n-   Nightly backups to [Tarsnap](https://www.tarsnap.com/).\n-   Git hosting via [cgit](http://git.zx2c4.com/cgit/about/) and [gitolite](https://github.com/sitaramc/gitolite).\n-   Read-it-later via [Wallabag](https://www.wallabag.org/)\n-   A bunch of nice-to-have tools like [mosh](http://mosh.mit.edu) and [htop](http://htop.sourceforge.net) that make life with a server a little easier.\n\nDon’t want one or more of the above services? Comment out the relevant role in `site.yml`. Or get more granular and comment out the associated `include:` directive in one of the playbooks.\n\nUsage\n=====\n\nWhat You’ll Need\n----------------\n\n1.  A VPS (or bare-metal server if you wanna ball hard). My VPS is hosted at [Linode](http://www.linode.com/?r=45405878277aa04ee1f1d21394285da6b43f963b). You’ll probably want at least 512 MB of RAM between Apache, Solr, and PostgreSQL. Mine has 1024.\n2.  [64-bit Debian 8.3](http://www.debian.org/) or an equivalent Linux distribution. (You can use whatever distro you want, but deviating from Debian will require more tweaks to the playbooks. See Ansible’s different [packaging](http://docs.ansible.com/ansible/list_of_packaging_modules.html) modules.)\n3.  A [Tarsnap](http://www.tarsnap.com) account with some credit in it. You could comment this out if you want to use a different backup service. Consider paying your hosting provider for backups or using an additional backup service for redundancy.\n\nYou do not need to acquire an SSL certificate.  The SSL certificates you need will be obtained from [Let's Encrypt](https://letsencrypt.org/) automatically when you deploy your server.\n\n\nInstallation\n------------\n\n## On the remote server\n\nThe following steps are done on the remote server by `ssh`ing into it and running these commands.\n\n### 1. Install required packages e.g `aptitude` is required on Debian\n\n    apt-get install sudo python\n\n### 2. Get a Tarsnap machine key\n\nIf you haven’t already, [download and install Tarsnap](https://www.tarsnap.com/download.html), or use `brew install tarsnap` if you use [Homebrew](http://brew.sh).\n\nCreate a new machine key for your server:\n\n    tarsnap-keygen --keyfile roles/tarsnap/files/decrypted_tarsnap.key --user me@example.com --machine example.com\n\nDownload a copy of this key and keep it somewhere safe!  There's no point having backups if you can't retrieve them when needed.\n\n### 3. Prep the server\n\nFor goodness sake, change the root password:\n\n    passwd\n\nCreate a user account for Ansible to do its thing through:\n\n    useradd --create-home deploy\n    passwd deploy\n\nAuthorize your ssh key if you want passwordless ssh login (optional):\n\n    mkdir /home/deploy/.ssh\n    chmod 700 /home/deploy/.ssh\n    nano /home/deploy/.ssh/authorized_keys\n    chmod 400 /home/deploy/.ssh/authorized_keys\n    chown deploy:deploy /home/deploy -R\n    echo 'deploy ALL=(ALL) NOPASSWD: ALL' > /etc/sudoers.d/deploy\n\nYour new account will be automatically set up for passwordless `sudo`. Or you can just add your `deploy` user to the sudo group.\n\n    adduser deploy sudo\n\n## On your local machine\n\nAnsible (the tool setting up your server) runs locally on your computer and sends commands to the remote server. Download this repository somewhere on your machine, either through `Clone or Download > Download ZIP` above, `wget`, or `git` as below\n    \n    git clone https://github.com/sovereign/sovereign.git\n\n### 4. Configure your installation\n\nModify the settings in the `group_vars/sovereign` folder to your liking. If you want to see how they’re used in context, just search for the corresponding string.\nAll of the variables in `group_vars/sovereign` must be set for sovereign to function.\n\nFor Git hosting, copy your public key into place:\n\n\tcp ~/.ssh/id_rsa.pub roles/git/files/gitolite.pub\n\nFinally, replace the `host.example.net` in the file `hosts`. If your SSH daemon listens on a non-standard port, add a colon and the port number after the IP address. In that case you also need to add your custom port to the task `Set firewall rules for web traffic and SSH` in the file `roles/common/tasks/ufw.yml`.\n\n### 5. Set up DNS\n\nIf you’ve just bought a new domain name, point it at [Linode’s DNS Manager](https://library.linode.com/dns-manager) or similar. Most VPS services (and even some domain registrars) offer a managed DNS service that you can use for this at no charge. If you’re using an existing domain that’s already managed elsewhere, you can probably just modify a few records.\n\nCreate `A` or `CNAME` records which point to your server's IP address:\n\n* `example.com`\n* `mail.example.com`\n* `www.example.com` (for Web hosting)\n* `autoconfig.example.com` (for email client automatic configuration)\n* `read.example.com` (for Wallabag)\n* `news.example.com` (for Selfoss)\n* `cloud.example.com` (for ownCloud)\n* `git.example.com` (for cgit)\n\n### 6. Run the Ansible Playbooks\n\nFirst, make sure you’ve [got Ansible 1.9.3+ installed](http://docs.ansible.com/intro_installation.html#getting-ansible).\n\nTo run the whole dang thing:\n\n    ansible-playbook -i ./hosts --ask-sudo-pass site.yml\n    \nIf you chose to make a passwordless sudo deploy user, you can omit the `--ask-sudo-pass` argument.\n\nTo run just one or more piece, use tags. I try to tag all my includes for easy isolated development. For example, to focus in on your firewall setup:\n\n    ansible-playbook -i ./hosts --tags=ufw site.yml\n\nYou might find that it fails at one point or another. This is probably because something needs to be done manually, usually because there’s no good way of automating it. Fortunately, all the tasks are clearly named so you should be able to find out where it stopped. I’ve tried to add comments where manual intervention is necessary.\n\nThe `dependencies` tag just installs dependencies, performing no other operations. The tasks associated with the `dependencies` tag do not rely on the user-provided settings that live in `group_vars/sovereign`. Running the playbook with the `dependencies` tag is particularly convenient for working with Docker images.\n\n### 7. Finish DNS set-up\n\nCreate an `MX` record for `example.com` which assigns `mail.example.com` as the domain’s mail server.\n\nTo ensure your emails pass DKIM checks you need to add a `txt` record. The name field will be `default._domainkey.EXAMPLE.COM.` The value field contains the public key used by DKIM. The exact value needed can be found in the file `/var/lib/rspamd/dkim/EXAMPLE.COM.default.txt`. It will look something like this:\n\n    v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDKKAQfMwKVx+oJripQI+Ag4uTwYnsXKjgBGtl7Tk6UMTUwhMqnitqbR/ZQEZjcNolTkNDtyKZY2Z6LqvM4KsrITpiMbkV1eX6GKczT8Lws5KXn+6BHCKULGdireTAUr3Id7mtjLrbi/E3248Pq0Zs39hkDxsDcve12WccjafJVwIDAQAB\n\nFor DMARC you'll also need to add a `txt` record. The name field should be `_dmarc.EXAMPLE.COM` and the value should be `v=DMARC1; p=none`. More info on DMARC can be found [here](https://dmarc.org).\n\nSet up SPF and reverse DNS [as per this post](http://sealedabstract.com/code/nsa-proof-your-e-mail-in-2-hours/). Make sure to validate that it’s all working, for example, by sending an email to <a href=\"mailto:check-auth@verifier.port25.com\">check-auth@verifier.port25.com</a> and reviewing the report that will be emailed back to you.\n\n### 8. Miscellaneous Configuration\n\nSign in to the ZNC web interface and set things up to your liking. It isn’t exposed through the firewall, so you must first set up an SSH tunnel:\n\n\tssh deploy@example.com -L 6643:localhost:6643\n\nThen proceed to http://localhost:6643 in your web browser.\n\nSimilarly, to access the server monitoring page, use another SSH tunnel:\n\n    ssh deploy@example.com -L 2812:localhost:2812\n\nAgain proceeding to http://localhost:2812 in your web browser.\n\nFinally, sign into ownCloud with a new administrator account to set it\nup. You should select PostgreSQL as the configuration backend. Use\n`owncloud` as the database user and the database name. For the\ndatabase password ansible has created a set of random passwords for\neach service and stores them in your local folder `secret`, use the\none in the file `owncloud_db_password`.\n\nHow To Use Your New Personal Cloud\n----------------------------------\n\nWe’re collecting known-good client setups [on our wiki](https://github.com/sovereign/sovereign/wiki/Usage).\n\nTroubleshooting\n---------------\n\nIf you run into an errors, please check the [wiki page](https://github.com/sovereign/sovereign/wiki/Troubleshooting). If the problem you encountered, is not listed, please go ahead and [create an issue](https://github.com/sovereign/sovereign/issues/new). If you already have a bugfix and/or workaround, just put them in the issue and the wiki page.\n\n### Reboots\n\nYou will need to manually enter the password for any encrypted volumes on reboot. This is not Sovereign-specific, but rather a function of how EncFS works. This will necessitate SSHing into your machine after reboot, or accessing it via a console interface if one is available to you. Once you're in, run this:\n\n    encfs /encrypted /decrypted --public\n\nIt is possible that some daemons may need to be restarted after you enter your password for the encrypted volume(s). Some services may stall out while looking for resources that will only be available once the `/decrypted` volume is available and visible to daemon user accounts.\n\nIRC\n===\n\nAsk questions and provide feedback in `#sovereign` on [Freenode](http://freenode.net).\n"
        },
        {
          "name": "Vagrantfile",
          "type": "blob",
          "size": 1.330078125,
          "content": "# -*- mode: ruby -*-\n\nVagrant.configure('2') do |config|\n  config.vm.hostname = 'sovereign.local'\n  config.vm.network 'private_network', ip: '172.16.100.2'\n\n  config.vm.provision \"shell\", inline: <<-SHELL\n    apt-get install -y \\\n      python \\\n      python-apt\n  SHELL\n\n  config.vm.provision :ansible do |ansible|\n    ansible.playbook = 'site.yml'\n    ansible.host_key_checking = false\n    ansible.extra_vars = { ansible_ssh_user: 'vagrant', testing: true }\n    ansible.groups = {\n      \"testing\" => [\"jessie\", \"xenial\"]\n    }\n\n    # ansible.tags = ['blog']\n    # ansible.skip_tags = ['openvpn']\n    # ansible.verbose = 'vvvv'\n  end\n\n  config.vm.provider :virtualbox do |v|\n    v.memory = 512\n  end\n\n  config.vm.provider :vmware_fusion do |v|\n    v.vmx['memsize'] = '512'\n  end\n\n  # vagrant-cachier\n  #\n  # Install the plugin by running: vagrant plugin install vagrant-cachier\n  # More information: https://github.com/fgrehm/vagrant-cachier\n  if Vagrant.has_plugin? 'vagrant-cachier'\n    config.cache.enable :apt\n    config.cache.scope = :box\n  end\n\n  # Debian 8 64-bit (officially supported)\n  config.vm.define 'jessie', primary: true do |jessie|\n    jessie.vm.box = 'debian/contrib-jessie64'\n  end\n\n  # Ubuntu 16.04 (LTS) 64-bit (currently unavailable)\n  config.vm.define 'xenial', autostart: false do |xenial|\n    xenial.vm.box = 'ubuntu/xenial64'\n  end\nend\n"
        },
        {
          "name": "filter_plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "group_vars",
          "type": "tree",
          "content": null
        },
        {
          "name": "hosts",
          "type": "blob",
          "size": 0.15234375,
          "content": "[sovereign]\n# hosts in the `sovereign` group  use vars defined in `group_vars/sovereign`\n# put your host's IP address or domain name below\nhost.example.net\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.0234375,
          "content": "ansible~=2.6.14\npasslib\n"
        },
        {
          "name": "roles",
          "type": "tree",
          "content": null
        },
        {
          "name": "site.yml",
          "type": "blob",
          "size": 0.384765625,
          "content": "---\n# This is the top-level playbook that defines our entire infrastructure.\n\n- hosts: all\n  user: deploy\n  become: True\n  gather_facts: True\n\n  roles:\n    - common\n    - mailserver\n    - webmail\n    - blog\n    - ircbouncer\n    - xmpp\n    - owncloud\n    - vpn\n    - tarsnap\n    - news\n    - git\n    - readlater\n    - monitoring  # Monitoring role should be last. See roles/monitoring/README.md\n"
        },
        {
          "name": "test-requirements.txt",
          "type": "blob",
          "size": 0.01953125,
          "content": "ansible-lint~=4.0.0\n"
        },
        {
          "name": "tests.py",
          "type": "blob",
          "size": 13.0556640625,
          "content": "import unittest\nfrom time import sleep\nimport uuid\nimport socket\nimport requests\nimport os\n\nTEST_SERVER = 'sovereign.local'\nTEST_ADDRESS = 'sovereign@sovereign.local'\nTEST_PASSWORD = 'foo'\nCA_BUNDLE = 'roles/common/files/wildcard_ca.pem'\n\nsocket.setdefaulttimeout(5)\nos.environ['REQUESTS_CA_BUNDLE'] = CA_BUNDLE\n\nclass SSHTests(unittest.TestCase):\n    def test_ssh_banner(self):\n        \"\"\"SSH is responding with its banner\"\"\"\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.connect((TEST_SERVER, 22))\n        data = s.recv(1024)\n        s.close()\n\n        self.assertRegexpMatches(data, '^SSH-2.0-OpenSSH')\n\n\nclass WebTests(unittest.TestCase):\n    def test_blog_http(self):\n        \"\"\"Blog is redirecting to https\"\"\"\n        # FIXME: requests won't verify sovereign.local with *.sovereign.local cert\n        r = requests.get('http://' + TEST_SERVER, verify=False)\n\n        # We should be redirected to https\n        self.assertEquals(r.history[0].status_code, 301)\n        self.assertEquals(r.url, 'https://' + TEST_SERVER + '/')\n\n        # 403 - Since there is no documents in the blog directory\n        self.assertEquals(r.status_code, 403)\n\n    def test_mail_autoconfig_http_and_https(self):\n        \"\"\"Email autoconfiguration XML file is accessible over both HTTP and HTTPS\"\"\"\n\n        # Test getting the file over HTTP and HTTPS\n        for proto in ['http', 'https']:\n            r = requests.get(proto + '://autoconfig.' + TEST_SERVER + '/mail/config-v1.1.xml')\n\n            # 200 - We should see the XML file\n            self.assertEquals(r.status_code, 200)\n            self.assertIn('application/xml', r.headers['Content-Type'])\n            self.assertIn('clientConfig version=\"1.1\"', r.content)\n\n    def test_webmail_http(self):\n        \"\"\"Webmail is redirecting to https and displaying login page\"\"\"\n        r = requests.get('http://mail.' + TEST_SERVER)\n\n        # We should be redirected to https\n        self.assertEquals(r.history[0].status_code, 301)\n        self.assertEquals(r.url, 'https://mail.' + TEST_SERVER + '/')\n\n        # 200 - We should be at the login page\n        self.assertEquals(r.status_code, 200)\n        self.assertIn(\n            'Welcome to Roundcube Webmail',\n            r.content\n        )\n\n    def test_zpush_http_unauthorized(self):\n        r = requests.get('http://mail.' + TEST_SERVER + '/Microsoft-Server-ActiveSync')\n\n        # We should be redirected to https\n        self.assertEquals(r.history[0].status_code, 301)\n        self.assertEquals(r.url, 'https://mail.' + TEST_SERVER + '/Microsoft-Server-ActiveSync')\n\n        # Unauthorized\n        self.assertEquals(r.status_code, 401)\n\n    def test_zpush_https(self):\n        r = requests.post('https://mail.' + TEST_SERVER + '/Microsoft-Server-ActiveSync',\n                          auth=('sovereign@sovereign.local', 'foo'),\n                          params={\n                              'DeviceId': '1234',\n                              'DeviceType': 'testbot',\n                              'Cmd': 'Ping',\n                          })\n\n        self.assertEquals(r.headers['content-type'],\n                          'application/vnd.ms-sync.wbxml')\n        self.assertEquals(r.headers['ms-server-activesync'],\n                          '14.0')\n\n    def test_owncloud_http(self):\n        \"\"\"ownCloud is redirecting to https and displaying login page\"\"\"\n        r = requests.get('http://cloud.' + TEST_SERVER)\n\n        # We should be redirected to https\n        self.assertEquals(r.history[0].status_code, 301)\n        self.assertEquals(r.url, 'https://cloud.' + TEST_SERVER + '/')\n\n        # 200 - We should be at the login page\n        self.assertEquals(r.status_code, 200)\n        self.assertIn(\n            'ownCloud',\n            r.content\n        )\n\n    def test_selfoss_http(self):\n        \"\"\"selfoss is redirecting to https and displaying login page\"\"\"\n        r = requests.get('http://news.' + TEST_SERVER)\n\n        # We should be redirected to https\n        self.assertEquals(r.history[0].status_code, 301)\n        self.assertEquals(r.url, 'https://news.' + TEST_SERVER + '/')\n\n        # 200 - We should be at the login page\n        self.assertEquals(r.status_code, 200)\n        self.assertIn(\n            'selfoss',\n            r.content\n        )\n        self.assertIn(\n            'login',\n            r.content\n        )\n\n    def test_cgit_http(self):\n        \"\"\"CGit web interface is displaying home page\"\"\"\n        r = requests.get('http://git.' + TEST_SERVER, verify=False)\n\n        # We should be redirected to https\n        self.assertEquals(r.history[0].status_code, 301)\n        self.assertEquals(r.url, 'https://git.' + TEST_SERVER + '/')\n\n        # 200 - We should be at the repository page\n        self.assertEquals(r.status_code, 200)\n        self.assertIn(\n            'git repository',\n            r.content\n        )\n\n\nclass IRCTests(unittest.TestCase):\n    def test_irc_auth(self):\n        \"\"\"ZNC is accepting encrypted logins\"\"\"\n        import ssl\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        ssl_sock = ssl.wrap_socket(s, ca_certs=CA_BUNDLE, cert_reqs=ssl.CERT_REQUIRED)\n        ssl_sock.connect((TEST_SERVER, 6697))\n\n        # Check the encryption parameters\n        cipher, version, bits = ssl_sock.cipher()\n        self.assertEquals(cipher, 'AES256-GCM-SHA384')\n        self.assertEquals(version, 'TLSv1/SSLv3')\n        self.assertEquals(bits, 256)\n\n        # Login\n        ssl_sock.send('CAP REQ sasl multi-prefix\\r\\n')\n        ssl_sock.send('PASS foo\\r\\n')\n        ssl_sock.send('NICK sovereign\\r\\n')\n        ssl_sock.send('USER sovereign 0 * Sov\\r\\n')\n\n        # Read until we see the ZNC banner (or timeout)\n        while 1:\n            r = ssl_sock.recv(1024)\n            if 'Connected to ZNC' in r:\n                break\n\n\ndef new_message(from_email, to_email):\n    \"\"\"Creates an email (headers & body) with a random subject\"\"\"\n    from email.mime.text import MIMEText\n    msg = MIMEText('Testing')\n    msg['Subject'] = uuid.uuid4().hex[:8]\n    msg['From'] = from_email\n    msg['To'] = to_email\n    return msg.as_string(), msg['subject']\n\n\nclass MailTests(unittest.TestCase):\n    def assertIMAPReceived(self, subject):\n        \"\"\"Connects with IMAP and asserts the existence of an email, then deletes it\"\"\"\n        import imaplib\n\n        sleep(1)\n\n        # Login to IMAP\n        m = imaplib.IMAP4_SSL(TEST_SERVER, 993)\n        m.login(TEST_ADDRESS, TEST_PASSWORD)\n        m.select()\n\n        # Assert the message exists\n        typ, data = m.search(None, '(SUBJECT \\\"{}\\\")'.format(subject))\n        self.assertTrue(len(data[0].split()), 1)\n\n        # Delete it & logout\n        m.store(data[0].strip(), '+FLAGS', '\\\\Deleted')\n        m.expunge()\n        m.close()\n        m.logout()\n\n    def assertPOP3Received(self, subject):\n        \"\"\"Connects with POP3S and asserts the existence of an email, then deletes it\"\"\"\n        import poplib\n\n        sleep(1)\n\n        # Login to POP3\n        mail = poplib.POP3_SSL(TEST_SERVER, 995)\n        mail.user(TEST_ADDRESS)\n        mail.pass_(TEST_PASSWORD)\n\n        # Assert the message exists\n        num = len(mail.list()[1])\n        resp, text, octets = mail.retr(num)\n        self.assertTrue(\"Subject: \" + subject in text)\n\n        # Delete it and log out\n        mail.dele(num)\n        mail.quit()\n\n    def test_imap_requires_ssl(self):\n        \"\"\"IMAP without SSL is NOT available\"\"\"\n        import imaplib\n\n        with self.assertRaisesRegexp(socket.timeout, 'timed out'):\n            imaplib.IMAP4(TEST_SERVER, 143)\n\n    def test_pop3_requires_ssl(self):\n        \"\"\"POP3 without SSL is NOT available\"\"\"\n        import poplib\n\n        with self.assertRaisesRegexp(socket.timeout, 'timed out'):\n            poplib.POP3(TEST_SERVER, 110)\n\n    def test_smtps(self):\n        \"\"\"Email sent from an MUA via SMTPS is delivered\"\"\"\n        import smtplib\n        msg, subject = new_message(TEST_ADDRESS, 'root@sovereign.local')\n        s = smtplib.SMTP(TEST_SERVER, 587)\n        s.starttls()\n        s.login(TEST_ADDRESS, TEST_PASSWORD)\n        s.sendmail(TEST_ADDRESS, ['root@sovereign.local'], msg)\n        s.quit()\n        self.assertIMAPReceived(subject)\n\n    def test_smtps_delimiter_to(self):\n        \"\"\"Email sent to address with delimiter is delivered\"\"\"\n        import smtplib\n        msg, subject = new_message(TEST_ADDRESS, 'root+foo@sovereign.local')\n        s = smtplib.SMTP(TEST_SERVER, 587)\n        s.starttls()\n        s.login(TEST_ADDRESS, TEST_PASSWORD)\n        s.sendmail(TEST_ADDRESS, ['root+foo@sovereign.local'], msg)\n        s.quit()\n        self.assertIMAPReceived(subject)\n\n    def test_smtps_requires_auth(self):\n        \"\"\"SMTPS with no authentication is rejected\"\"\"\n        import smtplib\n        s = smtplib.SMTP(TEST_SERVER, 587)\n        s.starttls()\n\n        with self.assertRaisesRegexp(smtplib.SMTPRecipientsRefused, 'Access denied'):\n            s.sendmail(TEST_ADDRESS, ['root@sovereign.local'], 'Test')\n\n        s.quit()\n\n    def test_smtp(self):\n        \"\"\"Email sent from an MTA is delivered\"\"\"\n        import smtplib\n        msg, subject = new_message('someone@example.com', TEST_ADDRESS)\n        s = smtplib.SMTP(TEST_SERVER, 25)\n        s.sendmail('someone@example.com', [TEST_ADDRESS], msg)\n        s.quit()\n        self.assertIMAPReceived(subject)\n\n    def test_smtp_tls(self):\n        \"\"\"Email sent from an MTA via SMTP+TLS is delivered\"\"\"\n        import smtplib\n        msg, subject = new_message('someone@example.com', TEST_ADDRESS)\n        s = smtplib.SMTP(TEST_SERVER, 25)\n        s.starttls()\n        s.sendmail('someone@example.com', [TEST_ADDRESS], msg)\n        s.quit()\n        self.assertIMAPReceived(subject)\n\n    def test_smtps_headers(self):\n        \"\"\"Email sent from an MUA has DKIM and TLS headers\"\"\"\n        import smtplib\n        import imaplib\n\n        # Send a message to root\n        msg, subject = new_message(TEST_ADDRESS, 'root@sovereign.local')\n        s = smtplib.SMTP(TEST_SERVER, 587)\n        s.starttls()\n        s.login(TEST_ADDRESS, TEST_PASSWORD)\n        s.sendmail(TEST_ADDRESS, ['root@sovereign.local'], msg)\n        s.quit()\n\n        sleep(1)\n\n        # Get the message\n        m = imaplib.IMAP4_SSL(TEST_SERVER, 993)\n        m.login(TEST_ADDRESS, TEST_PASSWORD)\n        m.select()\n        _, res = m.search(None, '(SUBJECT \\\"{}\\\")'.format(subject))\n        _, data = m.fetch(res[0], '(RFC822)')\n\n        self.assertIn(\n            'DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=sovereign.local;',\n            data[0][1]\n        )\n\n        self.assertIn(\n            'ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits)',\n            data[0][1]\n        )\n\n        # Clean up\n        m.store(res[0].strip(), '+FLAGS', '\\\\Deleted')\n        m.expunge()\n        m.close()\n        m.logout()\n\n    def test_smtp_headers(self):\n        \"\"\"Email sent from an MTA via SMTP+TLS has TLS headers\"\"\"\n        import smtplib\n        import imaplib\n\n        # Send a message to root\n        msg, subject = new_message('someone@example.com', TEST_ADDRESS)\n        s = smtplib.SMTP(TEST_SERVER, 25)\n        s.starttls()\n        s.sendmail('someone@example.com', [TEST_ADDRESS], msg)\n        s.quit()\n\n        sleep(1)\n\n        # Get the message\n        m = imaplib.IMAP4_SSL(TEST_SERVER, 993)\n        m.login(TEST_ADDRESS, TEST_PASSWORD)\n        m.select()\n        _, res = m.search(None, '(SUBJECT \\\"{}\\\")'.format(subject))\n        _, data = m.fetch(res[0], '(RFC822)')\n\n        self.assertIn(\n            'ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits)',\n            data[0][1]\n        )\n\n        # Clean up\n        m.store(res[0].strip(), '+FLAGS', '\\\\Deleted')\n        m.expunge()\n        m.close()\n        m.logout()\n\n    def test_pop3s(self):\n        \"\"\"Connects with POP3S and asserts the existance of an email, then deletes it\"\"\"\n        import smtplib\n        msg, subject = new_message(TEST_ADDRESS, 'root@sovereign.local')\n        s = smtplib.SMTP(TEST_SERVER, 587)\n        s.starttls()\n        s.login(TEST_ADDRESS, TEST_PASSWORD)\n        s.sendmail(TEST_ADDRESS, ['root@sovereign.local'], msg)\n        s.quit()\n        self.assertPOP3Received(subject)\n\n\nclass XMPPTests(unittest.TestCase):\n    def test_xmpp_c2s(self):\n        \"\"\"Prosody is listening on 5222 for clients and requiring TLS\"\"\"\n\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.connect((TEST_SERVER, 5222))\n\n        # Based off http://wiki.xmpp.org/web/Programming_Jabber_Clients\n        s.send(\"<stream:stream xmlns:stream='http://etherx.jabber.org/streams' \"\n               \"xmlns='jabber:client' to='sovereign.local' version='1.0'>\")\n\n        data = s.recv(1024)\n        s.close()\n\n        self.assertRegexpMatches(\n            data,\n            \"<starttls xmlns='urn:ietf:params:xml:ns:xmpp-tls'><required/></starttls>\"\n        )\n\n    def test_xmpp_s2s(self):\n        \"\"\"Prosody is listening on 5269 for servers\"\"\"\n\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.connect((TEST_SERVER, 5269))\n\n        # Base off http://xmpp.org/extensions/xep-0114.html\n        s.send(\"<stream:stream xmlns:stream='http://etherx.jabber.org/streams' \"\n               \"xmlns='jabber:component:accept' to='sovereign.local'>\")\n\n        data = s.recv(1024)\n        s.close()\n\n        self.assertRegexpMatches(\n            data,\n            \"from='sovereign.local'\"\n        )\n"
        }
      ]
    }
  ]
}