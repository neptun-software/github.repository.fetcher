{
  "metadata": {
    "timestamp": 1736709507910,
    "page": 9,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "munificent/craftinginterpreters",
      "stars": 9292,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.279296875,
          "content": "# Intermediate and built stuff.\n.sass-cache/\n/build/\n/gen/\nclox\n*.class\nexercises/chapter01_introduction/3/linked_list\n.idea/\n\n# I keep a scratch file at the top level to try stuff out.\ntemp.lox\n\n# XCode user-specific stuff.\nxcuserdata/\n\n# Dart stuff.\n/tool/.dart_tool/\n/tool/.packages\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 4.291015625,
          "content": "Copyright (c) 2015 Robert Nystrom\n\n---------------------------------- Commentary ----------------------------------\n\nThe licensing story for this repository is a little complex. Here's my\nmotivation:\n\n* I want you to get as much use out of the material here as possible. I wrote\n  this book to help you, and I don't want you to be encumbered when it comes to\n  making the most of it. That's also why I put it online for free.\n\n* With my previous book, collaboration on GitHub was immesensely helpful. I want\n  to ensure people can fork the repo, send me fixes, etc. without violating the\n  license or feeling weird.\n\n* When it comes to code, I'm completely comfortable with people redistributing,\n  remixing, changing, whatever with it. I've been using the MIT license for open\n  source stuff for decades.\n\n  This book contains two complete interpreters and I would be delighted for them\n  to be the jumping-off point for any number of real full-featured language\n  implementations.\n\n* When it comes to my prose, illustrations, and the visual design of the site,\n  that feels a little more, I don't know, *me* than the code. The words are in\n  my voice, the drawings are literally my handwriting, and the look of the site\n  is part of the book's and, by extension, my brand.\n\n  I feel weird thinking about someone, say taking one of the chapters and making\n  significant changes to it to fit their writing style while still having some\n  of it read like it came from me. Likewise, I'd be sad to see another site\n  online that looked exactly like mine because it reuses my stylesheets.\n\n* My previous book ended up being translated into several languages. I want to\n  be careful to not be so permissive that it prevents me from signing typical\n  contracts that give them exclusive translation rights to certain territories\n  and languages.\n\n* If I allow the prose and illustrations to be redistributed commercially, there\n  is nothing preventing someone from slapping together a cheap print or ebook\n  version of the book and putting it up for sale. I'm not too worried about my\n  own sales being undercut, but I very much want to avoid readers finding\n  themselves with a low quality book that they incorrectly think is from me.\n\n  I worked very hard on this book. I want you to get the best possible\n  experience.\n\nAll of this is way more complex than I'd like, especially since my brain isn't\nwired to care about intellectual property. I like thinking about making stuff,\nnot thinking about the legal rights around the stuff I made. (If your brain is\nwired to think about legal stuff and you see that I'm doing something dumb,\nplease do let me know.)\n\nThe best solution I've been able to come up with is to use two licenses:\n\n---------------------------------- License(s) ----------------------------------\n\nEach file in this repository falls under one of two licenses. Files whose\nextension is \".c\", \".dart\", \".h\", \".java\", or \".lox\" use the MIT license:\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to\n    deal in the Software without restriction, including without limitation the\n    rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n    sell copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in\n    all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n    IN THE SOFTWARE.\n\nAll other files, including (but not limited to) \".md\" (except for\n\"book/appendix-i.md\" which uses the MIT license above), \".png\", \".jpg\", \".html\",\n\".scss\", \".css\", and \".txt\" use this Creative Commons license:\n\n    Attribution-NonCommercial-NoDerivatives 4.0\n    International (CC BY-NC-ND 4.0)\n\n    https://creativecommons.org/licenses/by-nc-nd/4.0/\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 10.9755859375,
          "content": "BUILD_DIR := build\nTOOL_SOURCES := tool/pubspec.lock $(shell find tool -name '*.dart')\nBUILD_SNAPSHOT := $(BUILD_DIR)/build.dart.snapshot\nTEST_SNAPSHOT := $(BUILD_DIR)/test.dart.snapshot\n\ndefault: book clox jlox\n\n# Run dart pub get on tool directory.\nget:\n\t@ cd ./tool; dart pub get\n\n# Remove all build outputs and intermediate files.\nclean:\n\t@ rm -rf $(BUILD_DIR)\n\t@ rm -rf gen\n\n# Build the site.\nbook: $(BUILD_SNAPSHOT)\n\t@ dart $(BUILD_SNAPSHOT)\n\n# Run a local development server for the site that rebuilds automatically.\nserve: $(BUILD_SNAPSHOT)\n\t@ dart $(BUILD_SNAPSHOT) --serve\n\n$(BUILD_SNAPSHOT): $(TOOL_SOURCES)\n\t@ mkdir -p build\n\t@ echo \"Compiling Dart snapshot...\"\n\t@ dart --snapshot=$@ --snapshot-kind=app-jit tool/bin/build.dart >/dev/null\n\n# Run the tests for the final versions of clox and jlox.\ntest: debug jlox $(TEST_SNAPSHOT)\n\t@- dart $(TEST_SNAPSHOT) clox\n\t@ dart $(TEST_SNAPSHOT) jlox\n\n# Run the tests for the final version of clox.\ntest_clox: debug $(TEST_SNAPSHOT)\n\t@ dart $(TEST_SNAPSHOT) clox\n\n# Run the tests for the final version of jlox.\ntest_jlox: jlox $(TEST_SNAPSHOT)\n\t@ dart $(TEST_SNAPSHOT) jlox\n\n# Run the tests for every chapter's version of clox.\ntest_c: debug c_chapters $(TEST_SNAPSHOT)\n\t@ dart $(TEST_SNAPSHOT) c\n\n# Run the tests for every chapter's version of jlox.\ntest_java: jlox java_chapters $(TEST_SNAPSHOT)\n\t@ dart $(TEST_SNAPSHOT) java\n\n# Run the tests for every chapter's version of clox and jlox.\ntest_all: debug jlox c_chapters java_chapters compile_snippets $(TEST_SNAPSHOT)\n\t@ dart $(TEST_SNAPSHOT) all\n\n$(TEST_SNAPSHOT): $(TOOL_SOURCES)\n\t@ mkdir -p build\n\t@ echo \"Compiling Dart snapshot...\"\n\t@ dart --snapshot=$@ --snapshot-kind=app-jit tool/bin/test.dart clox >/dev/null\n\n# Compile a debug build of clox.\ndebug:\n\t@ $(MAKE) -f util/c.make NAME=cloxd MODE=debug SOURCE_DIR=c\n\n# Compile the C interpreter.\nclox:\n\t@ $(MAKE) -f util/c.make NAME=clox MODE=release SOURCE_DIR=c\n\t@ cp build/clox clox # For convenience, copy the interpreter to the top level.\n\n# Compile the C interpreter as ANSI standard C++.\ncpplox:\n\t@ $(MAKE) -f util/c.make NAME=cpplox MODE=debug CPP=true SOURCE_DIR=c\n\n# Compile and run the AST generator.\ngenerate_ast:\n\t@ $(MAKE) -f util/java.make DIR=java PACKAGE=tool\n\t@ java -cp build/java com.craftinginterpreters.tool.GenerateAst \\\n\t\t\tjava/com/craftinginterpreters/lox\n\n# Compile the Java interpreter .java files to .class files.\njlox: generate_ast\n\t@ $(MAKE) -f util/java.make DIR=java PACKAGE=lox\n\nrun_generate_ast = @ java -cp build/gen/$(1) \\\n\t\t\tcom.craftinginterpreters.tool.GenerateAst \\\n\t\t\tgen/$(1)/com/craftinginterpreters/lox\n\njava_chapters: split_chapters\n\t@ $(MAKE) -f util/java.make DIR=gen/chap04_scanning PACKAGE=lox\n\n\t@ $(MAKE) -f util/java.make DIR=gen/chap05_representing PACKAGE=tool\n\t$(call run_generate_ast,chap05_representing)\n\t@ $(MAKE) -f util/java.make DIR=gen/chap05_representing PACKAGE=lox\n\n\t@ $(MAKE) -f util/java.make DIR=gen/chap06_parsing PACKAGE=tool\n\t$(call run_generate_ast,chap06_parsing)\n\t@ $(MAKE) -f util/java.make DIR=gen/chap06_parsing PACKAGE=lox\n\n\t@ $(MAKE) -f util/java.make DIR=gen/chap07_evaluating PACKAGE=tool\n\t$(call run_generate_ast,chap07_evaluating)\n\t@ $(MAKE) -f util/java.make DIR=gen/chap07_evaluating PACKAGE=lox\n\n\t@ $(MAKE) -f util/java.make DIR=gen/chap08_statements PACKAGE=tool\n\t$(call run_generate_ast,chap08_statements)\n\t@ $(MAKE) -f util/java.make DIR=gen/chap08_statements PACKAGE=lox\n\n\t@ $(MAKE) -f util/java.make DIR=gen/chap09_control PACKAGE=tool\n\t$(call run_generate_ast,chap09_control)\n\t@ $(MAKE) -f util/java.make DIR=gen/chap09_control PACKAGE=lox\n\n\t@ $(MAKE) -f util/java.make DIR=gen/chap10_functions PACKAGE=tool\n\t$(call run_generate_ast,chap10_functions)\n\t@ $(MAKE) -f util/java.make DIR=gen/chap10_functions PACKAGE=lox\n\n\t@ $(MAKE) -f util/java.make DIR=gen/chap11_resolving PACKAGE=tool\n\t$(call run_generate_ast,chap11_resolving)\n\t@ $(MAKE) -f util/java.make DIR=gen/chap11_resolving PACKAGE=lox\n\n\t@ $(MAKE) -f util/java.make DIR=gen/chap12_classes PACKAGE=tool\n\t$(call run_generate_ast,chap12_classes)\n\t@ $(MAKE) -f util/java.make DIR=gen/chap12_classes PACKAGE=lox\n\n\t@ $(MAKE) -f util/java.make DIR=gen/chap13_inheritance PACKAGE=tool\n\t$(call run_generate_ast,chap13_inheritance)\n\t@ $(MAKE) -f util/java.make DIR=gen/chap13_inheritance PACKAGE=lox\n\nc_chapters: split_chapters\n\t@ $(MAKE) -f util/c.make NAME=chap14_chunks MODE=release SOURCE_DIR=gen/chap14_chunks\n\t@ $(MAKE) -f util/c.make NAME=chap15_virtual MODE=release SOURCE_DIR=gen/chap15_virtual\n\t@ $(MAKE) -f util/c.make NAME=chap16_scanning MODE=release SOURCE_DIR=gen/chap16_scanning\n\t@ $(MAKE) -f util/c.make NAME=chap17_compiling MODE=release SOURCE_DIR=gen/chap17_compiling\n\t@ $(MAKE) -f util/c.make NAME=chap18_types MODE=release SOURCE_DIR=gen/chap18_types\n\t@ $(MAKE) -f util/c.make NAME=chap19_strings MODE=release SOURCE_DIR=gen/chap19_strings\n\t@ $(MAKE) -f util/c.make NAME=chap20_hash MODE=release SOURCE_DIR=gen/chap20_hash\n\t@ $(MAKE) -f util/c.make NAME=chap21_global MODE=release SOURCE_DIR=gen/chap21_global\n\t@ $(MAKE) -f util/c.make NAME=chap22_local MODE=release SOURCE_DIR=gen/chap22_local\n\t@ $(MAKE) -f util/c.make NAME=chap23_jumping MODE=release SOURCE_DIR=gen/chap23_jumping\n\t@ $(MAKE) -f util/c.make NAME=chap24_calls MODE=release SOURCE_DIR=gen/chap24_calls\n\t@ $(MAKE) -f util/c.make NAME=chap25_closures MODE=release SOURCE_DIR=gen/chap25_closures\n\t@ $(MAKE) -f util/c.make NAME=chap26_garbage MODE=release SOURCE_DIR=gen/chap26_garbage\n\t@ $(MAKE) -f util/c.make NAME=chap27_classes MODE=release SOURCE_DIR=gen/chap27_classes\n\t@ $(MAKE) -f util/c.make NAME=chap28_methods MODE=release SOURCE_DIR=gen/chap28_methods\n\t@ $(MAKE) -f util/c.make NAME=chap29_superclasses MODE=release SOURCE_DIR=gen/chap29_superclasses\n\t@ $(MAKE) -f util/c.make NAME=chap30_optimization MODE=release SOURCE_DIR=gen/chap30_optimization\n\ncpp_chapters: split_chapters\n\t@ $(MAKE) -f util/c.make NAME=cpp_chap14_chunks MODE=release CPP=true SOURCE_DIR=gen/chap14_chunks\n\t@ $(MAKE) -f util/c.make NAME=cpp_chap15_virtual MODE=release CPP=true SOURCE_DIR=gen/chap15_virtual\n\t@ $(MAKE) -f util/c.make NAME=cpp_chap16_scanning MODE=release CPP=true SOURCE_DIR=gen/chap16_scanning\n\t@ $(MAKE) -f util/c.make NAME=cpp_chap17_compiling MODE=release CPP=true SOURCE_DIR=gen/chap17_compiling\n\t@ $(MAKE) -f util/c.make NAME=cpp_chap18_types MODE=release CPP=true SOURCE_DIR=gen/chap18_types\n\t@ $(MAKE) -f util/c.make NAME=cpp_chap19_strings MODE=release CPP=true SOURCE_DIR=gen/chap19_strings\n\t@ $(MAKE) -f util/c.make NAME=cpp_chap20_hash MODE=release CPP=true SOURCE_DIR=gen/chap20_hash\n\t@ $(MAKE) -f util/c.make NAME=cpp_chap21_global MODE=release CPP=true SOURCE_DIR=gen/chap21_global\n\t@ $(MAKE) -f util/c.make NAME=cpp_chap22_local MODE=release CPP=true SOURCE_DIR=gen/chap22_local\n\t@ $(MAKE) -f util/c.make NAME=cpp_chap23_jumping MODE=release CPP=true SOURCE_DIR=gen/chap23_jumping\n\t@ $(MAKE) -f util/c.make NAME=cpp_chap24_calls MODE=release CPP=true SOURCE_DIR=gen/chap24_calls\n\t@ $(MAKE) -f util/c.make NAME=cpp_chap25_closures MODE=release CPP=true SOURCE_DIR=gen/chap25_closures\n\t@ $(MAKE) -f util/c.make NAME=cpp_chap26_garbage MODE=release CPP=true SOURCE_DIR=gen/chap26_garbage\n\t@ $(MAKE) -f util/c.make NAME=cpp_chap27_classes MODE=release CPP=true SOURCE_DIR=gen/chap27_classes\n\t@ $(MAKE) -f util/c.make NAME=cpp_chap28_methods MODE=release CPP=true SOURCE_DIR=gen/chap28_methods\n\t@ $(MAKE) -f util/c.make NAME=cpp_chap29_superclasses MODE=release CPP=true SOURCE_DIR=gen/chap29_superclasses\n\t@ $(MAKE) -f util/c.make NAME=cpp_chap30_optimization MODE=release CPP=true SOURCE_DIR=gen/chap30_optimization\n\ndiffs: split_chapters java_chapters\n\t@ mkdir -p build/diffs\n\t@ -diff --recursive --new-file nonexistent/ gen/chap04_scanning/com/craftinginterpreters/ > build/diffs/chap04_scanning.diff\n\t@ -diff --recursive --new-file gen/chap04_scanning/com/craftinginterpreters/ gen/chap05_representing/com/craftinginterpreters/ > build/diffs/chap05_representing.diff\n\t@ -diff --recursive --new-file gen/chap05_representing/com/craftinginterpreters/ gen/chap06_parsing/com/craftinginterpreters/ > build/diffs/chap06_parsing.diff\n\t@ -diff --recursive --new-file gen/chap06_parsing/com/craftinginterpreters/ gen/chap07_evaluating/com/craftinginterpreters/ > build/diffs/chap07_evaluating.diff\n\t@ -diff --recursive --new-file gen/chap07_evaluating/com/craftinginterpreters/ gen/chap08_statements/com/craftinginterpreters/ > build/diffs/chap08_statements.diff\n\t@ -diff --recursive --new-file gen/chap08_statements/com/craftinginterpreters/ gen/chap09_control/com/craftinginterpreters/ > build/diffs/chap09_control.diff\n\t@ -diff --recursive --new-file gen/chap09_control/com/craftinginterpreters/ gen/chap10_functions/com/craftinginterpreters/ > build/diffs/chap10_functions.diff\n\t@ -diff --recursive --new-file gen/chap10_functions/com/craftinginterpreters/ gen/chap11_resolving/com/craftinginterpreters/ > build/diffs/chap11_resolving.diff\n\t@ -diff --recursive --new-file gen/chap11_resolving/com/craftinginterpreters/ gen/chap12_classes/com/craftinginterpreters/ > build/diffs/chap12_classes.diff\n\t@ -diff --recursive --new-file gen/chap12_classes/com/craftinginterpreters/ gen/chap13_inheritance/com/craftinginterpreters/ > build/diffs/chap13_inheritance.diff\n\n\t@ -diff --new-file nonexistent/ gen/chap14_chunks/ > build/diffs/chap14_chunks.diff\n\t@ -diff --new-file gen/chap14_chunks/ gen/chap15_virtual/ > build/diffs/chap15_virtual.diff\n\t@ -diff --new-file gen/chap15_virtual/ gen/chap16_scanning/ > build/diffs/chap16_scanning.diff\n\t@ -diff --new-file gen/chap16_scanning/ gen/chap17_compiling/ > build/diffs/chap17_compiling.diff\n\t@ -diff --new-file gen/chap17_compiling/ gen/chap18_types/ > build/diffs/chap18_types.diff\n\t@ -diff --new-file gen/chap18_types/ gen/chap19_strings/ > build/diffs/chap19_strings.diff\n\t@ -diff --new-file gen/chap19_strings/ gen/chap20_hash/ > build/diffs/chap20_hash.diff\n\t@ -diff --new-file gen/chap20_hash/ gen/chap21_global/ > build/diffs/chap21_global.diff\n\t@ -diff --new-file gen/chap21_global/ gen/chap22_local/ > build/diffs/chap22_local.diff\n\t@ -diff --new-file gen/chap22_local/ gen/chap23_jumping/ > build/diffs/chap23_jumping.diff\n\t@ -diff --new-file gen/chap23_jumping/ gen/chap24_calls/ > build/diffs/chap24_calls.diff\n\t@ -diff --new-file gen/chap24_calls/ gen/chap25_closures/ > build/diffs/chap25_closures.diff\n\t@ -diff --new-file gen/chap25_closures/ gen/chap26_garbage/ > build/diffs/chap26_garbage.diff\n\t@ -diff --new-file gen/chap26_garbage/ gen/chap27_classes/ > build/diffs/chap27_classes.diff\n\t@ -diff --new-file gen/chap27_classes/ gen/chap28_methods/ > build/diffs/chap28_methods.diff\n\t@ -diff --new-file gen/chap28_methods/ gen/chap29_superclasses/ > build/diffs/chap29_superclasses.diff\n\t@ -diff --new-file gen/chap29_superclasses/ gen/chap30_optimization/ > build/diffs/chap30_optimization.diff\n\nsplit_chapters:\n\t@ dart tool/bin/split_chapters.dart\n\ncompile_snippets:\n\t@ dart tool/bin/compile_snippets.dart\n\n# Generate the XML for importing into InDesign.\nxml: $(TOOL_SOURCES)\n\t@ dart --enable-asserts tool/bin/build_xml.dart\n\n.PHONY: book c_chapters clean clox compile_snippets debug default diffs \\\n\tget java_chapters jlox serve split_chapters test test_all test_c test_java\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.5244140625,
          "content": "This is the repo used for the in-progress book \"[Crafting Interpreters][]\". It\ncontains the Markdown text of the book, full implementations of both\ninterpreters, as well as the build system to weave the two together into the\nfinal site.\n\n[crafting interpreters]: http://craftinginterpreters.com\n\nIf you find an error or have a suggestion, please do file an issue here. Thank\nyou!\n\n## Contributing\n\nOne of the absolute best things about writing a book online and putting it out\nthere before it's done is that people like you have been kind enough to give me\nfeedback, point out typos, and find other errors or unclear text.\n\nIf you'd like to do that, great! You can just file bugs here on the repo, or\nsend a pull request if you're so inclined. If you want to send a pull request,\nbut don't want to get the build system set up to regenerate the HTML too, don't\nworry about it. I'll do that when I pull it in.\n\n## Ports and implementations\n\nAnother way to get involved is by sharing your own implementation of Lox. Ports\nto other languages are particularly useful since not every reader likes Java and\nC. Feel free to add your Lox port or implementation to the wiki:\n\n* [Lox implementations][]\n\n[lox implementations]: https://github.com/munificent/craftinginterpreters/wiki/Lox-implementations\n\n## Building Stuff\n\nI am a terribly forgetful, error-prone mammal, so I automated as much as I\ncould.\n\n### Prerequisites\n\nI develop on an OS X machine, but any POSIX system should work too. With a\nlittle extra effort, you should be able to get this working on Windows as well,\nthough I can't help you out much.\n\nMost of the work is orchestrated by make. The build scripts, test runner, and\nother utilities are all written in [Dart][]. Instructions to install Dart are\n[here][install]. Once you have Dart installed and on your path, run:\n\n```sh\n$ make get\n```\n\n[dart]: https://dart.dev/\n[install]: https://dart.dev/get-dart\n\nThis downloads all of the packages used by the build and test scripts.\n\nIn order to compile the two interpreters, you also need a C compiler on your\npath as well as `javac`.\n\n### Building\n\nOnce you've got that setup, try:\n\n```sh\n$ make\n```\n\nIf everything is working, that will generate the site for the book as well as\ncompiling the two interpreters clox and jlox. You can run either interpreter\nright from the root of the repo:\n\n```sh\n$ ./clox\n$ ./jlox\n```\n\n### Hacking on the book\n\nThe Markdown and snippets of source code are woven together into the final HTML\nusing a hand-written static site generator that started out as a [single tiny\nPython script][py] for [my first book][gpp] and somehow grew into something\napproximating a real program.\n\n[py]: https://github.com/munificent/game-programming-patterns/blob/master/script/format.py\n[gpp]: http://gameprogrammingpatterns.com/\n\nThe generated HTML is committed in the repo under `site/`. It is built from a\ncombination of Markdown for prose, which lives in `book/`, and snippets of code\nthat are weaved in from the Java and C implementations in `java/` and `c/`. (All\nof those funny looking comments in the source code are how it knows which\nsnippet goes where.)\n\nThe script that does all the magic is `tool/bin/build.dart`. You can run that\ndirectly, or run:\n\n```sh\n$ make book\n```\n\nThat generates the entire site in one batch. If you are incrementally working\non it, you'll want to run the development server:\n\n```sh\n$ make serve\n```\n\nThis runs a little HTTP server on localhost rooted at the `site/` directory.\nAny time you request a page, it regenerates any files whose sources have been\nchanged, including Markdown files, interpreter source files, templates, and\nassets. Just let that keep running, edit files locally, and refresh your\nbrowser to see the changes.\n\n### Building the interpreters\n\nYou can build each interpreter like so:\n\n```sh\n$ make clox\n$ make jlox\n```\n\nThis builds the final version of each interpreter as it appears at the end of\nits part in the book.\n\nYou can also see what the interpreters look like at the end of each chapter. (I\nuse this to make sure they are working even in the middle of the book.) This is\ndriven by a script, `tool/bin/split_chapters.dart` that uses the same comment\nmarkers for the code snippets to determine which chunks of code are present in\neach chapter. It takes only the snippets that have been seen by the end of each\nchapter and produces a new copy of the source in `gen/`, one directory for each\nchapter's code. (These are also an easier way to view the source code since they\nhave all of the distracting marker comments stripped out.)\n\nThen, each of those can be built separately. Run:\n\n```sh\n$ make c_chapters\n```\n\nAnd in the `build/` directory, you'll get an executable for each chapter, like\n`chap14_chunks`, etc. Likewise:\n\n```sh\n$ make java_chapters\n```\n\nThis compiles the Java code to classfiles in `build/gen/` in a subdirectory for\neach chapter.\n\n## Testing\n\nI have a full Lox test suite that I use to ensure the interpreters in the book\ndo what they're supposed to do. The test cases live in `test/`. The Dart\nprogram `tool/bin/test.dart` is a test runner that runs each of those test\nfiles on a Lox interpreter, parses the result, and validates that that the test\ndoes what it's expected to do.\n\nThere are various interpreters you can run the tests against:\n\n```sh\n$ make test       # The final versions of clox and jlox.\n$ make test_clox  # The final version of clox.\n$ make test_jlox  # The final version of jlox.\n$ make test_c     # Every chapter's version of clox.\n$ make test_java  # Every chapter's version of jlox.\n$ make test_all   # All of the above.\n```\n\n### Testing your implementation\n\nYou are welcome to use the test suite and the test runner to test your own Lox\nimplementation. The test runner is at `tool/bin/test.dart` and can be given a\ncustom interpreter executable to run using `--interpreter`. For example, if you\nhad an interpreter executable at `my_code/boblox`, you could test it like:\n\n```sh\n$ dart tool/bin/test.dart clox --interpreter my_code/boblox\n```\n\nYou still need to tell it which suite of tests to run because that determines\nthe test expectations. If your interpreter should behave like jlox, use \"jlox\"\nas the suite name. If it behaves like clox, use \"clox\". If your interpreter is\nonly complete up to the end of one of the chapters in the book, you can use\nthat chapter as the suite, like \"chap10_functions\". See the Makefile for the\nnames of all of the chapters.\n\nIf your interpreter needs other command line arguments passed to use, pass them\nto the test runner using `--arguments` and it will forward to your interpreter.\n\n## Repository Layout\n\n*   `asset/` – Sass files and jinja2 templates used to generate the site.\n*   `book/` - Markdown files for the text of each chapter.\n*   `build/` - Intermediate files and other build output (except for the site\n    itself) go here. Not committed to Git.\n*   `c/` – Source code of clox, the interpreter written in C. Also contains an\n    XCode project, if that's your thing.\n*   `gen/` – Java source files generated by GenerateAst.java go here. Not\n    committed.\n*   `java/` – Source code of jlox, the interpreter written in Java.\n*   `note/` – Various research, notes, TODOs, and other miscellanea.\n*   `note/answers` – Sample answers for the challenges. No cheating!\n*   `site/` – The final generated site. The contents of this directory directly\n    mirror craftinginterpreters.com. Most content here is generated by build.py,\n    but fonts, images, and JS only live here. Everything is committed, even the\n    generated content.\n*   `test/` – Test cases for the Lox implementations.\n*   `tool/` – Dart package containing the build, test, and other scripts.\n"
        },
        {
          "name": "asset",
          "type": "tree",
          "content": null
        },
        {
          "name": "book",
          "type": "tree",
          "content": null
        },
        {
          "name": "c",
          "type": "tree",
          "content": null
        },
        {
          "name": "java",
          "type": "tree",
          "content": null
        },
        {
          "name": "jlox",
          "type": "blob",
          "size": 0.115234375,
          "content": "#!/usr/bin/env bash\n\nscript_dir=$(dirname \"$0\")\njava -cp ${script_dir}/build/java com.craftinginterpreters.lox.Lox $@\n"
        },
        {
          "name": "note",
          "type": "tree",
          "content": null
        },
        {
          "name": "site",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tool",
          "type": "tree",
          "content": null
        },
        {
          "name": "util",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}