{
  "metadata": {
    "timestamp": 1736709510070,
    "page": 14,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "alexeygrigorev/data-science-interviews",
      "stars": 9088,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0068359375,
          "content": "_site/\n"
        },
        {
          "name": "CNAME",
          "type": "blob",
          "size": 0.0166015625,
          "content": "ds-interviews.org"
        },
        {
          "name": "Gemfile",
          "type": "blob",
          "size": 1.1572265625,
          "content": "source \"https://rubygems.org\"\n# Hello! This is where you manage which Jekyll version is used to run.\n# When you want to use a different version, change it below, save the\n# file and run `bundle install`. Run Jekyll with `bundle exec`, like so:\n#\n#     bundle exec jekyll serve\n#\n# This will help ensure the proper Jekyll version is running.\n# Happy Jekylling!\ngem \"jekyll\"\n# This is the default theme for new Jekyll sites. You may change this to anything you like.\n#gem \"minima\", \"~> 2.5\"\ngem \"jekyll-theme-cayman\"\ngem \"github-pages\", group: :jekyll_plugins\n\n# If you want to use GitHub Pages, remove the \"gem \"jekyll\"\" above and\n# uncomment the line below. To upgrade, run `bundle update github-pages`.\n# gem \"github-pages\", group: :jekyll_plugins\n# If you have any plugins, put them here!\ngroup :jekyll_plugins do\n  gem \"jekyll-feed\", \"~> 0.12\"\nend\n\n# Windows and JRuby does not include zoneinfo files, so bundle the tzinfo-data gem\n# and associated library.\ninstall_if -> { RUBY_PLATFORM =~ %r!mingw|mswin|java! } do\n  gem \"tzinfo\", \"~> 1.2\"\n  gem \"tzinfo-data\"\nend\n\n# Performance-booster for watching directories on Windows\ngem \"wdm\", \"~> 0.1.1\", :install_if => Gem.win_platform?\n\n"
        },
        {
          "name": "Gemfile.lock",
          "type": "blob",
          "size": 6.85546875,
          "content": "GEM\n  remote: https://rubygems.org/\n  specs:\n    activesupport (6.0.3.1)\n      concurrent-ruby (~> 1.0, >= 1.0.2)\n      i18n (>= 0.7, < 2)\n      minitest (~> 5.1)\n      tzinfo (~> 1.1)\n      zeitwerk (~> 2.2, >= 2.2.2)\n    addressable (2.7.0)\n      public_suffix (>= 2.0.2, < 5.0)\n    coffee-script (2.4.1)\n      coffee-script-source\n      execjs\n    coffee-script-source (1.11.1)\n    colorator (1.1.0)\n    commonmarker (0.17.13)\n      ruby-enum (~> 0.5)\n    concurrent-ruby (1.1.6)\n    dnsruby (1.61.3)\n      addressable (~> 2.5)\n    em-websocket (0.5.1)\n      eventmachine (>= 0.12.9)\n      http_parser.rb (~> 0.6.0)\n    ethon (0.12.0)\n      ffi (>= 1.3.0)\n    eventmachine (1.2.7)\n    execjs (2.7.0)\n    faraday (1.0.1)\n      multipart-post (>= 1.2, < 3)\n    ffi (1.12.2)\n    forwardable-extended (2.6.0)\n    gemoji (3.0.1)\n    github-pages (204)\n      github-pages-health-check (= 1.16.1)\n      jekyll (= 3.8.5)\n      jekyll-avatar (= 0.7.0)\n      jekyll-coffeescript (= 1.1.1)\n      jekyll-commonmark-ghpages (= 0.1.6)\n      jekyll-default-layout (= 0.1.4)\n      jekyll-feed (= 0.13.0)\n      jekyll-gist (= 1.5.0)\n      jekyll-github-metadata (= 2.13.0)\n      jekyll-mentions (= 1.5.1)\n      jekyll-optional-front-matter (= 0.3.2)\n      jekyll-paginate (= 1.1.0)\n      jekyll-readme-index (= 0.3.0)\n      jekyll-redirect-from (= 0.15.0)\n      jekyll-relative-links (= 0.6.1)\n      jekyll-remote-theme (= 0.4.1)\n      jekyll-sass-converter (= 1.5.2)\n      jekyll-seo-tag (= 2.6.1)\n      jekyll-sitemap (= 1.4.0)\n      jekyll-swiss (= 1.0.0)\n      jekyll-theme-architect (= 0.1.1)\n      jekyll-theme-cayman (= 0.1.1)\n      jekyll-theme-dinky (= 0.1.1)\n      jekyll-theme-hacker (= 0.1.1)\n      jekyll-theme-leap-day (= 0.1.1)\n      jekyll-theme-merlot (= 0.1.1)\n      jekyll-theme-midnight (= 0.1.1)\n      jekyll-theme-minimal (= 0.1.1)\n      jekyll-theme-modernist (= 0.1.1)\n      jekyll-theme-primer (= 0.5.4)\n      jekyll-theme-slate (= 0.1.1)\n      jekyll-theme-tactile (= 0.1.1)\n      jekyll-theme-time-machine (= 0.1.1)\n      jekyll-titles-from-headings (= 0.5.3)\n      jemoji (= 0.11.1)\n      kramdown (= 1.17.0)\n      liquid (= 4.0.3)\n      mercenary (~> 0.3)\n      minima (= 2.5.1)\n      nokogiri (>= 1.10.4, < 2.0)\n      rouge (= 3.13.0)\n      terminal-table (~> 1.4)\n    github-pages-health-check (1.16.1)\n      addressable (~> 2.3)\n      dnsruby (~> 1.60)\n      octokit (~> 4.0)\n      public_suffix (~> 3.0)\n      typhoeus (~> 1.3)\n    html-pipeline (2.12.3)\n      activesupport (>= 2)\n      nokogiri (>= 1.4)\n    http_parser.rb (0.6.0)\n    i18n (0.9.5)\n      concurrent-ruby (~> 1.0)\n    jekyll (3.8.5)\n      addressable (~> 2.4)\n      colorator (~> 1.0)\n      em-websocket (~> 0.5)\n      i18n (~> 0.7)\n      jekyll-sass-converter (~> 1.0)\n      jekyll-watch (~> 2.0)\n      kramdown (~> 1.14)\n      liquid (~> 4.0)\n      mercenary (~> 0.3.3)\n      pathutil (~> 0.9)\n      rouge (>= 1.7, < 4)\n      safe_yaml (~> 1.0)\n    jekyll-avatar (0.7.0)\n      jekyll (>= 3.0, < 5.0)\n    jekyll-coffeescript (1.1.1)\n      coffee-script (~> 2.2)\n      coffee-script-source (~> 1.11.1)\n    jekyll-commonmark (1.3.1)\n      commonmarker (~> 0.14)\n      jekyll (>= 3.7, < 5.0)\n    jekyll-commonmark-ghpages (0.1.6)\n      commonmarker (~> 0.17.6)\n      jekyll-commonmark (~> 1.2)\n      rouge (>= 2.0, < 4.0)\n    jekyll-default-layout (0.1.4)\n      jekyll (~> 3.0)\n    jekyll-feed (0.13.0)\n      jekyll (>= 3.7, < 5.0)\n    jekyll-gist (1.5.0)\n      octokit (~> 4.2)\n    jekyll-github-metadata (2.13.0)\n      jekyll (>= 3.4, < 5.0)\n      octokit (~> 4.0, != 4.4.0)\n    jekyll-mentions (1.5.1)\n      html-pipeline (~> 2.3)\n      jekyll (>= 3.7, < 5.0)\n    jekyll-optional-front-matter (0.3.2)\n      jekyll (>= 3.0, < 5.0)\n    jekyll-paginate (1.1.0)\n    jekyll-readme-index (0.3.0)\n      jekyll (>= 3.0, < 5.0)\n    jekyll-redirect-from (0.15.0)\n      jekyll (>= 3.3, < 5.0)\n    jekyll-relative-links (0.6.1)\n      jekyll (>= 3.3, < 5.0)\n    jekyll-remote-theme (0.4.1)\n      addressable (~> 2.0)\n      jekyll (>= 3.5, < 5.0)\n      rubyzip (>= 1.3.0)\n    jekyll-sass-converter (1.5.2)\n      sass (~> 3.4)\n    jekyll-seo-tag (2.6.1)\n      jekyll (>= 3.3, < 5.0)\n    jekyll-sitemap (1.4.0)\n      jekyll (>= 3.7, < 5.0)\n    jekyll-swiss (1.0.0)\n    jekyll-theme-architect (0.1.1)\n      jekyll (~> 3.5)\n      jekyll-seo-tag (~> 2.0)\n    jekyll-theme-cayman (0.1.1)\n      jekyll (~> 3.5)\n      jekyll-seo-tag (~> 2.0)\n    jekyll-theme-dinky (0.1.1)\n      jekyll (~> 3.5)\n      jekyll-seo-tag (~> 2.0)\n    jekyll-theme-hacker (0.1.1)\n      jekyll (~> 3.5)\n      jekyll-seo-tag (~> 2.0)\n    jekyll-theme-leap-day (0.1.1)\n      jekyll (~> 3.5)\n      jekyll-seo-tag (~> 2.0)\n    jekyll-theme-merlot (0.1.1)\n      jekyll (~> 3.5)\n      jekyll-seo-tag (~> 2.0)\n    jekyll-theme-midnight (0.1.1)\n      jekyll (~> 3.5)\n      jekyll-seo-tag (~> 2.0)\n    jekyll-theme-minimal (0.1.1)\n      jekyll (~> 3.5)\n      jekyll-seo-tag (~> 2.0)\n    jekyll-theme-modernist (0.1.1)\n      jekyll (~> 3.5)\n      jekyll-seo-tag (~> 2.0)\n    jekyll-theme-primer (0.5.4)\n      jekyll (> 3.5, < 5.0)\n      jekyll-github-metadata (~> 2.9)\n      jekyll-seo-tag (~> 2.0)\n    jekyll-theme-slate (0.1.1)\n      jekyll (~> 3.5)\n      jekyll-seo-tag (~> 2.0)\n    jekyll-theme-tactile (0.1.1)\n      jekyll (~> 3.5)\n      jekyll-seo-tag (~> 2.0)\n    jekyll-theme-time-machine (0.1.1)\n      jekyll (~> 3.5)\n      jekyll-seo-tag (~> 2.0)\n    jekyll-titles-from-headings (0.5.3)\n      jekyll (>= 3.3, < 5.0)\n    jekyll-watch (2.2.1)\n      listen (~> 3.0)\n    jemoji (0.11.1)\n      gemoji (~> 3.0)\n      html-pipeline (~> 2.2)\n      jekyll (>= 3.0, < 5.0)\n    kramdown (1.17.0)\n    liquid (4.0.3)\n    listen (3.2.1)\n      rb-fsevent (~> 0.10, >= 0.10.3)\n      rb-inotify (~> 0.9, >= 0.9.10)\n    mercenary (0.3.6)\n    mini_portile2 (2.4.0)\n    minima (2.5.1)\n      jekyll (>= 3.5, < 5.0)\n      jekyll-feed (~> 0.9)\n      jekyll-seo-tag (~> 2.1)\n    minitest (5.14.1)\n    multipart-post (2.1.1)\n    nokogiri (1.10.9)\n      mini_portile2 (~> 2.4.0)\n    octokit (4.18.0)\n      faraday (>= 0.9)\n      sawyer (~> 0.8.0, >= 0.5.3)\n    pathutil (0.16.2)\n      forwardable-extended (~> 2.6)\n    public_suffix (3.1.1)\n    rb-fsevent (0.10.3)\n    rb-inotify (0.10.1)\n      ffi (~> 1.0)\n    rouge (3.13.0)\n    ruby-enum (0.8.0)\n      i18n\n    rubyzip (2.3.0)\n    safe_yaml (1.0.5)\n    sass (3.7.4)\n      sass-listen (~> 4.0.0)\n    sass-listen (4.0.0)\n      rb-fsevent (~> 0.9, >= 0.9.4)\n      rb-inotify (~> 0.9, >= 0.9.7)\n    sawyer (0.8.2)\n      addressable (>= 2.3.5)\n      faraday (> 0.8, < 2.0)\n    terminal-table (1.8.0)\n      unicode-display_width (~> 1.1, >= 1.1.1)\n    thread_safe (0.3.6)\n    typhoeus (1.3.1)\n      ethon (>= 0.9.0)\n    tzinfo (1.2.7)\n      thread_safe (~> 0.1)\n    tzinfo-data (1.2019.3)\n      tzinfo (>= 1.0.0)\n    unicode-display_width (1.7.0)\n    wdm (0.1.1)\n    zeitwerk (2.3.0)\n\nPLATFORMS\n  ruby\n\nDEPENDENCIES\n  github-pages\n  jekyll\n  jekyll-feed (~> 0.12)\n  jekyll-theme-cayman\n  tzinfo (~> 1.2)\n  tzinfo-data\n  wdm (~> 0.1.1)\n\nBUNDLED WITH\n   2.1.4\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 18.212890625,
          "content": "Attribution 4.0 International\n\n=======================================================================\n\nCreative Commons Corporation (\"Creative Commons\") is not a law firm and\ndoes not provide legal services or legal advice. Distribution of\nCreative Commons public licenses does not create a lawyer-client or\nother relationship. Creative Commons makes its licenses and related\ninformation available on an \"as-is\" basis. Creative Commons gives no\nwarranties regarding its licenses, any material licensed under their\nterms and conditions, or any related information. Creative Commons\ndisclaims all liability for damages resulting from their use to the\nfullest extent possible.\n\nUsing Creative Commons Public Licenses\n\nCreative Commons public licenses provide a standard set of terms and\nconditions that creators and other rights holders may use to share\noriginal works of authorship and other material subject to copyright\nand certain other rights specified in the public license below. The\nfollowing considerations are for informational purposes only, are not\nexhaustive, and do not form part of our licenses.\n\n     Considerations for licensors: Our public licenses are\n     intended for use by those authorized to give the public\n     permission to use material in ways otherwise restricted by\n     copyright and certain other rights. Our licenses are\n     irrevocable. Licensors should read and understand the terms\n     and conditions of the license they choose before applying it.\n     Licensors should also secure all rights necessary before\n     applying our licenses so that the public can reuse the\n     material as expected. Licensors should clearly mark any\n     material not subject to the license. This includes other CC-\n     licensed material, or material used under an exception or\n     limitation to copyright. More considerations for licensors:\n\twiki.creativecommons.org/Considerations_for_licensors\n\n     Considerations for the public: By using one of our public\n     licenses, a licensor grants the public permission to use the\n     licensed material under specified terms and conditions. If\n     the licensor's permission is not necessary for any reason--for\n     example, because of any applicable exception or limitation to\n     copyright--then that use is not regulated by the license. Our\n     licenses grant only permissions under copyright and certain\n     other rights that a licensor has authority to grant. Use of\n     the licensed material may still be restricted for other\n     reasons, including because others have copyright or other\n     rights in the material. A licensor may make special requests,\n     such as asking that all changes be marked or described.\n     Although not required by our licenses, you are encouraged to\n     respect those requests where reasonable. More_considerations\n     for the public:\n\twiki.creativecommons.org/Considerations_for_licensees\n\n=======================================================================\n\nCreative Commons Attribution 4.0 International Public License\n\nBy exercising the Licensed Rights (defined below), You accept and agree\nto be bound by the terms and conditions of this Creative Commons\nAttribution 4.0 International Public License (\"Public License\"). To the\nextent this Public License may be interpreted as a contract, You are\ngranted the Licensed Rights in consideration of Your acceptance of\nthese terms and conditions, and the Licensor grants You such rights in\nconsideration of benefits the Licensor receives from making the\nLicensed Material available under these terms and conditions.\n\n\nSection 1 -- Definitions.\n\n  a. Adapted Material means material subject to Copyright and Similar\n     Rights that is derived from or based upon the Licensed Material\n     and in which the Licensed Material is translated, altered,\n     arranged, transformed, or otherwise modified in a manner requiring\n     permission under the Copyright and Similar Rights held by the\n     Licensor. For purposes of this Public License, where the Licensed\n     Material is a musical work, performance, or sound recording,\n     Adapted Material is always produced where the Licensed Material is\n     synched in timed relation with a moving image.\n\n  b. Adapter's License means the license You apply to Your Copyright\n     and Similar Rights in Your contributions to Adapted Material in\n     accordance with the terms and conditions of this Public License.\n\n  c. Copyright and Similar Rights means copyright and/or similar rights\n     closely related to copyright including, without limitation,\n     performance, broadcast, sound recording, and Sui Generis Database\n     Rights, without regard to how the rights are labeled or\n     categorized. For purposes of this Public License, the rights\n     specified in Section 2(b)(1)-(2) are not Copyright and Similar\n     Rights.\n\n  d. Effective Technological Measures means those measures that, in the\n     absence of proper authority, may not be circumvented under laws\n     fulfilling obligations under Article 11 of the WIPO Copyright\n     Treaty adopted on December 20, 1996, and/or similar international\n     agreements.\n\n  e. Exceptions and Limitations means fair use, fair dealing, and/or\n     any other exception or limitation to Copyright and Similar Rights\n     that applies to Your use of the Licensed Material.\n\n  f. Licensed Material means the artistic or literary work, database,\n     or other material to which the Licensor applied this Public\n     License.\n\n  g. Licensed Rights means the rights granted to You subject to the\n     terms and conditions of this Public License, which are limited to\n     all Copyright and Similar Rights that apply to Your use of the\n     Licensed Material and that the Licensor has authority to license.\n\n  h. Licensor means the individual(s) or entity(ies) granting rights\n     under this Public License.\n\n  i. Share means to provide material to the public by any means or\n     process that requires permission under the Licensed Rights, such\n     as reproduction, public display, public performance, distribution,\n     dissemination, communication, or importation, and to make material\n     available to the public including in ways that members of the\n     public may access the material from a place and at a time\n     individually chosen by them.\n\n  j. Sui Generis Database Rights means rights other than copyright\n     resulting from Directive 96/9/EC of the European Parliament and of\n     the Council of 11 March 1996 on the legal protection of databases,\n     as amended and/or succeeded, as well as other essentially\n     equivalent rights anywhere in the world.\n\n  k. You means the individual or entity exercising the Licensed Rights\n     under this Public License. Your has a corresponding meaning.\n\n\nSection 2 -- Scope.\n\n  a. License grant.\n\n       1. Subject to the terms and conditions of this Public License,\n          the Licensor hereby grants You a worldwide, royalty-free,\n          non-sublicensable, non-exclusive, irrevocable license to\n          exercise the Licensed Rights in the Licensed Material to:\n\n            a. reproduce and Share the Licensed Material, in whole or\n               in part; and\n\n            b. produce, reproduce, and Share Adapted Material.\n\n       2. Exceptions and Limitations. For the avoidance of doubt, where\n          Exceptions and Limitations apply to Your use, this Public\n          License does not apply, and You do not need to comply with\n          its terms and conditions.\n\n       3. Term. The term of this Public License is specified in Section\n          6(a).\n\n       4. Media and formats; technical modifications allowed. The\n          Licensor authorizes You to exercise the Licensed Rights in\n          all media and formats whether now known or hereafter created,\n          and to make technical modifications necessary to do so. The\n          Licensor waives and/or agrees not to assert any right or\n          authority to forbid You from making technical modifications\n          necessary to exercise the Licensed Rights, including\n          technical modifications necessary to circumvent Effective\n          Technological Measures. For purposes of this Public License,\n          simply making modifications authorized by this Section 2(a)\n          (4) never produces Adapted Material.\n\n       5. Downstream recipients.\n\n            a. Offer from the Licensor -- Licensed Material. Every\n               recipient of the Licensed Material automatically\n               receives an offer from the Licensor to exercise the\n               Licensed Rights under the terms and conditions of this\n               Public License.\n\n            b. No downstream restrictions. You may not offer or impose\n               any additional or different terms or conditions on, or\n               apply any Effective Technological Measures to, the\n               Licensed Material if doing so restricts exercise of the\n               Licensed Rights by any recipient of the Licensed\n               Material.\n\n       6. No endorsement. Nothing in this Public License constitutes or\n          may be construed as permission to assert or imply that You\n          are, or that Your use of the Licensed Material is, connected\n          with, or sponsored, endorsed, or granted official status by,\n          the Licensor or others designated to receive attribution as\n          provided in Section 3(a)(1)(A)(i).\n\n  b. Other rights.\n\n       1. Moral rights, such as the right of integrity, are not\n          licensed under this Public License, nor are publicity,\n          privacy, and/or other similar personality rights; however, to\n          the extent possible, the Licensor waives and/or agrees not to\n          assert any such rights held by the Licensor to the limited\n          extent necessary to allow You to exercise the Licensed\n          Rights, but not otherwise.\n\n       2. Patent and trademark rights are not licensed under this\n          Public License.\n\n       3. To the extent possible, the Licensor waives any right to\n          collect royalties from You for the exercise of the Licensed\n          Rights, whether directly or through a collecting society\n          under any voluntary or waivable statutory or compulsory\n          licensing scheme. In all other cases the Licensor expressly\n          reserves any right to collect such royalties.\n\n\nSection 3 -- License Conditions.\n\nYour exercise of the Licensed Rights is expressly made subject to the\nfollowing conditions.\n\n  a. Attribution.\n\n       1. If You Share the Licensed Material (including in modified\n          form), You must:\n\n            a. retain the following if it is supplied by the Licensor\n               with the Licensed Material:\n\n                 i. identification of the creator(s) of the Licensed\n                    Material and any others designated to receive\n                    attribution, in any reasonable manner requested by\n                    the Licensor (including by pseudonym if\n                    designated);\n\n                ii. a copyright notice;\n\n               iii. a notice that refers to this Public License;\n\n                iv. a notice that refers to the disclaimer of\n                    warranties;\n\n                 v. a URI or hyperlink to the Licensed Material to the\n                    extent reasonably practicable;\n\n            b. indicate if You modified the Licensed Material and\n               retain an indication of any previous modifications; and\n\n            c. indicate the Licensed Material is licensed under this\n               Public License, and include the text of, or the URI or\n               hyperlink to, this Public License.\n\n       2. You may satisfy the conditions in Section 3(a)(1) in any\n          reasonable manner based on the medium, means, and context in\n          which You Share the Licensed Material. For example, it may be\n          reasonable to satisfy the conditions by providing a URI or\n          hyperlink to a resource that includes the required\n          information.\n\n       3. If requested by the Licensor, You must remove any of the\n          information required by Section 3(a)(1)(A) to the extent\n          reasonably practicable.\n\n       4. If You Share Adapted Material You produce, the Adapter's\n          License You apply must not prevent recipients of the Adapted\n          Material from complying with this Public License.\n\n\nSection 4 -- Sui Generis Database Rights.\n\nWhere the Licensed Rights include Sui Generis Database Rights that\napply to Your use of the Licensed Material:\n\n  a. for the avoidance of doubt, Section 2(a)(1) grants You the right\n     to extract, reuse, reproduce, and Share all or a substantial\n     portion of the contents of the database;\n\n  b. if You include all or a substantial portion of the database\n     contents in a database in which You have Sui Generis Database\n     Rights, then the database in which You have Sui Generis Database\n     Rights (but not its individual contents) is Adapted Material; and\n\n  c. You must comply with the conditions in Section 3(a) if You Share\n     all or a substantial portion of the contents of the database.\n\nFor the avoidance of doubt, this Section 4 supplements and does not\nreplace Your obligations under this Public License where the Licensed\nRights include other Copyright and Similar Rights.\n\n\nSection 5 -- Disclaimer of Warranties and Limitation of Liability.\n\n  a. UNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE\n     EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS\n     AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF\n     ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS,\n     IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION,\n     WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR\n     PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS,\n     ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT\n     KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT\n     ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU.\n\n  b. TO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE\n     TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION,\n     NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT,\n     INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES,\n     COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR\n     USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN\n     ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR\n     DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR\n     IN PART, THIS LIMITATION MAY NOT APPLY TO YOU.\n\n  c. The disclaimer of warranties and limitation of liability provided\n     above shall be interpreted in a manner that, to the extent\n     possible, most closely approximates an absolute disclaimer and\n     waiver of all liability.\n\n\nSection 6 -- Term and Termination.\n\n  a. This Public License applies for the term of the Copyright and\n     Similar Rights licensed here. However, if You fail to comply with\n     this Public License, then Your rights under this Public License\n     terminate automatically.\n\n  b. Where Your right to use the Licensed Material has terminated under\n     Section 6(a), it reinstates:\n\n       1. automatically as of the date the violation is cured, provided\n          it is cured within 30 days of Your discovery of the\n          violation; or\n\n       2. upon express reinstatement by the Licensor.\n\n     For the avoidance of doubt, this Section 6(b) does not affect any\n     right the Licensor may have to seek remedies for Your violations\n     of this Public License.\n\n  c. For the avoidance of doubt, the Licensor may also offer the\n     Licensed Material under separate terms or conditions or stop\n     distributing the Licensed Material at any time; however, doing so\n     will not terminate this Public License.\n\n  d. Sections 1, 5, 6, 7, and 8 survive termination of this Public\n     License.\n\n\nSection 7 -- Other Terms and Conditions.\n\n  a. The Licensor shall not be bound by any additional or different\n     terms or conditions communicated by You unless expressly agreed.\n\n  b. Any arrangements, understandings, or agreements regarding the\n     Licensed Material not stated herein are separate from and\n     independent of the terms and conditions of this Public License.\n\n\nSection 8 -- Interpretation.\n\n  a. For the avoidance of doubt, this Public License does not, and\n     shall not be interpreted to, reduce, limit, restrict, or impose\n     conditions on any use of the Licensed Material that could lawfully\n     be made without permission under this Public License.\n\n  b. To the extent possible, if any provision of this Public License is\n     deemed unenforceable, it shall be automatically reformed to the\n     minimum extent necessary to make it enforceable. If the provision\n     cannot be reformed, it shall be severed from this Public License\n     without affecting the enforceability of the remaining terms and\n     conditions.\n\n  c. No term or condition of this Public License will be waived and no\n     failure to comply consented to unless expressly agreed to by the\n     Licensor.\n\n  d. Nothing in this Public License constitutes or may be interpreted\n     as a limitation upon, or waiver of, any privileges and immunities\n     that apply to the Licensor or You, including from the legal\n     processes of any jurisdiction or authority.\n\n\n=======================================================================\n\nCreative Commons is not a party to its public\nlicenses. Notwithstanding, Creative Commons may elect to apply one of\nits public licenses to material it publishes and in those instances\nwill be considered the “Licensor.” The text of the Creative Commons\npublic licenses is dedicated to the public domain under the CC0 Public\nDomain Dedication. Except for the limited purpose of indicating that\nmaterial is shared under a Creative Commons public license or as\notherwise permitted by the Creative Commons policies published at\ncreativecommons.org/policies, Creative Commons does not authorize the\nuse of the trademark \"Creative Commons\" or any other trademark or logo\nof Creative Commons without its prior written consent including,\nwithout limitation, in connection with any unauthorized modifications\nto any of its public licenses or any other arrangements,\nunderstandings, or agreements concerning use of licensed material. For\nthe avoidance of doubt, this paragraph does not form part of the\npublic licenses.\n\nCreative Commons may be contacted at creativecommons.org.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.6630859375,
          "content": "\n<figure>\n    <img src=\"img/repo-logo.jpg\">\n    <figcaption>Photo by <a href=\"https://pxhere.com/en/photographer/395564\">Waseem Farooq</a> from <a href=\"http://pxhere.com/en/photo/1446003\">PxHere</a></figcaption>\n</figure>\n\n# Data Science Interviews\n\nData science interview questions - with answers\n\nThe answers are given by the community\n\n* If you know how to answer a question — please create a PR with the answer\n* If there's already an answer, but you can improve it — please create a PR with improvement suggestion\n* If you see a mistake — please create a PR with a fix\n\nFor updates, follow me on Twitter ([@Al_Grigor](https://twitter.com/Al_Grigor)) and on LinkedIn ([agrigorev](https://www.linkedin.com/in/agrigorev))\n\nDo you want to talk about data? Join [DataTalks.Club](https://DataTalks.Club)\n\n\n## Questions by category\n\n* Theoretical questions: [theory.md](theory.md) (linear models, trees, neural networks and others)\n* Technical questions: [technical.md](technical.md) (SQL, Python, coding)\n* More to come\n\n## Contributed questions\n\nThe `contrib` folder contains contributed interview questions:\n\n* Probability: [contrib/probability.md](contrib/probability.md)\n* Add your questions here!\n\n## Other useful things\n\n* Awesome data science interview questions and other resources: [awesome.md](awesome.md)\n\n\nThis is a joint effort of many people. You can see the list of contributors here: [contributors.md](contributors.md)\n\n## License\n\nThis work is licensed under a [Creative Commons Attribution 4.0 International License][cc-by].\n\n[![CC BY 4.0][cc-by-image]][cc-by]\n\n[cc-by]: http://creativecommons.org/licenses/by/4.0/\n[cc-by-image]: https://i.creativecommons.org/l/by/4.0/88x31.png\n"
        },
        {
          "name": "_config.yml",
          "type": "blob",
          "size": 0.19921875,
          "content": "theme: jekyll-theme-cayman\ntitle: Data Science Interviews\ndescription: Data science interview questions, answers and other useful resources\ngoogle_analytics: UA-163602297-1\ncover_image: img/repo-logo.jpg\n"
        },
        {
          "name": "_layouts",
          "type": "tree",
          "content": null
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "awesome.md",
          "type": "blob",
          "size": 3.4853515625,
          "content": "## Awesome Data Science Interview Resources\n\nA list of links with data science interview questions and other userful resources.\n\nContributions are welcome!\n\n### Questions and answers\n\n* [This repository](https://github.com/alexeygrigorev/data-science-interviews): [https://ds-interviews.org](https://ds-interviews.org)\n* [Data science interview questions and answers](https://github.com/iamtodor/data-science-interview-questions-and-answers) by [iamtodor](https://github.com/iamtodor)\n* [120+ data science interview questions](https://github.com/kojino/120-Data-Science-Interview-Questions) by [kojino](https://github.com/kojino/)\n* [40 Interview Questions asked at Startups in Machine Learning / Data Science](https://www.analyticsvidhya.com/blog/2016/09/40-interview-questions-asked-at-startups-in-machine-learning-data-science/)\n* [The Most Comprehensive Data Science & Machine Learning Interview Guide You’ll Ever Need](https://www.analyticsvidhya.com/blog/2018/06/comprehensive-data-science-machine-learning-interview-guide/)\n* [Data Science Recruitment Challenges](https://github.com/alexeygrigorev/datascience-recruitment-challenges) - take-home assignments for data science positions\n* [Latest Data Science Interview Questions](https://www.interviewbit.com/data-science-interview-questions/) - Complete Interview Guide\n* [Daily Machine Learning Questions](https://today.bnomial.com/) - One machine learning question every day with answers, explanations, references.\n\n### Questions\n\n* [The toughest data science interview](https://www.linkedin.com/posts/agrigorev_datascience-machinelearning-ml-activity-6630138658219409409-bTWh) - a post on LinkedIn\n* [Data Science Interview Questions](https://www.itshared.org/2015/10/data-science-interview-questions.html) from [ITShared](https://www.itshared.org/) - from 2015, but many of them are still valid\n\n\n### Other useful links\n\n* Getting a Data Science Job: [Video](https://www.youtube.com/watch?v=jYYR1fH8k7o), [Slides](https://www.slideshare.net/AlexeyGrigorev/getting-a-data-science-job)\n* [How does a technical screening for data science positions look like?](https://www.linkedin.com/posts/agrigorev_datascience-machinelearning-ml-activity-6631245015718866944-Vb87) - a post on LinkedIn\n* [How to prepare for Research Engineer (ML) interview?](https://www.linkedin.com/posts/agrigorev_machinelearning-ml-interviews-activity-6622232556311990272-_dAN) - a post on LinkedIn\n* [How to prepare for a data science interview?](https://www.quora.com/How-do-I-prepare-for-a-data-scientist-interview) - 100+ answers on Quora \n* [How to Get a Data Science Job: A Ridiculously Specific Guide](http://brohrer.github.io/get_data_science_job.html)\n* [How to Succeed in A Data Science Interview](https://blog.pramp.com/how-to-succeed-in-a-data-science-interview-27553ab69d8a)\n* [Machine Learning Systems Design](https://github.com/chiphuyen/machine-learning-systems-design)\n* [I interviewed at five top companies in Silicon Valley in five days, and luckily got five job offers](https://medium.com/@XiaohanZeng/i-interviewed-at-five-top-companies-in-silicon-valley-in-five-days-and-luckily-got-five-job-offers-25178cf74e0f)\n* [Navigating working with other teams](https://counting.substack.com/p/navigating-working-with-other-teams)\n\n\n### Negotiation\n\n* [Ten Rules for Negotiating a Job Offer](https://haseebq.com/my-ten-rules-for-negotiating-a-job-offer/)\n* [Career Advice and Salary Negotiations: Move Early and Move Often](https://thehftguy.com/2017/01/23/career-advice-and-salary-negotiations-move-early-and-move-often/)\n"
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "contributors.md",
          "type": "blob",
          "size": 1.7353515625,
          "content": "## Contributors\n\nThe content in this repository - especially the answers - is created by the community:\n\n* [sash-ko](https://github.com/sash-ko)\n* [samaritanhu](https://github.com/samaritanhu)\n* [gabrielatrindade](https://github.com/gabrielatrindade)\n* [manuel-lang](https://github.com/manuel-lang)\n* [damiannmm](https://github.com/damiannmm)\n* [vasugamdha](https://github.com/vasugamdha)\n* [MahdiRahbar](https://github.com/MahdiRahbar)\n* [pedrogengo](https://github.com/pedrogengo)\n* [rohanadagouda](https://github.com/rohanadagouda)\n* [python-engineer](https://github.com/python-engineer)\n* [hamzag95](https://github.com/hamzag95)\n* [rahulmadanraju](https://github.com/rahulmadanraju)\n* [donaldonana](https://github.com/donaldonana)\n* [pymacbit](https://github.com/pymacbit)\n* [alikhanafer](https://github.com/alikhanafer)\n* [Erlemar](https://github.com/Erlemar)\n* [AdmiralChopper](https://github.com/AdmiralChopper)\n* [BorisovDm](https://github.com/BorisovDm)\n* [eljur](https://github.com/eljur)\n* [SomeSnm](https://github.com/SomeSnm)\n* [Hannemit](https://github.com/Hannemit)\n* [l1x](https://github.com/l1x)\n* [JeremiahKamama](https://github.com/JeremiahKamama)\n* [JoaquinDF](https://github.com/JoaquinDF)\n* [LoweLundin](https://github.com/LoweLundin)\n* [pranaymodukuru](https://github.com/pranaymodukuru)\n* [ritwikbanrg](https://github.com/ritwikbanrg)\n* [averkij](https://github.com/averkij)\n* [Tejash-Shah](https://github.com/Tejash-Shah)\n* [vijay-ravi](https://github.com/vijay-ravi)\n* [Mudit Tiwari](https://github.com/mudittiwari255)\n* [mrsaeeddev](https://github.com/mrsaeeddev)\n* [hima9](https://github.com/hima9)\n\n\nFull list of contributors: [contributors](https://github.com/alexeygrigorev/data-science-interviews/contributors)\n\nThank you for your contribution!\n"
        },
        {
          "name": "img",
          "type": "tree",
          "content": null
        },
        {
          "name": "technical.md",
          "type": "blob",
          "size": 25.1171875,
          "content": "# Technical interview questions\n\n<table>\n   <tr>\n      <td>⚠️</td>\n      <td>\n         The answers here are given by the community. Be careful and double check the answers before using them. <br>\n         If you see an error, please create a PR with a fix\n      </td>\n   </tr>\n</table>\n\nThe list is based on [this post](https://medium.com/data-science-insider/technical-data-science-interview-questions-f61cd9cf218?source=friends_link&sk=01f4de0de746d28fe714d92a1e91e190)\n\n\n## Table of contents\n\n* [SQL](#sql)\n* [Coding (Python)](#coding-python)\n* [Algorithmic Questions](#algorithmic-questions)\n\n<br/>\n\n## SQL\n\nSuppose we have the following schema with two tables: Ads and Events\n\n* Ads(ad_id, campaign_id, status)\n* status could be active or inactive\n* Events(event_id, ad_id, source, event_type, date, hour)\n* event_type could be impression, click, conversion\n\n<img src=\"img/schema.png\" />\n\n\nWrite SQL queries to extract the following information:\n\n**1)** The number of active ads.\n\n```sql\nSELECT count(*) FROM Ads WHERE status = 'active';\n```\n\n<br/>\n\n\n**2)** All active campaigns. A campaign is active if there’s at least one active ad.\n\n```sql\nSELECT DISTINCT a.campaign_id\nFROM Ads AS a\nWHERE a.status = 'active';\n```\n\n<br/>\n\n**3)** The number of active campaigns.\n\n```sql\nSELECT COUNT(DISTINCT a.campaign_id)\nFROM Ads AS a\nWHERE a.status = 'active';\n```\n\n<br/>\n\n**4)** The number of events per each ad — broken down by event type.\n\n<img src=\"img/sql_4_example.png\" />\n\n```sql\nSELECT e.ad_id, e.event_type, count(*) as \"count\"\nFROM Events AS e\nGROUP BY e.ad_id, e.event_type\nORDER BY e.ad_id, \"count\" DESC;\n```\n\n<br/>\n\n**5)** The number of events over the last week per each active ad — broken down by event type and date (most recent first).\n\n<img src=\"img/sql_5_example.png\" />\n\n```sql\nSELECT a.ad_id, e.event_type, e.date, count(*) as \"count\"\nFROM Ads AS a\n  JOIN Events AS e\n      ON a.ad_id = e.ad_id\nWHERE a.status = 'active'\n   AND e.date >= DATEADD(week, -1, GETDATE())\nGROUP BY a.ad_id, e.event_type, e.date\nORDER BY e.date ASC, \"count\" DESC;\n```\n\n<br/>\n\n**6)** The number of events per campaign — by event type.\n\n<img src=\"img/sql_6_example.png\" />\n\n\n```sql\nSELECT a.campaign_id, e.event_type, count(*) as count\nFROM Ads AS a\n  INNER JOIN Events AS e\n    ON a.ad_id = e.ad_id\nGROUP BY a.campaign_id, e.event_type\nORDER BY a.campaign_id, \"count\" DESC\n```\n\n<br/>\n\n**7)** The number of events over the last week per each campaign and event type — broken down by date (most recent first).\n\n<img src=\"img/sql_7_example.png\" />\n\n```sql\n-- for Postgres\n\nSELECT a.campaign_id AS camp_id, e.event_type, e.date, count(*)\nFROM Ads AS a\n  INNER JOIN Events AS e\n    ON a.ad_id = e.ad_id\nWHERE e.date >= DATEADD(week, -1, GETDATE())\nGROUP BY a.campaign_id, e.event_type, e.date\nORDER BY a.campaign_id, e.date DESC, \"count\" DESC;\n```\n\n<br/>\n\n**8)** CTR (click-through rate) for each ad. CTR = number of clicks / number of impressions.\n\n<img src=\"img/sql_8_example.png\" />\n\n```sql\n-- for Postgres\n\nSELECT impressions_clicks_table.ad_id,\n       (impressions_clicks_table.clicks * 100 / impressions_clicks_table.impressions)::FLOAT || '%' AS CTR\nFROM\n  (\n  SELECT e.ad_id,\n         SUM(CASE e.event_type WHEN 'impression' THEN 1 ELSE 0 END) impressions,\n         SUM(CASE e.event_type WHEN 'click' THEN 1 ELSE 0 END) clicks\n  FROM Events AS e\n  GROUP BY e.ad_id\n  ) AS impressions_clicks_table\nORDER BY impressions_clicks_table.ad_id;\n```\n\n<br/>\n\n**9)** CVR (conversion rate) for each ad. CVR = number of conversions / number of clicks.\n\n<img src=\"img/sql_9_example.png\" />\n\n```sql\n-- for Postgres\n\nSELECT conversions_clicks_table.ad_id,\n       (conversions_clicks_table.conversions * 100 / conversions_clicks_table.clicks)::FLOAT || '%' AS CVR\nFROM\n  (\n  SELECT e.ad_id,\n         SUM(CASE e.event_type WHEN 'conversion' THEN 1 ELSE 0 END) conversions,\n         SUM(CASE e.event_type WHEN 'click' THEN 1 ELSE 0 END) clicks\n  FROM Events AS e\n  GROUP BY e.ad_id\n  ) AS conversions_clicks_table\nORDER BY conversions_clicks_table.ad_id;\n```\n\n<br/>\n\n**10)** CTR and CVR for each ad broken down by day and hour (most recent first).\n\n<img src=\"img/sql_10_example.png\" />\n\n\n```sql\n-- for Postgres\n\nSELECT conversions_clicks_table.ad_id,\n       conversions_clicks_table.date,\n       conversions_clicks_table.hour,\n       (impressions_clicks_table.clicks * 100 / impressions_clicks_table.impressions)::FLOAT || '%' AS CTR,\n       (conversions_clicks_table.conversions * 100 / conversions_clicks_table.clicks)::FLOAT || '%' AS CVR\nFROM\n  (\n  SELECT e.ad_id, e.date, e.hour,\n         SUM(CASE e.event_type WHEN 'conversion' THEN 1 ELSE 0 END) conversions,\n         SUM(CASE e.event_type WHEN 'click' THEN 1 ELSE 0 END) clicks,\n         SUM(CASE e.event_type WHEN 'impression' THEN 1 ELSE 0 END) impressions\n  FROM Events AS e\n  GROUP BY e.ad_id, e.date, e.hour\n  ) AS conversions_clicks_table\nORDER BY conversions_clicks_table.ad_id, conversions_clicks_table.date DESC, conversions_clicks_table.hour DESC, \"CTR\" DESC, \"CVR\" DESC;\n```\n\n<br/>\n\n**11)** CTR for each ad broken down by source and day\n\n<img src=\"img/sql_11_example.png\" />\n\n\n```sql\n-- for Postgres\n\nSELECT conversions_clicks_table.ad_id,\n       conversions_clicks_table.date,\n       conversions_clicks_table.source,\n       (impressions_clicks_table.clicks * 100 / impressions_clicks_table.impressions)::FLOAT || '%' AS CTR\nFROM\n  (\n  SELECT e.ad_id, e.date, e.source,\n         SUM(CASE e.event_type WHEN 'click' THEN 1 ELSE 0 END) clicks,\n         SUM(CASE e.event_type WHEN 'impression' THEN 1 ELSE 0 END) impressions\n  FROM Events AS e\n  GROUP BY e.ad_id, e.date, e.source\n  ) AS conversions_clicks_table\nORDER BY conversions_clicks_table.ad_id, conversions_clicks_table.date DESC, conversions_clicks_table.source, \"CTR\" DESC;\n```\n\n<br/>\n\n\n## Coding (Python)\n\n**1) FizzBuzz.** Print numbers from 1 to 100\n\n* If it’s a multiplier of 3, print “Fizz”\n* If it’s a multiplier of 5, print “Buzz”\n* If both 3 and 5 — “Fizz Buzz\"\n* Otherwise, print the number itself\n\nExample of output: 1, 2, Fizz, 4, Buzz, Fizz, 7, 8, Fizz, Buzz, 11, Fizz, 13, 14, Fizz Buzz, 16, 17, Fizz, 19, Buzz, Fizz, 22, 23, Fizz, Buzz, 26, Fizz, 28, 29, Fizz Buzz, 31, 32, Fizz, 34, Buzz, Fizz, ...\n\n```python\nfor i in range(1, 101):\n    if i % 3 == 0 and i % 5 == 0:\n        print('Fizz Buzz')\n    elif i % 3 == 0:\n        print('Fizz')\n    elif i % 5 == 0:\n        print('Buzz')\n    else:\n        print(i)\n```\n\n<br/>\n\n**2) Factorial**. Calculate a factorial of a number\n\n* `factorial(5)` = 5! = 1 * 2 * 3 * 4 * 5 = 120\n* `factorial(10)` = 10! = 1 * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 = 3628800\n\n```python\ndef factorial(n):\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n```\n\nWe can also write this function using recursion:\n\n```python\ndef factorial(n: int):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n```\n\n\n<br/>\n\n**3) Mean**. Compute the mean of number in a list\n\n* `mean([4, 36, 45, 50, 75]) = 42`\n* `mean([]) = NaN` (use `float('NaN')`)\n\n<img src=\"img/formula_mean.png\" />\n\n```python\ndef mean(numbers):\n    if len(numbers) > 0:\n        return sum(numbers) / len(numbers)\n    return float('NaN')\n```\n\n<br/>\n\n**4) STD**. Calculate the standard deviation of elements in a list.\n\n* `std([1, 2, 3, 4]) = 1.29`\n* `std([1]) = NaN` (use `float('NaN')`)\n* `std([]) = NaN`\n\n<img src=\"img/formula_std.png\" />\n\n```python\nfrom math import sqrt\nfrom statistics import mean\n\ndef std_dev(numbers):\n    if len(numbers) > 1:\n        avg = mean(numbers)\n        var = sum((i - avg) ** 2 for i in numbers) / (len(numbers) - 1)\n        std = sqrt(var)\n        return std\n    return float('NaN')\n```\n\n<br/>\n\n**5) RMSE**. Calculate the RMSE (root mean squared error) of a model. The function takes in two lists: one with actual values, one with predictions.\n\n* `rmse([1, 2], [1, 2]) = 0`\n* `rmse([1, 2, 3], [3, 2, 1]) = 1.63`\n\n<img src=\"img/formula_rmse.png\" />\n\n```python\nimport math\n\ndef rmse(y_true, y_pred):\n    assert len(y_true) == len(y_pred), 'different sizes of the arguments'\n    squares = sum((x - y)**2 for x, y in zip(y_true, y_pred))\n    return math.sqrt(squares / len(y_true))\n```\n\n<br/>\n\n**6) Remove duplicates**. Remove duplicates in list. The list is not sorted and the order of elements from the original list should be preserved.\n\n* `[1, 2, 3, 1]` ⇒ `[1, 2, 3]`\n* `[1, 3, 2, 1, 5, 3, 5, 1, 4]` ⇒ `[1, 3, 2, 5, 4]`\n\n```python\ndef remove_duplicates(lst):\n    new_list = []\n    mentioned_values = set()\n    for elem in lst:\n        if elem not in mentioned_values:\n            new_list.append(elem)\n            mentioned_values.add(elem)\n    return new_list\n\n# The above solution checks the values into a set and it is O(1) efficient using\n# a few of lines.\n# A shorter solution follows: it is O(n^2) but can be fine when lst has no \"too\n# many elements\" - the quantity depends by the running box.\ndef remove_duplicates2(lst):\n    new_list = []\n    for elem in lst:\n        if elem not in new_list:\n            new_list.append(elem)\n    return new_list\n```\n\n<br/>\n\n**7) Count**. Count how many times each element in a list occurs.\n\n`[1, 3, 2, 1, 5, 3, 5, 1, 4]` ⇒  \n* 1: 3 times\n* 2: 1 time\n* 3: 2 times\n* 4: 1 time\n* 5: 2 times\n\n```python\nnumbers = [1, 3, 2, 1, 5, 3, 5, 1, 4]\ncounter = dict()\nfor elem in numbers:\n    counter[elem] = counter.get(elem, 0) + 1\n```\nor\n```python\nfrom collections import Counter\n\nnumbers = [1, 3, 2, 1, 5, 3, 5, 1, 4]\ncounter = Counter(numbers)\n```\n\n<br/>\n\n**8) Palindrome**. Is string a palindrome? A palindrome is a word which reads the same backward as forwards.\n\n* “ololo” ⇒ Yes\n* “cafe” ⇒ No\n\n```python\ndef is_palindrome(s):\n    return s == s[::-1]\n```\nor\n```python\ndef is_palindrome(s):\n    for i in range(len(s) // 2):\n        if s[i] != s[-i - 1]:\n            return False\n    return True\n```\n\n<br/>\n\n**9) Counter**. We have a list with identifiers of form “id-SITE”. Calculate how many ids we have per site.\n\n<img src=\"img/counter_1.png\" />\n\n```python\ndef counter(lst):\n    ans = {}\n    for i in lst:\n        site = i[-2:]\n        ans[site] = ans.get(site, 0) + 1\n    return ans\n```\n\n<br/>\n\n**10) Top counter**. We have a list with identifiers of form “id-SITE”. Show the top 3 sites. You can break ties in any way you want.\n\n<img src=\"img/counter_2_top.png\" />\n\n```python\ndef top_counter(lst):\n    site_dict = counter(lst)  # using last problem's solution\n    top_keys = sorted(site_dict, reverse=True, key=site_dict.get)[:3]\n    return {key: site_dict[key] for key in top_keys}\n```\n\n<br/>\n\n**11) RLE**. Implement RLE (run-length encoding): encode each character by the number of times it appears consecutively.\n\n* `'aaaabbbcca'` ⇒ `[('a', 4), ('b', 3), ('c', 2), ('a', 1)]`\n* (note that there are two groups of 'a')\n\n```python\ndef rle(s):\n    ans, cur, num = [], None, 0\n    for i in range(len(s)):\n        if i == 0:\n            cur, num = s[i], 1\n        elif cur != s[i]:\n            ans.append((cur, num))\n            cur, num = s[i], 1\n        else:\n            num += 1\n        if i == len(s) - 1:\n            ans.append((cur, num))\n    return ans\n```\n\nUsing itertools.groupby\n```python\nimport itertools\n\ndef rle(s):\n    return [(l, len(list(g))) for l, g in itertools.groupby(s)]\n```\n\n<br/>\n\n**12) Jaccard**. Calculate the Jaccard similarity between two sets: the size of intersection divided by the size of union.\n\n* `jaccard({'a', 'b', 'c'}, {'a', 'd'}) = 1 / 4`\n\n<img src=\"img/formula_jaccard.png\" />\n\n```python\ndef jaccard(a, b):\n    return len(a & b) / len(a | b)\n```\n\n<br/>\n\n**13) IDF**. Given a collection of already tokenized texts, calculate the IDF (inverse document frequency) of each token.\n\n* input example: `[['interview', 'questions'], ['interview', 'answers']]`\n\n<img src=\"img/formula_idf_1.png\" />\n\nWhere:\n\n* t is the token,\n* n(t) is the number of documents that t occurs in,\n* N is the total number of documents\n\n```python\nfrom math import log10\n\ndef idf1(docs):\n    docs = [set(doc) for doc in docs]\n    n_tokens = {}\n    for doc in docs:\n        for token in doc:\n            n_tokens[token] = n_tokens.get(token, 0) + 1\n    ans = {}\n    for token in n_tokens:\n        ans[token] = log10(len(docs) / (1 + n_tokens[token]))\n    return ans\n```\n\n```python\nimport math\n\ndef idf2(docs):\n    n_docs = len(docs)\n\n    docs = [set(doc) for doc in docs]\n    all_tokens = set.union(*docs)\n\n    idf_coefficients = {}\n    for token in all_tokens:\n        n_docs_w_token = sum(token in doc for doc in docs)\n        idf_c = math.log10(n_docs / (1 + n_docs_w_token))\n        idf_coefficients[token] = idf_c\n\n    return idf_coefficients\n```\n\n<br/>\n\n**14) PMI**. Given a collection of already tokenized texts, find the PMI (pointwise mutual information) of each pair of tokens. Return top 10 pairs according to PMI.\n\n* input example: `[['interview', 'questions'], ['interview', 'answers']]`\n\nPMI is used for finding collocations in text — things like “New York” or “Puerto Rico”. For two consecutive words, the PMI between them is:\n\n<img src=\"img/formula_pmi_1.png\" />\n\nThe higher the PMI, the more likely these two tokens form a collection. We can estimate PMI by counting:\n\n<img src=\"img/formula_pmi_2.png\" />\n\nWhere:\n* N is the total number of tokens in the text,\n* c(t1, t2) is the number of times t1 and t2 appear together,\n* c(t1) and c(t2) — the number of times they appear separately.\n\n```python\nimport math\n\ndef pmi(docs):\n    n_pairs = {}\n    n_tokens = {}\n\n    docs = [tuple(doc) for doc in docs]\n    for doc in docs:\n        for token in doc:\n            n_tokens[token] = n_tokens.get(token, 0) + 1\n\n        n_pairs[doc] = n_pairs.get(doc, 0) + 1\n        ans = {}\n        for pair in n_pairs:\n            ans[pair] = math.log2(n_pairs[pair] * (sum(n_tokens.values())) / (n_tokens[pair[0]] * n_tokens[pair[1]]))\n\n        srt = sorted(ans.items(), key=lambda x: x[1], reverse=True)[:10]\n\n    return srt\n```\n\n\n<br/>\n\n## Algorithmic Questions\n\n**1) Two sum**. Given an array and a number N, return True if there are numbers A, B in the array such that A + B = N. Otherwise, return False.\n\n* `[1, 2, 3, 4], 5` ⇒ `True`\n* `[3, 4, 6], 6` ⇒ `False`\n\nBrute force, O(n<sup>2</sup>):\n\n```python\ndef two_sum(numbers, target):\n    n = len(numbers)\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if numbers[i] + numbers[j] == target:\n                return True\n\n    return False\n```\n\nLinear, O(n):\n\n```python\ndef two_sum(numbers, target):\n    index = {num: i for (i, num) in enumerate(numbers)}\n\n    n = len(numbers)\n\n    for i in range(n):\n        a = numbers[i]\n        b = target - a\n\n        if b in index:\n            j = index[b]\n            if i != j:\n                return True\n\n    return False\n```\n\nUsing itertools.combinations\n```python\nfrom itertools import combinations\n\ndef two_sum(numbers, target):\n    for elem in combinations(numbers, 2):\n        if elem[0] + elem[1] == target:\n            return True\n    return False\n```\n\n\n<br/>\n\n**2) Fibonacci**. Return the n-th Fibonacci number, which is computed using this formula:\n\n* F(0) = 0\n* F(1) = 1\n* F(n) = F(n-1) + F(n-2)\n* The sequence is: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\n\n```python\ndef fibonacci1(n):\n    '''naive, complexity = O(2 ** n)'''\n    if n == 0 or n == 1:\n        return n\n    else:\n        return fibonacci1(n - 1) + fibonacci1(n - 2)\n```\n\n```python\ndef fibonacci2(n):\n    '''dynamic programming, complexity = O(n)'''\n    base1, base2 = 0, 1\n    for i in range(n):\n        base1, base2 = base2, base1 + base2\n    return base1\n```\n\n```python\ndef fibonacci3(n):\n    '''matrix multiplication, complexity = O(log(n))'''\n    def mx_mul(m1, m2):\n        ans = [[0 for i in range(len(m2[0]))] for j in range(len(m1))]\n        for i in range(len(m1)):\n            for j in range(len(m2[0])):\n                for k in range(len(m2)):\n                    ans[i][j] += m1[i][k] * m2[k][j]\n        return ans\n    def pow(a, b):\n        ans = [[1, 0], [0, 1]]\n        while b > 0:\n            if b % 2 == 1:\n                ans = mx_mul(ans, a)\n            a = mx_mul(a, a)\n            b //= 2\n        return ans\n    ans = mx_mul(pow([[1, 1], [1, 0]], n), [[1], [0]])[1][0]\n    return ans\n```\n\nMemoization with a dictionary\n\n```python\nmemo = {0: 0, 1: 1}\n\ndef fibonacci4(n):\n    '''Top down + memorization (dictionary), complexity = O(n)'''\n    if n not in memo:\n        memo[n] = fibonacci4(n-1) + fibonacci4(n-2)\n    return memo[n]\n```\n\nMemoization with `lru_cache`\n\n```python\nfrom functools import lru_cache\n\n@lru_cache()\ndef fibonacci4(n):\n    if n == 0 or n == 1:\n        return n\n    return fibonacci4(n - 1) + fibonacci4(n - 2)\n```\n\n```python\ndef fibonacci5(n):\n    '''Top down + memorization (list), complexity = O(n) '''\n     if n == 1:\n        return 1\n    dic = [-1 for i in range(n)]\n    dic[0], dic[1] = 1, 2\n    def helper(n, dic):\n        if dic[n] < 0:\n            dic[n] = helper(n-1, dic) + helper(n-2, dic)\n        return dic[n]\n    return helper(n-1, dic)\n```\n\n\n\n<br/>\n\n**3) Most frequent outcome**. We have two dice of different sizes (D1 and D2). We roll them and sum their face values. What are the most probable outcomes?\n\n* 6, 6 ⇒ [7]\n* 2, 4 ⇒ [3, 4, 5]\n\n```python\ndef most_frequent_outcome(d1, d2):\n    len_ans = abs(d1 - d2) + 1\n    mi = min(d1, d2)\n    ans = [mi + i for i in range(1, len_ans + 1)]\n    return ans\n```\n\n<br/>\n\n**4) Reverse a linked list**. Write a function for reversing a linked list.\n\n* The definition of a list node: `Node(value, next)`\n* Example: `a -> b -> c` ⇒ `c -> b -> a`\n\n```python\ndef reverse_ll(head):\n    if head.next is not None:\n        last = None\n        point = head\n        while point is not None:\n            point.next, point, last = last, point.next, point\n```\n\n<br/>\n\n**5) Flip a binary tree**. Write a function for rotating a binary tree.\n\n* The definition of a tree node: `Node(value, left, right)`\n\n<img src=\"img/flip_binary_tree.png\" />\n\n```python\ndef flip_bt(head):\n    if head is not None:\n        head.left, head.right = head.right, head.left\n        flip_bt(head.left)\n        flip_bt(head.right)\n```\n\n<br/>\n\n**6) Binary search**. Return the index of a given number in a sorted array or -1 if it’s not there.\n\n* `[1, 4, 6, 10], 4` ⇒ `1`\n* `[1, 4, 6, 10], 3` ⇒ `-1`\n\n```python\ndef binary_search(lst, num):\n    left, right = -1, len(lst)\n    while right - left > 1:\n        mid = (left + right) // 2\n        if lst[mid] >= num:\n            right = mid\n        else:\n            left = mid\n    if right < 0 or right >= len(lst) or lst[right] != num:\n        return -1\n    else:\n        return right\n```\n\n<br/>\n\n**7) Deduplication**. Remove duplicates from a sorted array.\n\n* `[1, 1, 1, 2, 3, 4, 4, 4, 5, 6, 6]` ⇒ `[1, 2, 3, 4, 5, 6]`\n\n```python\ndef deduplication1(lst):\n    '''manual'''\n    ans = []\n    last = None\n    for i in lst:\n        if last != i:\n            ans.append(i)\n            last = i\n    return ans\n\ndef deduplication2(lst):\n    # order is not guaranteed unless call sorted(list(set(lst))) to sort again\n    return list(set(lst))\n```\n\n<br/>\n\n**8) Intersection**. Return the intersection of two sorted arrays.\n\n* `[1, 2, 4, 6, 10], [2, 4, 5, 7, 10]` ⇒ `[2, 4, 10]`\n\n```python\ndef intersection1(lst1, lst2):\n    '''reserves duplicates'''\n    ans = []\n    p1, p2 = 0, 0\n    while p1 < len(lst1) and p2 < len(lst2):\n        if lst1[p1] == lst2[p2]:\n            ans.append(lst1[p1])\n            p1, p2 = p1 + 1, p2 + 1\n        elif lst1[p1] < lst2[p2]:\n            p1 += 1\n        else:\n            p2 += 1\n    return ans\n\ndef intersection2(lst1, lst2):\n    '''removes duplicates'''\n    # order is not guaranteed unless call sorted(...) to sort again\n    return list(set(lst1) & set(lst2))\n```\n\n<br/>\n\n**9) Union**. Return the union of two sorted arrays.\n\n* `[1, 2, 4, 6, 10], [2, 4, 5, 7, 10]` ⇒ `[1, 2, 4, 5, 6, 7, 10]`\n\n```python\ndef union1(lst1, lst2):\n    '''reserves duplicates'''\n    ans = []\n    p1, p2 = 0, 0\n    while p1 < len(lst1) or p2 < len(lst2):\n        if lst1[p1] == lst2[p2]:\n            ans.append(lst1[p1])\n            p1, p2 = p1 + 1, p2 + 1\n        elif lst1[p1] < lst2[p2]:\n            ans.append(lst1[p1])\n            p1 += 1\n        else:\n            ans.append(lst2[p2])\n            p2 += 1\n    return ans\n\ndef union2(lst1, lst2):\n    '''removes duplicates'''\n    # order is not guaranteed unless call sorted(...) to sort again\n    return list(set(lst1) | set(lst2))\n```\n\n<br/>\n\n**10) Addition**. Implement the addition algorithm from school. Suppose we represent numbers by a list of integers from 0 to 9:\n\n* 12 is `[1, 2]`\n* 1000 is `[1, 0, 0, 0]`\n\nImplement the “+” operation for this representation\n\n* `[1, 1] + [1]` ⇒ `[1, 2]`\n* `[9, 9] + [2]` ⇒ `[1, 0, 1]`\n\n```python\ndef addition(lst1, lst2):\n    def list_to_int(lst):\n        ans, base = 0, 1\n        for i in lst[::-1]:\n            ans += i * base\n            base *= 10\n        return ans\n    val = list_to_int(lst1) + list_to_int(lst2)\n    ans = [int(i) for i in str(val)]\n    return ans\n\n# another solution without int() and str() should be helpful\ndef addition2(lst1, lst2):\n    if len(lst2) == 0 or lst2 == [0]:\n        return lst1[:]\n    elif len(lst1) == 0:\n        return lst2[:]\n    # lst1, lst2 not empty\n    digit1, lst1rest = lst1[-1], lst1[:-1]\n    digit2, lst2rest = lst2[-1], lst2[:-1]\n    digit, remainder = divmod(digit1 + digit2, 10)\n    lst = addition2(\n        addition2(lst1rest, [digit]),  # recursively add digit to lst1\n        lst2rest)  # and then continue to add lst2\n    ans = lst + [remainder]  # add the remainder as last digit\n    return ans\n```\n\n<br/>\n\n**11) Sort by custom alphabet**. You’re given a list of words and an alphabet (e.g. a permutation of Latin alphabet). You need to use this alphabet to order words in the list.\n\nExample:\n\n* Words: `['home', 'oval', 'cat', 'egg', 'network', 'green']`\n* Dictionary: `'bcdfghijklmnpqrstvwxzaeiouy'`\n\nOutput:\n\n* `['cat', 'green', 'home', 'network', 'egg', 'oval']`\n\n```python\ndef sort_by_custom_alphabet(dictionary, words):\n    words = sorted(words, key = lambda word: [dictionary.index(c) for c in word])\n    return words\n```\n\n<br/>\n\n**12) Check if a tree is a binary search tree**. In BST, the element in the root is:\n\n* Greater than or equal to the numbers on the left\n* Less than or equal to the number on the right\n* The definition of a tree node: `Node(value, left, right)`\n\n```python\ndef check_is_bst(head, min_val=None, max_val=None):\n    \"\"\"Check whether binary tree is binary search tree\n\n    Aside of the obvious node.left.val <= node.val <= node.right.val have to be\n    fulfilled, we also have to make sure that there is NO SINGLE leaves in the\n    left part of node have more value than the current node.\n    \"\"\"\n    check_val = True\n    check_left = True\n    check_right = True\n\n    if min_val:\n        check_val = check_val and (head.val >= min_val)\n        min_new = min(min_val, head.val)\n    else:\n        min_new = head.val\n\n    if max_val:\n        check_val = check_val and (head.val <= max_val)\n        max_new = max(max_val, head.val)\n    else:\n        max_new = head.val\n\n    if head.left:\n        check_left = check_is_bst(head.left, min_val, max_new)\n\n    if head.right:\n        check_right = check_is_bst(head.right, min_new, max_val)\n\n    return check_val and check_left and check_right\n```\n\n<br/>\n\n\n**13) Maximum Sum Contiguous Subarray**. You are given an array `A` of length `N`, you have to find the largest possible sum of an Subarray, of array `A`.  \n* `[-2, 1, -3, 4, -1, 2, 1, -5, 4]` gives `6` as largest sum (from the subarray `[4, -1, 2, -1]`\n\n```python\nfrom sys import maxsize\ndef max_sum_subarr(list1, size):\n      \"\"\"Use Kadane's Algorithm for a optimal solution\n      Time Complexity: O(n)\n      Desciption: Use one variable for current sum, and one for Overall sum at an index.\n                  So here, the global_max will keep on updating the max sum at any index-1,\n                  and curr_max will check the max value at an index.\n                  And finally after iterating through the list, return the value of global_max variable which contains Maximum sum.\n      \"\"\"\n    curr_max=list1[0]\n    global_max=list1[0]\n    for each in range(1, size):\n        curr_max = max(list1[each], curr_max+list1[each])\n        global_max = max(global_max, curr_max)\n    return global_max\n\nn = int(input())         \nlist1 = []\nfor i in range(0,n):\n    num = int(input())\n    list1.append(num)\n\nprint(max_sum_subarr(list1, len(list1)))\n```\n\n<br/>\n\n**14) Three sum**. Given an array, and a target value, find all possible combinations of three distinct numbers such that the sum of these three distinct numbers is equal to the target value.\n\nExample:\n\n    Input: [12, 3, 1, 2, -6, 5, -8, 6], 0\n    Output: [[-8, 2, 6], [-8, 3, 5], [-6, 1, 5]]\n\n```python\ndef threeSum(array, target):\n    array.sort()\n    triplets = []\n    \n    for i in range(len(array) - 2):\n        left = i + 1\n        right = len(array) - 1\n        while left < right:\n            currentSum = array[i] + array[left] + array[right]\n            if currentSum == target:\n                triplets.append([array[i], array[left], array[right]])\n                left += 1\n                right -= 1\n            elif currentSum > target:\n                right -= 1\n            elif currentSum < target:\n                left += 1\n    return triplets\n```\n\n**15) Find Duplicate in array** Given and array, find all duplicated value in the array\n\nExample:\n  \n   input: [1,2,3,4,3,4,5]\n   output: [3,4]\n   \n```python\na = [1,2,3,4,3,4,5]\n\ndef duplicates(a):\n   seen = set()\n   duplicated = set()\n   for i in a:\n      if i in seen:\n         duplicated.add(i)\n      else:\n         seen.add(i)\n   return duplicated\n```\n"
        },
        {
          "name": "theory.md",
          "type": "blob",
          "size": 79.5732421875,
          "content": "# Theoretical interview questions\n\n<table>\n   <tr>\n      <td>⚠️</td>\n      <td>\n         The answers here are given by the community. Be careful and double check the answers before using them. <br>\n         If you see an error, please create a PR with a fix\n      </td>\n   </tr>\n</table>\n\n\n* The list of questions is based on [this post](https://medium.com/data-science-insider/160-data-science-interview-questions-14dbd8bf0a08?source=friends_link&sk=7acf122a017c672a95f70c7cb7b585c0)\n* Legend: 👶 easy ‍⭐️ medium 🚀 expert\n* Do you know how to answer questions without answers? Please create a PR\n\n\n## Table of contents\n\n* [Supervised machine learning](#supervised-machinelearning)\n* [Linear regression](#linear-regression)\n* [Validation](#validation)\n* [Classification](#classification)\n* [Regularization](#regularization)\n* [Feature selection](#feature-selection)\n* [Decision trees](#decision-trees)\n* [Random forest](#random-forest)\n* [Gradient boosting](#gradient-boosting)\n* [Parameter tuning](#parameter-tuning)\n* [Neural networks](#neural-networks)\n* [Optimization in neural networks](#optimization-in-neuralnetworks)\n* [Neural networks for computer vision](#neural-networks-for-computervision)\n* [Text classification](#text-classification)\n* [Clustering](#clustering)\n* [Dimensionality reduction](#dimensionality-reduction)\n* [Ranking and search](#ranking-andsearch)\n* [Recommender systems](#recommender-systems)\n* [Time series](#time-series)\n\n<br/>\n\n## Supervised machine learning\n\n**What is supervised machine learning? 👶**\n\nSupervised learning is a type of machine learning in which our algorithms are trained using well-labeled training data, and machines predict the output based on that data. Labeled data indicates that the input data has already been tagged with the appropriate output. Basically, it is the task of learning a function that maps the input set and returns an output. Some of its examples are: Linear Regression, Logistic Regression, KNN, etc.\n\nk-Nearest Neighbors(KNN):Looking at the k closest labeled data points \n\n<br/>\n\n## Linear regression\n\n**What is regression? Which models can you use to solve a regression problem? 👶**\n\nRegression is a part of supervised ML. Regression models investigate the relationship between a dependent (target) and independent variable (s) (predictor).\nHere are some common regression models\n\n- *Linear Regression* establishes a linear relationship between target and predictor (s). It predicts a numeric value and has a shape of a straight line.\n- *Polynomial Regression* has a regression equation with the power of independent variable more than 1. It is a curve that fits into the data points.\n- *Ridge Regression* helps when predictors are highly correlated (multicollinearity problem). It penalizes the squares of regression coefficients but doesn’t allow the coefficients to reach zeros (uses L2 regularization).\n- *Lasso Regression* penalizes the absolute values of regression coefficients and allows some of the coefficients to reach absolute zero (thereby allowing feature selection).\n\n<br/>\n\n**What is linear regression? When do we use it? 👶**\n\nLinear regression is a model that assumes a linear relationship between the input variables (X) and the single output variable (y).\n\nWith a simple equation:\n\n```\ny = B0 + B1*x1 + ... + Bn * xN\n```\n\nB is regression coefficients, x values are the independent (explanatory) variables  and y is dependent variable.\n\nThe case of one explanatory variable is called simple linear regression. For more than one explanatory variable, the process is called multiple linear regression.\n\nSimple linear regression:\n\n```\ny = B0 + B1*x1\n```\n\nMultiple linear regression:\n\n```\ny = B0 + B1*x1 + ... + Bn * xN\n```\n\n<br/>\n\n**What are the main assumptions of linear regression? ⭐**\n\nThere are several assumptions of linear regression. If any of them is violated, model predictions and interpretation may be worthless or misleading.\n\n1. **Linear relationship** between features and target variable.\n2. **Additivity** means that the effect of changes in one of the features on the target variable does not depend on values of other features. For example, a model for predicting revenue of a company have of two features - the number of items _a_ sold and the number of items _b_ sold. When company sells more items _a_ the revenue increases and this is independent of the number of items _b_ sold. But, if customers who buy _a_ stop buying _b_, the additivity assumption is violated.\n3. Features are not correlated (no **collinearity**) since it can be difficult to separate out the individual effects of collinear features on the target variable.\n4. Errors are independently and identically normally distributed (y<sub>i</sub> = B0 + B1*x1<sub>i</sub> + ... + error<sub>i</sub>):\n   1. No correlation between errors (consecutive errors in the case of time series data).\n   2. Constant variance of errors - **homoscedasticity**. For example, in case of time series, seasonal patterns can increase errors in seasons with higher activity.\n   3. Errors are normally distributed, otherwise some features will have more influence on the target variable than to others. If the error distribution is significantly non-normal, confidence intervals may be too wide or too narrow.\n\n<br/>\n\n**What’s the normal distribution? Why do we care about it? 👶**\n\nThe normal distribution is a continuous probability distribution whose probability density function takes the following formula:\n\n![formula](https://mathworld.wolfram.com/images/equations/NormalDistribution/NumberedEquation1.gif)\n\nwhere μ is the mean and σ is the standard deviation of the distribution.\n\nThe normal distribution derives its importance from the **Central Limit Theorem**, which states that if we draw a large enough number of samples, their mean will follow a normal distribution regardless of the initial distribution of the sample, i.e **the distribution of the mean of the samples is normal**. It is important that each sample is independent from the other.\n\nThis is powerful because it helps us study processes whose population distribution is unknown to us.\n\n\n<br/>\n\n**How do we check if a variable follows the normal distribution? ‍⭐️**\n\n1. Plot a histogram out of the sampled data. If you can fit the bell-shaped \"normal\" curve to the histogram, then the hypothesis that the underlying random variable follows the normal distribution can not be rejected.\n2. Check Skewness and Kurtosis of the sampled data. Skewness = 0 and kurtosis = 3 are typical for a normal distribution, so the farther away they are from these values, the more non-normal the distribution.\n3. Use Kolmogorov-Smirnov or/and Shapiro-Wilk tests for normality. They take into account both Skewness and Kurtosis simultaneously.\n4. Check for Quantile-Quantile plot. It is a scatterplot created by plotting two sets of quantiles against one another. Normal Q-Q plot place the data points in a roughly straight line.\n\n<br/>\n\n**What if we want to build a model for predicting prices? Are prices distributed normally? Do we need to do any pre-processing for prices? ‍⭐️**\n\nData is not normal. Specially, real-world datasets or uncleaned datasets always have certain skewness. Same goes for the price prediction. Price of houses or any other thing under consideration depends on a number of factors. So, there's a great chance of presence of some skewed values i.e outliers if we talk in data science terms. \n\nYes, you may need to do pre-processing. Most probably, you will need to remove the outliers to make your distribution near-to-normal.\n\n<br/>\n\n**What methods for solving linear regression do you know? ‍⭐️**\n\nTo solve linear regression, you need to find the coefficients <img src=\"https://render.githubusercontent.com/render/math?math=\\beta\"> which minimize the sum of squared errors.\n\nMatrix Algebra method: Let's say you have `X`, a matrix of features, and `y`, a vector with the values you want to predict. After going through the matrix algebra and minimization problem, you get this solution: <img src=\"https://render.githubusercontent.com/render/math?math=\\beta = (X^{T}X)^{-1}X^{T}y\">. \n\nBut solving this requires you to find an inverse, which can be time-consuming, if not impossible. Luckily, there are methods like Singular Value Decomposition (SVD) or QR Decomposition that can reliably calculate this part <img src=\"https://render.githubusercontent.com/render/math?math=(X^{T}X)^{-1}X^{T}\"> (called the pseudo-inverse) without actually needing to find an inverse. The popular python ML library `sklearn` uses SVD to solve least squares.\n\nAlternative method: Gradient Descent. See explanation below.\n\n<br/>\n\n**What is gradient descent? How does it work? ‍⭐️**\n\nGradient descent is an algorithm that uses calculus concept of gradient to try and reach local or global minima. It works by taking the negative of the gradient in a point of a given function, and updating that point repeatedly using the calculated negative gradient, until the algorithm reaches a local or global minimum, which will cause future iterations of the algorithm to return values that are equal or too close to the current point. It is widely used in machine learning applications.\n\n<br/>\n\n**What is the normal equation? ‍⭐️**\n\nNormal equations are equations obtained by setting equal to zero the partial derivatives of the sum of squared errors (least squares); normal equations allow one to estimate the parameters of a multiple linear regression.\n\n<br/>\n\n**What is SGD  —  stochastic gradient descent? What’s the difference with the usual gradient descent? ‍⭐️**\n\nIn both gradient descent (GD) and stochastic gradient descent (SGD), you update a set of parameters in an iterative manner to minimize an error function.\n\nThe difference lies in how the gradient of the loss function is estimated. In the usual GD, you have to run through ALL the samples in your training set in order to estimate the gradient and do a single update for a parameter in a particular iteration. In SGD, on the other hand, you use ONLY ONE or SUBSET of training sample from your training set to estimate the gradient and do the update for a parameter in a particular iteration. If you use SUBSET, it is called Minibatch Stochastic gradient Descent.\n\n<br/>\n\n**Which metrics for evaluating regression models do you know? 👶**\n\n1. Mean Squared Error(MSE)\n2. Root Mean Squared Error(RMSE)\n3. Mean Absolute Error(MAE)\n4. R² or Coefficient of Determination\n5. Adjusted R²\n\n<br/>\n\n**What are MSE and RMSE? 👶**\n\nMSE stands for <strong>M</strong>ean <strong>S</strong>quare <strong>E</strong>rror while RMSE stands for <strong>R</strong>oot <strong>M</strong>ean <strong>S</strong>quare <strong>E</strong>rror. They are metrics with which we can evaluate models.\n\n<br/>\n\n**What is the bias-variance trade-off? 👶**\n\n**Bias** is the error introduced by approximating the true underlying function, which can be quite complex, by a simpler model. **Variance** is a model sensitivity to changes in the training dataset.\n\n**Bias-variance trade-off** is a relationship between the expected test error and the variance and the bias - both contribute to the level of the test error and ideally should be as small as possible:\n\n```\nExpectedTestError = Variance + Bias² + IrreducibleError\n```\n\nBut as a model complexity increases, the bias decreases and the variance increases which leads to *overfitting*. And vice versa, model simplification helps to decrease the variance but it increases the bias which leads to *underfitting*.\n\n<br/>\n\n\n## Validation\n\n**What is overfitting? 👶**\n\nWhen your model perform very well on your training set but can't generalize the test set, because it adjusted a lot to the training set.\n\n<br/>\n\n**How to validate your models? 👶**\n\nOne of the most common approaches is splitting data into train, validation and test parts.\nModels are trained on train data, hyperparameters (for example early stopping) are selected based on the validation data, the final measurement is done on test dataset.\nAnother approach is cross-validation: split dataset into K folds and each time train models on training folds and measure the performance on the validation folds.\nAlso you could combine these approaches: make a test/holdout dataset and do cross-validation on the rest of the data. The final quality is measured on test dataset.\n\n<br/>\n\n**Why do we need to split our data into three parts: train, validation, and test? 👶**\n\nThe training set is used to fit the model, i.e. to train the model with the data. The validation set is then used to provide an unbiased evaluation of a model while fine-tuning hyperparameters. This improves the generalization of the model. Finally, a test data set which the model has never \"seen\" before should be used for the final evaluation of the model. This allows for an unbiased evaluation of the model. The evaluation should never be performed on the same data that is used for training. Otherwise the model performance would not be representative.\n\n<br/>\n\n**Can you explain how cross-validation works? 👶**\n\nCross-validation is the process to separate your total training set into two subsets: training and validation set, and evaluate your model to choose the hyperparameters. But you do this process iteratively, selecting different training and validation set, in order to reduce the bias that you would have by selecting only one validation set.\n\n<br/>\n\n**What is K-fold cross-validation? 👶**\n\nK fold cross validation is a method of cross validation where we select a hyperparameter k. The dataset is now divided into k parts. Now, we take the 1st part as validation set and remaining k-1 as training set. Then we take the 2nd part as validation set and remaining k-1 parts as training set. Like this, each part is used as validation set once and the remaining k-1 parts are taken together and used as training set.\nIt should not be used in a time series data.\n\n<br/>\n\n**How do we choose K in K-fold cross-validation? What’s your favorite K? 👶**\n\nThere are two things to consider while deciding K: the number of models we get and the size of validation set. We do not want the number of models to be too less, like 2 or 3. At least 4 models give a less biased decision on the metrics. On the other hand, we would want the dataset to be at least 20-25% of the entire data. So that at least a ratio of 3:1 between training and validation set is maintained. <br/>\nI tend to use 4 for small datasets and 5 for large ones as K.\n\n<br/>\n\n\n## Classification\n\n**What is classification? Which models would you use to solve a classification problem? 👶**\n\nClassification problems are problems in which our prediction space is discrete, i.e. there is a finite number of values the output variable can be. Some models which can be used to solve classification problems are: logistic regression, decision tree, random forests, multi-layer perceptron, one-vs-all, amongst others.\n\n<br/>\n\n**What is logistic regression? When do we need to use it? 👶**\n\nLogistic regression is a Machine Learning algorithm that is used for binary classification. You should use logistic regression when your Y variable takes only two values, e.g. True and False, \"spam\" and \"not spam\", \"churn\" and \"not churn\" and so on. The variable is said to be a \"binary\" or \"dichotomous\".\n\n<br/>\n\n**Is logistic regression a linear model? Why? 👶**\n\nYes, Logistic Regression is considered a generalized linear model because the outcome always depends on the sum of the inputs and parameters. Or in other words, the output cannot depend on the product (or quotient, etc.) of its parameters.\n\n<br/>\n\n**What is sigmoid? What does it do? 👶**\n\nA sigmoid function is a type of activation function, and more specifically defined as a squashing function. Squashing functions limit the output to a range between 0 and 1, making these functions useful in the prediction of probabilities.\n\nSigmod(x) = 1/(1+e^{-x})\n\n<br/>\n\n**How do we evaluate classification models? 👶**\n\nDepending on the classification problem, we can use the following evaluation metrics:\n\n1. Accuracy\n2. Precision\n3. Recall\n4. F1 Score\n5. Logistic loss (also known as Cross-entropy loss)\n6. Jaccard similarity coefficient score\n\n<br/>\n\n**What is accuracy? 👶**\n\nAccuracy is a metric for evaluating classification models. It is calculated by dividing the number of correct predictions by the number of total predictions.\n\n<br/>\n\n**Is accuracy always a good metric? 👶**\n\nAccuracy is not a good performance metric when there is imbalance in the dataset. For example, in binary classification with 95% of A class and 5% of B class, a constant prediction of A class would have an accuracy of 95%. In case of imbalance dataset, we need to choose Precision, recall, or F1 Score depending on the problem we are trying to solve.\n\n<br/>\n\n**What is the confusion table? What are the cells in this table? 👶**\n\nConfusion table (or confusion matrix) shows how many True positives (TP), True Negative (TN), False Positive (FP) and False Negative (FN) model has made.\n\n||                |     Actual   |        Actual |\n|:---:|   :---:        |     :---:    |:---:          |\n||                | Positive (1) | Negative (0)  |\n|Predicted|   Positive (1) | TP           | FP            |\n|Predicted|   Negative (0) | FN           | TN            |\n\n* True Positives (TP): When the actual class of the observation is 1 (True) and the prediction is 1 (True)\n* True Negative (TN): When the actual class of the observation is 0 (False) and the prediction is 0 (False)\n* False Positive (FP): When the actual class of the observation is 0 (False) and the prediction is 1 (True)\n* False Negative (FN): When the actual class of the observation is 1 (True) and the prediction is 0 (False)\n\nMost of the performance metrics for classification models are based on the values of the confusion matrix.\n\n<br/>\n\n**What are precision, recall, and F1-score? 👶**\n\n* Precision and recall are classification evaluation metrics:\n* P = TP / (TP + FP) and R = TP / (TP + FN).\n* Where TP is true positives, FP is false positives and FN is false negatives\n* In both cases the score of 1 is the best: we get no false positives or false negatives and only true positives.\n* F1 is a combination of both precision and recall in one score (harmonic mean):\n* F1 = 2 * PR / (P + R).\n* Max F score is 1 and min is 0, with 1 being the best.\n\n<br/>\n\n**Precision-recall trade-off ‍⭐️**\n\nTradeoff means increasing one parameter would lead to decreasing of other. Precision-recall tradeoff occur due to increasing one of the parameter(precision or recall) while keeping the model same. \n\nIn an ideal scenario where there is a perfectly separable data, both precision and recall can get maximum value of 1.0. But in most of the practical situations, there is noise in the dataset and the dataset is not perfectly separable. There might be some points of positive class closer to the negative class and vice versa. In such cases, shifting the decision boundary can either increase the precision or recall but not both. Increasing one parameter leads to decreasing of the other. \n\n<br/>\n\n**What is the ROC curve? When to use it? ‍⭐️**\n\nROC stands for *Receiver Operating Characteristics*. The diagrammatic representation that shows the contrast between true positive rate vs false positive rate. It is used when we need to predict the probability of the binary outcome.\n\n<br/>\n\n**What is AUC (AU ROC)? When to use it? ‍⭐️**\n\nAUC stands for *Area Under the ROC Curve*. ROC is a probability curve and AUC represents degree or measure of separability. It's used when we need to value how much model is capable of distinguishing between classes.  The value is between 0 and 1, the higher the better.\n\n<br/>\n\n**How to interpret the AU ROC score? ‍⭐️**\n\nAUC score is the value of *Area Under the ROC Curve*. \n\nIf we assume ROC curve consists of dots, <img src=\"https://render.githubusercontent.com/render/math?math=(x_1, y_1), (x_2, y_2), \\cdots, (x_m,y_m)\">, then\n\n<img src=\"https://render.githubusercontent.com/render/math?math=AUC = \\frac{1}{2} \\sum_{i=1}^{m-1}(x_{i%2B1}-x_i)\\cdot (y_i%2By_{i%2B1})\">\n\nAn excellent model has AUC near to the 1 which means it has good measure of separability. A poor model has AUC near to the 0 which means it has worst measure of separability. When AUC score is 0.5, it means model has no class separation capacity whatsoever. \n\n<br/>\n\n**What is the PR (precision-recall) curve? ‍⭐️**\n\nA *precision*-*recall curve* (or PR Curve) is a plot of the precision (y-axis) and the recall (x-axis) for different probability thresholds. Precision-recall curves (PR curves) are recommended for highly skewed domains where ROC curves may provide an excessively optimistic view of the performance.\n\n<br/>\n\n**What is the area under the PR curve? Is it a useful metric? ‍⭐️I**\n\nThe Precision-Recall AUC is just like the ROC AUC, in that it summarizes the curve with a range of threshold values as a single score.\n\nA high area under the curve represents both high recall and high precision, where high precision relates to a low false positive rate, and high recall relates to a low false negative rate.\n\n<br/>\n\n**In which cases AU PR is better than AU ROC? ‍⭐️**\n\nWhat is different however is that AU ROC looks at a true positive rate TPR and false positive rate FPR while AU PR looks at positive predictive value PPV and true positive rate TPR.\n\nTypically, if true negatives are not meaningful to the problem or you care more about the positive class, AU PR is typically going to be more useful; otherwise, If you care equally about the positive and negative class or your dataset is quite balanced, then going with AU ROC is a good idea.\n\n<br/>\n\n**What do we do with categorical variables? ‍⭐️**\n\nCategorical variables must be encoded before they can be used as features to train a machine learning model. There are various encoding techniques, including:\n- One-hot encoding\n- Label encoding\n- Ordinal encoding\n- Target encoding\n\n<br/>\n\n**Why do we need one-hot encoding? ‍⭐️**\n\nIf we simply encode categorical variables with a Label encoder, they become ordinal which can lead to undesirable consequences. In this case, linear models will treat category with id 4 as twice better than a category with id 2. One-hot encoding allows us to represent a categorical variable in a numerical vector space which ensures that vectors of each category have equal distances between each other. This approach is not suited for all situations, because by using it with categorical variables of high cardinality (e.g. customer id) we will encounter problems that come into play because of the curse of dimensionality.\n\n<br/>\n\n**What is \"curse of dimensionality\"? ‍⭐️**\n\nThe curse of dimensionality is an issue that arises when working with high-dimensional data. It is often said that \"the curse of dimensionality\" is one of the main problems with machine learning. The curse of dimensionality refers to the fact that, as the number of dimensions (features) in a data set increases, the number of data points required to accurately learn the relationships between those features increases exponentially.\n\nA simple example where we have a data set with two features, x1 and x2. If we want to learn the relationship between these two features, we need to have enough data points so that we can accurately estimate the parameters of that relationship. However, if we add a third feature, x3, then the number of data points required to accurately learn the relationships between all three features increases exponentially. This is because there are now more parameters to estimate, and the number of data points needed to accurately estimate those parameters increases exponentially with the number of parameters.\n\nSimply put, the curse of dimensionality basically means that the error increases with the increase in the number of features.\n\n<br/>\n\n\n## Regularization\n\n**What happens to our linear regression model if we have three columns in our data: x, y, z  —  and z is a sum of x and y? ‍⭐️**\n\nWe would not be able to perform the regression. Because z is linearly dependent on x and y so when performing the regression <img src=\"https://render.githubusercontent.com/render/math?math={X}^{T}{X}\"> would be a singular (not invertible) matrix.\n<br/>\n\n**What happens to our linear regression model if the column z in the data is a sum of columns x and y and some random noise? ‍⭐️**\n\nIt creates a situation known as multicollinearity. Multicollinearity occurs when two or more independent variables in a regression model are highly correlated, leading to issues in the estimation of the regression coefficients. The issue arises because the variables X and Y will be highly correlated, making it difficult for the model to distinguish the individual effects of X and Y on the dependent variable Z. To address it, feature selection, PCA or regularization techniques (L2) may be used.\n\n<br/>\n\n**What is regularization? Why do we need it? 👶**\n\nRegularization is used to reduce overfitting in machine learning models. It helps the models to generalize well and make them robust to outliers and noise in the data.\n\n<br/>\n\n**Which regularization techniques do you know? ‍⭐️**\n\nThere are mainly two types of regularization,\n1. L1 Regularization (Lasso regularization) - Adds the sum of absolute values of the coefficients to the cost function. <img src=\"https://render.githubusercontent.com/render/math?math=\\lambda\\sum_{i=1}^{n} \\left | w_i \\right |\">\n2. L2 Regularization (Ridge regularization) - Adds the sum of squares of coefficients to the cost function. <img src=\"https://render.githubusercontent.com/render/math?math=\\lambda\\sum_{i=1}^{n} {w_{i}}^{2}\">\n\n* Where <img src=\"https://render.githubusercontent.com/render/math?math=\\lambda\"> determines the amount of regularization.\n\n<br/>\n\n**What kind of regularization techniques are applicable to linear models? ‍⭐️**\n\nAIC/BIC, Ridge regression, Lasso, Elastic Net, Basis pursuit denoising, Rudin–Osher–Fatemi model (TV), Potts model, RLAD,\nDantzig Selector,SLOPE\n\n<br/>\n\n**How does L2 regularization look like in a linear model? ‍⭐️**\n\nL2 regularization adds a penalty term to our cost function which is equal to the sum of squares of models coefficients multiplied by a lambda hyperparameter. This technique makes sure that the coefficients are close to zero and is widely used in cases when we have a lot of features that might correlate with each other.\n\n<br/>\n\n**How do we select the right regularization parameters? 👶**\n\nRegularization parameters can be chosen using a grid search, for example https://scikit-learn.org/stable/modules/linear_model.html has one formula for the implementing for regularization, alpha in the formula mentioned can be found by doing a RandomSearch or a GridSearch on a set of values and selecting the alpha which gives the least cross validation or validation error.\n\n\n<br/>\n\n**What’s the effect of L2 regularization on the weights of a linear model? ‍⭐️**\n\nL2 regularization penalizes larger weights more severely (due to the squared penalty term), which encourages weight values to decay toward zero.\n\n<br/>\n\n**How L1 regularization looks like in a linear model? ‍⭐️**\n\nL1 regularization adds a penalty term to our cost function which is equal to the sum of modules of models coefficients multiplied by a lambda hyperparameter. For example, cost function with L1 regularization will look like: <img src=\"https://render.githubusercontent.com/render/math?math=\\sum_{i=0}^{N}%20(y_i%20-%20\\sum_{j=0}^{M}%20x_{ij}%20*%20w_j)%2B\\lambda\\sum_{j=0}^{M}%20\\left%20|%20w_j%20\\right%20|\">\n\n<br/>\n\n**What’s the difference between L2 and L1 regularization? ‍⭐️**\n\n- Penalty terms: L1 regularization uses the sum of the absolute values of the weights, while L2 regularization uses the sum of the weights squared.\n- Feature selection: L1 performs feature selection by reducing the coefficients of some predictors to 0, while L2 does not.\n- Computational efficiency: L2 has an analytical solution, while L1 does not.\n- Multicollinearity: L2 addresses multicollinearity by constraining the coefficient norm.\n\n<br/>\n\n**Can we have both L1 and L2 regularization components in a linear model? ‍⭐️**\n\nYes, elastic net regularization combines L1 and L2 regularization. \n\n<br/>\n\n**What’s the interpretation of the bias term in linear models? ‍⭐️**\n\nBias is simply, a difference between predicted value and actual/true value. It can be interpreted as the distance from the average prediction and true value i.e. true value minus mean(predictions). But dont get confused between accuracy and bias.\n\n<br/>\n\n**How do we interpret weights in linear models? ‍⭐️**\n\nWithout normalizing weights or variables, if you increase the corresponding predictor by one unit, the coefficient represents on average how much the output changes. By the way, this interpretation still works for logistic regression - if you increase the corresponding predictor by one unit, the weight represents the change in the log of the odds.\n\nIf the variables are normalized, we can interpret weights in linear models like the importance of this variable in the predicted result.\n\n<br/>\n\n**If a weight for one variable is higher than for another  —  can we say that this variable is more important? ‍⭐️**\n\nYes - if your predictor variables are normalized.\n\nWithout normalization, the weight represents the change in the output per unit change in the predictor. If you have a predictor with a huge range and scale that is used to predict an output with a very small range - for example, using each nation's GDP to predict maternal mortality rates - your coefficient should be very small. That does not necessarily mean that this predictor variable is not important compared to the others.\n\n<br/>\n\n**When do we need to perform feature normalization for linear models? When it’s okay not to do it? ‍⭐️**\n\nFeature normalization is necessary for L1 and L2 regularizations. The idea of both methods is to penalize all the features relatively equally. This can't be done effectively if every feature is scaled differently. \n\nLinear regression without regularization techniques can be used without feature normalization. Also, regularization can help to make the analytical solution more stable, — it adds the regularization matrix to the feature matrix before inverting it. \n\n<br/>\n\n\n## Feature selection\n\n**What is feature selection? Why do we need it? 👶**\n\nFeature Selection is a method used to select the relevant features for the model to train on. We need feature selection to remove the irrelevant features which leads the model to under-perform.  \n\n<br/>\n\n**Is feature selection important for linear models? ‍⭐️**\n\nYes, It is. It can make model performance better through selecting the most importance features and remove irrelevant features in order to make a prediction and it can also avoid overfitting, underfitting and bias-variance tradeoff. \n\n<br/>\n\n**Which feature selection techniques do you know? ‍⭐️**\n\nHere are some of the feature selections:\n- Principal Component Analysis\n- Neighborhood Component Analysis\n- ReliefF Algorithm\n\n<br/>\n\n**Can we use L1 regularization for feature selection? ‍⭐️**\n\nYes, because the nature of L1 regularization will lead to sparse coefficients of features. Feature selection can be done by keeping only features with non-zero coefficients.\n\n<br/>\n\n**Can we use L2 regularization for feature selection? ‍⭐️**\n\nNo, Because L2 regularization does not make the weights zero but only makes them very very small. L2 regularization can be used to solve multicollinearity since it stabilizes the model.\n\n<br/>\n\n\n## Decision trees\n\n**What are the decision trees? 👶**\n\nThis is a type of supervised learning algorithm that is mostly used for classification problems. Surprisingly, it works for both categorical and continuous dependent variables. \n\nIn this algorithm, we split the population into two or more homogeneous sets. This is done based on most significant attributes/ independent variables to make as distinct groups as possible.\n\nA decision tree is a flowchart-like tree structure, where each internal node (non-leaf node) denotes a test on an attribute, each branch represents an outcome of the test, and each leaf node (or terminal node) holds a value for the target variable.\n\nVarious techniques : like Gini, Information Gain, Chi-square, entropy.\n\n<br/>\n\n**How do we train decision trees? ‍⭐️**\n\n1. Start at the root node.\n2. For each variable X, find the set S_1 that minimizes the sum of the node impurities in the two child nodes and choose the split {X*,S*} that gives the minimum over all X and S.\n3. If a stopping criterion is reached, exit. Otherwise, apply step 2 to each child node in turn.\n\n<br/>\n\n**What are the main parameters of the decision tree model? 👶**\n\n* maximum tree depth\n* minimum samples per leaf node\n* impurity criterion\n\n<br/>\n\n**How do we handle categorical variables in decision trees? ‍⭐️**\n\nSome decision tree algorithms can handle categorical variables out of the box, others cannot. However, we can transform categorical variables, e.g. with a binary or a one-hot encoder.\n\n<br/>\n\n**What are the benefits of a single decision tree compared to more complex models? ‍⭐️**\n\n* easy to implement\n* fast training\n* fast inference\n* good explainability\n\n<br/>\n\n**How can we know which features are more important for the decision tree model? ‍⭐️**\n\nOften, we want to find a split such that it minimizes the sum of the node impurities. The impurity criterion is a parameter of decision trees. Popular methods to measure the impurity are the Gini impurity and the entropy describing the information gain.\n\n<br/>\n\n\n## Random forest\n\n**What is random forest? 👶**\n\nRandom Forest is a machine learning method for regression and classification which is composed of many decision trees. Random Forest belongs to a larger class of ML algorithms called ensemble methods (in other words, it involves the combination of several models to solve a single prediction problem).\n\n<br/>\n\n**Why do we need randomization in random forest? ‍⭐️**\n\nRandom forest in an extension of the **bagging** algorithm which takes *random data samples from the training dataset* (with replacement), trains several models and averages predictions. In addition to that, each time a split in a tree is considered, random forest takes a *random sample of m features from full set of n features* (without replacement) and uses this subset of features as candidates for the split (for example, `m = sqrt(n)`).\n\nTraining decision trees on random data samples from the training dataset *reduces variance*. Sampling features for each split in a decision tree *decorrelates trees*.\n\n<br/>\n\n**What are the main parameters of the random forest model? ‍⭐️**\n\n- `max_depth`: Longest Path between root node and the leaf\n- `min_sample_split`: The minimum number of observations needed to split a given node\n- `max_leaf_nodes`: Conditions the splitting of the tree and hence, limits the growth of the trees\n- `min_samples_leaf`: minimum number of samples in the leaf node\n- `n_estimators`: Number of trees\n- `max_sample`: Fraction of original dataset given to any individual tree in the given model\n- `max_features`: Limits the maximum number of features provided to trees in random forest model\n\n<br/>\n\n**How do we select the depth of the trees in random forest? ‍⭐️**\n\nThe greater the depth, the greater amount of information is extracted from the tree, however, there is a limit to this, and the algorithm even if defensive against overfitting may learn complex features of noise present in data and as a result, may overfit on noise. Hence, there is no hard thumb rule in deciding the depth, but literature suggests a few tips on tuning the depth of the tree to prevent overfitting:\n\n- limit the maximum depth of a tree\n- limit the number of test nodes\n- limit the minimum number of objects at a node required to split\n- do not split a node when, at least, one of the resulting subsample sizes is below a given threshold\n- stop developing a node if it does not sufficiently improve the fit.\n\n<br/>\n\n**How do we know how many trees we need in random forest? ‍⭐️**\n\nThe number of trees in random forest is worked by n_estimators, and a random forest reduces overfitting by increasing the number of trees. There is no fixed thumb rule to decide the number of trees in a random forest, it is rather fine tuned with the data, typically starting off by taking the square of the number of features (n) present in the data followed by tuning until we get the optimal results.\n\n<br/>\n\n**Is it easy to parallelize training of a random forest model? How can we do it? ‍⭐️**\n\nYes, R provides a simple way to parallelize training of random forests on large scale data.\nIt makes use of a parameter called multicombine which can be set to TRUE for parallelizing random forest computations.\n\n```R\nrf <- foreach(ntree=rep(25000, 6), .combine=randomForest::combine,\n              .multicombine=TRUE, .packages='randomForest') %dopar% {\n    randomForest(x, y, ntree=ntree)\n}\n```\n\n\n<br/>\n\n**What are the potential problems with many large trees? ‍⭐️**\n\n- Overfitting: A large number of large trees can lead to overfitting, where the model becomes too complex and is able to memorize the training data but doesn't generalize well to new, unseen data.\n\n- Slow prediction time: As the number of trees in the forest increases, the prediction time for new data points can become quite slow. This can be a problem when you need to make predictions in real-time or on a large dataset.\n\n- Memory consumption: Random Forest models with many large trees can consume a lot of memory, which can be a problem when working with large datasets or on a limited hardware.\n\n- Lack of interpretability: Random Forest models with many large trees can be difficult to interpret, making it harder to understand how the model is making predictions or what features are most important.\n\n- Difficulty in tuning : With an increasing number of large trees the tuning process becomes more complex and computationally expensive.\n\nIt's important to keep in mind that the number of trees in a Random Forest should be chosen based on the specific problem and dataset, rather than using a large number of trees by default. In practice, the number of trees in a random forest is chosen based on the trade-off between the computational cost and the performance.\n\n<br/>\n\n**What if instead of finding the best split, we randomly select a few splits and just select the best from them. Will it work? 🚀**\n\nAnswer here\n\n<br/>\n\n**What happens when we have correlated features in our data? ‍⭐️**\n\nIn random forest, since random forest samples some features to build each tree, the information contained in correlated features is twice as much likely to be picked than any other information contained in other features. \n\nIn general, when you are adding correlated features, it means that they linearly contains the same information and thus it will reduce the robustness of your model. Each time you train your model, your model might pick one feature or the other to \"do the same job\" i.e. explain some variance, reduce entropy, etc.\n\n<br/>\n\n\n## Gradient boosting\n\n**What is gradient boosting trees? ‍⭐️**\n\nGradient boosting is a machine learning technique for regression and classification problems, which produces a prediction model in the form of an ensemble of weak prediction models, typically decision trees.\n\n<br/>\n\n**What’s the difference between random forest and gradient boosting? ‍⭐️**\n\n   1. Random Forests builds each tree independently while Gradient Boosting builds one tree at a time.\n   2. Random Forests combine results at the end of the process (by averaging or \"majority rules\") while Gradient Boosting combines     results along the way.\n\n<br/>\n\n**Is it possible to parallelize training of a gradient boosting model? How to do it? ‍⭐️**\n\nYes, different frameworks provide different options to make training faster, using GPUs to speed up the process by making it highly parallelizable.For example, for XGBoost <i>tree_method = 'gpu_hist'</i> option makes training faster by use of GPUs. \n\n<br/>\n\n**Feature importance in gradient boosting trees  —  what are possible options? ‍⭐️**\n\nWith CatBoost you can use implemented method get_feature_importance for getting SHAP values. https://arxiv.org/abs/1905.04610v1\n\nIt allows to understand how excluding features helps to provide better results. Higher value is better.\n\nAlso you can add random noise column to your data (with normal distribution), calculate feature importance and exclude all features below noise importance.\n\n<br/>\n\n**Are there any differences between continuous and discrete variables when it comes to feature importance of gradient boosting models? 🚀**\n\nAnswer here\n\n<br/>\n\n**What are the main parameters in the gradient boosting model? ‍⭐️**\n\nThere are many parameters, but below are a few key defaults.\n* learning_rate=0.1 (shrinkage).\n* n_estimators=100 (number of trees).\n* max_depth=3.\n* min_samples_split=2.\n* min_samples_leaf=1.\n* subsample=1.0.\n\n<br/>\n\n**How do you approach tuning parameters in XGBoost or LightGBM? 🚀**\n\nDepending upon the dataset, parameter tuning can be done manually or using hyperparameter optimization frameworks such as optuna and hyperopt. In manual parameter tuning, we need to be aware of max-depth, min_samples_leaf and min_samples_split so that our model does not overfit the data but try to predict generalized characteristics of data (basically keeping variance and bias low for our model).\n\n<br/>\n\n**How do you select the number of trees in the gradient boosting model? ‍⭐️**\n\nMost implementations of gradient boosting are configured by default with a relatively small number of trees, such as hundreds or thousands. Using scikit-learn we can perform a grid search of the n_estimators model parameter\n\n<br/>\n\n\n\n## Parameter tuning\n\n**Which hyper-parameter tuning strategies (in general) do you know? ‍⭐️**\n\nThere are several strategies for hyper-tuning but I would argue that the three most popular nowadays are the following:\n* <b>Grid Search</b> is an exhaustive approach such that for each hyper-parameter, the user needs to <i>manually</i> give a list of values for the algorithm to try. After these values are selected, grid search then evaluates the algorithm using each and every combination of hyper-parameters and returns the combination that gives the optimal result (i.e. lowest MAE). Because grid search evaluates the given algorithm using all combinations, it's easy to see that this can be quite computationally expensive and can lead to sub-optimal results specifically since the user needs to specify specific values for these hyper-parameters, which is prone for error and requires domain knowledge.\n\n* <b>Random Search</b> is similar to grid search but differs in the sense that rather than specifying which values to try for each hyper-parameter, an upper and lower bound of values for each hyper-parameter is given instead. With uniform probability, random values within these bounds are then chosen and similarly, the best combination is returned to the user. Although this seems less intuitive, no domain knowledge is necessary and theoretically much more of the parameter space can be explored.\n\n* In a completely different framework, <b>Bayesian Optimization</b> is thought of as a more statistical way of optimization and is commonly used when using neural networks, specifically since one evaluation of a neural network can be computationally costly. In numerous research papers, this method heavily outperforms Grid Search and Random Search and is currently used on the Google Cloud Platform as well as AWS. Because an in-depth explanation requires a heavy background in bayesian statistics and gaussian processes (and maybe even some game theory), a \"simple\" explanation is that a much simpler/faster <i>acquisition function</i> intelligently chooses (using a <i>surrogate function</i> such as probability of improvement or GP-UCB) which hyper-parameter values to try on the computationally expensive, original algorithm. Using the result of the initial combination of values on the expensive/original function, the acquisition function takes the result of the expensive/original algorithm into account and uses it as its prior knowledge to again come up with another set of hyper-parameters to choose during the next iteration. This process continues either for a specified number of iterations or for a specified amount of time and similarly the combination of hyper-parameters that performs the best on the expensive/original algorithm is chosen.\n\n\n<br/>\n\n**What’s the difference between grid search parameter tuning strategy and random search? When to use one or another? ‍⭐️**\n\nFor specifics, refer to the above answer.\n\n<br/>\n\n\n## Neural networks\n\n**What kind of problems neural nets can solve? 👶**\n\nNeural nets are good at solving non-linear problems. Some good examples are problems that are relatively easy for humans (because of experience, intuition, understanding, etc), but difficult for traditional regression models: speech recognition, handwriting recognition, image identification, etc.\n\n<br/>\n\n**How does a usual fully-connected feed-forward neural network work? ‍⭐️**\n\nIn a usual fully-connected feed-forward network, each neuron receives input from every element of the previous layer and thus the receptive field of a neuron is the entire previous layer. They are usually used to represent feature vectors for input data in classification problems but can be expensive to train because of the number of computations involved.\n\n<br/>\n\n**Why do we need activation functions? 👶**\n\nThe main idea of using neural networks is to learn complex nonlinear functions. If we are not using an activation function in between different layers of a neural network, we are just stacking up multiple linear layers one on top of another and this leads to learning a linear function. The Nonlinearity comes only with the activation function, this is the reason we need activation functions.\n\n<br/>\n\n**What are the problems with sigmoid as an activation function? ‍⭐️**\n\nThe derivative of the sigmoid function for large positive or negative numbers is almost zero. From this comes the problem of vanishing gradient — during the backpropagation our net will not learn (or will learn drastically slow). One possible way to solve this problem is to use ReLU activation function.\n\n<br/>\n\n**What is ReLU? How is it better than sigmoid or tanh? ‍⭐️**\n\nReLU is an abbreviation for Rectified Linear Unit. It is an activation function which has the value 0 for all negative values and the value f(x) = x for all positive values. The ReLU has a simple activation function which makes it fast to compute and while the sigmoid and tanh activation functions saturate at higher values, the ReLU has a potentially infinite activation, which addresses the problem of vanishing gradients. \n\n<br/>\n\n**How we can initialize the weights of a neural network? ‍⭐️**\n\nProper initialization of weight matrix in neural network is very necessary.\nSimply we can say there are two ways for initializations.\n   1. Initializing weights with zeroes.\n      Setting weights to zero makes your network no better than a linear model. It is important to note that setting biases to 0 will not create any troubles as non zero weights take care of breaking the symmetry and even if bias is 0, the values in every neuron are still different.  \n   2. Initializing weights randomly.\n      Assigning random values to weights is better than just 0 assignment. \n* a) If weights are initialized with very high values the term np.dot(W,X)+b becomes significantly higher and if an activation function like sigmoid() is applied, the function maps its value near to 1 where the slope of gradient changes slowly and learning takes a lot of time.\n* b) If weights are initialized with low values it gets mapped to 0, where the case is the same as above. This problem is often referred to as the vanishing gradient.\n      \n<br/>\n\n**What if we set all the weights of a neural network to 0? ‍⭐️**\n\nIf all the weights of a neural network are set to zero, the output of each connection is same (W*x = 0). This means the gradients which are backpropagated to each connection in a layer is same. This means all the connections/weights learn the same thing, and the model never converges. \n\n<br/>\n\n**What regularization techniques for neural nets do you know? ‍⭐️**\n\n* L1 Regularization - Defined as the sum of absolute values of the individual parameters. The L1 penalty causes a subset of the weights to become zero, suggesting that the corresponding features may safely be discarded. \n* L2 Regularization - Defined as the sum of square of individual parameters. Often supported by regularization hyperparameter alpha. It results in weight decay. \n* Data Augmentation - This requires some fake data to be created as a part of training set. \n* Drop Out : This is most effective regularization technique for neural nets. Few random nodes in each layer is deactivated in forward pass. This allows the algorithm to train on different set of nodes in each iterations.\n<br/>\n\n**What is dropout? Why is it useful? How does it work? ‍⭐️**\n\nDropout is a technique that at each training step turns off each neuron with a certain probability of *p*. This way at each iteration we train only *1-p* of neurons, which forces the network not to rely only on the subset of neurons for feature representation. This leads to regularizing effects that are controlled by the hyperparameter *p*.  \n\n<br/>\n\n\n## Optimization in neural networks\n\n**What is backpropagation? How does it work? Why do we need it? ‍⭐️**\n\nThe Backpropagation algorithm looks for the minimum value of the error function in weight space using a technique called the delta rule or gradient descent. \nThe weights that minimize the error function is then considered to be a solution to the learning problem. \n\nWe need backpropogation because,\n* Calculate the error – How far is your model output from the actual output.\n* Minimum Error – Check whether the error is minimized or not.\n* Update the parameters – If the error is huge then, update the parameters (weights and biases). After that again check the error.  \nRepeat the process until the error becomes minimum.\n* Model is ready to make a prediction – Once the error becomes minimum, you can feed some inputs to your model and it will produce the output.\n\n<br/>\n\n**Which optimization techniques for training neural nets do you know? ‍⭐️**\n\n* Gradient Descent\n* Stochastic Gradient Descent\n* Mini-Batch Gradient Descent(best among gradient descents)\n* Nesterov Accelerated Gradient\n* Momentum\n* Adagrad \n* AdaDelta\n* Adam(best one. less time, more efficient)\n\n<br/>\n\n**How do we use SGD (stochastic gradient descent) for training a neural net? ‍⭐️**\n\nSGD approximates the expectation with few randomly selected samples (instead of the full data). In comparison to batch gradient descent, we can efficiently approximate the expectation in large data sets using SGD. For neural networks this reduces the training time a lot even considering that it will converge later as the random sampling adds noise to the gradient descent.\n\n<br/>\n\n**What’s the learning rate? 👶**\n\nThe learning rate is an important hyperparameter that controls how quickly the model is adapted to the problem during the training. It can be seen as the \"step width\" during the parameter updates, i.e. how far the weights are moved into the direction of the minimum of our optimization problem.\n\n<br/>\n\n**What happens when the learning rate is too large? Too small? 👶**\n\nA large learning rate can accelerate the training. However, it is possible that we \"shoot\" too far and miss the minimum of the function that we want to optimize, which will not result in the best solution. On the other hand, training with a small learning rate takes more time but it is possible to find a more precise minimum. The downside can be that the solution is stuck in a local minimum, and the weights won't update even if it is not the best possible global solution.\n\n<br/>\n\n**How to set the learning rate? ‍⭐️**\n\nThere is no straightforward way of finding an optimum learning rate for a model. It involves a lot of hit and trial. Usually starting with a small values such as 0.01 is a good starting point for setting a learning rate and further tweaking it so that it doesn't overshoot or converge too slowly.\n\n<br/>\n\n**What is Adam? What’s the main difference between Adam and SGD? ‍⭐️**\n\nAdam (Adaptive Moment Estimation) is a optimization technique for training neural networks. on an average, it is the best optimizer .It works with momentums of first and second order. The intuition behind the Adam is that we don’t want to roll so fast just because we can jump over the minimum, we want to decrease the velocity a little bit for a careful search.\n\nAdam tends to converge faster, while SGD often converges to more optimal solutions.\nSGD's high variance disadvantages gets rectified by Adam (as advantage for Adam).\n\n<br/>\n\n**When would you use Adam and when SGD? ‍⭐️**\n\nAdam tends to converge faster, while SGD often converges to more optimal solutions.\n\n<br/>\n\n**Do we want to have a constant learning rate or we better change it throughout training? ‍⭐️**\n\nGenerally, it is recommended to start learning rate with relatively high value and then gradually decrease learning rate so the model does not overshoot the minima and at the same time we don't want to start with very low learning rate as the model will take too long to converge. There are many available techniques to do decay the learning rate. For example, in PyTorch you can use\na function called **StepLR** which decays the learning rate of each parameter by value **gamma**-which we have to pass through argument- after n number of epoch which you can also set through function argument named **epoch_size**. \n\n<br/>\n\n**How do we decide when to stop training a neural net? 👶**\n\nSimply stop training when the validation error is the minimum.\n\n<br/>\n\n**What is model checkpointing? ‍⭐️**\n\nSaving the weights learned by a model mid training for long running processes is known as model checkpointing so that you can resume your training from a certain checkpoint.\n\n<br/>\n\n**Can you tell us how you approach the model training process? ‍⭐️**\n\nAnswer here\n\n<br/>\n\n\n## Neural networks for computer vision\n\n**How we can use neural nets for computer vision? ‍⭐️**\n\nNeural nets used in the area of computer vision are generally Convolutional Neural Networks(CNN's). You can learn about convolutions below. It appears that convolutions are quite powerful when it comes to working with images and videos due to their ability to extract and learn complex features. Thus CNN's are a go-to method for any problem in computer vision.    \n\n<br/>\n\n**What’s a convolutional layer? ‍⭐️**\n\nThe idea of the convolutional layer is the assumption that the information needed for making a decision often is spatially close and thus, it only takes the weighted sum over nearby inputs. It also assumes that the networks’ kernels can be reused for all nodes, hence the number of weights can be drastically reduced. To counteract only one feature being learnt per layer, multiple kernels are applied to the input which creates parallel channels in the output. Consecutive layers can also be stacked to allow the network to find more high-level features.\n\n<br/>\n\n**Why do we actually need convolutions? Can’t we use fully-connected layers for that? ‍⭐️**\n\nA fully-connected layer needs one weight per inter-layer connection, which means the number of weights which needs to be computed quickly balloons as the number of layers and nodes per layer is increased. \n\n<br/>\n\n**What’s pooling in CNN? Why do we need it? ‍⭐️**\n\nPooling is a technique to downsample the feature map. It allows layers which receive relatively undistorted versions of the input to learn low level features such as lines, while layers deeper in the model can learn more abstract features such as texture.\n\n<br/>\n\n**How does max pooling work? Are there other pooling techniques? ‍⭐️**\n\nMax pooling is a technique where the maximum value of a receptive field is passed on in the next feature map. The most commonly used receptive field is 2 x 2 with a stride of 2, which means the feature map is downsampled from N x N to N/2 x N/2. Receptive fields larger than 3 x 3 are rarely employed as too much information is lost. \n\nOther pooling techniques include:\n\n* Average pooling, the output is the average value of the receptive field.\n* Min pooling, the output is the minimum value of the receptive field.\n* Global pooling, where the receptive field is set to be equal to the input size, this means the output is equal to a scalar and can be used to reduce the dimensionality of the feature map. \n\n<br/>\n\n**Are CNNs resistant to rotations? What happens to the predictions of a CNN if an image is rotated? 🚀**\n\nCNNs are not resistant to rotation by design. However, we can make our models resistant by augmenting our datasets with different rotations of the raw data. The predictions of a CNN will change if an image is rotated and we did not augment our dataset accordingly. A demonstration of this occurence can be seen in [this video](https://www.youtube.com/watch?v=VO1bQo4PXV4), where a CNN changes its predicted class between a duck and a rabbit based on the rotation of the image.\n\n<br/>\n\n**What are augmentations? Why do we need them? 👶**\n\nAugmentations are an artifical way of expanding the existing datasets by performing some transformations, color shifts or many other things on the data. It helps in diversifying the data and even increasing the data when there is scarcity of data for a model to train on.  \n\n<br/>\n\n**What kind of augmentations do you know? 👶**\n\nThere are many kinds of augmentations which can be used according to the type of data you are working on some of which are geometric and numerical transformation, PCA, cropping, padding, shifting, noise injection etc.\n\n<br/>\n\n**How to choose which augmentations to use? ‍⭐️**\n\nAugmentations really depend on the type of output classes and the features you want your model to learn. For eg. if you have mostly properly illuminated images in your dataset and want your model to predict poorly illuminated images too, you can apply channel shifting on your data and include the resultant images in your dataset for better results.\n\n<br/>\n\n**What kind of CNN architectures for classification do you know? 🚀**\n\nImage Classification\n* Inception v3\n* Xception \n* DenseNet\n* AlexNet\n* VGG16\n* ResNet\n* SqueezeNet\n* EfficientNet\n* MobileNet\n\nThe last three are designed so they use smaller number of parameters which is helpful for edge AI. \n\n<br/>\n\n**What is transfer learning? How does it work? ‍⭐️**\n\nGiven a source domain D_S and learning task T_S, a target domain D_T and learning task T_T, transfer learning aims to help improve the learning of the target predictive function f_T in D_T using the knowledge in D_S and T_S, where D_S ≠ D_T,or T_S ≠ T_T. In other words, transfer learning enables to reuse knowledge coming from other domains or learning tasks.\n\nIn the context of CNNs, we can use networks that were pre-trained on popular datasets such as ImageNet. We then can use the weights of the layers that learn to represent features and combine them with a new set of layers that learns to map the feature representations to the given classes. Two popular strategies are either to freeze the layers that learn the feature representations completely, or to give them a smaller learning rate.\n\n<br/>\n\n**What is object detection? Do you know any architectures for that? 🚀**\n\nObject detection is finding Bounding Boxes around objects in an image. \nArchitectures :\nYOLO, Faster RCNN, Center Net\n\n<br/>\n\n**What is object segmentation? Do you know any architectures for that? 🚀**\n\nObject Segmentation is predicting masks. It does not differentiate objects. \nArchitectures :\nMask RCNN, UNet\n\n<br/>\n\n\n## Text classification\n\n**How can we use machine learning for text classification? ‍⭐️**\n\nMachine learning classification algorithms predict a class based on a numerical feature representation. This means that in order to use machine learning for text classification, we need to extract numerical features from our text data first before we can apply machine learning algorithms. Common approaches to extract numerical features from text data are bag of words, N-grams or word embeddings.\n\n<br/>\n\n**What is bag of words? How we can use it for text classification? ‍⭐️**\n\nBag of Words is a representation of text that describes the occurrence of words within a document. The order or structure of the words is not considered. For text classification, we look at the histogram of the words within the text and consider each word count as a feature.\n\n<br/>\n\n**What are the advantages and disadvantages of bag of words? ‍⭐️**\n\nAdvantages:\n1. Simple to understand and implement.\n\nDisadvantages:\n1. The vocabulary requires careful design, most specifically in order to manage the size, which impacts the sparsity of the document representations.\n2. Sparse representations are harder to model both for computational reasons (space and time complexity) and also for information reasons\n3. Discarding word order ignores the context, and in turn meaning of words in the document. Context and meaning can offer a lot to the model, that if modeled could tell the difference between the same words differently arranged (“this is interesting” vs “is this interesting”), synonyms (“old bike” vs “used bike”).\n\n<br/>\n\n**What are N-grams? How can we use them? ‍⭐️**\n\nThe function to tokenize into consecutive sequences of words is called n-grams. It can be used to find out N most co-occurring words (how often word X is followed by word Y) in a given sentence.\n\n<br/>\n\n**How large should be N for our bag of words when using N-grams? ‍⭐️**\n\nAnswer here\n\n<br/>\n\n**What is TF-IDF? How is it useful for text classification? ‍⭐️**\n\nTerm Frequency (TF) is a scoring of the frequency of the word in the current document. Inverse Document Frequency(IDF) is a scoring of how rare the word is across documents. It is used in scenario where highly recurring words may not contain as much informational content as the domain specific words. For example, words like “the” that are frequent across all documents therefore need to be less weighted. The TF-IDF score highlights words that are distinct (contain useful information) in a given document.  \n\n<br/>\n\n**Which model would you use for text classification with bag of words features? ‍⭐️**\n\n1. Bag Of Words model\n2. Word2Vec Embeddings\n3. fastText Embeddings\n4. Convolutional Neural Networks (CNN)\n5. Long Short-Term Memory (LSTM)\n6. Bidirectional Encoder Representations from Transformers (BERT)\n\n<br/>\n\n**Would you prefer gradient boosting trees model or logistic regression when doing text classification with bag of words? ‍⭐️**\n\nUsually logistic regression is better because bag of words creates a matrix with large number of columns. For a huge number of columns logistic regression is usually faster than gradient boosting trees.\n\n<br/>\n\n**What are word embeddings? Why are they useful? Do you know Word2Vec? ‍⭐️**\n\nWord Embeddings are vector representations for words. Each word is mapped to one vector, this vector tries to capture some characteristics of the word, allowing similar words to have similar vector representations.  \nWord Embeddings helps in capturing the inter-word semantics and represents it in real-valued vectors.  \n\n<br/>\n\nWord2Vec is a method to construct such an embedding. It takes a text corpus as input and outputs a set of vectors which represents words in that corpus.  \n\nIt can be generated using two methods:\n\n- Common Bag of Words (CBOW)\n- Skip-Gram\n\n<br/>\n\n**Do you know any other ways to get word embeddings? 🚀**\n\n- GloVe\n- BERT\n<br/>\n\n**If you have a sentence with multiple words, you may need to combine multiple word embeddings into one. How would you do it? ‍⭐️**\n\nApproaches ranked from simple to more complex:\n\n1. Take an average over all words\n2. Take a weighted average over all words. Weighting can be done by inverse document frequency (idf part of tf-idf).\n3. Use ML model like LSTM or Transformer.\n\n<br/>\n\n**Would you prefer gradient boosting trees model or logistic regression when doing text classification with embeddings? ‍⭐️**\n\nGradient boosting trees (GBTs) are generally a better choice than logistic regression for text classification with embeddings. This is because GBTs are able to learn more complex relationships between the features in the data, including the features extracted from the embeddings.\n\nLogistic regression is a linear model, which means that it can only learn linear relationships between the features. This can be a limitation for text classification, where the relationships between the features are often complex and non-linear.\n\nGBTs, on the other hand, are able to learn non-linear relationships between the features by combining multiple decision trees. This allows GBTs to learn more complex patterns in the data, which can lead to better performance on text classification tasks.\n\nIn addition, GBTs are more robust to outliers and noise in the data than logistic regression. This can be important for text classification tasks, where the data can be noisy and imbalanced.\n\nOverall, GBTs are a better choice than logistic regression for text classification with embeddings, especially when the data is noisy or imbalanced. However, it is important to consider the computational cost and interpretability of GBTs before using them.\n\n<br/>\n\n**How can you use neural nets for text classification? 🚀**\n\nHere is a general overview of how to use neural nets for text classification:\n\nPreprocess the text: This includes cleaning the text by removing stop words, punctuation, and other irrelevant symbols. It may also involve converting the text to lowercase and stemming or lemmatizing the words.\nRepresent the text as a vector: This can be done using a variety of methods, such as one-hot encoding or word embeddings.\nBuild the neural net: The neural net architecture will depend on the specific text classification task. However, a typical architecture will include an embedding layer, one or more hidden layers, and an output layer.\nTrain the neural net: The neural net is trained by feeding it labeled examples of text data. The neural net will learn to adjust its parameters in order to minimize the loss function, which is typically the cross-entropy loss function.\nEvaluate the neural net: Once the neural net is trained, it can be evaluated on a held-out test set to assess its performance.\nHere are some specific examples of how neural nets can be used for text classification:\nSentiment analysis, Spam detection, Topic classification, Language identification\n\nNeural nets have achieved state-of-the-art results on many text classification tasks. However, they can be computationally expensive to train and deploy. \n\n<br/>\n\n**How can we use CNN for text classification? 🚀**\n\nHere are some specific examples of how CNNs can be used for text classification:\n\nSentiment analysis: CNNs can be used to classify text as positive, negative, or neutral sentiment. This is a common task in social media analysis and customer service.\nSpam detection: CNNs can be used to classify emails as spam or not spam. This is a common task in email filtering systems.\nTopic classification: CNNs can be used to classify text documents into different topics. This is a common task in news and social media analysis.\nLanguage identification: CNNs can be used to identify the language of a text document. This is a common task in translation systems.\n\n<br/>\n\n\n## Clustering\n\n**What is unsupervised learning? 👶**\n\nUnsupervised learning aims to detect patterns in data where no labels are given.\n\n<br/>\n\n**What is clustering? When do we need it? 👶**\n\nClustering algorithms group objects such that similar feature points are put into the same groups (clusters) and dissimilar feature points are put into different clusters.\n\n<br/>\n\n**Do you know how K-means works? ‍⭐️**\n\n1. Partition points into k subsets.\n2. Compute the seed points as the new centroids of the clusters of the current partitioning.\n3. Assign each point to the cluster with the nearest seed point.\n4. Go back to step 2 or stop when the assignment does not change.\n\n<br/>\n\n**How to select K for K-means? ‍⭐️**\n\n* Domain knowledge, i.e. an expert knows the value of k\n* Elbow method: compute the clusters for different values of k, for each k, calculate the total within-cluster sum of square, plot the sum according to the number of clusters and use the band as the number of clusters.\n* Average silhouette method: compute the clusters for different values of k, for each k, calculate the average silhouette of observations, plot the silhouette according to the number of clusters and select the maximum as the number of clusters.\n\n<br/>\n\n**What are the other clustering algorithms do you know? ‍⭐️**\n\n* k-medoids: Takes the most central point instead of the mean value as the center of the cluster. This makes it more robust to noise.\n* Agglomerative Hierarchical Clustering (AHC): hierarchical clusters combining the nearest clusters starting with each point as its own cluster.\n* DIvisive ANAlysis Clustering (DIANA): hierarchical clustering starting with one cluster containing all points and splitting the clusters until each point describes its own cluster.\n* Density-Based Spatial Clustering of Applications with Noise (DBSCAN): Cluster defined as maximum set of density-connected points.\n\n<br/>\n\n**Do you know how DBScan works? ‍⭐️**\n\n* Two input parameters epsilon (neighborhood radius) and minPts (minimum number of points in an epsilon-neighborhood)\n* Cluster defined as maximum set of density-connected points.\n* Points p_j and p_i are density-connected w.r.t. epsilon and minPts if there is a point o such that both, i and j are density-reachable from o w.r.t. epsilon and minPts.\n* p_j is density-reachable from p_i w.r.t. epsilon, minPts if there is a chain of points p_i -> p_i+1 -> p_i+x = p_j such that p_i+x is directly density-reachable from p_i+x-1.\n* p_j is a directly density-reachable point of the neighborhood of p_i if dist(p_i,p_j) <= epsilon.\n\n<br/>\n\n**When would you choose K-means and when DBScan? ‍⭐️**\n\n* DBScan is more robust to noise.\n* DBScan is better when the amount of clusters is difficult to guess.\n* K-means has a lower complexity, i.e. it will be much faster, especially with a larger amount of points.\n\n<br/>\n\n\n## Dimensionality reduction\n**What is the curse of dimensionality? Why do we care about it? ‍⭐️**\n\nData in only one dimension is relatively tightly packed. Adding a dimension stretches the points across that dimension, pushing them further apart. Additional dimensions spread the data even further making high dimensional data extremely sparse. We care about it, because it is difficult to use machine learning in sparse spaces.\n\n<br/>\n\n**Do you know any dimensionality reduction techniques? ‍⭐️**\n\n* Singular Value Decomposition (SVD)\n* Principal Component Analysis (PCA)\n* Linear Discriminant Analysis (LDA)\n* T-distributed Stochastic Neighbor Embedding (t-SNE)\n* Autoencoders\n* Fourier and Wavelet Transforms\n\n<br/>\n\n**What’s singular value decomposition? How is it typically used for machine learning? ‍⭐️**\n\n* Singular Value Decomposition (SVD) is a general matrix decomposition method that factors a matrix X into three matrices L (left singular values), Σ (diagonal matrix) and R^T (right singular values).\n* For machine learning, Principal Component Analysis (PCA) is typically used. It is a special type of SVD where the singular values correspond to the eigenvectors and the values of the diagonal matrix are the squares of the eigenvalues. We use these features as they are statistically descriptive.\n* Having calculated the eigenvectors and eigenvalues, we can use the Kaiser-Guttman criterion, a scree plot or the proportion of explained variance to determine the principal components (i.e. the final dimensionality) that are useful for dimensionality reduction.\n\n<br/>\n\n\n## Ranking and search\n\n**What is the ranking problem? Which models can you use to solve them? ‍⭐️**\n\nAnswer here\n\n<br/>\n\n**What are good unsupervised baselines for text information retrieval? ‍⭐️**\n\nAnswer here\n\n<br/>\n\n**How would you evaluate your ranking algorithms? Which offline metrics would you use? ‍⭐️**\n\nAnswer here\n\n<br/>\n\n**What is precision and recall at k? ‍⭐️**\n\nPrecision at k and recall at k are evaluation metrics for ranking algorithms. Precision at k shows the share of relevant items in the first *k* results of the ranking algorithm. And Recall at k indicates the share of relevant items returned in top *k* results out of all correct answers for a given query.\n\nExample:\nFor a search query \"Car\" there are 3 relevant products in your shop. Your search algorithm returns 2 of those relevant products in the first 5 search results.\nPrecision at 5 = # num of relevant products in search result / k = 2/5 = 40%\nRecall at 5 = # num of relevant products in search result / # num of all relevant products = 2/3 = 66.6%\n\n<br/>\n\n**What is mean average precision at k? ‍⭐️**\n\nAnswer here\n\n<br/>\n\n**How can we use machine learning for search? ‍⭐️**\n\nAnswer here\n\n<br/>\n\n**How can we get training data for our ranking algorithms? ‍⭐️**\n\nAnswer here\n\n<br/>\n\n**Can we formulate the search problem as a classification problem? How? ‍⭐️**\n\nAnswer here\n\n<br/>\n\n**How can we use clicks data as the training data for ranking algorithms? 🚀**\n\nAnswer here\n\n<br/>\n\n**Do you know how to use gradient boosting trees for ranking? 🚀**\n\nAnswer here\n\n<br/>\n\n**How do you do an online evaluation of a new ranking algorithm? ‍⭐️**\n\nAnswer here\n\n<br/>\n\n\n## Recommender systems\n\n**What is a recommender system? 👶**\n\nRecommender systems are software tools and techniques that provide suggestions for items that are most likely of interest to a particular user.\n\n<br/>\n\n**What are good baselines when building a recommender system? ‍⭐️**\n\n* A good recommer system should give relevant and personalized information.\n* It should not recommend items the user knows well or finds easily.\n* It should make diverse suggestions.\n* A user should explore new items.\n\n<br/>\n\n**What is collaborative filtering? ‍⭐️**\n\n* Collaborative filtering is the most prominent approach to generate recommendations.\n* It uses the wisdom of the crowd, i.e. it gives recommendations based on the experience of others.\n* A recommendation is calculated as the average of other experiences.\n* Say we want to give a score that indicates how much user u will like an item i. Then we can calculate it with the experience of N other users U as r_ui = 1/N * sum(v in U) r_vi.\n* In order to rate similar experiences with a higher weight, we can introduce a similarity between users that we use as a multiplier for each rating.\n* Also, as users have an individual profile, one user may have an average rating much larger than another user, so we use normalization techniques (e.g. centering or Z-score normalization) to remove the users' biases.\n* Collaborative filtering does only need a rating matrix as input and improves over time. However, it does not work well on sparse data, does not work for cold starts (see below) and usually tends to overfit.\n\n<br/>\n\n**How we can incorporate implicit feedback (clicks, etc) into our recommender systems? ‍⭐️**\n\nIn comparison to explicit feedback, implicit feedback datasets lack negative examples. For example, explicit feedback can be a positive or a negative rating, but implicit feedback may be the number of purchases or clicks. One popular approach to solve this problem is named weighted alternating least squares (wALS) [Hu, Y., Koren, Y., & Volinsky, C. (2008, December). Collaborative filtering for implicit feedback datasets. In Data Mining, 2008. ICDM'08. Eighth IEEE International Conference on (pp. 263-272). IEEE.]. Instead of modeling the rating matrix directly, the numbers (e.g. amount of clicks) describe the strength in observations of user actions. The model tries to find latent factors that can be used to predict the expected preference of a user for an item.\n\n<br/>\n\n**What is the cold start problem? ‍⭐️**\n\nCollaborative filterung incorporates crowd knowledge to give recommendations for certain items. Say we want to recommend how much a user will like an item, we then will calculate the score using the recommendations of other users for this certain item. We can distinguish between two different ways of a cold start problem now. First, if there is a new item that has not been rated yet, we cannot give any recommendation. Also, when there is a new user, we cannot calculate a similarity to any other user.\n\n<br/>\n\n**Possible approaches to solving the cold start problem? ‍⭐️🚀**\n\n* Content-based filtering incorporates features about items to calculate a similarity between them. In this way, we can recommend items that have a high similarity to items that a user liked already. In this way, we are not dependent on the ratings of other users for a given item anymore and solve the cold start problem for new items.\n* Demographic filtering incorporates user profiles to calculate a similarity between them and solves the cold start problem for new users.\n\n<br/>\n\n\n## Time series\n\n**What is a time series? 👶**\n\nA time series is a set of observations ordered in time usually collected at regular intervals.\n\n<br/>\n\n**How is time series different from the usual regression problem? 👶**\n\nThe principle behind causal forecasting is that the value that has to be predicted is dependant on the input features (causal factors). In time series forecasting, the to be predicted value is expected to follow a certain pattern over time.\n\n<br/>\n\n**Which models do you know for solving time series problems? ‍⭐️**\n\n* Simple Exponential Smoothing: approximate the time series with an exponential function\n* Trend-Corrected Exponential Smoothing (Holt‘s Method): exponential smoothing that also models the trend\n* Trend- and Seasonality-Corrected Exponential Smoothing (Holt-Winter‘s Method): exponential smoothing that also models trend and seasonality\n* Time Series Decomposition: decomposed a time series into the four components trend, seasonal variation, cycling variation and irregular component\n* Autoregressive models: similar to multiple linear regression, except that the dependent variable y_t depends on its own previous values rather than other independent variables.\n* Deep learning approaches (RNN, LSTM, etc.)\n\n<br/>\n\n**If there’s a trend in our series, how we can remove it? And why would we want to do it? ‍⭐️**\n\nWe can explicitly model the trend (and/or seasonality) with approaches such as Holt's Method or Holt-Winter's Method. We want to explicitly model the trend to reach the stationarity property for the data. Many time series approaches require stationarity. Without stationarity,the interpretation of the results of these analyses is problematic [Manuca, Radu & Savit, Robert. (1996). Stationarity and nonstationarity in time series analysis. Physica D: Nonlinear Phenomena. 99. 134-161. 10.1016/S0167-2789(96)00139-X. ].\n\n<br/>\n\n**You have a series with only one variable “y” measured at time t. How do predict “y” at time t+1? Which approaches would you use? ‍⭐️**\n\nWe want to look at the correlation between different observations of y. This measure of correlation is called autocorrelation. Autoregressive models are multiple regression models where the time-lag series of the original time series are treated like multiple independent variables.\n\n<br/>\n\n**You have a series with a variable “y” and a set of features. How do you predict “y” at t+1? Which approaches would you use? ‍⭐️**\n\nGiven the assumption that the set of features gives a meaningful causation to y, a causal forecasting approach such as linear regression or multiple nonlinear regression might be useful. In case there is a lot of data and the explainability of the results is not a high priority, we can also consider deep learning approaches.\n\n<br/>\n\n**What are the problems with using trees for solving time series problems? ‍⭐️**\n\nRandom Forest models are not able to extrapolate time series data and understand increasing/decreasing trends. It will provide us with average data points if the validation data has values greater than the training data points.\n\n<br/>\n"
        }
      ]
    }
  ]
}