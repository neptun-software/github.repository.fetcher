{
  "metadata": {
    "timestamp": 1736709511349,
    "page": 18,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "adams549659584/go-proxy-bingai",
      "stars": 8822,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1455078125,
          "content": "# Editor directories and files\n.vscode/*\n!.vscode/extensions.json\n!.vscode/launch.json\n.idea\n*.suo\n*.ntvs*\n*.njsproj\n*.sln\n*.sw?\n\n.DS_Store\n\nrelease\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.07421875,
          "content": "MIT License Copyright (c) 2023 adams549659584\n\nPermission is hereby granted, free\nof charge, to any person obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to the\nfollowing conditions:\n\nThe above copyright notice and this permission notice\n(including the next paragraph) shall be included in all copies or substantial\nportions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO\nEVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.14453125,
          "content": "# go-proxy-bing\n\n基于微软 New Bing 用 Vue3 和 Go 简单定制的微软 New Bing 演示站点，拥有一致的 UI 体验，支持 ChatGPT 提示词，国内可用，基本兼容微软 Bing AI 所有功能，无需登录即可畅聊。\n\n⭐ Bing 官方聊天服务器（相对较快和稳定，推荐）不可用时，可参考以下方案\n\n  > 1. 可用 ModHeader 添加 X-Forwarded-For 请求头，对应 URL 是 wss://sydney.bing.com/sydney/ChatHub，具体可参考 [issues #71](https://github.com/adams549659584/go-proxy-bingai/issues/71) 及 https://zhuanlan.zhihu.com/p/606655303\n\n  > 2. 本地部署再部署一份作为聊天中转服务，或下载 Release 直接运行，自定义聊天服务器中填入 http://localhost:8080，并选择。\n\n⭐ 聊天服务器 (暂时默认 Cloudflare Workers，请求数每天限额 100,000，撑不了多久 ，推荐自行部署，参考下面 [部署聊天服务器](#部署聊天服务器) ) 可在右上角 设置 => 服务选择 中切换\n\n⭐ 国内可用 （部署服务器需要直连 www.bing.com 不重定向 CN ，可配置 socks 连接）\n\n⭐ 支持现有开源 ChatGPT 提示词库\n\n⭐ 需要画图等高级功能时(需选更有创造力模式或右上角 设置 => 图像创建 )，可登录微软账号设置用户 Cookie 进行体验\n\n⭐ 遇到一切问题，先点左下角 ![新主题](./docs/img/bing-clear.png) 试试，不行使用刷新大法（Shift + F5 或 Ctrl + Shift + R 或 右上角设置中的一键重置），最终大招就 清理浏览器缓存 及 Cookie ，比如（24 小时限制、未登录提示等等）\n\n- [go-proxy-bing](#go-proxy-bing)\n  - [网页展示](#网页展示)\n  - [侧边栏](#侧边栏)\n  - [演示站点](#演示站点)\n  - [设置用户](#设置用户)\n  - [环境变量](#环境变量)\n  - [部署](#部署)\n    - [Docker](#Docker)\n    - [Release](#Release)\n    - [Railway](#Railway)\n    - [Vercel](#Vercel)\n    - [Render](#Render)\n  - [部署聊天服务器](#部署聊天服务器)\n  - [TODO](#TODO)\n\n## 网页展示\n\n- 电脑端未登录状态\n\n![电脑未登录](./docs/img/bing-nologin.png)\n\n- 电脑端登录\n\n![电脑端登录](./docs/img/bing-login-1.png)\n![提示词1](./docs/img/bing-prompt-1.png)\n![提示词2](./docs/img/bing-prompt-2.png)\n![聊天服务器选择](./docs/img/bing-sydney-service-1.png)\n\n- 电脑端画图\n\n> ⭐ 需登录，并选择 更有创造力 对话模式\n\n![电脑端画图](./docs/img/bing-draw.png)\n\n- 手机端未登录状态\n\n![手机端未登录](./docs/img/bing-m-nologin.png)\n\n## 侧边栏\n\n- 在 Edge 浏览器可把聊天和撰写分别添加侧边栏\n\n![添加侧边栏](./docs/img/sidebar-add.png)\n\n![聊天](./docs/img/sidebar-chat.png)\n\n![撰写](./docs/img/sidebar-compose.png)\n\n## 演示站点\n\n### 甲骨文小鸡仔，轻虐\n\n- https://bing.vcanbb.top\n\n### Railway 搭建\n\n- https://bing-railway.vcanbb.top\n\n- https://go-proxy-bingai-production.up.railway.app\n\n### Vercel 搭建\n\n- https://bing-vercel.vcanbb.top\n\n- https://go-proxy-bingai-adams549659584.vercel.app\n\n### Render 搭建\n\n- https://bing-render.vcanbb.top\n\n- https://go-proxy-bingai.onrender.com\n\n## 设置用户\n\n- 访问 https://www.bing.com/ 或 https://cn.bing.com/ ，登录\n\n- F12 或 Ctrl + Shift + I 打开控制台\n\n- 拿到 Cookie 中 _U 的值 后，在网站设置 => 设置用户 中填入即可。\n\n![获取Cookie](./docs/img/bing-cookie.png)\n\n## 环境变量\n\n```bash\n# 运行端口 默认 8080 可选\nPORT=8080\n# Socks 环境变量 示例 可选\nGo_Proxy_BingAI_SOCKS_URL=192.168.0.88:1070\n# Socks 账号、密码 可选\nGo_Proxy_BingAI_SOCKS_USER=xxx\nGo_Proxy_BingAI_SOCKS_PWD=xxx\n# 默认用户 Cookie 设置，可选，不推荐使用，固定前缀 Go_Proxy_BingAI_USER_TOKEN 可设置多个，未登录用户将随机使用，多人共用将很快触发图形验证，并很快达到该账号的24小时限制\nGo_Proxy_BingAI_USER_TOKEN_1=xxx\nGo_Proxy_BingAI_USER_TOKEN_2=xxx\nGo_Proxy_BingAI_USER_TOKEN_3=xxx ...\n# 简单授权认证密码，可选\nGo_Proxy_BingAI_AUTH_KEY=xxx\n```\n\n## 部署\n\n> ⭐ 需 https 域名 (自行配置 nginx 等) (前后端都有限制 只有在HTTPS的情况下，浏览器 Accept-Encoding 才会包含 br , localhost 除外)\n\n> 支持 Linux (amd64 / arm64)、Windows (amd64 / arm64)\n\n> 国内机器部署可配置 socks 环境变量\n\n### Docker\n\n> 参考 [Dockerfile](./docker/Dockerfile) 、[docker-compose.yml](./docker/docker-compose.yml)\n\n- docker 示例\n\n```bash\n# 运行容器 监听8080 端口\ndocker run -d -p 8080:8080 --name go-proxy-bingai --restart=unless-stopped adams549659584/go-proxy-bingai\n\n# 配置 socks 环境变量\ndocker run -e Go_Proxy_BingAI_SOCKS_URL=192.168.0.88:1070 -e Go_Proxy_BingAI_SOCKS_USER=xxx -e Go_Proxy_BingAI_SOCKS_PWD=xxx -d -p 8080:8080 --name go-proxy-bingai --restart=unless-stopped adams549659584/go-proxy-bingai\n```\n\n- docker compose 示例\n\n```yaml\nversion: '3'\n\nservices:\n  go-proxy-bingai:\n    # 镜像名称\n    image: adams549659584/go-proxy-bingai\n    # 容器名称\n    container_name: go-proxy-bingai  \n    # 自启动\n    restart: unless-stopped\n    ports:\n      - 8080:8080\n    # environment:\n    #   - Go_Proxy_BingAI_SOCKS_URL=192.168.0.88:1070\n    #   - Go_Proxy_BingAI_SOCKS_USER=xxx\n    #   - Go_Proxy_BingAI_SOCKS_PWD=xxx\n    #   - Go_Proxy_BingAI_USER_TOKEN_1=xxx\n    #   - Go_Proxy_BingAI_USER_TOKEN_2=xxx    \n```\n\n### Release\n\n在 [GitHub Releases](https://github.com/adams549659584/go-proxy-bingai/releases) 下载适用于对应平台的压缩包，解压后可得到可执行文件 go-proxy-bingai，直接运行即可。\n\n### Railway\n\n> 主要配置 Dockerfile 路径 及 端口就可以\n\n```bash\nPORT=8080\nRAILWAY_DOCKERFILE_PATH=docker/Dockerfile\n```\n\n一键部署，点这里 => [![Deploy on Railway](https://railway.app/button.svg)](https://railway.app/template/uIckWS?referralCode=BBs747)\n\n![Railway 模板部署](./docs/img/railway-1.png)\n\n自行使用 Railway 部署配置如下\n\n![Railway 环境变量](./docs/img/railway-2.png)\n\n![Railway 域名](./docs/img/railway-3.png)\n\n### Vercel\n\n> ⭐ Vercel 部署不支持 Websocket ，需选择 官方聊天服务器 或 Cloudflare\n\n一键部署，点这里 => [![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/clone?repository-url=https://github.com/adams549659584/go-proxy-bingai&project-name=go-proxy-bingai&repository-name=go-proxy-bingai-vercel)\n\n![Vercel 一键部署](./docs/img/vercel-1.png)\n\n![Vercel 域名](./docs/img/vercel-2.png)\n\n### Render\n\n一键部署，点这里 => [![Deploy to Render](https://render.com/images/deploy-to-render-button.svg)](https://render.com/deploy?repo=https://github.com/adams549659584/go-proxy-bingai)\n\n![Render 一键部署](./docs/img/render-1.png)\n\n![Render 域名](./docs/img/render-2.png)\n\n## 部署聊天服务器\n\n> 核心代码 [worker.js](./cloudflare/worker.js)\n\n> 具体部署 Cloudflare Workers 教程自行查询，大概如下\n\n- [注册 Cloudflare 账号](https://dash.cloudflare.com/sign-up)\n\n- 创建 Worker 服务，复制 [worker.js](./cloudflare/worker.js) 全部代码，粘贴至创建的服务中，保存并部署。\n\n- 触发器 中自定义访问域名。\n\n## TODO\n\n- [x] 撰写\n- [x] Vue3 重构\n- [x] 提示词\n- [x] 历史聊天\n- [x] 导出消息到本地（Markdown、图片、PDF）\n- [x] 简单访问权限控制\n"
        },
        {
          "name": "Taskfile.yaml",
          "type": "blob",
          "size": 5.654296875,
          "content": "version: '3'\n\nvars:\n  BUILD_VERSION:\n    sh: git describe --tags\n  BUILD_DATE:\n    sh: date \"+%F %T\"\n  COMMIT_ID:\n    sh: git rev-parse HEAD\n\ntasks:\n  clean:\n    cmds:\n      - rm -rf frontend/node_modules\n      - rm -rf release\n      # extended globbing is not supported\n      # - rm -rf web/!(web.go)\n      - cp web/web.go web.go\n      - rm -rf web/*\n      - mv web.go web/web.go\n  build_web:\n    dir: frontend\n    cmds:\n      # 修订号，例如 0.0.1\n      - npm version patch\n      # - pnpm build\n      - pnpm install && pnpm build\n  build_web_minor:\n    dir: frontend\n    cmds:\n      # 次版本号，例如 0.1.0\n      - npm version minor\n      # - pnpm build\n      - pnpm install && pnpm build  \n  build_web_major:\n    dir: frontend\n    cmds:\n      # 主版本号，例如 1.0.0\n      - npm version major\n      # - pnpm build\n      - pnpm install && pnpm build      \n  build_tpl:\n    label: build-{{.TASK}}\n    cmds:\n      - |\n        GOOS={{.GOOS}} GOARCH={{.GOARCH}} GOARM={{.GOARM}} GOMIPS={{.GOMIPS}} GOAMD64={{.GOAMD64}} \\\n        go build -tags netgo -trimpath -o release/go-proxy-bingai_{{.TASK}} -ldflags \\\n        \"-w -s -X 'main.version={{.BUILD_VERSION}}' -X 'main.buildDate={{.BUILD_DATE}}' -X 'main.commitID={{.COMMIT_ID}}'\"\n  linux_386:\n    cmds:\n      - task: build_tpl\n        vars: {\n          TASK: \"{{.TASK}}\",\n          GOOS: linux,\n          GOARCH: 386\n        }\n  linux_amd64:\n    cmds:\n      - task: build_tpl\n        vars: {\n          TASK: \"{{.TASK}}\",\n          GOOS: linux,\n          GOARCH: amd64\n        }\n  linux_amd64_v2:\n    cmds:\n      - task: build_tpl\n        vars: {\n          TASK: \"{{.TASK}}\",\n          GOOS: linux,\n          GOARCH: amd64,\n          GOAMD64: v2\n        }\n  linux_amd64_v3:\n    cmds:\n      - task: build_tpl\n        vars: {\n          TASK: \"{{.TASK}}\",\n          GOOS: linux,\n          GOARCH: amd64,\n          GOAMD64: v3\n        }\n  linux_amd64_v4:\n    cmds:\n      - task: build_tpl\n        vars: {\n          TASK: \"{{.TASK}}\",\n          GOOS: linux,\n          GOARCH: amd64,\n          GOAMD64: v4\n        }\n  linux_armv5:\n    cmds:\n      - task: build_tpl\n        vars: {\n          TASK: \"{{.TASK}}\",\n          GOOS: linux,\n          GOARCH: arm,\n          GOARM: 5\n        }\n  linux_armv6:\n    cmds:\n      - task: build_tpl\n        vars: {\n          TASK: \"{{.TASK}}\",\n          GOOS: linux,\n          GOARCH: arm,\n          GOARM: 6\n        }\n  linux_armv7:\n    cmds:\n      - task: build_tpl\n        vars: {\n          TASK: \"{{.TASK}}\",\n          GOOS: linux,\n          GOARCH: arm,\n          GOARM: 7\n        }\n  linux_armv8:\n    cmds:\n      - task: build_tpl\n        vars: {\n          TASK: \"{{.TASK}}\",\n          GOOS: linux,\n          GOARCH: arm64\n        }\n  linux_mips_hardfloat:\n    cmds:\n      - task: build_tpl\n        vars: {\n          TASK: \"{{.TASK}}\",\n          GOOS: linux,\n          GOARCH: mips,\n          GOMIPS: hardfloat\n        }\n  linux_mipsle_softfloat:\n    cmds:\n      - task: build_tpl\n        vars: {\n          TASK: \"{{.TASK}}\",\n          GOOS: linux,\n          GOARCH: mipsle,\n          GOMIPS: softfloat\n        }\n  linux_mipsle_hardfloat:\n    cmds:\n      - task: build_tpl\n        vars: {\n          TASK: \"{{.TASK}}\",\n          GOOS: linux,\n          GOARCH: mipsle,\n          GOMIPS: hardfloat\n        }\n  linux_mips64:\n    cmds:\n      - task: build_tpl\n        vars: {\n          TASK: \"{{.TASK}}\",\n          GOOS: linux,\n          GOARCH: mips64\n        }\n  linux_mips64le:\n    cmds:\n      - task: build_tpl\n        vars: {\n          TASK: \"{{.TASK}}\",\n          GOOS: linux,\n          GOARCH: mips64le\n        }\n  windows_386.exe:\n    cmds:\n      - task: build_tpl\n        vars: {\n          TASK: \"{{.TASK}}\",\n          GOOS: windows,\n          GOARCH: 386\n        }\n  windows_amd64.exe:\n    cmds:\n      - task: build_tpl\n        vars: {\n          TASK: \"{{.TASK}}\",\n          GOOS: windows,\n          GOARCH: amd64\n        }\n  windows_amd64_v2.exe:\n    cmds:\n      - task: build_tpl\n        vars: {\n          TASK: \"{{.TASK}}\",\n          GOOS: windows,\n          GOARCH: amd64,\n          GOAMD64: v2\n        }\n  windows_amd64_v3.exe:\n    cmds:\n      - task: build_tpl\n        vars: {\n          TASK: \"{{.TASK}}\",\n          GOOS: windows,\n          GOARCH: amd64,\n          GOAMD64: v3\n        }\n  windows_amd64_v4.exe:\n    cmds:\n      - task: build_tpl\n        vars: {\n          TASK: \"{{.TASK}}\",\n          GOOS: windows,\n          GOARCH: amd64,\n          GOAMD64: v4\n        }\n  darwin_amd64:\n    cmds:\n      - task: build_tpl\n        vars: {\n          TASK: \"{{.TASK}}\",\n          GOOS: darwin,\n          GOARCH: amd64,\n        }\n  darwin_arm64:\n    cmds:\n      - task: build_tpl\n        vars: {\n          TASK: \"{{.TASK}}\",\n          GOOS: darwin,\n          GOARCH: arm64,\n        }        \n  docker:\n    cmds:\n      - docker build -t adams549659584/go-proxy-bingai:{{.BUILD_VERSION}} -f docker/Dockerfile .\n      - docker tag adams549659584/go-proxy-bingai:{{.BUILD_VERSION}} adams549659584/go-proxy-bingai\n  default:\n    cmds:\n      - task: clean\n      - task: build_web\n      # - task: linux_386\n      - task: linux_amd64\n      # - task: linux_amd64_v2\n      # - task: linux_amd64_v3\n      # - task: linux_amd64_v4\n      # - task: linux_armv5\n      # - task: linux_armv6\n      # - task: linux_armv7\n      - task: linux_armv8\n      # - task: linux_mips_hardfloat\n      # - task: linux_mipsle_softfloat\n      # - task: linux_mipsle_hardfloat\n      # - task: linux_mips64\n      # - task: linux_mips64le\n      # - task: windows_386.exe\n      # - task: windows_amd64.exe\n      # - task: windows_amd64_v2.exe\n      # - task: windows_amd64_v3.exe\n      # - task: windows_amd64_v4.exe\n      # - task: darwin_amd64\n      # - task: darwin_arm64\n  release:\n    cmds:\n      - task: default\n"
        },
        {
          "name": "api",
          "type": "tree",
          "content": null
        },
        {
          "name": "cloudflare",
          "type": "tree",
          "content": null
        },
        {
          "name": "common",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "frontend",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.12109375,
          "content": "module adams549659584/go-proxy-bingai\n\ngo 1.20\n\nrequire (\n\tgithub.com/andybalholm/brotli v1.0.5\n\tgolang.org/x/net v0.10.0\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 0.322265625,
          "content": "github.com/andybalholm/brotli v1.0.5 h1:8uQZIdzKmjc/iuPu7O2ioW48L81FgatrcpfFmiq/cCs=\ngithub.com/andybalholm/brotli v1.0.5/go.mod h1:fO7iG3H7G2nSZ7m0zPUDn85XEX2GTukHGRSepvi9Eig=\ngolang.org/x/net v0.10.0 h1:X2//UzNDwYmtCLn7To6G58Wr6f5ahEAQgKNzv9Y951M=\ngolang.org/x/net v0.10.0/go.mod h1:0qNGK6F8kojg2nk9dLZ2mShWaEBan6FAoqfSigmmuDg=\n"
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 0.54296875,
          "content": "package main\n\nimport (\n\t\"adams549659584/go-proxy-bingai/api\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"time\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/sysconf\", api.SysConf)\n\n\thttp.HandleFunc(\"/sydney/\", api.Sydney)\n\n\thttp.HandleFunc(\"/web/\", api.WebStatic)\n\n\thttp.HandleFunc(\"/\", api.Index)\n\n\tport := os.Getenv(\"PORT\")\n\tif port == \"\" {\n\t\tport = \"8080\"\n\t}\n\taddr := \":\" + port\n\n\tlog.Println(\"Starting BingAI Proxy At \" + addr)\n\n\tsrv := &http.Server{\n\t\tAddr:         addr,\n\t\tWriteTimeout: 15 * time.Second,\n\t\tReadTimeout:  15 * time.Second,\n\t}\n\tlog.Fatal(srv.ListenAndServe())\n}\n"
        },
        {
          "name": "render.yaml",
          "type": "blob",
          "size": 0.2236328125,
          "content": "services:\n  - type: web\n    name: go-proxy-bingai\n    # oregon: frankfurt\n    plan: free\n    env: go\n    buildCommand: go build -ldflags=\"-s -w\" -tags netgo -trimpath -o go-proxy-bingai main.go\n    startCommand: ./go-proxy-bingai"
        },
        {
          "name": "vercel.json",
          "type": "blob",
          "size": 0.4375,
          "content": "{\n  \"name\": \"go-proxy-bingai\",\n  \"version\": 2,\n  \"builds\": [\n    {\n      \"src\": \"/api/{index,web,sydney,sys-config}.go\",\n      \"use\": \"@vercel/go\"\n    }\n  ],\n  \"routes\": [\n    {\n      \"src\": \"/sysconf\",\n      \"dest\": \"/api/sys-config.go\"\n    },\n    {\n      \"src\": \"/sydney/.*\",\n      \"dest\": \"/api/sydney.go\"\n    },\n    {\n      \"src\": \"/web/.*\",\n      \"dest\": \"/api/web.go\"\n    },\n    {\n      \"src\": \"/.*\",\n      \"dest\": \"/api/index.go\"\n    }\n  ]\n}"
        },
        {
          "name": "web",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}