{
  "metadata": {
    "timestamp": 1736709519913,
    "page": 33,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "joemccann/dillinger",
      "stars": 7994,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".babelrc",
          "type": "blob",
          "size": 0.2041015625,
          "content": "{\n  \"ignore\": [\n    \"/node_modules/jquery-ui-bundle/jquery-ui.js\",\n    \"/node_modules/angular/angular.js\",\n    \"/node_modules/brace/index.js\",\n    \"/node_modules/katex/dist/katex.js\",\n    \"/node_modules\"\n  ]\n}"
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.08203125,
          "content": ".gitignore\n.npmignore\nLICENSE\nVERSION\nMakefile\ndocker-compose.yml\nnode_modules\n.git\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.146484375,
          "content": "# editorconfig.org\nroot = true\n\n[*]\nindent_style = space\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.578125,
          "content": ".DS_Store\n.env\n\n#Dillinger\nnode_modules/*\nlogs/*\ndownloads/files/md/*.md\ndownloads/files/html/*.html\ndownloads/css/style.css\n\n*-config.json\nbackup/*\n\n# IntelliJ - PhpStorm and PyCharm\n.idea\n.idea/\n.idea/*\n*.iml\n*.ipr\n*.iws\n\n# Netbeans\nnbproject\n.nbproject\n.nbproject/*\nnbproject/*\nnbproject/private/\nbuild/\nnbbuild/\ndist/\nnbdist/\nnbactions.xml\nnb-configuration.xml\n\n# Mac OSX\n.DS_Store\n# Thumbnails\n._*\n# Files that might appear on external disk\n.Spotlight-V100\n.Trashes\n\n# SublimeText project files\n/*.sublime-project\n*.sublime-workspace\n\n# NPM debug log\nnpm-debug.log\n\n# Vim\n*.swp\n\n.vercel\n"
        },
        {
          "name": ".jshintrc",
          "type": "blob",
          "size": 5.81640625,
          "content": "{\n  // JSHint Default Configuration File (as on JSHint website)\n  // See http://jshint.com/docs/ for more details\n\n  \"maxerr\"        : 50,       // {int} Maximum error before stopping\n\n  // Enforcing\n  \"bitwise\"       : true,     // true: Prohibit bitwise operators (&, |, ^, etc.)\n  \"camelcase\"     : true,     // true: Identifiers must be in camelCase\n  \"curly\"         : true,     // true: Require {} for every new block or scope\n  \"eqeqeq\"        : true,     // true: Require triple equals (===) for comparison\n  \"freeze\"        : true,     // true: prohibits overwriting prototypes of native objects such as Array, Date etc.\n  \"forin\"         : true,     // true: Require filtering for..in loops with obj.hasOwnProperty()\n  \"immed\"         : true,     // true: Require immediate invocations to be wrapped in parens e.g. `(function () { } ());`\n  \"indent\"        : 2,        // {int} Number of spaces to use for indentation\n  \"latedef\"       : false,    // true: Require variables/functions to be defined before being used\n  \"newcap\"        : true,     // true: Require capitalization of all constructor functions e.g. `new F()`\n  \"noarg\"         : true,     // true: Prohibit use of `arguments.caller` and `arguments.callee`\n  \"noempty\"       : true,     // true: Prohibit use of empty blocks\n  \"nonbsp\"        : true,     // true: Prohibit \"non-breaking whitespace\" characters.\n  \"nonew\"         : true,     // true: Prohibit use of constructors for side-effects (without assignment)\n  \"plusplus\"      : false,    // true: Prohibit use of `++` & `--`\n  \"quotmark\"      : \"single\", // Quotation mark consistency:\n                              //   false    : do nothing (default)\n                              //   true     : ensure whatever is used is consistent\n                              //   \"single\" : require single quotes\n                              //   \"double\" : require double quotes\n  \"undef\"         : true,     // true: Require all non-global variables to be declared (prevents global leaks)\n  \"unused\"        : false,    // true: Require all defined variables be used\n  \"strict\"        : true,     // true: Requires all functions run in ES5 Strict Mode\n  \"maxparams\"     : 10,       // {int} Max number of formal params allowed per function\n  \"maxdepth\"      : 4,        // {int} Max depth of nested blocks (within functions)\n  \"maxstatements\" : 40,       // {int} Max number statements per function\n  \"maxcomplexity\" : 8,        // {int} Max cyclomatic complexity per function\n  \"maxlen\"        : 120,      // {int} Max number of characters per line\n\n  // Relaxing\n  \"asi\"           : false,     // true: Tolerate Automatic Semicolon Insertion (no semicolons)\n  \"boss\"          : false,     // true: Tolerate assignments where comparisons would be expected\n  \"debug\"         : false,     // true: Allow debugger statements e.g. browser breakpoints.\n  \"eqnull\"        : true,      // true: Tolerate use of `== null`\n  \"es5\"           : false,     // true: Allow ES5 syntax (ex: getters and setters)\n  \"esnext\"        : false,     // true: Allow ES.next (ES6) syntax (ex: `const`)\n  \"moz\"           : false,     // true: Allow Mozilla specific syntax (extends and overrides esnext features)\n                               // (ex: `for each`, multiple try/catch, function expressionâ€¦)\n  \"evil\"          : false,     // true: Tolerate use of `eval` and `new Function()`\n  \"expr\"          : false,     // true: Tolerate `ExpressionStatement` as Programs\n  \"funcscope\"     : false,     // true: Tolerate defining variables inside control statements\n  \"globalstrict\"  : true,      // true: Allow global \"use strict\" (also enables 'strict')\n  \"iterator\"      : false,     // true: Tolerate using the `__iterator__` property\n  \"lastsemic\"     : false,     // true: Tolerate omitting a semicolon for the last statement of a 1-line block\n  \"laxbreak\"      : false,     // true: Tolerate possibly unsafe line breakings\n  \"laxcomma\"      : false,     // true: Tolerate comma-first style coding\n  \"loopfunc\"      : false,     // true: Tolerate functions being defined in loops\n  \"multistr\"      : false,     // true: Tolerate multi-line strings\n  \"noyield\"       : false,     // true: Tolerate generator functions with no yield statement in them.\n  \"notypeof\"      : false,     // true: Tolerate invalid typeof operator values\n  \"proto\"         : false,     // true: Tolerate using the `__proto__` property\n  \"scripturl\"     : false,     // true: Tolerate script-targeted URLs\n  \"shadow\"        : false,     // true: Allows re-define variables later in code e.g. `var x=1; x=2;`\n  \"sub\"           : false,     // true: Tolerate using `[]` notation when it can still be expressed in dot notation\n  \"supernew\"      : false,     // true: Tolerate `new function () { ... };` and `new Object;`\n  \"validthis\"     : true,      // true: Tolerate using this in a non-constructor function\n\n  // Environments\n  \"browser\"       : true,     // Web Browser (window, document, etc)\n  \"browserify\"    : true,     // Browserify (node.js code in the browser)\n  \"couch\"         : false,    // CouchDB\n  \"devel\"         : true,     // Development/debugging (alert, confirm, etc)\n  \"dojo\"          : false,    // Dojo Toolkit\n  \"jasmine\"       : false,    // Jasmine\n  \"jquery\"        : true,     // jQuery\n  \"mocha\"         : true,     // Mocha\n  \"mootools\"      : false,    // MooTools\n  \"node\"          : true,     // Node.js\n  \"nonstandard\"   : false,    // Widely adopted globals (escape, unescape, etc)\n  \"prototypejs\"   : false,    // Prototype and Scriptaculous\n  \"qunit\"         : false,    // QUnit\n  \"rhino\"         : false,    // Rhino\n  \"shelljs\"       : false,    // ShellJS\n  \"worker\"        : false,    // Web Workers\n  \"wsh\"           : false,    // Windows Scripting Host\n  \"yui\"           : false,    // Yahoo User Interface\n\n  // Custom Globals\n  \"globals\"       : {         // additional predefined global variables\n    \"angular\": true\n  }\n}\n"
        },
        {
          "name": ".prettierrc",
          "type": "blob",
          "size": 0.1044921875,
          "content": "{\n  \"trailingComma\": \"none\",\n  \"tabWidth\": 2,\n  \"useTabs\": false,\n  \"semi\": false,\n  \"singleQuote\": true\n}\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.0859375,
          "content": "sudo: required\nservices:\n  - docker\nlanguage: node_js\nnode_js:\n  - 8.9.0\nbefore_install:\n  - npm install -g gulp\nscript:\n  - gulp build --prod\n  - gulp dist\nafter_success:\n  # Build the snap.\n  - docker run -v $(pwd):/cwd snapcore/snapcraft sh -c 'cd /cwd && snapcraft'\ndeploy:\n  provider: releases\n  api_key:\n    secure: D3HtvuI2WsuIFGGji0U7Bh5N++HEG3ZI6HiFdElFyxTokDg90pDhJZ++Sd83V5HzF1xOIimxhVGAOsRBminunn5qGZDuRn87YNEaheAfCan+2h/PvNv09Vl8EsfKbfdFM9wjZCHuYleuzOC0KojelKZeQ9J0eXyTqMq0tfVsPq973OhmF1N+rjqHUfK13+gSnWgmdjIknXJGqFggC3XC9LxDJ8t4jGjgPDBxtPX0hPeWoA3XnEku+tf+cyio47Ueh68lnXG6RWYbGNFQT255EnGly51WemNae75fZyCE/37lGwvjoqwnoTzeGq9udsZSiJSeSCJvo/emmelmUJKvESNGng268R5ZkD4i/RAXchbD6c06z4heJJ+WFLLeQUK8Pmk6fZwX0KwkUAgPBtz1HTx9dt8J5QQPX/7OpSewImKijamzakby+RrSz98liPS+WhHgV2kDrs89FUo0pDdYdOXM7ycCxpoxS4CfCuBq9LRvXcmoyUbrYLe54yNPjqVaXPMvjOHE/Hp74AsYwxUUMmImk7RahlUIM5O2BPrCYqMRz5UlnNk+ihRSewUUz4l9T5S7XxCAaoMYSkRzPmvWH7CZnpwVqufPveStLz2rbZK0AmxRpKIhmm17TOqLzD+oLTT470ekXN3xrOhksb1k8lV0TNRDlFB3zqPv14EhC+g=\n  file:\n    - dist/pre-built.zip\n    - dist/pre-built.tar.gz\n  on:\n    skip_cleanup: true\n    tags: true\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.4541015625,
          "content": "FROM nodesource/nsolid:latest\n\nLABEL maintainer \"Joe McCann <joe@subprint.com>\"\nWORKDIR /dillinger\n# Install our dependencies (libfontconfig for phantomjs)\nRUN apt-get update && DEBIAN_FRONTEND=\"noninteractive\" apt-get install -y --no-install-recommends \\\n  bzip2 \\\n  ca-certificates \\\n  curl \\\n  git \\\n  libfontconfig \\\n  ttf-wqy-microhei \\\n  ttf-wqy-zenhei \\ \n  software-properties-common \\\n  gconf-service \\\n  libasound2 \\\n  libatk1.0-0 \\\n  libatk-bridge2.0-0 \\\n  libc6 \\\n  libcairo2 \\\n  libcups2 \\\n  libdbus-1-3 \\\n  libexpat1 \\\n  libfontconfig1 \\\n  libgcc1 \\\n  libgconf-2-4 \\\n  libgdk-pixbuf2.0-0 \\\n  libglib2.0-0 \\\n  libgtk-3-0 \\\n  libnspr4 \\\n  libpango-1.0-0 \\\n  libpangocairo-1.0-0 \\\n  libstdc++6 \\\n  libx11-6 \\\n  libx11-xcb1 \\\n  libxcb1 \\\n  libxcomposite1 \\\n  libxcursor1 \\\n  libxdamage1 \\\n  libxext6 \\\n  libxfixes3 \\\n  libxi6 \\\n  libxrandr2 \\\n  libxrender1 \\\n  libxss1 \\\n  libxtst6 \\\n  fonts-liberation \\\n  libappindicator1 \\\n  libnss3 \\\n  lsb-release \\\n  xdg-utils \\\n  wget \\\n  && rm -rf /var/lib/apt/lists/*\n\n# this is faster via npm run build-docker\nCOPY package.json ./package.json\nRUN npm install --devDependencies \\\n  && npm cache verify\n# Copy source over and create configs dir\n\nRUN rm -rf /configs\nRUN mkdir -p /configs\nCOPY . .\n\nRUN echo 'kernel.unprivileged_userns_clone=1' > /etc/sysctl.d/userns.conf\nRUN adduser --disabled-password --gecos '' dillinger\nRUN chown -R dillinger:dillinger public\nUSER dillinger\n\nEXPOSE 8080\nENV NODE_ENV=production\n\nCMD [\"npm\", \"start\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0556640625,
          "content": "Copyright (c) 2011-2020 Joe McCann\n\nAll rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "Procfile",
          "type": "blob",
          "size": 0.015625,
          "content": "web: node app.js"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.677734375,
          "content": "# Dillinger\n## _The Last Markdown Editor, Ever_\n\n[![N|Solid](https://cldup.com/dTxpPi9lDf.thumb.png)](https://nodesource.com/products/nsolid)\n\n[![Build Status](https://travis-ci.org/joemccann/dillinger.svg?branch=master)](https://travis-ci.org/joemccann/dillinger)\n\nDillinger is a cloud-enabled, mobile-ready, offline-storage compatible,\nAngularJS-powered HTML5 Markdown editor.\n\n- Type some Markdown on the left\n- See HTML in the right\n- âœ¨Magic âœ¨\n\n## Features\n\n- Import a HTML file and watch it magically convert to Markdown\n- Drag and drop images (requires your Dropbox account be linked)\n- Import and save files from GitHub, Dropbox, Google Drive and One Drive\n- Drag and drop markdown and HTML files into Dillinger\n- Export documents as Markdown, HTML and PDF\n\nMarkdown is a lightweight markup language based on the formatting conventions\nthat people naturally use in email.\nAs [John Gruber] writes on the [Markdown site][df1]\n\n> The overriding design goal for Markdown's\n> formatting syntax is to make it as readable\n> as possible. The idea is that a\n> Markdown-formatted document should be\n> publishable as-is, as plain text, without\n> looking like it's been marked up with tags\n> or formatting instructions.\n\nThis text you see here is *actually* written in Markdown! To get a feel\nfor Markdown's syntax, type some text into the left window and\nwatch the results in the right.\n\n## Tech\n\nDillinger uses a number of open source projects to work properly:\n\n- [AngularJS] - HTML enhanced for web apps!\n- [Ace Editor] - awesome web-based text editor\n- [markdown-it] - Markdown parser done right. Fast and easy to extend.\n- [Twitter Bootstrap] - great UI boilerplate for modern web apps\n- [node.js] - evented I/O for the backend\n- [Express] - fast node.js network app framework [@tjholowaychuk]\n- [Gulp] - the streaming build system\n- [Breakdance](https://breakdance.github.io/breakdance/) - HTML\nto Markdown converter\n- [jQuery] - duh\n\nAnd of course Dillinger itself is open source with a [public repository][dill]\n on GitHub.\n\n## Installation\n\nDillinger requires [Node.js](https://nodejs.org/) v10+ to run.\n\nInstall the dependencies and devDependencies and start the server.\n\n```sh\ncd dillinger\nnpm i\nnode app\n```\n\nFor production environments...\n\n```sh\nnpm install --production\nNODE_ENV=production node app\n```\n\n## Plugins\n\nDillinger is currently extended with the following plugins.\nInstructions on how to use them in your own application are linked below.\n\n| Plugin | README |\n| ------ | ------ |\n| Dropbox | [plugins/dropbox/README.md][PlDb] |\n| GitHub | [plugins/github/README.md][PlGh] |\n| Google Drive | [plugins/googledrive/README.md][PlGd] |\n| OneDrive | [plugins/onedrive/README.md][PlOd] |\n| Medium | [plugins/medium/README.md][PlMe] |\n| Google Analytics | [plugins/googleanalytics/README.md][PlGa] |\n\n## Development\n\nWant to contribute? Great!\n\nDillinger uses Gulp + Webpack for fast developing.\nMake a change in your file and instantaneously see your updates!\n\nOpen your favorite Terminal and run these commands.\n\nFirst Tab:\n\n```sh\nnode app\n```\n\nSecond Tab:\n\n```sh\ngulp watch\n```\n\n(optional) Third:\n\n```sh\nkarma test\n```\n\n#### Building for source\n\nFor production release:\n\n```sh\ngulp build --prod\n```\n\nGenerating pre-built zip archives for distribution:\n\n```sh\ngulp build dist --prod\n```\n\n## Docker\n\nDillinger is very easy to install and deploy in a Docker container.\n\nBy default, the Docker will expose port 8080, so change this within the\nDockerfile if necessary. When ready, simply use the Dockerfile to\nbuild the image.\n\n```sh\ncd dillinger\ndocker build -t <youruser>/dillinger:${package.json.version} .\n```\n\nThis will create the dillinger image and pull in the necessary dependencies.\nBe sure to swap out `${package.json.version}` with the actual\nversion of Dillinger.\n\nOnce done, run the Docker image and map the port to whatever you wish on\nyour host. In this example, we simply map port 8000 of the host to\nport 8080 of the Docker (or whatever port was exposed in the Dockerfile):\n\n```sh\ndocker run -d -p 8000:8080 --restart=always --cap-add=SYS_ADMIN --name=dillinger <youruser>/dillinger:${package.json.version}\n```\n\n> Note: `--cap-add=SYS_ADMIN` is required for PDF rendering.\n\nVerify the deployment by navigating to your server address in\nyour preferred browser.\n\n```sh\n127.0.0.1:8000\n```\n\n## License\n\nMIT\n\n**Free Software, Hell Yeah!**\n\n[//]: # (These are reference links used in the body of this note and get stripped out when the markdown processor does its job. There is no need to format nicely because it shouldn't be seen. Thanks SO - http://stackoverflow.com/questions/4823468/store-comments-in-markdown-syntax)\n\n   [dill]: <https://github.com/joemccann/dillinger>\n   [git-repo-url]: <https://github.com/joemccann/dillinger.git>\n   [john gruber]: <http://daringfireball.net>\n   [df1]: <http://daringfireball.net/projects/markdown/>\n   [markdown-it]: <https://github.com/markdown-it/markdown-it>\n   [Ace Editor]: <http://ace.ajax.org>\n   [node.js]: <http://nodejs.org>\n   [Twitter Bootstrap]: <http://twitter.github.com/bootstrap/>\n   [jQuery]: <http://jquery.com>\n   [@tjholowaychuk]: <http://twitter.com/tjholowaychuk>\n   [express]: <http://expressjs.com>\n   [AngularJS]: <http://angularjs.org>\n   [Gulp]: <http://gulpjs.com>\n\n   [PlDb]: <https://github.com/joemccann/dillinger/tree/master/plugins/dropbox/README.md>\n   [PlGh]: <https://github.com/joemccann/dillinger/tree/master/plugins/github/README.md>\n   [PlGd]: <https://github.com/joemccann/dillinger/tree/master/plugins/googledrive/README.md>\n   [PlOd]: <https://github.com/joemccann/dillinger/tree/master/plugins/onedrive/README.md>\n   [PlMe]: <https://github.com/joemccann/dillinger/tree/master/plugins/medium/README.md>\n   [PlGa]: <https://github.com/RahulHP/dillinger/blob/master/plugins/googleanalytics/README.md>\n"
        },
        {
          "name": "app.js",
          "type": "blob",
          "size": 3.728515625,
          "content": "/**\n * Main Application File for Dillinger.\n */\n\n'use strict'\n\nconst config = require('./config')()\nconst methodOverride = require('method-override')\nconst logger = require('morgan')\nconst favicon = require('serve-favicon')\nconst compress = require('compression')\nconst bodyParser = require('body-parser')\nconst cookieParser = require('cookie-parser')\nconst cookieSession = require('cookie-session')\nconst express = require('express')\nconst netjet = require('netjet')\nconst routes = require('./routes')\nconst serveStatic = require('serve-static')\nconst errorHandler = require('errorhandler')\nconst path = require('path')\nconst fs = require('fs')\nconst app = express()\nconst core = require('./plugins/core/server.js')\nconst dropbox = require('./plugins/dropbox/server.js')\nconst bitbucket = require('./plugins/bitbucket/server.js')\nconst github = require('./plugins/github/server.js')\nconst medium = require('./plugins/medium/server.js')\nconst googledrive = require('./plugins/googledrive/server.js')\nconst onedrive = require('./plugins/onedrive/server.js')\nconst env = process.env.NODE_ENV || 'development'\n\nrequire('isomorphic-fetch') /* patch global fetch for dropbox module */\n\napp.set('port', process.env.PORT || 8080)\napp.set('bind-address', process.env.BIND_ADDRESS || 'localhost')\n\napp.set('views', path.join(__dirname, '/views'))\napp.set('view engine', 'ejs')\n\n// Required to trust GCP proxy for the x-forwarded-by heading\napp.set('trust proxy', true)\n\n// May not need to use favicon if using nginx for serving\n// static assets. Just comment it out below.\napp.use(favicon(path.join(__dirname, 'public/favicon.ico')))\n\nif (env === 'development') {\n  app.use(logger('dev'))\n} else {\n  app.use(logger('short'))\n}\nif (env === 'production') {\n  app.use(require('connect-assets')({\n    paths: ['public/js', 'public/css'],\n    fingerprinting: true,\n    build: false\n  }))\n}\n\napp.use(compress())\n\napp.use(bodyParser.json({\n  limit: '512mb'\n}))\napp.use(bodyParser.urlencoded({\n  limit: '512mb',\n  extended: true\n}))\n\napp.use(methodOverride())\napp.use(cookieParser('1337 h4x0r'))\napp.use(cookieSession({\n  name: 'dillinger-session',\n  keys: ['open', 'source']\n}))\n\n// Let's 301 redirect to simply dillinger.io\napp.use(function forceLiveDomain (req, res, next) {\n  const host = req.get('Host')\n  if (host === 'www.dillinger.io') {\n    return res.redirect(301, 'http://dillinger.io' + req.originalUrl)\n  }\n  return next()\n})\n\n// Support for HTTP/2 Server Push\napp.use(netjet({\n  cache: {\n    max: 100\n  }\n}))\n\n// We do need this in any environment that is not Now/Zeit\napp.use(serveStatic(path.join(__dirname, '/public')))\n\n// Setup local variables to be available in the views.\napp.locals.title = config.title || 'Dillinger.'\napp.locals.description = config.description || 'Dillinger, the last Markdown Editor, ever.'\napp.locals.dillinger_version = require('./package.json').version\n\nif (config.googleWebmasterMeta) {\n  app.locals.googleWebmasterMeta = config.googleWebmasterMeta\n}\n\nif (config.keywords) {\n  app.locals.keywords = config.keywords\n}\n\nif (config.author) {\n  app.locals.author = config.author\n}\n\napp.locals.node_version = process.version.replace('v', '')\napp.locals.env = process.env.NODE_ENV\n\n// At startup time so sync is ok.\napp.locals.readme = fs.readFileSync(path.resolve(__dirname, './README.md'), 'utf-8')\n\nif (env === 'development') {\n  app.use(errorHandler())\n}\n\napp.get('/', routes.index)\napp.get('/privacy', routes.privacy)\napp.get('/not-implemented', routes.not_implemented)\n\napp.use(core)\napp.use(dropbox)\napp.use(bitbucket)\napp.use(github)\napp.use(medium)\napp.use(googledrive)\napp.use(onedrive)\n\napp.listen(app.get('port'), function () {\n  console.log('Express server listening on port ' + app.get('port'))\n  console.log('\\nhttp://' + app.get('bind-address') + ':' + app.get('port') + '\\n')\n})\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "config.js",
          "type": "blob",
          "size": 0.576171875,
          "content": "'use strict'\nconst rc = require('rc')\nconst defaultConfig = {\n  title: 'Online Markdown Editor - Dillinger, the Last Markdown Editor ever.',\n  description: `Dillinger is an online cloud based HTML5 filled\n  Markdown Editor. Sync with Dropbox, Github, Google Drive or OneDrive.\n  Convert HTML to Markdown. 100% Open Source!`,\n  googleWebmasterMeta: 'DAyGOgtsg8rJpq9VVktKzDkQ1UhXm1FYl8SD47hPkjA',\n  keywords: 'Markdown, Dillinger, Editor, ACE, Github, Open Source, Node.js',\n  author: 'Joe McCann and Martin Broder'\n}\n\nmodule.exports = function () {\n  return rc('dillinger', defaultConfig)\n}\n"
        },
        {
          "name": "configs",
          "type": "tree",
          "content": null
        },
        {
          "name": "dillinger.service",
          "type": "blob",
          "size": 0.37109375,
          "content": "[Unit]\nDescription=The last Markdown editor, ever. http://dillinger.io\nAfter=docker.service\nRequires=docker.service\n\n[Service]\nTimeoutStartSec=0\nRestart=always\nExecStartPre=-/usr/bin/docker stop joemccann/dillinger\nExecStartPre=-/usr/bin/docker rm joemccann/dillinger\nExecStart=/usr/bin/docker run -p 80:80 --rm --name %n joemccann/dillinger\n\n[Install]\nWantedBy=multi-user.target\n"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.2041015625,
          "content": "version: '3'\nservices:\n  dillinger:\n    build: .\n    container_name: dillinger\n    image: joemccann/dillinger\n    ports:\n      - \"9000:9000\"\n    environment:\n      - \"BIND_ADDRESS=0.0.0.0\"\n      - \"PORT=9000\"\n"
        },
        {
          "name": "gulp",
          "type": "tree",
          "content": null
        },
        {
          "name": "gulpfile.js",
          "type": "blob",
          "size": 0.052734375,
          "content": "require('es6-promise').polyfill();\nrequire(\"./gulp\");\n"
        },
        {
          "name": "karma.conf.js",
          "type": "blob",
          "size": 0.8828125,
          "content": "\n'use strict';\n\nvar fullWebpackConfig = require('./webpack.config.js');\n\nfullWebpackConfig.devtool = 'eval';\nfullWebpackConfig.cache = true;\n\nmodule.exports = function(config) {\n  return config.set({\n    basePath:   '',\n    frameworks: ['jasmine-jquery','jasmine'],\n    files:      [\n      'public/js/app.js',\n      'public/js/**/*.spec.js'\n    ],\n    exclude: [],\n    preprocessors: {\n      'public/js/app.js': ['webpack'],\n      'public/js/**/*.spec.js': ['webpack']\n    },\n    webpack:       fullWebpackConfig,\n    webpackServer: {\n      noInfo: true\n    },\n    reporters: ['progress'],\n    port:      9876,\n    colors:    true,\n    logLevel:  config.LOG_INFO,\n    autoWatch: true,\n    browsers:  ['PhantomJS'],\n    plugins: [\n      'karma-phantomjs-launcher',\n      'karma-jasmine-jquery',\n      'karma-jasmine',\n      'karma-webpack' \n    ],\n    singleRun: false,\n    concurrency: Infinity\n  });\n};\n"
        },
        {
          "name": "nginx",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 4.5302734375,
          "content": "{\n  \"name\": \"dillinger\",\n  \"description\": \"Dillinger, the last Markdown editor you'll ever need, by yours truly, Joe McCann.\",\n  \"version\": \"3.39.1\",\n  \"author\": {\n    \"name\": \"Joe McCann\",\n    \"email\": \"joe@subprint.com\"\n  },\n  \"license\": \"MIT\",\n  \"contributors\": [\n    {\n      \"name\": \"Joe McCann\",\n      \"email\": \"joe@subprint.com\"\n    },\n    {\n      \"name\": \"Martin Broder\",\n      \"email\": \"hello@martinbroder.com\"\n    }\n  ],\n  \"scripts\": {\n    \"start\": \"node app.js\",\n    \"test\": \"gulp test\",\n    \"preversion\": \"gulp build --prod\",\n    \"postversion\": \"bin/build.js\",\n    \"build\": \"gulp build --prod\",\n    \"deploy\": \"ssh azure\",\n    \"preinstall\": \"npm install --package-lock-only --ignore-scripts && npx npm-force-resolutions\"\n  },\n  \"resolutions\": {\n    \"graceful-fs\": \"^4.2.9\"\n  },\n  \"keywords\": [\n    \"dillinger\",\n    \"markdown\",\n    \"editor\",\n    \"ide\",\n    \"text\",\n    \"html\",\n    \"express\",\n    \"api\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/joemccann/dillinger\"\n  },\n  \"engines\": {\n    \"node\": \"10.x.x\",\n    \"nsolid\": \"3.x.x\"\n  },\n  \"dependencies\": {\n    \"angular\": \"^1.8.0\",\n    \"angular-bootstrap\": \"^0.12.0\",\n    \"body-parser\": \"^1.18.3\",\n    \"body-scroll-lock\": \"^2.6.3\",\n    \"brace\": \"^0.11.1\",\n    \"breakdance\": \"^0.1.5\",\n    \"colors\": \"^1.3.2\",\n    \"compression\": \"^1.7.3\",\n    \"connect\": \"^3.4.0\",\n    \"connect-assets\": \"^5.4.0\",\n    \"cookie-parser\": \"^1.4.0\",\n    \"cookie-session\": \"^1.2.0\",\n    \"debug\": \"^2.2.0\",\n    \"depd\": \"^1.1.0\",\n    \"dropbox\": \"^3.0.5\",\n    \"ejs\": \"^2.7.2\",\n    \"errorhandler\": \"^1.4.2\",\n    \"es6-promise\": \"^3.3.1\",\n    \"express\": \"^4.13.3\",\n    \"googleapis\": \"^39.1.0\",\n    \"graceful-fs\": \"4.2.2\",\n    \"gulp-cli\": \"^2.3.0\",\n    \"gulp-gzip\": \"^1.4.0\",\n    \"gulp-tar\": \"^1.9.0\",\n    \"highlight.js\": \"^10.4.1\",\n    \"inverseresize\": \"git+https://github.com/CCole/alsoResizeInverse.git\",\n    \"isomorphic-fetch\": \"^2.2.1\",\n    \"jquery\": \"^3.5.0\",\n    \"jquery-ui-bundle\": \"^1.12.1\",\n    \"katex\": \"^0.9.0\",\n    \"keymaster\": \"^1.6.2\",\n    \"lodash\": \"^4.17.21\",\n    \"markdown-it\": \"^4.4.0\",\n    \"markdown-it-abbr\": \"^1.0.4\",\n    \"markdown-it-checkbox\": \"^1.1.0\",\n    \"markdown-it-deflist\": \"^1.0.0\",\n    \"markdown-it-footnote\": \"^1.0.0\",\n    \"markdown-it-ins\": \"^1.0.0\",\n    \"markdown-it-mark\": \"^1.0.0\",\n    \"markdown-it-math\": \"^3.0.2\",\n    \"markdown-it-sub\": \"^1.0.0\",\n    \"markdown-it-sup\": \"^1.0.0\",\n    \"markdown-it-texmath\": \"^1.0.0\",\n    \"markdown-it-toc\": \"^1.1.0\",\n    \"md-to-pdf\": \"^5.0.0\",\n    \"medium-sdk\": \"0.0.4\",\n    \"method-override\": \"^2.3.5\",\n    \"morgan\": \"^1.9.1\",\n    \"netjet\": \"^1.1.3\",\n    \"parse-link-header\": \"0.4.1\",\n    \"rc\": \"0.3.0\",\n    \"reading-time\": \"^1.3.0\",\n    \"request\": \"^2.88.0\",\n    \"serve-favicon\": \"^2.5.0\",\n    \"serve-static\": \"^1.10.0\",\n    \"standard\": \"^14.3.1\",\n    \"temp\": \"^0.8.4\"\n  },\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.7.2\",\n    \"ajv\": \"^6.5.3\",\n    \"ajv-keywords\": \"^3.2.0\",\n    \"angular-mocks\": \"^1.7.4\",\n    \"babel\": \"^6.23.0\",\n    \"babel-core\": \"^6.26.3\",\n    \"babel-loader\": \"^7.1.5\",\n    \"babel-preset-env\": \"^1.7.0\",\n    \"babel-preset-es2015\": \"^6.24.1\",\n    \"babelify\": \"^10.0.0\",\n    \"balanced-match\": \"^0.2.0\",\n    \"browser-sync\": \"^2.24.7\",\n    \"cave\": \"^2.0.0\",\n    \"clean-css\": \"^4.1.11\",\n    \"critical\": \"^0.6.0\",\n    \"css-loader\": \"^0.9.0\",\n    \"dom-serializer\": \"^0.1.0\",\n    \"exports-loader\": \"^0.6.2\",\n    \"glob\": \"^5.0.5\",\n    \"gulp\": \"^3.9.1\",\n    \"gulp-autoprefixer\": \"^3.0.2\",\n    \"gulp-combine-media-queries\": \"^0.2.0\",\n    \"gulp-csso\": \"^0.2.9\",\n    \"gulp-filename-media-query\": \"^1.2.1\",\n    \"gulp-group-css-media-queries\": \"^1.1.0\",\n    \"gulp-if\": \"2.0.0\",\n    \"gulp-notify\": \"^2.2.0\",\n    \"gulp-open\": \"^0.3.0\",\n    \"gulp-postcss\": \"^8.0.0\",\n    \"gulp-rev\": \"^8.1.1\",\n    \"gulp-rimraf\": \"0.2.0\",\n    \"gulp-sass\": \"^4.0.2\",\n    \"gulp-size\": \"^1.1.0\",\n    \"gulp-util\": \"^3.0.6\",\n    \"gulp-zip\": \"^3.2.0\",\n    \"hard-source-webpack-plugin\": \"^0.12.0\",\n    \"htmlparser2\": \"^3.8.3\",\n    \"jasmine-core\": \"^2.4.1\",\n    \"jasmine-jquery\": \"^2.1.1\",\n    \"jshint-stylish\": \"^1.0.0\",\n    \"json-loader\": \"^0.5.1\",\n    \"karma\": \"^1.3.0\",\n    \"karma-chrome-launcher\": \"^0.1.5\",\n    \"karma-cli\": \"^1.0.1\",\n    \"karma-jasmine\": \"^1.1.2\",\n    \"karma-jasmine-jquery\": \"^0.1.1\",\n    \"memory-fs\": \"^0.2.0\",\n    \"ng-annotate-webpack-plugin\": \"^0.1.3\",\n    \"node-sass\": \"^4.13.1\",\n    \"pretty-hrtime\": \"^0.2.2\",\n    \"raw-loader\": \"^0.5.1\",\n    \"reaver\": \"^1.2.0\",\n    \"run-sequence\": \"^1.0.1\",\n    \"style-loader\": \"^0.8.1\",\n    \"uglify-js\": \"^3.6.9\",\n    \"uglifyjs-webpack-plugin\": \"^2.1.2\",\n    \"walkdir\": \"^0.4.1\",\n    \"webpack\": \"^4.19.1\",\n    \"webpack-dev-server\": \"^3.1.11\",\n    \"yargs\": \"^1.3.2\"\n  }\n}\n"
        },
        {
          "name": "plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "public",
          "type": "tree",
          "content": null
        },
        {
          "name": "routes",
          "type": "tree",
          "content": null
        },
        {
          "name": "snapcraft.yaml",
          "type": "blob",
          "size": 0.443359375,
          "content": "name: dillinger\nversion: master\nsummary: The last Markdown editor, ever\ndescription: |\n  Dillinger is a cloud-enabled, mobile-ready, offline-storage, AngularJS powered\n  HTML5 Markdown editor.\n\nconfinement: strict\n\napps:\n  server:\n    command: node $SNAP/lib/node_modules/Dillinger/app.js\n    plugs: [network-bind]\n    daemon: simple\n\nparts:\n  dillinger:\n    source: .\n    plugin: nodejs\n    build-packages: [bzip2, git]\n    node-packages: [is-property]\n"
        },
        {
          "name": "views",
          "type": "tree",
          "content": null
        },
        {
          "name": "webpack.config.js",
          "type": "blob",
          "size": 1.650390625,
          "content": "'use strict'\n\nconst path = require('path')\n\nconst webpack = require('webpack')\n\nconst UglifyJsPlugin = require('uglifyjs-webpack-plugin')\n\nmodule.exports = {\n  mode: 'production',\n  cache: true,\n  entry: path.join(__dirname, 'public/js/app.js'),\n  output: {\n    filename: '[name].bundle.js',\n    path: path.resolve(__dirname, 'public/js')\n  },\n  resolveLoader: {\n    moduleExtensions: ['-loader']\n  },\n  module: {\n    noParse: [\n      /brace/,\n      /angular/,\n      /autoit.js/\n    ],\n    rules: [\n      {\n        test: /\\.js$/,\n        use: {\n          loader: 'babel-loader',\n          options: { presets: ['es2015'] }\n        }\n      },\n      {\n        test: /\\.scss$/,\n        use: [\n          {\n            loader: 'style-loader' // creates style nodes from JS strings\n          },\n          {\n            loader: 'css-loader' // translates CSS into CommonJS\n          },\n          {\n            loader: 'sass-loader' // compiles Sass to CSS\n          }\n        ]\n      }\n    ]\n  },\n  optimization: {\n    minimizer: [\n      // we specify a custom UglifyJsPlugin here to get source maps in production\n      new UglifyJsPlugin({\n        cache: true,\n        parallel: true,\n        uglifyOptions: {\n          compress: false,\n          ecma: 6,\n          mangle: true\n        },\n        sourceMap: true\n      })\n    ]\n  },\n  resolve: {\n    modules: ['node_modules', 'plugins'],\n    extensions: ['.webpack.js', '.web.js', '.js'],\n    alias: {\n      angular: 'angular/angular',\n      md: 'core/markdown-it'\n    }\n  },\n  plugins: [\n    new webpack.ProvidePlugin({\n      angular: 'exports-loader?angular!angular'\n    }),\n    new webpack.LoaderOptionsPlugin({\n      debug: true\n    })\n  ]\n}\n"
        }
      ]
    }
  ]
}