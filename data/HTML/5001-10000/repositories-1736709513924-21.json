{
  "metadata": {
    "timestamp": 1736709513924,
    "page": 21,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jwasham/computer-science-flash-cards",
      "stars": 8530,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0654296875,
          "content": ".idea/\npy3env/\n__pycache__/\n*.pyc\nconfig-personal.txt\ncards.db\nenv\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.287109375,
          "content": "FROM python:3.9\nLABEL maintainer=\"Tinpee <tinpee.dev@gmail.com>\"\n\nADD . /src\nWORKDIR /src\nRUN pip install --upgrade pip \\\n    && pip install flask gunicorn\n\nCOPY entrypoint.sh /\nRUN sed -i 's/\\r$//' /entrypoint.sh\nRUN chmod +x /entrypoint.sh\n\nVOLUME /src/db\n\nEXPOSE 8000\nCMD [\"/entrypoint.sh\"]\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.2587890625,
          "content": "# Computer Science Flash Cards\n\nThis is a little website I've put together to allow me to easily make flash cards and quiz myself for memorization of:\n\n- General cs knowledge\n  - vocabulary\n  - definitions of processes\n  - powers of 2\n  - design patterns\n- Code\n  - data structures\n  - algorithms\n  - solving problems\n  - bitwise operations\n\nWill be able to use it on:\n\n- desktop\n- mobile (phone and tablet)\n\nIt uses:\n\n- Python 3\n- Flask\n- SQLite\n\n---\n\n## About the Site\n\nHere's a brief rundown: https://startupnextdoor.com/flash-cards-site-complete/\n\n## Screenshots\n\nUI for listing cards. From here you can add and edit cards.\n\n![Card UI](screenshots/cards_ui-1467754141259.png)\n\n---\n\nThe front of a General flash card.\n\n![Memorizing general knowledge](screenshots/memorize_ui-1467754306971.png)\n\n---\n\nThe reverse (answer side) of a Code flash card.\n\n![Code view](screenshots/memorize_code-1467754962142.png)\n\n## Important Note\n\nThe set included in this project (**cards-jwasham.db**) is not my full set, and is way too big already.\n\nThanks for asking for my list of 1,792 cards. But **it’s too much.** I even printed them out. It’s 50 pages, front and back, in tiny text. It would take about 8 hours to just read them all.\n\nMy set includes a lot of obscure info from books I’ve read, Python trivia, machine learning knowledge, assembly language, etc.\n\nI've added it to the project if you want it (**cards-jwasham-extreme.db**). You've been warned.\n\nPlease make your own set, and while you’re making them, only make cards for what you need to know. Otherwise, it gets out of hand.\n\n## How to convert to Anki or CSV\n\nIf you don't want to run a server, you can simply use Anki or a similar service/app. Use this script to convert from my sets (SQLite .db file), or yours, to CSV:\n\nhttps://github.com/eyedol/tools/blob/master/anki_data_builder.py\n\nThanks [@eyedol](https://github.com/eyedol)\n\n## Anki Flashcards:\n\n* [computer science flash cards - (basic)](https://ankiweb.net/shared/info/1782040640)\n* [computer science flash cards - (extreme)](https://ankiweb.net/shared/info/1691396127)\n\nThanks [@JackKuo-tw](https://github.com/JackKuo-tw)\n\n## How to run it on a server\n\n1. Clone project to a directory on your web server.\n1. Edit the config.txt file. Change the secret key, username and password. The username and password will be the login\n    for your site. There is only one user - you.\n1. Follow this long tutorial to get Flask running. It was way more work than it should be:\n    https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-uwsgi-and-nginx-on-ubuntu-16-04\n    - `wsgi.py` is the entry point. It calls `flash_cards.py`\n    - This is my systemd file `/etc/systemd/system/flash_cards.service`: [view](flash_cards.service)\n        - you can see the paths where I installed it, and the name of my virtualenv directory\n    - when done with tutorial:\n    ```shell\n    sudo systemctl restart flash_cards\n    sudo systemctl daemon-reload\n    ```\n1. When you see a login page, you're good to go.\n1. Log in.\n1. Click the \"General\" or \"Code\" button and make a card!\n1. When you're ready to start memorizing, click either \"General\" or \"Code\"\n    in the top menu.\n\n## How to run it on local host (Quick Guide)\n\n*Provided by [@devyash](https://github.com/devyash) - devyashsanghai@gmail.com - Reach out to this contributor if you have trouble.*\n\n1. Install dependencies:\n   1. Install [Python](https://www.python.org/download/releases)\n   1. Add python as environment variable [windows](http://stackoverflow.com/questions/3701646/how-to-add-to-the-pythonpath-in-windows-7)\n   1. To install pip, securely download [get-pip.py](https://bootstrap.pypa.io/get-pip.py)\n   1. Run `python get-pip.py` in terminal\n   1. Add pip to your PATH system variable [windows](https://stackoverflow.com/questions/23708898/pip-is-not-recognized-as-an-internal-or-external-command)\n   1. Run `pip install -r requirements.txt` in terminal after going to correct folder\n1. Type `python flash_cards.py` - if you get error for flask then use `python -m pip install Flask` first then run `flash_card.py` file\n1. Open localhost:5000/\n1. Login using 'admin' and 'default' for the username and password, respectively.\n\n**NOTE:** If you wish to use John's flash cards then also do following steps:\n\n1. Copy db files such as `cards-jwasham-extreme` OR `cards-jwasham` and paste them in db folder\n1. Edit file `flash_cards.py` line 8 and replace 'cards.db' with any of the other database files e.g.('cards-jwasham.db') \n1. Repeat the above steps from step 3\n\nEvery time you wish to run your db just open folder in terminal and run  `python flash_cards.py`\n\n## How to run with Docker\n\n*Provided by [@Tinpee](https://github.com/tinpee) - tinpee.dev@gmail.com - Reach out to this contributor if you have trouble.*\n\n__Make sure you already installed [docker](https://www.docker.com) and optionally [docker-compose](https://docs.docker.com/compose/install/)__\n\n1. Clone project to any where you want and go to source folder.\n1. Edit the `config.txt` file. Change the secret key, username and password. The username and password will be the login for your site. There is only one user - you.\n1. Build image:\n   - Docker: `docker build . -t cs-flash-cards`\n   - Compose: `docker-compose build`\n1. Run container:\n   - Docker: `docker run -d -p 8000:8000 --name cs-flash-cards cs-flash-cards`\n   - Compose: `docker-compose up`\n1. Go your browser and type `http://localhost:8000`\n\n__If you already had a backup file `cards.db`. Run following command:__\n\n*Note: We don't need to rebuild image, just delete old container if you already built.*\n\n```shell\ndocker run -d -p 8000:8000 --name cs-flash-cards -v <path_to_folder_contains_cards_db>:/src/db cs-flash-cards\n```\n\n- `<path_to_folder_contains_cards_db>`: is the full path contains `cards.db`.\n- Example: `/home/tinpee/cs-flash-cards/db`, and `cards.db` is inside this folder.\n\nFor convenience, if you don't have `cards.db`, this container will auto copy a new one from `cards-empty.db`.\n\n---\n\n### How to backup data ?\nWe just need store `cards.db` file, and don't need any sql command.\n- If you run container with `-v <folder_db>:/src/db` just go to `folder_db` and store `cards.db` anywhere you want.\n- Without `-v flag`. Type: `docker cp <name_of_container>:/src/db/cards.db /path/to/save`\n\n### How to restore data ?\n- Delete old container (not image): `docker rm cs-flash-cards`\n- Build a new one with `-v flag`:\n`docker run -d -p 8000:8000 --name cs-flash-cards -v <path_to_folder_contains_cards_db>:/src/db cs-flash-cards`\n- Voila :)\n\n### How to deploy docker file on heroku\n\n- first install [heroku CLI](https://devcenter.heroku.com/articles/heroku-cli)\n- change `entrypoint.sh`\n\n```shell\n- export CARDS_SETTINGS=/src/config.txt\ngunicorn --bind  0.0.0.0:$8000 flash_cards:app\n+ export CARDS_SETTINGS=/src/config.txt\ngunicorn --bind  0.0.0.0:$PORT flash_cards:app\n```\n- deploy docker file with following commands\n\n```shell\nheroku login\nheroku container:login\nheroku create\n# Creating app... done, ⬢ your-app-name\nheroku container:push web --app your-app-name\nheroku container:release web --app your-app-name\nheroku open --app your-app-name\n```\n\n## Alternative for Node fans\n\n[@ashwanikumar04](https://github.com/ashwanikumar04) put together an alternative flash cards site running Node: https://github.com/ashwanikumar04/flash-cards\n\nCheck out the demo!\n\n*Happy learning!*\n"
        },
        {
          "name": "cards-empty.db",
          "type": "blob",
          "size": 244,
          "content": null
        },
        {
          "name": "cards-jwasham-extreme.db",
          "type": "blob",
          "size": 435,
          "content": null
        },
        {
          "name": "cards-jwasham.db",
          "type": "blob",
          "size": 279,
          "content": null
        },
        {
          "name": "config.txt",
          "type": "blob",
          "size": 0.083984375,
          "content": "SECRET_KEY='some very long key here'\nUSERNAME='username-test'\nPASSWORD='password-test'"
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "db",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.232421875,
          "content": "version: '3'\n\nservices:\n\n  cs-flash-cards:\n    build: .\n    ports:\n      - 8000:8000\n    volumes:\n      - ./cards-empty.db:/src/db/cards.db\n#      - ./cards-jwasham-extreme.db:/src/db/cards.db\n#      - ./cards-jwasham.db:/src/db/cards.db\n"
        },
        {
          "name": "entrypoint.sh",
          "type": "blob",
          "size": 0.1669921875,
          "content": "#!/bin/bash\n\nif [ ! -f /src/db/cards.db ]; then\n\tcp cards-empty.db /src/db/cards.db\nfi\n\nexport CARDS_SETTINGS=/src/config.txt\ngunicorn --bind  0.0.0.0:8000 flash_cards:app"
        },
        {
          "name": "flash_cards.ini",
          "type": "blob",
          "size": 0.1337890625,
          "content": "[uwsgi]\nmodule = wsgi:app\n\nmaster = true\nprocesses = 5\n\nsocket = flash_cards.sock\nchmod-socket = 660\nvacuum = true\n\ndie-on-term = true\n\n\n"
        },
        {
          "name": "flash_cards.py",
          "type": "blob",
          "size": 12.349609375,
          "content": "import os\nimport sqlite3\nfrom flask import Flask, request, session, g, redirect, url_for, abort, \\\n    render_template, flash\n\napp = Flask(__name__)\napp.config.from_object(__name__)\nnameDB='cards.db'\npathDB='db'\n\ndef load_config():\n    app.config.update(dict(\n        DATABASE=os.path.join(app.root_path, pathDB, nameDB),\n        SECRET_KEY='development key',\n        USERNAME='admin',\n        PASSWORD='default'\n    ))\n    app.config.from_envvar('CARDS_SETTINGS', silent=True)\n\nif __name__ == \"__main__\" or __name__ == \"flash_cards\":\n    load_config()\n\ndef connect_db():\n    rv = sqlite3.connect(app.config['DATABASE'])\n    rv.row_factory = sqlite3.Row\n    return rv\n\n\ndef init_db():\n    db = get_db()\n    with app.open_resource('data/schema.sql', mode='r') as f:\n        db.cursor().executescript(f.read())\n    db.commit()\n\ndef get_db():\n    \"\"\"Opens a new database connection if there is none yet for the\n    current application context.\n    \"\"\"\n    if not hasattr(g, 'sqlite_db'):\n        g.sqlite_db = connect_db()\n    return g.sqlite_db\n\n\n@app.teardown_appcontext\ndef close_db(error):\n    \"\"\"Closes the database again at the end of the request.\"\"\"\n    if hasattr(g, 'sqlite_db'):\n        g.sqlite_db.close()\n\n@app.route('/')\ndef index():\n    if session.get('logged_in'):\n        return redirect(url_for('list_db'))\n    else:\n        return redirect(url_for('login'))\n\n\n@app.route('/cards')\ndef cards():\n    if not session.get('logged_in'):\n        return redirect(url_for('login'))\n    db = get_db()\n    query = '''\n        SELECT id, type, front, back, known\n        FROM cards\n        ORDER BY id DESC\n    '''\n    cur = db.execute(query)\n    cards = cur.fetchall()\n    tags = getAllTag()\n    return render_template('cards.html', cards=cards, tags=tags, filter_name=\"all\")\n\n\n@app.route('/filter_cards/<filter_name>')\ndef filter_cards(filter_name):\n    if not session.get('logged_in'):\n        return redirect(url_for('login'))\n\n    filters = {\n        \"all\":      \"where 1 = 1\",\n        \"general\":  \"where type = 1\",\n        \"code\":     \"where type = 2\",\n        \"known\":    \"where known = 1\",\n        \"unknown\":  \"where known = 0\",\n    }\n\n    query = filters.get(filter_name)\n    if(query is None):\n        query = \"where type = {0}\".format(filter_name)\n        filter_name = int(filter_name)\n\n    if not query:\n        return redirect(url_for('show'))\n\n    db = get_db()\n    fullquery = \"SELECT id, type, front, back, known FROM cards \" + \\\n        query + \" ORDER BY id DESC\"\n    cur = db.execute(fullquery)\n    cards = cur.fetchall()\n    tags = getAllTag()\n    return render_template('show.html', cards=cards, tags=tags, filter_name=filter_name)\n\n\n@app.route('/add', methods=['POST'])\ndef add_card():\n    if not session.get('logged_in'):\n        return redirect(url_for('login'))\n    db = get_db()\n    db.execute('INSERT INTO cards (type, front, back) VALUES (?, ?, ?)',\n               [request.form['type'],\n                request.form['front'],\n                request.form['back']\n                ])\n    db.commit()\n    flash('New card was successfully added.')\n    return redirect(url_for('cards'))\n\n\n@app.route('/edit/<card_id>')\ndef edit(card_id):\n    if not session.get('logged_in'):\n        return redirect(url_for('login'))\n    db = get_db()\n    query = '''\n        SELECT id, type, front, back, known\n        FROM cards\n        WHERE id = ?\n    '''\n    cur = db.execute(query, [card_id])\n    card = cur.fetchone()\n    tags = getAllTag()\n    return render_template('edit.html', card=card, tags=tags)\n\n\n@app.route('/edit_card', methods=['POST'])\ndef edit_card():\n    if not session.get('logged_in'):\n        return redirect(url_for('login'))\n    selected = request.form.getlist('known')\n    known = bool(selected)\n    db = get_db()\n    command = '''\n        UPDATE cards\n        SET\n          type = ?,\n          front = ?,\n          back = ?,\n          known = ?\n        WHERE id = ?\n    '''\n    db.execute(command,\n               [request.form['type'],\n                request.form['front'],\n                request.form['back'],\n                known,\n                request.form['card_id']\n                ])\n    db.commit()\n    flash('Card saved.')\n    return redirect(url_for('show'))\n\n\n@app.route('/delete/<card_id>')\ndef delete(card_id):\n    if not session.get('logged_in'):\n        return redirect(url_for('login'))\n    db = get_db()\n    db.execute('DELETE FROM cards WHERE id = ?', [card_id])\n    db.commit()\n    flash('Card deleted.')\n    return redirect(url_for('cards'))\n\n@app.route('/memorize')\n@app.route('/memorize/<card_type>')\n@app.route('/memorize/<card_type>/<card_id>')\ndef memorize(card_type, card_id=None):\n    tag = getTag(card_type)\n    if tag is None:\n        return redirect(url_for('cards'))\n\n    if card_id:\n        card = get_card_by_id(card_id)\n    else:\n        card = get_card(card_type)\n    if not card:\n        flash(\"You've learned all the '\" + tag[1] + \"' cards.\")\n        return redirect(url_for('show'))\n    short_answer = (len(card['back']) < 75)\n    tags = getAllTag()\n    card_type = int(card_type)\n    return render_template('memorize.html',\n                           card=card,\n                           card_type=card_type,\n                           short_answer=short_answer, tags=tags)\n\n@app.route('/memorize_known')\n@app.route('/memorize_known/<card_type>')\n@app.route('/memorize_known/<card_type>/<card_id>')\ndef memorize_known(card_type, card_id=None):\n    tag = getTag(card_type)\n    if tag is None:\n        return redirect(url_for('cards'))\n\n    if card_id:\n        card = get_card_by_id(card_id)\n    else:\n        card = get_card_already_known(card_type)\n    if not card:\n        flash(\"You haven't learned any '\" + tag[1] + \"' cards yet.\")\n        return redirect(url_for('show'))\n    short_answer = (len(card['back']) < 75)\n    tags = getAllTag()\n    card_type = int(card_type)\n    return render_template('memorize_known.html',\n                           card=card,\n                           card_type=card_type,\n                           short_answer=short_answer, tags=tags)\n\n\ndef get_card(type):\n    db = get_db()\n\n    query = '''\n      SELECT\n        id, type, front, back, known\n      FROM cards\n      WHERE\n        type = ?\n        and known = 0\n      ORDER BY RANDOM()\n      LIMIT 1\n    '''\n\n    cur = db.execute(query, [type])\n    return cur.fetchone()\n\n\ndef get_card_by_id(card_id):\n    db = get_db()\n\n    query = '''\n      SELECT\n        id, type, front, back, known\n      FROM cards\n      WHERE\n        id = ?\n      LIMIT 1\n    '''\n\n    cur = db.execute(query, [card_id])\n    return cur.fetchone()\n\n\n@app.route('/mark_known/<card_id>/<card_type>')\ndef mark_known(card_id, card_type):\n    if not session.get('logged_in'):\n        return redirect(url_for('login'))\n    db = get_db()\n    db.execute('UPDATE cards SET known = 1 WHERE id = ?', [card_id])\n    db.commit()\n    flash('Card marked as known.')\n    return redirect(url_for('memorize', card_type=card_type))\n\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    error = None\n    if request.method == 'POST':\n        if request.form['username'] != app.config['USERNAME']:\n            error = 'Invalid username or password!'\n        elif request.form['password'] != app.config['PASSWORD']:\n            error = 'Invalid username or password!'\n        else:\n            session['logged_in'] = True\n            session.permanent = True  # stay logged in\n            return redirect(url_for('index'))\n    return render_template('login.html', error=error)\n\n\n@app.route('/logout')\ndef logout():\n    session.pop('logged_in', None)\n    flash(\"You've logged out\")\n    return redirect(url_for('index'))\n\n\ndef getAllTag():\n    if not session.get('logged_in'):\n        return redirect(url_for('login'))\n    db = get_db()\n    query = '''\n        SELECT id, tagName\n        FROM tags\n        ORDER BY id ASC\n    '''\n    cur = db.execute(query)\n    tags = cur.fetchall()\n    return tags\n\n\n@app.route('/tags')\ndef tags():\n    if not session.get('logged_in'):\n        return redirect(url_for('login'))\n    tags = getAllTag()\n    return render_template('tags.html', tags=tags, filter_name=\"all\")\n\n\n@app.route('/addTag', methods=['POST'])\ndef add_tag():\n    if not session.get('logged_in'):\n        return redirect(url_for('login'))\n    db = get_db()\n    db.execute('INSERT INTO tags (tagName) VALUES (?)',\n               [request.form['tagName']])\n    db.commit()\n    flash('New tag was successfully added.')\n    return redirect(url_for('tags'))\n\n\n@app.route('/editTag/<tag_id>')\ndef edit_tag(tag_id):\n    if not session.get('logged_in'):\n        return redirect(url_for('login'))\n    tag = getTag(tag_id)\n    return render_template('editTag.html', tag=tag)\n\n\n@app.route('/updateTag', methods=['POST'])\ndef update_tag():\n    if not session.get('logged_in'):\n        return redirect(url_for('login'))\n    db = get_db()\n    command = '''\n        UPDATE tags\n        SET\n          tagName = ?\n        WHERE id = ?\n    '''\n    db.execute(command,\n               [request.form['tagName'],\n                request.form['tag_id']\n                ])\n    db.commit()\n    flash('Tag saved.')\n    return redirect(url_for('tags'))\n\ndef init_tag():\n    if not session.get('logged_in'):\n        return redirect(url_for('login'))\n    db = get_db()\n    db.execute('INSERT INTO tags (tagName) VALUES (?)',\n               [\"general\"])\n    db.commit()\n    db.execute('INSERT INTO tags (tagName) VALUES (?)',\n               [\"code\"])\n    db.commit()\n    db.execute('INSERT INTO tags (tagName) VALUES (?)',\n               [\"bookmark\"])\n    db.commit()\n\n@app.route('/show')\ndef show():\n    if not session.get('logged_in'):\n        return redirect(url_for('login'))\n    tags = getAllTag()\n    return render_template('show.html', tags=tags, filter_name=\"\")\n\ndef getTag(tag_id):\n    if not session.get('logged_in'):\n        return redirect(url_for('login'))\n    db = get_db()\n    query = '''\n        SELECT id, tagName\n        FROM tags\n        WHERE id = ?\n    '''\n    cur = db.execute(query, [tag_id])\n    tag = cur.fetchone()\n    return tag\n\n@app.route('/bookmark/<card_type>/<card_id>')\ndef bookmark(card_type, card_id):\n    if not session.get('logged_in'):\n        return redirect(url_for('login'))\n    db = get_db()\n    db.execute('UPDATE cards SET type = ? WHERE id = ?',[card_type,card_id])\n    db.commit()\n    flash('Card saved.')\n    return redirect(url_for('memorize', card_type=card_type))\n\n@app.route('/list_db')\ndef list_db():\n    if not session.get('logged_in'):\n        return redirect(url_for('login'))\n    dbs = [f for f in os.listdir(pathDB) if os.path.isfile(os.path.join(pathDB, f))]\n    dbs = list(filter(lambda k: '.db' in k, dbs))\n    return render_template('listDb.html', dbs=dbs)\n\n@app.route('/load_db/<name>')\ndef load_db(name):\n    if not session.get('logged_in'):\n        return redirect(url_for('login'))\n    global nameDB\n    nameDB=name\n    load_config()\n    handle_old_schema()\n    return redirect(url_for('memorize', card_type=\"1\"))\n\n@app.route('/create_db')\ndef create_db():\n    if not session.get('logged_in'):\n        return redirect(url_for('login'))\n    return render_template('createDb.html')\n\n@app.route('/init', methods=['POST'])\ndef init():\n    if not session.get('logged_in'):\n        return redirect(url_for('login'))\n    global nameDB\n    nameDB = request.form['dbName'] + '.db'\n    load_config()\n    init_db()\n    init_tag()\n    return redirect(url_for('index'))\n\ndef check_table_tag_exists():\n    db = get_db()\n    cur = db.execute(\"SELECT name FROM sqlite_master WHERE type='table' AND name='tags'\")\n    result = cur.fetchone()\n    return result\n\ndef create_tag_table():\n    db = get_db()\n    with app.open_resource('data/handle_old_schema.sql', mode='r') as f:\n        db.cursor().executescript(f.read())\n    db.commit()\n\ndef handle_old_schema():\n    result = check_table_tag_exists()\n    if(result is None):\n        create_tag_table()\n        init_tag()\n\ndef get_card_already_known(type):\n    db = get_db()\n\n    query = '''\n      SELECT\n        id, type, front, back, known\n      FROM cards\n      WHERE\n        type = ?\n        and known = 1\n      ORDER BY RANDOM()\n      LIMIT 1\n    '''\n\n    cur = db.execute(query, [type])\n    return cur.fetchone()\n\n@app.route('/mark_unknown/<card_id>/<card_type>')\ndef mark_unknown(card_id, card_type):\n    if not session.get('logged_in'):\n        return redirect(url_for('login'))\n    db = get_db()\n    db.execute('UPDATE cards SET known = 0 WHERE id = ?', [card_id])\n    db.commit()\n    flash('Card marked as unknown.')\n    return redirect(url_for('memorize_known', card_type=card_type))\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0')\n"
        },
        {
          "name": "flash_cards.service",
          "type": "blob",
          "size": 0.380859375,
          "content": "[Unit]\nDescription=uWSGI instance to serve flash_cards\nAfter=network.target\n\n[Service]\nUser=john\nGroup=www-data\nWorkingDirectory=/var/www/cs_flash_cards\nEnvironment=\"PATH=/var/www/cs_flash_cards/py3env/bin\"\nEnvironment=\"CARDS_SETTINGS=/var/www/cs_flash_cards/config-personal.txt\"\nExecStart=/var/www/cs_flash_cards/py3env/bin/uwsgi --ini flash_cards.ini\n\n[Install]\nWantedBy=multi-user.target"
        },
        {
          "name": "license.md",
          "type": "blob",
          "size": 19.6591796875,
          "content": "Attribution-ShareAlike 4.0 International\n\n=======================================================================\n\nCreative Commons Corporation (\"Creative Commons\") is not a law firm and\ndoes not provide legal services or legal advice. Distribution of\nCreative Commons public licenses does not create a lawyer-client or\nother relationship. Creative Commons makes its licenses and related\ninformation available on an \"as-is\" basis. Creative Commons gives no\nwarranties regarding its licenses, any material licensed under their\nterms and conditions, or any related information. Creative Commons\ndisclaims all liability for damages resulting from their use to the\nfullest extent possible.\n\nUsing Creative Commons Public Licenses\n\nCreative Commons public licenses provide a standard set of terms and\nconditions that creators and other rights holders may use to share\noriginal works of authorship and other material subject to copyright\nand certain other rights specified in the public license below. The\nfollowing considerations are for informational purposes only, are not\nexhaustive, and do not form part of our licenses.\n\n     Considerations for licensors: Our public licenses are\n     intended for use by those authorized to give the public\n     permission to use material in ways otherwise restricted by\n     copyright and certain other rights. Our licenses are\n     irrevocable. Licensors should read and understand the terms\n     and conditions of the license they choose before applying it.\n     Licensors should also secure all rights necessary before\n     applying our licenses so that the public can reuse the\n     material as expected. Licensors should clearly mark any\n     material not subject to the license. This includes other CC-\n     licensed material, or material used under an exception or\n     limitation to copyright. More considerations for licensors:\n\twiki.creativecommons.org/Considerations_for_licensors\n\n     Considerations for the public: By using one of our public\n     licenses, a licensor grants the public permission to use the\n     licensed material under specified terms and conditions. If\n     the licensor's permission is not necessary for any reason--for\n     example, because of any applicable exception or limitation to\n     copyright--then that use is not regulated by the license. Our\n     licenses grant only permissions under copyright and certain\n     other rights that a licensor has authority to grant. Use of\n     the licensed material may still be restricted for other\n     reasons, including because others have copyright or other\n     rights in the material. A licensor may make special requests,\n     such as asking that all changes be marked or described.\n     Although not required by our licenses, you are encouraged to\n     respect those requests where reasonable. More_considerations\n     for the public:\n\twiki.creativecommons.org/Considerations_for_licensees\n\n=======================================================================\n\nCreative Commons Attribution-ShareAlike 4.0 International Public\nLicense\n\nBy exercising the Licensed Rights (defined below), You accept and agree\nto be bound by the terms and conditions of this Creative Commons\nAttribution-ShareAlike 4.0 International Public License (\"Public\nLicense\"). To the extent this Public License may be interpreted as a\ncontract, You are granted the Licensed Rights in consideration of Your\nacceptance of these terms and conditions, and the Licensor grants You\nsuch rights in consideration of benefits the Licensor receives from\nmaking the Licensed Material available under these terms and\nconditions.\n\n\nSection 1 -- Definitions.\n\n  a. Adapted Material means material subject to Copyright and Similar\n     Rights that is derived from or based upon the Licensed Material\n     and in which the Licensed Material is translated, altered,\n     arranged, transformed, or otherwise modified in a manner requiring\n     permission under the Copyright and Similar Rights held by the\n     Licensor. For purposes of this Public License, where the Licensed\n     Material is a musical work, performance, or sound recording,\n     Adapted Material is always produced where the Licensed Material is\n     synched in timed relation with a moving image.\n\n  b. Adapter's License means the license You apply to Your Copyright\n     and Similar Rights in Your contributions to Adapted Material in\n     accordance with the terms and conditions of this Public License.\n\n  c. BY-SA Compatible License means a license listed at\n     creativecommons.org/compatiblelicenses, approved by Creative\n     Commons as essentially the equivalent of this Public License.\n\n  d. Copyright and Similar Rights means copyright and/or similar rights\n     closely related to copyright including, without limitation,\n     performance, broadcast, sound recording, and Sui Generis Database\n     Rights, without regard to how the rights are labeled or\n     categorized. For purposes of this Public License, the rights\n     specified in Section 2(b)(1)-(2) are not Copyright and Similar\n     Rights.\n\n  e. Effective Technological Measures means those measures that, in the\n     absence of proper authority, may not be circumvented under laws\n     fulfilling obligations under Article 11 of the WIPO Copyright\n     Treaty adopted on December 20, 1996, and/or similar international\n     agreements.\n\n  f. Exceptions and Limitations means fair use, fair dealing, and/or\n     any other exception or limitation to Copyright and Similar Rights\n     that applies to Your use of the Licensed Material.\n\n  g. License Elements means the license attributes listed in the name\n     of a Creative Commons Public License. The License Elements of this\n     Public License are Attribution and ShareAlike.\n\n  h. Licensed Material means the artistic or literary work, database,\n     or other material to which the Licensor applied this Public\n     License.\n\n  i. Licensed Rights means the rights granted to You subject to the\n     terms and conditions of this Public License, which are limited to\n     all Copyright and Similar Rights that apply to Your use of the\n     Licensed Material and that the Licensor has authority to license.\n\n  j. Licensor means the individual(s) or entity(ies) granting rights\n     under this Public License.\n\n  k. Share means to provide material to the public by any means or\n     process that requires permission under the Licensed Rights, such\n     as reproduction, public display, public performance, distribution,\n     dissemination, communication, or importation, and to make material\n     available to the public including in ways that members of the\n     public may access the material from a place and at a time\n     individually chosen by them.\n\n  l. Sui Generis Database Rights means rights other than copyright\n     resulting from Directive 96/9/EC of the European Parliament and of\n     the Council of 11 March 1996 on the legal protection of databases,\n     as amended and/or succeeded, as well as other essentially\n     equivalent rights anywhere in the world.\n\n  m. You means the individual or entity exercising the Licensed Rights\n     under this Public License. Your has a corresponding meaning.\n\n\nSection 2 -- Scope.\n\n  a. License grant.\n\n       1. Subject to the terms and conditions of this Public License,\n          the Licensor hereby grants You a worldwide, royalty-free,\n          non-sublicensable, non-exclusive, irrevocable license to\n          exercise the Licensed Rights in the Licensed Material to:\n\n            a. reproduce and Share the Licensed Material, in whole or\n               in part; and\n\n            b. produce, reproduce, and Share Adapted Material.\n\n       2. Exceptions and Limitations. For the avoidance of doubt, where\n          Exceptions and Limitations apply to Your use, this Public\n          License does not apply, and You do not need to comply with\n          its terms and conditions.\n\n       3. Term. The term of this Public License is specified in Section\n          6(a).\n\n       4. Media and formats; technical modifications allowed. The\n          Licensor authorizes You to exercise the Licensed Rights in\n          all media and formats whether now known or hereafter created,\n          and to make technical modifications necessary to do so. The\n          Licensor waives and/or agrees not to assert any right or\n          authority to forbid You from making technical modifications\n          necessary to exercise the Licensed Rights, including\n          technical modifications necessary to circumvent Effective\n          Technological Measures. For purposes of this Public License,\n          simply making modifications authorized by this Section 2(a)\n          (4) never produces Adapted Material.\n\n       5. Downstream recipients.\n\n            a. Offer from the Licensor -- Licensed Material. Every\n               recipient of the Licensed Material automatically\n               receives an offer from the Licensor to exercise the\n               Licensed Rights under the terms and conditions of this\n               Public License.\n\n            b. Additional offer from the Licensor -- Adapted Material.\n               Every recipient of Adapted Material from You\n               automatically receives an offer from the Licensor to\n               exercise the Licensed Rights in the Adapted Material\n               under the conditions of the Adapter's License You apply.\n\n            c. No downstream restrictions. You may not offer or impose\n               any additional or different terms or conditions on, or\n               apply any Effective Technological Measures to, the\n               Licensed Material if doing so restricts exercise of the\n               Licensed Rights by any recipient of the Licensed\n               Material.\n\n       6. No endorsement. Nothing in this Public License constitutes or\n          may be construed as permission to assert or imply that You\n          are, or that Your use of the Licensed Material is, connected\n          with, or sponsored, endorsed, or granted official status by,\n          the Licensor or others designated to receive attribution as\n          provided in Section 3(a)(1)(A)(i).\n\n  b. Other rights.\n\n       1. Moral rights, such as the right of integrity, are not\n          licensed under this Public License, nor are publicity,\n          privacy, and/or other similar personality rights; however, to\n          the extent possible, the Licensor waives and/or agrees not to\n          assert any such rights held by the Licensor to the limited\n          extent necessary to allow You to exercise the Licensed\n          Rights, but not otherwise.\n\n       2. Patent and trademark rights are not licensed under this\n          Public License.\n\n       3. To the extent possible, the Licensor waives any right to\n          collect royalties from You for the exercise of the Licensed\n          Rights, whether directly or through a collecting society\n          under any voluntary or waivable statutory or compulsory\n          licensing scheme. In all other cases the Licensor expressly\n          reserves any right to collect such royalties.\n\n\nSection 3 -- License Conditions.\n\nYour exercise of the Licensed Rights is expressly made subject to the\nfollowing conditions.\n\n  a. Attribution.\n\n       1. If You Share the Licensed Material (including in modified\n          form), You must:\n\n            a. retain the following if it is supplied by the Licensor\n               with the Licensed Material:\n\n                 i. identification of the creator(s) of the Licensed\n                    Material and any others designated to receive\n                    attribution, in any reasonable manner requested by\n                    the Licensor (including by pseudonym if\n                    designated);\n\n                ii. a copyright notice;\n\n               iii. a notice that refers to this Public License;\n\n                iv. a notice that refers to the disclaimer of\n                    warranties;\n\n                 v. a URI or hyperlink to the Licensed Material to the\n                    extent reasonably practicable;\n\n            b. indicate if You modified the Licensed Material and\n               retain an indication of any previous modifications; and\n\n            c. indicate the Licensed Material is licensed under this\n               Public License, and include the text of, or the URI or\n               hyperlink to, this Public License.\n\n       2. You may satisfy the conditions in Section 3(a)(1) in any\n          reasonable manner based on the medium, means, and context in\n          which You Share the Licensed Material. For example, it may be\n          reasonable to satisfy the conditions by providing a URI or\n          hyperlink to a resource that includes the required\n          information.\n\n       3. If requested by the Licensor, You must remove any of the\n          information required by Section 3(a)(1)(A) to the extent\n          reasonably practicable.\n\n  b. ShareAlike.\n\n     In addition to the conditions in Section 3(a), if You Share\n     Adapted Material You produce, the following conditions also apply.\n\n       1. The Adapter's License You apply must be a Creative Commons\n          license with the same License Elements, this version or\n          later, or a BY-SA Compatible License.\n\n       2. You must include the text of, or the URI or hyperlink to, the\n          Adapter's License You apply. You may satisfy this condition\n          in any reasonable manner based on the medium, means, and\n          context in which You Share Adapted Material.\n\n       3. You may not offer or impose any additional or different terms\n          or conditions on, or apply any Effective Technological\n          Measures to, Adapted Material that restrict exercise of the\n          rights granted under the Adapter's License You apply.\n\n\nSection 4 -- Sui Generis Database Rights.\n\nWhere the Licensed Rights include Sui Generis Database Rights that\napply to Your use of the Licensed Material:\n\n  a. for the avoidance of doubt, Section 2(a)(1) grants You the right\n     to extract, reuse, reproduce, and Share all or a substantial\n     portion of the contents of the database;\n\n  b. if You include all or a substantial portion of the database\n     contents in a database in which You have Sui Generis Database\n     Rights, then the database in which You have Sui Generis Database\n     Rights (but not its individual contents) is Adapted Material,\n\n     including for purposes of Section 3(b); and\n  c. You must comply with the conditions in Section 3(a) if You Share\n     all or a substantial portion of the contents of the database.\n\nFor the avoidance of doubt, this Section 4 supplements and does not\nreplace Your obligations under this Public License where the Licensed\nRights include other Copyright and Similar Rights.\n\n\nSection 5 -- Disclaimer of Warranties and Limitation of Liability.\n\n  a. UNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE\n     EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS\n     AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF\n     ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS,\n     IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION,\n     WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR\n     PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS,\n     ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT\n     KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT\n     ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU.\n\n  b. TO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE\n     TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION,\n     NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT,\n     INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES,\n     COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR\n     USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN\n     ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR\n     DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR\n     IN PART, THIS LIMITATION MAY NOT APPLY TO YOU.\n\n  c. The disclaimer of warranties and limitation of liability provided\n     above shall be interpreted in a manner that, to the extent\n     possible, most closely approximates an absolute disclaimer and\n     waiver of all liability.\n\n\nSection 6 -- Term and Termination.\n\n  a. This Public License applies for the term of the Copyright and\n     Similar Rights licensed here. However, if You fail to comply with\n     this Public License, then Your rights under this Public License\n     terminate automatically.\n\n  b. Where Your right to use the Licensed Material has terminated under\n     Section 6(a), it reinstates:\n\n       1. automatically as of the date the violation is cured, provided\n          it is cured within 30 days of Your discovery of the\n          violation; or\n\n       2. upon express reinstatement by the Licensor.\n\n     For the avoidance of doubt, this Section 6(b) does not affect any\n     right the Licensor may have to seek remedies for Your violations\n     of this Public License.\n\n  c. For the avoidance of doubt, the Licensor may also offer the\n     Licensed Material under separate terms or conditions or stop\n     distributing the Licensed Material at any time; however, doing so\n     will not terminate this Public License.\n\n  d. Sections 1, 5, 6, 7, and 8 survive termination of this Public\n     License.\n\n\nSection 7 -- Other Terms and Conditions.\n\n  a. The Licensor shall not be bound by any additional or different\n     terms or conditions communicated by You unless expressly agreed.\n\n  b. Any arrangements, understandings, or agreements regarding the\n     Licensed Material not stated herein are separate from and\n     independent of the terms and conditions of this Public License.\n\n\nSection 8 -- Interpretation.\n\n  a. For the avoidance of doubt, this Public License does not, and\n     shall not be interpreted to, reduce, limit, restrict, or impose\n     conditions on any use of the Licensed Material that could lawfully\n     be made without permission under this Public License.\n\n  b. To the extent possible, if any provision of this Public License is\n     deemed unenforceable, it shall be automatically reformed to the\n     minimum extent necessary to make it enforceable. If the provision\n     cannot be reformed, it shall be severed from this Public License\n     without affecting the enforceability of the remaining terms and\n     conditions.\n\n  c. No term or condition of this Public License will be waived and no\n     failure to comply consented to unless expressly agreed to by the\n     Licensor.\n\n  d. Nothing in this Public License constitutes or may be interpreted\n     as a limitation upon, or waiver of, any privileges and immunities\n     that apply to the Licensor or You, including from the legal\n     processes of any jurisdiction or authority.\n\n\n=======================================================================\n\nCreative Commons is not a party to its public\nlicenses. Notwithstanding, Creative Commons may elect to apply one of\nits public licenses to material it publishes and in those instances\nwill be considered the “Licensor.” The text of the Creative Commons\npublic licenses is dedicated to the public domain under the CC0 Public\nDomain Dedication. Except for the limited purpose of indicating that\nmaterial is shared under a Creative Commons public license or as\notherwise permitted by the Creative Commons policies published at\ncreativecommons.org/policies, Creative Commons does not authorize the\nuse of the trademark \"Creative Commons\" or any other trademark or logo\nof Creative Commons without its prior written consent including,\nwithout limitation, in connection with any unauthorized modifications\nto any of its public licenses or any other arrangements,\nunderstandings, or agreements concerning use of licensed material. For\nthe avoidance of doubt, this paragraph does not form part of the\npublic licenses.\n\nCreative Commons may be contacted at creativecommons.org.\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.4033203125,
          "content": "boto==2.40.0\nclick==6.7\nconfigparser==3.5.0\ncryptography==43.0.1\nenum34==1.1.6\nFlask==2.3.2\nfuture==0.18.3\nhttplib2==0.19.0\nipaddress==1.0.16\nitsdangerous==0.24\nJinja2==3.1.4\njsonschema==2.5.1\nlockfile==0.12.2\nMarkupSafe==0.23\nndg-httpsclient==0.4.2\npsutil==5.6.6\npyasn1==0.1.9\npycurl==7.43.0\npyOpenSSL==17.5.0\npytz==2016.10\npyxdg==0.26\nrequests==2.32.0\nscour==0.32\nsix==1.10.0\nvirtualenv==15.1.0\nWerkzeug==3.0.3\n"
        },
        {
          "name": "screenshots",
          "type": "tree",
          "content": null
        },
        {
          "name": "static",
          "type": "tree",
          "content": null
        },
        {
          "name": "templates",
          "type": "tree",
          "content": null
        },
        {
          "name": "wsgi.py",
          "type": "blob",
          "size": 0.0693359375,
          "content": "from flash_cards import app\n\nif __name__ == \"__main__\":\n    app.run()\n\n"
        }
      ]
    }
  ]
}