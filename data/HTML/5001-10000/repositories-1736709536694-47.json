{
  "metadata": {
    "timestamp": 1736709536694,
    "page": 47,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "boostorg/boost",
      "stars": 7328,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 3.8251953125,
          "content": "* text=auto !eol svneol=native#text/plain\n*.gitattributes text svneol=native#text/plain\n\n# Scriptish formats\n*.bat        text svneol=native#text/plain\n*.bsh        text svneol=native#text/x-beanshell\n*.cgi        text svneol=native#text/plain\n*.cmd        text svneol=native#text/plain\n*.js         text svneol=native#text/javascript\n*.php        text svneol=native#text/x-php\n*.pl         text svneol=native#text/x-perl\n*.pm         text svneol=native#text/x-perl\n*.py         text svneol=native#text/x-python\n*.sh         eol=lf svneol=LF#text/x-sh\nconfigure    eol=lf svneol=LF#text/x-sh\n\n# Image formats\n*.bmp        binary svneol=unset#image/bmp\n*.gif        binary svneol=unset#image/gif\n*.ico        binary svneol=unset#image/ico\n*.jpeg       binary svneol=unset#image/jpeg\n*.jpg        binary svneol=unset#image/jpeg\n*.png        binary svneol=unset#image/png\n*.tif        binary svneol=unset#image/tiff\n*.tiff       binary svneol=unset#image/tiff\n*.svg        text svneol=native#image/svg%2Bxml\n\n# Data formats\n*.pdf        binary svneol=unset#application/pdf\n*.avi        binary svneol=unset#video/avi\n*.doc        binary svneol=unset#application/msword\n*.dsp        text svneol=crlf#text/plain\n*.dsw        text svneol=crlf#text/plain\n*.eps        binary svneol=unset#application/postscript\n*.gz         binary svneol=unset#application/gzip\n*.mov        binary svneol=unset#video/quicktime\n*.mp3        binary svneol=unset#audio/mpeg\n*.ppt        binary svneol=unset#application/vnd.ms-powerpoint\n*.ps         binary svneol=unset#application/postscript\n*.psd        binary svneol=unset#application/photoshop\n*.rdf        binary svneol=unset#text/rdf\n*.rss        text svneol=unset#text/xml\n*.rtf        binary svneol=unset#text/rtf\n*.sln        text svneol=native#text/plain\n*.swf        binary svneol=unset#application/x-shockwave-flash\n*.tgz        binary svneol=unset#application/gzip\n*.vcproj     text svneol=native#text/xml\n*.vcxproj    text svneol=native#text/xml\n*.vsprops    text svneol=native#text/xml\n*.wav        binary svneol=unset#audio/wav\n*.xls        binary svneol=unset#application/vnd.ms-excel\n*.zip        binary svneol=unset#application/zip\n\n# Text formats\n.htaccess    text svneol=native#text/plain\n*.bbk        text svneol=native#text/xml\n*.cmake      text svneol=native#text/plain\n*.css        text svneol=native#text/css\n*.dtd        text svneol=native#text/xml\n*.htm        text svneol=native#text/html\n*.html       text svneol=native#text/html\n*.ini        text svneol=native#text/plain\n*.log        text svneol=native#text/plain\n*.mak        text svneol=native#text/plain\n*.qbk        text svneol=native#text/plain\n*.rst        text svneol=native#text/plain\n*.sql        text svneol=native#text/x-sql\n*.txt        text svneol=native#text/plain\n*.xhtml      text svneol=native#text/xhtml%2Bxml\n*.xml        text svneol=native#text/xml\n*.xsd        text svneol=native#text/xml\n*.xsl        text svneol=native#text/xml\n*.xslt       text svneol=native#text/xml\n*.xul        text svneol=native#text/xul\n*.yml        text svneol=native#text/plain\nboost-no-inspect text svneol=native#text/plain\nCHANGES      text svneol=native#text/plain\nCOPYING      text svneol=native#text/plain\nINSTALL      text svneol=native#text/plain\nJamfile      text svneol=native#text/plain\nJamroot      text svneol=native#text/plain\nJamfile.v2   text svneol=native#text/plain\nJamrules     text svneol=native#text/plain\nMakefile*    text svneol=native#text/plain\nREADME       text svneol=native#text/plain\nTODO         text svneol=native#text/plain\n\n# Code formats\n*.c          text svneol=native#text/plain\n*.cpp        text svneol=native#text/plain\n*.h          text svneol=native#text/plain\n*.hpp        text svneol=native#text/plain\n*.ipp        text svneol=native#text/plain\n*.tpp        text svneol=native#text/plain\n*.jam        text svneol=native#text/plain\n*.java       text svneol=native#text/plain\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.154296875,
          "content": "/b2\n/b2.exe\n/bin.v2\n/bjam\n/bjam.exe\n/bootstrap.log\n/boost\n/dist\n/project-config.jam*\n/stage\n/stage_x64/\n/user-config.jam\n/.settings/\n/.project\n/.pydevproject\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 18.7646484375,
          "content": "[submodule \"system\"]\n\tpath = libs/system\n\turl = ../system.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"multi_array\"]\n\tpath = libs/multi_array\n\turl = ../multi_array.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"math\"]\n\tpath = libs/math\n\turl = ../math.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"smart_ptr\"]\n\tpath = libs/smart_ptr\n\turl = ../smart_ptr.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"parameter\"]\n\tpath = libs/parameter\n\turl = ../parameter.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"algorithm\"]\n\tpath = libs/algorithm\n\turl = ../algorithm.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"any\"]\n\tpath = libs/any\n\turl = ../any.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"concept_check\"]\n\tpath = libs/concept_check\n\turl = ../concept_check.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"python\"]\n\tpath = libs/python\n\turl = ../python.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"tti\"]\n\tpath = libs/tti\n\turl = ../tti.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"functional\"]\n\tpath = libs/functional\n\turl = ../functional.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"config\"]\n\tpath = libs/config\n\turl = ../config.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"log\"]\n\tpath = libs/log\n\turl = ../log.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"interprocess\"]\n\tpath = libs/interprocess\n\turl = ../interprocess.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"exception\"]\n\tpath = libs/exception\n\turl = ../exception.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"foreach\"]\n\tpath = libs/foreach\n\turl = ../foreach.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"spirit\"]\n\tpath = libs/spirit\n\turl = ../spirit.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"io\"]\n\tpath = libs/io\n\turl = ../io.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"units\"]\n\tpath = libs/units\n\turl = ../units.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"preprocessor\"]\n\tpath = libs/preprocessor\n\turl = ../preprocessor.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"format\"]\n\tpath = libs/format\n\turl = ../format.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"xpressive\"]\n\tpath = libs/xpressive\n\turl = ../xpressive.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"integer\"]\n\tpath = libs/integer\n\turl = ../integer.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"thread\"]\n\tpath = libs/thread\n\turl = ../thread.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"tokenizer\"]\n\tpath = libs/tokenizer\n\turl = ../tokenizer.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"timer\"]\n\tpath = libs/timer\n\turl = ../timer.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"inspect\"]\n\tpath = tools/inspect\n\turl = ../inspect.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"boostbook\"]\n\tpath = tools/boostbook\n\turl = ../boostbook.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"regex\"]\n\tpath = libs/regex\n\turl = ../regex.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"crc\"]\n\tpath = libs/crc\n\turl = ../crc.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"random\"]\n\tpath = libs/random\n\turl = ../random.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"serialization\"]\n\tpath = libs/serialization\n\turl = ../serialization.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"test\"]\n\tpath = libs/test\n\turl = ../test.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"date_time\"]\n\tpath = libs/date_time\n\turl = ../date_time.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"logic\"]\n\tpath = libs/logic\n\turl = ../logic.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"graph\"]\n\tpath = libs/graph\n\turl = ../graph.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"numeric_conversion\"]\n\tpath = libs/numeric/conversion\n\turl = ../numeric_conversion.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"lambda\"]\n\tpath = libs/lambda\n\turl = ../lambda.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"mpl\"]\n\tpath = libs/mpl\n\turl = ../mpl.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"typeof\"]\n\tpath = libs/typeof\n\turl = ../typeof.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"tuple\"]\n\tpath = libs/tuple\n\turl = ../tuple.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"utility\"]\n\tpath = libs/utility\n\turl = ../utility.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"dynamic_bitset\"]\n\tpath = libs/dynamic_bitset\n\turl = ../dynamic_bitset.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"assign\"]\n\tpath = libs/assign\n\turl = ../assign.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"filesystem\"]\n\tpath = libs/filesystem\n\turl = ../filesystem.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"function\"]\n\tpath = libs/function\n\turl = ../function.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"conversion\"]\n\tpath = libs/conversion\n\turl = ../conversion.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"optional\"]\n\tpath = libs/optional\n\turl = ../optional.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"property_tree\"]\n\tpath = libs/property_tree\n\turl = ../property_tree.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"bimap\"]\n\tpath = libs/bimap\n\turl = ../bimap.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"variant\"]\n\tpath = libs/variant\n\turl = ../variant.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"array\"]\n\tpath = libs/array\n\turl = ../array.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"iostreams\"]\n\tpath = libs/iostreams\n\turl = ../iostreams.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"multi_index\"]\n\tpath = libs/multi_index\n\turl = ../multi_index.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"bcp\"]\n\tpath = tools/bcp\n\turl = ../bcp.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"ptr_container\"]\n\tpath = libs/ptr_container\n\turl = ../ptr_container.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"statechart\"]\n\tpath = libs/statechart\n\turl = ../statechart.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"static_assert\"]\n\tpath = libs/static_assert\n\turl = ../static_assert.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"range\"]\n\tpath = libs/range\n\turl = ../range.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"rational\"]\n\tpath = libs/rational\n\turl = ../rational.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"iterator\"]\n\tpath = libs/iterator\n\turl = ../iterator.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"build\"]\n\tpath = tools/build\n\turl = ../build.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"quickbook\"]\n\tpath = tools/quickbook\n\turl = ../quickbook.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"graph_parallel\"]\n\tpath = libs/graph_parallel\n\turl = ../graph_parallel.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"property_map\"]\n\tpath = libs/property_map\n\turl = ../property_map.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"program_options\"]\n\tpath = libs/program_options\n\turl = ../program_options.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"detail\"]\n\tpath = libs/detail\n\turl = ../detail.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"interval\"]\n\tpath = libs/numeric/interval\n\turl = ../interval.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"ublas\"]\n\tpath = libs/numeric/ublas\n\turl = ../ublas.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"wave\"]\n\tpath = libs/wave\n\turl = ../wave.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"type_traits\"]\n\tpath = libs/type_traits\n\turl = ../type_traits.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"bind\"]\n\tpath = libs/bind\n\turl = ../bind.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"pool\"]\n\tpath = libs/pool\n\turl = ../pool.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"proto\"]\n\tpath = libs/proto\n\turl = ../proto.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"fusion\"]\n\tpath = libs/fusion\n\turl = ../fusion.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"function_types\"]\n\tpath = libs/function_types\n\turl = ../function_types.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"gil\"]\n\tpath = libs/gil\n\turl = ../gil.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"intrusive\"]\n\tpath = libs/intrusive\n\turl = ../intrusive.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"asio\"]\n\tpath = libs/asio\n\turl = ../asio.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"uuid\"]\n\tpath = libs/uuid\n\turl = ../uuid.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"litre\"]\n\tpath = tools/litre\n\turl = ../litre.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"circular_buffer\"]\n\tpath = libs/circular_buffer\n\turl = ../circular_buffer.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"mpi\"]\n\tpath = libs/mpi\n\turl = ../mpi.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"unordered\"]\n\tpath = libs/unordered\n\turl = ../unordered.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"signals2\"]\n\tpath = libs/signals2\n\turl = ../signals2.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"accumulators\"]\n\tpath = libs/accumulators\n\turl = ../accumulators.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"atomic\"]\n\tpath = libs/atomic\n\turl = ../atomic.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"scope_exit\"]\n\tpath = libs/scope_exit\n\turl = ../scope_exit.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"flyweight\"]\n\tpath = libs/flyweight\n\turl = ../flyweight.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"icl\"]\n\tpath = libs/icl\n\turl = ../icl.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"predef\"]\n\tpath = libs/predef\n\turl = ../predef.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"chrono\"]\n\tpath = libs/chrono\n\turl = ../chrono.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"polygon\"]\n\tpath = libs/polygon\n\turl = ../polygon.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"msm\"]\n\tpath = libs/msm\n\turl = ../msm.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"heap\"]\n\tpath = libs/heap\n\turl = ../heap.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"coroutine\"]\n\tpath = libs/coroutine\n\turl = ../coroutine.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"coroutine2\"]\n\tpath = libs/coroutine2\n\turl = ../coroutine2.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"ratio\"]\n\tpath = libs/ratio\n\turl = ../ratio.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"odeint\"]\n\tpath = libs/numeric/odeint\n\turl = ../odeint.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"geometry\"]\n\tpath = libs/geometry\n\turl = ../geometry.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"phoenix\"]\n\tpath = libs/phoenix\n\turl = ../phoenix.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"move\"]\n\tpath = libs/move\n\turl = ../move.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"locale\"]\n\tpath = libs/locale\n\turl = ../locale.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"auto_index\"]\n\tpath = tools/auto_index\n\turl = ../auto_index.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"container\"]\n\tpath = libs/container\n\turl = ../container.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"local_function\"]\n\tpath = libs/local_function\n\turl = ../local_function.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"context\"]\n\tpath = libs/context\n\turl = ../context.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"type_erasure\"]\n\tpath = libs/type_erasure\n\turl = ../type_erasure.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"multiprecision\"]\n\tpath = libs/multiprecision\n\turl = ../multiprecision.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"lockfree\"]\n\tpath = libs/lockfree\n\turl = ../lockfree.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"assert\"]\n\tpath = libs/assert\n\turl = ../assert.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"align\"]\n\tpath = libs/align\n\turl = ../align.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"type_index\"]\n\tpath = libs/type_index\n\turl = ../type_index.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"core\"]\n\tpath = libs/core\n\turl = ../core.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"throw_exception\"]\n\tpath = libs/throw_exception\n\turl = ../throw_exception.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"winapi\"]\n\tpath = libs/winapi\n\turl = ../winapi.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"boostdep\"]\n\tpath = tools/boostdep\n\turl = ../boostdep.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"lexical_cast\"]\n\tpath = libs/lexical_cast\n\turl = ../lexical_cast.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"sort\"]\n\tpath = libs/sort\n\turl = ../sort.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"convert\"]\n\tpath = libs/convert\n\turl = ../convert.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"endian\"]\n\tpath = libs/endian\n\turl = ../endian.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"vmd\"]\n\tpath = libs/vmd\n\turl = ../vmd.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"dll\"]\n\tpath = libs/dll\n\turl = ../dll.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"compute\"]\n\tpath = libs/compute\n\turl = ../compute.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"hana\"]\n\tpath = libs/hana\n\turl = ../hana.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"metaparse\"]\n\tpath = libs/metaparse\n\turl = ../metaparse.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"qvm\"]\n\tpath = libs/qvm\n\turl = ../qvm.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"fiber\"]\n\tpath = libs/fiber\n\turl = ../fiber.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"process\"]\n\tpath = libs/process\n\turl = ../process.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"stacktrace\"]\n\tpath = libs/stacktrace\n\turl = ../stacktrace.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"poly_collection\"]\n\tpath = libs/poly_collection\n\turl = ../poly_collection.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"beast\"]\n\tpath = libs/beast\n\turl = ../beast.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"mp11\"]\n\tpath = libs/mp11\n\turl = ../mp11.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"callable_traits\"]\n\tpath = libs/callable_traits\n\turl = ../callable_traits.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"contract\"]\n\tpath = libs/contract\n\turl = ../contract.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"check_build\"]\n\tpath = tools/check_build\n\turl = ../check_build.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"container_hash\"]\n\tpath = libs/container_hash\n\turl = ../container_hash.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"hof\"]\n\tpath = libs/hof\n\turl = ../hof.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"yap\"]\n\tpath = libs/yap\n\turl = ../yap.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"safe_numerics\"]\n\tpath = libs/safe_numerics\n\turl = ../safe_numerics.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"parameter_python\"]\n\tpath = libs/parameter_python\n\turl = ../parameter_python.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"headers\"]\n\tpath = libs/headers\n\turl = ../headers.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"boost_install\"]\n\tpath = tools/boost_install\n\turl = ../boost_install.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"outcome\"]\n\tpath = libs/outcome\n\turl = ../outcome.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"histogram\"]\n\tpath = libs/histogram\n\turl = ../histogram.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"variant2\"]\n\tpath = libs/variant2\n\turl = ../variant2.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"nowide\"]\n\tpath = libs/nowide\n\turl = ../nowide.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"docca\"]\n\tpath = tools/docca\n\turl = ../docca.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"cmake\"]\n\tpath = tools/cmake\n\turl = ../cmake.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"static_string\"]\n\tpath = libs/static_string\n\turl = ../static_string.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"stl_interfaces\"]\n\tpath = libs/stl_interfaces\n\turl = ../stl_interfaces.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"more\"]\n\tpath = more\n\turl = ../more.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"leaf\"]\n\tpath = libs/leaf\n\turl = ../leaf.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"json\"]\n\tpath = libs/json\n\turl = ../json.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"pfr\"]\n\tpath = libs/pfr\n\turl = ../pfr.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"describe\"]\n\tpath = libs/describe\n\turl = ../describe.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"lambda2\"]\n\tpath = libs/lambda2\n\turl = ../lambda2.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"property_map_parallel\"]\n\tpath = libs/property_map_parallel\n\turl = ../property_map_parallel.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"url\"]\n\tpath = libs/url\n\turl = ../url.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"mysql\"]\n\tpath = libs/mysql\n\turl = ../mysql.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"compat\"]\n\tpath = libs/compat\n\turl = ../compat.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"redis\"]\n\tpath = libs/redis\n\turl = ../redis.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"cobalt\"]\n\tpath = libs/cobalt\n\turl = ../cobalt.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"charconv\"]\n\tpath = libs/charconv\n\turl = ../charconv.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"scope\"]\n\tpath = libs/scope\n\turl = ../scope.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"boostlook\"]\n\tpath = tools/boostlook\n\turl = ../boostlook.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n[submodule \"parser\"]\n\tpath = libs/parser\n\turl = ../parser.git\n\tfetchRecurseSubmodules = on-demand\n\tbranch = .\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 3.4990234375,
          "content": "# Use, modification, and distribution are\n# subject to the Boost Software License, Version 1.0. (See accompanying\n# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n#\n# Copyright Rene Rivera 2015-2016.\n# Copyright Peter Dimov 2017-2021.\n\nbranches:\n  only:\n    - master\n    - develop\n    - /feature\\/.*/\n\ndist: bionic\n\nlanguage: cpp\n\ncompiler: gcc\n\ngit:\n  submodules: false\n\nenv:\n  matrix:\n    - TRAVIS_EMPTY_JOB_WORKAROUND=true\n\nmatrix:\n  exclude:\n    - env: TRAVIS_EMPTY_JOB_WORKAROUND=true\n\n  include:\n\n    - env: SCRIPT=ci_boost_release MODE=check\n      addons:\n        apt:\n          packages:\n            - xsltproc\n\n    # Simple integrated status tests check.\n    - env: SCRIPT=ci_boost_status\n\n    # Same, but using release layout\n    - env: SCRIPT=ci_boost_status RELEASE=1\n\n    # Run 'quick' tests.\n    - env: SCRIPT=ci_boost_status TARGET=quick TOOLSET=gcc CXXSTD=03,11,14\n      compiler: g++\n\n    - env: SCRIPT=ci_boost_status TARGET=quick TOOLSET=clang CXXSTD=03,11,14\n      compiler: clang++\n\n    # Build Boost\n    - env: SCRIPT=ci_boost_build TOOLSET=gcc\n      compiler: g++\n\n    # Build Boost with release layout\n    - env: SCRIPT=ci_boost_build TOOLSET=gcc RELEASE=1\n      compiler: g++\n\n    # Build Boost with CMake\n    - env: CMAKE_BUILD=1\n      dist: xenial\n      compiler: g++\n\n      before_script: true\n      before_install: true\n      after_success: true\n      after_failure: true\n      after_script: true\n\n      addons:\n        apt:\n          packages:\n            - libzstd-dev\n\n      install:\n      - git submodule update --init --jobs 3\n\n      script:\n      - mkdir __build && cd __build\n      - cmake -DBOOST_INSTALL_LAYOUT=tagged -DBUILD_SHARED_LIBS=ON ..\n      - cmake --build .\n\n    # Install Boost with CMake\n    - env: CMAKE_INSTALL=1\n      compiler: g++\n\n      before_script: true\n      before_install: true\n      after_success: true\n      after_failure: true\n      after_script: true\n\n      install:\n      - pip install --user cmake\n      - git submodule update --init --jobs 3\n\n      script:\n      - mkdir __build && cd __build\n      - cmake -DBOOST_INSTALL_LAYOUT=tagged -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=~/.local ..\n      - cmake --build .\n      - cmake --build . --target install\n\n    # Test Boost with CMake\n    - env: CMAKE_TEST=1\n      dist: bionic\n      compiler: g++\n\n      before_script: true\n      before_install: true\n      after_success: true\n      after_failure: true\n      after_script: true\n\n      addons:\n        apt:\n          packages:\n            - liblzma-dev\n            - libzstd-dev\n\n      install:\n      - git submodule update --init --jobs 3\n\n      script:\n      - mkdir __build && cd __build\n      - cmake -DBUILD_TESTING=ON ..\n      - cmake --build . -j 3\n      - cmake --build . --target tests -j 3 -- -k\n      - ctest --output-on-failure -j 3 -R quick\n\nbefore_install:\n  # Fetch the scripts to do the actual building/testing.\n  - git submodule update --init --jobs 3\n  - |\n    wget \"https://raw.githubusercontent.com/boostorg/release-tools/develop/ci_boost_common.py\" -P ..\n    wget \"https://raw.githubusercontent.com/boostorg/release-tools/develop/${SCRIPT}.py\" -P ..\n\ninstall: python \"${TRAVIS_BUILD_DIR}/../${SCRIPT}.py\" install\nbefore_script: python \"${TRAVIS_BUILD_DIR}/../${SCRIPT}.py\" before_script\nscript: python \"${TRAVIS_BUILD_DIR}/../${SCRIPT}.py\" script\nafter_success: python \"${TRAVIS_BUILD_DIR}/../${SCRIPT}.py\" after_success\nafter_failure: python \"${TRAVIS_BUILD_DIR}/../${SCRIPT}.py\" after_failure\nafter_script: python \"${TRAVIS_BUILD_DIR}/../${SCRIPT}.py\" after_script\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 0.8017578125,
          "content": "# Copyright 2019, 2021 Peter Dimov\n# Distributed under the Boost Software License, Version 1.0.\n# See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt\n\ncmake_minimum_required(VERSION 3.5...3.16)\n\n# The default build type must be set before project()\nif(CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR AND NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE Release CACHE STRING \"Build type\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS \"Debug\" \"Release\" \"MinSizeRel\" \"RelWithDebInfo\")\nendif()\n\nproject(Boost VERSION 1.88.0 LANGUAGES CXX)\n\nset(BOOST_SUPERPROJECT_VERSION ${PROJECT_VERSION})\nset(BOOST_SUPERPROJECT_SOURCE_DIR ${PROJECT_SOURCE_DIR})\n\nlist(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/tools/cmake/include)\n\ninclude(BoostRoot)\n"
        },
        {
          "name": "INSTALL",
          "type": "blob",
          "size": 0.2841796875,
          "content": "See ./index.html for information about this release. The \"Getting Started\" \nsection is a useful starting place.\n\n---------------------------\nCopyright Beman Dawes, 2008\n\nDistributed under the Boost Software License, Version 1.0.\nSee ./LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt "
        },
        {
          "name": "Jamroot",
          "type": "blob",
          "size": 16.9306640625,
          "content": "# Copyright Vladimir Prus 2002-2006.\n# Copyright Dave Abrahams 2005-2006.\n# Copyright René Ferdinand Rivera Morell 2005-2024.\n# Copyright Douglas Gregor 2005.\n#\n# Distributed under the Boost Software License, Version 1.0.\n# (See accompanying file LICENSE_1_0.txt or copy at\n# http://www.boost.org/LICENSE_1_0.txt)\n\n# Usage:\n#\n#   b2 [options] [properties] [install|stage]\n#\n#   Builds and installs Boost.\n#\n# Targets and Related Options:\n#\n#   install                 Install headers and compiled library files to the\n#   =======                 configured locations (below).\n#\n#   --prefix=<PREFIX>       Install architecture independent files here.\n#                           Default: C:\\Boost on Windows\n#                           Default: /usr/local on Unix, Linux, etc.\n#\n#   --exec-prefix=<EPREFIX> Install architecture dependent files here.\n#                           Default: <PREFIX>\n#\n#   --libdir=<LIBDIR>       Install library files here.\n#                           Default: <EPREFIX>/lib\n#\n#   --includedir=<HDRDIR>   Install header files here.\n#                           Default: <PREFIX>/include\n#\n#   --cmakedir=<CMAKEDIR>   Install CMake configuration files here.\n#                           Default: <LIBDIR>/cmake\n#\n#   --no-cmake-config       Do not install CMake configuration files.\n#\n#   stage                   Build and install only compiled library files to the\n#   =====                   stage directory.\n#\n#   --stagedir=<STAGEDIR>   Install library files here\n#                           Default: ./stage\n#\n# Other Options:\n#\n#   --build-type=<type>     Build the specified pre-defined set of variations of\n#                           the libraries. Note, that which variants get built\n#                           depends on what each library supports.\n#\n#                               -- minimal -- (default) Builds a minimal set of\n#                               variants. On Windows, these are static\n#                               multithreaded libraries in debug and release\n#                               modes, using shared runtime. On Linux, these are\n#                               static and shared multithreaded libraries in\n#                               release mode.\n#\n#                               -- complete -- Build all possible variations.\n#\n#   --build-dir=DIR         Build in this location instead of building within\n#                           the distribution tree. Recommended!\n#\n#   --show-libraries        Display the list of Boost libraries that require\n#                           build and installation steps, and then exit.\n#\n#   --layout=<layout>       Determine whether to choose library names and header\n#                           locations such that multiple versions of Boost or\n#                           multiple compilers can be used on the same system.\n#\n#                               -- versioned -- Names of boost binaries include\n#                               the Boost version number, name and version of\n#                               the compiler and encoded build properties. Boost\n#                               headers are installed in a subdirectory of\n#                               <HDRDIR> whose name contains the Boost version\n#                               number.\n#\n#                               -- tagged -- Names of boost binaries include the\n#                               encoded build properties such as variant and\n#                               threading, but do not including compiler name\n#                               and version, or Boost version. This option is\n#                               useful if you build several variants of Boost,\n#                               using the same compiler.\n#\n#                               -- system -- Binaries names do not include the\n#                               Boost version number or the name and version\n#                               number of the compiler. Boost headers are\n#                               installed directly into <HDRDIR>. This option is\n#                               intended for system integrators building\n#                               distribution packages.\n#\n#                           The default value is 'versioned' on Windows, and\n#                           'system' on Unix.\n#\n#   --buildid=ID            Add the specified ID to the name of built libraries.\n#                           The default is to not add anything.\n#\n#   --python-buildid=ID     Add the specified ID to the name of built libraries\n#                           that depend on Python. The default is to not add\n#                           anything. This ID is added in addition to --buildid.\n#\n#   --help                  This message.\n#\n#   --with-<library>        Build and install the specified <library>. If this\n#                           option is used, only libraries specified using this\n#                           option will be built.\n#\n#   --without-<library>     Do not build, stage, or install the specified\n#                           <library>. By default, all libraries are built.\n#\n# Properties:\n#\n#   toolset=toolset         Indicate the toolset to build with.\n#\n#   variant=debug|release   Select the build variant\n#\n#   link=static|shared      Whether to build static or shared libraries\n#\n#   threading=single|multi  Whether to build single or multithreaded binaries\n#\n#   runtime-link=static|shared\n#                           Whether to link to static or shared C and C++\n#                           runtime.\n#\n\nrequire-b2 5.1.0 ;\n\n# TODO:\n#  - handle boost version\n#  - handle python options such as pydebug\n\nimport boostcpp ;\nimport package ;\n\nimport sequence ;\nimport xsltproc ;\nimport set ;\nimport path ;\nimport link ;\nimport notfile ;\nimport virtual-target ;\nimport \"class\" : new ;\nimport property-set ;\nimport threadapi-feature ;\nimport option ;\nimport property ;\nimport project ;\n# Backslash because of `bcp --namespace`\nimport tools/boost\\_install/boost-install ;\n\npath-constant BOOST_ROOT : . ;\nconstant BOOST_VERSION : 1.88.0 ;\nconstant BOOST_JAMROOT_MODULE : $(__name__) ;\n\n# Allow subprojects to simply `import config : requires ;` to get access to the requires rule\nimport-search $(BOOST_ROOT)/libs/config/checks ;\nimport-search $(BOOST_ROOT)/libs/predef/tools/check ;\n\nboostcpp.set-version $(BOOST_VERSION) ;\n\nuse-project /boost/architecture : libs/config/checks/architecture ;\n\nlocal all-headers =\n    [ MATCH .*libs/(.*)/include/boost : [ glob libs/*/include/boost libs/*/*/include/boost ] ] ;\n\nfor dir in $(all-headers)\n{\n    link-directory $(dir)-headers : libs/$(dir)/include/boost : <location>. ;\n    explicit $(dir)-headers ;\n}\n\nif $(all-headers)\n{\n    constant BOOST_MODULARLAYOUT : $(all-headers) ;\n}\n\nproject /boost\n    : requirements <include>.\n\n      [ boostcpp.platform ]\n\n      # Disable auto-linking for all targets here, primarily because it caused\n      # troubles with V2.\n      <define>BOOST_ALL_NO_LIB=1\n      # Used to encode variant in target name. See the 'tag' rule below.\n      <tag>@$(__name__).tag\n      <conditional>@handle-static-runtime\n      <conditional>@clang-darwin-cxxstd-11\n      # Comeau does not support shared lib\n      <toolset>como:<link>static\n      <toolset>como-linux:<define>_GNU_SOURCE=1\n      # When building docs within Boost, we want the standard Boost style\n      <xsl:param>boost.defaults=Boost\n      <conditional>@threadapi-feature.detect\n    : usage-requirements <include>.\n    : default-build\n      <visibility>hidden\n      <threading>multi\n    : build-dir bin.v2\n    ;\n\n# General, top-level, modular project searching. Also include tools in the\n# project search.\nproject-search /boost : libs tools ;\n# Temporary custom project searching to account for special library paths.\nproject-search /boost : libs/numeric ;\nproject-search /boost/numeric_conversion : libs/numeric/conversion ;\n\n# This rule is called by Boost.Build to determine the name of target. We use it\n# to encode the build variant, compiler name and boost version in the target\n# name.\n#\nrule tag ( name : type ? : property-set )\n{\n    return [ boostcpp.tag $(name) : $(type) : $(property-set) ] ;\n}\n\nrule python-tag ( name : type ? : property-set )\n{\n    return [ boostcpp.python-tag $(name) : $(type) : $(property-set) ] ;\n}\n\nrule handle-static-runtime ( properties * )\n{\n    # Using static runtime with shared libraries is impossible on Linux, and\n    # dangerous on Windows. Therefore, we disallow it. This might be drastic,\n    # but it was disabled for a while without anybody complaining.\n\n    local argv = [ modules.peek : ARGV ] ;\n\n    if <link>shared in $(properties)\n        && <runtime-link>static in $(properties)\n        # For CW, static runtime is needed so that std::locale works.\n        && ! ( <toolset>cw in $(properties) )\n        && ! --allow-shared-static in $(argv)\n    {\n        boostcpp.emit-shared-static-warning ;\n        return <build>no ;\n    }\n}\n\nrule clang-darwin-cxxstd-11 ( properties * )\n{\n    # AppleClang defaults to C++03\n\n    local result = [ property.select <cxxstd> : $(properties) ] ;\n\n    if <toolset-clang:platform>darwin in $(properties)\n    {\n        result ?= <cxxstd>11 ;\n    }\n\n    return $(result) ;\n}\n\n# All libraries.\nlocal all-libraries\n    = [ MATCH .*libs/(.*)/meta/libraries.json : [ glob libs/*/meta/libraries.json ] ] ;\n\n# Find all the libraries that have something to build (the old way).\nlocal all-libraries-to-build\n    = [ MATCH .*libs/(.*)/build/.* : [ glob libs/*/build/Jamfile.v2 ]\n        [ glob libs/*/build/Jamfile ] ] ;\nall-libraries-to-build = [ sequence.unique $(all-libraries-to-build) ] ;\n# The function_types library has a Jamfile, but it's used for maintenance\n# purposes, there's no library to build and install.\nall-libraries-to-build = [ set.difference $(all-libraries-to-build) : function_types ] ;\n\n# Find all the libraries that have a library-root build declaration (modular way).\nlocal all-libraries-modular-build\n    = [ MATCH .*libs/(.*)/build.jam : [ glob libs/*/build.jam ] ] ;\n\n# Modular and not are mutually exclusive as they have different lib targets.\nall-libraries-to-build = [ set.difference $(all-libraries-to-build) : $(all-libraries-modular-build) ] ;\n\n# The header only libraries that are not of the new modular form. For which we\n# will create synthetic projects and targets to simulate the new modular form.\nlocal all-libraries-to-declare\n    = [ set.difference $(all-libraries)\n        : $(all-libraries-modular-build) $(all-libraries-to-build) ] ;\nif ! [ glob libs/numeric/conversion/build.jam ]\n{\n    all-libraries-to-declare += numeric_conversion ;\n}\nif ! [ glob libs/numeric/interval/build.jam ]\n{\n    all-libraries-to-declare += interval ;\n}\nif ! [ glob libs/numeric/odeint/build.jam ]\n{\n    all-libraries-to-declare += odeint ;\n}\nif ! [ glob libs/numeric/ublas/build.jam ]\n{\n    all-libraries-to-declare += ublas ;\n}\nall-libraries-to-declare = [ SORT $(all-libraries-to-declare) ] ;\n\n# ECHO \"INFO: Build Libraries:\" [ SORT $(all-libraries-to-build) ] ;\n# ECHO \"INFO: Modular Libraries:\" [ SORT $(all-libraries-modular-build) ] ;\n# ECHO \"INFO: Declared Libraries:\" [ SORT $(all-libraries-to-declare) ] ;\n# EXIT : 0 ;\n\n# Setup convenient aliases for all libraries.\n\n# First, the complicated libraries: where the target name in Jamfile is\n# different from its directory name.\nexplicit\n    [ alias prg_exec_monitor : libs/test/build//boost_prg_exec_monitor ]\n    [ alias test_exec_monitor : libs/test/build//boost_test_exec_monitor ]\n    [ alias unit_test_framework : libs/test/build//boost_unit_test_framework ]\n    [ alias serialization : libs/serialization/build//boost_serialization ]\n    [ alias wserialization : libs/serialization/build//boost_wserialization ]\n    ;\nfor local l in $(all-libraries-to-build)\n{\n    if ! $(l) in test graph serialization headers\n    {\n        explicit [ alias $(l) : libs/$(l)/build//boost_$(l) ] ;\n    }\n}\nfor local l in $(all-libraries-modular-build)\n{\n    if ! $(l) in test graph serialization headers\n    {\n        explicit [ alias $(l) : /boost/$(l)//boost_$(l) ] ;\n    }\n}\n\nrule do-nothing { }\n\nrule generate-alias ( project name : property-set : sources * )\n{\n    local action-name = [ $(property-set).get <action> ] ;\n    local m = [ MATCH ^@(.*) : $(action-name) ] ;\n    property-set = [ property-set.empty ] ;\n    local action = [ new action $(sources) : $(m[1]) : $(property-set) ] ;\n    local t = [ new notfile-target $(name) : $(project) : $(action) ] ;\n    return [ virtual-target.register $(t) ] ;\n}\n\ngenerate headers : $(all-headers)-headers : <generating-rule>@generate-alias <action>@do-nothing : : <include>.  ;\n\n#alias headers : $(all-headers)-headers : : : <include>.  ;\nexplicit headers ;\n\n# Make project ids of all libraries known.\nfor local l in $(all-libraries-to-build)\n{\n    use-project /boost/$(l) : libs/$(l)/build ;\n}\n\nif [ path.exists $(BOOST_ROOT)/tools/inspect/build ]\n{\n    use-project /boost/tools/inspect : tools/inspect/build ;\n}\n\nif [ path.exists $(BOOST_ROOT)/libs/wave/tool/build ]\n{\n    use-project /boost/libs/wave/tool : $(BOOST_ROOT)/libs/wave/tool/build ;\n}\n\n# Make the boost-install rule visible in subprojects\n\n# This rule should be called from libraries' Jamfiles and will create two\n# targets, \"install\" and \"stage\", that will install or stage that library. The\n# --prefix option is respected, but --with and --without options, naturally, are\n# ignored.\n#\n# - libraries -- list of library targets to install.\n\nrule boost-install ( libraries * )\n{\n    boost-install.boost-install $(libraries) ;\n}\n\n# Creates a library target, adding autolink support and also creates\n# stage and install targets via boost-install, above.\nrule boost-lib ( name : sources * : requirements * : default-build * : usage-requirements * )\n{\n    autolink = <link>shared:<define>BOOST_$(name:U)_DYN_LINK=1 ;\n    name = boost_$(name) ;\n    lib $(name)\n        : $(sources)\n        : $(requirements) $(autolink)\n        : $(default-build)\n        : $(usage-requirements) $(autolink)\n        ;\n    boost-install $(name) ;\n}\n\n\n# Declare special top-level targets that build and install the desired variants\n# of the libraries.\nboostcpp.declare-targets $(all-libraries-to-build) $(all-libraries-modular-build) ;\n\n# Declare a Boost library and run related declaration rules. This should be\n# called from the libroot/build.jam to define the components of a Boost lib.\n# The first arg is the base ID of the library. Each subsequence arg is a\n# Boost (boost-x) declaration rule to call with arguments.\n#\n# For example:\n#\n# call-if : boost-library serialization\n#   : install boost_serialization boost_wserialization ;\n#\nrule boost-library ( id ? : options * : * )\n{\n    # ECHO \"INFO: Declare Boost library:\" $(id) ;\n    local called-boost-install ;\n    for n in 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\n    {\n        local option = $($(n)) ;\n        if $(option)\n        {\n            call-if : boost-$(option[1]) $(option[2-]) ;\n            if $(option[1]) = install\n            {\n                called-boost-install = true ;\n            }\n        }\n    }\n    if ! $(called-boost-install)\n    {\n        # If the library didn't indicate an install build target it's likely\n        # header only. We should declare empty install targets to allow for\n        # generic handling.\n        boost-install.boost-install ;\n    }\n}\n\n# Declare projects and targets for all placeholder, header only, not yet\n# modular libraries.\n#\n# NOTE: This has to be after the boost-* rule definitions to ensure that those\n# are available for import into the new projects.\nlocal location = [ project.attribute $(__name__) location ] ;\nfor local lib in $(all-libraries-to-declare)\n{\n    local lib-path\n        = [ path.join $(location) libs $(lib) ] ;\n    if $(lib) = numeric_conversion\n    {\n        lib-path = [ path.join $(location) libs/numeric/conversion ] ;\n    }\n    else if $(lib) in interval odeint ublas\n    {\n        lib-path = [ path.join $(location) libs/numeric/$(lib) ] ;\n    }\n    local lib-module\n        = [ project.load $(lib-path) : synthesize ] ;\n    modules.poke $(lib-module) : BOOST_LIB_PROJECT : /boost/$(lib) ;\n    modules.poke $(lib-module) : BOOST_LIB_TARGET : boost_$(lib) ;\n    project.push-current [ project.target $(lib-module) ] ;\n    module $(lib-module)\n    {\n        project $(BOOST_LIB_PROJECT)\n            : requirements\n                <implicit-dependency>/boost//headers\n            ;\n        alias $(BOOST_LIB_TARGET) ;\n    }\n    project.pop-current ;\n}\n\n# Backslash because of `bcp --namespace`\n\nif ! [ project.search /boost/tools/boost\\_install ]\n{\n    use-project /boost/tools/boost\\_install : tools/boost\\_install ;\n}\n\n# Ensure \"modular\" libraries' projects are loaded before build request is\n# calculated. This is necessary for subprojects that define custom features\n# to be set by users on command line.\n# This part should stay at the bottom of the file, because subprojects may rely\n# on rules or constants from it.\nfor local l in $(all-libraries-modular-build)\n{\n    # project.find returns the module for the project, which ensures that the\n    # project is loaded. The convoluted way the rule is invoked is due to the\n    # fact that project.find can only be called from a project target instance.\n    modules.call-in [ project.target $(__name__) ]\n        : project.find /boost/$(l)\n        : $(location) ;\n}\n"
        },
        {
          "name": "LICENSE_1_0.txt",
          "type": "blob",
          "size": 1.306640625,
          "content": "Boost Software License - Version 1.0 - August 17th, 2003\n\nPermission is hereby granted, free of charge, to any person or organization\nobtaining a copy of the software and accompanying documentation covered by\nthis license (the \"Software\") to use, reproduce, display, distribute,\nexecute, and transmit the Software, and to prepare derivative works of the\nSoftware, and to permit third-parties to whom the Software is furnished to\ndo so, all subject to the following:\n\nThe copyright notices in the Software and this entire statement, including\nthe above license grant, this restriction and the following disclaimer,\nmust be included in all copies of the Software, in whole or in part, and\nall derivative works of the Software, unless such copies or derivative\nworks are solely in the form of machine-executable object code generated by\na source language processor.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT\nSHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE\nFOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.5283203125,
          "content": "# Boost C++ Libraries\n\nThe Boost project provides free peer-reviewed portable C++ source libraries.\n\nWe emphasize libraries that work well with the C++ Standard Library. Boost\nlibraries are intended to be widely useful, and usable across a broad spectrum\nof applications. The Boost license encourages both commercial and non-commercial use\nand does not require attribution for binary use.\n\nThe project website is www.boost.org, where you can obtain more information and\n[download](https://www.boost.org/users/download/) the current release.\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 1.1904296875,
          "content": "version: 1.0.{build}-{branch}\n\nbranches:\n  only:\n    - develop\n    - master\n\nenvironment:\n  matrix:\n    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2013\n      SCRIPT: ci_boost_test_library\n    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015\n      SCRIPT: ci_boost_test_library\n    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017\n      SCRIPT: ci_boost_test_library\n    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017\n      SCRIPT: ci_boost_status\n      TARGET: quick\n\ninit:\n  - cd %APPVEYOR_BUILD_FOLDER%/..\n  - appveyor DownloadFile \"https://raw.githubusercontent.com/boostorg/release-tools/develop/ci_boost_common.py\"\n  - appveyor DownloadFile \"https://raw.githubusercontent.com/boostorg/release-tools/develop/%SCRIPT%.py\"\n  - cd %APPVEYOR_BUILD_FOLDER%\ninstall: python ../%SCRIPT%.py install\nbefore_build: python ../%SCRIPT%.py before_build\nbuild_script: python ../%SCRIPT%.py build_script\nafter_build: python ../%SCRIPT%.py after_build\nbefore_test: python ../%SCRIPT%.py before_test\ntest_script: python ../%SCRIPT%.py test_script\nafter_test: python ../%SCRIPT%.py after_test\non_success: python ../%SCRIPT%.py on_success\non_failure: python ../%SCRIPT%.py on_failure\non_finish: python ../%SCRIPT%.py on_finish\n"
        },
        {
          "name": "boost-build.jam",
          "type": "blob",
          "size": 0.8310546875,
          "content": "# Copyright (C) 2002-2003 David Abrahams.\n# Copyright (C) 2002-2003 Vladimir Prus.\n# Copyright (C) 2003,2007 Rene Rivera.\n# Use, modification and distribution are subject to the\n# Boost Software License, Version 1.0. (See accompanying file\n# LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n\n#   This is the initial file loaded by Boost Jam when run from any Boost library\n# folder. It allows us to choose which Boost Build installation to use for\n# building Boost libraries. Unless explicitly selected using a command-line\n# option, the version included with the Boost library distribution is used (as\n# opposed to any other Boost Build version installed on the user's system).\n\nBOOST_ROOT = $(.boost-build-file:D) ;\nBOOST_BUILD = [ MATCH --boost-build=(.*) : $(ARGV) ] ;\nBOOST_BUILD ?= tools/build/src ;\nboost-build $(BOOST_BUILD) ;\n"
        },
        {
          "name": "boost.css",
          "type": "blob",
          "size": 0.9658203125,
          "content": "/*=============================================================================\n    Copyright 2002 William E. Kempf\n    Distributed under the Boost Software License, Version 1.0. (See accompany-\n    ing file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n=============================================================================*/\n\nH1\n{\n    FONT-SIZE: 200%;\n    COLOR: #00008B;\n}\nH2\n{\n    FONT-SIZE: 150%;\n}\nH3\n{\n    FONT-SIZE: 125%;\n}\nH4\n{\n    FONT-SIZE: 108%;\n}\nBODY\n{\n    FONT-SIZE: 100%;\n    BACKGROUND-COLOR: #ffffff;\n    COLOR: #000000;\n}\nPRE\n{\n    MARGIN-LEFT: 2em;\n    FONT-FAMILY: Courier,\n                 monospace;\n}\nCODE\n{\n    FONT-FAMILY: Courier,\n                 monospace;\n}\nCODE.as_pre\n{\n    white-space: pre;\n}\n.index\n{\n    TEXT-ALIGN: left;\n}\n.page-index\n{\n    TEXT-ALIGN: left;\n}\n.definition\n{\n    TEXT-ALIGN: left;\n}\n.footnote\n{\n    FONT-SIZE: 66%;\n    VERTICAL-ALIGN: super;\n    TEXT-DECORATION: none;\n}\n.function-semantics\n{\n    CLEAR: left;\n}"
        },
        {
          "name": "boost.png",
          "type": "blob",
          "size": 6.16015625,
          "content": null
        },
        {
          "name": "boostcpp.jam",
          "type": "blob",
          "size": 20.1552734375,
          "content": "# Boost.Build support specific for the Boost C++ Libraries.\n# Copyright Vladimir Prus 2002-2010.\n# Copyright Dave Abrahams 2005-2006.\n# Copyright Rene Rivera 2005-2007.\n# Copyright Douglas Gregor 2005.\n#\n# Distributed under the Boost Software License, Version 1.0.\n#    (See accompanying file LICENSE_1_0.txt or copy at\n#          http://www.boost.org/LICENSE_1_0.txt)\n\nimport \"class\" : new ;\nimport common ;\nimport configure ;\nimport build-system ;\nimport generate ;\nimport modules ;\nimport option ;\nimport os ;\nimport package ;\nimport path ;\nimport project ;\nimport regex ;\nimport sequence ;\nimport set ;\nimport targets ;\nimport feature ;\nimport property ;\nimport version : version-less ;\n\n##############################################################################\n#\n# 0. General setup. Parse options, check them.\n#\n##############################################################################\n\nBOOST_ROOT = [ modules.binding $(__name__) ] ;\nBOOST_ROOT = $(BOOST_ROOT:D) ;\n\nrule set-version ( version )\n{\n    BOOST_VERSION = $(version) ;\n\n    local version-tag =\n        [ MATCH \"^([^.]+)[.]([^.]+)[.]([^.]+)\" : $(BOOST_VERSION) ] ;\n    if $(version-tag[3]) = 0\n    {\n        version-tag = $(version-tag[1-2]) ;\n    }\n    BOOST_VERSION_TAG = $(version-tag:J=_) ;\n}\n\n# Option to choose how many variants to build. The default is \"minimal\".\nbuild-type = [ option.get build-type ] ;\nbuild-type ?= minimal ;\nif ! ( $(build-type) in complete minimal )\n{\n    EXIT The value of the --build-type option should be either 'complete' or\n        'minimal' ;\n}\n\n# What kind of layout are we doing?\nlayout = [ option.get layout : \"\" ] ;\n\nlayout = [ MATCH (versioned|tagged|system)(-(.+))? : $(layout) ] ;\nif $(layout[3])\n{\n    layout-version = $(layout[3]) ;\n    layout = $(layout[1]) ;\n    if [ version-less [ regex.split $(layout-version) \"[.]\" ] : 1 66 ]\n    {\n        layout-version = 1.40 ;\n    }\n    else if [ version-less [ regex.split $(layout-version) \"[.]\" ] : 1 69 ]\n    {\n        layout-version = 1.66 ;\n    }\n}\nlayout-version ?= 1.69 ;\n\n# On Windows, we used versioned layout by default in order to be compatible with\n# autolink. On other systems, we use system layout which is what every other\n# program uses. Note that the Windows check is static, and will not be affected\n# by specific build properties used.\nif ! $(layout)\n{\n    if [ os.name ] = NT\n    {\n        layout = versioned ;\n    }\n    else\n    {\n        layout = system ;\n    }\n}\nlayout-$(layout) = true ;\n\nif $(layout) = system && $(build-type) = complete\n{\n    ECHO error\\: Cannot use --layout=system with --build-type complete. ;\n    ECHO error\\: Please use either --layout=versioned or --layout=tagged ;\n    ECHO error\\: if you wish to build multiple variants. ;\n    if [ os.name ] != NT\n    {\n        ECHO error\\: Note that --layout=system is used by default on Unix\n            starting with Boost 1.40. ;\n    }\n    EXIT ;\n}\n\n# Possible stage only location.\nstage-locate = [ option.get stagedir ] ;\n\nif $(stage-locate)\n{\n    stage-locate = [ path.root [ path.make $(stage-locate) ] [ path.pwd ] ] ;\n}\nelse\n{\n    stage-locate = $(BOOST_ROOT)/stage ;\n}\n\nBOOST_STAGE_LOCATE = $(stage-locate) ;\n\n# Custom build ID.\nbuild-id = [ option.get buildid ] ;\nif $(build-id)\n{\n    BUILD_ID = [ regex.replace $(build-id) \"[*\\\\/:.\\\"\\' ]\" _ ] ;\n}\n\n# Python build id (for Python libraries only).\npython-id = [ option.get \"python-buildid\" ] ;\nif $(python-id)\n{\n    PYTHON_ID = [ regex.replace $(python-id) \"[*\\\\/:.\\\"\\']\" _ ] ;\n}\n\n\nif $(layout) = versioned\n{\n    switch $(layout-version)\n    {\n    case 1.40 :\n        .format-name-args =\n            <base> <toolset> <threading> <runtime> ;\n    case 1.66 :\n        .format-name-args =\n            <base> <toolset> <threading> <runtime> <arch-and-model> ;\n    case 1.69 :\n        .format-name-args =\n            <base> <toolset> <threading> <runtime> <arch-and-model> ;\n    }\n}\nelse if $(layout) = tagged\n{\n    switch $(layout-version)\n    {\n    case 1.40 :\n        .format-name-args =\n            <base> <threading> <runtime> ;\n    case 1.66 :\n        .format-name-args =\n            <base> <threading> <runtime> ;\n    case 1.69 :\n        .format-name-args =\n            <base> <threading> <runtime> <arch-and-model> ;\n    }\n}\nelse if $(layout) = system\n{\n    .format-name-args = <base> ;\n}\nelse\n{\n    .format-name-error = true ;\n}\n\n\n################################################################################\n#\n# 1. 'tag' function adding decorations suitable to the properties if versioned\n# or tagged layout is requested. Called from Jamroot.\n#\n################################################################################\n\nrule tag ( name : type ? : property-set )\n{\n    if $(type:E=x) in STATIC_LIB SHARED_LIB IMPORT_LIB\n    {\n        local args = $(.format-name-args) ;\n        if $(layout) = versioned\n        {\n            args += -$(BOOST_VERSION_TAG) ;\n        }\n        local result  = [ common.format-name\n            $(args) -$(BUILD_ID)\n            : $(name) : $(type) : $(property-set) ] ;\n        if $(.format-name-error)\n        {\n            EXIT error\\: invalid layout '$(layout:E=)' ;\n        }\n\n        # Optionally add version suffix. On NT, library with version suffix will\n        # not be recognized by linkers. On CYGWIN, we get strage duplicate\n        # symbol errors when library is generated with version suffix. On OSX,\n        # version suffix is not needed -- the linker expects the\n        # libFoo.1.2.3.dylib format. AIX linkers do not accept version suffixes\n        # either. Pgi compilers can not accept a library with version suffix.\n        # For android, if we link to libFoo.so, which is a soft link to libFoo.so.1.2.3,\n        # the android studio will only pack the former into the final apk.\n        if $(type) = SHARED_LIB &&\n          ! [ $(property-set).get <target-os> ] in windows cygwin darwin aix android &&\n          ! [ $(property-set).get <toolset> ] in pgi\n        {\n            result = $(result).$(BOOST_VERSION)  ;\n        }\n\n        return $(result) ;\n    }\n}\n\n# Specialized tag function to use for libraries linking to Python.\n# Appends value of --python-buildid if provided.\nrule python-tag ( name : type ? : property-set )\n{\n    local result = $(name) ;\n\n    if $(type) in STATIC_LIB SHARED_LIB IMPORT_LIB\n    {\n        # Add Python version suffix\n\n        local version = [ $(property-set).get <python> ] ;\n\n        local major-minor = [ MATCH \"^([0-9]+)\\.([0-9]+)\" : $(version) ] ;\n        local suffix = $(major-minor:J=\"\") ;\n\n        if $(suffix)\n        {\n            result = $(result)$(suffix) ;\n        }\n\n        # Add PYTHON_ID if supplied\n\n        if $(PYTHON_ID)\n        {\n            result = $(result)-$(PYTHON_ID) ;\n        }\n    }\n\n    # forward to the boost tagging rule\n    return  [ tag $(result) : $(type) : $(property-set) ] ;\n}\n\n################################################################################\n#\n# 2. Declare targets that build and install all libraries. Specifically:\n#\n#    - 'stage-proper' that puts all libraries in stage/lib\n#    - 'install-proper' that install libraries and headers to system location\n#\n################################################################################\n\nrule declare_install_and_stage_proper_targets ( libraries * )\n{\n    local p = [ project.current ] ;\n    local install-targets ;\n    local stage-targets ;\n    for local library in $(libraries)\n    {\n        local mp = [ project.search /boost/$(library) ] ;\n        if $(mp)\n        {\n            install-targets += /boost/$(library)//install ;\n            stage-targets += /boost/$(library)//stage ;\n        }\n        else\n        {\n            install-targets += libs/$(library)/build//install ;\n            stage-targets += libs/$(library)/build//stage ;\n        }\n    }\n\n    alias install-proper : $(install-targets) ;\n    $(p).mark-target-as-explicit install-proper ;\n\n    alias stage-proper : $(stage-targets) ;\n    $(p).mark-target-as-explicit stage-proper ;\n}\n\n\n################################################################################\n#\n#  3. Declare top-level targets 'stage' and 'install'. These examine the\n#  --build-type option and, in case it is 'complete', build the 'install-proper'\n#  and 'stage-proper' targets with a number of property sets.\n#\n################################################################################\n\nrule emit-shared-static-warning ( )\n{\n    if ! $(.shared-static-warning-emitted)\n    {\n        ECHO \"\" ;\n        ECHO \"warning: The configuration link=shared, runtime-link=static is disabled\" ;\n        ECHO \"warning: by default as being too dangerous to use, and will not be built.\" ;\n        ECHO \"warning: To enable it, use --allow-shared-static.\" ;\n        ECHO \"\" ;\n\n        .shared-static-warning-emitted = 1 ;\n    }\n}\n\nclass top-level-target : alias-target-class\n{\n    import modules ;\n    import boostcpp ;\n\n    rule __init__ ( name : project : sources * : requirements *\n        : default-build * : usage-requirements * )\n    {\n        alias-target-class.__init__ $(name) : $(project) : $(sources) :\n            $(requirements) : $(default-build) : $(usage-requirements) ;\n\n        self.build-type = [ modules.peek boostcpp : build-type ] ;\n        # On Linux, we build the release variant by default, since few users\n        # will ever want to debug C++ Boost libraries, and there is no ABI\n        # incompatibility between debug and release variants. We build shared\n        # and static libraries since that is what most packages seem to provide\n        # (.so in libfoo and .a in libfoo-dev).\n\n        self.minimal-properties = [ property-set.create <variant>release\n            <threading>multi <link>shared <link>static <runtime-link>shared ] ;\n\n        # On Windows, new IDE projects use:\n        #\n        #   runtime-link=dynamic, threading=multi, variant=(debug|release)\n        #\n        # and in addition, C++ Boost's autolink defaults to static linking.\n\n        self.minimal-properties-win = [ property-set.create <variant>debug\n            <variant>release <threading>multi <link>static <runtime-link>shared\n            <address-model>32 <address-model>64 ] ;\n\n        self.complete-properties = [ property-set.create\n            <variant>debug <variant>release\n            <threading>multi\n            <link>shared <link>static\n            <runtime-link>shared <runtime-link>static ] ;\n\n        self.complete-properties-win = [ property-set.create\n            <variant>debug <variant>release\n            <threading>multi\n            <link>shared <link>static\n            <runtime-link>shared <runtime-link>static\n            <address-model>32 <address-model>64 ] ;\n    }\n\n    rule generate ( property-set )\n    {\n        modules.poke : top-level-targets : [ modules.peek : top-level-targets ]\n            $(self.name) ;\n\n        local os = [ $(property-set).get <target-os> ] ;\n\n        # Because we completely override the parent's 'generate' we need to\n        # check for default feature values ourselves.\n\n        if ! $(os)\n        {\n            os = [ feature.defaults <target-os> ] ;\n            os = $(os:G=) ;\n        }\n\n        local build-type-set ;\n\n        if $(self.build-type) = minimal\n        {\n            if $(os) = windows\n            {\n                build-type-set = $(self.minimal-properties-win) ;\n            }\n            else\n            {\n                build-type-set = $(self.minimal-properties) ;\n            }\n        }\n        else if $(self.build-type) = complete\n        {\n            if $(os) = windows\n            {\n                build-type-set = $(self.complete-properties-win) ;\n            }\n            else\n            {\n                build-type-set = $(self.complete-properties) ;\n            }\n        }\n        else\n        {\n            import errors ;\n            errors.error \"Unknown build type\" ;\n        }\n\n        if $(build-type-set)\n        {\n            local expanded = [ targets.apply-default-build $(property-set)\n                : $(build-type-set) ] ;\n\n            # Filter inappropriate combinations.\n\n            local filtered ;\n            local skipped ;\n\n            local argv = [ modules.peek : ARGV ] ;\n\n            for local p in $(expanded)\n            {\n                # See comment in handle-static-runtime regarding this logic.\n                if [ $(p).get <link> ] = shared\n                    && [ $(p).get <runtime-link> ] = static\n                    && [ $(p).get <toolset> ] != cw\n                    && ! --allow-shared-static in $(argv)\n                {\n                    # Skip this.\n                    skipped += $(p) ;\n                }\n                else\n                {\n                    filtered += $(p) ;\n                }\n            }\n\n            if $(expanded) = $(skipped)\n            {\n                boostcpp.emit-shared-static-warning ;\n            }\n\n            return [ build-multiple $(filtered) ] ;\n        }\n    }\n\n    rule build-multiple ( property-sets * )\n    {\n        local usage-requirements = [ property-set.empty ] ;\n        local result ;\n        for local p in $(property-sets)\n        {\n            local r = [ alias-target-class.generate $(p) ] ;\n            if $(r)\n            {\n                usage-requirements = [ $(usage-requirements).add $(r[1]) ] ;\n                result += $(r[2-]) ;\n            }\n        }\n        return $(usage-requirements) [ sequence.unique $(result) ] ;\n    }\n}\n\nrule declare_top_level_targets ( libraries * )\n{\n    declare_install_and_stage_proper_targets $(libraries) ;\n\n    targets.create-metatarget top-level-target : [ project.current ]\n        : install\n        : install-proper\n        ;\n    targets.create-metatarget top-level-target : [ project.current ]\n        : stage\n        : stage-proper headers\n        ;\n\n    p = [ project.current ] ;\n    $(p).mark-target-as-explicit install stage ;\n\n    # This target is built by default, and will forward to 'stage' after\n    # producing some explanations.\n    targets.create-metatarget top-level-target : [ project.current ]\n        : forward\n        : explain stage\n        ;\n}\n\n\n################################################################################\n#\n# 4. Add hook to report configuration before the build, and confirmation with\n# setup instructions after the build.\n#\n################################################################################\n\nmessage explain : \"\\nBuilding the Boost C++ Libraries.\\n\\n\" ;\nlocal p = [ project.current ] ;\n$(p).mark-target-as-explicit explain ;\n\nrule pre-build ( )\n{\n    local tl = [ modules.peek : top-level-targets ] ;\n    if stage in $(tl) || install in $(tl)\n    {\n        # FIXME: Remove 'if' when Boost regression tests start using trunk bjam.\n        if PAD in [ RULENAMES ]\n        {\n            configure.print-component-configuration ;\n        }\n    }\n}\nIMPORT $(__name__) : pre-build : : $(__name__).pre-build ;\nbuild-system.set-pre-build-hook $(__name__).pre-build ;\n\nrule post-build ( ok ? )\n{\n    if forward in [ modules.peek : top-level-targets ]\n    {\n        if $(ok)\n        {\n            local include-path = [ path.native $(BOOST_ROOT) ] ;\n            local stage-abs = [ path.native $(stage-locate)/lib ] ;\n\n            ECHO \"\n\nThe Boost C++ Libraries were successfully built!\n\nThe following directory should be added to compiler include paths:\n\n    $(include-path)\n\nThe following directory should be added to linker library paths:\n\n    $(stage-abs)\n\" ;\n        }\n    }\n}\nIMPORT $(__name__) : post-build : : $(__name__).post-build ;\nbuild-system.set-post-build-hook $(__name__).post-build ;\n\n\n################################################################################\n#\n# 5. Top-level setup.\n#\n################################################################################\n\n# Decides which libraries are to be installed by looking at --with-<library>\n# --without-<library> arguments. Returns the list of directories under \"libs\"\n# which must be built and installed.\n#\nrule libraries-to-install ( existing-libs * )\n{\n    local argv = [ modules.peek : ARGV ] ;\n    local with-parameter = [ MATCH ^--with-(.*) : $(argv) ] ;\n    local without-parameter = [ MATCH ^--without-(.*) : $(argv) ] ;\n\n    if ! $(with-parameter) && ! $(without-parameter)\n    {\n        # Nothing is specified on command line. See if maybe project-config.jam\n        # has some choices.\n        local libs = [ modules.peek project-config : libraries ] ;\n        with-parameter = [ MATCH ^--with-(.*) : $(libs) ] ;\n        without-parameter = [ MATCH ^--without-(.*) : $(libs) ] ;\n    }\n\n    # Do some checks.\n    if $(with-parameter) && $(without-parameter)\n    {\n        EXIT error\\: both --with-<library> and --without-<library> specified ;\n    }\n\n    local wrong = [ set.difference $(with-parameter) : $(existing-libs) ] ;\n    if $(wrong)\n    {\n        EXIT error\\: wrong library name '$(wrong[1])' in the --with-<library>\n            option. ;\n    }\n    local wrong = [ set.difference $(without-parameter) : $(existing-libs) ] ;\n    if $(wrong)\n    {\n        EXIT error\\: wrong library name '$(wrong[1])' in the --without-<library>\n            option. ;\n    }\n\n    if $(with-parameter)\n    {\n        return [ set.intersection $(existing-libs) : $(with-parameter) ] ;\n    }\n    else\n    {\n        return [ set.difference $(existing-libs) : $(without-parameter) ] ;\n    }\n}\n\nrule declare-targets ( all-libraries * )\n{\n    configure.register-components $(all-libraries) ;\n\n    # Select the libraries to install.\n    libraries = [ libraries-to-install $(all-libraries) ] ;\n    configure.components-building $(libraries) ;\n\n    if [ option.get \"show-libraries\" : : true ]\n    {\n        ECHO The following libraries require building\\: ;\n        for local l in $(libraries)\n        {\n            ECHO \"    - $(l)\" ;\n        }\n        EXIT ;\n    }\n\n    declare_top_level_targets $(libraries) ;\n}\n\n# Returns the properties identifying the toolset. We'll use them\n# below to configure checks. These are essentially same as in\n# configure.builds, except we don't use address-model and\n# architecture - as we're trying to detect them here.\n#\nrule toolset-properties ( properties * )\n{\n    local toolset = [ property.select <toolset> : $(properties) ] ;\n    local toolset-version-property = \"<toolset-$(toolset:G=):version>\" ;\n    return [ property.select <target-os> <toolset> $(toolset-version-property) : $(properties) ] ;\n}\n\n.deducible-architectures = arm loongarch mips power riscv s390x sparc x86 combined ;\nfeature.feature x-deduced-platform\n    : $(.deducible-architectures)_32 $(.deducible-architectures)_64\n    : composite implicit optional propagated ;\nfor a in $(.deducible-architectures)\n{\n    feature.compose <x-deduced-platform>$(a)_32 : <architecture>$(a) <address-model>32 ;\n    feature.compose <x-deduced-platform>$(a)_64 : <architecture>$(a) <address-model>64 ;\n}\n\nrule deduce-architecture ( properties * )\n{\n    local deduced-pl = [ property.select <x-deduced-platform> : $(properties) ] ;\n    if $(deduced-pl)\n    {\n        return $(deduced-pl) ;\n    }\n\n    local filtered = [ toolset-properties $(properties) ] ;\n\n    local names = 32 64 ;\n    local idx = [ configure.find-builds \"default address-model\" : $(filtered)\n        : /boost/architecture//32 \"32-bit\"\n        : /boost/architecture//64 \"64-bit\" ] ;\n    local deduced-am = $(names[$(idx)]) ;\n    if ! $(deduced-am)\n    {\n        return ;\n    }\n\n    names = $(.deducible-architectures) ;\n    idx = [ configure.find-builds \"default architecture\" : $(filtered)\n        : /boost/architecture//arm\n        : /boost/architecture//loongarch\n        : /boost/architecture//mips\n        : /boost/architecture//power\n        : /boost/architecture//riscv\n        : /boost/architecture//s390x\n        : /boost/architecture//sparc\n        : /boost/architecture//x86\n        : /boost/architecture//combined ] ;\n    local deduced-arch = $(names[$(idx)]) ;\n    if ! $(deduced-arch)\n    {\n        return ;\n    }\n\n    local requested-am = [ property.select <address-model> : $(properties) ] ;\n    requested-am ?= <address-model>$(deduced-am) ;\n\n    local requested-arch = [ property.select <architecture> : $(properties) ] ;\n    requested-arch ?= <architecture>$(deduced-arch) ;\n\n    deduced-pl = $(requested-arch:G=<x-deduced-platform>)_$(requested-am:G=) ;\n\n    if ! $(deduced-pl:G=) in [ feature.values <x-deduced-platform> ]\n    {\n        deduced-pl = ;\n    }\n    return $(deduced-pl) ;\n}\n\n\nrule deduce-address-model ( properties * )\n{\n    # this rule is a noop and exists for legacy reasons\n}\n\nrule platform ( )\n{\n    return <conditional>@boostcpp.deduce-architecture\n        <conditional>@boostcpp.deduce-address-model ;\n}\n"
        },
        {
          "name": "bootstrap.bat",
          "type": "blob",
          "size": 2.427734375,
          "content": "@ECHO OFF\n\nSETLOCAL\n\nREM Copyright 2019-2020 Rene Rivera\nREM Copyright (C) 2009 Vladimir Prus\nREM\nREM Distributed under the Boost Software License, Version 1.0.\nREM (See accompanying file LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt)\n\nECHO Building Boost.Build engine\nif exist \".\\tools\\build\\src\\engine\\b2.exe\" del tools\\build\\src\\engine\\b2.exe\npushd tools\\build\\src\\engine\n\ncall .\\build.bat %*\n@ECHO OFF\n\npopd\n\nif exist \".\\tools\\build\\src\\engine\\b2.exe\" (\n   copy .\\tools\\build\\src\\engine\\b2.exe . > nul\n   goto :bjam_built)\n\ngoto :bjam_failure\n\n:bjam_built\n\nREM Ideally, we should obtain the toolset that build.bat has\nREM guessed. However, it uses setlocal at the start and does not\nREM export BOOST_JAM_TOOLSET, and I don't know how to do that\nREM properly. Default to msvc if not specified.\n\nSET TOOLSET=msvc\n\nIF \"%1\"==\"gcc\" SET TOOLSET=gcc\nIF \"%1\"==\"clang\" SET TOOLSET=clang\nIF \"%1\"==\"borland\" SET TOOLSET=embarcadero\nIF \"%1\"==\"vc71\" SET TOOLSET=msvc : 7.1\nIF \"%1\"==\"vc8\" SET TOOLSET=msvc : 8.0\nIF \"%1\"==\"vc9\" SET TOOLSET=msvc : 9.0\nIF \"%1\"==\"vc10\" SET TOOLSET=msvc : 10.0\nIF \"%1\"==\"vc11\" SET TOOLSET=msvc : 11.0\nIF \"%1\"==\"vc12\" SET TOOLSET=msvc : 12.0\nIF \"%1\"==\"vc14\" SET TOOLSET=msvc : 14.0\nIF \"%1\"==\"vc141\" SET TOOLSET=msvc : 14.1\nIF \"%1\"==\"vc142\" SET TOOLSET=msvc : 14.2\nIF \"%1\"==\"vc143\" SET TOOLSET=msvc : 14.3\n\nECHO.\nECHO Generating Boost.Build configuration in project-config.jam for %TOOLSET%...\nECHO # Boost.Build Configuration > project-config.jam\nECHO # Automatically generated by bootstrap.bat >> project-config.jam\nECHO. >> project-config.jam\nECHO import option ; >> project-config.jam\nECHO. >> project-config.jam\nECHO using %TOOLSET% ; >> project-config.jam\nECHO. >> project-config.jam\nECHO option.set keep-going : false ; >> project-config.jam\nECHO. >> project-config.jam\n\nECHO.\nECHO Bootstrapping is done. To build, run:\nECHO.\nECHO     .\\b2\nECHO.\n\nIF EXIST libs\\config\\include (\nECHO.    To generate header files, run:\nECHO.\nECHO.    .\\b2 headers\nECHO.\n)\n\nECHO To adjust configuration, edit 'project-config.jam'.\nECHO Further information:\nECHO.\nECHO     - Command line help:\nECHO     .\\b2 --help\nECHO.     \nECHO     - Getting started guide: \nECHO     http://boost.org/more/getting_started/windows.html\nECHO.     \nECHO     - Boost.Build documentation:\nECHO     http://www.boost.org/build/\nECHO.\n\ngoto :end\n\n:bjam_failure\n\nECHO.\nECHO Failed to build Boost.Build engine.\nECHO.\n\nREM Set an error code to allow `bootstrap && b2`\ncmd /c exit /b 1 > nul\n\n:end\n"
        },
        {
          "name": "bootstrap.sh",
          "type": "blob",
          "size": 10.5576171875,
          "content": "#!/bin/sh\n# Copyright 2019-2021 René Ferdinand Rivera Morell\n# Copyright (C) 2005, 2006 Douglas Gregor.\n# Copyright (C) 2006 The Trustees of Indiana University\n#\n# Distributed under the Boost Software License, Version 1.0.\n# (See accompanying file LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt)\n\n# boostinspect:notab - Tabs are required for the Makefile.\n\nBJAM=\"\"\nTOOLSET=\"\"\nBJAM_CONFIG=\"\"\nBUILD=\"\"\nPREFIX=/usr/local\nEPREFIX=\nLIBDIR=\nINCLUDEDIR=\nLIBS=\"\"\nPYTHON=python\nPYTHON_VERSION=\nPYTHON_ROOT=\nICU_ROOT=\n\n# Handle case where builtin shell version of echo command doesn't \n# support -n.  Use the installed echo executable if there is one \n# rather than builtin version to ensure -n is supported.\nECHO=`which echo`\nif test \"x$ECHO\" = x; then\n  ECHO=echo\nfi\n\n# Internal flags\nflag_no_python=\nflag_icu=\nflag_show_libraries=\n\nfor option\ndo\n    case $option in\n\n    -help | --help | -h)\n      want_help=yes ;;\n\n    -prefix=* | --prefix=*)\n      PREFIX=`expr \"x$option\" : \"x-*prefix=\\(.*\\)\"`\n      ;;\n\n    -exec-prefix=* | --exec-prefix=*)\n      EPREFIX=`expr \"x$option\" : \"x-*exec-prefix=\\(.*\\)\"`\n      ;;\n\n    -libdir=* | --libdir=*)\n      LIBDIR=`expr \"x$option\" : \"x-*libdir=\\(.*\\)\"`\n      ;;\n\n    -includedir=* | --includedir=*)\n      INCLUDEDIR=`expr \"x$option\" : \"x-*includedir=\\(.*\\)\"`\n      ;;\n\n    -show-libraries | --show-libraries )\n      flag_show_libraries=yes\n      ;;\n\n    -with-bjam=* | --with-bjam=* )\n      BJAM=`expr \"x$option\" : \"x-*with-bjam=\\(.*\\)\"`\n      ;;\n\n    -with-icu | --with-icu )\n      flag_icu=yes\n      ;;\n\n    -with-icu=* | --with-icu=* )\n      flag_icu=yes\n      ICU_ROOT=`expr \"x$option\" : \"x-*with-icu=\\(.*\\)\"`\n      ;;\n\n    -without-icu | --without-icu )\n      flag_icu=no\n      ;;\n\n    -with-libraries=* | --with-libraries=* )\n      library_list=`expr \"x$option\" : \"x-*with-libraries=\\(.*\\)\"`\n      if test \"$library_list\" != \"all\"; then\n          old_IFS=$IFS\n          IFS=,\n          for library in $library_list\n          do\n              LIBS=\"$LIBS --with-$library\"\n\n              if test $library = python; then\n                  requested_python=yes\n              fi\n          done\n          IFS=$old_IFS\n\n          if test \"x$requested_python\" != xyes; then\n              flag_no_python=yes\n          fi\n      fi\n      ;;\n\n    -without-libraries=* | --without-libraries=* )\n      library_list=`expr \"x$option\" : \"x-*without-libraries=\\(.*\\)\"`\n      old_IFS=$IFS\n      IFS=,\n      for library in $library_list\n      do\n          LIBS=\"$LIBS --without-$library\"\n\n          if test $library = python; then\n              flag_no_python=yes\n          fi\n      done\n      IFS=$old_IFS\n      ;;\n\n    -with-python=* | --with-python=* )\n      PYTHON=`expr \"x$option\" : \"x-*with-python=\\(.*\\)\"`\n      ;;\n\n    -with-python-root=* | --with-python-root=* )\n      PYTHON_ROOT=`expr \"x$option\" : \"x-*with-python-root=\\(.*\\)\"`\n      ;;\n\n    -with-python-version=* | --with-python-version=* )\n      PYTHON_VERSION=`expr \"x$option\" : \"x-*with-python-version=\\(.*\\)\"`\n      ;;\n\n    -with-toolset=* | --with-toolset=* )\n      TOOLSET=`expr \"x$option\" : \"x-*with-toolset=\\(.*\\)\"`\n      ;;\n\n    -*)\n      { echo \"error: unrecognized option: $option\nTry \\`$0 --help' for more information.\" >&2\n      { (exit 1); exit 1; }; }\n      ;; \n\n    esac\ndone\n\nif test \"x$want_help\" = xyes; then\n  cat <<EOF\n\\`./bootstrap.sh\\' builds the Boost build system B2 and prepares Boost for\nbuilding. This includes setting defaults in the project-config.jam which you\ncan adjust prior to invoking B2.\n\nUsage: $0 [OPTION]... \n\nDefaults for the options are specified in brackets.\n\nConfiguration:\n  -h, --help                display this help and exit\n  --with-bjam=BJAM          use existing Boost.Jam executable (bjam)\n                            [automatically built]\n  --with-toolset=TOOLSET    use specific TOOLSET to build B2 and as default\n                            for building Boost\n                            [automatically detected]\n  --show-libraries          show the set of libraries that require build\n                            and installation steps (i.e., those libraries\n                            that can be used with --with-libraries or\n                            --without-libraries), then exit\n  --with-libraries=list     build only a particular set of libraries,\n                            describing using either a comma-separated list of\n                            library names or \"all\"\n                            [all]\n  --without-libraries=list  build all libraries except the ones listed []\n  --with-icu                enable Unicode/ICU support in Regex \n                            [automatically detected]\n  --without-icu             disable Unicode/ICU support in Regex\n  --with-icu=DIR            specify the root of the ICU library installation\n                            and enable Unicode/ICU support in Regex\n                            [automatically detected]\n  --with-python=PYTHON      specify the Python executable [python]\n  --with-python-root=DIR    specify the root of the Python installation\n                            [automatically detected]\n  --with-python-version=X.Y specify the Python version as X.Y\n                            [automatically detected]\n\nInstallation directories:\n  --prefix=PREFIX           install Boost into the given PREFIX\n                            [/usr/local]\n  --exec-prefix=EPREFIX     install Boost binaries into the given EPREFIX\n                            [PREFIX]\n\nMore precise control over installation directories:\n  --libdir=DIR              install libraries here [EPREFIX/lib]\n  --includedir=DIR          install headers here [PREFIX/include]\n\nEOF\nfi\ntest -n \"$want_help\" && exit 0\n\nmy_dir=$(dirname \"$0\")\n\n# Determine the toolset, if not already decided\nif test \"x$TOOLSET\" = x; then\n  guessed_toolset=`CXX= CXXFLAGS= $my_dir/tools/build/src/engine/build.sh --guess-toolset`\n  case $guessed_toolset in\n    acc | clang | gcc | como | mipspro | pathscale | pgi | qcc | vacpp )\n    TOOLSET=$guessed_toolset\n    ;;\n    \n    intel-* )\n    TOOLSET=intel\n    ;;\n    \n    mingw )\n    TOOLSET=gcc\n    ;;\n    \n    sun* )\n    TOOLSET=sun\n    ;;\n    \n    * )\n    # Not supported by B2\n    ;;\n  esac\nfi\n\nrm -f config.log\n\n# Build bjam\nif test \"x$BJAM\" = x; then\n  $ECHO \"Building B2 engine..\"\n  pwd=`pwd`\n  CXX= CXXFLAGS= \"$my_dir/tools/build/src/engine/build.sh\" ${TOOLSET}\n  if [ $? -ne 0 ]; then\n      echo\n      echo \"Failed to build B2 build engine\"\n      exit 1\n  fi\n  cd \"$pwd\"\n  BJAM=\"$my_dir/tools/build/src/engine/b2\"\n  echo \"tools/build/src/engine/b2\"\n  cp \"$BJAM\" .\n\nfi\n\n# TBD: Turn BJAM into an absolute path\n\n# If there is a list of libraries \nif test \"x$flag_show_libraries\" = xyes; then\n  cat <<EOF\n\nThe following Boost libraries have portions that require a separate build\nand installation step. Any library not listed here can be used by including\nthe headers only.\n\nThe Boost libraries requiring separate building and installation are:\nEOF\n  $BJAM -d0 --show-libraries | grep '^[[:space:]]*-'\n  exit 0\nfi\n\n# Setup paths\nif test \"x$EPREFIX\" = x; then\n  EPREFIX=\"$PREFIX\"\nfi\n\nif test \"x$LIBDIR\" = x; then\n  LIBDIR=\"$EPREFIX/lib\"\nfi\n\nif test \"x$INCLUDEDIR\" = x; then\n  INCLUDEDIR=\"$PREFIX/include\"\nfi\n\n# Find Python\nif test \"x$flag_no_python\" = x; then\n  result=`$PYTHON -c \"exit\" > /dev/null 2>&1`\n  if [ \"$?\" -ne \"0\" ]; then\n    flag_no_python=yes\n  fi\nfi\n\nif test \"x$flag_no_python\" = x; then\n    if test \"x$PYTHON_VERSION\" = x; then\n        $ECHO -n \"Detecting Python version... \"\n        PYTHON_VERSION=`$PYTHON -c \"import sys; print (\\\"%d.%d\\\" % (sys.version_info[0], sys.version_info[1]))\"`\n        echo $PYTHON_VERSION\n    fi\n\n    if test \"x$PYTHON_ROOT\" = x; then\n        $ECHO -n \"Detecting Python root... \"\n        PYTHON_ROOT=`$PYTHON -c \"import sys; print(sys.prefix)\"`\n        echo $PYTHON_ROOT\n    fi    \nfi\n\n# Configure ICU\n$ECHO -n \"Unicode/ICU support for Boost.Regex?... \"\nif test \"x$flag_icu\" != xno; then\n  if test \"x$ICU_ROOT\" = x; then\n    if command -v pkg-config > /dev/null && pkg-config icu-uc ; then\n      ICU_ROOT=`pkg-config --variable=prefix icu-uc`\n    fi\n  fi\n  if test \"x$ICU_ROOT\" = x; then\n    COMMON_ICU_PATHS=\"/usr /usr/local /sw\"\n    for p in $COMMON_ICU_PATHS; do\n      if test -r $p/include/unicode/utypes.h; then\n        ICU_ROOT=$p\n      fi\n    done\n  \n    if test \"x$ICU_ROOT\" = x; then\n      echo \"not found.\"\n    else      \n      BJAM_CONFIG=\"$BJAM_CONFIG -sICU_PATH=$ICU_ROOT\"\n      echo \"$ICU_ROOT\"\n    fi\n  else\n    BJAM_CONFIG=\"$BJAM_CONFIG -sICU_PATH=$ICU_ROOT\"\n    echo \"$ICU_ROOT\"\n  fi\nelse\n  echo \"disabled.\"\nfi\n\n# Backup the user's existing project-config.jam\nJAM_CONFIG_OUT=\"project-config.jam\"\nif test -r \"project-config.jam\"; then\n  counter=1\n \n  while test -r \"project-config.jam.$counter\"; do\n    counter=`expr $counter + 1`\n  done\n\n  echo \"Backing up existing B2 configuration in project-config.jam.$counter\"\n  mv \"project-config.jam\" \"project-config.jam.$counter\"\nfi\n\n# Generate user-config.jam\necho \"Generating B2 configuration in project-config.jam for $TOOLSET...\"\ncat > project-config.jam <<EOF\n# B2 Configuration\n# Automatically generated by bootstrap.sh\n\nimport option ;\nimport feature ;\n\n# Compiler configuration. This definition will be used unless\n# you already have defined some toolsets in your user-config.jam\n# file.\nif ! $TOOLSET in [ feature.values <toolset> ]\n{\n    using $TOOLSET ; \n}\n\nproject : default-build <toolset>$TOOLSET ;\nEOF\n\n#  - Python configuration\nif test \"x$flag_no_python\" = x; then\n  cat >> project-config.jam <<EOF\n\n# Python configuration\nimport python ;\nif ! [ python.configured ]\n{\n    using python : $PYTHON_VERSION : \"$PYTHON_ROOT\" ;\n}\nEOF\nfi\n\nif test \"x$ICU_ROOT\" != x; then\n  cat >> project-config.jam << EOF\n\npath-constant ICU_PATH : $ICU_ROOT ;\n\nEOF\nfi\n\ncat >> project-config.jam << EOF\n\n# List of --with-<library> and --without-<library>\n# options. If left empty, all libraries will be built.\n# Options specified on the command line completely\n# override this variable.\nlibraries = $LIBS ;\n\n# These settings are equivalent to corresponding command-line\n# options.\noption.set prefix : $PREFIX ;\noption.set exec-prefix : $EPREFIX ;\noption.set libdir : $LIBDIR ;\noption.set includedir : $INCLUDEDIR ;\n\n# Stop on first error\noption.set keep-going : false ;\nEOF\n\ncat << EOF\n\nBootstrapping is done. To build, run:\n\n    ./b2\n    \nTo generate header files, run:\n\n    ./b2 headers\n\nThe configuration generated uses ${TOOLSET} to build by default. If that is\nunintended either use the --with-toolset option or adjust configuration, by\nediting 'project-config.jam'.\n\nFurther information:\n\n   - Command line help:\n     ./b2 --help\n     \n   - Getting started guide: \n     http://www.boost.org/more/getting_started/unix-variants.html\n     \n   - B2 documentation:\n     http://www.boost.org/build/\n\nEOF\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.htm",
          "type": "blob",
          "size": 0.7509765625,
          "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\n    \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n  <meta http-equiv=\"refresh\" content=\"0; URL=index.html\" />\n\n  <title></title>\n  <link rel=\"stylesheet\" href=\"doc/src/boostbook.css\" type=\"text/css\" />\n</head>\n\n<body>\n  Automatic redirection failed, please go to <a href=\n  \"index.html\">index.html</a>.\n\n  <div class=\"copyright-footer\">\n    <p>Copyright 2008 Rene Rivera</p>\n\n    <p>Distributed under the Boost Software License, Version 1.0. (See\n    accompanying file <a href=\"LICENSE_1_0.txt\">LICENSE_1_0.txt</a> or copy\n    at <a href=\n    \"http://www.boost.org/LICENSE_1_0.txt\">http://www.boost.org/LICENSE_1_0.txt</a>)</p>\n  </div>\n</body>\n</html>\n"
        },
        {
          "name": "index.html",
          "type": "blob",
          "size": 5.8955078125,
          "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\n    \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n  <title>Boost C++ Libraries</title>\n  <link rel=\"stylesheet\" href=\"doc/src/boostbook.css\" type=\"text/css\" />\n</head>\n\n<body>\n  <table border=\"0\" cellpadding=\"5\" cellspacing=\"0\" style=\"border-collapse: collapse\" bordercolor=\"#111111\">\n    <tr>\n      <td width=\"277\">\n        <a href=\"index.html\">\n        <img src=\"boost.png\" alt=\"boost.png (6897 bytes)\" align=\"middle\" width=\"277\" height=\"86\" border=\"0\"/></a></td>\n      <td width=\"337\" align=\"middle\">\n      <h2 style=\"text-align: center\">\n      {{#is_develop}}Development Snapshot{{/is_develop}}\n      {{^is_develop}}Release {{version}}{{/is_develop}}\n      </h2>\n      </td>\n    </tr>\n  </table>\n\n  <table border=\"0\" cellpadding=\"5\" cellspacing=\"0\" style=\"border-collapse: collapse\" bordercolor=\"#111111\" bgcolor=\"#D7EEFF\" height=\"26\" width=\"671\">\n    <tr>\n      <td height=\"16\" width=\"661\"><a href=\"more/getting_started/index.html\">Getting Started</a>&nbsp;&nbsp;<font color=\"#FFFFFF\">&nbsp;\n      </font>&nbsp; <a href=\"libs/libraries.htm\">Libraries</a>&nbsp;&nbsp;<font color=\"#FFFFFF\">&nbsp;\n      </font>&nbsp; <a href=\"tools/index.html\">Tools&nbsp;</a>&nbsp;<font color=\"#FFFFFF\">&nbsp;\n      </font>&nbsp; <a href=\"http://www.boost.org\">Web Site</a>&nbsp;&nbsp;<font color=\"#FFFFFF\">&nbsp;\n      </font>&nbsp; <a href=\"http://www.boost.org/users/news/\">News</a>&nbsp;&nbsp;<font color=\"#FFFFFF\">&nbsp;\n      </font>&nbsp; <a href=\"http://www.boost.org/community/\">Community</a>&nbsp;&nbsp;<font color=\"#FFFFFF\">&nbsp;\n      </font>&nbsp; <a href=\"http://www.boost.org/users/faq.html\">FAQ</a>&nbsp;&nbsp;<font color=\"#FFFFFF\">&nbsp;\n      </font>&nbsp; <a href=\"more/index.htm\">More Info</a></td>\n    </tr>\n  </table>\n\n\n  <h2 class=\"title\">Welcome to the Boost C++ Libraries</h2>\n\n  <p>Boost provides free peer-reviewed portable C++ source libraries.</p>\n\n  <p>We emphasize libraries that work well with the C++ Standard Library.\n  Boost libraries are intended to be widely useful, and usable across a broad\n  spectrum of applications. The <a href=\n  \"http://www.boost.org/users/license.html\">Boost license</a> encourages both\n  commercial and non-commercial use.</p>\n\n  <p>We aim to establish \"existing practice\" and provide reference\n  implementations so that Boost libraries are suitable for eventual\n  standardization. Ten Boost libraries are already included in the <a href=\n  \"http://www.open-std.org/jtc1/sc22/wg21/\">C++ Standards Committee's</a>\n  Library Technical Report (<a href=\n  \"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1745.pdf\">TR1</a>)\n  and will be included in the upcoming revision of the C++ Standard. More\n  Boost libraries are proposed for the upcoming <a href=\n  \"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1810.html\">TR2</a>.</p>\n\n  <h3>Changes in this release</h3>\n\n  {{#unreleased_lib_count}}\n  <p>\n  {{#is_develop}}This development snapshot{{/is_develop}}\n  {{^is_develop}}Boost {{minor_release}}{{/is_develop}}\n  includes {{unreleased_lib_count}} new\n  {{#unreleased_library_plural}}libraries{{/unreleased_library_plural}}\n  {{^unreleased_library_plural}}library{{/unreleased_library_plural}}\n  ({{#unreleased_libs}}{{#index}}, {{/index}}<a href=\"{{link}}\">{{name}}</a>{{/unreleased_libs}})\n  as well as updates to many existing libraries.\n  {{/unreleased_lib_count}}\n  {{^unreleased_lib_count}}\n  <p>The release includes updates to many existing libraries.\n  {{/unreleased_lib_count}}\n  See\n  <a href=\"{{release_notes_url}}\">Release\n  History</a> for more information.</p>\n\n  <h3>Getting Started</h3>\n\n  <p>If Boost hasn't already been installed on your system, follow the\n  <a href=\"more/getting_started/index.html\">Getting Started Guide</a> to\n  complete the installation. But if you've reached to this point by\n  installing Boost from a Windows pre-build executable or a pre-built Linux\n  and Unix distribution package, that's already been completed. Likewise, if\n  you're reading this on your organization's internal web server, the\n  installation is probably already complete.</p>\n\n  <h3>Contents</h3>\n\n  <p>The release directory tree contains almost all of Boost; documentation,\n  sources, headers, scripts, tools, and everything else a Boost user might\n  need!</p>\n\n  <h3>Library Documentation</h3>\n\n  <p>The starting point for the documentation of individual libraries is the\n  <a href=\"libs/libraries.htm\">Libraries page</a>, which gives a brief\n  description of each library and links to its documentation.</p>\n\n  <h3>Web Site</h3>\n\n  <p>Some general interest or often changing Boost information lives only on\n  the <a href=\"http://www.boost.org\">Boost web site</a>. The release contains\n  links to the site, so while browsing it you'll see occasional broken links\n  if you aren't connected to the Internet. But everything needed to use the\n  Boost libraries is contained within the release.</p>\n\n  <h3>Background</h3>\n\n  <p>Read the <a href=\"http://www.boost.org/users/\">introductory material</a>\n  to help you understand what Boost is about and to help in educating your\n  organization about Boost.</p>\n\n  <h3>Community</h3>\n\n  <p>Boost welcomes and thrives on participation from a variety of\n  individuals and organizations. Many avenues for participation are available\n  in the <a href=\"http://www.boost.org/community/\">Boost Community</a>.</p>\n\n  <div class=\"copyright-footer\">\n    <p>Copyright &copy; 2008 Beman Dawes, Rene Rivera</p>\n\n    <p>Distributed under the Boost Software License, Version 1.0. (See\n    accompanying file <a href=\"LICENSE_1_0.txt\">LICENSE_1_0.txt</a> or copy\n    at <a href=\n    \"http://www.boost.org/LICENSE_1_0.txt\">http://www.boost.org/LICENSE_1_0.txt</a>)</p>\n\n    <p>This software is <a href=\"http://www.opensource.org/\">Open Source\n    Initiative</a> approved Open Source Software.</p>\n\n    <p>Open Source Initiative Approved is a trademark of the Open Source\n    Initiative.</p>\n  </div>\n</body>\n</html>\n"
        },
        {
          "name": "libs",
          "type": "tree",
          "content": null
        },
        {
          "name": "more",
          "type": "commit",
          "content": null
        },
        {
          "name": "rst.css",
          "type": "blob",
          "size": 2.546875,
          "content": "@import url(\"doc/src/boostbook.css\");\n@import url(\"doc/src/docutils.css\");\n/* Copyright David Abrahams 2006. Distributed under the Boost\n   Software License, Version 1.0. (See accompanying\n   file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n */\n\ndl.docutils dt {\n  font-weight: bold }\n\nimg.boost-logo {\n  border: none;\n  vertical-align: middle\n}\n\npre.literal-block span.concept {\n  font-style: italic;\n}\n\n.nav { \ndisplay: inline;\nlist-style-type: none;\n}\n\n.prevpage {\npadding-top: -5px;\ntext-align: left;\nfloat: left;\n}\n\n.nextpage {\npadding-top: -20px;\ntext-align: right;\nfloat: right;\n}\n\ndiv.small {\n   font-size: smaller }\n\nh2 a { \n   font-size: 90%; \n}\nh3 a { \n   font-size: 80%; \n}\nh4 a { \n   font-size: 70%; \n}\nh5 a { \n   font-size: 60%; \n}\n\ndl,table\n{\n   text-align: left;\n   font-size: 10pt; \n   line-height: 1.15;\n}\n\n\n/*=============================================================================\n    Tables\n=============================================================================*/\n\n/* The only clue docutils gives us that tables are logically tables,\n   and not, e.g., footnotes, is that they have border=\"1\".  Therefore\n   we're keying off of that.  We used to manually patch docutils to\n   add a \"table\" class to all logical tables, but that proved much too\n   fragile.\n*/\n\n    table[border=\"1\"]\n    {\n        width: 92%;\n        margin-left: 4%;\n        margin-right: 4%;\n    }\n    \n    table[border=\"1\"]\n    {\n        padding: 4px;\n    }\n    \n    /* Table Cells */\n    table[border=\"1\"] tr td\n    {\n        padding: 0.5em;\n        text-align: left;\n        font-size: 9pt;\n    }\n\n    table[border=\"1\"] tr th\n    {\n        padding: 0.5em 0.5em 0.5em 0.5em;\n        border: 1pt solid white;\n        font-size: 80%;\n    }\n\n    @media screen\n    {\n    \n    /* Tables */\n        table[border=\"1\"] tr td\n        {\n            border: 1px solid #DCDCDC;\n        }\n    \n        table[border=\"1\"] tr th\n        {\n            background-color: #F0F0F0;\n            border: 1px solid #DCDCDC;\n        }\n\n        pre, \n        .screen\n        {\n            border: 1px solid #DCDCDC;\n        }\n    \n        td pre\n        td .screen\n        {\n            border: 0px\n        }\n    \n        .sidebar pre\n        {\n            border: 0px\n        }\n    \n    }\n\n    pre, \n    .screen\n    {\n        font-size: 9pt;\n        display: block;\n        margin: 1pc 4% 0pc 4%;\n        padding: 0.5pc 0.5pc 0.5pc 0.5pc;\n    }\n\n    /* Program listings in tables don't get borders */\n    td pre, \n    td .screen\n    {\n        margin: 0pc 0pc 0pc 0pc;\n        padding:  0pc 0pc 0pc 0pc;\n    }\n\n"
        },
        {
          "name": "status",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}