{
  "metadata": {
    "timestamp": 1736709564025,
    "page": 98,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "me115/linuxtools_rst",
      "stars": 5906,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.4716796875,
          "content": "# Auto detect text files and perform LF normalization\n* text=auto\n\n# Custom for Visual Studio\n*.cs     diff=csharp\n*.sln    merge=union\n*.csproj merge=union\n*.vbproj merge=union\n*.fsproj merge=union\n*.dbproj merge=union\n\n# Standard to msysgit\n*.doc\t diff=astextplain\n*.DOC\t diff=astextplain\n*.docx diff=astextplain\n*.DOCX diff=astextplain\n*.dot  diff=astextplain\n*.DOT  diff=astextplain\n*.pdf  diff=astextplain\n*.PDF\t diff=astextplain\n*.rtf\t diff=astextplain\n*.RTF\t diff=astextplain\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.58984375,
          "content": "#################\n## Eclipse\n#################\n\n_build/\n\n*.pydevproject\n.project\n.metadata\nbin/\ntmp/\n*.tmp\n*.bak\n*.swp\n*~.nib\nlocal.properties\n.classpath\n.settings/\n.loadpath\n\n# External tool builders\n.externalToolBuilders/\n\n# Locally stored \"Eclipse launch configurations\"\n*.launch\n\n# CDT-specific\n.cproject\n\n# PDT-specific\n.buildpath\n\n\n#################\n## Visual Studio\n#################\n\n## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.sln.docstates\n\n# Build results\n\n[Dd]ebug/\n[Rr]elease/\nx64/\nbuild/\n[Bb]in/\n[Oo]bj/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n*_i.c\n*_p.c\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.log\n*.scc\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n*.cachefile\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n*.ncrunch*\n.*crunch*.local.xml\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.Publish.xml\n*.pubxml\n\n# NuGet Packages Directory\n## TODO: If you have NuGet Package Restore enabled, uncomment the next line\n#packages/\n\n# Windows Azure Build Output\ncsx\n*.build.csdef\n\n# Windows Store app package directory\nAppPackages/\n\n# Others\nsql/\n*.Cache\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*~\n*.dbmdl\n*.[Pp]ublish.xml\n*.pfx\n*.publishsettings\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file to a newer\n# Visual Studio version. Backup files are not needed, because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\nApp_Data/*.mdf\nApp_Data/*.ldf\n\n#############\n## Windows detritus\n#############\n\n# Windows image file caches\nThumbs.db\nehthumbs.db\n\n# Folder config file\nDesktop.ini\n\n# Recycle Bin used on file shares\n$RECYCLE.BIN/\n\n# Mac crap\n.DS_Store\n\n\n#############\n## Python\n#############\n\n*.py[co]\n\n# Packages\n*.egg\n*.egg-info\ndist/\nbuild/\neggs/\nparts/\nvar/\nsdist/\ndevelop-eggs/\n.installed.cfg\n\n# Installer logs\npip-log.txt\n\n# Unit test / coverage reports\n.coverage\n.tox\n\n#Translations\n*.mo\n\n#Mr Developer\n.mr.developer.cfg\n"
        },
        {
          "name": "020-file-manage.md",
          "type": "blob",
          "size": 4.8515625,
          "content": "# 文件及目录管理 \n文件管理不外乎文件或目录的创建、删除、查询、移动，有mkdir/rm/mv\n\n文件查询是重点，用find来进行查询；find的参数丰富，也非常强大；\n\n查看文件内容是个大的话题，文本的处理有太多的工具供我们使用，在本章中只是点到即止，后面会有专门的一章来介绍文本的处理工具；\n\n有时候，需要给文件创建一个别名，我们需要用到ln，使用这个别名和使用原文件是相同的效果；\n\n## 创建和删除\n创建：mkdir  \n删除：rm   删除非空目录：rm -rf file目录  \n删除日志  \n$rm *log    \n\n等价: $find ./ -name \"*log\" -exec rm {} \\;  \n\n查看当前目录下文件个数  \n$find ./ | wc -l  \n移动：mv    \n复制：cp   复制目录：cp -r  \neg：$cp -r source_dir  dest_dir  \n\n## 目录切换  \n找到文件/目录位置：cd  \n切换到上一个工作目录： cd -  \n切换到home目录： cd  or  cd ~  \n$pwd  \n显示当前路径  \n$cd path  \n更改当前工作路径为path  \n\n## 列出目录项\n显示当前目录下的文件 ls  \n按时间排序，以列表的方式显示目录项 ls -lrt  \n以上这个命令用到的频率如此之高，以至于我们需要为它建立一个快捷命令方式:  \n在.bashrc 中设置命令别名：  \nalias lsl='ls -lrt'  \nalias lm='ls -al|more'  \n这样，使用lsl，就可以显示目录中的文件按照修改时间排序；以列表方式显示；  \n注：.bashrc 在/home/你的用户名/ 文件夹下，以隐藏文件的方式存储；可使用 ls -a 查看；  \n\n## 查找目录及文件 find/locate  \n搜寻文件或目录：   \n$find ./ -name \"core*\" | xargs file  \n查找目标文件夹中是否有obj文件：  \n$find ./ -name '*.o'    \n递归当前目录及子目录删除所有.o文件：  \n$find ./ -name \"*.o\" -exec rm {} \\;  \n\nfind是实时查找，如果需要更快的查询，可试试locate；locate会为文件系统建立索引数据库，如果有文件更新，需要定期执行更新命令来更新索引库；  \n$locate string   \n寻找包含有string的路径  \n$updatedb  \n与find不同，locate并不是实时查找。你需要更新数据库，以获得最新的文件索引信息。  \n\n## 查看文件内容\n查看文件：cat vi head tail more  \n$cat -n：显示时同时显示行号  \n$ls -al |more:一页一页显示列表内容；  \n$head - 10 **:只看前10行  \n$head -1 filename 显示文件第一行  \n$tail -5 filename 显示文件倒数第五行  \n$diff file1 file2 查看两个文件间的差别  \n$tail -f crawler.log 动态显示文本最新信息  \n\n## 查找文件内容\negrep '03.1\\/CO\\/AE' TSF_STAT_111130.log.012  \negrep 'A_LSHA777:C' TSF_STAT_111130.log.035 > co.out2  \nco.out35:  egrep 'A_LSHA777:C' TSF_STAT_111130.log.035 > co.out35  \n\n## 文件与目录权限修改\nchown：改变文件的拥有者  \nchmod：改变文件读、写、执行等属性  \n递归子目录修改： chown -R tuxapp source/  \n增加脚本可执行权限： chmod a+x  myscript  \n\n\n## 给文件增加别名\n创建符号链接/硬链接：  \nln cc ccAgain :硬连接；删除一个，将仍能找到；  \nln -s cc ccTo :符号链接(软链接)；删除源，另一个无法使用；（后面一个ccTo 为新建的文件）  \n\n\n## 管道和重定向\n批处理命令连接执行：  \n串联: 使用分号 ;  \n前面成功，则执行后面一条，否则，不执行:&&  \n前面失败，则后一条执行:    ||  \neg：  \nls /proc && echo  suss! || echo failed.  \n能够提示命名是否执行成功or失败；  \n与上述相同效果的是：  \nif ls /proc; then echo suss; else echo fail; fi  \n重定向：  \nls  proc/*.c > list > &l 将结果输出到list，将错误输出到同一个文件末尾；  \n等价的是：ls  proc/*.c &> list  \nls list1 list2：可同时列出多个文件；  \n \n清空文件：   :> a.txt  \n重定向：最佳文本：  echo  aa >> a.txt  \n\n## 设置环境变量\n启动帐号后自动执行的是 文件为 .profile，然后通过这个文件可设置自己的环境变量；  \n安装的软件路径一般需要加入到path中：  \nPATH=$APPDIR:/opt/app/soft/bin:$PATH:/usr/local/bin:$TUXDIR/bin:$ORACLE_HOME/bin;export PATH  \n\n## Bash快捷输入或删除\n快捷键：  \n Ctl-U   删除光标到行首的所有字符,在某些设置下,删除全行  \n Ctl-W   删除当前光标到前边的最近一个空格之间的字符  \n Ctl-H   backspace,删除光标前边的字符  \n Ctl-R： 匹配最相近的一个文件，然后输出  \n\n## 综合应用\ncat -v record.log | grep AAA |grep -v BBB |wc -l  \n查找record.log中包含AAA，但不包含BBB的记录的总数  \n\n## 总结\n文件管理，目录的创建、删除、查询、管理: mkdir rm mv   \n文件的查询和检索: find locate  \n查看文件内容：cat vi tail more   \n管道和重定向: ; | &&  >  \n\n\n\nPosted by: 大CC | 26MAY,2014\n博客：[blog.me115.com](http://blog.me115.com)\n微博：[新浪微博](http://weibo.com/bigcc115)"
        },
        {
          "name": "020-file-manage.rst",
          "type": "blob",
          "size": 4.9716796875,
          "content": "文件及目录管理\n==========================\n文件管理不外乎文件或目录的创建、删除、查询、移动，有mkdir/rm/mv\n\n文件查询是重点，用find来进行查询；find的参数丰富，也非常强大；\n\n查看文件内容是个大的话题，文本的处理有太多的工具供我们使用，在本章中只是点到即止，后面会有专门的一章来介绍文本的处理工具；\n\n有时候，需要给文件创建一个别名，我们需要用到ln，使用这个别名和使用原文件是相同的效果；\n\n创建和删除\n--------------------\n创建：mkdir\n删除：rm   删除非空目录：rm -rf file目录\n删除日志\n$rm *log\n\n等价: $find ./ -name \"*log\" -exec rm {} \\;\n\n查看当前目录下文件个数\n$find ./ | wc -l\n移动：mv\n复制：cp   复制目录：cp -r\neg：$cp -r source_dir  dest_dir\n\n目录切换\n-------------------\n找到文件/目录位置：cd\n切换到上一个工作目录： cd -\n切换到home目录： cd  or  cd ~\n$pwd\n显示当前路径\n$cd path\n更改当前工作路径为path\n\n列出目录项\n--------------------\n显示当前目录下的文件 ls\n按时间排序，以列表的方式显示目录项 ls -lrt\n以上这个命令用到的频率如此之高，以至于我们需要为它建立一个快捷命令方式:\n在.bashrc 中设置命令别名：\nalias lsl='ls -lrt'\nalias lm='ls -al|more'\n这样，使用lsl，就可以显示目录中的文件按照修改时间排序；以列表方式显示；\n注：.bashrc 在/home/你的用户名/ 文件夹下，以隐藏文件的方式存储；可使用 ls -a 查看；\n\n查找目录及文件 find/locate\n----------------------------------------\n搜寻文件或目录：\n$find ./ -name \"core*\" | xargs file\n查找目标文件夹中是否有obj文件：\n$find ./ -name '*.o'\n递归当前目录及子目录删除所有.o文件：\n$find ./ -name \"*.o\" -exec rm {} \\;\n\nfind是实时查找，如果需要更快的查询，可试试locate；locate会为文件系统建立索引数据库，如果有文件更新，需要定期执行更新命令来更新索引库；\n$locate string\n寻找包含有string的路径\n$updatedb\n与find不同，locate并不是实时查找。你需要更新数据库，以获得最新的文件索引信息。\n\n查看文件内容\n-----------------------\n查看文件：cat vi head tail more\n$cat -n：显示时同时显示行号\n$ls -al |more:一页一页显示列表内容；\n$head - 10 **:只看前10行\n$head -1 filename 显示文件第一行\n$tail -5 filename 显示文件倒数第五行\n$diff file1 file2 查看两个文件间的差别\n$tail -f crawler.log 动态显示文本最新信息\n\n查找文件内容\n-----------------------\negrep '03.1\\/CO\\/AE' TSF_STAT_111130.log.012\negrep 'A_LSHA777:C' TSF_STAT_111130.log.035 > co.out2\nco.out35:  egrep 'A_LSHA777:C' TSF_STAT_111130.log.035 > co.out35\n\n文件与目录权限修改\n--------------------------------\nchown：改变文件的拥有者\nchmod：改变文件读、写、执行等属性\n递归子目录修改： chown -R tuxapp source/\n增加脚本可执行权限： chmod a+x  myscript\n\n\n给文件增加别名\n--------------------------\n创建符号链接/硬链接：\nln cc ccAgain :硬连接；删除一个，将仍能找到；\nln -s cc ccTo :符号链接(软链接)；删除源，另一个无法使用；（后面一个ccTo 为新建的文件）\n\n\n管道和重定向\n-----------------------\n批处理命令连接执行：\n串联: 使用分号 ;\n前面成功，则执行后面一条，否则，不执行:&&\n前面失败，则后一条执行:    ||\neg：\nls /proc && echo  suss! || echo failed.\n能够提示命名是否执行成功or失败；\n与上述相同效果的是：\nif ls /proc; then echo suss; else echo fail; fi\n重定向：\nls  proc/*.c > list > &l 将结果输出到list，将错误输出到同一个文件末尾；\n等价的是：ls  proc/*.c &> list\nls list1 list2：可同时列出多个文件；\n\n清空文件：   :> a.txt\n重定向：最佳文本：  echo  aa >> a.txt\n\n设置环境变量\n-----------------------\n启动帐号后自动执行的是 文件为 .profile，然后通过这个文件可设置自己的环境变量；\n安装的软件路径一般需要加入到path中：\nPATH=$APPDIR:/opt/app/soft/bin:$PATH:/usr/local/bin:$TUXDIR/bin:$ORACLE_HOME/bin;export PATH\n\nBash快捷输入或删除\n------------------------------\n快捷键：\nCtl-U   删除光标到行首的所有字符,在某些设置下,删除全行\nCtl-W   删除当前光标到前边的最近一个空格之间的字符\nCtl-H   backspace,删除光标前边的字符\nCtl-R： 匹配最相近的一个文件，然后输出\n\n综合应用\n-----------------\ncat -v record.log | grep AAA | grep -v BBB | wc -l\n查找record.log中包含AAA，但不包含BBB的记录的总数\n\n总结\n-----------\n文件管理，目录的创建、删除、查询、管理: mkdir rm mv\n文件的查询和检索: find locate\n查看文件内容：cat vi tail more\n管道和重定向: ; | &&  >\n\n\n\nPosted by: 大CC | 26MAY,2014\n博客：[blog.me115.com](http://blog.me115.com)\n微博：[新浪微博](http://weibo.com/bigcc115)\n"
        },
        {
          "name": "LinuxTools.epub",
          "type": "blob",
          "size": 927.71875,
          "content": null
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 6.619140625,
          "content": "# Makefile for Sphinx documentation\n#\n\n# You can set these variables from the command line.\nSPHINXOPTS    =\nSPHINXBUILD   = sphinx-build\nPAPER         =\nBUILDDIR      = _build\n\n# User-friendly check for sphinx-build\nifeq ($(shell which $(SPHINXBUILD) >/dev/null 2>&1; echo $$?), 1)\n$(error The '$(SPHINXBUILD)' command was not found. Make sure you have Sphinx installed, then set the SPHINXBUILD environment variable to point to the full path of the '$(SPHINXBUILD)' executable. Alternatively you can add the directory with the executable to your PATH. If you don't have Sphinx installed, grab it from http://sphinx-doc.org/)\nendif\n\n# Internal variables.\nPAPEROPT_a4     = -D latex_paper_size=a4\nPAPEROPT_letter = -D latex_paper_size=letter\nALLSPHINXOPTS   = -d $(BUILDDIR)/doctrees $(PAPEROPT_$(PAPER)) $(SPHINXOPTS) .\n# the i18n builder cannot share the environment and doctrees with the others\nI18NSPHINXOPTS  = $(PAPEROPT_$(PAPER)) $(SPHINXOPTS) .\n\n.PHONY: help clean html dirhtml singlehtml pickle json htmlhelp qthelp devhelp epub latex latexpdf text man changes linkcheck doctest gettext\n\nhelp:\n\t@echo \"Please use \\`make <target>' where <target> is one of\"\n\t@echo \"  html       to make standalone HTML files\"\n\t@echo \"  dirhtml    to make HTML files named index.html in directories\"\n\t@echo \"  singlehtml to make a single large HTML file\"\n\t@echo \"  pickle     to make pickle files\"\n\t@echo \"  json       to make JSON files\"\n\t@echo \"  htmlhelp   to make HTML files and a HTML help project\"\n\t@echo \"  qthelp     to make HTML files and a qthelp project\"\n\t@echo \"  devhelp    to make HTML files and a Devhelp project\"\n\t@echo \"  epub       to make an epub\"\n\t@echo \"  latex      to make LaTeX files, you can set PAPER=a4 or PAPER=letter\"\n\t@echo \"  latexpdf   to make LaTeX files and run them through pdflatex\"\n\t@echo \"  latexpdfja to make LaTeX files and run them through platex/dvipdfmx\"\n\t@echo \"  text       to make text files\"\n\t@echo \"  man        to make manual pages\"\n\t@echo \"  texinfo    to make Texinfo files\"\n\t@echo \"  info       to make Texinfo files and run them through makeinfo\"\n\t@echo \"  gettext    to make PO message catalogs\"\n\t@echo \"  changes    to make an overview of all changed/added/deprecated items\"\n\t@echo \"  xml        to make Docutils-native XML files\"\n\t@echo \"  pseudoxml  to make pseudoxml-XML files for display purposes\"\n\t@echo \"  linkcheck  to check all external links for integrity\"\n\t@echo \"  doctest    to run all doctests embedded in the documentation (if enabled)\"\n\nclean:\n\trm -rf $(BUILDDIR)/*\n\nhtml:\n\t$(SPHINXBUILD) -b html $(ALLSPHINXOPTS) $(BUILDDIR)/html\n\t@echo\n\t@echo \"Build finished. The HTML pages are in $(BUILDDIR)/html.\"\n\ndirhtml:\n\t$(SPHINXBUILD) -b dirhtml $(ALLSPHINXOPTS) $(BUILDDIR)/dirhtml\n\t@echo\n\t@echo \"Build finished. The HTML pages are in $(BUILDDIR)/dirhtml.\"\n\nsinglehtml:\n\t$(SPHINXBUILD) -b singlehtml $(ALLSPHINXOPTS) $(BUILDDIR)/singlehtml\n\t@echo\n\t@echo \"Build finished. The HTML page is in $(BUILDDIR)/singlehtml.\"\n\npickle:\n\t$(SPHINXBUILD) -b pickle $(ALLSPHINXOPTS) $(BUILDDIR)/pickle\n\t@echo\n\t@echo \"Build finished; now you can process the pickle files.\"\n\njson:\n\t$(SPHINXBUILD) -b json $(ALLSPHINXOPTS) $(BUILDDIR)/json\n\t@echo\n\t@echo \"Build finished; now you can process the JSON files.\"\n\nhtmlhelp:\n\t$(SPHINXBUILD) -b htmlhelp $(ALLSPHINXOPTS) $(BUILDDIR)/htmlhelp\n\t@echo\n\t@echo \"Build finished; now you can run HTML Help Workshop with the\" \\\n\t      \".hhp project file in $(BUILDDIR)/htmlhelp.\"\n\nqthelp:\n\t$(SPHINXBUILD) -b qthelp $(ALLSPHINXOPTS) $(BUILDDIR)/qthelp\n\t@echo\n\t@echo \"Build finished; now you can run \"qcollectiongenerator\" with the\" \\\n\t      \".qhcp project file in $(BUILDDIR)/qthelp, like this:\"\n\t@echo \"# qcollectiongenerator $(BUILDDIR)/qthelp/linuxtools.qhcp\"\n\t@echo \"To view the help file:\"\n\t@echo \"# assistant -collectionFile $(BUILDDIR)/qthelp/linuxtools.qhc\"\n\ndevhelp:\n\t$(SPHINXBUILD) -b devhelp $(ALLSPHINXOPTS) $(BUILDDIR)/devhelp\n\t@echo\n\t@echo \"Build finished.\"\n\t@echo \"To view the help file:\"\n\t@echo \"# mkdir -p $$HOME/.local/share/devhelp/linuxtools\"\n\t@echo \"# ln -s $(BUILDDIR)/devhelp $$HOME/.local/share/devhelp/linuxtools\"\n\t@echo \"# devhelp\"\n\nepub:\n\t$(SPHINXBUILD) -b epub $(ALLSPHINXOPTS) $(BUILDDIR)/epub\n\t@echo\n\t@echo \"Build finished. The epub file is in $(BUILDDIR)/epub.\"\n\nlatex:\n\t$(SPHINXBUILD) -b latex $(ALLSPHINXOPTS) $(BUILDDIR)/latex\n\t@echo\n\t@echo \"Build finished; the LaTeX files are in $(BUILDDIR)/latex.\"\n\t@echo \"Run \\`make' in that directory to run these through (pdf)latex\" \\\n\t      \"(use \\`make latexpdf' here to do that automatically).\"\n\nlatexpdf:\n\t$(SPHINXBUILD) -b latex $(ALLSPHINXOPTS) $(BUILDDIR)/latex\n\t@echo \"Running LaTeX files through pdflatex...\"\n\t$(MAKE) -C $(BUILDDIR)/latex all-pdf\n\t@echo \"pdflatex finished; the PDF files are in $(BUILDDIR)/latex.\"\n\nlatexpdfja:\n\t$(SPHINXBUILD) -b latex $(ALLSPHINXOPTS) $(BUILDDIR)/latex\n\t@echo \"Running LaTeX files through platex and dvipdfmx...\"\n\t$(MAKE) -C $(BUILDDIR)/latex all-pdf-ja\n\t@echo \"pdflatex finished; the PDF files are in $(BUILDDIR)/latex.\"\n\ntext:\n\t$(SPHINXBUILD) -b text $(ALLSPHINXOPTS) $(BUILDDIR)/text\n\t@echo\n\t@echo \"Build finished. The text files are in $(BUILDDIR)/text.\"\n\nman:\n\t$(SPHINXBUILD) -b man $(ALLSPHINXOPTS) $(BUILDDIR)/man\n\t@echo\n\t@echo \"Build finished. The manual pages are in $(BUILDDIR)/man.\"\n\ntexinfo:\n\t$(SPHINXBUILD) -b texinfo $(ALLSPHINXOPTS) $(BUILDDIR)/texinfo\n\t@echo\n\t@echo \"Build finished. The Texinfo files are in $(BUILDDIR)/texinfo.\"\n\t@echo \"Run \\`make' in that directory to run these through makeinfo\" \\\n\t      \"(use \\`make info' here to do that automatically).\"\n\ninfo:\n\t$(SPHINXBUILD) -b texinfo $(ALLSPHINXOPTS) $(BUILDDIR)/texinfo\n\t@echo \"Running Texinfo files through makeinfo...\"\n\tmake -C $(BUILDDIR)/texinfo info\n\t@echo \"makeinfo finished; the Info files are in $(BUILDDIR)/texinfo.\"\n\ngettext:\n\t$(SPHINXBUILD) -b gettext $(I18NSPHINXOPTS) $(BUILDDIR)/locale\n\t@echo\n\t@echo \"Build finished. The message catalogs are in $(BUILDDIR)/locale.\"\n\nchanges:\n\t$(SPHINXBUILD) -b changes $(ALLSPHINXOPTS) $(BUILDDIR)/changes\n\t@echo\n\t@echo \"The overview file is in $(BUILDDIR)/changes.\"\n\nlinkcheck:\n\t$(SPHINXBUILD) -b linkcheck $(ALLSPHINXOPTS) $(BUILDDIR)/linkcheck\n\t@echo\n\t@echo \"Link check complete; look for any errors in the above output \" \\\n\t      \"or in $(BUILDDIR)/linkcheck/output.txt.\"\n\ndoctest:\n\t$(SPHINXBUILD) -b doctest $(ALLSPHINXOPTS) $(BUILDDIR)/doctest\n\t@echo \"Testing of doctests in the sources finished, look at the \" \\\n\t      \"results in $(BUILDDIR)/doctest/output.txt.\"\n\nxml:\n\t$(SPHINXBUILD) -b xml $(ALLSPHINXOPTS) $(BUILDDIR)/xml\n\t@echo\n\t@echo \"Build finished. The XML files are in $(BUILDDIR)/xml.\"\n\npseudoxml:\n\t$(SPHINXBUILD) -b pseudoxml $(ALLSPHINXOPTS) $(BUILDDIR)/pseudoxml\n\t@echo\n\t@echo \"Build finished. The pseudo-XML files are in $(BUILDDIR)/pseudoxml.\"\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.2646484375,
          "content": "# linux_tools\n==============\n\nLinux下有很多命令行工具供我们使用，每个工具总是提供了大量参数供我们选择； 实际工作中，我们用到的工具，最常用的总是那么几个参数组合； 为此，我写了这本书相对实用的书；\n\n这本书专注于Linux工具的最常用用法，以便读者能以最快时间掌握，并在工作中应用；\n\n## 说明\n\n全书分为三个部分：\n\n1. 第一部分为基础篇，介绍我们工作中常用的工具的高频用法；\n2. 第二部分为进阶篇，介绍的工具更多的适合程序员使用，分为程序构建、程序调试及程序优化；\n3. 第三部分是工具参考篇，主要介绍实用工具的用法和实例；相比第一二部分，这里针对每个工具的介绍更全面；\n\n同时，这个教程也可当作Linux命令手册使用，使用左边栏的目录和搜索栏可以很方便的查阅；\n\n## 写作方式\n\n我将会遵循以下写作方式：  \n\n1. 首先介绍工具的使用范围；\n2. 工具的快速上手教程；包含最常用的范例和最常用的选项；\n3. 使用场景（例子）说明；\n4. 更完整的命令参数说明；\n5. 进阶\n\n## 建议\n1. 最好安装一个Linux系统（对于新手Ubuntu容易入门），将教程中的命令敲到bash中看看效果\n2. 如果有兴趣，可以在了解之后立即查看相关更完备的内容 (比如查阅官方文档)\n\n## 写作工具\n本书使用的reStructuredText标记语言，相对Markdown来说，在写书方面更有优势:    \n\n1. 使用Sphinx能够自动生成目录和索引文件，方便查询和检索；\n2. 有大量漂亮的HTML书籍主题模版，可为书籍轻松换肤（类似Wordpress的网站模版）；\n3. 对于参考手册类书籍的编写在语法上更为便利（python官方帮助文档的使用者）；\n\n## 在线阅读\n在线阅读地址：[http://linuxtools-rst.readthedocs.org/zh_CN/latest/](http://linuxtools-rst.readthedocs.org/zh_CN/latest/)\n\n## 版权声明\n本书为开源图书，版权归作者所有；欢迎下载及编辑(个人用途)，但未经作者同意必须保留此段声明，且不可用于商业用途，否则保留追究法律责任的权利。\n\n- 作者：大CC\n- 博客：http://blog.me115.com\n- Github地址：https://github.com/me115/linuxtools_rst\n\n"
        },
        {
          "name": "_build",
          "type": "tree",
          "content": null
        },
        {
          "name": "_static",
          "type": "tree",
          "content": null
        },
        {
          "name": "advance",
          "type": "tree",
          "content": null
        },
        {
          "name": "base",
          "type": "tree",
          "content": null
        },
        {
          "name": "conf.py",
          "type": "blob",
          "size": 10.5576171875,
          "content": "# -*- coding: utf-8 -*-\n#\n# linuxtools documentation build configuration file, created by\n# sphinx-quickstart on Sun Aug 10 18:09:37 2014.\n#\n# This file is execfile()d with the current directory set to its\n# containing dir.\n#\n# Note that not all possible configuration values are present in this\n# autogenerated file.\n#\n# All configuration values have a default; values that are commented out\n# serve to show the default.\n\nimport sys\nimport os\n# import sphinx_rtd_theme\n\n# If extensions (or modules to document with autodoc) are in another directory,\n# add these directories to sys.path here. If the directory is relative to the\n# documentation root, use os.path.abspath to make it absolute, like shown here.\n#sys.path.insert(0, os.path.abspath('.'))\n\n# -- General configuration ------------------------------------------------\n\n# If your documentation needs a minimal Sphinx version, state it here.\n#needs_sphinx = '1.0'\n\n# Add any Sphinx extension module names here, as strings. They can be\n# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom\n# ones.\nextensions = [\n    'sphinx.ext.intersphinx',\n    'sphinx.ext.todo',\n    'sphinx.ext.ifconfig',\n]\n\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = ['_templates']\n\n# The suffix of source filenames.\nsource_suffix = '.rst'\n\n# The encoding of source files.\n#source_encoding = 'utf-8-sig'\n\n# The master toctree document.\nmaster_doc = 'index'\n\n# General information about the project.\nproject = u'Linux Tools Quick Tutorial'\ncopyright = u'2014, Colin http://blog.me115.com'\n\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#\n# The short X.Y version.\nversion = '0.1'\n# The full version, including alpha/beta/rc tags.\nrelease = '0.1'\n\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n#language = None\n\n# There are two options for replacing |today|: either, you set today to some\n# non-false value, then it is used:\n#today = ''\n# Else, today_fmt is used as the format for a strftime call.\n#today_fmt = '%B %d, %Y'\n\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\nexclude_patterns = ['_build']\n\n# The reST default role (used for this markup: `text`) to use for all\n# documents.\n#default_role = None\n\n# If true, '()' will be appended to :func: etc. cross-reference text.\n#add_function_parentheses = True\n\n# If true, the current module name will be prepended to all description\n# unit titles (such as .. function::).\n#add_module_names = True\n\n# If true, sectionauthor and moduleauthor directives will be shown in the\n# output. They are ignored by default.\n#show_authors = False\n\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = 'sphinx'\n\n# A list of ignored prefixes for module index sorting.\n#modindex_common_prefix = []\n\n# If true, keep warnings as \"system message\" paragraphs in the built documents.\n#keep_warnings = False\n\n\n# -- Options for HTML output ----------------------------------------------\n\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\n# html_theme = 'default'\n# html_theme = 'der'\nhtml_theme = 'sphinx_rtd_theme'\n\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.\n#html_theme_options = {}\n\n# Add any paths that contain custom themes here, relative to this directory.\nhtml_theme_path = ['.']  \n# html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]\n\n# The name for this set of Sphinx documents.  If None, it defaults to\n# \"<project> v<release> documentation\".\nhtml_title = u\"Linux Tools Quick Tutorial\"\n\n# A shorter title for the navigation bar.  Default is the same as html_title.\n#html_short_title = None\n\n# The name of an image file (relative to this directory) to place at the top\n# of the sidebar.\n#html_logo = None\n\n# The name of an image file (within the static path) to use as favicon of the\n# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n# pixels large.\n#html_favicon = None\n\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n# so a file named \"default.css\" will overwrite the builtin \"default.css\".\nhtml_static_path = ['_static']\n\n# Add any extra paths that contain custom files (such as robots.txt or\n# .htaccess) here, relative to this directory. These files are copied\n# directly to the root of the documentation.\n#html_extra_path = []\n\n# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,\n# using the given strftime format.\n#html_last_updated_fmt = '%b %d, %Y'\n\n# If true, SmartyPants will be used to convert quotes and dashes to\n# typographically correct entities.\n#html_use_smartypants = True\n\n# Custom sidebar templates, maps document names to template names.\n#html_sidebars = {}\n\n# Additional templates that should be rendered to pages, maps page names to\n# template names.\n#html_additional_pages = {}\n\n# If false, no module index is generated.\n#html_domain_indices = True\n\n# If false, no index is generated.\n#html_use_index = True\n\n# If true, the index is split into individual pages for each letter.\n#html_split_index = False\n\n# If true, links to the reST sources are added to the pages.\n#html_show_sourcelink = True\n\n# If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.\n#html_show_sphinx = True\n\n# If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.\n#html_show_copyright = True\n\n# If true, an OpenSearch description file will be output, and all pages will\n# contain a <link> tag referring to it.  The value of this option must be the\n# base URL from which the finished HTML is served.\n#html_use_opensearch = ''\n\n# This is the file name suffix for HTML files (e.g. \".xhtml\").\n#html_file_suffix = None\n\n# Output file base name for HTML help builder.\nhtmlhelp_basename = 'Linux Tools Quick Tutorial'\n\n\n# -- Options for LaTeX output ---------------------------------------------\n\nlatex_elements = {\n# The paper size ('letterpaper' or 'a4paper').\n#'papersize': 'letterpaper',\n\n# The font size ('10pt', '11pt' or '12pt').\n#'pointsize': '10pt',\n\n# Additional stuff for the LaTeX preamble.\n#'preamble': '',\n}\n\n# Grouping the document tree into LaTeX files. List of tuples\n# (source start file, target name, title,\n#  author, documentclass [howto, manual, or own class]).\nlatex_documents = [\n  ('index', 'linuxtools.tex', u'linuxtools Documentation',\n   u'colin', 'manual'),\n]\n\n# The name of an image file (relative to this directory) to place at the top of\n# the title page.\n#latex_logo = None\n\n# For \"manual\" documents, if this is true, then toplevel headings are parts,\n# not chapters.\n#latex_use_parts = False\n\n# If true, show page references after internal links.\n#latex_show_pagerefs = False\n\n# If true, show URL addresses after external links.\n#latex_show_urls = False\n\n# Documents to append as an appendix to all manuals.\n#latex_appendices = []\n\n# If false, no module index is generated.\n#latex_domain_indices = True\n\n\n# -- Options for manual page output ---------------------------------------\n\n# One entry per manual page. List of tuples\n# (source start file, name, description, authors, manual section).\nman_pages = [\n    ('index', 'Linux Tools', u'linuxtools Documentation',\n     [u'colin'], 1)\n]\n\n# If true, show URL addresses after external links.\n#man_show_urls = False\n\n\n# -- Options for Texinfo output -------------------------------------------\n\n# Grouping the document tree into Texinfo files. List of tuples\n# (source start file, target name, title, author,\n#  dir menu entry, description, category)\ntexinfo_documents = [\n  ('index', 'Linux Tools', u'linuxtools Documentation',\n   u'colin', 'Linux Tools', 'One line description of project.',\n   'Miscellaneous'),\n]\n\n# Documents to append as an appendix to all manuals.\n#texinfo_appendices = []\n\n# If false, no module index is generated.\n#texinfo_domain_indices = True\n\n# How to display URL addresses: 'footnote', 'no', or 'inline'.\n#texinfo_show_urls = 'footnote'\n\n# If true, do not generate a @detailmenu in the \"Top\" node's menu.\n#texinfo_no_detailmenu = False\n\n\n# -- Options for Epub output ----------------------------------------------\n\n# Bibliographic Dublin Core info.\nepub_title = u'Linux Tools'\nepub_author = u'Colin'\nepub_publisher = u'Colin'\nepub_copyright = u'2014, Colin'\n#epub_title = u'Linux工具快速教程'\n#epub_author = u'大CC'\n#epub_publisher = u'木书架'\n#epub_copyright = u'2015, 木书架出品'\n\n\n# The basename for the epub file. It defaults to the project name.\n#epub_basename = u'linuxtools'\n\n# The HTML theme for the epub output. Since the default themes are not optimized\n# for small screen space, using the same theme for HTML and epub output is\n# usually not wise. This defaults to 'epub', a theme designed to save visual\n# space.\n#epub_theme = 'epub'\n\n# The language of the text. It defaults to the language option\n# or en if the language is not set.\n#epub_language = ''\n\n# The scheme of the identifier. Typical schemes are ISBN or URL.\n#epub_scheme = ''\n\n# The unique identifier of the text. This can be a ISBN number\n# or the project homepage.\n#epub_identifier = ''\n\n# A unique identification for the text.\n#epub_uid = ''\n\n# A tuple containing the cover image and cover page html template filenames.\n#epub_cover = ()\nepub_cover = ('_static/cover_linuxtools.jpg', '')\n\n# A sequence of (type, uri, title) tuples for the guide element of content.opf.\n#epub_guide = ()\n\n# HTML files that should be inserted before the pages created by sphinx.\n# The format is a list of tuples containing the path and title.\n#epub_pre_files = []\n\n# HTML files shat should be inserted after the pages created by sphinx.\n# The format is a list of tuples containing the path and title.\n#epub_post_files = []\n\n# A list of files that should not be packed into the epub file.\nepub_exclude_files = ['search.html']\n\n# The depth of the table of contents in toc.ncx.\n#epub_tocdepth = 3\n\n# Allow duplicate toc entries.\n#epub_tocdup = True\n\n# Choose between 'default' and 'includehidden'.\n#epub_tocscope = 'default'\n\n# Fix unsupported image types using the PIL.\n#epub_fix_images = False\n\n# Scale large images.\n#epub_max_image_width = 0\n\n# How to display URL addresses: 'footnote', 'no', or 'inline'.\n#epub_show_urls = 'inline'\n\n# If false, no index is generated.\n#epub_use_index = True\n\n\n# Example configuration for intersphinx: refer to the Python standard library.\nintersphinx_mapping = {'http://docs.python.org/': None}\n"
        },
        {
          "name": "crontab.md",
          "type": "blob",
          "size": 10.6650390625,
          "content": "## 命令格式\ncrontab [-u user] file\ncrontab [-u user] [ -e | -l | -r ]\n\n## 命令功能\n通过crontab 命令，我们可以在固定的间隔时间执行指定的系统指令或 shell script脚本。时间间隔的单位可以是分钟、小时、日、月、周及以上的任意组合。这个命令非常设合周期性的日志分析或数据备份等工作。\n\n## 命令参数\n-u user：用来设定某个用户的crontab服务，例如，“-u ixdba”表示设定ixdba用户的crontab服务，此参数一般有root用户来运行。\nfile：file是命令文件的名字,表示将file做为crontab的任务列表文件并载入crontab。如果在命令行中没有指定这个文件，crontab命令将接受标准输入（键盘）上键入的命令，并将它们载入crontab。\n-e：编辑某个用户的crontab文件内容。如果不指定用户，则表示编辑当前用户的crontab文件。\n-l：显示某个用户的crontab文件内容，如果不指定用户，则表示显示当前用户的crontab文件内容。\n-r：从/var/spool/cron目录中删除某个用户的crontab文件，如果不指定用户，则默认删除当前用户的crontab文件。\n-i：在删除用户的crontab文件时给确认提示。\n\n## 文件格式\n下面是crontab的格式：\n分 时 日 月 星期 要运行的命令\n\n第1列分钟1～59\n第2列小时1～23（0表示子夜）\n第3列日1～31\n第4列月1～12\n第5列星期0～6（0表示星期天）\n第6列要运行的命令\n\n\n## 常用方法\n### 创建一个新的crontab文件\n在考虑向cron进程提交一个crontab文件之前，首先要做的一件事情就是设置环境变量EDITOR。cron进程根据它来确定使用哪个编辑器编辑crontab文件。9 9 %的UNIX和LINUX用户都使用vi，如果你也是这样，那么你就编辑$ HOME目录下的. profile文件，在其中加入这样一行：\nEDITOR=vi; export EDITOR\n然后保存并退出。不妨创建一个名为<user> cron的文件，其中<user>是用户名，例如， davecron。在该文件中加入如下的内容。\n```\n# (put your own initials here)echo the date to the console every\n# 15minutes between 6pm and 6am\n0,15,30,45 18-06 * * * /bin/echo 'date' > /dev/console\n```\n保存并退出。确信前面5个域用空格分隔。\n在上面的例子中，系统将每隔1 5分钟向控制台输出一次当前时间。如果系统崩溃或挂起，从最后所显示的时间就可以一眼看出系统是什么时间停止工作的。在有些系统中，用tty1来表示控制台，可以根据实际情况对上面的例子进行相应的修改。为了提交你刚刚创建的crontab文件，可以把这个新创建的文件作为cron命令的参数：\n$ crontab davecron\n现在该文件已经提交给cron进程，它将每隔1 5分钟运行一次。\n同时，新创建文件的一个副本已经被放在/var/spool/cron目录中，文件名就是用户名(即dave)。\n\n### 列出crontab文件\n为了列出crontab文件，可以用：\n    \t$ crontab -l\n    \t0,15,30,45,18-06 * * * /bin/echo `date` > dev/tty1\n你将会看到和上面类似的内容。可以使用这种方法在$ H O M E目录中对crontab文件做一备份：\n    \t$ crontab -l > $HOME/mycron\n    这样，一旦不小心误删了crontab文件，可以用上一节所讲述的方法迅速恢复。\n\n### 编辑crontab文件\n   如果希望添加、删除或编辑crontab文件中的条目，而E D I TO R环境变量又设置为v i，那么就可以用v i来编辑crontab文件，相应的命令为：\n    \t$ crontab -e\n可以像使用v i编辑其他任何文件那样修改crontab文件并退出。如果修改了某些条目或添加了新的条目，那么在保存该文件时， c r o n会对其进行必要的完整性检查。如果其中的某个域出现了超出允许范围的值，它会提示你。\n我们在编辑crontab文件时，没准会加入新的条目。例如，加入下面的一条：\n```\n   \t # DT:delete core files,at 3.30am on 1,7,14,21,26,26 days of each month\n    \t30 3 1,7,14,21,26 * * /bin/find -name 'core' -exec rm {} \\;\n```\n\n现在保存并退出。最好在crontab文件的每一个条目之上加入一条注释，这样就可以知道它的功能、运行时间，更为重要的是，知道这是哪位用户的作业。\n现在让我们使用前面讲过的crontab -l命令列出它的全部信息：\n```\n$ crontab -l \n# (crondave installed on Tue May 4 13:07:43 1999)\n# DT:ech the date to the console every 30 minites\n0,15,30,45 18-06 * * * /bin/echo `date` > /dev/tty1\n# DT:delete core files,at 3.30am on 1,7,14,21,26,26 days of each month\n30 3 1,7,14,21,26 * * /bin/find -name 'core' -exec rm {} \\;\n```\n\n### 删除crontab文件\n要删除crontab文件，可以用：\n   \t $ crontab -r\n\n### 恢复丢失的crontab文件\n如果不小心误删了crontab文件，假设你在自己的$HOME目录下还有一个备份，那么可以将其拷贝到/var/spool/cron/<username>，其中<username>是用户名。如果由于权限问题无法完成拷贝，可以用：\n    \t$ crontab <filename>\n    其中，<filename>是你在$HOME目录中副本的文件名。\n我建议你在自己的$HOME目录中保存一个该文件的副本。我就有过类似的经历，有数次误删了crontab文件（因为r键紧挨在e键的右边）。这就是为什么有些系统文档建议不要直接编辑crontab文件，而是编辑该文件的一个副本，然后重新提交新的文件。\n有些crontab的变体有些怪异，所以在使用crontab命令时要格外小心。如果遗漏了任何选项，crontab可能会打开一个空文件，或者看起来像是个空文件。这时敲delete键退出，不要按<Ctrl-D>，否则你将丢失crontab文件。\n\n## 使用实例\n### 实例1：每1分钟执行一次command\n命令：\n* * * * * command\n\n### 实例2：每小时的第3和第15分钟执行\n命令：\n3,15 * * * * command\n \n### 实例3：在上午8点到11点的第3和第15分钟执行\n命令：\n3,15 8-11 * * * command\n \n### 实例4：每隔两天的上午8点到11点的第3和第15分钟执行\n命令：\n3,15 8-11 */2 * * command\n \n### 实例5：每个星期一的上午8点到11点的第3和第15分钟执行\n命令：\n3,15 8-11 * * 1 command\n \n### 实例6：每晚的21:30重启smb \n命令：\n30 21 * * * /etc/init.d/smb restart\n \n### 实例7：每月1、10、22日的4 : 45重启smb \n命令：\n45 4 1,10,22 * * /etc/init.d/smb restart\n \n### 实例8：每周六、周日的1 : 10重启smb\n命令：\n10 1 * * 6,0 /etc/init.d/smb restart\n \n### 实例9：每天18 : 00至23 : 00之间每隔30分钟重启smb \n命令：\n0,30 18-23 * * * /etc/init.d/smb restart\n \n### 实例10：每星期六的晚上11 : 00 pm重启smb \n命令：\n0 23 * * 6 /etc/init.d/smb restart\n \n### 实例11：每一小时重启smb \n命令：\n* */1 * * * /etc/init.d/smb restart\n \n### 实例12：晚上11点到早上7点之间，每隔一小时重启smb \n命令：\n0 23-7 * * * /etc/init.d/smb restart\n \n### 实例13：每月的4号与每周一到周三的11点重启smb \n命令：\n0 11 4 * mon-wed /etc/init.d/smb restart\n \n### 实例14：一月一号的4点重启smb \n命令：\n0 4 1 jan * /etc/init.d/smb restart\n\n### 实例15：每小时执行/etc/cron.hourly目录内的脚本\n命令：\n01   *   *   *   *     root run-parts /etc/cron.hourly\n说明：\nrun-parts这个参数了，如果去掉这个参数的话，后面就可以写要运行的某个脚本名，而不是目录名了\n\n## 使用注意事项\n### 注意环境变量问题\n有时我们创建了一个crontab，但是这个任务却无法自动执行，而手动执行这个任务却没有问题，这种情况一般是由于在crontab文件中没有配置环境变量引起的。\n在crontab文件中定义多个调度任务时，需要特别注意的一个问题就是环境变量的设置，因为我们手动执行某个任务时，是在当前shell环境下进行的，程序当然能找到环境变量，而系统自动执行任务调度时，是不会加载任何环境变量的，因此，就需要在crontab文件中指定任务运行所需的所有环境变量，这样，系统执行任务调度时就没有问题了。\n不要假定cron知道所需要的特殊环境，它其实并不知道。所以你要保证在shelll脚本中提供所有必要的路径和环境变量，除了一些自动设置的全局变量。所以注意如下3点：\n1）脚本中涉及文件路径时写全局路径；\n2）脚本执行要用到java或其他环境变量时，通过source命令引入环境变量，如：\ncat start_cbp.sh\n#!/bin/sh\nsource /etc/profile\nexport RUN_CONF=/home/d139/conf/platform/cbp/cbp_jboss.conf\n/usr/local/jboss-4.0.5/bin/run.sh -c mev &\n3）当手动执行脚本OK，但是crontab死活不执行时。这时必须大胆怀疑是环境变量惹的祸，并可以尝试在crontab中直接引入环境变量解决问题。如：\n0 * * * * . /etc/profile;/bin/sh /var/www/java/audit_no_count/bin/restart_audit.sh\n\n### 注意清理系统用户的邮件日志\n每条任务调度执行完毕，系统都会将任务输出信息通过电子邮件的形式发送给当前系统用户，这样日积月累，日志信息会非常大，可能会影响系统的正常运行，因此，将每条任务进行重定向处理非常重要。\n例如，可以在crontab文件中设置如下形式，忽略日志输出：\n0 */3 * * * /usr/local/apache2/apachectl restart >/dev/null 2>&1\n“/dev/null 2>&1”表示先将标准输出重定向到/dev/null，然后将标准错误重定向到标准输出，由于标准输出已经重定向到了/dev/null，因此标准错误也会重定向到/dev/null，这样日志输出问题就解决了。\n\n### 系统级任务调度与用户级任务调度\n系统级任务调度主要完成系统的一些维护操作，用户级任务调度主要完成用户自定义的一些任务，可以将用户级任务调度放到系统级任务调度来完成（不建议这么做），但是反过来却不行，root用户的任务调度操作可以通过“crontab –uroot –e”来设置，也可以将调度任务直接写入/etc/crontab文件，需要注意的是，如果要定义一个定时重启系统的任务，就必须将任务放到/etc/crontab文件，即使在root用户下创建一个定时重启系统的任务也是无效的。\n\n### 其他注意事项\n新创建的cron job，不会马上执行，至少要过2分钟才执行。如果重启cron则马上执行。\n当crontab突然失效时，可以尝试/etc/init.d/crond restart解决问题。或者查看日志看某个job有没有执行/报错tail -f /var/log/cron。\n千万别乱运行crontab -r。它从Crontab目录（/var/spool/cron）中删除用户的Crontab文件。删除了该用户的所有crontab都没了。\n在crontab中%是有特殊含义的，表示换行的意思。如果要用的话必须进行转义\\%，如经常用的date ‘+%Y%m%d’在crontab里是不会执行的，应该换成date ‘+\\%Y\\%m\\%d’。\n"
        },
        {
          "name": "crontab.rst",
          "type": "blob",
          "size": 11.798828125,
          "content": "命令格式\n-----------------\ncrontab [-u user] file\ncrontab [-u user] [ -e | -l | -r ]\n\n命令功能\n-----------------\n通过crontab 命令，我们可以在固定的间隔时间执行指定的系统指令或 shell script脚本。时间间隔的单位可以是分钟、小时、日、月、周及以上的任意组合。这个命令非常设合周期性的日志分析或数据备份等工作。\n\n命令参数\n-----------------\n-u user：用来设定某个用户的crontab服务，例如，“-u ixdba”表示设定ixdba用户的crontab服务，此参数一般有root用户来运行。\nfile：file是命令文件的名字,表示将file做为crontab的任务列表文件并载入crontab。如果在命令行中没有指定这个文件，crontab命令将接受标准输入（键盘）上键入的命令，并将它们载入crontab。\n-e：编辑某个用户的crontab文件内容。如果不指定用户，则表示编辑当前用户的crontab文件。\n-l：显示某个用户的crontab文件内容，如果不指定用户，则表示显示当前用户的crontab文件内容。\n-r：从/var/spool/cron目录中删除某个用户的crontab文件，如果不指定用户，则默认删除当前用户的crontab文件。\n-i：在删除用户的crontab文件时给确认提示。\n\n文件格式\n-----------------\n下面是crontab的格式：\n分 时 日 月 星期 要运行的命令\n\n第1列分钟1～59\n第2列小时1～23（0表示子夜）\n第3列日1～31\n第4列月1～12\n第5列星期0～6（0表示星期天）\n第6列要运行的命令\n\n\n常用方法\n-----------------\n创建一个新的crontab文件\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n在考虑向cron进程提交一个crontab文件之前，首先要做的一件事情就是设置环境变量EDITOR。cron进程根据它来确定使用哪个编辑器编辑crontab文件。9 9 %的UNIX和LINUX用户都使用vi，如果你也是这样，那么你就编辑$ HOME目录下的. profile文件，在其中加入这样一行：\nEDITOR=vi; export EDITOR\n然后保存并退出。不妨创建一个名为<user> cron的文件，其中<user>是用户名，例如， davecron。在该文件中加入如下的内容。\n::\n\n\t# (put your own initials here)echo the date to the console every\n\t# 15minutes between 6pm and 6am\n\t0,15,30,45 18-06 * * * /bin/echo 'date' > /dev/console\n\n保存并退出。确信前面5个域用空格分隔。\n在上面的例子中，系统将每隔1 5分钟向控制台输出一次当前时间。如果系统崩溃或挂起，从最后所显示的时间就可以一眼看出系统是什么时间停止工作的。在有些系统中，用tty1来表示控制台，可以根据实际情况对上面的例子进行相应的修改。为了提交你刚刚创建的crontab文件，可以把这个新创建的文件作为cron命令的参数：\n$ crontab davecron\n现在该文件已经提交给cron进程，它将每隔1 5分钟运行一次。\n同时，新创建文件的一个副本已经被放在/var/spool/cron目录中，文件名就是用户名(即dave)。\n\n列出crontab文件\n~~~~~~~~~~~~~~~~~~~~~~~~~\n为了列出crontab文件，可以用：\n$ crontab -l\n0,15,30,45,18-06 * * * /bin/echo `date` > dev/tty1\n你将会看到和上面类似的内容。可以使用这种方法在$ H O M E目录中对crontab文件做一备份：\n$ crontab -l > $HOME/mycron\n这样，一旦不小心误删了crontab文件，可以用上一节所讲述的方法迅速恢复。\n\n编辑crontab文件\n~~~~~~~~~~~~~~~~~~~~~~~~~\n如果希望添加、删除或编辑crontab文件中的条目，而E D I TO R环境变量又设置为v i，那么就可以用v i来编辑crontab文件，相应的命令为：\n$ crontab -e\n可以像使用v i编辑其他任何文件那样修改crontab文件并退出。如果修改了某些条目或添加了新的条目，那么在保存该文件时， c r o n会对其进行必要的完整性检查。如果其中的某个域出现了超出允许范围的值，它会提示你。\n我们在编辑crontab文件时，没准会加入新的条目。例如，加入下面的一条：\n::\n\n\t# DT:delete core files,at 3.30am on 1,7,14,21,26,26 days of each month\n\t30 3 1,7,14,21,26 * * /bin/find -name 'core' -exec rm {} \\;\n\n\n现在保存并退出。最好在crontab文件的每一个条目之上加入一条注释，这样就可以知道它的功能、运行时间，更为重要的是，知道这是哪位用户的作业。\n现在让我们使用前面讲过的crontab -l命令列出它的全部信息：\n::\n\n\t$ crontab -l\n\t# (crondave installed on Tue May 4 13:07:43 1999)\n\t# DT:ech the date to the console every 30 minites\n\t0,15,30,45 18-06 * * * /bin/echo `date` > /dev/tty1\n\t# DT:delete core files,at 3.30am on 1,7,14,21,26,26 days of each month\n\t30 3 1,7,14,21,26 * * /bin/find -name 'core' -exec rm {} \\;\n\n\n删除crontab文件\n~~~~~~~~~~~~~~~~~~~~~~~~~\n要删除crontab文件，可以用：\n$ crontab -r\n\n恢复丢失的crontab文件\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n如果不小心误删了crontab文件，假设你在自己的$HOME目录下还有一个备份，那么可以将其拷贝到/var/spool/cron/<username>，其中<username>是用户名。如果由于权限问题无法完成拷贝，可以用：\n$ crontab <filename>\n其中，<filename>是你在$HOME目录中副本的文件名。\n我建议你在自己的$HOME目录中保存一个该文件的副本。我就有过类似的经历，有数次误删了crontab文件（因为r键紧挨在e键的右边）。这就是为什么有些系统文档建议不要直接编辑crontab文件，而是编辑该文件的一个副本，然后重新提交新的文件。\n有些crontab的变体有些怪异，所以在使用crontab命令时要格外小心。如果遗漏了任何选项，crontab可能会打开一个空文件，或者看起来像是个空文件。这时敲delete键退出，不要按<Ctrl-D>，否则你将丢失crontab文件。\n\n使用实例\n-----------------\n实例1：每1分钟执行一次command\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n命令：\n* * * * * command\n\n实例2：每小时的第3和第15分钟执行\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n命令：\n3,15 * * * * command\n\n实例3：在上午8点到11点的第3和第15分钟执行\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n命令：\n3,15 8-11 * * * command\n\n实例4：每隔两天的上午8点到11点的第3和第15分钟执行\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n命令：\n3,15 8-11 */2 * * command\n\n实例5：每个星期一的上午8点到11点的第3和第15分钟执行\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n命令：\n3,15 8-11 * * 1 command\n\n实例6：每晚的21:30重启smb\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n命令：\n30 21 * * * /etc/init.d/smb restart\n\n实例7：每月1、10、22日的4 : 45重启smb\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n命令：\n45 4 1,10,22 * * /etc/init.d/smb restart\n\n实例8：每周六、周日的1 : 10重启smb\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n命令：\n10 1 * * 6,0 /etc/init.d/smb restart\n\n实例9：每天18 : 00至23 : 00之间每隔30分钟重启smb\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n命令：\n0,30 18-23 * * * /etc/init.d/smb restart\n\n实例10：每星期六的晚上11 : 00 pm重启smb\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n命令：\n0 23 * * 6 /etc/init.d/smb restart\n\n实例11：每一小时重启smb\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n命令：\n* */1 * * * /etc/init.d/smb restart\n\n实例12：晚上11点到早上7点之间，每隔一小时重启smb\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n命令：\n0 23-7 * * * /etc/init.d/smb restart\n\n实例13：每月的4号与每周一到周三的11点重启smb\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n命令：\n0 11 4 * mon-wed /etc/init.d/smb restart\n\n实例14：一月一号的4点重启smb\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n命令：\n0 4 1 jan * /etc/init.d/smb restart\n\n实例15：每小时执行/etc/cron.hourly目录内的脚本\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n命令：\n01   *   *   *   *     root run-parts /etc/cron.hourly\n说明：\nrun-parts这个参数了，如果去掉这个参数的话，后面就可以写要运行的某个脚本名，而不是目录名了\n\n使用注意事项\n-----------------------\n注意环境变量问题\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n有时我们创建了一个crontab，但是这个任务却无法自动执行，而手动执行这个任务却没有问题，这种情况一般是由于在crontab文件中没有配置环境变量引起的。\n在crontab文件中定义多个调度任务时，需要特别注意的一个问题就是环境变量的设置，因为我们手动执行某个任务时，是在当前shell环境下进行的，程序当然能找到环境变量，而系统自动执行任务调度时，是不会加载任何环境变量的，因此，就需要在crontab文件中指定任务运行所需的所有环境变量，这样，系统执行任务调度时就没有问题了。\n不要假定cron知道所需要的特殊环境，它其实并不知道。所以你要保证在shelll脚本中提供所有必要的路径和环境变量，除了一些自动设置的全局变量。所以注意如下3点：\n1）脚本中涉及文件路径时写全局路径；\n2）脚本执行要用到java或其他环境变量时，通过source命令引入环境变量，如：\ncat start_cbp.sh\n!/bin/sh\n===========\nsource /etc/profile\nexport RUN_CONF=/home/d139/conf/platform/cbp/cbp_jboss.conf\n/usr/local/jboss-4.0.5/bin/run.sh -c mev &\n3）当手动执行脚本OK，但是crontab死活不执行时。这时必须大胆怀疑是环境变量惹的祸，并可以尝试在crontab中直接引入环境变量解决问题。如：\n0 * * * * . /etc/profile;/bin/sh /var/www/java/audit_no_count/bin/restart_audit.sh\n\n注意清理系统用户的邮件日志\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n每条任务调度执行完毕，系统都会将任务输出信息通过电子邮件的形式发送给当前系统用户，这样日积月累，日志信息会非常大，可能会影响系统的正常运行，因此，将每条任务进行重定向处理非常重要。\n例如，可以在crontab文件中设置如下形式，忽略日志输出：\n0 */3 * * * /usr/local/apache2/apachectl restart >/dev/null 2>&1\n“/dev/null 2>&1”表示先将标准输出重定向到/dev/null，然后将标准错误重定向到标准输出，由于标准输出已经重定向到了/dev/null，因此标准错误也会重定向到/dev/null，这样日志输出问题就解决了。\n\n系统级任务调度与用户级任务调度\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n系统级任务调度主要完成系统的一些维护操作，用户级任务调度主要完成用户自定义的一些任务，可以将用户级任务调度放到系统级任务调度来完成（不建议这么做），但是反过来却不行，root用户的任务调度操作可以通过“crontab –uroot –e”来设置，也可以将调度任务直接写入/etc/crontab文件，需要注意的是，如果要定义一个定时重启系统的任务，就必须将任务放到/etc/crontab文件，即使在root用户下创建一个定时重启系统的任务也是无效的。\n\n其他注意事项\n~~~~~~~~~~~~~~~~~~~~~~~~\n新创建的cron job，不会马上执行，至少要过2分钟才执行。如果重启cron则马上执行。\n当crontab突然失效时，可以尝试/etc/init.d/crond restart解决问题。或者查看日志看某个job有没有执行/报错tail -f /var/log/cron。\n千万别乱运行crontab -r。它从Crontab目录（/var/spool/cron）中删除用户的Crontab文件。删除了该用户的所有crontab都没了。\n在crontab中%是有特殊含义的，表示换行的意思。如果要用的话必须进行转义\\%，如经常用的date ‘+%Y%m%d’在crontab里是不会执行的，应该换成date ‘+\\%Y\\%m\\%d’。\n"
        },
        {
          "name": "der-master.zip",
          "type": "blob",
          "size": 19.5732421875,
          "content": null
        },
        {
          "name": "der",
          "type": "tree",
          "content": null
        },
        {
          "name": "helloworld.rst",
          "type": "blob",
          "size": 8.94140625,
          "content": ".. _helloworld:\n\n\n附录：reStructuredText简明教程 \n=========================\n\n.. contents:: 目录\n.. section-numbering::\n\n\n段落\n--------------------\n\n标记约定::\n\n一号 ====================\n二号 --------------------\n三号 ^^^^^^^^^^^^^^^^^^^^\n四号 \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n\n| 段落块标记；This is a line block.  It ends with a blank line.\n|     Each new line begins with a vertical bar (\"|\").\n|     Line breaks and initial indents are preserved.\n| Continuation lines are wrapped portions of long lines;\n  they begin with a space in place of the vertical bar.\n|     The left edge of a continuation line need not be aligned with\n  the left edge of the text above it.\n\n| This is a second line block.\n|\n| Blank lines are permitted internally, but they must begin with a \"|\".\n\n\nBlock Quotes\n^^^^^^^^^^^^^^^^^^^^^\n\nBlock quotes consist of indented body elements:\n\n    My theory by A. Elk.  Brackets Miss, brackets.  This theory goes\n    as follows and begins now.  All brontosauruses are thin at one\n    end, much much thicker in the middle and then thin again at the\n    far end.  That is my theory, it is mine, and belongs to me and I\n    own it, and what it is too.\n\n    -- Anne Elk (Miss)\n\n\n分割线\n^^^^^^^^^^^^^^^^^^^^\n\n---------\n\n侧边栏\n^^^^^^^^^^^^^^^^^^^^\n\n.. sidebar:: Sidebar Title\n   :subtitle: Optional Subtitle\n\n   This is a sidebar.  It is for text outside the flow of the main\n   text.\n\n   .. rubric:: This is a rubric inside a sidebar\n\n   Sidebars often appears beside the main text with a border and\n   background color.\n    \n复合段落\n^^^^^^^^^^^^^^^^^^^^\n\n.. compound::\n\n   This paragraph contains a literal block::\n\n       Connecting... OK\n       Transmitting data... OK\n       Disconnecting... OK\n\n   and thus consists of a simple paragraph, a literal block, and\n   another simple paragraph.  Nonetheless it is semantically *one*\n   paragraph.\n\nThis construct is called a *compound paragraph* and can be produced\nwith the \"compound\" directive.\n\n\n二号标题：使用链接\n--------------------\n\n\n\n描点链接\n^^^^^^^^\n目的地： \n.. _my-reference-label: 这是个描点链接 \n\n需引用自身, 查看 :ref:`my-reference-label`.\n还是说这样可以：`my-reference-label`_\neg：查看这个文件本身：:ref:`_helloworld`_\n\n\n外部链接\n^^^^^^^^^^^^^^^^^\n`链接文本 <http://www.me115.com/>`_ 可以插入网页链接\n\n.. _colin的博客 : http://www.me115.com\n\n`使用链接 <http:///www.me115.com>`_ 和其它的方式 `colin的博客`_.\n\n\n.. 大CC的博客: http://blog.me115.com\n\n链接文本是网址，则不需要特别标记，分析器会发现网址和邮件；\n\n内部链接\n^^^^^^^^^^^^\n查看 top命令(top_),或者是查看sar命令(sar_),\n\n标记： \n\n.. _example:\n\n使用\n\n使用这个链接：example_\n\n本页面链接：helloword_\n\n尾注\n--------------------\nLorem ipsum [#f1]_ dolor sit amet ... [#f2]_\n.. rubric:: Footnotes\n\n.. [#f1] 第一条尾注的文本.\n.. [#f2] 第二条尾注的文本.\n\n也可以使用自动标号的尾注：[#]_\n熟悉Git\\ [#]_\\ 的人几乎都知道并喜欢\n.. [#] http://git-scm.com/\n\n\n引用：\n--------------------\n\n这里有个引用 [#f1]_  呵呵，\n.. [#f1] 参考文献    \n\n添加图片\n--------------------\n\n普通图片添加\n^^^^^^^^^^^^^^^^^^^\n图片路径为源文件的相对路径；或者以根目录为开始的\n\n.. image:: _static/me115_com.jpg\n    :height: 200px\n    :align: center\n    :alt: reStructuredText, the markup syntax\n\nA figure directive with center alignment\n\n.. figure:: _static/me115_com.jpg\n   :align: center\n\n插图引用\n^^^^^^^^^^^^^^^^^^^^\n.. _fig_0601:\n.. figure:: _static/me115_com.jpg\n\n   插图 6-1 神奇的木书架\n\n引用处：\n:ref:`fig_0601`\n\n\n内联标记(单词标记)\n--------------------\n斜体：*text*  （两侧各留一个空格）\n加粗：**text**\n代码样式：``text`` （反引号）\n文本中如果有，使用反斜杠进行转义；\n\nParagraphs contain text and may contain inline markup: *emphasis*,\n**strong emphasis**, ``inline literals``, standalone hyperlinks\n(http://www.python.org), external hyperlinks (Python_), internal\ncross-references (example_), external hyperlinks with embedded URIs\n(`Python web site <http://www.python.org>`__), footnote references\n(manually numbered [1]_, anonymous auto-numbered [#]_, labeled\nauto-numbered [#label]_, or symbolic [*]_), citation references\n([CIT2002]_), substitution references (|example|), and _`inline\nhyperlink targets` (see Targets_ below for a reference back to here).\nCharacter-level inline markup is also possible (although exceedingly\nugly!) in *re*\\ ``Structured``\\ *Text*.  Problems are indicated by\n|problematic| text (generated by processing errors; this one is\nintentional).\n\nThe default role for interpreted text is `Title Reference`.  Here are\nsome explicit interpreted text roles: a PEP reference (:PEP:`287`); an\nRFC reference (:RFC:`2822`); a :sub:`subscript`; a :sup:`superscript`;\nand explicit roles for :emphasis:`standard` :strong:`inline`\n:literal:`markup`.\n\n\n列表：\n--------------------\n仅在段落的开头放置一个星号和一个缩进. 编号的列表也可以;也可以使用符号 # 自动加序号:\n\n* 这是一个项目列表\n* 有两项\n\n用-是markdown的做法,rst同样可用：\n\n- hello，第一列\n- 第二列\n- 第三列\n\n\n1. 这是个有序列表\n#. 还是个有序列表，自动编号\n\n\n注：列表可以嵌套，但是使用空行分割\n\n名称解释列表：\n^^^^^^^^^^^^^^^^^^^^\n*大CC*\n    大CC的博客在这里\n\nDefinition Lists\n----------------\n\nTerm\n    Definition\nTerm : classifier\n    Definition paragraph 1.\n\n    Definition paragraph 2.\n\nBullet Lists\n------------\n\n- A bullet list\n\n  + Nested bullet list.\n  + Nested item 2.\n\n- Item 2.\n\n  Paragraph 2 of item 2.\n\n  * Nested bullet list.\n  * Nested item 2.\n\n    - Third level.\n    - Item 2.\n\n  * Nested item 3.\n\n\n特殊段落标记\n--------------------\n\n.. note::   \n    \n    这里是Note提示段落；\n\n其它类似语法的还有：\n\n* warning 一般显示的是信息安全方面的注意事项\n* seealso 许多章节包含模块文档或者扩展文档的参考索引列表.这些列表由指令 seealso 创建\n* centered 创建居中加粗文本行\n* hlist 生成水平列表. 它将列表项横向显示并减少项目的间距使其较为紧凑\n\n\n水平列表,它将列表项横向显示并减少项目的间距使其较为紧凑\n\n.. hlist::  \n   :columns: 3\n\n    * 第一列，生成水平列表. \n    * 第二列\n\n提示框\n^^^^^^^^^^^^^^\n\n.. Attention:: Directives at large.\n\n.. Caution::\n\n   Don't take any wooden nickels.\n\n.. DANGER:: Mad scientist at work!\n\n.. Error:: Does not compute.\n\n.. Hint:: It's bigger than a bread box.\n\n.. Important::\n   - Wash behind your ears.\n   - Clean up your room.\n   - Call your mother.\n   - Back up your data.\n\n.. Note:: This is a note.\n\n.. Tip:: 15% if the service is good.\n\n.. WARNING:: Strong prose may provoke extreme mental exertion.\n   Reader discretion is strongly advised.\n\n.. admonition:: And, by the way...\n\n   You can make up your own admonition too.\n\n.. seealso::\n\n    本书并非一本介绍Git的书，并且假设读者已经掌握了Git的相关操作。如果读者对\\\n    Git尚不了解，可以参考我写的 《Git权威指南》\\ [#]_\\ 一书。此外还可以从网上\\\n    找到很多免费的、很好的Git资料，如：Git社区书\\ [#]_\\ 、Pro Git\\ [#]_\\ 等。\n\n.. 这是一个评论.\n\n可以通过多行缩进产生多行评论：\n\n..\n   这整个缩进块都是\n   一个评论.\n\n   仍是一个评论.\n\n\n源代码标记\n--------------------\n这个 :: 标记很优雅:（下一行需要跟一个空白行）\n- 如果作为独立段落存在,则整段都不会出现在文档里.\n- 如果前面有空白，则标记被移除.\n- 如果前面是非空白，则标记被一个冒号取代.\n\n::\n\n    for(int i = 0;i< 10 ;i++)\n    {\n        cout << \"hello world\" << endl;\n    }\n\n高亮语法的标记：\n\n.. code-block:: python   \n    :linenos:   \n    :emphasize-lines: 3,5\n\n    def foo():\n        print \"Love Python, Love FreeDome\"\n        print \"E文标点,.0123456789,中文标点,. \"\n\n\n.. code-block:: sh\n    \n    /opt/app/todeav1$ps -fe| grep ls\n    root      3676     1  0  2012 ?        02:58:14 /usr/sbin/vmtoolsd\n\n\n\n.. [#] http://git-scm.com/\n.. [#] https://github.com/\n.. [#] ISBN：9787111349679, 由机械工业出版社华章公司于2011年7月出版。\n.. [#] http://book.git-scm.com/\n.. [#] http://progit.org/book/\n\n\n替换文本\n--------------------\n\nI recommend you try |Python|_.\n\n.. |Python| replace:: Python, *the* best language around\n\n\n.. topic:: Topic Title\n\n   This is a topic.\n\n.. rubric:: This is a rubric\n\n\n表格\n---------------------\n\n.. bibliographic fields (which also require a transform):\n\n:Author: David Goodger\n:Address: 123 Example Street\n          Example, EX  Canada\n          A1B 2C3\n:Contact: docutils-develop@lists.sourceforge.net\n:Authors: Me; Myself; I\n:Dedication:\n\n    For Docutils users & co-developers.\n:abstract:\n\n    This document is a demonstration of the reStructuredText markup\n    language, containing examples of all basic reStructuredText\n    constructs and many advanced constructs.\n\n\n\n"
        },
        {
          "name": "index.rst",
          "type": "blob",
          "size": 2.23046875,
          "content": "==========\nLinux工具快速教程\n==========\n\n.. include:: _version.inc\n\n前言\n----\n\nLinux下有很多命令行工具供我们使用，每个工具总是提供了大量参数供我们选择；\n实际工作中，我们用到的工具，最常用的总是那么几个参数组合；\n为此，我写了这本书相对实用的书；\n\n这本书专注于Linux工具的最常用用法，以便读者能以最快时间掌握，并在工作中应用；\n\n说明\n^^^^^^^^^^^^^^^^^^^^\n\n全书分为三个部分：\n\n- 第一部分为基础篇，介绍我们工作中常用的工具的高频用法；\n- 第二部分为进阶篇，介绍的工具更多的适合程序员使用，分为程序构建、程序调试及程序优化；\n- 第三部分是工具参考篇，主要介绍实用工具的用法和实例；相比第一二部分，这里针对每个工具的介绍更全面；\n\n同时，这个教程也可当作Linux命令手册使用，使用左边栏的目录和搜索栏可以很方便的查阅；\n\n\n建议\n^^^^^^^^^^^^^^^^^^^^\n1. 最好安装一个Linux系统（对于新手Ubuntu容易入门），将教程中的命令敲到bash中看看效果\n2. 如果有兴趣，可以在了解之后立即查看相关更完备的内容 (比如查阅官方文档)\n\n写作工具\n^^^^^^^^^^^^^^^^^^^^\n本书使用的reStructuredText标记语言，相对Markdown来说，在写书方面更有优势:\n\n- 使用sphnix能够自动生成目录和索引文件，方便查询和检索；\n- 有大量漂亮的HTML书籍主题模版，可为书籍轻松换肤（类似Wordpress的网站模版）；\n- 对于参考手册类书籍的编写在语法上更为便利（python官方帮助文档的使用者）；\n\n\n\n^^^^^^^^^^^^^^^^^^^^\n\n版权声明\n^^^^^^^^^^^^^^^^^^^^^\n.. note:: \n    本书为开源图书，版权归作者所有；欢迎下载及编辑(个人用途)，但未经作者同意必须保留此段声明，且不可用于商业用途，否则保留追究法律责任的权利。\n\n    - 作者：大CC\n    - 博客：http://blog.me115.com\n    - Github地址：https://github.com/me115/linuxtools_rst\n\n\n目录\n----\n\n.. toctree::\n    :maxdepth: 2\n    :glob:\n    \n    base/index\n    advance/index\n    tool/index\n\n\nIndices and tables\n==================\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n"
        },
        {
          "name": "make.bat",
          "type": "blob",
          "size": 6.3154296875,
          "content": "@ECHO OFF\n\nREM Command file for Sphinx documentation\n\nif \"%SPHINXBUILD%\" == \"\" (\n\tset SPHINXBUILD=sphinx-build\n)\nset BUILDDIR=_build\nset ALLSPHINXOPTS=-d %BUILDDIR%/doctrees %SPHINXOPTS% .\nset I18NSPHINXOPTS=%SPHINXOPTS% .\nif NOT \"%PAPER%\" == \"\" (\n\tset ALLSPHINXOPTS=-D latex_paper_size=%PAPER% %ALLSPHINXOPTS%\n\tset I18NSPHINXOPTS=-D latex_paper_size=%PAPER% %I18NSPHINXOPTS%\n)\n\nif \"%1\" == \"\" goto help\n\nif \"%1\" == \"help\" (\n\t:help\n\techo.Please use `make ^<target^>` where ^<target^> is one of\n\techo.  html       to make standalone HTML files\n\techo.  dirhtml    to make HTML files named index.html in directories\n\techo.  singlehtml to make a single large HTML file\n\techo.  pickle     to make pickle files\n\techo.  json       to make JSON files\n\techo.  htmlhelp   to make HTML files and a HTML help project\n\techo.  qthelp     to make HTML files and a qthelp project\n\techo.  devhelp    to make HTML files and a Devhelp project\n\techo.  epub       to make an epub\n\techo.  latex      to make LaTeX files, you can set PAPER=a4 or PAPER=letter\n\techo.  text       to make text files\n\techo.  man        to make manual pages\n\techo.  texinfo    to make Texinfo files\n\techo.  gettext    to make PO message catalogs\n\techo.  changes    to make an overview over all changed/added/deprecated items\n\techo.  xml        to make Docutils-native XML files\n\techo.  pseudoxml  to make pseudoxml-XML files for display purposes\n\techo.  linkcheck  to check all external links for integrity\n\techo.  doctest    to run all doctests embedded in the documentation if enabled\n\tgoto end\n)\n\nif \"%1\" == \"clean\" (\n\tfor /d %%i in (%BUILDDIR%\\*) do rmdir /q /s %%i\n\tdel /q /s %BUILDDIR%\\*\n\tgoto end\n)\n\n\n%SPHINXBUILD% 2> nul\nif errorlevel 9009 (\n\techo.\n\techo.The 'sphinx-build' command was not found. Make sure you have Sphinx\n\techo.installed, then set the SPHINXBUILD environment variable to point\n\techo.to the full path of the 'sphinx-build' executable. Alternatively you\n\techo.may add the Sphinx directory to PATH.\n\techo.\n\techo.If you don't have Sphinx installed, grab it from\n\techo.http://sphinx-doc.org/\n\texit /b 1\n)\n\nif \"%1\" == \"html\" (\n\t%SPHINXBUILD% -b html %ALLSPHINXOPTS% %BUILDDIR%/html\n\tif errorlevel 1 exit /b 1\n\techo.\n\techo.Build finished. The HTML pages are in %BUILDDIR%/html.\n\tgoto end\n)\n\nif \"%1\" == \"dirhtml\" (\n\t%SPHINXBUILD% -b dirhtml %ALLSPHINXOPTS% %BUILDDIR%/dirhtml\n\tif errorlevel 1 exit /b 1\n\techo.\n\techo.Build finished. The HTML pages are in %BUILDDIR%/dirhtml.\n\tgoto end\n)\n\nif \"%1\" == \"singlehtml\" (\n\t%SPHINXBUILD% -b singlehtml %ALLSPHINXOPTS% %BUILDDIR%/singlehtml\n\tif errorlevel 1 exit /b 1\n\techo.\n\techo.Build finished. The HTML pages are in %BUILDDIR%/singlehtml.\n\tgoto end\n)\n\nif \"%1\" == \"pickle\" (\n\t%SPHINXBUILD% -b pickle %ALLSPHINXOPTS% %BUILDDIR%/pickle\n\tif errorlevel 1 exit /b 1\n\techo.\n\techo.Build finished; now you can process the pickle files.\n\tgoto end\n)\n\nif \"%1\" == \"json\" (\n\t%SPHINXBUILD% -b json %ALLSPHINXOPTS% %BUILDDIR%/json\n\tif errorlevel 1 exit /b 1\n\techo.\n\techo.Build finished; now you can process the JSON files.\n\tgoto end\n)\n\nif \"%1\" == \"htmlhelp\" (\n\t%SPHINXBUILD% -b htmlhelp %ALLSPHINXOPTS% %BUILDDIR%/htmlhelp\n\tif errorlevel 1 exit /b 1\n\techo.\n\techo.Build finished; now you can run HTML Help Workshop with the ^\n.hhp project file in %BUILDDIR%/htmlhelp.\n\tgoto end\n)\n\nif \"%1\" == \"qthelp\" (\n\t%SPHINXBUILD% -b qthelp %ALLSPHINXOPTS% %BUILDDIR%/qthelp\n\tif errorlevel 1 exit /b 1\n\techo.\n\techo.Build finished; now you can run \"qcollectiongenerator\" with the ^\n.qhcp project file in %BUILDDIR%/qthelp, like this:\n\techo.^> qcollectiongenerator %BUILDDIR%\\qthelp\\linuxtools.qhcp\n\techo.To view the help file:\n\techo.^> assistant -collectionFile %BUILDDIR%\\qthelp\\linuxtools.ghc\n\tgoto end\n)\n\nif \"%1\" == \"devhelp\" (\n\t%SPHINXBUILD% -b devhelp %ALLSPHINXOPTS% %BUILDDIR%/devhelp\n\tif errorlevel 1 exit /b 1\n\techo.\n\techo.Build finished.\n\tgoto end\n)\n\nif \"%1\" == \"epub\" (\n\t%SPHINXBUILD% -b epub %ALLSPHINXOPTS% %BUILDDIR%/epub\n\tif errorlevel 1 exit /b 1\n\techo.\n\techo.Build finished. The epub file is in %BUILDDIR%/epub.\n\tgoto end\n)\n\nif \"%1\" == \"latex\" (\n\t%SPHINXBUILD% -b latex %ALLSPHINXOPTS% %BUILDDIR%/latex\n\tif errorlevel 1 exit /b 1\n\techo.\n\techo.Build finished; the LaTeX files are in %BUILDDIR%/latex.\n\tgoto end\n)\n\nif \"%1\" == \"latexpdf\" (\n\t%SPHINXBUILD% -b latex %ALLSPHINXOPTS% %BUILDDIR%/latex\n\tcd %BUILDDIR%/latex\n\tmake all-pdf\n\tcd %BUILDDIR%/..\n\techo.\n\techo.Build finished; the PDF files are in %BUILDDIR%/latex.\n\tgoto end\n)\n\nif \"%1\" == \"latexpdfja\" (\n\t%SPHINXBUILD% -b latex %ALLSPHINXOPTS% %BUILDDIR%/latex\n\tcd %BUILDDIR%/latex\n\tmake all-pdf-ja\n\tcd %BUILDDIR%/..\n\techo.\n\techo.Build finished; the PDF files are in %BUILDDIR%/latex.\n\tgoto end\n)\n\nif \"%1\" == \"text\" (\n\t%SPHINXBUILD% -b text %ALLSPHINXOPTS% %BUILDDIR%/text\n\tif errorlevel 1 exit /b 1\n\techo.\n\techo.Build finished. The text files are in %BUILDDIR%/text.\n\tgoto end\n)\n\nif \"%1\" == \"man\" (\n\t%SPHINXBUILD% -b man %ALLSPHINXOPTS% %BUILDDIR%/man\n\tif errorlevel 1 exit /b 1\n\techo.\n\techo.Build finished. The manual pages are in %BUILDDIR%/man.\n\tgoto end\n)\n\nif \"%1\" == \"texinfo\" (\n\t%SPHINXBUILD% -b texinfo %ALLSPHINXOPTS% %BUILDDIR%/texinfo\n\tif errorlevel 1 exit /b 1\n\techo.\n\techo.Build finished. The Texinfo files are in %BUILDDIR%/texinfo.\n\tgoto end\n)\n\nif \"%1\" == \"gettext\" (\n\t%SPHINXBUILD% -b gettext %I18NSPHINXOPTS% %BUILDDIR%/locale\n\tif errorlevel 1 exit /b 1\n\techo.\n\techo.Build finished. The message catalogs are in %BUILDDIR%/locale.\n\tgoto end\n)\n\nif \"%1\" == \"changes\" (\n\t%SPHINXBUILD% -b changes %ALLSPHINXOPTS% %BUILDDIR%/changes\n\tif errorlevel 1 exit /b 1\n\techo.\n\techo.The overview file is in %BUILDDIR%/changes.\n\tgoto end\n)\n\nif \"%1\" == \"linkcheck\" (\n\t%SPHINXBUILD% -b linkcheck %ALLSPHINXOPTS% %BUILDDIR%/linkcheck\n\tif errorlevel 1 exit /b 1\n\techo.\n\techo.Link check complete; look for any errors in the above output ^\nor in %BUILDDIR%/linkcheck/output.txt.\n\tgoto end\n)\n\nif \"%1\" == \"doctest\" (\n\t%SPHINXBUILD% -b doctest %ALLSPHINXOPTS% %BUILDDIR%/doctest\n\tif errorlevel 1 exit /b 1\n\techo.\n\techo.Testing of doctests in the sources finished, look at the ^\nresults in %BUILDDIR%/doctest/output.txt.\n\tgoto end\n)\n\nif \"%1\" == \"xml\" (\n\t%SPHINXBUILD% -b xml %ALLSPHINXOPTS% %BUILDDIR%/xml\n\tif errorlevel 1 exit /b 1\n\techo.\n\techo.Build finished. The XML files are in %BUILDDIR%/xml.\n\tgoto end\n)\n\nif \"%1\" == \"pseudoxml\" (\n\t%SPHINXBUILD% -b pseudoxml %ALLSPHINXOPTS% %BUILDDIR%/pseudoxml\n\tif errorlevel 1 exit /b 1\n\techo.\n\techo.Build finished. The pseudo-XML files are in %BUILDDIR%/pseudoxml.\n\tgoto end\n)\n\n:end\n"
        },
        {
          "name": "md2rst.py",
          "type": "blob",
          "size": 2.6787109375,
          "content": "#! /usr/bin/env python\n#coding=utf-8\n# markdown文件转换为rst文件\n#author: colin 8/14/2014\nimport os,sys,re,traceback\n\n\nclass Md2rstConvertor:\n    \n    #change\n    def convert(self,filename):\n        lines = []\n        isCodeLine = False\n        datafile = open(filename,\"r\")\n        for line in datafile:\n            # 识别代码段\n            m = re.match(r'`{3}[ ]*',line)  \n            if m is not None:\n                if isCodeLine == False:\n                    lines.append('::\\n\\n')\n                    isCodeLine = True\n                else:\n                    isCodeLine = False # code块结束\n                    lines.append('\\n')\n                continue\n            \n            if isCodeLine == True:\n                lines.append('\\t' + line.strip() + '\\n')\n                continue\n            else:\n                # 识别一级标题\n                m = re.match(r'[ ]*#{1}[^#]+',line)  \n                if m is not None:\n                    lines.append(line.strip('# \\r\\n') + '\\n')\n                    lines.append('=' * len(line) + '\\n')\n                    continue\n                \n                # 识别二级标题\n                m = re.match(r'[ ]*#{2}[^#]+',line)  \n                if m is not None:\n                    lines.append(line.strip('# \\r\\n') + '\\n')\n                    lines.append('-' * len(line) + '\\n')\n                    continue\n                \n                # 识别三级标题\n                m = re.match(r'[ ]*#{3}[^#]+',line)  \n                if m is not None:\n                    lines.append(line.strip('# \\r\\n') + '\\n')\n                    lines.append('~' * len(line) + '\\n')\n                    continue\n                \n                lines.append(line.strip() + '\\n')\n\n            \n        \n        rstFile = '%s.rst' % filename.split('.')[0]\n        fw = open(rstFile,'w')\n        for str in lines:\n            fw.writelines(str )\n        fw.close()\n        \n        \n\nif __name__ == '__main__':\n\n    convertor = Md2rstConvertor()\n    try:\n        if len(sys.argv) <= 1:\n            print \"please input file name to convert :('all' for all file in cur dir)\"\n            exit()\n        \n        arg = sys.argv[1]\n        if arg == 'all':\n            # 转换当前文件夹下所有md文件\n            for filename in os.listdir('./'):\n                if os.path.isfile(filename): # 过滤文件夹\n                    fix = filename.split('.')[-1]\n                    if  fix.upper() == \"MD\" :\n                        convertor.convert(filename)\n        else:\n            convertor.convert(arg)\n        \n    except Exception, ex:\n\n        exc = traceback.format_exc()\n        sys.stderr.write(\"trace =%s \\n\" % exc)\n        sys.stderr.write(\"ex=%s \\n\" % str(ex))\n"
        },
        {
          "name": "sphinx_rtd_theme-master.zip",
          "type": "blob",
          "size": 541.3876953125,
          "content": null
        },
        {
          "name": "sphinx_rtd_theme",
          "type": "tree",
          "content": null
        },
        {
          "name": "tool",
          "type": "tree",
          "content": null
        },
        {
          "name": "top.md",
          "type": "blob",
          "size": 7.779296875,
          "content": "Linux命令工具 top详解\n\ntop命令是Linux下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况，类似于Windows的任务管理器。top是一个动态显示过程,即可以通过用户按键来不断刷新当前状态.如果在前台执行该命令,它将独占前台,直到用户终止该程序为止.比较准确的说,top命令提供了实时的对系统处理器的状态监视.它将显示系统中CPU最“敏感”的任务列表.该命令可以按CPU使用.内存使用和执行时间对任务进行排序；而且该命令的很多特性都可以通过交互式命令或者在个人定制文件中进行设定。  \n常在linux系统下玩，这是必须掌握的命令之一；\n下面详细说说这个命令：\n\n敲入top进入：\n```\ntop - 09:14:56 up 264 days, 20:56,  1 user,  load average: 0.02, 0.04, 0.00\nTasks:  87 total,   1 running,  86 sleeping,   0 stopped,   0 zombie\nCpu(s):  0.0%us,  0.2%sy,  0.0%ni, 99.7%id,  0.0%wa,  0.0%hi,  0.0%si,  0.2%st\nMem:    377672k total,   322332k used,    55340k free,    32592k buffers\nSwap:   397308k total,    67192k used,   330116k free,    71900k cached\n  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND                                        \n    1 root      20   0  2856  656  388 S  0.0  0.2   0:49.40 init                                            \n    2 root      20   0     0    0    0 S  0.0  0.0   0:00.00 kthreadd                                        \n    3 root      20   0     0    0    0 S  0.0  0.0   7:15.20 ksoftirqd/0                                     \n    4 root      RT   0     0    0    0 S  0.0  0.0   0:00.00 migration/0                          \n\n```\n\n## 第一行\n09:14:56 ：     系统当前时间\n264 days, 20:56 ：   系统开机到现在经过了多少时间\n1 users  ：            当前2用户在线\nload average: 0.02, 0.04, 0.00：        系统1分钟、5分钟、15分钟的CPU负载信息\n \n## 第二行\nTasks：任务;\n87 total：很好理解，就是当前有87个任务，也就是87个进程。\n1 running：1个进程正在运行\n86 sleeping：86个进程睡眠\n0 stopped：停止的进程数\n0 zombie：僵死的进程数\n \n## 第三行\nCpu(s)：表示这一行显示CPU总体信息\n0.0%us：用户态进程占用CPU时间百分比，不包含renice值为负的任务占用的CPU的时间。\n0.7%sy：内核占用CPU时间百分比\n0.0%ni：改变过优先级的进程占用CPU的百分比\n99.3%id：空闲CPU时间百分比\n0.0%wa：等待I/O的CPU时间百分比\n0.0%hi：CPU硬中断时间百分比\n0.0%si：CPU软中断时间百分比\n注：这里显示数据是所有cpu的平均值，如果想看每一个cpu的处理情况，按1即可；折叠，再次按1；\n\n## 第四行\nMen：内存的意思\n8175320kk total：物理内存总量\n8058868k used：使用的物理内存量\n116452k free：空闲的物理内存量\n283084k buffers：用作内核缓存的物理内存量\n \n## 第五行\nSwap：交换空间\n6881272k total：交换区总量\n4010444k used：使用的交换区量\n2870828k free：空闲的交换区量\n4336992k cached：缓冲交换区总量\n\n## 进程信息\n再下面就是进程信息：\nPID：进程的ID\nUSER：进程所有者\nPR：进程的优先级别，越小越优先被执行\nNInice：值\nVIRT：进程占用的虚拟内存\nRES：进程占用的物理内存\nSHR：进程使用的共享内存\nS：进程的状态。S表示休眠，R表示正在运行，Z表示僵死状态，N表示该进程优先值为负数\n%CPU：进程占用CPU的使用率\n%MEM：进程使用的物理内存和总内存的百分比\nTIME+：该进程启动后占用的总的CPU时间，即占用CPU使用时间的累加值。\nCOMMAND：进程启动命令名称\n \n## top命令交互操作指令\n下面列出一些常用的 top命令操作指令\n```\nq：退出top命令\n<Space>：立即刷新\ns：设置刷新时间间隔\nc：显示命令完全模式\nt:：显示或隐藏进程和CPU状态信息\nm：显示或隐藏内存状态信息\nl：显示或隐藏uptime信息\nf：增加或减少进程显示标志\nS：累计模式，会把已完成或退出的子进程占用的CPU时间累计到父进程的MITE+\nP：按%CPU使用率排行\nT：按MITE+排行\nM：按%MEM排行\nu：指定显示用户进程\nr：修改进程renice值\nkkill：进程\ni：只显示正在运行的进程\nW：保存对top的设置到文件~/.toprc，下次启动将自动调用toprc文件的设置。\nh：帮助命令。\nq：退出\n```\n\n注：强调一下，使用频率最高的是P、T、M，因为通常使用top，我们就想看看是哪些进程最耗cpu资源、占用的内存最多；\n注：通过”shift + >”或”shift + <”可以向右或左改变排序列\n如果只需要查看内存：可用free命令。只查看uptime信息（第一行），可用uptime命令；\n\n## 实例\n### 实例1：多U多核CPU监控\n在top基本视图中，按键盘数字“1”，可监控每个逻辑CPU的状况；\n```\n[rdtfr@bl685cb4-t ~]$ top\ntop - 09:10:44 up 20 days, 16:51,  4 users,  load average: 3.82, 4.40, 4.40\nTasks: 1201 total,  10 running, 1189 sleeping,   0 stopped,   2 zombie\nCpu0  :  1.3%us,  2.3%sy,  0.0%ni, 96.4%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st\nCpu1  :  1.3%us,  2.6%sy,  0.0%ni, 96.1%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st\nCpu2  :  1.0%us,  2.0%sy,  0.0%ni, 92.5%id,  0.0%wa,  0.0%hi,  4.6%si,  0.0%st\nCpu3  :  3.9%us,  7.8%sy,  0.0%ni, 83.2%id,  0.0%wa,  0.0%hi,  5.2%si,  0.0%st\nCpu4  :  4.2%us, 10.4%sy,  0.0%ni, 63.8%id,  0.0%wa,  0.0%hi, 21.5%si,  0.0%st\nCpu5  :  6.8%us, 12.7%sy,  0.0%ni, 80.5%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st\nCpu6  :  2.9%us,  7.2%sy,  0.0%ni, 85.3%id,  0.0%wa,  0.0%hi,  4.6%si,  0.0%st\nCpu7  :  6.2%us, 13.0%sy,  0.0%ni, 75.3%id,  0.0%wa,  0.0%hi,  5.5%si,  0.0%st\nMem:  32943888k total, 32834216k used,   109672k free,   642704k buffers\nSwap: 35651576k total,  5761928k used, 29889648k free, 16611500k cached\n```\n\n### 实例2：高亮显示当前运行进程\n```\n在top基本视图中,按键盘“b”（打开/关闭加亮效果）；\n```\n\n### 实例3：显示完整的程序命令\n命令：top -c\n```\n[rdtfr@bl685cb4-t ~]$ top -c\ntop - 09:14:35 up 20 days, 16:55,  4 users,  load average: 5.77, 5.01, 4.64\nTasks: 1200 total,   5 running, 1192 sleeping,   0 stopped,   3 zombie\nCpu(s):  4.4%us,  6.0%sy,  0.0%ni, 83.8%id,  0.2%wa,  0.0%hi,  5.5%si,  0.0%st\nMem:  32943888k total, 32842896k used,   100992k free,   591484k buffers\nSwap: 35651576k total,  5761808k used, 29889768k free, 16918824k cached\n  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND                                       \n 2013 apache    18   0  403m  88m 5304 S 25.0  0.3   6:37.44 /usr/sbin/httpd                                \n18335 pubtest   22   0 65576  996  728 R  7.8  0.0   0:00.24 netstat -naltp                            \n16499 rdtfare   15   0 13672 2080  824 R  2.6  0.0   0:00.38 top -c                                         \n29684 rdtfare   15   0 1164m 837m  14m S  2.3  2.6 148:47.54 ./autodata data1.txt                     \n12976 pubtest   18   0  238m 9000 1932 S  1.6  0.0 439:28.44 tscagent -s TOEV_P \n```\n\n### 实例4：显示指定的进程信息\n命令：top -p pidid\n```\n/opt/app/tdv1/config#top -p 17265\ntop - 09:17:34 up 455 days, 17:55,  2 users,  load average: 3.76, 4.56, 4.46\nTasks:   1 total,   0 running,   1 sleeping,   0 stopped,   0 zombie\nCpu(s):  7.8%us,  1.9%sy,  0.0%ni, 89.2%id,  0.0%wa,  0.1%hi,  1.0%si,  0.0%st\nMem:   8175452k total,  8103988k used,    71464k free,   268716k buffers\nSwap:  6881272k total,  4275424k used,  2605848k free,  6338184k cached\n  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND                   \n17265 tdv1      15   0 56504  828  632 S  0.0  0.0 195:53.25 redis-server                                   \n```\n\n\nPosted by: 大CC | 14JUL,2014\n博客：[blog.me115.com](http://blog.me115.com) [[订阅](http://feed.feedsky.com/me115)]\n微博：[新浪微博](http://weibo.com/bigcc115)\n\n"
        },
        {
          "name": "top.rst",
          "type": "blob",
          "size": 7.6474609375,
          "content": "Linux命令工具 top详解\n\ntop命令是Linux下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况，类似于Windows的任务管理器。top是一个动态显示过程,即可以通过用户按键来不断刷新当前状态.如果在前台执行该命令,它将独占前台,直到用户终止该程序为止.比较准确的说,top命令提供了实时的对系统处理器的状态监视.它将显示系统中CPU最“敏感”的任务列表.该命令可以按CPU使用.内存使用和执行时间对任务进行排序；而且该命令的很多特性都可以通过交互式命令或者在个人定制文件中进行设定。\n常在linux系统下玩，这是必须掌握的命令之一；\n下面详细说说这个命令：\n\n敲入top进入：\n::\n\n\ttop - 09:14:56 up 264 days, 20:56,  1 user,  load average: 0.02, 0.04, 0.00\n\tTasks:  87 total,   1 running,  86 sleeping,   0 stopped,   0 zombie\n\tCpu(s):  0.0%us,  0.2%sy,  0.0%ni, 99.7%id,  0.0%wa,  0.0%hi,  0.0%si,  0.2%st\n\tMem:    377672k total,   322332k used,    55340k free,    32592k buffers\n\tSwap:   397308k total,    67192k used,   330116k free,    71900k cached\n\tPID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND\n\t1 root      20   0  2856  656  388 S  0.0  0.2   0:49.40 init\n\t2 root      20   0     0    0    0 S  0.0  0.0   0:00.00 kthreadd\n\t3 root      20   0     0    0    0 S  0.0  0.0   7:15.20 ksoftirqd/0\n\t4 root      RT   0     0    0    0 S  0.0  0.0   0:00.00 migration/0\n\t\n\n第一行\n-------------\n09:14:56 ：     系统当前时间\n264 days, 20:56 ：   系统开机到现在经过了多少时间\n1 users  ：            当前2用户在线\nload average: 0.02, 0.04, 0.00：        系统1分钟、5分钟、15分钟的CPU负载信息\n\n第二行\n-------------\nTasks：任务;\n87 total：很好理解，就是当前有87个任务，也就是87个进程。\n1 running：1个进程正在运行\n86 sleeping：86个进程睡眠\n0 stopped：停止的进程数\n0 zombie：僵死的进程数\n\n第三行\n-------------\nCpu(s)：表示这一行显示CPU总体信息\n0.0%us：用户态进程占用CPU时间百分比，不包含renice值为负的任务占用的CPU的时间。\n0.7%sy：内核占用CPU时间百分比\n0.0%ni：改变过优先级的进程占用CPU的百分比\n99.3%id：空闲CPU时间百分比\n0.0%wa：等待I/O的CPU时间百分比\n0.0%hi：CPU硬中断时间百分比\n0.0%si：CPU软中断时间百分比\n注：这里显示数据是所有cpu的平均值，如果想看每一个cpu的处理情况，按1即可；折叠，再次按1；\n\n第四行\n-------------\nMen：内存的意思\n8175320kk total：物理内存总量\n8058868k used：使用的物理内存量\n116452k free：空闲的物理内存量\n283084k buffers：用作内核缓存的物理内存量\n\n第五行\n-------------\nSwap：交换空间\n6881272k total：交换区总量\n4010444k used：使用的交换区量\n2870828k free：空闲的交换区量\n4336992k cached：缓冲交换区总量\n\n进程信息\n----------------\n再下面就是进程信息：\nPID：进程的ID\nUSER：进程所有者\nPR：进程的优先级别，越小越优先被执行\nNInice：值\nVIRT：进程占用的虚拟内存\nRES：进程占用的物理内存\nSHR：进程使用的共享内存\nS：进程的状态。S表示休眠，R表示正在运行，Z表示僵死状态，N表示该进程优先值为负数\n%CPU：进程占用CPU的使用率\n%MEM：进程使用的物理内存和总内存的百分比\nTIME+：该进程启动后占用的总的CPU时间，即占用CPU使用时间的累加值。\nCOMMAND：进程启动命令名称\n\ntop命令交互操作指令\n-------------------------------\n下面列出一些常用的 top命令操作指令\n::\n\n\tq：退出top命令\n\t<Space>：立即刷新\n\ts：设置刷新时间间隔\n\tc：显示命令完全模式\n\tt:：显示或隐藏进程和CPU状态信息\n\tm：显示或隐藏内存状态信息\n\tl：显示或隐藏uptime信息\n\tf：增加或减少进程显示标志\n\tS：累计模式，会把已完成或退出的子进程占用的CPU时间累计到父进程的MITE+\n\tP：按%CPU使用率排行\n\tT：按MITE+排行\n\tM：按%MEM排行\n\tu：指定显示用户进程\n\tr：修改进程renice值\n\tkkill：进程\n\ti：只显示正在运行的进程\n\tW：保存对top的设置到文件~/.toprc，下次启动将自动调用toprc文件的设置。\n\th：帮助命令。\n\tq：退出\n\n注：强调一下，使用频率最高的是P、T、M，因为通常使用top，我们就想看看是哪些进程最耗cpu资源、占用的内存最多；\n注：通过”shift + >”或”shift + <”可以向右或左改变排序列\n如果只需要查看内存：可用free命令。只查看uptime信息（第一行），可用uptime命令；\n\n实例\n----------\n实例1：多U多核CPU监控\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n在top基本视图中，按键盘数字“1”，可监控每个逻辑CPU的状况；\n::\n\n\t[rdtfr@bl685cb4-t ~]$ top\n\ttop - 09:10:44 up 20 days, 16:51,  4 users,  load average: 3.82, 4.40, 4.40\n\tTasks: 1201 total,  10 running, 1189 sleeping,   0 stopped,   2 zombie\n\tCpu0  :  1.3%us,  2.3%sy,  0.0%ni, 96.4%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st\n\tCpu1  :  1.3%us,  2.6%sy,  0.0%ni, 96.1%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st\n\tCpu2  :  1.0%us,  2.0%sy,  0.0%ni, 92.5%id,  0.0%wa,  0.0%hi,  4.6%si,  0.0%st\n\tCpu3  :  3.9%us,  7.8%sy,  0.0%ni, 83.2%id,  0.0%wa,  0.0%hi,  5.2%si,  0.0%st\n\tCpu4  :  4.2%us, 10.4%sy,  0.0%ni, 63.8%id,  0.0%wa,  0.0%hi, 21.5%si,  0.0%st\n\tCpu5  :  6.8%us, 12.7%sy,  0.0%ni, 80.5%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st\n\tCpu6  :  2.9%us,  7.2%sy,  0.0%ni, 85.3%id,  0.0%wa,  0.0%hi,  4.6%si,  0.0%st\n\tCpu7  :  6.2%us, 13.0%sy,  0.0%ni, 75.3%id,  0.0%wa,  0.0%hi,  5.5%si,  0.0%st\n\tMem:  32943888k total, 32834216k used,   109672k free,   642704k buffers\n\tSwap: 35651576k total,  5761928k used, 29889648k free, 16611500k cached\n\n实例2：高亮显示当前运行进程\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n::\n\n\t在top基本视图中,按键盘“b”（打开/关闭加亮效果）；\n\n实例3：显示完整的程序命令\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n命令：top -c\n::\n\n\t[rdtfr@bl685cb4-t ~]$ top -c\n\ttop - 09:14:35 up 20 days, 16:55,  4 users,  load average: 5.77, 5.01, 4.64\n\tTasks: 1200 total,   5 running, 1192 sleeping,   0 stopped,   3 zombie\n\tCpu(s):  4.4%us,  6.0%sy,  0.0%ni, 83.8%id,  0.2%wa,  0.0%hi,  5.5%si,  0.0%st\n\tMem:  32943888k total, 32842896k used,   100992k free,   591484k buffers\n\tSwap: 35651576k total,  5761808k used, 29889768k free, 16918824k cached\n\tPID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND\n\t2013 apache    18   0  403m  88m 5304 S 25.0  0.3   6:37.44 /usr/sbin/httpd\n\t18335 pubtest   22   0 65576  996  728 R  7.8  0.0   0:00.24 netstat -naltp\n\t16499 rdtfare   15   0 13672 2080  824 R  2.6  0.0   0:00.38 top -c\n\t29684 rdtfare   15   0 1164m 837m  14m S  2.3  2.6 148:47.54 ./autodata data1.txt\n\t12976 pubtest   18   0  238m 9000 1932 S  1.6  0.0 439:28.44 tscagent -s TOEV_P\n\n实例4：显示指定的进程信息\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n命令：top -p pidid\n::\n\n\t/opt/app/tdv1/config#top -p 17265\n\ttop - 09:17:34 up 455 days, 17:55,  2 users,  load average: 3.76, 4.56, 4.46\n\tTasks:   1 total,   0 running,   1 sleeping,   0 stopped,   0 zombie\n\tCpu(s):  7.8%us,  1.9%sy,  0.0%ni, 89.2%id,  0.0%wa,  0.1%hi,  1.0%si,  0.0%st\n\tMem:   8175452k total,  8103988k used,    71464k free,   268716k buffers\n\tSwap:  6881272k total,  4275424k used,  2605848k free,  6338184k cached\n\tPID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND\n\t17265 tdv1      15   0 56504  828  632 S  0.0  0.0 195:53.25 redis-server\n\n\nPosted by: 大CC | 14JUL,2014\n博客：[blog.me115.com](http://blog.me115.com) [[订阅](http://feed.feedsky.com/me115)]\n微博：[新浪微博](http://weibo.com/bigcc115)\n\n"
        }
      ]
    }
  ]
}