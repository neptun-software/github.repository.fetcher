{
  "metadata": {
    "timestamp": 1736709569806,
    "page": 109,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjExMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "tc39/proposal-pattern-matching",
      "stars": 5550,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0849609375,
          "content": "index.html  -diff merge=ours\nspec.js     -diff merge=ours\nspec.css    -diff merge=ours\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.66015625,
          "content": "# Logs\nlogs\n*.log\nnpm-debug.log*\n\n# Runtime data\npids\n*.pid\n*.seed\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (http://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules\njspm_packages\n\n# Optional npm cache directory\n.npm\n\n# Optional REPL history\n.node_repl_history\n\n# Only apps should have lockfiles\nyarn.lock\npackage-lock.json\nnpm-shrinkwrap.json\npnpm-lock.yaml\n"
        },
        {
          "name": ".npmrc",
          "type": "blob",
          "size": 0.0185546875,
          "content": "package-lock=false\n"
        },
        {
          "name": ".prettierrc.json",
          "type": "blob",
          "size": 0.02734375,
          "content": "{\n  \"proseWrap\": \"always\"\n}\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.056640625,
          "content": "MIT License\n\nCopyright (c) 2020 ECMA TC39 and contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 46.4599609375,
          "content": "# ECMAScript Pattern Matching\n\n## [Status](https://tc39.github.io/process-document/)\n\n**Stage**: 1\n\n**Spec Text**: <https://tc39.github.io/proposal-pattern-matching>\n\n**Authors**: Originally Kat Marchán (Microsoft,\n[@zkat\\_\\_](https://twitter.com/zkat__)); now, the below champions.\n\n**Champions**: (in alphabetical order)\n\n- Daniel Rosenwasser (Microsoft,\n  [@drosenwasser](https://twitter.com/drosenwasser))\n- Jack Works (Sujitech, [@Jack-Works](https://github.com/Jack-Works))\n- Jordan Harband (HeroDevs, [@ljharb](https://twitter.com/ljharb))\n- Mark Cohen ([@mpcsh\\_](https://twitter.com/mpcsh_))\n- Ross Kirsling (Sony, [@rkirsling](https://twitter.com/rkirsling))\n- Tab Atkins-Bittner (Google, [@tabatkins](https://twitter.com/tabatkins))\n\n# Introduction\n\n## Problem\n\nThere are many ways to match *values* in the language,\nbut there are no ways to match *patterns*\nbeyond regular expressions for strings.\nHowever, wanting to take different actions\nbased on patterns in a given value\nis a very common desire:\ndo X if the value has a `foo` property,\ndo Y if it contains three or more items,\netc.\n\n### Current Approaches\n\n`switch` has the desired *structure* --\na value is given,\nand several possible match criteria are offered,\neach with a different associated action.\nBut it's severely lacking in practice:\nit may not appear in expression position;\nan explicit `break` is required in each `case` to avoid accidental fallthrough;\nscoping is ambiguous\n(block-scoped variables inside one `case` are available in the scope of the others,\nunless curly braces are used);\nthe only comparison it can do is `===`; etc.\n\n`if/else` has the necessary *power*\n(you can perform any comparison you like),\nbut it's overly verbose even for common cases,\nrequiring the author to explicitly list paths into the value's structure multiple times,\nonce per test performed.\nIt's also statement-only\n(unless the author opts for the harder-to-understand ternary syntax)\nand requires the value under test to be stored in a (possibly temporary) variable.\n\n## Priorities for a solution\n\nThis section details this proposal’s priorities. Note that not every champion\nmay agree with each priority.\n\n### _Pattern_ matching\n\nThe pattern matching construct is a full conditional logic construct that can do\nmore than just pattern matching. As such, there have been (and there will be\nmore) trade-offs that need to be made. In those cases, we should prioritize the\nergonomics of structural pattern matching over other capabilities of this\nconstruct.\n\n### Subsumption of `switch`\n\nThis feature must be easily searchable, so that tutorials and documentation are\neasy to locate, and so that the feature is easy to learn and recognize. As such,\nthere must be no syntactic overlap with the `switch` statement.\n\nThis proposal seeks to preserve the good parts of `switch`, and eliminate any\nreasons to reach for it.\n\n### Be better than `switch`\n\n`switch` contains a plethora of footguns such as accidental case fallthrough and\nambiguous scoping. This proposal should eliminate those footguns, while also\nintroducing new capabilities that `switch` currently can not provide.\n\n### Expression semantics\n\nThe pattern matching construct should be usable as an expression:\n\n- `return match { ... }`\n- `let foo = match { ... }`\n- `() => match { ... }`\n- etc.\n\nThe value of the whole expression is the value of whatever [clause](#clause) is\nmatched.\n\n### Exhaustiveness and ordering\n\nIf the developer wants to ignore certain possible cases, they should specify\nthat explicitly. A development-time error is less costly than a production-time\nerror from something further down the stack.\n\nIf the developer wants two cases to share logic (what we know as \"fall-through\"\nfrom `switch`), they should specify it explicitly. Implicit fall-through\ninevitably silently accepts buggy code.\n\n[Clauses](#clause) should always be checked in the order they’re written, i.e.\nfrom top to bottom.\n\n### User extensibility\n\nUserland objects should be able to encapsulate their own matching semantics,\nwithout unnecessarily privileging builtins. This includes regular expressions\n(as opposed to the literal pattern syntax), numeric ranges, etc.\n\n## Prior Art\n\nThis proposal adds a pattern matching expression to the language, based in part\non the existing\n[Destructuring Binding Patterns](https://tc39.github.io/ecma262/#sec-destructuring-binding-patterns).\n\nThis proposal was approved for Stage 1 in the May 2018 TC39 meeting, and slides\nfor that presentation are available\n[here](https://docs.google.com/presentation/d/1WPyAO4pHRsfwGoiIZupz_-tzAdv8mirw-aZfbxbAVcQ).\nIts current form was presented to TC39 in the April 2021 meeting\n([slides](https://hackmd.io/@mpcsh/HkZ712ig_#/)).\n\nThis proposal draws from, and partially overlaps with, corresponding features in\n[CoffeeScript](https://coffeescript.org/#switch),\n[Rust](https://doc.rust-lang.org/1.6.0/book/patterns.html),\n[Python](https://www.python.org/dev/peps/pep-0622/),\n[F#](https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/pattern-matching),\n[Scala](http://www.scala-lang.org/files/archive/spec/2.11/08-pattern-matching.html),\n[Elixir/Erlang](https://elixir-lang.org/getting-started/pattern-matching.html),\nand [C++](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1371r2.pdf).\n\n### Userland matching\n\nA list of community libraries that provide similar matching functionality:\n\n- [Optionals](https://github.com/OliverBrotchie/optionals) — Rust-like error handling, options and exhaustive pattern matching for TypeScript and Deno\n- [ts-pattern](https://github.com/gvergnaud/ts-pattern) — Exhaustive Pattern Matching library for TypeScript, with smart type inference.\n- [babel-plugin-proposal-pattern-matching](https://github.com/iptop/babel-plugin-proposal-pattern-matching) — Minimal grammar, high performance JavaScript pattern matching implementation.\n- [match-iz](https://github.com/shuckster/match-iz) — A tiny functional pattern-matching library inspired by the TC39 proposal.\n- [patcom](https://github.com/concept-not-found/patcom) — Feature parity with TC39 proposal without any new syntax\n\n# Specification\n\nThis proposal introduces three new concepts to Javascript:\n\n* the \"matcher pattern\",\n    a new DSL closely related to destructuring patterns,\n    which allows recursively testing the structure and contents of a value\n    in multiple ways at once,\n    and extracting some of that structure into local bindings at the same time\n* the `match(){}` expression,\n    a general replacement for the `switch` statement\n    that uses matcher patterns\n    to resolve to one of several values,\n* the `is` boolean operator,\n    which allows for one-off testing of a value against a matcher pattern,\n    potentially also introducing bindings from that test into the local environment.\n\n\n# Matcher Patterns\n\nMatcher patterns are a new DSL,\nclosely inspired by destructuring patterns,\nfor recursively testing the structure and contents of a value\nwhile simultaneously extracting some parts of that value\nas local bindings for use by other code.\n\nMatcher patterns can be divided into three general varieties:\n* Value patterns, which test that the subject matches some criteria, like \"is the string `\"foo\"`\" or \"matches the variable `bar`\".\n* Structure patterns, which test the subject matches some structural criteria like \"has the property `foo`\" or \"is at least length 3\", and also let you recursively apply additional matchers to parts of that structure.\n* Combinator patterns, which let you match several patterns in parallel on the same subject, with simple boolean `and`/`or` logic.\n\n## Value Matchers\n\nThere are several types of value patterns, performing different types of tests.\n\n### Primitive Patterns\n\nAll primitive values can be used directly as matcher patterns,\nrepresenting a test that the subject matches the specified value,\nusing [`SameValue`](https://tc39.es/ecma262/#sec-samevalue) semantics\n(except when otherwise noted).\n\nFor example, `1` tests that the subject is `SameValue` to `1`,\n`\"foo\"` tests that it's `SameValue` to `\"foo\"`,\netc.\n\nSpecifically,\nboolean literals,\nnumeric literals,\nstring literals,\nuntagged template literals,\nand the null literal\ncan all be used.\n\n* Numeric literals can additionally be prefixed with a `+` or `-` unary operator:\n    `+` is a no-op (but see the note about `0`, below),\n    but `-` negates the value,\n    as you'd expect.\n* Within the interpolation expressions of template literals,\n    see [Bindings](#bindings) for details on what bindings are visible.\n\nThe one exception to `SameValue` matching semantics\nis that the pattern `0` is matched using `SameValueZero` semantics.\n`+0` and `-0` are matched with `SameValue`, as normal.\n(This has the effect that an \"unsigned\" zero pattern\nwill match both positive and negative zero values,\nwhile the \"signed\" zero patterns\nwill only match the appropriately signed zero values.)\n\n(Additional notes for `SameValue` semantics:\nit works \"as expected\" for NaN values,\ncorrectly matching NaN values against NaN patterns;\nit does not do any implicit type coercion,\nso a `1` value will not match a `\"1\"` pattern.)\n\nNote: No coercion takes place in these matches:\nif you match against a string literal, for example,\nyour subject must already be a string\nor else it'll automatically fail the match,\neven if it would stringify to a matching string.\n\n#### Examples\n\n```js\n```\n\n\n### Variable Patterns\n\nA variable pattern is a \"ident expression\": `foo`, `foo.bar`, `foo[bar]` etc.,\nexcluding those that are already primitives like `null`,\nand optionally prefixed by a `+` or `-` unary operator.\n\nA variable pattern resolves the identifier against the visible bindings\n(see [Bindings](#bindings) for details),\nand if it has a `+` or `-` prefix,\nconverts it to a number (via `toValue`)\nand possibly negates it.\nIf the result is an object with a `Symbol.customMatcher` property,\nor is a function,\nthen it represents a custom matcher test.\nSee [custom matchers](#custom-matchers) for details.\nOtherwise, it represents a test that the subject is `SameValue` with the result,\nsimilar to a [Primitive Pattern](#primitive-patterns).\n\nNote: This implies that, for example,\na variable holding an array will only match that exact array,\nvia object equivalence;\nit is not equivalent to an [array pattern](#array-patterns)\ndoing a structural match.\n\nNote that several values which are often *thought of* as literals,\nlike `Infinity` or `undefined`,\nare in fact bindings.\nSince Primitive Patterns and Variable Patterns are treated largely identically,\nthe distinction can fortunately remain academic here.\n\nNote: Just like with Primitive Patterns,\nno coercion is performed on the subjects\n(or on the pattern value,\nexcept for the effect of `+`/`-`,\nwhich is explicitly asking for a numeric coercion),\nso the type has to already match.\n\n\n#### Examples\n\n```js\n```\n\n\n### Custom Matchers\n\nIf the object that the variable pattern resolves to\nhas a `Symbol.customMatcher` property in its prototype chain,\nthen it is a \"custom matcher\".\n\nTo determine whether the pattern matches or not,\nthe custom matcher function is invoked\nwith the subject as its first argument,\nand an object with the key `\"matchType\"` set to `\"boolean\"`\nas its second argument.\n\nIf it returns a truthy value\n(one which becomes `true` when `!!` is used on it)\nthe match is successful;\notherwise,\nthe match fails.\nIf it throws,\nit passes the error up.\n\nNote: [Extractor patterns](#extractor-patterns) use the identical machinery,\nbut allow further matching against the returned value,\nrather than being limited to just returning true/false.\n\n#### Examples\n\n```js\n```\n\n\n#### Built-in Custom Matchers\n\nSeveral JS objects have custom matchers installed on them by default.\n\nAll of the classes for primitive types\n(Boolean, String, Number, BigInt, Symbol)\nexpose a built-in Symbol.customMatcher static method,\nmatching if and only if the subject is\na primitive (or a boxed object) corresponding to that type\nThe return value of a successful match\n(for the purpose of [extractor patterns](#extractor-patterns))\nis an iterator containing the (possibly auto-unboxed) primitive value.\n\n```js\nclass Boolean {\n    static [Symbol.customMatcher](subject) {\n        return typeof subject == \"boolean\";\n    }\n}\n/* et cetera for the other primitives */\n```\n\n`Function.prototype` has a custom matcher\nthat checks if the function has an `[[IsClassConstructor]]` slot\n(meaning it's the `constructor()` function from a `class` block);\nif so, it tests whether the subject is an object of that class\n(using brand-checking to verify, similar to `Array.isArray()`);\nif not, it invokes the function as a predicate,\npassing it the subject,\nand returns the return value:\n\n```js\n/* roughly */\nFunction.prototype[Symbol.customMatcher] = function(subject) {\n    if(isClassConstructor(this)) {\n        return hasCorrectBrand(this, subject);\n    } else {\n        return this(subject);\n    }\n}\n```\n\nThis way, predicate functions can be used directly as matchers,\nlike `x is upperAlpha`,\nand classes can also be used directly as matchers\nto test if objects are of that class,\nlike `x is Option.Some`.\n\n`RegExp.prototype` has a custom matcher\nthat executes the regexp on the subject,\nand matches if the match was successful:\n\n```js\nRegExp.prototype[Symbol.customMatcher] = function(subject, {matchType}) {\n    const result = this.exec(subject);\n    if(matchType == \"boolean\") return result;\n    if(matchType == \"extractor\") return [result, ...result.slice(1)];\n}\n```\n\n\n#### Examples\n\n```js\n```\n\n\n### Binding Patterns\n\nA `let`, `const`, or `var` keyword followed by a valid variable name\n(identical to binding statements anywhere else).\nBinding patterns always match,\nand additionally introduce a binding,\nbinding the subject to the given name\nwith the given binding semantics.\n\n\n#### Binding Behavior Details\n\nAs with normal binding statements,\nthe bindings introduced by binding patterns\nare established in the nearest block scope\n(for `let`/`const`)\nor the nearest function scope (for `var`).\n\nIssue: Or in the obvious scope, when used in a for/while header or a function arglist.\nDon't know the right term for this off the top of my head.\n\nBindings are established according to their *presence* in a pattern;\nwhether or not the binding pattern itself is ever executed is irrelevant.\n(For example, `[1, 2] is [\"foo\", let foo]`\nwill still establish a `foo` binding in the block scope,\ndespite the first pattern failing to match\nand thus skipping the binding pattern.)\n\nStandard TDZ rules apply before the binding pattern is actually executed.\n(For example, `when [x, let x]` is an early `ReferenceError`,\nsince the `x` binding has not yet been initialized\nwhen the first pattern is run\nand attempts to dereference `x`.)\n\nUnlike standard binding rules,\nwithin the scope of an entire top-level pattern,\na given name can appear in multiple binding patterns,\nas long as all instances use the same binding type keyword.\nIt is a runtime `ReferenceError`\nif more than one of these binding patterns actually execute, however\n(with one exception - see [`or` patterns](#or-patterns)).\n(This behavior has precedent:\nit was previously the case that named capture groups\nhad to be completely unique within a regexp.\nNow they're allowed to be repeated\nas long as they're in different branches of an alternative,\nlike `/foo(?<part>.*)|(?<part>.*)foo/`.)\n\n\n#### Examples\n\n```js\n(x or [let y]) and (z or {key: let y})\n```\n\nValid at parse-time: both binding patterns name `y`\nwith `let` semantics.\nThis establishes a `y` binding in the nearest block scope.\n\nIf x *or* z matches, but not both,\nthen `y` gets bound appropriately.\nIf neither matches, `y` remains uninitialized\n(so it's a runtime ReferenceError to use it).\nIf both match, a runtime ReferenceError is thrown\nwhile executing the second `let y` pattern,\nas its binding has already been initialized.\n\n```js\n(x or [let y]) and (z or {key: const y})\n```\nEarly ReferenceError, as `y` is being bound twice\nwith differing semantics.\n\n```js\nx and let y and z and if(y == \"foo\")\n```\nValid at parse-time, establishes a `y` binding in block scope.\n\nIf x doesn't match,\n`y` remains uninitialized,\nbut the guard pattern is also skipped,\nso no runtime error (yet).\nIf z doesn't match,\n`y` is initialized to the match subject,\nbut the `if()` test never runs.\n\n```js\n[let x and String] or {length: let x}\n```\nValid at parse-time, establishes an `x` binding.\n\n[`or` pattern](#or-patterns) semantics allow overriding an already-initialized binding,\nif that binding came from an earlier failed sub-pattern,\nto avoid forcing authors to awkwardly arrange their binding patterns\nafter the fallible tests.\n\nSo in this example, if passed an object like `[5]`,\nit will pass the initial length check,\nexecute the `let x` pattern and bind it to `5`,\nthen fail the `String` pattern,\nas the subject is a `Number`.\nIt will then continue to the next `or` sub-pattern,\nand successfully bind `x` to 1,\nas the existing binding was initialized in a failed sub-pattern.\n\n\n\n## Structure Patterns\n\nStructure patterns let you test the structure of the subject\n(its properties, its length, etc)\nand then recurse into that structure with additional matcher patterns.\n\n### Array Patterns\n\nA comma-separated list of zero or more patterns, surrounded by square brackets.\nIt represents a test that:\n\n1. The subject is iterable.\n2. The subject contains exactly as many iteration items\n  as the length of the array pattern.\n3. Each item matches the associated sub-pattern.\n\nFor example, `[\"foo\", {bar}]` will match\nwhen the subject is an iterable with exactly two items,\nthe first item is the string `\"foo\"`,\nand the second item has a `bar` property.\n\nThe final item in the array pattern can optionally be a \"rest pattern\":\neither a literal `...`,\nor a `...` followed by another pattern.\nIn either case, the presence of a rest pattern relaxes the length test\n(2 in the list above)\nto merely check that the subject has *at least* as many items\nas the array pattern,\nignoring the rest pattern.\nThat is, `[a, b, ...]` will only match a subject\nwho contains 2 or more items.\n\nIf the `...` is followed by a pattern,\nlike `[a, b, ...let c]`,\nthen the iterator is fully exhausted,\nall the leftover items are collected into an `Array`,\nand that array is then applied as the subject of the rest pattern's test.\n\nNote: The above implies that `[a, b]` will pull three items from the subject:\ntwo to match against the sub-patterns,\nand a third to verify that the subject doesn't *have* a third item.\n`[a, b, ...]` will pull only two items from the subject,\nto match against the sub-patterns.\n`[a, b, ...c]` will exhaust the subject's iterator,\nverifying it has at least two items\n(to match against the sub-patterns)\nand then pulling the rest to match against the rest pattern.\n\nArray pattern execution order is as follows:\n\n1. Obtain an iterator from the subject. Return failure if this fails.\n2. For each expected item up to the number of sub-patterns (ignoring the rest pattern, if present):\n    1. Pull one item from the iterator. Return failure if this fails.\n    2. Execute the corresponding pattern. Return failure if this doesn't match.\n3. If there is no rest pattern, pull one more item from the iterator, verifying that it's a `{done: true}` result. If so, return success; if not, return failure.\n4. If there is a `...` rest pattern, return success.\n5. If there is a `...<pattern>` rest pattern, pull the remaining items of the iterator into a fresh `Array`, then match the pattern against that. If it matches, return success; otherwise return failure.\n\nIssue: Or should we pull all the necessary values from the iterator first,\n*then* do all the matchers?\n\n#### Examples\n\n```js\nmatch (res) {\n  when isEmpty: ...;\n  when {data: [let page] }: ...;\n  when {data: [let frontPage, ...let pages] }: ...;\n  default: ...;\n}\n```\n\n[**Array patterns**](#array-patterns) implicitly check the length of the subject.\n\nThe first arm is a [variable pattern](#variable-patterns),\ninvoking the default `Function.prototype` custom matcher\nwhich calls `isEmpty(res)`\nand matches if that returns `true`.\n\nThe second arm is an [object pattern](#object-patterns)\nwhich contains an [array pattern](#array-patterns),\nwhich matches if `data` has exactly one element,\nand binds that element to `page` for the RHS.\n\nThe third arm matches if `data` has **at least one** element,\nbinding that first element to `frontPage`,\nand binding an array of any remaining elements to `pages`\nusing a rest pattern.\n\n\n#### Array Pattern Caching\n\nTo allow for idiomatic uses of generators\nand other \"single-shot\" iterators\nto be reasonably matched against several array patterns,\nthe iterators and their results are cached over the scope of the match construct.\n\nSpecifically, whenever a subject is matched against an array pattern,\nthe subject is used as the key in a cache,\nwhose value is the iterator obtained from the subject,\nand all items pulled from the subject by an array pattern.\n\nWhenever something would be matched against an array pattern,\nthe cache is first checked,\nand the already-pulled items stored in the cache are used for the pattern,\nwith new items pulled from the iterator only if necessary.\n\nFor example:\n\n```js\nfunction* integers(to) {\n  for(var i = 1; i <= to; i++) yield i;\n}\n\nconst fiveIntegers = integers(5);\nmatch (fiveIntegers) {\n  when [let a]:\n    console.log(`found one int: ${a}`);\n    // Matching a generator against an array pattern.\n    // Obtain the iterator (which is just the generator itself),\n    // then pull two items:\n    // one to match against the `a` pattern (which succeeds),\n    // the second to verify the iterator only has one item\n    // (which fails).\n  when [let a, let b]:\n    console.log(`found two ints: ${a} and ${b}`);\n    // Matching against an array pattern again.\n    // The generator object has already been cached,\n    // so we fetch the cached results.\n    // We need three items in total;\n    // two to check against the patterns,\n    // and the third to verify the iterator has only two items.\n    // Two are already in the cache,\n    // so we’ll just pull one more (and fail the pattern).\n  default: console.log(\"more than two ints\");\n}\nconsole.log([...fiveIntegers]);\n// logs [4, 5]\n// The match construct pulled three elements from the generator,\n// so there’s two leftover afterwards.\n```\n\nWhen execution of the match construct finishes, all cached iterators are closed.\n\n\n### Object Patterns\n\nA comma-separated list of zero or more \"object pattern clauses\", wrapped in curly braces.\nEach \"object pattern clause\" is either `<key>`, `let/var/const <ident>` or `<key>: <pattern>`,\nwhere `<key>` is an identifier or a computed-key expression like `[Symbol.foo]`.\nIt represents a test that the subject:\n\n1. Has every specified property in its prototype chain.\n2. If the key has an associated sub-pattern,\n    then the value of that property matches the sub-pattern.\n\nA `<key>` object pattern clause\nis exactly equivalent to `<key>: void`.\nA `let/var/const <ident>` object pattern clause\nis exactly equivalent to `<ident>: let/var/const <ident>`.\n\nThat is, `when {foo, let bar, baz: \"qux\"}`\nis equivalent to `when {foo: void, bar: let bar, baz: \"qux\"}`:\nit tests that the subject has `foo`, `bar`, and `baz` properties,\nintroduces a `bar` binding for the value of the `bar` property,\nand verifies that the value of the `baz` property is the string `\"qux\"`.\n\nAdditionally, object patterns can contain a \"rest pattern\":\na `...` followed by a pattern.\nUnlike array patterns, a lone `...` is not valid in an object pattern\n(since there's no strict check to relax).\nIf the rest pattern exists,\nthen all *enumerable own properties*\nthat aren't already matched by object pattern clauses\nare collected into a fresh object,\nwhich is then matched against the rest pattern.\n(This matches the behavior of object destructuring.)\n\nIssue: Do we want a `key?: pattern` pattern clause as well?\nMakes it an optional test -\n*if* the subject has this property,\nverify that it matches the pattern.\nIf the pattern is skipped because the property doesn't exist,\ntreat any bindings coming from the pattern\nthe same as ones coming from skipped `or` patterns.\n\nIssue: Ban `__proto__`? Do something funky?\n\nObject pattern execution order is as follows:\n\n1. For each non-rest object pattern clause `key: sub-pattern`, in source order:\n    1. Check that the subject has the property `key` (using `in`, or `HasProperty()`, semantics). If it doesn't, return failure.\n    2. Get the value of the `key` property, and match it against `sub-pattern`. If that fails to match, return failure.\n2. If there's a rest pattern clause,\n    collect all enumerable own properties of the subject\n    that weren't tested in the previous step,\n    and put them into a fresh `Object`.\n    Match that against the rest pattern.\n    If that fails, return failure.\n3. Return success.\n\n#### Examples\n\n```js\n```\n\n#### Object Pattern Caching\n\nSimilar to [array pattern caching](#array-pattern-caching),\nobject patterns cache their results over the scope of the match construct,\nso that multiple clauses don’t observably retrieve the same property multiple times.\n\n(Unlike array pattern caching,\nwhich is necessary for this proposal to work with iterators,\nobject pattern caching is a nice-to-have.\nIt does guard against some weirdness like non-idempotent getters\n(including, notably, getters that return iterators),\nand helps make idempotent-but-expensive getters usable in pattern matching\nwithout contortions,\nbut mostly it’s just for conceptual consistency.)\n\nWhenever a subject is matched against an object pattern,\nfor each property name in the object pattern,\na `(<subject>, <property name>)` tuple is used as the key in a cache,\nwhose value is the value of the property.\n\nWhenever something would be matched against an object pattern,\nthe cache is first checked,\nand if the subject and that property name are already in the cache,\nthe value is retrieved from cache instead of by a fresh Get against the subject.\n\nFor example:\n\n```js\nconst randomItem = {\n  get numOrString() { return Math.random() < .5 ? 1 : \"1\"; }\n};\n\nmatch (randomItem) {\n  when {numOrString: Number}:\n    console.log(\"Only matches half the time.\");\n    // Whether the pattern matches or not,\n    // we cache the (randomItem, \"numOrString\") pair\n    // with the result.\n  when {numOrString: String}:\n    console.log(\"Guaranteed to match the other half of the time.\");\n    // Since (randomItem, \"numOrString\") has already been cached,\n    // we reuse the result here;\n    // if it was a string for the first clause,\n    // it’s the same string here.\n}\n```\n\nIssue: This potentially introduces a lot more caching,\nand the major use-case is just making sure that iterator caching\nworks both at the top-level and when nested in an object.\nExpensive or non-idempotent getters benefit,\nbut that's a much less important benefit.\nThis caching *is* potentially droppable,\nbut it will mean that we only cache iterables at the top level.\n\n### Extractor Patterns\n\nA dotted-ident followed by a parenthesized \"argument list\"\ncontaining the same syntax as an [array matcher](#array-matcher).\nRepresents a combination of a [custom matcher pattern](#custom-matcher-pattern)\nand an [array pattern](#array-patterns):\n\n1. The dotted-ident is resolved against the visible bindings.\n    If that results in an object with a `Symbol.customMatcher` property,\n    and the value of that property is a function,\n    then continue;\n    otherwise, this throws an XXX error.\n\n2. The custom matcher function is invoked with the subject as its first argument,\n    and an object with the key `\"matchType\"` set to `\"extractor\"`\n    as its second argument.\n    Let <var>result</var> be the return value.\n\n3. Match <var>result</var> against the [arglist pattern](#arglist-patterns).\n\nNote: While [custom matchers](#custom-matchers) only require the return value be *truthy* or *falsey*,\nextractor patterns are stricter about types:\nthe value must be *exactly* `true` or `false`,\nor an `Array`,\nor an iterable.\n\n#### Arglist Patterns\n\nAn arglist pattern is a sub-pattern of an Extractor Pattern,\nand is mostly identical to an [Array Pattern](#array-patterns).\nIt has identical syntax,\nexcept it's bounded by parentheses (`()`)\nrather than square brackets (`[]`).\nIt behaves slightly differently with a few subjects, as well:\n\n* a `false` subject always fails to match\n* a `true` subject matches as if it were an empty Array\n* an `Array` subject is matched per-index,\n    rather than invoking the iterator protocol.\n\nIf the subject is an `Array`,\nthen it's matched as follows:\n\n1. If the arglist pattern doesn't end in a rest pattern,\n    then the subject's `length` property must exactly equal\n    the length of the pattern,\n    or it fails to match.\n\n2. If the arglist pattern *does* end in a rest pattern,\n    then the subject's `length` property must be equal or greater\n    than the length of the pattern - 1,\n    or it fails to match.\n\n3. For each non-rest sub-pattern of the arglist pattern,\n    the corresponding integer-valued property of the subject is fetched,\n    and matched against the corresponding sub-pattern.\n\n4. If the final sub-pattern is a `...<pattern>`,\n    collect the remaining integer-valued properties of the subject,\n    up to but not including its `length` value,\n    into a fresh Array,\n    and match against that pattern.\n\n5. If any of the matches failed,\n    the entire arglist pattern fails to match.\n    Otherwise, it succeeds.\n\nOther than the above exceptions,\narglist patterns are matched\nexactly the same as array patterns.\n\nIssue: Do we cache arglists the same way we cache array patterns?\n\nNote: The `Array` behavior here\nis for performance, based on implementor feedback.\nInvoking the iterator protocol is expensive,\nand we don't want to discourage use of custom matchers\nwhen the *by far* expected usage pattern\nis to just return an `Array`,\nrather than some more complex iterable.\nWe're (currently) still sticking with iterator protocol for array matchers,\nto match destructuring,\nbut could potentially change that.\n\n\n\n#### Examples\n\n```js\nclass Option {\n  constructor() { throw new TypeError(); }\n  static Some = class extends Option {\n    constructor(value) { this.value = value; }\n    map(cb) { return new Option.Some(cb(this.value)); }\n    // etc\n    static [Symbol.customMatcher](subject) {\n      if (subject instanceof Option.Some) { return [subject.value]; }\n      return false;\n    }\n  };\n\n  static None = class extends Option {\n    constructor() { }\n    map(cb) { return this; }\n    // Use the default custom matcher,\n    // which just checks that the subject matches the class.\n  };\n}\n\nlet val = Option.Some(5);\nmatch(val) {\n  when Option.Some(String and let a): console.log(`Got a string \"${a}\".`);\n  when Option.Some(Number and let a): console.log(`Got a number ${a}.`);\n  when Option.Some(...): console.log(`Got something unexpected.`);\n  // Or `Option.Some`, either works.\n  // `Option.Some()` will never match, as the return value\n  // is a 1-item array, which doesn't match `[]`\n  when Option.None(): console.log(`Operation failed.`);\n  // or `Option.None`, either works\n  default: console.log(`Didn't get an Option at all.`)\n}\n```\n\nIssue: We don't have an easy way to get access to the \"built-in\" custom matcher,\nso the above falls back to doing an instanceof test\n(rather than the technically more correct branding test\nthat the built-in one does).\nTo work \"properly\" I'd have to define the class without a custom matcher,\nthen pull off the custom matcher,\nsave it to a local variable,\nand define a new custom matcher that invokes the original one\nand returns the `[subject.value]` on success.\nThat's a silly amount of work for correctness.\n\n\n## Combinator Patterns\n\nSometimes you need to match multiple patterns on a single value,\nor pass a value that matches any of several patterns,\nor just negate a pattern.\nAll of these can be achieved with combinator patterns.\n\n### And Patterns\n\nTwo or more patterns, each separated by the keyword `and`.\nThis represents a test\nthat the subject passes *all* of the sub-patterns.\nAny pattern can be\n(and in some cases must be, see [combining combinators](#combining-combinator-patterns))\nwrapped in parentheses.\n\nShort-circuiting applies; if any sub-pattern fails to match the subject,\nmatching stops immediately.\n\n`and` pattern execution order is as follows:\n\n1. For each sub-pattern, in source order, match the subject against the sub-pattern. If that fails to match, return failure.\n2. Return success.\n\n\n### Or Patterns\n\nTwo or more patterns, each separated by the keyword `or`.\nThis represents a test\nthat the subject passes *at least one* of the sub-patterns.\nAny pattern can be\n(and in some cases must be, see [combining combinators](#combining-combinator-patterns))\nwrapped in parentheses.\n\nShort-circuiting applies; if any sub-pattern successfully matches the subject,\nmatching stops immediately.\n\n`or` pattern execution order is as follows:\n\n1. For each sub-pattern, in source order, match the subject against the sub-pattern. If that successfully matches, return success.\n2. Return failure.\n\nNote: As defined in [Binding Behavior Details](#binding-behavior-details),\na [binding pattern](#binding-patterns) in a failed sub-pattern\ncan be overridden by a binding pattern in a later sub-pattern\nwithout error.\nThat is, `[let foo] or {length: let foo}` is valid\nboth at parse-time and run-time,\neven tho the `foo` binding is potentially initialized twice\n(given a subject like `[1, 2]`).\n\n\n### Not Patterns\n\nA pattern preceded by the keyword `not`.\nThis represents a test that the subject *does not* match the sub-pattern.\nThe pattern can be\n(and in some cases must be, see [combining combinators](#combining-combinator-patterns))\nwrapped in parentheses.\n\n\n### Combining Combinator Patterns\n\nCombinator patterns cannot be combined at the same \"level\";\nthere is no precedence relationship between them.\nInstead, parentheses must be used to explicitly provide an ordering.\n\nThat is, `foo and bar or baz` is a syntax error;\nit must be written `(foo and bar) or baz`\nor `foo and (bar or baz)`.\n\nSimilarly, `not foo and bar` is a syntax error;\nit must be written `(not foo) and bar`\nor `not (foo and bar)`.\n\n\n## Guard Patterns\n\nA guard pattern has the syntax `if(<expression>)`,\nand represents a test that the expression is truthy.\nThis is an arbitrary JS expression,\n*not* a pattern.\n\n\n\n# `match` expression\n\n`match` expressions are a new type of expression\nthat makes use of [patterns](#patterns)\nto select one of several expressions to resolve to.\n\nA match expression looks like:\n\n```js\nmatch(<subject-expression>) {\n    when <pattern>: <value-expression>;\n    when <pattern>: <value-expression>;\n    ...\n    default: <value-expression>;\n}\n```\n\nThat is, the `match` head contains a `<subject-expression>`,\nwhich is an arbitrary JS expression\nthat evaluates to a \"subject\".\n\nThe `match` block contains zero or more \"match arms\",\nconsisting of:\n* the keyword `when`\n* a [pattern](#patterns)\n* a literal colon\n* an arbitrary JS expression\n* a semicolon (yes, required)\n\nAfter the match arms,\nit can optionally contain default a \"default arm\",\nconsisting of:\n* the keyword `default`\n* a literal colon\n* an arbitrary JS expression\n* a semicolon\n\nAfter obtaining the subject,\neach match arm is tested in turn,\nmatching the subject against the arm's pattern.\nIf the match is successful,\nthe arm's expression is evaluated,\nand the `match` expression resolves to that result.\n\nIf all match arms fail to match,\nand there is a default arm,\nthe default arm's expression is evaluated,\nand the `match` expression resolves to that result.\nIf there is no default arm,\nthe `match` expression throws a `TypeError`.\n\n## Bindings\n\nThe `<subject-expression>` is part of the nearest block scope.\n\nEach match arm and the default arm\nare independent nested block scopes,\ncovering both the pattern and the expression of the arm.\n(That is, different arms can't see each other's bindings,\nand the bindings don't escape the `match` expression.\nWithin each arm, they shadow the outer scope's bindings.)\n\n## Examples\n\n```jsx\nmatch (res) {\n  when { status: 200, let body, ...let rest }: handleData(body, rest);\n  when { const status, destination: let url } and if (300 <= status && status < 400):\n    handleRedirect(url);\n  when { status: 500 } and if (!this.hasRetried): do {\n    retry(req);\n    this.hasRetried = true;\n  };\n  default: throwSomething();\n}\n```\n\nThis example tests a \"response\" object against several patterns,\nbranching based on the `.status` property,\nand extracting different parts from the response in each branch\nto process in various handler functions.\n\n-----\n\n```js\nmatch (command) {\n  when ['go', let dir and ('north' or 'east' or 'south' or 'west')]: go(dir);\n  when ['take', /[a-z]+ ball/ and {let weight}: takeBall(weight);\n  default: lookAround()\n}\n```\n\nThis sample is a contrived parser for a text-based adventure game.\n\nThe first match arm matches if the command is an array with exactly two items.\nThe first must be exactly the string `'go'`,\nand the second must be one of the given cardinal directions.\nNote the use of the [**and pattern**](#and-patterns)\nto bind the second item in the array to `dir`\nusing a [**binding pattern**](#binding-patterns)\nbefore verifying (using the [or pattern](#or-patterns))\nthat it’s one of the given directions.\n\nThe second match arm is slightly more complex.\nFirst, a [regex pattern](#regex-patterns) is used\nto verify that the object stringifies to `\"something ball\"`,\nthen an [object patterns](#object-patterns)\nverifies that it has a `.weight` property\nand binds it to `weight`,\nso that the weight is available to the arm's expression.\n\n## Statement vs Expression\n\nFor maximum expressivity,\nthe `match` expression is an expression, not a statement.\nThis allows for easy use in expression contexts\nlike `return match(val){...}`.\n\nIt can, of course, be used in statement context,\nas in the first example above.\nHowever, the match arms still contain expressions only.\n\nIt is *expected* that do-expressions will allow\nfor match arms to execute statements\n(again, as in the first example above).\nIf that proposal does not end up advancing,\na future iteration of this proposal will include some way\nto have a match arm contain statements.\n(Probably just by inlining do-expr's functionality.)\n\n# `is` operator\n\nThe `is` operator is a new boolean operator,\nof the form `<subject-expression> is <pattern>`.\nIt returns a boolean result,\nindicating whether the subject matched the pattern or not.\n\n## Bindings\n\nBindings established in the pattern of an `is`\nare visible in the nearest block scope,\nas defined in [Binding Patterns](#binding-patterns).\n\nThis includes when used in the head of an `if()` statement:\n\n```js\nfunction foo(x) {\n    if(x is [let head, ...let rest]) {\n        console.log(head, rest);\n    } else {\n        // `head` and `rest` are defined here,\n        // but will throw a ReferenceError if dereferenced,\n        // since if the pattern failed\n        // the binding patterns must not have been executed.\n    }\n}\n\nfunction bar(x) {\n    if(x is not {let necessaryProperty}) {\n        // Pattern succeeded, because `x.necessaryProperty`\n        // doesn't exist.\n        return;\n    }\n    // Here the pattern failed because `x.necessaryProperty`\n    // *does* exist, so the binding pattern was executed,\n    // and the `necessaryProperty` binding is visible here.\n    console.log(necessaryProperty);\n}\n```\n\nWhen used in the head of a `for()`,\nthe usual binding scopes apply:\nthe bindings are scoped to the `for()` head+block,\nand in the case of `for-of`,\nare copied to the inner per-iteration binding scopes.\n\n`while` and `do-while` do not currently have any special scoping rules\nfor things in their heads.\nWe propose that they adopt the same rules as `for-of` blocks:\nthe head is in a new scope surrounding the rule,\nand its bindings are copied to a per-iteration scope\nsurrounding the `{}` block.\nFor do-while,\nthe bindings are TDZ on the first iteration,\nbefore the head is executed.\n\n\n\n\n\n\n# Motivating examples\n\nBelow are selected situations where we expect pattern matching will be widely\nused. As such, we want to optimize the ergonomics of such cases to the best of\nour ability.\n\n------\n\nValidating JSON structure.\n\nHere's the simple destructuring version of the code,\nwhich does zero checks on the data ahead of time,\njust pulls it apart and hopes everything is correct:\n\n```js\nvar json = {\n  'user': ['Lily', 13]\n};\nvar {user: [name, age]} = json;\nprint(`User ${name} is ${age} years old.`);\n```\n\nDestructuring with checks that everything is correct and of the expected shape:\n\n```js\nif ( json.user !== undefined ) {\n  var user = json.user;\n  if (Array.isArray(user) &&\n      user.length == 2 &&\n      typeof user[0] == \"string\" &&\n      typeof user[1] == \"number\") {\n    var [name, age] = user;\n    print(`User ${name} is ${age} years old.`);\n  }\n}\n```\n\nExactly the same checks, but using pattern-matching:\n\n```js\nif( json is {user: [String and let name, Number and let age]} ) {\n  print(`User ${name} is ${age} years old.`);\n}\n```\n\n------\n\nMatching `fetch()` responses:\n\n```jsx\nconst res = await fetch(jsonService)\nmatch (res) {\n  when { status: 200, headers: { 'Content-Length': let s } }:\n    console.log(`size is ${s}`);\n  when { status: 404 }:\n    console.log('JSON not found');\n  when { let status } and if (status >= 400): do {\n    throw new RequestError(res);\n  }\n};\n```\n\n---\n\nMore concise, more functional handling of Redux reducers (compare with\n[this same example in the Redux documentation](https://redux.js.org/basics/reducers#splitting-reducers)):\n\n```jsx\nfunction todosReducer(state = initialState, action) {\n  return match (action) {\n    when { type: 'set-visibility-filter', payload: let visFilter }:\n      { ...state, visFilter };\n    when { type: 'add-todo', payload: let text }:\n      { ...state, todos: [...state.todos, { text, completed: false }] };\n    when { type: 'toggle-todo', payload: let index }: do {\n      const newTodos = state.todos.map((todo, i) => {\n        return i !== index ? todo : {\n          ...todo,\n          completed: !todo.completed\n        };\n      });\n\n      ({\n        ...state,\n        todos: newTodos,\n      });\n    }\n    default: state // ignore unknown actions\n  }\n}\n```\n\n---\n\nConcise conditional logic in JSX (via\n[Divjot Singh](https://twitter.com/bogas04/status/977499729557839873)):\n\n```jsx\n<Fetch url={API_URL}>\n  {props => match (props) {\n    when {loading}: <Loading />;\n    when {let error}: do {\n      console.err(\"something bad happened\");\n      <Error error={error} />\n    };\n    when {let data}: <Page data={data} />;\n  }}\n</Fetch>\n```\n\n\n# Possible future enhancements\n\n## Void Patterns\n\nThe keyword `void` is a pattern\nthat always matches,\nand does nothing else.\nIt's useful in structure patterns,\nwhen you want to test for the existence of a property\nwithout caring what its value is.\n\nThis is the most likely proposal to move back into the main proposal;\nit's pulled out solely because we want to make sure\nthat it stays consistent\nwith [Void Bindings](https://github.com/tc39/proposal-discard-binding).\n\n## `async match`\n\nIf the `match` construct appears inside a context where `await` is allowed,\n`await` can already be used inside it, just like inside `do` expressions.\nHowever, just like `async do` expressions, there’s uses of being able to use\n`await` and produce a Promise, even when not already inside an `async function`.\n\n```js\nasync match (await subject) {\n  when { let a }: await a;\n  when { let b }: b.then(() => 42);\n  default: await somethingThatRejects();\n} // produces a Promise\n```\n\n## Relational Patterns\n\nCurrently there are patterns for expressing various types of equality,\nand kinda an instanceof (for custom matchers against a class).\nWe could express more types of operator-based checks,\nlike:\n\n```js\nmatch(val) {\n    when < 10: console.log(\"small\");\n    when >= 10 and < 20: console.log(\"mid\");\n    default: \"large\";\n}\n```\n\nGenerally, all the binary boolean operators could be used,\nwith the subject as the implicit LHS of the operator.\n\n(This would slightly tie our hands on future syntax expansions for patterns,\nbut it's unlikely we'd ever *want* to reuse existing operators\nin a way that's different from how they work in expression contexts.)\n\n## Default Values\n\nDestructuring can supply a default value with `= <expr>` which is used when a\nkey isn’t present. Is this useful for pattern matching?\n\nOptional keys seem reasonable; right now they’d require duplicating the pattern\nlike `({a, b} or {a})` (`b` will be bound to undefined in the RHS if not present).\n\nDo we need/want full defaulting? Does it complicate the syntax to much to have\narbitrary JS expressions there, without anything like wrapper characters to\ndistinguish it from surrounding patterns?\n\nThis would bring us into closer alignment with destructuring, which is nice.\n\n\n## Destructuring enhancements\n\nBoth destructuring and pattern matching should remain in sync, so enhancements\nto one would need to work for the other.\n\n## Integration with `catch`\n\nAllow a `catch` statement to conditionally catch an exception, saving a level of\nindentation:\n\n```js\ntry {\n  throw new TypeError('a');\n} catch match (e) {\n  when RangeError: ...;\n  when /^abc$/: ...;\n  // unmatched, default to rethrowing e\n}\n```\n\nOr possibly just allow an `is` check in the catch head:\n\n```js\ntry {\n  throw new TypeError('a');\n} catch (e is RangeError) {\n    ...\n} catch (e is /^abc$/) {\n    ...\n}\n```\n\n(In both cases, the name used for the subject automatically creates a binding,\nsame as `catch (e)` does today.)\n\n## Chaining guards\n\nSome reasonable use-cases require repetition of patterns today, like:\n\n```js\nmatch (res) {\n  when { status: 200 or 201, let pages, let data } and if (pages > 1):\n    handlePagedData(pages, data);\n  when { status: 200 or 201, let pages, let data } and if (pages === 1):\n    handleSinglePage(data);\n  default: handleError(res);\n}\n```\n\nWe might want to allow match constructs to be chained, where the child match\nconstruct sees the bindings introduced in their parent clause, and which will\ncause the entire parent clause to fail if none of the sub-classes match.\n\nThe above would then be written as:\n\n```js\nmatch (res) {\n  when { status: 200 or 201, let data } match {\n    when { pages: 1 }: handleSinglePage(data);\n    when { pages: >= 2 and let pages }: handlePagedData(pages, data);\n  };\n  default: handleError(res);\n  // runs if the status indicated an error,\n  // or if the data didn't match one of the above cases,\n  // notably if pages == 0\n}\n```\n\nNote the lack of a `<subject-expression>` in the child (just `match {...}`), to\nsignify that it’s chaining from the `when` rather than just being part an\nindependent match construct in the RHS (which would, instead, throw if none of\nthe clauses match):\n\n```js\nmatch (res) {\n  when { status: 200 or 201, let data }: match(res) {\n    when { pages: 1}: handleSinglePage(data);\n    when { pages: >= 2 and let pages}: handlePagedData(pages, data);\n    // just an RHS, so if pages == 0,\n    // the inner construct fails to match anything\n    // and throws a TypeError\n  };\n  default: handleError(res);\n}\n```\n\nThe presence or absence of the separator colon also distinguishes these cases,\nof course.\n\n\n<!--\n## Implementations\n\n* [Babel Plugin](https://github.com/babel/babel/pull/9318)\n* [Sweet.js macro](https://github.com/natefaubion/sparkler) (NOTE: this isn’t based on the proposal, this proposal is partially based on it!)\n-->\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.html",
          "type": "blob",
          "size": 410.1083984375,
          "content": "<!doctype html>\n<head><meta charset=\"utf-8\"><meta property=\"og:image\" content=\"https://tc39.es/ecmarkup/ecma-logo.png\"><meta property=\"og:title\" content=\"Pattern Matching\"><meta property=\"og:description\" content=\"Welcome\n\n  \n    TODOs\n    \n      \n        Scope and bindings\n        \n          Basic case.\n          Work with `for` loop (CreatePerIterationEnvironment).\n          Work with function parameters.\n        \n      \n    \n  \n\n  \n      Introduction\n      This specification consists of the following pa\">\n<title>Pattern Matching</title><script src=\"assets/ecmarkup.js?cache=rh3pBrXc\" defer=\"\"></script><link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.0.1/styles/base16/solarized-light.min.css\"><link rel=\"stylesheet\" href=\"assets/ecmarkup.css\"><link rel=\"stylesheet\" href=\"assets/print.css\" media=\"print\"><style>\n    @media print {\n      @page :left {\n        @bottom-right {\n          content: '© Ecma International 2024';\n        }\n      }\n      @page :right {\n        @bottom-left {\n          content: '© Ecma International 2024';\n        }\n      }\n      @page :first {\n        @bottom-left {\n          content: '';\n        }\n        @bottom-right {\n          content: '';\n        }\n      }\n      @page :blank {\n        @bottom-left {\n          content: '';\n        }\n        @bottom-right {\n          content: '';\n        }\n      }\n    }\n    </style></head><body><div id=\"shortcuts-help\">\n<ul>\n  <li><span>Toggle shortcuts help</span><code>?</code></li>\n  <li><span>Toggle \"can call user code\" annotations</span><code>u</code></li>\n\n  <li><span>Jump to search box</span><code>/</code></li>\n  <li><span>Toggle pinning of the current clause</span><code>p</code></li>\n  <li><span>Jump to <i>n</i>th pin</span><code>1-9</code></li>\n</ul></div><div id=\"menu-toggle\"><svg xmlns=\"http://www.w3.org/2000/svg\" style=\"width:100%; height:100%; stroke:currentColor\" viewBox=\"0 0 120 120\" width=\"54\" height=\"54\">\n      <title>Menu</title>\n      <path stroke-width=\"10\" stroke-linecap=\"round\" d=\"M30,60 h60  M30,30 m0,5 h60  M30,90 m0,-5 h60\"></path>\n    </svg></div><div id=\"menu-spacer\" class=\"menu-spacer\"></div><div id=\"menu\"><div id=\"menu-search\"><input type=\"text\" id=\"menu-search-box\" placeholder=\"Search...\"><div id=\"menu-search-results\" class=\"inactive\"></div></div><div id=\"menu-pins\"><div class=\"menu-pane-header\">Pins<button class=\"unpin-all\">clear</button></div><ul id=\"menu-pins-list\"></ul></div><div class=\"menu-pane-header\">Table of Contents</div><div id=\"menu-toc\"><ol class=\"toc\"><li><span class=\"item-toggle\">+</span><a href=\"#welcome\" title=\"Welcome\">Welcome</a><ol class=\"toc\"><li><span class=\"item-toggle-none\"></span><a href=\"#sec-todos\" title=\"TODOs\">TODOs</a></li><li><span class=\"item-toggle-none\"></span><a href=\"#sec-nav\" title=\"Introduction\">Introduction</a></li><li><span class=\"item-toggle-none\"></span><a href=\"#sec-notes-layering\" title=\"Layering\">Layering</a></li></ol></li><li><span class=\"item-toggle\">+</span><a href=\"#sec-overview\" title=\"Overview\"><span class=\"secnum\">4</span> Overview</a><ol class=\"toc\"><li><span class=\"item-toggle-none\"></span><a href=\"#sec-organization-of-this-specification\" title=\"Organization of This Specification\"><span class=\"secnum\">4.5</span> Organization of This Specification</a></li></ol></li><li><span class=\"item-toggle\">+</span><a href=\"#sec-ecmascript-data-types-and-values\" title=\"ECMAScript Data Types and Values\"><span class=\"secnum\">6</span> ECMAScript Data Types and Values</a><ol class=\"toc\"><li><span class=\"item-toggle\">+</span><a href=\"#sec-ecmascript-language-types\" title=\"ECMAScript Language Types\"><span class=\"secnum\">6.1</span> ECMAScript Language Types</a><ol class=\"toc\"><li><span class=\"item-toggle\">+</span><a href=\"#sec-ecmascript-language-types-symbol-type\" title=\"The Symbol Type\"><span class=\"secnum\">6.1.5</span> The Symbol Type</a><ol class=\"toc\"><li><span class=\"item-toggle-none\"></span><a href=\"#sec-well-known-symbols\" title=\"Well-Known Symbols\"><span class=\"secnum\">6.1.5.1</span> Well-Known Symbols</a></li></ol></li><li><span class=\"item-toggle-none\"></span><a href=\"#sec-object-internal-methods-and-internal-slots\" title=\"Object Internal Methods and Internal Slots\"><span class=\"secnum\">6.1.7</span> Object Internal Methods and Internal Slots</a></li></ol></li></ol></li><li><span class=\"item-toggle\">+</span><a href=\"#sec-abstract-operations\" title=\"Abstract Operations\"><span class=\"secnum\">7</span> Abstract Operations</a><ol class=\"toc\"><li><span class=\"item-toggle\">+</span><a href=\"#sec-operations-on-objects\" title=\"Operations on Objects\"><span class=\"secnum\">7.3</span> Operations on Objects</a><ol class=\"toc\"><li><span class=\"item-toggle-none\"></span><a href=\"#sec-initializeinstance\" title=\"InitializeInstanceElements ( O, constructor )\"><span class=\"secnum\">7.3.34</span> InitializeInstanceElements ( <var>O</var>, <var>constructor</var> )</a></li></ol></li></ol></li><li><span class=\"item-toggle\">+</span><a href=\"#sec-syntax-directed-operations\" title=\"Syntax-Directed Operations\"><span class=\"secnum\">8</span> Syntax-Directed Operations</a><ol class=\"toc\"><li><span class=\"item-toggle\">+</span><a href=\"#sec-syntax-directed-operations-scope-analysis\" title=\"Scope Analysis\"><span class=\"secnum\">8.2</span> Scope Analysis</a><ol class=\"toc\"><li><span class=\"item-toggle-none\"></span><a href=\"#sec-static-semantics-boundnames\" title=\"Static Semantics: BoundNames\"><span class=\"secnum\">8.2.1</span> SS: BoundNames</a></li><li><span class=\"item-toggle-none\"></span><a href=\"#sec-static-semantics-declarationpart\" title=\"Static Semantics: DeclarationPart\"><span class=\"secnum\">8.2.2</span> SS: DeclarationPart</a></li><li><span class=\"item-toggle-none\"></span><a href=\"#sec-static-semantics-isconstantdeclaration\" title=\"Static Semantics: IsConstantDeclaration\"><span class=\"secnum\">8.2.3</span> SS: IsConstantDeclaration</a></li><li><span class=\"item-toggle-none\"></span><a href=\"#sec-static-semantics-lexicallydeclarednames\" title=\"Static Semantics: LexicallyDeclaredNames\"><span class=\"secnum\">8.2.4</span> SS: LexicallyDeclaredNames</a></li><li><span class=\"item-toggle-none\"></span><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\" title=\"Static Semantics: LexicallyScopedDeclarations\"><span class=\"secnum\">8.2.5</span> SS: LexicallyScopedDeclarations</a></li><li><span class=\"item-toggle-none\"></span><a href=\"#sec-static-semantics-vardeclarednames\" title=\"Static Semantics: VarDeclaredNames\"><span class=\"secnum\">8.2.6</span> SS: VarDeclaredNames</a></li><li><span class=\"item-toggle-none\"></span><a href=\"#sec-static-semantics-varscopeddeclarations\" title=\"Static Semantics: VarScopedDeclarations\"><span class=\"secnum\">8.2.7</span> SS: VarScopedDeclarations</a></li><li><span class=\"item-toggle-none\"></span><a href=\"#sec-static-semantics-toplevellexicallydeclarednames\" title=\"Static Semantics: TopLevelLexicallyDeclaredNames\"><span class=\"secnum\">8.2.8</span> SS: TopLevelLexicallyDeclaredNames</a></li><li><span class=\"item-toggle-none\"></span><a href=\"#sec-static-semantics-toplevellexicallyscopeddeclarations\" title=\"Static Semantics: TopLevelLexicallyScopedDeclarations\"><span class=\"secnum\">8.2.9</span> SS: TopLevelLexicallyScopedDeclarations</a></li><li><span class=\"item-toggle-none\"></span><a href=\"#sec-static-semantics-toplevelvardeclarednames\" title=\"Static Semantics: TopLevelVarDeclaredNames\"><span class=\"secnum\">8.2.10</span> SS: TopLevelVarDeclaredNames</a></li><li><span class=\"item-toggle-none\"></span><a href=\"#sec-static-semantics-toplevelvarscopeddeclarations\" title=\"Static Semantics: TopLevelVarScopedDeclarations\"><span class=\"secnum\">8.2.11</span> SS: TopLevelVarScopedDeclarations</a></li></ol></li><li><span class=\"item-toggle\">+</span><a href=\"#sec-syntax-directed-operations-miscellaneous\" title=\"Miscellaneous\"><span class=\"secnum\">8.6</span> Miscellaneous</a><ol class=\"toc\"><li><span class=\"item-toggle-none\"></span><a href=\"#sec-runtime-semantics-bindinginitialization\" title=\"Runtime Semantics: BindingInitialization\"><span class=\"secnum\">8.6.2</span> RS: BindingInitialization</a></li><li><span class=\"item-toggle-none\"></span><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\" title=\"Runtime Semantics: IteratorBindingInitialization\"><span class=\"secnum\">8.6.3</span> RS: IteratorBindingInitialization</a></li></ol></li></ol></li><li><span class=\"item-toggle\">+</span><a href=\"#sec-executable-code-and-execution-contexts\" title=\"Executable Code and Execution Contexts\"><span class=\"secnum\">9</span> Executable Code and Execution Contexts</a><ol class=\"toc\"><li><span class=\"item-toggle\">+</span><a href=\"#sec-weakly-hold-targets-processing-model\" title=\"Processing Model of WeakRef and FinalizationRegistryweakly hold Targets\"><span class=\"secnum\">9.10</span> Processing Model of <del>WeakRef and FinalizationRegistry</del><ins>weakly hold</ins> Targets</a><ol class=\"toc\"><li><span class=\"item-toggle-none\"></span><a href=\"#sec-weakly-hold-execution\" title=\"Execution\"><span class=\"secnum\">9.10.3</span> Execution</a></li></ol></li></ol></li><li><span class=\"item-toggle\">+</span><a href=\"#sec-ecmascript-language-lexical-grammar\" title=\"ECMAScript Language: Lexical Grammar\"><span class=\"secnum\">12</span> ECMAScript Language: Lexical Grammar</a><ol class=\"toc\"><li><span class=\"item-toggle\">+</span><a href=\"#sec-automatic-semicolon-insertion\" title=\"Automatic Semicolon Insertion\"><span class=\"secnum\">12.10</span> Automatic Semicolon Insertion</a><ol class=\"toc\"><li><span class=\"item-toggle-none\"></span><a href=\"#sec-rules-of-automatic-semicolon-insertion\" title=\"Rules of Automatic Semicolon Insertion\"><span class=\"secnum\">12.10.1</span> Rules of Automatic Semicolon Insertion</a></li><li><span class=\"item-toggle\">+</span><a href=\"#sec-interesting-cases-of-automatic-semicolon-insertion\" title=\"Interesting Cases of Automatic Semicolon Insertion\"><span class=\"secnum\">12.10.3</span> Interesting Cases of Automatic Semicolon Insertion</a><ol class=\"toc\"><li><span class=\"item-toggle\">+</span><a href=\"#sec-asi-cases-with-no-lineterminator-here\" title=\"Cases of Automatic Semicolon Insertion and “[no LineTerminator here]”\"><span class=\"secnum\">12.10.3.2</span> Cases of Automatic Semicolon Insertion and “[no <emu-nt>LineTerminator</emu-nt> here]”</a><ol class=\"toc\"><li><span class=\"item-toggle-none\"></span><a href=\"#sec-no-lineterminator-here-automatic-semicolon-insertion-list\" title=\"List of Grammar Productions with Optional Operands and “[no LineTerminator here]”\"><span class=\"secnum\">12.10.3.2.1</span> List of Grammar Productions with Optional Operands and “[no <emu-nt>LineTerminator</emu-nt> here]”</a></li></ol></li></ol></li></ol></li></ol></li><li><span class=\"item-toggle\">+</span><a href=\"#sec-ecmascript-language-expressions\" title=\"ECMAScript Language: Expressions\"><span class=\"secnum\">13</span> ECMAScript Language: Expressions</a><ol class=\"toc\"><li><span class=\"item-toggle\">+</span><a href=\"#sec-primary-expression\" title=\"Primary Expression\"><span class=\"secnum\">13.2</span> Primary Expression</a><ol class=\"toc\"><li><span class=\"item-toggle-none\"></span><a href=\"#sec-primary-expression-match-expression\" title=\"Match Expression\"><span class=\"secnum\">13.2.10</span> Match Expression</a></li></ol></li><li><span class=\"item-toggle\">+</span><a href=\"#sec-relational-operators\" title=\"Relational Operators\"><span class=\"secnum\">13.10</span> Relational Operators</a><ol class=\"toc\"><li><span class=\"item-toggle-none\"></span><a href=\"#sec-relational-operators-runtime-semantics-evaluation\" title=\"Runtime Semantics: Evaluation\"><span class=\"secnum\">13.10.1</span> RS: Evaluation</a></li></ol></li></ol></li><li><span class=\"item-toggle\">+</span><a href=\"#sec-ecmascript-language-statements-and-declarations\" title=\"ECMAScript Language: Statements and Declarations\"><span class=\"secnum\">14</span> ECMAScript Language: Statements and Declarations</a><ol class=\"toc\"><li><span class=\"item-toggle\">+</span><a href=\"#sec-iteration-statements\" title=\"Iteration Statements\"><span class=\"secnum\">14.7</span> Iteration Statements</a><ol class=\"toc\"><li><span class=\"item-toggle-none\"></span><a href=\"#sec-for-in-and-for-of-statements\" title=\"The for-in, for-of, and for-await-of Statements\"><span class=\"secnum\">14.7.1</span> The <code>for</code>-<code>in</code>, <code>for</code>-<code>of</code>, and <code>for</code>-<code>await</code>-<code>of</code> Statements</a></li></ol></li><li><span class=\"item-toggle-none\"></span><a href=\"#sec-try-statement\" title=\"The try Statement\"><span class=\"secnum\">14.14</span> The <code>try</code> Statement</a></li></ol></li><li><span class=\"item-toggle\">+</span><a href=\"#sec-ecmascript-language-functions-and-classes\" title=\"ECMAScript Language: Functions and Classes\"><span class=\"secnum\">15</span> ECMAScript Language: Functions and Classes</a><ol class=\"toc\"><li><span class=\"item-toggle\">+</span><a href=\"#sec-class-definitions\" title=\"Class Definitions\"><span class=\"secnum\">15.7</span> Class Definitions</a><ol class=\"toc\"><li><span class=\"item-toggle-none\"></span><a href=\"#sec-runtime-semantics-classdefinitionevaluation\" title=\"Runtime Semantics: ClassDefinitionEvaluation\"><span class=\"secnum\">15.7.14</span> RS: ClassDefinitionEvaluation</a></li></ol></li><li><span class=\"item-toggle\">+</span><a href=\"#sec-tail-position-calls\" title=\"Tail Position Calls\"><span class=\"secnum\">15.10</span> Tail Position Calls</a><ol class=\"toc\"><li><span class=\"item-toggle-none\"></span><a href=\"#sec-static-semantics-hascallintailposition\" title=\"Static Semantics: HasCallInTailPosition\"><span class=\"secnum\">15.10.2</span> SS: HasCallInTailPosition</a></li></ol></li></ol></li><li><span class=\"item-toggle\">+</span><a href=\"#sec-fundamental-objects\" title=\"Fundamental Objects\"><span class=\"secnum\">20</span> Fundamental Objects</a><ol class=\"toc\"><li><span class=\"item-toggle\">+</span><a href=\"#sec-object-objects\" title=\"Object Objects\"><span class=\"secnum\">20.1</span> Object Objects</a><ol class=\"toc\"><li><span class=\"item-toggle\">+</span><a href=\"#sec-properties-of-the-object-constructor\" title=\"Properties of the Object Constructor\"><span class=\"secnum\">20.1.2</span> Properties of the Object Constructor</a><ol class=\"toc\"><li><span class=\"item-toggle-none\"></span><a href=\"#sec-object-%symbol.custommatcher%\" title=\"Object [ %Symbol.customMatcher% ] ( subject, hint )\"><span class=\"secnum\">20.1.2.24</span> Object [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var> )</a></li></ol></li></ol></li><li><span class=\"item-toggle\">+</span><a href=\"#sec-function-objects\" title=\"Function Objects\"><span class=\"secnum\">20.2</span> Function Objects</a><ol class=\"toc\"><li><span class=\"item-toggle\">+</span><a href=\"#sec-properties-of-the-function-constructor\" title=\"Properties of the Function Constructor\"><span class=\"secnum\">20.2.2</span> Properties of the Function Constructor</a><ol class=\"toc\"><li><span class=\"item-toggle-none\"></span><a href=\"#sec-function-%symbol.custommatcher%\" title=\"Function [ %Symbol.customMatcher% ] ( subject, hint )\"><span class=\"secnum\">20.2.2.2</span> Function [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var> )</a></li></ol></li><li><span class=\"item-toggle\">+</span><a href=\"#sec-properties-of-the-function-prototype-object\" title=\"Properties of the Function Prototype Object\"><span class=\"secnum\">20.2.3</span> Properties of the Function Prototype Object</a><ol class=\"toc\"><li><span class=\"item-toggle-none\"></span><a href=\"#sec-function.prototype-%symbol.custommatcher%\" title=\"Function.prototype [ %Symbol.customMatcher% ] ( subject, hint, receiver )\"><span class=\"secnum\">20.2.3.7</span> Function.prototype [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var>, <var>receiver</var> )</a></li></ol></li></ol></li><li><span class=\"item-toggle\">+</span><a href=\"#sec-boolean-objects\" title=\"Boolean Objects\"><span class=\"secnum\">20.3</span> Boolean Objects</a><ol class=\"toc\"><li><span class=\"item-toggle\">+</span><a href=\"#sec-properties-of-the-boolean-constructor\" title=\"Properties of the Boolean Constructor\"><span class=\"secnum\">20.3.2</span> Properties of the Boolean Constructor</a><ol class=\"toc\"><li><span class=\"item-toggle-none\"></span><a href=\"#sec-boolean-%symbol.custommatcher%\" title=\"Boolean [ %Symbol.customMatcher% ] ( subject, hint )\"><span class=\"secnum\">20.3.2.2</span> Boolean [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var> )</a></li></ol></li></ol></li><li><span class=\"item-toggle\">+</span><a href=\"#sec-symbol-objects\" title=\"Symbol Objects\"><span class=\"secnum\">20.4</span> Symbol Objects</a><ol class=\"toc\"><li><span class=\"item-toggle\">+</span><a href=\"#sec-properties-of-the-symbol-constructor\" title=\"Properties of the Symbol Constructor\"><span class=\"secnum\">20.4.2</span> Properties of the Symbol Constructor</a><ol class=\"toc\"><li><span class=\"item-toggle-none\"></span><a href=\"#sec-symbol.custommatcher\" title=\"Symbol.customMatcher\"><span class=\"secnum\">20.4.2.17</span> Symbol.customMatcher</a></li><li><span class=\"item-toggle-none\"></span><a href=\"#sec-symbol-%symbol.custommatcher%\" title=\"Symbol [ %Symbol.customMatcher% ] ( subject, hint )\"><span class=\"secnum\">20.4.2.18</span> Symbol [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var> )</a></li></ol></li></ol></li><li><span class=\"item-toggle\">+</span><a href=\"#sec-error-objects\" title=\"Error Objects\"><span class=\"secnum\">20.5</span> Error Objects</a><ol class=\"toc\"><li><span class=\"item-toggle\">+</span><a href=\"#sec-error-constructor\" title=\"The Error Constructor\"><span class=\"secnum\">20.5.1</span> The Error Constructor</a><ol class=\"toc\"><li><span class=\"item-toggle-none\"></span><a href=\"#sec-error-message\" title=\"Error ( message [ , options ] )\"><span class=\"secnum\">20.5.1.1</span> Error ( <var>message</var> [ , <var>options</var> ] )</a></li></ol></li><li><span class=\"item-toggle\">+</span><a href=\"#sec-properties-of-the-error-constructors\" title=\"Properties of the Error Constructor\"><span class=\"secnum\">20.5.2</span> Properties of the Error Constructor</a><ol class=\"toc\"><li><span class=\"item-toggle-none\"></span><a href=\"#sec-error-%symbol.custommatcher%\" title=\"Error [ %Symbol.customMatcher% ] ( subject, hint )\"><span class=\"secnum\">20.5.2.2</span> Error [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var> )</a></li></ol></li><li><span class=\"item-toggle-none\"></span><a href=\"#sec-properties-of-error-instances\" title=\"Properties of Error Instances\"><span class=\"secnum\">20.5.4</span> Properties of Error Instances</a></li><li><span class=\"item-toggle\">+</span><a href=\"#sec-nativeerror-object-structure\" title=\"NativeError Object Structure\"><span class=\"secnum\">20.5.6</span> <var>NativeError</var> Object Structure</a><ol class=\"toc\"><li><span class=\"item-toggle\">+</span><a href=\"#sec-nativeerror-constructors\" title=\"The NativeError Constructors\"><span class=\"secnum\">20.5.6.1</span> The <var>NativeError</var> Constructors</a><ol class=\"toc\"><li><span class=\"item-toggle-none\"></span><a href=\"#sec-nativeerror\" title=\"NativeError ( message [ , options ] )\"><span class=\"secnum\">20.5.6.1.1</span> <var>NativeError</var> ( <var>message</var> [ , <var>options</var> ] )</a></li></ol></li><li><span class=\"item-toggle\">+</span><a href=\"#sec-properties-of-the-nativeerror-constructors\" title=\"Properties of the NativeError Constructors\"><span class=\"secnum\">20.5.6.2</span> Properties of the <var>NativeError</var> Constructors</a><ol class=\"toc\"><li><span class=\"item-toggle-none\"></span><a href=\"#sec-nativeerror-%symbol.custommatcher%\" title=\"NativeError [ %Symbol.customMatcher% ] ( subject, hint )\"><span class=\"secnum\">20.5.6.2.2</span> <var>NativeError</var> [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var> )</a></li></ol></li><li><span class=\"item-toggle-none\"></span><a href=\"#sec-properties-of-nativeerror-instances\" title=\"Properties of NativeError Instances\"><span class=\"secnum\">20.5.6.4</span> Properties of <var>NativeError</var> Instances</a></li></ol></li><li><span class=\"item-toggle\">+</span><a href=\"#sec-aggregate-error-objects\" title=\"AggregateError Objects\"><span class=\"secnum\">20.5.7</span> AggregateError Objects</a><ol class=\"toc\"><li><span class=\"item-toggle\">+</span><a href=\"#sec-aggregate-error-constructor\" title=\"The AggregateError Constructor\"><span class=\"secnum\">20.5.7.1</span> The AggregateError Constructor</a><ol class=\"toc\"><li><span class=\"item-toggle-none\"></span><a href=\"#sec-aggregate-error\" title=\"AggregateError ( errors, message [ , options ] )\"><span class=\"secnum\">20.5.7.1.1</span> AggregateError ( <var>errors</var>, <var>message</var> [ , <var>options</var> ] )</a></li></ol></li><li><span class=\"item-toggle\">+</span><a href=\"#sec-properties-of-the-aggregate-error-constructors\" title=\"Properties of the AggregateError Constructor\"><span class=\"secnum\">20.5.7.2</span> Properties of the AggregateError Constructor</a><ol class=\"toc\"><li><span class=\"item-toggle-none\"></span><a href=\"#sec-aggregate-error-%symbol.custommatcher%\" title=\"AggregateError [ %Symbol.customMatcher% ] ( subject, hint )\"><span class=\"secnum\">20.5.7.2.2</span> AggregateError [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var> )</a></li></ol></li><li><span class=\"item-toggle-none\"></span><a href=\"#sec-properties-of-aggregate-error-instances\" title=\"Properties of AggregateError Instances\"><span class=\"secnum\">20.5.7.4</span> Properties of AggregateError Instances</a></li></ol></li></ol></li></ol></li><li><span class=\"item-toggle\">+</span><a href=\"#sec-numbers-and-dates\" title=\"Numbers and Dates\"><span class=\"secnum\">21</span> Numbers and Dates</a><ol class=\"toc\"><li><span class=\"item-toggle\">+</span><a href=\"#sec-number-objects\" title=\"Number Objects\"><span class=\"secnum\">21.1</span> Number Objects</a><ol class=\"toc\"><li><span class=\"item-toggle\">+</span><a href=\"#sec-properties-of-the-number-constructor\" title=\"Properties of the Number Constructor\"><span class=\"secnum\">21.1.2</span> Properties of the Number Constructor</a><ol class=\"toc\"><li><span class=\"item-toggle-none\"></span><a href=\"#sec-number-%symbol.custommatcher%\" title=\"Number [ %Symbol.customMatcher% ] ( subject, hint )\"><span class=\"secnum\">21.1.2.16</span> Number [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var> )</a></li></ol></li></ol></li><li><span class=\"item-toggle\">+</span><a href=\"#sec-bigint-objects\" title=\"BigInt Objects\"><span class=\"secnum\">21.2</span> BigInt Objects</a><ol class=\"toc\"><li><span class=\"item-toggle\">+</span><a href=\"#sec-properties-of-the-bigint-constructor\" title=\"Properties of the BigInt Constructor\"><span class=\"secnum\">21.2.2</span> Properties of the BigInt Constructor</a><ol class=\"toc\"><li><span class=\"item-toggle-none\"></span><a href=\"#sec-bigint-%symbol.custommatcher%\" title=\"BigInt [ %Symbol.customMatcher% ] ( subject, hint )\"><span class=\"secnum\">21.2.2.4</span> BigInt [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var> )</a></li></ol></li></ol></li><li><span class=\"item-toggle\">+</span><a href=\"#sec-date-objects\" title=\"Date Objects\"><span class=\"secnum\">21.4</span> Date Objects</a><ol class=\"toc\"><li><span class=\"item-toggle\">+</span><a href=\"#sec-properties-of-the-date-constructor\" title=\"Properties of the Date Constructor\"><span class=\"secnum\">21.4.3</span> Properties of the Date Constructor</a><ol class=\"toc\"><li><span class=\"item-toggle-none\"></span><a href=\"#sec-date-%symbol.custommatcher%\" title=\"Date [ %Symbol.customMatcher% ] ( subject, hint )\"><span class=\"secnum\">21.4.3.5</span> Date [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var> )</a></li></ol></li></ol></li></ol></li><li><span class=\"item-toggle\">+</span><a href=\"#sec-text-processing\" title=\"Text Processing\"><span class=\"secnum\">22</span> Text Processing</a><ol class=\"toc\"><li><span class=\"item-toggle\">+</span><a href=\"#sec-string-objects\" title=\"String Objects\"><span class=\"secnum\">22.1</span> String Objects</a><ol class=\"toc\"><li><span class=\"item-toggle\">+</span><a href=\"#sec-properties-of-the-string-constructor\" title=\"Properties of the String Constructor\"><span class=\"secnum\">22.1.2</span> Properties of the String Constructor</a><ol class=\"toc\"><li><span class=\"item-toggle-none\"></span><a href=\"#sec-string-%symbol.custommatcher%\" title=\"String [ %Symbol.customMatcher% ] ( subject, hint )\"><span class=\"secnum\">22.1.2.5</span> String [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var> )</a></li></ol></li></ol></li><li><span class=\"item-toggle\">+</span><a href=\"#sec-regexp-regular-expression-objects\" title=\"RegExp (Regular Expression) Objects\"><span class=\"secnum\">22.2</span> RegExp (Regular Expression) Objects</a><ol class=\"toc\"><li><span class=\"item-toggle\">+</span><a href=\"#sec-properties-of-the-regexp-constructor\" title=\"Properties of the RegExp Constructor\"><span class=\"secnum\">22.2.5</span> Properties of the RegExp Constructor</a><ol class=\"toc\"><li><span class=\"item-toggle-none\"></span><a href=\"#sec-regexp-%symbol.custommatcher%\" title=\"RegExp [ %Symbol.customMatcher% ] ( subject, hint )\"><span class=\"secnum\">22.2.5.3</span> RegExp [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var> )</a></li></ol></li><li><span class=\"item-toggle\">+</span><a href=\"#sec-properties-of-the-regexp-prototype-object\" title=\"Properties of the RegExp Prototype Object\"><span class=\"secnum\">22.2.6</span> Properties of the RegExp Prototype Object</a><ol class=\"toc\"><li><span class=\"item-toggle-none\"></span><a href=\"#sec-regexp.prototype-%symbol.custommatcher%\" title=\"RegExp.prototype [ %Symbol.customMatcher% ] ( subject, hint )\"><span class=\"secnum\">22.2.6.20</span> RegExp.prototype [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var> )</a></li></ol></li></ol></li></ol></li><li><span class=\"item-toggle\">+</span><a href=\"#sec-indexed-collections\" title=\"Indexed Collections\"><span class=\"secnum\">23</span> Indexed Collections</a><ol class=\"toc\"><li><span class=\"item-toggle\">+</span><a href=\"#sec-array-objects\" title=\"Array Objects\"><span class=\"secnum\">23.1</span> Array Objects</a><ol class=\"toc\"><li><span class=\"item-toggle\">+</span><a href=\"#sec-properties-of-the-array-constructor\" title=\"Properties of the Array Constructor\"><span class=\"secnum\">23.1.2</span> Properties of the Array Constructor</a><ol class=\"toc\"><li><span class=\"item-toggle-none\"></span><a href=\"#sec-array-%symbol.custommatcher%\" title=\"Array [ %Symbol.customMatcher% ] ( subject, hint )\"><span class=\"secnum\">23.1.2.6</span> Array [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var> )</a></li></ol></li></ol></li><li><span class=\"item-toggle\">+</span><a href=\"#sec-typedarray-objects\" title=\"TypedArray Objects\"><span class=\"secnum\">23.2</span> TypedArray Objects</a><ol class=\"toc\"><li><span class=\"item-toggle\">+</span><a href=\"#sec-properties-of-the-typedarray-constructors\" title=\"Properties of the TypedArray Constructors\"><span class=\"secnum\">23.2.6</span> Properties of the <var>TypedArray</var> Constructors</a><ol class=\"toc\"><li><span class=\"item-toggle-none\"></span><a href=\"#sec-_typedarray_-%symbol.custommatcher%\" title=\"TypedArray [ %Symbol.customMatcher% ] ( subject, hint )\"><span class=\"secnum\">23.2.6.3</span> <var>TypedArray</var> [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var> )</a></li></ol></li></ol></li></ol></li><li><span class=\"item-toggle\">+</span><a href=\"#sec-keyed-collections\" title=\"Keyed Collections\"><span class=\"secnum\">24</span> Keyed Collections</a><ol class=\"toc\"><li><span class=\"item-toggle\">+</span><a href=\"#sec-map-objects\" title=\"Map Objects\"><span class=\"secnum\">24.1</span> Map Objects</a><ol class=\"toc\"><li><span class=\"item-toggle\">+</span><a href=\"#sec-properties-of-the-map-constructor\" title=\"Properties of the Map Constructor\"><span class=\"secnum\">24.1.2</span> Properties of the Map Constructor</a><ol class=\"toc\"><li><span class=\"item-toggle-none\"></span><a href=\"#sec-map-%symbol.custommatcher%\" title=\"Map [ %Symbol.customMatcher% ] ( subject, hint )\"><span class=\"secnum\">24.1.2.3</span> Map [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var> )</a></li></ol></li></ol></li><li><span class=\"item-toggle\">+</span><a href=\"#sec-set-objects\" title=\"Set Objects\"><span class=\"secnum\">24.2</span> Set Objects</a><ol class=\"toc\"><li><span class=\"item-toggle\">+</span><a href=\"#sec-properties-of-the-set-constructor\" title=\"Properties of the Set Constructor\"><span class=\"secnum\">24.2.2</span> Properties of the Set Constructor</a><ol class=\"toc\"><li><span class=\"item-toggle-none\"></span><a href=\"#sec-set-%symbol.custommatcher%\" title=\"Set [ %Symbol.customMatcher% ] ( subject, hint )\"><span class=\"secnum\">24.2.2.3</span> Set [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var> )</a></li></ol></li></ol></li><li><span class=\"item-toggle\">+</span><a href=\"#sec-weakmap-objects\" title=\"WeakMap Objects\"><span class=\"secnum\">24.3</span> WeakMap Objects</a><ol class=\"toc\"><li><span class=\"item-toggle\">+</span><a href=\"#sec-properties-of-the-weakmap-constructor\" title=\"Properties of the WeakMap Constructor\"><span class=\"secnum\">24.3.2</span> Properties of the WeakMap Constructor</a><ol class=\"toc\"><li><span class=\"item-toggle-none\"></span><a href=\"#sec-weakmap-%symbol.custommatcher%\" title=\"WeakMap [ %Symbol.customMatcher% ] ( subject, hint )\"><span class=\"secnum\">24.3.2.2</span> WeakMap [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var> )</a></li></ol></li></ol></li><li><span class=\"item-toggle\">+</span><a href=\"#sec-weakset-objects\" title=\"WeakSet Objects\"><span class=\"secnum\">24.4</span> WeakSet Objects</a><ol class=\"toc\"><li><span class=\"item-toggle\">+</span><a href=\"#sec-properties-of-the-weakset-constructor\" title=\"Properties of the WeakSet Constructor\"><span class=\"secnum\">24.4.2</span> Properties of the WeakSet Constructor</a><ol class=\"toc\"><li><span class=\"item-toggle-none\"></span><a href=\"#sec-weakset-%symbol.custommatcher%\" title=\"WeakSet [ %Symbol.customMatcher% ] ( subject, hint )\"><span class=\"secnum\">24.4.2.2</span> WeakSet [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var> )</a></li></ol></li></ol></li></ol></li><li><span class=\"item-toggle\">+</span><a href=\"#sec-structured-data\" title=\"Structured Data\"><span class=\"secnum\">25</span> Structured Data</a><ol class=\"toc\"><li><span class=\"item-toggle\">+</span><a href=\"#sec-arraybuffer-objects\" title=\"ArrayBuffer Objects\"><span class=\"secnum\">25.1</span> ArrayBuffer Objects</a><ol class=\"toc\"><li><span class=\"item-toggle\">+</span><a href=\"#sec-properties-of-the-arraybuffer-constructor\" title=\"Properties of the ArrayBuffer Constructor\"><span class=\"secnum\">25.1.5</span> Properties of the ArrayBuffer Constructor</a><ol class=\"toc\"><li><span class=\"item-toggle-none\"></span><a href=\"#sec-arraybuffer-%symbol.custommatcher%\" title=\"ArrayBuffer [ %Symbol.customMatcher% ] ( subject, hint )\"><span class=\"secnum\">25.1.5.4</span> ArrayBuffer [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var> )</a></li></ol></li></ol></li><li><span class=\"item-toggle\">+</span><a href=\"#sec-sharedarraybuffer-objects\" title=\"SharedArrayBuffer Objects\"><span class=\"secnum\">25.2</span> SharedArrayBuffer Objects</a><ol class=\"toc\"><li><span class=\"item-toggle\">+</span><a href=\"#sec-properties-of-the-sharedarraybuffer-constructor\" title=\"Properties of the SharedArrayBuffer Constructor\"><span class=\"secnum\">25.2.4</span> Properties of the SharedArrayBuffer Constructor</a><ol class=\"toc\"><li><span class=\"item-toggle-none\"></span><a href=\"#sec-sharedarraybuffer-%symbol.custommatcher%\" title=\"SharedArrayBuffer [ %Symbol.customMatcher% ] ( subject, hint )\"><span class=\"secnum\">25.2.4.3</span> SharedArrayBuffer [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var> )</a></li></ol></li></ol></li><li><span class=\"item-toggle\">+</span><a href=\"#sec-dataview-objects\" title=\"DataView Objects\"><span class=\"secnum\">25.3</span> DataView Objects</a><ol class=\"toc\"><li><span class=\"item-toggle\">+</span><a href=\"#sec-properties-of-the-dataview-constructor\" title=\"Properties of the DataView Constructor\"><span class=\"secnum\">25.3.3</span> Properties of the DataView Constructor</a><ol class=\"toc\"><li><span class=\"item-toggle-none\"></span><a href=\"#sec-dataview-%symbol.custommatcher%\" title=\"DataView [ %Symbol.customMatcher% ] ( subject, hint )\"><span class=\"secnum\">25.3.3.2</span> DataView [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var> )</a></li></ol></li></ol></li></ol></li><li><span class=\"item-toggle\">+</span><a href=\"#sec-managing-memory\" title=\"Managing Memory\"><span class=\"secnum\">26</span> Managing Memory</a><ol class=\"toc\"><li><span class=\"item-toggle\">+</span><a href=\"#sec-weak-ref-objects\" title=\"WeakRef Objects\"><span class=\"secnum\">26.1</span> WeakRef Objects</a><ol class=\"toc\"><li><span class=\"item-toggle\">+</span><a href=\"#sec-properties-of-the-weak-ref-constructor\" title=\"Properties of the WeakRef Constructor\"><span class=\"secnum\">26.1.2</span> Properties of the WeakRef Constructor</a><ol class=\"toc\"><li><span class=\"item-toggle-none\"></span><a href=\"#sec-weakref-%symbol.custommatcher%\" title=\"WeakRef [ %Symbol.customMatcher% ] ( subject, hint )\"><span class=\"secnum\">26.1.2.2</span> WeakRef [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var> )</a></li></ol></li></ol></li><li><span class=\"item-toggle\">+</span><a href=\"#sec-finalization-registry-objects\" title=\"FinalizationRegistry Objects\"><span class=\"secnum\">26.2</span> FinalizationRegistry Objects</a><ol class=\"toc\"><li><span class=\"item-toggle\">+</span><a href=\"#sec-properties-of-the-finalization-registry-constructor\" title=\"Properties of the FinalizationRegistry Constructor\"><span class=\"secnum\">26.2.2</span> Properties of the FinalizationRegistry Constructor</a><ol class=\"toc\"><li><span class=\"item-toggle-none\"></span><a href=\"#sec-finalizationregistry-%symbol.custommatcher%\" title=\"FinalizationRegistry [ %Symbol.customMatcher% ] ( subject, hint )\"><span class=\"secnum\">26.2.2.2</span> FinalizationRegistry [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var> )</a></li></ol></li></ol></li></ol></li><li><span class=\"item-toggle\">+</span><a href=\"#sec-control-abstraction-objects\" title=\"Control Abstraction Objects\"><span class=\"secnum\">27</span> Control Abstraction Objects</a><ol class=\"toc\"><li><span class=\"item-toggle\">+</span><a href=\"#sec-promise-objects\" title=\"Promise Objects\"><span class=\"secnum\">27.2</span> Promise Objects</a><ol class=\"toc\"><li><span class=\"item-toggle\">+</span><a href=\"#sec-properties-of-the-promise-constructor\" title=\"Properties of the Promise Constructor\"><span class=\"secnum\">27.2.4</span> Properties of the Promise Constructor</a><ol class=\"toc\"><li><span class=\"item-toggle-none\"></span><a href=\"#sec-promise-%symbol.custommatcher%\" title=\"Promise [ %Symbol.customMatcher% ] ( subject, hint )\"><span class=\"secnum\">27.2.4.9</span> Promise [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var> )</a></li></ol></li></ol></li></ol></li><li><span class=\"item-toggle\">+</span><a href=\"#sec-reflection\" title=\"Reflection\"><span class=\"secnum\">28</span> Reflection</a><ol class=\"toc\"><li><span class=\"item-toggle\">+</span><a href=\"#sec-proxy-objects\" title=\"Proxy Objects\"><span class=\"secnum\">28.2</span> Proxy Objects</a><ol class=\"toc\"><li><span class=\"item-toggle\">+</span><a href=\"#sec-proxy-constructor\" title=\"The Proxy Constructor\"><span class=\"secnum\">28.2.1</span> The Proxy Constructor</a><ol class=\"toc\"><li><span class=\"item-toggle-none\"></span><a href=\"#sec-proxy-%symbol.custommatcher%\" title=\"Proxy [ %Symbol.customMatcher% ] ( )\"><span class=\"secnum\">28.2.1.2</span> Proxy [ %Symbol.customMatcher% ] ( )</a></li></ol></li></ol></li></ol></li><li><span class=\"item-toggle\">+</span><a href=\"#sec-pattern-matching\" title=\"Pattern Matching\"><span class=\"secnum\">30</span> <ins>Pattern Matching</ins></a><ol class=\"toc\"><li><span class=\"item-toggle\">+</span><a href=\"#sec-match-patterns\" title=\"Match Patterns\"><span class=\"secnum\">30.1</span> Match Patterns</a><ol class=\"toc\"><li><span class=\"item-toggle-none\"></span><a href=\"#sec-match-patterns-static-semantics-early-errors\" title=\"Static Semantics: Early Errors\"><span class=\"secnum\">30.1.1</span> SS: Early Errors</a></li><li><span class=\"item-toggle-none\"></span><a href=\"#sec-is-optional-pattern\" title=\"Static Semantics: IsOptionalPattern\"><span class=\"secnum\">30.1.2</span> SS: IsOptionalPattern</a></li><li><span class=\"item-toggle-none\"></span><a href=\"#sec-match-pattern-matches\" title=\"Runtime Semantics: MatchPatternMatches\"><span class=\"secnum\">30.1.3</span> RS: MatchPatternMatches</a></li><li><span class=\"item-toggle-none\"></span><a href=\"#sec-primitive-pattern-matches\" title=\"Runtime Semantics: PrimitivePatternMatches\"><span class=\"secnum\">30.1.4</span> RS: PrimitivePatternMatches</a></li><li><span class=\"item-toggle-none\"></span><a href=\"#sec-variable-declaration-pattern-matches\" title=\"Runtime Semantics: VariableDeclarationPatternMatches\"><span class=\"secnum\">30.1.5</span> RS: VariableDeclarationPatternMatches</a></li><li><span class=\"item-toggle-none\"></span><a href=\"#sec-member-expression-pattern-matches\" title=\"Runtime Semantics: MemberExpressionPatternMatches\"><span class=\"secnum\">30.1.6</span> RS: MemberExpressionPatternMatches</a></li><li><span class=\"item-toggle-none\"></span><a href=\"#sec-object-pattern-matches\" title=\"Runtime Semantics: ObjectPatternMatches\"><span class=\"secnum\">30.1.7</span> RS: ObjectPatternMatches</a></li><li><span class=\"item-toggle-none\"></span><a href=\"#sec-object-pattern-inner-matches\" title=\"Runtime Semantics: ObjectPatternInnerMatches\"><span class=\"secnum\">30.1.8</span> RS: ObjectPatternInnerMatches</a></li><li><span class=\"item-toggle-none\"></span><a href=\"#sec-array-pattern-matches\" title=\"Runtime Semantics: ArrayPatternMatches\"><span class=\"secnum\">30.1.9</span> RS: ArrayPatternMatches</a></li><li><span class=\"item-toggle-none\"></span><a href=\"#sec-list-pattern-matches\" title=\"Runtime Semantics: ListPatternMatches\"><span class=\"secnum\">30.1.10</span> RS: ListPatternMatches</a></li><li><span class=\"item-toggle-none\"></span><a href=\"#sec-list-pattern-inner-matches\" title=\"Runtime Semantics: ListPatternInnerMatches\"><span class=\"secnum\">30.1.11</span> RS: ListPatternInnerMatches</a></li><li><span class=\"item-toggle-none\"></span><a href=\"#sec-unary-algebraic-pattern-matches\" title=\"Runtime Semantics: UnaryAlgebraicPatternMatches\"><span class=\"secnum\">30.1.12</span> RS: UnaryAlgebraicPatternMatches</a></li><li><span class=\"item-toggle-none\"></span><a href=\"#sec-relational-pattern-matches\" title=\"Runtime Semantics: RelationalPatternMatches\"><span class=\"secnum\">30.1.13</span> RS: RelationalPatternMatches</a></li><li><span class=\"item-toggle-none\"></span><a href=\"#sec-if-pattern-matches\" title=\"Runtime Semantics: IfPatternMatches\"><span class=\"secnum\">30.1.14</span> RS: IfPatternMatches</a></li><li><span class=\"item-toggle-none\"></span><a href=\"#sec-combined-match-pattern-matches\" title=\"Runtime Semantics: CombinedMatchPatternMatches\"><span class=\"secnum\">30.1.15</span> RS: CombinedMatchPatternMatches</a></li></ol></li><li><span class=\"item-toggle\">+</span><a href=\"#sec-match-expression\" title=\"The match Expression\"><span class=\"secnum\">30.2</span> The <code>match</code> Expression</a><ol class=\"toc\"><li><span class=\"item-toggle-none\"></span><a href=\"#sec-match-expression-static-semantics-early-errors\" title=\"Static Semantics: Early Errors\"><span class=\"secnum\">30.2.1</span> SS: Early Errors</a></li><li><span class=\"item-toggle-none\"></span><a href=\"#sec-match-expression-runtime-semantics-evaluation\" title=\"Runtime Semantics: Evaluation\"><span class=\"secnum\">30.2.2</span> RS: Evaluation</a></li><li><span class=\"item-toggle-none\"></span><a href=\"#sec-match-expression-clauses-runtime-semantics-evaluation\" title=\"Runtime Semantics: MatchExpressionClausesEvaluation\"><span class=\"secnum\">30.2.3</span> RS: MatchExpressionClausesEvaluation</a></li><li><span class=\"item-toggle-none\"></span><a href=\"#sec-match-expression-clause-runtime-semantics-evaluation\" title=\"Runtime Semantics: MatchExpressionClauseEvaluation\"><span class=\"secnum\">30.2.4</span> RS: MatchExpressionClauseEvaluation</a></li></ol></li><li><span class=\"item-toggle\">+</span><a href=\"#sec-abstract-operations-for-pattern-matching\" title=\"Abstract Operations for Pattern Matching\"><span class=\"secnum\">30.3</span> Abstract Operations for Pattern Matching</a><ol class=\"toc\"><li><span class=\"item-toggle-none\"></span><a href=\"#sec-invoke-custom-matcher\" title=\"InvokeCustomMatcher ( matcher, subject, cacheGroup, kind, receiver )\"><span class=\"secnum\">30.3.1</span> InvokeCustomMatcher ( <var>matcher</var>, <var>subject</var>, <var>cacheGroup</var>, <var>kind</var>, <var>receiver</var> )</a></li><li><span class=\"item-toggle-none\"></span><a href=\"#sec-validatecustommatcherhint\" title=\"ValidateCustomMatcherHint ( hint [ , kind ] )\"><span class=\"secnum\">30.3.2</span> ValidateCustomMatcherHint ( <var>hint</var> [ , <var>kind</var> ] )</a></li><li><span class=\"item-toggle-none\"></span><a href=\"#sec-creatematchcache\" title=\"CreateMatchCache ( )\"><span class=\"secnum\">30.3.3</span> CreateMatchCache ( )</a></li><li><span class=\"item-toggle-none\"></span><a href=\"#sec-get-match-cache\" title=\"GetMatchCache ( subject, cacheGroup )\"><span class=\"secnum\">30.3.4</span> GetMatchCache ( <var>subject</var>, <var>cacheGroup</var> )</a></li><li><span class=\"item-toggle-none\"></span><a href=\"#sec-has-property-cached\" title=\"HasPropertyCached ( subject, cacheGroup, propertyName )\"><span class=\"secnum\">30.3.5</span> HasPropertyCached ( <var>subject</var>, <var>cacheGroup</var>, <var>propertyName</var> )</a></li><li><span class=\"item-toggle-none\"></span><a href=\"#sec-get-cached\" title=\"GetCached ( subject, cacheGroup, propertyName )\"><span class=\"secnum\">30.3.6</span> GetCached ( <var>subject</var>, <var>cacheGroup</var>, <var>propertyName</var> )</a></li><li><span class=\"item-toggle-none\"></span><a href=\"#sec-get-iterator-cached\" title=\"GetIteratorCached ( subject, cacheGroup )\"><span class=\"secnum\">30.3.7</span> GetIteratorCached ( <var>subject</var>, <var>cacheGroup</var> )</a></li><li><span class=\"item-toggle-none\"></span><a href=\"#sec-iterator-step-cached\" title=\"IteratorStepCached ( iterator, cacheGroup )\"><span class=\"secnum\">30.3.8</span> IteratorStepCached ( <var>iterator</var>, <var>cacheGroup</var> )</a></li><li><span class=\"item-toggle-none\"></span><a href=\"#sec-get-iterator-nth-value-cached\" title=\"GetIteratorNthValueCached ( iterator, cacheGroup, n )\"><span class=\"secnum\">30.3.9</span> GetIteratorNthValueCached ( <var>iterator</var>, <var>cacheGroup</var>, <var>n</var> )</a></li><li><span class=\"item-toggle-none\"></span><a href=\"#sec-finish-list-match\" title=\"FinishListMatch ( iterator, cacheGroup, expectedLength )\"><span class=\"secnum\">30.3.10</span> FinishListMatch ( <var>iterator</var>, <var>cacheGroup</var>, <var>expectedLength</var> )</a></li><li><span class=\"item-toggle-none\"></span><a href=\"#sec-finish-match\" title=\"FinishMatch ( matchCompletion, cacheGroup )\"><span class=\"secnum\">30.3.11</span> FinishMatch ( <var>matchCompletion</var>, <var>cacheGroup</var> )</a></li></ol></li></ol></li><li><span class=\"item-toggle\">+</span><a href=\"#sec-grammar-summary\" title=\"Grammar Summary\"><span class=\"secnum\">A</span> Grammar Summary</a><ol class=\"toc\"><li><span class=\"item-toggle-none\"></span><a href=\"#sec-expressions\" title=\"Expressions\"><span class=\"secnum\">A.1</span> Expressions</a></li><li><span class=\"item-toggle-none\"></span><a href=\"#sec-annex-match-patterns\" title=\"Patterns\"><span class=\"secnum\">A.9</span> Patterns</a></li></ol></li><li><span class=\"item-toggle-none\"></span><a href=\"#sec-copyright-and-software-license\" title=\"Copyright &amp; Software License\"><span class=\"secnum\">B</span> Copyright &amp; Software License</a></li></ol></div></div><div id=\"spec-container\"><h1 class=\"version\">Stage 1 Draft / September 7, 2024</h1><h1 class=\"title\">Pattern Matching</h1>\n<style>\n  #welcome .secnum, [title=\"Welcome\"] .secnum {\n    display: none;\n  }\n  emu-note[code] > .note, #welcome > h1 {\n    font-size: 0;\n  }\n  emu-note[code] > .note::before {\n    content: \"Example\";\n    font-size: 18px;\n  }\n  emu-note[code] pre {\n    margin: 0;\n  }\n  pre.inline {\n    display: inline;\n  }\n  pre.inline code {\n    display: inline;\n    font-style: italic;\n    text-decoration: underline;\n  }\n  body.folded .fold, body.folded .todo {\n    display: none;\n  }\n  .show-ao-annotations a.e-user-code::before, .show-ao-annotations span.e-user-code::before {\n    display: inline-block;\n  }\n  #sec-todos {\n    border-left: 5px solid #ff6600;\n    padding: 0.5em;\n    background: #ffeedd;\n  }\n  emu-intro {\n    margin-top: 1em !important;\n  }\n  [role=\"button\"] {\n    cursor: pointer;\n  }\n</style>\n\n<emu-intro id=\"welcome\">\n  <h1>Welcome</h1>\n\n  <emu-intro id=\"sec-todos\">\n    <h1 class=\"attributes-tag\">TODOs</h1>\n    <ul>\n      <li>\n        Scope and bindings\n        <ul>\n          <li>Basic case.</li>\n          <li>Work with <code>for</code> loop (<emu-xref aoid=\"CreatePerIterationEnvironment\"><a href=\"https://tc39.es/ecma262/#sec-createperiterationenvironment\">CreatePerIterationEnvironment</a></emu-xref>).</li>\n          <li>Work with function parameters.</li>\n        </ul>\n      </li>\n    </ul>\n  </emu-intro>\n\n  <emu-intro id=\"sec-nav\">\n      <h1>Introduction</h1>\n      <p>This specification consists of the following parts:</p>\n      <ul>\n        <li><emu-xref href=\"#sec-pattern-matching\" id=\"_ref_0\"><a href=\"#sec-pattern-matching\">Patterns in pattern matching</a></emu-xref></li>\n        <li>Interesting AOs:\n          <ul>\n            <li><emu-xref href=\"#sec-invoke-custom-matcher\" title=\"\" id=\"_ref_1\"><a href=\"#sec-invoke-custom-matcher\">InvokeCustomMatcher ( <var>matcher</var>, <var>subject</var>, <var>cacheGroup</var>, <var>kind</var>, <var>receiver</var> )</a></emu-xref></li>\n            <li><emu-xref href=\"#sec-pattern-match-cache-note\" id=\"_ref_2\"><a href=\"#sec-pattern-match-cache-note\">Cache semantics</a></emu-xref></li>\n          </ul>\n        </li>\n        <li><emu-xref href=\"#sec-relational-operators\" title=\"\" id=\"_ref_3\"><a href=\"#sec-relational-operators\">The <code>is</code> expression</a></emu-xref></li>\n        <li><emu-xref href=\"#sec-match-expression\" title=\"\" id=\"_ref_4\"><a href=\"#sec-match-expression\">The <code>match</code> Expression</a></emu-xref></li>\n        <li>\n          Non-trivial Built-in <emu-xref href=\"#sec-well-known-symbols\" id=\"_ref_19\"><a href=\"#sec-well-known-symbols\">%Symbol.customMatcher%</a></emu-xref> methods:\n          <ul>\n            <li><emu-xref href=\"#sec-function.prototype-%symbol.custommatcher%\" title=\"\" id=\"_ref_5\"><a href=\"#sec-function.prototype-%symbol.custommatcher%\">Function.prototype [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var>, <var>receiver</var> )</a></emu-xref></li>\n            <li><emu-xref href=\"#sec-regexp.prototype-%symbol.custommatcher%\" title=\"\" id=\"_ref_6\"><a href=\"#sec-regexp.prototype-%symbol.custommatcher%\">RegExp.prototype [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var> )</a></emu-xref></li>\n          </ul>\n        </li>\n        <li>(TODO) Scope analysis changes: <emu-xref href=\"#sec-syntax-directed-operations\" title=\"\" id=\"_ref_7\"><a href=\"#sec-syntax-directed-operations\">Syntax-Directed Operations</a></emu-xref></li>\n        <li><code>new</code> semantics changes:\n          <emu-xref href=\"#sec-initializeinstance\" id=\"_ref_8\"><a href=\"#sec-initializeinstance\">7.3.34</a></emu-xref>,\n          <emu-xref href=\"#sec-weakly-hold-targets-processing-model\" id=\"_ref_9\"><a href=\"#sec-weakly-hold-targets-processing-model\">9.10</a></emu-xref>, and\n          <emu-xref href=\"#sec-runtime-semantics-classdefinitionevaluation\" id=\"_ref_10\"><a href=\"#sec-runtime-semantics-classdefinitionevaluation\">15.7.14</a></emu-xref>\n        </li>\n        <li>\n          Possible extensions:\n          <emu-xref href=\"#sec-for-in-and-for-of-statements\" title=\"\" id=\"_ref_11\"><a href=\"#sec-for-in-and-for-of-statements\">The <code>for</code>-<code>in</code>, <code>for</code>-<code>of</code>, and <code>for</code>-<code>await</code>-<code>of</code> Statements</a></emu-xref> and\n          <emu-xref href=\"#sec-try-statement\" title=\"\" id=\"_ref_12\"><a href=\"#sec-try-statement\">The <code>try</code> Statement</a></emu-xref>\n        </li>\n      </ul>\n      <p>\n        Trivia built-in matchers are folded.\n        <a role=\"button\" id=\"expand\">Click to <span class=\"fold\">not</span> show the trivia sections.</a>\n      </p>\n      <script defer=\"\" async=\"\" src=\"./assets/expand.js\"></script>\n  </emu-intro>\n\n  <emu-intro id=\"sec-notes-layering\">\n    <h1>Layering</h1>\n    <p>The pattern-matching champion group designed this proposal with a layering approach. It does not mean the proposal is an MVP. The champion group wishes to ship the proposal as a whole when possible, but we can drop some features if there is strong pushback from the committee.</p>\n    <p>This approach allows the champion group to consider how all features combine and also how the proposal should behave if any of the features are missing.</p>\n    <p>A feature will have a note if</p>\n    <ul>\n      <li>it is a convenient feature instead of a necessary feature.</li>\n      <li>not all champion group members represent the hope to include it.</li>\n    </ul>\n  </emu-intro>\n</emu-intro>\n\n<emu-clause class=\"fold\" id=\"sec-overview\" number=\"4\">\n  <h1><span class=\"secnum\">4</span> Overview</h1>\n\n  <emu-clause id=\"sec-organization-of-this-specification\" number=\"5\">\n    <h1><span class=\"secnum\">4.5</span> Organization of This Specification</h1>\n    <p><ins>Clause <emu-xref href=\"#sec-pattern-matching\" id=\"_ref_13\"><a href=\"#sec-pattern-matching\">30</a></emu-xref> describes the pattern-matching feature.</ins></p>\n  </emu-clause>\n</emu-clause>\n\n<emu-clause class=\"fold\" id=\"sec-ecmascript-data-types-and-values\" aoid=\"Type\" number=\"6\">\n  <h1><span class=\"secnum\">6</span> ECMAScript Data Types and Values</h1>\n\n  <emu-clause id=\"sec-ecmascript-language-types\">\n    <h1><span class=\"secnum\">6.1</span> ECMAScript Language Types</h1>\n\n    <emu-clause id=\"sec-ecmascript-language-types-symbol-type\" number=\"5\">\n      <h1><span class=\"secnum\">6.1.5</span> The Symbol Type</h1>\n\n      <emu-clause id=\"sec-well-known-symbols\">\n        <h1><span class=\"secnum\">6.1.5.1</span> Well-Known Symbols</h1>\n        <emu-table id=\"table-1\" caption=\"Well-known Symbols\"><figure><figcaption>Table 1: Well-known Symbols</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Specification Name\n              </th>\n              <th>\n                <var class=\"field\">[[Description]]</var>\n              </th>\n              <th>\n                Value and Purpose\n              </th>\n            </tr>\n            <tr>\n              <td>\n                <ins><dfn tabindex=\"-1\">%Symbol.customMatcher%</dfn></ins>\n              </td>\n              <td>\n                <ins><code>\"Symbol.customMatcher\"</code></ins>\n              </td>\n              <td>\n                <ins>A method that performs custom pattern matching semantics. Called by the semantics of the pattern-matching features.</ins>\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n      </emu-clause>\n    </emu-clause>\n\n    <emu-clause id=\"sec-object-internal-methods-and-internal-slots\" number=\"7\">\n      <h1><span class=\"secnum\">6.1.7</span> Object Internal Methods and Internal Slots</h1>\n      <p><ins>All objects have an internal slot named <var class=\"field\">[[ConstructedBy]]</var>, which is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#sec-ecmascript-language-types\" id=\"_ref_20\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language values</a></emu-xref>.\n        This <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-list-and-record-specification-type\">List</a></emu-xref> represents the origin of the object. Initially, it is an empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-list-and-record-specification-type\">List</a></emu-xref>.</ins></p>\n    </emu-clause>\n  </emu-clause>\n</emu-clause>\n\n<emu-clause id=\"sec-abstract-operations\" number=\"7\">\n  <h1><span class=\"secnum\">7</span> Abstract Operations</h1>\n\n  <emu-clause id=\"sec-operations-on-objects\" number=\"3\">\n    <h1><span class=\"secnum\">7.3</span> Operations on Objects</h1>\n\n    <emu-clause oldids=\"sec-initializeinstanceelements\" id=\"sec-initializeinstance\" type=\"abstract operation\" number=\"34\" aoid=\"InitializeInstanceElements\"><span id=\"sec-initializeinstanceelements\"></span>\n      <h1><span class=\"secnum\">7.3.34</span> InitializeInstanceElements ( <var>O</var>, <var>constructor</var> )</h1>\n      <p>The abstract operation InitializeInstanceElements takes arguments <var>O</var> (an Object) and <var>constructor</var> (an ECMAScript <emu-xref href=\"#function-object\"><a href=\"https://tc39.es/ecma262/#function-object\">function object</a></emu-xref>) and returns either a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">normal completion containing</a></emu-xref> <emu-const>unused</emu-const> or a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">throw completion</a></emu-xref>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>methods</var> be the value of <var>constructor</var>.<var class=\"field\">[[PrivateMethods]]</var>.</li><li>For each <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> <var>method</var> of <var>methods</var>, do<ol><li>Perform ?&nbsp;<emu-xref aoid=\"PrivateMethodOrAccessorAdd\"><a href=\"https://tc39.es/ecma262/#sec-privatemethodoraccessoradd\">PrivateMethodOrAccessorAdd</a></emu-xref>(<var>O</var>, <var>method</var>).</li></ol></li><li>Let <var>fields</var> be the value of <var>constructor</var>.<var class=\"field\">[[Fields]]</var>.</li><li>For each element <var>fieldRecord</var> of <var>fields</var>, do<ol><li>Perform ?&nbsp;<emu-xref aoid=\"DefineField\"><a href=\"https://tc39.es/ecma262/#sec-definefield\" class=\"e-user-code\">DefineField</a></emu-xref>(<var>O</var>, <var>fieldRecord</var>).</li></ol></li><li><ins>Append <var>constructor</var> to <var>O</var>.<var class=\"field\">[[ConstructedBy]]</var>.</ins></li><li>Return <emu-const>unused</emu-const>.</li></ol></emu-alg>\n      <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">Rename this abstract operation to <dfn tabindex=\"-1\">InitializeInstance</dfn>.</div></emu-note>\n    </emu-clause>\n  </emu-clause>\n</emu-clause>\n\n<emu-clause class=\"todo\" id=\"sec-syntax-directed-operations\">\n  <h1><span class=\"secnum\">8</span> Syntax-Directed Operations</h1>\n\n  <emu-clause id=\"sec-syntax-directed-operations-scope-analysis\" number=\"2\">\n    <h1><span class=\"secnum\">8.2</span> Scope Analysis</h1>\n\n    <emu-clause id=\"sec-static-semantics-boundnames\" type=\"sdo\" number=\"1\" aoid=\"BoundNames\">\n      <h1><span class=\"secnum\">8.2.1</span> Static Semantics: BoundNames</h1>\n      <p>The <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"https://tc39.es/ecma262/#sec-algorithm-conventions-syntax-directed-operations\">syntax-directed operation</a></emu-xref> BoundNames takes no arguments and returns a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-list-and-record-specification-type\">List</a></emu-xref> of Strings.</p>\n      <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n        TODO: Scope Analysis.\n      </div></emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-static-semantics-declarationpart\" type=\"sdo\" number=\"2\" aoid=\"DeclarationPart\">\n      <h1><span class=\"secnum\">8.2.2</span> Static Semantics: DeclarationPart</h1>\n      <p>The <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"https://tc39.es/ecma262/#sec-algorithm-conventions-syntax-directed-operations\">syntax-directed operation</a></emu-xref> DeclarationPart takes no arguments and returns a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"https://tc39.es/ecma262/#sec-syntactic-grammar\">Parse Node</a></emu-xref>.</p>\n      <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n        TODO: Scope Analysis.\n      </div></emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-static-semantics-isconstantdeclaration\" type=\"sdo\" number=\"3\" aoid=\"IsConstantDeclaration\">\n      <h1><span class=\"secnum\">8.2.3</span> Static Semantics: IsConstantDeclaration</h1>\n      <p>The <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"https://tc39.es/ecma262/#sec-algorithm-conventions-syntax-directed-operations\">syntax-directed operation</a></emu-xref> IsConstantDeclaration takes no arguments and returns a Boolean.</p>\n      <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n        TODO: Scope Analysis.\n      </div></emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-static-semantics-lexicallydeclarednames\" type=\"sdo\" number=\"4\" aoid=\"LexicallyDeclaredNames\">\n      <h1><span class=\"secnum\">8.2.4</span> Static Semantics: LexicallyDeclaredNames</h1>\n      <p>The <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"https://tc39.es/ecma262/#sec-algorithm-conventions-syntax-directed-operations\">syntax-directed operation</a></emu-xref> LexicallyDeclaredNames takes no arguments and returns a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-list-and-record-specification-type\">List</a></emu-xref> of Strings.</p>\n      <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n        TODO: Scope Analysis.\n      </div></emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-static-semantics-lexicallyscopeddeclarations\" type=\"sdo\" number=\"5\" aoid=\"LexicallyScopedDeclarations\">\n      <h1><span class=\"secnum\">8.2.5</span> Static Semantics: LexicallyScopedDeclarations</h1>\n      <p>The <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"https://tc39.es/ecma262/#sec-algorithm-conventions-syntax-directed-operations\">syntax-directed operation</a></emu-xref> LexicallyScopedDeclarations takes no arguments and returns a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"https://tc39.es/ecma262/#sec-syntactic-grammar\">Parse Nodes</a></emu-xref>.</p>\n      <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n        TODO: Scope Analysis.\n      </div></emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-static-semantics-vardeclarednames\" type=\"sdo\" number=\"6\" aoid=\"VarDeclaredNames\">\n      <h1><span class=\"secnum\">8.2.6</span> Static Semantics: VarDeclaredNames</h1>\n      <p>The <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"https://tc39.es/ecma262/#sec-algorithm-conventions-syntax-directed-operations\">syntax-directed operation</a></emu-xref> VarDeclaredNames takes no arguments and returns a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-list-and-record-specification-type\">List</a></emu-xref> of Strings.</p>\n      <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n        TODO: Scope Analysis.\n      </div></emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-static-semantics-varscopeddeclarations\" type=\"sdo\" number=\"7\" aoid=\"VarScopedDeclarations\">\n      <h1><span class=\"secnum\">8.2.7</span> Static Semantics: VarScopedDeclarations</h1>\n      <p>The <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"https://tc39.es/ecma262/#sec-algorithm-conventions-syntax-directed-operations\">syntax-directed operation</a></emu-xref> VarScopedDeclarations takes no arguments and returns a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"https://tc39.es/ecma262/#sec-syntactic-grammar\">Parse Nodes</a></emu-xref>.</p>\n      <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n        TODO: Scope Analysis.\n      </div></emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-static-semantics-toplevellexicallydeclarednames\" type=\"sdo\" number=\"8\" aoid=\"TopLevelLexicallyDeclaredNames\">\n      <h1><span class=\"secnum\">8.2.8</span> Static Semantics: TopLevelLexicallyDeclaredNames</h1>\n      <p>The <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"https://tc39.es/ecma262/#sec-algorithm-conventions-syntax-directed-operations\">syntax-directed operation</a></emu-xref> TopLevelLexicallyDeclaredNames takes no arguments and returns a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-list-and-record-specification-type\">List</a></emu-xref> of Strings.</p>\n      <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n        TODO: Scope Analysis.\n      </div></emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-static-semantics-toplevellexicallyscopeddeclarations\" type=\"sdo\" number=\"9\" aoid=\"TopLevelLexicallyScopedDeclarations\">\n      <h1><span class=\"secnum\">8.2.9</span> Static Semantics: TopLevelLexicallyScopedDeclarations</h1>\n      <p>The <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"https://tc39.es/ecma262/#sec-algorithm-conventions-syntax-directed-operations\">syntax-directed operation</a></emu-xref> TopLevelLexicallyScopedDeclarations takes no arguments and returns a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"https://tc39.es/ecma262/#sec-syntactic-grammar\">Parse Nodes</a></emu-xref>.</p>\n      <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n        TODO: Scope Analysis.\n      </div></emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-static-semantics-toplevelvardeclarednames\" type=\"sdo\" number=\"10\" aoid=\"TopLevelVarDeclaredNames\">\n      <h1><span class=\"secnum\">8.2.10</span> Static Semantics: TopLevelVarDeclaredNames</h1>\n      <p>The <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"https://tc39.es/ecma262/#sec-algorithm-conventions-syntax-directed-operations\">syntax-directed operation</a></emu-xref> TopLevelVarDeclaredNames takes no arguments and returns a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-list-and-record-specification-type\">List</a></emu-xref> of Strings.</p>\n      <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n        TODO: Scope Analysis.\n      </div></emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-static-semantics-toplevelvarscopeddeclarations\" type=\"sdo\" number=\"11\" aoid=\"TopLevelVarScopedDeclarations\">\n      <h1><span class=\"secnum\">8.2.11</span> Static Semantics: TopLevelVarScopedDeclarations</h1>\n      <p>The <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"https://tc39.es/ecma262/#sec-algorithm-conventions-syntax-directed-operations\">syntax-directed operation</a></emu-xref> TopLevelVarScopedDeclarations takes no arguments and returns a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"https://tc39.es/ecma262/#sec-syntactic-grammar\">Parse Nodes</a></emu-xref>.</p>\n      <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n        TODO: Scope Analysis.\n      </div></emu-note>\n    </emu-clause>\n  </emu-clause>\n\n  <emu-clause id=\"sec-syntax-directed-operations-miscellaneous\" number=\"6\">\n    <h1><span class=\"secnum\">8.6</span> Miscellaneous</h1>\n\n    <emu-clause id=\"sec-runtime-semantics-bindinginitialization\" type=\"sdo\" number=\"2\" aoid=\"BindingInitialization\">\n      <h1><span class=\"secnum\">8.6.2</span> Runtime Semantics: BindingInitialization</h1>\n      <p>The <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"https://tc39.es/ecma262/#sec-algorithm-conventions-syntax-directed-operations\">syntax-directed operation</a></emu-xref> BindingInitialization takes arguments <var>value</var> (an <emu-xref href=\"#sec-ecmascript-language-types\" id=\"_ref_21\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and <var>environment</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"https://tc39.es/ecma262/#sec-environment-records\">Environment Record</a></emu-xref> or <emu-val>undefined</emu-val>) and returns either a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">normal completion containing</a></emu-xref> <emu-const>unused</emu-const> or an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>.</p>\n      <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n        TODO: Scope Analysis.\n      </div></emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-runtime-semantics-iteratorbindinginitialization\" type=\"sdo\" number=\"3\" aoid=\"IteratorBindingInitialization\">\n      <h1><span class=\"secnum\">8.6.3</span> Runtime Semantics: IteratorBindingInitialization</h1>\n      <p>The <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"https://tc39.es/ecma262/#sec-algorithm-conventions-syntax-directed-operations\">syntax-directed operation</a></emu-xref> IteratorBindingInitialization takes arguments <var>iteratorRecord</var> (an <emu-xref href=\"#sec-iterator-records\"><a href=\"https://tc39.es/ecma262/#sec-iterator-records\">Iterator Record</a></emu-xref>) and <var>environment</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"https://tc39.es/ecma262/#sec-environment-records\">Environment Record</a></emu-xref> or <emu-val>undefined</emu-val>) and returns either a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">normal completion containing</a></emu-xref> <emu-const>unused</emu-const> or an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>.</p>\n      <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n        TODO: Scope Analysis.\n      </div></emu-note>\n    </emu-clause>\n  </emu-clause>\n</emu-clause>\n\n<emu-clause class=\"fold\" id=\"sec-executable-code-and-execution-contexts\" number=\"9\">\n  <h1><span class=\"secnum\">9</span> Executable Code and Execution Contexts</h1>\n\n  <emu-clause id=\"sec-weakly-hold-targets-processing-model\" oldids=\"sec-weakref-processing-model\" number=\"10\"><span id=\"sec-weakref-processing-model\"></span>\n    <h1><span class=\"secnum\">9.10</span> Processing Model of <del>WeakRef and FinalizationRegistry</del><ins>weakly hold</ins> Targets</h1>\n\n    <emu-clause id=\"sec-weakly-hold-execution\" oldids=\"sec-weakref-execution\" number=\"3\"><span id=\"sec-weakref-execution\"></span>\n      <h1><span class=\"secnum\">9.10.3</span> Execution</h1>\n      <p>At any time, if a set of objects and/or symbols <var>S</var> is not <emu-xref href=\"#sec-liveness\"><a href=\"https://tc39.es/ecma262/#sec-liveness\">live</a></emu-xref>, an ECMAScript implementation may perform the following steps atomically:</p>\n      <emu-alg><ol><li>For each element <var>value</var> of <var>S</var>, do<ol><li>For each <emu-xref href=\"#sec-weak-ref-constructor\"><a href=\"https://tc39.es/ecma262/#sec-weak-ref-constructor\">WeakRef</a></emu-xref> <var>ref</var> such that <var>ref</var>.<var class=\"field\">[[WeakRefTarget]]</var> is <var>value</var>, do<ol><li>Set <var>ref</var>.<var class=\"field\">[[WeakRefTarget]]</var> to <emu-const>empty</emu-const>.</li></ol></li><li>For each <emu-xref href=\"#sec-finalization-registry-constructor\"><a href=\"https://tc39.es/ecma262/#sec-finalization-registry-constructor\">FinalizationRegistry</a></emu-xref> <var>fg</var> such that <var>fg</var>.<var class=\"field\">[[Cells]]</var> contains a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-list-and-record-specification-type\">Record</a></emu-xref> <var>cell</var> such that <var>cell</var>.<var class=\"field\">[[WeakRefTarget]]</var> is <var>value</var>, do<ol><li>Set <var>cell</var>.<var class=\"field\">[[WeakRefTarget]]</var> to <emu-const>empty</emu-const>.</li><li>Optionally, perform <emu-xref aoid=\"HostEnqueueFinalizationRegistryCleanupJob\"><a href=\"https://tc39.es/ecma262/#sec-host-cleanup-finalization-registry\" class=\"e-user-code\">HostEnqueueFinalizationRegistryCleanupJob</a></emu-xref>(<var>fg</var>).</li></ol></li><li>For each WeakMap <var>map</var> such that <var>map</var>.<var class=\"field\">[[WeakMapData]]</var> contains a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-list-and-record-specification-type\">Record</a></emu-xref> <var>r</var> such that <var>r</var>.<var class=\"field\">[[Key]]</var> is <var>value</var>, do<ol><li>Set <var>r</var>.<var class=\"field\">[[Key]]</var> to <emu-const>empty</emu-const>.</li><li>Set <var>r</var>.<var class=\"field\">[[Value]]</var> to <emu-const>empty</emu-const>.</li></ol></li><li>For each WeakSet <var>set</var> such that <var>set</var>.<var class=\"field\">[[WeakSetData]]</var> contains <var>value</var>, do<ol><li>Replace the element of <var>set</var>.<var class=\"field\">[[WeakSetData]]</var> whose value is <var>value</var> with an element whose value is <emu-const>empty</emu-const>.</li></ol></li><li><ins>For each Object <var>o</var> such that <var>o</var>.<var class=\"field\">[[ConstructedBy]]</var> contains <var>value</var>, do</ins><ol><li><ins>Remove <var>value</var> from <var>o</var>.<var class=\"field\">[[ConstructedBy]]</var>.</ins></li></ol></li></ol></li></ol></emu-alg>\n    </emu-clause>\n  </emu-clause>\n</emu-clause>\n\n<emu-clause class=\"fold\" id=\"sec-ecmascript-language-lexical-grammar\" number=\"12\">\n  <h1><span class=\"secnum\">12</span> ECMAScript Language: Lexical Grammar</h1>\n\n  <emu-clause id=\"sec-automatic-semicolon-insertion\" number=\"10\">\n    <h1><span class=\"secnum\">12.10</span> Automatic Semicolon Insertion</h1>\n\n    <emu-clause id=\"sec-rules-of-automatic-semicolon-insertion\" number=\"1\">\n      <h1><span class=\"secnum\">12.10.1</span> Rules of Automatic Semicolon Insertion</h1>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The following are the additions of the restricted productions in the grammar:</p>\n        <emu-grammar><emu-production name=\"RelationalExpression\" params=\"In, Yield, Await\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-RelationalExpression\">RelationalExpression</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4sv6neua\">\n        <emu-nt id=\"_ref_194\"><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n        <emu-gann>[no <emu-nt><a href=\"https://tc39.es/ecma262/#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>is</emu-t>\n        <emu-nt id=\"_ref_195\"><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"MatchExpression\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-MatchExpression\">MatchExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"mvw1s1gm\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-gann>[no <emu-nt><a href=\"https://tc39.es/ecma262/#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>{</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_196\"><a href=\"#prod-MatchExpressionClauses\">MatchExpressionClauses</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"MatchHead\">\n    <emu-nt><a href=\"#prod-MatchHead\">MatchHead</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qvsbvt69\">\n        <emu-t>match</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"https://tc39.es/ecma262/#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      </div></emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-interesting-cases-of-automatic-semicolon-insertion\" number=\"3\">\n      <h1><span class=\"secnum\">12.10.3</span> Interesting Cases of Automatic Semicolon Insertion</h1>\n\n      <emu-clause id=\"sec-asi-cases-with-no-lineterminator-here\" number=\"2\">\n        <h1><span class=\"secnum\">12.10.3.2</span> Cases of Automatic Semicolon Insertion and “[no <emu-nt><a href=\"https://tc39.es/ecma262/#prod-LineTerminator\">LineTerminator</a></emu-nt> here]”</h1>\n\n        <emu-clause id=\"sec-no-lineterminator-here-automatic-semicolon-insertion-list\" number=\"1\">\n          <h1><span class=\"secnum\">12.10.3.2.1</span> List of Grammar Productions with Optional Operands and “[no <emu-nt><a href=\"https://tc39.es/ecma262/#prod-LineTerminator\">LineTerminator</a></emu-nt> here]”</h1>\n          <ul>\n            <li><ins><emu-nt id=\"_ref_197\"><a href=\"#prod-MatchExpression\">MatchExpression</a></emu-nt>.</ins></li>\n          </ul>\n        </emu-clause>\n      </emu-clause>\n    </emu-clause>\n  </emu-clause>\n</emu-clause>\n\n<emu-clause id=\"sec-ecmascript-language-expressions\" number=\"13\">\n  <h1><span class=\"secnum\">13</span> ECMAScript Language: Expressions</h1>\n\n  <emu-clause id=\"sec-primary-expression\" number=\"2\">\n    <h1><span class=\"secnum\">13.2</span> Primary Expression</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"PrimaryExpression\" params=\"Yield, Await\" id=\"prod-PrimaryExpression\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"mbzy6lvr\">\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt>\n    </emu-rhs>\n    <ins><emu-rhs a=\"xhniddxr\" id=\"prod-XSmG8KFu\">\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_198\"><a href=\"#prod-MatchExpression\">MatchExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs></ins>\n</emu-production>\n</emu-grammar>\n\n    <emu-clause id=\"sec-primary-expression-match-expression\" number=\"10\">\n      <h1><span class=\"secnum\">13.2.10</span> Match Expression</h1>\n      <p>See <emu-xref href=\"#sec-match-expression\" title=\"\" id=\"_ref_14\"><a href=\"#sec-match-expression\">The <code>match</code> Expression</a></emu-xref> for <emu-grammar><emu-production name=\"PrimaryExpression\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"hbnv2khd\"><emu-nt id=\"_ref_199\"><a href=\"#prod-MatchExpression\">MatchExpression</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar></p>\n    </emu-clause>\n  </emu-clause>\n\n  <emu-clause id=\"sec-relational-operators\" number=\"10\">\n    <h1><span class=\"secnum\">13.10</span> Relational Operators</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"RelationalExpression\" params=\"In, Yield, Await\" id=\"prod-RelationalExpression\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-RelationalExpression\">RelationalExpression</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <ins><emu-rhs a=\"7pwutwad\" id=\"prod-EdmoEhta\">\n        <emu-nt params=\"?In, ?Yield, ?Await\" id=\"_ref_200\"><a href=\"#prod-RelationalExpression\">RelationalExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-gann>[no <emu-nt><a href=\"https://tc39.es/ecma262/#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>is</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_201\"><a href=\"#prod-MatchPattern\">MatchPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs></ins>\n</emu-production>\n</emu-grammar>\n    <emu-note code=\"\"><span class=\"note\">Note</span><div class=\"note-contents\">\n      <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">const</span> isOk = response is { <span class=\"hljs-attr\">ok</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">status</span>: &gt; <span class=\"hljs-number\">200</span> and &lt; <span class=\"hljs-number\">400</span> };</code></pre>\n    </div></emu-note>\n    <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n      This feature can be replaced by <emu-xref href=\"#sec-match-expression\" title=\"\" id=\"_ref_15\"><a href=\"#sec-match-expression\">The <code>match</code> Expression</a></emu-xref>.\n      The code example above can be written as:\n      <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">const</span> isOk = match (response) {\n  { <span class=\"hljs-attr\">ok</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">status</span>: &gt; <span class=\"hljs-number\">200</span> and &lt; <span class=\"hljs-number\">400</span> }: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-attr\">default</span>: <span class=\"hljs-literal\">false</span>\n};</code></pre>\n    </div></emu-note>\n    <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n      We may need to use a non-<emu-xref href=\"#sec-keywords-and-reserved-words\"><a href=\"https://tc39.es/ecma262/#sec-keywords-and-reserved-words\">contextual keyword</a></emu-xref> like <code>~=</code> instead of a <emu-xref href=\"#sec-keywords-and-reserved-words\"><a href=\"https://tc39.es/ecma262/#sec-keywords-and-reserved-words\">contextual keyword</a></emu-xref> like <code>is</code>. See <a href=\"https://github.com/waldemarhorwat/syntax/blob/main/contextual-keywords.md?rgh-link-date=2024-09-06T16%3A43%3A25Z\" data-print-href=\"\">waldemarhorwat/syntax@main/contextual-keywords.md</a>\n      and <a href=\"https://github.com/tc39/proposal-pattern-matching/issues/323\" data-print-href=\"\">Syntax effects on rest of the language</a>.\n    </div></emu-note>\n\n    <emu-clause id=\"sec-relational-operators-runtime-semantics-evaluation\" number=\"1\">\n      <h1><span class=\"secnum\">13.10.1</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><ins><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uyg6vvvy\">\n        <emu-nt id=\"_ref_202\"><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n        <emu-t>is</emu-t>\n        <emu-nt id=\"_ref_203\"><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt>\n    </emu-rhs>\n</emu-production></ins>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be ?&nbsp;<emu-xref aoid=\"Evaluation\"><a href=\"https://tc39.es/ecma262/#sec-evaluation\" class=\"e-user-code\">Evaluation</a></emu-xref> of <emu-nt id=\"_ref_204\"><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&nbsp;<emu-xref aoid=\"GetValue\"><a href=\"https://tc39.es/ecma262/#sec-getvalue\" class=\"e-user-code\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>cacheGroup</var> be <emu-xref aoid=\"CreateMatchCache\" id=\"_ref_22\"><a href=\"#sec-creatematchcache\">CreateMatchCache</a></emu-xref>().</li><li>Let <var>matchCompletion</var> be ?&nbsp;<emu-xref aoid=\"MatchPatternMatches\" id=\"_ref_23\"><a href=\"#sec-match-pattern-matches\" class=\"e-user-code\">MatchPatternMatches</a></emu-xref> of <emu-nt id=\"_ref_205\"><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt> with argument <var>lval</var> and <var>cacheGroup</var>.</li><li>If <var>matchCompletion</var> is a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">normal completion</a></emu-xref>, then<ol><li>If <var>matchCompletion</var>.<var class=\"field\">[[Value]]</var> is <emu-const>not-matched</emu-const>, set <var>matchCompletion</var> to <emu-xref aoid=\"NormalCompletion\"><a href=\"https://tc39.es/ecma262/#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>false</emu-val>).</li><li>Else, set <var>matchCompletion</var> to <emu-xref aoid=\"NormalCompletion\"><a href=\"https://tc39.es/ecma262/#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>true</emu-val>).</li></ol></li><li>Let <var>result</var> be <emu-xref aoid=\"Completion\"><a href=\"https://tc39.es/ecma262/#sec-completion-ao\">Completion</a></emu-xref>(<emu-xref aoid=\"FinishMatch\" id=\"_ref_24\"><a href=\"#sec-finish-match\" class=\"e-user-code\">FinishMatch</a></emu-xref>(<var>matchCompletion</var>, <var>cacheGroup</var>)).</li><li><emu-xref href=\"#assert\"><a href=\"https://tc39.es/ecma262/#assert\">Assert</a></emu-xref>: <var>result</var> is a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">normal completion</a></emu-xref> or an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>.</li><li>Return <var>result</var>.</li></ol></emu-alg>\n    </emu-clause>\n  </emu-clause>\n</emu-clause>\n\n<emu-clause id=\"sec-ecmascript-language-statements-and-declarations\" number=\"14\">\n  <h1><span class=\"secnum\">14</span> ECMAScript Language: Statements and Declarations</h1>\n  <h2>Syntax</h2>\n\n  <emu-clause id=\"sec-iteration-statements\" number=\"7\">\n    <h1><span class=\"secnum\">14.7</span> Iteration Statements</h1>\n\n    <emu-clause id=\"sec-for-in-and-for-of-statements\">\n      <h1><span class=\"secnum\">14.7.1</span> The <code>for</code>-<code>in</code>, <code>for</code>-<code>of</code>, and <code>for</code>-<code>await</code>-<code>of</code> Statements</h1>\n      <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n        It is possible to add pattern-matching to the <code>for</code> iteration statements. It might look like this:\n        <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> response <span class=\"hljs-keyword\">of</span> responses) {\n  <span class=\"hljs-keyword\">if</span> (item is { <span class=\"hljs-attr\">ok</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-keyword\">let</span> body }) {\n  }\n}\n<span class=\"hljs-comment\">// can be written as</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> response is { <span class=\"hljs-attr\">ok</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-keyword\">let</span> body } <span class=\"hljs-keyword\">of</span> responses) {\n}\n<span class=\"hljs-comment\">// or</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> response <span class=\"hljs-keyword\">of</span> responses matches { <span class=\"hljs-attr\">ok</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-keyword\">let</span> body }) {\n}</code></pre>\n      </div></emu-note>\n    </emu-clause>\n  </emu-clause>\n\n  <emu-clause id=\"sec-try-statement\" number=\"14\">\n    <h1><span class=\"secnum\">14.14</span> The <code>try</code> Statement</h1>\n    <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n      It is possible to add pattern-matching to the <code>try</code> statement. It might look like this:\n      <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">try</span> { }\n<span class=\"hljs-keyword\">catch</span> (error) {\n  <span class=\"hljs-keyword\">if</span> (error is { <span class=\"hljs-attr\">message</span>: <span class=\"hljs-regexp\">/JSON/</span> }) { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>; }\n  <span class=\"hljs-keyword\">throw</span> error;\n}\n<span class=\"hljs-comment\">// can be written as</span>\n<span class=\"hljs-keyword\">try</span> { }\n<span class=\"hljs-keyword\">catch</span> (error is { <span class=\"hljs-attr\">message</span>: <span class=\"hljs-regexp\">/JSON/</span> }) { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>; }\n<span class=\"hljs-comment\">// unmatched error will be re-thrown.</span></code></pre>\n    </div></emu-note>\n  </emu-clause>\n</emu-clause>\n\n<emu-clause id=\"sec-ecmascript-language-functions-and-classes\" number=\"15\">\n  <h1><span class=\"secnum\">15</span> ECMAScript Language: Functions and Classes</h1>\n\n  <emu-clause id=\"sec-class-definitions\" number=\"7\">\n    <h1><span class=\"secnum\">15.7</span> Class Definitions</h1>\n\n    <emu-clause id=\"sec-runtime-semantics-classdefinitionevaluation\" type=\"sdo\" number=\"14\" aoid=\"ClassDefinitionEvaluation\">\n      <h1><span class=\"secnum\">15.7.14</span> Runtime Semantics: ClassDefinitionEvaluation</h1>\n      <p>The <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"https://tc39.es/ecma262/#sec-algorithm-conventions-syntax-directed-operations\">syntax-directed operation</a></emu-xref> ClassDefinitionEvaluation takes arguments <var>classBinding</var> (a String or <emu-val>undefined</emu-val>) and <var>className</var> (a <emu-xref href=\"#sec-object-type\"><a href=\"https://tc39.es/ecma262/#sec-object-type\">property key</a></emu-xref> or a <emu-xref href=\"#sec-private-names\"><a href=\"https://tc39.es/ecma262/#sec-private-names\">Private Name</a></emu-xref>) and returns either a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">normal completion containing</a></emu-xref> a <emu-xref href=\"#function-object\"><a href=\"https://tc39.es/ecma262/#function-object\">function object</a></emu-xref> or an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>.</p>\n      <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n        See <a href=\"https://github.com/tc39/ecma262/pull/3212/files\" target=\"_blank\" data-print-href=\"\">Editorial: call MakeClassConstructor on default class constructor</a>.\n      </div></emu-note>\n    </emu-clause>\n  </emu-clause>\n\n  <emu-clause class=\"fold\" id=\"sec-tail-position-calls\" number=\"10\">\n    <h1><span class=\"secnum\">15.10</span> Tail Position Calls</h1>\n\n    <emu-clause id=\"sec-static-semantics-hascallintailposition\" number=\"2\" type=\"sdo\" aoid=\"HasCallInTailPosition\">\n      <h1><span class=\"secnum\">15.10.2</span> Static Semantics: HasCallInTailPosition</h1>\n      <p>The <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"https://tc39.es/ecma262/#sec-algorithm-conventions-syntax-directed-operations\">syntax-directed operation</a></emu-xref> HasCallInTailPosition takes argument <var>call</var> (a <emu-nt><a href=\"https://tc39.es/ecma262/#prod-CallExpression\">CallExpression</a></emu-nt> <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"https://tc39.es/ecma262/#sec-syntactic-grammar\">Parse Node</a></emu-xref>, a <emu-nt><a href=\"https://tc39.es/ecma262/#prod-MemberExpression\">MemberExpression</a></emu-nt> <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"https://tc39.es/ecma262/#sec-syntactic-grammar\">Parse Node</a></emu-xref>, or an <emu-nt><a href=\"https://tc39.es/ecma262/#prod-OptionalChain\">OptionalChain</a></emu-nt> <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"https://tc39.es/ecma262/#sec-syntactic-grammar\">Parse Node</a></emu-xref>) and returns a Boolean. It is defined piecewise over the following productions:</p>\n      <emu-grammar><ins><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uyg6vvvy\" id=\"prod-9oXzuZL6\">\n        <emu-nt id=\"_ref_206\"><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n        <emu-t>is</emu-t>\n        <emu-nt id=\"_ref_207\"><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt>\n    </emu-rhs>\n</emu-production></ins>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><ins><emu-production name=\"PrimaryExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"hbnv2khd\" id=\"prod-UB1LtDnR\"><emu-nt id=\"_ref_208\"><a href=\"#prod-MatchExpression\">MatchExpression</a></emu-nt></emu-rhs>\n</emu-production></ins>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"HasCallInTailPosition\" id=\"_ref_25\"><a href=\"#sec-static-semantics-hascallintailposition\">HasCallInTailPosition</a></emu-xref> of <emu-nt id=\"_ref_209\"><a href=\"#prod-MatchExpression\">MatchExpression</a></emu-nt> with argument <var>call</var>.</li></ol></emu-alg>\n      <emu-grammar><ins><emu-production name=\"MatchExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MatchExpression\">MatchExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"y2kk1jwh\" id=\"prod-BHK6aZq8\">\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>\n        <emu-t>{</emu-t>\n        <emu-nt id=\"_ref_210\"><a href=\"#prod-MatchExpressionClauses\">MatchExpressionClauses</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production></ins>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"HasCallInTailPosition\" id=\"_ref_26\"><a href=\"#sec-static-semantics-hascallintailposition\">HasCallInTailPosition</a></emu-xref> of <emu-nt id=\"_ref_211\"><a href=\"#prod-MatchExpressionClauses\">MatchExpressionClauses</a></emu-nt> with argument <var>call</var>.</li></ol></emu-alg>\n      <emu-grammar><ins><emu-production name=\"MatchExpressionClauses\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MatchExpressionClauses\">MatchExpressionClauses</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uzg4qni-\" id=\"prod-YG9CRILW\"><emu-nt id=\"_ref_212\"><a href=\"#prod-MatchExpressionClause\">MatchExpressionClause</a></emu-nt></emu-rhs>\n</emu-production></ins>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"HasCallInTailPosition\" id=\"_ref_27\"><a href=\"#sec-static-semantics-hascallintailposition\">HasCallInTailPosition</a></emu-xref> of <emu-nt id=\"_ref_213\"><a href=\"#prod-MatchExpressionClause\">MatchExpressionClause</a></emu-nt> with argument <var>call</var>.</li></ol></emu-alg>\n      <emu-grammar><ins><emu-production name=\"MatchExpressionClauses\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MatchExpressionClauses\">MatchExpressionClauses</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"mxhusj8b\" id=\"prod-O1ji-jbG\">\n        <emu-nt id=\"_ref_214\"><a href=\"#prod-MatchExpressionClauses\">MatchExpressionClauses</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt id=\"_ref_215\"><a href=\"#prod-MatchExpressionClause\">MatchExpressionClause</a></emu-nt>\n    </emu-rhs>\n</emu-production></ins>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>result</var> be <emu-xref aoid=\"HasCallInTailPosition\" id=\"_ref_28\"><a href=\"#sec-static-semantics-hascallintailposition\">HasCallInTailPosition</a></emu-xref> of <emu-nt id=\"_ref_216\"><a href=\"#prod-MatchExpressionClauses\">MatchExpressionClauses</a></emu-nt> with argument <var>call</var>.</li><li>If <var>result</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"HasCallInTailPosition\" id=\"_ref_29\"><a href=\"#sec-static-semantics-hascallintailposition\">HasCallInTailPosition</a></emu-xref> of <emu-nt id=\"_ref_217\"><a href=\"#prod-MatchExpressionClause\">MatchExpressionClause</a></emu-nt> with argument <var>call</var>.</li></ol></emu-alg>\n      <emu-grammar><ins><emu-production name=\"MatchExpressionClauses\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MatchExpressionClauses\">MatchExpressionClauses</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"g1pmaudo\" id=\"prod-ac1fz2Ib\">\n        <emu-nt id=\"_ref_218\"><a href=\"#prod-MatchExpressionClauses\">MatchExpressionClauses</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-Expression\">Expression</a></emu-nt>\n    </emu-rhs>\n</emu-production></ins>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>result</var> be <emu-xref aoid=\"HasCallInTailPosition\" id=\"_ref_30\"><a href=\"#sec-static-semantics-hascallintailposition\">HasCallInTailPosition</a></emu-xref> of <emu-nt id=\"_ref_219\"><a href=\"#prod-MatchExpressionClauses\">MatchExpressionClauses</a></emu-nt> with argument <var>call</var>.</li><li>If <var>result</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"HasCallInTailPosition\" id=\"_ref_31\"><a href=\"#sec-static-semantics-hascallintailposition\">HasCallInTailPosition</a></emu-xref> of <emu-nt><a href=\"https://tc39.es/ecma262/#prod-Expression\">Expression</a></emu-nt> with argument <var>call</var>.</li></ol></emu-alg>\n      <emu-grammar><ins><emu-production name=\"MatchExpressionClauses\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MatchExpressionClauses\">MatchExpressionClauses</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xhzralk2\" id=\"prod-4UejTJZU\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-Expression\">Expression</a></emu-nt>\n    </emu-rhs>\n</emu-production></ins>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"HasCallInTailPosition\" id=\"_ref_32\"><a href=\"#sec-static-semantics-hascallintailposition\">HasCallInTailPosition</a></emu-xref> of <emu-nt><a href=\"https://tc39.es/ecma262/#prod-Expression\">Expression</a></emu-nt> with argument <var>call</var>.</li></ol></emu-alg>\n      <emu-grammar><ins><emu-production name=\"MatchExpressionClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MatchExpressionClause\">MatchExpressionClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pjnnj8-j\" id=\"prod-FYuYdt05\">\n        <emu-nt id=\"_ref_220\"><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-Expression\">Expression</a></emu-nt>\n    </emu-rhs>\n</emu-production></ins>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"HasCallInTailPosition\" id=\"_ref_33\"><a href=\"#sec-static-semantics-hascallintailposition\">HasCallInTailPosition</a></emu-xref> of <emu-nt><a href=\"https://tc39.es/ecma262/#prod-Expression\">Expression</a></emu-nt> with argument <var>call</var>.</li></ol></emu-alg>\n    </emu-clause>\n  </emu-clause>\n</emu-clause>\n\n<emu-clause id=\"sec-fundamental-objects\" number=\"20\">\n  <h1><span class=\"secnum\">20</span> Fundamental Objects</h1>\n\n  <emu-clause class=\"fold\" id=\"sec-object-objects\" number=\"1\">\n    <h1><span class=\"secnum\">20.1</span> Object Objects</h1>\n\n    <emu-clause id=\"sec-properties-of-the-object-constructor\" number=\"2\">\n      <h1><span class=\"secnum\">20.1.2</span> Properties of the Object Constructor</h1>\n\n      <emu-clause id=\"sec-object-%symbol.custommatcher%\" number=\"24\">\n        <h1><span class=\"secnum\">20.1.2.24</span> Object [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var> )</h1>\n        <p>This function performs the following steps when called:</p>\n        <emu-alg><ol><li>Perform ?&nbsp;<emu-xref aoid=\"ValidateCustomMatcherHint\" id=\"_ref_34\"><a href=\"#sec-validatecustommatcherhint\">ValidateCustomMatcherHint</a></emu-xref>(<var>hint</var>, <emu-const>boolean</emu-const>).</li><li>If <var>subject</var> <emu-xref href=\"#sec-object-type\"><a href=\"https://tc39.es/ecma262/#sec-object-type\">is not an Object</a></emu-xref>, return <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n    </emu-clause>\n  </emu-clause>\n\n  <emu-clause id=\"sec-function-objects\" number=\"2\">\n    <h1><span class=\"secnum\">20.2</span> Function Objects</h1>\n\n    <emu-clause id=\"sec-properties-of-the-function-constructor\" number=\"2\">\n      <h1><span class=\"secnum\">20.2.2</span> Properties of the Function Constructor</h1>\n\n      <emu-clause id=\"sec-function-%symbol.custommatcher%\" number=\"2\">\n        <h1><span class=\"secnum\">20.2.2.2</span> Function [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var> )</h1>\n        <p>This function performs the following steps when called:</p>\n        <emu-alg><ol><li>Perform ?&nbsp;<emu-xref aoid=\"ValidateCustomMatcherHint\" id=\"_ref_35\"><a href=\"#sec-validatecustommatcherhint\">ValidateCustomMatcherHint</a></emu-xref>(<var>hint</var>, <emu-const>boolean</emu-const>).</li><li>Return <emu-xref aoid=\"IsCallable\"><a href=\"https://tc39.es/ecma262/#sec-iscallable\">IsCallable</a></emu-xref>(<var>subject</var>).</li></ol></emu-alg>\n      </emu-clause>\n    </emu-clause>\n\n    <emu-clause id=\"sec-properties-of-the-function-prototype-object\" number=\"3\">\n      <h1><span class=\"secnum\">20.2.3</span> Properties of the Function Prototype Object</h1>\n\n      <emu-clause id=\"sec-function.prototype-%symbol.custommatcher%\" number=\"7\">\n        <h1><span class=\"secnum\">20.2.3.7</span> Function.prototype [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var>, <var>receiver</var> )</h1>\n        <p>This function performs the following steps when called:</p>\n        <emu-alg><ol><li>Perform ?&nbsp;<emu-xref aoid=\"ValidateCustomMatcherHint\" id=\"_ref_36\"><a href=\"#sec-validatecustommatcherhint\">ValidateCustomMatcherHint</a></emu-xref>(<var>hint</var>).</li><li>Let <var>func</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"https://tc39.es/ecma262/#sec-iscallable\">IsCallable</a></emu-xref>(<var>func</var>) is false, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>subject</var>.<var class=\"field\">[[ConstructedBy]]</var> contains <var>func</var>, return <emu-val>true</emu-val>.</li><li>If <var>func</var> does not have a <var class=\"field\">[[IsClassConstructor]]</var> internal slot or <var>func</var>.<var class=\"field\">[[IsClassConstructor]]</var> is <emu-val>false</emu-val>, return ?&nbsp;<emu-xref aoid=\"Call\"><a href=\"https://tc39.es/ecma262/#sec-call\" class=\"e-user-code\">Call</a></emu-xref>(<var>func</var>, <var>receiver</var>, « <var>subject</var>, <var>hint</var>&nbsp;»).</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n        <emu-note code=\"\"><span class=\"note\">Note</span><div class=\"note-contents\"><pre><code class=\"javascript hljs\"><span class=\"hljs-comment\">// For non-class functions.</span>\n[] is <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-property\">isArray</span>; <span class=\"hljs-comment\">// true, by Array.isArray(expr)</span>\n\n<span class=\"hljs-comment\">// For objects created by `new`, it uses private-field-like semantics.</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyError</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Error</span> {}\n<span class=\"hljs-keyword\">const</span> myError = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MyError</span>();\nmyError is <span class=\"hljs-title class_\">MyError</span>; <span class=\"hljs-comment\">// true</span>\nmyError is <span class=\"hljs-title class_\">Error</span>; <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">create</span>(<span class=\"hljs-title class_\">MyError</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>) is <span class=\"hljs-title class_\">MyError</span>; <span class=\"hljs-comment\">// false</span>\n\n<span class=\"hljs-comment\">// Also works for normal functions</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ES5StyleClass</span>(<span class=\"hljs-params\"></span>) {}\n<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">ES5StyleClass</span>() is ES5StyleClass; <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">create</span>(ES5StyleClass.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>) is ES5StyleClass; <span class=\"hljs-comment\">// false</span></code></pre></div></emu-note>\n        <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n          <p>This does not work with ES5 style class inherit.</p>\n          <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">MyError</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-title class_\">Error</span>.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">this</span>);\n}\n<span class=\"hljs-title class_\">MyError</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">create</span>(<span class=\"hljs-title class_\">Error</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>);\n<span class=\"hljs-keyword\">var</span> error = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MyError</span>();\nerror is <span class=\"hljs-title class_\">MyError</span>; <span class=\"hljs-comment\">// true</span>\nerror is <span class=\"hljs-title class_\">Error</span>; <span class=\"hljs-comment\">// false</span></code></pre>\n        </div></emu-note>\n        <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n          <p>Not everyone in the champion group agrees with private-field-like brand check semantics.</p>\n          <p>\n            There are\n            <a href=\"https://github.com/tc39/proposal-pattern-matching/pull/293#issuecomment-1725097699\" target=\"_blank\" data-print-href=\"\">performance concerns</a>,\n            <a href=\"https://github.com/tc39/proposal-pattern-matching/pull/293#issuecomment-1725097699\" target=\"_blank\" data-print-href=\"\">\"hackable\" concerns</a>, and\n            <a href=\"https://github.com/tc39/proposal-pattern-matching/pull/293#issuecomment-1725097699\" target=\"_blank\" data-print-href=\"\">interaction\n              with %Symbol.hasInstance% concerns</a>.\n          </p>\n          <p>Another approach is to use the <code>instanceof</code> semantics.</p>\n        </div></emu-note>\n      </emu-clause>\n    </emu-clause>\n  </emu-clause>\n\n  <emu-clause class=\"fold\" id=\"sec-boolean-objects\" number=\"3\">\n    <h1><span class=\"secnum\">20.3</span> Boolean Objects</h1>\n\n    <emu-clause id=\"sec-properties-of-the-boolean-constructor\" number=\"2\">\n      <h1><span class=\"secnum\">20.3.2</span> Properties of the Boolean Constructor</h1>\n\n      <emu-clause id=\"sec-boolean-%symbol.custommatcher%\" number=\"2\">\n        <h1><span class=\"secnum\">20.3.2.2</span> Boolean [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var> )</h1>\n        <p>This function performs the following steps when called:</p>\n        <emu-alg><ol><li>Perform ?&nbsp;<emu-xref aoid=\"ValidateCustomMatcherHint\" id=\"_ref_37\"><a href=\"#sec-validatecustommatcherhint\">ValidateCustomMatcherHint</a></emu-xref>(<var>hint</var>).</li><li>If <var>subject</var> <emu-xref href=\"#sec-ecmascript-language-types-boolean-type\"><a href=\"https://tc39.es/ecma262/#sec-ecmascript-language-types-boolean-type\">is not a Boolean</a></emu-xref> and does not have a <var class=\"field\">[[BooleanData]]</var> internal slot, return <emu-val>false</emu-val>.</li><li>If <var>hint</var> is <emu-val>\"boolean\"</emu-val>, return <emu-val>true</emu-val>.</li><li>If <var>subject</var> <emu-xref href=\"#sec-ecmascript-language-types-boolean-type\"><a href=\"https://tc39.es/ecma262/#sec-ecmascript-language-types-boolean-type\">is a Boolean</a></emu-xref>, return <emu-xref aoid=\"CreateArrayFromList\"><a href=\"https://tc39.es/ecma262/#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(« <var>subject</var>&nbsp;»).</li><li>Return <emu-xref aoid=\"CreateArrayFromList\"><a href=\"https://tc39.es/ecma262/#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(« <var>subject</var>.<var class=\"field\">[[BooleanData]]</var>&nbsp;»).</li></ol></emu-alg>\n      </emu-clause>\n    </emu-clause>\n    <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n      Another approach is to ignore boxed primitives and only match primitive values.\n    </div></emu-note>\n  </emu-clause>\n\n  <emu-clause class=\"fold\" id=\"sec-symbol-objects\" number=\"4\">\n    <h1><span class=\"secnum\">20.4</span> Symbol Objects</h1>\n\n    <emu-clause id=\"sec-properties-of-the-symbol-constructor\" number=\"2\">\n      <h1><span class=\"secnum\">20.4.2</span> Properties of the Symbol Constructor</h1>\n\n      <emu-clause id=\"sec-symbol.custommatcher\" number=\"17\">\n        <h1><span class=\"secnum\">20.4.2.17</span> Symbol.customMatcher</h1>\n        <p>The initial value of <code>Symbol.customMatcher</code> is the well-known symbol <emu-xref href=\"#sec-well-known-symbols\" id=\"_ref_38\"><a href=\"#sec-well-known-symbols\">%Symbol.customMatcher%</a></emu-xref> (<emu-xref href=\"#table-well-known-symbols\"><a href=\"https://tc39.es/ecma262/#table-well-known-symbols\">Table 1</a></emu-xref>).</p>\n        <p>This property has the attributes { <var class=\"field\">[[Writable]]</var>: <emu-val>false</emu-val>, <var class=\"field\">[[Enumerable]]</var>: <emu-val>false</emu-val>, <var class=\"field\">[[Configurable]]</var>: <emu-val>false</emu-val> }.</p>\n      </emu-clause>\n\n      <emu-clause id=\"sec-symbol-%symbol.custommatcher%\">\n        <h1><span class=\"secnum\">20.4.2.18</span> Symbol [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var> )</h1>\n        <p>This function performs the following steps when called:</p>\n        <emu-alg><ol><li>Perform ?&nbsp;<emu-xref aoid=\"ValidateCustomMatcherHint\" id=\"_ref_39\"><a href=\"#sec-validatecustommatcherhint\">ValidateCustomMatcherHint</a></emu-xref>(<var>hint</var>).</li><li>If <var>subject</var> <emu-xref href=\"#sec-ecmascript-language-types-symbol-type\" id=\"_ref_40\"><a href=\"#sec-ecmascript-language-types-symbol-type\">is not a Symbol</a></emu-xref> and does not have a <var class=\"field\">[[SymbolData]]</var> internal slot, return <emu-val>false</emu-val>.</li><li>If <var>hint</var> is <emu-val>\"boolean\"</emu-val>, return <emu-val>true</emu-val>.</li><li>If <var>subject</var> <emu-xref href=\"#sec-ecmascript-language-types-symbol-type\" id=\"_ref_41\"><a href=\"#sec-ecmascript-language-types-symbol-type\">is a Symbol</a></emu-xref>, return <emu-xref aoid=\"CreateArrayFromList\"><a href=\"https://tc39.es/ecma262/#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(« <var>subject</var>&nbsp;»).</li><li>Return <emu-xref aoid=\"CreateArrayFromList\"><a href=\"https://tc39.es/ecma262/#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(« <var>subject</var>.<var class=\"field\">[[SymbolData]]</var>&nbsp;»).</li></ol></emu-alg>\n      </emu-clause>\n    </emu-clause>\n    <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n      Another approach is to ignore boxed primitives and only match primitive values.\n    </div></emu-note>\n  </emu-clause>\n\n  <emu-clause class=\"fold\" id=\"sec-error-objects\" number=\"5\">\n    <h1><span class=\"secnum\">20.5</span> Error Objects</h1>\n\n    <emu-clause id=\"sec-error-constructor\" number=\"1\">\n      <h1><span class=\"secnum\">20.5.1</span> The Error Constructor</h1>\n\n      <emu-clause id=\"sec-error-message\">\n        <h1><span class=\"secnum\">20.5.1.1</span> Error ( <var>message</var> [ , <var>options</var> ] )</h1>\n        <p>This function performs the following steps when called:</p>\n        <emu-alg><ol><li>If NewTarget is <emu-val>undefined</emu-val>, let <var>newTarget</var> be the <emu-xref href=\"#active-function-object\"><a href=\"https://tc39.es/ecma262/#active-function-object\">active function object</a></emu-xref>; else let <var>newTarget</var> be NewTarget.</li><li>Let <var>O</var> be ?&nbsp;<emu-xref aoid=\"OrdinaryCreateFromConstructor\"><a href=\"https://tc39.es/ecma262/#sec-ordinarycreatefromconstructor\" class=\"e-user-code\">OrdinaryCreateFromConstructor</a></emu-xref>(<var>newTarget</var>, <emu-val>\"%Error.prototype%\"</emu-val>, « <var class=\"field\">[[ErrorData]]</var>&nbsp;»).</li><li><ins>Set <var>O</var>.<var class=\"field\">[[ErrorData]]</var> to <emu-val>\"Error\"</emu-val>.</ins></li><li>If <var>message</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>msg</var> be ?&nbsp;<emu-xref aoid=\"ToString\"><a href=\"https://tc39.es/ecma262/#sec-tostring\" class=\"e-user-code\">ToString</a></emu-xref>(<var>message</var>).</li><li>Perform <emu-xref aoid=\"CreateNonEnumerableDataPropertyOrThrow\"><a href=\"https://tc39.es/ecma262/#sec-createnonenumerabledatapropertyorthrow\">CreateNonEnumerableDataPropertyOrThrow</a></emu-xref>(<var>O</var>, <emu-val>\"message\"</emu-val>, <var>msg</var>).</li></ol></li><li>Perform ?&nbsp;<emu-xref aoid=\"InstallErrorCause\"><a href=\"https://tc39.es/ecma262/#sec-installerrorcause\" class=\"e-user-code\">InstallErrorCause</a></emu-xref>(<var>O</var>, <var>options</var>).</li><li>Return <var>O</var>.</li></ol></emu-alg>\n      </emu-clause>\n    </emu-clause>\n\n    <emu-clause id=\"sec-properties-of-the-error-constructors\" number=\"2\">\n      <h1><span class=\"secnum\">20.5.2</span> Properties of the Error Constructor</h1>\n\n      <emu-clause id=\"sec-error-%symbol.custommatcher%\" number=\"2\">\n        <h1><span class=\"secnum\">20.5.2.2</span> Error [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var> )</h1>\n          <p>This function performs the following steps when called:</p>\n          <emu-alg><ol><li>Perform ?&nbsp;<emu-xref aoid=\"ValidateCustomMatcherHint\" id=\"_ref_42\"><a href=\"#sec-validatecustommatcherhint\">ValidateCustomMatcherHint</a></emu-xref>(<var>hint</var>, <emu-const>boolean</emu-const>).</li><li>If <var>subject</var> does not have a <var class=\"field\">[[ErrorData]]</var> internal slot, return <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n      <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n        It is possible to provide extractor semantics for Error matchers.\n        <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">if</span> (expr is <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-keyword\">let</span> message, { <span class=\"hljs-keyword\">let</span> cause })) {}</code></pre>\n      </div></emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-properties-of-error-instances\" number=\"4\">\n      <h1><span class=\"secnum\">20.5.4</span> Properties of Error Instances</h1>\n      <p>Error instances are <emu-xref href=\"#ordinary-object\"><a href=\"https://tc39.es/ecma262/#ordinary-object\">ordinary objects</a></emu-xref> that inherit properties from the <emu-xref href=\"#sec-properties-of-the-error-prototype-object\"><a href=\"https://tc39.es/ecma262/#sec-properties-of-the-error-prototype-object\">Error prototype object</a></emu-xref> and have an\n        <var class=\"field\">[[ErrorData]]</var> internal slot whose value is <del><emu-val>undefined</emu-val></del> <ins>a String</ins>. The only specified uses of\n        <var class=\"field\">[[ErrorData]]</var> is to identify Error, AggregateError, and <var>NativeError</var> instances as Error objects within\n        <code>Object.prototype.toString</code> <ins>and their <emu-xref href=\"#sec-well-known-symbols\" id=\"_ref_43\"><a href=\"#sec-well-known-symbols\">%Symbol.customMatcher%</a></emu-xref> methods</ins>.</p>\n      <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n        Rename this internal slot to <var class=\"field\">[[ErrorKind]]</var>.\n      </div></emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-nativeerror-object-structure\" number=\"6\">\n      <h1><span class=\"secnum\">20.5.6</span> <var>NativeError</var> Object Structure</h1>\n\n      <emu-clause id=\"sec-nativeerror-constructors\" number=\"1\">\n        <h1><span class=\"secnum\">20.5.6.1</span> The <var>NativeError</var> Constructors</h1>\n\n        <emu-clause id=\"sec-nativeerror\" number=\"1\">\n          <h1><span class=\"secnum\">20.5.6.1.1</span> <var>NativeError</var> ( <var>message</var> [ , <var>options</var> ] )</h1>\n          <p>Each <var>NativeError</var> function performs the following steps when called:</p>\n          <emu-alg><ol><li>If NewTarget is <emu-val>undefined</emu-val>, let <var>newTarget</var> be the <emu-xref href=\"#active-function-object\"><a href=\"https://tc39.es/ecma262/#active-function-object\">active function object</a></emu-xref>; else let <var>newTarget</var> be NewTarget.</li><li>Let <var>O</var> be ?&nbsp;<emu-xref aoid=\"OrdinaryCreateFromConstructor\"><a href=\"https://tc39.es/ecma262/#sec-ordinarycreatefromconstructor\" class=\"e-user-code\">OrdinaryCreateFromConstructor</a></emu-xref>(<var>newTarget</var>, <code>\"%<var>NativeError</var>.prototype%\"</code>, « <var class=\"field\">[[ErrorData]]</var>&nbsp;»).</li><li><ins>Set <var>O</var>.<var class=\"field\">[[ErrorData]]</var> to <var>NativeError</var>.</ins></li><li>If <var>message</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>msg</var> be ?&nbsp;<emu-xref aoid=\"ToString\"><a href=\"https://tc39.es/ecma262/#sec-tostring\" class=\"e-user-code\">ToString</a></emu-xref>(<var>message</var>).</li><li>Perform <emu-xref aoid=\"CreateNonEnumerableDataPropertyOrThrow\"><a href=\"https://tc39.es/ecma262/#sec-createnonenumerabledatapropertyorthrow\">CreateNonEnumerableDataPropertyOrThrow</a></emu-xref>(<var>O</var>, <emu-val>\"message\"</emu-val>, <var>msg</var>).</li></ol></li><li>Perform ?&nbsp;<emu-xref aoid=\"InstallErrorCause\"><a href=\"https://tc39.es/ecma262/#sec-installerrorcause\" class=\"e-user-code\">InstallErrorCause</a></emu-xref>(<var>O</var>, <var>options</var>).</li><li>Return <var>O</var>.</li></ol></emu-alg>\n        </emu-clause>\n      </emu-clause>\n\n      <emu-clause id=\"sec-properties-of-the-nativeerror-constructors\" number=\"2\">\n        <h1><span class=\"secnum\">20.5.6.2</span> Properties of the <var>NativeError</var> Constructors</h1>\n\n        <emu-clause id=\"sec-nativeerror-%symbol.custommatcher%\" number=\"2\">\n          <h1><span class=\"secnum\">20.5.6.2.2</span> <var>NativeError</var> [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var> )</h1>\n          <emu-alg><ol><li>Perform ?&nbsp;<emu-xref aoid=\"ValidateCustomMatcherHint\" id=\"_ref_44\"><a href=\"#sec-validatecustommatcherhint\">ValidateCustomMatcherHint</a></emu-xref>(<var>hint</var>, <emu-const>boolean</emu-const>).</li><li>If <var>subject</var> does not have a <var class=\"field\">[[ErrorData]]</var> internal slot or <var>subject</var>.<var class=\"field\">[[ErrorData]]</var> is not <var>NativeError</var>, return <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n        </emu-clause>\n      </emu-clause>\n\n      <emu-clause id=\"sec-properties-of-nativeerror-instances\" number=\"4\">\n        <h1><span class=\"secnum\">20.5.6.4</span> Properties of <var>NativeError</var> Instances</h1>\n        <p><var>NativeError</var> instances are <emu-xref href=\"#ordinary-object\"><a href=\"https://tc39.es/ecma262/#ordinary-object\">ordinary objects</a></emu-xref> that inherit properties from their <var>NativeError</var> prototype object and\n          have an <var class=\"field\">[[ErrorData]]</var> internal slot whose value is <del><emu-val>undefined</emu-val></del> <ins>a String</ins>. The only specified use\n          of <var class=\"field\">[[ErrorData]]</var> is by <code>Object.prototype.toString</code> (<emu-xref href=\"#sec-object.prototype.tostring\"><a href=\"https://tc39.es/ecma262/#sec-object.prototype.tostring\">20.1.3.6</a></emu-xref>)\n          <ins>and their <emu-xref href=\"#sec-well-known-symbols\" id=\"_ref_45\"><a href=\"#sec-well-known-symbols\">%Symbol.customMatcher%</a></emu-xref> methods</ins> to identify Error, AggregateError, or <var>NativeError</var> instances.\n        </p>\n      </emu-clause>\n    </emu-clause>\n\n    <emu-clause id=\"sec-aggregate-error-objects\" number=\"7\">\n      <h1><span class=\"secnum\">20.5.7</span> AggregateError Objects</h1>\n\n      <emu-clause id=\"sec-aggregate-error-constructor\" number=\"1\">\n        <h1><span class=\"secnum\">20.5.7.1</span> The AggregateError Constructor</h1>\n\n        <emu-clause id=\"sec-aggregate-error\">\n          <h1><span class=\"secnum\">20.5.7.1.1</span> AggregateError ( <var>errors</var>, <var>message</var> [ , <var>options</var> ] )</h1>\n          <p>This function performs the following steps when called:</p>\n          <emu-alg><ol><li>If NewTarget is <emu-val>undefined</emu-val>, let <var>newTarget</var> be the <emu-xref href=\"#active-function-object\"><a href=\"https://tc39.es/ecma262/#active-function-object\">active function object</a></emu-xref>; else let <var>newTarget</var> be NewTarget.</li><li>Let <var>O</var> be ?&nbsp;<emu-xref aoid=\"OrdinaryCreateFromConstructor\"><a href=\"https://tc39.es/ecma262/#sec-ordinarycreatefromconstructor\" class=\"e-user-code\">OrdinaryCreateFromConstructor</a></emu-xref>(<var>newTarget</var>, <emu-val>\"%AggregateError.prototype%\"</emu-val>, « <var class=\"field\">[[ErrorData]]</var>&nbsp;»).</li><li><ins>Set <var>O</var>.<var class=\"field\">[[ErrorData]]</var> to <emu-val>\"AggregateError\"</emu-val>.</ins></li><li>If <var>message</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>msg</var> be ?&nbsp;<emu-xref aoid=\"ToString\"><a href=\"https://tc39.es/ecma262/#sec-tostring\" class=\"e-user-code\">ToString</a></emu-xref>(<var>message</var>).</li><li>Perform <emu-xref aoid=\"CreateNonEnumerableDataPropertyOrThrow\"><a href=\"https://tc39.es/ecma262/#sec-createnonenumerabledatapropertyorthrow\">CreateNonEnumerableDataPropertyOrThrow</a></emu-xref>(<var>O</var>, <emu-val>\"message\"</emu-val>, <var>msg</var>).</li></ol></li><li>Perform ?&nbsp;<emu-xref aoid=\"InstallErrorCause\"><a href=\"https://tc39.es/ecma262/#sec-installerrorcause\" class=\"e-user-code\">InstallErrorCause</a></emu-xref>(<var>O</var>, <var>options</var>).</li><li>Let <var>errorsList</var> be ?&nbsp;<emu-xref aoid=\"IteratorToList\"><a href=\"https://tc39.es/ecma262/#sec-iteratortolist\" class=\"e-user-code\">IteratorToList</a></emu-xref>(? <emu-xref aoid=\"GetIterator\"><a href=\"https://tc39.es/ecma262/#sec-getiterator\" class=\"e-user-code\">GetIterator</a></emu-xref>(<var>errors</var>, <emu-const>sync</emu-const>)).</li><li>Perform !&nbsp;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"https://tc39.es/ecma262/#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>O</var>, <emu-val>\"errors\"</emu-val>, PropertyDescriptor { <var class=\"field\">[[Configurable]]</var>: <emu-val>true</emu-val>, <var class=\"field\">[[Enumerable]]</var>: <emu-val>false</emu-val>, <var class=\"field\">[[Writable]]</var>: <emu-val>true</emu-val>, <var class=\"field\">[[Value]]</var>: <emu-xref aoid=\"CreateArrayFromList\"><a href=\"https://tc39.es/ecma262/#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(<var>errorsList</var>)&nbsp;}).</li><li>Return <var>O</var>.</li></ol></emu-alg>\n        </emu-clause>\n      </emu-clause>\n\n      <emu-clause id=\"sec-properties-of-the-aggregate-error-constructors\" number=\"2\">\n        <h1><span class=\"secnum\">20.5.7.2</span> Properties of the AggregateError Constructor</h1>\n\n        <emu-clause id=\"sec-aggregate-error-%symbol.custommatcher%\" number=\"2\">\n          <h1><span class=\"secnum\">20.5.7.2.2</span> AggregateError [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var> )</h1>\n          <emu-alg><ol><li>Perform ?&nbsp;<emu-xref aoid=\"ValidateCustomMatcherHint\" id=\"_ref_46\"><a href=\"#sec-validatecustommatcherhint\">ValidateCustomMatcherHint</a></emu-xref>(<var>hint</var>, <emu-const>boolean</emu-const>).</li><li>If <var>subject</var> does not have a <var class=\"field\">[[ErrorData]]</var> internal slot or <var>subject</var>.<var class=\"field\">[[ErrorData]]</var> is not <emu-val>\"AggregateError\"</emu-val>, return <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n        </emu-clause>\n      </emu-clause>\n\n      <emu-clause id=\"sec-properties-of-aggregate-error-instances\" number=\"4\">\n        <h1><span class=\"secnum\">20.5.7.4</span> Properties of AggregateError Instances</h1>\n        <p>AggregateError instances are <emu-xref href=\"#ordinary-object\"><a href=\"https://tc39.es/ecma262/#ordinary-object\">ordinary objects</a></emu-xref> that inherit properties from their <emu-xref href=\"#sec-properties-of-the-aggregate-error-prototype-objects\"><a href=\"https://tc39.es/ecma262/#sec-properties-of-the-aggregate-error-prototype-objects\">AggregateError prototype object</a></emu-xref> and\n          have an <var class=\"field\">[[ErrorData]]</var> internal slot whose value is <del><emu-val>undefined</emu-val></del> <ins>a String</ins>. The only specified use\n          of <var class=\"field\">[[ErrorData]]</var> is by <code>Object.prototype.toString</code> (<emu-xref href=\"#sec-object.prototype.tostring\"><a href=\"https://tc39.es/ecma262/#sec-object.prototype.tostring\">20.1.3.6</a></emu-xref>)\n          <ins>and their <emu-xref href=\"#sec-well-known-symbols\" id=\"_ref_47\"><a href=\"#sec-well-known-symbols\">%Symbol.customMatcher%</a></emu-xref> methods</ins> to identify Error, AggregateError, or <var>NativeError</var> instances.\n        </p>\n      </emu-clause>\n    </emu-clause>\n  </emu-clause>\n</emu-clause>\n\n<emu-clause class=\"fold\" id=\"sec-numbers-and-dates\" number=\"21\">\n  <h1><span class=\"secnum\">21</span> Numbers and Dates</h1>\n\n  <emu-clause id=\"sec-number-objects\" number=\"1\">\n    <h1><span class=\"secnum\">21.1</span> Number Objects</h1>\n\n    <emu-clause id=\"sec-properties-of-the-number-constructor\" number=\"2\">\n      <h1><span class=\"secnum\">21.1.2</span> Properties of the Number Constructor</h1>\n\n      <emu-clause id=\"sec-number-%symbol.custommatcher%\" number=\"16\">\n        <h1><span class=\"secnum\">21.1.2.16</span> Number [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var> )</h1>\n        <p>This function performs the following steps when called:</p>\n        <emu-alg><ol><li>Perform ?&nbsp;<emu-xref aoid=\"ValidateCustomMatcherHint\" id=\"_ref_48\"><a href=\"#sec-validatecustommatcherhint\">ValidateCustomMatcherHint</a></emu-xref>(<var>hint</var>).</li><li>If <var>subject</var> <emu-xref href=\"#sec-ecmascript-language-types-number-type\"><a href=\"https://tc39.es/ecma262/#sec-ecmascript-language-types-number-type\">is not a Number</a></emu-xref> and does not have a <var class=\"field\">[[NumberData]]</var> internal slot, return <emu-val>false</emu-val>.</li><li>If <var>hint</var> is <emu-val>\"boolean\"</emu-val>, return <emu-val>true</emu-val>.</li><li>If <var>subject</var> <emu-xref href=\"#sec-ecmascript-language-types-number-type\"><a href=\"https://tc39.es/ecma262/#sec-ecmascript-language-types-number-type\">is a Number</a></emu-xref>, return <emu-xref aoid=\"CreateArrayFromList\"><a href=\"https://tc39.es/ecma262/#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(« <var>subject</var>&nbsp;»).</li><li>Return <emu-xref aoid=\"CreateArrayFromList\"><a href=\"https://tc39.es/ecma262/#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(« <var>subject</var>.<var class=\"field\">[[NumberData]]</var>&nbsp;»).</li></ol></emu-alg>\n      </emu-clause>\n      <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n        Another approach is to ignore boxed primitives and only match primitive values.\n      </div></emu-note>\n    </emu-clause>\n  </emu-clause>\n\n  <emu-clause id=\"sec-bigint-objects\" number=\"2\">\n    <h1><span class=\"secnum\">21.2</span> BigInt Objects</h1>\n\n    <emu-clause id=\"sec-properties-of-the-bigint-constructor\" number=\"2\">\n      <h1><span class=\"secnum\">21.2.2</span> Properties of the BigInt Constructor</h1>\n\n      <emu-clause id=\"sec-bigint-%symbol.custommatcher%\" number=\"4\">\n        <h1><span class=\"secnum\">21.2.2.4</span> BigInt [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var> )</h1>\n        <p>This function performs the following steps when called:</p>\n        <emu-alg><ol><li>Perform ?&nbsp;<emu-xref aoid=\"ValidateCustomMatcherHint\" id=\"_ref_49\"><a href=\"#sec-validatecustommatcherhint\">ValidateCustomMatcherHint</a></emu-xref>(<var>hint</var>).</li><li>If <var>subject</var> <emu-xref href=\"#sec-ecmascript-language-types-bigint-type\"><a href=\"https://tc39.es/ecma262/#sec-ecmascript-language-types-bigint-type\">is not a BigInt</a></emu-xref> and does not have a <var class=\"field\">[[BigIntData]]</var> internal slot, return <emu-val>false</emu-val>.</li><li>If <var>hint</var> is <emu-val>\"boolean\"</emu-val>, return <emu-val>true</emu-val>.</li><li>If <var>subject</var> <emu-xref href=\"#sec-ecmascript-language-types-bigint-type\"><a href=\"https://tc39.es/ecma262/#sec-ecmascript-language-types-bigint-type\">is a BigInt</a></emu-xref>, return <emu-xref aoid=\"CreateArrayFromList\"><a href=\"https://tc39.es/ecma262/#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(« <var>subject</var>&nbsp;»).</li><li>Return <emu-xref aoid=\"CreateArrayFromList\"><a href=\"https://tc39.es/ecma262/#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(« <var>subject</var>.<var class=\"field\">[[BigIntData]]</var>&nbsp;»).</li></ol></emu-alg>\n      </emu-clause>\n    </emu-clause>\n    <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n      Another approach is to ignore boxed primitives and only match primitive values.\n    </div></emu-note>\n  </emu-clause>\n\n  <emu-clause id=\"sec-date-objects\" number=\"4\">\n    <h1><span class=\"secnum\">21.4</span> Date Objects</h1>\n\n    <emu-clause id=\"sec-properties-of-the-date-constructor\" number=\"3\">\n      <h1><span class=\"secnum\">21.4.3</span> Properties of the Date Constructor</h1>\n\n      <emu-clause id=\"sec-date-%symbol.custommatcher%\" number=\"5\">\n        <h1><span class=\"secnum\">21.4.3.5</span> Date [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var> )</h1>\n        <p>This function performs the following steps when called:</p>\n        <emu-alg><ol><li>Perform ?&nbsp;<emu-xref aoid=\"ValidateCustomMatcherHint\" id=\"_ref_50\"><a href=\"#sec-validatecustommatcherhint\">ValidateCustomMatcherHint</a></emu-xref>(<var>hint</var>, <emu-const>boolean</emu-const>).</li><li>If <var>subject</var> does not have a <var class=\"field\">[[DateValue]]</var> internal slot, return <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n    </emu-clause>\n  </emu-clause>\n</emu-clause>\n\n<emu-clause class=\"fold\" id=\"sec-text-processing\" number=\"22\">\n  <h1><span class=\"secnum\">22</span> Text Processing</h1>\n\n  <emu-clause id=\"sec-string-objects\" number=\"1\">\n    <h1><span class=\"secnum\">22.1</span> String Objects</h1>\n\n    <emu-clause id=\"sec-properties-of-the-string-constructor\" number=\"2\">\n      <h1><span class=\"secnum\">22.1.2</span> Properties of the String Constructor</h1>\n\n      <emu-clause id=\"sec-string-%symbol.custommatcher%\" number=\"5\">\n        <h1><span class=\"secnum\">22.1.2.5</span> String [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var> )</h1>\n        <p>This function performs the following steps when called:</p>\n        <emu-alg><ol><li>Perform ?&nbsp;<emu-xref aoid=\"ValidateCustomMatcherHint\" id=\"_ref_51\"><a href=\"#sec-validatecustommatcherhint\">ValidateCustomMatcherHint</a></emu-xref>(<var>hint</var>).</li><li>If <var>subject</var> <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type\">is not a String</a></emu-xref> and does not have a <var class=\"field\">[[StringData]]</var> internal slot, return <emu-val>false</emu-val>.</li><li>If <var>hint</var> is <emu-val>\"boolean\"</emu-val>, return <emu-val>true</emu-val>.</li><li>If <var>subject</var> <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type\">is a String</a></emu-xref>, return <emu-xref aoid=\"CreateArrayFromList\"><a href=\"https://tc39.es/ecma262/#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(« <var>subject</var>&nbsp;»).</li><li>Return <emu-xref aoid=\"CreateArrayFromList\"><a href=\"https://tc39.es/ecma262/#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(« <var>subject</var>.<var class=\"field\">[[StringData]]</var>&nbsp;»).</li></ol></emu-alg>\n      </emu-clause>\n      <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n        Another approach is to ignore boxed primitives and only match primitive values.\n      </div></emu-note>\n    </emu-clause>\n  </emu-clause>\n\n  <emu-clause id=\"sec-regexp-regular-expression-objects\" number=\"2\">\n    <h1><span class=\"secnum\">22.2</span> RegExp (Regular Expression) Objects</h1>\n\n    <emu-clause id=\"sec-properties-of-the-regexp-constructor\" number=\"5\">\n      <h1><span class=\"secnum\">22.2.5</span> Properties of the RegExp Constructor</h1>\n\n      <emu-clause id=\"sec-regexp-%symbol.custommatcher%\" number=\"3\">\n        <h1><span class=\"secnum\">22.2.5.3</span> RegExp [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var> )</h1>\n        <p>This function performs the following steps when called:</p>\n        <emu-alg><ol><li>Perform ?&nbsp;<emu-xref aoid=\"ValidateCustomMatcherHint\" id=\"_ref_52\"><a href=\"#sec-validatecustommatcherhint\">ValidateCustomMatcherHint</a></emu-xref>(<var>hint</var>, <emu-const>boolean</emu-const>).</li><li>If ?&nbsp;<emu-xref aoid=\"IsRegExp\"><a href=\"https://tc39.es/ecma262/#sec-isregexp\" class=\"e-user-code\">IsRegExp</a></emu-xref>(<var>subject</var>) is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <emu-xref aoid=\"IsRegExp\"><a href=\"https://tc39.es/ecma262/#sec-isregexp\">IsRegExp</a></emu-xref> returns <emu-val>true</emu-val> for objects that have a truthy <emu-xref href=\"#sec-well-known-symbols\" id=\"_ref_53\"><a href=\"#sec-well-known-symbols\">%Symbol.match%</a></emu-xref> property. Do we want this?\n        </div></emu-note>\n      </emu-clause>\n    </emu-clause>\n\n    <emu-clause id=\"sec-properties-of-the-regexp-prototype-object\" number=\"6\">\n      <h1><span class=\"secnum\">22.2.6</span> Properties of the RegExp Prototype Object</h1>\n\n      <emu-clause id=\"sec-regexp.prototype-%symbol.custommatcher%\" number=\"20\">\n        <h1><span class=\"secnum\">22.2.6.20</span> RegExp.prototype [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var> )</h1>\n        <p>This function performs the following steps when called:</p>\n        <emu-alg><ol><li>Perform ?&nbsp;<emu-xref aoid=\"ValidateCustomMatcherHint\" id=\"_ref_54\"><a href=\"#sec-validatecustommatcherhint\">ValidateCustomMatcherHint</a></emu-xref>(<var>hint</var>).</li><li>Let <var>regexp</var> be <emu-val>this</emu-val> value.</li><li>If <var>hint</var> is <emu-val>\"boolean\"</emu-val>, return ?&nbsp;<emu-xref aoid=\"Call\"><a href=\"https://tc39.es/ecma262/#sec-call\" class=\"e-user-code\">Call</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"https://tc39.es/ecma262/#sec-get-o-p\" class=\"e-user-code\">Get</a></emu-xref>(<var>regexp</var>, <emu-val>\"test\"</emu-val>), <var>regexp</var>, « <var>subject</var>&nbsp;»).</li><li>Let <var>isRegExp</var> be ?&nbsp;<emu-xref aoid=\"IsRegExp\"><a href=\"https://tc39.es/ecma262/#sec-isregexp\" class=\"e-user-code\">IsRegExp</a></emu-xref>(<var>regexp</var>).</li><li>If <var>isRegExp</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>flags</var> be ?&nbsp;<emu-xref aoid=\"Get\"><a href=\"https://tc39.es/ecma262/#sec-get-o-p\" class=\"e-user-code\">Get</a></emu-xref>(<var>regexp</var>, \"flags\").</li><li>Perform ?&nbsp;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"https://tc39.es/ecma262/#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<var>flags</var>).</li><li>If ?&nbsp;<emu-xref aoid=\"ToString\"><a href=\"https://tc39.es/ecma262/#sec-tostring\" class=\"e-user-code\">ToString</a></emu-xref>(<var>flags</var>) contains <emu-val>g</emu-val>, then<ol><li>Let <var>iterator</var> be ?&nbsp;<emu-xref aoid=\"Call\"><a href=\"https://tc39.es/ecma262/#sec-call\" class=\"e-user-code\">Call</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"https://tc39.es/ecma262/#sec-get-o-p\" class=\"e-user-code\">Get</a></emu-xref>(<var>regexp</var>, <emu-xref href=\"#sec-well-known-symbols\" id=\"_ref_55\"><a href=\"#sec-well-known-symbols\">%Symbol.matchAll%</a></emu-xref>), <var>regexp</var>, « <var>subject</var>&nbsp;»).</li><li>Let <var>array</var> be ?&nbsp;<emu-xref aoid=\"Call\"><a href=\"https://tc39.es/ecma262/#sec-call\" class=\"e-user-code\">Call</a></emu-xref>(<emu-xref href=\"#sec-array.from\"><a href=\"https://tc39.es/ecma262/#sec-array.from\">%Array.from%</a></emu-xref>, <emu-xref href=\"#sec-array-constructor\"><a href=\"https://tc39.es/ecma262/#sec-array-constructor\">%Array%</a></emu-xref>, « <var>iterator</var>&nbsp;»).</li><li>If !&nbsp;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"https://tc39.es/ecma262/#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>array</var>) is 0, return <emu-val>false</emu-val>.</li><li>Return <var>array</var>.</li></ol></li></ol></li><li>Let <var>result</var> be ?&nbsp;<emu-xref aoid=\"Call\"><a href=\"https://tc39.es/ecma262/#sec-call\" class=\"e-user-code\">Call</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"https://tc39.es/ecma262/#sec-get-o-p\" class=\"e-user-code\">Get</a></emu-xref>(<var>regexp</var>, <emu-xref href=\"#sec-well-known-symbols\" id=\"_ref_56\"><a href=\"#sec-well-known-symbols\">%Symbol.match%</a></emu-xref>), <var>regexp</var>, « <var>subject</var>&nbsp;»).</li><li>If <var>result</var> is <emu-val>null</emu-val>, return <emu-val>false</emu-val>.</li><li>Return <emu-xref aoid=\"CreateArrayFromList\"><a href=\"https://tc39.es/ecma262/#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(« <var>result</var>&nbsp;»).</li></ol></emu-alg>\n        <emu-note code=\"\"><span class=\"note\">Note</span><div class=\"note-contents\">\n          <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">let</span> regex = <span class=\"hljs-regexp\">/(?&lt;id&gt;\\d+)-?/g</span>\n<span class=\"hljs-string\">'012-345'</span> is <span class=\"hljs-title function_\">regex</span>([<span class=\"hljs-string\">\"012-\"</span>, <span class=\"hljs-string\">\"012\"</span>], { <span class=\"hljs-attr\">groups</span>: { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">\"345\"</span> } });\n<span class=\"hljs-comment\">// true, match with %Symbol.matchAll%</span>\n\n<span class=\"hljs-keyword\">let</span> regex2 = <span class=\"hljs-regexp\">/(?&lt;id&gt;\\d+)-?/</span>\n<span class=\"hljs-string\">'012-345'</span> is <span class=\"hljs-title function_\">regex</span>({ <span class=\"hljs-attr\">groups</span>: { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">\"012\"</span> } });\n<span class=\"hljs-comment\">// true, match with %Symbol.match%</span></code></pre>\n        </div></emu-note>\n        <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n          The <emu-val>\"flags\"</emu-val> property in this algorithm is accessed twice, this is not ideal.\n          Another access is\n          in <emu-xref href=\"#sec-regexp-prototype-%symbol.matchall%\" title=\"\"><a href=\"https://tc39.es/ecma262/#sec-regexp-prototype-%symbol.matchall%\">RegExp.prototype [ %Symbol.matchAll% ] ( <var>string</var> )</a></emu-xref>\n          or <emu-xref href=\"#sec-regexp.prototype-%symbol.match%\" title=\"\"><a href=\"https://tc39.es/ecma262/#sec-regexp.prototype-%symbol.match%\">RegExp.prototype [ %Symbol.match% ] ( <var>string</var> )</a></emu-xref>\n          depends on if the <var>regexp</var> has the <emu-val>g</emu-val> flag.\n        </div></emu-note>\n        <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n          When matching with a RegExp that <emu-val>\"flags\"</emu-val> contains <emu-val>\"g\"</emu-val>,\n          both <emu-xref href=\"#sec-%regexpstringiteratorprototype%.next\" title=\"\"><a href=\"https://tc39.es/ecma262/#sec-%regexpstringiteratorprototype%.next\">%RegExpStringIteratorPrototype%.next ( )</a></emu-xref>\n          and <emu-xref href=\"#sec-%arrayiteratorprototype%.next\" title=\"\"><a href=\"https://tc39.es/ecma262/#sec-%arrayiteratorprototype%.next\">%ArrayIteratorPrototype%.next ( )</a></emu-xref>\n          are called, this is not ideal.\n        </div></emu-note>\n      </emu-clause>\n    </emu-clause>\n  </emu-clause>\n</emu-clause>\n\n<emu-clause class=\"fold\" id=\"sec-indexed-collections\" number=\"23\">\n  <h1><span class=\"secnum\">23</span> Indexed Collections</h1>\n\n  <emu-clause id=\"sec-array-objects\" number=\"1\">\n    <h1><span class=\"secnum\">23.1</span> Array Objects</h1>\n\n    <emu-clause id=\"sec-properties-of-the-array-constructor\" number=\"2\">\n      <h1><span class=\"secnum\">23.1.2</span> Properties of the Array Constructor</h1>\n\n      <emu-clause id=\"sec-array-%symbol.custommatcher%\" number=\"6\">\n        <h1><span class=\"secnum\">23.1.2.6</span> Array [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var> )</h1>\n        <p>This function performs the following steps when called:</p>\n        <emu-alg><ol><li>Perform ?&nbsp;<emu-xref aoid=\"ValidateCustomMatcherHint\" id=\"_ref_57\"><a href=\"#sec-validatecustommatcherhint\">ValidateCustomMatcherHint</a></emu-xref>(<var>hint</var>).</li><li>If ?&nbsp;<emu-xref aoid=\"IsArray\"><a href=\"https://tc39.es/ecma262/#sec-isarray\">IsArray</a></emu-xref>(<var>subject</var>) is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>hint</var> is <emu-val>\"boolean\"</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <var>subject</var>.</li></ol></emu-alg>\n        <emu-note code=\"\"><span class=\"note\">Note</span><div class=\"note-contents\"><pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">if</span> (expr is <span class=\"hljs-title class_\">Array</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>)) {}</code></pre></div></emu-note>\n      </emu-clause>\n    </emu-clause>\n  </emu-clause>\n\n  <emu-clause id=\"sec-typedarray-objects\" number=\"2\">\n    <h1><span class=\"secnum\">23.2</span> TypedArray Objects</h1>\n\n    <emu-clause id=\"sec-properties-of-the-typedarray-constructors\" number=\"6\">\n      <h1><span class=\"secnum\">23.2.6</span> Properties of the <var>TypedArray</var> Constructors</h1>\n\n      <emu-clause id=\"sec-_typedarray_-%symbol.custommatcher%\" number=\"3\">\n        <h1><span class=\"secnum\">23.2.6.3</span> <var>TypedArray</var> [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var> )</h1>\n        <p>This function performs the following steps when called:</p>\n        <emu-alg><ol><li>Perform ?&nbsp;<emu-xref aoid=\"ValidateCustomMatcherHint\" id=\"_ref_58\"><a href=\"#sec-validatecustommatcherhint\">ValidateCustomMatcherHint</a></emu-xref>(<var>hint</var>).</li><li>If <var>subject</var> does not have a <var class=\"field\">[[TypedArrayName]]</var> internal slot or <var>subject</var>.<var class=\"field\">[[TypedArrayName]]</var> is not <var>TypedArray</var>, return <emu-val>false</emu-val>.</li><li>If <var>hint</var> is <emu-val>\"boolean\"</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <var>subject</var>.</li></ol></emu-alg>\n        <emu-note code=\"\"><span class=\"note\">Note</span><div class=\"note-contents\"><pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">const</span> isPNG = binary is <span class=\"hljs-title class_\">Uint</span>8<span class=\"hljs-built_in\">Array</span>(\n  <span class=\"hljs-number\">0x89</span>, <span class=\"hljs-number\">0x50</span>, <span class=\"hljs-number\">0x4E</span>, <span class=\"hljs-number\">0x47</span>,\n  <span class=\"hljs-number\">0x0D</span>, <span class=\"hljs-number\">0x0A</span>, <span class=\"hljs-number\">0x1A</span>, <span class=\"hljs-number\">0x0A</span>, ...\n); <span class=\"hljs-comment\">// the ... is necessary otherwise it will only match a length-8 binary.</span></code></pre></div></emu-note>\n      </emu-clause>\n    </emu-clause>\n  </emu-clause>\n</emu-clause>\n\n<emu-clause class=\"fold\" id=\"sec-keyed-collections\" number=\"24\">\n  <h1><span class=\"secnum\">24</span> Keyed Collections</h1>\n\n  <emu-clause id=\"sec-map-objects\" number=\"1\">\n    <h1><span class=\"secnum\">24.1</span> Map Objects</h1>\n\n    <emu-clause id=\"sec-properties-of-the-map-constructor\" number=\"2\">\n      <h1><span class=\"secnum\">24.1.2</span> Properties of the Map Constructor</h1>\n\n      <emu-clause id=\"sec-map-%symbol.custommatcher%\" number=\"3\">\n        <h1><span class=\"secnum\">24.1.2.3</span> Map [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var> )</h1>\n        <p>This function performs the following steps when called:</p>\n        <emu-alg><ol><li>Perform ?&nbsp;<emu-xref aoid=\"ValidateCustomMatcherHint\" id=\"_ref_59\"><a href=\"#sec-validatecustommatcherhint\">ValidateCustomMatcherHint</a></emu-xref>(<var>hint</var>).</li><li>If <var>subject</var> does not have a <var class=\"field\">[[MapData]]</var> internal slot, return <emu-val>false</emu-val>.</li><li>If <var>hint</var> is <emu-val>\"boolean\"</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"CreateArrayFromList\"><a href=\"https://tc39.es/ecma262/#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(« <var>subject</var>&nbsp;»).</li></ol></emu-alg>\n        <emu-note code=\"\"><span class=\"note\">Note</span><div class=\"note-contents\"><pre><code class=\"javascript hljs\">expr is <span class=\"hljs-title class_\">Map</span>([[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]]);\n<span class=\"hljs-comment\">// matches new Map([[1, 2], [3, 4]])</span>\n<span class=\"hljs-comment\">// but not new Map([[3, 4], [1, 2]])</span></code></pre></div></emu-note>\n        <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n          A Map can be iterated, but is it meaningful to do so in pattern matching?\n        </div></emu-note>\n      </emu-clause>\n    </emu-clause>\n  </emu-clause>\n\n  <emu-clause id=\"sec-set-objects\" number=\"2\">\n    <h1><span class=\"secnum\">24.2</span> Set Objects</h1>\n\n    <emu-clause id=\"sec-properties-of-the-set-constructor\" number=\"2\">\n      <h1><span class=\"secnum\">24.2.2</span> Properties of the Set Constructor</h1>\n\n      <emu-clause id=\"sec-set-%symbol.custommatcher%\" number=\"3\">\n        <h1><span class=\"secnum\">24.2.2.3</span> Set [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var> )</h1>\n        <p>This function performs the following steps when called:</p>\n        <emu-alg><ol><li>Perform ?&nbsp;<emu-xref aoid=\"ValidateCustomMatcherHint\" id=\"_ref_60\"><a href=\"#sec-validatecustommatcherhint\">ValidateCustomMatcherHint</a></emu-xref>(<var>hint</var>).</li><li>If <var>subject</var> does not have a <var class=\"field\">[[SetData]]</var> internal slot, return <emu-val>false</emu-val>.</li><li>If <var>hint</var> is <emu-val>\"boolean\"</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"CreateArrayFromList\"><a href=\"https://tc39.es/ecma262/#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(« <var>subject</var>&nbsp;»).</li></ol></emu-alg>\n        <emu-note code=\"\"><span class=\"note\">Note</span><div class=\"note-contents\"><pre><code class=\"javascript hljs\">expr is <span class=\"hljs-title class_\">Set</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]);\n<span class=\"hljs-comment\">// matches new Set([1, 2, 3])</span>\n<span class=\"hljs-comment\">// but not new Set([3, 2, 1])</span></code></pre></div></emu-note>\n        <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n          A Set can be iterated, but is it meaningful to do so in pattern matching?\n        </div></emu-note>\n      </emu-clause>\n    </emu-clause>\n  </emu-clause>\n\n  <emu-clause id=\"sec-weakmap-objects\" number=\"3\">\n    <h1><span class=\"secnum\">24.3</span> WeakMap Objects</h1>\n\n    <emu-clause id=\"sec-properties-of-the-weakmap-constructor\" number=\"2\">\n      <h1><span class=\"secnum\">24.3.2</span> Properties of the WeakMap Constructor</h1>\n\n      <emu-clause id=\"sec-weakmap-%symbol.custommatcher%\" number=\"2\">\n        <h1><span class=\"secnum\">24.3.2.2</span> WeakMap [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var> )</h1>\n        <p>This function performs the following steps when called:</p>\n        <emu-alg><ol><li>Perform ?&nbsp;<emu-xref aoid=\"ValidateCustomMatcherHint\" id=\"_ref_61\"><a href=\"#sec-validatecustommatcherhint\">ValidateCustomMatcherHint</a></emu-xref>(<var>hint</var>, <emu-const>boolean</emu-const>).</li><li>If <var>subject</var> does not have a <var class=\"field\">[[WeakMapData]]</var> internal slot, return <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n    </emu-clause>\n  </emu-clause>\n\n  <emu-clause id=\"sec-weakset-objects\" number=\"4\">\n    <h1><span class=\"secnum\">24.4</span> WeakSet Objects</h1>\n\n    <emu-clause id=\"sec-properties-of-the-weakset-constructor\" number=\"2\">\n      <h1><span class=\"secnum\">24.4.2</span> Properties of the WeakSet Constructor</h1>\n\n      <emu-clause id=\"sec-weakset-%symbol.custommatcher%\" number=\"2\">\n        <h1><span class=\"secnum\">24.4.2.2</span> WeakSet [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var> )</h1>\n        <p>This function performs the following steps when called:</p>\n        <emu-alg><ol><li>Perform ?&nbsp;<emu-xref aoid=\"ValidateCustomMatcherHint\" id=\"_ref_62\"><a href=\"#sec-validatecustommatcherhint\">ValidateCustomMatcherHint</a></emu-xref>(<var>hint</var>, <emu-const>boolean</emu-const>).</li><li>If <var>subject</var> does not have a <var class=\"field\">[[WeakSetData]]</var> internal slot, return <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n    </emu-clause>\n  </emu-clause>\n</emu-clause>\n\n<emu-clause class=\"fold\" id=\"sec-structured-data\" number=\"25\">\n  <h1><span class=\"secnum\">25</span> Structured Data</h1>\n\n  <emu-clause id=\"sec-arraybuffer-objects\" number=\"1\">\n    <h1><span class=\"secnum\">25.1</span> ArrayBuffer Objects</h1>\n\n    <emu-clause id=\"sec-properties-of-the-arraybuffer-constructor\" number=\"5\">\n      <h1><span class=\"secnum\">25.1.5</span> Properties of the ArrayBuffer Constructor</h1>\n\n      <emu-clause id=\"sec-arraybuffer-%symbol.custommatcher%\" number=\"4\">\n        <h1><span class=\"secnum\">25.1.5.4</span> ArrayBuffer [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var> )</h1>\n        <p>This function performs the following steps when called:</p>\n        <emu-alg><ol><li>Perform ?&nbsp;<emu-xref aoid=\"ValidateCustomMatcherHint\" id=\"_ref_63\"><a href=\"#sec-validatecustommatcherhint\">ValidateCustomMatcherHint</a></emu-xref>(<var>hint</var>, <emu-const>boolean</emu-const>).</li><li>If <var>subject</var> has a <var class=\"field\">[[ArrayBufferData]]</var> internal slot, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n    </emu-clause>\n  </emu-clause>\n\n  <emu-clause id=\"sec-sharedarraybuffer-objects\" number=\"2\">\n    <h1><span class=\"secnum\">25.2</span> SharedArrayBuffer Objects</h1>\n\n    <emu-clause id=\"sec-properties-of-the-sharedarraybuffer-constructor\" number=\"4\">\n      <h1><span class=\"secnum\">25.2.4</span> Properties of the SharedArrayBuffer Constructor</h1>\n\n      <emu-clause id=\"sec-sharedarraybuffer-%symbol.custommatcher%\" number=\"3\">\n        <h1><span class=\"secnum\">25.2.4.3</span> SharedArrayBuffer [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var> )</h1>\n        <p>This function performs the following steps when called:</p>\n        <emu-alg><ol><li>Perform ?&nbsp;<emu-xref aoid=\"ValidateCustomMatcherHint\" id=\"_ref_64\"><a href=\"#sec-validatecustommatcherhint\">ValidateCustomMatcherHint</a></emu-xref>(<var>hint</var>, <emu-const>boolean</emu-const>).</li><li>If <var>subject</var> does not have a <var class=\"field\">[[ArrayBufferData]]</var> internal slot, return <emu-val>false</emu-val>.</li><li>Return <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"https://tc39.es/ecma262/#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>subject</var>).</li></ol></emu-alg>\n      </emu-clause>\n    </emu-clause>\n  </emu-clause>\n\n  <emu-clause id=\"sec-dataview-objects\" number=\"3\">\n    <h1><span class=\"secnum\">25.3</span> DataView Objects</h1>\n\n    <emu-clause id=\"sec-properties-of-the-dataview-constructor\" number=\"3\">\n      <h1><span class=\"secnum\">25.3.3</span> Properties of the DataView Constructor</h1>\n\n      <emu-clause id=\"sec-dataview-%symbol.custommatcher%\" number=\"2\">\n        <h1><span class=\"secnum\">25.3.3.2</span> DataView [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var> )</h1>\n        <p>This function performs the following steps when called:</p>\n        <emu-alg><ol><li>Perform ?&nbsp;<emu-xref aoid=\"ValidateCustomMatcherHint\" id=\"_ref_65\"><a href=\"#sec-validatecustommatcherhint\">ValidateCustomMatcherHint</a></emu-xref>(<var>hint</var>, <emu-const>boolean</emu-const>).</li><li>If <var>subject</var> does not have a <var class=\"field\">[[DataView]]</var> internal slot, return <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n    </emu-clause>\n  </emu-clause>\n</emu-clause>\n\n<emu-clause class=\"fold\" id=\"sec-managing-memory\" number=\"26\">\n  <h1><span class=\"secnum\">26</span> Managing Memory</h1>\n\n  <emu-clause id=\"sec-weak-ref-objects\" number=\"1\">\n    <h1><span class=\"secnum\">26.1</span> WeakRef Objects</h1>\n\n    <emu-clause id=\"sec-properties-of-the-weak-ref-constructor\" number=\"2\">\n      <h1><span class=\"secnum\">26.1.2</span> Properties of the WeakRef Constructor</h1>\n\n      <emu-clause id=\"sec-weakref-%symbol.custommatcher%\" number=\"2\">\n        <h1><span class=\"secnum\">26.1.2.2</span> WeakRef [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var> )</h1>\n        <p>This function performs the following steps when called:</p>\n        <emu-alg><ol><li>Perform ?&nbsp;<emu-xref aoid=\"ValidateCustomMatcherHint\" id=\"_ref_66\"><a href=\"#sec-validatecustommatcherhint\">ValidateCustomMatcherHint</a></emu-xref>(<var>hint</var>).</li><li>If <var>subject</var> does not have a <var class=\"field\">[[WeakRefTarget]]</var> internal slot, return <emu-val>false</emu-val>.</li><li>If <var>hint</var> is <emu-val>\"boolean\"</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"CreateArrayFromList\"><a href=\"https://tc39.es/ecma262/#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(« <emu-xref aoid=\"WeakRefDeref\"><a href=\"https://tc39.es/ecma262/#sec-weakrefderef\">WeakRefDeref</a></emu-xref>(<var>subject</var>)&nbsp;»).</li></ol></emu-alg>\n        <emu-note code=\"\"><span class=\"note\">Note</span><div class=\"note-contents\"><pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">if</span> (expr is <span class=\"hljs-title class_\">WeakRef</span>(<span class=\"hljs-keyword\">let</span> object)) {}</code></pre></div></emu-note>\n      </emu-clause>\n    </emu-clause>\n  </emu-clause>\n\n  <emu-clause id=\"sec-finalization-registry-objects\" number=\"2\">\n    <h1><span class=\"secnum\">26.2</span> FinalizationRegistry Objects</h1>\n\n    <emu-clause id=\"sec-properties-of-the-finalization-registry-constructor\" number=\"2\">\n      <h1><span class=\"secnum\">26.2.2</span> Properties of the FinalizationRegistry Constructor</h1>\n\n      <emu-clause id=\"sec-finalizationregistry-%symbol.custommatcher%\" number=\"2\">\n        <h1><span class=\"secnum\">26.2.2.2</span> FinalizationRegistry [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var> )</h1>\n        <p>This function performs the following steps when called:</p>\n        <emu-alg><ol><li>Perform ?&nbsp;<emu-xref aoid=\"ValidateCustomMatcherHint\" id=\"_ref_67\"><a href=\"#sec-validatecustommatcherhint\">ValidateCustomMatcherHint</a></emu-xref>(<var>hint</var>, <emu-const>boolean</emu-const>).</li><li>If <var>subject</var> does not have a <var class=\"field\">[[CleanupCallback]]</var> internal slot, return <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n    </emu-clause>\n  </emu-clause>\n</emu-clause>\n\n<emu-clause class=\"fold\" id=\"sec-control-abstraction-objects\" number=\"27\">\n  <h1><span class=\"secnum\">27</span> Control Abstraction Objects</h1>\n\n  <emu-clause id=\"sec-promise-objects\" number=\"2\">\n    <h1><span class=\"secnum\">27.2</span> Promise Objects</h1>\n\n    <emu-clause id=\"sec-properties-of-the-promise-constructor\" number=\"4\">\n      <h1><span class=\"secnum\">27.2.4</span> Properties of the Promise Constructor</h1>\n\n      <emu-clause id=\"sec-promise-%symbol.custommatcher%\" number=\"9\">\n        <h1><span class=\"secnum\">27.2.4.9</span> Promise [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var> )</h1>\n        <p>This function performs the following steps when called:</p>\n        <emu-alg><ol><li>Perform ?&nbsp;<emu-xref aoid=\"ValidateCustomMatcherHint\" id=\"_ref_68\"><a href=\"#sec-validatecustommatcherhint\">ValidateCustomMatcherHint</a></emu-xref>(<var>hint</var>, <emu-const>boolean</emu-const>).</li><li>Return <emu-xref aoid=\"IsPromise\"><a href=\"https://tc39.es/ecma262/#sec-ispromise\">IsPromise</a></emu-xref>(<var>subject</var>).</li></ol></emu-alg>\n      </emu-clause>\n    </emu-clause>\n  </emu-clause>\n</emu-clause>\n\n<emu-clause class=\"fold\" id=\"sec-reflection\" number=\"28\">\n  <h1><span class=\"secnum\">28</span> Reflection</h1>\n\n  <emu-clause id=\"sec-proxy-objects\" number=\"2\">\n    <h1><span class=\"secnum\">28.2</span> Proxy Objects</h1>\n\n    <emu-clause id=\"sec-proxy-constructor\" number=\"1\">\n      <h1><span class=\"secnum\">28.2.1</span> The Proxy Constructor</h1>\n\n      <emu-clause id=\"sec-proxy-%symbol.custommatcher%\" number=\"2\">\n        <h1><span class=\"secnum\">28.2.1.2</span> Proxy [ %Symbol.customMatcher% ] ( )</h1>\n        <p>This function performs the following steps when called:</p>\n        <emu-alg><ol><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></emu-alg>\n      </emu-clause>\n      <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n        <p>All built-in <emu-xref href=\"#constructor\"><a href=\"https://tc39.es/ecma262/#constructor\">constructors</a></emu-xref> have a <emu-xref href=\"#sec-well-known-symbols\" id=\"_ref_69\"><a href=\"#sec-well-known-symbols\">%Symbol.customMatcher%</a></emu-xref> method. This one is for design consistency.</p>\n        <p>This is not a consensus in the champion group.</p>\n      </div></emu-note>\n    </emu-clause>\n  </emu-clause>\n</emu-clause>\n\n<emu-clause id=\"sec-pattern-matching\" number=\"30\">\n  <h1><span class=\"secnum\">30</span> <ins>Pattern Matching</ins></h1>\n\n  <emu-clause id=\"sec-match-patterns\">\n    <h1><span class=\"secnum\">30.1</span> Match Patterns</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"MatchPattern\" params=\"Yield, Await\" id=\"prod-MatchPattern\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-MatchPattern\">MatchPattern</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"iwqh9pom\" id=\"prod-KUcUUgsn\">\n        <emu-t>(</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_221\"><a href=\"#prod-MatchPattern\">MatchPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"sgh9k7d8\" id=\"prod-NnfvhTBM\">\n        <emu-nt id=\"_ref_222\"><a href=\"#prod-PrimitivePattern\">PrimitivePattern</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"vrxdrcn-\" id=\"prod--5M7srSm\">\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_223\"><a href=\"#prod-VariableDeclarationPattern\">VariableDeclarationPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"y46cfqhm\" id=\"prod-dtu4srcz\">\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_224\"><a href=\"#prod-MemberExpressionPattern\">MemberExpressionPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"hgfidvsy\" id=\"prod-ZdrTiyJE\">\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_225\"><a href=\"#prod-ObjectPattern\">ObjectPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"x-p6r7m6\" id=\"prod-l2SLZUMT\">\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_226\"><a href=\"#prod-ArrayPattern\">ArrayPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"6m-vwede\" id=\"prod-en0pW04U\">\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_227\"><a href=\"#prod-UnaryAlgebraicPattern\">UnaryAlgebraicPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"od8b4me6\" id=\"prod-LetWbF4Q\">\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_228\"><a href=\"#prod-RelationalPattern\">RelationalPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"4brcj28h\" id=\"prod-GC1hibKU\">\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_229\"><a href=\"#prod-IfPattern\">IfPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"_7vcs4wd\" id=\"prod-LAj8DpMp\">\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_230\"><a href=\"#prod-CombinedMatchPattern\">CombinedMatchPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n    <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n      <emu-grammar><emu-production name=\"MatchPattern\">\n    <emu-nt><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"llgnlz3m\">\n        <emu-t>void</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>\n        This production will be added by <a target=\"_blank\" href=\"https://github.com/tc39/proposal-discard-binding\" data-print-href=\"\">discard bindings proposal</a>.\n      </p>\n      <p>\n        Some of the committe members prefer <code>_</code> as the discard binding identifier.\n      </p>\n      <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">if</span> (expr is [<span class=\"hljs-keyword\">let</span> x, <span class=\"hljs-keyword\">void</span>, <span class=\"hljs-keyword\">void</span>]) {}\n<span class=\"hljs-comment\">// can be written as:</span>\n<span class=\"hljs-keyword\">if</span> (expr is [<span class=\"hljs-keyword\">let</span> x,,,]) {}\n<span class=\"hljs-comment\">// or</span>\n<span class=\"hljs-keyword\">if</span> (expr is [<span class=\"hljs-keyword\">let</span> x, <span class=\"hljs-keyword\">let</span> _y, <span class=\"hljs-keyword\">let</span> _z,]) {}</code></pre>\n    </div></emu-note>\n    <!-- #region PrimitivePattern -->\n    <emu-grammar type=\"definition\"><emu-production name=\"PrimitivePattern\" id=\"prod-PrimitivePattern\">\n    <emu-nt><a href=\"#prod-PrimitivePattern\">PrimitivePattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"kul-a19e\" id=\"prod-lZG2aTTb\">\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-Literal\">Literal</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"e_otk8es\" id=\"prod-rqU7_eLx\">\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-NoSubstitutionTemplate\">NoSubstitutionTemplate</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n    <emu-note code=\"\"><span class=\"note\">Note 1</span><div class=\"note-contents\">\n      <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">if</span> (value is <span class=\"hljs-literal\">null</span>) {};\n<span class=\"hljs-keyword\">if</span> (value is <span class=\"hljs-literal\">true</span>) {};\n<span class=\"hljs-keyword\">if</span> (value is <span class=\"hljs-number\">1_000_000</span>) {};\n<span class=\"hljs-keyword\">if</span> (value is <span class=\"hljs-string\">\"string\"</span>) {};\n<span class=\"hljs-keyword\">if</span> (value is <span class=\"hljs-string\">`line 1\nline 2`</span>) {};</code></pre>\n    </div></emu-note>\n    <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n      <p>\n        Preserve the interpolation syntax for\n        (1) <a target=\"_blank\" href=\"https://github.com/tc39/proposal-pattern-matching/pull/293#discussion_r1350757767\" data-print-href=\"\">concerns about arbitrary expression interpolation</a> and\n        (2) <a target=\"_blank\" href=\"https://www.typescriptlang.org/docs/handbook/2/template-literal-types.html#inference-with-template-literals\" data-print-href=\"\">intuitive string matching</a>.\n      </p>\n      <p>For example, match <code>\"com.example:method()\"</code> by</p>\n      <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">if</span> (qualifiedName is <span class=\"hljs-string\">`<span class=\"hljs-subst\">${isPackageName and <span class=\"hljs-keyword\">let</span> pkg}</span>:<span class=\"hljs-subst\">${isIdentifier and <span class=\"hljs-keyword\">let</span> method}</span>()`</span>) {}</code></pre>\n    </div></emu-note>\n    <!-- endregion -->\n    <!-- #region VariableDeclarationPattern -->\n    <emu-grammar type=\"definition\"><emu-production name=\"VariableDeclarationPattern\" params=\"Yield, Await\" id=\"prod-VariableDeclarationPattern\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-VariableDeclarationPattern\">VariableDeclarationPattern</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"97sngitm\" id=\"prod-u_-PVDpb\">\n        <emu-nt id=\"_ref_231\"><a href=\"#prod-VarOrLetOrConst\">VarOrLetOrConst</a></emu-nt>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"https://tc39.es/ecma262/#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"VarOrLetOrConst\" id=\"prod-VarOrLetOrConst\">\n    <emu-nt><a href=\"#prod-VarOrLetOrConst\">VarOrLetOrConst</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"5hawgwsl\">\n        <emu-t>var</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"0oi0tt1n\">\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-LetOrConst\">LetOrConst</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n    <emu-note code=\"\"><span class=\"note\">Note 2</span><div class=\"note-contents\"><pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">if</span> (expr is { <span class=\"hljs-attr\">kind</span>: <span class=\"hljs-keyword\">let</span> kind }) {}\n<span class=\"hljs-keyword\">return</span> match (expr) {\n  [<span class=\"hljs-keyword\">let</span> left, <span class=\"hljs-keyword\">let</span> op, <span class=\"hljs-keyword\">let</span> right]: evaluate(op, left, right);\n};</code></pre></div></emu-note>\n    <!-- endregion -->\n    <!-- #region MemberExpressionPattern -->\n    <emu-grammar type=\"definition\"><emu-production name=\"MemberExpressionPattern\" params=\"Yield, Await\" id=\"prod-MemberExpressionPattern\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-MemberExpressionPattern\">MemberExpressionPattern</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uxdrsrnt\" id=\"prod-G4gXeSPg\">\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_232\"><a href=\"#prod-PatternMatchingMemberExpression\">PatternMatchingMemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"k5qxkpt8\" id=\"prod-QmuUz1ZR\">\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_233\"><a href=\"#prod-PatternMatchingMemberExpression\">PatternMatchingMemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_234\"><a href=\"#prod-MatchList\">MatchList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"PatternMatchingMemberExpression\" params=\"Yield, Await\" id=\"prod-PatternMatchingMemberExpression\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-PatternMatchingMemberExpression\">PatternMatchingMemberExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"jo4mwtvh\">\n        <emu-t>this</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"yb7id2be\">\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-MetaProperty\">MetaProperty</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"dlsgch-w\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"https://tc39.es/ecma262/#prod-IdentifierReference\">IdentifierReference</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"9pdsslwb\">\n        <emu-t>super</emu-t>\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"kupcnmlh\">\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_235\"><a href=\"#prod-PatternMatchingMemberExpression\">PatternMatchingMemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"ks20qjkp\">\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_236\"><a href=\"#prod-PatternMatchingMemberExpression\">PatternMatchingMemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"qvqrwddh\">\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_237\"><a href=\"#prod-PatternMatchingMemberExpression\">PatternMatchingMemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>[</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"https://tc39.es/ecma262/#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n    <emu-note code=\"\"><span class=\"note\">Note 3</span><div class=\"note-contents\"><pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">if</span> (expr is { <span class=\"hljs-attr\">x</span>: <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-literal\">undefined</span> }) {}\n<span class=\"hljs-keyword\">if</span> (expr is { <span class=\"hljs-attr\">angle</span>: <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-property\">PI</span>, <span class=\"hljs-keyword\">let</span> length }) {}\n<span class=\"hljs-keyword\">if</span> (expr is { <span class=\"hljs-attr\">ok</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-variable language_\">this</span>.#lastValue }) {}\n<span class=\"hljs-keyword\">if</span> (expr === <span class=\"hljs-keyword\">import</span>.<span class=\"hljs-property\">meta</span>?.<span class=\"hljs-property\">hot</span>?.<span class=\"hljs-property\">data</span> &amp;&amp; expr is { <span class=\"hljs-keyword\">let</span> previousData }) {}\n<span class=\"hljs-keyword\">if</span> (expr is <span class=\"hljs-title class_\">WeakRef</span>(<span class=\"hljs-keyword\">let</span> object)) {}</code></pre></div></emu-note>\n    <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n      This is the minimal requirement.\n      All other productions can be removed.\n      <emu-grammar><emu-production name=\"PatternMatchingMemberExpression\">\n    <emu-nt><a href=\"#prod-PatternMatchingMemberExpression\">PatternMatchingMemberExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"i2hxnrih\">\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-IdentifierReference\">IdentifierReference</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"uuzihwmo\">\n        <emu-nt id=\"_ref_238\"><a href=\"#prod-PatternMatchingMemberExpression\">PatternMatchingMemberExpression</a></emu-nt>\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">if</span> (value is { <span class=\"hljs-attr\">version</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">data</span>: <span class=\"hljs-variable language_\">this</span>.#data }) {};\n<span class=\"hljs-comment\">// can be written as:</span>\n<span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-variable language_\">this</span>.#data;\n<span class=\"hljs-keyword\">if</span> (expr is { <span class=\"hljs-attr\">version</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">data</span>: data }) {}</code></pre>\n      <p>\n        It is similar to the <a href=\"https://tc39.es/proposal-decorators/#sec-new-syntax\" target=\"_blank\" data-print-href=\"\">DecoratorMemberExpression</a>.\n      </p>\n      <p>Should we allow <code>MemberExpressionPattern[expr]</code> to match with computed property names?</p>\n    </div></emu-note>\n    <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n      It is possible to add the following productions:\n      <emu-grammar><emu-production name=\"PatternMatchingMemberExpression\">\n    <emu-nt><a href=\"#prod-PatternMatchingMemberExpression\">PatternMatchingMemberExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e9h5acuc\">\n        <emu-nt id=\"_ref_239\"><a href=\"#prod-PatternMatchingMemberExpression\">PatternMatchingMemberExpression</a></emu-nt>\n        <emu-t>?.</emu-t>\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"tm21cow6\">\n        <emu-nt id=\"_ref_240\"><a href=\"#prod-PatternMatchingMemberExpression\">PatternMatchingMemberExpression</a></emu-nt>\n        <emu-t>?.</emu-t>\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>It does not clear if this should match <emu-val>undefined</emu-val> or fail the match if the <emu-nt id=\"_ref_241\"><a href=\"#prod-PatternMatchingMemberExpression\">PatternMatchingMemberExpression</a></emu-nt> is <emu-val>undefined</emu-val>.</p>\n    </div></emu-note>\n    <!-- endregion -->\n    <!-- #region ObjectPattern and ArrayPattern -->\n    <emu-grammar type=\"definition\"><emu-production name=\"ObjectPattern\" params=\"Yield, Await\" id=\"prod-ObjectPattern\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ObjectPattern\">ObjectPattern</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-nriCsL_r\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"rqbh5emu\" id=\"prod-EWVgVnxN\">\n        <emu-t>{</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_242\"><a href=\"#prod-MatchRestProperty\">MatchRestProperty</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"criubbam\" id=\"prod-UnQjidH-\">\n        <emu-t>{</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_243\"><a href=\"#prod-MatchPropertyList\">MatchPropertyList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t optional=\"\">,<emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"9huzo627\" id=\"prod-xpU3Tqeh\">\n        <emu-t>{</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_244\"><a href=\"#prod-MatchPropertyList\">MatchPropertyList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_245\"><a href=\"#prod-MatchRestProperty\">MatchRestProperty</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ArrayPattern\" params=\"Yield, Await\" id=\"prod-ArrayPattern\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ArrayPattern\">ArrayPattern</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"hiem5cht\" id=\"prod-mfwF-eVh\">\n        <emu-t>[</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" optional=\"\" id=\"_ref_246\"><a href=\"#prod-MatchList\">MatchList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"MatchList\" params=\"Yield, Await\" id=\"prod-MatchList\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-MatchList\">MatchList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ctjw6vnw\" id=\"prod-xnwBdNr0\">\n        <emu-nt optional=\"\"><a href=\"https://tc39.es/ecma262/#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await\" optional=\"\" id=\"_ref_247\"><a href=\"#prod-MatchRestElement\">MatchRestElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"q59bwnvc\" id=\"prod-5aJhmP6v\">\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_248\"><a href=\"#prod-MatchElementList\">MatchElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"f1xo1a3j\" id=\"prod-Qinb_JH_\">\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_249\"><a href=\"#prod-MatchElementList\">MatchElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt optional=\"\"><a href=\"https://tc39.es/ecma262/#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await\" optional=\"\" id=\"_ref_250\"><a href=\"#prod-MatchRestElement\">MatchRestElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"MatchRestProperty\" params=\"Yield, Await\" id=\"prod-MatchRestProperty\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-MatchRestProperty\">MatchRestProperty</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"rfqjkmvm\" id=\"prod-NpqrpNeK\">\n        <emu-t>...</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_251\"><a href=\"#prod-MatchPattern\">MatchPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"MatchPropertyList\" params=\"Yield, Await\" id=\"prod-MatchPropertyList\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-MatchPropertyList\">MatchPropertyList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3j9bvwgo\" id=\"prod-kRoJE3bP\">\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_252\"><a href=\"#prod-MatchProperty\">MatchProperty</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"jbgwhfq0\" id=\"prod-_cQam8pS\">\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_253\"><a href=\"#prod-MatchPropertyList\">MatchPropertyList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_254\"><a href=\"#prod-MatchProperty\">MatchProperty</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"MatchElementList\" params=\"Yield, Await\" id=\"prod-MatchElementList\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-MatchElementList\">MatchElementList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"mftbrreq\" id=\"prod-gb-onOzg\">\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_255\"><a href=\"#prod-MatchElisionElement\">MatchElisionElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"ubrozurn\" id=\"prod--q9atpfX\">\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_256\"><a href=\"#prod-MatchElementList\">MatchElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_257\"><a href=\"#prod-MatchElisionElement\">MatchElisionElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"MatchElisionElement\" params=\"Yield, Await\" id=\"prod-MatchElisionElement\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-MatchElisionElement\">MatchElisionElement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"vcapw5oy\" id=\"prod-SwXPxa2u\">\n        <emu-nt optional=\"\"><a href=\"https://tc39.es/ecma262/#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_258\"><a href=\"#prod-MatchElement\">MatchElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"MatchProperty\" params=\"Yield, Await\" id=\"prod-MatchProperty\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-MatchProperty\">MatchProperty</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4z7kdpah\" id=\"prod-VxHnNNub\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"https://tc39.es/ecma262/#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t optional=\"\">?<emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"jy5wa0t2\" id=\"prod-GMqEmzsz\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"https://tc39.es/ecma262/#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t optional=\"\">?<emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_259\"><a href=\"#prod-MatchPattern\">MatchPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"17gzu0ni\" id=\"prod-GO0bgB3_\">\n        <emu-nt id=\"_ref_260\"><a href=\"#prod-VarOrLetOrConst\">VarOrLetOrConst</a></emu-nt>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"https://tc39.es/ecma262/#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t optional=\"\">?<emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"w_78smtm\" id=\"prod-xrsY-24G\">\n        <emu-nt id=\"_ref_261\"><a href=\"#prod-VarOrLetOrConst\">VarOrLetOrConst</a></emu-nt>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"https://tc39.es/ecma262/#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t optional=\"\">?<emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_262\"><a href=\"#prod-MatchPattern\">MatchPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"MatchElement\" params=\"Yield, Await\" id=\"prod-MatchElement\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-MatchElement\">MatchElement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"umiqybes\" id=\"prod-lKjcdi_o\">\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_263\"><a href=\"#prod-MatchPattern\">MatchPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t optional=\"\">?<emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"MatchRestElement\" params=\"Yield, Await\" id=\"prod-MatchRestElement\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-MatchRestElement\">MatchRestElement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uugqq7gf\" id=\"prod-fOlW2Nsd\">\n        <emu-t>...</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"rfqjkmvm\" id=\"prod-w_IWHbxt\">\n        <emu-t>...</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_264\"><a href=\"#prod-MatchPattern\">MatchPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n    <emu-note code=\"\"><span class=\"note\">Note 4</span><div class=\"note-contents\">\n      <p>Object matchers</p>\n      <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">if</span> (expr is { <span class=\"hljs-attr\">version</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">type</span>: <span class=\"hljs-title class_\">String</span>, value?: <span class=\"hljs-keyword\">void</span> }) {}\n<span class=\"hljs-comment\">// test if subject[Symbol.iterator] is present.</span>\n<span class=\"hljs-keyword\">if</span> (expr is { [<span class=\"hljs-title class_\">Symbol</span>.<span class=\"hljs-property\">iterator</span>]?: <span class=\"hljs-title class_\">Function</span> }) {}\n<span class=\"hljs-keyword\">if</span> (expr is { <span class=\"hljs-number\">0</span>: <span class=\"hljs-title class_\">String</span> }) {}</code></pre>\n      <p>Array matchers</p>\n      <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">if</span> (expr is [<span class=\"hljs-string\">\"request\"</span>, <span class=\"hljs-keyword\">let</span> method, ...<span class=\"hljs-keyword\">let</span> params]) {}\n<span class=\"hljs-comment\">// match an iterable that first 2 values match a and b and no more values.</span>\n<span class=\"hljs-keyword\">if</span> (expr is [a, b]) {}\n<span class=\"hljs-comment\">// match an iterable that first 2 values match a and b.</span>\n<span class=\"hljs-keyword\">if</span> (expr is [a, b, ...]) {}</code></pre>\n    </div></emu-note>\n    <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n      It is possible to add <emu-nt><a href=\"https://tc39.es/ecma262/#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt> to <emu-nt id=\"_ref_265\"><a href=\"#prod-MatchProperty\">MatchProperty</a></emu-nt>.\n      <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyClass</span> {\n  #field;\n  <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-params\">data</span>) {\n    <span class=\"hljs-keyword\">if</span> (data is { <span class=\"hljs-attr\">value</span>: { #<span class=\"hljs-attr\">field</span>: <span class=\"hljs-keyword\">let</span> field } }) {}\n    <span class=\"hljs-comment\">// can be written as</span>\n    <span class=\"hljs-keyword\">if</span> (data is { <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">value</span>: <span class=\"hljs-title class_\">MyClass</span> }) {\n      <span class=\"hljs-keyword\">let</span> field = value.#field;\n    }\n  }\n}</code></pre>\n    </div></emu-note>\n    <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n      It is possible to add <emu-nt><a href=\"https://tc39.es/ecma262/#prod-Initializer\">Initializer</a></emu-nt> to <emu-nt id=\"_ref_266\"><a href=\"#prod-MatchProperty\">MatchProperty</a></emu-nt> and <emu-nt id=\"_ref_267\"><a href=\"#prod-MatchElement\">MatchElement</a></emu-nt>.\n      <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">if</span> (expr is { <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"report\"</span>, <span class=\"hljs-keyword\">let</span> key }) { <span class=\"hljs-title function_\">reportKey</span>(key); }\n<span class=\"hljs-keyword\">else</span> { <span class=\"hljs-title function_\">reportKey</span>(<span class=\"hljs-title class_\">Symbol</span>.<span class=\"hljs-title function_\">for</span>(<span class=\"hljs-string\">\"missing\"</span>)) };\n<span class=\"hljs-comment\">// can be written as</span>\n<span class=\"hljs-keyword\">if</span> (expr is { <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"report\"</span>, <span class=\"hljs-keyword\">let</span> key = <span class=\"hljs-title class_\">Symbol</span>.<span class=\"hljs-title function_\">for</span>(<span class=\"hljs-string\">\"missing\"</span>) }) { <span class=\"hljs-title function_\">reportKey</span>(key); }</code></pre>\n    </div></emu-note>\n    <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n      <p>The <code>?</code> in the production <emu-nt id=\"_ref_268\"><a href=\"#prod-MatchProperty\">MatchProperty</a></emu-nt> or <emu-nt id=\"_ref_269\"><a href=\"#prod-MatchElement\">MatchElement</a></emu-nt> can be removed.</p>\n      <p>The feature is not a consensus in the champion group yet.</p>\n      <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">if</span> (expr is { <span class=\"hljs-keyword\">let</span> x, <span class=\"hljs-keyword\">let</span> y? }) {}\n<span class=\"hljs-comment\">// can be written as</span>\n<span class=\"hljs-keyword\">if</span> (expr is { <span class=\"hljs-keyword\">let</span> x }) {}\n<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (expr is { <span class=\"hljs-keyword\">let</span> x, <span class=\"hljs-keyword\">let</span> y }) {}\n\n<span class=\"hljs-keyword\">if</span> (expr is [x, y?]) {}\n<span class=\"hljs-comment\">// can be written as</span>\n<span class=\"hljs-keyword\">if</span> (expr is [x]) {}\n<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (expr is [x, y]) {}</code></pre>\n    </div></emu-note>\n    <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n      <emu-grammar><emu-production name=\"MatchProperty\">\n    <emu-nt><a href=\"#prod-MatchProperty\">MatchProperty</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f0mgqa9f\">\n        <emu-nt id=\"_ref_270\"><a href=\"#prod-VarOrLetOrConst\">VarOrLetOrConst</a></emu-nt>\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t optional=\"\">?<emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt id=\"_ref_271\"><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"gzjg2iry\">\n        <emu-nt id=\"_ref_272\"><a href=\"#prod-VarOrLetOrConst\">VarOrLetOrConst</a></emu-nt>\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t optional=\"\">?<emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>These productions can be removed.</p>\n      <p>This feature is not a consensus in the champion group yet.</p>\n      <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">if</span> (expr is { <span class=\"hljs-attr\">version</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">y</span>: <span class=\"hljs-title class_\">String</span> }) {}\n<span class=\"hljs-comment\">// can be written as</span>\n<span class=\"hljs-keyword\">if</span> (expr is { <span class=\"hljs-attr\">version</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-title class_\">String</span> and <span class=\"hljs-keyword\">let</span> y }) {}</code></pre>\n    </div></emu-note>\n    <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n      <emu-grammar><emu-production name=\"MatchProperty\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MatchProperty\">MatchProperty</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"s8fjnez1\">\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t optional=\"\">?<emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>Computed properties can be removed from this production, but it will be harder to match computed properties.</p>\n      <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">if</span> (expr is { <span class=\"hljs-keyword\">let</span> length, [<span class=\"hljs-title class_\">Symbol</span>.<span class=\"hljs-property\">iterator</span>]: <span class=\"hljs-title class_\">Function</span> }) {}\n<span class=\"hljs-comment\">// can be written as</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">isIterable</span>(<span class=\"hljs-params\">value</span>) { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">typeof</span> value[<span class=\"hljs-title class_\">Symbol</span>.<span class=\"hljs-property\">iterator</span>] === <span class=\"hljs-string\">\"function\"</span>; }\n<span class=\"hljs-keyword\">if</span> (expr is { <span class=\"hljs-keyword\">let</span> length } and isIterable) {}</code></pre>\n    </div></emu-note>\n    <!-- endregion -->\n    <!-- #region UnaryAlgebraicPattern -->\n    <emu-grammar type=\"definition\"><emu-production name=\"UnaryAlgebraicPattern\" params=\"Yield, Await\" id=\"prod-UnaryAlgebraicPattern\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-UnaryAlgebraicPattern\">UnaryAlgebraicPattern</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"tmtbe2kk\" id=\"prod-blOttJBG\">\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_273\"><a href=\"#prod-PatternMatchingUnaryAlgebraicExpression\">PatternMatchingUnaryAlgebraicExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"PatternMatchingUnaryAlgebraicExpression\" params=\"Yield, Await\" id=\"prod-PatternMatchingUnaryAlgebraicExpression\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-PatternMatchingUnaryAlgebraicExpression\">PatternMatchingUnaryAlgebraicExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qi2orlde\">\n        <emu-t>+</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_274\"><a href=\"#prod-PatternMatchingMemberExpression\">PatternMatchingMemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"vdzozs8g\">\n        <emu-t>-</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_275\"><a href=\"#prod-PatternMatchingMemberExpression\">PatternMatchingMemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"1epwai_f\">\n        <emu-t>+</emu-t>\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-NumericLiteral\">NumericLiteral</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"u8w2p_fz\">\n        <emu-t>-</emu-t>\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-NumericLiteral\">NumericLiteral</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n    <emu-note code=\"\"><span class=\"note\">Note 5</span><div class=\"note-contents\">\n      <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">if</span> (expr is -<span class=\"hljs-number\">0</span>) {} <span class=\"hljs-comment\">// not matching `+0` and vice versa</span>\n<span class=\"hljs-keyword\">if</span> (expr is { <span class=\"hljs-attr\">x</span>: -<span class=\"hljs-title class_\">Infinity</span>, <span class=\"hljs-attr\">y</span>: -<span class=\"hljs-title class_\">Infinity</span> }) {}\n<span class=\"hljs-keyword\">if</span> (expr is { <span class=\"hljs-attr\">angle</span>: -<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-property\">PI</span>, <span class=\"hljs-keyword\">let</span> length }) {}</code></pre>\n    </div></emu-note>\n    <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n      <p>Only literal <code>+0</code> or <code>-0</code> will be matched with <emu-xref aoid=\"SameValue\"><a href=\"https://tc39.es/ecma262/#sec-samevalue\">SameValue</a></emu-xref>, <code>+</code><var>x</var> and <code>-</code><var>x</var> where <var>x</var> is 0 will be matched with <emu-xref aoid=\"SameValueZero\"><a href=\"https://tc39.es/ecma262/#sec-samevaluezero\">SameValueZero</a></emu-xref>.</p>\n    </div></emu-note>\n    <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n      This feature can be removed, but it will be harder to handle with <code>+0</code> and <code>-0</code>.\n      The code example above can be written as:\n      <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">const</span> negPi = -<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-property\">PI</span>;\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">is</span>(expr, -<span class=\"hljs-number\">0</span>)) {} <span class=\"hljs-comment\">// not matching `+0` and vice versa</span>\n<span class=\"hljs-keyword\">if</span> (expr is { <span class=\"hljs-attr\">x</span>: <span class=\"hljs-title class_\">Number</span>.<span class=\"hljs-property\">NEGATIVE_INFINITY</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-title class_\">Number</span>.<span class=\"hljs-property\">NEGATIVE_INFINITY</span> }) {}\n<span class=\"hljs-keyword\">if</span> (expr is { <span class=\"hljs-attr\">angle</span>: negPi, <span class=\"hljs-keyword\">let</span> length }) {}</code></pre>\n    </div></emu-note>\n    <!-- endregion -->\n    <!-- #region RelationalPattern -->\n    <emu-grammar type=\"definition\"><emu-production name=\"RelationalPattern\" params=\"Yield, Await\" id=\"prod-RelationalPattern\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-RelationalPattern\">RelationalPattern</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ueb64z-p\" id=\"prod-Ee4jkDah\">\n        <emu-t>&lt;</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_276\"><a href=\"#prod-PatternMatchingRelationalExpression\">PatternMatchingRelationalExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"_g7ioekk\" id=\"prod-Lt1ufiOJ\">\n        <emu-t>&gt;</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_277\"><a href=\"#prod-PatternMatchingRelationalExpression\">PatternMatchingRelationalExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"rl3zkfvt\" id=\"prod-MbwVHJm5\">\n        <emu-t>&lt;=</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_278\"><a href=\"#prod-PatternMatchingRelationalExpression\">PatternMatchingRelationalExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"h7t5jy7j\" id=\"prod-LIsJEGG_\">\n        <emu-t>&gt;=</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_279\"><a href=\"#prod-PatternMatchingRelationalExpression\">PatternMatchingRelationalExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"2x6y5fx8\" id=\"prod-sQz7HIlw\">\n        <emu-t>instanceof</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_280\"><a href=\"#prod-PatternMatchingMemberExpression\">PatternMatchingMemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"seylmk0k\" id=\"prod-wD-UQ48A\">\n        <emu-t>in</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_281\"><a href=\"#prod-PatternMatchingMemberExpression\">PatternMatchingMemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"gquawcje\" id=\"prod-LdC39dQb\">\n        <emu-t>==</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_282\"><a href=\"#prod-PatternMatchingRelationalExpression\">PatternMatchingRelationalExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"blybrpqt\" id=\"prod-WzM35PsW\">\n        <emu-t>!=</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_283\"><a href=\"#prod-PatternMatchingRelationalExpression\">PatternMatchingRelationalExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"ui_gas75\" id=\"prod-ofL39yLB\">\n        <emu-t>===</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_284\"><a href=\"#prod-PatternMatchingRelationalExpression\">PatternMatchingRelationalExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"vehxltqc\" id=\"prod-atFGrhH0\">\n        <emu-t>!==</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_285\"><a href=\"#prod-PatternMatchingRelationalExpression\">PatternMatchingRelationalExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"PatternMatchingRelationalExpression\" params=\"Yield, Await\" id=\"prod-PatternMatchingRelationalExpression\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-PatternMatchingRelationalExpression\">PatternMatchingRelationalExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"kul-a19e\">\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-Literal\">Literal</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"e_otk8es\">\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-NoSubstitutionTemplate\">NoSubstitutionTemplate</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"uxdrsrnt\">\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_286\"><a href=\"#prod-PatternMatchingMemberExpression\">PatternMatchingMemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"tmtbe2kk\">\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_287\"><a href=\"#prod-PatternMatchingUnaryAlgebraicExpression\">PatternMatchingUnaryAlgebraicExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n    <emu-note code=\"\"><span class=\"note\">Note 6</span><div class=\"note-contents\">\n      <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">if</span> (expr is &gt; -<span class=\"hljs-number\">10</span> and &lt; <span class=\"hljs-number\">10</span>) {}\n<span class=\"hljs-keyword\">if</span> (expr is { <span class=\"hljs-attr\">value</span>: <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">Error</span> and { <span class=\"hljs-keyword\">let</span> message } }) {}\n<span class=\"hljs-keyword\">if</span> (expr is [=== <span class=\"hljs-title class_\">Array</span>, === <span class=\"hljs-title class_\">Object</span>]) {}</code></pre>\n    </div></emu-note>\n    <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n      <p>It is possible to add the following production.</p>\n      <emu-grammar><emu-production name=\"RelationalPattern\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-RelationalPattern\">RelationalPattern</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"lmjceozr\">\n        <emu-t>typeof</emu-t>\n        <emu-t>==</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_288\"><a href=\"#prod-PatternMatchingStringLikeExpression\">PatternMatchingStringLikeExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"pbt7d9qs\">\n        <emu-t>typeof</emu-t>\n        <emu-t>!=</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_289\"><a href=\"#prod-PatternMatchingStringLikeExpression\">PatternMatchingStringLikeExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"ubo1dvvr\">\n        <emu-t>typeof</emu-t>\n        <emu-t>===</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_290\"><a href=\"#prod-PatternMatchingStringLikeExpression\">PatternMatchingStringLikeExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"djqh0ggm\">\n        <emu-t>typeof</emu-t>\n        <emu-t>!==</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_291\"><a href=\"#prod-PatternMatchingStringLikeExpression\">PatternMatchingStringLikeExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-grammar type=\"definition\"><emu-production name=\"PatternMatchingStringLikeExpression\" params=\"Yield, Await\" id=\"prod-PatternMatchingStringLikeExpression\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-PatternMatchingStringLikeExpression\">PatternMatchingStringLikeExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xhtltz00\">\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-StringLiteral\">StringLiteral</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"e_otk8es\">\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-NoSubstitutionTemplate\">NoSubstitutionTemplate</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"uxdrsrnt\">\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_292\"><a href=\"#prod-PatternMatchingMemberExpression\">PatternMatchingMemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>\n        The recommended way to match a String is to use the <emu-xref href=\"#sec-string-%symbol.custommatcher%\" title=\"\" id=\"_ref_16\"><a href=\"#sec-string-%symbol.custommatcher%\">String [ %Symbol.customMatcher% ] ( <var>subject</var>, <var>hint</var> )</a></emu-xref>,\n        but it can be replaced by a custom implementation. This production adds the ability to do the unforgeable <code>typeof</code> test.\n      </p>\n      <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">if</span> (expr is { <span class=\"hljs-attr\">version</span>: <span class=\"hljs-number\">2</span> or <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-title class_\">String</span> }) {}\n<span class=\"hljs-comment\">// can be written as this if built-ins might be replaced:</span>\n<span class=\"hljs-keyword\">const</span> isString = {\n  [<span class=\"hljs-title class_\">Symbol</span>.<span class=\"hljs-property\">customMatcher</span>](val) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">typeof</span> val === <span class=\"hljs-string\">\"string\"</span>;\n  }\n};\n<span class=\"hljs-keyword\">if</span> (expr is { <span class=\"hljs-attr\">version</span>: <span class=\"hljs-number\">2</span> or <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">value</span>: isString }) {}</code></pre>\n    </div></emu-note>\n    <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n      <p>It is possible to add the following production.</p>\n      <emu-grammar><emu-production name=\"RelationalPattern\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-RelationalPattern\">RelationalPattern</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"rbeiqqqq\">\n        <emu-t>has</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_293\"><a href=\"#prod-PatternMatchingStringLikeExpression\">PatternMatchingStringLikeExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"fn0heehf\">\n        <emu-t>has</emu-t>\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">hasPrivateField</span>(<span class=\"hljs-params\">val</span>) { <span class=\"hljs-keyword\">return</span> #field <span class=\"hljs-keyword\">in</span> val; }\n<span class=\"hljs-keyword\">if</span> (expr is { <span class=\"hljs-attr\">version</span>: <span class=\"hljs-number\">2</span> or <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">data</span>: hasPrivateField }) {}\n<span class=\"hljs-comment\">// can be written as:</span>\n<span class=\"hljs-keyword\">if</span> (expr is { <span class=\"hljs-attr\">version</span>: <span class=\"hljs-number\">2</span> or <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">data</span>: has #field }) {}</code></pre>\n      <p>This feature can be a proposal on its own, to be the <code>in</code> operator reversed.</p>\n      <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">if</span> (expr has #field) { }\n<span class=\"hljs-keyword\">if</span> (expr hasOwn <span class=\"hljs-string\">\"prototype\"</span>) { }</code></pre>\n    </div></emu-note>\n    <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n      <p>The <code>instanceof</code> production can be removed, but it will be harder to match by <code>instanceof</code> semantics.</p>\n      <p>This feature is not a consensus in the champion group.</p>\n      <p>\n        The class matchers match by private-field semantics,\n        the <code>instanceof</code> match is an escape hatch to match with the <code>instanceof</code> semantics.\n      </p>\n      <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">if</span> (expr is { <span class=\"hljs-attr\">elements</span>: [<span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">Map</span>, <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">Map</span>] }) {}\n<span class=\"hljs-comment\">// can be written as:</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">isInstanceOfMap</span>(<span class=\"hljs-params\">val</span>) { <span class=\"hljs-keyword\">return</span> val <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">Map</span>; }\n<span class=\"hljs-keyword\">if</span> (expr is { <span class=\"hljs-attr\">elements</span>: [isInstanceOfMap, isInstanceOfMap] }) {}</code></pre>\n    </div></emu-note>\n    <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n      <p>\n        The <code>==</code>, <code>!=</code>, <code>===</code>, and <code>!==</code> production can be removed,\n        but it will be harder to match by <code>===</code> semantics when the <emu-nt id=\"_ref_294\"><a href=\"#prod-PatternMatchingRelationalExpression\">PatternMatchingRelationalExpression</a></emu-nt> is a custom matcher.\n      </p>\n      <p>This feature is not a consensus in the champion group.</p>\n      <pre class=\"inline\"><code class=\"javascript hljs\"><span class=\"hljs-keyword\">if</span> (expr is { <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"create\"</span>, <span class=\"hljs-attr\">initializers</span>: [createX] }) {}</code></pre>\n      <p>\n        The code above will try to call <var>createX</var> as a custom matcher.\n        This feature is an opt-out of the custom matcher, to always do the <code>===</code> check.\n      </p>\n      <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">if</span> (expr is { <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"create\"</span>, <span class=\"hljs-attr\">initializers</span>: [=== createX] }) {}\n<span class=\"hljs-comment\">// can be written as:</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">isCreateX</span>(<span class=\"hljs-params\">val</span>) { <span class=\"hljs-keyword\">return</span> val === createX; }\n<span class=\"hljs-keyword\">if</span> (expr is { <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"create\"</span>, <span class=\"hljs-attr\">initializers</span>: [isCreateX] }) {}</code></pre>\n    </div></emu-note>\n    <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n      <p>The <code>in</code> production can be removed, but it will be harder to match by <code>in</code> semantics.</p>\n      <p>This feature is not a consensus in the champion group.</p>\n      <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">if</span> (expr is { <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">key</span>: <span class=\"hljs-keyword\">in</span> object } and inCache) {}\n<span class=\"hljs-comment\">// can be written as:</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">isInObj</span>(<span class=\"hljs-params\">key</span>) { <span class=\"hljs-keyword\">return</span> key <span class=\"hljs-keyword\">in</span> object; }\n<span class=\"hljs-keyword\">if</span> (expr is { <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">key</span>: isInObj } and inCache) {}</code></pre>\n    </div></emu-note>\n    <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n      <p>The <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code> and <code>&lt;=</code> production can be removed, but it will be harder to match numbers.</p>\n      <p>This feature is not a consensus in the champion group.</p>\n      <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">if</span> (expr is [&gt; -<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-property\">PI</span> and &lt; <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-property\">PI</span>, &gt; <span class=\"hljs-number\">0</span>]) {}\n<span class=\"hljs-comment\">// can be written as:</span>\n<span class=\"hljs-keyword\">if</span> (expr[<span class=\"hljs-number\">0</span>] &gt; -<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-property\">PI</span> &amp;&amp; expr[<span class=\"hljs-number\">0</span>] &lt; <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-property\">PI</span> &amp;&amp; expr[<span class=\"hljs-number\">1</span>] &gt; <span class=\"hljs-number\">0</span>) {}</code></pre>\n    </div></emu-note>\n    <!-- endregion -->\n    <!-- #region IfPattern -->\n    <emu-grammar type=\"definition\"><emu-production name=\"IfPattern\" params=\"Yield, Await\" id=\"prod-IfPattern\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-IfPattern\">IfPattern</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"sgbsfmyz\" id=\"prod-F0nSIfMB\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"https://tc39.es/ecma262/#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n    <emu-note code=\"\"><span class=\"note\">Note 7</span><div class=\"note-contents\">\n      <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">return</span> match (expr) {\n  { <span class=\"hljs-keyword\">let</span> x, <span class=\"hljs-keyword\">let</span> y, <span class=\"hljs-keyword\">let</span> z } and <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_\">norm</span>(x, y, z) &lt; maxLength): [x, y];\n  { <span class=\"hljs-keyword\">let</span> x, <span class=\"hljs-keyword\">let</span> y } and <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_\">norm</span>(x, y) &lt; maxLength): [x, y];\n  <span class=\"hljs-title class_\">Number</span> and &lt; maxLength <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">length</span>: [length];\n}</code></pre>\n    </div></emu-note>\n    <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n      This feature can be removed, but this is designed as an escape hatch.\n      No alternative is available for this feature.\n    </div></emu-note>\n    <!-- endregion -->\n    <!-- #region CombinedMatchPattern -->\n    <emu-grammar type=\"definition\"><emu-production name=\"CombinedMatchPattern\" params=\"Yield, Await\" id=\"prod-CombinedMatchPattern\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-CombinedMatchPattern\">CombinedMatchPattern</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ao53rdyl\" id=\"prod-a_2cW9fV\">\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_295\"><a href=\"#prod-MatchPattern\">MatchPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>and</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_296\"><a href=\"#prod-MatchPattern\">MatchPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"nhqoi23u\" id=\"prod-BMX8uZDG\">\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_297\"><a href=\"#prod-MatchPattern\">MatchPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>or</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_298\"><a href=\"#prod-MatchPattern\">MatchPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"qryeevni\" id=\"prod-4IhLPseH\">\n        <emu-t>not</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_299\"><a href=\"#prod-MatchPattern\">MatchPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n    <emu-note code=\"\"><span class=\"note\">Note 8</span><div class=\"note-contents\">\n      <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">if</span> (expr is { <span class=\"hljs-attr\">version</span>: <span class=\"hljs-number\">2</span> or <span class=\"hljs-number\">3</span> }) {}\n<span class=\"hljs-keyword\">if</span> (expr is { <span class=\"hljs-attr\">version</span>: <span class=\"hljs-title class_\">Number</span> and not <span class=\"hljs-number\">1</span> }) {}</code></pre>\n    </div></emu-note>\n    <!-- endregion -->\n\n    <emu-clause id=\"sec-match-patterns-static-semantics-early-errors\">\n      <h1><span class=\"secnum\">30.1.1</span> Static Semantics: Early Errors</h1>\n      <!-- #region PrimitivePattern -->\n      <emu-grammar><emu-production name=\"PrimitivePattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PrimitivePattern\">PrimitivePattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e_otk8es\"><emu-nt><a href=\"https://tc39.es/ecma262/#prod-NoSubstitutionTemplate\">NoSubstitutionTemplate</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>It is a Syntax Error if <emu-nt><a href=\"https://tc39.es/ecma262/#prod-NoSubstitutionTemplate\">NoSubstitutionTemplate</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"https://tc39.es/ecma262/#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"https://tc39.es/ecma262/#prod-NotEscapeSequence\">NotEscapeSequence</a></emu-nt>.</li>\n      </ul>\n      <!-- #endregion -->\n      <!-- #region VariableDeclarationPattern -->\n      <emu-grammar><emu-production name=\"VariableDeclarationPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclarationPattern\">VariableDeclarationPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"p6fje17y\">\n        <emu-nt id=\"_ref_300\"><a href=\"#prod-VarOrLetOrConst\">VarOrLetOrConst</a></emu-nt>\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>It is a Syntax Error if <emu-nt id=\"_ref_301\"><a href=\"#prod-VarOrLetOrConst\">VarOrLetOrConst</a></emu-nt> is <emu-nt><a href=\"https://tc39.es/ecma262/#prod-LetOrConst\">LetOrConst</a></emu-nt> and the <emu-xref aoid=\"StringValue\"><a href=\"https://tc39.es/ecma262/#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"https://tc39.es/ecma262/#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is <emu-val>\"let\"</emu-val>.</li>\n      </ul>\n      <!-- #endregion -->\n      <!-- #region ObjectPattern and ArrayPattern -->\n      <emu-grammar><emu-production name=\"MatchProperty\">\n    <emu-nt><a href=\"#prod-MatchProperty\">MatchProperty</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"s8fjnez1\">\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t optional=\"\">?<emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"9mxwi2yo\">\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t optional=\"\">?<emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt id=\"_ref_302\"><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>It is a Syntax Error if <emu-nt><a href=\"https://tc39.es/ecma262/#prod-PropertyName\">PropertyName</a></emu-nt> is a <emu-nt><a href=\"https://tc39.es/ecma262/#prod-LiteralPropertyName\">LiteralPropertyName</a></emu-nt> and <emu-xref aoid=\"PropName\"><a href=\"https://tc39.es/ecma262/#sec-static-semantics-propname\">PropName</a></emu-xref> of <emu-nt><a href=\"https://tc39.es/ecma262/#prod-PropertyName\">PropertyName</a></emu-nt> is <emu-val>\"__proto__\"</emu-val>.</li>\n      </ul>\n      <emu-note code=\"\"><span class=\"note\">Note 1</span><div class=\"note-contents\"><pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">if</span> (expr is { <span class=\"hljs-attr\">__proto__</span>: <span class=\"hljs-literal\">null</span>, property?: <span class=\"hljs-keyword\">void</span> }) {} <span class=\"hljs-comment\">// Syntax Error</span>\n<span class=\"hljs-keyword\">if</span> (expr is { <span class=\"hljs-string\">\"__proto__\"</span>: <span class=\"hljs-literal\">null</span>, property?: <span class=\"hljs-keyword\">void</span> }) {} <span class=\"hljs-comment\">// Syntax Error</span>\n<span class=\"hljs-keyword\">if</span> (expr is { [<span class=\"hljs-string\">\"__proto__\"</span>]: <span class=\"hljs-literal\">null</span>, property?: <span class=\"hljs-keyword\">void</span> }) {} <span class=\"hljs-comment\">// no Syntax Error</span></code></pre></div></emu-note>\n      <emu-grammar><emu-production name=\"MatchRestElement\">\n    <emu-nt><a href=\"#prod-MatchRestElement\">MatchRestElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"_dw8adpi\">\n        <emu-t>...</emu-t>\n        <emu-nt id=\"_ref_303\"><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"MatchRestElement\">\n    <emu-nt><a href=\"#prod-MatchRestElement\">MatchRestElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"_dw8adpi\">\n        <emu-t>...</emu-t>\n        <emu-nt id=\"_ref_304\"><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>It is a Syntax Error if <emu-nt id=\"_ref_305\"><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt> is <emu-nt id=\"_ref_306\"><a href=\"#prod-MemberExpressionPattern\">MemberExpressionPattern</a></emu-nt>.</li>\n        <li>This is not a consensus in the champion group.</li>\n      </ul>\n      <emu-note code=\"\"><span class=\"note\">Note 2</span><div class=\"note-contents\"><pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">if</span> (expr is { <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">0</span>, ...rest }) {} <span class=\"hljs-comment\">// Syntax Error</span>\n<span class=\"hljs-keyword\">if</span> (expr is { <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">0</span>, ...<span class=\"hljs-keyword\">let</span> rest }) {} <span class=\"hljs-comment\">// no Syntax Error, bind rest properties to _rest_</span>\n<span class=\"hljs-keyword\">if</span> (expr is { <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">0</span>, ...(isEmpty) }) {} <span class=\"hljs-comment\">// no Syntax Error, call isEmpty with the rest object</span></code></pre></div></emu-note>\n      <emu-grammar><emu-production name=\"MatchProperty\">\n    <emu-nt><a href=\"#prod-MatchProperty\">MatchProperty</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4z7kdpah\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"https://tc39.es/ecma262/#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t optional=\"\">?<emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"jy5wa0t2\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"https://tc39.es/ecma262/#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t optional=\"\">?<emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_307\"><a href=\"#prod-MatchPattern\">MatchPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>It is a Syntax Error if <emu-nt><a href=\"https://tc39.es/ecma262/#prod-PropertyName\">PropertyName</a></emu-nt> can be <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"https://tc39.es/ecma262/#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"https://tc39.es/ecma262/#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li>\n        <li>This is not a consensus in the champion group.</li>\n      </ul>\n      <emu-note code=\"\"><span class=\"note\">Note 3</span><div class=\"note-contents\"><pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">if</span> (expr is { x, y, z }) {} <span class=\"hljs-comment\">// Syntax Error</span>\n<span class=\"hljs-keyword\">if</span> (expr is { <span class=\"hljs-attr\">x</span>: <span class=\"hljs-keyword\">void</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-keyword\">void</span>, <span class=\"hljs-attr\">z</span>: <span class=\"hljs-keyword\">void</span> }) {} <span class=\"hljs-comment\">// no Syntax Error</span>\n<span class=\"hljs-keyword\">if</span> (expr is { <span class=\"hljs-keyword\">let</span> x, <span class=\"hljs-keyword\">let</span> y, <span class=\"hljs-keyword\">let</span> z }) {} <span class=\"hljs-comment\">// no Syntax Error</span>\n\n<span class=\"hljs-keyword\">if</span> (expr is { <span class=\"hljs-keyword\">if</span> }) {} <span class=\"hljs-comment\">// no Syntax Error</span></code></pre></div></emu-note>\n      <emu-grammar><emu-production name=\"MatchList\">\n    <emu-nt><a href=\"#prod-MatchList\">MatchList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uah6njv4\">\n        <emu-nt id=\"_ref_308\"><a href=\"#prod-MatchElementList\">MatchElementList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt optional=\"\"><a href=\"https://tc39.es/ecma262/#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt optional=\"\" id=\"_ref_309\"><a href=\"#prod-MatchRestElement\">MatchRestElement</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>It is a Syntax Error if <emu-xref aoid=\"IsOptionalPattern\" id=\"_ref_70\"><a href=\"#sec-is-optional-pattern\">IsOptionalPattern</a></emu-xref> of <emu-nt id=\"_ref_310\"><a href=\"#prod-MatchElementList\">MatchElementList</a></emu-nt> is <emu-val>true</emu-val> and <emu-nt><a href=\"https://tc39.es/ecma262/#prod-Elision\">Elision</a></emu-nt> is present.</li>\n      </ul>\n      <emu-grammar><emu-production name=\"MatchElementList\">\n    <emu-nt><a href=\"#prod-MatchElementList\">MatchElementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"eheyxnr4\">\n        <emu-nt id=\"_ref_311\"><a href=\"#prod-MatchElementList\">MatchElementList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt id=\"_ref_312\"><a href=\"#prod-MatchElisionElement\">MatchElisionElement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>It is a Syntax Error if <emu-xref aoid=\"IsOptionalPattern\" id=\"_ref_71\"><a href=\"#sec-is-optional-pattern\">IsOptionalPattern</a></emu-xref> of <emu-nt id=\"_ref_313\"><a href=\"#prod-MatchElementList\">MatchElementList</a></emu-nt> is <emu-val>true</emu-val> and <emu-xref aoid=\"IsOptionalPattern\" id=\"_ref_72\"><a href=\"#sec-is-optional-pattern\">IsOptionalPattern</a></emu-xref> of <emu-nt id=\"_ref_314\"><a href=\"#prod-MatchElisionElement\">MatchElisionElement</a></emu-nt> is <emu-val>false</emu-val>.</li>\n      </ul>\n      <emu-note code=\"\"><span class=\"note\">Note 4</span><div class=\"note-contents\"><pre><code class=\"javascript hljs\">value is [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>?, <span class=\"hljs-number\">3</span>]; <span class=\"hljs-comment\">// Syntax Error</span>\nvalue is [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>?, <span class=\"hljs-number\">3</span>?]; <span class=\"hljs-comment\">// no Syntax Error</span>\n\nvalue is [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>?, , ]; <span class=\"hljs-comment\">// Syntax Error (Elision)</span>\nvalue is [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>?, <span class=\"hljs-keyword\">void</span>?, ]; <span class=\"hljs-comment\">// no Syntax Error</span>\n\nvalue is [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>?, ...]; <span class=\"hljs-comment\">// no Syntax Error</span></code></pre></div></emu-note>\n      <!-- endregion -->\n      <!-- #region CombinedMatchPattern -->\n      <emu-grammar><emu-production name=\"CombinedMatchPattern\">\n    <emu-nt><a href=\"#prod-CombinedMatchPattern\">CombinedMatchPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4lmqei0y\">\n        <emu-nt id=\"_ref_315\"><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt>\n        <emu-t>and</emu-t>\n        <emu-nt id=\"_ref_316\"><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>It is a Syntax Error if either of <emu-nt id=\"_ref_317\"><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt>s is <emu-nt id=\"_ref_318\"><a href=\"#prod-CombinedMatchPattern\">CombinedMatchPattern</a></emu-nt> and does not match this production.</li>\n      </ul>\n      <emu-grammar><emu-production name=\"CombinedMatchPattern\">\n    <emu-nt><a href=\"#prod-CombinedMatchPattern\">CombinedMatchPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9wuvrand\">\n        <emu-nt id=\"_ref_319\"><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt>\n        <emu-t>or</emu-t>\n        <emu-nt id=\"_ref_320\"><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>It is a Syntax Error if either of <emu-nt id=\"_ref_321\"><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt>s is <emu-nt id=\"_ref_322\"><a href=\"#prod-CombinedMatchPattern\">CombinedMatchPattern</a></emu-nt> and does not match this production.</li>\n      </ul>\n      <emu-grammar><emu-production name=\"CombinedMatchPattern\">\n    <emu-nt><a href=\"#prod-CombinedMatchPattern\">CombinedMatchPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"_ieabtbd\">\n        <emu-t>not</emu-t>\n        <emu-nt id=\"_ref_323\"><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>It is a Syntax Error if the <emu-nt id=\"_ref_324\"><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt> is <emu-nt id=\"_ref_325\"><a href=\"#prod-CombinedMatchPattern\">CombinedMatchPattern</a></emu-nt>.</li>\n      </ul>\n      <emu-note code=\"\"><span class=\"note\">Note 5</span><div class=\"note-contents\"><pre><code class=\"javascript hljs\">value is a and b and c; <span class=\"hljs-comment\">// no Syntax Error</span>\nvalue is a or b or c; <span class=\"hljs-comment\">// no Syntax Error</span>\n\nvalue is a and b or c; <span class=\"hljs-comment\">// Syntax Error</span>\nvalue is (a and b) or c; <span class=\"hljs-comment\">// no Syntax Error</span>\nvalue is a and (b or c); <span class=\"hljs-comment\">// no Syntax Error</span>\n\nvalue is not not a; <span class=\"hljs-comment\">// Syntax Error</span>\nvalue is not (not a); <span class=\"hljs-comment\">// no Syntax Error</span>\n\nvalue is not a or b; <span class=\"hljs-comment\">// Syntax Error</span>\nvalue is not (a or b); <span class=\"hljs-comment\">// no Syntax Error</span></code></pre></div></emu-note>\n      <!-- endregion -->\n    </emu-clause>\n\n    <emu-clause id=\"sec-is-optional-pattern\" type=\"sdo\" aoid=\"IsOptionalPattern\">\n      <h1><span class=\"secnum\">30.1.2</span> Static Semantics: IsOptionalPattern</h1>\n      <p>The <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"https://tc39.es/ecma262/#sec-algorithm-conventions-syntax-directed-operations\">syntax-directed operation</a></emu-xref> IsOptionalPattern takes no arguments and returns a Boolean. It is defined piecewise over the following productions:</p>\n      <emu-grammar><emu-production name=\"MatchElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MatchElementList\">MatchElementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dlv9v-6j\" id=\"prod-yCjtcQ2s\"><emu-nt id=\"_ref_326\"><a href=\"#prod-MatchElisionElement\">MatchElisionElement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"IsOptionalPattern\" id=\"_ref_73\"><a href=\"#sec-is-optional-pattern\">IsOptionalPattern</a></emu-xref> of <emu-nt id=\"_ref_327\"><a href=\"#prod-MatchElisionElement\">MatchElisionElement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MatchElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MatchElementList\">MatchElementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"eheyxnr4\" id=\"prod-uWaCy0rP\">\n        <emu-nt id=\"_ref_328\"><a href=\"#prod-MatchElementList\">MatchElementList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt id=\"_ref_329\"><a href=\"#prod-MatchElisionElement\">MatchElisionElement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-xref aoid=\"IsOptionalPattern\" id=\"_ref_74\"><a href=\"#sec-is-optional-pattern\">IsOptionalPattern</a></emu-xref> of <emu-nt id=\"_ref_330\"><a href=\"#prod-MatchElementList\">MatchElementList</a></emu-nt> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"IsOptionalPattern\" id=\"_ref_75\"><a href=\"#sec-is-optional-pattern\">IsOptionalPattern</a></emu-xref> of <emu-nt id=\"_ref_331\"><a href=\"#prod-MatchElisionElement\">MatchElisionElement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MatchElisionElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MatchElisionElement\">MatchElisionElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c0r7zx1e\" id=\"prod-NV8BPc1p\">\n        <emu-nt optional=\"\"><a href=\"https://tc39.es/ecma262/#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt id=\"_ref_332\"><a href=\"#prod-MatchElement\">MatchElement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"https://tc39.es/ecma262/#prod-Elision\">Elision</a></emu-nt> is present, return <emu-val>false</emu-val>.</li><li>Return <emu-xref aoid=\"IsOptionalPattern\" id=\"_ref_76\"><a href=\"#sec-is-optional-pattern\">IsOptionalPattern</a></emu-xref> of <emu-nt id=\"_ref_333\"><a href=\"#prod-MatchElement\">MatchElement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MatchElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MatchElement\">MatchElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qvuneavu\" id=\"prod-Eavr6r2E\">\n        <emu-nt id=\"_ref_334\"><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt>\n        <emu-t optional=\"\">?<emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <code>?</code> is present, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-match-pattern-matches\" type=\"sdo\" aoid=\"MatchPatternMatches\">\n      <h1><span class=\"secnum\">30.1.3</span> Runtime Semantics: MatchPatternMatches</h1>\n      <p>The <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"https://tc39.es/ecma262/#sec-algorithm-conventions-syntax-directed-operations\">syntax-directed operation</a></emu-xref> MatchPatternMatches takes arguments <var>subject</var> (an <emu-xref href=\"#sec-ecmascript-language-types\" id=\"_ref_77\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and <var>cacheGroup</var> (a <emu-xref href=\"#sec-map-constructor\"><a href=\"https://tc39.es/ecma262/#sec-map-constructor\">%Map%</a></emu-xref>) and returns either a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">normal completion containing</a></emu-xref> a Boolean or an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>. It is defined piecewise over the following productions:</p>\n      <emu-grammar><emu-production name=\"MatchPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"59hl_iep\" id=\"prod-U80C8biY\">\n        <emu-t>(</emu-t>\n        <emu-nt id=\"_ref_335\"><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt>\n        <emu-t>)</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return ?&nbsp;<emu-xref aoid=\"MatchPatternMatches\" id=\"_ref_78\"><a href=\"#sec-match-pattern-matches\" class=\"e-user-code\">MatchPatternMatches</a></emu-xref> of <emu-nt id=\"_ref_336\"><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt> with arguments <var>subject</var> and <var>cacheGroup</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MatchPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"sgh9k7d8\" id=\"prod-6fPS70C2\"><emu-nt id=\"_ref_337\"><a href=\"#prod-PrimitivePattern\">PrimitivePattern</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"PrimitivePatternMatches\" id=\"_ref_79\"><a href=\"#sec-primitive-pattern-matches\">PrimitivePatternMatches</a></emu-xref> of <emu-nt id=\"_ref_338\"><a href=\"#prod-PrimitivePattern\">PrimitivePattern</a></emu-nt> with argument <var>subject</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MatchPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"27xtpaqy\" id=\"prod-8y3jNblH\"><emu-nt id=\"_ref_339\"><a href=\"#prod-VariableDeclarationPattern\">VariableDeclarationPattern</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"VariableDeclarationPatternMatches\" id=\"_ref_80\"><a href=\"#sec-variable-declaration-pattern-matches\">VariableDeclarationPatternMatches</a></emu-xref> of <emu-nt id=\"_ref_340\"><a href=\"#prod-VariableDeclarationPattern\">VariableDeclarationPattern</a></emu-nt> with argument <var>subject</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MatchPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"zftkm5nb\" id=\"prod-vBMoWeeV\"><emu-nt id=\"_ref_341\"><a href=\"#prod-MemberExpressionPattern\">MemberExpressionPattern</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return ?&nbsp;<emu-xref aoid=\"MemberExpressionPatternMatches\" id=\"_ref_81\"><a href=\"#sec-member-expression-pattern-matches\" class=\"e-user-code\">MemberExpressionPatternMatches</a></emu-xref> of <emu-nt id=\"_ref_342\"><a href=\"#prod-MemberExpressionPattern\">MemberExpressionPattern</a></emu-nt> with arguments <var>subject</var> and <var>cacheGroup</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MatchPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cyavtzzb\" id=\"prod-mpb2HCVB\"><emu-nt id=\"_ref_343\"><a href=\"#prod-ObjectPattern\">ObjectPattern</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return ?&nbsp;<emu-xref aoid=\"ObjectPatternMatches\" id=\"_ref_82\"><a href=\"#sec-object-pattern-matches\" class=\"e-user-code\">ObjectPatternMatches</a></emu-xref> of <emu-nt id=\"_ref_344\"><a href=\"#prod-ObjectPattern\">ObjectPattern</a></emu-nt> with arguments <var>subject</var> and <var>cacheGroup</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MatchPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dfbie73u\" id=\"prod-QXRatsJR\"><emu-nt id=\"_ref_345\"><a href=\"#prod-ArrayPattern\">ArrayPattern</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return ?&nbsp;<emu-xref aoid=\"ArrayPatternMatches\" id=\"_ref_83\"><a href=\"#sec-array-pattern-matches\" class=\"e-user-code\">ArrayPatternMatches</a></emu-xref> of <emu-nt id=\"_ref_346\"><a href=\"#prod-ArrayPattern\">ArrayPattern</a></emu-nt> with arguments <var>subject</var> and <var>cacheGroup</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MatchPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gq_1p9nv\" id=\"prod-MW-Egi0C\"><emu-nt id=\"_ref_347\"><a href=\"#prod-UnaryAlgebraicPattern\">UnaryAlgebraicPattern</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return ?&nbsp;<emu-xref aoid=\"UnaryAlgebraicPatternMatches\" id=\"_ref_84\"><a href=\"#sec-unary-algebraic-pattern-matches\" class=\"e-user-code\">UnaryAlgebraicPatternMatches</a></emu-xref> of <emu-nt id=\"_ref_348\"><a href=\"#prod-UnaryAlgebraicPattern\">UnaryAlgebraicPattern</a></emu-nt> with argument <var>subject</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MatchPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"h36b3hfy\" id=\"prod-E8S1P1H4\"><emu-nt id=\"_ref_349\"><a href=\"#prod-RelationalPattern\">RelationalPattern</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return ?&nbsp;<emu-xref aoid=\"RelationalPatternMatches\" id=\"_ref_85\"><a href=\"#sec-relational-pattern-matches\" class=\"e-user-code\">RelationalPatternMatches</a></emu-xref> of <emu-nt id=\"_ref_350\"><a href=\"#prod-RelationalPattern\">RelationalPattern</a></emu-nt> with arguments <var>subject</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MatchPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"h3fpdsgw\" id=\"prod-rvZDZ_Jw\"><emu-nt id=\"_ref_351\"><a href=\"#prod-IfPattern\">IfPattern</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return ?&nbsp;<emu-xref aoid=\"IfPatternMatches\" id=\"_ref_86\"><a href=\"#sec-if-pattern-matches\" class=\"e-user-code\">IfPatternMatches</a></emu-xref> of <emu-nt id=\"_ref_352\"><a href=\"#prod-IfPattern\">IfPattern</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MatchPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"zldm3trl\" id=\"prod-EquXXU0V\"><emu-nt id=\"_ref_353\"><a href=\"#prod-CombinedMatchPattern\">CombinedMatchPattern</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return ?&nbsp;<emu-xref aoid=\"CombinedMatchPatternMatches\" id=\"_ref_87\"><a href=\"#sec-combined-match-pattern-matches\" class=\"e-user-code\">CombinedMatchPatternMatches</a></emu-xref> of <emu-nt id=\"_ref_354\"><a href=\"#prod-CombinedMatchPattern\">CombinedMatchPattern</a></emu-nt> with arguments <var>subject</var> and <var>cacheGroup</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-primitive-pattern-matches\" type=\"sdo\" aoid=\"PrimitivePatternMatches\">\n      <h1><span class=\"secnum\">30.1.4</span> Runtime Semantics: PrimitivePatternMatches</h1>\n      <p>The <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"https://tc39.es/ecma262/#sec-algorithm-conventions-syntax-directed-operations\">syntax-directed operation</a></emu-xref> PrimitivePatternMatches takes argument <var>subject</var> (an <emu-xref href=\"#sec-ecmascript-language-types\" id=\"_ref_88\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and returns a Boolean. It is defined piecewise over the following productions:</p>\n      <emu-grammar><emu-production name=\"PrimitivePattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PrimitivePattern\">PrimitivePattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"kul-a19e\" id=\"prod-mlLTmHeP\"><emu-nt><a href=\"https://tc39.es/ecma262/#prod-Literal\">Literal</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"SameValueZero\"><a href=\"https://tc39.es/ecma262/#sec-samevaluezero\">SameValueZero</a></emu-xref>(<var>subject</var>, !&nbsp;<emu-xref aoid=\"Evaluation\"><a href=\"https://tc39.es/ecma262/#sec-evaluation\">Evaluation</a></emu-xref> of <emu-nt><a href=\"https://tc39.es/ecma262/#prod-Literal\">Literal</a></emu-nt>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"PrimitivePattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PrimitivePattern\">PrimitivePattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e_otk8es\" id=\"prod-eFLzsKUd\"><emu-nt><a href=\"https://tc39.es/ecma262/#prod-NoSubstitutionTemplate\">NoSubstitutionTemplate</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"SameValueNonNumber\"><a href=\"https://tc39.es/ecma262/#sec-samevaluenonnumber\">SameValueNonNumber</a></emu-xref>(<var>subject</var>, !&nbsp;<emu-xref aoid=\"Evaluation\"><a href=\"https://tc39.es/ecma262/#sec-evaluation\">Evaluation</a></emu-xref> of <emu-nt><a href=\"https://tc39.es/ecma262/#prod-NoSubstitutionTemplate\">NoSubstitutionTemplate</a></emu-nt>).</li></ol></emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-variable-declaration-pattern-matches\" type=\"sdo\" aoid=\"VariableDeclarationPatternMatches\">\n      <h1><span class=\"secnum\">30.1.5</span> Runtime Semantics: VariableDeclarationPatternMatches</h1>\n      <p>The <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"https://tc39.es/ecma262/#sec-algorithm-conventions-syntax-directed-operations\">syntax-directed operation</a></emu-xref> VariableDeclarationPatternMatches takes argument <var>subject</var> (an <emu-xref href=\"#sec-ecmascript-language-types\" id=\"_ref_89\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and returns a Boolean. It is defined piecewise over the following productions:</p>\n      <emu-grammar><emu-production name=\"VariableDeclarationPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclarationPattern\">VariableDeclarationPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"p6fje17y\" id=\"prod-Otz3gD-Y\">\n        <emu-nt id=\"_ref_355\"><a href=\"#prod-VarOrLetOrConst\">VarOrLetOrConst</a></emu-nt>\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>TODO: This section is not written in the spec language yet.</li><li>Let <var>name</var> be <emu-xref aoid=\"StringValue\"><a href=\"https://tc39.es/ecma262/#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"https://tc39.es/ecma262/#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Initialize variable <var>name</var> with <var>subject</var> with the semantics of <code>var</code>, <code>let</code> or <code>const</code> based on <emu-nt id=\"_ref_356\"><a href=\"#prod-VarOrLetOrConst\">VarOrLetOrConst</a></emu-nt>.</li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-member-expression-pattern-matches\" type=\"sdo\" aoid=\"MemberExpressionPatternMatches\">\n      <h1><span class=\"secnum\">30.1.6</span> Runtime Semantics: MemberExpressionPatternMatches</h1>\n      <p>The <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"https://tc39.es/ecma262/#sec-algorithm-conventions-syntax-directed-operations\">syntax-directed operation</a></emu-xref> MemberExpressionPatternMatches takes arguments <var>subject</var> (an <emu-xref href=\"#sec-ecmascript-language-types\" id=\"_ref_90\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and <var>cacheGroup</var> (a <emu-xref href=\"#sec-map-constructor\"><a href=\"https://tc39.es/ecma262/#sec-map-constructor\">%Map%</a></emu-xref>) and returns either a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">normal completion containing</a></emu-xref> a Boolean or an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>. It is defined piecewise over the following productions:</p>\n      <emu-grammar><emu-production name=\"MemberExpressionPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MemberExpressionPattern\">MemberExpressionPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"887ylmg0\" id=\"prod--tiCo4Kg\"><emu-nt id=\"_ref_357\"><a href=\"#prod-PatternMatchingMemberExpression\">PatternMatchingMemberExpression</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>expr</var> be the <emu-nt><a href=\"https://tc39.es/ecma262/#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"https://tc39.es/ecma262/#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt id=\"_ref_358\"><a href=\"#prod-PatternMatchingMemberExpression\">PatternMatchingMemberExpression</a></emu-nt>.</li><li>Let <var>ref</var> be ?&nbsp;<emu-xref aoid=\"Evaluation\"><a href=\"https://tc39.es/ecma262/#sec-evaluation\" class=\"e-user-code\">Evaluation</a></emu-xref> of <var>expr</var>.</li><li>Let <var>value</var> be ?&nbsp;<emu-xref aoid=\"GetValue\"><a href=\"https://tc39.es/ecma262/#sec-getvalue\" class=\"e-user-code\">GetValue</a></emu-xref>(<var>ref</var>).</li><li>If <var>ref</var> is a <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-reference-record-specification-type\">Reference Record</a></emu-xref> and <emu-xref aoid=\"IsPropertyReference\"><a href=\"https://tc39.es/ecma262/#sec-ispropertyreference\">IsPropertyReference</a></emu-xref>(<var>ref</var>) is <emu-val>true</emu-val>, let <var>receiver</var> be <emu-xref aoid=\"GetThisValue\"><a href=\"https://tc39.es/ecma262/#sec-getthisvalue\">GetThisValue</a></emu-xref>(<var>ref</var>).</li><li>Else, let <var>receiver</var> be <emu-val>null</emu-val>.</li><li>Let <var>result</var> be ?&nbsp;<emu-xref aoid=\"InvokeCustomMatcher\" id=\"_ref_91\"><a href=\"#sec-invoke-custom-matcher\" class=\"e-user-code\">InvokeCustomMatcher</a></emu-xref>(<var>value</var>, <var>subject</var>, <var>cacheGroup</var>, <emu-const>boolean</emu-const>, <var>receiver</var>).</li><li><emu-xref href=\"#assert\"><a href=\"https://tc39.es/ecma262/#assert\">Assert</a></emu-xref>: <var>result</var> <emu-xref href=\"#sec-ecmascript-language-types-boolean-type\"><a href=\"https://tc39.es/ecma262/#sec-ecmascript-language-types-boolean-type\">is a Boolean</a></emu-xref>.</li><li>Return <var>result</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MemberExpressionPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MemberExpressionPattern\">MemberExpressionPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"df-_ftrt\" id=\"prod-UC7vB794\">\n        <emu-nt id=\"_ref_359\"><a href=\"#prod-PatternMatchingMemberExpression\">PatternMatchingMemberExpression</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt optional=\"\" id=\"_ref_360\"><a href=\"#prod-MatchList\">MatchList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>expr</var> be the <emu-nt><a href=\"https://tc39.es/ecma262/#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"https://tc39.es/ecma262/#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt id=\"_ref_361\"><a href=\"#prod-PatternMatchingMemberExpression\">PatternMatchingMemberExpression</a></emu-nt>.</li><li>Let <var>ref</var> be ?&nbsp;<emu-xref aoid=\"Evaluation\"><a href=\"https://tc39.es/ecma262/#sec-evaluation\" class=\"e-user-code\">Evaluation</a></emu-xref> of <var>expr</var>.</li><li>Let <var>value</var> be ?&nbsp;<emu-xref aoid=\"GetValue\"><a href=\"https://tc39.es/ecma262/#sec-getvalue\" class=\"e-user-code\">GetValue</a></emu-xref>(<var>ref</var>).</li><li>If <var>ref</var> is a <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-reference-record-specification-type\">Reference Record</a></emu-xref> and <emu-xref aoid=\"IsPropertyReference\"><a href=\"https://tc39.es/ecma262/#sec-ispropertyreference\">IsPropertyReference</a></emu-xref>(<var>ref</var>) is <emu-val>true</emu-val>, let <var>receiver</var> be <emu-xref aoid=\"GetThisValue\"><a href=\"https://tc39.es/ecma262/#sec-getthisvalue\">GetThisValue</a></emu-xref>(<var>ref</var>).</li><li>Else, let <var>receiver</var> be <emu-val>null</emu-val>.</li><li>Let <var>listMatchResult</var> be ?&nbsp;<emu-xref aoid=\"InvokeCustomMatcher\" id=\"_ref_92\"><a href=\"#sec-invoke-custom-matcher\" class=\"e-user-code\">InvokeCustomMatcher</a></emu-xref>(<var>value</var>, <var>subject</var>, <var>cacheGroup</var>, <emu-const>list</emu-const>, <var>receiver</var>).</li><li>If <var>listMatchResult</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"https://tc39.es/ecma262/#assert\">Assert</a></emu-xref>: <var>listMatchResult</var> is an <emu-xref href=\"#sec-iterator-records\"><a href=\"https://tc39.es/ecma262/#sec-iterator-records\">Iterator Record</a></emu-xref>.</li><li>If <emu-nt id=\"_ref_362\"><a href=\"#prod-MatchList\">MatchList</a></emu-nt> is not present, then<ol><li>Return ?&nbsp;<emu-xref aoid=\"FinishListMatch\" id=\"_ref_93\"><a href=\"#sec-finish-list-match\" class=\"e-user-code\">FinishListMatch</a></emu-xref>(<var>listMatchResult</var>, <var>cacheGroup</var>, 0).</li></ol></li><li>Return ?&nbsp;<emu-xref aoid=\"ListPatternMatches\" id=\"_ref_94\"><a href=\"#sec-list-pattern-matches\" class=\"e-user-code\">ListPatternMatches</a></emu-xref> of <emu-nt id=\"_ref_363\"><a href=\"#prod-MatchList\">MatchList</a></emu-nt> with arguments <var>listMatchResult</var> and <var>cacheGroup</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-object-pattern-matches\" type=\"sdo\" aoid=\"ObjectPatternMatches\">\n      <h1><span class=\"secnum\">30.1.7</span> Runtime Semantics: ObjectPatternMatches</h1>\n      <p>The <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"https://tc39.es/ecma262/#sec-algorithm-conventions-syntax-directed-operations\">syntax-directed operation</a></emu-xref> ObjectPatternMatches takes arguments <var>subject</var> (an <emu-xref href=\"#sec-ecmascript-language-types\" id=\"_ref_95\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and <var>cacheGroup</var> (a <emu-xref href=\"#sec-map-constructor\"><a href=\"https://tc39.es/ecma262/#sec-map-constructor\">%Map%</a></emu-xref>) and returns either a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">normal completion containing</a></emu-xref> a Boolean or an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>. It is defined piecewise over the following productions:</p>\n      <emu-grammar><emu-production name=\"ObjectPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ObjectPattern\">ObjectPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-ijKqIu5y\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>subject</var> <emu-xref href=\"#sec-object-type\"><a href=\"https://tc39.es/ecma262/#sec-object-type\">is an Object</a></emu-xref>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ObjectPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ObjectPattern\">ObjectPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"o1dsndx3\" id=\"prod-rsN4rFAw\">\n        <emu-t>{</emu-t>\n        <emu-nt id=\"_ref_364\"><a href=\"#prod-MatchRestProperty\">MatchRestProperty</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>subject</var> <emu-xref href=\"#sec-object-type\"><a href=\"https://tc39.es/ecma262/#sec-object-type\">is not an Object</a></emu-xref>, return <emu-val>false</emu-val>.</li><li>Let <var>matches</var> be ?&nbsp;<emu-xref aoid=\"ObjectPatternInnerMatches\" id=\"_ref_96\"><a href=\"#sec-object-pattern-inner-matches\" class=\"e-user-code\">ObjectPatternInnerMatches</a></emu-xref> of <emu-nt id=\"_ref_365\"><a href=\"#prod-MatchRestProperty\">MatchRestProperty</a></emu-nt> with arguments <var>subject</var>, <var>cacheGroup</var> and a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>If <var>matches</var> is <emu-const>not-matched</emu-const>, return <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ObjectPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ObjectPattern\">ObjectPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fzjtv8n6\" id=\"prod-t1nKdCY9\">\n        <emu-t>{</emu-t>\n        <emu-nt id=\"_ref_366\"><a href=\"#prod-MatchPropertyList\">MatchPropertyList</a></emu-nt>\n        <emu-t optional=\"\">,<emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>subject</var> <emu-xref href=\"#sec-object-type\"><a href=\"https://tc39.es/ecma262/#sec-object-type\">is not an Object</a></emu-xref>, return <emu-val>false</emu-val>.</li><li>Let <var>matches</var> be ?&nbsp;<emu-xref aoid=\"ObjectPatternInnerMatches\" id=\"_ref_97\"><a href=\"#sec-object-pattern-inner-matches\" class=\"e-user-code\">ObjectPatternInnerMatches</a></emu-xref> of <emu-nt id=\"_ref_367\"><a href=\"#prod-MatchPropertyList\">MatchPropertyList</a></emu-nt> with arguments <var>subject</var>, <var>cacheGroup</var> and a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>If <var>matches</var> is <emu-const>not-matched</emu-const>, return <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ObjectPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ObjectPattern\">ObjectPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"vxmanhfb\" id=\"prod-yj96DPDb\">\n        <emu-t>{</emu-t>\n        <emu-nt id=\"_ref_368\"><a href=\"#prod-MatchPropertyList\">MatchPropertyList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt id=\"_ref_369\"><a href=\"#prod-MatchRestProperty\">MatchRestProperty</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>subject</var> <emu-xref href=\"#sec-object-type\"><a href=\"https://tc39.es/ecma262/#sec-object-type\">is not an Object</a></emu-xref>, return <emu-val>false</emu-val>.</li><li>Let <var>matches</var> be ?&nbsp;<emu-xref aoid=\"ObjectPatternInnerMatches\" id=\"_ref_98\"><a href=\"#sec-object-pattern-inner-matches\" class=\"e-user-code\">ObjectPatternInnerMatches</a></emu-xref> of <emu-nt id=\"_ref_370\"><a href=\"#prod-MatchPropertyList\">MatchPropertyList</a></emu-nt> with arguments <var>subject</var>, <var>cacheGroup</var> and a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>If <var>matches</var> is <emu-const>not-matched</emu-const>, return <emu-val>false</emu-val>.</li><li>If <emu-nt id=\"_ref_371\"><a href=\"#prod-MatchRestProperty\">MatchRestProperty</a></emu-nt> is not present, return <emu-val>true</emu-val>.</li><li>Let <var>restMatches</var> be ?&nbsp;<emu-xref aoid=\"ObjectPatternInnerMatches\" id=\"_ref_99\"><a href=\"#sec-object-pattern-inner-matches\" class=\"e-user-code\">ObjectPatternInnerMatches</a></emu-xref> of <emu-nt id=\"_ref_372\"><a href=\"#prod-MatchRestProperty\">MatchRestProperty</a></emu-nt> with arguments <var>subject</var>, <var>cacheGroup</var> and <var>matches</var>.</li><li>If <var>restMatches</var> is <emu-const>not-matched</emu-const>, return <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-object-pattern-inner-matches\" type=\"sdo\" aoid=\"ObjectPatternInnerMatches\">\n      <h1><span class=\"secnum\">30.1.8</span> Runtime Semantics: ObjectPatternInnerMatches</h1>\n      <p>The <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"https://tc39.es/ecma262/#sec-algorithm-conventions-syntax-directed-operations\">syntax-directed operation</a></emu-xref> ObjectPatternInnerMatches takes arguments <var>subject</var> (an Object), <var>cacheGroup</var> (a <emu-xref href=\"#sec-map-constructor\"><a href=\"https://tc39.es/ecma262/#sec-map-constructor\">%Map%</a></emu-xref>), and <var>excludedNames</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-list-and-record-specification-type\">List</a></emu-xref> of String) and returns either a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">normal completion containing</a></emu-xref> either a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-list-and-record-specification-type\">List</a></emu-xref> of String or <emu-const>not-matched</emu-const>, or an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>. It is defined piecewise over the following productions:</p>\n      <emu-grammar><emu-production name=\"MatchRestProperty\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MatchRestProperty\">MatchRestProperty</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"_dw8adpi\" id=\"prod-CVegFgkL\">\n        <emu-t>...</emu-t>\n        <emu-nt id=\"_ref_373\"><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>restObj</var> be <emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"https://tc39.es/ecma262/#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"https://tc39.es/ecma262/#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>).</li><li>Perform ?&nbsp;<emu-xref aoid=\"CopyDataProperties\"><a href=\"https://tc39.es/ecma262/#sec-copydataproperties\" class=\"e-user-code\">CopyDataProperties</a></emu-xref>(<var>restObj</var>, <var>subject</var>, <var>excludedNames</var>).</li><li>Let <var>matches</var> be ?&nbsp;<emu-xref aoid=\"MatchPatternMatches\" id=\"_ref_100\"><a href=\"#sec-match-pattern-matches\" class=\"e-user-code\">MatchPatternMatches</a></emu-xref> of <emu-nt id=\"_ref_374\"><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt> with arguments <var>restObj</var> and <var>cacheGroup</var>.</li><li>If <var>matches</var> is <emu-val>false</emu-val>, return <emu-const>not-matched</emu-const>.</li><li>Return «&nbsp;».</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MatchPropertyList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MatchPropertyList\">MatchPropertyList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"itbva-y6\" id=\"prod-T4vISnOq\"><emu-nt id=\"_ref_375\"><a href=\"#prod-MatchProperty\">MatchProperty</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return ?&nbsp;<emu-xref aoid=\"ObjectPatternInnerMatches\" id=\"_ref_101\"><a href=\"#sec-object-pattern-inner-matches\" class=\"e-user-code\">ObjectPatternInnerMatches</a></emu-xref> of <emu-nt id=\"_ref_376\"><a href=\"#prod-MatchProperty\">MatchProperty</a></emu-nt> with arguments <var>subject</var>, <var>cacheGroup</var> and <var>excludedNames</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MatchPropertyList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MatchPropertyList\">MatchPropertyList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"q97kd0i8\" id=\"prod-qAB6O-_U\">\n        <emu-nt id=\"_ref_377\"><a href=\"#prod-MatchPropertyList\">MatchPropertyList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt id=\"_ref_378\"><a href=\"#prod-MatchProperty\">MatchProperty</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>matches</var> be ?&nbsp;<emu-xref aoid=\"ObjectPatternInnerMatches\" id=\"_ref_102\"><a href=\"#sec-object-pattern-inner-matches\" class=\"e-user-code\">ObjectPatternInnerMatches</a></emu-xref> of <emu-nt id=\"_ref_379\"><a href=\"#prod-MatchProperty\">MatchProperty</a></emu-nt> with arguments <var>subject</var>, <var>cacheGroup</var> and <var>excludedNames</var>.</li><li>If <var>matches</var> is <emu-const>not-matched</emu-const>, return <emu-const>not-matched</emu-const>.</li><li>Let <var>propMatches</var> be ?&nbsp;<emu-xref aoid=\"ObjectPatternInnerMatches\" id=\"_ref_103\"><a href=\"#sec-object-pattern-inner-matches\" class=\"e-user-code\">ObjectPatternInnerMatches</a></emu-xref> of <emu-nt id=\"_ref_380\"><a href=\"#prod-MatchPropertyList\">MatchPropertyList</a></emu-nt> with arguments <var>subject</var>, <var>cacheGroup</var> and <var>matches</var>.</li><li>If <var>propMatches</var> is <emu-const>not-matched</emu-const>, return <emu-const>not-matched</emu-const>.</li><li><emu-xref href=\"#assert\"><a href=\"https://tc39.es/ecma262/#assert\">Assert</a></emu-xref>: <var>matches</var> and <var>propMatches</var> are <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-list-and-record-specification-type\">Lists</a></emu-xref> of String.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"https://tc39.es/ecma262/#list-concatenation\">list-concatenation</a></emu-xref> of <var>matches</var> and <var>propMatches</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MatchProperty\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MatchProperty\">MatchProperty</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"s8fjnez1\" id=\"prod-wn8ysC7M\">\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t optional=\"\">?<emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>propertyName</var> be ?&nbsp;<emu-xref aoid=\"Evaluation\"><a href=\"https://tc39.es/ecma262/#sec-evaluation\" class=\"e-user-code\">Evaluation</a></emu-xref> of <emu-nt><a href=\"https://tc39.es/ecma262/#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li>If ?&nbsp;<emu-xref aoid=\"HasPropertyCached\" id=\"_ref_104\"><a href=\"#sec-has-property-cached\" class=\"e-user-code\">HasPropertyCached</a></emu-xref>(<var>subject</var>, <var>cacheGroup</var>, <var>propertyName</var>) is <emu-val>false</emu-val>, then<ol><li>If <code>?</code> is present, return «&nbsp;».</li><li>Return <emu-const>not-matched</emu-const>.</li></ol></li><li>Return « <var>propertyName</var>&nbsp;».</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MatchProperty\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MatchProperty\">MatchProperty</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9mxwi2yo\" id=\"prod-K_6p11YI\">\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t optional=\"\">?<emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt id=\"_ref_381\"><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>propertyName</var> be ?&nbsp;<emu-xref aoid=\"Evaluation\"><a href=\"https://tc39.es/ecma262/#sec-evaluation\" class=\"e-user-code\">Evaluation</a></emu-xref> of <emu-nt><a href=\"https://tc39.es/ecma262/#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li>If ?&nbsp;<emu-xref aoid=\"HasPropertyCached\" id=\"_ref_105\"><a href=\"#sec-has-property-cached\" class=\"e-user-code\">HasPropertyCached</a></emu-xref>(<var>subject</var>, <var>cacheGroup</var>, <var>propertyName</var>) is <emu-val>false</emu-val>, then<ol><li>If <code>?</code> is present, return «&nbsp;».</li><li>Return <emu-const>not-matched</emu-const>.</li></ol></li><li>Let <var>value</var> be ?&nbsp;<emu-xref aoid=\"GetCached\" id=\"_ref_106\"><a href=\"#sec-get-cached\" class=\"e-user-code\">GetCached</a></emu-xref>(<var>subject</var>, <var>cacheGroup</var>, <var>propertyName</var>).</li><li>Let <var>matches</var> be ?&nbsp;<emu-xref aoid=\"MatchPatternMatches\" id=\"_ref_107\"><a href=\"#sec-match-pattern-matches\" class=\"e-user-code\">MatchPatternMatches</a></emu-xref> of <emu-nt id=\"_ref_382\"><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt> with arguments <var>value</var> and <var>cacheGroup</var>.</li><li>If <var>matches</var> is <emu-val>false</emu-val>, return <emu-const>not-matched</emu-const>.</li><li>Return « <var>propertyName</var>&nbsp;».</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MatchProperty\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MatchProperty\">MatchProperty</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gzjg2iry\" id=\"prod-67mQe-Kl\">\n        <emu-nt id=\"_ref_383\"><a href=\"#prod-VarOrLetOrConst\">VarOrLetOrConst</a></emu-nt>\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t optional=\"\">?<emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>TODO: This section is not written in the spec language yet.</li><li>Let <var>propertyName</var> be <emu-xref aoid=\"StringValue\"><a href=\"https://tc39.es/ecma262/#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"https://tc39.es/ecma262/#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>If ?&nbsp;<emu-xref aoid=\"HasPropertyCached\" id=\"_ref_108\"><a href=\"#sec-has-property-cached\" class=\"e-user-code\">HasPropertyCached</a></emu-xref>(<var>subject</var>, <var>cacheGroup</var>, <var>propertyName</var>) is <emu-val>false</emu-val>, then<ol><li>If <code>?</code> is present, return «&nbsp;».</li><li>Return <emu-const>not-matched</emu-const>.</li></ol></li><li>Let <var>value</var> be ?&nbsp;<emu-xref aoid=\"GetCached\" id=\"_ref_109\"><a href=\"#sec-get-cached\" class=\"e-user-code\">GetCached</a></emu-xref>(<var>subject</var>, <var>cacheGroup</var>, <var>propertyName</var>).</li><li>Initialize variable <var>propertyName</var> with <var>value</var> with the semantics of <code>var</code>, <code>let</code> or <code>const</code> based on <emu-nt id=\"_ref_384\"><a href=\"#prod-VarOrLetOrConst\">VarOrLetOrConst</a></emu-nt>.</li><li>Return « <var>propertyName</var>&nbsp;».</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MatchProperty\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MatchProperty\">MatchProperty</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f0mgqa9f\" id=\"prod-dFlCv79J\">\n        <emu-nt id=\"_ref_385\"><a href=\"#prod-VarOrLetOrConst\">VarOrLetOrConst</a></emu-nt>\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t optional=\"\">?<emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt id=\"_ref_386\"><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>TODO: This section is not written in the spec language yet.</li><li>Let <var>propertyName</var> be <emu-xref aoid=\"StringValue\"><a href=\"https://tc39.es/ecma262/#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"https://tc39.es/ecma262/#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>If ?&nbsp;<emu-xref aoid=\"HasPropertyCached\" id=\"_ref_110\"><a href=\"#sec-has-property-cached\" class=\"e-user-code\">HasPropertyCached</a></emu-xref>(<var>subject</var>, <var>cacheGroup</var>, <var>propertyName</var>) is <emu-val>false</emu-val>, then<ol><li>If <code>?</code> is present, return «&nbsp;».</li><li>Return <emu-const>not-matched</emu-const>.</li></ol></li><li>Let <var>value</var> be ?&nbsp;<emu-xref aoid=\"GetCached\" id=\"_ref_111\"><a href=\"#sec-get-cached\" class=\"e-user-code\">GetCached</a></emu-xref>(<var>subject</var>, <var>cacheGroup</var>, <var>propertyName</var>).</li><li>Let <var>matches</var> be ?&nbsp;<emu-xref aoid=\"MatchPatternMatches\" id=\"_ref_112\"><a href=\"#sec-match-pattern-matches\" class=\"e-user-code\">MatchPatternMatches</a></emu-xref> of <emu-nt id=\"_ref_387\"><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt> with arguments <var>value</var> and <var>cacheGroup</var>.</li><li>If <var>matches</var> is <emu-val>false</emu-val>, return <emu-const>not-matched</emu-const>.</li><li>Initialize variable <var>propertyName</var> with <var>value</var> with the semantics of <code>var</code>, <code>let</code> or <code>const</code> based on <emu-nt id=\"_ref_388\"><a href=\"#prod-VarOrLetOrConst\">VarOrLetOrConst</a></emu-nt>.</li><li>Return « <var>propertyName</var>&nbsp;».</li></ol></emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-array-pattern-matches\" type=\"sdo\" aoid=\"ArrayPatternMatches\">\n      <h1><span class=\"secnum\">30.1.9</span> Runtime Semantics: ArrayPatternMatches</h1>\n      <p>The <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"https://tc39.es/ecma262/#sec-algorithm-conventions-syntax-directed-operations\">syntax-directed operation</a></emu-xref> ArrayPatternMatches takes arguments <var>subject</var> (an <emu-xref href=\"#sec-ecmascript-language-types\" id=\"_ref_113\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and <var>cacheGroup</var> (a <emu-xref href=\"#sec-map-constructor\"><a href=\"https://tc39.es/ecma262/#sec-map-constructor\">%Map%</a></emu-xref>) and returns either a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">normal completion containing</a></emu-xref> a Boolean or an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>. It is defined piecewise over the following productions:</p>\n      <emu-grammar><emu-production name=\"ArrayPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrayPattern\">ArrayPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"maizfmp4\" id=\"prod-PyMOIQ3Y\">\n        <emu-t>[</emu-t>\n        <emu-nt optional=\"\" id=\"_ref_389\"><a href=\"#prod-MatchList\">MatchList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-xref aoid=\"IsCallable\"><a href=\"https://tc39.es/ecma262/#sec-iscallable\">IsCallable</a></emu-xref>(? <emu-xref aoid=\"GetCached\" id=\"_ref_114\"><a href=\"#sec-get-cached\" class=\"e-user-code\">GetCached</a></emu-xref>(<var>subject</var>, <var>cacheGroup</var>, <emu-xref href=\"#sec-well-known-symbols\" id=\"_ref_115\"><a href=\"#sec-well-known-symbols\">%Symbol.iterator%</a></emu-xref>)) is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>Let <var>iteratorRecord</var> be ?&nbsp;<emu-xref aoid=\"GetIteratorCached\" id=\"_ref_116\"><a href=\"#sec-get-iterator-cached\" class=\"e-user-code\">GetIteratorCached</a></emu-xref>(<var>subject</var>, <var>cacheGroup</var>).</li><li>If <emu-nt id=\"_ref_390\"><a href=\"#prod-MatchList\">MatchList</a></emu-nt> is not present, then<ol><li>Return ?&nbsp;<emu-xref aoid=\"FinishListMatch\" id=\"_ref_117\"><a href=\"#sec-finish-list-match\" class=\"e-user-code\">FinishListMatch</a></emu-xref>(<var>subject</var>, <var>cacheGroup</var>, 0).</li></ol></li><li>Return ?&nbsp;<emu-xref aoid=\"ListPatternMatches\" id=\"_ref_118\"><a href=\"#sec-list-pattern-matches\" class=\"e-user-code\">ListPatternMatches</a></emu-xref> of <emu-nt id=\"_ref_391\"><a href=\"#prod-MatchList\">MatchList</a></emu-nt> with arguments <var>iteratorRecord</var> and <var>cacheGroup</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-list-pattern-matches\" type=\"sdo\" aoid=\"ListPatternMatches\">\n      <h1><span class=\"secnum\">30.1.10</span> Runtime Semantics: ListPatternMatches</h1>\n      <p>The <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"https://tc39.es/ecma262/#sec-algorithm-conventions-syntax-directed-operations\">syntax-directed operation</a></emu-xref> ListPatternMatches takes arguments <var>iterator</var> (an <emu-xref href=\"#sec-iterator-records\"><a href=\"https://tc39.es/ecma262/#sec-iterator-records\">Iterator Record</a></emu-xref>) and <var>cacheGroup</var> (a <emu-xref href=\"#sec-map-constructor\"><a href=\"https://tc39.es/ecma262/#sec-map-constructor\">%Map%</a></emu-xref>) and returns either a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">normal completion containing</a></emu-xref> a Boolean or an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>. It is defined piecewise over the following productions:</p>\n      <emu-grammar><emu-production name=\"MatchList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MatchList\">MatchList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ayksfmrr\" id=\"prod-jo48_6Fj\">\n        <emu-nt optional=\"\"><a href=\"https://tc39.es/ecma262/#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt optional=\"\" id=\"_ref_392\"><a href=\"#prod-MatchRestElement\">MatchRestElement</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>visitedCount</var> be 0.</li><li>If <emu-nt><a href=\"https://tc39.es/ecma262/#prod-Elision\">Elision</a></emu-nt> is present, then<ol><li>If ?&nbsp;<emu-xref aoid=\"GetIteratorNthValueCached\" id=\"_ref_119\"><a href=\"#sec-get-iterator-nth-value-cached\" class=\"e-user-code\">GetIteratorNthValueCached</a></emu-xref>(<var>iterator</var>, <var>cacheGroup</var>, 0) is <emu-const>not-matched</emu-const>, return <emu-val>false</emu-val>.</li><li>Set <var>visitedCount</var> to 1.</li></ol></li><li>If <emu-nt id=\"_ref_393\"><a href=\"#prod-MatchRestElement\">MatchRestElement</a></emu-nt> is present, then<ol><li>Let <var>matches</var> be ?&nbsp;<emu-xref aoid=\"ListPatternInnerMatches\" id=\"_ref_120\"><a href=\"#sec-list-pattern-inner-matches\" class=\"e-user-code\">ListPatternInnerMatches</a></emu-xref> of <emu-nt id=\"_ref_394\"><a href=\"#prod-MatchRestElement\">MatchRestElement</a></emu-nt> with arguments <var>iterator</var>, <var>cacheGroup</var> and <var>visitedCount</var>.</li><li>Return ?&nbsp;<emu-xref aoid=\"FinishListMatch\" id=\"_ref_121\"><a href=\"#sec-finish-list-match\" class=\"e-user-code\">FinishListMatch</a></emu-xref>(<var>iterator</var>, <var>cacheGroup</var>, <var>matches</var>).</li></ol></li><li>Return ?&nbsp;<emu-xref aoid=\"FinishListMatch\" id=\"_ref_122\"><a href=\"#sec-finish-list-match\" class=\"e-user-code\">FinishListMatch</a></emu-xref>(<var>iterator</var>, <var>cacheGroup</var>, <var>visitedCount</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MatchList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MatchList\">MatchList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pcmx0uf1\" id=\"prod-ZH2p23SX\"><emu-nt id=\"_ref_395\"><a href=\"#prod-MatchElementList\">MatchElementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>matches</var> be ?&nbsp;<emu-xref aoid=\"ListPatternInnerMatches\" id=\"_ref_123\"><a href=\"#sec-list-pattern-inner-matches\" class=\"e-user-code\">ListPatternInnerMatches</a></emu-xref> of <emu-nt id=\"_ref_396\"><a href=\"#prod-MatchElementList\">MatchElementList</a></emu-nt> with arguments <var>iterator</var>, <var>cacheGroup</var> and 0.</li><li>Return ?&nbsp;<emu-xref aoid=\"FinishListMatch\" id=\"_ref_124\"><a href=\"#sec-finish-list-match\" class=\"e-user-code\">FinishListMatch</a></emu-xref>(<var>iterator</var>, <var>cacheGroup</var>, <var>matches</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MatchList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MatchList\">MatchList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uah6njv4\" id=\"prod-TB4qCm-Y\">\n        <emu-nt id=\"_ref_397\"><a href=\"#prod-MatchElementList\">MatchElementList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt optional=\"\"><a href=\"https://tc39.es/ecma262/#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt optional=\"\" id=\"_ref_398\"><a href=\"#prod-MatchRestElement\">MatchRestElement</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>visitedCount</var> be ?&nbsp;<emu-xref aoid=\"ListPatternInnerMatches\" id=\"_ref_125\"><a href=\"#sec-list-pattern-inner-matches\" class=\"e-user-code\">ListPatternInnerMatches</a></emu-xref> of <emu-nt id=\"_ref_399\"><a href=\"#prod-MatchElementList\">MatchElementList</a></emu-nt> with arguments <var>iterator</var>, <var>cacheGroup</var> and 0.</li><li>If <var>visitedCount</var> is <emu-const>not-matched</emu-const>, return <emu-val>false</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"https://tc39.es/ecma262/#assert\">Assert</a></emu-xref>: <var>visitedCount</var> is a non-negative <emu-xref href=\"#integer\"><a href=\"https://tc39.es/ecma262/#integer\">integer</a></emu-xref>.</li><li>If <emu-nt><a href=\"https://tc39.es/ecma262/#prod-Elision\">Elision</a></emu-nt> is present, then<ol><li>If ?&nbsp;<emu-xref aoid=\"GetIteratorNthValueCached\" id=\"_ref_126\"><a href=\"#sec-get-iterator-nth-value-cached\" class=\"e-user-code\">GetIteratorNthValueCached</a></emu-xref>(<var>iterator</var>, <var>cacheGroup</var>, <var>visitedCount</var>) is <emu-const>not-matched</emu-const>, return <emu-val>false</emu-val>.</li><li>Set <var>visitedCount</var> to <var>visitedCount</var> + 1.</li></ol></li><li>If <emu-nt id=\"_ref_400\"><a href=\"#prod-MatchRestElement\">MatchRestElement</a></emu-nt> is present, then<ol><li>Let <var>matches</var> be ?&nbsp;<emu-xref aoid=\"ListPatternInnerMatches\" id=\"_ref_127\"><a href=\"#sec-list-pattern-inner-matches\" class=\"e-user-code\">ListPatternInnerMatches</a></emu-xref> of <emu-nt id=\"_ref_401\"><a href=\"#prod-MatchRestElement\">MatchRestElement</a></emu-nt> with arguments <var>iterator</var>, <var>cacheGroup</var> and <var>visitedCount</var>.</li><li>Return ?&nbsp;<emu-xref aoid=\"FinishListMatch\" id=\"_ref_128\"><a href=\"#sec-finish-list-match\" class=\"e-user-code\">FinishListMatch</a></emu-xref>(<var>iterator</var>, <var>cacheGroup</var>, <var>matches</var>).</li></ol></li><li>Return ?&nbsp;<emu-xref aoid=\"FinishListMatch\" id=\"_ref_129\"><a href=\"#sec-finish-list-match\" class=\"e-user-code\">FinishListMatch</a></emu-xref>(<var>iterator</var>, <var>cacheGroup</var>, <var>visitedCount</var>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        It is possible to use <emu-xref href=\"#sec-lengthofarraylike\"><a href=\"https://tc39.es/ecma262/#sec-lengthofarraylike\">array-like object</a></emu-xref> or <emu-xref aoid=\"IsArray\"><a href=\"https://tc39.es/ecma262/#sec-isarray\">IsArray</a></emu-xref> semantics rather than iterator protocol if there is performance issue reported from the engine.\n      </div></emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-list-pattern-inner-matches\" type=\"sdo\" aoid=\"ListPatternInnerMatches\">\n      <h1><span class=\"secnum\">30.1.11</span> Runtime Semantics: ListPatternInnerMatches</h1>\n      <p>The <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"https://tc39.es/ecma262/#sec-algorithm-conventions-syntax-directed-operations\">syntax-directed operation</a></emu-xref> ListPatternInnerMatches takes arguments <var>iterator</var> (an <emu-xref href=\"#sec-iterator-records\"><a href=\"https://tc39.es/ecma262/#sec-iterator-records\">Iterator Record</a></emu-xref>), <var>cacheGroup</var> (a <emu-xref href=\"#sec-map-constructor\"><a href=\"https://tc39.es/ecma262/#sec-map-constructor\">%Map%</a></emu-xref>), and <var>startIndex</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"https://tc39.es/ecma262/#integer\">integer</a></emu-xref>) and returns either a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">normal completion containing</a></emu-xref> either a non-negative <emu-xref href=\"#integer\"><a href=\"https://tc39.es/ecma262/#integer\">integer</a></emu-xref>, <emu-const>unlimited</emu-const> or <emu-const>not-matched</emu-const>, or an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>. It is defined piecewise over the following productions:</p>\n      <emu-grammar><emu-production name=\"MatchElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MatchElementList\">MatchElementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dlv9v-6j\" id=\"prod-xREui9vq\"><emu-nt id=\"_ref_402\"><a href=\"#prod-MatchElisionElement\">MatchElisionElement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return ?&nbsp;<emu-xref aoid=\"ListPatternInnerMatches\" id=\"_ref_130\"><a href=\"#sec-list-pattern-inner-matches\" class=\"e-user-code\">ListPatternInnerMatches</a></emu-xref> of <emu-nt id=\"_ref_403\"><a href=\"#prod-MatchElisionElement\">MatchElisionElement</a></emu-nt> with arguments <var>iterator</var>, <var>cacheGroup</var> and <var>startIndex</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MatchElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MatchElementList\">MatchElementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"eheyxnr4\" id=\"prod-OcHtMyto\">\n        <emu-nt id=\"_ref_404\"><a href=\"#prod-MatchElementList\">MatchElementList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt id=\"_ref_405\"><a href=\"#prod-MatchElisionElement\">MatchElisionElement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>visitedCount</var> be ?&nbsp;<emu-xref aoid=\"ListPatternInnerMatches\" id=\"_ref_131\"><a href=\"#sec-list-pattern-inner-matches\" class=\"e-user-code\">ListPatternInnerMatches</a></emu-xref> of <emu-nt id=\"_ref_406\"><a href=\"#prod-MatchElementList\">MatchElementList</a></emu-nt> with arguments <var>iterator</var>, <var>cacheGroup</var> and <var>startIndex</var>.</li><li>If <var>visitedCount</var> is <emu-const>not-matched</emu-const>, return <emu-const>not-matched</emu-const>.</li><li><emu-xref href=\"#assert\"><a href=\"https://tc39.es/ecma262/#assert\">Assert</a></emu-xref>: <var>visitedCount</var> is a non-negative <emu-xref href=\"#integer\"><a href=\"https://tc39.es/ecma262/#integer\">integer</a></emu-xref>.</li><li>Let <var>matches</var> be ?&nbsp;<emu-xref aoid=\"ListPatternInnerMatches\" id=\"_ref_132\"><a href=\"#sec-list-pattern-inner-matches\" class=\"e-user-code\">ListPatternInnerMatches</a></emu-xref> of <emu-nt id=\"_ref_407\"><a href=\"#prod-MatchElisionElement\">MatchElisionElement</a></emu-nt> with arguments <var>iterator</var>, <var>cacheGroup</var> and <var>startIndex</var> + <var>visitedCount</var>.</li><li>If <var>matches</var> is <emu-const>not-matched</emu-const>, return <emu-const>not-matched</emu-const>.</li><li><emu-xref href=\"#assert\"><a href=\"https://tc39.es/ecma262/#assert\">Assert</a></emu-xref>: <var>matches</var> is a non-negative <emu-xref href=\"#integer\"><a href=\"https://tc39.es/ecma262/#integer\">integer</a></emu-xref>.</li><li>Return <var>visitedCount</var> + <var>matches</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MatchElisionElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MatchElisionElement\">MatchElisionElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c0r7zx1e\" id=\"prod-3oXeLOQS\">\n        <emu-nt optional=\"\"><a href=\"https://tc39.es/ecma262/#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt id=\"_ref_408\"><a href=\"#prod-MatchElement\">MatchElement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>visitedCount</var> be 0.</li><li>If <emu-nt><a href=\"https://tc39.es/ecma262/#prod-Elision\">Elision</a></emu-nt> is present, then<ol><li>If ?&nbsp;<emu-xref aoid=\"GetIteratorNthValueCached\" id=\"_ref_133\"><a href=\"#sec-get-iterator-nth-value-cached\" class=\"e-user-code\">GetIteratorNthValueCached</a></emu-xref>(<var>iterator</var>, <var>cacheGroup</var>, <var>startIndex</var>) is <emu-const>not-matched</emu-const>, return <emu-const>not-matched</emu-const>.</li><li>Set <var>visitedCount</var> to <var>visitedCount</var> + 1.</li></ol></li><li>Let <var>matches</var> be ?&nbsp;<emu-xref aoid=\"ListPatternInnerMatches\" id=\"_ref_134\"><a href=\"#sec-list-pattern-inner-matches\" class=\"e-user-code\">ListPatternInnerMatches</a></emu-xref> of <emu-nt id=\"_ref_409\"><a href=\"#prod-MatchElement\">MatchElement</a></emu-nt> with arguments <var>iterator</var>, <var>cacheGroup</var> and <var>startIndex</var> + <var>visitedCount</var>.</li><li>If <var>matches</var> is <emu-const>not-matched</emu-const>, return <emu-const>not-matched</emu-const>.</li><li><emu-xref href=\"#assert\"><a href=\"https://tc39.es/ecma262/#assert\">Assert</a></emu-xref>: <var>matches</var> is a non-negative <emu-xref href=\"#integer\"><a href=\"https://tc39.es/ecma262/#integer\">integer</a></emu-xref>.</li><li>Return <var>visitedCount</var> + <var>matches</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MatchElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MatchElement\">MatchElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qvuneavu\" id=\"prod-wWtr3ozj\">\n        <emu-nt id=\"_ref_410\"><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt>\n        <emu-t optional=\"\">?<emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>value</var> be ?&nbsp;<emu-xref aoid=\"GetIteratorNthValueCached\" id=\"_ref_135\"><a href=\"#sec-get-iterator-nth-value-cached\" class=\"e-user-code\">GetIteratorNthValueCached</a></emu-xref>(<var>iterator</var>, <var>cacheGroup</var>, <var>startIndex</var>).</li><li>If <var>value</var> is <emu-const>not-matched</emu-const>, then<ol><li>If <code>?</code> is present, return 1.</li><li>Return <emu-const>not-matched</emu-const>.</li></ol></li><li>Let <var>matches</var> be ?&nbsp;<emu-xref aoid=\"MatchPatternMatches\" id=\"_ref_136\"><a href=\"#sec-match-pattern-matches\" class=\"e-user-code\">MatchPatternMatches</a></emu-xref> of <emu-nt id=\"_ref_411\"><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt> with arguments <var>value</var> and <var>cacheGroup</var>.</li><li>If <var>matches</var> is <emu-val>false</emu-val>, return <emu-const>not-matched</emu-const>.</li><li>Return 1.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MatchRestElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MatchRestElement\">MatchRestElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uugqq7gf\" id=\"prod-iIwhAXB2\"><emu-t>...</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-const>unlimited</emu-const>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MatchRestElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MatchRestElement\">MatchRestElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"_dw8adpi\" id=\"prod-QkDn-2nd\">\n        <emu-t>...</emu-t>\n        <emu-nt id=\"_ref_412\"><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>elements</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>i</var> be <var>startIndex</var>.</li><li>Let <var>next</var> be <emu-const>unused</emu-const>.</li><li>Repeat, while <var>next</var> is not <emu-const>not-matched</emu-const>,<ol><li>Set <var>next</var> to ?&nbsp;<emu-xref aoid=\"GetIteratorNthValueCached\" id=\"_ref_137\"><a href=\"#sec-get-iterator-nth-value-cached\" class=\"e-user-code\">GetIteratorNthValueCached</a></emu-xref>(<var>iterator</var>, <var>cacheGroup</var>, <var>i</var>).</li><li>If <var>next</var> is not <emu-const>not-matched</emu-const>, append <var>next</var> to <var>elements</var>.</li><li>Set <var>i</var> to <var>i</var> + 1.</li></ol></li><li>Let <var>rest</var> be <emu-xref aoid=\"CreateArrayFromList\"><a href=\"https://tc39.es/ecma262/#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(<var>elements</var>).</li><li>Let <var>matches</var> be ?&nbsp;<emu-xref aoid=\"MatchPatternMatches\" id=\"_ref_138\"><a href=\"#sec-match-pattern-matches\" class=\"e-user-code\">MatchPatternMatches</a></emu-xref> of <emu-nt id=\"_ref_413\"><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt> with arguments <var>rest</var> and <var>cacheGroup</var>.</li><li>If <var>matches</var> is <emu-val>false</emu-val>, return <emu-const>not-matched</emu-const>.</li><li>Return <emu-const>unlimited</emu-const>.</li></ol></emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-unary-algebraic-pattern-matches\" type=\"sdo\" aoid=\"UnaryAlgebraicPatternMatches\">\n      <h1><span class=\"secnum\">30.1.12</span> Runtime Semantics: UnaryAlgebraicPatternMatches</h1>\n      <p>The <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"https://tc39.es/ecma262/#sec-algorithm-conventions-syntax-directed-operations\">syntax-directed operation</a></emu-xref> UnaryAlgebraicPatternMatches takes argument <var>subject</var> (an <emu-xref href=\"#sec-ecmascript-language-types\" id=\"_ref_139\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and returns either a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">normal completion containing</a></emu-xref> a Boolean or an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>. It is defined piecewise over the following productions:</p>\n      <emu-grammar><emu-production name=\"UnaryAlgebraicPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-UnaryAlgebraicPattern\">UnaryAlgebraicPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"yrpolaez\" id=\"prod-HOehzcwY\"><emu-nt id=\"_ref_414\"><a href=\"#prod-PatternMatchingUnaryAlgebraicExpression\">PatternMatchingUnaryAlgebraicExpression</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>expr</var> be the <emu-nt><a href=\"https://tc39.es/ecma262/#prod-Expression\">Expression</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"https://tc39.es/ecma262/#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt id=\"_ref_415\"><a href=\"#prod-PatternMatchingUnaryAlgebraicExpression\">PatternMatchingUnaryAlgebraicExpression</a></emu-nt>.</li><li>Let <var>ref</var> be ?&nbsp;<emu-xref aoid=\"Evaluation\"><a href=\"https://tc39.es/ecma262/#sec-evaluation\" class=\"e-user-code\">Evaluation</a></emu-xref> of <var>expr</var>.</li><li>Let <var>value</var> be ?&nbsp;<emu-xref aoid=\"GetValue\"><a href=\"https://tc39.es/ecma262/#sec-getvalue\" class=\"e-user-code\">GetValue</a></emu-xref>(<var>ref</var>).</li><li>If <emu-nt id=\"_ref_416\"><a href=\"#prod-PatternMatchingUnaryAlgebraicExpression\">PatternMatchingUnaryAlgebraicExpression</a></emu-nt> is <code>+</code> <emu-nt><a href=\"https://tc39.es/ecma262/#prod-NumericLiteral\">NumericLiteral</a></emu-nt> or <code>-</code> <emu-nt><a href=\"https://tc39.es/ecma262/#prod-NumericLiteral\">NumericLiteral</a></emu-nt>, return <emu-xref aoid=\"SameValue\"><a href=\"https://tc39.es/ecma262/#sec-samevalue\">SameValue</a></emu-xref>(<var>subject</var>, <var>value</var>).</li><li>Return <emu-xref aoid=\"SameValueZero\"><a href=\"https://tc39.es/ecma262/#sec-samevaluezero\">SameValueZero</a></emu-xref>(<var>subject</var>, <var>value</var>).</li></ol></emu-alg>\n      <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n        <p>Only literal <code>+0</code> or <code>-0</code> will be matched with <emu-xref aoid=\"SameValue\"><a href=\"https://tc39.es/ecma262/#sec-samevalue\">SameValue</a></emu-xref>, <code>+</code><var>x</var> and <code>-</code><var>x</var> where <var>x</var> is 0 will be matched with <emu-xref aoid=\"SameValueZero\"><a href=\"https://tc39.es/ecma262/#sec-samevaluezero\">SameValueZero</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-relational-pattern-matches\" type=\"sdo\" aoid=\"RelationalPatternMatches\">\n      <h1><span class=\"secnum\">30.1.13</span> Runtime Semantics: RelationalPatternMatches</h1>\n      <p>The <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"https://tc39.es/ecma262/#sec-algorithm-conventions-syntax-directed-operations\">syntax-directed operation</a></emu-xref> RelationalPatternMatches takes argument <var>subject</var> (an <emu-xref href=\"#sec-ecmascript-language-types\" id=\"_ref_140\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and returns either a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">normal completion containing</a></emu-xref> a Boolean or an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>. It is defined piecewise over the following productions:</p>\n      <emu-grammar><emu-production name=\"RelationalPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalPattern\">RelationalPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cpk601fr\" id=\"prod-HIh36vwy\">\n        <emu-t>&lt;</emu-t>\n        <emu-nt id=\"_ref_417\"><a href=\"#prod-PatternMatchingRelationalExpression\">PatternMatchingRelationalExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>subject</var><emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type\">is not a String</a></emu-xref>, a Number or a BigInt, return <emu-val>false</emu-val>.</li><li>Let <var>expr</var> be the <emu-nt><a href=\"https://tc39.es/ecma262/#prod-Expression\">Expression</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"https://tc39.es/ecma262/#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt id=\"_ref_418\"><a href=\"#prod-PatternMatchingRelationalExpression\">PatternMatchingRelationalExpression</a></emu-nt>.</li><li>Let <var>ref</var> be ?&nbsp;<emu-xref aoid=\"Evaluation\"><a href=\"https://tc39.es/ecma262/#sec-evaluation\" class=\"e-user-code\">Evaluation</a></emu-xref> of <var>expr</var>.</li><li>Let <var>value</var> be ?&nbsp;<emu-xref aoid=\"GetValue\"><a href=\"https://tc39.es/ecma262/#sec-getvalue\" class=\"e-user-code\">GetValue</a></emu-xref>(<var>ref</var>).</li><li>Let <var>r</var> be ?&nbsp;<emu-xref aoid=\"IsLessThan\"><a href=\"https://tc39.es/ecma262/#sec-islessthan\" class=\"e-user-code\">IsLessThan</a></emu-xref>(<var>subject</var>, <var>value</var>, <emu-val>true</emu-val>).</li><li>If <var>r</var> is <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <var>r</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalPattern\">RelationalPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fizzqlnh\" id=\"prod-7OFxsw1H\">\n        <emu-t>&gt;</emu-t>\n        <emu-nt id=\"_ref_419\"><a href=\"#prod-PatternMatchingRelationalExpression\">PatternMatchingRelationalExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>subject</var><emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type\">is not a String</a></emu-xref>, a Number or a BigInt, return <emu-val>false</emu-val>.</li><li>Let <var>expr</var> be the <emu-nt><a href=\"https://tc39.es/ecma262/#prod-Expression\">Expression</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"https://tc39.es/ecma262/#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt id=\"_ref_420\"><a href=\"#prod-PatternMatchingRelationalExpression\">PatternMatchingRelationalExpression</a></emu-nt>.</li><li>Let <var>ref</var> be ?&nbsp;<emu-xref aoid=\"Evaluation\"><a href=\"https://tc39.es/ecma262/#sec-evaluation\" class=\"e-user-code\">Evaluation</a></emu-xref> of <var>expr</var>.</li><li>Let <var>value</var> be ?&nbsp;<emu-xref aoid=\"GetValue\"><a href=\"https://tc39.es/ecma262/#sec-getvalue\" class=\"e-user-code\">GetValue</a></emu-xref>(<var>ref</var>).</li><li>Let <var>r</var> be ?&nbsp;<emu-xref aoid=\"IsLessThan\"><a href=\"https://tc39.es/ecma262/#sec-islessthan\" class=\"e-user-code\">IsLessThan</a></emu-xref>(<var>value</var>, <var>subject</var>, <emu-val>false</emu-val>).</li><li>If <var>r</var> is <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <var>r</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalPattern\">RelationalPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"wcfltxip\" id=\"prod-06obvqDG\">\n        <emu-t>&lt;=</emu-t>\n        <emu-nt id=\"_ref_421\"><a href=\"#prod-PatternMatchingRelationalExpression\">PatternMatchingRelationalExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>subject</var><emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type\">is not a String</a></emu-xref>, a Number or a BigInt, return <emu-val>false</emu-val>.</li><li>Let <var>expr</var> be the <emu-nt><a href=\"https://tc39.es/ecma262/#prod-Expression\">Expression</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"https://tc39.es/ecma262/#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt id=\"_ref_422\"><a href=\"#prod-PatternMatchingRelationalExpression\">PatternMatchingRelationalExpression</a></emu-nt>.</li><li>Let <var>ref</var> be ?&nbsp;<emu-xref aoid=\"Evaluation\"><a href=\"https://tc39.es/ecma262/#sec-evaluation\" class=\"e-user-code\">Evaluation</a></emu-xref> of <var>expr</var>.</li><li>Let <var>value</var> be ?&nbsp;<emu-xref aoid=\"GetValue\"><a href=\"https://tc39.es/ecma262/#sec-getvalue\" class=\"e-user-code\">GetValue</a></emu-xref>(<var>ref</var>).</li><li>Let <var>r</var> be ?&nbsp;<emu-xref aoid=\"IsLessThan\"><a href=\"https://tc39.es/ecma262/#sec-islessthan\" class=\"e-user-code\">IsLessThan</a></emu-xref>(<var>subject</var>, <var>value</var>, <emu-val>true</emu-val>).</li><li>If <var>r</var> is either <emu-val>true</emu-val> or <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalPattern\">RelationalPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"p9dtsxo3\" id=\"prod-RHBOL0Pm\">\n        <emu-t>&gt;=</emu-t>\n        <emu-nt id=\"_ref_423\"><a href=\"#prod-PatternMatchingRelationalExpression\">PatternMatchingRelationalExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>subject</var><emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type\">is not a String</a></emu-xref>, a Number or a BigInt, return <emu-val>false</emu-val>.</li><li>Let <var>expr</var> be the <emu-nt><a href=\"https://tc39.es/ecma262/#prod-Expression\">Expression</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"https://tc39.es/ecma262/#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt id=\"_ref_424\"><a href=\"#prod-PatternMatchingRelationalExpression\">PatternMatchingRelationalExpression</a></emu-nt>.</li><li>Let <var>ref</var> be ?&nbsp;<emu-xref aoid=\"Evaluation\"><a href=\"https://tc39.es/ecma262/#sec-evaluation\" class=\"e-user-code\">Evaluation</a></emu-xref> of <var>expr</var>.</li><li>Let <var>value</var> be ?&nbsp;<emu-xref aoid=\"GetValue\"><a href=\"https://tc39.es/ecma262/#sec-getvalue\" class=\"e-user-code\">GetValue</a></emu-xref>(<var>ref</var>).</li><li>Let <var>r</var> be ?&nbsp;<emu-xref aoid=\"IsLessThan\"><a href=\"https://tc39.es/ecma262/#sec-islessthan\" class=\"e-user-code\">IsLessThan</a></emu-xref>(<var>value</var>, <var>subject</var>, <emu-val>false</emu-val>).</li><li>If <var>r</var> is either <emu-val>true</emu-val> or <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalPattern\">RelationalPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ofwypd4t\" id=\"prod-yy5yPHTl\">\n        <emu-t>instanceof</emu-t>\n        <emu-nt id=\"_ref_425\"><a href=\"#prod-PatternMatchingMemberExpression\">PatternMatchingMemberExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>expr</var> be the <emu-nt><a href=\"https://tc39.es/ecma262/#prod-Expression\">Expression</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"https://tc39.es/ecma262/#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt id=\"_ref_426\"><a href=\"#prod-PatternMatchingMemberExpression\">PatternMatchingMemberExpression</a></emu-nt>.</li><li>Let <var>ref</var> be ?&nbsp;<emu-xref aoid=\"Evaluation\"><a href=\"https://tc39.es/ecma262/#sec-evaluation\" class=\"e-user-code\">Evaluation</a></emu-xref> of <var>expr</var>.</li><li>Let <var>value</var> be ?&nbsp;<emu-xref aoid=\"GetValue\"><a href=\"https://tc39.es/ecma262/#sec-getvalue\" class=\"e-user-code\">GetValue</a></emu-xref>(<var>ref</var>).</li><li>Return ?&nbsp;<emu-xref aoid=\"InstanceofOperator\"><a href=\"https://tc39.es/ecma262/#sec-instanceofoperator\" class=\"e-user-code\">InstanceofOperator</a></emu-xref>(<var>subject</var>, <var>value</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalPattern\">RelationalPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"co-9ob3a\" id=\"prod-4m0pop5D\">\n        <emu-t>in</emu-t>\n        <emu-nt id=\"_ref_427\"><a href=\"#prod-PatternMatchingMemberExpression\">PatternMatchingMemberExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>subject</var> is not a <emu-xref href=\"#sec-object-type\"><a href=\"https://tc39.es/ecma262/#sec-object-type\">property key</a></emu-xref>, return <emu-val>false</emu-val>.</li><li>Let <var>expr</var> be the <emu-nt><a href=\"https://tc39.es/ecma262/#prod-Expression\">Expression</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"https://tc39.es/ecma262/#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt id=\"_ref_428\"><a href=\"#prod-PatternMatchingMemberExpression\">PatternMatchingMemberExpression</a></emu-nt>.</li><li>Let <var>ref</var> be ?&nbsp;<emu-xref aoid=\"Evaluation\"><a href=\"https://tc39.es/ecma262/#sec-evaluation\" class=\"e-user-code\">Evaluation</a></emu-xref> of <var>expr</var>.</li><li>Let <var>value</var> be ?&nbsp;<emu-xref aoid=\"GetValue\"><a href=\"https://tc39.es/ecma262/#sec-getvalue\" class=\"e-user-code\">GetValue</a></emu-xref>(<var>ref</var>).</li><li>If <var>value</var> <emu-xref href=\"#sec-object-type\"><a href=\"https://tc39.es/ecma262/#sec-object-type\">is not an Object</a></emu-xref>, return <emu-val>false</emu-val>.</li><li>Return ?&nbsp;<emu-xref aoid=\"HasProperty\"><a href=\"https://tc39.es/ecma262/#sec-hasproperty\" class=\"e-user-code\">HasProperty</a></emu-xref>(<var>value</var>, <var>subject</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalPattern\">RelationalPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qryc-uca\" id=\"prod--dRddGUV\">\n        <emu-t>==</emu-t>\n        <emu-nt id=\"_ref_429\"><a href=\"#prod-PatternMatchingRelationalExpression\">PatternMatchingRelationalExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>expr</var> be the <emu-nt><a href=\"https://tc39.es/ecma262/#prod-Expression\">Expression</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"https://tc39.es/ecma262/#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt id=\"_ref_430\"><a href=\"#prod-PatternMatchingRelationalExpression\">PatternMatchingRelationalExpression</a></emu-nt>.</li><li>Let <var>ref</var> be ?&nbsp;<emu-xref aoid=\"Evaluation\"><a href=\"https://tc39.es/ecma262/#sec-evaluation\" class=\"e-user-code\">Evaluation</a></emu-xref> of <var>expr</var>.</li><li>Let <var>value</var> be ?&nbsp;<emu-xref aoid=\"GetValue\"><a href=\"https://tc39.es/ecma262/#sec-getvalue\" class=\"e-user-code\">GetValue</a></emu-xref>(<var>ref</var>).</li><li>Return ?&nbsp;<emu-xref aoid=\"IsLooselyEqual\"><a href=\"https://tc39.es/ecma262/#sec-islooselyequal\" class=\"e-user-code\">IsLooselyEqual</a></emu-xref>(<var>subject</var>, <var>value</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalPattern\">RelationalPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"igncusy5\" id=\"prod-w4_WjGgR\">\n        <emu-t>!=</emu-t>\n        <emu-nt id=\"_ref_431\"><a href=\"#prod-PatternMatchingRelationalExpression\">PatternMatchingRelationalExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>expr</var> be the <emu-nt><a href=\"https://tc39.es/ecma262/#prod-Expression\">Expression</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"https://tc39.es/ecma262/#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt id=\"_ref_432\"><a href=\"#prod-PatternMatchingRelationalExpression\">PatternMatchingRelationalExpression</a></emu-nt>.</li><li>Let <var>ref</var> be ?&nbsp;<emu-xref aoid=\"Evaluation\"><a href=\"https://tc39.es/ecma262/#sec-evaluation\" class=\"e-user-code\">Evaluation</a></emu-xref> of <var>expr</var>.</li><li>Let <var>value</var> be ?&nbsp;<emu-xref aoid=\"GetValue\"><a href=\"https://tc39.es/ecma262/#sec-getvalue\" class=\"e-user-code\">GetValue</a></emu-xref>(<var>ref</var>).</li><li>Let <var>r</var> be ?&nbsp;<emu-xref aoid=\"IsLooselyEqual\"><a href=\"https://tc39.es/ecma262/#sec-islooselyequal\" class=\"e-user-code\">IsLooselyEqual</a></emu-xref>(<var>subject</var>, <var>value</var>).</li><li>If <var>r</var> is <emu-val>true</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalPattern\">RelationalPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ozo8rdvg\" id=\"prod-7Ze364jc\">\n        <emu-t>===</emu-t>\n        <emu-nt id=\"_ref_433\"><a href=\"#prod-PatternMatchingRelationalExpression\">PatternMatchingRelationalExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>expr</var> be the <emu-nt><a href=\"https://tc39.es/ecma262/#prod-Expression\">Expression</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"https://tc39.es/ecma262/#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt id=\"_ref_434\"><a href=\"#prod-PatternMatchingRelationalExpression\">PatternMatchingRelationalExpression</a></emu-nt>.</li><li>Let <var>ref</var> be ?&nbsp;<emu-xref aoid=\"Evaluation\"><a href=\"https://tc39.es/ecma262/#sec-evaluation\" class=\"e-user-code\">Evaluation</a></emu-xref> of <var>expr</var>.</li><li>Let <var>value</var> be ?&nbsp;<emu-xref aoid=\"GetValue\"><a href=\"https://tc39.es/ecma262/#sec-getvalue\" class=\"e-user-code\">GetValue</a></emu-xref>(<var>ref</var>).</li><li>Return <emu-xref aoid=\"IsStrictlyEqual\"><a href=\"https://tc39.es/ecma262/#sec-isstrictlyequal\">IsStrictlyEqual</a></emu-xref>(<var>subject</var>, <var>value</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalPattern\">RelationalPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"g2pgwtyq\" id=\"prod-jvHPj17C\">\n        <emu-t>!==</emu-t>\n        <emu-nt id=\"_ref_435\"><a href=\"#prod-PatternMatchingRelationalExpression\">PatternMatchingRelationalExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>expr</var> be the <emu-nt><a href=\"https://tc39.es/ecma262/#prod-Expression\">Expression</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"https://tc39.es/ecma262/#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt id=\"_ref_436\"><a href=\"#prod-PatternMatchingRelationalExpression\">PatternMatchingRelationalExpression</a></emu-nt>.</li><li>Let <var>ref</var> be ?&nbsp;<emu-xref aoid=\"Evaluation\"><a href=\"https://tc39.es/ecma262/#sec-evaluation\" class=\"e-user-code\">Evaluation</a></emu-xref> of <var>expr</var>.</li><li>Let <var>value</var> be ?&nbsp;<emu-xref aoid=\"GetValue\"><a href=\"https://tc39.es/ecma262/#sec-getvalue\" class=\"e-user-code\">GetValue</a></emu-xref>(<var>ref</var>).</li><li>Let <var>r</var> be <emu-xref aoid=\"IsStrictlyEqual\"><a href=\"https://tc39.es/ecma262/#sec-isstrictlyequal\">IsStrictlyEqual</a></emu-xref>(<var>subject</var>, <var>value</var>).</li><li>If <var>r</var> is <emu-val>true</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <emu-val>true</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-if-pattern-matches\" type=\"sdo\" aoid=\"IfPatternMatches\">\n      <h1><span class=\"secnum\">30.1.14</span> Runtime Semantics: IfPatternMatches</h1>\n      <p>The <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"https://tc39.es/ecma262/#sec-algorithm-conventions-syntax-directed-operations\">syntax-directed operation</a></emu-xref> IfPatternMatches takes no arguments and returns either a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">normal completion containing</a></emu-xref> a Boolean or an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>. It is defined piecewise over the following productions:</p>\n      <emu-grammar><emu-production name=\"IfPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfPattern\">IfPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"5soi6w1x\" id=\"prod-OcKu_40M\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>result</var> be ?&nbsp;<emu-xref aoid=\"Evaluation\"><a href=\"https://tc39.es/ecma262/#sec-evaluation\" class=\"e-user-code\">Evaluation</a></emu-xref> of <emu-nt><a href=\"https://tc39.es/ecma262/#prod-Expression\">Expression</a></emu-nt>.</li><li>Return <emu-xref aoid=\"ToBoolean\"><a href=\"https://tc39.es/ecma262/#sec-toboolean\">ToBoolean</a></emu-xref>(<var>result</var>).</li></ol></emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-combined-match-pattern-matches\" type=\"sdo\" aoid=\"CombinedMatchPatternMatches\">\n      <h1><span class=\"secnum\">30.1.15</span> Runtime Semantics: CombinedMatchPatternMatches</h1>\n      <p>The <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"https://tc39.es/ecma262/#sec-algorithm-conventions-syntax-directed-operations\">syntax-directed operation</a></emu-xref> CombinedMatchPatternMatches takes arguments <var>subject</var> (an <emu-xref href=\"#sec-ecmascript-language-types\" id=\"_ref_141\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and <var>cacheGroup</var> (a <emu-xref href=\"#sec-map-constructor\"><a href=\"https://tc39.es/ecma262/#sec-map-constructor\">%Map%</a></emu-xref>) and returns either a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">normal completion containing</a></emu-xref> a Boolean or an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>. It is defined piecewise over the following productions:</p>\n      <emu-grammar><emu-production name=\"CombinedMatchPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CombinedMatchPattern\">CombinedMatchPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4lmqei0y\" id=\"prod-TGrK8XcZ\">\n        <emu-nt id=\"_ref_437\"><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt>\n        <emu-t>and</emu-t>\n        <emu-nt id=\"_ref_438\"><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>leftMatches</var> be ?&nbsp;<emu-xref aoid=\"MatchPatternMatches\" id=\"_ref_142\"><a href=\"#sec-match-pattern-matches\" class=\"e-user-code\">MatchPatternMatches</a></emu-xref> of the first <emu-nt id=\"_ref_439\"><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt> with arguments <var>subject</var> and <var>cacheGroup</var>.</li><li>If <var>leftMatches</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>Return ?&nbsp;<emu-xref aoid=\"MatchPatternMatches\" id=\"_ref_143\"><a href=\"#sec-match-pattern-matches\" class=\"e-user-code\">MatchPatternMatches</a></emu-xref> of the second <emu-nt id=\"_ref_440\"><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt> with arguments <var>subject</var> and <var>cacheGroup</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CombinedMatchPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CombinedMatchPattern\">CombinedMatchPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9wuvrand\" id=\"prod-hYdo8hkU\">\n        <emu-nt id=\"_ref_441\"><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt>\n        <emu-t>or</emu-t>\n        <emu-nt id=\"_ref_442\"><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>leftMatches</var> be ?&nbsp;<emu-xref aoid=\"MatchPatternMatches\" id=\"_ref_144\"><a href=\"#sec-match-pattern-matches\" class=\"e-user-code\">MatchPatternMatches</a></emu-xref> of the first <emu-nt id=\"_ref_443\"><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt> with arguments <var>subject</var> and <var>cacheGroup</var>.</li><li>If <var>leftMatches</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ?&nbsp;<emu-xref aoid=\"MatchPatternMatches\" id=\"_ref_145\"><a href=\"#sec-match-pattern-matches\" class=\"e-user-code\">MatchPatternMatches</a></emu-xref> of the second <emu-nt id=\"_ref_444\"><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt> with arguments <var>subject</var> and <var>cacheGroup</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CombinedMatchPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CombinedMatchPattern\">CombinedMatchPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"_ieabtbd\" id=\"prod-_QtiVeJ1\">\n        <emu-t>not</emu-t>\n        <emu-nt id=\"_ref_445\"><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>matches</var> be ?&nbsp;<emu-xref aoid=\"MatchPatternMatches\" id=\"_ref_146\"><a href=\"#sec-match-pattern-matches\" class=\"e-user-code\">MatchPatternMatches</a></emu-xref> of <emu-nt id=\"_ref_446\"><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt> with arguments <var>subject</var> and <var>cacheGroup</var>.</li><li>If <var>matches</var> is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n  </emu-clause>\n\n  <emu-clause id=\"sec-match-expression\">\n    <h1><span class=\"secnum\">30.2</span> The <code>match</code> Expression</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"MatchExpression\" params=\"Yield, Await\" id=\"prod-MatchExpression\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-MatchExpression\">MatchExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"mvw1s1gm\" id=\"prod-jdvmig2z\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-gann>[no <emu-nt><a href=\"https://tc39.es/ecma262/#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>{</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_447\"><a href=\"#prod-MatchExpressionClauses\">MatchExpressionClauses</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"MatchExpressionClauses\" params=\"Yield, Await\" id=\"prod-MatchExpressionClauses\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-MatchExpressionClauses\">MatchExpressionClauses</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"m1oof3mn\" id=\"prod-zNwY0NcB\">\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_448\"><a href=\"#prod-MatchExpressionClause\">MatchExpressionClause</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"t_ii54i_\" id=\"prod-ZOtaLsb5\">\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_449\"><a href=\"#prod-MatchExpressionClauses\">MatchExpressionClauses</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_450\"><a href=\"#prod-MatchExpressionClause\">MatchExpressionClause</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"fbzye5as\" id=\"prod-inqwxZRh\">\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_451\"><a href=\"#prod-MatchExpressionClauses\">MatchExpressionClauses</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"https://tc39.es/ecma262/#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"vewutigw\" id=\"prod-iGULIx-t\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"https://tc39.es/ecma262/#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"MatchExpressionClause\" params=\"Yield, Await\" id=\"prod-MatchExpressionClause\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-MatchExpressionClause\">MatchExpressionClause</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ll2690mf\" id=\"prod-POLnbn8y\">\n        <emu-nt params=\"?Yield, ?Await\" id=\"_ref_452\"><a href=\"#prod-MatchPattern\">MatchPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"https://tc39.es/ecma262/#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n    <h2>Supplemental Syntax</h2>\n    <p>\n      When processing an instance of the production<br>\n      <emu-grammar><emu-production name=\"MatchExpression\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-MatchExpression\">MatchExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"y2kk1jwh\">\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>\n        <emu-t>{</emu-t>\n        <emu-nt id=\"_ref_453\"><a href=\"#prod-MatchExpressionClauses\">MatchExpressionClauses</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar><br>\n      the interpretation of <emu-nt><a href=\"https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt> is refined using the following grammar:\n    </p>\n    <emu-grammar type=\"definition\"><emu-production name=\"MatchHead\" id=\"prod-MatchHead\">\n    <emu-nt><a href=\"#prod-MatchHead\">MatchHead</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qvsbvt69\">\n        <emu-t>match</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"https://tc39.es/ecma262/#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n    <emu-note code=\"\"><span class=\"note\">Note</span><div class=\"note-contents\">\n      <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">const</span> result = match (value) {\n  { <span class=\"hljs-attr\">op</span>: <span class=\"hljs-string\">\"add\"</span>, <span class=\"hljs-keyword\">let</span> lhs, <span class=\"hljs-keyword\">let</span> rhs }: lhs + rhs,\n  { <span class=\"hljs-attr\">op</span>: <span class=\"hljs-string\">\"sub\"</span>, <span class=\"hljs-keyword\">let</span> lhs, <span class=\"hljs-keyword\">let</span> rhs }: lhs - rhs,\n  { <span class=\"hljs-attr\">op</span>: <span class=\"hljs-string\">\"mul\"</span>, <span class=\"hljs-keyword\">let</span> lhs, <span class=\"hljs-keyword\">let</span> rhs }: lhs * rhs,\n  { <span class=\"hljs-attr\">op</span>: <span class=\"hljs-string\">\"div\"</span>, <span class=\"hljs-keyword\">let</span> lhs, <span class=\"hljs-keyword\">let</span> rhs }: lhs / rhs,\n}</code></pre>\n    </div></emu-note>\n    <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n      <p>\n        If <a href=\"https://github.com/tc39/proposal-do-expressions\" target=\"_blank\" data-print-href=\"\">the <code>do</code> expression proposal</a> will never happen,\n        we will need to add a statement version of <emu-nt id=\"_ref_454\"><a href=\"#prod-MatchExpression\">MatchExpression</a></emu-nt>.\n      </p>\n      <pre><code class=\"javascript hljs\">match (value) {\n  { <span class=\"hljs-keyword\">let</span> x, <span class=\"hljs-keyword\">let</span> y, <span class=\"hljs-keyword\">let</span> z }: <span class=\"hljs-keyword\">do</span> {\n    <span class=\"hljs-keyword\">const</span> w = <span class=\"hljs-title function_\">average</span>(x, y, z);\n    <span class=\"hljs-keyword\">return</span> w * w;\n  },\n  <span class=\"hljs-comment\">// ...</span>\n}</code></pre>\n    </div></emu-note>\n    <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n      This feature can be replaced by the <emu-xref href=\"#sec-relational-operators\" id=\"_ref_17\"><a href=\"#sec-relational-operators\"><code>is</code> expression</a></emu-xref>.\n      The code example above can be written as:\n      <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">const</span> result =\n  value is { <span class=\"hljs-attr\">op</span>: <span class=\"hljs-string\">\"add\"</span>, <span class=\"hljs-keyword\">var</span> lhs, <span class=\"hljs-keyword\">var</span> rhs } ? lhs + rhs :\n  value is { <span class=\"hljs-attr\">op</span>: <span class=\"hljs-string\">\"sub\"</span>, <span class=\"hljs-keyword\">var</span> lhs, <span class=\"hljs-keyword\">var</span> rhs } ? lhs - rhs :\n  value is { <span class=\"hljs-attr\">op</span>: <span class=\"hljs-string\">\"mul\"</span>, <span class=\"hljs-keyword\">var</span> lhs, <span class=\"hljs-keyword\">var</span> rhs } ? lhs * rhs :\n  value is { <span class=\"hljs-attr\">op</span>: <span class=\"hljs-string\">\"div\"</span>, <span class=\"hljs-keyword\">var</span> lhs, <span class=\"hljs-keyword\">var</span> rhs } ? lhs / rhs :\n  (<span class=\"hljs-function\">() =&gt;</span> { <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TypeError</span>() })</code></pre>\n    </div></emu-note>\n    <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n      It is syntactically impossible to have a match expression that\n      <ul>\n        <li>has no clause.</li>\n        <li>has multiple <code>default</code> clauses.</li>\n        <li>the <code>default</code> clause is not the final clause.</li>\n      </ul>\n    </div></emu-note>\n    <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n      Rename <emu-nt><a href=\"https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt> to CoverCallExpressionAndAsyncArrowHeadAndMatchHead.\n    </div></emu-note>\n\n    <emu-clause id=\"sec-match-expression-static-semantics-early-errors\">\n        <h1><span class=\"secnum\">30.2.1</span> Static Semantics: Early Errors</h1>\n        <emu-grammar><emu-production name=\"MatchExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MatchExpression\">MatchExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"y2kk1jwh\">\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>\n        <emu-t>{</emu-t>\n        <emu-nt id=\"_ref_455\"><a href=\"#prod-MatchExpressionClauses\">MatchExpressionClauses</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n            <li><emu-nt><a href=\"https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt> <emu-xref href=\"#must-cover\"><a href=\"https://tc39.es/ecma262/#must-cover\">must cover</a></emu-xref> an <emu-nt id=\"_ref_456\"><a href=\"#prod-MatchHead\">MatchHead</a></emu-nt>.</li>\n        </ul>\n    </emu-clause>\n\n    <emu-clause id=\"sec-match-expression-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum\">30.2.2</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"MatchExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MatchExpression\">MatchExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"y2kk1jwh\">\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>\n        <emu-t>{</emu-t>\n        <emu-nt id=\"_ref_457\"><a href=\"#prod-MatchExpressionClauses\">MatchExpressionClauses</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>head</var> be the <emu-nt id=\"_ref_458\"><a href=\"#prod-MatchHead\">MatchHead</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"https://tc39.es/ecma262/#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>.</li><li>Let <var>subjectParseNode</var> be the <emu-nt><a href=\"https://tc39.es/ecma262/#prod-Expression\">Expression</a></emu-nt> of <var>head</var>.</li><li>Let <var>subjectRef</var> be the ?&nbsp;<emu-xref aoid=\"Evaluation\"><a href=\"https://tc39.es/ecma262/#sec-evaluation\" class=\"e-user-code\">Evaluation</a></emu-xref> of <var>subjectParseNode</var>.</li><li>Let <var>subject</var> be ?&nbsp;<emu-xref aoid=\"GetValue\"><a href=\"https://tc39.es/ecma262/#sec-getvalue\" class=\"e-user-code\">GetValue</a></emu-xref>(<var>subjectRef</var>).</li><li>Let <var>cacheGroup</var> be <emu-xref aoid=\"CreateMatchCache\" id=\"_ref_147\"><a href=\"#sec-creatematchcache\">CreateMatchCache</a></emu-xref>().</li><li>Let <var>matchCompletion</var> be <emu-xref aoid=\"Completion\"><a href=\"https://tc39.es/ecma262/#sec-completion-ao\">Completion</a></emu-xref>(<emu-xref aoid=\"MatchExpressionClausesEvaluation\" id=\"_ref_148\"><a href=\"#sec-match-expression-clauses-runtime-semantics-evaluation\" class=\"e-user-code\">MatchExpressionClausesEvaluation</a></emu-xref> of <emu-nt id=\"_ref_459\"><a href=\"#prod-MatchExpressionClauses\">MatchExpressionClauses</a></emu-nt> with arguments <var>subject</var> and <var>cacheGroup</var>).</li><li>Let <var>result</var> be <emu-xref aoid=\"Completion\"><a href=\"https://tc39.es/ecma262/#sec-completion-ao\">Completion</a></emu-xref>(<emu-xref aoid=\"FinishMatch\" id=\"_ref_149\"><a href=\"#sec-finish-match\" class=\"e-user-code\">FinishMatch</a></emu-xref>(<var>matchCompletion</var>, <var>cacheGroup</var>)).</li><li><emu-xref href=\"#assert\"><a href=\"https://tc39.es/ecma262/#assert\">Assert</a></emu-xref>: <var>result</var> is a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">normal completion</a></emu-xref> or an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>.</li><li>Return <var>result</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-match-expression-clauses-runtime-semantics-evaluation\" type=\"sdo\" aoid=\"MatchExpressionClausesEvaluation\">\n      <h1><span class=\"secnum\">30.2.3</span> Runtime Semantics: MatchExpressionClausesEvaluation</h1>\n      <p>The <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"https://tc39.es/ecma262/#sec-algorithm-conventions-syntax-directed-operations\">syntax-directed operation</a></emu-xref> MatchExpressionClausesEvaluation takes arguments <var>subject</var> (an <emu-xref href=\"#sec-ecmascript-language-types\" id=\"_ref_150\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and <var>cacheGroup</var> (a <emu-xref href=\"#sec-map-constructor\"><a href=\"https://tc39.es/ecma262/#sec-map-constructor\">%Map%</a></emu-xref>) and returns either a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">normal completion containing</a></emu-xref> either an <emu-xref href=\"#sec-ecmascript-language-types\" id=\"_ref_151\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref> or <emu-const>not-matched</emu-const>, or an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>. It is defined piecewise over the following productions:</p>\n      <emu-grammar><emu-production name=\"MatchExpressionClauses\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MatchExpressionClauses\">MatchExpressionClauses</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uzg4qni-\" id=\"prod-Rom5m7Ja\"><emu-nt id=\"_ref_460\"><a href=\"#prod-MatchExpressionClause\">MatchExpressionClause</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return ?&nbsp;<emu-xref aoid=\"MatchExpressionClauseEvaluation\" id=\"_ref_152\"><a href=\"#sec-match-expression-clause-runtime-semantics-evaluation\" class=\"e-user-code\">MatchExpressionClauseEvaluation</a></emu-xref> of <emu-nt id=\"_ref_461\"><a href=\"#prod-MatchExpressionClause\">MatchExpressionClause</a></emu-nt> with arguments <var>subject</var> and <var>cacheGroup</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MatchExpressionClauses\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MatchExpressionClauses\">MatchExpressionClauses</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"mxhusj8b\" id=\"prod-ndBX1W1V\">\n        <emu-nt id=\"_ref_462\"><a href=\"#prod-MatchExpressionClauses\">MatchExpressionClauses</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt id=\"_ref_463\"><a href=\"#prod-MatchExpressionClause\">MatchExpressionClause</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>result</var> be ?&nbsp;<emu-xref aoid=\"MatchExpressionClausesEvaluation\" id=\"_ref_153\"><a href=\"#sec-match-expression-clauses-runtime-semantics-evaluation\" class=\"e-user-code\">MatchExpressionClausesEvaluation</a></emu-xref> of <emu-nt id=\"_ref_464\"><a href=\"#prod-MatchExpressionClauses\">MatchExpressionClauses</a></emu-nt> with arguments <var>subject</var> and <var>cacheGroup</var>.</li><li>If <var>result</var> is an <emu-xref href=\"#sec-ecmascript-language-types\" id=\"_ref_154\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>, return <var>result</var>.</li><li><emu-xref href=\"#assert\"><a href=\"https://tc39.es/ecma262/#assert\">Assert</a></emu-xref>: <var>result</var> is <emu-const>not-matched</emu-const>.</li><li>Return ?&nbsp;<emu-xref aoid=\"MatchExpressionClauseEvaluation\" id=\"_ref_155\"><a href=\"#sec-match-expression-clause-runtime-semantics-evaluation\" class=\"e-user-code\">MatchExpressionClauseEvaluation</a></emu-xref> of <emu-nt id=\"_ref_465\"><a href=\"#prod-MatchExpressionClause\">MatchExpressionClause</a></emu-nt> with arguments <var>subject</var> and <var>cacheGroup</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MatchExpressionClauses\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MatchExpressionClauses\">MatchExpressionClauses</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"g1pmaudo\" id=\"prod--Nw1hDs1\">\n        <emu-nt id=\"_ref_466\"><a href=\"#prod-MatchExpressionClauses\">MatchExpressionClauses</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-Expression\">Expression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>result</var> be ?&nbsp;<emu-xref aoid=\"MatchExpressionClausesEvaluation\" id=\"_ref_156\"><a href=\"#sec-match-expression-clauses-runtime-semantics-evaluation\" class=\"e-user-code\">MatchExpressionClausesEvaluation</a></emu-xref> of <emu-nt id=\"_ref_467\"><a href=\"#prod-MatchExpressionClauses\">MatchExpressionClauses</a></emu-nt> with arguments <var>subject</var> and <var>cacheGroup</var>.</li><li>If <var>result</var> is an <emu-xref href=\"#sec-ecmascript-language-types\" id=\"_ref_157\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>, return <var>result</var>.</li><li><emu-xref href=\"#assert\"><a href=\"https://tc39.es/ecma262/#assert\">Assert</a></emu-xref>: <var>result</var> is <emu-const>not-matched</emu-const>.</li><li>Return ?&nbsp;<emu-xref aoid=\"Evaluation\"><a href=\"https://tc39.es/ecma262/#sec-evaluation\" class=\"e-user-code\">Evaluation</a></emu-xref> of <emu-nt><a href=\"https://tc39.es/ecma262/#prod-Expression\">Expression</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MatchExpressionClauses\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MatchExpressionClauses\">MatchExpressionClauses</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xhzralk2\" id=\"prod-QDysejGw\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-Expression\">Expression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return ?&nbsp;<emu-xref aoid=\"Evaluation\"><a href=\"https://tc39.es/ecma262/#sec-evaluation\" class=\"e-user-code\">Evaluation</a></emu-xref> of <emu-nt><a href=\"https://tc39.es/ecma262/#prod-Expression\">Expression</a></emu-nt>.</li></ol></emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-match-expression-clause-runtime-semantics-evaluation\" type=\"sdo\" aoid=\"MatchExpressionClauseEvaluation\">\n      <h1><span class=\"secnum\">30.2.4</span> Runtime Semantics: MatchExpressionClauseEvaluation</h1>\n      <p>The <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"https://tc39.es/ecma262/#sec-algorithm-conventions-syntax-directed-operations\">syntax-directed operation</a></emu-xref> MatchExpressionClauseEvaluation takes arguments <var>subject</var> (an <emu-xref href=\"#sec-ecmascript-language-types\" id=\"_ref_158\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and <var>cacheGroup</var> (a <emu-xref href=\"#sec-map-constructor\"><a href=\"https://tc39.es/ecma262/#sec-map-constructor\">%Map%</a></emu-xref>) and returns either a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">normal completion containing</a></emu-xref> either an <emu-xref href=\"#sec-ecmascript-language-types\" id=\"_ref_159\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref> or <emu-const>not-matched</emu-const>, or an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>. It is defined piecewise over the following productions:</p>\n      <emu-grammar><emu-production name=\"MatchExpressionClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MatchExpressionClause\">MatchExpressionClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pjnnj8-j\" id=\"prod-dgN-SNm3\">\n        <emu-nt id=\"_ref_468\"><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-Expression\">Expression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>matches</var> be ?&nbsp;<emu-xref aoid=\"MatchPatternMatches\" id=\"_ref_160\"><a href=\"#sec-match-pattern-matches\" class=\"e-user-code\">MatchPatternMatches</a></emu-xref> of <emu-nt id=\"_ref_469\"><a href=\"#prod-MatchPattern\">MatchPattern</a></emu-nt> with arguments <var>subject</var> and <var>cacheGroup</var>.</li><li>If <var>matches</var> is <emu-val>true</emu-val>, return ?&nbsp;<emu-xref aoid=\"Evaluation\"><a href=\"https://tc39.es/ecma262/#sec-evaluation\" class=\"e-user-code\">Evaluation</a></emu-xref> of <emu-nt><a href=\"https://tc39.es/ecma262/#prod-Expression\">Expression</a></emu-nt>.</li><li>Return <emu-const>not-matched</emu-const>.</li></ol></emu-alg>\n    </emu-clause>\n  </emu-clause>\n\n  <emu-clause id=\"sec-abstract-operations-for-pattern-matching\">\n    <h1><span class=\"secnum\">30.3</span> Abstract Operations for Pattern Matching</h1>\n\n    <emu-clause id=\"sec-invoke-custom-matcher\" type=\"abstract operation\" aoid=\"InvokeCustomMatcher\">\n      <h1><span class=\"secnum\">30.3.1</span> InvokeCustomMatcher ( <var>matcher</var>, <var>subject</var>, <var>cacheGroup</var>, <var>kind</var>, <var>receiver</var> )</h1>\n      <p>The abstract operation InvokeCustomMatcher takes arguments <var>matcher</var> (an <emu-xref href=\"#sec-ecmascript-language-types\" id=\"_ref_161\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), <var>subject</var> (an <emu-xref href=\"#sec-ecmascript-language-types\" id=\"_ref_162\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), <var>cacheGroup</var> (a <emu-xref href=\"#sec-map-constructor\"><a href=\"https://tc39.es/ecma262/#sec-map-constructor\">%Map%</a></emu-xref>), <var>kind</var> (<emu-const>boolean</emu-const> or <emu-const>list</emu-const>), and <var>receiver</var> (an <emu-xref href=\"#sec-ecmascript-language-types\" id=\"_ref_163\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and returns either a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">normal completion containing</a></emu-xref> either a Boolean or an <emu-xref href=\"#sec-iterator-records\"><a href=\"https://tc39.es/ecma262/#sec-iterator-records\">Iterator Record</a></emu-xref>, or an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <var>matcher</var> <emu-xref href=\"#sec-object-type\"><a href=\"https://tc39.es/ecma262/#sec-object-type\">is not an Object</a></emu-xref>, then<ol><li>If <var>kind</var> is <emu-const>boolean</emu-const>, return <emu-xref aoid=\"SameValueZero\"><a href=\"https://tc39.es/ecma262/#sec-samevaluezero\">SameValueZero</a></emu-xref>(<var>matcher</var>, <var>subject</var>).</li><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Let <var>f</var> be ?&nbsp;<emu-xref aoid=\"Get\"><a href=\"https://tc39.es/ecma262/#sec-get-o-p\" class=\"e-user-code\">Get</a></emu-xref>(<var>matcher</var>, <emu-xref href=\"#sec-well-known-symbols\" id=\"_ref_164\"><a href=\"#sec-well-known-symbols\">%Symbol.customMatcher%</a></emu-xref>).</li><li>If <var>f</var> is <emu-val>undefined</emu-val>, then<ol><li>If <var>kind</var> is <emu-const>boolean</emu-const>, return <emu-xref aoid=\"SameValueNonNumber\"><a href=\"https://tc39.es/ecma262/#sec-samevaluenonnumber\">SameValueNonNumber</a></emu-xref>(<var>matcher</var>, <var>subject</var>).</li><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>If <var>kind</var> is <emu-const>boolean</emu-const>, let <var>hint</var> be <emu-val>\"boolean\"</emu-val>.</li><li>Else, let <var>hint</var> be <emu-val>\"list\"</emu-val>.</li><li>Let <var>result</var> be ?&nbsp;<emu-xref aoid=\"Call\"><a href=\"https://tc39.es/ecma262/#sec-call\" class=\"e-user-code\">Call</a></emu-xref>(<var>f</var>, <var>matcher</var>, « <var>subject</var>, <var>hint</var>, <var>receiver</var>&nbsp;»).</li><li>If <var>result</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li id=\"step-invoke-custom-matcher\">If <var>kind</var> is <emu-const>boolean</emu-const>, return <emu-xref aoid=\"ToBoolean\"><a href=\"https://tc39.es/ecma262/#sec-toboolean\">ToBoolean</a></emu-xref>(<var>result</var>).</li><li>If <var>result</var> <emu-xref href=\"#sec-object-type\"><a href=\"https://tc39.es/ecma262/#sec-object-type\">is not an Object</a></emu-xref>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Perform ?&nbsp;<emu-xref aoid=\"GetIteratorCached\" id=\"_ref_165\"><a href=\"#sec-get-iterator-cached\" class=\"e-user-code\">GetIteratorCached</a></emu-xref>(<var>result</var>, <var>cacheGroup</var>).</li><li>Return <var>result</var>.</li></ol></emu-alg>\n      <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n        The <var>hint</var> parameter is not a consensus in the champion group yet. This design is to solve <a href=\"https://github.com/tc39/proposal-pattern-matching/issues/253\" target=\"_blank\" data-print-href=\"\">runtime performance concerns about custom matchers</a>.\n      </div></emu-note>\n      <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n        The <var>receiver</var> parameter is not a consensus in the champion group yet. This design is to keep the <code>this</code> value when calling the custom matchers. Not everyone in the champion group agrees we need to keep the <code>this</code> value.\n        <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">const</span> zero = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigNumber</span>(<span class=\"hljs-number\">0</span>);\nmatch (expr) {\n  zero.<span class=\"hljs-property\">equal</span>: <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'zero point matched.'</span>);\n  <span class=\"hljs-title class_\">BigNumber</span>: <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(expr.<span class=\"hljs-title function_\">toString</span>() + <span class=\"hljs-string\">' left.'</span>);\n}</code></pre>\n      </div></emu-note>\n      <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n        The <emu-xref aoid=\"ToBoolean\"><a href=\"https://tc39.es/ecma262/#sec-toboolean\">ToBoolean</a></emu-xref> in step <emu-xref href=\"#step-invoke-custom-matcher\" id=\"_ref_18\"><a href=\"#step-invoke-custom-matcher\">8</a></emu-xref> cause a strange behaviour around <a href=\"#sec-IsHTMLDDA-internal-slot-to-boolean\" target=\"_blank\"><var class=\"field\">[[IsHTMLDDA]]</var></a>.\n        <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">f</span>(<span class=\"hljs-params\"></span>) { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">all</span>; }\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">null</span> is f) {}\n<span class=\"hljs-comment\">// not match, by ToBoolean</span>\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">null</span> is <span class=\"hljs-title function_\">f</span>(<span class=\"hljs-keyword\">let</span> html, ...)) {}\n<span class=\"hljs-comment\">// match, because document.all is an object and has [Symbol.iterator].</span></code></pre>\n      </div></emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-validatecustommatcherhint\" type=\"abstract operation\" aoid=\"ValidateCustomMatcherHint\">\n        <h1><span class=\"secnum\">30.3.2</span> ValidateCustomMatcherHint ( <var>hint</var> [ , <var>kind</var> ] )</h1>\n        <p>The abstract operation ValidateCustomMatcherHint takes argument <var>hint</var> (an <emu-xref href=\"#sec-ecmascript-language-types\" id=\"_ref_166\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and optional argument <var>kind</var> (<emu-const>boolean</emu-const> or <emu-const>list</emu-const>) and returns either a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">normal completion containing</a></emu-xref> <emu-const>unused</emu-const> or a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">throw completion</a></emu-xref>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>hint</var> is not <emu-val>\"boolean\"</emu-val> or <emu-val>\"list\"</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>kind</var> is not present, return <emu-const>unused</emu-const>.</li><li>If <var>hint</var> is <emu-val>\"boolean\"</emu-val> and <var>kind</var> is <emu-const>list</emu-const>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>hint</var> is <emu-val>\"list\"</emu-val> and <var>kind</var> is <emu-const>boolean</emu-const>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <emu-const>unused</emu-const>.</li></ol></emu-alg>\n    </emu-clause>\n    <emu-note type=\"editor\" id=\"sec-pattern-match-cache-note\"><span class=\"note\"><a href=\"#sec-pattern-match-cache-note\">Editor's Note</a></span><div class=\"note-contents\">\n      The following sections describe how pattern matching matches the <var>subject</var> with a cache. Those sections use <emu-xref href=\"#sec-map-constructor\"><a href=\"https://tc39.es/ecma262/#sec-map-constructor\">%Map%</a></emu-xref>, <emu-xref href=\"#sec-set-constructor\"><a href=\"https://tc39.es/ecma262/#sec-set-constructor\">%Set%</a></emu-xref> and <emu-xref href=\"#sec-array-constructor\"><a href=\"https://tc39.es/ecma262/#sec-array-constructor\">%Array%</a></emu-xref> internally. This is for the convenience. Implementations don't have to actually create those data structures behind the scenes.\n      It is a spec bug if operations on cache objects trigger any user code.\n    </div></emu-note>\n\n    <emu-clause id=\"sec-creatematchcache\" type=\"abstract operation\" aoid=\"CreateMatchCache\">\n        <h1><span class=\"secnum\">30.3.3</span> CreateMatchCache ( )</h1>\n        <p>The abstract operation CreateMatchCache takes no arguments and returns a <emu-xref href=\"#sec-map-constructor\"><a href=\"https://tc39.es/ecma262/#sec-map-constructor\">%Map%</a></emu-xref>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>map</var> be !&nbsp;<emu-xref aoid=\"Construct\"><a href=\"https://tc39.es/ecma262/#sec-construct\">Construct</a></emu-xref>(<emu-xref href=\"#sec-map-constructor\"><a href=\"https://tc39.es/ecma262/#sec-map-constructor\">%Map%</a></emu-xref>).</li><li>Let <var>iteratorsToClose</var> be !&nbsp;<emu-xref aoid=\"Construct\"><a href=\"https://tc39.es/ecma262/#sec-construct\">Construct</a></emu-xref>(<emu-xref href=\"#sec-set-constructor\"><a href=\"https://tc39.es/ecma262/#sec-set-constructor\">%Set%</a></emu-xref>).</li><li>Perform !&nbsp;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"https://tc39.es/ecma262/#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>map</var>, <emu-val>\"IteratorsToClose\"</emu-val>, <var>iteratorsToClose</var>).</li><li>Return <var>map</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-get-match-cache\" type=\"abstract operation\" aoid=\"GetMatchCache\">\n      <h1><span class=\"secnum\">30.3.4</span> GetMatchCache ( <var>subject</var>, <var>cacheGroup</var> )</h1>\n      <p>The abstract operation GetMatchCache takes arguments <var>subject</var> (an <emu-xref href=\"#sec-ecmascript-language-types\" id=\"_ref_167\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and <var>cacheGroup</var> (a <emu-xref href=\"#sec-map-constructor\"><a href=\"https://tc39.es/ecma262/#sec-map-constructor\">%Map%</a></emu-xref>) and returns an <emu-xref href=\"#sec-ecmascript-language-types\" id=\"_ref_168\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"https://tc39.es/ecma262/#assert\">Assert</a></emu-xref>: <var>cacheGroup</var> is created by <emu-xref aoid=\"CreateMatchCache\" id=\"_ref_169\"><a href=\"#sec-creatematchcache\">CreateMatchCache</a></emu-xref> and used internally for pattern-matching.</li><li>If !&nbsp;<emu-xref aoid=\"Call\"><a href=\"https://tc39.es/ecma262/#sec-call\">Call</a></emu-xref>(<emu-xref href=\"#sec-map.prototype.has\"><a href=\"https://tc39.es/ecma262/#sec-map.prototype.has\">%Map.prototype.has%</a></emu-xref>, <var>cacheGroup</var>, « <var>subject</var>&nbsp;») is <emu-val>true</emu-val>, then<ol><li>Return !&nbsp;<emu-xref aoid=\"Call\"><a href=\"https://tc39.es/ecma262/#sec-call\">Call</a></emu-xref>(<emu-xref href=\"#sec-map.prototype.has\"><a href=\"https://tc39.es/ecma262/#sec-map.prototype.has\">%Map.prototype.get%</a></emu-xref>, <var>cacheGroup</var>, « <var>subject</var>&nbsp;»).</li></ol></li><li>Let <var>cache</var> be <emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"https://tc39.es/ecma262/#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-val>null</emu-val>).</li><li>Perform !&nbsp;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"https://tc39.es/ecma262/#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>cache</var>, <emu-val>\"Has\"</emu-val>, !&nbsp;<emu-xref aoid=\"Construct\"><a href=\"https://tc39.es/ecma262/#sec-construct\">Construct</a></emu-xref>(<emu-xref href=\"#sec-map-constructor\"><a href=\"https://tc39.es/ecma262/#sec-map-constructor\">%Map%</a></emu-xref>)).</li><li>Perform !&nbsp;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"https://tc39.es/ecma262/#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>cache</var>, <emu-val>\"Get\"</emu-val>, !&nbsp;<emu-xref aoid=\"Construct\"><a href=\"https://tc39.es/ecma262/#sec-construct\">Construct</a></emu-xref>(<emu-xref href=\"#sec-map-constructor\"><a href=\"https://tc39.es/ecma262/#sec-map-constructor\">%Map%</a></emu-xref>)).</li><li>Perform !&nbsp;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"https://tc39.es/ecma262/#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>cache</var>, <emu-val>\"Iterator\"</emu-val>, <emu-val>undefined</emu-val>).</li><li>Perform !&nbsp;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"https://tc39.es/ecma262/#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>cache</var>, <emu-val>\"IteratedValues\"</emu-val>, !&nbsp;<emu-xref aoid=\"ArrayCreate\"><a href=\"https://tc39.es/ecma262/#sec-arraycreate\">ArrayCreate</a></emu-xref>(0, <emu-val>null</emu-val>)).</li><li>Perform !&nbsp;<emu-xref aoid=\"Call\"><a href=\"https://tc39.es/ecma262/#sec-call\">Call</a></emu-xref>(<emu-xref href=\"#sec-map.prototype.has\"><a href=\"https://tc39.es/ecma262/#sec-map.prototype.has\">%Map.prototype.set%</a></emu-xref>, <var>cacheGroup</var>, « <var>subject</var>, <var>cache</var>&nbsp;»).</li><li>Return <var>cache</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-has-property-cached\" type=\"abstract operation\" aoid=\"HasPropertyCached\">\n      <h1><span class=\"secnum\">30.3.5</span> HasPropertyCached ( <var>subject</var>, <var>cacheGroup</var>, <var>propertyName</var> )</h1>\n      <p>The abstract operation HasPropertyCached takes arguments <var>subject</var> (an <emu-xref href=\"#sec-ecmascript-language-types\" id=\"_ref_170\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), <var>cacheGroup</var> (a <emu-xref href=\"#sec-map-constructor\"><a href=\"https://tc39.es/ecma262/#sec-map-constructor\">%Map%</a></emu-xref>), and <var>propertyName</var> (a <emu-xref href=\"#sec-object-type\"><a href=\"https://tc39.es/ecma262/#sec-object-type\">property key</a></emu-xref>) and returns either a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">normal completion containing</a></emu-xref> a Boolean or an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"https://tc39.es/ecma262/#assert\">Assert</a></emu-xref>: <var>cacheGroup</var> is created by <emu-xref aoid=\"CreateMatchCache\" id=\"_ref_171\"><a href=\"#sec-creatematchcache\">CreateMatchCache</a></emu-xref> and used internally for pattern-matching.</li><li>Let <var>cache</var> be !&nbsp;<emu-xref aoid=\"Get\"><a href=\"https://tc39.es/ecma262/#sec-get-o-p\">Get</a></emu-xref>(<emu-xref aoid=\"GetMatchCache\" id=\"_ref_172\"><a href=\"#sec-get-match-cache\">GetMatchCache</a></emu-xref>(<var>subject</var>, <var>cacheGroup</var>), <emu-val>\"Has\"</emu-val>).</li><li>Let <var>hasCache</var> be !&nbsp;<emu-xref aoid=\"Call\"><a href=\"https://tc39.es/ecma262/#sec-call\">Call</a></emu-xref>(<emu-xref href=\"#sec-map.prototype.has\"><a href=\"https://tc39.es/ecma262/#sec-map.prototype.has\">%Map.prototype.has%</a></emu-xref>, <var>cache</var>, « <var>propertyName</var>&nbsp;»).</li><li>If <var>hasCache</var> is <emu-val>true</emu-val>, return !&nbsp;<emu-xref aoid=\"Call\"><a href=\"https://tc39.es/ecma262/#sec-call\">Call</a></emu-xref>(<emu-xref href=\"#sec-map.prototype.has\"><a href=\"https://tc39.es/ecma262/#sec-map.prototype.has\">%Map.prototype.get%</a></emu-xref>, <var>cache</var>, « <var>propertyName</var>&nbsp;»).</li><li>Let <var>result</var> be ?&nbsp;<emu-xref aoid=\"HasProperty\"><a href=\"https://tc39.es/ecma262/#sec-hasproperty\" class=\"e-user-code\">HasProperty</a></emu-xref>(<var>subject</var>, <var>propertyName</var>).</li><li>Perform !&nbsp;<emu-xref aoid=\"Call\"><a href=\"https://tc39.es/ecma262/#sec-call\">Call</a></emu-xref>(<emu-xref href=\"#sec-map.prototype.has\"><a href=\"https://tc39.es/ecma262/#sec-map.prototype.has\">%Map.prototype.set%</a></emu-xref>, <var>cache</var>, « <var>propertyName</var>, <var>result</var>&nbsp;»).</li><li>Return <var>result</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-get-cached\" type=\"abstract operation\" aoid=\"GetCached\">\n      <h1><span class=\"secnum\">30.3.6</span> GetCached ( <var>subject</var>, <var>cacheGroup</var>, <var>propertyName</var> )</h1>\n      <p>The abstract operation GetCached takes arguments <var>subject</var> (an <emu-xref href=\"#sec-ecmascript-language-types\" id=\"_ref_173\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), <var>cacheGroup</var> (a <emu-xref href=\"#sec-map-constructor\"><a href=\"https://tc39.es/ecma262/#sec-map-constructor\">%Map%</a></emu-xref>), and <var>propertyName</var> (a <emu-xref href=\"#sec-object-type\"><a href=\"https://tc39.es/ecma262/#sec-object-type\">property key</a></emu-xref>) and returns either a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">normal completion containing</a></emu-xref> an <emu-xref href=\"#sec-ecmascript-language-types\" id=\"_ref_174\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref> or an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"https://tc39.es/ecma262/#assert\">Assert</a></emu-xref>: <var>cacheGroup</var> is created by <emu-xref aoid=\"CreateMatchCache\" id=\"_ref_175\"><a href=\"#sec-creatematchcache\">CreateMatchCache</a></emu-xref> and used internally for pattern-matching.</li><li>Let <var>cache</var> be !&nbsp;<emu-xref aoid=\"Get\"><a href=\"https://tc39.es/ecma262/#sec-get-o-p\">Get</a></emu-xref>(<emu-xref aoid=\"GetMatchCache\" id=\"_ref_176\"><a href=\"#sec-get-match-cache\">GetMatchCache</a></emu-xref>(<var>subject</var>, <var>cacheGroup</var>), <emu-val>\"Get\"</emu-val>).</li><li>Let <var>hasCache</var> be !&nbsp;<emu-xref aoid=\"Call\"><a href=\"https://tc39.es/ecma262/#sec-call\">Call</a></emu-xref>(<emu-xref href=\"#sec-map.prototype.has\"><a href=\"https://tc39.es/ecma262/#sec-map.prototype.has\">%Map.prototype.has%</a></emu-xref>, <var>cache</var>, « <var>propertyName</var>&nbsp;»).</li><li>If <var>hasCache</var> is <emu-val>true</emu-val>, return !&nbsp;<emu-xref aoid=\"Call\"><a href=\"https://tc39.es/ecma262/#sec-call\">Call</a></emu-xref>(<emu-xref href=\"#sec-map.prototype.has\"><a href=\"https://tc39.es/ecma262/#sec-map.prototype.has\">%Map.prototype.get%</a></emu-xref>, <var>cache</var>, « <var>propertyName</var>&nbsp;»).</li><li>Let <var>result</var> be ?&nbsp;<emu-xref aoid=\"Get\"><a href=\"https://tc39.es/ecma262/#sec-get-o-p\" class=\"e-user-code\">Get</a></emu-xref>(<var>subject</var>, <var>propertyName</var>).</li><li>Perform !&nbsp;<emu-xref aoid=\"Call\"><a href=\"https://tc39.es/ecma262/#sec-call\">Call</a></emu-xref>(<emu-xref href=\"#sec-map.prototype.has\"><a href=\"https://tc39.es/ecma262/#sec-map.prototype.has\">%Map.prototype.set%</a></emu-xref>, <var>cache</var>, « <var>propertyName</var>, <var>result</var>&nbsp;»).</li><li>Return <var>result</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-get-iterator-cached\" type=\"abstract operation\" aoid=\"GetIteratorCached\">\n      <h1><span class=\"secnum\">30.3.7</span> GetIteratorCached ( <var>subject</var>, <var>cacheGroup</var> )</h1>\n      <p>The abstract operation GetIteratorCached takes arguments <var>subject</var> (an <emu-xref href=\"#sec-ecmascript-language-types\" id=\"_ref_177\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and <var>cacheGroup</var> (a <emu-xref href=\"#sec-map-constructor\"><a href=\"https://tc39.es/ecma262/#sec-map-constructor\">%Map%</a></emu-xref>) and returns either a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">normal completion containing</a></emu-xref> an <emu-xref href=\"#sec-iterator-records\"><a href=\"https://tc39.es/ecma262/#sec-iterator-records\">Iterator Record</a></emu-xref> or an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"https://tc39.es/ecma262/#assert\">Assert</a></emu-xref>: <var>cacheGroup</var> is created by <emu-xref aoid=\"CreateMatchCache\" id=\"_ref_178\"><a href=\"#sec-creatematchcache\">CreateMatchCache</a></emu-xref> and used internally for pattern-matching.</li><li>Let <var>cache</var> be <emu-xref aoid=\"GetMatchCache\" id=\"_ref_179\"><a href=\"#sec-get-match-cache\">GetMatchCache</a></emu-xref>(<var>subject</var>, <var>cacheGroup</var>).</li><li>Let <var>iteratorRecordObject</var> be !&nbsp;<emu-xref aoid=\"Get\"><a href=\"https://tc39.es/ecma262/#sec-get-o-p\">Get</a></emu-xref>(<var>cache</var>, <emu-val>\"Iterator\"</emu-val>).</li><li>If <var>iteratorRecordObject</var> is not <emu-val>undefined</emu-val>, return <var>iteratorRecordObject</var>.<var class=\"field\">[[CachedIterator]]</var>.</li><li>Let <var>f</var> be ?&nbsp;<emu-xref aoid=\"GetCached\" id=\"_ref_180\"><a href=\"#sec-get-cached\" class=\"e-user-code\">GetCached</a></emu-xref>(<var>subject</var>, <var>cacheGroup</var>, <emu-xref href=\"#sec-well-known-symbols\" id=\"_ref_181\"><a href=\"#sec-well-known-symbols\">%Symbol.iterator%</a></emu-xref>).</li><li>Let <var>iteratorRecord</var> be ?&nbsp;<emu-xref aoid=\"GetIteratorFromMethod\"><a href=\"https://tc39.es/ecma262/#sec-getiteratorfrommethod\" class=\"e-user-code\">GetIteratorFromMethod</a></emu-xref>(<var>subject</var>, <var>f</var>).</li><li>Set <var>iteratorRecordObject</var> to <emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"https://tc39.es/ecma262/#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-val>null</emu-val>, « <var class=\"field\">[[CachedIterator]]</var>&nbsp;»).</li><li>Set <var>iteratorRecordObject</var>.<var class=\"field\">[[CachedIterator]]</var> to <var>iteratorRecord</var>.</li><li>Perform !&nbsp;<emu-xref aoid=\"Set\"><a href=\"https://tc39.es/ecma262/#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>cache</var>, <emu-val>\"Iterator\"</emu-val>, <var>iteratorRecordObject</var>, <emu-val>true</emu-val>).</li><li>Perform !&nbsp;<emu-xref aoid=\"Call\"><a href=\"https://tc39.es/ecma262/#sec-call\">Call</a></emu-xref>(<emu-xref href=\"#sec-set.prototype.add\"><a href=\"https://tc39.es/ecma262/#sec-set.prototype.add\">%Set.prototype.add%</a></emu-xref>, !&nbsp;<emu-xref aoid=\"Get\"><a href=\"https://tc39.es/ecma262/#sec-get-o-p\">Get</a></emu-xref>(<var>cacheGroup</var>, <emu-val>\"IteratorsToClose\"</emu-val>), « <var>iteratorRecordObject</var>&nbsp;»).</li><li>Return <var>iteratorRecordObject</var>.<var class=\"field\">[[CachedIterator]]</var>.</li></ol></emu-alg>\n      <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n        The <var class=\"field\">[[CachedIterator]]</var> field is only used in GetIteratorCached and CloseCachedIterators. <emu-xref href=\"#sec-iterator-records\"><a href=\"https://tc39.es/ecma262/#sec-iterator-records\">Iterator Records</a></emu-xref> are not <emu-xref href=\"#sec-ecmascript-language-types\" id=\"_ref_182\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language values</a></emu-xref> and cannot be Set on an object, therefore an object is created to wrap the <emu-xref href=\"#sec-iterator-records\"><a href=\"https://tc39.es/ecma262/#sec-iterator-records\">Iterator Record</a></emu-xref>.\n      </div></emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-iterator-step-cached\" type=\"abstract operation\" aoid=\"IteratorStepCached\">\n      <h1><span class=\"secnum\">30.3.8</span> IteratorStepCached ( <var>iterator</var>, <var>cacheGroup</var> )</h1>\n      <p>The abstract operation IteratorStepCached takes arguments <var>iterator</var> (an <emu-xref href=\"#sec-iterator-records\"><a href=\"https://tc39.es/ecma262/#sec-iterator-records\">Iterator Record</a></emu-xref>) and <var>cacheGroup</var> (a <emu-xref href=\"#sec-map-constructor\"><a href=\"https://tc39.es/ecma262/#sec-map-constructor\">%Map%</a></emu-xref>) and returns either a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">normal completion containing</a></emu-xref> either an <emu-xref href=\"#sec-ecmascript-language-types\" id=\"_ref_183\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref> or <emu-const>not-matched</emu-const>, or an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"https://tc39.es/ecma262/#assert\">Assert</a></emu-xref>: <var>cacheGroup</var> is created by <emu-xref aoid=\"CreateMatchCache\" id=\"_ref_184\"><a href=\"#sec-creatematchcache\">CreateMatchCache</a></emu-xref> and used internally for pattern-matching.</li><li>If <var>iterator</var>.<var class=\"field\">[[Done]]</var> is <emu-val>true</emu-val>, return <emu-const>not-matched</emu-const>.</li><li>Let <var>cache</var> be <emu-xref aoid=\"GetMatchCache\" id=\"_ref_185\"><a href=\"#sec-get-match-cache\">GetMatchCache</a></emu-xref>(<var>iterator</var>, <var>cacheGroup</var>).</li><li>Let <var>iteratedValues</var> be !&nbsp;<emu-xref aoid=\"Get\"><a href=\"https://tc39.es/ecma262/#sec-get-o-p\">Get</a></emu-xref>(<var>cache</var>, <emu-val>\"IteratedValues\"</emu-val>).</li><li>Let <var>iteratorResult</var> be <emu-xref aoid=\"Completion\"><a href=\"https://tc39.es/ecma262/#sec-completion-ao\">Completion</a></emu-xref>(<emu-xref aoid=\"IteratorStep\"><a href=\"https://tc39.es/ecma262/#sec-iteratorstep\" class=\"e-user-code\">IteratorStep</a></emu-xref>(<var>iterator</var>)).</li><li>If <var>iteratorResult</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iterator</var>.<var class=\"field\">[[Done]]</var> to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"https://tc39.es/ecma262/#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>iteratorResult</var>).</li><li>If <var>iteratorResult</var> is <emu-val>false</emu-val>, then<ol><li>Set <var>iterator</var>.<var class=\"field\">[[Done]]</var> to <emu-val>true</emu-val>.</li><li>Return <emu-const>not-matched</emu-const>.</li></ol></li><li>Let <var>value</var> be <emu-xref aoid=\"Completion\"><a href=\"https://tc39.es/ecma262/#sec-completion-ao\">Completion</a></emu-xref>(<emu-xref aoid=\"IteratorValue\"><a href=\"https://tc39.es/ecma262/#sec-iteratorvalue\" class=\"e-user-code\">IteratorValue</a></emu-xref>(<var>iteratorResult</var>)).</li><li>If <var>value</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iterator</var>.<var class=\"field\">[[Done]]</var> to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"https://tc39.es/ecma262/#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>value</var>).</li><li>Perform !&nbsp;<emu-xref aoid=\"Call\"><a href=\"https://tc39.es/ecma262/#sec-call\">Call</a></emu-xref>(<emu-xref href=\"#sec-array.prototype.push\"><a href=\"https://tc39.es/ecma262/#sec-array.prototype.push\">%Array.prototype.push%</a></emu-xref>, <var>iteratedValues</var>, « <var>value</var>&nbsp;»).</li><li>Return <var>value</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-get-iterator-nth-value-cached\" type=\"abstract operation\" aoid=\"GetIteratorNthValueCached\">\n      <h1><span class=\"secnum\">30.3.9</span> GetIteratorNthValueCached ( <var>iterator</var>, <var>cacheGroup</var>, <var>n</var> )</h1>\n      <p>The abstract operation GetIteratorNthValueCached takes arguments <var>iterator</var> (an <emu-xref href=\"#sec-iterator-records\"><a href=\"https://tc39.es/ecma262/#sec-iterator-records\">Iterator Record</a></emu-xref>), <var>cacheGroup</var> (a <emu-xref href=\"#sec-map-constructor\"><a href=\"https://tc39.es/ecma262/#sec-map-constructor\">%Map%</a></emu-xref>), and <var>n</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"https://tc39.es/ecma262/#integer\">integer</a></emu-xref>) and returns either a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">normal completion containing</a></emu-xref> either an <emu-xref href=\"#sec-ecmascript-language-types\" id=\"_ref_186\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref> or <emu-const>not-matched</emu-const>, or an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>NOTE: 0<sup>th</sup> is the first value.</li><li><emu-xref href=\"#assert\"><a href=\"https://tc39.es/ecma262/#assert\">Assert</a></emu-xref>: <var>cacheGroup</var> is created by <emu-xref aoid=\"CreateMatchCache\" id=\"_ref_187\"><a href=\"#sec-creatematchcache\">CreateMatchCache</a></emu-xref> and used internally for pattern-matching.</li><li>Let <var>iteratedValues</var> be !&nbsp;<emu-xref aoid=\"Get\"><a href=\"https://tc39.es/ecma262/#sec-get-o-p\">Get</a></emu-xref>(<emu-xref aoid=\"GetMatchCache\" id=\"_ref_188\"><a href=\"#sec-get-match-cache\">GetMatchCache</a></emu-xref>(<var>iterator</var>, <var>cacheGroup</var>), <emu-val>\"IteratedValues\"</emu-val>).</li><li>Let <var>nthItem</var> be !&nbsp;<var>iteratedValues</var>.<var class=\"field\">[[GetOwnProperty]]</var>(<var>n</var>).</li><li>If <var>nthItem</var> is not <emu-val>undefined</emu-val>, return <var>nthItem</var>.<var class=\"field\">[[Value]]</var>.</li><li><emu-xref href=\"#assert\"><a href=\"https://tc39.es/ecma262/#assert\">Assert</a></emu-xref>: !&nbsp;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"https://tc39.es/ecma262/#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>iteratedValues</var>) is <var>n</var>. For example, <var>iteratedValues</var> has 0 values, <var>n</var> should be 0 to get the first value from the iterator.</li><li>Return ?&nbsp;<emu-xref aoid=\"IteratorStepCached\" id=\"_ref_189\"><a href=\"#sec-iterator-step-cached\" class=\"e-user-code\">IteratorStepCached</a></emu-xref>(<var>iterator</var>, <var>cacheGroup</var>).</li></ol></emu-alg>\n      <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n        This abstract operation gets the n<sup>th</sup> (start from 0) value of the <var>iterator</var>, and runs <emu-xref aoid=\"IteratorStepCached\" id=\"_ref_190\"><a href=\"#sec-iterator-step-cached\">IteratorStepCached</a></emu-xref> if it is not cached in the <var>cacheGroup</var>.\n        For all <var>n</var> &gt; 1, this abstract operation expects these invariants:\n        <ul>\n          <li>The evaluation of <emu-nt id=\"_ref_470\"><a href=\"#prod-MatchList\">MatchList</a></emu-nt> always evaluates the <var>n</var>-1<sup>th</sup> value before evaluating the <var>n</var><sup>th</sup>.</li>\n          <li>If the <var>n</var><sup>th</sup> value is exists (<var class=\"field\">[[GetOwnProperty]]</var>(<var>n</var>) returns a <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref>), the <var>n</var>-1<sup>th</sup> value also exists.</li>\n          <li>If the <var>n</var><sup>th</sup> value does not exist and the <var>iterator</var>.<var class=\"field\">[[Done]]</var> is <emu-val>true</emu-val>, there is no further call with a bigger <var>n</var> parameter with the same <var>cacheGroup</var> and <var>iterator</var>.</li>\n        </ul>\n      </div></emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-finish-list-match\" type=\"abstract operation\" aoid=\"FinishListMatch\">\n      <h1><span class=\"secnum\">30.3.10</span> FinishListMatch ( <var>iterator</var>, <var>cacheGroup</var>, <var>expectedLength</var> )</h1>\n      <p>The abstract operation FinishListMatch takes arguments <var>iterator</var> (an <emu-xref href=\"#sec-iterator-records\"><a href=\"https://tc39.es/ecma262/#sec-iterator-records\">Iterator Record</a></emu-xref>), <var>cacheGroup</var> (a <emu-xref href=\"#sec-map-constructor\"><a href=\"https://tc39.es/ecma262/#sec-map-constructor\">%Map%</a></emu-xref>), and <var>expectedLength</var> (either a non-negative <emu-xref href=\"#integer\"><a href=\"https://tc39.es/ecma262/#integer\">integer</a></emu-xref>, <emu-const>not-matched</emu-const> or <emu-const>unlimited</emu-const>) and returns either a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">normal completion containing</a></emu-xref> a Boolean or an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <var>expectedLength</var> is <emu-const>not-matched</emu-const>, return <emu-val>false</emu-val>.</li><li>If <var>expectedLength</var> is <emu-const>unlimited</emu-const>, return <emu-val>true</emu-val>.</li><li>Let <var>cache</var> be <emu-xref aoid=\"GetMatchCache\" id=\"_ref_191\"><a href=\"#sec-get-match-cache\">GetMatchCache</a></emu-xref>(<var>iterator</var>, <var>cacheGroup</var>).</li><li>Let <var>cachedLength</var> be !&nbsp;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"https://tc39.es/ecma262/#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(! <emu-xref aoid=\"Get\"><a href=\"https://tc39.es/ecma262/#sec-get-o-p\">Get</a></emu-xref>(<var>cache</var>, <emu-val>\"IteratedValues\"</emu-val>)).</li><li>If <var>cachedLength</var> &gt; <var>expectedLength</var>, return <emu-val>false</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"https://tc39.es/ecma262/#assert\">Assert</a></emu-xref>: <var>cachedLength</var> is <var>expectedLength</var>.</li><li>If <var>iterator</var>.<var class=\"field\">[[Done]]</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Let <var>iteratorResult</var> be ?&nbsp;<emu-xref aoid=\"GetIteratorNthValueCached\" id=\"_ref_192\"><a href=\"#sec-get-iterator-nth-value-cached\" class=\"e-user-code\">GetIteratorNthValueCached</a></emu-xref>(<var>iterator</var>, <var>cacheGroup</var>, <var>expectedLength</var>).</li><li>If <var>iteratorResult</var> is <emu-const>not-matched</emu-const>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n        <p>This abstract operation is called the final step of the evaluation of <emu-nt id=\"_ref_471\"><a href=\"#prod-MatchList\">MatchList</a></emu-nt>.</p>\n        <p>\n          For example, when matching with <code>[]</code>, the <var>expectedLength</var> is 0.\n          This abstract operation checks if <var>cachedLength</var> is 0.\n          If the <var>iterator</var> is done, the match succeeds.\n          If the <var>iterator</var> is not done, it will try to get the 0<sup>th</sup> value from the iterator.\n          If there is a 0<sup>th</sup> value, the match fails.\n        </p>\n        <p>\n          Another example is when matching with <code>[1, 2, 3]</code>, the <var>expectedLength</var> is 3.\n          This abstract operation checks if <var>cachedLength</var> is 3.\n          If the <var>iterator</var> is done, the match succeeds.\n          If the <var>iterator</var> is not done, it will try to get the 3<sup>th</sup> (remember we start from the 0<sup>th</sup>) value from the iterator.\n          If there is a 3<sup>rd</sup> (which means the <var>cachedLength</var> is now 4) value, the match fails.\n        </p>\n      </div></emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-finish-match\" type=\"abstract operation\" aoid=\"FinishMatch\">\n      <h1><span class=\"secnum\">30.3.11</span> FinishMatch ( <var>matchCompletion</var>, <var>cacheGroup</var> )</h1>\n      <p>The abstract operation FinishMatch takes arguments <var>matchCompletion</var> (a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">Completion Record</a></emu-xref>) and <var>cacheGroup</var> (a <emu-xref href=\"#sec-map-constructor\"><a href=\"https://tc39.es/ecma262/#sec-map-constructor\">%Map%</a></emu-xref>) and returns a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">Completion Record</a></emu-xref>. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"https://tc39.es/ecma262/#assert\">Assert</a></emu-xref>: <var>cacheGroup</var> is created by <emu-xref aoid=\"CreateMatchCache\" id=\"_ref_193\"><a href=\"#sec-creatematchcache\">CreateMatchCache</a></emu-xref> and used internally for pattern-matching.</li><li>If <var>matchCompletion</var> is a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">normal completion</a></emu-xref> and <var>matchCompletion</var>.<var class=\"field\">[[Value]]</var> is <emu-const>not-matched</emu-const>, then<ol><li>Set <var>matchCompletion</var> to <emu-xref aoid=\"ThrowCompletion\"><a href=\"https://tc39.es/ecma262/#sec-throwcompletion\">ThrowCompletion</a></emu-xref>(a newly created <emu-val>TypeError</emu-val>).</li></ol></li><li>Let <var>iterators</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>value</var> of !&nbsp;<emu-xref aoid=\"Get\"><a href=\"https://tc39.es/ecma262/#sec-get-o-p\">Get</a></emu-xref>(<var>cacheGroup</var>, <emu-val>\"IteratorsToClose\"</emu-val>).<var class=\"field\">[[SetData]]</var>, do<ol><li><emu-xref href=\"#assert\"><a href=\"https://tc39.es/ecma262/#assert\">Assert</a></emu-xref>: <var>value</var>.<var class=\"field\">[[Value]]</var> is not <emu-const>empty</emu-const>.</li><li>Let <var>iteratorRecordObject</var> be !&nbsp;<emu-xref aoid=\"Get\"><a href=\"https://tc39.es/ecma262/#sec-get-o-p\">Get</a></emu-xref>(<var>value</var>.<var class=\"field\">[[Value]]</var>, <emu-val>\"IteratorsToClose\"</emu-val>).</li><li>Append <var>iteratorRecordObject</var>.<var class=\"field\">[[CachedIterator]]</var> to <var>iterators</var>.</li></ol></li><li>Let <var>errors</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>If <var>matchCompletion</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, append <var>matchCompletion</var>.<var class=\"field\">[[Value]]</var> to <var>errors</var>.</li><li>For each element <var>iterator</var> of <var>iterators</var>, do<ol><li>If <var>iterator</var>.<var class=\"field\">[[Done]]</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>closeResult</var> be <emu-xref aoid=\"Completion\"><a href=\"https://tc39.es/ecma262/#sec-completion-ao\">Completion</a></emu-xref>(<emu-xref aoid=\"IteratorClose\"><a href=\"https://tc39.es/ecma262/#sec-iteratorclose\" class=\"e-user-code\">IteratorClose</a></emu-xref>(<var>iterator</var>, <emu-xref aoid=\"NormalCompletion\"><a href=\"https://tc39.es/ecma262/#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>))).</li><li>If <var>closeResult</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, append <var>closeResult</var>.<var class=\"field\">[[Value]]</var> to <var>errors</var>.</li></ol></li></ol></li><li>If <var>errors</var> is not empty, then<ol><li>If length of <var>errors</var> is 1, return <emu-xref aoid=\"ThrowCompletion\"><a href=\"https://tc39.es/ecma262/#sec-throwcompletion\">ThrowCompletion</a></emu-xref>(<var>errors</var>[0]).</li><li>Let <var>error</var> be a newly created <emu-val>AggregateError</emu-val> object.</li><li>Perform !&nbsp;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"https://tc39.es/ecma262/#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>error</var>, \"errors\", PropertyDescriptor { <var class=\"field\">[[Configurable]]</var>: true, <var class=\"field\">[[Enumerable]]</var>: false, <var class=\"field\">[[Writable]]</var>: true, <var class=\"field\">[[Value]]</var>: <emu-xref aoid=\"CreateArrayFromList\"><a href=\"https://tc39.es/ecma262/#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(errors)&nbsp;}).</li><li>Return <emu-xref aoid=\"ThrowCompletion\"><a href=\"https://tc39.es/ecma262/#sec-throwcompletion\">ThrowCompletion</a></emu-xref>(<var>error</var>).</li></ol></li><li>Return <var>matchCompletion</var>.</li></ol></emu-alg>\n      <emu-note type=\"editor\"><span class=\"note\">Editor's Note</span><div class=\"note-contents\">\n        <p>If any error occurs when closing iterators, this abstract operation ignores the <var>matchCompletion</var> and returns an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>. This might be problematic when the <var>matchCompletion</var> is a Return <emu-xref aoid=\"Completion\"><a href=\"https://tc39.es/ecma262/#sec-completion-ao\">Completion</a></emu-xref>, Continue <emu-xref aoid=\"Completion\"><a href=\"https://tc39.es/ecma262/#sec-completion-ao\">Completion</a></emu-xref>, or a Break <emu-xref aoid=\"Completion\"><a href=\"https://tc39.es/ecma262/#sec-completion-ao\">Completion</a></emu-xref>.</p>\n        <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> iterator <span class=\"hljs-keyword\">of</span> iterators) {\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-title function_\">match</span>(<span class=\"hljs-params\">iterator</span>) {\n      [<span class=\"hljs-title class_\">String</span>, ...] and [...<span class=\"hljs-keyword\">let</span> list]: <span class=\"hljs-title function_\">callback</span>(list);\n      [...]: <span class=\"hljs-keyword\">continue</span>;\n    }\n  } <span class=\"hljs-keyword\">catch</span> {\n  }\n}</code></pre>\n        <p>\n          In the code example above,\n          if the second branch matches (and returns a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"https://tc39.es/ecma262/#sec-completion-record-specification-type\">continue completion</a></emu-xref>),\n          but the iterator throws an error when closing,\n          the <code>continue</code> will be ignored,\n          and the <code>catch</code> block will be evaluated.\n        </p>\n      </div></emu-note>\n    </emu-clause>\n  </emu-clause>\n</emu-clause>\n\n<emu-annex id=\"sec-grammar-summary\">\n  <h1><span class=\"secnum\">A</span> Grammar Summary</h1>\n\n  <emu-annex id=\"sec-expressions\" number=\"1\">\n    <h1><span class=\"secnum\">A.1</span> Expressions</h1>\n    <emu-production name=\"PrimaryExpression\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"mbzy6lvr\">\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt>\n    </emu-rhs>\n    <ins><emu-rhs a=\"xhniddxr\" id=\"prod-XSmG8KFu\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MatchExpression\">MatchExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs></ins>\n</emu-production>\n    <emu-production name=\"RelationalExpression\" params=\"In, Yield, Await\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-RelationalExpression\">RelationalExpression</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <ins><emu-rhs a=\"7pwutwad\" id=\"prod-EdmoEhta\">\n        <emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-RelationalExpression\">RelationalExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-gann>[no <emu-nt><a href=\"https://tc39.es/ecma262/#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>is</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MatchPattern\">MatchPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs></ins>\n</emu-production>\n    <emu-production name=\"MatchExpression\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-MatchExpression\">MatchExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"mvw1s1gm\" id=\"prod-jdvmig2z\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-gann>[no <emu-nt><a href=\"https://tc39.es/ecma262/#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>{</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MatchExpressionClauses\">MatchExpressionClauses</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"MatchExpressionClauses\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-MatchExpressionClauses\">MatchExpressionClauses</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"m1oof3mn\" id=\"prod-zNwY0NcB\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MatchExpressionClause\">MatchExpressionClause</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"t_ii54i_\" id=\"prod-ZOtaLsb5\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MatchExpressionClauses\">MatchExpressionClauses</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MatchExpressionClause\">MatchExpressionClause</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"fbzye5as\" id=\"prod-inqwxZRh\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MatchExpressionClauses\">MatchExpressionClauses</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"https://tc39.es/ecma262/#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"vewutigw\" id=\"prod-iGULIx-t\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"https://tc39.es/ecma262/#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"MatchExpressionClause\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-MatchExpressionClause\">MatchExpressionClause</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ll2690mf\" id=\"prod-POLnbn8y\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MatchPattern\">MatchPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"https://tc39.es/ecma262/#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n  </emu-annex>\n\n  <emu-annex id=\"sec-annex-match-patterns\" number=\"9\">\n    <h1><span class=\"secnum\">A.9</span> Patterns</h1>\n    <emu-production name=\"MatchPattern\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-MatchPattern\">MatchPattern</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"iwqh9pom\" id=\"prod-KUcUUgsn\">\n        <emu-t>(</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MatchPattern\">MatchPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"sgh9k7d8\" id=\"prod-NnfvhTBM\">\n        <emu-nt><a href=\"#prod-PrimitivePattern\">PrimitivePattern</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"vrxdrcn-\" id=\"prod--5M7srSm\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-VariableDeclarationPattern\">VariableDeclarationPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"y46cfqhm\" id=\"prod-dtu4srcz\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MemberExpressionPattern\">MemberExpressionPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"hgfidvsy\" id=\"prod-ZdrTiyJE\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ObjectPattern\">ObjectPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"x-p6r7m6\" id=\"prod-l2SLZUMT\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ArrayPattern\">ArrayPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"6m-vwede\" id=\"prod-en0pW04U\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-UnaryAlgebraicPattern\">UnaryAlgebraicPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"od8b4me6\" id=\"prod-LetWbF4Q\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-RelationalPattern\">RelationalPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"4brcj28h\" id=\"prod-GC1hibKU\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-IfPattern\">IfPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"_7vcs4wd\" id=\"prod-LAj8DpMp\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CombinedMatchPattern\">CombinedMatchPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"PrimitivePattern\">\n    <emu-nt><a href=\"#prod-PrimitivePattern\">PrimitivePattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"kul-a19e\" id=\"prod-lZG2aTTb\">\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-Literal\">Literal</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"e_otk8es\" id=\"prod-rqU7_eLx\">\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-NoSubstitutionTemplate\">NoSubstitutionTemplate</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"VariableDeclarationPattern\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-VariableDeclarationPattern\">VariableDeclarationPattern</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"97sngitm\" id=\"prod-u_-PVDpb\">\n        <emu-nt><a href=\"#prod-VarOrLetOrConst\">VarOrLetOrConst</a></emu-nt>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"https://tc39.es/ecma262/#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"VarOrLetOrConst\">\n    <emu-nt><a href=\"#prod-VarOrLetOrConst\">VarOrLetOrConst</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"5hawgwsl\">\n        <emu-t>var</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"0oi0tt1n\">\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-LetOrConst\">LetOrConst</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"MemberExpressionPattern\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-MemberExpressionPattern\">MemberExpressionPattern</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uxdrsrnt\" id=\"prod-G4gXeSPg\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PatternMatchingMemberExpression\">PatternMatchingMemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"k5qxkpt8\" id=\"prod-QmuUz1ZR\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PatternMatchingMemberExpression\">PatternMatchingMemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MatchList\">MatchList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ObjectPattern\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ObjectPattern\">ObjectPattern</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-nriCsL_r\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"rqbh5emu\" id=\"prod-EWVgVnxN\">\n        <emu-t>{</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MatchRestProperty\">MatchRestProperty</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"criubbam\" id=\"prod-UnQjidH-\">\n        <emu-t>{</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MatchPropertyList\">MatchPropertyList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t optional=\"\">,<emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"9huzo627\" id=\"prod-xpU3Tqeh\">\n        <emu-t>{</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MatchPropertyList\">MatchPropertyList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MatchRestProperty\">MatchRestProperty</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ArrayPattern\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ArrayPattern\">ArrayPattern</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"hiem5cht\" id=\"prod-mfwF-eVh\">\n        <emu-t>[</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-MatchList\">MatchList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"UnaryAlgebraicPattern\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-UnaryAlgebraicPattern\">UnaryAlgebraicPattern</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"tmtbe2kk\" id=\"prod-blOttJBG\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PatternMatchingUnaryAlgebraicExpression\">PatternMatchingUnaryAlgebraicExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"RelationalPattern\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-RelationalPattern\">RelationalPattern</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ueb64z-p\" id=\"prod-Ee4jkDah\">\n        <emu-t>&lt;</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PatternMatchingRelationalExpression\">PatternMatchingRelationalExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"_g7ioekk\" id=\"prod-Lt1ufiOJ\">\n        <emu-t>&gt;</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PatternMatchingRelationalExpression\">PatternMatchingRelationalExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"rl3zkfvt\" id=\"prod-MbwVHJm5\">\n        <emu-t>&lt;=</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PatternMatchingRelationalExpression\">PatternMatchingRelationalExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"h7t5jy7j\" id=\"prod-LIsJEGG_\">\n        <emu-t>&gt;=</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PatternMatchingRelationalExpression\">PatternMatchingRelationalExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"2x6y5fx8\" id=\"prod-sQz7HIlw\">\n        <emu-t>instanceof</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PatternMatchingMemberExpression\">PatternMatchingMemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"seylmk0k\" id=\"prod-wD-UQ48A\">\n        <emu-t>in</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PatternMatchingMemberExpression\">PatternMatchingMemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"gquawcje\" id=\"prod-LdC39dQb\">\n        <emu-t>==</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PatternMatchingRelationalExpression\">PatternMatchingRelationalExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"blybrpqt\" id=\"prod-WzM35PsW\">\n        <emu-t>!=</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PatternMatchingRelationalExpression\">PatternMatchingRelationalExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"ui_gas75\" id=\"prod-ofL39yLB\">\n        <emu-t>===</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PatternMatchingRelationalExpression\">PatternMatchingRelationalExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"vehxltqc\" id=\"prod-atFGrhH0\">\n        <emu-t>!==</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PatternMatchingRelationalExpression\">PatternMatchingRelationalExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"IfPattern\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-IfPattern\">IfPattern</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"sgbsfmyz\" id=\"prod-F0nSIfMB\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"https://tc39.es/ecma262/#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"CombinedMatchPattern\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-CombinedMatchPattern\">CombinedMatchPattern</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ao53rdyl\" id=\"prod-a_2cW9fV\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MatchPattern\">MatchPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>and</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MatchPattern\">MatchPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"nhqoi23u\" id=\"prod-BMX8uZDG\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MatchPattern\">MatchPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>or</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MatchPattern\">MatchPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"qryeevni\" id=\"prod-4IhLPseH\">\n        <emu-t>not</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MatchPattern\">MatchPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <p>\n      Object in pattern-matching:\n    </p>\n    <emu-production name=\"ObjectPattern\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ObjectPattern\">ObjectPattern</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-nriCsL_r\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"rqbh5emu\" id=\"prod-EWVgVnxN\">\n        <emu-t>{</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MatchRestProperty\">MatchRestProperty</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"criubbam\" id=\"prod-UnQjidH-\">\n        <emu-t>{</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MatchPropertyList\">MatchPropertyList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t optional=\"\">,<emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"9huzo627\" id=\"prod-xpU3Tqeh\">\n        <emu-t>{</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MatchPropertyList\">MatchPropertyList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MatchRestProperty\">MatchRestProperty</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"MatchRestProperty\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-MatchRestProperty\">MatchRestProperty</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"rfqjkmvm\" id=\"prod-NpqrpNeK\">\n        <emu-t>...</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MatchPattern\">MatchPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"MatchPropertyList\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-MatchPropertyList\">MatchPropertyList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3j9bvwgo\" id=\"prod-kRoJE3bP\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MatchProperty\">MatchProperty</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"jbgwhfq0\" id=\"prod-_cQam8pS\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MatchPropertyList\">MatchPropertyList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MatchProperty\">MatchProperty</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"MatchProperty\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-MatchProperty\">MatchProperty</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4z7kdpah\" id=\"prod-VxHnNNub\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"https://tc39.es/ecma262/#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t optional=\"\">?<emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"jy5wa0t2\" id=\"prod-GMqEmzsz\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"https://tc39.es/ecma262/#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t optional=\"\">?<emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MatchPattern\">MatchPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"17gzu0ni\" id=\"prod-GO0bgB3_\">\n        <emu-nt><a href=\"#prod-VarOrLetOrConst\">VarOrLetOrConst</a></emu-nt>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"https://tc39.es/ecma262/#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t optional=\"\">?<emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"w_78smtm\" id=\"prod-xrsY-24G\">\n        <emu-nt><a href=\"#prod-VarOrLetOrConst\">VarOrLetOrConst</a></emu-nt>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"https://tc39.es/ecma262/#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t optional=\"\">?<emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MatchPattern\">MatchPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <p>\n      Array in pattern-matching:\n    </p>\n    <emu-production name=\"ArrayPattern\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ArrayPattern\">ArrayPattern</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"hiem5cht\" id=\"prod-mfwF-eVh\">\n        <emu-t>[</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-MatchList\">MatchList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"MatchList\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-MatchList\">MatchList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ctjw6vnw\" id=\"prod-xnwBdNr0\">\n        <emu-nt optional=\"\"><a href=\"https://tc39.es/ecma262/#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-MatchRestElement\">MatchRestElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"q59bwnvc\" id=\"prod-5aJhmP6v\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MatchElementList\">MatchElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"f1xo1a3j\" id=\"prod-Qinb_JH_\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MatchElementList\">MatchElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt optional=\"\"><a href=\"https://tc39.es/ecma262/#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-MatchRestElement\">MatchRestElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"MatchRestElement\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-MatchRestElement\">MatchRestElement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uugqq7gf\" id=\"prod-fOlW2Nsd\">\n        <emu-t>...</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"rfqjkmvm\" id=\"prod-w_IWHbxt\">\n        <emu-t>...</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MatchPattern\">MatchPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"MatchElementList\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-MatchElementList\">MatchElementList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"mftbrreq\" id=\"prod-gb-onOzg\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MatchElisionElement\">MatchElisionElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"ubrozurn\" id=\"prod--q9atpfX\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MatchElementList\">MatchElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MatchElisionElement\">MatchElisionElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"MatchElisionElement\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-MatchElisionElement\">MatchElisionElement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"vcapw5oy\" id=\"prod-SwXPxa2u\">\n        <emu-nt optional=\"\"><a href=\"https://tc39.es/ecma262/#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MatchElement\">MatchElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"MatchElement\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-MatchElement\">MatchElement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"umiqybes\" id=\"prod-lKjcdi_o\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MatchPattern\">MatchPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t optional=\"\">?<emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-t>\n    </emu-rhs>\n</emu-production>\n    <p>\n      Limited <emu-nt><a href=\"https://tc39.es/ecma262/#prod-Expression\">Expression</a></emu-nt>s which is evaluated as an <emu-nt><a href=\"https://tc39.es/ecma262/#prod-Expression\">Expression</a></emu-nt> in pattern-matching:\n    </p>\n    <emu-production name=\"PatternMatchingMemberExpression\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-PatternMatchingMemberExpression\">PatternMatchingMemberExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"jo4mwtvh\">\n        <emu-t>this</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"yb7id2be\">\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-MetaProperty\">MetaProperty</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"dlsgch-w\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"https://tc39.es/ecma262/#prod-IdentifierReference\">IdentifierReference</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"9pdsslwb\">\n        <emu-t>super</emu-t>\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"kupcnmlh\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PatternMatchingMemberExpression\">PatternMatchingMemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"ks20qjkp\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PatternMatchingMemberExpression\">PatternMatchingMemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"qvqrwddh\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PatternMatchingMemberExpression\">PatternMatchingMemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>[</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"https://tc39.es/ecma262/#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"PatternMatchingUnaryAlgebraicExpression\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-PatternMatchingUnaryAlgebraicExpression\">PatternMatchingUnaryAlgebraicExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qi2orlde\">\n        <emu-t>+</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PatternMatchingMemberExpression\">PatternMatchingMemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"vdzozs8g\">\n        <emu-t>-</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PatternMatchingMemberExpression\">PatternMatchingMemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"1epwai_f\">\n        <emu-t>+</emu-t>\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-NumericLiteral\">NumericLiteral</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"u8w2p_fz\">\n        <emu-t>-</emu-t>\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-NumericLiteral\">NumericLiteral</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"PatternMatchingRelationalExpression\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-PatternMatchingRelationalExpression\">PatternMatchingRelationalExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"kul-a19e\">\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-Literal\">Literal</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"e_otk8es\">\n        <emu-nt><a href=\"https://tc39.es/ecma262/#prod-NoSubstitutionTemplate\">NoSubstitutionTemplate</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"uxdrsrnt\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PatternMatchingMemberExpression\">PatternMatchingMemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"tmtbe2kk\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PatternMatchingUnaryAlgebraicExpression\">PatternMatchingUnaryAlgebraicExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n  </emu-annex>\n</emu-annex><emu-annex id=\"sec-copyright-and-software-license\">\n      <h1><span class=\"secnum\">B</span> Copyright &amp; Software License</h1>\n      \n      <h2>Copyright Notice</h2>\n      <p>© 2024 Daniel Rosenwasser,Jack Works,Jordan Harband,Mark Cohen,Ross Kirsling,Tab Atkins</p>\n\n      <h2>Software License</h2>\n      <p>All Software contained in this document (\"Software\") is protected by copyright and is being made available under the \"BSD License\", included below. This Software may be subject to third party rights (rights from parties other than Ecma International), including patent rights, and no licenses under such third party rights are granted under this license even if the third party concerned is a member of Ecma International. SEE THE ECMA CODE OF CONDUCT IN PATENT MATTERS AVAILABLE AT <a href=\"https://ecma-international.org/memento/codeofconduct.htm\">https://ecma-international.org/memento/codeofconduct.htm</a> FOR INFORMATION REGARDING THE LICENSING OF PATENT CLAIMS THAT ARE REQUIRED TO IMPLEMENT ECMA INTERNATIONAL STANDARDS.</p>\n\n<p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p>\n\n<ol>\n  <li>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</li>\n  <li>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</li>\n  <li>Neither the name of the authors nor Ecma International may be used to endorse or promote products derived from this software without specific prior written permission.</li>\n</ol>\n\n<p>THIS SOFTWARE IS PROVIDED BY THE ECMA INTERNATIONAL \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL ECMA INTERNATIONAL BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>\n\n    </emu-annex>\n</div></body>"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.8408203125,
          "content": "{\n  \"private\": true,\n  \"name\": \"proposal-pattern-matching\",\n  \"description\": \"A repository for ECMAScript pattern matching proposals.\",\n  \"scripts\": {\n    \"start\": \"npm run build -- --watch\",\n    \"build\": \"SOURCE_DATE_EPOCH=$(git log -1 --pretty=\\\"format:%ct\\\" spec.emu) ecmarkup spec.emu index.html --load-biblio @tc39/ecma262-biblio --lint-spec --assets-dir assets --mark-effects\"\n  },\n  \"homepage\": \"https://github.com/tc39/proposal-pattern-matching#readme\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/tc39/proposal-pattern-matching.git\"\n  },\n  \"license\": \"MIT\",\n  \"devDependencies\": {\n    \"@tc39/ecma262-biblio\": \"^2.1.2775\",\n    \"ecmarkup\": \"^20.0.0\"\n  },\n  \"packageManager\": \"pnpm@9.9.0+sha512.60c18acd138bff695d339be6ad13f7e936eea6745660d4cc4a776d5247c540d0edee1a563695c183a66eb917ef88f2b4feb1fc25f32a7adcadc7aaf3438e99c1\"\n}\n"
        },
        {
          "name": "spec.emu",
          "type": "blob",
          "size": 133.9619140625,
          "content": "<!doctype html>\n<meta charset=\"utf8\">\n<pre class=\"metadata\">\ntitle: Pattern Matching\nstage: 1\ncontributors:\n  - Daniel Rosenwasser\n  - Jack Works\n  - Jordan Harband\n  - Mark Cohen\n  - Ross Kirsling\n  - Tab Atkins\n</pre>\n<style>\n  #welcome .secnum, [title=\"Welcome\"] .secnum {\n    display: none;\n  }\n  emu-note[code] > .note, #welcome > h1 {\n    font-size: 0;\n  }\n  emu-note[code] > .note::before {\n    content: \"Example\";\n    font-size: 18px;\n  }\n  emu-note[code] pre {\n    margin: 0;\n  }\n  pre.inline {\n    display: inline;\n  }\n  pre.inline code {\n    display: inline;\n    font-style: italic;\n    text-decoration: underline;\n  }\n  body.folded .fold, body.folded .todo {\n    display: none;\n  }\n  .show-ao-annotations a.e-user-code::before, .show-ao-annotations span.e-user-code::before {\n    display: inline-block;\n  }\n  #sec-todos {\n    border-left: 5px solid #ff6600;\n    padding: 0.5em;\n    background: #ffeedd;\n  }\n  emu-intro {\n    margin-top: 1em !important;\n  }\n  [role=\"button\"] {\n    cursor: pointer;\n  }\n</style>\n\n<emu-intro id=\"welcome\">\n  <h1>Welcome</h1>\n\n  <emu-intro id=\"sec-todos\">\n    <h1 class=\"attributes-tag\">TODOs</h1>\n    <ul>\n      <li>\n        Scope and bindings\n        <ul>\n          <li>Basic case.</li>\n          <li>Work with `for` loop (CreatePerIterationEnvironment).</li>\n          <li>Work with function parameters.</li>\n        </ul>\n      </li>\n    </ul>\n  </emu-intro>\n\n  <emu-intro id=\"sec-nav\">\n      <h1>Introduction</h1>\n      <p>This specification consists of the following parts:</p>\n      <ul>\n        <li><emu-xref href=\"#sec-pattern-matching\">Patterns in pattern matching</emu-xref></li>\n        <li>Interesting AOs:\n          <ul>\n            <li><emu-xref href=\"#sec-invoke-custom-matcher\" title></emu-xref></li>\n            <li><emu-xref href=\"#sec-pattern-match-cache-note\">Cache semantics</emu-xref></li>\n          </ul>\n        </li>\n        <li><emu-xref href=\"#sec-relational-operators\" title>The `is` expression</emu-xref></li>\n        <li><emu-xref href=\"#sec-match-expression\" title></emu-xref></li>\n        <li>\n          Non-trivial Built-in %Symbol.customMatcher% methods:\n          <ul>\n            <li><emu-xref href=\"#sec-function.prototype-%symbol.custommatcher%\" title></emu-xref></li>\n            <li><emu-xref href=\"#sec-regexp.prototype-%symbol.custommatcher%\" title></emu-xref></li>\n          </ul>\n        </li>\n        <li>(TODO) Scope analysis changes: <emu-xref href=\"#sec-syntax-directed-operations\" title></emu-xref></li>\n        <li>`new` semantics changes:\n          <emu-xref href=\"#sec-initializeinstance\"></emu-xref>,\n          <emu-xref href=\"#sec-weakly-hold-targets-processing-model\"></emu-xref>, and\n          <emu-xref href=\"#sec-runtime-semantics-classdefinitionevaluation\"></emu-xref>\n        </li>\n        <li>\n          Possible extensions:\n          <emu-xref href=\"#sec-for-in-and-for-of-statements\" title></emu-xref> and\n          <emu-xref href=\"#sec-try-statement\" title></emu-xref>\n        </li>\n      </ul>\n      <p>\n        Trivia built-in matchers are folded.\n        <a role=\"button\" id=\"expand\">Click to <span class=\"fold\">not</span> show the trivia sections.</a>\n      </p>\n      <script defer async src=\"./assets/expand.js\"></script>\n  </emu-intro>\n\n  <emu-intro id=\"sec-notes-layering\">\n    <h1>Layering</h1>\n    <p>The pattern-matching champion group designed this proposal with a layering approach. It does not mean the proposal is an MVP. The champion group wishes to ship the proposal as a whole when possible, but we can drop some features if there is strong pushback from the committee.</p>\n    <p>This approach allows the champion group to consider how all features combine and also how the proposal should behave if any of the features are missing.</p>\n    <p>A feature will have a note if</p>\n    <ul>\n      <li>it is a convenient feature instead of a necessary feature.</li>\n      <li>not all champion group members represent the hope to include it.</li>\n    </ul>\n  </emu-intro>\n</emu-intro>\n\n<emu-clause class=\"fold\" id=\"sec-overview\" number=\"4\">\n  <h1>Overview</h1>\n\n  <emu-clause id=\"sec-organization-of-this-specification\" number=\"5\">\n    <h1>Organization of This Specification</h1>\n    <p><ins>Clause <emu-xref href=\"#sec-pattern-matching\"></emu-xref> describes the pattern-matching feature.</ins></p>\n  </emu-clause>\n</emu-clause>\n\n<emu-clause class=\"fold\" id=\"sec-ecmascript-data-types-and-values\" aoid=\"Type\" number=\"6\">\n  <h1>ECMAScript Data Types and Values</h1>\n\n  <emu-clause id=\"sec-ecmascript-language-types\">\n    <h1>ECMAScript Language Types</h1>\n\n    <emu-clause id=\"sec-ecmascript-language-types-symbol-type\" number=\"5\">\n      <h1>The Symbol Type</h1>\n\n      <emu-clause id=\"sec-well-known-symbols\">\n        <h1>Well-Known Symbols</h1>\n        <emu-table id=\"table-1\" caption=\"Well-known Symbols\">\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Specification Name\n              </th>\n              <th>\n                [[Description]]\n              </th>\n              <th>\n                Value and Purpose\n              </th>\n            </tr>\n            <tr>\n              <td>\n                <ins><dfn>%Symbol.customMatcher%</dfn></ins>\n              </td>\n              <td>\n                <ins>`\"Symbol.customMatcher\"`</ins>\n              </td>\n              <td>\n                <ins>A method that performs custom pattern matching semantics. Called by the semantics of the pattern-matching features.</ins>\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </emu-table>\n      </emu-clause>\n    </emu-clause>\n\n    <emu-clause id=\"sec-object-internal-methods-and-internal-slots\" number=\"7\">\n      <h1>Object Internal Methods and Internal Slots</h1>\n      <p><ins>All objects have an internal slot named [[ConstructedBy]], which is a List of ECMAScript language values.\n        This List represents the origin of the object. Initially, it is an empty List.</ins></p>\n    </emu-clause>\n  </emu-clause>\n</emu-clause>\n\n<emu-clause id=\"sec-abstract-operations\" number=\"7\">\n  <h1>Abstract Operations</h1>\n\n  <emu-clause id=\"sec-operations-on-objects\" number=\"3\">\n    <h1>Operations on Objects</h1>\n\n    <emu-clause oldids=\"sec-initializeinstanceelements\" id=\"sec-initializeinstance\" type=\"abstract operation\" number=\"34\">\n      <h1>\n        InitializeInstanceElements (\n          _O_: an Object,\n          _constructor_: an ECMAScript function object,\n        ): either a normal completion containing ~unused~ or a throw completion\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-alg>\n        1. Let _methods_ be the value of _constructor_.[[PrivateMethods]].\n        1. For each PrivateElement _method_ of _methods_, do\n          1. Perform ? PrivateMethodOrAccessorAdd(_O_, _method_).\n        1. Let _fields_ be the value of _constructor_.[[Fields]].\n        1. For each element _fieldRecord_ of _fields_, do\n          1. Perform ? DefineField(_O_, _fieldRecord_).\n        1. <ins>Append _constructor_ to _O_.[[ConstructedBy]].</ins>\n        1. Return ~unused~.\n      </emu-alg>\n      <emu-note type=\"editor\">Rename this abstract operation to <dfn>InitializeInstance</dfn>.</emu-note>\n    </emu-clause>\n  </emu-clause>\n</emu-clause>\n\n<emu-clause class=\"todo\" id=\"sec-syntax-directed-operations\">\n  <h1>Syntax-Directed Operations</h1>\n\n  <emu-clause id=\"sec-syntax-directed-operations-scope-analysis\" number=\"2\">\n    <h1>Scope Analysis</h1>\n\n    <emu-clause id=\"sec-static-semantics-boundnames\" type=\"sdo\" number=\"1\">\n      <h1>Static Semantics: BoundNames ( ): a List of Strings</h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-note type=\"editor\">\n        TODO: Scope Analysis.\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-static-semantics-declarationpart\" type=\"sdo\" number=\"2\">\n      <h1>Static Semantics: DeclarationPart ( ): a Parse Node</h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-note type=\"editor\">\n        TODO: Scope Analysis.\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-static-semantics-isconstantdeclaration\" type=\"sdo\" number=\"3\">\n      <h1>Static Semantics: IsConstantDeclaration ( ): a Boolean</h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-note type=\"editor\">\n        TODO: Scope Analysis.\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-static-semantics-lexicallydeclarednames\" type=\"sdo\" number=\"4\">\n      <h1>Static Semantics: LexicallyDeclaredNames ( ): a List of Strings</h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-note type=\"editor\">\n        TODO: Scope Analysis.\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-static-semantics-lexicallyscopeddeclarations\" type=\"sdo\" number=\"5\">\n      <h1>Static Semantics: LexicallyScopedDeclarations ( ): a List of Parse Nodes</h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-note type=\"editor\">\n        TODO: Scope Analysis.\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-static-semantics-vardeclarednames\" type=\"sdo\" number=\"6\">\n      <h1>Static Semantics: VarDeclaredNames ( ): a List of Strings</h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-note type=\"editor\">\n        TODO: Scope Analysis.\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-static-semantics-varscopeddeclarations\" type=\"sdo\" number=\"7\">\n      <h1>Static Semantics: VarScopedDeclarations ( ): a List of Parse Nodes</h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-note type=\"editor\">\n        TODO: Scope Analysis.\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-static-semantics-toplevellexicallydeclarednames\" type=\"sdo\" number=\"8\">\n      <h1>Static Semantics: TopLevelLexicallyDeclaredNames ( ): a List of Strings</h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-note type=\"editor\">\n        TODO: Scope Analysis.\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-static-semantics-toplevellexicallyscopeddeclarations\" type=\"sdo\" number=\"9\">\n      <h1>Static Semantics: TopLevelLexicallyScopedDeclarations ( ): a List of Parse Nodes</h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-note type=\"editor\">\n        TODO: Scope Analysis.\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-static-semantics-toplevelvardeclarednames\" type=\"sdo\" number=\"10\">\n      <h1>Static Semantics: TopLevelVarDeclaredNames ( ): a List of Strings</h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-note type=\"editor\">\n        TODO: Scope Analysis.\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-static-semantics-toplevelvarscopeddeclarations\" type=\"sdo\" number=\"11\">\n      <h1>Static Semantics: TopLevelVarScopedDeclarations ( ): a List of Parse Nodes</h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-note type=\"editor\">\n        TODO: Scope Analysis.\n      </emu-note>\n    </emu-clause>\n  </emu-clause>\n\n  <emu-clause id=\"sec-syntax-directed-operations-miscellaneous\" number=\"6\">\n    <h1>Miscellaneous</h1>\n\n    <emu-clause id=\"sec-runtime-semantics-bindinginitialization\" type=\"sdo\" number=\"2\">\n      <h1>\n        Runtime Semantics: BindingInitialization (\n          _value_: an ECMAScript language value,\n          _environment_: an Environment Record or *undefined*,\n        ): either a normal completion containing ~unused~ or an abrupt completion\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-note type=\"editor\">\n        TODO: Scope Analysis.\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-runtime-semantics-iteratorbindinginitialization\" type=\"sdo\" number=\"3\">\n      <h1>\n        Runtime Semantics: IteratorBindingInitialization (\n          _iteratorRecord_: an Iterator Record,\n          _environment_: an Environment Record or *undefined*,\n        ): either a normal completion containing ~unused~ or an abrupt completion\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-note type=\"editor\">\n        TODO: Scope Analysis.\n      </emu-note>\n    </emu-clause>\n  </emu-clause>\n</emu-clause>\n\n<emu-clause class=\"fold\" id=\"sec-executable-code-and-execution-contexts\" number=\"9\">\n  <h1>Executable Code and Execution Contexts</h1>\n\n  <emu-clause id=\"sec-weakly-hold-targets-processing-model\" oldids=\"sec-weakref-processing-model\" number=\"10\">\n    <h1>Processing Model of <del>WeakRef and FinalizationRegistry</del><ins>weakly hold</ins> Targets</h1>\n\n    <emu-clause id=\"sec-weakly-hold-execution\" oldids=\"sec-weakref-execution\" number=\"3\">\n      <h1>Execution</h1>\n      <p>At any time, if a set of objects and/or symbols _S_ is not live, an ECMAScript implementation may perform the following steps atomically:</p>\n      <emu-alg>\n        1. For each element _value_ of _S_, do\n          1. For each WeakRef _ref_ such that _ref_.[[WeakRefTarget]] is _value_, do\n            1. Set _ref_.[[WeakRefTarget]] to ~empty~.\n          1. For each FinalizationRegistry _fg_ such that _fg_.[[Cells]] contains a Record _cell_ such that _cell_.[[WeakRefTarget]] is _value_, do\n            1. Set _cell_.[[WeakRefTarget]] to ~empty~.\n            1. Optionally, perform HostEnqueueFinalizationRegistryCleanupJob(_fg_).\n          1. For each WeakMap _map_ such that _map_.[[WeakMapData]] contains a Record _r_ such that _r_.[[Key]] is _value_, do\n            1. Set _r_.[[Key]] to ~empty~.\n            1. Set _r_.[[Value]] to ~empty~.\n          1. For each WeakSet _set_ such that _set_.[[WeakSetData]] contains _value_, do\n            1. Replace the element of _set_.[[WeakSetData]] whose value is _value_ with an element whose value is ~empty~.\n          1. <ins>For each Object _o_ such that _o_.[[ConstructedBy]] contains _value_, do</ins>\n            1. <ins>Remove _value_ from _o_.[[ConstructedBy]].</ins>\n      </emu-alg>\n    </emu-clause>\n  </emu-clause>\n</emu-clause>\n\n<emu-clause class=\"fold\" id=\"sec-ecmascript-language-lexical-grammar\" number=\"12\">\n  <h1>ECMAScript Language: Lexical Grammar</h1>\n\n  <emu-clause id=\"sec-automatic-semicolon-insertion\" number=\"10\">\n    <h1>Automatic Semicolon Insertion</h1>\n\n    <emu-clause id=\"sec-rules-of-automatic-semicolon-insertion\" number=\"1\">\n      <h1>Rules of Automatic Semicolon Insertion</h1>\n      <emu-note>\n        <p>The following are the additions of the restricted productions in the grammar:</p>\n        <emu-grammar>\n          RelationalExpression[In, Yield, Await] :\n            RelationalExpression [no LineTerminator here] `is` MatchPattern\n\n          MatchExpression[Yield, Await] :\n            CoverCallExpressionAndAsyncArrowHead[?Yield, ?Await] [no LineTerminator here] `{` MatchExpressionClauses[?Yield, ?Await] `;` `}`\n\n          MatchHead :\n            `match` [no LineTerminator here] `(` Expression `)`\n        </emu-grammar>\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-interesting-cases-of-automatic-semicolon-insertion\" number=\"3\">\n      <h1>Interesting Cases of Automatic Semicolon Insertion</h1>\n\n      <emu-clause id=\"sec-asi-cases-with-no-lineterminator-here\" number=\"2\">\n        <h1>Cases of Automatic Semicolon Insertion and “[no |LineTerminator| here]”</h1>\n\n        <emu-clause id=\"sec-no-lineterminator-here-automatic-semicolon-insertion-list\" number=\"1\">\n          <h1>List of Grammar Productions with Optional Operands and “[no |LineTerminator| here]”</h1>\n          <ul>\n            <li><ins>|MatchExpression|.</ins></li>\n          </ul>\n        </emu-clause>\n      </emu-clause>\n    </emu-clause>\n  </emu-clause>\n</emu-clause>\n\n<emu-clause id=\"sec-ecmascript-language-expressions\" number=\"13\">\n  <h1>ECMAScript Language: Expressions</h1>\n\n  <emu-clause id=\"sec-primary-expression\" number=\"2\">\n    <h1>Primary Expression</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\">\n      PrimaryExpression[Yield, Await] :\n        RegularExpressionLiteral\n        <ins>MatchExpression[?Yield, ?Await]</ins>\n    </emu-grammar>\n\n    <emu-clause id=\"sec-primary-expression-match-expression\" number=\"10\">\n      <h1>Match Expression</h1>\n      <p>See <emu-xref href=\"#sec-match-expression\" title></emu-xref> for <emu-grammar>PrimaryExpression : MatchExpression</emu-grammar></p>\n    </emu-clause>\n  </emu-clause>\n\n  <emu-clause id=\"sec-relational-operators\" number=\"10\">\n    <h1>Relational Operators</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\">\n      RelationalExpression[In, Yield, Await] :\n        <ins>RelationalExpression[?In, ?Yield, ?Await] [no LineTerminator here] `is` MatchPattern[?Yield, ?Await]</ins>\n    </emu-grammar>\n    <emu-note code>\n      <pre><code class=\"javascript\">\n        const isOk = response is { ok: true, status: &gt; 200 and &lt; 400 };\n      </code></pre>\n    </emu-note>\n    <emu-note type=\"editor\">\n      This feature can be replaced by <emu-xref href=\"#sec-match-expression\" title></emu-xref>.\n      The code example above can be written as:\n      <pre><code class=\"javascript\">\n        const isOk = match (response) {\n          { ok: true, status: &gt; 200 and &lt; 400 }: true,\n          default: false\n        };\n      </code></pre>\n    </emu-note>\n    <emu-note type=\"editor\">\n      We may need to use a non-contextual keyword like `~=` instead of a contextual keyword like `is`. See <a\n        href=\"https://github.com/waldemarhorwat/syntax/blob/main/contextual-keywords.md?rgh-link-date=2024-09-06T16%3A43%3A25Z\">waldemarhorwat/syntax@main/contextual-keywords.md</a>\n      and <a href=\"https://github.com/tc39/proposal-pattern-matching/issues/323\">Syntax effects on rest of the language</a>.\n    </emu-note>\n\n    <emu-clause id=\"sec-relational-operators-runtime-semantics-evaluation\" number=\"1\">\n      <h1>Runtime Semantics: Evaluation</h1>\n      <emu-grammar>\n        <ins>RelationalExpression : RelationalExpression `is` MatchPattern</ins>\n      </emu-grammar>\n      <emu-alg>\n        1. Let _lref_ be ? Evaluation of |RelationalExpression|.\n        1. Let _lval_ be ? GetValue(_lref_).\n        1. Let _cacheGroup_ be CreateMatchCache().\n        1. Let _matchCompletion_ be ? MatchPatternMatches of |MatchPattern| with argument _lval_ and _cacheGroup_.\n        1. If _matchCompletion_ is a normal completion, then\n          1. If _matchCompletion_.[[Value]] is ~not-matched~, set _matchCompletion_ to NormalCompletion(*false*).\n          1. Else, set _matchCompletion_ to NormalCompletion(*true*).\n        1. Let _result_ be Completion(FinishMatch(_matchCompletion_, _cacheGroup_)).\n        1. Assert: _result_ is a normal completion or an abrupt completion.\n        1. Return _result_.\n      </emu-alg>\n    </emu-clause>\n  </emu-clause>\n</emu-clause>\n\n<emu-clause id=\"sec-ecmascript-language-statements-and-declarations\" number=\"14\">\n  <h1>ECMAScript Language: Statements and Declarations</h1>\n  <h2>Syntax</h2>\n\n  <emu-clause id=\"sec-iteration-statements\" number=\"7\">\n    <h1>Iteration Statements</h1>\n\n    <emu-clause id=\"sec-for-in-and-for-of-statements\">\n      <h1>The `for`-`in`, `for`-`of`, and `for`-`await`-`of` Statements</h1>\n      <emu-note type=\"editor\">\n        It is possible to add pattern-matching to the `for` iteration statements. It might look like this:\n        <pre><code class=\"javascript\">\n          for (const response of responses) {\n            if (item is { ok: true, let body }) {\n            }\n          }\n          // can be written as\n          for (const response is { ok: true, let body } of responses) {\n          }\n          // or\n          for (const response of responses matches { ok: true, let body }) {\n          }\n        </code></pre>\n      </emu-note>\n    </emu-clause>\n  </emu-clause>\n\n  <emu-clause id=\"sec-try-statement\" number=\"14\">\n    <h1>The `try` Statement</h1>\n    <emu-note type=\"editor\">\n      It is possible to add pattern-matching to the `try` statement. It might look like this:\n      <pre><code class=\"javascript\">\n        try { }\n        catch (error) {\n          if (error is { message: /JSON/ }) { return null; }\n          throw error;\n        }\n        // can be written as\n        try { }\n        catch (error is { message: /JSON/ }) { return null; }\n        // unmatched error will be re-thrown.\n      </code></pre>\n    </emu-note>\n  </emu-clause>\n</emu-clause>\n\n<emu-clause id=\"sec-ecmascript-language-functions-and-classes\" number=\"15\">\n  <h1>ECMAScript Language: Functions and Classes</h1>\n\n  <emu-clause id=\"sec-class-definitions\" number=\"7\">\n    <h1>Class Definitions</h1>\n\n    <emu-clause id=\"sec-runtime-semantics-classdefinitionevaluation\" type=\"sdo\" number=\"14\">\n      <h1>\n        Runtime Semantics: ClassDefinitionEvaluation (\n          _classBinding_: a String or *undefined*,\n          _className_: a property key or a Private Name,\n        ): either a normal completion containing a function object or an abrupt completion\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-note type=\"editor\">\n        See <a href=\"https://github.com/tc39/ecma262/pull/3212/files\" target=\"_blank\">Editorial: call MakeClassConstructor on default class constructor</a>.\n      </emu-note>\n    </emu-clause>\n  </emu-clause>\n\n  <emu-clause class=\"fold\" id=\"sec-tail-position-calls\" number=\"10\">\n    <h1>Tail Position Calls</h1>\n\n    <emu-clause id=\"sec-static-semantics-hascallintailposition\" number=\"2\" type=\"sdo\">\n      <h1>\n        Static Semantics: HasCallInTailPosition (\n          _call_: a |CallExpression| Parse Node, a |MemberExpression| Parse Node, or an |OptionalChain| Parse Node,\n        ): a Boolean\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-grammar>\n        <ins>RelationalExpression : RelationalExpression `is` MatchPattern</ins>\n      </emu-grammar>\n      <emu-alg>\n        1. Return *false*.\n      </emu-alg>\n      <emu-grammar>\n        <ins>PrimaryExpression : MatchExpression</ins>\n      </emu-grammar>\n      <emu-alg>\n        1. Return HasCallInTailPosition of |MatchExpression| with argument _call_.\n      </emu-alg>\n      <emu-grammar>\n        <ins>MatchExpression : CoverCallExpressionAndAsyncArrowHead `{` MatchExpressionClauses `;` `}`</ins>\n      </emu-grammar>\n      <emu-alg>\n        1. Return HasCallInTailPosition of |MatchExpressionClauses| with argument _call_.\n      </emu-alg>\n      <emu-grammar>\n        <ins>MatchExpressionClauses : MatchExpressionClause</ins>\n      </emu-grammar>\n      <emu-alg>\n        1. Return HasCallInTailPosition of |MatchExpressionClause| with argument _call_.\n      </emu-alg>\n      <emu-grammar>\n        <ins>MatchExpressionClauses : MatchExpressionClauses `;` MatchExpressionClause</ins>\n      </emu-grammar>\n      <emu-alg>\n        1. Let _result_ be HasCallInTailPosition of |MatchExpressionClauses| with argument _call_.\n        1. If _result_ is *true*, return *true*.\n        1. Return HasCallInTailPosition of |MatchExpressionClause| with argument _call_.\n      </emu-alg>\n      <emu-grammar>\n        <ins>MatchExpressionClauses : MatchExpressionClauses `;` `default` `:` Expression</ins>\n      </emu-grammar>\n      <emu-alg>\n        1. Let _result_ be HasCallInTailPosition of |MatchExpressionClauses| with argument _call_.\n        1. If _result_ is *true*, return *true*.\n        1. Return HasCallInTailPosition of |Expression| with argument _call_.\n      </emu-alg>\n      <emu-grammar>\n        <ins>MatchExpressionClauses : `default` `:` Expression</ins>\n      </emu-grammar>\n      <emu-alg>\n        1. Return HasCallInTailPosition of |Expression| with argument _call_.\n      </emu-alg>\n      <emu-grammar>\n        <ins>MatchExpressionClause : MatchPattern `:` Expression</ins>\n      </emu-grammar>\n      <emu-alg>\n        1. Return HasCallInTailPosition of |Expression| with argument _call_.\n      </emu-alg>\n    </emu-clause>\n  </emu-clause>\n</emu-clause>\n\n<emu-clause id=\"sec-fundamental-objects\" number=\"20\">\n  <h1>Fundamental Objects</h1>\n\n  <emu-clause class=\"fold\" id=\"sec-object-objects\" number=\"1\">\n    <h1>Object Objects</h1>\n\n    <emu-clause id=\"sec-properties-of-the-object-constructor\" number=\"2\">\n      <h1>Properties of the Object Constructor</h1>\n\n      <emu-clause id=\"sec-object-%symbol.custommatcher%\" number=\"24\">\n        <h1>Object [ %Symbol.customMatcher% ] ( _subject_, _hint_ )</h1>\n        <p>This function performs the following steps when called:</p>\n        <emu-alg>\n          1. Perform ? ValidateCustomMatcherHint(_hint_, ~boolean~).\n          1. If _subject_ is not an Object, return *false*.\n          1. Return *true*.\n        </emu-alg>\n      </emu-clause>\n    </emu-clause>\n  </emu-clause>\n\n  <emu-clause id=\"sec-function-objects\" number=\"2\">\n    <h1>Function Objects</h1>\n\n    <emu-clause id=\"sec-properties-of-the-function-constructor\" number=\"2\">\n      <h1>Properties of the Function Constructor</h1>\n\n      <emu-clause id=\"sec-function-%symbol.custommatcher%\" number=\"2\">\n        <h1>Function [ %Symbol.customMatcher% ] ( _subject_, _hint_ )</h1>\n        <p>This function performs the following steps when called:</p>\n        <emu-alg>\n          1. Perform ? ValidateCustomMatcherHint(_hint_, ~boolean~).\n          1. Return IsCallable(_subject_).\n        </emu-alg>\n      </emu-clause>\n    </emu-clause>\n\n    <emu-clause id=\"sec-properties-of-the-function-prototype-object\" number=\"3\">\n      <h1>Properties of the Function Prototype Object</h1>\n\n      <emu-clause id=\"sec-function.prototype-%symbol.custommatcher%\" number=\"7\">\n        <h1>Function.prototype [ %Symbol.customMatcher% ] ( _subject_, _hint_, _receiver_ )</h1>\n        <p>This function performs the following steps when called:</p>\n        <emu-alg>\n          1. Perform ? ValidateCustomMatcherHint(_hint_).\n          1. Let _func_ be the *this* value.\n          1. If IsCallable(_func_) is false, throw a *TypeError* exception.\n          1. If _subject_.[[ConstructedBy]] contains _func_, return *true*.\n          1. If _func_ does not have a [[IsClassConstructor]] internal slot or _func_.[[IsClassConstructor]] is *false*, return ? Call(_func_, _receiver_, « _subject_, _hint_ »).\n          1. Return *false*.\n        </emu-alg>\n        <emu-note code><pre><code class=\"javascript\">\n          // For non-class functions.\n          [] is Array.isArray; // true, by Array.isArray(expr)\n\n          // For objects created by `new`, it uses private-field-like semantics.\n          class MyError extends Error {}\n          const myError = new MyError();\n          myError is MyError; // true\n          myError is Error; // true\n          Object.create(MyError.prototype) is MyError; // false\n\n          // Also works for normal functions\n          function ES5StyleClass() {}\n          new ES5StyleClass() is ES5StyleClass; // true\n          Object.create(ES5StyleClass.prototype) is ES5StyleClass; // false\n        </code></pre></emu-note>\n        <emu-note type=\"editor\">\n          <p>This does not work with ES5 style class inherit.</p>\n          <pre><code class=\"javascript\">\n            function MyError() {\n              Error.call(this);\n            }\n            MyError.prototype = Object.create(Error.prototype);\n            var error = new MyError();\n            error is MyError; // true\n            error is Error; // false\n          </code></pre>\n        </emu-note>\n        <emu-note type=\"editor\">\n          <p>Not everyone in the champion group agrees with private-field-like brand check semantics.</p>\n          <p>\n            There are\n            <a href=\"https://github.com/tc39/proposal-pattern-matching/pull/293#issuecomment-1725097699\" target=\"_blank\">performance concerns</a>,\n            <a href=\"https://github.com/tc39/proposal-pattern-matching/pull/293#issuecomment-1725097699\" target=\"_blank\">\"hackable\" concerns</a>, and\n            <a href=\"https://github.com/tc39/proposal-pattern-matching/pull/293#issuecomment-1725097699\" target=\"_blank\">interaction\n              with %Symbol.hasInstance% concerns</a>.\n          </p>\n          <p>Another approach is to use the `instanceof` semantics.</p>\n        </emu-note>\n      </emu-clause>\n    </emu-clause>\n  </emu-clause>\n\n  <emu-clause class=\"fold\" id=\"sec-boolean-objects\" number=\"3\">\n    <h1>Boolean Objects</h1>\n\n    <emu-clause id=\"sec-properties-of-the-boolean-constructor\" number=\"2\">\n      <h1>Properties of the Boolean Constructor</h1>\n\n      <emu-clause id=\"sec-boolean-%symbol.custommatcher%\" number=\"2\">\n        <h1>Boolean [ %Symbol.customMatcher% ] ( _subject_, _hint_ )</h1>\n        <p>This function performs the following steps when called:</p>\n        <emu-alg>\n          1. Perform ? ValidateCustomMatcherHint(_hint_).\n          1. If _subject_ is not a Boolean and does not have a [[BooleanData]] internal slot, return *false*.\n          1. If _hint_ is *\"boolean\"*, return *true*.\n          1. If _subject_ is a Boolean, return CreateArrayFromList(« _subject_ »).\n          1. Return CreateArrayFromList(« _subject_.[[BooleanData]] »).\n        </emu-alg>\n      </emu-clause>\n    </emu-clause>\n    <emu-note type=\"editor\">\n      Another approach is to ignore boxed primitives and only match primitive values.\n    </emu-note>\n  </emu-clause>\n\n  <emu-clause class=\"fold\" id=\"sec-symbol-objects\" number=\"4\">\n    <h1>Symbol Objects</h1>\n\n    <emu-clause id=\"sec-properties-of-the-symbol-constructor\" number=\"2\">\n      <h1>Properties of the Symbol Constructor</h1>\n\n      <emu-clause id=\"sec-symbol.custommatcher\" number=\"17\">\n        <h1>Symbol.customMatcher</h1>\n        <p>The initial value of `Symbol.customMatcher` is the well-known symbol %Symbol.customMatcher% (<emu-xref\n            href=\"#table-well-known-symbols\"></emu-xref>).</p>\n        <p>This property has the attributes { [[Writable]]: *false*, [[Enumerable]]: *false*, [[Configurable]]: *false* }.</p>\n      </emu-clause>\n\n      <emu-clause id=\"sec-symbol-%symbol.custommatcher%\">\n        <h1>Symbol [ %Symbol.customMatcher% ] ( _subject_, _hint_ )</h1>\n        <p>This function performs the following steps when called:</p>\n        <emu-alg>\n          1. Perform ? ValidateCustomMatcherHint(_hint_).\n          1. If _subject_ is not a Symbol and does not have a [[SymbolData]] internal slot, return *false*.\n          1. If _hint_ is *\"boolean\"*, return *true*.\n          1. If _subject_ is a Symbol, return CreateArrayFromList(« _subject_ »).\n          1. Return CreateArrayFromList(« _subject_.[[SymbolData]] »).\n        </emu-alg>\n      </emu-clause>\n    </emu-clause>\n    <emu-note type=\"editor\">\n      Another approach is to ignore boxed primitives and only match primitive values.\n    </emu-note>\n  </emu-clause>\n\n  <emu-clause class=\"fold\" id=\"sec-error-objects\" number=\"5\">\n    <h1>Error Objects</h1>\n\n    <emu-clause id=\"sec-error-constructor\" number=\"1\">\n      <h1>The Error Constructor</h1>\n\n      <emu-clause id=\"sec-error-message\">\n        <h1>Error ( _message_ [ , _options_ ] )</h1>\n        <p>This function performs the following steps when called:</p>\n        <emu-alg>\n          1. If NewTarget is *undefined*, let _newTarget_ be the active function object; else let _newTarget_ be NewTarget.\n          1. Let _O_ be ? OrdinaryCreateFromConstructor(_newTarget_, *\"%Error.prototype%\"*, « [[ErrorData]] »).\n          1. <ins>Set _O_.[[ErrorData]] to *\"Error\"*.</ins>\n          1. If _message_ is not *undefined*, then\n            1. Let _msg_ be ? ToString(_message_).\n            1. Perform CreateNonEnumerableDataPropertyOrThrow(_O_, *\"message\"*, _msg_).\n          1. Perform ? InstallErrorCause(_O_, _options_).\n          1. Return _O_.\n        </emu-alg>\n      </emu-clause>\n    </emu-clause>\n\n    <emu-clause id=\"sec-properties-of-the-error-constructors\" number=\"2\">\n      <h1>Properties of the Error Constructor</h1>\n\n      <emu-clause id=\"sec-error-%symbol.custommatcher%\" number=\"2\">\n        <h1>Error [ %Symbol.customMatcher% ] ( _subject_, _hint_ )</h1>\n          <p>This function performs the following steps when called:</p>\n          <emu-alg>\n            1. Perform ? ValidateCustomMatcherHint(_hint_, ~boolean~).\n            1. If _subject_ does not have a [[ErrorData]] internal slot, return *false*.\n            1. Return *true*.\n          </emu-alg>\n      </emu-clause>\n      <emu-note type=\"editor\">\n        It is possible to provide extractor semantics for Error matchers.\n        <pre><code class=\"javascript\">\n          if (expr is Error(let message, { let cause })) {}\n        </code></pre>\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-properties-of-error-instances\" number=\"4\">\n      <h1>Properties of Error Instances</h1>\n      <p>Error instances are ordinary objects that inherit properties from the Error prototype object and have an\n        [[ErrorData]] internal slot whose value is <del>*undefined*</del> <ins>a String</ins>. The only specified uses of\n        [[ErrorData]] is to identify Error, AggregateError, and _NativeError_ instances as Error objects within\n        `Object.prototype.toString` <ins>and their %Symbol.customMatcher% methods</ins>.</p>\n      <emu-note type=\"editor\">\n        Rename this internal slot to [[ErrorKind]].\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-nativeerror-object-structure\" number=\"6\">\n      <h1>_NativeError_ Object Structure</h1>\n\n      <emu-clause id=\"sec-nativeerror-constructors\" number=\"1\">\n        <h1>The _NativeError_ Constructors</h1>\n\n        <emu-clause id=\"sec-nativeerror\" number=\"1\">\n          <h1>_NativeError_ ( _message_ [ , _options_ ] )</h1>\n          <p>Each _NativeError_ function performs the following steps when called:</p>\n          <emu-alg>\n            1. If NewTarget is *undefined*, let _newTarget_ be the active function object; else let _newTarget_ be NewTarget.\n            1. Let _O_ be ? OrdinaryCreateFromConstructor(_newTarget_, <code>\"%<var>NativeError</var>.prototype%\"</code>, « [[ErrorData]] »).\n            1. <ins>Set _O_.[[ErrorData]] to _NativeError_.</ins>\n            1. If _message_ is not *undefined*, then\n              1. Let _msg_ be ? ToString(_message_).\n              1. Perform CreateNonEnumerableDataPropertyOrThrow(_O_, *\"message\"*, _msg_).\n            1. Perform ? InstallErrorCause(_O_, _options_).\n            1. Return _O_.\n          </emu-alg>\n        </emu-clause>\n      </emu-clause>\n\n      <emu-clause id=\"sec-properties-of-the-nativeerror-constructors\" number=\"2\">\n        <h1>Properties of the _NativeError_ Constructors</h1>\n\n        <emu-clause id=\"sec-nativeerror-%symbol.custommatcher%\" number=\"2\">\n          <h1>_NativeError_ [ %Symbol.customMatcher% ] ( _subject_, _hint_ )</h1>\n          <emu-alg>\n            1. Perform ? ValidateCustomMatcherHint(_hint_, ~boolean~).\n            1. If _subject_ does not have a [[ErrorData]] internal slot or _subject_.[[ErrorData]] is not _NativeError_, return *false*.\n            1. Return *true*.\n          </emu-alg>\n        </emu-clause>\n      </emu-clause>\n\n      <emu-clause id=\"sec-properties-of-nativeerror-instances\" number=\"4\">\n        <h1>Properties of _NativeError_ Instances</h1>\n        <p>_NativeError_ instances are ordinary objects that inherit properties from their _NativeError_ prototype object and\n          have an [[ErrorData]] internal slot whose value is <del>*undefined*</del> <ins>a String</ins>. The only specified use\n          of [[ErrorData]] is by `Object.prototype.toString` (<emu-xref href=\"#sec-object.prototype.tostring\"></emu-xref>)\n          <ins>and their %Symbol.customMatcher% methods</ins> to identify Error, AggregateError, or _NativeError_ instances.\n        </p>\n      </emu-clause>\n    </emu-clause>\n\n    <emu-clause id=\"sec-aggregate-error-objects\" number=\"7\">\n      <h1>AggregateError Objects</h1>\n\n      <emu-clause id=\"sec-aggregate-error-constructor\" number=\"1\">\n        <h1>The AggregateError Constructor</h1>\n\n        <emu-clause id=\"sec-aggregate-error\">\n          <h1>AggregateError ( _errors_, _message_ [ , _options_ ] )</h1>\n          <p>This function performs the following steps when called:</p>\n          <emu-alg>\n            1. If NewTarget is *undefined*, let _newTarget_ be the active function object; else let _newTarget_ be NewTarget.\n            1. Let _O_ be ? OrdinaryCreateFromConstructor(_newTarget_, *\"%AggregateError.prototype%\"*, « [[ErrorData]] »).\n            1. <ins>Set _O_.[[ErrorData]] to *\"AggregateError\"*.</ins>\n            1. If _message_ is not *undefined*, then\n              1. Let _msg_ be ? ToString(_message_).\n              1. Perform CreateNonEnumerableDataPropertyOrThrow(_O_, *\"message\"*, _msg_).\n            1. Perform ? InstallErrorCause(_O_, _options_).\n            1. Let _errorsList_ be ? IteratorToList(? GetIterator(_errors_, ~sync~)).\n            1. Perform ! DefinePropertyOrThrow(_O_, *\"errors\"*, PropertyDescriptor { [[Configurable]]: *true*, [[Enumerable]]: *false*, [[Writable]]: *true*, [[Value]]: CreateArrayFromList(_errorsList_) }).\n            1. Return _O_.\n          </emu-alg>\n        </emu-clause>\n      </emu-clause>\n\n      <emu-clause id=\"sec-properties-of-the-aggregate-error-constructors\" number=\"2\">\n        <h1>Properties of the AggregateError Constructor</h1>\n\n        <emu-clause id=\"sec-aggregate-error-%symbol.custommatcher%\" number=\"2\">\n          <h1>AggregateError [ %Symbol.customMatcher% ] ( _subject_, _hint_ )</h1>\n          <emu-alg>\n            1. Perform ? ValidateCustomMatcherHint(_hint_, ~boolean~).\n            1. If _subject_ does not have a [[ErrorData]] internal slot or _subject_.[[ErrorData]] is not *\"AggregateError\"*, return *false*.\n            1. Return *true*.\n          </emu-alg>\n        </emu-clause>\n      </emu-clause>\n\n      <emu-clause id=\"sec-properties-of-aggregate-error-instances\" number=\"4\">\n        <h1>Properties of AggregateError Instances</h1>\n        <p>AggregateError instances are ordinary objects that inherit properties from their AggregateError prototype object and\n          have an [[ErrorData]] internal slot whose value is <del>*undefined*</del> <ins>a String</ins>. The only specified use\n          of [[ErrorData]] is by `Object.prototype.toString` (<emu-xref href=\"#sec-object.prototype.tostring\"></emu-xref>)\n          <ins>and their %Symbol.customMatcher% methods</ins> to identify Error, AggregateError, or _NativeError_ instances.\n        </p>\n      </emu-clause>\n    </emu-clause>\n  </emu-clause>\n</emu-clause>\n\n<emu-clause class=\"fold\" id=\"sec-numbers-and-dates\" number=\"21\">\n  <h1>Numbers and Dates</h1>\n\n  <emu-clause id=\"sec-number-objects\" number=\"1\">\n    <h1>Number Objects</h1>\n\n    <emu-clause id=\"sec-properties-of-the-number-constructor\" number=\"2\">\n      <h1>Properties of the Number Constructor</h1>\n\n      <emu-clause id=\"sec-number-%symbol.custommatcher%\" number=\"16\">\n        <h1>Number [ %Symbol.customMatcher% ] ( _subject_, _hint_ )</h1>\n        <p>This function performs the following steps when called:</p>\n        <emu-alg>\n          1. Perform ? ValidateCustomMatcherHint(_hint_).\n          1. If _subject_ is not a Number and does not have a [[NumberData]] internal slot, return *false*.\n          1. If _hint_ is *\"boolean\"*, return *true*.\n          1. If _subject_ is a Number, return CreateArrayFromList(« _subject_ »).\n          1. Return CreateArrayFromList(« _subject_.[[NumberData]] »).\n        </emu-alg>\n      </emu-clause>\n      <emu-note type=\"editor\">\n        Another approach is to ignore boxed primitives and only match primitive values.\n      </emu-note>\n    </emu-clause>\n  </emu-clause>\n\n  <emu-clause id=\"sec-bigint-objects\" number=\"2\">\n    <h1>BigInt Objects</h1>\n\n    <emu-clause id=\"sec-properties-of-the-bigint-constructor\" number=\"2\">\n      <h1>Properties of the BigInt Constructor</h1>\n\n      <emu-clause id=\"sec-bigint-%symbol.custommatcher%\" number=\"4\">\n        <h1>BigInt [ %Symbol.customMatcher% ] ( _subject_, _hint_ )</h1>\n        <p>This function performs the following steps when called:</p>\n        <emu-alg>\n          1. Perform ? ValidateCustomMatcherHint(_hint_).\n          1. If _subject_ is not a BigInt and does not have a [[BigIntData]] internal slot, return *false*.\n          1. If _hint_ is *\"boolean\"*, return *true*.\n          1. If _subject_ is a BigInt, return CreateArrayFromList(« _subject_ »).\n          1. Return CreateArrayFromList(« _subject_.[[BigIntData]] »).\n        </emu-alg>\n      </emu-clause>\n    </emu-clause>\n    <emu-note type=\"editor\">\n      Another approach is to ignore boxed primitives and only match primitive values.\n    </emu-note>\n  </emu-clause>\n\n  <emu-clause id=\"sec-date-objects\" number=\"4\">\n    <h1>Date Objects</h1>\n\n    <emu-clause id=\"sec-properties-of-the-date-constructor\" number=\"3\">\n      <h1>Properties of the Date Constructor</h1>\n\n      <emu-clause id=\"sec-date-%symbol.custommatcher%\" number=\"5\">\n        <h1>Date [ %Symbol.customMatcher% ] ( _subject_, _hint_ )</h1>\n        <p>This function performs the following steps when called:</p>\n        <emu-alg>\n          1. Perform ? ValidateCustomMatcherHint(_hint_, ~boolean~).\n          1. If _subject_ does not have a [[DateValue]] internal slot, return *false*.\n          1. Return *true*.\n        </emu-alg>\n      </emu-clause>\n    </emu-clause>\n  </emu-clause>\n</emu-clause>\n\n<emu-clause class=\"fold\" id=\"sec-text-processing\" number=\"22\">\n  <h1>Text Processing</h1>\n\n  <emu-clause id=\"sec-string-objects\" number=\"1\">\n    <h1>String Objects</h1>\n\n    <emu-clause id=\"sec-properties-of-the-string-constructor\" number=\"2\">\n      <h1>Properties of the String Constructor</h1>\n\n      <emu-clause id=\"sec-string-%symbol.custommatcher%\" number=\"5\">\n        <h1>String [ %Symbol.customMatcher% ] ( _subject_, _hint_ )</h1>\n        <p>This function performs the following steps when called:</p>\n        <emu-alg>\n          1. Perform ? ValidateCustomMatcherHint(_hint_).\n          1. If _subject_ is not a String and does not have a [[StringData]] internal slot, return *false*.\n          1. If _hint_ is *\"boolean\"*, return *true*.\n          1. If _subject_ is a String, return CreateArrayFromList(« _subject_ »).\n          1. Return CreateArrayFromList(« _subject_.[[StringData]] »).\n        </emu-alg>\n      </emu-clause>\n      <emu-note type=\"editor\">\n        Another approach is to ignore boxed primitives and only match primitive values.\n      </emu-note>\n    </emu-clause>\n  </emu-clause>\n\n  <emu-clause id=\"sec-regexp-regular-expression-objects\" number=\"2\">\n    <h1>RegExp (Regular Expression) Objects</h1>\n\n    <emu-clause id=\"sec-properties-of-the-regexp-constructor\" number=\"5\">\n      <h1>Properties of the RegExp Constructor</h1>\n\n      <emu-clause id=\"sec-regexp-%symbol.custommatcher%\" number=\"3\">\n        <h1>RegExp [ %Symbol.customMatcher% ] ( _subject_, _hint_ )</h1>\n        <p>This function performs the following steps when called:</p>\n        <emu-alg>\n          1. Perform ? ValidateCustomMatcherHint(_hint_, ~boolean~).\n          1. If ? IsRegExp(_subject_) is *false*, return *false*.\n          1. Return *true*.\n        </emu-alg>\n        <emu-note>\n          IsRegExp returns *true* for objects that have a truthy %Symbol.match% property. Do we want this?\n        </emu-note>\n      </emu-clause>\n    </emu-clause>\n\n    <emu-clause id=\"sec-properties-of-the-regexp-prototype-object\" number=\"6\">\n      <h1>Properties of the RegExp Prototype Object</h1>\n\n      <emu-clause id=\"sec-regexp.prototype-%symbol.custommatcher%\" number=\"20\">\n        <h1>RegExp.prototype [ %Symbol.customMatcher% ] ( _subject_, _hint_ )</h1>\n        <p>This function performs the following steps when called:</p>\n        <emu-alg>\n          1. Perform ? ValidateCustomMatcherHint(_hint_).\n          1. Let _regexp_ be *this* value.\n          1. If _hint_ is *\"boolean\"*, return ? Call(? Get(_regexp_, *\"test\"*), _regexp_, « _subject_ »).\n          1. Let _isRegExp_ be ? IsRegExp(_regexp_).\n          1. If _isRegExp_ is *true*, then\n            1. Let _flags_ be ? Get(_regexp_, \"flags\").\n            1. Perform ? RequireObjectCoercible(_flags_).\n            1. If ? ToString(_flags_) contains *g*, then\n              1. Let _iterator_ be ? Call(? Get(_regexp_, %Symbol.matchAll%), _regexp_, « _subject_ »).\n              1. Let _array_ be ? Call(<emu-xref href=\"#sec-array.from\">%Array.from%</emu-xref>, %Array%, « _iterator_ »).\n              1. If ! LengthOfArrayLike(_array_) is 0, return *false*.\n              1. Return _array_.\n          1. Let _result_ be ? Call(? Get(_regexp_, %Symbol.match%), _regexp_, « _subject_ »).\n          1. If _result_ is *null*, return *false*.\n          1. Return CreateArrayFromList(« _result_ »).\n        </emu-alg>\n        <emu-note code>\n          <pre><code class=\"javascript\">\n            let regex = /(?&lt;id&gt;\\d+)-?/g\n            '012-345' is regex([\"012-\", \"012\"], { groups: { id: \"345\" } });\n            // true, match with %Symbol.matchAll%\n\n            let regex2 = /(?&lt;id&gt;\\d+)-?/\n            '012-345' is regex({ groups: { id: \"012\" } });\n            // true, match with %Symbol.match%\n          </code></pre>\n        </emu-note>\n        <emu-note type=\"editor\">\n          The *\"flags\"* property in this algorithm is accessed twice, this is not ideal.\n          Another access is\n          in <emu-xref href=\"#sec-regexp-prototype-%symbol.matchall%\" title></emu-xref>\n          or <emu-xref href=\"#sec-regexp.prototype-%symbol.match%\" title></emu-xref>\n          depends on if the _regexp_ has the *g* flag.\n        </emu-note>\n        <emu-note type=\"editor\">\n          When matching with a RegExp that *\"flags\"* contains *\"g\"*,\n          both <emu-xref href=\"#sec-%regexpstringiteratorprototype%.next\" title></emu-xref>\n          and <emu-xref href=\"#sec-%arrayiteratorprototype%.next\" title></emu-xref>\n          are called, this is not ideal.\n        </emu-note>\n      </emu-clause>\n    </emu-clause>\n  </emu-clause>\n</emu-clause>\n\n<emu-clause class=\"fold\" id=\"sec-indexed-collections\" number=\"23\">\n  <h1>Indexed Collections</h1>\n\n  <emu-clause id=\"sec-array-objects\" number=\"1\">\n    <h1>Array Objects</h1>\n\n    <emu-clause id=\"sec-properties-of-the-array-constructor\" number=\"2\">\n      <h1>Properties of the Array Constructor</h1>\n\n      <emu-clause id=\"sec-array-%symbol.custommatcher%\" number=\"6\">\n        <h1>Array [ %Symbol.customMatcher% ] ( _subject_, _hint_ )</h1>\n        <p>This function performs the following steps when called:</p>\n        <emu-alg>\n          1. Perform ? ValidateCustomMatcherHint(_hint_).\n          1. If ? IsArray(_subject_) is *false*, return *false*.\n          1. If _hint_ is *\"boolean\"*, return *true*.\n          1. Return _subject_.\n        </emu-alg>\n        <emu-note code><pre><code class=\"javascript\">\n          if (expr is Array(1, 2, 3, 4)) {}\n        </code></pre></emu-note>\n      </emu-clause>\n    </emu-clause>\n  </emu-clause>\n\n  <emu-clause id=\"sec-typedarray-objects\" number=\"2\">\n    <h1>TypedArray Objects</h1>\n\n    <emu-clause id=\"sec-properties-of-the-typedarray-constructors\" number=\"6\">\n      <h1>Properties of the _TypedArray_ Constructors</h1>\n\n      <emu-clause id=\"sec-_typedarray_-%symbol.custommatcher%\" number=\"3\">\n        <h1>_TypedArray_ [ %Symbol.customMatcher% ] ( _subject_, _hint_ )</h1>\n        <p>This function performs the following steps when called:</p>\n        <emu-alg>\n          1. Perform ? ValidateCustomMatcherHint(_hint_).\n          1. If _subject_ does not have a [[TypedArrayName]] internal slot or _subject_.[[TypedArrayName]] is not _TypedArray_, return *false*.\n          1. If _hint_ is *\"boolean\"*, return *true*.\n          1. Return _subject_.\n        </emu-alg>\n        <emu-note code><pre><code class=\"javascript\">\n          const isPNG = binary is Uint8Array(\n            0x89, 0x50, 0x4E, 0x47,\n            0x0D, 0x0A, 0x1A, 0x0A, ...\n          ); // the ... is necessary otherwise it will only match a length-8 binary.\n        </code></pre></emu-note>\n      </emu-clause>\n    </emu-clause>\n  </emu-clause>\n</emu-clause>\n\n<emu-clause class=\"fold\" id=\"sec-keyed-collections\" number=\"24\">\n  <h1>Keyed Collections</h1>\n\n  <emu-clause id=\"sec-map-objects\" number=\"1\">\n    <h1>Map Objects</h1>\n\n    <emu-clause id=\"sec-properties-of-the-map-constructor\" number=\"2\">\n      <h1>Properties of the Map Constructor</h1>\n\n      <emu-clause id=\"sec-map-%symbol.custommatcher%\" number=\"3\">\n        <h1>Map [ %Symbol.customMatcher% ] ( _subject_, _hint_ )</h1>\n        <p>This function performs the following steps when called:</p>\n        <emu-alg>\n          1. Perform ? ValidateCustomMatcherHint(_hint_).\n          1. If _subject_ does not have a [[MapData]] internal slot, return *false*.\n          1. If _hint_ is *\"boolean\"*, return *true*.\n          1. Return CreateArrayFromList(« _subject_ »).\n        </emu-alg>\n        <emu-note code><pre><code class=\"javascript\">\n          expr is Map([[1, 2], [3, 4]]);\n          // matches new Map([[1, 2], [3, 4]])\n          // but not new Map([[3, 4], [1, 2]])\n        </code></pre></emu-note>\n        <emu-note type=\"editor\">\n          A Map can be iterated, but is it meaningful to do so in pattern matching?\n        </emu-note>\n      </emu-clause>\n    </emu-clause>\n  </emu-clause>\n\n  <emu-clause id=\"sec-set-objects\" number=\"2\">\n    <h1>Set Objects</h1>\n\n    <emu-clause id=\"sec-properties-of-the-set-constructor\" number=\"2\">\n      <h1>Properties of the Set Constructor</h1>\n\n      <emu-clause id=\"sec-set-%symbol.custommatcher%\" number=\"3\">\n        <h1>Set [ %Symbol.customMatcher% ] ( _subject_, _hint_ )</h1>\n        <p>This function performs the following steps when called:</p>\n        <emu-alg>\n          1. Perform ? ValidateCustomMatcherHint(_hint_).\n          1. If _subject_ does not have a [[SetData]] internal slot, return *false*.\n          1. If _hint_ is *\"boolean\"*, return *true*.\n          1. Return CreateArrayFromList(« _subject_ »).\n        </emu-alg>\n        <emu-note code><pre><code class=\"javascript\">\n          expr is Set([1, 2, 3]);\n          // matches new Set([1, 2, 3])\n          // but not new Set([3, 2, 1])\n        </code></pre></emu-note>\n        <emu-note type=\"editor\">\n          A Set can be iterated, but is it meaningful to do so in pattern matching?\n        </emu-note>\n      </emu-clause>\n    </emu-clause>\n  </emu-clause>\n\n  <emu-clause id=\"sec-weakmap-objects\" number=\"3\">\n    <h1>WeakMap Objects</h1>\n\n    <emu-clause id=\"sec-properties-of-the-weakmap-constructor\" number=\"2\">\n      <h1>Properties of the WeakMap Constructor</h1>\n\n      <emu-clause id=\"sec-weakmap-%symbol.custommatcher%\" number=\"2\">\n        <h1>WeakMap [ %Symbol.customMatcher% ] ( _subject_, _hint_ )</h1>\n        <p>This function performs the following steps when called:</p>\n        <emu-alg>\n          1. Perform ? ValidateCustomMatcherHint(_hint_, ~boolean~).\n          1. If _subject_ does not have a [[WeakMapData]] internal slot, return *false*.\n          1. Return *true*.\n        </emu-alg>\n      </emu-clause>\n    </emu-clause>\n  </emu-clause>\n\n  <emu-clause id=\"sec-weakset-objects\" number=\"4\">\n    <h1>WeakSet Objects</h1>\n\n    <emu-clause id=\"sec-properties-of-the-weakset-constructor\" number=\"2\">\n      <h1>Properties of the WeakSet Constructor</h1>\n\n      <emu-clause id=\"sec-weakset-%symbol.custommatcher%\" number=\"2\">\n        <h1>WeakSet [ %Symbol.customMatcher% ] ( _subject_, _hint_ )</h1>\n        <p>This function performs the following steps when called:</p>\n        <emu-alg>\n          1. Perform ? ValidateCustomMatcherHint(_hint_, ~boolean~).\n          1. If _subject_ does not have a [[WeakSetData]] internal slot, return *false*.\n          1. Return *true*.\n        </emu-alg>\n      </emu-clause>\n    </emu-clause>\n  </emu-clause>\n</emu-clause>\n\n<emu-clause class=\"fold\" id=\"sec-structured-data\" number=\"25\">\n  <h1>Structured Data</h1>\n\n  <emu-clause id=\"sec-arraybuffer-objects\" number=\"1\">\n    <h1>ArrayBuffer Objects</h1>\n\n    <emu-clause id=\"sec-properties-of-the-arraybuffer-constructor\" number=\"5\">\n      <h1>Properties of the ArrayBuffer Constructor</h1>\n\n      <emu-clause id=\"sec-arraybuffer-%symbol.custommatcher%\" number=\"4\">\n        <h1>ArrayBuffer [ %Symbol.customMatcher% ] ( _subject_, _hint_ )</h1>\n        <p>This function performs the following steps when called:</p>\n        <emu-alg>\n          1. Perform ? ValidateCustomMatcherHint(_hint_, ~boolean~).\n          1. If _subject_ has a [[ArrayBufferData]] internal slot, return *true*.\n          1. Return *false*.\n        </emu-alg>\n      </emu-clause>\n    </emu-clause>\n  </emu-clause>\n\n  <emu-clause id=\"sec-sharedarraybuffer-objects\" number=\"2\">\n    <h1>SharedArrayBuffer Objects</h1>\n\n    <emu-clause id=\"sec-properties-of-the-sharedarraybuffer-constructor\" number=\"4\">\n      <h1>Properties of the SharedArrayBuffer Constructor</h1>\n\n      <emu-clause id=\"sec-sharedarraybuffer-%symbol.custommatcher%\" number=\"3\">\n        <h1>SharedArrayBuffer [ %Symbol.customMatcher% ] ( _subject_, _hint_ )</h1>\n        <p>This function performs the following steps when called:</p>\n        <emu-alg>\n          1. Perform ? ValidateCustomMatcherHint(_hint_, ~boolean~).\n          1. If _subject_ does not have a [[ArrayBufferData]] internal slot, return *false*.\n          1. Return IsSharedArrayBuffer(_subject_).\n        </emu-alg>\n      </emu-clause>\n    </emu-clause>\n  </emu-clause>\n\n  <emu-clause id=\"sec-dataview-objects\" number=\"3\">\n    <h1>DataView Objects</h1>\n\n    <emu-clause id=\"sec-properties-of-the-dataview-constructor\" number=\"3\">\n      <h1>Properties of the DataView Constructor</h1>\n\n      <emu-clause id=\"sec-dataview-%symbol.custommatcher%\" number=\"2\">\n        <h1>DataView [ %Symbol.customMatcher% ] ( _subject_, _hint_ )</h1>\n        <p>This function performs the following steps when called:</p>\n        <emu-alg>\n          1. Perform ? ValidateCustomMatcherHint(_hint_, ~boolean~).\n          1. If _subject_ does not have a [[DataView]] internal slot, return *false*.\n          1. Return *true*.\n        </emu-alg>\n      </emu-clause>\n    </emu-clause>\n  </emu-clause>\n</emu-clause>\n\n<emu-clause class=\"fold\" id=\"sec-managing-memory\" number=\"26\">\n  <h1>Managing Memory</h1>\n\n  <emu-clause id=\"sec-weak-ref-objects\" number=\"1\">\n    <h1>WeakRef Objects</h1>\n\n    <emu-clause id=\"sec-properties-of-the-weak-ref-constructor\" number=\"2\">\n      <h1>Properties of the WeakRef Constructor</h1>\n\n      <emu-clause id=\"sec-weakref-%symbol.custommatcher%\" number=\"2\">\n        <h1>WeakRef [ %Symbol.customMatcher% ] ( _subject_, _hint_ )</h1>\n        <p>This function performs the following steps when called:</p>\n        <emu-alg>\n          1. Perform ? ValidateCustomMatcherHint(_hint_).\n          1. If _subject_ does not have a [[WeakRefTarget]] internal slot, return *false*.\n          1. If _hint_ is *\"boolean\"*, return *true*.\n          1. Return CreateArrayFromList(« WeakRefDeref(_subject_) »).\n        </emu-alg>\n        <emu-note code><pre><code class=\"javascript\">\n          if (expr is WeakRef(let object)) {}\n        </code></pre></emu-note>\n      </emu-clause>\n    </emu-clause>\n  </emu-clause>\n\n  <emu-clause id=\"sec-finalization-registry-objects\" number=\"2\">\n    <h1>FinalizationRegistry Objects</h1>\n\n    <emu-clause id=\"sec-properties-of-the-finalization-registry-constructor\" number=\"2\">\n      <h1>Properties of the FinalizationRegistry Constructor</h1>\n\n      <emu-clause id=\"sec-finalizationregistry-%symbol.custommatcher%\" number=\"2\">\n        <h1>FinalizationRegistry [ %Symbol.customMatcher% ] ( _subject_, _hint_ )</h1>\n        <p>This function performs the following steps when called:</p>\n        <emu-alg>\n          1. Perform ? ValidateCustomMatcherHint(_hint_, ~boolean~).\n          1. If _subject_ does not have a [[CleanupCallback]] internal slot, return *false*.\n          1. Return *true*.\n        </emu-alg>\n      </emu-clause>\n    </emu-clause>\n  </emu-clause>\n</emu-clause>\n\n<emu-clause class=\"fold\" id=\"sec-control-abstraction-objects\" number=\"27\">\n  <h1>Control Abstraction Objects</h1>\n\n  <emu-clause id=\"sec-promise-objects\" number=\"2\">\n    <h1>Promise Objects</h1>\n\n    <emu-clause id=\"sec-properties-of-the-promise-constructor\" number=\"4\">\n      <h1>Properties of the Promise Constructor</h1>\n\n      <emu-clause id=\"sec-promise-%symbol.custommatcher%\" number=\"9\">\n        <h1>Promise [ %Symbol.customMatcher% ] ( _subject_, _hint_ )</h1>\n        <p>This function performs the following steps when called:</p>\n        <emu-alg>\n          1. Perform ? ValidateCustomMatcherHint(_hint_, ~boolean~).\n          1. Return IsPromise(_subject_).\n        </emu-alg>\n      </emu-clause>\n    </emu-clause>\n  </emu-clause>\n</emu-clause>\n\n<emu-clause class=\"fold\" id=\"sec-reflection\" number=\"28\">\n  <h1>Reflection</h1>\n\n  <emu-clause id=\"sec-proxy-objects\" number=\"2\">\n    <h1>Proxy Objects</h1>\n\n    <emu-clause id=\"sec-proxy-constructor\" number=\"1\">\n      <h1>The Proxy Constructor</h1>\n\n      <emu-clause id=\"sec-proxy-%symbol.custommatcher%\" number=\"2\">\n        <h1>Proxy [ %Symbol.customMatcher% ] ( )</h1>\n        <p>This function performs the following steps when called:</p>\n        <emu-alg>\n          1. Throw a *TypeError* exception.\n        </emu-alg>\n      </emu-clause>\n      <emu-note type=\"editor\">\n        <p>All built-in constructors have a %Symbol.customMatcher% method. This one is for design consistency.</p>\n        <p>This is not a consensus in the champion group.</p>\n      </emu-note>\n    </emu-clause>\n  </emu-clause>\n</emu-clause>\n\n<emu-clause id=\"sec-pattern-matching\" number=\"30\">\n  <h1><ins>Pattern Matching</ins></h1>\n\n  <emu-clause id=\"sec-match-patterns\">\n    <h1>Match Patterns</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\">\n      MatchPattern[Yield, Await] :\n        `(` MatchPattern[?Yield, ?Await] `)`\n        PrimitivePattern\n        VariableDeclarationPattern[?Yield, ?Await]\n        MemberExpressionPattern[?Yield, ?Await]\n        ObjectPattern[?Yield, ?Await]\n        ArrayPattern[?Yield, ?Await]\n        UnaryAlgebraicPattern[?Yield, ?Await]\n        RelationalPattern[?Yield, ?Await]\n        IfPattern[?Yield, ?Await]\n        CombinedMatchPattern[?Yield, ?Await]\n    </emu-grammar>\n    <emu-note type=\"editor\">\n      <emu-grammar>\n        MatchPattern :\n          `void`\n      </emu-grammar>\n      <p>\n        This production will be added by <a target=\"_blank\" href=\"https://github.com/tc39/proposal-discard-binding\">discard bindings proposal</a>.\n      </p>\n      <p>\n        Some of the committe members prefer `_` as the discard binding identifier.\n      </p>\n      <pre><code class=\"javascript\">\n        if (expr is [let x, void, void]) {}\n        // can be written as:\n        if (expr is [let x,,,]) {}\n        // or\n        if (expr is [let x, let _y, let _z,]) {}\n      </code></pre>\n    </emu-note>\n    <!-- #region PrimitivePattern -->\n    <emu-grammar type=\"definition\">\n      PrimitivePattern :\n        Literal\n        NoSubstitutionTemplate\n    </emu-grammar>\n    <emu-note code>\n      <pre><code class=\"javascript\">\n        if (value is null) {};\n        if (value is true) {};\n        if (value is 1_000_000) {};\n        if (value is \"string\") {};\n        if (value is `line 1\n        line 2`) {};\n      </code></pre>\n    </emu-note>\n    <emu-note type=\"editor\">\n      <p>\n        Preserve the interpolation syntax for\n        (1) <a target=\"_blank\" href=\"https://github.com/tc39/proposal-pattern-matching/pull/293#discussion_r1350757767\">concerns about arbitrary expression interpolation</a> and\n        (2) <a target=\"_blank\" href=\"https://www.typescriptlang.org/docs/handbook/2/template-literal-types.html#inference-with-template-literals\">intuitive string matching</a>.\n      </p>\n      <p>For example, match `\"com.example:method()\"` by</p>\n      <pre><code class=\"javascript\">\n        if (qualifiedName is `${isPackageName and let pkg}:${isIdentifier and let method}()`) {}\n      </code></pre>\n    </emu-note>\n    <!-- endregion -->\n    <!-- #region VariableDeclarationPattern -->\n    <emu-grammar type=\"definition\">\n      VariableDeclarationPattern[Yield, Await] :\n        VarOrLetOrConst BindingIdentifier[?Yield, ?Await]\n\n      VarOrLetOrConst :\n        `var`\n        LetOrConst\n    </emu-grammar>\n    <emu-note code><pre><code class=\"javascript\">\n      if (expr is { kind: let kind }) {}\n      return match (expr) {\n        [let left, let op, let right]: evaluate(op, left, right);\n      };\n    </code></pre></emu-note>\n    <!-- endregion -->\n    <!-- #region MemberExpressionPattern -->\n    <emu-grammar type=\"definition\">\n      MemberExpressionPattern[Yield, Await] :\n        PatternMatchingMemberExpression[?Yield, ?Await]\n        PatternMatchingMemberExpression[?Yield, ?Await] `(` MatchList[?Yield, ?Await] `)`\n\n      PatternMatchingMemberExpression[Yield, Await] :\n        `this`\n        MetaProperty\n        IdentifierReference[?Yield, ?Await]\n        `super` `.` IdentifierName\n        PatternMatchingMemberExpression[?Yield, ?Await] `.` IdentifierName\n        PatternMatchingMemberExpression[?Yield, ?Await] `.` PrivateIdentifier\n        PatternMatchingMemberExpression[?Yield, ?Await] `[` Expression[+In, ?Yield, ?Await] `]`\n    </emu-grammar>\n    <emu-note code><pre><code class=\"javascript\">\n      if (expr is { x: undefined, y: undefined }) {}\n      if (expr is { angle: Math.PI, let length }) {}\n      if (expr is { ok: true, value: this.#lastValue }) {}\n      if (expr === import.meta?.hot?.data && expr is { let previousData }) {}\n      if (expr is WeakRef(let object)) {}\n    </code></pre></emu-note>\n    <emu-note type=\"editor\">\n      This is the minimal requirement.\n      All other productions can be removed.\n      <emu-grammar>\n        PatternMatchingMemberExpression :\n          IdentifierReference\n          PatternMatchingMemberExpression `.` IdentifierName\n      </emu-grammar>\n      <pre><code class=\"javascript\">\n        if (value is { version: 2, data: this.#data }) {};\n        // can be written as:\n        const data = this.#data;\n        if (expr is { version: 2, data: data }) {}\n      </code></pre>\n      <p>\n        It is similar to the <a href=\"https://tc39.es/proposal-decorators/#sec-new-syntax\" target=\"_blank\">DecoratorMemberExpression</a>.\n      </p>\n      <p>Should we allow `MemberExpressionPattern[expr]` to match with computed property names?</p>\n    </emu-note>\n    <emu-note type=\"editor\">\n      It is possible to add the following productions:\n      <emu-grammar>\n        PatternMatchingMemberExpression :\n          PatternMatchingMemberExpression `?.` IdentifierName\n          PatternMatchingMemberExpression `?.` PrivateIdentifier\n      </emu-grammar>\n      <p>It does not clear if this should match *undefined* or fail the match if the |PatternMatchingMemberExpression| is *undefined*.</p>\n    </emu-note>\n    <!-- endregion -->\n    <!-- #region ObjectPattern and ArrayPattern -->\n    <emu-grammar type=\"definition\">\n      ObjectPattern[Yield, Await] :\n        `{` `}`\n        `{` MatchRestProperty[?Yield, ?Await] `}`\n        `{` MatchPropertyList[?Yield, ?Await] `,`? `}`\n        `{` MatchPropertyList[?Yield, ?Await] `,` MatchRestProperty[?Yield, ?Await] `}`\n\n      ArrayPattern[Yield, Await] :\n        `[` MatchList[?Yield, ?Await]? `]`\n\n      MatchList[Yield, Await] :\n        Elision? MatchRestElement[?Yield, ?Await]?\n        MatchElementList[?Yield, ?Await]\n        MatchElementList[?Yield, ?Await] `,` Elision? MatchRestElement[?Yield, ?Await]?\n\n      MatchRestProperty[Yield, Await] :\n        `...` MatchPattern[?Yield, ?Await]\n\n      MatchPropertyList[Yield, Await] :\n        MatchProperty[?Yield, ?Await]\n        MatchPropertyList[?Yield, ?Await] `,` MatchProperty[?Yield, ?Await]\n\n      MatchElementList[Yield, Await] :\n        MatchElisionElement[?Yield, ?Await]\n        MatchElementList[?Yield, ?Await] `,` MatchElisionElement[?Yield, ?Await]\n\n      MatchElisionElement[Yield, Await] :\n        Elision? MatchElement[?Yield, ?Await]\n\n      MatchProperty[Yield, Await] :\n        PropertyName[?Yield, ?Await] `?`?\n        PropertyName[?Yield, ?Await] `?`? `:` MatchPattern[?Yield, ?Await]\n        VarOrLetOrConst BindingIdentifier[?Yield, ?Await] `?`?\n        VarOrLetOrConst BindingIdentifier[?Yield, ?Await] `?`? `:` MatchPattern[?Yield, ?Await]\n\n      MatchElement[Yield, Await] :\n        MatchPattern[?Yield, ?Await] `?`?\n\n      MatchRestElement[Yield, Await] :\n        `...`\n        `...` MatchPattern[?Yield, ?Await]\n    </emu-grammar>\n    <emu-note code>\n      <p>Object matchers</p>\n      <pre><code class=\"javascript\">\n        if (expr is { version: 2, type: String, value?: void }) {}\n        // test if subject[Symbol.iterator] is present.\n        if (expr is { [Symbol.iterator]?: Function }) {}\n        if (expr is { 0: String }) {}\n      </code></pre>\n      <p>Array matchers</p>\n      <pre><code class=\"javascript\">\n        if (expr is [\"request\", let method, ...let params]) {}\n        // match an iterable that first 2 values match a and b and no more values.\n        if (expr is [a, b]) {}\n        // match an iterable that first 2 values match a and b.\n        if (expr is [a, b, ...]) {}\n      </code></pre>\n    </emu-note>\n    <emu-note type=\"editor\">\n      It is possible to add |PrivateIdentifier| to |MatchProperty|.\n      <pre><code class=\"javascript\">\n        class MyClass {\n          #field;\n          test(data) {\n            if (data is { value: { #field: let field } }) {}\n            // can be written as\n            if (data is { let value: MyClass }) {\n              let field = value.#field;\n            }\n          }\n        }\n      </code></pre>\n    </emu-note>\n    <emu-note type=\"editor\">\n      It is possible to add |Initializer| to |MatchProperty| and |MatchElement|.\n      <pre><code class=\"javascript\">\n        if (expr is { type: \"report\", let key }) { reportKey(key); }\n        else { reportKey(Symbol.for(\"missing\")) };\n        // can be written as\n        if (expr is { type: \"report\", let key = Symbol.for(\"missing\") }) { reportKey(key); }\n      </code></pre>\n    </emu-note>\n    <emu-note type=\"editor\">\n      <p>The `?` in the production |MatchProperty| or |MatchElement| can be removed.</p>\n      <p>The feature is not a consensus in the champion group yet.</p>\n      <pre><code class=\"javascript\">\n        if (expr is { let x, let y? }) {}\n        // can be written as\n        if (expr is { let x }) {}\n        else if (expr is { let x, let y }) {}\n\n        if (expr is [x, y?]) {}\n        // can be written as\n        if (expr is [x]) {}\n        else if (expr is [x, y]) {}\n      </code></pre>\n    </emu-note>\n    <emu-note type=\"editor\">\n      <emu-grammar>\n        MatchProperty :\n          VarOrLetOrConst BindingIdentifier `?`? `:` MatchPattern\n          VarOrLetOrConst BindingIdentifier `?`?\n      </emu-grammar>\n      <p>These productions can be removed.</p>\n      <p>This feature is not a consensus in the champion group yet.</p>\n      <pre><code class=\"javascript\">\n        if (expr is { version: 2, let y: String }) {}\n        // can be written as\n        if (expr is { version: 2, y: String and let y }) {}\n      </code></pre>\n    </emu-note>\n    <emu-note type=\"editor\">\n      <emu-grammar>MatchProperty : PropertyName `?`?</emu-grammar>\n      <p>Computed properties can be removed from this production, but it will be harder to match computed properties.</p>\n      <pre><code class=\"javascript\">\n        if (expr is { let length, [Symbol.iterator]: Function }) {}\n        // can be written as\n        function isIterable(value) { return typeof value[Symbol.iterator] === \"function\"; }\n        if (expr is { let length } and isIterable) {}\n      </code></pre>\n    </emu-note>\n    <!-- endregion -->\n    <!-- #region UnaryAlgebraicPattern -->\n    <emu-grammar type=\"definition\">\n      UnaryAlgebraicPattern[Yield, Await] :\n        PatternMatchingUnaryAlgebraicExpression[?Yield, ?Await]\n\n      PatternMatchingUnaryAlgebraicExpression[Yield, Await] :\n        `+` PatternMatchingMemberExpression[?Yield, ?Await]\n        `-` PatternMatchingMemberExpression[?Yield, ?Await]\n        `+` NumericLiteral\n        `-` NumericLiteral\n    </emu-grammar>\n    <emu-note code>\n      <pre><code class=\"javascript\">\n        if (expr is -0) {} // not matching `+0` and vice versa\n        if (expr is { x: -Infinity, y: -Infinity }) {}\n        if (expr is { angle: -Math.PI, let length }) {}\n      </code></pre>\n    </emu-note>\n    <emu-note type=\"editor\">\n      <p>Only literal `+0` or `-0` will be matched with SameValue, `+`_x_ and `-`_x_ where _x_ is 0 will be matched with SameValueZero.</p>\n    </emu-note>\n    <emu-note type=\"editor\">\n      This feature can be removed, but it will be harder to handle with `+0` and `-0`.\n      The code example above can be written as:\n      <pre><code class=\"javascript\">\n        const negPi = -Math.PI;\n        if (Object.is(expr, -0)) {} // not matching `+0` and vice versa\n        if (expr is { x: Number.NEGATIVE_INFINITY, y: Number.NEGATIVE_INFINITY }) {}\n        if (expr is { angle: negPi, let length }) {}\n      </code></pre>\n    </emu-note>\n    <!-- endregion -->\n    <!-- #region RelationalPattern -->\n    <emu-grammar type=\"definition\">\n      RelationalPattern[Yield, Await] :\n        `&lt;` PatternMatchingRelationalExpression[?Yield, ?Await]\n        `&gt;` PatternMatchingRelationalExpression[?Yield, ?Await]\n        `&lt;=` PatternMatchingRelationalExpression[?Yield, ?Await]\n        `&gt;=` PatternMatchingRelationalExpression[?Yield, ?Await]\n        `instanceof` PatternMatchingMemberExpression[?Yield, ?Await]\n        `in` PatternMatchingMemberExpression[?Yield, ?Await]\n        `==` PatternMatchingRelationalExpression[?Yield, ?Await]\n        `!=` PatternMatchingRelationalExpression[?Yield, ?Await]\n        `===` PatternMatchingRelationalExpression[?Yield, ?Await]\n        `!==` PatternMatchingRelationalExpression[?Yield, ?Await]\n\n      PatternMatchingRelationalExpression[Yield, Await] :\n        Literal\n        NoSubstitutionTemplate\n        PatternMatchingMemberExpression[?Yield, ?Await]\n        PatternMatchingUnaryAlgebraicExpression[?Yield, ?Await]\n    </emu-grammar>\n    <emu-note code>\n      <pre><code class=\"javascript\">\n        if (expr is &gt; -10 and &lt; 10) {}\n        if (expr is { value: instanceof Error and { let message } }) {}\n        if (expr is [=== Array, === Object]) {}\n      </code></pre>\n    </emu-note>\n    <emu-note type=\"editor\">\n      <p>It is possible to add the following production.</p>\n      <emu-grammar>\n        RelationalPattern[Yield, Await] :\n          `typeof` `==` PatternMatchingStringLikeExpression[?Yield, ?Await]\n          `typeof` `!=` PatternMatchingStringLikeExpression[?Yield, ?Await]\n          `typeof` `===` PatternMatchingStringLikeExpression[?Yield, ?Await]\n          `typeof` `!==` PatternMatchingStringLikeExpression[?Yield, ?Await]\n      </emu-grammar>\n      <emu-grammar type=\"definition\">\n        PatternMatchingStringLikeExpression[Yield, Await] :\n          StringLiteral\n          NoSubstitutionTemplate\n          PatternMatchingMemberExpression[?Yield, ?Await]\n      </emu-grammar>\n      <p>\n        The recommended way to match a String is to use the <emu-xref href=\"#sec-string-%symbol.custommatcher%\"\n          title></emu-xref>,\n        but it can be replaced by a custom implementation. This production adds the ability to do the unforgeable `typeof` test.\n      </p>\n      <pre><code class=\"javascript\">\n        if (expr is { version: 2 or 3, value: String }) {}\n        // can be written as this if built-ins might be replaced:\n        const isString = {\n          [Symbol.customMatcher](val) {\n            return typeof val === \"string\";\n          }\n        };\n        if (expr is { version: 2 or 3, value: isString }) {}\n      </code></pre>\n    </emu-note>\n    <emu-note type=\"editor\">\n      <p>It is possible to add the following production.</p>\n      <emu-grammar>\n        RelationalPattern[Yield, Await] :\n          `has` PatternMatchingStringLikeExpression[?Yield, ?Await]\n          `has` PrivateIdentifier\n      </emu-grammar>\n      <pre><code class=\"javascript\">\n        function hasPrivateField(val) { return #field in val; }\n        if (expr is { version: 2 or 3, data: hasPrivateField }) {}\n        // can be written as:\n        if (expr is { version: 2 or 3, data: has #field }) {}\n      </code></pre>\n      <p>This feature can be a proposal on its own, to be the `in` operator reversed.</p>\n      <pre><code class=\"javascript\">\n        if (expr has #field) { }\n        if (expr hasOwn \"prototype\") { }\n      </code></pre>\n    </emu-note>\n    <emu-note type=\"editor\">\n      <p>The `instanceof` production can be removed, but it will be harder to match by `instanceof` semantics.</p>\n      <p>This feature is not a consensus in the champion group.</p>\n      <p>\n        The class matchers match by private-field semantics,\n        the `instanceof` match is an escape hatch to match with the `instanceof` semantics.\n      </p>\n      <pre><code class=\"javascript\">\n        if (expr is { elements: [instanceof Map, instanceof Map] }) {}\n        // can be written as:\n        function isInstanceOfMap(val) { return val instanceof Map; }\n        if (expr is { elements: [isInstanceOfMap, isInstanceOfMap] }) {}\n      </code></pre>\n    </emu-note>\n    <emu-note type=\"editor\">\n      <p>\n        The `==`, `!=`, `===`, and `!==` production can be removed,\n        but it will be harder to match by `===` semantics when the |PatternMatchingRelationalExpression| is a custom matcher.\n      </p>\n      <p>This feature is not a consensus in the champion group.</p>\n      <pre class=\"inline\"><code class=\"javascript\">\n        if (expr is { type: \"create\", initializers: [createX] }) {}\n      </code></pre>\n      <p>\n        The code above will try to call <var>createX</var> as a custom matcher.\n        This feature is an opt-out of the custom matcher, to always do the `===` check.\n      </p>\n      <pre><code class=\"javascript\">\n        if (expr is { type: \"create\", initializers: [=== createX] }) {}\n        // can be written as:\n        function isCreateX(val) { return val === createX; }\n        if (expr is { type: \"create\", initializers: [isCreateX] }) {}\n      </code></pre>\n    </emu-note>\n    <emu-note type=\"editor\">\n      <p>The `in` production can be removed, but it will be harder to match by `in` semantics.</p>\n      <p>This feature is not a consensus in the champion group.</p>\n      <pre><code class=\"javascript\">\n        if (expr is { let key: in object } and inCache) {}\n        // can be written as:\n        function isInObj(key) { return key in object; }\n        if (expr is { let key: isInObj } and inCache) {}\n      </code></pre>\n    </emu-note>\n    <emu-note type=\"editor\">\n      <p>The `&gt;`, `&lt;`, `&gt;=` and `&lt;=` production can be removed, but it will be harder to match numbers.</p>\n      <p>This feature is not a consensus in the champion group.</p>\n      <pre><code class=\"javascript\">\n        if (expr is [&gt; -Math.PI and &lt; Math.PI, &gt; 0]) {}\n        // can be written as:\n        if (expr[0] &gt; -Math.PI && expr[0] &lt; Math.PI && expr[1] &gt; 0) {}\n      </code></pre>\n    </emu-note>\n    <!-- endregion -->\n    <!-- #region IfPattern -->\n    <emu-grammar type=\"definition\">\n      IfPattern[Yield, Await] :\n        `if` `(` Expression[+In, ?Yield, ?Await] `)`\n    </emu-grammar>\n    <emu-note code>\n      <pre><code class=\"javascript\">\n        return match (expr) {\n          { let x, let y, let z } and if (norm(x, y, z) &lt; maxLength): [x, y];\n          { let x, let y } and if (norm(x, y) &lt; maxLength): [x, y];\n          Number and &lt; maxLength let length: [length];\n        }\n      </code></pre>\n    </emu-note>\n    <emu-note type=\"editor\">\n      This feature can be removed, but this is designed as an escape hatch.\n      No alternative is available for this feature.\n    </emu-note>\n    <!-- endregion -->\n    <!-- #region CombinedMatchPattern -->\n    <emu-grammar type=\"definition\">\n      CombinedMatchPattern[Yield, Await] :\n        MatchPattern[?Yield, ?Await] `and` MatchPattern[?Yield, ?Await]\n        MatchPattern[?Yield, ?Await] `or` MatchPattern[?Yield, ?Await]\n        `not` MatchPattern[?Yield, ?Await]\n    </emu-grammar>\n    <emu-note code>\n      <pre><code class=\"javascript\">\n        if (expr is { version: 2 or 3 }) {}\n        if (expr is { version: Number and not 1 }) {}\n      </code></pre>\n    </emu-note>\n    <!-- endregion -->\n\n    <emu-clause id=\"sec-match-patterns-static-semantics-early-errors\">\n      <h1>Static Semantics: Early Errors</h1>\n      <!-- #region PrimitivePattern -->\n      <emu-grammar>\n        PrimitivePattern : NoSubstitutionTemplate\n      </emu-grammar>\n      <ul>\n        <li>It is a Syntax Error if |NoSubstitutionTemplate| Contains |NotEscapeSequence|.</li>\n      </ul>\n      <!-- #endregion -->\n      <!-- #region VariableDeclarationPattern -->\n      <emu-grammar>\n        VariableDeclarationPattern : VarOrLetOrConst BindingIdentifier\n      </emu-grammar>\n      <ul>\n        <li>It is a Syntax Error if |VarOrLetOrConst| is |LetOrConst| and the StringValue of |BindingIdentifier| is *\"let\"*.</li>\n      </ul>\n      <!-- #endregion -->\n      <!-- #region ObjectPattern and ArrayPattern -->\n      <emu-grammar>\n        MatchProperty :\n          PropertyName `?`?\n          PropertyName `?`? `:` MatchPattern\n      </emu-grammar>\n      <ul>\n        <li>It is a Syntax Error if |PropertyName| is a |LiteralPropertyName| and PropName of |PropertyName| is *\"__proto__\"*.</li>\n      </ul>\n      <emu-note code><pre><code class=\"javascript\">\n        if (expr is { __proto__: null, property?: void }) {} // Syntax Error\n        if (expr is { \"__proto__\": null, property?: void }) {} // Syntax Error\n        if (expr is { [\"__proto__\"]: null, property?: void }) {} // no Syntax Error\n      </code></pre></emu-note>\n      <emu-grammar>\n        MatchRestElement :\n          `...` MatchPattern\n\n        MatchRestElement :\n          `...` MatchPattern\n      </emu-grammar>\n      <ul>\n        <li>It is a Syntax Error if |MatchPattern| is |MemberExpressionPattern|.</li>\n        <li>This is not a consensus in the champion group.</li>\n      </ul>\n      <emu-note code><pre><code class=\"javascript\">\n        if (expr is { x: 0, y: 0, ...rest }) {} // Syntax Error\n        if (expr is { x: 0, y: 0, ...let rest }) {} // no Syntax Error, bind rest properties to _rest_\n        if (expr is { x: 0, y: 0, ...(isEmpty) }) {} // no Syntax Error, call isEmpty with the rest object\n      </code></pre></emu-note>\n      <emu-grammar>\n        MatchProperty :\n          PropertyName[?Yield, ?Await] `?`?\n          PropertyName[?Yield, ?Await] `?`? `:` MatchPattern[?Yield, ?Await]\n      </emu-grammar>\n      <ul>\n        <li>It is a Syntax Error if |PropertyName| can be covered by |BindingIdentifier|.</li>\n        <li>This is not a consensus in the champion group.</li>\n      </ul>\n      <emu-note code><pre><code class=\"javascript\">\n        if (expr is { x, y, z }) {} // Syntax Error\n        if (expr is { x: void, y: void, z: void }) {} // no Syntax Error\n        if (expr is { let x, let y, let z }) {} // no Syntax Error\n\n        if (expr is { if }) {} // no Syntax Error\n      </code></pre></emu-note>\n      <emu-grammar>\n        MatchList :\n          MatchElementList `,` Elision? MatchRestElement?\n      </emu-grammar>\n      <ul>\n        <li>It is a Syntax Error if IsOptionalPattern of |MatchElementList| is *true* and |Elision| is present.</li>\n      </ul>\n      <emu-grammar>\n        MatchElementList :\n          MatchElementList `,` MatchElisionElement\n      </emu-grammar>\n      <ul>\n        <li>It is a Syntax Error if IsOptionalPattern of |MatchElementList| is *true* and IsOptionalPattern of |MatchElisionElement| is *false*.</li>\n      </ul>\n      <emu-note code><pre><code class=\"javascript\">\n        value is [1, 2?, 3]; // Syntax Error\n        value is [1, 2?, 3?]; // no Syntax Error\n\n        value is [1, 2?, , ]; // Syntax Error (Elision)\n        value is [1, 2?, void?, ]; // no Syntax Error\n\n        value is [1, 2?, ...]; // no Syntax Error\n      </code></pre></emu-note>\n      <!-- endregion -->\n      <!-- #region CombinedMatchPattern -->\n      <emu-grammar>\n        CombinedMatchPattern :\n          MatchPattern `and` MatchPattern\n      </emu-grammar>\n      <ul>\n        <li>It is a Syntax Error if either of |MatchPattern|s is |CombinedMatchPattern| and does not match this production.</li>\n      </ul>\n      <emu-grammar>\n        CombinedMatchPattern :\n          MatchPattern `or` MatchPattern\n      </emu-grammar>\n      <ul>\n        <li>It is a Syntax Error if either of |MatchPattern|s is |CombinedMatchPattern| and does not match this production.</li>\n      </ul>\n      <emu-grammar>\n        CombinedMatchPattern :\n          `not` MatchPattern\n      </emu-grammar>\n      <ul>\n        <li>It is a Syntax Error if the |MatchPattern| is |CombinedMatchPattern|.</li>\n      </ul>\n      <emu-note code><pre><code class=\"javascript\">\n        value is a and b and c; // no Syntax Error\n        value is a or b or c; // no Syntax Error\n\n        value is a and b or c; // Syntax Error\n        value is (a and b) or c; // no Syntax Error\n        value is a and (b or c); // no Syntax Error\n\n        value is not not a; // Syntax Error\n        value is not (not a); // no Syntax Error\n\n        value is not a or b; // Syntax Error\n        value is not (a or b); // no Syntax Error\n      </code></pre></emu-note>\n      <!-- endregion -->\n    </emu-clause>\n\n    <emu-clause id=\"sec-is-optional-pattern\" type=\"sdo\">\n      <h1>\n        Static Semantics: IsOptionalPattern (): a Boolean\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-grammar>\n        MatchElementList : MatchElisionElement\n      </emu-grammar>\n      <emu-alg>\n        1. Return IsOptionalPattern of |MatchElisionElement|.\n      </emu-alg>\n      <emu-grammar>\n        MatchElementList : MatchElementList `,` MatchElisionElement\n      </emu-grammar>\n      <emu-alg>\n        1. If IsOptionalPattern of |MatchElementList| is *true*, return *true*.\n        1. Return IsOptionalPattern of |MatchElisionElement|.\n      </emu-alg>\n      <emu-grammar>\n        MatchElisionElement : Elision? MatchElement\n      </emu-grammar>\n      <emu-alg>\n        1. If |Elision| is present, return *false*.\n        1. Return IsOptionalPattern of |MatchElement|.\n      </emu-alg>\n      <emu-grammar>\n        MatchElement : MatchPattern `?`?\n      </emu-grammar>\n      <emu-alg>\n        1. If `?` is present, return *true*.\n        1. Return *false*.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-match-pattern-matches\" type=\"sdo\">\n      <h1>\n        Runtime Semantics: MatchPatternMatches (\n          _subject_: an ECMAScript language value,\n          _cacheGroup_: a %Map%,\n        ): either a normal completion containing a Boolean or an abrupt completion\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-grammar>\n        MatchPattern : `(` MatchPattern `)`\n      </emu-grammar>\n      <emu-alg>\n        1. Return ? MatchPatternMatches of |MatchPattern| with arguments _subject_ and _cacheGroup_.\n      </emu-alg>\n      <emu-grammar>\n        MatchPattern : PrimitivePattern\n      </emu-grammar>\n      <emu-alg>\n        1. Return PrimitivePatternMatches of |PrimitivePattern| with argument _subject_.\n      </emu-alg>\n      <emu-grammar>\n        MatchPattern : VariableDeclarationPattern\n      </emu-grammar>\n      <emu-alg>\n        1. Return VariableDeclarationPatternMatches of |VariableDeclarationPattern| with argument _subject_.\n      </emu-alg>\n      <emu-grammar>\n        MatchPattern : MemberExpressionPattern\n      </emu-grammar>\n      <emu-alg>\n        1. Return ? MemberExpressionPatternMatches of |MemberExpressionPattern| with arguments _subject_ and _cacheGroup_.\n      </emu-alg>\n      <emu-grammar>\n        MatchPattern : ObjectPattern\n      </emu-grammar>\n      <emu-alg>\n        1. Return ? ObjectPatternMatches of |ObjectPattern| with arguments _subject_ and _cacheGroup_.\n      </emu-alg>\n      <emu-grammar>\n        MatchPattern : ArrayPattern\n      </emu-grammar>\n      <emu-alg>\n        1. Return ? ArrayPatternMatches of |ArrayPattern| with arguments _subject_ and _cacheGroup_.\n      </emu-alg>\n      <emu-grammar>\n        MatchPattern : UnaryAlgebraicPattern\n      </emu-grammar>\n      <emu-alg>\n        1. Return ? UnaryAlgebraicPatternMatches of |UnaryAlgebraicPattern| with argument _subject_.\n      </emu-alg>\n      <emu-grammar>\n        MatchPattern : RelationalPattern\n      </emu-grammar>\n      <emu-alg>\n        1. Return ? RelationalPatternMatches of |RelationalPattern| with arguments _subject_.\n      </emu-alg>\n      <emu-grammar>\n        MatchPattern : IfPattern\n      </emu-grammar>\n      <emu-alg>\n        1. Return ? IfPatternMatches of |IfPattern|.\n      </emu-alg>\n      <emu-grammar>\n        MatchPattern : CombinedMatchPattern\n      </emu-grammar>\n      <emu-alg>\n        1. Return ? CombinedMatchPatternMatches of |CombinedMatchPattern| with arguments _subject_ and _cacheGroup_.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-primitive-pattern-matches\" type=\"sdo\">\n      <h1>\n        Runtime Semantics: PrimitivePatternMatches (\n          _subject_: an ECMAScript language value,\n        ): a Boolean\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-grammar>\n        PrimitivePattern : Literal\n      </emu-grammar>\n      <emu-alg>\n        1. Return SameValueZero(_subject_, ! Evaluation of |Literal|).\n      </emu-alg>\n      <emu-grammar>\n        PrimitivePattern : NoSubstitutionTemplate\n      </emu-grammar>\n      <emu-alg>\n        1. Return SameValueNonNumber(_subject_, ! Evaluation of |NoSubstitutionTemplate|).\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-variable-declaration-pattern-matches\" type=\"sdo\">\n      <h1>\n        Runtime Semantics: VariableDeclarationPatternMatches (\n          _subject_: an ECMAScript language value,\n        ): a Boolean\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-grammar>\n        VariableDeclarationPattern : VarOrLetOrConst BindingIdentifier\n      </emu-grammar>\n      <emu-alg>\n        1. TODO: This section is not written in the spec language yet.\n        1. Let _name_ be StringValue of |BindingIdentifier|.\n        1. Initialize variable _name_ with _subject_ with the semantics of `var`, `let` or `const` based on |VarOrLetOrConst|.\n        1. Return *true*.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-member-expression-pattern-matches\" type=\"sdo\">\n      <h1>\n        Runtime Semantics: MemberExpressionPatternMatches (\n          _subject_: an ECMAScript language value,\n          _cacheGroup_: a %Map%,\n        ): either a normal completion containing a Boolean or an abrupt completion\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-grammar>\n        MemberExpressionPattern : PatternMatchingMemberExpression\n      </emu-grammar>\n      <emu-alg>\n        1. Let _expr_ be the |LeftHandSideExpression| that is covered by |PatternMatchingMemberExpression|.\n        1. Let _ref_ be ? Evaluation of _expr_.\n        1. Let _value_ be ? GetValue(_ref_).\n        1. If _ref_ is a Reference Record and IsPropertyReference(_ref_) is *true*, let _receiver_ be GetThisValue(_ref_).\n        1. Else, let _receiver_ be *null*.\n        1. Let _result_ be ? InvokeCustomMatcher(_value_, _subject_, _cacheGroup_, ~boolean~, _receiver_).\n        1. Assert: _result_ is a Boolean.\n        1. Return _result_.\n      </emu-alg>\n      <emu-grammar>\n        MemberExpressionPattern : PatternMatchingMemberExpression `(` MatchList? `)`\n      </emu-grammar>\n      <emu-alg>\n        1. Let _expr_ be the |LeftHandSideExpression| that is covered by |PatternMatchingMemberExpression|.\n        1. Let _ref_ be ? Evaluation of _expr_.\n        1. Let _value_ be ? GetValue(_ref_).\n        1. If _ref_ is a Reference Record and IsPropertyReference(_ref_) is *true*, let _receiver_ be GetThisValue(_ref_).\n        1. Else, let _receiver_ be *null*.\n        1. Let _listMatchResult_ be ? InvokeCustomMatcher(_value_, _subject_, _cacheGroup_, ~list~, _receiver_).\n        1. If _listMatchResult_ is *false*, return *false*.\n        1. Assert: _listMatchResult_ is an Iterator Record.\n        1. If |MatchList| is not present, then\n          1. Return ? FinishListMatch(_listMatchResult_, _cacheGroup_, 0).\n        1. Return ? ListPatternMatches of |MatchList| with arguments _listMatchResult_ and _cacheGroup_.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-object-pattern-matches\" type=\"sdo\">\n      <h1>\n        Runtime Semantics: ObjectPatternMatches (\n          _subject_: an ECMAScript language value,\n          _cacheGroup_: a %Map%,\n        ): either a normal completion containing a Boolean or an abrupt completion\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-grammar>\n        ObjectPattern : `{` `}`\n      </emu-grammar>\n      <emu-alg>\n        1. If _subject_ is an Object, return *true*.\n        1. Return *false*.\n      </emu-alg>\n      <emu-grammar>\n        ObjectPattern : `{` MatchRestProperty `}`\n      </emu-grammar>\n      <emu-alg>\n        1. If _subject_ is not an Object, return *false*.\n        1. Let _matches_ be ? ObjectPatternInnerMatches of |MatchRestProperty| with arguments _subject_, _cacheGroup_ and a new empty List.\n        1. If _matches_ is ~not-matched~, return *false*.\n        1. Return *true*.\n      </emu-alg>\n      <emu-grammar>\n        ObjectPattern : `{` MatchPropertyList `,`? `}`\n      </emu-grammar>\n      <emu-alg>\n        1. If _subject_ is not an Object, return *false*.\n        1. Let _matches_ be ? ObjectPatternInnerMatches of |MatchPropertyList| with arguments _subject_, _cacheGroup_ and a new empty List.\n        1. If _matches_ is ~not-matched~, return *false*.\n        1. Return *true*.\n      </emu-alg>\n      <emu-grammar>\n        ObjectPattern : `{` MatchPropertyList `,` MatchRestProperty `}`\n      </emu-grammar>\n      <emu-alg>\n        1. If _subject_ is not an Object, return *false*.\n        1. Let _matches_ be ? ObjectPatternInnerMatches of |MatchPropertyList| with arguments _subject_, _cacheGroup_ and a new empty List.\n        1. If _matches_ is ~not-matched~, return *false*.\n        1. If |MatchRestProperty| is not present, return *true*.\n        1. Let _restMatches_ be ? ObjectPatternInnerMatches of |MatchRestProperty| with arguments _subject_, _cacheGroup_ and _matches_.\n        1. If _restMatches_ is ~not-matched~, return *false*.\n        1. Return *true*.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-object-pattern-inner-matches\" type=\"sdo\">\n      <h1>\n        Runtime Semantics: ObjectPatternInnerMatches (\n          _subject_: an Object,\n          _cacheGroup_: a %Map%,\n          _excludedNames_: a List of String,\n        ): either a normal completion containing either a List of String or ~not-matched~, or an abrupt completion\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-grammar>\n        MatchRestProperty : `...` MatchPattern\n      </emu-grammar>\n      <emu-alg>\n        1. Let _restObj_ be OrdinaryObjectCreate(%Object.prototype%).\n        1. Perform ? CopyDataProperties(_restObj_, _subject_, _excludedNames_).\n        1. Let _matches_ be ? MatchPatternMatches of |MatchPattern| with arguments _restObj_ and _cacheGroup_.\n        1. If _matches_ is *false*, return ~not-matched~.\n        1. Return « ».\n      </emu-alg>\n      <emu-grammar>\n        MatchPropertyList : MatchProperty\n      </emu-grammar>\n      <emu-alg>\n        1. Return ? ObjectPatternInnerMatches of |MatchProperty| with arguments _subject_, _cacheGroup_ and _excludedNames_.\n      </emu-alg>\n      <emu-grammar>\n        MatchPropertyList : MatchPropertyList `,` MatchProperty\n      </emu-grammar>\n      <emu-alg>\n        1. Let _matches_ be ? ObjectPatternInnerMatches of |MatchProperty| with arguments _subject_, _cacheGroup_ and _excludedNames_.\n        1. If _matches_ is ~not-matched~, return ~not-matched~.\n        1. Let _propMatches_ be ? ObjectPatternInnerMatches of |MatchPropertyList| with arguments _subject_, _cacheGroup_ and _matches_.\n        1. If _propMatches_ is ~not-matched~, return ~not-matched~.\n        1. Assert: _matches_ and _propMatches_ are Lists of String.\n        1. Return the list-concatenation of _matches_ and _propMatches_.\n      </emu-alg>\n      <emu-grammar>\n        MatchProperty : PropertyName `?`?\n      </emu-grammar>\n      <emu-alg>\n        1. Let _propertyName_ be ? Evaluation of |PropertyName|.\n        1. If ? HasPropertyCached(_subject_, _cacheGroup_, _propertyName_) is *false*, then\n          1. If `?` is present, return « ».\n          1. Return ~not-matched~.\n        1. Return « _propertyName_ ».\n      </emu-alg>\n      <emu-grammar>\n        MatchProperty : PropertyName `?`? `:` MatchPattern\n      </emu-grammar>\n      <emu-alg>\n        1. Let _propertyName_ be ? Evaluation of |PropertyName|.\n        1. If ? HasPropertyCached(_subject_, _cacheGroup_, _propertyName_) is *false*, then\n          1. If `?` is present, return « ».\n          1. Return ~not-matched~.\n        1. Let _value_ be ? GetCached(_subject_, _cacheGroup_, _propertyName_).\n        1. Let _matches_ be ? MatchPatternMatches of |MatchPattern| with arguments _value_ and _cacheGroup_.\n        1. If _matches_ is *false*, return ~not-matched~.\n        1. Return « _propertyName_ ».\n      </emu-alg>\n      <emu-grammar>\n        MatchProperty : VarOrLetOrConst BindingIdentifier `?`?\n      </emu-grammar>\n      <emu-alg>\n        1. TODO: This section is not written in the spec language yet.\n        1. Let _propertyName_ be StringValue of |BindingIdentifier|.\n        1. If ? HasPropertyCached(_subject_, _cacheGroup_, _propertyName_) is *false*, then\n          1. If `?` is present, return « ».\n          1. Return ~not-matched~.\n        1. Let _value_ be ? GetCached(_subject_, _cacheGroup_, _propertyName_).\n        1. Initialize variable _propertyName_ with _value_ with the semantics of `var`, `let` or `const` based on |VarOrLetOrConst|.\n        1. Return « _propertyName_ ».\n      </emu-alg>\n      <emu-grammar>\n        MatchProperty : VarOrLetOrConst BindingIdentifier `?`? `:` MatchPattern\n      </emu-grammar>\n      <emu-alg>\n        1. TODO: This section is not written in the spec language yet.\n        1. Let _propertyName_ be StringValue of |BindingIdentifier|.\n        1. If ? HasPropertyCached(_subject_, _cacheGroup_, _propertyName_) is *false*, then\n          1. If `?` is present, return « ».\n          1. Return ~not-matched~.\n        1. Let _value_ be ? GetCached(_subject_, _cacheGroup_, _propertyName_).\n        1. Let _matches_ be ? MatchPatternMatches of |MatchPattern| with arguments _value_ and _cacheGroup_.\n        1. If _matches_ is *false*, return ~not-matched~.\n        1. Initialize variable _propertyName_ with _value_ with the semantics of `var`, `let` or `const` based on |VarOrLetOrConst|.\n        1. Return « _propertyName_ ».\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-array-pattern-matches\" type=\"sdo\">\n      <h1>\n        Runtime Semantics: ArrayPatternMatches (\n          _subject_: an ECMAScript language value,\n          _cacheGroup_: a %Map%,\n        ): either a normal completion containing a Boolean or an abrupt completion\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-grammar>\n        ArrayPattern : `[` MatchList? `]`\n      </emu-grammar>\n      <emu-alg>\n        1. If IsCallable(? GetCached(_subject_, _cacheGroup_, %Symbol.iterator%)) is *false*, return *false*.\n        1. Let _iteratorRecord_ be ? GetIteratorCached(_subject_, _cacheGroup_).\n        1. If |MatchList| is not present, then\n          1. Return ? FinishListMatch(_subject_, _cacheGroup_, 0).\n        1. Return ? ListPatternMatches of |MatchList| with arguments _iteratorRecord_ and _cacheGroup_.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-list-pattern-matches\" type=\"sdo\">\n      <h1>\n        Runtime Semantics: ListPatternMatches (\n          _iterator_: an Iterator Record,\n          _cacheGroup_: a %Map%,\n        ): either a normal completion containing a Boolean or an abrupt completion\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-grammar>\n        MatchList : Elision? MatchRestElement?\n      </emu-grammar>\n      <emu-alg>\n        1. Let _visitedCount_ be 0.\n        1. If |Elision| is present, then\n          1. If ? GetIteratorNthValueCached(_iterator_, _cacheGroup_, 0) is ~not-matched~, return *false*.\n          1. Set _visitedCount_ to 1.\n        1. If |MatchRestElement| is present, then\n          1. Let _matches_ be ? ListPatternInnerMatches of |MatchRestElement| with arguments _iterator_, _cacheGroup_ and _visitedCount_.\n          1. Return ? FinishListMatch(_iterator_, _cacheGroup_, _matches_).\n        1. Return ? FinishListMatch(_iterator_, _cacheGroup_, _visitedCount_).\n      </emu-alg>\n      <emu-grammar>\n        MatchList : MatchElementList\n      </emu-grammar>\n      <emu-alg>\n        1. Let _matches_ be ? ListPatternInnerMatches of |MatchElementList| with arguments _iterator_, _cacheGroup_ and 0.\n        1. Return ? FinishListMatch(_iterator_, _cacheGroup_, _matches_).\n      </emu-alg>\n      <emu-grammar>\n        MatchList : MatchElementList `,` Elision? MatchRestElement?\n      </emu-grammar>\n      <emu-alg>\n        1. Let _visitedCount_ be ? ListPatternInnerMatches of |MatchElementList| with arguments _iterator_, _cacheGroup_ and 0.\n        1. If _visitedCount_ is ~not-matched~, return *false*.\n        1. Assert: _visitedCount_ is a non-negative integer.\n        1. If |Elision| is present, then\n          1. If ? GetIteratorNthValueCached(_iterator_, _cacheGroup_, _visitedCount_) is ~not-matched~, return *false*.\n          1. Set _visitedCount_ to _visitedCount_ + 1.\n        1. If |MatchRestElement| is present, then\n          1. Let _matches_ be ? ListPatternInnerMatches of |MatchRestElement| with arguments _iterator_, _cacheGroup_ and _visitedCount_.\n          1. Return ? FinishListMatch(_iterator_, _cacheGroup_, _matches_).\n        1. Return ? FinishListMatch(_iterator_, _cacheGroup_, _visitedCount_).\n      </emu-alg>\n      <emu-note>\n        It is possible to use array-like object or IsArray semantics rather than iterator protocol if there is performance issue reported from the engine.\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-list-pattern-inner-matches\" type=\"sdo\">\n      <h1>\n        Runtime Semantics: ListPatternInnerMatches (\n          _iterator_: an Iterator Record,\n          _cacheGroup_: a %Map%,\n          _startIndex_: a non-negative integer,\n        ): either a normal completion containing either a non-negative integer, ~unlimited~ or ~not-matched~, or an abrupt completion\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-grammar>\n         MatchElementList : MatchElisionElement\n      </emu-grammar>\n      <emu-alg>\n        1. Return ? ListPatternInnerMatches of |MatchElisionElement| with arguments _iterator_, _cacheGroup_ and _startIndex_.\n      </emu-alg>\n      <emu-grammar>\n         MatchElementList : MatchElementList `,` MatchElisionElement\n      </emu-grammar>\n      <emu-alg>\n        1. Let _visitedCount_ be ? ListPatternInnerMatches of |MatchElementList| with arguments _iterator_, _cacheGroup_ and _startIndex_.\n        1. If _visitedCount_ is ~not-matched~, return ~not-matched~.\n        1. Assert: _visitedCount_ is a non-negative integer.\n        1. Let _matches_ be ? ListPatternInnerMatches of |MatchElisionElement| with arguments _iterator_, _cacheGroup_ and _startIndex_ + _visitedCount_.\n        1. If _matches_ is ~not-matched~, return ~not-matched~.\n        1. Assert: _matches_ is a non-negative integer.\n        1. Return _visitedCount_ + _matches_.\n      </emu-alg>\n      <emu-grammar>\n         MatchElisionElement : Elision? MatchElement\n      </emu-grammar>\n      <emu-alg>\n        1. Let _visitedCount_ be 0.\n        1. If |Elision| is present, then\n          1. If ? GetIteratorNthValueCached(_iterator_, _cacheGroup_, _startIndex_) is ~not-matched~, return ~not-matched~.\n          1. Set _visitedCount_ to _visitedCount_ + 1.\n        1. Let _matches_ be ? ListPatternInnerMatches of |MatchElement| with arguments _iterator_, _cacheGroup_ and _startIndex_ + _visitedCount_.\n        1. If _matches_ is ~not-matched~, return ~not-matched~.\n        1. Assert: _matches_ is a non-negative integer.\n        1. Return _visitedCount_ + _matches_.\n      </emu-alg>\n      <emu-grammar>\n         MatchElement : MatchPattern `?`?\n      </emu-grammar>\n      <emu-alg>\n        1. Let _value_ be ? GetIteratorNthValueCached(_iterator_, _cacheGroup_, _startIndex_).\n        1. If _value_ is ~not-matched~, then\n          1. If `?` is present, return 1.\n          1. Return ~not-matched~.\n        1. Let _matches_ be ? MatchPatternMatches of |MatchPattern| with arguments _value_ and _cacheGroup_.\n        1. If _matches_ is *false*, return ~not-matched~.\n        1. Return 1.\n      </emu-alg>\n      <emu-grammar>\n        MatchRestElement : `...`\n      </emu-grammar>\n      <emu-alg>\n        1. Return ~unlimited~.\n      </emu-alg>\n      <emu-grammar>\n        MatchRestElement : `...` MatchPattern\n      </emu-grammar>\n      <emu-alg>\n        1. Let _elements_ be a new empty List.\n        1. Let _i_ be _startIndex_.\n        1. Let _next_ be ~unused~.\n        1. Repeat, while _next_ is not ~not-matched~,\n          1. Set _next_ to ? GetIteratorNthValueCached(_iterator_, _cacheGroup_, _i_).\n          1. If _next_ is not ~not-matched~, append _next_ to _elements_.\n          1. Set _i_ to _i_ + 1.\n        1. Let _rest_ be CreateArrayFromList(_elements_).\n        1. Let _matches_ be ? MatchPatternMatches of |MatchPattern| with arguments _rest_ and _cacheGroup_.\n        1. If _matches_ is *false*, return ~not-matched~.\n        1. Return ~unlimited~.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-unary-algebraic-pattern-matches\" type=\"sdo\">\n      <h1>\n        Runtime Semantics: UnaryAlgebraicPatternMatches (\n          _subject_: an ECMAScript language value,\n        ): either a normal completion containing a Boolean or an abrupt completion\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-grammar>\n        UnaryAlgebraicPattern : PatternMatchingUnaryAlgebraicExpression\n      </emu-grammar>\n      <emu-alg>\n        1. Let _expr_ be the |Expression| that is covered by |PatternMatchingUnaryAlgebraicExpression|.\n        1. Let _ref_ be ? Evaluation of _expr_.\n        1. Let _value_ be ? GetValue(_ref_).\n        1. If |PatternMatchingUnaryAlgebraicExpression| is `+` |NumericLiteral| or `-` |NumericLiteral|, return SameValue(_subject_, _value_).\n        1. Return SameValueZero(_subject_, _value_).\n      </emu-alg>\n      <emu-note type=\"editor\">\n        <p>Only literal `+0` or `-0` will be matched with SameValue, `+`_x_ and `-`_x_ where _x_ is 0 will be matched with SameValueZero.</p>\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-relational-pattern-matches\" type=\"sdo\">\n      <h1>\n        Runtime Semantics: RelationalPatternMatches (\n          _subject_: an ECMAScript language value,\n        ): either a normal completion containing a Boolean or an abrupt completion\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-grammar>\n        RelationalPattern : `&lt;` PatternMatchingRelationalExpression\n      </emu-grammar>\n      <emu-alg>\n        1. If _subject_is not a String, a Number or a BigInt, return *false*.\n        1. Let _expr_ be the |Expression| that is covered by |PatternMatchingRelationalExpression|.\n        1. Let _ref_ be ? Evaluation of _expr_.\n        1. Let _value_ be ? GetValue(_ref_).\n        1. Let _r_ be ? IsLessThan(_subject_, _value_, *true*).\n        1. If _r_ is *undefined*, return *false*. Otherwise, return _r_.\n      </emu-alg>\n      <emu-grammar>\n        RelationalPattern : `&gt;` PatternMatchingRelationalExpression\n      </emu-grammar>\n      <emu-alg>\n        1. If _subject_is not a String, a Number or a BigInt, return *false*.\n        1. Let _expr_ be the |Expression| that is covered by |PatternMatchingRelationalExpression|.\n        1. Let _ref_ be ? Evaluation of _expr_.\n        1. Let _value_ be ? GetValue(_ref_).\n        1. Let _r_ be ? IsLessThan(_value_, _subject_, *false*).\n        1. If _r_ is *undefined*, return *false*. Otherwise, return _r_.\n      </emu-alg>\n      <emu-grammar>\n        RelationalPattern : `&lt;=` PatternMatchingRelationalExpression\n      </emu-grammar>\n      <emu-alg>\n        1. If _subject_is not a String, a Number or a BigInt, return *false*.\n        1. Let _expr_ be the |Expression| that is covered by |PatternMatchingRelationalExpression|.\n        1. Let _ref_ be ? Evaluation of _expr_.\n        1. Let _value_ be ? GetValue(_ref_).\n        1. Let _r_ be ? IsLessThan(_subject_, _value_, *true*).\n        1. If _r_ is either *true* or *undefined*, return *false*. Otherwise, return *true*.\n      </emu-alg>\n      <emu-grammar>\n        RelationalPattern : `&gt;=` PatternMatchingRelationalExpression\n      </emu-grammar>\n      <emu-alg>\n        1. If _subject_is not a String, a Number or a BigInt, return *false*.\n        1. Let _expr_ be the |Expression| that is covered by |PatternMatchingRelationalExpression|.\n        1. Let _ref_ be ? Evaluation of _expr_.\n        1. Let _value_ be ? GetValue(_ref_).\n        1. Let _r_ be ? IsLessThan(_value_, _subject_, *false*).\n        1. If _r_ is either *true* or *undefined*, return *false*. Otherwise, return *true*.\n      </emu-alg>\n      <emu-grammar>\n        RelationalPattern : `instanceof` PatternMatchingMemberExpression\n      </emu-grammar>\n      <emu-alg>\n        1. Let _expr_ be the |Expression| that is covered by |PatternMatchingMemberExpression|.\n        1. Let _ref_ be ? Evaluation of _expr_.\n        1. Let _value_ be ? GetValue(_ref_).\n        1. Return ? InstanceofOperator(_subject_, _value_).\n      </emu-alg>\n      <emu-grammar>\n        RelationalPattern : `in` PatternMatchingMemberExpression\n      </emu-grammar>\n      <emu-alg>\n        1. If _subject_ is not a property key, return *false*.\n        1. Let _expr_ be the |Expression| that is covered by |PatternMatchingMemberExpression|.\n        1. Let _ref_ be ? Evaluation of _expr_.\n        1. Let _value_ be ? GetValue(_ref_).\n        1. If _value_ is not an Object, return *false*.\n        1. Return ? HasProperty(_value_, _subject_).\n      </emu-alg>\n      <emu-grammar>\n        RelationalPattern : `==` PatternMatchingRelationalExpression\n      </emu-grammar>\n      <emu-alg>\n        1. Let _expr_ be the |Expression| that is covered by |PatternMatchingRelationalExpression|.\n        1. Let _ref_ be ? Evaluation of _expr_.\n        1. Let _value_ be ? GetValue(_ref_).\n        1. Return ? IsLooselyEqual(_subject_, _value_).\n      </emu-alg>\n      <emu-grammar>\n        RelationalPattern : `!=` PatternMatchingRelationalExpression\n      </emu-grammar>\n      <emu-alg>\n        1. Let _expr_ be the |Expression| that is covered by |PatternMatchingRelationalExpression|.\n        1. Let _ref_ be ? Evaluation of _expr_.\n        1. Let _value_ be ? GetValue(_ref_).\n        1. Let _r_ be ? IsLooselyEqual(_subject_, _value_).\n        1. If _r_ is *true*, return *false*. Otherwise, return *true*.\n      </emu-alg>\n      <emu-grammar>\n        RelationalPattern : `===` PatternMatchingRelationalExpression\n      </emu-grammar>\n      <emu-alg>\n        1. Let _expr_ be the |Expression| that is covered by |PatternMatchingRelationalExpression|.\n        1. Let _ref_ be ? Evaluation of _expr_.\n        1. Let _value_ be ? GetValue(_ref_).\n        1. Return IsStrictlyEqual(_subject_, _value_).\n      </emu-alg>\n      <emu-grammar>\n        RelationalPattern : `!==` PatternMatchingRelationalExpression\n      </emu-grammar>\n      <emu-alg>\n        1. Let _expr_ be the |Expression| that is covered by |PatternMatchingRelationalExpression|.\n        1. Let _ref_ be ? Evaluation of _expr_.\n        1. Let _value_ be ? GetValue(_ref_).\n        1. Let _r_ be IsStrictlyEqual(_subject_, _value_).\n        1. If _r_ is *true*, return *false*. Otherwise, return *true*.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-if-pattern-matches\" type=\"sdo\">\n      <h1>\n        Runtime Semantics: IfPatternMatches ( ): either a normal completion containing a Boolean or an abrupt completion\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-grammar>\n        IfPattern : `if` `(` Expression `)`\n      </emu-grammar>\n      <emu-alg>\n        1. Let _result_ be ? Evaluation of |Expression|.\n        1. Return ToBoolean(_result_).\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-combined-match-pattern-matches\" type=\"sdo\">\n      <h1>\n        Runtime Semantics: CombinedMatchPatternMatches (\n          _subject_: an ECMAScript language value,\n          _cacheGroup_: a %Map%,\n        ): either a normal completion containing a Boolean or an abrupt completion\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-grammar>\n        CombinedMatchPattern : MatchPattern `and` MatchPattern\n      </emu-grammar>\n      <emu-alg>\n        1. Let _leftMatches_ be ? MatchPatternMatches of the first |MatchPattern| with arguments _subject_ and _cacheGroup_.\n        1. If _leftMatches_ is *false*, return *false*.\n        1. Return ? MatchPatternMatches of the second |MatchPattern| with arguments _subject_ and _cacheGroup_.\n      </emu-alg>\n      <emu-grammar>\n        CombinedMatchPattern : MatchPattern `or` MatchPattern\n      </emu-grammar>\n      <emu-alg>\n        1. Let _leftMatches_ be ? MatchPatternMatches of the first |MatchPattern| with arguments _subject_ and _cacheGroup_.\n        1. If _leftMatches_ is *true*, return *true*.\n        1. Return ? MatchPatternMatches of the second |MatchPattern| with arguments _subject_ and _cacheGroup_.\n      </emu-alg>\n      <emu-grammar>\n        CombinedMatchPattern : `not` MatchPattern\n      </emu-grammar>\n      <emu-alg>\n        1. Let _matches_ be ? MatchPatternMatches of |MatchPattern| with arguments _subject_ and _cacheGroup_.\n        1. If _matches_ is *true*, return *false*.\n        1. Return *true*.\n      </emu-alg>\n    </emu-clause>\n  </emu-clause>\n\n  <emu-clause id=\"sec-match-expression\">\n    <h1>The `match` Expression</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\">\n      MatchExpression[Yield, Await] :\n        CoverCallExpressionAndAsyncArrowHead[?Yield, ?Await] [no LineTerminator here] `{` MatchExpressionClauses[?Yield, ?Await] `;` `}`\n\n      MatchExpressionClauses[Yield, Await] :\n        MatchExpressionClause[?Yield, ?Await]\n        MatchExpressionClauses[?Yield, ?Await] `;` MatchExpressionClause[?Yield, ?Await]\n        MatchExpressionClauses[?Yield, ?Await] `;` `default` `:` Expression[+In, ?Yield, ?Await]\n        `default` `:` Expression[+In, ?Yield, ?Await]\n\n      MatchExpressionClause[Yield, Await] :\n        MatchPattern[?Yield, ?Await] `:` Expression[+In, ?Yield, ?Await]\n    </emu-grammar>\n    <h2>Supplemental Syntax</h2>\n    <p>\n      When processing an instance of the production<br>\n      <emu-grammar>MatchExpression : CoverCallExpressionAndAsyncArrowHead `{` MatchExpressionClauses `;` `}`</emu-grammar><br>\n      the interpretation of |CoverCallExpressionAndAsyncArrowHead| is refined using the following grammar:\n    </p>\n    <emu-grammar type=\"definition\">\n      MatchHead :\n        `match` [no LineTerminator here] `(` Expression `)`\n    </emu-grammar>\n    <emu-note code>\n      <pre><code class=\"javascript\">\n        const result = match (value) {\n          { op: \"add\", let lhs, let rhs }: lhs + rhs,\n          { op: \"sub\", let lhs, let rhs }: lhs - rhs,\n          { op: \"mul\", let lhs, let rhs }: lhs * rhs,\n          { op: \"div\", let lhs, let rhs }: lhs / rhs,\n        }\n      </code></pre>\n    </emu-note>\n    <emu-note type=\"editor\">\n      <p>\n        If <a href=\"https://github.com/tc39/proposal-do-expressions\" target=\"_blank\">the `do` expression proposal</a> will never happen,\n        we will need to add a statement version of |MatchExpression|.\n      </p>\n      <pre><code class=\"javascript\">\n        match (value) {\n          { let x, let y, let z }: do {\n            const w = average(x, y, z);\n            return w * w;\n          },\n          // ...\n        }\n      </code></pre>\n    </emu-note>\n    <emu-note type=\"editor\">\n      This feature can be replaced by the <emu-xref href=\"#sec-relational-operators\">`is` expression</emu-xref>.\n      The code example above can be written as:\n      <pre><code class=\"javascript\">\n        const result =\n          value is { op: \"add\", var lhs, var rhs } ? lhs + rhs :\n          value is { op: \"sub\", var lhs, var rhs } ? lhs - rhs :\n          value is { op: \"mul\", var lhs, var rhs } ? lhs * rhs :\n          value is { op: \"div\", var lhs, var rhs } ? lhs / rhs :\n          (() => { throw new TypeError() })\n      </code></pre>\n    </emu-note>\n    <emu-note type=\"editor\">\n      It is syntactically impossible to have a match expression that\n      <ul>\n        <li>has no clause.</li>\n        <li>has multiple `default` clauses.</li>\n        <li>the `default` clause is not the final clause.</li>\n      </ul>\n    </emu-note>\n    <emu-note type=\"editor\">\n      Rename |CoverCallExpressionAndAsyncArrowHead| to CoverCallExpressionAndAsyncArrowHeadAndMatchHead.\n    </emu-note>\n\n    <emu-clause id=\"sec-match-expression-static-semantics-early-errors\">\n        <h1>Static Semantics: Early Errors</h1>\n        <emu-grammar>\n          MatchExpression : CoverCallExpressionAndAsyncArrowHead `{` MatchExpressionClauses `;` `}`\n        </emu-grammar>\n        <ul>\n            <li>|CoverCallExpressionAndAsyncArrowHead| must cover an |MatchHead|.</li>\n        </ul>\n    </emu-clause>\n\n    <emu-clause id=\"sec-match-expression-runtime-semantics-evaluation\">\n      <h1>Runtime Semantics: Evaluation</h1>\n      <emu-grammar>\n        MatchExpression : CoverCallExpressionAndAsyncArrowHead `{` MatchExpressionClauses `;` `}`\n      </emu-grammar>\n      <emu-alg>\n        1. Let _head_ be the |MatchHead| that is covered by |CoverCallExpressionAndAsyncArrowHead|.\n        1. Let _subjectParseNode_ be the |Expression| of _head_.\n        1. Let _subjectRef_ be the ? Evaluation of _subjectParseNode_.\n        1. Let _subject_ be ? GetValue(_subjectRef_).\n        1. Let _cacheGroup_ be CreateMatchCache().\n        1. Let _matchCompletion_ be Completion(MatchExpressionClausesEvaluation of |MatchExpressionClauses| with arguments _subject_ and _cacheGroup_).\n        1. Let _result_ be Completion(FinishMatch(_matchCompletion_, _cacheGroup_)).\n        1. Assert: _result_ is a normal completion or an abrupt completion.\n        1. Return _result_.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-match-expression-clauses-runtime-semantics-evaluation\" type=\"sdo\">\n      <h1>\n        Runtime Semantics: MatchExpressionClausesEvaluation (\n          _subject_: an ECMAScript language value,\n          _cacheGroup_: a %Map%,\n        ): either a normal completion containing either an ECMAScript language value or ~not-matched~, or an abrupt completion\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-grammar>\n        MatchExpressionClauses : MatchExpressionClause\n      </emu-grammar>\n      <emu-alg>\n        1. Return ? MatchExpressionClauseEvaluation of |MatchExpressionClause| with arguments _subject_ and _cacheGroup_.\n      </emu-alg>\n      <emu-grammar>\n        MatchExpressionClauses : MatchExpressionClauses `;` MatchExpressionClause\n      </emu-grammar>\n      <emu-alg>\n        1. Let _result_ be ? MatchExpressionClausesEvaluation of |MatchExpressionClauses| with arguments _subject_ and _cacheGroup_.\n        1. If _result_ is an ECMAScript language value, return _result_.\n        1. Assert: _result_ is ~not-matched~.\n        1. Return ? MatchExpressionClauseEvaluation of |MatchExpressionClause| with arguments _subject_ and _cacheGroup_.\n      </emu-alg>\n      <emu-grammar>\n        MatchExpressionClauses : MatchExpressionClauses `;` `default` `:` Expression\n      </emu-grammar>\n      <emu-alg>\n        1. Let _result_ be ? MatchExpressionClausesEvaluation of |MatchExpressionClauses| with arguments _subject_ and _cacheGroup_.\n        1. If _result_ is an ECMAScript language value, return _result_.\n        1. Assert: _result_ is ~not-matched~.\n        1. Return ? Evaluation of |Expression|.\n      </emu-alg>\n      <emu-grammar>\n        MatchExpressionClauses : `default` `:` Expression\n      </emu-grammar>\n      <emu-alg>\n        1. Return ? Evaluation of |Expression|.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-match-expression-clause-runtime-semantics-evaluation\" type=\"sdo\">\n      <h1>\n        Runtime Semantics: MatchExpressionClauseEvaluation (\n          _subject_: an ECMAScript language value,\n          _cacheGroup_: a %Map%,\n        ): either a normal completion containing either an ECMAScript language value or ~not-matched~, or an abrupt completion\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-grammar>\n        MatchExpressionClause : MatchPattern `:` Expression\n      </emu-grammar>\n      <emu-alg>\n        1. Let _matches_ be ? MatchPatternMatches of |MatchPattern| with arguments _subject_ and _cacheGroup_.\n        1. If _matches_ is *true*, return ? Evaluation of |Expression|.\n        1. Return ~not-matched~.\n      </emu-alg>\n    </emu-clause>\n  </emu-clause>\n\n  <emu-clause id=\"sec-abstract-operations-for-pattern-matching\">\n    <h1>Abstract Operations for Pattern Matching</h1>\n\n    <emu-clause id=\"sec-invoke-custom-matcher\" type=\"abstract operation\">\n      <h1>\n        InvokeCustomMatcher (\n          _matcher_: an ECMAScript language value,\n          _subject_: an ECMAScript language value,\n          _cacheGroup_: a %Map%,\n          _kind_: ~boolean~ or ~list~,\n          _receiver_: an ECMAScript language value,\n        ): either a normal completion containing either a Boolean or an Iterator Record, or an abrupt completion\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-alg>\n        1. If _matcher_ is not an Object, then\n          1. If _kind_ is ~boolean~, return SameValueZero(_matcher_, _subject_).\n          1. Throw a *TypeError* exception.\n        1. Let _f_ be ? Get(_matcher_, %Symbol.customMatcher%).\n        1. If _f_ is *undefined*, then\n          1. If _kind_ is ~boolean~, return SameValueNonNumber(_matcher_, _subject_).\n          1. Throw a *TypeError* exception.\n        1. If _kind_ is ~boolean~, let _hint_ be *\"boolean\"*.\n        1. Else, let _hint_ be *\"list\"*.\n        1. Let _result_ be ? Call(_f_, _matcher_, « _subject_, _hint_, _receiver_ »).\n        1. If _result_ is *false*, return *false*.\n        1. [id=\"step-invoke-custom-matcher\"] If _kind_ is ~boolean~, return ToBoolean(_result_).\n        1. If _result_ is not an Object, throw a *TypeError* exception.\n        1. Perform ? GetIteratorCached(_result_, _cacheGroup_).\n        1. Return _result_.\n      </emu-alg>\n      <emu-note type=\"editor\">\n        The _hint_ parameter is not a consensus in the champion group yet. This design is to solve <a href=\"https://github.com/tc39/proposal-pattern-matching/issues/253\" target=\"_blank\">runtime performance concerns about custom matchers</a>.\n      </emu-note>\n      <emu-note type=\"editor\">\n        The _receiver_ parameter is not a consensus in the champion group yet. This design is to keep the `this` value when calling the custom matchers. Not everyone in the champion group agrees we need to keep the `this` value.\n        <pre><code class=\"javascript\">\n          const zero = new BigNumber(0);\n          match (expr) {\n            zero.equal: console.log('zero point matched.');\n            BigNumber: console.log(expr.toString() + ' left.');\n          }\n        </code></pre>\n      </emu-note>\n      <emu-note type=\"editor\">\n        The ToBoolean in step <emu-xref href=\"#step-invoke-custom-matcher\"></emu-xref> cause a strange behaviour around <a href=\"#sec-IsHTMLDDA-internal-slot-to-boolean\" target=\"_blank\">[[IsHTMLDDA]]</a>.\n        <pre><code class=\"javascript\">\n          function f() { return document.all; }\n          if (null is f) {}\n          // not match, by ToBoolean\n          if (null is f(let html, ...)) {}\n          // match, because document.all is an object and has [Symbol.iterator].\n        </code></pre>\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-validatecustommatcherhint\" type=\"abstract operation\">\n        <h1>\n            ValidateCustomMatcherHint (\n                _hint_: an ECMAScript language value,\n                optional _kind_: ~boolean~ or ~list~,\n            ): either a normal completion containing ~unused~ or a throw completion\n        </h1>\n        <dl class=\"header\">\n        </dl>\n        <emu-alg>\n            1. If _hint_ is not *\"boolean\"* or *\"list\"*, throw a *TypeError* exception.\n            1. If _kind_ is not present, return ~unused~.\n            1. If _hint_ is *\"boolean\"* and _kind_ is ~list~, throw a *TypeError* exception.\n            1. If _hint_ is *\"list\"* and _kind_ is ~boolean~, throw a *TypeError* exception.\n            1. Return ~unused~.\n        </emu-alg>\n    </emu-clause>\n    <emu-note type=\"editor\" id=\"sec-pattern-match-cache-note\">\n      The following sections describe how pattern matching matches the _subject_ with a cache. Those sections use %Map%, %Set% and %Array% internally. This is for the convenience. Implementations don't have to actually create those data structures behind the scenes.\n      It is a spec bug if operations on cache objects trigger any user code.\n    </emu-note>\n\n    <emu-clause id=\"sec-creatematchcache\" type=\"abstract operation\">\n        <h1>CreateMatchCache ( ): a %Map%</h1>\n        <dl class=\"header\">\n        </dl>\n        <emu-alg>\n          1. Let _map_ be ! Construct(%Map%).\n          1. Let _iteratorsToClose_ be ! Construct(%Set%).\n          1. Perform ! CreateDataPropertyOrThrow(_map_, *\"IteratorsToClose\"*, _iteratorsToClose_).\n          1. Return _map_.\n        </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-get-match-cache\" type=\"abstract operation\">\n      <h1>\n        GetMatchCache (\n          _subject_: an ECMAScript language value,\n          _cacheGroup_: a %Map%,\n        ): an ECMAScript language value\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-alg>\n        1. Assert: _cacheGroup_ is created by CreateMatchCache and used internally for pattern-matching.\n        1. If ! Call(<emu-xref href=\"#sec-map.prototype.has\">%Map.prototype.has%</emu-xref>, _cacheGroup_, « _subject_ ») is *true*, then\n          1. Return ! Call(<emu-xref href=\"#sec-map.prototype.has\">%Map.prototype.get%</emu-xref>, _cacheGroup_, « _subject_ »).\n        1. Let _cache_ be OrdinaryObjectCreate(*null*).\n        1. Perform ! CreateDataPropertyOrThrow(_cache_, *\"Has\"*, ! Construct(%Map%)).\n        1. Perform ! CreateDataPropertyOrThrow(_cache_, *\"Get\"*, ! Construct(%Map%)).\n        1. Perform ! CreateDataPropertyOrThrow(_cache_, *\"Iterator\"*, *undefined*).\n        1. Perform ! CreateDataPropertyOrThrow(_cache_, *\"IteratedValues\"*, ! ArrayCreate(0, *null*)).\n        1. Perform ! Call(<emu-xref href=\"#sec-map.prototype.has\">%Map.prototype.set%</emu-xref>, _cacheGroup_, « _subject_, _cache_ »).\n        1. Return _cache_.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-has-property-cached\" type=\"abstract operation\">\n      <h1>\n        HasPropertyCached (\n          _subject_: an ECMAScript language value,\n          _cacheGroup_: a %Map%,\n          _propertyName_: a property key,\n        ): either a normal completion containing a Boolean or an abrupt completion\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-alg>\n        1. Assert: _cacheGroup_ is created by CreateMatchCache and used internally for pattern-matching.\n        1. Let _cache_ be ! Get(GetMatchCache(_subject_, _cacheGroup_), *\"Has\"*).\n        1. Let _hasCache_ be ! Call(<emu-xref href=\"#sec-map.prototype.has\">%Map.prototype.has%</emu-xref>, _cache_, « _propertyName_ »).\n        1. If _hasCache_ is *true*, return ! Call(<emu-xref href=\"#sec-map.prototype.has\">%Map.prototype.get%</emu-xref>, _cache_, « _propertyName_ »).\n        1. Let _result_ be ? HasProperty(_subject_, _propertyName_).\n        1. Perform ! Call(<emu-xref href=\"#sec-map.prototype.has\">%Map.prototype.set%</emu-xref>, _cache_, « _propertyName_, _result_ »).\n        1. Return _result_.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-get-cached\" type=\"abstract operation\">\n      <h1>\n        GetCached (\n          _subject_: an ECMAScript language value,\n          _cacheGroup_: a %Map%,\n          _propertyName_: a property key,\n        ): either a normal completion containing an ECMAScript language value or an abrupt completion\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-alg>\n        1. Assert: _cacheGroup_ is created by CreateMatchCache and used internally for pattern-matching.\n        1. Let _cache_ be ! Get(GetMatchCache(_subject_, _cacheGroup_), *\"Get\"*).\n        1. Let _hasCache_ be ! Call(<emu-xref href=\"#sec-map.prototype.has\">%Map.prototype.has%</emu-xref>, _cache_, « _propertyName_ »).\n        1. If _hasCache_ is *true*, return ! Call(<emu-xref href=\"#sec-map.prototype.has\">%Map.prototype.get%</emu-xref>, _cache_, « _propertyName_ »).\n        1. Let _result_ be ? Get(_subject_, _propertyName_).\n        1. Perform ! Call(<emu-xref href=\"#sec-map.prototype.has\">%Map.prototype.set%</emu-xref>, _cache_, « _propertyName_, _result_ »).\n        1. Return _result_.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-get-iterator-cached\" type=\"abstract operation\">\n      <h1>\n        GetIteratorCached (\n          _subject_: an ECMAScript language value,\n          _cacheGroup_: a %Map%,\n        ): either a normal completion containing an Iterator Record or an abrupt completion\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-alg>\n        1. Assert: _cacheGroup_ is created by CreateMatchCache and used internally for pattern-matching.\n        1. Let _cache_ be GetMatchCache(_subject_, _cacheGroup_).\n        1. Let _iteratorRecordObject_ be ! Get(_cache_, *\"Iterator\"*).\n        1. If _iteratorRecordObject_ is not *undefined*, return _iteratorRecordObject_.[[CachedIterator]].\n        1. Let _f_ be ? GetCached(_subject_, _cacheGroup_, %Symbol.iterator%).\n        1. Let _iteratorRecord_ be ? GetIteratorFromMethod(_subject_, _f_).\n        1. Set _iteratorRecordObject_ to OrdinaryObjectCreate(*null*, « [[CachedIterator]] »).\n        1. Set _iteratorRecordObject_.[[CachedIterator]] to _iteratorRecord_.\n        1. Perform ! Set(_cache_, *\"Iterator\"*, _iteratorRecordObject_, *true*).\n        1. Perform ! Call(<emu-xref href=\"#sec-set.prototype.add\">%Set.prototype.add%</emu-xref>, ! Get(_cacheGroup_, *\"IteratorsToClose\"*), « _iteratorRecordObject_ »).\n        1. Return _iteratorRecordObject_.[[CachedIterator]].\n      </emu-alg>\n      <emu-note type=\"editor\">\n        The [[CachedIterator]] field is only used in GetIteratorCached and CloseCachedIterators. Iterator Records are not ECMAScript language values and cannot be Set on an object, therefore an object is created to wrap the Iterator Record.\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-iterator-step-cached\" type=\"abstract operation\">\n      <h1>\n        IteratorStepCached (\n          _iterator_: an Iterator Record,\n          _cacheGroup_: a %Map%,\n        ): either a normal completion containing either an ECMAScript language value or ~not-matched~, or an abrupt completion\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-alg>\n        1. Assert: _cacheGroup_ is created by CreateMatchCache and used internally for pattern-matching.\n        1. If _iterator_.[[Done]] is *true*, return ~not-matched~.\n        1. Let _cache_ be GetMatchCache(_iterator_, _cacheGroup_).\n        1. Let _iteratedValues_ be ! Get(_cache_, *\"IteratedValues\"*).\n        1. Let _iteratorResult_ be Completion(IteratorStep(_iterator_)).\n        1. If _iteratorResult_ is an abrupt completion, set _iterator_.[[Done]] to *true*.\n        1. ReturnIfAbrupt(_iteratorResult_).\n        1. If _iteratorResult_ is *false*, then\n          1. Set _iterator_.[[Done]] to *true*.\n          1. Return ~not-matched~.\n        1. Let _value_ be Completion(IteratorValue(_iteratorResult_)).\n        1. If _value_ is an abrupt completion, set _iterator_.[[Done]] to *true*.\n        1. ReturnIfAbrupt(_value_).\n        1. Perform ! Call(<emu-xref href=\"#sec-array.prototype.push\">%Array.prototype.push%</emu-xref>, _iteratedValues_, « _value_ »).\n        1. Return _value_.\n      </emu-alg>\n    </emu-clause>\n\n    <emu-clause id=\"sec-get-iterator-nth-value-cached\" type=\"abstract operation\">\n      <h1>\n        GetIteratorNthValueCached (\n          _iterator_: an Iterator Record,\n          _cacheGroup_: a %Map%,\n          _n_: a non-negative integer,\n        ): either a normal completion containing either an ECMAScript language value or ~not-matched~, or an abrupt completion\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-alg>\n        1. NOTE: 0<sup>th</sup> is the first value.\n        1. Assert: _cacheGroup_ is created by CreateMatchCache and used internally for pattern-matching.\n        1. Let _iteratedValues_ be ! Get(GetMatchCache(_iterator_, _cacheGroup_), *\"IteratedValues\"*).\n        1. Let _nthItem_ be ! _iteratedValues_.[[GetOwnProperty]](_n_).\n        1. If _nthItem_ is not *undefined*, return _nthItem_.[[Value]].\n        1. Assert: ! LengthOfArrayLike(_iteratedValues_) is _n_. For example, _iteratedValues_ has 0 values, _n_ should be 0 to get the first value from the iterator.\n        1. Return ? IteratorStepCached(_iterator_, _cacheGroup_).\n      </emu-alg>\n      <emu-note type=\"editor\">\n        This abstract operation gets the n<sup>th</sup> (start from 0) value of the _iterator_, and runs IteratorStepCached if it is not cached in the _cacheGroup_.\n        For all _n_ &gt; 1, this abstract operation expects these invariants:\n        <ul>\n          <li>The evaluation of |MatchList| always evaluates the _n_-1<sup>th</sup> value before evaluating the _n_<sup>th</sup>.</li>\n          <li>If the _n_<sup>th</sup> value is exists ([[GetOwnProperty]](_n_) returns a Property Descriptor), the _n_-1<sup>th</sup> value also exists.</li>\n          <li>If the _n_<sup>th</sup> value does not exist and the _iterator_.[[Done]] is *true*, there is no further call with a bigger _n_ parameter with the same _cacheGroup_ and _iterator_.</li>\n        </ul>\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-finish-list-match\" type=\"abstract operation\">\n      <h1>\n        FinishListMatch (\n          _iterator_: an Iterator Record,\n          _cacheGroup_: a %Map%,\n          _expectedLength_: either a non-negative integer, ~not-matched~ or ~unlimited~,\n        ): either a normal completion containing a Boolean or an abrupt completion\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-alg>\n        1. If _expectedLength_ is ~not-matched~, return *false*.\n        1. If _expectedLength_ is ~unlimited~, return *true*.\n        1. Let _cache_ be GetMatchCache(_iterator_, _cacheGroup_).\n        1. Let _cachedLength_ be ! LengthOfArrayLike(! Get(_cache_, *\"IteratedValues\"*)).\n        1. If _cachedLength_ &gt; _expectedLength_, return *false*.\n        1. Assert: _cachedLength_ is _expectedLength_.\n        1. If _iterator_.[[Done]] is *true*, return *true*.\n        1. Let _iteratorResult_ be ? GetIteratorNthValueCached(_iterator_, _cacheGroup_, _expectedLength_).\n        1. If _iteratorResult_ is ~not-matched~, return *true*.\n        1. Return *false*.\n      </emu-alg>\n      <emu-note type=\"editor\">\n        <p>This abstract operation is called the final step of the evaluation of |MatchList|.</p>\n        <p>\n          For example, when matching with `[]`, the _expectedLength_ is 0.\n          This abstract operation checks if _cachedLength_ is 0.\n          If the _iterator_ is done, the match succeeds.\n          If the _iterator_ is not done, it will try to get the 0<sup>th</sup> value from the iterator.\n          If there is a 0<sup>th</sup> value, the match fails.\n        </p>\n        <p>\n          Another example is when matching with `[1, 2, 3]`, the _expectedLength_ is 3.\n          This abstract operation checks if _cachedLength_ is 3.\n          If the _iterator_ is done, the match succeeds.\n          If the _iterator_ is not done, it will try to get the 3<sup>th</sup> (remember we start from the 0<sup>th</sup>) value from the iterator.\n          If there is a 3<sup>rd</sup> (which means the _cachedLength_ is now 4) value, the match fails.\n        </p>\n      </emu-note>\n    </emu-clause>\n\n    <emu-clause id=\"sec-finish-match\" type=\"abstract operation\">\n      <h1>\n        FinishMatch (\n          _matchCompletion_: a Completion Record,\n          _cacheGroup_: a %Map%,\n        ): a Completion Record\n      </h1>\n      <dl class=\"header\">\n      </dl>\n      <emu-alg>\n        1. Assert: _cacheGroup_ is created by CreateMatchCache and used internally for pattern-matching.\n        1. If _matchCompletion_ is a normal completion and _matchCompletion_.[[Value]] is ~not-matched~, then\n          1. Set _matchCompletion_ to ThrowCompletion(a newly created *TypeError*).\n        1. Let _iterators_ be a new empty List.\n        1. For each element _value_ of ! Get(_cacheGroup_, *\"IteratorsToClose\"*).[[SetData]], do\n          1. Assert: _value_.[[Value]] is not ~empty~.\n          1. Let _iteratorRecordObject_ be ! Get(_value_.[[Value]], *\"IteratorsToClose\"*).\n          1. Append _iteratorRecordObject_.[[CachedIterator]] to _iterators_.\n        1. Let _errors_ be a new empty List.\n        1. If _matchCompletion_ is an abrupt completion, append _matchCompletion_.[[Value]] to _errors_.\n        1. For each element _iterator_ of _iterators_, do\n          1. If _iterator_.[[Done]] is *false*, then\n            1. Let _closeResult_ be Completion(IteratorClose(_iterator_, NormalCompletion(*undefined*))).\n            1. If _closeResult_ is an abrupt completion, append _closeResult_.[[Value]] to _errors_.\n        1. If _errors_ is not empty, then\n          1. If length of _errors_ is 1, return ThrowCompletion(_errors_[0]).\n          1. Let _error_ be a newly created *AggregateError* object.\n          1. Perform ! DefinePropertyOrThrow(_error_, \"errors\", PropertyDescriptor { [[Configurable]]: true, [[Enumerable]]: false, [[Writable]]: true, [[Value]]: CreateArrayFromList(errors) }).\n          1. Return ThrowCompletion(_error_).\n        1. Return _matchCompletion_.\n      </emu-alg>\n      <emu-note type=\"editor\">\n        <p>If any error occurs when closing iterators, this abstract operation ignores the _matchCompletion_ and returns an abrupt completion. This might be problematic when the _matchCompletion_ is a Return Completion, Continue Completion, or a Break Completion.</p>\n        <pre><code class=\"javascript\">\n          for (const iterator of iterators) {\n            try {\n              match(iterator) {\n                [String, ...] and [...let list]: callback(list);\n                [...]: continue;\n              }\n            } catch {\n            }\n          }\n        </code></pre>\n        <p>\n          In the code example above,\n          if the second branch matches (and returns a continue completion),\n          but the iterator throws an error when closing,\n          the `continue` will be ignored,\n          and the `catch` block will be evaluated.\n        </p>\n      </emu-note>\n    </emu-clause>\n  </emu-clause>\n</emu-clause>\n\n<emu-annex id=\"sec-grammar-summary\">\n  <h1>Grammar Summary</h1>\n\n  <emu-annex id=\"sec-expressions\" number=\"1\">\n    <h1>Expressions</h1>\n    <emu-prodref name=\"PrimaryExpression\"></emu-prodref>\n    <emu-prodref name=\"RelationalExpression\"></emu-prodref>\n    <emu-prodref name=\"MatchExpression\"></emu-prodref>\n    <emu-prodref name=\"MatchExpressionClauses\"></emu-prodref>\n    <emu-prodref name=\"MatchExpressionClause\"></emu-prodref>\n  </emu-annex>\n\n  <emu-annex id=\"sec-annex-match-patterns\" number=\"9\">\n    <h1>Patterns</h1>\n    <emu-prodref name=\"MatchPattern\"></emu-prodref>\n    <emu-prodref name=\"PrimitivePattern\"></emu-prodref>\n    <emu-prodref name=\"VariableDeclarationPattern\"></emu-prodref>\n    <emu-prodref name=\"VarOrLetOrConst\"></emu-prodref>\n    <emu-prodref name=\"MemberExpressionPattern\"></emu-prodref>\n    <emu-prodref name=\"ObjectPattern\"></emu-prodref>\n    <emu-prodref name=\"ArrayPattern\"></emu-prodref>\n    <emu-prodref name=\"UnaryAlgebraicPattern\"></emu-prodref>\n    <emu-prodref name=\"RelationalPattern\"></emu-prodref>\n    <emu-prodref name=\"IfPattern\"></emu-prodref>\n    <emu-prodref name=\"CombinedMatchPattern\"></emu-prodref>\n    <p>\n      Object in pattern-matching:\n    </p>\n    <emu-prodref name=\"ObjectPattern\"></emu-prodref>\n    <emu-prodref name=\"MatchRestProperty\"></emu-prodref>\n    <emu-prodref name=\"MatchPropertyList\"></emu-prodref>\n    <emu-prodref name=\"MatchProperty\"></emu-prodref>\n    <p>\n      Array in pattern-matching:\n    </p>\n    <emu-prodref name=\"ArrayPattern\"></emu-prodref>\n    <emu-prodref name=\"MatchList\"></emu-prodref>\n    <emu-prodref name=\"MatchRestElement\"></emu-prodref>\n    <emu-prodref name=\"MatchElementList\"></emu-prodref>\n    <emu-prodref name=\"MatchElisionElement\"></emu-prodref>\n    <emu-prodref name=\"MatchElement\"></emu-prodref>\n    <p>\n      Limited |Expression|s which is evaluated as an |Expression| in pattern-matching:\n    </p>\n    <emu-prodref name=\"PatternMatchingMemberExpression\"></emu-prodref>\n    <emu-prodref name=\"PatternMatchingUnaryAlgebraicExpression\"></emu-prodref>\n    <emu-prodref name=\"PatternMatchingRelationalExpression\"></emu-prodref>\n  </emu-annex>\n</emu-annex>\n"
        }
      ]
    }
  ]
}