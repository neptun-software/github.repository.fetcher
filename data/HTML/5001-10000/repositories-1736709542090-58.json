{
  "metadata": {
    "timestamp": 1736709542090,
    "page": 58,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "sindresorhus/screenfull",
      "stars": 7100,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1708984375,
          "content": "root = true\n\n[*]\nindent_style = tab\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.yml]\nindent_style = space\nindent_size = 2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0185546875,
          "content": "* text=auto eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0224609375,
          "content": "node_modules\nyarn.lock\n"
        },
        {
          "name": ".npmrc",
          "type": "blob",
          "size": 0.0185546875,
          "content": "package-lock=false\n"
        },
        {
          "name": "index.d.ts",
          "type": "blob",
          "size": 4.595703125,
          "content": "export type RawEventNames = {\n\treadonly requestFullscreen: string;\n\treadonly exitFullscreen: string;\n\treadonly fullscreenElement: string;\n\treadonly fullscreenEnabled: string;\n\treadonly fullscreenchange: string;\n\treadonly fullscreenerror: string;\n};\n\nexport type EventName = 'change' | 'error';\n\n/**\nSimple wrapper for cross-browser usage of the JavaScript [Fullscreen API](https://developer.mozilla.org/en/DOM/Using_full-screen_mode), which lets you bring the page or any element into fullscreen. Smoothens out the browser implementation differences, so you don't have to.\n*/\ndeclare const screenfull: {\n\t/**\n\tWhether fullscreen is active.\n\t*/\n\treadonly isFullscreen: boolean;\n\n\t/**\n\tThe element currently in fullscreen, otherwise `undefined`.\n\t*/\n\treadonly element: Element | undefined;\n\n\t/**\n\tWhether you are allowed to enter fullscreen. If your page is inside an `<iframe>` you will need to add a `allowfullscreen` attribute (+ `webkitallowfullscreen` and `mozallowfullscreen`).\n\n\t@example\n\t```\n\timport screenfull from 'screenfull';\n\n\tif (screenfull.isEnabled) {\n\t\tscreenfull.request();\n\t}\n\t```\n\t*/\n\treadonly isEnabled: boolean;\n\n\t/**\n\tExposes the raw properties (prefixed if needed) used internally.\n\t*/\n\traw: RawEventNames;\n\n\t/**\n\tMake an element fullscreen.\n\n\tIf your page is inside an `<iframe>` you will need to add a `allowfullscreen` attribute (+ `webkitallowfullscreen` and `mozallowfullscreen`).\n\n\tKeep in mind that the browser will only enter fullscreen when initiated by user events like click, touch, key.\n\n\t@param element - Default is `<html>`. If called with another element than the currently active, it will switch to that if it's a descendant.\n\t@param options - [`FullscreenOptions`](https://developer.mozilla.org/en-US/docs/Web/API/FullscreenOptions).\n\t@returns A promise that resolves after the element enters fullscreen.\n\n\t@example\n\t```\n\timport screenfull from 'screenfull';\n\n\t// Fullscreen the page\n\tdocument.getElementById('button').addEventListener('click', () => {\n\t\tif (screenfull.isEnabled) {\n\t\t\tscreenfull.request();\n\t\t} else {\n\t\t\t// Ignore or do something else\n\t\t}\n\t});\n\n\t// Fullscreen an element\n\tconst element = document.getElementById('target');\n\n\tdocument.getElementById('button').addEventListener('click', () => {\n\t\tif (screenfull.isEnabled) {\n\t\t\tscreenfull.request(element);\n\t\t}\n\t});\n\n\t// Fullscreen an element with options\n\tconst element = document.getElementById('target');\n\n\tdocument.getElementById('button').addEventListener('click', () => {\n\t\tif (screenfull.isEnabled) {\n\t\t\tscreenfull.request(element, {navigationUI: 'hide'});\n\t\t}\n\t});\n\n\t// Fullscreen an element with jQuery\n\tconst element = $('#target')[0]; // Get DOM element from jQuery collection\n\n\t$('#button').on('click', () => {\n\t\tif (screenfull.isEnabled) {\n\t\t\tscreenfull.request(element);\n\t\t}\n\t});\n\t```\n\t*/\n\trequest(element?: Element, options?: FullscreenOptions): Promise<void>;\n\n\t/**\n\tBrings you out of fullscreen.\n\n\t@returns A promise that resolves after the element exits fullscreen.\n\t*/\n\texit(): Promise<void>;\n\n\t/**\n\tRequests fullscreen if not active, otherwise exits.\n\n\t@param element - The default is `<html>`. If called with another element than the currently active, it will switch to that if it's a descendant.\n\t@param options - [`FullscreenOptions`](https://developer.mozilla.org/en-US/docs/Web/API/FullscreenOptions).\n\t@returns A promise that resolves after the element enters/exits fullscreen.\n\n\t@example\n\t```\n\timport screenfull from 'screenfull';\n\n\t// Toggle fullscreen on a image with jQuery\n\n\t$('img').on('click', event => {\n\t\tif (screenfull.isEnabled) {\n\t\t\tscreenfull.toggle(event.target);\n\t\t}\n\t});\n\t```\n\t*/\n\ttoggle(element?: Element, options?: FullscreenOptions): Promise<void>;\n\n\t/**\n\tAdd a listener for when the browser switches in and out of fullscreen or when there is an error.\n\n\t@example\n\t```\n\timport screenfull from 'screenfull';\n\n\t// Detect fullscreen change\n\tif (screenfull.isEnabled) {\n\t\tscreenfull.on('change', () => {\n\t\t\tconsole.log('Am I fullscreen?', screenfull.isFullscreen ? 'Yes' : 'No');\n\t\t});\n\t}\n\n\t// Detect fullscreen error\n\tif (screenfull.isEnabled) {\n\t\tscreenfull.on('error', event => {\n\t\t\tconsole.error('Failed to enable fullscreen', event);\n\t\t});\n\t}\n\t```\n\t*/\n\ton(name: EventName, handler: (event: Event) => void): void;\n\n\t/**\n\tRemove a previously registered event listener.\n\n\t@example\n\t```\n\timport screenfull from 'screenfull';\n\n\tscreenfull.off('change', callback);\n\t```\n\t*/\n\toff(name: EventName, handler: (event: Event) => void): void;\n\n\t/**\n\tAlias for `.on('change', function)`.\n\t*/\n\tonchange(handler: (event: Event) => void): void;\n\n\t/**\n\tAlias for `.on('error', function)`.\n\t*/\n\tonerror(handler: (event: Event) => void): void;\n};\n\nexport default screenfull;\n"
        },
        {
          "name": "index.html",
          "type": "blob",
          "size": 4.4970703125,
          "content": "<!doctype html>\n<html lang=\"en\" itemscope itemtype=\"https://schema.org/Product\">\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<meta name=\"author\" content=\"Sindre Sorhus\">\n\t\t<meta name=\"description\" content=\"JavaScript Fullscreen API demo\">\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\t\t<meta itemprop=\"name\" content=\"screenfull\">\n\t\t<meta itemprop=\"description\" content=\"Simple wrapper for cross-browser usage of the JavaScript Fullscreen API, which lets you bring the page or any element into fullscreen. Smoothens out the browser implementation differences, so you don't have too.\">\n\t\t<title>screenfull demo</title>\n\t\t<style>\n\t\thtml {\n\t\t\tfont-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\n\t\t\tpadding: 30px 10px 0 0;\n\t\t\tfont-size: 20px;\n\t\t\tline-height: 1.4;\n\t\t\tcolor: #737373;\n\t\t\tbackground: #f0f0f0;\n\t\t\t-webkit-font-smoothing: antialiased;\n\t\t}\n\n\t\thr {\n\t\t\tborder: none;\n\t\t\tborder-top: 1px solid #e6e6e6;\n\t\t\tmargin: 20px 0;\n\t\t}\n\n\t\ta {\n\t\t\tcolor: #666;\n\t\t}\n\n\t\th1 {\n\t\t\tmargin: 0;\n\t\t\tfont-size: 40px;\n\t\t\ttext-align: center;\n\t\t}\n\n\t\th1 span {\n\t\t\tcolor: #bbb;\n\t\t}\n\n\t\tul {\n\t\t\tpadding: 0 0 0 40px;\n\t\t\tmargin: 1em 0;\n\t\t}\n\n\t\tbutton {\n\t\t\tfont-size: 13px;\n\t\t}\n\n\t\tnav {\n\t\t\tmargin: 0 auto;\n\t\t}\n\n\t\t.container {\n\t\t\twidth: 500px;\n\t\t\tmargin: 0 auto;\n\t\t}\n\n\t\t#repo-link {\n\t\t\ttext-align: center;\n\t\t\ttext-decoration: none;\n\t\t\tdisplay: block;\n\t\t\tposition: absolute;\n\t\t\ttop: 20px;\n\t\t\tleft: 20px;\n\t\t}\n\n\t\t#social {\n\t\t\tmargin: 10px auto;\n\t\t\ttext-align: center;\n\t\t}\n\n\t\t#container {\n\t\t\twidth: 500px;\n\t\t\tpadding: 30px 20px;\n\t\t\tmargin: 0 auto 50px auto;\n\t\t\tbackground: #fcfcfc;\n\t\t\ttext-align: center;\n\t\t\tborder: 1px solid #b3b3b3;\n\t\t\tborder-radius: 4px;\n\t\t\tbox-shadow: 0 1px 10px #a7a7a7, inset 0 1px 0 #fff;\n\t\t}\n\n\t\t#container ul {\n\t\t\tpadding: 0;\n\t\t\tmargin: 40px 0 0 0;\n\t\t\tlist-style: none;\n\t\t}\n\n\t\t#demo-img {\n\t\t\twidth: 100%;\n\t\t\theight: auto;\n\t\t}\n\n\t\t#demo-img,\n\t\t#demo-video {\n\t\t\tcursor: pointer;\n\t\t}\n\n\t\theader p {\n\t\t\tfont-size: 17px;\n\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<a id=\"repo-link\" href=\"https://github.com/sindresorhus/screenfull\">â¬… Back to the repo</a>\n\t\t<section id=\"container\" class=\"container\">\n\t\t\t<header>\n\t\t\t\t<h1>screenfull<span>.js</span></h1>\n\t\t\t\t<p>Simple wrapper for cross-browser usage of the JavaScript <a href=\"https://developer.mozilla.org/en/DOM/Using_full-screen_mode\">Fullscreen API</a>, which lets you bring the page or any element into fullscreen. Smoothens out the browser implementation differences, so you don't have too.</p>\n\t\t\t</header>\n\t\t\t<hr>\n\t\t\t<section>\n\t\t\t\t<p>Try out the Fullscreen API</p>\n\t\t\t\t<button id=\"request\">Request</button>\n\t\t\t\t<button id=\"exit\">Exit</button>\n\t\t\t\t<button id=\"toggle\">Toggle</button>\n\t\t\t\t<button id=\"request2\">Request document</button>\n\t\t\t</section>\n\t\t\t<section>\n\t\t\t\t<ul>\n\t\t\t\t\t<li id=\"supported\"></li>\n\t\t\t\t\t<li id=\"status\"></li>\n\t\t\t\t\t<li id=\"element\"></li>\n\t\t\t\t</ul>\n\t\t\t</section>\n\t\t\t<input autofocus placeholder=\"Keyboard test\">\n\t\t\t<hr>\n\t\t\t<section>\n\t\t\t\t<p>Click the image to make it fullscreen</p>\n\t\t\t\t<img id=\"demo-img\" src=\"https://sindresorhus.com/unicorn\" width=\"500\">\n\t\t\t</section>\n\t\t</section>\n\t\t<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js\"></script>\n\t\t<script type=\"module\">\n\t\timport screenfull from './index.js';\n\n\t\t$(function () {\n\t\t\t$('#supported').text(`Supported/allowed: ${screenfull.isEnabled}`);\n\n\t\t\tif (!screenfull.isEnabled) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t$('#request').click(async () => {\n\t\t\t\tawait screenfull.request($('#container')[0]);\n\t\t\t\tconsole.log('Browser entered fullscreen mode');\n\n\t\t\t\t// Does not require jQuery. Can be used like this too:\n\t\t\t\t// screenfull.request(document.getElementById('container'));\n\t\t\t});\n\n\t\t\t$('#exit').click(async () => {\n\t\t\t\tawait screenfull.exit();\n\t\t\t\tconsole.log('Browser exited fullscreen mode');\n\t\t\t});\n\n\t\t\t$('#toggle').click(async () => {\n\t\t\t\tawait screenfull.toggle($('#container')[0]);\n\t\t\t\tconsole.log(`Fullscreen mode: ${screenfull.isFullscreen ? 'enabled' : 'disabled'}`);\n\t\t\t});\n\n\t\t\t$('#request2').click(() => {\n\t\t\t\tscreenfull.request();\n\t\t\t});\n\n\t\t\t$('#demo-img').click(() => {\n\t\t\t\tscreenfull.toggle($('#demo-img')[0]);\n\t\t\t});\n\n\t\t\tfunction fullscreenchange() {\n\t\t\t\tconst {element} = screenfull;\n\n\t\t\t\t$('#status').text(`Is fullscreen: ${screenfull.isFullscreen}`);\n\n\t\t\t\tif (element) {\n\t\t\t\t\t$('#element').text(`Element: ${element.localName}${element.id ? `#${element.id}` : ''}`);\n\t\t\t\t}\n\n\t\t\t\tif (!screenfull.isFullscreen) {\n\t\t\t\t\t$('#external-iframe').remove();\n\t\t\t\t\tdocument.body.style.overflow = 'auto';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tscreenfull.on('change', fullscreenchange);\n\n\t\t\t// Set the initial values\n\t\t\tfullscreenchange();\n\t\t});\n\t\t</script>\n\t</body>\n</html>\n"
        },
        {
          "name": "index.js",
          "type": "blob",
          "size": 3.4326171875,
          "content": "/* eslint-disable promise/prefer-await-to-then */\n\nconst methodMap = [\n\t[\n\t\t'requestFullscreen',\n\t\t'exitFullscreen',\n\t\t'fullscreenElement',\n\t\t'fullscreenEnabled',\n\t\t'fullscreenchange',\n\t\t'fullscreenerror',\n\t],\n\t// New WebKit\n\t[\n\t\t'webkitRequestFullscreen',\n\t\t'webkitExitFullscreen',\n\t\t'webkitFullscreenElement',\n\t\t'webkitFullscreenEnabled',\n\t\t'webkitfullscreenchange',\n\t\t'webkitfullscreenerror',\n\n\t],\n\t// Old WebKit\n\t[\n\t\t'webkitRequestFullScreen',\n\t\t'webkitCancelFullScreen',\n\t\t'webkitCurrentFullScreenElement',\n\t\t'webkitCancelFullScreen',\n\t\t'webkitfullscreenchange',\n\t\t'webkitfullscreenerror',\n\n\t],\n\t[\n\t\t'mozRequestFullScreen',\n\t\t'mozCancelFullScreen',\n\t\t'mozFullScreenElement',\n\t\t'mozFullScreenEnabled',\n\t\t'mozfullscreenchange',\n\t\t'mozfullscreenerror',\n\t],\n\t[\n\t\t'msRequestFullscreen',\n\t\t'msExitFullscreen',\n\t\t'msFullscreenElement',\n\t\t'msFullscreenEnabled',\n\t\t'MSFullscreenChange',\n\t\t'MSFullscreenError',\n\t],\n];\n\nconst nativeAPI = (() => {\n\tif (typeof document === 'undefined') {\n\t\treturn false;\n\t}\n\n\tconst unprefixedMethods = methodMap[0];\n\tconst returnValue = {};\n\n\tfor (const methodList of methodMap) {\n\t\tconst exitFullscreenMethod = methodList?.[1];\n\t\tif (exitFullscreenMethod in document) {\n\t\t\tfor (const [index, method] of methodList.entries()) {\n\t\t\t\treturnValue[unprefixedMethods[index]] = method;\n\t\t\t}\n\n\t\t\treturn returnValue;\n\t\t}\n\t}\n\n\treturn false;\n})();\n\nconst eventNameMap = {\n\tchange: nativeAPI.fullscreenchange,\n\terror: nativeAPI.fullscreenerror,\n};\n\n// eslint-disable-next-line import/no-mutable-exports\nlet screenfull = {\n\t// eslint-disable-next-line default-param-last\n\trequest(element = document.documentElement, options) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst onFullScreenEntered = () => {\n\t\t\t\tscreenfull.off('change', onFullScreenEntered);\n\t\t\t\tresolve();\n\t\t\t};\n\n\t\t\tscreenfull.on('change', onFullScreenEntered);\n\n\t\t\tconst returnPromise = element[nativeAPI.requestFullscreen](options);\n\n\t\t\tif (returnPromise instanceof Promise) {\n\t\t\t\treturnPromise.then(onFullScreenEntered).catch(reject);\n\t\t\t}\n\t\t});\n\t},\n\texit() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (!screenfull.isFullscreen) {\n\t\t\t\tresolve();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst onFullScreenExit = () => {\n\t\t\t\tscreenfull.off('change', onFullScreenExit);\n\t\t\t\tresolve();\n\t\t\t};\n\n\t\t\tscreenfull.on('change', onFullScreenExit);\n\n\t\t\tconst returnPromise = document[nativeAPI.exitFullscreen]();\n\n\t\t\tif (returnPromise instanceof Promise) {\n\t\t\t\treturnPromise.then(onFullScreenExit).catch(reject);\n\t\t\t}\n\t\t});\n\t},\n\ttoggle(element, options) {\n\t\treturn screenfull.isFullscreen ? screenfull.exit() : screenfull.request(element, options);\n\t},\n\tonchange(callback) {\n\t\tscreenfull.on('change', callback);\n\t},\n\tonerror(callback) {\n\t\tscreenfull.on('error', callback);\n\t},\n\ton(event, callback) {\n\t\tconst eventName = eventNameMap[event];\n\t\tif (eventName) {\n\t\t\tdocument.addEventListener(eventName, callback, false);\n\t\t}\n\t},\n\toff(event, callback) {\n\t\tconst eventName = eventNameMap[event];\n\t\tif (eventName) {\n\t\t\tdocument.removeEventListener(eventName, callback, false);\n\t\t}\n\t},\n\traw: nativeAPI,\n};\n\nObject.defineProperties(screenfull, {\n\tisFullscreen: {\n\t\tget: () => Boolean(document[nativeAPI.fullscreenElement]),\n\t},\n\telement: {\n\t\tenumerable: true,\n\t\tget: () => document[nativeAPI.fullscreenElement] ?? undefined,\n\t},\n\tisEnabled: {\n\t\tenumerable: true,\n\t\t// Coerce to boolean in case of old WebKit.\n\t\tget: () => Boolean(document[nativeAPI.fullscreenEnabled]),\n\t},\n});\n\nif (!nativeAPI) {\n\tscreenfull = {isEnabled: false};\n}\n\nexport default screenfull;\n"
        },
        {
          "name": "index.test-d.ts",
          "type": "blob",
          "size": 1.130859375,
          "content": "import {expectType} from 'tsd';\nimport screenfull, {RawEventNames} from './index.js';\n\nconst element: Element = document.querySelector('#target')!;\n\nexpectType<Promise<void>>(screenfull.request());\nexpectType<Promise<void>>(screenfull.request(element));\nexpectType<Promise<void>>(screenfull.toggle());\nexpectType<Promise<void>>(screenfull.toggle(element));\nexpectType<Promise<void>>(screenfull.exit());\n\nscreenfull.on('change', event => {\n\texpectType<Event>(event);\n});\n\nscreenfull.on('error', event => {\n\texpectType<Event>(event);\n});\n\nscreenfull.off('change', event => {\n\texpectType<Event>(event);\n});\n\nscreenfull.off('error', event => {\n\texpectType<Event>(event);\n});\n\nscreenfull.onchange(event => {\n\texpectType<Event>(event);\n});\n\nscreenfull.onerror(event => {\n\texpectType<Event>(event);\n});\n\nexpectType<RawEventNames>(screenfull.raw);\nexpectType<string>(screenfull.raw.requestFullscreen);\nexpectType<string>(screenfull.raw.exitFullscreen);\nexpectType<string>(screenfull.raw.fullscreenElement);\nexpectType<string>(screenfull.raw.fullscreenEnabled);\nexpectType<string>(screenfull.raw.fullscreenchange);\nexpectType<string>(screenfull.raw.fullscreenerror);\n"
        },
        {
          "name": "license",
          "type": "blob",
          "size": 1.0908203125,
          "content": "MIT License\n\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (https://sindresorhus.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.75390625,
          "content": "{\n\t\"name\": \"screenfull\",\n\t\"version\": \"6.0.2\",\n\t\"description\": \"Simple wrapper for cross-browser usage of the JavaScript Fullscreen API, which lets you bring the page or any element into fullscreen.\",\n\t\"license\": \"MIT\",\n\t\"repository\": \"sindresorhus/screenfull\",\n\t\"funding\": \"https://github.com/sponsors/sindresorhus\",\n\t\"author\": {\n\t\t\"name\": \"Sindre Sorhus\",\n\t\t\"email\": \"sindresorhus@gmail.com\",\n\t\t\"url\": \"sindresorhus.com\"\n\t},\n\t\"type\": \"module\",\n\t\"exports\": \"./index.js\",\n\t\"engines\": {\n\t\t\"node\": \"^14.13.1 || >=16.0.0\"\n\t},\n\t\"scripts\": {\n\t\t\"test\": \"xo && tsd\"\n\t},\n\t\"files\": [\n\t\t\"index.js\",\n\t\t\"index.d.ts\"\n\t],\n\t\"keywords\": [\n\t\t\"browser\",\n\t\t\"fullscreen\"\n\t],\n\t\"devDependencies\": {\n\t\t\"tsd\": \"^0.18.0\",\n\t\t\"xo\": \"^0.45.0\"\n\t},\n\t\"xo\": {\n\t\t\"envs\": [\n\t\t\t\"node\",\n\t\t\t\"browser\"\n\t\t]\n\t}\n}\n"
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 7.51171875,
          "content": "# screenfull\n\n> Simple wrapper for cross-browser usage of the JavaScript [Fullscreen API](https://developer.mozilla.org/en/DOM/Using_full-screen_mode), which lets you bring the page or any element into fullscreen. Smoothens out the browser implementation differences, so you don't have to.\n\n**This package is ESM. Please [familiarize](https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c) yourself with what that implies.**\\\nIf you cannot use ESM or need to support older browsers without using transpilation, use version 5.2.0.\n\n**[Not supported on iPhone](#support)**\n\n**This package is feature complete. No new features will be accepted.**\n\n#### [Demo](https://sindresorhus.com/screenfull)\n\n## Install\n\nOnly 0.7 kB gzipped.\n\n```sh\nnpm install screenfull\n```\n\nAlso available on [cdnjs](https://cdnjs.com/libraries/screenfull.js/5.1.0) *(older version)*.\n\n## Why?\n\n### Screenfull\n\n```js\nimport screenfull from 'screenfull';\n\nif (screenfull.isEnabled) {\n\tscreenfull.request();\n}\n```\n\n### Vanilla JavaScript\n\n```js\ndocument.fullscreenEnabled =\n\tdocument.fullscreenEnabled ||\n\tdocument.mozFullScreenEnabled ||\n\tdocument.documentElement.webkitRequestFullScreen;\n\nfunction requestFullscreen(element) {\n\tif (element.requestFullscreen) {\n\t\telement.requestFullscreen();\n\t} else if (element.mozRequestFullScreen) {\n\t\telement.mozRequestFullScreen();\n\t} else if (element.webkitRequestFullScreen) {\n\t\telement.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT);\n\t}\n}\n\nif (document.fullscreenEnabled) {\n\trequestFullscreen(document.documentElement);\n}\n\n// This is not even entirely comprehensive. There's more.\n```\n\n## Support\n\n[Supported browsers](https://caniuse.com/#feat=fullscreen)\n\n**Note:** Safari is supported on desktop and iPad, but not on iPhone. This is a limitation in the browser, not in Screenfull.\n\n## Documentation\n\n### Examples\n\n#### Fullscreen the page\n\n```js\nimport screenfull from 'screenfull';\n\ndocument.getElementById('button').addEventListener('click', () => {\n\tif (screenfull.isEnabled) {\n\t\tscreenfull.request();\n\t} else {\n\t\t// Ignore or do something else\n\t}\n});\n```\n\n#### Fullscreen an element\n\n```js\nimport screenfull from 'screenfull';\n\nconst element = document.getElementById('target');\n\ndocument.getElementById('button').addEventListener('click', () => {\n\tif (screenfull.isEnabled) {\n\t\tscreenfull.request(element);\n\t}\n});\n```\n\n#### Hide navigation user-interface on mobile devices\n\n```js\nimport screenfull from 'screenfull';\n\nconst element = document.getElementById('target');\n\ndocument.getElementById('button').addEventListener('click', () => {\n\tif (screenfull.isEnabled) {\n\t\tscreenfull.request(element, {navigationUI: 'hide'});\n\t}\n});\n```\n\n#### Fullscreen an element with jQuery\n\n```js\nimport screenfull from 'screenfull';\n\nconst element = $('#target')[0]; // Get DOM element from jQuery collection\n\n$('#button').on('click', () => {\n\tif (screenfull.isEnabled) {\n\t\tscreenfull.request(element);\n\t}\n});\n```\n\n#### Toggle fullscreen on a image with jQuery\n\n```js\nimport screenfull from 'screenfull';\n\n$('img').on('click', event => {\n\tif (screenfull.isEnabled) {\n\t\tscreenfull.toggle(event.target);\n\t}\n});\n```\n\n#### Detect fullscreen change\n\n```js\nimport screenfull from 'screenfull';\n\nif (screenfull.isEnabled) {\n\tscreenfull.on('change', () => {\n\t\tconsole.log('Am I fullscreen?', screenfull.isFullscreen ? 'Yes' : 'No');\n\t});\n}\n```\n\nRemove listeners with:\n\n```js\nimport screenfull from 'screenfull';\n\nscreenfull.off('change', callback);\n```\n\n#### Detect fullscreen error\n\n```js\nimport screenfull from 'screenfull';\n\nif (screenfull.isEnabled) {\n\tscreenfull.on('error', event => {\n\t\tconsole.error('Failed to enable fullscreen', event);\n\t});\n}\n```\n\nSee the [demo](https://sindresorhus.com/screenfull) for more examples, and view the source.\n\n#### Fullscreen an element with Angular.js\n\nYou can use the [Angular.js binding](https://github.com/hrajchert/angular-screenfull) to do something like:\n\n```html\n<div ngsf-fullscreen>\n\t<p>This is a fullscreen element</p>\n\t<button ngsf-toggle-fullscreen>Toggle fullscreen</button>\n</div>\n```\n\n#### Fullscreen the page with Angular 2\n\n```ts\nimport {Directive, HostListener} from '@angular/core';\nimport screenfull from 'screenfull';\n\n@Directive({\n\tselector: '[toggleFullscreen]'\n})\nexport class ToggleFullscreenDirective {\n\t@HostListener('click') onClick() {\n\t\tif (screenfull.isEnabled) {\n\t\t\tscreenfull.toggle();\n\t\t}\n\t}\n}\n```\n\n```html\n<button toggleFullscreen>Toggle fullscreen<button>\n```\n\n### API\n\n#### .request(element, options?)\n\nMake an element fullscreen.\n\nAccepts a DOM element and [`FullscreenOptions`](https://developer.mozilla.org/en-US/docs/Web/API/FullscreenOptions).\n\nThe default element is `<html>`. If called with another element than the currently active, it will switch to that if it's a descendant.\n\nIf your page is inside an `<iframe>` you will need to add a `allowfullscreen` attribute (+ `webkitallowfullscreen` and `mozallowfullscreen`).\n\nKeep in mind that the browser will only enter fullscreen when initiated by user events like click, touch, key.\n\nReturns a promise that resolves after the element enters fullscreen.\n\n#### .exit()\n\nBrings you out of fullscreen.\n\nReturns a promise that resolves after the element exits fullscreen.\n\n#### .toggle(element, options?)\n\nRequests fullscreen if not active, otherwise exits.\n\nAccepts a DOM element and [`FullscreenOptions`](https://developer.mozilla.org/en-US/docs/Web/API/FullscreenOptions).\n\nReturns a promise that resolves after the element enters/exits fullscreen.\n\n#### .on(event, function)\n\nEvents: `'change' | 'error'`\n\nAdd a listener for when the browser switches in and out of fullscreen or when there is an error.\n\n#### .off(event, function)\n\nRemove a previously registered event listener.\n\n#### .onchange(function)\n\nAlias for `.on('change', function)`\n\n#### .onerror(function)\n\nAlias for `.on('error', function)`\n\n#### .isFullscreen\n\nReturns a boolean whether fullscreen is active.\n\n#### .element\n\nReturns the element currently in fullscreen, otherwise `undefined`.\n\n#### .isEnabled\n\nReturns a boolean whether you are allowed to enter fullscreen. If your page is inside an `<iframe>` you will need to add a `allowfullscreen` attribute (+ `webkitallowfullscreen` and `mozallowfullscreen`).\n\n#### .raw\n\nExposes the raw properties (prefixed if needed) used internally: `requestFullscreen`, `exitFullscreen`, `fullscreenElement`, `fullscreenEnabled`, `fullscreenchange`, `fullscreenerror`\n\n## FAQ\n\n### How can I navigate to a new page when fullscreen?\n\nThat's not supported by browsers for security reasons. There is, however, a dirty workaround. Create a seamless iframe that fills the screen and navigate to the page in that instead.\n\n```js\nimport screenfull from 'screenfull';\n\ndocument.querySelector('#new-page-button').addEventListener(() => {\n\tconst iframe = document.createElement('iframe')\n\n\tiframe.setAttribute('id', 'external-iframe');\n\tiframe.setAttribute('src', 'https://new-page-website.com');\n\tiframe.setAttribute('frameborder', 'no');\n\tiframe.style.position = 'absolute';\n\tiframe.style.top = '0';\n\tiframe.style.right = '0';\n\tiframe.style.bottom = '0';\n\tiframe.style.left = '0';\n\tiframe.style.width = '100%';\n\tiframe.style.height = '100%';\n\n\tdocument.body.prepend(iframe);\n\tdocument.body.style.overflow = 'hidden';\n});\n```\n\n## Resources\n\n- [Using the Fullscreen API in web browsers](https://hacks.mozilla.org/2012/01/using-the-fullscreen-api-in-web-browsers/)\n- [MDN - Fullscreen API](https://developer.mozilla.org/en/DOM/Using_full-screen_mode)\n- [W3C Fullscreen spec](https://fullscreen.spec.whatwg.org/)\n- [Building an amazing fullscreen mobile experience](https://developers.google.com/web/fundamentals/native-hardware/fullscreen/)\n"
        }
      ]
    }
  ]
}