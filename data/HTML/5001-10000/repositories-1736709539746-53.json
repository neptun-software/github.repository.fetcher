{
  "metadata": {
    "timestamp": 1736709539746,
    "page": 53,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "robinmoisson/staticrypt",
      "stars": 7193,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0947265625,
          "content": ".idea\n.vscode/\nnode_modules\n.staticrypt.json\n.env\nencrypted/\n!example/encrypted/\ndecrypted/\ntest/"
        },
        {
          "name": ".husky",
          "type": "tree",
          "content": null
        },
        {
          "name": ".prettierignore",
          "type": "blob",
          "size": 0.05859375,
          "content": "node_modules\nexample/encrypted\npackage-lock.json\nindex.html\n"
        },
        {
          "name": ".prettierrc.json",
          "type": "blob",
          "size": 0.271484375,
          "content": "{\n    \"printWidth\": 120,\n    \"semi\": true,\n    \"singleQuote\": false,\n    \"tabWidth\": 4,\n    \"trailingComma\": \"es5\",\n    \"overrides\": [\n        {\n            \"files\": \"*.{js,html}\",\n            \"options\": {\n                \"proseWrap\": \"preserve\"\n            }\n        }\n    ]\n}\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 1.2607421875,
          "content": "The code of conduct is here to set the tone of contributions to StatiCrypt, help turn difficult situations into growth, and make our little corner of the internet a nice and healthy one. 🌱\n\n1. **Assume good intentions**\n\n   English might not be everyone's first language and nuances might be lost. Don't use sarcasm or assume others are. Things that look trivial or inept to you might be genuinely important for someone else.\n\n2. **Be constructive**\n\n   Don't just use dismissive comments (\"this sucks\", \"this is obviously wrong\"). Try to stay as factual and concrete as possible (\"this will cause problem X if Y happens\"), make \"I\" statement (\"my experience is...\") and remember everything is a trade-off (though of course, some trade-offs are much better suited than others for this project).\n\n3. **Be kind**\n\n   We all have a limited time being alive, and we all die in the end. Let's not waste energy on things that don't matter. Let's be kind to each other.\n\nI wanna add \"Be patient\" as this is a side project for everyone and we all have busy lives on the side, but I feel I'm by far the slowest one to respond here so you guys would be the only ones needing to apply it... Let's say it's included in the \"Be Kind\" rule and thanks for your patience anyway - I really appreciate it!\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.044921875,
          "content": "MIT License\n\nCopyright (c) 2017 Robin Moisson\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "MIGRATING.md",
          "type": "blob",
          "size": 2.2587890625,
          "content": "# Migration guide\n\n## From 2.x to 3.x\n\nStatiCrypt 3.x brings a number of improvements: strong default security with WebCrypto, cleaner CLI options and a much simpler `password_template`. This has been done while preserving auto-decrypt \"share\" links and remember-me functionality: if you used those with StatiCrypt 2.x, your links will still work with 3.x and you'll still be logged in.\n\nThere are a few breaking changes, but they should be easy to fix. If you have any trouble, feel free to open an issue.\n\n### Breaking changes\n\n3.x works with WebCrypto exclusively, which is only available on HTTPS and localhost. If you need access to the file over HTTP, you'll need to stay on 2.x.\n\nThe minimum node version is now 16. If you need to stay on a lower number, you'll need to stay on 2.x and use the cryptoJS engine.\n\n#### The CLI\n\nWhen encrypting `secret.html`, the CLI will now create a folder with your encrypted file `encrypted/secret.html`. It will not create a `secret_encrypted.html` file anymore.\n\nPasswords shorter than 14 characters used to trigger a warning, now they trigger a blocking promp (\"Do you want to use that password [yn]\"). Add `--short` to hide that prompt.\n\nThe options and parameters have been changed:\n- all template related options have been renamed to `--template-*`: pick your file with `--template`, set title with `--template-title`, etc.\n- the password is now an optional argument: set with `-p <password>`, or leave blank to be prompted for it.\n- many other options have been renamed, refer to the help (`--help`) or documentation for the full reference.\n\n#### The password template\n\nIf you don't use a custom password template, you don't need to do anything. \n\nIf you do, you need to update your template. To do so:\n- get `lib/password_template.html`\n- replace the javascript part from this file in your custom template (the new template is logic is much simpler)\n- update the injected variables in your template (notice we use new template tags, they now are `/*[|variable|]*/0` instead of `{variable}`):\n  - `{title}` => `/*[|template_title|]*/0`\n  - `{instructions}` => `/*[|template_instructions|]*/0`\n  - `{remember_me}` => `/*[|template_remember|]*/0`\n  - `{passphrase_placeholder}` => `/*[|template_placeholder|]*/0`\n  - `{decrypt_button}` => `/*[|template_button|]*/0`\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 22.2314453125,
          "content": "<p align=\"center\"><a href=\"https://robinmoisson.github.io/staticrypt/example/encrypted/example.html\"><img src=\"preview.png\" alt=\"password prompt preview\" width=\"480\"/></a><a href=\"https://robinmoisson.github.io/staticrypt/example/encrypted/example.html\"><br/>live example</a></p>\n\n# StatiCrypt\n\nSafely encrypt and password protect the content of your _public_ static HTML file, to be decrypted in-browser without any back-end - to serve it over static hosting like Netlify, GitHub pages, etc. (see [a live example](https://robinmoisson.github.io/staticrypt/example/encrypted/example.html)).\n\nStatiCrypt uses AES-256 and WebCrypto to encrypt your HTML file with your long password, and returns a static HTML page showing a password prompt that you can now safely upload anywhere, the page containing your encrypted content and decryption happening in javascript client side (see the details of [how it works](#how-staticrypt-works)).\n\n👉️ You can encrypt a file online in your browser (client side) at [robinmoisson.github.io/staticrypt](https://robinmoisson.github.io/staticrypt), or use the CLI to do it in your terminal or build process.\n\n> 🌱 **Supporting:** I quit my software developer job after 10 years to [teach mindfulness meditation](https://robinmoisson.com/mindfulness-coaching) in French and English. If you want to support StatiCrypt development you can do so by clicking on the sponsor button (or, well, come learn meditation!). See [how donations are used](https://github.com/sponsors/robinmoisson). Thank you for your support!\n>\n> <a href=\"https://github.com/sponsors/robinmoisson\"><img src=\"https://user-images.githubusercontent.com/5664025/234358001-65dfb967-19ab-49da-a8f5-27deca92ceb1.png\" alt=\"Sponsor\" /></a>\n\n## CLI\n\n**Migration:** v3 brings many improvements, a clearer CLI and simpler `password_template` over v2. See the [migration guide from v2 to v3](MIGRATING.md). v3 uses WebCrypto which is only available in HTTPS or localhost contexts, so if you need to use it in HTTP you'll need to use v2.\n\n### Installation\n\nStaticrypt is available through npm as a CLI, install with\n\n```bash\nnpm install staticrypt\n```\n\nYou can then run it with `npx staticrypt ...`. You can also install globally with `npm install -g staticrypt` and then just call `staticrypt ...` from anywhere.\n\n### Examples\n\n> These examples will create a `.staticrypt.json` file in the current directory ([here's why](#why-does-staticrypt-create-a-config-file)). This file isn't secret and you don't need to protect it. You can prevent this by setting the `--config` flag to `false` (a string).\n\n#### Encrypt a file\n\nEncrypt `test.html` and create a `encrypted/test.html` file (use `-d my_directory` to change the output directory):\n\n```bash\n# this will prompt you for the password, which won't stay in your terminal command history\nstaticrypt test.html\n\n# you can also pass the password as an argument\nstaticrypt test.html -p <long-password>\n```\n\n#### Encrypt a file with the password in an environment variable\n\nSet your long password in the `STATICRYPT_PASSWORD` environment variable ([`.env` files](https://www.npmjs.com/package/dotenv#usage) are supported):\n\n```bash\n# the password is in the STATICRYPT_PASSWORD env variable, you won't be prompted\nstaticrypt test.html\n```\n\n#### Encrypt multiple HTML files at once\n\nThis will put the HTML files in an `encrypted` directory, created where you run the `staticrypt` command. Non-HTML files will be copied as-is from the input directory, so you can easily overwrite it with the encrypted directory if you want.\n\n```bash\n# this will encrypt test_A.html and test_B.html\nstaticrypt test_A.html test_B.html\n# => encrypted files are in encrypted/test_A.html and encrypted/test_B.html\n\n# you can also use the -r flag to recursively encrypt all files in a directory\nstaticrypt dir_to_encrypt -r\n# => encrypted files are in encrypted/dir_to_encrypt/...\n\n# if you don't want to include the directory name in the output path, you can use \n# `dir_to_encrypt/*` instead. `-r` will include potential subdirectories as well\nstaticrypt dir_to_encrypt/* -r\n# => encrypted files are in encrypted/...\n```\n\n#### Replace all the files in a folder with encrypted ones\n\n```bash\n# 'dir_to_encrypt/*' as argument will select all the files in the directory ('-r' recursively), \n# and the '-d dir_to_encrypt' will put them in the same directory, overwriting the files\nstaticrypt dir_to_encrypt/* -r -d dir_to_encrypt\n```\n\n#### Get a shareable auto-decrypt link\n\nThe link contains the hashed password, that will auto-decrypt the file - you can include your file URL or leave blank. (⚠️ you should keep your `.staticrypt.json` so the salt is the same each time you encrypt, or re-encrypting will [invalidate the link](#why-does-staticrypt-create-a-config-file)): \n\n```bash\n# you can also pass '--share' without specifying the URL to get the `#staticrypt_pwd=...` \nstaticrypt test.html --share https://example.com/encrypted.html\n# => https://example.com/encrypted.html#staticrypt_pwd=5bfbf1343c7257cd7be23ecd74bb37fa2c76d041042654f358b6255baeab898f\n\n# add --share-remember to auto-enable \"Remember-me\" - useful if you want send one link to \n# autodecrypt multiple pages (you can also just append '&remember_me')\nstaticrypt test.html --share --share-remember\n# => #staticrypt_pwd=5bfbf1343c7257cd7be23ecd74bb37fa2c76d041042654f358b6255baeab898f&remember_me\n```\n\n#### Pin the salt to use staticrypt in your CI or build step\n\nIf you want want the \"Remember-me\" or share features to work accross multiple pages or multiple successive deployment, the salt needs to stay the same ([see why](https://github.com/robinmoisson/staticrypt#why-does-staticrypt-create-a-config-file)). If you run StatiCrypt in a CI step, you can pin the salt in two ways:\n\n- either commit the `.staticrypt.json` config file - you can generate a random salt and config file on your local machine with:\n\n    ```bash\n    staticrypt --salt\n    ```\n  \n- or hardcode the salt in the encryption command in the CI script:\n\n    ```bash\n    staticrypt test.html --salt 12345678901234567890123456789012\n    ```\n\n> See an example of how to use StatiCrypt in a CI build step in this community project: [a-nau/password-protected-website-template](https://github.com/a-nau/password-protected-website-template)\n\n#### Customize the password prompt\n\nCustomize the HTML to have the encrypted page match your style (see [the FAQ](#can-i-customize-the-password-prompt) for a full custom template):\n\n```bash\n# use your own custom template\nstaticrypt test.html -t my/own/password_template.html\n\n# or customize the default template\nstaticrypt test.html \\\n    --template-color-primary \"#fd45a4\" \\\n    --template-title \"My custom title\" \\\n    --template-instructions \"To unlock this file, you should...\" \\\n    # ...\n```\n\n#### Decrypt files from the CLI\n\nDecrypt files you encrypted earlier with StatiCrypt straight from the CLI by including the `--decrypt` flag. (So if you want, you can keep only the encrypted files.) The `-r|--recursive` flag and output `-d|--directory` option work the same way as when encrypting (default name for the output directory is `decrypted`):\n\n```bash\nstaticrypt encrypted/test.html --decrypt\n# => decrypted file is in decrypted/test.html\n```\n\n### CLI Reference\n\nThe password argument is optional if `STATICRYPT_PASSWORD` is set in the environment or `.env` file.\n\n    Usage: staticrypt <filename> [<filename> ...] [options]\n\n    Options:\n          --help                      Show help                            [boolean]\n          --version                   Show version number                  [boolean]\n      -c, --config                    Path to the config file. Set to \"false\" to\n                                      disable.[string] [default: \".staticrypt.json\"]\n      -d, --directory                 Name of the directory where the generated\n                                      files will be saved. If the '--decrypt' flag\n                                      is set, default will be 'decrypted'.\n                                                     [string] [default: \"encrypted\"]\n          --decrypt                   Include this flag to decrypt files instead of\n                                      encrypt.            [boolean] [default: false]\n      -p, --password                  The password to encrypt your file with. Leave\n                                      empty to be prompted for it. If\n                                      STATICRYPT_PASSWORD is set in the env, we'll\n                                      use that instead.     [string] [default: null]\n      -r, --recursive                 Whether to recursively encrypt the input\n                                      directory.          [boolean] [default: false]\n          --remember                  Integer: expiration in days of the \"Remember \n                                      me\" checkbox that will save the (salted + \n                                      hashed) password in localStorage when entered \n                                      by the user. Set to \"false\" to hide the box. \n                                      Default: \"0\", no expiration.      [default: 0]\n      -s, --salt                      Generate a config file or set the salt\n                                      manually. Pass a 32-character-long hexadecimal\n                                      string to use as salt, or leave empty to\n                                      generate, display and save to config a random\n                                      salt. This won't overwrite an existing config\n                                      file.                                 [string]\n          --share                     Get a link containing your hashed password\n                                      that will auto-decrypt the page. Pass your URL\n                                      as a value to append\n                                      \"#staticrypt_pwd=<hashed_pwd>\", or leave empty\n                                      to display the hash to append.        [string]\n          --share-remember            Whether the share link should auto-enable\n                                      'Remember-me'.      [boolean] [default: false]\n          --short                     Hide the \"short password\" warning.\n                                                          [boolean] [default: false]\n      -t, --template                  Path to custom HTML template with password\n                                      prompt.\n                   [string] [default: \"/code/staticrypt/lib/password_template.html\"]\n          --template-button           Label to use for the decrypt button. Default:\n                                      \"DECRYPT\".       [string] [default: \"DECRYPT\"]\n          --template-color-primary    Primary color (button...)\n                                                       [string] [default: \"#4CAF50\"]\n          --template-color-secondary  Secondary color (page background...)\n                                                       [string] [default: \"#76B852\"]\n          --template-instructions     Special instructions to display to the user.\n                                                              [string] [default: \"\"]\n          --template-error            Error message to display on entering wrong\n                                      password.  [string] [default: \"Bad password!\"]\n          --template-placeholder      Placeholder to use for the password input.\n                                                      [string] [default: \"Password\"]\n          --template-remember         Label to use for the \"Remember me\" checkbox.\n                                                   [string] [default: \"Remember me\"]\n          --template-title            Title for the output HTML page.\n                                                [string] [default: \"Protected Page\"]\n          --template-toggle-hide      Alt text for toggling password visibility -\n                                      \"hide\" action.\n                                                 [string] [default: \"Hide password\"]\n          --template-toggle-show      Alt text for toggling password visibility -\n                                      \"show\" action.\n                                                 [string] [default: \"Show password\"]\n\n\n## HOW STATICRYPT WORKS\n\nSo, how can you password protect html without a back-end?\n\nStatiCrypt uses WebCrypto to generate a static, password protected page that can be decrypted in-browser. You can then just send or upload the generated page to a place serving static content (github pages, for example) and you're done: the page will prompt users for a password, and the javascript will decrypt and load your HTML, all done in the browser.\n\nSo it basically encrypts your page and puts everything in a user-friendly way to enter the password in the new file.\n\n## FAQ\n\n### Is it secure?\n\nSimple answer: your file content has been encrypted with AES-256, a popular and strong encryption algorithm. You can now upload it to any public place and no one will be able to read it without the password. So if you used a long, strong password, then yes it should be secure.\n\nLonger answer: actual security depends on a number of factors and on the threat model you want to protect against. Because your full encrypted file is accessible client side, brute-force/dictionary attacks would be easy to do at a fast pace: **use a long, unusual password**. We recommend 16+ alphanum characters, [Bitwarden](https://bitwarden.com/) is a great open-source password manager if you don't have one already.\n\nOn the technical aspects: we use AES in CBC mode (see a discussion on why this mode is appropriate for StatiCrypt in [#19](https://github.com/robinmoisson/staticrypt/issues/19)) and key stretching with 600k PBKDF2-SHA256 iterations to slow down brute-force attacks (which is the [recommended number](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html#pbkdf2) by OWASP - read a detailed report on why this number and the security model of StatiCrypt in [#159](https://github.com/robinmoisson/staticrypt/issues/159)).\n\n**Transparency disclaimer:** I am not a cryptographer. I try my best to get the implementation right, listen to feedback and be transparent in stewarding StatiCrypt. But please adjust accordingly depending on your threat model: if you are an at-risk activist or have very sensitive crypto assets to protect, you might want to use something else.\n\n### Can I customize the password prompt?\n\nYes! Just copy `lib/password_template.html`, modify it to suit your style and point to your template file with the `-t path/to/my/file.html` flag. \n\nBe careful to not break the encrypting javascript part, the variables replaced by StatiCrypt are in this format: `/*[|variable|]*/0`. Don't leave out the `0` at the end, this weird syntax is to avoid conflict with other templating engines while still being read as valid JS to parsers so we can use auto-formatting on the template files. Prettier will add a space before the `0` if the variable is in a JS section  - this isn't very pretty but it won't break the templating engine so don't worry about it (if you want to add a prettier plugin that will avoid this behavior, feel free to open a PR!).\n\n### Can I support multiple users with different passwords?\n\nAt the moment you can only use one passsword per page (though there is a reflection on supporting decryption with multiple different passwords in [#158](https://github.com/robinmoisson/staticrypt/issues/158)). If you want to support multiple users so you can invalidate passwords individualy, the current recommended way is the following:\n\n- Make a script that will encrypt your files with different passwords and different output folders\n\n  ```\n  staticrypt test.html -p <john-password> -d john\n  ...\n  ```\n  \n- send each user the link to their folder with their password: `https://example.com/john/test.html`\n\nIn a way, the username input becomes the folder in the `https://example.com/<username>` URL, and the password input is the HTML form. You can then invalidate a single password by changing it in your script and running it again. \n\n### Why doesn't StatiCrypt work in HTTP?\n\nFrom version 3.x StatiCrypt only uses the browser WebCrypto API, which makes it more secure but is only available in HTTPS or on localhost. If you need to use it in HTTP, you can use version 2.x which offers the CryptoJS engine as an option, and will work everywhere.\n\n### Why does StatiCrypt create a config file?\n\nThe \"Remember me\" feature stores the user password hashed and salted in the browser's localStorage, so it needs the salt to be the same each time you encrypt otherwise the user would be logged out when you encrypt the page again. The config file is a way to store the salt in between runs, so you don't have to remember it and pass it manually.\n\nWhen deciding what salt to use, StatiCrypt will first look for a `--salt` flag, then try to get the salt from the config file, and if it still doesn't find a salt it will generate a random one. It then saves the salt in the config file.\n\nIf you don't want StatiCrypt to create or use the config file, you can set `--config false` to disable it.\n\nThe salt isn't secret (it's publicly visible on the encrypted file), so you don't need to worry about hiding the config file. If you're encrypting as part of a CI step, you can commit the `.staticrypt.json` file so it's accessible to your build server.\n\n### How does the \"Remember me\" checkbox work?\n\nThe CLI will add a \"Remember me\" checkbox on the password prompt by default (`--remember false` to disable). If the user checks it, the (salted + hashed) password will be stored in their browser's localStorage and the page will attempt to auto-decrypt when they come back.\n\nIf no value is provided the stored password doesn't expire, you can also give it a value in days for how long should the store value be kept with `--remember NUMBER_OF_DAYS`. If the user reconnects to the page after the expiration date the stored value will be cleared.\n\n#### \"Logging out\"\n\nYou can clear StatiCrypt values in localStorage (effectively \"logging out\") at any time by appending `staticrypt_logout` to the URL fragment (`https://mysite.com#staticrypt_logout`).\n\n#### Encrypting multiple pages\n\nThis allows encrypting multiple page on a single domain with the same password: if you check \"Remember me\", you'll have to enter your password once then all the pages on that domain will automatically decrypt their content. Because the hashed value is stored in the browser's localStorage, this will only work if all the pages are on the same domain name.\n\n#### Is the \"Remember me\" checkbox secure?\n\nIn case the value stored in the browser becomes compromised an attacker can decrypt the page, but because it's stored salted and hashed this should still protect against password reuse attacks if you've used the password on other websites (of course, please use a long, unique password nonetheless).\n\n#### Can I remove the \"Remember me\" checkbox?\n\nIf you don't want the checkbox to be included, you can set the `--remember false` flag to disable it.\n\n## Contributing\n\n### 🙏 Thank you!\n\n- [@AaronCoplan](https://github.com/AaronCoplan) for bringing the CLI to life\n- [@epicfaace](https://github.com/epicfaace) & [@thomasmarr](https://github.com/thomasmarr) for sparking the caching of the password in localStorage, allowing the \"Remember me\" checkbox\n- [@hurrymaplelad](https://github.com/hurrymaplelad) for refactoring a lot of the code and making the project much more pleasant to work with\n- [@hurrymaplelad](https://github.com/hurrymaplelad) and [@tarpdalton](https://github.com/tarpdalton) for their work in bringing WebCrypto to StatiCrypt\n\n### Opening PRs and issues\n\nI administer the project when I have time and motivation. You're free to open PRs if you're ok with having no response for a (possibly very) long time and me possibly ending up getting inspiration from your proposal but merging something different myself (I'll try to credit you though). Apologies in advance for the delay, and thank you for making the project better!\n\nOpening issues with suggestions and bug reports is welcome.\n\nIf you find a serious security bug please open an issue or contact me following the instructions in [SECURITY.md](SECURITY.md) and I'll try to fix it relatively quickly.\n\n### Security\n\nYou can find the security policy and secure contact details in [SECURITY.md](SECURITY.md). If you have general ideas or feedback around the implementation or StatiCrypt security model they are very welcome, if it's not extra sensitive feel free to open an issue. A couple of place where security was discussed previously are [#19](https://github.com/robinmoisson/staticrypt/issues/19) and [#159](https://github.com/robinmoisson/staticrypt/issues/159).\n\n### Guidelines to contributing\n\n#### Source map\n\n- `cli/` - The command-line interface published to NPM.\n- `example/` - Example encrypted files, used as an example in the public website and for manual testing.\n- `lib/` - Files shared across www and cli.\n- `scripts/` - Convenient scripts for building the project.\n- `index.html` - The root of the in-browser encryption site hosted at https://robinmoisson.github.io/staticrypt. Kept in the root of the repo for easy deploys to GitHub Pages.\n\n#### Build\n\nWhen editing StatiCrypt logic, we want to sync the changes to the browser version, the CLI and the example files, so all of them use the new logic. To do so, run:  \n\n```\nnpm install\nnpm run build\n```\n\n#### Test\n\nThe testing is done manually for now - you can run [build](#build), then open `example/encrypted/example.html` and check everything works correctly. There is an open issue to automate this in [#136](https://github.com/robinmoisson/staticrypt/issues/136), feel free to contribute to setting up a test framework if you'd like!\n\n## Community and alternatives\n\nHere are some other projects and community resources you might find interesting (this is included as an informative section, I haven't personally vetted any of those). \n\nIf you have a StatiCrypt project you'd like to share, feel free to open an issue describing it.\n\n### Based on StatiCrypt, tutorials and projects\n\n**Template to host an encrypted single page website with Github Pages:** [a-nau/password-protected-website-template](https://github.com/a-nau/password-protected-website-template) is a demonstration of how to build a protected page on Github Pages, integrating with Github Actions.\n\n### Alternatives to StatiCrypt\n\n[MaxLaumeister/PageCrypt](https://github.com/MaxLaumeister/PageCrypt) is a project with similar features in a different style (I think it was created before StatiCrypt).\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 5.1142578125,
          "content": "# Security Policy\n\n## Supported Versions\n\nThese versions will receive security updates:\n\n| Version | Security updates |\n|---------|------------------|\n| 3.x     | ✅ Yes            |\n| 2.x     | ✅ Yes            |\n| 1.x     | ❌ No             |\n\nWhen a version stops being supported, the last update will be to display a warning when running the command.\n\n## Reporting a Vulnerability\n\nIf you'd like to warn me privately of a vulnerabilty, you can write me at robin.moisson on my protonmail.com address. I am attaching my GPG key at the end of this document, though it's not mandatory to use it.\n\nIf it's a more of a suggestion, or something that can be discussed openly without negative impact, you can also open an issue. Discussions on the security model and choices of StatiCrypt are very welcome!\n\nIn case of a severe vulnerability I'll try to get back to you quickly to acknowledge I got the message, and to get a fix out relatively quickly as well. (I am sometimes offline for a few weeks at a time but that's pretty rare.)\n\nAnd finally if you're reporting anything security related: thank you very much for making StatiCrypt safer, your benevolence is very much appreciated! 🙏\n\n## Public key\n\nMy public key:\n\n```\n-----BEGIN PGP PUBLIC KEY BLOCK-----\n\nmQINBGP7Nw0BEADTAxpYuydugSjQ4OtfzFwLqIG0lRZG8dCQVSFXEaPL2IjRis/j\nHgeGeaNuVi6X30YDOnc+P/FKTP0CrheDEgECMj5Ua0E7taEbA3vlAVIjHMC5F91n\nAc2G/yUC/7wSiIJkqL+joEYX3QadxaJQe65ljg3QCKGgWwdzDubCLc5KLb0r5Mjj\nGqI3CxAlEelNjAqF0PhQNcdT6FBPLXfhdNBdcUBhlEVSGif+D0idrzBpxGZUYV3h\nLjuYSMyzpc1sPnPpOW419/mjM4m3i1UvuUKgh/GA8QE0SWEzgs0yiMzO7gQvYl/A\niO7MIRP1mbCRWRmLLEF4RfyinAI+NlVs8KnKhhXjD43TBm9VykmWP7CHkfstYkHQ\noWKTna+Ht1uuL2voXi1FCkL5+SFFSE9/MJNhIkWHPVt8LPrkK6EJzEweQ+vtWkBj\n/Vli78z19+d7LpMRlnIW72lXIthHjQfhMxm+Zf2CKqLXYBXQ14v0iyotBZO5cs3Y\nRqsOYZ49c7dTfxZpHqKBI61+9dT79la7gsXomf9Of4vZUAHuDt6q9a+lYN6swPx1\n35pbxAOWGFUe7vTXkY4OcUCr6Fncmh7YNSCkhHaoM5MRuX7mJn95/nugMEv/ouL5\nnpNiyy1haFtESRt/NyYk0KpSCP2W5NA2zUAPdjezz/8rKWsLdFruqC0p1QARAQAB\ntCxSb2JpbiBNb2lzc29uIDxyb2Jpbi5tb2lzc29uQHByb3Rvbm1haWwuY29tPokC\nTgQTAQoAOBYhBBrJWEyXrIIFasyfipQZcWUAB4WDBQJj+zcNAhsDBQsJCAcCBhUK\nCQgLAgQWAgMBAh4BAheAAAoJEJQZcWUAB4WD4DwP/3C6NyTl7fPWk8CenhDD9SJC\nvNcsasXIOiEaDyf4JeFGcOb2rsiIKyt+eAorGaioRD+RjZQUMiVQhRm7pRquyc+t\n6M/Db53yhBrZ4h+fryBv9+lAizxYMg5NmCTgyf7YaZDxAuT1kWpQ23f2TZc98WCP\nKtkMvWP0HVJF+/UZKZ2qVcvvErmogqgrr7QxlLWiF/JUlAe2mdwSpC/FxaGCcWNA\nBJv/8tQ4QkKBkGguMvl3qq8BQlmuW3uE+RdRtcC6Gh1nvxUGEBMC6Ut53Vm4rGxl\nnFQ+sX7q6lVADJrkxPqWlYoQnvPqWA2uFr5CWJiLDMIi5oZIiHa5WctxFBLDJp+g\nq3ZqVeoY/5Q0o/LzeknxbKdI9BBKKmnZz1Qqk02a7KfhN13xQeJ3ZHpetT9LfG6G\nk6kFO9v6UVVDO6DmmTefU/LpDdnZYQLK09GtQgLrIHv3+MoEp15BrLFgSpQ/uiur\nVSU0K3D5EtvbFDxxrpedGrzWlu1wLIdk5mXX3GMKGS4zoZJAZEgm6fAJC1jmWU0u\nfrOIgukls1a4WrNlFerMPJPbG9p6llV2miGgSYe2s43ubJ1vkFVmq0gyx5t8JvW0\nh7ctj2lNqtYeGGhYGXvvOKtMGFYhhnjJKzj8s+KcvDv56DQ6/cvNiqn7vo0301SV\n6+TeY+vMo+ugPvlZOAS/tCdSb2JpbiBNb2lzc29uIDxyb2Jpbi5tb2lzc29uQGdt\nYWlsLmNvbT6JAk4EEwEKADgWIQQayVhMl6yCBWrMn4qUGXFlAAeFgwUCY/s5WAIb\nAwULCQgHAgYVCgkICwIEFgIDAQIeAQIXgAAKCRCUGXFlAAeFg3GOD/411DbRodhw\nFipO3QnJpRON6acp6QpyxlZvhoMRJt7tKVVQr3BZFGVcYlzLJ4VTtE+KgPqe+/sX\n7JUUpfmIzGwXtvviJ87ZFjbzTAbPucuPR5cEAwFxp7rPkWMPIPCW+BKgb+iPha3A\n2q58bHnLwS+/kQ0/SbmgF+ir7hdbjzSzsnsus9k/bB1aLviB1bQ39heQLk+k1fN6\nqoCrxoyXps6NZ9LdPYUUgpXJ/d3rqvrxKSHVpNZP3171CqD6+451+i5q60xUNotM\nLHXxzAcNBGe+ySe7UV69fhCZNnj3mOhp1QAxuA2us1aKyAJraWY5HipFnAdHP1Rx\nQOJz7evW2D/21Od1ygIc1W7Xs1cO+5C9GsU1WHZTk9XtU8RwMBbxU2t8dhcN8+nn\nu3iwMmPtPzj3Go5aOiIlQGSAMn9v1IR5LT+A+Is3sQz5xmYpZlW6ELrRW237e5H0\nYxlEtfGcJJieYeco78FJ2dmYCUbPn8Oqo3s6RiWbkwczX7cc3J427kH/wuj4sPbF\nMTCrLrHeGKcsSbnpjaR8yV7MwDh00ZlIcN0q4FVGgJuR9oSaBTXiNNOFlWVRw9kU\nPtGoi0i5j8a9VtGDQYtF9vVtwzwKVA6WUExmwtpfeiXNPdkeJIeov4YOSMN1XTfV\nREwenLoVdcuLNIzLj8N4JVsahwh8DsHRh7kCDQRj+zcNARAA21sHU/mjDxxaeu/w\n6NDKBm5AV/nO629893PhhUW3DAWJQbZqO4Z6AksJCcz4gZgXbjqowNLfxDZY8WAX\nPy6CtGo67NjZj9k34IGwcMUU0tHuVfwWpwq/1zHTtz0PGUM5yTCFQHxv9TInyY6L\ne2FLtR6ZX+9bEv1TALqvpw2X4fks2qy8lBj9XfiQfAPTDYjCrM5WZewFhwaXisXP\nlJFNqsOSSMCzGaCyXDN6Rj69aEbo9m3dr+DKyrRWjuvFAeG4xPpISFdB7mEYwszV\nR6TLileANODakGtqjzGEX/MZs0QflGUjxKavN9p6rZM6gL/6Drpg0Oo5LkBHPbl9\nYZappKGblOIrPcapUNt7274+xx3rUV4qJ+9UTB8SKxvKXdK6flpznwKcCaD9euZc\nHxfeYjMlWdAKGx0NwkAfa3Zk3znQX/m1SOkOhK6ayTCETX7hwqXXc21IZ+SBp3j2\nDMaNmsHCxufhEwZT/+LJXlns54jyKlvZewUBLYwm77VDjd+PhCwv5wpDazgYneGY\nT0ymOfPYpOJbEjWhvRRduYJSK/YujHDa6PhA7/bsVzXSl5dhCQJrQYUhGIvGWIsx\nLfz2XDHm7FKfclvjOgad9tQ/JPq6fyO5QdphPdne1BQs1AGQomqAdTTmf9xhtf/h\naAnISg52IZeUCcKryJN/hzmIoZ8AEQEAAYkCNgQYAQoAIBYhBBrJWEyXrIIFasyf\nipQZcWUAB4WDBQJj+zcNAhsMAAoJEJQZcWUAB4WDVggP/0bB5R/+azDy8y4p5wcj\nmfGLLsWFWkvJukAGglZpCRS3G5G4LtTnLoTTqZ2S83ZNeQc+fTzm+45xBcJov0j4\n57dEUXsQvIfodGsWaEBQIaJrkusgdTqx8gv/AeB7h63iUuTeL98uqbhqNm5coxtO\nSi7SBQ36SbpvuV1GptnxHTKs6jOpADyN+Bx5tPKukTP+6Yuo51WwMmIffv2VcTv9\n04/jV1JljCEg7NFvU6eg9/99AmGG0INe/z8CcvM8cAyqWbbWlzXXeM/ut9ri7lJI\nDhW9wk0u3ppXLFHF+X63rQJS+IvPLC/MZpym6oYNpGl9El92uBlCABHoWnJ0xgsE\nT5B+EOoMKiJog7qGRC+aHfxGwpAJ4PHFZH89oRUA2shYnqhUsvVWmfIR3lw55mn4\n6iy12MiGJFRhJajowL5Q+6xbSuKQu/wLm0U8Vznuo6fpsHFoKpoduNJwJN+3zRh+\nYwCgnIc986AMGu0l3E302BO/qxUhXtXCaln0Pj7lBmJ58ksjhv2Y6vyrS8ef+eUs\nKIw9dJ4rFhfpwy4DqgDkYN74vTMd+naVnqrKmrOrItjTwpIcMcNgyQhmlsGytAkR\n8coKjowpSSac4zc982N97mOJ683cLEbZvu1cL3xEaRgLt0AR0QWNInIlAL/CbUD7\nm4zPXCE1QrrgPtbBL6GXiE5z\n=Ab3R\n-----END PGP PUBLIC KEY BLOCK-----\n```\n"
        },
        {
          "name": "cli",
          "type": "tree",
          "content": null
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.html",
          "type": "blob",
          "size": 52.6259765625,
          "content": "<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"utf-8\" />\n        <title>StatiCrypt: Password protect static HTML</title>\n        <meta name=\"description\" content=\"\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <link\n            rel=\"stylesheet\"\n            type=\"text/css\"\n            href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"\n            integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\"\n            crossorigin=\"anonymous\"\n        />\n        <style>\n            a.no-style {\n                color: inherit;\n                text-decoration: inherit;\n            }\n\n            body {\n                font-size: 16px;\n            }\n\n            label.no-style {\n                font-weight: normal;\n            }\n\n            @media screen and (-webkit-min-device-pixel-ratio:0) { \n                .staticrypt-form input[type=\"password\"],\n                input[type=\"text\"]  {\n                    font-size: 16px;\n                }\n            }\n        </style>\n    </head>\n\n    <body>\n        <div class=\"container\">\n            <div class=\"row\">\n                <div class=\"col-xs-12\">\n                    <h1>\n                        StatiCrypt\n                        <div class=\"pull-right\">\n                            <iframe\n                                src=\"https://ghbtns.com/github-btn.html?user=robinmoisson&repo=staticrypt&type=star&size=large\"\n                                frameborder=\"0\"\n                                scrolling=\"0\"\n                                width=\"80px\"\n                                height=\"30px\"\n                            ></iframe>\n                            <iframe\n                                src=\"https://ghbtns.com/github-btn.html?user=robinmoisson&repo=staticrypt&type=fork&size=large\"\n                                frameborder=\"0\"\n                                scrolling=\"0\"\n                                width=\"80px\"\n                                height=\"30px\"\n                            ></iframe>\n                        </div>\n                        <br />\n                        <small>Password protect a static HTML page</small>\n                    </h1>\n                    <p>\n                        StatiCrypt uses AES-256 with WebCrypto to encrypt your html string with your long password, in\n                        your browser (client side).\n                    </p>\n                    <p>\n                        Download your encrypted string in a HTML page with a password prompt you can upload anywhere\n                        (see <a target=\"_blank\" href=\"example/encrypted/example.html\">example</a>).\n                    </p>\n                    <p>\n                        The tool is also available as\n                        <a href=\"https://npmjs.com/package/staticrypt\">a CLI on NPM</a> and is\n                        <a href=\"https://github.com/robinmoisson/staticrypt\">open source on GitHub</a>.\n                    </p>\n                    <br />\n\n                    <h4>\n                        <a class=\"no-style\" id=\"toggle-concept\" href=\"#\">\n                            <span id=\"toggle-concept-sign\">►</span> HOW IT WORKS\n                        </a>\n                    </h4>\n                    <div id=\"concept\" class=\"hidden\">\n                        <p>\n                            <b class=\"text-danger\">Disclaimer</b> if you are an at-risk activist, or have extra\n                            sensitive banking data, you should probably use something else!\n                        </p>\n                        <p>\n                            StatiCrypt generates a static, password protected page that can be decrypted in-browser:\n                            just send or upload the generated page to a place serving static content (github pages, for\n                            example) and you're done: the javascript will prompt users for password, decrypt the page\n                            and load your HTML.\n                        </p>\n                        <p>\n                            The page is encrypted with AES-256 in CBC mode (see why this mode is appropriate for\n                            StatiCrypt in\n                            <a href=\"https://github.com/robinmoisson/staticrypt/issues/19\">#19</a>). The password is\n                            hashed with PBKDF2 (599k iterations with SHA-256, plus 1k with SHA-1 for legacy reasons (see\n                            <a href=\"https://github.com/robinmoisson/staticrypt/issues/159\">#159</a>), for the added\n                            <a\n                                href=\"https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html#pbkdf2\"\n                                >recommended total</a\n                            >\n                            of 600k) and used to encrypt the page.\n                        </p>\n                        <p>\n                            It basically encrypts your page and puts everything with a user-friendly way to use a\n                            password in the new file. AES-256 is state of the art but\n                            <b\n                                >brute-force/dictionary attacks would be easy to do at a really fast pace: use a long,\n                                unusual password!</b\n                            >\n                            <br />\n                            => To be safe, we recommend 16+ alphanum characters, and using a password manager like the\n                            open-source <a href=\"http://bitwarden.com\">Bitwarden</a>.\n                        </p>\n                        <p>\n                            Feel free to contribute or report any thought to the\n                            <a href=\"https://github.com/robinmoisson/staticrypt\">GitHub project</a>.\n                        </p>\n                    </div>\n                    <br />\n                </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"col-xs-12\">\n                    <form id=\"encrypt_form\">\n                        <div class=\"form-group\">\n                            <label for=\"password\">Password</label>\n                            <input\n                                type=\"password\"\n                                class=\"form-control\"\n                                id=\"password\"\n                                placeholder=\"Password (choose a long one!)\"\n                            />\n                        </div>\n\n                        <div class=\"form-group\">\n                            <label for=\"unencrypted_html\">HTML/string to encrypt</label>\n                            <textarea\n                                class=\"form-control\"\n                                id=\"unencrypted_html\"\n                                placeholder=\"<html><head>...\"\n                                rows=\"5\"\n                            ></textarea>\n                        </div>\n\n                        <div class=\"form-group\">\n                            <label class=\"no-style\">\n                                <input type=\"checkbox\" id=\"remember\" checked />\n                                Add \"Remember me\" checkbox (append <code>#staticrypt_logout</code> to your URL to\n                                logout)\n                                <small>\n                                    <abbr\n                                        class=\"text-muted\"\n                                        title='The password will be stored in clear text in the browser&apos;s localStorage upon entry by the user. See \"More options\" to set the expiration (default: none)'\n                                    >\n                                        (?)\n                                    </abbr>\n                                </small>\n                            </label>\n                        </div>\n\n                        <p>\n                            <a href=\"#\" id=\"toggle-extra-option\">+ More options</a>\n                        </p>\n                        <div id=\"extra-options\" class=\"hidden\">\n                            <div class=\"form-group\">\n                                <label for=\"template_title\">Page title</label>\n                                <input\n                                    type=\"text\"\n                                    class=\"form-control\"\n                                    id=\"template_title\"\n                                    placeholder=\"Default: 'Protected Page'\"\n                                />\n                            </div>\n\n                            <div class=\"form-group\">\n                                <label for=\"template_instructions\">Instructions to display the user</label>\n                                <textarea\n                                    class=\"form-control\"\n                                    id=\"template_instructions\"\n                                    placeholder=\"Default: nothing.\"\n                                ></textarea>\n                            </div>\n\n                            <div class=\"form-group\">\n                                <label for=\"template_placeholder\">Password input placeholder</label>\n                                <input\n                                    type=\"text\"\n                                    class=\"form-control\"\n                                    id=\"template_placeholder\"\n                                    placeholder=\"Default: 'Password'\"\n                                />\n                            </div>\n\n                            <div class=\"form-group\">\n                                <label for=\"template_remember\">\"Remember me\" checkbox label</label>\n                                <input\n                                    type=\"text\"\n                                    class=\"form-control\"\n                                    id=\"template_remember\"\n                                    placeholder=\"Default: 'Remember me'\"\n                                />\n                            </div>\n\n                            <div class=\"form-group\">\n                                <label for=\"remember_in_days\">\"Remember me\" expiration in days</label>\n                                <input\n                                    type=\"number\"\n                                    class=\"form-control\"\n                                    id=\"remember_in_days\"\n                                    step=\"any\"\n                                    placeholder=\"Default: 0 (no expiration)\"\n                                />\n                                <small class=\"form-text text-muted\">\n                                    After this many days, the user will have to enter the password again. Leave empty or\n                                    set to 0 for no expiration.\n                                </small>\n                            </div>\n\n                            <div class=\"form-group\">\n                                <label for=\"template_button\">Decrypt button label</label>\n                                <input\n                                    type=\"text\"\n                                    class=\"form-control\"\n                                    id=\"template_button\"\n                                    placeholder=\"Default: 'DECRYPT'\"\n                                />\n                            </div>\n\n                            <div class=\"form-group\">\n                                <label for=\"template_color_primary\">Primary color (button, ...)</label>\n                                <input\n                                    type=\"text\"\n                                    class=\"form-control\"\n                                    id=\"template_color_primary\"\n                                    placeholder=\"Default: '#4CAF50'\"\n                                />\n                            </div>\n\n                            <div class=\"form-group\">\n                                <label for=\"template_color_secondary\">Secondary color (background, ...)</label>\n                                <input\n                                    type=\"text\"\n                                    class=\"form-control\"\n                                    id=\"template_color_secondary\"\n                                    placeholder=\"Default: '#76B852'\"\n                                />\n                            </div>\n                        </div>\n\n                        <button class=\"btn btn-primary pull-right\" type=\"submit\">\n                            Generate password protected HTML\n                        </button>\n                    </form>\n                </div>\n            </div>\n\n            <div class=\"row mb-5\">\n                <div class=\"col-xs-12\">\n                    <h2>Encrypted HTML</h2>\n                    <p>\n                        <a\n                            class=\"btn btn-success download\"\n                            download=\"encrypted.html\"\n                            id=\"download-link\"\n                            disabled=\"disabled\"\n                            >Download html file with password prompt</a\n                        >\n                    </p>\n                    <pre id=\"encrypted_html_display\">Your encrypted string</pre>\n                </div>\n            </div>\n        </div>\n\n        <script src=\"https://cdn.ckeditor.com/4.7.0/standard/ckeditor.js\"></script>\n\n        <script id=\"cryptoEngine\">\n            window.cryptoEngine = ((function(){\n  const exports = {};\n  const { subtle } = crypto;\n\nconst IV_BITS = 16 * 8;\nconst HEX_BITS = 4;\nconst ENCRYPTION_ALGO = \"AES-CBC\";\n\n/**\n * Translates between utf8 encoded hexadecimal strings\n * and Uint8Array bytes.\n */\nconst HexEncoder = {\n    /**\n     * hex string -> bytes\n     * @param {string} hexString\n     * @returns {Uint8Array}\n     */\n    parse: function (hexString) {\n        if (hexString.length % 2 !== 0) throw \"Invalid hexString\";\n        const arrayBuffer = new Uint8Array(hexString.length / 2);\n\n        for (let i = 0; i < hexString.length; i += 2) {\n            const byteValue = parseInt(hexString.substring(i, i + 2), 16);\n            if (isNaN(byteValue)) {\n                throw \"Invalid hexString\";\n            }\n            arrayBuffer[i / 2] = byteValue;\n        }\n        return arrayBuffer;\n    },\n\n    /**\n     * bytes -> hex string\n     * @param {Uint8Array} bytes\n     * @returns {string}\n     */\n    stringify: function (bytes) {\n        const hexBytes = [];\n\n        for (let i = 0; i < bytes.length; ++i) {\n            let byteString = bytes[i].toString(16);\n            if (byteString.length < 2) {\n                byteString = \"0\" + byteString;\n            }\n            hexBytes.push(byteString);\n        }\n        return hexBytes.join(\"\");\n    },\n};\n\n/**\n * Translates between utf8 strings and Uint8Array bytes.\n */\nconst UTF8Encoder = {\n    parse: function (str) {\n        return new TextEncoder().encode(str);\n    },\n\n    stringify: function (bytes) {\n        return new TextDecoder().decode(bytes);\n    },\n};\n\n/**\n * Salt and encrypt a msg with a password.\n */\nasync function encrypt(msg, hashedPassword) {\n    // Must be 16 bytes, unpredictable, and preferably cryptographically random. However, it need not be secret.\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/encrypt#parameters\n    const iv = crypto.getRandomValues(new Uint8Array(IV_BITS / 8));\n\n    const key = await subtle.importKey(\"raw\", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, [\"encrypt\"]);\n\n    const encrypted = await subtle.encrypt(\n        {\n            name: ENCRYPTION_ALGO,\n            iv: iv,\n        },\n        key,\n        UTF8Encoder.parse(msg)\n    );\n\n    // iv will be 32 hex characters, we prepend it to the ciphertext for use in decryption\n    return HexEncoder.stringify(iv) + HexEncoder.stringify(new Uint8Array(encrypted));\n}\nexports.encrypt = encrypt;\n\n/**\n * Decrypt a salted msg using a password.\n *\n * @param {string} encryptedMsg\n * @param {string} hashedPassword\n * @returns {Promise<string>}\n */\nasync function decrypt(encryptedMsg, hashedPassword) {\n    const ivLength = IV_BITS / HEX_BITS;\n    const iv = HexEncoder.parse(encryptedMsg.substring(0, ivLength));\n    const encrypted = encryptedMsg.substring(ivLength);\n\n    const key = await subtle.importKey(\"raw\", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, [\"decrypt\"]);\n\n    const outBuffer = await subtle.decrypt(\n        {\n            name: ENCRYPTION_ALGO,\n            iv: iv,\n        },\n        key,\n        HexEncoder.parse(encrypted)\n    );\n\n    return UTF8Encoder.stringify(new Uint8Array(outBuffer));\n}\nexports.decrypt = decrypt;\n\n/**\n * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.\n *\n * @param {string} password\n * @param {string} salt\n * @returns {Promise<string>}\n */\nasync function hashPassword(password, salt) {\n    // we hash the password in multiple steps, each adding more iterations. This is because we used to allow less\n    // iterations, so for backward compatibility reasons, we need to support going from that to more iterations.\n    let hashedPassword = await hashLegacyRound(password, salt);\n\n    hashedPassword = await hashSecondRound(hashedPassword, salt);\n\n    return hashThirdRound(hashedPassword, salt);\n}\nexports.hashPassword = hashPassword;\n\n/**\n * This hashes the password with 1k iterations. This is a low number, we need this function to support backwards\n * compatibility.\n *\n * @param {string} password\n * @param {string} salt\n * @returns {Promise<string>}\n */\nfunction hashLegacyRound(password, salt) {\n    return pbkdf2(password, salt, 1000, \"SHA-1\");\n}\nexports.hashLegacyRound = hashLegacyRound;\n\n/**\n * Add a second round of iterations. This is because we used to use 1k, so for backwards compatibility with\n * remember-me/autodecrypt links, we need to support going from that to more iterations.\n *\n * @param hashedPassword\n * @param salt\n * @returns {Promise<string>}\n */\nfunction hashSecondRound(hashedPassword, salt) {\n    return pbkdf2(hashedPassword, salt, 14000, \"SHA-256\");\n}\nexports.hashSecondRound = hashSecondRound;\n\n/**\n * Add a third round of iterations to bring total number to 600k. This is because we used to use 1k, then 15k, so for\n * backwards compatibility with remember-me/autodecrypt links, we need to support going from that to more iterations.\n *\n * @param hashedPassword\n * @param salt\n * @returns {Promise<string>}\n */\nfunction hashThirdRound(hashedPassword, salt) {\n    return pbkdf2(hashedPassword, salt, 585000, \"SHA-256\");\n}\nexports.hashThirdRound = hashThirdRound;\n\n/**\n * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.\n *\n * @param {string} password\n * @param {string} salt\n * @param {int} iterations\n * @param {string} hashAlgorithm\n * @returns {Promise<string>}\n */\nasync function pbkdf2(password, salt, iterations, hashAlgorithm) {\n    const key = await subtle.importKey(\"raw\", UTF8Encoder.parse(password), \"PBKDF2\", false, [\"deriveBits\"]);\n\n    const keyBytes = await subtle.deriveBits(\n        {\n            name: \"PBKDF2\",\n            hash: hashAlgorithm,\n            iterations,\n            salt: UTF8Encoder.parse(salt),\n        },\n        key,\n        256\n    );\n\n    return HexEncoder.stringify(new Uint8Array(keyBytes));\n}\n\nfunction generateRandomSalt() {\n    const bytes = crypto.getRandomValues(new Uint8Array(128 / 8));\n\n    return HexEncoder.stringify(new Uint8Array(bytes));\n}\nexports.generateRandomSalt = generateRandomSalt;\n\nasync function signMessage(hashedPassword, message) {\n    const key = await subtle.importKey(\n        \"raw\",\n        HexEncoder.parse(hashedPassword),\n        {\n            name: \"HMAC\",\n            hash: \"SHA-256\",\n        },\n        false,\n        [\"sign\"]\n    );\n    const signature = await subtle.sign(\"HMAC\", key, UTF8Encoder.parse(message));\n\n    return HexEncoder.stringify(new Uint8Array(signature));\n}\nexports.signMessage = signMessage;\n\nfunction getRandomAlphanum() {\n    const possibleCharacters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n\n    let byteArray;\n    let parsedInt;\n\n    // Keep generating new random bytes until we get a value that falls\n    // within a range that can be evenly divided by possibleCharacters.length\n    do {\n        byteArray = crypto.getRandomValues(new Uint8Array(1));\n        // extract the lowest byte to get an int from 0 to 255 (probably unnecessary, since we're only generating 1 byte)\n        parsedInt = byteArray[0] & 0xff;\n    } while (parsedInt >= 256 - (256 % possibleCharacters.length));\n\n    // Take the modulo of the parsed integer to get a random number between 0 and totalLength - 1\n    const randomIndex = parsedInt % possibleCharacters.length;\n\n    return possibleCharacters[randomIndex];\n}\n\n/**\n * Generate a random string of a given length.\n *\n * @param {int} length\n * @returns {string}\n */\nfunction generateRandomString(length) {\n    let randomString = \"\";\n\n    for (let i = 0; i < length; i++) {\n        randomString += getRandomAlphanum();\n    }\n\n    return randomString;\n}\nexports.generateRandomString = generateRandomString;\n\n  return exports;\n})());\n        </script>\n\n        <script id=\"codec\">\n            window.codec = ((function(){\n  const exports = {};\n  /**\n * Initialize the codec with the provided cryptoEngine - this return functions to encode and decode messages.\n *\n * @param cryptoEngine - the engine to use for encryption / decryption\n */\nfunction init(cryptoEngine) {\n    const exports = {};\n\n    /**\n     * Top-level function for encoding a message.\n     * Includes password hashing, encryption, and signing.\n     *\n     * @param {string} msg\n     * @param {string} password\n     * @param {string} salt\n     *\n     * @returns {string} The encoded text\n     */\n    async function encode(msg, password, salt) {\n        const hashedPassword = await cryptoEngine.hashPassword(password, salt);\n\n        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);\n\n        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store\n        // it in localStorage safely, we don't use the clear text password)\n        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);\n\n        return hmac + encrypted;\n    }\n    exports.encode = encode;\n\n    /**\n     * Encode using a password that has already been hashed. This is useful to encode multiple messages in a row, that way\n     * we don't need to hash the password multiple times.\n     *\n     * @param {string} msg\n     * @param {string} hashedPassword\n     *\n     * @returns {string} The encoded text\n     */\n    async function encodeWithHashedPassword(msg, hashedPassword) {\n        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);\n\n        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store\n        // it in localStorage safely, we don't use the clear text password)\n        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);\n\n        return hmac + encrypted;\n    }\n    exports.encodeWithHashedPassword = encodeWithHashedPassword;\n\n    /**\n     * Top-level function for decoding a message.\n     * Includes signature check and decryption.\n     *\n     * @param {string} signedMsg\n     * @param {string} hashedPassword\n     * @param {string} salt\n     * @param {int} backwardCompatibleAttempt\n     * @param {string} originalPassword\n     *\n     * @returns {Object} {success: true, decoded: string} | {success: false, message: string}\n     */\n    async function decode(signedMsg, hashedPassword, salt, backwardCompatibleAttempt = 0, originalPassword = \"\") {\n        const encryptedHMAC = signedMsg.substring(0, 64);\n        const encryptedMsg = signedMsg.substring(64);\n        const decryptedHMAC = await cryptoEngine.signMessage(hashedPassword, encryptedMsg);\n\n        if (decryptedHMAC !== encryptedHMAC) {\n            // we have been raising the number of iterations in the hashing algorithm multiple times, so to support the old\n            // remember-me/autodecrypt links we need to try bringing the old hashes up to speed.\n            originalPassword = originalPassword || hashedPassword;\n            if (backwardCompatibleAttempt === 0) {\n                const updatedHashedPassword = await cryptoEngine.hashThirdRound(originalPassword, salt);\n\n                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);\n            }\n            if (backwardCompatibleAttempt === 1) {\n                let updatedHashedPassword = await cryptoEngine.hashSecondRound(originalPassword, salt);\n                updatedHashedPassword = await cryptoEngine.hashThirdRound(updatedHashedPassword, salt);\n\n                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);\n            }\n\n            return { success: false, message: \"Signature mismatch\" };\n        }\n\n        return {\n            success: true,\n            decoded: await cryptoEngine.decrypt(encryptedMsg, hashedPassword),\n        };\n    }\n    exports.decode = decode;\n\n    return exports;\n}\nexports.init = init;\n\n  return exports;\n})());\n        </script>\n\n        <script id=\"formater\">\n            window.formater = ((function(){\n  const exports = {};\n  /**\n * Replace the variable in template tags, between '/*[|variable|]* /0' (without the space in '* /0', ommiting it would\n * break this comment), with the provided data.\n *\n * This weird format is so that we have something that doesn't break JS parser in the template files (it understands it\n * as '0'), so we can still use auto-formatting. The auto-formatter might add a space before the '0', we accept both.\n *\n * @param {string} templateString\n * @param {Object} data\n *\n * @returns string\n */\nfunction renderTemplate(templateString, data) {\n    return templateString.replace(/\\/\\*\\[\\|\\s*(\\w+)\\s*\\|]\\*\\/\\s*0/g, function (_, key) {\n        if (!data || data[key] === undefined) {\n            return key;\n        }\n\n        if (typeof data[key] === \"object\") {\n            return JSON.stringify(data[key]);\n        }\n\n        return data[key];\n    });\n}\nexports.renderTemplate = renderTemplate;\n\n  return exports;\n})());\n        </script>\n\n        <script id=\"staticrypt\">\n            window.staticrypt = ((function(){\n  const exports = {};\n  const cryptoEngine = ((function(){\n  const exports = {};\n  const { subtle } = crypto;\n\nconst IV_BITS = 16 * 8;\nconst HEX_BITS = 4;\nconst ENCRYPTION_ALGO = \"AES-CBC\";\n\n/**\n * Translates between utf8 encoded hexadecimal strings\n * and Uint8Array bytes.\n */\nconst HexEncoder = {\n    /**\n     * hex string -> bytes\n     * @param {string} hexString\n     * @returns {Uint8Array}\n     */\n    parse: function (hexString) {\n        if (hexString.length % 2 !== 0) throw \"Invalid hexString\";\n        const arrayBuffer = new Uint8Array(hexString.length / 2);\n\n        for (let i = 0; i < hexString.length; i += 2) {\n            const byteValue = parseInt(hexString.substring(i, i + 2), 16);\n            if (isNaN(byteValue)) {\n                throw \"Invalid hexString\";\n            }\n            arrayBuffer[i / 2] = byteValue;\n        }\n        return arrayBuffer;\n    },\n\n    /**\n     * bytes -> hex string\n     * @param {Uint8Array} bytes\n     * @returns {string}\n     */\n    stringify: function (bytes) {\n        const hexBytes = [];\n\n        for (let i = 0; i < bytes.length; ++i) {\n            let byteString = bytes[i].toString(16);\n            if (byteString.length < 2) {\n                byteString = \"0\" + byteString;\n            }\n            hexBytes.push(byteString);\n        }\n        return hexBytes.join(\"\");\n    },\n};\n\n/**\n * Translates between utf8 strings and Uint8Array bytes.\n */\nconst UTF8Encoder = {\n    parse: function (str) {\n        return new TextEncoder().encode(str);\n    },\n\n    stringify: function (bytes) {\n        return new TextDecoder().decode(bytes);\n    },\n};\n\n/**\n * Salt and encrypt a msg with a password.\n */\nasync function encrypt(msg, hashedPassword) {\n    // Must be 16 bytes, unpredictable, and preferably cryptographically random. However, it need not be secret.\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/encrypt#parameters\n    const iv = crypto.getRandomValues(new Uint8Array(IV_BITS / 8));\n\n    const key = await subtle.importKey(\"raw\", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, [\"encrypt\"]);\n\n    const encrypted = await subtle.encrypt(\n        {\n            name: ENCRYPTION_ALGO,\n            iv: iv,\n        },\n        key,\n        UTF8Encoder.parse(msg)\n    );\n\n    // iv will be 32 hex characters, we prepend it to the ciphertext for use in decryption\n    return HexEncoder.stringify(iv) + HexEncoder.stringify(new Uint8Array(encrypted));\n}\nexports.encrypt = encrypt;\n\n/**\n * Decrypt a salted msg using a password.\n *\n * @param {string} encryptedMsg\n * @param {string} hashedPassword\n * @returns {Promise<string>}\n */\nasync function decrypt(encryptedMsg, hashedPassword) {\n    const ivLength = IV_BITS / HEX_BITS;\n    const iv = HexEncoder.parse(encryptedMsg.substring(0, ivLength));\n    const encrypted = encryptedMsg.substring(ivLength);\n\n    const key = await subtle.importKey(\"raw\", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, [\"decrypt\"]);\n\n    const outBuffer = await subtle.decrypt(\n        {\n            name: ENCRYPTION_ALGO,\n            iv: iv,\n        },\n        key,\n        HexEncoder.parse(encrypted)\n    );\n\n    return UTF8Encoder.stringify(new Uint8Array(outBuffer));\n}\nexports.decrypt = decrypt;\n\n/**\n * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.\n *\n * @param {string} password\n * @param {string} salt\n * @returns {Promise<string>}\n */\nasync function hashPassword(password, salt) {\n    // we hash the password in multiple steps, each adding more iterations. This is because we used to allow less\n    // iterations, so for backward compatibility reasons, we need to support going from that to more iterations.\n    let hashedPassword = await hashLegacyRound(password, salt);\n\n    hashedPassword = await hashSecondRound(hashedPassword, salt);\n\n    return hashThirdRound(hashedPassword, salt);\n}\nexports.hashPassword = hashPassword;\n\n/**\n * This hashes the password with 1k iterations. This is a low number, we need this function to support backwards\n * compatibility.\n *\n * @param {string} password\n * @param {string} salt\n * @returns {Promise<string>}\n */\nfunction hashLegacyRound(password, salt) {\n    return pbkdf2(password, salt, 1000, \"SHA-1\");\n}\nexports.hashLegacyRound = hashLegacyRound;\n\n/**\n * Add a second round of iterations. This is because we used to use 1k, so for backwards compatibility with\n * remember-me/autodecrypt links, we need to support going from that to more iterations.\n *\n * @param hashedPassword\n * @param salt\n * @returns {Promise<string>}\n */\nfunction hashSecondRound(hashedPassword, salt) {\n    return pbkdf2(hashedPassword, salt, 14000, \"SHA-256\");\n}\nexports.hashSecondRound = hashSecondRound;\n\n/**\n * Add a third round of iterations to bring total number to 600k. This is because we used to use 1k, then 15k, so for\n * backwards compatibility with remember-me/autodecrypt links, we need to support going from that to more iterations.\n *\n * @param hashedPassword\n * @param salt\n * @returns {Promise<string>}\n */\nfunction hashThirdRound(hashedPassword, salt) {\n    return pbkdf2(hashedPassword, salt, 585000, \"SHA-256\");\n}\nexports.hashThirdRound = hashThirdRound;\n\n/**\n * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.\n *\n * @param {string} password\n * @param {string} salt\n * @param {int} iterations\n * @param {string} hashAlgorithm\n * @returns {Promise<string>}\n */\nasync function pbkdf2(password, salt, iterations, hashAlgorithm) {\n    const key = await subtle.importKey(\"raw\", UTF8Encoder.parse(password), \"PBKDF2\", false, [\"deriveBits\"]);\n\n    const keyBytes = await subtle.deriveBits(\n        {\n            name: \"PBKDF2\",\n            hash: hashAlgorithm,\n            iterations,\n            salt: UTF8Encoder.parse(salt),\n        },\n        key,\n        256\n    );\n\n    return HexEncoder.stringify(new Uint8Array(keyBytes));\n}\n\nfunction generateRandomSalt() {\n    const bytes = crypto.getRandomValues(new Uint8Array(128 / 8));\n\n    return HexEncoder.stringify(new Uint8Array(bytes));\n}\nexports.generateRandomSalt = generateRandomSalt;\n\nasync function signMessage(hashedPassword, message) {\n    const key = await subtle.importKey(\n        \"raw\",\n        HexEncoder.parse(hashedPassword),\n        {\n            name: \"HMAC\",\n            hash: \"SHA-256\",\n        },\n        false,\n        [\"sign\"]\n    );\n    const signature = await subtle.sign(\"HMAC\", key, UTF8Encoder.parse(message));\n\n    return HexEncoder.stringify(new Uint8Array(signature));\n}\nexports.signMessage = signMessage;\n\nfunction getRandomAlphanum() {\n    const possibleCharacters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n\n    let byteArray;\n    let parsedInt;\n\n    // Keep generating new random bytes until we get a value that falls\n    // within a range that can be evenly divided by possibleCharacters.length\n    do {\n        byteArray = crypto.getRandomValues(new Uint8Array(1));\n        // extract the lowest byte to get an int from 0 to 255 (probably unnecessary, since we're only generating 1 byte)\n        parsedInt = byteArray[0] & 0xff;\n    } while (parsedInt >= 256 - (256 % possibleCharacters.length));\n\n    // Take the modulo of the parsed integer to get a random number between 0 and totalLength - 1\n    const randomIndex = parsedInt % possibleCharacters.length;\n\n    return possibleCharacters[randomIndex];\n}\n\n/**\n * Generate a random string of a given length.\n *\n * @param {int} length\n * @returns {string}\n */\nfunction generateRandomString(length) {\n    let randomString = \"\";\n\n    for (let i = 0; i < length; i++) {\n        randomString += getRandomAlphanum();\n    }\n\n    return randomString;\n}\nexports.generateRandomString = generateRandomString;\n\n  return exports;\n})());\nconst codec = ((function(){\n  const exports = {};\n  /**\n * Initialize the codec with the provided cryptoEngine - this return functions to encode and decode messages.\n *\n * @param cryptoEngine - the engine to use for encryption / decryption\n */\nfunction init(cryptoEngine) {\n    const exports = {};\n\n    /**\n     * Top-level function for encoding a message.\n     * Includes password hashing, encryption, and signing.\n     *\n     * @param {string} msg\n     * @param {string} password\n     * @param {string} salt\n     *\n     * @returns {string} The encoded text\n     */\n    async function encode(msg, password, salt) {\n        const hashedPassword = await cryptoEngine.hashPassword(password, salt);\n\n        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);\n\n        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store\n        // it in localStorage safely, we don't use the clear text password)\n        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);\n\n        return hmac + encrypted;\n    }\n    exports.encode = encode;\n\n    /**\n     * Encode using a password that has already been hashed. This is useful to encode multiple messages in a row, that way\n     * we don't need to hash the password multiple times.\n     *\n     * @param {string} msg\n     * @param {string} hashedPassword\n     *\n     * @returns {string} The encoded text\n     */\n    async function encodeWithHashedPassword(msg, hashedPassword) {\n        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);\n\n        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store\n        // it in localStorage safely, we don't use the clear text password)\n        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);\n\n        return hmac + encrypted;\n    }\n    exports.encodeWithHashedPassword = encodeWithHashedPassword;\n\n    /**\n     * Top-level function for decoding a message.\n     * Includes signature check and decryption.\n     *\n     * @param {string} signedMsg\n     * @param {string} hashedPassword\n     * @param {string} salt\n     * @param {int} backwardCompatibleAttempt\n     * @param {string} originalPassword\n     *\n     * @returns {Object} {success: true, decoded: string} | {success: false, message: string}\n     */\n    async function decode(signedMsg, hashedPassword, salt, backwardCompatibleAttempt = 0, originalPassword = \"\") {\n        const encryptedHMAC = signedMsg.substring(0, 64);\n        const encryptedMsg = signedMsg.substring(64);\n        const decryptedHMAC = await cryptoEngine.signMessage(hashedPassword, encryptedMsg);\n\n        if (decryptedHMAC !== encryptedHMAC) {\n            // we have been raising the number of iterations in the hashing algorithm multiple times, so to support the old\n            // remember-me/autodecrypt links we need to try bringing the old hashes up to speed.\n            originalPassword = originalPassword || hashedPassword;\n            if (backwardCompatibleAttempt === 0) {\n                const updatedHashedPassword = await cryptoEngine.hashThirdRound(originalPassword, salt);\n\n                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);\n            }\n            if (backwardCompatibleAttempt === 1) {\n                let updatedHashedPassword = await cryptoEngine.hashSecondRound(originalPassword, salt);\n                updatedHashedPassword = await cryptoEngine.hashThirdRound(updatedHashedPassword, salt);\n\n                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);\n            }\n\n            return { success: false, message: \"Signature mismatch\" };\n        }\n\n        return {\n            success: true,\n            decoded: await cryptoEngine.decrypt(encryptedMsg, hashedPassword),\n        };\n    }\n    exports.decode = decode;\n\n    return exports;\n}\nexports.init = init;\n\n  return exports;\n})());\nconst decode = codec.init(cryptoEngine).decode;\n\n/**\n * Initialize the staticrypt module, that exposes functions callbable by the password_template.\n *\n * @param {{\n *  staticryptEncryptedMsgUniqueVariableName: string,\n *  isRememberEnabled: boolean,\n *  rememberDurationInDays: number,\n *  staticryptSaltUniqueVariableName: string,\n * }} staticryptConfig - object of data that is stored on the password_template at encryption time.\n *\n * @param {{\n *  rememberExpirationKey: string,\n *  rememberPassphraseKey: string,\n *  replaceHtmlCallback: function,\n *  clearLocalStorageCallback: function,\n * }} templateConfig - object of data that can be configured by a custom password_template.\n */\nfunction init(staticryptConfig, templateConfig) {\n    const exports = {};\n\n    /**\n     * Decrypt our encrypted page, replace the whole HTML.\n     *\n     * @param {string} hashedPassword\n     * @returns {Promise<boolean>}\n     */\n    async function decryptAndReplaceHtml(hashedPassword) {\n        const { staticryptEncryptedMsgUniqueVariableName, staticryptSaltUniqueVariableName } = staticryptConfig;\n        const { replaceHtmlCallback } = templateConfig;\n\n        const result = await decode(\n            staticryptEncryptedMsgUniqueVariableName,\n            hashedPassword,\n            staticryptSaltUniqueVariableName\n        );\n        if (!result.success) {\n            return false;\n        }\n        const plainHTML = result.decoded;\n\n        // if the user configured a callback call it, otherwise just replace the whole HTML\n        if (typeof replaceHtmlCallback === \"function\") {\n            replaceHtmlCallback(plainHTML);\n        } else {\n            document.write(plainHTML);\n            document.close();\n        }\n\n        return true;\n    }\n\n    /**\n     * Attempt to decrypt the page and replace the whole HTML.\n     *\n     * @param {string} password\n     * @param {boolean} isRememberChecked\n     *\n     * @returns {Promise<{isSuccessful: boolean, hashedPassword?: string}>} - we return an object, so that if we want to\n     *   expose more information in the future we can do it without breaking the password_template\n     */\n    async function handleDecryptionOfPage(password, isRememberChecked) {\n        const { staticryptSaltUniqueVariableName } = staticryptConfig;\n\n        // decrypt and replace the whole page\n        const hashedPassword = await cryptoEngine.hashPassword(password, staticryptSaltUniqueVariableName);\n        return handleDecryptionOfPageFromHash(hashedPassword, isRememberChecked);\n    }\n    exports.handleDecryptionOfPage = handleDecryptionOfPage;\n\n    async function handleDecryptionOfPageFromHash(hashedPassword, isRememberChecked) {\n        const { isRememberEnabled, rememberDurationInDays } = staticryptConfig;\n        const { rememberExpirationKey, rememberPassphraseKey } = templateConfig;\n\n        const isDecryptionSuccessful = await decryptAndReplaceHtml(hashedPassword);\n\n        if (!isDecryptionSuccessful) {\n            return {\n                isSuccessful: false,\n                hashedPassword,\n            };\n        }\n\n        // remember the hashedPassword and set its expiration if necessary\n        if (isRememberEnabled && isRememberChecked) {\n            window.localStorage.setItem(rememberPassphraseKey, hashedPassword);\n\n            // set the expiration if the duration isn't 0 (meaning no expiration)\n            if (rememberDurationInDays > 0) {\n                window.localStorage.setItem(\n                    rememberExpirationKey,\n                    (new Date().getTime() + rememberDurationInDays * 24 * 60 * 60 * 1000).toString()\n                );\n            }\n        }\n\n        return {\n            isSuccessful: true,\n            hashedPassword,\n        };\n    }\n    exports.handleDecryptionOfPageFromHash = handleDecryptionOfPageFromHash;\n\n    /**\n     * Clear localstorage from staticrypt related values\n     */\n    function clearLocalStorage() {\n        const { clearLocalStorageCallback, rememberExpirationKey, rememberPassphraseKey } = templateConfig;\n\n        if (typeof clearLocalStorageCallback === \"function\") {\n            clearLocalStorageCallback();\n        } else {\n            localStorage.removeItem(rememberPassphraseKey);\n            localStorage.removeItem(rememberExpirationKey);\n        }\n    }\n\n    async function handleDecryptOnLoad() {\n        let isSuccessful = await decryptOnLoadFromUrl();\n\n        if (!isSuccessful) {\n            isSuccessful = await decryptOnLoadFromRememberMe();\n        }\n\n        return { isSuccessful };\n    }\n    exports.handleDecryptOnLoad = handleDecryptOnLoad;\n\n    /**\n     * Clear storage if we are logging out\n     *\n     * @returns {boolean} - whether we logged out\n     */\n    function logoutIfNeeded() {\n        const logoutKey = \"staticrypt_logout\";\n\n        // handle logout through query param\n        const queryParams = new URLSearchParams(window.location.search);\n        if (queryParams.has(logoutKey)) {\n            clearLocalStorage();\n            return true;\n        }\n\n        // handle logout through URL fragment\n        const hash = window.location.hash.substring(1);\n        if (hash.includes(logoutKey)) {\n            clearLocalStorage();\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * To be called on load: check if we want to try to decrypt and replace the HTML with the decrypted content, and\n     * try to do it if needed.\n     *\n     * @returns {Promise<boolean>} true if we derypted and replaced the whole page, false otherwise\n     */\n    async function decryptOnLoadFromRememberMe() {\n        const { rememberDurationInDays } = staticryptConfig;\n        const { rememberExpirationKey, rememberPassphraseKey } = templateConfig;\n\n        // if we are login out, terminate\n        if (logoutIfNeeded()) {\n            return false;\n        }\n\n        // if there is expiration configured, check if we're not beyond the expiration\n        if (rememberDurationInDays && rememberDurationInDays > 0) {\n            const expiration = localStorage.getItem(rememberExpirationKey),\n                isExpired = expiration && new Date().getTime() > parseInt(expiration);\n\n            if (isExpired) {\n                clearLocalStorage();\n                return false;\n            }\n        }\n\n        const hashedPassword = localStorage.getItem(rememberPassphraseKey);\n\n        if (hashedPassword) {\n            // try to decrypt\n            const isDecryptionSuccessful = await decryptAndReplaceHtml(hashedPassword);\n\n            // if the decryption is unsuccessful the password might be wrong - silently clear the saved data and let\n            // the user fill the password form again\n            if (!isDecryptionSuccessful) {\n                clearLocalStorage();\n                return false;\n            }\n\n            return true;\n        }\n\n        return false;\n    }\n\n    async function decryptOnLoadFromUrl() {\n        const passwordKey = \"staticrypt_pwd\";\n        const rememberMeKey = \"remember_me\";\n\n        // try to get the password from the query param (for backward compatibility - we now want to avoid this method,\n        // since it sends the hashed password to the server which isn't needed)\n        const queryParams = new URLSearchParams(window.location.search);\n        const hashedPasswordQuery = queryParams.get(passwordKey);\n        const rememberMeQuery = queryParams.get(rememberMeKey);\n\n        const urlFragment = window.location.hash.substring(1);\n        // get the password from the url fragment\n        const hashedPasswordRegexMatch = urlFragment.match(new RegExp(passwordKey + \"=([^&]*)\"));\n        const hashedPasswordFragment = hashedPasswordRegexMatch ? hashedPasswordRegexMatch[1] : null;\n        const rememberMeFragment = urlFragment.includes(rememberMeKey);\n\n        const hashedPassword = hashedPasswordFragment || hashedPasswordQuery;\n        const rememberMe = rememberMeFragment || rememberMeQuery;\n\n        if (hashedPassword) {\n            return handleDecryptionOfPageFromHash(hashedPassword, rememberMe);\n        }\n\n        return false;\n    }\n\n    return exports;\n}\nexports.init = init;\n\n  return exports;\n})());\n        </script>\n\n        <script>\n            const encode = codec.init(cryptoEngine).encode;\n\n            // enable CKEDIRTOR\n            CKEDITOR.replace(\"template_instructions\");\n\n            let htmlToDownload;\n\n            /**\n             * Extract js code from <script> tag and return it as a string\n             *\n             * @param {string} id\n             * @returns {string}\n             */\n            function getScriptAsString(id) {\n                return document.getElementById(id).innerText.replace(/window\\.\\w+ = /, \"\");\n            }\n\n            /**\n             * Register something happened - this uses a simple Supabase function to implement a counter, and allows to drop\n             * google analytics. We don't store any personal data or IP.\n             *\n             * @param {string} action\n             */\n            function trackEvent(action) {\n                const xhr = new XMLHttpRequest();\n                xhr.open(\"POST\", \"https://zlgpaemmniviswibzuwt.supabase.co/rest/v1/rpc/increment_analytics\", true);\n                xhr.setRequestHeader(\"Content-type\", \"application/json; charset=UTF-8\");\n                xhr.setRequestHeader(\n                    \"apikey\",\n                    \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpsZ3BhZW1tbml2aXN3aWJ6dXd0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE2NjkxMjM0OTcsImV4cCI6MTk4NDY5OTQ5N30.wNoVDHG7F6INx-IPotMs3fL1nudfaF2qvQDgG-1PhNI\"\n                );\n                xhr.setRequestHeader(\n                    \"Authorization\",\n                    \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpsZ3BhZW1tbml2aXN3aWJ6dXd0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE2NjkxMjM0OTcsImV4cCI6MTk4NDY5OTQ5N30.wNoVDHG7F6INx-IPotMs3fL1nudfaF2qvQDgG-1PhNI\"\n                );\n                xhr.send(\n                    JSON.stringify({\n                        action_input: action,\n                    })\n                );\n            }\n\n            /**\n             * Fill the password prompt template with data provided.\n             * @param data\n             */\n            function setFileToDownload(data) {\n                const request = new XMLHttpRequest();\n                request.open(\"GET\", \"lib/password_template.html\", true);\n                request.onload = function () {\n                    const renderedTmpl = formater.renderTemplate(request.responseText, data);\n\n                    const downloadLink = document.querySelector(\"a.download\");\n                    downloadLink.href = \"data:text/html,\" + encodeURIComponent(renderedTmpl);\n                    downloadLink.removeAttribute(\"disabled\");\n\n                    htmlToDownload = renderedTmpl;\n                };\n                request.send();\n            }\n\n            // register page load\n            window.onload = function () {\n                trackEvent(\"show_index\");\n            };\n\n            /**\n             * Handle form submission.\n             */\n            document.getElementById(\"encrypt_form\").addEventListener(\"submit\", async function (e) {\n                e.preventDefault();\n\n                trackEvent(\"generate_encrypted\");\n\n                // update instruction textarea value with CKEDITOR content\n                // (see https://stackoverflow.com/questions/3147670/ckeditor-update-textarea)\n                CKEDITOR.instances[\"template_instructions\"].updateElement();\n\n                const unencrypted = document.getElementById(\"unencrypted_html\").value,\n                    password = document.getElementById(\"password\").value;\n\n                const salt = cryptoEngine.generateRandomSalt();\n                const encryptedMsg = await encode(unencrypted, password, salt);\n\n                const templateButton = document.getElementById(\"template_button\").value,\n                    templateColorPrimary = document.getElementById(\"template_color_primary\").value,\n                    templateColorSecondary = document.getElementById(\"template_color_secondary\").value,\n                    templateInstructions = document.getElementById(\"template_instructions\").value,\n                    isRememberEnabled = document.getElementById(\"remember\").checked,\n                    templateTitle = document.getElementById(\"template_title\").value.trim(),\n                    templatePlaceholder = document.getElementById(\"template_placeholder\").value.trim(),\n                    rememberDurationInDays = document.getElementById(\"remember_in_days\").value || 0,\n                    templateRemember = document.getElementById(\"template_remember\").value;\n\n                const data = {\n                    staticrypt_config: {\n                        staticryptEncryptedMsgUniqueVariableName: encryptedMsg,\n                        isRememberEnabled,\n                        rememberDurationInDays,\n                        staticryptSaltUniqueVariableName: salt,\n                    },\n                    is_remember_enabled: JSON.stringify(isRememberEnabled),\n                    js_staticrypt: getScriptAsString(\"staticrypt\"),\n                    template_button: templateButton ? templateButton : \"DECRYPT\",\n                    template_color_primary: templateColorPrimary || \"#4CAF50\",\n                    template_color_secondary: templateColorSecondary || \"#76B852\",\n                    template_instructions: templateInstructions || \"\",\n                    template_placeholder: templatePlaceholder || \"Password\",\n                    template_remember: templateRemember || \"Remember me\",\n                    template_title: templateTitle || \"Protected Page\",\n                };\n\n                document.getElementById(\"encrypted_html_display\").textContent = encryptedMsg;\n\n                setFileToDownload(data);\n            });\n\n            document.getElementById(\"toggle-extra-option\").addEventListener(\"click\", function (e) {\n                e.preventDefault();\n                document.getElementById(\"extra-options\").classList.toggle(\"hidden\");\n            });\n\n            let isConceptShown = false;\n            document.getElementById(\"toggle-concept\").addEventListener(\"click\", function (e) {\n                e.preventDefault();\n\n                isConceptShown = !isConceptShown;\n\n                document.getElementById(\"toggle-concept-sign\").innerText = isConceptShown ? \"▼\" : \"►\";\n\n                document.getElementById(\"concept\").classList.toggle(\"hidden\");\n            });\n\n            /**\n             * Browser specific download code.\n             */\n            document.getElementById(\"download-link\").addEventListener(\"click\", function (e) {\n                // only register the click event if there is actually a generated file\n                if (htmlToDownload) {\n                    trackEvent(\"download_encrypted\");\n                }\n\n                const isIE = navigator.userAgent.indexOf(\"MSIE\") !== -1 || !!document.documentMode === true; // >= 10\n                const isEdge = navigator.userAgent.indexOf(\"Edge\") !== -1;\n\n                // download with MS specific feature\n                if (htmlToDownload && (isIE || isEdge)) {\n                    e.preventDefault();\n                    const blobObject = new Blob([htmlToDownload]);\n                    window.navigator.msSaveOrOpenBlob(blobObject, \"encrypted.html\");\n                }\n\n                return true;\n            });\n        </script>\n    </body>\n</html>\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "package-lock.json",
          "type": "blob",
          "size": 76.390625,
          "content": "{\n    \"name\": \"staticrypt\",\n    \"version\": \"3.5.0\",\n    \"lockfileVersion\": 2,\n    \"requires\": true,\n    \"packages\": {\n        \"\": {\n            \"name\": \"staticrypt\",\n            \"version\": \"3.5.0\",\n            \"license\": \"MIT\",\n            \"dependencies\": {\n                \"dotenv\": \"^16.0.3\",\n                \"yargs\": \">=10.0.3\"\n            },\n            \"bin\": {\n                \"staticrypt\": \"cli/index.js\"\n            },\n            \"devDependencies\": {\n                \"husky\": \"^9.1.6\",\n                \"lint-staged\": \"^15.2.10\",\n                \"prettier\": \"^2.8.8\"\n            },\n            \"engines\": {\n                \"node\": \">=16.0.0\"\n            },\n            \"funding\": {\n                \"type\": \"github\",\n                \"url\": \"https://github.com/robinmoisson/staticrypt?sponsor=1\"\n            }\n        },\n        \"node_modules/ansi-escapes\": {\n            \"version\": \"7.0.0\",\n            \"resolved\": \"https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-7.0.0.tgz\",\n            \"integrity\": \"sha512-GdYO7a61mR0fOlAsvC9/rIHf7L96sBc6dEWzeOu+KAea5bZyQRPIpojrVoI4AXGJS/ycu/fBTdLrUkA4ODrvjw==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"dependencies\": {\n                \"environment\": \"^1.0.0\"\n            },\n            \"engines\": {\n                \"node\": \">=18\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/sponsors/sindresorhus\"\n            }\n        },\n        \"node_modules/ansi-regex\": {\n            \"version\": \"5.0.1\",\n            \"resolved\": \"https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz\",\n            \"integrity\": \"sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==\",\n            \"engines\": {\n                \"node\": \">=8\"\n            }\n        },\n        \"node_modules/ansi-styles\": {\n            \"version\": \"4.3.0\",\n            \"resolved\": \"https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz\",\n            \"integrity\": \"sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==\",\n            \"dependencies\": {\n                \"color-convert\": \"^2.0.1\"\n            },\n            \"engines\": {\n                \"node\": \">=8\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/chalk/ansi-styles?sponsor=1\"\n            }\n        },\n        \"node_modules/braces\": {\n            \"version\": \"3.0.3\",\n            \"resolved\": \"https://registry.npmjs.org/braces/-/braces-3.0.3.tgz\",\n            \"integrity\": \"sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"dependencies\": {\n                \"fill-range\": \"^7.1.1\"\n            },\n            \"engines\": {\n                \"node\": \">=8\"\n            }\n        },\n        \"node_modules/chalk\": {\n            \"version\": \"5.3.0\",\n            \"resolved\": \"https://registry.npmjs.org/chalk/-/chalk-5.3.0.tgz\",\n            \"integrity\": \"sha512-dLitG79d+GV1Nb/VYcCDFivJeK1hiukt9QjRNVOsUtTy1rR1YJsmpGGTZ3qJos+uw7WmWF4wUwBd9jxjocFC2w==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"engines\": {\n                \"node\": \"^12.17.0 || ^14.13 || >=16.0.0\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/chalk/chalk?sponsor=1\"\n            }\n        },\n        \"node_modules/cli-cursor\": {\n            \"version\": \"5.0.0\",\n            \"resolved\": \"https://registry.npmjs.org/cli-cursor/-/cli-cursor-5.0.0.tgz\",\n            \"integrity\": \"sha512-aCj4O5wKyszjMmDT4tZj93kxyydN/K5zPWSCe6/0AV/AA1pqe5ZBIw0a2ZfPQV7lL5/yb5HsUreJ6UFAF1tEQw==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"dependencies\": {\n                \"restore-cursor\": \"^5.0.0\"\n            },\n            \"engines\": {\n                \"node\": \">=18\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/sponsors/sindresorhus\"\n            }\n        },\n        \"node_modules/cli-truncate\": {\n            \"version\": \"4.0.0\",\n            \"resolved\": \"https://registry.npmjs.org/cli-truncate/-/cli-truncate-4.0.0.tgz\",\n            \"integrity\": \"sha512-nPdaFdQ0h/GEigbPClz11D0v/ZJEwxmeVZGeMo3Z5StPtUTkA9o1lD6QwoirYiSDzbcwn2XcjwmCp68W1IS4TA==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"dependencies\": {\n                \"slice-ansi\": \"^5.0.0\",\n                \"string-width\": \"^7.0.0\"\n            },\n            \"engines\": {\n                \"node\": \">=18\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/sponsors/sindresorhus\"\n            }\n        },\n        \"node_modules/cli-truncate/node_modules/ansi-regex\": {\n            \"version\": \"6.1.0\",\n            \"resolved\": \"https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.1.0.tgz\",\n            \"integrity\": \"sha512-7HSX4QQb4CspciLpVFwyRe79O3xsIZDDLER21kERQ71oaPodF8jL725AgJMFAYbooIqolJoRLuM81SpeUkpkvA==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"engines\": {\n                \"node\": \">=12\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/chalk/ansi-regex?sponsor=1\"\n            }\n        },\n        \"node_modules/cli-truncate/node_modules/emoji-regex\": {\n            \"version\": \"10.4.0\",\n            \"resolved\": \"https://registry.npmjs.org/emoji-regex/-/emoji-regex-10.4.0.tgz\",\n            \"integrity\": \"sha512-EC+0oUMY1Rqm4O6LLrgjtYDvcVYTy7chDnM4Q7030tP4Kwj3u/pR6gP9ygnp2CJMK5Gq+9Q2oqmrFJAz01DXjw==\",\n            \"dev\": true,\n            \"license\": \"MIT\"\n        },\n        \"node_modules/cli-truncate/node_modules/string-width\": {\n            \"version\": \"7.2.0\",\n            \"resolved\": \"https://registry.npmjs.org/string-width/-/string-width-7.2.0.tgz\",\n            \"integrity\": \"sha512-tsaTIkKW9b4N+AEj+SVA+WhJzV7/zMhcSu78mLKWSk7cXMOSHsBKFWUs0fWwq8QyK3MgJBQRX6Gbi4kYbdvGkQ==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"dependencies\": {\n                \"emoji-regex\": \"^10.3.0\",\n                \"get-east-asian-width\": \"^1.0.0\",\n                \"strip-ansi\": \"^7.1.0\"\n            },\n            \"engines\": {\n                \"node\": \">=18\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/sponsors/sindresorhus\"\n            }\n        },\n        \"node_modules/cli-truncate/node_modules/strip-ansi\": {\n            \"version\": \"7.1.0\",\n            \"resolved\": \"https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.0.tgz\",\n            \"integrity\": \"sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"dependencies\": {\n                \"ansi-regex\": \"^6.0.1\"\n            },\n            \"engines\": {\n                \"node\": \">=12\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/chalk/strip-ansi?sponsor=1\"\n            }\n        },\n        \"node_modules/cliui\": {\n            \"version\": \"7.0.4\",\n            \"resolved\": \"https://registry.npmjs.org/cliui/-/cliui-7.0.4.tgz\",\n            \"integrity\": \"sha512-OcRE68cOsVMXp1Yvonl/fzkQOyjLSu/8bhPDfQt0e0/Eb283TKP20Fs2MqoPsr9SwA595rRCA+QMzYc9nBP+JQ==\",\n            \"dependencies\": {\n                \"string-width\": \"^4.2.0\",\n                \"strip-ansi\": \"^6.0.0\",\n                \"wrap-ansi\": \"^7.0.0\"\n            }\n        },\n        \"node_modules/color-convert\": {\n            \"version\": \"2.0.1\",\n            \"resolved\": \"https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz\",\n            \"integrity\": \"sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==\",\n            \"dependencies\": {\n                \"color-name\": \"~1.1.4\"\n            },\n            \"engines\": {\n                \"node\": \">=7.0.0\"\n            }\n        },\n        \"node_modules/color-name\": {\n            \"version\": \"1.1.4\",\n            \"resolved\": \"https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz\",\n            \"integrity\": \"sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==\"\n        },\n        \"node_modules/colorette\": {\n            \"version\": \"2.0.20\",\n            \"resolved\": \"https://registry.npmjs.org/colorette/-/colorette-2.0.20.tgz\",\n            \"integrity\": \"sha512-IfEDxwoWIjkeXL1eXcDiow4UbKjhLdq6/EuSVR9GMN7KVH3r9gQ83e73hsz1Nd1T3ijd5xv1wcWRYO+D6kCI2w==\",\n            \"dev\": true,\n            \"license\": \"MIT\"\n        },\n        \"node_modules/commander\": {\n            \"version\": \"12.1.0\",\n            \"resolved\": \"https://registry.npmjs.org/commander/-/commander-12.1.0.tgz\",\n            \"integrity\": \"sha512-Vw8qHK3bZM9y/P10u3Vib8o/DdkvA2OtPtZvD871QKjy74Wj1WSKFILMPRPSdUSx5RFK1arlJzEtA4PkFgnbuA==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"engines\": {\n                \"node\": \">=18\"\n            }\n        },\n        \"node_modules/cross-spawn\": {\n            \"version\": \"7.0.3\",\n            \"resolved\": \"https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.3.tgz\",\n            \"integrity\": \"sha512-iRDPJKUPVEND7dHPO8rkbOnPpyDygcDFtWjpeWNCgy8WP2rXcxXL8TskReQl6OrB2G7+UJrags1q15Fudc7G6w==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"dependencies\": {\n                \"path-key\": \"^3.1.0\",\n                \"shebang-command\": \"^2.0.0\",\n                \"which\": \"^2.0.1\"\n            },\n            \"engines\": {\n                \"node\": \">= 8\"\n            }\n        },\n        \"node_modules/debug\": {\n            \"version\": \"4.3.7\",\n            \"resolved\": \"https://registry.npmjs.org/debug/-/debug-4.3.7.tgz\",\n            \"integrity\": \"sha512-Er2nc/H7RrMXZBFCEim6TCmMk02Z8vLC2Rbi1KEBggpo0fS6l0S1nnapwmIi3yW/+GOJap1Krg4w0Hg80oCqgQ==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"dependencies\": {\n                \"ms\": \"^2.1.3\"\n            },\n            \"engines\": {\n                \"node\": \">=6.0\"\n            },\n            \"peerDependenciesMeta\": {\n                \"supports-color\": {\n                    \"optional\": true\n                }\n            }\n        },\n        \"node_modules/dotenv\": {\n            \"version\": \"16.0.3\",\n            \"resolved\": \"https://registry.npmjs.org/dotenv/-/dotenv-16.0.3.tgz\",\n            \"integrity\": \"sha512-7GO6HghkA5fYG9TYnNxi14/7K9f5occMlp3zXAuSxn7CKCxt9xbNWG7yF8hTCSUchlfWSe3uLmlPfigevRItzQ==\",\n            \"engines\": {\n                \"node\": \">=12\"\n            }\n        },\n        \"node_modules/emoji-regex\": {\n            \"version\": \"8.0.0\",\n            \"resolved\": \"https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz\",\n            \"integrity\": \"sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==\"\n        },\n        \"node_modules/environment\": {\n            \"version\": \"1.1.0\",\n            \"resolved\": \"https://registry.npmjs.org/environment/-/environment-1.1.0.tgz\",\n            \"integrity\": \"sha512-xUtoPkMggbz0MPyPiIWr1Kp4aeWJjDZ6SMvURhimjdZgsRuDplF5/s9hcgGhyXMhs+6vpnuoiZ2kFiu3FMnS8Q==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"engines\": {\n                \"node\": \">=18\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/sponsors/sindresorhus\"\n            }\n        },\n        \"node_modules/escalade\": {\n            \"version\": \"3.1.1\",\n            \"resolved\": \"https://registry.npmjs.org/escalade/-/escalade-3.1.1.tgz\",\n            \"integrity\": \"sha512-k0er2gUkLf8O0zKJiAhmkTnJlTvINGv7ygDNPbeIsX/TJjGJZHuh9B2UxbsaEkmlEo9MfhrSzmhIlhRlI2GXnw==\",\n            \"engines\": {\n                \"node\": \">=6\"\n            }\n        },\n        \"node_modules/eventemitter3\": {\n            \"version\": \"5.0.1\",\n            \"resolved\": \"https://registry.npmjs.org/eventemitter3/-/eventemitter3-5.0.1.tgz\",\n            \"integrity\": \"sha512-GWkBvjiSZK87ELrYOSESUYeVIc9mvLLf/nXalMOS5dYrgZq9o5OVkbZAVM06CVxYsCwH9BDZFPlQTlPA1j4ahA==\",\n            \"dev\": true,\n            \"license\": \"MIT\"\n        },\n        \"node_modules/execa\": {\n            \"version\": \"8.0.1\",\n            \"resolved\": \"https://registry.npmjs.org/execa/-/execa-8.0.1.tgz\",\n            \"integrity\": \"sha512-VyhnebXciFV2DESc+p6B+y0LjSm0krU4OgJN44qFAhBY0TJ+1V61tYD2+wHusZ6F9n5K+vl8k0sTy7PEfV4qpg==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"dependencies\": {\n                \"cross-spawn\": \"^7.0.3\",\n                \"get-stream\": \"^8.0.1\",\n                \"human-signals\": \"^5.0.0\",\n                \"is-stream\": \"^3.0.0\",\n                \"merge-stream\": \"^2.0.0\",\n                \"npm-run-path\": \"^5.1.0\",\n                \"onetime\": \"^6.0.0\",\n                \"signal-exit\": \"^4.1.0\",\n                \"strip-final-newline\": \"^3.0.0\"\n            },\n            \"engines\": {\n                \"node\": \">=16.17\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/sindresorhus/execa?sponsor=1\"\n            }\n        },\n        \"node_modules/fill-range\": {\n            \"version\": \"7.1.1\",\n            \"resolved\": \"https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz\",\n            \"integrity\": \"sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"dependencies\": {\n                \"to-regex-range\": \"^5.0.1\"\n            },\n            \"engines\": {\n                \"node\": \">=8\"\n            }\n        },\n        \"node_modules/get-caller-file\": {\n            \"version\": \"2.0.5\",\n            \"resolved\": \"https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz\",\n            \"integrity\": \"sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==\",\n            \"engines\": {\n                \"node\": \"6.* || 8.* || >= 10.*\"\n            }\n        },\n        \"node_modules/get-east-asian-width\": {\n            \"version\": \"1.2.0\",\n            \"resolved\": \"https://registry.npmjs.org/get-east-asian-width/-/get-east-asian-width-1.2.0.tgz\",\n            \"integrity\": \"sha512-2nk+7SIVb14QrgXFHcm84tD4bKQz0RxPuMT8Ag5KPOq7J5fEmAg0UbXdTOSHqNuHSU28k55qnceesxXRZGzKWA==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"engines\": {\n                \"node\": \">=18\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/sponsors/sindresorhus\"\n            }\n        },\n        \"node_modules/get-stream\": {\n            \"version\": \"8.0.1\",\n            \"resolved\": \"https://registry.npmjs.org/get-stream/-/get-stream-8.0.1.tgz\",\n            \"integrity\": \"sha512-VaUJspBffn/LMCJVoMvSAdmscJyS1auj5Zulnn5UoYcY531UWmdwhRWkcGKnGU93m5HSXP9LP2usOryrBtQowA==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"engines\": {\n                \"node\": \">=16\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/sponsors/sindresorhus\"\n            }\n        },\n        \"node_modules/human-signals\": {\n            \"version\": \"5.0.0\",\n            \"resolved\": \"https://registry.npmjs.org/human-signals/-/human-signals-5.0.0.tgz\",\n            \"integrity\": \"sha512-AXcZb6vzzrFAUE61HnN4mpLqd/cSIwNQjtNWR0euPm6y0iqx3G4gOXaIDdtdDwZmhwe82LA6+zinmW4UBWVePQ==\",\n            \"dev\": true,\n            \"license\": \"Apache-2.0\",\n            \"engines\": {\n                \"node\": \">=16.17.0\"\n            }\n        },\n        \"node_modules/husky\": {\n            \"version\": \"9.1.6\",\n            \"resolved\": \"https://registry.npmjs.org/husky/-/husky-9.1.6.tgz\",\n            \"integrity\": \"sha512-sqbjZKK7kf44hfdE94EoX8MZNk0n7HeW37O4YrVGCF4wzgQjp+akPAkfUK5LZ6KuR/6sqeAVuXHji+RzQgOn5A==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"bin\": {\n                \"husky\": \"bin.js\"\n            },\n            \"engines\": {\n                \"node\": \">=18\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/sponsors/typicode\"\n            }\n        },\n        \"node_modules/is-fullwidth-code-point\": {\n            \"version\": \"3.0.0\",\n            \"resolved\": \"https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz\",\n            \"integrity\": \"sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==\",\n            \"engines\": {\n                \"node\": \">=8\"\n            }\n        },\n        \"node_modules/is-number\": {\n            \"version\": \"7.0.0\",\n            \"resolved\": \"https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz\",\n            \"integrity\": \"sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"engines\": {\n                \"node\": \">=0.12.0\"\n            }\n        },\n        \"node_modules/is-stream\": {\n            \"version\": \"3.0.0\",\n            \"resolved\": \"https://registry.npmjs.org/is-stream/-/is-stream-3.0.0.tgz\",\n            \"integrity\": \"sha512-LnQR4bZ9IADDRSkvpqMGvt/tEJWclzklNgSw48V5EAaAeDd6qGvN8ei6k5p0tvxSR171VmGyHuTiAOfxAbr8kA==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"engines\": {\n                \"node\": \"^12.20.0 || ^14.13.1 || >=16.0.0\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/sponsors/sindresorhus\"\n            }\n        },\n        \"node_modules/isexe\": {\n            \"version\": \"2.0.0\",\n            \"resolved\": \"https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz\",\n            \"integrity\": \"sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==\",\n            \"dev\": true,\n            \"license\": \"ISC\"\n        },\n        \"node_modules/lilconfig\": {\n            \"version\": \"3.1.2\",\n            \"resolved\": \"https://registry.npmjs.org/lilconfig/-/lilconfig-3.1.2.tgz\",\n            \"integrity\": \"sha512-eop+wDAvpItUys0FWkHIKeC9ybYrTGbU41U5K7+bttZZeohvnY7M9dZ5kB21GNWiFT2q1OoPTvncPCgSOVO5ow==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"engines\": {\n                \"node\": \">=14\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/sponsors/antonk52\"\n            }\n        },\n        \"node_modules/lint-staged\": {\n            \"version\": \"15.2.10\",\n            \"resolved\": \"https://registry.npmjs.org/lint-staged/-/lint-staged-15.2.10.tgz\",\n            \"integrity\": \"sha512-5dY5t743e1byO19P9I4b3x8HJwalIznL5E1FWYnU6OWw33KxNBSLAc6Cy7F2PsFEO8FKnLwjwm5hx7aMF0jzZg==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"dependencies\": {\n                \"chalk\": \"~5.3.0\",\n                \"commander\": \"~12.1.0\",\n                \"debug\": \"~4.3.6\",\n                \"execa\": \"~8.0.1\",\n                \"lilconfig\": \"~3.1.2\",\n                \"listr2\": \"~8.2.4\",\n                \"micromatch\": \"~4.0.8\",\n                \"pidtree\": \"~0.6.0\",\n                \"string-argv\": \"~0.3.2\",\n                \"yaml\": \"~2.5.0\"\n            },\n            \"bin\": {\n                \"lint-staged\": \"bin/lint-staged.js\"\n            },\n            \"engines\": {\n                \"node\": \">=18.12.0\"\n            },\n            \"funding\": {\n                \"url\": \"https://opencollective.com/lint-staged\"\n            }\n        },\n        \"node_modules/listr2\": {\n            \"version\": \"8.2.4\",\n            \"resolved\": \"https://registry.npmjs.org/listr2/-/listr2-8.2.4.tgz\",\n            \"integrity\": \"sha512-opevsywziHd3zHCVQGAj8zu+Z3yHNkkoYhWIGnq54RrCVwLz0MozotJEDnKsIBLvkfLGN6BLOyAeRrYI0pKA4g==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"dependencies\": {\n                \"cli-truncate\": \"^4.0.0\",\n                \"colorette\": \"^2.0.20\",\n                \"eventemitter3\": \"^5.0.1\",\n                \"log-update\": \"^6.1.0\",\n                \"rfdc\": \"^1.4.1\",\n                \"wrap-ansi\": \"^9.0.0\"\n            },\n            \"engines\": {\n                \"node\": \">=18.0.0\"\n            }\n        },\n        \"node_modules/listr2/node_modules/ansi-regex\": {\n            \"version\": \"6.1.0\",\n            \"resolved\": \"https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.1.0.tgz\",\n            \"integrity\": \"sha512-7HSX4QQb4CspciLpVFwyRe79O3xsIZDDLER21kERQ71oaPodF8jL725AgJMFAYbooIqolJoRLuM81SpeUkpkvA==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"engines\": {\n                \"node\": \">=12\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/chalk/ansi-regex?sponsor=1\"\n            }\n        },\n        \"node_modules/listr2/node_modules/ansi-styles\": {\n            \"version\": \"6.2.1\",\n            \"resolved\": \"https://registry.npmjs.org/ansi-styles/-/ansi-styles-6.2.1.tgz\",\n            \"integrity\": \"sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"engines\": {\n                \"node\": \">=12\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/chalk/ansi-styles?sponsor=1\"\n            }\n        },\n        \"node_modules/listr2/node_modules/emoji-regex\": {\n            \"version\": \"10.4.0\",\n            \"resolved\": \"https://registry.npmjs.org/emoji-regex/-/emoji-regex-10.4.0.tgz\",\n            \"integrity\": \"sha512-EC+0oUMY1Rqm4O6LLrgjtYDvcVYTy7chDnM4Q7030tP4Kwj3u/pR6gP9ygnp2CJMK5Gq+9Q2oqmrFJAz01DXjw==\",\n            \"dev\": true,\n            \"license\": \"MIT\"\n        },\n        \"node_modules/listr2/node_modules/string-width\": {\n            \"version\": \"7.2.0\",\n            \"resolved\": \"https://registry.npmjs.org/string-width/-/string-width-7.2.0.tgz\",\n            \"integrity\": \"sha512-tsaTIkKW9b4N+AEj+SVA+WhJzV7/zMhcSu78mLKWSk7cXMOSHsBKFWUs0fWwq8QyK3MgJBQRX6Gbi4kYbdvGkQ==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"dependencies\": {\n                \"emoji-regex\": \"^10.3.0\",\n                \"get-east-asian-width\": \"^1.0.0\",\n                \"strip-ansi\": \"^7.1.0\"\n            },\n            \"engines\": {\n                \"node\": \">=18\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/sponsors/sindresorhus\"\n            }\n        },\n        \"node_modules/listr2/node_modules/strip-ansi\": {\n            \"version\": \"7.1.0\",\n            \"resolved\": \"https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.0.tgz\",\n            \"integrity\": \"sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"dependencies\": {\n                \"ansi-regex\": \"^6.0.1\"\n            },\n            \"engines\": {\n                \"node\": \">=12\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/chalk/strip-ansi?sponsor=1\"\n            }\n        },\n        \"node_modules/listr2/node_modules/wrap-ansi\": {\n            \"version\": \"9.0.0\",\n            \"resolved\": \"https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-9.0.0.tgz\",\n            \"integrity\": \"sha512-G8ura3S+3Z2G+mkgNRq8dqaFZAuxfsxpBB8OCTGRTCtp+l/v9nbFNmCUP1BZMts3G1142MsZfn6eeUKrr4PD1Q==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"dependencies\": {\n                \"ansi-styles\": \"^6.2.1\",\n                \"string-width\": \"^7.0.0\",\n                \"strip-ansi\": \"^7.1.0\"\n            },\n            \"engines\": {\n                \"node\": \">=18\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/chalk/wrap-ansi?sponsor=1\"\n            }\n        },\n        \"node_modules/log-update\": {\n            \"version\": \"6.1.0\",\n            \"resolved\": \"https://registry.npmjs.org/log-update/-/log-update-6.1.0.tgz\",\n            \"integrity\": \"sha512-9ie8ItPR6tjY5uYJh8K/Zrv/RMZ5VOlOWvtZdEHYSTFKZfIBPQa9tOAEeAWhd+AnIneLJ22w5fjOYtoutpWq5w==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"dependencies\": {\n                \"ansi-escapes\": \"^7.0.0\",\n                \"cli-cursor\": \"^5.0.0\",\n                \"slice-ansi\": \"^7.1.0\",\n                \"strip-ansi\": \"^7.1.0\",\n                \"wrap-ansi\": \"^9.0.0\"\n            },\n            \"engines\": {\n                \"node\": \">=18\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/sponsors/sindresorhus\"\n            }\n        },\n        \"node_modules/log-update/node_modules/ansi-regex\": {\n            \"version\": \"6.1.0\",\n            \"resolved\": \"https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.1.0.tgz\",\n            \"integrity\": \"sha512-7HSX4QQb4CspciLpVFwyRe79O3xsIZDDLER21kERQ71oaPodF8jL725AgJMFAYbooIqolJoRLuM81SpeUkpkvA==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"engines\": {\n                \"node\": \">=12\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/chalk/ansi-regex?sponsor=1\"\n            }\n        },\n        \"node_modules/log-update/node_modules/ansi-styles\": {\n            \"version\": \"6.2.1\",\n            \"resolved\": \"https://registry.npmjs.org/ansi-styles/-/ansi-styles-6.2.1.tgz\",\n            \"integrity\": \"sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"engines\": {\n                \"node\": \">=12\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/chalk/ansi-styles?sponsor=1\"\n            }\n        },\n        \"node_modules/log-update/node_modules/emoji-regex\": {\n            \"version\": \"10.4.0\",\n            \"resolved\": \"https://registry.npmjs.org/emoji-regex/-/emoji-regex-10.4.0.tgz\",\n            \"integrity\": \"sha512-EC+0oUMY1Rqm4O6LLrgjtYDvcVYTy7chDnM4Q7030tP4Kwj3u/pR6gP9ygnp2CJMK5Gq+9Q2oqmrFJAz01DXjw==\",\n            \"dev\": true,\n            \"license\": \"MIT\"\n        },\n        \"node_modules/log-update/node_modules/is-fullwidth-code-point\": {\n            \"version\": \"5.0.0\",\n            \"resolved\": \"https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-5.0.0.tgz\",\n            \"integrity\": \"sha512-OVa3u9kkBbw7b8Xw5F9P+D/T9X+Z4+JruYVNapTjPYZYUznQ5YfWeFkOj606XYYW8yugTfC8Pj0hYqvi4ryAhA==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"dependencies\": {\n                \"get-east-asian-width\": \"^1.0.0\"\n            },\n            \"engines\": {\n                \"node\": \">=18\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/sponsors/sindresorhus\"\n            }\n        },\n        \"node_modules/log-update/node_modules/slice-ansi\": {\n            \"version\": \"7.1.0\",\n            \"resolved\": \"https://registry.npmjs.org/slice-ansi/-/slice-ansi-7.1.0.tgz\",\n            \"integrity\": \"sha512-bSiSngZ/jWeX93BqeIAbImyTbEihizcwNjFoRUIY/T1wWQsfsm2Vw1agPKylXvQTU7iASGdHhyqRlqQzfz+Htg==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"dependencies\": {\n                \"ansi-styles\": \"^6.2.1\",\n                \"is-fullwidth-code-point\": \"^5.0.0\"\n            },\n            \"engines\": {\n                \"node\": \">=18\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/chalk/slice-ansi?sponsor=1\"\n            }\n        },\n        \"node_modules/log-update/node_modules/string-width\": {\n            \"version\": \"7.2.0\",\n            \"resolved\": \"https://registry.npmjs.org/string-width/-/string-width-7.2.0.tgz\",\n            \"integrity\": \"sha512-tsaTIkKW9b4N+AEj+SVA+WhJzV7/zMhcSu78mLKWSk7cXMOSHsBKFWUs0fWwq8QyK3MgJBQRX6Gbi4kYbdvGkQ==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"dependencies\": {\n                \"emoji-regex\": \"^10.3.0\",\n                \"get-east-asian-width\": \"^1.0.0\",\n                \"strip-ansi\": \"^7.1.0\"\n            },\n            \"engines\": {\n                \"node\": \">=18\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/sponsors/sindresorhus\"\n            }\n        },\n        \"node_modules/log-update/node_modules/strip-ansi\": {\n            \"version\": \"7.1.0\",\n            \"resolved\": \"https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.0.tgz\",\n            \"integrity\": \"sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"dependencies\": {\n                \"ansi-regex\": \"^6.0.1\"\n            },\n            \"engines\": {\n                \"node\": \">=12\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/chalk/strip-ansi?sponsor=1\"\n            }\n        },\n        \"node_modules/log-update/node_modules/wrap-ansi\": {\n            \"version\": \"9.0.0\",\n            \"resolved\": \"https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-9.0.0.tgz\",\n            \"integrity\": \"sha512-G8ura3S+3Z2G+mkgNRq8dqaFZAuxfsxpBB8OCTGRTCtp+l/v9nbFNmCUP1BZMts3G1142MsZfn6eeUKrr4PD1Q==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"dependencies\": {\n                \"ansi-styles\": \"^6.2.1\",\n                \"string-width\": \"^7.0.0\",\n                \"strip-ansi\": \"^7.1.0\"\n            },\n            \"engines\": {\n                \"node\": \">=18\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/chalk/wrap-ansi?sponsor=1\"\n            }\n        },\n        \"node_modules/merge-stream\": {\n            \"version\": \"2.0.0\",\n            \"resolved\": \"https://registry.npmjs.org/merge-stream/-/merge-stream-2.0.0.tgz\",\n            \"integrity\": \"sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==\",\n            \"dev\": true,\n            \"license\": \"MIT\"\n        },\n        \"node_modules/micromatch\": {\n            \"version\": \"4.0.8\",\n            \"resolved\": \"https://registry.npmjs.org/micromatch/-/micromatch-4.0.8.tgz\",\n            \"integrity\": \"sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"dependencies\": {\n                \"braces\": \"^3.0.3\",\n                \"picomatch\": \"^2.3.1\"\n            },\n            \"engines\": {\n                \"node\": \">=8.6\"\n            }\n        },\n        \"node_modules/mimic-fn\": {\n            \"version\": \"4.0.0\",\n            \"resolved\": \"https://registry.npmjs.org/mimic-fn/-/mimic-fn-4.0.0.tgz\",\n            \"integrity\": \"sha512-vqiC06CuhBTUdZH+RYl8sFrL096vA45Ok5ISO6sE/Mr1jRbGH4Csnhi8f3wKVl7x8mO4Au7Ir9D3Oyv1VYMFJw==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"engines\": {\n                \"node\": \">=12\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/sponsors/sindresorhus\"\n            }\n        },\n        \"node_modules/mimic-function\": {\n            \"version\": \"5.0.1\",\n            \"resolved\": \"https://registry.npmjs.org/mimic-function/-/mimic-function-5.0.1.tgz\",\n            \"integrity\": \"sha512-VP79XUPxV2CigYP3jWwAUFSku2aKqBH7uTAapFWCBqutsbmDo96KY5o8uh6U+/YSIn5OxJnXp73beVkpqMIGhA==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"engines\": {\n                \"node\": \">=18\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/sponsors/sindresorhus\"\n            }\n        },\n        \"node_modules/ms\": {\n            \"version\": \"2.1.3\",\n            \"resolved\": \"https://registry.npmjs.org/ms/-/ms-2.1.3.tgz\",\n            \"integrity\": \"sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==\",\n            \"dev\": true,\n            \"license\": \"MIT\"\n        },\n        \"node_modules/npm-run-path\": {\n            \"version\": \"5.3.0\",\n            \"resolved\": \"https://registry.npmjs.org/npm-run-path/-/npm-run-path-5.3.0.tgz\",\n            \"integrity\": \"sha512-ppwTtiJZq0O/ai0z7yfudtBpWIoxM8yE6nHi1X47eFR2EWORqfbu6CnPlNsjeN683eT0qG6H/Pyf9fCcvjnnnQ==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"dependencies\": {\n                \"path-key\": \"^4.0.0\"\n            },\n            \"engines\": {\n                \"node\": \"^12.20.0 || ^14.13.1 || >=16.0.0\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/sponsors/sindresorhus\"\n            }\n        },\n        \"node_modules/npm-run-path/node_modules/path-key\": {\n            \"version\": \"4.0.0\",\n            \"resolved\": \"https://registry.npmjs.org/path-key/-/path-key-4.0.0.tgz\",\n            \"integrity\": \"sha512-haREypq7xkM7ErfgIyA0z+Bj4AGKlMSdlQE2jvJo6huWD1EdkKYV+G/T4nq0YEF2vgTT8kqMFKo1uHn950r4SQ==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"engines\": {\n                \"node\": \">=12\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/sponsors/sindresorhus\"\n            }\n        },\n        \"node_modules/onetime\": {\n            \"version\": \"6.0.0\",\n            \"resolved\": \"https://registry.npmjs.org/onetime/-/onetime-6.0.0.tgz\",\n            \"integrity\": \"sha512-1FlR+gjXK7X+AsAHso35MnyN5KqGwJRi/31ft6x0M194ht7S+rWAvd7PHss9xSKMzE0asv1pyIHaJYq+BbacAQ==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"dependencies\": {\n                \"mimic-fn\": \"^4.0.0\"\n            },\n            \"engines\": {\n                \"node\": \">=12\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/sponsors/sindresorhus\"\n            }\n        },\n        \"node_modules/path-key\": {\n            \"version\": \"3.1.1\",\n            \"resolved\": \"https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz\",\n            \"integrity\": \"sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"engines\": {\n                \"node\": \">=8\"\n            }\n        },\n        \"node_modules/picomatch\": {\n            \"version\": \"2.3.1\",\n            \"resolved\": \"https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz\",\n            \"integrity\": \"sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"engines\": {\n                \"node\": \">=8.6\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/sponsors/jonschlinkert\"\n            }\n        },\n        \"node_modules/pidtree\": {\n            \"version\": \"0.6.0\",\n            \"resolved\": \"https://registry.npmjs.org/pidtree/-/pidtree-0.6.0.tgz\",\n            \"integrity\": \"sha512-eG2dWTVw5bzqGRztnHExczNxt5VGsE6OwTeCG3fdUf9KBsZzO3R5OIIIzWR+iZA0NtZ+RDVdaoE2dK1cn6jH4g==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"bin\": {\n                \"pidtree\": \"bin/pidtree.js\"\n            },\n            \"engines\": {\n                \"node\": \">=0.10\"\n            }\n        },\n        \"node_modules/prettier\": {\n            \"version\": \"2.8.8\",\n            \"resolved\": \"https://registry.npmjs.org/prettier/-/prettier-2.8.8.tgz\",\n            \"integrity\": \"sha512-tdN8qQGvNjw4CHbY+XXk0JgCXn9QiF21a55rBe5LJAU+kDyC4WQn4+awm2Xfk2lQMk5fKup9XgzTZtGkjBdP9Q==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"bin\": {\n                \"prettier\": \"bin-prettier.js\"\n            },\n            \"engines\": {\n                \"node\": \">=10.13.0\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/prettier/prettier?sponsor=1\"\n            }\n        },\n        \"node_modules/require-directory\": {\n            \"version\": \"2.1.1\",\n            \"resolved\": \"https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz\",\n            \"integrity\": \"sha1-jGStX9MNqxyXbiNE/+f3kqam30I=\",\n            \"engines\": {\n                \"node\": \">=0.10.0\"\n            }\n        },\n        \"node_modules/restore-cursor\": {\n            \"version\": \"5.1.0\",\n            \"resolved\": \"https://registry.npmjs.org/restore-cursor/-/restore-cursor-5.1.0.tgz\",\n            \"integrity\": \"sha512-oMA2dcrw6u0YfxJQXm342bFKX/E4sG9rbTzO9ptUcR/e8A33cHuvStiYOwH7fszkZlZ1z/ta9AAoPk2F4qIOHA==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"dependencies\": {\n                \"onetime\": \"^7.0.0\",\n                \"signal-exit\": \"^4.1.0\"\n            },\n            \"engines\": {\n                \"node\": \">=18\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/sponsors/sindresorhus\"\n            }\n        },\n        \"node_modules/restore-cursor/node_modules/onetime\": {\n            \"version\": \"7.0.0\",\n            \"resolved\": \"https://registry.npmjs.org/onetime/-/onetime-7.0.0.tgz\",\n            \"integrity\": \"sha512-VXJjc87FScF88uafS3JllDgvAm+c/Slfz06lorj2uAY34rlUu0Nt+v8wreiImcrgAjjIHp1rXpTDlLOGw29WwQ==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"dependencies\": {\n                \"mimic-function\": \"^5.0.0\"\n            },\n            \"engines\": {\n                \"node\": \">=18\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/sponsors/sindresorhus\"\n            }\n        },\n        \"node_modules/rfdc\": {\n            \"version\": \"1.4.1\",\n            \"resolved\": \"https://registry.npmjs.org/rfdc/-/rfdc-1.4.1.tgz\",\n            \"integrity\": \"sha512-q1b3N5QkRUWUl7iyylaaj3kOpIT0N2i9MqIEQXP73GVsN9cw3fdx8X63cEmWhJGi2PPCF23Ijp7ktmd39rawIA==\",\n            \"dev\": true,\n            \"license\": \"MIT\"\n        },\n        \"node_modules/shebang-command\": {\n            \"version\": \"2.0.0\",\n            \"resolved\": \"https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz\",\n            \"integrity\": \"sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"dependencies\": {\n                \"shebang-regex\": \"^3.0.0\"\n            },\n            \"engines\": {\n                \"node\": \">=8\"\n            }\n        },\n        \"node_modules/shebang-regex\": {\n            \"version\": \"3.0.0\",\n            \"resolved\": \"https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz\",\n            \"integrity\": \"sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"engines\": {\n                \"node\": \">=8\"\n            }\n        },\n        \"node_modules/signal-exit\": {\n            \"version\": \"4.1.0\",\n            \"resolved\": \"https://registry.npmjs.org/signal-exit/-/signal-exit-4.1.0.tgz\",\n            \"integrity\": \"sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==\",\n            \"dev\": true,\n            \"license\": \"ISC\",\n            \"engines\": {\n                \"node\": \">=14\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/sponsors/isaacs\"\n            }\n        },\n        \"node_modules/slice-ansi\": {\n            \"version\": \"5.0.0\",\n            \"resolved\": \"https://registry.npmjs.org/slice-ansi/-/slice-ansi-5.0.0.tgz\",\n            \"integrity\": \"sha512-FC+lgizVPfie0kkhqUScwRu1O/lF6NOgJmlCgK+/LYxDCTk8sGelYaHDhFcDN+Sn3Cv+3VSa4Byeo+IMCzpMgQ==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"dependencies\": {\n                \"ansi-styles\": \"^6.0.0\",\n                \"is-fullwidth-code-point\": \"^4.0.0\"\n            },\n            \"engines\": {\n                \"node\": \">=12\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/chalk/slice-ansi?sponsor=1\"\n            }\n        },\n        \"node_modules/slice-ansi/node_modules/ansi-styles\": {\n            \"version\": \"6.2.1\",\n            \"resolved\": \"https://registry.npmjs.org/ansi-styles/-/ansi-styles-6.2.1.tgz\",\n            \"integrity\": \"sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"engines\": {\n                \"node\": \">=12\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/chalk/ansi-styles?sponsor=1\"\n            }\n        },\n        \"node_modules/slice-ansi/node_modules/is-fullwidth-code-point\": {\n            \"version\": \"4.0.0\",\n            \"resolved\": \"https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-4.0.0.tgz\",\n            \"integrity\": \"sha512-O4L094N2/dZ7xqVdrXhh9r1KODPJpFms8B5sGdJLPy664AgvXsreZUyCQQNItZRDlYug4xStLjNp/sz3HvBowQ==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"engines\": {\n                \"node\": \">=12\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/sponsors/sindresorhus\"\n            }\n        },\n        \"node_modules/string-argv\": {\n            \"version\": \"0.3.2\",\n            \"resolved\": \"https://registry.npmjs.org/string-argv/-/string-argv-0.3.2.tgz\",\n            \"integrity\": \"sha512-aqD2Q0144Z+/RqG52NeHEkZauTAUWJO8c6yTftGJKO3Tja5tUgIfmIl6kExvhtxSDP7fXB6DvzkfMpCd/F3G+Q==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"engines\": {\n                \"node\": \">=0.6.19\"\n            }\n        },\n        \"node_modules/string-width\": {\n            \"version\": \"4.2.3\",\n            \"resolved\": \"https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz\",\n            \"integrity\": \"sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==\",\n            \"dependencies\": {\n                \"emoji-regex\": \"^8.0.0\",\n                \"is-fullwidth-code-point\": \"^3.0.0\",\n                \"strip-ansi\": \"^6.0.1\"\n            },\n            \"engines\": {\n                \"node\": \">=8\"\n            }\n        },\n        \"node_modules/strip-ansi\": {\n            \"version\": \"6.0.1\",\n            \"resolved\": \"https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz\",\n            \"integrity\": \"sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==\",\n            \"dependencies\": {\n                \"ansi-regex\": \"^5.0.1\"\n            },\n            \"engines\": {\n                \"node\": \">=8\"\n            }\n        },\n        \"node_modules/strip-final-newline\": {\n            \"version\": \"3.0.0\",\n            \"resolved\": \"https://registry.npmjs.org/strip-final-newline/-/strip-final-newline-3.0.0.tgz\",\n            \"integrity\": \"sha512-dOESqjYr96iWYylGObzd39EuNTa5VJxyvVAEm5Jnh7KGo75V43Hk1odPQkNDyXNmUR6k+gEiDVXnjB8HJ3crXw==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"engines\": {\n                \"node\": \">=12\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/sponsors/sindresorhus\"\n            }\n        },\n        \"node_modules/to-regex-range\": {\n            \"version\": \"5.0.1\",\n            \"resolved\": \"https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz\",\n            \"integrity\": \"sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"dependencies\": {\n                \"is-number\": \"^7.0.0\"\n            },\n            \"engines\": {\n                \"node\": \">=8.0\"\n            }\n        },\n        \"node_modules/which\": {\n            \"version\": \"2.0.2\",\n            \"resolved\": \"https://registry.npmjs.org/which/-/which-2.0.2.tgz\",\n            \"integrity\": \"sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==\",\n            \"dev\": true,\n            \"license\": \"ISC\",\n            \"dependencies\": {\n                \"isexe\": \"^2.0.0\"\n            },\n            \"bin\": {\n                \"node-which\": \"bin/node-which\"\n            },\n            \"engines\": {\n                \"node\": \">= 8\"\n            }\n        },\n        \"node_modules/wrap-ansi\": {\n            \"version\": \"7.0.0\",\n            \"resolved\": \"https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz\",\n            \"integrity\": \"sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==\",\n            \"dependencies\": {\n                \"ansi-styles\": \"^4.0.0\",\n                \"string-width\": \"^4.1.0\",\n                \"strip-ansi\": \"^6.0.0\"\n            },\n            \"engines\": {\n                \"node\": \">=10\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/chalk/wrap-ansi?sponsor=1\"\n            }\n        },\n        \"node_modules/y18n\": {\n            \"version\": \"5.0.8\",\n            \"resolved\": \"https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz\",\n            \"integrity\": \"sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==\",\n            \"engines\": {\n                \"node\": \">=10\"\n            }\n        },\n        \"node_modules/yaml\": {\n            \"version\": \"2.5.1\",\n            \"resolved\": \"https://registry.npmjs.org/yaml/-/yaml-2.5.1.tgz\",\n            \"integrity\": \"sha512-bLQOjaX/ADgQ20isPJRvF0iRUHIxVhYvr53Of7wGcWlO2jvtUlH5m87DsmulFVxRpNLOnI4tB6p/oh8D7kpn9Q==\",\n            \"dev\": true,\n            \"license\": \"ISC\",\n            \"bin\": {\n                \"yaml\": \"bin.mjs\"\n            },\n            \"engines\": {\n                \"node\": \">= 14\"\n            }\n        },\n        \"node_modules/yargs\": {\n            \"version\": \"17.3.1\",\n            \"resolved\": \"https://registry.npmjs.org/yargs/-/yargs-17.3.1.tgz\",\n            \"integrity\": \"sha512-WUANQeVgjLbNsEmGk20f+nlHgOqzRFpiGWVaBrYGYIGANIIu3lWjoyi0fNlFmJkvfhCZ6BXINe7/W2O2bV4iaA==\",\n            \"dependencies\": {\n                \"cliui\": \"^7.0.2\",\n                \"escalade\": \"^3.1.1\",\n                \"get-caller-file\": \"^2.0.5\",\n                \"require-directory\": \"^2.1.1\",\n                \"string-width\": \"^4.2.3\",\n                \"y18n\": \"^5.0.5\",\n                \"yargs-parser\": \"^21.0.0\"\n            },\n            \"engines\": {\n                \"node\": \">=12\"\n            }\n        },\n        \"node_modules/yargs-parser\": {\n            \"version\": \"21.0.0\",\n            \"resolved\": \"https://registry.npmjs.org/yargs-parser/-/yargs-parser-21.0.0.tgz\",\n            \"integrity\": \"sha512-z9kApYUOCwoeZ78rfRYYWdiU/iNL6mwwYlkkZfJoyMR1xps+NEBX5X7XmRpxkZHhXJ6+Ey00IwKxBBSW9FIjyA==\",\n            \"engines\": {\n                \"node\": \">=12\"\n            }\n        }\n    },\n    \"dependencies\": {\n        \"ansi-escapes\": {\n            \"version\": \"7.0.0\",\n            \"resolved\": \"https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-7.0.0.tgz\",\n            \"integrity\": \"sha512-GdYO7a61mR0fOlAsvC9/rIHf7L96sBc6dEWzeOu+KAea5bZyQRPIpojrVoI4AXGJS/ycu/fBTdLrUkA4ODrvjw==\",\n            \"dev\": true,\n            \"requires\": {\n                \"environment\": \"^1.0.0\"\n            }\n        },\n        \"ansi-regex\": {\n            \"version\": \"5.0.1\",\n            \"resolved\": \"https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz\",\n            \"integrity\": \"sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==\"\n        },\n        \"ansi-styles\": {\n            \"version\": \"4.3.0\",\n            \"resolved\": \"https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz\",\n            \"integrity\": \"sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==\",\n            \"requires\": {\n                \"color-convert\": \"^2.0.1\"\n            }\n        },\n        \"braces\": {\n            \"version\": \"3.0.3\",\n            \"resolved\": \"https://registry.npmjs.org/braces/-/braces-3.0.3.tgz\",\n            \"integrity\": \"sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==\",\n            \"dev\": true,\n            \"requires\": {\n                \"fill-range\": \"^7.1.1\"\n            }\n        },\n        \"chalk\": {\n            \"version\": \"5.3.0\",\n            \"resolved\": \"https://registry.npmjs.org/chalk/-/chalk-5.3.0.tgz\",\n            \"integrity\": \"sha512-dLitG79d+GV1Nb/VYcCDFivJeK1hiukt9QjRNVOsUtTy1rR1YJsmpGGTZ3qJos+uw7WmWF4wUwBd9jxjocFC2w==\",\n            \"dev\": true\n        },\n        \"cli-cursor\": {\n            \"version\": \"5.0.0\",\n            \"resolved\": \"https://registry.npmjs.org/cli-cursor/-/cli-cursor-5.0.0.tgz\",\n            \"integrity\": \"sha512-aCj4O5wKyszjMmDT4tZj93kxyydN/K5zPWSCe6/0AV/AA1pqe5ZBIw0a2ZfPQV7lL5/yb5HsUreJ6UFAF1tEQw==\",\n            \"dev\": true,\n            \"requires\": {\n                \"restore-cursor\": \"^5.0.0\"\n            }\n        },\n        \"cli-truncate\": {\n            \"version\": \"4.0.0\",\n            \"resolved\": \"https://registry.npmjs.org/cli-truncate/-/cli-truncate-4.0.0.tgz\",\n            \"integrity\": \"sha512-nPdaFdQ0h/GEigbPClz11D0v/ZJEwxmeVZGeMo3Z5StPtUTkA9o1lD6QwoirYiSDzbcwn2XcjwmCp68W1IS4TA==\",\n            \"dev\": true,\n            \"requires\": {\n                \"slice-ansi\": \"^5.0.0\",\n                \"string-width\": \"^7.0.0\"\n            },\n            \"dependencies\": {\n                \"ansi-regex\": {\n                    \"version\": \"6.1.0\",\n                    \"resolved\": \"https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.1.0.tgz\",\n                    \"integrity\": \"sha512-7HSX4QQb4CspciLpVFwyRe79O3xsIZDDLER21kERQ71oaPodF8jL725AgJMFAYbooIqolJoRLuM81SpeUkpkvA==\",\n                    \"dev\": true\n                },\n                \"emoji-regex\": {\n                    \"version\": \"10.4.0\",\n                    \"resolved\": \"https://registry.npmjs.org/emoji-regex/-/emoji-regex-10.4.0.tgz\",\n                    \"integrity\": \"sha512-EC+0oUMY1Rqm4O6LLrgjtYDvcVYTy7chDnM4Q7030tP4Kwj3u/pR6gP9ygnp2CJMK5Gq+9Q2oqmrFJAz01DXjw==\",\n                    \"dev\": true\n                },\n                \"string-width\": {\n                    \"version\": \"7.2.0\",\n                    \"resolved\": \"https://registry.npmjs.org/string-width/-/string-width-7.2.0.tgz\",\n                    \"integrity\": \"sha512-tsaTIkKW9b4N+AEj+SVA+WhJzV7/zMhcSu78mLKWSk7cXMOSHsBKFWUs0fWwq8QyK3MgJBQRX6Gbi4kYbdvGkQ==\",\n                    \"dev\": true,\n                    \"requires\": {\n                        \"emoji-regex\": \"^10.3.0\",\n                        \"get-east-asian-width\": \"^1.0.0\",\n                        \"strip-ansi\": \"^7.1.0\"\n                    }\n                },\n                \"strip-ansi\": {\n                    \"version\": \"7.1.0\",\n                    \"resolved\": \"https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.0.tgz\",\n                    \"integrity\": \"sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==\",\n                    \"dev\": true,\n                    \"requires\": {\n                        \"ansi-regex\": \"^6.0.1\"\n                    }\n                }\n            }\n        },\n        \"cliui\": {\n            \"version\": \"7.0.4\",\n            \"resolved\": \"https://registry.npmjs.org/cliui/-/cliui-7.0.4.tgz\",\n            \"integrity\": \"sha512-OcRE68cOsVMXp1Yvonl/fzkQOyjLSu/8bhPDfQt0e0/Eb283TKP20Fs2MqoPsr9SwA595rRCA+QMzYc9nBP+JQ==\",\n            \"requires\": {\n                \"string-width\": \"^4.2.0\",\n                \"strip-ansi\": \"^6.0.0\",\n                \"wrap-ansi\": \"^7.0.0\"\n            }\n        },\n        \"color-convert\": {\n            \"version\": \"2.0.1\",\n            \"resolved\": \"https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz\",\n            \"integrity\": \"sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==\",\n            \"requires\": {\n                \"color-name\": \"~1.1.4\"\n            }\n        },\n        \"color-name\": {\n            \"version\": \"1.1.4\",\n            \"resolved\": \"https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz\",\n            \"integrity\": \"sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==\"\n        },\n        \"colorette\": {\n            \"version\": \"2.0.20\",\n            \"resolved\": \"https://registry.npmjs.org/colorette/-/colorette-2.0.20.tgz\",\n            \"integrity\": \"sha512-IfEDxwoWIjkeXL1eXcDiow4UbKjhLdq6/EuSVR9GMN7KVH3r9gQ83e73hsz1Nd1T3ijd5xv1wcWRYO+D6kCI2w==\",\n            \"dev\": true\n        },\n        \"commander\": {\n            \"version\": \"12.1.0\",\n            \"resolved\": \"https://registry.npmjs.org/commander/-/commander-12.1.0.tgz\",\n            \"integrity\": \"sha512-Vw8qHK3bZM9y/P10u3Vib8o/DdkvA2OtPtZvD871QKjy74Wj1WSKFILMPRPSdUSx5RFK1arlJzEtA4PkFgnbuA==\",\n            \"dev\": true\n        },\n        \"cross-spawn\": {\n            \"version\": \"7.0.3\",\n            \"resolved\": \"https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.3.tgz\",\n            \"integrity\": \"sha512-iRDPJKUPVEND7dHPO8rkbOnPpyDygcDFtWjpeWNCgy8WP2rXcxXL8TskReQl6OrB2G7+UJrags1q15Fudc7G6w==\",\n            \"dev\": true,\n            \"requires\": {\n                \"path-key\": \"^3.1.0\",\n                \"shebang-command\": \"^2.0.0\",\n                \"which\": \"^2.0.1\"\n            }\n        },\n        \"debug\": {\n            \"version\": \"4.3.7\",\n            \"resolved\": \"https://registry.npmjs.org/debug/-/debug-4.3.7.tgz\",\n            \"integrity\": \"sha512-Er2nc/H7RrMXZBFCEim6TCmMk02Z8vLC2Rbi1KEBggpo0fS6l0S1nnapwmIi3yW/+GOJap1Krg4w0Hg80oCqgQ==\",\n            \"dev\": true,\n            \"requires\": {\n                \"ms\": \"^2.1.3\"\n            }\n        },\n        \"dotenv\": {\n            \"version\": \"16.0.3\",\n            \"resolved\": \"https://registry.npmjs.org/dotenv/-/dotenv-16.0.3.tgz\",\n            \"integrity\": \"sha512-7GO6HghkA5fYG9TYnNxi14/7K9f5occMlp3zXAuSxn7CKCxt9xbNWG7yF8hTCSUchlfWSe3uLmlPfigevRItzQ==\"\n        },\n        \"emoji-regex\": {\n            \"version\": \"8.0.0\",\n            \"resolved\": \"https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz\",\n            \"integrity\": \"sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==\"\n        },\n        \"environment\": {\n            \"version\": \"1.1.0\",\n            \"resolved\": \"https://registry.npmjs.org/environment/-/environment-1.1.0.tgz\",\n            \"integrity\": \"sha512-xUtoPkMggbz0MPyPiIWr1Kp4aeWJjDZ6SMvURhimjdZgsRuDplF5/s9hcgGhyXMhs+6vpnuoiZ2kFiu3FMnS8Q==\",\n            \"dev\": true\n        },\n        \"escalade\": {\n            \"version\": \"3.1.1\",\n            \"resolved\": \"https://registry.npmjs.org/escalade/-/escalade-3.1.1.tgz\",\n            \"integrity\": \"sha512-k0er2gUkLf8O0zKJiAhmkTnJlTvINGv7ygDNPbeIsX/TJjGJZHuh9B2UxbsaEkmlEo9MfhrSzmhIlhRlI2GXnw==\"\n        },\n        \"eventemitter3\": {\n            \"version\": \"5.0.1\",\n            \"resolved\": \"https://registry.npmjs.org/eventemitter3/-/eventemitter3-5.0.1.tgz\",\n            \"integrity\": \"sha512-GWkBvjiSZK87ELrYOSESUYeVIc9mvLLf/nXalMOS5dYrgZq9o5OVkbZAVM06CVxYsCwH9BDZFPlQTlPA1j4ahA==\",\n            \"dev\": true\n        },\n        \"execa\": {\n            \"version\": \"8.0.1\",\n            \"resolved\": \"https://registry.npmjs.org/execa/-/execa-8.0.1.tgz\",\n            \"integrity\": \"sha512-VyhnebXciFV2DESc+p6B+y0LjSm0krU4OgJN44qFAhBY0TJ+1V61tYD2+wHusZ6F9n5K+vl8k0sTy7PEfV4qpg==\",\n            \"dev\": true,\n            \"requires\": {\n                \"cross-spawn\": \"^7.0.3\",\n                \"get-stream\": \"^8.0.1\",\n                \"human-signals\": \"^5.0.0\",\n                \"is-stream\": \"^3.0.0\",\n                \"merge-stream\": \"^2.0.0\",\n                \"npm-run-path\": \"^5.1.0\",\n                \"onetime\": \"^6.0.0\",\n                \"signal-exit\": \"^4.1.0\",\n                \"strip-final-newline\": \"^3.0.0\"\n            }\n        },\n        \"fill-range\": {\n            \"version\": \"7.1.1\",\n            \"resolved\": \"https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz\",\n            \"integrity\": \"sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==\",\n            \"dev\": true,\n            \"requires\": {\n                \"to-regex-range\": \"^5.0.1\"\n            }\n        },\n        \"get-caller-file\": {\n            \"version\": \"2.0.5\",\n            \"resolved\": \"https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz\",\n            \"integrity\": \"sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==\"\n        },\n        \"get-east-asian-width\": {\n            \"version\": \"1.2.0\",\n            \"resolved\": \"https://registry.npmjs.org/get-east-asian-width/-/get-east-asian-width-1.2.0.tgz\",\n            \"integrity\": \"sha512-2nk+7SIVb14QrgXFHcm84tD4bKQz0RxPuMT8Ag5KPOq7J5fEmAg0UbXdTOSHqNuHSU28k55qnceesxXRZGzKWA==\",\n            \"dev\": true\n        },\n        \"get-stream\": {\n            \"version\": \"8.0.1\",\n            \"resolved\": \"https://registry.npmjs.org/get-stream/-/get-stream-8.0.1.tgz\",\n            \"integrity\": \"sha512-VaUJspBffn/LMCJVoMvSAdmscJyS1auj5Zulnn5UoYcY531UWmdwhRWkcGKnGU93m5HSXP9LP2usOryrBtQowA==\",\n            \"dev\": true\n        },\n        \"human-signals\": {\n            \"version\": \"5.0.0\",\n            \"resolved\": \"https://registry.npmjs.org/human-signals/-/human-signals-5.0.0.tgz\",\n            \"integrity\": \"sha512-AXcZb6vzzrFAUE61HnN4mpLqd/cSIwNQjtNWR0euPm6y0iqx3G4gOXaIDdtdDwZmhwe82LA6+zinmW4UBWVePQ==\",\n            \"dev\": true\n        },\n        \"husky\": {\n            \"version\": \"9.1.6\",\n            \"resolved\": \"https://registry.npmjs.org/husky/-/husky-9.1.6.tgz\",\n            \"integrity\": \"sha512-sqbjZKK7kf44hfdE94EoX8MZNk0n7HeW37O4YrVGCF4wzgQjp+akPAkfUK5LZ6KuR/6sqeAVuXHji+RzQgOn5A==\",\n            \"dev\": true\n        },\n        \"is-fullwidth-code-point\": {\n            \"version\": \"3.0.0\",\n            \"resolved\": \"https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz\",\n            \"integrity\": \"sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==\"\n        },\n        \"is-number\": {\n            \"version\": \"7.0.0\",\n            \"resolved\": \"https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz\",\n            \"integrity\": \"sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==\",\n            \"dev\": true\n        },\n        \"is-stream\": {\n            \"version\": \"3.0.0\",\n            \"resolved\": \"https://registry.npmjs.org/is-stream/-/is-stream-3.0.0.tgz\",\n            \"integrity\": \"sha512-LnQR4bZ9IADDRSkvpqMGvt/tEJWclzklNgSw48V5EAaAeDd6qGvN8ei6k5p0tvxSR171VmGyHuTiAOfxAbr8kA==\",\n            \"dev\": true\n        },\n        \"isexe\": {\n            \"version\": \"2.0.0\",\n            \"resolved\": \"https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz\",\n            \"integrity\": \"sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==\",\n            \"dev\": true\n        },\n        \"lilconfig\": {\n            \"version\": \"3.1.2\",\n            \"resolved\": \"https://registry.npmjs.org/lilconfig/-/lilconfig-3.1.2.tgz\",\n            \"integrity\": \"sha512-eop+wDAvpItUys0FWkHIKeC9ybYrTGbU41U5K7+bttZZeohvnY7M9dZ5kB21GNWiFT2q1OoPTvncPCgSOVO5ow==\",\n            \"dev\": true\n        },\n        \"lint-staged\": {\n            \"version\": \"15.2.10\",\n            \"resolved\": \"https://registry.npmjs.org/lint-staged/-/lint-staged-15.2.10.tgz\",\n            \"integrity\": \"sha512-5dY5t743e1byO19P9I4b3x8HJwalIznL5E1FWYnU6OWw33KxNBSLAc6Cy7F2PsFEO8FKnLwjwm5hx7aMF0jzZg==\",\n            \"dev\": true,\n            \"requires\": {\n                \"chalk\": \"~5.3.0\",\n                \"commander\": \"~12.1.0\",\n                \"debug\": \"~4.3.6\",\n                \"execa\": \"~8.0.1\",\n                \"lilconfig\": \"~3.1.2\",\n                \"listr2\": \"~8.2.4\",\n                \"micromatch\": \"~4.0.8\",\n                \"pidtree\": \"~0.6.0\",\n                \"string-argv\": \"~0.3.2\",\n                \"yaml\": \"~2.5.0\"\n            }\n        },\n        \"listr2\": {\n            \"version\": \"8.2.4\",\n            \"resolved\": \"https://registry.npmjs.org/listr2/-/listr2-8.2.4.tgz\",\n            \"integrity\": \"sha512-opevsywziHd3zHCVQGAj8zu+Z3yHNkkoYhWIGnq54RrCVwLz0MozotJEDnKsIBLvkfLGN6BLOyAeRrYI0pKA4g==\",\n            \"dev\": true,\n            \"requires\": {\n                \"cli-truncate\": \"^4.0.0\",\n                \"colorette\": \"^2.0.20\",\n                \"eventemitter3\": \"^5.0.1\",\n                \"log-update\": \"^6.1.0\",\n                \"rfdc\": \"^1.4.1\",\n                \"wrap-ansi\": \"^9.0.0\"\n            },\n            \"dependencies\": {\n                \"ansi-regex\": {\n                    \"version\": \"6.1.0\",\n                    \"resolved\": \"https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.1.0.tgz\",\n                    \"integrity\": \"sha512-7HSX4QQb4CspciLpVFwyRe79O3xsIZDDLER21kERQ71oaPodF8jL725AgJMFAYbooIqolJoRLuM81SpeUkpkvA==\",\n                    \"dev\": true\n                },\n                \"ansi-styles\": {\n                    \"version\": \"6.2.1\",\n                    \"resolved\": \"https://registry.npmjs.org/ansi-styles/-/ansi-styles-6.2.1.tgz\",\n                    \"integrity\": \"sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==\",\n                    \"dev\": true\n                },\n                \"emoji-regex\": {\n                    \"version\": \"10.4.0\",\n                    \"resolved\": \"https://registry.npmjs.org/emoji-regex/-/emoji-regex-10.4.0.tgz\",\n                    \"integrity\": \"sha512-EC+0oUMY1Rqm4O6LLrgjtYDvcVYTy7chDnM4Q7030tP4Kwj3u/pR6gP9ygnp2CJMK5Gq+9Q2oqmrFJAz01DXjw==\",\n                    \"dev\": true\n                },\n                \"string-width\": {\n                    \"version\": \"7.2.0\",\n                    \"resolved\": \"https://registry.npmjs.org/string-width/-/string-width-7.2.0.tgz\",\n                    \"integrity\": \"sha512-tsaTIkKW9b4N+AEj+SVA+WhJzV7/zMhcSu78mLKWSk7cXMOSHsBKFWUs0fWwq8QyK3MgJBQRX6Gbi4kYbdvGkQ==\",\n                    \"dev\": true,\n                    \"requires\": {\n                        \"emoji-regex\": \"^10.3.0\",\n                        \"get-east-asian-width\": \"^1.0.0\",\n                        \"strip-ansi\": \"^7.1.0\"\n                    }\n                },\n                \"strip-ansi\": {\n                    \"version\": \"7.1.0\",\n                    \"resolved\": \"https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.0.tgz\",\n                    \"integrity\": \"sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==\",\n                    \"dev\": true,\n                    \"requires\": {\n                        \"ansi-regex\": \"^6.0.1\"\n                    }\n                },\n                \"wrap-ansi\": {\n                    \"version\": \"9.0.0\",\n                    \"resolved\": \"https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-9.0.0.tgz\",\n                    \"integrity\": \"sha512-G8ura3S+3Z2G+mkgNRq8dqaFZAuxfsxpBB8OCTGRTCtp+l/v9nbFNmCUP1BZMts3G1142MsZfn6eeUKrr4PD1Q==\",\n                    \"dev\": true,\n                    \"requires\": {\n                        \"ansi-styles\": \"^6.2.1\",\n                        \"string-width\": \"^7.0.0\",\n                        \"strip-ansi\": \"^7.1.0\"\n                    }\n                }\n            }\n        },\n        \"log-update\": {\n            \"version\": \"6.1.0\",\n            \"resolved\": \"https://registry.npmjs.org/log-update/-/log-update-6.1.0.tgz\",\n            \"integrity\": \"sha512-9ie8ItPR6tjY5uYJh8K/Zrv/RMZ5VOlOWvtZdEHYSTFKZfIBPQa9tOAEeAWhd+AnIneLJ22w5fjOYtoutpWq5w==\",\n            \"dev\": true,\n            \"requires\": {\n                \"ansi-escapes\": \"^7.0.0\",\n                \"cli-cursor\": \"^5.0.0\",\n                \"slice-ansi\": \"^7.1.0\",\n                \"strip-ansi\": \"^7.1.0\",\n                \"wrap-ansi\": \"^9.0.0\"\n            },\n            \"dependencies\": {\n                \"ansi-regex\": {\n                    \"version\": \"6.1.0\",\n                    \"resolved\": \"https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.1.0.tgz\",\n                    \"integrity\": \"sha512-7HSX4QQb4CspciLpVFwyRe79O3xsIZDDLER21kERQ71oaPodF8jL725AgJMFAYbooIqolJoRLuM81SpeUkpkvA==\",\n                    \"dev\": true\n                },\n                \"ansi-styles\": {\n                    \"version\": \"6.2.1\",\n                    \"resolved\": \"https://registry.npmjs.org/ansi-styles/-/ansi-styles-6.2.1.tgz\",\n                    \"integrity\": \"sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==\",\n                    \"dev\": true\n                },\n                \"emoji-regex\": {\n                    \"version\": \"10.4.0\",\n                    \"resolved\": \"https://registry.npmjs.org/emoji-regex/-/emoji-regex-10.4.0.tgz\",\n                    \"integrity\": \"sha512-EC+0oUMY1Rqm4O6LLrgjtYDvcVYTy7chDnM4Q7030tP4Kwj3u/pR6gP9ygnp2CJMK5Gq+9Q2oqmrFJAz01DXjw==\",\n                    \"dev\": true\n                },\n                \"is-fullwidth-code-point\": {\n                    \"version\": \"5.0.0\",\n                    \"resolved\": \"https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-5.0.0.tgz\",\n                    \"integrity\": \"sha512-OVa3u9kkBbw7b8Xw5F9P+D/T9X+Z4+JruYVNapTjPYZYUznQ5YfWeFkOj606XYYW8yugTfC8Pj0hYqvi4ryAhA==\",\n                    \"dev\": true,\n                    \"requires\": {\n                        \"get-east-asian-width\": \"^1.0.0\"\n                    }\n                },\n                \"slice-ansi\": {\n                    \"version\": \"7.1.0\",\n                    \"resolved\": \"https://registry.npmjs.org/slice-ansi/-/slice-ansi-7.1.0.tgz\",\n                    \"integrity\": \"sha512-bSiSngZ/jWeX93BqeIAbImyTbEihizcwNjFoRUIY/T1wWQsfsm2Vw1agPKylXvQTU7iASGdHhyqRlqQzfz+Htg==\",\n                    \"dev\": true,\n                    \"requires\": {\n                        \"ansi-styles\": \"^6.2.1\",\n                        \"is-fullwidth-code-point\": \"^5.0.0\"\n                    }\n                },\n                \"string-width\": {\n                    \"version\": \"7.2.0\",\n                    \"resolved\": \"https://registry.npmjs.org/string-width/-/string-width-7.2.0.tgz\",\n                    \"integrity\": \"sha512-tsaTIkKW9b4N+AEj+SVA+WhJzV7/zMhcSu78mLKWSk7cXMOSHsBKFWUs0fWwq8QyK3MgJBQRX6Gbi4kYbdvGkQ==\",\n                    \"dev\": true,\n                    \"requires\": {\n                        \"emoji-regex\": \"^10.3.0\",\n                        \"get-east-asian-width\": \"^1.0.0\",\n                        \"strip-ansi\": \"^7.1.0\"\n                    }\n                },\n                \"strip-ansi\": {\n                    \"version\": \"7.1.0\",\n                    \"resolved\": \"https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.0.tgz\",\n                    \"integrity\": \"sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==\",\n                    \"dev\": true,\n                    \"requires\": {\n                        \"ansi-regex\": \"^6.0.1\"\n                    }\n                },\n                \"wrap-ansi\": {\n                    \"version\": \"9.0.0\",\n                    \"resolved\": \"https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-9.0.0.tgz\",\n                    \"integrity\": \"sha512-G8ura3S+3Z2G+mkgNRq8dqaFZAuxfsxpBB8OCTGRTCtp+l/v9nbFNmCUP1BZMts3G1142MsZfn6eeUKrr4PD1Q==\",\n                    \"dev\": true,\n                    \"requires\": {\n                        \"ansi-styles\": \"^6.2.1\",\n                        \"string-width\": \"^7.0.0\",\n                        \"strip-ansi\": \"^7.1.0\"\n                    }\n                }\n            }\n        },\n        \"merge-stream\": {\n            \"version\": \"2.0.0\",\n            \"resolved\": \"https://registry.npmjs.org/merge-stream/-/merge-stream-2.0.0.tgz\",\n            \"integrity\": \"sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==\",\n            \"dev\": true\n        },\n        \"micromatch\": {\n            \"version\": \"4.0.8\",\n            \"resolved\": \"https://registry.npmjs.org/micromatch/-/micromatch-4.0.8.tgz\",\n            \"integrity\": \"sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==\",\n            \"dev\": true,\n            \"requires\": {\n                \"braces\": \"^3.0.3\",\n                \"picomatch\": \"^2.3.1\"\n            }\n        },\n        \"mimic-fn\": {\n            \"version\": \"4.0.0\",\n            \"resolved\": \"https://registry.npmjs.org/mimic-fn/-/mimic-fn-4.0.0.tgz\",\n            \"integrity\": \"sha512-vqiC06CuhBTUdZH+RYl8sFrL096vA45Ok5ISO6sE/Mr1jRbGH4Csnhi8f3wKVl7x8mO4Au7Ir9D3Oyv1VYMFJw==\",\n            \"dev\": true\n        },\n        \"mimic-function\": {\n            \"version\": \"5.0.1\",\n            \"resolved\": \"https://registry.npmjs.org/mimic-function/-/mimic-function-5.0.1.tgz\",\n            \"integrity\": \"sha512-VP79XUPxV2CigYP3jWwAUFSku2aKqBH7uTAapFWCBqutsbmDo96KY5o8uh6U+/YSIn5OxJnXp73beVkpqMIGhA==\",\n            \"dev\": true\n        },\n        \"ms\": {\n            \"version\": \"2.1.3\",\n            \"resolved\": \"https://registry.npmjs.org/ms/-/ms-2.1.3.tgz\",\n            \"integrity\": \"sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==\",\n            \"dev\": true\n        },\n        \"npm-run-path\": {\n            \"version\": \"5.3.0\",\n            \"resolved\": \"https://registry.npmjs.org/npm-run-path/-/npm-run-path-5.3.0.tgz\",\n            \"integrity\": \"sha512-ppwTtiJZq0O/ai0z7yfudtBpWIoxM8yE6nHi1X47eFR2EWORqfbu6CnPlNsjeN683eT0qG6H/Pyf9fCcvjnnnQ==\",\n            \"dev\": true,\n            \"requires\": {\n                \"path-key\": \"^4.0.0\"\n            },\n            \"dependencies\": {\n                \"path-key\": {\n                    \"version\": \"4.0.0\",\n                    \"resolved\": \"https://registry.npmjs.org/path-key/-/path-key-4.0.0.tgz\",\n                    \"integrity\": \"sha512-haREypq7xkM7ErfgIyA0z+Bj4AGKlMSdlQE2jvJo6huWD1EdkKYV+G/T4nq0YEF2vgTT8kqMFKo1uHn950r4SQ==\",\n                    \"dev\": true\n                }\n            }\n        },\n        \"onetime\": {\n            \"version\": \"6.0.0\",\n            \"resolved\": \"https://registry.npmjs.org/onetime/-/onetime-6.0.0.tgz\",\n            \"integrity\": \"sha512-1FlR+gjXK7X+AsAHso35MnyN5KqGwJRi/31ft6x0M194ht7S+rWAvd7PHss9xSKMzE0asv1pyIHaJYq+BbacAQ==\",\n            \"dev\": true,\n            \"requires\": {\n                \"mimic-fn\": \"^4.0.0\"\n            }\n        },\n        \"path-key\": {\n            \"version\": \"3.1.1\",\n            \"resolved\": \"https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz\",\n            \"integrity\": \"sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==\",\n            \"dev\": true\n        },\n        \"picomatch\": {\n            \"version\": \"2.3.1\",\n            \"resolved\": \"https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz\",\n            \"integrity\": \"sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==\",\n            \"dev\": true\n        },\n        \"pidtree\": {\n            \"version\": \"0.6.0\",\n            \"resolved\": \"https://registry.npmjs.org/pidtree/-/pidtree-0.6.0.tgz\",\n            \"integrity\": \"sha512-eG2dWTVw5bzqGRztnHExczNxt5VGsE6OwTeCG3fdUf9KBsZzO3R5OIIIzWR+iZA0NtZ+RDVdaoE2dK1cn6jH4g==\",\n            \"dev\": true\n        },\n        \"prettier\": {\n            \"version\": \"2.8.8\",\n            \"resolved\": \"https://registry.npmjs.org/prettier/-/prettier-2.8.8.tgz\",\n            \"integrity\": \"sha512-tdN8qQGvNjw4CHbY+XXk0JgCXn9QiF21a55rBe5LJAU+kDyC4WQn4+awm2Xfk2lQMk5fKup9XgzTZtGkjBdP9Q==\",\n            \"dev\": true\n        },\n        \"require-directory\": {\n            \"version\": \"2.1.1\",\n            \"resolved\": \"https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz\",\n            \"integrity\": \"sha1-jGStX9MNqxyXbiNE/+f3kqam30I=\"\n        },\n        \"restore-cursor\": {\n            \"version\": \"5.1.0\",\n            \"resolved\": \"https://registry.npmjs.org/restore-cursor/-/restore-cursor-5.1.0.tgz\",\n            \"integrity\": \"sha512-oMA2dcrw6u0YfxJQXm342bFKX/E4sG9rbTzO9ptUcR/e8A33cHuvStiYOwH7fszkZlZ1z/ta9AAoPk2F4qIOHA==\",\n            \"dev\": true,\n            \"requires\": {\n                \"onetime\": \"^7.0.0\",\n                \"signal-exit\": \"^4.1.0\"\n            },\n            \"dependencies\": {\n                \"onetime\": {\n                    \"version\": \"7.0.0\",\n                    \"resolved\": \"https://registry.npmjs.org/onetime/-/onetime-7.0.0.tgz\",\n                    \"integrity\": \"sha512-VXJjc87FScF88uafS3JllDgvAm+c/Slfz06lorj2uAY34rlUu0Nt+v8wreiImcrgAjjIHp1rXpTDlLOGw29WwQ==\",\n                    \"dev\": true,\n                    \"requires\": {\n                        \"mimic-function\": \"^5.0.0\"\n                    }\n                }\n            }\n        },\n        \"rfdc\": {\n            \"version\": \"1.4.1\",\n            \"resolved\": \"https://registry.npmjs.org/rfdc/-/rfdc-1.4.1.tgz\",\n            \"integrity\": \"sha512-q1b3N5QkRUWUl7iyylaaj3kOpIT0N2i9MqIEQXP73GVsN9cw3fdx8X63cEmWhJGi2PPCF23Ijp7ktmd39rawIA==\",\n            \"dev\": true\n        },\n        \"shebang-command\": {\n            \"version\": \"2.0.0\",\n            \"resolved\": \"https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz\",\n            \"integrity\": \"sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==\",\n            \"dev\": true,\n            \"requires\": {\n                \"shebang-regex\": \"^3.0.0\"\n            }\n        },\n        \"shebang-regex\": {\n            \"version\": \"3.0.0\",\n            \"resolved\": \"https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz\",\n            \"integrity\": \"sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==\",\n            \"dev\": true\n        },\n        \"signal-exit\": {\n            \"version\": \"4.1.0\",\n            \"resolved\": \"https://registry.npmjs.org/signal-exit/-/signal-exit-4.1.0.tgz\",\n            \"integrity\": \"sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==\",\n            \"dev\": true\n        },\n        \"slice-ansi\": {\n            \"version\": \"5.0.0\",\n            \"resolved\": \"https://registry.npmjs.org/slice-ansi/-/slice-ansi-5.0.0.tgz\",\n            \"integrity\": \"sha512-FC+lgizVPfie0kkhqUScwRu1O/lF6NOgJmlCgK+/LYxDCTk8sGelYaHDhFcDN+Sn3Cv+3VSa4Byeo+IMCzpMgQ==\",\n            \"dev\": true,\n            \"requires\": {\n                \"ansi-styles\": \"^6.0.0\",\n                \"is-fullwidth-code-point\": \"^4.0.0\"\n            },\n            \"dependencies\": {\n                \"ansi-styles\": {\n                    \"version\": \"6.2.1\",\n                    \"resolved\": \"https://registry.npmjs.org/ansi-styles/-/ansi-styles-6.2.1.tgz\",\n                    \"integrity\": \"sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==\",\n                    \"dev\": true\n                },\n                \"is-fullwidth-code-point\": {\n                    \"version\": \"4.0.0\",\n                    \"resolved\": \"https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-4.0.0.tgz\",\n                    \"integrity\": \"sha512-O4L094N2/dZ7xqVdrXhh9r1KODPJpFms8B5sGdJLPy664AgvXsreZUyCQQNItZRDlYug4xStLjNp/sz3HvBowQ==\",\n                    \"dev\": true\n                }\n            }\n        },\n        \"string-argv\": {\n            \"version\": \"0.3.2\",\n            \"resolved\": \"https://registry.npmjs.org/string-argv/-/string-argv-0.3.2.tgz\",\n            \"integrity\": \"sha512-aqD2Q0144Z+/RqG52NeHEkZauTAUWJO8c6yTftGJKO3Tja5tUgIfmIl6kExvhtxSDP7fXB6DvzkfMpCd/F3G+Q==\",\n            \"dev\": true\n        },\n        \"string-width\": {\n            \"version\": \"4.2.3\",\n            \"resolved\": \"https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz\",\n            \"integrity\": \"sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==\",\n            \"requires\": {\n                \"emoji-regex\": \"^8.0.0\",\n                \"is-fullwidth-code-point\": \"^3.0.0\",\n                \"strip-ansi\": \"^6.0.1\"\n            }\n        },\n        \"strip-ansi\": {\n            \"version\": \"6.0.1\",\n            \"resolved\": \"https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz\",\n            \"integrity\": \"sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==\",\n            \"requires\": {\n                \"ansi-regex\": \"^5.0.1\"\n            }\n        },\n        \"strip-final-newline\": {\n            \"version\": \"3.0.0\",\n            \"resolved\": \"https://registry.npmjs.org/strip-final-newline/-/strip-final-newline-3.0.0.tgz\",\n            \"integrity\": \"sha512-dOESqjYr96iWYylGObzd39EuNTa5VJxyvVAEm5Jnh7KGo75V43Hk1odPQkNDyXNmUR6k+gEiDVXnjB8HJ3crXw==\",\n            \"dev\": true\n        },\n        \"to-regex-range\": {\n            \"version\": \"5.0.1\",\n            \"resolved\": \"https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz\",\n            \"integrity\": \"sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==\",\n            \"dev\": true,\n            \"requires\": {\n                \"is-number\": \"^7.0.0\"\n            }\n        },\n        \"which\": {\n            \"version\": \"2.0.2\",\n            \"resolved\": \"https://registry.npmjs.org/which/-/which-2.0.2.tgz\",\n            \"integrity\": \"sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==\",\n            \"dev\": true,\n            \"requires\": {\n                \"isexe\": \"^2.0.0\"\n            }\n        },\n        \"wrap-ansi\": {\n            \"version\": \"7.0.0\",\n            \"resolved\": \"https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz\",\n            \"integrity\": \"sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==\",\n            \"requires\": {\n                \"ansi-styles\": \"^4.0.0\",\n                \"string-width\": \"^4.1.0\",\n                \"strip-ansi\": \"^6.0.0\"\n            }\n        },\n        \"y18n\": {\n            \"version\": \"5.0.8\",\n            \"resolved\": \"https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz\",\n            \"integrity\": \"sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==\"\n        },\n        \"yaml\": {\n            \"version\": \"2.5.1\",\n            \"resolved\": \"https://registry.npmjs.org/yaml/-/yaml-2.5.1.tgz\",\n            \"integrity\": \"sha512-bLQOjaX/ADgQ20isPJRvF0iRUHIxVhYvr53Of7wGcWlO2jvtUlH5m87DsmulFVxRpNLOnI4tB6p/oh8D7kpn9Q==\",\n            \"dev\": true\n        },\n        \"yargs\": {\n            \"version\": \"17.3.1\",\n            \"resolved\": \"https://registry.npmjs.org/yargs/-/yargs-17.3.1.tgz\",\n            \"integrity\": \"sha512-WUANQeVgjLbNsEmGk20f+nlHgOqzRFpiGWVaBrYGYIGANIIu3lWjoyi0fNlFmJkvfhCZ6BXINe7/W2O2bV4iaA==\",\n            \"requires\": {\n                \"cliui\": \"^7.0.2\",\n                \"escalade\": \"^3.1.1\",\n                \"get-caller-file\": \"^2.0.5\",\n                \"require-directory\": \"^2.1.1\",\n                \"string-width\": \"^4.2.3\",\n                \"y18n\": \"^5.0.5\",\n                \"yargs-parser\": \"^21.0.0\"\n            }\n        },\n        \"yargs-parser\": {\n            \"version\": \"21.0.0\",\n            \"resolved\": \"https://registry.npmjs.org/yargs-parser/-/yargs-parser-21.0.0.tgz\",\n            \"integrity\": \"sha512-z9kApYUOCwoeZ78rfRYYWdiU/iNL6mwwYlkkZfJoyMR1xps+NEBX5X7XmRpxkZHhXJ6+Ey00IwKxBBSW9FIjyA==\"\n        }\n    }\n}\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.720703125,
          "content": "{\n    \"name\": \"staticrypt\",\n    \"version\": \"3.5.1\",\n    \"description\": \"Password protect a static HTML file without a backend - StatiCrypt uses AES-256 wiht WebCrypto to encrypt your input with your long password and put it in a HTML file with a password prompt that can decrypted in-browser (client side).\",\n    \"main\": \"index.js\",\n    \"files\": [\n        \"/cli\",\n        \"/lib\"\n    ],\n    \"bin\": {\n        \"staticrypt\": \"./cli/index.js\"\n    },\n    \"dependencies\": {\n        \"dotenv\": \"^16.0.3\",\n        \"yargs\": \">=10.0.3\"\n    },\n    \"engines\": {\n        \"node\": \">=16.0.0\"\n    },\n    \"funding\": {\n        \"type\": \"github\",\n        \"url\": \"https://github.com/robinmoisson/staticrypt?sponsor=1\"\n    },\n    \"author\": \"Robin Moisson (https://github.com/robinmoisson)\",\n    \"contributors\": [\n        \"Aaron Coplan (https://github.com/AaronCoplan)\",\n        \"Adam Hull (https://github.com/hurrymaplelad)\"\n    ],\n    \"license\": \"MIT\",\n    \"scripts\": {\n        \"build\": \"bash ./scripts/build.sh\",\n        \"format\": \"prettier --write \\\"**/*.{js,json,html}\\\"\",\n        \"prepare\": \"husky\"\n    },\n    \"lint-staged\": {\n        \"**/*.{js,json,html}\": [\n            \"prettier --write\"\n        ]\n    },\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"git+https://github.com/robinmoisson/staticrypt.git\"\n    },\n    \"keywords\": [\n        \"static\",\n        \"html\",\n        \"password\",\n        \"protected\",\n        \"encrypted\",\n        \"encryption\",\n        \"crypto\",\n        \"webcrypto\"\n    ],\n    \"bugs\": {\n        \"url\": \"https://github.com/robinmoisson/staticrypt/issues\"\n    },\n    \"homepage\": \"https://github.com/robinmoisson/staticrypt\",\n    \"devDependencies\": {\n        \"husky\": \"^9.1.6\",\n        \"lint-staged\": \"^15.2.10\",\n        \"prettier\": \"^2.8.8\"\n    }\n}\n"
        },
        {
          "name": "preview.png",
          "type": "blob",
          "size": 14.8876953125,
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}