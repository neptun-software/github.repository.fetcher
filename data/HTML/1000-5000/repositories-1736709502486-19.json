{
  "metadata": {
    "timestamp": 1736709502486,
    "page": 19,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "gfxfundamentals/webgl-fundamentals",
      "stars": 4742,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".eslintrc.js",
          "type": "blob",
          "size": 2.32421875,
          "content": "'use strict';\n\nmodule.exports = {\n  'env': {\n    'browser': true,\n    'es6': true,\n  },\n  'parserOptions': {\n    'ecmaVersion': 2019,\n  },\n  'plugins': [\n    'eslint-plugin-html',\n    'eslint-plugin-optional-comma-spacing',\n    'eslint-plugin-one-variable-per-var',\n    'eslint-plugin-require-trailing-comma',\n  ],\n  'extends': 'eslint:recommended',\n  'rules': {\n    'no-alert': 2,\n    'no-array-constructor': 2,\n    'no-caller': 2,\n    'no-catch-shadow': 2,\n    'no-const-assign': 2,\n    'no-labels': 2,\n    'no-eval': 2,\n    'no-extend-native': 2,\n    'no-extra-bind': 2,\n    'no-implied-eval': 2,\n    'no-iterator': 2,\n    'no-label-var': 2,\n    'no-lone-blocks': 2,\n    'no-loop-func': 2,\n    'no-multi-str': 2,\n    'no-native-reassign': 2,\n    'no-new': 2,\n    'no-new-func': 2,\n    'no-new-object': 2,\n    'no-new-wrappers': 2,\n    'no-octal-escape': 2,\n    'no-process-exit': 2,\n    'no-proto': 2,\n    'no-return-assign': 2,\n    'no-script-url': 2,\n    'no-sequences': 2,\n    'no-shadow-restricted-names': 2,\n    'no-spaced-func': 2,\n    'no-trailing-spaces': 2,\n    'no-undef-init': 2,\n    'no-underscore-dangle': 2,\n    'no-unused-expressions': 2,\n    'no-use-before-define': 2,\n    'no-with': 2,\n    'consistent-return': 2,\n    'curly': [2, 'all'],\n    'no-extra-parens': [2, 'functions'],\n    'eqeqeq': 2,\n    'new-cap': 2,\n    'new-parens': 2,\n    'semi-spacing': [2, {'before': false, 'after': true}],\n    'space-infix-ops': 2,\n    'space-unary-ops': [2, { 'words': true, 'nonwords': false }],\n    'strict': [2, 'global'],\n    'yoda': [2, 'never'],\n\n    'brace-style': [2, '1tbs', { 'allowSingleLine': false }],\n    'camelcase': [0],\n    'comma-spacing': 0,\n    'comma-dangle': 0,\n    'comma-style': [2, 'last'],\n    'dot-notation': 0,\n    'eol-last': [0],\n    'global-strict': [0],\n    'key-spacing': [0],\n    'no-comma-dangle': [0],\n    'no-irregular-whitespace': 2,\n    'no-multi-spaces': [0],\n    'no-obj-calls': 2,\n    'no-shadow': [0],\n    'no-undef': [0],\n    'no-unreachable': 2,\n    'one-variable-per-var/one-variable-per-var': [2],\n    'optional-comma-spacing/optional-comma-spacing': [2, {'after': true}],\n    'quotes': [2, 'single'],\n    'require-trailing-comma/require-trailing-comma': [2],\n    'semi': [2, 'always'],\n    'space-before-function-paren': [2, 'never'],\n    'keyword-spacing': [1, {'before': true, 'after': true, 'overrides': {}} ],\n  },\n};\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.244140625,
          "content": "* text eol=lf\n\n*.md text\n*.css text\n*.js text\n*.html text\n\n*.jpeg binary\n*.dds binary\n*.wasm binary\n*.tga binary\n*.glb binary\n*.bin binary\n*.psd binary\n*.afdesign binary\n*.png binary\n*.jpg binary\n*.gif binary\n*.eot binary\n*.ttf binary\n*.woff binary\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0791015625,
          "content": "*.pyc\n.DS_Store\nnode_modules\nout\npackage-lock.json\nwebglfundamentals.check.json\n\n"
        },
        {
          "name": ".npmrc",
          "type": "blob",
          "size": 0.0166015625,
          "content": "save-prefix = \"\"\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "3rdparty",
          "type": "tree",
          "content": null
        },
        {
          "name": "CNAME",
          "type": "blob",
          "size": 0.0224609375,
          "content": "webglfundamentals.org\n\n"
        },
        {
          "name": "Gruntfile.js",
          "type": "blob",
          "size": 5.130859375,
          "content": "/*eslint-env node*/\n\n'use strict';\n\nprocess.on('unhandledRejection', up => {\n  throw up;\n});\n\nconst fs = require('fs');\nconst path = require('path');\nconst liveEditor = require('@gfxfundamentals/live-editor');\nconst liveEditorPath = path.dirname(require.resolve('@gfxfundamentals/live-editor'));\n\nmodule.exports = function(grunt) {\n\n  require('load-grunt-tasks')(grunt);\n\n  const s_ignoreRE = /\\.(md|py|sh|enc)$/i;\n  function noMds(filename) {\n    return !s_ignoreRE.test(filename);\n  }\n\n  const s_isMdRE = /\\.md$/i;\n  function mdsOnly(filename) {\n    return s_isMdRE.test(filename);\n  }\n\n  function notFolder(filename) {\n    return !fs.statSync(filename).isDirectory();\n  }\n\n  function noMdsNoFolders(filename) {\n    return noMds(filename) && notFolder(filename);\n  }\n\n  grunt.initConfig({\n    eslint: {\n      lib: {\n        src: [\n          'webgl/resources/webgl-utils.js',\n          'webgl/resources/lessons-helper.js',\n          'webgl/resources/primitives.js',\n          'webgl/resources/2d-math.js',\n          'webgl/resources/3d-math.js',\n        ],\n      },\n      examples: {\n        src: [\n          'webgl/*.html',\n          '!webgl/webgl-qna-*.html',\n        ],\n      },\n      diagram: {\n        src: [\n          'webgl/lessons/resources/webgl-state-diagram/*.js',\n        ],\n      },\n    },\n    jsdoc: {\n      docs: {\n        src: [\n          'webgl/resources/primitives.js',\n          'webgl/resources/webgl-2d-math.js',\n          'webgl/resources/webgl-3d-math.js',\n          'webgl/resources/webgl-utils.js',\n          'docs.md',\n        ],\n        options: {\n          destination: 'out/docs',\n          configure: 'build/conf/jsdoc.conf.json',\n          template: './node_modules/minami',\n        },\n      },\n    },\n    copy: {\n      main: {\n        files: [\n          { expand: false, src: '*', dest: 'out/', filter: noMdsNoFolders, },\n          { expand: true, cwd: `${liveEditor.monacoEditor}/`, src: 'min/**', dest: 'out/monaco-editor/', nonull: true, },\n          { expand: true, cwd: `${liveEditorPath}/src/`, src: '**', dest: 'out/webgl/resources/', nonull: true, },\n          { expand: true, src: 'webgl/**', dest: 'out/', filter: noMds, },\n          { expand: true, src: '3rdparty/**', dest: 'out/', },\n        ],\n      },\n    },\n    clean: [\n      'out/**/*',\n    ],\n    buildlesson: {\n      main: {\n        files: [],\n      },\n    },\n    watch: {\n      main: {\n        files: [\n          'webgl/**',\n          '3rdparty/**',\n          'node_modules/@gfxfundamentals/live-editor/src/**',\n        ],\n        tasks: ['copy'],\n        options: {\n          spawn: false,\n        },\n      },\n      lessons: {\n        files: [\n          'webgl/lessons/**/webgl*.md',\n        ],\n        tasks: ['buildlesson'],\n        options: {\n          spawn: false,\n        },\n      },\n    },\n  });\n\n  let changedFiles = {};\n  const onChange = grunt.util._.debounce(function() {\n    grunt.config('copy.main.files', Object.keys(changedFiles).filter(noMds).map((file) => {\n      const copy = {\n        src: file,\n        dest: 'out/',\n      };\n      if (file.indexOf('live-editor') >= 0) {\n        copy.cwd = `${path.dirname(file)}/`;\n        copy.src = path.basename(file);\n        copy.expand = true;\n        copy.dest = 'out/webgl/resources/';\n      }\n      return copy;\n    }));\n    grunt.config('buildlesson.main.files', Object.keys(changedFiles).filter(mdsOnly).map((file) => {\n      return {\n        src: file,\n      };\n    }));\n    changedFiles = {};\n  }, 200);\n  grunt.event.on('watch', function(action, filepath) {\n    changedFiles[filepath] = action;\n    onChange();\n  });\n\n  const buildSettings = {\n    outDir: 'out',\n    baseUrl: 'https://webglfundamentals.org',\n    rootFolder: 'webgl',\n    lessonGrep: 'webgl*.md',\n    siteName: 'WebGLFundamentals',\n    siteThumbnail: 'webglfundamentals.jpg',  // in rootFolder/lessons/resources\n    templatePath: 'build/templates',\n    owner: 'gfxfundamentals',\n    repo: 'webgl-fundamentals',\n    thumbnailOptions: {\n      thumbnailBackground: 'webglfundamentals.jpg',\n      text: [\n        {\n          font: '100px lesson-font',\n          verticalSpacing: 100,\n          offset: [100, 120],\n          textAlign: 'left',\n          shadowOffset: [15, 15],\n          strokeWidth: 15,\n          textWrapWidth: 1000,\n        },\n      ],\n    },\n  };\n\n  // just the hackiest way to get this working.\n  grunt.registerMultiTask('buildlesson', 'build a lesson', function() {\n    const filenames = new Set();\n    this.files.forEach((files) => {\n      files.src.forEach((filename) => {\n        filenames.add(filename);\n      });\n    });\n    const buildStuff = require('@gfxfundamentals/lesson-builder');\n    const settings = Object.assign({}, buildSettings, {\n      filenames,\n    });\n    const finish = this.async();\n    buildStuff(settings).finally(finish);\n  });\n\n  grunt.registerTask('buildlessons', function() {\n    const buildStuff = require('@gfxfundamentals/lesson-builder');\n    const finish = this.async();\n    buildStuff(buildSettings).finally(finish);\n  });\n\n  grunt.registerTask('build', ['clean', 'copy', 'buildlessons']);\n  grunt.registerTask('buildwatch', ['build', 'watch']);\n  grunt.registerTask('pre-push', ['eslint']);\n\n  grunt.registerTask('default', ['eslint', 'build', 'jsdoc']);\n};\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.501953125,
          "content": "# Copyright 2021 GFXFundamentals.\n# All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are\n# met:\n#\n#     * Redistributions of source code must retain the above copyright\n# notice, this list of conditions and the following disclaimer.\n#     * Redistributions in binary form must reproduce the above\n# copyright notice, this list of conditions and the following disclaimer\n# in the documentation and/or other materials provided with the\n# distribution.\n#     * Neither the name of GFXFundamentals. nor the names of his\n# contributors may be used to endorse or promote products derived from\n# this software without specific prior written permission.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.3798828125,
          "content": "WebGL Fundamentals\n===================\n\nThis is [a series of lessons or tutorials about WebGL](https://webglfundamentals.org/).\n\nUnlike most WebGL lessons these are not based off of OpenGL.\nOpenGL is 20 years old. The lessons of OpenGL don't match well with WebGL.\nThe APIs have changed too much. The ideas of OpenGL and OpenGL tutorials\nare out of date with WebGL, OpenGL ES 2.0 and the land of shaders.\n\nI would argue that WebGL is actually a very simple API. What makes it\nappear complicated is the way in which it's used. The complications\nare added by the programmer. WebGL itself is simple.\n\nThese lessons try to show that simplicity as well as teach the\nfundamentals of 2D math and 3D math so readers can hopefully\nhave an easier time writing their own WebGL programs and\nunderstanding the complexity that other programmers pile on\ntop of simple WebGL.\n\nThis is work in progress. Feel free to contribute.\n\n## Contributing\n\nOf course bug fixes are always welcome.\n\nIf you'd like to write a new article please try to always take\none step at a time. Don't do 2 or more things in a single step.\nExplain any new math in the simplest terms possible. Ideally\nwith diagrams where possible.\n\n### Translating\n\nEach translation goes in a folder under `webgl/lessons/<country-code>`.\n\nRequired files are\n\n    langinfo.hanson\n    index.md\n    toc.html\n\n#### `langinfo.hanson`\n\nDefines various language specific options.\n[Hanson](https://github.com/timjansen/hanson) is a JSON like format but allows comments.\n\nCurrent fields are\n\n    {\n      // The language (will show up in the language selection menu)\n      language: 'English',\n\n      // Phrase that appears under examples\n      defaultExampleCaption: \"click here to open in a separate window\",\n\n      // Title that appears on each page\n      title: 'WebGL Fundamentals',\n\n      // Basic description that appears on each page\n      description: 'Learn WebGL from the ground up. No magic',\n\n      // Link to the language root.\n      link: 'https://webglfundamentals.org/webgl/lessons/ja',  // replace `ja` with country code\n\n      // html that appears after the article and before the comments\n      commentSectionHeader: '<div>Issue/Bug? <a href=\"https://github.com/gfxfundamentals/webgl-fundamentals/issues\">Create an issue on github</a>.</div>',\n\n      // markdown that appears for untranslated articles\n      missing: \"Sorry this article has not been translated yet. [Translations Welcome](https://github.com/gfxfundamentals/webgl-fundamentals)! 😄\\n\\n[Here's the original English article for now]({{{origLink}}}).\",\n\n      // the phrase \"Table of Contents\"\n      toc: \"Table of Contents\",\n\n      // translation of categories for table of contents\n      categoryMapping: {\n        'fundamentals': \"Fundamentals\",\n        'image-processing': \"Image Processing\",\n        'matrices': \"2D translation, rotation, scale, matrix math\",\n        '3d': \"3D\",\n        'lighting': \"Lighting\",\n        'organization': \"Structure and Organization\",\n        'geometry': \"Geometry\",\n        'textures': \"Textures\",\n        'rendertargets': \"Rendering To A Texture\",\n        '2d': \"2D\",\n        'text': \"Text\",\n        'misc': \"Misc\",\n        'reference': \"Reference\",\n      },\n\n    }\n\n#### `index.md`\n\nThis is the template for the main page for each language\n\n#### `toc.html`\n\nThis is template for the table of contents for the language.\nIt is included on both the index and on each article. The only\nparts not auto-generated are the links ending links which\nyou can translate if you want to.\nThe build system will create a placeholder for every English article for which there is no corresponding article in that language. It will be filled with the `missing` message from above.\n\n#### `lang.css`\n\nThis is included if and only if it exists. I'd strongly prefer not to have to\nuse it. In particular I don't want people to get into arguments about fonts\nbut basically it's a way to choose the fonts per language. You should only set\nthe variables that are absolutely needed. Example\n\n```css\n/* lessons/ko/lang.css */\n\n/* Only comment in overrides as absolutely necessary! */\n:root {\n  --article-font-family: \"best font for korean article text\";\n  --headline-font-family: \"best font for korean headlines\";\n  /* a block of code */\n  /* --code-block-font-family: \"Lucida Console\", Monaco, monospace; */\n  /* a word in a sentence */\n  /* --code-font-family: monospace; */\n}\n```\n\nNotice 2 settings are not changed. It seems unlikely to me that code would\nneed a different font per language.\n\nPS: While we're here, I love code fonts with ligatures but they seem like a bad\nidea for a tutorial site because the ligatures hide the actual characters needed\nso please don't ask for or use a ligature code font here.\n\n#### Translation notes\n\nThe build process will make a placeholder html file for each article that has an English .md file in\n`webgl/lessons` but no corresponding .md file for the language. This is to make it easy to include\nlinks in an article that links to another article but that other article has not yet been translated.\nThis way you don't have to go back and fix already translated articles. Just translate one article\nat a time and leave the links as is. They'll link to placeholders until someone translates the missing\narticles.\n\nArticles have front matter at the top\n\n```\nTitle: Localized Title of article\nDescription: Localized description of article (used in RSS and social media tags)\nTOC: Localized text for Table of Contents\n```\n\n**DO NOT CHANGE LINKS** : For example a link to a local resources might look like\n\n    [text](link)\n\nor\n\n    <img src=\"somelink\">\n\nWhile you can add query parameters (see below) do not add \"../\" to try to make the link relative to the\n.md file. Links should stay as though the article exists at the same location as the original English.\n\n### UI localization\n\nSome of the diagrams allow passing translations for the UI and other text.\n\nFor example if there is a slider named \"rotation\"\nyou can add \"?ui-rotation=girar\" at the end of the URL for the diagram. For 2 or more translations\nseparate them with a `&`. Certain characters are disallowed in URLs like `=`, `#`, `&` etc. For those\nuse their uri encoding.\n\nFor diagram labels you'll have to look inside the code. For example for the\ndirectional lighting diagram near the start of the code it looks like this\n\n```\nconst lang = {\n  lightDir: opt.lightDir || \"light direction\",\n  dot: opt.dot || \"dot(reverseLightDirection,surfaceDirection) = \",\n  surface1: opt.surface1 || \"surface\",\n  surface2: opt.surface2 || \"direction\",\n};\n```\n\nWhich means you can localize the labels like this\n\n```\n{{{diagram url=\"resources/directional-lighting.html?lightDir=光線方向&surface1=オブジェクト&surface2=表面方向&dot=dot(光線反対方向,表面方向)%20%3D%20&ui-rotation=角度\" caption=\"方向を回転してみて\" width=\"500\" height=\"400\"}}}\n```\n\nFor testing, reference the sample directly in your browser. For example\n\n[`http://localhost:8080/webgl/lessons/resources/directional-lighting.html?lightDir=光線方向&surface1=オブジェクト&surface2=表面方向&dot=dot(光線反対方向,表面方向)%20%3D%20&ui-rotation=角度`](https://webglfundamentals.org/webgl/lessons/resources/directional-lighting.html?lightDir=光線方向&surface1=オブジェクト&surface2=表面方向&dot=dot(光線反対方向,表面方向)%20%3D%20&ui-rotation=角度)\n\n### To build\n\nThe site is built into the `out` folder\n\nSteps\n\n    git clone https://github.com/gfxfundamentals/webgl-fundamentals.git\n    cd webgl-fundamentals\n    npm install\n    npm run build\n    npm start\n\nnow open your browser to `http://localhost:8080`\n\n### Continuous build\n\nYou can run `npm run watch` after you've built to get continuous building.\nOnly the article .md files and files that are normally copied are watched.\nThe index files (the top page with the table of contents) is not regenerated\nnor does changing a template rebuild all the articles.\n\n#### Build options\n\nThis is mostly for debugging `build.js`. Since it takes a while to process all the files\nyou can set `ARTICLE_FILTER` to a substring of the filenames to process. For example\n\n    ARTICLE_FILTER=rotation npm run build\n\nWill build the site as though only articles with `rotation` in their filename exist.\n\n## TO DO\n\n### A list of articles I'd like to write or see written\n\n*   lighting\n    *   normal maps\n*   geometry\n    *   plane, cube, sphere, cone, disc, torus\n        *   lines vs triangles\n        *   vertex colors\n    *   other\n    *   pre-process (don't load .obj, .dae, .fbx etc at runtime)\n    *   pre-optimize (texture atlas, sizes, combine meshes, etc...)\n*   animation\n    *   blendshapes\n    *   hierarchical animation\n*   debugging\n    *   debugging JS WebGL\n        *   example (https://goo.gl/8U5whT)\n        *   CHECK THE GAWD DAMN CONSOLE!\n            *   actually read the error message\n            *   understand it.\n                *   INVALID_ENUM means one of your gl.XXX values is not valid period\n                *   INVALID_VALUE means one of the int or float values is probably off\n                *   INVALID_OPERATION means something you tried to do won't work for the given state\n                *   texture not renderable\n                *   attribute out of range\n                *   check your framebuffers\n                *   check your extensions\n        *   make shorter samples (MCVE)\n            *   remove any code you don't need\n            *   get rid of CSS\n            *   get rid of HTML\n            *   consider using a POINT (no attributes needed)\n            *   don't use images if they are not relevant. Use a canvas or a single and double pixel texture\n            *   While creating this MCVE you'll often find the bug\n    *   debugging a shader\n        *   set fragment shader to solid color.\n        *   render normals\n        *   render texcoords\n        *   render cube/sphere/plane\n*   text\n    *   glyph cache\n*   post processing\n    *   DOF\n    *   glow\n    *   light rays\n    *   RGB glitch, CRT distortion, scanlines\n    *   color mapping/tone mapping\n*   Creative coding\n    *   color palettes\n    *   tilemaps\n    *   generated geometry\n    *   histogram\n    *   particles\n    *   toon/ramp shading\n    *   procedural textures\n*   code organization\n    *   scene graph\n        *   putting lights and camera in scene graph\n*   Engine Creation\n    *   culling\n        *   frustum culling\n        *   grid culling\n        *   quad tree / oct tree\n        *   portals (is this still a thing?)\n        *   PVS\n    *   materials\n    *   lighting DB\n*   Physically based rendering\n\n\n"
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "contributors.md",
          "type": "blob",
          "size": 0.0146484375,
          "content": "<!-- empty -->\n"
        },
        {
          "name": "docs.md",
          "type": "blob",
          "size": 1.763671875,
          "content": "WebGLFundamentals API Docs\n==========================\n\nThese docs are an attempt to help explain some of the helper functions\nused in the articles on [webglfundamentals.org](https://webglfundamentals.org).\n\nWebGL is a very low-level API and so using it is very verbose. To draw a simple\nlighted cube can easily require 50-100 WebGL calls. Calls to create buffers\nand put data in them. Calls to create that data in the first place. Calls to\ncreate GLSL shader programs. Calls to read attribute and uniform locations. Calls\nto create textures, bind textures to texture units, bind buffers to attributes,\nand set uniforms.\n\nAt some point this complexity makes it hard to concentrate on the topic at hand\nand so helper functions can [reduce the number of lines needed to focus on the\ntask at hand](/webgl/lessons/webgl-less-code-more-fun.html).\n\n[Functions for reducing the amount of code can be found here](/docs/module-webgl-utils.html).\n\nIf you're using WebGL to do 2D or 3D you'll likely need many math helper functions\nin JavaScript as well.\n\n[Functions for 2D math are here](/docs/module-webgl-2d-math.html).\n\n[Functions for 3D math are here](/docs/module-webgl-3d-math.html).\n\nFinally WebGL requires vertices to operate on. [Functions to generate vertices\nfor common shapes like spheres, cubes, planes, cones, etc can be found here](/docs/module-primitives.html).\n\n# JSDoc3 Plea\n\nThese docs are generated with [JSDoc3](https://usejsdoc.org/). I find them very confusing to look at\nand in some places frustratingly verbose. If you have any experience with JSDoc3 and know how to\nmake the docs more approachable and useful please [submit a pull request](https://github.com/gfxfundamentals/webgl-fundamentals)\nor [file an issue with details](https://github.com/gfxfundamentals/webgl-fundamentals/issues).\n\n"
        },
        {
          "name": "icon.png",
          "type": "blob",
          "size": 2.982421875,
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.732421875,
          "content": "{\n  \"name\": \"webgl-fundamentals\",\n  \"version\": \"0.0.0\",\n  \"description\": \"Some WebGL Tutorials designed for real WebGL and not 20yr old OpenGL\",\n  \"main\": \"index.js\",\n  \"devDependencies\": {\n    \"@gfxfundamentals/lesson-builder\": \"git+https://github.com/gfxfundamentals/lesson-builder.git#v1.17.5\",\n    \"@gfxfundamentals/live-editor\": \"github:gfxfundamentals/live-editor#v1.3.1\",\n    \"eslint-plugin-google-camelcase\": \"0.0.2\",\n    \"eslint-plugin-html\": \"6.1.1\",\n    \"eslint-plugin-one-variable-per-var\": \"0.0.3\",\n    \"eslint-plugin-optional-comma-spacing\": \"0.0.4\",\n    \"eslint-plugin-require-trailing-comma\": \"0.0.1\",\n    \"grunt\": \"1.3.0\",\n    \"grunt-cli\": \"1.3.2\",\n    \"grunt-contrib-clean\": \"2.0.0\",\n    \"grunt-contrib-copy\": \"1.0.0\",\n    \"grunt-contrib-watch\": \"1.1.0\",\n    \"grunt-eslint\": \"23.0.0\",\n    \"grunt-jsdoc\": \"2.4.1\",\n    \"ld-check-dependencies\": \"1.2.1\",\n    \"load-grunt-tasks\": \"5.1.0\",\n    \"minami\": \"1.2.3\",\n    \"servez\": \"1.11.0\"\n  },\n  \"scripts\": {\n    \"build\": \"ld-check-dependencies && grunt\",\n    \"build-ci\": \"grunt\",\n    \"buildlessons\": \"grunt buildlessons\",\n    \"watch\": \"ld-check-dependencies && grunt buildwatch\",\n    \"watch-no-check\": \"grunt buildwatch\",\n    \"pre-push\": \"ld-check-dependencies && grunt pre-push\",\n    \"pre-build\": \"grunt pre-push\",\n    \"start\": \"servez out\",\n    \"test\": \"check-all-the-errors --follow-links=both --output=webglfundamentals.check.json out \\\"*.html\\\"\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/gfxfundamentals/webgl-fundamentals.git\"\n  },\n  \"keywords\": [\n    \"WebGL\"\n  ],\n  \"author\": \"GFXFundamentals\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/gfxfundamentals/webgl-fundamentals/issues\"\n  },\n  \"homepage\": \"https://github.com/gfxfundamentals/webgl-fundamentals\"\n}\n"
        },
        {
          "name": "robots.txt",
          "type": "blob",
          "size": 0.0517578125,
          "content": "Sitemap: https://webglfundamentals.org/sitemap.xml\n\n\n"
        },
        {
          "name": "source_assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "toc.hanson",
          "type": "blob",
          "size": 2.58203125,
          "content": "{\n  \"fundamentals\": [\n    \"webgl-fundamentals.md\",\n    \"webgl-how-it-works.md\",\n    \"webgl-shaders-and-glsl.md\",\n    \"webgl-state-diagram.md\",\n  ],\n  \"image-processing\": [\n    \"webgl-image-processing.md\",\n    \"webgl-image-processing-continued.md\",\n  ],\n  \"matrices\": [\n    \"webgl-2d-translation.md\",\n    \"webgl-2d-rotation.md\",\n    \"webgl-2d-scale.md\",\n    \"webgl-2d-matrices.md\",\n  ],\n  \"3d\": [\n    \"webgl-3d-orthographic.md\",\n    \"webgl-3d-perspective.md\",\n    \"webgl-3d-camera.md\",\n  ],\n  \"lighting\": [\n    \"webgl-3d-lighting-directional.md\",\n    \"webgl-3d-lighting-point.md\",\n    \"webgl-3d-lighting-spot.md\",\n  ],\n  \"organization\": [\n    \"webgl-less-code-more-fun.md\",\n    \"webgl-drawing-multiple-things.md\",\n    \"webgl-scene-graph.md\",\n  ],\n  \"geometry\": [\n    \"webgl-3d-geometry-lathe.md\",\n    \"webgl-load-obj.md\",\n    \"webgl-load-obj-w-mtl.md\",\n  ],\n  \"textures\": [\n    \"webgl-3d-textures.md\",\n    \"webgl-data-textures.md\",\n    \"webgl-2-textures.md\",\n    \"webgl-cors-permission.md\",\n    \"webgl-3d-perspective-correct-texturemapping.md\",\n    \"webgl-planar-projection-mapping.md\",\n  ],\n  \"rendertargets\": [\n    \"webgl-render-to-texture.md\",\n  ],\n  \"shadows\": [\n    \"webgl-shadows.md\",\n  ],\n  \"techniques\": {\n    \"2d\": [\n      \"webgl-2d-drawimage.md\",\n      \"webgl-2d-matrix-stack.md\",\n      \"webgl-sprites.md\",\n    ],\n    \"3d\": [\n      \"webgl-cube-maps.md\",\n      \"webgl-environment-maps.md\",\n      \"webgl-skybox.md\",\n      \"webgl-skinning.md\",\n      \"webgl-fog.md\",\n      \"webgl-picking.md\",\n    ],\n    \"text\": [\n      \"webgl-text-html.md\",\n      \"webgl-text-canvas2d.md\",\n      \"webgl-text-texture.md\",\n      \"webgl-text-glyphs.md\",\n    ],\n    \"textures\": [\n      \"webgl-ramp-textures.md\",\n    ],\n    \"gpgpu\": [\n      \"webgl-gpgpu.md\",\n    ],\n  },\n  \"tips\": [\n    \"webgl-smallest-programs.md\",\n    \"webgl-drawing-without-data.md\",\n    \"webgl-shadertoy.md\",\n    \"webgl-pulling-vertices.md\",\n  ],\n  \"optimization\": [\n    \"webgl-indexed-vertices.md\",\n    \"webgl-instanced-drawing.md\",\n  ],\n  \"misc\": [\n    \"webgl-setup-and-installation.md\",\n    \"webgl-boilerplate.md\",\n    \"webgl-resizing-the-canvas.md\",\n    \"webgl-animation.md\",\n    \"webgl-points-lines-triangles.md\",\n    \"webgl-multiple-views.md\",\n    \"webgl-visualizing-the-camera.md\",\n    \"webgl-and-alpha.md\",\n    \"webgl-2d-vs-3d-library.md\",\n    \"webgl-anti-patterns.md\",\n    \"webgl-matrix-vs-math.md\",\n    \"webgl-precision-issues.md\",\n    \"webgl-tips.md\",\n    \"webgl-cross-platform-issues.md\",\n    \"webgl-qna.md\",\n  ],\n  \"reference\": [\n    \"webgl-attributes.md\",\n    \"webgl-texture-units.md\",\n    \"webgl-framebuffers.md\",\n    \"webgl-readpixels.md\",\n    \"webgl-references.md\",\n  ],\n}"
        },
        {
          "name": "todo.md",
          "type": "blob",
          "size": 0.798828125,
          "content": "TO DO\n=====\n\n* Make build not dependent on Node 8.4\n\n  The JSDOC template is broken on Node 8.5\n  Maybe switch to the same template as twgl.\n  A quick try and that broke too though.\n  Not clear why.\n\n* Use TWGL\n\n  There's no plans to maintain the non-twgl lib\n\n* Consider switching everything to using VAOs\n\n  VAOs are just better period but to really use them\n  correctly requires more organization. You really\n  need to specify attribute locations so the\n  same VAO can be used with muliple shaders.\n\n* Consider switching everything to use template strings\n\n  Plus: Template strings are less confusing\n\n  Minus: Template strings can not as easily be formatted?\n\n  A good editor could look at the type of script and\n  switch modes. I suppose a good editor could also\n  look for a comment or #version as well though\n\n\n"
        },
        {
          "name": "webgl",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}