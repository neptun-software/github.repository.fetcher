{
  "metadata": {
    "timestamp": 1736709492558,
    "page": 7,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rapid7/metasploitable3",
      "stars": 4837,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.134765625,
          "content": ".vagrant/\npacker_cache/\npacker/builds/\nresources/drivers/\nresources/windows_pre_downloads/\n*.vfd\n*.exe\n*.msi\n*.msu\n*.DS_Store\n*.box\n*.iso\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 1.7412109375,
          "content": "Redistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright notice,\n    this list of conditions and the following disclaimer.\n\n    * Redistributions in binary form must reproduce the above copyright notice,\n    this list of conditions and the following disclaimer in the documentation\n    and/or other materials provided with the distribution.\n\n    * Neither the name of Rapid7, Inc. nor the names of its contributors\n    may be used to endorse or promote products derived from this software\n    without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n================================================================================\n\nMetasploitable3 is provided under the 3-clause BSD license above.\n\nThe copyright on this package is held by Rapid7, Inc.\n\nThis license does not apply to several components within the Metasploitable3 source tree.  For more details see the LICENSE file.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 3.5166015625,
          "content": "Format: http://www.debian.org/doc/packaging-manuals/copyright-format/1.0/\nSource: http://www.metasploit.com/\n\nFiles: *\nLicense: BSD-3-clause\n\n# Metasploitable3 is provided under the 3-clause BSD license provided\n# at the end of this file.\n#\n# The copyright on this package is held by Rapid7, Inc.\n#\n# This license does not apply to third-party components detailed below.\n#\n# Last updated: 2016-Sept-7\n#\n\nUnaltered Files: scripts/installs/disable-auto-update.bat scripts/installs/enable-rdp.bat scripts/installs/openssh.ps1 scripts/installs/vm-guest-tools.bat scripts/configs/disable-auto-logon.bat scripts/configs/microsoft-updates.bat scripts/configs/win-updates.ps1 vagrantfile-windows_2008_42.template\nCopyright: 2013-2014, Joe Fitzgerald\nLicense: MIT\n\nAltered Files: windows_2008_r2.json answer_files/2008_r2/Autounattend.xml\nOriginal work Copyright: 2013-2014, Joe Fitzgerald\nLicense: MIT\n\nFiles: resources/jenkins/jenkins.war\nCopyright: 2004-, Kohsuke Kawaguchi, Sun Microsystems, Inc., and a number of other of contributors\nLicense: MIT\n\n\nLicense: BSD-3-clause\n Redistribution and use in source and binary forms, with or without modification,\n are permitted provided that the following conditions are met:\n .\n     * Redistributions of source code must retain the above copyright notice,\n     this list of conditions and the following disclaimer.\n .\n     * Redistributions in binary form must reproduce the above copyright notice,\n     this list of conditions and the following disclaimer in the documentation\n     and/or other materials provided with the distribution.\n .\n     * Neither the name of Rapid7, Inc. nor the names of its contributors\n     may be used to endorse or promote products derived from this software\n     without specific prior written permission.\n .\n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nLicense: MIT\n Permission is hereby granted, free of charge, to any person obtaining\n a copy of this software and associated documentation files (the\n \"Software\"), to deal in the Software without restriction, including\n without limitation the rights to use, copy, modify, merge, publish,\n distribute, sublicense, and/or sell copies of the Software, and to\n permit persons to whom the Software is furnished to do so, subject to\n the following conditions:\n .\n The above copyright notice and this permission notice shall be\n included in all copies or substantial portions of the Software.\n .\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.865234375,
          "content": "# Metasploitable3\n\nMetasploitable3 is a VM that is built from the ground up with a large amount of security vulnerabilities. It is intended to be used as a target for testing exploits with [metasploit](https://github.com/rapid7/metasploit-framework).\n\nMetasploitable3 is released under a BSD-style license. See COPYING for more details.\n\n## Quick-start\n\nTo use the prebuilt images provided at https://app.vagrantup.com/rapid7/ create a new local metasploitable workspace:\n\nLinux users:\n```\nmkdir metasploitable3-workspace\ncd metasploitable3-workspace\ncurl -O https://raw.githubusercontent.com/rapid7/metasploitable3/master/Vagrantfile && vagrant up\n```\nWindows users:\n```\nmkdir metasploitable3-workspace\ncd metasploitable3-workspace\nInvoke-WebRequest -Uri \"https://raw.githubusercontent.com/rapid7/metasploitable3/master/Vagrantfile\" -OutFile \"Vagrantfile\"\nvagrant up\n```\n\nOr clone this repository and build your own box.\n\n## Building Metasploitable 3\nSystem Requirements:\n* OS capable of running all of the required applications listed below\n* VT-x/AMD-V Supported Processor recommended\n* 65 GB Available space on drive\n* 4.5 GB RAM\n\nRequirements:\n\n* [Packer](https://www.packer.io/intro/getting-started/install.html)\n* [Vagrant](https://www.vagrantup.com/docs/installation/)\n* [Vagrant Reload Plugin](https://github.com/aidanns/vagrant-reload#installation)\n* [VirtualBox](https://www.virtualbox.org/wiki/Downloads), libvirt/qemu-kvm, or vmware (paid license required), or parallels (paid license required)\n* Internet connection\n\n### To build automatically:\n\n1. - On **Linux/OSX** run `./build.sh windows2008` to build the Windows box or `./build.sh ubuntu1404` to build the Linux box. If /tmp is small, use `TMPDIR=/var/tmp ./build.sh ...` to store temporary packer disk images under /var/tmp.\n   - On **Windows**, open powershell terminal and run `.\\build.ps1 windows2008` to build the Windows box or `.\\build.ps1 ubuntu1404` to build the Linux box. If no option is passed to the script i.e. `.\\build.ps1`, then both the boxes are built.\n2. If both the boxes were successfully built, run `vagrant up` to start both. To start any one VM, you can use:\n    - `vagrant up ub1404` : to start the Linux box\n    - `vagrant up win2k8` : to start the Windows box\n3. When this process completes, you should be able to open the VM within VirtualBox and login. The default credentials are U: `vagrant` and P: `vagrant`.\n\n### To build manually:\n\n1. Clone this repo and navigate to the main directory.\n2. Build the base VM image by running `packer build --only=<provider> ./packer/templates/windows_2008_r2.json` where `<provider>` is your preferred virtualization platform. Currently `virtualbox-iso`, `qemu`, and `vmware-iso` providers are supported. This will take a while the first time you run it since it has to download the OS installation ISO.\n3. After the base Vagrant box is created you need to add it to your Vagrant environment. This can be done with the command `vagrant box add packer/builds/windows_2008_r2_*_0.1.0.box --name=rapid7/metasploitable3-win2k8`.\n4. Use `vagrant plugin install vagrant-reload` to install the reload vagrant provisioner if you haven't already.\n5. To start the VM, run the command `vagrant up win2k8`. This will start up the VM and run all of the installation and configuration scripts necessary to set everything up. This takes about 10 minutes.\n6. Once this process completes, you can open up the VM within VirtualBox and login. The default credentials are:\n    - Username: `vagrant`\n    - Password: `vagrant`\n\n### ub1404 Development and Modification\n\nUsing Vagrant and a lightweight Ubuntu 14.04 vagrant cloud box image, you can\nquickly set up and customize ub1404 Metasploitable3 for development or\ncustomization. To do so, install Vagrant and a hypervisor such as VirtualBox,\nVMWare, or libvirt.\n\nInstall the relevant provider plugin:\n\n    # virtualbox\n    vagrant plugin install vagrant-vbguest\n\n    # libvirt\n    vagrant plugin install vagrant-libvirt\n\nThen, navigate to the [chef/dev/ub1404](chef/dev/ub1404) directory in this repository.\nExamine the Vagrantfile there. Select a base box that supports your provider.\n\nMetasploitable ub1404 uses the vagrant `chef-solo` provisioner. Configure the\nchef_solo block in the Vagrantfile with the metasploitable chef recipes that you\ndesire -- you can browse them in the [chef/cookbooks/metasploitable](chef/cookbooks/metasploitable)\nfolder. Or, add or edit your own cookbook and/or recipes there.\n\nFrom the [chef/dev/ub1404](chef/dev/ub1404) directory, you can run `vagrant up`\nto get a development virtual ub1404 instance. After the initial `up` build and provision,\nwhen you edit the chef runlist or when you edit a chef recipe, run\n`vagrant rsync && vagrant provision` from the same directory. For faster\ndevelopment, you can comment-out recipes that you do not need to rerun -- but\neven if they are all enabled, vagrant re-provisioning should not take longer than\none or two minutes. Chef aims to be idempotent, so you can rerun this command often.\n\nConsider taking a snapshot (e.g., `vagrant snapshot save fresh`) before modifying\nrecipes, so that you can always return to an initial state (`vagrant restore fresh`).\nIf you want a _totally_ fresh snapshot, you can do the initialization with\n`vagrant up --no-provision`, then take a snapshot, followed by `vagrant provision`.\n\n\n## Vulnerabilities\n* [See the wiki page](https://github.com/rapid7/metasploitable3/wiki/Vulnerabilities)\n\n## More Information\nThe wiki has a lot more detail and serves as the main source of documentation. Please [check it out](https://github.com/rapid7/metasploitable3/wiki/).\n\n## Acknowledgements\nThe Windows portion of this project was based off of GitHub user [joefitzgerald's](https://github.com/joefitzgerald) [packer-windows](https://github.com/joefitzgerald/packer-windows) project.\nThe Packer templates, original Vagrantfile, and installation answer files were used as the base template and built upon for the needs of this project.\n"
        },
        {
          "name": "Vagrantfile",
          "type": "blob",
          "size": 2.2431640625,
          "content": "# -*- mode: ruby -*-\n# vi: set ft=ruby :\n\nVagrant.configure(\"2\") do |config|\n  config.vm.synced_folder '.', '/vagrant', disabled: true\n  config.vm.define \"ub1404\" do |ub1404|\n    ub1404.vm.box = \"rapid7/metasploitable3-ub1404\"\n    ub1404.vm.hostname = \"metasploitable3-ub1404\"\n    config.ssh.username = 'vagrant'\n    config.ssh.password = 'vagrant'\n\n    ub1404.vm.network \"private_network\", ip: '172.28.128.3'\n\n    ub1404.vm.provider \"virtualbox\" do |v|\n      v.name = \"Metasploitable3-ub1404\"\n      v.memory = 2048\n    end\n  end\n\n  config.vm.define \"win2k8\" do |win2k8|\n    # Base configuration for the VM and provisioner\n    win2k8.vm.box = \"rapid7/metasploitable3-win2k8\"\n    win2k8.vm.hostname = \"metasploitable3-win2k8\"\n    win2k8.vm.communicator = \"winrm\"\n    win2k8.winrm.retry_limit = 60\n    win2k8.winrm.retry_delay = 10\n\n    win2k8.vm.network \"private_network\", type: \"dhcp\"\n\n    win2k8.vm.provider \"libvirt\" do |v|\n      v.memory = 4096\n      v.cpus = 2\n      v.video_type = 'qxl'\n      v.input :type => \"tablet\", :bus => \"usb\"\n      v.channel :type => 'unix', :target_name => 'org.qemu.guest_agent.0', :target_type => 'virtio'\n      v.channel :type => 'spicevmc', :target_name => 'com.redhat.spice.0', :target_type => 'virtio'\n      v.graphics_type = \"spice\"\n\n      # Enable Hyper-V enlightenments: https://blog.wikichoon.com/2014/07/enabling-hyper-v-enlightenments-with-kvm.html\n      v.hyperv_feature :name => 'stimer',  :state => 'on'\n      v.hyperv_feature :name => 'relaxed', :state => 'on'\n      v.hyperv_feature :name => 'vapic',   :state => 'on'\n      v.hyperv_feature :name => 'synic',   :state => 'on'\n    end\n\n    # Configure Firewall to open up vulnerable services\n    case ENV['MS3_DIFFICULTY']\n      when 'easy'\n        win2k8.vm.provision :shell, inline: \"C:\\\\startup\\\\disable_firewall.bat\"\n      else\n        win2k8.vm.provision :shell, inline: \"C:\\\\startup\\\\enable_firewall.bat\"\n        win2k8.vm.provision :shell, inline: \"C:\\\\startup\\\\configure_firewall.bat\"\n    end\n\n    # Insecure share from the Linux machine\n    win2k8.vm.provision :shell, inline: \"C:\\\\startup\\\\install_share_autorun.bat\"\n    win2k8.vm.provision :shell, inline: \"C:\\\\startup\\\\setup_linux_share.bat\"\n    win2k8.vm.provision :shell, inline: \"rm C:\\\\startup\\\\*\" # Cleanup startup scripts\n  end\nend\n"
        },
        {
          "name": "build.ps1",
          "type": "blob",
          "size": 6.484375,
          "content": "﻿$ErrorActionPreference = \"Stop\"\r\n\r\n$virtualBoxMinVersion = \"6.1.0\"\r\n$packerMinVersion = \"1.6.0\"\r\n$vagrantMinVersion = \"1.9.0\"\r\n$vagrantreloadMinVersion = \"0.0.1\"\r\n$packer = \"packer.exe\"\r\n$expectedVBoxLocation = \"C:\\Program Files\\Oracle\\VirtualBox\"\r\n$expectedVagrantLocation=\"C:\\HashiCorp\\Vagrant\\bin\"\r\n\r\n\r\n\r\nfunction CompareVersions ($actualVersion, $expectedVersion, $exactMatch = $False) {\r\n    If ($exactMatch) {\r\n        If ($actualVersion -eq $expectedVersion) {\r\n            return $True\r\n        } else {\r\n            return $False\r\n        }\r\n    }\r\n\r\n    $actualVersion = $actualVersion.split(\".\")\r\n    $expectedVersion = $expectedVersion.split(\".\")\r\n\r\n    for($i=0; $i -le $expectedVersion.length; $i++) {\r\n        If([INT]$actualVersion[$i] -gt [INT]$expectedVersion[$i]) {\r\n            return $True\r\n        }\r\n\r\n        If([INT]$actualVersion[$i] -lt [INT]$expectedVersion[$i]) {\r\n            return $False\r\n        }\r\n    }\r\n    return $True\r\n}\r\n\r\nWrite-Host \"\";\r\n\r\nIf ($(Test-Path \"$expectedVBoxLocation\\VBoxManage.exe\") -eq $True) {\r\n\r\n    $vboxVersion = cmd.exe /c \"$expectedVBoxLocation\\VBoxManage.exe\" -v\r\n    $vboxVersion = $vboxVersion.split(\"r\")[0]\r\n\r\n} else {\r\n\r\n    Write-Host \"VirtualBox is not installed (or not in the expected location of $expectedVBoxLocation\\)\"\r\n    Write-Host \"Please download and install it from https://www.virtualbox.org/\"\r\n    exit\r\n\r\n}\r\n\r\n\r\nIf (CompareVersions -actualVersion $vboxVersion -expectedVersion $virtualBoxMinVersion -exactMatch $False) {\r\n\r\n    Write-Host \"Compatible version of VirtualBox found.\"\r\n\r\n} else {\r\n\r\n    Write-Host \"A compatible version of VirtualBox was not found.\"\r\n    Write-Host \"Current Version=[$vboxVersion], Minimum Version=[$virtualBoxMinVersion]\"\r\n    Write-Host \"Please download and install it from https://www.virtualbox.org/\"\r\n    exit\r\n\r\n}\r\n\r\n$packerVersion = cmd.exe /c $packer -v\r\n\r\nIf (CompareVersions -actualVersion $packerVersion -expectedVersion $packerMinVersion) {\r\n\r\n    Write-Host \"Compatible version of Packer found.\"\r\n\r\n} else {\r\n\r\n    Write-Host \"Could not find a compatible version of packer. Please download it from https://www.packer.io/downloads.html and add it to your PATH.\"\r\n    exit\r\n\r\n}\r\n\r\n\r\nIf ($(Test-Path \"$expectedVagrantLocation\\vagrant.exe\") -eq $True) {\r\n\r\n    $vagrantVersion = cmd.exe /c \"vagrant\" -v\r\n    $vagrantVersion = $vagrantVersion.split(\" \")[1]\r\n\r\n} else {\r\n\r\n    Write-Host \"Vagrant is not installed (or not in the expected location of $expectedVagrantLocation\\)\"\r\n    Write-Host \"Please download and install it from https://www.vagrantup.com/downloads.html/\"\r\n    exit\r\n\r\n}\r\n\r\nIf (CompareVersions -actualVersion $vagrantVersion -expectedVersion $vagrantMinVersion) {\r\n\r\n    Write-Host \"Compatible version of Vagrant found.\"\r\n\r\n} else {\r\n\r\n    Write-Host \"Could not find a compatible version of Vagrant at C:\\HashiCorp\\Vagrant\\bin\\. Please download and install it from https://www.vagrantup.com/downloads.html.\"\r\n    exit\r\n\r\n}\r\n\r\n\r\n$vagrantPlugins = cmd.exe /c \"vagrant plugin list\" | select-string -pattern \"vagrant-reload\"\r\n\r\n\r\nIf (![string]::IsNullOrEmpty($vagrantPlugins)) {\r\n\r\n    $vagrantPlugins = $vagrantPlugins.ToString().Trim()\r\n    $vagrantreloadVersion = $vagrantPlugins.Replace(\"(\", \"\")\r\n    $vagrantreloadVersion = $vagrantreloadVersion.Replace(\")\", \"\")\r\n    $vagrantreloadVersion = $vagrantreloadVersion.split(\" \")[1]\r\n\r\n\r\n    If (CompareVersions -actualVersion $vagrantreloadVersion -expectedVersion $vagrantreloadMinVersion) {\r\n\r\n        Write-Host \"Compatible version of vagrant-reload plugin found.\"\r\n\r\n    }\r\n\r\n} else {\r\n\r\n    Write-Host \"Could not find a compatible version of vagrant-reload plugin. Attempting to install...\"\r\n    cmd.exe /c \"vagrant plugin install vagrant-reload\"\r\n\r\n\r\n    # Hacky version of Try-Catch for non-terminating errors.\r\n    # See http://stackoverflow.com/questions/1142211/try-catch-does-not-seem-to-have-an-effect\r\n\r\n    if($?) {\r\n        Write-Host \"The vagrant-reload plugin was successfully installed.\"\r\n    } else {\r\n        throw \"Error installing vagrant-reload plugin. Please check the output above for any error messages.\"\r\n    }\r\n\r\n}\r\n\r\nfunction InstallBox($os_full, $os_short)\r\n{\r\n    $boxversion = Get-Content .\\packer\\templates\\$os_full.json | Select-String -Pattern \"box_version\" | Select-String -Pattern \"[0-9]\\.[0-9]\\.[0-9]+\"\r\n    $boxversion = $boxversion.toString().trim().split('\"')[3]\r\n\r\n    Write-Host \"Building metasploitable3-$os_short Vagrant box...\"\r\n\r\n    If ($(Test-Path \"packer\\builds\\$($os_full)_virtualbox_$boxversion.box\") -eq $True) {\r\n\r\n        Write-Host \"It looks like the Vagrant box already exists. Skipping the Packer build.\"\r\n    \r\n    } else {\r\n\r\n        cmd.exe /c $packer build --only=virtualbox-iso packer\\templates\\$os_full.json\r\n\r\n        if($?) {\r\n          Write-Host \"Box successfully built by Packer.\"\r\n        } else {\r\n         throw \"Error building the Vagrant box using Packer. Please check the output above for any error messages.\"\r\n        }\r\n    }\r\n\r\n    Write-Host \"Attempting to add metasploitable3-$os_short box to Vagrant...\"\r\n    $vagrant_box_list = cmd.exe /c \"vagrant box list\"\r\n\r\n    If ($vagrant_box_list -match \"rapid7/metasploitable3-$os_short\") {\r\n        Write-Host \"rapid7/metasploitable3-$os_short already found in Vagrant box repository. Skipping the addition to Vagrant.\"\r\n    } else {\r\n\r\n        cmd.exe /c vagrant box add packer\\builds\\$($os_full)_virtualbox_$boxversion.box --name rapid7/metasploitable3-$os_short\r\n    \r\n        if($?) {\r\n            Write-Host \"rapid7/metasploitable3-$os_short box successfully added to Vagrant.\"\r\n        } else {\r\n            throw \"Error adding metasploitable3-$os_short box to Vagrant. See the above output for any error messages.\"\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nWrite-Host \"All requirements found. Proceeding...\"\r\n\r\nif($args.Length -eq 0)\r\n{\r\n  $option = Read-Host -Prompt 'No box name passed as input. Build both the boxes ? (y/n)';\r\n  if ($option -eq 'y')\r\n  {\r\n    InstallBox -os_full \"windows_2008_r2\" -os_short \"win2k8\";\r\n    InstallBox -os_full \"ubuntu_1404\" -os_short \"ub1404\";\r\n  } else {\r\n    Write-Host \"To build metasploitable boxes separately, use the following commands:\";\r\n    Write-Host \"- .\\build.ps1 windows2008\";\r\n    Write-Host \"- .\\build.ps1 ubuntu1404\";\r\n  }\r\n}\r\nElseIf ($args.Length -eq 1)\r\n{\r\n  if ($args -eq \"windows2008\")\r\n  {\r\n    InstallBox -os_full \"windows_2008_r2\" -os_short \"win2k8\";\r\n  }\r\n  ElseIf ($args -eq \"ubuntu1404\")\r\n  {\r\n    InstallBox -os_full \"ubuntu_1404\" -os_short \"ub1404\";\r\n  }\r\n  Else\r\n  {\r\n    Write-Host \"Invalid OS. Valid options are 'ubuntu1404' and 'windows2008'\";\r\n  }\r\n}\r\nWrite-Host \"\";\r\n"
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 7.310546875,
          "content": "#!/bin/bash\n\nmin_vbox_ver=\"6.1.0\"\nmin_vagrant_ver=\"1.9.0\"\nmin_packer_ver=\"1.6.0\"\nmin_vagrantreload_ver=\"0.0.1\"\nmin_vagrantvmware_ver=\"0.0.1\"\nmin_vagrantparallels_ver=\"0.0.1\"\nmin_vagrantlibvirt_ver=\"0.0.1\"\npacker_bin=\"packer\"\npacker_build_path=\"packer/builds\"\n\ncase \"$1\" in\n    ubuntu1404)  echo \"building ubuntu 1404\"\n                 os_full=\"ubuntu_1404\"\n                 os_short=\"ub1404\"\n                 ;;\n\n    windows2008) echo \"building windows 2008\"\n                 os_full=\"windows_2008_r2\"\n                 os_short=\"win2k8\"\n                 ;;\n\n    *)           echo \"Invalid OS. Valid options are 'ubuntu1404' and 'windows2008'\"\n                 exit 1\n                 ;;\nesac\n\nbox_version=$(grep \\\"box_version\\\": packer/templates/$os_full.json | grep -Eow \"[0-9]\\.[0-9]\\.[0-9]+\")\n\nfunction compare_versions {\n    actual_version=$1\n    expected_version=$2\n    exact_match=$3\n\n    if $exact_match; then\n        if [ \"$actual_version\" == \"$expected_version\" ]; then\n            return 0\n        else\n            return 1\n        fi\n    fi\n\n    IFS='.' read -ra actual_version <<< \"$actual_version\"\n    IFS='.' read -ra expected_version <<< \"$expected_version\"\n\n    for ((i=0; i < ${#expected_version[@]}; i++))\n    do\n        if [[ ${actual_version[$i]} -gt ${expected_version[$i]} ]]; then\n            return 0\n        fi\n\n        if [[ ${actual_version[$i]} -lt ${expected_version[$i]} ]]; then\n            return 1\n        fi\n    done\n    return 0\n}\n\n# Conditional for platform specific version checks. Some of these might seem redundant since\n# there might not be anything actively broken in the dependent software. Keeping it around as\n# version upgrades could break things on specific platforms.\nif [ $(uname) = \"Darwin\" ]; then\n    vagrant_exact_match=false\nelif [ $(uname) = \"Linux\" ]; then\n    vagrant_exact_match=false\n    if (cat /etc/*-release | grep -q 'DISTRIB_ID=Arch')|(cat /etc/os-release | grep -Pq 'ID=(arch|\"antergos\")'); then\n        packer_bin=\"packer-io\"\n    fi\nfi\n\nproviders=\"\"\n\nif [ -x \"$(which VBoxManage)\" ] ; then\n    current_vbox_ver=$(VBoxManage -v | sed -e 's/r.*//g' -e 's/_.*//g')\n    if compare_versions $current_vbox_ver $min_vbox_ver false; then\n        echo \"Compatible version of VirtualBox found.\"\n        echo \"Virtualbox images will be built.\"\n        providers=\"virtualbox $providers\"\n    else\n        echo \"Compatible version of VirtualBox was not found.\"\n        echo \"Current Version=[$current_vbox_ver], Minimum Version=[$min_vbox_ver]\"\n        echo \"Please download and install it from https://www.virtualbox.org/\"\n        echo \"Virtualbox images will not be built.\"\n    fi\nelse\n    echo \"VirtualBox is not installed (or not added to the path).\"\n    echo \"Please download and install it from https://www.virtualbox.org/\"\n    echo \"Virtualbox images will not be built.\"\nfi\n\nif compare_versions $($packer_bin -v) $min_packer_ver false; then\n    echo \"Compatible version of $packer_bin was found.\"\nelse\n    packer_bin=packer\n    if compare_versions $($packer_bin -v) $min_packer_ver false; then\n        echo \"Compatible version of $packer_bin was found.\"\n    else\n        echo \"Compatible version of packer was not found. Please install from here: https://www.packer.io/downloads.html\"\n        exit 1\n    fi\nfi\n\nif compare_versions $(vagrant -v | cut -d' ' -f2) $min_vagrant_ver $vagrant_exact_match; then\n    echo 'Correct version of vagrant was found.'\nelse\n    echo \"Compatible version of vagrant was not found. Please download and install it from https://www.vagrantup.com/downloads.html.\"\n    exit 1\nfi\n\nif [ $(uname) = \"Linux\" ]; then\n  if compare_versions $(vagrant plugin list | grep 'vagrant-libvirt' | cut -d' ' -f2 | tr -d '(' | tr -d ')' | tr -d ',') $min_vagrantlibvirt_ver false; then\n      echo 'Compatible version of vagrant-libvirt plugin was found.'\n      echo 'KVM image will be built.'\n      providers=\"qemu $providers\"\n      echo 'Fetching virtio drivers required for build'\n      ./packer/scripts/virtio-win-drivers.sh\n  else\n      echo \"Compatible version of vagrant-libvirt plugin was not found.\"\n  fi\nfi\n\nif compare_versions $(vagrant plugin list | grep 'vagrant-vmware' | cut -d' ' -f2 | tr -d '(' | tr -d ')' | tr -d ',') $min_vagrantvmware_ver false; then\n  echo 'Compatible version of vagrant-vmware plugin was found.'\n  echo 'VMware image will be built'\n  providers=\"vmware $providers\"\nfi\n\nif compare_versions $(vagrant plugin list | grep 'vagrant-parallels' | cut -d' ' -f2 | tr -d '(' | tr -d ')' | tr -d ',') $min_vagrantparallels_ver false; then\n  echo 'Compatible version of vagrant-parallels plugin was found.'\n  echo 'Parallels image will be built'\n  providers=\"parallels $providers\"\nfi\n\nif compare_versions $(vagrant plugin list | grep 'vagrant-reload' | cut -d' ' -f2 | tr -d '(' | tr -d ')' | tr -d ',') $min_vagrantreload_ver false; then\n    echo 'Compatible version of vagrant-reload plugin was found.'\nelse\n    echo \"Compatible version of vagrant-reload plugin was not found.\"\n    echo \"Attempting to install...\"\n    if vagrant plugin install vagrant-reload; then\n        echo \"Successfully installed the vagrant-reload plugin.\"\n    else\n        echo \"There was an error installing the vagrant-reload plugin. Please see the above output for more information.\"\n        exit 1\n    fi\nfi\n\nif [ \"$providers\" == \"\" ]; then\n    echo \"No virtual machine providers found, aborting\"\n    exit 1\nfi\n\necho \"Requirements found. Proceeding...\"\n\nfor provider in $providers; do\n    search_string=\"$os_full\"_\"$provider\"_\"$box_version\"\n    mkdir -p \"$packer_build_path\"\n    if [ -e $packer_build_path/$search_string.box ]; then\n      echo \"It looks like the $provider vagrant box already exists. Skipping the build.\"\n    else\n      echo \"Building the Vagrant box for $provider...\"\n      packer_provider=\"$provider-iso\"\n      if [ $provider = \"qemu\" ]; then\n        packer_provider=$provider\n      fi\n      if $packer_bin build -only $packer_provider packer/templates/$os_full.json; then\n          echo \"Boxes successfully built by Packer.\"\n      else\n          echo \"Error building the Vagrant boxes using Packer. Please check the output above for any error messages.\"\n          exit 1\n      fi\n    fi\ndone\n\necho \"Attempting to add the box to Vagrant...\"\n\nfor provider in $providers; do\n    if vagrant box list | grep -q rapid7/metasploitable3-\"$os_short\"; then\n        echo \"rapid7/metasploitable3-$os_short already found in Vagrant box repository. Skipping the addition to Vagrant.\"\n        echo \"NOTE: If you are having issues, try starting over by doing 'vagrant destroy' and then 'vagrant up'.\"\n    else\n        if [ -z $box_import ]; then\n            if [ $provider = \"qemu\" ]; then\n              provider=\"libvirt\"\n            fi\n            if vagrant box add $packer_build_path/\"$os_full\"_\"$provider\"_\"$box_version\".box --name rapid7/metasploitable3-$os_short; then\n            echo \"Box successfully added to Vagrant.\"\n            else\n            echo \"Error adding box to Vagrant. See the above output for any error messages.\"\n            fi\n        else\n            echo \"No builders produced a working box.\"\n            echo \"Check you have build dependencies installed.\"\n            echo \"Useful diagnostic information could be above. Aborting!\"\n        fi\n    fi\ndone\n\necho \"---------------------------------------------------------------------\"\necho \"SUCCESS: Run 'vagrant up' to provision and start metasploitable3.\"\necho \"NOTE: The VM will need Internet access to provision properly.\"\n"
        },
        {
          "name": "chef",
          "type": "tree",
          "content": null
        },
        {
          "name": "cortex.yaml",
          "type": "blob",
          "size": 0.3779296875,
          "content": "---\ninfo:\n  title: Metasploitable3\n  description: Metasploitable3 is a VM that is built from the ground up with a large\n    amount of security vulnerabilities.\n  x-cortex-git:\n    github:\n      alias: r7org\n      repository: rapid7/metasploitable3\n  x-cortex-tag: metasploitable3\n  x-cortex-type: service\n  x-cortex-domain-parents:\n  - tag: metasploit\nopenapi: 3.0.1\nservers:\n- url: \"/\"\n"
        },
        {
          "name": "iso",
          "type": "tree",
          "content": null
        },
        {
          "name": "packer",
          "type": "tree",
          "content": null
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "versions",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}