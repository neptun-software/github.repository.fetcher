{
  "metadata": {
    "timestamp": 1736557391483,
    "page": 384,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "acmesh-official/acme.sh",
      "stars": 40639,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.49,
          "content": "FROM alpine:3.17\n\nRUN apk --no-cache add -f \\\n  openssl \\\n  openssh-client \\\n  coreutils \\\n  bind-tools \\\n  curl \\\n  sed \\\n  socat \\\n  tzdata \\\n  oath-toolkit-oathtool \\\n  tar \\\n  libidn \\\n  jq \\\n  cronie\n\nENV LE_CONFIG_HOME /acme.sh\n\nARG AUTO_UPGRADE=1\n\nENV AUTO_UPGRADE $AUTO_UPGRADE\n\n#Install\nCOPY ./ /install_acme.sh/\nRUN cd /install_acme.sh && ([ -f /install_acme.sh/acme.sh ] && /install_acme.sh/acme.sh --install || curl https://get.acme.sh | sh) && rm -rf /install_acme.sh/\n\n\nRUN ln -s /root/.acme.sh/acme.sh /usr/local/bin/acme.sh && crontab -l | grep acme.sh | sed 's#> /dev/null#> /proc/1/fd/1 2>/proc/1/fd/2#' | crontab -\n\nRUN for verb in help \\\n  version \\\n  install \\\n  uninstall \\\n  upgrade \\\n  issue \\\n  signcsr \\\n  deploy \\\n  install-cert \\\n  renew \\\n  renew-all \\\n  revoke \\\n  remove \\\n  list \\\n  info \\\n  showcsr \\\n  install-cronjob \\\n  uninstall-cronjob \\\n  cron \\\n  toPkcs \\\n  toPkcs8 \\\n  update-account \\\n  register-account \\\n  create-account-key \\\n  create-domain-key \\\n  createCSR \\\n  deactivate \\\n  deactivate-account \\\n  set-notify \\\n  set-default-ca \\\n  set-default-chain \\\n  ; do \\\n    printf -- \"%b\" \"#!/usr/bin/env sh\\n/root/.acme.sh/acme.sh --${verb} --config-home /acme.sh \\\"\\$@\\\"\" >/usr/local/bin/--${verb} && chmod +x /usr/local/bin/--${verb} \\\n  ; done\n\nRUN printf \"%b\" '#!'\"/usr/bin/env sh\\n \\\nif [ \\\"\\$1\\\" = \\\"daemon\\\" ];  then \\n \\\n exec crond -n -s -m off \\n \\\nelse \\n \\\n exec -- \\\"\\$@\\\"\\n \\\nfi\\n\" >/entry.sh && chmod +x /entry.sh\n\nVOLUME /acme.sh\n\nENTRYPOINT [\"/entry.sh\"]\nCMD [\"--help\"]\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 34.33,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<https://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<https://www.gnu.org/licenses/why-not-lgpl.html>.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 21.93,
          "content": "# An ACME Shell script: acme.sh \n\n[![FreeBSD](https://github.com/acmesh-official/acme.sh/actions/workflows/FreeBSD.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/FreeBSD.yml)\n[![OpenBSD](https://github.com/acmesh-official/acme.sh/actions/workflows/OpenBSD.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/OpenBSD.yml)\n[![NetBSD](https://github.com/acmesh-official/acme.sh/actions/workflows/NetBSD.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/NetBSD.yml)\n[![MacOS](https://github.com/acmesh-official/acme.sh/actions/workflows/MacOS.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/MacOS.yml)\n[![Ubuntu](https://github.com/acmesh-official/acme.sh/actions/workflows/Ubuntu.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/Ubuntu.yml)\n[![Windows](https://github.com/acmesh-official/acme.sh/actions/workflows/Windows.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/Windows.yml)\n[![Solaris](https://github.com/acmesh-official/acme.sh/actions/workflows/Solaris.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/Solaris.yml)\n[![DragonFlyBSD](https://github.com/acmesh-official/acme.sh/actions/workflows/DragonFlyBSD.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/DragonFlyBSD.yml)\n[![Omnios](https://github.com/acmesh-official/acme.sh/actions/workflows/Omnios.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/Omnios.yml)\n\n![Shellcheck](https://github.com/acmesh-official/acme.sh/workflows/Shellcheck/badge.svg)\n![PebbleStrict](https://github.com/acmesh-official/acme.sh/workflows/PebbleStrict/badge.svg)\n![DockerHub](https://github.com/acmesh-official/acme.sh/workflows/Build%20DockerHub/badge.svg)\n\n\n<a href=\"https://opencollective.com/acmesh\" alt=\"Financial Contributors on Open Collective\"><img src=\"https://opencollective.com/acmesh/all/badge.svg?label=financial+contributors\" /></a> \n[![Join the chat at https://gitter.im/acme-sh/Lobby](https://badges.gitter.im/acme-sh/Lobby.svg)](https://gitter.im/acme-sh/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Docker stars](https://img.shields.io/docker/stars/neilpang/acme.sh.svg)](https://hub.docker.com/r/neilpang/acme.sh \"Click to view the image on Docker Hub\")\n[![Docker pulls](https://img.shields.io/docker/pulls/neilpang/acme.sh.svg)](https://hub.docker.com/r/neilpang/acme.sh \"Click to view the image on Docker Hub\")\n\n\n\n- An ACME protocol client written purely in Shell (Unix shell) language.\n- Full ACME protocol implementation.\n- Support ECDSA certs\n- Support SAN and wildcard certs\n- Simple, powerful and very easy to use. You only need 3 minutes to learn it.\n- Bash, dash and sh compatible.\n- Purely written in Shell with no dependencies on python.\n- Just one script to issue, renew and install your certificates automatically.\n- DOES NOT require `root/sudoer` access.\n- Docker ready\n- IPv6 ready\n- Cron job notifications for renewal or error etc.\n\nIt's probably the `easiest & smartest` shell script to automatically issue & renew the free certificates.\n\nWiki: https://github.com/acmesh-official/acme.sh/wiki\n\nFor Docker Fans: [acme.sh :two_hearts: Docker ](https://github.com/acmesh-official/acme.sh/wiki/Run-acme.sh-in-docker)\n\nTwitter: [@neilpangxa](https://twitter.com/neilpangxa)\n\n\n# [中文说明](https://github.com/acmesh-official/acme.sh/wiki/%E8%AF%B4%E6%98%8E)\n\n# Who:\n- [FreeBSD.org](https://blog.crashed.org/letsencrypt-in-freebsd-org/)\n- [ruby-china.org](https://ruby-china.org/topics/31983)\n- [Proxmox](https://pve.proxmox.com/wiki/Certificate_Management)\n- [pfsense](https://github.com/pfsense/FreeBSD-ports/pull/89)\n- [Loadbalancer.org](https://www.loadbalancer.org/blog/loadbalancer-org-with-lets-encrypt-quick-and-dirty)\n- [discourse.org](https://meta.discourse.org/t/setting-up-lets-encrypt/40709)\n- [Centminmod](https://centminmod.com/letsencrypt-acmetool-https.html)\n- [splynx](https://forum.splynx.com/t/free-ssl-cert-for-splynx-lets-encrypt/297)\n- [opnsense.org](https://github.com/opnsense/plugins/tree/master/security/acme-client/src/opnsense/scripts/OPNsense/AcmeClient)\n- [CentOS Web Panel](https://control-webpanel.com)\n- [lnmp.org](https://lnmp.org/)\n- [more...](https://github.com/acmesh-official/acme.sh/wiki/Blogs-and-tutorials)\n\n# Tested OS\n\n| NO | Status| Platform|\n|----|-------|---------|\n|1|[![MacOS](https://github.com/acmesh-official/acme.sh/actions/workflows/MacOS.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/MacOS.yml)|Mac OSX\n|2|[![Windows](https://github.com/acmesh-official/acme.sh/actions/workflows/Windows.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/Windows.yml)|Windows (cygwin with curl, openssl and crontab included)\n|3|[![FreeBSD](https://github.com/acmesh-official/acme.sh/actions/workflows/FreeBSD.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/FreeBSD.yml)|FreeBSD\n|4|[![Solaris](https://github.com/acmesh-official/acme.sh/actions/workflows/Solaris.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/Solaris.yml)|Solaris\n|5|[![Ubuntu](https://github.com/acmesh-official/acme.sh/actions/workflows/Ubuntu.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/Ubuntu.yml)| Ubuntu\n|6|NA|pfsense\n|7|[![OpenBSD](https://github.com/acmesh-official/acme.sh/actions/workflows/OpenBSD.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/OpenBSD.yml)|OpenBSD\n|8|[![NetBSD](https://github.com/acmesh-official/acme.sh/actions/workflows/NetBSD.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/NetBSD.yml)|NetBSD\n|9|[![DragonFlyBSD](https://github.com/acmesh-official/acme.sh/actions/workflows/DragonFlyBSD.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/DragonFlyBSD.yml)|DragonFlyBSD\n|10|[![Omnios](https://github.com/acmesh-official/acme.sh/actions/workflows/Omnios.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/Omnios.yml)|Omnios\n|11|[![Linux](https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml)| Debian\n|12|[![Linux](https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml)|CentOS\n|13|[![Linux](https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml)|openSUSE\n|14|[![Linux](https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml)|Alpine Linux (with curl)\n|15|[![Linux](https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml)|Archlinux\n|16|[![Linux](https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml)|fedora\n|17|[![Linux](https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml)|Kali Linux\n|18|[![Linux](https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml)|Oracle Linux\n|19|[![Linux](https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml)|Mageia\n|10|[![Linux](https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml)|Gentoo Linux\n|11|[![Linux](https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml)|ClearLinux\n|22|-----| Cloud Linux  https://github.com/acmesh-official/acme.sh/issues/111\n|23|-----| OpenWRT: Tested and working. See [wiki page](https://github.com/acmesh-official/acme.sh/wiki/How-to-run-on-OpenWRT)\n|24|[![](https://acmesh-official.github.io/acmetest/status/proxmox.svg)](https://github.com/acmesh-official/letest#here-are-the-latest-status)| Proxmox: See Proxmox VE Wiki. Version [4.x, 5.0, 5.1](https://pve.proxmox.com/wiki/HTTPS_Certificate_Configuration_(Version_4.x,_5.0_and_5.1)#Let.27s_Encrypt_using_acme.sh), version [5.2 and up](https://pve.proxmox.com/wiki/Certificate_Management)\n\n\nCheck our [testing project](https://github.com/acmesh-official/acmetest):\n\nhttps://github.com/acmesh-official/acmetest\n\n# Supported CA\n\n- [ZeroSSL.com CA](https://github.com/acmesh-official/acme.sh/wiki/ZeroSSL.com-CA)(default)\n- Letsencrypt.org CA\n- [BuyPass.com CA](https://github.com/acmesh-official/acme.sh/wiki/BuyPass.com-CA)\n- [SSL.com CA](https://github.com/acmesh-official/acme.sh/wiki/SSL.com-CA)\n- [Google.com Public CA](https://github.com/acmesh-official/acme.sh/wiki/Google-Public-CA)\n- [Pebble strict Mode](https://github.com/letsencrypt/pebble)\n- Any other [RFC8555](https://tools.ietf.org/html/rfc8555)-compliant CA\n\n# Supported modes\n\n- Webroot mode\n- Standalone mode\n- Standalone tls-alpn mode\n- Apache mode\n- Nginx mode\n- DNS mode\n- [DNS alias mode](https://github.com/acmesh-official/acme.sh/wiki/DNS-alias-mode)\n- [Stateless mode](https://github.com/acmesh-official/acme.sh/wiki/Stateless-Mode)\n\n\n# 1. How to install\n\n### 1. Install online\n\nCheck this project: https://github.com/acmesh-official/get.acme.sh\n\n```bash\ncurl https://get.acme.sh | sh -s email=my@example.com\n```\n\nOr:\n\n```bash\nwget -O -  https://get.acme.sh | sh -s email=my@example.com\n```\n\n\n### 2. Or, Install from git\n\nClone this project and launch installation:\n\n```bash\ngit clone https://github.com/acmesh-official/acme.sh.git\ncd ./acme.sh\n./acme.sh --install -m my@example.com\n```\n\nYou `don't have to be root` then, although `it is recommended`.\n\nAdvanced Installation: https://github.com/acmesh-official/acme.sh/wiki/How-to-install\n\nThe installer will perform 3 actions:\n\n1. Create and copy `acme.sh` to your home dir (`$HOME`): `~/.acme.sh/`.\nAll certs will be placed in this folder too.\n2. Create alias for: `acme.sh=~/.acme.sh/acme.sh`.\n3. Create daily cron job to check and renew the certs if needed.\n\nCron entry example:\n\n```bash\n0 0 * * * \"/home/user/.acme.sh\"/acme.sh --cron --home \"/home/user/.acme.sh\" > /dev/null\n```\n\nAfter the installation, you must close the current terminal and reopen it to make the alias take effect.\n\nOk, you are ready to issue certs now.\n\nShow help message:\n\n```sh\nroot@v1:~# acme.sh -h\n```\n\n# 2. Just issue a cert\n\n**Example 1:** Single domain.\n\n```bash\nacme.sh --issue -d example.com -w /home/wwwroot/example.com\n```\n\nor:\n\n```bash\nacme.sh --issue -d example.com -w /home/username/public_html\n```\n\nor:\n\n```bash\nacme.sh --issue -d example.com -w /var/www/html\n```\n\n**Example 2:** Multiple domains in the same cert.\n\n```bash\nacme.sh --issue -d example.com -d www.example.com -d cp.example.com -w /home/wwwroot/example.com\n```\n\nThe parameter `/home/wwwroot/example.com` or `/home/username/public_html` or `/var/www/html` is the web root folder where you host your website files. You **MUST** have `write access` to this folder.\n\nSecond argument **\"example.com\"** is the main domain you want to issue the cert for.\nYou must have at least one domain there.\n\nYou must point and bind all the domains to the same webroot dir: `/home/wwwroot/example.com`.\n\nThe certs will be placed in `~/.acme.sh/example.com/`\n\nThe certs will be renewed automatically every **60** days.\n\nMore examples: https://github.com/acmesh-official/acme.sh/wiki/How-to-issue-a-cert\n\n\n# 3. Install the cert to Apache/Nginx etc.\n\nAfter the cert is generated, you probably want to install/copy the cert to your Apache/Nginx or other servers.\nYou **MUST** use this command to copy the certs to the target files, **DO NOT** use the certs files in **~/.acme.sh/** folder, they are for internal use only, the folder structure may change in the future.\n\n**Apache** example:\n```bash\nacme.sh --install-cert -d example.com \\\n--cert-file      /path/to/certfile/in/apache/cert.pem  \\\n--key-file       /path/to/keyfile/in/apache/key.pem  \\\n--fullchain-file /path/to/fullchain/certfile/apache/fullchain.pem \\\n--reloadcmd     \"service apache2 force-reload\"\n```\n\n**Nginx** example:\n```bash\nacme.sh --install-cert -d example.com \\\n--key-file       /path/to/keyfile/in/nginx/key.pem  \\\n--fullchain-file /path/to/fullchain/nginx/cert.pem \\\n--reloadcmd     \"service nginx force-reload\"\n```\n\nOnly the domain is required, all the other parameters are optional.\n\nThe ownership and permission info of existing files are preserved. You can pre-create the files to define the ownership and permission.\n\nInstall/copy the cert/key to the production Apache or Nginx path.\n\nThe cert will be renewed every **60** days by default (which is configurable). Once the cert is renewed, the Apache/Nginx service will be reloaded automatically by the command: `service apache2 force-reload` or `service nginx force-reload`.\n\n\n**Please take care:  The reloadcmd is very important. The cert can be automatically renewed, but, without a correct 'reloadcmd' the cert may not be flushed to your server(like nginx or apache), then your website will not be able to show renewed cert in 60 days.**\n\n# 4. Use Standalone server to issue cert\n\n**(requires you to be root/sudoer or have permission to listen on port 80 (TCP))**\n\nPort `80` (TCP) **MUST** be free to listen on, otherwise you will be prompted to free it and try again.\n\n```bash\nacme.sh --issue --standalone -d example.com -d www.example.com -d cp.example.com\n```\n\nMore examples: https://github.com/acmesh-official/acme.sh/wiki/How-to-issue-a-cert\n\n# 5. Use Standalone ssl server to issue cert\n\n**(requires you to be root/sudoer or have permission to listen on port 443 (TCP))**\n\nPort `443` (TCP) **MUST** be free to listen on, otherwise you will be prompted to free it and try again.\n\n```bash\nacme.sh --issue --alpn -d example.com -d www.example.com -d cp.example.com\n```\n\nMore examples: https://github.com/acmesh-official/acme.sh/wiki/How-to-issue-a-cert\n\n\n# 6. Use Apache mode\n\n**(requires you to be root/sudoer, since it is required to interact with Apache server)**\n\nIf you are running a web server, it is recommended to use the `Webroot mode`.\n\nParticularly, if you are running an Apache server, you can use Apache mode instead. This mode doesn't write any files to your web root folder.\n\nJust set string \"apache\" as the second argument and it will force use of apache plugin automatically.\n\n```sh\nacme.sh --issue --apache -d example.com -d www.example.com -d cp.example.com\n```\n\n**This apache mode is only to issue the cert, it will not change your apache config files.\nYou will need to configure your website config files to use the cert by yourself.\nWe don't want to mess with your apache server, don't worry.**\n\nMore examples: https://github.com/acmesh-official/acme.sh/wiki/How-to-issue-a-cert\n\n# 7. Use Nginx mode\n\n**(requires you to be root/sudoer, since it is required to interact with Nginx server)**\n\nIf you are running a web server, it is recommended to use the `Webroot mode`.\n\nParticularly, if you are running an nginx server, you can use nginx mode instead. This mode doesn't write any files to your web root folder.\n\nJust set string \"nginx\" as the second argument.\n\nIt will configure nginx server automatically to verify the domain and then restore the nginx config to the original version.\n\nSo, the config is not changed.\n\n```sh\nacme.sh --issue --nginx -d example.com -d www.example.com -d cp.example.com\n```\n\n**This nginx mode is only to issue the cert, it will not change your nginx config files.\nYou will need to configure your website config files to use the cert by yourself.\nWe don't want to mess with your nginx server, don't worry.**\n\nMore examples: https://github.com/acmesh-official/acme.sh/wiki/How-to-issue-a-cert\n\n# 8. Automatic DNS API integration\n\nIf your DNS provider supports API access, we can use that API to automatically issue the certs.\n\nYou don't have to do anything manually!\n\n### Currently acme.sh supports most of the dns providers:\n\nhttps://github.com/acmesh-official/acme.sh/wiki/dnsapi\n\n# 9. Use DNS manual mode:\n\nSee: https://github.com/acmesh-official/acme.sh/wiki/dns-manual-mode first.\n\nIf your dns provider doesn't support any api access, you can add the txt record by hand.\n\n```bash\nacme.sh --issue --dns -d example.com -d www.example.com -d cp.example.com\n```\n\nYou should get an output like below:\n\n```sh\nAdd the following txt record:\nDomain:_acme-challenge.example.com\nTxt value:9ihDbjYfTExAYeDs4DBUeuTo18KBzwvTEjUnSwd32-c\n\nAdd the following txt record:\nDomain:_acme-challenge.www.example.com\nTxt value:9ihDbjxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n\nPlease add those txt records to the domains. Waiting for the dns to take effect.\n```\n\nThen just rerun with `renew` argument:\n\n```bash\nacme.sh --renew -d example.com\n```\n\nOk, it's done.\n\n**Take care, this is dns manual mode, it can not be renewed automatically. you will have to add a new txt record to your domain by your hand when you renew your cert.**\n\n**Please use dns api mode instead.**\n\n# 10. Issue ECC certificates\n\nJust set the `keylength` parameter with a prefix `ec-`.\n\nFor example:\n\n### Single domain ECC certificate\n\n```bash\nacme.sh --issue -w /home/wwwroot/example.com -d example.com --keylength ec-256\n```\n\n### SAN multi domain ECC certificate\n\n```bash\nacme.sh --issue -w /home/wwwroot/example.com -d example.com -d www.example.com --keylength ec-256\n```\n\nPlease look at the `keylength` parameter above.\n\nValid values are:\n\n1. **ec-256 (prime256v1, \"ECDSA P-256\", which is the default key type)**\n2. **ec-384 (secp384r1,  \"ECDSA P-384\")**\n3. **ec-521 (secp521r1,  \"ECDSA P-521\", which is not supported by Let's Encrypt yet.)**\n4. **2048   (RSA2048)**\n5. **3072   (RSA3072)**\n6. **4096   (RSA4096)**\n\n\n# 11. Issue Wildcard certificates\n\nIt's simple, just give a wildcard domain as the `-d` parameter.\n\n```sh\nacme.sh  --issue -d example.com  -d '*.example.com'  --dns dns_cf\n```\n\n\n\n# 12. How to renew the certs\n\nNo, you don't need to renew the certs manually. All the certs will be renewed automatically every **60** days.\n\nHowever, you can also force to renew a cert:\n\n```sh\nacme.sh --renew -d example.com --force\n```\n\nor, for ECC cert:\n\n```sh\nacme.sh --renew -d example.com --force --ecc\n```\n\n\n# 13. How to stop cert renewal\n\nTo stop renewal of a cert, you can execute the following to remove the cert from the renewal list:\n\n```sh\nacme.sh --remove -d example.com [--ecc]\n```\n\nThe cert/key file is not removed from the disk.\n\nYou can remove the respective directory (e.g. `~/.acme.sh/example.com`) by yourself.\n\n\n# 14. How to upgrade `acme.sh`\n\nacme.sh is in constant development, so it's strongly recommended to use the latest code.\n\nYou can update acme.sh to the latest code:\n\n```sh\nacme.sh --upgrade\n```\n\nYou can also enable auto upgrade:\n\n```sh\nacme.sh --upgrade --auto-upgrade\n```\n\nThen **acme.sh** will be kept up to date automatically.\n\nDisable auto upgrade:\n\n```sh\nacme.sh --upgrade --auto-upgrade 0\n```\n\n\n# 15. Issue a cert from an existing CSR\n\nhttps://github.com/acmesh-official/acme.sh/wiki/Issue-a-cert-from-existing-CSR\n\n\n# 16. Send notifications in cronjob\n\nhttps://github.com/acmesh-official/acme.sh/wiki/notify\n\n\n# 17. Under the Hood\n\nSpeak ACME language using shell, directly to \"Let's Encrypt\".\n\nTODO:\n\n\n# 18. Acknowledgments\n\n1. Acme-tiny: https://github.com/diafygi/acme-tiny\n2. ACME protocol: https://github.com/ietf-wg-acme/acme\n\n\n## Contributors\n\n### Code Contributors\n\nThis project exists thanks to all the people who contribute.\n<a href=\"https://github.com/acmesh-official/acme.sh/graphs/contributors\"><img src=\"https://opencollective.com/acmesh/contributors.svg?width=890&button=false\" /></a>\n\n### Financial Contributors\n\nBecome a financial contributor and help us sustain our community. [[Contribute](https://opencollective.com/acmesh/contribute)]\n\n#### Individuals\n\n<a href=\"https://opencollective.com/acmesh\"><img src=\"https://opencollective.com/acmesh/individuals.svg?width=890\"></a>\n\n#### Organizations\n\nSupport this project with your organization. Your logo will show up here with a link to your website. [[Contribute](https://opencollective.com/acmesh/contribute)]\n\n<a href=\"https://opencollective.com/acmesh/organization/0/website\"><img src=\"https://opencollective.com/acmesh/organization/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/acmesh/organization/1/website\"><img src=\"https://opencollective.com/acmesh/organization/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/acmesh/organization/2/website\"><img src=\"https://opencollective.com/acmesh/organization/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/acmesh/organization/3/website\"><img src=\"https://opencollective.com/acmesh/organization/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/acmesh/organization/4/website\"><img src=\"https://opencollective.com/acmesh/organization/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/acmesh/organization/5/website\"><img src=\"https://opencollective.com/acmesh/organization/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/acmesh/organization/6/website\"><img src=\"https://opencollective.com/acmesh/organization/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/acmesh/organization/7/website\"><img src=\"https://opencollective.com/acmesh/organization/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/acmesh/organization/8/website\"><img src=\"https://opencollective.com/acmesh/organization/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/acmesh/organization/9/website\"><img src=\"https://opencollective.com/acmesh/organization/9/avatar.svg\"></a>\n\n\n\n# 19. License & Others\n\nLicense is GPLv3\n\nPlease Star and Fork me.\n\n[Issues](https://github.com/acmesh-official/acme.sh/issues) and [pull requests](https://github.com/acmesh-official/acme.sh/pulls) are welcome.\n\n\n# 20. Donate\nYour donation makes **acme.sh** better:\n\n1. PayPal/Alipay(支付宝)/Wechat(微信): [https://donate.acme.sh/](https://donate.acme.sh/)\n\n[Donate List](https://github.com/acmesh-official/acme.sh/wiki/Donate-list)\n"
        },
        {
          "name": "acme.sh",
          "type": "blob",
          "size": 220.95,
          "content": "#!/usr/bin/env sh\n\nVER=3.1.0\n\nPROJECT_NAME=\"acme.sh\"\n\nPROJECT_ENTRY=\"acme.sh\"\n\nPROJECT=\"https://github.com/acmesh-official/$PROJECT_NAME\"\n\nDEFAULT_INSTALL_HOME=\"$HOME/.$PROJECT_NAME\"\n\n_WINDOWS_SCHEDULER_NAME=\"$PROJECT_NAME.cron\"\n\n_SCRIPT_=\"$0\"\n\n_SUB_FOLDER_NOTIFY=\"notify\"\n_SUB_FOLDER_DNSAPI=\"dnsapi\"\n_SUB_FOLDER_DEPLOY=\"deploy\"\n\n_SUB_FOLDERS=\"$_SUB_FOLDER_DNSAPI $_SUB_FOLDER_DEPLOY $_SUB_FOLDER_NOTIFY\"\n\nCA_LETSENCRYPT_V2=\"https://acme-v02.api.letsencrypt.org/directory\"\nCA_LETSENCRYPT_V2_TEST=\"https://acme-staging-v02.api.letsencrypt.org/directory\"\n\nCA_BUYPASS=\"https://api.buypass.com/acme/directory\"\nCA_BUYPASS_TEST=\"https://api.test4.buypass.no/acme/directory\"\n\nCA_ZEROSSL=\"https://acme.zerossl.com/v2/DV90\"\n_ZERO_EAB_ENDPOINT=\"https://api.zerossl.com/acme/eab-credentials-email\"\n\nCA_SSLCOM_RSA=\"https://acme.ssl.com/sslcom-dv-rsa\"\nCA_SSLCOM_ECC=\"https://acme.ssl.com/sslcom-dv-ecc\"\n\nCA_GOOGLE=\"https://dv.acme-v02.api.pki.goog/directory\"\nCA_GOOGLE_TEST=\"https://dv.acme-v02.test-api.pki.goog/directory\"\n\nDEFAULT_CA=$CA_ZEROSSL\nDEFAULT_STAGING_CA=$CA_LETSENCRYPT_V2_TEST\n\nCA_NAMES=\"\nZeroSSL.com,zerossl\nLetsEncrypt.org,letsencrypt\nLetsEncrypt.org_test,letsencrypt_test,letsencrypttest\nBuyPass.com,buypass\nBuyPass.com_test,buypass_test,buypasstest\nSSL.com,sslcom\nGoogle.com,google\nGoogle.com_test,googletest,google_test\n\"\n\nCA_SERVERS=\"$CA_ZEROSSL,$CA_LETSENCRYPT_V2,$CA_LETSENCRYPT_V2_TEST,$CA_BUYPASS,$CA_BUYPASS_TEST,$CA_SSLCOM_RSA,$CA_GOOGLE,$CA_GOOGLE_TEST\"\n\nDEFAULT_USER_AGENT=\"$PROJECT_NAME/$VER ($PROJECT)\"\n\nDEFAULT_ACCOUNT_KEY_LENGTH=ec-256\nDEFAULT_DOMAIN_KEY_LENGTH=ec-256\n\nDEFAULT_OPENSSL_BIN=\"openssl\"\n\nVTYPE_HTTP=\"http-01\"\nVTYPE_DNS=\"dns-01\"\nVTYPE_ALPN=\"tls-alpn-01\"\n\nID_TYPE_DNS=\"dns\"\nID_TYPE_IP=\"ip\"\n\nLOCAL_ANY_ADDRESS=\"0.0.0.0\"\n\nDEFAULT_RENEW=60\n\nNO_VALUE=\"no\"\n\nW_DNS=\"dns\"\nW_ALPN=\"alpn\"\nDNS_ALIAS_PREFIX=\"=\"\n\nMODE_STATELESS=\"stateless\"\n\nSTATE_VERIFIED=\"verified_ok\"\n\nNGINX=\"nginx:\"\nNGINX_START=\"#ACME_NGINX_START\"\nNGINX_END=\"#ACME_NGINX_END\"\n\nBEGIN_CSR=\"-----BEGIN [NEW ]\\{0,4\\}CERTIFICATE REQUEST-----\"\nEND_CSR=\"-----END [NEW ]\\{0,4\\}CERTIFICATE REQUEST-----\"\n\nBEGIN_CERT=\"-----BEGIN CERTIFICATE-----\"\nEND_CERT=\"-----END CERTIFICATE-----\"\n\nCONTENT_TYPE_JSON=\"application/jose+json\"\nRENEW_SKIP=2\nCODE_DNS_MANUAL=3\n\nB64CONF_START=\"__ACME_BASE64__START_\"\nB64CONF_END=\"__ACME_BASE64__END_\"\n\nECC_SEP=\"_\"\nECC_SUFFIX=\"${ECC_SEP}ecc\"\n\nLOG_LEVEL_1=1\nLOG_LEVEL_2=2\nLOG_LEVEL_3=3\nDEFAULT_LOG_LEVEL=\"$LOG_LEVEL_2\"\n\nDEBUG_LEVEL_1=1\nDEBUG_LEVEL_2=2\nDEBUG_LEVEL_3=3\nDEBUG_LEVEL_DEFAULT=$DEBUG_LEVEL_2\nDEBUG_LEVEL_NONE=0\n\nDOH_CLOUDFLARE=1\nDOH_GOOGLE=2\nDOH_ALI=3\nDOH_DP=4\n\nHIDDEN_VALUE=\"[hidden](please add '--output-insecure' to see this value)\"\n\nSYSLOG_ERROR=\"user.error\"\nSYSLOG_INFO=\"user.info\"\nSYSLOG_DEBUG=\"user.debug\"\n\n#error\nSYSLOG_LEVEL_ERROR=3\n#info\nSYSLOG_LEVEL_INFO=6\n#debug\nSYSLOG_LEVEL_DEBUG=7\n#debug2\nSYSLOG_LEVEL_DEBUG_2=8\n#debug3\nSYSLOG_LEVEL_DEBUG_3=9\n\nSYSLOG_LEVEL_DEFAULT=$SYSLOG_LEVEL_ERROR\n#none\nSYSLOG_LEVEL_NONE=0\n\nNOTIFY_LEVEL_DISABLE=0\nNOTIFY_LEVEL_ERROR=1\nNOTIFY_LEVEL_RENEW=2\nNOTIFY_LEVEL_SKIP=3\n\nNOTIFY_LEVEL_DEFAULT=$NOTIFY_LEVEL_RENEW\n\nNOTIFY_MODE_BULK=0\nNOTIFY_MODE_CERT=1\n\nNOTIFY_MODE_DEFAULT=$NOTIFY_MODE_BULK\n\n_BASE64_ENCODED_CFGS=\"Le_PreHook Le_PostHook Le_RenewHook Le_Preferred_Chain Le_ReloadCmd\"\n\n_DEBUG_WIKI=\"https://github.com/acmesh-official/acme.sh/wiki/How-to-debug-acme.sh\"\n\n_PREPARE_LINK=\"https://github.com/acmesh-official/acme.sh/wiki/Install-preparations\"\n\n_STATELESS_WIKI=\"https://github.com/acmesh-official/acme.sh/wiki/Stateless-Mode\"\n\n_DNS_ALIAS_WIKI=\"https://github.com/acmesh-official/acme.sh/wiki/DNS-alias-mode\"\n\n_DNS_MANUAL_WIKI=\"https://github.com/acmesh-official/acme.sh/wiki/dns-manual-mode\"\n\n_DNS_API_WIKI=\"https://github.com/acmesh-official/acme.sh/wiki/dnsapi\"\n\n_NOTIFY_WIKI=\"https://github.com/acmesh-official/acme.sh/wiki/notify\"\n\n_SUDO_WIKI=\"https://github.com/acmesh-official/acme.sh/wiki/sudo\"\n\n_REVOKE_WIKI=\"https://github.com/acmesh-official/acme.sh/wiki/revokecert\"\n\n_ZEROSSL_WIKI=\"https://github.com/acmesh-official/acme.sh/wiki/ZeroSSL.com-CA\"\n\n_SSLCOM_WIKI=\"https://github.com/acmesh-official/acme.sh/wiki/SSL.com-CA\"\n\n_SERVER_WIKI=\"https://github.com/acmesh-official/acme.sh/wiki/Server\"\n\n_PREFERRED_CHAIN_WIKI=\"https://github.com/acmesh-official/acme.sh/wiki/Preferred-Chain\"\n\n_VALIDITY_WIKI=\"https://github.com/acmesh-official/acme.sh/wiki/Validity\"\n\n_DNSCHECK_WIKI=\"https://github.com/acmesh-official/acme.sh/wiki/dnscheck\"\n\n_DNS_MANUAL_ERR=\"The dns manual mode can not renew automatically, you must issue it again manually. You'd better use the other modes instead.\"\n\n_DNS_MANUAL_WARN=\"It seems that you are using dns manual mode. please take care: $_DNS_MANUAL_ERR\"\n\n_DNS_MANUAL_ERROR=\"It seems that you are using dns manual mode. Read this link first: $_DNS_MANUAL_WIKI\"\n\n__INTERACTIVE=\"\"\nif [ -t 1 ]; then\n  __INTERACTIVE=\"1\"\nfi\n\n__green() {\n  if [ \"${__INTERACTIVE}${ACME_NO_COLOR:-0}\" = \"10\" -o \"${ACME_FORCE_COLOR}\" = \"1\" ]; then\n    printf '\\33[1;32m%b\\33[0m' \"$1\"\n    return\n  fi\n  printf -- \"%b\" \"$1\"\n}\n\n__red() {\n  if [ \"${__INTERACTIVE}${ACME_NO_COLOR:-0}\" = \"10\" -o \"${ACME_FORCE_COLOR}\" = \"1\" ]; then\n    printf '\\33[1;31m%b\\33[0m' \"$1\"\n    return\n  fi\n  printf -- \"%b\" \"$1\"\n}\n\n_printargs() {\n  _exitstatus=\"$?\"\n  if [ -z \"$NO_TIMESTAMP\" ] || [ \"$NO_TIMESTAMP\" = \"0\" ]; then\n    printf -- \"%s\" \"[$(date)] \"\n  fi\n  if [ -z \"$2\" ]; then\n    printf -- \"%s\" \"$1\"\n  else\n    printf -- \"%s\" \"$1='$2'\"\n  fi\n  printf \"\\n\"\n  # return the saved exit status\n  return \"$_exitstatus\"\n}\n\n_dlg_versions() {\n  echo \"Diagnosis versions: \"\n  echo \"openssl:$ACME_OPENSSL_BIN\"\n  if _exists \"${ACME_OPENSSL_BIN:-openssl}\"; then\n    ${ACME_OPENSSL_BIN:-openssl} version 2>&1\n  else\n    echo \"$ACME_OPENSSL_BIN doesn't exist.\"\n  fi\n\n  echo \"Apache:\"\n  if [ \"$_APACHECTL\" ] && _exists \"$_APACHECTL\"; then\n    $_APACHECTL -V 2>&1\n  else\n    echo \"Apache doesn't exist.\"\n  fi\n\n  echo \"nginx:\"\n  if _exists \"nginx\"; then\n    nginx -V 2>&1\n  else\n    echo \"nginx doesn't exist.\"\n  fi\n\n  echo \"socat:\"\n  if _exists \"socat\"; then\n    socat -V 2>&1\n  else\n    _debug \"socat doesn't exist.\"\n  fi\n}\n\n#class\n_syslog() {\n  _exitstatus=\"$?\"\n  if [ \"${SYS_LOG:-$SYSLOG_LEVEL_NONE}\" = \"$SYSLOG_LEVEL_NONE\" ]; then\n    return\n  fi\n  _logclass=\"$1\"\n  shift\n  if [ -z \"$__logger_i\" ]; then\n    if _contains \"$(logger --help 2>&1)\" \"-i\"; then\n      __logger_i=\"logger -i\"\n    else\n      __logger_i=\"logger\"\n    fi\n  fi\n  $__logger_i -t \"$PROJECT_NAME\" -p \"$_logclass\" \"$(_printargs \"$@\")\" >/dev/null 2>&1\n  return \"$_exitstatus\"\n}\n\n_log() {\n  [ -z \"$LOG_FILE\" ] && return\n  _printargs \"$@\" >>\"$LOG_FILE\"\n}\n\n_info() {\n  _log \"$@\"\n  if [ \"${SYS_LOG:-$SYSLOG_LEVEL_NONE}\" -ge \"$SYSLOG_LEVEL_INFO\" ]; then\n    _syslog \"$SYSLOG_INFO\" \"$@\"\n  fi\n  _printargs \"$@\"\n}\n\n_err() {\n  _syslog \"$SYSLOG_ERROR\" \"$@\"\n  _log \"$@\"\n  if [ -z \"$NO_TIMESTAMP\" ] || [ \"$NO_TIMESTAMP\" = \"0\" ]; then\n    printf -- \"%s\" \"[$(date)] \" >&2\n  fi\n  if [ -z \"$2\" ]; then\n    __red \"$1\" >&2\n  else\n    __red \"$1='$2'\" >&2\n  fi\n  printf \"\\n\" >&2\n  return 1\n}\n\n_usage() {\n  __red \"$@\" >&2\n  printf \"\\n\" >&2\n}\n\n__debug_bash_helper() {\n  # At this point only do for --debug 3\n  if [ \"${DEBUG:-$DEBUG_LEVEL_NONE}\" -lt \"$DEBUG_LEVEL_3\" ]; then\n    return\n  fi\n  # Return extra debug info when running with bash, otherwise return empty\n  # string.\n  if [ -z \"${BASH_VERSION}\" ]; then\n    return\n  fi\n  # We are a bash shell at this point, return the filename, function name, and\n  # line number as a string\n  _dbh_saveIFS=$IFS\n  IFS=\" \"\n  # Must use eval or syntax error happens under dash. The eval should use\n  # single quotes as older versions of busybox had a bug with double quotes and\n  # eval.\n  # Use 'caller 1' as we want one level up the stack as we should be called\n  # by one of the _debug* functions\n  eval '_dbh_called=($(caller 1))'\n  IFS=$_dbh_saveIFS\n  eval '_dbh_file=${_dbh_called[2]}'\n  if [ -n \"${_script_home}\" ]; then\n    # Trim off the _script_home directory name\n    eval '_dbh_file=${_dbh_file#$_script_home/}'\n  fi\n  eval '_dbh_function=${_dbh_called[1]}'\n  eval '_dbh_lineno=${_dbh_called[0]}'\n  printf \"%-40s \" \"$_dbh_file:${_dbh_function}:${_dbh_lineno}\"\n}\n\n_debug() {\n  if [ \"${LOG_LEVEL:-$DEFAULT_LOG_LEVEL}\" -ge \"$LOG_LEVEL_1\" ]; then\n    _log \"$@\"\n  fi\n  if [ \"${SYS_LOG:-$SYSLOG_LEVEL_NONE}\" -ge \"$SYSLOG_LEVEL_DEBUG\" ]; then\n    _syslog \"$SYSLOG_DEBUG\" \"$@\"\n  fi\n  if [ \"${DEBUG:-$DEBUG_LEVEL_NONE}\" -ge \"$DEBUG_LEVEL_1\" ]; then\n    _bash_debug=$(__debug_bash_helper)\n    _printargs \"${_bash_debug}$@\" >&2\n  fi\n}\n\n#output the sensitive messages\n_secure_debug() {\n  if [ \"${LOG_LEVEL:-$DEFAULT_LOG_LEVEL}\" -ge \"$LOG_LEVEL_1\" ]; then\n    if [ \"$OUTPUT_INSECURE\" = \"1\" ]; then\n      _log \"$@\"\n    else\n      _log \"$1\" \"$HIDDEN_VALUE\"\n    fi\n  fi\n  if [ \"${SYS_LOG:-$SYSLOG_LEVEL_NONE}\" -ge \"$SYSLOG_LEVEL_DEBUG\" ]; then\n    _syslog \"$SYSLOG_DEBUG\" \"$1\" \"$HIDDEN_VALUE\"\n  fi\n  if [ \"${DEBUG:-$DEBUG_LEVEL_NONE}\" -ge \"$DEBUG_LEVEL_1\" ]; then\n    if [ \"$OUTPUT_INSECURE\" = \"1\" ]; then\n      _printargs \"$@\" >&2\n    else\n      _printargs \"$1\" \"$HIDDEN_VALUE\" >&2\n    fi\n  fi\n}\n\n_debug2() {\n  if [ \"${LOG_LEVEL:-$DEFAULT_LOG_LEVEL}\" -ge \"$LOG_LEVEL_2\" ]; then\n    _log \"$@\"\n  fi\n  if [ \"${SYS_LOG:-$SYSLOG_LEVEL_NONE}\" -ge \"$SYSLOG_LEVEL_DEBUG_2\" ]; then\n    _syslog \"$SYSLOG_DEBUG\" \"$@\"\n  fi\n  if [ \"${DEBUG:-$DEBUG_LEVEL_NONE}\" -ge \"$DEBUG_LEVEL_2\" ]; then\n    _bash_debug=$(__debug_bash_helper)\n    _printargs \"${_bash_debug}$@\" >&2\n  fi\n}\n\n_secure_debug2() {\n  if [ \"${LOG_LEVEL:-$DEFAULT_LOG_LEVEL}\" -ge \"$LOG_LEVEL_2\" ]; then\n    if [ \"$OUTPUT_INSECURE\" = \"1\" ]; then\n      _log \"$@\"\n    else\n      _log \"$1\" \"$HIDDEN_VALUE\"\n    fi\n  fi\n  if [ \"${SYS_LOG:-$SYSLOG_LEVEL_NONE}\" -ge \"$SYSLOG_LEVEL_DEBUG_2\" ]; then\n    _syslog \"$SYSLOG_DEBUG\" \"$1\" \"$HIDDEN_VALUE\"\n  fi\n  if [ \"${DEBUG:-$DEBUG_LEVEL_NONE}\" -ge \"$DEBUG_LEVEL_2\" ]; then\n    if [ \"$OUTPUT_INSECURE\" = \"1\" ]; then\n      _printargs \"$@\" >&2\n    else\n      _printargs \"$1\" \"$HIDDEN_VALUE\" >&2\n    fi\n  fi\n}\n\n_debug3() {\n  if [ \"${LOG_LEVEL:-$DEFAULT_LOG_LEVEL}\" -ge \"$LOG_LEVEL_3\" ]; then\n    _log \"$@\"\n  fi\n  if [ \"${SYS_LOG:-$SYSLOG_LEVEL_NONE}\" -ge \"$SYSLOG_LEVEL_DEBUG_3\" ]; then\n    _syslog \"$SYSLOG_DEBUG\" \"$@\"\n  fi\n  if [ \"${DEBUG:-$DEBUG_LEVEL_NONE}\" -ge \"$DEBUG_LEVEL_3\" ]; then\n    _bash_debug=$(__debug_bash_helper)\n    _printargs \"${_bash_debug}$@\" >&2\n  fi\n}\n\n_secure_debug3() {\n  if [ \"${LOG_LEVEL:-$DEFAULT_LOG_LEVEL}\" -ge \"$LOG_LEVEL_3\" ]; then\n    if [ \"$OUTPUT_INSECURE\" = \"1\" ]; then\n      _log \"$@\"\n    else\n      _log \"$1\" \"$HIDDEN_VALUE\"\n    fi\n  fi\n  if [ \"${SYS_LOG:-$SYSLOG_LEVEL_NONE}\" -ge \"$SYSLOG_LEVEL_DEBUG_3\" ]; then\n    _syslog \"$SYSLOG_DEBUG\" \"$1\" \"$HIDDEN_VALUE\"\n  fi\n  if [ \"${DEBUG:-$DEBUG_LEVEL_NONE}\" -ge \"$DEBUG_LEVEL_3\" ]; then\n    if [ \"$OUTPUT_INSECURE\" = \"1\" ]; then\n      _printargs \"$@\" >&2\n    else\n      _printargs \"$1\" \"$HIDDEN_VALUE\" >&2\n    fi\n  fi\n}\n\n_upper_case() {\n  # shellcheck disable=SC2018,SC2019\n  tr '[a-z]' '[A-Z]'\n}\n\n_lower_case() {\n  # shellcheck disable=SC2018,SC2019\n  tr '[A-Z]' '[a-z]'\n}\n\n_startswith() {\n  _str=\"$1\"\n  _sub=\"$2\"\n  echo \"$_str\" | grep -- \"^$_sub\" >/dev/null 2>&1\n}\n\n_endswith() {\n  _str=\"$1\"\n  _sub=\"$2\"\n  echo \"$_str\" | grep -- \"$_sub\\$\" >/dev/null 2>&1\n}\n\n_contains() {\n  _str=\"$1\"\n  _sub=\"$2\"\n  echo \"$_str\" | grep -- \"$_sub\" >/dev/null 2>&1\n}\n\n_hasfield() {\n  _str=\"$1\"\n  _field=\"$2\"\n  _sep=\"$3\"\n  if [ -z \"$_field\" ]; then\n    _usage \"Usage: str field  [sep]\"\n    return 1\n  fi\n\n  if [ -z \"$_sep\" ]; then\n    _sep=\",\"\n  fi\n\n  for f in $(echo \"$_str\" | tr \"$_sep\" ' '); do\n    if [ \"$f\" = \"$_field\" ]; then\n      _debug2 \"'$_str' contains '$_field'\"\n      return 0 #contains ok\n    fi\n  done\n  _debug2 \"'$_str' does not contain '$_field'\"\n  return 1 #not contains\n}\n\n# str index [sep]\n_getfield() {\n  _str=\"$1\"\n  _findex=\"$2\"\n  _sep=\"$3\"\n\n  if [ -z \"$_findex\" ]; then\n    _usage \"Usage: str field  [sep]\"\n    return 1\n  fi\n\n  if [ -z \"$_sep\" ]; then\n    _sep=\",\"\n  fi\n\n  _ffi=\"$_findex\"\n  while [ \"$_ffi\" -gt \"0\" ]; do\n    _fv=\"$(echo \"$_str\" | cut -d \"$_sep\" -f \"$_ffi\")\"\n    if [ \"$_fv\" ]; then\n      printf -- \"%s\" \"$_fv\"\n      return 0\n    fi\n    _ffi=\"$(_math \"$_ffi\" - 1)\"\n  done\n\n  printf -- \"%s\" \"$_str\"\n\n}\n\n_exists() {\n  cmd=\"$1\"\n  if [ -z \"$cmd\" ]; then\n    _usage \"Usage: _exists cmd\"\n    return 1\n  fi\n\n  if eval type type >/dev/null 2>&1; then\n    eval type \"$cmd\" >/dev/null 2>&1\n  elif command >/dev/null 2>&1; then\n    command -v \"$cmd\" >/dev/null 2>&1\n  else\n    which \"$cmd\" >/dev/null 2>&1\n  fi\n  ret=\"$?\"\n  _debug3 \"$cmd exists=$ret\"\n  return $ret\n}\n\n#a + b\n_math() {\n  _m_opts=\"$@\"\n  printf \"%s\" \"$(($_m_opts))\"\n}\n\n_h_char_2_dec() {\n  _ch=$1\n  case \"${_ch}\" in\n  a | A)\n    printf \"10\"\n    ;;\n  b | B)\n    printf \"11\"\n    ;;\n  c | C)\n    printf \"12\"\n    ;;\n  d | D)\n    printf \"13\"\n    ;;\n  e | E)\n    printf \"14\"\n    ;;\n  f | F)\n    printf \"15\"\n    ;;\n  *)\n    printf \"%s\" \"$_ch\"\n    ;;\n  esac\n\n}\n\n_URGLY_PRINTF=\"\"\nif [ \"$(printf '\\x41')\" != 'A' ]; then\n  _URGLY_PRINTF=1\nfi\n\n_ESCAPE_XARGS=\"\"\nif _exists xargs && [ \"$(printf %s '\\\\x41' | xargs printf)\" = 'A' ]; then\n  _ESCAPE_XARGS=1\nfi\n\n_h2b() {\n  if _exists xxd; then\n    if _contains \"$(xxd --help 2>&1)\" \"assumes -c30\"; then\n      if xxd -r -p -c 9999 2>/dev/null; then\n        return\n      fi\n    else\n      if xxd -r -p 2>/dev/null; then\n        return\n      fi\n    fi\n  fi\n\n  hex=$(cat)\n  ic=\"\"\n  jc=\"\"\n  _debug2 _URGLY_PRINTF \"$_URGLY_PRINTF\"\n  if [ -z \"$_URGLY_PRINTF\" ]; then\n    if [ \"$_ESCAPE_XARGS\" ] && _exists xargs; then\n      _debug2 \"xargs\"\n      echo \"$hex\" | _upper_case | sed 's/\\([0-9A-F]\\{2\\}\\)/\\\\\\\\\\\\x\\1/g' | xargs printf\n    else\n      for h in $(echo \"$hex\" | _upper_case | sed 's/\\([0-9A-F]\\{2\\}\\)/ \\1/g'); do\n        if [ -z \"$h\" ]; then\n          break\n        fi\n        printf \"\\x$h%s\"\n      done\n    fi\n  else\n    for c in $(echo \"$hex\" | _upper_case | sed 's/\\([0-9A-F]\\)/ \\1/g'); do\n      if [ -z \"$ic\" ]; then\n        ic=$c\n        continue\n      fi\n      jc=$c\n      ic=\"$(_h_char_2_dec \"$ic\")\"\n      jc=\"$(_h_char_2_dec \"$jc\")\"\n      printf '\\'\"$(printf \"%o\" \"$(_math \"$ic\" \\* 16 + $jc)\")\"\"%s\"\n      ic=\"\"\n      jc=\"\"\n    done\n  fi\n\n}\n\n_is_solaris() {\n  _contains \"${__OS__:=$(uname -a)}\" \"solaris\" || _contains \"${__OS__:=$(uname -a)}\" \"SunOS\"\n}\n\n#_ascii_hex str\n#this can only process ascii chars, should only be used when od command is missing as a backup way.\n_ascii_hex() {\n  _debug2 \"Using _ascii_hex\"\n  _str=\"$1\"\n  _str_len=${#_str}\n  _h_i=1\n  while [ \"$_h_i\" -le \"$_str_len\" ]; do\n    _str_c=\"$(printf \"%s\" \"$_str\" | cut -c \"$_h_i\")\"\n    printf \" %02x\" \"'$_str_c\"\n    _h_i=\"$(_math \"$_h_i\" + 1)\"\n  done\n}\n\n#stdin  output hexstr splited by one space\n#input:\"abc\"\n#output: \" 61 62 63\"\n_hex_dump() {\n  if _exists od; then\n    od -A n -v -t x1 | tr -s \" \" | sed 's/ $//' | tr -d \"\\r\\t\\n\"\n  elif _exists hexdump; then\n    _debug3 \"using hexdump\"\n    hexdump -v -e '/1 \"\"' -e '/1 \" %02x\" \"\"'\n  elif _exists xxd; then\n    _debug3 \"using xxd\"\n    xxd -ps -c 20 -i | sed \"s/ 0x/ /g\" | tr -d \",\\n\" | tr -s \" \"\n  else\n    _debug3 \"using _ascii_hex\"\n    str=$(cat)\n    _ascii_hex \"$str\"\n  fi\n}\n\n#url encode, no-preserved chars\n#A  B  C  D  E  F  G  H  I  J  K  L  M  N  O  P  Q  R  S  T  U  V  W  X  Y  Z\n#41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50 51 52 53 54 55 56 57 58 59 5a\n\n#a  b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q  r  s  t  u  v  w  x  y  z\n#61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e 6f 70 71 72 73 74 75 76 77 78 79 7a\n\n#0  1  2  3  4  5  6  7  8  9  -  _  .  ~\n#30 31 32 33 34 35 36 37 38 39 2d 5f 2e 7e\n\n#_url_encode [upper-hex]  the encoded hex will be upper-case if the argument upper-hex is followed\n#stdin stdout\n_url_encode() {\n  _upper_hex=$1\n  _hex_str=$(_hex_dump)\n  _debug3 \"_url_encode\"\n  _debug3 \"_hex_str\" \"$_hex_str\"\n  for _hex_code in $_hex_str; do\n    #upper case\n    case \"${_hex_code}\" in\n    \"41\")\n      printf \"%s\" \"A\"\n      ;;\n    \"42\")\n      printf \"%s\" \"B\"\n      ;;\n    \"43\")\n      printf \"%s\" \"C\"\n      ;;\n    \"44\")\n      printf \"%s\" \"D\"\n      ;;\n    \"45\")\n      printf \"%s\" \"E\"\n      ;;\n    \"46\")\n      printf \"%s\" \"F\"\n      ;;\n    \"47\")\n      printf \"%s\" \"G\"\n      ;;\n    \"48\")\n      printf \"%s\" \"H\"\n      ;;\n    \"49\")\n      printf \"%s\" \"I\"\n      ;;\n    \"4a\")\n      printf \"%s\" \"J\"\n      ;;\n    \"4b\")\n      printf \"%s\" \"K\"\n      ;;\n    \"4c\")\n      printf \"%s\" \"L\"\n      ;;\n    \"4d\")\n      printf \"%s\" \"M\"\n      ;;\n    \"4e\")\n      printf \"%s\" \"N\"\n      ;;\n    \"4f\")\n      printf \"%s\" \"O\"\n      ;;\n    \"50\")\n      printf \"%s\" \"P\"\n      ;;\n    \"51\")\n      printf \"%s\" \"Q\"\n      ;;\n    \"52\")\n      printf \"%s\" \"R\"\n      ;;\n    \"53\")\n      printf \"%s\" \"S\"\n      ;;\n    \"54\")\n      printf \"%s\" \"T\"\n      ;;\n    \"55\")\n      printf \"%s\" \"U\"\n      ;;\n    \"56\")\n      printf \"%s\" \"V\"\n      ;;\n    \"57\")\n      printf \"%s\" \"W\"\n      ;;\n    \"58\")\n      printf \"%s\" \"X\"\n      ;;\n    \"59\")\n      printf \"%s\" \"Y\"\n      ;;\n    \"5a\")\n      printf \"%s\" \"Z\"\n      ;;\n\n      #lower case\n    \"61\")\n      printf \"%s\" \"a\"\n      ;;\n    \"62\")\n      printf \"%s\" \"b\"\n      ;;\n    \"63\")\n      printf \"%s\" \"c\"\n      ;;\n    \"64\")\n      printf \"%s\" \"d\"\n      ;;\n    \"65\")\n      printf \"%s\" \"e\"\n      ;;\n    \"66\")\n      printf \"%s\" \"f\"\n      ;;\n    \"67\")\n      printf \"%s\" \"g\"\n      ;;\n    \"68\")\n      printf \"%s\" \"h\"\n      ;;\n    \"69\")\n      printf \"%s\" \"i\"\n      ;;\n    \"6a\")\n      printf \"%s\" \"j\"\n      ;;\n    \"6b\")\n      printf \"%s\" \"k\"\n      ;;\n    \"6c\")\n      printf \"%s\" \"l\"\n      ;;\n    \"6d\")\n      printf \"%s\" \"m\"\n      ;;\n    \"6e\")\n      printf \"%s\" \"n\"\n      ;;\n    \"6f\")\n      printf \"%s\" \"o\"\n      ;;\n    \"70\")\n      printf \"%s\" \"p\"\n      ;;\n    \"71\")\n      printf \"%s\" \"q\"\n      ;;\n    \"72\")\n      printf \"%s\" \"r\"\n      ;;\n    \"73\")\n      printf \"%s\" \"s\"\n      ;;\n    \"74\")\n      printf \"%s\" \"t\"\n      ;;\n    \"75\")\n      printf \"%s\" \"u\"\n      ;;\n    \"76\")\n      printf \"%s\" \"v\"\n      ;;\n    \"77\")\n      printf \"%s\" \"w\"\n      ;;\n    \"78\")\n      printf \"%s\" \"x\"\n      ;;\n    \"79\")\n      printf \"%s\" \"y\"\n      ;;\n    \"7a\")\n      printf \"%s\" \"z\"\n      ;;\n      #numbers\n    \"30\")\n      printf \"%s\" \"0\"\n      ;;\n    \"31\")\n      printf \"%s\" \"1\"\n      ;;\n    \"32\")\n      printf \"%s\" \"2\"\n      ;;\n    \"33\")\n      printf \"%s\" \"3\"\n      ;;\n    \"34\")\n      printf \"%s\" \"4\"\n      ;;\n    \"35\")\n      printf \"%s\" \"5\"\n      ;;\n    \"36\")\n      printf \"%s\" \"6\"\n      ;;\n    \"37\")\n      printf \"%s\" \"7\"\n      ;;\n    \"38\")\n      printf \"%s\" \"8\"\n      ;;\n    \"39\")\n      printf \"%s\" \"9\"\n      ;;\n    \"2d\")\n      printf \"%s\" \"-\"\n      ;;\n    \"5f\")\n      printf \"%s\" \"_\"\n      ;;\n    \"2e\")\n      printf \"%s\" \".\"\n      ;;\n    \"7e\")\n      printf \"%s\" \"~\"\n      ;;\n    #other hex\n    *)\n      if [ \"$_upper_hex\" = \"upper-hex\" ]; then\n        _hex_code=$(printf \"%s\" \"$_hex_code\" | _upper_case)\n      fi\n      printf '%%%s' \"$_hex_code\"\n      ;;\n    esac\n  done\n}\n\n_json_encode() {\n  _j_str=\"$(sed 's/\"/\\\\\"/g' | sed \"s/\\r/\\\\r/g\")\"\n  _debug3 \"_json_encode\"\n  _debug3 \"_j_str\" \"$_j_str\"\n  echo \"$_j_str\" | _hex_dump | _lower_case | sed 's/0a/5c 6e/g' | tr -d ' ' | _h2b | tr -d \"\\r\\n\"\n}\n\n#from: http:\\/\\/  to http://\n_json_decode() {\n  _j_str=\"$(sed 's#\\\\/#/#g')\"\n  _debug3 \"_json_decode\"\n  _debug3 \"_j_str\" \"$_j_str\"\n  echo \"$_j_str\"\n}\n\n#options file\n_sed_i() {\n  options=\"$1\"\n  filename=\"$2\"\n  if [ -z \"$filename\" ]; then\n    _usage \"Usage:_sed_i options filename\"\n    return 1\n  fi\n  _debug2 options \"$options\"\n  if sed -h 2>&1 | grep \"\\-i\\[SUFFIX]\" >/dev/null 2>&1; then\n    _debug \"Using sed  -i\"\n    sed -i \"$options\" \"$filename\"\n  else\n    _debug \"No -i support in sed\"\n    text=\"$(cat \"$filename\")\"\n    echo \"$text\" | sed \"$options\" >\"$filename\"\n  fi\n}\n\nif [ \"$(echo abc | egrep -o b 2>/dev/null)\" = \"b\" ]; then\n  __USE_EGREP=1\nelse\n  __USE_EGREP=\"\"\nfi\n\n_egrep_o() {\n  if [ \"$__USE_EGREP\" ]; then\n    egrep -o -- \"$1\" 2>/dev/null\n  else\n    sed -n 's/.*\\('\"$1\"'\\).*/\\1/p'\n  fi\n}\n\n#Usage: file startline endline\n_getfile() {\n  filename=\"$1\"\n  startline=\"$2\"\n  endline=\"$3\"\n  if [ -z \"$endline\" ]; then\n    _usage \"Usage: file startline endline\"\n    return 1\n  fi\n\n  i=\"$(grep -n -- \"$startline\" \"$filename\" | cut -d : -f 1)\"\n  if [ -z \"$i\" ]; then\n    _err \"Cannot find start line: $startline\"\n    return 1\n  fi\n  i=\"$(_math \"$i\" + 1)\"\n  _debug i \"$i\"\n\n  j=\"$(grep -n -- \"$endline\" \"$filename\" | cut -d : -f 1)\"\n  if [ -z \"$j\" ]; then\n    _err \"Cannot find end line: $endline\"\n    return 1\n  fi\n  j=\"$(_math \"$j\" - 1)\"\n  _debug j \"$j\"\n\n  sed -n \"$i,${j}p\" \"$filename\"\n\n}\n\n#Usage: multiline\n_base64() {\n  [ \"\" ] #urgly\n  if [ \"$1\" ]; then\n    _debug3 \"base64 multiline:'$1'\"\n    ${ACME_OPENSSL_BIN:-openssl} base64 -e\n  else\n    _debug3 \"base64 single line.\"\n    ${ACME_OPENSSL_BIN:-openssl} base64 -e | tr -d '\\r\\n'\n  fi\n}\n\n#Usage: multiline\n_dbase64() {\n  if [ \"$1\" ]; then\n    ${ACME_OPENSSL_BIN:-openssl} base64 -d\n  else\n    ${ACME_OPENSSL_BIN:-openssl} base64 -d -A\n  fi\n}\n\n#file\n_checkcert() {\n  _cf=\"$1\"\n  if [ \"$DEBUG\" ]; then\n    ${ACME_OPENSSL_BIN:-openssl} x509 -noout -text -in \"$_cf\"\n  else\n    ${ACME_OPENSSL_BIN:-openssl} x509 -noout -text -in \"$_cf\" >/dev/null 2>&1\n  fi\n}\n\n#Usage: hashalg  [outputhex]\n#Output Base64-encoded digest\n_digest() {\n  alg=\"$1\"\n  if [ -z \"$alg\" ]; then\n    _usage \"Usage: _digest hashalg\"\n    return 1\n  fi\n\n  outputhex=\"$2\"\n\n  if [ \"$alg\" = \"sha256\" ] || [ \"$alg\" = \"sha1\" ] || [ \"$alg\" = \"md5\" ]; then\n    if [ \"$outputhex\" ]; then\n      ${ACME_OPENSSL_BIN:-openssl} dgst -\"$alg\" -hex | cut -d = -f 2 | tr -d ' '\n    else\n      ${ACME_OPENSSL_BIN:-openssl} dgst -\"$alg\" -binary | _base64\n    fi\n  else\n    _err \"$alg is not supported yet\"\n    return 1\n  fi\n\n}\n\n#Usage: hashalg  secret_hex  [outputhex]\n#Output binary hmac\n_hmac() {\n  alg=\"$1\"\n  secret_hex=\"$2\"\n  outputhex=\"$3\"\n\n  if [ -z \"$secret_hex\" ]; then\n    _usage \"Usage: _hmac hashalg secret [outputhex]\"\n    return 1\n  fi\n\n  if [ \"$alg\" = \"sha256\" ] || [ \"$alg\" = \"sha1\" ]; then\n    if [ \"$outputhex\" ]; then\n      (${ACME_OPENSSL_BIN:-openssl} dgst -\"$alg\" -mac HMAC -macopt \"hexkey:$secret_hex\" 2>/dev/null || ${ACME_OPENSSL_BIN:-openssl} dgst -\"$alg\" -hmac \"$(printf \"%s\" \"$secret_hex\" | _h2b)\") | cut -d = -f 2 | tr -d ' '\n    else\n      ${ACME_OPENSSL_BIN:-openssl} dgst -\"$alg\" -mac HMAC -macopt \"hexkey:$secret_hex\" -binary 2>/dev/null || ${ACME_OPENSSL_BIN:-openssl} dgst -\"$alg\" -hmac \"$(printf \"%s\" \"$secret_hex\" | _h2b)\" -binary\n    fi\n  else\n    _err \"$alg is not supported yet\"\n    return 1\n  fi\n\n}\n\n#Usage: keyfile hashalg\n#Output: Base64-encoded signature value\n_sign() {\n  keyfile=\"$1\"\n  alg=\"$2\"\n  if [ -z \"$alg\" ]; then\n    _usage \"Usage: _sign keyfile hashalg\"\n    return 1\n  fi\n\n  _sign_openssl=\"${ACME_OPENSSL_BIN:-openssl} dgst -sign $keyfile \"\n\n  if _isRSA \"$keyfile\" >/dev/null 2>&1; then\n    $_sign_openssl -$alg | _base64\n  elif _isEcc \"$keyfile\" >/dev/null 2>&1; then\n    if ! _signedECText=\"$($_sign_openssl -sha$__ECC_KEY_LEN | ${ACME_OPENSSL_BIN:-openssl} asn1parse -inform DER)\"; then\n      _err \"Sign failed: $_sign_openssl\"\n      _err \"Key file: $keyfile\"\n      _err \"Key content: $(wc -l <\"$keyfile\") lines\"\n      return 1\n    fi\n    _debug3 \"_signedECText\" \"$_signedECText\"\n    _ec_r=\"$(echo \"$_signedECText\" | _head_n 2 | _tail_n 1 | cut -d : -f 4 | tr -d \"\\r\\n\")\"\n    _ec_s=\"$(echo \"$_signedECText\" | _head_n 3 | _tail_n 1 | cut -d : -f 4 | tr -d \"\\r\\n\")\"\n    if [ \"$__ECC_KEY_LEN\" -eq \"256\" ]; then\n      while [ \"${#_ec_r}\" -lt \"64\" ]; do\n        _ec_r=\"0${_ec_r}\"\n      done\n      while [ \"${#_ec_s}\" -lt \"64\" ]; do\n        _ec_s=\"0${_ec_s}\"\n      done\n    fi\n    if [ \"$__ECC_KEY_LEN\" -eq \"384\" ]; then\n      while [ \"${#_ec_r}\" -lt \"96\" ]; do\n        _ec_r=\"0${_ec_r}\"\n      done\n      while [ \"${#_ec_s}\" -lt \"96\" ]; do\n        _ec_s=\"0${_ec_s}\"\n      done\n    fi\n    if [ \"$__ECC_KEY_LEN\" -eq \"512\" ]; then\n      while [ \"${#_ec_r}\" -lt \"132\" ]; do\n        _ec_r=\"0${_ec_r}\"\n      done\n      while [ \"${#_ec_s}\" -lt \"132\" ]; do\n        _ec_s=\"0${_ec_s}\"\n      done\n    fi\n    _debug3 \"_ec_r\" \"$_ec_r\"\n    _debug3 \"_ec_s\" \"$_ec_s\"\n    printf \"%s\" \"$_ec_r$_ec_s\" | _h2b | _base64\n  else\n    _err \"Unknown key file format.\"\n    return 1\n  fi\n\n}\n\n#keylength or isEcc flag (empty str => not ecc)\n_isEccKey() {\n  _length=\"$1\"\n\n  if [ -z \"$_length\" ]; then\n    return 1\n  fi\n\n  [ \"$_length\" != \"1024\" ] &&\n    [ \"$_length\" != \"2048\" ] &&\n    [ \"$_length\" != \"3072\" ] &&\n    [ \"$_length\" != \"4096\" ] &&\n    [ \"$_length\" != \"8192\" ]\n}\n\n# _createkey  2048|ec-256   file\n_createkey() {\n  length=\"$1\"\n  f=\"$2\"\n  _debug2 \"_createkey for file:$f\"\n  eccname=\"$length\"\n  if _startswith \"$length\" \"ec-\"; then\n    length=$(printf \"%s\" \"$length\" | cut -d '-' -f 2-100)\n\n    if [ \"$length\" = \"256\" ]; then\n      eccname=\"prime256v1\"\n    fi\n    if [ \"$length\" = \"384\" ]; then\n      eccname=\"secp384r1\"\n    fi\n    if [ \"$length\" = \"521\" ]; then\n      eccname=\"secp521r1\"\n    fi\n\n  fi\n\n  if [ -z \"$length\" ]; then\n    length=2048\n  fi\n\n  _debug \"Using length $length\"\n\n  if ! [ -e \"$f\" ]; then\n    if ! touch \"$f\" >/dev/null 2>&1; then\n      _f_path=\"$(dirname \"$f\")\"\n      _debug _f_path \"$_f_path\"\n      if ! mkdir -p \"$_f_path\"; then\n        _err \"Cannot create path: $_f_path\"\n        return 1\n      fi\n    fi\n    if ! touch \"$f\" >/dev/null 2>&1; then\n      return 1\n    fi\n    chmod 600 \"$f\"\n  fi\n\n  if _isEccKey \"$length\"; then\n    _debug \"Using EC name: $eccname\"\n    if _opkey=\"$(${ACME_OPENSSL_BIN:-openssl} ecparam -name \"$eccname\" -noout -genkey 2>/dev/null)\"; then\n      echo \"$_opkey\" >\"$f\"\n    else\n      _err \"Error encountered for ECC key named $eccname\"\n      return 1\n    fi\n  else\n    _debug \"Using RSA: $length\"\n    __traditional=\"\"\n    if _contains \"$(${ACME_OPENSSL_BIN:-openssl} help genrsa 2>&1)\" \"-traditional\"; then\n      __traditional=\"-traditional\"\n    fi\n    if _opkey=\"$(${ACME_OPENSSL_BIN:-openssl} genrsa $__traditional \"$length\" 2>/dev/null)\"; then\n      echo \"$_opkey\" >\"$f\"\n    else\n      _err \"Error encountered for RSA key of length $length\"\n      return 1\n    fi\n  fi\n\n  if [ \"$?\" != \"0\" ]; then\n    _err \"Key creation error.\"\n    return 1\n  fi\n}\n\n#domain\n_is_idn() {\n  _is_idn_d=\"$1\"\n  _debug2 _is_idn_d \"$_is_idn_d\"\n  _idn_temp=$(printf \"%s\" \"$_is_idn_d\" | tr -d '[0-9]' | tr -d '[a-z]' | tr -d '[A-Z]' | tr -d '*.,-_')\n  _debug2 _idn_temp \"$_idn_temp\"\n  [ \"$_idn_temp\" ]\n}\n\n#aa.com\n#aa.com,bb.com,cc.com\n_idn() {\n  __idn_d=\"$1\"\n  if ! _is_idn \"$__idn_d\"; then\n    printf \"%s\" \"$__idn_d\"\n    return 0\n  fi\n\n  if _exists idn; then\n    if _contains \"$__idn_d\" ','; then\n      _i_first=\"1\"\n      for f in $(echo \"$__idn_d\" | tr ',' ' '); do\n        [ -z \"$f\" ] && continue\n        if [ -z \"$_i_first\" ]; then\n          printf \"%s\" \",\"\n        else\n          _i_first=\"\"\n        fi\n        idn --quiet \"$f\" | tr -d \"\\r\\n\"\n      done\n    else\n      idn \"$__idn_d\" | tr -d \"\\r\\n\"\n    fi\n  else\n    _err \"Please install idn to process IDN names.\"\n  fi\n}\n\n#_createcsr  cn  san_list  keyfile csrfile conf acmeValidationv1\n_createcsr() {\n  _debug _createcsr\n  domain=\"$1\"\n  domainlist=\"$2\"\n  csrkey=\"$3\"\n  csr=\"$4\"\n  csrconf=\"$5\"\n  acmeValidationv1=\"$6\"\n  _debug2 domain \"$domain\"\n  _debug2 domainlist \"$domainlist\"\n  _debug2 csrkey \"$csrkey\"\n  _debug2 csr \"$csr\"\n  _debug2 csrconf \"$csrconf\"\n\n  printf \"[ req_distinguished_name ]\\n[ req ]\\ndistinguished_name = req_distinguished_name\\nreq_extensions = v3_req\\n[ v3_req ]\" >\"$csrconf\"\n\n  if [ \"$Le_ExtKeyUse\" ]; then\n    _savedomainconf Le_ExtKeyUse \"$Le_ExtKeyUse\"\n    printf \"\\nextendedKeyUsage=$Le_ExtKeyUse\\n\" >>\"$csrconf\"\n  else\n    printf \"\\nextendedKeyUsage=serverAuth,clientAuth\\n\" >>\"$csrconf\"\n  fi\n\n  if [ \"$acmeValidationv1\" ]; then\n    domainlist=\"$(_idn \"$domainlist\")\"\n    _debug2 domainlist \"$domainlist\"\n    alt=\"\"\n    for dl in $(echo \"$domainlist\" | tr \",\" ' '); do\n      if [ \"$alt\" ]; then\n        alt=\"$alt,$(_getIdType \"$dl\" | _upper_case):$dl\"\n      else\n        alt=\"$(_getIdType \"$dl\" | _upper_case):$dl\"\n      fi\n    done\n    printf -- \"\\nsubjectAltName=$alt\" >>\"$csrconf\"\n  elif [ -z \"$domainlist\" ] || [ \"$domainlist\" = \"$NO_VALUE\" ]; then\n    #single domain\n    _info \"Single domain\" \"$domain\"\n    printf -- \"\\nsubjectAltName=$(_getIdType \"$domain\" | _upper_case):$(_idn \"$domain\")\" >>\"$csrconf\"\n  else\n    domainlist=\"$(_idn \"$domainlist\")\"\n    _debug2 domainlist \"$domainlist\"\n    alt=\"$(_getIdType \"$domain\" | _upper_case):$(_idn \"$domain\")\"\n    for dl in $(echo \"'$domainlist'\" | sed \"s/,/' '/g\"); do\n      dl=$(echo \"$dl\" | tr -d \"'\")\n      alt=\"$alt,$(_getIdType \"$dl\" | _upper_case):$dl\"\n    done\n    #multi\n    _info \"Multi domain\" \"$alt\"\n    printf -- \"\\nsubjectAltName=$alt\" >>\"$csrconf\"\n  fi\n  if [ \"$Le_OCSP_Staple\" = \"1\" ]; then\n    _savedomainconf Le_OCSP_Staple \"$Le_OCSP_Staple\"\n    printf -- \"\\nbasicConstraints = CA:FALSE\\n1.3.6.1.5.5.7.1.24=DER:30:03:02:01:05\" >>\"$csrconf\"\n  fi\n\n  if [ \"$acmeValidationv1\" ]; then\n    printf \"\\n1.3.6.1.5.5.7.1.31=critical,DER:04:20:${acmeValidationv1}\" >>\"${csrconf}\"\n  fi\n\n  _csr_cn=\"$(_idn \"$domain\")\"\n  _debug2 _csr_cn \"$_csr_cn\"\n  if _contains \"$(uname -a)\" \"MINGW\"; then\n    if _isIP \"$_csr_cn\"; then\n      ${ACME_OPENSSL_BIN:-openssl} req -new -sha256 -key \"$csrkey\" -subj \"//O=$PROJECT_NAME\" -config \"$csrconf\" -out \"$csr\"\n    else\n      ${ACME_OPENSSL_BIN:-openssl} req -new -sha256 -key \"$csrkey\" -subj \"//CN=$_csr_cn\" -config \"$csrconf\" -out \"$csr\"\n    fi\n  else\n    if _isIP \"$_csr_cn\"; then\n      ${ACME_OPENSSL_BIN:-openssl} req -new -sha256 -key \"$csrkey\" -subj \"/O=$PROJECT_NAME\" -config \"$csrconf\" -out \"$csr\"\n    else\n      ${ACME_OPENSSL_BIN:-openssl} req -new -sha256 -key \"$csrkey\" -subj \"/CN=$_csr_cn\" -config \"$csrconf\" -out \"$csr\"\n    fi\n  fi\n}\n\n#_signcsr key  csr  conf cert\n_signcsr() {\n  key=\"$1\"\n  csr=\"$2\"\n  conf=\"$3\"\n  cert=\"$4\"\n  _debug \"_signcsr\"\n\n  _msg=\"$(${ACME_OPENSSL_BIN:-openssl} x509 -req -days 365 -in \"$csr\" -signkey \"$key\" -extensions v3_req -extfile \"$conf\" -out \"$cert\" 2>&1)\"\n  _ret=\"$?\"\n  _debug \"$_msg\"\n  return $_ret\n}\n\n#_csrfile\n_readSubjectFromCSR() {\n  _csrfile=\"$1\"\n  if [ -z \"$_csrfile\" ]; then\n    _usage \"_readSubjectFromCSR mycsr.csr\"\n    return 1\n  fi\n  ${ACME_OPENSSL_BIN:-openssl} req -noout -in \"$_csrfile\" -subject | tr ',' \"\\n\" | _egrep_o \"CN *=.*\" | cut -d = -f 2 | cut -d / -f 1 | tr -d ' \\n'\n}\n\n#_csrfile\n#echo comma separated domain list\n_readSubjectAltNamesFromCSR() {\n  _csrfile=\"$1\"\n  if [ -z \"$_csrfile\" ]; then\n    _usage \"_readSubjectAltNamesFromCSR mycsr.csr\"\n    return 1\n  fi\n\n  _csrsubj=\"$(_readSubjectFromCSR \"$_csrfile\")\"\n  _debug _csrsubj \"$_csrsubj\"\n\n  _dnsAltnames=\"$(${ACME_OPENSSL_BIN:-openssl} req -noout -text -in \"$_csrfile\" | grep \"^ *DNS:.*\" | tr -d ' \\n')\"\n  _debug _dnsAltnames \"$_dnsAltnames\"\n\n  if _contains \"$_dnsAltnames,\" \"DNS:$_csrsubj,\"; then\n    _debug \"AltNames contains subject\"\n    _excapedAlgnames=\"$(echo \"$_dnsAltnames\" | tr '*' '#')\"\n    _debug _excapedAlgnames \"$_excapedAlgnames\"\n    _escapedSubject=\"$(echo \"$_csrsubj\" | tr '*' '#')\"\n    _debug _escapedSubject \"$_escapedSubject\"\n    _dnsAltnames=\"$(echo \"$_excapedAlgnames,\" | sed \"s/DNS:$_escapedSubject,//g\" | tr '#' '*' | sed \"s/,\\$//g\")\"\n    _debug _dnsAltnames \"$_dnsAltnames\"\n  else\n    _debug \"AltNames doesn't contain subject\"\n  fi\n\n  echo \"$_dnsAltnames\" | sed \"s/DNS://g\"\n}\n\n#_csrfile\n_readKeyLengthFromCSR() {\n  _csrfile=\"$1\"\n  if [ -z \"$_csrfile\" ]; then\n    _usage \"_readKeyLengthFromCSR mycsr.csr\"\n    return 1\n  fi\n\n  _outcsr=\"$(${ACME_OPENSSL_BIN:-openssl} req -noout -text -in \"$_csrfile\")\"\n  _debug2 _outcsr \"$_outcsr\"\n  if _contains \"$_outcsr\" \"Public Key Algorithm: id-ecPublicKey\"; then\n    _debug \"ECC CSR\"\n    echo \"$_outcsr\" | tr \"\\t\" \" \" | _egrep_o \"^ *ASN1 OID:.*\" | cut -d ':' -f 2 | tr -d ' '\n  else\n    _debug \"RSA CSR\"\n    _rkl=\"$(echo \"$_outcsr\" | tr \"\\t\" \" \" | _egrep_o \"^ *Public.Key:.*\" | cut -d '(' -f 2 | cut -d ' ' -f 1)\"\n    if [ \"$_rkl\" ]; then\n      echo \"$_rkl\"\n    else\n      echo \"$_outcsr\" | tr \"\\t\" \" \" | _egrep_o \"RSA Public.Key:.*\" | cut -d '(' -f 2 | cut -d ' ' -f 1\n    fi\n  fi\n}\n\n_ss() {\n  _port=\"$1\"\n\n  if _exists \"ss\"; then\n    _debug \"Using: ss\"\n    ss -ntpl 2>/dev/null | grep \":$_port \"\n    return 0\n  fi\n\n  if _exists \"netstat\"; then\n    _debug \"Using: netstat\"\n    if netstat -help 2>&1 | grep \"\\-p proto\" >/dev/null; then\n      #for windows version netstat tool\n      netstat -an -p tcp | grep \"LISTENING\" | grep \":$_port \"\n    else\n      if netstat -help 2>&1 | grep \"\\-p protocol\" >/dev/null; then\n        netstat -an -p tcp | grep LISTEN | grep \":$_port \"\n      elif netstat -help 2>&1 | grep -- '-P protocol' >/dev/null; then\n        #for solaris\n        netstat -an -P tcp | grep \"\\.$_port \" | grep \"LISTEN\"\n      elif netstat -help 2>&1 | grep \"\\-p\" >/dev/null; then\n        #for full linux\n        netstat -ntpl | grep \":$_port \"\n      else\n        #for busybox (embedded linux; no pid support)\n        netstat -ntl 2>/dev/null | grep \":$_port \"\n      fi\n    fi\n    return 0\n  fi\n\n  return 1\n}\n\n#outfile key cert cacert [password [name [caname]]]\n_toPkcs() {\n  _cpfx=\"$1\"\n  _ckey=\"$2\"\n  _ccert=\"$3\"\n  _cca=\"$4\"\n  pfxPassword=\"$5\"\n  pfxName=\"$6\"\n  pfxCaname=\"$7\"\n\n  if [ \"$pfxCaname\" ]; then\n    ${ACME_OPENSSL_BIN:-openssl} pkcs12 -export -out \"$_cpfx\" -inkey \"$_ckey\" -in \"$_ccert\" -certfile \"$_cca\" -password \"pass:$pfxPassword\" -name \"$pfxName\" -caname \"$pfxCaname\"\n  elif [ \"$pfxName\" ]; then\n    ${ACME_OPENSSL_BIN:-openssl} pkcs12 -export -out \"$_cpfx\" -inkey \"$_ckey\" -in \"$_ccert\" -certfile \"$_cca\" -password \"pass:$pfxPassword\" -name \"$pfxName\"\n  elif [ \"$pfxPassword\" ]; then\n    ${ACME_OPENSSL_BIN:-openssl} pkcs12 -export -out \"$_cpfx\" -inkey \"$_ckey\" -in \"$_ccert\" -certfile \"$_cca\" -password \"pass:$pfxPassword\"\n  else\n    ${ACME_OPENSSL_BIN:-openssl} pkcs12 -export -out \"$_cpfx\" -inkey \"$_ckey\" -in \"$_ccert\" -certfile \"$_cca\"\n  fi\n  if [ \"$?\" = \"0\" ]; then\n    _savedomainconf \"Le_PFXPassword\" \"$pfxPassword\"\n  fi\n\n}\n\n#domain [password] [isEcc]\ntoPkcs() {\n  domain=\"$1\"\n  pfxPassword=\"$2\"\n  if [ -z \"$domain\" ]; then\n    _usage \"Usage: $PROJECT_ENTRY --to-pkcs12 --domain <domain.tld> [--password <password>] [--ecc]\"\n    return 1\n  fi\n\n  _isEcc=\"$3\"\n\n  _initpath \"$domain\" \"$_isEcc\"\n\n  _toPkcs \"$CERT_PFX_PATH\" \"$CERT_KEY_PATH\" \"$CERT_PATH\" \"$CA_CERT_PATH\" \"$pfxPassword\"\n\n  if [ \"$?\" = \"0\" ]; then\n    _info \"Success, PFX has been exported to: $CERT_PFX_PATH\"\n  fi\n\n}\n\n#domain [isEcc]\ntoPkcs8() {\n  domain=\"$1\"\n\n  if [ -z \"$domain\" ]; then\n    _usage \"Usage: $PROJECT_ENTRY --to-pkcs8 --domain <domain.tld> [--ecc]\"\n    return 1\n  fi\n\n  _isEcc=\"$2\"\n\n  _initpath \"$domain\" \"$_isEcc\"\n\n  ${ACME_OPENSSL_BIN:-openssl} pkcs8 -topk8 -inform PEM -outform PEM -nocrypt -in \"$CERT_KEY_PATH\" -out \"$CERT_PKCS8_PATH\"\n\n  if [ \"$?\" = \"0\" ]; then\n    _info \"Success, $CERT_PKCS8_PATH\"\n  fi\n\n}\n\n#[2048]\ncreateAccountKey() {\n  _info \"Creating account key\"\n  if [ -z \"$1\" ]; then\n    _usage \"Usage: $PROJECT_ENTRY --create-account-key [--accountkeylength <bits>]\"\n    return\n  fi\n\n  length=$1\n  _create_account_key \"$length\"\n\n}\n\n_create_account_key() {\n\n  length=$1\n\n  if [ -z \"$length\" ] || [ \"$length\" = \"$NO_VALUE\" ]; then\n    _debug \"Using default length $DEFAULT_ACCOUNT_KEY_LENGTH\"\n    length=\"$DEFAULT_ACCOUNT_KEY_LENGTH\"\n  fi\n\n  _debug length \"$length\"\n  _initpath\n\n  mkdir -p \"$CA_DIR\"\n  if [ -s \"$ACCOUNT_KEY_PATH\" ]; then\n    _info \"Account key exists, skipping\"\n    return 0\n  else\n    #generate account key\n    if _createkey \"$length\" \"$ACCOUNT_KEY_PATH\"; then\n      _info \"Account key creation OK.\"\n      return 0\n    else\n      _err \"Account key creation error.\"\n      return 1\n    fi\n  fi\n\n}\n\n#domain [length]\ncreateDomainKey() {\n  _info \"Creating domain key\"\n  if [ -z \"$1\" ]; then\n    _usage \"Usage: $PROJECT_ENTRY --create-domain-key --domain <domain.tld> [--keylength <bits>]\"\n    return\n  fi\n\n  domain=$1\n  _cdl=$2\n\n  if [ -z \"$_cdl\" ]; then\n    _debug \"Using DEFAULT_DOMAIN_KEY_LENGTH=$DEFAULT_DOMAIN_KEY_LENGTH\"\n    _cdl=\"$DEFAULT_DOMAIN_KEY_LENGTH\"\n  fi\n\n  _initpath \"$domain\" \"$_cdl\"\n\n  if [ ! -f \"$CERT_KEY_PATH\" ] || [ ! -s \"$CERT_KEY_PATH\" ] || ([ \"$FORCE\" ] && ! [ \"$_ACME_IS_RENEW\" ]) || [ \"$Le_ForceNewDomainKey\" = \"1\" ]; then\n    if _createkey \"$_cdl\" \"$CERT_KEY_PATH\"; then\n      _savedomainconf Le_Keylength \"$_cdl\"\n      _info \"The domain key is here: $(__green $CERT_KEY_PATH)\"\n      return 0\n    else\n      _err \"Cannot create domain key\"\n      return 1\n    fi\n  else\n    if [ \"$_ACME_IS_RENEW\" ]; then\n      _info \"Domain key exists, skipping\"\n      return 0\n    else\n      _err \"Domain key exists, do you want to overwrite it?\"\n      _err \"If so, add '--force' and try again.\"\n      return 1\n    fi\n  fi\n\n}\n\n# domain  domainlist isEcc\ncreateCSR() {\n  _info \"Creating CSR\"\n  if [ -z \"$1\" ]; then\n    _usage \"Usage: $PROJECT_ENTRY --create-csr --domain <domain.tld> [--domain <domain2.tld> ...] [--ecc]\"\n    return\n  fi\n\n  domain=\"$1\"\n  domainlist=\"$2\"\n  _isEcc=\"$3\"\n\n  _initpath \"$domain\" \"$_isEcc\"\n\n  if [ -f \"$CSR_PATH\" ] && [ \"$_ACME_IS_RENEW\" ] && [ -z \"$FORCE\" ]; then\n    _info \"CSR exists, skipping\"\n    return\n  fi\n\n  if [ ! -f \"$CERT_KEY_PATH\" ]; then\n    _err \"This key file was not found: $CERT_KEY_PATH\"\n    _err \"Please create it first.\"\n    return 1\n  fi\n  _createcsr \"$domain\" \"$domainlist\" \"$CERT_KEY_PATH\" \"$CSR_PATH\" \"$DOMAIN_SSL_CONF\"\n\n}\n\n_url_replace() {\n  tr '/+' '_-' | tr -d '= '\n}\n\n#base64 string\n_durl_replace_base64() {\n  _l=$((${#1} % 4))\n  if [ $_l -eq 2 ]; then\n    _s=\"$1\"'=='\n  elif [ $_l -eq 3 ]; then\n    _s=\"$1\"'='\n  else\n    _s=\"$1\"\n  fi\n  echo \"$_s\" | tr '_-' '/+'\n}\n\n_time2str() {\n  #BSD\n  if date -u -r \"$1\" -j \"+%Y-%m-%dT%H:%M:%SZ\" 2>/dev/null; then\n    return\n  fi\n\n  #Linux\n  if date -u --date=@\"$1\" \"+%Y-%m-%dT%H:%M:%SZ\" 2>/dev/null; then\n    return\n  fi\n\n  #Omnios\n  if date -u -r \"$1\" +\"%Y-%m-%dT%H:%M:%SZ\" 2>/dev/null; then\n    return\n  fi\n\n  #Solaris\n  if printf \"%(%Y-%m-%dT%H:%M:%SZ)T\\n\" $1 2>/dev/null; then\n    return\n  fi\n\n  #Busybox\n  if echo \"$1\" | awk '{ print strftime(\"%Y-%m-%dT%H:%M:%SZ\", $0); }' 2>/dev/null; then\n    return\n  fi\n}\n\n_normalizeJson() {\n  sed \"s/\\\" *: *\\([\\\"{\\[]\\)/\\\":\\1/g\" | sed \"s/^ *\\([^ ]\\)/\\1/\" | tr -d \"\\r\\n\"\n}\n\n_stat() {\n  #Linux\n  if stat -c '%U:%G' \"$1\" 2>/dev/null; then\n    return\n  fi\n\n  #BSD\n  if stat -f '%Su:%Sg' \"$1\" 2>/dev/null; then\n    return\n  fi\n\n  return 1 #error, 'stat' not found\n}\n\n#keyfile\n_isRSA() {\n  keyfile=$1\n  if grep \"BEGIN RSA PRIVATE KEY\" \"$keyfile\" >/dev/null 2>&1 || ${ACME_OPENSSL_BIN:-openssl} rsa -in \"$keyfile\" -noout -text 2>&1 | grep \"^publicExponent:\" 2>&1 >/dev/null; then\n    return 0\n  fi\n  return 1\n}\n\n#keyfile\n_isEcc() {\n  keyfile=$1\n  if grep \"BEGIN EC PRIVATE KEY\" \"$keyfile\" >/dev/null 2>&1 || ${ACME_OPENSSL_BIN:-openssl} ec -in \"$keyfile\" -noout -text 2>/dev/null | grep \"^NIST CURVE:\" 2>&1 >/dev/null; then\n    return 0\n  fi\n  return 1\n}\n\n#keyfile\n_calcjwk() {\n  keyfile=\"$1\"\n  if [ -z \"$keyfile\" ]; then\n    _usage \"Usage: _calcjwk keyfile\"\n    return 1\n  fi\n\n  if [ \"$JWK_HEADER\" ] && [ \"$__CACHED_JWK_KEY_FILE\" = \"$keyfile\" ]; then\n    _debug2 \"Use cached jwk for file: $__CACHED_JWK_KEY_FILE\"\n    return 0\n  fi\n\n  if _isRSA \"$keyfile\"; then\n    _debug \"RSA key\"\n    pub_exp=$(${ACME_OPENSSL_BIN:-openssl} rsa -in \"$keyfile\" -noout -text | grep \"^publicExponent:\" | cut -d '(' -f 2 | cut -d 'x' -f 2 | cut -d ')' -f 1)\n    if [ \"${#pub_exp}\" = \"5\" ]; then\n      pub_exp=0$pub_exp\n    fi\n    _debug3 pub_exp \"$pub_exp\"\n\n    e=$(echo \"$pub_exp\" | _h2b | _base64)\n    _debug3 e \"$e\"\n\n    modulus=$(${ACME_OPENSSL_BIN:-openssl} rsa -in \"$keyfile\" -modulus -noout | cut -d '=' -f 2)\n    _debug3 modulus \"$modulus\"\n    n=\"$(printf \"%s\" \"$modulus\" | _h2b | _base64 | _url_replace)\"\n    _debug3 n \"$n\"\n\n    jwk='{\"e\": \"'$e'\", \"kty\": \"RSA\", \"n\": \"'$n'\"}'\n    _debug3 jwk \"$jwk\"\n\n    JWK_HEADER='{\"alg\": \"RS256\", \"jwk\": '$jwk'}'\n    JWK_HEADERPLACE_PART1='{\"nonce\": \"'\n    JWK_HEADERPLACE_PART2='\", \"alg\": \"RS256\"'\n  elif _isEcc \"$keyfile\"; then\n    _debug \"EC key\"\n    crv=\"$(${ACME_OPENSSL_BIN:-openssl} ec -in \"$keyfile\" -noout -text 2>/dev/null | grep \"^NIST CURVE:\" | cut -d \":\" -f 2 | tr -d \" \\r\\n\")\"\n    _debug3 crv \"$crv\"\n    __ECC_KEY_LEN=$(echo \"$crv\" | cut -d \"-\" -f 2)\n    if [ \"$__ECC_KEY_LEN\" = \"521\" ]; then\n      __ECC_KEY_LEN=512\n    fi\n    _debug3 __ECC_KEY_LEN \"$__ECC_KEY_LEN\"\n    if [ -z \"$crv\" ]; then\n      _debug \"Let's try ASN1 OID\"\n      crv_oid=\"$(${ACME_OPENSSL_BIN:-openssl} ec -in \"$keyfile\" -noout -text 2>/dev/null | grep \"^ASN1 OID:\" | cut -d \":\" -f 2 | tr -d \" \\r\\n\")\"\n      _debug3 crv_oid \"$crv_oid\"\n      case \"${crv_oid}\" in\n      \"prime256v1\")\n        crv=\"P-256\"\n        __ECC_KEY_LEN=256\n        ;;\n      \"secp384r1\")\n        crv=\"P-384\"\n        __ECC_KEY_LEN=384\n        ;;\n      \"secp521r1\")\n        crv=\"P-521\"\n        __ECC_KEY_LEN=512\n        ;;\n      *)\n        _err \"ECC oid: $crv_oid\"\n        return 1\n        ;;\n      esac\n      _debug3 crv \"$crv\"\n    fi\n\n    pubi=\"$(${ACME_OPENSSL_BIN:-openssl} ec -in \"$keyfile\" -noout -text 2>/dev/null | grep -n pub: | cut -d : -f 1)\"\n    pubi=$(_math \"$pubi\" + 1)\n    _debug3 pubi \"$pubi\"\n\n    pubj=\"$(${ACME_OPENSSL_BIN:-openssl} ec -in \"$keyfile\" -noout -text 2>/dev/null | grep -n \"ASN1 OID:\" | cut -d : -f 1)\"\n    pubj=$(_math \"$pubj\" - 1)\n    _debug3 pubj \"$pubj\"\n\n    pubtext=\"$(${ACME_OPENSSL_BIN:-openssl} ec -in \"$keyfile\" -noout -text 2>/dev/null | sed -n \"$pubi,${pubj}p\" | tr -d \" \\n\\r\")\"\n    _debug3 pubtext \"$pubtext\"\n\n    xlen=\"$(printf \"%s\" \"$pubtext\" | tr -d ':' | wc -c)\"\n    xlen=$(_math \"$xlen\" / 4)\n    _debug3 xlen \"$xlen\"\n\n    xend=$(_math \"$xlen\" + 1)\n    x=\"$(printf \"%s\" \"$pubtext\" | cut -d : -f 2-\"$xend\")\"\n    _debug3 x \"$x\"\n\n    x64=\"$(printf \"%s\" \"$x\" | tr -d : | _h2b | _base64 | _url_replace)\"\n    _debug3 x64 \"$x64\"\n\n    xend=$(_math \"$xend\" + 1)\n    y=\"$(printf \"%s\" \"$pubtext\" | cut -d : -f \"$xend\"-2048)\"\n    _debug3 y \"$y\"\n\n    y64=\"$(printf \"%s\" \"$y\" | tr -d : | _h2b | _base64 | _url_replace)\"\n    _debug3 y64 \"$y64\"\n\n    jwk='{\"crv\": \"'$crv'\", \"kty\": \"EC\", \"x\": \"'$x64'\", \"y\": \"'$y64'\"}'\n    _debug3 jwk \"$jwk\"\n\n    JWK_HEADER='{\"alg\": \"ES'$__ECC_KEY_LEN'\", \"jwk\": '$jwk'}'\n    JWK_HEADERPLACE_PART1='{\"nonce\": \"'\n    JWK_HEADERPLACE_PART2='\", \"alg\": \"ES'$__ECC_KEY_LEN'\"'\n  else\n    _err \"Only RSA or EC keys are supported. keyfile=$keyfile\"\n    _debug2 \"$(cat \"$keyfile\")\"\n    return 1\n  fi\n\n  _debug3 JWK_HEADER \"$JWK_HEADER\"\n  __CACHED_JWK_KEY_FILE=\"$keyfile\"\n}\n\n_time() {\n  date -u \"+%s\"\n}\n\n#support 2 formats:\n#    2022-04-01 08:10:33   to   1648800633\n#or  2022-04-01T08:10:33Z  to   1648800633\n_date2time() {\n  #Linux\n  if date -u -d \"$(echo \"$1\" | tr -d \"Z\" | tr \"T\" ' ')\" +\"%s\" 2>/dev/null; then\n    return\n  fi\n\n  #Solaris\n  if gdate -u -d \"$(echo \"$1\" | tr -d \"Z\" | tr \"T\" ' ')\" +\"%s\" 2>/dev/null; then\n    return\n  fi\n  #Mac/BSD\n  if date -u -j -f \"%Y-%m-%d %H:%M:%S\" \"$(echo \"$1\" | tr -d \"Z\" | tr \"T\" ' ')\" +\"%s\" 2>/dev/null; then\n    return\n  fi\n  #Omnios\n  if python3 -c \"import datetime; print(int(datetime.datetime.strptime(\\\"$1\\\", \\\"%Y-%m-%d %H:%M:%S\\\").replace(tzinfo=datetime.timezone.utc).timestamp()))\" 2>/dev/null; then\n    return\n  fi\n  #Omnios\n  if python3 -c \"import datetime; print(int(datetime.datetime.strptime(\\\"$1\\\", \\\"%Y-%m-%dT%H:%M:%SZ\\\").replace(tzinfo=datetime.timezone.utc).timestamp()))\" 2>/dev/null; then\n    return\n  fi\n  _err \"Cannot parse _date2time $1\"\n  return 1\n}\n\n_utc_date() {\n  date -u \"+%Y-%m-%d %H:%M:%S\"\n}\n\n_mktemp() {\n  if _exists mktemp; then\n    if mktemp 2>/dev/null; then\n      return 0\n    elif _contains \"$(mktemp 2>&1)\" \"-t prefix\" && mktemp -t \"$PROJECT_NAME\" 2>/dev/null; then\n      #for Mac osx\n      return 0\n    fi\n  fi\n  if [ -d \"/tmp\" ]; then\n    echo \"/tmp/${PROJECT_NAME}wefADf24sf.$(_time).tmp\"\n    return 0\n  elif [ \"$LE_TEMP_DIR\" ] && mkdir -p \"$LE_TEMP_DIR\"; then\n    echo \"/$LE_TEMP_DIR/wefADf24sf.$(_time).tmp\"\n    return 0\n  fi\n  _err \"Cannot create temp file.\"\n}\n\n#clear all the https envs to cause _inithttp() to run next time.\n_resethttp() {\n  __HTTP_INITIALIZED=\"\"\n  _ACME_CURL=\"\"\n  _ACME_WGET=\"\"\n  ACME_HTTP_NO_REDIRECTS=\"\"\n}\n\n_inithttp() {\n\n  if [ -z \"$HTTP_HEADER\" ] || ! touch \"$HTTP_HEADER\"; then\n    HTTP_HEADER=\"$(_mktemp)\"\n    _debug2 HTTP_HEADER \"$HTTP_HEADER\"\n  fi\n\n  if [ \"$__HTTP_INITIALIZED\" ]; then\n    if [ \"$_ACME_CURL$_ACME_WGET\" ]; then\n      _debug2 \"Http already initialized.\"\n      return 0\n    fi\n  fi\n\n  if [ -z \"$_ACME_CURL\" ] && _exists \"curl\"; then\n    _ACME_CURL=\"curl --silent --dump-header $HTTP_HEADER \"\n    if [ -z \"$ACME_HTTP_NO_REDIRECTS\" ]; then\n      _ACME_CURL=\"$_ACME_CURL -L \"\n    fi\n    if [ \"$DEBUG\" ] && [ \"$DEBUG\" -ge 2 ]; then\n      _CURL_DUMP=\"$(_mktemp)\"\n      _ACME_CURL=\"$_ACME_CURL --trace-ascii $_CURL_DUMP \"\n    fi\n\n    if [ \"$CA_PATH\" ]; then\n      _ACME_CURL=\"$_ACME_CURL --capath $CA_PATH \"\n    elif [ \"$CA_BUNDLE\" ]; then\n      _ACME_CURL=\"$_ACME_CURL --cacert $CA_BUNDLE \"\n    fi\n\n    if _contains \"$(curl --help 2>&1)\" \"--globoff\" || _contains \"$(curl --help curl 2>&1)\" \"--globoff\"; then\n      _ACME_CURL=\"$_ACME_CURL -g \"\n    fi\n\n    #don't use --fail-with-body\n    ##from curl 7.76: return fail on HTTP errors but keep the body\n    #if _contains \"$(curl --help http 2>&1)\" \"--fail-with-body\"; then\n    #  _ACME_CURL=\"$_ACME_CURL --fail-with-body \"\n    #fi\n  fi\n\n  if [ -z \"$_ACME_WGET\" ] && _exists \"wget\"; then\n    _ACME_WGET=\"wget -q\"\n    if [ \"$ACME_HTTP_NO_REDIRECTS\" ]; then\n      _ACME_WGET=\"$_ACME_WGET --max-redirect 0 \"\n    fi\n    if [ \"$DEBUG\" ] && [ \"$DEBUG\" -ge \"2\" ]; then\n      if [ \"$_ACME_WGET\" ] && _contains \"$($_ACME_WGET --help 2>&1)\" \"--debug\"; then\n        _ACME_WGET=\"$_ACME_WGET -d \"\n      fi\n    fi\n    if [ \"$CA_PATH\" ]; then\n      _ACME_WGET=\"$_ACME_WGET --ca-directory=$CA_PATH \"\n    elif [ \"$CA_BUNDLE\" ]; then\n      _ACME_WGET=\"$_ACME_WGET --ca-certificate=$CA_BUNDLE \"\n    fi\n\n    #from wget 1.14: do not skip body on 404 error\n    if _contains \"$(wget --help 2>&1)\" \"--content-on-error\"; then\n      _ACME_WGET=\"$_ACME_WGET --content-on-error \"\n    fi\n  fi\n\n  __HTTP_INITIALIZED=1\n\n}\n\n# body  url [needbase64] [POST|PUT|DELETE] [ContentType]\n_post() {\n  body=\"$1\"\n  _post_url=\"$2\"\n  needbase64=\"$3\"\n  httpmethod=\"$4\"\n  _postContentType=\"$5\"\n\n  if [ -z \"$httpmethod\" ]; then\n    httpmethod=\"POST\"\n  fi\n  _debug $httpmethod\n  _debug \"_post_url\" \"$_post_url\"\n  _debug2 \"body\" \"$body\"\n  _debug2 \"_postContentType\" \"$_postContentType\"\n\n  _inithttp\n\n  if [ \"$_ACME_CURL\" ] && [ \"${ACME_USE_WGET:-0}\" = \"0\" ]; then\n    _CURL=\"$_ACME_CURL\"\n    if [ \"$HTTPS_INSECURE\" ]; then\n      _CURL=\"$_CURL --insecure  \"\n    fi\n    if [ \"$httpmethod\" = \"HEAD\" ]; then\n      _CURL=\"$_CURL -I  \"\n    fi\n    _debug \"_CURL\" \"$_CURL\"\n    if [ \"$needbase64\" ]; then\n      if [ \"$body\" ]; then\n        if [ \"$_postContentType\" ]; then\n          response=\"$($_CURL --user-agent \"$USER_AGENT\" -X $httpmethod -H \"Content-Type: $_postContentType\" -H \"$_H1\" -H \"$_H2\" -H \"$_H3\" -H \"$_H4\" -H \"$_H5\" --data \"$body\" \"$_post_url\" | _base64)\"\n        else\n          response=\"$($_CURL --user-agent \"$USER_AGENT\" -X $httpmethod -H \"$_H1\" -H \"$_H2\" -H \"$_H3\" -H \"$_H4\" -H \"$_H5\" --data \"$body\" \"$_post_url\" | _base64)\"\n        fi\n      else\n        if [ \"$_postContentType\" ]; then\n          response=\"$($_CURL --user-agent \"$USER_AGENT\" -X $httpmethod -H \"Content-Type: $_postContentType\" -H \"$_H1\" -H \"$_H2\" -H \"$_H3\" -H \"$_H4\" -H \"$_H5\" \"$_post_url\" | _base64)\"\n        else\n          response=\"$($_CURL --user-agent \"$USER_AGENT\" -X $httpmethod -H \"$_H1\" -H \"$_H2\" -H \"$_H3\" -H \"$_H4\" -H \"$_H5\" \"$_post_url\" | _base64)\"\n        fi\n      fi\n    else\n      if [ \"$body\" ]; then\n        if [ \"$_postContentType\" ]; then\n          response=\"$($_CURL --user-agent \"$USER_AGENT\" -X $httpmethod -H \"Content-Type: $_postContentType\" -H \"$_H1\" -H \"$_H2\" -H \"$_H3\" -H \"$_H4\" -H \"$_H5\" --data \"$body\" \"$_post_url\")\"\n        else\n          response=\"$($_CURL --user-agent \"$USER_AGENT\" -X $httpmethod -H \"$_H1\" -H \"$_H2\" -H \"$_H3\" -H \"$_H4\" -H \"$_H5\" --data \"$body\" \"$_post_url\")\"\n        fi\n      else\n        if [ \"$_postContentType\" ]; then\n          response=\"$($_CURL --user-agent \"$USER_AGENT\" -X $httpmethod -H \"Content-Type: $_postContentType\" -H \"$_H1\" -H \"$_H2\" -H \"$_H3\" -H \"$_H4\" -H \"$_H5\" \"$_post_url\")\"\n        else\n          response=\"$($_CURL --user-agent \"$USER_AGENT\" -X $httpmethod -H \"$_H1\" -H \"$_H2\" -H \"$_H3\" -H \"$_H4\" -H \"$_H5\" \"$_post_url\")\"\n        fi\n      fi\n    fi\n    _ret=\"$?\"\n    if [ \"$_ret\" != \"0\" ]; then\n      _err \"Please refer to https://curl.haxx.se/libcurl/c/libcurl-errors.html for error code: $_ret\"\n      if [ \"$DEBUG\" ] && [ \"$DEBUG\" -ge \"2\" ]; then\n        _err \"Here is the curl dump log:\"\n        _err \"$(cat \"$_CURL_DUMP\")\"\n      fi\n    fi\n  elif [ \"$_ACME_WGET\" ]; then\n    _WGET=\"$_ACME_WGET\"\n    if [ \"$HTTPS_INSECURE\" ]; then\n      _WGET=\"$_WGET --no-check-certificate \"\n    fi\n    if [ \"$httpmethod\" = \"HEAD\" ]; then\n      _WGET=\"$_WGET --read-timeout=3.0  --tries=2  \"\n    fi\n    _debug \"_WGET\" \"$_WGET\"\n    if [ \"$needbase64\" ]; then\n      if [ \"$httpmethod\" = \"POST\" ]; then\n        if [ \"$_postContentType\" ]; then\n          response=\"$($_WGET -S -O - --user-agent=\"$USER_AGENT\" --header \"$_H5\" --header \"$_H4\" --header \"$_H3\" --header \"$_H2\" --header \"$_H1\" --header \"Content-Type: $_postContentType\" --post-data=\"$body\" \"$_post_url\" 2>\"$HTTP_HEADER\" | _base64)\"\n        else\n          response=\"$($_WGET -S -O - --user-agent=\"$USER_AGENT\" --header \"$_H5\" --header \"$_H4\" --header \"$_H3\" --header \"$_H2\" --header \"$_H1\" --post-data=\"$body\" \"$_post_url\" 2>\"$HTTP_HEADER\" | _base64)\"\n        fi\n      else\n        if [ \"$_postContentType\" ]; then\n          response=\"$($_WGET -S -O - --user-agent=\"$USER_AGENT\" --header \"$_H5\" --header \"$_H4\" --header \"$_H3\" --header \"$_H2\" --header \"$_H1\" --header \"Content-Type: $_postContentType\" --method $httpmethod --body-data=\"$body\" \"$_post_url\" 2>\"$HTTP_HEADER\" | _base64)\"\n        else\n          response=\"$($_WGET -S -O - --user-agent=\"$USER_AGENT\" --header \"$_H5\" --header \"$_H4\" --header \"$_H3\" --header \"$_H2\" --header \"$_H1\" --method $httpmethod --body-data=\"$body\" \"$_post_url\" 2>\"$HTTP_HEADER\" | _base64)\"\n        fi\n      fi\n    else\n      if [ \"$httpmethod\" = \"POST\" ]; then\n        if [ \"$_postContentType\" ]; then\n          response=\"$($_WGET -S -O - --user-agent=\"$USER_AGENT\" --header \"$_H5\" --header \"$_H4\" --header \"$_H3\" --header \"$_H2\" --header \"$_H1\" --header \"Content-Type: $_postContentType\" --post-data=\"$body\" \"$_post_url\" 2>\"$HTTP_HEADER\")\"\n        else\n          response=\"$($_WGET -S -O - --user-agent=\"$USER_AGENT\" --header \"$_H5\" --header \"$_H4\" --header \"$_H3\" --header \"$_H2\" --header \"$_H1\" --post-data=\"$body\" \"$_post_url\" 2>\"$HTTP_HEADER\")\"\n        fi\n      elif [ \"$httpmethod\" = \"HEAD\" ]; then\n        if [ \"$_postContentType\" ]; then\n          response=\"$($_WGET --spider -S -O - --user-agent=\"$USER_AGENT\" --header \"$_H5\" --header \"$_H4\" --header \"$_H3\" --header \"$_H2\" --header \"$_H1\" --header \"Content-Type: $_postContentType\" --post-data=\"$body\" \"$_post_url\" 2>\"$HTTP_HEADER\")\"\n        else\n          response=\"$($_WGET --spider -S -O - --user-agent=\"$USER_AGENT\" --header \"$_H5\" --header \"$_H4\" --header \"$_H3\" --header \"$_H2\" --header \"$_H1\" --post-data=\"$body\" \"$_post_url\" 2>\"$HTTP_HEADER\")\"\n        fi\n      else\n        if [ \"$_postContentType\" ]; then\n          response=\"$($_WGET -S -O - --user-agent=\"$USER_AGENT\" --header \"$_H5\" --header \"$_H4\" --header \"$_H3\" --header \"$_H2\" --header \"$_H1\" --header \"Content-Type: $_postContentType\" --method $httpmethod --body-data=\"$body\" \"$_post_url\" 2>\"$HTTP_HEADER\")\"\n        else\n          response=\"$($_WGET -S -O - --user-agent=\"$USER_AGENT\" --header \"$_H5\" --header \"$_H4\" --header \"$_H3\" --header \"$_H2\" --header \"$_H1\" --method $httpmethod --body-data=\"$body\" \"$_post_url\" 2>\"$HTTP_HEADER\")\"\n        fi\n      fi\n    fi\n    _ret=\"$?\"\n    if [ \"$_ret\" = \"8\" ]; then\n      _ret=0\n      _debug \"wget returned 8 as the server returned a 'Bad Request' response. Let's process the response later.\"\n    fi\n    if [ \"$_ret\" != \"0\" ]; then\n      _err \"Please refer to https://www.gnu.org/software/wget/manual/html_node/Exit-Status.html for error code: $_ret\"\n    fi\n    if _contains \"$_WGET\" \" -d \"; then\n      # Demultiplex wget debug output\n      cat \"$HTTP_HEADER\" >&2\n      _sed_i '/^[^ ][^ ]/d; /^ *$/d' \"$HTTP_HEADER\"\n    fi\n    # remove leading whitespaces from header to match curl format\n    _sed_i 's/^  //g' \"$HTTP_HEADER\"\n  else\n    _ret=\"$?\"\n    _err \"Neither curl nor wget have been found, cannot make $httpmethod request.\"\n  fi\n  _debug \"_ret\" \"$_ret\"\n  printf \"%s\" \"$response\"\n  return $_ret\n}\n\n# url getheader timeout\n_get() {\n  _debug GET\n  url=\"$1\"\n  onlyheader=\"$2\"\n  t=\"$3\"\n  _debug url \"$url\"\n  _debug \"timeout=$t\"\n\n  _inithttp\n\n  if [ \"$_ACME_CURL\" ] && [ \"${ACME_USE_WGET:-0}\" = \"0\" ]; then\n    _CURL=\"$_ACME_CURL\"\n    if [ \"$HTTPS_INSECURE\" ]; then\n      _CURL=\"$_CURL --insecure  \"\n    fi\n    if [ \"$t\" ]; then\n      _CURL=\"$_CURL --connect-timeout $t\"\n    fi\n    _debug \"_CURL\" \"$_CURL\"\n    if [ \"$onlyheader\" ]; then\n      $_CURL -I --user-agent \"$USER_AGENT\" -H \"$_H1\" -H \"$_H2\" -H \"$_H3\" -H \"$_H4\" -H \"$_H5\" \"$url\"\n    else\n      $_CURL --user-agent \"$USER_AGENT\" -H \"$_H1\" -H \"$_H2\" -H \"$_H3\" -H \"$_H4\" -H \"$_H5\" \"$url\"\n    fi\n    ret=$?\n    if [ \"$ret\" != \"0\" ]; then\n      _err \"Please refer to https://curl.haxx.se/libcurl/c/libcurl-errors.html for error code: $ret\"\n      if [ \"$DEBUG\" ] && [ \"$DEBUG\" -ge \"2\" ]; then\n        _err \"Here is the curl dump log:\"\n        _err \"$(cat \"$_CURL_DUMP\")\"\n      fi\n    fi\n  elif [ \"$_ACME_WGET\" ]; then\n    _WGET=\"$_ACME_WGET\"\n    if [ \"$HTTPS_INSECURE\" ]; then\n      _WGET=\"$_WGET --no-check-certificate \"\n    fi\n    if [ \"$t\" ]; then\n      _WGET=\"$_WGET --timeout=$t\"\n    fi\n    _debug \"_WGET\" \"$_WGET\"\n    if [ \"$onlyheader\" ]; then\n      _wget_out=\"$($_WGET --user-agent=\"$USER_AGENT\" --header \"$_H5\" --header \"$_H4\" --header \"$_H3\" --header \"$_H2\" --header \"$_H1\" -S -O /dev/null \"$url\" 2>&1)\"\n      if _contains \"$_WGET\" \" -d \"; then\n        # Demultiplex wget debug output\n        echo \"$_wget_out\" >&2\n        echo \"$_wget_out\" | sed '/^[^ ][^ ]/d; /^ *$/d; s/^  //g' -\n      fi\n    else\n      $_WGET --user-agent=\"$USER_AGENT\" --header \"$_H5\" --header \"$_H4\" --header \"$_H3\" --header \"$_H2\" --header \"$_H1\" -S -O - \"$url\" 2>\"$HTTP_HEADER\"\n      if _contains \"$_WGET\" \" -d \"; then\n        # Demultiplex wget debug output\n        cat \"$HTTP_HEADER\" >&2\n        _sed_i '/^[^ ][^ ]/d; /^ *$/d' \"$HTTP_HEADER\"\n      fi\n      # remove leading whitespaces from header to match curl format\n      _sed_i 's/^  //g' \"$HTTP_HEADER\"\n    fi\n    ret=$?\n    if [ \"$ret\" = \"8\" ]; then\n      ret=0\n      _debug \"wget returned 8 as the server returned a 'Bad Request' response. Let's process the response later.\"\n    fi\n    if [ \"$ret\" != \"0\" ]; then\n      _err \"Please refer to https://www.gnu.org/software/wget/manual/html_node/Exit-Status.html for error code: $ret\"\n    fi\n  else\n    ret=$?\n    _err \"Neither curl nor wget have been found, cannot make GET request.\"\n  fi\n  _debug \"ret\" \"$ret\"\n  return $ret\n}\n\n_head_n() {\n  head -n \"$1\"\n}\n\n_tail_n() {\n  if _is_solaris; then\n    #fix for solaris\n    tail -\"$1\"\n  else\n    tail -n \"$1\"\n  fi\n}\n\n_tail_c() {\n  tail -c \"$1\" 2>/dev/null || tail -\"$1\"c\n}\n\n# url  payload needbase64  keyfile\n_send_signed_request() {\n  url=$1\n  payload=$2\n  needbase64=$3\n  keyfile=$4\n  if [ -z \"$keyfile\" ]; then\n    keyfile=\"$ACCOUNT_KEY_PATH\"\n  fi\n  _debug \"=======Sending Signed Request=======\"\n  _debug url \"$url\"\n  _debug payload \"$payload\"\n\n  if ! _calcjwk \"$keyfile\"; then\n    return 1\n  fi\n\n  __request_conent_type=\"$CONTENT_TYPE_JSON\"\n\n  payload64=$(printf \"%s\" \"$payload\" | _base64 | _url_replace)\n  _debug3 payload64 \"$payload64\"\n\n  MAX_REQUEST_RETRY_TIMES=20\n  _sleep_retry_sec=1\n  _request_retry_times=0\n  while [ \"${_request_retry_times}\" -lt \"$MAX_REQUEST_RETRY_TIMES\" ]; do\n    _request_retry_times=$(_math \"$_request_retry_times\" + 1)\n    _debug3 _request_retry_times \"$_request_retry_times\"\n    if [ -z \"$_CACHED_NONCE\" ]; then\n      _headers=\"\"\n      if [ \"$ACME_NEW_NONCE\" ]; then\n        _debug2 \"Get nonce with HEAD. ACME_NEW_NONCE\" \"$ACME_NEW_NONCE\"\n        nonceurl=\"$ACME_NEW_NONCE\"\n        if _post \"\" \"$nonceurl\" \"\" \"HEAD\" \"$__request_conent_type\" >/dev/null; then\n          _headers=\"$(cat \"$HTTP_HEADER\")\"\n          _debug2 _headers \"$_headers\"\n          _CACHED_NONCE=\"$(echo \"$_headers\" | grep -i \"Replay-Nonce:\" | _head_n 1 | tr -d \"\\r\\n \" | cut -d ':' -f 2 | cut -d , -f 1)\"\n        fi\n      fi\n      if [ -z \"$_CACHED_NONCE\" ]; then\n        _debug2 \"Get nonce with GET. ACME_DIRECTORY\" \"$ACME_DIRECTORY\"\n        nonceurl=\"$ACME_DIRECTORY\"\n        _headers=\"$(_get \"$nonceurl\" \"onlyheader\")\"\n        _debug2 _headers \"$_headers\"\n        _CACHED_NONCE=\"$(echo \"$_headers\" | grep -i \"Replay-Nonce:\" | _head_n 1 | tr -d \"\\r\\n \" | cut -d ':' -f 2)\"\n      fi\n      if [ -z \"$_CACHED_NONCE\" ] && [ \"$ACME_NEW_NONCE\" ]; then\n        _debug2 \"Get nonce with GET. ACME_NEW_NONCE\" \"$ACME_NEW_NONCE\"\n        nonceurl=\"$ACME_NEW_NONCE\"\n        _headers=\"$(_get \"$nonceurl\" \"onlyheader\")\"\n        _debug2 _headers \"$_headers\"\n        _CACHED_NONCE=\"$(echo \"$_headers\" | grep -i \"Replay-Nonce:\" | _head_n 1 | tr -d \"\\r\\n \" | cut -d ':' -f 2)\"\n      fi\n      if [ \"$?\" != \"0\" ]; then\n        _err \"Cannot connect to $nonceurl to get nonce.\"\n        return 1\n      fi\n    else\n      _debug2 \"Use _CACHED_NONCE\" \"$_CACHED_NONCE\"\n    fi\n    nonce=\"$_CACHED_NONCE\"\n    _debug2 nonce \"$nonce\"\n    if [ -z \"$nonce\" ]; then\n      _info \"Could not get nonce, let's try again.\"\n      _sleep 2\n      continue\n    fi\n\n    if [ \"$url\" = \"$ACME_NEW_ACCOUNT\" ]; then\n      protected=\"$JWK_HEADERPLACE_PART1$nonce\\\", \\\"url\\\": \\\"${url}$JWK_HEADERPLACE_PART2, \\\"jwk\\\": $jwk\"'}'\n    elif [ \"$url\" = \"$ACME_REVOKE_CERT\" ] && [ \"$keyfile\" != \"$ACCOUNT_KEY_PATH\" ]; then\n      protected=\"$JWK_HEADERPLACE_PART1$nonce\\\", \\\"url\\\": \\\"${url}$JWK_HEADERPLACE_PART2, \\\"jwk\\\": $jwk\"'}'\n    else\n      protected=\"$JWK_HEADERPLACE_PART1$nonce\\\", \\\"url\\\": \\\"${url}$JWK_HEADERPLACE_PART2, \\\"kid\\\": \\\"${ACCOUNT_URL}\\\"\"'}'\n    fi\n\n    _debug3 protected \"$protected\"\n\n    protected64=\"$(printf \"%s\" \"$protected\" | _base64 | _url_replace)\"\n    _debug3 protected64 \"$protected64\"\n\n    if ! _sig_t=\"$(printf \"%s\" \"$protected64.$payload64\" | _sign \"$keyfile\" \"sha256\")\"; then\n      _err \"Sign request failed.\"\n      return 1\n    fi\n    _debug3 _sig_t \"$_sig_t\"\n\n    sig=\"$(printf \"%s\" \"$_sig_t\" | _url_replace)\"\n    _debug3 sig \"$sig\"\n\n    body=\"{\\\"protected\\\": \\\"$protected64\\\", \\\"payload\\\": \\\"$payload64\\\", \\\"signature\\\": \\\"$sig\\\"}\"\n    _debug3 body \"$body\"\n\n    response=\"$(_post \"$body\" \"$url\" \"$needbase64\" \"POST\" \"$__request_conent_type\")\"\n    _CACHED_NONCE=\"\"\n\n    if [ \"$?\" != \"0\" ]; then\n      _err \"Cannot make POST request to $url\"\n      return 1\n    fi\n\n    responseHeaders=\"$(cat \"$HTTP_HEADER\")\"\n    _debug2 responseHeaders \"$responseHeaders\"\n\n    code=\"$(grep \"^HTTP\" \"$HTTP_HEADER\" | _tail_n 1 | cut -d \" \" -f 2 | tr -d \"\\r\\n\")\"\n    _debug code \"$code\"\n\n    _debug2 original \"$response\"\n    if echo \"$responseHeaders\" | grep -i \"Content-Type: *application/json\" >/dev/null 2>&1; then\n      response=\"$(echo \"$response\" | _json_decode | _normalizeJson)\"\n    fi\n    _debug2 response \"$response\"\n\n    _CACHED_NONCE=\"$(echo \"$responseHeaders\" | grep -i \"Replay-Nonce:\" | _head_n 1 | tr -d \"\\r\\n \" | cut -d ':' -f 2 | cut -d , -f 1)\"\n\n    if ! _startswith \"$code\" \"2\"; then\n      _body=\"$response\"\n      if [ \"$needbase64\" ]; then\n        _body=\"$(echo \"$_body\" | _dbase64 multiline)\"\n        _debug3 _body \"$_body\"\n      fi\n\n      _retryafter=$(echo \"$responseHeaders\" | grep -i \"^Retry-After *: *[0-9]\\+ *\" | cut -d : -f 2 | tr -d ' ' | tr -d '\\r')\n      if [ \"$code\" = '503' ]; then\n        _sleep_overload_retry_sec=$_retryafter\n        if [ -z \"$_sleep_overload_retry_sec\" ]; then\n          _sleep_overload_retry_sec=5\n        fi\n        if [ $_sleep_overload_retry_sec -le 600 ]; then\n          _info \"It seems the CA server is currently overloaded, let's wait and retry. Sleeping for $_sleep_overload_retry_sec seconds.\"\n          _sleep $_sleep_overload_retry_sec\n          continue\n        else\n          _info \"The retryafter=$_retryafter value is too large (> 600), will not retry anymore.\"\n        fi\n      fi\n      if _contains \"$_body\" \"JWS has invalid anti-replay nonce\" || _contains \"$_body\" \"JWS has an invalid anti-replay nonce\"; then\n        _info \"It seems the CA server is busy now, let's wait and retry. Sleeping for $_sleep_retry_sec seconds.\"\n        _CACHED_NONCE=\"\"\n        _sleep $_sleep_retry_sec\n        continue\n      fi\n      if _contains \"$_body\" \"The Replay Nonce is not recognized\"; then\n        _info \"The replay nonce is not valid, let's get a new one. Sleeping for $_sleep_retry_sec seconds.\"\n        _CACHED_NONCE=\"\"\n        _sleep $_sleep_retry_sec\n        continue\n      fi\n    fi\n    return 0\n  done\n  _info \"Giving up sending to CA server after $MAX_REQUEST_RETRY_TIMES retries.\"\n  return 1\n\n}\n\n#setopt \"file\"  \"opt\"  \"=\"  \"value\" [\";\"]\n_setopt() {\n  __conf=\"$1\"\n  __opt=\"$2\"\n  __sep=\"$3\"\n  __val=\"$4\"\n  __end=\"$5\"\n  if [ -z \"$__opt\" ]; then\n    _usage usage: _setopt '\"file\"  \"opt\"  \"=\"  \"value\" [\";\"]'\n    return\n  fi\n  if [ ! -f \"$__conf\" ]; then\n    touch \"$__conf\"\n  fi\n  if [ -n \"$(_tail_c 1 <\"$__conf\")\" ]; then\n    echo >>\"$__conf\"\n  fi\n\n  if grep -n \"^$__opt$__sep\" \"$__conf\" >/dev/null; then\n    _debug3 OK\n    if _contains \"$__val\" \"&\"; then\n      __val=\"$(echo \"$__val\" | sed 's/&/\\\\&/g')\"\n    fi\n    if _contains \"$__val\" \"|\"; then\n      __val=\"$(echo \"$__val\" | sed 's/|/\\\\|/g')\"\n    fi\n    text=\"$(cat \"$__conf\")\"\n    printf -- \"%s\\n\" \"$text\" | sed \"s|^$__opt$__sep.*$|$__opt$__sep$__val$__end|\" >\"$__conf\"\n\n  elif grep -n \"^#$__opt$__sep\" \"$__conf\" >/dev/null; then\n    if _contains \"$__val\" \"&\"; then\n      __val=\"$(echo \"$__val\" | sed 's/&/\\\\&/g')\"\n    fi\n    if _contains \"$__val\" \"|\"; then\n      __val=\"$(echo \"$__val\" | sed 's/|/\\\\|/g')\"\n    fi\n    text=\"$(cat \"$__conf\")\"\n    printf -- \"%s\\n\" \"$text\" | sed \"s|^#$__opt$__sep.*$|$__opt$__sep$__val$__end|\" >\"$__conf\"\n\n  else\n    _debug3 APP\n    echo \"$__opt$__sep$__val$__end\" >>\"$__conf\"\n  fi\n  _debug3 \"$(grep -n \"^$__opt$__sep\" \"$__conf\")\"\n}\n\n#_save_conf  file key  value base64encode\n#save to conf\n_save_conf() {\n  _s_c_f=\"$1\"\n  _sdkey=\"$2\"\n  _sdvalue=\"$3\"\n  _b64encode=\"$4\"\n  if [ \"$_sdvalue\" ] && [ \"$_b64encode\" ]; then\n    _sdvalue=\"${B64CONF_START}$(printf \"%s\" \"${_sdvalue}\" | _base64)${B64CONF_END}\"\n  fi\n  if [ \"$_s_c_f\" ]; then\n    _setopt \"$_s_c_f\" \"$_sdkey\" \"=\" \"'$_sdvalue'\"\n  else\n    _err \"Config file is empty, cannot save $_sdkey=$_sdvalue\"\n  fi\n}\n\n#_clear_conf file  key\n_clear_conf() {\n  _c_c_f=\"$1\"\n  _sdkey=\"$2\"\n  if [ \"$_c_c_f\" ]; then\n    _conf_data=\"$(cat \"$_c_c_f\")\"\n    echo \"$_conf_data\" | sed \"/^$_sdkey *=.*$/d\" >\"$_c_c_f\"\n  else\n    _err \"Config file is empty, cannot clear\"\n  fi\n}\n\n#_read_conf file  key\n_read_conf() {\n  _r_c_f=\"$1\"\n  _sdkey=\"$2\"\n  if [ -f \"$_r_c_f\" ]; then\n    _sdv=\"$(\n      eval \"$(grep \"^$_sdkey *=\" \"$_r_c_f\")\"\n      eval \"printf \\\"%s\\\" \\\"\\$$_sdkey\\\"\"\n    )\"\n    if _startswith \"$_sdv\" \"${B64CONF_START}\" && _endswith \"$_sdv\" \"${B64CONF_END}\"; then\n      _sdv=\"$(echo \"$_sdv\" | sed \"s/${B64CONF_START}//\" | sed \"s/${B64CONF_END}//\" | _dbase64)\"\n    fi\n    printf \"%s\" \"$_sdv\"\n  else\n    _debug \"Config file is empty, cannot read $_sdkey\"\n  fi\n}\n\n#_savedomainconf   key  value  base64encode\n#save to domain.conf\n_savedomainconf() {\n  _save_conf \"$DOMAIN_CONF\" \"$@\"\n}\n\n#_cleardomainconf   key\n_cleardomainconf() {\n  _clear_conf \"$DOMAIN_CONF\" \"$1\"\n}\n\n#_readdomainconf   key\n_readdomainconf() {\n  _read_conf \"$DOMAIN_CONF\" \"$1\"\n}\n\n#_migratedomainconf   oldkey  newkey  base64encode\n_migratedomainconf() {\n  _old_key=\"$1\"\n  _new_key=\"$2\"\n  _b64encode=\"$3\"\n  _old_value=$(_readdomainconf \"$_old_key\")\n  _cleardomainconf \"$_old_key\"\n  if [ -z \"$_old_value\" ]; then\n    return 1 # migrated failed: old value is empty\n  fi\n  _new_value=$(_readdomainconf \"$_new_key\")\n  if [ -n \"$_new_value\" ]; then\n    _debug \"Domain config new key exists, old key $_old_key='$_old_value' has been removed.\"\n    return 1 # migrated failed: old value replaced by new value\n  fi\n  _savedomainconf \"$_new_key\" \"$_old_value\" \"$_b64encode\"\n  _debug \"Domain config $_old_key has been migrated to $_new_key.\"\n}\n\n#_migratedeployconf   oldkey  newkey  base64encode\n_migratedeployconf() {\n  _migratedomainconf \"$1\" \"SAVED_$2\" \"$3\" ||\n    _migratedomainconf \"SAVED_$1\" \"SAVED_$2\" \"$3\" # try only when oldkey itself is not found\n}\n\n#key  value  base64encode\n_savedeployconf() {\n  _savedomainconf \"SAVED_$1\" \"$2\" \"$3\"\n  #remove later\n  _cleardomainconf \"$1\"\n}\n\n#key\n_getdeployconf() {\n  _rac_key=\"$1\"\n  _rac_value=\"$(eval echo \\$\"$_rac_key\")\"\n  if [ \"$_rac_value\" ]; then\n    if _startswith \"$_rac_value\" '\"' && _endswith \"$_rac_value\" '\"'; then\n      _debug2 \"trim quotation marks\"\n      eval $_rac_key=$_rac_value\n      export $_rac_key\n    fi\n    return 0 # do nothing\n  fi\n  _saved=\"$(_readdomainconf \"SAVED_$_rac_key\")\"\n  eval $_rac_key=\\$_saved\n  export $_rac_key\n}\n\n#_saveaccountconf  key  value  base64encode\n_saveaccountconf() {\n  _save_conf \"$ACCOUNT_CONF_PATH\" \"$@\"\n}\n\n#key  value base64encode\n_saveaccountconf_mutable() {\n  _save_conf \"$ACCOUNT_CONF_PATH\" \"SAVED_$1\" \"$2\" \"$3\"\n  #remove later\n  _clearaccountconf \"$1\"\n}\n\n#key\n_readaccountconf() {\n  _read_conf \"$ACCOUNT_CONF_PATH\" \"$1\"\n}\n\n#key\n_readaccountconf_mutable() {\n  _rac_key=\"$1\"\n  _readaccountconf \"SAVED_$_rac_key\"\n}\n\n#_clearaccountconf   key\n_clearaccountconf() {\n  _clear_conf \"$ACCOUNT_CONF_PATH\" \"$1\"\n}\n\n#key\n_clearaccountconf_mutable() {\n  _clearaccountconf \"SAVED_$1\"\n  #remove later\n  _clearaccountconf \"$1\"\n}\n\n#_savecaconf  key  value\n_savecaconf() {\n  _save_conf \"$CA_CONF\" \"$1\" \"$2\"\n}\n\n#_readcaconf   key\n_readcaconf() {\n  _read_conf \"$CA_CONF\" \"$1\"\n}\n\n#_clearaccountconf   key\n_clearcaconf() {\n  _clear_conf \"$CA_CONF\" \"$1\"\n}\n\n# content localaddress\n_startserver() {\n  content=\"$1\"\n  ncaddr=\"$2\"\n  _debug \"content\" \"$content\"\n  _debug \"ncaddr\" \"$ncaddr\"\n\n  _debug \"startserver: $$\"\n\n  _debug Le_HTTPPort \"$Le_HTTPPort\"\n  _debug Le_Listen_V4 \"$Le_Listen_V4\"\n  _debug Le_Listen_V6 \"$Le_Listen_V6\"\n\n  _NC=\"socat\"\n  if [ \"$Le_Listen_V6\" ]; then\n    _NC=\"$_NC -6\"\n  else\n    _NC=\"$_NC -4\"\n  fi\n\n  if [ \"$DEBUG\" ] && [ \"$DEBUG\" -gt \"1\" ]; then\n    _NC=\"$_NC -d -d -v\"\n  fi\n\n  SOCAT_OPTIONS=TCP-LISTEN:$Le_HTTPPort,crlf,reuseaddr,fork\n\n  #Adding bind to local-address\n  if [ \"$ncaddr\" ]; then\n    SOCAT_OPTIONS=\"$SOCAT_OPTIONS,bind=${ncaddr}\"\n  fi\n\n  _content_len=\"$(printf \"%s\" \"$content\" | wc -c)\"\n  _debug _content_len \"$_content_len\"\n  _debug \"_NC\" \"$_NC $SOCAT_OPTIONS\"\n  export _SOCAT_ERR=\"$(_mktemp)\"\n  $_NC $SOCAT_OPTIONS SYSTEM:\"sleep 1; \\\necho 'HTTP/1.0 200 OK'; \\\necho 'Content-Length\\: $_content_len'; \\\necho ''; \\\nprintf '%s' '$content';\" 2>\"$_SOCAT_ERR\" &\n  serverproc=\"$!\"\n  if [ -f \"$_SOCAT_ERR\" ]; then\n    if grep \"Permission denied\" \"$_SOCAT_ERR\" >/dev/null; then\n      _err \"socat: $(cat $_SOCAT_ERR)\"\n      _err \"Can not listen for user: $(whoami)\"\n      _err \"Maybe try with root again?\"\n      rm -f \"$_SOCAT_ERR\"\n      return 1\n    fi\n  fi\n}\n\n_stopserver() {\n  pid=\"$1\"\n  _debug \"pid\" \"$pid\"\n  if [ -z \"$pid\" ]; then\n    rm -f \"$_SOCAT_ERR\"\n    return\n  fi\n\n  kill $pid\n  rm -f \"$_SOCAT_ERR\"\n\n}\n\n# sleep sec\n_sleep() {\n  _sleep_sec=\"$1\"\n  if [ \"$__INTERACTIVE\" ]; then\n    _sleep_c=\"$_sleep_sec\"\n    while [ \"$_sleep_c\" -ge \"0\" ]; do\n      printf \"\\r      \\r\"\n      __green \"$_sleep_c\"\n      _sleep_c=\"$(_math \"$_sleep_c\" - 1)\"\n      sleep 1\n    done\n    printf \"\\r\"\n  else\n    sleep \"$_sleep_sec\"\n  fi\n}\n\n# _starttlsserver  san_a  san_b port content _ncaddr acmeValidationv1\n_starttlsserver() {\n  _info \"Starting tls server.\"\n  san_a=\"$1\"\n  san_b=\"$2\"\n  port=\"$3\"\n  content=\"$4\"\n  opaddr=\"$5\"\n  acmeValidationv1=\"$6\"\n\n  _debug san_a \"$san_a\"\n  _debug san_b \"$san_b\"\n  _debug port \"$port\"\n  _debug acmeValidationv1 \"$acmeValidationv1\"\n\n  #create key TLS_KEY\n  if ! _createkey \"2048\" \"$TLS_KEY\"; then\n    _err \"Error creating TLS validation key.\"\n    return 1\n  fi\n\n  #create csr\n  alt=\"$san_a\"\n  if [ \"$san_b\" ]; then\n    alt=\"$alt,$san_b\"\n  fi\n  if ! _createcsr \"tls.acme.sh\" \"$alt\" \"$TLS_KEY\" \"$TLS_CSR\" \"$TLS_CONF\" \"$acmeValidationv1\"; then\n    _err \"Error creating TLS validation CSR.\"\n    return 1\n  fi\n\n  #self signed\n  if ! _signcsr \"$TLS_KEY\" \"$TLS_CSR\" \"$TLS_CONF\" \"$TLS_CERT\"; then\n    _err \"Error creating TLS validation cert.\"\n    return 1\n  fi\n\n  __S_OPENSSL=\"${ACME_OPENSSL_BIN:-openssl} s_server -www -cert $TLS_CERT  -key $TLS_KEY \"\n  if [ \"$opaddr\" ]; then\n    __S_OPENSSL=\"$__S_OPENSSL -accept $opaddr:$port\"\n  else\n    __S_OPENSSL=\"$__S_OPENSSL -accept $port\"\n  fi\n\n  _debug Le_Listen_V4 \"$Le_Listen_V4\"\n  _debug Le_Listen_V6 \"$Le_Listen_V6\"\n  if [ \"$Le_Listen_V4\" ]; then\n    __S_OPENSSL=\"$__S_OPENSSL -4\"\n  elif [ \"$Le_Listen_V6\" ]; then\n    __S_OPENSSL=\"$__S_OPENSSL -6\"\n  fi\n\n  if [ \"$acmeValidationv1\" ]; then\n    __S_OPENSSL=\"$__S_OPENSSL -alpn acme-tls/1\"\n  fi\n\n  _debug \"$__S_OPENSSL\"\n  if [ \"$DEBUG\" ] && [ \"$DEBUG\" -ge \"2\" ]; then\n    $__S_OPENSSL -tlsextdebug &\n  else\n    $__S_OPENSSL >/dev/null 2>&1 &\n  fi\n\n  serverproc=\"$!\"\n  sleep 1\n  _debug serverproc \"$serverproc\"\n}\n\n#file\n_readlink() {\n  _rf=\"$1\"\n  if ! readlink -f \"$_rf\" 2>/dev/null; then\n    if _startswith \"$_rf\" \"/\"; then\n      echo \"$_rf\"\n      return 0\n    fi\n    echo \"$(pwd)/$_rf\" | _conapath\n  fi\n}\n\n_conapath() {\n  sed \"s#/\\./#/#g\"\n}\n\n__initHome() {\n  if [ -z \"$_SCRIPT_HOME\" ]; then\n    if _exists readlink && _exists dirname; then\n      _debug \"Let's find the script directory.\"\n      _debug \"_SCRIPT_\" \"$_SCRIPT_\"\n      _script=\"$(_readlink \"$_SCRIPT_\")\"\n      _debug \"_script\" \"$_script\"\n      _script_home=\"$(dirname \"$_script\")\"\n      _debug \"_script_home\" \"$_script_home\"\n      if [ -d \"$_script_home\" ]; then\n        export _SCRIPT_HOME=\"$_script_home\"\n      else\n        _err \"It seems the script home is not correct: $_script_home\"\n      fi\n    fi\n  fi\n\n  #  if [ -z \"$LE_WORKING_DIR\" ]; then\n  #    if [ -f \"$DEFAULT_INSTALL_HOME/account.conf\" ]; then\n  #      _debug \"It seems that $PROJECT_NAME is already installed in $DEFAULT_INSTALL_HOME\"\n  #      LE_WORKING_DIR=\"$DEFAULT_INSTALL_HOME\"\n  #    else\n  #      LE_WORKING_DIR=\"$_SCRIPT_HOME\"\n  #    fi\n  #  fi\n\n  if [ -z \"$LE_WORKING_DIR\" ]; then\n    _debug \"Using default home: $DEFAULT_INSTALL_HOME\"\n    LE_WORKING_DIR=\"$DEFAULT_INSTALL_HOME\"\n  fi\n  export LE_WORKING_DIR\n\n  if [ -z \"$LE_CONFIG_HOME\" ]; then\n    LE_CONFIG_HOME=\"$LE_WORKING_DIR\"\n  fi\n  _debug \"Using config home: $LE_CONFIG_HOME\"\n  export LE_CONFIG_HOME\n\n  _DEFAULT_ACCOUNT_CONF_PATH=\"$LE_CONFIG_HOME/account.conf\"\n\n  if [ -z \"$ACCOUNT_CONF_PATH\" ]; then\n    if [ -f \"$_DEFAULT_ACCOUNT_CONF_PATH\" ]; then\n      . \"$_DEFAULT_ACCOUNT_CONF_PATH\"\n    fi\n  fi\n\n  if [ -z \"$ACCOUNT_CONF_PATH\" ]; then\n    ACCOUNT_CONF_PATH=\"$_DEFAULT_ACCOUNT_CONF_PATH\"\n  fi\n  _debug3 ACCOUNT_CONF_PATH \"$ACCOUNT_CONF_PATH\"\n  DEFAULT_LOG_FILE=\"$LE_CONFIG_HOME/$PROJECT_NAME.log\"\n\n  DEFAULT_CA_HOME=\"$LE_CONFIG_HOME/ca\"\n\n  if [ -z \"$LE_TEMP_DIR\" ]; then\n    LE_TEMP_DIR=\"$LE_CONFIG_HOME/tmp\"\n  fi\n}\n\n_clearAPI() {\n  ACME_NEW_ACCOUNT=\"\"\n  ACME_KEY_CHANGE=\"\"\n  ACME_NEW_AUTHZ=\"\"\n  ACME_NEW_ORDER=\"\"\n  ACME_REVOKE_CERT=\"\"\n  ACME_NEW_NONCE=\"\"\n  ACME_AGREEMENT=\"\"\n}\n\n#server\n_initAPI() {\n  _api_server=\"${1:-$ACME_DIRECTORY}\"\n  _debug \"_init API for server: $_api_server\"\n\n  MAX_API_RETRY_TIMES=10\n  _sleep_retry_sec=10\n  _request_retry_times=0\n  while [ -z \"$ACME_NEW_ACCOUNT\" ] && [ \"${_request_retry_times}\" -lt \"$MAX_API_RETRY_TIMES\" ]; do\n    _request_retry_times=$(_math \"$_request_retry_times\" + 1)\n    response=$(_get \"$_api_server\")\n    if [ \"$?\" != \"0\" ]; then\n      _debug2 \"response\" \"$response\"\n      _info \"Cannot init API for: $_api_server.\"\n      _info \"Sleeping for $_sleep_retry_sec seconds and retrying.\"\n      _sleep \"$_sleep_retry_sec\"\n      continue\n    fi\n    response=$(echo \"$response\" | _json_decode)\n    _debug2 \"response\" \"$response\"\n\n    ACME_KEY_CHANGE=$(echo \"$response\" | _egrep_o 'keyChange\" *: *\"[^\"]*\"' | cut -d '\"' -f 3)\n    export ACME_KEY_CHANGE\n\n    ACME_NEW_AUTHZ=$(echo \"$response\" | _egrep_o 'newAuthz\" *: *\"[^\"]*\"' | cut -d '\"' -f 3)\n    export ACME_NEW_AUTHZ\n\n    ACME_NEW_ORDER=$(echo \"$response\" | _egrep_o 'newOrder\" *: *\"[^\"]*\"' | cut -d '\"' -f 3)\n    export ACME_NEW_ORDER\n\n    ACME_NEW_ACCOUNT=$(echo \"$response\" | _egrep_o 'newAccount\" *: *\"[^\"]*\"' | cut -d '\"' -f 3)\n    export ACME_NEW_ACCOUNT\n\n    ACME_REVOKE_CERT=$(echo \"$response\" | _egrep_o 'revokeCert\" *: *\"[^\"]*\"' | cut -d '\"' -f 3)\n    export ACME_REVOKE_CERT\n\n    ACME_NEW_NONCE=$(echo \"$response\" | _egrep_o 'newNonce\" *: *\"[^\"]*\"' | cut -d '\"' -f 3)\n    export ACME_NEW_NONCE\n\n    ACME_AGREEMENT=$(echo \"$response\" | _egrep_o 'termsOfService\" *: *\"[^\"]*\"' | cut -d '\"' -f 3)\n    export ACME_AGREEMENT\n\n    _debug \"ACME_KEY_CHANGE\" \"$ACME_KEY_CHANGE\"\n    _debug \"ACME_NEW_AUTHZ\" \"$ACME_NEW_AUTHZ\"\n    _debug \"ACME_NEW_ORDER\" \"$ACME_NEW_ORDER\"\n    _debug \"ACME_NEW_ACCOUNT\" \"$ACME_NEW_ACCOUNT\"\n    _debug \"ACME_REVOKE_CERT\" \"$ACME_REVOKE_CERT\"\n    _debug \"ACME_AGREEMENT\" \"$ACME_AGREEMENT\"\n    _debug \"ACME_NEW_NONCE\" \"$ACME_NEW_NONCE\"\n    if [ \"$ACME_NEW_ACCOUNT\" ] && [ \"$ACME_NEW_ORDER\" ]; then\n      return 0\n    fi\n    _info \"Sleeping for $_sleep_retry_sec seconds and retrying.\"\n    _sleep \"$_sleep_retry_sec\"\n  done\n  if [ \"$ACME_NEW_ACCOUNT\" ] && [ \"$ACME_NEW_ORDER\" ]; then\n    return 0\n  fi\n  _err \"Cannot init API for $_api_server\"\n  return 1\n}\n\n_clearCA() {\n  export CA_CONF=\n  export ACCOUNT_KEY_PATH=\n  export ACCOUNT_JSON_PATH=\n}\n\n#[domain]  [keylength or isEcc flag]\n_initpath() {\n  domain=\"$1\"\n  _ilength=\"$2\"\n\n  __initHome\n\n  if [ -f \"$ACCOUNT_CONF_PATH\" ]; then\n    . \"$ACCOUNT_CONF_PATH\"\n  fi\n\n  if [ \"$_ACME_IN_CRON\" ]; then\n    if [ ! \"$_USER_PATH_EXPORTED\" ]; then\n      _USER_PATH_EXPORTED=1\n      export PATH=\"$USER_PATH:$PATH\"\n    fi\n  fi\n\n  if [ -z \"$CA_HOME\" ]; then\n    CA_HOME=\"$DEFAULT_CA_HOME\"\n  fi\n\n  if [ -z \"$ACME_DIRECTORY\" ]; then\n    if [ \"$STAGE\" ]; then\n      ACME_DIRECTORY=\"$DEFAULT_STAGING_CA\"\n      _info \"Using ACME_DIRECTORY: $ACME_DIRECTORY\"\n    else\n      default_acme_server=$(_readaccountconf \"DEFAULT_ACME_SERVER\")\n      _debug default_acme_server \"$default_acme_server\"\n      if [ \"$default_acme_server\" ]; then\n        ACME_DIRECTORY=\"$default_acme_server\"\n      else\n        ACME_DIRECTORY=\"$DEFAULT_CA\"\n      fi\n    fi\n  fi\n\n  _debug ACME_DIRECTORY \"$ACME_DIRECTORY\"\n  _ACME_SERVER_HOST=\"$(echo \"$ACME_DIRECTORY\" | cut -d : -f 2 | tr -s / | cut -d / -f 2)\"\n  _debug2 \"_ACME_SERVER_HOST\" \"$_ACME_SERVER_HOST\"\n\n  _ACME_SERVER_PATH=\"$(echo \"$ACME_DIRECTORY\" | cut -d : -f 2- | tr -s / | cut -d / -f 3-)\"\n  _debug2 \"_ACME_SERVER_PATH\" \"$_ACME_SERVER_PATH\"\n\n  CA_DIR=\"$CA_HOME/$_ACME_SERVER_HOST/$_ACME_SERVER_PATH\"\n  _DEFAULT_CA_CONF=\"$CA_DIR/ca.conf\"\n  if [ -z \"$CA_CONF\" ]; then\n    CA_CONF=\"$_DEFAULT_CA_CONF\"\n  fi\n  _debug3 CA_CONF \"$CA_CONF\"\n\n  _OLD_CADIR=\"$CA_HOME/$_ACME_SERVER_HOST\"\n  _OLD_ACCOUNT_KEY=\"$_OLD_CADIR/account.key\"\n  _OLD_ACCOUNT_JSON=\"$_OLD_CADIR/account.json\"\n  _OLD_CA_CONF=\"$_OLD_CADIR/ca.conf\"\n\n  _DEFAULT_ACCOUNT_KEY_PATH=\"$CA_DIR/account.key\"\n  _DEFAULT_ACCOUNT_JSON_PATH=\"$CA_DIR/account.json\"\n  if [ -z \"$ACCOUNT_KEY_PATH\" ]; then\n    ACCOUNT_KEY_PATH=\"$_DEFAULT_ACCOUNT_KEY_PATH\"\n    if [ -f \"$_OLD_ACCOUNT_KEY\" ] && ! [ -f \"$ACCOUNT_KEY_PATH\" ]; then\n      mkdir -p \"$CA_DIR\"\n      mv \"$_OLD_ACCOUNT_KEY\" \"$ACCOUNT_KEY_PATH\"\n    fi\n  fi\n\n  if [ -z \"$ACCOUNT_JSON_PATH\" ]; then\n    ACCOUNT_JSON_PATH=\"$_DEFAULT_ACCOUNT_JSON_PATH\"\n    if [ -f \"$_OLD_ACCOUNT_JSON\" ] && ! [ -f \"$ACCOUNT_JSON_PATH\" ]; then\n      mkdir -p \"$CA_DIR\"\n      mv \"$_OLD_ACCOUNT_JSON\" \"$ACCOUNT_JSON_PATH\"\n    fi\n  fi\n\n  if [ -f \"$_OLD_CA_CONF\" ] && ! [ -f \"$CA_CONF\" ]; then\n    mkdir -p \"$CA_DIR\"\n    mv \"$_OLD_CA_CONF\" \"$CA_CONF\"\n  fi\n\n  if [ -f \"$CA_CONF\" ]; then\n    . \"$CA_CONF\"\n  fi\n\n  if [ -z \"$ACME_DIR\" ]; then\n    ACME_DIR=\"/home/.acme\"\n  fi\n\n  if [ -z \"$APACHE_CONF_BACKUP_DIR\" ]; then\n    APACHE_CONF_BACKUP_DIR=\"$LE_CONFIG_HOME\"\n  fi\n\n  if [ -z \"$USER_AGENT\" ]; then\n    USER_AGENT=\"$DEFAULT_USER_AGENT\"\n  fi\n\n  if [ -z \"$HTTP_HEADER\" ]; then\n    HTTP_HEADER=\"$LE_CONFIG_HOME/http.header\"\n  fi\n\n  _DEFAULT_CERT_HOME=\"$LE_CONFIG_HOME\"\n  if [ -z \"$CERT_HOME\" ]; then\n    CERT_HOME=\"$_DEFAULT_CERT_HOME\"\n  fi\n\n  if [ -z \"$ACME_OPENSSL_BIN\" ] || [ ! -f \"$ACME_OPENSSL_BIN\" ] || [ ! -x \"$ACME_OPENSSL_BIN\" ]; then\n    ACME_OPENSSL_BIN=\"$DEFAULT_OPENSSL_BIN\"\n  fi\n\n  if [ -z \"$domain\" ]; then\n    return 0\n  fi\n\n  if [ -z \"$DOMAIN_PATH\" ]; then\n    domainhome=\"$CERT_HOME/$domain\"\n    domainhomeecc=\"$CERT_HOME/$domain$ECC_SUFFIX\"\n\n    DOMAIN_PATH=\"$domainhome\"\n\n    if _isEccKey \"$_ilength\"; then\n      DOMAIN_PATH=\"$domainhomeecc\"\n    elif [ -z \"$__SELECTED_RSA_KEY\" ]; then\n      if [ ! -d \"$domainhome\" ] && [ -d \"$domainhomeecc\" ]; then\n        _info \"The domain '$domain' seems to already have an ECC cert, let's use it.\"\n        DOMAIN_PATH=\"$domainhomeecc\"\n      fi\n    fi\n    _debug DOMAIN_PATH \"$DOMAIN_PATH\"\n    export DOMAIN_PATH\n  fi\n\n  if [ -z \"$DOMAIN_BACKUP_PATH\" ]; then\n    DOMAIN_BACKUP_PATH=\"$DOMAIN_PATH/backup\"\n  fi\n\n  if [ -z \"$DOMAIN_CONF\" ]; then\n    DOMAIN_CONF=\"$DOMAIN_PATH/$domain.conf\"\n  fi\n\n  if [ -z \"$DOMAIN_SSL_CONF\" ]; then\n    DOMAIN_SSL_CONF=\"$DOMAIN_PATH/$domain.csr.conf\"\n  fi\n\n  if [ -z \"$CSR_PATH\" ]; then\n    CSR_PATH=\"$DOMAIN_PATH/$domain.csr\"\n  fi\n  if [ -z \"$CERT_KEY_PATH\" ]; then\n    CERT_KEY_PATH=\"$DOMAIN_PATH/$domain.key\"\n  fi\n  if [ -z \"$CERT_PATH\" ]; then\n    CERT_PATH=\"$DOMAIN_PATH/$domain.cer\"\n  fi\n  if [ -z \"$CA_CERT_PATH\" ]; then\n    CA_CERT_PATH=\"$DOMAIN_PATH/ca.cer\"\n  fi\n  if [ -z \"$CERT_FULLCHAIN_PATH\" ]; then\n    CERT_FULLCHAIN_PATH=\"$DOMAIN_PATH/fullchain.cer\"\n  fi\n  if [ -z \"$CERT_PFX_PATH\" ]; then\n    CERT_PFX_PATH=\"$DOMAIN_PATH/$domain.pfx\"\n  fi\n  if [ -z \"$CERT_PKCS8_PATH\" ]; then\n    CERT_PKCS8_PATH=\"$DOMAIN_PATH/$domain.pkcs8\"\n  fi\n\n  if [ -z \"$TLS_CONF\" ]; then\n    TLS_CONF=\"$DOMAIN_PATH/tls.validation.conf\"\n  fi\n  if [ -z \"$TLS_CERT\" ]; then\n    TLS_CERT=\"$DOMAIN_PATH/tls.validation.cert\"\n  fi\n  if [ -z \"$TLS_KEY\" ]; then\n    TLS_KEY=\"$DOMAIN_PATH/tls.validation.key\"\n  fi\n  if [ -z \"$TLS_CSR\" ]; then\n    TLS_CSR=\"$DOMAIN_PATH/tls.validation.csr\"\n  fi\n\n}\n\n_apachePath() {\n  _APACHECTL=\"apachectl\"\n  if ! _exists apachectl; then\n    if _exists apache2ctl; then\n      _APACHECTL=\"apache2ctl\"\n    else\n      _err \"'apachectl not found. It seems that Apache is not installed or you are not root.'\"\n      _err \"Please use webroot mode to try again.\"\n      return 1\n    fi\n  fi\n\n  if ! $_APACHECTL -V >/dev/null; then\n    return 1\n  fi\n\n  if [ \"$APACHE_HTTPD_CONF\" ]; then\n    _saveaccountconf APACHE_HTTPD_CONF \"$APACHE_HTTPD_CONF\"\n    httpdconf=\"$APACHE_HTTPD_CONF\"\n    httpdconfname=\"$(basename \"$httpdconfname\")\"\n  else\n    httpdconfname=\"$($_APACHECTL -V | grep SERVER_CONFIG_FILE= | cut -d = -f 2 | tr -d '\"')\"\n    _debug httpdconfname \"$httpdconfname\"\n\n    if [ -z \"$httpdconfname\" ]; then\n      _err \"Cannot read Apache config file.\"\n      return 1\n    fi\n\n    if _startswith \"$httpdconfname\" '/'; then\n      httpdconf=\"$httpdconfname\"\n      httpdconfname=\"$(basename \"$httpdconfname\")\"\n    else\n      httpdroot=\"$($_APACHECTL -V | grep HTTPD_ROOT= | cut -d = -f 2 | tr -d '\"')\"\n      _debug httpdroot \"$httpdroot\"\n      httpdconf=\"$httpdroot/$httpdconfname\"\n      httpdconfname=\"$(basename \"$httpdconfname\")\"\n    fi\n  fi\n  _debug httpdconf \"$httpdconf\"\n  _debug httpdconfname \"$httpdconfname\"\n  if [ ! -f \"$httpdconf\" ]; then\n    _err \"Apache config file not found\" \"$httpdconf\"\n    return 1\n  fi\n  return 0\n}\n\n_restoreApache() {\n  if [ -z \"$usingApache\" ]; then\n    return 0\n  fi\n  _initpath\n  if ! _apachePath; then\n    return 1\n  fi\n\n  if [ ! -f \"$APACHE_CONF_BACKUP_DIR/$httpdconfname\" ]; then\n    _debug \"No config file to restore.\"\n    return 0\n  fi\n\n  cat \"$APACHE_CONF_BACKUP_DIR/$httpdconfname\" >\"$httpdconf\"\n  _debug \"Restored: $httpdconf.\"\n  if ! $_APACHECTL -t; then\n    _err \"Sorry, there's been an error restoring the Apache config. Please ask for support on $PROJECT.\"\n    return 1\n  fi\n  _debug \"Restored successfully.\"\n  rm -f \"$APACHE_CONF_BACKUP_DIR/$httpdconfname\"\n  return 0\n}\n\n_setApache() {\n  _initpath\n  if ! _apachePath; then\n    return 1\n  fi\n\n  #test the conf first\n  _info \"Checking if there is an error in the Apache config file before starting.\"\n\n  if ! $_APACHECTL -t >/dev/null; then\n    _err \"The Apache config file has errors, please fix them first then try again.\"\n    _err \"Don't worry, no changes to your system have been made.\"\n    return 1\n  else\n    _info \"OK\"\n  fi\n\n  #backup the conf\n  _debug \"Backing up Apache config file\" \"$httpdconf\"\n  if ! cp \"$httpdconf\" \"$APACHE_CONF_BACKUP_DIR/\"; then\n    _err \"Cannot backup Apache config file, aborting. Don't worry, the Apache config has not been changed.\"\n    _err \"This might be an $PROJECT_NAME bug, please open an issue on $PROJECT\"\n    return 1\n  fi\n  _info \"Config file $httpdconf has been backed up to $APACHE_CONF_BACKUP_DIR/$httpdconfname\"\n  _info \"In case an error causes it to not be restored automatically, you can restore it yourself.\"\n  _info \"You do not need to do anything on success, as the backup file will automatically be deleted.\"\n\n  #add alias\n\n  apacheVer=\"$($_APACHECTL -V | grep \"Server version:\" | cut -d : -f 2 | cut -d \" \" -f 2 | cut -d '/' -f 2)\"\n  _debug \"apacheVer\" \"$apacheVer\"\n  apacheMajor=\"$(echo \"$apacheVer\" | cut -d . -f 1)\"\n  apacheMinor=\"$(echo \"$apacheVer\" | cut -d . -f 2)\"\n\n  if [ \"$apacheVer\" ] && [ \"$apacheMajor$apacheMinor\" -ge \"24\" ]; then\n    echo \"\nAlias /.well-known/acme-challenge  $ACME_DIR\n\n<Directory $ACME_DIR >\nRequire all granted\n</Directory>\n  \" >>\"$httpdconf\"\n  else\n    echo \"\nAlias /.well-known/acme-challenge  $ACME_DIR\n\n<Directory $ACME_DIR >\nOrder allow,deny\nAllow from all\n</Directory>\n  \" >>\"$httpdconf\"\n  fi\n\n  _msg=\"$($_APACHECTL -t 2>&1)\"\n  if [ \"$?\" != \"0\" ]; then\n    _err \"Sorry, an Apache config error has occurred\"\n    if _restoreApache; then\n      _err \"The Apache config file has been restored.\"\n    else\n      _err \"Sorry, the Apache config file cannot be restored, please open an issue on $PROJECT.\"\n    fi\n    return 1\n  fi\n\n  if [ ! -d \"$ACME_DIR\" ]; then\n    mkdir -p \"$ACME_DIR\"\n    chmod 755 \"$ACME_DIR\"\n  fi\n\n  if ! $_APACHECTL graceful; then\n    _err \"$_APACHECTL graceful error, please open an issue on $PROJECT.\"\n    _restoreApache\n    return 1\n  fi\n  usingApache=\"1\"\n  return 0\n}\n\n#find the real nginx conf file\n#backup\n#set the nginx conf\n#returns the real nginx conf file\n_setNginx() {\n  _d=\"$1\"\n  _croot=\"$2\"\n  _thumbpt=\"$3\"\n\n  FOUND_REAL_NGINX_CONF=\"\"\n  FOUND_REAL_NGINX_CONF_LN=\"\"\n  BACKUP_NGINX_CONF=\"\"\n  _debug _croot \"$_croot\"\n  _start_f=\"$(echo \"$_croot\" | cut -d : -f 2)\"\n  _debug _start_f \"$_start_f\"\n  if [ -z \"$_start_f\" ]; then\n    _debug \"Finding config using the nginx command\"\n    if [ -z \"$NGINX_CONF\" ]; then\n      if ! _exists \"nginx\"; then\n        _err \"nginx command not found.\"\n        return 1\n      fi\n      NGINX_CONF=\"$(nginx -V 2>&1 | _egrep_o \"\\-\\-conf-path=[^ ]* \" | tr -d \" \")\"\n      _debug NGINX_CONF \"$NGINX_CONF\"\n      NGINX_CONF=\"$(echo \"$NGINX_CONF\" | cut -d = -f 2)\"\n      _debug NGINX_CONF \"$NGINX_CONF\"\n      if [ -z \"$NGINX_CONF\" ]; then\n        _err \"Cannot find nginx config.\"\n        NGINX_CONF=\"\"\n        return 1\n      fi\n      if [ ! -f \"$NGINX_CONF\" ]; then\n        _err \"'$NGINX_CONF' doesn't exist.\"\n        NGINX_CONF=\"\"\n        return 1\n      fi\n      _debug \"Found nginx config file: $NGINX_CONF\"\n    fi\n    _start_f=\"$NGINX_CONF\"\n  fi\n  _debug \"Detecting nginx conf for $_d from: $_start_f\"\n  if ! _checkConf \"$_d\" \"$_start_f\"; then\n    _err \"Cannot find config file for domain $d\"\n    return 1\n  fi\n  _info \"Found config file: $FOUND_REAL_NGINX_CONF\"\n\n  _ln=$FOUND_REAL_NGINX_CONF_LN\n  _debug \"_ln\" \"$_ln\"\n\n  _lnn=$(_math $_ln + 1)\n  _debug _lnn \"$_lnn\"\n  _start_tag=\"$(sed -n \"$_lnn,${_lnn}p\" \"$FOUND_REAL_NGINX_CONF\")\"\n  _debug \"_start_tag\" \"$_start_tag\"\n  if [ \"$_start_tag\" = \"$NGINX_START\" ]; then\n    _info \"The domain $_d is already configured, skipping\"\n    FOUND_REAL_NGINX_CONF=\"\"\n    return 0\n  fi\n\n  mkdir -p \"$DOMAIN_BACKUP_PATH\"\n  _backup_conf=\"$DOMAIN_BACKUP_PATH/$_d.nginx.conf\"\n  _debug _backup_conf \"$_backup_conf\"\n  BACKUP_NGINX_CONF=\"$_backup_conf\"\n  _info \"Backing $FOUND_REAL_NGINX_CONF up to $_backup_conf\"\n  if ! cp \"$FOUND_REAL_NGINX_CONF\" \"$_backup_conf\"; then\n    _err \"Backup error.\"\n    FOUND_REAL_NGINX_CONF=\"\"\n    return 1\n  fi\n\n  if ! _exists \"nginx\"; then\n    _err \"nginx command not found.\"\n    return 1\n  fi\n  _info \"Checking the nginx config before setting up.\"\n  if ! nginx -t >/dev/null 2>&1; then\n    _err \"It seems that the nginx config is not correct, cannot continue.\"\n    return 1\n  fi\n\n  _info \"OK, setting up the nginx config file\"\n\n  if ! sed -n \"1,${_ln}p\" \"$_backup_conf\" >\"$FOUND_REAL_NGINX_CONF\"; then\n    cat \"$_backup_conf\" >\"$FOUND_REAL_NGINX_CONF\"\n    _err \"Error writing nginx config. Restoring it to its original version.\"\n    return 1\n  fi\n\n  echo \"$NGINX_START\nlocation ~ \\\"^/\\.well-known/acme-challenge/([-_a-zA-Z0-9]+)\\$\\\" {\n  default_type text/plain;\n  return 200 \\\"\\$1.$_thumbpt\\\";\n}\n#NGINX_START\n\" >>\"$FOUND_REAL_NGINX_CONF\"\n\n  if ! sed -n \"${_lnn},99999p\" \"$_backup_conf\" >>\"$FOUND_REAL_NGINX_CONF\"; then\n    cat \"$_backup_conf\" >\"$FOUND_REAL_NGINX_CONF\"\n    _err \"Error writing nginx config. Restoring it to its original version.\"\n    return 1\n  fi\n  _debug3 \"Modified config:$(cat $FOUND_REAL_NGINX_CONF)\"\n  _info \"nginx config has been written, let's check it again.\"\n  if ! nginx -t >/dev/null 2>&1; then\n    _err \"There seems to be a problem with the nginx config, let's restore it to its original version.\"\n    cat \"$_backup_conf\" >\"$FOUND_REAL_NGINX_CONF\"\n    return 1\n  fi\n\n  _info \"Reloading nginx\"\n  if ! nginx -s reload >/dev/null 2>&1; then\n    _err \"There seems to be a problem with the nginx config, let's restore it to its original version.\"\n    cat \"$_backup_conf\" >\"$FOUND_REAL_NGINX_CONF\"\n    return 1\n  fi\n\n  return 0\n}\n\n#d , conf\n_checkConf() {\n  _d=\"$1\"\n  _c_file=\"$2\"\n  _debug \"Starting _checkConf from: $_c_file\"\n  if [ ! -f \"$2\" ] && ! echo \"$2\" | grep '*$' >/dev/null && echo \"$2\" | grep '*' >/dev/null; then\n    _debug \"wildcard\"\n    for _w_f in $2; do\n      if [ -f \"$_w_f\" ] && _checkConf \"$1\" \"$_w_f\"; then\n        return 0\n      fi\n    done\n    #not found\n    return 1\n  elif [ -f \"$2\" ]; then\n    _debug \"single\"\n    if _isRealNginxConf \"$1\" \"$2\"; then\n      _debug \"$2 found.\"\n      FOUND_REAL_NGINX_CONF=\"$2\"\n      return 0\n    fi\n    if cat \"$2\" | tr \"\\t\" \" \" | grep \"^ *include *.*;\" >/dev/null; then\n      _debug \"Trying include files\"\n      for included in $(cat \"$2\" | tr \"\\t\" \" \" | grep \"^ *include *.*;\" | sed \"s/include //\" | tr -d \" ;\"); do\n        _debug \"Checking included $included\"\n        if ! _startswith \"$included\" \"/\" && _exists dirname; then\n          _relpath=\"$(dirname \"$2\")\"\n          _debug \"_relpath\" \"$_relpath\"\n          included=\"$_relpath/$included\"\n        fi\n        if _checkConf \"$1\" \"$included\"; then\n          return 0\n        fi\n      done\n    fi\n    return 1\n  else\n    _debug \"$2 not found.\"\n    return 1\n  fi\n  return 1\n}\n\n#d , conf\n_isRealNginxConf() {\n  _debug \"_isRealNginxConf $1 $2\"\n  if [ -f \"$2\" ]; then\n    for _fln in $(tr \"\\t\" ' ' <\"$2\" | grep -n \"^ *server_name.* $1\" | cut -d : -f 1); do\n      _debug _fln \"$_fln\"\n      if [ \"$_fln\" ]; then\n        _start=$(tr \"\\t\" ' ' <\"$2\" | _head_n \"$_fln\" | grep -n \"^ *server *\" | grep -v server_name | _tail_n 1)\n        _debug \"_start\" \"$_start\"\n        _start_n=$(echo \"$_start\" | cut -d : -f 1)\n        _start_nn=$(_math $_start_n + 1)\n        _debug \"_start_n\" \"$_start_n\"\n        _debug \"_start_nn\" \"$_start_nn\"\n\n        _left=\"$(sed -n \"${_start_nn},99999p\" \"$2\")\"\n        _debug2 _left \"$_left\"\n        _end=\"$(echo \"$_left\" | tr \"\\t\" ' ' | grep -n \"^ *server *\" | grep -v server_name | _head_n 1)\"\n        _debug \"_end\" \"$_end\"\n        if [ \"$_end\" ]; then\n          _end_n=$(echo \"$_end\" | cut -d : -f 1)\n          _debug \"_end_n\" \"$_end_n\"\n          _seg_n=$(echo \"$_left\" | sed -n \"1,${_end_n}p\")\n        else\n          _seg_n=\"$_left\"\n        fi\n\n        _debug \"_seg_n\" \"$_seg_n\"\n\n        _skip_ssl=1\n        for _listen_i in $(echo \"$_seg_n\" | tr \"\\t\" ' ' | grep \"^ *listen\" | tr -d \" \"); do\n          if [ \"$_listen_i\" ]; then\n            if [ \"$(echo \"$_listen_i\" | _egrep_o \"listen.*ssl\")\" ]; then\n              _debug2 \"$_listen_i is ssl\"\n            else\n              _debug2 \"$_listen_i is plain text\"\n              _skip_ssl=\"\"\n              break\n            fi\n          fi\n        done\n\n        if [ \"$_skip_ssl\" = \"1\" ]; then\n          _debug \"ssl on, skip\"\n        else\n          FOUND_REAL_NGINX_CONF_LN=$_fln\n          _debug3 \"found FOUND_REAL_NGINX_CONF_LN\" \"$FOUND_REAL_NGINX_CONF_LN\"\n          return 0\n        fi\n      fi\n    done\n  fi\n  return 1\n}\n\n#restore all the nginx conf\n_restoreNginx() {\n  if [ -z \"$NGINX_RESTORE_VLIST\" ]; then\n    _debug \"No need to restore nginx config, skipping.\"\n    return\n  fi\n  _debug \"_restoreNginx\"\n  _debug \"NGINX_RESTORE_VLIST\" \"$NGINX_RESTORE_VLIST\"\n\n  for ng_entry in $(echo \"$NGINX_RESTORE_VLIST\" | tr \"$dvsep\" ' '); do\n    _debug \"ng_entry\" \"$ng_entry\"\n    _nd=$(echo \"$ng_entry\" | cut -d \"$sep\" -f 1)\n    _ngconf=$(echo \"$ng_entry\" | cut -d \"$sep\" -f 2)\n    _ngbackupconf=$(echo \"$ng_entry\" | cut -d \"$sep\" -f 3)\n    _info \"Restoring from $_ngbackupconf to $_ngconf\"\n    cat \"$_ngbackupconf\" >\"$_ngconf\"\n  done\n\n  _info \"Reloading nginx\"\n  if ! nginx -s reload >/dev/null; then\n    _err \"An error occurred while reloading nginx, please open an issue on $PROJECT.\"\n    return 1\n  fi\n  return 0\n}\n\n_clearup() {\n  _stopserver \"$serverproc\"\n  serverproc=\"\"\n  _restoreApache\n  _restoreNginx\n  _clearupdns\n  if [ -z \"$DEBUG\" ]; then\n    rm -f \"$TLS_CONF\"\n    rm -f \"$TLS_CERT\"\n    rm -f \"$TLS_KEY\"\n    rm -f \"$TLS_CSR\"\n  fi\n}\n\n_clearupdns() {\n  _debug \"_clearupdns\"\n  _debug \"dns_entries\" \"$dns_entries\"\n\n  if [ -z \"$dns_entries\" ]; then\n    _debug \"Skipping dns.\"\n    return\n  fi\n  _info \"Removing DNS records.\"\n\n  for entry in $dns_entries; do\n    d=$(_getfield \"$entry\" 1)\n    txtdomain=$(_getfield \"$entry\" 2)\n    aliasDomain=$(_getfield \"$entry\" 3)\n    _currentRoot=$(_getfield \"$entry\" 4)\n    txt=$(_getfield \"$entry\" 5)\n    d_api=$(_getfield \"$entry\" 6)\n    _debug \"d\" \"$d\"\n    _debug \"txtdomain\" \"$txtdomain\"\n    _debug \"aliasDomain\" \"$aliasDomain\"\n    _debug \"_currentRoot\" \"$_currentRoot\"\n    _debug \"txt\" \"$txt\"\n    _debug \"d_api\" \"$d_api\"\n    if [ \"$d_api\" = \"$txt\" ]; then\n      d_api=\"\"\n    fi\n\n    if [ -z \"$d_api\" ]; then\n      _info \"Domain API file was not found: $d_api\"\n      continue\n    fi\n\n    if [ \"$aliasDomain\" ]; then\n      txtdomain=\"$aliasDomain\"\n    fi\n\n    (\n      if ! . \"$d_api\"; then\n        _err \"Error loading file $d_api. Please check your API file and try again.\"\n        return 1\n      fi\n\n      rmcommand=\"${_currentRoot}_rm\"\n      if ! _exists \"$rmcommand\"; then\n        _err \"It seems that your API file doesn't define $rmcommand\"\n        return 1\n      fi\n      _info \"Removing txt: $txt for domain: $txtdomain\"\n      if ! $rmcommand \"$txtdomain\" \"$txt\"; then\n        _err \"Error removing txt for domain: $txtdomain\"\n        return 1\n      fi\n      _info \"Successfully removed\"\n    )\n\n  done\n}\n\n# webroot  removelevel tokenfile\n_clearupwebbroot() {\n  __webroot=\"$1\"\n  if [ -z \"$__webroot\" ]; then\n    _debug \"No webroot specified, skipping\"\n    return 0\n  fi\n\n  _rmpath=\"\"\n  if [ \"$2\" = '1' ]; then\n    _rmpath=\"$__webroot/.well-known\"\n  elif [ \"$2\" = '2' ]; then\n    _rmpath=\"$__webroot/.well-known/acme-challenge\"\n  elif [ \"$2\" = '3' ]; then\n    _rmpath=\"$__webroot/.well-known/acme-challenge/$3\"\n  else\n    _debug \"Skipping for removelevel: $2\"\n  fi\n\n  if [ \"$_rmpath\" ]; then\n    if [ \"$DEBUG\" ]; then\n      _debug \"Debugging, not removing: $_rmpath\"\n    else\n      rm -rf \"$_rmpath\"\n    fi\n  fi\n\n  return 0\n\n}\n\n_on_before_issue() {\n  _chk_web_roots=\"$1\"\n  _chk_main_domain=\"$2\"\n  _chk_alt_domains=\"$3\"\n  _chk_pre_hook=\"$4\"\n  _chk_local_addr=\"$5\"\n  _debug _on_before_issue\n  _debug _chk_main_domain \"$_chk_main_domain\"\n  _debug _chk_alt_domains \"$_chk_alt_domains\"\n  #run pre hook\n  if [ \"$_chk_pre_hook\" ]; then\n    _info \"Runing pre hook:'$_chk_pre_hook'\"\n    if ! (\n      export Le_Domain=\"$_chk_main_domain\"\n      export Le_Alt=\"$_chk_alt_domains\"\n      cd \"$DOMAIN_PATH\" && eval \"$_chk_pre_hook\"\n    ); then\n      _err \"Error occurred when running pre hook.\"\n      return 1\n    fi\n  fi\n\n  if _hasfield \"$_chk_web_roots\" \"$NO_VALUE\"; then\n    if ! _exists \"socat\"; then\n      _err \"Please install socat tools first.\"\n      return 1\n    fi\n  fi\n\n  _debug Le_LocalAddress \"$_chk_local_addr\"\n\n  _index=1\n  _currentRoot=\"\"\n  _addrIndex=1\n  _w_index=1\n  while true; do\n    d=\"$(echo \"$_chk_main_domain,$_chk_alt_domains,\" | cut -d , -f \"$_w_index\")\"\n    _w_index=\"$(_math \"$_w_index\" + 1)\"\n    _debug d \"$d\"\n    if [ -z \"$d\" ]; then\n      break\n    fi\n    _debug \"Checking for domain\" \"$d\"\n    _currentRoot=\"$(_getfield \"$_chk_web_roots\" $_index)\"\n    _debug \"_currentRoot\" \"$_currentRoot\"\n    _index=$(_math $_index + 1)\n    _checkport=\"\"\n    if [ \"$_currentRoot\" = \"$NO_VALUE\" ]; then\n      _info \"Standalone mode.\"\n      if [ -z \"$Le_HTTPPort\" ]; then\n        Le_HTTPPort=80\n        _cleardomainconf \"Le_HTTPPort\"\n      else\n        _savedomainconf \"Le_HTTPPort\" \"$Le_HTTPPort\"\n      fi\n      _checkport=\"$Le_HTTPPort\"\n    elif [ \"$_currentRoot\" = \"$W_ALPN\" ]; then\n      _info \"Standalone alpn mode.\"\n      if [ -z \"$Le_TLSPort\" ]; then\n        Le_TLSPort=443\n      else\n        _savedomainconf \"Le_TLSPort\" \"$Le_TLSPort\"\n      fi\n      _checkport=\"$Le_TLSPort\"\n    fi\n\n    if [ \"$_checkport\" ]; then\n      _debug _checkport \"$_checkport\"\n      _checkaddr=\"$(_getfield \"$_chk_local_addr\" $_addrIndex)\"\n      _debug _checkaddr \"$_checkaddr\"\n\n      _addrIndex=\"$(_math $_addrIndex + 1)\"\n\n      _netprc=\"$(_ss \"$_checkport\" | grep \"$_checkport\")\"\n      netprc=\"$(echo \"$_netprc\" | grep \"$_checkaddr\")\"\n      if [ -z \"$netprc\" ]; then\n        netprc=\"$(echo \"$_netprc\" | grep \"$LOCAL_ANY_ADDRESS:$_checkport\")\"\n      fi\n      if [ \"$netprc\" ]; then\n        _err \"$netprc\"\n        _err \"tcp port $_checkport is already used by $(echo \"$netprc\" | cut -d : -f 4)\"\n        _err \"Please stop it first\"\n        return 1\n      fi\n    fi\n  done\n\n  if _hasfield \"$_chk_web_roots\" \"apache\"; then\n    if ! _setApache; then\n      _err \"Error setting up Apache. Please open an issue on $PROJECT.\"\n      return 1\n    fi\n  else\n    usingApache=\"\"\n  fi\n\n}\n\n_on_issue_err() {\n  _chk_post_hook=\"$1\"\n  _chk_vlist=\"$2\"\n  _debug _on_issue_err\n\n  if [ \"$LOG_FILE\" ]; then\n    _err \"Please check log file for more details: $LOG_FILE\"\n  else\n    _err \"Please add '--debug' or '--log' to see more information.\"\n    _err \"See: $_DEBUG_WIKI\"\n  fi\n\n  #run the post hook\n  if [ \"$_chk_post_hook\" ]; then\n    _info \"Running post hook: '$_chk_post_hook'\"\n    if ! (\n      cd \"$DOMAIN_PATH\" && eval \"$_chk_post_hook\"\n    ); then\n      _err \"Error encountered while running post hook.\"\n      return 1\n    fi\n  fi\n\n  #trigger the validation to flush the pending authz\n  _debug2 \"_chk_vlist\" \"$_chk_vlist\"\n  if [ \"$_chk_vlist\" ]; then\n    (\n      _debug2 \"start to deactivate authz\"\n      ventries=$(echo \"$_chk_vlist\" | tr \"$dvsep\" ' ')\n      for ventry in $ventries; do\n        d=$(echo \"$ventry\" | cut -d \"$sep\" -f 1)\n        keyauthorization=$(echo \"$ventry\" | cut -d \"$sep\" -f 2)\n        uri=$(echo \"$ventry\" | cut -d \"$sep\" -f 3)\n        vtype=$(echo \"$ventry\" | cut -d \"$sep\" -f 4)\n        _currentRoot=$(echo \"$ventry\" | cut -d \"$sep\" -f 5)\n        __trigger_validation \"$uri\" \"$keyauthorization\"\n      done\n    )\n  fi\n\n  if [ \"$_ACME_IS_RENEW\" = \"1\" ] && _hasfield \"$Le_Webroot\" \"$W_DNS\"; then\n    _err \"$_DNS_MANUAL_ERR\"\n  fi\n\n  if [ \"$DEBUG\" ] && [ \"$DEBUG\" -gt \"0\" ]; then\n    _debug \"$(_dlg_versions)\"\n  fi\n\n}\n\n_on_issue_success() {\n  _chk_post_hook=\"$1\"\n  _chk_renew_hook=\"$2\"\n  _debug _on_issue_success\n\n  #run the post hook\n  if [ \"$_chk_post_hook\" ]; then\n    _info \"Running post hook:'$_chk_post_hook'\"\n    if ! (\n      export CERT_PATH\n      export CERT_KEY_PATH\n      export CA_CERT_PATH\n      export CERT_FULLCHAIN_PATH\n      export Le_Domain=\"$_main_domain\"\n      cd \"$DOMAIN_PATH\" && eval \"$_chk_post_hook\"\n    ); then\n      _err \"Error encountered while running post hook.\"\n      return 1\n    fi\n  fi\n\n  #run renew hook\n  if [ \"$_ACME_IS_RENEW\" ] && [ \"$_chk_renew_hook\" ]; then\n    _info \"Running renew hook: '$_chk_renew_hook'\"\n    if ! (\n      export CERT_PATH\n      export CERT_KEY_PATH\n      export CA_CERT_PATH\n      export CERT_FULLCHAIN_PATH\n      export Le_Domain=\"$_main_domain\"\n      cd \"$DOMAIN_PATH\" && eval \"$_chk_renew_hook\"\n    ); then\n      _err \"Error encountered while running renew hook.\"\n      return 1\n    fi\n  fi\n\n  if _hasfield \"$Le_Webroot\" \"$W_DNS\" && [ -z \"$FORCE_DNS_MANUAL\" ]; then\n    _err \"$_DNS_MANUAL_WARN\"\n  fi\n\n}\n\n#account_key_length   eab-kid  eab-hmac-key\nregisteraccount() {\n  _account_key_length=\"$1\"\n  _eab_id=\"$2\"\n  _eab_hmac_key=\"$3\"\n  _initpath\n  _regAccount \"$_account_key_length\" \"$_eab_id\" \"$_eab_hmac_key\"\n}\n\n__calcAccountKeyHash() {\n  [ -f \"$ACCOUNT_KEY_PATH\" ] && _digest sha256 <\"$ACCOUNT_KEY_PATH\"\n}\n\n__calc_account_thumbprint() {\n  printf \"%s\" \"$jwk\" | tr -d ' ' | _digest \"sha256\" | _url_replace\n}\n\n_getAccountEmail() {\n  if [ \"$ACCOUNT_EMAIL\" ]; then\n    echo \"$ACCOUNT_EMAIL\"\n    return 0\n  fi\n  if [ -z \"$CA_EMAIL\" ]; then\n    CA_EMAIL=\"$(_readcaconf CA_EMAIL)\"\n  fi\n  if [ \"$CA_EMAIL\" ]; then\n    echo \"$CA_EMAIL\"\n    return 0\n  fi\n  _readaccountconf \"ACCOUNT_EMAIL\"\n}\n\n#keylength\n_regAccount() {\n  _initpath\n  _reg_length=\"$1\"\n  _eab_id=\"$2\"\n  _eab_hmac_key=\"$3\"\n  _debug3 _regAccount \"$_regAccount\"\n  _initAPI\n\n  mkdir -p \"$CA_DIR\"\n\n  if [ ! -f \"$ACCOUNT_KEY_PATH\" ]; then\n    if ! _create_account_key \"$_reg_length\"; then\n      _err \"Error creating account key.\"\n      return 1\n    fi\n  fi\n\n  if ! _calcjwk \"$ACCOUNT_KEY_PATH\"; then\n    return 1\n  fi\n  if [ \"$_eab_id\" ] && [ \"$_eab_hmac_key\" ]; then\n    _savecaconf CA_EAB_KEY_ID \"$_eab_id\"\n    _savecaconf CA_EAB_HMAC_KEY \"$_eab_hmac_key\"\n  fi\n  _eab_id=$(_readcaconf \"CA_EAB_KEY_ID\")\n  _eab_hmac_key=$(_readcaconf \"CA_EAB_HMAC_KEY\")\n  _secure_debug3 _eab_id \"$_eab_id\"\n  _secure_debug3 _eab_hmac_key \"$_eab_hmac_key\"\n  _email=\"$(_getAccountEmail)\"\n  if [ \"$_email\" ]; then\n    _savecaconf \"CA_EMAIL\" \"$_email\"\n  fi\n\n  if [ \"$ACME_DIRECTORY\" = \"$CA_ZEROSSL\" ]; then\n    if [ -z \"$_eab_id\" ] || [ -z \"$_eab_hmac_key\" ]; then\n      _info \"No EAB credentials found for ZeroSSL, let's obtain them\"\n      if [ -z \"$_email\" ]; then\n        _info \"$(__green \"$PROJECT_NAME is using ZeroSSL as default CA now.\")\"\n        _info \"$(__green \"Please update your account with an email address first.\")\"\n        _info \"$(__green \"$PROJECT_ENTRY --register-account -m my@example.com\")\"\n        _info \"See: $(__green \"$_ZEROSSL_WIKI\")\"\n        return 1\n      fi\n      _eabresp=$(_post \"email=$_email\" $_ZERO_EAB_ENDPOINT)\n      if [ \"$?\" != \"0\" ]; then\n        _debug2 \"$_eabresp\"\n        _err \"Cannot get EAB credentials from ZeroSSL.\"\n        return 1\n      fi\n      _secure_debug2 _eabresp \"$_eabresp\"\n      _eab_id=\"$(echo \"$_eabresp\" | tr ',}' '\\n\\n' | grep '\"eab_kid\"' | cut -d : -f 2 | tr -d '\"')\"\n      _secure_debug2 _eab_id \"$_eab_id\"\n      if [ -z \"$_eab_id\" ]; then\n        _err \"Cannot resolve _eab_id\"\n        return 1\n      fi\n      _eab_hmac_key=\"$(echo \"$_eabresp\" | tr ',}' '\\n\\n' | grep '\"eab_hmac_key\"' | cut -d : -f 2 | tr -d '\"')\"\n      _secure_debug2 _eab_hmac_key \"$_eab_hmac_key\"\n      if [ -z \"$_eab_hmac_key\" ]; then\n        _err \"Cannot resolve _eab_hmac_key\"\n        return 1\n      fi\n      _savecaconf CA_EAB_KEY_ID \"$_eab_id\"\n      _savecaconf CA_EAB_HMAC_KEY \"$_eab_hmac_key\"\n    fi\n  fi\n  if [ \"$_eab_id\" ] && [ \"$_eab_hmac_key\" ]; then\n    eab_protected=\"{\\\"alg\\\":\\\"HS256\\\",\\\"kid\\\":\\\"$_eab_id\\\",\\\"url\\\":\\\"${ACME_NEW_ACCOUNT}\\\"}\"\n    _debug3 eab_protected \"$eab_protected\"\n\n    eab_protected64=$(printf \"%s\" \"$eab_protected\" | _base64 | _url_replace)\n    _debug3 eab_protected64 \"$eab_protected64\"\n\n    eab_payload64=$(printf \"%s\" \"$jwk\" | _base64 | _url_replace)\n    _debug3 eab_payload64 \"$eab_payload64\"\n\n    eab_sign_t=\"$eab_protected64.$eab_payload64\"\n    _debug3 eab_sign_t \"$eab_sign_t\"\n\n    key_hex=\"$(_durl_replace_base64 \"$_eab_hmac_key\" | _dbase64 | _hex_dump | tr -d ' ')\"\n    _debug3 key_hex \"$key_hex\"\n\n    eab_signature=$(printf \"%s\" \"$eab_sign_t\" | _hmac sha256 $key_hex | _base64 | _url_replace)\n    _debug3 eab_signature \"$eab_signature\"\n\n    externalBinding=\",\\\"externalAccountBinding\\\":{\\\"protected\\\":\\\"$eab_protected64\\\", \\\"payload\\\":\\\"$eab_payload64\\\", \\\"signature\\\":\\\"$eab_signature\\\"}\"\n    _debug3 externalBinding \"$externalBinding\"\n  fi\n  if [ \"$_email\" ]; then\n    email_sg=\"\\\"contact\\\": [\\\"mailto:$_email\\\"], \"\n  fi\n  regjson=\"{$email_sg\\\"termsOfServiceAgreed\\\": true$externalBinding}\"\n\n  _info \"Registering account: $ACME_DIRECTORY\"\n\n  if ! _send_signed_request \"${ACME_NEW_ACCOUNT}\" \"$regjson\"; then\n    _err \"Error registering account: $response\"\n    return 1\n  fi\n\n  _eabAlreadyBound=\"\"\n  if [ \"$code\" = \"\" ] || [ \"$code\" = '201' ]; then\n    echo \"$response\" >\"$ACCOUNT_JSON_PATH\"\n    _info \"Registered\"\n  elif [ \"$code\" = '409' ] || [ \"$code\" = '200' ]; then\n    _info \"Already registered\"\n  elif [ \"$code\" = '400' ] && _contains \"$response\" 'The account is not awaiting external account binding'; then\n    _info \"EAB already registered\"\n    _eabAlreadyBound=1\n  else\n    _err \"Account registration error: $response\"\n    return 1\n  fi\n\n  if [ -z \"$_eabAlreadyBound\" ]; then\n    _debug2 responseHeaders \"$responseHeaders\"\n    _accUri=\"$(echo \"$responseHeaders\" | grep -i \"^Location:\" | _head_n 1 | cut -d ':' -f 2- | tr -d \"\\r\\n \")\"\n    _debug \"_accUri\" \"$_accUri\"\n    if [ -z \"$_accUri\" ]; then\n      _err \"Cannot find account id url.\"\n      _err \"$responseHeaders\"\n      return 1\n    fi\n    _savecaconf \"ACCOUNT_URL\" \"$_accUri\"\n  else\n    ACCOUNT_URL=\"$(_readcaconf ACCOUNT_URL)\"\n  fi\n  export ACCOUNT_URL=\"$_accUri\"\n\n  CA_KEY_HASH=\"$(__calcAccountKeyHash)\"\n  _debug \"Calc CA_KEY_HASH\" \"$CA_KEY_HASH\"\n  _savecaconf CA_KEY_HASH \"$CA_KEY_HASH\"\n\n  if [ \"$code\" = '403' ]; then\n    _err \"It seems that the account key has been deactivated, please use a new account key.\"\n    return 1\n  fi\n\n  ACCOUNT_THUMBPRINT=\"$(__calc_account_thumbprint)\"\n  _info \"ACCOUNT_THUMBPRINT\" \"$ACCOUNT_THUMBPRINT\"\n}\n\n#implement updateaccount\nupdateaccount() {\n  _initpath\n\n  if [ ! -f \"$ACCOUNT_KEY_PATH\" ]; then\n    _err \"Account key not found at: $ACCOUNT_KEY_PATH\"\n    return 1\n  fi\n\n  _accUri=$(_readcaconf \"ACCOUNT_URL\")\n  _debug _accUri \"$_accUri\"\n\n  if [ -z \"$_accUri\" ]; then\n    _err \"The account URL is empty, please run '--update-account' first to update the account info, then try again.\"\n    return 1\n  fi\n\n  if ! _calcjwk \"$ACCOUNT_KEY_PATH\"; then\n    return 1\n  fi\n  _initAPI\n\n  _email=\"$(_getAccountEmail)\"\n\n  if [ \"$_email\" ]; then\n    updjson='{\"contact\": [\"mailto:'$_email'\"]}'\n  else\n    updjson='{\"contact\": []}'\n  fi\n\n  _send_signed_request \"$_accUri\" \"$updjson\"\n\n  if [ \"$code\" = '200' ]; then\n    echo \"$response\" >\"$ACCOUNT_JSON_PATH\"\n    _info \"Account update success for $_accUri.\"\n\n    ACCOUNT_THUMBPRINT=\"$(__calc_account_thumbprint)\"\n    _info \"ACCOUNT_THUMBPRINT\" \"$ACCOUNT_THUMBPRINT\"\n  else\n    _info \"An error occurred and the account was not updated.\"\n    return 1\n  fi\n}\n\n#Implement deactivate account\ndeactivateaccount() {\n  _initpath\n\n  if [ ! -f \"$ACCOUNT_KEY_PATH\" ]; then\n    _err \"Account key not found at: $ACCOUNT_KEY_PATH\"\n    return 1\n  fi\n\n  _accUri=$(_readcaconf \"ACCOUNT_URL\")\n  _debug _accUri \"$_accUri\"\n\n  if [ -z \"$_accUri\" ]; then\n    _err \"The account URL is empty, please run '--update-account' first to update the account info, then try again.\"\n    return 1\n  fi\n\n  if ! _calcjwk \"$ACCOUNT_KEY_PATH\"; then\n    return 1\n  fi\n  _initAPI\n\n  _djson=\"{\\\"status\\\":\\\"deactivated\\\"}\"\n\n  if _send_signed_request \"$_accUri\" \"$_djson\" && _contains \"$response\" '\"deactivated\"'; then\n    _info \"Successfully deactivated account $_accUri.\"\n    _accid=$(echo \"$response\" | _egrep_o \"\\\"id\\\" *: *[^,]*,\" | cut -d : -f 2 | tr -d ' ,')\n  elif [ \"$code\" = \"403\" ]; then\n    _info \"The account is already deactivated.\"\n    _accid=$(_getfield \"$_accUri\" \"999\" \"/\")\n  else\n    _err \"Account deactivation failed for $_accUri.\"\n    return 1\n  fi\n\n  _debug \"Account id: $_accid\"\n  if [ \"$_accid\" ]; then\n    _deactivated_account_path=\"$CA_DIR/deactivated/$_accid\"\n    _debug _deactivated_account_path \"$_deactivated_account_path\"\n    if mkdir -p \"$_deactivated_account_path\"; then\n      _info \"Moving deactivated account info to $_deactivated_account_path/\"\n      mv \"$CA_CONF\" \"$_deactivated_account_path/\"\n      mv \"$ACCOUNT_JSON_PATH\" \"$_deactivated_account_path/\"\n      mv \"$ACCOUNT_KEY_PATH\" \"$_deactivated_account_path/\"\n    else\n      _err \"Cannot create dir: $_deactivated_account_path, try to remove the deactivated account key.\"\n      rm -f \"$CA_CONF\"\n      rm -f \"$ACCOUNT_JSON_PATH\"\n      rm -f \"$ACCOUNT_KEY_PATH\"\n    fi\n  fi\n}\n\n# domain folder  file\n_findHook() {\n  _hookdomain=\"$1\"\n  _hookcat=\"$2\"\n  _hookname=\"$3\"\n\n  if [ -f \"$_SCRIPT_HOME/$_hookcat/$_hookname\" ]; then\n    d_api=\"$_SCRIPT_HOME/$_hookcat/$_hookname\"\n  elif [ -f \"$_SCRIPT_HOME/$_hookcat/$_hookname.sh\" ]; then\n    d_api=\"$_SCRIPT_HOME/$_hookcat/$_hookname.sh\"\n  elif [ \"$_hookdomain\" ] && [ -f \"$LE_WORKING_DIR/$_hookdomain/$_hookname\" ]; then\n    d_api=\"$LE_WORKING_DIR/$_hookdomain/$_hookname\"\n  elif [ \"$_hookdomain\" ] && [ -f \"$LE_WORKING_DIR/$_hookdomain/$_hookname.sh\" ]; then\n    d_api=\"$LE_WORKING_DIR/$_hookdomain/$_hookname.sh\"\n  elif [ -f \"$LE_WORKING_DIR/$_hookname\" ]; then\n    d_api=\"$LE_WORKING_DIR/$_hookname\"\n  elif [ -f \"$LE_WORKING_DIR/$_hookname.sh\" ]; then\n    d_api=\"$LE_WORKING_DIR/$_hookname.sh\"\n  elif [ -f \"$LE_WORKING_DIR/$_hookcat/$_hookname\" ]; then\n    d_api=\"$LE_WORKING_DIR/$_hookcat/$_hookname\"\n  elif [ -f \"$LE_WORKING_DIR/$_hookcat/$_hookname.sh\" ]; then\n    d_api=\"$LE_WORKING_DIR/$_hookcat/$_hookname.sh\"\n  fi\n\n  printf \"%s\" \"$d_api\"\n}\n\n#domain\n__get_domain_new_authz() {\n  _gdnd=\"$1\"\n  _info \"Getting new-authz for domain\" \"$_gdnd\"\n  _initAPI\n  _Max_new_authz_retry_times=5\n  _authz_i=0\n  while [ \"$_authz_i\" -lt \"$_Max_new_authz_retry_times\" ]; do\n    _debug \"Trying new-authz, attempt number $_authz_i.\"\n    if ! _send_signed_request \"${ACME_NEW_AUTHZ}\" \"{\\\"resource\\\": \\\"new-authz\\\", \\\"identifier\\\": {\\\"type\\\": \\\"dns\\\", \\\"value\\\": \\\"$(_idn \"$_gdnd\")\\\"}}\"; then\n      _err \"Cannot get new authz for domain.\"\n      return 1\n    fi\n    if _contains \"$response\" \"No registration exists matching provided key\"; then\n      _err \"There has been an error, but it might now be resolved, please try again.\"\n      _err \"If you see this message for a second time, please report this as a bug: $(__green \"$PROJECT\")\"\n      _clearcaconf \"CA_KEY_HASH\"\n      break\n    fi\n    if ! _contains \"$response\" \"An error occurred while processing your request\"; then\n      _info \"new-authz request successful.\"\n      break\n    fi\n    _authz_i=\"$(_math \"$_authz_i\" + 1)\"\n    _info \"The server is busy, sleeping for $_authz_i seconds and retrying.\"\n    _sleep \"$_authz_i\"\n  done\n\n  if [ \"$_authz_i\" = \"$_Max_new_authz_retry_times\" ]; then\n    _err \"new-authz has been retried $_Max_new_authz_retry_times times, stopping.\"\n  fi\n\n  if [ \"$code\" ] && [ \"$code\" != '201' ]; then\n    _err \"new-authz error: $response\"\n    return 1\n  fi\n\n}\n\n#uri keyAuthorization\n__trigger_validation() {\n  _debug2 \"Trigger domain validation.\"\n  _t_url=\"$1\"\n  _debug2 _t_url \"$_t_url\"\n  _t_key_authz=\"$2\"\n  _debug2 _t_key_authz \"$_t_key_authz\"\n  _t_vtype=\"$3\"\n  _debug2 _t_vtype \"$_t_vtype\"\n\n  _send_signed_request \"$_t_url\" \"{}\"\n\n}\n\n#endpoint  domain type\n_ns_lookup_impl() {\n  _ns_ep=\"$1\"\n  _ns_domain=\"$2\"\n  _ns_type=\"$3\"\n  _debug2 \"_ns_ep\" \"$_ns_ep\"\n  _debug2 \"_ns_domain\" \"$_ns_domain\"\n  _debug2 \"_ns_type\" \"$_ns_type\"\n\n  response=\"$(_H1=\"accept: application/dns-json\" _get \"$_ns_ep?name=$_ns_domain&type=$_ns_type\")\"\n  _ret=$?\n  _debug2 \"response\" \"$response\"\n  if [ \"$_ret\" != \"0\" ]; then\n    return $_ret\n  fi\n  _answers=\"$(echo \"$response\" | tr '{}' '<>' | _egrep_o '\"Answer\":\\[[^]]*]' | tr '<>' '\\n\\n')\"\n  _debug2 \"_answers\" \"$_answers\"\n  echo \"$_answers\"\n}\n\n#domain, type\n_ns_lookup_cf() {\n  _cf_ld=\"$1\"\n  _cf_ld_type=\"$2\"\n  _cf_ep=\"https://cloudflare-dns.com/dns-query\"\n  _ns_lookup_impl \"$_cf_ep\" \"$_cf_ld\" \"$_cf_ld_type\"\n}\n\n#domain, type\n_ns_purge_cf() {\n  _cf_d=\"$1\"\n  _cf_d_type=\"$2\"\n  _debug \"Purging Cloudflare $_cf_d_type record for domain $_cf_d\"\n  _cf_purl=\"https://cloudflare-dns.com/api/v1/purge?domain=$_cf_d&type=$_cf_d_type\"\n  response=\"$(_post \"\" \"$_cf_purl\")\"\n  _debug2 response \"$response\"\n}\n\n#checks if cf server is available\n_ns_is_available_cf() {\n  if _get \"https://cloudflare-dns.com\" \"\" 10 >/dev/null; then\n    return 0\n  else\n    return 1\n  fi\n}\n\n_ns_is_available_google() {\n  if _get \"https://dns.google\" \"\" 10 >/dev/null; then\n    return 0\n  else\n    return 1\n  fi\n}\n\n#domain, type\n_ns_lookup_google() {\n  _cf_ld=\"$1\"\n  _cf_ld_type=\"$2\"\n  _cf_ep=\"https://dns.google/resolve\"\n  _ns_lookup_impl \"$_cf_ep\" \"$_cf_ld\" \"$_cf_ld_type\"\n}\n\n_ns_is_available_ali() {\n  if _get \"https://dns.alidns.com\" \"\" 10 >/dev/null; then\n    return 0\n  else\n    return 1\n  fi\n}\n\n#domain, type\n_ns_lookup_ali() {\n  _cf_ld=\"$1\"\n  _cf_ld_type=\"$2\"\n  _cf_ep=\"https://dns.alidns.com/resolve\"\n  _ns_lookup_impl \"$_cf_ep\" \"$_cf_ld\" \"$_cf_ld_type\"\n}\n\n_ns_is_available_dp() {\n  if _get \"https://doh.pub\" \"\" 10 >/dev/null; then\n    return 0\n  else\n    return 1\n  fi\n}\n\n#dnspod\n_ns_lookup_dp() {\n  _cf_ld=\"$1\"\n  _cf_ld_type=\"$2\"\n  _cf_ep=\"https://doh.pub/dns-query\"\n  _ns_lookup_impl \"$_cf_ep\" \"$_cf_ld\" \"$_cf_ld_type\"\n}\n\n_ns_select_doh() {\n  if [ -z \"$DOH_USE\" ]; then\n    _debug \"Detecting DNS server first.\"\n    if _ns_is_available_cf; then\n      _debug \"Using Cloudflare doh server\"\n      export DOH_USE=$DOH_CLOUDFLARE\n    elif _ns_is_available_google; then\n      _debug \"Using Google DOH server\"\n      export DOH_USE=$DOH_GOOGLE\n    elif _ns_is_available_ali; then\n      _debug \"Using Aliyun DOH server\"\n      export DOH_USE=$DOH_ALI\n    elif _ns_is_available_dp; then\n      _debug \"Using DNS POD DOH server\"\n      export DOH_USE=$DOH_DP\n    else\n      _err \"No DOH\"\n    fi\n  fi\n}\n\n#domain, type\n_ns_lookup() {\n  _ns_select_doh\n  if [ \"$DOH_USE\" = \"$DOH_CLOUDFLARE\" ] || [ -z \"$DOH_USE\" ]; then\n    _ns_lookup_cf \"$@\"\n  elif [ \"$DOH_USE\" = \"$DOH_GOOGLE\" ]; then\n    _ns_lookup_google \"$@\"\n  elif [ \"$DOH_USE\" = \"$DOH_ALI\" ]; then\n    _ns_lookup_ali \"$@\"\n  elif [ \"$DOH_USE\" = \"$DOH_DP\" ]; then\n    _ns_lookup_dp \"$@\"\n  else\n    _err \"Unknown DOH provider: DOH_USE=$DOH_USE\"\n  fi\n\n}\n\n#txtdomain, alias, txt\n__check_txt() {\n  _c_txtdomain=\"$1\"\n  _c_aliasdomain=\"$2\"\n  _c_txt=\"$3\"\n  _debug \"_c_txtdomain\" \"$_c_txtdomain\"\n  _debug \"_c_aliasdomain\" \"$_c_aliasdomain\"\n  _debug \"_c_txt\" \"$_c_txt\"\n  _ns_select_doh\n  _answers=\"$(_ns_lookup \"$_c_aliasdomain\" TXT)\"\n  _contains \"$_answers\" \"$_c_txt\"\n\n}\n\n#txtdomain\n__purge_txt() {\n  _p_txtdomain=\"$1\"\n  _debug _p_txtdomain \"$_p_txtdomain\"\n  if [ \"$DOH_USE\" = \"$DOH_CLOUDFLARE\" ] || [ -z \"$DOH_USE\" ]; then\n    _ns_purge_cf \"$_p_txtdomain\" \"TXT\"\n  else\n    _debug \"No purge API for this DOH API, just sleeping for 5 seconds\"\n    _sleep 5\n  fi\n\n}\n\n#wait and check each dns entries\n_check_dns_entries() {\n  _success_txt=\",\"\n  _end_time=\"$(_time)\"\n  _end_time=\"$(_math \"$_end_time\" + 1200)\" #let's check no more than 20 minutes.\n\n  while [ \"$(_time)\" -le \"$_end_time\" ]; do\n    _info \"You can use '--dnssleep' to disable public dns checks.\"\n    _info \"See: $_DNSCHECK_WIKI\"\n    _left=\"\"\n    for entry in $dns_entries; do\n      d=$(_getfield \"$entry\" 1)\n      txtdomain=$(_getfield \"$entry\" 2)\n      txtdomain=$(_idn \"$txtdomain\")\n      aliasDomain=$(_getfield \"$entry\" 3)\n      aliasDomain=$(_idn \"$aliasDomain\")\n      txt=$(_getfield \"$entry\" 5)\n      d_api=$(_getfield \"$entry\" 6)\n      _debug \"d\" \"$d\"\n      _debug \"txtdomain\" \"$txtdomain\"\n      _debug \"aliasDomain\" \"$aliasDomain\"\n      _debug \"txt\" \"$txt\"\n      _debug \"d_api\" \"$d_api\"\n      _info \"Checking $d for $aliasDomain\"\n      if _contains \"$_success_txt\" \",$txt,\"; then\n        _info \"Already succeeded, continuing.\"\n        continue\n      fi\n\n      if __check_txt \"$txtdomain\" \"$aliasDomain\" \"$txt\"; then\n        _info \"Success for domain $d '$aliasDomain'.\"\n        _success_txt=\"$_success_txt,$txt,\"\n        continue\n      fi\n      _left=1\n      _info \"Not valid yet, let's wait for 10 seconds then check the next one.\"\n      __purge_txt \"$txtdomain\"\n      if [ \"$txtdomain\" != \"$aliasDomain\" ]; then\n        __purge_txt \"$aliasDomain\"\n      fi\n      _sleep 10\n    done\n    if [ \"$_left\" ]; then\n      _info \"Let's wait for 10 seconds and check again\".\n      _sleep 10\n    else\n      _info \"All checks succeeded\"\n      return 0\n    fi\n  done\n  _info \"Timed out waiting for DNS.\"\n  return 1\n\n}\n\n#file\n_get_chain_issuers() {\n  _cfile=\"$1\"\n  if _contains \"$(${ACME_OPENSSL_BIN:-openssl} help crl2pkcs7 2>&1)\" \"Usage: crl2pkcs7\" || _contains \"$(${ACME_OPENSSL_BIN:-openssl} crl2pkcs7 -help 2>&1)\" \"Usage: crl2pkcs7\" || _contains \"$(${ACME_OPENSSL_BIN:-openssl} crl2pkcs7 help 2>&1)\" \"unknown option help\"; then\n    ${ACME_OPENSSL_BIN:-openssl} crl2pkcs7 -nocrl -certfile $_cfile | ${ACME_OPENSSL_BIN:-openssl} pkcs7 -print_certs -text -noout | grep -i 'Issuer:' | _egrep_o \"CN *=[^,]*\" | cut -d = -f 2\n  else\n    _cindex=1\n    for _startn in $(grep -n -- \"$BEGIN_CERT\" \"$_cfile\" | cut -d : -f 1); do\n      _endn=\"$(grep -n -- \"$END_CERT\" \"$_cfile\" | cut -d : -f 1 | _head_n $_cindex | _tail_n 1)\"\n      _debug2 \"_startn\" \"$_startn\"\n      _debug2 \"_endn\" \"$_endn\"\n      if [ \"$DEBUG\" ]; then\n        _debug2 \"cert$_cindex\" \"$(sed -n \"$_startn,${_endn}p\" \"$_cfile\")\"\n      fi\n      sed -n \"$_startn,${_endn}p\" \"$_cfile\" | ${ACME_OPENSSL_BIN:-openssl} x509 -text -noout | grep 'Issuer:' | _egrep_o \"CN *=[^,]*\" | cut -d = -f 2 | sed \"s/ *\\(.*\\)/\\1/\"\n      _cindex=$(_math $_cindex + 1)\n    done\n  fi\n}\n\n#\n_get_chain_subjects() {\n  _cfile=\"$1\"\n  if _contains \"$(${ACME_OPENSSL_BIN:-openssl} help crl2pkcs7 2>&1)\" \"Usage: crl2pkcs7\" || _contains \"$(${ACME_OPENSSL_BIN:-openssl} crl2pkcs7 -help 2>&1)\" \"Usage: crl2pkcs7\" || _contains \"$(${ACME_OPENSSL_BIN:-openssl} crl2pkcs7 help 2>&1)\" \"unknown option help\"; then\n    ${ACME_OPENSSL_BIN:-openssl} crl2pkcs7 -nocrl -certfile $_cfile | ${ACME_OPENSSL_BIN:-openssl} pkcs7 -print_certs -text -noout | grep -i 'Subject:' | _egrep_o \"CN *=[^,]*\" | cut -d = -f 2\n  else\n    _cindex=1\n    for _startn in $(grep -n -- \"$BEGIN_CERT\" \"$_cfile\" | cut -d : -f 1); do\n      _endn=\"$(grep -n -- \"$END_CERT\" \"$_cfile\" | cut -d : -f 1 | _head_n $_cindex | _tail_n 1)\"\n      _debug2 \"_startn\" \"$_startn\"\n      _debug2 \"_endn\" \"$_endn\"\n      if [ \"$DEBUG\" ]; then\n        _debug2 \"cert$_cindex\" \"$(sed -n \"$_startn,${_endn}p\" \"$_cfile\")\"\n      fi\n      sed -n \"$_startn,${_endn}p\" \"$_cfile\" | ${ACME_OPENSSL_BIN:-openssl} x509 -text -noout | grep -i 'Subject:' | _egrep_o \"CN *=[^,]*\" | cut -d = -f 2 | sed \"s/ *\\(.*\\)/\\1/\"\n      _cindex=$(_math $_cindex + 1)\n    done\n  fi\n}\n\n#cert  issuer\n_match_issuer() {\n  _cfile=\"$1\"\n  _missuer=\"$2\"\n  _fissuers=\"$(_get_chain_issuers $_cfile)\"\n  _debug2 _fissuers \"$_fissuers\"\n  _rootissuer=\"$(echo \"$_fissuers\" | _lower_case | _tail_n 1)\"\n  _debug2 _rootissuer \"$_rootissuer\"\n  _missuer=\"$(echo \"$_missuer\" | _lower_case)\"\n  _contains \"$_rootissuer\" \"$_missuer\"\n}\n\n#ip\n_isIPv4() {\n  for seg in $(echo \"$1\" | tr '.' ' '); do\n    _debug2 seg \"$seg\"\n    if [ \"$(echo \"$seg\" | tr -d '[0-9]')\" ]; then\n      #not all number\n      return 1\n    fi\n    if [ $seg -ge 0 ] && [ $seg -lt 256 ]; then\n      continue\n    fi\n    return 1\n  done\n  return 0\n}\n\n#ip6\n_isIPv6() {\n  _contains \"$1\" \":\"\n}\n\n#ip\n_isIP() {\n  _isIPv4 \"$1\" || _isIPv6 \"$1\"\n}\n\n#identifier\n_getIdType() {\n  if _isIP \"$1\"; then\n    echo \"$ID_TYPE_IP\"\n  else\n    echo \"$ID_TYPE_DNS\"\n  fi\n}\n\n# beginTime dateTo\n# beginTime is full string format(\"2022-04-01T08:10:33Z\"), beginTime can be empty, to use current time\n# dateTo can be ether in full string format(\"2022-04-01T08:10:33Z\") or in delta format(+5d or +20h)\n_convertValidaty() {\n  _beginTime=\"$1\"\n  _dateTo=\"$2\"\n  _debug2 \"_beginTime\" \"$_beginTime\"\n  _debug2 \"_dateTo\" \"$_dateTo\"\n\n  if _startswith \"$_dateTo\" \"+\"; then\n    _v_begin=$(_time)\n    if [ \"$_beginTime\" ]; then\n      _v_begin=\"$(_date2time \"$_beginTime\")\"\n    fi\n    _debug2 \"_v_begin\" \"$_v_begin\"\n    if _endswith \"$_dateTo\" \"h\"; then\n      _v_end=$(_math \"$_v_begin + 60 * 60 * $(echo \"$_dateTo\" | tr -d '+h')\")\n    elif _endswith \"$_dateTo\" \"d\"; then\n      _v_end=$(_math \"$_v_begin + 60 * 60 * 24 * $(echo \"$_dateTo\" | tr -d '+d')\")\n    else\n      _err \"Unrecognized format for _dateTo: $_dateTo\"\n      return 1\n    fi\n    _debug2 \"_v_end\" \"$_v_end\"\n    _time2str \"$_v_end\"\n  else\n    if [ \"$(_time)\" -gt \"$(_date2time \"$_dateTo\")\" ]; then\n      _err \"The validity end date is in the past: _dateTo = $_dateTo\"\n      return 1\n    fi\n    echo \"$_dateTo\"\n  fi\n}\n\n#webroot, domain domainlist  keylength\nissue() {\n  if [ -z \"$2\" ]; then\n    _usage \"Usage: $PROJECT_ENTRY --issue --domain <domain.tld> --webroot <directory>\"\n    return 1\n  fi\n  if [ -z \"$1\" ]; then\n    _usage \"Please specify at least one validation method: '--webroot', '--standalone', '--apache', '--nginx' or '--dns' etc.\"\n    return 1\n  fi\n  _web_roots=\"$1\"\n  _main_domain=\"$2\"\n  _alt_domains=\"$3\"\n\n  if _contains \"$_main_domain\" \",\"; then\n    _main_domain=$(echo \"$2,$3\" | cut -d , -f 1)\n    _alt_domains=$(echo \"$2,$3\" | cut -d , -f 2- | sed \"s/,${NO_VALUE}$//\")\n  fi\n  _debug _main_domain \"$_main_domain\"\n  _debug _alt_domains \"$_alt_domains\"\n\n  _key_length=\"$4\"\n  _real_cert=\"$5\"\n  _real_key=\"$6\"\n  _real_ca=\"$7\"\n  _reload_cmd=\"$8\"\n  _real_fullchain=\"$9\"\n  _pre_hook=\"${10}\"\n  _post_hook=\"${11}\"\n  _renew_hook=\"${12}\"\n  _local_addr=\"${13}\"\n  _challenge_alias=\"${14}\"\n  _preferred_chain=\"${15}\"\n  _valid_from=\"${16}\"\n  _valid_to=\"${17}\"\n\n  if [ -z \"$_ACME_IS_RENEW\" ]; then\n    _initpath \"$_main_domain\" \"$_key_length\"\n    mkdir -p \"$DOMAIN_PATH\"\n  elif ! _hasfield \"$_web_roots\" \"$W_DNS\"; then\n    Le_OrderFinalize=\"\"\n    Le_LinkOrder=\"\"\n    Le_LinkCert=\"\"\n  fi\n\n  if _hasfield \"$_web_roots\" \"$W_DNS\" && [ -z \"$FORCE_DNS_MANUAL\" ]; then\n    _err \"$_DNS_MANUAL_ERROR\"\n    return 1\n  fi\n\n  if [ -f \"$DOMAIN_CONF\" ]; then\n    Le_NextRenewTime=$(_readdomainconf Le_NextRenewTime)\n    _debug Le_NextRenewTime \"$Le_NextRenewTime\"\n    if [ -z \"$FORCE\" ] && [ \"$Le_NextRenewTime\" ] && [ \"$(_time)\" -lt \"$Le_NextRenewTime\" ]; then\n      _valid_to_saved=$(_readdomainconf Le_Valid_to)\n      if [ \"$_valid_to_saved\" ] && ! _startswith \"$_valid_to_saved\" \"+\"; then\n        _info \"The domain is set to be valid to: $_valid_to_saved\"\n        _info \"It cannot be renewed automatically\"\n        _info \"See: $_VALIDITY_WIKI\"\n        return $RENEW_SKIP\n      fi\n      _saved_domain=$(_readdomainconf Le_Domain)\n      _debug _saved_domain \"$_saved_domain\"\n      _saved_alt=$(_readdomainconf Le_Alt)\n      _debug _saved_alt \"$_saved_alt\"\n      _normized_saved_domains=\"$(echo \"$_saved_domain,$_saved_alt\" | tr \",\" \"\\n\" | sort | tr '\\n' ',')\"\n      _debug _normized_saved_domains \"$_normized_saved_domains\"\n\n      _normized_domains=\"$(echo \"$_main_domain,$_alt_domains\" | tr \",\" \"\\n\" | sort | tr '\\n' ',')\"\n      _debug _normized_domains \"$_normized_domains\"\n\n      if [ \"$_normized_saved_domains\" = \"$_normized_domains\" ]; then\n        _info \"Domains not changed.\"\n        _info \"Skipping. Next renewal time is: $(__green \"$(_readdomainconf Le_NextRenewTimeStr)\")\"\n        _info \"Add '$(__red '--force')' to force renewal.\"\n        return $RENEW_SKIP\n      else\n        _info \"Domains have changed.\"\n      fi\n    fi\n  fi\n\n  _debug \"Using ACME_DIRECTORY: $ACME_DIRECTORY\"\n  if ! _initAPI; then\n    return 1\n  fi\n\n  _savedomainconf \"Le_Domain\" \"$_main_domain\"\n  _savedomainconf \"Le_Alt\" \"$_alt_domains\"\n  _savedomainconf \"Le_Webroot\" \"$_web_roots\"\n\n  _savedomainconf \"Le_PreHook\" \"$_pre_hook\" \"base64\"\n  _savedomainconf \"Le_PostHook\" \"$_post_hook\" \"base64\"\n  _savedomainconf \"Le_RenewHook\" \"$_renew_hook\" \"base64\"\n\n  if [ \"$_local_addr\" ]; then\n    _savedomainconf \"Le_LocalAddress\" \"$_local_addr\"\n  else\n    _cleardomainconf \"Le_LocalAddress\"\n  fi\n  if [ \"$_challenge_alias\" ]; then\n    _savedomainconf \"Le_ChallengeAlias\" \"$_challenge_alias\"\n  else\n    _cleardomainconf \"Le_ChallengeAlias\"\n  fi\n  if [ \"$_preferred_chain\" ]; then\n    _savedomainconf \"Le_Preferred_Chain\" \"$_preferred_chain\" \"base64\"\n  else\n    _cleardomainconf \"Le_Preferred_Chain\"\n  fi\n\n  Le_API=\"$ACME_DIRECTORY\"\n  _savedomainconf \"Le_API\" \"$Le_API\"\n\n  _info \"Using CA: $ACME_DIRECTORY\"\n  if [ \"$_alt_domains\" = \"$NO_VALUE\" ]; then\n    _alt_domains=\"\"\n  fi\n\n  if ! _on_before_issue \"$_web_roots\" \"$_main_domain\" \"$_alt_domains\" \"$_pre_hook\" \"$_local_addr\"; then\n    _err \"_on_before_issue.\"\n    return 1\n  fi\n\n  _saved_account_key_hash=\"$(_readcaconf \"CA_KEY_HASH\")\"\n  _debug2 _saved_account_key_hash \"$_saved_account_key_hash\"\n\n  if [ -z \"$ACCOUNT_URL\" ] || [ -z \"$_saved_account_key_hash\" ] || [ \"$_saved_account_key_hash\" != \"$(__calcAccountKeyHash)\" ]; then\n    if ! _regAccount \"$_accountkeylength\"; then\n      _on_issue_err \"$_post_hook\"\n      return 1\n    fi\n  else\n    _debug \"_saved_account_key_hash was not changed, skipping account registration.\"\n  fi\n\n  export Le_Next_Domain_Key=\"$CERT_KEY_PATH.next\"\n  if [ -f \"$CSR_PATH\" ] && [ ! -f \"$CERT_KEY_PATH\" ]; then\n    _info \"Signing from existing CSR.\"\n  else\n    # When renewing from an old version, the empty Le_Keylength means 2048.\n    # Note, do not use DEFAULT_DOMAIN_KEY_LENGTH as that value may change over\n    # time but an empty value implies 2048 specifically.\n    _key=$(_readdomainconf Le_Keylength)\n    if [ -z \"$_key\" ]; then\n      _key=2048\n    fi\n    _debug \"Read key length: $_key\"\n    if [ ! -f \"$CERT_KEY_PATH\" ] || [ \"$_key_length\" != \"$_key\" ] || [ \"$Le_ForceNewDomainKey\" = \"1\" ]; then\n      if [ \"$Le_ForceNewDomainKey\" = \"1\" ] && [ -f \"$Le_Next_Domain_Key\" ]; then\n        _info \"Using pre-generated key: $Le_Next_Domain_Key\"\n        cat \"$Le_Next_Domain_Key\" >\"$CERT_KEY_PATH\"\n        echo \"\" >\"$Le_Next_Domain_Key\"\n      else\n        if ! createDomainKey \"$_main_domain\" \"$_key_length\"; then\n          _err \"Error creating domain key.\"\n          _clearup\n          _on_issue_err \"$_post_hook\"\n          return 1\n        fi\n      fi\n    fi\n    if [ \"$Le_ForceNewDomainKey\" ]; then\n      _info \"Generating next pre-generate key.\"\n      if [ ! -e \"$Le_Next_Domain_Key\" ]; then\n        touch \"$Le_Next_Domain_Key\"\n        chmod 600 \"$Le_Next_Domain_Key\"\n      fi\n      if ! _createkey \"$_key_length\" \"$Le_Next_Domain_Key\"; then\n        _err \"Cannot pre-generate domain key\"\n        return 1\n      fi\n    fi\n    if ! _createcsr \"$_main_domain\" \"$_alt_domains\" \"$CERT_KEY_PATH\" \"$CSR_PATH\" \"$DOMAIN_SSL_CONF\"; then\n      _err \"Error creating CSR.\"\n      _clearup\n      _on_issue_err \"$_post_hook\"\n      return 1\n    fi\n  fi\n\n  _savedomainconf \"Le_Keylength\" \"$_key_length\"\n\n  vlist=\"$Le_Vlist\"\n  _cleardomainconf \"Le_Vlist\"\n  _debug \"Getting domain auth token for each domain\"\n  sep='#'\n  dvsep=','\n  if [ -z \"$vlist\" ]; then\n    #make new order request\n    _identifiers=\"{\\\"type\\\":\\\"$(_getIdType \"$_main_domain\")\\\",\\\"value\\\":\\\"$(_idn \"$_main_domain\")\\\"}\"\n    _w_index=1\n    while true; do\n      d=\"$(echo \"$_alt_domains,\" | cut -d , -f \"$_w_index\")\"\n      _w_index=\"$(_math \"$_w_index\" + 1)\"\n      _debug d \"$d\"\n      if [ -z \"$d\" ]; then\n        break\n      fi\n      _identifiers=\"$_identifiers,{\\\"type\\\":\\\"$(_getIdType \"$d\")\\\",\\\"value\\\":\\\"$(_idn \"$d\")\\\"}\"\n    done\n    _debug2 _identifiers \"$_identifiers\"\n    _notBefore=\"\"\n    _notAfter=\"\"\n\n    if [ \"$_valid_from\" ]; then\n      _savedomainconf \"Le_Valid_From\" \"$_valid_from\"\n      _debug2 \"_valid_from\" \"$_valid_from\"\n      _notBefore=\"$(_convertValidaty \"\" \"$_valid_from\")\"\n      if [ \"$?\" != \"0\" ]; then\n        _err \"Cannot parse _valid_from: $_valid_from\"\n        return 1\n      fi\n      if [ \"$(_time)\" -gt \"$(_date2time \"$_notBefore\")\" ]; then\n        _notBefore=\"\"\n      fi\n    else\n      _cleardomainconf \"Le_Valid_From\"\n    fi\n    _debug2 _notBefore \"$_notBefore\"\n\n    if [ \"$_valid_to\" ]; then\n      _debug2 \"_valid_to\" \"$_valid_to\"\n      _savedomainconf \"Le_Valid_To\" \"$_valid_to\"\n      _notAfter=\"$(_convertValidaty \"$_notBefore\" \"$_valid_to\")\"\n      if [ \"$?\" != \"0\" ]; then\n        _err \"Cannot parse _valid_to: $_valid_to\"\n        return 1\n      fi\n    else\n      _cleardomainconf \"Le_Valid_To\"\n    fi\n    _debug2 \"_notAfter\" \"$_notAfter\"\n\n    _newOrderObj=\"{\\\"identifiers\\\": [$_identifiers]\"\n    if [ \"$_notBefore\" ]; then\n      _newOrderObj=\"$_newOrderObj,\\\"notBefore\\\": \\\"$_notBefore\\\"\"\n    fi\n    if [ \"$_notAfter\" ]; then\n      _newOrderObj=\"$_newOrderObj,\\\"notAfter\\\": \\\"$_notAfter\\\"\"\n    fi\n    _debug \"STEP 1, Ordering a Certificate\"\n    if ! _send_signed_request \"$ACME_NEW_ORDER\" \"$_newOrderObj}\"; then\n      _err \"Error creating new order.\"\n      _clearup\n      _on_issue_err \"$_post_hook\"\n      return 1\n    fi\n    if _contains \"$response\" \"invalid\"; then\n      if echo \"$response\" | _normalizeJson | grep '\"status\":\"invalid\"' >/dev/null 2>&1; then\n        _err \"Create new order with invalid status.\"\n        _err \"$response\"\n        _clearup\n        _on_issue_err \"$_post_hook\"\n        return 1\n      fi\n    fi\n\n    Le_LinkOrder=\"$(echo \"$responseHeaders\" | grep -i '^Location.*$' | _tail_n 1 | tr -d \"\\r\\n \" | cut -d \":\" -f 2-)\"\n    _debug Le_LinkOrder \"$Le_LinkOrder\"\n    Le_OrderFinalize=\"$(echo \"$response\" | _egrep_o '\"finalize\" *: *\"[^\"]*\"' | cut -d '\"' -f 4)\"\n    _debug Le_OrderFinalize \"$Le_OrderFinalize\"\n    if [ -z \"$Le_OrderFinalize\" ]; then\n      _err \"Error creating new order. Le_OrderFinalize not found. $response\"\n      _clearup\n      _on_issue_err \"$_post_hook\"\n      return 1\n    fi\n\n    #for dns manual mode\n    _savedomainconf \"Le_OrderFinalize\" \"$Le_OrderFinalize\"\n\n    _authorizations_seg=\"$(echo \"$response\" | _json_decode | _egrep_o '\"authorizations\" *: *\\[[^\\[]*\\]' | cut -d '[' -f 2 | tr -d ']' | tr -d '\"')\"\n    _debug2 _authorizations_seg \"$_authorizations_seg\"\n    if [ -z \"$_authorizations_seg\" ]; then\n      _err \"_authorizations_seg not found.\"\n      _clearup\n      _on_issue_err \"$_post_hook\"\n      return 1\n    fi\n\n    _debug \"STEP 2, Get the authorizations of each domain\"\n    #domain and authz map\n    _authorizations_map=\"\"\n    for _authz_url in $(echo \"$_authorizations_seg\" | tr ',' ' '); do\n      _debug2 \"_authz_url\" \"$_authz_url\"\n      if ! _send_signed_request \"$_authz_url\"; then\n        _err \"Error getting authz.\"\n        _err \"_authorizations_seg\" \"$_authorizations_seg\"\n        _err \"_authz_url\" \"$_authz_url\"\n        _err \"$response\"\n        _clearup\n        _on_issue_err \"$_post_hook\"\n        return 1\n      fi\n\n      response=\"$(echo \"$response\" | _normalizeJson)\"\n      _debug2 response \"$response\"\n      if echo \"$response\" | grep '\"status\":\"invalid\"' >/dev/null 2>&1; then\n        _err \"get authz objec with invalid status, please try again later.\"\n        _err \"_authorizations_seg\" \"$_authorizations_seg\"\n        _err \"$response\"\n        _clearup\n        _on_issue_err \"$_post_hook\"\n        return 1\n      fi\n      _d=\"$(echo \"$response\" | _egrep_o '\"value\" *: *\"[^\"]*\"' | cut -d : -f 2- | tr -d ' \"')\"\n      if _contains \"$response\" \"\\\"wildcard\\\" *: *true\"; then\n        _d=\"*.$_d\"\n      fi\n      _debug2 _d \"$_d\"\n      _authorizations_map=\"$_d,$response#$_authz_url\n$_authorizations_map\"\n    done\n\n    _debug2 _authorizations_map \"$_authorizations_map\"\n\n    _index=0\n    _currentRoot=\"\"\n    _w_index=1\n    while true; do\n      d=\"$(echo \"$_main_domain,$_alt_domains,\" | cut -d , -f \"$_w_index\")\"\n      _w_index=\"$(_math \"$_w_index\" + 1)\"\n      _debug d \"$d\"\n      if [ -z \"$d\" ]; then\n        break\n      fi\n      _info \"Getting webroot for domain\" \"$d\"\n      _index=$(_math $_index + 1)\n      _w=\"$(echo $_web_roots | cut -d , -f $_index)\"\n      _debug _w \"$_w\"\n      if [ \"$_w\" ]; then\n        _currentRoot=\"$_w\"\n      fi\n      _debug \"_currentRoot\" \"$_currentRoot\"\n\n      vtype=\"$VTYPE_HTTP\"\n      #todo, v2 wildcard force to use dns\n      if _startswith \"$_currentRoot\" \"$W_DNS\"; then\n        vtype=\"$VTYPE_DNS\"\n      fi\n\n      if [ \"$_currentRoot\" = \"$W_ALPN\" ]; then\n        vtype=\"$VTYPE_ALPN\"\n      fi\n\n      _idn_d=\"$(_idn \"$d\")\"\n      _candidates=\"$(echo \"$_authorizations_map\" | grep -i \"^$_idn_d,\")\"\n      _debug2 _candidates \"$_candidates\"\n      if [ \"$(echo \"$_candidates\" | wc -l)\" -gt 1 ]; then\n        for _can in $_candidates; do\n          if _startswith \"$(echo \"$_can\" | tr '.' '|')\" \"$(echo \"$_idn_d\" | tr '.' '|'),\"; then\n            _candidates=\"$_can\"\n            break\n          fi\n        done\n      fi\n      response=\"$(echo \"$_candidates\" | sed \"s/$_idn_d,//\")\"\n      _debug2 \"response\" \"$response\"\n      if [ -z \"$response\" ]; then\n        _err \"Error getting authz.\"\n        _err \"_authorizations_map\" \"$_authorizations_map\"\n        _clearup\n        _on_issue_err \"$_post_hook\"\n        return 1\n      fi\n      _authz_url=\"$(echo \"$_candidates\" | sed \"s/$_idn_d,//\" | _egrep_o \"#.*\" | sed \"s/^#//\")\"\n      _debug _authz_url \"$_authz_url\"\n      if [ -z \"$thumbprint\" ]; then\n        thumbprint=\"$(__calc_account_thumbprint)\"\n      fi\n\n      keyauthorization=\"\"\n\n      if echo \"$response\" | grep '\"status\":\"valid\"' >/dev/null 2>&1; then\n        _debug \"$d is already valid.\"\n        keyauthorization=\"$STATE_VERIFIED\"\n        _debug keyauthorization \"$keyauthorization\"\n      fi\n\n      entry=\"$(echo \"$response\" | _egrep_o '[^\\{]*\"type\":\"'$vtype'\"[^\\}]*')\"\n      _debug entry \"$entry\"\n\n      if [ -z \"$keyauthorization\" -a -z \"$entry\" ]; then\n        _err \"Cannot get domain token entry $d for $vtype\"\n        _supported_vtypes=\"$(echo \"$response\" | _egrep_o \"\\\"challenges\\\":\\[[^]]*]\" | tr '{' \"\\n\" | grep type | cut -d '\"' -f 4 | tr \"\\n\" ' ')\"\n        if [ \"$_supported_vtypes\" ]; then\n          _err \"Supported validation types are: $_supported_vtypes, but you specified: $vtype\"\n        fi\n        _clearup\n        _on_issue_err \"$_post_hook\"\n        return 1\n      fi\n\n      if [ -z \"$keyauthorization\" ]; then\n        token=\"$(echo \"$entry\" | _egrep_o '\"token\":\"[^\"]*' | cut -d : -f 2 | tr -d '\"')\"\n        _debug token \"$token\"\n\n        if [ -z \"$token\" ]; then\n          _err \"Cannot get domain token $entry\"\n          _clearup\n          _on_issue_err \"$_post_hook\"\n          return 1\n        fi\n\n        uri=\"$(echo \"$entry\" | _egrep_o '\"url\":\"[^\"]*' | cut -d '\"' -f 4 | _head_n 1)\"\n\n        _debug uri \"$uri\"\n\n        if [ -z \"$uri\" ]; then\n          _err \"Cannot get domain URI $entry\"\n          _clearup\n          _on_issue_err \"$_post_hook\"\n          return 1\n        fi\n        keyauthorization=\"$token.$thumbprint\"\n        _debug keyauthorization \"$keyauthorization\"\n      fi\n\n      dvlist=\"$d$sep$keyauthorization$sep$uri$sep$vtype$sep$_currentRoot$sep$_authz_url\"\n      _debug dvlist \"$dvlist\"\n\n      vlist=\"$vlist$dvlist$dvsep\"\n\n    done\n    _debug vlist \"$vlist\"\n    #add entry\n    dns_entries=\"\"\n    dnsadded=\"\"\n    ventries=$(echo \"$vlist\" | tr \"$dvsep\" ' ')\n    _alias_index=1\n    for ventry in $ventries; do\n      d=$(echo \"$ventry\" | cut -d \"$sep\" -f 1)\n      keyauthorization=$(echo \"$ventry\" | cut -d \"$sep\" -f 2)\n      vtype=$(echo \"$ventry\" | cut -d \"$sep\" -f 4)\n      _currentRoot=$(echo \"$ventry\" | cut -d \"$sep\" -f 5)\n      _authz_url=$(echo \"$ventry\" | cut -d \"$sep\" -f 6)\n      _debug d \"$d\"\n      if [ \"$keyauthorization\" = \"$STATE_VERIFIED\" ]; then\n        _debug \"$d has already been verified, skipping $vtype.\"\n        _alias_index=\"$(_math \"$_alias_index\" + 1)\"\n        continue\n      fi\n\n      if [ \"$vtype\" = \"$VTYPE_DNS\" ]; then\n        dnsadded='0'\n        _dns_root_d=\"$d\"\n        if _startswith \"$_dns_root_d\" \"*.\"; then\n          _dns_root_d=\"$(echo \"$_dns_root_d\" | sed 's/*.//')\"\n        fi\n        _d_alias=\"$(_getfield \"$_challenge_alias\" \"$_alias_index\")\"\n        test \"$_d_alias\" = \"$NO_VALUE\" && _d_alias=\"\"\n        _alias_index=\"$(_math \"$_alias_index\" + 1)\"\n        _debug \"_d_alias\" \"$_d_alias\"\n        if [ \"$_d_alias\" ]; then\n          if _startswith \"$_d_alias\" \"$DNS_ALIAS_PREFIX\"; then\n            txtdomain=\"$(echo \"$_d_alias\" | sed \"s/$DNS_ALIAS_PREFIX//\")\"\n          else\n            txtdomain=\"_acme-challenge.$_d_alias\"\n          fi\n          dns_entry=\"${_dns_root_d}${dvsep}_acme-challenge.$_dns_root_d$dvsep$txtdomain$dvsep$_currentRoot\"\n        else\n          txtdomain=\"_acme-challenge.$_dns_root_d\"\n          dns_entry=\"${_dns_root_d}${dvsep}_acme-challenge.$_dns_root_d$dvsep$dvsep$_currentRoot\"\n        fi\n\n        _debug txtdomain \"$txtdomain\"\n        txt=\"$(printf \"%s\" \"$keyauthorization\" | _digest \"sha256\" | _url_replace)\"\n        _debug txt \"$txt\"\n\n        d_api=\"$(_findHook \"$_dns_root_d\" $_SUB_FOLDER_DNSAPI \"$_currentRoot\")\"\n        _debug d_api \"$d_api\"\n\n        dns_entry=\"$dns_entry$dvsep$txt${dvsep}$d_api\"\n        _debug2 dns_entry \"$dns_entry\"\n        if [ \"$d_api\" ]; then\n          _debug \"Found domain API file: $d_api\"\n        else\n          if [ \"$_currentRoot\" != \"$W_DNS\" ]; then\n            _err \"Cannot find DNS API hook for: $_currentRoot\"\n            _info \"You need to add the TXT record manually.\"\n          fi\n          _info \"$(__red \"Add the following TXT record:\")\"\n          _info \"$(__red \"Domain: '$(__green \"$txtdomain\")'\")\"\n          _info \"$(__red \"TXT value: '$(__green \"$txt\")'\")\"\n          _info \"$(__red \"Please make sure to prepend '_acme-challenge.' to your domain\")\"\n          _info \"$(__red \"so that the resulting subdomain is: $txtdomain\")\"\n          continue\n        fi\n\n        (\n          if ! . \"$d_api\"; then\n            _err \"Error loading file $d_api. Please check your API file and try again.\"\n            return 1\n          fi\n\n          addcommand=\"${_currentRoot}_add\"\n          if ! _exists \"$addcommand\"; then\n            _err \"It seems that your API file is incorrect. Make sure it has a function named: $addcommand\"\n            return 1\n          fi\n          _info \"Adding TXT value: $txt for domain: $txtdomain\"\n          if ! $addcommand \"$txtdomain\" \"$txt\"; then\n            _err \"Error adding TXT record to domain: $txtdomain\"\n            return 1\n          fi\n          _info \"The TXT record has been successfully added.\"\n        )\n\n        if [ \"$?\" != \"0\" ]; then\n          _on_issue_err \"$_post_hook\" \"$vlist\"\n          _clearup\n          return 1\n        fi\n        dns_entries=\"$dns_entries$dns_entry\n\"\n        _debug2 \"$dns_entries\"\n        dnsadded='1'\n      fi\n    done\n\n    if [ \"$dnsadded\" = '0' ]; then\n      _savedomainconf \"Le_Vlist\" \"$vlist\"\n      _debug \"DNS record not yet added. Will save to $DOMAIN_CONF and exit.\"\n      _err \"Please add the TXT records to the domains, and re-run with --renew.\"\n      _on_issue_err \"$_post_hook\"\n      _clearup\n      # If asked to be in manual DNS mode, flag this exit with a separate\n      # error so it can be distinguished from other failures.\n      return $CODE_DNS_MANUAL\n    fi\n\n  fi\n\n  if [ \"$dns_entries\" ]; then\n    if [ -z \"$Le_DNSSleep\" ]; then\n      _info \"Let's check each DNS record now. Sleeping for 20 seconds first.\"\n      _sleep 20\n      if ! _check_dns_entries; then\n        _err \"Error checking DNS.\"\n        _on_issue_err \"$_post_hook\"\n        _clearup\n        return 1\n      fi\n    else\n      _savedomainconf \"Le_DNSSleep\" \"$Le_DNSSleep\"\n      _info \"Sleeping for $(__green $Le_DNSSleep) seconds to wait for the the TXT records to take effect\"\n      _sleep \"$Le_DNSSleep\"\n    fi\n  fi\n\n  NGINX_RESTORE_VLIST=\"\"\n  _debug \"OK, let's start verification\"\n\n  _ncIndex=1\n  ventries=$(echo \"$vlist\" | tr \"$dvsep\" ' ')\n  for ventry in $ventries; do\n    d=$(echo \"$ventry\" | cut -d \"$sep\" -f 1)\n    keyauthorization=$(echo \"$ventry\" | cut -d \"$sep\" -f 2)\n    uri=$(echo \"$ventry\" | cut -d \"$sep\" -f 3)\n    vtype=$(echo \"$ventry\" | cut -d \"$sep\" -f 4)\n    _currentRoot=$(echo \"$ventry\" | cut -d \"$sep\" -f 5)\n    _authz_url=$(echo \"$ventry\" | cut -d \"$sep\" -f 6)\n    if [ \"$keyauthorization\" = \"$STATE_VERIFIED\" ]; then\n      _info \"$d is already verified, skipping $vtype.\"\n      continue\n    fi\n\n    _info \"Verifying: $d\"\n    _debug \"d\" \"$d\"\n    _debug \"keyauthorization\" \"$keyauthorization\"\n    _debug \"uri\" \"$uri\"\n    _debug \"_authz_url\" \"$_authz_url\"\n    removelevel=\"\"\n    token=\"$(printf \"%s\" \"$keyauthorization\" | cut -d '.' -f 1)\"\n\n    _debug \"_currentRoot\" \"$_currentRoot\"\n\n    if [ \"$vtype\" = \"$VTYPE_HTTP\" ]; then\n      if [ \"$_currentRoot\" = \"$NO_VALUE\" ]; then\n        _info \"Standalone mode server\"\n        _ncaddr=\"$(_getfield \"$_local_addr\" \"$_ncIndex\")\"\n        _ncIndex=\"$(_math $_ncIndex + 1)\"\n        _startserver \"$keyauthorization\" \"$_ncaddr\"\n        if [ \"$?\" != \"0\" ]; then\n          _clearup\n          _on_issue_err \"$_post_hook\" \"$vlist\"\n          return 1\n        fi\n        sleep 1\n        _debug serverproc \"$serverproc\"\n      elif [ \"$_currentRoot\" = \"$MODE_STATELESS\" ]; then\n        _info \"Stateless mode for domain: $d\"\n        _sleep 1\n      elif _startswith \"$_currentRoot\" \"$NGINX\"; then\n        _info \"Nginx mode for domain: $d\"\n        #set up nginx server\n        FOUND_REAL_NGINX_CONF=\"\"\n        BACKUP_NGINX_CONF=\"\"\n        if ! _setNginx \"$d\" \"$_currentRoot\" \"$thumbprint\"; then\n          _clearup\n          _on_issue_err \"$_post_hook\" \"$vlist\"\n          return 1\n        fi\n\n        if [ \"$FOUND_REAL_NGINX_CONF\" ]; then\n          _realConf=\"$FOUND_REAL_NGINX_CONF\"\n          _backup=\"$BACKUP_NGINX_CONF\"\n          _debug _realConf \"$_realConf\"\n          NGINX_RESTORE_VLIST=\"$d$sep$_realConf$sep$_backup$dvsep$NGINX_RESTORE_VLIST\"\n        fi\n        _sleep 1\n      else\n        if [ \"$_currentRoot\" = \"apache\" ]; then\n          wellknown_path=\"$ACME_DIR\"\n        else\n          wellknown_path=\"$_currentRoot/.well-known/acme-challenge\"\n          if [ ! -d \"$_currentRoot/.well-known\" ]; then\n            removelevel='1'\n          elif [ ! -d \"$_currentRoot/.well-known/acme-challenge\" ]; then\n            removelevel='2'\n          else\n            removelevel='3'\n          fi\n        fi\n\n        _debug wellknown_path \"$wellknown_path\"\n\n        _debug \"Writing token: $token to $wellknown_path/$token\"\n\n        mkdir -p \"$wellknown_path\"\n\n        if ! printf \"%s\" \"$keyauthorization\" >\"$wellknown_path/$token\"; then\n          _err \"$d: Cannot write token to file: $wellknown_path/$token\"\n          _clearupwebbroot \"$_currentRoot\" \"$removelevel\" \"$token\"\n          _clearup\n          _on_issue_err \"$_post_hook\" \"$vlist\"\n          return 1\n        fi\n        if ! chmod a+r \"$wellknown_path/$token\"; then\n          _debug \"chmod failed, will just continue.\"\n        fi\n      fi\n    elif [ \"$vtype\" = \"$VTYPE_ALPN\" ]; then\n      acmevalidationv1=\"$(printf \"%s\" \"$keyauthorization\" | _digest \"sha256\" \"hex\")\"\n      _debug acmevalidationv1 \"$acmevalidationv1\"\n      if ! _starttlsserver \"$d\" \"\" \"$Le_TLSPort\" \"$keyauthorization\" \"$_ncaddr\" \"$acmevalidationv1\"; then\n        _err \"Error starting TLS server.\"\n        _clearupwebbroot \"$_currentRoot\" \"$removelevel\" \"$token\"\n        _clearup\n        _on_issue_err \"$_post_hook\" \"$vlist\"\n        return 1\n      fi\n    fi\n\n    if ! __trigger_validation \"$uri\" \"$keyauthorization\" \"$vtype\"; then\n      _err \"$d: Cannot get challenge: $response\"\n      _clearupwebbroot \"$_currentRoot\" \"$removelevel\" \"$token\"\n      _clearup\n      _on_issue_err \"$_post_hook\" \"$vlist\"\n      return 1\n    fi\n\n    if [ \"$code\" ] && [ \"$code\" != '202' ]; then\n      if [ \"$code\" = '200' ]; then\n        _debug \"Trigger validation code: $code\"\n      else\n        _err \"$d: Challenge error: $response\"\n        _clearupwebbroot \"$_currentRoot\" \"$removelevel\" \"$token\"\n        _clearup\n        _on_issue_err \"$_post_hook\" \"$vlist\"\n        return 1\n      fi\n    fi\n\n    waittimes=0\n    if [ -z \"$MAX_RETRY_TIMES\" ]; then\n      MAX_RETRY_TIMES=30\n    fi\n\n    _debug \"Let's check the authz status\"\n    while true; do\n      waittimes=$(_math \"$waittimes\" + 1)\n      if [ \"$waittimes\" -ge \"$MAX_RETRY_TIMES\" ]; then\n        _err \"$d: Timeout\"\n        _clearupwebbroot \"$_currentRoot\" \"$removelevel\" \"$token\"\n        _clearup\n        _on_issue_err \"$_post_hook\" \"$vlist\"\n        return 1\n      fi\n\n      _debug2 original \"$response\"\n\n      response=\"$(echo \"$response\" | _normalizeJson)\"\n      _debug2 response \"$response\"\n\n      status=$(echo \"$response\" | _egrep_o '\"status\":\"[^\"]*' | cut -d : -f 2 | tr -d '\"')\n      _debug2 status \"$status\"\n      if _contains \"$status\" \"invalid\"; then\n        error=\"$(echo \"$response\" | _egrep_o '\"error\":\\{[^\\}]*')\"\n        _debug2 error \"$error\"\n        errordetail=\"$(echo \"$error\" | _egrep_o '\"detail\": *\"[^\"]*' | cut -d '\"' -f 4)\"\n        _debug2 errordetail \"$errordetail\"\n        if [ \"$errordetail\" ]; then\n          _err \"$d: Invalid status. Verification error details: $errordetail\"\n        else\n          _err \"$d: Invalid status, Verification error: $error\"\n        fi\n        if [ \"$DEBUG\" ]; then\n          if [ \"$vtype\" = \"$VTYPE_HTTP\" ]; then\n            _debug \"Debug: GET token URL.\"\n            _get \"http://$d/.well-known/acme-challenge/$token\" \"\" 1\n          fi\n        fi\n        _clearupwebbroot \"$_currentRoot\" \"$removelevel\" \"$token\"\n        _clearup\n        _on_issue_err \"$_post_hook\" \"$vlist\"\n        return 1\n      fi\n\n      if _contains \"$status\" \"valid\"; then\n        _info \"$(__green Success)\"\n        _stopserver \"$serverproc\"\n        serverproc=\"\"\n        _clearupwebbroot \"$_currentRoot\" \"$removelevel\" \"$token\"\n        break\n      fi\n\n      if _contains \"$status\" \"pending\"; then\n        _info \"Pending. The CA is processing your order, please wait. ($waittimes/$MAX_RETRY_TIMES)\"\n      elif _contains \"$status\" \"processing\"; then\n        _info \"Processing. The CA is processing your order, please wait. ($waittimes/$MAX_RETRY_TIMES)\"\n      else\n        _err \"$d: Unknown status: $status. Verification error: $response\"\n        _clearupwebbroot \"$_currentRoot\" \"$removelevel\" \"$token\"\n        _clearup\n        _on_issue_err \"$_post_hook\" \"$vlist\"\n        return 1\n      fi\n      _debug \"Sleep 2 seconds before verifying again\"\n      _sleep 2\n      _debug \"Checking\"\n\n      _send_signed_request \"$_authz_url\"\n\n      if [ \"$?\" != \"0\" ]; then\n        _err \"$d: Invalid code. Verification error: $response\"\n        _clearupwebbroot \"$_currentRoot\" \"$removelevel\" \"$token\"\n        _clearup\n        _on_issue_err \"$_post_hook\" \"$vlist\"\n        return 1\n      fi\n      _retryafter=$(echo \"$responseHeaders\" | grep -i \"^Retry-After *: *[0-9]\\+ *\" | cut -d : -f 2 | tr -d ' ' | tr -d '\\r')\n      _sleep_overload_retry_sec=$_retryafter\n      if [ \"$_sleep_overload_retry_sec\" ]; then\n        if [ $_sleep_overload_retry_sec -le 600 ]; then\n          _sleep $_sleep_overload_retry_sec\n        else\n          _info \"The retryafter=$_retryafter value is too large (> 600), will not retry anymore.\"\n          _clearupwebbroot \"$_currentRoot\" \"$removelevel\" \"$token\"\n          _clearup\n          _on_issue_err \"$_post_hook\" \"$vlist\"\n          return 1\n        fi\n      fi\n    done\n\n  done\n\n  _clearup\n  _info \"Verification finished, beginning signing.\"\n  der=\"$(_getfile \"${CSR_PATH}\" \"${BEGIN_CSR}\" \"${END_CSR}\" | tr -d \"\\r\\n\" | _url_replace)\"\n\n  _info \"Let's finalize the order.\"\n  _info \"Le_OrderFinalize\" \"$Le_OrderFinalize\"\n  if ! _send_signed_request \"${Le_OrderFinalize}\" \"{\\\"csr\\\": \\\"$der\\\"}\"; then\n    _err \"Signing failed.\"\n    _on_issue_err \"$_post_hook\"\n    return 1\n  fi\n  if [ \"$code\" != \"200\" ]; then\n    _err \"Signing failed. Finalize code was not 200.\"\n    _err \"$response\"\n    _on_issue_err \"$_post_hook\"\n    return 1\n  fi\n  if [ -z \"$Le_LinkOrder\" ]; then\n    Le_LinkOrder=\"$(echo \"$responseHeaders\" | grep -i '^Location.*$' | _tail_n 1 | tr -d \"\\r\\n \\t\" | cut -d \":\" -f 2-)\"\n  fi\n\n  _savedomainconf \"Le_LinkOrder\" \"$Le_LinkOrder\"\n\n  _link_cert_retry=0\n  _MAX_CERT_RETRY=30\n  while [ \"$_link_cert_retry\" -lt \"$_MAX_CERT_RETRY\" ]; do\n    if _contains \"$response\" \"\\\"status\\\":\\\"valid\\\"\"; then\n      _debug \"Order status is valid.\"\n      Le_LinkCert=\"$(echo \"$response\" | _egrep_o '\"certificate\" *: *\"[^\"]*\"' | cut -d '\"' -f 4)\"\n      _debug Le_LinkCert \"$Le_LinkCert\"\n      if [ -z \"$Le_LinkCert\" ]; then\n        _err \"A signing error occurred: could not find Le_LinkCert\"\n        _err \"$response\"\n        _on_issue_err \"$_post_hook\"\n        return 1\n      fi\n      break\n    elif _contains \"$response\" \"\\\"processing\\\"\"; then\n      _info \"Order status is 'processing', let's sleep and retry.\"\n      _retryafter=$(echo \"$responseHeaders\" | grep -i \"^Retry-After *:\" | cut -d : -f 2 | tr -d ' ' | tr -d '\\r')\n      _debug \"_retryafter\" \"$_retryafter\"\n      if [ \"$_retryafter\" ]; then\n        _info \"Sleeping for $_retryafter seconds then retrying\"\n        _sleep $_retryafter\n      else\n        _sleep 2\n      fi\n    else\n      _err \"Signing error: wrong status\"\n      _err \"$response\"\n      _on_issue_err \"$_post_hook\"\n      return 1\n    fi\n    #the order is processing, so we are going to poll order status\n    if [ -z \"$Le_LinkOrder\" ]; then\n      _err \"Signing error: could not get order link location header\"\n      _err \"responseHeaders\" \"$responseHeaders\"\n      _on_issue_err \"$_post_hook\"\n      return 1\n    fi\n    _info \"Polling order status: $Le_LinkOrder\"\n    if ! _send_signed_request \"$Le_LinkOrder\"; then\n      _err \"Signing failed. Could not make POST request to Le_LinkOrder for cert: $Le_LinkOrder.\"\n      _err \"$response\"\n      _on_issue_err \"$_post_hook\"\n      return 1\n    fi\n    _link_cert_retry=\"$(_math $_link_cert_retry + 1)\"\n  done\n\n  if [ -z \"$Le_LinkCert\" ]; then\n    _err \"Signing failed. Could not get Le_LinkCert, and stopped retrying after reaching the retry limit.\"\n    _err \"$response\"\n    _on_issue_err \"$_post_hook\"\n    return 1\n  fi\n  _info \"Downloading cert.\"\n  _info \"Le_LinkCert\" \"$Le_LinkCert\"\n  if ! _send_signed_request \"$Le_LinkCert\"; then\n    _err \"Signing failed. Could not download cert: $Le_LinkCert.\"\n    _err \"$response\"\n    _on_issue_err \"$_post_hook\"\n    return 1\n  fi\n\n  echo \"$response\" >\"$CERT_PATH\"\n  _split_cert_chain \"$CERT_PATH\" \"$CERT_FULLCHAIN_PATH\" \"$CA_CERT_PATH\"\n  if [ -z \"$_preferred_chain\" ]; then\n    _preferred_chain=$(_readcaconf DEFAULT_PREFERRED_CHAIN)\n  fi\n  if [ \"$_preferred_chain\" ] && [ -f \"$CERT_FULLCHAIN_PATH\" ]; then\n    if [ \"$DEBUG\" ]; then\n      _debug \"Default chain issuers: \" \"$(_get_chain_issuers \"$CERT_FULLCHAIN_PATH\")\"\n    fi\n    if ! _match_issuer \"$CERT_FULLCHAIN_PATH\" \"$_preferred_chain\"; then\n      rels=\"$(echo \"$responseHeaders\" | tr -d ' <>' | grep -i \"^link:\" | grep -i 'rel=\"alternate\"' | cut -d : -f 2- | cut -d ';' -f 1)\"\n      _debug2 \"rels\" \"$rels\"\n      for rel in $rels; do\n        _info \"Trying rel: $rel\"\n        if ! _send_signed_request \"$rel\"; then\n          _err \"Signing failed, could not download cert: $rel\"\n          _err \"$response\"\n          continue\n        fi\n        _relcert=\"$CERT_PATH.alt\"\n        _relfullchain=\"$CERT_FULLCHAIN_PATH.alt\"\n        _relca=\"$CA_CERT_PATH.alt\"\n        echo \"$response\" >\"$_relcert\"\n        _split_cert_chain \"$_relcert\" \"$_relfullchain\" \"$_relca\"\n        if [ \"$DEBUG\" ]; then\n          _debug \"rel chain issuers: \" \"$(_get_chain_issuers \"$_relfullchain\")\"\n        fi\n        if _match_issuer \"$_relfullchain\" \"$_preferred_chain\"; then\n          _info \"Matched issuer in: $rel\"\n          cat $_relcert >\"$CERT_PATH\"\n          cat $_relfullchain >\"$CERT_FULLCHAIN_PATH\"\n          cat $_relca >\"$CA_CERT_PATH\"\n          rm -f \"$_relcert\"\n          rm -f \"$_relfullchain\"\n          rm -f \"$_relca\"\n          break\n        fi\n        rm -f \"$_relcert\"\n        rm -f \"$_relfullchain\"\n        rm -f \"$_relca\"\n      done\n    fi\n  fi\n\n  _debug \"Le_LinkCert\" \"$Le_LinkCert\"\n  _savedomainconf \"Le_LinkCert\" \"$Le_LinkCert\"\n\n  if [ -z \"$Le_LinkCert\" ] || ! _checkcert \"$CERT_PATH\"; then\n    response=\"$(echo \"$response\" | _dbase64 \"multiline\" | tr -d '\\0' | _normalizeJson)\"\n    _err \"Signing failed: $(echo \"$response\" | _egrep_o '\"detail\":\"[^\"]*\"')\"\n    _on_issue_err \"$_post_hook\"\n    return 1\n  fi\n\n  if [ \"$Le_LinkCert\" ]; then\n    _info \"$(__green \"Cert success.\")\"\n    cat \"$CERT_PATH\"\n\n    _info \"Your cert is in: $(__green \"$CERT_PATH\")\"\n\n    if [ -f \"$CERT_KEY_PATH\" ]; then\n      _info \"Your cert key is in: $(__green \"$CERT_KEY_PATH\")\"\n    fi\n\n    if [ ! \"$USER_PATH\" ] || [ ! \"$_ACME_IN_CRON\" ]; then\n      USER_PATH=\"$PATH\"\n      _saveaccountconf \"USER_PATH\" \"$USER_PATH\"\n    fi\n  fi\n\n  [ -f \"$CA_CERT_PATH\" ] && _info \"The intermediate CA cert is in: $(__green \"$CA_CERT_PATH\")\"\n  [ -f \"$CERT_FULLCHAIN_PATH\" ] && _info \"And the full-chain cert is in: $(__green \"$CERT_FULLCHAIN_PATH\")\"\n  if [ \"$Le_ForceNewDomainKey\" ] && [ -e \"$Le_Next_Domain_Key\" ]; then\n    _info \"Your pre-generated key for future cert key changes is in: $(__green \"$Le_Next_Domain_Key\")\"\n  fi\n\n  Le_CertCreateTime=$(_time)\n  _savedomainconf \"Le_CertCreateTime\" \"$Le_CertCreateTime\"\n\n  Le_CertCreateTimeStr=$(_time2str \"$Le_CertCreateTime\")\n  _savedomainconf \"Le_CertCreateTimeStr\" \"$Le_CertCreateTimeStr\"\n\n  if [ -z \"$Le_RenewalDays\" ] || [ \"$Le_RenewalDays\" -lt \"0\" ]; then\n    Le_RenewalDays=\"$DEFAULT_RENEW\"\n  else\n    _savedomainconf \"Le_RenewalDays\" \"$Le_RenewalDays\"\n  fi\n\n  if [ \"$CA_BUNDLE\" ]; then\n    _saveaccountconf CA_BUNDLE \"$CA_BUNDLE\"\n  else\n    _clearaccountconf \"CA_BUNDLE\"\n  fi\n\n  if [ \"$CA_PATH\" ]; then\n    _saveaccountconf CA_PATH \"$CA_PATH\"\n  else\n    _clearaccountconf \"CA_PATH\"\n  fi\n\n  if [ \"$HTTPS_INSECURE\" ]; then\n    _saveaccountconf HTTPS_INSECURE \"$HTTPS_INSECURE\"\n  else\n    _clearaccountconf \"HTTPS_INSECURE\"\n  fi\n\n  if [ \"$Le_Listen_V4\" ]; then\n    _savedomainconf \"Le_Listen_V4\" \"$Le_Listen_V4\"\n    _cleardomainconf Le_Listen_V6\n  elif [ \"$Le_Listen_V6\" ]; then\n    _savedomainconf \"Le_Listen_V6\" \"$Le_Listen_V6\"\n    _cleardomainconf Le_Listen_V4\n  fi\n\n  if [ \"$Le_ForceNewDomainKey\" = \"1\" ]; then\n    _savedomainconf \"Le_ForceNewDomainKey\" \"$Le_ForceNewDomainKey\"\n  else\n    _cleardomainconf Le_ForceNewDomainKey\n  fi\n  if [ \"$_notAfter\" ]; then\n    Le_NextRenewTime=$(_date2time \"$_notAfter\")\n    Le_NextRenewTimeStr=\"$_notAfter\"\n    if [ \"$_valid_to\" ] && ! _startswith \"$_valid_to\" \"+\"; then\n      _info \"The domain is set to be valid until: $_valid_to\"\n      _info \"It cannot be renewed automatically\"\n      _info \"See: $_VALIDITY_WIKI\"\n    else\n      _now=$(_time)\n      _debug2 \"_now\" \"$_now\"\n      _lifetime=$(_math $Le_NextRenewTime - $_now)\n      _debug2 \"_lifetime\" \"$_lifetime\"\n      if [ $_lifetime -gt 86400 ]; then\n        #if lifetime is logner than one day, it will renew one day before\n        Le_NextRenewTime=$(_math $Le_NextRenewTime - 86400)\n        Le_NextRenewTimeStr=$(_time2str \"$Le_NextRenewTime\")\n      else\n        #if lifetime is less than 24 hours, it will renew one hour before\n        Le_NextRenewTime=$(_math $Le_NextRenewTime - 3600)\n        Le_NextRenewTimeStr=$(_time2str \"$Le_NextRenewTime\")\n      fi\n    fi\n  else\n    Le_NextRenewTime=$(_math \"$Le_CertCreateTime\" + \"$Le_RenewalDays\" \\* 24 \\* 60 \\* 60)\n    Le_NextRenewTime=$(_math \"$Le_NextRenewTime\" - 86400)\n    Le_NextRenewTimeStr=$(_time2str \"$Le_NextRenewTime\")\n  fi\n  _savedomainconf \"Le_NextRenewTimeStr\" \"$Le_NextRenewTimeStr\"\n  _savedomainconf \"Le_NextRenewTime\" \"$Le_NextRenewTime\"\n\n  #convert to pkcs12\n  if [ \"$Le_PFXPassword\" ]; then\n    _toPkcs \"$CERT_PFX_PATH\" \"$CERT_KEY_PATH\" \"$CERT_PATH\" \"$CA_CERT_PATH\" \"$Le_PFXPassword\"\n  fi\n  export CERT_PFX_PATH\n\n  if [ \"$_real_cert$_real_key$_real_ca$_reload_cmd$_real_fullchain\" ]; then\n    _savedomainconf \"Le_RealCertPath\" \"$_real_cert\"\n    _savedomainconf \"Le_RealCACertPath\" \"$_real_ca\"\n    _savedomainconf \"Le_RealKeyPath\" \"$_real_key\"\n    _savedomainconf \"Le_ReloadCmd\" \"$_reload_cmd\" \"base64\"\n    _savedomainconf \"Le_RealFullChainPath\" \"$_real_fullchain\"\n    if ! _installcert \"$_main_domain\" \"$_real_cert\" \"$_real_key\" \"$_real_ca\" \"$_real_fullchain\" \"$_reload_cmd\"; then\n      return 1\n    fi\n  fi\n\n  if ! _on_issue_success \"$_post_hook\" \"$_renew_hook\"; then\n    _err \"Error calling hook.\"\n    return 1\n  fi\n}\n\n#in_out_cert   out_fullchain   out_ca\n_split_cert_chain() {\n  _certf=\"$1\"\n  _fullchainf=\"$2\"\n  _caf=\"$3\"\n  if [ \"$(grep -- \"$BEGIN_CERT\" \"$_certf\" | wc -l)\" -gt \"1\" ]; then\n    _debug \"Found cert chain\"\n    cat \"$_certf\" >\"$_fullchainf\"\n    _end_n=\"$(grep -n -- \"$END_CERT\" \"$_fullchainf\" | _head_n 1 | cut -d : -f 1)\"\n    _debug _end_n \"$_end_n\"\n    sed -n \"1,${_end_n}p\" \"$_fullchainf\" >\"$_certf\"\n    _end_n=\"$(_math $_end_n + 1)\"\n    sed -n \"${_end_n},9999p\" \"$_fullchainf\" >\"$_caf\"\n  fi\n}\n\n#domain  [isEcc] [server]\nrenew() {\n  Le_Domain=\"$1\"\n  if [ -z \"$Le_Domain\" ]; then\n    _usage \"Usage: $PROJECT_ENTRY --renew --domain <domain.tld> [--ecc] [--server server]\"\n    return 1\n  fi\n\n  _isEcc=\"$2\"\n  _renewServer=\"$3\"\n  _debug \"_renewServer\" \"$_renewServer\"\n\n  _initpath \"$Le_Domain\" \"$_isEcc\"\n\n  _set_level=${NOTIFY_LEVEL:-$NOTIFY_LEVEL_DEFAULT}\n  _info \"$(__green \"Renewing: '$Le_Domain'\")\"\n  if [ ! -f \"$DOMAIN_CONF\" ]; then\n    _info \"'$Le_Domain' is not an issued domain, skipping.\"\n    return $RENEW_SKIP\n  fi\n\n  if [ \"$Le_RenewalDays\" ]; then\n    _savedomainconf Le_RenewalDays \"$Le_RenewalDays\"\n  fi\n\n  . \"$DOMAIN_CONF\"\n  _debug Le_API \"$Le_API\"\n\n  case \"$Le_API\" in\n  \"$CA_LETSENCRYPT_V2_TEST\")\n    _info \"Switching back to $CA_LETSENCRYPT_V2\"\n    Le_API=\"$CA_LETSENCRYPT_V2\"\n    ;;\n  \"$CA_BUYPASS_TEST\")\n    _info \"Switching back to $CA_BUYPASS\"\n    Le_API=\"$CA_BUYPASS\"\n    ;;\n  \"$CA_GOOGLE_TEST\")\n    _info \"Switching back to $CA_GOOGLE\"\n    Le_API=\"$CA_GOOGLE\"\n    ;;\n  esac\n\n  if [ \"$_server\" ]; then\n    Le_API=\"$_server\"\n  fi\n  _info \"Renewing using Le_API=$Le_API\"\n\n  _clearAPI\n  _clearCA\n  export ACME_DIRECTORY=\"$Le_API\"\n\n  #reload ca configs\n  _debug2 \"initpath again.\"\n  _initpath \"$Le_Domain\" \"$_isEcc\"\n\n  if [ -z \"$FORCE\" ] && [ \"$Le_NextRenewTime\" ] && [ \"$(_time)\" -lt \"$Le_NextRenewTime\" ]; then\n    _info \"Skipping. Next renewal time is: $(__green \"$Le_NextRenewTimeStr\")\"\n    _info \"Add '$(__red '--force')' to force renewal.\"\n    if [ -z \"$_ACME_IN_RENEWALL\" ]; then\n      if [ $_set_level -ge $NOTIFY_LEVEL_SKIP ]; then\n        _send_notify \"Renew $Le_Domain skipped\" \"Good, the cert is skipped.\" \"$NOTIFY_HOOK\" \"$RENEW_SKIP\"\n      fi\n    fi\n    return \"$RENEW_SKIP\"\n  fi\n\n  if [ \"$_ACME_IN_CRON\" = \"1\" ] && [ -z \"$Le_CertCreateTime\" ]; then\n    _info \"Skipping invalid cert for: $Le_Domain\"\n    return $RENEW_SKIP\n  fi\n\n  _ACME_IS_RENEW=\"1\"\n  Le_ReloadCmd=\"$(_readdomainconf Le_ReloadCmd)\"\n  Le_PreHook=\"$(_readdomainconf Le_PreHook)\"\n  Le_PostHook=\"$(_readdomainconf Le_PostHook)\"\n  Le_RenewHook=\"$(_readdomainconf Le_RenewHook)\"\n  Le_Preferred_Chain=\"$(_readdomainconf Le_Preferred_Chain)\"\n  # When renewing from an old version, the empty Le_Keylength means 2048.\n  # Note, do not use DEFAULT_DOMAIN_KEY_LENGTH as that value may change over\n  # time but an empty value implies 2048 specifically.\n  Le_Keylength=\"$(_readdomainconf Le_Keylength)\"\n  if [ -z \"$Le_Keylength\" ]; then\n    Le_Keylength=2048\n  fi\n  issue \"$Le_Webroot\" \"$Le_Domain\" \"$Le_Alt\" \"$Le_Keylength\" \"$Le_RealCertPath\" \"$Le_RealKeyPath\" \"$Le_RealCACertPath\" \"$Le_ReloadCmd\" \"$Le_RealFullChainPath\" \"$Le_PreHook\" \"$Le_PostHook\" \"$Le_RenewHook\" \"$Le_LocalAddress\" \"$Le_ChallengeAlias\" \"$Le_Preferred_Chain\" \"$Le_Valid_From\" \"$Le_Valid_To\"\n  res=\"$?\"\n  if [ \"$res\" != \"0\" ]; then\n    return \"$res\"\n  fi\n\n  if [ \"$Le_DeployHook\" ]; then\n    _deploy \"$Le_Domain\" \"$Le_DeployHook\"\n    res=\"$?\"\n  fi\n\n  _ACME_IS_RENEW=\"\"\n  if [ -z \"$_ACME_IN_RENEWALL\" ]; then\n    if [ \"$res\" = \"0\" ]; then\n      if [ $_set_level -ge $NOTIFY_LEVEL_RENEW ]; then\n        _send_notify \"Renew $d success\" \"Good, the cert is renewed.\" \"$NOTIFY_HOOK\" 0\n      fi\n    else\n      if [ $_set_level -ge $NOTIFY_LEVEL_ERROR ]; then\n        _send_notify \"Renew $d error\" \"There is an error.\" \"$NOTIFY_HOOK\" 1\n      fi\n    fi\n  fi\n\n  return \"$res\"\n}\n\n#renewAll  [stopRenewOnError] [server]\nrenewAll() {\n  _initpath\n  _clearCA\n  _stopRenewOnError=\"$1\"\n  _debug \"_stopRenewOnError\" \"$_stopRenewOnError\"\n\n  _server=\"$2\"\n  _debug \"_server\" \"$_server\"\n\n  _ret=\"0\"\n  _success_msg=\"\"\n  _error_msg=\"\"\n  _skipped_msg=\"\"\n  _error_level=$NOTIFY_LEVEL_SKIP\n  _notify_code=$RENEW_SKIP\n  _set_level=${NOTIFY_LEVEL:-$NOTIFY_LEVEL_DEFAULT}\n  _debug \"_set_level\" \"$_set_level\"\n  export _ACME_IN_RENEWALL=1\n  for di in \"${CERT_HOME}\"/*.*/; do\n    _debug di \"$di\"\n    if ! [ -d \"$di\" ]; then\n      _debug \"Not a directory, skipping: $di\"\n      continue\n    fi\n    d=$(basename \"$di\")\n    _debug d \"$d\"\n    (\n      if _endswith \"$d\" \"$ECC_SUFFIX\"; then\n        _isEcc=$(echo \"$d\" | cut -d \"$ECC_SEP\" -f 2)\n        d=$(echo \"$d\" | cut -d \"$ECC_SEP\" -f 1)\n      fi\n      renew \"$d\" \"$_isEcc\" \"$_server\"\n    )\n    rc=\"$?\"\n    _debug \"Return code: $rc\"\n    if [ \"$rc\" = \"0\" ]; then\n      if [ $_error_level -gt $NOTIFY_LEVEL_RENEW ]; then\n        _error_level=\"$NOTIFY_LEVEL_RENEW\"\n        _notify_code=0\n      fi\n\n      if [ $_set_level -ge $NOTIFY_LEVEL_RENEW ]; then\n        if [ \"$NOTIFY_MODE\" = \"$NOTIFY_MODE_CERT\" ]; then\n          _send_notify \"Renew $d success\" \"Good, the cert is renewed.\" \"$NOTIFY_HOOK\" 0\n        fi\n      fi\n\n      _success_msg=\"${_success_msg}    $d\n\"\n    elif [ \"$rc\" = \"$RENEW_SKIP\" ]; then\n      if [ $_error_level -gt $NOTIFY_LEVEL_SKIP ]; then\n        _error_level=\"$NOTIFY_LEVEL_SKIP\"\n        _notify_code=$RENEW_SKIP\n      fi\n\n      if [ $_set_level -ge $NOTIFY_LEVEL_SKIP ]; then\n        if [ \"$NOTIFY_MODE\" = \"$NOTIFY_MODE_CERT\" ]; then\n          _send_notify \"Renew $d skipped\" \"Good, the cert is skipped.\" \"$NOTIFY_HOOK\" \"$RENEW_SKIP\"\n        fi\n      fi\n\n      _info \"Skipped $d\"\n      _skipped_msg=\"${_skipped_msg}    $d\n\"\n    else\n      if [ $_error_level -gt $NOTIFY_LEVEL_ERROR ]; then\n        _error_level=\"$NOTIFY_LEVEL_ERROR\"\n        _notify_code=1\n      fi\n\n      if [ $_set_level -ge $NOTIFY_LEVEL_ERROR ]; then\n        if [ \"$NOTIFY_MODE\" = \"$NOTIFY_MODE_CERT\" ]; then\n          _send_notify \"Renew $d error\" \"There is an error.\" \"$NOTIFY_HOOK\" 1\n        fi\n      fi\n\n      _error_msg=\"${_error_msg}    $d\n\"\n      if [ \"$_stopRenewOnError\" ]; then\n        _err \"Error renewing $d, stopping.\"\n        _ret=\"$rc\"\n        break\n      else\n        _ret=\"$rc\"\n        _err \"Error renewing $d.\"\n      fi\n    fi\n  done\n  _debug _error_level \"$_error_level\"\n  _debug _set_level \"$_set_level\"\n  if [ $_error_level -le $_set_level ]; then\n    if [ -z \"$NOTIFY_MODE\" ] || [ \"$NOTIFY_MODE\" = \"$NOTIFY_MODE_BULK\" ]; then\n      _msg_subject=\"Renew\"\n      if [ \"$_error_msg\" ]; then\n        _msg_subject=\"${_msg_subject} Error\"\n        _msg_data=\"Errored certs:\n${_error_msg}\n\"\n      fi\n      if [ \"$_success_msg\" ]; then\n        _msg_subject=\"${_msg_subject} Success\"\n        _msg_data=\"${_msg_data}Successful certs:\n${_success_msg}\n\"\n      fi\n      if [ \"$_skipped_msg\" ]; then\n        _msg_subject=\"${_msg_subject} Skipped\"\n        _msg_data=\"${_msg_data}Skipped certs:\n${_skipped_msg}\n\"\n      fi\n\n      _send_notify \"$_msg_subject\" \"$_msg_data\" \"$NOTIFY_HOOK\" \"$_notify_code\"\n    fi\n  fi\n\n  return \"$_ret\"\n}\n\n#csr webroot\nsigncsr() {\n  _csrfile=\"$1\"\n  _csrW=\"$2\"\n  if [ -z \"$_csrfile\" ] || [ -z \"$_csrW\" ]; then\n    _usage \"Usage: $PROJECT_ENTRY --sign-csr --csr <csr-file> --webroot <directory>\"\n    return 1\n  fi\n\n  _real_cert=\"$3\"\n  _real_key=\"$4\"\n  _real_ca=\"$5\"\n  _reload_cmd=\"$6\"\n  _real_fullchain=\"$7\"\n  _pre_hook=\"${8}\"\n  _post_hook=\"${9}\"\n  _renew_hook=\"${10}\"\n  _local_addr=\"${11}\"\n  _challenge_alias=\"${12}\"\n  _preferred_chain=\"${13}\"\n\n  _csrsubj=$(_readSubjectFromCSR \"$_csrfile\")\n  if [ \"$?\" != \"0\" ]; then\n    _err \"Cannot read subject from CSR: $_csrfile\"\n    return 1\n  fi\n  _debug _csrsubj \"$_csrsubj\"\n  if _contains \"$_csrsubj\" ' ' || ! _contains \"$_csrsubj\" '.'; then\n    _info \"It seems that the subject $_csrsubj is not a valid domain name. Dropping it.\"\n    _csrsubj=\"\"\n  fi\n\n  _csrdomainlist=$(_readSubjectAltNamesFromCSR \"$_csrfile\")\n  if [ \"$?\" != \"0\" ]; then\n    _err \"Cannot read domain list from CSR: $_csrfile\"\n    return 1\n  fi\n  _debug \"_csrdomainlist\" \"$_csrdomainlist\"\n\n  if [ -z \"$_csrsubj\" ]; then\n    _csrsubj=\"$(_getfield \"$_csrdomainlist\" 1)\"\n    _debug _csrsubj \"$_csrsubj\"\n    _csrdomainlist=\"$(echo \"$_csrdomainlist\" | cut -d , -f 2-)\"\n    _debug \"_csrdomainlist\" \"$_csrdomainlist\"\n  fi\n\n  if [ -z \"$_csrsubj\" ]; then\n    _err \"Cannot read subject from CSR: $_csrfile\"\n    return 1\n  fi\n\n  _csrkeylength=$(_readKeyLengthFromCSR \"$_csrfile\")\n  if [ \"$?\" != \"0\" ] || [ -z \"$_csrkeylength\" ]; then\n    _err \"Cannot read key length from CSR: $_csrfile\"\n    return 1\n  fi\n\n  _initpath \"$_csrsubj\" \"$_csrkeylength\"\n  mkdir -p \"$DOMAIN_PATH\"\n\n  _info \"Copying CSR to: $CSR_PATH\"\n  cp \"$_csrfile\" \"$CSR_PATH\"\n\n  issue \"$_csrW\" \"$_csrsubj\" \"$_csrdomainlist\" \"$_csrkeylength\" \"$_real_cert\" \"$_real_key\" \"$_real_ca\" \"$_reload_cmd\" \"$_real_fullchain\" \"$_pre_hook\" \"$_post_hook\" \"$_renew_hook\" \"$_local_addr\" \"$_challenge_alias\" \"$_preferred_chain\"\n\n}\n\nshowcsr() {\n  _csrfile=\"$1\"\n  _csrd=\"$2\"\n  if [ -z \"$_csrfile\" ] && [ -z \"$_csrd\" ]; then\n    _usage \"Usage: $PROJECT_ENTRY --show-csr --csr <csr-file>\"\n    return 1\n  fi\n\n  _initpath\n\n  _csrsubj=$(_readSubjectFromCSR \"$_csrfile\")\n  if [ \"$?\" != \"0\" ]; then\n    _err \"Cannot read subject from CSR: $_csrfile\"\n    return 1\n  fi\n  if [ -z \"$_csrsubj\" ]; then\n    _info \"The subject is empty\"\n  fi\n\n  _info \"Subject=$_csrsubj\"\n\n  _csrdomainlist=$(_readSubjectAltNamesFromCSR \"$_csrfile\")\n  if [ \"$?\" != \"0\" ]; then\n    _err \"Cannot read domain list from CSR: $_csrfile\"\n    return 1\n  fi\n  _debug \"_csrdomainlist\" \"$_csrdomainlist\"\n\n  _info \"SubjectAltNames=$_csrdomainlist\"\n\n  _csrkeylength=$(_readKeyLengthFromCSR \"$_csrfile\")\n  if [ \"$?\" != \"0\" ] || [ -z \"$_csrkeylength\" ]; then\n    _err \"Cannot read key length from CSR: $_csrfile\"\n    return 1\n  fi\n  _info \"KeyLength=$_csrkeylength\"\n}\n\n#listraw  domain\nlist() {\n  _raw=\"$1\"\n  _domain=\"$2\"\n  _initpath\n\n  _sep=\"|\"\n  if [ \"$_raw\" ]; then\n    if [ -z \"$_domain\" ]; then\n      printf \"%s\\n\" \"Main_Domain${_sep}KeyLength${_sep}SAN_Domains${_sep}CA${_sep}Created${_sep}Renew\"\n    fi\n    for di in \"${CERT_HOME}\"/*.*/; do\n      d=$(basename \"$di\")\n      _debug d \"$d\"\n      (\n        if _endswith \"$d\" \"$ECC_SUFFIX\"; then\n          _isEcc=\"ecc\"\n          d=$(echo \"$d\" | cut -d \"$ECC_SEP\" -f 1)\n        fi\n        DOMAIN_CONF=\"$di/$d.conf\"\n        if [ -f \"$DOMAIN_CONF\" ]; then\n          . \"$DOMAIN_CONF\"\n          _ca=\"$(_getCAShortName \"$Le_API\")\"\n          if [ -z \"$_domain\" ]; then\n            printf \"%s\\n\" \"$Le_Domain${_sep}\\\"$Le_Keylength\\\"${_sep}$Le_Alt${_sep}$_ca${_sep}$Le_CertCreateTimeStr${_sep}$Le_NextRenewTimeStr\"\n          else\n            if [ \"$_domain\" = \"$d\" ]; then\n              cat \"$DOMAIN_CONF\"\n            fi\n          fi\n        fi\n      )\n    done\n  else\n    if _exists column; then\n      list \"raw\" \"$_domain\" | column -t -s \"$_sep\"\n    else\n      list \"raw\" \"$_domain\" | tr \"$_sep\" '\\t'\n    fi\n  fi\n\n}\n\n_deploy() {\n  _d=\"$1\"\n  _hooks=\"$2\"\n\n  for _d_api in $(echo \"$_hooks\" | tr ',' \" \"); do\n    _deployApi=\"$(_findHook \"$_d\" $_SUB_FOLDER_DEPLOY \"$_d_api\")\"\n    if [ -z \"$_deployApi\" ]; then\n      _err \"The deploy hook $_d_api was not found.\"\n      return 1\n    fi\n    _debug _deployApi \"$_deployApi\"\n\n    if ! (\n      if ! . \"$_deployApi\"; then\n        _err \"Error loading file $_deployApi. Please check your API file and try again.\"\n        return 1\n      fi\n\n      d_command=\"${_d_api}_deploy\"\n      if ! _exists \"$d_command\"; then\n        _err \"It seems that your API file is not correct. Make sure it has a function named: $d_command\"\n        return 1\n      fi\n\n      if ! $d_command \"$_d\" \"$CERT_KEY_PATH\" \"$CERT_PATH\" \"$CA_CERT_PATH\" \"$CERT_FULLCHAIN_PATH\"; then\n        _err \"Error deploying for domain: $_d\"\n        return 1\n      fi\n    ); then\n      _err \"Error encountered while deploying.\"\n      return 1\n    else\n      _info \"$(__green Success)\"\n    fi\n  done\n}\n\n#domain hooks\ndeploy() {\n  _d=\"$1\"\n  _hooks=\"$2\"\n  _isEcc=\"$3\"\n  if [ -z \"$_hooks\" ]; then\n    _usage \"Usage: $PROJECT_ENTRY --deploy --domain <domain.tld> --deploy-hook <hookname> [--ecc] \"\n    return 1\n  fi\n\n  _initpath \"$_d\" \"$_isEcc\"\n  if [ ! -d \"$DOMAIN_PATH\" ]; then\n    _err \"The domain '$_d' is not a cert name. You must use the cert name to specify the cert to install.\"\n    _err \"Cannot find path: '$DOMAIN_PATH'\"\n    return 1\n  fi\n\n  _debug2 DOMAIN_CONF \"$DOMAIN_CONF\"\n  . \"$DOMAIN_CONF\"\n\n  _savedomainconf Le_DeployHook \"$_hooks\"\n\n  _deploy \"$_d\" \"$_hooks\"\n}\n\ninstallcert() {\n  _main_domain=\"$1\"\n  if [ -z \"$_main_domain\" ]; then\n    _usage \"Usage: $PROJECT_ENTRY --install-cert --domain <domain.tld> [--ecc] [--cert-file <file>] [--key-file <file>] [--ca-file <file>] [ --reloadcmd <command>] [--fullchain-file <file>]\"\n    return 1\n  fi\n\n  _real_cert=\"$2\"\n  _real_key=\"$3\"\n  _real_ca=\"$4\"\n  _reload_cmd=\"$5\"\n  _real_fullchain=\"$6\"\n  _isEcc=\"$7\"\n\n  _initpath \"$_main_domain\" \"$_isEcc\"\n  if [ ! -d \"$DOMAIN_PATH\" ]; then\n    _err \"The domain '$_main_domain' is not a cert name. You must use the cert name to specify the cert to install.\"\n    _err \"Cannot find path: '$DOMAIN_PATH'\"\n    return 1\n  fi\n\n  _savedomainconf \"Le_RealCertPath\" \"$_real_cert\"\n  _savedomainconf \"Le_RealCACertPath\" \"$_real_ca\"\n  _savedomainconf \"Le_RealKeyPath\" \"$_real_key\"\n  _savedomainconf \"Le_ReloadCmd\" \"$_reload_cmd\" \"base64\"\n  _savedomainconf \"Le_RealFullChainPath\" \"$_real_fullchain\"\n  export Le_ForceNewDomainKey=\"$(_readdomainconf Le_ForceNewDomainKey)\"\n  export Le_Next_Domain_Key\n  _installcert \"$_main_domain\" \"$_real_cert\" \"$_real_key\" \"$_real_ca\" \"$_real_fullchain\" \"$_reload_cmd\"\n}\n\n#domain  cert  key  ca  fullchain reloadcmd backup-prefix\n_installcert() {\n  _main_domain=\"$1\"\n  _real_cert=\"$2\"\n  _real_key=\"$3\"\n  _real_ca=\"$4\"\n  _real_fullchain=\"$5\"\n  _reload_cmd=\"$6\"\n  _backup_prefix=\"$7\"\n\n  if [ \"$_real_cert\" = \"$NO_VALUE\" ]; then\n    _real_cert=\"\"\n  fi\n  if [ \"$_real_key\" = \"$NO_VALUE\" ]; then\n    _real_key=\"\"\n  fi\n  if [ \"$_real_ca\" = \"$NO_VALUE\" ]; then\n    _real_ca=\"\"\n  fi\n  if [ \"$_reload_cmd\" = \"$NO_VALUE\" ]; then\n    _reload_cmd=\"\"\n  fi\n  if [ \"$_real_fullchain\" = \"$NO_VALUE\" ]; then\n    _real_fullchain=\"\"\n  fi\n\n  _backup_path=\"$DOMAIN_BACKUP_PATH/$_backup_prefix\"\n  mkdir -p \"$_backup_path\"\n\n  if [ \"$_real_cert\" ]; then\n    _info \"Installing cert to: $_real_cert\"\n    if [ -f \"$_real_cert\" ] && [ ! \"$_ACME_IS_RENEW\" ]; then\n      cp \"$_real_cert\" \"$_backup_path/cert.bak\"\n    fi\n    if [ \"$CERT_PATH\" != \"$_real_cert\" ]; then\n      cat \"$CERT_PATH\" >\"$_real_cert\" || return 1\n    fi\n  fi\n\n  if [ \"$_real_ca\" ]; then\n    _info \"Installing CA to: $_real_ca\"\n    if [ \"$_real_ca\" = \"$_real_cert\" ]; then\n      echo \"\" >>\"$_real_ca\"\n      cat \"$CA_CERT_PATH\" >>\"$_real_ca\" || return 1\n    else\n      if [ -f \"$_real_ca\" ] && [ ! \"$_ACME_IS_RENEW\" ]; then\n        cp \"$_real_ca\" \"$_backup_path/ca.bak\"\n      fi\n      if [ \"$CA_CERT_PATH\" != \"$_real_ca\" ]; then\n        cat \"$CA_CERT_PATH\" >\"$_real_ca\" || return 1\n      fi\n    fi\n  fi\n\n  if [ \"$_real_key\" ]; then\n    _info \"Installing key to: $_real_key\"\n    if [ -f \"$_real_key\" ] && [ ! \"$_ACME_IS_RENEW\" ]; then\n      cp \"$_real_key\" \"$_backup_path/key.bak\"\n    fi\n    if [ \"$CERT_KEY_PATH\" != \"$_real_key\" ]; then\n      if [ -f \"$_real_key\" ]; then\n        cat \"$CERT_KEY_PATH\" >\"$_real_key\" || return 1\n      else\n        touch \"$_real_key\" || return 1\n        chmod 600 \"$_real_key\"\n        cat \"$CERT_KEY_PATH\" >\"$_real_key\" || return 1\n      fi\n    fi\n  fi\n\n  if [ \"$_real_fullchain\" ]; then\n    _info \"Installing full chain to: $_real_fullchain\"\n    if [ -f \"$_real_fullchain\" ] && [ ! \"$_ACME_IS_RENEW\" ]; then\n      cp \"$_real_fullchain\" \"$_backup_path/fullchain.bak\"\n    fi\n    if [ \"$_real_fullchain\" != \"$CERT_FULLCHAIN_PATH\" ]; then\n      cat \"$CERT_FULLCHAIN_PATH\" >\"$_real_fullchain\" || return 1\n    fi\n  fi\n\n  if [ \"$_reload_cmd\" ]; then\n    _info \"Running reload cmd: $_reload_cmd\"\n    if (\n      export CERT_PATH\n      export CERT_KEY_PATH\n      export CA_CERT_PATH\n      export CERT_FULLCHAIN_PATH\n      export Le_Domain=\"$_main_domain\"\n      export Le_ForceNewDomainKey\n      export Le_Next_Domain_Key\n      cd \"$DOMAIN_PATH\" && eval \"$_reload_cmd\"\n    ); then\n      _info \"$(__green \"Reload successful\")\"\n    else\n      _err \"Reload error for: $Le_Domain\"\n    fi\n  fi\n\n}\n\n__read_password() {\n  unset _pp\n  prompt=\"Enter Password:\"\n  while IFS= read -p \"$prompt\" -r -s -n 1 char; do\n    if [ \"$char\" = $'\\0' ]; then\n      break\n    fi\n    prompt='*'\n    _pp=\"$_pp$char\"\n  done\n  echo \"$_pp\"\n}\n\n_install_win_taskscheduler() {\n  _lesh=\"$1\"\n  _centry=\"$2\"\n  _randomminute=\"$3\"\n  if ! _exists cygpath; then\n    _err \"cygpath not found\"\n    return 1\n  fi\n  if ! _exists schtasks; then\n    _err \"schtasks.exe was not found, are you on Windows?\"\n    return 1\n  fi\n  _winbash=\"$(cygpath -w $(which bash))\"\n  _debug _winbash \"$_winbash\"\n  if [ -z \"$_winbash\" ]; then\n    _err \"Cannot find bash path\"\n    return 1\n  fi\n  _myname=\"$(whoami)\"\n  _debug \"_myname\" \"$_myname\"\n  if [ -z \"$_myname\" ]; then\n    _err \"Can not find own username\"\n    return 1\n  fi\n  _debug \"_lesh\" \"$_lesh\"\n\n  _info \"To install the scheduler task to your Windows account, you must input your Windows password.\"\n  _info \"$PROJECT_NAME will not save your password.\"\n  _info \"Please input your Windows password for: $(__green \"$_myname\")\"\n  _password=\"$(__read_password)\"\n  #SCHTASKS.exe '/create' '/SC' 'DAILY' '/TN' \"$_WINDOWS_SCHEDULER_NAME\" '/F' '/ST' \"00:$_randomminute\" '/RU' \"$_myname\" '/RP' \"$_password\" '/TR' \"$_winbash -l -c '$_lesh --cron --home \\\"$LE_WORKING_DIR\\\" $_centry'\" >/dev/null\n  echo SCHTASKS.exe '/create' '/SC' 'DAILY' '/TN' \"$_WINDOWS_SCHEDULER_NAME\" '/F' '/ST' \"00:$_randomminute\" '/RU' \"$_myname\" '/RP' \"$_password\" '/TR' \"\\\"$_winbash -l -c '$_lesh --cron --home \\\"$LE_WORKING_DIR\\\" $_centry'\\\"\" | cmd.exe >/dev/null\n  echo\n\n}\n\n_uninstall_win_taskscheduler() {\n  if ! _exists schtasks; then\n    _err \"schtasks.exe was not found, are you on Windows?\"\n    return 1\n  fi\n  if ! echo SCHTASKS /query /tn \"$_WINDOWS_SCHEDULER_NAME\" | cmd.exe >/dev/null; then\n    _debug \"scheduler $_WINDOWS_SCHEDULER_NAME was not found.\"\n  else\n    _info \"Removing $_WINDOWS_SCHEDULER_NAME\"\n    echo SCHTASKS /delete /f /tn \"$_WINDOWS_SCHEDULER_NAME\" | cmd.exe >/dev/null\n  fi\n}\n\n#confighome\ninstallcronjob() {\n  _c_home=\"$1\"\n  _initpath\n  _CRONTAB=\"crontab\"\n  if [ -f \"$LE_WORKING_DIR/$PROJECT_ENTRY\" ]; then\n    lesh=\"\\\"$LE_WORKING_DIR\\\"/$PROJECT_ENTRY\"\n  else\n    _debug \"_SCRIPT_\" \"$_SCRIPT_\"\n    _script=\"$(_readlink \"$_SCRIPT_\")\"\n    _debug _script \"$_script\"\n    if [ -f \"$_script\" ]; then\n      _info \"Usinging the current script from: $_script\"\n      lesh=\"$_script\"\n    else\n      _err \"Cannot install cronjob, $PROJECT_ENTRY not found.\"\n      return 1\n    fi\n  fi\n  if [ \"$_c_home\" ]; then\n    _c_entry=\"--config-home \\\"$_c_home\\\" \"\n  fi\n  _t=$(_time)\n  random_minute=$(_math $_t % 60)\n  random_hour=$(_math $_t / 60 % 24)\n\n  if ! _exists \"$_CRONTAB\" && _exists \"fcrontab\"; then\n    _CRONTAB=\"fcrontab\"\n  fi\n\n  if ! _exists \"$_CRONTAB\"; then\n    if _exists cygpath && _exists schtasks.exe; then\n      _info \"It seems you are on Windows, let's install the Windows scheduler task.\"\n      if _install_win_taskscheduler \"$lesh\" \"$_c_entry\" \"$random_minute\"; then\n        _info \"Successfully installed Windows scheduler task.\"\n        return 0\n      else\n        _err \"Failed to install Windows scheduler task.\"\n        return 1\n      fi\n    fi\n    _err \"crontab/fcrontab doesn't exist, so we cannot install cron jobs.\"\n    _err \"Your certs will not be renewed automatically.\"\n    _err \"You must add your own cron job to call '$PROJECT_ENTRY --cron' every day.\"\n    return 1\n  fi\n  _info \"Installing cron job\"\n  if ! $_CRONTAB -l | grep \"$PROJECT_ENTRY --cron\"; then\n    if _exists uname && uname -a | grep SunOS >/dev/null; then\n      _CRONTAB_STDIN=\"$_CRONTAB --\"\n    else\n      _CRONTAB_STDIN=\"$_CRONTAB -\"\n    fi\n    $_CRONTAB -l | {\n      cat\n      echo \"$random_minute $random_hour * * * $lesh --cron --home \\\"$LE_WORKING_DIR\\\" $_c_entry> /dev/null\"\n    } | $_CRONTAB_STDIN\n  fi\n  if [ \"$?\" != \"0\" ]; then\n    _err \"Failed to install cron job. You need to manually renew your certs.\"\n    _err \"Alternatively, you can add a cron job by yourself:\"\n    _err \"$lesh --cron --home \\\"$LE_WORKING_DIR\\\" > /dev/null\"\n    return 1\n  fi\n}\n\nuninstallcronjob() {\n  _CRONTAB=\"crontab\"\n  if ! _exists \"$_CRONTAB\" && _exists \"fcrontab\"; then\n    _CRONTAB=\"fcrontab\"\n  fi\n\n  if ! _exists \"$_CRONTAB\"; then\n    if _exists cygpath && _exists schtasks.exe; then\n      _info \"It seems you are on Windows, let's uninstall the Windows scheduler task.\"\n      if _uninstall_win_taskscheduler; then\n        _info \"Successfully uninstalled Windows scheduler task.\"\n        return 0\n      else\n        _err \"Failed to uninstall Windows scheduler task.\"\n        return 1\n      fi\n    fi\n    return\n  fi\n  _info \"Removing cron job\"\n  cr=\"$($_CRONTAB -l | grep \"$PROJECT_ENTRY --cron\")\"\n  if [ \"$cr\" ]; then\n    if _exists uname && uname -a | grep SunOS >/dev/null; then\n      $_CRONTAB -l | sed \"/$PROJECT_ENTRY --cron/d\" | $_CRONTAB --\n    else\n      $_CRONTAB -l | sed \"/$PROJECT_ENTRY --cron/d\" | $_CRONTAB -\n    fi\n    LE_WORKING_DIR=\"$(echo \"$cr\" | cut -d ' ' -f 9 | tr -d '\"')\"\n    _info LE_WORKING_DIR \"$LE_WORKING_DIR\"\n    if _contains \"$cr\" \"--config-home\"; then\n      LE_CONFIG_HOME=\"$(echo \"$cr\" | cut -d ' ' -f 11 | tr -d '\"')\"\n      _debug LE_CONFIG_HOME \"$LE_CONFIG_HOME\"\n    fi\n  fi\n  _initpath\n\n}\n\n#domain  isECC  revokeReason\nrevoke() {\n  Le_Domain=\"$1\"\n  if [ -z \"$Le_Domain\" ]; then\n    _usage \"Usage: $PROJECT_ENTRY --revoke --domain <domain.tld> [--ecc]\"\n    return 1\n  fi\n\n  _isEcc=\"$2\"\n  _reason=\"$3\"\n  if [ -z \"$_reason\" ]; then\n    _reason=\"0\"\n  fi\n  _initpath \"$Le_Domain\" \"$_isEcc\"\n  if [ ! -f \"$DOMAIN_CONF\" ]; then\n    _err \"$Le_Domain is not an issued domain, skipping.\"\n    return 1\n  fi\n\n  if [ ! -f \"$CERT_PATH\" ]; then\n    _err \"Cert for $Le_Domain $CERT_PATH was not found, skipping.\"\n    return 1\n  fi\n\n  . \"$DOMAIN_CONF\"\n  _debug Le_API \"$Le_API\"\n\n  if [ \"$Le_API\" ]; then\n    if [ \"$Le_API\" != \"$ACME_DIRECTORY\" ]; then\n      _clearAPI\n    fi\n    export ACME_DIRECTORY=\"$Le_API\"\n    #reload ca configs\n    ACCOUNT_KEY_PATH=\"\"\n    ACCOUNT_JSON_PATH=\"\"\n    CA_CONF=\"\"\n    _debug3 \"initpath again.\"\n    _initpath \"$Le_Domain\" \"$_isEcc\"\n    _initAPI\n  fi\n\n  cert=\"$(_getfile \"${CERT_PATH}\" \"${BEGIN_CERT}\" \"${END_CERT}\" | tr -d \"\\r\\n\" | _url_replace)\"\n\n  if [ -z \"$cert\" ]; then\n    _err \"Cert for $Le_Domain is empty, skipping.\"\n    return 1\n  fi\n\n  _initAPI\n\n  data=\"{\\\"certificate\\\": \\\"$cert\\\",\\\"reason\\\":$_reason}\"\n\n  uri=\"${ACME_REVOKE_CERT}\"\n\n  _info \"Trying account key first.\"\n  if _send_signed_request \"$uri\" \"$data\" \"\" \"$ACCOUNT_KEY_PATH\"; then\n    if [ -z \"$response\" ]; then\n      _info \"Successfully revoked.\"\n      rm -f \"$CERT_PATH\"\n      cat \"$CERT_KEY_PATH\" >\"$CERT_KEY_PATH.revoked\"\n      cat \"$CSR_PATH\" >\"$CSR_PATH.revoked\"\n      return 0\n    else\n      _err \"Error revoking.\"\n      _debug \"$response\"\n    fi\n  fi\n\n  if [ -f \"$CERT_KEY_PATH\" ]; then\n    _info \"Trying domain key.\"\n    if _send_signed_request \"$uri\" \"$data\" \"\" \"$CERT_KEY_PATH\"; then\n      if [ -z \"$response\" ]; then\n        _info \"Successfully revoked.\"\n        rm -f \"$CERT_PATH\"\n        cat \"$CERT_KEY_PATH\" >\"$CERT_KEY_PATH.revoked\"\n        cat \"$CSR_PATH\" >\"$CSR_PATH.revoked\"\n        return 0\n      else\n        _err \"Error revoking using domain key.\"\n        _err \"$response\"\n      fi\n    fi\n  else\n    _info \"Domain key file doesn't exist.\"\n  fi\n  return 1\n}\n\n#domain  ecc\nremove() {\n  Le_Domain=\"$1\"\n  if [ -z \"$Le_Domain\" ]; then\n    _usage \"Usage: $PROJECT_ENTRY --remove --domain <domain.tld> [--ecc]\"\n    return 1\n  fi\n\n  _isEcc=\"$2\"\n\n  _initpath \"$Le_Domain\" \"$_isEcc\"\n  _removed_conf=\"$DOMAIN_CONF.removed\"\n  if [ ! -f \"$DOMAIN_CONF\" ]; then\n    if [ -f \"$_removed_conf\" ]; then\n      _err \"$Le_Domain has already been removed. You can remove the folder by yourself: $DOMAIN_PATH\"\n    else\n      _err \"$Le_Domain is not an issued domain, skipping.\"\n    fi\n    return 1\n  fi\n\n  if mv \"$DOMAIN_CONF\" \"$_removed_conf\"; then\n    _info \"$Le_Domain has been removed. The key and cert files are in $(__green $DOMAIN_PATH)\"\n    _info \"You can remove them by yourself.\"\n    return 0\n  else\n    _err \"Failed to remove $Le_Domain.\"\n    return 1\n  fi\n}\n\n#domain vtype\n_deactivate() {\n  _d_domain=\"$1\"\n  _d_type=\"$2\"\n  _initpath \"$_d_domain\" \"$_d_type\"\n\n  . \"$DOMAIN_CONF\"\n  _debug Le_API \"$Le_API\"\n\n  if [ \"$Le_API\" ]; then\n    if [ \"$Le_API\" != \"$ACME_DIRECTORY\" ]; then\n      _clearAPI\n    fi\n    export ACME_DIRECTORY=\"$Le_API\"\n    #reload ca configs\n    ACCOUNT_KEY_PATH=\"\"\n    ACCOUNT_JSON_PATH=\"\"\n    CA_CONF=\"\"\n    _debug3 \"initpath again.\"\n    _initpath \"$Le_Domain\" \"$_d_type\"\n    _initAPI\n  fi\n\n  _identifiers=\"{\\\"type\\\":\\\"$(_getIdType \"$_d_domain\")\\\",\\\"value\\\":\\\"$_d_domain\\\"}\"\n  if ! _send_signed_request \"$ACME_NEW_ORDER\" \"{\\\"identifiers\\\": [$_identifiers]}\"; then\n    _err \"Cannot get new order for domain.\"\n    return 1\n  fi\n  _authorizations_seg=\"$(echo \"$response\" | _egrep_o '\"authorizations\" *: *\\[[^\\]*\\]' | cut -d '[' -f 2 | tr -d ']' | tr -d '\"')\"\n  _debug2 _authorizations_seg \"$_authorizations_seg\"\n  if [ -z \"$_authorizations_seg\" ]; then\n    _err \"_authorizations_seg not found.\"\n    _clearup\n    _on_issue_err \"$_post_hook\"\n    return 1\n  fi\n\n  authzUri=\"$_authorizations_seg\"\n  _debug2 \"authzUri\" \"$authzUri\"\n  if ! _send_signed_request \"$authzUri\"; then\n    _err \"Error making GET request for authz.\"\n    _err \"_authorizations_seg\" \"$_authorizations_seg\"\n    _err \"authzUri\" \"$authzUri\"\n    _clearup\n    _on_issue_err \"$_post_hook\"\n    return 1\n  fi\n\n  response=\"$(echo \"$response\" | _normalizeJson)\"\n  _debug2 response \"$response\"\n  _URL_NAME=\"url\"\n\n  entries=\"$(echo \"$response\" | tr '][' '==' | _egrep_o \"challenges\\\": *=[^=]*=\" | tr '}{' '\\n\\n' | grep \"\\\"status\\\": *\\\"valid\\\"\")\"\n  if [ -z \"$entries\" ]; then\n    _info \"No valid entries found.\"\n    if [ -z \"$thumbprint\" ]; then\n      thumbprint=\"$(__calc_account_thumbprint)\"\n    fi\n    _debug \"Trigger validation.\"\n    vtype=\"$(_getIdType \"$_d_domain\")\"\n    entry=\"$(echo \"$response\" | _egrep_o '[^\\{]*\"type\":\"'$vtype'\"[^\\}]*')\"\n    _debug entry \"$entry\"\n    if [ -z \"$entry\" ]; then\n      _err \"$d: Cannot get domain token\"\n      return 1\n    fi\n    token=\"$(echo \"$entry\" | _egrep_o '\"token\":\"[^\"]*' | cut -d : -f 2 | tr -d '\"')\"\n    _debug token \"$token\"\n\n    uri=\"$(echo \"$entry\" | _egrep_o \"\\\"$_URL_NAME\\\":\\\"[^\\\"]*\" | cut -d : -f 2,3 | tr -d '\"')\"\n    _debug uri \"$uri\"\n\n    keyauthorization=\"$token.$thumbprint\"\n    _debug keyauthorization \"$keyauthorization\"\n    __trigger_validation \"$uri\" \"$keyauthorization\"\n\n  fi\n\n  _d_i=0\n  _d_max_retry=$(echo \"$entries\" | wc -l)\n  while [ \"$_d_i\" -lt \"$_d_max_retry\" ]; do\n    _info \"Deactivating $_d_domain\"\n    _d_i=\"$(_math $_d_i + 1)\"\n    entry=\"$(echo \"$entries\" | sed -n \"${_d_i}p\")\"\n    _debug entry \"$entry\"\n\n    if [ -z \"$entry\" ]; then\n      _info \"No more valid entries found.\"\n      break\n    fi\n\n    _vtype=\"$(echo \"$entry\" | _egrep_o '\"type\": *\"[^\"]*\"' | cut -d : -f 2 | tr -d '\"')\"\n    _debug _vtype \"$_vtype\"\n    _info \"Found $_vtype\"\n\n    uri=\"$(echo \"$entry\" | _egrep_o \"\\\"$_URL_NAME\\\":\\\"[^\\\"]*\\\"\" | tr -d '\" ' | cut -d : -f 2-)\"\n    _debug uri \"$uri\"\n\n    if [ \"$_d_type\" ] && [ \"$_d_type\" != \"$_vtype\" ]; then\n      _info \"Skipping $_vtype\"\n      continue\n    fi\n\n    _info \"Deactivating $_vtype\"\n\n    _djson=\"{\\\"status\\\":\\\"deactivated\\\"}\"\n\n    if _send_signed_request \"$authzUri\" \"$_djson\" && _contains \"$response\" '\"deactivated\"'; then\n      _info \"Successfully deactivated $_vtype.\"\n    else\n      _err \"Could not deactivate $_vtype.\"\n      break\n    fi\n\n  done\n  _debug \"$_d_i\"\n  if [ \"$_d_i\" -eq \"$_d_max_retry\" ]; then\n    _info \"Successfully deactivated!\"\n  else\n    _err \"Deactivation failed.\"\n  fi\n\n}\n\ndeactivate() {\n  _d_domain_list=\"$1\"\n  _d_type=\"$2\"\n  _initpath\n  _initAPI\n  _debug _d_domain_list \"$_d_domain_list\"\n  if [ -z \"$(echo $_d_domain_list | cut -d , -f 1)\" ]; then\n    _usage \"Usage: $PROJECT_ENTRY --deactivate --domain <domain.tld> [--domain <domain2.tld> ...]\"\n    return 1\n  fi\n  for _d_dm in $(echo \"$_d_domain_list\" | tr ',' ' '); do\n    if [ -z \"$_d_dm\" ] || [ \"$_d_dm\" = \"$NO_VALUE\" ]; then\n      continue\n    fi\n    if ! _deactivate \"$_d_dm\" \"$_d_type\"; then\n      return 1\n    fi\n  done\n}\n\n# Detect profile file if not specified as environment variable\n_detect_profile() {\n  if [ -n \"$PROFILE\" -a -f \"$PROFILE\" ]; then\n    echo \"$PROFILE\"\n    return\n  fi\n\n  DETECTED_PROFILE=''\n  SHELLTYPE=\"$(basename \"/$SHELL\")\"\n\n  if [ \"$SHELLTYPE\" = \"bash\" ]; then\n    if [ -f \"$HOME/.bashrc\" ]; then\n      DETECTED_PROFILE=\"$HOME/.bashrc\"\n    elif [ -f \"$HOME/.bash_profile\" ]; then\n      DETECTED_PROFILE=\"$HOME/.bash_profile\"\n    fi\n  elif [ \"$SHELLTYPE\" = \"zsh\" ]; then\n    DETECTED_PROFILE=\"$HOME/.zshrc\"\n  fi\n\n  if [ -z \"$DETECTED_PROFILE\" ]; then\n    if [ -f \"$HOME/.profile\" ]; then\n      DETECTED_PROFILE=\"$HOME/.profile\"\n    elif [ -f \"$HOME/.bashrc\" ]; then\n      DETECTED_PROFILE=\"$HOME/.bashrc\"\n    elif [ -f \"$HOME/.bash_profile\" ]; then\n      DETECTED_PROFILE=\"$HOME/.bash_profile\"\n    elif [ -f \"$HOME/.zshrc\" ]; then\n      DETECTED_PROFILE=\"$HOME/.zshrc\"\n    fi\n  fi\n\n  echo \"$DETECTED_PROFILE\"\n}\n\n_initconf() {\n  _initpath\n  if [ ! -f \"$ACCOUNT_CONF_PATH\" ]; then\n    echo \"\n\n#LOG_FILE=\\\"$DEFAULT_LOG_FILE\\\"\n#LOG_LEVEL=1\n\n#AUTO_UPGRADE=\\\"1\\\"\n\n#NO_TIMESTAMP=1\n\n    \" >\"$ACCOUNT_CONF_PATH\"\n  fi\n}\n\n# nocron\n_precheck() {\n  _nocron=\"$1\"\n\n  if ! _exists \"curl\" && ! _exists \"wget\"; then\n    _err \"Please install curl or wget first to enable access to HTTP resources.\"\n    return 1\n  fi\n\n  if [ -z \"$_nocron\" ]; then\n    if ! _exists \"crontab\" && ! _exists \"fcrontab\"; then\n      if _exists cygpath && _exists schtasks.exe; then\n        _info \"It seems you are on Windows, we will install the Windows scheduler task.\"\n      else\n        _err \"It is recommended to install crontab first. Try to install 'cron', 'crontab', 'crontabs' or 'vixie-cron'.\"\n        _err \"We need to set a cron job to renew the certs automatically.\"\n        _err \"Otherwise, your certs will not be able to be renewed automatically.\"\n        if [ -z \"$FORCE\" ]; then\n          _err \"Please add '--force' and try install again to go without crontab.\"\n          _err \"./$PROJECT_ENTRY --install --force\"\n          return 1\n        fi\n      fi\n    fi\n  fi\n\n  if ! _exists \"${ACME_OPENSSL_BIN:-openssl}\"; then\n    _err \"Please install openssl first. ACME_OPENSSL_BIN=$ACME_OPENSSL_BIN\"\n    _err \"We need openssl to generate keys.\"\n    return 1\n  fi\n\n  if ! _exists \"socat\"; then\n    _err \"It is recommended to install socat first.\"\n    _err \"We use socat for the standalone server, which is used for standalone mode.\"\n    _err \"If you don't want to use standalone mode, you may ignore this warning.\"\n  fi\n\n  return 0\n}\n\n_setShebang() {\n  _file=\"$1\"\n  _shebang=\"$2\"\n  if [ -z \"$_shebang\" ]; then\n    _usage \"Usage: file shebang\"\n    return 1\n  fi\n  cp \"$_file\" \"$_file.tmp\"\n  echo \"$_shebang\" >\"$_file\"\n  sed -n 2,99999p \"$_file.tmp\" >>\"$_file\"\n  rm -f \"$_file.tmp\"\n}\n\n#confighome\n_installalias() {\n  _c_home=\"$1\"\n  _initpath\n\n  _envfile=\"$LE_WORKING_DIR/$PROJECT_ENTRY.env\"\n  if [ \"$_upgrading\" ] && [ \"$_upgrading\" = \"1\" ]; then\n    echo \"$(cat \"$_envfile\")\" | sed \"s|^LE_WORKING_DIR.*$||\" >\"$_envfile\"\n    echo \"$(cat \"$_envfile\")\" | sed \"s|^alias le.*$||\" >\"$_envfile\"\n    echo \"$(cat \"$_envfile\")\" | sed \"s|^alias le.sh.*$||\" >\"$_envfile\"\n  fi\n\n  if [ \"$_c_home\" ]; then\n    _c_entry=\" --config-home '$_c_home'\"\n  fi\n\n  _setopt \"$_envfile\" \"export LE_WORKING_DIR\" \"=\" \"\\\"$LE_WORKING_DIR\\\"\"\n  if [ \"$_c_home\" ]; then\n    _setopt \"$_envfile\" \"export LE_CONFIG_HOME\" \"=\" \"\\\"$LE_CONFIG_HOME\\\"\"\n  else\n    _sed_i \"/^export LE_CONFIG_HOME/d\" \"$_envfile\"\n  fi\n  _setopt \"$_envfile\" \"alias $PROJECT_ENTRY\" \"=\" \"\\\"$LE_WORKING_DIR/$PROJECT_ENTRY$_c_entry\\\"\"\n\n  _profile=\"$(_detect_profile)\"\n  if [ \"$_profile\" ]; then\n    _debug \"Found profile: $_profile\"\n    _info \"Installing alias to '$_profile'\"\n    _setopt \"$_profile\" \". \\\"$_envfile\\\"\"\n    _info \"Close and reopen your terminal to start using $PROJECT_NAME\"\n  else\n    _info \"No profile has been found, you will need to change your working directory to $LE_WORKING_DIR to use $PROJECT_NAME\"\n  fi\n\n  #for csh\n  _cshfile=\"$LE_WORKING_DIR/$PROJECT_ENTRY.csh\"\n  _csh_profile=\"$HOME/.cshrc\"\n  if [ -f \"$_csh_profile\" ]; then\n    _info \"Installing alias to '$_csh_profile'\"\n    _setopt \"$_cshfile\" \"setenv LE_WORKING_DIR\" \" \" \"\\\"$LE_WORKING_DIR\\\"\"\n    if [ \"$_c_home\" ]; then\n      _setopt \"$_cshfile\" \"setenv LE_CONFIG_HOME\" \" \" \"\\\"$LE_CONFIG_HOME\\\"\"\n    else\n      _sed_i \"/^setenv LE_CONFIG_HOME/d\" \"$_cshfile\"\n    fi\n    _setopt \"$_cshfile\" \"alias $PROJECT_ENTRY\" \" \" \"\\\"$LE_WORKING_DIR/$PROJECT_ENTRY$_c_entry\\\"\"\n    _setopt \"$_csh_profile\" \"source \\\"$_cshfile\\\"\"\n  fi\n\n  #for tcsh\n  _tcsh_profile=\"$HOME/.tcshrc\"\n  if [ -f \"$_tcsh_profile\" ]; then\n    _info \"Installing alias to '$_tcsh_profile'\"\n    _setopt \"$_cshfile\" \"setenv LE_WORKING_DIR\" \" \" \"\\\"$LE_WORKING_DIR\\\"\"\n    if [ \"$_c_home\" ]; then\n      _setopt \"$_cshfile\" \"setenv LE_CONFIG_HOME\" \" \" \"\\\"$LE_CONFIG_HOME\\\"\"\n    fi\n    _setopt \"$_cshfile\" \"alias $PROJECT_ENTRY\" \" \" \"\\\"$LE_WORKING_DIR/$PROJECT_ENTRY$_c_entry\\\"\"\n    _setopt \"$_tcsh_profile\" \"source \\\"$_cshfile\\\"\"\n  fi\n\n}\n\n# nocron confighome noprofile accountemail\ninstall() {\n\n  if [ -z \"$LE_WORKING_DIR\" ]; then\n    LE_WORKING_DIR=\"$DEFAULT_INSTALL_HOME\"\n  fi\n\n  _nocron=\"$1\"\n  _c_home=\"$2\"\n  _noprofile=\"$3\"\n  _accountemail=\"$4\"\n\n  if ! _initpath; then\n    _err \"Install failed.\"\n    return 1\n  fi\n  if [ \"$_nocron\" ]; then\n    _debug \"Skipping cron job installation\"\n  fi\n\n  if [ \"$_ACME_IN_CRON\" != \"1\" ]; then\n    if ! _precheck \"$_nocron\"; then\n      _err \"Pre-check failed, cannot install.\"\n      return 1\n    fi\n  fi\n\n  if [ -z \"$_c_home\" ] && [ \"$LE_CONFIG_HOME\" != \"$LE_WORKING_DIR\" ]; then\n    _info \"Using config home: $LE_CONFIG_HOME\"\n    _c_home=\"$LE_CONFIG_HOME\"\n  fi\n\n  #convert from le\n  if [ -d \"$HOME/.le\" ]; then\n    for envfile in \"le.env\" \"le.sh.env\"; do\n      if [ -f \"$HOME/.le/$envfile\" ]; then\n        if grep \"le.sh\" \"$HOME/.le/$envfile\" >/dev/null; then\n          _upgrading=\"1\"\n          _info \"You are upgrading from le.sh\"\n          _info \"Renaming \\\"$HOME/.le\\\" to $LE_WORKING_DIR\"\n          mv \"$HOME/.le\" \"$LE_WORKING_DIR\"\n          mv \"$LE_WORKING_DIR/$envfile\" \"$LE_WORKING_DIR/$PROJECT_ENTRY.env\"\n          break\n        fi\n      fi\n    done\n  fi\n\n  _info \"Installing to $LE_WORKING_DIR\"\n\n  if [ ! -d \"$LE_WORKING_DIR\" ]; then\n    if ! mkdir -p \"$LE_WORKING_DIR\"; then\n      _err \"Cannot create working dir: $LE_WORKING_DIR\"\n      return 1\n    fi\n\n    chmod 700 \"$LE_WORKING_DIR\"\n  fi\n\n  if [ ! -d \"$LE_CONFIG_HOME\" ]; then\n    if ! mkdir -p \"$LE_CONFIG_HOME\"; then\n      _err \"Cannot create config dir: $LE_CONFIG_HOME\"\n      return 1\n    fi\n\n    chmod 700 \"$LE_CONFIG_HOME\"\n  fi\n\n  cp \"$PROJECT_ENTRY\" \"$LE_WORKING_DIR/\" && chmod +x \"$LE_WORKING_DIR/$PROJECT_ENTRY\"\n\n  if [ \"$?\" != \"0\" ]; then\n    _err \"Installation failed, cannot copy $PROJECT_ENTRY\"\n    return 1\n  fi\n\n  _info \"Installed to $LE_WORKING_DIR/$PROJECT_ENTRY\"\n\n  if [ \"$_ACME_IN_CRON\" != \"1\" ] && [ -z \"$_noprofile\" ]; then\n    _installalias \"$_c_home\"\n  fi\n\n  for subf in $_SUB_FOLDERS; do\n    if [ -d \"$subf\" ]; then\n      mkdir -p \"$LE_WORKING_DIR/$subf\"\n      cp \"$subf\"/* \"$LE_WORKING_DIR\"/\"$subf\"/\n    fi\n  done\n\n  if [ ! -f \"$ACCOUNT_CONF_PATH\" ]; then\n    _initconf\n  fi\n\n  if [ \"$_DEFAULT_ACCOUNT_CONF_PATH\" != \"$ACCOUNT_CONF_PATH\" ]; then\n    _setopt \"$_DEFAULT_ACCOUNT_CONF_PATH\" \"ACCOUNT_CONF_PATH\" \"=\" \"\\\"$ACCOUNT_CONF_PATH\\\"\"\n  fi\n\n  if [ \"$_DEFAULT_CERT_HOME\" != \"$CERT_HOME\" ]; then\n    _saveaccountconf \"CERT_HOME\" \"$CERT_HOME\"\n  fi\n\n  if [ \"$_DEFAULT_ACCOUNT_KEY_PATH\" != \"$ACCOUNT_KEY_PATH\" ]; then\n    _saveaccountconf \"ACCOUNT_KEY_PATH\" \"$ACCOUNT_KEY_PATH\"\n  fi\n\n  if [ -z \"$_nocron\" ]; then\n    installcronjob \"$_c_home\"\n  fi\n\n  if [ -z \"$NO_DETECT_SH\" ]; then\n    #Modify shebang\n    if _exists bash; then\n      _bash_path=\"$(bash -c \"command -v bash 2>/dev/null\")\"\n      if [ -z \"$_bash_path\" ]; then\n        _bash_path=\"$(bash -c 'echo $SHELL')\"\n      fi\n    fi\n    if [ \"$_bash_path\" ]; then\n      _info \"bash has been found. Changing the shebang to use bash as preferred.\"\n      _shebang='#!'\"$_bash_path\"\n      _setShebang \"$LE_WORKING_DIR/$PROJECT_ENTRY\" \"$_shebang\"\n      for subf in $_SUB_FOLDERS; do\n        if [ -d \"$LE_WORKING_DIR/$subf\" ]; then\n          for _apifile in \"$LE_WORKING_DIR/$subf/\"*.sh; do\n            _setShebang \"$_apifile\" \"$_shebang\"\n          done\n        fi\n      done\n    fi\n  fi\n\n  if [ \"$_accountemail\" ]; then\n    _saveaccountconf \"ACCOUNT_EMAIL\" \"$_accountemail\"\n  fi\n  _saveaccountconf \"UPGRADE_HASH\" \"$(_getUpgradeHash)\"\n  _info OK\n}\n\n# nocron\nuninstall() {\n  _nocron=\"$1\"\n  if [ -z \"$_nocron\" ]; then\n    uninstallcronjob\n  fi\n  _initpath\n\n  _uninstallalias\n\n  rm -f \"$LE_WORKING_DIR/$PROJECT_ENTRY\"\n  _info \"The keys and certs are in \\\"$(__green \"$LE_CONFIG_HOME\")\\\". You can remove them by yourself.\"\n\n}\n\n_uninstallalias() {\n  _initpath\n\n  _profile=\"$(_detect_profile)\"\n  if [ \"$_profile\" ]; then\n    _info \"Uninstalling alias from: '$_profile'\"\n    text=\"$(cat \"$_profile\")\"\n    echo \"$text\" | sed \"s|^.*\\\"$LE_WORKING_DIR/$PROJECT_NAME.env\\\"$||\" >\"$_profile\"\n  fi\n\n  _csh_profile=\"$HOME/.cshrc\"\n  if [ -f \"$_csh_profile\" ]; then\n    _info \"Uninstalling alias from: '$_csh_profile'\"\n    text=\"$(cat \"$_csh_profile\")\"\n    echo \"$text\" | sed \"s|^.*\\\"$LE_WORKING_DIR/$PROJECT_NAME.csh\\\"$||\" >\"$_csh_profile\"\n  fi\n\n  _tcsh_profile=\"$HOME/.tcshrc\"\n  if [ -f \"$_tcsh_profile\" ]; then\n    _info \"Uninstalling alias from: '$_csh_profile'\"\n    text=\"$(cat \"$_tcsh_profile\")\"\n    echo \"$text\" | sed \"s|^.*\\\"$LE_WORKING_DIR/$PROJECT_NAME.csh\\\"$||\" >\"$_tcsh_profile\"\n  fi\n\n}\n\ncron() {\n  export _ACME_IN_CRON=1\n  _initpath\n  _info \"$(__green \"===Starting cron===\")\"\n  if [ \"$AUTO_UPGRADE\" = \"1\" ]; then\n    export LE_WORKING_DIR\n    (\n      if ! upgrade; then\n        _err \"Cron: Upgrade failed!\"\n        return 1\n      fi\n    )\n    . \"$LE_WORKING_DIR/$PROJECT_ENTRY\" >/dev/null\n\n    if [ -t 1 ]; then\n      __INTERACTIVE=\"1\"\n    fi\n\n    _info \"Automatically upgraded to: $VER\"\n  fi\n  renewAll\n  _ret=\"$?\"\n  _ACME_IN_CRON=\"\"\n  _info \"$(__green \"===End cron===\")\"\n  exit $_ret\n}\n\nversion() {\n  echo \"$PROJECT\"\n  echo \"v$VER\"\n}\n\n# subject content hooks code\n_send_notify() {\n  _nsubject=\"$1\"\n  _ncontent=\"$2\"\n  _nhooks=\"$3\"\n  _nerror=\"$4\"\n\n  if [ \"$NOTIFY_LEVEL\" = \"$NOTIFY_LEVEL_DISABLE\" ]; then\n    _debug \"The NOTIFY_LEVEL is $NOTIFY_LEVEL, which means it's disabled, so will just return.\"\n    return 0\n  fi\n\n  if [ -z \"$_nhooks\" ]; then\n    _debug \"The NOTIFY_HOOK is empty, will just return.\"\n    return 0\n  fi\n\n  _nsource=\"$NOTIFY_SOURCE\"\n  if [ -z \"$_nsource\" ]; then\n    _nsource=\"$(hostname)\"\n  fi\n\n  _nsubject=\"$_nsubject by $_nsource\"\n\n  _send_err=0\n  for _n_hook in $(echo \"$_nhooks\" | tr ',' \" \"); do\n    _n_hook_file=\"$(_findHook \"\" $_SUB_FOLDER_NOTIFY \"$_n_hook\")\"\n    _info \"Sending via: $_n_hook\"\n    _debug \"Found $_n_hook_file for $_n_hook\"\n    if [ -z \"$_n_hook_file\" ]; then\n      _err \"Cannot find the hook file for $_n_hook\"\n      continue\n    fi\n    if ! (\n      if ! . \"$_n_hook_file\"; then\n        _err \"Error loading file $_n_hook_file. Please check your API file and try again.\"\n        return 1\n      fi\n\n      d_command=\"${_n_hook}_send\"\n      if ! _exists \"$d_command\"; then\n        _err \"It seems that your API file is not correct. Make sure it has a function named: $d_command\"\n        return 1\n      fi\n\n      if ! $d_command \"$_nsubject\" \"$_ncontent\" \"$_nerror\"; then\n        _err \"Error sending message using $d_command\"\n        return 1\n      fi\n\n      return 0\n    ); then\n      _err \"Error setting $_n_hook_file.\"\n      _send_err=1\n    else\n      _info \"$_n_hook $(__green Success)\"\n    fi\n  done\n  return $_send_err\n\n}\n\n# hook\n_set_notify_hook() {\n  _nhooks=\"$1\"\n\n  _test_subject=\"Hello, this is a notification from $PROJECT_NAME\"\n  _test_content=\"If you receive this message, your notification works.\"\n\n  _send_notify \"$_test_subject\" \"$_test_content\" \"$_nhooks\" 0\n\n}\n\n#[hook] [level] [mode]\nsetnotify() {\n  _nhook=\"$1\"\n  _nlevel=\"$2\"\n  _nmode=\"$3\"\n  _nsource=\"$4\"\n\n  _initpath\n\n  if [ -z \"$_nhook$_nlevel$_nmode$_nsource\" ]; then\n    _usage \"Usage: $PROJECT_ENTRY --set-notify [--notify-hook <hookname>] [--notify-level <0|1|2|3>] [--notify-mode <0|1>] [--notify-source <hostname>]\"\n    _usage \"$_NOTIFY_WIKI\"\n    return 1\n  fi\n\n  if [ \"$_nlevel\" ]; then\n    _info \"Set notify level to: $_nlevel\"\n    export \"NOTIFY_LEVEL=$_nlevel\"\n    _saveaccountconf \"NOTIFY_LEVEL\" \"$NOTIFY_LEVEL\"\n  fi\n\n  if [ \"$_nmode\" ]; then\n    _info \"Set notify mode to: $_nmode\"\n    export \"NOTIFY_MODE=$_nmode\"\n    _saveaccountconf \"NOTIFY_MODE\" \"$NOTIFY_MODE\"\n  fi\n\n  if [ \"$_nsource\" ]; then\n    _info \"Set notify source to: $_nsource\"\n    export \"NOTIFY_SOURCE=$_nsource\"\n    _saveaccountconf \"NOTIFY_SOURCE\" \"$NOTIFY_SOURCE\"\n  fi\n\n  if [ \"$_nhook\" ]; then\n    _info \"Set notify hook to: $_nhook\"\n    if [ \"$_nhook\" = \"$NO_VALUE\" ]; then\n      _info \"Clearing notify hook\"\n      _clearaccountconf \"NOTIFY_HOOK\"\n    else\n      if _set_notify_hook \"$_nhook\"; then\n        export NOTIFY_HOOK=\"$_nhook\"\n        _saveaccountconf \"NOTIFY_HOOK\" \"$NOTIFY_HOOK\"\n        return 0\n      else\n        _err \"Cannot set notify hook to: $_nhook\"\n        return 1\n      fi\n    fi\n  fi\n\n}\n\nshowhelp() {\n  _initpath\n  version\n  echo \"Usage: $PROJECT_ENTRY <command> ... [parameters ...]\nCommands:\n  -h, --help               Show this help message.\n  -v, --version            Show version info.\n  --install                Install $PROJECT_NAME to your system.\n  --uninstall              Uninstall $PROJECT_NAME, and uninstall the cron job.\n  --upgrade                Upgrade $PROJECT_NAME to the latest code from $PROJECT.\n  --issue                  Issue a cert.\n  --deploy                 Deploy the cert to your server.\n  -i, --install-cert       Install the issued cert to Apache/nginx or any other server.\n  -r, --renew              Renew a cert.\n  --renew-all              Renew all the certs.\n  --revoke                 Revoke a cert.\n  --remove                 Remove the cert from list of certs known to $PROJECT_NAME.\n  --list                   List all the certs.\n  --info                   Show the $PROJECT_NAME configs, or the configs for a domain with [-d domain] parameter.\n  --to-pkcs12              Export the certificate and key to a pfx file.\n  --to-pkcs8               Convert to pkcs8 format.\n  --sign-csr               Issue a cert from an existing csr.\n  --show-csr               Show the content of a csr.\n  -ccr, --create-csr       Create CSR, professional use.\n  --create-domain-key      Create an domain private key, professional use.\n  --update-account         Update account info.\n  --register-account       Register account key.\n  --deactivate-account     Deactivate the account.\n  --create-account-key     Create an account private key, professional use.\n  --install-cronjob        Install the cron job to renew certs, you don't need to call this. The 'install' command can automatically install the cron job.\n  --uninstall-cronjob      Uninstall the cron job. The 'uninstall' command can do this automatically.\n  --cron                   Run cron job to renew all the certs.\n  --set-notify             Set the cron notification hook, level or mode.\n  --deactivate             Deactivate the domain authz, professional use.\n  --set-default-ca         Used with '--server', Set the default CA to use.\n                           See: $_SERVER_WIKI\n  --set-default-chain      Set the default preferred chain for a CA.\n                           See: $_PREFERRED_CHAIN_WIKI\n\n\nParameters:\n  -d, --domain <domain.tld>         Specifies a domain, used to issue, renew or revoke etc.\n  --challenge-alias <domain.tld>    The challenge domain alias for DNS alias mode.\n                                      See: $_DNS_ALIAS_WIKI\n\n  --domain-alias <domain.tld>       The domain alias for DNS alias mode.\n                                      See: $_DNS_ALIAS_WIKI\n\n  --preferred-chain <chain>         If the CA offers multiple certificate chains, prefer the chain with an issuer matching this Subject Common Name.\n                                      If no match, the default offered chain will be used. (default: empty)\n                                      See: $_PREFERRED_CHAIN_WIKI\n\n  --valid-to    <date-time>         Request the NotAfter field of the cert.\n                                      See: $_VALIDITY_WIKI\n  --valid-from  <date-time>         Request the NotBefore field of the cert.\n                                      See: $_VALIDITY_WIKI\n\n  -f, --force                       Force install, force cert renewal or override sudo restrictions.\n  --staging, --test                 Use staging server, for testing.\n  --debug [0|1|2|3]                 Output debug info. Defaults to $DEBUG_LEVEL_DEFAULT if argument is omitted.\n  --output-insecure                 Output all the sensitive messages.\n                                      By default all the credentials/sensitive messages are hidden from the output/debug/log for security.\n  -w, --webroot <directory>         Specifies the web root folder for web root mode.\n  --standalone                      Use standalone mode.\n  --alpn                            Use standalone alpn mode.\n  --stateless                       Use stateless mode.\n                                      See: $_STATELESS_WIKI\n\n  --apache                          Use Apache mode.\n  --dns [dns_hook]                  Use dns manual mode or dns api. Defaults to manual mode when argument is omitted.\n                                      See: $_DNS_API_WIKI\n\n  --dnssleep <seconds>              The time in seconds to wait for all the txt records to propagate in dns api mode.\n                                      It's not necessary to use this by default, $PROJECT_NAME polls dns status by DOH automatically.\n  -k, --keylength <bits>            Specifies the domain key length: 2048, 3072, 4096, 8192 or ec-256, ec-384, ec-521.\n  -ak, --accountkeylength <bits>    Specifies the account key length: 2048, 3072, 4096\n  --log [file]                      Specifies the log file. Defaults to \\\"$DEFAULT_LOG_FILE\\\" if argument is omitted.\n  --log-level <1|2>                 Specifies the log level, default is $DEFAULT_LOG_LEVEL.\n  --syslog <0|3|6|7>                Syslog level, 0: disable syslog, 3: error, 6: info, 7: debug.\n  --eab-kid <eab_key_id>            Key Identifier for External Account Binding.\n  --eab-hmac-key <eab_hmac_key>     HMAC key for External Account Binding.\n\n\n  These parameters are to install the cert to nginx/Apache or any other server after issue/renew a cert:\n\n  --cert-file <file>                Path to copy the cert file to after issue/renew.\n  --key-file <file>                 Path to copy the key file to after issue/renew.\n  --ca-file <file>                  Path to copy the intermediate cert file to after issue/renew.\n  --fullchain-file <file>           Path to copy the fullchain cert file to after issue/renew.\n  --reloadcmd <command>             Command to execute after issue/renew to reload the server.\n\n  --server <server_uri>             ACME Directory Resource URI. (default: $DEFAULT_CA)\n                                      See: $_SERVER_WIKI\n\n  --accountconf <file>              Specifies a customized account config file.\n  --home <directory>                Specifies the home dir for $PROJECT_NAME.\n  --cert-home <directory>           Specifies the home dir to save all the certs, only valid for '--install' command.\n  --config-home <directory>         Specifies the home dir to save all the configurations.\n  --useragent <string>              Specifies the user agent string. it will be saved for future use too.\n  -m, --email <email>               Specifies the account email, only valid for the '--install' and '--update-account' command.\n  --accountkey <file>               Specifies the account key path, only valid for the '--install' command.\n  --days <ndays>                    Specifies the days to renew the cert when using '--issue' command. The default value is $DEFAULT_RENEW days.\n  --httpport <port>                 Specifies the standalone listening port. Only valid if the server is behind a reverse proxy or load balancer.\n  --tlsport <port>                  Specifies the standalone tls listening port. Only valid if the server is behind a reverse proxy or load balancer.\n  --local-address <ip>              Specifies the standalone/tls server listening address, in case you have multiple ip addresses.\n  --listraw                         Only used for '--list' command, list the certs in raw format.\n  -se, --stop-renew-on-error        Only valid for '--renew-all' command. Stop if one cert has error in renewal.\n  --insecure                        Do not check the server certificate, in some devices, the api server's certificate may not be trusted.\n  --ca-bundle <file>                Specifies the path to the CA certificate bundle to verify api server's certificate.\n  --ca-path <directory>             Specifies directory containing CA certificates in PEM format, used by wget or curl.\n  --no-cron                         Only valid for '--install' command, which means: do not install the default cron job.\n                                      In this case, the certs will not be renewed automatically.\n  --no-profile                      Only valid for '--install' command, which means: do not install aliases to user profile.\n  --no-color                        Do not output color text.\n  --force-color                     Force output of color text. Useful for non-interactive use with the aha tool for HTML E-Mails.\n  --ecc                             Specifies use of the ECC cert. Only valid for '--install-cert', '--renew', '--remove ', '--revoke',\n                                      '--deploy', '--to-pkcs8', '--to-pkcs12' and '--create-csr'.\n  --csr <file>                      Specifies the input csr.\n  --pre-hook <command>              Command to be run before obtaining any certificates.\n  --post-hook <command>             Command to be run after attempting to obtain/renew certificates. Runs regardless of whether obtain/renew succeeded or failed.\n  --renew-hook <command>            Command to be run after each successfully renewed certificate.\n  --deploy-hook <hookname>          The hook file to deploy cert\n  --extended-key-usage <string>     Manually define the CSR extended key usage value. The default is serverAuth,clientAuth.\n  --ocsp, --ocsp-must-staple        Generate OCSP-Must-Staple extension.\n  --always-force-new-domain-key     Generate new domain key on renewal. Otherwise, the domain key is not changed by default.\n  --auto-upgrade [0|1]              Valid for '--upgrade' command, indicating whether to upgrade automatically in future. Defaults to 1 if argument is omitted.\n  --listen-v4                       Force standalone/tls server to listen at ipv4.\n  --listen-v6                       Force standalone/tls server to listen at ipv6.\n  --openssl-bin <file>              Specifies a custom openssl bin location.\n  --use-wget                        Force to use wget, if you have both curl and wget installed.\n  --yes-I-know-dns-manual-mode-enough-go-ahead-please  Force use of dns manual mode.\n                                      See:  $_DNS_MANUAL_WIKI\n\n  -b, --branch <branch>             Only valid for '--upgrade' command, specifies the branch name to upgrade to.\n  --notify-level <0|1|2|3>          Set the notification level:  Default value is $NOTIFY_LEVEL_DEFAULT.\n                                      0: disabled, no notification will be sent.\n                                      1: send notifications only when there is an error.\n                                      2: send notifications when a cert is successfully renewed, or there is an error.\n                                      3: send notifications when a cert is skipped, renewed, or error.\n  --notify-mode <0|1>               Set notification mode. Default value is $NOTIFY_MODE_DEFAULT.\n                                      0: Bulk mode. Send all the domain's notifications in one message(mail).\n                                      1: Cert mode. Send a message for every single cert.\n  --notify-hook <hookname>          Set the notify hook\n  --notify-source <server name>     Set the server name in the notification message\n  --revoke-reason <0-10>            The reason for revocation, can be used in conjunction with the '--revoke' command.\n                                      See: $_REVOKE_WIKI\n\n  --password <password>             Add a password to exported pfx file. Use with --to-pkcs12.\n\n\n\"\n}\n\ninstallOnline() {\n  _info \"Installing from online archive.\"\n\n  _branch=\"$BRANCH\"\n  if [ -z \"$_branch\" ]; then\n    _branch=\"master\"\n  fi\n\n  target=\"$PROJECT/archive/$_branch.tar.gz\"\n  _info \"Downloading $target\"\n  localname=\"$_branch.tar.gz\"\n  if ! _get \"$target\" >$localname; then\n    _err \"Download error.\"\n    return 1\n  fi\n  (\n    _info \"Extracting $localname\"\n    if ! (tar xzf $localname || gtar xzf $localname); then\n      _err \"Extraction error.\"\n      exit 1\n    fi\n\n    cd \"$PROJECT_NAME-$_branch\"\n    chmod +x $PROJECT_ENTRY\n    if ./$PROJECT_ENTRY --install \"$@\"; then\n      _info \"Install success!\"\n    fi\n\n    cd ..\n\n    rm -rf \"$PROJECT_NAME-$_branch\"\n    rm -f \"$localname\"\n  )\n}\n\n_getRepoHash() {\n  _hash_path=$1\n  shift\n  _hash_url=\"${PROJECT_API:-https://api.github.com/repos/acmesh-official}/$PROJECT_NAME/git/refs/$_hash_path\"\n  _get \"$_hash_url\" \"\" 30 | tr -d \"\\r\\n\" | tr '{},' '\\n\\n\\n' | grep '\"sha\":' | cut -d '\"' -f 4\n}\n\n_getUpgradeHash() {\n  _b=\"$BRANCH\"\n  if [ -z \"$_b\" ]; then\n    _b=\"master\"\n  fi\n  _hash=$(_getRepoHash \"heads/$_b\")\n  if [ -z \"$_hash\" ]; then _hash=$(_getRepoHash \"tags/$_b\"); fi\n  echo $_hash\n}\n\nupgrade() {\n  if (\n    _initpath\n    [ -z \"$FORCE\" ] && [ \"$(_getUpgradeHash)\" = \"$(_readaccountconf \"UPGRADE_HASH\")\" ] && _info \"Already up to date!\" && exit 0\n    export LE_WORKING_DIR\n    cd \"$LE_WORKING_DIR\"\n    installOnline \"--nocron\" \"--noprofile\"\n  ); then\n    _info \"Upgrade successful!\"\n    exit 0\n  else\n    _err \"Upgrade failed!\"\n    exit 1\n  fi\n}\n\n_processAccountConf() {\n  if [ \"$_useragent\" ]; then\n    _saveaccountconf \"USER_AGENT\" \"$_useragent\"\n  elif [ \"$USER_AGENT\" ] && [ \"$USER_AGENT\" != \"$DEFAULT_USER_AGENT\" ]; then\n    _saveaccountconf \"USER_AGENT\" \"$USER_AGENT\"\n  fi\n\n  if [ \"$_openssl_bin\" ]; then\n    _saveaccountconf \"ACME_OPENSSL_BIN\" \"$_openssl_bin\"\n  elif [ \"$ACME_OPENSSL_BIN\" ] && [ \"$ACME_OPENSSL_BIN\" != \"$DEFAULT_OPENSSL_BIN\" ]; then\n    _saveaccountconf \"ACME_OPENSSL_BIN\" \"$ACME_OPENSSL_BIN\"\n  fi\n\n  if [ \"$_auto_upgrade\" ]; then\n    _saveaccountconf \"AUTO_UPGRADE\" \"$_auto_upgrade\"\n  elif [ \"$AUTO_UPGRADE\" ]; then\n    _saveaccountconf \"AUTO_UPGRADE\" \"$AUTO_UPGRADE\"\n  fi\n\n  if [ \"$_use_wget\" ]; then\n    _saveaccountconf \"ACME_USE_WGET\" \"$_use_wget\"\n  elif [ \"$ACME_USE_WGET\" ]; then\n    _saveaccountconf \"ACME_USE_WGET\" \"$ACME_USE_WGET\"\n  fi\n\n}\n\n_checkSudo() {\n  if [ -z \"$__INTERACTIVE\" ]; then\n    #don't check if it's not in an interactive shell\n    return 0\n  fi\n  if [ \"$SUDO_GID\" ] && [ \"$SUDO_COMMAND\" ] && [ \"$SUDO_USER\" ] && [ \"$SUDO_UID\" ]; then\n    if [ \"$SUDO_USER\" = \"root\" ] && [ \"$SUDO_UID\" = \"0\" ]; then\n      #it's root using sudo, no matter it's using sudo or not, just fine\n      return 0\n    fi\n    if [ -n \"$SUDO_COMMAND\" ]; then\n      #it's a normal user doing \"sudo su\", or `sudo -i` or `sudo -s`, or `sudo su acmeuser1`\n      _endswith \"$SUDO_COMMAND\" /bin/su || _contains \"$SUDO_COMMAND\" \"/bin/su \" || grep \"^$SUDO_COMMAND\\$\" /etc/shells >/dev/null 2>&1\n      return $?\n    fi\n    #otherwise\n    return 1\n  fi\n  return 0\n}\n\n#server  #keylength\n_selectServer() {\n  _server=\"$1\"\n  _skeylength=\"$2\"\n  _server_lower=\"$(echo \"$_server\" | _lower_case)\"\n  _sindex=0\n  for snames in $CA_NAMES; do\n    snames=\"$(echo \"$snames\" | _lower_case)\"\n    _sindex=\"$(_math $_sindex + 1)\"\n    _debug2 \"_selectServer try snames\" \"$snames\"\n    for sname in $(echo \"$snames\" | tr ',' ' '); do\n      if [ \"$_server_lower\" = \"$sname\" ]; then\n        _debug2 \"_selectServer match $sname\"\n        _serverdir=\"$(_getfield \"$CA_SERVERS\" $_sindex)\"\n        if [ \"$_serverdir\" = \"$CA_SSLCOM_RSA\" ] && _isEccKey \"$_skeylength\"; then\n          _serverdir=\"$CA_SSLCOM_ECC\"\n        fi\n        _debug \"Selected server: $_serverdir\"\n        ACME_DIRECTORY=\"$_serverdir\"\n        export ACME_DIRECTORY\n        return\n      fi\n    done\n  done\n  ACME_DIRECTORY=\"$_server\"\n  export ACME_DIRECTORY\n}\n\n#url\n_getCAShortName() {\n  caurl=\"$1\"\n  if [ -z \"$caurl\" ]; then\n    #use letsencrypt as default value if the Le_API is empty\n    #this case can only come from the old upgrading.\n    caurl=\"$CA_LETSENCRYPT_V2\"\n  fi\n  if [ \"$CA_SSLCOM_ECC\" = \"$caurl\" ]; then\n    caurl=\"$CA_SSLCOM_RSA\" #just hack to get the short name\n  fi\n  caurl_lower=\"$(echo $caurl | _lower_case)\"\n  _sindex=0\n  for surl in $(echo \"$CA_SERVERS\" | _lower_case | tr , ' '); do\n    _sindex=\"$(_math $_sindex + 1)\"\n    if [ \"$caurl_lower\" = \"$surl\" ]; then\n      _nindex=0\n      for snames in $CA_NAMES; do\n        _nindex=\"$(_math $_nindex + 1)\"\n        if [ $_nindex -ge $_sindex ]; then\n          _getfield \"$snames\" 1\n          return\n        fi\n      done\n    fi\n  done\n  echo \"$caurl\"\n}\n\n#set default ca to $ACME_DIRECTORY\nsetdefaultca() {\n  if [ -z \"$ACME_DIRECTORY\" ]; then\n    _err \"Please provide a --server parameter.\"\n    return 1\n  fi\n  _saveaccountconf \"DEFAULT_ACME_SERVER\" \"$ACME_DIRECTORY\"\n  _info \"Changed default CA to: $(__green \"$ACME_DIRECTORY\")\"\n}\n\n#preferred-chain\nsetdefaultchain() {\n  _initpath\n  _preferred_chain=\"$1\"\n  if [ -z \"$_preferred_chain\" ]; then\n    _err \"Please provide a value for '--preferred-chain'.\"\n    return 1\n  fi\n  mkdir -p \"$CA_DIR\"\n  _savecaconf \"DEFAULT_PREFERRED_CHAIN\" \"$_preferred_chain\"\n}\n\n#domain ecc\ninfo() {\n  _domain=\"$1\"\n  _ecc=\"$2\"\n  _initpath\n  if [ -z \"$_domain\" ]; then\n    _debug \"Show global configs\"\n    echo \"LE_WORKING_DIR=$LE_WORKING_DIR\"\n    echo \"LE_CONFIG_HOME=$LE_CONFIG_HOME\"\n    cat \"$ACCOUNT_CONF_PATH\"\n  else\n    _debug \"Show domain configs\"\n    (\n      _initpath \"$_domain\" \"$_ecc\"\n      echo \"DOMAIN_CONF=$DOMAIN_CONF\"\n      for seg in $(cat $DOMAIN_CONF | cut -d = -f 1); do\n        echo \"$seg=$(_readdomainconf \"$seg\")\"\n      done\n    )\n  fi\n}\n\n_process() {\n  _CMD=\"\"\n  _domain=\"\"\n  _altdomains=\"$NO_VALUE\"\n  _webroot=\"\"\n  _challenge_alias=\"\"\n  _keylength=\"$DEFAULT_DOMAIN_KEY_LENGTH\"\n  _accountkeylength=\"$DEFAULT_ACCOUNT_KEY_LENGTH\"\n  _cert_file=\"\"\n  _key_file=\"\"\n  _ca_file=\"\"\n  _fullchain_file=\"\"\n  _reloadcmd=\"\"\n  _password=\"\"\n  _accountconf=\"\"\n  _useragent=\"\"\n  _accountemail=\"\"\n  _accountkey=\"\"\n  _certhome=\"\"\n  _confighome=\"\"\n  _httpport=\"\"\n  _tlsport=\"\"\n  _dnssleep=\"\"\n  _listraw=\"\"\n  _stopRenewOnError=\"\"\n  #_insecure=\"\"\n  _ca_bundle=\"\"\n  _ca_path=\"\"\n  _nocron=\"\"\n  _noprofile=\"\"\n  _ecc=\"\"\n  _csr=\"\"\n  _pre_hook=\"\"\n  _post_hook=\"\"\n  _renew_hook=\"\"\n  _deploy_hook=\"\"\n  _logfile=\"\"\n  _log=\"\"\n  _local_address=\"\"\n  _log_level=\"\"\n  _auto_upgrade=\"\"\n  _listen_v4=\"\"\n  _listen_v6=\"\"\n  _openssl_bin=\"\"\n  _syslog=\"\"\n  _use_wget=\"\"\n  _server=\"\"\n  _notify_hook=\"\"\n  _notify_level=\"\"\n  _notify_mode=\"\"\n  _notify_source=\"\"\n  _revoke_reason=\"\"\n  _eab_kid=\"\"\n  _eab_hmac_key=\"\"\n  _preferred_chain=\"\"\n  _valid_from=\"\"\n  _valid_to=\"\"\n  while [ ${#} -gt 0 ]; do\n    case \"${1}\" in\n\n    --help | -h)\n      showhelp\n      return\n      ;;\n    --version | -v)\n      version\n      return\n      ;;\n    --install)\n      _CMD=\"install\"\n      ;;\n    --install-online)\n      shift\n      installOnline \"$@\"\n      return\n      ;;\n    --uninstall)\n      _CMD=\"uninstall\"\n      ;;\n    --upgrade)\n      _CMD=\"upgrade\"\n      ;;\n    --issue)\n      _CMD=\"issue\"\n      ;;\n    --deploy)\n      _CMD=\"deploy\"\n      ;;\n    --sign-csr | --signcsr)\n      _CMD=\"signcsr\"\n      ;;\n    --show-csr | --showcsr)\n      _CMD=\"showcsr\"\n      ;;\n    -i | --install-cert | --installcert)\n      _CMD=\"installcert\"\n      ;;\n    --renew | -r)\n      _CMD=\"renew\"\n      ;;\n    --renew-all | --renewAll | --renewall)\n      _CMD=\"renewAll\"\n      ;;\n    --revoke)\n      _CMD=\"revoke\"\n      ;;\n    --remove)\n      _CMD=\"remove\"\n      ;;\n    --list)\n      _CMD=\"list\"\n      ;;\n    --info)\n      _CMD=\"info\"\n      ;;\n    --install-cronjob | --installcronjob)\n      _CMD=\"installcronjob\"\n      ;;\n    --uninstall-cronjob | --uninstallcronjob)\n      _CMD=\"uninstallcronjob\"\n      ;;\n    --cron)\n      _CMD=\"cron\"\n      ;;\n    --to-pkcs12 | --to-pkcs | --toPkcs)\n      _CMD=\"toPkcs\"\n      ;;\n    --to-pkcs8 | --toPkcs8)\n      _CMD=\"toPkcs8\"\n      ;;\n    --create-account-key | --createAccountKey | --createaccountkey | -cak)\n      _CMD=\"createAccountKey\"\n      ;;\n    --create-domain-key | --createDomainKey | --createdomainkey | -cdk)\n      _CMD=\"createDomainKey\"\n      ;;\n    -ccr | --create-csr | --createCSR | --createcsr)\n      _CMD=\"createCSR\"\n      ;;\n    --deactivate)\n      _CMD=\"deactivate\"\n      ;;\n    --update-account | --updateaccount)\n      _CMD=\"updateaccount\"\n      ;;\n    --register-account | --registeraccount)\n      _CMD=\"registeraccount\"\n      ;;\n    --deactivate-account)\n      _CMD=\"deactivateaccount\"\n      ;;\n    --set-notify)\n      _CMD=\"setnotify\"\n      ;;\n    --set-default-ca)\n      _CMD=\"setdefaultca\"\n      ;;\n    --set-default-chain)\n      _CMD=\"setdefaultchain\"\n      ;;\n    -d | --domain)\n      _dvalue=\"$2\"\n\n      if [ \"$_dvalue\" ]; then\n        if _startswith \"$_dvalue\" \"-\"; then\n          _err \"'$_dvalue' is not a valid domain for parameter '$1'\"\n          return 1\n        fi\n        if _is_idn \"$_dvalue\" && ! _exists idn; then\n          _err \"It seems that $_dvalue is an IDN (Internationalized Domain Names), please install the 'idn' command first.\"\n          return 1\n        fi\n\n        if [ -z \"$_domain\" ]; then\n          _domain=\"$_dvalue\"\n        else\n          if [ \"$_altdomains\" = \"$NO_VALUE\" ]; then\n            _altdomains=\"$_dvalue\"\n          else\n            _altdomains=\"$_altdomains,$_dvalue\"\n          fi\n        fi\n      fi\n\n      shift\n      ;;\n\n    -f | --force)\n      FORCE=\"1\"\n      ;;\n    --staging | --test)\n      STAGE=\"1\"\n      ;;\n    --server)\n      _server=\"$2\"\n      shift\n      ;;\n    --debug)\n      if [ -z \"$2\" ] || _startswith \"$2\" \"-\"; then\n        DEBUG=\"$DEBUG_LEVEL_DEFAULT\"\n      else\n        DEBUG=\"$2\"\n        shift\n      fi\n      ;;\n    --output-insecure)\n      export OUTPUT_INSECURE=1\n      ;;\n    -w | --webroot)\n      wvalue=\"$2\"\n      if [ -z \"$_webroot\" ]; then\n        _webroot=\"$wvalue\"\n      else\n        _webroot=\"$_webroot,$wvalue\"\n      fi\n      shift\n      ;;\n    --challenge-alias)\n      cvalue=\"$2\"\n      _challenge_alias=\"$_challenge_alias$cvalue,\"\n      shift\n      ;;\n    --domain-alias)\n      cvalue=\"$DNS_ALIAS_PREFIX$2\"\n      _challenge_alias=\"$_challenge_alias$cvalue,\"\n      shift\n      ;;\n    --standalone)\n      wvalue=\"$NO_VALUE\"\n      if [ -z \"$_webroot\" ]; then\n        _webroot=\"$wvalue\"\n      else\n        _webroot=\"$_webroot,$wvalue\"\n      fi\n      ;;\n    --alpn)\n      wvalue=\"$W_ALPN\"\n      if [ -z \"$_webroot\" ]; then\n        _webroot=\"$wvalue\"\n      else\n        _webroot=\"$_webroot,$wvalue\"\n      fi\n      ;;\n    --stateless)\n      wvalue=\"$MODE_STATELESS\"\n      if [ -z \"$_webroot\" ]; then\n        _webroot=\"$wvalue\"\n      else\n        _webroot=\"$_webroot,$wvalue\"\n      fi\n      ;;\n    --local-address)\n      lvalue=\"$2\"\n      _local_address=\"$_local_address$lvalue,\"\n      shift\n      ;;\n    --apache)\n      wvalue=\"apache\"\n      if [ -z \"$_webroot\" ]; then\n        _webroot=\"$wvalue\"\n      else\n        _webroot=\"$_webroot,$wvalue\"\n      fi\n      ;;\n    --nginx)\n      wvalue=\"$NGINX\"\n      if [ \"$2\" ] && ! _startswith \"$2\" \"-\"; then\n        wvalue=\"$NGINX$2\"\n        shift\n      fi\n      if [ -z \"$_webroot\" ]; then\n        _webroot=\"$wvalue\"\n      else\n        _webroot=\"$_webroot,$wvalue\"\n      fi\n      ;;\n    --dns)\n      wvalue=\"$W_DNS\"\n      if [ \"$2\" ] && ! _startswith \"$2\" \"-\"; then\n        wvalue=\"$2\"\n        shift\n      fi\n      if [ -z \"$_webroot\" ]; then\n        _webroot=\"$wvalue\"\n      else\n        _webroot=\"$_webroot,$wvalue\"\n      fi\n      ;;\n    --dnssleep)\n      _dnssleep=\"$2\"\n      Le_DNSSleep=\"$_dnssleep\"\n      shift\n      ;;\n    --keylength | -k)\n      _keylength=\"$2\"\n      shift\n      if [ \"$_keylength\" ] && ! _isEccKey \"$_keylength\"; then\n        export __SELECTED_RSA_KEY=1\n      fi\n      ;;\n    -ak | --accountkeylength)\n      _accountkeylength=\"$2\"\n      shift\n      ;;\n    --cert-file | --certpath)\n      _cert_file=\"$2\"\n      shift\n      ;;\n    --key-file | --keypath)\n      _key_file=\"$2\"\n      shift\n      ;;\n    --ca-file | --capath)\n      _ca_file=\"$2\"\n      shift\n      ;;\n    --fullchain-file | --fullchainpath)\n      _fullchain_file=\"$2\"\n      shift\n      ;;\n    --reloadcmd | --reloadCmd)\n      _reloadcmd=\"$2\"\n      shift\n      ;;\n    --password)\n      _password=\"$2\"\n      shift\n      ;;\n    --accountconf)\n      _accountconf=\"$2\"\n      ACCOUNT_CONF_PATH=\"$_accountconf\"\n      shift\n      ;;\n    --home)\n      export LE_WORKING_DIR=\"$(echo \"$2\" | sed 's|/$||')\"\n      shift\n      ;;\n    --cert-home | --certhome)\n      _certhome=\"$2\"\n      export CERT_HOME=\"$_certhome\"\n      shift\n      ;;\n    --config-home)\n      _confighome=\"$2\"\n      export LE_CONFIG_HOME=\"$_confighome\"\n      shift\n      ;;\n    --useragent)\n      _useragent=\"$2\"\n      USER_AGENT=\"$_useragent\"\n      shift\n      ;;\n    -m | --email | --accountemail)\n      _accountemail=\"$2\"\n      export ACCOUNT_EMAIL=\"$_accountemail\"\n      shift\n      ;;\n    --accountkey)\n      _accountkey=\"$2\"\n      ACCOUNT_KEY_PATH=\"$_accountkey\"\n      shift\n      ;;\n    --days)\n      _days=\"$2\"\n      Le_RenewalDays=\"$_days\"\n      shift\n      ;;\n    --valid-from)\n      _valid_from=\"$2\"\n      shift\n      ;;\n    --valid-to)\n      _valid_to=\"$2\"\n      shift\n      ;;\n    --httpport)\n      _httpport=\"$2\"\n      Le_HTTPPort=\"$_httpport\"\n      shift\n      ;;\n    --tlsport)\n      _tlsport=\"$2\"\n      Le_TLSPort=\"$_tlsport\"\n      shift\n      ;;\n    --listraw)\n      _listraw=\"raw\"\n      ;;\n    -se | --stop-renew-on-error | --stopRenewOnError | --stoprenewonerror)\n      _stopRenewOnError=\"1\"\n      ;;\n    --insecure)\n      #_insecure=\"1\"\n      HTTPS_INSECURE=\"1\"\n      ;;\n    --ca-bundle)\n      _ca_bundle=\"$(_readlink \"$2\")\"\n      CA_BUNDLE=\"$_ca_bundle\"\n      shift\n      ;;\n    --ca-path)\n      _ca_path=\"$2\"\n      CA_PATH=\"$_ca_path\"\n      shift\n      ;;\n    --no-cron | --nocron)\n      _nocron=\"1\"\n      ;;\n    --no-profile | --noprofile)\n      _noprofile=\"1\"\n      ;;\n    --no-color)\n      export ACME_NO_COLOR=1\n      ;;\n    --force-color)\n      export ACME_FORCE_COLOR=1\n      ;;\n    --ecc)\n      _ecc=\"isEcc\"\n      ;;\n    --csr)\n      _csr=\"$2\"\n      shift\n      ;;\n    --pre-hook)\n      _pre_hook=\"$2\"\n      shift\n      ;;\n    --post-hook)\n      _post_hook=\"$2\"\n      shift\n      ;;\n    --renew-hook)\n      _renew_hook=\"$2\"\n      shift\n      ;;\n    --deploy-hook)\n      if [ -z \"$2\" ] || _startswith \"$2\" \"-\"; then\n        _usage \"Please specify a value for '--deploy-hook'\"\n        return 1\n      fi\n      _deploy_hook=\"$_deploy_hook$2,\"\n      shift\n      ;;\n    --extended-key-usage)\n      Le_ExtKeyUse=\"$2\"\n      shift\n      ;;\n    --ocsp-must-staple | --ocsp)\n      Le_OCSP_Staple=\"1\"\n      ;;\n    --always-force-new-domain-key)\n      if [ -z \"$2\" ] || _startswith \"$2\" \"-\"; then\n        Le_ForceNewDomainKey=1\n      else\n        Le_ForceNewDomainKey=\"$2\"\n        shift\n      fi\n      ;;\n    --yes-I-know-dns-manual-mode-enough-go-ahead-please)\n      export FORCE_DNS_MANUAL=1\n      ;;\n    --log | --logfile)\n      _log=\"1\"\n      _logfile=\"$2\"\n      if _startswith \"$_logfile\" '-'; then\n        _logfile=\"\"\n      else\n        shift\n      fi\n      LOG_FILE=\"$_logfile\"\n      if [ -z \"$LOG_LEVEL\" ]; then\n        LOG_LEVEL=\"$DEFAULT_LOG_LEVEL\"\n      fi\n      ;;\n    --log-level)\n      _log_level=\"$2\"\n      LOG_LEVEL=\"$_log_level\"\n      shift\n      ;;\n    --syslog)\n      if ! _startswith \"$2\" '-'; then\n        _syslog=\"$2\"\n        shift\n      fi\n      if [ -z \"$_syslog\" ]; then\n        _syslog=\"$SYSLOG_LEVEL_DEFAULT\"\n      fi\n      ;;\n    --auto-upgrade)\n      _auto_upgrade=\"$2\"\n      if [ -z \"$_auto_upgrade\" ] || _startswith \"$_auto_upgrade\" '-'; then\n        _auto_upgrade=\"1\"\n      else\n        shift\n      fi\n      AUTO_UPGRADE=\"$_auto_upgrade\"\n      ;;\n    --listen-v4)\n      _listen_v4=\"1\"\n      Le_Listen_V4=\"$_listen_v4\"\n      ;;\n    --listen-v6)\n      _listen_v6=\"1\"\n      Le_Listen_V6=\"$_listen_v6\"\n      ;;\n    --openssl-bin)\n      _openssl_bin=\"$2\"\n      ACME_OPENSSL_BIN=\"$_openssl_bin\"\n      shift\n      ;;\n    --use-wget)\n      _use_wget=\"1\"\n      ACME_USE_WGET=\"1\"\n      ;;\n    --branch | -b)\n      export BRANCH=\"$2\"\n      shift\n      ;;\n    --notify-hook)\n      _nhook=\"$2\"\n      if _startswith \"$_nhook\" \"-\"; then\n        _err \"'$_nhook' is not a hook name for '$1'\"\n        return 1\n      fi\n      if [ \"$_notify_hook\" ]; then\n        _notify_hook=\"$_notify_hook,$_nhook\"\n      else\n        _notify_hook=\"$_nhook\"\n      fi\n      shift\n      ;;\n    --notify-level)\n      _nlevel=\"$2\"\n      if _startswith \"$_nlevel\" \"-\"; then\n        _err \"'$_nlevel' is not an integer for '$1'\"\n        return 1\n      fi\n      _notify_level=\"$_nlevel\"\n      shift\n      ;;\n    --notify-mode)\n      _nmode=\"$2\"\n      if _startswith \"$_nmode\" \"-\"; then\n        _err \"'$_nmode' is not an integer for '$1'\"\n        return 1\n      fi\n      _notify_mode=\"$_nmode\"\n      shift\n      ;;\n    --notify-source)\n      _nsource=\"$2\"\n      if _startswith \"$_nsource\" \"-\"; then\n        _err \"'$_nsource' is not a valid host name for '$1'\"\n        return 1\n      fi\n      _notify_source=\"$_nsource\"\n      shift\n      ;;\n    --revoke-reason)\n      _revoke_reason=\"$2\"\n      if _startswith \"$_revoke_reason\" \"-\"; then\n        _err \"'$_revoke_reason' is not an integer for '$1'\"\n        return 1\n      fi\n      shift\n      ;;\n    --eab-kid)\n      _eab_kid=\"$2\"\n      shift\n      ;;\n    --eab-hmac-key)\n      _eab_hmac_key=\"$2\"\n      shift\n      ;;\n    --preferred-chain)\n      _preferred_chain=\"$2\"\n      shift\n      ;;\n    *)\n      _err \"Unknown parameter: $1\"\n      return 1\n      ;;\n    esac\n\n    shift 1\n  done\n\n  if [ \"$_server\" ]; then\n    _selectServer \"$_server\" \"${_ecc:-$_keylength}\"\n    _server=\"$ACME_DIRECTORY\"\n  fi\n\n  if [ \"${_CMD}\" != \"install\" ]; then\n    if [ \"$__INTERACTIVE\" ] && ! _checkSudo; then\n      if [ -z \"$FORCE\" ]; then\n        #Use \"echo\" here, instead of _info. it's too early\n        echo \"It seems that you are using sudo, please read this page first:\"\n        echo \"$_SUDO_WIKI\"\n        return 1\n      fi\n    fi\n    __initHome\n    if [ \"$_log\" ]; then\n      if [ -z \"$_logfile\" ]; then\n        _logfile=\"$DEFAULT_LOG_FILE\"\n      fi\n    fi\n    if [ \"$_logfile\" ]; then\n      _saveaccountconf \"LOG_FILE\" \"$_logfile\"\n      LOG_FILE=\"$_logfile\"\n    fi\n\n    if [ \"$_log_level\" ]; then\n      _saveaccountconf \"LOG_LEVEL\" \"$_log_level\"\n      LOG_LEVEL=\"$_log_level\"\n    fi\n\n    if [ \"$_syslog\" ]; then\n      if _exists logger; then\n        if [ \"$_syslog\" = \"0\" ]; then\n          _clearaccountconf \"SYS_LOG\"\n        else\n          _saveaccountconf \"SYS_LOG\" \"$_syslog\"\n        fi\n        SYS_LOG=\"$_syslog\"\n      else\n        _err \"The 'logger' command was not found, cannot enable syslog.\"\n        _clearaccountconf \"SYS_LOG\"\n        SYS_LOG=\"\"\n      fi\n    fi\n\n    _processAccountConf\n  fi\n\n  _debug2 LE_WORKING_DIR \"$LE_WORKING_DIR\"\n\n  if [ \"$DEBUG\" ]; then\n    version\n    if [ \"$_server\" ]; then\n      _debug \"Using server: $_server\"\n    fi\n  fi\n  _debug \"Running cmd: ${_CMD}\"\n  case \"${_CMD}\" in\n  install) install \"$_nocron\" \"$_confighome\" \"$_noprofile\" \"$_accountemail\" ;;\n  uninstall) uninstall \"$_nocron\" ;;\n  upgrade) upgrade ;;\n  issue)\n    issue \"$_webroot\" \"$_domain\" \"$_altdomains\" \"$_keylength\" \"$_cert_file\" \"$_key_file\" \"$_ca_file\" \"$_reloadcmd\" \"$_fullchain_file\" \"$_pre_hook\" \"$_post_hook\" \"$_renew_hook\" \"$_local_address\" \"$_challenge_alias\" \"$_preferred_chain\" \"$_valid_from\" \"$_valid_to\"\n    ;;\n  deploy)\n    deploy \"$_domain\" \"$_deploy_hook\" \"$_ecc\"\n    ;;\n  signcsr)\n    signcsr \"$_csr\" \"$_webroot\" \"$_cert_file\" \"$_key_file\" \"$_ca_file\" \"$_reloadcmd\" \"$_fullchain_file\" \"$_pre_hook\" \"$_post_hook\" \"$_renew_hook\" \"$_local_address\" \"$_challenge_alias\" \"$_preferred_chain\"\n    ;;\n  showcsr)\n    showcsr \"$_csr\" \"$_domain\"\n    ;;\n  installcert)\n    installcert \"$_domain\" \"$_cert_file\" \"$_key_file\" \"$_ca_file\" \"$_reloadcmd\" \"$_fullchain_file\" \"$_ecc\"\n    ;;\n  renew)\n    renew \"$_domain\" \"$_ecc\" \"$_server\"\n    ;;\n  renewAll)\n    renewAll \"$_stopRenewOnError\" \"$_server\"\n    ;;\n  revoke)\n    revoke \"$_domain\" \"$_ecc\" \"$_revoke_reason\"\n    ;;\n  remove)\n    remove \"$_domain\" \"$_ecc\"\n    ;;\n  deactivate)\n    deactivate \"$_domain,$_altdomains\"\n    ;;\n  registeraccount)\n    registeraccount \"$_accountkeylength\" \"$_eab_kid\" \"$_eab_hmac_key\"\n    ;;\n  updateaccount)\n    updateaccount\n    ;;\n  deactivateaccount)\n    deactivateaccount\n    ;;\n  list)\n    list \"$_listraw\" \"$_domain\"\n    ;;\n  info)\n    info \"$_domain\" \"$_ecc\"\n    ;;\n  installcronjob) installcronjob \"$_confighome\" ;;\n  uninstallcronjob) uninstallcronjob ;;\n  cron) cron ;;\n  toPkcs)\n    toPkcs \"$_domain\" \"$_password\" \"$_ecc\"\n    ;;\n  toPkcs8)\n    toPkcs8 \"$_domain\" \"$_ecc\"\n    ;;\n  createAccountKey)\n    createAccountKey \"$_accountkeylength\"\n    ;;\n  createDomainKey)\n    createDomainKey \"$_domain\" \"$_keylength\"\n    ;;\n  createCSR)\n    createCSR \"$_domain\" \"$_altdomains\" \"$_ecc\"\n    ;;\n  setnotify)\n    setnotify \"$_notify_hook\" \"$_notify_level\" \"$_notify_mode\" \"$_notify_source\"\n    ;;\n  setdefaultca)\n    setdefaultca\n    ;;\n  setdefaultchain)\n    setdefaultchain \"$_preferred_chain\"\n    ;;\n  *)\n    if [ \"$_CMD\" ]; then\n      _err \"Invalid command: $_CMD\"\n    fi\n    showhelp\n    return 1\n    ;;\n  esac\n  _ret=\"$?\"\n  if [ \"$_ret\" != \"0\" ]; then\n    return $_ret\n  fi\n\n  if [ \"${_CMD}\" = \"install\" ]; then\n    if [ \"$_log\" ]; then\n      if [ -z \"$LOG_FILE\" ]; then\n        LOG_FILE=\"$DEFAULT_LOG_FILE\"\n      fi\n      _saveaccountconf \"LOG_FILE\" \"$LOG_FILE\"\n    fi\n\n    if [ \"$_log_level\" ]; then\n      _saveaccountconf \"LOG_LEVEL\" \"$_log_level\"\n    fi\n\n    if [ \"$_syslog\" ]; then\n      if _exists logger; then\n        if [ \"$_syslog\" = \"0\" ]; then\n          _clearaccountconf \"SYS_LOG\"\n        else\n          _saveaccountconf \"SYS_LOG\" \"$_syslog\"\n        fi\n      else\n        _err \"The 'logger' command was not found, cannot enable syslog.\"\n        _clearaccountconf \"SYS_LOG\"\n        SYS_LOG=\"\"\n      fi\n    fi\n\n    _processAccountConf\n  fi\n\n}\n\nmain() {\n  [ -z \"$1\" ] && showhelp && return\n  if _startswith \"$1\" '-'; then _process \"$@\"; else \"$@\"; fi\n}\n\nmain \"$@\"\n"
        },
        {
          "name": "deploy",
          "type": "tree",
          "content": null
        },
        {
          "name": "dnsapi",
          "type": "tree",
          "content": null
        },
        {
          "name": "notify",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}