{
  "metadata": {
    "timestamp": 1736557444499,
    "page": 457,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "koalaman/shellcheck",
      "stars": 36743,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.06,
          "content": "*\n!LICENSE\n!Setup.hs\n!ShellCheck.cabal\n!shellcheck.hs\n!src\n"
        },
        {
          "name": ".ghci",
          "type": "blob",
          "size": 0.03,
          "content": ":set -idist/build/autogen -isrc\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github_deploy",
          "type": "blob",
          "size": 0.54,
          "content": "#!/bin/bash\nset -x\nshopt -s extglob\n\nexport EDITOR=\"touch\"\n\n# Sanity check\ngh --version || exit 1\nhub release show latest || exit 1\n\nfor tag in $TAGS\ndo\n  if ! hub release show \"$tag\"\n  then\n    echo \"Creating new release $tag\"\n    git show --no-patch  --format='format:%B' > description\n    hub release create -F description \"$tag\"\n  fi\n\n  files=()\n  for file in deploy/*\n  do\n    [[ $file == *.@(xz|gz|zip) ]] || continue\n    [[ $file == *\"$tag\"* ]] || continue\n    files+=(\"$file\")\n  done\n  gh release upload \"$tag\" \"${files[@]}\" --clobber || exit 1\ndone\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.25,
          "content": "# Created by https://www.gitignore.io\n\n### Haskell ###\ndist\ncabal-dev\n*.o\n*.hi\n*.chi\n*.chs.h\n.virtualenv\n.hsenv\n.cabal-sandbox/\ncabal.sandbox.config\ncabal.config\n.stack-work\n\n### Snap ###\n/snap/.snapcraft/\n/stage/\n/parts/\n/prime/\n*.snap\n/dist-newstyle/\n"
        },
        {
          "name": ".multi_arch_docker",
          "type": "blob",
          "size": 2.96,
          "content": "#!/bin/bash\n# This script builds and deploys multi-architecture docker images from the\n# binaries previously built and deployed to GitHub.\n\nfunction multi_arch_docker::install_docker_buildx() {\n  # Install QEMU multi-architecture support for docker buildx.\n  docker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n\n  # Instantiate docker buildx builder with multi-architecture support.\n  docker buildx create --name mybuilder\n  docker buildx use mybuilder\n  # Start up buildx and verify that all is OK.\n  docker buildx inspect --bootstrap\n}\n\n# Log in to Docker Hub for deployment.\nfunction multi_arch_docker::login_to_docker_hub() {\n  echo \"$DOCKER_PASSWORD\" | docker login -u=\"$DOCKER_USERNAME\" --password-stdin\n}\n\n# Run buildx build and push. Passed in arguments augment the command line.\nfunction multi_arch_docker::buildx() {\n  mkdir -p /tmp/empty\n  docker buildx build \\\n    --platform \"${DOCKER_PLATFORMS// /,}\" \\\n    --push \\\n    --progress plain \\\n    -f Dockerfile.multi-arch \\\n    \"$@\" \\\n    /tmp/empty\n  rmdir /tmp/empty\n}\n\n# Build and push plain and alpine docker images for all tags.\nfunction multi_arch_docker::build_and_push_all() {\n  for tag in $TAGS; do\n    multi_arch_docker::buildx -t \"$DOCKER_BASE:$tag\" --build-arg \"tag=$tag\"\n    multi_arch_docker::buildx -t \"$DOCKER_BASE-alpine:$tag\" \\\n      --build-arg \"tag=$tag\" --target alpine\n  done\n}\n\n# Test all pushed docker images.\nfunction multi_arch_docker::test_all() {\n  printf '%s\\n' \"#!/bin/sh\" \"echo 'hello world'\" > myscript\n\n  for platform in $DOCKER_PLATFORMS; do\n    for tag in $TAGS; do\n      for ext in '-alpine' ''; do\n        image=\"${DOCKER_BASE}${ext}:${tag}\"\n        msg=\"Testing docker image $image on platform $platform\"\n        line=\"${msg//?/=}\"\n        printf '\\n%s\\n%s\\n%s\\n' \"${line}\" \"${msg}\" \"${line}\"\n        docker pull -q --platform \"$platform\" \"$image\"\n        if [ -n \"$ext\" ]; then\n          echo -n \"Image architecture: \"\n          docker run --rm --entrypoint /bin/sh \"$image\" -c 'uname -m'\n          version=$(docker run --rm \"$image\" shellcheck --version \\\n            | grep 'version:')\n        else\n          version=$(docker run --rm \"$image\" --version | grep 'version:')\n        fi\n        version=${version/#version: /v}\n        echo \"shellcheck version: $version\"\n        if [[ ! (\"$tag\" =~ ^(latest|stable)$) && \"$tag\" != \"$version\" ]]; then\n          echo \"Version mismatch: shellcheck $version tagged as $tag\"\n          exit 1\n        fi\n        if [ -n \"$ext\" ]; then\n          docker run --rm -v \"$PWD:/mnt\" -w /mnt \"$image\" shellcheck myscript\n        else\n          docker run --rm -v \"$PWD:/mnt\" \"$image\" myscript\n        fi\n      done\n    done\n  done\n}\n\nfunction multi_arch_docker::main() {\n  export DOCKER_PLATFORMS='linux/amd64'\n  DOCKER_PLATFORMS+=' linux/arm64'\n  DOCKER_PLATFORMS+=' linux/arm/v6'\n  DOCKER_PLATFORMS+=' linux/riscv64'\n\n  multi_arch_docker::install_docker_buildx\n  multi_arch_docker::login_to_docker_hub\n  multi_arch_docker::build_and_push_all\n  multi_arch_docker::test_all\n}\n"
        },
        {
          "name": ".prepare_deploy",
          "type": "blob",
          "size": 0.95,
          "content": "#!/bin/bash\n# This script packages up compiled binaries\nset -ex\nshopt -s nullglob extglob\n\nls -l\n\ncp ../LICENSE LICENSE.txt\nsed -e $'s/$/\\r/' > README.txt << END\nThis is a precompiled ShellCheck binary.\n      https://www.shellcheck.net/\n\nShellCheck is a static analysis tool for shell scripts.\nIt's licensed under the GNU General Public License v3.0.\nInformation and source code is available on the website.\n\nThis binary was compiled on $(date -u).\n\n\n\n      ====== Latest commits ======\n\n$(git log -n 3)\nEND\n\nfor dir in */\ndo\n  cp LICENSE.txt README.txt \"$dir\"\ndone\n\necho \"Tags are $TAGS\"\n\nfor tag in $TAGS\ndo\n\n  for dir in windows.*/\n  do\n    ( cd \"$dir\" && zip \"../shellcheck-$tag.zip\" * )\n  done\n\n  for dir in {linux,darwin}.*/\n  do\n    base=\"${dir%/}\"\n    ( cd \"$dir\" && tar -cJf \"../shellcheck-$tag.$base.tar.xz\" --transform=\"s:^:shellcheck-$tag/:\" * )\n  done\ndone\n\nfor file in ./*\ndo\n  [[ -f \"$file\" ]] || continue\n  sha512sum \"$file\" > \"$file.sha512sum\"\ndone\n\nls -l\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 22.03,
          "content": "## Git\n### Added\n- SC2327/SC2328: Warn about capturing the output of redirected commands.\n- SC2329: Warn when (non-escaping) functions are never invoked.\n- SC2330: Warn about unsupported glob matches with [[ .. ]] in BusyBox.\n- Precompiled binaries for Linux riscv64 (linux.riscv64)\n### Changed\n- SC2002 about Useless Use Of Cat is now disabled by default. It can be\n  re-enabled with `--enable=useless-use-of-cat` or equivalent directive.\n- SC2015 about `A && B || C` no longer triggers when B is a test command.\n### Fixed\n- SC2218 about function use-before-define is now more accurate.\n- SC2317 about unreachable commands is now less spammy for nested ones.\n- SC2292, optional suggestion for [[ ]], now triggers for Busybox.\n\n\n## v0.10.0 - 2024-03-07\n### Added\n- Precompiled binaries for macOS ARM64 (darwin.aarch64)\n- Added support for busybox sh\n- Added flag --rcfile to specify an rc file by name.\n- Added `extended-analysis=true` directive to enable/disable dataflow analysis\n  (with a corresponding --extended-analysis flag).\n- SC2324: Warn when x+=1 appends instead of increments\n- SC2325: Warn about multiple `!`s in dash/sh.\n- SC2326: Warn about `foo | ! bar` in bash/dash/sh.\n- SC3012: Warn about lexicographic-compare bashism in test like in [ ]\n- SC3013: Warn bashism `test _ -op/-nt/-ef _` like in [ ]\n- SC3014: Warn bashism `test _ == _` like in [ ]\n- SC3015: Warn bashism `test _ =~ _` like in [ ]\n- SC3016: Warn bashism `test -v _` like in [ ]\n- SC3017: Warn bashism `test -a _` like in [ ]\n\n### Fixed\n- source statements with here docs now work correctly\n- \"(Array.!): undefined array element\" error should no longer occur\n\n\n## v0.9.0 - 2022-12-12\n### Added\n- SC2316: Warn about 'local readonly foo' and similar (thanks, patrickxia!)\n- SC2317: Warn about unreachable commands\n- SC2318: Warn about backreferences in 'declare x=1 y=$x'\n- SC2319/SC2320: Warn when $? refers to echo/printf/[ ]/[[ ]]/test\n- SC2321: Suggest removing $((..)) in array[$((idx))]=val\n- SC2322: Suggest collapsing double parentheses in arithmetic contexts\n- SC2323: Suggest removing wrapping parentheses in a[(x+1)]=val\n\n### Fixed\n- SC2086: Now uses DFA to make more accurate predictions about values\n- SC2086: No longer warns about values declared as integer with declare -i\n\n### Changed\n- ShellCheck now has a Data Flow Analysis engine to make smarter decisions\n  based on control flow rather than just syntax. Existing checks will\n  gradually start using it, which may cause them to trigger differently\n  (but more accurately).\n- Values in directives/shellcheckrc can now be quoted with '' or \"\"\n\n\n## v0.8.0 - 2021-11-06\n### Added\n- `disable=all` now conveniently disables all warnings\n- `external-sources=true` directive can be added to .shellcheckrc to make\n  shellcheck behave as if `-x` was specified.\n- Optional `check-extra-masked-returns` for pointing out commands with\n  suppressed exit codes (SC2312).\n- Optional `require-double-brackets` for recommending \\[\\[ ]] (SC2292).\n- SC2286-SC2288: Warn when command name ends in a symbol like `/.)'\"`\n- SC2289: Warn when command name contains tabs or linefeeds\n- SC2291: Warn about repeated unquoted spaces between words in echo\n- SC2292: Suggest [[ over [ in Bash/Ksh scripts (optional)\n- SC2293/SC2294: Warn when calling `eval` with arrays\n- SC2295: Warn about \"${x#$y}\" treating $y as a pattern when not quoted\n- SC2296-SC2301: Improved warnings for bad parameter expansions\n- SC2302/SC2303: Warn about loops over array values when using them as keys\n- SC2304-SC2306: Warn about unquoted globs in expr arguments\n- SC2307: Warn about insufficient number of arguments to expr\n- SC2308: Suggest other approaches for non-standard expr extensions\n- SC2313: Warn about `read` with unquoted, array indexed variable\n\n### Fixed\n- SC2102 about repetitions in ranges no longer triggers on [[ -v arr[xx] ]]\n- SC2155 now recognizes `typeset` and local read-only `declare` statements\n- SC2181 now tries to avoid triggering for error handling functions\n- SC2290: Warn about misused = in declare & co, which were not caught by SC2270+\n- The flag --color=auto no longer outputs color when TERM is \"dumb\" or unset\n\n### Changed\n- SC2048: Warning about $\\* now also applies to ${array[\\*]}\n- SC2181 now only triggers on single condition tests like `[ $? = 0 ]`.\n- Quote warnings are now emitted for declaration utilities in sh\n- Leading `_` can now be used to suppress warnings about unused variables\n- TTY output now includes warning level in text as well as color\n\n### Removed\n- SC1004: Literal backslash+linefeed in '' was found to be usually correct\n\n\n## v0.7.2 - 2021-04-19\n### Added\n- `disable` directives can now be a range, e.g. `disable=SC3000-SC4000`\n- SC1143: Warn about line continuations in comments\n- SC2259/SC2260: Warn when redirections override pipes\n- SC2261: Warn about multiple competing redirections\n- SC2262/SC2263: Warn about aliases declared and used in the same parsing unit\n- SC2264: Warn about wrapper functions that blatantly recurse\n- SC2265/SC2266: Warn when using & or | with test statements\n- SC2267: Warn when using xargs -i instead of -I\n- SC2268: Warn about unnecessary x-comparisons like `[ x$var = xval ]`\n\n### Fixed\n- SC1072/SC1073 now respond to disable annotations, though ignoring parse errors\n  is still purely cosmetic and does not allow ShellCheck to continue.\n- Improved error reporting for trailing tokens after ]/]] and compound commands\n- `#!/usr/bin/env -S shell` is now handled correctly\n- Here docs with \\r are now parsed correctly and give better warnings\n\n### Changed\n- Assignments are now parsed to spec, without leniency for leading $ or spaces\n- POSIX/dash unsupported feature warnings now have individual SC3xxx codes\n- SC1090: A leading `$x/` or `$(x)/` is now treated as `./` when locating files\n- SC2154: Variables appearing in -z/-n tests are no longer considered unassigned\n- SC2270-SC2285: Improved warnings about misused `=`, e.g. `${var}=42`\n\n\n## v0.7.1 - 2020-04-04\n### Fixed\n- `-f diff` no longer claims that it found more issues when it didn't\n- Known empty variables now correctly trigger SC2086\n- ShellCheck should now be compatible with Cabal 3\n- SC2154 and all command-specific checks now trigger for builtins\n  called with `builtin`\n\n### Added\n- SC1136: Warn about unexpected characters after ]/]]\n- SC2254: Suggest quoting expansions in case statements\n- SC2255: Suggest using `$((..))` in `[ 2*3 -eq 6 ]`\n- SC2256: Warn about translated strings that are known variables\n- SC2257: Warn about arithmetic mutation in redirections\n- SC2258: Warn about trailing commas in for loop elements\n\n### Changed\n- SC2230: 'command -v' suggestion is now off by default (-i deprecate-which)\n- SC1081: Keywords are now correctly parsed case sensitively, with a warning\n\n\n## v0.7.0 - 2019-07-28\n### Added\n- Precompiled binaries for macOS and Linux aarch64\n- Preliminary support for fix suggestions\n- New `-f diff` unified diff format for auto-fixes\n- Files containing Bats tests can now be checked\n- Directory wide directives can now be placed in a `.shellcheckrc`\n- Optional checks: Use `--list-optional` to show a list of tests,\n                   Enable with `-o` flags or `enable=name` directives\n- Source paths: Use `-P dir1:dir2` or a `source-path=dir1` directive\n                to specify search paths for sourced files.\n- json1 format like --format=json but treats tabs as single characters\n- Recognize FLAGS variables created by the shflags library.\n- Site-specific changes can now be made in Custom.hs for ease of patching\n- SC2154: Also warn about unassigned uppercase variables (optional)\n- SC2252: Warn about `[ $a != x ] || [ $a != y ]`, similar to SC2055\n- SC2251: Inform about ineffectual ! in front of commands\n- SC2250: Warn about variable references without braces (optional)\n- SC2249: Warn about `case` with missing default case (optional)\n- SC2248: Warn about unquoted variables without special chars (optional)\n- SC2247: Warn about $\"(cmd)\" and $\"{var}\"\n- SC2246: Warn if a shebang's interpreter ends with /\n- SC2245: Warn that Ksh ignores all but the first glob result in `[`\n- SC2243/SC2244: Suggest using explicit -n for `[ $foo ]` (optional)\n- SC1135: Suggest not ending double quotes just to make $ literal\n\n### Changed\n- If a directive or shebang is not specified, a `.bash/.bats/.dash/.ksh`\n  extension will be used to infer the shell type when present.\n- Disabling SC2120 on a function now disables SC2119 on call sites\n\n### Fixed\n- SC2183 no longer warns about missing printf args for `%()T`\n\n## v0.6.0 - 2018-12-02\n### Added\n- Command line option --severity/-S for filtering by minimum severity\n- Command line option --wiki-link-count/-W for showing wiki links\n- SC2152/SC2151: Warn about bad `exit` values like `1234` and `\"foo\"`\n- SC2236/SC2237: Suggest -n/-z instead of ! -z/-n\n- SC2238: Warn when redirecting to a known command name, e.g. ls > rm\n- SC2239: Warn if the shebang is not an absolute path, e.g. #!bin/sh\n- SC2240: Warn when passing additional arguments to dot (.) in sh/dash\n- SC1133: Better diagnostics when starting a line with |/||/&&\n\n### Changed\n- Most warnings now have useful end positions\n- SC1117 about unknown double-quoted escape sequences has been retired\n\n### Fixed\n- SC2021 no longer triggers for equivalence classes like `[=e=]`\n- SC2221/SC2222 no longer mistriggers on fall-through case branches\n- SC2081 about glob matches in `[ .. ]` now also triggers for `!=`\n- SC2086 no longer warns about spaces in `$#`\n- SC2164 no longer suggests subshells for `cd ..; cmd; cd ..`\n- `read -a` is now correctly considered an array assignment\n- SC2039 no longer warns about LINENO now that it's POSIX\n\n## v0.5.0 - 2018-05-31\n### Added\n- SC2233/SC2234/SC2235: Suggest removing or replacing (..) around tests\n- SC2232: Warn about invalid arguments to sudo\n- SC2231: Suggest quoting expansions in for loop globs\n- SC2229: Warn about 'read $var'\n- SC2227: Warn about redirections in the middle of 'find' commands\n- SC2224/SC2225/SC2226: Warn when using mv/cp/ln without a destination\n- SC2223: Quote warning specific to `: ${var=value}`\n- SC1131: Warn when using `elseif` or `elsif`\n- SC1128: Warn about blanks/comments before shebang\n- SC1127: Warn about C-style comments\n\n### Fixed\n- Annotations intended for a command's here documents now work\n- Escaped characters inside groups in =~ regexes now parse\n- Associative arrays are now respected in arithmetic contexts\n- SC1087 about `$var[@]` now correctly triggers on any index\n- Bad expansions in here documents are no longer ignored\n- FD move operations like {fd}>1- now parse correctly\n\n### Changed\n- Here docs are now terminated as per spec, rather than by presumed intent\n- SC1073: 'else if' is now parsed correctly and not like 'elif'\n- SC2163: 'export $name' can now be silenced with 'export ${name?}'\n- SC2183: Now warns when printf arg count is not a multiple of format count\n\n## v0.4.7 - 2017-12-08\n### Added\n- Statically linked binaries for Linux and Windows (see README.md)!\n- `-a` flag to also include warnings in `source`d files\n- SC2221/SC2222: Warn about overridden case branches\n- SC2220: Warn about unhandled error cases in getopt loops\n- SC2218: Warn when using functions before they're defined\n- SC2216/SC2217: Warn when piping/redirecting to mv/cp and other non-readers\n- SC2215: Warn about commands starting with leading dash\n- SC2214: Warn about superfluous getopt flags\n- SC2213: Warn about unhandled getopt flags\n- SC2212: Suggest `false` over `[ ]`\n- SC2211: Warn when using a glob as a command name\n- SC2210: Warn when redirecting to an integer, e.g. `foo 1>2`\n- SC2206/SC2207: Suggest alternatives when using word splitting in arrays\n- SC1117: Warn about double quoted, undefined backslash sequences\n- SC1113/SC1114/SC1115: Recognized more malformed shebangs\n\n### Fixed\n- `[ -v foo ]` no longer warns if `foo` is undefined\n- SC2037 is now suppressed by quotes, e.g. `PAGER=\"cat\" man foo`\n- Ksh nested array declarations now parse correctly\n- Parameter Expansion without colons are now recognized, e.g. `${foo+bar}`\n- The `lastpipe` option is now respected with regard to subshell warnings\n- `\\(` is now respected for grouping in `[`\n- Leading `\\` is now ignored for commands, to allow alias suppression\n- Comments are now allowed after directives to e.g. explain 'disable'\n\n\n## v0.4.6 - 2017-03-26\n### Added\n- SC2204/SC2205: Warn about `( -z foo )` and `( foo -eq bar )`\n- SC2200/SC2201: Warn about brace expansion in [/[[\n- SC2198/SC2199: Warn about arrays in [/[[\n- SC2196/SC2197: Warn about deprecated egrep/fgrep\n- SC2195: Warn about unmatchable case branches\n- SC2194: Warn about constant 'case' statements\n- SC2193: Warn about `[[ file.png == *.mp3 ]]` and other unmatchables\n- SC2188/SC2189: Warn about redirections without commands\n- SC2186: Warn about deprecated `tempfile`\n- SC1109: Warn when finding `&amp;`/`&gt;`/`&lt;` unquoted\n- SC1108: Warn about missing spaces in `[ var= foo ]`\n\n### Changed\n- All files are now read as UTF-8 with lenient latin1 fallback, ignoring locale\n- Unicode quotes are no longer considered syntactic quotes\n- `ash` scripts will now be checked as `dash` with a warning\n\n### Fixed\n- `-c` no longer suggested when using `grep -o | wc`\n- Comments and whitespace are now allowed before filewide directives\n- Here doc delimiters with esoteric quoting like `foo\"\"` are now handled\n- SC2095 about `ssh` in while read loops is now suppressed when using `-n`\n- `%(%Y%M%D)T` now recognized as a single formatter in `printf` checks\n- `grep -F` now suppresses regex related suggestions\n- Command name checks now recognize busybox applet names\n\n\n## v0.4.5 - 2016-10-21\n### Added\n- A Docker build (thanks, kpankonen!)\n- SC2185: Suggest explicitly adding path for `find`\n- SC2184: Warn about unsetting globs (e.g. `unset foo[1]`)\n- SC2183: Warn about `printf` with more formatters than variables\n- SC2182: Warn about ignored arguments with `printf`\n- SC2181: Suggest using command directly instead of `if [ $? -eq 0 ]`\n- SC1106: Warn when using `test` operators in `(( 1 -eq 2 ))`\n\n### Changed\n- Unrecognized directives now causes a warning rather than parse failure.\n\n### Fixed\n- Indices in associative arrays are now parsed correctly\n- Missing shebang warning squashed when specifying with a directive\n- Ksh multidimensional arrays are now supported\n- Variables in substring ${a:x:y} expansions now count as referenced\n- SC1102 now also handles ambiguous `$((`\n- Using `$(seq ..)` will no longer suggest quoting\n- SC2148 (missing shebang) is now suppressed when using shell directives\n- `[ a '>' b ]` is now recognized as being correctly escaped\n\n\n## v0.4.4 - 2016-05-15\n### Added\n- Haskell Stack support (thanks,  Arguggi!)\n- SC2179/SC2178: Warn when assigning/appending strings to arrays\n- SC1102: Warn about ambiguous `$(((`\n- SC1101: Warn when \\\\ linebreaks have trailing spaces\n\n### Changed\n- Directives directly after the shebang now apply to the entire file\n\n### Fixed\n- `{$i..10}` is now flagged similar to `{1..$i}`\n\n\n## v0.4.3 - 2016-01-13\n### Fixed\n- Build now works on GHC 7.6.3 as found on Debian Stable/Ubuntu LTS\n\n\n## v0.4.2 - 2016-01-09\n### Added\n- First class support for the `dash` shell\n- The `--color` flag similar to ls/grep's (thanks, haguenau!)\n- SC2174: Warn about unexpected behavior of `mkdir -pm` (thanks, eatnumber1!)\n- SC2172: Warn about non-portable use of signal numbers in `trap`\n- SC2171: Warn about `]]` without leading `[[`\n- SC2168: Warn about `local` outside functions\n\n### Fixed\n- Warnings about unchecked `cd` will no longer trigger with `set -e`\n- `[ a -nt/-ot/-ef b ]` no longer warns about being constant\n- Quoted test operators like `[ foo \"<\" bar ]` now parse\n- Escaped quotes in backticks now parse correctly\n\n\n## v0.4.1 - 2015-09-05\n### Fixed\n- Added missing files to Cabal, fixing the build\n\n\n## v0.4.0 - 2015-09-05\n### Added\n- Support for following `source`d files\n- Support for setting default flags in `SHELLCHECK_OPTS`\n- An `--external-sources` flag for following arbitrary `source`d files\n- A `source` directive to override the filename to `source`\n- SC2166: Suggest using `[ p ] && [ q ]` over `[ p -a q ]`\n- SC2165: Warn when nested `for` loops use the same variable name\n- SC2164: Warn when using `cd` without checking that it succeeds\n- SC2163: Warn about `export $var`\n- SC2162: Warn when using `read` without `-r`\n- SC2157: Warn about `[ \"$var \" ]` and similar never-empty string matches\n\n### Fixed\n- `cat -vnE file` and similar will no longer flag as UUOC\n- Nested trinary operators in `(( ))` now parse correctly\n- Ksh `${ ..; }` command expansions now parse\n\n\n## v0.3.8 - 2015-06-20\n### Changed\n- ShellCheck's license has changed from AGPLv3 to GPLv3.\n\n### Added\n- SC2156: Warn about injecting filenames in `find -exec sh -c \"{}\" \\;`\n\n### Fixed\n- Variables and command substitutions in brace expansions are now parsed\n- ANSI colors are now disabled on Windows\n- Empty scripts now parse\n\n\n## v0.3.7 - 2015-04-16\n### Fixed\n- Build now works on GHC 7.10\n- Use `regex-tdfa` over `regex-compat` since the latter crashes on OS X.\n\n## v0.3.6 - 2015-03-28\n### Added\n- SC2155: Warn about masked return values in `export foo=$(exit 1)`\n- SC2154: Warn when a lowercase variable is referenced but not assigned\n- SC2152/SC2151: Warn about bad `return` values like `1234` and `\"foo\"`\n- SC2150: Warn about `find -exec \"shell command\" \\;`\n\n### Fixed\n- `coproc` is now supported\n- Trinary operator now recognized in `((..))`\n\n### Removed\n- Zsh support has been removed\n\n\n## v0.3.5 - 2014-11-09\n### Added\n- SC2148: Warn when not including a shebang\n- SC2147: Warn about literal ~ in PATH\n- SC1086: Warn about `$` in for loop variables, e.g. `for $i in ..`\n- SC1084: Warn when the shebang uses `!#` instead of `#!`\n\n### Fixed\n- Empty and comment-only backtick expansions now parse\n- Variables used in PS1/PROMPT\\_COMMAND/trap now count as referenced\n- ShellCheck now skips unreadable files and directories\n- `-f gcc` on empty files no longer crashes\n- Variables in $\"..\" are now considered quoted\n- Warnings about expansions in single quotes now include backticks\n\n\n## v0.3.4 - 2014-07-08\n### Added\n- SC2146: Warn about precedence when combining `find -o` with actions\n- SC2145: Warn when concatenating arrays and strings\n\n### Fixed\n- Case statements now support `;&` and `;;&`\n- Indices in array declarations now parse correctly\n- `let` expressions now parsed as arithmetic expressions\n- Escaping is now respected in here documents\n\n### Changed\n- Completely drop Makefile in favor of Cabal (thanks rodrigosetti!)\n\n\n## v0.3.3 - 2014-05-29\n### Added\n- SC2144: Warn when using globs in `[/[[`\n- SC2143: Suggesting using `grep -q` over `[ \"$(.. | grep)\" ]`\n- SC2142: Warn when referencing positional parameters in aliases\n- SC2141: Warn about suspicious IFS assignments like `IFS=\"\\n\"`\n- SC2140: Warn about bad embedded quotes like `echo \"var=\"value\"\"`\n- SC2130: Warn when using `-eq` on strings\n- SC2139: Warn about define time expansions in alias definitions\n- SC2129: Suggest command grouping over `a >> log; b >> log; c >> log`\n- SC2128: Warn when expanding arrays without an index\n- SC2126: Suggest `grep -c` over `grep|wc`\n- SC2123: Warn about accidentally overriding `$PATH`, e.g. `PATH=/my/dir`\n- SC1083: Warn about literal `{/}` outside of quotes\n- SC1082: Warn about UTF-8 BOMs\n\n### Fixed\n- SC2051 no longer triggers for `{1,$n}`, only `{1..$n}`\n- Improved detection of single quoted `sed` variables, e.g. `sed '$s///'`\n- Stop warning about single quoted variables in `PS1` and similar\n- Support for Zsh short form loops, `=(..)`\n\n### Removed\n- SC1000 about unescaped lonely `$`, e.g. `grep \"^foo$\"`\n\n\n## v0.3.2 - 2014-03-22\n### Added\n- SC2121: Warn about trying to `set` variables, e.g. `set var = value`\n- SC2120/SC2119: Warn when a function uses `$1..` if none are ever passed\n- SC2117: Warn when using `su` in interactive mode, e.g. `su foo; whoami`\n- SC2116: Detect useless use of echo, e.g. `for i in $(echo $var)`\n- SC2115/SC2114: Detect some catastrophic `rm -r \"$empty/\"` mistakes\n- SC1081: Warn when capitalizing keywords like `While`\n- SC1077: Warn when using acute accents instead of backticks\n\n### Fixed\n- Shells are now properly recognized in shebangs containing flags\n- Stop warning about math on decimals in ksh/zsh\n- Stop warning about decimal comparisons with `=`, e.g. `[ $version = 1.2 ]`\n- Parsing of `|&`\n- `${a[x]}` not counting as a reference of `x`\n- `(( x[0] ))` not counting as a reference of `x`\n\n\n## v0.3.1 - 2014-02-03\n### Added\n- The `-s` flag to specify shell dialect\n- SC2105/SC2104: Warn about `break/continue` outside loops\n- SC1076: Detect invalid `[/[[` arithmetic like `[ 1 + 2 = 3 ]`\n- SC1075: Suggest using `elif` over `else if`\n\n### Fixed\n- Don't warn when comma separating elements in brace expansions\n- Improved detection of single quoted `sed` variables, e.g. `sed '$d'`\n- Parsing of arithmetic for loops using `{..}` instead of `do..done`\n- Don't treat the last pipeline stage as a subshell in ksh/zsh\n\n\n## v0.3.0 - 2014-01-19\n### Added\n- A man page (thanks Dridi!)\n- GCC compatible error reporting (`shellcheck -f gcc`)\n- CheckStyle compatible XML error reporting (`shellcheck -f checkstyle`)\n- Error codes for each warning, e.g. SC1234\n- Allow disabling warnings with `# shellcheck disable=SC1234`\n- Allow disabling warnings with `--exclude`\n- SC2103: Suggest using subshells over `cd foo; bar; cd ..`\n- SC2102: Warn about duplicates in char ranges, e.g. `[10-15]`\n- SC2101: Warn about named classes not inside a char range, e.g. `[:digit:]`\n- SC2100/SC2099: Warn about bad math expressions like `i=i+5`\n- SC2098/SC2097: Warn about `foo=bar echo $foo`\n- SC2095: Warn when using `ssh`/`ffmpeg` in `while read` loops\n- Better warnings for missing here doc tokens\n\n### Fixed\n- Don't warn when single quoting variables with `ssh/perl/eval`\n- `${!var}` is now counted as a variable reference\n\n### Removed\n- Suggestions about using parameter expansion over basename\n- The `jsoncheck` binary. Use `shellcheck -f json` instead.\n\n\n## v0.2.0 - 2013-10-27\n### Added\n- Suggest `./*` instead of `*` when passing globs to commands\n- Suggest `pgrep` over `ps | grep`\n- Warn about unicode quotes\n- Warn about assigned but unused variables\n- Inform about client side expansion when using `ssh`\n\n### Fixed\n- CLI tool now uses exit codes and stderr canonically\n- Parsing of extglobs containing empty patterns\n- Parsing of bash style `eval foo=(bar)`\n- Parsing of expansions in here documents\n- Parsing of function names containing :+-\n- Don't warn about `find|xargs` when using `-print0`\n\n\n## v0.1.0 - 2013-07-23\n### Added\n- First release\n"
        },
        {
          "name": "Dockerfile.multi-arch",
          "type": "blob",
          "size": 0.78,
          "content": "# Alpine image\nFROM alpine:latest AS alpine\nLABEL maintainer=\"Vidar Holen <vidar@vidarholen.net>\"\nARG tag\n\n# Put the right binary for each architecture into place for the\n# multi-architecture docker image.\nRUN set -x; \\\n  arch=\"$(uname -m)\"; \\\n  echo \"arch is $arch\"; \\\n  if [ \"${arch}\" = 'armv7l' ]; then \\\n    arch='armv6hf'; \\\n  fi; \\\n  url_base='https://github.com/koalaman/shellcheck/releases/download/'; \\\n  tar_file=\"${tag}/shellcheck-${tag}.linux.${arch}.tar.xz\"; \\\n  wget \"${url_base}${tar_file}\" -O - | tar xJf -; \\\n  mv \"shellcheck-${tag}/shellcheck\" /bin/; \\\n  rm -rf \"shellcheck-${tag}\"; \\\n  ls -laF /bin/shellcheck\n\n# ShellCheck image\nFROM scratch\nLABEL maintainer=\"Vidar Holen <vidar@vidarholen.net>\"\nWORKDIR /mnt\nCOPY --from=alpine /bin/shellcheck /bin/\nENTRYPOINT [\"/bin/shellcheck\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 34.33,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<https://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<https://www.gnu.org/licenses/why-not-lgpl.html>.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 20.66,
          "content": "[![Build Status](https://github.com/koalaman/shellcheck/actions/workflows/build.yml/badge.svg)](https://github.com/koalaman/shellcheck/actions/workflows/build.yml)\n\n\n# ShellCheck - A shell script static analysis tool\n\nShellCheck is a GPLv3 tool that gives warnings and suggestions for bash/sh shell scripts:\n\n![Screenshot of a terminal showing problematic shell script lines highlighted](doc/terminal.png)\n\nThe goals of ShellCheck are\n\n* To point out and clarify typical beginner's syntax issues that cause a shell\n  to give cryptic error messages.\n\n* To point out and clarify typical intermediate level semantic problems that\n  cause a shell to behave strangely and counter-intuitively.\n\n* To point out subtle caveats, corner cases and pitfalls that may cause an\n  advanced user's otherwise working script to fail under future circumstances.\n\nSee [the gallery of bad code](README.md#user-content-gallery-of-bad-code) for examples of what ShellCheck can help you identify!\n\n## Table of Contents\n\n* [How to use](#how-to-use)\n  * [On the web](#on-the-web)\n  * [From your terminal](#from-your-terminal)\n  * [In your editor](#in-your-editor)\n  * [In your build or test suites](#in-your-build-or-test-suites)\n* [Installing](#installing)\n* [Compiling from source](#compiling-from-source)\n  * [Installing Cabal](#installing-cabal)\n  * [Compiling ShellCheck](#compiling-shellcheck)\n  * [Running tests](#running-tests)\n* [Gallery of bad code](#gallery-of-bad-code)\n  * [Quoting](#quoting)\n  * [Conditionals](#conditionals)\n  * [Frequently misused commands](#frequently-misused-commands)\n  * [Common beginner's mistakes](#common-beginners-mistakes)\n  * [Style](#style)\n  * [Data and typing errors](#data-and-typing-errors)\n  * [Robustness](#robustness)\n  * [Portability](#portability)\n  * [Miscellaneous](#miscellaneous)\n* [Testimonials](#testimonials)\n* [Ignoring issues](#ignoring-issues)\n* [Reporting bugs](#reporting-bugs)\n* [Contributing](#contributing)\n* [Copyright](#copyright)\n* [Other Resources](#other-resources)\n\n## How to use\n\nThere are a number of ways to use ShellCheck!\n\n### On the web\n\nPaste a shell script on <https://www.shellcheck.net> for instant feedback.\n\n[ShellCheck.net](https://www.shellcheck.net) is always synchronized to the latest git commit, and is the easiest way to give ShellCheck a go. Tell your friends!\n\n### From your terminal\n\nRun `shellcheck yourscript` in your terminal for instant output, as seen above.\n\n### In your editor\n\nYou can see ShellCheck suggestions directly in a variety of editors.\n\n* Vim, through [ALE](https://github.com/w0rp/ale), [Neomake](https://github.com/neomake/neomake), or [Syntastic](https://github.com/scrooloose/syntastic):\n\n![Screenshot of Vim showing inlined shellcheck feedback](doc/vim-syntastic.png).\n\n* Emacs, through [Flycheck](https://github.com/flycheck/flycheck) or [Flymake](https://github.com/federicotdn/flymake-shellcheck):\n\n![Screenshot of emacs showing inlined shellcheck feedback](doc/emacs-flycheck.png).\n\n* Sublime, through [SublimeLinter](https://github.com/SublimeLinter/SublimeLinter-shellcheck).\n\n* Pulsar Edit (former Atom), through [linter-shellcheck-pulsar](https://github.com/pulsar-cooperative/linter-shellcheck-pulsar).\n\n* VSCode, through [vscode-shellcheck](https://github.com/timonwong/vscode-shellcheck).\n\n* Most other editors, through [GCC error compatibility](shellcheck.1.md#user-content-formats).\n\n### In your build or test suites\n\nWhile ShellCheck is mostly intended for interactive use, it can easily be added to builds or test suites.\nIt makes canonical use of exit codes, so you can just add a `shellcheck` command as part of the process.\n\nFor example, in a Makefile:\n\n```Makefile\ncheck-scripts:\n    # Fail if any of these files have warnings\n    shellcheck myscripts/*.sh\n```\n\nor in a Travis CI `.travis.yml` file:\n\n```yaml\nscript:\n  # Fail if any of these files have warnings\n  - shellcheck myscripts/*.sh\n```\n\nServices and platforms that have ShellCheck pre-installed and ready to use:\n\n* [Travis CI](https://travis-ci.org/)\n* [Codacy](https://www.codacy.com/)\n* [Code Climate](https://codeclimate.com/)\n* [Code Factor](https://www.codefactor.io/)\n* [Codety](https://www.codety.io/) via the [Codety Scanner](https://github.com/codetyio/codety-scanner)\n* [CircleCI](https://circleci.com) via the [ShellCheck Orb](https://circleci.com/orbs/registry/orb/circleci/shellcheck)\n* [Github](https://github.com/features/actions) (only Linux)\n* [Trunk Check](https://trunk.io/products/check) (universal linter; [allows you to explicitly version your shellcheck install](https://github.com/trunk-io/plugins/blob/bcbb361dcdbe4619af51ea7db474d7fb87540d20/.trunk/trunk.yaml#L32)) via the [shellcheck plugin](https://github.com/trunk-io/plugins/blob/main/linters/shellcheck/plugin.yaml)\n* [CodeRabbit](https://coderabbit.ai/)\n\nMost other services, including [GitLab](https://about.gitlab.com/), let you install\nShellCheck yourself, either through the system's package manager (see [Installing](#installing)),\nor by downloading and unpacking a [binary release](#installing-a-pre-compiled-binary).\n\nIt's a good idea to manually install a specific ShellCheck version regardless. This avoids\nany surprise build breaks when a new version with new warnings is published.\n\nFor customized filtering or reporting, ShellCheck can output simple JSON, CheckStyle compatible XML,\nGCC compatible warnings as well as human readable text (with or without ANSI colors). See the\n[Integration](https://github.com/koalaman/shellcheck/wiki/Integration) wiki page for more documentation.\n\n## Installing\n\nThe easiest way to install ShellCheck locally is through your package manager.\n\nOn systems with Cabal (installs to `~/.cabal/bin`):\n\n    cabal update\n    cabal install ShellCheck\n\nOn systems with Stack (installs to `~/.local/bin`):\n\n    stack update\n    stack install ShellCheck\n\nOn Debian based distros:\n\n    sudo apt install shellcheck\n\nOn Arch Linux based distros:\n\n    pacman -S shellcheck\n\nor get the dependency free [shellcheck-bin](https://aur.archlinux.org/packages/shellcheck-bin/) from the AUR.\n\nOn Gentoo based distros:\n\n    emerge --ask shellcheck\n\nOn EPEL based distros:\n\n    sudo yum -y install epel-release\n    sudo yum install ShellCheck\n\nOn Fedora based distros:\n\n    dnf install ShellCheck\n\nOn FreeBSD:\n\n    pkg install hs-ShellCheck\n\nOn macOS (OS X) with Homebrew:\n\n    brew install shellcheck\n\nOr with MacPorts:\n\n    sudo port install shellcheck\n\nOn OpenBSD:\n\n    pkg_add shellcheck\n\nOn openSUSE\n\n    zypper in ShellCheck\n\nOr use OneClickInstall - <https://software.opensuse.org/package/ShellCheck>\n\nOn Solus:\n\n    eopkg install shellcheck\n\nOn Windows (via [chocolatey](https://chocolatey.org/packages/shellcheck)):\n\n```cmd\nC:\\> choco install shellcheck\n```\n\nOr Windows (via [winget](https://github.com/microsoft/winget-pkgs)):\n\n```cmd\nC:\\> winget install --id koalaman.shellcheck\n```\n\nOr Windows (via [scoop](http://scoop.sh)):\n\n```cmd\nC:\\> scoop install shellcheck\n```\n\nFrom [conda-forge](https://anaconda.org/conda-forge/shellcheck):\n\n    conda install -c conda-forge shellcheck\n\nFrom Snap Store:\n\n    snap install --channel=edge shellcheck\n\nFrom Docker Hub:\n\n```sh\ndocker run --rm -v \"$PWD:/mnt\" koalaman/shellcheck:stable myscript\n# Or :v0.4.7 for that version, or :latest for daily builds\n```\n\nor use `koalaman/shellcheck-alpine` if you want a larger Alpine Linux based image to extend. It works exactly like a regular Alpine image, but has shellcheck preinstalled.\n\nUsing the [nix package manager](https://nixos.org/nix):\n```sh\nnix-env -iA nixpkgs.shellcheck\n```\n\nUsing the [Flox package manager](https://flox.dev/)\n```sh\nflox install shellcheck\n```\n\nAlternatively, you can download pre-compiled binaries for the latest release here:\n\n* [Linux, x86_64](https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.linux.x86_64.tar.xz) (statically linked)\n* [Linux, armv6hf](https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.linux.armv6hf.tar.xz), i.e. Raspberry Pi (statically linked)\n* [Linux, aarch64](https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.linux.aarch64.tar.xz) aka ARM64 (statically linked)\n* [macOS, aarch64](https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.darwin.aarch64.tar.xz)\n* [macOS, x86_64](https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.darwin.x86_64.tar.xz)\n* [Windows, x86](https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.zip)\n\nor see the [GitHub Releases](https://github.com/koalaman/shellcheck/releases) for other releases\n(including the [latest](https://github.com/koalaman/shellcheck/releases/tag/latest) meta-release for daily git builds).\n\nThere are currently no official binaries for Apple Silicon, but third party builds are available via\n[ShellCheck for Visual Studio Code](https://github.com/vscode-shellcheck/shellcheck-binaries/releases).\n\nDistro packages already come with a `man` page. If you are building from source, it can be installed with:\n\n```console\npandoc -s -f markdown-smart -t man shellcheck.1.md -o shellcheck.1\nsudo mv shellcheck.1 /usr/share/man/man1\n```\n\n### pre-commit\n\nTo run ShellCheck via [pre-commit](https://pre-commit.com/), add the hook to your `.pre-commit-config.yaml`:\n\n```\nrepos:\n-   repo: https://github.com/koalaman/shellcheck-precommit\n    rev: v0.7.2\n    hooks:\n    -   id: shellcheck\n#       args: [\"--severity=warning\"]  # Optionally only show errors and warnings\n```\n\n### Travis CI\n\nTravis CI has now integrated ShellCheck by default, so you don't need to manually install it.\n\nIf you still want to do so in order to upgrade at your leisure or ensure you're\nusing the latest release, follow the steps below to install a binary version.\n\n### Installing a pre-compiled binary\n\nThe pre-compiled binaries come in `tar.xz` files. To decompress them, make sure\n`xz` is installed.\nOn Debian/Ubuntu/Mint, you can `apt install xz-utils`.\nOn Redhat/Fedora/CentOS, `yum -y install xz`.\n\nA simple installer may do something like:\n\n```bash\nscversion=\"stable\" # or \"v0.4.7\", or \"latest\"\nwget -qO- \"https://github.com/koalaman/shellcheck/releases/download/${scversion?}/shellcheck-${scversion?}.linux.x86_64.tar.xz\" | tar -xJv\ncp \"shellcheck-${scversion}/shellcheck\" /usr/bin/\nshellcheck --version\n```\n\n## Compiling from source\n\nThis section describes how to build ShellCheck from a source directory. ShellCheck is written in Haskell and requires 2GB of RAM to compile.\n\n### Installing Cabal\n\nShellCheck is built and packaged using Cabal. Install the package `cabal-install` from your system's package manager (with e.g. `apt-get`, `brew`, `emerge`, `yum`, or `zypper`).\n\nOn macOS (OS X), you can do a fast install of Cabal using brew, which takes a couple of minutes instead of more than 30 minutes if you try to compile it from source.\n\n    $ brew install cabal-install\n\nOn MacPorts, the package is instead called `hs-cabal-install`, while native Windows users should install the latest version of the Haskell platform from <https://www.haskell.org/platform/>\n\nVerify that `cabal` is installed and update its dependency list with\n\n    $ cabal update\n\n### Compiling ShellCheck\n\n`git clone` this repository, and `cd` to the ShellCheck source directory to build/install:\n\n    $ cabal install\n\nThis will compile ShellCheck and install it to your `~/.cabal/bin` directory.\n\nAdd this directory to your `PATH` (for bash, add this to your `~/.bashrc`):\n\n```sh\nexport PATH=\"$HOME/.cabal/bin:$PATH\"\n```\n\nLog out and in again, and verify that your PATH is set up correctly:\n\n```sh\n$ which shellcheck\n~/.cabal/bin/shellcheck\n```\n\nOn native Windows, the `PATH` should already be set up, but the system\nmay use a legacy codepage. In `cmd.exe`, `powershell.exe` and Powershell ISE,\nmake sure to use a TrueType font, not a Raster font, and set the active\ncodepage to UTF-8 (65001) with `chcp`:\n\n```cmd\nchcp 65001\n```\n\nIn Powershell ISE, you may need to additionally update the output encoding:\n\n```powershell\n[Console]::OutputEncoding = [System.Text.Encoding]::UTF8\n```\n\n### Running tests\n\nTo run the unit test suite:\n\n    $ cabal test\n\n## Gallery of bad code\n\nSo what kind of things does ShellCheck look for? Here is an incomplete list of detected issues.\n\n### Quoting\n\nShellCheck can recognize several types of incorrect quoting:\n\n```sh\necho $1                           # Unquoted variables\nfind . -name *.ogg                # Unquoted find/grep patterns\nrm \"~/my file.txt\"                # Quoted tilde expansion\nv='--verbose=\"true\"'; cmd $v      # Literal quotes in variables\nfor f in \"*.ogg\"                  # Incorrectly quoted 'for' loops\ntouch $@                          # Unquoted $@\necho 'Don't forget to restart!'   # Singlequote closed by apostrophe\necho 'Don\\'t try this at home'    # Attempting to escape ' in ''\necho 'Path is $PATH'              # Variables in single quotes\ntrap \"echo Took ${SECONDS}s\" 0    # Prematurely expanded trap\nunset var[i]                      # Array index treated as glob\n```\n\n### Conditionals\n\nShellCheck can recognize many types of incorrect test statements.\n\n```sh\n[[ n != 0 ]]                      # Constant test expressions\n[[ -e *.mpg ]]                    # Existence checks of globs\n[[ $foo==0 ]]                     # Always true due to missing spaces\n[[ -n \"$foo \" ]]                  # Always true due to literals\n[[ $foo =~ \"fo+\" ]]               # Quoted regex in =~\n[ foo =~ re ]                     # Unsupported [ ] operators\n[ $1 -eq \"shellcheck\" ]           # Numerical comparison of strings\n[ $n && $m ]                      # && in [ .. ]\n[ grep -q foo file ]              # Command without $(..)\n[[ \"$$file\" == *.jpg ]]           # Comparisons that can't succeed\n(( 1 -lt 2 ))                     # Using test operators in ((..))\n[ x ] & [ y ] | [ z ]             # Accidental backgrounding and piping\n```\n\n### Frequently misused commands\n\nShellCheck can recognize instances where commands are used incorrectly:\n\n```sh\ngrep '*foo*' file                 # Globs in regex contexts\nfind . -exec foo {} && bar {} \\;  # Prematurely terminated find -exec\nsudo echo 'Var=42' > /etc/profile # Redirecting sudo\ntime --format=%s sleep 10         # Passing time(1) flags to time builtin\nwhile read h; do ssh \"$h\" uptime  # Commands eating while loop input\nalias archive='mv $1 /backup'     # Defining aliases with arguments\ntr -cd '[a-zA-Z0-9]'              # [] around ranges in tr\nexec foo; echo \"Done!\"            # Misused 'exec'\nfind -name \\*.bak -o -name \\*~ -delete  # Implicit precedence in find\n# find . -exec foo > bar \\;       # Redirections in find\nf() { whoami; }; sudo f           # External use of internal functions\n```\n\n### Common beginner's mistakes\n\nShellCheck recognizes many common beginner's syntax errors:\n\n```sh\nvar = 42                          # Spaces around = in assignments\n$foo=42                           # $ in assignments\nfor $var in *; do ...             # $ in for loop variables\nvar$n=\"Hello\"                     # Wrong indirect assignment\necho ${var$n}                     # Wrong indirect reference\nvar=(1, 2, 3)                     # Comma separated arrays\narray=( [index] = value )         # Incorrect index initialization\necho $var[14]                     # Missing {} in array references\necho \"Argument 10 is $10\"         # Positional parameter misreference\nif $(myfunction); then ..; fi     # Wrapping commands in $()\nelse if othercondition; then ..   # Using 'else if'\nf; f() { echo \"hello world; }     # Using function before definition\n[ false ]                         # 'false' being true\nif ( -f file )                    # Using (..) instead of test\n```\n\n### Style\n\nShellCheck can make suggestions to improve style:\n\n```sh\n[[ -z $(find /tmp | grep mpg) ]]  # Use grep -q instead\na >> log; b >> log; c >> log      # Use a redirection block instead\necho \"The time is `date`\"         # Use $() instead\ncd dir; process *; cd ..;         # Use subshells instead\necho $[1+2]                       # Use standard $((..)) instead of old $[]\necho $(($RANDOM % 6))             # Don't use $ on variables in $((..))\necho \"$(date)\"                    # Useless use of echo\ncat file | grep foo               # Useless use of cat\n```\n\n### Data and typing errors\n\nShellCheck can recognize issues related to data and typing:\n\n```sh\nargs=\"$@\"                         # Assigning arrays to strings\nfiles=(foo bar); echo \"$files\"    # Referencing arrays as strings\ndeclare -A arr=(foo bar)          # Associative arrays without index\nprintf \"%s\\n\" \"Arguments: $@.\"    # Concatenating strings and arrays\n[[ $# > 2 ]]                      # Comparing numbers as strings\nvar=World; echo \"Hello \" var      # Unused lowercase variables\necho \"Hello $name\"                # Unassigned lowercase variables\ncmd | read bar; echo $bar         # Assignments in subshells\ncat foo | cp bar                  # Piping to commands that don't read\nprintf '%s: %s\\n' foo             # Mismatches in printf argument count\neval \"${array[@]}\"                # Lost word boundaries in array eval\nfor i in \"${x[@]}\"; do ${x[$i]}   # Using array value as key\n```\n\n### Robustness\n\nShellCheck can make suggestions for improving the robustness of a script:\n\n```sh\nrm -rf \"$STEAMROOT/\"*            # Catastrophic rm\ntouch ./-l; ls *                 # Globs that could become options\nfind . -exec sh -c 'a && b {}' \\; # Find -exec shell injection\nprintf \"Hello $name\"             # Variables in printf format\nfor f in $(ls *.txt); do         # Iterating over ls output\nexport MYVAR=$(cmd)              # Masked exit codes\ncase $version in 2.*) :;; 2.6.*) # Shadowed case branches\n```\n\n### Portability\n\nShellCheck will warn when using features not supported by the shebang. For example, if you set the shebang to `#!/bin/sh`, ShellCheck will warn about portability issues similar to `checkbashisms`:\n\n```sh\necho {1..$n}                     # Works in ksh, but not bash/dash/sh\necho {1..10}                     # Works in ksh and bash, but not dash/sh\necho -n 42                       # Works in ksh, bash and dash, undefined in sh\nexpr match str regex             # Unportable alias for `expr str : regex`\ntrap 'exit 42' sigint            # Unportable signal spec\ncmd &> file                      # Unportable redirection operator\nread foo < /dev/tcp/host/22      # Unportable intercepted files\nfoo-bar() { ..; }                # Undefined/unsupported function name\n[ $UID = 0 ]                     # Variable undefined in dash/sh\nlocal var=value                  # local is undefined in sh\ntime sleep 1 | sleep 5           # Undefined uses of 'time'\n```\n\n### Miscellaneous\n\nShellCheck recognizes a menagerie of other issues:\n\n```sh\nPS1='\\e[0;32m\\$\\e[0m '            # PS1 colors not in \\[..\\]\nPATH=\"$PATH:~/bin\"                # Literal tilde in $PATH\nrm “file”                         # Unicode quotes\necho \"Hello world\"                # Carriage return / DOS line endings\necho hello \\                      # Trailing spaces after \\\nvar=42 echo $var                  # Expansion of inlined environment\n!# bin/bash -x -e                 # Common shebang errors\necho $((n/180*100))               # Unnecessary loss of precision\nls *[:digit:].txt                 # Bad character class globs\nsed 's/foo/bar/' file > file      # Redirecting to input\nvar2=$var2                        # Variable assigned to itself\n[ x$var = xval ]                  # Antiquated x-comparisons\nls() { ls -l \"$@\"; }              # Infinitely recursive wrapper\nalias ls='ls -l'; ls foo          # Alias used before it takes effect\nfor x; do for x; do               # Nested loop uses same variable\nwhile getopts \"a\" f; do case $f in \"b\") # Unhandled getopts flags\n```\n\n## Testimonials\n\n> At first you're like \"shellcheck is awesome\" but then you're like \"wtf are we still using bash\"\n\nAlexander Tarasikov,\n[via Twitter](https://twitter.com/astarasikov/status/568825996532707330)\n\n## Ignoring issues\n\nIssues can be ignored via environmental variable, command line, individually or globally within a file:\n\n<https://github.com/koalaman/shellcheck/wiki/Ignore>\n\n## Reporting bugs\n\nPlease use the GitHub issue tracker for any bugs or feature suggestions:\n\n<https://github.com/koalaman/shellcheck/issues>\n\n## Contributing\n\nPlease submit patches to code or documentation as GitHub pull requests! Check\nout the [DevGuide](https://github.com/koalaman/shellcheck/wiki/DevGuide) on the\nShellCheck Wiki.\n\nContributions must be licensed under the GNU GPLv3.\nThe contributor retains the copyright.\n\n## Copyright\n\nShellCheck is licensed under the GNU General Public License, v3. A copy of this license is included in the file [LICENSE](LICENSE).\n\nCopyright 2012-2019, [Vidar 'koala_man' Holen](https://github.com/koalaman/) and contributors.\n\nHappy ShellChecking!\n\n## Other Resources\n\n* The wiki has [long form descriptions](https://github.com/koalaman/shellcheck/wiki/Checks) for each warning, e.g. [SC2221](https://github.com/koalaman/shellcheck/wiki/SC2221).\n* ShellCheck does not attempt to enforce any kind of formatting or indenting style, so also check out [shfmt](https://github.com/mvdan/sh)!\n"
        },
        {
          "name": "ShellCheck.cabal",
          "type": "blob",
          "size": 3.87,
          "content": "Name:             ShellCheck\nVersion:          0.10.0\nSynopsis:         Shell script analysis tool\nLicense:          GPL-3\nLicense-file:     LICENSE\nCategory:         Static Analysis\nAuthor:           Vidar Holen\nMaintainer:       vidar@vidarholen.net\nHomepage:         https://www.shellcheck.net/\nBuild-Type:       Simple\nCabal-Version:    1.18\nBug-reports:      https://github.com/koalaman/shellcheck/issues\nDescription:\n  The goals of ShellCheck are:\n  .\n  * To point out and clarify typical beginner's syntax issues,\n    that causes a shell to give cryptic error messages.\n  .\n  * To point out and clarify typical intermediate level semantic problems,\n    that causes a shell to behave strangely and counter-intuitively.\n  .\n  * To point out subtle caveats, corner cases and pitfalls, that may cause an\n    advanced user's otherwise working script to fail under future circumstances.\n\nExtra-Doc-Files:\n    README.md\n    CHANGELOG.md\nExtra-Source-Files:\n    -- documentation\n    shellcheck.1.md\n    -- A script to build the man page using pandoc\n    manpage\n    -- convenience script for stripping tests\n    striptests\n    -- tests\n    test/shellcheck.hs\n\nsource-repository head\n    type: git\n    location: git://github.com/koalaman/shellcheck.git\n\nlibrary\n    hs-source-dirs: src\n    if impl(ghc < 8.0)\n      build-depends:\n        semigroups\n    build-depends:\n      -- The lower bounds are based on GHC 7.10.3\n      -- The upper bounds are based on GHC 9.8.1\n      aeson                >= 1.4.0 && < 2.3,\n      array                >= 0.5.1 && < 0.6,\n      base                 >= 4.8.0.0 && < 5,\n      bytestring           >= 0.10.6 && < 0.13,\n      containers           >= 0.5.6 && < 0.8,\n      deepseq              >= 1.4.1 && < 1.6,\n      Diff                 >= 0.4.0 && < 1.1,\n      fgl                  (>= 5.7.0 && < 5.8.1.0) || (>= 5.8.1.1 && < 5.9),\n      filepath             >= 1.4.0 && < 1.6,\n      mtl                  >= 2.2.2 && < 2.4,\n      parsec               >= 3.1.14 && < 3.2,\n      QuickCheck           >= 2.14.2 && < 2.16,\n      regex-tdfa           >= 1.2.0 && < 1.4,\n      transformers         >= 0.4.2 && < 0.7,\n\n      -- getXdgDirectory from 1.2.3.0\n      directory            >= 1.2.3 && < 1.4,\n\n      -- When cabal supports it, move this to setup-depends:\n      process\n    exposed-modules:\n      ShellCheck.AST\n      ShellCheck.ASTLib\n      ShellCheck.Analytics\n      ShellCheck.Analyzer\n      ShellCheck.AnalyzerLib\n      ShellCheck.CFG\n      ShellCheck.CFGAnalysis\n      ShellCheck.Checker\n      ShellCheck.Checks.Commands\n      ShellCheck.Checks.ControlFlow\n      ShellCheck.Checks.Custom\n      ShellCheck.Checks.ShellSupport\n      ShellCheck.Data\n      ShellCheck.Debug\n      ShellCheck.Fixer\n      ShellCheck.Formatter.Format\n      ShellCheck.Formatter.CheckStyle\n      ShellCheck.Formatter.Diff\n      ShellCheck.Formatter.GCC\n      ShellCheck.Formatter.JSON\n      ShellCheck.Formatter.JSON1\n      ShellCheck.Formatter.TTY\n      ShellCheck.Formatter.Quiet\n      ShellCheck.Interface\n      ShellCheck.Parser\n      ShellCheck.Prelude\n      ShellCheck.Regex\n    other-modules:\n      Paths_ShellCheck\n    default-language: Haskell98\n\nexecutable shellcheck\n    if impl(ghc < 8.0)\n      build-depends:\n        semigroups\n    build-depends:\n      aeson,\n      array,\n      base,\n      bytestring,\n      containers,\n      deepseq,\n      Diff,\n      directory,\n      fgl,\n      mtl,\n      filepath,\n      parsec,\n      QuickCheck,\n      regex-tdfa,\n      transformers,\n      ShellCheck\n    default-language: Haskell98\n    main-is: shellcheck.hs\n\ntest-suite test-shellcheck\n    type: exitcode-stdio-1.0\n    build-depends:\n      aeson,\n      array,\n      base,\n      bytestring,\n      containers,\n      deepseq,\n      Diff,\n      directory,\n      fgl,\n      filepath,\n      mtl,\n      parsec,\n      QuickCheck,\n      regex-tdfa,\n      transformers,\n      ShellCheck\n    default-language: Haskell98\n    main-is: test/shellcheck.hs\n"
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "manpage",
          "type": "blob",
          "size": 0.18,
          "content": "#!/bin/sh\necho >&2 \"Generating man page using pandoc\"\npandoc -s -f markdown-smart -t man shellcheck.1.md -o shellcheck.1 || exit\necho >&2 \"Done. You can read it with:   man ./shellcheck.1\"\n"
        },
        {
          "name": "nextnumber",
          "type": "blob",
          "size": 0.32,
          "content": "#!/usr/bin/env bash\n# TODO: Find a less trashy way to get the next available error code\nif ! shopt -s globstar\nthen\n  echo \"Error: This script depends on Bash 4.\" >&2\n  exit 1\nfi\n\nfor i in 1 2 3\ndo\n  last=$(grep -hv \"^prop\" ./**/*.hs | grep -Ewo \"${i}[0-9]{3}\" | sort -n | tail -n 1)\n  echo \"Next ${i}xxx: $((last+1))\"\ndone\n"
        },
        {
          "name": "quickrun",
          "type": "blob",
          "size": 0.37,
          "content": "#!/usr/bin/env bash\n# quickrun runs ShellCheck in an interpreted mode.\n# This allows testing changes without recompiling.\n\npath=$(find . -type f -path './dist*/Paths_ShellCheck.hs' | sort | head -n 1)\nif [ -z \"$path\" ]\nthen\n  echo >&2 \"Unable to find Paths_ShellCheck.hs. Please 'cabal build' once.\"\n  exit 1\nfi\npath=\"${path%/*}\"\n\nexec runghc -isrc -i\"$path\" shellcheck.hs \"$@\"\n"
        },
        {
          "name": "quicktest",
          "type": "blob",
          "size": 0.6,
          "content": "#!/usr/bin/env bash\n# quicktest runs the ShellCheck unit tests in an interpreted mode.\n# This allows running tests without compiling, which can be faster.\n# 'cabal test' remains the source of truth.\n\npath=$(find . -type f -path './dist*/Paths_ShellCheck.hs' | sort | head -n 1)\nif [ -z \"$path\" ]\nthen\n    echo >&2 \"Unable to find Paths_ShellCheck.hs. Please 'cabal build' once.\"\n      exit 1\nfi\npath=\"${path%/*}\"\n\n\n(\nvar=$(echo 'main' | ghci -isrc -i\"$path\" test/shellcheck.hs 2>&1 | tee /dev/stderr)\nif [[ $var == *ExitSuccess* ]]\nthen\n  exit 0\nelse\n  grep -C 3 -e \"Fail\" -e \"Tracing\" <<< \"$var\"\n  exit 1\nfi\n) 2>&1\n"
        },
        {
          "name": "setgitversion",
          "type": "blob",
          "size": 0.39,
          "content": "#!/bin/sh -xe\n# This script hardcodes the `git describe` version as ShellCheck's version number.\n# This is done to allow shellcheck --version to differ from the cabal version when\n# building git snapshots.\n\nfile=\"src/ShellCheck/Data.hs\"\ntest -e \"$file\"\ntmp=$(mktemp)\nversion=$(git describe)\nsed -e \"s/=.*VERSIONSTRING.*/= \\\"$version\\\" -- VERSIONSTRING, DO NOT SUBMIT/\" \"$file\" > \"$tmp\"\nmv \"$tmp\" \"$file\"\n"
        },
        {
          "name": "shellcheck.1.md",
          "type": "blob",
          "size": 13.46,
          "content": "% SHELLCHECK(1) Shell script analysis tool\n\n# NAME\n\nshellcheck - Shell script analysis tool\n\n# SYNOPSIS\n\n**shellcheck** [*OPTIONS*...] *FILES*...\n\n# DESCRIPTION\n\nShellCheck is a static analysis and linting tool for sh/bash scripts. It's\nmainly focused on handling typical beginner and intermediate level syntax\nerrors and pitfalls where the shell just gives a cryptic error message or\nstrange behavior, but it also reports on a few more advanced issues where\ncorner cases can cause delayed failures.\n\nShellCheck gives shell specific advice. Consider this line:\n\n    (( area = 3.14*r*r ))\n\n+ For scripts starting with `#!/bin/sh` (or when using `-s sh`), ShellCheck\nwill warn that `(( .. ))` is not POSIX compliant (similar to checkbashisms).\n\n+ For scripts starting with `#!/bin/bash` (or using `-s bash`), ShellCheck\nwill warn that decimals are not supported.\n\n+ For scripts starting with `#!/bin/ksh` (or using `-s ksh`), ShellCheck will\nnot warn at all, as `ksh` supports decimals in arithmetic contexts.\n\n# OPTIONS\n\n**-a**,\\ **--check-sourced**\n\n:   Emit warnings in sourced files. Normally, `shellcheck` will only warn\n    about issues in the specified files. With this option, any issues in\n    sourced files will also be reported.\n\n**-C**[*WHEN*],\\ **--color**[=*WHEN*]\n\n:   For TTY output, enable colors *always*, *never* or *auto*. The default\n    is *auto*. **--color** without an argument is equivalent to\n    **--color=always**.\n\n**-i**\\ *CODE1*[,*CODE2*...],\\ **--include=***CODE1*[,*CODE2*...]\n\n:   Explicitly include only the specified codes in the report. Subsequent **-i**\n    options are cumulative, but all the codes can be specified at once,\n    comma-separated as a single argument. Include options override any provided\n    exclude options.\n\n**-e**\\ *CODE1*[,*CODE2*...],\\ **--exclude=***CODE1*[,*CODE2*...]\n\n:   Explicitly exclude the specified codes from the report. Subsequent **-e**\n    options are cumulative, but all the codes can be specified at once,\n    comma-separated as a single argument.\n\n**--extended-analysis=true/false**\n\n:   Enable/disable Dataflow Analysis to identify more issues (default true). If\n    ShellCheck uses too much CPU/RAM when checking scripts with several\n    thousand lines of code, extended analysis can be disabled with this flag\n    or a directive. This flag overrides directives and rc files.\n\n**-f** *FORMAT*, **--format=***FORMAT*\n\n:   Specify the output format of shellcheck, which prints its results in the\n    standard output. Subsequent **-f** options are ignored, see **FORMATS**\n    below for more information.\n\n**--list-optional**\n\n:   Output a list of known optional checks. These can be enabled with **-o**\n    flags or **enable** directives.\n\n**--norc**\n\n:   Don't try to look for .shellcheckrc configuration files.\n\n--rcfile\\ RCFILE\n\n:   Prefer the specified configuration file over searching for one\n    in the default locations.\n\n**-o**\\ *NAME1*[,*NAME2*...],\\ **--enable=***NAME1*[,*NAME2*...]\n\n:   Enable optional checks. The special name *all* enables all of them.\n    Subsequent **-o** options accumulate. This is equivalent to specifying\n    **enable** directives.\n\n**-P**\\ *SOURCEPATH*,\\ **--source-path=***SOURCEPATH*\n\n:   Specify paths to search for sourced files, separated by `:` on Unix and\n    `;` on Windows. This is equivalent to specifying `search-path`\n    directives.\n\n**-s**\\ *shell*,\\ **--shell=***shell*\n\n:   Specify Bourne shell dialect. Valid values are *sh*, *bash*, *dash*, *ksh*,\n    and *busybox*.\n    The default is to deduce the shell from the file's `shell` directive,\n    shebang, or `.bash/.bats/.dash/.ksh` extension, in that order. *sh* refers to\n    POSIX `sh` (not the system's), and will warn of portability issues.\n\n**-S**\\ *SEVERITY*,\\ **--severity=***severity*\n\n:   Specify minimum severity of errors to consider. Valid values in order of\n    severity are *error*, *warning*, *info* and *style*.\n    The default is *style*.\n\n**-V**,\\ **--version**\n\n:   Print version information and exit.\n\n**-W** *NUM*,\\ **--wiki-link-count=NUM**\n\n:   For TTY output, show *NUM* wiki links to more information about mentioned\n    warnings. Set to 0 to disable them entirely.\n\n**-x**,\\ **--external-sources**\n\n:   Follow `source` statements even when the file is not specified as input.\n    By default, `shellcheck` will only follow files specified on the command\n    line (plus `/dev/null`). This option allows following any file the script\n    may `source`.\n\n    This option may also be enabled using `external-sources=true` in\n    `.shellcheckrc`. This flag takes precedence.\n\n**FILES...**\n\n:   One or more script files to check, or \"-\" for standard input.\n\n\n# FORMATS\n\n**tty**\n\n:   Plain text, human readable output. This is the default.\n\n**gcc**\n\n:   GCC compatible output. Useful for editors that support compiling and\n    showing syntax errors.\n\n    For example, in Vim, `:set makeprg=shellcheck\\ -f\\ gcc\\ %` will allow\n    using `:make` to check the script, and `:cnext` to jump to the next error.\n\n        <file>:<line>:<column>: <type>: <message>\n\n**checkstyle**\n\n:   Checkstyle compatible XML output. Supported directly or through plugins\n    by many IDEs and build monitoring systems.\n\n        <?xml version='1.0' encoding='UTF-8'?>\n        <checkstyle version='4.3'>\n          <file name='file'>\n            <error\n              line='line'\n              column='column'\n              severity='severity'\n              message='message'\n              source='ShellCheck.SC####' />\n            ...\n          </file>\n          ...\n        </checkstyle>\n\n**diff**\n\n:   Auto-fixes in unified diff format. Can be piped to `git apply` or `patch -p1`\n    to automatically apply fixes.\n\n        --- a/test.sh\n        +++ b/test.sh\n        @@ -2,6 +2,6 @@\n         ## Example of a broken script.\n         for f in $(ls *.m3u)\n         do\n        -  grep -qi hq.*mp3 $f \\\n        +  grep -qi hq.*mp3 \"$f\" \\\n             && echo -e 'Playlist $f contains a HQ file in mp3 format'\n         done\n\n\n**json1**\n\n:   Json is a popular serialization format that is more suitable for web\n    applications. ShellCheck's json is compact and contains only the bare\n    minimum.  Tabs are counted as 1 character.\n\n        {\n          comments: [\n            {\n              \"file\": \"filename\",\n              \"line\": lineNumber,\n              \"column\": columnNumber,\n              \"level\": \"severitylevel\",\n              \"code\": errorCode,\n              \"message\": \"warning message\"\n            },\n            ...\n          ]\n        }\n\n**json**\n\n:   This is a legacy version of the **json1** format. It's a raw array of\n    comments, and all offsets have a tab stop of 8.\n\n**quiet**\n\n:   Suppress all normal output. Exit with zero if no issues are found,\n    otherwise exit with one. Stops processing after the first issue.\n\n\n# DIRECTIVES\n\nShellCheck directives can be specified as comments in the shell script.\nIf they appear before the first command, they are considered file-wide.\nOtherwise, they apply to the immediately following command or block:\n\n    # shellcheck key=value key=value\n    command-or-structure\n\nFor example, to suppress SC2035 about using `./*.jpg`:\n\n    # shellcheck disable=SC2035\n    echo \"Files: \" *.jpg\n\nTo tell ShellCheck where to look for an otherwise dynamically determined file:\n\n    # shellcheck source=./lib.sh\n    source \"$(find_install_dir)/lib.sh\"\n\nHere a shell brace group is used to suppress a warning on multiple lines:\n\n    # shellcheck disable=SC2016\n    {\n      echo 'Modifying $PATH'\n      echo 'PATH=foo:$PATH' >> ~/.bashrc\n    }\n\nValid keys are:\n\n**disable**\n:   Disables a comma separated list of error codes for the following command.\n    The command can be a simple command like `echo foo`, or a compound command\n    like a function definition, subshell block or loop. A range can be\n    be specified with a dash, e.g. `disable=SC3000-SC4000` to exclude 3xxx.\n    All warnings can be disabled with `disable=all`.\n\n**enable**\n:   Enable an optional check by name, as listed with **--list-optional**.\n    Only file-wide `enable` directives are considered.\n\n**extended-analysis**\n:   Set to true/false to enable/disable dataflow analysis. Specifying\n    `# shellcheck extended-analysis=false` in particularly large (2000+ line)\n    auto-generated scripts will reduce ShellCheck's resource usage at the\n    expense of certain checks. Extended analysis is enabled by default.\n\n**external-sources**\n:   Set to `true` in `.shellcheckrc` to always allow ShellCheck to open\n    arbitrary files from 'source' statements (the way most tools do).\n\n    This option defaults to `false` only due to ShellCheck's origin as a\n    remote service for checking untrusted scripts. It can safely be enabled\n    for normal development.\n\n**source**\n:   Overrides the filename included by a `source`/`.` statement. This can be\n    used to tell shellcheck where to look for a file whose name is determined\n    at runtime, or to skip a source by telling it to use `/dev/null`.\n\n**source-path**\n:   Add a directory to the search path for `source`/`.` statements (by default,\n    only ShellCheck's working directory is included). Absolute paths will also\n    be rooted in these paths. The special path `SCRIPTDIR` can be used to\n    specify the currently checked script's directory, as in\n    `source-path=SCRIPTDIR` or `source-path=SCRIPTDIR/../libs`. Multiple\n    paths accumulate, and `-P` takes precedence over them.\n\n**shell**\n:   Overrides the shell detected from the shebang.  This is useful for\n    files meant to be included (and thus lacking a shebang), or possibly\n    as a more targeted alternative to 'disable=SC2039'.\n\n# RC FILES\n\nUnless `--norc` is used, ShellCheck will look for a file `.shellcheckrc` or\n`shellcheckrc` in the script's directory and each parent directory. If found,\nit will read `key=value` pairs from it and treat them as file-wide directives.\n\nHere is an example `.shellcheckrc`:\n\n    # Look for 'source'd files relative to the checked script,\n    # and also look for absolute paths in /mnt/chroot\n    source-path=SCRIPTDIR\n    source-path=/mnt/chroot\n\n    # Since 0.9.0, values can be quoted with '' or \"\" to allow spaces\n    source-path=\"My Documents/scripts\"\n\n    # Allow opening any 'source'd file, even if not specified as input\n    external-sources=true\n\n    # Turn on warnings for unquoted variables with safe values\n    enable=quote-safe-variables\n\n    # Turn on warnings for unassigned uppercase variables\n    enable=check-unassigned-uppercase\n\n    # Allow [ ! -z foo ] instead of suggesting -n\n    disable=SC2236\n\nIf no `.shellcheckrc` is found in any of the parent directories, ShellCheck\nwill look in `~/.shellcheckrc` followed by the XDG config directory\n(usually `~/.config/shellcheckrc`) on Unix, or `%APPDATA%/shellcheckrc` on\nWindows. Only the first file found will be used.\n\nNote for Snap users: the Snap sandbox disallows access to hidden files.\nUse `shellcheckrc` without the dot instead.\n\nNote for Docker users: ShellCheck will only be able to look for files that\nare mounted in the container, so `~/.shellcheckrc` will not be read.\n\n\n# ENVIRONMENT VARIABLES\n\nThe environment variable `SHELLCHECK_OPTS` can be set with default flags:\n\n    export SHELLCHECK_OPTS='--shell=bash --exclude=SC2016'\n\nIts value will be split on spaces and prepended to the command line on each\ninvocation.\n\n# RETURN VALUES\n\nShellCheck uses the following exit codes:\n\n+ 0: All files successfully scanned with no issues.\n+ 1: All files successfully scanned with some issues.\n+ 2: Some files could not be processed (e.g. file not found).\n+ 3: ShellCheck was invoked with bad syntax (e.g. unknown flag).\n+ 4: ShellCheck was invoked with bad options (e.g. unknown formatter).\n\n# LOCALE\n\nThis version of ShellCheck is only available in English. All files are\nleniently decoded as UTF-8, with a fallback of ISO-8859-1 for invalid\nsequences. `LC_CTYPE` is respected for output, and defaults to UTF-8 for\nlocales where encoding is unspecified (such as the `C` locale).\n\nWindows users seeing `commitBuffer: invalid argument (invalid character)`\nshould set their terminal to use UTF-8 with `chcp 65001`.\n\n# KNOWN INCOMPATIBILITIES\n\n(If nothing in this section makes sense, you are unlikely to be affected by it)\n\nTo avoid confusing and misguided suggestions, ShellCheck requires function\nbodies to be either `{ brace groups; }` or `( subshells )`, and function names\ncontaining `[]*=!` are only recognized after a `function` keyword.\n\nThe following unconventional function definitions are identical in Bash,\nbut ShellCheck only recognizes the latter.\n\n    [x!=y] () [[ $1 ]]\n    function [x!=y] () { [[ $1 ]]; }\n\nShells without the `function` keyword do not allow these characters in function\nnames to begin with.  Function names containing `{}` are not supported at all.\n\nFurther, if ShellCheck sees `[x!=y]` it will assume this is an invalid\ncomparison. To invoke the above function, quote the command as in `'[x!=y]'`,\nor to retain the same globbing behavior, use `command [x!=y]`.\n\nShellCheck imposes additional restrictions on the `[` command to help diagnose\ncommon invalid uses. While `[ $x= 1 ]` is defined in POSIX, ShellCheck will\nassume it was intended as the much more likely comparison `[ \"$x\" = 1 ]` and\nfail accordingly. For unconventional or dynamic uses of the `[` command, use\n`test` or `\\[` instead.\n\n# REPORTING BUGS\n\nBugs and issues can be reported on GitHub:\n\nhttps://github.com/koalaman/shellcheck/issues\n\n# AUTHORS\n\nShellCheck is developed and maintained by Vidar Holen, with assistance from a\nlong list of wonderful contributors.\n\n# COPYRIGHT\n\nCopyright 2012-2024, Vidar Holen and contributors.\nLicensed under the GNU General Public License version 3 or later,\nsee https://gnu.org/licenses/gpl.html\n\n# SEE ALSO\n\nsh(1) bash(1)\n"
        },
        {
          "name": "shellcheck.hs",
          "type": "blob",
          "size": 21.41,
          "content": "{-\n    Copyright 2012-2019 Vidar Holen\n\n    This file is part of ShellCheck.\n    https://www.shellcheck.net\n\n    ShellCheck is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ShellCheck is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n-}\nimport qualified ShellCheck.Analyzer\nimport           ShellCheck.Checker\nimport           ShellCheck.Data\nimport           ShellCheck.Interface\nimport           ShellCheck.Regex\n\nimport qualified ShellCheck.Formatter.CheckStyle\nimport           ShellCheck.Formatter.Format\nimport qualified ShellCheck.Formatter.Diff\nimport qualified ShellCheck.Formatter.GCC\nimport qualified ShellCheck.Formatter.JSON\nimport qualified ShellCheck.Formatter.JSON1\nimport qualified ShellCheck.Formatter.TTY\nimport qualified ShellCheck.Formatter.Quiet\n\nimport           Control.Exception\nimport           Control.Monad\nimport           Control.Monad.IO.Class\nimport           Control.Monad.Trans.Class\nimport           Control.Monad.Except\nimport           Data.Bits\nimport           Data.Char\nimport           Data.Either\nimport           Data.Functor\nimport           Data.IORef\nimport           Data.List\nimport qualified Data.Map                        as Map\nimport           Data.Maybe\nimport           Data.Monoid\nimport           Data.Semigroup                  (Semigroup (..))\nimport           Prelude                         hiding (catch)\nimport           System.Console.GetOpt\nimport           System.Directory\nimport           System.Environment\nimport           System.Exit\nimport           System.FilePath\nimport           System.IO\n\ndata Flag = Flag String String\ndata Status =\n    NoProblems\n    | SomeProblems\n    | SupportFailure\n    | SyntaxFailure\n    | RuntimeException\n  deriving (Ord, Eq, Show)\n\ninstance Semigroup Status where\n    (<>) = max\n\ninstance Monoid Status where\n    mempty = NoProblems\n    mappend = (Data.Semigroup.<>)\n\ndata Options = Options {\n    checkSpec        :: CheckSpec,\n    externalSources  :: Bool,\n    sourcePaths      :: [FilePath],\n    formatterOptions :: FormatterOptions,\n    minSeverity      :: Severity,\n    rcfile           :: Maybe FilePath\n}\n\ndefaultOptions = Options {\n    checkSpec = emptyCheckSpec,\n    externalSources = False,\n    sourcePaths = [],\n    formatterOptions = newFormatterOptions {\n        foColorOption = ColorAuto\n    },\n    minSeverity = StyleC,\n    rcfile = Nothing\n}\n\nusageHeader = \"Usage: shellcheck [OPTIONS...] FILES...\"\noptions = [\n    Option \"a\" [\"check-sourced\"]\n        (NoArg $ Flag \"sourced\" \"false\") \"Include warnings from sourced files\",\n    Option \"C\" [\"color\"]\n        (OptArg (maybe (Flag \"color\" \"always\") (Flag \"color\")) \"WHEN\")\n        \"Use color (auto, always, never)\",\n    Option \"i\" [\"include\"]\n        (ReqArg (Flag \"include\") \"CODE1,CODE2..\") \"Consider only given types of warnings\",\n    Option \"e\" [\"exclude\"]\n        (ReqArg (Flag \"exclude\") \"CODE1,CODE2..\") \"Exclude types of warnings\",\n    Option \"\" [\"extended-analysis\"]\n        (ReqArg (Flag \"extended-analysis\") \"bool\") \"Perform dataflow analysis (default true)\",\n    Option \"f\" [\"format\"]\n        (ReqArg (Flag \"format\") \"FORMAT\") $\n        \"Output format (\" ++ formatList ++ \")\",\n    Option \"\" [\"list-optional\"]\n        (NoArg $ Flag \"list-optional\" \"true\") \"List checks disabled by default\",\n    Option \"\" [\"norc\"]\n        (NoArg $ Flag \"norc\" \"true\") \"Don't look for .shellcheckrc files\",\n    Option \"\" [\"rcfile\"]\n        (ReqArg (Flag \"rcfile\") \"RCFILE\")\n        \"Prefer the specified configuration file over searching for one\",\n    Option \"o\" [\"enable\"]\n        (ReqArg (Flag \"enable\") \"check1,check2..\")\n        \"List of optional checks to enable (or 'all')\",\n    Option \"P\" [\"source-path\"]\n        (ReqArg (Flag \"source-path\") \"SOURCEPATHS\")\n        \"Specify path when looking for sourced files (\\\"SCRIPTDIR\\\" for script's dir)\",\n    Option \"s\" [\"shell\"]\n        (ReqArg (Flag \"shell\") \"SHELLNAME\")\n        \"Specify dialect (sh, bash, dash, ksh, busybox)\",\n    Option \"S\" [\"severity\"]\n        (ReqArg (Flag \"severity\") \"SEVERITY\")\n        \"Minimum severity of errors to consider (error, warning, info, style)\",\n    Option \"V\" [\"version\"]\n        (NoArg $ Flag \"version\" \"true\") \"Print version information\",\n    Option \"W\" [\"wiki-link-count\"]\n        (ReqArg (Flag \"wiki-link-count\") \"NUM\")\n        \"The number of wiki links to show, when applicable\",\n    Option \"x\" [\"external-sources\"]\n        (NoArg $ Flag \"externals\" \"true\") \"Allow 'source' outside of FILES\",\n    Option \"\" [\"help\"]\n        (NoArg $ Flag \"help\" \"true\") \"Show this usage summary and exit\"\n    ]\ngetUsageInfo = usageInfo usageHeader options\n\nprintErr = lift . hPutStrLn stderr\n\nparseArguments :: [String] -> ExceptT Status IO ([Flag], [FilePath])\nparseArguments argv =\n    case getOpt Permute options argv of\n        (opts, files, []) -> return (opts, files)\n        (_, _, errors) -> do\n            printErr $ concat errors ++ \"\\n\" ++ getUsageInfo\n            throwError SyntaxFailure\n\nformats :: FormatterOptions -> Map.Map String (IO Formatter)\nformats options = Map.fromList [\n    (\"checkstyle\", ShellCheck.Formatter.CheckStyle.format),\n    (\"diff\",  ShellCheck.Formatter.Diff.format options),\n    (\"gcc\",  ShellCheck.Formatter.GCC.format),\n    (\"json\", ShellCheck.Formatter.JSON.format),\n    (\"json1\", ShellCheck.Formatter.JSON1.format),\n    (\"tty\",  ShellCheck.Formatter.TTY.format options),\n    (\"quiet\",  ShellCheck.Formatter.Quiet.format options)\n    ]\n\nformatList = intercalate \", \" names\n  where\n    names = Map.keys $ formats (formatterOptions defaultOptions)\n\ngetOption [] _                  = Nothing\ngetOption (Flag var val:_) name | name == var = return val\ngetOption (_:rest) flag         = getOption rest flag\n\ngetOptions options name =\n    map (\\(Flag _ val) -> val) . filter (\\(Flag var _) -> var == name) $ options\n\nsplit char str =\n    split' str []\n  where\n    split' (a:rest) element =\n        if a == char\n        then reverse element : split' rest []\n        else split' rest (a:element)\n    split' [] element = [reverse element]\n\ntoStatus = fmap (either id id) . runExceptT\n\ngetEnvArgs = do\n    opts <- getEnv \"SHELLCHECK_OPTS\" `catch` cantWaitForLookupEnv\n    return . filter (not . null) $ opts `splitOn` mkRegex \" +\"\n  where\n    cantWaitForLookupEnv :: IOException -> IO String\n    cantWaitForLookupEnv = const $ return \"\"\n\nmain = do\n    params <- getArgs\n    envOpts  <- getEnvArgs\n    let args = envOpts ++ params\n    status <- toStatus $ do\n        (flags, files) <- parseArguments args\n        process flags files\n    exitWith $ statusToCode status\n\nstatusToCode status =\n    case status of\n        NoProblems       -> ExitSuccess\n        SomeProblems     -> ExitFailure 1\n        SyntaxFailure    -> ExitFailure 3\n        SupportFailure   -> ExitFailure 4\n        RuntimeException -> ExitFailure 2\n\nprocess :: [Flag] -> [FilePath] -> ExceptT Status IO Status\nprocess flags files = do\n    options <- foldM (flip parseOption) defaultOptions flags\n    verifyFiles files\n    let format = fromMaybe \"tty\" $ getOption flags \"format\"\n    let formatters = formats $ formatterOptions options\n    formatter <-\n        case Map.lookup format formatters of\n            Nothing -> do\n                printErr $ \"Unknown format \" ++ format\n                printErr \"Supported formats:\"\n                mapM_ (printErr . write) $ Map.keys formatters\n                throwError SupportFailure\n              where write s = \"  \" ++ s\n            Just f -> ExceptT $ fmap Right f\n    sys <- lift $ ioInterface options files\n    lift $ runFormatter sys formatter options files\n\nrunFormatter :: SystemInterface IO -> Formatter -> Options -> [FilePath]\n            -> IO Status\nrunFormatter sys format options files = do\n    header format\n    result <- foldM f NoProblems files\n    footer format\n    return result\n  where\n    f :: Status -> FilePath -> IO Status\n    f status file = do\n        newStatus <- process file `catch` handler file\n        return $! status `mappend` newStatus\n    handler :: FilePath -> IOException -> IO Status\n    handler file e = reportFailure file (show e)\n    reportFailure file str = do\n        onFailure format file str\n        return RuntimeException\n\n    process :: FilePath -> IO Status\n    process filename = do\n        input <- siReadFile sys Nothing filename\n        either (reportFailure filename) check input\n      where\n        check contents = do\n            let checkspec = (checkSpec options) {\n                csFilename = filename,\n                csScript = contents\n            }\n            result <- checkScript sys checkspec\n            onResult format result sys\n            return $\n                if null (crComments result)\n                then NoProblems\n                else SomeProblems\n\nparseEnum name value list =\n    case lookup value list of\n        Just value -> return value\n        Nothing -> do\n            printErr $ \"Unknown value for --\" ++ name ++ \". \" ++\n                       \"Valid options are: \" ++ (intercalate \", \" $ map fst list)\n            throwError SupportFailure\n\nparseColorOption value =\n    parseEnum \"color\" value [\n        (\"auto\",   ColorAuto),\n        (\"always\", ColorAlways),\n        (\"never\",  ColorNever)\n        ]\n\nparseSeverityOption value =\n    parseEnum \"severity\" value [\n        (\"error\",   ErrorC),\n        (\"warning\", WarningC),\n        (\"info\",    InfoC),\n        (\"style\",   StyleC)\n        ]\n\nparseOption flag options =\n    case flag of\n        Flag \"shell\" str ->\n            fromMaybe (die $ \"Unknown shell: \" ++ str) $ do\n                shell <- shellForExecutable str\n                return $ return options {\n                            checkSpec = (checkSpec options) {\n                                csShellTypeOverride = Just shell\n                            }\n                        }\n\n        Flag \"exclude\" str -> do\n            new <- mapM parseNum $ filter (not . null) $ split ',' str\n            let old = csExcludedWarnings . checkSpec $ options\n            return options {\n                checkSpec = (checkSpec options) {\n                    csExcludedWarnings = new ++ old\n                }\n            }\n\n        Flag \"include\" str -> do\n            new <- mapM parseNum $ filter (not . null) $ split ',' str\n            let old = csIncludedWarnings . checkSpec $ options\n            return options {\n                checkSpec = (checkSpec options) {\n                    csIncludedWarnings =\n                      if null new\n                        then old\n                        else Just new `mappend` old\n                }\n            }\n\n        Flag \"version\" _ -> do\n            liftIO printVersion\n            throwError NoProblems\n\n        Flag \"list-optional\" _ -> do\n            liftIO printOptional\n            throwError NoProblems\n\n        Flag \"help\" _ -> do\n            liftIO $ putStrLn getUsageInfo\n            throwError NoProblems\n\n        Flag \"externals\" _ ->\n            return options {\n                externalSources = True\n            }\n\n        Flag \"color\" color -> do\n            option <- parseColorOption color\n            return options {\n                formatterOptions = (formatterOptions options) {\n                    foColorOption = option\n                }\n            }\n\n        Flag \"source-path\" str -> do\n            let paths = splitSearchPath str\n            return options {\n                sourcePaths = (sourcePaths options) ++ paths\n            }\n\n        Flag \"sourced\" _ ->\n            return options {\n                checkSpec = (checkSpec options) {\n                    csCheckSourced = True\n                }\n            }\n\n        Flag \"severity\" severity -> do\n            option <- parseSeverityOption severity\n            return options {\n                checkSpec = (checkSpec options) {\n                    csMinSeverity = option\n                }\n            }\n\n        Flag \"wiki-link-count\" countString -> do\n            count <- parseNum countString\n            return options {\n                formatterOptions = (formatterOptions options) {\n                    foWikiLinkCount = count\n                }\n            }\n\n        Flag \"norc\" _ ->\n            return options {\n                checkSpec = (checkSpec options) {\n                    csIgnoreRC = True\n                }\n            }\n\n        Flag \"rcfile\" str -> do\n            return options {\n                rcfile = Just str\n            }\n\n        Flag \"enable\" value ->\n            let cs = checkSpec options in return options {\n                checkSpec = cs {\n                    csOptionalChecks = (csOptionalChecks cs) ++ split ',' value\n                }\n            }\n\n        Flag \"extended-analysis\" str -> do\n            value <- parseBool str\n            return options {\n                checkSpec = (checkSpec options) {\n                    csExtendedAnalysis = Just value\n                }\n            }\n\n        -- This flag is handled specially in 'process'\n        Flag \"format\" _ -> return options\n\n        Flag str _ -> do\n            printErr $ \"Internal error for --\" ++ str ++ \". Please file a bug :(\"\n            return options\n  where\n    die s = do\n        printErr s\n        throwError SupportFailure\n    parseNum ('S':'C':str) = parseNum str\n    parseNum num = do\n        unless (all isDigit num) $ do\n            printErr $ \"Invalid number: \" ++ num\n            throwError SyntaxFailure\n        return (Prelude.read num :: Integer)\n\n    parseBool str = do\n        case str of\n            \"true\" -> return True\n            \"false\" -> return False\n            _ -> do\n                printErr $ \"Invalid boolean, expected true/false: \" ++ str\n                throwError SyntaxFailure\n\nioInterface :: Options -> [FilePath] -> IO (SystemInterface IO)\nioInterface options files = do\n    inputs <- mapM normalize files\n    cache <- newIORef emptyCache\n    configCache <- newIORef (\"\", Nothing)\n    return (newSystemInterface :: SystemInterface IO) {\n        siReadFile = get cache inputs,\n        siFindSource = findSourceFile inputs (sourcePaths options),\n        siGetConfig = getConfig configCache\n    }\n  where\n    emptyCache :: Map.Map FilePath String\n    emptyCache = Map.empty\n\n    get cache inputs rcSuggestsExternal file = do\n        map <- readIORef cache\n        case Map.lookup file map of\n            Just x  -> return $ Right x\n            Nothing -> fetch cache inputs rcSuggestsExternal file\n\n    fetch cache inputs rcSuggestsExternal file = do\n        ok <- allowable rcSuggestsExternal inputs file\n        if ok\n          then (do\n            (contents, shouldCache) <- inputFile file\n            when shouldCache $\n                modifyIORef cache $ Map.insert file contents\n            return $ Right contents\n            ) `catch` handler\n          else\n            if rcSuggestsExternal == Just False\n            then return $ Left (file ++ \" was not specified as input, and external files were disabled via directive.\")\n            else return $ Left (file ++ \" was not specified as input (see shellcheck -x).\")\n      where\n        handler :: IOException -> IO (Either ErrorMessage String)\n        handler ex = return . Left $ show ex\n\n    allowable rcSuggestsExternal inputs x =\n        if fromMaybe (externalSources options) rcSuggestsExternal\n        then return True\n        else do\n            path <- normalize x\n            return $ path `elem` inputs\n\n    normalize x =\n        canonicalizePath x `catch` fallback x\n      where\n        fallback :: FilePath -> IOException -> IO FilePath\n        fallback path _ = return path\n\n\n    -- Returns the name and contents of .shellcheckrc for the given file\n    getConfig cache filename =\n        case rcfile options of\n            Just file -> do\n                -- We have a specified rcfile. Ignore normal rcfile resolution.\n                (path, result) <- readIORef cache\n                if path == \"/\"\n                  then return result\n                  else do\n                    result <- readConfig file\n                    when (isNothing result) $\n                        hPutStrLn stderr $ \"Warning: unable to read --rcfile \" ++ file\n                    writeIORef cache (\"/\", result)\n                    return result\n\n            Nothing -> do\n                path <- normalize filename\n                let dir = takeDirectory path\n                (previousPath, result) <- readIORef cache\n                if dir == previousPath\n                  then return result\n                  else do\n                    paths <- getConfigPaths dir\n                    result <- findConfig paths\n                    writeIORef cache (dir, result)\n                    return result\n\n    findConfig paths =\n        case paths of\n            (file:rest) -> do\n                contents <- readConfig file\n                if isJust contents\n                  then return contents\n                  else findConfig rest\n            [] -> return Nothing\n\n    -- Get a list of candidate filenames. This includes .shellcheckrc\n    -- in all parent directories, plus the user's home dir and xdg dir.\n    -- The dot is optional for Windows and Snap users.\n    getConfigPaths dir = do\n        let next = takeDirectory dir\n        rest <- if next /= dir\n                then getConfigPaths next\n                else defaultPaths `catch`\n                        ((const $ return []) :: IOException -> IO [FilePath])\n        return $ (dir </> \".shellcheckrc\") : (dir </> \"shellcheckrc\") : rest\n\n    defaultPaths = do\n        home <- getAppUserDataDirectory \"shellcheckrc\"\n        xdg <- getXdgDirectory XdgConfig \"shellcheckrc\"\n        return [home, xdg]\n\n    readConfig file = do\n        exists <- doesFileExist file\n        if exists\n          then do\n            (contents, _) <- inputFile file `catch` handler file\n            return $ Just (file, contents)\n          else\n            return Nothing\n      where\n        handler :: FilePath -> IOException -> IO (String, Bool)\n        handler file err = do\n            hPutStrLn stderr $ file ++ \": \" ++ show err\n            return (\"\", True)\n\n    andM a b arg = do\n        first <- a arg\n        if not first then return False else b arg\n\n    findM p = foldr go (pure Nothing)\n      where\n        go x acc = do\n            b <- p x\n            if b then pure (Just x) else acc\n\n    findSourceFile inputs sourcePathFlag currentScript rcSuggestsExternal sourcePathAnnotation original =\n        if isAbsolute original\n        then\n            let (_, relative) = splitDrive original\n            in find relative original\n        else\n            find original original\n      where\n        find filename deflt = do\n            sources <- findM ((allowable rcSuggestsExternal inputs) `andM` doesFileExist) $\n                        (adjustPath filename):(map ((</> filename) . adjustPath) $ sourcePathFlag ++ sourcePathAnnotation)\n            case sources of\n                Nothing -> return deflt\n                Just first -> return first\n        scriptdir = dropFileName currentScript\n        adjustPath str =\n            case (splitDirectories str) of\n                (\"SCRIPTDIR\":rest) -> joinPath (scriptdir:rest)\n                _ -> str\n\ninputFile file = do\n    (handle, shouldCache) <-\n            if file == \"-\"\n            then return (stdin, True)\n            else do\n                h <- openBinaryFile file ReadMode\n                reopenable <- hIsSeekable h\n                return (h, not reopenable)\n\n    hSetBinaryMode handle True\n    contents <- decodeString <$> hGetContents handle -- closes handle\n\n    seq (length contents) $\n        return (contents, shouldCache)\n\n-- Decode a char8 string into a utf8 string, with fallback on\n-- ISO-8859-1. This avoids depending on additional libraries.\ndecodeString = decode\n  where\n    decode [] = []\n    decode (c:rest) | isAscii c = c : decode rest\n    decode (c:rest) =\n        let num = (fromIntegral $ ord c) :: Int\n            next = case num of\n                _ | num >= 0xF8 -> Nothing\n                  | num >= 0xF0 -> construct (num .&. 0x07) 3 rest\n                  | num >= 0xE0 -> construct (num .&. 0x0F) 2 rest\n                  | num >= 0xC0 -> construct (num .&. 0x1F) 1 rest\n                  | True -> Nothing\n        in\n            case next of\n                Just (n, remainder) -> chr n : decode remainder\n                Nothing             -> c : decode rest\n\n    construct x 0 rest = do\n        guard $ x <= 0x10FFFF\n        return (x, rest)\n    construct x n (c:rest) =\n        let num = (fromIntegral $ ord c) :: Int in\n            if num >= 0x80 && num <= 0xBF\n            then construct ((x `shiftL` 6) .|. (num .&. 0x3f)) (n-1) rest\n            else Nothing\n    construct _ _ _ = Nothing\n\n\nverifyFiles files =\n    when (null files) $ do\n        printErr \"No files specified.\\n\"\n        printErr $ usageInfo usageHeader options\n        throwError SyntaxFailure\n\nprintVersion = do\n    putStrLn   \"ShellCheck - shell script analysis tool\"\n    putStrLn $ \"version: \" ++ shellcheckVersion\n    putStrLn   \"license: GNU General Public License, version 3\"\n    putStrLn   \"website: https://www.shellcheck.net\"\n\nprintOptional = do\n    mapM f list\n  where\n    list = sortOn cdName ShellCheck.Analyzer.optionalChecks\n    f item = do\n        putStrLn $ \"name:    \" ++ cdName item\n        putStrLn $ \"desc:    \" ++ cdDescription item\n        putStrLn $ \"example: \" ++ cdPositive item\n        putStrLn $ \"fix:     \" ++ cdNegative item\n        putStrLn \"\"\n"
        },
        {
          "name": "snap",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "stack.yaml",
          "type": "blob",
          "size": 1.11,
          "content": "# This file was automatically generated by stack init\n# For more information, see: https://docs.haskellstack.org/en/stable/yaml_configuration/\n\n# Specifies the GHC version and set of packages available (e.g., lts-3.5, nightly-2015-09-21, ghc-7.10.2)\nresolver: lts-18.15\n\n# Local packages, usually specified by relative directory name\npackages:\n- '.'\n# Packages to be pulled from upstream that are not in the resolver (e.g., acme-missiles-0.3)\nextra-deps: []\n\n# Override default flag values for local packages and extra-deps\nflags: {}\n\n# Extra package databases containing global packages\nextra-package-dbs: []\n\n# Control whether we use the GHC we find on the path\n# system-ghc: true\n\n# Require a specific version of stack, using version ranges\n# require-stack-version: -any # Default\n# require-stack-version: >= 1.0.0\n\n# Override the architecture used by stack, especially useful on Windows\n# arch: i386\n# arch: x86_64\n\n# Extra directories used by stack for building\n# extra-include-dirs: [/path/to/dir]\n# extra-lib-dirs: [/path/to/dir]\n\n# Allow a newer minor version of GHC than the snapshot specifies\n# compiler-check: newer-minor\n"
        },
        {
          "name": "striptests",
          "type": "blob",
          "size": 1.4,
          "content": "#!/usr/bin/env bash\n# This file strips all unit tests from ShellCheck, removing\n# the dependency on QuickCheck and Template Haskell and\n# reduces the binary size considerably.\nset -o pipefail\n\nsponge() {\n  local data\n  data=\"$(cat)\"\n  printf '%s\\n' \"$data\" > \"$1\"\n}\n\nmodify() {\n  if ! \"${@:2}\" < \"$1\" | sponge \"$1\"\n  then\n    {\n      printf 'Failed to modify %s: ' \"$1\"\n      printf '%q ' \"${@:2}\"\n      printf '\\n'\n    } >&2\n    exit 1\n  fi\n}\n\ndetestify() {\n  printf '%s\\n' '-- AUTOGENERATED from ShellCheck by striptests. Do not modify.'\n  awk '\n    BEGIN {\n      state = 0;\n    }\n\n    /STRIP/ { next; }\n    /LANGUAGE TemplateHaskell/ { next; }\n    /^import.*Test\\./ { next; }\n\n    /^module/ {\n      sub(/,[^,)]*runTests/, \"\");\n    }\n\n    # Delete tests\n    /^prop_/ { state = 1; next; }\n\n    # ..and any blank lines following them.\n    state == 1 && /^ / { next; }\n\n    # Template Haskell marker\n    /^return / {\n      exit;\n    }\n\n    { state = 0; print; }\n    '\n}\n\n\n\nif [[ ! -e 'ShellCheck.cabal' ]]\nthen\n  echo \"Run me from the ShellCheck directory.\" >&2\n  exit 1\nfi\n\nif [[ -d '.git' ]] && ! git diff --exit-code > /dev/null 2>&1\nthen\n  echo \"You have local changes! These may be overwritten.\" >&2\n  exit 2\nfi\n\nmodify 'ShellCheck.cabal' sed -e '\n  /QuickCheck/d\n  /^test-suite/{ s/.*//; q; }\n  '\n\nfind . -name '.git' -prune -o -type f -name '*.hs' -print |\n  while IFS= read -r file\n  do\n    modify \"$file\" detestify\n  done\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}