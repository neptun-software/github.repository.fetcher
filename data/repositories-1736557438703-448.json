{
  "metadata": {
    "timestamp": 1736557438703,
    "page": 448,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "vim/vim",
      "stars": 37154,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".appveyor.yml",
          "type": "blob",
          "size": 0.92,
          "content": "version: \"{build}\"\n\nimage: Visual Studio 2015\n\nskip_tags: true\n\nenvironment:\n  matrix:\n    - FEATURE: HUGE\n  \n    # Alternate environments, not used right now.  2022 is a lot slower.\n    #\n    # - job_name: VS-2015\n    #   appveyor_build_worker_image: Visual Studio 2015\n    #   FEATURE: HUGE\n\n    # - job_name: VS-2017\n    #   appveyor_build_worker_image: Visual Studio 2017\n    #   FEATURE: HUGE\n\n    # - job_name: VS-2019\n    #   appveyor_build_worker_image: Visual Studio 2019\n    #   FEATURE: HUGE\n\n    # - job_name: VS-2022\n    #   appveyor_build_worker_image: Visual Studio 2022\n    #   FEATURE: HUGE\n\n# disabled\n#    - FEATURE: TINY\n#    - FEATURE: NORMAL\n\nmatrix:\n  fast_finish: true\n\nbefore_build:\n  - call ver\n  - ci\\appveyor.bat install\n\nbuild_script:\n  - ci\\appveyor.bat build\n\ntest_script:\n  - ci\\appveyor.bat test\n\nartifacts:\n  - path: src/vim.exe\n    name: vim\n  - path: src/gvim.exe\n    name: gvim\n\n# vim: sw=2 sts=2 et ts=8 sr\n"
        },
        {
          "name": ".cirrus.yml",
          "type": "blob",
          "size": 0.76,
          "content": "env:\n  CIRRUS_CLONE_DEPTH: 3\n  FEATURES: huge\n\nfreebsd_task:\n  name: FreeBSD\n  matrix:\n    - name: FreeBSD 14.2\n      freebsd_instance:\n        image_family: freebsd-14-2\n  timeout_in: 20m\n  install_script:\n    - pkg install -y gettext\n  build_script:\n    - NPROC=$(getconf _NPROCESSORS_ONLN)\n    - ./configure --with-features=${FEATURES}\n    - make -j${NPROC}\n  test_script:\n    - src/vim --version\n      # run tests as user \"cirrus\" instead of root\n    - pw useradd cirrus -m\n    - chown -R cirrus:cirrus .\n    - sudo -u cirrus make test\n  on_failure:\n    test_artifacts:\n      name: \"Cirrus-CI-freebsd-failed-tests\"\n      path: |\n        runtime/indent/testdir/*.fail\n        runtime/syntax/testdir/failed/*\n        src/testdir/failed/*\n      type: application/octet-stream\n"
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 6.65,
          "content": "---\nLanguage: Cpp\nAccessModifierOffset: -4\nAlignAfterOpenBracket: Align\nAlignArrayOfStructures: None\nAlignConsecutiveAssignments:\n  Enabled: false\n  AcrossEmptyLines: false\n  AcrossComments: false\n  AlignCompound: false\n  AlignFunctionPointers: false\n  PadOperators: false\nAlignConsecutiveBitFields:\n  Enabled: false\n  AcrossEmptyLines: false\n  AcrossComments: false\n  AlignCompound: false\n  AlignFunctionPointers: false\n  PadOperators: false\nAlignConsecutiveDeclarations:\n  Enabled: false\n  AcrossEmptyLines: false\n  AcrossComments: false\n  AlignCompound: false\n  AlignFunctionPointers: false\n  PadOperators: false\nAlignConsecutiveMacros:\n  Enabled: false\n  AcrossEmptyLines: false\n  AcrossComments: false\n  AlignCompound: false\n  AlignFunctionPointers: false\n  PadOperators: false\nAlignConsecutiveShortCaseStatements:\n  Enabled: false\n  AcrossEmptyLines: false\n  AcrossComments: false\n  AlignCaseColons: false\nAlignEscapedNewlines: DontAlign\nAlignOperands: Align\nAlignTrailingComments:\n  Kind: Leave\n  OverEmptyLines: 0\nAllowAllArgumentsOnNextLine: false\nAllowAllParametersOfDeclarationOnNextLine: false\nAllowBreakBeforeNoexceptSpecifier: Never\nAllowShortBlocksOnASingleLine: Never\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortCompoundRequirementOnASingleLine: true\nAllowShortEnumsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: None\nAllowShortIfStatementsOnASingleLine: Never\nAllowShortLambdasOnASingleLine: None\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterDefinitionReturnType: All\nAlwaysBreakAfterReturnType: AllDefinitions\nAlwaysBreakBeforeMultilineStrings: false\nAlwaysBreakTemplateDeclarations: MultiLine\nBinPackArguments: true\nBinPackParameters: false\nBitFieldColonSpacing: Both\nBraceWrapping:\n  AfterCaseLabel: true\n  AfterClass: true\n  AfterControlStatement: Always\n  AfterEnum: true\n  AfterExternBlock: true\n  AfterFunction: true\n  AfterNamespace: true\n  AfterObjCDeclaration: true\n  AfterStruct: true\n  AfterUnion: true\n  BeforeCatch: true\n  BeforeElse: true\n  BeforeLambdaBody: false\n  BeforeWhile: true\n  IndentBraces: false\n  SplitEmptyFunction: true\n  SplitEmptyRecord: true\n  SplitEmptyNamespace: true\nBreakAdjacentStringLiterals: true\nBreakAfterAttributes: Leave\nBreakAfterJavaFieldAnnotations: false\nBreakArrays: true\nBreakBeforeBinaryOperators: None\nBreakBeforeConceptDeclarations: Always\nBreakBeforeBraces: Custom\nBreakBeforeInlineASMColon: OnlyMultiline\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializers: BeforeColon\nBreakInheritanceList: BeforeColon\nBreakStringLiterals: true\nColumnLimit: 80\nCommentPragmas: '^ IWYU pragma:'\nCompactNamespaces: false\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: false\nDerivePointerAlignment: false\nDisableFormat: false\nEmptyLineAfterAccessModifier: Never\nEmptyLineBeforeAccessModifier: LogicalBlock\nExperimentalAutoDetectBinPacking: false\nFixNamespaceComments: false\nIfMacros:\n  - KJ_IF_MAYBE\nIncludeBlocks: Preserve\nIncludeCategories:\n  - Regex: '^\"(llvm|llvm-c|clang|clang-c)/'\n    Priority: 2\n    SortPriority: 0\n    CaseSensitive: false\n  - Regex: '^(<|\"(gtest|gmock|isl|json)/)'\n    Priority: 3\n    SortPriority: 0\n    CaseSensitive: false\n  - Regex: '.*'\n    Priority: 1\n    SortPriority: 0\n    CaseSensitive: false\nIncludeIsMainRegex: '(Test)?$'\nIncludeIsMainSourceRegex: ''\nIndentAccessModifiers: false\nIndentCaseBlocks: false\nIndentCaseLabels: true\nIndentExternBlock: AfterExternBlock\nIndentGotoLabels: true\nIndentPPDirectives: AfterHash\nIndentRequiresClause: true\nIndentWidth: 4\nIndentWrappedFunctionNames: false\nInsertBraces: false\nInsertNewlineAtEOF: false\nInsertTrailingCommas: None\nIntegerLiteralSeparator:\n  Binary: 0\n  BinaryMinDigits: 0\n  Decimal: 0\n  DecimalMinDigits: 0\n  Hex: 0\n  HexMinDigits: 0\nJavaScriptQuotes: Leave\nJavaScriptWrapImports: true\nKeepEmptyLinesAtTheStartOfBlocks: true\nKeepEmptyLinesAtEOF: false\nLambdaBodyIndentation: Signature\nLineEnding: DeriveLF\nMacroBlockBegin: ''\nMacroBlockEnd: ''\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nObjCBinPackProtocolList: Auto\nObjCBlockIndentWidth: 4\nObjCBreakBeforeNestedBlockParam: true\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: true\nPackConstructorInitializers: BinPack\nPenaltyBreakAssignment: 4\nPenaltyBreakBeforeFirstCallParameter: 19\nPenaltyBreakComment: 1000000000\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakOpenParenthesis: 0\nPenaltyBreakScopeResolution: 500\nPenaltyBreakString: 1000\nPenaltyBreakTemplateDeclaration: 10\nPenaltyExcessCharacter: 1000000\nPenaltyIndentedWhitespace: 0\nPenaltyReturnTypeOnItsOwnLine: 60\nPointerAlignment: Right\nPPIndentWidth: 1\nQualifierAlignment: Leave\nReferenceAlignment: Pointer\nReflowComments: false\nRemoveBracesLLVM: false\nRemoveParentheses: Leave\nRemoveSemicolon: false\nRequiresClausePosition: OwnLine\nRequiresExpressionIndentation: OuterScope\nSeparateDefinitionBlocks: Leave\nShortNamespaceLines: 1\nSkipMacroDefinitionBody: false\nSortIncludes: CaseSensitive\nSortJavaStaticImport: Before\nSortUsingDeclarations: LexicographicNumeric\nSpaceAfterCStyleCast: false\nSpaceAfterLogicalNot: false\nSpaceAfterTemplateKeyword: true\nSpaceAroundPointerQualifiers: Default\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeCaseColon: false\nSpaceBeforeCpp11BracedList: false\nSpaceBeforeCtorInitializerColon: true\nSpaceBeforeInheritanceColon: true\nSpaceBeforeJsonColon: false\nSpaceBeforeParens: ControlStatementsExceptControlMacros \nSpaceBeforeRangeBasedForLoopColon: true\nSpaceBeforeSquareBrackets: false\nSpaceInEmptyBlock: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles: Never\nSpacesInContainerLiterals: true\nSpacesInLineCommentPrefix:\n  Minimum: 1\n  Maximum: -1\nSpacesInParens: Never\nSpacesInParensOptions:\n  InCStyleCasts: false\n  InConditionalStatements: false\n  InEmptyParentheses: false\n  Other: false\nSpacesInSquareBrackets: false\nStandard: c++03\nTabWidth: 8\nUseTab: Never\nVerilogBreakBetweenInstancePorts: true\nWhitespaceSensitiveMacros:\n  - BOOST_PP_STRINGIZE\n  - CF_SWIFT_NAME\n  - NS_SWIFT_NAME\n  - PP_STRINGIZE\n  - STRINGIZE\n\n# Taken from:\n#   git grep '^#define *FOR_*' src | cut -d':' -f2 | grep -o '[A-Z]*_.*(' \\\n#   | tr -d '(' | LC_ALL=C sort -u\nForEachMacros:\n  - 'FOR_ALL_AUTOCMD_PATTERNS'\n  - 'FOR_ALL_BUFFERS'\n  - 'FOR_ALL_BUFS_FROM_LAST'\n  - 'FOR_ALL_BUF_WININFO'\n  - 'FOR_ALL_CHANNELS'\n  - 'FOR_ALL_CHILD_MENUS'\n  - 'FOR_ALL_DIFFBLOCKS_IN_TAB'\n  - 'FOR_ALL_FRAMES'\n  - 'FOR_ALL_HASHTAB_ITEMS'\n  - 'FOR_ALL_JOBS'\n  - 'FOR_ALL_LIST_ITEMS'\n  - 'FOR_ALL_MENUS'\n  - 'FOR_ALL_NODE_SIBLINGS'\n  - 'FOR_ALL_POPUPWINS'\n  - 'FOR_ALL_POPUPWINS_IN_TAB'\n  - 'FOR_ALL_QFL_ITEMS'\n  - 'FOR_ALL_SIGNS'\n  - 'FOR_ALL_SIGNS_IN_BUF'\n  - 'FOR_ALL_SPELL_LANGS'\n  - 'FOR_ALL_SYNSTATES'\n  - 'FOR_ALL_TABPAGES'\n  - 'FOR_ALL_TAB_WINDOWS'\n  - 'FOR_ALL_TERMS'\n  - 'FOR_ALL_TIMERS'\n  - 'FOR_ALL_WATCHERS'\n  - 'FOR_ALL_WINDOWS'\n  - 'FOR_ALL_WINDOWS_IN_TAB'\n...\n"
        },
        {
          "name": ".codecov.yml",
          "type": "blob",
          "size": 0.2,
          "content": "coverage:\n  range: \"80...100\"\n  status:\n    project:\n      default:\n        threshold: 0.05%\n\ncomment: false\n\n# Files not run by tests\nignore:\n  - \"src/dosinst.c\"\n  - \"src/dosinst.h\"\n  - \"src/uninstall.c\"\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.71,
          "content": "# https://spec.editorconfig.org/#supported-pairs\nroot = true\n\n[*]\nindent_style = tab\ntab_width = 8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.{c,h,proto}]\nindent_size = 4\n\n[*.{md,yml,sh,bat}]\n# This will become the default after we migrate the codebase\nindent_style = space\nindent_size = 2\n\n[*.md]\n# Markdown uses trailing whitespaces to do an hard line break\n# https://spec.commonmark.org/0.31.2/#hard-line-breaks\ntrim_trailing_whitespace = false\n\n[runtime/doc/**.txt]\n# It can mess up some documentation by trying to strip trailing whitespaces\ntrim_trailing_whitespace = false\n\n[src/testdir/test*.vim]\n# Some tests need trailing whitespaces, for example `set showbreak=>>\\ `\ntrim_trailing_whitespace = false\n"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.67,
          "content": "# When making commits that are strictly formatting/style changes, add the\n# commit hash here, so git blame can ignore the change. See docs for more details:\n#\n# https://git-scm.com/docs/git-config#Documentation/git-config.txt-blameignoreRevsFile\n#\n# Run this command to always ignore formatting commits in git blame\n# git config blame.ignoreRevsFile .git-blame-ignore-revs\n\n# Patch v9.1.0829 expanded tabs to spaces in sound.c\n8ce738de3fd7192fa6274730594305cde780074c\n# Patch v9.1.0879 reformated sound.c and sign.c\n3cf094edaff815141d9941b8dba52b9e77d8dfc1\n# change indentation style of netrw plugin\nc363ca1ecd1f8db03663ef98dcf41eeacc3c22c7\nc673b805ad80d0aef07e745d412a2bf298ba1c07\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.03,
          "content": "src/testdir/test42.in diff\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.9,
          "content": "# Unixen: object and executable files.\n*.o\nsrc/vim\nsrc/xxd/xxd\nsrc/auto/if_perl.c\nsrc/auto/gui_gtk_gresources.c\nsrc/auto/gui_gtk_gresources.h\nsrc/auto/os_haiku.rdef\nsrc/objects/.dirstamp\nsrc/objects\nsrc/po/big5corr\nsrc/po/sjiscorr\nsrc/types.vim\n\n# We do need src/auto/configure.\nsrc/auto/config.cache\nsrc/auto/config.h\nsrc/auto/config.log\nsrc/auto/config.mk\nsrc/auto/config.status\nsrc/auto/osdef.h\nsrc/auto/link.log\nsrc/auto/link.sed\nsrc/auto/pathdef.c\n\n# Windows\n*.exe\n*.idb\n*.exp\n*.map\n*.obj\n*.pdb\n*.ilk\n*.sln\n*.suo\n*.res\n*.RES\nvim*.dll\nvim*.lib\nsrc/dobj*/pathdef.c\nsrc/gobj*/pathdef.c\nsrc/obj*/pathdef.c\nsrc/Obj*/pathdef.c\ngvimext.dll\ngvimext.lib\ngvim.lib\nruntime/doc/uganda.nsis.txt\nnsis/icons/*\n/vim90/\n.vscode/\n\n# NetBeans\nnbproject/*\n\n# Mac OSX\nsrc/xxd/xxd.dSYM\n.DS_Store\n\n# All platforms\n*.rej\n*.orig\n*.mo\n*.swp\n*~\n*.pyc\n*.log\nsrc/po/vim.pot\nsrc/tags\n/tags\n/GPATH\n/GTAGS\n/GRTAGS\nnsis/tags\n\n# Generated by \"make test\"\nsrc/po/*.ck\nsrc/po/*.desktop\nsrc/testdir/mbyte.vim\nsrc/testdir/mzscheme.vim\nsrc/testdir/lua.vim\nsrc/testdir/small.vim\nsrc/testdir/tiny.vim\nsrc/testdir/test*.out\nsrc/testdir/test*.failed\nsrc/testdir/test.log\nsrc/testdir/dostmp/*\nsrc/testdir/messages\nsrc/testdir/viminfo\nsrc/testdir/opt_test.vim\nsrc/testdir/failed\nsrc/testdir/starttime\nruntime/indent/testdir/*.out\nruntime/indent/testdir/*.fail\nsrc/memfile_test\nsrc/json_test\nsrc/message_test\nsrc/kword_test\n\n# Generated by \"make install\"\nruntime/doc/doctags\nruntime/doc/tags-*\n\n# Temporarily generated by \"runtime/syntax/generator/make\"\nruntime/syntax/generator/generator.err\nruntime/syntax/generator/sanity_check.err\nruntime/syntax/generator/vim.vim.rc\n\n# Generated by \"make shadow\".  The directory names could be anything but we\n# restrict them to shadow (the default) or shadow-*\nsrc/shadow\nsrc/shadow-*\nsrc/runtime\nsrc/pixmaps\n\n# other files possibly created by tools\nsrc/cscope.out\n\n# Linter/language server files\n/.cache/clangd/\n/.ccls-cache/\n/compile_commands.json\n"
        },
        {
          "name": ".hgignore",
          "type": "blob",
          "size": 1.74,
          "content": "syntax: glob\n\n# Unixen: object and executable files.\n*.o\nsrc/vim\nsrc/xxd/xxd\nsrc/auto/if_perl.c\nsrc/auto/gui_gtk_gresources.c\nsrc/auto/gui_gtk_gresources.h\nsrc/auto/os_haiku.rdef\nsrc/objects/.dirstamp\nsrc/objects\nsrc/po/big5corr\nsrc/po/sjiscorr\nsrc/types.vim\n\n# We do need src/auto/configure.\nsrc/auto/config.cache\nsrc/auto/config.h\nsrc/auto/config.log\nsrc/auto/config.mk\nsrc/auto/config.status\nsrc/auto/osdef.h\nsrc/auto/link.log\nsrc/auto/link.sed\nsrc/auto/pathdef.c\n\n# Windows\n*.exe\n*.idb\n*.exp\n*.map\n*.obj\n*.pdb\n*.ilk\n*.sln\n*.suo\n*.res\n*.RES\nvim*.dll\nvim*.lib\nsrc/dobj*/pathdef.c\nsrc/gobj*/pathdef.c\nsrc/obj*/pathdef.c\nsrc/Obj*/pathdef.c\ngvimext.dll\ngvimext.lib\ngvim.lib\nruntime/doc/uganda.nsis.txt\nnsis/icons/*\n/vim90/\n.vscode/\n\n# NetBeans\nnbproject/*\n\n# Mac OSX\nsrc/xxd/xxd.dSYM\n.DS_Store\n\n# All platforms\n*.rej\n*.orig\n*.mo\n*.swp\n*~\n*.pyc\n*.log\nsrc/po/vim.pot\nsrc/tags\n/tags\n/GPATH\n/GTAGS\n/GRTAGS\nnsis/tags\n\n# Generated by \"make test\"\nsrc/po/*.ck\nsrc/po/*.desktop\nsrc/testdir/mbyte.vim\nsrc/testdir/mzscheme.vim\nsrc/testdir/lua.vim\nsrc/testdir/small.vim\nsrc/testdir/tiny.vim\nsrc/testdir/test*.out\nsrc/testdir/test*.failed\nsrc/testdir/test.log\nsrc/testdir/dostmp/*\nsrc/testdir/messages\nsrc/testdir/viminfo\nsrc/testdir/opt_test.vim\nsrc/testdir/failed\nsrc/testdir/starttime\nruntime/indent/testdir/*.out\nruntime/indent/testdir/*.fail\nsrc/memfile_test\nsrc/json_test\nsrc/message_test\nsrc/kword_test\n\n# Generated by \"make install\"\nruntime/doc/doctags\nruntime/doc/tags-*\n\n# Generated by \"make shadow\".  The directory names could be anything but we\n# restrict them to shadow (the default) or shadow-*\nsrc/shadow\nsrc/shadow-*\nsrc/runtime\nsrc/pixmaps\n\n# other files possibly created by tools\nsrc/cscope.out\n\n# Linter/language server files\n/.cache/clangd/\n/.ccls-cache/\n/compile_commands.json\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 5.24,
          "content": "# Contributing to Vim\n\nPatches are welcome in whatever form.\nDiscussions about patches happen on the [vim-dev][0] mailing list.\nIf you create a pull request on GitHub it will be\nforwarded to the vim-dev mailing list.  You can also send your patch there\ndirectly (but please note, the initial posting is subject to moderation).\nIn that case an attachment with a unified diff format is preferred.\nInformation about the mailing list can be found [on the Vim website][0]\n\nA pull request has the advantage that it will trigger the Continuous\nIntegration tests, you will be warned of problems (you can ignore the coverage\nwarning, it's noisy).\n\nPlease consider adding a test.  All new functionality should be tested and bug\nfixes should be tested for regressions: the test should fail before the fix and\npass after the fix.  Look through recent patches for examples and find help\nwith \":help testing\".  The tests are located under \"src/testdir\".\n\nContributions will be distributed with Vim under the Vim license.  Providing a\nchange to be included implies that you agree with this and your contribution\ndoes not cause us trouble with trademarks or patents.  There is no CLA to sign.\n\n# Reporting issues\n\nWe use GitHub issues, but that is not a requirement.  Writing to the Vim\nmailing list is also fine.\n\nPlease use the GitHub issues only for actual issues. If you are not 100% sure\nthat your problem is a Vim issue, please first discuss this on the Vim user\nmailing list.  Try reproducing the problem without any of your plugins or settings:\n\n    vim --clean\n\nIf you report an issue, please describe exactly how to reproduce it.\nFor example, don't say \"insert some text\" but say what you did exactly:\n`ahere is some text<Esc>`.\nIdeally, the steps you list can be used to write a test to verify the problem\nis fixed.\n\nFeel free to report even the smallest problem, also typos in the documentation.\n\nYou can find known issues in the todo file: `:help todo`.\nOr open [the todo file][todo list] on GitHub to see the latest version.\n\n# Syntax, indent and other runtime files\n\nThe latest version of these files can be obtained from the repository.\nThey are usually not updated with numbered patches. However, they may \nor may not work with older Vim releases (since they may contain new features).\n\nIf you find a problem with one of these files or have a suggestion for\nimprovement, please first try to contact the maintainer directly.\nLook in the header of the file for the name, email address, github handle and/or\nupstream repository.  You may also check the [MAINTAINERS][11] file.\n\nThe maintainer will take care of issues and send updates to the Vim project for\ndistribution with Vim.\n\nIf the maintainer does not respond, contact the [vim-dev][0] mailing list.\n\n## Contributing new runtime files\n\nIf you want to contribute new runtime files for Vim or Neovim, please create a\nPR with your changes against this repository here. For new filetypes, do not forget:\n* to add a new [filetype test][12] (keep it similar to the other filetype tests).\n* all configuration switches should be documented\n  (check [filetype.txt][13] and/or [syntax.txt][14] for filetype and syntax plugins)\n* add yourself as Maintainer to the top of file (again, keep the header similar to\n  other runtime files)\n* add yourself to the [MAINTAINERS][11] file.\n\n# Translations\n\nTranslating messages and runtime files is very much appreciated!  These things\ncan be translated:\n*   Messages in Vim, see [src/po/README.txt][1]\n    Also used for the desktop icons.\n*   Menus, see [runtime/lang/README.txt][2]\n*   Vim tutor, see [runtime/tutor/README.txt][3]\n*   Manual pages, see [runtime/doc/\\*.1][4] for examples\n*   Installer, see [nsis/lang/\\*.nsi][5] for examples\n\nThe help files can be translated and made available separately.\nSee https://www.vim.org/translations.php for examples.\n\n# How do I contribute to the project?\n\nPlease have a look at the following [discussion][6], which should give you some\nideas. Please also check the [develop.txt][7] helpfile for the recommended\nstyle. Often it's also beneficial to check the surrounding code for the style\nbeing used.\n\n# I have a question\n\nIf you have some question on the style guide, please contact the [vim-dev][0]\nmailing list. For other questions please use the [Vi Stack Exchange][8] website, the\n[vim-use][9] mailing list or make use of the [discussion][10] feature here at github.\n\n[todo list]: https://github.com/vim/vim/blob/master/runtime/doc/todo.txt\n[0]: http://www.vim.org/maillist.php#vim-dev\n[1]: https://github.com/vim/vim/blob/master/src/po/README.txt\n[2]: https://github.com/vim/vim/blob/master/runtime/lang/README.txt\n[3]: https://github.com/vim/vim/blob/master/runtime/tutor/README.txt\n[4]: https://github.com/vim/vim/blob/master/runtime/doc/vim.1\n[5]: https://github.com/vim/vim/blob/master/nsis/lang/english.nsi\n[6]: https://github.com/vim/vim/discussions/13087\n[7]: https://github.com/vim/vim/blob/master/runtime/doc/develop.txt\n[8]: https://vi.stackexchange.com\n[9]: http://www.vim.org/maillist.php#vim-use\n[10]: https://github.com/vim/vim/discussions\n[11]: https://github.com/vim/vim/blob/master/.github/MAINTAINERS\n[12]: https://github.com/vim/vim/blob/master/src/testdir/test_filetype.vim\n[13]: https://github.com/vim/vim/blob/master/runtime/doc/filetype.txt\n[14]: https://github.com/vim/vim/blob/master/runtime/doc/syntax.txt\n"
        },
        {
          "name": "Filelist",
          "type": "blob",
          "size": 28.36,
          "content": "# List of distributed Vim files.\n# Used by Makefile.\n\n# Source files for all source archives.\nSRC_ALL =\t\\\n\t\t.cirrus.yml \\\n\t\t.gitattributes \\\n\t\t.git-blame-ignore-revs \\\n\t\t.github/MAINTAINERS \\\n\t\t.github/ISSUE_TEMPLATE/bug_report.yml \\\n\t\t.github/ISSUE_TEMPLATE/feature_request.md \\\n\t\t.github/workflows/ci.yml \\\n\t\t.github/workflows/codeql-analysis.yml \\\n\t\t.github/workflows/coverity.yml \\\n\t\t.github/actions/test_artifacts/action.yml \\\n\t\t.github/dependabot.yml \\\n\t\t.gitignore \\\n\t\t.hgignore \\\n\t\t.appveyor.yml \\\n\t\t.clang-format \\\n\t\t.codecov.yml \\\n\t\t.editorconfig \\\n\t\tci/appveyor.bat \\\n\t\tci/config.mk*.sed \\\n\t\tci/if_ver*.vim \\\n\t\tci/setup-xvfb.sh \\\n\t\tci/remove_snap.sh \\\n\t\tsrc/Make_all.mak \\\n\t\tsrc/README.md \\\n\t\tsrc/alloc.c \\\n\t\tsrc/alloc.h \\\n\t\tsrc/arabic.c \\\n\t\tsrc/arglist.c \\\n\t\tsrc/ascii.h \\\n\t\tsrc/autocmd.c \\\n\t\tsrc/beval.c \\\n\t\tsrc/beval.h \\\n\t\tsrc/blob.c \\\n\t\tsrc/blowfish.c \\\n\t\tsrc/buffer.c \\\n\t\tsrc/bufwrite.c \\\n\t\tsrc/change.c \\\n\t\tsrc/channel.c \\\n\t\tsrc/charset.c \\\n\t\tsrc/cindent.c \\\n\t\tsrc/clientserver.c \\\n\t\tsrc/clipboard.c \\\n\t\tsrc/cmdexpand.c \\\n\t\tsrc/cmdhist.c \\\n\t\tsrc/crypt.c \\\n\t\tsrc/crypt_zip.c \\\n\t\tsrc/debugger.c \\\n\t\tsrc/dict.c \\\n\t\tsrc/diff.c \\\n\t\tsrc/digraph.c \\\n\t\tsrc/drawline.c \\\n\t\tsrc/drawscreen.c \\\n\t\tsrc/edit.c \\\n\t\tsrc/errors.h \\\n\t\tsrc/eval.c \\\n\t\tsrc/evalbuffer.c \\\n\t\tsrc/evalfunc.c \\\n\t\tsrc/evalvars.c \\\n\t\tsrc/evalwindow.c \\\n\t\tsrc/ex_cmdidxs.h \\\n\t\tsrc/ex_cmds.c \\\n\t\tsrc/ex_cmds.h \\\n\t\tsrc/ex_cmds2.c \\\n\t\tsrc/ex_docmd.c \\\n\t\tsrc/ex_eval.c \\\n\t\tsrc/ex_getln.c \\\n\t\tsrc/feature.h \\\n\t\tsrc/fileio.c \\\n\t\tsrc/filepath.c \\\n\t\tsrc/findfile.c \\\n\t\tsrc/float.c \\\n\t\tsrc/fold.c \\\n\t\tsrc/getchar.c \\\n\t\tsrc/gc.c \\\n\t\tsrc/globals.h \\\n\t\tsrc/gui.c \\\n\t\tsrc/gui.h \\\n\t\tsrc/gui_beval.c \\\n\t\tsrc/hardcopy.c \\\n\t\tsrc/hashtab.c \\\n\t\tsrc/help.c \\\n\t\tsrc/highlight.c \\\n\t\tsrc/indent.c \\\n\t\tsrc/insexpand.c \\\n\t\tsrc/job.c \\\n\t\tsrc/json.c \\\n\t\tsrc/json_test.c \\\n\t\tsrc/keymap.h \\\n\t\tsrc/kword_test.c \\\n\t\tsrc/list.c \\\n\t\tsrc/locale.c \\\n\t\tsrc/logfile.c \\\n\t\tsrc/macros.h \\\n\t\tsrc/main.c \\\n\t\tsrc/map.c \\\n\t\tsrc/mark.c \\\n\t\tsrc/match.c \\\n\t\tsrc/mbyte.c \\\n\t\tsrc/memfile.c \\\n\t\tsrc/memfile_test.c \\\n\t\tsrc/memline.c \\\n\t\tsrc/menu.c \\\n\t\tsrc/message.c \\\n\t\tsrc/message_test.c \\\n\t\tsrc/misc1.c \\\n\t\tsrc/misc2.c \\\n\t\tsrc/mouse.c \\\n\t\tsrc/move.c \\\n\t\tsrc/mysign \\\n\t\tsrc/nbdebug.c \\\n\t\tsrc/nbdebug.h \\\n\t\tsrc/netbeans.c \\\n\t\tsrc/normal.c \\\n\t\tsrc/nv_cmdidxs.h \\\n\t\tsrc/nv_cmds.h \\\n\t\tsrc/ops.c \\\n\t\tsrc/option.c \\\n\t\tsrc/option.h \\\n\t\tsrc/optiondefs.h \\\n\t\tsrc/optionstr.c \\\n\t\tsrc/popupmenu.c \\\n\t\tsrc/popupwin.c \\\n\t\tsrc/profiler.c \\\n\t\tsrc/quickfix.c \\\n\t\tsrc/regexp.c \\\n\t\tsrc/regexp_bt.c \\\n\t\tsrc/regexp_nfa.c \\\n\t\tsrc/regexp.h \\\n\t\tsrc/register.c \\\n\t\tsrc/scriptfile.c \\\n\t\tsrc/screen.c \\\n\t\tsrc/search.c \\\n\t\tsrc/session.c \\\n\t\tsrc/sha256.c \\\n\t\tsrc/sign.c \\\n\t\tsrc/sound.c \\\n\t\tsrc/spell.c \\\n\t\tsrc/spell.h \\\n\t\tsrc/spellfile.c \\\n\t\tsrc/spellsuggest.c \\\n\t\tsrc/strings.c \\\n\t\tsrc/structs.h \\\n\t\tsrc/syntax.c \\\n\t\tsrc/tag.c \\\n\t\tsrc/term.c \\\n\t\tsrc/terminal.c \\\n\t\tsrc/termdefs.h \\\n\t\tsrc/termlib.c \\\n\t\tsrc/testing.c \\\n\t\tsrc/textformat.c \\\n\t\tsrc/textobject.c \\\n\t\tsrc/textprop.c \\\n\t\tsrc/time.c \\\n\t\tsrc/typval.c \\\n\t\tsrc/ui.c \\\n\t\tsrc/undo.c \\\n\t\tsrc/usercmd.c \\\n\t\tsrc/userfunc.c \\\n\t\tsrc/version.c \\\n\t\tsrc/version.h \\\n\t\tsrc/vim.h \\\n\t\tsrc/vim9.h \\\n\t\tsrc/vim9class.c \\\n\t\tsrc/vim9cmds.c \\\n\t\tsrc/vim9compile.c \\\n\t\tsrc/vim9execute.c \\\n\t\tsrc/vim9expr.c \\\n\t\tsrc/vim9instr.c \\\n\t\tsrc/vim9script.c \\\n\t\tsrc/vim9type.c \\\n\t\tsrc/viminfo.c \\\n\t\tsrc/winclip.c \\\n\t\tsrc/window.c \\\n\t\tsrc/xxd/xxd.c \\\n\t\tsrc/testdir/gen_opt_test.vim \\\n\t\tsrc/testdir/README.txt \\\n\t\tsrc/testdir/Make_all.mak \\\n\t\tsrc/testdir/*.in \\\n\t\tsrc/testdir/*.py \\\n\t\tsrc/testdir/keycode_check.vim \\\n\t\tsrc/testdir/keycode_check.json \\\n\t\tsrc/testdir/lsan-suppress.txt \\\n\t\tsrc/testdir/sautest/autoload/*.vim \\\n\t\tsrc/testdir/testluaplugin/lua/testluaplugin/*.lua \\\n\t\tsrc/testdir/check.vim \\\n\t\tsrc/testdir/commondumps.vim \\\n\t\tsrc/testdir/gui_init.vim \\\n\t\tsrc/testdir/gui_preinit.vim \\\n\t\tsrc/testdir/mouse.vim \\\n\t\tsrc/testdir/runtest.vim \\\n\t\tsrc/testdir/screendump.vim \\\n\t\tsrc/testdir/setup.vim \\\n\t\tsrc/testdir/setup_gui.vim \\\n\t\tsrc/testdir/shared.vim \\\n\t\tsrc/testdir/vim9.vim \\\n\t\tsrc/testdir/script_util.vim \\\n\t\tsrc/testdir/summarize.vim \\\n\t\tsrc/testdir/term_util.vim \\\n\t\tsrc/testdir/view_util.vim \\\n\t\tsrc/testdir/viewdumps.vim \\\n\t\tsrc/testdir/test[0-9]*.ok \\\n\t\tsrc/testdir/test77a.ok \\\n\t\tsrc/testdir/test77a.com \\\n\t\tsrc/testdir/test_*.vim \\\n\t\tsrc/testdir/python2/*.py \\\n\t\tsrc/testdir/python3/*.py \\\n\t\tsrc/testdir/pythonx/*.py \\\n\t\tsrc/testdir/pythonx/topmodule/__init__.py \\\n\t\tsrc/testdir/pythonx/topmodule/submodule/__init__.py \\\n\t\tsrc/testdir/pythonx/topmodule/submodule/subsubmodule/__init__.py \\\n\t\tsrc/testdir/pythonx/topmodule/submodule/subsubmodule/subsubsubmodule.py \\\n\t\tsrc/testdir/python_after/*.py \\\n\t\tsrc/testdir/python_before/*.py \\\n\t\tsrc/testdir/pyxfile/*.py \\\n\t\tsrc/testdir/dumps/*.dump \\\n\t\tsrc/testdir/dumps/*.vim \\\n\t\tsrc/testdir/samples/*.html \\\n\t\tsrc/testdir/samples/*.txt \\\n\t\tsrc/testdir/samples/*.vim \\\n\t\tsrc/testdir/samples/test000 \\\n\t\tsrc/testdir/samples/test.zip \\\n\t\tsrc/testdir/samples/test_undo.txt.undo \\\n\t\tsrc/testdir/samples/testa.zip \\\n\t\tsrc/testdir/color_ramp.vim \\\n\t\tsrc/testdir/silent.wav \\\n\t\tsrc/testdir/popupbounce.vim \\\n\t\tsrc/testdir/crash/* \\\n\t\tsrc/testdir/ru_RU/LC_MESSAGES/__PACKAGE__.mo \\\n\t\tsrc/proto.h \\\n\t\tsrc/protodef.h \\\n\t\tsrc/proto/alloc.pro \\\n\t\tsrc/proto/arabic.pro \\\n\t\tsrc/proto/arglist.pro \\\n\t\tsrc/proto/autocmd.pro \\\n\t\tsrc/proto/beval.pro \\\n\t\tsrc/proto/blob.pro \\\n\t\tsrc/proto/blowfish.pro \\\n\t\tsrc/proto/buffer.pro \\\n\t\tsrc/proto/bufwrite.pro \\\n\t\tsrc/proto/change.pro \\\n\t\tsrc/proto/channel.pro \\\n\t\tsrc/proto/charset.pro \\\n\t\tsrc/proto/cindent.pro \\\n\t\tsrc/proto/clientserver.pro \\\n\t\tsrc/proto/clipboard.pro \\\n\t\tsrc/proto/cmdexpand.pro \\\n\t\tsrc/proto/cmdhist.pro \\\n\t\tsrc/proto/crypt.pro \\\n\t\tsrc/proto/crypt_zip.pro \\\n\t\tsrc/proto/debugger.pro \\\n\t\tsrc/proto/dict.pro \\\n\t\tsrc/proto/diff.pro \\\n\t\tsrc/proto/digraph.pro \\\n\t\tsrc/proto/drawline.pro \\\n\t\tsrc/proto/drawscreen.pro \\\n\t\tsrc/proto/edit.pro \\\n\t\tsrc/proto/eval.pro \\\n\t\tsrc/proto/evalbuffer.pro \\\n\t\tsrc/proto/evalfunc.pro \\\n\t\tsrc/proto/evalvars.pro \\\n\t\tsrc/proto/evalwindow.pro \\\n\t\tsrc/proto/ex_cmds.pro \\\n\t\tsrc/proto/ex_cmds2.pro \\\n\t\tsrc/proto/ex_docmd.pro \\\n\t\tsrc/proto/ex_eval.pro \\\n\t\tsrc/proto/ex_getln.pro \\\n\t\tsrc/proto/fileio.pro \\\n\t\tsrc/proto/filepath.pro \\\n\t\tsrc/proto/findfile.pro \\\n\t\tsrc/proto/float.pro \\\n\t\tsrc/proto/fold.pro \\\n\t\tsrc/proto/getchar.pro \\\n\t\tsrc/proto/gc.pro \\\n\t\tsrc/proto/gui.pro \\\n\t\tsrc/proto/gui_beval.pro \\\n\t\tsrc/proto/hardcopy.pro \\\n\t\tsrc/proto/hashtab.pro \\\n\t\tsrc/proto/help.pro \\\n\t\tsrc/proto/highlight.pro \\\n\t\tsrc/proto/indent.pro \\\n\t\tsrc/proto/insexpand.pro \\\n\t\tsrc/proto/job.pro \\\n\t\tsrc/proto/json.pro \\\n\t\tsrc/proto/list.pro \\\n\t\tsrc/proto/locale.pro \\\n\t\tsrc/proto/logfile.pro \\\n\t\tsrc/proto/main.pro \\\n\t\tsrc/proto/map.pro \\\n\t\tsrc/proto/mark.pro \\\n\t\tsrc/proto/match.pro \\\n\t\tsrc/proto/mbyte.pro \\\n\t\tsrc/proto/memfile.pro \\\n\t\tsrc/proto/memline.pro \\\n\t\tsrc/proto/menu.pro \\\n\t\tsrc/proto/message.pro \\\n\t\tsrc/proto/misc1.pro \\\n\t\tsrc/proto/misc2.pro \\\n\t\tsrc/proto/mouse.pro \\\n\t\tsrc/proto/move.pro \\\n\t\tsrc/proto/netbeans.pro \\\n\t\tsrc/proto/normal.pro \\\n\t\tsrc/proto/ops.pro \\\n\t\tsrc/proto/option.pro \\\n\t\tsrc/proto/optionstr.pro \\\n\t\tsrc/proto/popupmenu.pro \\\n\t\tsrc/proto/popupwin.pro \\\n\t\tsrc/proto/profiler.pro \\\n\t\tsrc/proto/quickfix.pro \\\n\t\tsrc/proto/regexp.pro \\\n\t\tsrc/proto/register.pro \\\n\t\tsrc/proto/scriptfile.pro \\\n\t\tsrc/proto/screen.pro \\\n\t\tsrc/proto/search.pro \\\n\t\tsrc/proto/session.pro \\\n\t\tsrc/proto/sha256.pro \\\n\t\tsrc/proto/sign.pro \\\n\t\tsrc/proto/sound.pro \\\n\t\tsrc/proto/spell.pro \\\n\t\tsrc/proto/spellfile.pro \\\n\t\tsrc/proto/spellsuggest.pro \\\n\t\tsrc/proto/strings.pro \\\n\t\tsrc/proto/syntax.pro \\\n\t\tsrc/proto/tag.pro \\\n\t\tsrc/proto/term.pro \\\n\t\tsrc/proto/terminal.pro \\\n\t\tsrc/proto/termlib.pro \\\n\t\tsrc/proto/testing.pro \\\n\t\tsrc/proto/textformat.pro \\\n\t\tsrc/proto/textobject.pro \\\n\t\tsrc/proto/textprop.pro \\\n\t\tsrc/proto/time.pro \\\n\t\tsrc/proto/typval.pro \\\n\t\tsrc/proto/ui.pro \\\n\t\tsrc/proto/undo.pro \\\n\t\tsrc/proto/usercmd.pro \\\n\t\tsrc/proto/userfunc.pro \\\n\t\tsrc/proto/version.pro \\\n\t\tsrc/proto/vim9class.pro \\\n\t\tsrc/proto/vim9cmds.pro \\\n\t\tsrc/proto/vim9compile.pro \\\n\t\tsrc/proto/vim9execute.pro \\\n\t\tsrc/proto/vim9expr.pro \\\n\t\tsrc/proto/vim9instr.pro \\\n\t\tsrc/proto/vim9script.pro \\\n\t\tsrc/proto/vim9type.pro \\\n\t\tsrc/proto/viminfo.pro \\\n\t\tsrc/proto/winclip.pro \\\n\t\tsrc/proto/window.pro \\\n\t\tsrc/libvterm/.bzrignore \\\n\t\tsrc/libvterm/.gitignore \\\n\t\tsrc/libvterm/LICENSE \\\n\t\tsrc/libvterm/Makefile \\\n\t\tsrc/libvterm/README \\\n\t\tsrc/libvterm/CONTRIBUTING \\\n\t\tsrc/libvterm/tbl2inc_c.pl \\\n\t\tsrc/libvterm/vterm.pc.in \\\n\t\tsrc/libvterm/doc/URLs \\\n\t\tsrc/libvterm/doc/seqs.txt \\\n\t\tsrc/libvterm/find-wide-chars.pl \\\n\t\tsrc/libvterm/include/vterm.h \\\n\t\tsrc/libvterm/include/vterm_keycodes.h \\\n\t\tsrc/libvterm/src/encoding.c \\\n\t\tsrc/libvterm/src/encoding/DECdrawing.inc \\\n\t\tsrc/libvterm/src/encoding/DECdrawing.tbl \\\n\t\tsrc/libvterm/src/encoding/uk.inc \\\n\t\tsrc/libvterm/src/encoding/uk.tbl \\\n\t\tsrc/libvterm/src/fullwidth.inc \\\n\t\tsrc/libvterm/src/keyboard.c \\\n\t\tsrc/libvterm/src/mouse.c \\\n\t\tsrc/libvterm/src/parser.c \\\n\t\tsrc/libvterm/src/pen.c \\\n\t\tsrc/libvterm/src/rect.h \\\n\t\tsrc/libvterm/src/screen.c \\\n\t\tsrc/libvterm/src/state.c \\\n\t\tsrc/libvterm/src/unicode.c \\\n\t\tsrc/libvterm/src/utf8.h \\\n\t\tsrc/libvterm/src/vterm.c \\\n\t\tsrc/libvterm/src/vterm_internal.h \\\n\t\tsrc/libvterm/t/02parser.test \\\n\t\tsrc/libvterm/t/03encoding_utf8.test \\\n\t\tsrc/libvterm/t/10state_putglyph.test \\\n\t\tsrc/libvterm/t/11state_movecursor.test \\\n\t\tsrc/libvterm/t/12state_scroll.test \\\n\t\tsrc/libvterm/t/13state_edit.test \\\n\t\tsrc/libvterm/t/14state_encoding.test \\\n\t\tsrc/libvterm/t/15state_mode.test \\\n\t\tsrc/libvterm/t/16state_resize.test \\\n\t\tsrc/libvterm/t/17state_mouse.test \\\n\t\tsrc/libvterm/t/18state_termprops.test \\\n\t\tsrc/libvterm/t/20state_wrapping.test \\\n\t\tsrc/libvterm/t/21state_tabstops.test \\\n\t\tsrc/libvterm/t/22state_save.test \\\n\t\tsrc/libvterm/t/25state_input.test \\\n\t\tsrc/libvterm/t/26state_query.test \\\n\t\tsrc/libvterm/t/27state_reset.test \\\n\t\tsrc/libvterm/t/28state_dbl_wh.test \\\n\t\tsrc/libvterm/t/29state_fallback.test \\\n\t\tsrc/libvterm/t/30state_pen.test \\\n\t\tsrc/libvterm/t/31state_rep.test \\\n\t\tsrc/libvterm/t/32state_flow.test \\\n\t\tsrc/libvterm/t/40state_selection.test \\\n\t\tsrc/libvterm/t/60screen_ascii.test \\\n\t\tsrc/libvterm/t/61screen_unicode.test \\\n\t\tsrc/libvterm/t/62screen_damage.test \\\n\t\tsrc/libvterm/t/63screen_resize.test \\\n\t\tsrc/libvterm/t/64screen_pen.test \\\n\t\tsrc/libvterm/t/65screen_protect.test \\\n\t\tsrc/libvterm/t/66screen_extent.test \\\n\t\tsrc/libvterm/t/67screen_dbl_wh.test \\\n\t\tsrc/libvterm/t/68screen_termprops.test \\\n\t\tsrc/libvterm/t/69screen_reflow.test \\\n\t\tsrc/libvterm/t/90vttest_01-movement-1.test \\\n\t\tsrc/libvterm/t/90vttest_01-movement-2.test \\\n\t\tsrc/libvterm/t/90vttest_01-movement-3.test \\\n\t\tsrc/libvterm/t/90vttest_01-movement-4.test \\\n\t\tsrc/libvterm/t/90vttest_02-screen-1.test \\\n\t\tsrc/libvterm/t/90vttest_02-screen-2.test \\\n\t\tsrc/libvterm/t/90vttest_02-screen-3.test \\\n\t\tsrc/libvterm/t/90vttest_02-screen-4.test \\\n\t\tsrc/libvterm/t/92lp1640917.test \\\n\t\tsrc/libvterm/t/harness.c \\\n\t\tsrc/libvterm/t/run-test.pl \\\n\t\tsrc/xdiff/COPYING \\\n\t\tsrc/xdiff/README.txt \\\n\t\tsrc/xdiff/xdiff.h \\\n\t\tsrc/xdiff/xdiffi.c \\\n\t\tsrc/xdiff/xdiffi.h \\\n\t\tsrc/xdiff/xemit.c \\\n\t\tsrc/xdiff/xemit.h \\\n\t\tsrc/xdiff/xhistogram.c \\\n\t\tsrc/xdiff/xinclude.h \\\n\t\tsrc/xdiff/xmacros.h \\\n\t\tsrc/xdiff/xpatience.c \\\n\t\tsrc/xdiff/xprepare.c \\\n\t\tsrc/xdiff/xprepare.h \\\n\t\tsrc/xdiff/xtypes.h \\\n\t\tsrc/xdiff/xutils.c \\\n\t\tsrc/xdiff/xutils.h \\\n\n\n# Source files for Unix-like only.\nSRC_UNIX =\t\\\n\t\tMakefile \\\n\t\tFilelist \\\n\t\tREADME_src.txt \\\n\t\tconfigure \\\n\t\tpixmaps/*.xpm \\\n\t\tpixmaps/*.png \\\n\t\tpixmaps/gen-inline-pixbufs.sh \\\n\t\tpixmaps/stock_icons.h \\\n\t\tsrc/INSTALL \\\n\t\tsrc/INSTALLx.txt \\\n\t\tsrc/Makefile \\\n\t\tsrc/auto/configure \\\n\t\tsrc/config.h.in \\\n\t\tsrc/config.mk.dist \\\n\t\tsrc/config.mk.in \\\n\t\tsrc/configure \\\n\t\tsrc/configure.ac \\\n\t\tsrc/create_cmdidxs.vim \\\n\t\tsrc/create_nvcmdidxs.c \\\n\t\tsrc/create_nvcmdidxs.vim \\\n\t\tsrc/gui_gtk.c \\\n\t\tsrc/gui_gtk_f.c \\\n\t\tsrc/gui_gtk_f.h \\\n\t\tsrc/gui_gtk_x11.c \\\n\t\tsrc/gui_gtk_res.xml \\\n\t\tsrc/gui_motif.c \\\n\t\tsrc/gui_xmdlg.c \\\n\t\tsrc/gui_xmebw.c \\\n\t\tsrc/gui_xmebw.h \\\n\t\tsrc/gui_xmebwp.h \\\n\t\tsrc/gui_x11.c \\\n\t\tsrc/gui_x11_pm.h \\\n\t\tsrc/if_xcmdsrv.c \\\n\t\tsrc/link.sh \\\n\t\tsrc/installman.sh \\\n\t\tsrc/installml.sh \\\n\t\tsrc/install-sh \\\n\t\tsrc/os_unix.c \\\n\t\tsrc/os_unix.h \\\n\t\tsrc/os_unixx.h \\\n\t\tsrc/osdef.sh \\\n\t\tsrc/osdef1.h.in \\\n\t\tsrc/osdef2.h.in \\\n\t\tsrc/pathdef.sh \\\n\t\tsrc/proto/gui_gtk.pro \\\n\t\tsrc/proto/gui_gtk_x11.pro \\\n\t\tsrc/proto/gui_gtk_gresources.pro \\\n\t\tsrc/proto/gui_motif.pro \\\n\t\tsrc/proto/gui_xmdlg.pro \\\n\t\tsrc/proto/gui_x11.pro \\\n\t\tsrc/proto/if_xcmdsrv.pro \\\n\t\tsrc/proto/os_unix.pro \\\n\t\tsrc/proto/pty.pro \\\n\t\tsrc/pty.c \\\n\t\tsrc/testdir/Makefile \\\n\t\tsrc/testdir/unix.vim \\\n\t\tsrc/toolcheck \\\n\t\tsrc/vim_icon.xbm \\\n\t\tsrc/vim_mask.xbm \\\n\t\tsrc/vimtutor \\\n\t\tsrc/gvimtutor \\\n\t\tsrc/which.sh \\\n\t\tsrc/xxd/Makefile \\\n\n# Source files for both MS Windows and Unix-like.\nSRC_DOS_UNIX =\t\\\n\t\tsrc/gui_xim.c \\\n\t\tsrc/if_cscope.c \\\n\t\tsrc/if_lua.c \\\n\t\tsrc/if_mzsch.c \\\n\t\tsrc/if_mzsch.h \\\n\t\tsrc/if_perl.xs \\\n\t\tsrc/if_perlsfio.c \\\n\t\tsrc/if_python.c \\\n\t\tsrc/if_python3.c \\\n\t\tsrc/if_py_both.h \\\n\t\tsrc/if_ruby.c \\\n\t\tsrc/if_tcl.c \\\n\t\tsrc/proto/gui_xim.pro \\\n\t\tsrc/proto/if_cscope.pro \\\n\t\tsrc/proto/if_lua.pro \\\n\t\tsrc/proto/if_mzsch.pro \\\n\t\tsrc/proto/if_perl.pro \\\n\t\tsrc/proto/if_perlsfio.pro \\\n\t\tsrc/proto/if_python.pro \\\n\t\tsrc/proto/if_python3.pro \\\n\t\tsrc/proto/if_ruby.pro \\\n\t\tsrc/proto/if_tcl.pro \\\n\t\tsrc/typemap \\\n\n# Source files for MS Windows (also in the extra archive).\nSRC_DOS =\t\\\n\t\tsrc/GvimExt/*.mak \\\n\t\tsrc/GvimExt/GvimExt.reg \\\n\t\tsrc/GvimExt/Makefile \\\n\t\tsrc/GvimExt/README.txt \\\n\t\tsrc/GvimExt/gvimext.cpp \\\n\t\tsrc/GvimExt/gvimext.def \\\n\t\tsrc/GvimExt/gvimext.h \\\n\t\tsrc/GvimExt/gvimext.inf \\\n\t\tsrc/GvimExt/gvimext.rc \\\n\t\tsrc/GvimExt/gvimext_ming.def \\\n\t\tsrc/GvimExt/gvimext_ming.rc \\\n\t\tsrc/GvimExt/resource.h \\\n\t\tsrc/GvimExt/uninst.bat \\\n\t\tREADME_srcdos.txt \\\n\t\tsrc/INSTALLpc.txt \\\n\t\tsrc/Make_cyg.mak \\\n\t\tsrc/Make_cyg_ming.mak \\\n\t\tsrc/Make_ming.mak \\\n\t\tsrc/Make_mvc.mak \\\n\t\ttools/rename.bat \\\n\t\tsrc/bigvim.bat \\\n\t\tsrc/bigvim64.bat \\\n\t\tsrc/msvc-latest.bat \\\n\t\tsrc/msvc2015.bat \\\n\t\tsrc/msvc2017.bat \\\n\t\tsrc/msvc2019.bat \\\n\t\tsrc/msvc2022.bat \\\n\t\tsrc/msys32.bat \\\n\t\tsrc/msys64.bat \\\n\t\tsrc/dlldata.c \\\n\t\tsrc/dosinst.c \\\n\t\tsrc/dosinst.h \\\n\t\tsrc/gui_dwrite.cpp \\\n\t\tsrc/gui_dwrite.h \\\n\t\tsrc/gui_w32.c \\\n\t\tsrc/gui_w32_rc.h \\\n\t\tsrc/if_ole.cpp \\\n\t\tsrc/if_ole.h \\\n\t\tsrc/if_ole.idl \\\n\t\tsrc/iscygpty.c \\\n\t\tsrc/iscygpty.h \\\n\t\tsrc/iid_ole.c \\\n\t\tsrc/os_dos.h \\\n\t\tsrc/os_w32dll.c \\\n\t\tsrc/os_w32exe.c \\\n\t\tsrc/os_win32.c \\\n\t\tsrc/os_mswin.c \\\n\t\tsrc/os_win32.h \\\n\t\tsrc/proto/gui_w32.pro \\\n\t\tsrc/proto/if_ole.pro \\\n\t\tsrc/proto/os_win32.pro \\\n\t\tsrc/proto/os_mswin.pro \\\n\t\tsrc/testdir/Make_dos.mak \\\n\t\tsrc/testdir/Make_mvc.mak \\\n\t\tsrc/testdir/Make_ming.mak \\\n\t\tsrc/testdir/dos.vim \\\n\t\tsrc/uninstall.c \\\n\t\tsrc/vim.rc \\\n\t\tsrc/vim.manifest \\\n\t\tsrc/vimrun.c \\\n\t\tsrc/xpm_w32.c \\\n\t\tsrc/xpm_w32.h \\\n\t\tsrc/tee/Make_ming.mak \\\n\t\tsrc/tee/Make_mvc.mak \\\n\t\tsrc/tee/Makefile \\\n\t\tsrc/tee/tee.c \\\n\t\tsrc/xxd/Make_ming.mak \\\n\t\tsrc/xxd/Make_mvc.mak \\\n\t\tnsis/gvim.nsi \\\n\t\tnsis/gvim_version.nsh \\\n\t\tnsis/README.txt \\\n\t\tnsis/lang/*.nsi \\\n\t\tnsis/lang/README.txt \\\n\t\tuninstall.txt \\\n\n# Source files for MS Windows without CR/LF translation (also in the extra archive).\nSRC_DOS_BIN =\t\\\n\t\tsrc/tearoff.bmp \\\n\t\tsrc/tools.bmp \\\n\t\tsrc/vim*.ico \\\n\t\tsrc/vim.tlb \\\n\t\tsrc/xpm/COPYRIGHT \\\n\t\tsrc/xpm/README.txt \\\n\t\tsrc/xpm/arm64/lib-vc14/libXpm.lib \\\n\t\tsrc/xpm/include/*.h \\\n\t\tsrc/xpm/x64/lib-vc14/libXpm.lib \\\n\t\tsrc/xpm/x64/lib/libXpm.a \\\n\t\tsrc/xpm/x86/lib-vc14/libXpm.lib \\\n\t\tsrc/xpm/x86/lib/libXpm.a \\\n\t\truntime/bitmaps/vim.ico \\\n\t\tnsis/icons.zip \\\n\n# Source files for Amiga, DOS, etc. (also in the extra archive).\nSRC_AMI_DOS =\t\\\n\n# Source files for Amiga (also in the extra archive).\nSRC_AMI =\t\\\n\t\tREADME_amisrc.txt \\\n\t\tREADME_amisrc.txt.info \\\n\t\tsrc.info \\\n\t\tsrc/INSTALLami.txt \\\n\t\tsrc/Make_ami.mak \\\n\t\tsrc/os_amiga.c \\\n\t\tsrc/os_amiga.h \\\n\t\tsrc/proto/os_amiga.pro \\\n\t\tsrc/testdir/Make_amiga.mak \\\n\t\tsrc/testdir/amiga.vim \\\n\t\tsrc/xxd/Make_amiga.mak \\\n\n# Source files for Haiku (also in the extra archive).\nSRC_HAIKU =\t\\\n\t\tREADME_haiku.txt \\\n\t\tsrc/os_haiku.h \\\n\t\tsrc/os_haiku.rdef.in \\\n\t\tsrc/gui_haiku.cc \\\n\t\tsrc/gui_haiku.h \\\n\t\tsrc/proto/gui_haiku.pro \\\n\n# Source files for the Mac (also in the extra archive).\nSRC_MAC =\t\\\n\t\tsrc/INSTALLmac.txt \\\n\t\tsrc/os_mac.h \\\n\t\tsrc/os_mac_conv.c \\\n\t\tsrc/os_macosx.m \\\n\t\tsrc/proto/os_mac_conv.pro \\\n\t\tsrc/proto/os_macosx.pro \\\n\n# Source files for VMS (in the extra archive).\nSRC_VMS =\t\\\n\t\tsrc/INSTALLvms.txt \\\n\t\tsrc/Make_vms.mms \\\n\t\tsrc/gui_gtk_vms.h \\\n\t\tsrc/os_vms.c \\\n\t\tsrc/os_vms_conf.h \\\n\t\tsrc/os_vms_mms.c \\\n\t\tsrc/proto/os_vms.pro \\\n\t\tsrc/testdir/Make_vms.mms \\\n\t\tsrc/testdir/vms.vim \\\n\t\tsrc/xxd/Make_vms.mms \\\n\t\tvimtutor.com \\\n\n# Source files for QNX (in the extra archive).\nSRC_QNX =\t\\\n\t\tsrc/os_qnx.c \\\n\t\tsrc/os_qnx.h \\\n\t\tsrc/gui_photon.c \\\n\t\tsrc/proto/gui_photon.pro \\\n\t\tsrc/proto/os_qnx.pro \\\n\n# Source files for the extra archive (all sources that are not for Unix).\nSRC_EXTRA =\t\\\n\t\t$(SRC_AMI) \\\n\t\t$(SRC_AMI_DOS) \\\n\t\t$(SRC_DOS) \\\n\t\t$(SRC_DOS_BIN) \\\n\t\t$(SRC_HAIKU) \\\n\t\t$(SRC_MAC) \\\n\t\t$(SRC_QNX) \\\n\t\t$(SRC_VMS) \\\n\t\tREADME_os390.txt \\\n\t\tsrc/link.390 \\\n\t\tsrc/os_vms_fix.com \\\n\t\tsrc/toolbar.phi \\\n\n# Runtime files for all distributions.\nRT_ALL =\t\\\n\t\tREADME.txt \\\n\t\tREADME.md \\\n\t\tREADME_VIM9.md \\\n\t\tLICENSE \\\n\t\tCONTRIBUTING.md \\\n\t\tlang/LICENSE.itx \\\n\t\tlang/README.itx \\\n\t\truntime/bugreport.vim \\\n\t\truntime/doc/*.awk \\\n\t\truntime/doc/*.pl \\\n\t\truntime/doc/*.txt \\\n\t\truntime/doc/Makefile \\\n\t\truntime/doc/Make_all.mak \\\n\t\truntime/doc/doctags.c \\\n\t\truntime/doc/doctags.vim \\\n\t\truntime/doc/test_urls.vim \\\n\t\truntime/doc/vim.1 \\\n\t\truntime/doc/evim.1 \\\n\t\truntime/doc/vimdiff.1 \\\n\t\truntime/doc/vimtutor.1 \\\n\t\truntime/doc/xxd.1 \\\n\t\truntime/ftoff.vim \\\n\t\truntime/gvimrc_example.vim \\\n\t\truntime/import/dist/vimhelp.vim \\\n\t\truntime/import/dist/vimhighlight.vim \\\n\t\truntime/macros/README.txt \\\n\t\truntime/macros/editexisting.vim \\\n\t\truntime/macros/hanoi/click.me \\\n\t\truntime/macros/hanoi/hanoi.vim \\\n\t\truntime/macros/hanoi/poster \\\n\t\truntime/macros/justify.vim \\\n\t\truntime/macros/less.bat \\\n\t\truntime/macros/less.sh \\\n\t\truntime/macros/less.vim \\\n\t\truntime/macros/life/click.me \\\n\t\truntime/macros/life/life.vim \\\n\t\truntime/macros/matchit.vim \\\n\t\truntime/macros/maze/README.txt \\\n\t\truntime/macros/maze/[mM]akefile \\\n\t\truntime/macros/maze/maze.c \\\n\t\truntime/macros/maze/maze_5.78 \\\n\t\truntime/macros/maze/maze_mac \\\n\t\truntime/macros/maze/mazeansi.c \\\n\t\truntime/macros/maze/mazeclean.c \\\n\t\truntime/macros/maze/poster \\\n\t\truntime/macros/shellmenu.vim \\\n\t\truntime/macros/swapmous.vim \\\n\t\truntime/macros/urm/README.txt \\\n\t\truntime/macros/urm/examples \\\n\t\truntime/macros/urm/urm \\\n\t\truntime/macros/urm/urm.vim \\\n\t\truntime/defaults.vim \\\n\t\truntime/evim.vim \\\n\t\truntime/mswin.vim \\\n\t\truntime/optwin.vim \\\n\t\truntime/ftplugin.vim \\\n\t\truntime/ftplugof.vim \\\n\t\truntime/indent.vim \\\n\t\truntime/indoff.vim \\\n\t\truntime/termcap \\\n\t\truntime/tools/README.txt \\\n\t\truntime/tools/[a-z]*[a-z0-9] \\\n\t\truntime/tutor/README.txt \\\n\t\truntime/tutor/tutor1 \\\n\t\truntime/tutor/en/vim-01-beginner.tutor \\\n\t\truntime/tutor/en/vim-01-beginner.tutor.json \\\n\t\truntime/tutor/it/vim-01-beginner.tutor \\\n\t\truntime/tutor/it/vim-01-beginner.tutor.json \\\n\t\truntime/tutor/tutor.tutor \\\n\t\truntime/tutor/tutor.tutor.json \\\n\t\truntime/tutor/tutor.vim \\\n\t\truntime/tutor/tutor2 \\\n\t\truntime/vimrc_example.vim \\\n\t\truntime/pack/dist/opt/cfilter/plugin/cfilter.vim \\\n\t\truntime/pack/dist/opt/comment/plugin/comment.vim \\\n\t\truntime/pack/dist/opt/comment/doc/comment.txt \\\n\t\truntime/pack/dist/opt/comment/doc/tags \\\n\t\truntime/pack/dist/opt/comment/autoload/comment.vim \\\n\t\truntime/pack/dist/opt/dvorak/plugin/dvorak.vim \\\n\t\truntime/pack/dist/opt/dvorak/dvorak/enable.vim \\\n\t\truntime/pack/dist/opt/dvorak/dvorak/disable.vim \\\n\t\truntime/pack/dist/opt/editexisting/plugin/editexisting.vim \\\n\t\truntime/pack/dist/opt/editorconfig/.editorconfig \\\n\t\truntime/pack/dist/opt/editorconfig/CONTRIBUTORS \\\n\t\truntime/pack/dist/opt/editorconfig/LICENSE* \\\n\t\truntime/pack/dist/opt/editorconfig/mkzip.sh \\\n\t\truntime/pack/dist/opt/editorconfig/README.md \\\n\t\truntime/pack/dist/opt/editorconfig/autoload/*.vim \\\n\t\truntime/pack/dist/opt/editorconfig/autoload/editorconfig_core/*.vim \\\n\t\truntime/pack/dist/opt/editorconfig/doc/tags \\\n\t\truntime/pack/dist/opt/editorconfig/doc/editorconfig.txt \\\n\t\truntime/pack/dist/opt/editorconfig/ftdetect/editorconfig.vim \\\n\t\truntime/pack/dist/opt/editorconfig/plugin/editorconfig.vim \\\n\t\truntime/pack/dist/opt/helptoc/autoload/helptoc.vim \\\n\t\truntime/pack/dist/opt/helptoc/plugin/helptoc.vim \\\n\t\truntime/pack/dist/opt/justify/plugin/justify.vim \\\n\t\truntime/pack/dist/opt/matchit/plugin/matchit.vim \\\n\t\truntime/pack/dist/opt/matchit/doc/matchit.txt \\\n\t\truntime/pack/dist/opt/matchit/doc/tags \\\n\t\truntime/pack/dist/opt/matchit/autoload/*.vim \\\n\t\truntime/pack/dist/opt/nohlsearch/plugin/nohlsearch.vim \\\n\t\truntime/pack/dist/opt/shellmenu/plugin/shellmenu.vim \\\n\t\truntime/pack/dist/opt/swapmouse/plugin/swapmouse.vim \\\n\t\truntime/pack/dist/opt/termdebug/plugin/termdebug.vim \\\n\n# Runtime files for all distributions without CR/LF translation.\nRT_ALL_BIN =\t\\\n\t\truntime/doc/tags \\\n\t\truntime/print/*.ps \\\n\n# Runtime script files.\nRT_SCRIPTS =\t\\\n\t\truntime/filetype.vim \\\n\t\truntime/scripts.vim \\\n\t\truntime/menu.vim \\\n\t\truntime/macmap.vim \\\n\t\truntime/delmenu.vim \\\n\t\truntime/synmenu.vim \\\n\t\truntime/makemenu.vim \\\n\t\truntime/autoload/*.vim \\\n\t\truntime/autoload/README.txt \\\n\t\truntime/autoload/cargo/*.vim \\\n\t\truntime/autoload/dist/*.vim \\\n\t\truntime/autoload/rust/*.vim \\\n\t\truntime/autoload/xml/*.vim \\\n\t\truntime/colors/*.vim \\\n\t\truntime/colors/README.txt \\\n\t\truntime/colors/lists/*.vim \\\n\t\truntime/colors/tools/*.vim \\\n\t\truntime/compiler/*.vim \\\n\t\truntime/compiler/README.txt \\\n\t\truntime/indent/*.vim \\\n\t\truntime/indent/README.txt \\\n\t\truntime/indent/Makefile \\\n\t\truntime/indent/testdir/README.txt \\\n\t\truntime/indent/testdir/*.vim \\\n\t\truntime/indent/testdir/*.in \\\n\t\truntime/indent/testdir/*.ok \\\n\t\truntime/ftplugin/*.vim \\\n\t\truntime/ftplugin/logtalk.dict \\\n\t\truntime/ftplugin/README.txt \\\n\t\truntime/plugin/*.vim \\\n\t\truntime/plugin/README.txt \\\n\t\truntime/syntax/*.vim \\\n\t\truntime/syntax/README.txt \\\n\t\truntime/syntax/modula2/opt/*.vim \\\n\t\truntime/syntax/shared/*.vim \\\n\t\truntime/syntax/shared/README.txt \\\n\t\truntime/syntax/Makefile \\\n\t\truntime/syntax/testdir/README.txt \\\n\t\truntime/syntax/testdir/runtest.vim \\\n\t\truntime/syntax/testdir/viewdumps.vim \\\n\t\truntime/syntax/testdir/ftplugin/*.* \\\n\t\truntime/syntax/testdir/input/*.* \\\n\t\truntime/syntax/testdir/input/selftestdir/* \\\n\t\truntime/syntax/testdir/input/setup/*.* \\\n\t\truntime/syntax/testdir/dumps/*.dump \\\n\t\truntime/syntax/testdir/dumps/*.vim \\\n\t\truntime/syntax/generator/Makefile \\\n\t\truntime/syntax/generator/README.md \\\n\t\truntime/syntax/generator/gen_syntax_vim.vim \\\n\t\truntime/syntax/generator/update_date.vim \\\n\t\truntime/syntax/generator/vim.vim.base \\\n\n# Unix-like runtime.\nRT_UNIX =\t\\\n\t\tREADME_unix.txt \\\n\t\truntime/hi16-action-make.png \\\n\t\truntime/hi22-action-make.png \\\n\t\truntime/gvim.desktop \\\n\t\truntime/vim.desktop \\\n\n# Unix-like and MS Windows runtime without CR/LF translation.\nRT_UNIX_DOS_BIN =\t\\\n\t\truntime/vim16x16.gif \\\n\t\truntime/vim16x16.png \\\n\t\truntime/vim16x16.xpm \\\n\t\truntime/vim32x32.gif \\\n\t\truntime/vim32x32.png \\\n\t\truntime/vim32x32.xpm \\\n\t\truntime/vim48x48.gif \\\n\t\truntime/vim48x48.png \\\n\t\truntime/vim48x48.xpm \\\n\n# Runtime not for Unix-like or extra.\nRT_NO_UNIX =\t\\\n\n# Runtime for Amiga (also in the extra archive).\nRT_AMI_DOS =\t\\\n\t\truntime/doc/evim.man \\\n\t\truntime/doc/vim.man \\\n\t\truntime/doc/vimdiff.man \\\n\t\truntime/doc/vimtutor.man \\\n\t\truntime/doc/xxd.man \\\n\n# MS Windows runtime (also in the extra archive).\nRT_DOS =\t\\\n\t\tREADME_dos.txt \\\n\t\truntime/doc/Make_mvc.mak \\\n\t\truntime/indent/Make_mvc.mak \\\n\t\truntime/tutor/Make_mvc.mak \\\n\t\truntime/lang/Make_mvc.mak \\\n\t\tvimtutor.bat \\\n\n# MS Windows runtime without CR/LF translation (also in the extra archive).\nRT_DOS_BIN =\t\\\n\t\truntime/vimlogo.cdr \\\n\t\truntime/vimlogo.eps \\\n\t\truntime/vimlogo.gif \\\n\t\truntime/vimlogo.pdf \\\n\t\truntime/vimlogo.svg \\\n\n# Amiga runtime (also in the extra archive)\nRT_AMI =\t\\\n\t\tREADME.txt.info \\\n\t\tREADME_ami.txt \\\n\t\tREADME_ami.txt.info \\\n\t\truntime/doc.info \\\n\t\truntime/doc/*.info \\\n\t\truntime/icons/README.txt \\\n\t\truntime/icons/*.info \\\n\t\truntime/icons.info \\\n\t\truntime/macros.info \\\n\t\truntime/macros/*.info \\\n\t\truntime/macros/hanoi/*.info \\\n\t\truntime/macros/life/*.info \\\n\t\truntime/macros/maze/*.info \\\n\t\truntime/macros/urm/*.info \\\n\t\truntime/tools.info \\\n\t\truntime/tutor.info \\\n\t\truntime/tutor/*.info \\\n\n# Runtime files in extra archive.\nRT_EXTRA =\t\\\n\t\t$(RT_AMI) \\\n\t\t$(RT_AMI_DOS) \\\n\t\t$(RT_DOS) \\\n\t\t$(RT_DOS_BIN) \\\n\t\tREADME_mac.txt \\\n\n# Included in all Amiga archives.\nROOT_AMI =\t\\\n\t\tContents \\\n\t\tContents.info \\\n\t\truntime.info \\\n\t\tvimdir.info \\\n\n# Root files for the extra archive.\nROOT_EXTRA =\t\\\n\t\t$(ROOT_AMI) \\\n\n# Files for Amiga small binary (also in extra archive).\nBIN_AMI =\t\\\n\t\tREADME_amibin.txt \\\n\t\tREADME_amibin.txt.info \\\n\t\tVim.info \\\n\t\tXxd.info \\\n\n# Files for MS Windows binary (also in extra archive).\nBIN_DOS =\t\\\n\t\tREADME_bindos.txt \\\n\t\tuninstall.txt \\\n\n# Files for Win32 OLE binary (also in extra archive).\nBIN_OLE =\t\\\n\t\tREADME_ole.txt \\\n\n# Files for Win32s binary (also in extra archive).\nBIN_W32S =\t\\\n\t\tREADME_w32s.txt \\\n\n# Files for VMS binary (also in extra archive).\nBIN_VMS =\t\\\n\t\tREADME_vms.txt \\\n\n# Files for OS/2 binary (also in extra archive).\nBIN_OS2 =\t\\\n\t\tREADME_os2.txt \\\n\n# Binary files for extra archive.\nBIN_EXTRA =\t\\\n\t\t$(BIN_AMI) \\\n\t\t$(BIN_DOS) \\\n\t\t$(BIN_OLE) \\\n\t\t$(BIN_W32S) \\\n\t\t$(BIN_VMS) \\\n\t\t$(BIN_OS2) \\\n\n# All files for extra archive.\nEXTRA =\t\t\\\n\t\t$(BIN_EXTRA) \\\n\t\t$(ROOT_EXTRA) \\\n\t\t$(RT_EXTRA) \\\n\t\t$(SRC_EXTRA) \\\n\t\tREADME_extra.txt \\\n\t\truntime/vimlogo.xpm \\\n\n# Files in READMEdir that are included from the top dir.\nIN_README_DIR = \\\n\t\tREADME.txt.info \\\n\t\tREADME_ami.txt \\\n\t\tREADME_ami.txt.info \\\n\t\tREADME_amibin.txt \\\n\t\tREADME_amibin.txt.info \\\n\t\tREADME_amisrc.txt \\\n\t\tREADME_amisrc.txt.info \\\n\t\tREADME_bindos.txt \\\n\t\tREADME_dos.txt \\\n\t\tREADME_extra.txt \\\n\t\tREADME_haiku.txt \\\n\t\tREADME_mac.txt \\\n\t\tREADME_ole.txt \\\n\t\tREADME_os2.txt \\\n\t\tREADME_os390.txt \\\n\t\tREADME_src.txt \\\n\t\tREADME_srcdos.txt \\\n\t\tREADME_unix.txt \\\n\t\tREADME_vimlogo.txt \\\n\t\tREADME_vms.txt \\\n\t\tREADME_w32s.txt \\\n\t\tContents \\\n\t\tContents.info \\\n\t\tVim.info \\\n\t\tXxd.info \\\n\t\truntime.info \\\n\t\tsrc.info \\\n\t\tvimdir.info \\\n\n# Generic language files.\nLANG_GEN = \\\n\t\tREADME.??x.txt \\\n\t\truntime/doc/*-da.1 \\\n\t\truntime/doc/*-da.UTF-8.1 \\\n\t\truntime/doc/*-de.1 \\\n\t\truntime/doc/*-de.UTF-8.1 \\\n\t\truntime/doc/*-fr.1 \\\n\t\truntime/doc/*-fr.UTF-8.1 \\\n\t\truntime/doc/*-it.1 \\\n\t\truntime/doc/*-it.UTF-8.1 \\\n\t\truntime/doc/*-ja.UTF-8.1 \\\n\t\truntime/doc/*-pl.1 \\\n\t\truntime/doc/*-pl.UTF-8.1 \\\n\t\truntime/doc/*-ru.1 \\\n\t\truntime/doc/*-ru.UTF-8.1 \\\n\t\truntime/doc/*-tr.1 \\\n\t\truntime/doc/*-tr.UTF-8.1 \\\n\t\truntime/doc/uganda.??x \\\n\t\truntime/lang/README.txt \\\n\t\truntime/lang/Makefile \\\n\t\truntime/lang/Make_all.mak \\\n\t\truntime/lang/menu_*.vim \\\n\t\truntime/keymap/README.txt \\\n\t\truntime/keymap/*.vim \\\n\t\truntime/tutor/README.*.txt \\\n\t\truntime/tutor/Makefile \\\n\t\truntime/tutor/Make_all.mak \\\n\t\truntime/tutor/tutor1.utf-8 \\\n\t\truntime/tutor/tutor1.?? \\\n\t\truntime/tutor/tutor1.??.utf-8 \\\n\t\truntime/tutor/tutor1.??.euc \\\n\t\truntime/tutor/tutor1.??.sjis \\\n\t\truntime/tutor/tutor1.??.iso9 \\\n\t\truntime/tutor/tutor1.??.big5 \\\n\t\truntime/tutor/tutor1.??.cp1250 \\\n\t\truntime/tutor/tutor1.??.cp1251 \\\n\t\truntime/tutor/tutor1.??.cp737 \\\n\t\truntime/tutor/tutor1.??_??.utf-8 \\\n\t\truntime/tutor/tutor1.bar \\\n\t\truntime/tutor/tutor1.bar.utf-8 \\\n\t\truntime/tutor/tutor2.utf-8 \\\n\t\truntime/tutor/tutor2.?? \\\n\t\truntime/tutor/tutor2.??.utf-8 \\\n\t\truntime/spell/README.txt \\\n\t\truntime/spell/??/*.diff \\\n\t\truntime/spell/??/main.aap \\\n\t\truntime/spell/sr/README_sr.txt \\\n\t\truntime/spell/sr/convert.vim \\\n\t\truntime/spell/tet/*.diff \\\n\t\truntime/spell/tet/main.aap \\\n\t\truntime/spell/check/main.aap \\\n\t\truntime/spell/check/*.aff \\\n\t\truntime/spell/check/*.dic \\\n\t\truntime/spell/yi/README.txt \\\n\t\truntime/spell/main.aap \\\n\t\truntime/spell/*.vim \\\n\n# Generic language files, binary.\nLANG_GEN_BIN = \\\n\t\truntime/spell/README_en.txt \\\n\t\truntime/spell/en.ascii.spl \\\n\t\truntime/spell/en.latin1.spl \\\n\t\truntime/spell/en.utf-8.spl \\\n\t\truntime/spell/en.ascii.sug \\\n\t\truntime/spell/en.latin1.sug \\\n\t\truntime/spell/en.utf-8.sug \\\n\n# All files for lang archive.\nLANG_SRC = \\\n\t\tsrc/po/README.txt \\\n\t\tsrc/po/README_mingw.txt \\\n\t\tsrc/po/README_mvc.txt \\\n\t\tsrc/po/check.vim \\\n\t\tsrc/po/cleanup.vim \\\n\t\tsrc/po/tojavascript.vim \\\n\t\tsrc/po/fixfilenames.vim \\\n\t\tsrc/po/Makefile \\\n\t\tsrc/po/Make_all.mak \\\n\t\tsrc/po/Make_cyg.mak \\\n\t\tsrc/po/Make_ming.mak \\\n\t\tsrc/po/Make_mvc.mak \\\n\t\tsrc/po/vim.desktop.in \\\n\t\tsrc/po/gvim.desktop.in \\\n\t\tsrc/po/sjiscorr.c \\\n\t\tsrc/po/big5corr.c \\\n\t\tsrc/po/*.po \\\n\n# The language files for the Win32 lang archive.\nLANG_DOS = \\\n\t\tsrc/po/*.mo \\\n\n# Files in the repository that are deliberately not listed above, and will thus\n# be excluded from distribution tarballs and the like.\n# This excludes them from the CI check for unlisted files.\nIGNORE = \\\n\t\t.appveyor.yml \\\n\t\t.github/FUNDING.yml \\\n\t\t.github/labeler.yml \\\n\t\t.github/workflows/label.yml \\\n\t\tSECURITY.md \\\n\t\tci/unlisted.make \\\n\t\tsrc/libvterm/CODE-MAP \\\n\t\truntime/syntax/testdir/input/html_html \\\n\n# vim: set ft=make:\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 4.9,
          "content": "VIM LICENSE\n\nI)  There are no restrictions on distributing unmodified copies of Vim except\n    that they must include this license text.  You can also distribute\n    unmodified parts of Vim, likewise unrestricted except that they must\n    include this license text.  You are also allowed to include executables\n    that you made from the unmodified Vim sources, plus your own usage\n    examples and Vim scripts.\n\nII) It is allowed to distribute a modified (or extended) version of Vim,\n    including executables and/or source code, when the following four\n    conditions are met:\n    1) This license text must be included unmodified.\n    2) The modified Vim must be distributed in one of the following five ways:\n       a) If you make changes to Vim yourself, you must clearly describe in\n          the distribution how to contact you.  When the maintainer asks you\n          (in any way) for a copy of the modified Vim you distributed, you\n          must make your changes, including source code, available to the\n          maintainer without fee.  The maintainer reserves the right to\n          include your changes in the official version of Vim.  What the\n          maintainer will do with your changes and under what license they\n          will be distributed is negotiable.  If there has been no negotiation\n          then this license, or a later version, also applies to your changes.\n          The current maintainers are listed here: https://github.com/orgs/vim/people.\n          If this changes it will be announced in appropriate places (most likely\n          vim.sf.net, www.vim.org and/or comp.editors). When it is completely\n          impossible to contact the maintainer, the obligation to send him\n          your changes ceases.  Once the maintainer has confirmed that he has\n          received your changes they will not have to be sent again.\n       b) If you have received a modified Vim that was distributed as\n          mentioned under a) you are allowed to further distribute it\n          unmodified, as mentioned at I).  If you make additional changes the\n          text under a) applies to those changes.\n       c) Provide all the changes, including source code, with every copy of\n          the modified Vim you distribute.  This may be done in the form of a\n          context diff.  You can choose what license to use for new code you\n          add.  The changes and their license must not restrict others from\n          making their own changes to the official version of Vim.\n       d) When you have a modified Vim which includes changes as mentioned\n          under c), you can distribute it without the source code for the\n          changes if the following three conditions are met:\n          - The license that applies to the changes permits you to distribute\n            the changes to the Vim maintainer without fee or restriction, and\n            permits the Vim maintainer to include the changes in the official\n            version of Vim without fee or restriction.\n          - You keep the changes for at least three years after last\n            distributing the corresponding modified Vim.  When the maintainer\n            or someone who you distributed the modified Vim to asks you (in\n            any way) for the changes within this period, you must make them\n            available to him.\n          - You clearly describe in the distribution how to contact you.  This\n            contact information must remain valid for at least three years\n            after last distributing the corresponding modified Vim, or as long\n            as possible.\n       e) When the GNU General Public License (GPL) applies to the changes,\n          you can distribute the modified Vim under the GNU GPL version 2 or\n          any later version.\n    3) A message must be added, at least in the output of the \":version\"\n       command and in the intro screen, such that the user of the modified Vim\n       is able to see that it was modified.  When distributing as mentioned\n       under 2)e) adding the message is only required for as far as this does\n       not conflict with the license used for the changes.\n    4) The contact information as required under 2)a) and 2)d) must not be\n       removed or changed, except that the person himself can make\n       corrections.\n\nIII) If you distribute a modified version of Vim, you are encouraged to use\n     the Vim license for your changes and make them available to the\n     maintainer, including the source code.  The preferred way to do this is\n     by e-mail or by uploading the files to a server and e-mailing the URL.\n     If the number of changes is small (e.g., a modified Makefile) e-mailing a\n     context diff will do.  The e-mail address to be used is\n     <maintainer@vim.org>\n\nIV)  It is not allowed to remove this license from the distribution of the Vim\n     sources, parts of it or from a modified version.  You may use this\n     license for previous Vim releases instead of the license that they came\n     with, at your option.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 20.33,
          "content": "# This Makefile has two purposes:\n# 1. Starting the compilation of Vim for Unix.\n# 2. Creating the various distribution files.\n\n\n#########################################################################\n# 1. Starting the compilation of Vim for Unix.\n#\n# Using this Makefile without an argument will compile Vim for Unix.\n# \"make install\" is also possible.\n#\n# NOTE: If this doesn't work properly, first change directory to \"src\" and use\n# the Makefile there:\n#\tcd src\n#\tmake [arguments]\n# Noticed on AIX systems when using this Makefile: Trying to run \"cproto\" or\n# something else after Vim has been compiled.  Don't know why...\n# Noticed on OS/390 Unix: Restarts configure.\n#\n# The first (default) target is \"first\".  This will result in running\n# \"make first\", so that the target from \"src/auto/config.mk\" is picked\n# up properly when config didn't run yet.  Doing \"make all\" before configure\n# has run can result in compiling with $(CC) empty.\n\nfirst:\n\t@if test ! -f src/auto/config.mk; then \\\n\t\tcp src/config.mk.dist src/auto/config.mk; \\\n\tfi\n\t@echo \"Starting make in the src directory.\"\n\t@echo \"If there are problems, cd to the src directory and run make there\"\n\tcd src && $(MAKE) $@\n\n# Some make programs use the last target for the $@ default; put the other\n# targets separately to always let $@ expand to \"first\" by default.\nall install uninstall tools config configure reconfig proto depend lint tags types test scripttests testtiny test_libvterm unittests testclean clean distclean:\n\t@if test ! -f src/auto/config.mk; then \\\n\t\tcp src/config.mk.dist src/auto/config.mk; \\\n\tfi\n\t@echo \"Starting make in the src directory.\"\n\t@echo \"If there are problems, cd to the src directory and run make there\"\n\tcd src && $(MAKE) $@\n\t@# When the target is \"test\" also run the indent and syntax tests.\n\t@if test \"$@\" = \"test\" -o \"$@\" = \"testtiny\"; then \\\n\t\t$(MAKE) indenttest; \\\n\t\t$(MAKE) syntaxtest; \\\n\tfi\n\t@# When the target is \"clean\" also clean for the indent and syntax tests.\n\t@if test \"$@\" = \"clean\" -o \"$@\" = \"distclean\" -o \"$@\" = \"testclean\"; then \\\n\t\t(cd runtime/indent && $(MAKE) clean); \\\n\t\t(cd runtime/syntax && $(MAKE) clean); \\\n\tfi\n\n# Executable used for running the indent tests.\nVIM_FOR_INDENTTEST = ../../src/vim\n\nindenttest:\n\tcd runtime/indent && \\\n\t\t$(MAKE) clean && \\\n\t\t$(MAKE) test VIMPROG=\"$(VIM_FOR_INDENTTEST)\"\n\n# Executable used for running the syntax tests.\nVIM_FOR_SYNTAXTEST = ../../src/vim\n\n# (For local testing only with GNU Make.)\nVIM_SYNTAX_TEST_FILTER =\n\nsyntaxtest:\n\tcd runtime/syntax && \\\n\t\t$(MAKE) clean && \\\n\t\t$(MAKE) test VIMPROG=\"$(VIM_FOR_SYNTAXTEST)\"\n\n\n#########################################################################\n# 2. Creating the various distribution files.\n#\n# TARGET\tPRODUCES\t\tCONTAINS\n# unixall\tvim-#.#.tar.bz2\t\tAll runtime files and sources, for Unix\n#\n# html\t\tvim##html.zip\t\tHTML docs\n#\n# dossrc\tvim##src.zip\t\tsources for MS-DOS\n# dosrt\t\tvim##rt.zip\t\truntime for MS-DOS\n# dosbin\tvim##w32.zip\t\tbinary for Win32\n#\t\tgvim##.zip\t\tbinary for GUI Win32\n#\t\tgvim##ole.zip\t\tOLE exe for Win32 GUI\n#\n# OBSOLETE\n# amisrc\tvim##src.tgz\t\tsources for Amiga\n# amirt\t\tvim##rt.tgz\t\truntime for Amiga\n# amibin\tvim##bin.tgz\t\tbinary for Amiga\n#\n# farsi\t\tfarsi##.zip\t\tFarsi fonts\n#\n#    All output files are created in the \"dist\" directory.  Existing files are\n#    overwritten!\n#    To do all this you need the Unix archive and compiled binaries.\n#    Before creating an archive first delete all backup files, *.orig, etc.\n\nMAJOR = 9\nMINOR = 1\n\n# CHECKLIST for creating a new version:\n#\n# - Update Vim version number.  For a test version in: src/version.h,\n#   READMEdir/Contents, MAJOR/MINOR above, VIMMAJOR and VIMMINOR in\n#   src/Makefile, README.txt, README.md, src/README.md, READMEdir/README*.txt,\n#   runtime/doc/*.txt and make nsis/gvim_version.nsh.\n#   For a minor/major version: src/GvimExt/GvimExt.reg, src/vim.manifest.\n# - Compile Vim with GTK, Perl, Python, Python3, TCL, Ruby, Lua, Cscope and\n#   \"huge\" features.  Add MZscheme if you can make it work.\n#   Use \"make reconfig\" after selecting the configure arguments.\n# - With these features: \"make proto\" (requires cproto and Motif installed;\n#   ignore warnings for missing include files, fix problems for syntax errors).\n# - With these features: \"make depend\" (works best with gcc).\n# - If you have a lint program: \"make lint\" and check the output (ignore GTK\n#   warnings).\n# - If you have valgrind, enable it in src/testdir/Makefile and run \"make\n#   test\".  Enable EXITFREE, disable GUI, scheme and tcl to avoid false alarms.\n#   Check the valgrind output.\n# - Adjust the date and other info in src/version.h.\n# - Correct included_patches[] in src/version.c.\n# - Check for missing entries in runtime/makemenu.vim (with checkmenu script).\n# - Check for missing options in runtime/optwin.vim et al. (with check.vim).\n# - Do \"make menu\" to update the runtime/synmenu.vim file.\n# - Add remarks for changes to runtime/doc/version9.txt.\n# - Check that runtime/doc/help.txt doesn't contain entries in \"LOCAL\n#   ADDITIONS\".\n# - In runtime/doc run \"make\" and \"make html\" to check for errors.\n# - Check if src/Makefile, src/testdir/Makefile and src/feature.h don't contain\n#   any personal preferences or the changes mentioned above.\n# - Check file protections to be \"644\" for text and \"755\" for executables (run\n#   the \"check\" script).\n# - Check compiling on Amiga, MS-DOS and MS-Windows.\n# - Delete all *~, *.sw?, *.orig, *.rej files\n# - \"make unixall\", \"make html\"\n# - Make diff files against the previous release: \"makediff7 7.1 7.2\"\n#\n# Amiga: (OBSOLETE, Amiga files are no longer distributed)\n# - \"make amisrc\", move the archive to the Amiga and compile:\n#   \"make -f Make_manx.mak\" (will use \"big\" features by default).\n# - Run the tests: \"make -f Make_manx.mak test\"\n# - Place the executables Vim and Xxd in this directory (set the executable\n#   flag).\n# - \"make amirt\", \"make amibin\".\n#\n# MS-Windows:\n# - Run make on Unix to update the \".mo\" files.\n# - Get 32 bit libintl-8.dll, libiconv-2.dll and libgcc_s_sjlj-1.dll. E.g. from\n#   https://mlocati.github.io/gettext-iconv-windows/ .\n#   Use the \"shared-32.zip file and extract the archive to get the files.\n#   Put them in the gettext32 directory, \"make dosrt\" uses them.\n# - Get 64 bit libintl-8.dll and libiconv-2.dll. E.g. from\n#   https://mlocati.github.io/gettext-iconv-windows/ .\n#   Use the \"shared-64.zip file and extract the archive to get the files.\n#   Put them in the gettext64 directory, \"make dosrt\" uses them.\n# - > make dossrc\n#   > make dosrt\n#   Unpack dist/vim##rt.zip and dist/vim##src.zip on an MS-Windows PC.\n#   This creates the directory vim/vim91 and puts all files in there.\n# Win32 console version build:\n# - See src/INSTALLpc.txt for installing the compiler and SDK.\n# - Set environment for Visual C++ 2015:\n#   > cd src\n#   > msvc2015.bat\n# - Build the console binary:\n#   > nmake -f Make_mvc.mak\n# - Run the tests and check the output:\n#   > nmake -f Make_mvc.mak testclean\n#   > nmake -f Make_mvc.mak test\n# - Rename (using ../tools/rename.bat):\n#           vim.exe to vimw32.exe\n#           tee/tee.exe to teew32.exe\n#           xxd/xxd.exe to xxdw32.exe\n#           vim.pdb to vimw32.pdb\n#           install.exe to installw32.exe\n#           uninstall.exe to uninstallw32.exe\n# Win32 GUI version build:\n# - > cd src\n#   > nmake -f Make_mvc.mak GUI=yes\n# - Run the tests and check the output:\n#   > nmake -f Make_mvc.mak testclean\n#   > nmake -f Make_mvc.mak testgvim\n# - move \"gvim.exe\" to here (otherwise the OLE version will overwrite it).\n# - Move gvim.pdb to here.\n# - Copy \"GvimExt/gvimext.dll\" to here.\n# - Delete vimrun.exe, install.exe and uninstall.exe.\n# Win32 GUI version with OLE, PERL, Ruby, TCL, PYTHON and dynamic IME:\n# - Install the interfaces you want, see src/INSTALLpc.txt\n#   Adjust bigvim.bat to match the version of each interface you want.\n# - Build:\n#   > cd src\n#   > bigvim.bat\n# - Run the tests:\n#   > nmake -f Make_mvc.mak testclean\n#   > nmake -f Make_mvc.mak testgvim\n#   - check the output.\n# - Rename \"gvim.exe\" to \"gvim_ole.exe\".\n# - Rename gvim.pdb to \"gvim_ole.pdb\".\n# - Delete install.exe and uninstall.exe.\n# Create the archives:\n# - Copy all the \"*.exe\" files to where this Makefile is.\n# - Copy all the \"*.pdb\" files to where this Makefile is.\n# - in this directory:\n#   > make dosbin\n# NSIS self installing exe:\n# - To get NSIS see http://nsis.sourceforge.net\n# - Make sure gvim_ole.exe, vimw32.exe, installw32.exe,\n#   uninstallw32.exe, teew32.exe and xxdw32.exe have been build as mentioned\n#   above.\n# - copy these files (get them from a binary archive or build them):\n#\tgvimext.dll in src/GvimExt\n#\tgvimext64.dll in src/GvimExt\n#   gvimext64.dll can be obtained from:\n#   https://github.com/vim/vim-win32-installer/releases\n#\tIt is part of gvim_9.1.*_x64.zip as vim/vim91/GvimExt/gvimext64.dll.\n# - Make sure there is a diff.exe two levels up (get it from a previous Vim\n#   version).  Also put winpty32.dll and winpty-agent.exe there.\n# - go to ../nsis and do:\n#   > unzip icons.zip\n#   > makensis gvim.nsi  (takes a few minutes).\n#      ignore warning for libwinpthread-1.dll\n# - Copy gvim##.exe to the dist directory.\n#\n# 64 bit builds (these are not in the normal distribution, the 32 bit build\n# works just fine on 64 bit systems).\n# Like the console and GUI version, but first run vcvars64.bat or\n#   \"..\\VC\\vcvarsall.bat x86_amd64\".\n# - Build the console version:\n#   > nmake -f Make_mvc.mak\n# - Build the GUI version:\n#   > nmake -f Make_mvc.mak GUI=yes\n# - Build the OLE version with interfaces:\n#   > bigvim64.bat\n#\n#\n# OBSOLETE systems: You can build these if you have an appropriate system.\n#\n# 16 bit DOS version: You need to get a very old version of Vim, for several\n# years even the tiny build is too big to fit in DOS memory.\n#\n# 32 bit DOS version: Support was removed in 7.4.1399.  When syncing to before\n# that it probably won't build.\n#\n# Win32s GUI version: Support was removed in patch 7.4.1364.\n#\n# OS/2 support was removed in patch 7.4.1008.  If you want to give it a try\n# sync to before that and check the old version of this Makefile for\n# instructions.\n\nVIMVER\t= vim-$(MAJOR).$(MINOR)\nVERSION = $(MAJOR)$(MINOR)\nVDOT\t= $(MAJOR).$(MINOR)\nVIMRTDIR = vim$(VERSION)\n\n# How to include Filelist depends on the version of \"make\" you have.\n# If the current choice doesn't work, try the other one.\n\ninclude Filelist\n#.include \"Filelist\"\n\n\n# All output is put in the \"dist\" directory.\ndist:\n\tmkdir dist\n\n# Clean up some files to avoid they are included.\n# Copy README files to the top directory.\nprepare:\n\tif test -f runtime/doc/uganda.nsis.txt; then \\\n\t\trm runtime/doc/uganda.nsis.???; fi\n\tfor name in $(IN_README_DIR); do \\\n\t  cp READMEdir/\"$$name\" .; \\\n\t  done\n\n# For the zip files we need to create a file with the comment line\ndist/comment:\n\tmkdir dist/comment\n\nCOMMENT_RT = comment/$(VERSION)-rt\nCOMMENT_W32 = comment/$(VERSION)-bin-w32\nCOMMENT_GVIM = comment/$(VERSION)-bin-gvim\nCOMMENT_OLE = comment/$(VERSION)-bin-ole\nCOMMENT_SRC = comment/$(VERSION)-src\nCOMMENT_HTML = comment/$(VERSION)-html\nCOMMENT_FARSI = comment/$(VERSION)-farsi\n\ndist/$(COMMENT_RT): dist/comment\n\techo \"Vim - Vi IMproved - v$(VDOT) runtime files for MS-DOS and MS-Windows\" > dist/$(COMMENT_RT)\n\ndist/$(COMMENT_W32): dist/comment\n\techo \"Vim - Vi IMproved - v$(VDOT) binaries for MS-Windows\" > dist/$(COMMENT_W32)\n\ndist/$(COMMENT_GVIM): dist/comment\n\techo \"Vim - Vi IMproved - v$(VDOT) GUI binaries for MS-Windows\" > dist/$(COMMENT_GVIM)\n\ndist/$(COMMENT_OLE): dist/comment\n\techo \"Vim - Vi IMproved - v$(VDOT) MS-Windows GUI binaries with OLE support\" > dist/$(COMMENT_OLE)\n\ndist/$(COMMENT_SRC): dist/comment\n\techo \"Vim - Vi IMproved - v$(VDOT) sources for MS-DOS and MS-Windows\" > dist/$(COMMENT_SRC)\n\ndist/$(COMMENT_HTML): dist/comment\n\techo \"Vim - Vi IMproved - v$(VDOT) documentation in HTML\" > dist/$(COMMENT_HTML)\n\ndist/$(COMMENT_FARSI): dist/comment\n\techo \"Vim - Vi IMproved - v$(VDOT) Farsi language files\" > dist/$(COMMENT_FARSI)\n\nunixall: dist prepare\n\t-rm -f dist/$(VIMVER).tar.bz2\n\t-rm -rf dist/$(VIMRTDIR)\n\tmkdir dist/$(VIMRTDIR)\n\ttar cf - \\\n\t\t$(RT_ALL) \\\n\t\t$(RT_ALL_BIN) \\\n\t\t$(RT_UNIX) \\\n\t\t$(RT_UNIX_DOS_BIN) \\\n\t\t$(RT_SCRIPTS) \\\n\t\t$(LANG_GEN) \\\n\t\t$(LANG_GEN_BIN) \\\n\t\t$(SRC_ALL) \\\n\t\t$(SRC_UNIX) \\\n\t\t$(SRC_DOS_UNIX) \\\n\t\t$(EXTRA) \\\n\t\t$(LANG_SRC) \\\n\t\t| (cd dist/$(VIMRTDIR); tar xf -)\n\t-rm $(IN_README_DIR)\n# Need to use a \"distclean\" config.mk file\n# Note: this file is not included in the repository to avoid problems, but it's\n# OK to put it in the archive.\n\tcp -f src/config.mk.dist dist/$(VIMRTDIR)/src/auto/config.mk\n# Create an empty config.h file, make dependencies require it\n\ttouch dist/$(VIMRTDIR)/src/auto/config.h\n# Make sure configure is newer than config.mk to force it to be generated\n\ttouch dist/$(VIMRTDIR)/src/configure\n# Make sure ja.sjis.po is newer than ja.po to avoid it being regenerated.\n# Same for cs.cp1250.po, pl.cp1250.po and sk.cp1250.po.\n\ttouch dist/$(VIMRTDIR)/src/po/ja.sjis.po\n\ttouch dist/$(VIMRTDIR)/src/po/cs.cp1250.po\n\ttouch dist/$(VIMRTDIR)/src/po/pl.cp1250.po\n\ttouch dist/$(VIMRTDIR)/src/po/sk.cp1250.po\n\ttouch dist/$(VIMRTDIR)/src/po/zh_CN.cp936.po\n\ttouch dist/$(VIMRTDIR)/src/po/ru.cp1251.po\n\ttouch dist/$(VIMRTDIR)/src/po/uk.cp1251.po\n# Create the archive.\n\tcd dist && tar cf $(VIMVER).tar $(VIMRTDIR)\n\tbzip2 dist/$(VIMVER).tar\n\n# Amiga runtime - OBSOLETE\namirt: dist prepare\n\t-rm -f dist/vim$(VERSION)rt.tar.gz\n\t-rm -rf dist/Vim\n\tmkdir dist/Vim\n\tmkdir dist/Vim/$(VIMRTDIR)\n\ttar cf - \\\n\t\t$(ROOT_AMI) \\\n\t\t$(RT_ALL) \\\n\t\t$(RT_ALL_BIN) \\\n\t\t$(RT_SCRIPTS) \\\n\t\t$(RT_AMI) \\\n\t\t$(RT_NO_UNIX) \\\n\t\t$(RT_AMI_DOS) \\\n\t\t| (cd dist/Vim/$(VIMRTDIR); tar xf -)\n\t-rm $(IN_README_DIR)\n\tmv dist/Vim/$(VIMRTDIR)/vimdir.info dist/Vim.info\n\tmv dist/Vim/$(VIMRTDIR)/runtime.info dist/Vim/$(VIMRTDIR).info\n\tmv dist/Vim/$(VIMRTDIR)/runtime/* dist/Vim/$(VIMRTDIR)\n\trmdir dist/Vim/$(VIMRTDIR)/runtime\n\tcd dist && tar cf vim$(VERSION)rt.tar Vim Vim.info\n\tgzip -9 dist/vim$(VERSION)rt.tar\n\tmv dist/vim$(VERSION)rt.tar.gz dist/vim$(VERSION)rt.tgz\n\n# Amiga binaries - OBSOLETE\namibin: dist prepare\n\t-rm -f dist/vim$(VERSION)bin.tar.gz\n\t-rm -rf dist/Vim\n\tmkdir dist/Vim\n\tmkdir dist/Vim/$(VIMRTDIR)\n\ttar cf - \\\n\t\t$(ROOT_AMI) \\\n\t\t$(BIN_AMI) \\\n\t\tVim \\\n\t\tXxd \\\n\t\t| (cd dist/Vim/$(VIMRTDIR); tar xf -)\n\t-rm $(IN_README_DIR)\n\tmv dist/Vim/$(VIMRTDIR)/vimdir.info dist/Vim.info\n\tmv dist/Vim/$(VIMRTDIR)/runtime.info dist/Vim/$(VIMRTDIR).info\n\tcd dist && tar cf vim$(VERSION)bin.tar Vim Vim.info\n\tgzip -9 dist/vim$(VERSION)bin.tar\n\tmv dist/vim$(VERSION)bin.tar.gz dist/vim$(VERSION)bin.tgz\n\n# Amiga sources - OBSOLETE\namisrc: dist prepare\n\t-rm -f dist/vim$(VERSION)src.tar.gz\n\t-rm -rf dist/Vim\n\tmkdir dist/Vim\n\tmkdir dist/Vim/$(VIMRTDIR)\n\ttar cf - \\\n\t\t$(ROOT_AMI) \\\n\t\t$(SRC_ALL) \\\n\t\t$(SRC_AMI) \\\n\t\t$(SRC_AMI_DOS) \\\n\t\t| (cd dist/Vim/$(VIMRTDIR); tar xf -)\n\t-rm $(IN_README_DIR)\n\tmv dist/Vim/$(VIMRTDIR)/vimdir.info dist/Vim.info\n\tmv dist/Vim/$(VIMRTDIR)/runtime.info dist/Vim/$(VIMRTDIR).info\n\tcd dist && tar cf vim$(VERSION)src.tar Vim Vim.info\n\tgzip -9 dist/vim$(VERSION)src.tar\n\tmv dist/vim$(VERSION)src.tar.gz dist/vim$(VERSION)src.tgz\n\n# MS-DOS sources\ndossrc: dist dist/$(COMMENT_SRC) runtime/doc/uganda.nsis.txt \\\n\tnsis/gvim_version.nsh\n\t-rm -rf dist/vim$(VERSION)src.zip\n\t-rm -rf dist/vim\n\tmkdir dist/vim\n\tmkdir dist/vim/$(VIMRTDIR)\n\ttar cf - \\\n\t\t$(SRC_ALL) \\\n\t\t$(SRC_DOS) \\\n\t\t$(SRC_DOS_BIN) \\\n\t\t$(SRC_AMI_DOS) \\\n\t\t$(SRC_DOS_UNIX) \\\n\t\truntime/doc/uganda.nsis.??? \\\n\t\tnsis/gvim_version.nsh \\\n\t\t| (cd dist/vim/$(VIMRTDIR); tar xf -)\n\tmv dist/vim/$(VIMRTDIR)/runtime/* dist/vim/$(VIMRTDIR)\n\trmdir dist/vim/$(VIMRTDIR)/runtime\n\tcd dist && zip -9 -rD -z vim$(VERSION)src.zip vim <$(COMMENT_SRC)\n\nruntime/doc/uganda.nsis.txt: runtime/doc/uganda.???\n\tcd runtime/doc && $(MAKE) uganda.nsis.txt\n\nnsis/gvim_version.nsh: Makefile\n\techo \"# Generated from Makefile: define the version numbers\" > $@\n\techo \"!ifndef __GVIM_VER__NSH__\"  >> $@\n\techo \"!define __GVIM_VER__NSH__\"  >> $@\n\techo \"!define VER_MAJOR $(MAJOR)\" >> $@\n\techo \"!define VER_MINOR $(MINOR)\" >> $@\n\techo \"!endif\" >> $@\n\ndosrt: dist dist/$(COMMENT_RT) dosrt_files\n\t-rm -rf dist/vim$(VERSION)rt.zip\n\tcd dist && zip -9 -rD -z vim$(VERSION)rt.zip vim <$(COMMENT_RT)\n\n# Split in two parts to avoid an \"argument list too long\" error.\n# We no longer convert the files from unix to dos fileformat.\ndosrt_files: dist prepare\n\t-rm -rf dist/vim\n\tmkdir dist/vim\n\tmkdir dist/vim/$(VIMRTDIR)\n\tmkdir dist/vim/$(VIMRTDIR)/lang\n\tcd src && MAKEMO=yes $(MAKE) languages\n\ttar cf - \\\n\t\t$(RT_ALL) \\\n\t\t| (cd dist/vim/$(VIMRTDIR); tar xf -)\n\ttar cf - \\\n\t\t$(RT_SCRIPTS) \\\n\t\t$(RT_DOS) \\\n\t\t$(RT_NO_UNIX) \\\n\t\t$(RT_AMI_DOS) \\\n\t\t$(LANG_GEN) \\\n\t\t| (cd dist/vim/$(VIMRTDIR); tar xf -)\n\ttar cf - \\\n\t\t$(RT_UNIX_DOS_BIN) \\\n\t\t$(RT_ALL_BIN) \\\n\t\t$(RT_DOS_BIN) \\\n\t\t$(LANG_GEN_BIN) \\\n\t\t| (cd dist/vim/$(VIMRTDIR); tar xf -)\n\t-rm $(IN_README_DIR)\n\tmv dist/vim/$(VIMRTDIR)/runtime/* dist/vim/$(VIMRTDIR)\n\trmdir dist/vim/$(VIMRTDIR)/runtime\n# Add the message translations.  Trick: skip ja.mo/ja.euc-jp.mo and use\n# ja.sjis.mo instead.  Same for cs.mo / cs.cp1250.mo, pl.mo / pl.cp1250.mo,\n# sk.mo / sk.cp1250.mo, zh_CN.mo / zh_CN.cp936.mo, uk.mo / uk.cp1251.mo and\n# ru.mo / ru.cp1251.mo.\n\tfor i in $(LANG_DOS); do \\\n\t      if test \"$$i\" != \"src/po/ja.mo\" -a \"$$i\" != \"src/po/ja.euc-jp.mo\" -a \"$$i\" != \"src/po/pl.mo\" -a \"$$i\" != \"src/po/cs.mo\" -a \"$$i\" != \"src/po/sk.mo\" -a \"$$i\" != \"src/po/zh_CN.mo\" -a \"$$i\" != \"src/po/ru.mo\" -a \"$$i\" != \"src/po/uk.mo\"; then \\\n\t\tn=`echo $$i | sed -e \"s+src/po/\\([-a-zA-Z0-9_]*\\(.UTF-8\\)*\\)\\(.sjis\\)*\\(.cp1250\\)*\\(.cp1251\\)*\\(.cp936\\)*.mo+\\1+\"`; \\\n\t\tmkdir dist/vim/$(VIMRTDIR)/lang/$$n; \\\n\t\tmkdir dist/vim/$(VIMRTDIR)/lang/$$n/LC_MESSAGES; \\\n\t\tcp $$i dist/vim/$(VIMRTDIR)/lang/$$n/LC_MESSAGES/vim.mo; \\\n\t      fi \\\n\t    done\n\tmkdir dist/vim/$(VIMRTDIR)/gettext32\n\tcp gettext32/libintl-8.dll dist/vim/$(VIMRTDIR)/gettext32/\n\tcp gettext32/libiconv-2.dll dist/vim/$(VIMRTDIR)/gettext32/\n\tcp gettext32/libgcc_s_sjlj-1.dll dist/vim/$(VIMRTDIR)/gettext32/\n\tmkdir dist/vim/$(VIMRTDIR)/gettext64\n\tcp gettext64/libintl-8.dll dist/vim/$(VIMRTDIR)/gettext64/\n\tcp gettext64/libiconv-2.dll dist/vim/$(VIMRTDIR)/gettext64/\n\n\n# Used before uploading.  Don't delete the AAPDIR/sign files!\nruntime_unix2dos: dosrt_files\n\t-rm -rf `find runtime/dos -type f -print | sed -e /AAPDIR/d`\n\tcd dist/vim/$(VIMRTDIR); tar cf - * \\\n\t\t| (cd ../../../runtime/dos; tar xf -)\n\ndosbin: prepare dosbin_gvim dosbin_w32 dosbin_ole $(DOSBIN_S)\n\t-rm $(IN_README_DIR)\n\n# make Win32 gvim\ndosbin_gvim: dist dist/$(COMMENT_GVIM)\n\t-rm -rf dist/gvim$(VERSION).zip\n\t-rm -rf dist/vim\n\tmkdir dist/vim\n\tmkdir dist/vim/$(VIMRTDIR)\n\ttar cf - \\\n\t\t$(BIN_DOS) \\\n\t\t| (cd dist/vim/$(VIMRTDIR); tar xf -)\n\tcp gvim.exe dist/vim/$(VIMRTDIR)/gvim.exe\n\tcp teew32.exe dist/vim/$(VIMRTDIR)/tee.exe\n\tcp xxdw32.exe dist/vim/$(VIMRTDIR)/xxd.exe\n\tcp vimrun.exe dist/vim/$(VIMRTDIR)/vimrun.exe\n\tcp installw32.exe dist/vim/$(VIMRTDIR)/install.exe\n\tcp uninstallw32.exe dist/vim/$(VIMRTDIR)/uninstall.exe\n\tmkdir dist/vim/$(VIMRTDIR)/GvimExt32\n\tcp gvimext.dll dist/vim/$(VIMRTDIR)/GvimExt32/gvimext.dll\n\tmkdir dist/vim/$(VIMRTDIR)/GvimExt64\n\tcp gvimext64.dll dist/vim/$(VIMRTDIR)/GvimExt64/gvimext.dll\n\tcd dist && zip -9 -rD -z gvim$(VERSION).zip vim <$(COMMENT_GVIM)\n\tcp gvim.pdb dist/gvim$(VERSION).pdb\n\n# make Win32 console\ndosbin_w32: dist dist/$(COMMENT_W32)\n\t-rm -rf dist/vim$(VERSION)w32.zip\n\t-rm -rf dist/vim\n\tmkdir dist/vim\n\tmkdir dist/vim/$(VIMRTDIR)\n\ttar cf - \\\n\t\t$(BIN_DOS) \\\n\t\t| (cd dist/vim/$(VIMRTDIR); tar xf -)\n\tcp vimw32.exe dist/vim/$(VIMRTDIR)/vim.exe\n\tcp teew32.exe dist/vim/$(VIMRTDIR)/tee.exe\n\tcp xxdw32.exe dist/vim/$(VIMRTDIR)/xxd.exe\n\tcp installw32.exe dist/vim/$(VIMRTDIR)/install.exe\n\tcp uninstallw32.exe dist/vim/$(VIMRTDIR)/uninstall.exe\n\tcd dist && zip -9 -rD -z vim$(VERSION)w32.zip vim <$(COMMENT_W32)\n\tcp vimw32.pdb dist/vim$(VERSION)w32.pdb\n\n# make Win32 gvim with OLE\ndosbin_ole: dist dist/$(COMMENT_OLE)\n\t-rm -rf dist/gvim$(VERSION)ole.zip\n\t-rm -rf dist/vim\n\tmkdir dist/vim\n\tmkdir dist/vim/$(VIMRTDIR)\n\ttar cf - \\\n\t\t$(BIN_DOS) \\\n\t\t| (cd dist/vim/$(VIMRTDIR); tar xf -)\n\tcp gvim_ole.exe dist/vim/$(VIMRTDIR)/gvim.exe\n\tcp teew32.exe dist/vim/$(VIMRTDIR)/tee.exe\n\tcp xxdw32.exe dist/vim/$(VIMRTDIR)/xxd.exe\n\tcp vimrun.exe dist/vim/$(VIMRTDIR)/vimrun.exe\n\tcp installw32.exe dist/vim/$(VIMRTDIR)/install.exe\n\tcp uninstallw32.exe dist/vim/$(VIMRTDIR)/uninstall.exe\n\tcp gvimext.dll dist/vim/$(VIMRTDIR)/gvimext.dll\n\tcp README_ole.txt dist/vim/$(VIMRTDIR)\n\tcd dist && zip -9 -rD -z gvim$(VERSION)ole.zip vim <$(COMMENT_OLE)\n\tcp gvim_ole.pdb dist/gvim$(VERSION)ole.pdb\n\nhtml: dist dist/$(COMMENT_HTML)\n\t-rm -rf dist/vim$(VERSION)html.zip\n\tcd runtime/doc && zip -9 -z ../../dist/vim$(VERSION)html.zip *.html <../../dist/$(COMMENT_HTML)\n\nfarsi: dist dist/$(COMMENT_FARSI)\n\t-rm -f dist/farsi$(VERSION).zip\n\tzip -9 -rD -z dist/farsi$(VERSION).zip farsi < dist/$(COMMENT_FARSI)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.75,
          "content": "# [![Vim The editor](https://github.com/vim/vim/raw/master/runtime/vimlogo.gif)](https://www.vim.org)\n\n[![Github Build status](https://github.com/vim/vim/workflows/GitHub%20CI/badge.svg)](https://github.com/vim/vim/actions?query=workflow%3A%22GitHub+CI%22)\n[![Appveyor Build status](https://ci.appveyor.com/api/projects/status/o2qht2kjm02sgghk?svg=true)](https://ci.appveyor.com/project/chrisbra/vim)\n[![Cirrus Build Status](https://api.cirrus-ci.com/github/vim/vim.svg)](https://cirrus-ci.com/github/vim/vim)\n[![Coverage Status](https://codecov.io/gh/vim/vim/coverage.svg?branch=master)](https://codecov.io/gh/vim/vim?branch=master)\n[![Coverity Scan](https://scan.coverity.com/projects/241/badge.svg)](https://scan.coverity.com/projects/vim)\n[![Debian CI](https://badges.debian.net/badges/debian/testing/vim/version.svg)](https://buildd.debian.org/vim)\n[![Packages](https://repology.org/badge/tiny-repos/vim.svg)](https://repology.org/metapackage/vim)\n[![Fossies codespell report](https://fossies.org/linux/test/vim-master.tar.gz/codespell.svg)](https://fossies.org/linux/test/vim-master.tar.gz/codespell.html)\n\nIf you find a bug or want to discuss the best way to add a new feature, please\n[open an issue](https://github.com/vim/vim/issues/new/choose).\nIf you have a question or want to discuss the best way to do something with\nVim, you can use [StackExchange](https://vi.stackexchange.com/)\nor one of the [Maillists](https://www.vim.org/community.php).\n\n## What is Vim?\n\nVim is a greatly improved version of the good old UNIX editor\n[Vi](https://en.wikipedia.org/wiki/Vi_(text_editor)).  Many new\nfeatures have been added: multi-level undo, syntax highlighting, command line\nhistory, on-line help, spell checking, filename completion, block operations,\nscript language, etc.  There is also a Graphical User Interface (GUI)\navailable.  Still, Vi compatibility is maintained, those who have Vi \"in the\nfingers\" will feel at home.\nSee [`runtime/doc/vi_diff.txt`](runtime/doc/vi_diff.txt) for differences with\nVi.\n\nThis editor is very useful for editing programs and other plain text files.\nAll commands are given with normal keyboard characters, so those who can type\nwith ten fingers can work very fast.  Additionally, function keys can be\nmapped to commands by the user, and the mouse can be used.\n\nVim runs under MS-Windows (7, 8, 10, 11), macOS, Haiku, VMS and almost all\nflavours of UNIX.  Porting to other systems should not be very difficult.\nOlder versions of Vim run on MS-DOS, MS-Windows 95/98/Me/NT/2000/XP/Vista,\nAmiga DOS, Atari MiNT, BeOS, RISC OS and OS/2.  These are no longer maintained.\n\nFor Vim9 script see [README_VIM9](README_VIM9.md).\n\n## Distribution\n\nYou can often use your favorite package manager to install Vim.  On Mac and\nLinux a small version of Vim is pre-installed, you still need to install Vim\nif you want more features.\n\nThere are separate distributions for Unix, PC, Amiga and some other systems.\nThis `README.md` file comes with the runtime archive.  It includes the\ndocumentation, syntax files and other files that are used at runtime.  To run\nVim you must get either one of the binary archives or a source archive.\nWhich one you need depends on the system you want to run it on and whether you\nwant or must compile it yourself.  Check https://www.vim.org/download.php for\nan overview of currently available distributions.\n\nSome popular places to get the latest Vim:\n* Check out the git repository from [GitHub](https://github.com/vim/vim).\n* Get the source code as an [archive](https://github.com/vim/vim/tags).\n* Get a Windows executable from the\n[vim-win32-installer](https://github.com/vim/vim-win32-installer/releases) repository.\n\n## Compiling\n\nIf you obtained a binary distribution you don't need to compile Vim.  If you\nobtained a source distribution, all the stuff for compiling Vim is in the\n[`src`](./src/) directory.  See [`src/INSTALL`](./src/INSTALL) for instructions.\n\n## Installation\n\nSee one of these files for system-specific instructions.  Either in the\n[READMEdir directory](./READMEdir/) (in the repository) or\nthe top directory (if you unpack an archive):\n\n```\nREADME_ami.txt\t\tAmiga\nREADME_unix.txt\t\tUnix\nREADME_dos.txt\t\tMS-DOS and MS-Windows\nREADME_mac.txt\t\tMacintosh\nREADME_haiku.txt\tHaiku\nREADME_vms.txt\t\tVMS\n```\n\nThere are other `README_*.txt` files, depending on the distribution you used.\n\n## Documentation\n\nThe Vim tutor is a one hour training course for beginners.  Often it can be\nstarted as `vimtutor`.  See `:help tutor` for more information.\n\nThe best is to use `:help` in Vim.  If you don't have an executable yet, read\n[`runtime/doc/help.txt`](./runtime/doc/help.txt).\nIt contains pointers to the other documentation files.\nThe User Manual reads like a book and is recommended to learn to use\nVim.  See `:help user-manual`.\n\n## Copying\n\nVim is Charityware.  You can use and copy it as much as you like, but you are\nencouraged to make a donation to help orphans in Uganda.  Please read the file\n[`runtime/doc/uganda.txt`](./runtime/doc/uganda.txt)\nfor details (do `:help uganda` inside Vim).\n\nSummary of the license: There are no restrictions on using or distributing an\nunmodified copy of Vim.  Parts of Vim may also be distributed, but the license\ntext must always be included.  For modified versions, a few restrictions apply.\nThe license is GPL compatible, you may compile Vim with GPL libraries and\ndistribute it.\n\n## Sponsoring\n\nFixing bugs and adding new features takes a lot of time and effort.  To show\nyour appreciation for the work and motivate developers to continue working on\nVim please send a donation.\n\nThe money you donated will be mainly used to help children in Uganda.  See\n[`runtime/doc/uganda.txt`](./runtime/doc/uganda.txt).  But at the same time\ndonations increase the development team motivation to keep working on Vim!\n\nFor the most recent information about sponsoring look on the Vim web site:\n\thttps://www.vim.org/sponsor/\n\n## Contributing\n\nIf you would like to help make Vim better, see the\n[CONTRIBUTING.md](./CONTRIBUTING.md) file.\n\n## Information\n\nIf you are on macOS, you can use [MacVim](https://macvim.org).\n\nThe latest news about Vim can be found on the Vim home page:\n\thttps://www.vim.org/\n\nIf you have problems, have a look at the Vim documentation or tips:\n\thttps://www.vim.org/docs.php\n\thttps://vim.fandom.com/wiki/Vim_Tips_Wiki\n\nIf you still have problems or any other questions, use one of the mailing\nlists to discuss them with Vim users and developers:\n\thttps://www.vim.org/maillist.php\n\nIf nothing else works, report bugs directly to the vim-dev mailing list:\n\t`<vim-dev@vim.org>`\n\n## Main author\n\nMost of Vim was created by Bram Moolenaar `<Bram@vim.org>`\n[Bram-Moolenaar](https://vimhelp.org/version9.txt.html#Bram-Moolenaar)\n\nSend any other comments, patches, flowers and suggestions to the vim-dev mailing list:\n\t`<vim-dev@vim.org>`\n\nThis is `README.md` for version 9.1 of Vim: Vi IMproved.\n"
        },
        {
          "name": "README.rux.txt",
          "type": "blob",
          "size": 11.23,
          "content": "README.rux.txt для версии 9.1 программы Vim — Vi IMproved.\n\n\nЧТО ТАКОЕ РЕДАКТОР VIM?\n\nПрограмма Vim — это значительно улучшенная версия старого доброго редактора Vi\nиз системы UNIX.  При разработке этого редактора было добавлено множество новых\nвозможностей: многоуровневая отмена изменений, подсветка синтаксиса, журнал\nкомандной строки, интерактивная справка, проверка орфографии, подстановка\nнаименований файлов и команд, операции с произвольными блоками текста,\nвстроенный язык программирования и т. д.  Также доступен графический интерфейс\nпользователя (GUI).  И при этом сохраняется совместимость с редактором Vi,\nи те, у кого Vi «в крови», будут чувствовать себя как дома.  Подробности о\nразличиях с редактором Vi см. в файле \"runtime/doc/vi_diff.txt\".\n\nЭтот редактор очень удобен для работы с исходным кодом программ, а также\nразного рода других текстовых файлов.  Все команды вводятся набором обычных\nсимволов клавиатуры, поэтому те, кто освоил десятипальцевый метод печати, могут\nработать очень быстро.  Кроме того, пользователи могут назначить на\nфункциональные клавиши клавиатуры необходимые команды, и использовать\nманипулятор «мышь».\n\nРедактор Vim работает в ОС MS Windows (7, 8, 10, 11), macOS, Haiku, VMS и\nпрактически во всех UNIX-подобных системах.  А перенос на другие платформы не\nдолжен представлять особой сложности.\nПредыдущие версии редактора Vim работают в операционных системах OS/2, MS-DOS,\nMS Windows 95/98/Me/NT/2000/XP/Vista, AmigaDOS, Atari MiNT, BeOS и RISC OS.\nНо поддержка этих версий больше не осуществляется.\n\n\nПРЕДОСТАВЛЕНИЕ РЕДАКТОРА Vim\n\nДля установки редактора Vim можно воспользоваться привычным диспетчером пакетов.\nВ системах Mac и Linux уже предустановленна начальная версия программы Vim,\nно вам все равно нужно установить редактор Vim, если вы хотите получить больше\nвозможностей.\n\nСуществуют отдельные версии для Unix, PC, Amiga и некоторых других систем.\nДанный файл README.rux.txt поставляется вместе с архивом рабочих файлов\nпрограммы.  Этот архив включает в себя документацию, файлы подсветки синтаксиса\nи другие файлы, которые используются редактором во время работы.  Чтобы\nзапустить программу Vim, вы должны получить либо архив с исполняемыми файлами,\nлибо архив с исходным кодом.  Какой из них вам нужен, зависит от того, на какой\nсистеме вы хотите запустить редактор Vim, и есть ли для этой системы\nисполняемые файлы или вы должны компилировать программу самостоятельно.\nЧтобы узнать о доступных в настоящее время пакетах программы, посмотрите на\nвеб‐странице https://www.vim.org/download.php.\n\nНесколько полезных мест, где можно получить последнюю версию редактора Vim:\n* Посмотрите в git-хранилище на GitHub: https://github.com/vim/vim.\n* Получить исходный код в виде архива: https://github.com/vim/vim/tags.\n* Получить исполняемый файл для ОС Windows из хранилища vim-win32-installer:\nhttps://github.com/vim/vim-win32-installer/releases.\n\n\nКОМПИЛЯЦИЯ РЕДАКТОРА Vim\n\nЕсли для вашей системы уже есть готовые исполняемые файлы, вам не нужно самому\nкомпилировать редактор Vim.  Если вы скачали архив с исходным кодом, то всё\nнеобходимое для компиляции программы Vim находится в каталоге \"src\".\nИнструкции смотрите в файле src/INSTALL.\n\n\nУСТАНОВКА ПРОГРАММЫ Vim\n\nИнструкции для конкретной системы смотрите в одном из нижеуказанных файлов.\nИли в каталоге READMEdir (на https://github.com/vim/vim), или в основном\nкаталоге (если вы распаковываете архив):\n\nREADME_ami.txt\t\tAmiga\nREADME_unix.txt\t\tUnix\nREADME_dos.txt\t\tMS-DOS и MS Windows\nREADME_mac.txt\t\tMacintosh\nREADME_haiku.txt\tHaiku\nREADME_vms.txt\t\tVMS\n\nСуществует ещё несколько файлов README_*.txt, в зависимости от предоставляемого\nпакета.\n\n\nДОКУМЕНТАЦИЯ ПО РЕДАКТОРУ Vim\n\nУчебник Vim — это часовой практический курс для начинающих.  Как правило, для\nработы с ним нужно набрать команду \"vimtutor\".  Чтобы получить дополнительную\nинформацию, смотрите раздел документации \":help tutor\".\n\nЛучше всего воспользоваться командой \":help\" в редакторе Vim.  Если у вас ещё\nнет исполняемого файла программы, прочитайте файл \"runtime/doc/help.txt\".\nВ нём содержатся отсылки на другие полезные файлы документации.  Руководство\nпользователя можно читать как книгу, и оно рекомендуется для обучения работе\nс редактором Vim.  Смотрите \":help user-manual\".\n\n\nЛИЦЕНЗИОННЫЕ ПРАВА\n\nРедактор Vim является благотворительным программным обеспечением.\nИспользование и копирование программы Vim не ограничено, однако рекомендуется\nсделать добровольное пожертвование для нуждающихся детей в Уганде.  Чтобы узнать\nподробности, прочитайте, пожалуйста, файл \"runtime/doc/uganda.rux\" (введите\nкоманду \":help uganda\" в редакторе Vim).\n\nКраткое описание лицензии.\nНет никаких ограничений на использование или распространение немодифицированной\nкопии программы Vim.  Части программы Vim также могут предоставляться отдельно,\nно текст лицензии Vim всегда должен быть включён в поставку.\nДля модифицированных версий программы действует несколько ограничений.\nЛицензия Vim совместима с лицензией GNU GPL, вы можете компилировать\nи распространять программу Vim с библиотеками, лицензированными под GNU GPL.\n\n\nФИНАНСОВАЯ ПОДДЕРЖКА ДЛЯ РАЗРАБОТКИ РЕДАКТОРА Vim\n\nУстранение ошибок и добавление новых функциональных возможностей требует\nвложения немалого количества времени и сил.  Выразить признательность за труд\nи подкрепить заинтересованность разработчиков программы в дальнейшей работе\nнад редактором Vim можно с помощью оказания финансовой поддержки.\n\nПожертвованные вами деньги будут в основном направлены на оказание помощи детям\nУганды, см. \"runtime/doc/uganda.rux\".  Однако в любом случае финансирование\nбудет способствовать повышению заинтересованности команды разработчиков\nв продолжении работы над редактором Vim!\n\nСамая свежая информация об оказании финансовой поддержки публикуется на\nвеб-сайте программы Vim:\n\thttps://www.vim.org/sponsor/\n\n\nПОМОЩЬ В РАЗРАБОТКЕ РЕДАКТОРА Vim\n\nЕсли вы хотите помочь сделать редактор Vim лучше, смотрите файл CONTRIBUTING.md.\n\n\nДОПОЛНИТЕЛЬНАЯ ИНФОРМАЦИЯ\n\nДля системе macOS вы може использовать MacVim:  https://macvim.org\n\nПоследние новости о редакторе Vim можно найти на его домашней странице:\n\thttps://www.vim.org/\n\nЕсли у вас возникли вопросы, посмотрите полезные советы или документацию по\nредактору Vim:\n\thttps://www.vim.org/docs.php\n\thttps://vim.fandom.com/wiki/Vim_Tips_Wiki\n\nЕсли у вас все ещё остались вопросы или есть сложности, воспользуйтесь одним\nиз списков рассылки, чтобы обсудить их с пользователями и разработчиками:\n\thttps://www.vim.org/maillist.php\n\nЕсли ничего не помогает, сообщайте об ошибках непосредственно в список рассылки\nvim-dev:\n\t<vim-dev@vim.org>\n\n\nОСНОВНОЙ АВТОР ПРОГРАММЫ\n\nБольшая часть редактора Vim была создана Брамом Моленаром <Bram@vim.org>,\nсм. \":help Bram-Moolenaar\"\n\nПрисылайте все прочие комментарии, исправления, цветы и предложения в список\nрассылки vim-dev:\n\t<vim-dev@vim.org>\n"
        },
        {
          "name": "README.txt",
          "type": "blob",
          "size": 4.96,
          "content": "README.txt for version 9.1 of Vim: Vi IMproved.\n\n\nWHAT IS VIM?\n\nVim is a greatly improved version of the good old UNIX editor Vi.  Many new\nfeatures have been added: multi-level undo, syntax highlighting, command line\nhistory, on-line help, spell checking, filename completion, block operations,\nscript language, etc.  There is also a Graphical User Interface (GUI) available.\nStill, Vi compatibility is maintained, those who have Vi \"in the fingers\" will\nfeel at home.  See \"runtime/doc/vi_diff.txt\" for differences with Vi.\n\nThis editor is very useful for editing programs and other plain text files.\nAll commands are given with normal keyboard characters, so those who can type\nwith ten fingers can work very fast.  Additionally, function keys can be\nmapped to commands by the user, and the mouse can be used.\n\nVim runs under MS-Windows (7, 8, 10, 11), macOS, Haiku, VMS and almost all\nflavours of UNIX.  Porting to other systems should not be very difficult.\nOlder versions of Vim run on MS-DOS, MS-Windows 95/98/Me/NT/2000/XP/Vista,\nAmiga DOS, Atari MiNT, BeOS, RISC OS and OS/2.  These are no longer maintained.\n\n\nDISTRIBUTION\n\nYou can often use your favorite package manager to install Vim.  On Mac and\nLinux a small version of Vim is pre-installed, you still need to install Vim\nif you want more features.\n\nThere are separate distributions for Unix, PC, Amiga and some other systems.\nThis README.txt file comes with the runtime archive.  It includes the\ndocumentation, syntax files and other files that are used at runtime.  To run\nVim you must get either one of the binary archives or a source archive.\nWhich one you need depends on the system you want to run it on and whether you\nwant or must compile it yourself.  Check \"https://www.vim.org/download.php\" for\nan overview of currently available distributions.\n\nSome popular places to get the latest Vim:\n* Check out the git repository from github: https://github.com/vim/vim.\n* Get the source code as an archive: https://github.com/vim/vim/tags.\n* Get a Windows executable from the vim-win32-installer repository:\n  https://github.com/vim/vim-win32-installer/releases.\n\n\nCOMPILING\n\nIf you obtained a binary distribution you don't need to compile Vim.  If you\nobtained a source distribution, all the stuff for compiling Vim is in the\n\"src\" directory.  See src/INSTALL for instructions.\n\n\nINSTALLATION\n\nSee one of these files for system-specific instructions.  Either in the\nREADMEdir directory (in the repository) or the top directory (if you unpack an\narchive):\n\nREADME_ami.txt\t\tAmiga\nREADME_unix.txt\t\tUnix\nREADME_dos.txt\t\tMS-DOS and MS-Windows\nREADME_mac.txt\t\tMacintosh\nREADME_haiku.txt\tHaiku\nREADME_vms.txt\t\tVMS\n\nThere are other README_*.txt files, depending on the distribution you used.\n\n\nDOCUMENTATION\n\nThe Vim tutor is a one hour training course for beginners.  Often it can be\nstarted as \"vimtutor\".  See \":help tutor\" for more information.\n\nThe best is to use \":help\" in Vim.  If you don't have an executable yet, read\n\"runtime/doc/help.txt\".  It contains pointers to the other documentation files.\nThe User Manual reads like a book and is recommended to learn to use Vim.  See\n\":help user-manual\".\n\n\nCOPYING\n\nVim is Charityware.  You can use and copy it as much as you like, but you are\nencouraged to make a donation to help orphans in Uganda.  Please read the file\n\"runtime/doc/uganda.txt\" for details (do \":help uganda\" inside Vim).\n\nSummary of the license: There are no restrictions on using or distributing an\nunmodified copy of Vim.  Parts of Vim may also be distributed, but the license\ntext must always be included.  For modified versions, a few restrictions apply.\nThe license is GPL compatible, you may compile Vim with GPL libraries and\ndistribute it.\n\n\nSPONSORING\n\nFixing bugs and adding new features takes a lot of time and effort.  To show\nyour appreciation for the work and motivate developers to continue working on\nVim please send a donation.\n\nThe money you donated will be mainly used to help children in Uganda.  See\n\"runtime/doc/uganda.txt\".  But at the same time donations increase the\ndevelopment team motivation to keep working on Vim!\n\nFor the most recent information about sponsoring look on the Vim web site:\n\thttps://www.vim.org/sponsor/\n\n\nCONTRIBUTING\n\nIf you would like to help make Vim better, see the CONTRIBUTING.md file.\n\n\nINFORMATION\n\nIf you are on macOS, you can use MacVim: https://macvim.org\n\nThe latest news about Vim can be found on the Vim home page:\n\thttps://www.vim.org/\n\nIf you have problems, have a look at the Vim documentation or tips:\n\thttps://www.vim.org/docs.php\n\thttps://vim.fandom.com/wiki/Vim_Tips_Wiki\n\nIf you still have problems or any other questions, use one of the mailing lists\nto discuss them with Vim users and developers:\n\thttps://www.vim.org/maillist.php\n\nIf nothing else works, report bugs directly to the vim-dev mailing list:\n\t<vim-dev@vim.org>\n\n\nMAIN AUTHOR\n\nMost of Vim was created by Bram Moolenaar <Bram@vim.org>, \":help Bram-Moolenaar\"\n\nSend any other comments, patches, flowers and suggestions to the vim-dev\nmailing list: <vim-dev@vim.org>\n"
        },
        {
          "name": "README_VIM9.md",
          "type": "blob",
          "size": 10.58,
          "content": "![Vim Logo](https://github.com/vim/vim/blob/master/runtime/vimlogo.gif)\n\n# What is Vim9?\n\nThis is a new syntax for Vim script that was introduced with Vim 9.0.\nIt intends making Vim script faster and better.\n\n\n# Why Vim9?\n\n## 1. FASTER VIM SCRIPT\n\nThe third item on the poll results of 2018, after popup windows and text\nproperties, both of which have been implemented, is faster Vim script.\nSo how do we do that?\n\nI have been throwing some ideas around, and soon came to the conclusion\nthat the current way functions are called and executed, with\ndictionaries for the arguments and local variables, is never going to be\nvery fast.  We're lucky if we can make it twice as fast.  The overhead\nof a function call and executing every line is just too high.\n\nSo what then?  We can only make something fast by having a new way of\ndefining a function, with similar but different properties of the old\nway:\n* Arguments are only available by name, not through the a: dictionary or\n  the a:000 list.\n* Local variables are not available in an l: dictionary.\n* A few more things that slow us down, such as exception handling details.\n\nI Implemented a \"proof of concept\" and measured the time to run a simple\nfor loop with an addition (Justin used this example in his presentation,\nfull code is below):\n\n``` vim\n  let sum = 0\n  for i in range(1, 2999999)\n    let sum += i\n  endfor\n```\n\n| how     | time in sec |\n| --------| -------- |\n| Vim old | 5.018541 |\n| Python  | 0.369598 |\n| Lua     | 0.078817 |\n| LuaJit  | 0.004245 |\n| Vim new | 0.073595 |\n\nThat looks very promising!  It's just one example, but it shows how much\nwe can gain, and also that Vim script can be faster than builtin\ninterfaces.\n\nLuaJit is much faster at Lua-only instructions.  In practice the script would\nnot do something useless counting, but change the text.  For example,\nreindent all the lines:\n\n``` vim\n  let totallen = 0\n  for i in range(1, 100000)\n    call setline(i, '    ' .. getline(i))\n    let totallen += len(getline(i))\n  endfor\n```\n\n| how     | time in sec |\n| --------| -------- |\n| Vim old | 0.578598 |\n| Python  | 0.152040 |\n| Lua     | 0.164917 |\n| LuaJit  | 0.128400 |\n| Vim new | 0.079692 |\n\n[These times were measured on a different system by Dominique Pelle]\n\nThe differences are smaller, but Vim 9 script is clearly the fastest.\nUsing LuaJIT is only a little bit faster than plain Lua here, clearly the call\nback to the Vim code is costly.\n\nHow does Vim9 script work?  The function is first compiled into a sequence of\ninstructions.  Each instruction has one or two parameters and a stack is\nused to store intermediate results.  Local variables are also on the\nstack, space is reserved during compilation.  This is a fairly normal\nway of compilation into an intermediate format, specialized for Vim,\ne.g. each stack item is a typeval_T.  And one of the instructions is\n\"execute Ex command\", for commands that are not compiled.\n\n\n## 2. DEPRIORITIZE INTERFACES\n\nAttempts have been made to implement functionality with built-in script\nlanguages such as Python, Perl, Lua, Tcl and Ruby.  This never gained much\nfoothold, for various reasons.\n\nInstead of using script language support in Vim:\n* Encourage implementing external tools in any language and communicate\n  with them.  The job and channel support already makes this possible.\n  Really any language can be used, also Java and Go, which are not\n  available built-in.\n* No priority for the built-in language interfaces.  They will have to be kept\n  for backwards compatibility, but many users won't need a Vim build with these\n  interfaces.\n* Improve the Vim script language, it is used to communicate with the external\n  tool and implements the Vim side of the interface.  Also, it can be used when\n  an external tool is undesired.\n\nAltogether this creates a clear situation: Vim with the +eval feature\nwill be sufficient for most plugins, while some plugins require\ninstalling a tool that can be written in any language.  No confusion\nabout having Vim but the plugin not working because some specific\nlanguage is missing.  This is a good long term goal.\n\nRationale: Why is it better to run a tool separately from Vim than using a\nbuilt-in interface and interpreter?  Take for example something that is\nwritten in Python:\n* The built-in interface uses the embedded python interpreter.  This is less\n  well maintained than the python command.  Building Vim with it requires\n  installing developer packages.  If loaded dynamically there can be a version\n  mismatch.\n* When running the tool externally the standard python command can be used,\n  which is quite often available by default or can be easily installed.\n* The built-in interface has an API that is unique for Vim with Python. This is\n  an extra API to learn.\n* A .py file can be compiled into a .pyc file and execute much faster.\n* Inside Vim multi-threading can cause problems, since the Vim core is single\n  threaded.  In an external tool there are no such problems.\n* The Vim part is written in .vim files, the Python part is in .py files, this\n  is nicely separated.\n* Disadvantage: An interface needs to be made between Vim and Python.\n  JSON is available for this, and it's fairly easy to use.  But it still\n  requires implementing asynchronous communication.\n\n\n## 3. BETTER VIM SCRIPT\n\nTo make Vim faster a new way of defining a function needs to be added.\nWhile we are doing that, since the lines in this function won't be fully\nbackwards compatible anyway, we can also make Vim script easier to use.\nIn other words: \"less weird\".  Making it work more like modern\nprogramming languages will help.  No surprises.\n\nA good example is how in a function the arguments are prefixed with\n\"a:\". No other language I know does that, so let's drop it.\n\nTaking this one step further is also dropping \"s:\" for script-local variables;\neverything at the script level is script-local by default.  Since this is not\nbackwards compatible it requires a new script style: Vim9 script!\n\nTo avoid having more variations, the syntax inside a compiled function is the\nsame as in Vim9 script.  Thus you have legacy syntax and Vim9 syntax.\n\nIt should be possible to convert code from other languages to Vim\nscript.  We can add functionality to make this easier.  This still needs\nto be discussed, but we can consider adding type checking and a simple\nform of classes.  If you look at JavaScript for example, it has gone\nthrough these stages over time, adding real class support and now\nTypeScript adds type checking.  But we'll have to see how much of that\nwe actually want to include in Vim script.  Ideally a conversion tool\ncan take Python, JavaScript or TypeScript code and convert it to Vim\nscript, with only some things that cannot be converted.\n\nVim script won't work the same as any specific language, but we can use\nmechanisms that are commonly known, ideally with the same syntax.  One\nthing I have been thinking of is assignments without \":let\".  I often\nmake that mistake (after writing JavaScript especially).  I think it is\npossible, if we make local variables shadow commands.  That should be OK,\nif you shadow a command you want to use, just rename the variable.\nUsing \"var\" and \"const\" to declare a variable, like in JavaScript and\nTypeScript, can work:\n\n\n``` vim\ndef MyFunction(arg: number): number\n   var local = 1\n   var todo = arg\n   const ADD = 88\n   while todo > 0\n      local += ADD\n      todo -= 1\n   endwhile\n   return local\nenddef\n```\n\nThe similarity with JavaScript/TypeScript can also be used for dependencies\nbetween files.  Vim currently uses the `:source` command, which has several\ndisadvantages:\n*   In the sourced script, is not clear what it provides.  By default all\n    functions are global and can be used elsewhere.\n*   In a script that sources other scripts, it is not clear what function comes\n    from what sourced script.  Finding the implementation is a hassle.\n*   Prevention of loading the whole script twice must be manually implemented.\n\nWe can use the `:import` and `:export` commands from the JavaScript standard to\nmake this much better.  For example, in script \"myfunction.vim\" define a\nfunction and export it:\n\n``` vim\nvim9script  \" Vim9 script syntax used here\n\nvar local = 'local variable is not exported, script-local'\n\nexport def MyFunction()  \" exported function\n...\n\ndef LocalFunction() \" not exported, script-local\n...\n```\n\nAnd in another script import the function:\n\n``` vim\nvim9script  \" Vim9 script syntax used here\n\nimport MyFunction from 'myfunction.vim'\n```\n\nThis looks like JavaScript/TypeScript, thus many users will understand the\nsyntax.\n\nThese are ideas, this will take time to design, discuss and implement.\nEventually this will lead to Vim 9!\n\n\n## Code for sum time measurements\n\nVim was build with -O2.\n\n``` vim\nfunc VimOld()\n  let sum = 0\n  for i in range(1, 2999999)\n    let sum += i\n  endfor\n  return sum\nendfunc\n\nfunc Python()\n  py3 << END\nsum = 0\nfor i in range(1, 3000000):\n  sum += i\nEND\n  return py3eval('sum')\nendfunc\n\nfunc Lua()\n  lua << END\n    sum = 0\n    for i = 1, 2999999 do\n      sum = sum + i\n    end\nEND\n  return luaeval('sum')\nendfunc\n\ndef VimNew(): number\n  var sum = 0\n  for i in range(1, 2999999)\n    sum += i\n  endfor\n  return sum\nenddef\n\nlet start = reltime()\necho VimOld()\necho 'Vim old: ' .. reltimestr(reltime(start))\n\nlet start = reltime()\necho Python()\necho 'Python: ' .. reltimestr(reltime(start))\n\nlet start = reltime()\necho Lua()\necho 'Lua: ' .. reltimestr(reltime(start))\n\nlet start = reltime()\necho VimNew()\necho 'Vim new: ' .. reltimestr(reltime(start))\n```\n\n## Code for indent time measurements\n\n``` vim\ndef VimNew(): number\n  var totallen = 0\n  for i in range(1, 100000)\n    setline(i, '    ' .. getline(i))\n    totallen += len(getline(i))\n  endfor\n  return totallen\nenddef\n\nfunc VimOld()\n  let totallen = 0\n  for i in range(1, 100000)\n    call setline(i, '    ' .. getline(i))\n    let totallen += len(getline(i))\n  endfor\n  return totallen\nendfunc\n\nfunc Lua()\n  lua << END\n    b = vim.buffer()\n    totallen = 0\n    for i = 1, 100000 do\n      b[i] = \"    \" .. b[i]\n      totallen = totallen + string.len(b[i])\n    end\nEND\n  return luaeval('totallen')\nendfunc\n\nfunc Python()\n  py3 << END\ncb = vim.current.buffer\ntotallen = 0\nfor i in range(0, 100000):\n  cb[i] = '    ' + cb[i]\n  totallen += len(cb[i])\nEND\n  return py3eval('totallen')\nendfunc\n\nnew\ncall setline(1, range(100000))\nlet start = reltime()\necho VimOld()\necho 'Vim old: ' .. reltimestr(reltime(start))\nbwipe!\n\nnew\ncall setline(1, range(100000))\nlet start = reltime()\necho Python()\necho 'Python: ' .. reltimestr(reltime(start))\nbwipe!\n\nnew\ncall setline(1, range(100000))\nlet start = reltime()\necho Lua()\necho 'Lua: ' .. reltimestr(reltime(start))\nbwipe!\n\nnew\ncall setline(1, range(100000))\nlet start = reltime()\necho VimNew()\necho 'Vim new: ' .. reltimestr(reltime(start))\nbwipe!\n```\n"
        },
        {
          "name": "READMEdir",
          "type": "tree",
          "content": null
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.36,
          "content": "# Security Policy\n\n## Reporting a vulnerability\n\nIf you want to report a security issue, please privately disclose the issue to the vim-security mailing list\nvim-security@googlegroups.com\n\nThis is a private list, read only by the maintainers, but anybody can post, after moderation.\n\n**Please don't publicly disclose the issue until it has been addressed by us.**\n"
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "configure",
          "type": "blob",
          "size": 0.18,
          "content": "#! /bin/sh\n\n# This is just a stub for the Unix configure script, to provide support for\n# doing \"./configure\" in the top Vim directory.\n\ncd \"${SRCDIR:-src}\" && exec ./configure \"$@\"\n"
        },
        {
          "name": "lang",
          "type": "tree",
          "content": null
        },
        {
          "name": "nsis",
          "type": "tree",
          "content": null
        },
        {
          "name": "pixmaps",
          "type": "tree",
          "content": null
        },
        {
          "name": "runtime",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "uninstall.txt",
          "type": "blob",
          "size": 3.72,
          "content": "Uninstalling Vim on MS-Windows.\n\nThere are three ways to remove Vim:\n\n1. With the GUI uninstaller.\n   This is only available when Vim was installed with the self-installing\n   executable.  This has a minimal number of questions.  It can delete\n   everything that was installed.\n\n2. With uninstall.exe.\n   This removes most installed items, but does not delete the files you\n   unpacked.\n\n3. By hand.\n   This is a bit more work, but you can decide exactly what you want to\n   remove.  For uninstalling the \"Edit with Vim\" popup menu entry you still\n   have to use uninstall.exe.\n\nIt's recommended to use the method that matches with how you installed Vim.\nThus if you installed Vim by hand, delete it by hand.\n\nThe first two methods should be available from the Add/Remove software window\nand the Vim entry in the Start menu.  If these have been removed already, find\n\"uninstall-gui.exe\" or \"uninstall.exe\" in the Vim directory.\n   Running these programs should be self-explanatory.  Carefully read the\nmessages to avoid deleting something you want to keep.\n\nHere are guidelines for removing Vim by hand:\n\n1. Remove the \"Edit with Vim\" popup menu entry, if it exists.  This is done by\n   running the uninstall.exe program.  It removes the registry entries for the\n   \"Edit with Vim\" popup menu entry.  You only need to run uninstall.exe when\n   you have installed the menu entry.  You can also run uninstall.exe from the\n   Control panel with the Add/Remove programs application.\n   Note that uninstall.exe offers you the option to uninstall other items.  You\n   can skip this.\n\n2. Only if you have used the OLE version of gvim: Remove the registration of\n   this program by running \"gvim -unregister\" in a console window.\n\n3. Delete the executables.  If you copied the executables to another location,\n   you will have to delete them from where you copied them to.  If you don't\n   remember where they are, look in the directories from the $PATH environment\n   variable.\n   If you created .bat files when installing Vim, also search for vim.bat,\n   gvim.bat, etc.\n\n4. If you want to completely delete vim, and are not going to install another\n   version, you can delete the vimrc files that you created.  These are\n   normally located in a directory like \"C:\\vim\".  If the $VIM environment\n   variable is set, it will tell the name of the directory.  Normally you can\n   delete everything in this directory.  Warning: You might have put some\n   files there that you would like to save.  If you did remove it all, you can\n   skip the next step.\n\n5. Delete the distributed files.  If you followed the directions, these will\n   be located in a directory like \"C:\\vim\\vim81\".  If the $VIM environment\n   variable is set, the directory will be $VIM\\vim81.  Delete the \"vim81\"\n   directory and all that is in it.  Warning: If you changed any of the\n   distributed files, or added some of your own files, you might want to save\n   these first.  But normally you would not have changed or added files here.\n\n6. Remove setting the $VIM and $VIMRUNTIME environment variable and adjust\n   $PATH.  $VIM only needs to be removed if you are not going to install\n   another version of Vim.  $VIMRUNTIME is mostly not set.  Check if $PATH\n   contains the path of the vim directory.  Note that $PATH may be set in\n   several places, you will have to find the right one, and only delete the\n   Vim path from it.  You might need to use the \"System Properties\" editor to\n   change the environment variables.  You can start it by selecting\n   Start/Settings/Control Panel and then \"System\".\n\n7. If you added a Vim entry in the start menu, delete it.\n\n8. If you created icons for Vim on the desktop, delete them.\n\nVim does not use .ini files.  The above should remove all Vim files, except\nthe ones that you moved elsewhere yourself.\n"
        },
        {
          "name": "vimtutor.bat",
          "type": "blob",
          "size": 6.74,
          "content": ":: Start Vim on a copy of the tutor file.\n@echo off\nSetLocal\n\n:: Usage:\n:: vimtutor [/?|{/ | -}h|{/ | --}help] [{/ | -}c|{/ | --}chapter NUMBER] [{/ | --}console] [xx]\n::\n:: -console means gvim will not be used\n:: xx is a language code like \"es\" or \"nl\".\n:: When an xx argument is given, it tries loading that tutor.\n:: When this fails or no xx argument was given, it tries using 'v:lang'\n:: When that also fails, it uses the English version.\n\n:: Use Vim to copy the tutor, it knows the value of $VIMRUNTIME\nfor %%G in (. %TMP% %TEMP%) do (\n  call :TestDirWritable \"%~f0\" %%G\n  if not ERRORLEVEL 1 goto DirOk\n)\n\necho:\necho:No working directory is found.\ngoto End\n\n:TestDirWritable\nset TUTORCOPY=%2\\$tutor$\ncopy %1 %TUTORCOPY% 2>&1> nul\ngoto DelTmpCopy\n\n:DirOk\ntitle Tutorial on the Vim editor\nset \"use=Gui\"\n\nfor /F \"usebackq tokens=2 delims=:\" %%G in (`chcp`) do (\n  set /a \"_sav_chcp=%%G\"\n  1> nul chcp 65001\n)\n\n:GetChptLngs\nfor %%G in (tutor1;tutor2) do (\n  if exist \"%~dp0tutor\\%%G\" (set \"lngs_%%G=en;\") else (\n    if exist \"%~dp0tutor\\%%G.utf-8\" set \"lngs_%%G=en;\")\n  for /F \"tokens=2 delims=._\" %%H in (\n    '2^> nul dir /B /A:-D \"%~dp0tutor\\%%G.???.utf-8\"') do (\n      call set \"lngs_%%G=%%lngs_%%G%%%%H;\")\n)\n:EndGetChptLngs\n\n:ParseArgs\nif \"%*\"==\"\" goto Use%use%\nif \"%1\"==\"/?\" goto Usage\nif \"%1\"==\"/h\" goto Usage\nif \"%1\"==\"-h\" goto Usage\nif \"%1\"==\"/help\" goto Usage\nif \"%1\"==\"--help\" goto Usage\nif \"%1\"==\"/list\" goto List\nif \"%1\"==\"--list\" goto List\n:DoShift\nif \"%1\"==\"/c\" (call :ChkChpt %2 && (shift & shift & goto DoShift) || goto End)\nif \"%1\"==\"-c\" (call :ChkChpt %2 && (shift & shift & goto DoShift) || goto End)\nif \"%1\"==\"/chapter\" (\n  call :ChkChpt %2 && (shift & shift & goto DoShift) || goto End\n)\nif \"%1\"==\"--chapter\" (\n  call :ChkChpt %2 && (shift & shift & goto DoShift) || goto End\n)\nif \"%1\"==\"/console\" (set \"use=Vim\" & shift & goto DoShift)\nif \"%1\"==\"--console\" (set \"use=Vim\" & shift & goto DoShift)\ncall :ChkLng %1 && shift || goto End\nif not \"%1\"==\"\" goto DoShift\ngoto Use%use%\n\n:UseGui\n:: Try making a copy of tutor with gvim.  If gvim cannot be found, try using\n:: vim instead.  If vim cannot be found, alert user to check environment and\n:: installation.\n\n:: The script tutor.vim tells Vim which file to copy.\nstart \"dummy\" /B /W \"%~dp0gvim.exe\" -u NONE -c \"so $VIMRUNTIME/tutor/tutor.vim\"\nif ERRORLEVEL 1 goto UseVim\n\n:: Start gvim without any .vimrc, set 'nocompatible' and 'showcmd'\nstart \"dummy\" /B /W \"%~dp0gvim.exe\" -u NONE -c \"set nocp sc\" %TUTORCOPY%\n\ngoto End\n\n:UseVim\n:: The script tutor.vim tells Vim which file to copy\ncall \"%~dp0vim.exe\" -u NONE -c \"so $VIMRUNTIME/tutor/tutor.vim\"\nif ERRORLEVEL 1 goto NoExecutable\n\n:: Start vim without any .vimrc, set 'nocompatible and 'showcmd''\ncall \"%~dp0vim.exe\" -u NONE -c \"set nocp sc\" %TUTORCOPY%\n\ngoto End\n\n:NoExecutable\necho:\necho:\necho:No vim or gvim found in current directory or %%PATH%%.\necho:Check your installation or re-run install.exe.\n\ngoto End\n\n:ChkChpt\nif defined CHAPTER (\n  echo:Error. Invalid command line arguments.\n  echo:See %~nx0 /? for help.\n  exit /B 1\n)\nfor /F %%G in ('echo %1 ^| findstr /R \"\\<[1-2]\\>\"') do (\n  set \"CHAPTER=%%G\" & exit /B 0\n)\necho:Error. The chapter argument must contain only the digits 1 or 2.\nexit /B 1\n\n:ChkLng\nif \"%1\"==\"\" exit /B 0\nif defined xx (\n  echo:Error. Invalid command line arguments.\n  echo:See %~nx0 /? for help.\n  exit /B 1\n)\nfor /F %%G in ('echo %1 ^| findstr /R \"[-0-9\\._\\[\\]\\$\\^\\*/!@#&(|)=+\\\\]\"') do (\n  echo:Error. The language code must contain only alphabetic characters.\n  exit /B 1\n)\nset \"_t=%1\"\nif \"\"==\"%_t:~1%\" (\n  echo:Error. The language code must be 2 or 3 characters only.\n  exit /B 1\n)\nif not \"\"==\"%_t:~3%\" (\n  echo:Error. The language code must be 2 or 3 characters only.\n  exit /B 1\n)\nSetLocal EnableDelayedExpansion\nif \"!lngs_tutor%CHAPTER%:%1;=!\"==\"!lngs_tutor%CHAPTER%!\" (\n  echo:The current installation does not have the %1 language.\n  echo:English will be used for the tutorial.\n  echo:To view the available languages, use the `%~nx0 /list` command.\n  1> nul timeout /T 2\n  EndLocal & set \"xx=en\" & exit /B 0\n) else (EndLocal & set \"xx=%1\" & exit /B 0)\n\n:Usage\necho:\necho:== USAGE =================================================================\necho:\necho:%~nx0 /? ^| ^{/ ^| -^}h ^| ^{/ ^| --^}help\necho:or\necho:%~nx0 ^{/ ^| --^}list\necho:or\necho:%~nx0 ^[^{/ ^| -^}c ^| ^{/ ^| --}chapter NUMBER^] ^[^{/ ^| --^}console^] ^[lng^]\necho:\necho:where:\necho:/? or /h or -h or /help or --help\necho:\t\t\t\tDisplay the quick help and exit.\necho:\necho:/list or --list\necho:\t\t\t\tDisplay the available chapters and languages\necho:\t\t\t\tof the tutorial and exit.\necho:\necho:/c or -c or /chapter or --chapter NUMBER\necho:\t\t\t\tSpecified chapter of the tutorial.\necho:\t\t\t\tThe NUMBER should be 1 or 2.\necho:\t\t\t\tBy default, the first chapter.\necho:\necho:/console or --console\necho:\t\t\t\tOpen the tutorial in the console instead of GUI.\necho:\necho:lng\necho:\t\t\t\tIs a 2 or 3 character ISO639 language code\necho:\t\t\t\tlike \"es\", \"nl\" or \"bar\".\necho:\t\t\t\tThe default language is English.\necho:\necho:Examples:\necho:\t%~nx0 es /c 1 /console\necho:\t%~nx0 --chapter 2 de\necho:\t%~nx0 fr\necho:\n\n:EndUsage\ngoto End\n\n:List\n\n:GetLngName\nif defined TMP (set \"pscult_fl=%TMP%\\pscult.tmp\") else (\n  set \"pscult_fl=%TEMP%\\pscult.tmp\")\n\npowershell.exe -NoLogo -NoProfile -Command ^\n[system.globalization.cultureinfo]::GetCultures('AllCultures') ^| ^\nWhere Name -NotLike \"*-*\" ^| Where DisplayName -NotLike \"Invariant*\" ^| ^\n%%{$_.Name + \\\"`t\\\" + $_.DisplayName + \\\"`t\\\" + $_.NativeName} ^| ^\nSort-Object ^| Out-File -FilePath \"%pscult_fl%\" -Encoding utf8\n\nif defined lngs_tutor1 (set \"lngs=%lngs_tutor1%\")\nif defined lngs_tutor2 if defined lngs (\n  for %%G in (%lngs_tutor2%) do (call set \"lngs=%%lngs:%%G;=%%\")\n  set \"lngs=%lngs%%lngs_tutor2%\"\n  ) else (set \"lngs=%lngs_tutor2%\")\n\nif defined lngs (\n  for %%G in (%lngs%) do (\n    for /F \"tokens=2,* delims=\t\" %%H in (\n      '2^> nul findstr /BR \"\\<%%G\\>\" \"%pscult_fl%\"'\n    ) do (set \"%%G_name=%%H       %%I\")\n  )\n  set \"bar_name=Bavarian       Boarisch\"\n  set \"eo_name=Esperanto       Esperanto\"\n)\n:EndGetLngName\n\necho:\necho:The following chapters and languages are available in the current\necho:installation tutorial:\necho:\nif defined lngs_tutor1 (\n  echo:Chapter: 1\n  for %%G in (%lngs_tutor1%) do if \"en\"==\"%%G\" (\n    call echo:%%G\t%%%%G_name%%  by default) else (\n      call echo:%%G\t%%%%G_name%%)\n  echo:\n)\n\nif defined lngs_tutor2 (\n  echo:Chapter: 2\n  for %%G in (%lngs_tutor2%) do if \"en\"==\"%%G\" (\n    call echo:%%G\t%%%%G_name%%  by default) else (\n      call echo:%%G\t%%%%G_name%%)\n)\necho:\ngoto End\n\n:DelTmpCopy\n:: remove the copy of the tutor\nif exist %TUTORCOPY% del /F /Q %TUTORCOPY%\ngoto :EOF\n\n:End\n:: remove the copy of the tutor and ISO639 file\nif exist %TUTORCOPY% del /F /Q %TUTORCOPY%\nif exist %pscult_fl% del /F /Q %pscult_fl%\nchcp %_sav_chcp% 1> nul\ntitle %ComSpec%\nEndLocal\n\n@rem vim:ft=dosbatch:ts=8:sts=2:sw=2:noet:\n"
        },
        {
          "name": "vimtutor.com",
          "type": "blob",
          "size": 2.83,
          "content": "$ !\n$ !=====================================================================\n$ !\n$ !\tVimTutor.com\tversion 29-Aug-2002\n$ !\n$ !\tAuthor: Tom Wyant <Thomas.R.Wyant-III@usa.dupont.com>\n$ !\n$ !\tThis DCL command procedure executes the vimtutor command\n$ !\t(surprise, surprise!) which gives you a brief tutorial on the\n$ !\tVIM editor. Languages other than the default are supported in\n$ !\tthe usual way, as are at least some of the command qualifiers,\n$ !\tthough you'll need to play some fairly serious games with DCL\n$ !\tto specify ones that need quoting.\n$ !\n$ !\tCopyright (c) 2002 E. I. DuPont de Nemours and Company, Inc\n$ !\n$ !\tThis program is free software; you can redistribute it and/or\n$ !\tmodify it under the terms of the VIM license as available from\n$ !\tthe vim 6.1 \":help license\" command or (at your option) the\n$ !\tlicense from any later version of vim.\n$ !\n$ !\tThis program is distributed in the hope that it will be useful,\n$ !\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n$ !\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n$ !\n$ !=====================================================================\n$ !\n$ !\n$ !\tCheck for the existence of VIM, and die if it isn't there.\n$ !\n$\tif f$search (\"vim:vim.exe\") .eqs. \"\"\n$\tthen\n$\t    write sys$error \"Error - Can't run tutorial. VIM not found.\"\n$\t    exit\n$\tendif\n$ !\n$ !\n$ !\tPick up the argument, if any.\n$ !\n$\tinx = 0\n$ arg_loop:\n$\tinx = inx + 1\n$\tif f$type (p'inx') .nes. \"\"\n$\tthen\n$\t    if p'inx' .nes. \"\" .and. f$locate (\"-\", p'inx') .ne. 0\n$\t    then\n$\t\txx = p'inx'\n$\t\tassign/nolog \"''xx'\" xx\n$\t\tp'inx' = \"\"\n$\t    endif\n$\t    goto arg_loop\n$\tendif\n$ !\n$ !\n$ !\tMake sure we clean up our toys when we're through playing.\n$ !\n$\ton error then goto exit\n$ !\n$ !\n$ !\tCreate the VIM foreign command if needed\n$ !\n$\tif f$type (vim) .eqs. \"\" then vim := $vim:vim\n$ !\n$ !\n$ !\tBuild the name for our temp file.\n$ !\n$\ttutfil = \"sys$login:vimtutor_\" + -\n\t\tf$edit (f$getjpi (0, \"pid\"), \"trim\") + \".\"\n$\tassign/nolog 'tutfil' TUTORCOPY\n$ !\n$ !\n$ !\tCopy the selected file to the temp file\n$ !\n$\tassign/nolog/user nla0: sys$error\n$\tassign/nolog/user nla0: sys$output\n$\tvim -u \"NONE\" -c \"so $VIMRUNTIME/tutor/tutor.vim\"\n$ !\n$ !\n$ !\tRun the tutorial\n$ !\n$\tassign/nolog/user sys$command sys$input\n$\tvim -u \"NONE\" -c \"set nocp\" 'p1' 'p2' 'p3' 'p4' 'p5' 'p6' 'p7' 'p8' 'tutfil'\n$ !\n$ !\n$ !\tDitch the copy.\n$ !\n$ exit:\n$\tif f$type (tutfil) .nes. \"\" .and. f$search (tutfil) .nes. \"\" then -\n$\t    delete 'tutfil';*\n$\tif f$type (xx) .nes. \"\" then deassign xx\n$\tdeassign TUTORCOPY\n$\texit\n$ !\n$ !=====================================================================\n$ !\n$ !\t\tModification history\n$ !\n$ !\t29-Aug-2002\tT. R. Wyant\n$ !\t\tChanged license to vim.\n$ !\t\tFix error \"input is not from a terminal\"\n$ !\t\tJuggle documentation (copyright and contact to front,\n$ !\t\t\tmodification history to end).\n$ !\t25-Jul-2002\tT. R. Wyant\n$ !\t\tInitial version\n"
        }
      ]
    }
  ]
}