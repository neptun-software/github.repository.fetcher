{
  "metadata": {
    "timestamp": 1736557535112,
    "page": 584,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "XX-net/XX-Net",
      "stars": 33125,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4,
          "content": ".idea\n/data*\n*~\n*.pyc\n*.swp\n*.pot\n*.mo\n*.xpi\n*pybabel_update.sh\ncore\n.DS_Store\ndesktop.ini\n/SwitchyOmega/AutoProxy.xpi\n/SwitchyOmega/SwitchyOmega.crx\n/code/default/gae_proxy/server/lib/\n/code/default/gae_proxy/local/ipv6_tunnel/enable_ipv6_temp.bat\n/code/default/gae_proxy/local/ipv6_tunnel/set_best_server_temp.bat\n.pytest_cache\n*.log\ncode/version.txt\n\n\n# Babel files\nmessages.po-e\nmessages.pot\ntranslated.po"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.85,
          "content": ":rocket: XX-Net (翻墙VPN)\n=========\n这是一个稳健可靠的翻墙系统，已经连续运行 9 年！  \n我们不去研究墙有什么缺陷，因为所有的缺陷都会被慢慢的补上。  \n我们的策略是化身为普通流量，完全无法区分，最终隐身在茫茫的网络连接中。。。\n\n:electric_plug: 功能特性\n=========\n* 支持多平台： Android/iOS/Windows/Mac/Linux   \n* 采用独特的混淆算法，让您的流量在网络中无法被识别  \n* 开源绿色软件，无需安装，可以支持多台设备同时连接\n* 模拟Chrome浏览器行为，完全无法识别，稳定翻墙\n* 内置 ChatGPT，每个套餐赠送 ChatGPT-3.5 一百万token \n\n\n<br>\n\n### 官网下载: [https://xx-net.com](https://xx-net.com)\n### Telegram: [https://t.me/xxnetshare](https://t.me/xxnetshare)\n### Twitter: [https://twitter.com/XXNetDev](https://twitter.com/XXNetDev)\n###\n###### [中文帮助文档](https://github.com/XX-net/XX-Net/wiki/%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3) &nbsp; &nbsp; &nbsp;[English Document](https://github.com/XX-net/XX-Net/wiki/English-Home-Page) &nbsp; &nbsp; &nbsp;[فارسی صفحه اصلی](https://github.com/XX-net/XX-Net/wiki/Persian-home-page) \n\n<br>\n\n\n### 最新公告：\n 2024-03-06\n* 最新版5.9.10, 更新黑名单列表。\n* 5.9.0 升级GAE服务端到python3\n* 5.8.8 改进iOS下连接性能\n* 5.7.0 为X-Tunnel增加新通道\n* 5.6.0 重构代码，减少系统资源消耗\n* 5.1.0，内置ChatGPT\n* 原来是4.x.x 老版本的，需要重新下载新版安装，不能应用内升级。\n\n  \n<br>\n\n#### 提示：  \n* 有问题请先看[Wiki文档](https://github.com/XX-net/XX-Net/wiki/%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3)\n* [提问](https://github.com/XX-net/XX-Net/issues) 前，请先看[最近讨论主题](https://github.com/XX-net/XX-Net/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc) ，避免重复发问。  \n"
        },
        {
          "name": "SwitchyOmega",
          "type": "tree",
          "content": null
        },
        {
          "name": "code",
          "type": "tree",
          "content": null
        },
        {
          "name": "pytest.ini",
          "type": "blob",
          "size": 0.08,
          "content": "[pytest]\nlog_cli = true\nlog_cli_level = ERROR\nlog_level = ERROR\ntimeout = 200\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.04,
          "content": "pyOpenSSL\nbabel\njinja2\ngoogletrans==4.0.0-rc1\n"
        },
        {
          "name": "start",
          "type": "blob",
          "size": 5.63,
          "content": "#!/bin/sh\n\npath_to_script () {\n  TARGET=\"$1\"\n  BASENAME=\"$(basename \"$TARGET\")\"\n\n  (\n    cd -P \"$(dirname \"$TARGET\")\"\n    if [ -h \"$BASENAME\" ]\n    then\n        path_to_script \"$(readlink \"$BASENAME\")\"\n    else\n        echo \"$PWD\"\n    fi\n  )\n\n}\n\ngoto_script_path() {\n  PATH_TO_SCRIPT=\"$(path_to_script \"$0\")\"\n  # Fails to start if the install path contains spaces, so it must be quoted.\n  cd \"$PATH_TO_SCRIPT\"\n}\n\ngoto_script_path\nif ! type python > /dev/null 2>&1; then\n    PYTHON=\"python3\"\nelif python -V 2>&1| grep -q \"Python 3\" ;then\n    PYTHON=\"python\"\nelse\n    PYTHON=\"python3\"\nfi\n\n\nif [ -f code/version.txt ]; then\n    VERSION=`cat code/version.txt`\nelse\n    VERSION=\"default\"\nfi\n\n\nif [ ! -f \"code/$VERSION/launcher/start.py\" ]; then\n    VERSION=\"default\"\nfi\nREAL_VERSION=`cat code/$VERSION/version.txt`\necho \"Start version:$REAL_VERSION\"\n\n\n# launch xx-net service by ignore hungup signal\nlaunchWithNoHungup() {\n    nohup ${PYTHON} code/${VERSION}/launcher/start.py $@>/dev/null 2>&1 &\n}\n\n# launch xx-net service by hungup signal\nlaunchWithHungup() {\n    ${PYTHON} code/${VERSION}/launcher/start.py $@\n}\n\n\n# check command avalibility\nhas_command() {\n    type $1 > /dev/null 2>&1\n}\n\nopenwrt_setup_env()\n{\n echo \"It is OpenWrt.\"\n #TODO: Setup\n # check mount usb disk\n # install python, python-openssl, ipset to usb device\n # opkg --dest usb install python python-pyopenssl\n # setup dns\n # set auto start\n # echo \"It is openwrt.\"\n}\n\n# Install Packages\n# get operating system name\nos_name=`uname -s`\nif [ $os_name = 'Linux' ]; then\n\n  PYTHON3=\"python3/bin/python3\"\n  if test -f \"$PYTHON3\"; then\n    echo \"Linux using embedded python.\"\n    PYTHON=\"$PYTHON3\"\n  else\n    if ! ${PYTHON} --version 2> /dev/null; then\n        echo 'Installing python3 for your system... Please type in your password if requested'\n        if has_command zypper; then\n            # openSUSE\n            sudo zypper in -y python3\n        elif has_command apt-get; then\n            # Debian or Debian-like\n            sudo apt-get install -y python3\n        elif has_command dnf; then\n            # Fedora\n            sudo dnf install -y python3\n        elif has_command yum; then\n            # RedHat\n            sudo yum install -y python3\n        elif has_command pacman; then\n            # ArchLinux\n            sudo pacman -S --noconfirm python3\n        elif has_command opkg; then\n            # OpenWrt\n            echo \"install python\"\n            opkg install python3 python3\n        fi\n    fi\n  fi\nelif [ $os_name = 'Darwin' ]; then\n\n  PYTHON3=\"python3/bin/python3\"\n  if test -f \"$PYTHON3\"; then\n    echo \"Darwin using embedded python.\"\n    PYTHON=\"$PYTHON3\"\n  else\n    if ! ${PYTHON} -c 'import PyObjCTools, AppKit, SystemConfiguration' 2> /dev/null; then\n      sudo pip3 install -U PyObjC Pillow\n    fi\n  fi\n\n  if [ ! -d \"data/launcher/installed\" ]; then\n    # remove the mask for download file warning\n    xattr -c -r *\n    touch \"data/launcher/installed\"\n  fi\nfi\n\n\nhelp()\n{\necho \"\nUSAGE:\n\nstart -h\n  show help.\n\nstart\n -allow_remote\n   enable remote connect.\n\n -no_mess_system\n   Don't mess the system, include not install CA to browser, not add shortcut to desktop automatically.\n\n -no_popup\n   Don't popup Browser window when start.\n\n -no_systray\n   Don't show systray in task bar.\n\n -f\n   Run in foreground, in Mac will run in background as default.\n\n -hungup\n   start with nohup to run in background.\n\nstart set_iptables [interface]\n  set iptables for transparent proxy.\n  interface   The network interface which will be redirected\n              Default is br-lan\n\nstart unset_iptables [interface]\n\n\n\"\nexit 0\n}\n\n\nset_iptables(){\n    if [ \"$1\" = '' ]; then\n      INF=\"br-lan\"\n    else\n      INF=$1\n    fi\n    echo \"set interface $INF\"\n\n    # TODO: check if rule exist\n\n    iptables -t nat -N REDSOCKS\n    iptables -t nat -A REDSOCKS -d 0.0.0.0/8 -j RETURN\n    iptables -t nat -A REDSOCKS -d 10.0.0.0/8 -j RETURN\n    iptables -t nat -A REDSOCKS -d 127.0.0.0/8 -j RETURN\n    iptables -t nat -A REDSOCKS -d 169.254.0.0/16 -j RETURN\n    iptables -t nat -A REDSOCKS -d 172.16.0.0/12 -j RETURN\n    iptables -t nat -A REDSOCKS -d 192.168.0.0/16 -j RETURN\n    iptables -t nat -A REDSOCKS -d 224.0.0.0/4 -j RETURN\n    iptables -t nat -A REDSOCKS -d 240.0.0.0/4 -j RETURN\n    iptables -t nat -A REDSOCKS -p tcp -j REDIRECT --to-ports 8086\n    iptables -t nat -A PREROUTING --in-interface $INF -p tcp -j REDSOCKS\n    exit 0\n}\n\nunset_iptables(){\n    if [ \"$1\" = '' ]; then\n      INF=\"br-lan\"\n    else\n      INF=$1\n    fi\n\n    iptables -t nat -D PREROUTING --in-interface $INF -p tcp -j REDSOCKS\n    iptables -t nat -D REDSOCKS -d 0.0.0.0/8 -j RETURN\n    iptables -t nat -D REDSOCKS -d 10.0.0.0/8 -j RETURN\n    iptables -t nat -D REDSOCKS -d 127.0.0.0/8 -j RETURN\n    iptables -t nat -D REDSOCKS -d 169.254.0.0/16 -j RETURN\n    iptables -t nat -D REDSOCKS -d 172.16.0.0/12 -j RETURN\n    iptables -t nat -D REDSOCKS -d 192.168.0.0/16 -j RETURN\n    iptables -t nat -D REDSOCKS -d 224.0.0.0/4 -j RETURN\n    iptables -t nat -D REDSOCKS -d 240.0.0.0/4 -j RETURN\n    iptables -t nat -D REDSOCKS -p tcp -j REDIRECT --to-ports 8086\n    iptables -t nat -X REDSOCKS\n}\n\n\nARGS=$@\nif [ $os_name = 'Darwin' ] ; then\n  HANGUP='1'\nelse\n  HANGUP='0'\nfi\n\nwhile [ -n \"$1\" ]; do\ncase $1 in\n\n-h) help;shift 1;;\n-help) help;shift 1;;\n--help) help;shift 1;;\n-\\?) help;shift 1;;\n\n-allow_remote)shift 1;;\n\n-no_mess_system)shift 1;;\n\n-no_popup)shift 1;;\n\n-no_systray)shift 1;;\n\n-f)HANGUP='0'; shift 1;;\n-hungup)HANGUP='1';shift 1;;\n\nset_iptables) set_iptables $2;shift 1;;\n\nunset_iptables) unset_iptables $2;exit 1;;\n\n*) echo \"unknown option $1.\"; exit 1;;\nesac\ndone\n\n# Start Application\nif [ $HANGUP = '1' ]; then\n  echo \"Run XX-Net in background.\"\n  launchWithNoHungup $ARGS\nelse\n  launchWithHungup $ARGS\nfi\n\n"
        },
        {
          "name": "start.bat",
          "type": "blob",
          "size": 0.06,
          "content": "SET PYTHONPATH=\nSET PYTHONHOME=\n\"%~dp0%start.vbs\" console\n\n"
        },
        {
          "name": "start.vbs",
          "type": "blob",
          "size": 5.25,
          "content": "On Error Resume Next\n\nSub includeFile (fSpec)\n    dim fileSys, file, fileData\n    set fileSys = createObject (\"Scripting.FileSystemObject\")\n    set file = fileSys.openTextFile (fSpec)\n    fileData = file.readAll ()\n    file.close\n    executeGlobal fileData\n    set file = nothing\n    set fileSys = nothing\nEnd Sub\n\n\nSet fso=CreateObject(\"Scripting.FileSystemObject\")\n\nstrCurrentPath = CurrentPath()\nstrVersion = CurrentVersion()\nDim oShell : Set oShell = CreateObject(\"WScript.Shell\")\noShell.CurrentDirectory = strCurrentPath\n\npython_version = \"3\"\npythonDir = \"python\" & python_version & \"\\\"\nIf Not DirIsExist(pythonDir) then\n    includeFile strCurrentPath & \"\\code\\\" & strVersion & \"\\launcher\\download.vbs\"\n    includeFile strCurrentPath & \"\\code\\\" & strVersion & \"\\launcher\\unzip.vbs\"\nEnd If\n\nSub ChangeCurrentPathToRoot()\n    strCurrentPath = CurrentPath()\n\nEnd Sub\n\nFunction PreparePython(download_id)\n    ' Check if python have installed.\n    If DirIsExist(pythonDir) then\n        PreparePython = True\n        Exit Function\n    End If\n\n    CreateDir(\"data\")\n    CreateDir(\"data\\download\")\n\n    py_fn = \"py\" & python_version & \".zip\"\n    url = \"https://raw.githubusercontent.com/XX-net/XX-Net-dev/master/download/\" & py_fn\n    fp = \"data\\download\\\" & py_fn\n    fsize = 6594715\n    If download_id = 1 then\n        call DownloadFile1(url, fp)\n    Elseif download_id = 2 then\n        call DownloadFile2(url, fp)\n    End If\n\n    fs = GetFileSize(fp)\n    if not fs = fsize then\n        PreparePython = False\n        Exit Function\n    end if\n\n    call UnzipFiles(fp, \"data\\download\\py\" & python_version)\n\n    CreateDir(\"python27\")\n    call MoveDir(\"data\\download\\py\" & python_version, pythonDir)\n\n    call RemoveDir(\"data\\download\")\n    PreparePython = True\nEnd Function\n\nFunction DirIsExist(strPath)\n    Set fso = CreateObject(\"Scripting.FileSystemObject\")\n    Set shl = CreateObject(\"WScript.Shell\")\n\n    exists = fso.FolderExists(strPath)\n\n    if (exists) then\n        DirIsExist = True\n    Else\n        DirIsExist = False\n    end if\nEnd Function\n\nFunction CreateDir(strPath)\n    set filesys=CreateObject(\"Scripting.FileSystemObject\")\n    If Not filesys.FolderExists(strPath) Then\n        Set newfolder = filesys.CreateFolder(strPath)\n    End If\nEnd Function\n\nFunction GetFileSize(strPath)\n    set filesys=CreateObject(\"Scripting.FileSystemObject\")\n    GetFileSize = filesys.GetFile(strPath).Size\nEnd Function\n\nFunction GetAbslutePath(path)\n    Dim fso\n    Set fso = CreateObject(\"Scripting.FileSystemObject\")\n    GetAbslutePath = fso.GetAbsolutePathName(path)\nEnd Function\n\nSub UnzipFiles(zipFile, targetDir)\n    'WScript.Echo \"unzip \" & zipFile\n    call Unzip(zipFile, targetDir)\nEnd Sub\n\nSub MoveDir(srcDir, dstDir)\n    srcDir = GetAbslutePath(srcDir)\n    dstDir = GetAbslutePath(dstDir)\n    set fs = CreateObject(\"Scripting.FileSystemObject\")\n    set folder = fs.GetFolder(srcDir)\n    folder.Move dstDir\nEnd Sub\n\nSub RemoveDir(strFolderPath)\n    Dim objFSO, objFolder\n    Set objFSO = CreateObject (\"Scripting.FileSystemObject\")\n    If objFSO.FolderExists(strFolderPath) Then\n        objFSO.DeleteFolder strFolderPath, True\n    End If\nEnd Sub\n\n\npython_is_ready = PreparePython(1)\nIf not python_is_ready then\n    python_is_ready = PreparePython(2)\nEnd If\n\nIf not python_is_ready then\n    WScript.Echo \"XX-Net Download Python Environment fail, Please download Windows version.\"\n    Wscript.Quit\nEnd if\n\n\nFunction CurrentPath()\n    strPath = Wscript.ScriptFullName\n    Set objFSO = CreateObject(\"Scripting.FileSystemObject\")\n    Set objFile = objFSO.GetFile(strPath)\n    CurrentPath = objFSO.GetParentFolderName(objFile)\nEnd Function\n\nFunction CurrentVersion()\n    strCurrentPath = CurrentPath()\n    strVersionFile = strCurrentPath & \"/code/version.txt\"\n\n    Set fso = CreateObject(\"Scripting.FileSystemObject\")\n    If (fso.FileExists(strVersionFile)) Then\n\n        Set objFileToRead = CreateObject(\"Scripting.FileSystemObject\").OpenTextFile(strVersionFile,1)\n        CurrentVersion = objFileToRead.ReadLine()\n\n        version_path = strCurrentPath & \"/code/\" & CurrentVersion & \"/launcher/start.py\"\n        If( Not fso.FileExists(version_path) ) Then\n            CurrentVersion = \"default\"\n        End If\n\n        objFileToRead.Close\n        Set objFileToRead = Nothing\n    Else\n       CurrentVersion = \"default\"\n    End If\n\nEnd Function\n\n\nFunction isConsole()\n    Set objArgs = Wscript.Arguments\n    'WScript.Echo objArgs.Count\n    'WScript.Echo objArgs(0)\n    isConsole = 0\n    If objArgs.Count > 0 Then\n        if objArgs(0) = \"console\" Then\n            isConsole = 1\n        End If\n    End If\nEnd Function\n\n\nDim strArgs\nquo = \"\"\"\"\n\nIf isConsole() Then\n    python_cmd = \"python.exe\"\nElse\n    python_cmd = \"pythonw.exe\"\nEnd If\n\nstrExecutable = quo & strCurrentPath & \"\\\" & pythonDir & python_cmd & quo\nstrArgs = strExecutable & \" \" & quo & strCurrentPath & \"\\code\\\" & strVersion & \"\\launcher\\start.py\" & quo\nRunningLockFn = strCurrentPath & \"\\data\\launcher\\Running.Lck\"\n'WScript.Echo strArgs\n\nSet fso = CreateObject(\"Scripting.FileSystemObject\")\nSet oShell = CreateObject (\"Wscript.Shell\")\noShell.Environment(\"Process\")(\"PYTHONPATH\")=\"\"\noShell.Environment(\"Process\")(\"PYTHONHOME\")=\"\"\nDo\n    StartTime = Timer\n    oShell.Run strArgs, isConsole(), true\n    EndTime = Timer\n    run_cost = EndTime - StartTime\nLoop Until (not fso.FileExists(RunningLockFn)) or run_cost < 20\n"
        },
        {
          "name": "xx_net.sh",
          "type": "blob",
          "size": 1.93,
          "content": "#!/bin/bash\n#\n# xx_net init script\n#\n\n### BEGIN INIT INFO\n# Provides:          xx_net\n# Required-Start:    $syslog\n# Required-Stop:     $syslog\n# Should-Start:      $local_fs\n# Should-Stop:       $local_fs\n# Default-Start:     2 3 4 5\n# Default-Stop:      0 1 6\n# Short-Description: Monitor for xx_net activity\n### END INIT INFO\n\n# **NOTE** bash will exit immediately if any command exits with non-zero.\nset -e\n\nPACKAGE_NAME=xx_net\nPACKAGE_DESC=\"XX-Net proxy server\"\nPATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:${PATH}\n\n\nif [ -L $0 ];then\n       PACKAGE_PATH=\"$(dirname $(readlink -n $0))/\"                                         \nelse\n    PACKAGE_PATH=`dirname $0`\nfi\ncd $PACKAGE_PATH\nPACKAGE_PATH=\"`pwd `/\"\nPACKAGE_START=\"${PACKAGE_PATH}start\"\n\n\nstart() {\n    echo -n \"Starting ${PACKAGE_DESC}: \"\n    nohup ${PACKAGE_START} >/dev/null 2>&1 &\n    echo \"${PACKAGE_NAME}.\"\n}\n\nstop() {\n    echo -n \"Stopping ${PACKAGE_DESC}: \"\n    kill -9 `ps aux | grep \"${PACKAGE_START}\" | grep -v grep | awk '{print $2}'` || true\n    kill -9 `ps aux | grep \"launcher/start.py\" | grep -v grep | awk '{print $2}'` || true\n    echo \"${PACKAGE_NAME}.\"\n}\n\nstatus() {\n    pid=\"PID`ps aux | grep \"${PACKAGE_START}\" | grep -v grep | awk '{print $2}'`\"\n    if [[ \"$pid\" == \"PID\" ]];then\n        echo \"xx-net stopped\"\n    else\n        echo \"xx-net running,pid: ${pid##\"PID\"}\"\n    fi\n}   \n\nrestart() {\n    stop\n    sleep 1\n    start\n}\n\nusage() {\n    N=$(basename \"$0\")\n    echo \"Usage: [sudo] $N {start|stop|restart|status}\" >&2\n    exit 1\n}\n\nif [ \"$(id -u)\" != \"0\" ]; then\n    echo \"please use sudo to run ${PACKAGE_NAME}\"\n    exit 0\nfi\n\n\ncase \"$1\" in\n    # If no arg is given, start the goagent.\n    # If arg `start` is given, also start goagent.\n    '' | start)\n        start\n        ;;\n    stop)\n        stop\n        ;;\n    #reload)\n    restart | force-reload)\n        restart\n        ;;\n       status)\n        status\n        ;;\n    *)\n        usage\n        ;;\nesac\n\nexit 0\n"
        }
      ]
    }
  ]
}