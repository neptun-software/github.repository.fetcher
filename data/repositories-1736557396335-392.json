{
  "metadata": {
    "timestamp": 1736557396335,
    "page": 392,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "pyenv/pyenv",
      "stars": 40219,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".agignore",
          "type": "blob",
          "size": 0.02,
          "content": "./versions\n./cache\n"
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.04,
          "content": ".git/\n.python-version\n.vscode/\n.idea/\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.22,
          "content": "# Editor configuration, see https://editorconfig.org\nroot = true\n\n[*]\nend_of_line = lf\ncharset = utf-8\n\n# Makefiles always use tabs for indentation\n[Makefile]\nindent_style = tab\nindent_size = unset # Allow user-defined tab width\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.12,
          "content": "/shims\n/version\n/versions\n/sources\n/cache\n/libexec/*.dylib\n/src/Makefile\n/src/*.o\n/bats/\n/default-packages\n.idea\n*.un~\n"
        },
        {
          "name": ".vimrc",
          "type": "blob",
          "size": 0.03,
          "content": "set wildignore+=versions/*,cache/*\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 63.97,
          "content": "# Version History\n\n## Release v2.5.0\n* `pyenv init -` performance improvements; recommend using `pyenv init - <shell>` by @ChristianFredrikJohnsen in https://github.com/pyenv/pyenv/pull/3136\n* Add miniconda3-24.11.1-0 by @binbjz in https://github.com/pyenv/pyenv/pull/3138\n* Add miniconda3-24.3.0-0 by @native-api in https://github.com/pyenv/pyenv/pull/3139\n* CI: only run macos_build_bundled_dependencies and ubuntu_build_tar_gz for CPython by @native-api in https://github.com/pyenv/pyenv/pull/3141\n* Add miniforge3 and mambaforge3 24.1.2-0, 24.3.0-0, 24.5.0-0, 24.7.1-0, 24.7.1-1, 24.7.1-2, 24.9.0-0, 24.9.2-0, 24.11.0-0, 24.11.0-1 by @native-api in https://github.com/pyenv/pyenv/pull/3142\n* Skip broken miniforge3/mambaforge3 22.11.0-0, 22.11.0-1, 22.11.0-2 in the generation script by @native-api in https://github.com/pyenv/pyenv/pull/3143\n\n## Release v2.4.23\n* README: explain using multiple versions by @Finkregh in https://github.com/pyenv/pyenv/pull/3126\n* Support PACKAGE_CPPFLAGS and PACKAGE_LDFLAGS by @native-api in https://github.com/pyenv/pyenv/pull/3130\n* Adjust suggested shell startup code to support Pyenv with Pyenv-Win in WSL by @native-api in https://github.com/pyenv/pyenv/pull/3132\n* Support nonexistent versions being present and set in a local .python-version by @native-api in https://github.com/pyenv/pyenv/pull/3134\n* Add CPython 3.14.0a3 by @nedbat in https://github.com/pyenv/pyenv/pull/3135\n\n## Release v2.4.22\n* Speed up building bundled OpenSSL by @native-api in https://github.com/pyenv/pyenv/pull/3124\n* CI: add building modified scripts with bundled MacOS dependencies by @native-api in https://github.com/pyenv/pyenv/pull/3123\n* CL: + test modified scripts with tar.gz source by @native-api in https://github.com/pyenv/pyenv/pull/3125\n* Fix 404 for openssl-3.4.0 release in build 3.13.1 by @dlamblin in https://github.com/pyenv/pyenv/pull/3122\n\n## Release v2.4.21\n* Add CPython 3.13.1t by @makukha in https://github.com/pyenv/pyenv/pull/3120\n* Prefer tcl-tk@8 from Homebrew due to release of Tcl/Tk 9 with which only 3.12+ are compatible by @native-api in https://github.com/pyenv/pyenv/pull/3118\n\n## Release v2.4.20\n* README: Fix Markdown in \"Notes about python releases\" by @noelleleigh in https://github.com/pyenv/pyenv/pull/3112\n* README: correct link to shell setup instructions by @shortcuts in https://github.com/pyenv/pyenv/pull/3113\n* Add CPython 3.9.21, 3.10.16, 3.11.11, 3.12.8 and 3.13.1 by @edgarrmondragon in https://github.com/pyenv/pyenv/pull/3117\n\n## Release v2.4.19\n* Add CPython 3.14.0a2 by @nedbat in https://github.com/pyenv/pyenv/pull/3110\n* Add quick start section and gif demo to accompany it. by @madhu-GG in https://github.com/pyenv/pyenv/pull/3044\n\n## Release v2.4.18\n* Add miniforge3-24.9.2-0 by @goerz in https://github.com/pyenv/pyenv/pull/3106\n\n## Release v2.4.17\n* Add miniconda3-24.9.2-0 by @binbjz in https://github.com/pyenv/pyenv/pull/3096\n* Add Anaconda3-2024.10-1 by @binbjz in https://github.com/pyenv/pyenv/pull/3097\n\n## Release v2.4.16\n* Add GraalPy 24.1.1 by @msimacek in https://github.com/pyenv/pyenv/pull/3092\n* Add CPython 3.14.0a1 by @edgarrmondragon in https://github.com/pyenv/pyenv/pull/3093\n\n## Release v2.4.15\n* CI: replace set-output with GITHUB_OUTPUT by @tuzi3040 in https://github.com/pyenv/pyenv/pull/3079\n* Make uninstall yes/no prompt consistent with others by @dpoznik in https://github.com/pyenv/pyenv/pull/3080\n* Add CPython 3.13.0 by @edgarrmondragon in https://github.com/pyenv/pyenv/pull/3081\n* Avoid shadowing of virtualenvs with the name starting with \"python-\" by @aarbouin in https://github.com/pyenv/pyenv/pull/3086\n* Support free-threaded CPython flavor in prefix resolution by @native-api in https://github.com/pyenv/pyenv/pull/3090\n\n## Release v2.4.14\n* Add CPython 3.12.7 by @edgarrmondragon in https://github.com/pyenv/pyenv/pull/3078\n* Add CPython 3.13.0rc3 by @edgarrmondragon in https://github.com/pyenv/pyenv/pull/3077\n\n## Release v2.4.13\n* docs: Use `--verbose` with performance CPython build instructions by @caerulescens in https://github.com/pyenv/pyenv/pull/3053\n* Fix latest version resolution when using `python-` prefix by @edmorley in https://github.com/pyenv/pyenv/pull/3056\n* Fix tgz checksum for 3.9.20; fallback OpenSSL URLs and checksums by @native-api in https://github.com/pyenv/pyenv/pull/3060\n* Fix OpenSSL 3.3.2 download URLs by @edgarrmondragon in https://github.com/pyenv/pyenv/pull/3059\n* Add GraalPy 24.1.0 by @msimacek in https://github.com/pyenv/pyenv/pull/3066\n\n## Release v2.4.12\n* Add CPython 3.13.0rc2 by @edgarrmondragon in https://github.com/pyenv/pyenv/pull/3049\n* Add CPython 3.8.20, 3.9.20, 3.10.15, 3.11.10 and 3.12.6 by @edgarrmondragon in https://github.com/pyenv/pyenv/pull/3050\n\n## Release v2.4.11\n* Add /usr/etc/pyenv.d to hooks path by @tomschr in https://github.com/pyenv/pyenv/pull/3039\n* Add miniconda3-24.7.1-0 by @binbjz in https://github.com/pyenv/pyenv/pull/3040\n* Add PyPy v7.3.17 by @jsirois in https://github.com/pyenv/pyenv/pull/3045\n\n## Release v2.4.10\n* Add CPython 3.12.5 by @edgarrmondragon in https://github.com/pyenv/pyenv/pull/3030\n\n## Release v2.4.9\n* Add miniforge3-24.3.0-0 by @goerz in https://github.com/pyenv/pyenv/pull/3028\n* Add CPython 3.13.0rc1 by @edgarrmondragon in https://github.com/pyenv/pyenv/pull/3029\n\n## Release v2.4.8\n* Fix pyenv-uninstall not having the debug tracing invocation by @native-api in https://github.com/pyenv/pyenv/pull/3020\n* Add CPython 3.13.0b4 and 3.13.0b4t by @edgarrmondragon in https://github.com/pyenv/pyenv/pull/3019\n* README: Remove reference to Fig by @ThomasHaz in https://github.com/pyenv/pyenv/pull/3018\n* Fix tests failing if plugins are installed by @native-api in https://github.com/pyenv/pyenv/pull/3022\n* pyenv-latest: replace -q with -b and -f, document as internal by @native-api in https://github.com/pyenv/pyenv/pull/3021\n\n## Release v2.4.7\n* Add support for anaconda3-2024.06-1 by @binbjz in https://github.com/pyenv/pyenv/pull/3009\n* Fix debug build for X.Yt-dev by @native-api in https://github.com/pyenv/pyenv/pull/\n\n## Release v2.4.6\n* CI: push MacOS jobs to MacOS 13 and 14 by @native-api in https://github.com/pyenv/pyenv/pull/3002\n* Add 3.13.0b3t and exclude it from `pyenv latest` by @colesbury in https://github.com/pyenv/pyenv/pull/3001\n* Speed up `pyenv prefix` by not constructing advice text when it would be discarded by @Erotemic in https://github.com/pyenv/pyenv/pull/3005\n\n## Release v2.4.5\n* Add CPython 3.13.0b3 by @edgarrmondragon in https://github.com/pyenv/pyenv/pull/2996\n\n## Release v2.4.4\n* Add support for miniconda3 24.5.0-0 with py3.12, py3.11, py3.10, py3.9 by @binbjz in https://github.com/pyenv/pyenv/pull/2994\n* Add support for free-threaded Python by @colesbury in https://github.com/pyenv/pyenv/pull/2995\n\n## Release v2.4.3\n* Add miniconda3 24.4.0-0 by @binbjz in https://github.com/pyenv/pyenv/pull/2982\n\n## Release v2.4.2\n* Add script to install graalpy development builds by @timfel in https://github.com/pyenv/pyenv/pull/2969\n* Correct the Explanation of PATH Variable Lookup by @Y-askour in https://github.com/pyenv/pyenv/pull/2975\n* Document PYTHON_BUILD_CURL_OPTS, PYTHON_BUILD_WGET_OPTS, PYTHON_BUILD_ARIA2_OPTS by @native-api in https://github.com/pyenv/pyenv/pull/2976\n* Add sed and greadlink to shim exceptions by @native-api in https://github.com/pyenv/pyenv/pull/2977\n* Add CPython 3.13.0b2 by @jsirois in https://github.com/pyenv/pyenv/pull/2978\n* Add CPython 3.12.4 by @xxzgc in https://github.com/pyenv/pyenv/pull/2981\n\n## Release v2.4.1\n* Add CPython 3.12.3 by @edgarrmondragon in https://github.com/pyenv/pyenv/pull/2941\n* Add CPython 3.13.0a6 by @edgarrmondragon in https://github.com/pyenv/pyenv/pull/2942\n* Add PyPy v7.3.16 by @edgarrmondragon in https://github.com/pyenv/pyenv/pull/2948\n* Add CPython 3.14-dev, update 3.13-dev by @edgarrmondragon in https://github.com/pyenv/pyenv/pull/2960\n* Add CPython 3.13.0b1 by @edgarrmondragon in https://github.com/pyenv/pyenv/pull/2959\n\n## Release v2.4.0\n* Add CPython 3.13.0a4 by @saaketp in https://github.com/pyenv/pyenv/pull/2903\n* Handle the case where `pyenv-commands --sh` returns nothing by @aphedges in https://github.com/pyenv/pyenv/pull/2908\n* Document default build configuration customizations by @native-api in https://github.com/pyenv/pyenv/pull/2911\n* Use Homebrew in Linux if Pyenv is installled with Homebrew by @native-api in https://github.com/pyenv/pyenv/pull/2906\n* Add miniforge and mambaforge 22.11.1-3, 22.11.1-4, 23.1.0-0 to 23.11.0-0 by @aphedges in https://github.com/pyenv/pyenv/pull/2909\n* Add miniconda3-24.1.2 by @binbjz in https://github.com/pyenv/pyenv/pull/2915\n* Minor grammar fix in libffi backport patch in 2.5.x by @cuinix in https://github.com/pyenv/pyenv/pull/2922\n* Add CPython 3.13.0a5 by @edgarrmondragon in https://github.com/pyenv/pyenv/pull/2924\n* Add CPython 3.8.19 and 3.9.19 by @edgarrmondragon in https://github.com/pyenv/pyenv/pull/2929\n* Add GraalPy 24.0.0 by @msimacek in https://github.com/pyenv/pyenv/pull/2928\n* Add CPython 3.10.14 by @edgarrmondragon in https://github.com/pyenv/pyenv/pull/2930\n* Add Jython 2.7.3 by @cesarcoatl in https://github.com/pyenv/pyenv/pull/2936\n* Add CPython 3.11.9 by @edgarrmondragon in https://github.com/pyenv/pyenv/pull/2938\n* Add anaconda 2024.02 by @native-api in https://github.com/pyenv/pyenv/pull/2939\n\n## Release v2.3.36\n* Add a Dependabot config to auto-update GitHub action versions by @kurtmckee in https://github.com/pyenv/pyenv/pull/2863\n* Bump the github-actions group with 1 update by @dependabot in https://github.com/pyenv/pyenv/pull/2864\n* Add installation prefix to `python-config --ldflags` output by @mhaeuser in https://github.com/pyenv/pyenv/pull/2865\n* Add support for miniconda3 23.11.0-1, 23.11.0-2 with py3.11, py3.10, py3.9, py3.8 by @binbjz in https://github.com/pyenv/pyenv/pull/2870\n* Add micropython 1.20.0 and 1.21.0 by @cpzt in https://github.com/pyenv/pyenv/pull/2869\n* Make \"Automatic installer\" command in the README a copy-able code block by @ryan-williams in https://github.com/pyenv/pyenv/pull/2874\n* Add PyPy 7.3.14 by @dand-oss in https://github.com/pyenv/pyenv/pull/2876\n* Add graalpy-23.1.2 by @msimacek in https://github.com/pyenv/pyenv/pull/2884\n* Add CPython 3.13.0a3 by @edgarrmondragon in https://github.com/pyenv/pyenv/pull/2885\n* Add PyPy v7.3.15 by @edgarrmondragon in https://github.com/pyenv/pyenv/pull/2886\n* Update pypy3.9-7.3.13 checksums by @ecerulm in https://github.com/pyenv/pyenv/pull/2887\n* Add CPython 3.12.2 by @edgarrmondragon in https://github.com/pyenv/pyenv/pull/2899\n* Add CPython 3.11.8 by @edgarrmondragon in https://github.com/pyenv/pyenv/pull/2898\n\n## Release v2.3.35\n* Add CPython 3.12.1 by @edgarrmondragon in https://github.com/pyenv/pyenv/pull/2861\n\n## Release v2.3.34\n* Fix graalpy-community to use a separate package name by @native-api in https://github.com/pyenv/pyenv/pull/2855\n* Move 3.11.5+ to OpenSSL 3 by default by @native-api in https://github.com/pyenv/pyenv/pull/2858\n* Add CPython 3.11.7 by @edgarrmondragon in https://github.com/pyenv/pyenv/pull/2860\n\n## Release v2.3.33\n* Add miniforge3-23.3.1-1 by @goerz in https://github.com/pyenv/pyenv/pull/2839\n* Add support for miniconda3-3.11-23.10.0-1 by @binbjz in https://github.com/pyenv/pyenv/pull/2843\n* Add support for miniconda3 23.10.0-1 with py3.10、py3.9、py3.8 by @binbjz in https://github.com/pyenv/pyenv/pull/2844\n* Add CPython 3.13.0a2 by @edgarrmondragon in https://github.com/pyenv/pyenv/pull/2849\n* python-build: Document PYTHON_BUILD_HOMEBREW_OPENSSL_FORMULA and PYTHON_BUILD_HTTP_CLIENT by @native-api in https://github.com/pyenv/pyenv/pull/2853\n\n## Release v2.3.32\n* Describe --no-rehash option in the manpage by @fsc-eriker in https://github.com/pyenv/pyenv/pull/2832\n* Make adding $PYENV_ROOT/bin to PATH independent of other software by @native-api in https://github.com/pyenv/pyenv/pull/2837\n* Make `pyenv init` output insertable to startup files by @native-api in https://github.com/pyenv/pyenv/pull/2838\n\n## Release v2.3.31\n* Add new anaconda and miniconda definitions by @aphedges in https://github.com/pyenv/pyenv/pull/2824\n\n## Release v2.3.30\n\n* Fix intermittent \"broken pipe\" in tests by @native-api in https://github.com/pyenv/pyenv/pull/2817\n* Add CPython 3.13.0a1 by @edgarrmondragon in https://github.com/pyenv/pyenv/pull/2818\n* Add PyPy 7.3.13 by @dand-oss in https://github.com/pyenv/pyenv/pull/2807\n* Fix linking against Homebrew's Tcl/Tk 8.6.13 in MacOS by @startergo in https://github.com/pyenv/pyenv/pull/2820\n\n## Release v2.3.29\n\n* Add CPython 3.11.6 by @thecesrom in https://github.com/pyenv/pyenv/pull/2806\n* Add GraalPy 23.1.0 definition using the faster Oracle GraalVM distribution by @eregon in https://github.com/pyenv/pyenv/pull/2812\n* Install ncurses from Homebrew, if available by @aphedges in https://github.com/pyenv/pyenv/pull/2813\n\n## Release v2.3.28\n\n* Prioritize 'zlib from xcode sdk' flag correctly by @native-api in https://github.com/pyenv/pyenv/pull/2791\n* Prefer OpenSSL 3 in Homebrew in 3.13-dev by @edgarrmondragon in https://github.com/pyenv/pyenv/pull/2793\n* Add CPython 3.12.0rc3 by @saaketp in https://github.com/pyenv/pyenv/pull/2795\n* Add graalpy-23.1.0 and split between graalpy and graalpy-community by @msimacek in https://github.com/pyenv/pyenv/pull/2796\n* Update the OpenSSL dependency for Python 2.7.18 by @lpapp-foundry in https://github.com/pyenv/pyenv/pull/2797\n* Add CPython 3.12.0 by @edgarrmondragon in https://github.com/pyenv/pyenv/pull/2804\n\n## Release v2.3.27\n\n* Prefer OpenSSL 3 in Homebrew since 3.12 by @native-api in https://github.com/pyenv/pyenv/pull/2781\n* Fix get-pip urls for older pypy versions by @TimPansino in https://github.com/pyenv/pyenv/pull/2788\n* Update openssl url for 3.12.0rc2 by @zsol in https://github.com/pyenv/pyenv/pull/2789\n  \n## Release v2.3.26\n\n* Prevent `grep` warning in `conda.bash` by @aphedges in https://github.com/pyenv/pyenv/pull/2768\n* fix a typo in README.md by @xzmeng in https://github.com/pyenv/pyenv/pull/2769\n* use -I with ensurepip by @xaocon in https://github.com/pyenv/pyenv/pull/2764\n* Add CPython 3.12.0rc2 by @edgarrmondragon in https://github.com/pyenv/pyenv/pull/2778\n\n## Release v2.3.25\n\n* Add CPython 3.8.18, 3.9.18, 3.10.13, 3.11.5 by @edgarrmondragon in https://github.com/pyenv/pyenv/pull/2763\n \n## Release v2.3.24\n\n* README update: Added UNIX reference near Automatic installer by @VictorieeMan in https://github.com/pyenv/pyenv/pull/2744\n* Fix FreeBSD tests in MacOS CI by @native-api in https://github.com/pyenv/pyenv/pull/2748\n* Add CPython 3.12.0rc1 by @edgarrmondragon in https://github.com/pyenv/pyenv/pull/2752\n* [Add an updated Anaconda and Miniconda installers](https://github.com/pyenv/pyenv/commit/db871427c7a232e18ee7a6dc0182989a646ccca9)\n\n## Release v2.3.23\n\n* Add CPython 3.12.0b4 by @edgarrmondragon in https://github.com/pyenv/pyenv/pull/2741\n* Add new anaconda and miniconda definitions by @aphedges in https://github.com/pyenv/pyenv/pull/2742\n\n## Release v2.3.22\n\n* Add CPython 3.12.0b3 by @edgarrmondragon in https://github.com/pyenv/pyenv/pull/2730\n* Add Cinder 3.10 and Cinder configure patches by @filips123 in https://github.com/pyenv/pyenv/pull/2739\n\n## Release v2.3.21\n\n* Add graalpy-23.0.0 by @msimacek in https://github.com/pyenv/pyenv/pull/2724\n* Add PyPy 7.3.12 by @edgarrmondragon in https://github.com/pyenv/pyenv/pull/2726\n* Fix occasional 'libexec/pyenv-latest: line 39: printf: write error: Broken pipe' by @native-api in https://github.com/pyenv/pyenv/pull/2729\n\n## Release v2.3.20\n\n* Backport bpo-42351 to 3.5.10 by @native-api in https://github.com/pyenv/pyenv/pull/2717\n* Add missing patches for Python 3.7/3.8/3.9 by @tomkins in https://github.com/pyenv/pyenv/pull/2718\n\n## Release v2.3.19\n\n* Add CPython 3.7.17, 3.8.17 and 3.9.17 by @edgarrmondragon in https://github.com/pyenv/pyenv/pull/2711\n* Add CPython 3.11.4 by @edgarrmondragon in https://github.com/pyenv/pyenv/pull/2715\n* Add CPython 3.10.12 by @edgarrmondragon in https://github.com/pyenv/pyenv/pull/2714\n* Add CPython 3.12.0b2 by @edgarrmondragon in https://github.com/pyenv/pyenv/pull/2713\n\n## Release 2.3.18\n\n* Fix not showing symlink contents for unselected versions in `pyenv versions` by @native-api in https://github.com/pyenv/pyenv/pull/2675\n* Correct link in has_tar_xz_support else branch of 3.10.11 and 3.11.3 by @mirekdlugosz in https://github.com/pyenv/pyenv/pull/2677\n* Fix #2682: Correct pyenv_user_setup.bash file by @tomschr in https://github.com/pyenv/pyenv/pull/2687\n* fix: updating heredoc delimiter to be random and unique by @aviadhahami in https://github.com/pyenv/pyenv/pull/2691\n* Support ksh alternative names by @kpschoedel in https://github.com/pyenv/pyenv/pull/2697\n* Add CPython 3.12.0b1 by @edgarrmondragon in https://github.com/pyenv/pyenv/pull/2701\n* Update 3.12-dev and add 3.13-dev by @t0b3 in https://github.com/pyenv/pyenv/pull/2703\n\n## Release 2.3.17\n\n* Try locate `readlink` first in pyenv-hooks, fix #2654 by @Harry-Chen in https://github.com/pyenv/pyenv/pull/2655\n* Add CPython 3.12.0a7 by @edgarrmondragon in https://github.com/pyenv/pyenv/pull/2668\n* Add CPython 3.11.3 by @mirekdlugosz in https://github.com/pyenv/pyenv/pull/2671\n* Add CPython 3.10.11 by @mirekdlugosz in https://github.com/pyenv/pyenv/pull/2670\n\n## Release 2.3.16\n\n* Add Miniforge3-22.11.1-4 by @jlec in https://github.com/pyenv/pyenv/pull/2642\n* Add Anaconda3-2023.03 by @anton-petrov in https://github.com/pyenv/pyenv/pull/2648\n\n## Release 2.3.15\n\n* Add miniconda 23.1.0-1 by @aphedges in https://github.com/pyenv/pyenv/pull/2635\n* Add CPython 3.12.0a6 by @saaketp in https://github.com/pyenv/pyenv/pull/2638\n\n## Release 2.3.14\n\n* Fix indentation by @rafrafek in https://github.com/pyenv/pyenv/pull/2620\n* Support for \"BusyBox version\" of \"head\" by @schuellerf in https://github.com/pyenv/pyenv/pull/2629\n* bpo-27987 for v3.5.10 and v3.6.15: align by 16bytes on 64bit platforms by @chaimleib in https://github.com/pyenv/pyenv/pull/2630\n* bpo-36231 for v3.5.10: fix Unsupported MacOS X CPU type in ffi.h by @chaimleib in https://github.com/pyenv/pyenv/pull/2633\n* README: clarify behavior of `pyenv latest` by @mrienstra in https://github.com/pyenv/pyenv/pull/2634\n\n## Release 2.3.13\n\n* Fix pyenv-latest to ignore virtualenvs by @native-api in https://github.com/pyenv/pyenv/pull/2608\n* Show symlink contents in non-bare `pyenv versions' by @native-api in https://github.com/pyenv/pyenv/pull/2609\n* Ignore virtualenvs in `pyenv latest' in a clean way by @native-api in https://github.com/pyenv/pyenv/pull/2610\n* Fix link resolving in pyenv-versions by @laggardkernel in https://github.com/pyenv/pyenv/pull/2612\n* Add CPython 3.11.2 by @edgarrmondragon in https://github.com/pyenv/pyenv/pull/2615\n* Add CPython 3.10.10 by @edgarrmondragon in https://github.com/pyenv/pyenv/pull/2616\n* Add CPython 3.12.0a5 by @Afront in https://github.com/pyenv/pyenv/pull/2614\n\n## Release 2.3.12\n\n* Undefined name: do not forget self when accessing flavor by @cclauss in https://github.com/pyenv/pyenv/pull/2595\n* Fix wrong libpython being linked to in MacOS by @native-api in https://github.com/pyenv/pyenv/pull/2596\n* Fix `:latest` by @native-api in https://github.com/pyenv/pyenv/pull/2599\n* Fix `pyenv which` to support auto-resolved prefixes by @native-api in https://github.com/pyenv/pyenv/pull/2601\n* Add more recent build of nogil Python. by @colesbury in https://github.com/pyenv/pyenv/pull/2602\n\n## Release 2.3.11\n\n* Add CPython 3.12.0a4 by @Afront in https://github.com/pyenv/pyenv/pull/2590\n* Add a script to add the latest miniforge and mambaforge versions by @smcgivern in https://github.com/pyenv/pyenv/pull/2560\n* Add missing Miniforge/Mambaforge versions (4.10.2-0 - 22.9.0-3) by @smcgivern in https://github.com/pyenv/pyenv/pull/2591\n* Fix using dependencies from Ports in FreeBSD that are not searched with pkg-config by @native-api in https://github.com/pyenv/pyenv/pull/2593\n* Fix priority for user-supplied configure and make flags by (**_only set --enable-shared if user hasn't supplied --disable-shared_**) @native-api in https://github.com/pyenv/pyenv/pull/2592\n* Fix a compilation error in 3.8.10+ and 3.9.5+ when linking against Op… by @native-api in https://github.com/pyenv/pyenv/pull/2594\n\n## Release 2.3.10\n\n* Remove stray newline after python-build installation by @tklauser in https://github.com/pyenv/pyenv/pull/2566\n* Allow multiple versions for pyenv-install by @rockandska in https://github.com/pyenv/pyenv/pull/2568\n* --enable-shared by default by @anton-petrov in https://github.com/pyenv/pyenv/pull/2554\n* Fix non-bash output while detecting shell by @ianchen-tw in https://github.com/pyenv/pyenv/pull/2561\n* add pypy 7.3.11 release by @dand-oss in https://github.com/pyenv/pyenv/pull/2576\n* Mention how to build for maximum performance by @hauntsaninja in https://github.com/pyenv/pyenv/pull/2579\n* Add miniconda 22.11.1-1 by @aphedges in https://github.com/pyenv/pyenv/pull/2583\n* Add Fig as autocomplete suggestion  by @brendanfalk in https://github.com/pyenv/pyenv/pull/2574\n* Fix using dependencies from Ports in BSD with no pkg-config by @native-api in https://github.com/pyenv/pyenv/pull/2586\n\n## Release 2.3.9\n\n* Add -latest suffix to miniforge3 by @nwh in https://github.com/pyenv/pyenv/pull/2551\n* Add PyPy 7.3.10 by @dand-oss in https://github.com/pyenv/pyenv/pull/2553\n* Add miniforge3 and mambaforge 22.9.0-2 by @smcgivern in https://github.com/pyenv/pyenv/pull/2559\n* Fix compilation error when building OpenSSL 1.1.1q in MacOS 11+ for 3.9.16 by @lisbethw1130 in https://github.com/pyenv/pyenv/pull/2558\n* Add `openssl` patches for 3.7.15, 3.7.16, and 3.8.16 by @samdoran in https://github.com/pyenv/pyenv/pull/2564\n* Add support for Anaconda3-2022.10 by @huypn12 in https://github.com/pyenv/pyenv/pull/2565\n\n## Release 2.3.8\n\n* Export detected shell environment in pyenv-init by @ianchen-tw in https://github.com/pyenv/pyenv/pull/2540\n* Add CPython 3.12.0a3 by @saaketp in https://github.com/pyenv/pyenv/pull/2545\n* Add CPython 3.11.1 by @anton-petrov in https://github.com/pyenv/pyenv/pull/2549\n* Add CPython 3.10.9 by @rudisimo in https://github.com/pyenv/pyenv/pull/2544\n* Add 3.7.16, 3.8.16, 3.9.16 by @chadac in https://github.com/pyenv/pyenv/pull/2550\n\n## Release 2.3.7\n\n* Add Python version 3.11 to the macOS build by @jbkkd in https://github.com/pyenv/pyenv/pull/2510\n* Don't use Zlib from XCode SDK if a custom compiler is used by @native-api in https://github.com/pyenv/pyenv/pull/2516\n* Change line endings from CRLF to LF by @hoang-himself in https://github.com/pyenv/pyenv/pull/2517\n* Fix resolution of a name that's a prefix of another name by @native-api in https://github.com/pyenv/pyenv/pull/2521\n* GitHub Workflows security hardening by @sashashura in https://github.com/pyenv/pyenv/pull/2511\n* Add nushell to activate list by @theref in https://github.com/pyenv/pyenv/pull/2524\n* Fix compilation error when building OpenSSL 1.1.1q in MacOS 11+ for 3.9.15 and 3.8.15 by @twangboy in https://github.com/pyenv/pyenv/pull/2520\n* Add simple `.editorconfig` file by @aphedges in https://github.com/pyenv/pyenv/pull/2518\n* Support `aria2c` being a snap by @native-api in https://github.com/pyenv/pyenv/pull/2528\n* Add CPython 3.12.0a2 by @saaketp in https://github.com/pyenv/pyenv/pull/2527\n* Add --no-push-path option by @isaacl in https://github.com/pyenv/pyenv/pull/2526\n* Fix typo in README.md by @weensy in https://github.com/pyenv/pyenv/pull/2535\n* Copy auto installer oneliner to readme by @spookyuser in https://github.com/pyenv/pyenv/pull/2538\n\n## Release 2.3.6\n\n* Add CPython 3.10.8 (#2480)\n* Add CPython 3.7.15, 3.8.15, and 3.9.15 (#2482)\n* Add CPython 3.11.0 (#2493)\n* Add CPython 3.12.0a1 (#2495)\n* Add graalpy-22.3.0 (#2497)\n* Auto-resolve prefixes to the latest version (#2487)\n  * It must be a full prefix -- the actual searched prefix is `<prefix>[-.]`\n  * Other flavors are likely sorted incorrectly atm\n  * Prereleases and versions with some suffixes (`-dev`, `-src`, `-latest`) are not searched\n  * `pyenv uninstall` has been excluded from the resolution feature: deleting a dynamically selected installation could be problematic\n* Fix OpenSSL 1.1.1q compilation error in MacOS 11+ (#2500)\n* Link to Tcl/Tk from Homebrew via pkgconfig for 3.11+ (#2501)\n* Fix syntax error in `pyenv init -` if PYENV_ROOT has spaces (#2506)\n\n## Release 2.3.5\n\n* Add CPython 3.10.7 (#2454)\n* Docs: update Fish PATH update (#2449)\n* Add CPython 3.7.14, 3.8.14 and 3.9.14 (#2456)\n* Update miniconda3-3.9-4.12.0 (#2460)\n* Add CPython 3.11.0rc2 (#2459)\n* Add patches for 3.7.14 to support Apple Silicon (#2463)\n* Add ability to skip all use of Homebrew (#2464)\n* Drop Travis integration (#2468)\n* Build CPython 3.12+ with --with-dsymutil in MacOS (#2471)\n* Add Pyston 2.3.5 (#2476)\n\n## Release 2.3.4\n\n* Add CPython 3.11.0rc1 (#2434)\n* Add support for multiple versions in `pyenv uninstall` (#2432)\n* Add micropython 1.18 and 1.19.1 (#2443)\n* CI: support Micropython, deleted scripts; build with -v (#2447)\n* Re-allow paths in .python-version while still preventing CVE-2022-35861 (#2442)\n* CI: Bump OS versions (#2448)\n* Add Cinder 3.8 (#2433)\n\n## Release 2.3.3\n\n* Use version sort in `pyenv versions` (#2405)\n* Add CPython 3.11.0b4 (#2411)\n* Python-build: Replace deprecated git protocol use with https in docs (#2413)\n* Fix relative path traversal due to using version string in path (#2412)\n* Allow pypy2 and pypy3 patching (#2421, #2419)\n* Add CPython 3.11.0b5 (#2420)\n* Add GraalPython 22.2.0 (#2425)\n* Add CPython 3.10.6 (#2428)\n\n## Release 2.3.2\n\n* Add CPython 3.11.0b2 (#2380)\n* Honor CFLAGS_EXTRA for MicroPython #2006 (#2007)\n* Add post-install checks for curses, ctypes, lzma, and tkinter (#2353)\n* Add CPython 3.11.0b3 (#2382)\n* Add flags for Homebrew into `python-config --ldflags` (#2384)\n* Add CPython 3.10.5 (#2386)\n* Add Anaconda 2019.10, 2021.04, 2022.05; support Anaconda in add_miniconda.py (#2385)\n* Add Pyston-2.3.4 (#2390)\n* Update anaconda3-2022.05 MacOSX arm64 md5 (#2391)\n\n## Release 2.3.1\n\n* Version file read improvements (#2269)\n* Add CPython 3.11.0b1 (#2358)\n* Update 3.11-dev and add 3.12-dev (#2361)\n* Add CPython 3.9.13 (#2372)\n* Add miniconda 4.12.0 (#2371)\n* Fix endless loop in `pyenv init -` under SSH in some shell setups (#2374)\n* CI: Add tests for modified Python build scripts (#2286)\n\n## Release 2.3.0\n\n* Bump openssl 1.1 to 1.1.1n for CPython 3.7 3.8 3.9 (#2276)\n* Doc Fix: Escape a hash character causing unwanted GitHub Issue linking (#2282)\n* Add CPython 3.9.12 (#2296)\n* Add CPython 3.10.4 (#2295)\n* Add patch for 3.6.15 to support Xcode 13.3 (#2288)\n* Add patch for 3.7.12 to support Xcode 13.3 (#2292)\n* Add CONTRIBUTING.md (#2287)\n* Add PyPy 7.3.9 release 2022-03-30 (#2308)\n* Add Pyston 2.3.3 (#2316)\n* Add CPython 3.11.0a7 (#2315)\n* Add \"nogil\" Python v3.9.10 (#2342)\n* Support XCode 13.3 in all releases that officially support MacOS 11 (#2344)\n* Add GraalPython 22.1.0 (#2346)\n* Make PYENV_DEBUG imply -v for `pyenv install` (#2347)\n* Simplify init scheme (#2310)\n* Don't use Homebrew outside of MacOS (#2349)\n* Add `:latest` syntax to documentation for the `install` command (#2351)\n\n## Release 2.2.5\n\n* Add CPython 3.10.3\n* Add CPython 3.9.11\n* Add CPython 3.8.13\n* Add CPython 3.7.13\n* Add CPython 3.11.0a6 (#2266)\n* Add PyPy 7.3.8 (#2253)\n* Add miniconda3-3.7-4.11.0, miniconda3-3.8-4.11.0, miniconda3-3.9-4.11.0 (#2268)\n* Add pyston-2.3.2 (#2240)\n* Fix UnicodeDecodeError for CPython 3.6.15 and 3.7.12 (#2237)\n* python-build: add URL for get-pip for Python 3.6 (#2238)\n* Bump openssl to 1.1.1n for CPython 3.10.x\n\n## Release 2.2.4\n\n* Added docstrings to several undocumented functions (#2197)\n* Fix incorrect pypy 2.7-7.3.6 sha256 hashes (#2208)\n* Fix a regression in include paths when compiling ctypes in 3.6.15/3.7.12 (#2209)\n* Revert \"Disable coreutils on M1 Apple Silicon with arm64 (#2020)\" (#2212)\n* CPython 3.11.0a4 (#2217)\n* CPython 3.9.10 and 3.10.2 (#2219)\n* miniconda3-latest: added Linux-aarch64 (#2221)\n* Add GraalPython 22.0.0 (#2226)\n\n\n## Release 2.2.3\n\n* Add new pypy versions (pypy2.7-7.3.2~7.3.5) to the version list (#2194)\n* Fix Python 3.7.12 compilation on macOS arm64/M1. (#2190)\n* Fix Python 3.6.15 compilation on macOS arm64/M1. (#2189)\n* Add Anaconda3-2021.11 (#2193)\n* CPython 3.11.0a3 (#2187)\n* Fix errant \"echo\" in README install instructions (#2185)\n* Add Miniforge and Mambaforge 4.10.3-10 (#2184)\n* Add CPython 3.10.1 (#2183)\n* Fix 3.6.15 build on macOS (#2182)\n\n## Release 2.2.2\n\n* Add support for macOS Apple M1 (#2164)\n\n## Release 2.2.1\n\n* Add CPython 3.9.9 (#2162)\n* Add CPython 3.9.8 (#2152)\n* Add Add micropython 1.17 (#2158)\n* Add Add micropython 1.16 (#2158)\n* Patch 3.10.0 configure, fixes https://bugs.python.org/issue45350 (#2155)\n* Use command and type instead of which (#2144)\n* Add definition of pyenv help in COMMANDS.md #2139\n* Use OpenSSL 1.0 for CPython 2.7.18\n\n## Release 2.2.0\n* Adding PyPy release 7.3.7 (Python 3.7 and 3.8). (#2132)\n* Append Homebrew custom prefix to search path (#1957)\n* Add documentation for init command (#2125)\n* Add setup instructions for the case when one installs Pyenv as part of a batch job (#2127)\n* Add documentation for completions command (#2126)\n* Default --with-universal-archs to universal2 on Apple Silicon (#2122)\n* Update README.md (#2120)\n* Add GraalPython 21.3.0 (#2117)\n* Pypy ver 7.3.6 - python 3.7 and python 3.8 (#2111)\n* Discover Tcl/Tk reliably and use active version (#2106)\n* Fish installation instructions (#2104)\n* Add CPython 3.11.0a1 (#2099)\n\n## Release 2.1.0\n* Fix mambaforge-pypy3 build (#2096)\n* Add Python 3.10.0 (#2093)\n* Add documentation for exec command (#2090)\n* Add documentation for shims command (#2091)\n* Add documentation for hooks command (#2089)\n* Add documentation for root command (#2088)\n* Add documentation for prefix command (#2087)\n* Update to Pyston's v2 package of the 2.3.1 release (#2078)\n* Add pyston-2.3.1 support (#2075)\n* Don't update conda when installing pip (#2074)\n* Improve `add_miniconda.py` (#2072)\n* GitHub actions tests (#2073)\n* Fix sed commands (#2071)\n* macOS: fix the build of Python 2.7.18 on macOS 11.5.2 (Big Sur) + Apple Silicon (#2061)\n\n## Release 2.0.7\n* Update setup instructions in the Readme (#2067)\n* Allow tcl-tk as argument or try with homebrew by default (#1646)\n* Allow system Python in sbin (#2065)\n* Prevent addition of duplicate plugin dirs to PATH (#2045)\n* Disable coreutils on M1 Apple Silicon with arm64 (#2020)\n* Add Python 3.10.0rc2 (#2053)\n* Add space after `yes/no` prompt (#2040)\n* Add CPython v3.6.15 and v3.7.12 (#2052)\n* Add missing Python 2.6.x definitions and patches (#2051)\n* Fix build of ossaudiodev in Linux/FreeBSD for Python 2.6 (#2049)\n* Fix build of ossaudiodev in Linux/FreeBSD for Python 3.1 (#2047)\n\n## Release 2.0.6\n* Add CPython 3.9.7 (#2044)\n* Add CPython v3.8.12 (#2043)\n* Adapt conda.bash for bash associative array (#2037)\n\n## Release 2.0.5\n\n* Move man page to location where it can be automatically found by man (#2032)\n* Update checksums for CPython 3.10.0rc1 (#2025)\n* Remove 3.9.3 (#2022)\n* Add CPython 3.10.0rc1(#2023)\n\n## Release 2.0.4\n\n- Added scripts for rolling releases of Miniforge (#2019)\n- Update pyston-2.3 (#2017)\n- Add GraalPython 21.2.0 (#2018)\n- Add CPython  3.10.0b4 (#2013), (#2005)\n- Add Pyston 2.3 (#2012)\n\n## Release 2.0.3\n\n* Remove PATH warning (#2001)\n* Add Python 3.6.14, 3.7.11, 3.8.11, and 3.9.6 (#1996)\n* Miniforge minor update to 4.10.1-5 (#1992)\n* Suggest that fish users init in interactive mode (#1991)\n\n## Release 2.0.2\n\n* Miniforge minor update to 4.10.1-5 (#1992)\n* Suggest that fish users init in interactive mode (#1991)\n* Add 3.10.0b3 (#1988)\n* Revert \"Drop inferring version to install from `pyenv local`\" (#1984)\n* Use system Python3 for tests (#1979)\n* Check for shims in path with pure Bash (#1978)\n* Update setup instructions for debian, ubuntu etc. (#1977)\n\n## Release 2.0.1\n\n* Drop inferring version to install from `pyenv local` (#1907)\n* Create mambaforge-4.10.1-4 (#1971)\n* Add 3.10.0b2 recipe (#1966)\n* Fix .bashrc `echo` install syntax error (#1965)\n* Add explicit Zsh instructions for MacOS (#1964)\n* Install pip with pyston (#1955)\n* Mention log file if an error happened before building, too (#1537)\n* Add pypy3.7-7.3.5 (#1950)\n\n## Release 2.0.0\n\n* Support for CPython 3.9.5 has been added.\n* Support for CPython 3.8.10 has been added.\n* Support for CPython 3.10.0b1 has been added.\n* Support for GraalPython 21.1.0 has been added.\n* Support for  Anaconda 2021.05 has been added.\n* Support for   Miniforge3 4.10.1-1 has been added.\n* CPython 3.10-dev target branch renamed.\n* CPython 3.10-dev and 3.11-dev updated.\n* Bump OpenSSL to 1.1.1x for all Pythons that support MacOS 11\n* Update generated configuration files before run ./configure\n* Full shell configuration instructions placed into `pyenv init`\n* Prevent build from installing MacOS apps globally\n* ldflags_dirs is not needed for Python and causes failures\n* Report cache filename at download\n* Add micropython 1.15\n* Correct URLs for Stackless builds and add Stackless 2.7.16\n\n## Breaking changes\n* Split startup logic into PATH and everything else (https://github.com/pyenv/pyenv/issues/1649#issuecomment-694388530)\n\n## 1.2.27\n\n* Add GraalPython 21.1.0 (#1882)\n* Add CPython 3.10.0a7 (#1880)\n* Docs(README): fix info about version-file separator (#1874)\n* List versions starting with a dot (#1350)\n* Feat: support (skip) commented lines in version-file (#1866)\n* pypy3.7-7.3.4 (#1873)\n* Create miniforge3-4.10 (#1868)\n* Add CPython 3.9.4 (#1865)\n\n## 1.2.26\n\n* Add CPython 3.9.4 (#1865)\n\n## 1.2.25\n\n* bpo-43631: update to openssl 1.1.1k (#1861)\n* Add CPython 3.9.3 and 3.8.9 (#1859)\n* Add micropython 1.14 (#1858)\n* Shell detect improvements (#1835)\n* Test(init): remove misleading detect from parent shell case arg (#1856)\n* Add GraalPython 21.0.0 (#1855)\n\n## 1.2.24\n\n* GitHub Actions: Add $PYENV_ROOT/shims to $PATH (#1838)\n* Add Python 3.10.0a6 (#1839)\n* Remove the \"Using script's directory as PYENV_DIR if shim is invoked with a script argument\" feature (#1814)\n* Update GET_PIP_URL (#1844)\n* GitHub Action to build Python versions on Ubuntu (#1794)\n* Make work in nounset (-u) mode (#1786)\n* Update miniforge3-4.9.2 (#1834)\n* Added aarch64 for Linux in anaconda_architecture() (#1833)\n* Hook script to add latest suffix for install command (#1831)\n* Fix error link (#1832)\n* Clarify proxy variable names in readme (#1830)\n* Travis CI: Add Xcode 12 on macOS 10.15.5 (#1708)\n* Added --nosystem argument (#1829)\n* Add CPython 3.8.8 (#1825)\n* Add CPython 3.9.2 (#1826)\n* Add manpage (#1790)\n\n## 1.2.23\n\n+ python-build: Add CPython v3.7.10 (#1818)\n+ python-build: Add CPython v3.6.13 (#1817)\n* python-build: Add PyPy 3.7-c-jit-latest (#1812)\n* python-build: Add PyPy 3.7 (#1718, #1726, #1780)\n* python-build: Add miniconda3 4.9.2 (#1763)\n* python-build: Add miniconda3 4.8.3 (#1763)\n* python-build: Add miniconda3 4.8.2 (#1763)\n* python-build: Add Miniforge3-4.9.2 (#1782)\n* python-build: Fix download links for some PyPy and Stackless versions (#1692)\n* python-build: Add PYENV_DEBUG option (#1806)\n* python-build: Fix get-pip which dropped support for legacy Python (#1793)\n* pyenv-help: Fix `sed: RE error: illegal byte sequence` (#1714)\n* pyenv-versions: Fix not printing asterisk for current version in Bash 3 (#1815)\n* pyenv-prefix: \"system\" python - support cases where python3 is in PATH but not python (#1655)\n* pyenv-which: Added fallback to system executable (#1797)\n* pyenv-rehash: Use associative arrays for better performance on bash >= 4 (#1749)\n* pyenv-rehash: Try to sleep in 0.1 sec steps when acquiring lock (#1798)\n* pyenv: Use a better PS4 as recommended by Bash Hackers Wiki (#1810)\n\n## 1.2.22\n\n+ python-build: Add LDFLAGS for zlib on macOS >= 1100 (#1711)\n+ python-build: Add the CPython 3.9.1 (#1752)\n+ python-build: Change order of LDFLAGS paths (#1754)\n+ python-build: Docker config for testing python-build (#1548)\n+ python-build: Put prerequisite for installation before install (#1750)\n+ python-build: Add GraalPython 20.3 (#1736)\n+ python-build: Add CPython 3.8.7\n+ python-build: Added anaconda3-2020.11 (#1774)\n+ python-build: Added arm64 architecture support in python-build for macOS  (#1775)\n\n## 1.2.21\n\n* python-build: Add CPython 3.9.0 (#1706)\n* python-build: Add CPython 3.8.6 (#1698)\n* python-build: Add CPython 3.7.9 (#1680)\n* python-build: Add CPython 3.6.12 (#1680)\n* python-build: Add CPython 3.5.10 (#1690)\n* python-build: Add Jython 2.7.2 (#1672)\n* python-build: Add Graalpython 20.1.0 (#1594)\n* python-build: Add Graalpython 20.2.0 (#1594)\n* python-build: Add Anaconda3-2020.07 (#1684)\n* python-build: Add micropython-1.13 (#1704)\n* python-build: Fix PyPy download links (#1682)\n* python-build: Support for `PYTHON_BUILD_MIRROR_URL` when checksums do not exist (#1673)\n* pyenv: Search for plugins in `PYENV_DIR` and `PYENV_ROOT` (#1697)\n* pyenv-help: Fix 'sed: RE error: illegal byte sequence' (#1670)\n\n## 1.2.20\n\n* python-build: Add CPython 3.8.5 (#1667)\n* python-build: Add CPython 3.8.4 (#1658)\n* python-build: Add CPython 3.7.8\n* python-build: Add CPython 3.6.11\n* pyenv-install: Make grep detection more robust (#1663)\n* python-build: Fix has_tar_xz_support function on FreeBSD. (#1652)\n\n## 1.2.19\n\n* python-build: Add CPython 3.8.3 (#1612)\n* python-build: Add CPython 2.7.18 (#1593)\n* python-build: Add CPython 3.10-dev (#1619)\n* python-build: Add anaconda3-2020.02 (#1584)\n* python-build: Add stackless 3.7.5 (#1589)\n\n## 1.2.18\n\n* python-build: Update download URLs for old OpenSSL releases (#1578)\n* python-build: Prevent `brew: command not found` messages that are not errors (#1544)\n\n## 1.2.17\n\n* python-build: Add CPython 3.8.2\n* python-build: Add CPython 3.7.7 (#1553)\n* python-build: Add Miniconda versions newer than 4.3.30 (#1361)\n* python-build: Add Micropython 1.12 (#1542)\n* python-build: Add Add CPython 3.9.0a4\n* pyenv: Fix sed illegal byte sequence error (#1521)\n\n## 1.2.16\n\n* python-build: Add CPython 3.8.1 (#1497)\n* python-build: Add CPython 3.7.6 (#1498)\n* python-build: Add CPython 3.6.10 (#1499)\n* python-build: Add CPython 3.5.9 (#1448)\n* python-build: Add PyPy 7.3.0 (1502)\n\n## 1.2.15\n\n* python-build: Add CPython 3.7.5 (#1423)\n* python-build: Add CPython 2.7.17 (#1433)\n* python-build: Add CPython 3.5.8 (#1441)\n* python-build: Add PyPy 7.2.0 (#1418)\n* python-build: Add anaconda3-2019.10 (#1427)\n* pyenv-help: Show text for all pyenv commands in pyenv-help (#1421)\n\n## 1.2.14\n\n* python-build: Add CPython 3.8.0 (#1416)\n* python-build: Add Anaconda-2019.07 (#1382)\n* python-build: Add Micropython 1.11 (#1395)\n* python-build: Fix compatibility issues with Homebrew installed Tcl/Tk (#1397)\n* pyenv-exec: Do not use `exec -a`, do not mangle PATH for system Python (#1169)\n\n## 1.2.13\n\n* python-build: Add CPython 3.7.4\n* python-build: Add CPython 3.6.9\n\n## 1.2.12\n\n* python-build: Find zlib from Xcode or brew on Mojave (#1353)\n* python-build: Add PyPy 7.1.1 (#1335)\n* python-build: Add CPython 3.8.0b1\n\n## 1.2.11\n\n* python-build: Fix `posix_close` name collision in 2.4 builds (#1321)\n* python-build: Add CPython 3.4.10 (#1322)\n* python-build: Add Anaconda 2019.03\n* python-build: Allow overriding the preference of OpenSSL version per definition basis (#1302, #1325, #1326)\n* python-build: Imported changes from rbenv/ruby-build 20190401 (#1327)\n* python-build: Use GNU Readline 8.0 on macOS if brew's package isn't available (#1329)\n\n## 1.2.10\n\n* python-build: Force y, Y, yes or YES to confirm installation (#1217)\n* python-build: Add PyPy 7.0.0, 7.1.0\n* python-build: Add CPython 2.7.16, 3.5.7 and 3.7.3\n* python-build: Install `python-gdb.py` (#1190, #1289)\n* python-build: Add micropython 1.10\n* python-build: Prefer Homebrew's OpenSSL 1.1 over 1.0 (#839, #1302)\n\n## 1.2.9\n\n* python-build: Add CPython 3.7.2 and CPython 3.6.8 (#1256)\n* python-build: Add anaconda[23]-5.3.1 (#1246)\n* python-build: Add Anaconda 2018.12 (#1259)\n* python-build: Fix ironpython-dev git repo url (#1260)\n* python-build: Add `OPENSSL_NO_SSL3` patch for CPython 3.3.7 (#1263)\n\n## 1.2.8\n\n* python-build: Add CPython 3.7.1\n* python-build: Add CPython 3.6.7\n* python-build: Add anaconda[23]-5.3.0 (#1220)\n\n## 1.2.7\n\n* python-build: Add CPython 3.5.6 (#1199)\n* python-build: Add CPython 3.4.9\n\n## 1.2.6\n\n* python-build: Added CPython 3.6.6 (#1178)\n* python-build: Check wget version iff wget is going to be used (#1180)\n\n## 1.2.5\n\n* python-build: Add CPython 3.7.0 (#1177)\n* python-build: Add micropython 1.9.4 (#1160)\n* python-build: Add anaconda[23]-5.2.0 (#1165)\n* pyenv: Fix `seq(1)` is not available on OpenBSD (#1166)\n\n## 1.2.4\n\n* python-build: Add CPython 2.7.15\n* python-build: Add PyPy 6.0.0\n* python-build: Allow overriding HTTP client type based on environment variable `PYTHON_BUILD_HTTP_CLIENT` (#1126)\n* python-build: Use version-specific `get-pip.py` when installing 2.6 and 3.2 (#1131)\n* pyenv: Merge rbenv master (#1151)\n* pyenv: Make `pyenv-rehash` safer for multiple processes (#1092)\n\n## 1.2.3\n\n* python-build: Add CPython 3.6.5\n* python-build: Set openssl PKG_CONFIG_PATH for python 3.7 (#1117)\n* python-build: Add ActivePython versions 2.7.14, 3.5.4, 3.6.0 (#1113)\n* python-build: Unset `PIP_VERSION` before invoking `get-pip.py` as a workaround for `invalid truth value` error (#1124)\n\n## 1.2.2\n\n* python-build: Add PyPy3 5.10.1 (#1084)\n* python-build: Add CPython 3.5.5 (#1090)\n* python-build: Add Anaconda[23]-5.1.0 (#1100)\n* python-build: Fix checksum issue for CPython 3.4.8 (#1094)\n* python-build: Prevent Anaconda from installing a `clear` shim (#1084)\n## 1.2.1\n\n* python-build: Add CPython 3.6.4\n* python-build: Add PyPy[23] 5.10\n\n## 1.2.0\n\n* python-build: Import changes from ruby-build v20171031 (#1026)\n* python-build: Ignore LibreSSL bundled with macOS 10.13 (#1025)\n* python-build: Skip passing `--enable-unicode` to CPython 3.3+ (#912)\n* python-build: Add CPython 3.3.7 (#1053)\n* python-build: Add micropython 1.9.3\n* python-build: Add PyPy 5.9.0\n* python-build: Add Miniconda[23] 4.3.14, 4.3.21, 4.3.27, 4.3.30\n* python-build: Add Anaconda[23] 5.0.1\n* python-build: Update Anaconda[23] 5.0.0 to 5.0.0.1 bugfix release\n\n## v1.1.5\n\n* python-build: Add CPython 3.6.3\n* python-build: Add CPython 3.7.0a1\n* python-build: Add Anaconda[23] 5.0.0\n\n## v1.1.4\n\n* pyenv: Workaround for scripts in `$PATH` which needs to be source'd (#100, #688, #953)\n* python-build: Add support for PyPy3 executables like `libpypy3-c.so` (#955, #956)\n* python-build: Add CPython 2.7.14, 3.4.7, 3.5.4 (#965, #971, #980)\n* python-build: Add Jython 2.7.1 (#973)\n\n## v1.1.3\n\n* python-build: Add CPython 3.6.2 (#951)\n\n## v1.1.2\n\n* pyenv: Fix incorrect `pyenv --version` output in v1.1.1 (#947)\n\n## v1.1.1\n\n* python-build: Update links to Portable Pypy 5.8-1 bugfix release, affects pypy2.7-5.8.0 and pypy3.5-5.8.0 definitions (#939)\n\n## v1.1.0\n\n* python-build: Add PyPy 5.7.1 (#888)\n* pyenv: Merge rbenv master (#927)\n* python-build: Add PyPy 5.8.0 (#932)\n* python-build: Anaconda[23] 4.4.0\n* python-build: Add micropython-dev\n\n## 1.0.10\n\n* python-build: Add Anaconda2/Anaconda3 4.3.1 (#876)\n* python-build: Make miniconda-latest point to miniconda2-latest (#881)\n* python-build: Fix typo in MacOS packages for anaconda2-4.3.0/4.2.0 (#880)\n\n## 1.0.9\n\n* pyenv: Migrate project site from https://github.com/yyuu/pyenv to https://github.com/pyenv/pyenv\n* python-build: Add PyPy2 5.7.0 (#872, #868)\n* python-build: Add PyPy3 5.7.0-beta (#871, #869)\n* python-build: Add CPython 3.6.1 (#873)\n* python-build: Add Pyston 0.6.1 (#859)\n* python-build: Change default mirror site URL from https://yyuu.github.io/pythons to https://pyenv.github.io/pythons\n* python-build: Upgrade OpenSSL from 1.0.2g to 1.0.2k (#850)\n\n## 1.0.8\n\n* pyenv: Fix fish subcommand completion (#831)\n* python-build: Add Anaconda2/Anaconda3 4.3.0  (#824)\n* python-build: Use CPython on GitHub as the source repository of CPython development versions (#836, #837)\n* python-build: Fix checksum verification issue on the platform where OpenSSL isn't available (#840)\n\n## 1.0.7\n\n* python-build: Add CPython 3.5.3 (#811)\n* python-build: Add CPython 3.4.6 (#812)\n* python-build: Fix tar.gz checksum of CPython 3.6.0 (#793)\n* python-build: Jython installer workaround (#800)\n* python-build: Disable optimization (`-O0`) when `--debug` was specified (#808)\n\n## 1.0.6\n\n* python-build: Add CPython 3.6.0 (#787)\n\n## 1.0.5\n\n* python-build: Add CPython 2.7.13 (#782)\n* python-build: Add CPython 3.6.0rc2 (#781)\n* python-build: Add Anaconda 4.2.0 (#774)\n* python-build: Add Anaconda3 4.2.0 (#765)\n* python-build: Add IronPython 2.7.7 (#755)\n\n## 1.0.4\n\n* python-build: Add PyPy 5.6.0 (#751)\n* python-build: Add PyPy3 3.5 nightlies (`pypy3.5-c-jit-latest` #737)\n* python-build: Add Stackless 2.7.12 (#753)\n* python-build: Add Stackless 2.7.11\n* python-build: Add Stackless 2.7.10\n* python-build: Add Pyston 0.6.0\n* python-build: Add CPython 3.6.0b4 (#762)\n\n## 1.0.3\n\n* python-build: Add CPython 3.6.0b3 (#731, #744)\n* python-build: Add PyPy3.3 5.5-alpha (#734, #736)\n* python-build: Stop specifying `--enable-unicode=ucs4` on OS X (#257, #726)\n* python-build: Fix 3.6-dev and add 3.7-dev (#729, #730)\n* python-build: Add a patch for https://bugs.python.org/issue26664 (#725)\n* python-build: Add Pyston 0.5.1 (#718)\n* python-build: Add Stackless 3.4.2 (#720)\n* python-build: Add IronPython 2.7.6.3 (#716)\n* python-build: Add Stackless 2.7.9 (#714)\n\n## 1.0.2\n\n* python-build: Add CPython 3.6.0b1 (#699)\n* python-build: Add anaconda[23] 4.1.1 (#701, #702)\n* python-build: Add miniconda[23] 4.1.11 (#703, #704, #706)\n* python-build: Remove `bin.orig` if exists to fix an issue with `--enable-framework` (#687, #700)\n\n## 1.0.1\n\n* python-build: Add CPython 3.6.0a4 (#673)\n* python-build: Add PyPy2 5.4, 5.4.1 (#683, #684, #695, #697)\n* python-build: Add PyPy Portable 5.4, 5.4.1 (#685, #686, #696)\n* python-build: Make all HTTP source URLs to HTTPS (#680)\n\n## 1.0.0\n\n* pyenv: Import latest changes from rbenv as of Aug 15, 2016 (#669)\n* pyenv: Add workaround for system python at `/bin/python` (#628)\n* python-build: Import changes from ruby-build v20160602 (#668)\n\n## 20160726\n\n* python-build: pypy-5.3.1: Remove stray text (#648)\n* python-build: Add CPython 3.6.0a3 (#657)\n* python-build: Add anaconda[23]-4.1.0\n* pyenv: Keep using `.tar.gz` archives if tar doesn't support `-J` (especially on BSD) (#654, #663)\n* pyenv: Fixed conflict between pyenv-virtualenv's `rehash` hooks of `envs.bash`\n* pyenv: Write help message of `sh-*` commands to stdout properly (#650, #651)\n\n## 20160629\n\n* python-build: Added CPython 2.7.12 (#645)\n* python-build: Added PyPy 3.5.1 (#646)\n* python-build: Added PyPy Portable 5.3.1\n\n## 20160628\n\n* python-build: Added PyPy3.3 5.2-alpha1 (#631)\n* python-build: Added CPython 2.7.12rc1\n* python-build: Added CPython 3.6.0a2 (#630)\n* python-build: Added CPython 3.5.2 (#643)\n* python-build: Added CPython 3.4.5 (#643)\n* python-build: Added PyPy2 5.3 (#626)\n* pyenv: Skip creating shims for system executables bundled with Anaconda rather than ignoring them in `pyenv-which` (#594, #595, #599)\n* python-build: Configured GCC as a requirement to build CPython prior to 2.4.4 (#613)\n* python-build: Use `aria2c` - ultra fast download utility if available (#534)\n\n## 20160509\n\n* python-build: Fixed wrong SHA256 of `pypy-5.1-linux_x86_64-portable.tar.bz2` (#586, #587)\n* python-build: Added miniconda[23]-4.0.5\n* python-build: Added PyPy (Portable) 5.1.1 (#591, #592, #593)\n\n## 20160422\n\n* python-build: Added PyPy 5.1 (#579)\n* python-build: Added PyPy 5.1 Portable\n* python-build: Added PyPy 5.0.1 (#558)\n* python-build: Added PyPy 5.0.1 Portable\n* python-build: Added PyPy 5.0 Portable\n* python-build: Added anaconda[23]-4.0.0 (#572)\n* python-build: Added Jython 2.7.1b3 (#557)\n\n## 20160310\n\n* python-build: Add PyPy-5.0.0 (#555)\n* pyenv: Import recent changes from rbenv 1.0 (#549)\n\n## 20160303\n\n* python-build: Add anaconda[23]-2.5.0 (#543)\n* python-build: Import recent changes from ruby-build 20160130\n* python-build: Compile with `--enable-unicode=ucs4` by default for CPython (#257, #542)\n* python-build: Switch download URL of Continuum products from HTTP to HTTPS (#543)\n* python-build: Added pypy-dev special case in pyenv-install to use py27 (#547)\n* python-build: Upgrade OpenSSL to 1.0.2g (#550)\n\n## 20160202\n\n* pyenv: Run rehash automatically after `conda install`\n* python-build: Add CPython 3.4.4 (#511)\n* python-build: Add anaconda[23]-2.4.1, miniconda[23]-3.19.0\n* python-build: Fix broken build definitions of CPython/Stackless 3.2.x (#531)\n\n### 20151222\n\n* pyenv: Merge recent changes from rbenv as of 2015-12-14 (#504)\n* python-build: Add a `OPENSSL_NO_SSL3` patch for CPython 2.6, 2.7, 3.0, 3.1, 3.2 and 3.3 series (#507, #511)\n* python-build: Stopped using mirror at pyenv.github.io for CPython since http://www.python.org is on fast.ly\n\n### 20151210\n\n* pyenv: Add a default hook for Anaconda to look for original `$PATH` (#491)\n* pyenv: Skip virtualenv aliases on `pyenv versions --skip-aliases` (pyenv/pyenv-virtualenv#126)\n* python-build: Add CPython 2.7.11, 3.5.1 (#494, #498)\n* python-build: Update OpenSSL to 1.0.1q (#496)\n* python-build: Adding SSL patch to build 2.7.3 on Debian (#495)\n\n### 20151124\n\n* pyenv: Import recent changes from rbenv 5fb9c84e14c8123b2591d22e248f045c7f8d8a2c\n* pyenv: List anaconda-style virtual environments as a version in pyenv (#471)\n* python-build: Import recent changes from ruby-build v20151028\n* python-build: Add PyPy 4.0.1 (#489)\n* python-build: Add `miniconda*-3.18.3` (#477)\n* python-build: Add CPython 2.7.11 RC1\n\n### 20151105\n\n* python-build: Add anaconda2-2.4.0 and anacondaa3-2.4.0\n* python-build: Add Portable PyPy 4.0 (#472)\n\n### 20151103\n\n* python-build: Add PyPy 4.0.0 (#463)\n* python-build: Add Jython 2.7.1b2\n* python-build: Add warning about setuptools issues on CPython 3.0.1 on OS X (#456)\n\n### 20151006\n\n* pyenv: Different behaviour when invoking .py script through symlink (#379, #404)\n* pyenv: Enabled Gitter on the project (#436, #444)\n* python-build: Add Jython 2.7.1b1\n* python-build: Install OpenSSL on OS X if no proper version is available (#429)\n\n### 20150913\n\n* python-build: Add CPython 3.5.0\n* python-build: Remove CPython 3.5.0 release candidates\n* python-build: Fixed anaconda3 repo's paths (#439)\n* python-build: Add miniconda-3.16.0 and miniconda3-3.16.0 (#435)\n\n### 20150901\n\n* python-build: Add CPython 3.5.0 release candidates; 3.5.0rc1 and 3.5.0rc2\n* python-build: Disabled `_FORTITY_SOURCE` to fix CPython >= 2.4, <= 2.4.3 builds (#422)\n* python-build: Removed CPython 3.5.0 betas\n* python-build: Add miniconda-3.10.1 and miniconda3-3.10.1 (#414)\n* python-build: Add PyPy 2.6.1 (#433)\n* python-build: Add PyPy-STM 2.3 and 2.5.1 (#428)\n* python-build: Ignore user's site-packages on ensurepip/get-pip (#411)\n* pyenv: Import recent changes from ruby-build v20150818\n\n#### 20150719\n\n* python-build: Add CPython `3.6-dev` (#413)\n* python-build: Add Anaconda/Anaconda3 2.3.0\n* python-build: Fix download URL of portable PyPy 2.6 (fixes #389)\n* python-build: Use custom `MACOSX_DEPLOYMENT_TARGET` if defined (#312)\n* python-build: Use original CPython repository instead of mirror at bitbucket.org as the source of `*-dev` versions (#409)\n* python-build: Pin pip version to 1.5.6 for python 3.1.5 (#351)\n\n#### 20150601\n\n* python-build: Add PyPy 2.6.0\n* python-build: Add PyPy 2.5.1 portable\n* python-build: Add CPython 3.5.0 beta releases; 3.5.0b1 and 3.5.0b2\n* python-build: Removed CPython 3.5.0 alpha releases\n* python-build: Fix inverted condition for `--altinstall` of ensurepip (#255)\n* python-build: Skip installing `setuptools` by `ez_setup.py` explicitly (fixes #381)\n* python-build: Import changes from ruby-build v20150519\n\n#### 20150524\n\n* pyenv: Improve `pyenv version`, if there is one missing (#290)\n* pyenv: Improve pip-rehash to handle versions in command, like `pip2` and `pip3.4` (#368)\n* python-build: Add CPython release; 2.7.10 (#380)\n* python-build: Add Miniconda/Miniconda3 3.9.1 and Anaconda/Anaconda3 2.2.0 (#375, #376)\n\n#### 20150504\n\n* python-build: Add Jython 2.7.0\n* python-build: Add CPython alpha release; 3.5.0a4\n* python-build: Add CPython 3.1, 3.1.1, and 3.1.2\n* python-build: Fix pip version to 1.5.6 for CPython 3.1.x (#351)\n\n#### 20150326\n\n* python-build: Add Portable PyPy binaries from https://github.com/squeaky-pl/portable-pypy (#329)\n* python-build: Add CPython alpha release; 3.5.0a2 (#328)\n* python-build: Add pypy-2.5.1 (fixes #338)\n* pyenv: Import recent changes from rbenv 4d72eefffc548081f6eee2e54d3b9116b9f9ee8e\n\n#### 20150226\n\n* python-build: Add CPython release; 3.4.3 (#323)\n* python-build: Add CPython alpha release; 3.5.0a1 (#324)\n* python-build: Add Miniconda/Miniconda3 3.8.3 (#318)\n\n#### 20150204\n\n* python-build: Add PyPy 2.5.0 release (#311)\n* python-build: Add note about `--enable-shared` and RPATH (#217)\n* python-build: Fix regression of `PYTHON_MAKE_INSTALL_TARGET` and add test (#255)\n* python-build: Symlink `pythonX.Y-config` to `python-config` if `python-config` is missing (#296)\n* python-build: Latest `pip` can't be installed into `3.0.1` (#309)\n\n#### 20150124\n\n* python-build: Import recent changes from ruby-build v20150112\n* python-build: Prevent adding `/Library/Python/X.X/site-packages` to `sys.path` when `--enable-framework` is enabled on OS X. Thanks @s1341 (#292)\n* python-build: Add new IronPython release; 2.7.5\n\n#### 20141211\n\n* pyenv: Add built-in `pip-rehash` feature. You don't need to install [pyenv-pip-rehash](https://github.com/pyenv/pyenv-pip-rehash) anymore.\n* python-build: Add new CPython release; 2.7.9 (#284)\n* python-build: Add new PyPy releases; pypy3-2.4.0, pypy3-2.4.0-src (#277)\n* python-build: Add build definitions of PyPy nightly build\n\n#### 20141127\n\n* python-build: Add new CPython release candidates; 2.7.9rc1 (#276)\n\n#### 20141118\n\n* python-build: Fix broken `setup_builtin_patches` (#270)\n* python-build: Add a patch to allow building 2.6.9 on OS X 10.9 with `--enable-framework` (#269, #271)\n\n#### 20141106\n\n* pyenv: Optimize pyenv-which. Thanks to @blueyed (#129)\n* python-build: Add Miniconda/Miniconda3 3.7.0 and Anaconda/Anaconda3 2.1.0 (#260)\n* python-build: Use HTTPS for mirror download URLs (#262)\n* python-build: Set `rpath` for `--shared` build of PyPy (#244)\n* python-build: Support `make altinstall` when building CPython/Stackless (#255)\n* python-build: Import recent changes from ruby-build v20141028 (#265)\n\n#### 20141012\n\n* python-build: Add new CPython releases; 3.2.6, 3.3.6 (#253)\n\n#### 20141011\n\n* python-build: Fix build error of Stackless 3.3.5 on OS X (#250)\n* python-build: Add new Stackless releases; stackless-2.7.7, stackless-2.7.8, stackless-3.4.1 (#252)\n\n#### 20141008\n\n* python-build: Add new CPython release; 3.4.2 (#251)\n* python-build: Add new CPython release candidates; 3.2.6rc1, 3.3.6rc1 (#248)\n\n#### 20140924\n\n* pyenv: Fix an unintended behavior when user does not have write permission on `$PYENV_ROOT` (#230)\n* pyenv: Fix a zsh completion issue (#232)\n* python-build: Add new PyPy release; pypy-2.4.0, pypy-2.4.0-src (#241)\n\n#### 20140825\n\n* pyenv: Fix zsh completion with multiple words (#215)\n* python-build: Display the package name of `hg` as `mercurial` in message (#212)\n* python-build: Unset `PIP_REQUIRE_VENV` during build (#216)\n* python-build: Set `MACOSX_DEPLOYMENT_TARGET` from the product version of OS X (#219, #220)\n* python-build: Add new Jython release; jython2.7-beta3 (#223)\n\n#### 20140705\n\n* python-build: Add new CPython release; 2.7.8 (#201)\n* python-build: Support `SETUPTOOLS_VERSION` and `PIP_VERSION` to allow installing specific version of setuptools/pip (#202)\n\n#### 20140628\n\n* python-build: Add new Anaconda releases; anaconda-2.0.1, anaconda3-2.0.1 (#195)\n* python-build: Add new PyPy3 release; pypy3-2.3.1 (#198)\n* python-build: Add ancient CPython releases; 2.1.3, 2.2.3, 2.3.7 (#199)\n* python-build: Use `ez_setup.py` and `get-pip.py` instead of installing them from tarballs (#194)\n* python-build: Add support for command-line options to `ez_setup.py` and `get-pip.py` (#200)\n\n#### 20140615\n\n* python-build: Update default setuptools version (4.0.1 -> 5.0) (#190)\n\n#### 20140614\n\n* pyenv: Change versioning schema (`v0.4.0-YYYYMMDD` -> `vYYYYMMDD`)\n* python-build: Add new PyPy release; pypy-2.3.1, pypy-2.3.1-src\n* python-build: Create symlinks for executables with version suffix (#182)\n* python-build: Use SHA2 as default digest algorithm to verify downloaded archives\n* python-build: Update default setuptools version (4.0 -> 4.0.1) (#183)\n* python-build: Import recent changes from ruby-build v20140524 (#184)\n\n#### 0.4.0-20140602\n\n* python-build: Add new Anaconda/Anaconda3 releases; anaconda-2.0.0, anaconda3-2.0.0 (#179)\n* python-build: Add new CPython release; 2.7.7 (#180)\n* python-build: Update default setuptools version (3.6 -> 4.0) (#181)\n* python-build: Respect environment variables of `CPPFLAGS` and `LDFLAGS` (#168)\n* python-build: Support for xz-compressed Python tarballs (#177)\n\n#### 0.4.0-20140520\n\n* python-build: Add new CPython release; 3.4.1 (#170, #171)\n* python-build: Update default pip version (1.5.5 -> 1.5.6) (#169)\n\n#### 0.4.0-20140516\n\n* pyenv: Prefer gawk over awk if both are available.\n* python-build: Add new PyPy release; pypy-2.3, pypy-2.3-src (#162)\n* python-build: Add new Anaconda release; anaconda-1.9.2 (#155)\n* python-build: Add new Miniconda releases; miniconda-3.3.0, minoconda-3.4.2, miniconda3-3.3.0, miniconda3-3.4.2\n* python-build: Add new Stackless releases; stackless-2.7.3, stackless-2.7.4, stackless-2.7.5, stackless-2.7.6, stackless-3.2.5, stackless-3.3.5 (#164)\n* python-build: Add IronPython versions (setuptools and pip will work); ironpython-2.7.4, ironpython-dev\n* python-build: Add new Jython beta release; jython-2.7-beta2\n* python-build: Update default setuptools version (3.4.1 -> 3.6)\n* python-build: Update default pip version (1.5.4 -> 1.5.5)\n* python-build: Update GNU Readline (6.2 -> 6.3)\n* python-build: Import recent changes from ruby-build v20140420\n\n#### 0.4.0-20140404\n\n* pyenv: Reads only the first word from version file. This is as same behavior as rbenv.\n* python-build: Fix build of Tkinter with Tcl/Tk 8.6 (#131)\n* python-build: Fix build problem with Readline 6.3 (#126, #131, #149, #152)\n* python-build: Do not exit with errors even if some of modules are absent (#131)\n* python-build: MacOSX was misspelled as MaxOSX in `anaconda_architecture` (#136)\n* python-build: Use default `cc` as the C Compiler to build CPython (#148, #150)\n* python-build: Display value from `pypy_architecture` and `anaconda_architecture` on errors (pyenv/pyenv-virtualenv#18)\n* python-build: Remove old development version; 2.6-dev\n* python-build: Update default setuptools version (3.3 -> 3.4.1)\n\n#### 0.4.0-20140317\n\n* python-build: Add new CPython releases; 3.4.0 (#133)\n* python-build: Add new Anaconda releases; anaconda-1.9.0, anaconda-1.9.1\n* python-build: Add new Miniconda releases; miniconda-3.0.4, miniconda-3.0.5, miniconda3-3.0.4, miniconda3-3.0.5\n* python-build: Update default setuptools version (3.1 -> 3.3)\n\n#### 0.4.0-20140311\n\n* python-build: Add new CPython releases; 3.3.5 (#127)\n* python-build: Add new CPython release candidates; 3.4.0rc1, 3.4.0rc2, 3.4.0rc3\n* python-build: Update default setuptools version (2.2 -> 3.1)\n* python-build: Update default pip version (1.5.2 -> 1.5.4)\n* python-build: Import recent changes from ruby-build v20140225\n\n#### 0.4.0-20140211\n\n* python-build: Add new CPython release candidates; 3.3.4, 3.4.0b3\n* python-build: Add [Anaconda](https://store.continuum.io/cshop/anaconda/) and [Miniconda](http://repo.continuum.io/miniconda/) binary distributions\n* python-build: Display error if the wget does not support Server Name Indication (SNI) to avoid SSL verification error when downloading from https://pypi.python.org. (#60)\n* python-build: Update default setuptools version (2.1 -> 2.2)\n* python-build: Update default pip version (1.5.1 -> 1.5.2)\n* python-build: Import recent changes from ruby-build v20140204\n\n#### 0.4.0-20140123\n\n* pyenv: Always append the directory at the top of the `$PATH` to return proper value for `sys.executable` (#98)\n* pyenv: Unset `GREP_OPTIONS` to avoid issues of conflicting options (#101)\n* python-build: Install `pip` with using `ensurepip` if available\n* python-build: Add support for framework installation (`--enable-framework`) of CPython (#55, #99)\n* python-build: Import recent changes from ruby-build v20140110.1\n* python-build: Import `bats` tests from ruby-build v20140110.1\n\n#### 0.4.0-20140110.1\n\n* python-build: Fix build error of CPython 2.x on the platform where the `gcc` is llvm-gcc.\n\n#### 0.4.0-20140110\n\n* pyenv: Reliably detect parent shell in `pyenv init` (#93)\n* pyenv: Import recent changes from rbenv 0.4.0\n* pyenv: Import `bats` tests from rbenv 0.4.0\n* python-build: Add new CPython releases candidates; 3.4.0b2\n* python-build: Add ruby-build style patching feature (#91)\n* python-build: Set `RPATH` if `--enable-shared` was given (#65, #66, 82)\n* python-build: Update default setuptools version (2.0 -> 2.1)\n* python-build: Update default pip version (1.4.1 -> 1.5)\n* python-build: Activate friendly CPython during build if the one is not activated (8fa6b4a1847851919ad7857c6c42ed809a4d277b)\n* python-build: Fix broken install.sh\n* python-build: Import recent changes from ruby-build v20131225.1\n* version-ext-compat: Removed from default plugin. Please use [pyenv-version-ext](https://github.com/pyenv/pyenv-version-ext) instead.\n\n#### 0.4.0-20131217\n\n* python-build: Fix broken build of CPython 3.3+ on Darwin\n* python-build: Not build GNU Readline uselessly on Darwin\n\n#### 0.4.0-20131216\n\n* python-build: Add new CPython releases; 3.3.3 (#80)\n* python-build: Add new CPython releases candidates; 3.4.0b1\n* python-build: Add new PyPy releases; pypy-2.2.1, pypy-2.2.1-src\n* python-build: Update default setuptools version (1.3.2 -> 2.0)\n* python-build: Imported recent changes from ruby-build v20131211\n* pyenv: Fix pyenv-prefix to trim \"/bin\" in `pyenv prefix system` (#88)\n\n#### 0.4.0-20131116\n\n* python-build: Add new CPython releases; 2.6.9, 2.7.6 (#76)\n* python-build: Add new CPython release candidates; 3.3.3-rc1, 3.3.3-rc2\n* python-build: Add new PyPy releases; pypy-2.2, pypy-2.2-src (#77)\n* python-build: Update default setuptools version (1.1.6 -> 1.3.2)\n* python-build: Imported recent changes from ruby-build v20131030\n\n#### 0.4.0-20131023\n\n* pyenv: Improved [fish shell](http://fishshell.com/) support\n* python-build: Add new PyPy releases; pypy-2.1, pypy-2.1-src, pypy3-2.1-beta1, pypy3-2.1-beta1-src\n* python-build: Add ancient versions; 2.4, 2.4.1, 2.4.3, 2.4.4 and 2.4.5\n* python-build: Add alpha releases; 3.4.0a2, 3.4.0a3, 3.4.0a4\n* python-build: Update default pip version (1.4 -> 1.4.1)\n* python-build: Update default setuptools version (0.9.7 -> 1.1.6)\n\n#### 0.4.0-20130726\n\n* pyenv: Fix minor issue of variable scope in `pyenv versions`\n* python-build: Update base version to ruby-build v20130628\n* python-build: Use brew managed OpenSSL and GNU Readline if they are available\n* python-build: Fix build of CPython 3.3+ on OS X (#29)\n* python-build: Fix build of native modules of CPython 2.5 on OS X (#33)\n* python-build: Fix build of CPython 2.6+ on openSUSE (#36)\n* python-build: Add ancient versions; 2.4.2 and 2.4.6. The build might be broken. (#37)\n* python-build: Update default pip version (1.3.1 -> 1.4)\n* python-build: Update default setuptools version (0.7.2 -> 0.9.7)\n\n#### 0.4.0-20130613\n\n* pyenv: Changed versioning schema. There are two parts; the former is the base rbenv version, and the latter is the date of release.\n* python-build: Add `--debug` option to build CPython with debug symbols. (#11)\n* python-build: Add new CPython versions: 2.7.4, 2.7.5, 3.2.4, 3.2.5, 3.3.1, 3.3.2 (#12, #17)\n* python-build: Add `svnversion` patch for old CPython versions (#14)\n* python-build: Enable mirror by default for faster download (#20)\n* python-build: Add `OPENSSL_NO_SSL2` patch for old CPython versions (#22)\n* python-build: Install GNU Readline on Darwin if the system one is broken (#23)\n* python-build: Bundle patches in `${PYTHON_BUILD_ROOT}/share/python-build/patches` and improve patching mechanism (`apply_patches`).\n* python-build: Verify native extensions after building. (`build_package_verify_py*`)\n* python-build: Add `install_hg` to install package from Mercurial repository\n* python-build: Support building Jython and PyPy.\n* python-build: Add new CPython development versions: 2.6-dev, 2.7-dev, 3.1-dev, 3.2-dev, 3.3-dev, 3.4-dev\n* python-build: Add new Jython development versions: jython-2.5.4-rc1, jython-2.5-dev, jython-2.7-beta1, jython-dev\n* python-build: Add new PyPy versions: pypy-1.5{,-src}, pypy-1.6, pypy-1.7, pypy-2.0{,-src}, pypy-2.0.1{,-src}, pypy-2.0.2{,-src}\n* python-build: Add new PyPy development versions: pypy-1.7-dev, pypy-1.8-dev, pypy-1.9-dev, pypy-2.0-dev, pypy-dev, pypy-py3k-dev\n* python-build: Add new Stackless development versions: stackless-2.7-dev, stackless-3.2-dev, stackless-3.3-dev, stackless-dev\n* python-build: Update default pip version (1.2.1 -> 1.3.1)\n* python-build: Update default setuptools version (0.6.34 (distribute) -> 0.7.2 ([new setuptools](https://bitbucket.org/pypa/setuptools)))\n\n#### 0.2.0 (February 18, 2013)\n\n* Import changes from rbenv 0.4.0.\n\n#### 0.1.2 (October 23, 2012)\n\n* Add push/pop for version stack management.\n* Support multiple versions via environment variable.\n* Now GCC is not a requirement to build CPython and Stackless.\n\n#### 0.1.1 (September 3, 2012)\n\n* Support multiple versions of Python at a time.\n\n#### 0.1.0 (August 31, 2012)\n\n* Initial public release.\n"
        },
        {
          "name": "COMMANDS.md",
          "type": "blob",
          "size": 11.28,
          "content": "# Command Reference\n\nLike `git`, the `pyenv` command delegates to subcommands based on its\nfirst argument.\n\nThe most common subcommands are:\n\n* [`pyenv help`](#pyenv-help)\n* [`pyenv commands`](#pyenv-commands)\n* [`pyenv local`](#pyenv-local)\n* [`pyenv global`](#pyenv-global)\n* [`pyenv shell`](#pyenv-shell)\n* [`pyenv install`](#pyenv-install)\n* [`pyenv uninstall`](#pyenv-uninstall)\n* [`pyenv rehash`](#pyenv-rehash)\n* [`pyenv version`](#pyenv-version)\n* [`pyenv versions`](#pyenv-versions)\n* [`pyenv which`](#pyenv-which)\n* [`pyenv whence`](#pyenv-whence)\n* [`pyenv exec`](#pyenv-exec)\n* [`pyenv root`](#pyenv-root)\n* [`pyenv prefix`](#pyenv-prefix)\n* [`pyenv latest`](#pyenv-latest)\n* [`pyenv hooks`](#pyenv-hooks)\n* [`pyenv shims`](#pyenv-shims)\n* [`pyenv init`](#pyenv-init)\n* [`pyenv completions`](#pyenv-completions)\n\n## `pyenv help`\n\nList all available pyenv commands along with a brief description of what they do. Run `pyenv help <command>` for information on a specific command. For full documentation, see: https://github.com/pyenv/pyenv#readme\n\n\n## `pyenv commands`\n\nLists all available pyenv commands.\n\n\n## `pyenv local`\n\nSets a local application-specific Python version by writing the version\nname to a `.python-version` file in the current directory. This version\noverrides the global version, and can be overridden itself by setting\nthe `PYENV_VERSION` environment variable or with the `pyenv shell`\ncommand.\n\n    $ pyenv local 2.7.6\n\nWhen run without a version number, `pyenv local` reports the currently\nconfigured local version. You can also unset the local version:\n\n    $ pyenv local --unset\n\nPrevious versions of pyenv stored local version specifications in a\nfile named `.pyenv-version`. For backwards compatibility, pyenv will\nread a local version specified in an `.pyenv-version` file, but a\n`.python-version` file in the same directory will take precedence.\n\n\n### `pyenv local` (advanced)\n\nYou can specify multiple versions as local Python at once.\n\nLet's say if you have two versions of 2.7.6 and 3.3.3. If you prefer 2.7.6 over 3.3.3,\n\n    $ pyenv local 2.7.6 3.3.3\n    $ pyenv versions\n      system\n    * 2.7.6 (set by /Users/yyuu/path/to/project/.python-version)\n    * 3.3.3 (set by /Users/yyuu/path/to/project/.python-version)\n    $ python --version\n    Python 2.7.6\n    $ python2.7 --version\n    Python 2.7.6\n    $ python3.3 --version\n    Python 3.3.3\n\nor, if you prefer 3.3.3 over 2.7.6,\n\n    $ pyenv local 3.3.3 2.7.6\n    $ pyenv versions\n      system\n    * 2.7.6 (set by /Users/yyuu/path/to/project/.python-version)\n    * 3.3.3 (set by /Users/yyuu/path/to/project/.python-version)\n      venv27\n    $ python --version\n    Python 3.3.3\n    $ python2.7 --version\n    Python 2.7.6\n    $ python3.3 --version\n    Python 3.3.3\n\n\nYou can use the `-f/--force` flag to force setting versions even if some aren't installed.\nThis is mainly useful in special cases like provisioning scripts.\n\n\n## `pyenv global`\n\nSets the global version of Python to be used in all shells by writing\nthe version name to the `~/.pyenv/version` file. This version can be\noverridden by an application-specific `.python-version` file, or by\nsetting the `PYENV_VERSION` environment variable.\n\n    $ pyenv global 2.7.6\n\nThe special version name `system` tells pyenv to use the system Python\n(detected by searching your `$PATH`).\n\nWhen run without a version number, `pyenv global` reports the\ncurrently configured global version.\n\n\n### `pyenv global` (advanced)\n\nYou can specify multiple versions as global Python at once.\n\nLet's say if you have two versions of 2.7.6 and 3.3.3. If you prefer 2.7.6 over 3.3.3,\n\n    $ pyenv global 2.7.6 3.3.3\n    $ pyenv versions\n      system\n    * 2.7.6 (set by /Users/yyuu/.pyenv/version)\n    * 3.3.3 (set by /Users/yyuu/.pyenv/version)\n    $ python --version\n    Python 2.7.6\n    $ python2.7 --version\n    Python 2.7.6\n    $ python3.3 --version\n    Python 3.3.3\n\nor, if you prefer 3.3.3 over 2.7.6,\n\n    $ pyenv global 3.3.3 2.7.6\n    $ pyenv versions\n      system\n    * 2.7.6 (set by /Users/yyuu/.pyenv/version)\n    * 3.3.3 (set by /Users/yyuu/.pyenv/version)\n      venv27\n    $ python --version\n    Python 3.3.3\n    $ python2.7 --version\n    Python 2.7.6\n    $ python3.3 --version\n    Python 3.3.3\n\n\n## `pyenv shell`\n\nSets a shell-specific Python version by setting the `PYENV_VERSION`\nenvironment variable in your shell. This version overrides\napplication-specific versions and the global version.\n\n    $ pyenv shell pypy-2.2.1\n\nWhen run without a version number, `pyenv shell` reports the current\nvalue of `PYENV_VERSION`. You can also unset the shell version:\n\n    $ pyenv shell --unset\n\nNote that you'll need pyenv's shell integration enabled (step 3 of\nthe installation instructions) in order to use this command. If you\nprefer not to use shell integration, you may simply set the\n`PYENV_VERSION` variable yourself:\n\n    $ export PYENV_VERSION=pypy-2.2.1\n\n\n### `pyenv shell` (advanced)\n\nYou can specify multiple versions via `PYENV_VERSION` at once.\n\nLet's say if you have two versions of 2.7.6 and 3.3.3. If you prefer 2.7.6 over 3.3.3,\n\n    $ pyenv shell 2.7.6 3.3.3\n    $ pyenv versions\n      system\n    * 2.7.6 (set by PYENV_VERSION environment variable)\n    * 3.3.3 (set by PYENV_VERSION environment variable)\n    $ python --version\n    Python 2.7.6\n    $ python2.7 --version\n    Python 2.7.6\n    $ python3.3 --version\n    Python 3.3.3\n\nor, if you prefer 3.3.3 over 2.7.6,\n\n    $ pyenv shell 3.3.3 2.7.6\n    $ pyenv versions\n      system\n    * 2.7.6 (set by PYENV_VERSION environment variable)\n    * 3.3.3 (set by PYENV_VERSION environment variable)\n      venv27\n    $ python --version\n    Python 3.3.3\n    $ python2.7 --version\n    Python 2.7.6\n    $ python3.3 --version\n    Python 3.3.3\n\n\n## `pyenv install`\n\nInstall a Python version (using [`python-build`](https://github.com/pyenv/pyenv/tree/master/plugins/python-build)).\n\n    Usage: pyenv install [-f] [-kvp] <version>\n           pyenv install [-f] [-kvp] <definition-file>\n           pyenv install -l|--list\n\n      -l/--list             List all available versions\n      -f/--force            Install even if the version appears to be installed already\n      -s/--skip-existing    Skip the installation if the version appears to be installed already\n\n      python-build options:\n\n      -k/--keep        Keep source tree in $PYENV_BUILD_ROOT after installation\n                       (defaults to $PYENV_ROOT/sources)\n      -v/--verbose     Verbose mode: print compilation status to stdout\n      -p/--patch       Apply a patch from stdin before building\n      -g/--debug       Build a debug version\n\nTo list the all available versions of Python, including Anaconda, Jython, pypy, and stackless, use:\n\n    $ pyenv install --list\n\nThen install the desired versions:\n\n    $ pyenv install 2.7.6\n    $ pyenv install 2.6.8\n    $ pyenv versions\n      system\n      2.6.8\n    * 2.7.6 (set by /home/yyuu/.pyenv/version)\n\nYou can also install the latest version of Python in a specific version line by supplying a prefix instead of a complete name:\n\n    $ pyenv install 3.10\n\nSee the [`pyenv latest` documentation](#pyenv-latest) for details on prefix resolution.\n\nAn older option is to use the `:latest` syntax. For example, to install the latest patch version for Python 3.8 you could do:\n\n    pyenv install 3.8:latest\n\nTo install the latest major release for Python 3 try:\n\n    pyenv install 3:latest\n\n## `pyenv uninstall`\n\nUninstall Python versions.\n\n    Usage: pyenv uninstall [-f|--force] <version> ...\n\n       -f  Attempt to remove the specified version without prompting\n           for confirmation. If the version does not exist, do not\n           display an error message.\n\n\n## `pyenv rehash`\n\nInstalls shims for all Python binaries known to pyenv (i.e.,\n`~/.pyenv/versions/*/bin/*`). Run this command after you install a new\nversion of Python, or install a package that provides binaries.\n\n    $ pyenv rehash\n\n\n## `pyenv version`\n\nDisplays the currently active Python version, along with information on\nhow it was set.\n\n    $ pyenv version\n    2.7.6 (set by /home/yyuu/.pyenv/version)\n\n\n## `pyenv versions`\n\nLists all Python versions known to pyenv, and shows an asterisk next to\nthe currently active version.\n\n    $ pyenv versions\n      2.5.6\n      2.6.8\n    * 2.7.6 (set by /home/yyuu/.pyenv/version)\n      3.3.3\n      jython-2.5.3\n      pypy-2.2.1\n\n\n## `pyenv which`\n\nDisplays the full path to the executable that pyenv will invoke when\nyou run the given command.\n\n    $ pyenv which python3.3\n    /home/yyuu/.pyenv/versions/3.3.3/bin/python3.3\n\nUse --nosystem argument in case when you don't need to search command in the \nsystem environment.\n\n## `pyenv whence`\n\nLists all Python versions with the given command installed.\n\n    $ pyenv whence 2to3\n    2.6.8\n    2.7.6\n    3.3.3\n\n## `pyenv exec`\n\n    Usage: pyenv exec <command> [arg1 arg2...]\n\nRuns an executable by first preparing PATH so that the selected Python\nversion's `bin` directory is at the front.\n\nFor example, if the currently selected Python version is 3.9.7:\n\n    pyenv exec pip install -r requirements.txt\n    \nis equivalent to:\n\n    PATH=\"$PYENV_ROOT/versions/3.9.7/bin:$PATH\" pip install -r requirements.txt\n\n## `pyenv root`\n\nDisplays the root directory where versions and shims are kept.\n\n    $ pyenv root\n    /home/user/.pyenv\n\n## `pyenv prefix`\n\nDisplays the directories where the given Python versions are installed,\nseparated by colons. If no version is given, `pyenv prefix` displays the\nlocations of the currently selected versions.\n\n    $ pyenv prefix 3.9.7\n    /home/user/.pyenv/versions/3.9.7\n\n## `pyenv latest`\n\nDisplays the latest installed or known version with the given prefix\n\n    Usage: pyenv latest [-k|--known] [-q|--quiet] <prefix>\n\n     -k/--known      Select from all known versions instead of installed\n     -q/--quiet      Do not print an error message on resolution failure\n\nOnly full prefixes are searched: in the actual name, the given prefix must be followed by a dot or a dash.\n\nPrereleases and versions with specific suffixes (e.g. `-src`) are ignored.\n\n## `pyenv hooks`\n\nLists installed hook scripts for a given pyenv command.\n\n    Usage: pyenv hooks <command>\n\n## `pyenv shims`\n\nList existing pyenv shims.\n\n    Usage: pyenv shims [--short]\n\n    $ pyenv shims\n    /home/user/.pyenv/shims/2to3\n    /home/user/.pyenv/shims/2to3-3.9\n    /home/user/.pyenv/shims/idle\n    /home/user/.pyenv/shims/idle3\n    /home/user/.pyenv/shims/idle3.9\n    /home/user/.pyenv/shims/pip\n    /home/user/.pyenv/shims/pip3\n    /home/user/.pyenv/shims/pip3.9\n    /home/user/.pyenv/shims/pydoc\n    /home/user/.pyenv/shims/pydoc3\n    /home/user/.pyenv/shims/pydoc3.9\n    /home/user/.pyenv/shims/python\n    /home/user/.pyenv/shims/python3\n    /home/user/.pyenv/shims/python3.9\n    /home/user/.pyenv/shims/python3.9-config\n    /home/user/.pyenv/shims/python3.9-gdb.py\n    /home/user/.pyenv/shims/python3-config\n    /home/user/.pyenv/shims/python-config\n\n## `pyenv init`\n\nConfigure the shell environment for pyenv\n\n    Usage: eval \"$(pyenv init [-|--path] [--no-push-path] [--no-rehash] [<shell>])\"\n\n      -                    Initialize shims directory, print PYENV_SHELL variable, completions path\n                           and shell function\n      --path               Print shims path\n      --no-push-path       Do not push shim to the start of PATH if they're already there\n      --no-rehash          Add no rehash command to output     \n\n## `pyenv completions`\n\nLists available completions for a given pyenv command.\n\n    Usage: pyenv completions <command> [arg1 arg2...]\n"
        },
        {
          "name": "CONDUCT.md",
          "type": "blob",
          "size": 3.3,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, gender identity and expression, level of experience,\nnationality, personal appearance, race, religion, or sexual identity and\norientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\nadvances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting one of the project maintainers listed below. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Project Maintainers\n\n* Yamashita, Yuu <<peek824545201@gmail.com>>\n* Daniel Hahler <<git@thequod.de>>\n* Josh Friend <<josh@fueledbycaffeine.com>>\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 6.61,
          "content": "General guidance\n================\n\n* The usual principles of respecting existing conventions and making sure that your changes\n  are in line with the overall product design apply when contributing code to Pyenv.\n\n* We are limited to Bash 3.2 features\n\n  That's because that's the version shipped with MacOS.\n  (They didn't upgrade past it and switched to Zsh because later versions\n  are covered by GPLv3 which has additional restrictions unacceptable for Apple.)\n\n  You can still add performance optimizations etc that take advantage of newer Bash features\n  as long as there is a fallback execution route for Bash 3.\n\n* Be extra careful when submitting logic specific for the Apple Silicon platform\n\n  As of this writing, Github Actions do not support it and only one team member has the necessary hardware.\n  So we may be unable to test your changes and may have to take your word for it.\n\n\nFormatting PRs\n==============\n\nWe strive to keep commit history one-concern-per-commit to keep it meaningful and easy to follow.\nIf a pull request (PR) addresses a single concern (the typical case), we usually squash commits\nfrom it together when merging so its commit history doesn't matter.\nIf however a PR addresses multiple separate concerns, each of them should be presented as a separate commit.\nAdding multiple new Python releases of the same flavor is okay with either a single or multiple commits.\n\n\nAuthoring installation scripts\n==============================\n\nAdding new Python release support\n---------------------------------\n\nThe easiest way to add support for a new Python release is to copy the script from the previous one\nand adjust it as necessary. In many cases, just changing version numbers, URLs and hashes is enough.\nDo pay attention to other \"magic numbers\" that may be present in a script --\ne.g. the set of architectures and OS versions supported by a release -- since those change from time to time, too.\n\nMake sure to also copy any patches for the previous release that still apply to the new one.\nTypically, a patch no longer applies if it addresses a problem that's already fixed in the new release.\n\nFor prereleases, we only create an entry for the latest prerelease in a specific version line.\nWhen submitting a newer prerelease, replace the older one.\n\n\nAdding version-specific fixes/patches\n-------------------------------------\n\nWe accept fixes to issues in specific Python releases that prevent users from using them with Pyenv.\n\nIn the default configuration for a Python release, we strive to provide as close to vanilla experience as practical,\nto maintain [the principle of the least surprise](https://en.wikipedia.org/wiki/Principle_of_least_astonishment).\nAs such, any such fixes:\n\n* Must not break or degrade (e.g. disable features) the build in any of the environments that the release officially supports\n* Must not introduce incompatibilities with the vanilla release (including binary incompatibilities)\n* Should not patch things unnecessarily, to minimize the risk of the aforementioned undesirable side effects.\n  * E.g. if the fix is for a specific environment, its logic ought to only fire in this specific environment and not touch execution paths for other environments.\n  * As such, it's advisable to briefly explain in the PR what each added patch does and why it is necessary to fix the declared problem\n\nGenerally, version-specific fixes belong in the scripts for the affected releases and/or patches for them -- this guarantees that their effect is limited to only those releases.\n\n<h3>Backporting upstream patches</h3>\n\nUsually, this is the easiest way to backport a fix for a problem that is fixed in a newer release.\n\n* Clone Python, check out the tag for the appropriate release and create a branch\n* Apply existing patches if there are any (with either `patch` or `git am`) and commit\n* Cherry-pick the upstream commit that fixes the problem in a newer release\n* Commit and `git format-patch`\n* Commit the generated patch file into Pyenv, test your changes and submit a PR\n\n\nDeprecation policy\n------------------\n\nWe do not provide official support for EOL releases and environments or otherwise provide any kind of extended support for old Python releases.\n\nWe do however accept fixes from interested parties that would allow running older, including EOL, releases in environments that they do not officially support.\nIn addition to the above requirements for release-specific fixes,\n\n* Such a fix must not add maintenance burden (e.g. add new logic to `python-build` that has to be kept there indefinitely)\n  * Unless the added logic is useful for both EOL and non-EOL releases. In this case, it will be considered as being primarily an improvement for non-EOL releases.\n* Support is provided on a \"best effort\" basis: we do not actively maintain these fixes but won't actively break them, either, and will accept any corrections.\n  Since old releases never change, it's pretty safe to assume that the fixes will continue to work until a later version\n  of an environment introduces further incompatible changes.\n\n\nAdvanced changes / adding new Python flavor support\n---------------------------------------------------\n\nAn installation script is sourced from `python-build`. All installation scripts are based on the same logic:\n\n1. Select the source to download and other variable parameters as needed.\n\n   This includes showing an error if the user's environment (OS, architecture) is not supported by the release.\n   Binary releases that only officially support specific distro(s) typically show a warning in other distros instead.\n\n2. Run one of the `install_*` shell functions\n\n`install_*` shell functions defined in `python-build` install Python from different kinds of sources -- compressed package (binary or source), upstream installation script, VCS checkout. Pick one that's the most appropriate for your packaging.\n\nEach of them accepts a couple of function-specific arguments which are followed by arguments that constitute the build sequence. Each `<argument>` in the build sequence corresponds to the `install_*_<argument>` function in `python-build`. Check what's available and add any functions with logic specific to your flavor if needed.\n\nWe strive to keep out of `python-build` parts of build logic that are release-specific and/or tend to change abruptly between releases -- e.g. sets of supported architectures and other software's versions. This results in logic duplication between installation scripts -- but since old releases never change once released, this doesn't really add to the maintenance burden. As a rule of thumb, `python-build` can host parts of logic that are expected to stay the same for an indefinite amount of time -- for an entire Python flavor or release line.\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.66,
          "content": "FROM ubuntu:18.04\n\nLABEL maintainer=\"Chris L. Barnes <chrislloydbarnes@gmail.com>\"\n\nENV DEBIAN_FRONTEND=noninteractive\n\nRUN apt-get update -y \\\n    && apt-get install -y \\\n        make \\\n        build-essential \\\n        libssl-dev \\\n        zlib1g-dev \\\n        libbz2-dev \\\n        libreadline-dev \\\n        libsqlite3-dev \\\n        wget \\\n        curl \\\n        llvm \\\n        libncurses5-dev \\\n        libncursesw5-dev \\\n        xz-utils \\\n        tk-dev \\\n        libffi-dev \\\n        liblzma-dev \\\n        python-openssl \\\n        git \\\n    && rm -rf /var/lib/apt/lists/*\n\nENV PYENV_ROOT \"/pyenv\"\nENV PATH \"$PYENV_ROOT/bin:$PATH\"\n\nCOPY . /pyenv\n\nRUN eval \"$(pyenv init -)\"\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.07,
          "content": "Copyright (c) 2013 Yamashita, Yuu\nCopyright (c) 2013 Sam Stephenson\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "MAINTENANCE.md",
          "type": "blob",
          "size": 1.08,
          "content": "Creating a release\n==================\n\nThe release of the new version of Pyenv is done via GitHub Releases.\n\nRelease checklist:\n* Start [drafting a new release on GitHub](https://github.com/pyenv/pyenv/releases) to generate a summary of changes.  \nType the would-be tag name in the \"Choose a tag\" field and press \"Generate release notes\"\n  * The summary may need editing. E.g. rephrase entries, delete/merge entries that are too minor or irrelevant to the users (e.g. typo fixes, CI)\n* Update `CHANGELOG.md` with the new version number and the edited summary (only the changes section)\n* Push the version number in `libexec/pyenv---version`\n  * Minor version is pushed if there are significant functional changes (not e.g. bugfixes/formula adaptations/supporting niche use cases).\n  * Major version is pushed if there are breaking changes\n* Commit the changes locally into `master`\n* Create a new tag locally with the same name as specified in the new release window\n* Push the changes including the tag\n* In the still open new release window, press \"Publish release\". The now-existing tag will be used."
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.91,
          "content": ".PHONY: test test-build test-unit test-plugin\n\n# Do not pass in user flags to build tests.\nunexport PYTHON_CFLAGS\nunexport PYTHON_CONFIGURE_OPTS\n\ntest: test-unit test-plugin\n\ntest-unit: bats\n\tPATH=\"./bats/bin:$$PATH\" test/run\n\t\ntest-plugin: bats\n\tcd plugins/python-build && $(PWD)/bats/bin/bats $${CI:+--tap} test\n\nPYTHON_BUILD_ROOT := $(CURDIR)/plugins/python-build\nPYTHON_BUILD_OPTS ?= --verbose\nPYTHON_BUILD_VERSION ?= 3.8-dev\nPYTHON_BUILD_TEST_PREFIX ?= $(PYTHON_BUILD_ROOT)/test/build/tmp/dist\n\ntest-build:\n\t$(RM) -r $(PYTHON_BUILD_TEST_PREFIX)\n\t$(PYTHON_BUILD_ROOT)/bin/python-build $(PYTHON_BUILD_OPTS) $(PYTHON_BUILD_VERSION) $(PYTHON_BUILD_TEST_PREFIX)\n\t[ -e $(PYTHON_BUILD_TEST_PREFIX)/bin/python ]\n\t$(PYTHON_BUILD_TEST_PREFIX)/bin/python -V\n\t[ -e $(PYTHON_BUILD_TEST_PREFIX)/bin/pip ]\n\t$(PYTHON_BUILD_TEST_PREFIX)/bin/pip -V\n\nbats:\n\tgit clone --depth 1 --branch v1.2.0 https://github.com/bats-core/bats-core.git bats\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 28.32,
          "content": "# Simple Python Version Management: pyenv\n\n[![Join the chat at https://gitter.im/yyuu/pyenv](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/yyuu/pyenv?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\npyenv lets you easily switch between multiple versions of Python. It's\nsimple, unobtrusive, and follows the UNIX tradition of single-purpose\ntools that do one thing well.\n\nThis project was forked from [rbenv](https://github.com/rbenv/rbenv) and\n[ruby-build](https://github.com/rbenv/ruby-build), and modified for Python.\n\n### What pyenv _does..._\n\n* Lets you **change the global Python version** on a per-user basis.\n* Provides support for **per-project Python versions**.\n* Allows you to **override the Python version** with an environment\n  variable.\n* Searches for commands from **multiple versions of Python at a time**.\n  This may be helpful to test across Python versions with [tox](https://pypi.python.org/pypi/tox).\n\n\n### In contrast with pythonbrew and pythonz, pyenv _does not..._\n\n* **Depend on Python itself.** pyenv was made from pure shell scripts.\n    There is no bootstrap problem of Python.\n* **Need to be loaded into your shell.** Instead, pyenv's shim\n    approach works by adding a directory to your `PATH`.\n* **Manage virtualenv.** Of course, you can create [virtualenv](https://pypi.python.org/pypi/virtualenv)\n    yourself, or [pyenv-virtualenv](https://github.com/pyenv/pyenv-virtualenv)\n    to automate the process.\n\n\n----\n\n\n## Table of Contents\n\n* **[Installation](#installation)**\n  * [Getting Pyenv](#a-getting-pyenv)\n    * [Linux/UNIX](#linuxunix)\n      * [Automatic Installer](#1-automatic-installer-recommended)\n      * [Basic GitHub Checkout](#2-basic-github-checkout)\n    * [MacOS](#macos)\n      * [Homebrew in macOS](#homebrew-in-macos)\n    * [Windows](#windows)\n  * [Set up your shell environment for Pyenv](#b-set-up-your-shell-environment-for-pyenv)\n  * [Restart your shell](#c-restart-your-shell)\n  * [Install Python build dependencies](#d-install-python-build-dependencies)\n  * [Upgrade Notes](#e-upgrade-notes)\n* **[Usage](#usage)**\n  * [Install additional Python versions](#install-additional-python-versions)\n    * [Prefix auto-resolution to the latest version](#prefix-auto-resolution-to-the-latest-version)\n  * [Switch between Python versions](#switch-between-python-versions)\n    * [Making multiple versions available](#making-multiple-versions-available)\n  * [Uninstall Python versions](#uninstall-python-versions)\n  * [Other operations](#other-operations)\n* [Upgrading](#upgrading)\n  * [Upgrading with Homebrew](#upgrading-with-homebrew)\n  * [Upgrading with Installer or Git checkout](#upgrading-with-installer-or-git-checkout)\n* [Uninstalling pyenv](#uninstalling-pyenv)\n* [Pyenv plugins](#pyenv-plugins)\n* **[How It Works](#how-it-works)**\n  * [Understanding PATH](#understanding-path)\n  * [Understanding Shims](#understanding-shims)\n  * [Understanding Python version selection](#understanding-python-version-selection)\n  * [Locating Pyenv-provided Python Installations](#locating-pyenv-provided-python-installations)\n* [Advanced Configuration](#advanced-configuration)\n  * [Using Pyenv without shims](#using-pyenv-without-shims)\n  * [Environment variables](#environment-variables)\n* **[Development](#development)**\n  * [Contributing](#contributing)\n  * [Version History](#version-history)\n  * [License](#license)\n\n\n----\n\n## Installation\n\n### A. Getting Pyenv\n----\n#### Linux/Unix\n<details>\n\nThe Homebrew option from the [MacOS section below](#macos) would also work if you have Homebrew installed.\n  \n##### 1. Automatic installer (Recommended)\n\n```bash\ncurl -fsSL https://pyenv.run | bash\n```\n\nFor more details visit our other project:\nhttps://github.com/pyenv/pyenv-installer\n\n\n##### 2. Basic GitHub Checkout\n\nThis will get you going with the latest version of Pyenv and make it\neasy to fork and contribute any changes back upstream.\n\n* **Check out Pyenv where you want it installed.**\n   A good place to choose is `$HOME/.pyenv` (but you can install it somewhere else):\n    ```\n    git clone https://github.com/pyenv/pyenv.git ~/.pyenv\n    ```\n*  Optionally, try to compile a dynamic Bash extension to speed up Pyenv. Don't\n   worry if it fails; Pyenv will still work normally:\n    ```\n    cd ~/.pyenv && src/configure && make -C src\n    ```\n</details>\n\n#### MacOS\n\n<details>\n  \nThe options from the [Linux section above](#linuxunix) also work but Homebrew is recommended for basic usage.\n\n##### [Homebrew](https://brew.sh) in macOS\n\n   1. Update homebrew and install pyenv:\n      ```sh\n      brew update\n      brew install pyenv\n      ```\n      If you want to install (and update to) the latest development head of Pyenv\n      rather than the latest release, instead run:\n      ```sh\n      brew install pyenv --head\n      ```\n   3. Then follow the rest of the post-installation steps, starting with\n      [Set up your shell environment for Pyenv](#b-set-up-your-shell-environment-for-pyenv).\n\n   4. OPTIONAL. To fix `brew doctor`'s warning _\"\"config\" scripts exist outside your system or Homebrew directories\"_\n\n      If you're going to build Homebrew formulae from source that link against Python\n      like Tkinter or NumPy\n      _(This is only generally the case if you are a developer of such a formula,\n      or if you have an EOL version of MacOS for which prebuilt bottles are no longer provided\n      and you are using such a formula)._\n\n      To avoid them accidentally linking against a Pyenv-provided Python,\n      add the following line into your interactive shell's configuration:\n\n      * Bash/Zsh:\n\n        ~~~bash\n        alias brew='env PATH=\"${PATH//$(pyenv root)\\/shims:/}\" brew'\n        ~~~\n\n      * Fish:\n\n        ~~~fish\n        alias brew=\"env PATH=(string replace (pyenv root)/shims '' \\\"\\$PATH\\\") brew\"\n        ~~~\n</details>\n\n#### Windows\n\n<details>\n\nPyenv does not officially support Windows and does not work in Windows outside\nthe Windows Subsystem for Linux.\nMoreover, even there, the Pythons it installs are not native Windows versions\nbut rather Linux versions running in a virtual machine --\nso you won't get Windows-specific functionality.\n\nIf you're in Windows, we recommend using @kirankotari's [`pyenv-win`](https://github.com/pyenv-win/pyenv-win) fork --\nwhich does install native Windows Python versions.\n\n</details>\n\n### B. Set up your shell environment for Pyenv\n----\n\nThe below setup should work for the vast majority of users for common use cases.\nSee [Advanced configuration](#advanced-configuration) for details and more configuration options.\n\n#### Bash\n  <details>\n\n  Stock Bash startup files vary widely between distributions in which of them source\n  which, under what circumstances, in what order and what additional configuration they perform.\n  As such, the most reliable way to get Pyenv in all environments is to append Pyenv\n  configuration commands to both `.bashrc` (for interactive shells)\n  and the profile file that Bash would use (for login shells).\n\n  1. First, add the commands to `~/.bashrc` by running the following in your terminal:\n\n      ```bash\n      echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.bashrc\n      echo '[[ -d $PYENV_ROOT/bin ]] && export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.bashrc\n      echo 'eval \"$(pyenv init - bash)\"' >> ~/.bashrc\n      ```\n  2. Then, if you have `~/.profile`, `~/.bash_profile` or `~/.bash_login`, add the commands there as well.\n     If you have none of these, create a `~/.profile` and add the commands there.\n\n     * to add to `~/.profile`:\n       ``` bash\n       echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.profile\n       echo '[[ -d $PYENV_ROOT/bin ]] && export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.profile\n       echo 'eval \"$(pyenv init - bash)\"' >> ~/.profile\n       ```\n     * to add to `~/.bash_profile`:\n       ```bash\n       echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.bash_profile\n       echo '[[ -d $PYENV_ROOT/bin ]] && export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.bash_profile\n       echo 'eval \"$(pyenv init - bash)\"' >> ~/.bash_profile\n       ```\n\n   **Bash warning**: There are some systems where the `BASH_ENV` variable is configured\n   to point to `.bashrc`. On such systems, you should almost certainly put the\n   `eval \"$(pyenv init - bash)\"` line into `.bash_profile`, and **not** into `.bashrc`. Otherwise, you\n   may observe strange behaviour, such as `pyenv` getting into an infinite loop.\n   See [#264](https://github.com/pyenv/pyenv/issues/264) for details.\n   \n   </details>\n   \n#### Zsh\n  \n  <details>\n  \n  ```zsh\n    echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.zshrc\n    echo '[[ -d $PYENV_ROOT/bin ]] && export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.zshrc\n    echo 'eval \"$(pyenv init - zsh)\"' >> ~/.zshrc\n  ```\n  \n  If you wish to get Pyenv in noninteractive login shells as well, also add the commands to `~/.zprofile` or `~/.zlogin`.\n  </details>\n  \n#### Fish\n  \n  <details>\n    \n  1. If you have Fish 3.2.0 or newer, execute this interactively:\n     ~~~ fish\n       set -Ux PYENV_ROOT $HOME/.pyenv\n       fish_add_path $PYENV_ROOT/bin\n     ~~~\n\n  2. Otherwise, execute the snippet below:\n     ~~~ fish\n       set -Ux PYENV_ROOT $HOME/.pyenv\n       set -U fish_user_paths $PYENV_ROOT/bin $fish_user_paths\n     ~~~\n\n  3. Now, add this to `~/.config/fish/config.fish`:\n     ~~~ fish\n       pyenv init - fish | source\n     ~~~\n  </details>\n\n### C. Restart your shell\n----\n\n  for the `PATH` changes to take effect.\n\n  ```sh\n  exec \"$SHELL\"\n  ```\n\n### D. Install Python build dependencies\n----\n\n  [**Install Python build dependencies**](https://github.com/pyenv/pyenv/wiki#suggested-build-environment)\n  before attempting to install a new Python version.\n\n  You can now begin using Pyenv.\n\n### E. Upgrade Notes\n----\n\n**if you have upgraded from pyenv version 2.0.x-2.2.x**\n\n<details>\n\nThe startup logic and instructions have been updated for simplicity in 2.3.0.\nThe previous, more complicated configuration scheme for 2.0.0-2.2.5 still works.\n\n* Define environment variable `PYENV_ROOT` to point to the path where\n  Pyenv will store its data. `$HOME/.pyenv` is the default.\n  If you installed Pyenv via Git checkout, we recommend\n  to set it to the same location as where you cloned it.\n* Add the `pyenv` executable to your `PATH` if it's not already there\n* run `eval \"$(pyenv init -)\"` to install `pyenv` into your shell as a shell function, enable shims and autocompletion\n  * You may run `eval \"$(pyenv init --path)\"` instead to just enable shims, without shell integration\n\n</details>\n\n----\n\n\n## Usage\n\n![Terminal output example](/install_local_python.gif)\n\n### Install additional Python versions\n\nTo install additional Python versions, use [`pyenv install`](COMMANDS.md#pyenv-install).\n\nFor example, to download and install Python 3.10.4, run:\n\n```sh\npyenv install 3.10.4\n```\n\nRunning `pyenv install -l` gives the list of all available versions.\n\n----\n\n<details> <summary> Notes about python releases </summary>\n  \n**NOTE:** Most Pyenv-provided Python releases are source releases and are built\nfrom source as part of installation (that's why you need Python build dependencies preinstalled).\nYou can pass options to Python's `configure` and compiler flags to customize the build,\nsee [_Special environment variables_ in Python-Build's README](plugins/python-build/README.md#special-environment-variables)\nfor details.\n\n**NOTE:** If you are having trouble installing a Python version,\nplease visit the wiki page about\n[Common Build Problems](https://github.com/pyenv/pyenv/wiki/Common-build-problems).\n\n**NOTE:** If you want to use proxy for download, please set the `http_proxy` and `https_proxy`\nenvironment variables.\n\n**NOTE:** If you'd like a faster interpreter at the cost of longer build times,\nsee [_Building for maximum performance_ in Python-Build's README](plugins/python-build/README.md#building-for-maximum-performance).\n\n</details>\n\n----\n\n#### Prefix auto-resolution to the latest version\n\nAll Pyenv subcommands except `uninstall` automatically resolve full prefixes to the latest version in the corresponding version line.\n\n`pyenv install` picks the latest known version, while other subcommands pick the latest installed version.\n\nE.g. to install and then switch to the latest 3.10 release:\n\n```sh\npyenv install 3.10\npyenv global 3.10\n```\n\nYou can run [`pyenv latest -k <prefix>`](COMMANDS.md#pyenv-latest) to see how `pyenv install` would resolve a specific prefix, or [`pyenv latest <prefix>`](COMMANDS.md#pyenv-latest) to see how other subcommands would resolve it.\n\nSee the [`pyenv latest` documentation](COMMANDS.md#pyenv-latest) for details.\n\n\n<details> <summary> Python versions with extended support </summary>\n\nFor the following Python releases, Pyenv applies user-provided patches that add support for some newer environments.\nThough we don't actively maintain those patches, since existing releases never change,\nit's safe to assume that they will continue working until there are further incompatible changes\nin a later version of those environments.\n\n* *3.7.8-3.7.15, 3.8.4-3.8.12, 3.9.0-3.9.7* : XCode 13.3\n* *3.5.10, 3.6.15* : MacOS 11+ and XCode 13.3\n* *2.7.18* : MacOS 10.15+ and Apple Silicon\n</details>\n\n----\n\n### Switch between Python versions\n\nTo select a Pyenv-installed Python as the version to use, run one\nof the following commands:\n\n* [`pyenv shell <version>`](COMMANDS.md#pyenv-shell) -- select just for current shell session\n* [`pyenv local <version>`](COMMANDS.md#pyenv-local) -- automatically select whenever you are in the current directory (or its subdirectories)\n* [`pyenv global <version>`](COMMANDS.md#pyenv-shell) -- select globally for your user account\n\nE.g. to select the above-mentioned newly-installed Python 3.10.4 as your preferred version to use:\n\n~~~bash\npyenv global 3.10.4\n~~~\n\nNow whenever you invoke `python`, `pip` etc., an executable from the Pyenv-provided\n3.10.4 installation will be run instead of the system Python.\n\nUsing \"`system`\" as a version name would reset the selection to your system-provided Python.\n\nSee [Understanding shims](#understanding-shims) and\n[Understanding Python version selection](#understanding-python-version-selection)\nfor more details on how the selection works and more information on its usage.\n\n----\n\n#### Making multiple versions available\n\nYou can select multiple Python versions at the same time by specifying multiple arguments.\nE.g. if you wish to use the latest installed CPython 3.11 and 3.12:\n\n~~~bash\npyenv global 3.11 3.12\n~~~\n\nWhenever you run a command provided by a Python installation, these versions will be searched for it in the specified order.\n[Due to the shims' fall-through behavior]((#understanding-python-version-selection)), `system` is always implicitly searched afterwards.\n\n----\n\n### Uninstall Python versions\n\nAs time goes on, you will accumulate Python versions in your\n`$(pyenv root)/versions` directory.\n\nTo remove old Python versions, use [`pyenv uninstall <versions>`](COMMANDS.md#pyenv-uninstall).\n\nAlternatively, you can simply `rm -rf` the directory of the version you want\nto remove. You can find the directory of a particular Python version\nwith the `pyenv prefix` command, e.g. `pyenv prefix 2.6.8`.\nNote however that plugins may run additional operations on uninstall\nwhich you would need to do by hand as well. E.g. Pyenv-Virtualenv also\nremoves any virtual environments linked to the version being uninstalled.\n\n----\n\n### Other operations\n\nRun `pyenv commands` to get a list of all available subcommands.\nRun a subcommand with `--help` to get help on it, or see the [Commands Reference](COMMANDS.md).\n\nNote that Pyenv plugins that you install may add their own subcommands.\n\n\n## Upgrading\n\n### Upgrading with Homebrew\n\nIf you've installed Pyenv using Homebrew, upgrade using:\n```sh\nbrew upgrade pyenv\n```\n\nTo switch from a release to the latest development head of Pyenv, use:\n\n```sh\nbrew uninstall pyenv\nbrew install pyenv --head\n```\n\nthen you can upgrade it with `brew upgrade pyenv` as usual.\n\n\n### Upgrading with Installer or Git checkout\n\nIf you've installed Pyenv with Pyenv-installer, you likely have the\n[Pyenv-Update](https://github.com/pyenv/pyenv-update) plugin that would\nupgrade Pyenv and all installed plugins:\n\n```sh\npyenv update\n```\n\nIf you've installed Pyenv using Pyenv-installer or Git checkout, you can also\nupgrade your installation at any time using Git.\n\nTo upgrade to the latest development version of pyenv, use `git pull`:\n\n```sh\ncd $(pyenv root)\ngit pull\n```\n\nTo upgrade to a specific release of Pyenv, check out the corresponding tag:\n\n```sh\ncd $(pyenv root)\ngit fetch\ngit tag\ngit checkout v0.1.0\n```\n\n## Uninstalling pyenv\n\nThe simplicity of pyenv makes it easy to temporarily disable it, or\nuninstall from the system.\n\n1. To **disable** Pyenv managing your Python versions, simply remove the\n  `pyenv init` invocations from your shell startup configuration. This will\n  remove Pyenv shims directory from `PATH`, and future invocations like\n  `python` will execute the system Python version, as it was before Pyenv.\n\n    `pyenv` will still be accessible on the command line, but your Python\n    apps won't be affected by version switching.\n\n2. To completely **uninstall** Pyenv, remove _all_ Pyenv configuration lines\n  from your shell startup configuration, and then remove\n  its root directory. This will **delete all Python versions** that were\n  installed under the `` $(pyenv root)/versions/ `` directory:\n\n    ```sh\n    rm -rf $(pyenv root)\n    ```\n\n    If you've installed Pyenv using a package manager, as a final step,\n    perform the Pyenv package removal. For instance, for Homebrew:\n\n    ```\n    brew uninstall pyenv\n    ```\n\n\n## Pyenv plugins\n\nPyenv provides a simple way to extend and customize its functionality with plugins --\nas simple as creating a plugin directory and dropping a shell script on a certain subpath of it\nwith whatever extra logic you need to be run at certain moments.\n\nThe main idea is that most things that you can put under `$PYENV_ROOT/<whatever>` you can also put\nunder `$PYENV_ROOT/plugins/your_plugin_name/<whatever>`.\n\nSee [_Plugins_ on the wiki](https://github.com/pyenv/pyenv/wiki/Plugins) on how to install and use plugins\nas well as a catalog of some useful existing plugins for common needs.\n\nSee [_Authoring plugins_ on the wiki](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) on writing your own plugins.\n\n----\n\n## How It Works\n\nAt a high level, pyenv intercepts Python commands using shim\nexecutables injected into your `PATH`, determines which Python version\nhas been specified by your application, and passes your commands along\nto the correct Python installation.\n\n\n### Understanding PATH\n\nWhen you run a command like `python` or `pip`, your shell (bash / zshrc / ...)\nsearches through a list of directories to find an executable file with\nthat name. This list of directories lives in an environment variable\ncalled `PATH`, with each directory in the list separated by a colon:\n\n    /usr/local/bin:/usr/bin:/bin\n\nDirectories in `PATH` are searched from left to right, so a matching\nexecutable in a directory at the beginning of the list takes\nprecedence over another one at the end. In this example, the\n`/usr/local/bin` directory will be searched first, then `/usr/bin`,\nthen `/bin`.\n\n\n### Understanding Shims\n\npyenv works by inserting a directory of _shims_ at the front of your\n`PATH`:\n\n    $(pyenv root)/shims:/usr/local/bin:/usr/bin:/bin\n\nThrough a process called _rehashing_, pyenv maintains shims in that\ndirectory to match every Python command across every installed version\nof Python—`python`, `pip`, and so on.\n\nShims are lightweight executables that simply pass your command along\nto pyenv. So with pyenv installed, when you run, say, `pip`, your\noperating system will do the following:\n\n* Search your `PATH` for an executable file named `pip`\n* Find the pyenv shim named `pip` at the beginning of your `PATH`\n* Run the shim named `pip`, which in turn passes the command along to\n  pyenv\n\n\n### Understanding Python version selection\n\nWhen you execute a shim, pyenv determines which Python version to use by\nreading it from the following sources, in this order:\n\n1. The `PYENV_VERSION` environment variable (if specified). You can use\n   the [`pyenv shell`](https://github.com/pyenv/pyenv/blob/master/COMMANDS.md#pyenv-shell) command to set this environment\n   variable in your current shell session.\n\n2. The application-specific `.python-version` file in the current\n   directory (if present). You can modify the current directory's\n   `.python-version` file with the [`pyenv local`](https://github.com/pyenv/pyenv/blob/master/COMMANDS.md#pyenv-local)\n   command.\n\n3. The first `.python-version` file found (if any) by searching each parent\n   directory, until reaching the root of your filesystem.\n\n4. The global `$(pyenv root)/version` file. You can modify this file using\n   the [`pyenv global`](https://github.com/pyenv/pyenv/blob/master/COMMANDS.md#pyenv-global) command.\n   If the global version file is not present, pyenv assumes you want to use the \"system\"\n   Python (see below).\n\nA special version name \"`system`\" means to use whatever Python is found on `PATH`\nafter the shims `PATH` entry (in other words, whatever would be run if Pyenv\nshims weren't on `PATH`). Note that Pyenv considers those installations outside\nits control and does not attempt to inspect or distinguish them in any way.\nSo e.g. if you are on MacOS and have OS-bundled Python 3.8.9 and Homebrew-installed\nPython 3.9.12 and 3.10.2 -- for Pyenv, this is still a single \"`system`\" version,\nand whichever of those is first on `PATH` under the executable name you\nspecified will be run.\n\n**NOTE:** You can activate multiple versions at the same time, including multiple\nversions of Python2 or Python3 simultaneously. This allows for parallel usage of\nPython2 and Python3, and is required with tools like `tox`. For example, to instruct\nPyenv to first use your system Python and Python3 (which are e.g. 2.7.9 and 3.4.2)\nbut also have Python 3.3.6, 3.2.1, and 2.5.2 available, you first `pyenv install`\nthe missing versions, then set `pyenv global system 3.3.6 3.2.1 2.5.2`.\nThen you'll be able to invoke any of those versions with an appropriate `pythonX` or\n`pythonX.Y` name.\nYou can also specify multiple versions in a `.python-version` file by hand,\nseparated by newlines. Lines starting with a `#` are ignored.\n\n[`pyenv which <command>`](COMMANDS.md#pyenv-which) displays which real executable would be\nrun when you invoke `<command>` via a shim.\nE.g. if you have 3.3.6, 3.2.1 and 2.5.2 installed of which 3.3.6 and 2.5.2 are selected\nand your system Python is 3.2.5,\n`pyenv which python2.5` should display `$(pyenv root)/versions/2.5.2/bin/python2.5`,\n`pyenv which python3` -- `$(pyenv root)/versions/3.3.6/bin/python3` and\n`pyenv which python3.2` -- path to your system Python due to the fall-through (see below).\n\nShims also fall through to anything further on `PATH` if the corresponding executable is\nnot present in any of the selected Python installations.\nThis allows you to use any programs installed elsewhere on the system as long as\nthey are not shadowed by a selected Python installation.\n\n\n### Locating Pyenv-provided Python installations\n\nOnce pyenv has determined which version of Python your application has\nspecified, it passes the command along to the corresponding Python\ninstallation.\n\nEach Python version is installed into its own directory under\n`$(pyenv root)/versions`.\n\nFor example, you might have these versions installed:\n\n* `$(pyenv root)/versions/2.7.8/`\n* `$(pyenv root)/versions/3.4.2/`\n* `$(pyenv root)/versions/pypy-2.4.0/`\n\nAs far as Pyenv is concerned, version names are simply directories under\n`$(pyenv root)/versions`.\n\n----\n\n\n## Advanced Configuration\n\nSkip this section unless you must know what every line in your shell\nprofile is doing.\n\nAlso see the [Environment variables](#environment-variables) section\nfor the environment variables that control Pyenv's behavior.\n\n`pyenv init` is the only command that crosses the line of loading\nextra commands into your shell. Coming from RVM, some of you might be\nopposed to this idea. Here's what `eval \"$(pyenv init -)\"` actually does:\n\n1. **Finds current shell.**\n   `pyenv init` figures out what shell you are using, as the exact commands of `eval \"$(pyenv init -)\"` vary depending on shell. Specifying which shell you are using (e.g. `eval \"$(pyenv init - bash)\"`) is preferred, because it reduces launch time significantly.\n\n2. **Sets up the shims path.** This is what allows Pyenv to intercept\n   and redirect invocations of `python`, `pip` etc. transparently.\n   It prepends `$(pyenv root)/shims` to your `$PATH`.\n   It also deletes any other instances of `$(pyenv root)/shims` on `PATH`\n   which allows to invoke `eval \"$(pyenv init -)\"` multiple times without\n   getting duplicate `PATH` entries.\n\n3. **Installs autocompletion.** This is entirely optional but pretty\n   useful. Sourcing `<pyenv installation prefix>/completions/pyenv.bash` will set that\n   up. There are also completions for Zsh and Fish.\n\n4. **Rehashes shims.** From time to time you'll need to rebuild your\n   shim files. Doing this on init makes sure everything is up to\n   date. You can always run `pyenv rehash` manually.\n\n5. **Installs `pyenv` into the current shell as a shell function.**\n   This bit is also optional, but allows\n   pyenv and plugins to change variables in your current shell.\n   This is required for some commands like `pyenv shell` to work.\n   The sh dispatcher doesn't do\n   anything crazy like override `cd` or hack your shell prompt, but if\n   for some reason you need `pyenv` to be a real script rather than a\n   shell function, you can safely skip it.\n\n`eval \"$(pyenv init --path)\"` only does items 2 and 4.\n\nTo see exactly what happens under the hood for yourself, run `pyenv init -`\nor `pyenv init --path`.\n\n`eval \"$(pyenv init -)\"` is supposed to run at any interactive shell's\nstartup (including nested shells -- e.g. those invoked from editors)\nso that you get completion and convenience shell functions.\n\n`eval \"$(pyenv init --path)\"` can be used instead of `eval \"$(pyenv init -)\"`\nto just enable shims, without shell integration. It can also be used to bump shims\nto the front of `PATH` after some other logic has prepended stuff to `PATH`\nthat may shadow Pyenv's shims.\n\n* In particular, in Debian-based distributions, the stock `~/.profile`\n  prepends per-user `bin` directories to `PATH` after having sourced `~/.bashrc`.\n  This necessitates appending a `pyenv init` call to `~/.profile` as well as `~/.bashrc`\n  in these distributions because the system's Pip places executables for\n  modules installed by a non-root user into those per-user `bin` directories.\n\n\n### Using Pyenv without shims\n\nIf you don't want to use `pyenv init` and shims, you can still benefit\nfrom pyenv's ability to install Python versions for you. Just run\n`pyenv install` and you will find versions installed in\n`$(pyenv root)/versions`.\n\nYou can manually execute or symlink them as required,\nor you can use [`pyenv exec <command>`](COMMANDS.md#pyenv-exec)\nwhenever you want `<command>` to be affected by Pyenv's version selection\nas currently configured.\n\n`pyenv exec` works by prepending `$(pyenv root)/versions/<selected version>/bin`\nto `PATH` in the `<command>`'s environment, the same as what e.g. RVM does.\n\n\n### Environment variables\n\nYou can affect how Pyenv operates with the following environment variables:\n\nname | default | description\n-----|---------|------------\n`PYENV_VERSION` | | Specifies the Python version to be used.<br>Also see [`pyenv shell`](COMMANDS.md#pyenv-shell)\n`PYENV_ROOT` | `~/.pyenv` | Defines the directory under which Python versions and shims reside.<br>Also see [`pyenv root`](COMMANDS.md#pyenv-root)\n`PYENV_DEBUG` | | Outputs debug information.<br>Also as: `pyenv --debug <subcommand>`\n`PYENV_HOOK_PATH` | [_see wiki_][hooks] | Colon-separated list of paths searched for pyenv hooks.\n`PYENV_DIR` | `$PWD` | Directory to start searching for `.python-version` files.\n\nSee also [_Special environment variables_ in Python-Build's README](plugins/python-build/README.md#special-environment-variables)\nfor environment variables that can be used to customize the build.\n\n----\n\n## Development\n\nThe pyenv source code is [hosted on\nGitHub](https://github.com/pyenv/pyenv).  It's clean, modular,\nand easy to understand, even if you're not a shell hacker.\n\nTests are executed using [Bats](https://github.com/bats-core/bats-core):\n\n    bats test\n    bats/test/<file>.bats\n\n\n### Contributing\n\nFeel free to submit pull requests and file bugs on the [issue\ntracker](https://github.com/pyenv/pyenv/issues).\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md) for more details on submitting changes.\n\n\n### Version History\n\nSee [CHANGELOG.md](CHANGELOG.md).\n\n\n### License\n\n[The MIT License](LICENSE)\n\n\n[pyenv-virtualenv]: https://github.com/pyenv/pyenv-virtualenv#readme\n[hooks]: https://github.com/pyenv/pyenv/wiki/Authoring-plugins#pyenv-hooks\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "completions",
          "type": "tree",
          "content": null
        },
        {
          "name": "install_local_python.gif",
          "type": "blob",
          "size": 531.09,
          "content": null
        },
        {
          "name": "libexec",
          "type": "tree",
          "content": null
        },
        {
          "name": "man",
          "type": "tree",
          "content": null
        },
        {
          "name": "plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyenv.d",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "terminal_output.png",
          "type": "blob",
          "size": 102.31,
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}