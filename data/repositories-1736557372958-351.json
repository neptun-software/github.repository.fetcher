{
  "metadata": {
    "timestamp": 1736557372958,
    "page": 351,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "langflow-ai/langflow",
      "stars": 42756,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".env.example",
          "type": "blob",
          "size": 2.89,
          "content": "# Description: Example of .env file\n# Usage: Copy this file to .env and change the values\n#        according to your needs\n#        Do not commit .env file to git\n#        Do not change .env.example file\n\n# Config directory\n# Directory where files, logs and database will be stored\n# Example: LANGFLOW_CONFIG_DIR=~/.langflow\nLANGFLOW_CONFIG_DIR=\n\n# Save database in the config directory\n# Values: true, false\n# If false, the database will be saved in Langflow's root directory\n# This means that the database will be deleted when Langflow is uninstalled\n# and that the database will not be shared between different virtual environments\n# Example: LANGFLOW_SAVE_DB_IN_CONFIG_DIR=true\nLANGFLOW_SAVE_DB_IN_CONFIG_DIR=\n\n# Database URL\n# Postgres example: LANGFLOW_DATABASE_URL=postgresql://postgres:postgres@localhost:5432/langflow\n# SQLite example:\nLANGFLOW_DATABASE_URL=sqlite:///./langflow.db\n\n# Cache type\nLANGFLOW_LANGCHAIN_CACHE=SQLiteCache\n\n# Server host\n# Example: LANGFLOW_HOST=127.0.0.1\nLANGFLOW_HOST=\n\n# Worker processes\n# Example: LANGFLOW_WORKERS=1\nLANGFLOW_WORKERS=\n\n# Server port\n# Example: LANGFLOW_PORT=7860\nLANGFLOW_PORT=\n\n# Logging level\n# Example: LANGFLOW_LOG_LEVEL=critical\nLANGFLOW_LOG_LEVEL=\n\n# Path to the log file\n# Example: LANGFLOW_LOG_FILE=logs/langflow.log\nLANGFLOW_LOG_FILE=\n\n# Path to the frontend directory containing build files\n# Example: LANGFLOW_FRONTEND_PATH=/path/to/frontend/build/files\nLANGFLOW_FRONTEND_PATH=\n\n# Whether to open the browser after starting the server\n# Values: true, false\n# Example: LANGFLOW_OPEN_BROWSER=true\nLANGFLOW_OPEN_BROWSER=\n\n# Whether to remove API keys from the projects saved in the database\n# Values: true, false\n# Example: LANGFLOW_REMOVE_API_KEYS=false\nLANGFLOW_REMOVE_API_KEYS=\n\n# Whether to use RedisCache or ThreadingInMemoryCache or AsyncInMemoryCache\n# Values: async, memory, redis\n# Example: LANGFLOW_CACHE_TYPE=memory\n# If you want to use redis then the following environment variables must be set:\n# LANGFLOW_REDIS_HOST (default: localhost)\n# LANGFLOW_REDIS_PORT (default: 6379)\n# LANGFLOW_REDIS_DB (default: 0)\n# LANGFLOW_REDIS_CACHE_EXPIRE (default: 3600)\nLANGFLOW_CACHE_TYPE=\n\n# Set AUTO_LOGIN to false if you want to disable auto login\n# and use the login form to login. LANGFLOW_SUPERUSER and LANGFLOW_SUPERUSER_PASSWORD\n# must be set if AUTO_LOGIN is set to false\n# Values: true, false\nLANGFLOW_AUTO_LOGIN=\n\n# Superuser username\n# Example: LANGFLOW_SUPERUSER=admin\nLANGFLOW_SUPERUSER=\n\n# Superuser password\n# Example: LANGFLOW_SUPERUSER_PASSWORD=123456\nLANGFLOW_SUPERUSER_PASSWORD=\n\n# Should store environment variables in the database\n# Values: true, false\nLANGFLOW_STORE_ENVIRONMENT_VARIABLES=\n\n# STORE_URL\n# Example: LANGFLOW_STORE_URL=https://api.langflow.store\n# LANGFLOW_STORE_URL=\n\n# DOWNLOAD_WEBHOOK_URL\n#\n# LANGFLOW_DOWNLOAD_WEBHOOK_URL=\n\n# LIKE_WEBHOOK_URL\n#\n# LANGFLOW_LIKE_WEBHOOK_URL=\n\n# Value must finish with slash /\n#BACKEND_URL=http://localhost:7860/\nBACKEND_URL="
        },
        {
          "name": ".eslintrc.json",
          "type": "blob",
          "size": 1.99,
          "content": "{\n    \"extends\": [\n        \"eslint:recommended\",\n        \"plugin:react/recommended\",\n        \"plugin:prettier/recommended\"\n    ],\n    \"plugins\": [\n        \"react\",\n        \"import-helpers\",\n        \"prettier\"\n    ],\n    \"parser\": \"@typescript-eslint/parser\",\n    \"parserOptions\": {\n        \"project\": [\n            \"./tsconfig.node.json\",\n            \"./tsconfig.json\"\n        ],\n        \"extraFileExtensions:\": [\n            \".mdx\"\n        ],\n        \"extensions:\": [\n            \".mdx\"\n        ]\n    },\n    \"env\": {\n        \"browser\": true,\n        \"es2021\": true\n    },\n    \"settings\": {\n        \"react\": {\n            \"version\": \"detect\"\n        }\n    },\n    \"rules\": {\n        \"no-console\": \"warn\",\n        \"no-self-assign\": \"warn\",\n        \"no-self-compare\": \"warn\",\n        \"complexity\": [\n            \"error\",\n            {\n                \"max\": 15\n            }\n        ],\n        \"indent\": [\n            \"error\",\n            2,\n            {\n                \"SwitchCase\": 1\n            }\n        ],\n        \"no-dupe-keys\": \"error\",\n        \"no-invalid-regexp\": \"error\",\n        \"no-undef\": \"error\",\n        \"no-return-assign\": \"error\",\n        \"no-redeclare\": \"error\",\n        \"no-empty\": \"error\",\n        \"no-await-in-loop\": \"error\",\n        \"react/react-in-jsx-scope\": 0,\n        \"node/exports-style\": [\n            \"error\",\n            \"module.exports\"\n        ],\n        \"node/file-extension-in-import\": [\n            \"error\",\n            \"always\"\n        ],\n        \"node/prefer-global/buffer\": [\n            \"error\",\n            \"always\"\n        ],\n        \"node/prefer-global/console\": [\n            \"error\",\n            \"always\"\n        ],\n        \"node/prefer-global/process\": [\n            \"error\",\n            \"always\"\n        ],\n        \"node/prefer-global/url-search-params\": [\n            \"error\",\n            \"always\"\n        ],\n        \"node/prefer-global/url\": [\n            \"error\",\n            \"always\"\n        ],\n        \"node/prefer-promises/dns\": \"error\",\n        \"node/prefer-promises/fs\": \"error\"\n    }\n}\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.63,
          "content": "# Set the default behavior, in case people don't have core.autocrlf set.\n* text eol=lf\n\n# Explicitly declare text files you want to always be normalized and converted\n# to native line endings on checkout.\n*.c text\n*.h text\n*.py text\n*.js text\n*.jsx text\n*.ts text\n*.tsx text\n*.md text\n*.mdx text\n*.yml text\n*.yaml text\n*.xml text\n*.csv text\n*.json text\n*.sh text\n*.Dockerfile text\nDockerfile text\n\n# Declare files that will always have CRLF line endings on checkout.\n*.sln text eol=crlf\n\n# Denote all files that are truly binary and should not be modified.\n*.png binary\n*.jpg binary\n*.ico binary\n*.gif binary\n*.mp4 binary\n*.svg binary\n*.csv binary\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.85,
          "content": "# This is to avoid Opencommit hook from getting pushed\nprepare-commit-msg\n# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\nlerna-debug.log*\nqdrant_storage\n\n.dspy_cache\n# Mac\n.DS_Store\n\n# VSCode\n.vscode/settings.json\n.chroma\n.ruff_cache\n\n# PyCharm\n.idea/\n\n# Diagnostic reports (https://nodejs.org/api/report.html)\nreport.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n*.lcov\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Bower dependency directory (https://bower.io/)\nbower_components\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (https://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules/\njspm_packages/\n\n# TypeScript v1 declaration files\ntypings/\n\n# TypeScript cache\n*.tsbuildinfo\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Microbundle cache\n.rpt2_cache/\n.rts2_cache_cjs/\n.rts2_cache_es/\n.rts2_cache_umd/\n\n# Optional REPL history\n.node_repl_history\n\n# Output of 'npm pack'\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# dotenv environment variables file\n.env\n.env.test\n\n# parcel-bundler cache (https://parceljs.org/)\n.cache\n\n# Next.js build output\n.next\n\n# Nuxt.js build / generate output\n.nuxt\ndist\n\n# Gatsby files\n.cache/\n# Comment in the public line in if your project uses Gatsby and *not* Next.js\n# https://nextjs.org/blog/next-9-1#public-directory-support\n# public\n\n# vuepress build output\n.vuepress/dist\n\n# Serverless directories\n.serverless/\n\n# FuseBox cache\n.fusebox/\n\n# DynamoDB Local files\n.dynamodb/\n\n# TernJS port file\n.tern-port\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\nnotebooks\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\npip-wheel-metadata/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\n.testmondata*\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n*.db-shm\n*.db-wal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n.python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Poetry\n.testenv/*\nlangflow.db\n\n\n.githooks/prepare-commit-msg\n.langchain.db\n\n# docusaurus\n.docusaurus/\n\n/tmp/*\nsrc/backend/langflow/frontend/\nsrc/backend/base/langflow/frontend/\n.docker\nscratchpad*\nchroma*/*\nstuff/*\nsrc/frontend/playwright-report/index.html\n*.bak\nprof/*\n\nsrc/frontend/temp\n*-shm\n*-wal\n.history\n\n.dspy_cache/\n*.db\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.6,
          "content": "repos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.1.0\n    hooks:\n      - id: check-case-conflict\n      - id: end-of-file-fixer\n        # python, js and ts only\n        files: \\.(py|js|ts)$\n      - id: mixed-line-ending\n        files: \\.(py|js|ts)$\n        args:\n          - --fix=lf\n      - id: trailing-whitespace\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: v0.8.3\n    hooks:\n      - id: ruff\n        name: ruff check\n        types_or: [python, pyi]\n        args: [--fix]\n      - id: ruff-format\n        types_or: [python, pyi]\n        args: [--config, pyproject.toml]\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.1,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socioeconomic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n- Demonstrating empathy and kindness toward other people\n- Being respectful of differing opinions, viewpoints, and experiences\n- Giving and gracefully accepting constructive feedback\n- Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n- Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n- The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n- Trolling, insulting or derogatory comments, and personal or political attacks\n- Public or private harassment\n- Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n- Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\ncontact@langflow.org.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior, harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.56,
          "content": "# Contributing to Langflow\n\nThis guide is intended to help you get started contributing to Langflow.\nAs an open-source project in a rapidly developing field, we are extremely open\nto contributions, whether it be in the form of a new feature, improved infra, or better documentation.\n\nTo contribute to this project, please follow the [fork and pull request](https://docs.github.com/en/get-started/quickstart/contributing-to-projects) workflow.\n\n## Reporting bugs or suggesting improvements\n\nOur [GitHub issues](https://github.com/langflow-ai/langflow/issues) page is kept up to date\nwith bugs, improvements, and feature requests. There is a taxonomy of labels to help\nwith sorting and discovery of issues of interest. [See this page](https://github.com/langflow-ai/langflow/labels) for an overview of\nthe system we use to tag our issues and pull requests.\n\nIf you're looking for help with your code, consider posting a question on the\n[GitHub Discussions board](https://github.com/langflow-ai/langflow/discussions). Please\nunderstand that we won't be able to provide individual support via email. We\nalso believe that help is much more valuable if it's **shared publicly**,\nso that more people can benefit from it.\n\n- **Describing your issue:** Try to provide as many details as possible. What\n  exactly goes wrong? _How_ is it failing? Is there an error?\n  \"XY doesn't work\" usually isn't that helpful for tracking down problems. Always\n  remember to include the code you ran and if possible, extract only the relevant\n  parts and don't just dump your entire script. This will make it easier for us to\n  reproduce the error.\n\n- **Sharing long blocks of code or logs:** If you need to include long code,\n  logs or tracebacks, you can wrap them in `<details>` and `</details>`. This\n  [collapses the content](https://developer.mozilla.org/en/docs/Web/HTML/Element/details)\n  so it only becomes visible on click, making the issue easier to read and follow.\n\n## Contributing code and documentation\n\nYou can develop Langflow locally and contribute to the Project!\n\nSee [DEVELOPMENT.md](DEVELOPMENT.md) for instructions on setting up and using a development envrionment.\n\n## Opening a pull request\n\nOnce you wrote and manually tested your change, you can start sending the patch to the main repository.\n\n- Open a new GitHub pull request with the patch against the `main` branch.\n- Ensure the PR title follows semantic commits conventions.\n  - For example, `feat: add new feature`, `fix: correct issue with X`.\n- Ensure the PR description clearly describes the problem and solution. Include the relevant issue number if applicable.\n"
        },
        {
          "name": "DEVELOPMENT.md",
          "type": "blob",
          "size": 12.62,
          "content": "# Setting up a Development Environment\n\nThis document details how to set up a local development environment that will allow you to contribute changes to the project!\n\n## Base Requirements\n\n* The project is hosted on GitHub, so you need an account there (and if you are reading this, you likely do!)\n* An IDE such as Microsoft VS Code IDE https://code.visualstudio.com/\n\n## Set up Git Repository Fork\n\nYou will push changes to a fork of the Langflow repository, and from there create a Pull Request into the project repository.\n\nFork the [Langflow GitHub repository](https://github.com/langflow-ai/langflow/fork), and follow the instructions to create a new fork.\n\nOn your new fork, click the \"<> Code\" button to get a URL to [clone](https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository) using your preferred method, and clone the repostory; for example using `https`:\n\n```bash\ngit clone https://github.com/<your username>/langflow.git\n```\n\nFinally, add the Project repository as `upstream`:\n\n```bash\ncd langflow\ngit remote add upstream https://github.com/langflow-ai/langflow.git\ngit remote set-url --push upstream no_push\n```\n\n> [!TIP]\n> **Windows/WSL Users**: You may find that files \"change\", specifically the file mode e.g. \"changed file mode 100755 → 100644\". You can workaround this problem with `git config core.filemode false`.\n\n## Set up Environment\n\nThere are two options available to you: the 'easy' and recommended option is to use a Development Container (\"[Dev Container](https://containers.dev/)\"), or you can choose to use your own OS / environment.\n\n### Option 1 (Preferred): Use a Dev Container\n\nOpen this repository as a Dev Container per your IDEs instructions.\n\n#### Microsoft VS Code\n\n* See [Developing inside a Container](https://code.visualstudio.com/docs/devcontainers/containers)\n* You may also find it helpful to [share `git` credentials](https://code.visualstudio.com/remote/advancedcontainers/sharing-git-credentials) with the container\n\n\n### Option 2: Use Your Own Environment\n\nInstall Pre-Requisites:\n\n* **Operating System**: macOS or Linux; Windows users ***MUST*** develop under WSL.\n* **`git`**: The project uses the ubiquitous `git` tool for change control.\n* **`make`**: The project uses `make` to coordidinate packaging.\n* **`uv`**: This project uses `uv` (`>=0.4`), a Python package and project manager from Astral. Install instructions at https://docs.astral.sh/uv/getting-started/installation/.\n* **`npm`**: The frontend files are built with Node.js (`v22.12 LTS`) and `npm` (`v10.9`). Install instructions at https://nodejs.org/en/download/package-manager.\n  - Windows (WSL) users: ensure `npm` is installed within WSL environment; `which npm` should resolve to a Linux location, not a Windows location.\n\n### Initial Environment Validation\n\nSetup and validate the initial environment by running:\n\n```bash\nmake init\n```\n\nThis will set up the development environment by installing backend and frontend dependencies, building the frontend static files, and initializing the project. It runs `make install_backend`, `make install_frontend`, `make build_frontend`, and finally `uv run langflow run` to start the application.\n\nOnce the application is running, the command output should look similar to:\n\n```\n╭───────────────────────────────────────────────────────────────────╮\n│ Welcome to ⛓ Langflow                                             │\n│                                                                   │\n│                                                                   │\n│ Collaborate, and contribute at our GitHub Repo 🌟                 │\n│                                                                   │\n│ We collect anonymous usage data to improve Langflow.              │\n│ You can opt-out by setting DO_NOT_TRACK=true in your environment. │\n│                                                                   │\n│ Access http://127.0.0.1:7860                                      │\n╰───────────────────────────────────────────────────────────────────╯\n```\n\nAt this point, validate you can access the UI by opening the URL shown.\n\nThis is how the application would normally run: the (static) front-end pages are compiled, and then this \"frontend\" is served by the FastAPI server; the \"backend\" APIs are also serviced by the FastAPI server.\n\nHowever, as a developer,  you will want to proceed to the next step. Shutdown Langflow by hitting `Control (or Command)-C`.\n\n## Completing Development environment Setup\n\nThere are some other steps to consider before you are ready to begin development.\n\n### Optional pre-commit hooks\n\nPre-commit hooks will help keep your changes clean and well-formatted.\n\n> [!NOTE]\n> With these installed, the `git commit` command needs to run within the Python environment; your syntax needs to change to `uv run git commit`.\n\n Install pre-commit hooks by running the following commands:\n\n```bash\nuv sync --dev\nuv run pre-commit install\n```\n\n## Run Langflow in \"Development\" Mode\n\nWith the above validation, you can now run the backend (FastAPI) and frontend (Node) services in a way that will \"hot-reload\" your changes. In this mode, the FastAPI server requires a Node.js server to serve the frontend pages rather than serving them directly.\n\n> [!NOTE]\n> You will likely have multiple terminal sessions active in the normal development workflow. These will be annotated as *Backend Terminal*, *Frontend Terminal*, *Documentation Terminal*, and *Build Terminal*.\n\n### Debug Mode\n\nA debug configuration is provided for VS Code users: this can be launched from the Debug tab (the backend debug mode can be launched directly via the F5 key). You may prefer to start services in this mode. You may still want to read the following subsections to understand expected console output and service readiness.\n\n### Start the Backend Service\n\nThe backend service runs as a FastAPI service on Python, and is responsible for servicing API requests. In the *Backend Terminal*, start the backend service:\n\n```bash\nmake backend\n```\n\nYou will get output similar to:\n\n```\nINFO:     Will watch for changes in these directories: ['/home/phil/git/langflow']\nINFO:     Loading environment from '.env'\nINFO:     Uvicorn running on http://0.0.0.0:7860 (Press CTRL+C to quit)\nINFO:     Started reloader process [22330] using WatchFiles\nStarting Langflow ...\n```\n\nAt which point you can check http://localhost:7860/health in a browser; when the backend service is ready it will return a document like:\n\n```json\n{\"status\":\"ok\"}\n```\n\n### Start the Frontend Service\n\nThe frontend (User Interface) is, in shipped code (i.e. via `langflow run`), statically-compiled files that the backend FastAPI service provides to clients via port `7860`. In development mode, these are served by a Node.js service on port `3000`. In the *Frontend Terminal*, start the frontend service:\n\n```bash\nmake frontend\n```\n\nYou will get output similar to:\n\n```\n  VITE v5.4.11  ready in 552 ms\n\n  ➜  Local:   http://localhost:3000/\n  ➜  Network: use --host to expose\n  ➜  press h + enter to show help\n```\n\nAt this point, you can navigate to http://localhost:3000/ in a browser and access the Langflow User Interface.\n\n### Build and Display Documentation\n\nIf you are contributing changes to documentation (always welcome!), these are built (using [Docusaurus](https://docusaurus.io/)) and served separately, also using Node.js.\n\nIn the *Documentation Terminal* (from the project root directory), run the following:\n\n```bash\ncd docs\nnpm install\nnpm run start\n```\n\nIf the frontend service is running on port `3000` you might be prompted `Would you like to run the app on another port instead?`, in which case answer \"yes\". You will get output similar to:\n\n```\n[SUCCESS] Docusaurus website is running at: http://localhost:3001/\n```\n\nAt which point you can navigate to http://localhost:3001/ in a browser and view the documentation. Documentation updates will be visible as they are saved, though sometimes the browser page will also need to be refreshed.\n\n## Adding or Modifying a Component\n\nComponents reside in folders under `src/backend/base/langflow`, and their unit tests under `src/backend/base/tests/unit/components`. \n\n### Adding a Component\n\nAdd the component to the appropriate subdirectory, and add the component to the `__init__.py` file (alphabetical ordering on the `import` and the `__all__` list). Assuming the backend and frontend services are running, the backend service will restart as these files are changed. The new component will be visible after the backend is restarted, _*and*_ after you hit \"refresh\" in the browser. \n\n> [!TIP]\n> It is faster to copy-paste the component code from your editor into the UI *without* saving in the source code in the editor, and once you are satisfied it is working you can save (restarting the backend) and refresh the browser to confirm it is present.\n\nYou should try to add a unit test for your component, though templates and best practices for this is a work in progress. At the very least, please create a Markdown file in the unit test subdirectory associated with your component (create the directory if not present), with the same filename as the component but with a `.md` extension. Within this should be the steps you have taken to manually test the component.\n\n### Modifying a Component\n\nModifying a component is much the same as adding a component: it is generally easier to make changes in the UI and then save the file in the repository. Please be sure to review and modify unit tests; if there is not a unit test for the component, the addition of one that at least covers your changes would be much appreciated!\n\n> [!NOTE]\n> If you have an old version of the component on the canvas when changes are saved and the backend service restarts, that component should show \"Updates Available\" when the canvas is reloaded (i.e. a browser refresh). [Issue 5179](https://github.com/langflow-ai/langflow/issues/5179) indicates this behavior is not consistent, at least in a development setting.\n\n## Building and Testing Changes\n\nWhen you are ready to commit, and before you commit, you should consider the following:\n\n* `make lint`\n* `make format_backend` and `make format_frontend` will run code formatters on their respective codebases\n* `make unit_tests` runs the (backend) unit tests (see \"Quirks\" below for more about testing).\n\nOnce these changes are ready, it is helpful to rebase your changes on top of `upstream`'s `main` branch, to ensure you have the latest code version! Of course if you have had to merge changes into your component you may want to re-lint/format/unit_test.\n\nAs a final validation, stop the backend and frontend services and run `make init`; this will do a clean build and the UI should be available in port `7860` (as it has invoked `langflow run`). Open a **new** browser tab to this  service and do a final check of your changes by adding your new/modified component onto the canvas from the Components list.\n\n## Committing, Pushing, and Pull Requests\n\nOnce you are happy your changes are complete, commit them and push the changes to your own fork (this will be `origin` if you followed the above instructions). You can then raise a Pull Request into the Project repository on the GitHub interface or within your IDE.\n\n> [!TIP]\n> Remember that if you have pre-commit hooks enabled, you need to run the `git` command as `uv run git` to activate the necessary Python environment!\n\n## Some Quirks!\n\nYou may observe some quirky things: \n\n### Testing\n\n* Backend test `src/backend/tests/unit/test_database.py` can fail when running with `make tests` but passes when running manually\n  * You can validate this by running the test cases sequentially: `uv run pytest src/backend/tests/unit/test_database.py`\n* There are some other test targets: `integration_tests`, `coverage`, `tests_frontend` but these require additional setup not covered in this document.\n\n### Files That Change\n\nThere are some files that change without you having made changes:\n\n* Files in `src/backend/base/langflow/initial_setup/starter_projects` modify after `langflow run`; these are formatting changes. Feel free to commit (or ignore) them.\n* `uv.lock` and `src/frontend/package-lock.json` files can be modified by `make` targets; changes should not be committed by individual contributors.\n   * You can exclude these from consideration in git: `git update-index --assume-unchanged uv.lock src/frontend/package-lock.json`\n   * You can re-include these from consideration in git: `git update-index --no-assume-unchanged uv.lock src/frontend/package-lock.json`\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.04,
          "content": "MIT License\n\nCopyright (c) 2024 Langflow\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 13.51,
          "content": ".PHONY: all init format_backend format_frontend format lint build build_frontend install_frontend run_frontend run_backend dev help tests coverage clean_python_cache clean_npm_cache clean_all\n\n# Configurations\nVERSION=$(shell grep \"^version\" pyproject.toml | sed 's/.*\\\"\\(.*\\)\\\"$$/\\1/')\nDOCKERFILE=docker/build_and_push.Dockerfile\nDOCKERFILE_BACKEND=docker/build_and_push_backend.Dockerfile\nDOCKERFILE_FRONTEND=docker/frontend/build_and_push_frontend.Dockerfile\nDOCKER_COMPOSE=docker_example/docker-compose.yml\nPYTHON_REQUIRED=$(shell grep '^requires-python[[:space:]]*=' pyproject.toml | sed -n 's/.*\"\\([^\"]*\\)\".*/\\1/p')\nRED=\\033[0;31m\nNC=\\033[0m # No Color\nGREEN=\\033[0;32m\n\nlog_level ?= debug\nhost ?= 0.0.0.0\nport ?= 7860\nenv ?= .env\nopen_browser ?= true\npath = src/backend/base/langflow/frontend\nworkers ?= 1\nasync ?= true\nlf ?= false\nff ?= true\nall: help\n\n######################\n# UTILITIES\n######################\n\n# Some directories may be mount points as in devcontainer, so we need to clear their\n# contents rather than remove the entire directory. But we must also be mindful that\n# we are not running in a devcontainer, so need to ensure the directories exist.\n# See https://code.visualstudio.com/remote/advancedcontainers/improve-performance\nCLEAR_DIRS = $(foreach dir,$1,$(shell mkdir -p $(dir) && find $(dir) -mindepth 1 -delete))\n\n# increment the patch version of the current package\npatch: ## bump the version in langflow and langflow-base\n\t@echo 'Patching the version'\n\t@poetry version patch\n\t@echo 'Patching the version in langflow-base'\n\t@cd src/backend/base && poetry version patch\n\t@make lock\n\n# check for required tools\ncheck_tools:\n\t@command -v uv >/dev/null 2>&1 || { echo >&2 \"$(RED)uv is not installed. Aborting.$(NC)\"; exit 1; }\n\t@command -v npm >/dev/null 2>&1 || { echo >&2 \"$(RED)NPM is not installed. Aborting.$(NC)\"; exit 1; }\n\t@echo \"$(GREEN)All required tools are installed.$(NC)\"\n\n\nhelp: ## show this help message\n\t@echo '----'\n\t@grep -hE '^\\S+:.*##' $(MAKEFILE_LIST) | \\\n\tawk -F ':.*##' '{printf \"\\033[36mmake %s\\033[0m: %s\\n\", $$1, $$2}' | \\\n\tcolumn -c2 -t -s :\n\t@echo '----'\n\n######################\n# INSTALL PROJECT\n######################\n\nreinstall_backend: ## forces reinstall all dependencies (no caching)\n\t@echo 'Installing backend dependencies'\n\t@uv sync -n --reinstall --frozen\n\ninstall_backend: ## install the backend dependencies\n\t@echo 'Installing backend dependencies'\n\t@uv sync --frozen\n\ninstall_frontend: ## install the frontend dependencies\n\t@echo 'Installing frontend dependencies'\n\t@cd src/frontend && npm install > /dev/null 2>&1\n\nbuild_frontend: ## build the frontend static files\n\t@echo '==== Starting frontend build ===='\n\t@echo 'Current directory: $$(pwd)'\n\t@echo 'Checking if src/frontend exists...'\n\t@ls -la src/frontend || true\n\t@echo 'Building frontend static files...'\n\t@cd src/frontend && CI='' npm run build 2>&1 || { echo \"\\nBuild failed! Error output above ☝️\"; exit 1; }\n\t@echo 'Clearing destination directory...'\n\t$(call CLEAR_DIRS,src/backend/base/langflow/frontend)\n\t@echo 'Copying build files...'\n\t@cp -r src/frontend/build/. src/backend/base/langflow/frontend\n\t@echo '==== Frontend build complete ===='\n\ninit: check_tools clean_python_cache clean_npm_cache ## initialize the project\n\t@make install_backend\n\t@make install_frontend\n\t@make build_frontend\n\t@echo \"$(GREEN)All requirements are installed.$(NC)\"\n\t@uv run langflow run\n\n######################\n# CLEAN PROJECT\n######################\n\nclean_python_cache:\n\t@echo \"Cleaning Python cache...\"\n\tfind . -type d -name '__pycache__' -exec rm -r {} +\n\tfind . -type f -name '*.py[cod]' -exec rm -f {} +\n\tfind . -type f -name '*~' -exec rm -f {} +\n\tfind . -type f -name '.*~' -exec rm -f {} +\n\t$(call CLEAR_DIRS,.mypy_cache )\n\t@echo \"$(GREEN)Python cache cleaned.$(NC)\"\n\nclean_npm_cache:\n\t@echo \"Cleaning npm cache...\"\n\tcd src/frontend && npm cache clean --force\n\t$(call CLEAR_DIRS,src/frontend/node_modules src/frontend/build src/backend/base/langflow/frontend)\n\trm -f src/frontend/package-lock.json\n\t@echo \"$(GREEN)NPM cache and frontend directories cleaned.$(NC)\"\n\nclean_all: clean_python_cache clean_npm_cache # clean all caches and temporary directories\n\t@echo \"$(GREEN)All caches and temporary directories cleaned.$(NC)\"\n\nsetup_uv: ## install poetry using pipx\n\tpipx install uv\n\nadd:\n\t@echo 'Adding dependencies'\nifdef devel\n\t@cd src/backend/base && uv add --group dev $(devel)\nendif\n\nifdef main\n\t@uv add $(main)\nendif\n\nifdef base\n\t@cd src/backend/base && uv add $(base)\nendif\n\n\n\n######################\n# CODE TESTS\n######################\n\ncoverage: ## run the tests and generate a coverage report\n\t@uv run coverage run\n\t@uv run coverage erase\n\nunit_tests: ## run unit tests\n\t@uv sync --extra dev --frozen\n\t@EXTRA_ARGS=\"\"\n\t@if [ \"$(async)\" = \"true\" ]; then \\\n\t\tEXTRA_ARGS=\"$$EXTRA_ARGS --instafail -n auto\"; \\\n\tfi; \\\n\tif [ \"$(lf)\" = \"true\" ]; then \\\n\t\tEXTRA_ARGS=\"$$EXTRA_ARGS --lf\"; \\\n\tfi; \\\n\tif [ \"$(ff)\" = \"true\" ]; then \\\n\t\tEXTRA_ARGS=\"$$EXTRA_ARGS --ff\"; \\\n\tfi; \\\n\tuv run pytest src/backend/tests/unit \\\n\t--ignore=src/backend/tests/integration $$EXTRA_ARGS \\\n\t--instafail -ra -m 'not api_key_required' \\\n\t--durations-path src/backend/tests/.test_durations \\\n\t--splitting-algorithm least_duration $(args)\n\nunit_tests_looponfail:\n\t@make unit_tests args=\"-f\"\n\nintegration_tests:\n\tuv run pytest src/backend/tests/integration \\\n\t\t--instafail -ra \\\n\t\t$(args)\n\nintegration_tests_no_api_keys:\n\tuv run pytest src/backend/tests/integration \\\n\t\t--instafail -ra -m \"not api_key_required\" \\\n\t\t$(args)\n\nintegration_tests_api_keys:\n\tuv run pytest src/backend/tests/integration \\\n\t\t--instafail -ra -m \"api_key_required\" \\\n\t\t$(args)\n\ntests: ## run unit, integration, coverage tests\n\t@echo 'Running Unit Tests...'\n\tmake unit_tests\n\t@echo 'Running Integration Tests...'\n\tmake integration_tests\n\t@echo 'Running Coverage Tests...'\n\tmake coverage\n\n######################\n# CODE QUALITY\n######################\n\ncodespell: ## run codespell to check spelling\n\t@poetry install --with spelling\n\tpoetry run codespell --toml pyproject.toml\n\nfix_codespell: ## run codespell to fix spelling errors\n\t@poetry install --with spelling\n\tpoetry run codespell --toml pyproject.toml --write\n\nformat_backend: ## backend code formatters\n\t@uv run ruff check . --fix --ignore EXE002\n\t@uv run ruff format . --config pyproject.toml\n\nformat_frontend: ## frontend code formatters\n\t@cd src/frontend && npm run format\n\nformat: format_backend format_frontend ## run code formatters\n\nunsafe_fix:\n\t@uv run ruff check . --fix --unsafe-fixes\n\nlint: install_backend ## run linters\n\t@uv run mypy --namespace-packages -p \"langflow\"\n\ninstall_frontendci:\n\t@cd src/frontend && npm ci > /dev/null 2>&1\n\ninstall_frontendc:\n\t@cd src/frontend && $(call CLEAR_DIRS,node_modules) && rm -f package-lock.json && npm install > /dev/null 2>&1\n\nrun_frontend: ## run the frontend\n\t@-kill -9 `lsof -t -i:3000`\n\t@cd src/frontend && npm start $(if $(FRONTEND_START_FLAGS),-- $(FRONTEND_START_FLAGS))\n\ntests_frontend: ## run frontend tests\nifeq ($(UI), true)\n\t@cd src/frontend && npx playwright test --ui --project=chromium\nelse\n\t@cd src/frontend && npx playwright test --project=chromium\nendif\n\nrun_cli: install_frontend install_backend build_frontend ## run the CLI\n\t@echo 'Running the CLI'\n\t@uv run langflow run \\\n\t\t--frontend-path $(path) \\\n\t\t--log-level $(log_level) \\\n\t\t--host $(host) \\\n\t\t--port $(port) \\\n\t\t$(if $(env),--env-file $(env),) \\\n\t\t$(if $(filter false,$(open_browser)),--no-open-browser)\n\nrun_cli_debug:\n\t@echo 'Running the CLI in debug mode'\n\t@make install_frontend > /dev/null\n\t@echo 'Building the frontend'\n\t@make build_frontend > /dev/null\n\t@echo 'Install backend dependencies'\n\t@make install_backend > /dev/null\nifdef env\n\t@make start env=$(env) host=$(host) port=$(port) log_level=debug\nelse\n\t@make start host=$(host) port=$(port) log_level=debug\nendif\n\n\nsetup_devcontainer: ## set up the development container\n\tmake install_backend\n\tmake install_frontend\n\tmake build_frontend\n\tuv run langflow --frontend-path src/frontend/build\n\nsetup_env: ## set up the environment\n\t@sh ./scripts/setup/setup_env.sh\n\nfrontend: install_frontend ## run the frontend in development mode\n\tmake run_frontend\n\nfrontendc: install_frontendc\n\tmake run_frontend\n\n\nbackend: setup_env install_backend ## run the backend in development mode\n\t@-kill -9 $$(lsof -t -i:7860) || true\nifdef login\n\t@echo \"Running backend autologin is $(login)\";\n\tLANGFLOW_AUTO_LOGIN=$(login) uv run uvicorn \\\n\t\t--factory langflow.main:create_app \\\n\t\t--host 0.0.0.0 \\\n\t\t--port $(port) \\\n\t\t$(if $(filter-out 1,$(workers)),, --reload) \\\n\t\t--env-file $(env) \\\n\t\t--loop asyncio \\\n\t\t$(if $(workers),--workers $(workers),)\nelse\n\t@echo \"Running backend respecting the $(env) file\";\n\tuv run uvicorn \\\n\t\t--factory langflow.main:create_app \\\n\t\t--host 0.0.0.0 \\\n\t\t--port $(port) \\\n\t\t$(if $(filter-out 1,$(workers)),, --reload) \\\n\t\t--env-file $(env) \\\n\t\t--loop asyncio \\\n\t\t$(if $(workers),--workers $(workers),)\nendif\n\nbuild_and_run: setup_env ## build the project and run it\n\t$(call CLEAR_DIRS,dist src/backend/base/dist)\n\tmake build\n\tuv run pip install dist/*.tar.gz\n\tuv run langflow run\n\nbuild_and_install: ## build the project and install it\n\t@echo 'Removing dist folder'\n\t$(call CLEAR_DIRS,dist src/backend/base/dist)\n\tmake build && uv run pip install dist/*.whl && pip install src/backend/base/dist/*.whl --force-reinstall\n\nbuild: setup_env ## build the frontend static files and package the project\nifdef base\n\tmake install_frontendci\n\tmake build_frontend\n\tmake build_langflow_base args=\"$(args)\"\nendif\n\nifdef main\n\tmake install_frontendci\n\tmake build_frontend\n\tmake build_langflow_base args=\"$(args)\"\n\tmake build_langflow args=\"$(args)\"\nendif\n\nbuild_langflow_base:\n\tcd src/backend/base && uv build $(args)\n\nbuild_langflow_backup:\n\tuv lock && uv build\n\nbuild_langflow:\n\tuv lock --no-upgrade\n\tuv build $(args)\nifdef restore\n\tmv pyproject.toml.bak pyproject.toml\n\tmv uv.lock.bak uv.lock\nendif\n\n\ndocker_build: dockerfile_build clear_dockerimage ## build DockerFile\n\ndocker_build_backend: dockerfile_build_be clear_dockerimage ## build Backend DockerFile\n\ndocker_build_frontend: dockerfile_build_fe clear_dockerimage ## build Frontend Dockerfile\n\ndockerfile_build:\n\t@echo 'BUILDING DOCKER IMAGE: ${DOCKERFILE}'\n\t@docker build --rm \\\n\t\t-f ${DOCKERFILE} \\\n\t\t-t langflow:${VERSION} .\n\ndockerfile_build_be: dockerfile_build\n\t@echo 'BUILDING DOCKER IMAGE BACKEND: ${DOCKERFILE_BACKEND}'\n\t@docker build --rm \\\n\t\t--build-arg LANGFLOW_IMAGE=langflow:${VERSION} \\\n\t\t-f ${DOCKERFILE_BACKEND} \\\n\t\t-t langflow_backend:${VERSION} .\n\ndockerfile_build_fe: dockerfile_build\n\t@echo 'BUILDING DOCKER IMAGE FRONTEND: ${DOCKERFILE_FRONTEND}'\n\t@docker build --rm \\\n\t\t--build-arg LANGFLOW_IMAGE=langflow:${VERSION} \\\n\t\t-f ${DOCKERFILE_FRONTEND} \\\n\t\t-t langflow_frontend:${VERSION} .\n\nclear_dockerimage:\n\t@echo 'Clearing the docker build'\n\t@if docker images -f \"dangling=true\" -q | grep -q '.*'; then \\\n\t\tdocker rmi $$(docker images -f \"dangling=true\" -q); \\\n\tfi\n\ndocker_compose_up: docker_build docker_compose_down\n\t@echo 'Running docker compose up'\n\tdocker compose -f $(DOCKER_COMPOSE) up --remove-orphans\n\ndocker_compose_down:\n\t@echo 'Running docker compose down'\n\tdocker compose -f $(DOCKER_COMPOSE) down || true\n\ndcdev_up:\n\t@echo 'Running docker compose up'\n\tdocker compose -f docker/dev.docker-compose.yml down || true\n\tdocker compose -f docker/dev.docker-compose.yml up --remove-orphans\n\nlock_base:\n\tcd src/backend/base && uv lock\n\nlock_langflow:\n\tuv lock\n\nlock: ## lock dependencies\n\t@echo 'Locking dependencies'\n\tcd src/backend/base && uv lock\n\tuv lock\n\nupdate: ## update dependencies\n\t@echo 'Updating dependencies'\n\tcd src/backend/base && uv sync --upgrade\n\tuv sync --upgrade\n\npublish_base:\n\tcd src/backend/base && uv publish\n\npublish_langflow:\n\tuv publish\n\npublish_base_testpypi:\n\t# TODO: update this to use the test-pypi repository\n\tcd src/backend/base && uv publish -r test-pypi\n\npublish_langflow_testpypi:\n\t# TODO: update this to use the test-pypi repository\n\tuv publish -r test-pypi\n\npublish: ## build the frontend static files and package the project and publish it to PyPI\n\t@echo 'Publishing the project'\nifdef base\n\tmake publish_base\nendif\n\nifdef main\n\tmake publish_langflow\nendif\n\npublish_testpypi: ## build the frontend static files and package the project and publish it to PyPI\n\t@echo 'Publishing the project'\n\nifdef base\n\t#TODO: replace with uvx twine upload dist/*\n\tpoetry config repositories.test-pypi https://test.pypi.org/legacy/\n\tmake publish_base_testpypi\nendif\n\nifdef main\n\t#TODO: replace with uvx twine upload dist/*\n\tpoetry config repositories.test-pypi https://test.pypi.org/legacy/\n\tmake publish_langflow_testpypi\nendif\n\n\n# example make alembic-revision message=\"Add user table\"\nalembic-revision: ## generate a new migration\n\t@echo 'Generating a new Alembic revision'\n\tcd src/backend/base/langflow/ && uv run alembic revision --autogenerate -m \"$(message)\"\n\n\nalembic-upgrade: ## upgrade database to the latest version\n\t@echo 'Upgrading database to the latest version'\n\tcd src/backend/base/langflow/ && uv run alembic upgrade head\n\nalembic-downgrade: ## downgrade database by one version\n\t@echo 'Downgrading database by one version'\n\tcd src/backend/base/langflow/ && uv run alembic downgrade -1\n\nalembic-current: ## show current revision\n\t@echo 'Showing current Alembic revision'\n\tcd src/backend/base/langflow/ && uv run alembic current\n\nalembic-history: ## show migration history\n\t@echo 'Showing Alembic migration history'\n\tcd src/backend/base/langflow/ && uv run alembic history --verbose\n\nalembic-check: ## check migration status\n\t@echo 'Running alembic check'\n\tcd src/backend/base/langflow/ && uv run alembic check\n\nalembic-stamp: ## stamp the database with a specific revision\n\t@echo 'Stamping the database with revision $(revision)'\n\tcd src/backend/base/langflow/ && uv run alembic stamp $(revision)\n"
        },
        {
          "name": "README.ES.md",
          "type": "blob",
          "size": 10.1,
          "content": "# [![Langflow](./docs/static/img/hero.png)](https://www.langflow.org)\n\n<p align=\"center\"><strong>\n    Un Framework visual para crear aplicaciones de agentes autónomos y RAG\n</strong></p>\n<p align=\"center\" style=\"font-size: 12px;\">\n    De código abierto, construido en Python, totalmente personalizable, agnóstico en cuanto a modelos y bases de datos\n</p>\n\n<p align=\"center\" style=\"font-size: 12px;\">\n    <a href=\"https://docs.langflow.org\" style=\"text-decoration: underline;\">Documentación</a> -\n    <a href=\"https://discord.com/invite/EqksyE2EX9\" style=\"text-decoration: underline;\">Únete a nuestro Discord</a> -\n    <a href=\"https://twitter.com/langflow_ai\" style=\"text-decoration: underline;\">Síguenos en X</a> -\n    <a href=\"https://huggingface.co/spaces/Langflow/Langflow\" style=\"text-decoration: underline;\">Demostración</a>\n</p>\n\n<p align=\"center\">\n    <a href=\"https://github.com/langflow-ai/langflow\">\n        <img src=\"https://img.shields.io/github/stars/langflow-ai/langflow\">\n    </a>\n    <a href=\"https://discord.com/invite/EqksyE2EX9\">\n        <img src=\"https://img.shields.io/discord/1116803230643527710?label=Discord\">\n    </a>\n</p>\n\n<div align=\"center\">\n  <a href=\"./README.md\"><img alt=\"README en Inglés\" src=\"https://img.shields.io/badge/English-d9d9d9\"></a>\n  <a href=\"./README.PT.md\"><img alt=\"README en Portugués\" src=\"https://img.shields.io/badge/Português-d9d9d9\"></a>\n  <a href=\"./README.ES.md\"><img alt=\"README en Español\" src=\"https://img.shields.io/badge/Español-d9d9d9\"></a>\n  <a href=\"./README.zh_CN.md\"><img alt=\"README en Chino Simplificado\" src=\"https://img.shields.io/badge/简体中文-d9d9d9\"></a>\n  <a href=\"./README.ja.md\"><img alt=\"README en Japonés\" src=\"https://img.shields.io/badge/日本語-d9d9d9\"></a>\n  <a href=\"./README.KR.md\"><img alt=\"README en Coreano\" src=\"https://img.shields.io/badge/한국어-d9d9d9\"></a>\n  <a href=\"./README.FR.md\"><img alt=\"README en Francès\" src=\"https://img.shields.io/badge/Français-d9d9d9\"></a>\n</div>\n\n<p align=\"center\">\n  <img src=\"./docs/static/img/langflow_basic_howto.gif\" alt=\"Tu GIF\" style=\"border: 3px solid #211C43;\">\n</p>\n\n# 📝 Contenido\n\n- [📝 Contenido](#-contenido)\n- [📦 Introducción](#-introducción)\n- [🎨 Crear Flujos](#-crear-flujos)\n- [Despliegue](#despliegue)\n  - [Despliegue usando Google Cloud Platform](#despliegue-usando-google-cloud-platform)\n  - [Despliegue en Railway](#despliegue-en-railway)\n  - [Despliegue en Render](#despliegue-en-render)\n- [🖥️ Interfaz de Línea de Comandos (CLI)](#️-interfaz-de-línea-de-comandos-cli)\n  - [Uso](#uso)\n    - [Variables de Entorno](#variables-de-entorno)\n- [👋 Contribuir](#-contribuir)\n- [🌟 Contribuidores](#-contribuidores)\n- [📄 Licencia](#-licencia)\n\n# 📦 Introducción\n\nPuedes instalar Langflow con pip:\n\n```shell\n# Asegúrate de tener >=Python 3.10 instalado en tu sistema.\n# Instala la versión pre-release (recomendada para las actualizaciones más recientes)\npython -m pip install langflow --pre --force-reinstall\n\n# o versión estable\npython -m pip install langflow -U\n```\n\nLuego, ejecuta Langflow con:\n\n```shell\npython -m langflow run\n```\n\nTambién puedes ver Langflow en [HuggingFace Spaces](https://huggingface.co/spaces/Langflow/Langflow). [Clona el Space usando este enlace](https://huggingface.co/spaces/Langflow/Langflow?duplicate=true) para crear tu propio espacio de trabajo de Langflow en minutos.\n\n# 🎨 Crear Flujos\n\nCrear flujos con Langflow es fácil. Simplemente arrastra los componentes desde la barra lateral al espacio de trabajo y conéctalos para comenzar a construir tu aplicación.\n\nExplora editando los parámetros del prompt, agrupando componentes y construyendo tus propios componentes personalizados (Custom Components).\n\nCuando hayas terminado, puedes exportar tu flujo como un archivo JSON.\n\nCarga el flujo con:\n\n```python\nfrom langflow.load import run_flow_from_json\n\nresults = run_flow_from_json(\"ruta/al/flujo.json\", input_value=\"¡Hola, Mundo!\")\n```\n\n# Despliegue\n\n## Despliegue usando Google Cloud Platform\n\nSigue nuestra guía paso a paso para desplegar Langflow en Google Cloud Platform (GCP) usando Google Cloud Shell. La guía está disponible en el documento [**Langflow en Google Cloud Platform**](https://github.com/langflow-ai/langflow/blob/dev/docs/docs/deployment/gcp-deployment.md).\n\nAlternativamente, haz clic en el botón **\"Abrir en Cloud Shell\"** a continuación para iniciar Google Cloud Shell, clonar el repositorio de Langflow y comenzar un **tutorial interactivo** que te guiará a través del proceso de configuración de los recursos necesarios y despliegue de Langflow en tu proyecto GCP.\n\n[![Abrir en Cloud Shell](https://gstatic.com/cloudssh/images/open-btn.svg)](https://console.cloud.google.com/cloudshell/open?git_repo=https://github.com/langflow-ai/langflow&working_dir=scripts/gcp&shellonly=true&tutorial=walkthroughtutorial_spot.md)\n\n## Despliegue en Railway\n\nUsa esta plantilla para desplegar Langflow 1.0 Preview en Railway:\n\n[![Desplegar 1.0 Preview en Railway](https://railway.app/button.svg)](https://railway.app/template/UsJ1uB?referralCode=MnPSdg)\n\nO esta para desplegar Langflow 0.6.x:\n\n[![Desplegar en Railway](https://railway.app/button.svg)](https://railway.app/template/JMXEWp?referralCode=MnPSdg)\n\n## Despliegue en Render\n\n<a href=\"https://render.com/deploy?repo=https://github.com/langflow-ai/langflow/tree/dev\">\n<img src=\"https://render.com/images/deploy-to-render-button.svg\" alt=\"Desplegar en Render\" />\n</a>\n\n# 🖥️ Interfaz de Línea de Comandos (CLI)\n\nLangflow proporciona una interfaz de línea de comandos (CLI) para una fácil gestión y configuración.\n\n## Uso\n\nPuedes ejecutar Langflow usando el siguiente comando:\n\n```shell\nlangflow run [OPCIONES]\n```\n\nCada opción se detalla a continuación:\n\n- `--help`: Muestra todas las opciones disponibles.\n- `--host`: Establece el host al que vincular el servidor. Se puede configurar usando la variable de entorno `LANGFLOW_HOST`. El valor predeterminado es `127.0.0.1`.\n- `--workers`: Establece el número de procesos. Se puede configurar usando la variable de entorno `LANGFLOW_WORKERS`. El valor predeterminado es `1`.\n- `--worker-timeout`: Establece el tiempo de espera del worker en segundos. El valor predeterminado es `60`.\n- `--port`: Establece el puerto en el que escuchar. Se puede configurar usando la variable de entorno `LANGFLOW_PORT`. El valor predeterminado es `7860`.\n- `--env-file`: Especifica la ruta al archivo .env que contiene variables de entorno. El valor predeterminado es `.env`.\n- `--log-level`: Establece el nivel de registro. Se puede configurar usando la variable de entorno `LANGFLOW_LOG_LEVEL`. El valor predeterminado es `critical`.\n- `--components-path`: Especifica la ruta al directorio que contiene componentes personalizados. Se puede configurar usando la variable de entorno `LANGFLOW_COMPONENTS_PATH`. El valor predeterminado es `langflow/components`.\n- `--log-file`: Especifica la ruta al archivo de registro. Se puede configurar usando la variable de entorno `LANGFLOW_LOG_FILE`. El valor predeterminado es `logs/langflow.log`.\n- `--cache`: Selecciona el tipo de caché a utilizar. Las opciones son `InMemoryCache` y `SQLiteCache`. Se puede configurar usando la variable de entorno `LANGFLOW_LANGCHAIN_CACHE`. El valor predeterminado es `SQLiteCache`.\n- `--dev/--no-dev`: Alterna el modo de desarrollo. El valor predeterminado es `no-dev`.\n- `--path`: Especifica la ruta al directorio frontend que contiene los archivos de compilación. Esta opción es solo para fines de desarrollo. Se puede configurar usando la variable de entorno `LANGFLOW_FRONTEND_PATH`.\n- `--open-browser/--no-open-browser`: Alterna la opción de abrir el navegador después de iniciar el servidor. Se puede configurar usando la variable de entorno `LANGFLOW_OPEN_BROWSER`. El valor predeterminado es `open-browser`.\n- `--remove-api-keys/--no-remove-api-keys`: Alterna la opción de eliminar las claves API de los proyectos guardados en la base de datos. Se puede configurar usando la variable de entorno `LANGFLOW_REMOVE_API_KEYS`. El valor predeterminado es `no-remove-api-keys`.\n- `--install-completion [bash|zsh|fish|powershell|pwsh]`: Instala la función de autocompletar para el shell especificado.\n- `--show-completion [bash|zsh|fish|powershell|pwsh]`: Muestra el código para la función de autocompletar para el shell especificado, permitiéndote copiar o personalizar la instalación.\n- `--backend-only`: Este parámetro, con valor predeterminado `False`, permite ejecutar solo el servidor backend sin el frontend. También se puede configurar usando la variable de entorno `LANGFLOW_BACKEND_ONLY`.\n- `--store`: Este parámetro, con valor predeterminado `True`, activa las funciones de la tienda, usa `--no-store` para desactivarlas. Se puede configurar usando la variable de entorno `LANGFLOW_STORE`.\n\nEstos parámetros son importantes para los usuarios que necesitan personalizar el comportamiento de Langflow, especialmente en escenarios de desarrollo o despliegue especializado.\n\n### Variables de Entorno\n\nPuedes configurar muchas de las opciones de CLI usando variables de entorno. Estas se pueden exportar en tu sistema operativo o agregar a un archivo `.env` y cargarse usando la opción `--env-file`.\n\nSe incluye un archivo de ejemplo `.env` llamado `.env.example` en el proyecto. Copia este archivo a un nuevo archivo llamado `.env` y reemplaza los valores de ejemplo con tus configuraciones reales. Si estás estableciendo valores tanto en tu sistema operativo como en el archivo `.env`, las configuraciones del `.env` tendrán prioridad.\n\n# 👋 Contribuir\n\nAceptamos contribuciones de desarrolladores de todos los niveles para nuestro proyecto de código abierto en GitHub. Si deseas contribuir, por favor, consulta nuestras [directrices de contribución](./CONTRIBUTING.md) y ayuda a hacer que Langflow sea más accesible.\n\n---\n\n[![Historial de Estrellas](https://api.star-history.com/svg?repos=langflow-ai/langflow&type=Timeline)](https://star-history.com/#langflow-ai/langflow&Date)\n\n# 🌟 Contribuidores\n\n[![contribuidores de langflow](https://contrib.rocks/image?repo=langflow-ai/langflow)](https://github.com/langflow-ai/langflow/graphs/contributors)\n\n# 📄 Licencia\n\nLangflow se publica bajo la licencia MIT. Consulta el archivo [LICENSE](LICENSE) para más detalles.\n"
        },
        {
          "name": "README.FR.md",
          "type": "blob",
          "size": 4.29,
          "content": "> [!WARNING]\n> Tout les liens externes sont susceptibles d'être en anglais.\n\n![Langflow](./docs/static/img/hero.png)\n\n<p align=\"center\" style=\"font-size: 12px;\">\n    Langflow est un générateur d'applications low-code pour les applications RAG et IA multi-agents. Il est basé sur Python et indépendant de tout modèle, API ou base de données.\n</p>\n\n<p align=\"center\" style=\"font-size: 12px;\">\n    <a href=\"https://docs.langflow.org\" style=\"text-decoration: underline;\">Documentation</a> -\n    <a href=\"https://astra.datastax.com/signup?type=langflow\" style=\"text-decoration: underline;\">Service cloud gratuit</a> -\n    <a href=\"https://docs.langflow.org/get-started-installation\" style=\"text-decoration: underline;\">Autogéré</a>\n</p>\n\n<div align=\"center\">\n  <a href=\"./README.md\"><img alt=\"README en Anglais\" src=\"https://img.shields.io/badge/English-d9d9d9\"></a>\n  <a href=\"./README.PT.md\"><img alt=\"README en Portuguais\" src=\"https://img.shields.io/badge/Portuguese-d9d9d9\"></a>\n  <a href=\"./README.ES.md\"><img alt=\"README en Espagnol\" src=\"https://img.shields.io/badge/Spanish-d9d9d9\"></a>\n  <a href=\"./README.zh_CN.md\"><img alt=\"README en Chinois Simplifié\" src=\"https://img.shields.io/badge/简体中文-d9d9d9\"></a>\n  <a href=\"./README.ja.md\"><img alt=\"README en Japonais\" src=\"https://img.shields.io/badge/日本語-d9d9d9\"></a>\n  <a href=\"./README.KR.md\"><img alt=\"README en Coréen\" src=\"https://img.shields.io/badge/한국어-d9d9d9\"></a>\n  <a href=\"./README.FR.md\"><img alt=\"README en Français\" src=\"https://img.shields.io/badge/Français-d9d9d9\"></a>\n</div>\n\n## ✨ Caractéristiques principales\n\n1. **Basé sur Python** et indépendant des modèles, API, sources de données ou bases de données.\n2. **IDE visuel** pour la création et le test de flux de travail par glisser-déposer.\n3. **Playground** pour tester et itérer immédiatement les flux de travail avec un contrôle étape par étape.\n4. **Orchestration multi-agent** et gestion et récupération des conversations.\n5. **Service cloud gratuit** pour démarrer en quelques minutes sans configuration.\n6. **Publier en tant qu'API** ou exporter en tant qu'application Python.\n7. **Observabilité** avec l'intégration de LangSmith, LangFuse ou LangWatch.\n8. **Sécurité et évolutivité de niveau entreprise** avec le service cloud gratuit DataStax Langflow.\n9. **Personnalisez les flux de travail** ou créez des flux entièrement à l'aide de Python.\n10. **Intégrations d'écosystèmes** en tant que composants réutilisables pour tout modèle, API ou base de données.\n\n![Intégrations](./docs/static/img/integrations.png)\n\n## 📦 Démarrage\n\n- **Installer avec pip** (Python 3.10 à 3.12):\n\n```shell\npip install langflow\n```\n\n- **Installer avec uv** (Python 3.10 à 3.12):\n\n```shell\nuv pip install langflow\n```\n\n- **Cloud :** DataStax Langflow est un environnement hébergé sans configuration. [Inscrivez-vous pour un compte gratuit.](https://astra.datastax.com/signup?type=langflow)\n- **Autogéré :** exécutez Langflow dans votre environnement. [Installez Langflow](https://docs.langflow.org/get-started-installation) pour exécuter un serveur Langflow local, puis utilisez le guide [Démarrage rapide](https://docs.langflow.org/get-started-quickstart) pour créer et exécuter un flux.\n- **Hugging Face :** [Clonez l'espace à l'aide de ce lien](https://huggingface.co/spaces/Langflow/Langflow?duplicate=true) pour créer un espace de travail Langflow.\n\n[![Getting Started](https://github.com/user-attachments/assets/f1adfbe7-3c35-43a4-b265-661f3d4f875f)](https://www.youtube.com/watch?v=kinngWhaUKM)\n\n## ⭐ Restez à jour\n\nAjoute une étoile à Langflow sur GitHub pour être instantanément informé des nouvelles versions.\n\n![Star Langflow](https://github.com/user-attachments/assets/03168b17-a11d-4b2a-b0f7-c1cce69e5a2c)\n\n## 👋 Contribuer\n\nNous acceptons les contributions des développeurs de tous niveaux. Si vous souhaitez contribuer, veuillez consulter nos [consignes de contribution](./CONTRIBUTING.md) et contribuez à rendre Langflow plus accessible.\n\n---\n\n[![Star History Chart](https://api.star-history.com/svg?repos=langflow-ai/langflow&type=Timeline)](https://star-history.com/#langflow-ai/langflow&Date)\n\n## ❤️ Contributeurs\n\n[![Langflow contributors](https://contrib.rocks/image?repo=langflow-ai/langflow)](https://github.com/langflow-ai/langflow/graphs/contributors)\n"
        },
        {
          "name": "README.KR.md",
          "type": "blob",
          "size": 11.48,
          "content": "<div align=\"center\" style=\"padding: 10px; border: 1px solid #ccc; background-color: #f9f9f9; border-radius: 10px; margin-bottom: 20px;\">\n    <h2 style=\"margin: 0; font-size: 24px; color: #333;\">Langflow 1.0 이 출시되었습니다! 🎉</h2>\n    <p style=\"margin: 5px 0 0 0; font-size: 16px; color: #666;\"><a href=\"https://medium.com/p/73d3bdce8440\" style=\"text-decoration: underline; color: #1a73e8;\">여기</a>를 눌러 자세히 알아보기!</p>\n</div>\n\n<!-- markdownlint-disable MD030 -->\n\n# [![Langflow](./docs/static/img/hero.png)](https://www.langflow.org)\n\n<p align=\"center\"><strong>\n    다중 에이전트 및 RAG 애플리케이션 구축을 위한 시각적 프레임워크\n</strong></p>\n<p align=\"center\" style=\"font-size: 12px;\">\n    오픈소스, Python-기반, 전체 커스텀, LLM과 Vector store를 몰라도 사용 가능\n</p>\n\n<p align=\"center\" style=\"font-size: 12px;\">\n    <a href=\"https://docs.langflow.org\" style=\"text-decoration: underline;\">문서</a> -\n    <a href=\"https://discord.com/invite/EqksyE2EX9\" style=\"text-decoration: underline;\">Discord에 참여하기</a> -\n    <a href=\"https://twitter.com/langflow_ai\" style=\"text-decoration: underline;\">X에서 팔로우하기</a> -\n    <a href=\"https://huggingface.co/spaces/Langflow/Langflow\" style=\"text-decoration: underline;\">실시간 데모</a>\n</p>\n\n<p align=\"center\">\n    <a href=\"https://github.com/langflow-ai/langflow\">\n        <img src=\"https://img.shields.io/github/stars/langflow-ai/langflow\">\n    </a>\n    <a href=\"https://discord.com/invite/EqksyE2EX9\">\n        <img src=\"https://img.shields.io/discord/1116803230643527710?label=Discord\">\n    </a>\n</p>\n\n<div align=\"center\">\n  <a href=\"./README.md\"><img alt=\"README in English\" src=\"https://img.shields.io/badge/English-d9d9d9\"></a>\n  <a href=\"./README.PT.md\"><img alt=\"README in Portuguese\" src=\"https://img.shields.io/badge/Portuguese-d9d9d9\"></a>\n  <a href=\"./README.ES.md\"><img alt=\"README in Spanish\" src=\"https://img.shields.io/badge/Spanish-d9d9d9\"></a>\n  <a href=\"./README.zh_CN.md\"><img alt=\"README in Simplified Chinese\" src=\"https://img.shields.io/badge/简体中文-d9d9d9\"></a>\n  <a href=\"./README.ja.md\"><img alt=\"README in Japanese\" src=\"https://img.shields.io/badge/日本語-d9d9d9\"></a>\n  <a href=\"./README.KR.md\"><img alt=\"README in KOREAN\" src=\"https://img.shields.io/badge/한국어-d9d9d9\"></a>\n  <a href=\"./README.FR.md\"><img alt=\"README in French\" src=\"https://img.shields.io/badge/Français-d9d9d9\"></a>\n</div>\n\n<p align=\"center\">\n  <img src=\"./docs/static/img/langflow_basic_howto.gif\" alt=\"Your GIF\" style=\"border: 3px solid #211C43;\">\n</p>\n\n# 📝 목차\n\n- [📝 목차](#-content)\n- [📦 시작하기](#-get-started)\n- [🎨 플로우 만들기](#-create-flows)\n- [배포](#deploy)\n  - [DataStax Langflow](#datastax-langflow)\n  - [Hugging Face Spaces에 Langflow 배포하기](#deploy-langflow-on-hugging-face-spaces)\n  - [Google Cloud Platform에 Langflow 배포하기](#deploy-langflow-on-google-cloud-platform)\n  - [Railway에 배포하기](#deploy-on-railway)\n  - [Render에 배포하기](#deploy-on-render)\n  - [Kubernetes에 배포하기](#deploy-on-kubernetes)\n- [🖥️ 명령줄 인터페이스 (CLI)](#️-command-line-interface-cli)\n  - [사용법](#usage)\n    - [환경 변수](#environment-variables)\n- [👋 기여](#-contribute)\n- [🌟 기여자](#-contributors)\n- [📄 라이선스](#-license)\n\n# 📦 시작하기\n\npip으로 Langflow 다운로드:\n\n```shell\n# >=Python 3.10 이 시스템에 미리 설치되어 있어야 합니다.\npython -m pip install langflow -U\n```\n\n혹은\n\n복제된 Repo에서 설치하려면 다음과 같이 Langflow의 프론트엔드와 백엔드를 구축하고 설치할 수 있습니다:\n\n```shell\nmake install_frontend && make build_frontend && make install_backend\n```\n\nLangflow 실행하기:\n\n```shell\npython -m langflow run\n```\n\n# 🎨 플로우 만들기\n\n플로우(Flow)는 전체적인 작업의 `흐름`을 표현하는것으로, 별도의 코딩작업을 최소화 하고, 시각적으로 수정/확인이 가능한 일련의 그룹을 말합니다.\n\nLangflow를 사용하여 플로우를 만드는 것은 쉽습니다. 사이드바의 구성 요소를 작업 공간으로 끌어다가 연결하기만 하면 응용 프로그램을 구축할 수 있습니다.\n\n프롬프트 매개 변수를 편집하고 구성 요소를 하나의 상위 수준 구성 요소로 그룹화하고 사용자 정의 구성 요소를 구축하여 탐색합니다.\n\n작업이 완료되면 플로우를 JSON 파일로 내보낼 수 있습니다.\n\n플로우 로드하기:\n\n```python\nfrom langflow.load import run_flow_from_json\n\nresults = run_flow_from_json(\"path/to/flow.json\", input_value=\"Hello, World!\")\n```\n\n# 배포\n\n## DataStax Langflow\n\nDataStax Langflow는 [AstraDB](https://www.datastax.com/products/datastax-astra) 와 통합된 Langflow의 호스팅된 버전입니다. 별도의 설치나 설정이 필요하지 않고 몇 분 안에 실행됩니다. [무료로 가입하기](https://astra.datastax.com/signup?type=langflow).\n\n## Hugging Face Spaces에 Langflow 배포하기\n\n[Hugging Face Spaces](https://huggingface.co/spaces/Langflow/Langflow) 에서 Langflow를 미리 볼 수 있습니다. [space 복제하기](https://huggingface.co/spaces/Langflow/Langflow?duplicate=true) 에서 몇 분 안에 자신만의 Langflow 작업 공간을 만들 수 있습니다.\n\n## Google Cloud Platform에 Langflow 배포하기\n\nGoogle Cloud Shell을 사용하여 Google Cloud Platform(GCP)에 Langflow를 배포하려면 단계별 가이드를 따르십시오. 가이드는 [**Langflow in Google Cloud Platform**](/docs/docs/Deployment/deployment-gcp.md) 문서에서 확인할 수 있습니다.\n\n또는 아래의 **\"Cloud Shell에서 열기\"** 버튼을 클릭하여 Google Cloud Shell을 시작하고 Langflow 저장소를 복제한 후 필요한 리소스를 설정하고 GCP 프로젝트에 Langflow를 배포하는 과정을 안내하는 **대화형 튜토리얼**을 시작합니다.\n\n[![Cloud Shell에서 열기](https://gstatic.com/cloudssh/images/open-btn.svg)](https://console.cloud.google.com/cloudshell/open?git_repo=https://github.com/langflow-ai/langflow&working_dir=scripts/gcp&shellonly=true&tutorial=walkthroughtutorial_spot.md)\n\n## Railway에 배포하기\n\n이 템플릿을 사용하여 Railway에 Langflow 1.0을 배포합니다:\n\n[![Railway에 배포하기](https://railway.app/button.svg)](https://railway.app/template/JMXEWp?referralCode=MnPSdg)\n\n## Render에 배포하기\n\n<a href=\"https://render.com/deploy?repo=https://github.com/langflow-ai/langflow/tree/main\">\n<img src=\"https://render.com/images/deploy-to-render-button.svg\" alt=\"Render에 배포하기\" />\n</a>\n\n## Kubernetes에 배포하기\n\n[Langflow on Kubernetes](./docs/docs/Deployment/deployment-kubernetes.md)의 가이드를 따르세요.\n\n# 🖥️ 명령줄 인터페이스 (CLI)\n\nLangflow는 쉬운 관리 및 구성을 위한 명령줄 인터페이스(CLI)를 제공합니다.\n\n## 사용법\n\n다음 명령을 사용하여 Langflow를 실행할 수 있습니다:\n\n```shell\nlangflow run [OPTIONS]\n```\n\n각 옵션의 자세한 내용은 아래와 같습니다:\n\n- `--help`: 사용 가능한 모든 옵션을 표시합니다.\n- `--host`: 서버를 바인딩할 호스트를 정의합니다. `LANGFLOW_HOST` 환경 변수를 사용하여 설정할 수 있습니다. 기본 값은 `127.0.0.1`입니다.\n- `--workers`: 작업자 프로세스 수를 설정합니다. `LANGFLOW_WORKERS` 환경 변수를 사용하여 설정할 수 있습니다. 기본 값은 `1`입니다.\n- `--worker-timeout`: 작업자 시간 제한을 초 단위로 설정합니다. 기본 값은 `60`입니다.\n- `--port`: 수신할 포트를 설정합니다. `LANGFLOW_PORT` 환경 변수를 사용하여 설정할 수 있습니다. 기본 값은 `7860`입니다.\n- `--env-file`: 환경 변수가 포함된 .env 파일의 경로를 지정합니다. 기본 값은 `.env`입니다.\n- `--log-level`: 로깅 수준을 정의합니다. `LANGFLOW_LOG_LEVEL` 환경 변수를 사용하여 설정할 수 있습니다. 기본 값은 `critical`입니다.\n- `--components-path`: 사용자 지정 구성 요소가 포함된 디렉토리 경로를 지정합니다. `LANGFLOW_COMPONENTS_PATH` 환경 변수를 사용하여 설정할 수 있습니다. 기본 값은 `langflow/components`입니다.\n- `--log-file`: 로그 파일 경로를 지정합니다. `LANGFLOW_LOG_FILE` 환경 변수를 사용하여 설정할 수 있습니다. 기본 값은 `logs/langflow.log`입니다.\n- `--cache`: 사용할 캐시 유형을 선택합니다. 옵션은 `InMemoryCache` 와 `SQLiteCache`입니다. `LANGFLOW_LANGCHAIN_CACHE` 환경 변수를 사용하여 설정할 수 있습니다. 기본 값은 `SQLiteCache`입니다.\n- `--dev/--no-dev`: 개발 모드를 전환합니다. 기본 값은 `no-dev`입니다.\n- `--path`: 빌드 파일이 포함된 프런트엔드 디렉토리 경로를 지정합니다. 이 옵션은 개발 목적으로만 사용됩니다. `LANGFLOW_FRONTEND_PATH` 환경 변수를 사용하여 설정할 수 있습니다.\n- `--open-browser/--no-open-browser`: 서버를 시작한 후 브라우저를 여는 옵션을 토글합니다. `LANGFLOW_OPEN_BROWSER` 환경 변수를 사용하여 설정할 수 있습니다. 기본 값은 `open-browser`입니다.\n- `--remove-api-keys/--no-remove-api-keys`: 데이터베이스에 저장된 프로젝트에서 API 키를 제거하는 옵션을 토글합니다. `LANGFLOW_REMOVE_API_KEYS` 환경 변수를 사용하여 설정할 수 있습니다. 기본 값은 `no-remove-api-keys`입니다.\n- `--install-completion [bash|zsh|fish|powershell|pwsh]`: 지정된 셸에 대해 설치합니다.\n- `--show-completion [bash|zsh|fish|powershell|pwsh]`: 지정된 셸의 완료를 표시하여 셸을 복사하거나 설치를 사용자 정의할 수 있습니다.\n- `--backend-only`: 이 파라미터는 기본 값이 `False`이며, 프론트엔드 없이 백엔드 서버만 실행할 수 있도록 합니다. `LANGFLOW_BACKEND_ONLY` 환경 변수를 사용하여 설정할 수 있습니다.\n- `--store`: 이 파라미터는 기본 값이 `True`이며, 스토어 기능을 활성화하고, `--no-store`를 사용하여 비활성화할 수 있습니다. `LANGFLOW_STORE` 환경 변수를 사용하여 설정할 수 있습니다.\n\nThese parameters are important for users who need to customize the behavior of Langflow, especially in development or specialized deployment scenarios.\n\n### 환경 변수\n\n환경 변수를 사용하여 많은 CLI 옵션을 구성할 수 있습니다. 이러한 옵션은 운영 체제에서 내보내거나 `.env` 파일에 추가 하고 `--env-file` 옵션을 사용하여 로드할 수 있습니다.\n\n예제 `.env` 파일은 `.env.example` 프로젝트에 포함되어 있습니다. 이 파일을 복사하고 `.env` 파일로 이름을 바꾸어 실제 설정을 바꾸세요. OS와 `.env` 파일 모두에서 값을 설정하는 경우, `.env` 파일 설정이 우선시 됩니다.\n\n# 👋 기여\n\n모든 레벨의 개발자가 GitHub의 오픈소스 프로젝트에 기여하는 것을 환영합니다. 기여하고 싶으시다면 [기여 지침](./CONTRIBUTING.md)을 확인 하고 Langflow를 더 접근하기 쉽게 만드는 데 도움을 주세요.\n\n---\n\n[![Star History Chart](https://api.star-history.com/svg?repos=langflow-ai/langflow&type=Timeline)](https://star-history.com/#langflow-ai/langflow&Date)\n\n# 🌟 기여자\n\n[![langflow contributors](https://contrib.rocks/image?repo=langflow-ai/langflow)](https://github.com/langflow-ai/langflow/graphs/contributors)\n\n# 📄 라이선스\n\nLangflow는 MIT 라이선스에 따라 출시됩니다. 자세한 내용은 [라이선스](LICENSE) 파일을 확인하세요.\n"
        },
        {
          "name": "README.PT.md",
          "type": "blob",
          "size": 9.75,
          "content": "<!-- markdownlint-disable MD030 -->\n\n# [![Langflow](./docs/static/img/hero.png)](https://www.langflow.org)\n\n<p align=\"center\"><strong>\n    Um framework visual para criar apps de agentes autônomos e RAG\n</strong></p>\n<p align=\"center\" style=\"font-size: 12px;\">\n    Open-source, construído em Python, totalmente personalizável, agnóstico em relação a modelos e databases\n</p>\n\n<p align=\"center\" style=\"font-size: 12px;\">\n    <a href=\"https://docs.langflow.org\" style=\"text-decoration: underline;\">Docs</a> -\n    <a href=\"https://discord.com/invite/EqksyE2EX9\" style=\"text-decoration: underline;\">Junte-se ao nosso Discord</a> -\n    <a href=\"https://twitter.com/langflow_ai\" style=\"text-decoration: underline;\">Siga-nos no X</a> -\n    <a href=\"https://huggingface.co/spaces/Langflow/Langflow\" style=\"text-decoration: underline;\">Demonstração</a>\n</p>\n\n<p align=\"center\">\n    <a href=\"https://github.com/langflow-ai/langflow\">\n        <img src=\"https://img.shields.io/github/stars/langflow-ai/langflow\">\n    </a>\n    <a href=\"https://discord.com/invite/EqksyE2EX9\">\n        <img src=\"https://img.shields.io/discord/1116803230643527710?label=Discord\">\n    </a>\n</p>\n\n<div align=\"center\">\n  <a href=\"./README.md\"><img alt=\"README em Inglês\" src=\"https://img.shields.io/badge/English-d9d9d9\"></a>\n  <a href=\"./README.PT.md\"><img alt=\"README em Português\" src=\"https://img.shields.io/badge/Português-d9d9d9\"></a>\n  <a href=\"./README.ES.md\"><img alt=\"README em Espanhol\" src=\"https://img.shields.io/badge/Espanhol-d9d9d9\"></a>\n  <a href=\"./README.zh_CN.md\"><img alt=\"README em Chinês Simplificado\" src=\"https://img.shields.io/badge/简体中文-d9d9d9\"></a>\n  <a href=\"./README.ja.md\"><img alt=\"README em Japonês\" src=\"https://img.shields.io/badge/日本語-d9d9d9\"></a>\n  <a href=\"./README.KR.md\"><img alt=\"README em Coreano\" src=\"https://img.shields.io/badge/한국어-d9d9d9\"></a>\n  <a href=\"./README.FR.md\"><img alt=\"README em Francês\" src=\"https://img.shields.io/badge/Français-d9d9d9\"></a>\n</div>\n\n<p align=\"center\">\n  <img src=\"./docs/static/img/langflow_basic_howto.gif\" alt=\"Seu GIF\" style=\"border: 3px solid #211C43;\">\n</p>\n\n# 📝 Conteúdo\n\n- [📝 Conteúdo](#-conteúdo)\n- [📦 Introdução](#-introdução)\n- [🎨 Criar Fluxos](#-criar-fluxos)\n- [Deploy](#deploy)\n  - [Deploy usando Google Cloud Platform](#deploy-usando-google-cloud-platform)\n  - [Deploy on Railway](#deploy-on-railway)\n  - [Deploy on Render](#deploy-on-render)\n- [🖥️ Interface de Linha de Comando (CLI)](#️-interface-de-linha-de-comando-cli)\n  - [Uso](#uso)\n    - [Variáveis de Ambiente](#variáveis-de-ambiente)\n- [👋 Contribuir](#-contribuir)\n- [🌟 Contribuidores](#-contribuidores)\n- [📄 Licença](#-licença)\n\n# 📦 Introdução\n\nVocê pode instalar o Langflow com pip:\n\n```shell\n# Certifique-se de ter >=Python 3.10 instalado no seu sistema.\n# Instale a versão pré-lançamento (recomendada para as atualizações mais recentes)\npython -m pip install langflow --pre --force-reinstall\n\n# ou versão estável\npython -m pip install langflow -U\n```\n\nEntão, execute o Langflow com:\n\n```shell\npython -m langflow run\n```\n\nVocê também pode visualizar o Langflow no [HuggingFace Spaces](https://huggingface.co/spaces/Langflow/Langflow). [Clone o Space usando este link](https://huggingface.co/spaces/Langflow/Langflow?duplicate=true) para criar seu próprio workspace do Langflow em minutos.\n\n# 🎨 Criar Fluxos\n\nCriar fluxos com Langflow é fácil. Basta arrastar componentes da barra lateral para o workspace e conectá-los para começar a construir sua aplicação.\n\nExplore editando os parâmetros do prompt, agrupando componentes e construindo seus próprios componentes personalizados (Custom Components).\n\nQuando terminar, você pode exportar seu fluxo como um arquivo JSON.\n\nCarregue o fluxo com:\n\n```python\nfrom langflow.load import run_flow_from_json\n\nresults = run_flow_from_json(\"path/to/flow.json\", input_value=\"Hello, World!\")\n```\n\n# Deploy\n\n## Deploy usando Google Cloud Platform\n\nSiga nosso passo a passo para fazer deploy do Langflow no Google Cloud Platform (GCP) usando o Google Cloud Shell. O guia está disponível no documento [**Langflow on Google Cloud Platform**](https://github.com/langflow-ai/langflow/blob/dev/docs/docs/deployment/gcp-deployment.md).\n\nAlternativamente, clique no botão **\"Open in Cloud Shell\"** abaixo para iniciar o Google Cloud Shell, clonar o repositório do Langflow e começar um **tutorial interativo** que o guiará pelo processo de configuração dos recursos necessários e deploy do Langflow no seu projeto GCP.\n\n[![Open on Cloud Shell](https://gstatic.com/cloudssh/images/open-btn.svg)](https://console.cloud.google.com/cloudshell/open?git_repo=https://github.com/langflow-ai/langflow&working_dir=scripts/gcp&shellonly=true&tutorial=walkthroughtutorial_spot.md)\n\n## Deploy on Railway\n\nUse este template para implantar o Langflow 1.0 Preview no Railway:\n\n[![Deploy 1.0 Preview on Railway](https://railway.app/button.svg)](https://railway.app/template/UsJ1uB?referralCode=MnPSdg)\n\nOu este para implantar o Langflow 0.6.x:\n\n[![Deploy on Railway](https://railway.app/button.svg)](https://railway.app/template/JMXEWp?referralCode=MnPSdg)\n\n## Deploy on Render\n\n<a href=\"https://render.com/deploy?repo=https://github.com/langflow-ai/langflow/tree/dev\">\n<img src=\"https://render.com/images/deploy-to-render-button.svg\" alt=\"Deploy to Render\" />\n</a>\n\n# 🖥️ Interface de Linha de Comando (CLI)\n\nO Langflow fornece uma interface de linha de comando (CLI) para fácil gerenciamento e configuração.\n\n## Uso\n\nVocê pode executar o Langflow usando o seguinte comando:\n\n```shell\nlangflow run [OPTIONS]\n```\n\nCada opção é detalhada abaixo:\n\n- `--help`: Exibe todas as opções disponíveis.\n- `--host`: Define o host para vincular o servidor. Pode ser configurado usando a variável de ambiente `LANGFLOW_HOST`. O padrão é `127.0.0.1`.\n- `--workers`: Define o número de processos. Pode ser configurado usando a variável de ambiente `LANGFLOW_WORKERS`. O padrão é `1`.\n- `--worker-timeout`: Define o tempo limite do worker em segundos. O padrão é `60`.\n- `--port`: Define a porta para escutar. Pode ser configurado usando a variável de ambiente `LANGFLOW_PORT`. O padrão é `7860`.\n- `--env-file`: Especifica o caminho para o arquivo .env contendo variáveis de ambiente. O padrão é `.env`.\n- `--log-level`: Define o nível de log. Pode ser configurado usando a variável de ambiente `LANGFLOW_LOG_LEVEL`. O padrão é `critical`.\n- `--components-path`: Especifica o caminho para o diretório contendo componentes personalizados. Pode ser configurado usando a variável de ambiente `LANGFLOW_COMPONENTS_PATH`. O padrão é `langflow/components`.\n- `--log-file`: Especifica o caminho para o arquivo de log. Pode ser configurado usando a variável de ambiente `LANGFLOW_LOG_FILE`. O padrão é `logs/langflow.log`.\n- `--cache`: Seleciona o tipo de cache a ser usado. As opções são `InMemoryCache` e `SQLiteCache`. Pode ser configurado usando a variável de ambiente `LANGFLOW_LANGCHAIN_CACHE`. O padrão é `SQLiteCache`.\n- `--dev/--no-dev`: Alterna o modo de desenvolvimento. O padrão é `no-dev`.\n- `--path`: Especifica o caminho para o diretório frontend contendo os arquivos de build. Esta opção é apenas para fins de desenvolvimento. Pode ser configurado usando a variável de ambiente `LANGFLOW_FRONTEND_PATH`.\n- `--open-browser/--no-open-browser`: Alterna a opção de abrir o navegador após iniciar o servidor. Pode ser configurado usando a variável de ambiente `LANGFLOW_OPEN_BROWSER`. O padrão é `open-browser`.\n- `--remove-api-keys/--no-remove-api-keys`: Alterna a opção de remover as chaves de API dos projetos salvos no banco de dados. Pode ser configurado usando a variável de ambiente `LANGFLOW_REMOVE_API_KEYS`. O padrão é `no-remove-api-keys`.\n- `--install-completion [bash|zsh|fish|powershell|pwsh]`: Instala a conclusão para o shell especificado.\n- `--show-completion [bash|zsh|fish|powershell|pwsh]`: Exibe a conclusão para o shell especificado, permitindo que você copie ou personalize a instalação.\n- `--backend-only`: Este parâmetro, com valor padrão `False`, permite executar apenas o servidor backend sem o frontend. Também pode ser configurado usando a variável de ambiente `LANGFLOW_BACKEND_ONLY`.\n- `--store`: Este parâmetro, com valor padrão `True`, ativa os recursos da loja, use `--no-store` para desativá-los. Pode ser configurado usando a variável de ambiente `LANGFLOW_STORE`.\n\nEsses parâmetros são importantes para usuários que precisam personalizar o comportamento do Langflow, especialmente em cenários de desenvolvimento ou deploy especializado.\n\n### Variáveis de Ambiente\n\nVocê pode configurar muitas das opções de CLI usando variáveis de ambiente. Estas podem ser exportadas no seu sistema operacional ou adicionadas a um arquivo `.env` e carregadas usando a opção `--env-file`.\n\nUm arquivo de exemplo `.env` chamado `.env.example` está incluído no projeto. Copie este arquivo para um novo arquivo chamado `.env` e substitua os valores de exemplo pelas suas configurações reais. Se você estiver definindo valores tanto no seu sistema operacional quanto no arquivo `.env`, as configurações do `.env` terão precedência.\n\n# 👋 Contribuir\n\nAceitamos contribuições de desenvolvedores de todos os níveis para nosso projeto open-source no GitHub. Se você deseja contribuir, por favor, confira nossas [diretrizes de contribuição](./CONTRIBUTING.md) e ajude a tornar o Langflow mais acessível.\n\n---\n\n[![Star History Chart](https://api.star-history.com/svg?repos=langflow-ai/langflow&type=Timeline)](https://star-history.com/#langflow-ai/langflow&Date)\n\n# 🌟 Contribuidores\n\n[![langflow contributors](https://contrib.rocks/image?repo=langflow-ai/langflow)](https://github.com/langflow-ai/langflow/graphs/contributors)\n\n# 📄 Licença\n\nO Langflow é lançado sob a licença MIT. Veja o arquivo [LICENSE](LICENSE) para detalhes.\n"
        },
        {
          "name": "README.ja.md",
          "type": "blob",
          "size": 12.38,
          "content": "<div align=\"center\" style=\"padding: 10px; border: 1px solid #ccc; background-color: #f9f9f9; border-radius: 10px; margin-bottom: 20px;\">\n    <h2 style=\"margin: 0; font-size: 24px; color: #333;\">Langflow 1.0 がリリースされました！ 🎉</h2>\n    <p style=\"margin: 5px 0 0 0; font-size: 16px; color: #666;\">詳細は <a href=\"https://medium.com/p/73d3bdce8440\" style=\"text-decoration: underline; color: #1a73e8;\">こちら</a> をご覧ください！</p>\n</div>\n\n<!-- markdownlint-disable MD030 -->\n\n# [![Langflow](./docs/static/img/hero.png)](https://www.langflow.org)\n\n<p align=\"center\"><strong>\n    マルチエージェントおよびRAGアプリケーションを構築するためのビジュアルフレームワーク\n</strong></p>\n<p align=\"center\" style=\"font-size: 12px;\">\n    オープンソース、Python駆動、完全にカスタマイズ可能、LLMおよびベクトルストアに依存しない\n</p>\n\n<p align=\"center\" style=\"font-size: 12px;\">\n    <a href=\"https://docs.langflow.org\" style=\"text-decoration: underline;\">ドキュメント</a> -\n    <a href=\"https://discord.com/invite/EqksyE2EX9\" style=\"text-decoration: underline;\">Discordに参加</a> -\n    <a href=\"https://twitter.com/langflow_ai\" style=\"text-decoration: underline;\">Xでフォロー</a> -\n    <a href=\"https://huggingface.co/spaces/Langflow/Langflow-Preview\" style=\"text-decoration: underline;\">ライブデモ</a>\n</p>\n\n<p align=\"center\">\n    <a href=\"https://github.com/langflow-ai/langflow\">\n        <img src=\"https://img.shields.io/github/stars/langflow-ai/langflow\">\n    </a>\n    <a href=\"https://discord.com/invite/EqksyE2EX9\">\n        <img src=\"https://img.shields.io/discord/1116803230643527710?label=Discord\">\n    </a>\n</p>\n\n<div align=\"center\">\n  <a href=\"./README.md\"><img alt=\"README in English\" src=\"https://img.shields.io/badge/English-d9d9d9\"></a>\n  <a href=\"./README.PT.md\"><img alt=\"README in Portuguese\" src=\"https://img.shields.io/badge/Portuguese-d9d9d9\"></a>\n  <a href=\"./README.ES.md\"><img alt=\"README in Spanish\" src=\"https://img.shields.io/badge/Spanish-d9d9d9\"></a>\n  <a href=\"./README.zh_CN.md\"><img alt=\"README in Simplified Chinese\" src=\"https://img.shields.io/badge/简体中文-d9d9d9\"></a>\n  <a href=\"./README.ja.md\"><img alt=\"README in Japanese\" src=\"https://img.shields.io/badge/日本語-d9d9d9\"></a>\n  <a href=\"./README.KR.md\"><img alt=\"README in KOREAN\" src=\"https://img.shields.io/badge/한국어-d9d9d9\"></a>\n  <a href=\"./README.FR.md\"><img alt=\"README in French\" src=\"https://img.shields.io/badge/Français-d9d9d9\"></a>\n</div>\n\n<p align=\"center\">\n  <img src=\"./docs/static/img/langflow_basic_howto.gif\" alt=\"Your GIF\" style=\"border: 3px solid #211C43;\">\n</p>\n\n# 📝 目次\n\n- [📝 目次](#-目次)\n- [📦 始めに](#-始めに)\n- [🎨 フローの作成](#-フローの作成)\n- [デプロイ](#デプロイ)\n  - [DataStax Langflow](#datastax-langflow)\n  - [Hugging Face Spaces に Langflow をデプロイ](#hugging-face-spacesにlangflowをデプロイ)\n  - [Google Cloud Platform に Langflow をデプロイ](#google-cloud-platformにlangflowをデプロイ)\n  - [Railway にデプロイ](#railwayにデプロイ)\n  - [Render にデプロイ](#renderにデプロイ)\n  - [Kubernetes にデプロイ](#kubernetesにデプロイ)\n- [🖥️ コマンドラインインターフェース (CLI)](#️-コマンドラインインターフェース-cli)\n  - [使用方法](#使用方法)\n    - [環境変数](#環境変数)\n- [👋 貢献](#-貢献)\n- [🌟 貢献者](#-貢献者)\n- [📄 ライセンス](#-ライセンス)\n\n# 📦 始めに\n\nLangflow を pip でインストールできます：\n\n```shell\n# システムに>=Python 3.10がインストールされていることを確認してください。\npython -m pip install langflow -U\n```\n\nまたは\n\nクローンしたリポジトリからインストールしたい場合は、以下のコマンドで Langflow のフロントエンドとバックエンドをビルドしてインストールできます：\n\n```shell\nmake install_frontend && make build_frontend && make install_backend\n```\n\nその後、以下のコマンドで Langflow を実行します：\n\n```shell\npython -m langflow run\n```\n\n# 🎨 フローの作成\n\nLangflow を使ってフローを作成するのは簡単です。サイドバーからコンポーネントをワークスペースにドラッグして接続するだけで、アプリケーションの構築を開始できます。\n\nプロンプトパラメータを編集したり、コンポーネントを単一の高レベルコンポーネントにグループ化したり、独自のカスタムコンポーネントを作成したりして探索してください。\n\n完了したら、フローを JSON ファイルとしてエクスポートできます。\n\n以下のスクリプトを使用してフローを読み込みます：\n\n```python\nfrom langflow.load import run_flow_from_json\n\nresults = run_flow_from_json(\"path/to/flow.json\", input_value=\"Hello, World!\")\n```\n\n# デプロイ\n\n## DataStax Langflow\n\nDataStax Langflow は、[AstraDB](https://www.datastax.com/products/datastax-astra)と統合された Langflow のホストバージョンです。インストールや設定なしで数分で稼働できます。[無料でサインアップ](https://astra.datastax.com/signup?type=langflow)してください。\n\n## Hugging Face Spaces に Langflow をデプロイ\n\n[HuggingFace Spaces](https://huggingface.co/spaces/Langflow/Langflow-Preview)で Langflow をプレビューすることもできます。[このリンクを使用してスペースをクローン](https://huggingface.co/spaces/Langflow/Langflow-Preview?duplicate=true)して、数分で独自の Langflow ワークスペースを作成できます。\n\n## Google Cloud Platform に Langflow をデプロイ\n\nGoogle Cloud Shell を使用して Google Cloud Platform（GCP）に Langflow をデプロイする手順については、[**Langflow in Google Cloud Platform**](./docs/docs/Deployment/deployment-gcp.md)ドキュメントをご覧ください。\n\nまたは、以下の**「Open in Cloud Shell」**ボタンをクリックして Google Cloud Shell を起動し、Langflow リポジトリをクローンして、GCP プロジェクトに必要なリソースを設定し、Langflow をデプロイするプロセスをガイドする**インタラクティブチュートリアル**を開始します。\n\n[![Open in Cloud Shell](https://gstatic.com/cloudssh/images/open-btn.svg)](https://console.cloud.google.com/cloudshell/open?git_repo=https://github.com/langflow-ai/langflow&working_dir=scripts/gcp&shellonly=true&tutorial=walkthroughtutorial_spot.md)\n\n## Railway にデプロイ\n\nこのテンプレートを使用して Langflow 1.0 を Railway にデプロイします：\n\n[![Deploy on Railway](https://railway.app/button.svg)](https://railway.app/template/JMXEWp?referralCode=MnPSdg)\n\n## Render にデプロイ\n\n<a href=\"https://render.com/deploy?repo=https://github.com/langflow-ai/langflow/tree/main\">\n<img src=\"https://render.com/images/deploy-to-render-button.svg\" alt=\"Deploy to Render\" />\n</a>\n\n## Kubernetes にデプロイ\n\n[Kubernetes に Langflow をデプロイ](./docs/docs/Deployment/deployment-kubernetes.md)する手順については、ステップバイステップガイドをご覧ください。\n\n# 🖥️ コマンドラインインターフェース (CLI)\n\nLangflow は、簡単な管理と設定のためのコマンドラインインターフェース（CLI）を提供します。\n\n## 使用方法\n\n以下のコマンドを使用して Langflow を実行できます：\n\n```shell\nlangflow run [OPTIONS]\n```\n\n各オプションの詳細は以下の通りです：\n\n- `--help`: 利用可能なすべてのオプションを表示します。\n- `--host`: サーバーをバインドするホストを定義します。`LANGFLOW_HOST`環境変数を使用して設定できます。デフォルトは`127.0.0.1`です。\n- `--workers`: ワーカープロセスの数を設定します。`LANGFLOW_WORKERS`環境変数を使用して設定できます。デフォルトは`1`です。\n- `--worker-timeout`: ワーカーのタイムアウトを秒単位で設定します。デフォルトは`60`です。\n- `--port`: リッスンするポートを設定します。`LANGFLOW_PORT`環境変数を使用して設定できます。デフォルトは`7860`です。\n- `--env-file`: 環境変数を含む.env ファイルのパスを指定します。デフォルトは`.env`です。\n- `--log-level`: ログレベルを定義します。`LANGFLOW_LOG_LEVEL`環境変数を使用して設定できます。デフォルトは`critical`です。\n- `--components-path`: カスタムコンポーネントを含むディレクトリのパスを指定します。`LANGFLOW_COMPONENTS_PATH`環境変数を使用して設定できます。デフォルトは`langflow/components`です。\n- `--log-file`: ログファイルのパスを指定します。`LANGFLOW_LOG_FILE`環境変数を使用して設定できます。デフォルトは`logs/langflow.log`です。\n- `--cache`: 使用するキャッシュの種類を選択します。オプションは`InMemoryCache`と`SQLiteCache`です。`LANGFLOW_LANGCHAIN_CACHE`環境変数を使用して設定できます。デフォルトは`SQLiteCache`です。\n- `--dev/--no-dev`: 開発モードを切り替えます。デフォルトは`no-dev`です。\n- `--path`: ビルドファイルを含むフロントエンドディレクトリのパスを指定します。このオプションは開発目的のみに使用されます。`LANGFLOW_FRONTEND_PATH`環境変数を使用して設定できます。\n- `--open-browser/--no-open-browser`: サーバー起動後にブラウザを開くオプションを切り替えます。`LANGFLOW_OPEN_BROWSER`環境変数を使用して設定できます。デフォルトは`open-browser`です。\n- `--remove-api-keys/--no-remove-api-keys`: データベースに保存されたプロジェクトから API キーを削除するオプションを切り替えます。`LANGFLOW_REMOVE_API_KEYS`環境変数を使用して設定できます。デフォルトは`no-remove-api-keys`です。\n- `--install-completion [bash|zsh|fish|powershell|pwsh]`: 指定されたシェルの補完をインストールします。\n- `--show-completion [bash|zsh|fish|powershell|pwsh]`: 指定されたシェルの補完を表示し、コピーまたはインストールをカスタマイズできます。\n- `--backend-only`: デフォルト値が`False`のこのパラメータは、フロントエンドなしでバックエンドサーバーのみを実行することを許可します。`LANGFLOW_BACKEND_ONLY`環境変数を使用して設定できます。\n- `--store`: デフォルト値が`True`のこのパラメータは、ストア機能を有効にします。無効にするには`--no-store`を使用します。`LANGFLOW_STORE`環境変数を使用して設定できます。\n\nこれらのパラメータは、特に開発や特殊なデプロイメントシナリオで Langflow の動作をカスタマイズする必要があるユーザーにとって重要です。\n\n### 環境変数\n\n多くの CLI オプションは環境変数を使用して構成できます。これらの変数は、オペレーティングシステムにエクスポートするか、`.env`ファイルに追加して`--env-file`オプションを使用してロードできます。\n\nプロジェクトには、`.env.example`という名前のサンプル`.env`ファイルが含まれています。このファイルを新しいファイル`.env`にコピーし、サンプル値を実際の設定に置き換えます。OS と`.env`ファイルの両方に値を設定している場合、`.env`の設定が優先されます。\n\n# 👋 貢献\n\n私たちは、すべてのレベルの開発者が GitHub のオープンソースプロジェクトに貢献することを歓迎します。貢献したい場合は、[貢献ガイドライン](./CONTRIBUTING.md)を確認し、Langflow をよりアクセスしやすくするのにご協力ください。\n\n---\n\n[![Star History Chart](https://api.star-history.com/svg?repos=langflow-ai/langflow&type=Timeline)](https://star-history.com/#langflow-ai/langflow&Date)\n\n# 🌟 貢献者\n\n[![langflow contributors](https://contrib.rocks/image?repo=langflow-ai/langflow)](https://github.com/langflow-ai/langflow/graphs/contributors)\n\n# 📄 ライセンス\n\nLangflow は MIT ライセンスの下でリリースされています。詳細については、[LICENSE](LICENSE)ファイルを参照してください。\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.88,
          "content": "<!-- markdownlint-disable MD030 -->\n\n![Langflow](./docs/static/img/hero.png)\n\n<p align=\"center\" style=\"font-size: 12px;\">\n    Langflow is a low-code app builder for RAG and multi-agent AI applications. It’s Python-based and agnostic to any model, API, or database.\n</p>\n\n<p align=\"center\" style=\"font-size: 12px;\">\n    <a href=\"https://docs.langflow.org\" style=\"text-decoration: underline;\">Docs</a> -\n    <a href=\"https://astra.datastax.com/signup?type=langflow\" style=\"text-decoration: underline;\">Free Cloud Service</a> -\n    <a href=\"https://docs.langflow.org/get-started-installation\" style=\"text-decoration: underline;\">Self Managed</a>\n\n</p>\n\n<div align=\"center\">\n  <a href=\"./README.md\"><img alt=\"README in English\" src=\"https://img.shields.io/badge/English-d9d9d9\"></a>\n  <a href=\"./README.PT.md\"><img alt=\"README in Portuguese\" src=\"https://img.shields.io/badge/Portuguese-d9d9d9\"></a>\n  <a href=\"./README.ES.md\"><img alt=\"README in Spanish\" src=\"https://img.shields.io/badge/Spanish-d9d9d9\"></a>\n  <a href=\"./README.zh_CN.md\"><img alt=\"README in Simplified Chinese\" src=\"https://img.shields.io/badge/简体中文-d9d9d9\"></a>\n  <a href=\"./README.ja.md\"><img alt=\"README in Japanese\" src=\"https://img.shields.io/badge/日本語-d9d9d9\"></a>\n  <a href=\"./README.KR.md\"><img alt=\"README in KOREAN\" src=\"https://img.shields.io/badge/한국어-d9d9d9\"></a>\n  <a href=\"./README.FR.md\"><img alt=\"README in French\" src=\"https://img.shields.io/badge/Français-d9d9d9\"></a>\n</div>\n\n## ✨ Core features\n\n1. **Python-based** and agnostic to models, APIs, data sources, or databases.\n2. **Visual IDE** for drag-and-drop building and testing of workflows.\n3. **Playground** to immediately test and iterate workflows with step-by-step control.\n4. **Multi-agent** orchestration and conversation management and retrieval.\n5. **Free cloud service** to get started in minutes with no setup.\n6. **Publish as an API** or export as a Python application.\n7. **Observability** with LangSmith, LangFuse, or LangWatch integration.\n8. **Enterprise-grade** security and scalability with free DataStax Langflow cloud service.\n9. **Customize workflows** or create flows entirely just using Python.\n10. **Ecosystem integrations** as reusable components for any model, API or database.\n\n![Integrations](./docs/static/img/integrations.png)\n\n## 📦 Quickstart\n\n- **Install with uv (recommended)** (Python 3.10 to 3.12):\n\n```shell\nuv pip install langflow\n```\n\n- **Install with pip** (Python 3.10 to 3.12):\n\n```shell\npip install langflow\n```\n\n- **Cloud:** DataStax Langflow is a hosted environment with zero setup. [Sign up for a free account.](https://astra.datastax.com/signup?type=langflow)\n- **Self-managed:** Run Langflow in your environment. [Install Langflow](https://docs.langflow.org/get-started-installation) to run a local Langflow server, and then use the [Quickstart](https://docs.langflow.org/get-started-quickstart) guide to create and execute a flow.\n- **Hugging Face:** [Clone the space using this link](https://huggingface.co/spaces/Langflow/Langflow?duplicate=true) to create a Langflow workspace.\n\n[![Getting Started](https://github.com/user-attachments/assets/f1adfbe7-3c35-43a4-b265-661f3d4f875f)](https://www.youtube.com/watch?v=kinngWhaUKM)\n\n## ⭐ Stay up-to-date\n\nStar Langflow on GitHub to be instantly notified of new releases.\n\n![Star Langflow](https://github.com/user-attachments/assets/03168b17-a11d-4b2a-b0f7-c1cce69e5a2c)\n\n## 👋 Contribute\n\nWe welcome contributions from developers of all levels. If you'd like to contribute, please check our [contributing guidelines](./CONTRIBUTING.md) and help make Langflow more accessible.\n\n---\n\n[![Star History Chart](https://api.star-history.com/svg?repos=langflow-ai/langflow&type=Timeline)](https://star-history.com/#langflow-ai/langflow&Date)\n\n## ❤️ Contributors\n\n[![langflow contributors](https://contrib.rocks/image?repo=langflow-ai/langflow)](https://github.com/langflow-ai/langflow/graphs/contributors)\n"
        },
        {
          "name": "README.zh_CN.md",
          "type": "blob",
          "size": 8.8,
          "content": "<!-- markdownlint-disable MD030 -->\n\n# [![Langflow](./docs/static/img/hero.png)](https://www.langflow.org)\n\n<p align=\"center\"><strong>\n    一种用于构建多智能体和RAG应用的可视化框架\n</strong></p>\n<p align=\"center\" style=\"font-size: 12px;\">\n    开源、Python驱动、完全可定制、大模型且不依赖于特定的向量存储\n</p>\n\n<p align=\"center\" style=\"font-size: 12px;\">\n    <a href=\"https://docs.langflow.org\" style=\"text-decoration: underline;\">文档</a> -\n    <a href=\"https://discord.com/invite/EqksyE2EX9\" style=\"text-decoration: underline;\">加入我们的Discord社区</a> -\n    <a href=\"https://twitter.com/langflow_ai\" style=\"text-decoration: underline;\">在X上关注我们</a> -\n    <a href=\"https://huggingface.co/spaces/Langflow/Langflow-Preview\" style=\"text-decoration: underline;\">在线体验</a>\n</p>\n\n<p align=\"center\">\n    <a href=\"https://github.com/langflow-ai/langflow\">\n        <img src=\"https://img.shields.io/github/stars/langflow-ai/langflow\">\n    </a>\n    <a href=\"https://discord.com/invite/EqksyE2EX9\">\n        <img src=\"https://img.shields.io/discord/1116803230643527710?label=Discord\">\n    </a>\n</p>\n\n<div align=\"center\">\n  <a href=\"./README.md\"><img alt=\"README in English\" src=\"https://img.shields.io/badge/英文-d9d9d9\"></a>\n  <a href=\"./README.PT.md\"><img alt=\"README in Portuguese\" src=\"https://img.shields.io/badge/Portuguese-d9d9d9\"></a>\n  <a href=\"./README.ES.md\"><img alt=\"README in Spanish\" src=\"https://img.shields.io/badge/Spanish-d9d9d9\"></a>\n  <a href=\"./README.zh_CN.md\"><img alt=\"README in Simplified Chinese\" src=\"https://img.shields.io/badge/简体中文-d9d9d9\"></a>\n  <a href=\"./README.ja.md\"><img alt=\"README in Japanese\" src=\"https://img.shields.io/badge/日本語-d9d9d9\"></a>\n  <a href=\"./README.KR.md\"><img alt=\"README in KOREAN\" src=\"https://img.shields.io/badge/한국어-d9d9d9\"></a>\n  <a href=\"./README.FR.md\"><img alt=\"README in French\" src=\"https://img.shields.io/badge/Français-d9d9d9\"></a>\n</div>\n\n<p align=\"center\">\n  <img src=\"./docs/static/img/langflow_basic_howto.gif\" alt=\"Your GIF\" style=\"border: 3px solid #211C43;\">\n</p>\n\n# 📝 目录\n\n- [📝 目录](#-目录)\n- [📦 快速开始](#-快速开始)\n- [🎨 创建工作流](#-创建工作流)\n- [部署](#部署)\n  - [在 Google Cloud Platform 上部署 Langflow](#在google-cloud-platform上部署langflow)\n  - [在 Railway 上部署](#在railway上部署)\n  - [在 Render 上部署](#在render上部署)\n- [🖥️ 命令行界面 (CLI)](#️-命令行界面-cli)\n  - [用法](#用法)\n    - [环境变量](#环境变量)\n- [👋 贡献](#-贡献)\n- [🌟 贡献者](#-贡献者)\n- [📄 许可证](#-许可证)\n\n# 📦 快速开始\n\n使用 pip 安装 Langflow：\n\n```shell\n# 确保您的系统已经安装上>=Python 3.10\n# 安装Langflow预发布版本\npython -m pip install langflow --pre --force-reinstall\n\n# 安装Langflow稳定版本\npython -m pip install langflow -U\n```\n\n然后运行 Langflow：\n\n```shell\npython -m langflow run\n```\n\n您可以在[HuggingFace Spaces](https://huggingface.co/spaces/Langflow/Langflow-Preview)中在线体验 Langflow，也可以使用该链接[克隆空间](https://huggingface.co/spaces/Langflow/Langflow-Preview?duplicate=true)，在几分钟内创建您自己的 Langflow 运行工作空间。\n\n# 🎨 创建工作流\n\n使用 Langflow 来创建工作流非常简单。只需从侧边栏拖动组件到画布上，然后连接组件即可开始构建应用程序。\n\n您可以通过编辑提示参数、将组件分组到单个高级组件中以及构建您自己的自定义组件来展开探索。\n\n完成后，可以将工作流导出为 JSON 文件。\n\n然后使用以下脚本加载工作流：\n\n```python\nfrom langflow.load import run_flow_from_json\n\nresults = run_flow_from_json(\"path/to/flow.json\", input_value=\"Hello, World!\")\n```\n\n# 部署\n\n## 在 Google Cloud Platform 上部署 Langflow\n\n请按照我们的分步指南使用 Google Cloud Shell 在 Google Cloud Platform (GCP) 上部署 Langflow。该指南在 [**Langflow in Google Cloud Platform**](GCP_DEPLOYMENT.md) 文档中提供。\n\n或者，点击下面的 \"Open in Cloud Shell\" 按钮，启动 Google Cloud Shell，克隆 Langflow 仓库，并开始一个互动教程，该教程将指导您设置必要的资源并在 GCP 项目中部署 Langflow。\n\n[![Open in Cloud Shell](https://gstatic.com/cloudssh/images/open-btn.svg)](https://console.cloud.google.com/cloudshell/open?git_repo=https://github.com/langflow-ai/langflow&working_dir=scripts/gcp&shellonly=true&tutorial=walkthroughtutorial_spot.md)\n\n## 在 Railway 上部署\n\n使用此模板在 Railway 上部署 Langflow 1.0 预览版：\n\n[![Deploy 1.0 Preview on Railway](https://railway.app/button.svg)](https://railway.app/template/UsJ1uB?referralCode=MnPSdg)\n\n或者使用此模板部署 Langflow 0.6.x：\n\n[![Deploy on Railway](https://railway.app/button.svg)](https://railway.app/template/JMXEWp?referralCode=MnPSdg)\n\n## 在 Render 上部署\n\n<a href=\"https://render.com/deploy?repo=https://github.com/langflow-ai/langflow/tree/dev\">\n<img src=\"https://render.com/images/deploy-to-render-button.svg\" alt=\"Deploy to Render\" />\n</a>\n\n# 🖥️ 命令行界面 (CLI)\n\nLangflow 提供了一个命令行界面以便于平台的管理和配置。\n\n## 用法\n\n您可以使用以下命令运行 Langflow：\n\n```shell\nlangflow run [OPTIONS]\n```\n\n命令行参数的详细说明：\n\n- `--help`: 显示所有可用参数。\n- `--host`: 定义绑定服务器的主机 host 参数，可以使用 LANGFLOW_HOST 环境变量设置，默认值为 127.0.0.1。\n- `--workers`: 设置工作进程的数量，可以使用 LANGFLOW_WORKERS 环境变量设置，默认值为 1。\n- `--worker-timeout`: 设置工作进程的超时时间（秒），默认值为 60。\n- `--port`: 设置服务监听的端口，可以使用 LANGFLOW_PORT 环境变量设置，默认值为 7860。\n- `--config`: 定义配置文件的路径，默认值为 config.yaml。\n- `--env-file`: 指定包含环境变量的 .env 文件路径，默认值为 .env。\n- `--log-level`: 定义日志记录级别，可以使用 LANGFLOW_LOG_LEVEL 环境变量设置，默认值为 critical。\n- `--components-path`: 指定包含自定义组件的目录路径，可以使用 LANGFLOW_COMPONENTS_PATH 环境变量设置，默认值为 langflow/components。\n- `--log-file`: 指定日志文件的路径，可以使用 LANGFLOW_LOG_FILE 环境变量设置，默认值为 logs/langflow.log。\n- `--cache`: 选择要使用的缓存类型，可选项为 InMemoryCache 和 SQLiteCache，可以使用 LANGFLOW_LANGCHAIN_CACHE 环境变量设置，默认值为 SQLiteCache。\n- `--dev/--no-dev`: 切换开发/非开发模式，默认值为 no-dev 即非开发模式。\n- `--path`: 指定包含前端构建文件的目录路径，此参数仅用于开发目的，可以使用 LANGFLOW_FRONTEND_PATH 环境变量设置。\n- `--open-browser/--no-open-browser`: 切换启动服务器后是否打开浏览器，可以使用 LANGFLOW_OPEN_BROWSER 环境变量设置，默认值为 open-browser 即启动后打开浏览器。\n- `--remove-api-keys/--no-remove-api-keys`: 切换是否从数据库中保存的项目中移除 API 密钥，可以使用 LANGFLOW_REMOVE_API_KEYS 环境变量设置，默认值为 no-remove-api-keys。\n- `--install-completion [bash|zsh|fish|powershell|pwsh]`: 为指定的 shell 安装自动补全。\n- `--show-completion [bash|zsh|fish|powershell|pwsh]`: 显示指定 shell 的自动补全，使您可以复制或自定义安装。\n- `--backend-only`: 此参数默认为 False，允许仅运行后端服务器而不运行前端，也可以使用 LANGFLOW_BACKEND_ONLY 环境变量设置。\n- `--store`: 此参数默认为 True，启用存储功能，使用 --no-store 可禁用它，可以使用 LANGFLOW_STORE 环境变量配置。\n\n这些参数对于需要定制 Langflow 行为的用户尤其重要，特别是在开发或者特殊部署场景中。\n\n### 环境变量\n\n您可以使用环境变量配置许多 CLI 参数选项。这些变量可以在操作系统中导出，或添加到 .env 文件中，并使用 --env-file 参数加载。\n\n项目中包含一个名为 .env.example 的示例 .env 文件。将此文件复制为新文件 .env，并用实际设置值替换示例值。如果同时在操作系统和 .env 文件中设置值，则 .env 设置优先。\n\n# 👋 贡献\n\n我们欢迎各级开发者为我们的 GitHub 开源项目做出贡献，并帮助 Langflow 更加易用，如果您想参与贡献，请查看我们的贡献指南 [contributing guidelines](./CONTRIBUTING.md) 。\n\n---\n\n[![Star History Chart](https://api.star-history.com/svg?repos=langflow-ai/langflow&type=Timeline)](https://star-history.com/#langflow-ai/langflow&Date)\n\n# 🌟 贡献者\n\n[![langflow contributors](https://contrib.rocks/image?repo=langflow-ai/langflow)](https://github.com/langflow-ai/langflow/graphs/contributors)\n\n# 📄 许可证\n\nLangflow 以 MIT 许可证发布。有关详细信息，请参阅 [LICENSE](LICENSE) 文件。\n"
        },
        {
          "name": "deploy",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker_example",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "eslint.config.js",
          "type": "blob",
          "size": 0,
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 7.55,
          "content": "[tool.uv.sources]\nlangflow-base = { workspace = true }\nlangflow = { workspace = true }\n\n[tool.uv.workspace]\nmembers = [\"src/backend/base\", \".\"]\n\n[tool.hatch.build.targets.wheel]\npackages = [\"src/backend/langflow\"]\n\n[project]\nname = \"langflow\"\nversion = \"1.1.1\"\ndescription = \"A Python package with a built-in web application\"\nrequires-python = \">=3.10,<3.14\"\nlicense = \"MIT\"\nkeywords = [\"nlp\", \"langchain\", \"openai\", \"gpt\", \"gui\"]\nreadme = \"README.md\"\nmaintainers = [\n    { name = \"Carlos Coelho\", email = \"carlos@langflow.org\" },\n    { name = \"Cristhian Zanforlin\", email = \"cristhian.lousa@gmail.com\" },\n    { name = \"Gabriel Almeida\", email = \"gabriel@langflow.org\" },\n    { name = \"Igor Carvalho\", email = \"igorr.ackerman@gmail.com\" },\n    { name = \"Lucas Eduoli\", email = \"lucaseduoli@gmail.com\" },\n    { name = \"Otávio Anovazzi\", email = \"otavio2204@gmail.com\" },\n    { name = \"Rodrigo Nader\", email = \"rodrigo@langflow.org\" },\n    { name = \"Italo dos Anjos\", email = \"italojohnnydosanjos@gmail.com\" },\n]\n\n# Define your main dependencies here\ndependencies = [\n    \"langflow-base==0.1.1\",\n    \"beautifulsoup4==4.12.3\",\n    \"google-search-results>=2.4.1,<3.0.0\",\n    \"google-api-python-client==2.154.0\",\n    \"huggingface-hub[inference]>=0.23.2,<1.0.0\",\n    \"networkx==3.4.2\",\n    \"fake-useragent==1.5.1\",\n    \"pyarrow==17.0.0\",\n    \"wikipedia==1.4.0\",\n    \"qdrant-client==1.9.2\",\n    \"weaviate-client==4.10.2\",\n    \"faiss-cpu==1.9.0.post1\",\n    \"types-cachetools==5.5.0.20240820\",\n    \"pymongo==4.10.1\",\n    \"supabase==2.6.0\",\n    \"certifi>=2023.11.17,<2025.0.0\",\n    \"certifi==2024.8.30\",\n    \"fastavro==1.9.7\",\n    \"redis==5.2.1\",\n    \"metaphor-python==0.1.23\",\n    'pywin32>=306,<307; sys_platform == \"win32\"',\n    \"langfuse==2.53.9\",\n    \"metal_sdk==2.5.1\",\n    \"MarkupSafe==3.0.2\",\n    \"boto3==1.34.162\",\n    \"numexpr==2.10.2\",\n    \"qianfan==0.3.5\",\n    \"pgvector==0.3.6\",\n    \"langchain==0.3.10\",\n    \"elasticsearch==8.16.0\",\n    \"pytube==15.0.0\",\n    \"dspy-ai==2.5.41\",\n    \"assemblyai==0.35.1\",\n    \"litellm==1.54.1\",\n    \"chromadb==0.5.23\",\n    \"zep-python==2.0.2\",\n    \"youtube-transcript-api==0.6.3\",\n    \"Markdown==3.7\",\n    \"upstash-vector==0.6.0\",\n    \"GitPython==3.1.43\",\n    \"kubernetes==31.0.0\",\n    \"json_repair==0.30.3\",\n    \"langwatch==0.1.16\",\n    \"langsmith==0.1.147\",\n    \"yfinance==0.2.50\",\n    \"wolframalpha==5.1.3\",\n    \"astra-assistants[tools]~=2.2.6\",\n    \"composio-langchain==0.6.7\",\n    \"composio-core==0.6.7\",\n    \"spider-client==0.1.24\",\n    \"nltk==3.9.1\",\n    \"lark==1.2.2\",\n    \"jq==1.8.0\",\n    \"pydantic-settings==2.4.0\",\n    \"ragstack-ai-knowledge-store==0.2.1\",\n    \"duckduckgo_search==6.3.7\",\n    \"opensearch-py==2.8.0\",\n    \"langchain-google-genai==2.0.6\",\n    \"langchain-cohere==0.3.3\",\n    \"langchain-anthropic==0.3.0\",\n    \"langchain-astradb==0.5.2\",\n    \"langchain-openai==0.2.12\",\n    \"langchain-google-vertexai==2.0.7\",\n    \"langchain-groq==0.2.1\",\n    \"langchain-pinecone==0.2.0\",\n    \"langchain-mistralai==0.2.3\",\n    \"langchain-chroma==0.1.4\",\n    \"langchain-aws==0.2.7\",\n    \"langchain-unstructured==0.1.5\",\n    \"langchain-milvus==0.1.7\",\n    \"langchain-mongodb==0.2.0\",\n    \"langchain-nvidia-ai-endpoints==0.3.5\",\n    \"langchain-google-calendar-tools==0.0.1\",\n    \"langchain-google-community==2.0.3\",\n    \"langchain-elasticsearch==0.3.0\",\n    \"langchain-ollama==0.2.1\",\n    \"langchain-community~=0.3.10\",\n    \"sqlalchemy[aiosqlite,postgresql_psycopg2binary,postgresql_psycopgbinary]>=2.0.36,<3.0.0\",\n    \"atlassian-python-api==3.41.16\",\n    \"mem0ai==0.1.34\",\n    \"needle-python>=0.4.0\",\n    \"aiofile>=3.9.0,<4.0.0\",\n    \"sseclient-py==1.8.0\",\n    \"arize-phoenix-otel>=0.6.1\",\n    \"openinference-instrumentation-langchain>=0.1.29\",\n    \"crewai~=0.86.0\",\n    \"mcp>=0.9.1\",\n    \"uv>=0.5.7\",\n    \"ag2\",\n    \"pydantic-ai>=0.0.12\",\n]\n\n[project.urls]\nRepository = \"https://github.com/langflow-ai/langflow\"\nDocumentation = \"https://docs.langflow.org\"\n\n[project.optional-dependencies]\ndeploy = [\n    \"celery[redis]>=5.3.6\",\n    \"flower>=2.0.0\"\n]\ncouchbase = [\n    \"couchbase>=4.2.1\"\n]\ncassio = [\n    \"cassio>=0.1.7\"\n]\nlocal = [\n    \"llama-cpp-python~=0.2.0\",\n    \"sentence-transformers>=2.3.1\",\n    \"ctransformers>=0.2.10\"\n]\nclickhouse-connect = [\n    \"clickhouse-connect==0.7.19\"\n]\n\n[project.scripts]\nlangflow = \"langflow.__main__:main\"\n\n[tool.uv]\ndev-dependencies = [\n    \"pytest-instafail>=0.5.0\",\n    \"types-redis>=4.6.0.5\",\n    \"ipykernel>=6.29.0\",\n    \"mypy>=1.11.0\",\n    \"ruff>=0.8.4,<0.9.0\",\n    \"httpx>=0.27.0\",\n    \"pytest>=8.2.0\",\n    \"types-requests>=2.32.0\",\n    \"requests>=2.32.0\",\n    \"pytest-cov>=5.0.0\",\n    \"pandas-stubs>=2.1.4.231227\",\n    \"types-pillow>=10.2.0.20240213\",\n    \"types-pyyaml>=6.0.12.8\",\n    \"types-python-jose>=3.3.4.8\",\n    \"types-passlib>=1.7.7.13\",\n    \"pytest-mock>=3.14.0\",\n    \"pytest-xdist>=3.6.0\",\n    \"types-pywin32>=306.0.0.4\",\n    \"types-google-cloud-ndb>=2.2.0.0\",\n    \"pytest-sugar>=1.0.0\",\n    \"respx>=0.21.1\",\n    \"pytest-asyncio>=0.23.0\",\n    \"pytest-profiling>=1.7.0\",\n    \"pre-commit>=3.7.0\",\n    \"vulture>=2.11\",\n    \"dictdiffer>=0.9.0\",\n    \"pytest-split>=0.9.0\",\n    \"pytest-flakefinder>=1.1.0\",\n    \"types-markdown>=3.7.0.20240822\",\n    \"packaging>=24.1,<25.0\",\n    \"asgi-lifespan>=2.1.0\",\n    \"pytest-github-actions-annotate-failures>=0.2.0\",\n    \"pytest-codspeed>=3.0.0\",\n    \"blockbuster>=1.5.8,<1.6\",\n    \"types-aiofiles>=24.1.0.20240626\",\n    \"codeflash>=0.8.4\",\n]\n\n\n[tool.codespell]\nskip = '.git,*.pdf,*.svg,*.pdf,*.yaml,*.ipynb,poetry.lock,*.min.js,*.css,package-lock.json,*.trig.,**/node_modules/**,./stuff/*,*.csv'\n# Ignore latin etc\nignore-regex = '.*(Stati Uniti|Tense=Pres).*'\n\n\n[tool.pytest.ini_options]\nminversion = \"6.0\"\ntestpaths = [\"tests\", \"integration\"]\nconsole_output_style = \"progress\"\nfilterwarnings = [\"ignore::DeprecationWarning\", \"ignore::ResourceWarning\"]\nlog_cli = true\nlog_cli_format = \"%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)\"\nlog_cli_date_format = \"%Y-%m-%d %H:%M:%S\"\nmarkers = [\"async_test\", \"api_key_required\"]\nasyncio_mode = \"auto\"\nasyncio_default_fixture_loop_scope = \"function\"\n\n[tool.coverage.run]\ncommand_line = \"\"\"\n    -m pytest --ignore=tests/integration\n    --cov --cov-report=term --cov-report=html\n    --instafail -ra -n auto -m \"not api_key_required\"\n\"\"\"\nsource = [\"src/backend/base/langflow/\"]\nomit = [\"*/alembic/*\", \"tests/*\", \"*/__init__.py\"]\n\n\n[tool.coverage.report]\nsort = \"Stmts\"\nskip_empty = true\nshow_missing = false\nignore_errors = true\n\n\n[tool.coverage.html]\ndirectory = \"coverage\"\n\n\n[tool.ruff]\nexclude = [\"src/backend/base/langflow/alembic/*\"]\nline-length = 120\n\n[tool.ruff.lint]\npydocstyle.convention = \"google\"\nselect = [\"ALL\"]\nignore = [\n    \"C90\", # McCabe complexity\n    \"CPY\", # Missing copyright\n    \"COM812\", # Messes with the formatter\n    \"ERA\", # Eradicate commented-out code\n    \"FIX002\", # Line contains TODO\n    \"ISC001\", # Messes with the formatter\n    \"PERF203\", # Rarely useful\n    \"PLR09\", # Too many something (arg, statements, etc)\n    \"RUF012\", # Pydantic models are currently not well detected. See https://github.com/astral-sh/ruff/issues/13630\n    \"TD002\", # Missing author in TODO\n    \"TD003\", # Missing issue link in TODO\n    \"TRY301\", # A bit too harsh (Abstract `raise` to an inner function)\n\n    # Rules that are TODOs\n    \"ANN\",\n]\n\n# Preview rules that are not yet activated\nexternal = [\"RUF027\"]\n\n[tool.ruff.lint.per-file-ignores]\n\"scripts/*\" = [\n    \"D1\",\n    \"INP\",\n    \"T201\",\n]\n\"src/backend/tests/*\" = [\n    \"D1\",\n    \"PLR2004\",\n    \"S101\",\n    \"SLF001\",\n]\n\n[tool.mypy]\nplugins = [\"pydantic.mypy\"]\nfollow_imports = \"skip\"\ndisable_error_code = [\"type-var\"]\nnamespace_packages = true\nmypy_path = \"langflow\"\nignore_missing_imports = true\n\n[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n"
        },
        {
          "name": "render.yaml",
          "type": "blob",
          "size": 0.67,
          "content": "services:\n  # A Docker web service\n  - type: web\n    name: langflow\n    runtime: docker\n    dockerfilePath: ./docker/render.Dockerfile\n    repo: https://github.com/langflow-ai/langflow\n    branch: main\n    plan: standard\n    healthCheckPath: /health_check\n    autoDeploy: false\n    envVars:\n      - key: LANGFLOW_DATABASE_URL\n        value: sqlite:////app/data/.cache/langflow/langflow.db\n      - key: LANGFLOW_HOST\n        value: 0.0.0.0\n      - key: LANGFLOW_PORT\n        # default render port https://docs.render.com/web-services#port-binding\n        value: 10000\n      - key: LANGFLOW_LOG_LEVEL\n        value: INFO\n    disk:\n      name: langflow-data\n      mountPath: /app/data\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-results",
          "type": "tree",
          "content": null
        },
        {
          "name": "uv.lock",
          "type": "blob",
          "size": 1126.63,
          "content": null
        }
      ]
    }
  ]
}