{
  "metadata": {
    "timestamp": 1736562615408,
    "page": 99,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jamiebuilds/itsy-bitsy-data-structures",
      "stars": 8603,
      "defaultBranch": "master",
      "files": [
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 18.107421875,
          "content": "Creative Commons Attribution 4.0 International\n\n=======================================================================\n\nCreative Commons Corporation (\"Creative Commons\") is not a law firm and\ndoes not provide legal services or legal advice. Distribution of\nCreative Commons public licenses does not create a lawyer-client or\nother relationship. Creative Commons makes its licenses and related\ninformation available on an \"as-is\" basis. Creative Commons gives no\nwarranties regarding its licenses, any material licensed under their\nterms and conditions, or any related information. Creative Commons\ndisclaims all liability for damages resulting from their use to the\nfullest extent possible.\n\nUsing Creative Commons Public Licenses\n\nCreative Commons public licenses provide a standard set of terms and\nconditions that creators and other rights holders may use to share\noriginal works of authorship and other material subject to copyright\nand certain other rights specified in the public license below. The\nfollowing considerations are for informational purposes only, are not\nexhaustive, and do not form part of our licenses.\n\n     Considerations for licensors: Our public licenses are\n     intended for use by those authorized to give the public\n     permission to use material in ways otherwise restricted by\n     copyright and certain other rights. Our licenses are\n     irrevocable. Licensors should read and understand the terms\n     and conditions of the license they choose before applying it.\n     Licensors should also secure all rights necessary before\n     applying our licenses so that the public can reuse the\n     material as expected. Licensors should clearly mark any\n     material not subject to the license. This includes other CC-\n     licensed material, or material used under an exception or\n     limitation to copyright. More considerations for licensors:\n  wiki.creativecommons.org/Considerations_for_licensors\n\n     Considerations for the public: By using one of our public\n     licenses, a licensor grants the public permission to use the\n     licensed material under specified terms and conditions. If\n     the licensor's permission is not necessary for any reason--for\n     example, because of any applicable exception or limitation to\n     copyright--then that use is not regulated by the license. Our\n     licenses grant only permissions under copyright and certain\n     other rights that a licensor has authority to grant. Use of\n     the licensed material may still be restricted for other\n     reasons, including because others have copyright or other\n     rights in the material. A licensor may make special requests,\n     such as asking that all changes be marked or described.\n     Although not required by our licenses, you are encouraged to\n     respect those requests where reasonable. More_considerations\n     for the public:\n  wiki.creativecommons.org/Considerations_for_licensees\n\n=======================================================================\n\nCreative Commons Attribution 4.0 International Public License\n\nBy exercising the Licensed Rights (defined below), You accept and agree\nto be bound by the terms and conditions of this Creative Commons\nAttribution 4.0 International Public License (\"Public License\"). To the\nextent this Public License may be interpreted as a contract, You are\ngranted the Licensed Rights in consideration of Your acceptance of\nthese terms and conditions, and the Licensor grants You such rights in\nconsideration of benefits the Licensor receives from making the\nLicensed Material available under these terms and conditions.\n\n\nSection 1 -- Definitions.\n\n  a. Adapted Material means material subject to Copyright and Similar\n     Rights that is derived from or based upon the Licensed Material\n     and in which the Licensed Material is translated, altered,\n     arranged, transformed, or otherwise modified in a manner requiring\n     permission under the Copyright and Similar Rights held by the\n     Licensor. For purposes of this Public License, where the Licensed\n     Material is a musical work, performance, or sound recording,\n     Adapted Material is always produced where the Licensed Material is\n     synched in timed relation with a moving image.\n\n  b. Adapter's License means the license You apply to Your Copyright\n     and Similar Rights in Your contributions to Adapted Material in\n     accordance with the terms and conditions of this Public License.\n\n  c. Copyright and Similar Rights means copyright and/or similar rights\n     closely related to copyright including, without limitation,\n     performance, broadcast, sound recording, and Sui Generis Database\n     Rights, without regard to how the rights are labeled or\n     categorized. For purposes of this Public License, the rights\n     specified in Section 2(b)(1)-(2) are not Copyright and Similar\n     Rights.\n\n  d. Effective Technological Measures means those measures that, in the\n     absence of proper authority, may not be circumvented under laws\n     fulfilling obligations under Article 11 of the WIPO Copyright\n     Treaty adopted on December 20, 1996, and/or similar international\n     agreements.\n\n  e. Exceptions and Limitations means fair use, fair dealing, and/or\n     any other exception or limitation to Copyright and Similar Rights\n     that applies to Your use of the Licensed Material.\n\n  f. Licensed Material means the artistic or literary work, database,\n     or other material to which the Licensor applied this Public\n     License.\n\n  g. Licensed Rights means the rights granted to You subject to the\n     terms and conditions of this Public License, which are limited to\n     all Copyright and Similar Rights that apply to Your use of the\n     Licensed Material and that the Licensor has authority to license.\n\n  h. Licensor means the individual(s) or entity(ies) granting rights\n     under this Public License.\n\n  i. Share means to provide material to the public by any means or\n     process that requires permission under the Licensed Rights, such\n     as reproduction, public display, public performance, distribution,\n     dissemination, communication, or importation, and to make material\n     available to the public including in ways that members of the\n     public may access the material from a place and at a time\n     individually chosen by them.\n\n  j. Sui Generis Database Rights means rights other than copyright\n     resulting from Directive 96/9/EC of the European Parliament and of\n     the Council of 11 March 1996 on the legal protection of databases,\n     as amended and/or succeeded, as well as other essentially\n     equivalent rights anywhere in the world.\n\n  k. You means the individual or entity exercising the Licensed Rights\n     under this Public License. Your has a corresponding meaning.\n\n\nSection 2 -- Scope.\n\n  a. License grant.\n\n       1. Subject to the terms and conditions of this Public License,\n          the Licensor hereby grants You a worldwide, royalty-free,\n          non-sublicensable, non-exclusive, irrevocable license to\n          exercise the Licensed Rights in the Licensed Material to:\n\n            a. reproduce and Share the Licensed Material, in whole or\n               in part; and\n\n            b. produce, reproduce, and Share Adapted Material.\n\n       2. Exceptions and Limitations. For the avoidance of doubt, where\n          Exceptions and Limitations apply to Your use, this Public\n          License does not apply, and You do not need to comply with\n          its terms and conditions.\n\n       3. Term. The term of this Public License is specified in Section\n          6(a).\n\n       4. Media and formats; technical modifications allowed. The\n          Licensor authorizes You to exercise the Licensed Rights in\n          all media and formats whether now known or hereafter created,\n          and to make technical modifications necessary to do so. The\n          Licensor waives and/or agrees not to assert any right or\n          authority to forbid You from making technical modifications\n          necessary to exercise the Licensed Rights, including\n          technical modifications necessary to circumvent Effective\n          Technological Measures. For purposes of this Public License,\n          simply making modifications authorized by this Section 2(a)\n          (4) never produces Adapted Material.\n\n       5. Downstream recipients.\n\n            a. Offer from the Licensor -- Licensed Material. Every\n               recipient of the Licensed Material automatically\n               receives an offer from the Licensor to exercise the\n               Licensed Rights under the terms and conditions of this\n               Public License.\n\n            b. No downstream restrictions. You may not offer or impose\n               any additional or different terms or conditions on, or\n               apply any Effective Technological Measures to, the\n               Licensed Material if doing so restricts exercise of the\n               Licensed Rights by any recipient of the Licensed\n               Material.\n\n       6. No endorsement. Nothing in this Public License constitutes or\n          may be construed as permission to assert or imply that You\n          are, or that Your use of the Licensed Material is, connected\n          with, or sponsored, endorsed, or granted official status by,\n          the Licensor or others designated to receive attribution as\n          provided in Section 3(a)(1)(A)(i).\n\n  b. Other rights.\n\n       1. Moral rights, such as the right of integrity, are not\n          licensed under this Public License, nor are publicity,\n          privacy, and/or other similar personality rights; however, to\n          the extent possible, the Licensor waives and/or agrees not to\n          assert any such rights held by the Licensor to the limited\n          extent necessary to allow You to exercise the Licensed\n          Rights, but not otherwise.\n\n       2. Patent and trademark rights are not licensed under this\n          Public License.\n\n       3. To the extent possible, the Licensor waives any right to\n          collect royalties from You for the exercise of the Licensed\n          Rights, whether directly or through a collecting society\n          under any voluntary or waivable statutory or compulsory\n          licensing scheme. In all other cases the Licensor expressly\n          reserves any right to collect such royalties.\n\n\nSection 3 -- License Conditions.\n\nYour exercise of the Licensed Rights is expressly made subject to the\nfollowing conditions.\n\n  a. Attribution.\n\n       1. If You Share the Licensed Material (including in modified\n          form), You must:\n\n            a. retain the following if it is supplied by the Licensor\n               with the Licensed Material:\n\n                 i. identification of the creator(s) of the Licensed\n                    Material and any others designated to receive\n                    attribution, in any reasonable manner requested by\n                    the Licensor (including by pseudonym if\n                    designated);\n\n                ii. a copyright notice;\n\n               iii. a notice that refers to this Public License;\n\n                iv. a notice that refers to the disclaimer of\n                    warranties;\n\n                 v. a URI or hyperlink to the Licensed Material to the\n                    extent reasonably practicable;\n\n            b. indicate if You modified the Licensed Material and\n               retain an indication of any previous modifications; and\n\n            c. indicate the Licensed Material is licensed under this\n               Public License, and include the text of, or the URI or\n               hyperlink to, this Public License.\n\n       2. You may satisfy the conditions in Section 3(a)(1) in any\n          reasonable manner based on the medium, means, and context in\n          which You Share the Licensed Material. For example, it may be\n          reasonable to satisfy the conditions by providing a URI or\n          hyperlink to a resource that includes the required\n          information.\n\n       3. If requested by the Licensor, You must remove any of the\n          information required by Section 3(a)(1)(A) to the extent\n          reasonably practicable.\n\n       4. If You Share Adapted Material You produce, the Adapter's\n          License You apply must not prevent recipients of the Adapted\n          Material from complying with this Public License.\n\n\nSection 4 -- Sui Generis Database Rights.\n\nWhere the Licensed Rights include Sui Generis Database Rights that\napply to Your use of the Licensed Material:\n\n  a. for the avoidance of doubt, Section 2(a)(1) grants You the right\n     to extract, reuse, reproduce, and Share all or a substantial\n     portion of the contents of the database;\n\n  b. if You include all or a substantial portion of the database\n     contents in a database in which You have Sui Generis Database\n     Rights, then the database in which You have Sui Generis Database\n     Rights (but not its individual contents) is Adapted Material; and\n\n  c. You must comply with the conditions in Section 3(a) if You Share\n     all or a substantial portion of the contents of the database.\n\nFor the avoidance of doubt, this Section 4 supplements and does not\nreplace Your obligations under this Public License where the Licensed\nRights include other Copyright and Similar Rights.\n\n\nSection 5 -- Disclaimer of Warranties and Limitation of Liability.\n\n  a. UNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE\n     EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS\n     AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF\n     ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS,\n     IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION,\n     WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR\n     PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS,\n     ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT\n     KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT\n     ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU.\n\n  b. TO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE\n     TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION,\n     NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT,\n     INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES,\n     COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR\n     USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN\n     ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR\n     DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR\n     IN PART, THIS LIMITATION MAY NOT APPLY TO YOU.\n\n  c. The disclaimer of warranties and limitation of liability provided\n     above shall be interpreted in a manner that, to the extent\n     possible, most closely approximates an absolute disclaimer and\n     waiver of all liability.\n\n\nSection 6 -- Term and Termination.\n\n  a. This Public License applies for the term of the Copyright and\n     Similar Rights licensed here. However, if You fail to comply with\n     this Public License, then Your rights under this Public License\n     terminate automatically.\n\n  b. Where Your right to use the Licensed Material has terminated under\n     Section 6(a), it reinstates:\n\n       1. automatically as of the date the violation is cured, provided\n          it is cured within 30 days of Your discovery of the\n          violation; or\n\n       2. upon express reinstatement by the Licensor.\n\n     For the avoidance of doubt, this Section 6(b) does not affect any\n     right the Licensor may have to seek remedies for Your violations\n     of this Public License.\n\n  c. For the avoidance of doubt, the Licensor may also offer the\n     Licensed Material under separate terms or conditions or stop\n     distributing the Licensed Material at any time; however, doing so\n     will not terminate this Public License.\n\n  d. Sections 1, 5, 6, 7, and 8 survive termination of this Public\n     License.\n\n\nSection 7 -- Other Terms and Conditions.\n\n  a. The Licensor shall not be bound by any additional or different\n     terms or conditions communicated by You unless expressly agreed.\n\n  b. Any arrangements, understandings, or agreements regarding the\n     Licensed Material not stated herein are separate from and\n     independent of the terms and conditions of this Public License.\n\n\nSection 8 -- Interpretation.\n\n  a. For the avoidance of doubt, this Public License does not, and\n     shall not be interpreted to, reduce, limit, restrict, or impose\n     conditions on any use of the Licensed Material that could lawfully\n     be made without permission under this Public License.\n\n  b. To the extent possible, if any provision of this Public License is\n     deemed unenforceable, it shall be automatically reformed to the\n     minimum extent necessary to make it enforceable. If the provision\n     cannot be reformed, it shall be severed from this Public License\n     without affecting the enforceability of the remaining terms and\n     conditions.\n\n  c. No term or condition of this Public License will be waived and no\n     failure to comply consented to unless expressly agreed to by the\n     Licensor.\n\n  d. Nothing in this Public License constitutes or may be interpreted\n     as a limitation upon, or waiver of, any privileges and immunities\n     that apply to the Licensor or You, including from the legal\n     processes of any jurisdiction or authority.\n\n\n=======================================================================\n\nCreative Commons is not a party to its public licenses.\nNotwithstanding, Creative Commons may elect to apply one of its public\nlicenses to material it publishes and in those instances will be\nconsidered the \"Licensor.\" Except for the limited purpose of indicating\nthat material is shared under a Creative Commons public license or as\notherwise permitted by the Creative Commons policies published at\ncreativecommons.org/policies, Creative Commons does not authorize the\nuse of the trademark \"Creative Commons\" or any other trademark or logo\nof Creative Commons without its prior written consent including,\nwithout limitation, in connection with any unauthorized modifications\nto any of its public licenses or any other arrangements,\nunderstandings, or agreements concerning use of licensed material. For\nthe avoidance of doubt, this paragraph does not form part of the public\nlicenses.\n\nCreative Commons may be contacted at creativecommons.org.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.865234375,
          "content": "[![Itsy Bitsy Data Structures](https://cloud.githubusercontent.com/assets/952783/21579289/5754b03a-cf75-11e6-976c-f67a271aedaa.png)](itsy-bitsy-data-structures.js)\n\n***Welcome to Itsy Bitsy Data Structures!***\n\nIn here are super simplified examples of many of the common data structures\nwritten in easy to read JavaScript.\n\nReading through the guided code will help you learn about what data structures\nare, what their uses are, and how to discuss them.\n\n### [Want to jump into the code? Click here](itsy-bitsy-data-structures.js)\n\nAlso be sure to check out my other code walkthrough:\n[The Super Tiny Compiler](https://github.com/thejameskyle/the-super-tiny-compiler)\n\n---\n\n### Why should I care?\n\nData Structures might not be the juiciest topic in the world, but they are\nhugely important to growing as an engineer. Knowing data structures don't just\nmake your programs faster and more efficient, but they help you organize your\ncode and your thoughts so that you can build more complicated programs without\na ton of mental overhead.\n\n### But data structures are scary!\n\nYeah, lots of computer science topics are intimidating, and that's largely a\nfault of how they are taught. In this we're going to do a high level pass over\na lot of the key things you need to know in order to dive into them deeper.\nIt's more about introducing you to the shared language of data structures.\n\n### Okay so where do I begin?\n\nAwesome! Head on over to the\n[itsy-bitsy-data-structures.js](itsy-bitsy-data-structures.js) file.\n\n### I'm back, that didn't make sense\n\nOuch, I'm really sorry. I'm planning on doing a lot more work on this to add\ninline annotations. If you want to come back when that's done, you can either\nwatch/star this repo or follow me on\n[twitter](https://twitter.com/thejameskyle) for updates.\n\n---\n\n[![cc-by-4.0](https://licensebuttons.net/l/by/4.0/80x15.png)](http://creativecommons.org/licenses/by/4.0/)\n"
        },
        {
          "name": "itsy-bitsy-data-structures.js",
          "type": "blob",
          "size": 62.3203125,
          "content": "'use strict';\n\n/**\n * ███████████████═╗ ███████████████═╗   █████████████═╗ █████═╗   █████═╗\n * ███████████████ ║ ███████████████ ║ ███████████████ ║ █████ ║   █████ ║\n *  ╚═══█████ ╔════╝  ╚═══█████ ╔════╝ █████ ╔═════════╝ █████ ║   █████ ║\n *      █████ ║           █████ ║      █████ ║           █████ ║   █████ ║\n *      █████ ║           █████ ║      █████████████═╗   ███████████████ ║\n *      █████ ║           █████ ║       ╚█████████████═╗  ╚███████████ ╔═╝\n *      █████ ║           █████ ║         ╚══════█████ ║    ╚═█████ ╔══╝\n *      █████ ║           █████ ║                █████ ║      █████ ║\n * ███████████████═╗      █████ ║      ███████████████ ║      █████ ║\n * ███████████████ ║      █████ ║      █████████████ ╔═╝      █████ ║\n *  ╚══════════════╝       ╚════╝       ╚════════════╝         ╚════╝\n *\n * █████████████═══╗ ███████████████═╗ ███████████████═╗   █████████████═╗ █████═╗   █████═╗\n * ███████████████ ║ ███████████████ ║ ███████████████ ║ ███████████████ ║ █████ ║   █████ ║\n * █████ ╔═══█████ ║  ╚═══█████ ╔════╝  ╚═══█████ ╔════╝ █████ ╔═════════╝ █████ ║   █████ ║\n * █████ ║   █████ ║      █████ ║           █████ ║      █████ ║           █████ ║   █████ ║\n * █████████████ ╔═╝      █████ ║           █████ ║      █████████████═╗   ███████████████ ║\n * ███████████████═╗      █████ ║           █████ ║       ╚█████████████═╗  ╚███████████ ╔═╝\n * █████ ╔═══█████ ║      █████ ║           █████ ║         ╚══════█████ ║    ╚═█████ ╔══╝\n * █████ ║   █████ ║      █████ ║           █████ ║                █████ ║      █████ ║\n * ███████████████ ║ ███████████████═╗      █████ ║      ███████████████ ║      █████ ║\n * █████████████ ╔═╝ ███████████████ ║      █████ ║      █████████████ ╔═╝      █████ ║\n *  ╚════════════╝    ╚══════════════╝       ╚════╝       ╚════════════╝         ╚════╝\n *\n * █████████████═══╗   ███████████═══╗ ███████████████═╗   ███████████═══╗\n * ███████████████ ║ ███████████████ ║ ███████████████ ║ ███████████████ ║\n * █████ ╔═══█████ ║ █████ ╔═══█████ ║  ╚═══█████ ╔════╝ █████ ╔═══█████ ║\n * █████ ║   █████ ║ █████ ║   █████ ║      █████ ║      █████ ║   █████ ║\n * █████ ║   █████ ║ ███████████████ ║      █████ ║      ███████████████ ║\n * █████ ║   █████ ║ ███████████████ ║      █████ ║      ███████████████ ║\n * █████ ║   █████ ║ █████ ╔═══█████ ║      █████ ║      █████ ╔═══█████ ║\n * █████ ║   █████ ║ █████ ║   █████ ║      █████ ║      █████ ║   █████ ║\n * ███████████████ ║ █████ ║   █████ ║      █████ ║      █████ ║   █████ ║\n * █████████████ ╔═╝ █████ ║   █████ ║      █████ ║      █████ ║   █████ ║\n *  ╚════════════╝    ╚════╝    ╚════╝       ╚════╝       ╚════╝    ╚════╝\n *\n *   █████████████═╗ ███████████████═╗ █████████████═══╗ █████═╗   █████═╗   █████████████═╗ ███████████████═╗\n * ███████████████ ║ ███████████████ ║ ███████████████ ║ █████ ║   █████ ║ ███████████████ ║ ███████████████ ║\n * █████ ╔═════════╝  ╚═══█████ ╔════╝ █████ ╔═══█████ ║ █████ ║   █████ ║ █████ ╔═════════╝  ╚═══█████ ╔════╝\n * █████ ║                █████ ║      █████ ║   █████ ║ █████ ║   █████ ║ █████ ║                █████ ║\n * █████████████═╗        █████ ║      █████████████ ╔═╝ █████ ║   █████ ║ █████ ║                █████ ║\n *  ╚█████████████═╗      █████ ║      ███████████████═╗ █████ ║   █████ ║ █████ ║                █████ ║\n *    ╚══════█████ ║      █████ ║      █████ ║   █████ ║ █████ ║   █████ ║ █████ ║                █████ ║\n *           █████ ║      █████ ║      █████ ║   █████ ║ █████ ║   █████ ║ █████ ║                █████ ║\n * ███████████████ ║      █████ ║      █████ ║   █████ ║ ███████████████ ║ ███████████████═╗      █████ ║\n * █████████████ ╔═╝      █████ ║      █████ ║   █████ ║  ╚███████████ ╔═╝  ╚█████████████ ║      █████ ║\n *  ╚════════════╝         ╚════╝       ╚════╝    ╚════╝    ╚══════════╝      ╚════════════╝       ╚════╝\n *\n * █████═╗   █████═╗ █████████████═══╗ ████████████████═╗   ██████████████═╗\n * █████ ║   █████ ║ ███████████████ ║ ████████████████ ║ ████████████████ ║\n * █████ ║   █████ ║ █████ ╔═══█████ ║ █████ ╔══════════╝ █████ ╔══════════╝\n * █████ ║   █████ ║ █████ ║   █████ ║ █████ ║            █████ ║\n * █████ ║   █████ ║ █████████████ ╔═╝ ████████████████═╗ ██████████████═╗\n * █████ ║   █████ ║ ███████████████═╗ ████████████████ ║  ╚██████████████═╗\n * █████ ║   █████ ║ █████ ║   █████ ║ █████ ╔══════════╝    ╚═══════█████ ║\n * █████ ║   █████ ║ █████ ║   █████ ║ █████ ║                       █████ ║\n * ███████████████ ║ █████ ║   █████ ║ ████████████████═╗ ████████████████ ║\n *  ╚███████████ ╔═╝ █████ ║   █████ ║ ████████████████ ║ ██████████████ ╔═╝\n *    ╚══════════╝    ╚════╝    ╚════╝  ╚═══════════════╝  ╚═════════════╝\n *\n * ══════════════════════════════════════════════════════════════════════\n * ████ By James Kyle (@thejameskyle) █████████████████████████████████████████\n * ══════════════════════════════════════════════════════════════════════\n */\n\n/**\n * Today we're gonna learn all about data structures.\n *\n *    \"OOooooOOOooh *soo* exciting\" right?\n *\n * Yeah, they definitely aren't the juiciest topic out there, but they are\n * important. Not just to pass computer science 101, but in order to be a\n * better programmer.\n *\n * Knowing your data structures can help you:\n *\n *   - Manage complexity and make your programs easier to follow.\n *   - Build high-performance, memory-efficient programs.\n *\n * I believe that the former is more important. Using the right \n * data structure can drastically simplify what would otherwise \n * be complicated logic.\n *\n * The latter is important too. If performance or memory matters then\n * using the right data structure is more than often essential.\n *\n * In order to learn about data structures, we're going to implement a few of\n * them together. Don't worry, we'll keep the code nice and short. In fact,\n * there are way more comments than there is code.\n */\n\n/**\n * ============================================================================\n * ,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'\n * ============================================================================\n */\n\n/**\n * What are data structures?\n *\n * Essentially, they are different methods of storing and organizing data that\n * serve a number of different needs.\n *\n * Data can always be represented in many different ways. However, depending on\n * what that data is and what you need to do with it, one representation will\n * be a better choice than the others.\n *\n * To understand why let's first talk a bit about algorithms.\n */\n\n/*** ===================================================================== ***\\\n ** - ALGORITHMS ---------------------------------------------------------- **\n * ========================================================================= *\n *                                                                           *\n *                        ,--,--.    ,--,--.                                 *\n *   ,----------.        |   |   |  |   |   |            _____               *\n *  |`----------'|       |   |   |  |   |   |           |     |    ,------.  *\n *  |            |       |   |   |  |   |   |      ,--. | o o |   |`------'| *\n *  |            |      ,| +-|-+ |  | +-|-+ |`     |  | |_____|   |        | *\n *  |            | ,:==| | |###|======|###| | |====#==#====#=,,   |        | *\n *  |            | ||   `| +---+ |  | +---+ |'  ,,=#==#====O=``  ,|        | *\n *  |            | ||    |   |   |  |   |   |   ``=#==#====#=====||        | *\n *   `----------'  ||    |   |   |  |   |   |      |__|          `|        | *\n *    | | ``=| |===``    `--,',--`  `--,',--`      /||\\            `------'  *\n **   \\_/    \\_/         / /   \\ \\  / /   \\ \\     //||\\\\           |_|  |_| **\n\\*** ===================================================================== ***/\n\n/**\n * Algorithm is a fancy name for step-by-step sets of operations to be\n * performed.\n *\n * Data structures are implemented with algorithms, and algorithms are\n * implemented with data structures. It's data structures and algorithms all\n * the way down until you reach the microscopic people with punch cards that\n * control the computer. (That's how computers work right?)\n *\n * Any given task can be implemented in an infinite number of ways. So for\n * common tasks there are often many different algorithms that people have come up\n * with.\n *\n * For example, there are an absurd number of algorithms for sorting a set of\n * unordered items:\n *\n *     Insertion Sort, Selection Sort, Merge Sort, Bubble Sort, Heap Sort,\n *     Quick Sort, Shell Sort, Timsort, Bucket Sort, Radix Sort, ...\n *\n * Some of these are significantly faster than others. Some use less memory.\n * Some are easy to implement. Some are based on assumptions about the dataset.\n *\n * Every single one of them will be better for *something*. So you'll need to\n * make a decision based on what your needs are and for that, you'll need a way\n * of comparing them, a way to measure them.\n *\n * When we compare the performance of algorithms we use a rough measurement of\n * their average and worst-case performance using something called \"Big-O\".\n */\n\n/*** ===================================================================== ***\\\n ** - BIG-O NOTATION ------------------------------------------------------ **\n * ========================================================================= *\n *           a           b                                 d                 *\n *           a         b    O(N^2)                      d                    *\n *     O(N!) a        b                O(N log N)    d                    c  *\n *           a      b                            d                 c         *\n *          a      b                          d             c        O(N)    *\n *          a    b                         d         c                       *\n *          a  b                       d      c                              *\n *         a  b                     d  c                                     *\n *         ab                   c                          O(1)              *\n *  e    e    e    e    ec   d    e    e    e    e    e     e    e    e      *\n *      ba        c      d                                                   *\n *    ba   c        d                       f    f    f    f    f    f    f  *\n ** cadf    f d    f    f    f    f    f       O(log N)                     **\n\\*** ===================================================================== ***/\n\n/**\n * Big-O Notation is a way of roughly measuring the performance of algorithms\n * in order to compare one against another when discussing them.\n *\n * Big-O is a mathematical notation that we borrowed in computer science to\n * classify algorithms by how they respond to the number (N) of items that you\n * give them.\n *\n * There are two primary things that you measure with Big-O:\n *\n * - **Time complexity** refers to the total count of operations an algorithm\n *   will perform given a set of items.\n *\n * - **Space complexity** refers to the total memory an algorithm will take up\n *   while running given a set of items.\n *\n * We measure these independently from one another because while an algorithm\n * may perform fewer operations than another, it may also take up way more\n * memory. Depending on what your requirements are, one may be a better choice\n * than the other.\n *\n * These are some common Big-O's:\n *\n *     Name           Notation     How you feel when they show up at your party\n *     ------------------------------------------------------------------------\n *     Constant       O(1)         AWESOME!!\n *     Logarithmic    O(log N)     GREAT!\n *     Linear         O(N)         OKAY.\n *     Linearithmic   O(N log N)   UGH...\n *     Polynomial     O(N ^ 2)     SHITTY\n *     Exponential    O(2 ^ N)     HORRIBLE\n *     Factorial      O(N!)        WTF\n *\n * To give you an idea of how many operations we're talking about. Let's look\n * at what these would equal given the (N) number of items.\n *\n *                N = 5            10             20             30\n *     -----------------------------------------------------------------------\n *     O(1)           1            1              1              1\n *     O(log N)       2.3219...    3.3219...      4.3219...      4.9068...\n *     O(N)           5            10             20             30\n *     O(N log N)     11.609...    33.219...      84.638...      147.204...\n *     O(N ^ 2)       25           100            400            900\n *     O(2 ^ N)       32           1024           1,048,576      1,073,741,824\n *     O(N!)          120          3,628,800      2,432,902,0... 265,252,859,812,191,058,636,308,480,000,000\n *\n * As you can see, even for relatively small sets of data you could do \n * a **lot** of extra work.\n *\n * With data structures, you can perform 4 primary types of actions:\n * Accessing, Searching, Inserting, and Deleting.\n *\n * It is important to note that data structures may be good at one action but\n * bad at another.\n *\n *                            Accessing    Searching    Inserting    Deleting\n *    -------------------------------------------------------------------------\n *                  Array     O(1)         O(N)         O(N)         O(N)\n *            Linked List     O(N)         O(N)         O(1)         O(1)\n *     Binary Search Tree     O(log N)     O(log N)     O(log N)     O(log N)\n *\n * Or rather...\n *\n *                            Accessing    Searching    Inserting    Deleting\n *    -------------------------------------------------------------------------\n *                  Array     AWESOME!!    OKAY         OKAY         OKAY\n *            Linked List     OKAY         OKAY         AWESOME!!    AWESOME!!\n *     Binary Search Tree     GREAT!       GREAT!       GREAT!       GREAT!\n *\n * Even further, some actions will have a different \"average\" performance and a\n * \"worst case scenario\" performance.\n *\n * There is no perfect data structure, and you choose one over another based on\n * the data that you are working with and the things you are going to do with\n * it. This is why it is important to know a number of different common data\n * structures so that you can choose from them.\n */\n\n/*** ===================================================================== ***\\\n ** - MEMORY -------------------------------------------------------------- **\n * ========================================================================= *\n *                             _.-..                                         *\n *                           ,'9 )\\)`-.,.--.                                 *\n *                           `-.|           `.                               *\n *                              \\,      ,    \\)                              *\n *                               `.  )._\\   (\\                               *\n *                                |//   `-,//                                *\n *                                ]||    //\"                                 *\n **                        hjw    \"\"    \"\"                                  **\n\\*** ===================================================================== ***/\n\n/**\n * A computer's memory is pretty boring, it's just a bunch of ordered slots\n * where you can store information. You hold onto memory addresses in order to\n * find information.\n *\n * Let's imagine a chunk of memory like this:\n *\n *      Values: |1001|0110|1000|0100|0101|1010|0010|0001|1101|1011...\n *   Addresses: 0    1    2    3    4    5    6    7    8    9    ...\n *\n * If you've ever wondered why things are zero-indexed in programming languages\n * before, it is because of the way that memory works. If you want to read the\n * first chunk of memory you read from 0 to 1, the second you read from 1 to 2.\n * So the address that you hold onto for each of those is 0 and 1 respectively.\n *\n * Your computer has much much more memory than this, and it is all just a\n * continuation of the pattern above.\n *\n * Memory is a bit like the wild west, every program running on your machine is\n * stored within this same *physical* data structure. Without layers of\n * abstraction over it, it would be extremely difficult to use.\n *\n * But these abstractions serve two additional purposes:\n *\n *   - Storing data in memory in a way that is more efficient and/or faster to\n *     work with.\n *   - Storing data in memory in a way that makes it easier to use.\n */\n\n/*** ===================================================================== ***\\\n ** - LISTS --------------------------------------------------------------- **\n * ========================================================================= *\n *                  *     _______________________                            *\n *                    ()=(_______________________)=()           *            *\n *       *                |                     |                            *\n *                        |   ~ ~~~~~~~~~~~~~   |       *               *    *\n *             *          |                     |                            *\n *   *                    |   ~ ~~~~~~~~~~~~~   |         *                  *\n *                        |                     |                            *\n *                        |   ~ ~~~~~~~~~~~~~   |                 *          *\n *        *               |                     |                            *\n *                   *    |_____________________|         *        *         *\n *                    ()=(_______________________)=()                        *\n **                                                                         **\n\\*** ===================================================================== ***/\n\n/**\n * To demonstrate the raw interaction between memory and a data structure we're\n * going to first implement a list.\n *\n * A list is a representation of an ordered sequence of values where the same\n * value may appear many times.\n */\n\nclass List {\n\n  /**\n   * We start with an empty block of memory which we are going to represent\n   * with a normal JavaScript array and we'll store the length of the list.\n   *\n   * Note that we want to store the length separately because in real life the\n   * \"memory\" doesn't have a length you can read from.\n   */\n\n  constructor() {\n    this.memory = [];\n    this.length = 0;\n  }\n\n  /**\n   * First we need a way to retrieve data from our list.\n   *\n   * With a plain list, you have very fast memory access because you keep track\n   * of the address directly.\n   *\n   * List access is constant O(1) - \"AWESOME!!\"\n   */\n\n  get(address) {\n    return this.memory[address];\n  }\n\n  /**\n   * Because lists have an order you can insert stuff at the start, middle,\n   * or end of them.\n   *\n   * For our implementation, we're going to focus on adding and removing values\n   * at the start or end of our list with these four methods:\n   *\n   *   - Push    - Add value to the end\n   *   - Pop     - Remove a value from the end\n   *   - Unshift - Add value to the start\n   *   - Shift   - Remove a value from the start\n   */\n\n  /*\n   * Starting with \"push\" we need a way to add items to the end of the list.\n   *\n   * It is as simple as adding a value in the address after the end of our\n   * list. Because we store the length this is easy to calculate. We just add\n   * the value and increment our length.\n   *\n   * Pushing an item to the end of a list is constant O(1) - \"AWESOME!!\"\n   */\n\n  push(value) {\n    this.memory[this.length] = value;\n    this.length++;\n  }\n\n  /**\n   * Next we need a way to \"pop\" items off of the end of our list.\n   *\n   * Similar to push all we need to do is remove the value at the address at\n   * the end of our list. Then just decrement length.\n   *\n   * Popping an item from the end of a list is constant O(1) - \"AWESOME!!\"\n   */\n\n  pop() {\n    // Don't do anything if we don't have any items.\n    if (this.length === 0) return;\n\n    // Get the last value, stop storing it, and return it.\n    let lastAddress = this.length - 1;\n    let value = this.memory[lastAddress];\n    delete this.memory[lastAddress];\n    this.length--;\n\n    // Also return the value so it can be used.\n    return value;\n  }\n\n  /**\n   * \"push\" and \"pop\" both operate on the end of a list, and overall are pretty\n   * simple operations because they don't need to be concerned with the rest of\n   * the list.\n   *\n   * Let's see what happens when we operate at the beginning of the list with\n   * \"unshift\" and \"shift\".\n   */\n\n  /**\n   * In order to add a new item at the beginning of our list, we need to make\n   * room for our value at the start by sliding all of the values over by one.\n   *\n   *     [a, b, c, d, e]\n   *      0  1  2  3  4\n   *       ⬊  ⬊  ⬊  ⬊  ⬊\n   *         1  2  3  4  5\n   *     [x, a, b, c, d, e]\n   *\n   * In order to slide all of the items over we need to iterate over each one\n   * moving the prev value over.\n   *\n   * Because we have to iterate over every single item in the list:\n   *\n   * Unshifting an item to the start of a list is linear O(N) - \"OKAY.\"\n   */\n\n  unshift(value) {\n    // Store the value we are going to add to the start.\n    let previous = value;\n\n    // Iterate through each item...\n    for (let address = 0; address < this.length; address++) {\n      // replacing the \"current\" value with the \"previous\" value and storing the\n      // \"current\" value for the next iteration.\n      let current = this.memory[address];\n      this.memory[address] = previous;\n      previous = current;\n    }\n\n    // Add the last item in a new position at the end of the list.\n    this.memory[this.length] = previous;\n    this.length++;\n  }\n\n  /**\n   * Finally, we need to write a shift function to move in the opposite\n   * direction.\n   *\n   * We delete the first value and then slide through every single item in the\n   * list to move it down one address.\n   *\n   *     [x, a, b, c, d, e]\n   *         1  2  3  4  5\n   *       ⬋  ⬋  ⬋  ⬋  ⬋\n   *      0  1  2  3  4\n   *     [a, b, c, d, e]\n   *\n   * Shifting an item from the start of a list is linear O(N) - \"OKAY.\"\n   */\n\n  shift() {\n    // Don't do anything if we don't have any items.\n    if (this.length === 0) return;\n\n    let value = this.memory[0];\n\n    // Iterate through each item...\n    for (let address = 0; address < this.length - 1; address++) {\n      // and replace them with the next item in the list.\n      this.memory[address] = this.memory[address + 1];\n    }\n\n    // Delete the last item since it is now in the previous address.\n    delete this.memory[this.length - 1];\n    this.length--;\n\n    return value;\n  }\n}\n\n/**\n * Lists are great for fast access and dealing with items at the end. However,\n * as we've seen it isn't great at dealing with items not at the end of the\n * list and we have to manually hold onto memory addresses.\n *\n * So let's take a look at a different data structure and how it deals with\n * adding, accessing, and removing values without needing to know memory\n * addresses.\n */\n\n/*** ===================================================================== ***\\\n ** - HASH TABLES --------------------------------------------------------- **\n * ========================================================================= *\n *                           ((\\                                             *\n *     (              _  ,-_  \\ \\                                            *\n *     )             / \\/  \\ \\ \\ \\                                           *\n *     (            /)| \\/\\ \\ \\| |          .'---------------------'.        *\n *     `~()_______)___)\\ \\ \\ \\ \\ |        .'                         '.      *\n *                 |)\\ )  `' | | |      .'-----------------------------'.    *\n *                /  /,          |      '...............................'    *\n *        ejm     |  |          /         \\   _____________________   /      *\n *                \\            /           | |_)                 (_| |       *\n *                 \\          /            | |                     | |       *\n *                  )        /             | |                     | |       *\n **                /       /              (___)                   (___)     **\n\\*** ===================================================================== ***/\n\n/**\n * A hash table is a data structure that's *unordered*. Instead we have \"keys\" and \"values\" where we\n * computed an address in memory using the key.\n *\n * The basic idea is that we have keys that are \"hashable\" (which we'll get to\n * in a second) and can be used to add, access, and remove from memory very\n * efficiently.\n *\n *     var hashTable = new HashTable();\n *\n *     hashTable.set('myKey', 'myValue');\n *     hashTable.get('myKey'); // >> 'myValue'\n */\n\nclass HashTable {\n\n  /**\n   * Again we're going to use a plain JavaScript array to represent our memory.\n   */\n\n  constructor() {\n    this.memory = [];\n  }\n\n  /**\n   * In order to store key-value pairs in memory from our hash table we need a\n   * way to take the key and turn it into an address. We do this through an\n   * operation known as \"hashing\".\n   *\n   * Basically it takes a key and serializes it into a unique number for that\n   * key.\n   *\n   *    hashKey(\"abc\") =>  96354\n   *    hashKey(\"xyz\") => 119193\n   *\n   * You have to be careful though, if you had a really big key you don't want\n   * to match it to a memory address that does not exist.\n   *\n   * So the hashing algorithm needs to limit the size, which means that there\n   * are a limited number of addresses for an unlimited number of values.\n   *\n   * The result is that you can end up with collisions. Places where two keys\n   * get turned into the same address.\n   *\n   * Any real-world hash table implementation would have to deal with this,\n   * however, we are just going to glaze over it and pretend that doesn't happen.\n   */\n\n  /**\n   * Let's set up our \"hashKey\" function.\n   *\n   * Don't worry about understanding the logic of this function, just know that\n   * it accepts a string and outputs a (mostly) unique address that we will use\n   * in all of our other functions.\n   */\n\n  hashKey(key) {\n    let hash = 0;\n    for (let index = 0; index < key.length; index++) {\n      // Oh look– magic.\n      let code = key.charCodeAt(index);\n      hash = ((hash << 5) - hash) + code | 0;\n    }\n    return hash;\n  }\n\n  /**\n   * Next, let's define our \"get\" function so we have a way of accessing values\n   * by their key.\n   *\n   * HashTable access is constant O(1) - \"AWESOME!!\"\n   */\n\n  get(key) {\n    // We start by turning our key into an address.\n    let address = this.hashKey(key);\n    // Then we simply return whatever is at that address.\n    return this.memory[address];\n  }\n\n  /**\n   * We also need a way of adding data before we access it, so we will create\n   * a \"set\" function that inserts values.\n   *\n   * HashTable setting is constant O(1) - \"AWESOME!!\"\n   */\n\n  set(key, value) {\n    // Again we start by turning the key into an address.\n    let address = this.hashKey(key);\n    // Then just set the value at that address.\n    this.memory[address] = value;\n  }\n\n  /**\n   * Finally we just need a way to remove items from our hash table.\n   *\n   * HashTable deletion is constant O(1) - \"AWESOME!!\"\n   */\n\n  remove(key) {\n    // As always, we hash the key to get an address.\n    let address = this.hashKey(key);\n    // Then, if it exists, we `delete` it.\n    if (this.memory[address]) {\n      delete this.memory[address];\n    }\n  }\n}\n\n/**\n * ============================================================================\n * ,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'\n * ============================================================================\n */\n\n/**\n * From this point going forward we are going to stop interacting directly with\n * memory as the rest of these data structures start to be implemented with\n * other data structures.\n *\n * These data structures focus on doing two things:\n *\n *   - Organizing data based on how it is used\n *   - Abstracting away implementation details\n *\n * These data structures focus on creating an organization that makes sense for\n * various types of programs. They insert a language that allows you to discuss\n * more complicated logic. All of this while abstracting away implementation\n * details so that their implementation can change to be made faster.\n */\n\n/*** ===================================================================== ***\\\n ** - STACKS -------------------------------------------------------------- **\n * ========================================================================= *\n *                             _ . - - -- .. _                               *\n *         ||||            .-'      /```\\     `'-_             /|            *\n *         ||||           (     /`` \\___/ ```\\    )           | |            *\n *         \\__/           |`\"-//..__     __..\\\\-\"`|           | |            *\n *          ||            |`\"||...__`````__...||\"`|           | |            *\n *          ||            |`\"||...__`````__...||\"`|           \\ |            *\n *          ||       _,.--|`\"||...__`````__...||\"`|--.,_       ||            *\n *          ||    .'`     |`\"||...__`````__...||\"`|     `'.    ||            *\n *          ||   '.        `/ |...__`````__...| \\         .'   ||            *\n *          ||     `'-..__  ``      `````      ``  __..-'`     ||            *\n *                        `\"\"---,,,_______,,,---\"\"`                          *\n **                                                                         **\n\\*** ===================================================================== ***/\n\n/**\n * Stacks are similar to lists in that they have an order, but they limit you\n * to only pushing and popping values at the end of the list, which as we saw\n * before are very fast operations when mapping directly to memory.\n *\n * However, Stacks can also be implemented with other data structures in order\n * to add functionality to them.\n *\n * The most common usage of the stacks is in the places where you have one process adding\n * items to the stack and another process removing them from the end–\n * prioritizing items added most recently.\n */\n\nclass Stack {\n\n  /**\n   * We're going to again be backed by a JavaScript array, but this time it\n   * represents a list like we implemented before rather than memory.\n   */\n\n  constructor() {\n    this.list = [];\n    this.length = 0;\n  }\n\n  /**\n   * We're going to implement two of the functions from list's \"push\" and \"pop\"\n   * which are going to be identical in terms of functionality.\n   */\n\n  /**\n   * Push to add items to the top of the stack.\n   */\n\n  push(value) {\n    this.length++;\n    this.list.push(value);\n  }\n\n  /**\n   * And pop to remove items from the top of the stack.\n   */\n\n  pop() {\n    // Don't do anything if we don't have any items.\n    if (this.length === 0) return;\n\n    // Pop the last item off the end of the list and return the value.\n    this.length--;\n    return this.list.pop();\n  }\n\n  /**\n   * We're also going to add a function in order to view the item at the top of\n   * the stack without removing it from the stack.\n   */\n\n  peek() {\n    // Return the last item in \"items\" without removing it.\n    return this.list[this.length - 1];\n  }\n}\n\n/*** ===================================================================== ***\\\n ** - QUEUES -------------------------------------------------------------- **\n * ========================================================================= *\n *                   /:\"\"|                     ,@@@@@@.                      *\n *                  |: oo|_                   ,@@@@@`oo                      *\n *                  C     _)                  @@@@C   _)                     *\n *                    ) /                     \"@@@@ '=                       *\n *                   /`\\\\                      ```)/                         *\n *                  || | |                       /`\\\\                        *\n *                  || | |                      || | \\                       *\n *                  ||_| |                      || | /                       *\n *                  \\( ) |                      ||_| |                       *\n *               |~~~`-`~~~|                    |))) |                       *\n *         (_)   |         |         (_)        |~~~/          (_)           *\n *         | |`\"\"....__     __....\"\"`| |`\"\"...._|| /  __....\"\"`| |           *\n *         | |`\"\"....__`````__....\"\"`| |`\"\"....__`````__....\"\"`| |           *\n *         | |       | ||```         | |        ||`|``         | |           *\n *         | |       |_||__          | |        ||_|__         | |           *\n *        ,| |, jgs  (____))        ,| |,       ((;:;:)       ,| |,          *\n **       `---`                     `---`                     `---`         **\n\\*** ===================================================================== ***/\n\n/**\n * Next, we're going to build a queue which is complementary to stacks. The\n * difference is that this time you remove items from the start of the queue\n * rather than the end. Removing the oldest items rather than the most recent.\n *\n * Again, because this limits the amount of functionality, there are many\n * different ways of implementing it. A good way might be to use a linked list\n * which we will see later.\n */\n\nclass Queue {\n\n  /**\n   * Again, our queue is using a JavaScript array as a list rather than memory.\n   */\n\n  constructor() {\n    this.list = [];\n    this.length = 0;\n  }\n\n  /**\n   * Similar to stacks we're going to define two functions for adding and\n   * removing items from the queue. The first is \"enqueue\".\n   *\n   * This will push values to the end of the list.\n   */\n\n  enqueue(value) {\n    this.length++;\n    this.list.push(value);\n  }\n\n  /**\n   * Next is \"dequeue\", instead of removing the item from the end of the list,\n   * we're going to remove it from the start.\n   */\n\n  dequeue() {\n    // Don't do anything if we don't have any items.\n    if (this.length === 0) return;\n\n    // Shift the first item off the start of the list and return the value.\n    this.length--;\n    return this.list.shift();\n  }\n\n  /**\n   * Same as stacks we're going to define a \"peek\" function for getting the next\n   * value without removing it from the queue.\n   */\n\n  peek() {\n    return this.list[0];\n  }\n}\n\n/**\n * The important thing to note here is that because we used a list to back our\n * queue it inherits the performance of \"shift\" which is linear O(N) \"OKAY.\"\n *\n * Later we'll see linked lists that will allow us to implement a much faster\n * Queue.\n */\n\n/**\n * ============================================================================\n * ,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'\n * ============================================================================\n */\n\n/**\n * From this point forward we're going to start dealing with data structures\n * where the values of the data structure reference one another.\n *\n *    +- Data Structure ---------------------------------------+\n *    |  +- Item A ---------------+ +- Item B ---------------+ |\n *    |  | Value: 1               | | Value: 2               | |\n *    |  | Reference to: (Item B) | | Reference to: (Item A) | |\n *    |  +------------------------+ +------------------------+ |\n *    +--------------------------------------------------------+\n *\n * The values inside the data structure become their own mini data structures\n * in that they contain a value along with additional information including\n * references to other items within the overall data structure.\n *\n * You'll see what I mean by this in a second.\n */\n\n/*** ===================================================================== ***\\\n ** - GRAPHS -------------------------------------------------------------- **\n * ========================================================================= *\n *                                                                           *\n *   |                                 RICK ASTLEY'S NEVER GONNA...          *\n *   |       +-+                                                             *\n *   |  +-+  |-|                          [^] - GIVE YOU UP                  *\n *   |  |^|  |-|                 +-+      [-] - LET YOU DOWN                 *\n *   |  |^|  |-|       +-+       |*|      [/] - RUN AROUND AND DESERT YOU    *\n *   |  |^|  |-|  +-+  |\\|       |*|      [\\] - MAKE YOU CRY                 *\n *   |  |^|  |-|  |/|  |\\|  +-+  |*|      [.] - SAY GOODBYE                  *\n *   |  |^|  |-|  |/|  |\\|  |.|  |*|      [*] - TELL A LIE AND HURT YOU      *\n *   |  |^|  |-|  |/|  |\\|  |.|  |*|                                         *\n *   +--------------------------------                                       *\n **                                                                         **\n\\*** ===================================================================== ***/\n\n/**\n * Contrary to the ascii art above, a graph is not a visual chart of some sort.\n *\n * Instead imagine it like this:\n *\n *     A –→ B ←–––– C → D ↔ E\n *     ↑    ↕     ↙ ↑     ↘\n *     F –→ G → H ← I ––––→ J\n *          ↓     ↘ ↑\n *          K       L\n *\n * We have a bunch of \"nodes\" (A, B, C, D, ...) that are connected with lines.\n *\n * These nodes are going to look like this:\n *\n *     Node {\n *       value: ...,\n *       lines: [(Node), (Node), ...]\n *     }\n *\n * The entire graph will look like this:\n *\n *     Graph {\n *       nodes: [\n *         Node {...},\n *         Node {...},\n *         ...\n *       ]\n *     }\n */\n\nclass Graph {\n\n  /**\n   * We'll hold onto all of our nodes in a regular JavaScript array. Not\n   * because there is any particular order to the nodes but because we need a\n   * way to store references to everything.\n   */\n\n  constructor() {\n    this.nodes = [];\n  }\n\n  /**\n   * We can start to add values to our graph by creating nodes without any\n   * lines.\n   */\n\n  addNode(value) {\n    return this.nodes.push({\n      value,\n      lines: []\n    });\n  }\n\n  /**\n   * Next we need to be able to lookup nodes in the graph. Most of the time\n   * you'd have another data structure on top of a graph in order to make\n   * searching faster.\n   *\n   * But for our case, we're simply going to search through all of the nodes to find\n   * the one with the matching value. This is a slower option, but it works for\n   * now.\n   */\n\n  find(value) {\n    return this.nodes.find(node => {\n      return node.value === value;\n    });\n  }\n\n  /**\n   * Next we can connect two nodes by making a \"line\" from one to the other.\n   */\n\n  addLine(startValue, endValue) {\n    // Find the nodes for each value.\n    let startNode = this.find(startValue);\n    let endNode = this.find(endValue);\n\n    // Freak out if we didn't find one or the other.\n    if (!startNode || !endNode) {\n      throw new Error('Both nodes need to exist');\n    }\n\n    // And add a reference to the endNode from the startNode.\n    startNode.lines.push(endNode);\n  }\n}\n\n/**\n * Finally you can use a graph like this:\n *\n *     var graph = new Graph();\n *     graph.addNode(1);\n *     graph.addNode(2);\n *     graph.addLine(1, 2);\n *     var two = graph.find(1).lines[0];\n *\n * This might seem like a lot of work to do very little, but it's actually a\n * quite powerful pattern, especially for finding sanity in complex programs.\n *\n * They do this by optimizing for the connections between data rather than\n * operating on the data itself. Once you have one node in the graph, it's\n * extremely simple to find all the related items in the graph.\n *\n * Tons of things can be represented this way, users with friends, the 800\n * transitive dependencies in a node_modules folder, the internet itself is a\n * graph of webpages connected together by links.\n */\n\n/*** ===================================================================== ***\\\n ** - LINKED LISTS -------------------------------------------------------- **\n * ========================================================================= *\n *      _______________________                                              *\n *  ()=(_______________________)=()              ,-----------------,_        *\n *      |                     |               ,\"                      \",     *\n *      |   ~ ~~~~~~~~~~~~~   |             ,'    ,---------------,     `,   *\n *      |               ,----------------------------,          ,----------- *\n *      |   ~ ~~~~~~~~ |                              |        |             *\n *      |               `----------------------------'          `----------- *\n *      |   ~ ~~~~~~~~~~~~~   |            `,    `----------------'     ,'   *\n *      |                     |              `,                      ,'      *\n *      |_____________________|                 `------------------'         *\n *  ()=(_______________________)=()                                          *\n **                                                                         **\n\\*** ===================================================================== ***/\n\n/**\n * Next we're going to see how a graph-like structure can help optimize ordered\n * lists of data.\n *\n * Linked lists are a very common data structure that is often used to\n * implement other data structures because of its ability to efficiently add\n * items to the start, middle, and end.\n *\n * The basic idea of a linked list is similar to a graph. You have nodes that\n * point to other nodes. They look sorta like this:\n *\n *     1 -> 2 -> 3 -> 4 -> 5\n *\n * Visualizing them as a JSON-like structure looks like this:\n *\n *     {\n *       value: 1,\n *       next: {\n *         value: 2,\n *         next: {\n *           value: 3,\n *           next: {...}\n *         }\n *       }\n *     }\n */\n\nclass LinkedList {\n\n  /**\n   * Unlike a graph, a linked list has a single node that starts off the entire\n   * chain. This is known as the \"head\" of the linked list.\n   *\n   * We're also going to track the length.\n   */\n\n  constructor() {\n    this.head = null;\n    this.length = 0;\n  }\n\n  /**\n   * First we need a way to retrieve a value in a given position.\n   *\n   * This works differently than normal lists as we can't just jump to the\n   * correct position. Instead, we need to move through the individual nodes.\n   */\n\n  get(position) {\n    // Throw an error if position is greater than the length of the LinkedList\n    if (position >= this.length) {\n      throw new Error('Position outside of list range');\n    }\n\n    // Start with the head of the list.\n    let current = this.head;\n\n    // Slide through all of the items using node.next until we reach the\n    // specified position.\n    for (let index = 0; index < position; index++) {\n      current = current.next;\n    }\n\n    // Return the node we found.\n    return current;\n  }\n\n  /**\n   * Next we need a way to add nodes to the specified position.\n   *\n   * We're going for a generic add method that accepts a value and a position.\n   */\n\n  add(value, position) {\n    // First create a node to hold our value.\n    let node = {\n      value,\n      next: null\n    };\n\n    // We need to have a special case for nodes being inserted at the head.\n    // We'll set the \"next\" field to the current head and then replace it with\n    // our new node.\n    if (position === 0) {\n      node.next = this.head;\n      this.head = node;\n\n      // If we're adding a node in any other position we need to splice it in\n      // between the current node and the previous node.\n    } else {\n      // First, find the previous node and the current node.\n      let prev = this.get(position - 1);\n      let current = prev.next;\n      // Then insert the new node in between them by setting its \"next\" field\n      // to the current node and updating the previous node's \"next\" field to\n      // the new one.\n      node.next = current;\n      prev.next = node;\n    }\n\n    // Finally just increment the length.\n    this.length++;\n  }\n\n  /**\n   * The last method we need is a remove method. We're just going to look up a\n   * node by its position and splice it out of the chain.\n   */\n\n  remove(position) {\n    // We should not be able to remove from an empty list\n    if (!this.head) {\n      throw new Error('Removing from empty list')\n    }\n    // If we're removing the first node we simply need to set the head to the\n    // next node in the chain\n    if (position === 0) {\n      this.head = this.head.next;\n\n      // For any other position, we need to look up the previous node and set it\n      // to the node after the current position.\n    } else {\n      let prev = this.get(position - 1);\n      prev.next = prev.next.next;\n    }\n\n    // Then we just decrement the length.\n    this.length--;\n  }\n}\n\n/**\n * ============================================================================\n * ,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'\n * ============================================================================\n */\n\n/**\n * The remaining two data structures we are going to cover are both in the\n * \"tree\" family.\n *\n * Much like real life, there are many different types of tree data structures.\n *\n *     Binary Trees:\n *       AA Tree, AVL Tree, Binary Search Tree, Binary Tree, Cartesian Tree,\n *       left child/right sibling tree, order statistic tree, Pagoda, ...\n *\n *     B Trees:\n *       B Tree, B+ Tree, B* Tree, B Sharp Tree, Dancing Tree, 2-3 Tree, ...\n *\n *     Heaps:\n *       Heap, Binary Heap, Weak Heap, Binomial Heap, Fibonacci Heap, Leonardo\n *       Heap, 2-3 Heap, Soft Heap, Pairing Heap, Leftist Heap, Treap, ...\n *\n *     Trees:\n *       Trie, Radix Tree, Suffix Tree, Suffix Array, FM-index, B-trie, ...\n *\n *     Multi-way Trees:\n *       Ternary Tree, K-ary tree, And-or tree, (a,b)-tree, Link/Cut Tree, ...\n *\n *     Space Partitioning Trees:\n *       Segment Tree, Interval Tree, Range Tree, Bin, Kd Tree, Quadtree,\n *       Octree, Z-Order, UB-Tree, R-Tree, X-Tree, Metric Tree, Cover Tree, ...\n *\n *     Application-Specific Trees:\n *       Abstract Syntax Tree, Parse Tree, Decision Tree, Minimax Tree, ...\n *\n * Little did you know you'd be studying dendrology today... and that's not even\n * all of them. But don't let any of this scare you, most of those don't matter\n * at all. There were just a lot of Computer Science PhDs who had something to\n * prove.\n *\n * Trees are much like graphs or linked lists except they are \"unidirectional\".\n * All this means is that they can't have loops of references.\n *\n *        Tree:                Not a Tree:\n *\n *          A                        A\n *        ↙   ↘                    ↗   ↘\n *      B       C                B ←–––– C\n *\n * If you can draw a loop between connected nodes in a tree... well, you don't\n * have a tree.\n *\n * Trees have many different uses, they can be used to optimize searching or\n * sorting. They can organize programs better. They can give you a\n * representation that is easier to work with.\n */\n\n/*** ===================================================================== ***\\\n ** - TREES --------------------------------------------------------------- **\n * ========================================================================= *\n *            ccee88oo             \\ | /                                     *\n *          C8O8O8Q8PoOb o8oo    '-.;;;.-,   ooooO8O8QOb o8bDbo              *\n *        dOB69QO8PdUOpugoO9bD  -==;;;;;==-aadOB69QO8PdUOpugoO9bD            *\n *       CgggbU8OU qOp qOdoUOdcb .-';;;'-.  CgggOU ddqOp qOdoUOdcb           *\n *           6OuU  /p u gcoUodpP   / | \\ jgs  ooSec cdac pdadfoof            *\n *             \\\\\\//  /douUP         '         \\\\\\d\\\\\\dp/pddoo               *\n *               \\\\\\////                         \\\\ \\\\////                   *\n *                |||/\\                           \\\\///                      *\n *                |||\\/                           ||||                       *\n *                |||||                          /|||                        *\n ** .............//||||\\.......................//|||\\\\..................... **\n\\*** ===================================================================== ***/\n\n/**\n * We'll start off with an extremely simple tree structure. It doesn't have any\n * special rules to it and looks something like this:\n *\n *     Tree {\n *       root: {\n *         value: 1,\n *         children: [{\n *           value: 2,\n *           children: [...]\n *         }, {\n *           value: 3,\n *           children: [...]\n *         }]\n *       }\n *     }\n */\n\nclass Tree {\n\n  /**\n   * The tree has to start with a single parent, the \"root\" of the tree.\n   */\n\n  constructor() {\n    this.root = null;\n  }\n\n  /**\n   * We need a way to traverse our tree and call a function on each node in the\n   * tree.\n   */\n\n  traverse(callback) {\n    // We'll define a walk function that we can call recursively on every node\n    // in the tree.\n    function walk(node) {\n      // First call the callback on the node.\n      callback(node);\n      // Then recursively call the walk function on all of its children.\n      node.children.forEach(walk);\n    }\n\n    // Now kick the traversal process off.\n    walk(this.root);\n  }\n\n  /**\n   * Next we need a way to add nodes to our tree.\n   */\n\n  add(value, parentValue) {\n    let newNode = {\n      value,\n      children: []\n    };\n\n    // If there is no root, just set it to the new node.\n    if (this.root === null) {\n      this.root = newNode;\n      return;\n    }\n\n    // Otherwise traverse the entire tree and find a node with a matching value\n    // and add the new node to its children.\n    this.traverse(node => {\n      if (node.value === parentValue) {\n        node.children.push(newNode);\n      }\n    });\n  }\n}\n\n/**\n * This is one of the most basic trees you could have and is probably only\n * useful if the data you are representing actually resembles a tree.\n *\n * But with some extra rules, a tree can serve a lot of different purposes.\n */\n\n/*** ===================================================================== ***\\\n ** - BINARY SEARCH TREES ------------------------------------------------- **\n * ========================================================================= *\n * 0 0 1 0 1 0 0 1 0 1 1 1 0 1  ,@@@@@@@@@@@@@@,   0 0 1 0 1 0 0 1 0 1 1 1 0 *\n * 0 1 0 1 0 1 0 1 1 0 1 1 0  @@`              '@@   0 1 0 1 0 1 1 0 1 0 1 0 *\n * 1 1 0 0 0 1 0 0 1 1 1 0  @@`   8O8PoOb o8o    '@@   0 0 1 0 0 1 0 0 1 1 1 *\n * 0 0 1 1 0 1 0 1 0 0 0  @@   dOB69QO8PdUgoO9bD    @@   1 0 1 1 0 1 0 1 0 0 *\n * ===================== @@   CgbU8OU qOp qOdOdcb    @@  0 1 1 0 1 0 1 0 1 0 *\n *                       @@      6OU /p u gcoUpP     @@  1 0 1 1 0 1 0 0 1 1 *\n * ===================== @@         \\\\// /doP        @@  0 1 1 0 0 1 0 0 1 0 *\n * 1 1 0 0 1 1 0 1 1 0 0  @@         \\\\//           @@   1 0 1 0 0 1 1 0 1 1 *\n * 0 1 1 0 1 0 1 1 0 1 1 0  @@,      |||          ,@@  0 1 1 0 1 1 0 0 1 0 1 *\n * 1 0 1 0 1 1 0 0 1 0 0 1 0  @@,   //|\\       ,@@   0 1 0 1 0 1 1 0 0 1 1 0 *\n **  1 0 1 0 0 1 1 0 1 0 1 0 1  `@@@@@@@@@@@@@@'   0 1 1 1 0 0 1 0 1 0 1 1  **\n\\*** ===================================================================== ***/\n\n/**\n * Binary search trees are a fairly common form of tree for their ability to\n * efficiently access, search, insert, and delete values all while keeping them\n * in a sorted order.\n *\n * Imagine taking a sequence of numbers:\n *\n *     1  2  3  4  5  6  7\n *\n * And turning it into a tree starting from the center.\n *\n *              4\n *           /     \\\n *        2           6\n *      /   \\       /   \\\n *     1     3     5     7\n *    -^--^--^--^--^--^--^-\n *     1  2  3  4  5  6  7\n *\n * This is how a binary tree works. Each node can have two children:\n *\n *     - Left: Less than parent node's value.\n *     - Right: Greater than parent node's value.\n *\n * > Note: In order to make this work all values must be unique in the tree.\n *\n * This makes the traversal to find a value very efficient. Say we're trying to\n * find the number 5 in our tree:\n *\n *             (4)         <--- 5 > 4, so move right.\n *           /     \\\n *        2         (6)    <--- 5 < 6, so move left.\n *      /   \\       /   \\\n *     1     3    (5)    7 <--- We've reached 5!\n *\n * Notice how we only had to do 3 checks to reach the number 5. If we were to\n * expand this tree to 1000 items. We'd go:\n *\n *   500 -> 250 -> 125 -> 62 -> 31 -> 15 -> 7 -> 3 -> 4 -> 5\n *\n * Only 10 checks for 1000 items!\n *\n * The other important thing about binary search trees is that they are similar\n * to linked lists in the sense that you only need to update the immediately\n * surrounding items when adding or removing a value.\n */\n\nclass BinarySearchTree {\n\n  /**\n   * Same as the previous Tree, we need to have a \"root\" of the binary search\n   * tree.\n   */\n\n  constructor() {\n    this.root = null;\n  }\n\n  /**\n   * In order to test if the value exists in the tree, we first need to search\n   * through the tree.\n   */\n\n  contains(value) {\n    // We start at the root.\n    let current = this.root;\n\n    // We're going to keep running as long as we have another node to visit.\n    // If we reach a `left` or `right` that is `null` then this loop ends.\n    while (current) {\n\n      // If the value is greater than the current.value we move to the right\n      if (value > current.value) {\n        current = current.right;\n\n        // If the value is less than the current.value we move to the left.\n      } else if (value < current.value) {\n        current = current.left;\n\n        // Otherwise we must be equal values and we return true.\n      } else {\n        return true;\n      }\n    }\n\n    // If we haven't matched anything then we return false.\n    return false;\n  }\n\n  /**\n   * In order to add items to this tree we are going to do the same traversal\n   * as before, bouncing between left and right nodes depending on them being\n   * less than or greater than the value we're adding.\n   *\n   * However, this time when we reach a `left` or `right` that is `null` we're\n   * going to add a new node in that position.\n   */\n\n  add(value) {\n    // First let's setup our node.\n    let node = {\n      value: value,\n      left: null,\n      right: null\n    };\n\n    // Special case for when there isn't any root node and we just need to add\n    // one.\n    if (this.root === null) {\n      this.root = node;\n      return;\n    }\n\n    // We start at the root.\n    let current = this.root;\n\n    // We're going to loop until we've either added our item or discovered it\n    // already exists in the tree.\n    while (true) {\n\n      // If the value is greater than the current.value we move to the right.\n      if (value > current.value) {\n\n        // If `right` does not exist, set it to our node, and stop traversing.\n        if (!current.right) {\n          current.right = node;\n          break;\n        }\n\n        // Otherwise just move on to the right node.\n        current = current.right;\n\n        // If the value is less than the current.value we move to the left.\n      } else if (value < current.value) {\n\n        // If `left` does not exist, set it to our node, and stop traversing.\n        if (!current.left) {\n          current.left = node;\n          break;\n        }\n\n        // Otherwise just move on to the left node.\n        current = current.left;\n\n        // If the number isn't less than or greater, then it must be the same and\n        // we don't do anything.\n      } else {\n        break;\n      }\n    }\n  }\n}\n\n/*** ===================================================================== ***\\\n ** - YOU REACHED THE END! ------------------------------------------------ **\n * ========================================================================= *\n *                                           .''.                            *\n *                 .''.             *''*    :_\\/_:     .                     *\n *                :_\\/_:   .    .:.*_\\/_*   : /\\ :  .'.:.'.                  *\n *            .''.: /\\ : _\\(/_  ':'* /\\ *  : '..'.  -=:o:=-                  *\n *           :_\\/_:'.:::. /)\\*''*  .|.* '.\\'/.'_\\(/_'.':'.'                  *\n *           : /\\ : :::::  '*_\\/_* | |  -= o =- /)\\    '  *                  *\n *            '..'  ':::'   * /\\ * |'|  .'/.\\'.  '._____                     *\n *                *        __*..* |  |     :      |.   |' .---\"|             *\n *                 _*   .-'   '-. |  |     .--'|  ||   | _|    |             *\n *              .-'|  _.|  |    ||   '-__  |   |  |    ||      |             *\n *              |' | |.    |    ||       | |   |  |    ||      |             *\n * _____________|  '-'     '    \"\"       '-'   '-.'    '`      |____________ *\n ** jgs~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ **\n\\*** ===================================================================== ***/\n\n/**\n * I know that was probably a bit dense, but hopefully it gave you a good\n * amount of knowledge. If you enjoyed it, would you mind giving the repo a\n * star and follow me on twitter (@thejameskyle)?\n *\n * You can also check out my other code walkthrough, \"The Super Tiny Compiler\"\n *       here ------> https://github.com/thejameskyle/the-super-tiny-compiler\n */\n\n// Just exporting everything for the tests...\nmodule.exports = {\n  List,\n  HashTable,\n  Stack,\n  Queue,\n  Graph,\n  LinkedList,\n  Tree,\n  BinarySearchTree\n};\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.1982421875,
          "content": "{\n  \"name\": \"itsy-bitsy-data-structures\",\n  \"version\": \"1.0.0\",\n  \"author\": \"James Kyle <me@thejameskyle.com> (thejameskyle.com)\",\n  \"license\": \"CC-BY-4.0\",\n  \"main\": \"./itsy-bitsy-data-structures.js\"\n}\n"
        },
        {
          "name": "test.js",
          "type": "blob",
          "size": 4.6220703125,
          "content": "'use strict';\n\nconst assert = require('assert');\nconst {\n  List,\n  HashTable,\n  Stack,\n  Queue,\n  Graph,\n  LinkedList,\n  Tree,\n  BinarySearchTree,\n} = require('./itsy-bitsy-data-structures');\n\n/**\n * ============================================================================\n * ,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'\n * ============================================================================\n */\n\n(function() {\n  var list = new List();\n\n  list.push(1);\n  list.unshift(2);\n\n  assert.equal(list.get(1), 1);\n  assert.equal(list.get(0), 2);\n\n  assert.equal(list.shift(), 2);\n  assert.equal(list.get(0), 1);\n\n  assert.equal(list.pop(), 1);\n  assert.equal(list.get(0), undefined);\n}());\n\n/**\n * ============================================================================\n * ,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'\n * ============================================================================\n */\n\n(function() {\n  var hashTable = new HashTable();\n\n  hashTable.set('foo', 'bar');\n  assert.equal(hashTable.get('foo'), 'bar');\n\n  hashTable.remove('foo');\n  assert.equal(hashTable.get('foo'), undefined);\n}());\n\n/**\n * ============================================================================\n * ,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'\n * ============================================================================\n */\n\n(function() {\n  var stack = new Stack();\n\n  stack.push(1);\n  stack.push(2);\n\n  assert.equal(stack.peek(), 2);\n  assert.equal(stack.pop(), 2);\n  assert.equal(stack.peek(), 1);\n  assert.equal(stack.pop(), 1);\n}());\n\n/**\n * ============================================================================\n * ,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'\n * ============================================================================\n */\n\n(function() {\n  var queue = new Queue();\n\n  queue.enqueue(1);\n  queue.enqueue(2);\n\n  assert.equal(queue.peek(), 1);\n  assert.equal(queue.dequeue(), 1);\n  assert.equal(queue.peek(), 2);\n  assert.equal(queue.dequeue(), 2);\n}());\n\n/**\n * ============================================================================\n * ,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'\n * ============================================================================\n */\n\n(function() {\n  var graph = new Graph();\n\n  graph.addNode(1);\n  graph.addNode(2);\n  graph.addNode(3);\n\n  assert.equal(graph.find(1).value, 1);\n  assert.equal(graph.find(2).value, 2);\n\n  graph.addLine(1, 2);\n  graph.addLine(1, 3);\n  graph.addLine(2, 3);\n\n  assert.equal(graph.find(1).lines[0].value, 2);\n  assert.equal(graph.find(1).lines[1].value, 3);\n  assert.equal(graph.find(2).lines[0].value, 3);\n}());\n\n/**\n * ============================================================================\n * ,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'\n * ============================================================================\n */\n\n(function() {\n  var linkedList = new LinkedList();\n\n  linkedList.add(1, 0);\n  linkedList.add(2, 1);\n  linkedList.add(3, 2);\n  linkedList.add(4, 3);\n\n  assert.equal(linkedList.get(0).value, 1);\n  assert.equal(linkedList.get(1).value, 2);\n\n  linkedList.remove(1);\n  assert.equal(linkedList.get(1).value, 3);\n\n  linkedList.remove(2);\n  assert.equal(linkedList.get(1).value, 3);\n\n  linkedList.remove(0);\n  assert.equal(linkedList.get(0).value, 3);\n}());\n\n/**\n * ============================================================================\n * ,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'\n * ============================================================================\n */\n\n(function() {\n  var tree = new Tree();\n\n  tree.add(1);\n  tree.add(2, 1);\n  tree.add(3, 1);\n  tree.add(4, 2);\n  tree.add(5, 2);\n\n  var traversed = [];\n  tree.traverse(function(node) {\n    traversed.push(node.value);\n  });\n\n  assert.deepEqual(traversed, [1, 2, 4, 5, 3]);\n}());\n\n/**\n * ============================================================================\n * ,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'`'-.,.-'\n * ============================================================================\n */\n\n(function() {\n  var binarySearchTree = new BinarySearchTree();\n\n  // root\n  binarySearchTree.add(4);\n\n  // left side\n  binarySearchTree.add(2);\n  binarySearchTree.add(1);\n  binarySearchTree.add(3);\n\n  // right side\n  binarySearchTree.add(6);\n  binarySearchTree.add(5);\n  binarySearchTree.add(7);\n\n  assert.ok(binarySearchTree.contains(2));\n  assert.ok(binarySearchTree.contains(3));\n  assert.ok(binarySearchTree.contains(4));\n\n  // duplicate\n  binarySearchTree.add(6);\n}());\n"
        }
      ]
    }
  ]
}