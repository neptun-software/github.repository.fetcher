{
  "metadata": {
    "timestamp": 1736562804056,
    "page": 359,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "beakerbrowser/beaker",
      "stars": 6755,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2275390625,
          "content": "# editorconfig.org\nroot = true\n\n[*]\nindent_style = space\nindent_size = 2\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.json]\nindent_size = 2\n\n[*.md]\ntrim_trailing_whitespace = false\n"
        },
        {
          "name": ".eslintrc",
          "type": "blob",
          "size": 6.76171875,
          "content": "{\n  \"parserOptions\": {\n    \"ecmaVersion\": 8,\n    \"ecmaFeatures\": {\n      \"experimentalObjectRestSpread\": true,\n      \"jsx\": false\n    },\n    \"sourceType\": \"module\"\n  },\n\n  \"env\": {\n    \"es6\": true,\n    \"node\": true\n  },\n\n  \"plugins\": [\n    \"import\",\n    \"node\",\n    \"promise\",\n    \"standard\"\n  ],\n\n  \"globals\": {\n    \"document\": true,\n    \"navigator\": true,\n    \"window\": true,\n    \"customElements\": true,\n    \"alert\": true,\n    \"uwg\": true,\n    \"DatArchive\": true,\n    \"location\": true,\n    \"beaker\": true,\n    \"prompt\": true,\n    \"CSSStyleSheet\": true,\n    \"confirm\": true,\n    \"fetch\": true,\n    \"HTMLElement\": true,\n    \"CustomEvent\": true,\n    \"localStorage\": true,\n    \"FileReader\": true,\n    \"Blob\": true\n  },\n\n  \"rules\": {\n    \"accessor-pairs\": \"error\",\n    \"arrow-spacing\": [\"error\", { \"before\": true, \"after\": true }],\n    \"block-spacing\": [\"error\", \"always\"],\n    \"brace-style\": [\"off\", \"1tbs\", { \"allowSingleLine\": true }],\n    \"camelcase\": \"off\",\n    \"comma-dangle\": [\"error\", {\n      \"arrays\": \"never\",\n      \"objects\": \"never\",\n      \"imports\": \"never\",\n      \"exports\": \"never\",\n      \"functions\": \"never\"\n    }],\n    \"comma-spacing\": [\"error\", { \"before\": false, \"after\": true }],\n    \"comma-style\": [\"error\", \"last\"],\n    \"constructor-super\": \"error\",\n    \"curly\": [\"error\", \"multi-line\"],\n    \"dot-location\": [\"error\", \"property\"],\n    \"eol-last\": \"off\",\n    \"eqeqeq\": \"off\",\n    \"func-call-spacing\": [\"error\", \"never\"],\n    \"generator-star-spacing\": [\"error\", { \"before\": true, \"after\": true }],\n    \"handle-callback-err\": \"off\",\n    \"indent\": \"off\",\n    \"key-spacing\": [\"error\", { \"beforeColon\": false, \"afterColon\": true }],\n    \"keyword-spacing\": [\"error\", { \"before\": true, \"after\": true }],\n    \"new-cap\": [\"error\", { \"newIsCap\": true, \"capIsNew\": false }],\n    \"new-parens\": \"error\",\n    \"no-array-constructor\": \"error\",\n    \"no-caller\": \"error\",\n    \"no-class-assign\": \"error\",\n    \"no-compare-neg-zero\": \"error\",\n    \"no-cond-assign\": \"error\",\n    \"no-const-assign\": \"error\",\n    \"no-constant-condition\": [\"error\", { \"checkLoops\": false }],\n    \"no-control-regex\": \"off\",\n    \"no-debugger\": \"error\",\n    \"no-delete-var\": \"error\",\n    \"no-dupe-args\": \"error\",\n    \"no-dupe-class-members\": \"error\",\n    \"no-dupe-keys\": \"error\",\n    \"no-duplicate-case\": \"error\",\n    \"no-empty-character-class\": \"error\",\n    \"no-empty-pattern\": \"error\",\n    \"no-eval\": \"error\",\n    \"no-ex-assign\": \"error\",\n    \"no-extend-native\": \"error\",\n    \"no-extra-bind\": \"error\",\n    \"no-extra-boolean-cast\": \"error\",\n    \"no-extra-parens\": [\"error\", \"functions\"],\n    \"no-fallthrough\": \"error\",\n    \"no-floating-decimal\": \"error\",\n    \"no-func-assign\": \"error\",\n    \"no-global-assign\": \"error\",\n    \"no-implied-eval\": \"error\",\n    \"no-inner-declarations\": \"off\",\n    \"no-invalid-regexp\": \"error\",\n    \"no-irregular-whitespace\": \"error\",\n    \"no-iterator\": \"error\",\n    \"no-label-var\": \"error\",\n    \"no-labels\": [\"error\", { \"allowLoop\": false, \"allowSwitch\": false }],\n    \"no-lone-blocks\": \"error\",\n    \"no-mixed-operators\": \"off\",\n    \"no-mixed-spaces-and-tabs\": \"error\",\n    \"no-multi-spaces\": \"off\",\n    \"no-multi-str\": \"error\",\n    \"no-multiple-empty-lines\": [\"error\", { \"max\": 1, \"maxEOF\": 0 }],\n    \"no-negated-in-lhs\": \"error\",\n    \"no-new\": \"off\",\n    \"no-new-func\": \"error\",\n    \"no-new-object\": \"error\",\n    \"no-new-require\": \"error\",\n    \"no-new-symbol\": \"error\",\n    \"no-new-wrappers\": \"error\",\n    \"no-obj-calls\": \"error\",\n    \"no-octal\": \"error\",\n    \"no-octal-escape\": \"error\",\n    \"no-path-concat\": \"error\",\n    \"no-proto\": \"error\",\n    \"no-redeclare\": \"error\",\n    \"no-regex-spaces\": \"error\",\n    \"no-return-assign\": [\"error\", \"except-parens\"],\n    \"no-return-await\": \"off\",\n    \"no-self-assign\": \"error\",\n    \"no-self-compare\": \"error\",\n    \"no-sequences\": \"error\",\n    \"no-shadow-restricted-names\": \"error\",\n    \"no-sparse-arrays\": \"error\",\n    \"no-tabs\": \"error\",\n    \"no-template-curly-in-string\": \"error\",\n    \"no-this-before-super\": \"error\",\n    \"no-throw-literal\": \"error\",\n    \"no-trailing-spaces\": \"error\",\n    \"no-undef\": \"error\",\n    \"no-undef-init\": \"off\",\n    \"no-unexpected-multiline\": \"error\",\n    \"no-unmodified-loop-condition\": \"error\",\n    \"no-unneeded-ternary\": [\"off\", { \"defaultAssignment\": false }],\n    \"no-unreachable\": \"error\",\n    \"no-unsafe-finally\": \"error\",\n    \"no-unsafe-negation\": \"error\",\n    \"no-unused-expressions\": [\"error\", { \"allowShortCircuit\": true, \"allowTernary\": true, \"allowTaggedTemplates\": true }],\n    \"no-unused-vars\": [\"off\", { \"vars\": \"all\", \"args\": \"none\", \"ignoreRestSiblings\": true }],\n    \"no-use-before-define\": [\"error\", { \"functions\": false, \"classes\": false, \"variables\": false }],\n    \"no-useless-call\": \"error\",\n    \"no-useless-computed-key\": \"error\",\n    \"no-useless-constructor\": \"error\",\n    \"no-useless-escape\": \"off\",\n    \"no-useless-rename\": \"error\",\n    \"no-useless-return\": \"off\",\n    \"no-whitespace-before-property\": \"error\",\n    \"no-with\": \"error\",\n    \"object-property-newline\": [\"error\", { \"allowMultiplePropertiesPerLine\": true }],\n    \"one-var\": [\"error\", { \"initialized\": \"never\" }],\n    \"operator-linebreak\": [\"off\", \"after\", { \"overrides\": { \"?\": \"before\", \":\": \"before\" } }],\n    \"padded-blocks\": [\"error\", { \"blocks\": \"never\", \"switches\": \"never\", \"classes\": \"never\" }],\n    \"prefer-promise-reject-errors\": \"off\",\n    \"quotes\": [\"error\", \"single\", { \"avoidEscape\": true, \"allowTemplateLiterals\": true }],\n    \"rest-spread-spacing\": [\"error\", \"never\"],\n    \"semi\": [\"error\", \"never\"],\n    \"semi-spacing\": [\"error\", { \"before\": false, \"after\": true }],\n    \"space-before-blocks\": [\"error\", \"always\"],\n    \"space-before-function-paren\": [\"error\", \"always\"],\n    \"space-in-parens\": [\"error\", \"never\"],\n    \"space-infix-ops\": \"off\",\n    \"space-unary-ops\": [\"error\", { \"words\": true, \"nonwords\": false }],\n    \"spaced-comment\": [\"off\", \"always\", {\n      \"line\": { \"markers\": [\"*package\", \"!\", \"/\", \",\"] },\n      \"block\": { \"balanced\": true, \"markers\": [\"*package\", \"!\", \",\", \":\", \"::\", \"flow-include\"], \"exceptions\": [\"*\"] }\n    }],\n    \"symbol-description\": \"error\",\n    \"template-curly-spacing\": [\"error\", \"never\"],\n    \"template-tag-spacing\": [\"error\", \"never\"],\n    \"unicode-bom\": [\"error\", \"never\"],\n    \"use-isnan\": \"error\",\n    \"valid-typeof\": [\"error\", { \"requireStringLiterals\": true }],\n    \"wrap-iife\": [\"error\", \"any\", { \"functionPrototypeMethods\": true }],\n    \"yield-star-spacing\": [\"error\", \"both\"],\n    \"yoda\": [\"error\", \"never\"],\n\n    \"import/export\": \"error\",\n    \"import/first\": \"off\",\n    \"import/no-duplicates\": \"error\",\n    \"import/no-webpack-loader-syntax\": \"error\",\n\n    \"node/no-deprecated-api\": \"error\",\n    \"node/process-exit-as-throw\": \"error\",\n\n    \"promise/param-names\": \"off\",\n\n    \"standard/array-bracket-even-spacing\": [\"error\", \"either\"],\n    \"standard/computed-property-even-spacing\": [\"error\", \"even\"],\n    \"standard/no-callback-literal\": \"off\",\n    \"standard/object-curly-even-spacing\": \"off\"\n  }\n}"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1953125,
          "content": "node_modules\n*.log\n.DS_Store\n.vscode\nThumbs.db\n*.autogenerated\n/dist/\n/tmp/\n*.build.js\n*.build.js.map\napp/stylesheets/*.css\napp/stylesheets/builtin-pages/*.css\npackage-lock.json\napp/package-lock.json\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.345703125,
          "content": "# Code of Conduct\n\n## 1. Purpose\n\nA primary goal of Beaker is to be inclusive to the largest number of contributors, with the most varied and diverse backgrounds possible. As such, we are committed to providing a friendly, safe and welcoming environment for all, regardless of gender, sexual orientation, ability, ethnicity, socioeconomic status, and religion (or lack thereof).\n\nThis code of conduct outlines our expectations for all those who participate in our community, as well as the consequences for unacceptable behavior.\n\nWe invite all those who participate in Beaker to help us create safe and positive experiences for everyone.\n\n## 2. Open Source Citizenship\n\nA supplemental goal of this Code of Conduct is to increase open source citizenship by encouraging participants to recognize and strengthen the relationships between our actions and their effects on our community.\n\nCommunities mirror the societies in which they exist and positive action is essential to counteract the many forms of inequality and abuses of power that exist in society.\n\nIf you see someone who is making an extra effort to ensure our community is welcoming, friendly, and encourages all participants to contribute to the fullest extent, we want to know.\n\n## 3. Expected Behavior\n\nThe following behaviors are expected and requested of all community members:\n\n*   Participate in an authentic and active way. In doing so, you contribute to the health and longevity of this community.\n*   Exercise consideration and respect in your speech and actions.\n*   Attempt collaboration before conflict.\n*   Refrain from demeaning, discriminatory, or harassing behavior and speech.\n*   Be mindful of your surroundings and of your fellow participants. Alert community leaders if you notice a dangerous situation, someone in distress, or violations of this Code of Conduct, even if they seem inconsequential.\n*   Remember that community event venues may be shared with members of the public; please be respectful to all patrons of these locations.\n\n## 4. Unacceptable Behavior\n\nThe following behaviors are considered harassment and are unacceptable within our community:\n\n*   Violence, threats of violence or violent language directed against another person.\n*   Sexist, racist, homophobic, transphobic, ableist or otherwise discriminatory jokes and language.\n*   Posting or displaying sexually explicit or violent material.\n*   Posting or threatening to post other people’s personally identifying information (\"doxing\").\n*   Personal insults, particularly those related to gender, sexual orientation, race, religion, or disability.\n*   Inappropriate photography or recording.\n*   Inappropriate physical contact. You should have someone’s consent before touching them.\n*   Unwelcome sexual attention. This includes, sexualized comments or jokes; inappropriate touching, groping, and unwelcomed sexual advances.\n*   Deliberate intimidation, stalking or following (online or in person).\n*   Advocating for, or encouraging, any of the above behavior.\n*   Sustained disruption of community events, including talks and presentations.\n\n## 5. Consequences of Unacceptable Behavior\n\nUnacceptable behavior from any community member, including sponsors and those with decision-making authority, will not be tolerated.\n\nAnyone asked to stop unacceptable behavior is expected to comply immediately.\n\nIf a community member engages in unacceptable behavior, the community organizers may take any action they deem appropriate, up to and including a temporary ban or permanent expulsion from the community without warning (and without refund in the case of a paid event).\n\n## 6. Reporting Guidelines\n\nIf you are subject to or witness unacceptable behavior, or have any other concerns, please notify a community organizer as soon as possible. pfrazee@gmail.com.\n\n\n\nAdditionally, community organizers are available to help community members engage with local law enforcement or to otherwise help those experiencing unacceptable behavior feel safe. In the context of in-person events, organizers will also provide escorts as desired by the person experiencing distress.\n\n## 7. Addressing Grievances\n\nIf you feel you have been falsely or unfairly accused of violating this Code of Conduct, you should notify the Beaker maintainers with a concise description of your grievance. Your grievance will be handled in accordance with our existing governing policies.\n\n\n\n## 8. Scope\n\nWe expect all community participants (contributors, paid or otherwise; sponsors; and other guests) to abide by this Code of Conduct in all community venues–online and in-person–as well as in all one-on-one communications pertaining to community business.\n\nThis code of conduct and its related procedures also applies to unacceptable behavior occurring outside the scope of community activities when such behavior has the potential to adversely affect the safety and well-being of community members.\n\n## 9. Contact info\n\npfrazee@gmail.com\n\n## 10. License and attribution\n\nThis Code of Conduct is distributed under a [Creative Commons Attribution-ShareAlike license](http://creativecommons.org/licenses/by-sa/3.0/).\n\nPortions of text derived from the [Django Code of Conduct](https://www.djangoproject.com/conduct/) and the [Geek Feminism Anti-Harassment Policy](http://geekfeminism.wikia.com/wiki/Conference_anti-harassment/Policy).\n\nRetrieved on November 22, 2016 from [http://citizencodeofconduct.org/](http://citizencodeofconduct.org/)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 6.12890625,
          "content": "# Contribute\n\n## Introduction\n\nThanks for considering contributing to Beaker!\n\nWe welcome any type of contribution, not only code. You can help with\n- **QA**: file bug reports, the more details you can give the better (e.g. screenshots with the console open)\n- **Community**: presenting the project at meetups, organizing a dedicated meetup for the local community, ...\n- **Code**: take a look at the [open issues](https://github.com/beakerbrowser/beaker/issues). Even if you can't write code, commenting on them, showing that you care about a given issue matters. It helps us triage them.\n- **Money**: we welcome financial contributions in full transparency on our [open collective](https://opencollective.com/beaker).\n\nLooking to work on Beaker? [Watch this video](https://www.youtube.com/watch?v=YuE9OO-ZDYo) and take a look at [the build notes](./build-notes.md).\n\n## Building from source\n\nRequires node 12 or higher.\n\nIn Linux (and in some cases macOS) you need libtool, m4, and automake:\n\n```bash\nsudo apt-get install libtool m4 make g++  # debian/ubuntu\nsudo dnf install libtool m4 make gcc-c++  # fedora\n```\n\nIn Windows, you'll need to install [Python 2.7](https://www.python.org/downloads/release/python-2711/), Visual Studio 2015 or 2017, and [Git](https://git-scm.com/download/win). (You might try [windows-build-tools](https://www.npmjs.com/package/windows-build-tools).) Then run:\n\n```powershell\nnpm config set python c:/python27\nnpm config set msvs_version 2015\nnpm install -g node-gyp\nnpm install -g gulp\n```\n\nTo build:\n\n```bash\ngit clone https://github.com/beakerbrowser/beaker.git\ncd beaker/scripts\nnpm install\nnpm run rebuild # see https://github.com/electron/electron/issues/5851\nnpm start\n```\n\nIf you pull latest from the repo and get weird module errors, do:\n\n```bash\nnpm run burnthemall\n```\n\nThis invokes [the mad king](http://nerdist.com/wp-content/uploads/2016/05/the-mad-king-game-of-thrones.jpg), who will torch your `node_modules/`, and do the full install/rebuild process for you.\n`npm start` should work afterwards.\n\nIf you're doing development, `npm run watch` to have assets build automatically.\n\n### Debugging\n\nTo debug the background process start electron with the `--inspect` argument pointing to the `app` directory, e.g. `script/node_modules/.bin/electron --inspect app`.  You can then attach an external debugger (e.g. Chrome devtools).\n\nTo debug the shell window itself (i.e. the beaker browser chrome), press `CmdOrCtrl+alt+shift+I` to open the devtools.\n\nTo debug a built-in pages (e.g. the Settings or Library pages), press `CmdOrCtrl+shift+I` to open the devtools.\n\n## Submitting code\n\nAny code change should be submitted as a pull request. The description should explain what the code does and give steps to execute it. The pull request should also contain tests, if applicable. For example, a PR that changes a part of the Beaker UI will likely not need tests, but a PR that updates Beaker's networking stack would.\n\n## Code review process\n\nThe bigger the pull request, the longer it will take to review and merge. Try to break down large pull requests in smaller chunks that are easier to review and merge.\n\nIt is also always helpful to have some context for your pull request. What was the purpose? Why does it matter to you?\n\n## Financial contributions\n\nWe also welcome financial contributions in full transparency on our [open collective](https://opencollective.com/beaker).\nAnyone can file an expense. If the expense makes sense for the development of the community, it will be \"merged\" in the ledger of our open collective by the core contributors and the person who filed the expense will be reimbursed.\n\n## Questions\n\nIf you have any questions, create an [issue](https://github.com/beakerbrowser/beaker/issues) (protip: do a quick search first to see if someone else didn't ask the same question before!).\n\nYou can also reach us at [@BeakerBrowser](https://twitter.com/beakerbrowser) on Twitter, in #beakerbrowser on freenode, or hello@beaker.opencollective.com.\n\n## Credits\n\n### Contributors\n\nThank you to all the people who have already contributed to beaker!\n<a href=\"/beakerbrowser/beaker/graphs/contributors\"><img src=\"https://opencollective.com/beaker/contributors.svg?width=890\" />\n\n\n### Backers\n\nThank you to all our backers! [[Become a backer](https://opencollective.com/beaker#backer)]\n\n<a href=\"https://opencollective.com/beaker#backers\" target=\"_blank\"><img src=\"https://opencollective.com/beaker/backers.svg?width=890\"></a>\n\n\n### Sponsors\n\nThank you to all our sponsors! (please ask your company to also support this open source project by [becoming a sponsor](https://opencollective.com/beaker#sponsor))\n\n<a href=\"https://opencollective.com/beaker/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/beaker/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/beaker/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/beaker/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/beaker/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/beaker/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/beaker/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/beaker/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/beaker/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/beaker/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/beaker/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/beaker/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/beaker/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/beaker/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/beaker/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/beaker/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/beaker/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/beaker/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/beaker/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/beaker/sponsor/9/avatar.svg\"></a>\n\n<!-- This `CONTRIBUTING.md` is based on @nayafia's template https://github.com/nayafia/contributing-template -->\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0458984375,
          "content": "MIT License\n\nCopyright (c) 2018 Blue Link Labs\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.99609375,
          "content": "Beaker Browser\n======\n\n# [This project is now archived.](./archive-notice.md)\n\nBeaker was an experimental peer-to-peer Web browser. It adds new APIs for building hostless applications while remaining compatible with the rest of the Web. [Visit the website.](https://beakerbrowser.com/)\n\n## Table of Contents\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n\n- [Installing](#installing)\n  - [Binaries](#binaries)\n  - [Building from source](#building-from-source)\n- [Documentation](#documentation)\n  - [Env Vars](#env-vars)\n- [Vulnerability disclosure](#vulnerability-disclosure)\n- [Known issues](#known-issues)\n  - [tmux](#tmux)\n- [Contributors](#contributors)\n  - [Backers](#backers)\n  - [Sponsors](#sponsors)\n- [License](#license)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Installing\n\n### Binaries\n\n**Visit the [Releases Page](https://github.com/beakerbrowser/beaker/releases) to find the installer you need.**\n\n### Building from source\n\nRequires node 12 or higher.\n\nIn Linux (and in some cases macOS) you need libtool, m4, autoconf, and automake:\n\n```bash\nsudo apt-get install libtool m4 make g++ autoconf # debian/ubuntu\nsudo dnf install libtool m4 make gcc-c++ libXScrnSaver  # fedora\nbrew install libtool autoconf automake # macos\n```\n\nIn Windows, you'll need to install [Python 2.7](https://www.python.org/downloads/release/python-2711/), Visual Studio 2015 or 2017, and [Git](https://git-scm.com/download/win). (You might try [windows-build-tools](https://www.npmjs.com/package/windows-build-tools).) Then run:\n\n```powershell\nnpm config set python c:/python27\nnpm config set msvs_version 2017\nnpm install -g node-gyp\nnpm install -g gulp\n```\n\nTo build:\n\n```bash\ngit clone https://github.com/beakerbrowser/beaker.git\ncd beaker/scripts\nnpm install # don't worry about v8 api errors building native modules - rebuild will fix\nnpm run rebuild # needed after each install. see https://github.com/electron/electron/issues/5851\nnpm start\n```\n\nIf you pull latest from the repo and get weird module errors, do:\n\n```bash\nnpm run burnthemall\n```\n\nThis invokes [the mad king](http://nerdist.com/wp-content/uploads/2016/05/the-mad-king-game-of-thrones.jpg), who will torch your `node_modules/`, and do the full install/rebuild process for you.\n(We chose that command name when GoT was still cool.)\n`npm start` should work afterward.\n\nIf you're doing development, `npm run watch` to have assets build automatically.\n\n## [Documentation](https://docs.beakerbrowser.com)\n\n### Env Vars\n\n- `DEBUG`: which log systems to output? A comma-separated string. Can be `beaker`, `dat`, `bittorrent-dht`, `dns-discovery`, `hypercore-protocol`. Specify `*` for all.\n- `BEAKER_OPEN_URL`: open the given URL on load, rather than the previous session or default tab.\n- `BEAKER_USER_DATA_PATH`: override the user-data path, therefore changing where data is read/written. Useful for testing. For default value see `userData` in the [electron docs](https://electron.atom.io/docs/api/app/#appgetpathname).\n- `BEAKER_DAT_QUOTA_DEFAULT_BYTES_ALLOWED`: override the default max-quota for bytes allowed to be written by a dat site. Useful for testing. Default value is `'500mb'`. This can be a Number or a String. Check [bytes.parse](https://github.com/visionmedia/bytes.js/tree/a4b9af2bf289175f12b3538eb172f2489844b1ec#bytesparsestringnumber-value-numbernull) for supported units and abbreviations.\n\n## Vulnerability disclosure\n\nSee [SECURITY.md](./SECURITY.md) for reporting security issues and vulnerabilities.\n\n## Known issues\n\n### tmux\n\nLaunching from tmux is known to cause issues with GUI apps in macOS. On Beaker, it may cause the application to hang during startup.\n\n## Contributors\n\nThis project exists thanks to all the people who contribute. [[Contribute]](CONTRIBUTING.md).\n[![](https://opencollective.com/beaker/contributors.svg?width=890)](https://github.com/beakerbrowser/beaker/graphs/contributors)\n\n## License\n\nMIT License (MIT)\n\nCopyright (c) 2018 Blue Link Labs\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.5498046875,
          "content": "# SECURITY\n\n## How to report a vulnerability\n\nIf you believe you've discovered a security issue related to Beaker Browser, please email us at support@beakerbrowser.com with a full description of the vulnerability. We ask that you please keep the details private until we've had a chance to resolve the issue.\n\n## Public notification\n\nThe Beaker team will coordinate public nofication of the vulnerability with you. To protect users, we ask that you do not share details of the vulnerability with the public until we've had time to research and address the issue.\n"
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 0.34765625,
          "content": "skip_non_tags: true\n\nimage: Visual Studio 2017\nplatform:\n  - x64\n\ncache:\n  - node_modules\n  - '%USERPROFILE%\\.electron'\n\ninit:\n  - git config --global core.autocrlf input\n\ninstall:\n  - ps: Install-Product node 11 x64\n  - yarn\n  - yarn run rebuild\n\nbuild_script:\n  - yarn run release\n\ntest: off\n\nartifacts:\n  - path: 'dist\\*.exe'\n  - path: 'dist\\latest.yml'"
        },
        {
          "name": "archive-notice.md",
          "type": "blob",
          "size": 16.400390625,
          "content": "# Beaker Browser is now archived\n\n**Dec 27, 2022**\n\nHi friends! This won't come as a huge shock, but the time has finally come that I archive the Beaker Browser repo. In 2022 I moved on to working at [Bluesky](https://blueskyweb.xyz), and, while the Beaker project is coming to an official end, the heart of Beaker continues with Bluesky. I hope the work we do will make Beaker's end a little less painful in the long run.\n\nI'm going to share a post-mortem in this doc, but first I want to thank everybody for the years of incredible support, kindness, and generosity. It was truly overwhelming, and at times I felt it was much more than I deserved. This includes all of the OpenCollective and Patreon donors and the handful of angel investors who put their faith in this project. Again, I hope the future work with Bluesky helps repay your faith and support.\n\nIn particular, I want to thank:\n\n- Peter Wang, for the many years of advice and support\n- Matthias Buus, Andrew Osheroff, and Tara Vancil for their collaborative spirit and inspired work\n- Everyone in the Beaker and Dat/Hypercore ecosystem for being such a great community\n- The Internet Archive for helping organize the decentralized Web community into something greater than its constituent parts (shout out to Wendy Hanamura, love yall)\n- Michael Mullins, who donated so much to the project, and who has been an incredibly supportive friend\n- Each of the angel investors for giving this risky project a shot\n- The Electron team for putting up with my strange feature requests\n- My family for not having me put away\n\nI almost hesitate to try to enumerate these special callouts because you all deserve to be named. Needless to say, I'm in your debt and am always available if you want to reach out.\n\n## The story\n\nThe backstory to Beaker starts with [Secure Scuttlebutt (SSB)](https://scuttlebutt.nz). I had been working on applications for SSB for about two years (2014-2016) and really getting my feet wet with decentralized tech. A number of exciting \"bittorrent-variant\" protocols were coming about at that time, including IPFS and Dat (eventually renamed Hypercore), and we were all working on how to make these protocols really shine.\n\nThe broad mission was to decentralize the Web. With SSB, we had made a social-networking protocol that was local first (meaning it ran mostly on-device) and was therefore extremely hackable. We wanted it to be very easy for people to build upon it.\n\nThe problem as I saw it was that app-distribution was too hard. Most of the SSB clients at the time were built on Electron or were local-hosted web servers. I wanted apps to be as easy to load as websites.\n\nThis is how the idea for Beaker started. If apps could be distributed with one of these bittorrent-variants, I figured, and then run within a safe sandbox, then we'd be able to create a flourishing ecosystem of apps on shared decentralized network. That was the big premise.\n\nElectron was beginning to mature, and I figured it would help accelerate the development of a niche browser like Beaker, and it did. I was able to produce a demo of Beaker hosting websites via dat/hypercore within 2 weeks. This got a positive response from folks (because it _is_ pretty cool) and so I continued from there. I built in tools for building the websites in-browser. \"One click to make a website\" was the premise, and it worked great. It gave great demos at talks, and pretty soon I was able to convince Tara to cofound a company with me around the project.\n\nPeople gave very positive feedback to the demo, but since this isn't a success story you can probably guess what happened next: actual usage stalled. We would produce updates that improved the polish and usability of the browser, and there'd be a small bump, but no stickiness. I indulged in fun features like a web-based commandline in the browser which was certainly cool but did nothing to make the browser useful to people. Many of these features lived in a perpetually half-finished state, and we could never quite solve the stickiness problem.\n\nThis feature churn ultimately landed Beaker [an entry in Liron Shapira's \"Bloated MVP\" blog](https://medium.com/bloated-mvp/beaker-browser-mvp-review-0-use-cases-4-years-of-engineering-0-users-9cc3c0ef24f), and give that a read because I think Liron is pretty spot-on with his analysis. It was a classic product dilemma; we were failing to give users something they wanted, and the flailing was just adding bloat instead of solving the real problem: that Beaker didn't solve a problem for people.\n\nTo our credit, we weren't completely blind to the issues. We had a gordian knot of problems that each fed into each other:\n\n- The dat/hyper sites weren't accessible in most browsers\n- There was no mobile browser, meaning the most popular computing mode wasn't even available to people\n- There was no way to safely sync state between multiple devices, a core issue to the protocol at the time\n- The APIs weren't useful enough to build great apps\n\nThe first three items were intractable given the resources we had, so I decided to focus on the fourth: API tooling. I figured if we could give a compelling dev experience on desktop, we could create a foothold niche that could help us gain the resources needed to tackle the other problems. In the four years of active development on Beaker, the last 2 were spent focused on those APIs.\n\nOn the APIs, I quite simply failed. The pure P2P model gives you a set of really great wins - no backend/frontend separation, local data, offline-first, easily-forked apps, and so on - but then hits you with a cavalcade of challenges. Without some logically centralized repository of data or router of messages, you struggle with discovery and delivery. Users don't stay consistently online and connections will randomly fail, so you stuggle with availability and performance. Initial connections and thus time-to-first-paints are slow, which is very bad news for web browsing. Debugging is quite hard. Managing resource usage on the device is hard. Scaling a user's view of the network past (say) 100k users is pretty much out the window because you're not sharing indexes; rather, you're having each device build the indexes locally. I'm probably forgetting some things, but you get the idea.\n\nAnother huge challenge is producing Web APIs that users are _comfortable_ with. People are extremely protective of the Web platform. When you start injecting these novel APIs, there's a sense that the APIs have to really be right because we might soon be stuck with them. That's a tough target to hit, and we suffered some design churn because of it. I was maybe too hesitant to commit heresies.\n\nWe went through at least two very significant API designs that never got released. Both of them were modeled as a local \"crawling indexer\" which would gather views of data published in hyper sites (via json and md) and then could be queried by apps. They were a neat idea; it was like putting a structured-data search engine in the browser. However I was never satisfied with the results because they couldn't patch over the core problems I listed above, and I tanked the releases. Eventually that tanked my collaborative's morale too, and by 2021 Beaker was pretty dead.\n\nI always knew were were trying to steer the Web as outsiders, but what I didn't expect was how fundamentally hard it is to tweak how the Web works. We would try things like making dat/hyper sites double as social profiles, but then needed some way to display that profile UI when you visited the site. We tried all kinds of things -- toolbars, sidepanels that popped up, little buttons in the location bar -- and never really found something that people would notice but which didn't intrude on the browsing experience. The Web is really a light client for applications at this point, and while I won't say it's impossible to add \"thick client\" behaviors, I can certainly say I never liked the results of my work on it.\n\nAfter I ran out of ideas for making Beaker work, I decided to give a p2p + servers hybrid a shot with a project called CTZN, another stab at a social network. The smartest thing I did there was [live stream every day of development](https://ctzn.network/dev-vlog), which helped build another wonderful community and keep me sane during the pandemic. That live-stream ultimately caught the attention of Jay Graber as she was forming the Bluesky team, and at the start of 2022 I began working with Bluesky. It was a life changing turn of events and quickly became -- and continues to be -- my dream job.\n\nBeaker is now becoming another archived repo, but I'm incredibly fortunate to carry the heart of its mission with this new team. It was a wonderful and sometimes painful five years, but it gave me the skills I needed to contribute to Bluesky, and I wouldn't trade those five years for anything. Mistakes were made, and thank goodness they were.\n\n## Lessons learned\n\nThe entrepreneurs reading this may recognize a common failure pattern here: we got to a really great demo fast, and then hit a cliff that we couldn't surmount. Rather than taking the L and re-evaluating, I slammed my head into the cliff hoping I could break through via force of will, but the tech just wasn't there, and the product wasn't either.\n\nIn hindsight, Beaker's MVP was a tool for making static websites. That's it. That's what the product did. If Beaker was going to succeed, that MVP needed to be sticky for people.\n\nKnowing that, the right next move might've been to get dat/hypercore adopted in more browsers and available on mobile -- if p2p static sites were a strong value prop. However, by 2016, that was a pretty dubious value prop to people, and that's ignoring the bad time-to-first-paint and variable uptime. Ironically, the only demographic that Beaker actually helped was teachers on a LAN with students learning how to make websites. It was a shockingly ideal tool for them. Unfortunately that's a small market and wasn't the mission I wanted to pursue.\n\nThe way I eventually digested what happened with Beaker was with the \"Percent Easy\" framework, a somewhat silly premise that I'll try to explain. See, I first started putzing with decentralization around 2012 or 2013, and I made a couple projects that completely bounced for people. They were weird and useless and nobody wanted them. When I had the good sense to follow Dominic Tarr's lead on SSB, things got a little easier for me. More people took interest and a great community formed, but it was still a very hard project to pitch to non-technical people. Then, when the Beaker project started it felt smoother than ever before. The demo was good! The feedback was good! I thought Beaker must be a winner for sure with all the positive feedback it received, so when things started to get hard, I was disoriented.\n\nEventually I started taking a wider view of what success really means: the magical product-market-fit. Getting PMF is darn hard, so what I ask when I start working on a project is, what % feels easy? Do I get to MVP quickly? Do people love the MVP? Do users stick? Do they start ripping updates out of my hands? Do they ignore the warts? And then do they continue to stick for months or even years? Each of these milestones is a chunk of percentage points that tally up to 100%. If I've got a good project then most of that 100% is going to feel \"easy.\" The higher the percentage that feels easy, the better the odds that the project will succeed. \n\nThe trick, you see, is that every % that isn't \"easy\" is not just difficult: it's _hard_. Bashing-your-head-through-the-cliff hard. The way I see it, you can maybe get 20% of the way there through sheer effort. That means a project needs to feel 80-90% easy to actually succeed, and frankly I'd caution against anything that's not \"90% easy.\" It's not laziness. It's just acceptance that each % that isn't \"easy\" is very hard. You're not special and you're not superhuman. Creating successful software is hard.\n\nWhen I look at Beaker, I think it was probably 50% easy. The initial demo took 2 weeks: 20%. It was a full website editor in about 2 months: 30%. The feedback was great: 50%. The users didn't stick: 50%. We got invited to talks which increased exposure: 51%. A few niche communities took an interest: 53%. Folks liked it enough to donate via OpenCollective and Patreon: 54%. You get the idea. Notably absent is \"usage and retention went through the roof: 80%\" and then \"usage continued to grow for years: 100%.\"\n\nI'm speaking as a builder that hasn't hit PMF so take all this with the grain of salt, but I find this framework useful to evaluate projects because it forces me to recognize the scope of the work. Early successes can make me imagine future successes are likely. Optimism, determination, and mission can make it easy for me to ignore costs. I now know that I need the wind at my back to climb a mountain, so as I work I keep asking myself, what % easy is this? If the projection starts slipping below 80, then I know I have a problem. If a product sprint to fix `$X` won't get us to 80, then I know I have a problem.\n\nAs decentralizers we may be pursuing a mission, but our work only wins in the market, and to win in the market we need to think like entrepreneurs. Ultimately, my lesson learned is that mission needs PMF.\n\n## Other thoughts\n\nA smattering of additional lessons I learned over the years.\n\nDon't be too proud to follow people with inspiration. Every time things went better for me, it's because I followed someone who was already doing something great.\n\nSimplify aggressively. With Bluesky we've opted for using p2p structures (IPLD) on a federated network, giving us some of the key advantages of p2p like account portability while retaining the performance and reliability advantages of servers. The pure p2p tech out there still has a lot of potential, but I think it's a bad fit for large scale social networks and sticking with it for Bluesky would've been a  mistake. I'm glad we approached AT Proto from first principles, and I'm very confident in the protocol at this stage, but if I have any concern it's that we may have kept complexity that ultimately doesn't prove its value. Time will tell.\n\nNever go negative with competiting projects. The decentralized Web community has been pretty great about staying \"coopetive\" (collaborative + competitive) meaning that we each play to win but we share ideas openly and speak well of each others' work. Stay focused on the shared mission if there is one. This is generally good advice, but it became specifically relevant to me: As I ended up more in the dat/hyper ecosystem, IPFS was often raised as a competing technology and I was frequently asked to comment on the differences. I never went negative, and thank goodness I didn't because one of my colleagues at Bluesky is a core contributor on IPFS, and we've become exceedingly good friends. Besides, going negative is a bad look.\n\nBuild a network of talented friends. I've never succeeded by going it alone, and my biggest mistakes have been when I failed to do this. I'm extremely lucky to have the ones I have.\n\nThis one came to me from a potential investor, and it was the best unprompted lesson I ever got: don't engage in transactional behavior. When you meet someone for the first time, build an actual relationship. If you don't have a good deal for them, then don't make a pitch. Get to know them. Develop trust. Even if you ultimately do have an ask, it'll work better if they _like_ you -- and if they're not interested, accept the \"no\" and preserve the relationship. You can guess what I did that led the investor to explain this to me.\n\nPay more attention to the market than I did. I had reasons for focusing on the Web and desktop, and none of them were the right call.\n\nDon't get too precious about the Web. It's a wonderful open platform, but it's settled into its purpose. Look for opportunities to create new open platforms that fit the moment.\n\nAlso, don't bloat your MVP.\n\n## Farewell, Beaker\n\nBeaker has left me with a lot of big memories. Speaking at JS Conf EU was a big one, and the relieved exhaustion that followed the talk. The many DWeb Summits and Camps that gave me a chance to meet TBL and Ted Nelson (!). The fun of giving talks at meetups and fielding questions. Getting to see Germany and Denmark on work trips. The many afternoons of jogging that often felt like a metaphor for my life.\n\nI've had the rare fortune of pursuing a creative mission, and it's because of everyone's support that I could. I can't thank you all enough. I'm disappointed I couldn't ultimately deliver this project to you, but I'm thankful for the friendships and the memories that came along the way.\n\nSee you all on the next one.\n\n- Paul"
        },
        {
          "name": "build-notes.md",
          "type": "blob",
          "size": 2.4892578125,
          "content": "beaker browser was cloned from [electron-boilerplate](https://github.com/szwacz/electron-boilerplate).\n\n# Structure\n\nThere are **two** `package.json` files:  \n\n#### 1. For development\nSits on path: `beaker-browser/scripts/package.json`. Here you declare dependencies for the development environment and build scripts. **This folder is not distributed with real application!**\n\n#### 2. For the application\nSits on path: `beaker-browser/app/package.json`. This is **real** manifest of the application. Declare the app dependencies here.\n\n#### OMG, but seriously why there are two `package.json`?\n1. Native npm modules (those written in C, not JavaScript) need to be compiled, and here we have two different compilation targets for them. Those used in application need to be compiled against electron runtime, and all `devDependencies` need to be compiled against your locally installed node.js. Thanks to having two files this is trivial.\n2. When you package the app for distribution there is no need to add up to size of the app with your `devDependencies`. Here those are always not included (because reside outside the `app` directory).\n\n### Project's folders\n\n- `app` - application code.\n- `app/background-process` - main electron process.\n- `app/builtin-pages` - start page, config page, etc.\n- `app/lib` - shared lib code for code that's not in the background process (builtin-pages, shell-window, webview-preload).\n- `app/shell-window` - the ui controls code (tabs, addressbar, etc).\n- `app/stylesheets` - styles shared across the app.\n- `app/webview-preload` - scripts injected into web pages.\n- `dist` - in this folder lands built, runnable application.\n- `build` - resources needed for building the app.\n\n\n# Development\n\n#### Installation\n\n```\ncd scripts\nnpm install\n```\nIt will also download Electron runtime, and install dependencies for second `package.json` file inside `app` folder.\n\n#### Starting the app\n\n```\ncd scripts\nnpm start\n```\n\n#### Adding npm modules to your app\n\nRemember to add your dependency to `app/package.json` file, so do:\n```\ncd app\nnpm install name_of_npm_module --save\n```\n\n# Making a release\n\n\nTo make ready for distribution installer use command:\n```\ncd scripts\nnpm run release\n```\nIt will start the packaging process for operating system you are running this command on. Ready for distribution file will be outputted to `dist` directory.\n\nYou can create Windows installer only when running on Windows, the same is true for Linux and OSX. So to generate all three installers you need all three operating systems.\n"
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "screenshot.png",
          "type": "blob",
          "size": 46.091796875,
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}