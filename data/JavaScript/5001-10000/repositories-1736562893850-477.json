{
  "metadata": {
    "timestamp": 1736562893850,
    "page": 477,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "TheRealJoelmatic/RemoveAdblockThing",
      "stars": 6106,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.03125,
          "content": "README.md\nLICENSE\nThumbnail.jpg\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.041015625,
          "content": "MIT License\n\nCopyright (c) 2023 Joelmatic\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.9677734375,
          "content": "# Note: It was an fun runing, making, mataining this project and having a fun battle against youtube to the point were youtube was aware of this project and activity taking measures against it and then we would find ways around it. But I dont have the time to maitain and run this project anymore.\n\nIf you want to block ads on youtube without pop up just use like Ublock origin.\nThe reason why this project was made in the first place was these adblockers used to be blocked, now they work just find on youtube.\n\n**Thank you for all the support this project got.**\n\n# Remove the Adblock Popup from YOUTUBE\n\n[![picture](Thumbnail.jpg?raw=true)](https://www.youtube.com/watch?v=jvSf10lgxs4&ab_channel=Joelmatic)\n\n## Introduction\n\nThis repository contains a userscript designed to remove the annoying \"Ad blocker is not allowed on Youtube\" popup. Follow the instructions below to get started. We also have an undetected way of skipping ads if you get blocked from the video player.\n\n## Table of Contents:\n\n1. [Introduction](#introduction)\n2. [Installation](#installation)\n3. [Common Issues](#Common-Issues)\n4. [Contribution](#contribution)\n5. [License](#license)\n\n## Installation\n\n1. **Install Tampermonkey**:\n   If you haven't already, you need to install the Tampermonkey browser extension. You can find it for various browsers:\n   - [Tampermonkey for Chrome](https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo)\n   - [Tampermonkey for Firefox](https://addons.mozilla.org/en-US/firefox/addon/tampermonkey/)\n   - [Tampermonkey for Edge](https://microsoftedge.microsoft.com/addons/detail/tampermonkey/iikmkjmpaadaobahmlepeloendndfphd)\n   - [Tampermonkey for Opera/OperaGX](https://addons.opera.com/en-gb/extensions/details/tampermonkey-beta/)\n\n2. **Install the Script**:\n   [Click Here and Press Install](Youtube-Ad-blocker-Reminder-Remover.user.js?raw=True).\n\n3. **Enable the Script**:\n   Enable the script by clicking the switch next to the script name in the Tampermonkey Dashboard.\n\n4. **Disable your adblocker**:\n   Whitelist YouTube on any Chrome extensions that block ads or any third-party things that disable ads. Don't worry; our script removes ads on YouTube.\n\n\nNote: This also allows you to watch videos when your video player is banned from using an adblock.\n\n## Common Issues\n\n**\"Ad Blockers violate Youtube Terms Of Service\" OR Just a black screen**\n\nThis happens when there is an adblock other than the script running. Common ways you may be blocking ads accidentally on Youtube is:\n\n- **Adblock extension:** Disable or whitelist YouTube on your ad blocker extension.\n\n- **Browser built-in adblock:** Some browsers have built-in ad blockers. Disable or configure them.\n\n- **Other Tampermonkey scripts:** Scripts like YouTube enhancer may conflict. Disable them one by one to identify the issue.\n\n- **Wi-Fi/DNS/Firewall adblock rules:** Check network settings for any ad-blocking configurations.\n\n- **Windows hosts file rules:** Inspect the Windows hosts file (C:\\Windows\\System32\\drivers\\etc) for ad-blocking rules.\n\n## Contribution\n\nIf you have any suggestions, bug reports, or want to contribute to this userscript, feel free to create issues or pull requests in this GitHub repository.\n\n### Contributors\n\n<a href=\"https://github.com/TheRealJoelmatic/RemoveAdblockThing/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=TheRealJoelmatic/RemoveAdblockThing\" />\n</a>\n\n## License\n\nThis project is licensed under the [MIT License](LICENSE).\n\n## Star History\n\n<a href=\"https://star-history.com/#TheRealJoelmatic/RemoveAdblockThing&Date\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://api.star-history.com/svg?repos=TheRealJoelmatic/RemoveAdblockThing&type=Date&theme=dark\" />\n    <source media=\"(prefers-color-scheme: light)\" srcset=\"https://api.star-history.com/svg?repos=TheRealJoelmatic/RemoveAdblockThing&type=Date\" />\n    <img alt=\"Star History Chart\" src=\"https://api.star-history.com/svg?repos=TheRealJoelmatic/RemoveAdblockThing&type=Date\" />\n  </picture>\n</a>\n"
        },
        {
          "name": "Thumbnail.jpg",
          "type": "blob",
          "size": 1108.3798828125,
          "content": null
        },
        {
          "name": "Youtube-Ad-blocker-Reminder-Remover.user.js",
          "type": "blob",
          "size": 17.6513671875,
          "content": "// ==UserScript==\r\n// @name         Remove Adblock Thing\r\n// @namespace    http://tampermonkey.net/\r\n// @version      5.8\r\n// @description  Removes Adblock Thing\r\n// @author       JoelMatic\r\n// @match        https://www.youtube.com/*\r\n// @icon         https://www.google.com/s2/favicons?sz=64&domain=youtube.com\r\n// @updateURL    https://github.com/TheRealJoelmatic/RemoveAdblockThing/raw/main/Youtube-Ad-blocker-Reminder-Remover.user.js\r\n// @downloadURL  https://github.com/TheRealJoelmatic/RemoveAdblockThing/raw/main/Youtube-Ad-blocker-Reminder-Remover.user.js\r\n// @grant        none\r\n// ==/UserScript==\r\n\r\n(function()\r\n {\r\n    //\r\n    //      Config\r\n    //\r\n\r\n    // Enable The Undetected Adblocker\r\n    const adblocker = true;\r\n\r\n    // Enable The Popup remover (pointless if you have the Undetected Adblocker)\r\n    const removePopup = false;\r\n\r\n    // Checks for updates (Removes the popup)\r\n    const updateCheck = true;\r\n\r\n    // Enable debug messages into the console\r\n    const debugMessages = true;\r\n\r\n    // Fix timestamps in the youtube comments for new method\r\n    const fixTimestamps = true;\r\n\r\n    // Enable custom modal\r\n    // Uses SweetAlert2 library (https://cdn.jsdelivr.net/npm/sweetalert2@11) for the update version modal.\r\n    // When set to false, the default window popup will be used. And the library will not be loaded.\r\n    const updateModal = {\r\n        enable: true, // if true, replaces default window popup with a custom modal\r\n        timer: 5000, // timer: number | false\r\n    };\r\n\r\n\r\n    //\r\n    //      CODE\r\n    //\r\n    // If you have any suggestions, bug reports,\r\n    // or want to contribute to this userscript,\r\n    // feel free to create issues or pull requests in the GitHub repository.\r\n    //\r\n    // GITHUB: https://github.com/TheRealJoelmatic/RemoveAdblockThing\r\n\r\n    //\r\n    // Varables used for adblock\r\n    //\r\n\r\n    // Store the initial URL\r\n    let currentUrl = window.location.href;\r\n\r\n    // Used for after the player is updated\r\n    let isVideoPlayerModified = false;\r\n\r\n    //\r\n    // Variables used for updater\r\n    //\r\n\r\n    let hasIgnoredUpdate = false;\r\n\r\n    //\r\n    // Setup\r\n    //\r\n\r\n    //Set everything up here\r\n    log(\"Script started\");\r\n\r\n    if (adblocker) removeAds();\r\n    if (removePopup) popupRemover();\r\n    if (updateCheck) checkForUpdate();\r\n    if (fixTimestamps) timestampFix();\r\n\r\n    // Remove Them pesski popups\r\n    function popupRemover() {\r\n\r\n        setInterval(() => {\r\n            const modalOverlay = document.querySelector(\"tp-yt-iron-overlay-backdrop\");\r\n            const popup = document.querySelector(\".style-scope ytd-enforcement-message-view-model\");\r\n            const popupButton = document.getElementById(\"dismiss-button\");\r\n\r\n            var video = document.querySelector('video');\r\n\r\n            const bodyStyle = document.body.style;\r\n            bodyStyle.setProperty('overflow-y', 'auto', 'important');\r\n\r\n            if (modalOverlay) {\r\n                modalOverlay.removeAttribute(\"opened\");\r\n                modalOverlay.remove();\r\n            }\r\n\r\n            if (popup) {\r\n                log(\"Popup detected, removing...\");\r\n\r\n                if(popupButton) popupButton.click();\r\n\r\n                popup.remove();\r\n                video.play();\r\n\r\n                setTimeout(() => {\r\n                    video.play();\r\n                }, 500);\r\n\r\n                log(\"Popup removed\");\r\n            }\r\n            // Check if the video is paused after removing the popup\r\n            if (!video.paused) return;\r\n            // UnPause The Video\r\n            video.play();\r\n\r\n        }, 1000);\r\n    }\r\n\r\n    // undetected adblocker method\r\n    // undetected adblocker method\r\n    function removeAds() {\r\n        log(\"removeAds()\");\r\n\r\n        setInterval(() => {\r\n\r\n            if (window.location.href !== currentUrl) {\r\n                currentUrl = window.location.href;\r\n                isVideoPlayerModified = false;\r\n                clearAllPlayers();\r\n                removePageAds();\r\n            }\r\n\r\n            // Fix for youtube shorts\r\n            if (window.location.href.includes(\"shorts\")) {\r\n                log(\"Youtube shorts detected, ignoring...\");\r\n                return;\r\n            }\r\n\r\n            if (isVideoPlayerModified){\r\n                removeAllDuplicateVideos();\r\n                return;\r\n            }\r\n\r\n            log(\"Video replacement started!\");\r\n\r\n            //\r\n            // remove ad audio\r\n            //\r\n\r\n            var video = document.querySelector('video');\r\n            if (video) video.volume = 0;\r\n            if (video) video.pause();\r\n            if (video) video.remove();\r\n\r\n            //\r\n            // Remove the current player\r\n            //\r\n\r\n            if (!clearAllPlayers()) {\r\n                return;\r\n            }\r\n\r\n            /**\r\n             * remove the \"Ad blockers violate YouTube's Terms of Service\" screen for safari\r\n             */\r\n            let errorScreen = document.querySelector(\"#error-screen\");\r\n            if (errorScreen) {\r\n                errorScreen.remove();\r\n            }\r\n            \r\n            //\r\n            // Get the video ID from the URL\r\n            //\r\n\r\n            let videoID = '';\r\n            let playList = '';\r\n            let timeStamp = '';\r\n            const url = new URL(window.location.href);\r\n            const urlParams = new URLSearchParams(url.search);\r\n\r\n            if (urlParams.has('v')) {\r\n                videoID = urlParams.get('v');\r\n            } else {\r\n                const pathSegments = url.pathname.split('/');\r\n                const liveIndex = pathSegments.indexOf('live');\r\n                if (liveIndex !== -1 && liveIndex + 1 < pathSegments.length) {\r\n                    videoID = pathSegments[liveIndex + 1];\r\n                }\r\n            }\r\n\r\n            if (urlParams.has('list')) {\r\n                playList = \"&listType=playlist&list=\" + urlParams.get('list');\r\n            }\r\n\r\n            if (urlParams.has('t')) {\r\n                timeStamp = \"&start=\" + urlParams.get('t').replace('s', '');\r\n            }\r\n\r\n            if (!videoID) {\r\n                log(\"YouTube video URL not found.\", \"e\");\r\n                return null;\r\n            }\r\n\r\n            log(\"Video ID: \" + videoID);\r\n\r\n            //\r\n            // Create new frame for the video\r\n            //\r\n\r\n            const startOfUrl = \"https://www.youtube-nocookie.com/embed/\";\r\n          \r\n            const endOfUrl = \"?autoplay=1&modestbranding=1&rel=0\";\r\n            const finalUrl = startOfUrl + videoID + endOfUrl;\r\n\r\n\r\n            const iframe = document.createElement('iframe');\r\n\r\n            iframe.setAttribute('src', finalUrl);\r\n            iframe.setAttribute('frameborder', '0');\r\n            iframe.setAttribute('allow', 'accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share');\r\n            iframe.setAttribute('allowfullscreen', true);\r\n            iframe.setAttribute('mozallowfullscreen', \"mozallowfullscreen\");\r\n            iframe.setAttribute('msallowfullscreen', \"msallowfullscreen\");\r\n            iframe.setAttribute('oallowfullscreen', \"oallowfullscreen\");\r\n            iframe.setAttribute('webkitallowfullscreen', \"webkitallowfullscreen\");\r\n\r\n            iframe.style.width = '100%';\r\n            iframe.style.height = '100%';\r\n            iframe.style.position = 'absolute';\r\n            iframe.style.top = '0';\r\n            iframe.style.left = '0';\r\n            iframe.style.zIndex = '9999';\r\n            iframe.style.pointerEvents = 'all';\r\n\r\n            const videoPlayerElement = document.querySelector('.html5-video-player');\r\n            videoPlayerElement.appendChild(iframe);\r\n            log(\"Finished\");\r\n\r\n            isVideoPlayerModified = true;\r\n        }, 500);\r\n        removePageAds();\r\n    }\r\n    //\r\n    // logic functionm\r\n    // \r\n\r\n    function removeAllDuplicateVideos() {\r\n        const videos = document.querySelectorAll('video');\r\n\r\n        videos.forEach(video => {\r\n            if (video.src.includes('www.youtube.com')) {\r\n                video.muted = true;\r\n                video.pause();\r\n                video.addEventListener('volumechange', function() {\r\n                    if (!video.muted) {\r\n                        video.muted = true;\r\n                        video.pause();\r\n                        log(\"Video unmuted detected and remuted\");\r\n                    }\r\n                });\r\n                video.addEventListener('play', function() {\r\n                    video.pause();\r\n                    log(\"Video play detected and repaused\");\r\n                });\r\n\r\n                log(\"Duplicate video found and muted\");\r\n            }\r\n        });\r\n    }\r\n\r\n    function clearAllPlayers() {\r\n    \r\n        const videoPlayerElements = document.querySelectorAll('.html5-video-player');\r\n    \r\n        if (videoPlayerElements.length === 0) {\r\n            console.error(\"No elements with class 'html5-video-player' found.\");\r\n            return false;\r\n        }\r\n    \r\n        videoPlayerElements.forEach(videoPlayerElement => {\r\n        const iframes = videoPlayerElement.querySelectorAll('iframe');\r\n        iframes.forEach(iframe => {\r\n            iframe.remove();\r\n        });\r\n    });\r\n    \r\n        console.log(\"Removed all current players!\");\r\n        return true;\r\n    }\r\n\r\n    //removes ads on the page (not video player ads)\r\n    function removePageAds(){\r\n\r\n        const sponsor = document.querySelectorAll(\"div#player-ads.style-scope.ytd-watch-flexy, div#panels.style-scope.ytd-watch-flexy\");\r\n        const style = document.createElement('style');\r\n\r\n        style.textContent = `\r\n            ytd-action-companion-ad-renderer,\r\n            ytd-display-ad-renderer,\r\n            ytd-video-masthead-ad-advertiser-info-renderer,\r\n            ytd-video-masthead-ad-primary-video-renderer,\r\n            ytd-in-feed-ad-layout-renderer,\r\n            ytd-ad-slot-renderer,\r\n            yt-about-this-ad-renderer,\r\n            yt-mealbar-promo-renderer,\r\n            ytd-statement-banner-renderer,\r\n            ytd-ad-slot-renderer,\r\n            ytd-in-feed-ad-layout-renderer,\r\n            ytd-banner-promo-renderer-background\r\n            statement-banner-style-type-compact,\r\n            .ytd-video-masthead-ad-v3-renderer,\r\n            div#root.style-scope.ytd-display-ad-renderer.yt-simple-endpoint,\r\n            div#sparkles-container.style-scope.ytd-promoted-sparkles-web-renderer,\r\n            div#main-container.style-scope.ytd-promoted-video-renderer,\r\n            div#player-ads.style-scope.ytd-watch-flexy,\r\n            ad-slot-renderer,\r\n            ytm-promoted-sparkles-web-renderer,\r\n            masthead-ad,\r\n            tp-yt-iron-overlay-backdrop,\r\n\r\n            #masthead-ad {\r\n                display: none !important;\r\n            }\r\n        `;\r\n\r\n        document.head.appendChild(style);\r\n\r\n        sponsor?.forEach((element) => {\r\n             if (element.getAttribute(\"id\") === \"rendering-content\") {\r\n                element.childNodes?.forEach((childElement) => {\r\n                  if (childElement?.data.targetId && childElement?.data.targetId !==\"engagement-panel-macro-markers-description-chapters\"){\r\n                      //Skipping the Chapters section\r\n                        element.style.display = 'none';\r\n                    }\r\n                   });\r\n            }\r\n         });\r\n\r\n        log(\"Removed page ads (✔️)\");\r\n    }\r\n\r\n    function changeTimestamp(timestamp) {\r\n        const videoPlayerElements = document.querySelectorAll('.html5-video-player');\r\n        videoPlayerElements.forEach(videoPlayerElement => {\r\n            const iframes = videoPlayerElement.querySelectorAll('iframe');\r\n            iframes.forEach(iframe => {\r\n                if (iframe.src.includes(\"&start=\")) {\r\n                    iframe.src = iframe.src.replace(/&start=\\d+/, \"&start=\" + timestamp);\r\n                } else {\r\n                    iframe.src += \"&start=\" + timestamp;\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    function timestampFix() {\r\n        document.addEventListener('click', function(event) {\r\n            const target = event.target;\r\n\r\n            if (target.classList.contains('yt-core-attributed-string__link') && target.href.includes('&t=')) {\r\n                event.preventDefault();\r\n                const timestamp = target.href.split('&t=')[1].split('s')[0];\r\n                log(`Timestamp link clicked: ${timestamp} seconds`);\r\n                changeTimestamp(timestamp);\r\n            }\r\n        });\r\n    }\r\n\r\n    function observerCallback(mutations) {\r\n        let isVideoAdded = mutations.some(mutation => \r\n            Array.from(mutation.addedNodes).some(node => node.tagName === 'VIDEO')\r\n        );\r\n\r\n        if (isVideoAdded) {\r\n            log(\"New video detected, checking for duplicates.\");\r\n            // Ignore for youtube shorts\r\n            if (window.location.href.includes(\"shorts\")) {\r\n                log(\"Youtube shorts detected, ignoring...\");\r\n                return;\r\n            }\r\n            removeAllDuplicateVideos();\r\n        }\r\n    }\r\n\r\n    const observer = new MutationObserver(observerCallback);\r\n    observer.observe(document.body, { childList: true, subtree: true });\r\n\r\n    //\r\n    // Update check\r\n    //\r\n\r\n    function checkForUpdate(){\r\n\r\n        if (window.top !== window.self && !(window.location.href.includes(\"youtube.com\"))){\r\n            return;\r\n        }\r\n\r\n        if (hasIgnoredUpdate){\r\n            return;\r\n        }\r\n\r\n        const scriptUrl = 'https://raw.githubusercontent.com/TheRealJoelmatic/RemoveAdblockThing/main/Youtube-Ad-blocker-Reminder-Remover.user.js';\r\n\r\n        fetch(scriptUrl)\r\n        .then(response => response.text())\r\n        .then(data => {\r\n            // Extract version from the script on GitHub\r\n            const match = data.match(/@version\\s+(\\d+\\.\\d+)/);\r\n            if (!match) {\r\n                log(\"Unable to extract version from the GitHub script.\", \"e\")\r\n                return;\r\n            }\r\n\r\n            const githubVersion = parseFloat(match[1]);\r\n            const currentVersion = parseFloat(GM_info.script.version);\r\n\r\n            if (githubVersion <= currentVersion) {\r\n                log('You have the latest version of the script. ' + githubVersion + \" : \" + currentVersion);\r\n                return;\r\n            }\r\n\r\n            console.log('Remove Adblock Thing: A new version is available. Please update your script. ' + githubVersion + \" : \" + currentVersion);\r\n\r\n            if(updateModal.enable){\r\n                // if a version is skipped, don't show the update message again until the next version\r\n                if (parseFloat(localStorage.getItem('skipRemoveAdblockThingVersion')) === githubVersion) {\r\n                    return;\r\n                }\r\n                // If enabled, include the SweetAlert2 library\r\n                const script = document.createElement('script');\r\n                script.src = 'https://cdn.jsdelivr.net/npm/sweetalert2@11';\r\n                document.head.appendChild(script);\r\n\r\n                const style = document.createElement('style');\r\n                style.textContent = '.swal2-container { z-index: 2400; }';\r\n                document.head.appendChild(style);\r\n\r\n                // Wait for SweetAlert to be fully loaded\r\n                script.onload = function () {\r\n\r\n                    Swal.fire({\r\n                        position: \"top-end\",\r\n                        backdrop: false,\r\n                        title: 'Remove Adblock Thing: New version is available.',\r\n                        text: 'Do you want to update?',\r\n                        showCancelButton: true,\r\n                        showDenyButton: true,\r\n                        confirmButtonText: 'Update',\r\n                        denyButtonText:'Skip',\r\n                        cancelButtonText: 'Close',\r\n                        timer: updateModal.timer ?? 5000,\r\n                        timerProgressBar: true,\r\n                        didOpen: (modal) => {\r\n                            modal.onmouseenter = Swal.stopTimer;\r\n                            modal.onmouseleave = Swal.resumeTimer;\r\n                        }\r\n                    }).then((result) => {\r\n                        if (result.isConfirmed) {\r\n                            window.location.replace(scriptUrl);\r\n                        } else if(result.isDenied) {\r\n                            localStorage.setItem('skipRemoveAdblockThingVersion', githubVersion);\r\n                        }\r\n                    });\r\n                };\r\n\r\n                script.onerror = function () {\r\n                    var result = window.confirm(\"Remove Adblock Thing: A new version is available. Please update your script.\");\r\n                    if (result) {\r\n                        window.location.replace(scriptUrl);\r\n                    }\r\n                }\r\n            } else {\r\n                var result = window.confirm(\"Remove Adblock Thing: A new version is available. Please update your script.\");\r\n\r\n                if (result) {\r\n                    window.location.replace(scriptUrl);\r\n                }\r\n            }\r\n        })\r\n        .catch(error => {\r\n            hasIgnoredUpdate = true;\r\n            log(\"Error checking for updates:\", \"e\", error)\r\n        });\r\n        hasIgnoredUpdate = true;\r\n    }\r\n\r\n    // Used for debug messages\r\n    function log(log, level, ...args) {\r\n\r\n        if(!debugMessages)\r\n            return;\r\n\r\n        const prefix = '🔧 Remove Adblock Thing:';\r\n        const message = `${prefix} ${log}`;\r\n        switch (level) {\r\n            case 'error':\r\n                console.error(`❌ ${message}`, ...args);\r\n                break;\r\n            case 'log':\r\n                console.log(`✅ ${message}`, ...args);\r\n                break;\r\n            case 'warning':\r\n                console.warn(`⚠️ ${message}`, ...args);\r\n                break;\r\n            default:\r\n                console.info(`ℹ️ ${message}`, ...args);\r\n        }        \r\n    }\r\n\r\n})();\r\n"
        }
      ]
    }
  ]
}