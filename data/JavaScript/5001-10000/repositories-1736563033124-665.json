{
  "metadata": {
    "timestamp": 1736563033124,
    "page": 665,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "benhmoore/Knwl",
      "stars": 5289,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0263671875,
          "content": "node_modules\nnpm-debug.log\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.083984375,
          "content": "language: node_js\nnode_js:\n  - \"0.10\"\n\ninstall:\n  - npm install\n\nscript:\n  - npm test\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.05859375,
          "content": "The MIT License (MIT)\n\n\nCopyright (c) 2013 - 2015 Ben Moore\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.240234375,
          "content": "# Knwl.js\nKnwl.js is a Javascript library that parses through text for dates, times, phone numbers, emails, places, and more. \n\n____\n## Project Future\n**The future of the Knwl.js project**: https://github.com/loadfive/Knwl.js/issues/97\n____\nParser plugins are what make Knwl.js tick and give it new parsing abilities. There are many already available under ```./default_plugins``` for a number of tasks.\nIf you're interested in developing plugins for Knwl.js, ```./plugin_development.md``` is a great place to start.\n\n## Installation\n\nInstallation instructions are specific to whether you want to run Knwl.js in the browser, or on the server with Node.js.\n\n### For Node.js\n\n#### Install using ```npm```:\n\n```console\n\tnpm install knwl.js\n```\n\n1. Load the ```knwl``` module using ```require()``` and create a new Instance.\n\n\t```javascript\n\t\tvar Knwl = require(\"./knwl.js\");\n\t\t\n\t\tvar knwlInstance = new Knwl('english');\n\t```\n\t\n\tYou can optionally specify a language in the first parameter. This helps plugins identify and better suit particular languages.\n\n2. Load a parser plugin.\n\n\t```javascript\n\t\tknwlInstance.register('dates', require('./default_plugins/dates'));\n\t```\n\t\n\tThe first parameter is the desired label for the plugin. The second parameter is a ```require()``` call to load the plugin.\n\t\n\t*Note: The plugins in the ```./default_plugins``` directory will be loaded automatically.*\n\n### For the Browser\n\n**Note: A packaged version of Knwl.js for the browser with default plugins is available in the ```./dist``` directory.**\n\nThese steps require the ```npm``` package.\n\n1. Run ```npm install``` to install dependencies.\n\n2. ```browserify``` may be used to build a Knwl.js project from Node.js for the browser.\n\n\tUse the following syntax in the terminal:\n\t\n\t```console\n\t\t./node_modules/.bin/browserify script.js knwl.js > output.js\n\t```\n\t\n\tThe ```script.js``` file is the Node.js file you wish to package for the browser.\n\n## Usage Guide\n\nThese steps are the same regardless of whether Knwl.js is running on the server or client.\n\n3. Initiate Knwl.js on a String.\n\n\t``` javascript\n\tknwlInstance.init(\"This is a string. This was written on the 2nd of June, of 2015.\");\n\t```\n\t\n\tThis line runs the initial parser functions that\n\tprepare the String for plugins to use. **Plugins\n\twill not function without this method first being called\n\ton the String.**\n\t\n4. Initiate a plugin to parse the String.\n\t\n\t``` javascript\n\tvar dates = knwlInstance.get('dates');\n\t```\n\t\n\tThe first parameter of ```knwl.get()``` is the\n\tname of the parser plugin you're trying to access (make sure you've added the plugin's .js file to the header of the page).\n\tThe names of all default parser plugins are provided\n\t towards the end of this document. If you're using\n\tplugins other than the defaults, see their respective\n\tdocumentation.\n\t\n\tAnyways, if the parser plugin is found, ```knwl.get()``` will return\n\tan array of this format:\n\t\n\t```javascript\n\tvar results = [\n\t\t{ //result\n\t\t\t//plugin-specific properties\n\t\t\t\"preview\": \"This was written on the 2nd of June of 2015.\", //the sentence of rough location of the data from the String\n\t\t\t\"found\": integer //the position (in words) of the result in the String\n\t\t}\n\t]\n\t```\n\t\n\tFor example, here's what is returned from ```knwl.get('dates')``` when called on the previously mentioned String:\n\t\n\t```json\n\t[\n\t\t{\n\t\t\t\"year\": 2015,\n\t\t\t\"month\": 6,\n\t\t\t\"day\": 2,\n\t\t\t\"preview\": \"This was written on the 2nd of June of 2015.\",\n\t\t\t\"found\": 5\n\t\t}\n\t]\n\t```\n\n## Default Plugins\n\nThese are automatically loaded by default.\n\n### dates.js\n```javascript\nknwl.get('dates');\n\t\n\t//Returns any dates found in the String.\n```\n\n### times.js\n```javascript\nknwl.get('times');\n\t\n\t//Returns any times found in the String.\n\t\n```\n\n### phones.js\n```javascript\t\t\nknwl.get('phones')\n\n\t//Returns any phone numbers found in the String.\n\n```\n\n### links.js\n```javascript\nknwl.get('links')\n\n\t//Returns any links found in the String.\n\n```\n\n### emails.js\n```javascript\nknwl.get('emails')\n\t\n\t//Returns any email addresses found in the String.\n```\n\n### places.js\n```javascript\nknwl.get('places')\n\n\t//Returns any places found in the String.\n```\n\n## Experimental Plugins\n\n### Notice: These plugins have not been upgraded to the new syntax.\n\nThese parser plugins are not as accurate as the default plugins. However,\nthey should be stable (they shouldn't crash the page) to use if you are willing to use them. They are considerably more static and rigid than default plugins.\n\nIn the future, some of these plugins may reach a level of accuracy that promotes them\nfrom experimental status to the default plugins. However, some will merely stay\nas experiments.\n\n### english.js\n```javascript\nknwl.get('english')\n\n\t//Returns the simple parts (verb, subject, etc.) of basic sentences found in the String.\n\t//WARNING: this is a rigid and simplistic plugin, thus it is merely an experiment.\n```\n### units.js\n```javascript\nknwl.get('units')\n\t\n\t//Returns any units (grams, pounds, etc.) found in the String.\n```\n## Developing Parser Plugins\n\nWhat's awesome about the new version of Knwl.js is that it makes it much easier\nfor anyone with a little knowledge of JS to build plugins. These plugins offer new\nparsing abilities for Knwl.js that otherwise wouldn't exist.\n\nIf you want to try your hand at building plugins for Knwl.js, there's documentation available in ```plugin_development.md```.\n"
        },
        {
          "name": "default_plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "demo",
          "type": "tree",
          "content": null
        },
        {
          "name": "dist",
          "type": "tree",
          "content": null
        },
        {
          "name": "experimental_plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "knwl.js",
          "type": "blob",
          "size": 5.2412109375,
          "content": "function Knwl(language) {\n\tthis.language = 'unknown';\n\tif (language !== undefined)\n\t\tthis.language = language;\n\t\n\tthis.tasks = {};\n\t\n\tthis.tasks.escapeRegExp = function(str) {\n\t\treturn str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&');\n\t};\n\t\n\tthis.tasks.removeCharacters = function(charArray, str) {\n\t\tfor (var ii = 0; ii < charArray.length; ii++)\n            str = str.replace(new RegExp(knwl.tasks.escapeRegExp(charArray[ii]), 'g'), '');\n        return str;\n\t};\n\t\n\tthis.tasks.search = function(terms, words) {\n\t\tvar results = [];\n        for (var i = 0; i < words.length; i++) {\n            for (var e = 0; e < terms.length; e++) {\n                var curHol = terms[e];\n                var pos = i;\n                if (words[pos] === curHol[0]) {\n                    for (var x = 0; x < curHol.length; x++) {\n                        if (words[pos] === curHol[x]) {\n                            if (x === curHol.length - 1) {\n                                results.push(curHol);\n                            }\n                        }\n                        pos++;\n                    }\n                }\n            }\n        }\n        return results;\n\t};\n\t\n\tthis.tasks.preview = function(position) { // used to get the entire sentence or a portion of it (depending on size), in a human-readable format, from a position\n\t\tvar words = knwl.words.linkWordsCasesensitive;\n\t\tvar sentence = '';\n\t\t\n\t\tvar startPos = position;\n\t\tvar endPos = position;\n\t\t\n\t\tfor (var ii = position; ii > -1; ii--) {\n\t\t\tstartPos = ii;\n\t\t\tif (words[ii][words[ii].length - 1] !== undefined) {\n\t\t\t\tif (words[ii][words[ii].length - 1].search(/[?!.]/g) !== -1) {\n\t\t\t\t\tif (position - startPos > 0)\n\t\t\t\t\t\tstartPos = ii + 1;\n\t\t\t\t\tbreak;\n\t\t\t\t} else if (position - startPos > 10) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (var ii = position; ii < words.length; ii++) {\n\t\t\tendPos = ii;\n\t\t\tif (words[ii][words[ii].length - 1] !== undefined) {\n\t\t\t\tif (words[ii][words[ii].length - 1].search(/[?!.]/g) !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else if (endPos - position > 10) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tsentence += words[startPos];\n\t\tfor (var ii = startPos + 1; ii <= endPos; ii++) {\n\t\t\tsentence += ' ' + words[ii];\n\t\t}\n\t\treturn sentence;\n\t};\n\t\n\tthis.words = {\n\t\twords: [],\n\t\tlinkWords: [],\n\t\tlinkWordsCasesensitive: []\n\t};\n\tthis.words.get = function(typeStr) { //retrieve words from database\n        if (knwl.words[typeStr] !== undefined) {\n            return knwl.words[typeStr].concat([]);\n        }\n    };\n\tthis.words.getSentence = function(pos, typeStr) { //used to get the entire sentence a position occurs in, in a specific format\n\t\tvar fullWords = knwl.words.get('linkWordsCasesensitive');\n\t\tvar typeWords = knwl.words.get(typeStr);\n\t\t\n\t\tvar startPos = pos;\n\t\tvar begin = 0;\n\t\tvar sentence = [];\n\t\tfor (var ii = startPos; ii > -1; ii--) {\n\t\t\tif (fullWords[ii][fullWords[ii].length - 1].search(/[?!.]/g) !== -1) {\n\t\t\t\tif (startPos - begin > 0)\n\t\t\t\t\tbegin = ii + 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar end = 0;\n\t\tfor (var ii = startPos; ii < fullWords.length; ii++) {\n\t\t\tend = ii;\n\t\t\tif (fullWords[ii][fullWords[ii].length - 1].search(/[?!.]/g) !== -1) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (var ii = begin; ii <= end; ii++) {\n\t\t\tsentence.push(typeWords[ii]);\n\t\t}\n\t\tconsole.log(sentence);\n\t};\n\t\n\tthis.init = function(str) {\n\t\tvar lowercase = str.toLowerCase();\n\t\tvar linkWords = lowercase.split(/[ \\n]+/);\n\t\tvar linkWordsCaseSensitive = str.split(/[ \\n]+/);\n\t\tlowercase = lowercase.split(/[\\n ]+/);\n\t\t\n\t\tfor (var ii = 0; ii < lowercase.length; ii++)\n\t\t\tlowercase[ii] = lowercase[ii].replace(/[ ,?!]/g, '').replace(/[\"]/g, \"'\");\n\t\t\n\t\tvar words = [];\n\t\tfor (var ii = 0; ii < lowercase.length; ii++)\n\t\t\twords[ii] = lowercase[ii].split(/[.,!?]+/)[0];\n\t\t\n\t\tknwl.words.linkWordsCasesensitive = linkWordsCaseSensitive;\n\t\tknwl.words.linkWords = linkWords;\n\t\tknwl.words.words = words;\n\t\treturn knwl.words;\n\t};\n\tthis.get = function(parser) {\n\t\tif (this.plugins[parser] !== undefined) {\n            try {\n                var args = arguments;\n                var data = knwl.plugins[parser].calls(args);\n                return data;\n            } catch (error) {\n                console.error('Knwl.js Error', 'Error running parser plugin \"' + parser + '\"', error);\n                return false;\n            }\n        } else {\n            console.error('Knwl.js Error', 'Parser plugin \"' + parser + '\" not found.');\n            return false;\n        }\n\t};\n\t\n\tthis.plugins = {};\n\tthis.register = function (name, Plugin) {\n        knwl.plugins[name] = new Plugin(knwl);\n        if (knwl.plugins[name].languages !== undefined && knwl.language !== 'unknown') {\n            if (knwl.plugins[name].languages[knwl.language] === undefined || knwl.plugins[name].languages[knwl.language] === false) {\n                return {'Knwl.js Error': 'Parser plugin does not seem to support the specified language.'};\n            }\n        }\n        return knwl;  \n    };\n\t\n\tvar knwl = this;\n\t\n\t// load default plugins\n    this.register('dates', require('./default_plugins/dates'));\n    this.register('times', require('./default_plugins/times'));\n    \n    this.register('emails', require('./default_plugins/emails'));\n    this.register('links', require('./default_plugins/links'));\n    this.register('phones', require('./default_plugins/phones'));\n    \n    this.register('places', require('./default_plugins/places'));\n};\n\nmodule.exports = Knwl;"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.6572265625,
          "content": "{\n  \"name\": \"knwl.js\",\n  \"description\": \"Parse through text for specific information.\",\n  \"version\": \"1.0.2\",\n  \"keywords\": [\n    \"data\",\n    \"tagging\",\n    \"parsing\",\n    \"language\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/loadfive/Knwl.js.git\"\n  },\n  \"main\": \"knwl.js\",\n  \"author\": {\n    \"name\": \"loadfive\",\n    \"email\": \"contact@loadfive.com\"\n  },\n  \"engines\": {\n    \"node\": \"*\"\n  },\n  \"devDependencies\": {\n    \"browserify\": \"^10.2.3\",\n    \"jasmine-node\": \"^1.14.5\",\n    \"uglifyjs\": \"^2.4.10\"\n  },\n  \"scripts\": {\n    \"build\": \"scripts/build.sh\",\n    \"test\": \"scripts/test.sh\"\n  },\n  \"dependencies\": {\n    \"phoneformat.js\": \"^1.0.3\"\n  }\n}\n"
        },
        {
          "name": "plugin_development.md",
          "type": "blob",
          "size": 5.6923828125,
          "content": "# Writing Plugins\n\nExtending the parsing ability of Knwl.js is done through parser plugins.\n\nParser plugins are what allow Knwl.js to parse through text. Without them, Knwl.js is merely a shell.\nThe default plugins provided are likely the most commonly parsers, and include plugins for things like dates, times, and places. There are\nalso a number of experimental plugins. These are unpolished and often lack the accuracy of the default plugins, however,\nthey should still be stable.\n\nIf you are wanting to make a plugin that offers a new parsing ability to Knwl.js, this document will help you get started.\n\n##Basic Plugin Template\n\nHere's a basic template for a parser plugin:\n\n```javascript\n\n\tfunction PluginName(knwlInstance) {\n\t\t\n\t\tthis.languages = { //supported languages\n\t\t\tenglish: true\t\n\t\t};\n\t\t\n\t\tthis.calls = function() {\n\t\t\t\n\t\t\tvar words = knwlInstance.words.get('words'); //get the String as an array of words\n\t\t\tvar resultsArray = [];\n\t\t\t\n\t\t\t/*\n\t\t\t\t\n\t\t\t\tParser Code\n\t\t\t\n\t\t\t*/\n\t\t\t\n\t\t    return results;\n\t\t};\n\t}\n\t\n\tmodule.exports = PluginName;\n\n\n```\n\n1. When your plugin is loaded using ```Knwl.register()```, it is passed the instance of the Knwl. In this object, you can access the APIs of Knwl.js.\n\n\t```javascript\n\t\tfunction PluginName(knwlInstance) {\n\t```\n2. Your plugin should specify the languages it supports by their full names in an object ```languages```.\n\t```javascript\n\t\tthis.languages = { //supported languages\n\t\t\tenglish: true,\n\t\t\tspanish: true\n\t\t}\n\t```\n\tYour plugin can check the language of the Knwl.js instance with the property ```Knwl.language```. If the instance of Knwl.js does not have a specified language,\n\tthis property will have a value of ```unknown```.\n\n3. A ```.calls()``` method must be provided for ```knwl.get()``` to call your plugin.\n\t```javascript\n\t\tthis.calls = function() {\n\t```\n\t\n4. Your parser plugin should use the database of words provided by the Knwl.js Instance to parse.\n\t```javascript\n\t\tvar words = knwlInstance.words.get('words');\n\t```\n\t```Knwl.words.get()``` may be used to retrieve one of three different versions of the String data.\n\t1. ```\"words\"``` an array containing the String broken into words with punctuation removed and in lowercase.\n\t2. ```\"linkWords\"``` an array of the words in lowercase with punctuation intact.\n\t3. ```\"linkWordsCasesensitive\"``` an array of the words with punctuation intact and in original case.\n\t\n5. Your plugin should expect to find multiple results when parsing. Thus, your plugin should return an array that contains the results.\n\t```javascript\n\t\treturn results;\n\t```\n\t\n\tIndividual results should be stored as an object in this array, with a format similar to this:\n\t```javascript\n\t\tvar result = {\n\t\t\tlabel: value,\n\t\t\tlabel: value,\n\t\t\t\n\t\t\tpreview: knwlInstance.tasks.preview(foundPosition),\n\t\t\tfound: foundPosition\n\t\t}\n\t```\n\t\n\tThe first properties are specific to each plugin, however, ```\"preview\"``` is\n\ta standard property needed for all results. This property contains a sentence, or a portion of a sentence,\n\tgenerated by ```Knwl.tasks.preview()``` of the result's position in the String. \n\t\n\tThe first parameter of ```Knwl.tasks.preview()``` is the position of the result in the words database.\n\t\n\tFinally, ```\"found\"``` is the position of the result\n\tin the word database.\n\n## Knwl.register()\n\n```Knwl.register()``` is used by someone wanting to use your plugin to load it into their web app. This method creates a new instance of your plugin and passes the Knwl.js Instance in the first parameter.\n\n## Knwl.get()\n```Knwl.get()``` is the method responsible for calling your plugin. When a web application invokes this method with a plugin name in the first parameter,\n```knwl.js``` looks for that plugin and then calls it, passing any parameters provided to ```knwl.get()``` to the init function of the plugin.\n\nHere's an example:\n\n```javascript\nknwl.init(\"This is a string that contains a phone number: 5223241324\"); //initialized on String\n\nvar results = knwl.get('phones', 'parameter2', 'three');\n\n/*\n\n\t# Passed to plugin\n\tknwl.get('phones', 'parameter2', 'three') --> plugin('phones', 'parameter2', 'three')\n\t\n\t# Plugin returns results\n\tplugin --> knwl.get() --> app\n\n*/\n\nconsole.log(results);\n\n```\n\n## Standards and Best Practices\n\nThere are a few standards you should keep in mind to ensure a coherent experience for those wanting to use your plugin.\n\n1. Parser plugins should be contained within one file.\n\n2. Plugins should not modify the global ```Knwl.words``` database.\nWhen ```Knwl.init()``` is called on a string, Knwl.js breaks the string appart into its component parts. It then stores\nthese parts as properties in a global object: ```Knwl.words{}```. Your plugin should retrieve its required data from\nthis database, however, be careful not to modify the data contained within. If this happens, plugins that run after your own will\nnot access the originally intended data, but instead, the changes your plugin made. This can cause plugins to become inaccurate.\n\n3. Consider publishing documentation for your plugin if you plan to release publicly. Documentation should show the user how to use ```Knwl.get()``` to initiate the plugin, e.g. ```knwl.get('dates')```.\n\n4. Make something awesome.\n\n## Publishing\n\nIf you intend on releasing your parser plugin publicly, the best and most approachable way is to create a GitHub Repository for the plugin.\n\n## Further Help\n\n It's recommended that anyone developing plugins for Knwl.js look at preexisting plugins first for inspiration.\n\nIf you need more granular assistance in developing your plugin, or this documentation doesn't make any sense, no problem! You can reach me personally at anytime here: moore.h.ben@gmail.com.\n\nThere is also a **Google+ Community**, where you can discuss plugins and more: https://plus.google.com/communities/108874785204246812675.\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}