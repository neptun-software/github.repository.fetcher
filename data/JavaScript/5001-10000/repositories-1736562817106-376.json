{
  "metadata": {
    "timestamp": 1736562817106,
    "page": 376,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "tholman/elevator.js",
      "stars": 6639,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.7978515625,
          "content": "# elevator.js\nFinally, a \"back to top\" button that behaves like a real elevator, by adding elevator music to quietly soothe the awkwardness that can ensue when being smoothly scrolled to the top of the screen.\n\nThis is very serious stuff, [here's a demo](http://tholman.com/elevator.js)!\n\n### Instructions\n\n`Elevator.js` is a stand alone library (no jquery, or the likes) so usage is pretty straight forward. All styling of elements is up to you. `Elevator.js` only handles the audio management, and the scroll functionality!\n\n#### JS\n\n`Elevator.js` lives entirely within the js realm, which makes things fairly simple to use.\n\nYou'll need to create a new instance of `Elevator`, and pass it some audio elements.\n\n```html\n<script>\n// Elevator script included on the page, already.\n\nwindow.onload = function() {\n  var elevator = new Elevator({\n    mainAudio: '/src/to/audio.mp3',\n    endAudio: '/src/to/end-audio.mp3'\n  });\n}\n\n// You can run the elevator, by calling.\nelevator.elevate();\n</script>\n```\n\nYou can also add an \"element\" option, clicking this element will invoke the \"Scroll to top\" functionality, we all love and crave.\n```html\n<div class=\"elevator-button\">Back to Top</div>\n\n<script>\n// Elevator script included on the page, already.\n\nwindow.onload = function() {\n  var elevator = new Elevator({\n    element: document.querySelector('.elevator-button'),\n    mainAudio: '/src/to/audio.mp3',\n    endAudio: '/src/to/end-audio.mp3'\n  });\n}\n</script>\n```\n\nIf you don't want to scroll to the top, a custom target can be specified by adding a \"targetElement\" option:\n```html\n<div class=\"elevator-button\">Take the elevator to the target</div>\n\n<script>\n// Elevator script included on the page, already.\n\nwindow.onload = function() {\n  var elevator = new Elevator({\n    element: document.querySelector('.elevator-button'),\n    targetElement: document.querySelector('#elevator-target'),\n    mainAudio: '/src/to/audio.mp3',\n    endAudio: '/src/to/end-audio.mp3'\n  });\n}\n</script>\n```\n\nIf you want to scroll to a point on the page with some extra padding on the top, simply add the \"verticalPadding\" option:\n\n```html\n<div class=\"elevator-button\">Take the elevator to the target</div>\n\n<script>\n// Elevator script included on the page, already.\n\nwindow.onload = function() {\n  var elevator = new Elevator({\n    element: document.querySelector('.elevator-button'),\n    targetElement: document.querySelector('#elevator-target'),\n    verticalPadding: 100,  // in pixels\n    mainAudio: '/src/to/audio.mp3',\n    endAudio: '/src/to/end-audio.mp3'\n  });\n}\n</script>\n```\n\nIf you're really serious (boring), you don't have to use audio... and can also set a fixed time to scroll to the top\n```html\n<div class=\"elevator-button\">Back to Top</div>\n\n<script>\n// Elevator script included on the page, already.\n\nwindow.onload = function() {\n  var elevator = new Elevator({\n    element: document.querySelector('.elevator-button'),\n    duration: 1000 // milliseconds\n  });\n}\n</script>\n```\n\nIf you use elevator.js in combination with other code, you might want to use callbacks\n```html\n<script>\nwindow.onload = function() {\n   new Elevator({\n       element: document.querySelector('.elevator-button'),\n       mainAudio: '/src/to/audio.mp3',\n       endAudio: '/src/to/end-audio.mp3',\n       duration: 5000,\n       startCallback: function() {\n         // is called, when the elevator starts moving\n       },\n       endCallback: function() {\n         // is called, when the elevator reached target level\n       }\n   });\n}\n</script>\n```\n\n### NPM\nThe package is also available via [NPM](https://www.npmjs.com/package/elevator.js)\n\n### License\n\nElevator.js is covered by the MIT License.\n\nAudio in the Demo was bought via [Pond5](https://www.pond5.com/stock-music/11517192/elevator-bossa-nova.html), you will need to license your own.\n\nCopyright (C) ~ [Tim Holman](http://tholman.com) ~ timothy.w.holman@gmail.com\n"
        },
        {
          "name": "demo",
          "type": "tree",
          "content": null
        },
        {
          "name": "elevator.js",
          "type": "blob",
          "size": 6.38671875,
          "content": "/*!\n * Elevator.js\n *\n * MIT licensed\n * Copyright (C) 2015 Tim Holman, http://tholman.com\n */\n\n/*********************************************\n * Elevator.js\n *********************************************/\n\nvar Elevator = function(options) {\n    \"use strict\";\n\n    // Elements\n    var body = null;\n\n    // Scroll vars\n    var animation = null;\n    var duration = null; // ms\n    var customDuration = false;\n    var startTime = null;\n    var startPosition = null;\n    var endPosition = 0;\n    var targetElement = null;\n    var verticalPadding = null;\n    var elevating = false;\n\n    var startCallback;\n    var mainAudio;\n    var endAudio;\n    var endCallback;\n\n    var that = this;\n\n    /**\n     * Utils\n     */\n\n    // Thanks Mr Penner - http://robertpenner.com/easing/\n    function easeInOutQuad(t, b, c, d) {\n        t /= d / 2;\n        if (t < 1) return c / 2 * t * t + b;\n        t--;\n        return -c / 2 * (t * (t - 2) - 1) + b;\n    }\n\n    function extendParameters(options, defaults) {\n        for (var option in defaults) {\n            var t =\n                options[option] === undefined && typeof option !== \"function\";\n            if (t) {\n                options[option] = defaults[option];\n            }\n        }\n        return options;\n    }\n\n    function getVerticalOffset(element) {\n        var verticalOffset = 0;\n        while (element) {\n            verticalOffset += element.offsetTop || 0;\n            element = element.offsetParent;\n        }\n\n        if (verticalPadding) {\n            verticalOffset = verticalOffset - verticalPadding;\n        }\n\n        return verticalOffset;\n    }\n\n    /**\n     * Main\n     */\n\n    // Time is passed through requestAnimationFrame, what a world!\n    function animateLoop(time) {\n        if (!startTime) {\n            startTime = time;\n        }\n\n        var timeSoFar = time - startTime;\n        var easedPosition = easeInOutQuad(\n            timeSoFar,\n            startPosition,\n            endPosition - startPosition,\n            duration\n        );\n\n        window.scrollTo(0, easedPosition);\n\n        if (timeSoFar < duration) {\n            animation = requestAnimationFrame(animateLoop);\n        } else {\n            animationFinished();\n        }\n    }\n\n    //            ELEVATE!\n    //              /\n    //         ____\n    //       .'    '=====<0\n    //       |======|\n    //       |======|\n    //       [IIIIII[\\--()\n    //       |_______|\n    //       C O O O D\n    //      C O  O  O D\n    //     C  O  O  O  D\n    //     C__O__O__O__D\n    //    [_____________]\n    this.elevate = function() {\n        if (elevating) {\n            return;\n        }\n\n        elevating = true;\n        startPosition = document.documentElement.scrollTop || body.scrollTop;\n        updateEndPosition();\n\n        // No custom duration set, so we travel at pixels per millisecond. (0.75px per ms)\n        if (!customDuration) {\n            duration = Math.abs(endPosition - startPosition) * 1.5;\n        }\n\n        requestAnimationFrame(animateLoop);\n\n        // Start music!\n        if (mainAudio) {\n            mainAudio.play();\n        }\n\n        if (startCallback) {\n            startCallback();\n        }\n    };\n\n    function browserMeetsRequirements() {\n        return (\n            window.requestAnimationFrame &&\n            window.Audio &&\n            window.addEventListener\n        );\n    }\n\n    function resetPositions() {\n        startTime = null;\n        startPosition = null;\n        elevating = false;\n    }\n\n    function updateEndPosition() {\n        if (targetElement) {\n            endPosition = getVerticalOffset(targetElement);\n        }\n    }\n\n    function animationFinished() {\n        resetPositions();\n\n        // Stop music!\n        if (mainAudio) {\n            mainAudio.pause();\n            mainAudio.currentTime = 0;\n        }\n\n        if (endAudio) {\n            endAudio.play();\n        }\n\n        if (endCallback) {\n            endCallback();\n        }\n    }\n\n    function onWindowBlur() {\n        // If animating, go straight to the top. And play no more music.\n        if (elevating) {\n            cancelAnimationFrame(animation);\n            resetPositions();\n\n            if (mainAudio) {\n                mainAudio.pause();\n                mainAudio.currentTime = 0;\n            }\n\n            updateEndPosition();\n            window.scrollTo(0, endPosition);\n        }\n    }\n\n    function bindElevateToElement(element) {\n        if (element.addEventListener) {\n            element.addEventListener(\"click\", that.elevate, false);\n        } else {\n            // Older browsers\n            element.attachEvent(\"onclick\", function() {\n                updateEndPosition();\n                document.documentElement.scrollTop = endPosition;\n                document.body.scrollTop = endPosition;\n                window.scroll(0, endPosition);\n            });\n        }\n    }\n\n    function init(_options) {\n\t\t// Take the stairs instead\n\t\tif (!browserMeetsRequirements()) {\n\t\t\treturn;\n\t\t}\n\n        // Bind to element click event.\n        body = document.body;\n\n        var defaults = {\n            duration: undefined,\n            mainAudio: false,\n            endAudio: false,\n            preloadAudio: true,\n            loopAudio: true,\n            startCallback: null,\n            endCallback: null\n        };\n\n        _options = extendParameters(_options, defaults);\n\n        if (_options.element) {\n            bindElevateToElement(_options.element);\n        }\n\n        if (_options.duration) {\n            customDuration = true;\n            duration = _options.duration;\n        }\n\n        if (_options.targetElement) {\n            targetElement = _options.targetElement;\n        }\n\n        if (_options.verticalPadding) {\n            verticalPadding = _options.verticalPadding;\n        }\n\n        window.addEventListener(\"blur\", onWindowBlur, false);\n\n        if (_options.mainAudio) {\n            mainAudio = new Audio(_options.mainAudio);\n            mainAudio.setAttribute(\"preload\", _options.preloadAudio);\n            mainAudio.setAttribute(\"loop\", _options.loopAudio);\n        }\n\n        if (_options.endAudio) {\n            endAudio = new Audio(_options.endAudio);\n            endAudio.setAttribute(\"preload\", \"true\");\n        }\n\n        if (_options.endCallback) {\n            endCallback = _options.endCallback;\n        }\n\n        if (_options.startCallback) {\n            startCallback = _options.startCallback;\n        }\n    }\n\n    init(options);\n};\n\nif (typeof module !== \"undefined\" && module.exports) {\n    module.exports = Elevator;\n}\n"
        },
        {
          "name": "elevator.min.js",
          "type": "blob",
          "size": 1.7685546875,
          "content": "var Elevator=function(n){\"use strict\";function e(n,e,t,o){return n/=o/2,1>n?t/2*n*n+e:(n--,-t/2*(n*(n-2)-1)+e)}function t(n,e){for(var t in e){var o=void 0===n[t]&&\"function\"!=typeof t;o&&(n[t]=e[t])}return n}function o(n){for(var e=0;n;)e+=n.offsetTop||0,n=n.offsetParent;return g&&(e-=g),e}function l(n){T||(T=n);var t=n-T,o=e(t,k,y-k,b);window.scrollTo(0,o),b>t?w=requestAnimationFrame(l):r()}function i(){return window.requestAnimationFrame&&window.Audio&&window.addEventListener}function u(){T=null,k=null,h=!1}function a(){C&&(y=o(C))}function r(){u(),f&&(f.pause(),f.currentTime=0),p&&p.play(),v&&v()}function d(){h&&(cancelAnimationFrame(w),u(),f&&(f.pause(),f.currentTime=0),a(),window.scrollTo(0,y))}function c(n){n.addEventListener?n.addEventListener(\"click\",F.elevate,!1):n.attachEvent(\"onclick\",function(){a(),document.documentElement.scrollTop=y,document.body.scrollTop=y,window.scroll(0,y)})}function s(n){A=document.body;var e={duration:void 0,mainAudio:!1,endAudio:!1,preloadAudio:!0,loopAudio:!0,startCallback:null,endCallback:null};n=t(n,e),n.element&&c(n.element),i()&&(n.duration&&(E=!0,b=n.duration),n.targetElement&&(C=n.targetElement),n.verticalPadding&&(g=n.verticalPadding),window.addEventListener(\"blur\",d,!1),n.mainAudio&&(f=new Audio(n.mainAudio),f.setAttribute(\"preload\",n.preloadAudio),f.setAttribute(\"loop\",n.loopAudio)),n.endAudio&&(p=new Audio(n.endAudio),p.setAttribute(\"preload\",\"true\")),n.endCallback&&(v=n.endCallback),n.startCallback&&(m=n.startCallback))}var m,f,p,v,A=null,w=null,b=null,E=!1,T=null,k=null,y=0,C=null,g=null,h=!1,F=this;this.elevate=function(){h||(h=!0,k=document.documentElement.scrollTop||A.scrollTop,a(),E||(b=1.5*Math.abs(y-k)),requestAnimationFrame(l),f&&f.play(),m&&m())},s(n)};\"undefined\"!=typeof module&&module.exports&&(module.exports=Elevator);"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.6142578125,
          "content": "{\n  \"name\": \"elevator.js\",\n  \"version\": \"1.0.1\",\n  \"description\":\n    \"Elevator.js fixes those awkward \\\"scroll to top\\\" moments the old fashioned way.\",\n  \"keywords\": [\"scroll\", \"top\", \"elevator\"],\n  \"homepage\": \"http://tholman.com/elevator.js\",\n  \"bugs\": {\n    \"url\": \"https://github.com/tholman/elevator.js/issues\"\n  },\n  \"license\": \"MIT\",\n  \"author\": \"Tim Holman <timothy.w.holman@gmail.com> (http://tholman.com)\",\n  \"main\": \"elevator.min.js\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/tholman/elevator.js.git\"\n  },\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  }\n}\n"
        }
      ]
    }
  ]
}