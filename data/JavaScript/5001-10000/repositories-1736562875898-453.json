{
  "metadata": {
    "timestamp": 1736562875898,
    "page": 453,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "cambecc/earth",
      "stars": 6230,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.2607421875,
          "content": "# Auto-detect all text files and force them to LF line endings.\n*       text=auto eol=lf\n\n# Well known binary files.\n*.dll   binary\n*.dylib binary\n*.o     binary\n*.so    binary\n*.ttf   binary\n*.eot   binary\n*.woff  binary\n*.ico   binary\n*.png   binary\n*.jpg   binary\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.056640625,
          "content": ".DS_Store\n.idea\nnode_modules\ntarget\nscratch\nprivate\n*.iml\n"
        },
        {
          "name": "Gruntfile.js",
          "type": "blob",
          "size": 0.8125,
          "content": "\"use strict\";\n\nmodule.exports = function(grunt) {\n\n    // Project configuration.\n    grunt.initConfig({\n        pkg: grunt.file.readJSON(\"package.json\"),\n        jshint: {\n            files: [\"*.js\", \"public/libs/earth/**/*.js\"],\n            options: {\n                // ignores: [\"\"],\n                globals: {\n                    Buffer: false,\n                    console: false,\n                    exports: false,\n                    module: false,\n                    process: false,\n                    require: false,\n                    __dirname: false\n                },\n                globalstrict: true\n            }\n        }\n    });\n\n    // Load the plugin that provides the \"jshint\" task.\n    grunt.loadNpmTasks(\"grunt-contrib-jshint\");\n\n    // Default task(s).\n    grunt.registerTask(\"default\", [\"jshint\"]);\n\n};\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.0576171875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2014 Cameron Beccario\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.3427734375,
          "content": "earth\n=====\n\n**NOTE: the location of `dev-server.js` has changed from `{repository}/server/` to `{repository}/`**\n\n\"earth\" is a project to visualize global weather conditions.\n\nA customized instance of \"earth\" is available at http://earth.nullschool.net.\n\n\"earth\" is a personal project I've used to learn javascript and browser programming, and is based on the earlier\n[Tokyo Wind Map](https://github.com/cambecc/air) project.  Feedback and contributions are welcome! ...especially\nthose that clarify accepted best practices.\n\nbuilding and launching\n----------------------\n\nAfter installing node.js and npm, clone \"earth\" and install dependencies:\n\n    git clone https://github.com/cambecc/earth\n    cd earth\n    npm install\n\nNext, launch the development web server:\n\n    node dev-server.js 8080\n\nFinally, point your browser to:\n\n    http://localhost:8080\n\nThe server acts as a stand-in for static S3 bucket hosting and so contains almost no server-side logic. It\nserves all files located in the `earth/public` directory. See `public/index.html` and `public/libs/earth/*.js`\nfor the main entry points. Data files are located in the `public/data` directory, and there is one sample\nweather layer located at `data/weather/current`.\n\n*For Ubuntu, Mint, and elementary OS, use `nodejs` instead of `node` instead due to a [naming conflict](https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager#ubuntu-mint-elementary-os).\n\ngetting map data\n----------------\n\nMap data is provided by [Natural Earth](http://www.naturalearthdata.com) but must be converted to\n[TopoJSON](https://github.com/mbostock/topojson/wiki) format. We make use of a couple different map scales: a\nsimplified, larger scale for animation and a more detailed, smaller scale for static display. After installing\n[GDAL](http://www.gdal.org/) and TopoJSON (see [here](http://bost.ocks.org/mike/map/#installing-tools)), the\nfollowing commands build these files:\n\n    curl \"http://www.nacis.org/naturalearth/50m/physical/ne_50m_coastline.zip\" -o ne_50m_coastline.zip\n    curl \"http://www.nacis.org/naturalearth/50m/physical/ne_50m_lakes.zip\" -o ne_50m_lakes.zip\n    curl \"http://www.nacis.org/naturalearth/110m/physical/ne_110m_coastline.zip\" -o ne_110m_coastline.zip\n    curl \"http://www.nacis.org/naturalearth/110m/physical/ne_110m_lakes.zip\" -o ne_110m_lakes.zip\n    unzip -o ne_\\*.zip\n    ogr2ogr -f GeoJSON coastline_50m.json ne_50m_coastline.shp\n    ogr2ogr -f GeoJSON coastline_110m.json ne_110m_coastline.shp\n    ogr2ogr -f GeoJSON -where \"scalerank < 4\" lakes_50m.json ne_50m_lakes.shp\n    ogr2ogr -f GeoJSON -where \"scalerank < 2 AND admin='admin-0'\" lakes_110m.json ne_110m_lakes.shp\n    ogr2ogr -f GeoJSON -simplify 1 coastline_tiny.json ne_110m_coastline.shp\n    ogr2ogr -f GeoJSON -simplify 1 -where \"scalerank < 2 AND admin='admin-0'\" lakes_tiny.json ne_110m_lakes.shp\n    topojson -o earth-topo.json coastline_50m.json coastline_110m.json lakes_50m.json lakes_110m.json\n    topojson -o earth-topo-mobile.json coastline_110m.json coastline_tiny.json lakes_110m.json lakes_tiny.json\n    cp earth-topo*.json <earth-git-repository>/public/data/\n\ngetting weather data\n--------------------\n\nWeather data is produced by the [Global Forecast System](http://en.wikipedia.org/wiki/Global_Forecast_System) (GFS),\noperated by the US National Weather Service. Forecasts are produced four times daily and made available for\ndownload from [NOMADS](http://nomads.ncep.noaa.gov/). The files are in [GRIB2](http://en.wikipedia.org/wiki/GRIB)\nformat and contain over [300 records](http://www.nco.ncep.noaa.gov/pmb/products/gfs/gfs.t00z.pgrbf00.grib2.shtml).\nWe need only a few of these records to visualize wind data at a particular isobar. The following commands download\nthe 1000 hPa wind vectors and convert them to JSON format using the [grib2json](https://github.com/cambecc/grib2json)\nutility:\n\n    YYYYMMDD=<a date, for example: 20140101>\n    curl \"http://nomads.ncep.noaa.gov/cgi-bin/filter_gfs.pl?file=gfs.t00z.pgrb2.1p00.f000&lev_10_m_above_ground=on&var_UGRD=on&var_VGRD=on&dir=%2Fgfs.${YYYYMMDD}00\" -o gfs.t00z.pgrb2.1p00.f000\n    grib2json -d -n -o current-wind-surface-level-gfs-1.0.json gfs.t00z.pgrb2.1p00.f000\n    cp current-wind-surface-level-gfs-1.0.json <earth-git-repository>/public/data/weather/current\n\nfont subsetting\n---------------\n\nThis project uses [M+ FONTS](http://mplus-fonts.sourceforge.jp/). To reduce download size, a subset font is\nconstructed out of the unique characters utilized by the site. See the `earth/server/font/findChars.js` script\nfor details. Font subsetting is performed by the [M+Web FONTS Subsetter](http://mplus.font-face.jp/), and\nthe resulting font is placed in `earth/public/styles`.\n\n[Mono Social Icons Font](http://drinchev.github.io/monosocialiconsfont/) is used for scalable, social networking\nicons. This can be subsetted using [Font Squirrel's WebFont Generator](http://www.fontsquirrel.com/tools/webfont-generator).\n\nimplementation notes\n--------------------\n\nBuilding this project required solutions to some interesting problems. Here are a few:\n\n   * The GFS grid has a resolution of 1Â°. Intermediate points are interpolated in the browser using [bilinear\n     interpolation](http://en.wikipedia.org/wiki/Bilinear_interpolation). This operation is quite costly.\n   * Each type of projection warps and distorts the earth in a particular way, and the degree of distortion must\n     be calculated for each point (x, y) to ensure wind particle paths are rendered correctly. For example,\n     imagine looking at a globe where a wind particle is moving north from the equator. If the particle starts\n     from the center, it will trace a path straight up. However, if the particle starts from the globe's edge,\n     it will trace a path that curves toward the pole. [Finite difference approximations](http://gis.stackexchange.com/a/5075/23451)\n     are used to estimate this distortion during the interpolation process.\n   * The SVG map of the earth is overlaid with an HTML5 Canvas, where the animation is drawn. Another HTML5\n     Canvas sits on top and displays the colored overlay. Both canvases must know where the boundaries of the\n     globe are rendered by the SVG engine, but this pixel-for-pixel information is difficult to obtain directly\n     from the SVG elements. To workaround this problem, the globe's bounding sphere is re-rendered to a\n     detached Canvas element, and the Canvas' pixels operate as a mask to distinguish points that lie outside\n     and inside the globe's bounds.\n   * Most configuration options are persisted in the hash fragment to allow deep linking and back-button\n     navigation. I use a [backbone.js Model](http://backbonejs.org/#Model) to represent the configuration.\n     Changes to the model persist to the hash fragment (and vice versa) and trigger \"change\" events which flow to\n     other components.\n   * Components use [backbone.js Events](http://backbonejs.org/#Events) to trigger changes in other downstream\n     components. For example, downloading a new layer produces a new grid, which triggers reinterpolation, which\n     in turn triggers a new particle animator. Events flow through the page without much coordination,\n     sometimes causing visual artifacts that (usually) quickly disappear.\n   * There's gotta be a better way to do this. Any ideas?\n\ninspiration\n-----------\n\nThe awesome [hint.fm wind map](http://hint.fm/wind/) and [D3.js visualization library](http://d3js.org) provided\nthe main inspiration for this project.\n"
        },
        {
          "name": "characters.txt",
          "type": "blob",
          "size": 1.37890625,
          "content": "!\t' \"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\nÂ¡Â¢Â£Â¤Â¥Â¦Â§Â¨Â©ÂªÂ«Â¬Â®Â¯Â°Â±Â²Â³Â´Î¼Â¶Â·Â¸Â¹ÂºÂ»Â¼Â½Â¾Â¿ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¢Ã£Ã¤Ã¥Ã¦Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã°Ã±Ã²Ã³Ã´ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿\nãããã»ï¼¿ï½ãï¼ï¼ãï¼ï¼ï¼ï¼¿ÂºÃ©ÎÎÎ±Î²Î³Î´ÎµÎ¶Î·Î¸Î»Î¼Î½Î¾ÏÏÏÏÏÏÏââ¦â¹âºâââ¡âªâ«â¯Âµâããâ°Â¹Â²Â³â´âµâ¶â·â¸â¹ââââââââââââ\nãããããããããããããããããããããããããããããããã ã¡ã¢ã£ã¤ã¥ã¦ã§ã¨ã©ãªã«ã¬ã­ã®ã¯ã°ã±ã²ã³ã´ãµã¶ã·ã¸ã¹ãºã»ã¼ã½ã¾ã¿ããã\nããããããããããããããããããã¡ã¢ã£ã¤ã¥ã¦ã§ã¨ã©ãªã«ã¬ã­ã®ã¯ã°ã±ã²ã³ã´ãµã¶ã·ã¸ã¹ãºã»ã¼ã½ã¾ã¿ããããããããããããããããããã\nãããããããããããããã ã¡ã¢ã£ã¤ã¥ã¦ã§ã¨ã©ãªã«ã¬ã­ã®ã¯ã°ã±ã²ã³ã´ãµã¶ã·ã¸ã¹ãºï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ã¼ï¼¾ï¿¥ï¼âï¼ï¼ï¼ï¼âï¼ï¼ï¼ãï½ï¼ ãï¼ï¼\näºä»ä½ä¾åå°å·å°å ±åº¦å½±å¾æææææ°æ¥æ²ææ­£æ³æ¹¿ç¡çç¢ºè²¬éé¨é·é¢é é¢¨é«äº¬æ±ä½ååå½å¨åå°å±å¹³æ¹ææ°ç¾ç«ç¬¬ç­è¶è±¡è·ééäºä½åå¢å¤§å¤©å±¤ææ¬æµ\næ¸¦çèªä¸ä»¥å³å¿æè¦ä¸ä¸­æ´ä½¿å§æ³ç¶çç¨é£é¢åè¿ä¿¡æºçºå¯æ°´æµ·æ¸©ééé²åç»åå¯å¯¾ç¸ç©º\n"
        },
        {
          "name": "dev-server.js",
          "type": "blob",
          "size": 1.51171875,
          "content": "/**\n * dev-server - serves static resources for developing \"earth\" locally\n */\n\n\"use strict\";\n\nconsole.log(\"============================================================\");\nconsole.log(new Date().toISOString() + \" - Starting\");\n\nvar util = require(\"util\");\n\n/**\n * Returns true if the response should be compressed.\n */\nfunction compressionFilter(req, res) {\n    return (/json|text|javascript|font/).test(res.getHeader('Content-Type'));\n}\n\n/**\n * Adds headers to a response to enable caching.\n */\nfunction cacheControl() {\n    return function(req, res, next) {\n        res.setHeader(\"Cache-Control\", \"public, max-age=300\");\n        return next();\n    };\n}\n\nfunction logger() {\n    express.logger.token(\"date\", function() {\n        return new Date().toISOString();\n    });\n    express.logger.token(\"response-all\", function(req, res) {\n        return (res._header ? res._header : \"\").trim();\n    });\n    express.logger.token(\"request-all\", function(req, res) {\n        return util.inspect(req.headers);\n    });\n    return express.logger(\n        ':date - info: :remote-addr :req[cf-connecting-ip] :req[cf-ipcountry] :method :url HTTP/:http-version ' +\n        '\":user-agent\" :referrer :req[cf-ray] :req[accept-encoding]\\\\n:request-all\\\\n\\\\n:response-all\\\\n');\n}\n\nvar port = process.argv[2];\nvar express = require(\"express\");\nvar app = express();\n\napp.use(cacheControl());\napp.use(express.compress({filter: compressionFilter}));\napp.use(logger());\napp.use(express.static(\"public\"));\n\napp.listen(port);\nconsole.log(\"Listening on port \" + port + \"...\");\n"
        },
        {
          "name": "expand.js",
          "type": "blob",
          "size": 1.6796875,
          "content": "/**\n * expand - expands templates with internationalized strings. The resulting HTML files are written to disk.\n *\n * This utility builds the Japanese and English versions of the HTML files. The templates are written using Swig,\n * and roughly follows the methodology described at http://ejohn.org/blog/a-strategy-for-i18n-and-node/\n *\n * English files are placed in the root: public/\n * Japanese files are placed under the language code: public/jp\n * ...and so on for other languages, if ever...\n *\n * don't really care about making the code nice at the moment\n * ideally, this would be a grunt task run at build time\n */\n\n\"use strict\";\n\nvar fs = require(\"fs\");\nvar path = require(\"path\");\nvar swig = require(\"swig\");\nvar mkdirp = require(\"mkdirp\");\nvar dictionary = require(\"./public/templates/il8n.json\");\n\nvar templateDir = \"public/templates\";\n\nvar templates = [\n    \"index.html\",\n    \"about.html\"\n];\n\nvar languages = [\n    {code: \"en\", target: \"public\"},\n    {code: \"ja\", target: \"public/jp\"}  // *lang* code for Japanese is JA not JP. Too late now. Site already public.\n];\n\nfunction newContext(languageCode) {\n    return {\n        __: function(s) {\n            var entry = dictionary[s];\n            if (!entry) {\n                console.error(\"unknown il8n key: \" + s);\n            }\n            return entry && entry[languageCode] || s;\n        }\n    };\n}\n\ntemplates.forEach(function(file) {\n    var template = swig.compileFile(path.join(templateDir, file));\n\n    languages.forEach(function(language) {\n\n        var context = newContext(language.code);\n        var result = template(context);\n\n        mkdirp.sync(language.target);\n        fs.writeFileSync(path.join(language.target, file), result);\n    });\n});\n"
        },
        {
          "name": "find-chars.js",
          "type": "blob",
          "size": 3.8134765625,
          "content": "/*\n * find-chars - small utility to find all unique chars in all text files not already contained in characters.txt.\n *\n * The file characters.txt is used to build a subset font. The find-chars utility allows (somewhat incomplete)\n * detection of new chars that may not be included in the site's font, requiring a font rebuild.\n *\n * Font sub-setting of the M+ font used for the site can be performed here: http://font-face.jp/#mplus-2p-light\n *\n * don't really care about making the code nice at the moment\n * ideally, this would be a grunt task run at build time, and would warn/error on any new chars found\n */\n\n\"use strict\";\n\nvar fs = require(\"fs\");\nvar path = require(\"path\");\nvar when = require(\"when\");\nvar guard = require('when/guard');\n\n/**\n * Recursively walks a directory, invoking onFile for each file found.\n *\n * @param dir the starting directory of the walk\n * @param onFile a callback function(err, file, name, dir, stats) where file is the path of the file relative to\n *               the start of the walk, name is the name of the file, dir is the directory containing the\n *               the file, and stats is the fs.Stats object for the file. If the file is a directory, the callback\n *               can return true to skip walking the contents of the directory.\n */\nfunction walk(dir, onFile) {\n    var d = when.defer();\n    var pending = 1;\n\n    function visit(dir, name) {\n        var file = path.join(dir, name);\n        fs.stat(file, function(err, stats) {\n            var abort = onFile(err, file, name, dir, stats);\n            if (!abort && stats && stats.isDirectory()) {\n                return expand(file);\n            }\n            if (!--pending) {\n                d.resolve();\n            }\n        });\n    }\n\n    function expand(dir) {\n        fs.readdir(dir, function(err, names) {\n            pending += names.length;\n            names.forEach(function(name) {\n                visit(dir, name);\n            });\n            if (!--pending) {\n                d.resolve();\n            }\n        });\n    }\n\n    expand(dir);\n    return d.promise;\n}\n\nvar inspections = [];\nvar existingChars = {};\nvar uniqueChars = {};\n\nfunction inspect(target, file) {\n    var d = when.defer();\n    fs.readFile(file, {encoding: \"utf8\"}, function(err, data) {\n        if (err) {\n            return console.error(err);\n        }\n        for (var i = 0; i < data.length; i++) {\n            // UNDONE: support for surrogate pairs\n            var c = data.charAt(i);\n            target[c] = true;\n        }\n        d.resolve();\n    });\n    return d.promise;\n}\n\nvar inspectUnique_throttled = guard(guard.n(5), inspect.bind(null, uniqueChars));\n\nfunction onFile(err, file, name, dir, stats) {\n    if (err) {\n        return console.error(err);\n    }\n    if (name.substr(0, 1) === \".\") {\n        return true;  // ignore hidden directories and files\n    }\n    if (name === \"node_modules\") {\n        return true;  // ignore all node module sources\n    }\n    if (name === \"characters.txt\") {\n        return true;  // ignore file we're diffing against\n    }\n    if (dir.substring(dir.length - 4) === \"data\") {\n        return true;  // ignore the data directory\n    }\n    if (stats.isFile() && /\\.(js|json|txt|html|css|md)$/.test(name)) {\n        inspections.push(when(file).then(inspectUnique_throttled));\n    }\n}\n\ninspect(existingChars, \"characters.txt\").then(function() {\n    return walk(\"public\", onFile).then(function() {\n        return when.all(inspections).then(function() {\n            var n = 0, keys = Object.keys(uniqueChars);\n            keys.sort();\n            for (var i = 0; i < keys.length; i++) {\n                if (existingChars[keys[i]]) {\n                    continue;\n                }\n                console.log(\"'\" + keys[i] + \"'\");\n                n++;\n            }\n            console.log(\"\\nFound \" + n + \" new chars.\");\n        });\n    });\n}).otherwise(console.error);\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.603515625,
          "content": "{\n    \"name\": \"earth\",\n    \"description\": \"Earth\",\n    \"version\": \"0.0.1\",\n    \"private\": true,\n    \"author\": {\n        \"name\": \"Cameron Beccario\",\n        \"email\": \"cambecc@nullschool.net\"\n    },\n    \"homepage\": \"https://github.com/cambecc/earth\",\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"git://github.com/cambecc/earth.git\"\n    },\n    \"engine\": \"node >= 0.10.21\",\n    \"dependencies\": {\n        \"when\": \"2.6.0\",\n        \"swig\": \"1.2.2\",\n        \"mkdirp\": \"0.3.5\",\n        \"express\": \"3.4.4\"\n    },\n    \"devDependencies\": {\n        \"grunt\": \"~0.4.1\",\n        \"grunt-contrib-jshint\": \"~0.7.1\"\n    }\n}\n"
        },
        {
          "name": "public",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}