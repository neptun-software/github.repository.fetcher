{
  "metadata": {
    "timestamp": 1736563061507,
    "page": 696,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jasonmayes/Real-Time-Person-Removal",
      "stars": 5180,
      "defaultBranch": "master",
      "files": [
        {
          "name": "LICENCE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.0517578125,
          "content": "# Disappearing-People - Person removal from complex backgrounds over time.\nRemoving people from complex backgrounds in real time using TensorFlow.js in the web browser using JavaScript.\n\n## What can this do?\n\nThis code attempts to learn over time the makeup of the background of a video such that I can attempt to remove any humans from the scene. This is all happening in real time, in the browser, using TensorFlow.js. #MadeWithTFJS \n\nThis is an experiment. It may not be perfect in all situations.\n\n![disappearing people](https://user-images.githubusercontent.com/4972997/74691149-882fce00-5196-11ea-80bc-f1b9cb3ff275.gif)\n\n\n## Live Demos\n\nGo ahead and try it right now in your own web browser. Pick your preference and give me a fork / like :-)\n\nCodepen.io: https://codepen.io/jasonmayes/pen/GRJqgma\n\nGlitch.com: https://glitch.com/~disappearing-people\n\n\n## Usage\n\nFeel free to use in your own projects. Code is released under Apache licence. If you decide to use my code please consider giving me a shout out! Would love to see what others create with it :-) Thanks.\n\n---\n"
        },
        {
          "name": "index.html",
          "type": "blob",
          "size": 2.2734375,
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>Disappearing People Project</title>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <meta name=\"author\" content=\"Jason Mayes\">\n\n    <!-- Import the webpage's stylesheet -->\n    <link rel=\"stylesheet\" href=\"style.css\">\n\n    <!-- Import TensorFlow.js library -->\n    <script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs/dist/tf.min.js\" type=\"text/javascript\"></script>\n  </head>  \n  <body>\n    <h1>Disappearing People Project</h1>\n    \n    <header class=\"note\"> \n      <h2>Removing people from complex backgrounds in real time using TensorFlow.js</h2>\n    </header>\n\n    <h2>How to use</h2>\n    <p>Please wait for the model to load before trying the demos below at which point they will become visible when ready to use.</p>\n    <p>Here is a video of what you can expect to achieve using my custom algorithm. The top is the actual footage, the bottom video is with the real time removal of people working in JavaScript!</p>\n    <iframe width=\"540\" height=\"812\" src=\"https://www.youtube.com/embed/0LqEuc32uTc?controls=0&autoplay=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n    <section id=\"demos\" class=\"invisible\">\n\n      <h2>Demo: Webcam live removal</h2>\n      <p>Try this out using your webcam. Stand a few feet away from your webcam and start walking around... Watch as you slowly disappear in the bottom preview.</p>\n      \n      <div id=\"liveView\" class=\"webcam\">\n        <button id=\"webcamButton\">Enable Webcam</button>\n        <video id=\"webcam\" autoplay></video>\n      </div>\n    </section>\n  \n\n    <!-- Include the Glitch button to show what the webpage is about and\n         to make it easier for folks to view source and remix -->\n    <div class=\"glitchButton\" style=\"position:fixed;top:20px;right:20px;\"></div>\n    <script src=\"https://button.glitch.me/button.js\"></script>\n    \n    <!-- Load the bodypix model to recognize body parts in images -->\n    <script src=\"https://cdn.jsdelivr.net/npm/@tensorflow-models/body-pix@2.0\"></script>\n    \n    <!-- Import the page's JavaScript to do some stuff -->\n    <script src=\"script.js\" defer></script>\n  </body>\n</html>"
        },
        {
          "name": "script.js",
          "type": "blob",
          "size": 8.3359375,
          "content": "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/********************************************************************\n * Real-Time-Person-Removal Created by Jason Mayes 2020.\n *\n * Get latest code on my Github:\n * https://github.com/jasonmayes/Real-Time-Person-Removal\n *\n * Got questions? Reach out to me on social:\n * Twitter: @jason_mayes\n * LinkedIn: https://www.linkedin.com/in/creativetech\n ********************************************************************/\n\nconst video = document.getElementById('webcam');\nconst liveView = document.getElementById('liveView');\nconst demosSection = document.getElementById('demos');\nconst DEBUG = false;\n\n\n// An object to configure parameters to set for the bodypix model.\n// See github docs for explanations.\nconst bodyPixProperties = {\n  architecture: 'MobileNetV1',\n  outputStride: 16,\n  multiplier: 0.75,\n  quantBytes: 4\n};\n\n// An object to configure parameters for detection. I have raised\n// the segmentation threshold to 90% confidence to reduce the\n// number of false positives.\nconst segmentationProperties = {\n  flipHorizontal: false,\n  internalResolution: 'high',\n  segmentationThreshold: 0.9,\n  scoreThreshold: 0.2\n};\n\n\n// Render returned segmentation data to a given canvas context.\nfunction processSegmentation(canvas, segmentation) {\n  var ctx = canvas.getContext('2d');\n  console.log(segmentation)\n  // Get data from our overlay canvas which is attempting to estimate background.\n  var imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n  var data = imageData.data;\n  \n  // Get data from the live webcam view which has all data.\n  var liveData = videoRenderCanvasCtx.getImageData(0, 0, canvas.width, canvas.height);\n  var dataL = liveData.data;\n   \n  var minX = 100000;\n  var minY = 100000;\n  var maxX = 0;\n  var maxY = 0;\n  \n  var foundBody = false;\n  \n  // Go through pixels and figure out bounding box of body pixels.\n  for (let x = 0; x < canvas.width; x++) {\n    for (let y = 0; y < canvas.height; y++) {\n      let n = y * canvas.width + x;\n      // Human pixel found. Update bounds.\n      if (segmentation.data[n] !== 0) {\n        if(x < minX) {\n          minX = x;\n        }\n        \n        if(y < minY) {\n          minY = y;\n        }\n        \n        if(x > maxX) {\n          maxX = x;\n        }\n        \n        if(y > maxY) {\n          maxY = y;\n        }\n        foundBody = true;\n      }\n    } \n  }\n  \n  // Calculate dimensions of bounding box.\n  var width = maxX - minX;\n  var height = maxY - minY;\n  \n  // Define scale factor to use to allow for false negatives around this region.\n  var scale = 1.3;\n\n  //  Define scaled dimensions.\n  var newWidth = width * scale;\n  var newHeight = height * scale;\n\n  // Caculate the offset to place new bounding box so scaled from center of current bounding box.\n  var offsetX = (newWidth - width) / 2;\n  var offsetY = (newHeight - height) / 2;\n\n  var newXMin = minX - offsetX;\n  var newYMin = minY - offsetY;\n  \n  \n  // Now loop through update backgound understanding with new data\n  // if not inside a bounding box.\n  for (let x = 0; x < canvas.width; x++) {\n    for (let y = 0; y < canvas.height; y++) {\n      // If outside bounding box and we found a body, update background.\n      if (foundBody && (x < newXMin || x > newXMin + newWidth) || ( y < newYMin || y > newYMin + newHeight)) {\n        // Convert xy co-ords to array offset.\n        let n = y * canvas.width + x;\n\n        data[n * 4] = dataL[n * 4];\n        data[n * 4 + 1] = dataL[n * 4 + 1];\n        data[n * 4 + 2] = dataL[n * 4 + 2];\n        data[n * 4 + 3] = 255;            \n\n      } else if (!foundBody) {\n        // No body found at all, update all pixels.\n        let n = y * canvas.width + x;\n        data[n * 4] = dataL[n * 4];\n        data[n * 4 + 1] = dataL[n * 4 + 1];\n        data[n * 4 + 2] = dataL[n * 4 + 2];\n        data[n * 4 + 3] = 255;    \n      }\n    }\n  }\n\n  ctx.putImageData(imageData, 0, 0);\n  \n  if (DEBUG) {\n    ctx.strokeStyle = \"#00FF00\"\n    ctx.beginPath();\n    ctx.rect(newXMin, newYMin, newWidth, newHeight);\n    ctx.stroke();\n  }\n}\n\n\n\n// Let's load the model with our parameters defined above.\n// Before we can use bodypix class we must wait for it to finish\n// loading. Machine Learning models can be large and take a moment to\n// get everything needed to run.\nvar modelHasLoaded = false;\nvar model = undefined;\n\nmodel = bodyPix.load(bodyPixProperties).then(function (loadedModel) {\n  model = loadedModel;\n  modelHasLoaded = true;\n  // Show demo section now model is ready to use.\n  demosSection.classList.remove('invisible');\n});\n\n\n/********************************************************************\n// Continuously grab image from webcam stream and classify it.\n********************************************************************/\n\nvar previousSegmentationComplete = true;\n\n// Check if webcam access is supported.\nfunction hasGetUserMedia() {\n  return !!(navigator.mediaDevices &&\n    navigator.mediaDevices.getUserMedia);\n}\n\n\n// This function will repeatidly call itself when the browser is ready to process\n// the next frame from webcam.\nfunction predictWebcam() {\n  if (previousSegmentationComplete) {\n    // Copy the video frame from webcam to a tempory canvas in memory only (not in the DOM).\n    videoRenderCanvasCtx.drawImage(video, 0, 0);\n    previousSegmentationComplete = false;\n    // Now classify the canvas image we have available.\n    model.segmentPerson(videoRenderCanvas, segmentationProperties).then(function(segmentation) {\n      processSegmentation(webcamCanvas, segmentation);\n      previousSegmentationComplete = true;\n    });\n  }\n\n  // Call this function again to keep predicting when the browser is ready.\n  window.requestAnimationFrame(predictWebcam);\n}\n\n\n// Enable the live webcam view and start classification.\nfunction enableCam(event) {\n  if (!modelHasLoaded) {\n    return;\n  }\n  \n  // Hide the button.\n  event.target.classList.add('removed');  \n  \n  // getUsermedia parameters.\n  const constraints = {\n    video: true\n  };\n\n  // Activate the webcam stream.\n  navigator.mediaDevices.getUserMedia(constraints).then(function(stream) {\n    video.addEventListener('loadedmetadata', function() {\n      // Update widths and heights once video is successfully played otherwise\n      // it will have width and height of zero initially causing classification\n      // to fail.\n      webcamCanvas.width = video.videoWidth;\n      webcamCanvas.height = video.videoHeight;\n      videoRenderCanvas.width = video.videoWidth;\n      videoRenderCanvas.height = video.videoHeight;\n      bodyPixCanvas.width = video.videoWidth;\n      bodyPixCanvas.height = video.videoHeight;\n      let webcamCanvasCtx = webcamCanvas.getContext('2d');\n      webcamCanvasCtx.drawImage(video, 0, 0);\n    });\n    \n    video.srcObject = stream;\n    \n    video.addEventListener('loadeddata', predictWebcam);\n  });\n}\n\n\n// We will create a tempory canvas to render to store frames from \n// the web cam stream for classification.\nvar videoRenderCanvas = document.createElement('canvas');\nvar videoRenderCanvasCtx = videoRenderCanvas.getContext('2d');\n\n// Lets create a canvas to render our findings to the DOM.\nvar webcamCanvas = document.createElement('canvas');\nwebcamCanvas.setAttribute('class', 'overlay');\nliveView.appendChild(webcamCanvas);\n\n// Create a canvas to render ML findings from to manipulate.\nvar bodyPixCanvas = document.createElement('canvas');\nbodyPixCanvas.setAttribute('class', 'overlay');\nvar bodyPixCanvasCtx = bodyPixCanvas.getContext('2d');\nbodyPixCanvasCtx.fillStyle = '#FF0000';\n\nliveView.appendChild(bodyPixCanvas);\n\n// If webcam supported, add event listener to button for when user\n// wants to activate it.\nif (hasGetUserMedia()) {\n  const enableWebcamButton = document.getElementById('webcamButton');\n  enableWebcamButton.addEventListener('click', enableCam);\n} else {\n  console.warn('getUserMedia() is not supported by your browser');\n}\n"
        },
        {
          "name": "script_original.js",
          "type": "blob",
          "size": 8.3212890625,
          "content": "\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/********************************************************************\n * Real-Time-Person-Removal Created by Jason Mayes 2020.\n *\n * Get latest code on my Github:\n * https://github.com/jasonmayes/Real-Time-Person-Removal\n *\n * Got questions? Reach out to me on social:\n * Twitter: @jason_mayes\n * LinkedIn: https://www.linkedin.com/in/creativetech\n ********************************************************************/\n\nconst video = document.getElementById('webcam');\nconst liveView = document.getElementById('liveView');\nconst demosSection = document.getElementById('demos');\nconst DEBUG = false;\n\n\n// An object to configure parameters to set for the bodypix model.\n// See github docs for explanations.\nconst bodyPixProperties = {\n  architecture: 'MobileNetV1',\n  outputStride: 16,\n  multiplier: 0.75,\n  quantBytes: 4\n};\n\n// An object to configure parameters for detection. I have raised\n// the segmentation threshold to 90% confidence to reduce the\n// number of false positives.\nconst segmentationProperties = {\n  flipHorizontal: false,\n  internalResolution: 'high',\n  segmentationThreshold: 0.9\n};\n\n\n// Must be even. The size of square we wish to search for body parts.\n// This is the smallest area that will render/not render depending on\n// if a body part is found in that square.\nconst SEARCH_RADIUS = 300;\nconst SEARCH_OFFSET = SEARCH_RADIUS / 2;\n\n// RESOLUTION_MIN should be smaller than SEARCH RADIUS. About 10x smaller seems to \n// work well. Effects overlap in search space to clean up body overspill for things\n// that were not classified as body but infact were.\nconst RESOLUTION_MIN = 20;\n\n// Render returned segmentation data to a given canvas context.\nfunction processSegmentation(canvas, segmentation) {\n  var ctx = canvas.getContext('2d');\n  \n  // Get data from our overlay canvas which is attempting to estimate background.\n  var imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n  var data = imageData.data;\n  \n  // Get data from the live webcam view which has all data.\n  var liveData = videoRenderCanvasCtx.getImageData(0, 0, canvas.width, canvas.height);\n  var dataL = liveData.data;\n  \n  // Now loop through and see if pixels contain human parts. If not, update \n  // backgound understanding with new data.\n  for (let x = RESOLUTION_MIN; x < canvas.width; x += RESOLUTION_MIN) {\n    for (let y = RESOLUTION_MIN; y < canvas.height; y += RESOLUTION_MIN) {\n      // Convert xy co-ords to array offset.\n      let n = y * canvas.width + x;\n      \n      let foundBodyPartNearby = false;\n      \n      // Let's check around a given pixel if any other pixels were body like.\n      let yMin = y - SEARCH_OFFSET;\n      yMin = yMin < 0 ? 0: yMin;\n      \n      let yMax = y + SEARCH_OFFSET;\n      yMax = yMax > canvas.height ? canvas.height : yMax;\n      \n      let xMin = x - SEARCH_OFFSET;\n      xMin = xMin < 0 ? 0: xMin;\n      \n      let xMax = x + SEARCH_OFFSET;\n      xMax = xMax > canvas.width ? canvas.width : xMax;\n      \n      for (let i = xMin; i < xMax; i++) {\n        for (let j = yMin; j < yMax; j++) {\n          \n          let offset = j * canvas.width + i;\n          // If any of the pixels in the square we are analysing has a body\n          // part, mark as contaminated.\n          if (segmentation.data[offset] !== 0) {\n            foundBodyPartNearby = true;\n            break;\n          } \n        }\n      }\n      \n      // Update patch if patch was clean.     \n      if (!foundBodyPartNearby) {\n        for (let i = xMin; i < xMax; i++) {\n          for (let j = yMin; j < yMax; j++) {\n            // Convert xy co-ords to array offset.\n            let offset = j * canvas.width + i;\n\n            data[offset * 4] = dataL[offset * 4];    \n            data[offset * 4 + 1] = dataL[offset * 4 + 1];\n            data[offset * 4 + 2] = dataL[offset * 4 + 2];\n            data[offset * 4 + 3] = 255;            \n          }\n        }\n      } else {\n        if (DEBUG) {\n          for (let i = xMin; i < xMax; i++) {\n            for (let j = yMin; j < yMax; j++) {\n              // Convert xy co-ords to array offset.\n              let offset = j * canvas.width + i;\n\n              data[offset * 4] = 255;    \n              data[offset * 4 + 1] = 0;\n              data[offset * 4 + 2] = 0;\n              data[offset * 4 + 3] = 255;            \n            }\n          } \n        }\n      }\n\n    }\n  }\n  ctx.putImageData(imageData, 0, 0);\n}\n\n\n\n// Let's load the model with our parameters defined above.\n// Before we can use bodypix class we must wait for it to finish\n// loading. Machine Learning models can be large and take a moment to\n// get everything needed to run.\nvar modelHasLoaded = false;\nvar model = undefined;\n\nmodel = bodyPix.load(bodyPixProperties).then(function (loadedModel) {\n  model = loadedModel;\n  modelHasLoaded = true;\n  // Show demo section now model is ready to use.\n  demosSection.classList.remove('invisible');\n});\n\n\n/********************************************************************\n// Continuously grab image from webcam stream and classify it.\n********************************************************************/\n\nvar previousSegmentationComplete = true;\n\n// Check if webcam access is supported.\nfunction hasGetUserMedia() {\n  return !!(navigator.mediaDevices &&\n    navigator.mediaDevices.getUserMedia);\n}\n\n\n// This function will repeatidly call itself when the browser is ready to process\n// the next frame from webcam.\nfunction predictWebcam() {\n  if (previousSegmentationComplete) {\n    // Copy the video frame from webcam to a tempory canvas in memory only (not in the DOM).\n    videoRenderCanvasCtx.drawImage(video, 0, 0);\n    previousSegmentationComplete = false;\n    // Now classify the canvas image we have available.\n    model.segmentPerson(videoRenderCanvas, segmentationProperties).then(function(segmentation) {\n      processSegmentation(webcamCanvas, segmentation);\n      previousSegmentationComplete = true;\n    });\n  }\n\n  // Call this function again to keep predicting when the browser is ready.\n  window.requestAnimationFrame(predictWebcam);\n}\n\n\n// Enable the live webcam view and start classification.\nfunction enableCam(event) {\n  if (!modelHasLoaded) {\n    return;\n  }\n  \n  // Hide the button.\n  event.target.classList.add('removed');  \n  \n  // getUsermedia parameters.\n  const constraints = {\n    video: true\n  };\n\n  // Activate the webcam stream.\n  navigator.mediaDevices.getUserMedia(constraints).then(function(stream) {\n    video.addEventListener('loadedmetadata', function() {\n      // Update widths and heights once video is successfully played otherwise\n      // it will have width and height of zero initially causing classification\n      // to fail.\n      webcamCanvas.width = video.videoWidth;\n      webcamCanvas.height = video.videoHeight;\n      videoRenderCanvas.width = video.videoWidth;\n      videoRenderCanvas.height = video.videoHeight;\n      let webcamCanvasCtx = webcamCanvas.getContext('2d');\n      webcamCanvasCtx.drawImage(video, 0, 0);\n    });\n    \n    video.srcObject = stream;\n    \n    video.addEventListener('loadeddata', predictWebcam);\n  });\n}\n\n\n// We will create a tempory canvas to render to store frames from \n// the web cam stream for classification.\nvar videoRenderCanvas = document.createElement('canvas');\nvar videoRenderCanvasCtx = videoRenderCanvas.getContext('2d');\n\n// Lets create a canvas to render our findings to the DOM.\nvar webcamCanvas = document.createElement('canvas');\nwebcamCanvas.setAttribute('class', 'overlay');\nliveView.appendChild(webcamCanvas);\n\n// If webcam supported, add event listener to button for when user\n// wants to activate it.\nif (hasGetUserMedia()) {\n  const enableWebcamButton = document.getElementById('webcamButton');\n  enableWebcamButton.addEventListener('click', enableCam);\n} else {\n  console.warn('getUserMedia() is not supported by your browser');\n}\n"
        },
        {
          "name": "style.css",
          "type": "blob",
          "size": 2.232421875,
          "content": "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n/******************************************************\n * Stylesheet by Jason Mayes 2020.\n *\n * Get latest code on my Github:\n * https://github.com/jasonmayes/Real-Time-Person-Removal\n * Got questions? Reach out to me on social:\n * Twitter: @jason_mayes\n * LinkedIn: https://www.linkedin.com/in/creativetech\n *****************************************************/\n\nbody {\n  font-family: helvetica, arial, sans-serif;\n  margin: 2em;\n  color: #3D3D3D;\n}\n\nh1 {\n  font-style: italic;\n  color: #FF6F00;\n}\n\nh2 {\n  clear: both;\n}\n\nem {\n  font-weight: bold;\n}\n\nvideo {\n  clear: both;\n  display: block;\n}\n\nsection {\n  opacity: 1;\n  transition: opacity 500ms ease-in-out;\n}\n\nheader, footer {\n  clear: both;\n}\n\nbutton {\n  z-index: 1000;\n  position: relative;\n}\n\n.removed {\n  display: none;\n}\n\n.invisible {\n  opacity: 0.2;\n}\n\n.note {\n  font-style: italic;\n  font-size: 130%;\n}\n\n.webcam {\n  position: relative;\n}\n\n.webcam, .classifyOnClick {\n  position: relative;\n  float: left;\n  width: 48%;\n  margin: 2% 1%;\n  cursor: pointer;\n}\n\n.webcam p, .classifyOnClick p {\n  position: absolute;\n  padding: 5px;\n  background-color: rgba(255, 111, 0, 0.85);\n  color: #FFF;\n  border: 1px dashed rgba(255, 255, 255, 0.7);\n  z-index: 2;\n  font-size: 12px;\n}\n\n.highlighter {\n  background: rgba(0, 255, 0, 0.25);\n  border: 1px dashed #fff;\n  z-index: 1;\n  position: absolute;\n}\n\n.classifyOnClick {\n  z-index: 0;\n  position: relative;\n}\n\n.classifyOnClick canvas, .webcam canvas.overlay {\n  opacity: 1;\n  \n  top: 0;\n  left: 0;\n  z-index: 2;\n}\n\n#liveView {\n  transform-origin: top left;\n  transform: scale(1);\n}\n"
        }
      ]
    }
  ]
}