{
  "metadata": {
    "timestamp": 1736562570414,
    "page": 41,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "node-schedule/node-schedule",
      "stars": 9152,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".airtap.yml",
          "type": "blob",
          "size": 0.095703125,
          "content": "providers:\n  - airtap-playwright\n\nbrowsers:\n  - name: chromium\n    supports:\n      headless: true\n"
        },
        {
          "name": ".eslintrc",
          "type": "blob",
          "size": 0.478515625,
          "content": "{\n  \"extends\": [\n    \"eslint:recommended\",\n  ],\n  \"env\": {\n    \"node\": true,\n    \"es6\": true\n  },\n  \"rules\": {\n    \"eqeqeq\": [\"error\", \"smart\"],\n    \"indent\": [\"error\", 2, { \"SwitchCase\": 1 }],\n    \"no-constant-condition\": \"off\",\n    \"no-redeclare\": \"warn\",\n    \"no-underscore-dangle\": \"off\",\n    \"no-use-before-define\": [\"warn\",\"nofunc\"],\n    \"quotes\": [\"error\", \"single\"],\n    \"space-before-blocks\": \"error\",\n    \"strict\": \"error\",\n    \"no-empty\": \"off\",\n    \"require-yield\": \"off\"\n  }\n}\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1064453125,
          "content": "coverage\nnode_modules\nnode-schedule.tmproj\n.DS_Store\nnpm-debug.log\n\n/.idea/\n/package-lock.json\n/.nyc_output/\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 0.98046875,
          "content": "# Master (Unreleased)\n\n# 2.1.1 - 11 January, 2023\n\n### Bug fixes:\n\n- Bump cron-parser from 3.5.0 to 4.2.0 - security fix #642\n\n# 2.1.0 - 28 November, 2021\n\n### New features:\n\n- Implement support for graceful shutdown #583\n- Emit a success event after a successful job invocation. #643\n\n# 2.0.0 - 01 February, 2021\n\n### Breaking changes:\n\n- Drop support for Node < 6\n- Remove support for job objects. See `UPGRADING.md` for more details. #557\n\n### New features:\n\n- Introduce compatibility with browsers and Electron #553\n\n### Bug fixes:\n\n- Avoid leaking memory on one-off jobs #581\n- Address anonymous job id collision problem to ensure that node-schedule could run with the unlimited uptime #582\n\n### Internal changes:\n\n- Bump cron-parser from 2.18.0 to 3.1.0 #562\n- Bump sinon from 1.17.7 to 9.2.4 #566  \n- Switch to nyc from istanbul #574\n- Convert tests from nodeunit to Tape #575\n- Replace var with let/const #577\n- Execute airtap tests on a headless Chromium #578\n- Make structure more modular #579\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.2626953125,
          "content": "## Rules\n1. **No `--force` pushes** or modifying the git history in any way\n2. Follow existing code style\n3. Pull requests with tests are much more likely to be accepted\n4. Follow the guidelines below\n\n## Bugfix or Feature?\n\nThis project uses the [gitflow workflow](https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow). Simply put, you need to decide if your contribution will be a bug fix that could be released as a patch, or a feature that will end up being a minor or major release.\n\n### Found a bug that can be fixed without affecting the API?\n\n1. **Fork** this repo\n2. Create a new branch from `master` to work in\n3. **Add tests** if needed\n4. Make sure your code **lints** by running `npm run lint`\n5. Make sure your code **passes tests** by running `npm test`\n6. Submit a **pull request** against the `master` branch\n\n### New feature or anything that would result in a change to the API?\n\n1. **Fork** this repo\n2. Create a new branch from `develop` to work in\n3. **Add tests** to as needed\n4. Make sure your code **lints** by running `npm run lint`\n5. Make sure your code **passes tests** by running `npm test`\n6. Submit a **pull request** against the `develop` branch\n\n## Releases\n\nDeclaring formal releases remains the prerogative of the project maintainer.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0341796875,
          "content": "Copyright (C) 2015 Matt Patenaude.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.0087890625,
          "content": "# Node Schedule\n\n[![NPM version](http://img.shields.io/npm/v/node-schedule.svg)](https://www.npmjs.com/package/node-schedule)\n[![Downloads](https://img.shields.io/npm/dm/node-schedule.svg)](https://www.npmjs.com/package/node-schedule)\n[![Build Status](https://github.com/node-schedule/node-schedule/workflows/ci/badge.svg)](https://github.com/node-schedule/node-schedule/actions)\n[![Coverage Status](https://coveralls.io/repos/node-schedule/node-schedule/badge.svg?branch=master)](https://coveralls.io/r/node-schedule/node-schedule?branch=master)\n[![Join the chat at https://gitter.im/node-schedule/node-schedule](https://img.shields.io/badge/gitter-chat-green.svg)](https://gitter.im/node-schedule/node-schedule?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n[![NPM](https://nodei.co/npm/node-schedule.png?downloads=true)](https://nodei.co/npm/node-schedule/)\n\nNode Schedule is a flexible cron-like and not-cron-like job scheduler for Node.js.\nIt allows you to schedule jobs (arbitrary functions) for execution at\nspecific dates, with optional recurrence rules. It only uses a single timer\nat any given time (rather than reevaluating upcoming jobs every second/minute).\n\nNode 6+ is supported.\n\n## Overview\n\nNode Schedule is for time-based scheduling, not interval-based scheduling.\n\nWhile you can easily bend it to your will, if you only want to do something like\n\"run this function every 5 minutes\", [toad-scheduler](https://github.com/kibertoad/toad-scheduler) would be a better choice. But if you want to, say, \"run this function at the :20\nand :50 of every hour on the third Tuesday of every month,\" you'll find that\nNode Schedule suits your needs better. Additionally, Node Schedule has Windows\nsupport, unlike true `cron`, since the node runtime is now fully supported.\n\nNote that Node Schedule is designed for in-process scheduling, i.e. scheduled jobs\nwill only fire as long as your script is running, and the schedule will disappear\nwhen execution completes. If you need to schedule jobs that will persist even when\nyour script *isn't* running, consider using actual [cron].\n\nIn case you need durable jobs that persist across restarts and lock system compatible with multi-node deployments,\ntry [agenda](https://github.com/agenda/agenda) or [bree](https://github.com/breejs/bree).\n\n## Usage\n\n### Installation\n\nYou can install using [npm](https://www.npmjs.com/package/node-schedule).\n\n```\nnpm install node-schedule\n```\n\n\n### Jobs and Scheduling\n\nEvery scheduled job in Node Schedule is represented by a `Job` object. You can\ncreate jobs manually, then execute the `schedule()` method to apply a schedule,\nor use the convenience function `scheduleJob()` as demonstrated below.\n\n`Job` objects are `EventEmitter`s, and emit the following events:\n* A `run` event after each execution.\n* A `scheduled` event each time they're scheduled to run.\n* A `canceled` event when an invocation is canceled before it's executed.  \n  Note that `canceled` is the single-L American spelling.\n* An `error` event when a job invocation triggered by a schedule throws or returns\n  a rejected `Promise`.\n* A `success` event when a job invocation triggered by a schedule returns successfully or\n  returns a resolved `Promise`. In any case, the `success` event receives the value returned\n  by the callback or in case of a promise, the resolved value.\n\n(Both the `scheduled` and `canceled` events receive a JavaScript date object as\na parameter).  \nNote that jobs are scheduled the first time immediately, so if you create a job\nusing the `scheduleJob()` convenience method, you'll miss the first `scheduled`\nevent, but you can query the invocation manually (see below).\n\n### Cron-style Scheduling\n\nThe cron format consists of:\n```\n*    *    *    *    *    *\n┬    ┬    ┬    ┬    ┬    ┬\n│    │    │    │    │    │\n│    │    │    │    │    └ day of week (0 - 7) (0 or 7 is Sun)\n│    │    │    │    └───── month (1 - 12)\n│    │    │    └────────── day of month (1 - 31)\n│    │    └─────────────── hour (0 - 23)\n│    └──────────────────── minute (0 - 59)\n└───────────────────────── second (0 - 59, OPTIONAL)\n```\n\nExamples with the cron format:\n\n```js\nconst schedule = require('node-schedule');\n\nconst job = schedule.scheduleJob('42 * * * *', function(){\n  console.log('The answer to life, the universe, and everything!');\n});\n```\n\nExecute a cron job when the minute is 42 (e.g. 19:42, 20:42, etc.).\n\nAnd:\n\n```js\nconst job = schedule.scheduleJob('0 17 ? * 0,4-6', function(){\n  console.log('Today is recognized by Rebecca Black!');\n});\n```\n\nExecute a cron job every 5 Minutes = */5 * * * *\n\nYou can also get when it is scheduled to run for every invocation of the job:\n```js\nconst job = schedule.scheduleJob('0 1 * * *', function(fireDate){\n  console.log('This job was supposed to run at ' + fireDate + ', but actually ran at ' + new Date());\n});\n```\nThis is useful when you need to check if there is a delay of the job invocation when the system is busy, or save a record of all invocations of a job for audit purpose.\n#### Unsupported Cron Features\n\nCurrently, `W` (nearest weekday) and `L` (last day of month/week) are not supported. \nMost other features supported by popular cron implementations should work just fine, \nincluding `#` (nth weekday of the month).\n\n[cron-parser] is used to parse crontab instructions.\n\n### Date-based Scheduling\n\nSay you very specifically want a function to execute at 5:30am on December 21, 2012.\nRemember - in JavaScript - 0 - January, 11 - December.\n\n```js\nconst schedule = require('node-schedule');\nconst date = new Date(2012, 11, 21, 5, 30, 0);\n\nconst job = schedule.scheduleJob(date, function(){\n  console.log('The world is going to end today.');\n});\n```\n\nTo use current data in the future you can use binding:\n\n```js\nconst schedule = require('node-schedule');\nconst date = new Date(2012, 11, 21, 5, 30, 0);\nconst x = 'Tada!';\nconst job = schedule.scheduleJob(date, function(y){\n  console.log(y);\n}.bind(null,x));\nx = 'Changing Data';\n```\nThis will log 'Tada!' when the scheduled Job runs, rather than 'Changing Data',\nwhich x changes to immediately after scheduling.\n\n### Recurrence Rule Scheduling\n\nYou can build recurrence rules to specify when a job should recur. For instance,\nconsider this rule, which executes the function every hour at 42 minutes after the hour:\n\n```js\nconst schedule = require('node-schedule');\n\nconst rule = new schedule.RecurrenceRule();\nrule.minute = 42;\n\nconst job = schedule.scheduleJob(rule, function(){\n  console.log('The answer to life, the universe, and everything!');\n});\n```\n\nYou can also use arrays to specify a list of acceptable values, and the `Range`\nobject to specify a range of start and end values, with an optional step parameter.\nFor instance, this will print a message on Thursday, Friday, Saturday, and Sunday at 5pm:\n\n```js\nconst rule = new schedule.RecurrenceRule();\nrule.dayOfWeek = [0, new schedule.Range(4, 6)];\nrule.hour = 17;\nrule.minute = 0;\n\nconst job = schedule.scheduleJob(rule, function(){\n  console.log('Today is recognized by Rebecca Black!');\n});\n```\n\nTimezones are also supported. Here is an example of executing at the start of every day in the UTC timezone.\n\n```js\nconst rule = new schedule.RecurrenceRule();\nrule.hour = 0;\nrule.minute = 0;\nrule.tz = 'Etc/UTC';\n\nconst job = schedule.scheduleJob(rule, function(){\n  console.log('A new day has begun in the UTC timezone!');\n});\n```\n\nA list of acceptable tz (timezone) values can be found at <https://en.wikipedia.org/wiki/List_of_tz_database_time_zones>\n\n#### RecurrenceRule properties\n\n- `second (0-59)`\n- `minute (0-59)`\n- `hour  (0-23)`\n- `date  (1-31)`\n- `month (0-11)`\n- `year`\n- `dayOfWeek (0-6) Starting with Sunday`\n- `tz`\n\n\n> **Note**: It's worth noting that the default value of a component of a recurrence rule is\n> `null` (except for second, which is 0 for familiarity with cron). *If we did not\n> explicitly set `minute` to 0 above, the message would have instead been logged at\n> 5:00pm, 5:01pm, 5:02pm, ..., 5:59pm.* Probably not what you want.\n\n#### Object Literal Syntax\n\nTo make things a little easier, an object literal syntax is also supported, like\nin this example which will log a message every Sunday at 2:30pm:\n\n```js\nconst job = schedule.scheduleJob({hour: 14, minute: 30, dayOfWeek: 0}, function(){\n  console.log('Time for tea!');\n});\n```\n\n#### Set StartTime and EndTime\n\nIt will run after 5 seconds and stop after 10 seconds in this example.\nThe ruledat supports the above.\n\n```js\nconst startTime = new Date(Date.now() + 5000);\nconst endTime = new Date(startTime.getTime() + 5000);\nconst job = schedule.scheduleJob({ start: startTime, end: endTime, rule: '*/1 * * * * *' }, function(){\n  console.log('Time for tea!');\n});\n```\n\n### Graceful Shutdown.\nYou can shutdown jobs gracefully.  \n`gracefulShutdown()` will cancel all jobs and return Promise.  \nIt will wait until all jobs are terminated.  \n```js\nschedule.gracefulShutdown();\n```\n\nYou can also gracefully shutdown jobs when a system interrupt occurs.\n```\nprocess.on('SIGINT', function () { \n  schedule.gracefulShutdown()\n  .then(() => process.exit(0))\n}\n```\n\n### Handle Jobs and Job Invocations\n\nThere are some function to get information for a Job and to handle the Job and\nInvocations.\n\n\n#### job.cancel(reschedule)\nYou can invalidate any job with the `cancel()` method:\n\n```js\nj.cancel();\n```\nAll planned invocations will be canceled. When you set the parameter ***reschedule***\nto true then the Job is newly scheduled afterwards.\n\n#### job.cancelNext(reschedule)\nThis method invalidates the next planned invocation or the job.\nWhen you set the parameter ***reschedule*** to true then the Job is newly scheduled\nafterwards.\n\n#### job.reschedule(spec)\nThis method cancels all pending invocation and registers the Job completely new again using the given specification.\nReturn true/false on success/failure.\n\n#### job.nextInvocation()\nThis method returns a Date object for the planned next Invocation for this Job. If no invocation is planned the method returns null.\n\n## Contributing\n\nThis module was originally developed by [Matt Patenaude] who eventually passed over maintainer's mantle over to [Tejas Manohar].   \n\nCurrently it is being maintained by [Igor Savin] and [our amazing community].\n\nWe'd love to get your contributions. Individuals making significant and valuable\ncontributions are given commit-access to the project to contribute as they see fit.\n\nBefore jumping in, check out our [Contributing] page guide!\n\n## Copyright and license\n\nCopyright 2015 Matt Patenaude.\n\nLicensed under the **[MIT License](https://github.com/node-schedule/node-schedule/blob/master/LICENSE)**.\n\n\n[cron]: http://unixhelp.ed.ac.uk/CGI/man-cgi?crontab+5\n[Contributing]: https://github.com/node-schedule/node-schedule/blob/master/CONTRIBUTING.md\n[Matt Patenaude]: https://github.com/mattpat\n[Tejas Manohar]: http://tejas.io\n[Igor Savin]: https://twitter.com/kibertoad\n[our amazing community]: https://github.com/node-schedule/node-schedule/graphs/contributors\n[cron-parser]: https://github.com/harrisiirak/cron-parser\n"
        },
        {
          "name": "UPGRADING.md",
          "type": "blob",
          "size": 0.8369140625,
          "content": "## Upgrading to new node-schedule versions\n\n### Upgrading to version 2.0.0+\n\n* Node.js versions older than 6 are no longer supported, please update your environment before upgrading.\n* In order to prevent memory leaks, one-off jobs (targeted to be executed at an exact date) cannot be rescheduled by name, as reference to them is no longer stored indefinitely. If you want to keep rescheduling them, make sure to store reference to the initial job.\n* The `scheduleJob()` method no longer supports passing an object with the job method. If you were using an object, pass the job method directly.  \n\n  E.g. code that previously looked like this:\n  ```javascript\n  const obj = {\n   execute() {}\n  };\n  Scheduler.scheduleJob(obj);\n  ```\n  should be changed to something like this:\n  ```javascript\n  function execute() {}\n  Scheduler.scheduleJob(execute);\n  ```\n"
        },
        {
          "name": "index.js",
          "type": "blob",
          "size": 0.3759765625,
          "content": "'use strict';\n\nconst { cancelJob, rescheduleJob, scheduledJobs, scheduleJob, gracefulShutdown} = require('./lib/schedule')\nconst { Invocation, RecurrenceRule, Range} = require('./lib/Invocation')\nconst { Job } = require('./lib/Job')\n\nmodule.exports = {\n  Job,\n  Invocation,\n  Range,\n  RecurrenceRule,\n  cancelJob,\n  rescheduleJob,\n  scheduledJobs,\n  scheduleJob,\n  gracefulShutdown,\n}\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.4189453125,
          "content": "{\n  \"name\": \"node-schedule\",\n  \"version\": \"2.1.1\",\n  \"description\": \"A cron-like and not-cron-like job scheduler for Node.\",\n  \"keywords\": [\n    \"schedule\",\n    \"task\",\n    \"job\",\n    \"cron\",\n    \"recurrent\",\n    \"in-memory\"\n  ],\n  \"license\": \"MIT\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"tape test/*.js\",\n    \"test:browser\": \"airtap test/cancel-long-running-jobs.js test/convenience-method-test.js test/date-convenience-methods-test.js test/range-test.js test/recurrence-rule-test.js test/schedule-cron-jobs.js test/start-end-test.js\",\n    \"coveralls\": \"nyc report --reporter=lcov\",\n    \"test:coverage\": \"nyc tape test/*.js\",\n    \"lint\": \"eslint lib test\",\n    \"lint:fix\": \"eslint --fix lib test\"\n  },\n  \"author\": {\n    \"name\": \"Matt Patenaude\",\n    \"email\": \"matt@mattpatenaude.com\",\n    \"url\": \"http://mattpatenaude.com\"\n  },\n  \"contributors\": [\n    {\n      \"name\": \"Igor Savin\",\n      \"email\": \"kibertoad@gmail.com\"\n    }\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/node-schedule/node-schedule.git\"\n  },\n  \"dependencies\": {\n    \"cron-parser\": \"^4.2.0\",\n    \"long-timeout\": \"0.1.1\",\n    \"sorted-array-functions\": \"^1.3.0\"\n  },\n  \"devDependencies\": {\n    \"airtap\": \"^4.0.4\",\n    \"eslint\": \"^8.3.0\",\n    \"nyc\": \"^15.1.0\",\n    \"sinon\": \"^9.2.4\",\n    \"tape\": \"^5.3.2\"\n  },\n  \"engines\": {\n    \"node\": \">=6\"\n  },\n  \"files\": [\n    \"CHANGELOG.md\",\n    \"README.md\",\n    \"UPGRADING.md\",\n    \"LICENSE\",\n    \"lib/*\"\n  ]\n}\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}