{
  "metadata": {
    "timestamp": 1736562907622,
    "page": 497,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "dtao/lazy.js",
      "stars": 6000,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0400390625,
          "content": "Gemfile.lock\nnpm-debug.log\nnode_modules/\n"
        },
        {
          "name": ".npmignore",
          "type": "blob",
          "size": 0.0673828125,
          "content": "docs/\nlib/\nsite/\nspec/\nGemfile*\nRakefile*\n*.mustache\nlazy.browser.js\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.1044921875,
          "content": "sudo: false\n\nlanguage: node_js\n\nnode_js:\n  - \"0.10\"\n  - \"0.12\"\n  - 4\n  - 6\n  - 7\n\ninstall:\n  - npm install\n"
        },
        {
          "name": "CHANGES.md",
          "type": "blob",
          "size": 7.0517578125,
          "content": "Lazy.js Changelog\n=================\n\nThis file includes at least a partial list of the major changes in each version.\n\nv0.5.1\n------\n\n- added public `equals()` method (#139)\n- added public `Lazy.curry` and `Lazy.curryRight` methods (#24)\n- added public `Lazy.createCallback` and `Lazy.createComparator` methods (#140)\n- added shallow option to `flatten()` (#125)\n- added equalityFn paramter to `indexOf`, `lastIndexOf`, and `contains`\n- fixed bug with return value from `consecutive()` not being reusable (#212)\n- fixed bug with `concat()` unexpectedly flattening results (#127)\n\nv0.5.0\n------\n\n- sequences now support ES6 [iterable protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) (#186)\n- added support for ES6 [Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) and [Map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) objects\n- `memoize().get` no longer iterates entire sequence (#191)\n- fixed bug causing failure on `defaults().defaults()` (#183)\n- fixed bug with setting encoding in `Lazy.readFile` (#160)\n\nv0.4.3\n------\n\n- added `push` and `unshift` to `ArrayLikeSequence` (#173)\n- changed behavior of `min` and `max` to return `undefined` for empty sequences (#194)\n- made `zip` and `intersection` communicative (#196 and #197)\n- fixed bug w/ shuffling empty array returning `[undefined]` (#198)\n- added support for non-string delimiters in `join` (#193)\n- fixed bug w/ missing return value in full iteration of `groupBy` (#179)\n- fixed bug w/ ignoring delimiter in `values().join` (#184)\n- fixed behavior of `ObjectLikeSequence.keys` (#164)\n- fixed broken `DomEventSequence.each` (#163)\n- fixed handling of falsey values in `get` (#170)\n- changed behavior of `ObjectLikeSequence.each` (see #165)\n\nv0.4.2\n------\n\n- dropped support for node 0.8\n- Lazy is now exposed as a UMD module\n- added value transform function to `groupBy`/`indexBy` ([#97](https://github.com/dtao/lazy.js/pull/97))\n- fixed biased implementation of `shuffle` (see [#142](https://github.com/dtao/lazy.js/pull/142))\n- fixed bug where `split` couldn't be called on `StringSegments` (see [#123](https://github.com/dtao/lazy.js/pull/123))\n- fixed `merge` to better handle arrays, dates, and other object types (see [#154](https://github.com/dtao/lazy.js/pull/154))\n\nv0.4.0\n------\n\n- now `Lazy.AsyncHandle` implements the Promises/A+ specification! (see [#71](https://github.com/dtao/lazy.js/issues/71))\n- made `Sequence#get` available to all sequences, not just `ArrayLikeSequence`s (see [#106](https://github.com/dtao/lazy.js/issues/106))\n- made `ObjectLikeSequence#filter` return an `ObjectLikeSequence` (see [#75](https://github.com/dtao/lazy.js/issues/75))\n- fixed issue with `Sequence#shuffle` always putting first element last ([#113](https://github.com/dtao/lazy.js/issues/106))\n- fixed issue with `Sequence#join` skipping empty strings ([#115](https://github.com/dtao/lazy.js/issues/115))\n- fixed issue with `Lazy.range` sometimes providing one value too few ([#119](https://github.com/dtao/lazy.js/issues/119))\n\nv0.3.3 (abandoned)\n------------------\n\n- fixed `Sequence#groupBy` to work for async sequences (see [#72](https://github.com/dtao/lazy.js/pull/72))\n- fixed `StreamLikeSequence#split` to split properly across chunks (see [#70](https://github.com/dtao/lazy.js/pull/70))\n- changed `Sequence#filter` so it passes a simple incrementing index with each element (like Underscore/Lo-Dash)\n- added `Lazy.clone` to create a shallow copy of an object or array\n- added `Sequence#sort`, which can accept a 2-arity function for more customized sorting (see [#65](https://github.com/dtao/lazy.js/issues/65))\n- both `Sequence#sort` and `Sequence#sortBy` now accept a `descending` argument\n- added `Sequence#indexBy`\n\nv0.3.2\n------\n\n- added `Sequence.createWrapper` (see http://stackoverflow.com/questions/20959394)\n- added `Sequence#memoize` and `Sequence#none`\n- fixed `Sequence#reject` to accept a string or object (like other methods involving predicates)\n- fixed bug in `Sequence#all`\n- `AsyncSequence#getIterator` now throws an error (see [#63](https://github.com/dtao/lazy.js/issues/63))\n\nv0.3.1\n------\n\n- added `Sequence#apply` (see [#61](https://github.com/dtao/lazy.js/issues/61)) and `Sequence#size` (see [#56](https://github.com/dtao/lazy.js/issues/56))\n- added `ObjectLikeSequence#merge` (see [#55](https://github.com/dtao/lazy.js/issues/55))\n- added `Sequence#toStream` to create an actual `stream.Readable` in Node, to interact w/ stream-based libraries (see [#53](https://github.com/dtao/lazy.js/issues/53))\n\nv0.3.0\n------\n\n- now these methods on `AsyncSequence` return a promise-like `AsyncHandle`, allowing you to do something w/ the result once iteration is complete (using `onComplete`, which is aliased as `then`):\n  - `reduce`\n  - `min`\n  - `max`\n  - `sum`\n  - `find`\n  - `indexOf`\n  - `contains`\n  - `toArray`\n  - `toObject`\n  - `join`/`toString`\n- added `Lazy(object).watch` to monitor changes to a property as a sequence (see [#49](https://github.com/dtao/lazy.js/issues/49))\n- added `Sequence#chunk`, `Sequence#tap`, and `Sequence#ofType`\n- deprecated `Lazy.events` in favor of `NodeSequence#on` (note: I should probably rename `NodeSequence` to `DOMSequence`)\n\nv0.2.1\n------\n\n- reverted change to `Lazy()` helper function, added `Lazy.strict()` to provide the stricter form (see [#44](https://github.com/dtao/lazy.js/issues/44))\n- added `Lazy.parseJSON` method along with demo (see **experimental/** folder)\n- added `onComplete` to handle returned by `AsyncSequence#each`\n\nv0.2.0\n------\n\n- updated `Lazy()` helper function to throw an error on `null` or `undefined`\n- changed behavior of `Sequence.define` -- `init` no longer must accept `parent` as a first parameter (see [#45](https://github.com/dtao/lazy.js/issues/45))\n- added `ArrayLikeSequence.define`, `ObjectLikeSequence.define`, and `StringLikeSequence.define`\n- added `takeWhile`, `dropWhile`, and `consecutive`\n- implemented many string-specific methods for `StringLikeSequence`:\n  - `indexOf`, `lastIndexOf`, and `contains` (all accept a substring)\n  - `startsWith` and `endsWith`\n  - `reverse` (returns a `StringLikeSequence`)\n  - `toUpperCase` and `toLowerCase`\n  - `charCodeAt`\n  - `substring`\n- implemented array-specific methods for `ArrayLikeSequence`:\n  - `pop`\n  - `shift`\n  - `slice`\n- added support for supplying `pluck`-style callbacks (strings) to `map`, `filter`, `sortBy`, `groupBy`, `countBy`, `any`, and `all`\n- now `groupBy` and `countBy` both return an `ObjectLikeSequence`\n- added value selector callbacks to `min`, `max`, and `sum`\n- fixed some cases where `each` did not pass along an index with each element\n- fixed `map().async()`\n- fixed handling of `NaN` in some cases\n- added `Lazy.noop` and `Lazy.identity` convenience methods\n\nv0.1.1\n------\n\n- `flatten` can now flatten inner sequences (not just arrays)\n- added `Sequence#toString`\n- significant perf improvements for `uniq`, `union`, `intersection`, `concat`, `zip`\n- removed `Lazy.async` in favor of `Sequence#async`\n- added Bower and Component support\n- added `Lazy.readFile` and `Lazy.makeHttpRequest` (for Node)\n\nv0.1.0\n------\n\nInitial release.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.2392578125,
          "content": "Running the tests\n-----------------\n\nLazy.js has a bunch of tests. They run in Node as well as the browser. To test against Node:\n\n```\nnpm test\n```\n\nTo test against the browser, the easiest method is to just build the site and open it up.\n\nHow to build the site\n---------------------\n\nThe build process for the site is horrendously complicated right now. I'm going to do something about that some day, but today is not that day. In the meantime, here are at least some instructions for how to do it (this is mainly for myself, so that I don't have to job my memory every time I do this).\n\nFirst:\n\n```\ncd site\n```\n\nInstall requirements (if necessary):\n\n```\nnpm install -g deft\nbundle install\n```\n\nPull in front-end dependencies using deft:\n\n```\ndeft\n```\n\nNow build the site using middleman:\n\n```\nmiddleman build\n```\n\n(At this point I hand-delete the bower package and npm package badges in the resulting site/build/index.html file. Yes, seriously. Don't judge me.)\n\n*Now*, head back to the lazy.js root directory, create symlinks, and generate the API docs:\n\n```\nrake symlinks\nrake generate_docs\n```\n\nFinally, to publish the new site, tar up everything in the build folder, run `git checkout gh-pages`, extract the archive, and push the changes up.\n\nIt's *that* simple.\n"
        },
        {
          "name": "Gemfile",
          "type": "blob",
          "size": 0.0556640625,
          "content": "source \"https://rubygems.org\"\n\ngem \"json\"\ngem \"uglifier\"\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.0458984375,
          "content": "Copyright (c) 2014—2018 Dan Tao\n\nMIT License\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.482421875,
          "content": "Like Underscore, but lazier\n===========================\n\n[![Build Status](https://travis-ci.org/dtao/lazy.js.svg?branch=master)](https://travis-ci.org/dtao/lazy.js)\n[![Bower version](https://badge.fury.io/bo/lazy.js.svg)](http://badge.fury.io/bo/lazy.js)\n[![NPM version](https://badge.fury.io/js/lazy.js.svg)](http://badge.fury.io/js/lazy.js)\n\nLazy.js is a functional utility library for JavaScript, similar to [Underscore](http://underscorejs.org/) and [Lodash](http://lodash.com/), but with a **lazy engine** under the hood that strives to do as little work as possible while being as flexible as possible.\n\nIt has no external dependencies, so you can get started right away with:\n\n```javascript\nnpm install lazy.js\n```\n\n(Note the package is called \"lazy.js\", with a dot.)\n\nOr, if you're using Lazy.js in the browser:\n\n```html\n<script type=\"text/javascript\" src=\"lazy.js\"></script>\n\n<!-- optional: if you want support for DOM event and AJAX-based sequences: -->\n<script type=\"text/javascript\" src=\"lazy.browser.js\"></script>\n```\n\nNow let's look at what you can do with Lazy.js. (For more thorough information, take a look at the [API Docs](http://dtao.github.io/lazy.js/docs/).)\n\nIntroduction\n------------\n\nLet's start with an array of objects representing people.\n\n```javascript\nvar people = getBigArrayOfPeople();\n```\n\nSuppose we're using this array to back some sort of search-as-you-type functionality, where users can search for people by their last names. Naturally we want to put some reasonable constraints on our problem space, so we'll provide up to 5 results at a time. Supposing the user types \"Smith\", we could therefore fetch results using something like this (using Underscore):\n\n```javascript\nvar results = _.chain(people)\n  .pluck('lastName')\n  .filter(function(name) { return name.startsWith('Smith'); })\n  .take(5)\n  .value();\n```\n\nThis query does a lot of stuff:\n\n- `pluck('lastName')`: iterates over the array and creates a new (potentially giant) array\n- `filter(...)`: iterates over the new array, creating yet *another* (potentially giant) array\n- `take(5)`: all that just for 5 elements!\n\nSo if performance and/or efficiency were a concern for you, you would probably *not* do things that way using Underscore. Instead, you'd likely go the procedural route:\n\n```javascript\nvar results = [];\nfor (var i = 0; i < people.length; ++i) {\n  if (people[i].lastName.startsWith('Smith')) {\n    results.push(people[i].lastName);\n    if (results.length === 5) {\n      break;\n    }\n  }\n}\n```\n\nThere&mdash;now we haven't created any extraneous arrays, and we did all of the work in one iteration. Any problems?\n\nWell, yeah. The main problem is that this is one-off code, which isn't reusable or particularly readable. If only we could somehow leverage the expressive power of Underscore but still get the performance of the hand-written procedural solution...\n\n***\n\nThat's where Lazy.js comes in! Here's how we'd write the above query using Lazy.js:\n\n```javascript\nvar result = Lazy(people)\n  .pluck('lastName')\n  .filter(function(name) { return name.startsWith('Smith'); })\n  .take(5);\n```\n\nLooks almost identical, right? That's the idea: Lazy.js aims to be completely familiar to JavaScript devs experienced with Underscore or Lodash. Every method from Underscore should have the same name and (almost) identical behavior in Lazy.js, except that instead of returning a fully-populated array on every call, it creates a *sequence* object with an `each` method.\n\nWhat's important here is that **no iteration takes place until you call `each`**, and **no intermediate arrays are created**. Essentially Lazy.js combines all query operations into a \"sequence\" that behaves quite a bit like the procedural code we wrote a moment ago. (If you ever *do* want an array, simply call `toArray` on the resulting sequence.)\n\nOf course, *unlike* the procedural approach, Lazy.js lets you keep your code clean and functional, and focus on solving whatever problem you're actually trying to solve instead of optimizing array traversals.\n\nFeatures\n--------\n\nSo, Lazy.js is basically Underscore with lazy evaluation. Is that it?\n\nNope!\n\n### Indefinite sequence generation\n\nThe sequence-based paradigm of Lazy.js lets you do some pretty cool things that simply aren't possible with Underscore's array-based approach. One of these is the generation of **indefinite sequences**, which can go on forever, yet still support all of Lazy's built-in mapping and filtering capabilities.\n\nHere's an example. Let's say we want 300 unique random numbers between 1 and 1000.\n\n```javascript\nLazy.generate(Math.random)\n  .map(function(e) { return Math.floor(e * 1000) + 1; })\n  .uniq()\n  .take(300)\n  .each(function(e) { console.log(e); });\n```\n\nHere's a slightly more advanced example: let's use Lazy.js to make a [Fibonacci sequence](http://en.wikipedia.org/wiki/Fibonacci_number).\n\n```javascript\nvar fibonacci = Lazy.generate(function() {\n  var x = 1,\n      y = 1;\n  return function() {\n    var prev = x;\n    x = y;\n    y += prev;\n    return prev;\n  };\n}());\n\n// Output: [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\nfibonacci.take(10).toArray();\n```\n\nOK, what else?\n\n### Asynchronous iteration\n\nYou've probably [seen code snippets before](https://gist.github.com/dtao/2351944) that show how to iterate over an array asynchronously in JavaScript. But have you seen an example with functional goodness like this?\n\n```javascript\nLazy.generate(Lazy.identity)\n  .async(1000) // specifies a 1-second interval between each element\n  .map(function(x) { return String.fromCharCode(x + 65); })\n  .take(26)\n  .each(function(char) { console.log(char); });\n```\n\nAll right... what else?\n\n### Event sequences\n\nWith indefinite sequences, we saw that unlike Underscore and Lodash, Lazy.js doesn't actually need an in-memory collection to iterate over. And asynchronous sequences demonstrate that it also doesn't need to do all its iteration at once.\n\nNow here's a really cool combination of these two features: with a small extension to Lazy.js (lazy.browser.js, a separate file to include in browser-based environments), you can apply all of the power of Lazy.js to **handling DOM events**. In other words, Lazy.js lets you think of DOM events as a *sequence*&mdash;just like any other&mdash;and apply the usual `map`, `filter`, etc. functions on that sequence.\n\nHere's an example. Let's say we want to handle all `mousemove` events on a given DOM element, and show their coordinates in one of two other DOM elements depending on location.\n\n```javascript\n// First we define our \"sequence\" of events.\nvar mouseEvents = Lazy(sourceElement).on(\"mousemove\");\n\n// Map the Event objects to their coordinates, relative to the element.\nvar coordinates = mouseEvents.map(function(e) {\n  var elementRect = sourceElement.getBoundingClientRect();\n  return [\n    Math.floor(e.clientX - elementRect.left),\n    Math.floor(e.clientY - elementRect.top)\n  ];\n});\n\n// For mouse events on one side of the element, display the coordinates in one place.\ncoordinates\n  .filter(function(pos) { return pos[0] < sourceElement.clientWidth / 2; })\n  .each(function(pos) { displayCoordinates(leftElement, pos); });\n\n// For those on the other side, display them in a different place.\ncoordinates\n  .filter(function(pos) { return pos[0] > sourceElement.clientWidth / 2; })\n  .each(function(pos) { displayCoordinates(rightElement, pos); });\n```\n\nAnything else? Of course!\n\n### String processing\n\nNow here's something you may not have even thought of: `String.match` and `String.split`. In JavaScript, each of these methods returns an *array* of substrings. If you think about it, this often means doing more work than necessary; but it's the quickest way (from a developer's standpoint) to get the job done.\n\nFor example, suppose you wanted the first five lines of a block of text. You could always do this:\n\n```javascript\nvar firstFiveLines = text.split(\"\\n\").slice(0, 5);\n```\n\nBut of course, this actually splits *the entire string* into every single line. If the string is very large, this is quite wasteful.\n\nWith Lazy.js, we don't need to split up an entire string just to treat it as a sequence of lines. We can get the same effect by wrapping the string with `Lazy` and calling `split`:\n\n```javascript\nvar firstFiveLines = Lazy(text).split(\"\\n\").take(5);\n```\n\nThis way we can read the first five lines of an arbitrarily large string (without pre-populating a huge array) and map/reduce on it just as with any other sequence.\n\nSimilarly with `String.match`: let's say we wanted to find the first 5 alphanumeric matches in a string. With Lazy.js, it's easy!\n\n```javascript\nvar firstFiveWords = Lazy(text).match(/[a-z0-9]+/i).take(5);\n```\n\nPiece of cake.\n\n### Stream processing\n\nLazy.js can wrap *streams* in Node.js as well.\n\nGiven any [`Readable Stream`](http://nodejs.org/api/stream.html#stream_class_stream_readable), you can wrap it with `Lazy` just as with arrays:\n\n```javascript\nLazy(stream)\n  .take(5) // Read just the first 5 chunks of data read into the buffer.\n  .each(processData);\n```\n\nFor convenience, specialized helper methods for dealing with either file streams or HTTP streams are also offered. (**Note: this API will probably change.**)\n\n```javascript\n// Read the first 5 lines from a file:\nLazy.readFile(\"path/to/file\")\n  .lines()\n  .take(5)\n  .each(doSomething);\n\n// Read lines 5-10 from an HTTP response.\nLazy.makeHttpRequest(\"http://example.com\")\n  .lines()\n  .drop(5)\n  .take(5)\n  .each(doSomething);\n```\n\nIn each case, the elements in the sequence will be \"chunks\" of data most likely comprising multiple lines. The `lines()` method splits each chunk into lines (lazily, of course).\n\n***\n\n**This library is experimental and still a work in progress.**\n"
        },
        {
          "name": "README_zh_CN.md",
          "type": "blob",
          "size": 8.4794921875,
          "content": "[Lazy.js](http://danieltao.com/lazy.js/)是类似[Underscore](http://underscorejs.org/)或[Lo-Dash](http://lodash.com/)的JavaScript工具库，但是它有一个非常独特的特性：**惰性求值**。很多情况下，惰性求值都将带来巨大的性能提升，特别是当处理巨大的数组和连锁使用多个方法的时候。\n\n与Underscore、Lo-Dash的比较：\n\n![](http://i.imgur.com/9vP6sVG.png)\n\n当数组非常大的时候，对于不需要迭代整个数组的方法，例如`indexOf`和`take`，Lazy.js的性能提升更为惊人：\n\n![](http://i.imgur.com/oGPlPug.png)\n\n安装\n----\n\nLazy.js没有外部依赖，所以加载Lazy.js非常方便：\n\n```html\n<script type=\"text/javascript\" src=\"lazy.js\"></script>\n```\n\n如果你希望支持DOM事件序列的惰性求值，那么用这个：\n\n```html\n<script type=\"text/javascript\" src=\"lazy.browser.js\"></script>\n```\n\n如果你使用Node.js：\n\n```sh\nnpm install lazy.js\n```\n\n\n简介\n----\n\n我们创建一个包含1000个整数的数组：\n\n```js\nvar array = Lazy.range(1000).toArray();\n```\n\n注意我们调用了`toArray`。如果没有这个，`Lazy.range`给我们的将不是一个数组而是一个`Lazy.Sequence`对象，你可以通过`each`来迭代这个对象。\n\n现在我们打算取每个数字的平方，增加一下，最后取出前5个偶数。为了保持代码简短，我们使用这些辅助函数：\n\n```js\nfunction square(x) { return x * x; }\nfunction inc(x) { return x + 1; }\nfunction isEven(x) { return x % 2 === 0; }\n```\n\n这是一个奇怪的目标。不管怎么样，我们可以用Underscore的`chain`方法实现它：\n\n```js\nvar result = _.chain(array).map(square).map(inc).filter(isEven).take(5).value();\n```\n\n注意上面这行语句做了多少事情：\n\n- `map(square)`迭代了整个数组，创建了一个新的包含1000个元素的数组\n- `map(inc)`迭代了新的数组，创建了另一个新的包含1000个元素的数组\n- `filter(isEven)`迭代了整个数组，创建了一个包含500个元素的新数组\n- `take(5)`这一切只是为了5个元素！\n\n\n如果你需要考虑性能，你可能不会这么干。相反，你会写出类似这样的过程式代码：\n\n```js\nvar results = [];\nfor (var i = 0; i < array.length; ++i) {\n  var value = (array[i] * array[i]) + 1;\n  if (value % 2 === 0) {\n    results.push(value);\n    if (results.length === 5) {\n      break;\n    }\n  }\n}\n```\n\n现在我们没有创建任何多余的数组，在一次迭代中完成了一切。有什么问题么？\n\n好吧。最大的问题在于这是一次性的代码，我们花了一点时间编写了这段代码，却无法复用。要是我们能够利用Underscore的表达力，同时得到手写的过程式代码的性能，那该多好啊！\n\n这就是Lazy.js该发威的时候了。用 Lazy.js，上面的代码会写成：\n\n```js\nvar result = Lazy(array).map(square).map(inc).filter(isEven).take(5);\n```\n\n看上去和用Underscore的代码几乎一样？正是如此：Lazy.js希望带给JavaScript开发者熟悉的体验。每个Underscore的方法应该和Lazy.js有相同的名字和表现，唯一的不同是Lazy.js返回一个序列对象，以及相应的`each`方法。\n\n重要的是，**直到你调用了`each`才会产生迭代**，而且**不会创建中间数组**。 Lazy.js将所有查询操作组合成一个序列，最终的表现和我们开始写的过程式代码差不多。\n\n当然，与过程式代码不同的是，Lazy.js确保你的代码是干净的，函数式的。这样你就可以专注于构建应用，而不是优化遍历数组的代码。\n\n特性\n----\n\n酷！Lazy.js还能做什么？\n\n### 生成无穷序列\n\n是的，无穷序列，无穷无尽！同样支持所有Lazy内建的map和filter功能。\n\n看个例子吧。假设我们需要在1和1000之间获取300个不同的随机数：\n\n```js\nvar uniqueRandsFrom1To1000 = Lazy.generate(function() { return Math.random(); })\n  .map(function(e) { return Math.floor(e * 1000) + 1; })\n  .uniq()\n  .take(300);\n\n// 输出：亲眼看看吧\nuniqueRandsFrom1To1000.each(function(e) { console.log(e); });\n```\n\n相当不错。换一个高级点的例子吧。让我们用Lazy.js创建一个斐波那契数列。\n\n```js\nvar fibonacci = Lazy.generate(function() {\n  var x = 1,\n      y = 1;\n  return function() {\n    var prev = x;\n    x = y;\n    y += prev;\n    return prev;\n  };\n}());\n\n// 输出: undefined\nvar length = fibonacci.length();\n\n// 输出: [2, 2, 3, 4, 6, 9, 14, 22, 35, 56]\nvar firstTenFibsPlusOne = fibonacci.map(inc).take(10).toArray();\n```\n\n不错，还有什么？\n\n异步迭代\n--------\n\n你以前多半见过如何在JavaScript中异步迭代数组的[代码片段](https://gist.github.com/dtao/2351944)。但是你见过这样的吗？\n\n```js\nvar asyncSequence = Lazy(array)\n  .async(100) // 100毫秒\n  .map(inc)\n  .filter(isEven)\n  .take(20);\n\n//  这个函数会马上返回，然后开始异步迭代\nasyncSequence.each(function(e) {\n  console.log(new Date().getMilliseconds() + \": \" + e);\n});\n```\n\n很好。还有吗？\n\n事件序列\n--------\n\n我们看到，和Underscore和Lo-Dash不同，对于无穷序列，Lazy.js并不需要把一个把所有数据放到内存以便迭代。异步序列也显示了它并不需要一次完成所有迭代。\n\n现在我们要介绍一个Lazy.js的小扩展`lazy.browser.js`（基于浏览器的环境需要包含一个单独的文件），它组合了以上两个特性，现在，处理DOM事件也可以使用Lazy.js的力量了。换句话说，Lazy.js让你把DOM事件看成是一个序列——和其他序列一样——然后可以将那些用于序列的函数`map`和`filter`应用到序列上。\n\n下面是一个例子。比如我们打算处理给定的DOM元素的所有`mousemove`事件，同时显示它们的坐标。\n\n```js\n// 首先我们定义事件序列\nvar mouseEvents = Lazy.events(sourceElement, \"mousemove\");\n\n// 将事件序列和坐标相map\nvar coordinates = mouseEvents.map(function(e) {\n  var elementRect = sourceElement.getBoundingClientRect();\n  return [\n    Math.floor(e.clientX - elementRect.left),\n    Math.floor(e.clientY - elementRect.top)\n  ];\n});\n\n// 对于在元素一边的鼠标事件，在一个地方显示坐标\ncoordinates\n  .filter(function(pos) { return pos[0] < sourceElement.clientWidth / 2; })\n  .each(function(pos) { displayCoordinates(leftElement, pos); });\n\n// 对于元素另一边的鼠标事件，在另一处显示坐标\ncoordinates\n  .filter(function(pos) { return pos[0] > sourceElement.clientWidth / 2; })\n  .each(function(pos) { displayCoordinates(rightElement, pos); });\n```\n\n还有么？当然！\n\n字符串处理\n----------\n\n这可能是你不会想到过的东西：`String.match`和`String.split`。在JavaScript中，这两个方法会返回包含子字符串的数组。如果你这么做，通常意味着JavaScrit会做一些不必要的事。但是从开发者的角度而言，这是完成任务最快的方法。\n\n例如，你想从一段文本中抽取出前5行。你当然可以这么做：\n\n```js\nvar firstFiveLines = text.split(\"\\n\").slice(0, 5);\n```\n\n当然，这意味着将整个字符串分割成单行。如果这个字符串非常大，这很浪费。\n\n有了`Lazy.js`，我们不用分割整个字符串，我们只需将它看成行的序列。将字符串用`Lazy`包裹之后再调用`split`，可以取得同样的效果：\n\n```js\nvar firstFiveLines = Lazy(text).split(\"\\n\").take(5);\n```\n\n这样我们就可以读取任意大小的字符串的前5行（而不需要预先生成一个巨大的数组），然后像对其他序列一样使用`map/reduce`。\n\n`String.match`同理。例如我们需要找出字符串中最前面5个数字或字母。使用`Lazy.js`，这很容易！\n\n```js\nvar firstFiveWords = Lazy(text).match(/[a-z0-9]+/i).take(5);\n```\n\n小菜一碟。\n\n流处理\n------\n\n在Node.js中，Lazy.js同样可以封装流。\n\n给定一个[可读流](http://nodejs.org/api/stream.html#stream_class_stream_readable)，你可以像封装数组一样用`Lazy`包裹一番：\n\n```js\nLazy(stream)\n  .take(5) // 仅仅阅读数据中的前五块内容\n  .each(processData);\n```\n\n为了方便，Lazy.js也提供了处理文件流和HTTP流的专门辅助方法。（注意：API未来可能会改变。）\n\n```js\n// 读取文件的前5行\nLazy.readFile(\"path/to/file\")\n  .lines()\n  .take(5)\n  .each(doSomething);\n\n// 从HTTP响应中读取5-10行\nLazy.makeHttpRequest(\"http://example.com\")\n  .lines()\n  .drop(5)\n  .take(5)\n  .each(doSomething);\n```\n\n`lines()`方法将每段切割成行（当然了，切割是惰性的）。\n\n----\n\nLazy.js是试验性的，仍在开发中。[项目主页在此](http://danieltao.com/lazy.js/)\n"
        },
        {
          "name": "Rakefile",
          "type": "blob",
          "size": 2.2783203125,
          "content": "require \"json\"\nrequire \"uglifier\"\n\ndef package_info\n  JSON.parse(File.read('package.json'))\nend\n\ndef update_json(file_path, updates)\n  json = JSON.parse(File.read(file_path))\n  json.merge!(updates)\n  File.write(file_path, JSON.pretty_generate(json) + \"\\n\")\nend\n\ndef format_options(options)\n  options.map { |key, value| \"--#{key} #{value}\" }.join(\" \")\nend\n\ndesc \"Concat and uglify JavaScript\"\ntask :build => [ 'lazy.js', 'lazy.browser.js' ] do |task|\n  version = package_info['version']\n\n  File.open('lazy.min.js', 'w') { |f|\n    content = task.prerequisites.map { |prereq|\n      if File.exist?(prereq)\n        File.read(prereq)\n      elsif Rake::Task[prereq].nil?\n        raise \"Prerequisite #{prereq} does not exist.\"\n      end\n    }.compact.join(\"\\n\")\n\n    header = \"/*! lazy.js #{version} (c)#{Time.now.year} Dan Tao @license MIT */\"\n    minified = Uglifier.new.compile(content)\n    f.write(header + \"\\n\" + minified + \"\\n\")\n  }\nend\n\ndesc \"Update the library version in package.json and component.json\"\ntask :update_version do\n  if (version = ENV['VERSION']).nil?\n    puts \"Set the VERSION environment variable for this Rake task.\"\n    exit\n  end\n\n  update_json('package.json', { 'version' => version })\n  update_json('component.json', { 'version' => version })\nend\n\ndesc \"Setup symbolic links to lazy.js, etc. for project site\"\ntask :symlinks do\n  sh <<-BASH\n    cd site/source/javascripts/lib\n    ln -s ../../../../lazy.js lazy.js\n    ln -s ../../../../lazy.browser.js lazy.browser.js\n    ln -s ../../../../lazy.min.js lazy.min.js\n    ln -s ../../../../experimental/lazy.json.js lazy.json.js\n    ln -s ../../../../experimental/lazy.es6.js lazy.es6.js\n    ln -s ../../../../spec spec\n  BASH\nend\n\ndesc \"Generate documentation using Autodoc\"\ntask :generate_docs do\n  sequence_types = [\n    \"Lazy\",\n    \"Sequence\",\n    \"ArrayLikeSequence\",\n    \"ObjectLikeSequence\",\n    \"StringLikeSequence\",\n    \"StreamLikeSequence\",\n    \"GeneratedSequence\",\n    \"AsyncSequence\",\n    \"Iterator\",\n    \"AsyncHandle\"\n  ]\n\n  options = {\n    :namespaces => sequence_types.join(\",\"),\n    :template => \"autodoc/index.html.mustache\",\n    :handlers => \"autodoc/handlers.js\",\n    :partials => \"autodoc/\",\n    :output => \"site/build/docs\",\n    :'template-data' => \"version:#{package_info['version']}\"\n  }\n\n  sh \"autodoc #{format_options(options)} lazy.js\"\nend\n"
        },
        {
          "name": "autodoc",
          "type": "tree",
          "content": null
        },
        {
          "name": "bower.json",
          "type": "blob",
          "size": 0.1201171875,
          "content": "{\n  \"name\": \"lazy.js\",\n  \"main\": \"lazy.js\",\n  \"ignore\": [\n    \"**/.*\",\n    \"docs\",\n    \"lib\",\n    \"site\",\n    \"spec\"\n  ]\n}\n"
        },
        {
          "name": "component.json",
          "type": "blob",
          "size": 0.3466796875,
          "content": "{\n  \"name\": \"lazy.js\",\n  \"repo\": \"dtao/lazy.js\",\n  \"description\": \"Like Underscore, but lazier\",\n  \"demo\": \"http://danieltao.com/lazy.js/\",\n  \"version\": \"0.5.1\",\n  \"main\": \"lazy.js\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"lazy\",\n    \"functional\",\n    \"performance\",\n    \"speed\",\n    \"util\"\n  ],\n  \"scripts\": [\n    \"lazy.js\",\n    \"lazy.browser.js\"\n  ]\n}\n"
        },
        {
          "name": "experimental",
          "type": "tree",
          "content": null
        },
        {
          "name": "lazy.browser.js",
          "type": "blob",
          "size": 5.03515625,
          "content": "(function(Lazy) {\n\n  /**\n   * A seqence of DOM nodes.\n   *\n   * You can get a `DomSequence` by wrapping a `NodeList` or `HTMLCollection`\n   * with `Lazy`:\n   *\n   *     var paragraphs = Lazy(document.querySelectorAll('p'));\n   *\n   * @public\n   * @constructor\n   * @param {NodeList|HTMLCollection} source The underlying collection of DOM\n   *     nodes.\n   */\n  function DomSequence(source) {\n    this.source = source;\n  }\n\n  DomSequence.prototype = new Lazy.ArrayLikeSequence();\n\n  DomSequence.prototype.get = function(i) {\n    return this.source[i];\n  };\n\n  DomSequence.prototype.length = function() {\n    return this.source.length;\n  };\n\n  /**\n   * Provides a sequence comprising all of this sequence's nodes and their\n   * descendents (children, grandchildren, etc.).\n   *\n   * @public\n   * @returns {Sequence}\n   */\n  DomSequence.prototype.flatten = function() {\n    return new FlattenedDomSequence(this.source);\n  };\n\n  function FlattenedDomSequence(source) {\n    this.source = source;\n  }\n\n  FlattenedDomSequence.prototype = new Lazy.Sequence();\n\n  FlattenedDomSequence.prototype.each = function(fn) {\n    var i    = 0,\n        done = false;\n\n    Lazy(this.source).each(function(child) {\n      if (fn(child, i++) === false) {\n        return false;\n      }\n\n      Lazy(child.children).flatten().each(function(descendent) {\n        if (fn(descendent, i++) === false) {\n          done = true;\n          return false;\n        }\n      });\n\n      if (done) {\n        return false;\n      }\n    });\n  };\n\n  /**\n   * Creates a sequence comprising all of the `Event` objects from the given\n   * event propagating through the node(s) in the current sequence.\n   *\n   * @public\n   * @param {string} eventName The name of the event to catch.\n   * @returns {AsyncSequence}\n   */\n  DomSequence.prototype.on = function(eventName) {\n    return new DomEventSequence(this.source, eventName);\n  };\n\n  function DomEventSequence(elements, eventName) {\n    this.elements = elements;\n    this.eventName = eventName;\n  }\n\n  DomEventSequence.prototype = new Lazy.Sequence();\n\n  /**\n   * Handles every event in this sequence.\n   *\n   * @param {function(Event):*} fn The function to call on each event in the\n   *     sequence. Return false from the function to stop handling the events.\n   */\n  DomEventSequence.prototype.each = function(fn) {\n    var elements = this.elements,\n        eventName = this.eventName;\n\n    var listener = function(e) {\n      if (fn(e) === false) {\n        for (var i = 0; i < elements.length; ++i) {\n          elements[i].removeEventListener(eventName, listener);\n        }\n      }\n    };\n\n    for (var i = 0; i < elements.length; ++i) {\n      elements[i].addEventListener(this.eventName, listener);\n    }\n  };\n\n  /**\n   * Creates a {@link Sequence} from the specified DOM events triggered on the\n   * given element. This sequence works asynchronously, so synchronous methods\n   * such as {@code indexOf}, {@code any}, and {@code toArray} won't work.\n   *\n   * @param {Element} element The DOM element to capture events from.\n   * @param {string} eventName The name of the event type (e.g., 'keypress')\n   *     that will make up this sequence.\n   * @return {Sequence} The sequence of events.\n   */\n  Lazy.events = Lazy.deprecate(\n    \"Lazy.events is deprecated. Use Lazy(element[s]).on('event') instead\",\n    function(element, eventName) {\n      return new DomEventSequence(element, eventName);\n    }\n  );\n\n  /**\n   * A `StreamingHttpSequence` is a {@link StreamLikeSequence} comprising the\n   * chunks of data that are streamed in response to an HTTP request.\n   *\n   * @public\n   * @param {string} url The URL of the HTTP request.\n   * @constructor\n   */\n  function StreamingHttpSequence(url) {\n    this.url = url;\n  }\n\n  StreamingHttpSequence.prototype = new Lazy.StreamLikeSequence();\n\n  StreamingHttpSequence.prototype.each = function each(fn) {\n    var request = new XMLHttpRequest(),\n        index   = 0,\n        aborted = false;\n\n    request.open(\"GET\", this.url);\n\n    var handle = new Lazy.AsyncHandle();\n\n    var listener = function listener(data) {\n      if (!aborted) {\n        data = request.responseText.substring(index);\n        try {\n          if (fn(data) === false) {\n            request.removeEventListener(\"progress\", listener, false);\n            request.abort();\n            aborted = true;\n            handle._resolve(false);\n          }\n          index += data.length;\n        } catch (e) {\n          handle._reject(e);\n        }\n      }\n    };\n\n    request.addEventListener(\"progress\", listener, false);\n\n    request.addEventListener(\"load\", function() {\n      handle._resolve(true);\n    });\n\n    request.send();\n\n    return handle;\n  };\n\n  Lazy.makeHttpRequest = function(url) {\n    return new StreamingHttpSequence(url);\n  };\n\n  /*\n   * Add support for `Lazy(NodeList)` and `Lazy(HTMLCollection)`.\n   */\n  Lazy.extensions || (Lazy.extensions = []);\n\n  Lazy.extensions.push(function(source) {\n    if (source instanceof NodeList || source instanceof HTMLCollection) {\n      return new DomSequence(source);\n    } else if (source instanceof Element) {\n      return new DomSequence([source]);\n    }\n  });\n\n}(window.Lazy));\n"
        },
        {
          "name": "lazy.js",
          "type": "blob",
          "size": 200.0771484375,
          "content": "/*\n * @name Lazy.js\n * Licensed under the MIT License (see LICENSE.txt)\n *\n * @fileOverview\n * Lazy.js is a lazy evaluation library for JavaScript.\n *\n * This has been done before. For examples see:\n *\n * - [wu.js](http://fitzgen.github.io/wu.js/)\n * - [Linq.js](http://linqjs.codeplex.com/)\n * - [from.js](https://github.com/suckgamoni/fromjs/)\n * - [IxJS](http://rx.codeplex.com/)\n * - [sloth.js](http://rfw.name/sloth.js/)\n *\n * However, at least at present, Lazy.js is faster (on average) than any of\n * those libraries. It is also more complete, with nearly all of the\n * functionality of [Underscore](http://underscorejs.org/) and\n * [Lo-Dash](http://lodash.com/).\n *\n * Finding your way around the code\n * --------------------------------\n *\n * At the heart of Lazy.js is the {@link Sequence} object. You create an initial\n * sequence using {@link Lazy}, which can accept an array, object, or string.\n * You can then \"chain\" together methods from this sequence, creating a new\n * sequence with each call.\n *\n * Here's an example:\n *\n *     var data = getReallyBigArray();\n *\n *     var statistics = Lazy(data)\n *       .map(transform)\n *       .filter(validate)\n *       .reduce(aggregate);\n *\n * {@link Sequence} is the foundation of other, more specific sequence types.\n *\n * An {@link ArrayLikeSequence} provides indexed access to its elements.\n *\n * An {@link ObjectLikeSequence} consists of key/value pairs.\n *\n * A {@link StringLikeSequence} is like a string (duh): actually, it is an\n * {@link ArrayLikeSequence} whose elements happen to be characters.\n *\n * An {@link AsyncSequence} is special: it iterates over its elements\n * asynchronously (so calling `each` generally begins an asynchronous loop and\n * returns immediately).\n *\n * For more information\n * --------------------\n *\n * I wrote a blog post that explains a little bit more about Lazy.js, which you\n * can read [here](http://philosopherdeveloper.com/posts/introducing-lazy-js.html).\n *\n * You can also [create an issue on GitHub](https://github.com/dtao/lazy.js/issues)\n * if you have any issues with the library. I work through them eventually.\n *\n * [@dtao](https://github.com/dtao)\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.Lazy = factory();\n  }\n})(this, function(context) {\n  /**\n   * Wraps an object and returns a {@link Sequence}. For `null` or `undefined`,\n   * simply returns an empty sequence (see {@link Lazy.strict} for a stricter\n   * implementation).\n   *\n   * - For **arrays**, Lazy will create a sequence comprising the elements in\n   *   the array (an {@link ArrayLikeSequence}).\n   * - For **objects**, Lazy will create a sequence of key/value pairs\n   *   (an {@link ObjectLikeSequence}).\n   * - For **strings**, Lazy will create a sequence of characters (a\n   *   {@link StringLikeSequence}).\n   *\n   * @public\n   * @param {Array|Object|string} source An array, object, or string to wrap.\n   * @returns {Sequence} The wrapped lazy object.\n   *\n   * @exampleHelpers\n   * // Utility functions to provide to all examples\n   * function increment(x) { return x + 1; }\n   * function isEven(x) { return x % 2 === 0; }\n   * function isPositive(x) { return x > 0; }\n   * function isNegative(x) { return x < 0; }\n   *\n   * // HACK!\n   * // autodoc tests for private methods don't pull in all variables defined\n   * // within the current scope :(\n   * var isArray = Array.isArray;\n   *\n   * @examples\n   * Lazy([1, 2, 4])       // instanceof Lazy.ArrayLikeSequence\n   * Lazy({ foo: \"bar\" })  // instanceof Lazy.ObjectLikeSequence\n   * Lazy(\"hello, world!\") // instanceof Lazy.StringLikeSequence\n   * Lazy()                // sequence: []\n   * Lazy(null)            // sequence: []\n   */\n  function Lazy(source) {\n    if (isArray(source)) {\n      return new ArrayWrapper(source);\n\n    } else if (typeof source === \"string\") {\n      return new StringWrapper(source);\n\n    } else if (source instanceof Sequence) {\n      return source;\n    }\n\n    if (Lazy.extensions) {\n      var extensions = Lazy.extensions, length = extensions.length, result;\n      while (!result && length--) {\n        result = extensions[length](source);\n      }\n      if (result) {\n        return result;\n      }\n    }\n\n    return new ObjectWrapper(source);\n  }\n\n  Lazy.VERSION = '0.5.1';\n\n  /*** Utility methods of questionable value ***/\n\n  Lazy.noop = function noop() {};\n  Lazy.identity = function identity(x) { return x; };\n  Lazy.equality = function equality(x, y) { return x === y; };\n\n  /**\n   * Provides a stricter version of {@link Lazy} which throws an error when\n   * attempting to wrap `null`, `undefined`, or numeric or boolean values as a\n   * sequence.\n   *\n   * @public\n   * @returns {Function} A stricter version of the {@link Lazy} helper function.\n   *\n   * @examples\n   * var Strict = Lazy.strict();\n   *\n   * Strict()                  // throws\n   * Strict(null)              // throws\n   * Strict(true)              // throws\n   * Strict(5)                 // throws\n   * Strict([1, 2, 3])         // instanceof Lazy.ArrayLikeSequence\n   * Strict({ foo: \"bar\" })    // instanceof Lazy.ObjectLikeSequence\n   * Strict(\"hello, world!\")   // instanceof Lazy.StringLikeSequence\n   *\n   * // Let's also ensure the static functions are still there.\n   * Strict.range(3)           // sequence: [0, 1, 2]\n   * Strict.generate(Date.now) // instanceof Lazy.GeneratedSequence\n   */\n  Lazy.strict = function strict() {\n    function StrictLazy(source) {\n      if (source == null) {\n        throw new Error(\"You cannot wrap null or undefined using Lazy.\");\n      }\n\n      if (typeof source === \"number\" || typeof source === \"boolean\") {\n        throw new Error(\"You cannot wrap primitive values using Lazy.\");\n      }\n\n      return Lazy(source);\n    };\n\n    Lazy(Lazy).each(function(property, name) {\n      StrictLazy[name] = property;\n    });\n\n    return StrictLazy;\n  };\n\n  /**\n   * The `Sequence` object provides a unified API encapsulating the notion of\n   * zero or more consecutive elements in a collection, stream, etc.\n   *\n   * Lazy evaluation\n   * ---------------\n   *\n   * Generally speaking, creating a sequence should not be an expensive operation,\n   * and should not iterate over an underlying source or trigger any side effects.\n   * This means that chaining together methods that return sequences incurs only\n   * the cost of creating the `Sequence` objects themselves and not the cost of\n   * iterating an underlying data source multiple times.\n   *\n   * The following code, for example, creates 4 sequences and does nothing with\n   * `source`:\n   *\n   *     var seq = Lazy(source) // 1st sequence\n   *       .map(func)           // 2nd\n   *       .filter(pred)        // 3rd\n   *       .reverse();          // 4th\n   *\n   * Lazy's convention is to hold off on iterating or otherwise *doing* anything\n   * (aside from creating `Sequence` objects) until you call `each`:\n   *\n   *     seq.each(function(x) { console.log(x); });\n   *\n   * Defining custom sequences\n   * -------------------------\n   *\n   * Defining your own type of sequence is relatively simple:\n   *\n   * 1. Pass a *method name* and an object containing *function overrides* to\n   *    {@link Sequence.define}. If the object includes a function called `init`,\n   *    this function will be called upon initialization.\n   * 2. The object should include at least either a `getIterator` method or an\n   *    `each` method. The former supports both asynchronous and synchronous\n   *    iteration, but is slightly more cumbersome to implement. The latter\n   *    supports synchronous iteration and can be automatically implemented in\n   *    terms of the former. You can also implement both if you want, e.g. to\n   *    optimize performance. For more info, see {@link Iterator} and\n   *    {@link AsyncSequence}.\n   *\n   * As a trivial example, the following code defines a new method, `sample`,\n   * which randomly may or may not include each element from its parent.\n   *\n   *     Lazy.Sequence.define(\"sample\", {\n   *       each: function(fn) {\n   *         return this.parent.each(function(e) {\n   *           // 50/50 chance of including this element.\n   *           if (Math.random() > 0.5) {\n   *             return fn(e);\n   *           }\n   *         });\n   *       }\n   *     });\n   *\n   * (Of course, the above could also easily have been implemented using\n   * {@link #filter} instead of creating a custom sequence. But I *did* say this\n   * was a trivial example, to be fair.)\n   *\n   * Now it will be possible to create this type of sequence from any parent\n   * sequence by calling the method name you specified. In other words, you can\n   * now do this:\n   *\n   *     Lazy(arr).sample();\n   *     Lazy(arr).map(func).sample();\n   *     Lazy(arr).map(func).filter(pred).sample();\n   *\n   * Etc., etc.\n   *\n   * @public\n   * @constructor\n   */\n  function Sequence() {}\n\n  /**\n   * Create a new constructor function for a type inheriting from `Sequence`.\n   *\n   * @public\n   * @param {string|Array.<string>} methodName The name(s) of the method(s) to be\n   *     used for constructing the new sequence. The method will be attached to\n   *     the `Sequence` prototype so that it can be chained with any other\n   *     sequence methods, like {@link #map}, {@link #filter}, etc.\n   * @param {Object} overrides An object containing function overrides for this\n   *     new sequence type. **Must** include either `getIterator` or `each` (or\n   *     both). *May* include an `init` method as well. For these overrides,\n   *     `this` will be the new sequence, and `this.parent` will be the base\n   *     sequence from which the new sequence was constructed.\n   * @returns {Function} A constructor for a new type inheriting from `Sequence`.\n   *\n   * @examples\n   * // This sequence type logs every element to the specified logger as it\n   * // iterates over it.\n   * Lazy.Sequence.define(\"verbose\", {\n   *   init: function(logger) {\n   *     this.logger = logger;\n   *   },\n   *\n   *   each: function(fn) {\n   *     var logger = this.logger;\n   *     return this.parent.each(function(e, i) {\n   *       logger(e);\n   *       return fn(e, i);\n   *     });\n   *   }\n   * });\n   *\n   * Lazy([1, 2, 3]).verbose(logger).each(Lazy.noop) // calls logger 3 times\n   */\n  Sequence.define = function define(methodName, overrides) {\n    if (!overrides || (!overrides.getIterator && !overrides.each)) {\n      throw new Error(\"A custom sequence must implement *at least* getIterator or each!\");\n    }\n\n    return defineSequenceType(Sequence, methodName, overrides);\n  };\n\n  /**\n   * Gets the number of elements in the sequence. In some cases, this may\n   * require eagerly evaluating the sequence.\n   *\n   * @public\n   * @returns {number} The number of elements in the sequence.\n   *\n   * @examples\n   * Lazy([1, 2, 3]).size();                 // => 3\n   * Lazy([1, 2]).map(Lazy.identity).size(); // => 2\n   * Lazy([1, 2, 3]).reject(isEven).size();  // => 2\n   * Lazy([1, 2, 3]).take(1).size();         // => 1\n   * Lazy({ foo: 1, bar: 2 }).size();        // => 2\n   * Lazy('hello').size();                   // => 5\n   */\n  Sequence.prototype.size = function size() {\n    return this.getIndex().length();\n  };\n\n  /**\n   * Creates an {@link Iterator} object with two methods, `moveNext` -- returning\n   * true or false -- and `current` -- returning the current value.\n   *\n   * This method is used when asynchronously iterating over sequences. Any type\n   * inheriting from `Sequence` must implement this method or it can't support\n   * asynchronous iteration.\n   *\n   * Note that **this method is not intended to be used directly by application\n   * code.** Rather, it is intended as a means for implementors to potentially\n   * define custom sequence types that support either synchronous or\n   * asynchronous iteration.\n   *\n   * @public\n   * @returns {Iterator} An iterator object.\n   *\n   * @examples\n   * var iterator = Lazy([1, 2]).getIterator();\n   *\n   * iterator.moveNext(); // => true\n   * iterator.current();  // => 1\n   * iterator.moveNext(); // => true\n   * iterator.current();  // => 2\n   * iterator.moveNext(); // => false\n   */\n  Sequence.prototype.getIterator = function getIterator() {\n    return new Iterator(this);\n  };\n\n  /**\n   * Gets the root sequence underlying the current chain of sequences.\n   */\n  Sequence.prototype.root = function root() {\n    return this.parent.root();\n  };\n\n  /**\n   * Whether or not the current sequence is an asynchronous one. This is more\n   * accurate than checking `instanceof {@link AsyncSequence}` because, for\n   * example, `Lazy([1, 2, 3]).async().map(Lazy.identity)` returns a sequence\n   * that iterates asynchronously even though it's not an instance of\n   * `AsyncSequence`.\n   *\n   * @returns {boolean} Whether or not the current sequence is an asynchronous one.\n   */\n  Sequence.prototype.isAsync = function isAsync() {\n    return this.parent ? this.parent.isAsync() : false;\n  };\n\n  /**\n   * Evaluates the sequence and produces the appropriate value (an array in most\n   * cases, an object for {@link ObjectLikeSequence}s or a string for\n   * {@link StringLikeSequence}s).\n   *\n   * @returns {Array|string|Object} The value resulting from fully evaluating\n   *     the sequence.\n   */\n  Sequence.prototype.value = function value() {\n    return this.toArray();\n  };\n\n  /**\n   * Applies the current transformation chain to a given source, returning the\n   * resulting value.\n   *\n   * @examples\n   * var sequence = Lazy([])\n   *   .map(function(x) { return x * -1; })\n   *   .filter(function(x) { return x % 2 === 0; });\n   *\n   * sequence.apply([1, 2, 3, 4]); // => [-2, -4]\n   */\n  Sequence.prototype.apply = function apply(source) {\n    var root = this.root(),\n        previousSource = root.source,\n        result;\n\n    try {\n      root.source = source;\n      result = this.value();\n    } finally {\n      root.source = previousSource;\n    }\n\n    return result;\n  };\n\n  /**\n   * The Iterator object provides an API for iterating over a sequence.\n   *\n   * The purpose of the `Iterator` type is mainly to offer an agnostic way of\n   * iterating over a sequence -- either synchronous (i.e. with a `while` loop)\n   * or asynchronously (with recursive calls to either `setTimeout` or --- if\n   * available --- `setImmediate`). It is not intended to be used directly by\n   * application code.\n   *\n   * @public\n   * @constructor\n   * @param {Sequence} sequence The sequence to iterate over.\n   */\n  function Iterator(sequence) {\n    this.sequence = sequence;\n    this.index    = -1;\n  }\n\n  /**\n   * Gets the current item this iterator is pointing to.\n   *\n   * @public\n   * @returns {*} The current item.\n   */\n  Iterator.prototype.current = function current() {\n    return this.cachedIndex && this.cachedIndex.get(this.index);\n  };\n\n  /**\n   * Moves the iterator to the next item in a sequence, if possible.\n   *\n   * @public\n   * @returns {boolean} True if the iterator is able to move to a new item, or else\n   *     false.\n   */\n  Iterator.prototype.moveNext = function moveNext() {\n    var cachedIndex = this.cachedIndex;\n\n    if (!cachedIndex) {\n      cachedIndex = this.cachedIndex = this.sequence.getIndex();\n    }\n\n    if (this.index >= cachedIndex.length() - 1) {\n      return false;\n    }\n\n    ++this.index;\n    return true;\n  };\n\n  /**\n   * Creates an array snapshot of a sequence.\n   *\n   * Note that for indefinite sequences, this method may raise an exception or\n   * (worse) cause the environment to hang.\n   *\n   * @public\n   * @returns {Array} An array containing the current contents of the sequence.\n   *\n   * @examples\n   * Lazy([1, 2, 3]).toArray() // => [1, 2, 3]\n   */\n  Sequence.prototype.toArray = function toArray() {\n    return this.reduce(function(arr, element) {\n      arr.push(element);\n      return arr;\n    }, []);\n  };\n\n  /**\n   * Compare this to another sequence for equality.\n   *\n   * @public\n   * @param {Sequence} other The other sequence to compare this one to.\n   * @param {Function=} equalityFn An optional equality function, which should\n   *     take two arguments and return true or false to indicate whether those\n   *     values are considered equal.\n   * @returns {boolean} Whether the two sequences contain the same values in\n   *     the same order.\n   *\n   * @examples\n   * Lazy([1, 2]).equals(Lazy([1, 2]))   // => true\n   * Lazy([1, 2]).equals(Lazy([2, 1]))   // => false\n   * Lazy([1]).equals(Lazy([1, 2]))      // => false\n   * Lazy([1, 2]).equals(Lazy([1]))      // => false\n   * Lazy([]).equals(Lazy([]))           // => true\n   * Lazy(['foo']).equals(Lazy(['foo'])) // => true\n   * Lazy(['1']).equals(Lazy([1]))       // => false\n   * Lazy([false]).equals(Lazy([0]))     // => false\n   * Lazy([1, 2]).equals([1, 2])         // => false\n   * Lazy([1, 2]).equals('[1, 2]')       // => false\n   */\n  Sequence.prototype.equals = function equals(other, equalityFn) {\n    if (!(other instanceof Sequence)) {\n      return false;\n    }\n\n    var it  = this.getIterator(),\n        oit = other.getIterator(),\n        eq  = equalityFn || Lazy.equality;\n    while (it.moveNext()) {\n      if (!oit.moveNext()) {\n        return false;\n      }\n      if (!eq(it.current(), oit.current())) {\n        return false;\n      }\n    }\n    return !oit.moveNext();\n  };\n\n  /**\n   * Provides an indexed view into the sequence.\n   *\n   * For sequences that are already indexed, this will simply return the\n   * sequence. For non-indexed sequences, this will eagerly evaluate the\n   * sequence.\n   *\n   * @returns {ArrayLikeSequence} A sequence containing the current contents of\n   *     the sequence.\n   *\n   * @examples\n   * Lazy([1, 2, 3]).filter(isEven)            // instanceof Lazy.Sequence\n   * Lazy([1, 2, 3]).filter(isEven).getIndex() // instanceof Lazy.ArrayLikeSequence\n   */\n  Sequence.prototype.getIndex = function getIndex() {\n    return new ArrayWrapper(this.toArray());\n  };\n\n  /**\n   * Returns the element at the specified index. Note that, for sequences that\n   * are not {@link ArrayLikeSequence}s, this may require partially evaluating\n   * the sequence, iterating to reach the result. (In other words for such\n   * sequences this method is not O(1).)\n   *\n   * @public\n   * @param {number} i The index to access.\n   * @returns {*} The element.\n   *\n   */\n  Sequence.prototype.get = function get(i) {\n    var element;\n    this.each(function(e, index) {\n      if (index === i) {\n        element = e;\n        return false;\n      }\n    });\n    return element;\n  };\n\n  /**\n   * Provides an indexed, memoized view into the sequence. This will cache the\n   * result whenever the sequence is first iterated, so that subsequent\n   * iterations will access the same element objects.\n   *\n   * @public\n   * @returns {ArrayLikeSequence} An indexed, memoized sequence containing this\n   *     sequence's elements, cached after the first iteration.\n   *\n   * @example\n   * function createObject() { return new Object(); }\n   *\n   * var plain    = Lazy.generate(createObject, 10),\n   *     memoized = Lazy.generate(createObject, 10).memoize();\n   *\n   * plain.toArray()[0] === plain.toArray()[0];       // => false\n   * memoized.toArray()[0] === memoized.toArray()[0]; // => true\n   */\n  Sequence.prototype.memoize = function memoize() {\n    return new MemoizedSequence(this);\n  };\n\n  /**\n   * @constructor\n   */\n  function MemoizedSequence(parent) {\n    this.parent   = parent;\n    this.memo     = [];\n    this.iterator = undefined;\n    this.complete = false;\n  }\n\n  // MemoizedSequence needs to have its prototype set up after ArrayLikeSequence\n\n  /**\n   * Creates an object from a sequence of key/value pairs.\n   *\n   * @public\n   * @returns {Object} An object with keys and values corresponding to the pairs\n   *     of elements in the sequence.\n   *\n   * @examples\n   * var details = [\n   *   [\"first\", \"Dan\"],\n   *   [\"last\", \"Tao\"],\n   *   [\"age\", 29]\n   * ];\n   *\n   * Lazy(details).toObject() // => { first: \"Dan\", last: \"Tao\", age: 29 }\n   */\n  Sequence.prototype.toObject = function toObject() {\n    return this.reduce(function(object, pair) {\n      object[pair[0]] = pair[1];\n      return object;\n    }, {});\n  };\n\n  /**\n   * Iterates over this sequence and executes a function for every element.\n   *\n   * @public\n   * @aka forEach\n   * @param {Function} fn The function to call on each element in the sequence.\n   *     Return false from the function to end the iteration.\n   * @returns {boolean} `true` if the iteration evaluated the entire sequence,\n   *     or `false` if iteration was ended early.\n   *\n   * @examples\n   * Lazy([1, 2, 3, 4]).each(fn) // calls fn 4 times\n   */\n  Sequence.prototype.each = function each(fn) {\n    var iterator = this.getIterator(),\n        i = -1;\n\n    while (iterator.moveNext()) {\n      if (fn(iterator.current(), ++i) === false) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  Sequence.prototype.forEach = function forEach(fn) {\n    return this.each(fn);\n  };\n\n  /**\n   * Creates a new sequence whose values are calculated by passing this sequence's\n   * elements through some mapping function.\n   *\n   * @public\n   * @aka collect\n   * @param {Function} mapFn The mapping function used to project this sequence's\n   *     elements onto a new sequence. This function takes up to two arguments:\n   *     the element, and the current index.\n   * @returns {Sequence} The new sequence.\n   *\n   * @examples\n   * function addIndexToValue(e, i) { return e + i; }\n   *\n   * Lazy([]).map(increment)              // sequence: []\n   * Lazy([1, 2, 3]).map(increment)       // sequence: [2, 3, 4]\n   * Lazy([1, 2, 3]).map(addIndexToValue) // sequence: [1, 3, 5]\n   *\n   * @benchmarks\n   * function increment(x) { return x + 1; }\n   *\n   * var smArr = Lazy.range(10).toArray(),\n   *     lgArr = Lazy.range(100).toArray();\n   *\n   * Lazy(smArr).map(increment).each(Lazy.noop) // lazy - 10 elements\n   * Lazy(lgArr).map(increment).each(Lazy.noop) // lazy - 100 elements\n   * _.each(_.map(smArr, increment), _.noop)    // lodash - 10 elements\n   * _.each(_.map(lgArr, increment), _.noop)    // lodash - 100 elements\n   */\n  Sequence.prototype.map = function map(mapFn) {\n    return new MappedSequence(this, createCallback(mapFn));\n  };\n\n  Sequence.prototype.collect = function collect(mapFn) {\n    return this.map(mapFn);\n  };\n\n  /**\n   * @constructor\n   */\n  function MappedSequence(parent, mapFn) {\n    this.parent = parent;\n    this.mapFn  = mapFn;\n  }\n\n  MappedSequence.prototype = Object.create(Sequence.prototype);\n\n  MappedSequence.prototype.getIterator = function getIterator() {\n    return new MappingIterator(this.parent, this.mapFn);\n  };\n\n  MappedSequence.prototype.each = function each(fn) {\n    var mapFn = this.mapFn;\n    return this.parent.each(function(e, i) {\n      return fn(mapFn(e, i), i);\n    });\n  };\n\n  /**\n   * @constructor\n   */\n  function MappingIterator(sequence, mapFn) {\n    this.iterator = sequence.getIterator();\n    this.mapFn    = mapFn;\n    this.index    = -1;\n  }\n\n  MappingIterator.prototype.current = function current() {\n    return this.mapFn(this.iterator.current(), this.index);\n  };\n\n  MappingIterator.prototype.moveNext = function moveNext() {\n    if (this.iterator.moveNext()) {\n      ++this.index;\n      return true;\n    }\n\n    return false;\n  };\n\n  /**\n   * Creates a new sequence whose values are calculated by accessing the specified\n   * property from each element in this sequence.\n   *\n   * @public\n   * @param {string} propertyName The name of the property to access for every\n   *     element in this sequence.\n   * @returns {Sequence} The new sequence.\n   *\n   * @examples\n   * var people = [\n   *   { first: \"Dan\", last: \"Tao\" },\n   *   { first: \"Bob\", last: \"Smith\" }\n   * ];\n   *\n   * Lazy(people).pluck(\"last\") // sequence: [\"Tao\", \"Smith\"]\n   */\n  Sequence.prototype.pluck = function pluck(property) {\n    return this.map(property);\n  };\n\n  /**\n   * Creates a new sequence whose values are calculated by invoking the specified\n   * function on each element in this sequence.\n   *\n   * @public\n   * @param {string} methodName The name of the method to invoke for every element\n   *     in this sequence.\n   * @returns {Sequence} The new sequence.\n   *\n   * @examples\n   * function Person(first, last) {\n   *   this.fullName = function fullName() {\n   *     return first + \" \" + last;\n   *   };\n   * }\n   *\n   * var people = [\n   *   new Person(\"Dan\", \"Tao\"),\n   *   new Person(\"Bob\", \"Smith\")\n   * ];\n   *\n   * Lazy(people).invoke(\"fullName\") // sequence: [\"Dan Tao\", \"Bob Smith\"]\n   */\n  Sequence.prototype.invoke = function invoke(methodName) {\n    return this.map(function(e) {\n      return e[methodName]();\n    });\n  };\n\n  /**\n   * Creates a new sequence whose values are the elements of this sequence which\n   * satisfy the specified predicate.\n   *\n   * @public\n   * @aka select\n   * @param {Function} filterFn The predicate to call on each element in this\n   *     sequence, which returns true if the element should be included.\n   * @returns {Sequence} The new sequence.\n   *\n   * @examples\n   * var numbers = [1, 2, 3, 4, 5, 6];\n   *\n   * Lazy(numbers).filter(isEven) // sequence: [2, 4, 6]\n   *\n   * @benchmarks\n   * function isEven(x) { return x % 2 === 0; }\n   *\n   * var smArr = Lazy.range(10).toArray(),\n   *     lgArr = Lazy.range(100).toArray();\n   *\n   * Lazy(smArr).filter(isEven).each(Lazy.noop) // lazy - 10 elements\n   * Lazy(lgArr).filter(isEven).each(Lazy.noop) // lazy - 100 elements\n   * _.each(_.filter(smArr, isEven), _.noop)    // lodash - 10 elements\n   * _.each(_.filter(lgArr, isEven), _.noop)    // lodash - 100 elements\n   */\n  Sequence.prototype.filter = function filter(filterFn) {\n    return new FilteredSequence(this, createCallback(filterFn));\n  };\n\n  Sequence.prototype.select = function select(filterFn) {\n    return this.filter(filterFn);\n  };\n\n  /**\n   * @constructor\n   */\n  function FilteredSequence(parent, filterFn) {\n    this.parent   = parent;\n    this.filterFn = filterFn;\n  }\n\n  FilteredSequence.prototype = Object.create(Sequence.prototype);\n\n  FilteredSequence.prototype.getIterator = function getIterator() {\n    return new FilteringIterator(this.parent, this.filterFn);\n  };\n\n  FilteredSequence.prototype.each = function each(fn) {\n    var filterFn = this.filterFn,\n        j = 0;\n\n    return this.parent.each(function(e, i) {\n      if (filterFn(e, i)) {\n        return fn(e, j++);\n      }\n    });\n  };\n\n  FilteredSequence.prototype.reverse = function reverse() {\n    return this.parent.reverse().filter(this.filterFn);\n  };\n\n  /**\n   * @constructor\n   */\n  function FilteringIterator(sequence, filterFn) {\n    this.iterator = sequence.getIterator();\n    this.filterFn = filterFn;\n    this.index    = 0;\n  }\n\n  FilteringIterator.prototype.current = function current() {\n    return this.value;\n  };\n\n  FilteringIterator.prototype.moveNext = function moveNext() {\n    var iterator = this.iterator,\n        filterFn = this.filterFn,\n        value;\n\n    while (iterator.moveNext()) {\n      value = iterator.current();\n      if (filterFn(value, this.index++)) {\n        this.value = value;\n        return true;\n      }\n    }\n\n    this.value = undefined;\n    return false;\n  };\n\n  /**\n   * Creates a new sequence whose values exclude the elements of this sequence\n   * identified by the specified predicate.\n   *\n   * @public\n   * @param {Function} rejectFn The predicate to call on each element in this\n   *     sequence, which returns true if the element should be omitted.\n   * @returns {Sequence} The new sequence.\n   *\n   * @examples\n   * Lazy([1, 2, 3, 4, 5]).reject(isEven)              // sequence: [1, 3, 5]\n   * Lazy([{ foo: 1 }, { bar: 2 }]).reject('foo')      // sequence: [{ bar: 2 }]\n   * Lazy([{ foo: 1 }, { foo: 2 }]).reject({ foo: 2 }) // sequence: [{ foo: 1 }]\n   */\n  Sequence.prototype.reject = function reject(rejectFn) {\n    rejectFn = createCallback(rejectFn);\n    return this.filter(function(e) { return !rejectFn(e); });\n  };\n\n  /**\n   * Creates a new sequence whose values have the specified type, as determined\n   * by the `typeof` operator.\n   *\n   * @public\n   * @param {string} type The type of elements to include from the underlying\n   *     sequence, i.e. where `typeof [element] === [type]`.\n   * @returns {Sequence} The new sequence, comprising elements of the specified\n   *     type.\n   *\n   * @examples\n   * Lazy([1, 2, 'foo', 'bar']).ofType('number')  // sequence: [1, 2]\n   * Lazy([1, 2, 'foo', 'bar']).ofType('string')  // sequence: ['foo', 'bar']\n   * Lazy([1, 2, 'foo', 'bar']).ofType('boolean') // sequence: []\n   */\n  Sequence.prototype.ofType = function ofType(type) {\n    return this.filter(function(e) { return typeof e === type; });\n  };\n\n  /**\n   * Creates a new sequence whose values are the elements of this sequence with\n   * property names and values matching those of the specified object.\n   *\n   * @public\n   * @param {Object} properties The properties that should be found on every\n   *     element that is to be included in this sequence.\n   * @returns {Sequence} The new sequence.\n   *\n   * @examples\n   * var people = [\n   *   { first: \"Dan\", last: \"Tao\" },\n   *   { first: \"Bob\", last: \"Smith\" }\n   * ];\n   *\n   * Lazy(people).where({ first: \"Dan\" }) // sequence: [{ first: \"Dan\", last: \"Tao\" }]\n   *\n   * @benchmarks\n   * var animals = [\"dog\", \"cat\", \"mouse\", \"horse\", \"pig\", \"snake\"];\n   *\n   * Lazy(animals).where({ length: 3 }).each(Lazy.noop) // lazy\n   * _.each(_.where(animals, { length: 3 }), _.noop)    // lodash\n   */\n  Sequence.prototype.where = function where(properties) {\n    return this.filter(properties);\n  };\n\n  /**\n   * Creates a new sequence with the same elements as this one, but to be iterated\n   * in the opposite order.\n   *\n   * Note that in some (but not all) cases, the only way to create such a sequence\n   * may require iterating the entire underlying source when `each` is called.\n   *\n   * @public\n   * @returns {Sequence} The new sequence.\n   *\n   * @examples\n   * Lazy([1, 2, 3]).reverse() // sequence: [3, 2, 1]\n   * Lazy([]).reverse()        // sequence: []\n   */\n  Sequence.prototype.reverse = function reverse() {\n    return new ReversedSequence(this);\n  };\n\n  /**\n   * @constructor\n   */\n  function ReversedSequence(parent) {\n    this.parent = parent;\n  }\n\n  ReversedSequence.prototype = Object.create(Sequence.prototype);\n\n  ReversedSequence.prototype.getIterator = function getIterator() {\n    return new ReversedIterator(this.parent);\n  };\n\n  /**\n   * @constuctor\n   */\n  function ReversedIterator(sequence) {\n    this.sequence = sequence;\n  }\n\n  ReversedIterator.prototype.current = function current() {\n    return this.getIndex().get(this.index);\n  };\n\n  ReversedIterator.prototype.moveNext = function moveNext() {\n    var index  = this.getIndex(),\n        length = index.length();\n\n    if (typeof this.index === \"undefined\") {\n      this.index = length;\n    }\n\n    return (--this.index >= 0);\n  };\n\n  ReversedIterator.prototype.getIndex = function getIndex() {\n    if (!this.cachedIndex) {\n      this.cachedIndex = this.sequence.getIndex();\n    }\n\n    return this.cachedIndex;\n  };\n\n  /**\n   * Creates a new sequence with all of the elements of this one, plus those of\n   * the given array(s).\n   *\n   * @public\n   * @param {...*} var_args One or more values (or arrays of values) to use for\n   *     additional items after this sequence.\n   * @returns {Sequence} The new sequence.\n   *\n   * @examples\n   * var left  = [1, 2, 3];\n   * var right = [4, 5, 6];\n   *\n   * Lazy(left).concat(right)             // sequence: [1, 2, 3, 4, 5, 6]\n   * Lazy(left).concat(Lazy(right))       // sequence: [1, 2, 3, 4, 5, 6]\n   * Lazy(left).concat(right, [7, 8])     // sequence: [1, 2, 3, 4, 5, 6, 7, 8]\n   * Lazy(left).concat([4, [5, 6]])       // sequence: [1, 2, 3, 4, [5, 6]]\n   * Lazy(left).concat(Lazy([4, [5, 6]])) // sequence: [1, 2, 3, 4, [5, 6]]\n   */\n  Sequence.prototype.concat = function concat(var_args) {\n    return new ConcatenatedSequence(this, arraySlice.call(arguments, 0));\n  };\n\n  /**\n   * @constructor\n   */\n  function ConcatenatedSequence(parent, arrays) {\n    this.parent = parent;\n    this.arrays = arrays;\n  }\n\n  ConcatenatedSequence.prototype = Object.create(Sequence.prototype);\n\n  ConcatenatedSequence.prototype.each = function each(fn) {\n    var done = false,\n        i = 0;\n\n    this.parent.each(function(e) {\n      if (fn(e, i++) === false) {\n        done = true;\n        return false;\n      }\n    });\n\n    if (!done) {\n      Lazy(this.arrays).flatten(true).each(function(e) {\n        if (fn(e, i++) === false) {\n          return false;\n        }\n      });\n    }\n  };\n\n  /**\n   * Creates a new sequence comprising the first N elements from this sequence, OR\n   * (if N is `undefined`) simply returns the first element of this sequence.\n   *\n   * @public\n   * @aka head, take\n   * @param {number=} count The number of elements to take from this sequence. If\n   *     this value exceeds the length of the sequence, the resulting sequence\n   *     will be essentially the same as this one.\n   * @returns {*} The new sequence (or the first element from this sequence if\n   *     no count was given).\n   *\n   * @examples\n   * function powerOfTwo(exp) {\n   *   return Math.pow(2, exp);\n   * }\n   *\n   * Lazy.generate(powerOfTwo).first()          // => 1\n   * Lazy.generate(powerOfTwo).first(5)         // sequence: [1, 2, 4, 8, 16]\n   * Lazy.generate(powerOfTwo).skip(2).first()  // => 4\n   * Lazy.generate(powerOfTwo).skip(2).first(2) // sequence: [4, 8]\n   */\n  Sequence.prototype.first = function first(count) {\n    if (typeof count === \"undefined\") {\n      return getFirst(this);\n    }\n    return new TakeSequence(this, count);\n  };\n\n  Sequence.prototype.head =\n  Sequence.prototype.take = function (count) {\n    return this.first(count);\n  };\n\n  /**\n   * @constructor\n   */\n  function TakeSequence(parent, count) {\n    this.parent = parent;\n    this.count  = count;\n  }\n\n  TakeSequence.prototype = Object.create(Sequence.prototype);\n\n  TakeSequence.prototype.getIterator = function getIterator() {\n    return new TakeIterator(this.parent, this.count);\n  };\n\n  TakeSequence.prototype.each = function each(fn) {\n    var count = this.count,\n        i     = 0;\n\n    var result;\n    var handle = this.parent.each(function(e) {\n      if (i < count) { result = fn(e, i++); }\n      if (i >= count) { return false; }\n      return result;\n    });\n\n    if (handle instanceof AsyncHandle) {\n      return handle;\n    }\n\n    return i === count && result !== false;\n  };\n\n  /**\n   * @constructor\n   */\n  function TakeIterator(sequence, count) {\n    this.iterator = sequence.getIterator();\n    this.count    = count;\n  }\n\n  TakeIterator.prototype.current = function current() {\n    return this.iterator.current();\n  };\n\n  TakeIterator.prototype.moveNext = function moveNext() {\n    return ((--this.count >= 0) && this.iterator.moveNext());\n  };\n\n  /**\n   * Creates a new sequence comprising the elements from the head of this sequence\n   * that satisfy some predicate. Once an element is encountered that doesn't\n   * satisfy the predicate, iteration will stop.\n   *\n   * @public\n   * @param {Function} predicate\n   * @returns {Sequence} The new sequence\n   *\n   * @examples\n   * function lessThan(x) {\n   *   return function(y) {\n   *     return y < x;\n   *   };\n   * }\n   *\n   * Lazy([1, 2, 3, 4]).takeWhile(lessThan(3)) // sequence: [1, 2]\n   * Lazy([1, 2, 3, 4]).takeWhile(lessThan(0)) // sequence: []\n   */\n  Sequence.prototype.takeWhile = function takeWhile(predicate) {\n    return new TakeWhileSequence(this, predicate);\n  };\n\n  /**\n   * @constructor\n   */\n  function TakeWhileSequence(parent, predicate) {\n    this.parent    = parent;\n    this.predicate = predicate;\n  }\n\n  TakeWhileSequence.prototype = Object.create(Sequence.prototype);\n\n  TakeWhileSequence.prototype.each = function each(fn) {\n    var predicate = this.predicate,\n        finished = false,\n        j = 0;\n\n    var result = this.parent.each(function(e, i) {\n      if (!predicate(e, i)) {\n        finished = true;\n        return false;\n      }\n\n      return fn(e, j++);\n    });\n\n    if (result instanceof AsyncHandle) {\n      return result;\n    }\n\n    return finished;\n  };\n\n  /**\n   * Creates a new sequence comprising all but the last N elements of this\n   * sequence.\n   *\n   * @public\n   * @param {number=} count The number of items to omit from the end of the\n   *     sequence (defaults to 1).\n   * @returns {Sequence} The new sequence.\n   *\n   * @examples\n   * Lazy([1, 2, 3, 4]).initial()                    // sequence: [1, 2, 3]\n   * Lazy([1, 2, 3, 4]).initial(2)                   // sequence: [1, 2]\n   * Lazy([1, 2, 3]).filter(Lazy.identity).initial() // sequence: [1, 2]\n   */\n  Sequence.prototype.initial = function initial(count) {\n    return new InitialSequence(this, count);\n  };\n\n  function InitialSequence(parent, count) {\n    this.parent = parent;\n    this.count = typeof count === \"number\" ? count : 1;\n  }\n\n  InitialSequence.prototype = Object.create(Sequence.prototype);\n\n  InitialSequence.prototype.each = function each(fn) {\n    var index = this.parent.getIndex();\n    return index.take(index.length() - this.count).each(fn);\n  };\n\n  /**\n   * Creates a new sequence comprising the last N elements of this sequence, OR\n   * (if N is `undefined`) simply returns the last element of this sequence.\n   *\n   * @public\n   * @param {number=} count The number of items to take from the end of the\n   *     sequence.\n   * @returns {*} The new sequence (or the last element from this sequence\n   *     if no count was given).\n   *\n   * @examples\n   * Lazy([1, 2, 3]).last()                 // => 3\n   * Lazy([1, 2, 3]).last(2)                // sequence: [2, 3]\n   * Lazy([1, 2, 3]).filter(isEven).last(2) // sequence: [2]\n   */\n  Sequence.prototype.last = function last(count) {\n    if (typeof count === \"undefined\") {\n      return this.reverse().first();\n    }\n    return this.reverse().take(count).reverse();\n  };\n\n  /**\n   * Returns the first element in this sequence with property names and values\n   * matching those of the specified object.\n   *\n   * @public\n   * @param {Object} properties The properties that should be found on some\n   *     element in this sequence.\n   * @returns {*} The found element, or `undefined` if none exists in this\n   *     sequence.\n   *\n   * @examples\n   * var words = [\"foo\", \"bar\"];\n   *\n   * Lazy(words).findWhere({ 0: \"f\" }); // => \"foo\"\n   * Lazy(words).findWhere({ 0: \"z\" }); // => undefined\n   */\n  Sequence.prototype.findWhere = function findWhere(properties) {\n    return this.where(properties).first();\n  };\n\n  /**\n   * Creates a new sequence comprising all but the first N elements of this\n   * sequence.\n   *\n   * @public\n   * @aka skip, tail, rest\n   * @param {number=} count The number of items to omit from the beginning of the\n   *     sequence (defaults to 1).\n   * @returns {Sequence} The new sequence.\n   *\n   * @examples\n   * Lazy([1, 2, 3, 4]).rest()  // sequence: [2, 3, 4]\n   * Lazy([1, 2, 3, 4]).rest(0) // sequence: [1, 2, 3, 4]\n   * Lazy([1, 2, 3, 4]).rest(2) // sequence: [3, 4]\n   * Lazy([1, 2, 3, 4]).rest(5) // sequence: []\n   */\n  Sequence.prototype.rest = function rest(count) {\n    return new DropSequence(this, count);\n  };\n\n  Sequence.prototype.skip =\n  Sequence.prototype.tail =\n  Sequence.prototype.drop = function drop(count) {\n    return this.rest(count);\n  };\n\n  /**\n   * @constructor\n   */\n  function DropSequence(parent, count) {\n    this.parent = parent;\n    this.count  = typeof count === \"number\" ? count : 1;\n  }\n\n  DropSequence.prototype = Object.create(Sequence.prototype);\n\n  DropSequence.prototype.each = function each(fn) {\n    var count   = this.count,\n        dropped = 0,\n        i       = 0;\n\n    return this.parent.each(function(e) {\n      if (dropped++ < count) { return; }\n      return fn(e, i++);\n    });\n  };\n\n  /**\n   * Creates a new sequence comprising the elements from this sequence *after*\n   * those that satisfy some predicate. The sequence starts with the first\n   * element that does not match the predicate.\n   *\n   * @public\n   * @aka skipWhile\n   * @param {Function} predicate\n   * @returns {Sequence} The new sequence\n   */\n  Sequence.prototype.dropWhile = function dropWhile(predicate) {\n    return new DropWhileSequence(this, predicate);\n  };\n\n  Sequence.prototype.skipWhile = function skipWhile(predicate) {\n    return this.dropWhile(predicate);\n  };\n\n  /**\n   * @constructor\n   */\n  function DropWhileSequence(parent, predicate) {\n    this.parent    = parent;\n    this.predicate = predicate;\n  }\n\n  DropWhileSequence.prototype = Object.create(Sequence.prototype);\n\n  DropWhileSequence.prototype.each = function each(fn) {\n    var predicate = this.predicate,\n        done      = false;\n\n    return this.parent.each(function(e) {\n      if (!done) {\n        if (predicate(e)) {\n          return;\n        }\n\n        done = true;\n      }\n\n      return fn(e);\n    });\n  };\n\n  /**\n   * Creates a new sequence with the same elements as this one, but ordered\n   * using the specified comparison function.\n   *\n   * This has essentially the same behavior as calling\n   * [`Array#sort`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort),\n   * but obviously instead of modifying the collection it returns a new\n   * {@link Sequence} object.\n   *\n   * @public\n   * @param {Function=} sortFn The function used to compare elements in the\n   *     sequence. The function will be passed two elements and should return:\n   *     - 1 if the first is greater\n   *     - -1 if the second is greater\n   *     - 0 if the two values are the same\n   * @param {boolean} descending Whether or not the resulting sequence should be\n   *     in descending order (defaults to `false`).\n   * @returns {Sequence} The new sequence.\n   *\n   * @examples\n   * Lazy([5, 10, 1]).sort()                // sequence: [1, 5, 10]\n   * Lazy(['foo', 'bar']).sort()            // sequence: ['bar', 'foo']\n   * Lazy(['b', 'c', 'a']).sort(null, true) // sequence: ['c', 'b', 'a']\n   * Lazy([5, 10, 1]).sort(null, true)      // sequence: [10, 5, 1]\n   *\n   * // Sorting w/ custom comparison function\n   * Lazy(['a', 'ab', 'aa', 'ba', 'b', 'abc']).sort(function compare(x, y) {\n   *   if (x.length && (x.length !== y.length)) { return compare(x.length, y.length); }\n   *   if (x === y) { return 0; }\n   *   return x > y ? 1 : -1;\n   * });\n   * // => sequence: ['a', 'b', 'aa', 'ab', 'ba', 'abc']\n   */\n  Sequence.prototype.sort = function sort(sortFn, descending) {\n    sortFn || (sortFn = compare);\n    if (descending) { sortFn = reverseArguments(sortFn); }\n    return new SortedSequence(this, sortFn);\n  };\n\n  /**\n   * Creates a new sequence with the same elements as this one, but ordered by\n   * the results of the given function.\n   *\n   * You can pass:\n   *\n   * - a *string*, to sort by the named property\n   * - a function, to sort by the result of calling the function on each element\n   *\n   * @public\n   * @param {Function} sortFn The function to call on the elements in this\n   *     sequence, in order to sort them.\n   * @param {boolean} descending Whether or not the resulting sequence should be\n   *     in descending order (defaults to `false`).\n   * @returns {Sequence} The new sequence.\n   *\n   * @examples\n   * function population(country) {\n   *   return country.pop;\n   * }\n   *\n   * function area(country) {\n   *   return country.sqkm;\n   * }\n   *\n   * var countries = [\n   *   { name: \"USA\", pop: 320000000, sqkm: 9600000 },\n   *   { name: \"Brazil\", pop: 194000000, sqkm: 8500000 },\n   *   { name: \"Nigeria\", pop: 174000000, sqkm: 924000 },\n   *   { name: \"China\", pop: 1350000000, sqkm: 9700000 },\n   *   { name: \"Russia\", pop: 143000000, sqkm: 17000000 },\n   *   { name: \"Australia\", pop: 23000000, sqkm: 7700000 }\n   * ];\n   *\n   * Lazy(countries).sortBy(population).last(3).pluck('name') // sequence: [\"Brazil\", \"USA\", \"China\"]\n   * Lazy(countries).sortBy(area).last(3).pluck('name')       // sequence: [\"USA\", \"China\", \"Russia\"]\n   * Lazy(countries).sortBy(area, true).first(3).pluck('name') // sequence: [\"Russia\", \"China\", \"USA\"]\n   *\n   * @benchmarks\n   * var randoms = Lazy.generate(Math.random).take(100).toArray();\n   *\n   * Lazy(randoms).sortBy(Lazy.identity).each(Lazy.noop) // lazy\n   * _.each(_.sortBy(randoms, Lazy.identity), _.noop)    // lodash\n   */\n  Sequence.prototype.sortBy = function sortBy(sortFn, descending) {\n    sortFn = createComparator(sortFn);\n    if (descending) { sortFn = reverseArguments(sortFn); }\n    return new SortedSequence(this, sortFn);\n  };\n\n  /**\n   * @constructor\n   */\n  function SortedSequence(parent, sortFn) {\n    this.parent = parent;\n    this.sortFn = sortFn;\n  }\n\n  SortedSequence.prototype = Object.create(Sequence.prototype);\n\n  SortedSequence.prototype.each = function each(fn) {\n    var sortFn = this.sortFn,\n        result = this.parent.toArray();\n\n    result.sort(sortFn);\n\n    return forEach(result, fn);\n  };\n\n  /**\n   * @examples\n   * var items = [{ a: 4 }, { a: 3 }, { a: 5 }];\n   *\n   * Lazy(items).sortBy('a').reverse();\n   * // => sequence: [{ a: 5 }, { a: 4 }, { a: 3 }]\n   *\n   * Lazy(items).sortBy('a').reverse().reverse();\n   * // => sequence: [{ a: 3 }, { a: 4 }, { a: 5 }]\n   */\n  SortedSequence.prototype.reverse = function reverse() {\n    return new SortedSequence(this.parent, reverseArguments(this.sortFn));\n  };\n\n  /**\n   * Creates a new {@link ObjectLikeSequence} comprising the elements in this\n   * one, grouped together according to some key. The value associated with each\n   * key in the resulting object-like sequence is an array containing all of\n   * the elements in this sequence with that key.\n   *\n   * @public\n   * @param {Function|string} keyFn The function to call on the elements in this\n   *     sequence to obtain a key by which to group them, or a string representing\n   *     a parameter to read from all the elements in this sequence.\n   * @param {Function|string} valFn (Optional) The function to call on the elements\n   *     in this sequence to assign to the value for each instance to appear in the\n   *     group, or a string representing a parameter to read from all the elements\n   *     in this sequence.\n   * @returns {ObjectLikeSequence} The new sequence.\n   *\n   * @examples\n   * function modulo2(x) {\n   *   return x % 2;\n   * }\n   * function oddOrEven(x) {\n   *   return modulo2(x) ? 'odd' : 'even';\n   * }\n   * function square(x) {\n   *   return x*x;\n   * }\n   *\n   * var numbers = [1, 2, 3, 4, 5];\n   *\n   * Lazy(numbers).groupBy(oddOrEven)                     // sequence: { odd: [1, 3, 5], even: [2, 4] }\n   * Lazy(numbers).groupBy(oddOrEven).get(\"odd\")          // => [1, 3, 5]\n   * Lazy(numbers).groupBy(oddOrEven).get(\"foo\")          // => undefined\n   * Lazy(numbers).groupBy(oddOrEven, square).get(\"even\") // => [4, 16]\n   * Lazy(numbers).groupBy(modulo2).get(1)                // => [1, 3, 5]\n   *\n   * Lazy([\n   *   { name: 'toString' },\n   *   { name: 'toString' }\n   * ]).groupBy('name');\n   * // => sequence: {\n   *   'toString': [\n   *     { name: 'toString' },\n   *     { name: 'toString' }\n   *   ]\n   * }\n   */\n  Sequence.prototype.groupBy = function groupBy(keyFn, valFn) {\n    return new GroupedSequence(this, keyFn, valFn);\n  };\n\n  /**\n   * @constructor\n   */\n  function GroupedSequence(parent, keyFn, valFn) {\n    this.parent = parent;\n    this.keyFn  = keyFn;\n    this.valFn  = valFn;\n  }\n\n  // GroupedSequence must have its prototype set after ObjectLikeSequence has\n  // been fully initialized.\n\n  /**\n   * Creates a new {@link ObjectLikeSequence} comprising the elements in this\n   * one, indexed according to some key.\n   *\n   * @public\n   * @param {Function|string} keyFn The function to call on the elements in this\n   *     sequence to obtain a key by which to index them, or a string\n   *     representing a property to read from all the elements in this sequence.\n   * @param {Function|string} valFn (Optional) The function to call on the elements\n   *     in this sequence to assign to the value of the indexed object, or a string\n   *     representing a parameter to read from all the elements in this sequence.\n   * @returns {Sequence} The new sequence.\n   *\n   * @examples\n   * var people = [\n   *   { name: 'Bob', age: 25 },\n   *   { name: 'Fred', age: 34 }\n   * ];\n   *\n   * var bob  = people[0],\n   *     fred = people[1];\n   *\n   * Lazy(people).indexBy('name')        // sequence: { 'Bob': bob, 'Fred': fred }\n   * Lazy(people).indexBy('name', 'age') // sequence: { 'Bob': 25, 'Fred': 34 }\n   */\n  Sequence.prototype.indexBy = function(keyFn, valFn) {\n    return new IndexedSequence(this, keyFn, valFn);\n  };\n\n  /**\n   * @constructor\n   */\n  function IndexedSequence(parent, keyFn, valFn) {\n    this.parent = parent;\n    this.keyFn  = keyFn;\n    this.valFn  = valFn;\n  }\n\n  // IndexedSequence must have its prototype set after ObjectLikeSequence has\n  // been fully initialized.\n\n  /**\n   * Creates a new {@link ObjectLikeSequence} containing the unique keys of all\n   * the elements in this sequence, each paired with the number of elements\n   * in this sequence having that key.\n   *\n   * @public\n   * @param {Function|string} keyFn The function to call on the elements in this\n   *     sequence to obtain a key by which to count them, or a string representing\n   *     a parameter to read from all the elements in this sequence.\n   * @returns {Sequence} The new sequence.\n   *\n   * @examples\n   * function modulo2(x) {\n   *   return x % 2;\n   * }\n   * function oddOrEven(x) {\n   *   return modulo2(x) ? 'odd' : 'even';\n   * }\n   *\n   * var numbers = [1, 2, 3, 4, 5];\n   *\n   * Lazy(numbers).countBy(oddOrEven)            // sequence: { odd: 3, even: 2 }\n   * Lazy(numbers).countBy(oddOrEven).get(\"odd\") // => 3\n   * Lazy(numbers).countBy(oddOrEven).get(\"foo\") // => undefined\n   * Lazy(numbers).countBy(modulo2).get(1)       // => 3\n   */\n  Sequence.prototype.countBy = function countBy(keyFn) {\n    return new CountedSequence(this, keyFn);\n  };\n\n  /**\n   * @constructor\n   */\n  function CountedSequence(parent, keyFn) {\n    this.parent = parent;\n    this.keyFn  = keyFn;\n  }\n\n  // CountedSequence, like GroupedSequence, must have its prototype set after\n  // ObjectLikeSequence has been fully initialized.\n\n  /**\n   * Creates a new sequence with every unique element from this one appearing\n   * exactly once (i.e., with duplicates removed).\n   *\n   * @public\n   * @aka unique\n   * @param {Function=} keyFn An optional function to produce the key for each\n   *     object. This key is then tested for uniqueness as  opposed to the\n   *     object reference.\n   * @returns {Sequence} The new sequence.\n   *\n   * @examples\n   * Lazy([1, 2, 2, 3, 3, 3]).uniq() // sequence: [1, 2, 3]\n   * Lazy([{ name: 'mike' }, \n   * \t{ name: 'sarah' }, \n   * \t{ name: 'mike' }\n   * ]).uniq('name')\n   * // sequence: [{ name: 'mike' }, { name: 'sarah' }]\n   *\n   * @benchmarks\n   * function randomOf(array) {\n   *   return function() {\n   *     return array[Math.floor(Math.random() * array.length)];\n   *   };\n   * }\n   *\n   * var mostUnique = Lazy.generate(randomOf(_.range(100)), 100).toArray(),\n   *     someUnique = Lazy.generate(randomOf(_.range(50)), 100).toArray(),\n   *     mostDupes  = Lazy.generate(randomOf(_.range(5)), 100).toArray();\n   *\n   * Lazy(mostUnique).uniq().each(Lazy.noop) // lazy - mostly unique elements\n   * Lazy(someUnique).uniq().each(Lazy.noop) // lazy - some unique elements\n   * Lazy(mostDupes).uniq().each(Lazy.noop)  // lazy - mostly duplicate elements\n   * _.each(_.uniq(mostUnique), _.noop)      // lodash - mostly unique elements\n   * _.each(_.uniq(someUnique), _.noop)      // lodash - some unique elements\n   * _.each(_.uniq(mostDupes), _.noop)       // lodash - mostly duplicate elements\n   */\n  Sequence.prototype.uniq = function uniq(keyFn) {\n    return new UniqueSequence(this, keyFn);\n  };\n\n  Sequence.prototype.unique = function unique(keyFn) {\n    return this.uniq(keyFn);\n  };\n\n  /**\n   * @constructor\n   */\n  function UniqueSequence(parent, keyFn) {\n    this.parent = parent;\n    this.keyFn  = keyFn;\n  }\n\n  UniqueSequence.prototype = Object.create(Sequence.prototype);\n\n  UniqueSequence.prototype.each = function each(fn) {\n    var cache = new Set(),\n        keyFn = this.keyFn,\n        i     = 0;\n\n    if (keyFn) {\n      keyFn = createCallback(keyFn);\n      return this.parent.each(function(e) {\n        if (cache.add(keyFn(e))) {\n          return fn(e, i++);\n        }\n      });\n\n    } else {\n      return this.parent.each(function(e) {\n        if (cache.add(e)) {\n          return fn(e, i++);\n        }\n      });\n    }\n  };\n\n  /**\n   * Creates a new sequence by combining the elements from this sequence with\n   * corresponding elements from the specified array(s).\n   *\n   * @public\n   * @param {...Array} var_args One or more arrays of elements to combine with\n   *     those of this sequence.\n   * @returns {Sequence} The new sequence.\n   *\n   * @examples\n   * Lazy([1, 2]).zip([3, 4])     // sequence: [[1, 3], [2, 4]]\n   * Lazy([]).zip([0])            // sequence: [[undefined, 0]]\n   * Lazy([0]).zip([])            // sequence: [[0, undefined]]\n   * Lazy([]).zip([1, 2], [3, 4]) // sequence: [[undefined, 1, 3], [undefined, 2, 4]]\n   * Lazy([]).zip([1], [2, 3])    // sequence: [[undefined, 1, 2], [undefined, undefined, 3]]\n   * Lazy([1, 2]).zip([3], [4])   // sequence: [[1, 3, 4], [2, undefined, undefined]]\n   *\n   * @benchmarks\n   * var smArrL = Lazy.range(10).toArray(),\n   *     smArrR = Lazy.range(10, 20).toArray(),\n   *     lgArrL = Lazy.range(100).toArray(),\n   *     lgArrR = Lazy.range(100, 200).toArray();\n   *\n   * Lazy(smArrL).zip(smArrR).each(Lazy.noop) // lazy - zipping 10-element arrays\n   * Lazy(lgArrL).zip(lgArrR).each(Lazy.noop) // lazy - zipping 100-element arrays\n   * _.each(_.zip(smArrL, smArrR), _.noop)    // lodash - zipping 10-element arrays\n   * _.each(_.zip(lgArrL, lgArrR), _.noop)    // lodash - zipping 100-element arrays\n   */\n  Sequence.prototype.zip = function zip(var_args) {\n    if (arguments.length === 1) {\n      return new SimpleZippedSequence(this, (/** @type {Array} */ var_args));\n    } else {\n      return new ZippedSequence(this, arraySlice.call(arguments, 0));\n    }\n  };\n\n  /**\n   * @constructor\n   */\n  function ZippedSequence(parent, arrays) {\n    this.parent = parent;\n    this.arrays = arrays;\n  }\n\n  ZippedSequence.prototype = Object.create(Sequence.prototype);\n\n  ZippedSequence.prototype.each = function each(fn) {\n    var arrays = this.arrays,\n        i = 0;\n\n    var iteratedLeft = this.parent.each(function(e) {\n      var group = [e];\n      for (var j = 0; j < arrays.length; ++j) {\n        group.push(arrays[j][i]);\n      }\n      return fn(group, i++);\n    });\n\n    if (!iteratedLeft) {\n      return false;\n    }\n\n    var group,\n        keepGoing = true;\n\n    while (keepGoing) {\n      keepGoing = false;\n      group = [undefined];\n      for (var j = 0; j < arrays.length; ++j) {\n        group.push(arrays[j][i]);\n\n        // Check if *any* of the arrays have more elements to iterate.\n        if (arrays[j].length > i) {\n          keepGoing = true;\n        }\n      }\n\n      if (keepGoing && (fn(group, i++) === false)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  /**\n   * Creates a new sequence with the same elements as this one, in a randomized\n   * order.\n   *\n   * @public\n   * @returns {Sequence} The new sequence.\n   *\n   * @examples\n   * Lazy([1, 2, 3, 4, 5]).shuffle().value() // =~ [1, 2, 3, 4, 5]\n   * Lazy([]).shuffle().value()              // => []\n   * Lazy([1]).shuffle().each(Lazy.noop)     // => true\n   * Lazy([]).shuffle().each(Lazy.noop)      // => true\n   */\n  Sequence.prototype.shuffle = function shuffle() {\n    return new ShuffledSequence(this);\n  };\n\n  /**\n   * @constructor\n   */\n  function ShuffledSequence(parent) {\n    this.parent = parent;\n  }\n\n  ShuffledSequence.prototype = Object.create(Sequence.prototype);\n\n  ShuffledSequence.prototype.each = function each(fn) {\n    var shuffled = this.parent.toArray(),\n        floor = Math.floor,\n        random = Math.random,\n        j = 0;\n\n    for (var i = shuffled.length - 1; i > 0; --i) {\n      swap(shuffled, i, floor(random() * (i + 1)));\n      if (fn(shuffled[i], j++) === false) {\n        return false;\n      }\n    }\n\n    if (shuffled.length) {\n      fn(shuffled[0], j);\n    }\n\n    return true;\n  };\n\n  /**\n   * Creates a new sequence with every element from this sequence, and with arrays\n   * exploded so that a sequence of arrays (of arrays) becomes a flat sequence of\n   * values.\n   *\n   * @public\n   * @param {boolean} shallow Option to flatten only one level deep (default is\n   *     recursive).\n   * @returns {Sequence} The new sequence.\n   *\n   * @examples\n   * Lazy([1, [2, 3], [4, [5]]]).flatten()     // sequence: [1, 2, 3, 4, 5]\n   * Lazy([1, [2, 3], [4, [5]]]).flatten(true) // sequence: [1, 2, 3, 4, [5]]\n   * Lazy([1, Lazy([2, 3])]).flatten()         // sequence: [1, 2, 3]\n   */\n  Sequence.prototype.flatten = function flatten(shallow) {\n    return new FlattenedSequence(this, shallow);\n  };\n\n  /**\n   * @constructor\n   */\n  function FlattenedSequence(parent, shallow) {\n    this.parent = parent;\n    this.each = shallow ? this.eachShallow : this.eachRecursive;\n  }\n\n  FlattenedSequence.prototype = Object.create(Sequence.prototype);\n\n  FlattenedSequence.prototype.eachShallow = function(fn) {\n    var index = 0;\n\n    return this.parent.each(function(e) {\n      if (isArray(e)) {\n        return forEach(e, function(val) {\n          return fn(val, index++);\n        });\n      }\n\n      if (e instanceof Sequence) {\n        return e.each(function(val) {\n          return fn(val, index++);\n        });\n      }\n\n      return fn(e, index++);\n    });\n  };\n\n  FlattenedSequence.prototype.eachRecursive = function each(fn) {\n    var index = 0;\n\n    return this.parent.each(function recurseVisitor(e) {\n      if (isArray(e)) {\n        return forEach(e, recurseVisitor);\n      }\n\n      if (e instanceof Sequence) {\n        return e.each(recurseVisitor);\n      }\n\n      return fn(e, index++);\n    });\n  };\n\n  /**\n   * Creates a new sequence with the same elements as this one, except for all\n   * falsy values (`false`, `0`, `\"\"`, `null`, and `undefined`).\n   *\n   * @public\n   * @returns {Sequence} The new sequence.\n   *\n   * @examples\n   * Lazy([\"foo\", null, \"bar\", undefined]).compact() // sequence: [\"foo\", \"bar\"]\n   */\n  Sequence.prototype.compact = function compact() {\n    return this.filter(function(e) { return !!e; });\n  };\n\n  /**\n   * Creates a new sequence with all the elements of this sequence that are not\n   * also among the specified arguments.\n   *\n   * @public\n   * @aka difference\n   * @param {...*} var_args The values, or array(s) of values, to be excluded from the\n   *     resulting sequence.\n   * @returns {Sequence} The new sequence.\n   *\n   * @examples\n   * Lazy([1, 2, 3, 4, 5]).without(2, 3)   // sequence: [1, 4, 5]\n   * Lazy([1, 2, 3, 4, 5]).without([4, 5]) // sequence: [1, 2, 3]\n   */\n  Sequence.prototype.without = function without(var_args) {\n    return new WithoutSequence(this, arraySlice.call(arguments, 0));\n  };\n\n  Sequence.prototype.difference = function difference(var_args) {\n    return this.without.apply(this, arguments);\n  };\n\n  /**\n   * @constructor\n   */\n  function WithoutSequence(parent, values) {\n    this.parent = parent;\n    this.values = values;\n  }\n\n  WithoutSequence.prototype = Object.create(Sequence.prototype);\n\n  WithoutSequence.prototype.each = function each(fn) {\n    var set = createSet(this.values),\n        i = 0;\n    return this.parent.each(function(e) {\n      if (!set.contains(e)) {\n        return fn(e, i++);\n      }\n    });\n  };\n\n  /**\n   * Creates a new sequence with all the unique elements either in this sequence\n   * or among the specified arguments.\n   *\n   * @public\n   * @param {...*} var_args The values, or array(s) of values, to be additionally\n   *     included in the resulting sequence.\n   * @returns {Sequence} The new sequence.\n   *\n   * @examples\n   * Lazy([\"foo\", \"bar\"]).union([])             // sequence: [\"foo\", \"bar\"]\n   * Lazy([\"foo\", \"bar\"]).union([\"bar\", \"baz\"]) // sequence: [\"foo\", \"bar\", \"baz\"]\n   */\n  Sequence.prototype.union = function union(var_args) {\n    return this.concat(var_args).uniq();\n  };\n\n  /**\n   * Creates a new sequence with all the elements of this sequence that also\n   * appear among the specified arguments.\n   *\n   * @public\n   * @param {...*} var_args The values, or array(s) of values, in which elements\n   *     from this sequence must also be included to end up in the resulting sequence.\n   * @returns {Sequence} The new sequence.\n   *\n   * @examples\n   * Lazy([\"foo\", \"bar\"]).intersection([])             // sequence: []\n   * Lazy([\"foo\", \"bar\"]).intersection([\"bar\", \"baz\"]) // sequence: [\"bar\"]\n   * Lazy([\"a\", \"a\"]).intersection([\"a\"])              // sequence: [\"a\"]\n   * Lazy([\"a\"]).intersection([\"a\", \"a\"])              // sequence: [\"a\"]\n   * Lazy([\"a\", \"a\"]).intersection([\"a\", \"a\"])         // sequence: [\"a\"]\n   * Lazy([\"a\", \"a\"]).intersection([\"a\"], [\"a\"])       // sequence: [\"a\"]\n   */\n  Sequence.prototype.intersection = function intersection(var_args) {\n    if (arguments.length === 1 && isArray(arguments[0])) {\n      return new SimpleIntersectionSequence(this, (/** @type {Array} */ var_args));\n    } else {\n      return new IntersectionSequence(this, arraySlice.call(arguments, 0));\n    }\n  };\n\n  /**\n   * @constructor\n   */\n  function IntersectionSequence(parent, arrays) {\n    this.parent = parent;\n    this.arrays = arrays;\n  }\n\n  IntersectionSequence.prototype = Object.create(Sequence.prototype);\n\n  IntersectionSequence.prototype.each = function each(fn) {\n    var sets = Lazy(this.arrays).map(function(values) {\n      return new UniqueMemoizer(Lazy(values).getIterator());\n    });\n\n    var setIterator = new UniqueMemoizer(sets.getIterator()),\n        i = 0;\n\n    return this.parent.uniq().each(function(e) {\n      var includedInAll = true;\n      setIterator.each(function(set) {\n        if (!set.contains(e)) {\n          includedInAll = false;\n          return false;\n        }\n      });\n\n      if (includedInAll) {\n        return fn(e, i++);\n      }\n    });\n  };\n\n  /**\n   * @constructor\n   */\n  function Memoizer(memo, iterator) {\n    this.iterator     = iterator;\n    this.memo         = memo;\n    this.currentIndex = 0;\n    this.currentValue = undefined;\n  }\n\n  Memoizer.prototype.current = function current() {\n    return this.currentValue;\n  };\n\n  Memoizer.prototype.moveNext = function moveNext() {\n    var iterator = this.iterator,\n        memo = this.memo,\n        current;\n\n    if (this.currentIndex < memo.length) {\n      this.currentValue = memo[this.currentIndex++];\n      return true;\n    }\n\n    if (iterator.moveNext()) {\n      this.currentValue = memo[this.currentIndex++] = iterator.current();\n      return true;\n    }\n\n    return false;\n  };\n\n  /**\n   * @constructor\n   */\n  function UniqueMemoizer(iterator) {\n    this.iterator     = iterator;\n    this.set          = new Set();\n    this.memo         = [];\n    this.currentValue = undefined;\n  }\n\n  UniqueMemoizer.prototype.current = function current() {\n    return this.currentValue;\n  };\n\n  UniqueMemoizer.prototype.moveNext = function moveNext() {\n    var iterator = this.iterator,\n        set = this.set,\n        memo = this.memo,\n        current;\n\n    while (iterator.moveNext()) {\n      current = iterator.current();\n      if (set.add(current)) {\n        memo.push(current);\n        this.currentValue = current;\n        return true;\n      }\n    }\n    return false;\n  };\n\n  UniqueMemoizer.prototype.each = function each(fn) {\n    var memo = this.memo,\n        length = memo.length,\n        i = -1;\n\n    while (++i < length) {\n      if (fn(memo[i], i) === false) {\n        return false;\n      }\n    }\n\n    while (this.moveNext()) {\n      if (fn(this.currentValue, i++) === false) {\n        break;\n      }\n    }\n  };\n\n  UniqueMemoizer.prototype.contains = function contains(e) {\n    if (this.set.contains(e)) {\n      return true;\n    }\n\n    while (this.moveNext()) {\n      if (this.currentValue === e) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  /**\n   * Checks whether every element in this sequence satisfies a given predicate.\n   *\n   * @public\n   * @aka all\n   * @param {Function} predicate A function to call on (potentially) every element\n   *     in this sequence.\n   * @returns {boolean} True if `predicate` returns true for every element in the\n   *     sequence (or the sequence is empty). False if `predicate` returns false\n   *     for at least one element.\n   *\n   * @examples\n   * var numbers = [1, 2, 3, 4, 5];\n   *\n   * var objects = [{ foo: true }, { foo: false, bar: true }];\n   *\n   * Lazy(numbers).every(isEven)     // => false\n   * Lazy(numbers).every(isPositive) // => true\n   * Lazy(objects).all('foo')        // => false\n   * Lazy(objects).all('bar')        // => false\n   */\n  Sequence.prototype.every = function every(predicate) {\n    predicate = createCallback(predicate);\n\n    return this.each(function(e, i) {\n      return !!predicate(e, i);\n    });\n  };\n\n  Sequence.prototype.all = function all(predicate) {\n    return this.every(predicate);\n  };\n\n  /**\n   * Checks whether at least one element in this sequence satisfies a given\n   * predicate (or, if no predicate is specified, whether the sequence contains at\n   * least one element).\n   *\n   * @public\n   * @aka any\n   * @param {Function=} predicate A function to call on (potentially) every element\n   *     in this sequence.\n   * @returns {boolean} True if `predicate` returns true for at least one element\n   *     in the sequence. False if `predicate` returns false for every element (or\n   *     the sequence is empty).\n   *\n   * @examples\n   * var numbers = [1, 2, 3, 4, 5];\n   *\n   * Lazy(numbers).some()           // => true\n   * Lazy(numbers).some(isEven)     // => true\n   * Lazy(numbers).some(isNegative) // => false\n   * Lazy([]).some()                // => false\n   */\n  Sequence.prototype.some = function some(predicate) {\n    predicate = createCallback(predicate, true);\n\n    var success = false;\n    this.each(function(e) {\n      if (predicate(e)) {\n        success = true;\n        return false;\n      }\n    });\n    return success;\n  };\n\n  Sequence.prototype.any = function any(predicate) {\n    return this.some(predicate);\n  };\n\n  /**\n   * Checks whether NO elements in this sequence satisfy the given predicate\n   * (the opposite of {@link Sequence#all}, basically).\n   *\n   * @public\n   * @param {Function=} predicate A function to call on (potentially) every element\n   *     in this sequence.\n   * @returns {boolean} True if `predicate` does not return true for any element\n   *     in the sequence. False if `predicate` returns true for at least one\n   *     element.\n   *\n   * @examples\n   * var numbers = [1, 2, 3, 4, 5];\n   *\n   * Lazy(numbers).none()           // => false\n   * Lazy(numbers).none(isEven)     // => false\n   * Lazy(numbers).none(isNegative) // => true\n   * Lazy([]).none(isEven)          // => true\n   * Lazy([]).none(isNegative)      // => true\n   * Lazy([]).none()                // => true\n   */\n  Sequence.prototype.none = function none(predicate) {\n    return !this.any(predicate);\n  };\n\n  /**\n   * Checks whether the sequence has no elements.\n   *\n   * @public\n   * @returns {boolean} True if the sequence is empty, false if it contains at\n   *     least one element.\n   *\n   * @examples\n   * Lazy([]).isEmpty()        // => true\n   * Lazy([1, 2, 3]).isEmpty() // => false\n   */\n  Sequence.prototype.isEmpty = function isEmpty() {\n    return !this.any();\n  };\n\n  /**\n   * Performs (at worst) a linear search from the head of this sequence,\n   * returning the first index at which the specified value is found.\n   *\n   * @public\n   * @param {*} value The element to search for in the sequence.\n   * @param {Function=} equalityFn An optional equality function, which should\n   *     take two arguments and return true or false to indicate whether those\n   *     values are considered equal.\n   * @returns {number} The index within this sequence where the given value is\n   *     located, or -1 if the sequence doesn't contain the value.\n   *\n   * @examples\n   * function reciprocal(x) { return 1 / x; }\n   *\n   * Lazy([\"foo\", \"bar\", \"baz\"]).indexOf(\"bar\")   // => 1\n   * Lazy([1, 2, 3]).indexOf(4)                   // => -1\n   * Lazy([1, 2, 3]).map(reciprocal).indexOf(0.5) // => 1\n   */\n  Sequence.prototype.indexOf = function indexOf(value, equalityFn) {\n    var eq = equalityFn || Lazy.equality,\n        foundIndex = -1;\n\n    this.each(function(e, i) {\n      if (eq(e, value)) {\n        foundIndex = i;\n        return false;\n      }\n    });\n    return foundIndex;\n  };\n\n  /**\n   * Performs (at worst) a linear search from the tail of this sequence,\n   * returning the last index at which the specified value is found.\n   *\n   * @public\n   * @param {*} value The element to search for in the sequence.\n   * @returns {number} The last index within this sequence where the given value\n   *     is located, or -1 if the sequence doesn't contain the value.\n   *\n   * @examples\n   * Lazy([\"a\", \"b\", \"c\", \"b\", \"a\"]).lastIndexOf(\"b\")    // => 3\n   * Lazy([1, 2, 3]).lastIndexOf(0)                      // => -1\n   * Lazy([2, 2, 1, 2, 4]).filter(isEven).lastIndexOf(2) // 2\n   */\n  Sequence.prototype.lastIndexOf = function lastIndexOf(value, equalityFn) {\n    var reversed = this.getIndex().reverse(),\n        index    = reversed.indexOf(value, equalityFn);\n    if (index !== -1) {\n      index = reversed.length() - index - 1;\n    }\n    return index;\n  };\n\n  /**\n   * Performs a binary search of this sequence, returning the lowest index where\n   * the given value is either found, or where it belongs (if it is not already\n   * in the sequence).\n   *\n   * This method assumes the sequence is in sorted order and will fail otherwise.\n   *\n   * @public\n   * @param {*} value The element to search for in the sequence.\n   * @returns {number} An index within this sequence where the given value is\n   *     located, or where it belongs in sorted order.\n   *\n   * @examples\n   * Lazy([1, 3, 6, 9]).sortedIndex(3)                    // => 1\n   * Lazy([1, 3, 6, 9]).sortedIndex(7)                    // => 3\n   * Lazy([5, 10, 15, 20]).filter(isEven).sortedIndex(10) // => 0\n   * Lazy([5, 10, 15, 20]).filter(isEven).sortedIndex(12) // => 1\n   */\n  Sequence.prototype.sortedIndex = function sortedIndex(value) {\n    var indexed = this.getIndex(),\n        lower   = 0,\n        upper   = indexed.length(),\n        i;\n\n    while (lower < upper) {\n      i = (lower + upper) >>> 1;\n      if (compare(indexed.get(i), value) === -1) {\n        lower = i + 1;\n      } else {\n        upper = i;\n      }\n    }\n    return lower;\n  };\n\n  /**\n   * Checks whether the given value is in this sequence.\n   *\n   * @public\n   * @param {*} value The element to search for in the sequence.\n   * @param {Function=} equalityFn An optional equality function, which should\n   *     take two arguments and return true or false to indicate whether those\n   *     values are considered equal.\n   * @returns {boolean} True if the sequence contains the value, false if not.\n   *\n   * @examples\n   * var numbers = [5, 10, 15, 20];\n   *\n   * Lazy(numbers).contains(15) // => true\n   * Lazy(numbers).contains(13) // => false\n   */\n  Sequence.prototype.contains = function contains(value, equalityFn) {\n    return this.indexOf(value, equalityFn) !== -1;\n  };\n\n  /**\n   * Aggregates a sequence into a single value according to some accumulator\n   * function.\n   *\n   * For an asynchronous sequence, instead of immediately returning a result\n   * (which it can't, obviously), this method returns an {@link AsyncHandle}\n   * whose `onComplete` method can be called to supply a callback to handle the\n   * final result once iteration has completed.\n   *\n   * @public\n   * @aka inject, foldl\n   * @param {Function} aggregator The function through which to pass every element\n   *     in the sequence. For every element, the function will be passed the total\n   *     aggregated result thus far and the element itself, and should return a\n   *     new aggregated result.\n   * @param {*=} memo The starting value to use for the aggregated result\n   *     (defaults to the first element in the sequence).\n   * @returns {*} The result of the aggregation, or, for asynchronous sequences,\n   *     an {@link AsyncHandle} whose `onComplete` method accepts a callback to\n   *     handle the final result.\n   *\n   * @examples\n   * function multiply(x, y) { return x * y; }\n   *\n   * var numbers = [1, 2, 3, 4];\n   *\n   * Lazy(numbers).reduce(multiply)    // => 24\n   * Lazy(numbers).reduce(multiply, 5) // => 120\n   */\n  Sequence.prototype.reduce = function reduce(aggregator, memo) {\n    if (arguments.length < 2) {\n      return this.tail().reduce(aggregator, this.head());\n    }\n\n    var eachResult = this.each(function(e, i) {\n      memo = aggregator(memo, e, i);\n    });\n\n    // TODO: Think of a way more efficient solution to this problem.\n    if (eachResult instanceof AsyncHandle) {\n      return eachResult.then(function() { return memo; });\n    }\n\n    return memo;\n  };\n\n  Sequence.prototype.inject =\n  Sequence.prototype.foldl = function foldl(aggregator, memo) {\n    return this.reduce(aggregator, memo);\n  };\n\n  /**\n   * Aggregates a sequence, from the tail, into a single value according to some\n   * accumulator function.\n   *\n   * @public\n   * @aka foldr\n   * @param {Function} aggregator The function through which to pass every element\n   *     in the sequence. For every element, the function will be passed the total\n   *     aggregated result thus far and the element itself, and should return a\n   *     new aggregated result.\n   * @param {*} memo The starting value to use for the aggregated result.\n   * @returns {*} The result of the aggregation.\n   *\n   * @examples\n   * function append(s1, s2) {\n   *   return s1 + s2;\n   * }\n   *\n   * function isVowel(str) {\n   *   return \"aeiou\".indexOf(str) !== -1;\n   * }\n   *\n   * Lazy(\"abcde\").reduceRight(append)                 // => \"edcba\"\n   * Lazy(\"abcde\").filter(isVowel).reduceRight(append) // => \"ea\"\n   */\n  Sequence.prototype.reduceRight = function reduceRight(aggregator, memo) {\n    if (arguments.length < 2) {\n      return this.initial(1).reduceRight(aggregator, this.last());\n    }\n\n    // This bothers me... but frankly, calling reverse().reduce() is potentially\n    // going to eagerly evaluate the sequence anyway; so it's really not an issue.\n    var indexed = this.getIndex(),\n        i = indexed.length() - 1;\n    return indexed.reverse().reduce(function(m, e) {\n      return aggregator(m, e, i--);\n    }, memo);\n  };\n\n  Sequence.prototype.foldr = function foldr(aggregator, memo) {\n    return this.reduceRight(aggregator, memo);\n  };\n\n  /**\n   * Groups this sequence into consecutive (overlapping) segments of a specified\n   * length. If the underlying sequence has fewer elements than the specified\n   * length, then this sequence will be empty.\n   *\n   * @public\n   * @param {number} length The length of each consecutive segment.\n   * @returns {Sequence} The resulting sequence of consecutive segments.\n   *\n   * @examples\n   * function sum(vals) { return Lazy(vals).sum(); }\n   * var pairs = Lazy([1, 2, 3, 4]).consecutive(2);\n   *\n   * // Make sure consecutive sequences are reusable.\n   * pairs.map(sum) // => sequence: [3, 5, 7]\n   * pairs.map(sum) // => sequence: [3, 5, 7]\n   *\n   * Lazy([]).consecutive(2)        // => sequence: []\n   * Lazy([1]).consecutive(2)       // => sequence: []\n   * Lazy([1, 2]).consecutive(2)    // => sequence: [[1, 2]]\n   * Lazy([1, 2, 3]).consecutive(2) // => sequence: [[1, 2], [2, 3]]\n   * Lazy([1, 2, 3]).consecutive(0) // => sequence: [[]]\n   * Lazy([1, 2, 3]).consecutive(1) // => sequence: [[1], [2], [3]]\n   */\n  Sequence.prototype.consecutive = function consecutive(count) {\n    return new ConsecutiveSequence(this, count);\n  };\n\n  function ConsecutiveSequence(parent, count) {\n    this.parent = parent;\n    this.count = count;\n  }\n\n  ConsecutiveSequence.prototype = Object.create(Sequence.prototype);\n\n  ConsecutiveSequence.prototype.each = function each(fn) {\n    var count = this.count,\n        queue = new Queue(count);\n    var segments = this.parent.map(function(element) {\n      if (queue.add(element).count === count) {\n        return queue.toArray();\n      }\n    });\n    return segments.compact().each(fn);\n  };\n\n  /**\n   * Breaks this sequence into chunks (arrays) of a specified length.\n   *\n   * @public\n   * @param {number} size The size of each chunk.\n   * @returns {Sequence} The resulting sequence of chunks.\n   *\n   * @examples\n   * Lazy([]).chunk(2)        // sequence: []\n   * Lazy([1, 2, 3]).chunk(2) // sequence: [[1, 2], [3]]\n   * Lazy([1, 2, 3]).chunk(1) // sequence: [[1], [2], [3]]\n   * Lazy([1, 2, 3]).chunk(4) // sequence: [[1, 2, 3]]\n   * Lazy([1, 2, 3]).chunk(0) // throws\n   */\n  Sequence.prototype.chunk = function chunk(size) {\n    if (size < 1) {\n      throw new Error(\"You must specify a positive chunk size.\");\n    }\n\n    return new ChunkedSequence(this, size);\n  };\n\n  /**\n   * @constructor\n   */\n  function ChunkedSequence(parent, size) {\n    this.parent    = parent;\n    this.chunkSize = size;\n  }\n\n  ChunkedSequence.prototype = Object.create(Sequence.prototype);\n\n  ChunkedSequence.prototype.getIterator = function getIterator() {\n    return new ChunkedIterator(this.parent, this.chunkSize);\n  };\n\n  /**\n   * @constructor\n   */\n  function ChunkedIterator(sequence, size) {\n    this.iterator = sequence.getIterator();\n    this.size     = size;\n  }\n\n  ChunkedIterator.prototype.current = function current() {\n    return this.currentChunk;\n  };\n\n  ChunkedIterator.prototype.moveNext = function moveNext() {\n    var iterator  = this.iterator,\n        chunkSize = this.size,\n        chunk     = [];\n\n    while (chunk.length < chunkSize && iterator.moveNext()) {\n      chunk.push(iterator.current());\n    }\n\n    if (chunk.length === 0) {\n      return false;\n    }\n\n    this.currentChunk = chunk;\n    return true;\n  };\n\n  /**\n   * Passes each element in the sequence to the specified callback during\n   * iteration. This is like {@link Sequence#each}, except that it can be\n   * inserted anywhere in the middle of a chain of methods to \"intercept\" the\n   * values in the sequence at that point.\n   *\n   * @public\n   * @param {Function} callback A function to call on every element in the\n   *     sequence during iteration. The return value of this function does not\n   *     matter.\n   * @returns {Sequence} A sequence comprising the same elements as this one.\n   *\n   * @examples\n   * Lazy([1, 2, 3]).tap(fn).each(Lazy.noop); // calls fn 3 times\n   */\n  Sequence.prototype.tap = function tap(callback) {\n    return new TappedSequence(this, callback);\n  };\n\n  /**\n   * @constructor\n   */\n  function TappedSequence(parent, callback) {\n    this.parent = parent;\n    this.callback = callback;\n  }\n\n  TappedSequence.prototype = Object.create(Sequence.prototype);\n\n  TappedSequence.prototype.each = function each(fn) {\n    var callback = this.callback;\n    return this.parent.each(function(e, i) {\n      callback(e, i);\n      return fn(e, i);\n    });\n  };\n\n  /**\n   * Seaches for the first element in the sequence satisfying a given predicate.\n   *\n   * @public\n   * @aka detect\n   * @param {Function} predicate A function to call on (potentially) every element\n   *     in the sequence.\n   * @returns {*} The first element in the sequence for which `predicate` returns\n   *     `true`, or `undefined` if no such element is found.\n   *\n   * @examples\n   * function divisibleBy3(x) {\n   *   return x % 3 === 0;\n   * }\n   *\n   * var numbers = [5, 6, 7, 8, 9, 10];\n   *\n   * Lazy(numbers).find(divisibleBy3) // => 6\n   * Lazy(numbers).find(isNegative)   // => undefined\n   */\n  Sequence.prototype.find = function find(predicate) {\n    return this.filter(predicate).first();\n  };\n\n  Sequence.prototype.detect = function detect(predicate) {\n    return this.find(predicate);\n  };\n\n  /**\n   * Gets the minimum value in the sequence.\n   *\n   * @public\n   * @param {Function=} valueFn The function by which the value for comparison is\n   *     calculated for each element in the sequence.\n   * @returns {*} The element with the lowest value in the sequence, or\n   *     undefined` if the sequence is empty.\n   *\n   * @examples\n   * function negate(x) { return x * -1; }\n   *\n   * Lazy([]).min()                       // => undefined\n   * Lazy([1]).min()                      // => 1\n   * Lazy([1, 2]).min()                   // => 1\n   * Lazy([2, 1]).min()                   // => 1\n   * Lazy([6, 18, 2, 49, 34]).min()       // => 2\n   * Lazy([6, 18, 2, 49, 34]).min(negate) // => 49\n   * Lazy(['b', 'a', 'c']).min()          // => 'a'\n   */\n  Sequence.prototype.min = function min(valueFn) {\n    if (typeof valueFn !== \"undefined\") {\n      return this.minBy(valueFn);\n    }\n\n    return this.reduce(function(prev, current, i) {\n      if (typeof prev === \"undefined\") {\n        return current;\n      }\n      return current < prev ? current : prev;\n    });\n  };\n\n  Sequence.prototype.minBy = function minBy(valueFn) {\n    valueFn = createCallback(valueFn);\n    return this.reduce(function(x, y) { return valueFn(y) < valueFn(x) ? y : x; });\n  };\n\n  /**\n   * Gets the maximum value in the sequence.\n   *\n   * @public\n   * @param {Function=} valueFn The function by which the value for comparison is\n   *     calculated for each element in the sequence.\n   * @returns {*} The element with the highest value in the sequence, or\n   *     undefined if the sequence is empty.\n   *\n   * @examples\n   * function reverseDigits(x) {\n   *   return Number(String(x).split('').reverse().join(''));\n   * }\n   *\n   * Lazy([]).max()                              // => undefined\n   * Lazy([1]).max()                             // => 1\n   * Lazy([1, 2]).max()                          // => 2\n   * Lazy([2, 1]).max()                          // => 2\n   * Lazy([6, 18, 2, 48, 29]).max()              // => 48\n   * Lazy([6, 18, 2, 48, 29]).max(reverseDigits) // => 29\n   * Lazy(['b', 'c', 'a']).max()                 // => 'c'\n   */\n  Sequence.prototype.max = function max(valueFn) {\n    if (typeof valueFn !== \"undefined\") {\n      return this.maxBy(valueFn);\n    }\n\n    return this.reduce(function(prev, current, i) {\n      if (typeof prev === \"undefined\") {\n        return current;\n      }\n      return current > prev ? current : prev;\n    });\n  };\n\n  Sequence.prototype.maxBy = function maxBy(valueFn) {\n    valueFn = createCallback(valueFn);\n    return this.reduce(function(x, y) { return valueFn(y) > valueFn(x) ? y : x; });\n  };\n\n  /**\n   * Gets the sum of the numeric values in the sequence.\n   *\n   * @public\n   * @param {Function=} valueFn The function used to select the numeric values\n   *     that will be summed up.\n   * @returns {*} The sum.\n   *\n   * @examples\n   * Lazy([]).sum()                     // => 0\n   * Lazy([1, 2, 3, 4]).sum()           // => 10\n   * Lazy([1.2, 3.4]).sum(Math.floor)   // => 4\n   * Lazy(['foo', 'bar']).sum('length') // => 6\n   */\n  Sequence.prototype.sum = function sum(valueFn) {\n    if (typeof valueFn !== \"undefined\") {\n      return this.sumBy(valueFn);\n    }\n\n    return this.reduce(function(x, y) { return x + y; }, 0);\n  };\n\n  Sequence.prototype.sumBy = function sumBy(valueFn) {\n    valueFn = createCallback(valueFn);\n    return this.reduce(function(x, y) { return x + valueFn(y); }, 0);\n  };\n\n  /**\n   * Creates a string from joining together all of the elements in this sequence,\n   * separated by the given delimiter.\n   *\n   * @public\n   * @aka toString\n   * @param {string=} delimiter The separator to insert between every element from\n   *     this sequence in the resulting string (defaults to `\",\"`).\n   * @returns {string} The delimited string.\n   *\n   * @examples\n   * function toParam(v, k) {\n   *   return k + '=' + v;\n   * }\n   *\n   * Lazy([6, 29, 1984]).join(\"/\")  // => \"6/29/1984\"\n   * Lazy([\"a\", \"b\", \"c\"]).join()   // => \"a,b,c\"\n   * Lazy([\"a\", \"b\", \"c\"]).join(\"\") // => \"abc\"\n   * Lazy([1, 2, 3]).join()         // => \"1,2,3\"\n   * Lazy([1, 2, 3]).join(\"\")       // => \"123\"\n   * Lazy([\"\", \"\", \"\"]).join(\",\")   // => \",,\"\n   * Lazy([1, 2]).join(0)           // => \"102\"\n   * Lazy([\"cons\", \"d\"]).join(true) // => \"construed\"\n   * Lazy({foo: 1, bar: 2}).values().join()        // \"1,2\"\n   * Lazy({foo: 1, bar: 2}).keys().join()          // \"foo,bar\"\n   * Lazy({foo: 1, bar: 2}).map(toParam).join('&') // 'foo=1&bar=2'\n   */\n  Sequence.prototype.join = function join(delimiter) {\n    delimiter = typeof delimiter === \"undefined\" ? \",\" : String(delimiter);\n\n    var i = -1;\n    return this.reduce(function(str, e) {\n      if (++i > 0) {\n        str += delimiter;\n      }\n      return str + e;\n    }, \"\");\n  };\n\n  Sequence.prototype.toString = function toString(delimiter) {\n    return this.join(delimiter);\n  };\n\n  /**\n   * Creates a sequence, with the same elements as this one, that will be iterated\n   * over asynchronously when calling `each`.\n   *\n   * @public\n   * @param {number=} interval The approximate period, in milliseconds, that\n   *     should elapse between each element in the resulting sequence. Omitting\n   *     this argument will result in the fastest possible asynchronous iteration.\n   * @returns {AsyncSequence} The new asynchronous sequence.\n   *\n   * @examples\n   * Lazy([1, 2, 3]).async(100).each(fn) // calls fn 3 times asynchronously\n   */\n  Sequence.prototype.async = function async(interval) {\n    return new AsyncSequence(this, interval);\n  };\n\n  /**\n   * @constructor\n   */\n  function SimpleIntersectionSequence(parent, array) {\n    this.parent = parent;\n    this.array  = array;\n    this.each   = getEachForIntersection(array);\n  }\n\n  SimpleIntersectionSequence.prototype = Object.create(Sequence.prototype);\n\n  SimpleIntersectionSequence.prototype.eachMemoizerCache = function eachMemoizerCache(fn) {\n    var iterator = new UniqueMemoizer(Lazy(this.array).getIterator()),\n        i = 0;\n\n    return this.parent.uniq().each(function(e) {\n      if (iterator.contains(e)) {\n        return fn(e, i++);\n      }\n    });\n  };\n\n  SimpleIntersectionSequence.prototype.eachArrayCache = function eachArrayCache(fn) {\n    var array = this.array,\n        find  = arrayContains,\n        i = 0;\n\n    return this.parent.uniq().each(function(e) {\n      if (find(array, e)) {\n        return fn(e, i++);\n      }\n    });\n  };\n\n  function getEachForIntersection(source) {\n    if (source.length < 40) {\n      return SimpleIntersectionSequence.prototype.eachArrayCache;\n    } else {\n      return SimpleIntersectionSequence.prototype.eachMemoizerCache;\n    }\n  }\n\n  /**\n   * An optimized version of {@link ZippedSequence}, when zipping a sequence with\n   * only one array.\n   *\n   * @param {Sequence} parent The underlying sequence.\n   * @param {Array} array The array with which to zip the sequence.\n   * @constructor\n   */\n  function SimpleZippedSequence(parent, array) {\n    this.parent = parent;\n    this.array  = array;\n  }\n\n  SimpleZippedSequence.prototype = Object.create(Sequence.prototype);\n\n  SimpleZippedSequence.prototype.each = function each(fn) {\n    var array = this.array,\n        i = -1;\n\n    var iteratedLeft = this.parent.each(function(e) {\n      ++i;\n      return fn([e, array[i]], i);\n    });\n\n    if (!iteratedLeft) {\n      return false;\n    }\n\n    while (++i < array.length) {\n      if (fn([undefined, array[i]], i) === false) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  /**\n   * An `ArrayLikeSequence` is a {@link Sequence} that provides random access to\n   * its elements. This extends the API for iterating with the additional methods\n   * {@link #get} and {@link #length}, allowing a sequence to act as a \"view\" into\n   * a collection or other indexed data source.\n   *\n   * The initial sequence created by wrapping an array with `Lazy(array)` is an\n   * `ArrayLikeSequence`.\n   *\n   * All methods of `ArrayLikeSequence` that conceptually should return\n   * something like a array (with indexed access) return another\n   * `ArrayLikeSequence`, for example:\n   *\n   * - {@link Sequence#map}\n   * - {@link ArrayLikeSequence#slice}\n   * - {@link Sequence#take} and {@link Sequence#drop}\n   * - {@link Sequence#reverse}\n   *\n   * The above is not an exhaustive list. There are also certain other cases\n   * where it might be possible to return an `ArrayLikeSequence` (e.g., calling\n   * {@link Sequence#concat} with a single array argument), but this is not\n   * guaranteed by the API.\n   *\n   * Note that in many cases, it is not possible to provide indexed access\n   * without first performing at least a partial iteration of the underlying\n   * sequence. In these cases an `ArrayLikeSequence` will not be returned:\n   *\n   * - {@link Sequence#filter}\n   * - {@link Sequence#uniq}\n   * - {@link Sequence#union}\n   * - {@link Sequence#intersect}\n   *\n   * etc. The above methods only return ordinary {@link Sequence} objects.\n   *\n   * Defining custom array-like sequences\n   * ------------------------------------\n   *\n   * Creating a custom `ArrayLikeSequence` is essentially the same as creating a\n   * custom {@link Sequence}. You just have a couple more methods you need to\n   * implement: `get` and (optionally) `length`.\n   *\n   * Here's an example. Let's define a sequence type called `OffsetSequence` that\n   * offsets each of its parent's elements by a set distance, and circles back to\n   * the beginning after reaching the end. **Remember**: the initialization\n   * function you pass to {@link #define} should always accept a `parent` as its\n   * first parameter.\n   *\n   *     ArrayLikeSequence.define(\"offset\", {\n   *       init: function(parent, offset) {\n   *         this.offset = offset;\n   *       },\n   *\n   *       get: function(i) {\n   *         return this.parent.get((i + this.offset) % this.parent.length());\n   *       }\n   *     });\n   *\n   * It's worth noting a couple of things here.\n   *\n   * First, Lazy's default implementation of `length` simply returns the parent's\n   * length. In this case, since an `OffsetSequence` will always have the same\n   * number of elements as its parent, that implementation is fine; so we don't\n   * need to override it.\n   *\n   * Second, the default implementation of `each` uses `get` and `length` to\n   * essentially create a `for` loop, which is fine here. If you want to implement\n   * `each` your own way, you can do that; but in most cases (as here), you can\n   * probably just stick with the default.\n   *\n   * So we're already done, after only implementing `get`! Pretty easy, huh?\n   *\n   * Now the `offset` method will be chainable from any `ArrayLikeSequence`. So\n   * for example:\n   *\n   *     Lazy([1, 2, 3]).map(mapFn).offset(3);\n   *\n   * ...will work, but:\n   *\n   *     Lazy([1, 2, 3]).filter(mapFn).offset(3);\n   *\n   * ...will not (because `filter` does not return an `ArrayLikeSequence`).\n   *\n   * (Also, as with the example provided for defining custom {@link Sequence}\n   * types, this example really could have been implemented using a function\n   * already available as part of Lazy.js: in this case, {@link Sequence#map}.)\n   *\n   * @public\n   * @constructor\n   *\n   * @examples\n   * Lazy([1, 2, 3])                    // instanceof Lazy.ArrayLikeSequence\n   * Lazy([1, 2, 3]).map(Lazy.identity) // instanceof Lazy.ArrayLikeSequence\n   * Lazy([1, 2, 3]).take(2)            // instanceof Lazy.ArrayLikeSequence\n   * Lazy([1, 2, 3]).drop(2)            // instanceof Lazy.ArrayLikeSequence\n   * Lazy([1, 2, 3]).reverse()          // instanceof Lazy.ArrayLikeSequence\n   * Lazy([1, 2, 3]).slice(1, 2)        // instanceof Lazy.ArrayLikeSequence\n   */\n  function ArrayLikeSequence() {}\n\n  ArrayLikeSequence.prototype = Object.create(Sequence.prototype);\n\n  /**\n   * Create a new constructor function for a type inheriting from\n   * `ArrayLikeSequence`.\n   *\n   * @public\n   * @param {string|Array.<string>} methodName The name(s) of the method(s) to be\n   *     used for constructing the new sequence. The method will be attached to\n   *     the `ArrayLikeSequence` prototype so that it can be chained with any other\n   *     methods that return array-like sequences.\n   * @param {Object} overrides An object containing function overrides for this\n   *     new sequence type. **Must** include `get`. *May* include `init`,\n   *     `length`, `getIterator`, and `each`. For each function, `this` will be\n   *     the new sequence and `this.parent` will be the source sequence.\n   * @returns {Function} A constructor for a new type inheriting from\n   *     `ArrayLikeSequence`.\n   *\n   * @examples\n   * Lazy.ArrayLikeSequence.define(\"offset\", {\n   *   init: function(offset) {\n   *     this.offset = offset;\n   *   },\n   *\n   *   get: function(i) {\n   *     return this.parent.get((i + this.offset) % this.parent.length());\n   *   }\n   * });\n   *\n   * Lazy([1, 2, 3]).offset(1) // sequence: [2, 3, 1]\n   */\n  ArrayLikeSequence.define = function define(methodName, overrides) {\n    if (!overrides || typeof overrides.get !== 'function') {\n      throw new Error(\"A custom array-like sequence must implement *at least* get!\");\n    }\n\n    return defineSequenceType(ArrayLikeSequence, methodName, overrides);\n  };\n\n  /**\n   * Returns the element at the specified index.\n   *\n   * @public\n   * @param {number} i The index to access.\n   * @returns {*} The element.\n   *\n   * @examples\n   * function increment(x) { return x + 1; }\n   *\n   * Lazy([1, 2, 3]).get(1)                // => 2\n   * Lazy([1, 2, 3]).get(-1)               // => undefined\n   * Lazy([1, 2, 3]).map(increment).get(1) // => 3\n   */\n  ArrayLikeSequence.prototype.get = function get(i) {\n    return this.parent.get(i);\n  };\n\n  /**\n   * Returns the length of the sequence.\n   *\n   * @public\n   * @returns {number} The length.\n   *\n   * @examples\n   * function increment(x) { return x + 1; }\n   *\n   * Lazy([]).length()                       // => 0\n   * Lazy([1, 2, 3]).length()                // => 3\n   * Lazy([1, 2, 3]).map(increment).length() // => 3\n   */\n  ArrayLikeSequence.prototype.length = function length() {\n    return this.parent.length();\n  };\n\n  /**\n   * Returns the current sequence (since it is already indexed).\n   */\n  ArrayLikeSequence.prototype.getIndex = function getIndex() {\n    return this;\n  };\n\n  /**\n   * An optimized version of {@link Sequence#getIterator}.\n   */\n  ArrayLikeSequence.prototype.getIterator = function getIterator() {\n    return new IndexedIterator(this);\n  };\n\n  /**\n   * An optimized version of {@link Iterator} meant to work with already-indexed\n   * sequences.\n   *\n   * @param {ArrayLikeSequence} sequence The sequence to iterate over.\n   * @constructor\n   */\n  function IndexedIterator(sequence) {\n    this.sequence = sequence;\n    this.index    = -1;\n  }\n\n  IndexedIterator.prototype.current = function current() {\n    return this.sequence.get(this.index);\n  };\n\n  IndexedIterator.prototype.moveNext = function moveNext() {\n    if (this.index >= this.sequence.length() - 1) {\n      return false;\n    }\n\n    ++this.index;\n    return true;\n  };\n\n  /**\n   * An optimized version of {@link Sequence#each}.\n   */\n  ArrayLikeSequence.prototype.each = function each(fn) {\n    var length = this.length(),\n        i = -1;\n\n    while (++i < length) {\n      if (fn(this.get(i), i) === false) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  /**\n   * Returns a new sequence with the same elements as this one, plus the\n   * specified element at the end.\n   *\n   * @public\n   * @returns {ArrayLikeSequence} The new array-like sequence.\n   *\n   * @examples\n   * Lazy([1, 2]).push(3) // sequence: [1, 2, 3]\n   * Lazy([]).push(1)     // sequence: [1]\n   */\n  ArrayLikeSequence.prototype.push = function push(value) {\n    return this.concat([value]);\n  };\n\n  /**\n   * Returns a new sequence with the same elements as this one, minus the last\n   * element.\n   *\n   * @public\n   * @returns {ArrayLikeSequence} The new array-like sequence.\n   *\n   * @examples\n   * Lazy([1, 2, 3]).pop() // sequence: [1, 2]\n   * Lazy([]).pop()        // sequence: []\n   */\n  ArrayLikeSequence.prototype.pop = function pop() {\n    return this.initial();\n  };\n\n  /**\n   * Returns a new sequence with the same elements as this one, plus the\n   * specified element at the beginning.\n   *\n   * @public\n   * @returns {ArrayLikeSequence} The new array-like sequence.\n   *\n   * @examples\n   * Lazy([1, 2]).unshift(3) // sequence: [3, 1, 2]\n   * Lazy([]).unshift(1)     // sequence: [1]\n   */\n  ArrayLikeSequence.prototype.unshift = function unshift(value) {\n    return Lazy([value]).concat(this);\n  };\n\n  /**\n   * Returns a new sequence with the same elements as this one, minus the first\n   * element.\n   *\n   * @public\n   * @returns {ArrayLikeSequence} The new array-like sequence.\n   *\n   * @examples\n   * Lazy([1, 2, 3]).shift() // sequence: [2, 3]\n   * Lazy([]).shift()        // sequence: []\n   */\n  ArrayLikeSequence.prototype.shift = function shift() {\n    return this.drop();\n  };\n\n  /**\n   * Returns a new sequence comprising the portion of this sequence starting\n   * from the specified starting index and continuing until the specified ending\n   * index or to the end of the sequence.\n   *\n   * @public\n   * @param {number} begin The index at which the new sequence should start.\n   * @param {number=} end The index at which the new sequence should end.\n   * @returns {ArrayLikeSequence} The new array-like sequence.\n   *\n   * @examples\n   * Lazy([1, 2, 3, 4, 5]).slice(0)     // sequence: [1, 2, 3, 4, 5]\n   * Lazy([1, 2, 3, 4, 5]).slice(2)     // sequence: [3, 4, 5]\n   * Lazy([1, 2, 3, 4, 5]).slice(2, 4)  // sequence: [3, 4]\n   * Lazy([1, 2, 3, 4, 5]).slice(-1)    // sequence: [5]\n   * Lazy([1, 2, 3, 4, 5]).slice(1, -1) // sequence: [2, 3, 4]\n   * Lazy([1, 2, 3, 4, 5]).slice(0, 10) // sequence: [1, 2, 3, 4, 5]\n   */\n  ArrayLikeSequence.prototype.slice = function slice(begin, end) {\n    var length = this.length();\n\n    if (begin < 0) {\n      begin = length + begin;\n    }\n\n    var result = this.drop(begin);\n\n    if (typeof end === \"number\") {\n      if (end < 0) {\n        end = length + end;\n      }\n      result = result.take(end - begin);\n    }\n\n    return result;\n  };\n\n  /**\n   * An optimized version of {@link Sequence#map}, which creates an\n   * {@link ArrayLikeSequence} so that the result still provides random access.\n   *\n   * @public\n   *\n   * @examples\n   * Lazy([1, 2, 3]).map(Lazy.identity) // instanceof Lazy.ArrayLikeSequence\n   */\n  ArrayLikeSequence.prototype.map = function map(mapFn) {\n    return new IndexedMappedSequence(this, createCallback(mapFn));\n  };\n\n  /**\n   * @constructor\n   */\n  function IndexedMappedSequence(parent, mapFn) {\n    this.parent = parent;\n    this.mapFn  = mapFn;\n  }\n\n  IndexedMappedSequence.prototype = Object.create(ArrayLikeSequence.prototype);\n\n  IndexedMappedSequence.prototype.get = function get(i) {\n    if (i < 0 || i >= this.parent.length()) {\n      return undefined;\n    }\n\n    return this.mapFn(this.parent.get(i), i);\n  };\n\n  /**\n   * An optimized version of {@link Sequence#filter}.\n   */\n  ArrayLikeSequence.prototype.filter = function filter(filterFn) {\n    return new IndexedFilteredSequence(this, createCallback(filterFn));\n  };\n\n  /**\n   * @constructor\n   */\n  function IndexedFilteredSequence(parent, filterFn) {\n    this.parent   = parent;\n    this.filterFn = filterFn;\n  }\n\n  IndexedFilteredSequence.prototype = Object.create(FilteredSequence.prototype);\n\n  IndexedFilteredSequence.prototype.each = function each(fn) {\n    var parent = this.parent,\n        filterFn = this.filterFn,\n        length = this.parent.length(),\n        i = -1,\n        j = 0,\n        e;\n\n    while (++i < length) {\n      e = parent.get(i);\n      if (filterFn(e, i) && fn(e, j++) === false) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  /**\n   * An optimized version of {@link Sequence#reverse}, which creates an\n   * {@link ArrayLikeSequence} so that the result still provides random access.\n   *\n   * @public\n   *\n   * @examples\n   * Lazy([1, 2, 3]).reverse() // instanceof Lazy.ArrayLikeSequence\n   */\n  ArrayLikeSequence.prototype.reverse = function reverse() {\n    return new IndexedReversedSequence(this);\n  };\n\n  /**\n   * @constructor\n   */\n  function IndexedReversedSequence(parent) {\n    this.parent = parent;\n  }\n\n  IndexedReversedSequence.prototype = Object.create(ArrayLikeSequence.prototype);\n\n  IndexedReversedSequence.prototype.get = function get(i) {\n    return this.parent.get(this.length() - i - 1);\n  };\n\n  /**\n   * An optimized version of {@link Sequence#first}, which creates an\n   * {@link ArrayLikeSequence} so that the result still provides random access.\n   *\n   * @public\n   *\n   * @examples\n   * Lazy([1, 2, 3]).first(2) // instanceof Lazy.ArrayLikeSequence\n   */\n  ArrayLikeSequence.prototype.first = function first(count) {\n    if (typeof count === \"undefined\") {\n      return this.get(0);\n    }\n\n    return new IndexedTakeSequence(this, count);\n  };\n\n  /**\n   * @constructor\n   */\n  function IndexedTakeSequence(parent, count) {\n    this.parent = parent;\n    this.count  = count;\n  }\n\n  IndexedTakeSequence.prototype = Object.create(ArrayLikeSequence.prototype);\n\n  IndexedTakeSequence.prototype.length = function length() {\n    var parentLength = this.parent.length();\n    return this.count <= parentLength ? this.count : parentLength;\n  };\n\n  /**\n   * An optimized version of {@link Sequence#rest}, which creates an\n   * {@link ArrayLikeSequence} so that the result still provides random access.\n   *\n   * @public\n   *\n   * @examples\n   * Lazy([1, 2, 3]).rest() // instanceof Lazy.ArrayLikeSequence\n   */\n  ArrayLikeSequence.prototype.rest = function rest(count) {\n    return new IndexedDropSequence(this, count);\n  };\n\n  /**\n   * @constructor\n   */\n  function IndexedDropSequence(parent, count) {\n    this.parent = parent;\n    this.count  = typeof count === \"number\" ? count : 1;\n  }\n\n  IndexedDropSequence.prototype = Object.create(ArrayLikeSequence.prototype);\n\n  IndexedDropSequence.prototype.get = function get(i) {\n    return this.parent.get(this.count + i);\n  };\n\n  IndexedDropSequence.prototype.length = function length() {\n    var parentLength = this.parent.length();\n    return this.count <= parentLength ? parentLength - this.count : 0;\n  };\n\n  /**\n   * An optimized version of {@link Sequence#concat} that returns another\n   * {@link ArrayLikeSequence} *if* the argument is an array.\n   *\n   * @public\n   * @param {...*} var_args\n   *\n   * @examples\n   * Lazy([1, 2]).concat([3, 4]) // instanceof Lazy.ArrayLikeSequence\n   * Lazy([1, 2]).concat([3, 4]) // sequence: [1, 2, 3, 4]\n   */\n  ArrayLikeSequence.prototype.concat = function concat(var_args) {\n    if (arguments.length === 1 && isArray(arguments[0])) {\n      return new IndexedConcatenatedSequence(this, (/** @type {Array} */ var_args));\n    } else {\n      return Sequence.prototype.concat.apply(this, arguments);\n    }\n  };\n\n  /**\n   * @constructor\n   */\n  function IndexedConcatenatedSequence(parent, other) {\n    this.parent = parent;\n    this.other  = other;\n  }\n\n  IndexedConcatenatedSequence.prototype = Object.create(ArrayLikeSequence.prototype);\n\n  IndexedConcatenatedSequence.prototype.get = function get(i) {\n    var parentLength = this.parent.length();\n    if (i < parentLength) {\n      return this.parent.get(i);\n    } else {\n      return this.other[i - parentLength];\n    }\n  };\n\n  IndexedConcatenatedSequence.prototype.length = function length() {\n    return this.parent.length() + this.other.length;\n  };\n\n  /**\n   * An optimized version of {@link Sequence#uniq}.\n   */\n  ArrayLikeSequence.prototype.uniq = function uniq(keyFn) {\n    return new IndexedUniqueSequence(this, createCallback(keyFn));\n  };\n\n  /**\n   * @param {ArrayLikeSequence} parent\n   * @constructor\n   */\n  function IndexedUniqueSequence(parent, keyFn) {\n    this.parent = parent;\n    this.each   = getEachForParent(parent);\n    this.keyFn  = keyFn;\n  }\n\n  IndexedUniqueSequence.prototype = Object.create(Sequence.prototype);\n\n  IndexedUniqueSequence.prototype.eachArrayCache = function eachArrayCache(fn) {\n    // Basically the same implementation as w/ the set, but using an array because\n    // it's cheaper for smaller sequences.\n    var parent = this.parent,\n        keyFn  = this.keyFn,\n        length = parent.length(),\n        cache  = [],\n        find   = arrayContains,\n        key, value,\n        i = -1,\n        j = 0;\n\n    while (++i < length) {\n      value = parent.get(i);\n      key = keyFn(value);\n      if (!find(cache, key)) {\n        cache.push(key);\n        if (fn(value, j++) === false) {\n          return false;\n        }\n      }\n    }\n  };\n\n  IndexedUniqueSequence.prototype.eachSetCache = UniqueSequence.prototype.each;\n\n  function getEachForParent(parent) {\n    if (parent.length() < 100) {\n      return IndexedUniqueSequence.prototype.eachArrayCache;\n    } else {\n      return UniqueSequence.prototype.each;\n    }\n  }\n\n  // Now that we've fully initialized the ArrayLikeSequence prototype, we can\n  // set the prototype for MemoizedSequence.\n\n  MemoizedSequence.prototype = Object.create(Sequence.prototype);\n\n  MemoizedSequence.prototype.getParentIterator = function getParentIterator() {\n    // Since the premise of this sequence is that it only iterates over each\n    // element of its parent a grand total of one (1) time, we should only ever\n    // need to get the parent iterator once.\n    if (!this.iterator) {\n      this.iterator = this.parent.getIterator();\n    }\n\n    return this.iterator;\n  };\n\n  MemoizedSequence.prototype.getIterator = function getIterator() {\n    return new Memoizer(this.memo, this.getParentIterator());\n  };\n\n  MemoizedSequence.prototype.iterateTo = function iterateTo(i) {\n    var memo = this.memo,\n        iterator = this.getParentIterator();\n\n    while (i >= memo.length) {\n      if (!iterator.moveNext()) {\n        this.complete = true;\n        return false;\n      }\n\n      memo.push(iterator.current());\n    }\n\n    return true;\n  };\n\n  MemoizedSequence.prototype.get = function get(i) {\n    var memo = this.memo;\n\n    if (i < memo.length) {\n      return memo[i];\n    }\n\n    if (!this.iterateTo(i)) {\n      return undefined;\n    }\n\n    return memo[i];\n  };\n\n  MemoizedSequence.prototype.length = function length() {\n    if (!this.complete) {\n      this.iterateTo(Infinity);\n    }\n\n    return this.memo.length;\n  };\n\n  MemoizedSequence.prototype.slice = function slice(begin, end) {\n    if (!this.complete) {\n      this.iterateTo(end);\n    }\n\n    return Lazy(this.memo.slice(begin, end));\n  };\n\n  MemoizedSequence.prototype.toArray = function toArray() {\n    if (!this.complete) {\n      this.iterateTo(Infinity);\n    }\n\n    return this.memo.slice(0);\n  };\n\n  /**\n   * ArrayWrapper is the most basic {@link Sequence}. It directly wraps an array\n   * and implements the same methods as {@link ArrayLikeSequence}, but more\n   * efficiently.\n   *\n   * @constructor\n   */\n  function ArrayWrapper(source) {\n    this.source = source;\n  }\n\n  ArrayWrapper.prototype = Object.create(ArrayLikeSequence.prototype);\n\n  ArrayWrapper.prototype.root = function root() {\n    return this;\n  };\n\n  ArrayWrapper.prototype.isAsync = function isAsync() {\n    return false;\n  };\n\n  /**\n   * Returns the element at the specified index in the source array.\n   *\n   * @param {number} i The index to access.\n   * @returns {*} The element.\n   */\n  ArrayWrapper.prototype.get = function get(i) {\n    return this.source[i];\n  };\n\n  /**\n   * Returns the length of the source array.\n   *\n   * @returns {number} The length.\n   */\n  ArrayWrapper.prototype.length = function length() {\n    return this.source.length;\n  };\n\n  /**\n   * An optimized version of {@link Sequence#each}.\n   */\n  ArrayWrapper.prototype.each = function each(fn) {\n    return forEach(this.source, fn);\n  };\n\n  /**\n   * An optimized version of {@link Sequence#map}.\n   */\n  ArrayWrapper.prototype.map = function map(mapFn) {\n    return new MappedArrayWrapper(this, createCallback(mapFn));\n  };\n\n  /**\n   * An optimized version of {@link Sequence#filter}.\n   */\n  ArrayWrapper.prototype.filter = function filter(filterFn) {\n    return new FilteredArrayWrapper(this, createCallback(filterFn));\n  };\n\n  /**\n   * An optimized version of {@link Sequence#uniq}.\n   */\n  ArrayWrapper.prototype.uniq = function uniq(keyFn) {\n    return new UniqueArrayWrapper(this, keyFn);\n  };\n\n  /**\n   * An optimized version of {@link ArrayLikeSequence#concat}.\n   *\n   * @param {...*} var_args\n   */\n  ArrayWrapper.prototype.concat = function concat(var_args) {\n    if (arguments.length === 1 && isArray(arguments[0])) {\n      return new ConcatArrayWrapper(this, (/** @type {Array} */ var_args));\n    } else {\n      return ArrayLikeSequence.prototype.concat.apply(this, arguments);\n    }\n  };\n\n  /**\n   * An optimized version of {@link Sequence#toArray}.\n   */\n  ArrayWrapper.prototype.toArray = function toArray() {\n    return this.source.slice(0);\n  };\n\n  /**\n   * @constructor\n   */\n  function MappedArrayWrapper(parent, mapFn) {\n    this.parent = parent;\n    this.mapFn  = mapFn;\n  }\n\n  MappedArrayWrapper.prototype = Object.create(ArrayLikeSequence.prototype);\n\n  MappedArrayWrapper.prototype.get = function get(i) {\n    var source = this.parent.source;\n\n    if (i < 0 || i >= source.length) {\n      return undefined;\n    }\n\n    return this.mapFn(source[i]);\n  };\n\n  MappedArrayWrapper.prototype.length = function length() {\n    return this.parent.source.length;\n  };\n\n  MappedArrayWrapper.prototype.each = function each(fn) {\n    var source = this.parent.source,\n        length = source.length,\n        mapFn  = this.mapFn,\n        i = -1;\n\n    while (++i < length) {\n      if (fn(mapFn(source[i], i), i) === false) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  /**\n   * @constructor\n   */\n  function FilteredArrayWrapper(parent, filterFn) {\n    this.parent   = parent;\n    this.filterFn = filterFn;\n  }\n\n  FilteredArrayWrapper.prototype = Object.create(FilteredSequence.prototype);\n\n  FilteredArrayWrapper.prototype.each = function each(fn) {\n    var source = this.parent.source,\n        filterFn = this.filterFn,\n        length = source.length,\n        i = -1,\n        j = 0,\n        e;\n\n    while (++i < length) {\n      e = source[i];\n      if (filterFn(e, i) && fn(e, j++) === false) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  /**\n   * @constructor\n   */\n  function UniqueArrayWrapper(parent, keyFn) {\n    this.parent = parent;\n    this.each   = getEachForSource(parent.source);\n    this.keyFn  = keyFn;\n  }\n\n  UniqueArrayWrapper.prototype = Object.create(Sequence.prototype);\n\n  UniqueArrayWrapper.prototype.eachNoCache = function eachNoCache(fn) {\n    var source = this.parent.source,\n        keyFn  = this.keyFn,\n        length = source.length,\n        find   = arrayContainsBefore,\n        value,\n\n        // Yes, this is hideous.\n        // Trying to get performance first, will refactor next!\n        i = -1,\n        k = 0;\n\n    while (++i < length) {\n      value = source[i];\n      if (!find(source, value, i, keyFn) && fn(value, k++) === false) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  UniqueArrayWrapper.prototype.eachArrayCache = function eachArrayCache(fn) {\n    // Basically the same implementation as w/ the set, but using an array because\n    // it's cheaper for smaller sequences.\n    var source = this.parent.source,\n        keyFn  = this.keyFn,\n        length = source.length,\n        cache  = [],\n        find   = arrayContains,\n        key, value,\n        i = -1,\n        j = 0;\n\n    if (keyFn) {\n      keyFn = createCallback(keyFn);\n      while (++i < length) {\n        value = source[i];\n        key = keyFn(value);\n        if (!find(cache, key)) {\n          cache.push(key);\n          if (fn(value, j++) === false) {\n            return false;\n          }\n        }\n      }\n\n    } else {\n      while (++i < length) {\n        value = source[i];\n        if (!find(cache, value)) {\n          cache.push(value);\n          if (fn(value, j++) === false) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  };\n\n  UniqueArrayWrapper.prototype.eachSetCache = UniqueSequence.prototype.each;\n\n  /**\n   * My latest findings here...\n   *\n   * So I hadn't really given the set-based approach enough credit. The main issue\n   * was that my Set implementation was totally not optimized at all. After pretty\n   * heavily optimizing it (just take a look; it's a monstrosity now!), it now\n   * becomes the fastest option for much smaller values of N.\n   */\n  function getEachForSource(source) {\n    if (source.length < 40) {\n      return UniqueArrayWrapper.prototype.eachNoCache;\n    } else if (source.length < 100) {\n      return UniqueArrayWrapper.prototype.eachArrayCache;\n    } else {\n      return UniqueArrayWrapper.prototype.eachSetCache;\n    }\n  }\n\n  /**\n   * @constructor\n   */\n  function ConcatArrayWrapper(parent, other) {\n    this.parent = parent;\n    this.other  = other;\n  }\n\n  ConcatArrayWrapper.prototype = Object.create(ArrayLikeSequence.prototype);\n\n  ConcatArrayWrapper.prototype.get = function get(i) {\n    var source = this.parent.source,\n        sourceLength = source.length;\n\n    if (i < sourceLength) {\n      return source[i];\n    } else {\n      return this.other[i - sourceLength];\n    }\n  };\n\n  ConcatArrayWrapper.prototype.length = function length() {\n    return this.parent.source.length + this.other.length;\n  };\n\n  ConcatArrayWrapper.prototype.each = function each(fn) {\n    var source = this.parent.source,\n        sourceLength = source.length,\n        other = this.other,\n        otherLength = other.length,\n        i = 0,\n        j = -1;\n\n    while (++j < sourceLength) {\n      if (fn(source[j], i++) === false) {\n        return false;\n      }\n    }\n\n    j = -1;\n    while (++j < otherLength) {\n      if (fn(other[j], i++) === false) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  /**\n   * An `ObjectLikeSequence` object represents a sequence of key/value pairs.\n   *\n   * The initial sequence you get by wrapping an object with `Lazy(object)` is\n   * an `ObjectLikeSequence`.\n   *\n   * All methods of `ObjectLikeSequence` that conceptually should return\n   * something like an object return another `ObjectLikeSequence`.\n   *\n   * @public\n   * @constructor\n   *\n   * @examples\n   * var obj = { foo: 'bar' };\n   *\n   * Lazy(obj).assign({ bar: 'baz' })   // instanceof Lazy.ObjectLikeSequence\n   * Lazy(obj).defaults({ bar: 'baz' }) // instanceof Lazy.ObjectLikeSequence\n   * Lazy(obj).invert()                 // instanceof Lazy.ObjectLikeSequence\n   */\n  function ObjectLikeSequence() {}\n\n  ObjectLikeSequence.prototype = Object.create(Sequence.prototype);\n\n  /**\n   * Create a new constructor function for a type inheriting from\n   * `ObjectLikeSequence`.\n   *\n   * @public\n   * @param {string|Array.<string>} methodName The name(s) of the method(s) to be\n   *     used for constructing the new sequence. The method will be attached to\n   *     the `ObjectLikeSequence` prototype so that it can be chained with any other\n   *     methods that return object-like sequences.\n   * @param {Object} overrides An object containing function overrides for this\n   *     new sequence type. **Must** include `each`. *May* include `init` and\n   *     `get` (for looking up an element by key).\n   * @returns {Function} A constructor for a new type inheriting from\n   *     `ObjectLikeSequence`.\n   *\n   * @examples\n   * function downcaseKey(value, key) {\n   *   return [key.toLowerCase(), value];\n   * }\n   *\n   * Lazy.ObjectLikeSequence.define(\"caseInsensitive\", {\n   *   init: function() {\n   *     var downcased = this.parent\n   *       .map(downcaseKey)\n   *       .toObject();\n   *     this.downcased = Lazy(downcased);\n   *   },\n   *\n   *   get: function(key) {\n   *     return this.downcased.get(key.toLowerCase());\n   *   },\n   *\n   *   each: function(fn) {\n   *     return this.downcased.each(fn);\n   *   }\n   * });\n   *\n   * Lazy({ Foo: 'bar' }).caseInsensitive()            // sequence: { foo: 'bar' }\n   * Lazy({ FOO: 'bar' }).caseInsensitive().get('foo') // => 'bar'\n   * Lazy({ FOO: 'bar' }).caseInsensitive().get('FOO') // => 'bar'\n   */\n  ObjectLikeSequence.define = function define(methodName, overrides) {\n    if (!overrides || typeof overrides.each !== 'function') {\n      throw new Error(\"A custom object-like sequence must implement *at least* each!\");\n    }\n\n    return defineSequenceType(ObjectLikeSequence, methodName, overrides);\n  };\n\n  ObjectLikeSequence.prototype.value = function value() {\n    return this.toObject();\n  };\n\n  /**\n   * Gets the element at the specified key in this sequence.\n   *\n   * @public\n   * @param {string} key The key.\n   * @returns {*} The element.\n   *\n   * @examples\n   * Lazy({ foo: \"bar\" }).get(\"foo\")                          // => \"bar\"\n   * Lazy({ foo: \"bar\" }).extend({ foo: \"baz\" }).get(\"foo\")   // => \"baz\"\n   * Lazy({ foo: \"bar\" }).defaults({ bar: \"baz\" }).get(\"bar\") // => \"baz\"\n   * Lazy({ foo: \"bar\" }).invert().get(\"bar\")                 // => \"foo\"\n   * Lazy({ foo: 1, bar: 2 }).pick([\"foo\"]).get(\"foo\")        // => 1\n   * Lazy({ foo: 1, bar: 2 }).pick([\"foo\"]).get(\"bar\")        // => undefined\n   * Lazy({ foo: 1, bar: 2 }).omit([\"foo\"]).get(\"bar\")        // => 2\n   * Lazy({ foo: 1, bar: 2 }).omit([\"foo\"]).get(\"foo\")        // => undefined\n   * Lazy({ \"1\": \"foo\", \"2\": \"bar\"}).get(1)                   // => \"foo\"\n   * Lazy({ \"1\": \"foo\", \"2\": \"bar\"}).defaults({}).get(2)      // => \"bar\"\n   * Lazy({}).defaults({ \"1\": \"foo\", \"2\": \"bar\"}).get(2)      // => \"bar\"\n   * Lazy({ \"1\": \"foo\" }).extend({ \"2\": \"bar\" }).get(2)       // => \"bar\"\n   */\n  ObjectLikeSequence.prototype.get = function get(key) {\n    var pair = this.pairs().find(function(pair) {\n      // Follow JavaScript's lead and coerce keys to strings.\n      return String(pair[0]) === String(key);\n    });\n\n    return pair ? pair[1] : undefined;\n  };\n\n  /**\n   * Returns a {@link Sequence} whose elements are the keys of this object-like\n   * sequence.\n   *\n   * @public\n   * @returns {Sequence} The sequence based on this sequence's keys.\n   *\n   * @examples\n   * var obj = { hello: \"hola\", goodbye: \"hasta luego\" };\n   *\n   * Lazy(obj).keys() // sequence: [\"hello\", \"goodbye\"]\n   * Lazy(obj).keys().map(function(v, i) { return [v, i]; }) // sequence: [[\"hello\", 0], [\"goodbye\", 1]]\n   */\n  ObjectLikeSequence.prototype.keys = function keys() {\n    return new KeySequence(this);\n  };\n\n  function KeySequence(parent) {\n    this.parent = parent;\n  }\n\n  KeySequence.prototype = Object.create(Sequence.prototype);\n\n  KeySequence.prototype.each = function each(fn) {\n    var i = -1;\n\n    return this.parent.each(function(v, k) {\n      return fn(k, ++i);\n    });\n  };\n\n  /**\n   * Returns a {@link Sequence} whose elements are the values of this object-like\n   * sequence.\n   *\n   * @public\n   * @returns {Sequence} The sequence based on this sequence's values.\n   *\n   * @examples\n   * Lazy({ hello: \"hola\", goodbye: \"hasta luego\" }).values() // sequence: [\"hola\", \"hasta luego\"]\n   */\n  ObjectLikeSequence.prototype.values = function values() {\n    return new ValuesSequence(this);\n  };\n\n  function ValuesSequence(parent) {\n    this.parent = parent;\n  }\n\n  ValuesSequence.prototype = Object.create(Sequence.prototype);\n\n  ValuesSequence.prototype.each = function each(fn) {\n    var i = -1;\n\n    return this.parent.each(function(v, k) {\n      return fn(v, ++i);\n    });\n  };\n\n  /**\n   * Throws an exception. Asynchronous iteration over object-like sequences is\n   * not supported.\n   *\n   * @public\n   * @examples\n   * Lazy({ foo: 'bar' }).async() // throws\n   */\n  ObjectLikeSequence.prototype.async = function async() {\n    throw new Error('An ObjectLikeSequence does not support asynchronous iteration.');\n  };\n\n  ObjectLikeSequence.prototype.filter = function filter(filterFn) {\n    return new FilteredObjectLikeSequence(this, createCallback(filterFn));\n  };\n\n  function FilteredObjectLikeSequence(parent, filterFn) {\n    this.parent = parent;\n    this.filterFn = filterFn;\n  }\n\n  FilteredObjectLikeSequence.prototype = Object.create(ObjectLikeSequence.prototype);\n\n  FilteredObjectLikeSequence.prototype.each = function each(fn) {\n    var filterFn = this.filterFn;\n\n    return this.parent.each(function(v, k) {\n      if (filterFn(v, k)) {\n        return fn(v, k);\n      }\n    });\n  };\n\n  /**\n   * Returns this same sequence. (Reversing an object-like sequence doesn't make\n   * any sense.)\n   */\n  ObjectLikeSequence.prototype.reverse = function reverse() {\n    return this;\n  };\n\n  /**\n   * Returns an {@link ObjectLikeSequence} whose elements are the combination of\n   * this sequence and another object. In the case of a key appearing in both this\n   * sequence and the given object, the other object's value will override the\n   * one in this sequence.\n   *\n   * @public\n   * @aka extend\n   * @param {Object} other The other object to assign to this sequence.\n   * @returns {ObjectLikeSequence} A new sequence comprising elements from this\n   *     sequence plus the contents of `other`.\n   *\n   * @examples\n   * Lazy({ \"uno\": 1, \"dos\": 2 }).assign({ \"tres\": 3 })     // sequence: { uno: 1, dos: 2, tres: 3 }\n   * Lazy({ foo: \"bar\" }).assign({ foo: \"baz\" });           // sequence: { foo: \"baz\" }\n   * Lazy({ foo: 'foo' }).assign({ foo: false }).get('foo') // false\n   */\n  ObjectLikeSequence.prototype.assign = function assign(other) {\n    return new AssignSequence(this, other);\n  };\n\n  ObjectLikeSequence.prototype.extend = function extend(other) {\n    return this.assign(other);\n  };\n\n  /**\n   * @constructor\n   */\n  function AssignSequence(parent, other) {\n    this.parent = parent;\n    this.other  = other;\n  }\n\n  AssignSequence.prototype = Object.create(ObjectLikeSequence.prototype);\n\n  AssignSequence.prototype.get = function get(key) {\n    return key in this.other ? this.other[key] : this.parent.get(key);\n  };\n\n  AssignSequence.prototype.each = function each(fn) {\n    var merged = new Set(),\n        done   = false;\n\n    Lazy(this.other).each(function(value, key) {\n      if (fn(value, key) === false) {\n        done = true;\n        return false;\n      }\n\n      merged.add(key);\n    });\n\n    if (!done) {\n      return this.parent.each(function(value, key) {\n        if (!merged.contains(key) && fn(value, key) === false) {\n          return false;\n        }\n      });\n    }\n  };\n\n  /**\n   * Returns an {@link ObjectLikeSequence} whose elements are the combination of\n   * this sequence and a 'default' object. In the case of a key appearing in both\n   * this sequence and the given object, this sequence's value will override the\n   * default object's.\n   *\n   * @public\n   * @param {Object} defaults The 'default' object to use for missing keys in this\n   *     sequence.\n   * @returns {ObjectLikeSequence} A new sequence comprising elements from this\n   *     sequence supplemented by the contents of `defaults`.\n   *\n   * @examples\n   * Lazy({ name: \"Dan\" }).defaults({ name: \"User\", password: \"passw0rd\" }) // sequence: { name: \"Dan\", password: \"passw0rd\" }\n   * Lazy({ foo: false }).defaults({ foo: 'foo' }).get('foo') // false\n   * Lazy({ a: 1 }).defaults({ b: 2 }).defaults({ c: 3 }) // sequence: { a: 1, b: 2, c: 3 }\n   * Lazy({ a: 1 }).defaults({ b: 2 }).defaults({ a: 3 }) // sequence: { a: 1, b: 2 }\n   * Lazy({ a: 1, b: 2 }).defaults({ b: 5 }).defaults({ c: 3, d: 4 }) // sequence: { a: 1, b: 2, c: 3, d: 4 }\n   */\n  ObjectLikeSequence.prototype.defaults = function defaults(defaults) {\n    return new DefaultsSequence(this, defaults);\n  };\n\n  /**\n   * @constructor\n   */\n  function DefaultsSequence(parent, defaults) {\n    this.parent        = parent;\n    this.defaultValues = defaults;\n  }\n\n  DefaultsSequence.prototype = Object.create(ObjectLikeSequence.prototype);\n\n  DefaultsSequence.prototype.get = function get(key) {\n    var parentValue = this.parent.get(key);\n    return parentValue !== undefined ? parentValue : this.defaultValues[key];\n  };\n\n  DefaultsSequence.prototype.each = function each(fn) {\n    var merged = new Set(),\n        done   = false;\n\n    this.parent.each(function(value, key) {\n      if (fn(value, key) === false) {\n        done = true;\n        return false;\n      }\n\n      if (typeof value !== \"undefined\") {\n        merged.add(key);\n      }\n    });\n\n    if (!done) {\n      Lazy(this.defaultValues).each(function(value, key) {\n        if (!merged.contains(key) && fn(value, key) === false) {\n          return false;\n        }\n      });\n    }\n  };\n\n  /**\n   * Returns an {@link ObjectLikeSequence} whose values are this sequence's keys,\n   * and whose keys are this sequence's values.\n   *\n   * @public\n   * @returns {ObjectLikeSequence} A new sequence comprising the inverted keys and\n   *     values from this sequence.\n   *\n   * @examples\n   * Lazy({ first: \"Dan\", last: \"Tao\" }).invert() // sequence: { Dan: \"first\", Tao: \"last\" }\n   */\n  ObjectLikeSequence.prototype.invert = function invert() {\n    return new InvertedSequence(this);\n  };\n\n  /**\n   * @constructor\n   */\n  function InvertedSequence(parent) {\n    this.parent = parent;\n  }\n\n  InvertedSequence.prototype = Object.create(ObjectLikeSequence.prototype);\n\n  InvertedSequence.prototype.each = function each(fn) {\n    this.parent.each(function(value, key) {\n      return fn(key, value);\n    });\n  };\n\n  /**\n   * Produces an {@link ObjectLikeSequence} consisting of all the recursively\n   * merged values from this and the given object(s) or sequence(s).\n   *\n   * Note that by default this method only merges \"vanilla\" objects (bags of\n   * key/value pairs), not arrays or any other custom object types. To customize\n   * how merging works, you can provide the mergeFn argument, e.g. to handling\n   * merging arrays, strings, or other types of objects.\n   *\n   * @public\n   * @param {...Object|ObjectLikeSequence} others The other object(s) or\n   *     sequence(s) whose values will be merged into this one.\n   * @param {Function=} mergeFn An optional function used to customize merging\n   *     behavior. The function should take two values as parameters and return\n   *     whatever the \"merged\" form of those values is. If the function returns\n   *     undefined then the new value will simply replace the old one in the\n   *     final result.\n   * @returns {ObjectLikeSequence} The new sequence consisting of merged values.\n   *\n   * @examples\n   * // These examples are completely stolen from Lo-Dash's documentation:\n   * // lodash.com/docs#merge\n   *\n   * var names = {\n   *   'characters': [\n   *     { 'name': 'barney' },\n   *     { 'name': 'fred' }\n   *   ]\n   * };\n   *\n   * var ages = {\n   *   'characters': [\n   *     { 'age': 36 },\n   *     { 'age': 40 }\n   *   ]\n   * };\n   *\n   * var food = {\n   *   'fruits': ['apple'],\n   *   'vegetables': ['beet']\n   * };\n   *\n   * var otherFood = {\n   *   'fruits': ['banana'],\n   *   'vegetables': ['carrot']\n   * };\n   *\n   * function mergeArrays(a, b) {\n   *   return Array.isArray(a) ? a.concat(b) : undefined;\n   * }\n   *\n   * Lazy(names).merge(ages); // => sequence: { 'characters': [{ 'name': 'barney', 'age': 36 }, { 'name': 'fred', 'age': 40 }] }\n   * Lazy(food).merge(otherFood, mergeArrays); // => sequence: { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }\n   *\n   * // ----- Now for my own tests: -----\n   *\n   * // merges objects\n   * Lazy({ foo: 1 }).merge({ foo: 2 }); // => sequence: { foo: 2 }\n   * Lazy({ foo: 1 }).merge({ bar: 2 }); // => sequence: { foo: 1, bar: 2 }\n   *\n   * // goes deep\n   * Lazy({ foo: { bar: 1 } }).merge({ foo: { bar: 2 } }); // => sequence: { foo: { bar: 2 } }\n   * Lazy({ foo: { bar: 1 } }).merge({ foo: { baz: 2 } }); // => sequence: { foo: { bar: 1, baz: 2 } }\n   * Lazy({ foo: { bar: 1 } }).merge({ foo: { baz: 2 } }); // => sequence: { foo: { bar: 1, baz: 2 } }\n   *\n   * // gives precedence to later sources\n   * Lazy({ foo: 1 }).merge({ bar: 2 }, { bar: 3 }); // => sequence: { foo: 1, bar: 3 }\n   *\n   * // undefined gets passed over\n   * Lazy({ foo: 1 }).merge({ foo: undefined }); // => sequence: { foo: 1 }\n   *\n   * // null doesn't get passed over\n   * Lazy({ foo: 1 }).merge({ foo: null }); // => sequence: { foo: null }\n   *\n   * // array contents get merged as well\n   * Lazy({ foo: [{ bar: 1 }] }).merge({ foo: [{ baz: 2 }] }); // => sequence: { foo: [{ bar: 1, baz: 2}] }\n   */\n  ObjectLikeSequence.prototype.merge = function merge(var_args) {\n    var mergeFn = arguments.length > 1 && typeof arguments[arguments.length - 1] === \"function\" ?\n      arrayPop.call(arguments) : null;\n    return new MergedSequence(this, arraySlice.call(arguments, 0), mergeFn);\n  };\n\n  /**\n   * @constructor\n   */\n  function MergedSequence(parent, others, mergeFn) {\n    this.parent  = parent;\n    this.others  = others;\n    this.mergeFn = mergeFn;\n  }\n\n  MergedSequence.prototype = Object.create(ObjectLikeSequence.prototype);\n\n  MergedSequence.prototype.each = function each(fn) {\n    var others  = this.others,\n        mergeFn = this.mergeFn || mergeObjects,\n        keys    = {};\n\n    var iteratedFullSource = this.parent.each(function(value, key) {\n      var merged = value;\n\n      forEach(others, function(other) {\n        if (key in other) {\n          merged = mergeFn(merged, other[key]);\n        }\n      });\n\n      keys[key] = true;\n\n      return fn(merged, key);\n    });\n\n    if (iteratedFullSource === false) {\n      return false;\n    }\n\n    var remaining = {};\n\n    forEach(others, function(other) {\n      for (var k in other) {\n        if (!keys[k]) {\n          remaining[k] = mergeFn(remaining[k], other[k]);\n        }\n      }\n    });\n\n    return Lazy(remaining).each(fn);\n  };\n\n  /**\n   * @private\n   * @examples\n   * mergeObjects({ foo: 1 }, { bar: 2 }); // => { foo: 1, bar: 2 }\n   * mergeObjects({ foo: { bar: 1 } }, { foo: { baz: 2 } }); // => { foo: { bar: 1, baz: 2 } }\n   * mergeObjects({ foo: { bar: 1 } }, { foo: undefined }); // => { foo: { bar: 1 } }\n   * mergeObjects({ foo: { bar: 1 } }, { foo: null }); // => { foo: null }\n   * mergeObjects({ array: [0, 1, 2] }, { array: [3, 4, 5] }).array; // instanceof Array\n   * mergeObjects({ date: new Date() }, { date: new Date() }).date; // instanceof Date\n   * mergeObjects([{ foo: 1 }], [{ bar: 2 }]); // => [{ foo: 1, bar: 2 }]\n   */\n  function mergeObjects(a, b) {\n    var merged, prop;\n\n    if (typeof b === 'undefined') {\n      return a;\n    }\n\n    // Check that we're dealing with two objects or two arrays.\n    if (isVanillaObject(a) && isVanillaObject(b)) {\n      merged = {};\n    } else if (isArray(a) && isArray(b)) {\n      merged = [];\n    } else {\n      // Otherwise there's no merging to do -- just replace a w/ b.\n      return b;\n    }\n\n    for (prop in a) {\n      merged[prop] = mergeObjects(a[prop], b[prop]);\n    }\n    for (prop in b) {\n      if (!merged[prop]) {\n        merged[prop] = b[prop];\n      }\n    }\n    return merged;\n  }\n\n  /**\n   * Checks whether an object is a \"vanilla\" object, i.e. {'foo': 'bar'} as\n   * opposed to an array, date, etc.\n   *\n   * @private\n   * @examples\n   * isVanillaObject({foo: 'bar'}); // => true\n   * isVanillaObject(new Date());   // => false\n   * isVanillaObject([1, 2, 3]);    // => false\n   */\n  function isVanillaObject(object) {\n    return object && object.constructor === Object;\n  }\n\n  /**\n   * Creates a {@link Sequence} consisting of the keys from this sequence whose\n   *     values are functions.\n   *\n   * @public\n   * @aka methods\n   * @returns {Sequence} The new sequence.\n   *\n   * @examples\n   * var dog = {\n   *   name: \"Fido\",\n   *   breed: \"Golden Retriever\",\n   *   bark: function() { console.log(\"Woof!\"); },\n   *   wagTail: function() { console.log(\"TODO: implement robotic dog interface\"); }\n   * };\n   *\n   * Lazy(dog).functions() // sequence: [\"bark\", \"wagTail\"]\n   */\n  ObjectLikeSequence.prototype.functions = function functions() {\n    return this\n      .filter(function(v, k) { return typeof(v) === \"function\"; })\n      .map(function(v, k) { return k; });\n  };\n\n  ObjectLikeSequence.prototype.methods = function methods() {\n    return this.functions();\n  };\n\n  /**\n   * Creates an {@link ObjectLikeSequence} consisting of the key/value pairs from\n   * this sequence whose keys are included in the given array of property names.\n   *\n   * @public\n   * @param {Array.<string>} properties An array of the properties to \"pick\" from this\n   *     sequence.\n   * @returns {ObjectLikeSequence} The new sequence.\n   *\n   * @examples\n   * var players = {\n   *   \"who\": \"first\",\n   *   \"what\": \"second\",\n   *   \"i don't know\": \"third\"\n   * };\n   *\n   * Lazy(players).pick([\"who\", \"what\"]) // sequence: { who: \"first\", what: \"second\" }\n   */\n  ObjectLikeSequence.prototype.pick = function pick(properties) {\n    return new PickSequence(this, properties);\n  };\n\n  /**\n   * @constructor\n   */\n  function PickSequence(parent, properties) {\n    this.parent     = parent;\n    this.properties = properties;\n  }\n\n  PickSequence.prototype = Object.create(ObjectLikeSequence.prototype);\n\n  PickSequence.prototype.get = function get(key) {\n    return arrayContains(this.properties, key) ? this.parent.get(key) : undefined;\n  };\n\n  PickSequence.prototype.each = function each(fn) {\n    var inArray    = arrayContains,\n        properties = this.properties;\n\n    return this.parent.each(function(value, key) {\n      if (inArray(properties, key)) {\n        return fn(value, key);\n      }\n    });\n  };\n\n  /**\n   * Creates an {@link ObjectLikeSequence} consisting of the key/value pairs from\n   * this sequence excluding those with the specified keys. Non-string keys are\n   * effectively ignored.\n   *\n   * @public\n   * @param {Array} properties An array of the properties to *omit* from this\n   *     sequence.\n   * @returns {ObjectLikeSequence} The new sequence.\n   *\n   * @examples\n   * var players = {\n   *   \"who\": \"first\",\n   *   \"what\": \"second\",\n   *   \"i don't know\": \"third\"\n   * };\n   *\n   * Lazy(players).omit([\"who\", \"what\"]) // sequence: { \"i don't know\": \"third\" }\n   *\n   * // Example to show handling of non-string keys\n   * Lazy({1: 2, true: false}).omit([1, true]) // sequence: { \"1\": 2, \"true\": false }\n   */\n  ObjectLikeSequence.prototype.omit = function omit(properties) {\n    return new OmitSequence(this, properties);\n  };\n\n  /**\n   * @constructor\n   */\n  function OmitSequence(parent, properties) {\n    this.parent     = parent;\n    this.properties = properties;\n  }\n\n  OmitSequence.prototype = Object.create(ObjectLikeSequence.prototype);\n\n  OmitSequence.prototype.get = function get(key) {\n    return arrayContains(this.properties, key) ? undefined : this.parent.get(key);\n  };\n\n  OmitSequence.prototype.each = function each(fn) {\n    var inArray    = arrayContains,\n        properties = this.properties;\n\n    return this.parent.each(function(value, key) {\n      if (!inArray(properties, key)) {\n        return fn(value, key);\n      }\n    });\n  };\n\n  /**\n   * Maps the key/value pairs in this sequence to arrays.\n   *\n   * @public\n   * @aka toArray\n   * @returns {Sequence} An sequence of `[key, value]` pairs.\n   *\n   * @examples\n   * var colorCodes = {\n   *   red: \"#f00\",\n   *   green: \"#0f0\",\n   *   blue: \"#00f\"\n   * };\n   *\n   * Lazy(colorCodes).pairs() // sequence: [[\"red\", \"#f00\"], [\"green\", \"#0f0\"], [\"blue\", \"#00f\"]]\n   */\n  ObjectLikeSequence.prototype.pairs = function pairs() {\n    return this.map(function(v, k) { return [k, v]; });\n  };\n\n  /**\n   * Creates an array from the key/value pairs in this sequence.\n   *\n   * @public\n   * @returns {Array} An array of `[key, value]` elements.\n   *\n   * @examples\n   * var colorCodes = {\n   *   red: \"#f00\",\n   *   green: \"#0f0\",\n   *   blue: \"#00f\"\n   * };\n   *\n   * Lazy(colorCodes).toArray() // => [[\"red\", \"#f00\"], [\"green\", \"#0f0\"], [\"blue\", \"#00f\"]]\n   */\n  ObjectLikeSequence.prototype.toArray = function toArray() {\n    return this.pairs().toArray();\n  };\n\n  /**\n   * Creates an object with the key/value pairs from this sequence.\n   *\n   * @public\n   * @returns {Object} An object with the same key/value pairs as this sequence.\n   *\n   * @examples\n   * var colorCodes = {\n   *   red: \"#f00\",\n   *   green: \"#0f0\",\n   *   blue: \"#00f\"\n   * };\n   *\n   * Lazy(colorCodes).toObject() // => { red: \"#f00\", green: \"#0f0\", blue: \"#00f\" }\n   */\n  ObjectLikeSequence.prototype.toObject = function toObject() {\n    return this.reduce(function(object, value, key) {\n      object[key] = value;\n      return object;\n    }, {});\n  };\n\n  // Now that we've fully initialized the ObjectLikeSequence prototype, we can\n  // actually set the prototypes for GroupedSequence, IndexedSequence, and\n  // CountedSequence.\n\n  GroupedSequence.prototype = Object.create(ObjectLikeSequence.prototype);\n\n  /**\n   * @examples\n   * var objects = [{a: 'x'}, {a: 'x'}];\n   *\n   * Lazy(objects).groupBy('a') // sequence: {x: [{a: 'x'}, {a: 'x'}]}\n   * Lazy(objects).groupBy('a').each(Lazy.noop) // true\n   */\n  GroupedSequence.prototype.each = function each(fn) {\n    var keyFn   = createCallback(this.keyFn),\n        valFn   = createCallback(this.valFn),\n        result;\n\n    result = this.parent.reduce(function(grouped,e) {\n      var key = keyFn(e),\n          val = valFn(e);\n      if (!isArray(grouped[key])) {\n        grouped[key] = [val];\n      } else {\n        grouped[key].push(val);\n      }\n      return grouped;\n    },{});\n\n    return transform(function(grouped) {\n      for (var key in grouped) {\n        if (fn(grouped[key], key) === false) {\n          return false;\n        }\n      }\n      return true;\n    }, result);\n  };\n\n  IndexedSequence.prototype = Object.create(ObjectLikeSequence.prototype);\n\n  IndexedSequence.prototype.each = function each(fn) {\n    var keyFn   = createCallback(this.keyFn),\n        valFn   = createCallback(this.valFn),\n        indexed = {};\n\n    return this.parent.each(function(e) {\n      var key = keyFn(e),\n          val = valFn(e);\n\n      if (!indexed[key]) {\n        indexed[key] = val;\n        return fn(val, key);\n      }\n    });\n  };\n\n  CountedSequence.prototype = Object.create(ObjectLikeSequence.prototype);\n\n  CountedSequence.prototype.each = function each(fn) {\n    var keyFn   = createCallback(this.keyFn),\n        counted = {};\n\n    this.parent.each(function(e) {\n      var key = keyFn(e);\n      if (!counted[key]) {\n        counted[key] = 1;\n      } else {\n        counted[key] += 1;\n      }\n    });\n\n    for (var key in counted) {\n      if (fn(counted[key], key) === false) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  /**\n   * Watches for all changes to a specified property (or properties) of an\n   * object and produces a sequence whose elements have the properties\n   * `{ property, value }` indicating which property changed and what it was\n   * changed to.\n   *\n   * Note that this method **only works on directly wrapped objects**; it will\n   * *not* work on any arbitrary {@link ObjectLikeSequence}.\n   *\n   * @public\n   * @param {(string|Array)=} propertyNames A property name or array of property\n   *     names to watch. If this parameter is `undefined`, all of the object's\n   *     current (enumerable) properties will be watched.\n   * @returns {Sequence} A sequence comprising `{ property, value }` objects\n   *     describing each change to the specified property/properties.\n   *\n   * @examples\n   * var obj = {},\n   *     changes = [];\n   *\n   * Lazy(obj).watch('foo').each(function(change) {\n   *   changes.push(change);\n   * });\n   *\n   * obj.foo = 1;\n   * obj.bar = 2;\n   * obj.foo = 3;\n   *\n   * obj.foo; // => 3\n   * changes; // => [{ property: 'foo', value: 1 }, { property: 'foo', value: 3 }]\n   */\n  ObjectLikeSequence.prototype.watch = function watch(propertyNames) {\n    throw new Error('You can only call #watch on a directly wrapped object.');\n  };\n\n  /**\n   * @constructor\n   */\n  function ObjectWrapper(source) {\n    this.source = source;\n  }\n\n  ObjectWrapper.prototype = Object.create(ObjectLikeSequence.prototype);\n\n  ObjectWrapper.prototype.root = function root() {\n    return this;\n  };\n\n  ObjectWrapper.prototype.isAsync = function isAsync() {\n    return false;\n  };\n\n  ObjectWrapper.prototype.get = function get(key) {\n    return this.source[key];\n  };\n\n  ObjectWrapper.prototype.each = function each(fn) {\n    var source = this.source,\n        keys = source ? Object.keys(source) : [],\n        length = keys.length,\n        key,\n        index;\n\n    for (index = 0; index < length; ++index) {\n      key = keys[index];\n\n      if (fn(source[key], key) === false) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  /**\n   * A `StringLikeSequence` represents a sequence of characters.\n   *\n   * The initial sequence you get by wrapping a string with `Lazy(string)` is a\n   * `StringLikeSequence`.\n   *\n   * All methods of `StringLikeSequence` that conceptually should return\n   * something like a string return another `StringLikeSequence`.\n   *\n   * @public\n   * @constructor\n   *\n   * @examples\n   * function upcase(str) { return str.toUpperCase(); }\n   *\n   * Lazy('foo')               // instanceof Lazy.StringLikeSequence\n   * Lazy('foo').toUpperCase() // instanceof Lazy.StringLikeSequence\n   * Lazy('foo').reverse()     // instanceof Lazy.StringLikeSequence\n   * Lazy('foo').take(2)       // instanceof Lazy.StringLikeSequence\n   * Lazy('foo').drop(1)       // instanceof Lazy.StringLikeSequence\n   * Lazy('foo').substring(1)  // instanceof Lazy.StringLikeSequence\n   *\n   * // Note that `map` does not create a `StringLikeSequence` because there's\n   * // no guarantee the mapping function will return characters. In the event\n   * // you do want to map a string onto a string-like sequence, use\n   * // `mapString`:\n   * Lazy('foo').map(Lazy.identity)       // instanceof Lazy.ArrayLikeSequence\n   * Lazy('foo').mapString(Lazy.identity) // instanceof Lazy.StringLikeSequence\n   */\n  function StringLikeSequence() {}\n\n  StringLikeSequence.prototype = Object.create(ArrayLikeSequence.prototype);\n\n  /**\n   * Create a new constructor function for a type inheriting from\n   * `StringLikeSequence`.\n   *\n   * @public\n   * @param {string|Array.<string>} methodName The name(s) of the method(s) to be\n   *     used for constructing the new sequence. The method will be attached to\n   *     the `StringLikeSequence` prototype so that it can be chained with any other\n   *     methods that return string-like sequences.\n   * @param {Object} overrides An object containing function overrides for this\n   *     new sequence type. Has the same requirements as\n   *     {@link ArrayLikeSequence.define}.\n   * @returns {Function} A constructor for a new type inheriting from\n   *     `StringLikeSequence`.\n   *\n   * @examples\n   * Lazy.StringLikeSequence.define(\"zomg\", {\n   *   length: function() {\n   *     return this.parent.length() + \"!!ZOMG!!!1\".length;\n   *   },\n   *\n   *   get: function(i) {\n   *     if (i < this.parent.length()) {\n   *       return this.parent.get(i);\n   *     }\n   *     return \"!!ZOMG!!!1\".charAt(i - this.parent.length());\n   *   }\n   * });\n   *\n   * Lazy('foo').zomg() // sequence: \"foo!!ZOMG!!!1\"\n   */\n  StringLikeSequence.define = function define(methodName, overrides) {\n    if (!overrides || typeof overrides.get !== 'function') {\n      throw new Error(\"A custom string-like sequence must implement *at least* get!\");\n    }\n\n    return defineSequenceType(StringLikeSequence, methodName, overrides);\n  };\n\n  StringLikeSequence.prototype.value = function value() {\n    return this.toString();\n  };\n\n  /**\n   * Returns an {@link IndexedIterator} that will step over each character in this\n   * sequence one by one.\n   *\n   * @returns {IndexedIterator} The iterator.\n   */\n  StringLikeSequence.prototype.getIterator = function getIterator() {\n    return new CharIterator(this);\n  };\n\n  /**\n   * @constructor\n   */\n  function CharIterator(source) {\n    this.source = Lazy(source);\n    this.index = -1;\n  }\n\n  CharIterator.prototype.current = function current() {\n    return this.source.charAt(this.index);\n  };\n\n  CharIterator.prototype.moveNext = function moveNext() {\n    return (++this.index < this.source.length());\n  };\n\n  /**\n   * Returns the character at the given index of this sequence, or the empty\n   * string if the specified index lies outside the bounds of the sequence.\n   *\n   * @public\n   * @param {number} i The index of this sequence.\n   * @returns {string} The character at the specified index.\n   *\n   * @examples\n   * Lazy(\"foo\").charAt(0)  // => \"f\"\n   * Lazy(\"foo\").charAt(-1) // => \"\"\n   * Lazy(\"foo\").charAt(10) // => \"\"\n   */\n  StringLikeSequence.prototype.charAt = function charAt(i) {\n    return this.get(i);\n  };\n\n  /**\n   * Returns the character code at the given index of this sequence, or `NaN` if\n   * the index lies outside the bounds of the sequence.\n   *\n   * @public\n   * @param {number} i The index of the character whose character code you want.\n   * @returns {number} The character code.\n   *\n   * @examples\n   * Lazy(\"abc\").charCodeAt(0)  // => 97\n   * Lazy(\"abc\").charCodeAt(-1) // => NaN\n   * Lazy(\"abc\").charCodeAt(10) // => NaN\n   */\n  StringLikeSequence.prototype.charCodeAt = function charCodeAt(i) {\n    var char = this.charAt(i);\n    if (!char) { return NaN; }\n\n    return char.charCodeAt(0);\n  };\n\n  /**\n   * Returns a {@link StringLikeSequence} comprising the characters from *this*\n   * sequence starting at `start` and ending at `stop` (exclusive), or---if\n   * `stop` is `undefined`, including the rest of the sequence.\n   *\n   * @public\n   * @param {number} start The index where this sequence should begin.\n   * @param {number=} stop The index (exclusive) where this sequence should end.\n   * @returns {StringLikeSequence} The new sequence.\n   *\n   * @examples\n   * Lazy(\"foo\").substring(1)      // sequence: \"oo\"\n   * Lazy(\"foo\").substring(-1)     // sequence: \"foo\"\n   * Lazy(\"hello\").substring(1, 3) // sequence: \"el\"\n   * Lazy(\"hello\").substring(1, 9) // sequence: \"ello\"\n   * Lazy(\"foo\").substring(0, 0)   // sequence: \"\"\n   * Lazy(\"foo\").substring(3, 3)   // sequence: \"\"\n   */\n  StringLikeSequence.prototype.substring = function substring(start, stop) {\n    return new StringSegment(this, start, stop);\n  };\n\n  /**\n   * @constructor\n   */\n  function StringSegment(parent, start, stop) {\n    this.parent = parent;\n    this.start  = Math.max(0, start);\n    this.stop   = stop;\n  }\n\n  StringSegment.prototype = Object.create(StringLikeSequence.prototype);\n\n  StringSegment.prototype.get = function get(i) {\n    return this.parent.get(i + this.start);\n  };\n\n  StringSegment.prototype.length = function length() {\n    return (typeof this.stop === \"number\" ? this.stop : this.parent.length()) - this.start;\n  };\n\n  /**\n   * An optimized version of {@link Sequence#first} that returns another\n   * {@link StringLikeSequence} (or just the first character, if `count` is\n   * undefined).\n   *\n   * @public\n   * @examples\n   * Lazy('foo').first()                // => 'f'\n   * Lazy('fo').first(2)                // sequence: 'fo'\n   * Lazy('foo').first(10)              // sequence: 'foo'\n   * Lazy('foo').toUpperCase().first()  // => 'F'\n   * Lazy('foo').toUpperCase().first(2) // sequence: 'FO'\n   */\n  StringLikeSequence.prototype.first = function first(count) {\n    if (typeof count === \"undefined\") {\n      return this.charAt(0);\n    }\n\n    return this.substring(0, count);\n  };\n\n  /**\n   * An optimized version of {@link Sequence#last} that returns another\n   * {@link StringLikeSequence} (or just the last character, if `count` is\n   * undefined).\n   *\n   * @public\n   * @examples\n   * Lazy('foo').last()                // => 'o'\n   * Lazy('foo').last(2)               // sequence: 'oo'\n   * Lazy('foo').last(10)              // sequence: 'foo'\n   * Lazy('foo').toUpperCase().last()  // => 'O'\n   * Lazy('foo').toUpperCase().last(2) // sequence: 'OO'\n   */\n  StringLikeSequence.prototype.last = function last(count) {\n    if (typeof count === \"undefined\") {\n      return this.charAt(this.length() - 1);\n    }\n\n    return this.substring(this.length() - count);\n  };\n\n  StringLikeSequence.prototype.drop = function drop(count) {\n    return this.substring(count);\n  };\n\n  /**\n   * Finds the index of the first occurrence of the given substring within this\n   * sequence, starting from the specified index (or the beginning of the\n   * sequence).\n   *\n   * @public\n   * @param {string} substring The substring to search for.\n   * @param {number=} startIndex The index from which to start the search.\n   * @returns {number} The first index where the given substring is found, or\n   *     -1 if it isn't in the sequence.\n   *\n   * @examples\n   * Lazy('canal').indexOf('a')    // => 1\n   * Lazy('canal').indexOf('a', 2) // => 3\n   * Lazy('canal').indexOf('ana')  // => 1\n   * Lazy('canal').indexOf('andy') // => -1\n   * Lazy('canal').indexOf('x')    // => -1\n   */\n  StringLikeSequence.prototype.indexOf = function indexOf(substring, startIndex) {\n    return this.toString().indexOf(substring, startIndex);\n  };\n\n  /**\n   * Finds the index of the last occurrence of the given substring within this\n   * sequence, starting from the specified index (or the end of the sequence)\n   * and working backwards.\n   *\n   * @public\n   * @param {string} substring The substring to search for.\n   * @param {number=} startIndex The index from which to start the search.\n   * @returns {number} The last index where the given substring is found, or\n   *     -1 if it isn't in the sequence.\n   *\n   * @examples\n   * Lazy('canal').lastIndexOf('a')    // => 3\n   * Lazy('canal').lastIndexOf('a', 2) // => 1\n   * Lazy('canal').lastIndexOf('ana')  // => 1\n   * Lazy('canal').lastIndexOf('andy') // => -1\n   * Lazy('canal').lastIndexOf('x')    // => -1\n   */\n  StringLikeSequence.prototype.lastIndexOf = function lastIndexOf(substring, startIndex) {\n    return this.toString().lastIndexOf(substring, startIndex);\n  };\n\n  /**\n   * Checks if this sequence contains a given substring.\n   *\n   * @public\n   * @param {string} substring The substring to check for.\n   * @returns {boolean} Whether or not this sequence contains `substring`.\n   *\n   * @examples\n   * Lazy('hello').contains('ell') // => true\n   * Lazy('hello').contains('')    // => true\n   * Lazy('hello').contains('abc') // => false\n   */\n  StringLikeSequence.prototype.contains = function contains(substring) {\n    return this.indexOf(substring) !== -1;\n  };\n\n  /**\n   * Checks if this sequence ends with a given suffix.\n   *\n   * @public\n   * @param {string} suffix The suffix to check for.\n   * @returns {boolean} Whether or not this sequence ends with `suffix`.\n   *\n   * @examples\n   * Lazy('foo').endsWith('oo')  // => true\n   * Lazy('foo').endsWith('')    // => true\n   * Lazy('foo').endsWith('abc') // => false\n   */\n  StringLikeSequence.prototype.endsWith = function endsWith(suffix) {\n    return this.substring(this.length() - suffix.length).toString() === suffix;\n  };\n\n  /**\n   * Checks if this sequence starts with a given prefix.\n   *\n   * @public\n   * @param {string} prefix The prefix to check for.\n   * @returns {boolean} Whether or not this sequence starts with `prefix`.\n   *\n   * @examples\n   * Lazy('foo').startsWith('fo')  // => true\n   * Lazy('foo').startsWith('')    // => true\n   * Lazy('foo').startsWith('abc') // => false\n   */\n  StringLikeSequence.prototype.startsWith = function startsWith(prefix) {\n    return this.substring(0, prefix.length).toString() === prefix;\n  };\n\n  /**\n   * Converts all of the characters in this string to uppercase.\n   *\n   * @public\n   * @returns {StringLikeSequence} A new sequence with the same characters as\n   *     this sequence, all uppercase.\n   *\n   * @examples\n   * function nextLetter(a) {\n   *   return String.fromCharCode(a.charCodeAt(0) + 1);\n   * }\n   *\n   * Lazy('foo').toUpperCase()                       // sequence: 'FOO'\n   * Lazy('foo').substring(1).toUpperCase()          // sequence: 'OO'\n   * Lazy('abc').mapString(nextLetter).toUpperCase() // sequence: 'BCD'\n   */\n  StringLikeSequence.prototype.toUpperCase = function toUpperCase() {\n    return this.mapString(function(char) { return char.toUpperCase(); });\n  };\n\n  /**\n   * Converts all of the characters in this string to lowercase.\n   *\n   * @public\n   * @returns {StringLikeSequence} A new sequence with the same characters as\n   *     this sequence, all lowercase.\n   *\n   * @examples\n   * function nextLetter(a) {\n   *   return String.fromCharCode(a.charCodeAt(0) + 1);\n   * }\n   *\n   * Lazy('FOO').toLowerCase()                       // sequence: 'foo'\n   * Lazy('FOO').substring(1).toLowerCase()          // sequence: 'oo'\n   * Lazy('ABC').mapString(nextLetter).toLowerCase() // sequence: 'bcd'\n   */\n  StringLikeSequence.prototype.toLowerCase = function toLowerCase() {\n    return this.mapString(function(char) { return char.toLowerCase(); });\n  };\n\n  /**\n   * Maps the characters of this sequence onto a new {@link StringLikeSequence}.\n   *\n   * @public\n   * @param {Function} mapFn The function used to map characters from this\n   *     sequence onto the new sequence.\n   * @returns {StringLikeSequence} The new sequence.\n   *\n   * @examples\n   * function upcase(char) { return char.toUpperCase(); }\n   *\n   * Lazy(\"foo\").mapString(upcase)               // sequence: \"FOO\"\n   * Lazy(\"foo\").mapString(upcase).charAt(0)     // => \"F\"\n   * Lazy(\"foo\").mapString(upcase).charCodeAt(0) // => 70\n   * Lazy(\"foo\").mapString(upcase).substring(1)  // sequence: \"OO\"\n   */\n  StringLikeSequence.prototype.mapString = function mapString(mapFn) {\n    return new MappedStringLikeSequence(this, mapFn);\n  };\n\n  /**\n   * @constructor\n   */\n  function MappedStringLikeSequence(parent, mapFn) {\n    this.parent = parent;\n    this.mapFn  = mapFn;\n  }\n\n  MappedStringLikeSequence.prototype = Object.create(StringLikeSequence.prototype);\n  MappedStringLikeSequence.prototype.get = IndexedMappedSequence.prototype.get;\n  MappedStringLikeSequence.prototype.length = IndexedMappedSequence.prototype.length;\n\n  /**\n   * Returns a copy of this sequence that reads back to front.\n   *\n   * @public\n   *\n   * @examples\n   * Lazy(\"abcdefg\").reverse() // sequence: \"gfedcba\"\n   */\n  StringLikeSequence.prototype.reverse = function reverse() {\n    return new ReversedStringLikeSequence(this);\n  };\n\n  /**\n   * @constructor\n   */\n  function ReversedStringLikeSequence(parent) {\n    this.parent = parent;\n  }\n\n  ReversedStringLikeSequence.prototype = Object.create(StringLikeSequence.prototype);\n  ReversedStringLikeSequence.prototype.get = IndexedReversedSequence.prototype.get;\n  ReversedStringLikeSequence.prototype.length = IndexedReversedSequence.prototype.length;\n\n  StringLikeSequence.prototype.toString = function toString() {\n    return this.join(\"\");\n  };\n\n  /**\n   * Creates a {@link Sequence} comprising all of the matches for the specified\n   * pattern in the underlying string.\n   *\n   * @public\n   * @param {RegExp} pattern The pattern to match.\n   * @returns {Sequence} A sequence of all the matches.\n   *\n   * @examples\n   * Lazy(\"abracadabra\").match(/a[bcd]/) // sequence: [\"ab\", \"ac\", \"ad\", \"ab\"]\n   * Lazy(\"fee fi fo fum\").match(/\\w+/)  // sequence: [\"fee\", \"fi\", \"fo\", \"fum\"]\n   * Lazy(\"hello\").match(/xyz/)          // sequence: []\n   */\n  StringLikeSequence.prototype.match = function match(pattern) {\n    return new StringMatchSequence(this, pattern);\n  };\n\n  /**\n   * @constructor\n   */\n  function StringMatchSequence(parent, pattern) {\n    this.parent = parent;\n    this.pattern = pattern;\n  }\n\n  StringMatchSequence.prototype = Object.create(Sequence.prototype);\n\n  StringMatchSequence.prototype.getIterator = function getIterator() {\n    return new StringMatchIterator(this.parent.toString(), this.pattern);\n  };\n\n  /**\n   * @constructor\n   */\n  function StringMatchIterator(source, pattern) {\n    this.source  = source;\n    this.pattern = cloneRegex(pattern);\n  }\n\n  StringMatchIterator.prototype.current = function current() {\n    return this.match[0];\n  };\n\n  StringMatchIterator.prototype.moveNext = function moveNext() {\n    return !!(this.match = this.pattern.exec(this.source));\n  };\n\n  /**\n   * Creates a {@link Sequence} comprising all of the substrings of this string\n   * separated by the given delimiter, which can be either a string or a regular\n   * expression.\n   *\n   * @public\n   * @param {string|RegExp} delimiter The delimiter to use for recognizing\n   *     substrings.\n   * @returns {Sequence} A sequence of all the substrings separated by the given\n   *     delimiter.\n   *\n   * @examples\n   * Lazy(\"foo\").split(\"\")                      // sequence: [\"f\", \"o\", \"o\"]\n   * Lazy(\"yo dawg\").split(\" \")                 // sequence: [\"yo\", \"dawg\"]\n   * Lazy(\"bah bah\\tblack  sheep\").split(/\\s+/) // sequence: [\"bah\", \"bah\", \"black\", \"sheep\"]\n   */\n  StringLikeSequence.prototype.split = function split(delimiter) {\n    return new SplitStringSequence(this, delimiter);\n  };\n\n  /**\n   * @constructor\n   */\n  function SplitStringSequence(parent, pattern) {\n    this.parent = parent;\n    this.pattern = pattern;\n  }\n\n  SplitStringSequence.prototype = Object.create(Sequence.prototype);\n\n  SplitStringSequence.prototype.getIterator = function getIterator() {\n    var source = this.parent.toString();\n\n    if (this.pattern instanceof RegExp) {\n      if (this.pattern.source === \"\" || this.pattern.source === \"(?:)\") {\n        return new CharIterator(source);\n      } else {\n        return new SplitWithRegExpIterator(source, this.pattern);\n      }\n    } else if (this.pattern === \"\") {\n      return new CharIterator(source);\n    } else {\n      return new SplitWithStringIterator(source, this.pattern);\n    }\n  };\n\n  /**\n   * @constructor\n   */\n  function SplitWithRegExpIterator(source, pattern) {\n    this.source  = source;\n    this.pattern = cloneRegex(pattern);\n  }\n\n  SplitWithRegExpIterator.prototype.current = function current() {\n    return this.source.substring(this.start, this.end);\n  };\n\n  SplitWithRegExpIterator.prototype.moveNext = function moveNext() {\n    if (!this.pattern) {\n      return false;\n    }\n\n    var match = this.pattern.exec(this.source);\n\n    if (match) {\n      this.start = this.nextStart ? this.nextStart : 0;\n      this.end = match.index;\n      this.nextStart = match.index + match[0].length;\n      return true;\n\n    } else if (this.pattern) {\n      this.start = this.nextStart;\n      this.end = undefined;\n      this.nextStart = undefined;\n      this.pattern = undefined;\n      return true;\n    }\n\n    return false;\n  };\n\n  /**\n   * @constructor\n   */\n  function SplitWithStringIterator(source, delimiter) {\n    this.source = source;\n    this.delimiter = delimiter;\n  }\n\n  SplitWithStringIterator.prototype.current = function current() {\n    return this.source.substring(this.leftIndex, this.rightIndex);\n  };\n\n  SplitWithStringIterator.prototype.moveNext = function moveNext() {\n    if (!this.finished) {\n      this.leftIndex = typeof this.leftIndex !== \"undefined\" ?\n        this.rightIndex + this.delimiter.length :\n        0;\n      this.rightIndex = this.source.indexOf(this.delimiter, this.leftIndex);\n    }\n\n    if (this.rightIndex === -1) {\n      this.finished = true;\n      this.rightIndex = undefined;\n      return true;\n    }\n\n    return !this.finished;\n  };\n\n  /**\n   * Wraps a string exposing {@link #match} and {@link #split} methods that return\n   * {@link Sequence} objects instead of arrays, improving on the efficiency of\n   * JavaScript's built-in `String#split` and `String.match` methods and\n   * supporting asynchronous iteration.\n   *\n   * @param {string} source The string to wrap.\n   * @constructor\n   */\n  function StringWrapper(source) {\n    this.source = source;\n  }\n\n  StringWrapper.prototype = Object.create(StringLikeSequence.prototype);\n\n  StringWrapper.prototype.root = function root() {\n    return this;\n  };\n\n  StringWrapper.prototype.isAsync = function isAsync() {\n    return false;\n  };\n\n  StringWrapper.prototype.get = function get(i) {\n    return this.source.charAt(i);\n  };\n\n  StringWrapper.prototype.length = function length() {\n    return this.source.length;\n  };\n\n  StringWrapper.prototype.toString = function toString() {\n    return this.source;\n  };\n\n  /**\n   * A `GeneratedSequence` does not wrap an in-memory collection but rather\n   * determines its elements on-the-fly during iteration according to a generator\n   * function.\n   *\n   * You create a `GeneratedSequence` by calling {@link Lazy.generate}.\n   *\n   * @public\n   * @constructor\n   * @param {function(number):*} generatorFn A function which accepts an index\n   *     and returns a value for the element at that position in the sequence.\n   * @param {number=} length The length of the sequence. If this argument is\n   *     omitted, the sequence will go on forever.\n   */\n  function GeneratedSequence(generatorFn, length) {\n    this.get = generatorFn;\n    this.fixedLength = length;\n  }\n\n  GeneratedSequence.prototype = Object.create(Sequence.prototype);\n\n  GeneratedSequence.prototype.isAsync = function isAsync() {\n    return false;\n  };\n\n  /**\n   * Returns the length of this sequence.\n   *\n   * @public\n   * @returns {number} The length, or `undefined` if this is an indefinite\n   *     sequence.\n   */\n  GeneratedSequence.prototype.length = function length() {\n    return this.fixedLength;\n  };\n\n  /**\n   * Iterates over the sequence produced by invoking this sequence's generator\n   * function up to its specified length, or, if length is `undefined`,\n   * indefinitely (in which case the sequence will go on forever--you would need\n   * to call, e.g., {@link Sequence#take} to limit iteration).\n   *\n   * @public\n   * @param {Function} fn The function to call on each output from the generator\n   *     function.\n   */\n  GeneratedSequence.prototype.each = function each(fn) {\n    var generatorFn = this.get,\n        length = this.fixedLength,\n        i = 0;\n\n    while (typeof length === \"undefined\" || i < length) {\n      if (fn(generatorFn(i), i++) === false) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  GeneratedSequence.prototype.getIterator = function getIterator() {\n    return new GeneratedIterator(this);\n  };\n\n  /**\n   * Iterates over a generated sequence. (This allows generated sequences to be\n   * iterated asynchronously.)\n   *\n   * @param {GeneratedSequence} sequence The generated sequence to iterate over.\n   * @constructor\n   */\n  function GeneratedIterator(sequence) {\n    this.sequence     = sequence;\n    this.index        = 0;\n    this.currentValue = null;\n  }\n\n  GeneratedIterator.prototype.current = function current() {\n    return this.currentValue;\n  };\n\n  GeneratedIterator.prototype.moveNext = function moveNext() {\n    var sequence = this.sequence;\n\n    if (typeof sequence.fixedLength === \"number\" && this.index >= sequence.fixedLength) {\n      return false;\n    }\n\n    this.currentValue = sequence.get(this.index++);\n    return true;\n  };\n\n  /**\n   * An `AsyncSequence` iterates over its elements asynchronously when\n   * {@link #each} is called.\n   *\n   * You get an `AsyncSequence` by calling {@link Sequence#async} on any\n   * sequence. Note that some sequence types may not support asynchronous\n   * iteration.\n   *\n   * Returning values\n   * ----------------\n   *\n   * Because of its asynchronous nature, an `AsyncSequence` cannot be used in the\n   * same way as other sequences for functions that return values directly (e.g.,\n   * `reduce`, `max`, `any`, even `toArray`).\n   *\n   * Instead, these methods return an `AsyncHandle` whose `onComplete` method\n   * accepts a callback that will be called with the final result once iteration\n   * has finished.\n   *\n   * Defining custom asynchronous sequences\n   * --------------------------------------\n   *\n   * There are plenty of ways to define an asynchronous sequence. Here's one.\n   *\n   * 1. First, implement an {@link Iterator}. This is an object whose prototype\n   *    has the methods {@link Iterator#moveNext} (which returns a `boolean`) and\n   *    {@link current} (which returns the current value).\n   * 2. Next, create a simple wrapper that inherits from `AsyncSequence`, whose\n   *    `getIterator` function returns an instance of the iterator type you just\n   *    defined.\n   *\n   * The default implementation for {@link #each} on an `AsyncSequence` is to\n   * create an iterator and then asynchronously call {@link Iterator#moveNext}\n   * (using `setImmediate`, if available, otherwise `setTimeout`) until the iterator\n   * can't move ahead any more.\n   *\n   * @public\n   * @constructor\n   * @param {Sequence} parent A {@link Sequence} to wrap, to expose asynchronous\n   *     iteration.\n   * @param {number=} interval How many milliseconds should elapse between each\n   *     element when iterating over this sequence. Note that this interval\n   *     applies even to the first value in the sequence; i.e., when calling\n   *     each(), this much time will elapse before the first element is\n   *     iterated.\n   *\n   *     If this argument is omitted, asynchronous iteration will be executed\n   *     as fast as possible.\n   */\n  function AsyncSequence(parent, interval) {\n    if (parent instanceof AsyncSequence) {\n      throw new Error(\"Sequence is already asynchronous!\");\n    }\n\n    this.parent         = parent;\n    this.interval       = interval;\n    this.onNextCallback = getOnNextCallback(interval);\n    this.cancelCallback = getCancelCallback(interval);\n  }\n\n  AsyncSequence.prototype = Object.create(Sequence.prototype);\n\n  AsyncSequence.prototype.isAsync = function isAsync() {\n    return true;\n  };\n\n  /**\n   * Throws an exception. You cannot manually iterate over an asynchronous\n   * sequence.\n   *\n   * @public\n   * @example\n   * Lazy([1, 2, 3]).async().getIterator() // throws\n   */\n  AsyncSequence.prototype.getIterator = function getIterator() {\n    throw new Error('An AsyncSequence does not support synchronous iteration.');\n  };\n\n  /**\n   * An asynchronous version of {@link Sequence#each}.\n   *\n   * @public\n   * @param {Function} fn The function to invoke asynchronously on each element in\n   *     the sequence one by one.\n   * @returns {AsyncHandle} An {@link AsyncHandle} providing the ability to\n   *     cancel the asynchronous iteration (by calling `cancel()`) as well as\n   *     supply callback(s) for when an error is encountered (`onError`) or when\n   *     iteration is complete (`onComplete`).\n   */\n  AsyncSequence.prototype.each = function each(fn) {\n    var iterator = this.parent.getIterator(),\n        onNextCallback = this.onNextCallback,\n        cancelCallback = this.cancelCallback,\n        i = 0;\n\n    var handle = new AsyncHandle(function cancel() {\n      if (cancellationId) {\n        cancelCallback(cancellationId);\n      }\n    });\n\n    var cancellationId = onNextCallback(function iterate() {\n      cancellationId = null;\n\n      try {\n        if (iterator.moveNext() && fn(iterator.current(), i++) !== false) {\n          cancellationId = onNextCallback(iterate);\n\n        } else {\n          handle._resolve();\n        }\n\n      } catch (e) {\n        handle._reject(e);\n      }\n    });\n\n    return handle;\n  };\n\n  /**\n   * An `AsyncHandle` provides a [Promises/A+](http://promises-aplus.github.io/promises-spec/)\n   * compliant interface for an {@link AsyncSequence} that is currently (or was)\n   * iterating over its elements.\n   *\n   * In addition to behaving as a promise, an `AsyncHandle` provides the ability\n   * to {@link AsyncHandle#cancel} iteration (if `cancelFn` is provided)\n   * and also offers convenient {@link AsyncHandle#onComplete} and\n   * {@link AsyncHandle#onError} methods to attach listeners for when iteration\n   * is complete or an error is thrown during iteration.\n   *\n   * @public\n   * @param {Function} cancelFn A function to cancel asynchronous iteration.\n   *     This is passed in to support different cancellation mechanisms for\n   *     different forms of asynchronous sequences (e.g., timeout-based\n   *     sequences, sequences based on I/O, etc.).\n   * @constructor\n   *\n   * @example\n   * // Create a sequence of 100,000 random numbers, in chunks of 100.\n   * var sequence = Lazy.generate(Math.random)\n   *   .chunk(100)\n   *   .async()\n   *   .take(1000);\n   *\n   * // Reduce-style operations -- i.e., operations that return a *value* (as\n   * // opposed to a *sequence*) -- return an AsyncHandle for async sequences.\n   * var handle = sequence.toArray();\n   *\n   * handle.onComplete(function(array) {\n   *   // Do something w/ 1,000-element array.\n   * });\n   *\n   * // Since an AsyncHandle is a promise, you can also use it to create\n   * // subsequent promises using `then` (see the Promises/A+ spec for more\n   * // info).\n   * var flattened = handle.then(function(array) {\n   *   return Lazy(array).flatten();\n   * });\n   */\n  function AsyncHandle(cancelFn) {\n    this.resolveListeners = [];\n    this.rejectListeners = [];\n    this.state = PENDING;\n    this.cancelFn = cancelFn;\n  }\n\n  // Async handle states\n  var PENDING  = 1,\n      RESOLVED = 2,\n      REJECTED = 3;\n\n  AsyncHandle.prototype.then = function then(onFulfilled, onRejected) {\n    var promise = new AsyncHandle(this.cancelFn);\n\n    this.resolveListeners.push(function(value) {\n      try {\n        if (typeof onFulfilled !== 'function') {\n          resolve(promise, value);\n          return;\n        }\n\n        resolve(promise, onFulfilled(value));\n\n      } catch (e) {\n        promise._reject(e);\n      }\n    });\n\n    this.rejectListeners.push(function(reason) {\n      try {\n        if (typeof onRejected !== 'function') {\n          promise._reject(reason);\n          return;\n        }\n\n        resolve(promise, onRejected(reason));\n\n      } catch (e) {\n        promise._reject(e);\n      }\n    });\n\n    if (this.state === RESOLVED) {\n      this._resolve(this.value);\n    }\n\n    if (this.state === REJECTED) {\n      this._reject(this.reason);\n    }\n\n    return promise;\n  };\n\n  AsyncHandle.prototype._resolve = function _resolve(value) {\n    if (this.state === REJECTED) {\n      return;\n    }\n\n    if (this.state === PENDING) {\n      this.state = RESOLVED;\n      this.value = value;\n    }\n\n    consumeListeners(this.resolveListeners, this.value);\n  };\n\n  AsyncHandle.prototype._reject = function _reject(reason) {\n    if (this.state === RESOLVED) {\n      return;\n    }\n\n    if (this.state === PENDING) {\n      this.state = REJECTED;\n      this.reason = reason;\n    }\n\n    consumeListeners(this.rejectListeners, this.reason);\n  };\n\n  /**\n   * Cancels asynchronous iteration.\n   *\n   * @public\n   */\n  AsyncHandle.prototype.cancel = function cancel() {\n    if (this.cancelFn) {\n      this.cancelFn();\n      this.cancelFn = null;\n      this._resolve(false);\n    }\n  };\n\n  /**\n   * Updates the handle with a callback to execute when iteration is completed.\n   *\n   * @public\n   * @param {Function} callback The function to call when the asynchronous\n   *     iteration is completed.\n   * @return {AsyncHandle} A reference to the handle (for chaining).\n   */\n  AsyncHandle.prototype.onComplete = function onComplete(callback) {\n    this.resolveListeners.push(callback);\n    return this;\n  };\n\n  /**\n   * Updates the handle with a callback to execute if/when any error is\n   * encountered during asynchronous iteration.\n   *\n   * @public\n   * @param {Function} callback The function to call, with any associated error\n   *     object, when an error occurs.\n   * @return {AsyncHandle} A reference to the handle (for chaining).\n   */\n  AsyncHandle.prototype.onError = function onError(callback) {\n    this.rejectListeners.push(callback);\n    return this;\n  };\n\n  /**\n   * Promise resolution procedure:\n   * http://promises-aplus.github.io/promises-spec/#the_promise_resolution_procedure\n   */\n  function resolve(promise, x) {\n    if (promise === x) {\n      promise._reject(new TypeError('Cannot resolve a promise to itself'));\n      return;\n    }\n\n    if (x instanceof AsyncHandle) {\n      x.then(\n        function(value) { resolve(promise, value); },\n        function(reason) { promise._reject(reason); }\n      );\n      return;\n    }\n\n    var then;\n    try {\n      then = (/function|object/).test(typeof x) && x != null && x.then;\n    } catch (e) {\n      promise._reject(e);\n      return;\n    }\n\n    var thenableState = PENDING;\n    if (typeof then === 'function') {\n      try {\n        then.call(\n          x,\n          function resolvePromise(value) {\n            if (thenableState !== PENDING) {\n              return;\n            }\n            thenableState = RESOLVED;\n            resolve(promise, value);\n          },\n          function rejectPromise(reason) {\n            if (thenableState !== PENDING) {\n              return;\n            }\n            thenableState = REJECTED;\n            promise._reject(reason);\n          }\n        );\n      } catch (e) {\n        if (thenableState !== PENDING) {\n          return;\n        }\n\n        promise._reject(e);\n      }\n\n      return;\n    }\n\n    promise._resolve(x);\n  }\n\n  function consumeListeners(listeners, value, callback) {\n    callback || (callback = getOnNextCallback());\n\n    callback(function() {\n      if (listeners.length > 0) {\n        listeners.shift()(value);\n        consumeListeners(listeners, value, callback);\n      }\n    });\n  }\n\n  function getOnNextCallback(interval) {\n    if (typeof interval === \"undefined\") {\n      if (typeof setImmediate === \"function\") {\n        return setImmediate;\n      }\n    }\n\n    interval = interval || 0;\n    return function(fn) {\n      return setTimeout(fn, interval);\n    };\n  }\n\n  function getCancelCallback(interval) {\n    if (typeof interval === \"undefined\") {\n      if (typeof clearImmediate === \"function\") {\n        return clearImmediate;\n      }\n    }\n\n    return clearTimeout;\n  }\n\n  /**\n   * Transform a value, whether the value is retrieved asynchronously or directly.\n   *\n   * @private\n   * @param {Function} fn The function that transforms the value.\n   * @param {*} value The value to be transformed. This can be an {@link AsyncHandle} when the value\n   *     is retrieved asynchronously, otherwise it can be anything.\n   * @returns {*} An {@link AsyncHandle} when `value` is also an {@link AsyncHandle}, otherwise\n   *     whatever `fn` resulted in.\n   */\n  function transform(fn, value) {\n    if (value instanceof AsyncHandle) {\n      return value.then(function() { fn(value); });\n    }\n    return fn(value);\n  }\n\n  /**\n   * An async version of {@link Sequence#reverse}.\n   */\n  AsyncSequence.prototype.reverse = function reverse() {\n    return this.parent.reverse().async();\n  };\n\n  /**\n   * A version of {@link Sequence#find} which returns an {@link AsyncHandle}.\n   *\n   * @public\n   * @param {Function} predicate A function to call on (potentially) every element\n   *     in the sequence.\n   * @returns {AsyncHandle} An {@link AsyncHandle} (promise) which resolves to\n   *     the found element, once it is detected, or else `undefined`.\n   */\n  AsyncSequence.prototype.find = function find(predicate) {\n    var found;\n\n    var handle = this.each(function(e, i) {\n      if (predicate(e, i)) {\n        found = e;\n        return false;\n      }\n    });\n\n    return handle.then(function() { return found; });\n  };\n\n  /**\n   * A version of {@link Sequence#indexOf} which returns an {@link AsyncHandle}.\n   *\n   * @public\n   * @param {*} value The element to search for in the sequence.\n   * @returns {AsyncHandle} An {@link AsyncHandle} (promise) which resolves to\n   *     the found index, once it is detected, or -1.\n   */\n  AsyncSequence.prototype.indexOf = function indexOf(value) {\n    var foundIndex = -1;\n\n    var handle = this.each(function(e, i) {\n      if (e === value) {\n        foundIndex = i;\n        return false;\n      }\n    });\n\n    return handle.then(function() {\n      return foundIndex;\n    });\n  };\n\n  /**\n   * A version of {@link Sequence#contains} which returns an {@link AsyncHandle}.\n   *\n   * @public\n   * @param {*} value The element to search for in the sequence.\n   * @returns {AsyncHandle} An {@link AsyncHandle} (promise) which resolves to\n   *     either `true` or `false` to indicate whether the element was found.\n   */\n  AsyncSequence.prototype.contains = function contains(value) {\n    var found = false;\n\n    var handle = this.each(function(e) {\n      if (e === value) {\n        found = true;\n        return false;\n      }\n    });\n\n    return handle.then(function() {\n      return found;\n    });\n  };\n\n  /**\n   * Just return the same sequence for `AsyncSequence#async` (I see no harm in this).\n   */\n  AsyncSequence.prototype.async = function async() {\n    return this;\n  };\n\n  /**\n   * See {@link ObjectLikeSequence#watch} for docs.\n   */\n  ObjectWrapper.prototype.watch = function watch(propertyNames) {\n    return new WatchedPropertySequence(this.source, propertyNames);\n  };\n\n  function WatchedPropertySequence(object, propertyNames) {\n    this.listeners = [];\n\n    if (!propertyNames) {\n      propertyNames = Lazy(object).keys().toArray();\n    } else if (!isArray(propertyNames)) {\n      propertyNames = [propertyNames];\n    }\n\n    var listeners = this.listeners,\n        index     = 0;\n\n    Lazy(propertyNames).each(function(propertyName) {\n      var propertyValue = object[propertyName];\n\n      Object.defineProperty(object, propertyName, {\n        get: function() {\n          return propertyValue;\n        },\n\n        set: function(value) {\n          for (var i = listeners.length - 1; i >= 0; --i) {\n            if (listeners[i]({ property: propertyName, value: value }, index) === false) {\n              listeners.splice(i, 1);\n            }\n          }\n          propertyValue = value;\n          ++index;\n        }\n      });\n    });\n  }\n\n  WatchedPropertySequence.prototype = Object.create(AsyncSequence.prototype);\n\n  WatchedPropertySequence.prototype.each = function each(fn) {\n    this.listeners.push(fn);\n  };\n\n  /**\n   * A StreamLikeSequence comprises a sequence of 'chunks' of data, which are\n   * typically multiline strings.\n   *\n   * @constructor\n   */\n  function StreamLikeSequence() {}\n\n  StreamLikeSequence.prototype = Object.create(AsyncSequence.prototype);\n\n  StreamLikeSequence.prototype.isAsync = function isAsync() {\n    return true;\n  };\n\n  StreamLikeSequence.prototype.split = function split(delimiter) {\n    return new SplitStreamSequence(this, delimiter);\n  };\n\n  /**\n   * @constructor\n   */\n  function SplitStreamSequence(parent, delimiter) {\n    this.parent    = parent;\n    this.delimiter = delimiter;\n    this.each      = this.getEachForDelimiter(delimiter);\n  }\n\n  SplitStreamSequence.prototype = Object.create(Sequence.prototype);\n\n  SplitStreamSequence.prototype.getEachForDelimiter = function getEachForDelimiter(delimiter) {\n    if (delimiter instanceof RegExp) {\n      return this.regexEach;\n    }\n\n    return this.stringEach;\n  };\n\n  SplitStreamSequence.prototype.regexEach = function each(fn) {\n    var delimiter = cloneRegex(this.delimiter),\n        buffer = '',\n        start = 0, end,\n        index = 0;\n\n    var handle = this.parent.each(function(chunk) {\n      buffer += chunk;\n\n      var match;\n      while (match = delimiter.exec(buffer)) {\n        end = match.index;\n        if (fn(buffer.substring(start, end), index++) === false) {\n          return false;\n        }\n        start = end + match[0].length;\n      }\n\n      buffer = buffer.substring(start);\n      start = 0;\n    });\n\n    handle.onComplete(function() {\n      if (buffer.length > 0) {\n        fn(buffer, index++);\n      }\n    });\n\n    return handle;\n  };\n\n  SplitStreamSequence.prototype.stringEach = function each(fn) {\n    var delimiter  = this.delimiter,\n        pieceIndex = 0,\n        buffer = '',\n        bufferIndex = 0;\n\n    var handle = this.parent.each(function(chunk) {\n      buffer += chunk;\n      var delimiterIndex;\n      while ((delimiterIndex = buffer.indexOf(delimiter)) >= 0) {\n        var piece = buffer.substr(0,delimiterIndex);\n        buffer = buffer.substr(delimiterIndex+delimiter.length);\n        if (fn(piece,pieceIndex++) === false) {\n          return false;\n        }\n      }\n      return true;\n    });\n\n    handle.onComplete(function() {\n      fn(buffer, pieceIndex++);\n    });\n\n    return handle;\n  };\n\n  StreamLikeSequence.prototype.lines = function lines() {\n    return this.split(\"\\n\");\n  };\n\n  StreamLikeSequence.prototype.match = function match(pattern) {\n    return new MatchedStreamSequence(this, pattern);\n  };\n\n  /**\n   * @constructor\n   */\n  function MatchedStreamSequence(parent, pattern) {\n    this.parent  = parent;\n    this.pattern = cloneRegex(pattern);\n  }\n\n  MatchedStreamSequence.prototype = Object.create(AsyncSequence.prototype);\n\n  MatchedStreamSequence.prototype.each = function each(fn) {\n    var pattern = this.pattern,\n        done      = false,\n        i         = 0;\n\n    return this.parent.each(function(chunk) {\n      Lazy(chunk).match(pattern).each(function(match) {\n        if (fn(match, i++) === false) {\n          done = true;\n          return false;\n        }\n      });\n\n      return !done;\n    });\n  };\n\n  /**\n   * Defines a wrapper for custom {@link StreamLikeSequence}s. This is useful\n   * if you want a way to handle a stream of events as a sequence, but you can't\n   * use Lazy's existing interface (i.e., you're wrapping an object from a\n   * library with its own custom events).\n   *\n   * This method defines a *factory*: that is, it produces a function that can\n   * be used to wrap objects and return a {@link Sequence}. Hopefully the\n   * example will make this clear.\n   *\n   * @public\n   * @param {Function} initializer An initialization function called on objects\n   *     created by this factory. `this` will be bound to the created object,\n   *     which is an instance of {@link StreamLikeSequence}. Use `emit` to\n   *     generate data for the sequence.\n   * @returns {Function} A function that creates a new {@link StreamLikeSequence},\n   *     initializes it using the specified function, and returns it.\n   *\n   * @example\n   * var factory = Lazy.createWrapper(function(eventSource) {\n   *   var sequence = this;\n   *\n   *   eventSource.handleEvent(function(data) {\n   *     sequence.emit(data);\n   *   });\n   * });\n   *\n   * var eventEmitter = {\n   *   triggerEvent: function(data) {\n   *     eventEmitter.eventHandler(data);\n   *   },\n   *   handleEvent: function(handler) {\n   *     eventEmitter.eventHandler = handler;\n   *   },\n   *   eventHandler: function() {}\n   * };\n   *\n   * var events = [];\n   *\n   * factory(eventEmitter).each(function(e) {\n   *   events.push(e);\n   * });\n   *\n   * eventEmitter.triggerEvent('foo');\n   * eventEmitter.triggerEvent('bar');\n   *\n   * events // => ['foo', 'bar']\n   */\n  Lazy.createWrapper = function createWrapper(initializer) {\n    var ctor = function() {\n      this.listeners = [];\n    };\n\n    ctor.prototype = Object.create(StreamLikeSequence.prototype);\n\n    ctor.prototype.each = function(listener) {\n      this.listeners.push(listener);\n    };\n\n    ctor.prototype.emit = function(data) {\n      var listeners = this.listeners;\n\n      for (var len = listeners.length, i = len - 1; i >= 0; --i) {\n        if (listeners[i](data) === false) {\n          listeners.splice(i, 1);\n        }\n      }\n    };\n\n    return function() {\n      var sequence = new ctor();\n      initializer.apply(sequence, arguments);\n      return sequence;\n    };\n  };\n\n  /**\n   * Creates a {@link GeneratedSequence} using the specified generator function\n   * and (optionally) length.\n   *\n   * @public\n   * @param {function(number):*} generatorFn The function used to generate the\n   *     sequence. This function accepts an index as a parameter and should return\n   *     a value for that index in the resulting sequence.\n   * @param {number=} length The length of the sequence, for sequences with a\n   *     definite length.\n   * @returns {GeneratedSequence} The generated sequence.\n   *\n   * @examples\n   * var randomNumbers = Lazy.generate(Math.random);\n   * var countingNumbers = Lazy.generate(function(i) { return i + 1; }, 5);\n   *\n   * randomNumbers          // instanceof Lazy.GeneratedSequence\n   * randomNumbers.length() // => undefined\n   * countingNumbers          // sequence: [1, 2, 3, 4, 5]\n   * countingNumbers.length() // => 5\n   */\n  Lazy.generate = function generate(generatorFn, length) {\n    return new GeneratedSequence(generatorFn, length);\n  };\n\n  /**\n   * Creates a sequence from a given starting value, up to a specified stopping\n   * value, incrementing by a given step. Invalid values for any of these\n   * arguments (e.g., a step of 0) result in an empty sequence.\n   *\n   * @public\n   * @returns {GeneratedSequence} The sequence defined by the given ranges.\n   *\n   * @examples\n   * Lazy.range(3)         // sequence: [0, 1, 2]\n   * Lazy.range(1, 4)      // sequence: [1, 2, 3]\n   * Lazy.range(2, 10, 2)  // sequence: [2, 4, 6, 8]\n   * Lazy.range(5, 1, 2)   // sequence: []\n   * Lazy.range(5, 15, -2) // sequence: []\n   * Lazy.range(3, 10, 3)  // sequence: [3, 6, 9]\n   * Lazy.range(5, 2)      // sequence: [5, 4, 3]\n   * Lazy.range(7, 2, -2)  // sequence: [7, 5, 3]\n   * Lazy.range(3, 5, 0)   // sequence: []\n   */\n  Lazy.range = function range() {\n    var start = arguments.length > 1 ? arguments[0] : 0,\n        stop  = arguments.length > 1 ? arguments[1] : arguments[0],\n        step  = arguments.length > 2 && arguments[2];\n\n    if (step === false) {\n      step = stop > start ? 1 : -1;\n    }\n\n    if (step === 0) {\n      return Lazy([]);\n    }\n\n    return Lazy.generate(function(i) { return start + (step * i); })\n      .take(Math.ceil((stop - start) / step));\n  };\n\n  /**\n   * Creates a sequence consisting of the given value repeated a specified number\n   * of times.\n   *\n   * @public\n   * @param {*} value The value to repeat.\n   * @param {number=} count The number of times the value should be repeated in\n   *     the sequence. If this argument is omitted, the value will repeat forever.\n   * @returns {GeneratedSequence} The sequence containing the repeated value.\n   *\n   * @examples\n   * Lazy.repeat(\"hi\", 3)          // sequence: [\"hi\", \"hi\", \"hi\"]\n   * Lazy.repeat(\"young\")          // instanceof Lazy.GeneratedSequence\n   * Lazy.repeat(\"young\").length() // => undefined\n   * Lazy.repeat(\"young\").take(3)  // sequence: [\"young\", \"young\", \"young\"]\n   */\n  Lazy.repeat = function repeat(value, count) {\n    return Lazy.generate(function() { return value; }, count);\n  };\n\n  Lazy.Sequence           = Sequence;\n  Lazy.ArrayLikeSequence  = ArrayLikeSequence;\n  Lazy.ObjectLikeSequence = ObjectLikeSequence;\n  Lazy.StringLikeSequence = StringLikeSequence;\n  Lazy.StreamLikeSequence = StreamLikeSequence;\n  Lazy.GeneratedSequence  = GeneratedSequence;\n  Lazy.AsyncSequence      = AsyncSequence;\n  Lazy.AsyncHandle        = AsyncHandle;\n\n  /*** Useful utility methods ***/\n\n  /**\n   * Creates a shallow copy of an array or object.\n   *\n   * @examples\n   * var array  = [1, 2, 3], clonedArray,\n   *     object = { foo: 1, bar: 2 }, clonedObject;\n   *\n   * clonedArray = Lazy.clone(array); // => [1, 2, 3]\n   * clonedArray.push(4); // clonedArray == [1, 2, 3, 4]\n   * array; // => [1, 2, 3]\n   *\n   * clonedObject = Lazy.clone(object); // => { foo: 1, bar: 2 }\n   * clonedObject.baz = 3; // clonedObject == { foo: 1, bar: 2, baz: 3 }\n   * object; // => { foo: 1, bar: 2 }\n   */\n  Lazy.clone = function clone(target) {\n    return Lazy(target).value();\n  };\n\n  /**\n   * Marks a method as deprecated, so calling it will issue a console warning.\n   */\n  Lazy.deprecate = function deprecate(message, fn) {\n    return function() {\n      console.warn(message);\n      return fn.apply(this, arguments);\n    };\n  };\n\n  var isArray    = Array.isArray || function(x) { return x instanceof Array; },\n      arrayPop   = Array.prototype.pop,\n      arraySlice = Array.prototype.slice;\n\n  /**\n   * If you know what function currying is, then you know what this does.\n   *\n   * @param {Function} fn The function to curry.\n   * @returns {Function} The curried function.\n   *\n   * @examples\n   * function abc(a, b, c) { return [a, b, c]; }\n   * var curried = Lazy.curry(abc);\n   *\n   * curried(1)(2)(3) // => [1, 2, 3]\n   * curried(1, 2)(3) // => [1, 2, 3]\n   * curried(1)(2, 3) // => [1, 2, 3]\n   * curried(1, 2, 3) // => [1, 2, 3]\n   * Lazy([1, 2, 3]).map(curried(1, 2)) // sequence: [[1, 2, 1], [1, 2, 2], [1, 2, 3]]\n   */\n  function curry(fn, arity) {\n    arity || (arity = fn.length);\n\n    function curried(args) {\n      if (args.length < arity) {\n        return function() {\n          return curried(args.concat(arraySlice.call(arguments, 0)));\n        };\n      }\n\n      return fn.apply(null, args);\n    }\n\n    return curried([]);\n  }\n\n  /**\n   * Same as Lazy.curry, but... you know... from the right.\n   *\n   * @param {Function} fn The function to curry from the right.\n   * @returns {Function} The curried-from-the-right function.\n   *\n   * @examples\n   * function abc(a, b, c) { return [a, b, c]; }\n   * var curriedRight = Lazy.curryRight(abc);\n   *\n   * curriedRight(3)(2)(1) // => [1, 2, 3]\n   * curriedRight(2, 3)(1) // => [1, 2, 3]\n   * curriedRight(3)(1, 2) // => [1, 2, 3]\n   * curriedRight(1, 2, 3) // => [1, 2, 3]\n   * Lazy([1, 2, 3]).map(curriedRight(3)) // sequence: [[1, 0, 3], [2, 1, 3], [3, 2, 3]]\n   */\n  function curryRight(fn, arity) {\n    arity || (arity = fn.length);\n\n    function curriedRight(args) {\n      if (args.length < arity) {\n        return function() {\n          return curriedRight(arraySlice.call(arguments, 0).concat(args));\n        };\n      }\n\n      return fn.apply(null, args);\n    }\n\n    return curriedRight([]);\n  }\n\n  Lazy.curry = curry;\n  Lazy.curryRight = curryRight;\n\n  /**\n   * Creates a callback... you know, Lo-Dash style.\n   *\n   * - for functions, just returns the function\n   * - for strings, returns a pluck-style callback\n   * - for objects, returns a where-style callback\n   *\n   * @param {Function|string|Object} callback A function, string, or object to\n   *     convert to a callback.\n   * @param {*} defaultReturn If the callback is undefined, a default return\n   *     value to use for the function.\n   * @returns {Function} The callback function.\n   *\n   * @examples\n   * Lazy.createCallback(function() {})                  // instanceof Function\n   * Lazy.createCallback('foo')                          // instanceof Function\n   * Lazy.createCallback('foo')({ foo: 'bar'})           // => 'bar'\n   * Lazy.createCallback({ foo: 'bar' })({ foo: 'bar' }) // => true\n   * Lazy.createCallback({ foo: 'bar' })({ foo: 'baz' }) // => false\n   */\n  function createCallback(callback, defaultValue) {\n    switch (typeof callback) {\n      case \"function\":\n        return callback;\n\n      case \"string\":\n        return function(e) {\n          return e[callback];\n        };\n\n      case \"object\":\n        return function(e) {\n          return Lazy(callback).all(function(value, key) {\n            return e[key] === value;\n          });\n        };\n\n      case \"undefined\":\n        return defaultValue ?\n          function() { return defaultValue; } :\n          Lazy.identity;\n\n      default:\n        throw new Error(\"Don't know how to make a callback from a \" + typeof callback + \"!\");\n    }\n  }\n\n  Lazy.createCallback = createCallback;\n\n  /**\n   * Takes a function that returns a value for one argument and produces a\n   * function that compares two arguments.\n   *\n   * @param {Function|string|Object} callback A function, string, or object to\n   *     convert to a callback using `createCallback`.\n   * @returns {Function} A function that accepts two values and returns 1 if\n   *     the first is greater, -1 if the second is greater, or 0 if they are\n   *     equivalent.\n   *\n   * @examples\n   * Lazy.createComparator('a')({ a: 1 }, { a: 2 });       // => -1\n   * Lazy.createComparator('a')({ a: 6 }, { a: 2 });       // => 1\n   * Lazy.createComparator('a')({ a: 1 }, { a: 1 });       // => 0\n   * Lazy.createComparator()(3, 5);                        // => -1\n   * Lazy.createComparator()(7, 5);                        // => 1\n   * Lazy.createComparator()(3, 3);                        // => 0\n   */\n  function createComparator(callback) {\n    if (!callback) { return compare; }\n\n    callback = createCallback(callback);\n\n    return function(x, y) {\n      return compare(callback(x), callback(y));\n    };\n  }\n\n  Lazy.createComparator = createComparator;\n\n  /**\n   * Takes a function and returns a function with the same logic but the\n   * arguments reversed. Only applies to functions w/ arity=2 as this is private\n   * and I can do what I want.\n   *\n   * @private\n   * @param {Function} fn The function to \"reverse\"\n   * @returns {Function} The \"reversed\" function\n   *\n   * @examples\n   * reverseArguments(function(x, y) { return x + y; })('a', 'b'); // => 'ba'\n   */\n  function reverseArguments(fn) {\n    return function(x, y) { return fn(y, x); };\n  }\n\n  /**\n   * Creates a Set containing the specified values.\n   *\n   * @param {...Array} values One or more array(s) of values used to populate the\n   *     set.\n   * @returns {Set} A new set containing the values passed in.\n   */\n  function createSet(values) {\n    var set = new Set();\n    Lazy(values || []).flatten().each(function(e) {\n      set.add(e);\n    });\n    return set;\n  }\n\n  /**\n   * Compares two elements for sorting purposes.\n   *\n   * @private\n   * @param {*} x The left element to compare.\n   * @param {*} y The right element to compare.\n   * @returns {number} 1 if x > y, -1 if x < y, or 0 if x and y are equal.\n   *\n   * @examples\n   * compare(1, 2)     // => -1\n   * compare(1, 1)     // => 0\n   * compare(2, 1)     // => 1\n   * compare('a', 'b') // => -1\n   */\n  function compare(x, y) {\n    if (x === y) {\n      return 0;\n    }\n\n    return x > y ? 1 : -1;\n  }\n\n  /**\n   * Iterates over every element in an array.\n   *\n   * @param {Array} array The array.\n   * @param {Function} fn The function to call on every element, which can return\n   *     false to stop the iteration early.\n   * @returns {boolean} True if every element in the entire sequence was iterated,\n   *     otherwise false.\n   */\n  function forEach(array, fn) {\n    var i = -1,\n        len = array.length;\n\n    while (++i < len) {\n      if (fn(array[i], i) === false) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  function getFirst(sequence) {\n    var result;\n    sequence.each(function(e) {\n      result = e;\n      return false;\n    });\n    return result;\n  }\n\n  /**\n   * Checks if an element exists in an array.\n   *\n   * @private\n   * @param {Array} array\n   * @param {*} element\n   * @returns {boolean} Whether or not the element exists in the array.\n   *\n   * @examples\n   * arrayContains([1, 2], 2)              // => true\n   * arrayContains([1, 2], 3)              // => false\n   * arrayContains([undefined], undefined) // => true\n   * arrayContains([NaN], NaN)             // => true\n   */\n  function arrayContains(array, element) {\n    var i = -1,\n        length = array.length;\n\n    // Special handling for NaN\n    if (element !== element) {\n      while (++i < length) {\n        if (array[i] !== array[i]) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    while (++i < length) {\n      if (array[i] === element) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Checks if an element exists in an array before a given index.\n   *\n   * @private\n   * @param {Array} array\n   * @param {*} element\n   * @param {number} index\n   * @param {Function} keyFn\n   * @returns {boolean}\n   *\n   * @examples\n   * arrayContainsBefore([1, 2, 3], 3, 2) // => false\n   * arrayContainsBefore([1, 2, 3], 3, 3) // => true\n   */\n  function arrayContainsBefore(array, element, index, keyFn) {\n    var i = -1;\n\n    if (keyFn) {\n      keyFn = createCallback(keyFn);\n      while (++i < index) {\n        if (keyFn(array[i]) === keyFn(element)) {\n          return true;\n        }\n      }\n\n    } else {\n      while (++i < index) {\n        if (array[i] === element) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Swaps the elements at two specified positions of an array.\n   *\n   * @private\n   * @param {Array} array\n   * @param {number} i\n   * @param {number} j\n   *\n   * @examples\n   * var array = [1, 2, 3, 4, 5];\n   *\n   * swap(array, 2, 3) // array == [1, 2, 4, 3, 5]\n   */\n  function swap(array, i, j) {\n    var temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n\n  /**\n   * \"Clones\" a regular expression (but makes it always global).\n   *\n   * @private\n   * @param {RegExp|string} pattern\n   * @returns {RegExp}\n   */\n  function cloneRegex(pattern) {\n    return eval(\"\" + pattern + (!pattern.global ? \"g\" : \"\"));\n  };\n\n  /**\n   * A collection of unique elements.\n   *\n   * @private\n   * @constructor\n   *\n   * @examples\n   * var set  = new Set(),\n   *     obj1 = {},\n   *     obj2 = {},\n   *     fn1 = function fn1() {},\n   *     fn2 = function fn2() {};\n   *\n   * set.add('foo')            // => true\n   * set.add('foo')            // => false\n   * set.add(1)                // => true\n   * set.add(1)                // => false\n   * set.add('1')              // => true\n   * set.add('1')              // => false\n   * set.add(obj1)             // => true\n   * set.add(obj1)             // => false\n   * set.add(obj2)             // => true\n   * set.add(fn1)              // => true\n   * set.add(fn2)              // => true\n   * set.add(fn2)              // => false\n   * set.contains('__proto__') // => false\n   * set.add('__proto__')      // => true\n   * set.add('__proto__')      // => false\n   * set.contains('add')       // => false\n   * set.add('add')            // => true\n   * set.add('add')            // => false\n   * set.contains(undefined)   // => false\n   * set.add(undefined)        // => true\n   * set.contains(undefined)   // => true\n   * set.contains('undefined') // => false\n   * set.add('undefined')      // => true\n   * set.contains('undefined') // => true\n   * set.contains(NaN)         // => false\n   * set.add(NaN)              // => true\n   * set.contains(NaN)         // => true\n   * set.contains('NaN')       // => false\n   * set.add('NaN')            // => true\n   * set.contains('NaN')       // => true\n   * set.contains('@foo')      // => false\n   * set.add('@foo')           // => true\n   * set.contains('@foo')      // => true\n   */\n  function Set() {\n    this.table   = {};\n    this.objects = [];\n  }\n\n  /**\n   * Attempts to add a unique value to the set.\n   *\n   * @param {*} value The value to add.\n   * @returns {boolean} True if the value was added to the set (meaning an equal\n   *     value was not already present), or else false.\n   */\n  Set.prototype.add = function add(value) {\n    var table = this.table,\n        type  = typeof value,\n\n        // only applies for strings\n        firstChar,\n\n        // only applies for objects\n        objects;\n\n    switch (type) {\n      case \"number\":\n      case \"boolean\":\n      case \"undefined\":\n        if (!table[value]) {\n          table[value] = true;\n          return true;\n        }\n        return false;\n\n      case \"string\":\n        // Essentially, escape the first character if it could possibly collide\n        // with a number, boolean, or undefined (or a string that happens to start\n        // with the escape character!), OR if it could override a special property\n        // such as '__proto__' or 'constructor'.\n        switch (value.charAt(0)) {\n          case \"_\": // e.g., __proto__\n          case \"f\": // for 'false'\n          case \"t\": // for 'true'\n          case \"c\": // for 'constructor'\n          case \"u\": // for 'undefined'\n          case \"@\": // escaped\n          case \"0\":\n          case \"1\":\n          case \"2\":\n          case \"3\":\n          case \"4\":\n          case \"5\":\n          case \"6\":\n          case \"7\":\n          case \"8\":\n          case \"9\":\n          case \"N\": // for NaN\n            value = \"@\" + value;\n        }\n        if (!table[value]) {\n          table[value] = true;\n          return true;\n        }\n        return false;\n\n      default:\n        // For objects and functions, we can't really do anything other than store\n        // them in an array and do a linear search for reference equality.\n        objects = this.objects;\n        if (!arrayContains(objects, value)) {\n          objects.push(value);\n          return true;\n        }\n        return false;\n    }\n  };\n\n  /**\n   * Checks whether the set contains a value.\n   *\n   * @param {*} value The value to check for.\n   * @returns {boolean} True if the set contains the value, or else false.\n   */\n  Set.prototype.contains = function contains(value) {\n    var type = typeof value,\n\n        // only applies for strings\n        firstChar;\n\n    switch (type) {\n      case \"number\":\n      case \"boolean\":\n      case \"undefined\":\n        return !!this.table[value];\n\n      case \"string\":\n        // Essentially, escape the first character if it could possibly collide\n        // with a number, boolean, or undefined (or a string that happens to start\n        // with the escape character!), OR if it could override a special property\n        // such as '__proto__' or 'constructor'.\n        switch (value.charAt(0)) {\n          case \"_\": // e.g., __proto__\n          case \"f\": // for 'false'\n          case \"t\": // for 'true'\n          case \"c\": // for 'constructor'\n          case \"u\": // for 'undefined'\n          case \"@\": // escaped\n          case \"0\":\n          case \"1\":\n          case \"2\":\n          case \"3\":\n          case \"4\":\n          case \"5\":\n          case \"6\":\n          case \"7\":\n          case \"8\":\n          case \"9\":\n          case \"N\": // for NaN\n            value = \"@\" + value;\n        }\n        return !!this.table[value];\n\n      default:\n        // For objects and functions, we can't really do anything other than store\n        // them in an array and do a linear search for reference equality.\n        return arrayContains(this.objects, value);\n    }\n  };\n\n  /**\n   * A \"rolling\" queue, with a fixed capacity. As items are added to the head,\n   * excess items are dropped from the tail.\n   *\n   * @private\n   * @constructor\n   *\n   * @examples\n   * var queue = new Queue(3);\n   *\n   * queue.add(1).toArray()        // => [1]\n   * queue.add(2).toArray()        // => [1, 2]\n   * queue.add(3).toArray()        // => [1, 2, 3]\n   * queue.add(4).toArray()        // => [2, 3, 4]\n   * queue.add(5).add(6).toArray() // => [4, 5, 6]\n   * queue.add(7).add(8).toArray() // => [6, 7, 8]\n   *\n   * // also want to check corner cases\n   * new Queue(1).add('foo').add('bar').toArray() // => ['bar']\n   * new Queue(0).add('foo').toArray()            // => []\n   * new Queue(-1)                                // throws\n   *\n   * @benchmarks\n   * function populateQueue(count, capacity) {\n   *   var q = new Queue(capacity);\n   *   for (var i = 0; i < count; ++i) {\n   *     q.add(i);\n   *   }\n   * }\n   *\n   * function populateArray(count, capacity) {\n   *   var arr = [];\n   *   for (var i = 0; i < count; ++i) {\n   *     if (arr.length === capacity) { arr.shift(); }\n   *     arr.push(i);\n   *   }\n   * }\n   *\n   * populateQueue(100, 10); // populating a Queue\n   * populateArray(100, 10); // populating an Array\n   */\n  function Queue(capacity) {\n    this.contents = new Array(capacity);\n    this.start    = 0;\n    this.count    = 0;\n  }\n\n  /**\n   * Adds an item to the queue, and returns the queue.\n   */\n  Queue.prototype.add = function add(element) {\n    var contents = this.contents,\n        capacity = contents.length,\n        start    = this.start;\n\n    if (this.count === capacity) {\n      contents[start] = element;\n      this.start = (start + 1) % capacity;\n\n    } else {\n      contents[this.count++] = element;\n    }\n\n    return this;\n  };\n\n  /**\n   * Returns an array containing snapshot of the queue's contents.\n   */\n  Queue.prototype.toArray = function toArray() {\n    var contents = this.contents,\n        start    = this.start,\n        count    = this.count;\n\n    var snapshot = contents.slice(start, start + count);\n    if (snapshot.length < count) {\n      snapshot = snapshot.concat(contents.slice(0, count - snapshot.length));\n    }\n\n    return snapshot;\n  };\n\n  /**\n   * Shared base method for defining new sequence types.\n   */\n  function defineSequenceType(base, name, overrides) {\n    /** @constructor */\n    var ctor = function ctor() {};\n\n    // Make this type inherit from the specified base.\n    ctor.prototype = new base();\n\n    // Attach overrides to the new sequence type's prototype.\n    for (var override in overrides) {\n      ctor.prototype[override] = overrides[override];\n    }\n\n    // Define a factory method that sets the new sequence's parent to the caller\n    // and (optionally) applies any additional initialization logic.\n    // Expose this as a chainable method so that we can do:\n    // Lazy(...).map(...).filter(...).blah(...);\n    var factory = function factory() {\n      var sequence = new ctor();\n\n      // Every sequence needs a reference to its parent in order to work.\n      sequence.parent = this;\n\n      // If a custom init function was supplied, call it now.\n      if (sequence.init) {\n        sequence.init.apply(sequence, arguments);\n      }\n\n      return sequence;\n    };\n\n    var methodNames = typeof name === 'string' ? [name] : name;\n    for (var i = 0; i < methodNames.length; ++i) {\n      base.prototype[methodNames[i]] = factory;\n    }\n\n    return ctor;\n  }\n\n  return Lazy;\n});\n"
        },
        {
          "name": "lazy.min.js",
          "type": "blob",
          "size": 52.0859375,
          "content": "/*! lazy.js 0.5.1 (c)2018 Dan Tao @license MIT */\n!function(e,t){\"function\"==typeof define&&define.amd?define(t):\"object\"==typeof exports?module.exports=t():e.Lazy=t()}(this,function(context){function Lazy(e){if(isArray(e))return new ArrayWrapper(e);if(\"string\"==typeof e)return new StringWrapper(e);if(e instanceof Sequence)return e;if(Lazy.extensions){for(var t,n=Lazy.extensions,r=n.length;!t&&r--;)t=n[r](e);if(t)return t}return new ObjectWrapper(e)}function Sequence(){}function Iterator(e){this.sequence=e,this.index=-1}function MemoizedSequence(e){this.parent=e,this.memo=[],this.iterator=void 0,this.complete=!1}function MappedSequence(e,t){this.parent=e,this.mapFn=t}function MappingIterator(e,t){this.iterator=e.getIterator(),this.mapFn=t,this.index=-1}function FilteredSequence(e,t){this.parent=e,this.filterFn=t}function FilteringIterator(e,t){this.iterator=e.getIterator(),this.filterFn=t,this.index=0}function ReversedSequence(e){this.parent=e}function ReversedIterator(e){this.sequence=e}function ConcatenatedSequence(e,t){this.parent=e,this.arrays=t}function TakeSequence(e,t){this.parent=e,this.count=t}function TakeIterator(e,t){this.iterator=e.getIterator(),this.count=t}function TakeWhileSequence(e,t){this.parent=e,this.predicate=t}function InitialSequence(e,t){this.parent=e,this.count=\"number\"==typeof t?t:1}function DropSequence(e,t){this.parent=e,this.count=\"number\"==typeof t?t:1}function DropWhileSequence(e,t){this.parent=e,this.predicate=t}function SortedSequence(e,t){this.parent=e,this.sortFn=t}function GroupedSequence(e,t,n){this.parent=e,this.keyFn=t,this.valFn=n}function IndexedSequence(e,t,n){this.parent=e,this.keyFn=t,this.valFn=n}function CountedSequence(e,t){this.parent=e,this.keyFn=t}function UniqueSequence(e,t){this.parent=e,this.keyFn=t}function ZippedSequence(e,t){this.parent=e,this.arrays=t}function ShuffledSequence(e){this.parent=e}function FlattenedSequence(e,t){this.parent=e,this.each=t?this.eachShallow:this.eachRecursive}function WithoutSequence(e,t){this.parent=e,this.values=t}function IntersectionSequence(e,t){this.parent=e,this.arrays=t}function Memoizer(e,t){this.iterator=t,this.memo=e,this.currentIndex=0,this.currentValue=void 0}function UniqueMemoizer(e){this.iterator=e,this.set=new Set,this.memo=[],this.currentValue=void 0}function ConsecutiveSequence(e,t){this.parent=e,this.count=t}function ChunkedSequence(e,t){this.parent=e,this.chunkSize=t}function ChunkedIterator(e,t){this.iterator=e.getIterator(),this.size=t}function TappedSequence(e,t){this.parent=e,this.callback=t}function SimpleIntersectionSequence(e,t){this.parent=e,this.array=t,this.each=getEachForIntersection(t)}function getEachForIntersection(e){return e.length<40?SimpleIntersectionSequence.prototype.eachArrayCache:SimpleIntersectionSequence.prototype.eachMemoizerCache}function SimpleZippedSequence(e,t){this.parent=e,this.array=t}function ArrayLikeSequence(){}function IndexedIterator(e){this.sequence=e,this.index=-1}function IndexedMappedSequence(e,t){this.parent=e,this.mapFn=t}function IndexedFilteredSequence(e,t){this.parent=e,this.filterFn=t}function IndexedReversedSequence(e){this.parent=e}function IndexedTakeSequence(e,t){this.parent=e,this.count=t}function IndexedDropSequence(e,t){this.parent=e,this.count=\"number\"==typeof t?t:1}function IndexedConcatenatedSequence(e,t){this.parent=e,this.other=t}function IndexedUniqueSequence(e,t){this.parent=e,this.each=getEachForParent(e),this.keyFn=t}function getEachForParent(e){return e.length()<100?IndexedUniqueSequence.prototype.eachArrayCache:UniqueSequence.prototype.each}function ArrayWrapper(e){this.source=e}function MappedArrayWrapper(e,t){this.parent=e,this.mapFn=t}function FilteredArrayWrapper(e,t){this.parent=e,this.filterFn=t}function UniqueArrayWrapper(e,t){this.parent=e,this.each=getEachForSource(e.source),this.keyFn=t}function getEachForSource(e){return e.length<40?UniqueArrayWrapper.prototype.eachNoCache:e.length<100?UniqueArrayWrapper.prototype.eachArrayCache:UniqueArrayWrapper.prototype.eachSetCache}function ConcatArrayWrapper(e,t){this.parent=e,this.other=t}function ObjectLikeSequence(){}function KeySequence(e){this.parent=e}function ValuesSequence(e){this.parent=e}function FilteredObjectLikeSequence(e,t){this.parent=e,this.filterFn=t}function AssignSequence(e,t){this.parent=e,this.other=t}function DefaultsSequence(e,t){this.parent=e,this.defaultValues=t}function InvertedSequence(e){this.parent=e}function MergedSequence(e,t,n){this.parent=e,this.others=t,this.mergeFn=n}function mergeObjects(e,t){var n,r;if(\"undefined\"==typeof t)return e;if(isVanillaObject(e)&&isVanillaObject(t))n={};else{if(!isArray(e)||!isArray(t))return t;n=[]}for(r in e)n[r]=mergeObjects(e[r],t[r]);for(r in t)n[r]||(n[r]=t[r]);return n}function isVanillaObject(e){return e&&e.constructor===Object}function PickSequence(e,t){this.parent=e,this.properties=t}function OmitSequence(e,t){this.parent=e,this.properties=t}function ObjectWrapper(e){this.source=e}function StringLikeSequence(){}function CharIterator(e){this.source=Lazy(e),this.index=-1}function StringSegment(e,t,n){this.parent=e,this.start=Math.max(0,t),this.stop=n}function MappedStringLikeSequence(e,t){this.parent=e,this.mapFn=t}function ReversedStringLikeSequence(e){this.parent=e}function StringMatchSequence(e,t){this.parent=e,this.pattern=t}function StringMatchIterator(e,t){this.source=e,this.pattern=cloneRegex(t)}function SplitStringSequence(e,t){this.parent=e,this.pattern=t}function SplitWithRegExpIterator(e,t){this.source=e,this.pattern=cloneRegex(t)}function SplitWithStringIterator(e,t){this.source=e,this.delimiter=t}function StringWrapper(e){this.source=e}function GeneratedSequence(e,t){this.get=e,this.fixedLength=t}function GeneratedIterator(e){this.sequence=e,this.index=0,this.currentValue=null}function AsyncSequence(e,t){if(e instanceof AsyncSequence)throw new Error(\"Sequence is already asynchronous!\");this.parent=e,this.interval=t,this.onNextCallback=getOnNextCallback(t),this.cancelCallback=getCancelCallback(t)}function AsyncHandle(e){this.resolveListeners=[],this.rejectListeners=[],this.state=PENDING,this.cancelFn=e}function resolve(e,t){if(e===t)return e._reject(new TypeError(\"Cannot resolve a promise to itself\")),void 0;if(t instanceof AsyncHandle)return t.then(function(t){resolve(e,t)},function(t){e._reject(t)}),void 0;var n;try{n=/function|object/.test(typeof t)&&null!=t&&t.then}catch(r){return e._reject(r),void 0}var o=PENDING;if(\"function\"!=typeof n)e._resolve(t);else try{n.call(t,function(t){o===PENDING&&(o=RESOLVED,resolve(e,t))},function(t){o===PENDING&&(o=REJECTED,e._reject(t))})}catch(r){if(o!==PENDING)return;e._reject(r)}}function consumeListeners(e,t,n){n||(n=getOnNextCallback()),n(function(){e.length>0&&(e.shift()(t),consumeListeners(e,t,n))})}function getOnNextCallback(e){return\"undefined\"==typeof e&&\"function\"==typeof setImmediate?setImmediate:(e=e||0,function(t){return setTimeout(t,e)})}function getCancelCallback(e){return\"undefined\"==typeof e&&\"function\"==typeof clearImmediate?clearImmediate:clearTimeout}function transform(e,t){return t instanceof AsyncHandle?t.then(function(){e(t)}):e(t)}function WatchedPropertySequence(e,t){this.listeners=[],t?isArray(t)||(t=[t]):t=Lazy(e).keys().toArray();var n=this.listeners,r=0;Lazy(t).each(function(t){var o=e[t];Object.defineProperty(e,t,{get:function(){return o},set:function(e){for(var i=n.length-1;i>=0;--i)n[i]({property:t,value:e},r)===!1&&n.splice(i,1);o=e,++r}})})}function StreamLikeSequence(){}function SplitStreamSequence(e,t){this.parent=e,this.delimiter=t,this.each=this.getEachForDelimiter(t)}function MatchedStreamSequence(e,t){this.parent=e,this.pattern=cloneRegex(t)}function curry(e,t){function n(r){return r.length<t?function(){return n(r.concat(arraySlice.call(arguments,0)))}:e.apply(null,r)}return t||(t=e.length),n([])}function curryRight(e,t){function n(r){return r.length<t?function(){return n(arraySlice.call(arguments,0).concat(r))}:e.apply(null,r)}return t||(t=e.length),n([])}function createCallback(e,t){switch(typeof e){case\"function\":return e;case\"string\":return function(t){return t[e]};case\"object\":return function(t){return Lazy(e).all(function(e,n){return t[n]===e})};case\"undefined\":return t?function(){return t}:Lazy.identity;default:throw new Error(\"Don't know how to make a callback from a \"+typeof e+\"!\")}}function createComparator(e){return e?(e=createCallback(e),function(t,n){return compare(e(t),e(n))}):compare}function reverseArguments(e){return function(t,n){return e(n,t)}}function createSet(e){var t=new Set;return Lazy(e||[]).flatten().each(function(e){t.add(e)}),t}function compare(e,t){return e===t?0:e>t?1:-1}function forEach(e,t){for(var n=-1,r=e.length;++n<r;)if(t(e[n],n)===!1)return!1;return!0}function getFirst(e){var t;return e.each(function(e){return t=e,!1}),t}function arrayContains(e,t){var n=-1,r=e.length;if(t!==t){for(;++n<r;)if(e[n]!==e[n])return!0;return!1}for(;++n<r;)if(e[n]===t)return!0;return!1}function arrayContainsBefore(e,t,n,r){var o=-1;if(r){for(r=createCallback(r);++o<n;)if(r(e[o])===r(t))return!0}else for(;++o<n;)if(e[o]===t)return!0;return!1}function swap(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function cloneRegex(pattern){return eval(\"\"+pattern+(pattern.global?\"\":\"g\"))}function Set(){this.table={},this.objects=[]}function Queue(e){this.contents=new Array(e),this.start=0,this.count=0}function defineSequenceType(e,t,n){var r=function(){};r.prototype=new e;for(var o in n)r.prototype[o]=n[o];for(var i=function(){var e=new r;return e.parent=this,e.init&&e.init.apply(e,arguments),e},c=\"string\"==typeof t?[t]:t,u=0;u<c.length;++u)e.prototype[c[u]]=i;return r}Lazy.VERSION=\"0.5.1\",Lazy.noop=function(){},Lazy.identity=function(e){return e},Lazy.equality=function(e,t){return e===t},Lazy.strict=function(){function e(e){if(null==e)throw new Error(\"You cannot wrap null or undefined using Lazy.\");if(\"number\"==typeof e||\"boolean\"==typeof e)throw new Error(\"You cannot wrap primitive values using Lazy.\");return Lazy(e)}return Lazy(Lazy).each(function(t,n){e[n]=t}),e},Sequence.define=function(e,t){if(!t||!t.getIterator&&!t.each)throw new Error(\"A custom sequence must implement *at least* getIterator or each!\");return defineSequenceType(Sequence,e,t)},Sequence.prototype.size=function(){return this.getIndex().length()},Sequence.prototype.getIterator=function(){return new Iterator(this)},Sequence.prototype.root=function(){return this.parent.root()},Sequence.prototype.isAsync=function(){return this.parent?this.parent.isAsync():!1},Sequence.prototype.value=function(){return this.toArray()},Sequence.prototype.apply=function(e){var t,n=this.root(),r=n.source;try{n.source=e,t=this.value()}finally{n.source=r}return t},Iterator.prototype.current=function(){return this.cachedIndex&&this.cachedIndex.get(this.index)},Iterator.prototype.moveNext=function(){var e=this.cachedIndex;return e||(e=this.cachedIndex=this.sequence.getIndex()),this.index>=e.length()-1?!1:(++this.index,!0)},Sequence.prototype.toArray=function(){return this.reduce(function(e,t){return e.push(t),e},[])},Sequence.prototype.equals=function(e,t){if(!(e instanceof Sequence))return!1;for(var n=this.getIterator(),r=e.getIterator(),o=t||Lazy.equality;n.moveNext();){if(!r.moveNext())return!1;if(!o(n.current(),r.current()))return!1}return!r.moveNext()},Sequence.prototype.getIndex=function(){return new ArrayWrapper(this.toArray())},Sequence.prototype.get=function(e){var t;return this.each(function(n,r){return r===e?(t=n,!1):void 0}),t},Sequence.prototype.memoize=function(){return new MemoizedSequence(this)},Sequence.prototype.toObject=function(){return this.reduce(function(e,t){return e[t[0]]=t[1],e},{})},Sequence.prototype.each=function(e){for(var t=this.getIterator(),n=-1;t.moveNext();)if(e(t.current(),++n)===!1)return!1;return!0},Sequence.prototype.forEach=function(e){return this.each(e)},Sequence.prototype.map=function(e){return new MappedSequence(this,createCallback(e))},Sequence.prototype.collect=function(e){return this.map(e)},MappedSequence.prototype=Object.create(Sequence.prototype),MappedSequence.prototype.getIterator=function(){return new MappingIterator(this.parent,this.mapFn)},MappedSequence.prototype.each=function(e){var t=this.mapFn;return this.parent.each(function(n,r){return e(t(n,r),r)})},MappingIterator.prototype.current=function(){return this.mapFn(this.iterator.current(),this.index)},MappingIterator.prototype.moveNext=function(){return this.iterator.moveNext()?(++this.index,!0):!1},Sequence.prototype.pluck=function(e){return this.map(e)},Sequence.prototype.invoke=function(e){return this.map(function(t){return t[e]()})},Sequence.prototype.filter=function(e){return new FilteredSequence(this,createCallback(e))},Sequence.prototype.select=function(e){return this.filter(e)},FilteredSequence.prototype=Object.create(Sequence.prototype),FilteredSequence.prototype.getIterator=function(){return new FilteringIterator(this.parent,this.filterFn)},FilteredSequence.prototype.each=function(e){var t=this.filterFn,n=0;return this.parent.each(function(r,o){return t(r,o)?e(r,n++):void 0})},FilteredSequence.prototype.reverse=function(){return this.parent.reverse().filter(this.filterFn)},FilteringIterator.prototype.current=function(){return this.value},FilteringIterator.prototype.moveNext=function(){for(var e,t=this.iterator,n=this.filterFn;t.moveNext();)if(e=t.current(),n(e,this.index++))return this.value=e,!0;return this.value=void 0,!1},Sequence.prototype.reject=function(e){return e=createCallback(e),this.filter(function(t){return!e(t)})},Sequence.prototype.ofType=function(e){return this.filter(function(t){return typeof t===e})},Sequence.prototype.where=function(e){return this.filter(e)},Sequence.prototype.reverse=function(){return new ReversedSequence(this)},ReversedSequence.prototype=Object.create(Sequence.prototype),ReversedSequence.prototype.getIterator=function(){return new ReversedIterator(this.parent)},ReversedIterator.prototype.current=function(){return this.getIndex().get(this.index)},ReversedIterator.prototype.moveNext=function(){var e=this.getIndex(),t=e.length();return\"undefined\"==typeof this.index&&(this.index=t),--this.index>=0},ReversedIterator.prototype.getIndex=function(){return this.cachedIndex||(this.cachedIndex=this.sequence.getIndex()),this.cachedIndex},Sequence.prototype.concat=function(){return new ConcatenatedSequence(this,arraySlice.call(arguments,0))},ConcatenatedSequence.prototype=Object.create(Sequence.prototype),ConcatenatedSequence.prototype.each=function(e){var t=!1,n=0;this.parent.each(function(r){return e(r,n++)===!1?(t=!0,!1):void 0}),t||Lazy(this.arrays).flatten(!0).each(function(t){return e(t,n++)===!1?!1:void 0})},Sequence.prototype.first=function(e){return\"undefined\"==typeof e?getFirst(this):new TakeSequence(this,e)},Sequence.prototype.head=Sequence.prototype.take=function(e){return this.first(e)},TakeSequence.prototype=Object.create(Sequence.prototype),TakeSequence.prototype.getIterator=function(){return new TakeIterator(this.parent,this.count)},TakeSequence.prototype.each=function(e){var t,n=this.count,r=0,o=this.parent.each(function(o){return n>r&&(t=e(o,r++)),r>=n?!1:t});return o instanceof AsyncHandle?o:r===n&&t!==!1},TakeIterator.prototype.current=function(){return this.iterator.current()},TakeIterator.prototype.moveNext=function(){return--this.count>=0&&this.iterator.moveNext()},Sequence.prototype.takeWhile=function(e){return new TakeWhileSequence(this,e)},TakeWhileSequence.prototype=Object.create(Sequence.prototype),TakeWhileSequence.prototype.each=function(e){var t=this.predicate,n=!1,r=0,o=this.parent.each(function(o,i){return t(o,i)?e(o,r++):(n=!0,!1)});return o instanceof AsyncHandle?o:n},Sequence.prototype.initial=function(e){return new InitialSequence(this,e)},InitialSequence.prototype=Object.create(Sequence.prototype),InitialSequence.prototype.each=function(e){var t=this.parent.getIndex();return t.take(t.length()-this.count).each(e)},Sequence.prototype.last=function(e){return\"undefined\"==typeof e?this.reverse().first():this.reverse().take(e).reverse()},Sequence.prototype.findWhere=function(e){return this.where(e).first()},Sequence.prototype.rest=function(e){return new DropSequence(this,e)},Sequence.prototype.skip=Sequence.prototype.tail=Sequence.prototype.drop=function(e){return this.rest(e)},DropSequence.prototype=Object.create(Sequence.prototype),DropSequence.prototype.each=function(e){var t=this.count,n=0,r=0;return this.parent.each(function(o){return n++<t?void 0:e(o,r++)})},Sequence.prototype.dropWhile=function(e){return new DropWhileSequence(this,e)},Sequence.prototype.skipWhile=function(e){return this.dropWhile(e)},DropWhileSequence.prototype=Object.create(Sequence.prototype),DropWhileSequence.prototype.each=function(e){var t=this.predicate,n=!1;return this.parent.each(function(r){if(!n){if(t(r))return;n=!0}return e(r)})},Sequence.prototype.sort=function(e,t){return e||(e=compare),t&&(e=reverseArguments(e)),new SortedSequence(this,e)},Sequence.prototype.sortBy=function(e,t){return e=createComparator(e),t&&(e=reverseArguments(e)),new SortedSequence(this,e)},SortedSequence.prototype=Object.create(Sequence.prototype),SortedSequence.prototype.each=function(e){var t=this.sortFn,n=this.parent.toArray();return n.sort(t),forEach(n,e)},SortedSequence.prototype.reverse=function(){return new SortedSequence(this.parent,reverseArguments(this.sortFn))},Sequence.prototype.groupBy=function(e,t){return new GroupedSequence(this,e,t)},Sequence.prototype.indexBy=function(e,t){return new IndexedSequence(this,e,t)},Sequence.prototype.countBy=function(e){return new CountedSequence(this,e)},Sequence.prototype.uniq=function(e){return new UniqueSequence(this,e)},Sequence.prototype.unique=function(e){return this.uniq(e)},UniqueSequence.prototype=Object.create(Sequence.prototype),UniqueSequence.prototype.each=function(e){var t=new Set,n=this.keyFn,r=0;return n?(n=createCallback(n),this.parent.each(function(o){return t.add(n(o))?e(o,r++):void 0})):this.parent.each(function(n){return t.add(n)?e(n,r++):void 0})},Sequence.prototype.zip=function(e){return 1===arguments.length?new SimpleZippedSequence(this,e):new ZippedSequence(this,arraySlice.call(arguments,0))},ZippedSequence.prototype=Object.create(Sequence.prototype),ZippedSequence.prototype.each=function(e){var t=this.arrays,n=0,r=this.parent.each(function(r){for(var o=[r],i=0;i<t.length;++i)o.push(t[i][n]);return e(o,n++)});if(!r)return!1;for(var o,i=!0;i;){i=!1,o=[void 0];for(var c=0;c<t.length;++c)o.push(t[c][n]),t[c].length>n&&(i=!0);if(i&&e(o,n++)===!1)return!1}return!0},Sequence.prototype.shuffle=function(){return new ShuffledSequence(this)},ShuffledSequence.prototype=Object.create(Sequence.prototype),ShuffledSequence.prototype.each=function(e){for(var t=this.parent.toArray(),n=Math.floor,r=Math.random,o=0,i=t.length-1;i>0;--i)if(swap(t,i,n(r()*(i+1))),e(t[i],o++)===!1)return!1;return t.length&&e(t[0],o),!0},Sequence.prototype.flatten=function(e){return new FlattenedSequence(this,e)},FlattenedSequence.prototype=Object.create(Sequence.prototype),FlattenedSequence.prototype.eachShallow=function(e){var t=0;return this.parent.each(function(n){return isArray(n)?forEach(n,function(n){return e(n,t++)}):n instanceof Sequence?n.each(function(n){return e(n,t++)}):e(n,t++)})},FlattenedSequence.prototype.eachRecursive=function(e){var t=0;return this.parent.each(function n(r){return isArray(r)?forEach(r,n):r instanceof Sequence?r.each(n):e(r,t++)})},Sequence.prototype.compact=function(){return this.filter(function(e){return!!e})},Sequence.prototype.without=function(){return new WithoutSequence(this,arraySlice.call(arguments,0))},Sequence.prototype.difference=function(){return this.without.apply(this,arguments)},WithoutSequence.prototype=Object.create(Sequence.prototype),WithoutSequence.prototype.each=function(e){var t=createSet(this.values),n=0;return this.parent.each(function(r){return t.contains(r)?void 0:e(r,n++)})},Sequence.prototype.union=function(e){return this.concat(e).uniq()},Sequence.prototype.intersection=function(e){return 1===arguments.length&&isArray(arguments[0])?new SimpleIntersectionSequence(this,e):new IntersectionSequence(this,arraySlice.call(arguments,0))},IntersectionSequence.prototype=Object.create(Sequence.prototype),IntersectionSequence.prototype.each=function(e){var t=Lazy(this.arrays).map(function(e){return new UniqueMemoizer(Lazy(e).getIterator())}),n=new UniqueMemoizer(t.getIterator()),r=0;return this.parent.uniq().each(function(t){var o=!0;return n.each(function(e){return e.contains(t)?void 0:(o=!1,!1)}),o?e(t,r++):void 0})},Memoizer.prototype.current=function(){return this.currentValue},Memoizer.prototype.moveNext=function(){var e=this.iterator,t=this.memo;return this.currentIndex<t.length?(this.currentValue=t[this.currentIndex++],!0):e.moveNext()?(this.currentValue=t[this.currentIndex++]=e.current(),!0):!1},UniqueMemoizer.prototype.current=function(){return this.currentValue},UniqueMemoizer.prototype.moveNext=function(){for(var e,t=this.iterator,n=this.set,r=this.memo;t.moveNext();)if(e=t.current(),n.add(e))return r.push(e),this.currentValue=e,!0;return!1},UniqueMemoizer.prototype.each=function(e){for(var t=this.memo,n=t.length,r=-1;++r<n;)if(e(t[r],r)===!1)return!1;for(;this.moveNext()&&e(this.currentValue,r++)!==!1;);},UniqueMemoizer.prototype.contains=function(e){if(this.set.contains(e))return!0;for(;this.moveNext();)if(this.currentValue===e)return!0;return!1},Sequence.prototype.every=function(e){return e=createCallback(e),this.each(function(t,n){return!!e(t,n)})},Sequence.prototype.all=function(e){return this.every(e)},Sequence.prototype.some=function(e){e=createCallback(e,!0);var t=!1;return this.each(function(n){return e(n)?(t=!0,!1):void 0}),t},Sequence.prototype.any=function(e){return this.some(e)},Sequence.prototype.none=function(e){return!this.any(e)},Sequence.prototype.isEmpty=function(){return!this.any()},Sequence.prototype.indexOf=function(e,t){var n=t||Lazy.equality,r=-1;return this.each(function(t,o){return n(t,e)?(r=o,!1):void 0}),r},Sequence.prototype.lastIndexOf=function(e,t){var n=this.getIndex().reverse(),r=n.indexOf(e,t);return-1!==r&&(r=n.length()-r-1),r},Sequence.prototype.sortedIndex=function(e){for(var t,n=this.getIndex(),r=0,o=n.length();o>r;)t=r+o>>>1,-1===compare(n.get(t),e)?r=t+1:o=t;return r},Sequence.prototype.contains=function(e,t){return-1!==this.indexOf(e,t)},Sequence.prototype.reduce=function(e,t){if(arguments.length<2)return this.tail().reduce(e,this.head());var n=this.each(function(n,r){t=e(t,n,r)});return n instanceof AsyncHandle?n.then(function(){return t}):t},Sequence.prototype.inject=Sequence.prototype.foldl=function(e,t){return this.reduce(e,t)},Sequence.prototype.reduceRight=function(e,t){if(arguments.length<2)return this.initial(1).reduceRight(e,this.last());var n=this.getIndex(),r=n.length()-1;return n.reverse().reduce(function(t,n){return e(t,n,r--)},t)},Sequence.prototype.foldr=function(e,t){return this.reduceRight(e,t)},Sequence.prototype.consecutive=function(e){return new ConsecutiveSequence(this,e)},ConsecutiveSequence.prototype=Object.create(Sequence.prototype),ConsecutiveSequence.prototype.each=function(e){var t=this.count,n=new Queue(t),r=this.parent.map(function(e){return n.add(e).count===t?n.toArray():void 0});return r.compact().each(e)},Sequence.prototype.chunk=function(e){if(1>e)throw new Error(\"You must specify a positive chunk size.\");return new ChunkedSequence(this,e)},ChunkedSequence.prototype=Object.create(Sequence.prototype),ChunkedSequence.prototype.getIterator=function(){return new ChunkedIterator(this.parent,this.chunkSize)},ChunkedIterator.prototype.current=function(){return this.currentChunk},ChunkedIterator.prototype.moveNext=function(){for(var e=this.iterator,t=this.size,n=[];n.length<t&&e.moveNext();)n.push(e.current());return 0===n.length?!1:(this.currentChunk=n,!0)},Sequence.prototype.tap=function(e){return new TappedSequence(this,e)},TappedSequence.prototype=Object.create(Sequence.prototype),TappedSequence.prototype.each=function(e){var t=this.callback;return this.parent.each(function(n,r){return t(n,r),e(n,r)})},Sequence.prototype.find=function(e){return this.filter(e).first()},Sequence.prototype.detect=function(e){return this.find(e)},Sequence.prototype.min=function(e){return\"undefined\"!=typeof e?this.minBy(e):this.reduce(function(e,t){return\"undefined\"==typeof e?t:e>t?t:e})},Sequence.prototype.minBy=function(e){return e=createCallback(e),this.reduce(function(t,n){return e(n)<e(t)?n:t})},Sequence.prototype.max=function(e){return\"undefined\"!=typeof e?this.maxBy(e):this.reduce(function(e,t){return\"undefined\"==typeof e?t:t>e?t:e})},Sequence.prototype.maxBy=function(e){return e=createCallback(e),this.reduce(function(t,n){return e(n)>e(t)?n:t})},Sequence.prototype.sum=function(e){return\"undefined\"!=typeof e?this.sumBy(e):this.reduce(function(e,t){return e+t},0)},Sequence.prototype.sumBy=function(e){return e=createCallback(e),this.reduce(function(t,n){return t+e(n)},0)},Sequence.prototype.join=function(e){e=\"undefined\"==typeof e?\",\":String(e);var t=-1;return this.reduce(function(n,r){return++t>0&&(n+=e),n+r},\"\")},Sequence.prototype.toString=function(e){return this.join(e)},Sequence.prototype.async=function(e){return new AsyncSequence(this,e)},SimpleIntersectionSequence.prototype=Object.create(Sequence.prototype),SimpleIntersectionSequence.prototype.eachMemoizerCache=function(e){var t=new UniqueMemoizer(Lazy(this.array).getIterator()),n=0;return this.parent.uniq().each(function(r){return t.contains(r)?e(r,n++):void 0})},SimpleIntersectionSequence.prototype.eachArrayCache=function(e){var t=this.array,n=arrayContains,r=0;return this.parent.uniq().each(function(o){return n(t,o)?e(o,r++):void 0})},SimpleZippedSequence.prototype=Object.create(Sequence.prototype),SimpleZippedSequence.prototype.each=function(e){var t=this.array,n=-1,r=this.parent.each(function(r){return++n,e([r,t[n]],n)});if(!r)return!1;for(;++n<t.length;)if(e([void 0,t[n]],n)===!1)return!1;return!0},ArrayLikeSequence.prototype=Object.create(Sequence.prototype),ArrayLikeSequence.define=function(e,t){if(!t||\"function\"!=typeof t.get)throw new Error(\"A custom array-like sequence must implement *at least* get!\");return defineSequenceType(ArrayLikeSequence,e,t)},ArrayLikeSequence.prototype.get=function(e){return this.parent.get(e)},ArrayLikeSequence.prototype.length=function(){return this.parent.length()},ArrayLikeSequence.prototype.getIndex=function(){return this},ArrayLikeSequence.prototype.getIterator=function(){return new IndexedIterator(this)},IndexedIterator.prototype.current=function(){return this.sequence.get(this.index)},IndexedIterator.prototype.moveNext=function(){return this.index>=this.sequence.length()-1?!1:(++this.index,!0)},ArrayLikeSequence.prototype.each=function(e){for(var t=this.length(),n=-1;++n<t;)if(e(this.get(n),n)===!1)return!1;return!0},ArrayLikeSequence.prototype.push=function(e){return this.concat([e])},ArrayLikeSequence.prototype.pop=function(){return this.initial()},ArrayLikeSequence.prototype.unshift=function(e){return Lazy([e]).concat(this)},ArrayLikeSequence.prototype.shift=function(){return this.drop()},ArrayLikeSequence.prototype.slice=function(e,t){var n=this.length();0>e&&(e=n+e);var r=this.drop(e);return\"number\"==typeof t&&(0>t&&(t=n+t),r=r.take(t-e)),r},ArrayLikeSequence.prototype.map=function(e){return new IndexedMappedSequence(this,createCallback(e))},IndexedMappedSequence.prototype=Object.create(ArrayLikeSequence.prototype),IndexedMappedSequence.prototype.get=function(e){return 0>e||e>=this.parent.length()?void 0:this.mapFn(this.parent.get(e),e)},ArrayLikeSequence.prototype.filter=function(e){return new IndexedFilteredSequence(this,createCallback(e))},IndexedFilteredSequence.prototype=Object.create(FilteredSequence.prototype),IndexedFilteredSequence.prototype.each=function(e){for(var t,n=this.parent,r=this.filterFn,o=this.parent.length(),i=-1,c=0;++i<o;)if(t=n.get(i),r(t,i)&&e(t,c++)===!1)return!1;return!0},ArrayLikeSequence.prototype.reverse=function(){return new IndexedReversedSequence(this)},IndexedReversedSequence.prototype=Object.create(ArrayLikeSequence.prototype),IndexedReversedSequence.prototype.get=function(e){return this.parent.get(this.length()-e-1)},ArrayLikeSequence.prototype.first=function(e){return\"undefined\"==typeof e?this.get(0):new IndexedTakeSequence(this,e)},IndexedTakeSequence.prototype=Object.create(ArrayLikeSequence.prototype),IndexedTakeSequence.prototype.length=function(){var e=this.parent.length();return this.count<=e?this.count:e},ArrayLikeSequence.prototype.rest=function(e){return new IndexedDropSequence(this,e)},IndexedDropSequence.prototype=Object.create(ArrayLikeSequence.prototype),IndexedDropSequence.prototype.get=function(e){return this.parent.get(this.count+e)},IndexedDropSequence.prototype.length=function(){var e=this.parent.length();return this.count<=e?e-this.count:0},ArrayLikeSequence.prototype.concat=function(e){return 1===arguments.length&&isArray(arguments[0])?new IndexedConcatenatedSequence(this,e):Sequence.prototype.concat.apply(this,arguments)},IndexedConcatenatedSequence.prototype=Object.create(ArrayLikeSequence.prototype),IndexedConcatenatedSequence.prototype.get=function(e){var t=this.parent.length();return t>e?this.parent.get(e):this.other[e-t]},IndexedConcatenatedSequence.prototype.length=function(){return this.parent.length()+this.other.length},ArrayLikeSequence.prototype.uniq=function(e){return new IndexedUniqueSequence(this,createCallback(e))},IndexedUniqueSequence.prototype=Object.create(Sequence.prototype),IndexedUniqueSequence.prototype.eachArrayCache=function(e){for(var t,n,r=this.parent,o=this.keyFn,i=r.length(),c=[],u=arrayContains,a=-1,p=0;++a<i;)if(n=r.get(a),t=o(n),!u(c,t)&&(c.push(t),e(n,p++)===!1))return!1},IndexedUniqueSequence.prototype.eachSetCache=UniqueSequence.prototype.each,MemoizedSequence.prototype=Object.create(Sequence.prototype),MemoizedSequence.prototype.getParentIterator=function(){return this.iterator||(this.iterator=this.parent.getIterator()),this.iterator},MemoizedSequence.prototype.getIterator=function(){return new Memoizer(this.memo,this.getParentIterator())},MemoizedSequence.prototype.iterateTo=function(e){for(var t=this.memo,n=this.getParentIterator();e>=t.length;){if(!n.moveNext())return this.complete=!0,!1;t.push(n.current())}return!0},MemoizedSequence.prototype.get=function(e){var t=this.memo;return e<t.length?t[e]:this.iterateTo(e)?t[e]:void 0},MemoizedSequence.prototype.length=function(){return this.complete||this.iterateTo(1/0),this.memo.length},MemoizedSequence.prototype.slice=function(e,t){return this.complete||this.iterateTo(t),Lazy(this.memo.slice(e,t))},MemoizedSequence.prototype.toArray=function(){return this.complete||this.iterateTo(1/0),this.memo.slice(0)},ArrayWrapper.prototype=Object.create(ArrayLikeSequence.prototype),ArrayWrapper.prototype.root=function(){return this},ArrayWrapper.prototype.isAsync=function(){return!1},ArrayWrapper.prototype.get=function(e){return this.source[e]},ArrayWrapper.prototype.length=function(){return this.source.length},ArrayWrapper.prototype.each=function(e){return forEach(this.source,e)},ArrayWrapper.prototype.map=function(e){return new MappedArrayWrapper(this,createCallback(e))},ArrayWrapper.prototype.filter=function(e){return new FilteredArrayWrapper(this,createCallback(e))},ArrayWrapper.prototype.uniq=function(e){return new UniqueArrayWrapper(this,e)},ArrayWrapper.prototype.concat=function(e){return 1===arguments.length&&isArray(arguments[0])?new ConcatArrayWrapper(this,e):ArrayLikeSequence.prototype.concat.apply(this,arguments)},ArrayWrapper.prototype.toArray=function(){return this.source.slice(0)},MappedArrayWrapper.prototype=Object.create(ArrayLikeSequence.prototype),MappedArrayWrapper.prototype.get=function(e){var t=this.parent.source;return 0>e||e>=t.length?void 0:this.mapFn(t[e])},MappedArrayWrapper.prototype.length=function(){return this.parent.source.length},MappedArrayWrapper.prototype.each=function(e){for(var t=this.parent.source,n=t.length,r=this.mapFn,o=-1;++o<n;)if(e(r(t[o],o),o)===!1)return!1;return!0},FilteredArrayWrapper.prototype=Object.create(FilteredSequence.prototype),FilteredArrayWrapper.prototype.each=function(e){for(var t,n=this.parent.source,r=this.filterFn,o=n.length,i=-1,c=0;++i<o;)if(t=n[i],r(t,i)&&e(t,c++)===!1)return!1;return!0},UniqueArrayWrapper.prototype=Object.create(Sequence.prototype),UniqueArrayWrapper.prototype.eachNoCache=function(e){for(var t,n=this.parent.source,r=this.keyFn,o=n.length,i=arrayContainsBefore,c=-1,u=0;++c<o;)if(t=n[c],!i(n,t,c,r)&&e(t,u++)===!1)return!1;return!0},UniqueArrayWrapper.prototype.eachArrayCache=function(e){var t,n,r=this.parent.source,o=this.keyFn,i=r.length,c=[],u=arrayContains,a=-1,p=0;if(o){for(o=createCallback(o);++a<i;)if(n=r[a],t=o(n),!u(c,t)&&(c.push(t),e(n,p++)===!1))return!1}else for(;++a<i;)if(n=r[a],!u(c,n)&&(c.push(n),e(n,p++)===!1))return!1;\nreturn!0},UniqueArrayWrapper.prototype.eachSetCache=UniqueSequence.prototype.each,ConcatArrayWrapper.prototype=Object.create(ArrayLikeSequence.prototype),ConcatArrayWrapper.prototype.get=function(e){var t=this.parent.source,n=t.length;return n>e?t[e]:this.other[e-n]},ConcatArrayWrapper.prototype.length=function(){return this.parent.source.length+this.other.length},ConcatArrayWrapper.prototype.each=function(e){for(var t=this.parent.source,n=t.length,r=this.other,o=r.length,i=0,c=-1;++c<n;)if(e(t[c],i++)===!1)return!1;for(c=-1;++c<o;)if(e(r[c],i++)===!1)return!1;return!0},ObjectLikeSequence.prototype=Object.create(Sequence.prototype),ObjectLikeSequence.define=function(e,t){if(!t||\"function\"!=typeof t.each)throw new Error(\"A custom object-like sequence must implement *at least* each!\");return defineSequenceType(ObjectLikeSequence,e,t)},ObjectLikeSequence.prototype.value=function(){return this.toObject()},ObjectLikeSequence.prototype.get=function(e){var t=this.pairs().find(function(t){return t[0]===e});return t?t[1]:void 0},ObjectLikeSequence.prototype.keys=function(){return new KeySequence(this)},KeySequence.prototype=Object.create(Sequence.prototype),KeySequence.prototype.each=function(e){var t=-1;return this.parent.each(function(n,r){return e(r,++t)})},ObjectLikeSequence.prototype.values=function(){return new ValuesSequence(this)},ValuesSequence.prototype=Object.create(Sequence.prototype),ValuesSequence.prototype.each=function(e){var t=-1;return this.parent.each(function(n){return e(n,++t)})},ObjectLikeSequence.prototype.async=function(){throw new Error(\"An ObjectLikeSequence does not support asynchronous iteration.\")},ObjectLikeSequence.prototype.filter=function(e){return new FilteredObjectLikeSequence(this,createCallback(e))},FilteredObjectLikeSequence.prototype=Object.create(ObjectLikeSequence.prototype),FilteredObjectLikeSequence.prototype.each=function(e){var t=this.filterFn;return this.parent.each(function(n,r){return t(n,r)?e(n,r):void 0})},ObjectLikeSequence.prototype.reverse=function(){return this},ObjectLikeSequence.prototype.assign=function(e){return new AssignSequence(this,e)},ObjectLikeSequence.prototype.extend=function(e){return this.assign(e)},AssignSequence.prototype=Object.create(ObjectLikeSequence.prototype),AssignSequence.prototype.get=function(e){return e in this.other?this.other[e]:this.parent.get(e)},AssignSequence.prototype.each=function(e){var t=new Set,n=!1;return Lazy(this.other).each(function(r,o){return e(r,o)===!1?(n=!0,!1):(t.add(o),void 0)}),n?void 0:this.parent.each(function(n,r){return t.contains(r)||e(n,r)!==!1?void 0:!1})},ObjectLikeSequence.prototype.defaults=function e(e){return new DefaultsSequence(this,e)},DefaultsSequence.prototype=Object.create(ObjectLikeSequence.prototype),DefaultsSequence.prototype.get=function(e){var t=this.parent.get(e);return void 0!==t?t:this.defaultValues[e]},DefaultsSequence.prototype.each=function(e){var t=new Set,n=!1;this.parent.each(function(r,o){return e(r,o)===!1?(n=!0,!1):(\"undefined\"!=typeof r&&t.add(o),void 0)}),n||Lazy(this.defaultValues).each(function(n,r){return t.contains(r)||e(n,r)!==!1?void 0:!1})},ObjectLikeSequence.prototype.invert=function(){return new InvertedSequence(this)},InvertedSequence.prototype=Object.create(ObjectLikeSequence.prototype),InvertedSequence.prototype.each=function(e){this.parent.each(function(t,n){return e(n,t)})},ObjectLikeSequence.prototype.merge=function(){var e=arguments.length>1&&\"function\"==typeof arguments[arguments.length-1]?arrayPop.call(arguments):null;return new MergedSequence(this,arraySlice.call(arguments,0),e)},MergedSequence.prototype=Object.create(ObjectLikeSequence.prototype),MergedSequence.prototype.each=function(e){var t=this.others,n=this.mergeFn||mergeObjects,r={},o=this.parent.each(function(o,i){var c=o;return forEach(t,function(e){i in e&&(c=n(c,e[i]))}),r[i]=!0,e(c,i)});if(o===!1)return!1;var i={};return forEach(t,function(e){for(var t in e)r[t]||(i[t]=n(i[t],e[t]))}),Lazy(i).each(e)},ObjectLikeSequence.prototype.functions=function(){return this.filter(function(e){return\"function\"==typeof e}).map(function(e,t){return t})},ObjectLikeSequence.prototype.methods=function(){return this.functions()},ObjectLikeSequence.prototype.pick=function(e){return new PickSequence(this,e)},PickSequence.prototype=Object.create(ObjectLikeSequence.prototype),PickSequence.prototype.get=function(e){return arrayContains(this.properties,e)?this.parent.get(e):void 0},PickSequence.prototype.each=function(e){var t=arrayContains,n=this.properties;return this.parent.each(function(r,o){return t(n,o)?e(r,o):void 0})},ObjectLikeSequence.prototype.omit=function(e){return new OmitSequence(this,e)},OmitSequence.prototype=Object.create(ObjectLikeSequence.prototype),OmitSequence.prototype.get=function(e){return arrayContains(this.properties,e)?void 0:this.parent.get(e)},OmitSequence.prototype.each=function(e){var t=arrayContains,n=this.properties;return this.parent.each(function(r,o){return t(n,o)?void 0:e(r,o)})},ObjectLikeSequence.prototype.pairs=function(){return this.map(function(e,t){return[t,e]})},ObjectLikeSequence.prototype.toArray=function(){return this.pairs().toArray()},ObjectLikeSequence.prototype.toObject=function(){return this.reduce(function(e,t,n){return e[n]=t,e},{})},GroupedSequence.prototype=Object.create(ObjectLikeSequence.prototype),GroupedSequence.prototype.each=function(e){var t,n=createCallback(this.keyFn),r=createCallback(this.valFn);return t=this.parent.reduce(function(e,t){var o=n(t),i=r(t);return isArray(e[o])?e[o].push(i):e[o]=[i],e},{}),transform(function(t){for(var n in t)if(e(t[n],n)===!1)return!1;return!0},t)},IndexedSequence.prototype=Object.create(ObjectLikeSequence.prototype),IndexedSequence.prototype.each=function(e){var t=createCallback(this.keyFn),n=createCallback(this.valFn),r={};return this.parent.each(function(o){var i=t(o),c=n(o);return r[i]?void 0:(r[i]=c,e(c,i))})},CountedSequence.prototype=Object.create(ObjectLikeSequence.prototype),CountedSequence.prototype.each=function(e){var t=createCallback(this.keyFn),n={};this.parent.each(function(e){var r=t(e);n[r]?n[r]+=1:n[r]=1});for(var r in n)if(e(n[r],r)===!1)return!1;return!0},ObjectLikeSequence.prototype.watch=function(){throw new Error(\"You can only call #watch on a directly wrapped object.\")},ObjectWrapper.prototype=Object.create(ObjectLikeSequence.prototype),ObjectWrapper.prototype.root=function(){return this},ObjectWrapper.prototype.isAsync=function(){return!1},ObjectWrapper.prototype.get=function(e){return this.source[e]},ObjectWrapper.prototype.each=function(e){var t,n,r=this.source,o=r?Object.keys(r):[],i=o.length;for(n=0;i>n;++n)if(t=o[n],e(r[t],t)===!1)return!1;return!0},StringLikeSequence.prototype=Object.create(ArrayLikeSequence.prototype),StringLikeSequence.define=function(e,t){if(!t||\"function\"!=typeof t.get)throw new Error(\"A custom string-like sequence must implement *at least* get!\");return defineSequenceType(StringLikeSequence,e,t)},StringLikeSequence.prototype.value=function(){return this.toString()},StringLikeSequence.prototype.getIterator=function(){return new CharIterator(this)},CharIterator.prototype.current=function(){return this.source.charAt(this.index)},CharIterator.prototype.moveNext=function(){return++this.index<this.source.length()},StringLikeSequence.prototype.charAt=function(e){return this.get(e)},StringLikeSequence.prototype.charCodeAt=function(e){var t=this.charAt(e);return t?t.charCodeAt(0):0/0},StringLikeSequence.prototype.substring=function(e,t){return new StringSegment(this,e,t)},StringSegment.prototype=Object.create(StringLikeSequence.prototype),StringSegment.prototype.get=function(e){return this.parent.get(e+this.start)},StringSegment.prototype.length=function(){return(\"number\"==typeof this.stop?this.stop:this.parent.length())-this.start},StringLikeSequence.prototype.first=function(e){return\"undefined\"==typeof e?this.charAt(0):this.substring(0,e)},StringLikeSequence.prototype.last=function(e){return\"undefined\"==typeof e?this.charAt(this.length()-1):this.substring(this.length()-e)},StringLikeSequence.prototype.drop=function(e){return this.substring(e)},StringLikeSequence.prototype.indexOf=function(e,t){return this.toString().indexOf(e,t)},StringLikeSequence.prototype.lastIndexOf=function(e,t){return this.toString().lastIndexOf(e,t)},StringLikeSequence.prototype.contains=function(e){return-1!==this.indexOf(e)},StringLikeSequence.prototype.endsWith=function(e){return this.substring(this.length()-e.length).toString()===e},StringLikeSequence.prototype.startsWith=function(e){return this.substring(0,e.length).toString()===e},StringLikeSequence.prototype.toUpperCase=function(){return this.mapString(function(e){return e.toUpperCase()})},StringLikeSequence.prototype.toLowerCase=function(){return this.mapString(function(e){return e.toLowerCase()})},StringLikeSequence.prototype.mapString=function(e){return new MappedStringLikeSequence(this,e)},MappedStringLikeSequence.prototype=Object.create(StringLikeSequence.prototype),MappedStringLikeSequence.prototype.get=IndexedMappedSequence.prototype.get,MappedStringLikeSequence.prototype.length=IndexedMappedSequence.prototype.length,StringLikeSequence.prototype.reverse=function(){return new ReversedStringLikeSequence(this)},ReversedStringLikeSequence.prototype=Object.create(StringLikeSequence.prototype),ReversedStringLikeSequence.prototype.get=IndexedReversedSequence.prototype.get,ReversedStringLikeSequence.prototype.length=IndexedReversedSequence.prototype.length,StringLikeSequence.prototype.toString=function(){return this.join(\"\")},StringLikeSequence.prototype.match=function(e){return new StringMatchSequence(this,e)},StringMatchSequence.prototype=Object.create(Sequence.prototype),StringMatchSequence.prototype.getIterator=function(){return new StringMatchIterator(this.parent.toString(),this.pattern)},StringMatchIterator.prototype.current=function(){return this.match[0]},StringMatchIterator.prototype.moveNext=function(){return!!(this.match=this.pattern.exec(this.source))},StringLikeSequence.prototype.split=function(e){return new SplitStringSequence(this,e)},SplitStringSequence.prototype=Object.create(Sequence.prototype),SplitStringSequence.prototype.getIterator=function(){var e=this.parent.toString();return this.pattern instanceof RegExp?\"\"===this.pattern.source||\"(?:)\"===this.pattern.source?new CharIterator(e):new SplitWithRegExpIterator(e,this.pattern):\"\"===this.pattern?new CharIterator(e):new SplitWithStringIterator(e,this.pattern)},SplitWithRegExpIterator.prototype.current=function(){return this.source.substring(this.start,this.end)},SplitWithRegExpIterator.prototype.moveNext=function(){if(!this.pattern)return!1;var e=this.pattern.exec(this.source);return e?(this.start=this.nextStart?this.nextStart:0,this.end=e.index,this.nextStart=e.index+e[0].length,!0):this.pattern?(this.start=this.nextStart,this.end=void 0,this.nextStart=void 0,this.pattern=void 0,!0):!1},SplitWithStringIterator.prototype.current=function(){return this.source.substring(this.leftIndex,this.rightIndex)},SplitWithStringIterator.prototype.moveNext=function(){return this.finished||(this.leftIndex=\"undefined\"!=typeof this.leftIndex?this.rightIndex+this.delimiter.length:0,this.rightIndex=this.source.indexOf(this.delimiter,this.leftIndex)),-1===this.rightIndex?(this.finished=!0,this.rightIndex=void 0,!0):!this.finished},StringWrapper.prototype=Object.create(StringLikeSequence.prototype),StringWrapper.prototype.root=function(){return this},StringWrapper.prototype.isAsync=function(){return!1},StringWrapper.prototype.get=function(e){return this.source.charAt(e)},StringWrapper.prototype.length=function(){return this.source.length},StringWrapper.prototype.toString=function(){return this.source},GeneratedSequence.prototype=Object.create(Sequence.prototype),GeneratedSequence.prototype.isAsync=function(){return!1},GeneratedSequence.prototype.length=function(){return this.fixedLength},GeneratedSequence.prototype.each=function(e){for(var t=this.get,n=this.fixedLength,r=0;\"undefined\"==typeof n||n>r;)if(e(t(r),r++)===!1)return!1;return!0},GeneratedSequence.prototype.getIterator=function(){return new GeneratedIterator(this)},GeneratedIterator.prototype.current=function(){return this.currentValue},GeneratedIterator.prototype.moveNext=function(){var e=this.sequence;return\"number\"==typeof e.fixedLength&&this.index>=e.fixedLength?!1:(this.currentValue=e.get(this.index++),!0)},AsyncSequence.prototype=Object.create(Sequence.prototype),AsyncSequence.prototype.isAsync=function(){return!0},AsyncSequence.prototype.getIterator=function(){throw new Error(\"An AsyncSequence does not support synchronous iteration.\")},AsyncSequence.prototype.each=function(e){var t=this.parent.getIterator(),n=this.onNextCallback,r=this.cancelCallback,o=0,i=new AsyncHandle(function(){c&&r(c)}),c=n(function u(){c=null;try{t.moveNext()&&e(t.current(),o++)!==!1?c=n(u):i._resolve()}catch(r){i._reject(r)}});return i};var PENDING=1,RESOLVED=2,REJECTED=3;AsyncHandle.prototype.then=function(e,t){var n=new AsyncHandle(this.cancelFn);return this.resolveListeners.push(function(t){try{if(\"function\"!=typeof e)return resolve(n,t),void 0;resolve(n,e(t))}catch(r){n._reject(r)}}),this.rejectListeners.push(function(e){try{if(\"function\"!=typeof t)return n._reject(e),void 0;resolve(n,t(e))}catch(r){n._reject(r)}}),this.state===RESOLVED&&this._resolve(this.value),this.state===REJECTED&&this._reject(this.reason),n},AsyncHandle.prototype._resolve=function(e){this.state!==REJECTED&&(this.state===PENDING&&(this.state=RESOLVED,this.value=e),consumeListeners(this.resolveListeners,this.value))},AsyncHandle.prototype._reject=function(e){this.state!==RESOLVED&&(this.state===PENDING&&(this.state=REJECTED,this.reason=e),consumeListeners(this.rejectListeners,this.reason))},AsyncHandle.prototype.cancel=function(){this.cancelFn&&(this.cancelFn(),this.cancelFn=null,this._resolve(!1))},AsyncHandle.prototype.onComplete=function(e){return this.resolveListeners.push(e),this},AsyncHandle.prototype.onError=function(e){return this.rejectListeners.push(e),this},AsyncSequence.prototype.reverse=function(){return this.parent.reverse().async()},AsyncSequence.prototype.find=function(e){var t,n=this.each(function(n,r){return e(n,r)?(t=n,!1):void 0});return n.then(function(){return t})},AsyncSequence.prototype.indexOf=function(e){var t=-1,n=this.each(function(n,r){return n===e?(t=r,!1):void 0});return n.then(function(){return t})},AsyncSequence.prototype.contains=function(e){var t=!1,n=this.each(function(n){return n===e?(t=!0,!1):void 0});return n.then(function(){return t})},AsyncSequence.prototype.async=function(){return this},ObjectWrapper.prototype.watch=function(e){return new WatchedPropertySequence(this.source,e)},WatchedPropertySequence.prototype=Object.create(AsyncSequence.prototype),WatchedPropertySequence.prototype.each=function(e){this.listeners.push(e)},StreamLikeSequence.prototype=Object.create(AsyncSequence.prototype),StreamLikeSequence.prototype.isAsync=function(){return!0},StreamLikeSequence.prototype.split=function(e){return new SplitStreamSequence(this,e)},SplitStreamSequence.prototype=Object.create(Sequence.prototype),SplitStreamSequence.prototype.getEachForDelimiter=function(e){return e instanceof RegExp?this.regexEach:this.stringEach},SplitStreamSequence.prototype.regexEach=function(e){var t,n=cloneRegex(this.delimiter),r=\"\",o=0,i=0,c=this.parent.each(function(c){r+=c;for(var u;u=n.exec(r);){if(t=u.index,e(r.substring(o,t),i++)===!1)return!1;o=t+u[0].length}r=r.substring(o),o=0});return c.onComplete(function(){r.length>0&&e(r,i++)}),c},SplitStreamSequence.prototype.stringEach=function(e){var t=this.delimiter,n=0,r=\"\",o=this.parent.each(function(o){r+=o;for(var i;(i=r.indexOf(t))>=0;){var c=r.substr(0,i);if(r=r.substr(i+t.length),e(c,n++)===!1)return!1}return!0});return o.onComplete(function(){e(r,n++)}),o},StreamLikeSequence.prototype.lines=function(){return this.split(\"\\n\")},StreamLikeSequence.prototype.match=function(e){return new MatchedStreamSequence(this,e)},MatchedStreamSequence.prototype=Object.create(AsyncSequence.prototype),MatchedStreamSequence.prototype.each=function(e){var t=this.pattern,n=!1,r=0;return this.parent.each(function(o){return Lazy(o).match(t).each(function(t){return e(t,r++)===!1?(n=!0,!1):void 0}),!n})},Lazy.createWrapper=function(e){var t=function(){this.listeners=[]};return t.prototype=Object.create(StreamLikeSequence.prototype),t.prototype.each=function(e){this.listeners.push(e)},t.prototype.emit=function(e){for(var t=this.listeners,n=t.length,r=n-1;r>=0;--r)t[r](e)===!1&&t.splice(r,1)},function(){var n=new t;return e.apply(n,arguments),n}},Lazy.generate=function(e,t){return new GeneratedSequence(e,t)},Lazy.range=function(){var e=arguments.length>1?arguments[0]:0,t=arguments.length>1?arguments[1]:arguments[0],n=arguments.length>2&&arguments[2];return n===!1&&(n=t>e?1:-1),0===n?Lazy([]):Lazy.generate(function(t){return e+n*t}).take(Math.ceil((t-e)/n))},Lazy.repeat=function(e,t){return Lazy.generate(function(){return e},t)},Lazy.Sequence=Sequence,Lazy.ArrayLikeSequence=ArrayLikeSequence,Lazy.ObjectLikeSequence=ObjectLikeSequence,Lazy.StringLikeSequence=StringLikeSequence,Lazy.StreamLikeSequence=StreamLikeSequence,Lazy.GeneratedSequence=GeneratedSequence,Lazy.AsyncSequence=AsyncSequence,Lazy.AsyncHandle=AsyncHandle,Lazy.clone=function(e){return Lazy(e).value()},Lazy.deprecate=function(e,t){return function(){return console.warn(e),t.apply(this,arguments)}};var isArray=Array.isArray||function(e){return e instanceof Array},arrayPop=Array.prototype.pop,arraySlice=Array.prototype.slice;return Lazy.curry=curry,Lazy.curryRight=curryRight,Lazy.createCallback=createCallback,Lazy.createComparator=createComparator,Set.prototype.add=function(e){var t,n=this.table,r=typeof e;switch(r){case\"number\":case\"boolean\":case\"undefined\":return n[e]?!1:(n[e]=!0,!0);case\"string\":switch(e.charAt(0)){case\"_\":case\"f\":case\"t\":case\"c\":case\"u\":case\"@\":case\"0\":case\"1\":case\"2\":case\"3\":case\"4\":case\"5\":case\"6\":case\"7\":case\"8\":case\"9\":case\"N\":e=\"@\"+e}return n[e]?!1:(n[e]=!0,!0);default:return t=this.objects,arrayContains(t,e)?!1:(t.push(e),!0)}},Set.prototype.contains=function(e){var t=typeof e;switch(t){case\"number\":case\"boolean\":case\"undefined\":return!!this.table[e];case\"string\":switch(e.charAt(0)){case\"_\":case\"f\":case\"t\":case\"c\":case\"u\":case\"@\":case\"0\":case\"1\":case\"2\":case\"3\":case\"4\":case\"5\":case\"6\":case\"7\":case\"8\":case\"9\":case\"N\":e=\"@\"+e}return!!this.table[e];default:return arrayContains(this.objects,e)}},Queue.prototype.add=function(e){var t=this.contents,n=t.length,r=this.start;return this.count===n?(t[r]=e,this.start=(r+1)%n):t[this.count++]=e,this},Queue.prototype.toArray=function(){var e=this.contents,t=this.start,n=this.count,r=e.slice(t,t+n);return r.length<n&&(r=r.concat(e.slice(0,n-r.length))),r},Lazy}),function(e){function t(e){this.source=e}function n(e){this.source=e}function r(e,t){this.elements=e,this.eventName=t}function o(e){this.url=e}t.prototype=new e.ArrayLikeSequence,t.prototype.get=function(e){return this.source[e]},t.prototype.length=function(){return this.source.length},t.prototype.flatten=function(){return new n(this.source)},n.prototype=new e.Sequence,n.prototype.each=function(t){var n=0,r=!1;e(this.source).each(function(o){return t(o,n++)===!1?!1:(e(o.children).flatten().each(function(e){return t(e,n++)===!1?(r=!0,!1):void 0}),r?!1:void 0)})},t.prototype.on=function(e){return new r(this.source,e)},r.prototype=new e.Sequence,r.prototype.each=function(e){for(var t=this.elements,n=this.eventName,r=function(o){if(e(o)===!1)for(var i=0;i<t.length;++i)t[i].removeEventListener(n,r)},o=0;o<t.length;++o)t[o].addEventListener(this.eventName,r)},e.events=e.deprecate(\"Lazy.events is deprecated. Use Lazy(element[s]).on('event') instead\",function(e,t){return new r(e,t)}),o.prototype=new e.StreamLikeSequence,o.prototype.each=function(t){var n=new XMLHttpRequest,r=0,o=!1;n.open(\"GET\",this.url);var i=new e.AsyncHandle,c=function u(e){if(!o){e=n.responseText.substring(r);try{t(e)===!1&&(n.removeEventListener(\"progress\",u,!1),n.abort(),o=!0,i._resolve(!1)),r+=e.length}catch(c){i._reject(c)}}};return n.addEventListener(\"progress\",c,!1),n.addEventListener(\"load\",function(){i._resolve(!0)}),n.send(),i},e.makeHttpRequest=function(e){return new o(e)},e.extensions||(e.extensions=[]),e.extensions.push(function(e){return e instanceof NodeList||e instanceof HTMLCollection?new t(e):e instanceof Element?new t([e]):void 0})}(window.Lazy);\n"
        },
        {
          "name": "lazy.node.js",
          "type": "blob",
          "size": 4.853515625,
          "content": "var fs     = require(\"fs\");\nvar http   = require(\"http\");\nvar os     = require(\"os\");\nvar Stream = require(\"stream\");\nvar URL    = require(\"url\");\nvar util   = require(\"util\");\n\n// The starting point is everything that works in any environment (browser OR\n// Node.js).\nvar Lazy = require(\"./lazy.js\");\n\n// Check if ES6 features are supported and, if so, include ES6-specific Lazy.js\n// features.\nvar isHarmonySupported = require('./util.js').isHarmonySupported;\nif (isHarmonySupported()) {\n  require('./experimental/lazy.es6.js');\n}\n\n/**\n * @constructor\n */\nfunction StreamedSequence(stream) {\n  this.stream = stream;\n}\n\nStreamedSequence.prototype = new Lazy.StreamLikeSequence();\n\nStreamedSequence.prototype.openStream = function(callback) {\n  this.stream.resume();\n  callback(this.stream);\n};\n\n/**\n * Handles every chunk of data in this sequence.\n *\n * @param {function(string):*} fn The function to call on each chunk of data as\n *     it's read from the stream. Return false from the function to stop reading\n *     the stream.\n */\nStreamedSequence.prototype.each = function(fn) {\n  var cancelled = false,\n      encoding = this.encoding;\n\n  var handle = new Lazy.AsyncHandle(function cancel() { cancelled = true; });\n\n  this.openStream(function(stream) {\n    if (stream.setEncoding) {\n      stream.setEncoding(encoding || 'utf8');\n    }\n\n    var listener = function(e) {\n      try {\n        if (cancelled || fn(e) === false) {\n          stream.removeListener(\"data\", listener);\n          handle._resolve(false);\n        }\n      } catch (e) {\n        handle._reject(e);\n      }\n    };\n\n    stream.on(\"data\", listener);\n\n    stream.on(\"end\", function() {\n      handle._resolve(true);\n    });\n  });\n\n  return handle;\n};\n\n/**\n * Creates a {@link Sequence} of lines as they are read from a file.\n *\n * @return {Sequence} A sequence comprising the lines in the underlying file, as\n *     they are read.\n */\nStreamedSequence.prototype.lines = function() {\n  return this.split(os.EOL || \"\\n\");\n};\n\nfunction FileStreamSequence(path, encoding) {\n  this.path = path;\n  this.encoding = encoding;\n}\n\nFileStreamSequence.prototype = new StreamedSequence();\n\nFileStreamSequence.prototype.openStream = function(callback) {\n  var stream = fs.createReadStream(this.path, { autoClose: true });\n  callback(stream);\n};\n\n/**\n * Creates a {@link Sequence} from a file stream, whose elements are chunks of\n * data as the stream is read. This is an {@link AsyncSequence}, so methods such\n * as {@link Sequence#reduce} return an {@link AsyncHandle} rather than a value.\n *\n * @param {string} path A path to a file.\n * @param {string} encoding The text encoding of the file (e.g., \"utf-8\").\n * @return {Sequence} The streamed sequence.\n */\nLazy.readFile = function(path, encoding) {\n  return new FileStreamSequence(path, encoding);\n};\n\nfunction HttpStreamSequence(url, encoding) {\n  this.url = url;\n  this.encoding = encoding;\n}\n\nHttpStreamSequence.prototype = new StreamedSequence();\n\nHttpStreamSequence.prototype.openStream = function(callback) {\n  http.get(URL.parse(this.url), callback);\n};\n\n/**\n * Creates a {@link Sequence} from an HTTP stream, whose elements are chunks of\n * data as the stream is read. This sequence works asynchronously, so\n * synchronous methods such as {@code indexOf}, {@code any}, and {@code toArray}\n * won't work.\n *\n * @param {string} url The URL for the HTTP request.\n * @return {Sequence} The streamed sequence.\n */\nLazy.makeHttpRequest = function(url) {\n  return new HttpStreamSequence(url);\n};\n\nif (typeof Stream.Readable !== \"undefined\") {\n  Lazy.Sequence.prototype.toStream = function toStream(options) {\n    return new LazyStream(this, options);\n  };\n\n  Lazy.Sequence.prototype.pipe = function pipe(destination) {\n    this.toStream().pipe(destination);\n  };\n\n  function LazyStream(sequence, options) {\n    options = Lazy(options || {})\n      .extend({ objectMode: true })\n      .toObject();\n\n    Stream.Readable.call(this, options);\n\n    this.sequence = sequence;\n    this.started  = false;\n    \n    // Find delimiter on a (parent) sequence object if set\n    while (sequence) {\n      if (sequence.delimiter) {\n        this.delimiter = sequence.delimiter;\n        break;\n      }\n      sequence = sequence.parent;\n    }\n  }\n\n  util.inherits(LazyStream, Stream.Readable);\n\n  LazyStream.prototype._read = function() {\n    var self = this;\n\n    if (!this.started) {\n      var handle = this.sequence.each(function(line, i) {\n        if (self.delimiter != null) {\n          line += self.delimiter;\n        }\n        return self.push(line, i);\n      });\n      if (handle instanceof Lazy.AsyncHandle) {\n        handle.onComplete(function() {\n          self.push(null);\n        });\n      }\n      this.started = true;\n    }\n  };\n}\n\n/*\n * Add support for `Lazy(Stream)`.\n */\nLazy.extensions || (Lazy.extensions = []);\n\nLazy.extensions.push(function(source) {\n  if (source instanceof Stream) {\n    return new StreamedSequence(source);\n  }\n});\n\nmodule.exports = Lazy;\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.3271484375,
          "content": "{\n  \"name\": \"lazy.js\",\n  \"description\": \"Like Underscore, but lazier\",\n  \"version\": \"0.5.1\",\n  \"homepage\": \"http://dtao.github.io/lazy.js/\",\n  \"author\": {\n    \"name\": \"Dan Tao\",\n    \"email\": \"daniel.tao@gmail.com\",\n    \"url\": \"http://philosopherdeveloper.com\"\n  },\n  \"browser\": \"lazy.js\",\n  \"main\": \"lazy.node.js\",\n  \"license\": \"MIT\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/dtao/lazy.js.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/dtao/lazy.js/issues\"\n  },\n  \"keywords\": [\n    \"lazy\",\n    \"functional\",\n    \"performance\",\n    \"speed\",\n    \"util\"\n  ],\n  \"devDependencies\": {\n    \"JSONStream\": \"0.10.0\",\n    \"autodoc\": \"0.6.4\",\n    \"benchmark\": \"1.0.0\",\n    \"deft\": \"0.2.2\",\n    \"jasmine-async\": \"0.0.1\",\n    \"jasmine-node\": \"1.13.x\",\n    \"jsdoc\": \"3.2.x\",\n    \"lodash\": \"4.2.1\",\n    \"memorystream\": \"0.2.0\",\n    \"promises-aplus-tests\": \"2.1.0\",\n    \"race.js\": \"0.1.4\",\n    \"requirejs\": \"^2.1.20\",\n    \"string-table\": \"0.1.2\",\n    \"underscore\": \"1.8.3\"\n  },\n  \"scripts\": {\n    \"test\": \"npm run-script 'autodoc' && npm run-script 'jasmine' && npm run-script 'amd' && npm run-script 'promise'\",\n    \"autodoc\": \"autodoc -t --variable Lazy lazy.js\",\n    \"jasmine\": \"jasmine-node spec/node_spec.js\",\n    \"amd\": \"node spec/amd_spec.js\",\n    \"promise\": \"promises-aplus-tests spec/async_handle_adapter --reporter dot --bail\"\n  }\n}\n"
        },
        {
          "name": "perf",
          "type": "tree",
          "content": null
        },
        {
          "name": "site",
          "type": "tree",
          "content": null
        },
        {
          "name": "spec",
          "type": "tree",
          "content": null
        },
        {
          "name": "util.js",
          "type": "blob",
          "size": 0.3681640625,
          "content": "function isHarmonySupported() {\n  var version = process.version.split('.');\n\n  // We'll only bother checking Node versions 0.10 and greater\n  if (version[0] == 'v0' && Number(version[1]) < 10) {\n    return false;\n  }\n\n  try {\n    eval('(function*() {})');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nmodule.exports = {\n  isHarmonySupported: isHarmonySupported\n};\n"
        }
      ]
    }
  ]
}