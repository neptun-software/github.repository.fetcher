{
  "metadata": {
    "timestamp": 1736563093231,
    "page": 746,
    "hasNextPage": false,
    "endCursor": "Y3Vyc29yOjc4Mw==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "felixge/node-style-guide",
      "stars": 5004,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1630859375,
          "content": "# editorconfig.org\n\nroot = true\n\n[*]\ncharset = utf-8\ninsert_final_newline = true\ntrim_trailing_whitespace = true\nend_of_line = lf\nindent_style = space\nindent_size = 2\n"
        },
        {
          "name": ".eslintrc",
          "type": "blob",
          "size": 0.7255859375,
          "content": "{\n  \"env\": {\n    \"node\": true\n  },\n  \"rules\": {\n    \"array-bracket-spacing\": [2, \"never\"],\n    \"block-scoped-var\": 2,\n    \"brace-style\": [2, \"1tbs\"],\n    \"camelcase\": 1,\n    \"computed-property-spacing\": [2, \"never\"],\n    \"curly\": 2,\n    \"eol-last\": 2,\n    \"eqeqeq\": [2, \"smart\"],\n    \"max-depth\": [1, 3],\n    \"max-len\": [1, 80],\n    \"max-statements\": [1, 15],\n    \"new-cap\": 1,\n    \"no-extend-native\": 2,\n    \"no-mixed-spaces-and-tabs\": 2,\n    \"no-trailing-spaces\": 2,\n    \"no-unused-vars\": 1,\n    \"no-use-before-define\": [2, \"nofunc\"],\n    \"object-curly-spacing\": [2, \"never\"],\n    \"quotes\": [2, \"single\", \"avoid-escape\"],\n    \"semi\": [2, \"always\"],\n    \"keyword-spacing\": [2, {\"before\": true, \"after\": true}],\n    \"space-unary-ops\": 2\n  }\n}\n"
        },
        {
          "name": ".jshintrc",
          "type": "blob",
          "size": 0.2392578125,
          "content": "{\n  \"camelcase\": true,\n  \"curly\": true,\n  \"eqeqeq\": true,\n  \"freeze\": true,\n  \"indent\": 2,\n  \"newcap\": true,\n  \"quotmark\": \"single\",\n  \"maxdepth\": 3,\n  \"maxstatements\": 15,\n  \"maxlen\": 80,\n  \"eqnull\": true,\n  \"funcscope\": true,\n  \"node\": true\n}\n"
        },
        {
          "name": "Readme.md",
          "type": "blob",
          "size": 11.8095703125,
          "content": "# Node.js Style Guide\n\nThis is a guide for writing consistent and aesthetically pleasing node.js code.\nIt is inspired by what is popular within the community, and flavored with some\npersonal opinions.\n\nThere is a .jshintrc which enforces these rules as closely as possible. You can\neither use that and adjust it, or use\n[this script](https://gist.github.com/kentcdodds/11293570) to make your own.\n\nThis guide was created by [Felix GeisendÃ¶rfer](http://felixge.de/) and is\nlicensed under the [CC BY-SA 3.0](http://creativecommons.org/licenses/by-sa/3.0/)\nlicense. You are encouraged to fork this repository and make adjustments\naccording to your preferences.\n\n![Creative Commons License](http://i.creativecommons.org/l/by-sa/3.0/88x31.png)\n\n## Table of contents\n\n### Formatting\n* [2 Spaces for indentation](#2-spaces-for-indentation)\n* [Newlines](#newlines)\n* [No trailing whitespace](#no-trailing-whitespace)\n* [Use Semicolons](#use-semicolons)\n* [80 characters per line](#80-characters-per-line)\n* [Use single quotes](#use-single-quotes)\n* [Opening braces go on the same line](#opening-braces-go-on-the-same-line)\n* [Declare one variable per var statement](#declare-one-variable-per-var-statement)\n\n### Naming Conventions\n* [Use lowerCamelCase for variables, properties and function names](#use-lowercamelcase-for-variables-properties-and-function-names)\n* [Use UpperCamelCase for class names](#use-uppercamelcase-for-class-names)\n* [Use UPPERCASE for Constants](#use-uppercase-for-constants)\n\n### Variables\n* [Object / Array creation](#object--array-creation)\n\n### Conditionals\n* [Use the === operator](#use-the--operator)\n* [Use multi-line ternary operator](#use-multi-line-ternary-operator)\n* [Use descriptive conditions](#use-descriptive-conditions)\n\n### Functions\n* [Write small functions](#write-small-functions)\n* [Return early from functions](#return-early-from-functions)\n* [Name your closures](#name-your-closures)\n* [No nested closures](#no-nested-closures)\n* [Method chaining](#method-chaining)\n\n### Comments\n* [Use slashes for comments](#use-slashes-for-comments)\n\n### Miscellaneous\n* [Object.freeze, Object.preventExtensions, Object.seal, with, eval](#objectfreeze-objectpreventextensions-objectseal-with-eval)\n* [Requires At Top](#requires-at-top)\n* [Getters and setters](#getters-and-setters)\n* [Do not extend built-in prototypes](#do-not-extend-built-in-prototypes)\n\n## Formatting\n\nYou may want to use [editorconfig.org](http://editorconfig.org/) to enforce the formatting settings in your editor. Use the [Node.js Style Guide .editorconfig file](.editorconfig) to have indentation, newslines and whitespace behavior automatically set to the rules set up below.\n\n### 2 Spaces for indentation\n\nUse 2 spaces for indenting your code and swear an oath to never mix tabs and\nspaces - a special kind of hell is awaiting you otherwise.\n\n### Newlines\n\nUse UNIX-style newlines (`\\n`), and a newline character as the last character\nof a file. Windows-style newlines (`\\r\\n`) are forbidden inside any repository.\n\n### No trailing whitespace\n\nJust like you brush your teeth after every meal, you clean up any trailing\nwhitespace in your JS files before committing. Otherwise the rotten smell of\ncareless neglect will eventually drive away contributors and/or co-workers.\n\n### Use Semicolons\n\nAccording to [scientific research][hnsemicolons], the usage of semicolons is\na core value of our community. Consider the points of [the opposition][], but\nbe a traditionalist when it comes to abusing error correction mechanisms for\ncheap syntactic pleasures.\n\n[the opposition]: http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding\n[hnsemicolons]: http://news.ycombinator.com/item?id=1547647\n\n### 80 characters per line\n\nLimit your lines to 80 characters. Yes, screens have gotten much bigger over the\nlast few years, but your brain has not. Use the additional room for split screen,\nyour editor supports that, right?\n\n### Use single quotes\n\nUse single quotes, unless you are writing JSON.\n\n*Right:*\n\n```js\nvar foo = 'bar';\n```\n\n*Wrong:*\n\n```js\nvar foo = \"bar\";\n```\n\n### Opening braces go on the same line\n\nYour opening braces go on the same line as the statement.\n\n*Right:*\n\n```js\nif (true) {\n  console.log('winning');\n}\n```\n\n*Wrong:*\n\n```js\nif (true)\n{\n  console.log('losing');\n}\n```\n\nAlso, notice the use of whitespace before and after the condition statement.\n\n### Declare one variable per var statement\n\nDeclare one variable per var statement, it makes it easier to re-order the\nlines. However, ignore [Crockford][crockfordconvention] when it comes to\ndeclaring variables deeper inside a function, just put the declarations wherever\nthey make sense.\n\n*Right:*\n\n```js\nvar keys   = ['foo', 'bar'];\nvar values = [23, 42];\n\nvar object = {};\nwhile (keys.length) {\n  var key = keys.pop();\n  object[key] = values.pop();\n}\n```\n\n*Wrong:*\n\n```js\nvar keys = ['foo', 'bar'],\n    values = [23, 42],\n    object = {},\n    key;\n\nwhile (keys.length) {\n  key = keys.pop();\n  object[key] = values.pop();\n}\n```\n\n[crockfordconvention]: http://javascript.crockford.com/code.html\n\n## Naming Conventions\n\n### Use lowerCamelCase for variables, properties and function names\n\nVariables, properties and function names should use `lowerCamelCase`.  They\nshould also be descriptive. Single character variables and uncommon\nabbreviations should generally be avoided.\n\n*Right:*\n\n```js\nvar adminUser = db.query('SELECT * FROM users ...');\n```\n\n*Wrong:*\n\n```js\nvar admin_user = db.query('SELECT * FROM users ...');\n```\n\n### Use UpperCamelCase for class names\n\nClass names should be capitalized using `UpperCamelCase`.\n\n*Right:*\n\n```js\nfunction BankAccount() {\n}\n```\n\n*Wrong:*\n\n```js\nfunction bank_Account() {\n}\n```\n\n### Use UPPERCASE for Constants\n\nConstants should be declared as regular variables or static class properties,\nusing all uppercase letters.\n\n*Right:*\n\n```js\nvar SECOND = 1 * 1000;\n\nfunction File() {\n}\nFile.FULL_PERMISSIONS = 0777;\n```\n\n*Wrong:*\n\n```js\nconst SECOND = 1 * 1000;\n\nfunction File() {\n}\nFile.fullPermissions = 0777;\n```\n\n[const]: https://developer.mozilla.org/en/JavaScript/Reference/Statements/const\n\n## Variables\n\n### Object / Array creation\n\nUse trailing commas and put *short* declarations on a single line. Only quote\nkeys when your interpreter complains:\n\n*Right:*\n\n```js\nvar a = ['hello', 'world'];\nvar b = {\n  good: 'code',\n  'is generally': 'pretty',\n};\n```\n\n*Wrong:*\n\n```js\nvar a = [\n  'hello', 'world'\n];\nvar b = {\"good\": 'code'\n        , is generally: 'pretty'\n        };\n```\n\n## Conditionals\n\n### Use the === operator\n\nProgramming is not about remembering [stupid rules][comparisonoperators]. Use\nthe triple equality operator as it will work just as expected.\n\n*Right:*\n\n```js\nvar a = 0;\nif (a !== '') {\n  console.log('winning');\n}\n\n```\n\n*Wrong:*\n\n```js\nvar a = 0;\nif (a == '') {\n  console.log('losing');\n}\n```\n\n[comparisonoperators]: https://developer.mozilla.org/en/JavaScript/Reference/Operators/Comparison_Operators\n\n### Use multi-line ternary operator\n\nThe ternary operator should not be used on a single line. Split it up into multiple lines instead.\n\n*Right:*\n\n```js\nvar foo = (a === b)\n  ? 1\n  : 2;\n```\n\n*Wrong:*\n\n```js\nvar foo = (a === b) ? 1 : 2;\n```\n\n### Use descriptive conditions\n\nAny non-trivial conditions should be assigned to a descriptively named variable or function:\n\n*Right:*\n\n```js\nvar isValidPassword = password.length >= 4 && /^(?=.*\\d).{4,}$/.test(password);\n\nif (isValidPassword) {\n  console.log('winning');\n}\n```\n\n*Wrong:*\n\n```js\nif (password.length >= 4 && /^(?=.*\\d).{4,}$/.test(password)) {\n  console.log('losing');\n}\n```\n\n## Functions\n\n### Write small functions\n\nKeep your functions short. A good function fits on a slide that the people in\nthe last row of a big room can comfortably read. So don't count on them having\nperfect vision and limit yourself to ~15 lines of code per function.\n\n### Return early from functions\n\nTo avoid deep nesting of if-statements, always return a function's value as early\nas possible.\n\n*Right:*\n\n```js\nfunction isPercentage(val) {\n  if (val < 0) {\n    return false;\n  }\n\n  if (val > 100) {\n    return false;\n  }\n\n  return true;\n}\n```\n\n*Wrong:*\n\n```js\nfunction isPercentage(val) {\n  if (val >= 0) {\n    if (val < 100) {\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n}\n```\n\nOr for this particular example it may also be fine to shorten things even\nfurther:\n\n```js\nfunction isPercentage(val) {\n  var isInRange = (val >= 0 && val <= 100);\n  return isInRange;\n}\n```\n\n### Name your closures\n\nFeel free to give your closures a name. It shows that you care about them, and\nwill produce better stack traces, heap and cpu profiles.\n\n*Right:*\n\n```js\nreq.on('end', function onEnd() {\n  console.log('winning');\n});\n```\n\n*Wrong:*\n\n```js\nreq.on('end', function() {\n  console.log('losing');\n});\n```\n\n### No nested closures\n\nUse closures, but don't nest them. Otherwise your code will become a mess.\n\n*Right:*\n\n```js\nsetTimeout(function() {\n  client.connect(afterConnect);\n}, 1000);\n\nfunction afterConnect() {\n  console.log('winning');\n}\n```\n\n*Wrong:*\n\n```js\nsetTimeout(function() {\n  client.connect(function() {\n    console.log('losing');\n  });\n}, 1000);\n```\n\n\n### Method chaining\n\nOne method per line should be used if you want to chain methods.\n\nYou should also indent these methods so it's easier to tell they are part of the same chain.\n\n*Right:*\n\n```js\nUser\n  .findOne({ name: 'foo' })\n  .populate('bar')\n  .exec(function(err, user) {\n    return true;\n  });\n```\n\n*Wrong:*\n\n```js\nUser\n.findOne({ name: 'foo' })\n.populate('bar')\n.exec(function(err, user) {\n  return true;\n});\n\nUser.findOne({ name: 'foo' })\n  .populate('bar')\n  .exec(function(err, user) {\n    return true;\n  });\n\nUser.findOne({ name: 'foo' }).populate('bar')\n.exec(function(err, user) {\n  return true;\n});\n\nUser.findOne({ name: 'foo' }).populate('bar')\n  .exec(function(err, user) {\n    return true;\n  });\n```\n\n## Comments\n\n### Use slashes for comments\n\nUse slashes for both single line and multi line comments. Try to write\ncomments that explain higher level mechanisms or clarify difficult\nsegments of your code. Don't use comments to restate trivial things.\n\n*Right:*\n\n```js\n// 'ID_SOMETHING=VALUE' -> ['ID_SOMETHING=VALUE', 'SOMETHING', 'VALUE']\nvar matches = item.match(/ID_([^\\n]+)=([^\\n]+)/));\n\n// This function has a nasty side effect where a failure to increment a\n// redis counter used for statistics will cause an exception. This needs\n// to be fixed in a later iteration.\nfunction loadUser(id, cb) {\n  // ...\n}\n\nvar isSessionValid = (session.expires < Date.now());\nif (isSessionValid) {\n  // ...\n}\n```\n\n*Wrong:*\n\n```js\n// Execute a regex\nvar matches = item.match(/ID_([^\\n]+)=([^\\n]+)/);\n\n// Usage: loadUser(5, function() { ... })\nfunction loadUser(id, cb) {\n  // ...\n}\n\n// Check if the session is valid\nvar isSessionValid = (session.expires < Date.now());\n// If the session is valid\nif (isSessionValid) {\n  // ...\n}\n```\n\n## Miscellaneous\n\n### Object.freeze, Object.preventExtensions, Object.seal, with, eval\n\nCrazy shit that you will probably never need. Stay away from it.\n\n### Requires At Top\n\nAlways put requires at top of file to clearly illustrate a file's dependencies. Besides giving an overview for others at a quick glance of dependencies and possible memory impact, it allows one to determine if they need a package.json file should they choose to use the file elsewhere.\n\n### Getters and setters\n\nDo not use setters, they cause more problems for people who try to use your\nsoftware than they can solve.\n\nFeel free to use getters that are free from [side effects][sideeffect], like\nproviding a length property for a collection class.\n\n[sideeffect]: http://en.wikipedia.org/wiki/Side_effect_(computer_science)\n\n### Do not extend built-in prototypes\n\nDo not extend the prototype of native JavaScript objects. Your future self will\nbe forever grateful.\n\n*Right:*\n\n```js\nvar a = [];\nif (!a.length) {\n  console.log('winning');\n}\n```\n\n*Wrong:*\n\n```js\nArray.prototype.empty = function() {\n  return !this.length;\n}\n\nvar a = [];\nif (a.empty()) {\n  console.log('losing');\n}\n```\n"
        },
        {
          "name": "index.js",
          "type": "blob",
          "size": 0.306640625,
          "content": "'use strict';\n\nvar readFile = require('fs').readFileSync;\nvar pathJoin = require('path').join;\n\nmodule.exports = {\n  eslintrc: loadJson('.eslintrc'),\n  jshintrc: loadJson('.jshintrc')\n};\n\nfunction loadJson(configFile) {\n  var data = readFile(pathJoin(__dirname, configFile), 'utf-8');\n  return JSON.parse(data);\n}\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.5517578125,
          "content": "{\n  \"name\": \"node-style-guide\",\n  \"description\": \"A guide for styling your node.js / JavaScript code.\",\n  \"version\": \"1.0.0\",\n  \"author\": \"Felix GeisendÃ¶rfer <felix@debuggable.com> (http://debuggable.com/)\",\n  \"bugs\": {\n    \"url\": \"https://github.com/felixge/node-style-guide/issues\"\n  },\n  \"homepage\": \"https://github.com/felixge/node-style-guide#readme\",\n  \"keywords\": [\n    \"eslint\",\n    \"jshint\"\n  ],\n  \"license\": \"CC-BY-SA-3.0\",\n  \"main\": \"index.js\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/felixge/node-style-guide.git\"\n  }\n}\n"
        }
      ]
    }
  ]
}