{
  "metadata": {
    "timestamp": 1736562868475,
    "page": 442,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "expressjs/session",
      "stars": 6274,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1748046875,
          "content": "# http://editorconfig.org\nroot = true\n\n[*]\ncharset = utf-8\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[{*.js,*.json,*.yml}]\nindent_size = 2\nindent_style = space\n"
        },
        {
          "name": ".eslintignore",
          "type": "blob",
          "size": 0.033203125,
          "content": ".nyc_output\ncoverage\nnode_modules\n"
        },
        {
          "name": ".eslintrc.yml",
          "type": "blob",
          "size": 0.390625,
          "content": "root: true\nextends:\n  - plugin:markdown/recommended\nplugins:\n  - markdown\noverrides:\n  - files: '**/*.md'\n    processor: 'markdown/markdown'\nrules:\n  eol-last: error\n  eqeqeq: [\"error\", \"always\", { \"null\": \"ignore\" }]\n  indent: [\"error\", 2, { \"MemberExpression\": \"off\", \"SwitchCase\": 1 }]\n  no-mixed-spaces-and-tabs: error\n  no-trailing-spaces: error\n  one-var: [\"error\", { \"initialized\": \"never\" }]\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.064453125,
          "content": ".nyc_output\ncoverage\nnode_modules\nnpm-debug.log\npackage-lock.json\n"
        },
        {
          "name": "HISTORY.md",
          "type": "blob",
          "size": 11.1484375,
          "content": "1.18.1 / 2024-10-08\n==========\n\n  * deps: cookie@0.7.2\n    - Fix object assignment of `hasOwnProperty`\n  * deps: cookie@0.7.1\n    - Allow leading dot for domain\n      - Although not permitted in the spec, some users expect this to work and user agents ignore the leading dot according to spec\n    - Add fast path for `serialize` without options, use `obj.hasOwnProperty` when parsing\n  * deps: cookie@0.7.0\n    - perf: parse cookies ~10% faster\n    - fix: narrow the validation of cookies to match RFC6265\n    - fix: add `main` to `package.json` for rspack\n\n1.18.0 / 2024-01-28\n===================\n\n  * Add debug log for pathname mismatch\n  * Add `partitioned` to `cookie` options\n  * Add `priority` to `cookie` options\n  * Fix handling errors from setting cookie\n  * Support any type in `secret` that `crypto.createHmac` supports\n  * deps: cookie@0.6.0\n    - Fix `expires` option to reject invalid dates\n    - perf: improve default decode speed\n    - perf: remove slow string split in parse\n  * deps: cookie-signature@1.0.7\n\n1.17.3 / 2022-05-11\n===================\n\n  * Fix resaving already-saved new session at end of request\n  * deps: cookie@0.4.2\n\n1.17.2 / 2021-05-19\n===================\n\n  * Fix `res.end` patch to always commit headers\n  * deps: cookie@0.4.1\n  * deps: safe-buffer@5.2.1\n\n1.17.1 / 2020-04-16\n===================\n\n  * Fix internal method wrapping error on failed reloads\n\n1.17.0 / 2019-10-10\n===================\n\n  * deps: cookie@0.4.0\n    - Add `SameSite=None` support\n  * deps: safe-buffer@5.2.0\n\n1.16.2 / 2019-06-12\n===================\n\n  * Fix restoring `cookie.originalMaxAge` when store returns `Date`\n  * deps: parseurl@~1.3.3\n\n1.16.1 / 2019-04-11\n===================\n\n  * Fix error passing `data` option to `Cookie` constructor\n  * Fix uncaught error from bad session data\n\n1.16.0 / 2019-04-10\n===================\n\n  * Catch invalid `cookie.maxAge` value earlier\n  * Deprecate setting `cookie.maxAge` to a `Date` object\n  * Fix issue where `resave: false` may not save altered sessions\n  * Remove `utils-merge` dependency\n  * Use `safe-buffer` for improved Buffer API\n  * Use `Set-Cookie` as cookie header name for compatibility\n  * deps: depd@~2.0.0\n    - Replace internal `eval` usage with `Function` constructor\n    - Use instance methods on `process` to check for listeners\n    - perf: remove argument reassignment\n  * deps: on-headers@~1.0.2\n    - Fix `res.writeHead` patch missing return value\n\n1.15.6 / 2017-09-26\n===================\n\n  * deps: debug@2.6.9\n  * deps: parseurl@~1.3.2\n    - perf: reduce overhead for full URLs\n    - perf: unroll the \"fast-path\" `RegExp`\n  * deps: uid-safe@~2.1.5\n    - perf: remove only trailing `=`\n  * deps: utils-merge@1.0.1\n\n1.15.5 / 2017-08-02\n===================\n\n  * Fix `TypeError` when `req.url` is an empty string\n  * deps: depd@~1.1.1\n    - Remove unnecessary `Buffer` loading\n\n1.15.4 / 2017-07-18\n===================\n\n  * deps: debug@2.6.8\n\n1.15.3 / 2017-05-17\n===================\n\n  * deps: debug@2.6.7\n    - deps: ms@2.0.0\n\n1.15.2 / 2017-03-26\n===================\n\n  * deps: debug@2.6.3\n    - Fix `DEBUG_MAX_ARRAY_LENGTH`\n  * deps: uid-safe@~2.1.4\n    - Remove `base64-url` dependency\n\n1.15.1 / 2017-02-10\n===================\n\n  * deps: debug@2.6.1\n    - Fix deprecation messages in WebStorm and other editors\n    - Undeprecate `DEBUG_FD` set to `1` or `2`\n\n1.15.0 / 2017-01-22\n===================\n\n  * Fix detecting modified session when session contains \"cookie\" property\n  * Fix resaving already-saved reloaded session at end of request\n  * deps: crc@3.4.4\n    - perf: use `Buffer.from` when available\n  * deps: debug@2.6.0\n    - Allow colors in workers\n    - Deprecated `DEBUG_FD` environment variable\n    - Use same color for same namespace\n    - Fix error when running under React Native\n    - deps: ms@0.7.2\n  * perf: remove unreachable branch in set-cookie method\n\n1.14.2 / 2016-10-30\n===================\n\n  * deps: crc@3.4.1\n    - Fix deprecation warning in Node.js 7.x\n  * deps: uid-safe@~2.1.3\n    - deps: base64-url@1.3.3\n\n1.14.1 / 2016-08-24\n===================\n\n  * Fix not always resetting session max age before session save\n  * Fix the cookie `sameSite` option to actually alter the `Set-Cookie`\n  * deps: uid-safe@~2.1.2\n    - deps: base64-url@1.3.2\n\n1.14.0 / 2016-07-01\n===================\n\n  * Correctly inherit from `EventEmitter` class in `Store` base class\n  * Fix issue where `Set-Cookie` `Expires` was not always updated\n  * Methods are no longer enumerable on `req.session` object\n  * deps: cookie@0.3.1\n    - Add `sameSite` option\n    - Improve error message when `encode` is not a function\n    - Improve error message when `expires` is not a `Date`\n    - perf: enable strict mode\n    - perf: use for loop in parse\n    - perf: use string concatination for serialization\n  * deps: parseurl@~1.3.1\n    - perf: enable strict mode\n  * deps: uid-safe@~2.1.1\n    - Use `random-bytes` for byte source\n    - deps: base64-url@1.2.2\n  * perf: enable strict mode\n  * perf: remove argument reassignment\n\n1.13.0 / 2016-01-10\n===================\n\n  * Fix `rolling: true` to not set cookie when no session exists\n    - Better `saveUninitialized: false` + `rolling: true` behavior\n  * deps: crc@3.4.0\n\n1.12.1 / 2015-10-29\n===================\n\n  * deps: cookie@0.2.3\n    - Fix cookie `Max-Age` to never be a floating point number\n\n1.12.0 / 2015-10-25\n===================\n\n  * Support the value `'auto'` in the `cookie.secure` option\n  * deps: cookie@0.2.2\n    - Throw on invalid values provided to `serialize`\n  * deps: depd@~1.1.0\n    - Enable strict mode in more places\n    - Support web browser loading\n  * deps: on-headers@~1.0.1\n    - perf: enable strict mode\n\n1.11.3 / 2015-05-22\n===================\n\n  * deps: cookie@0.1.3\n    - Slight optimizations\n  * deps: crc@3.3.0\n\n1.11.2 / 2015-05-10\n===================\n\n  * deps: debug@~2.2.0\n    - deps: ms@0.7.1\n  * deps: uid-safe@~2.0.0\n\n1.11.1 / 2015-04-08\n===================\n\n  * Fix mutating `options.secret` value\n\n1.11.0 / 2015-04-07\n===================\n\n  * Support an array in `secret` option for key rotation\n  * deps: depd@~1.0.1\n\n1.10.4 / 2015-03-15\n===================\n\n  * deps: debug@~2.1.3\n    - Fix high intensity foreground color for bold\n    - deps: ms@0.7.0\n\n1.10.3 / 2015-02-16\n===================\n\n  * deps: cookie-signature@1.0.6\n  * deps: uid-safe@1.1.0\n    - Use `crypto.randomBytes`, if available\n    - deps: base64-url@1.2.1\n\n1.10.2 / 2015-01-31\n===================\n\n  * deps: uid-safe@1.0.3\n    - Fix error branch that would throw\n    - deps: base64-url@1.2.0\n\n1.10.1 / 2015-01-08\n===================\n\n  * deps: uid-safe@1.0.2\n    - Remove dependency on `mz`\n\n1.10.0 / 2015-01-05\n===================\n\n  * Add `store.touch` interface for session stores\n  * Fix `MemoryStore` expiration with `resave: false`\n  * deps: debug@~2.1.1\n\n1.9.3 / 2014-12-02\n==================\n\n  * Fix error when `req.sessionID` contains a non-string value\n\n1.9.2 / 2014-11-22\n==================\n\n  * deps: crc@3.2.1\n    - Minor fixes\n\n1.9.1 / 2014-10-22\n==================\n\n  * Remove unnecessary empty write call\n    - Fixes Node.js 0.11.14 behavior change\n    - Helps work-around Node.js 0.10.1 zlib bug\n\n1.9.0 / 2014-09-16\n==================\n\n  * deps: debug@~2.1.0\n    - Implement `DEBUG_FD` env variable support\n  * deps: depd@~1.0.0\n\n1.8.2 / 2014-09-15\n==================\n\n  * Use `crc` instead of `buffer-crc32` for speed\n  * deps: depd@0.4.5\n\n1.8.1 / 2014-09-08\n==================\n\n  * Keep `req.session.save` non-enumerable\n  * Prevent session prototype methods from being overwritten\n\n1.8.0 / 2014-09-07\n==================\n\n  * Do not resave already-saved session at end of request\n  * deps: cookie-signature@1.0.5\n  * deps: debug@~2.0.0\n\n1.7.6 / 2014-08-18\n==================\n\n  * Fix exception on `res.end(null)` calls\n\n1.7.5 / 2014-08-10\n==================\n\n  * Fix parsing original URL\n  * deps: on-headers@~1.0.0\n  * deps: parseurl@~1.3.0\n\n1.7.4 / 2014-08-05\n==================\n\n  * Fix response end delay for non-chunked responses\n\n1.7.3 / 2014-08-05\n==================\n\n  * Fix `res.end` patch to call correct upstream `res.write`\n\n1.7.2 / 2014-07-27\n==================\n\n  * deps: depd@0.4.4\n    - Work-around v8 generating empty stack traces\n\n1.7.1 / 2014-07-26\n==================\n\n  * deps: depd@0.4.3\n    - Fix exception when global `Error.stackTraceLimit` is too low\n\n1.7.0 / 2014-07-22\n==================\n\n  * Improve session-ending error handling\n    - Errors are passed to `next(err)` instead of `console.error`\n  * deps: debug@1.0.4\n  * deps: depd@0.4.2\n    - Add `TRACE_DEPRECATION` environment variable\n    - Remove non-standard grey color from color output\n    - Support `--no-deprecation` argument\n    - Support `--trace-deprecation` argument\n\n1.6.5 / 2014-07-11\n==================\n\n  * Do not require `req.originalUrl`\n  * deps: debug@1.0.3\n    - Add support for multiple wildcards in namespaces\n\n1.6.4 / 2014-07-07\n==================\n\n  * Fix blank responses for stores with synchronous operations\n\n1.6.3 / 2014-07-04\n==================\n\n  * Fix resave deprecation message\n\n1.6.2 / 2014-07-04\n==================\n\n  * Fix confusing option deprecation messages\n\n1.6.1 / 2014-06-28\n==================\n\n  * Fix saveUninitialized deprecation message\n\n1.6.0 / 2014-06-28\n==================\n\n  * Add deprecation message to undefined `resave` option\n  * Add deprecation message to undefined `saveUninitialized` option\n  * Fix `res.end` patch to return correct value\n  * Fix `res.end` patch to handle multiple `res.end` calls\n  * Reject cookies with missing signatures\n\n1.5.2 / 2014-06-26\n==================\n\n  * deps: cookie-signature@1.0.4\n    - fix for timing attacks\n\n1.5.1 / 2014-06-21\n==================\n\n  * Move hard-to-track-down `req.secret` deprecation message\n\n1.5.0 / 2014-06-19\n==================\n\n  * Debug name is now \"express-session\"\n  * Deprecate integration with `cookie-parser` middleware\n  * Deprecate looking for secret in `req.secret`\n  * Directly read cookies; `cookie-parser` no longer required\n  * Directly set cookies; `res.cookie` no longer required\n  * Generate session IDs with `uid-safe`, faster and even less collisions\n\n1.4.0 / 2014-06-17\n==================\n\n  * Add `genid` option to generate custom session IDs\n  * Add `saveUninitialized` option to control saving uninitialized sessions\n  * Add `unset` option to control unsetting `req.session`\n  * Generate session IDs with `rand-token` by default; reduce collisions\n  * deps: buffer-crc32@0.2.3\n\n1.3.1 / 2014-06-14\n==================\n\n  * Add description in package for npmjs.org listing\n\n1.3.0 / 2014-06-14\n==================\n\n  * Integrate with express \"trust proxy\" by default\n  * deps: debug@1.0.2\n\n1.2.1 / 2014-05-27\n==================\n\n  * Fix `resave` such that `resave: true` works\n\n1.2.0 / 2014-05-19\n==================\n\n  * Add `resave` option to control saving unmodified sessions\n\n1.1.0 / 2014-05-12\n==================\n\n  * Add `name` option; replacement for `key` option\n  * Use `setImmediate` in MemoryStore for node.js >= 0.10\n\n1.0.4 / 2014-04-27\n==================\n\n  * deps: debug@0.8.1\n\n1.0.3 / 2014-04-19\n==================\n\n  *  Use `res.cookie()` instead of `res.setHeader()`\n  * deps: cookie@0.1.2\n\n1.0.2 / 2014-02-23\n==================\n\n  * Add missing dependency to `package.json`\n\n1.0.1 / 2014-02-15\n==================\n\n  * Add missing dependencies to `package.json`\n\n1.0.0 / 2014-02-15\n==================\n\n  * Genesis from `connect`\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.1767578125,
          "content": "(The MIT License)\n\nCopyright (c) 2010 Sencha Inc.\nCopyright (c) 2011 TJ Holowaychuk <tj@vision-media.ca>\nCopyright (c) 2014-2015 Douglas Christopher Wilson <doug@somethingdoug.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 44.4326171875,
          "content": "# express-session\n\n[![NPM Version][npm-version-image]][npm-url]\n[![NPM Downloads][npm-downloads-image]][node-url]\n[![Build Status][ci-image]][ci-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n\n## Installation\n\nThis is a [Node.js](https://nodejs.org/en/) module available through the\n[npm registry](https://www.npmjs.com/). Installation is done using the\n[`npm install` command](https://docs.npmjs.com/getting-started/installing-npm-packages-locally):\n\n```sh\n$ npm install express-session\n```\n\n## API\n\n```js\nvar session = require('express-session')\n```\n\n### session(options)\n\nCreate a session middleware with the given `options`.\n\n**Note** Session data is _not_ saved in the cookie itself, just the session ID.\nSession data is stored server-side.\n\n**Note** Since version 1.5.0, the [`cookie-parser` middleware](https://www.npmjs.com/package/cookie-parser)\nno longer needs to be used for this module to work. This module now directly reads\nand writes cookies on `req`/`res`. Using `cookie-parser` may result in issues\nif the `secret` is not the same between this module and `cookie-parser`.\n\n**Warning** The default server-side session storage, `MemoryStore`, is _purposely_\nnot designed for a production environment. It will leak memory under most\nconditions, does not scale past a single process, and is meant for debugging and\ndeveloping.\n\nFor a list of stores, see [compatible session stores](#compatible-session-stores).\n\n#### Options\n\n`express-session` accepts these properties in the options object.\n\n##### cookie\n\nSettings object for the session ID cookie. The default value is\n`{ path: '/', httpOnly: true, secure: false, maxAge: null }`.\n\nThe following are options that can be set in this object.\n\n##### cookie.domain\n\nSpecifies the value for the `Domain` `Set-Cookie` attribute. By default, no domain\nis set, and most clients will consider the cookie to apply to only the current\ndomain.\n\n##### cookie.expires\n\nSpecifies the `Date` object to be the value for the `Expires` `Set-Cookie` attribute.\nBy default, no expiration is set, and most clients will consider this a\n\"non-persistent cookie\" and will delete it on a condition like exiting a web browser\napplication.\n\n**Note** If both `expires` and `maxAge` are set in the options, then the last one\ndefined in the object is what is used.\n\n**Note** The `expires` option should not be set directly; instead only use the `maxAge`\noption.\n\n##### cookie.httpOnly\n\nSpecifies the `boolean` value for the `HttpOnly` `Set-Cookie` attribute. When truthy,\nthe `HttpOnly` attribute is set, otherwise it is not. By default, the `HttpOnly`\nattribute is set.\n\n**Note** be careful when setting this to `true`, as compliant clients will not allow\nclient-side JavaScript to see the cookie in `document.cookie`.\n\n##### cookie.maxAge\n\nSpecifies the `number` (in milliseconds) to use when calculating the `Expires`\n`Set-Cookie` attribute. This is done by taking the current server time and adding\n`maxAge` milliseconds to the value to calculate an `Expires` datetime. By default,\nno maximum age is set.\n\n**Note** If both `expires` and `maxAge` are set in the options, then the last one\ndefined in the object is what is used.\n\n##### cookie.partitioned\n\nSpecifies the `boolean` value for the [`Partitioned` `Set-Cookie`](rfc-cutler-httpbis-partitioned-cookies)\nattribute. When truthy, the `Partitioned` attribute is set, otherwise it is not.\nBy default, the `Partitioned` attribute is not set.\n\n**Note** This is an attribute that has not yet been fully standardized, and may\nchange in the future. This also means many clients may ignore this attribute until\nthey understand it.\n\nMore information about can be found in [the proposal](https://github.com/privacycg/CHIPS).\n\n##### cookie.path\n\nSpecifies the value for the `Path` `Set-Cookie`. By default, this is set to `'/'`, which\nis the root path of the domain.\n\n##### cookie.priority\n\nSpecifies the `string` to be the value for the [`Priority` `Set-Cookie` attribute][rfc-west-cookie-priority-00-4.1].\n\n  - `'low'` will set the `Priority` attribute to `Low`.\n  - `'medium'` will set the `Priority` attribute to `Medium`, the default priority when not set.\n  - `'high'` will set the `Priority` attribute to `High`.\n\nMore information about the different priority levels can be found in\n[the specification][rfc-west-cookie-priority-00-4.1].\n\n**Note** This is an attribute that has not yet been fully standardized, and may change in the future.\nThis also means many clients may ignore this attribute until they understand it.\n\n##### cookie.sameSite\n\nSpecifies the `boolean` or `string` to be the value for the `SameSite` `Set-Cookie` attribute.\nBy default, this is `false`.\n\n  - `true` will set the `SameSite` attribute to `Strict` for strict same site enforcement.\n  - `false` will not set the `SameSite` attribute.\n  - `'lax'` will set the `SameSite` attribute to `Lax` for lax same site enforcement.\n  - `'none'` will set the `SameSite` attribute to `None` for an explicit cross-site cookie.\n  - `'strict'` will set the `SameSite` attribute to `Strict` for strict same site enforcement.\n\nMore information about the different enforcement levels can be found in\n[the specification][rfc-6265bis-03-4.1.2.7].\n\n**Note** This is an attribute that has not yet been fully standardized, and may change in\nthe future. This also means many clients may ignore this attribute until they understand it.\n\n**Note** There is a [draft spec](https://tools.ietf.org/html/draft-west-cookie-incrementalism-01)\nthat requires that the `Secure` attribute be set to `true` when the `SameSite` attribute has been\nset to `'none'`. Some web browsers or other clients may be adopting this specification.\n\n##### cookie.secure\n\nSpecifies the `boolean` value for the `Secure` `Set-Cookie` attribute. When truthy,\nthe `Secure` attribute is set, otherwise it is not. By default, the `Secure`\nattribute is not set.\n\n**Note** be careful when setting this to `true`, as compliant clients will not send\nthe cookie back to the server in the future if the browser does not have an HTTPS\nconnection.\n\nPlease note that `secure: true` is a **recommended** option. However, it requires\nan https-enabled website, i.e., HTTPS is necessary for secure cookies. If `secure`\nis set, and you access your site over HTTP, the cookie will not be set. If you\nhave your node.js behind a proxy and are using `secure: true`, you need to set\n\"trust proxy\" in express:\n\n```js\nvar app = express()\napp.set('trust proxy', 1) // trust first proxy\napp.use(session({\n  secret: 'keyboard cat',\n  resave: false,\n  saveUninitialized: true,\n  cookie: { secure: true }\n}))\n```\n\nFor using secure cookies in production, but allowing for testing in development,\nthe following is an example of enabling this setup based on `NODE_ENV` in express:\n\n```js\nvar app = express()\nvar sess = {\n  secret: 'keyboard cat',\n  cookie: {}\n}\n\nif (app.get('env') === 'production') {\n  app.set('trust proxy', 1) // trust first proxy\n  sess.cookie.secure = true // serve secure cookies\n}\n\napp.use(session(sess))\n```\n\nThe `cookie.secure` option can also be set to the special value `'auto'` to have\nthis setting automatically match the determined security of the connection. Be\ncareful when using this setting if the site is available both as HTTP and HTTPS,\nas once the cookie is set on HTTPS, it will no longer be visible over HTTP. This\nis useful when the Express `\"trust proxy\"` setting is properly setup to simplify\ndevelopment vs production configuration.\n\n##### genid\n\nFunction to call to generate a new session ID. Provide a function that returns\na string that will be used as a session ID. The function is given `req` as the\nfirst argument if you want to use some value attached to `req` when generating\nthe ID.\n\nThe default value is a function which uses the `uid-safe` library to generate IDs.\n\n**NOTE** be careful to generate unique IDs so your sessions do not conflict.\n\n```js\napp.use(session({\n  genid: function(req) {\n    return genuuid() // use UUIDs for session IDs\n  },\n  secret: 'keyboard cat'\n}))\n```\n\n##### name\n\nThe name of the session ID cookie to set in the response (and read from in the\nrequest).\n\nThe default value is `'connect.sid'`.\n\n**Note** if you have multiple apps running on the same hostname (this is just\nthe name, i.e. `localhost` or `127.0.0.1`; different schemes and ports do not\nname a different hostname), then you need to separate the session cookies from\neach other. The simplest method is to simply set different `name`s per app.\n\n##### proxy\n\nTrust the reverse proxy when setting secure cookies (via the \"X-Forwarded-Proto\"\nheader).\n\nThe default value is `undefined`.\n\n  - `true` The \"X-Forwarded-Proto\" header will be used.\n  - `false` All headers are ignored and the connection is considered secure only\n    if there is a direct TLS/SSL connection.\n  - `undefined` Uses the \"trust proxy\" setting from express\n\n##### resave\n\nForces the session to be saved back to the session store, even if the session\nwas never modified during the request. Depending on your store this may be\nnecessary, but it can also create race conditions where a client makes two\nparallel requests to your server and changes made to the session in one\nrequest may get overwritten when the other request ends, even if it made no\nchanges (this behavior also depends on what store you're using).\n\nThe default value is `true`, but using the default has been deprecated,\nas the default will change in the future. Please research into this setting\nand choose what is appropriate to your use-case. Typically, you'll want\n`false`.\n\nHow do I know if this is necessary for my store? The best way to know is to\ncheck with your store if it implements the `touch` method. If it does, then\nyou can safely set `resave: false`. If it does not implement the `touch`\nmethod and your store sets an expiration date on stored sessions, then you\nlikely need `resave: true`.\n\n##### rolling\n\nForce the session identifier cookie to be set on every response. The expiration\nis reset to the original [`maxAge`](#cookiemaxage), resetting the expiration\ncountdown.\n\nThe default value is `false`.\n\nWith this enabled, the session identifier cookie will expire in\n[`maxAge`](#cookiemaxage) since the last response was sent instead of in\n[`maxAge`](#cookiemaxage) since the session was last modified by the server.\n\nThis is typically used in conjuction with short, non-session-length\n[`maxAge`](#cookiemaxage) values to provide a quick timeout of the session data\nwith reduced potential of it occurring during on going server interactions.\n\n**Note** When this option is set to `true` but the `saveUninitialized` option is\nset to `false`, the cookie will not be set on a response with an uninitialized\nsession. This option only modifies the behavior when an existing session was\nloaded for the request.\n\n##### saveUninitialized\n\nForces a session that is \"uninitialized\" to be saved to the store. A session is\nuninitialized when it is new but not modified. Choosing `false` is useful for\nimplementing login sessions, reducing server storage usage, or complying with\nlaws that require permission before setting a cookie. Choosing `false` will also\nhelp with race conditions where a client makes multiple parallel requests\nwithout a session.\n\nThe default value is `true`, but using the default has been deprecated, as the\ndefault will change in the future. Please research into this setting and\nchoose what is appropriate to your use-case.\n\n**Note** if you are using Session in conjunction with PassportJS, Passport\nwill add an empty Passport object to the session for use after a user is\nauthenticated, which will be treated as a modification to the session, causing\nit to be saved. *This has been fixed in PassportJS 0.3.0*\n\n##### secret\n\n**Required option**\n\nThis is the secret used to sign the session ID cookie. The secret can be any type\nof value that is supported by Node.js `crypto.createHmac` (like a string or a\n`Buffer`). This can be either a single secret, or an array of multiple secrets. If\nan array of secrets is provided, only the first element will be used to sign the\nsession ID cookie, while all the elements will be considered when verifying the\nsignature in requests. The secret itself should be not easily parsed by a human and\nwould best be a random set of characters. A best practice may include:\n\n  - The use of environment variables to store the secret, ensuring the secret itself\n    does not exist in your repository.\n  - Periodic updates of the secret, while ensuring the previous secret is in the\n    array.\n\nUsing a secret that cannot be guessed will reduce the ability to hijack a session to\nonly guessing the session ID (as determined by the `genid` option).\n\nChanging the secret value will invalidate all existing sessions. In order to rotate\nthe secret without invalidating sessions, provide an array of secrets, with the new\nsecret as first element of the array, and including previous secrets as the later\nelements.\n\n**Note** HMAC-256 is used to sign the session ID. For this reason, the secret should\ncontain at least 32 bytes of entropy.\n\n##### store\n\nThe session store instance, defaults to a new `MemoryStore` instance.\n\n##### unset\n\nControl the result of unsetting `req.session` (through `delete`, setting to `null`,\netc.).\n\nThe default value is `'keep'`.\n\n  - `'destroy'` The session will be destroyed (deleted) when the response ends.\n  - `'keep'` The session in the store will be kept, but modifications made during\n    the request are ignored and not saved.\n\n### req.session\n\nTo store or access session data, simply use the request property `req.session`,\nwhich is (generally) serialized as JSON by the store, so nested objects\nare typically fine. For example below is a user-specific view counter:\n\n```js\n// Use the session middleware\napp.use(session({ secret: 'keyboard cat', cookie: { maxAge: 60000 }}))\n\n// Access the session as req.session\napp.get('/', function(req, res, next) {\n  if (req.session.views) {\n    req.session.views++\n    res.setHeader('Content-Type', 'text/html')\n    res.write('<p>views: ' + req.session.views + '</p>')\n    res.write('<p>expires in: ' + (req.session.cookie.maxAge / 1000) + 's</p>')\n    res.end()\n  } else {\n    req.session.views = 1\n    res.end('welcome to the session demo. refresh!')\n  }\n})\n```\n\n#### Session.regenerate(callback)\n\nTo regenerate the session simply invoke the method. Once complete,\na new SID and `Session` instance will be initialized at `req.session`\nand the `callback` will be invoked.\n\n```js\nreq.session.regenerate(function(err) {\n  // will have a new session here\n})\n```\n\n#### Session.destroy(callback)\n\nDestroys the session and will unset the `req.session` property.\nOnce complete, the `callback` will be invoked.\n\n```js\nreq.session.destroy(function(err) {\n  // cannot access session here\n})\n```\n\n#### Session.reload(callback)\n\nReloads the session data from the store and re-populates the\n`req.session` object. Once complete, the `callback` will be invoked.\n\n```js\nreq.session.reload(function(err) {\n  // session updated\n})\n```\n\n#### Session.save(callback)\n\nSave the session back to the store, replacing the contents on the store with the\ncontents in memory (though a store may do something else--consult the store's\ndocumentation for exact behavior).\n\nThis method is automatically called at the end of the HTTP response if the\nsession data has been altered (though this behavior can be altered with various\noptions in the middleware constructor). Because of this, typically this method\ndoes not need to be called.\n\nThere are some cases where it is useful to call this method, for example,\nredirects, long-lived requests or in WebSockets.\n\n```js\nreq.session.save(function(err) {\n  // session saved\n})\n```\n\n#### Session.touch()\n\nUpdates the `.maxAge` property. Typically this is\nnot necessary to call, as the session middleware does this for you.\n\n### req.session.id\n\nEach session has a unique ID associated with it. This property is an\nalias of [`req.sessionID`](#reqsessionid-1) and cannot be modified.\nIt has been added to make the session ID accessible from the `session`\nobject.\n\n### req.session.cookie\n\nEach session has a unique cookie object accompany it. This allows\nyou to alter the session cookie per visitor. For example we can\nset `req.session.cookie.expires` to `false` to enable the cookie\nto remain for only the duration of the user-agent.\n\n#### Cookie.maxAge\n\nAlternatively `req.session.cookie.maxAge` will return the time\nremaining in milliseconds, which we may also re-assign a new value\nto adjust the `.expires` property appropriately. The following\nare essentially equivalent\n\n```js\nvar hour = 3600000\nreq.session.cookie.expires = new Date(Date.now() + hour)\nreq.session.cookie.maxAge = hour\n```\n\nFor example when `maxAge` is set to `60000` (one minute), and 30 seconds\nhas elapsed it will return `30000` until the current request has completed,\nat which time `req.session.touch()` is called to reset\n`req.session.cookie.maxAge` to its original value.\n\n```js\nreq.session.cookie.maxAge // => 30000\n```\n\n#### Cookie.originalMaxAge\n\nThe `req.session.cookie.originalMaxAge` property returns the original\n`maxAge` (time-to-live), in milliseconds, of the session cookie.\n\n### req.sessionID\n\nTo get the ID of the loaded session, access the request property\n`req.sessionID`. This is simply a read-only value set when a session\nis loaded/created.\n\n## Session Store Implementation\n\nEvery session store _must_ be an `EventEmitter` and implement specific\nmethods. The following methods are the list of **required**, **recommended**,\nand **optional**.\n\n  * Required methods are ones that this module will always call on the store.\n  * Recommended methods are ones that this module will call on the store if\n    available.\n  * Optional methods are ones this module does not call at all, but helps\n    present uniform stores to users.\n\nFor an example implementation view the [connect-redis](http://github.com/visionmedia/connect-redis) repo.\n\n### store.all(callback)\n\n**Optional**\n\nThis optional method is used to get all sessions in the store as an array. The\n`callback` should be called as `callback(error, sessions)`.\n\n### store.destroy(sid, callback)\n\n**Required**\n\nThis required method is used to destroy/delete a session from the store given\na session ID (`sid`). The `callback` should be called as `callback(error)` once\nthe session is destroyed.\n\n### store.clear(callback)\n\n**Optional**\n\nThis optional method is used to delete all sessions from the store. The\n`callback` should be called as `callback(error)` once the store is cleared.\n\n### store.length(callback)\n\n**Optional**\n\nThis optional method is used to get the count of all sessions in the store.\nThe `callback` should be called as `callback(error, len)`.\n\n### store.get(sid, callback)\n\n**Required**\n\nThis required method is used to get a session from the store given a session\nID (`sid`). The `callback` should be called as `callback(error, session)`.\n\nThe `session` argument should be a session if found, otherwise `null` or\n`undefined` if the session was not found (and there was no error). A special\ncase is made when `error.code === 'ENOENT'` to act like `callback(null, null)`.\n\n### store.set(sid, session, callback)\n\n**Required**\n\nThis required method is used to upsert a session into the store given a\nsession ID (`sid`) and session (`session`) object. The callback should be\ncalled as `callback(error)` once the session has been set in the store.\n\n### store.touch(sid, session, callback)\n\n**Recommended**\n\nThis recommended method is used to \"touch\" a given session given a\nsession ID (`sid`) and session (`session`) object. The `callback` should be\ncalled as `callback(error)` once the session has been touched.\n\nThis is primarily used when the store will automatically delete idle sessions\nand this method is used to signal to the store the given session is active,\npotentially resetting the idle timer.\n\n## Compatible Session Stores\n\nThe following modules implement a session store that is compatible with this\nmodule. Please make a PR to add additional modules :)\n\n[![★][aerospike-session-store-image] aerospike-session-store][aerospike-session-store-url] A session store using [Aerospike](http://www.aerospike.com/).\n\n[aerospike-session-store-url]: https://www.npmjs.com/package/aerospike-session-store\n[aerospike-session-store-image]: https://badgen.net/github/stars/aerospike/aerospike-session-store-expressjs?label=%E2%98%85\n\n[![★][better-sqlite3-session-store-image] better-sqlite3-session-store][better-sqlite3-session-store-url] A session store based on [better-sqlite3](https://github.com/JoshuaWise/better-sqlite3).\n\n[better-sqlite3-session-store-url]: https://www.npmjs.com/package/better-sqlite3-session-store\n[better-sqlite3-session-store-image]: https://badgen.net/github/stars/timdaub/better-sqlite3-session-store?label=%E2%98%85\n\n[![★][cassandra-store-image] cassandra-store][cassandra-store-url] An Apache Cassandra-based session store.\n\n[cassandra-store-url]: https://www.npmjs.com/package/cassandra-store\n[cassandra-store-image]: https://badgen.net/github/stars/webcc/cassandra-store?label=%E2%98%85\n\n[![★][cluster-store-image] cluster-store][cluster-store-url] A wrapper for using in-process / embedded\nstores - such as SQLite (via knex), leveldb, files, or memory - with node cluster (desirable for Raspberry Pi 2\nand other multi-core embedded devices).\n\n[cluster-store-url]: https://www.npmjs.com/package/cluster-store\n[cluster-store-image]: https://badgen.net/github/stars/coolaj86/cluster-store?label=%E2%98%85\n\n[![★][connect-arango-image] connect-arango][connect-arango-url] An ArangoDB-based session store.\n\n[connect-arango-url]: https://www.npmjs.com/package/connect-arango\n[connect-arango-image]: https://badgen.net/github/stars/AlexanderArvidsson/connect-arango?label=%E2%98%85\n\n[![★][connect-azuretables-image] connect-azuretables][connect-azuretables-url] An [Azure Table Storage](https://azure.microsoft.com/en-gb/services/storage/tables/)-based session store.\n\n[connect-azuretables-url]: https://www.npmjs.com/package/connect-azuretables\n[connect-azuretables-image]: https://badgen.net/github/stars/mike-goodwin/connect-azuretables?label=%E2%98%85\n\n[![★][connect-cloudant-store-image] connect-cloudant-store][connect-cloudant-store-url] An [IBM Cloudant](https://cloudant.com/)-based session store.\n\n[connect-cloudant-store-url]: https://www.npmjs.com/package/connect-cloudant-store\n[connect-cloudant-store-image]: https://badgen.net/github/stars/adriantanasa/connect-cloudant-store?label=%E2%98%85\n\n[![★][connect-cosmosdb-image] connect-cosmosdb][connect-cosmosdb-url] An Azure [Cosmos DB](https://azure.microsoft.com/en-us/products/cosmos-db/)-based session store.\n\n[connect-cosmosdb-url]: https://www.npmjs.com/package/connect-cosmosdb\n[connect-cosmosdb-image]: https://badgen.net/github/stars/thekillingspree/connect-cosmosdb?label=%E2%98%85\n\n[![★][connect-couchbase-image] connect-couchbase][connect-couchbase-url] A [couchbase](http://www.couchbase.com/)-based session store.\n\n[connect-couchbase-url]: https://www.npmjs.com/package/connect-couchbase\n[connect-couchbase-image]: https://badgen.net/github/stars/christophermina/connect-couchbase?label=%E2%98%85\n\n[![★][connect-datacache-image] connect-datacache][connect-datacache-url] An [IBM Bluemix Data Cache](http://www.ibm.com/cloud-computing/bluemix/)-based session store.\n\n[connect-datacache-url]: https://www.npmjs.com/package/connect-datacache\n[connect-datacache-image]: https://badgen.net/github/stars/adriantanasa/connect-datacache?label=%E2%98%85\n\n[![★][@google-cloud/connect-datastore-image] @google-cloud/connect-datastore][@google-cloud/connect-datastore-url] A [Google Cloud Datastore](https://cloud.google.com/datastore/docs/concepts/overview)-based session store.\n\n[@google-cloud/connect-datastore-url]: https://www.npmjs.com/package/@google-cloud/connect-datastore\n[@google-cloud/connect-datastore-image]: https://badgen.net/github/stars/GoogleCloudPlatform/cloud-datastore-session-node?label=%E2%98%85\n\n[![★][connect-db2-image] connect-db2][connect-db2-url] An IBM DB2-based session store built using [ibm_db](https://www.npmjs.com/package/ibm_db) module.\n\n[connect-db2-url]: https://www.npmjs.com/package/connect-db2\n[connect-db2-image]: https://badgen.net/github/stars/wallali/connect-db2?label=%E2%98%85\n\n[![★][connect-dynamodb-image] connect-dynamodb][connect-dynamodb-url] A DynamoDB-based session store.\n\n[connect-dynamodb-url]: https://www.npmjs.com/package/connect-dynamodb\n[connect-dynamodb-image]: https://badgen.net/github/stars/ca98am79/connect-dynamodb?label=%E2%98%85\n\n[![★][@google-cloud/connect-firestore-image] @google-cloud/connect-firestore][@google-cloud/connect-firestore-url] A [Google Cloud Firestore](https://cloud.google.com/firestore/docs/overview)-based session store.\n\n[@google-cloud/connect-firestore-url]: https://www.npmjs.com/package/@google-cloud/connect-firestore\n[@google-cloud/connect-firestore-image]: https://badgen.net/github/stars/googleapis/nodejs-firestore-session?label=%E2%98%85\n\n[![★][connect-hazelcast-image] connect-hazelcast][connect-hazelcast-url] Hazelcast session store for Connect and Express.\n\n[connect-hazelcast-url]: https://www.npmjs.com/package/connect-hazelcast\n[connect-hazelcast-image]: https://badgen.net/github/stars/huseyinbabal/connect-hazelcast?label=%E2%98%85\n\n[![★][connect-loki-image] connect-loki][connect-loki-url] A Loki.js-based session store.\n\n[connect-loki-url]: https://www.npmjs.com/package/connect-loki\n[connect-loki-image]: https://badgen.net/github/stars/Requarks/connect-loki?label=%E2%98%85\n\n[![★][connect-lowdb-image] connect-lowdb][connect-lowdb-url] A lowdb-based session store.\n\n[connect-lowdb-url]: https://www.npmjs.com/package/connect-lowdb\n[connect-lowdb-image]: https://badgen.net/github/stars/travishorn/connect-lowdb?label=%E2%98%85\n\n[![★][connect-memcached-image] connect-memcached][connect-memcached-url] A memcached-based session store.\n\n[connect-memcached-url]: https://www.npmjs.com/package/connect-memcached\n[connect-memcached-image]: https://badgen.net/github/stars/balor/connect-memcached?label=%E2%98%85\n\n[![★][connect-memjs-image] connect-memjs][connect-memjs-url] A memcached-based session store using\n[memjs](https://www.npmjs.com/package/memjs) as the memcached client.\n\n[connect-memjs-url]: https://www.npmjs.com/package/connect-memjs\n[connect-memjs-image]: https://badgen.net/github/stars/liamdon/connect-memjs?label=%E2%98%85\n\n[![★][connect-ml-image] connect-ml][connect-ml-url] A MarkLogic Server-based session store.\n\n[connect-ml-url]: https://www.npmjs.com/package/connect-ml\n[connect-ml-image]: https://badgen.net/github/stars/bluetorch/connect-ml?label=%E2%98%85\n\n[![★][connect-monetdb-image] connect-monetdb][connect-monetdb-url] A MonetDB-based session store.\n\n[connect-monetdb-url]: https://www.npmjs.com/package/connect-monetdb\n[connect-monetdb-image]: https://badgen.net/github/stars/MonetDB/npm-connect-monetdb?label=%E2%98%85\n\n[![★][connect-mongo-image] connect-mongo][connect-mongo-url] A MongoDB-based session store.\n\n[connect-mongo-url]: https://www.npmjs.com/package/connect-mongo\n[connect-mongo-image]: https://badgen.net/github/stars/kcbanner/connect-mongo?label=%E2%98%85\n\n[![★][connect-mongodb-session-image] connect-mongodb-session][connect-mongodb-session-url] Lightweight MongoDB-based session store built and maintained by MongoDB.\n\n[connect-mongodb-session-url]: https://www.npmjs.com/package/connect-mongodb-session\n[connect-mongodb-session-image]: https://badgen.net/github/stars/mongodb-js/connect-mongodb-session?label=%E2%98%85\n\n[![★][connect-mssql-v2-image] connect-mssql-v2][connect-mssql-v2-url] A Microsoft SQL Server-based session store based on [connect-mssql](https://www.npmjs.com/package/connect-mssql).\n\n[connect-mssql-v2-url]: https://www.npmjs.com/package/connect-mssql-v2\n[connect-mssql-v2-image]: https://badgen.net/github/stars/jluboff/connect-mssql-v2?label=%E2%98%85\n\n[![★][connect-neo4j-image] connect-neo4j][connect-neo4j-url] A [Neo4j](https://neo4j.com)-based session store.\n\n[connect-neo4j-url]: https://www.npmjs.com/package/connect-neo4j\n[connect-neo4j-image]: https://badgen.net/github/stars/MaxAndersson/connect-neo4j?label=%E2%98%85\n\n[![★][connect-ottoman-image] connect-ottoman][connect-ottoman-url] A [couchbase ottoman](http://www.couchbase.com/)-based session store.\n\n[connect-ottoman-url]: https://www.npmjs.com/package/connect-ottoman\n[connect-ottoman-image]: https://badgen.net/github/stars/noiissyboy/connect-ottoman?label=%E2%98%85\n\n[![★][connect-pg-simple-image] connect-pg-simple][connect-pg-simple-url] A PostgreSQL-based session store.\n\n[connect-pg-simple-url]: https://www.npmjs.com/package/connect-pg-simple\n[connect-pg-simple-image]: https://badgen.net/github/stars/voxpelli/node-connect-pg-simple?label=%E2%98%85\n\n[![★][connect-redis-image] connect-redis][connect-redis-url] A Redis-based session store.\n\n[connect-redis-url]: https://www.npmjs.com/package/connect-redis\n[connect-redis-image]: https://badgen.net/github/stars/tj/connect-redis?label=%E2%98%85\n\n[![★][connect-session-firebase-image] connect-session-firebase][connect-session-firebase-url] A session store based on the [Firebase Realtime Database](https://firebase.google.com/docs/database/)\n\n[connect-session-firebase-url]: https://www.npmjs.com/package/connect-session-firebase\n[connect-session-firebase-image]: https://badgen.net/github/stars/benweier/connect-session-firebase?label=%E2%98%85\n\n[![★][connect-session-knex-image] connect-session-knex][connect-session-knex-url] A session store using\n[Knex.js](http://knexjs.org/), which is a SQL query builder for PostgreSQL, MySQL, MariaDB, SQLite3, and Oracle.\n\n[connect-session-knex-url]: https://www.npmjs.com/package/connect-session-knex\n[connect-session-knex-image]: https://badgen.net/github/stars/llambda/connect-session-knex?label=%E2%98%85\n\n[![★][connect-session-sequelize-image] connect-session-sequelize][connect-session-sequelize-url] A session store using\n[Sequelize.js](http://sequelizejs.com/), which is a Node.js / io.js ORM for PostgreSQL, MySQL, SQLite and MSSQL.\n\n[connect-session-sequelize-url]: https://www.npmjs.com/package/connect-session-sequelize\n[connect-session-sequelize-image]: https://badgen.net/github/stars/mweibel/connect-session-sequelize?label=%E2%98%85\n\n[![★][connect-sqlite3-image] connect-sqlite3][connect-sqlite3-url] A [SQLite3](https://github.com/mapbox/node-sqlite3) session store modeled after the TJ's `connect-redis` store.\n\n[connect-sqlite3-url]: https://www.npmjs.com/package/connect-sqlite3\n[connect-sqlite3-image]: https://badgen.net/github/stars/rawberg/connect-sqlite3?label=%E2%98%85\n\n[![★][connect-typeorm-image] connect-typeorm][connect-typeorm-url] A [TypeORM](https://github.com/typeorm/typeorm)-based session store.\n\n[connect-typeorm-url]: https://www.npmjs.com/package/connect-typeorm\n[connect-typeorm-image]: https://badgen.net/github/stars/makepost/connect-typeorm?label=%E2%98%85\n\n[![★][couchdb-expression-image] couchdb-expression][couchdb-expression-url] A [CouchDB](https://couchdb.apache.org/)-based session store.\n\n[couchdb-expression-url]: https://www.npmjs.com/package/couchdb-expression\n[couchdb-expression-image]: https://badgen.net/github/stars/tkshnwesper/couchdb-expression?label=%E2%98%85\n\n[![★][dynamodb-store-image] dynamodb-store][dynamodb-store-url] A DynamoDB-based session store.\n\n[dynamodb-store-url]: https://www.npmjs.com/package/dynamodb-store\n[dynamodb-store-image]: https://badgen.net/github/stars/rafaelrpinto/dynamodb-store?label=%E2%98%85\n\n[![★][dynamodb-store-v3-image] dynamodb-store-v3][dynamodb-store-v3-url] Implementation of a session store using DynamoDB backed by the [AWS SDK for JavaScript v3](https://github.com/aws/aws-sdk-js-v3).\n\n[dynamodb-store-v3-url]: https://www.npmjs.com/package/dynamodb-store-v3\n[dynamodb-store-v3-image]: https://badgen.net/github/stars/FryDay/dynamodb-store-v3?label=%E2%98%85\n\n[![★][express-etcd-image] express-etcd][express-etcd-url] An [etcd](https://github.com/stianeikeland/node-etcd) based session store.\n\n[express-etcd-url]: https://www.npmjs.com/package/express-etcd\n[express-etcd-image]: https://badgen.net/github/stars/gildean/express-etcd?label=%E2%98%85\n\n[![★][express-mysql-session-image] express-mysql-session][express-mysql-session-url] A session store using native\n[MySQL](https://www.mysql.com/) via the [node-mysql](https://github.com/felixge/node-mysql) module.\n\n[express-mysql-session-url]: https://www.npmjs.com/package/express-mysql-session\n[express-mysql-session-image]: https://badgen.net/github/stars/chill117/express-mysql-session?label=%E2%98%85\n\n[![★][express-nedb-session-image] express-nedb-session][express-nedb-session-url] A NeDB-based session store.\n\n[express-nedb-session-url]: https://www.npmjs.com/package/express-nedb-session\n[express-nedb-session-image]: https://badgen.net/github/stars/louischatriot/express-nedb-session?label=%E2%98%85\n\n[![★][express-oracle-session-image] express-oracle-session][express-oracle-session-url] A session store using native\n[oracle](https://www.oracle.com/) via the [node-oracledb](https://www.npmjs.com/package/oracledb) module.\n\n[express-oracle-session-url]: https://www.npmjs.com/package/express-oracle-session\n[express-oracle-session-image]: https://badgen.net/github/stars/slumber86/express-oracle-session?label=%E2%98%85\n\n[![★][express-session-cache-manager-image] express-session-cache-manager][express-session-cache-manager-url]\nA store that implements [cache-manager](https://www.npmjs.com/package/cache-manager), which supports\na [variety of storage types](https://www.npmjs.com/package/cache-manager#store-engines).\n\n[express-session-cache-manager-url]: https://www.npmjs.com/package/express-session-cache-manager\n[express-session-cache-manager-image]: https://badgen.net/github/stars/theogravity/express-session-cache-manager?label=%E2%98%85\n\n[![★][express-session-etcd3-image] express-session-etcd3][express-session-etcd3-url] An [etcd3](https://github.com/mixer/etcd3) based session store.\n\n[express-session-etcd3-url]: https://www.npmjs.com/package/express-session-etcd3\n[express-session-etcd3-image]: https://badgen.net/github/stars/willgm/express-session-etcd3?label=%E2%98%85\n\n[![★][express-session-level-image] express-session-level][express-session-level-url] A [LevelDB](https://github.com/Level/levelup) based session store.\n\n[express-session-level-url]: https://www.npmjs.com/package/express-session-level\n[express-session-level-image]: https://badgen.net/github/stars/tgohn/express-session-level?label=%E2%98%85\n\n[![★][express-session-rsdb-image] express-session-rsdb][express-session-rsdb-url] Session store based on Rocket-Store: A very simple, super fast and yet powerfull, flat file database.\n\n[express-session-rsdb-url]: https://www.npmjs.com/package/express-session-rsdb\n[express-session-rsdb-image]: https://badgen.net/github/stars/paragi/express-session-rsdb?label=%E2%98%85\n\n[![★][express-sessions-image] express-sessions][express-sessions-url] A session store supporting both MongoDB and Redis.\n\n[express-sessions-url]: https://www.npmjs.com/package/express-sessions\n[express-sessions-image]: https://badgen.net/github/stars/konteck/express-sessions?label=%E2%98%85\n\n[![★][firestore-store-image] firestore-store][firestore-store-url] A [Firestore](https://github.com/hendrysadrak/firestore-store)-based session store.\n\n[firestore-store-url]: https://www.npmjs.com/package/firestore-store\n[firestore-store-image]: https://badgen.net/github/stars/hendrysadrak/firestore-store?label=%E2%98%85\n\n[![★][fortune-session-image] fortune-session][fortune-session-url] A [Fortune.js](https://github.com/fortunejs/fortune)\nbased session store. Supports all backends supported by Fortune (MongoDB, Redis, Postgres, NeDB).\n\n[fortune-session-url]: https://www.npmjs.com/package/fortune-session\n[fortune-session-image]: https://badgen.net/github/stars/aliceklipper/fortune-session?label=%E2%98%85\n\n[![★][hazelcast-store-image] hazelcast-store][hazelcast-store-url] A Hazelcast-based session store built on the [Hazelcast Node Client](https://www.npmjs.com/package/hazelcast-client).\n\n[hazelcast-store-url]: https://www.npmjs.com/package/hazelcast-store\n[hazelcast-store-image]: https://badgen.net/github/stars/jackspaniel/hazelcast-store?label=%E2%98%85\n\n[![★][level-session-store-image] level-session-store][level-session-store-url] A LevelDB-based session store.\n\n[level-session-store-url]: https://www.npmjs.com/package/level-session-store\n[level-session-store-image]: https://badgen.net/github/stars/toddself/level-session-store?label=%E2%98%85\n\n[![★][lowdb-session-store-image] lowdb-session-store][lowdb-session-store-url] A [lowdb](https://www.npmjs.com/package/lowdb)-based session store.\n\n[lowdb-session-store-url]: https://www.npmjs.com/package/lowdb-session-store\n[lowdb-session-store-image]: https://badgen.net/github/stars/fhellwig/lowdb-session-store?label=%E2%98%85\n\n[![★][medea-session-store-image] medea-session-store][medea-session-store-url] A Medea-based session store.\n\n[medea-session-store-url]: https://www.npmjs.com/package/medea-session-store\n[medea-session-store-image]: https://badgen.net/github/stars/BenjaminVadant/medea-session-store?label=%E2%98%85\n\n[![★][memorystore-image] memorystore][memorystore-url] A memory session store made for production.\n\n[memorystore-url]: https://www.npmjs.com/package/memorystore\n[memorystore-image]: https://badgen.net/github/stars/roccomuso/memorystore?label=%E2%98%85\n\n[![★][mssql-session-store-image] mssql-session-store][mssql-session-store-url] A SQL Server-based session store.\n\n[mssql-session-store-url]: https://www.npmjs.com/package/mssql-session-store\n[mssql-session-store-image]: https://badgen.net/github/stars/jwathen/mssql-session-store?label=%E2%98%85\n\n[![★][nedb-session-store-image] nedb-session-store][nedb-session-store-url] An alternate NeDB-based (either in-memory or file-persisted) session store.\n\n[nedb-session-store-url]: https://www.npmjs.com/package/nedb-session-store\n[nedb-session-store-image]: https://badgen.net/github/stars/JamesMGreene/nedb-session-store?label=%E2%98%85\n\n[![★][@quixo3/prisma-session-store-image] @quixo3/prisma-session-store][@quixo3/prisma-session-store-url] A session store for the [Prisma Framework](https://www.prisma.io).\n\n[@quixo3/prisma-session-store-url]: https://www.npmjs.com/package/@quixo3/prisma-session-store\n[@quixo3/prisma-session-store-image]: https://badgen.net/github/stars/kleydon/prisma-session-store?label=%E2%98%85\n\n[![★][restsession-image] restsession][restsession-url] Store sessions utilizing a RESTful API\n\n[restsession-url]: https://www.npmjs.com/package/restsession\n[restsession-image]: https://badgen.net/github/stars/jankal/restsession?label=%E2%98%85\n\n[![★][sequelstore-connect-image] sequelstore-connect][sequelstore-connect-url] A session store using [Sequelize.js](http://sequelizejs.com/).\n\n[sequelstore-connect-url]: https://www.npmjs.com/package/sequelstore-connect\n[sequelstore-connect-image]: https://badgen.net/github/stars/MattMcFarland/sequelstore-connect?label=%E2%98%85\n\n[![★][session-file-store-image] session-file-store][session-file-store-url] A file system-based session store.\n\n[session-file-store-url]: https://www.npmjs.com/package/session-file-store\n[session-file-store-image]: https://badgen.net/github/stars/valery-barysok/session-file-store?label=%E2%98%85\n\n[![★][session-pouchdb-store-image] session-pouchdb-store][session-pouchdb-store-url] Session store for PouchDB / CouchDB. Accepts embedded, custom, or remote PouchDB instance and realtime synchronization.\n\n[session-pouchdb-store-url]: https://www.npmjs.com/package/session-pouchdb-store\n[session-pouchdb-store-image]: https://badgen.net/github/stars/solzimer/session-pouchdb-store?label=%E2%98%85\n\n[![★][@cyclic.sh/session-store-image] @cyclic.sh/session-store][@cyclic.sh/session-store-url] A DynamoDB-based session store for [Cyclic.sh](https://www.cyclic.sh/) apps.\n\n[@cyclic.sh/session-store-url]: https://www.npmjs.com/package/@cyclic.sh/session-store\n[@cyclic.sh/session-store-image]: https://badgen.net/github/stars/cyclic-software/session-store?label=%E2%98%85\n\n[![★][@databunker/session-store-image] @databunker/session-store][@databunker/session-store-url] A [Databunker](https://databunker.org/)-based encrypted session store.\n\n[@databunker/session-store-url]: https://www.npmjs.com/package/@databunker/session-store\n[@databunker/session-store-image]: https://badgen.net/github/stars/securitybunker/databunker-session-store?label=%E2%98%85\n\n[![★][sessionstore-image] sessionstore][sessionstore-url] A session store that works with various databases.\n\n[sessionstore-url]: https://www.npmjs.com/package/sessionstore\n[sessionstore-image]: https://badgen.net/github/stars/adrai/sessionstore?label=%E2%98%85\n\n[![★][tch-nedb-session-image] tch-nedb-session][tch-nedb-session-url] A file system session store based on NeDB.\n\n[tch-nedb-session-url]: https://www.npmjs.com/package/tch-nedb-session\n[tch-nedb-session-image]: https://badgen.net/github/stars/tomaschyly/NeDBSession?label=%E2%98%85\n\n## Examples\n\n### View counter\n\nA simple example using `express-session` to store page views for a user.\n\n```js\nvar express = require('express')\nvar parseurl = require('parseurl')\nvar session = require('express-session')\n\nvar app = express()\n\napp.use(session({\n  secret: 'keyboard cat',\n  resave: false,\n  saveUninitialized: true\n}))\n\napp.use(function (req, res, next) {\n  if (!req.session.views) {\n    req.session.views = {}\n  }\n\n  // get the url pathname\n  var pathname = parseurl(req).pathname\n\n  // count the views\n  req.session.views[pathname] = (req.session.views[pathname] || 0) + 1\n\n  next()\n})\n\napp.get('/foo', function (req, res, next) {\n  res.send('you viewed this page ' + req.session.views['/foo'] + ' times')\n})\n\napp.get('/bar', function (req, res, next) {\n  res.send('you viewed this page ' + req.session.views['/bar'] + ' times')\n})\n\napp.listen(3000)\n```\n\n### User login\n\nA simple example using `express-session` to keep a user log in session.\n\n```js\nvar escapeHtml = require('escape-html')\nvar express = require('express')\nvar session = require('express-session')\n\nvar app = express()\n\napp.use(session({\n  secret: 'keyboard cat',\n  resave: false,\n  saveUninitialized: true\n}))\n\n// middleware to test if authenticated\nfunction isAuthenticated (req, res, next) {\n  if (req.session.user) next()\n  else next('route')\n}\n\napp.get('/', isAuthenticated, function (req, res) {\n  // this is only called when there is an authentication user due to isAuthenticated\n  res.send('hello, ' + escapeHtml(req.session.user) + '!' +\n    ' <a href=\"/logout\">Logout</a>')\n})\n\napp.get('/', function (req, res) {\n  res.send('<form action=\"/login\" method=\"post\">' +\n    'Username: <input name=\"user\"><br>' +\n    'Password: <input name=\"pass\" type=\"password\"><br>' +\n    '<input type=\"submit\" text=\"Login\"></form>')\n})\n\napp.post('/login', express.urlencoded({ extended: false }), function (req, res) {\n  // login logic to validate req.body.user and req.body.pass\n  // would be implemented here. for this example any combo works\n\n  // regenerate the session, which is good practice to help\n  // guard against forms of session fixation\n  req.session.regenerate(function (err) {\n    if (err) next(err)\n\n    // store user information in session, typically a user id\n    req.session.user = req.body.user\n\n    // save the session before redirection to ensure page\n    // load does not happen before session is saved\n    req.session.save(function (err) {\n      if (err) return next(err)\n      res.redirect('/')\n    })\n  })\n})\n\napp.get('/logout', function (req, res, next) {\n  // logout logic\n\n  // clear the user from the session object and save.\n  // this will ensure that re-using the old session id\n  // does not have a logged in user\n  req.session.user = null\n  req.session.save(function (err) {\n    if (err) next(err)\n\n    // regenerate the session, which is good practice to help\n    // guard against forms of session fixation\n    req.session.regenerate(function (err) {\n      if (err) next(err)\n      res.redirect('/')\n    })\n  })\n})\n\napp.listen(3000)\n```\n\n## Debugging\n\nThis module uses the [debug](https://www.npmjs.com/package/debug) module\ninternally to log information about session operations.\n\nTo see all the internal logs, set the `DEBUG` environment variable to\n`express-session` when launching your app (`npm start`, in this example):\n\n```sh\n$ DEBUG=express-session npm start\n```\n\nOn Windows, use the corresponding command;\n\n```sh\n> set DEBUG=express-session & npm start\n```\n\n## License\n\n[MIT](LICENSE)\n\n[rfc-6265bis-03-4.1.2.7]: https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-03#section-4.1.2.7\n[rfc-cutler-httpbis-partitioned-cookies]: https://tools.ietf.org/html/draft-cutler-httpbis-partitioned-cookies/\n[rfc-west-cookie-priority-00-4.1]: https://tools.ietf.org/html/draft-west-cookie-priority-00#section-4.1\n[ci-image]: https://badgen.net/github/checks/expressjs/session/master?label=ci\n[ci-url]: https://github.com/expressjs/session/actions?query=workflow%3Aci\n[coveralls-image]: https://badgen.net/coveralls/c/github/expressjs/session/master\n[coveralls-url]: https://coveralls.io/r/expressjs/session?branch=master\n[node-url]: https://nodejs.org/en/download\n[npm-downloads-image]: https://badgen.net/npm/dm/express-session\n[npm-url]: https://npmjs.org/package/express-session\n[npm-version-image]: https://badgen.net/npm/v/express-session\n"
        },
        {
          "name": "index.js",
          "type": "blob",
          "size": 15.90234375,
          "content": "/*!\n * express-session\n * Copyright(c) 2010 Sencha Inc.\n * Copyright(c) 2011 TJ Holowaychuk\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar Buffer = require('safe-buffer').Buffer\nvar cookie = require('cookie');\nvar crypto = require('crypto')\nvar debug = require('debug')('express-session');\nvar deprecate = require('depd')('express-session');\nvar onHeaders = require('on-headers')\nvar parseUrl = require('parseurl');\nvar signature = require('cookie-signature')\nvar uid = require('uid-safe').sync\n\nvar Cookie = require('./session/cookie')\nvar MemoryStore = require('./session/memory')\nvar Session = require('./session/session')\nvar Store = require('./session/store')\n\n// environment\n\nvar env = process.env.NODE_ENV;\n\n/**\n * Expose the middleware.\n */\n\nexports = module.exports = session;\n\n/**\n * Expose constructors.\n */\n\nexports.Store = Store;\nexports.Cookie = Cookie;\nexports.Session = Session;\nexports.MemoryStore = MemoryStore;\n\n/**\n * Warning message for `MemoryStore` usage in production.\n * @private\n */\n\nvar warning = 'Warning: connect.session() MemoryStore is not\\n'\n  + 'designed for a production environment, as it will leak\\n'\n  + 'memory, and will not scale past a single process.';\n\n/**\n * Node.js 0.8+ async implementation.\n * @private\n */\n\n/* istanbul ignore next */\nvar defer = typeof setImmediate === 'function'\n  ? setImmediate\n  : function(fn){ process.nextTick(fn.bind.apply(fn, arguments)) }\n\n/**\n * Setup session store with the given `options`.\n *\n * @param {Object} [options]\n * @param {Object} [options.cookie] Options for cookie\n * @param {Function} [options.genid]\n * @param {String} [options.name=connect.sid] Session ID cookie name\n * @param {Boolean} [options.proxy]\n * @param {Boolean} [options.resave] Resave unmodified sessions back to the store\n * @param {Boolean} [options.rolling] Enable/disable rolling session expiration\n * @param {Boolean} [options.saveUninitialized] Save uninitialized sessions to the store\n * @param {String|Array} [options.secret] Secret for signing session ID\n * @param {Object} [options.store=MemoryStore] Session store\n * @param {String} [options.unset]\n * @return {Function} middleware\n * @public\n */\n\nfunction session(options) {\n  var opts = options || {}\n\n  // get the cookie options\n  var cookieOptions = opts.cookie || {}\n\n  // get the session id generate function\n  var generateId = opts.genid || generateSessionId\n\n  // get the session cookie name\n  var name = opts.name || opts.key || 'connect.sid'\n\n  // get the session store\n  var store = opts.store || new MemoryStore()\n\n  // get the trust proxy setting\n  var trustProxy = opts.proxy\n\n  // get the resave session option\n  var resaveSession = opts.resave;\n\n  // get the rolling session option\n  var rollingSessions = Boolean(opts.rolling)\n\n  // get the save uninitialized session option\n  var saveUninitializedSession = opts.saveUninitialized\n\n  // get the cookie signing secret\n  var secret = opts.secret\n\n  if (typeof generateId !== 'function') {\n    throw new TypeError('genid option must be a function');\n  }\n\n  if (resaveSession === undefined) {\n    deprecate('undefined resave option; provide resave option');\n    resaveSession = true;\n  }\n\n  if (saveUninitializedSession === undefined) {\n    deprecate('undefined saveUninitialized option; provide saveUninitialized option');\n    saveUninitializedSession = true;\n  }\n\n  if (opts.unset && opts.unset !== 'destroy' && opts.unset !== 'keep') {\n    throw new TypeError('unset option must be \"destroy\" or \"keep\"');\n  }\n\n  // TODO: switch to \"destroy\" on next major\n  var unsetDestroy = opts.unset === 'destroy'\n\n  if (Array.isArray(secret) && secret.length === 0) {\n    throw new TypeError('secret option array must contain one or more strings');\n  }\n\n  if (secret && !Array.isArray(secret)) {\n    secret = [secret];\n  }\n\n  if (!secret) {\n    deprecate('req.secret; provide secret option');\n  }\n\n  // notify user that this store is not\n  // meant for a production environment\n  /* istanbul ignore next: not tested */\n  if (env === 'production' && store instanceof MemoryStore) {\n    console.warn(warning);\n  }\n\n  // generates the new session\n  store.generate = function(req){\n    req.sessionID = generateId(req);\n    req.session = new Session(req);\n    req.session.cookie = new Cookie(cookieOptions);\n\n    if (cookieOptions.secure === 'auto') {\n      req.session.cookie.secure = issecure(req, trustProxy);\n    }\n  };\n\n  var storeImplementsTouch = typeof store.touch === 'function';\n\n  // register event listeners for the store to track readiness\n  var storeReady = true\n  store.on('disconnect', function ondisconnect() {\n    storeReady = false\n  })\n  store.on('connect', function onconnect() {\n    storeReady = true\n  })\n\n  return function session(req, res, next) {\n    // self-awareness\n    if (req.session) {\n      next()\n      return\n    }\n\n    // Handle connection as if there is no session if\n    // the store has temporarily disconnected etc\n    if (!storeReady) {\n      debug('store is disconnected')\n      next()\n      return\n    }\n\n    // pathname mismatch\n    var originalPath = parseUrl.original(req).pathname || '/'\n    if (originalPath.indexOf(cookieOptions.path || '/') !== 0) {\n      debug('pathname mismatch')\n      next()\n      return\n    }\n\n    // ensure a secret is available or bail\n    if (!secret && !req.secret) {\n      next(new Error('secret option required for sessions'));\n      return;\n    }\n\n    // backwards compatibility for signed cookies\n    // req.secret is passed from the cookie parser middleware\n    var secrets = secret || [req.secret];\n\n    var originalHash;\n    var originalId;\n    var savedHash;\n    var touched = false\n\n    // expose store\n    req.sessionStore = store;\n\n    // get the session ID from the cookie\n    var cookieId = req.sessionID = getcookie(req, name, secrets);\n\n    // set-cookie\n    onHeaders(res, function(){\n      if (!req.session) {\n        debug('no session');\n        return;\n      }\n\n      if (!shouldSetCookie(req)) {\n        return;\n      }\n\n      // only send secure cookies via https\n      if (req.session.cookie.secure && !issecure(req, trustProxy)) {\n        debug('not secured');\n        return;\n      }\n\n      if (!touched) {\n        // touch session\n        req.session.touch()\n        touched = true\n      }\n\n      // set cookie\n      try {\n        setcookie(res, name, req.sessionID, secrets[0], req.session.cookie.data)\n      } catch (err) {\n        defer(next, err)\n      }\n    });\n\n    // proxy end() to commit the session\n    var _end = res.end;\n    var _write = res.write;\n    var ended = false;\n    res.end = function end(chunk, encoding) {\n      if (ended) {\n        return false;\n      }\n\n      ended = true;\n\n      var ret;\n      var sync = true;\n\n      function writeend() {\n        if (sync) {\n          ret = _end.call(res, chunk, encoding);\n          sync = false;\n          return;\n        }\n\n        _end.call(res);\n      }\n\n      function writetop() {\n        if (!sync) {\n          return ret;\n        }\n\n        if (!res._header) {\n          res._implicitHeader()\n        }\n\n        if (chunk == null) {\n          ret = true;\n          return ret;\n        }\n\n        var contentLength = Number(res.getHeader('Content-Length'));\n\n        if (!isNaN(contentLength) && contentLength > 0) {\n          // measure chunk\n          chunk = !Buffer.isBuffer(chunk)\n            ? Buffer.from(chunk, encoding)\n            : chunk;\n          encoding = undefined;\n\n          if (chunk.length !== 0) {\n            debug('split response');\n            ret = _write.call(res, chunk.slice(0, chunk.length - 1));\n            chunk = chunk.slice(chunk.length - 1, chunk.length);\n            return ret;\n          }\n        }\n\n        ret = _write.call(res, chunk, encoding);\n        sync = false;\n\n        return ret;\n      }\n\n      if (shouldDestroy(req)) {\n        // destroy session\n        debug('destroying');\n        store.destroy(req.sessionID, function ondestroy(err) {\n          if (err) {\n            defer(next, err);\n          }\n\n          debug('destroyed');\n          writeend();\n        });\n\n        return writetop();\n      }\n\n      // no session to save\n      if (!req.session) {\n        debug('no session');\n        return _end.call(res, chunk, encoding);\n      }\n\n      if (!touched) {\n        // touch session\n        req.session.touch()\n        touched = true\n      }\n\n      if (shouldSave(req)) {\n        req.session.save(function onsave(err) {\n          if (err) {\n            defer(next, err);\n          }\n\n          writeend();\n        });\n\n        return writetop();\n      } else if (storeImplementsTouch && shouldTouch(req)) {\n        // store implements touch method\n        debug('touching');\n        store.touch(req.sessionID, req.session, function ontouch(err) {\n          if (err) {\n            defer(next, err);\n          }\n\n          debug('touched');\n          writeend();\n        });\n\n        return writetop();\n      }\n\n      return _end.call(res, chunk, encoding);\n    };\n\n    // generate the session\n    function generate() {\n      store.generate(req);\n      originalId = req.sessionID;\n      originalHash = hash(req.session);\n      wrapmethods(req.session);\n    }\n\n    // inflate the session\n    function inflate (req, sess) {\n      store.createSession(req, sess)\n      originalId = req.sessionID\n      originalHash = hash(sess)\n\n      if (!resaveSession) {\n        savedHash = originalHash\n      }\n\n      wrapmethods(req.session)\n    }\n\n    function rewrapmethods (sess, callback) {\n      return function () {\n        if (req.session !== sess) {\n          wrapmethods(req.session)\n        }\n\n        callback.apply(this, arguments)\n      }\n    }\n\n    // wrap session methods\n    function wrapmethods(sess) {\n      var _reload = sess.reload\n      var _save = sess.save;\n\n      function reload(callback) {\n        debug('reloading %s', this.id)\n        _reload.call(this, rewrapmethods(this, callback))\n      }\n\n      function save() {\n        debug('saving %s', this.id);\n        savedHash = hash(this);\n        _save.apply(this, arguments);\n      }\n\n      Object.defineProperty(sess, 'reload', {\n        configurable: true,\n        enumerable: false,\n        value: reload,\n        writable: true\n      })\n\n      Object.defineProperty(sess, 'save', {\n        configurable: true,\n        enumerable: false,\n        value: save,\n        writable: true\n      });\n    }\n\n    // check if session has been modified\n    function isModified(sess) {\n      return originalId !== sess.id || originalHash !== hash(sess);\n    }\n\n    // check if session has been saved\n    function isSaved(sess) {\n      return originalId === sess.id && savedHash === hash(sess);\n    }\n\n    // determine if session should be destroyed\n    function shouldDestroy(req) {\n      return req.sessionID && unsetDestroy && req.session == null;\n    }\n\n    // determine if session should be saved to store\n    function shouldSave(req) {\n      // cannot set cookie without a session ID\n      if (typeof req.sessionID !== 'string') {\n        debug('session ignored because of bogus req.sessionID %o', req.sessionID);\n        return false;\n      }\n\n      return !saveUninitializedSession && !savedHash && cookieId !== req.sessionID\n        ? isModified(req.session)\n        : !isSaved(req.session)\n    }\n\n    // determine if session should be touched\n    function shouldTouch(req) {\n      // cannot set cookie without a session ID\n      if (typeof req.sessionID !== 'string') {\n        debug('session ignored because of bogus req.sessionID %o', req.sessionID);\n        return false;\n      }\n\n      return cookieId === req.sessionID && !shouldSave(req);\n    }\n\n    // determine if cookie should be set on response\n    function shouldSetCookie(req) {\n      // cannot set cookie without a session ID\n      if (typeof req.sessionID !== 'string') {\n        return false;\n      }\n\n      return cookieId !== req.sessionID\n        ? saveUninitializedSession || isModified(req.session)\n        : rollingSessions || req.session.cookie.expires != null && isModified(req.session);\n    }\n\n    // generate a session if the browser doesn't send a sessionID\n    if (!req.sessionID) {\n      debug('no SID sent, generating session');\n      generate();\n      next();\n      return;\n    }\n\n    // generate the session object\n    debug('fetching %s', req.sessionID);\n    store.get(req.sessionID, function(err, sess){\n      // error handling\n      if (err && err.code !== 'ENOENT') {\n        debug('error %j', err);\n        next(err)\n        return\n      }\n\n      try {\n        if (err || !sess) {\n          debug('no session found')\n          generate()\n        } else {\n          debug('session found')\n          inflate(req, sess)\n        }\n      } catch (e) {\n        next(e)\n        return\n      }\n\n      next()\n    });\n  };\n};\n\n/**\n * Generate a session ID for a new session.\n *\n * @return {String}\n * @private\n */\n\nfunction generateSessionId(sess) {\n  return uid(24);\n}\n\n/**\n * Get the session ID cookie from request.\n *\n * @return {string}\n * @private\n */\n\nfunction getcookie(req, name, secrets) {\n  var header = req.headers.cookie;\n  var raw;\n  var val;\n\n  // read from cookie header\n  if (header) {\n    var cookies = cookie.parse(header);\n\n    raw = cookies[name];\n\n    if (raw) {\n      if (raw.substr(0, 2) === 's:') {\n        val = unsigncookie(raw.slice(2), secrets);\n\n        if (val === false) {\n          debug('cookie signature invalid');\n          val = undefined;\n        }\n      } else {\n        debug('cookie unsigned')\n      }\n    }\n  }\n\n  // back-compat read from cookieParser() signedCookies data\n  if (!val && req.signedCookies) {\n    val = req.signedCookies[name];\n\n    if (val) {\n      deprecate('cookie should be available in req.headers.cookie');\n    }\n  }\n\n  // back-compat read from cookieParser() cookies data\n  if (!val && req.cookies) {\n    raw = req.cookies[name];\n\n    if (raw) {\n      if (raw.substr(0, 2) === 's:') {\n        val = unsigncookie(raw.slice(2), secrets);\n\n        if (val) {\n          deprecate('cookie should be available in req.headers.cookie');\n        }\n\n        if (val === false) {\n          debug('cookie signature invalid');\n          val = undefined;\n        }\n      } else {\n        debug('cookie unsigned')\n      }\n    }\n  }\n\n  return val;\n}\n\n/**\n * Hash the given `sess` object omitting changes to `.cookie`.\n *\n * @param {Object} sess\n * @return {String}\n * @private\n */\n\nfunction hash(sess) {\n  // serialize\n  var str = JSON.stringify(sess, function (key, val) {\n    // ignore sess.cookie property\n    if (this === sess && key === 'cookie') {\n      return\n    }\n\n    return val\n  })\n\n  // hash\n  return crypto\n    .createHash('sha1')\n    .update(str, 'utf8')\n    .digest('hex')\n}\n\n/**\n * Determine if request is secure.\n *\n * @param {Object} req\n * @param {Boolean} [trustProxy]\n * @return {Boolean}\n * @private\n */\n\nfunction issecure(req, trustProxy) {\n  // socket is https server\n  if (req.connection && req.connection.encrypted) {\n    return true;\n  }\n\n  // do not trust proxy\n  if (trustProxy === false) {\n    return false;\n  }\n\n  // no explicit trust; try req.secure from express\n  if (trustProxy !== true) {\n    return req.secure === true\n  }\n\n  // read the proto from x-forwarded-proto header\n  var header = req.headers['x-forwarded-proto'] || '';\n  var index = header.indexOf(',');\n  var proto = index !== -1\n    ? header.substr(0, index).toLowerCase().trim()\n    : header.toLowerCase().trim()\n\n  return proto === 'https';\n}\n\n/**\n * Set cookie on response.\n *\n * @private\n */\n\nfunction setcookie(res, name, val, secret, options) {\n  var signed = 's:' + signature.sign(val, secret);\n  var data = cookie.serialize(name, signed, options);\n\n  debug('set-cookie %s', data);\n\n  var prev = res.getHeader('Set-Cookie') || []\n  var header = Array.isArray(prev) ? prev.concat(data) : [prev, data];\n\n  res.setHeader('Set-Cookie', header)\n}\n\n/**\n * Verify and decode the given `val` with `secrets`.\n *\n * @param {String} val\n * @param {Array} secrets\n * @returns {String|Boolean}\n * @private\n */\nfunction unsigncookie(val, secrets) {\n  for (var i = 0; i < secrets.length; i++) {\n    var result = signature.unsign(val, secrets[i]);\n\n    if (result !== false) {\n      return result;\n    }\n  }\n\n  return false;\n}\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.2626953125,
          "content": "{\n  \"name\": \"express-session\",\n  \"version\": \"1.18.1\",\n  \"description\": \"Simple session middleware for Express\",\n  \"author\": \"TJ Holowaychuk <tj@vision-media.ca> (http://tjholowaychuk.com)\",\n  \"contributors\": [\n    \"Douglas Christopher Wilson <doug@somethingdoug.com>\",\n    \"Joe Wagner <njwjs722@gmail.com>\"\n  ],\n  \"repository\": \"expressjs/session\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"cookie\": \"0.7.2\",\n    \"cookie-signature\": \"1.0.7\",\n    \"debug\": \"2.6.9\",\n    \"depd\": \"~2.0.0\",\n    \"on-headers\": \"~1.0.2\",\n    \"parseurl\": \"~1.3.3\",\n    \"safe-buffer\": \"5.2.1\",\n    \"uid-safe\": \"~2.1.5\"\n  },\n  \"devDependencies\": {\n    \"after\": \"0.8.2\",\n    \"cookie-parser\": \"1.4.6\",\n    \"eslint\": \"8.56.0\",\n    \"eslint-plugin-markdown\": \"3.0.1\",\n    \"express\": \"4.17.3\",\n    \"mocha\": \"10.2.0\",\n    \"nyc\": \"15.1.0\",\n    \"supertest\": \"6.3.4\"\n  },\n  \"files\": [\n    \"session/\",\n    \"HISTORY.md\",\n    \"index.js\"\n  ],\n  \"engines\": {\n    \"node\": \">= 0.8.0\"\n  },\n  \"scripts\": {\n    \"lint\": \"eslint . && node ./scripts/lint-readme.js\",\n    \"test\": \"mocha --require test/support/env --check-leaks --bail --no-exit --reporter spec test/\",\n    \"test-ci\": \"nyc --reporter=lcov --reporter=text npm test\",\n    \"test-cov\": \"nyc npm test\",\n    \"version\": \"node scripts/version-history.js && git add HISTORY.md\"\n  }\n}\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "session",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}