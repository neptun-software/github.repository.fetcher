{
  "metadata": {
    "timestamp": 1736563013770,
    "page": 640,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "balderdashy/waterline",
      "stars": 5409,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.6416015625,
          "content": "#   ╔═╗╔╦╗╦╔╦╗╔═╗╦═╗┌─┐┌─┐┌┐┌┌─┐┬┌─┐\n#   ║╣  ║║║ ║ ║ ║╠╦╝│  │ ││││├┤ ││ ┬\n#  o╚═╝═╩╝╩ ╩ ╚═╝╩╚═└─┘└─┘┘└┘└  ┴└─┘\n#\n# This file (`.editorconfig`) exists to help maintain consistent formatting\n# throughout this package, the Sails framework, and the Node-Machine project.\n#\n# To review what each of these options mean, see:\n# http://editorconfig.org/\nroot = true\n\n[*]\nindent_style = space\nindent_size = 2\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n"
        },
        {
          "name": ".eslintrc",
          "type": "blob",
          "size": 3.2451171875,
          "content": "{\n  //   ╔═╗╔═╗╦  ╦╔╗╔╔╦╗┬─┐┌─┐\n  //   ║╣ ╚═╗║  ║║║║ ║ ├┬┘│\n  //  o╚═╝╚═╝╩═╝╩╝╚╝ ╩ ┴└─└─┘\n  // A set of basic conventions (similar to .jshintrc) for use within any\n  // arbitrary JavaScript / Node.js package -- inside or outside Sails.js.\n  // For the master copy of this file, see the `.eslintrc` template file in\n  // the `sails-generate` package (https://www.npmjs.com/package/sails-generate.)\n  // Designed for ESLint v4.\n  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n  // For more information about any of the rules below, check out the relevant\n  // reference page on eslint.org.  For example, to get details on \"no-sequences\",\n  // you would visit `http://eslint.org/docs/rules/no-sequences`.  If you're unsure\n  // or could use some advice, come by https://sailsjs.com/support.\n  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  \"env\": {\n    \"node\": true\n  },\n\n  \"parserOptions\": {\n    \"ecmaVersion\": 5\n    // ^^This can be changed to `8` if this package doesn't need to support <= Node v6.\n  },\n\n  \"globals\": {\n    \"Promise\": true\n    // ^^Available since Node v4\n  },\n\n  \"rules\": {\n    \"callback-return\":              [\"error\", [\"done\", \"proceed\", \"next\", \"onwards\", \"callback\", \"cb\"]],\n    \"camelcase\":                    [\"warn\", {\"properties\": \"always\"}],\n    \"comma-style\":                  [\"warn\", \"last\"],\n    \"curly\":                        [\"error\"],\n    \"eqeqeq\":                       [\"error\", \"always\"],\n    \"eol-last\":                     [\"warn\"],\n    \"handle-callback-err\":          [\"error\"],\n    \"indent\":                       [\"warn\", 2, {\n      \"SwitchCase\": 1,\n      \"MemberExpression\": \"off\",\n      \"FunctionDeclaration\": {\"body\":1, \"parameters\": \"off\"},\n      \"FunctionExpression\": {\"body\":1, \"parameters\": \"off\"},\n      \"CallExpression\": {\"arguments\":\"off\"},\n      \"ArrayExpression\": 1,\n      \"ObjectExpression\": 1,\n      \"ignoredNodes\": [\"ConditionalExpression\"]\n    }],\n    \"linebreak-style\":              [\"error\", \"unix\"],\n    \"no-dupe-keys\":                 [\"error\"],\n    \"no-duplicate-case\":            [\"error\"],\n    \"no-extra-semi\":                [\"warn\"],\n    \"no-labels\":                    [\"error\"],\n    \"no-mixed-spaces-and-tabs\":     [\"error\", \"smart-tabs\"],\n    \"no-redeclare\":                 [\"warn\"],\n    \"no-return-assign\":             [\"error\", \"always\"],\n    \"no-sequences\":                 [\"error\"],\n    \"no-trailing-spaces\":           [\"warn\"],\n    \"no-undef\":                     [\"error\"],\n    \"no-unexpected-multiline\":      [\"warn\"],\n    \"no-unused-vars\":               [\"warn\", {\"caughtErrors\":\"all\", \"caughtErrorsIgnorePattern\": \"^unused($|[A-Z].*$)\", \"argsIgnorePattern\": \"^unused($|[A-Z].*$)\", \"varsIgnorePattern\": \"^unused($|[A-Z].*$)\" }],\n    \"no-use-before-define\":         [\"error\", {\"functions\":false}],\n    \"one-var\":                      [\"warn\", \"never\"],\n    \"quotes\":                       [\"warn\", \"single\", {\"avoidEscape\":false, \"allowTemplateLiterals\":true}],\n    \"semi\":                         [\"error\", \"always\"],\n    \"semi-spacing\":                 [\"warn\", {\"before\":false, \"after\":true}],\n    \"semi-style\":                   [\"warn\", \"last\"]\n  }\n\n}\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.076171875,
          "content": "#   ┌─┐┬┌┬┐╦╔═╗╔╗╔╔═╗╦═╗╔═╗\n#   │ ┬│ │ ║║ ╦║║║║ ║╠╦╝║╣\n#  o└─┘┴ ┴ ╩╚═╝╝╚╝╚═╝╩╚═╚═╝\n#\n# This file (`.gitignore`) exists to signify to `git` that certain files\n# and/or directories should be ignored for the purposes of version control.\n#\n# This is primarily useful for excluding temporary files of all sorts; stuff\n# generated by IDEs, build scripts, automated tests, package managers, or even\n# end-users (e.g. file uploads). `.gitignore` files like this also do a nice job\n# at keeping sensitive credentials and personal data out of version control systems.\n#\n\n############################\n# sails / node.js / npm\n############################\nnode_modules\n.tmp\nnpm-debug.log\npackage-lock.json\n.waterline\n.node_history\n\n############################\n# editor & OS files\n############################\n*.swo\n*.swp\n*.swn\n*.swm\n*.seed\n*.log\n*.out\n*.pid\nlib-cov\n.DS_STORE\n*#\n*\\#\n.\\#*\n*~\n.idea\n.netbeans\nnbproject\n\n############################\n# misc\n############################\ndump.rdb\n"
        },
        {
          "name": ".jshintrc",
          "type": "blob",
          "size": 5.4736328125,
          "content": "{\n  //    ┬┌─┐╦ ╦╦╔╗╔╔╦╗┬─┐┌─┐\n  //    │└─┐╠═╣║║║║ ║ ├┬┘│\n  //  o└┘└─┘╩ ╩╩╝╚╝ ╩ ┴└─└─┘\n  //\n  // This file (`.jshintrc`) exists to help with consistency of code\n  // throughout this package, and throughout Sails and the Node-Machine project.\n  //\n  // To review what each of these options mean, see:\n  // http://jshint.com/docs/options\n  //\n  // (or: https://github.com/jshint/jshint/blob/master/examples/.jshintrc)\n\n\n\n  //////////////////////////////////////////////////////////////////////\n  // NOT SUPPORTED IN SOME JSHINT VERSIONS SO LEAVING COMMENTED OUT:\n  //////////////////////////////////////////////////////////////////////\n  // Prevent overwriting prototypes of native classes like `Array`.\n  // (doing this is _never_ ok in any of our packages that are intended\n  //  to be used as dependencies of other developers' modules and apps)\n  // \"freeze\": true,\n  //////////////////////////////////////////////////////////////////////\n\n\n  //////////////////////////////////////////////////////////////////////\n  // EVERYTHING ELSE:\n  //////////////////////////////////////////////////////////////////////\n\n  // Allow the use of ES6 features.\n  // (re ES7, see https://github.com/jshint/jshint/issues/2297)\n  \"esversion\": 6,\n\n  // Allow the use of `eval` and `new Function()`\n  // (we sometimes actually need to use these things)\n  \"evil\": true,\n\n  // Tolerate funny-looking dashes in RegExp literals.\n  // (see https://github.com/jshint/jshint/issues/159#issue-903547)\n  \"regexdash\": true,\n\n  // The potential runtime \"Environments\" (as defined by jshint)\n  // that the _style_ of code written in this package should be\n  // compatible with (not the code itself, of course).\n  \"browser\": true,\n  \"node\": true,\n  \"wsh\": true,\n\n  // Tolerate the use `[]` notation when dot notation would be possible.\n  // (this is sometimes preferable for readability)\n  \"sub\": true,\n\n  // Do NOT suppress warnings about mixed tabs and spaces\n  // (two spaces always, please; see `.editorconfig`)\n  \"smarttabs\": false,\n\n  // Suppress warnings about trailing whitespace\n  // (this is already enforced by the .editorconfig, so no need to warn as well)\n  \"trailing\": false,\n\n  // Suppress warnings about the use of expressions where fn calls or assignments\n  // are expected, and about using assignments where conditionals are expected.\n  // (while generally a good idea, without this setting, JSHint needlessly lights up warnings\n  //  in existing, working code that really shouldn't be tampered with.  Pandora's box and all.)\n  \"expr\": true,\n  \"boss\": true,\n\n  // Do NOT suppress warnings about using functions inside loops\n  // (in the general case, we should be using iteratee functions with `_.each()`\n  //  or `Array.prototype.forEach()` instead of `for` or `while` statements\n  //  anyway.  This warning serves as a helpful reminder.)\n  \"loopfunc\": false,\n\n  // Suppress warnings about \"weird constructions\"\n  // i.e. allow code like:\n  // ```\n  //  (new (function OneTimeUsePrototype () { } ))\n  // ```\n  //\n  // (sometimes order of operations in JavaScript can be scary.  There is\n  //  nothing wrong with using an extra set of parantheses when the mood\n  //  strikes or you get \"that special feeling\".)\n  \"supernew\": true,\n\n  // Do NOT allow backwards, node-dependency-style commas.\n  // (while this code style choice was used by the project in the past,\n  //  we have since standardized these practices to make code easier to\n  //  read, albeit a bit less exciting)\n  \"laxcomma\": false,\n\n  // Do NOT allow avant garde use of commas in conditional statements.\n  // (this prevents accidentally writing code like:\n  //  ```\n  //  if (!_.contains(['+ci', '-ci', '∆ci', '+ce', '-ce', '∆ce']), change.verb) {...}\n  //  ```\n  //  See the problem in that code?  Neither did we-- that's the problem!)\n  \"nocomma\": true,\n\n  // Strictly enforce the consistent use of single quotes.\n  // (this is a convention that was established primarily to make it easier\n  //  to grep [or FIND+REPLACE in Sublime] particular string literals in\n  //  JavaScript [.js] files.  Note that JSON [.json] files are, of course,\n  //  still written exclusively using double quotes around key names and\n  //  around string literals.)\n  \"quotmark\": \"single\",\n\n  // Do NOT suppress warnings about the use of `==null` comparisons.\n  // (please be explicit-- use Lodash or `require('util')` and call\n  //  either `.isNull()` or `.isUndefined()`)\n  \"eqnull\": false,\n\n  // Strictly enforce the use of curly braces with `if`, `else`, and `switch`\n  // as well as, much less commonly, `for` and `while` statements.\n  // (this is just so that all of our code is consistent, and to avoid bugs)\n  \"curly\": true,\n\n  // Strictly enforce the use of `===` and `!==`.\n  // (this is always a good idea.  Check out \"Truth, Equality, and JavaScript\"\n  //  by Angus Croll [the author of \"If Hemmingway Wrote JavaScript\"] for more\n  //  explanation as to why.)\n  \"eqeqeq\": true,\n\n  // Allow initializing variables to `undefined`.\n  // For more information, see:\n  //  • https://jslinterrors.com/it-is-not-necessary-to-initialize-a-to-undefined\n  //  • https://github.com/jshint/jshint/issues/1484\n  //\n  // (it is often very helpful to explicitly clarify the initial value of\n  //  a local variable-- especially for folks new to more advanced JavaScript\n  //  and who might not recognize the subtle, yet critically important differences between our seemingly\n  //  between `null` and `undefined`, and the impact on `typeof` checks)\n  \"-W080\": true\n\n}\n"
        },
        {
          "name": ".npmignore",
          "type": "blob",
          "size": 0.2783203125,
          "content": ".git\n./.gitignore\n./.jshintrc\n./.editorconfig\n./.travis.yml\n./appveyor.yml\n./example\n./examples\n./test\n./tests\n./.github\n\nnode_modules\nnpm-debug.log\n.node_history\n*.swo\n*.swp\n*.swn\n*.swm\n*.seed\n*.log\n*.out\n*.pid\nlib-cov\n.DS_STORE\n*#\n*\\#\n.\\#*\n*~\n.idea\n.netbeans\nnbproject\n.tmp\ndump.rdb\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.8251953125,
          "content": "# # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n#   ╔╦╗╦═╗╔═╗╦  ╦╦╔═╗ ┬ ┬┌┬┐┬                           #\n#    ║ ╠╦╝╠═╣╚╗╔╝║╚═╗ └┬┘││││                           #\n#  o ╩ ╩╚═╩ ╩ ╚╝ ╩╚═╝o ┴ ┴ ┴┴─┘                         #\n#                                                       #\n# This file configures Travis CI.                       #\n# (i.e. how we run the tests... mainly)                 #\n#                                                       #\n# https://docs.travis-ci.com/user/customizing-the-build #\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n\nlanguage: node_js\n\nnode_js:\n  - \"10\"\n  - \"12\"\n  - \"14\"\n  - \"16\"\n\nbranches:\n  only:\n    - master\n\nnotifications:\n  email:\n    - ci@sailsjs.com\n"
        },
        {
          "name": "ARCHITECTURE.md",
          "type": "blob",
          "size": 31.3994140625,
          "content": "# How Waterline Works\n\n\n## High-Level Diagram\n\n> This is a very rough/early pass at an architectural doc, and it only covers a subset of the major components inside of Waterline, but I wanted to include a link to it here in case it was helpful for anyone.\n>\n> [How Waterline Works (diagram)](https://docs.google.com/a/balderdashdesign.com/drawings/d/1u7xb5jDY5i2oeVRP2-iOGGVsFbosqTMWh9wfmY3BTfw/edit?usp=sharing)\n\n#### Computational complexity of various kinds of association mutations\n\n[Link, tweeze, & splice performance for associations in Waterline ≥0.13 (by # of native queries)](https://twitter.com/mikermcneil/status/792179005348655104)\n\n\n## Overview: Talking to the database\n\nThere are two different approaches for talking to the database using Waterline.\n\n### Waterline queries\n\nThe first, and simplest, is by building and executing a **Waterline query** -- most commonly by calling a model method to get a chainable deferred object:\n\n```js\nUser.find()\n.where({\n  occupation: 'doctor'\n})\n.omit('occupation')\n.limit(30)\n.skip(90)\n.sort('name asc')\n.exec(function (err, userRecords){\n\n});\n```\n\n### Statements\n\nThe second, lower-level approach to talking to your database with Waterline is to build and execute a **statement** -- most commonly by calling a datastore method:\n\n```js\nsails.datastore('mysql').sendStatement({\n  select: ['*'],\n  from: 'inventory',\n  where: {\n    type: 'snack'\n  }\n}).exec(function (err, result) {\n\n});\n```\n\n> Statements expect you to use column names, not attribute names.\n\n\n\n\n## Querying (implementation)\n\nWhen you run a query in Waterline, the data structure goes through 5 different stages.\n\n### Stage 1 query\n\n> _aka \"Query instance\" / \"deferred object\"_\n\nStage 1 queries are Query instances; i.e. the deferred object you get from calling a model method.\n\nFor example:\n```\nvar q = User.findOne({\n  omit: 'occupation',\n  where: {\n    occupation: 'doctor'\n  },\n  select: ['name', 'age', 'createdAt'],\n  skip: 90,\n  sort: 'name asc'\n}).populate('friends', {\n  where: {\n    occupation: 'doctor',\n    age: { '>': 40, '<': 50 }\n  },\n  sort: 'yearsInIndustry desc'\n});\n```\n\n\n### Stage 2 query\n\n> _aka \"logical protostatement\"_\n\nUnder the covers, when you call `.exec()`, Waterline expands the stage 1 query into a dictionary (i.e. plain JavaScript object).\n\nThis is what's known as a \"Stage 2 query\":\n\n```js\n{\n  method: 'findOne', // << the name of the method\n  using: 'user', // << the identity of the model\n\n  // The criteria dictionary\n  // (because this is \"find\"/\"findOne\", \"update\", \"destroy\", \"count\", \"sum\", or \"avg\")\n  criteria: {\n\n    // The expanded \"select\" clause\n    // (note that the only reason this is not `['*']` is because we specified an explicit `select` or `omit`\n    // It will ALWAYS include the primary key.)\n    // For no projections, this is `select: ['*']`.  And `select` is NEVER allowed to be `[]`.)\n    select: [\n      'id',\n      'name',\n      'age',\n      'createdAt'\n    ],\n\n    // The expanded \"omit\" clause\n    // (always empty array, unless we provided an `omit`.  If `omit` is anything other than [], then `select` must be `['*']` -- and vice versa)\n    omit: ['occupation'],\n\n    // The expanded \"where\" clause\n    where: {\n      occupation: 'doctor'\n    },\n\n    // The \"limit\" clause (if there is one, otherwise defaults to `Number.MAX_SAFE_INTEGER`)\n    limit: 9007199254740991,\n\n    // The \"skip\" clause (if there is one, otherwise defaults to 0)\n    skip: 90,\n\n    // The expanded \"sort\" clause\n    // (an empty array indicates that the adapter's default sort should be used)\n    sort: [\n      { name: 'ASC' }\n    ]\n  },\n\n  // The `populates` clause.\n  // (if nothing was populated, this would be an empty dictionary.)\n  populates: {\n\n    // The keys inside of `populates` are either:\n    // • `true` - if this is a singular (\"model\") association\n    // • a subcriteria - if this is a plural (\"collection\") association a fully-normalized, stage 2 Waterline criteria\n    // • `false` - special case, only for when this is a plural (\"collection\") association: when the provided subcriteria would actually be a no-op that will always end up as `[]`\n\n    friends: {\n      select: [ '*' ],\n      omit: [],\n      where: {\n        and: [\n          { occupation: 'doctor' },\n          {\n            and: [\n              { age: { '>': 40 } },\n              { age: { '<': 50 } }\n            ]\n          }\n          // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n          // > Why don't we coallesce the \"and\"s above?  It's kind of ugly.\n          //\n          // Performance trumps prettiness here-- S2Qs are for computers, not humans.\n          // S1Qs should be pretty, but for S2Qs, the priorities are different.  Instead, it's more important\n          // that they (1) are easy to write parsing code for and (2) don't introduce any meaningful overhead\n          // when they are built (remember: we're building these on a per-query basis).\n          // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n        ]\n      },\n      limit: (Number.MAX_SAFE_INTEGER||9007199254740991),\n      skip: 0,\n      sort: [\n        { yearsInIndustry: 'DESC' }\n      ]\n    }\n\n  }\n\n}\n```\n\n##### Side note about populating\n\n```\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    // > Side note about what to expect under the relevant key in record(s) when you populate vs. don't populate:\n    // > • When populating a singular (\"model\") attribute, you'll always get either a dictionary (a child record) or `null` (if no child record matches the fk; e.g. if the fk was old, or if it was `null`)\n    // > • When populating a plural (\"collection\") attribute, you'll always get an array of dictionaries (a collection, consisting of child records).  Of course, it might be empty.\n    // > • When NOT populating a singular (\"model\") attribute, you'll get whatever is stored in the database (there is no guarantee it will be correct-- if you fiddle with your database directly at the physical layer, you could mess it up).  Note that we ALWAYS guarantee that the key will be present though, so long as it's not being explicitly excluded by `omit` or `select`.  i.e. even if the database says it's not there, the key will exist as `null`.\n    // > • When NOT populating a plural (\"collection\") attribute, you'll never get the key.  It won't exist on the resulting parent record(s).\n    // > • If populating a plural (\"collection\") attribute, and child records w/ duplicate ids exist in the collection (e.g. because of a corrupted physical database), any duplicate child records are stripped out.\n    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n```\n\nAlso, some more formal terminology:\n\n+ Ideally, one uses the word \"association\" when one wants to refer to _both sides_ of the association *at the same time*.  It's still possible to understand what it means more generally or when referring to a particular attribute, but it's one of those things that's helpful to be able to get a bit more formal about sometimes.\n+ When one needs to be specific, one refers to the attribute defs themselves as \"singular attributes\" (or more rarely: \"model attribute\")  and \"plural attribute\" (aka \"collection attribute\").\n+ one uses \"singular\" and \"plural\" to refer to a _particular side_ of the association.  So really, in that parlance, an \"association\" is never wholly singular or plural-- it's just that the attributes on either side are.  Similarly, you can't always look at a plural or singular attribute and decide whether it's part 2-way or 1-way association (you don't always have enough information)\n+ A 1-way (or \"exclusive\") association is either a vialess collection attribute, or a singular attribute that is not pointed at by a via on the other side\n+ A 2-way (or \"shared\") association is any collection attribute with `via`, or a singular attribute that _is_ pointed at by a via on the other side\n+ A 2-way association that is laid out in such a way that it needs a junction model to fully represent it is called a many-to-many association\n+ When referring to a record which might be populated, one calls it a \"parent record\" (or rarely: \"primary record\")\n+ Finally, when referring to a populated key/value pair within a parent record, one refers to it as one of the following:\n  + for singular, when not populated: a \"foreign key\"\n  + for singular, when populated: a \"child record\" (aka \"foreign record\")\n  + for plural, when populated: a \"collection\" (aka \"foreign collection\")\n\n\n### Stage 3 query\n\n> _aka \"physical protostatement\"_\n\n\nNext, Waterline performs a couple of additional transformations:\n\n+ replaces `method: 'findOne'` with `method: 'find'` (and updates `limit` accordingly)\n+ replaces model attribute names with physical database attribute/column names\n+ replaces the model identity with the table name\n+ removed `populates` (or potentially replaced it with `joins`)\n  + this varies-- keep in mind that sometimes _multiple physical protostatements will be built up and sent to different adapters_-- or even the same one.\n  + if `joins` is added, then this would replace `method: 'findOne'` or `method: 'find'` with `method: 'join'`.\n\n```js\n{\n  method: 'find', //<< note that \"findOne\" was replaced with \"find\"\n  using: 'users', //<< the table name, it can be different than the model name, as it can be set in the model definition\n  criteria: {\n    select: [\n      'id',\n      'full_name', // << in this case full_name is the native database attribute/column name\n      'age',\n      'created_at'\n    ],\n    where: {\n      and: [\n        { occupation_key: 'doctor' }\n      ]\n    },\n    limit: 2, //<< note that this was set to `2` automatically, because of being originally a \"findOne\"\n    skip: 90,\n    sort: [\n      { full_name: 'ASC' }\n    ]\n  }\n}\n```\n\nThis physical protostatement is what gets sent to the database adapter.\n\n\n\n> Note that, in some cases, **multiple different physical protostatements** will be built up, and sent to the same or different adapters.\n\nFor example, if Waterline decides that it is a good idea (based on the variety of logical query\nthis is, which datastores it spans, and the support implemented in adapters), then it will transform\nthe method to `join`, and provide additional info:\n\n```js\n{\n  method: 'join', //<< note that \"findOne\" was replaced with \"join\"\n  using: 'users', //<< the table name\n  criteria: {\n    select: [\n      'id',\n      'full_name',\n      'age',\n      'created_at'\n    ],\n    where: {\n      and: [\n        { occupation_key: 'doctor' }\n      ]\n    },\n    limit: 1,//<< note that this was STILL set to `1` automatically\n    skip: 90,\n    sort: [\n      { full_name: 'ASC' }\n    ],\n\n    // If `method` is `join`, then join instructions will be included in the criteria:\n    joins: [\n      // The `joins` array can have 1 or 2 dictionaries inside of it for __each__ populated\n      // attribute in the query. If the query requires the use of a join table then\n      // the array will have two items for that population.\n      {\n        // The identity of the parent model\n        parentCollectionIdentity: 'users',\n        // The model tableName of the parent (unless specified all keys are using tableNames)\n        parent: 'user_table_name',\n        // An alias to use for the join\n        parentAlias: 'user_table_name__pets',\n        // For singular associations, the populated attribute will have a schema (since it represents\n        // a real column).  For plural associations, we'll use the primary key column of the parent table.\n        parentKey: 'id',\n        // The identity of the child model (in this case the join table)\n        childCollectionIdentity: 'pets_owners__users_pets',\n        // The tableName of the child model\n        child: 'pets_owners__users_pets',\n        // An alias to use for the join. It's made up of the parent reference + '__' + the attribute to populate\n        childAlias: 'pets_owners__users_pets__pets',\n        // The key on the child model that represents the foreign key value\n        childKey: 'user_pets',\n        // The original model alias used\n        alias: 'pets',\n        // Determines if the parent key is needed on the record. Will be true for\n        // singular associations otherwise false.\n        removeParentKey: false,\n        // Similar to removeParentKey\n        model: false,\n        // Flag determining if multiple records will be returned\n        collection: true\n      },\n      // In this case the \"pets\" population requires the use of a join table so\n      // two joins are needed to get the correct data. This dictionary represents\n      // the connection between the join table and the child table.\n      {\n        // Parent in this case will be the join table\n        parentCollectionIdentity: 'pets_owners__users_pets',\n        parent: 'pets_owners__users_pets',\n        parentAlias: 'pets_owners__users_pets__pets',\n        parentKey: 'pet_owners',\n        // Child will be the table that holds the actual record being populated\n        childCollectionIdentity: 'pets',\n        child: 'pets',\n        childAlias: 'pets__pets',\n        childKey: 'id',\n        alias: 'pets',\n        // Flag to show that a join table was used so when joining the records\n        // take that into account.\n        junctionTable: true,\n        removeParentKey: false,\n        model: false,\n        collection: true,\n        // Criteria to use for the child table.\n        criteria: {\n          where: {},\n          limit: 9007199254740991,\n          skip: 0,\n          sort: [{\n            id: 'ASC'\n          }],\n          select: ['createdAt', 'updatedAt', 'id', 'name']\n        }\n      }\n    ]\n  },\n}\n```\n\n\n### Stage 4 query\n\n> _aka \"statement\"_\n\n**In future releases of Waterline and its core adapters, the concept of a Stage 4 query will likely be removed for performance reasons.**\n\nIn the database adapter, the physical protostatement is converted into an actual _statement_:\n\n```js\n{\n  from: 'users',\n  select: [\n    'id',\n    'full_name',\n    'age',\n    'created_at'\n  ],\n  where: {\n    and: [\n      { occupation_key: 'doctor' }\n    ]\n  },\n  limit: 1,\n  skip: 90,\n  sort: [\n    { full_name: 'ASC' }\n  ]\n}\n```\n\nThis is the same kind of statement that you can send directly to the lower-level driver.  Statements are _much_ closer to native queries (e.g. SQL query or MongoDB native queries).  They are still more or less database-agnostic, but less regimented, and completely independent from the database schema.\n\n\n> Not _every_ adapter necessarily uses statements (S4Qs) and native queries (S5Qs).  This will likely change in the future though.\n> If you're implementing a new adapter for Waterline, take a peek at the latest versions of sails-postgresql or sails-mysql for inspiration.  If you need help, [hit us up](https://flagship.sailsjs.com/contact).\n\n\n### Stage 5 query\n\n> _aka \"native query\"_\n\nIn the database driver, the statement is compiled into a native query:\n\n```js\nSELECT id, full_name, age, created_at FROM users WHERE occupation_key=\"doctor\" LIMIT 1 SKIP 90 SORT full_name ASC;\n```\n\n\n\n## Example `where` clause iterator\n\nSee https://gist.github.com/mikermcneil/8252ce4b7f15d9e2901003a3a7a800cf for an example of an iterator for a stage 2 query's `where` clause.\n\n\n\n\n\n## Query pipeline (example)\n\nHere's a quick example that demonstrates how this all fits together.\n\nIt operates under these assumptions:\n\n1. A person have exactly one mom (also a Person)\n2. A person can have many \"cats\" (Cat), and they can have many \"humanFriends\" (Person)\n3. A person can have many \"dogs\" (Dog), but every dog has one \"owner\" (Person)\n\n\n\nGiven the following stage 1 query:\n\n```js\n// A stage 1 query\nvar q = Person.find({\n  select: ['name', 'age']\n})\n.populate('mom')\n.populate('dogs')\n.populate('cats', {\n  where: { name: { startsWith: 'Fluffy' } },\n  limit: 50,\n  sort: 'age DESC',\n  omit: ['age']\n});\n```\n\nIt would be forged into the following stage 2 query:\n\n```js\n// A stage 2 query\n{\n\n  method: 'find',\n\n  using: 'person',\n\n  meta: {},\n\n  criteria: {\n    where: {},\n    limit: 9007199254740991,\n    skip: 0,\n    sort: [ { id: 'ASC' } ], //<< implicitly added\n    select: ['id', 'name', 'age', 'mom'],\n    //^^ note that it automatically filled in the pk attr,\n    // as well as the fk attrs for any model associations\n    // being populated.  (if omit was specified instead,\n    // then it would have been checked to be sure that neither\n    // the pk attr nor any necessary fk attrs were being explicitly\n    // omitted.  If any were, Waterline would refuse to run the query.)\n  },\n\n  populates: {\n    mom: true,\n    dogs: {\n      where: {},\n      limit: 9007199254740991,\n      skip: 0,\n      sort: [ { id: 'ASC' } ], //<< implicitly added\n      select: ['*']\n    },\n    cats: {\n      where: {\n        and: [\n          { name: { startsWith: 'Fluffy' } }\n        ]\n      },\n      limit: 50,\n      skip: 0,\n      sort: [ { age: 'DESC' } ],\n      omit: ['age']\n    }\n  }\n\n}\n```\n\n\nThen, it would then be forged into one or more stage 3 queries, depending on the datastores/adapters at work.  For example:\n\n```js\n// A stage 3 query\n{\n  method: 'find',\n  using: 'the_person_table',\n  meta: {},\n  criteria: {\n    where: {},\n    limit: 9007199254740991,\n    skip: 0,\n    sort: [ { id_colname: 'ASC' } ],\n    select: ['id_colname', 'name_col_____name', 'age_whatever', 'mom_fk_col_name']\n    // If this had been `['*']`, then the `select` clause would have simply been omitted.\n  },\n  // Note that `joins` might sometimes be included here.\n  // But since this example is xD/A, the `joins` key would not exist.\n}\n```\n\n\n```js\n// Another stage 3 query (for \"cats\")\n{\n  method: 'find',\n  using: 'the_cat_table',\n  meta: {},\n  criteria: {\n    where: {\n      and: [\n        { id_colname: { in: [ 39, 844, 2, 3590, 381, 3942, 93, 3959, 1, 492, 449, 224 ] } },\n        //^^ injected b/c this is implementing part of an xD/A populate\n        { name_colname: { startsWith: 'Fluffy' } }\n      ]\n    },\n    limit: 50,\n    skip: 0,\n    sort: [ { age_col_name: 'DESC' } ],\n    select: ['id_colname', 'name_colname__', '_temperament_colname'],\n    // Note that even though this was an `omit`, it was expanded.\n  }\n}\n```\n\n\n```js\n// Yet another stage 3 query  (for \"mom\")\n{\n  method: 'find',\n  using: 'the_person_table',\n  meta: {},\n  criteria: {\n    where: {\n      and: [\n        { id_colname: { in: [ 2323, 3291, 38, 1399481 ] } }\n        //^^ injected b/c this is implementing part of an xD/A populate\n      ]\n    },\n    limit: 9007199254740991,\n    skip: 0,\n    sort: [ { id_colname: 'ASC' } ],\n    select: ['id_colname', 'name_col_____name', 'age_whatever', 'mom_fk_col_name']\n    // ^This is always fully expanded, because you can't currently specify a subcriteria for a model association.\n  }\n}\n```\n\n\n_etc._\n\n\n\n\n## Validating/normalizing a criteria's `where` clause\n\n#### If key is `and` or `or`...\nThen this is a predicate operator that should have an array on the RHS.\n\n#### For any other key...\n\nThe key itself must be a valid attr name or column name (depending on if this is a stage 2 or stage 3 query).\n\nThe meaning of the RHS depends on its type:\n\n=> string, number, boolean, or null\n => indicates an equality constraint\n\n=> array\n  => indicates shortcut notation for \"IN\"\n  => (should be normalized into `{in: ['...']}` automatically -- never allowed if expecting it to already be normalized)\n\n=> dictionary\n  => indicates a subattribute modifier\n  => The type expectation for the dictionary itself varies.\n  => (but note that `{'!':[...]}` should be normalized into `{nin: ['...']}` automatically -- never allowed if expecting it to already be normalized)\n\n=> misc\n  => never allowed\n\n\n\n\nExamples:\n-------------------------------------------------------------------------------------\n\n{ occupation: 'doctor' },\n{ occupation: 23523 },\n{ occupation: null },\n{ occupation: true },\n{ occupation: false },\n{ occupation: false },\n\n{ occupation: { not: 'doctor' } },\n{ occupation: { not: 23523 } },\n{ occupation: { not: null } },\n{ occupation: { not: true } },\n{ occupation: { not: false } },\n\n{ occupation: { in: ['doctor', 'nurse'] } },\n{ occupation: { in: [true, false, 283523, null] } },\n\n{ occupation: { nin: ['doctor', 'nurse'] } },\n{ occupation: { nin: [true, false, 283523, null] } },\n\n{ occupation: { contains: 'asdf' } },\n{ occupation: { like: 'asdf' } },\n{ occupation: { startsWith: 'asdf' } },\n{ occupation: { endsWith: 'asdf' } },\n\n\n\n\n\n\n\n\n\n## Glossary\n\nQuick reference for what various things inside of any given query are called.  (Some of these terms are formal and specific, and shouldn't come up in everyday use for most people contributing to Waterline.  Still, it's important to have names for things when discussing the finer details.)\n\n> These notes are for the stage 2 and stage 3 queries-- but they are mostly applicable to stage 1 queries and stage 4 queries as well.  Just note that stage 1 queries tend to be much more tolerant in general, whereas stage 4 queries are more strict.  Also realize that the details of what is supported in criteria varies slightly between stages.\n>\n> + For more specific (albeit slightly older and potentially out of date) docs on criteria in stage 4 queries, see https://github.com/treelinehq/waterline-query-docs/blob/99a51109a8cfe5b705f40b987d4d933852a4af4c/docs/criteria.md\n> + For more specific (albeit slightly older and potentially out of date) docs on criteria in stage 1 queries, see https://github.com/balderdashy/waterline-criteria/blob/26f2d0e25ff88e5e1d49e55116988322339aad10/lib/validators/validate-sort-clause.js and https://github.com/balderdashy/waterline-criteria/blob/26f2d0e25ff88e5e1d49e55116988322339aad10/lib/validators/validate-where-clause.js\n\n\n| Word/Phrase            | Meaning |\n|:-----------------------|:------------------------------------------------------------------------------|\n| query key              | A top-level key in the query itself; e.g. `criteria`, `populates`, `newRecords`, etc.  There are a specific set of permitted query keys (attempting to use any extra keys will cause errors!  But note that instead of attaching ad hoc query keys, you can use `meta` for custom stuff.)\n| `using`                | The `using` query key is a vocative that indicates which model is being \"spoken to\" by the query.\n| clause                 | A top-level key in the `criteria`.  There are a specific set of permitted clauses in criterias.  Which clauses are allowed depends on what stage of query this is (for example, stage 3 queries don't permit the use of `omit`, but stage 2 queries _do_)\n| `sort` clause          | When fully-normalized, this is an array of >=1 dictionaries called comparator directives.\n| comparator directive   | An item within the array of a fully normalized `sort` clause.  Should always be a dictionary with exactly one key (known as the _comparator target_), which is usually the name of an attribute (or column name, if this is a stage 3 query).  The RHS value for the key in a comparator directive must always be either 'ASC' or 'DESC'.\n| `where` clause         | The `where` clause of a fully normalized criteria always has one key at the top level: either (1) a predicate (\"and\"/\"or\") whose RHS is an array consisting of zero or more conjuncts or disjuncts, or (2) a single constraint (see below)\n| conjunct               | A dictionary within an `and` array.  When fully normalized, always consists of exactly one key-- an attribute name (or column name), whose RHS is either (A) a nested predicate operator or (B) a filter.\n| disjunct               | A dictionary within an `or` array whose contents work exactly like those of a conjunct (see above).\n| scruple                | Another, more general name for a dictionary which could be a conjunct, disjunct, or the very top level of the `where` clause.  A scruple could contain either a _constraint_ or a _predicate_. (This terminology is particularly useful when talking about a stage 1 query, since not everything will have been normalized yet.)\n| predicate              | A _predicate scruple_ (usually simply called a _predicate_) is a lone key/value pair whose LHS is a _predicate operator_ (either \"and\" or \"or\") and whose RHS is a _predicate set_.\n| predicate operator     | The LHS of a predicate scruple (\"and\" or \"or\") is called a _predicate operator_.  (Sometimes also informally known as a _predicate key_.)\n| predicate operands     | The RHS of a predicate scruple is an array of _predicate operands_.  Its items are scruples called either \"conjuncts\" or \"disjuncts\", depending on whether the predicate operator is an \"and\" or an \"or\", respectively.\n| constraint             | A _constraint scruple_ (usually simply called a _constraint_) is a key/value pair that represents how values for a piece of data will be qualified.  Once normalized, the RHS of a constraint is always either a primitive (making it an _equivalency constraint_) or a dictionary consisting of exactly one key/value pair called a \"modifier\" aka \"sub-attribute modifier\" (making the constraint a _complex constraint_).  In certain special cases, (in stage 1 queries only!) multiple different modifiers can be combined together within a complex constraint (e.g. combining `>` and `<` to indicate a range of values).  In stage 2 queries, these have already been normalized out (using `and`).\n| constraint target      | The LHS of a constraint is called the _constraint target_.  Usually, this is the name of a particular attribute in the target model (or column in the target table, if this is stage 3).\n| constraint modifier    | A _complex constraint modifier_ (or simply a _modifier_) is a key/value pair within a complex constraint, where the key is one of a special list of legal operators such as `nin`, `in`, `contains`, `!`, `>=`, etc.  A modifier impacts how values for a particular attribute name (or column name) will be qualified.  The data type for a particular modifier depends on the modifier.  For example, a modifier for key `in` or `nin` must be an array, but a modifier for key `contains` must be either a string or number.\n\n\n```javascript\n// Example: Look up records whose name contains \"Ricky\", as well as being prefixed or suffixed\n// with some sort of formal-sounding title.\nwhere: {\n  and: [\n    { name: {contains: 'Ricky'} },\n    {\n      or: [\n        { name: {endsWith: 'Esq.'} },\n        { name: {endsWith: 'Jr.'} },\n        { name: {endsWith: 'Sr.'} },\n        { name: {endsWith: 'II'} },\n        { name: {endsWith: 'III'} },\n        { name: {endsWith: 'IV'} },\n        { name: {startsWith: 'Dr.'} }\n        { name: {startsWith: 'Miss'} }\n        { name: {startsWith: 'Ms.'} }\n        { name: {startsWith: 'Mrs.'} }\n        { name: {startsWith: 'Mr.'} },\n        { name: {startsWith: 'Rvd.'} }\n      ]\n    }\n  ]\n}\n```\n\n\n\n### Example of iterating over a `where` clause from the criteria of a stage 2 query\n\nSee https://gist.github.com/mikermcneil/8252ce4b7f15d9e2901003a3a7a800cf.\n\n\n\n## Associations\n\n### Broad classifications of associations:\n\n+ singular (association which declares `model`)\n+ plural (association which declares `collection`)\n\n*There is also a distinction between one-way and two-way associations:*\n\n\"Two-way\" just means that there's another \"side\" to the association-- i.e. that, if you change the association, the expected results when you populate the other side of the association change-- _automatically_ (and in some cases, they actually change at the physical layer when you make the original change).  \"One-way\" means that there is no other side.  If you change a one-way association, no other associations are affected.\n\nThere are three different kinds of two-way associations, and two different kinds of one-way associations.  Here they are:\n\n### The various kinds of two-way associations:\n\n+ plural, two-way, *exclusive*   (plural association whose `via` is pointing at a singular association on the other side)\n+ singular, two-way (singular association who is pointed at on the other side by a plural association w/ `via`)\n+ plural, two-way, *shared*  (plural association whose `via` is pointing at a plural association on the other side with a matching `via`)\n\n### The various kinds of one-way associations:\n\n+ singular, one-way  (singular association who is NOT pointed at by any `via`)\n+ plural, one-way (plural association without a `via` of its own, and which is NOT pointed at by `via` on the other side)\n\n\n\n\n\n## Adapters & auto-migrations\n\nAuto-migrations are now handled outside of Waterline core.\n\nNotes for adapter maintainers who implement `define` et al:\n\n\n\n##### Reserved column types\n\nWhen interpeting `autoMigrations.columnType`, there are a few special reserved column types to be aware of, that should always be handled:\n  + `_numberkey` _(e.g. you might understand this as \"INTEGER\")_\n  + `_stringkey` _(e.g. you might understand this as \"VARCHAR(255)\")_\n  + `_numbertimestamp` _(e.g. you might understand this as \"BIGINTEGER\" -- this is for JS timestamps (epoch ms))_\n  + `_stringtimestamp` _(e.g. you might understand this as \"VARCHAR(14)\")_\n  + `_string`  _(e.g. you might understand this as \"TEXT\")_\n  + `_number`  _(e.g. you might understand this as \"DOUBLE\")_\n  + `_boolean` _(e.g. you might understand this as \"TINYINT\")_\n  + `_json`  _(e.g. you might understand this as \"TEXT\" in MySQL, or \"JSON\" in PostgreSQL)_\n  + `_ref` _(non-JSON-structured data that may or may not be serializable in adapter-specific ways; e.g. you might understand this as \"TEXT\".)_\n\nThese (^^) are the different core Waterline logical data types, but prefixed by underscore (e.g. `_string`) AS WELL AS two special reserved column types (`_numberkey` and `_stringkey`).  These two additional column types are used for primary key and foreign key (singular association) values.  Note that foreign key values could also be null.\n\n##### Unrecognized column types\n\nIf `autoMigrations.columnType` for a given attribute is unrecognized for your database, then fail with an error.\n\n\n\n\n## Special cases / FAQ\n\n##### _What is an \"exclusive\" association?_\n\nIt just means a plural association with the special restriction that no two records can have the same associated child records in it.\n\n> This is vs. a \"shared\" association, which is what we call any plural association that is non-exclusive, as per this definition.\n\n##### _What about *through* associations?_\n\nA *through* association is a subgenre of plural, two-way, shared associations, where you actually can set up the junction model as one of the models in your app-level code.\n\n\n##### _What about *reflexive* associations?_\n\nA **reflexive** association is just any association where the associated model is the same as the parent model.\n\n\n##### _What about if you have a plural association with `via` pointed at another plural association, but there is no via on the other side?_\n\nThat's an error (i.e. in waterline-schema).\n\n\n\n\n## Required vs allowNull vs. defaultsTo vs. autoCreatedAt vs. autoUpdatedAt\n\nThough relatively simple from the perspective of userland, this gets a bit complicated internally in Waterline.\n\nFor details, see https://docs.google.com/spreadsheets/d/1whV739iW6O9SxRZLCIe2lpvuAUqm-ie7j7tn_Pjir3s/edit#gid=1814738146\n\n\n\n\n## Errors\n\n| Error `name`            | Meaning                                                        |\n|:------------------------|:---------------------------------------------------------------|\n| UsageError              | Bad usage, caught by Waterline core                            |\n| AdapterError            | Something went wrong in the adapter (e.g. uniqueness constraint violation)    |\n| PropagationError        | A conflict was detected while making additional, internal calls to other model methods within Waterline core (e.g. `replaceCollection()` could not update a required null foreign key, or a conflict was encountered while performing \"cascade\" polyfill for a `.destroy()`)   |\n| _anything else_         | Something unexpected happened     |\n\n\n\n\n\n\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 13.2529296875,
          "content": "# Waterline Changelog\n\n### Edge\n\n##### General\n* [BUGFIX] Fix .archive() and .archiveOne() when using custom column names  (#1616)\n* [BREAKING] Waterline attribute names must now be [ECMAScript 5.1-compatible variable names](https://github.com/mikermcneil/machinepack-javascript/blob/3786c05388cf49220a6d3b6dbbc1d80312d247ec/machines/validate-varname.js#L41).\n  + Custom column names can still be configured to anything, as long as it is supported by the underlying database.\n* [BREAKING] Breaking changes to criteria usage:\n  + For performance, criteria passed in to Waterline's model methods will now be mutated in-place in most situations (whereas in Sails/Waterline v0.12, this was not necessarily the case.)\n  + Aggregation clauses (`sum`, `average`, `min`, `max`, and `groupBy`) are no longer supported in criteria.  Instead, see new model methods.\n  + `limit: 0` **no longer does the same thing as `limit: undefined`**.  Instead of matching ∞ results, it now matches 0 results.\n  + `skip: -20` **no longer does the same thing as `skip: undefined`**.  Instead of skipping zero results, it now refuses to run with an error.\n  + Limit must be < Number.MAX_SAFE_INTEGER (...with one exception: for compatibility/convenience, `Infinity` is tolerated and normalized to `Number.MAX_SAFE_INTEGER` automatically.)\n  + Skip must be < Number.MAX_SAFE_INTEGER\n  + Criteria dictionaries with a mixed `where` clause are no longer supported.\n    + e.g. instead of `{ username: 'santaclaus', limit: 4, select: ['beardLength', 'lat', 'long']}`,\n    + use `{ where: { username: 'santaclaus' }, limit: 4, select: ['beardLength', 'lat', 'long'] }`.\n    + Note that you can still do `{ username: 'santaclaus' }` as shorthand for `{ where: { username: 'santaclaus' } }` -- it's just that you can't mix other top-level criteria clauses (like `limit`) alongside constraints (e.g. `username`).\n    + And as for anywhere you're building criteria using Waterline's chainable deferred object, then don't worry about this-- it's taken care of for you.\n* [DEPRECATE] Deprecated criteria usage:\n  + Avoid specifying a limit of < 0.  It is still ignored, and acts like `limit: undefined`, but it now logs a deprecation warning to the console.\n* [BREAKING] With the major exception of `.populate()`, repeated use of any other one chainable query method like `.sort()`, `.where()`, `.set()`, `.meta()`, etc is no longer supported. For example, you should not do: `User.find().where({username: 'santaclaus'}).where({location: 'north pole'})`\n* [BREAKING] Coercion of result records\n  + Resulting records from calling model methods are no longer special instances-- they are just dictionaries (plain JavaScript objects)\n  + There are now warning messages for some common problematic results from the adapter. This is designed to make it easier to catch schema migration issues, as well as to identify adapter bugs.\n\n\n##### Automigrations\n* [BREAKING] Automigrations now live outside of Waterline core (in waterline-util)\n  + Remove `index` for automigrations\n  + In core SQL adapters, `.create()` and `.createEach()` no longer deals with updating the current autoincrement sequence (the \"next value to use\") when a record with a greater value is explicitly created\n\n##### Data types\n* The data types in Waterline have changed to more closely reflect their purpose: validation and coercion of JavaScript values. This drastically reduced the number of types to just 5: string, number, boolean, json, and ref.\n* To allow for flexibility in automigrations, attributes may also specify a new key, `columnType`. If specified, the `columnType` is sent to the appropriate adapter during automigration (in sails-hook-orm). This allows Sails/Waterline models to indicate how the values for individual attributes should be stored _at rest_ vs. how they are validated/coerced when your code calls `.create()` or `.update()`.\n* All documented previously-supported types are checked for and adjusted if possible (in sails-hook-orm), but if you are using a custom type, you may need to choose an appropriate `type` and `columnType`.\n* `defaultsTo` can no longer be specified as a function. In practice, this can lead to unintended consequences, and its implementation was adding considerable weight and complexity to Waterline (without a whole lot of tangible benefit).\n* Optional attributes with no value specified are no longer necessarily stored as `null`. If they are set to `type: 'json'` or `type: 'ref'`, and there is no `defaultsTo`, then `null` is stored. But, if an attribute declares itself as `type: 'string'`, then when a record is created without specifying a value for that attribute, it is stored as `''` (empty string). Similarly, `type: 'number'` is stored as `0`, and `type: 'boolean'` as `false`. To represent an attribute which might be `null` or a string, use `type: 'json'` (combining it with the new `isString` validation rule, if you like).\n\n##### Model methods\n+ Revamped [.stream()](http://sailsjs.com/documentation/reference/waterline-orm/models/stream)\n  + Simplify interface and remove reliance on emitters in favor of [adapter-agnostic batch processing](https://gitter.im/balderdashy/sails?at=58655edd9d4cc4fc53553d51).\n  + Add support for `.populate()`\n  + Now supports batch-at-a-time or record-at-a-time iteration.\n\n\n##### `required` & `allowNull`\n\n* [BREAKING] Standardizing the definition of `required`\n  + If an attribute specifies itself as `required`, it means that a value for the attribute must be _defined_ when using Waterline to do a `.create()`.\n  + For example, if `foo` is a required attribute, then passing in `foo: undefined` or omitting `foo` on a `.create()` would fail the required check.\n  + In addition, trying to .create() OR .update() the value as either `''` (empty string) or `null` would fail the required check.\n+ If an attribute specifies itself as `type: 'string'`, then if a value for that attr is explicitly provided as `null` in a `.create()` or `.update()`, it will **no longer be allowed through**-- regardless of the attribute's `required` status.\n+ Other types (json and ref) allow `null` out of the box.  To support a string attribute which might be `null`, you'll want to set the attribute to `type: 'json'`.  If you want to prevent numbers, booleans, arrays, and dictionaries, then you'll also want to add the `isString: true` validation rule.\n+ For more information and a reference of edge cases, see https://docs.google.com/spreadsheets/d/1whV739iW6O9SxRZLCIe2lpvuAUqm-ie7j7tn_Pjir3s/edit#gid=1927470769\n\n\n### 0.12.2\n\n* [BUGFIX] Fix issues with compatibility in alter auto-migrations. This was causing corrupted data depending on the permutation of adapter version and Waterline version. This should be fixed in the SQL adapters that support the new select query modifier.\n\n* [ENHANCEMENT] Updated dependencies to remove warning messages when installing.\n\n### 0.12.1\n\n* [BUGFIX] Fixes an issue when searching by `id` in schemaless mode. See [#1326](https://github.com/balderdashy/waterline/issues/1326) for more details.\n\n### 0.12.0\n\n* [ENHANCEMENT] Allows attribute definitions to contain a `meta` property that will be passed down to the adapter. This allows arbitrary information about an attribute to be passed down to interactions on the physical storage engine. Going forward any adapter specific migration information should be sent via the `meta` property. See [#1306](https://github.com/balderdashy/waterline/pull/1306) for more information.\n\n* [ENHANCEMENT] Allows for the use of `.select()` to build out projections in both top level queries and association queries. See [#1310](https://github.com/balderdashy/waterline/pull/1310) for more details and examples.\n\n* [ENHANCEMENT] Allow for the ability to pass in extra data to an adapter function using the `.meta()` option. This could be used for a variety of things inside custom adapters such as passing connections around for transactions or passing config values for muti-tenant functionality. For more details see [#1325](https://github.com/balderdashy/waterline/pull/1325).\n\n### 0.11.6\n\n* [BUGFIX] Remove max engines SVR re #1406. Also normalize 'bugs' URL, and chang…  …     [d89d2a6](https://github.com/balderdashy/waterline/commit/d89d2a6)\n* [INTERNAL] Add latest Node versions, and add 0.11.x branch to CI whitelist.      [ca0814e](https://github.com/balderdashy/waterline/commit/ca0814e)\n* [INTERNAL] Add appveyor.yml for running tests on Windows.      [c88cfa7](https://github.com/balderdashy/waterline/commit/c88cfa7)\n\n### 0.11.5\n\n* [BUGFIX] Fix join table mapping for 2-way collection assocations (i.e. \"many to many\"), specifically in the case when a `through` model is being used, and custom column names are configured.  Originally identified in [this StackOverflow question](http://stackoverflow.com/questions/37774857/sailsjs-through-association-how-to-create-association)  (Thanks [@ultrasaurus](https://github.com/ultrasaurus)!)   [8b46f0f](https://github.com/balderdashy/waterline/commit/8b46f0f), [1f4ff37](https://github.com/balderdashy/waterline/commit/1f4ff37)\n* [BUGFIX] Make `.add()` idempotent in 2-way collection associations -- i.e. don't error out if the join record already exists.  Fixes [#3784](https://github.com/balderdashy/sails/issues/3784 (Thanks [@linxiaowu66](https://github.com/linxiaowu66)!)      [a14d16a](https://github.com/balderdashy/waterline/commit/a14d16a),[5b0ea8b](https://github.com/balderdashy/waterline/commit/5b0ea8b)\n\n### 0.11.4\n\n* [BUGFIX] Fix auto-updating attributes to take into account custom column names. See [#1360](https://github.com/balderdashy/waterline/pull/1360) for more details. Thanks to [@jenjenut233](https://github.com/jenjenut233) for the patch!   Also fixes https://github.com/balderdashy/sails/issues/3821.\n\n### 0.11.2\n\n* [BUGFIX] Fixes an issue when searching by `id` in schemaless mode. See [#1326](https://github.com/balderdashy/waterline/issues/1326) for more details.\n\n### 0.11.1\n\n* [ENHANCEMENT] Handles fatal errors in validations better and returns clearer error messages for them. Who knew crashing the process would be bad? Thanks [@mikermcneil](https://github.com/mikermcneil)\n\n### 0.11.0\n\n* [BREAKING CHANGE] Removed the second argument from `.save()` commands that returns the newly updated data that has been re-populated. This should increase performance and limit memory. See [#1295](https://github.com/balderdashy/waterline/pull/1295) for more details.\n\n* [ENHANCEMENT] Errors coming from `.save()` now return actual Error objects that have been extended from `WLError`.\n\n* [BUGFIX] Fixes issue with dynamic finders not understanding custom `columnName` attributes. See [#1298](https://github.com/balderdashy/waterline/pull/1298) for more details. Thanks [@HaKr](https://github.com/HaKr) for the detailed test case.\n\n* [ENHANCEMENT] Auto timestamps column names are now overridable. See[#946](https://github.com/balderdashy/waterline/pull/946) for more details. Thanks [@Esya](https://github.com/Esya) for the patch.\n\n* [ENHANCEMENT] Add support for an array of values to be passed into `populate`. ex `.populate(['foo', 'bar'])`. See [#1190](https://github.com/balderdashy/waterline/pull/1190) for more details. Thanks [@luislobo](https://github.com/luislobo) for the patch.\n\n* [ENHANCEMENT] Ensures that createdAt and updatedAt are always the exact same on `create`. See [#1201](https://github.com/balderdashy/waterline/pull/1201) for more details. Thanks [@ziacik](https://github.com/ziacik) for the patch.\n\n* [BUGFIX] Fixed issue with booleans not being cast correctly for validations. See [#1225](https://github.com/balderdashy/waterline/pull/1225) for more details. Thanks [@edupsousa](https://github.com/edupsousa) for the patch.\n\n* [BUGFIX] Fixed bug where dates as primary keys would fail serialization. See [#1269](https://github.com/balderdashy/waterline/pull/1269) for more details. Thanks [@elennaro](https://github.com/elennaro) for the patch.\n\n* [BUGFIX] Update support and patch some bugs in Many-To-Many through associations. See [#1134](https://github.com/balderdashy/waterline/pull/1134) for more details. Thanks [@atiertant](https://github.com/atiertant) for the patch.\n\n\n### 0.10.30\n\n* [BUGFIX] Fix issue with maximum callstack when using dates as foreign keys. See [#1265](https://github.com/balderdashy/waterline/issues/1265) for more details. Thanks [@elennaro](https://github.com/elennaro) for the patch.\n\n### 0.10.29\n\n* [ENHANCEMENT] Update version of Anchor to fix issue with email validations\n\n### 0.10.28\n\n* [BUGFIX] Fix issue with `through` table joins. See [#1134](https://github.com/balderdashy/waterline/pull/1134) for more details. Thanks [@atiertant](https://github.com/atiertant) for the patch!\n\n* [ENHANCEMENT] Bump version of [Waterline-Schema](https://github.com/balderdashy/waterline-schema) to the latest.\n\n* [ENHANCEMENT] Update Travis tests to run on Node 4 and 5.\n\n### 0.10.27\n\n* [BUGFIX] Fix issue with invalid `in` criteria removing more data than it should. See [#1076](https://github.com/balderdashy/waterline/pull/1076) for more details. Thanks [@slester](https://github.com/slester) for the patch!\n\n### 0.10.26\n\n* [BUGFIX] Fix issue with `defaultsTo` not setting values for undefined values.\n\n### 0.10.25 and earlier?\n\nSee https://github.com/balderdashy/waterline/commits/f5efc0349fe9594a962357287bb6c25acdda9a76.\n\n> #### Earlier still?\n>\n> For the first year or so, Waterline lived in the main Sails repo.  See https://github.com/balderdashy/sails/commits/master?after=q8Jnoggc%2F%2B7O7021adjRanuRhssrNDM3NA%3D%3D and back.\n\n\n"
        },
        {
          "name": "CODE-OF-CONDUCT.md",
          "type": "blob",
          "size": 0.1318359375,
          "content": "# Code of Conduct\n\nWaterline follows the [Sails Code of Conduct](https://github.com/balderdashy/sails/blob/master/CODE-OF-CONDUCT.md).\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.044921875,
          "content": "# Contributing to Waterline\n\nWaterline follows the [Sails Contribution Guide](https://github.com/balderdashy/sails/blob/master/CONTRIBUTING.md).\n\nThe Contribution Guide is designed to help you get off the ground quickly contributing to Waterline. Reading it thoroughly will help you write useful issues, make eloquent proposals, and submit top-notch code that can be merged quickly. Respecting the guidelines laid out in the guide helps make the core maintainers of Waterline more productive, and makes the experience of working with Waterline positive and enjoyable for the community at large.\n\nIf you are working on a pull request, **please carefully read this file from top to bottom**. In case of doubt, open an issue in the issue tracker or contact someone from our [core team](https://github.com/balderdashy/sails#team) on Twitter. Especially do so if you plan to work on something big. Nothing is more frustrating than seeing your hard work go to waste because your vision does not align with planned or ongoing development efforts of the project's maintainers.\n\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.08984375,
          "content": "The MIT License (MIT)\n--\n\nCopyright © 2012-present Mike McNeil & The Sails Company\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.3974609375,
          "content": "# [<img title=\"waterline-logo\" src=\"http://i.imgur.com/3Xqh6Mz.png\" width=\"610px\" alt=\"Waterline logo\"/>](http://waterlinejs.org)\n\n[![Master Branch Build Status](https://travis-ci.org/balderdashy/waterline.svg?branch=master)](https://travis-ci.org/balderdashy/waterline)\n[![Master Branch Build Status (Windows)](https://ci.appveyor.com/api/projects/status/tdu70ax32iymvyq3?svg=true)](https://ci.appveyor.com/project/mikermcneil/waterline)\n[![StackOverflow (waterline)](https://img.shields.io/badge/stackoverflow-waterline-blue.svg)]( http://stackoverflow.com/questions/tagged/waterline)\n[![StackOverflow (sails)](https://img.shields.io/badge/stackoverflow-sails.js-blue.svg)]( http://stackoverflow.com/questions/tagged/sails.js)\n\nWaterline is a next-generation storage and retrieval engine, and the default ORM used in the [Sails framework](https://sailsjs.com).\n\nIt provides a uniform API for accessing stuff from different kinds of [databases and protocols](https://sailsjs.com/documentation/concepts/extending-sails/adapters/available-adapters). That means you write the same code to get and store things like users, whether they live in MySQL, MongoDB, neDB, or Postgres.\n\nWaterline strives to inherit the best parts of ORMs like ActiveRecord, Hibernate, and Mongoose, but with a fresh perspective and emphasis on modularity, testability, and consistency across adapters.\n\n## No more callbacks\n\nStarting with v0.13, Waterline takes full advantage of ECMAScript & Node 8's `await` keyword.\n\n**In other words, [no more callbacks](https://gist.github.com/mikermcneil/c1028d000cc0cc8bce995a2a82b29245).**\n\n```js\nvar newOrg = await Organization.create({\n  slug: 'foo'\n})\n.fetch();\n```\n\n> Looking for the version of Waterline used in Sails v0.12?  See the [0.11.x branch](https://github.com/balderdashy/waterline/tree/0.11.x) of this repo.  If you're upgrading to v0.13 from a previous release of Waterline _standalone_, take a look at the [upgrading guide](http://sailsjs.com/documentation/upgrading/to-v-1-0).\n\n## Installation\nInstall from NPM.\n\n```bash\n  $ npm install waterline\n```\n\n## Overview\nWaterline uses the concept of an adapter to translate a predefined set of methods into a query that can be understood by your data store. Adapters allow you to use various datastores such as MySQL, PostgreSQL, MongoDB, Redis, etc. and have a clear API for working with your model data.\n\nWaterline supports [a wide variety of adapters](http://sailsjs.com/documentation/concepts/extending-sails/adapters/available-adapters), both core and community maintained.\n\n## Usage\n\nThe up-to-date documentation for Waterline is maintained on the [Sails framework website](http://sailsjs.com).\nYou can find detailed API reference docs under [Reference > Waterline ORM](http://sailsjs.com/documentation/reference/waterline-orm).  For conceptual info (including Waterline standalone usage), and answers to common questions, see [Concepts > Models & ORM](https://sailsjs.com/documentation/concepts/models-and-orm).\n\n#### Help\n\nCheck out the recommended [community support options](http://sailsjs.com/support) for tutorials and other resources.  If you have a specific question, or just need to clarify [how something works](https://docs.google.com/drawings/d/1u7xb5jDY5i2oeVRP2-iOGGVsFbosqTMWh9wfmY3BTfw/edit), ask [for help](https://gitter.im/balderdashy/sails) or reach out to the [core team](http://sailsjs.com/about) [directly](http://sailsjs.com/flagship).\n\nYou can keep up to date with security patches, the Waterline release schedule, new database adapters, and events in your area by following us ([@sailsjs](https://twitter.com/sailsjs)) on Twitter.\n\n## Bugs &nbsp; [![NPM version](https://badge.fury.io/js/waterline.svg)](http://npmjs.com/package/waterline)\nTo report a bug, [click here](http://sailsjs.com/bugs).\n\n## Contribute\nPlease observe the guidelines and conventions laid out in our [contribution guide](http://sailsjs.com/documentation/contributing) when opening issues or submitting pull requests.\n\n#### Tests\nAll tests are written with [mocha](https://mochajs.org/) and should be run with [npm](https://www.npmjs.com/):\n\n``` bash\n  $ npm test\n```\n\n\n## License\n[MIT](http://sailsjs.com/license). Copyright © 2012-present Mike McNeil & The Sails Company\n\n[Waterline](http://waterlinejs.org), like the rest of the [Sails framework](https://sailsjs.com), is free and open-source under the [MIT License](https://sailsjs.com/license).\n\n![image_squidhome@2x.png](http://sailsjs.com/images/bkgd_squiddy.png)\n"
        },
        {
          "name": "ROADMAP.md",
          "type": "blob",
          "size": 10.765625,
          "content": "# Waterline Roadmap\n\nThis file contains the development roadmap for the upcoming release of Waterline, as well as the project backlog.\n\n&nbsp;\n&nbsp;\n\n\n## v0.13\n\nThis section includes the main features, enhancements, and other improvements tentatively planned or already implemented for the v0.13 release of Waterline.  Note that this is by no means a comprehensive changelog or release plan and may exclude important additions, bug fixes, and documentation tasks; it is just a reference point.  Please also realize that the following notes may be slightly out of date-- until the release is finalized, API changes, deprecation announcements, additions, etc. are all tentative.\n\n + Pull out auto-migrations into https://github.com/balderdashy/sails-hook-orm\n + Remove the 2nd argument to the .exec() callback from `.update()`.\n   + e.g. `PetStore.update({}).exec(function (err) {  })`\n  + This is for performance: currently, the expected behavior forces many adapters to do an extra query, with no easy workaround.\n + Remove the 1st argument to `afterDestroy` and `afterUpdate` lifecycle callbacks\n + Update docs\n  + Document adapter spec in detail, including the `join` method and how it's used.\n\n\n&nbsp;\n&nbsp;\n\n\n## Backlog\n\nThe backlog consists of approved proposals for useful features which are not currently in the immediate-term roadmap above, but would be excellent places to contribute code to Waterline. We would exuberantly accept a pull request implementing any of the items below, so long as it was accompanied with reasonable tests that prove it, and it doesn't break other core functionality. Please see the Sails/Waterline [contribution guide](https://github.com/balderdashy/sails/blob/master/CONTRIBUTING.md) to get started.\n\n> - If you would like to see a new feature or an enhancement to an existing feature in Waterline, please review the [Sails/Waterline contribution guide](https://github.com/balderdashy/sails/blob/master/CONTRIBUTING.md). When you are ready, submit a pull request adding a new row to the bottom of this table.\n> - In your pull request, please include a detailed proposal with a short summary of your use case, the reason why you cannot implement the feature as an adapter, and a well-reasoned explanation of how you think that feature could be implemented.  Your proposal should include changes or additions to usage, expected return values, and any errors or exit conditions.\n> - Once your pull request has been created, add an additional commit which links to it from your new row in the table below.\n\n\n\nFeature                                          | Proposal                                                                              | Summary\n :---------------------------------------------- | :------------------------------------------------------------------------------------ | :----------------------------------------------------------------------------------------------------------\n Pass criteria into `beforeUpdate` and `beforeDestroy` lifecycle callbacks, and allow them to modify it.         | [#1122](https://github.com/balderdashy/waterline/pull/1122)                           | Pass the queries criteria into lifecycle hooks.\n\n\n\n&nbsp;\n&nbsp;\n\n\n## Pending Proposals\n\nThe backlog items below are from before the recent change to the Waterline project's contribution guidelines, and are suggestions for features or enhancements, but are not yet accompanied by a complete proposal.  Before any of the following backlog items can be implemented or a pull request can be merged, a detailed proposal needs to be submitted, discussed and signed off on by the project maintainers.  For information on writing a proposal, see the [Sails/Waterline contribution guide](https://github.com/balderdashy/sails/blob/master/CONTRIBUTING.md).  **Please do not submit a pull request _adding_ to this section.**\n\n> - If you are the original proposer of one of these items, someone from the core team has contacted you in the linked issue or PR, if one was provided. Thank you for your help!\n> - If you are interested in seeing one of the features or enhancements below in Sails core, please create a new pull request moving the relevant item(s) to the backlog table with additional details about your use case (see the updated contribution guide for more information).\n\n\nFeature                                                     | Summary\n :--------------------------------------------------------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n Support the full Bluebird API                              | Support the full bluebird API. See this [issue](https://github.com/balderdashy/waterline/issues/1232) for more details.\n Support for custom indexes                                 | Support custom and composite indexes. See this [issue](https://github.com/balderdashy/waterline/issues/109) for more details.\n Support for concurrency locking                            | Prevent multiple users from accidentally overwriting each other's updates. See this [issue](https://github.com/balderdashy/waterline/issues/1259) for more details.\n Better batch insert queries                                | Optimize `create` using the adapter's `createEach` when this possible. See this [issue](https://github.com/balderdashy/waterline/issues/1007) for more details.\n Add support for populating primary keys only               | Return an array of the child's primary keys. See this [issue](https://github.com/balderdashy/waterline/issues/532) for more details.\n Support for polymorphic associations                       | Support polymorphic associations. See this [issue](https://github.com/balderdashy/waterline/issues/484) for more details.\n Populate performance improvements                          | Make populate run faster with less memory usage. See this [issue](https://github.com/balderdashy/waterline/issues/343) for more details.\n Add where `empty`/ `not empty` criteria                    | Support `where empty` / `where not empty` criteria modifiers. See this [issue](https://github.com/balderdashy/waterline/issues/189) for more details.\n Add a cache mechanism                                      | Add the ability to cache ORM results. See this [issue](https://github.com/balderdashy/waterline/issues/200) for more details.\n Add the ability to toggle case sensitivity in queries      | Add the ability to select a case sensitivity when running a query. See this [issue](https://github.com/balderdashy/waterline/issues/239) for more details.\n Add cascading delete support                               | Add the ability to do cascading deletes. See this [issue](https://github.com/balderdashy/waterline/issues/251) for more details.\n Deeper association criteria modifiers                      | Add the ability to filter parent records using child attribute criteria. See this [issue](https://github.com/balderdashy/waterline/issues/266) for more details.\n Support upsert queries                                     | Add support for `upsert` to create a new record if no matches were found.\n Add population count                                       | Add syntax for getting the count of populated records rather than the values. See this [issue](https://github.com/balderdashy/waterline/issues/811) for more details.\n Support denormalization                                    | Support embeddable association. See this [PR](https://github.com/balderdashy/waterline/pull/428) for more details.\n Support default conditions                                 | Support default conditions in queries. See this [issue](https://github.com/balderdashy/waterline/issues/988) for more details.\n Make m:n nested updates API consistent with 1:1 and 1:M    | Nested updates in the form of `User.update({id: 1 }, { posts: [ { id: 1, title: 'Test post - updated' }] })` work for 1:1 and 1:M associations but breaks for M:N associations. The API for this should be consistent between association types. See [tests](https://github.com/balderdashy/waterline-adapter-tests/pull/51) for more details.\n Support explicit `in` key in query language                | Add support for an explicit `in` key to work alongside using an array. See this [issue](https://github.com/balderdashy/waterline/issues/1186) for more details.\n Support deeper M:M through options                         | Add the ability for `through` tables to support multiple associations. See this [issue](https://github.com/balderdashy/waterline/issues/705) for more details.\n Transactions                                               | Add the ability to run transactions on adapters that support them. See this [issue](https://github.com/balderdashy/waterline/issues/755) for more details.\n Change the `this` context inside lifecycle callbacks       | Currently the `this` context is the generic collection instead of the instance (no instance has been made yet). Change this to get access to instance methods. See [issue](https://github.com/balderdashy/waterline/issues/1210) for more details.\n Run lifecycle callbacks on defined join tables             | Lifecycle callbacks don't run for join table records. See [issue](https://github.com/balderdashy/waterline/issues/1215) for more details.\n Do not mess with identity case                             | Identities of models should not be lowercased per default, better be left as defined. See [issue](https://github.com/balderdashy/waterline/issues/745) for more details.\n Support JSONB in PostgreSQL                                | Add support for JSONB querying in the Postgres adapter. This requires modifing/extending the criteria language. See [issue](https://github.com/balderdashy/sails-postgresql/issues/212) for more details.\n Deep populate                                   | [#1052](https://github.com/balderdashy/waterline/pull/1052)                           | Recursively populate child associations.\n\n\n\n\n&nbsp;\n&nbsp;\n\n\n## Experimental features\n\nBelow, you'll find a handful of experimental features.  If you're interested in them, please try them out and provide [feedback](http://twitter.com/sailsjs)!  It helps the core team and other open-source contributors from the community prioritize our efforts, and it lets us know what works and what doesn't.  (As always, we welcome your [contributions](http://sailsjs.com/contribute)!)\n\n> Please be aware that these are in the early stages and should not be relied upon\n> as production features of Waterline.  They could change at any time-- even on a patch\nrelease!  **You have been warned!**\n\n#### Experimental lifecycle and accessor methods\n\n```js\nvar Waterline = require('waterline');\n```\n\n+ `Waterline.start(opts, function(err, orm) { /*...*/ })`\n+ `Waterline.stop(orm, function(err) { /*...*/ })`\n+ `Waterline.getModel(modelIdentity, orm)`\n\n> For detailed usage, see the source code (bottom of `lib/waterline.js` in this repo.)\n"
        },
        {
          "name": "accessible",
          "type": "tree",
          "content": null
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 1.5625,
          "content": "# # # # # # # # # # # # # # # # # # # # # # # # # #\n#  ╔═╗╔═╗╔═╗╦  ╦╔═╗╦ ╦╔═╗╦═╗ ┬ ┬┌┬┐┬              #\n#  ╠═╣╠═╝╠═╝╚╗╔╝║╣ ╚╦╝║ ║╠╦╝ └┬┘││││              #\n#  ╩ ╩╩  ╩   ╚╝ ╚═╝ ╩ ╚═╝╩╚═o ┴ ┴ ┴┴─┘            #\n#                                                 #\n# This file configures Appveyor CI.               #\n# (i.e. how we run the tests on Windows)          #\n#                                                 #\n# https://www.appveyor.com/docs/lang/nodejs-iojs/ #\n# # # # # # # # # # # # # # # # # # # # # # # # # #\n\n\n# Test against these versions of Node.js.\nenvironment:\n  matrix:\n    - nodejs_version: \"6\"\n    - nodejs_version: \"8\"\n    - nodejs_version: \"10\"\n\n# Install scripts. (runs after repo cloning)\ninstall:\n  # Get the latest stable version of Node.js\n  # (Not sure what this is for, it's just in Appveyor's example.)\n  - ps: Install-Product node $env:nodejs_version\n  # Install declared dependencies\n  - npm install\n\n\n# Post-install test scripts.\ntest_script:\n  # Output Node and NPM version info.\n  # (Presumably just in case Appveyor decides to try any funny business?\n  #  But seriously, always good to audit this kind of stuff for debugging.)\n  - node --version\n  - npm --version\n  # Run the actual tests.\n  - npm run custom-tests\n\n\n# Don't actually build.\n# (Not sure what this is for, it's just in Appveyor's example.\n#  I'm not sure what we're not building... but I'm OK with not\n#  building it.  I guess.)\nbuild: off\n"
        },
        {
          "name": "bower.json",
          "type": "blob",
          "size": 0.5166015625,
          "content": "{\n  \"name\": \"waterline\",\n  \"homepage\": \"https://github.com/balderdashy/waterline\",\n  \"authors\": [\n    \"Cody Stoltman <@particlebanana>\",\n    \"Mike McNeil <@mikermcneil>\"\n  ],\n  \"description\": \"JavaScript ORM for the browser and Node.js\",\n  \"main\": \".dist/waterline.min.js\",\n  \"keywords\": [\n    \"orm\",\n    \"models\",\n    \"collections\",\n    \"mvc\",\n    \"sails\"\n  ],\n  \"license\": \"MIT\",\n  \"ignore\": [\n    \"**/.*\",\n    \"example\",\n    \"lib\",\n    \"package.json\",\n    \"node_modules\",\n    \"bower_components\",\n    \"test\",\n    \"tests\"\n  ]\n}\n"
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.484375,
          "content": "{\n  \"name\": \"waterline\",\n  \"description\": \"An ORM for Node.js and the Sails framework\",\n  \"version\": \"0.15.2\",\n  \"homepage\": \"http://waterlinejs.org\",\n  \"contributors\": [\n    {\n      \"name\": \"seerepo\",\n      \"github\": \"https://github.com/balderdashy/waterline/graphs/contributors\"\n    }\n  ],\n  \"dependencies\": {\n    \"@sailshq/lodash\": \"^3.10.2\",\n    \"anchor\": \"^1.2.0\",\n    \"async\": \"2.6.4\",\n    \"encrypted-attr\": \"1.0.6\",\n    \"flaverr\": \"^1.9.2\",\n    \"lodash.issafeinteger\": \"4.0.4\",\n    \"parley\": \"^3.3.2\",\n    \"rttc\": \"^10.0.0-1\",\n    \"waterline-schema\": \"^1.0.0-20\",\n    \"waterline-utils\": \"^1.3.7\"\n  },\n  \"devDependencies\": {\n    \"eslint\": \"4.11.0\",\n    \"mocha\": \"3.0.2\"\n  },\n  \"keywords\": [\n    \"mvc\",\n    \"orm\",\n    \"mysql\",\n    \"postgresql\",\n    \"redis\",\n    \"mongodb\",\n    \"active-record\",\n    \"waterline\",\n    \"sails\",\n    \"sails.js\"\n  ],\n  \"repository\": \"git://github.com/balderdashy/waterline.git\",\n  \"main\": \"./lib/waterline\",\n  \"scripts\": {\n    \"test\": \"nodever=`node -e \\\"console.log('\\\\`node -v\\\\`'[1]);\\\"` && if [ $nodever != \\\"0\\\" ]; then npm run lint; fi && npm run custom-tests\",\n    \"custom-tests\": \"node ./node_modules/mocha/bin/mocha test --recursive\",\n    \"lint\": \"node ./node_modules/eslint/bin/eslint . --max-warnings=0 --ignore-pattern 'test/'\",\n    \"browserify\": \"rm -rf .dist && mkdir .dist && browserify lib/waterline.js -s Waterline | uglifyjs > .dist/waterline.min.js\"\n  },\n  \"engines\": {\n    \"node\": \">=4\"\n  },\n  \"bugs\": {\n    \"url\": \"https://sailsjs.com/bugs\"\n  },\n  \"license\": \"MIT\"\n}\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}