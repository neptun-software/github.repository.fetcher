{
  "metadata": {
    "timestamp": 1736562640160,
    "page": 135,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "poloclub/cnn-explainer",
      "stars": 8245,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1875,
          "content": ".DS_Store\nnode_modules\npublic/bundle.*\npackage-lock.json\npublic/assets/js/bundle.*\npublic/assets/js/\npublic/assets/css/bundle.*\n*.swp\nyarn.lock\ndist/\nlocal-build/\ntiny-vgg/data/\npnpm-lock.yaml"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.056640625,
          "content": "MIT License\n\nCopyright (c) 2020 Polo Club of Data Science\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.2255859375,
          "content": "# CNN Explainer\n\nAn interactive visualization system designed to help non-experts learn about Convolutional Neural Networks (CNNs)\n\n[![build](https://github.com/poloclub/cnn-explainer/workflows/build/badge.svg)](https://github.com/poloclub/cnn-explainer/actions)\n[![arxiv badge](https://img.shields.io/badge/arXiv-2004.15004-red)](http://arxiv.org/abs/2004.15004)\n[![DOI:10.1109/TVCG.2020.3030418](https://img.shields.io/badge/DOI-10.1109/TVCG.2020.3030418-blue)](https://doi.org/10.1109/TVCG.2020.3030418)\n\n<a href=\"https://youtu.be/HnWIHWFbuUQ\" target=\"_blank\"><img src=\"https://i.imgur.com/sCsudVg.png\" style=\"max-width:100%;\"></a>\n\nFor more information, check out our manuscript:\n\n[**CNN Explainer: Learning Convolutional Neural Networks with Interactive Visualization**](https://arxiv.org/abs/2004.15004).\nWang, Zijie J., Robert Turko, Omar Shaikh, Haekyu Park, Nilaksh Das, Fred Hohman, Minsuk Kahng, and Duen Horng Chau.\n*IEEE Transactions on Visualization and Computer Graphics (TVCG), 2020.*\n\n## Live Demo\n\nFor a live demo, visit: http://poloclub.github.io/cnn-explainer/\n\n## Running Locally\n\nClone or download this repository:\n\n```bash\ngit clone git@github.com:poloclub/cnn-explainer.git\n\n# use degit if you don't want to download commit histories\ndegit poloclub/cnn-explainer\n```\n\nInstall the dependencies:\n\n```bash\nnpm install\n```\n\nThen run CNN Explainer:\n\n```bash\nnpm run dev\n```\n\nNavigate to [localhost:3000](https://localhost:3000). You should see CNN Explainer running in your broswer :)\n\nTo see how we trained the CNN, visit the directory [`./tiny-vgg/`](tiny-vgg).\nIf you want to use CNN Explainer with your own CNN model or image classes, see [#8](/../../issues/8) and [#14](/../../issues/14).\n\n## Credits\n\nCNN Explainer was created by\n<a href=\"https://zijie.wang/\">Jay Wang</a>,\n<a href=\"https://www.linkedin.com/in/robert-turko/\">Robert Turko</a>,\n<a href=\"http://oshaikh.com/\">Omar Shaikh</a>,\n<a href=\"https://haekyu.com/\">Haekyu Park</a>,\n<a href=\"http://nilakshdas.com/\">Nilaksh Das</a>,\n<a href=\"https://fredhohman.com/\">Fred Hohman</a>,\n<a href=\"http://minsuk.com\">Minsuk Kahng</a>, and\n<a href=\"https://www.cc.gatech.edu/~dchau/\">Polo Chau</a>,\nwhich was the result of a research collaboration between\nGeorgia Tech and Oregon State.\n\nWe thank\n[Anmol Chhabria](https://www.linkedin.com/in/anmolchhabria),\n[Kaan Sancak](https://kaansancak.com),\n[Kantwon Rogers](https://www.kantwon.com), and the\n[Georgia Tech Visualization Lab](http://vis.gatech.edu)\nfor their support and constructive feedback.\n\n## Citation\n\n```bibTeX\n@article{wangCNNExplainerLearning2020,\n  title = {{{CNN Explainer}}: {{Learning Convolutional Neural Networks}} with {{Interactive Visualization}}},\n  shorttitle = {{{CNN Explainer}}},\n  author = {Wang, Zijie J. and Turko, Robert and Shaikh, Omar and Park, Haekyu and Das, Nilaksh and Hohman, Fred and Kahng, Minsuk and Chau, Duen Horng},\n  journal={IEEE Transactions on Visualization and Computer Graphics (TVCG)},\n  year={2020},\n  publisher={IEEE}\n}\n```\n\n## License\n\nThe software is available under the [MIT License](https://github.com/poloclub/cnn-explainer/blob/master/LICENSE).\n\n## Contact\n\nIf you have any questions, feel free to [open an issue](https://github.com/poloclub/cnn-explainer/issues/new/choose) or contact [Jay Wang](https://zijie.wang).\n"
        },
        {
          "name": "deploy-gh-page.sh",
          "type": "blob",
          "size": 0.177734375,
          "content": "npm run build\ncp -r ./public/assets ./dist\ncp -r ./public/bundle* ./dist\ncp -r ./public/global.css ./dist\nnpx gh-pages -m \"Deploy $(git log '--format=format:%H' master -1)\" -d ./dist"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.6533203125,
          "content": "{\n  \"name\": \"svelte-app\",\n  \"version\": \"1.0.0\",\n  \"devDependencies\": {\n    \"@rollup/plugin-replace\": \"^2.3.2\",\n    \"gh-pages\": \"^6.0.0\",\n    \"rollup\": \"^1.27.13\",\n    \"rollup-plugin-commonjs\": \"^10.0.0\",\n    \"rollup-plugin-livereload\": \"^1.0.0\",\n    \"rollup-plugin-node-resolve\": \"^5.2.0\",\n    \"rollup-plugin-svelte\": \"~6.1.1\",\n    \"rollup-plugin-terser\": \"^5.1.3\",\n    \"svelte\": \"^3.31.0\"\n  },\n  \"dependencies\": {\n    \"@tensorflow/tfjs\": \"^1.4.0\",\n    \"sirv-cli\": \"^0.4.4\"\n  },\n  \"scripts\": {\n    \"build\": \"rollup -c\",\n    \"dev\": \"rollup -c -w\",\n    \"start\": \"sirv public --single\",\n    \"start:dev\": \"sirv public --single --dev --port 3000\",\n    \"deploy\": \"npx\"\n  }\n}\n"
        },
        {
          "name": "public",
          "type": "tree",
          "content": null
        },
        {
          "name": "rollup.config.js",
          "type": "blob",
          "size": 1.599609375,
          "content": "import svelte from 'rollup-plugin-svelte';\nimport resolve from 'rollup-plugin-node-resolve';\nimport commonjs from 'rollup-plugin-commonjs';\nimport livereload from 'rollup-plugin-livereload';\nimport { terser } from 'rollup-plugin-terser';\nimport rollup_start_dev from './rollup_start_dev';\nimport replace from '@rollup/plugin-replace';\n\nconst production = !process.env.ROLLUP_WATCH;\n\nexport default {\n\tinput: 'src/main.js',\n\toutput: {\n\t\tsourcemap: true,\n\t\tformat: 'iife',\n\t\tname: 'app',\n\t\tfile: 'public/bundle.js'\n\t},\n\tplugins: [\n\t\tsvelte({\n\t\t\t// enable run-time checks when not in production\n\t\t\tdev: !production,\n\t\t\t// we'll extract any component CSS out into\n\t\t\t// a separate file — better for performance\n\t\t\tcss: css => {\n\t\t\t\tcss.write('bundle.css');\n\t\t\t}\n\t\t}),\n\n        replace({PUBLIC_URL: production ? '/cnn-explainer' : ''}),\n\n\t\t// If you have external dependencies installed from\n\t\t// npm, you'll most likely need these plugins. In\n\t\t// some cases you'll need additional configuration —\n\t\t// consult the documentation for details:\n\t\t// https://github.com/rollup/rollup-plugin-commonjs\n\t\tresolve({\n\t\t\tbrowser: true,\n\t\t\tdedupe: importee => importee === 'svelte' || importee.startsWith('svelte/')\n\t\t}),\n\t\tcommonjs(),\n\n\t\t// In dev mode, call `npm run start:dev` once\n\t\t// the bundle has been generated\n\t\t!production && rollup_start_dev,\n\n\t\t// Watch the `public` directory and refresh the\n\t\t// browser on changes when not in production\n\t\t!production && livereload('public'),\n\n\t\t// If we're building for production (npm run build\n\t\t// instead of npm run dev), minify\n\t\tproduction && terser()\n\t],\n\twatch: {\n\t\tclearScreen: false\n\t}\n};\n"
        },
        {
          "name": "rollup_start_dev.js",
          "type": "blob",
          "size": 0.2890625,
          "content": "import * as child_process from 'child_process';\n\nlet running_dev_server = false;\n\nexport default {\n\twriteBundle() {\n\t\tif (!running_dev_server) {\n\t\t\trunning_dev_server = true;\n\t\t\tchild_process.spawn('npm', ['run', 'start:dev'], { stdio: ['ignore', 'inherit', 'inherit'], shell: true });\n\t\t}\n\t}\n};\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tiny-vgg",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}