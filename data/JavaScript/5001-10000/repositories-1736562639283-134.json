{
  "metadata": {
    "timestamp": 1736562639283,
    "page": 134,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "WebKit/WebKit",
      "stars": 8245,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".ccls",
          "type": "blob",
          "size": 0.0859375,
          "content": "%compile_commands.json\n%h -x\n%h c++-header\n%h --include=config.h\n%cpp --include=config.h"
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 3.2216796875,
          "content": "---\n# BasedOnStyle:  WebKit\nAccessModifierOffset: -4\nAlignAfterOpenBracket: DontAlign\nAlignConsecutiveAssignments: false\nAlignConsecutiveDeclarations: false\nAlignEscapedNewlines: Right\nAlignOperands:   false\nAlignTrailingComments: false\nAllowAllParametersOfDeclarationOnNextLine: true\nAllowShortBlocksOnASingleLine: false\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: All\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: false\nAlwaysBreakTemplateDeclarations: No\nBinPackArguments: true\nBinPackParameters: true\nBraceWrapping:   \n  AfterClass:      false\n  AfterControlStatement: false\n  AfterEnum:       false\n  AfterFunction:   true\n  AfterNamespace:  false\n  AfterObjCDeclaration: false\n  AfterStruct:     false\n  AfterUnion:      false\n  BeforeCatch:     false\n  BeforeElse:      false\n  IndentBraces:    false\n  SplitEmptyFunction: true\n  SplitEmptyRecord: true\n  SplitEmptyNamespace: true\nBreakBeforeBinaryOperators: All\nBreakBeforeBraces: WebKit\nBreakBeforeInheritanceComma: false\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: false\nBreakConstructorInitializers: BeforeComma\nBreakAfterJavaFieldAnnotations: false\nBreakStringLiterals: true\nColumnLimit:     0\nCommentPragmas:  '^ IWYU pragma:'\nCompactNamespaces: false\nConstructorInitializerAllOnOneLineOrOnePerLine: false\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: false\nDerivePointerAlignment: false\nDisableFormat:   false\nExperimentalAutoDetectBinPacking: false\nFixNamespaceComments: false\nForEachMacros:   \n  - foreach\n  - Q_FOREACH\n  - BOOST_FOREACH\nIncludeCategories:\n  - Regex:           '^\"config\\.h\"'\n    Priority:        -1\n  # The main header for a source file automatically gets category 0\n  - Regex:           '^<.*SoftLink.h>'\n    Priority:        4\n  - Regex:           '^\".*SoftLink.h\"'\n    Priority:        3\n  - Regex:           '^<.*>'\n    Priority:        2\n  - Regex:           '.*'\n    Priority:        1\nIncludeIsMainRegex: '(Test)?$'\nIndentCaseLabels: false\nIndentWidth:     4\nIndentWrappedFunctionNames: false\nJavaScriptQuotes: Leave\nJavaScriptWrapImports: true\nKeepEmptyLinesAtTheStartOfBlocks: true\nMacroBlockBegin: ''\nMacroBlockEnd:   ''\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nObjCBlockIndentWidth: 4\nObjCSpaceAfterProperty: true\nObjCSpaceBeforeProtocolList: true\nPenaltyBreakAssignment: 2\nPenaltyBreakBeforeFirstCallParameter: 19\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakString: 1000\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 60\nPointerAlignment: Left\nReflowComments:  true\nSortIncludes:    true\nSortUsingDeclarations: true\nSpaceAfterCStyleCast: false\nSpaceAfterTemplateKeyword: false\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeCpp11BracedList: true\nSpaceBeforeParens: ControlStatements\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles:  false\nSpacesInContainerLiterals: true\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nStandard:        Cpp11\nTabWidth:        8\nUseTab:          Never\n---\nLanguage: ObjC\nPointerAlignment: Right\n...\n"
        },
        {
          "name": ".dir-locals.el",
          "type": "blob",
          "size": 0.421875,
          "content": ";; Per-directory local variables for GNU Emacs 23 and later.\n\n;; Syntax: ((MODE (VAR . VAL) ...) ...)\n;; MODE is a symbol like `c-mode', or `nil' for all modes.\n((c-mode\n  (indent-tabs-mode . nil)\n  (c-basic-offset . 4))\n (c++-mode\n  (indent-tabs-mode . nil)\n  (c-basic-offset . 4))\n (java-mode\n  (indent-tabs-mode . nil)\n  (c-basic-offset . 4))\n (ruby-mode\n  (ruby-indent-level . 4))\n (change-log-mode\n  (indent-tabs-mode . nil)))\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.408203125,
          "content": "# Editor configuration, see https://editorconfig.org\n\n[*.{c,cpp,h,rb,py,pl}]\nindent_style = space\nindent_size = 4\ntab_width = 4\nend_of_line = lf\ninsert_final_newline = true\n\n[{CMakeLists.txt,*.cmake}]\nindent_style = space\nend_of_line = lf\ninsert_final_newline = true\n\n[project.pbxproj]\nindent_style = tab\n\n[.editorconfig]\nindent_style = space\nindent_size = 4\ntab_width = 4\nend_of_line = lf\ninsert_final_newline = true\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 1.1455078125,
          "content": "# To enable automatic merging of ChangeLog files, use the following command:\n# git config merge.changelog.driver \"resolve-ChangeLogs --merge-driver %O %A %B\"\nChangeLog* merge=changelog\n\n# To enable smart diffing of ObjC[++] files, run the following commands:\n# git config diff.objcpp.xfuncname \"^[-+@a-zA-Z_].*$\"\n# git config diff.objcppheader.xfuncname \"^[@a-zA-Z_].*$\"\n*.m diff=objc\n*.mm diff=objcpp\nmac/*.h diff=objcppheader\n*/mac/*.h diff=objcppheader\n*/*/mac/*.h diff=objcppheader\nobjc/*.h diff=objcppheader\n*/objc/*.h diff=objcppheader\n*/*/objc/*.h diff=objcppheader\n\n# To enable smart diffing of *.strings files, run the following command:\n# git config diff.localizablestrings.textconv \"iconv -f utf-16 -t utf-8\"\n*.strings diff=localizablestrings\n\n*.vcproj eol=crlf\n*.vsprops eol=crlf\n*.sln eol=crlf\n\n# For best performance, place rules for deep paths in the parent directory.\n# For example: instead of \"Source/WebCore/inspector/Inspector.json -crlf\" here,\n# place \"Inspector.json -crlf\" in Source/WebCore/inspector/.gitattributes\n\n# Exclude these git specific files from archives created via git-archive.\n.gitignore      export-ignore\n.gitattributes  export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.333984375,
          "content": "*.pbxuser\n*.perspective*\n*.pyc\n.DS_Store\n.directory\n/WebKitBuild/\n/.clangd\n/update-compile-commands-symlink.conf\n/test262-results/\nautoinstall.cache.d\nproject.xcworkspace\nxcuserdata\nDerivedData\n.mailmap\nresults\n\n# Ignore Buildstream local files\n/Tools/buildstream/.bst2\n/Tools/buildstream/cache\n/Tools/buildstream/flatpak-version.yml\n/Tools/buildstream/repo\n\n# Ignore auto-generated files by VS & VSCode.\n/.vs/\n/.vscode/\n\n# Ignore auto-generated files by JetBrains IDEs (PyCharm).\n*.idea/\n\n# Ignore common tool auto-generated files.\n.gdbinit\n.gdb_history\ntags\n*~\n.*.sw[a-p]\n.cache\n.clangd\ncompile_commands.json\n__pycache__\n\n# Ignore CMake caches outside of the build directory.\n__cmake_systeminformation/\n\n# Ignore port files downloaded to WebKitLibraries\n/WebKitLibraries/win/\n/WebKitLibraries/playstation/\n\n# Ignore files generated by Qt Creator:\n*.pro.user\n\n# Ignore KDevelop files:\n.kdev_include_paths\n*.kdev4\n*.kate-swp\n\n# Ignore Eclipse files:\n.project\n.cproject\n.settings\n\n# Ignore YouCompleteMe symlinks\n.ycm_extra_conf.py\n\n# Local overrides configuration files\nLocalOverrides.xcconfig\n\n# Ignore the external git repo of cog\nTools/wpe/cog\n\n# Ignore the parse table generated by gni-to-cmake.py\nSource/ThirdParty/ANGLE/parsetab.py\n\n# Ignore user CMake presets\nCMakeUserPresets.json\n\n# Ignore BenchmarkTemp folder generated by run-jsc-benchmarks\nBenchmarkTemp\n"
        },
        {
          "name": ".submitproject",
          "type": "blob",
          "size": 1.029296875,
          "content": "[submitproject \"filter\"]\n    includedSubdirectoryPatterns = Configurations/\n    includedSubdirectoryPatterns = Source/\n    includedSubdirectoryPatterns = WebKitLibraries/SDKs/*.internal-additions.sdk/\n    excludedSubdirectoryPatterns = Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/util\n    excludedSubdirectoryPatterns = Source/ThirdParty/libwebrtc/Source/webrtc/examples\n    excludedSubdirectoryPatterns = Source/ThirdParty/capstone\n    excludedSubdirectoryPatterns = Source/ThirdParty/d3flamegraphjs\n    excludedSubdirectoryPatterns = Source/ThirdParty/d3js\n    excludedSubdirectoryPatterns = Source/ThirdParty/gmock\n    excludedSubdirectoryPatterns = Source/ThirdParty/gtest\n    excludedSubdirectoryPatterns = Source/ThirdParty/libsysprof-capture\n    excludedSubdirectoryPatterns = Source/ThirdParty/qunit\n    excludedSubdirectoryPatterns = Source/ThirdParty/skia\n    excludedSubdirectoryPatterns = Source/ThirdParty/unifdef\n    excludedSubdirectoryPatterns = Source/ThirdParty/xdgmime\n[submitproject \"gitmodules\"]\n    enabled = false\n"
        },
        {
          "name": ".submitproject-tools",
          "type": "blob",
          "size": 0.3544921875,
          "content": "[submitproject \"filter\"]\n    includedSubdirectoryPatterns = Tools/DumpRenderTree\n    includedSubdirectoryPatterns = Tools/ImageDiff\n    includedSubdirectoryPatterns = Tools/MiniBrowser\n    includedSubdirectoryPatterns = Tools/TestRunnerShared\n    includedSubdirectoryPatterns = Tools/WebKitTestRunner\n    excludedSubdirectoryPatterns = Tools/WebKitTestRunner/gtk\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 1.802734375,
          "content": "# -----------------------------------------------------------------------------\n# Determine CMake version and build type.\n# -----------------------------------------------------------------------------\n# NOTE: cmake_minimum_required() and project() *MUST* be the two first commands\n# used, see https://cmake.org/cmake/help/v3.3/command/project.html -- the\n# latter in particular handles loading a bunch of shared CMake definitions\n# and loading the cross-compilation settings from CMAKE_TOOLCHAIN_FILE.\n\ncmake_minimum_required(VERSION 3.20)\nproject(WebKit)\n\n# -----------------------------------------------------------------------------\n# Common configuration\n#------------------------------------------------------------------------------\nset(CMAKE_MODULE_PATH \"${CMAKE_SOURCE_DIR}/Source/cmake\")\ninclude(WebKitCommon)\n\n# -----------------------------------------------------------------------------\n# Enable API unit tests and create a target for the test runner\n# -----------------------------------------------------------------------------\nif (ENABLE_API_TESTS)\n    enable_testing()\nendif ()\n\n# -----------------------------------------------------------------------------\n# Add module directories\n# -----------------------------------------------------------------------------\nadd_subdirectory(Source)\n\n# -----------------------------------------------------------------------------\n# Add tools\n# -----------------------------------------------------------------------------\nif (ENABLE_TOOLS)\n    add_subdirectory(Tools)\nendif ()\n\nif (DEVELOPER_MODE)\n    add_subdirectory(PerformanceTests)\nendif ()\n\n# -----------------------------------------------------------------------------\n# Print the features list last, for maximum visibility.\n# -----------------------------------------------------------------------------\nPRINT_WEBKIT_OPTIONS()\n"
        },
        {
          "name": "CMakePresets.json",
          "type": "blob",
          "size": 4.2490234375,
          "content": "{\n    \"version\": 2,\n    \"cmakeMinimumRequired\": {\n        \"major\": 3,\n        \"minor\": 20,\n        \"patch\": 0\n    },\n    \"configurePresets\": [\n        {\n            \"name\": \"release\",\n            \"hidden\": true,\n            \"cacheVariables\": {\n                \"CMAKE_BUILD_TYPE\": {\n                    \"type\": \"STRING\",\n                    \"value\": \"Release\"\n                }\n            }\n        },\n        {\n            \"name\": \"debug\",\n            \"hidden\": true,\n            \"cacheVariables\": {\n                \"CMAKE_BUILD_TYPE\": {\n                    \"type\": \"STRING\",\n                    \"value\": \"Debug\"\n                }\n            }\n        },\n        {\n            \"name\": \"dev\",\n            \"hidden\": true,\n            \"cacheVariables\": {\n                \"CMAKE_EXPORT_COMPILE_COMMANDS\": {\n                    \"type\": \"BOOL\",\n                    \"value\": \"ON\"\n                },\n                \"DEVELOPER_MODE\": {\n                    \"type\": \"BOOL\",\n                    \"value\": \"ON\"\n                },\n                \"ENABLE_EXPERIMENTAL_FEATURES\": {\n                    \"type\": \"BOOL\",\n                    \"value\": \"ON\"\n                }\n            }\n        },\n        {\n            \"name\": \"gtk\",\n            \"hidden\": true,\n            \"generator\": \"Ninja\",\n            \"cacheVariables\": {\n                \"PORT\": {\n                    \"type\": \"STRING\",\n                    \"value\": \"GTK\"\n                }\n            }\n        },\n        {\n            \"name\": \"gtk-release\",\n            \"displayName\": \"GTK Release\",\n            \"inherits\": [\"gtk\", \"release\"],\n            \"binaryDir\": \"WebKitBuild/GTK/Release\"\n        },\n        {\n            \"name\": \"gtk-debug\",\n            \"displayName\": \"GTK Debug\",\n            \"inherits\": [\"gtk\", \"debug\"],\n            \"binaryDir\": \"WebKitBuild/GTK/Debug\"\n        },\n        {\n            \"name\": \"gtk-dev-release\",\n            \"displayName\": \"GTK Development Release\",\n            \"inherits\": [\"gtk-release\", \"dev\"]\n        },\n        {\n            \"name\": \"gtk-dev-debug\",\n            \"displayName\": \"GTK Development Debug\",\n            \"inherits\": [\"gtk-debug\", \"dev\"]\n        },\n        {\n            \"name\": \"wpe\",\n            \"hidden\": true,\n            \"generator\": \"Ninja\",\n            \"cacheVariables\": {\n                \"PORT\": {\n                    \"type\": \"STRING\",\n                    \"value\": \"WPE\"\n                }\n            }\n        },\n        {\n            \"name\": \"wpe-release\",\n            \"displayName\": \"WPE Release\",\n            \"inherits\": [\"wpe\", \"release\"],\n            \"binaryDir\": \"WebKitBuild/WPE/Release\"\n        },\n        {\n            \"name\": \"wpe-debug\",\n            \"displayName\": \"WPE Debug\",\n            \"inherits\": [\"wpe\", \"debug\"],\n            \"binaryDir\": \"WebKitBuild/WPE/Debug\"\n        },\n        {\n            \"name\": \"wpe-dev-release\",\n            \"displayName\": \"WPE Development Release\",\n            \"inherits\": [\"wpe-release\", \"dev\"]\n        },\n        {\n            \"name\": \"wpe-dev-debug\",\n            \"displayName\": \"WPE Development Debug\",\n            \"inherits\": [\"wpe-debug\", \"dev\"]\n        }\n    ],\n    \"buildPresets\": [\n        {\n            \"name\": \"gtk-release\",\n            \"displayName\": \"GTK Release\",\n            \"configurePreset\": \"gtk-release\"\n        },\n        {\n            \"name\": \"gtk-debug\",\n            \"displayName\": \"GTK Debug\",\n            \"configurePreset\": \"gtk-debug\"\n        },\n        {\n            \"name\": \"gtk-dev-release\",\n            \"displayName\": \"GTK Development Release\",\n            \"configurePreset\": \"gtk-dev-release\"\n        },\n        {\n            \"name\": \"gtk-dev-debug\",\n            \"displayName\": \"GTK Development Debug\",\n            \"configurePreset\": \"gtk-dev-debug\"\n        },\n        {\n            \"name\": \"wpe-release\",\n            \"displayName\": \"WPE Release\",\n            \"configurePreset\": \"wpe-release\"\n        },\n        {\n            \"name\": \"wpe-debug\",\n            \"displayName\": \"WPE Debug\",\n            \"configurePreset\": \"wpe-debug\"\n        },\n        {\n            \"name\": \"wpe-dev-release\",\n            \"displayName\": \"WPE Development Release\",\n            \"configurePreset\": \"wpe-dev-release\"\n        },\n        {\n            \"name\": \"wpe-dev-debug\",\n            \"displayName\": \"WPE Development Debug\",\n            \"configurePreset\": \"wpe-dev-debug\"\n        }\n    ]\n}\n"
        },
        {
          "name": "Configurations",
          "type": "tree",
          "content": null
        },
        {
          "name": "Introduction.md",
          "type": "blob",
          "size": 107.970703125,
          "content": "#  Introduction to WebKit\n\n## What is WebKit?\n\n[WebKit](https://webkit.org/) is an open-source Web browser engine.\nIt’s a framework in macOS and iOS, and used by many first party and third party applications including Safari, Mail, Notes, Books, News, and App Store.\n\nThe WebKit codebase is mostly written in C++ with bits of C and assembly, primarily in JavaScriptCore, and some Objective-C to integrate with Cocoa platforms.\n\nIt primarily consists of the following components, each inside its own directory in [Source](https://github.com/WebKit/WebKit/tree/main/Source):\n\n* **bmalloc** - WebKit’s malloc implementation as a bump pointer allocator. It provides an important security feature, called IsoHeap,\n    which segregates each type of object into its own page to prevent type confusion attacks upon use-after-free.\n* **WTF** - Stands for Web Template Framework. WebKit’s template library.\n    The rest of the WebKit codebase is built using this template library in addition to, and often in place of, similar class templates in the C++ standard library.\n    It contains common container classes such as Vector, HashMap (unordered), HashSet, and smart pointer types such as Ref, RefPtr, and WeakPtr used throughout the rest of WebKit.\n* **JavaScriptCore** - WebKit’s JavaScript engine; often abbreviated as JSC.\n    JSC parses JavaScript and generates byte code, which is then executed by one of the following four tiers.\n    Many tiers are needed to balance between compilation time and execution time.\n    Also see Phil's blog post about [Speculation in JavaScriptCore](https://webkit.org/blog/10308/speculation-in-javascriptcore/).\n    * **Interpreter** - This tier reads and executes instructions in byte code in C++.\n    * **Baseline JIT** - The first Just In Time compiler tier serves as the profiler as well as a significant speed up from the interpreter.\n    * **DFG JIT** - Data Flow Graph Just In Time compiler uses the data flow analysis to generate optimized machine code.\n    * **FTL JIT** - Faster than Light Just In Time compiler which uses [B3 backend](https://webkit.org/blog/5852/introducing-the-b3-jit-compiler/).\n        It’s the fastest tier of JSC.\n    JavaScriptCode also implements JavaScriptCore API for macOS and iOS applications.\n* **WebCore** - The largest component of WebKit, this layer implements most of the Web APIs and their behaviors.\n    Most importantly, this component implements HTML, XML, and CSS parsers and implements HTML, SVG, and MathML elements as well as CSS.\n    It also implements [CSS JIT](https://webkit.org/blog/3271/webkit-css-selector-jit-compiler/), the only Just In Time compiler for CSS in existence.\n    It works with a few tree data structures:\n    * **Document Object Model** - This is the tree data structure we create from parsing HTML.\n    * **Render Tree** - This tree represents the visual representation of each element in DOM tree computed from CSS and also stores the geometric layout information of each element.\n* **WebCore/PAL and WebCore/platform** - Whilst technically a part of WebCore, this is a platform abstraction layer for WebCore\n    so that the rest of WebCore code can remain platform independent / agnostic across all the platforms WebKit can run on: macOS, iOS, Windows, Linux, etc...\n    Historically, most of this code resided in WebCore/platform.\n    There is an ongoing multi-year project to slowly migrate code to PAL as we remove the reverse dependencies to WebCore.\n* **WebKitLegacy** (a.k.a. WebKit1) - This layer interfaces WebCore with the rest of operating systems in single process and implements WebView on macOS and UIWebView on iOS.\n* **WebKit** (a.k.a. WebKit2) - This layer implements the multi-process architecture of WebKit, and implements WKWebView on macOS and iOS.\n    WebKit’s multi-process architecture consists of the following processes:\n    * **UI process** - This is the application process. e.g. Safari and Mail\n    * **WebContent process** - This process loads & runs code loaded from websites.\n        Each tab in Safari typically has its own WebContent process.\n        This is important to keep each tab responsive and protect websites from one another.\n    * **Networking process** - This process is responsible for handling network requests as well as storage management.\n        All WebContent processes in a single session (default vs. private browsing) share a single networking session in the networking process.\n* **WebInspector / WebDriver** - WebKit’s developer tool & automation tool for Web developers.\n\n## Contributing to WebKit\n\nThere are many ways to get involved and contribute to the WebKit Project.\nFiling a new bug, fixing a bug, or adding a new feature.\n\nThere are three different kinds of contributors in the WebKit project.\n\n * Contributor - This category encompasses everyone. Anyone who files a bug or contributes a code change or reviews a code change is considered as a contributor\n * Committer - A committer is someone who has write access to [WebKit's repository](https://github.com/WebKit/WebKit).\n * Reviewer - A reviewer is someone who has the right to review and approve code changes other contributors proposed.\n\nSee [Commit and Review Policy](https://webkit.org/commit-and-review-policy/) for more details on how to become a committer or a reviewer.\n\n### Staying in Touch\n\nBefore getting in touch with WebKit developers using any of the avenues below, make sure that you have checked our page on how to ask [questions about WebKit](https://webkit.org/asking-questions/).\n\nYou can find WebKit developers, testers, and other interested parties on the [#WebKit Slack workspace](https://webkit.slack.com/).\n[Join the WebKit slack](https://join.slack.com/t/webkit/shared_invite/enQtOTU3NzQ3NTAzNjA0LTc5NmZlZWIwN2MxN2VjODVjNzEyZjBkOWQ4NTM3OTk0ZTc0ZGRjY2MyYmY2MWY1N2IzNTI2MTIwOGVjNzVhMWE),\nand stay in touch.\n\n## Bug tracking in WebKit\n\n[bugs.webkit.org](https://bugs.webkit.org/) hosted is the primary bug tracking tool we use.\nWhen making a code change, we post a code change (patch) on this website.\n\n### Filing a bug and editing bugs\n\nTo [file a new WebKit bug](https://bugs.webkit.org/enter_bug.cgi), see [reporting bugs](https://webkit.org/reporting-bugs/).\n\nTo edit an existing bug, you may need [editbug-bits](https://webkit.org/bugzilla-bits/).\n\n### Code review\nCode reviews are done on GitHub when a pull request is made. See [Submitting a pull request](#submitting-a-pull-request).\n\n### Security Bugs in bugs.webkit.org\n\nSecurity bugs have their own components in [bugs.webkit.org](https://bugs.webkit.org/).\nWe’re also working on a new policy to delay publishing tests for security fixes until after the fixes have been widely deployed.\n\n_***Do not post a patch or describe a security bug in a bug that is not in security component of bugs.webkit.org.***_\n\n## Getting started with WebKit\n\n### Getting Code\n\nSee [Getting the Code](https://github.com/WebKit/webkit/blob/master/ReadMe.md#getting-the-code)\n\n### Adding Tools to PATH\n\nFor convenience, you can add `Tools/Scripts/` to your path as follows in `~/.zshrc` like so:\n\n```sh\nexport PATH=$PATH:/Volumes/Data/webkit/Tools/Scripts/\n```\n\nwhere `/Volumes/Data/webkit` is the path to a WebKit checkout.\n\nThis will allow you to run various tools you by name instead of typing the full path of the script.\n\n### Updating checkouts\n\nThere is a script to update a WebKit checkout: `Tools/Scripts/update-webkit`.\n\n### Building WebKit\n\n[See Building WebKit](https://github.com/WebKit/webkit/blob/master/ReadMe.md#building-webkit)\n\n### Getting setup to contribute\n\nIf you've followed the steps above, get setup to contribute by running:\n\n```Bash\ngit webkit setup\n```\n\nThe `setup` checks that your environment is optimally configured to contribute, and may prompt you for some additional information.\n\n### Submitting a pull request\n\nFirstly, please make sure you [file a bug](https://bugs.webkit.org) for the thing you are adding or fixing! Or, find a bug that you think is relevant to the fix you are making.\n\nAssuming you are working off \"main\" branch, once your patch is working and [tests are passing](#correctness-testing-in-webkit), simply run:\n\n```Bash\ngit webkit pr --issue <your bug number here>\n```\n\nThat will pull down the details from [bugs.webkit.org](https://bugs.webkit.org), create a new git branch, and generate a commit message for you.\nIf necessary, please add additional details describing what you've added, modified, or fixed.\n\nOnce your pull request is on GitHub, the Early Warning System (a.k.a. EWS) will automatically build and run tests against your code change.\nThis allows contributors to find build or test failures before committing code changes to the WebKit’s repository.\n\nNote, if you'd like to submit a draft pull request, you can do so by running:\n\n```Bash\ngit webkit pr --draft\n```\n\n## Addressing review feedback\n\nAfter you receive review feedback on GitHub, you should collaborate with the reviewer to address the feedback.\n\nOnce done, you can update your pull request to include the changes by again simply running:\n\n```Bash\ngit webkit pr\n```\n\nThat will replace your old pull request with a new one with the new changes, while also updating the pull request's description with your current commit message.\n\n### Fixing mysterious build or runtime errors after Xcode upgrades\n\nIf you see mysterious build failures or if you’ve switched to a new version of\nmacOS or Xcode, delete the `WebKitBuild` directory.\n`make clean` may not delete all the relevant files,\nand building after doing that without deleting the `WebKitBuild` directory may result in mysterious build or dyld errors.\n\n### Building with Address Sanitizer to investigate memory corruption bugs\n\nTo build [Address Sanitizer](https://en.wikipedia.org/wiki/AddressSanitizer) or ASan builds to analyze security bugs,\nrun `Tools/Scripts/set-webkit-configuration --asan --release`.\nThis will enable ASan build. If want to attach a debugger, you can also specify `--debug` instead of `--release`.\nOnce you don’t need to build or run ASan anymore, you can specify `--no-asan` in place of `--asan` to disable ASan.\nNote that this configuration is saved by creating a file called Asan in the WebKitBuild directory,\nso if you are trying to do a clean Asan build by deleting the build directory you need to rerun this command.\n\n### Using Xcode\n\nYou can also use Xcode to build & debug WebKit. Open `WebKit.xcworkspace` at the top level directory.\n\nIn order to make Xcode use build files built by `make` command above,\ngo to File > Workspace Settings... > Advanced... > Custom > Relative to Workspace\nand adjust the relative paths of Products and Intermediates to point to `WebKitBuild` directory.\n![Screenshot of Xcode Workspace Settings](resources/xcode-workspace-settings.png)\n![Screenshot of Xcode Workspace Settings - Advanced Build Location](resources/xcode-workspace-build-location.png)\nNote that debugging WebCore code typically requires attaching to the relevant WebContent process,\nnot the application process, which is mostly running code in [Source/WebKit/UIProcess](https://github.com/WebKit/WebKit/tree/main/Source/WebKit/UIProcess).\nDepending on what you’re debugging, you’d have to attach & debug different processes in the coalition.\n\nYou may find it useful to use the debug helpers under `Tools/lldb/lldb_webkit.py`.\nThis can be added to `~/.lldbinit` for automatic loading into LLDB on launch by adding the line `command script import {Path to WebKit}/Tools/lldb/lldb_webkit.py`.\nFor more details, see the Wiki article on [lldb formatters](https://trac.webkit.org/wiki/lldb%20formatters).\n\nWhen debugging a debug build in LLDB, there are also a few functions that can be called on objects that will dump debugging info.\n\n* RenderObject\n    * showNodeTree()\n    * showLineTree()\n    * showRenderTree()\n* Node\n    * showTree()\n    * showNodePath()\n    * showTreeForThis()\n    * showNodePathForThis()\n\nDebugging child processes such as GPU process, \"Child Process Debuggability\" internal feature must be in use. For the test runner, you can\nspecify `run-webkit-tests --internal-feature=ChildProcessDebuggabilityEnabled`. For MiniBrowser, set the Debug > Internal > Child Process Debuggability\nmenu item and restart.\n\n## Correctness Testing in WebKit\n\nWebKit is really big on test driven development, we have many types of tests.\n\n* **JavaScript tests** - Resides in top-level [JSTests](https://github.com/WebKit/WebKit/tree/main/JSTests) directory.\n    This is the primary method of testing JavaScriptCore. Use `Tools/Scripts/run-javascriptcore-tests` to run these tests.\n* **Layout tests** - Resides in top-level [LayoutTests](https://github.com/WebKit/WebKit/tree/main/LayoutTests) directory.\n    This is the primary method of testing WebCore.\n    If you’re making code changes to WebCore, you typically run these tests. Use `Tools/Scripts/run-webkit-tests` to run these.\n    Pass `-1` to run tests using WebKitLegacy (a.k.a. WebKit1).\n    [WebKitTestRunner](https://github.com/WebKit/WebKit/tree/main/Tools/WebKitTestRunner) is used to run these tests for WebKit2,\n    and [DumpRenderTree](https://github.com/WebKit/WebKit/tree/main/Tools/DumpRenderTree) is used to these tests for WebKit1.\n    There are a few styles of layout tests but all of them have a test file and expected result (ends with -expected.txt),\n    and the test passes if the test file’s output matches that of the expected result.\n* **API tests** - Reside in [Tools/TestWebKitAPI](https://github.com/WebKit/WebKit/tree/main/Tools/TestWebKitAPI),\n    these are [GTests](https://en.wikipedia.org/wiki/Google_Test) that test APIs exposed by JavaScriptCore,\n    WebKitLegacy, and WebKit layers as well as unit tests for selected WTF classes.\n    WebKit does not use [XCTests](https://developer.apple.com/documentation/xctest).\n    Use `Tools/Scripts/run-api-tests` to run these tests.\n    Because these API tests are sequentially, it’s preferable to write layout tests when possible.\n* **Bindings tests** - Reside in [Source/WebCore/bindings/scripts/test](https://github.com/WebKit/WebKit/tree/main/Source/WebCore/bindings/scripts/test),\n    these are tests for WebCore’s binding code generator.\n    Use `Tools/Scripts/run-bindings-tests` to run these tests.\n* **webkitpy tests** - Tests for WebKit’s various Python scripts in [Tools/Scripts/webkitpy](https://github.com/WebKit/WebKit/tree/main/Tools/Scripts/webkitpy).\n    Use `Tools/Scripts/test-webkitpy` to run these tests.\n* **webkitperl tests** - Tests for WebKit’s various Perl scripts in [Tools/Scripts/webkitperl](https://github.com/WebKit/WebKit/tree/main/Tools/Scripts/webkitperl).\n    Use `Tools/Scripts/test-webkitperl` to run these tests.\n\n## Performance Testing in WebKit\n\nThe WebKit project has a \"no performance regression\" policy.\nWe maintain the performance of the following of the benchmarks and are located under [PerformanceTests](https://github.com/WebKit/WebKit/tree/main/PerformanceTests).\nIf your patch regresses one of these benchmarks even slightly (less than 1%), it will get reverted.\n\n* **JetStream2** - Measures JavaScript and WASM performance.\n* **MotionMark** - Measures graphics performance.\n* **Speedometer 2** - Measures WebKit’s performance for complex web apps.\n\nThe following are benchmarks maintained by Apple's WebKit team but not available to other open source contributors\nsince Apple doesn't have the right to redistribute the content.\nIf your WebKit patch regresses one of these tests, your patch may still get reverted.\n\n* **RAMification** - Apple's internal JavaScript memory benchmark.\n* **ScrollPerf** - Apple's internal scrolling performance tests.\n* **PLT** - Apple's internal page load time tests.\n* **Membuster / PLUM** - Apple's internal memory tests. Membuster for macOS and PLUM for iOS and iPadOS.\n\n## Contributing code to WebKit\n\nWebKit has a rigorous code contribution process and policy in place to maintain the quality of code.\n\n### Coding style\n\nCode you write must follow WebKit’s [coding style guideline](https://webkit.org/contributing-code/#code-style-guidelines).\nYou can run `Tools/Scripts/check-webkit-style` to check whether your code follows the coding guidelines or not\n(it can report false positives or false negatives).\nIf you use `Tools/Scripts/webkit-patch upload` to upload your patch,\nit automatically runs the style checker against the code you changed so there is no need to run `check-webkit-style` separately.\n\nSome older parts of the codebase do not follow these guidelines.\nIf you are modifying such code, it is generally best to clean it up to comply with the current guidelines.\n\n### Convenience Tools\n\n`Tools/Scripts/webkit-patch` provides a lot of utility functions like applying the latest patch on [bugs.webkit.org](https://bugs.webkit.org/) (`apply-from-bug`)\nand uploading a patch (`upload --git-commit=<commit hash>`) to a [bugs.webkit.org](https://bugs.webkit.org/) bug.\nUse `--all-commands` to the list of all commands this tool supports.\n\n### Licensing\n\nMuch of the code we inherited from [KHTML](https://en.wikipedia.org/wiki/KHTML) is licensed under [LGPL](https://en.wikipedia.org/wiki/GNU_Lesser_General_Public_License).\nNew code contributed to WebKit will use the [two clause BSD license](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/LICENSE-APPLE).\nWhen contributing new code, update the copyright date.\nWhen moving the existing code, you need to include the original copyright notice for the moved code\nand you should also not change the license, which may be BSD or LGPL depending on a file, without the permission of the copyright holders.\n\n### Regression Tests\n\nOnce you have made a code change, you need to run the aforementioned tests (layout tests, API tests, etc...)\nto make sure your code change doesn’t break existing functionality.\nThese days, uploading a patch on [bugs.webkit.org](https://bugs.webkit.org/) triggers the Early Warning System (a.k.a. EWS)\n\nFor any bug fix or a feature addition, there should be a new test demonstrating the behavior change caused by the code change.\nIf no such test can be written in a reasonable manner (e.g. the fix for a hard-to-reproduce race condition),\nthen the reason writing a tests is impractical should be explained in the accompanying commit message.\n\nAny patch which introduces new test failures or performance regressions may be reverted.\nIt’s in your interest to wait for the Early Warning System to fully build and test your patch on all relevant platforms.\n\n### Commit messages\n\nCommit messages serve as change logs, providing historical documentation for all changes to the WebKit project.\nRunning `git-webkit setup` configures your git hooks to properly generate commit messages.\n\nThe first line shall contain a short description of the commit message (this should be the same as the Summary field in Bugzilla).\nOn the next line, enter the Bugzilla URL. \nBelow the \"Reviewed by\" line, enter a detailed description of your changes. \nThere will be a list of files and functions modified at the bottom of the commit message.\nYou are encouraged to add comments here as well. (See the commit below for reference).\nDo not worry about the “Reviewed by NOBODY (OOPS!)” line, GitHub will update this field upon merging.\n\n```\nAllow downsampling when invoking Remove Background or Copy Subject\nhttps://bugs.webkit.org/show_bug.cgi?id=242048\n\nReviewed by NOBODY (OOPS!).\n\nSoft-link `vk_cgImageRemoveBackgroundWithDownsizing` from VisionKitCore, and call into it to perform\nbackground removal when performing Remove Background or Copy Subject, if available. On recent builds\nof Ventura and iOS 16, VisionKit will automatically reject hi-res (> 12MP) images from running\nthrough subject analysis; for clients such as WebKit, this new SPI allows us to opt into\ndownsampling these large images, instead of failing outright.\n\n* Source/WebCore/PAL/pal/cocoa/VisionKitCoreSoftLink.h:\n* Source/WebCore/PAL/pal/cocoa/VisionKitCoreSoftLink.mm:\n* Source/WebCore/PAL/pal/spi/cocoa/VisionKitCoreSPI.h:\n* Source/WebKit/Platform/cocoa/ImageAnalysisUtilities.h:\n* Source/WebKit/Platform/cocoa/ImageAnalysisUtilities.mm:\n(WebKit::requestBackgroundRemoval):\n\nRefactor the code so that we call `vk_cgImageRemoveBackgroundWithDownsizing` if it's available, and\notherwise fall back to `vk_cgImageRemoveBackground`.\n\n* Source/WebKit/UIProcess/ios/WKContentViewInteraction.mm:\n(-[WKContentView doAfterComputingImageAnalysisResultsForBackgroundRemoval:]):\n(-[WKContentView _completeImageAnalysisRequestForContextMenu:requestIdentifier:hasTextResults:]):\n(-[WKContentView imageAnalysisGestureDidTimeOut:]):\n* Source/WebKit/UIProcess/mac/WebContextMenuProxyMac.mm:\n(WebKit::WebContextMenuProxyMac::appendMarkupItemToControlledImageMenuIfNeeded):\n(WebKit::WebContextMenuProxyMac::getContextMenuFromItems):\n\nAdditionally, remove the `cropRect` completion handler argument, since the new SPI function no\nlonger provides this information. The `cropRect` argument was also unused after removing support for\nrevealing the subject, in `249582@main`.\n```\n\nThe “No new tests. (OOPS!)” line will appear if `git webkit commit` did not detect the addition of new tests.\nIf your patch does not require test cases (or test cases are not possible), remove this line and explain why you didn’t write tests.\nOtherwise all changes require test cases which should be mentioned in the commit message.\n\n## WebKit’s Build System\n\nApple’s macOS, iOS, watchOS, and tvOS ports use Xcode and the rest use [CMake](https://en.wikipedia.org/wiki/CMake) to build WebKit.\nThere is an ongoing effort to make Apple's ports also use CMake.\n\nIn order to reduce the compilation time, which used to take 40+ minutes on the fully loaded 2018 15“ MacBook Pro,\nwe bundle up multiple C++ translation units (.cpp files) and compile them as a single translation unit.\nWe call this mechanism *Unified Sources* or *Unified Builds*.\n\nUnified sources are generated under `WebKitBuild/X/DerivedSources` where X is the name of build configuration such as `Debug` and `Release-iphonesimulator`.\nFor example, `WebKitBuild/Debug/DerivedSources/WebCore/unified-sources/UnifiedSource116.cpp` may look like this:\n\n```cpp\n#include \"dom/Document.cpp\"\n#include \"dom/DocumentEventQueue.cpp\"\n#include \"dom/DocumentFragment.cpp\"\n#include \"dom/DocumentMarkerController.cpp\"\n#include \"dom/DocumentParser.cpp\"\n#include \"dom/DocumentSharedObjectPool.cpp\"\n#include \"dom/DocumentStorageAccess.cpp\"\n#include \"dom/DocumentType.cpp\"\n```\n\n### How to add a new .h or .cpp file\n\nTo add a new header file or a translation unit (e.g. `.cpp`, `.m`, or `.mm`),\nopen WebKit.xcworkspace and add respective files in each directory.\n\nMake sure to uncheck the target membership so that it’s not compiled as a part of the framework in xcodebuild.\nInstead, add the same file in Sources.txt file that exists in each subdirectory of Source.\ne.g. [Source/WebCore/Sources.txt](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/Sources.txt) for WebCore.\nThis will ensure the newly added file is compiled as a part of *unified sources*.\n![Screenshot of adding a file to Xcode](resources/xcode-add-file.png)\nWhen a header file in WTF is used in WebCore, or a header file in WebCore is used in WebKit or WebKitLegacy,\nwe need to export the file to those projects.\nTo do that, turn on the target membership in respective framework as set the membership to “Private” as seen below.\nThis will ensure the relevant header file is exported from WTF / WebCore to other downstream projects like WebKitLegacy.\n![Screenshot of exporting a header file](resources/xcode-export-header.png)\n\nNon-cocoa ports, like WPE and GTK, use CMake for building the project. If the header is not platform-specific, you might want to add an entry for it into\nthe relevant Headers.cmake. For example, if a WebCore header is included by WebKit, you will need to list the header in Source/WebCore/Headers.cmake.\n\nFIXME: Mention WTF_EXPORT_PRIVATE and WEBCORE_EXPORT.\n\n\n### Build Failures with Unified Sources\n\nBecause of Unified Sources, it’s possible that adding a new file will cause a new build failure on some platform.\nThis happens because if `UnifiedSource1.cpp` contains `a.cpp`, `b.cpp`, `c.cpp`, then `#include` in `a.cpp` could have pulled in some header files that `c.cpp` needed.\nWhen you add `b2.cpp`, and `c.cpp` moves to `UnifiedSource2.cpp`, `c.cpp` no longer benefits from `a.cpp` “accidentally” satisfying `c.cpp`’s header dependency.\nWhen this happens, you need to add a new `#include` to `c.cpp` as it was supposed to be done in the first place.\n\n### Conditional Compilation\n\nEvery translation unit in WebKit starts by including “config.h”.\nThis file defines a set of [C++ preprocessor macros](https://en.cppreference.com/w/cpp/preprocessor)\nused to enable or disable code based on the target operating system, platform, and whether a given feature is enabled or disabled.\n\nFor example, the following `#if` condition says that the code inside of it is only compiled if\n[SERVICE_WORKER](https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API) feature is enabled:\n\n```cpp\n#if ENABLE(SERVICE_WORKER)\n...\n#endif\n```\n\nSimilarly, the following `#if` condition will enable the in-between code only on macOS:\n\n```cpp\n#if PLATFORM(MAC)\n...\n#endif\n```\n\nFor code which should be enabled in iOS, watchOS, tvOS, and Mac Catalyst we use `PLATFORM(IOS_FAMILY)`.\nFor each specific variant of iOS family, we also have `PLATFORM(IOS)`, `PLATFORM(WATCHOS)`, `PLATFORM(APPLETV)`, and `PLATFORM(MACCATALYST)`.\n\nThe following `#if` condition will enable the in-between code only if CoreGraphics is used:\n\n```cpp\n#if USE(CG)\n...\n#endif\n```\n\nFinally, if a certain piece of code should only be enabled in an operating system newer than some version,\nwe use  `__IPHONE_OS_VERSION_MIN_REQUIRED` or `__MAC_OS_X_VERSION_MIN_REQUIRED`.\nFor example, the following #if enables the in-between code only on macOS 10.14 (macOS Mojave) or above:\n\n```cpp\n#if PLATFORM(MAC) && __MAC_OS_X_VERSION_MIN_REQUIRED >= 101400\n...\n#endif\n```\n\n## WebKit’s Continuous Integration Infrastructure\n\nWebKit’s CI ([continuous integration](https://en.wikipedia.org/wiki/Continuous_integration)) infrastructure is located at [build.webkit.org](https://build.webkit.org/)).\n\n[build.webkit.org](https://build.webkit.org/) will build and test commits from WebKit in the chronological order\nand report test results to [results.webkit.org](https://results.webkit.org/).\nDue to the chronological ordering, results could be a few hours behind during the work week.\n\n\nWe also have a dashboard to monitor the health of [build.webkit.org](https://build.webkit.org/)\nat [build.webkit.org/dashboard](https://build.webkit.org/dashboard/).\nIf you observe that some bots are offline, or otherwise not processing your patch,\nplease notify [webkit-dev@webkit.org](mailto:webkit-dev@webkit.org).\n\nThis dashboard isn't great for investigating individual test failures,\n[results.webkit.org](https://results.webkit.org/) is a better tool for such investigations.\nIt keeps track of individual test status by configuration over time.\nYou can search individual tests by name or look at the historical results of entire test suites.\nThese results will link back to the test runs in Buildbot which are associated with a specific failure.\nSee layout tests section for more details on how to use these tools to investigate test failures observed on bots.\n\nFIXME: Add a section about downloading build products from build.webkit.org.\n\n# Memory Management in WebKit\n\nIn WebKit, when an object is owned by another object,\nwe typically use [`std::unique_ptr`](https://en.cppreference.com/w/cpp/memory/unique_ptr) to express that ownership.\nWebKit uses two primary management strategies when objects in other cases:\n[garbage collection](https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)) and [reference counting](https://en.wikipedia.org/wiki/Reference_counting).\n\n## Garbage collection in WebKit\n\nSee these blog posts:\n\n* [Understanding Garbage Collection in JavaScriptCore From Scratch](https://webkit.org/blog/12967/understanding-gc-in-jsc-from-scratch/):\n  Summary of how our GC is organized and how it works.\n* [Introducing Riptide: WebKit’s Retreating Wavefront Concurrent Garbage Collector](https://webkit.org/blog/7122/introducing-riptide-webkits-retreating-wavefront-concurrent-garbage-collector/):\n  Focusing on novel algorithms of our GC including how to tackle web browser specific problems (managing DOM objects, concurrency, etc.).\n\n\n## Reference counting in WebKit\n\n### Overview\n\nMost of WebCore objects are not managed by JavaScriptCore’s garbage collector.\nInstead, we use [reference counting](https://en.wikipedia.org/wiki/Reference_counting).\nWe have two referencing counting pointer types:\n[`RefPtr`](https://github.com/WebKit/WebKit/blob/main/Source/WTF/wtf/RefPtr.h)\nand [`Ref`](https://github.com/WebKit/WebKit/blob/main/Source/WTF/wtf/Ref.h).\nRefPtr is intended to behave like a C++ pointer whereas Ref is intended to behave like a C++ reference,\nmeaning that the former can be set to `nullptr` but the latter cannot.\n\n```cpp\nRef<A> a1; // This will result in compilation error.\nRefPtr<A> a2; // This is okay.\nRef<A> a3 = A::create(); // This is okay.\na3->f(); // Calls f() on an instance of A.\nA* a4 = a3.ptr();\na4 = a2.get();\n```\n\n\nUnlike C++‘s[`std::shared_ptr`](https://en.cppreference.com/w/cpp/memory/shared_ptr),\nthe implementation of referencing counting is a part of a managed object.\nThe requirements for an object to be used with `RefPtr` and `Ref` is as follows:\n\n* It implements `ref()` and `deref()` member functions\n* Each call to `ref()` and `deref()` will increment and decrement its internal reference counter\n* The initial call to `ref()` is implicit in `new`,\n    after the object had been allocated and the constructor has been called upon;\n    i.e. meaning that the reference count starts at 1.\n* When `deref()` is called when its internal reference counter reaches 0, “this” object is destructed and deleted.\n\nThere is a convenience super template class,\n[`RefCounted<T>`](https://github.com/WebKit/WebKit/blob/main/Source/WTF/wtf/RefCounted.h),\nwhich implements this behavior for any inherited class T automatically.\n\n### How to use RefPtr and Ref\n\nWhen an object which implements the semantics required by RefPtr and Ref is created via new,\nwe must immediately *adopt* it into `Ref` type using `adoptRef` as follows:\n\n```cpp\nclass A : public RefCounted<T> {\npublic:\n    int m_foo;\n\n    int f() { return m_foo; }\n\n    static Ref<A> create() { return adoptRef(*new A); }\nprivate:\n    A() = default;\n};\n```\n\nThis will create an instance of `Ref` without calling `ref()` on the newly created object, avoiding the unnecessary increment from 0 to 1.\nWebKit’s coding convention is to make the constructor private and add a static `create` function\nwhich returns an instance of a ref counted object after adopting it. \n\nNote that returning RefPtr or Ref is efficient thanks to [copy elision](https://en.cppreference.com/w/cpp/language/copy_elision) in C++11,\nand the following example does not create a temporary Ref object using copy constructor):\n\n```cpp\nRef<A> a = A::create();\n```\n\nWhen passing the ownership of a ref-counted object to a function,\nuse rvalue reference with `WTFMove` (equivalent to `std::move` with some safety checks),\nand use a regular reference when there is a guarantee for the caller to keep the object alive as follows:\n\n```cpp\nclass B {\npublic:\n    void setA(Ref<A>&& a) { m_a = WTFMove(a); }\nprivate:\n    Ref<A> m_a;\n};\n\n...\n\nvoid createA(B& b) {\n    b.setA(A::create());\n}\n```\n\nNote that there is no `WTFMove` on `A::create` due to copy elision.\n\n### Forwarding ref and deref\n\nAs mentioned above, objects that are managed with `RefPtr` and `Ref` do not necessarily have to inherit from `RefCounted`.\nOne common alternative is to forward `ref` and `deref` calls to another object which has the ownership.\nFor example, in the following example, `Parent` class owns `Child` class.\nWhen someone stores `Child` in `Ref` or `RefPtr`, the referencing counting of `Parent` is incremented and decremented on behalf of `Child`.\nBoth `Parent` and `Child` are destructed when the last `Ref` or `RefPtr` to either object goes away.\n\n```cpp\nclass Parent : RefCounted<Parent> {\npublic:\n    static Ref<Parent> create() { return adoptRef(*new Parent); }\n\n    Child& child() {\n        if (!m_child)\n            m_child = makeUnique<Child>(*this);\n        return m_child\n    }\n\nprivate:\n    std::unique_ptr<Child> m_child;    \n};\n\nclass Child {\npublic:\n    ref() { m_parent.ref(); }\n    deref() { m_parent.deref(); }\n\nprivate:\n    Child(Parent& parent) : m_parent(parent) { }\n    friend class Parent;\n\n    Parent& m_parent;\n}\n```\n\n### Reference Cycles\n\nA reference cycle occurs when an object X which holds `Ref` or `RefPtr` to another object Y which in turns owns X by `Ref` or `RefPtr`.\nFor example, the following code causes a trivial memory leak because A holds a `Ref` of B, and B in turn holds `Ref` of the A:\n\n```cpp\nclass A : RefCounted<A> {\npublic:\n    static Ref<A> create() { return adoptRef(*new A); }\n    B& b() {\n        if (!m_b)\n            m_b = B::create(*this);\n        return m_b.get();\n    }\nprivate:\n    Ref<B> m_b;\n};\n\nclass B : RefCounted<B> {\npublic:\n    static Ref<B> create(A& a) { return adoptRef(*new B(a)); }\n\nprivate:\n    B(A& a) : m_a(a) { }\n    Ref<A> m_a;\n};\n```\n\nWe need to be particularly careful in WebCore with regards to garbage collected objects\nbecause they often keep other ref counted C++ objects alive without having any `Ref` or `RefPtr` in C++ code.\nIt’s almost always incorrect to strongly keep JS value alive in WebCore code because of this.\n\n### ProtectedThis Pattern\n\nBecause many objects in WebCore are managed by tree data structures,\na function that operates on a node of such a tree data structure can end up deleting itself (`this` object).\nThis is highly undesirable as such code often ends up having a use-after-free bug.\n\nTo prevent these kinds of bugs, we often employ a strategy of adding `protectedThis` local variable of `Ref` or `RefPtr` type, and store `this` object as [follows](https://github.com/WebKit/WebKit/blob/ea1a56ee11a26f292f3d2baed2a3aea95fea40f1/Source/WebCore/dom/ContainerNode.cpp#L632):\n\n```cpp\nExceptionOr<void> ContainerNode::removeChild(Node& oldChild)\n{\n    // Check that this node is not \"floating\".\n    // If it is, it can be deleted as a side effect of sending mutation events.\n    ASSERT(refCount() || parentOrShadowHostNode());\n\n    Ref<ContainerNode> protectedThis(*this);\n\n    // NotFoundError: Raised if oldChild is not a child of this node.\n    if (oldChild.parentNode() != this)\n        return Exception { NotFoundError };\n\n    if (!removeNodeWithScriptAssertion(oldChild, ChildChange::Source::API))\n        return Exception { NotFoundError };\n\n    rebuildSVGExtensionsElementsIfNecessary();\n    dispatchSubtreeModifiedEvent();\n\n    return { };\n}\n```\n\nIn this code, the act of removing `oldChild` can execute arbitrary JavaScript and delete `this` object.\nAs a result, `rebuildSVGExtensionsElementsIfNecessary` or `dispatchSubtreeModifiedEvent` might be called\nafter `this` object had already been free’ed if we didn’t have `protectedThis`,\nwhich guarantees that this object’s reference count is at least 1\n(because [Ref’s constructor](https://github.com/WebKit/WebKit/blob/ea1a56ee11a26f292f3d2baed2a3aea95fea40f1/Source/WTF/wtf/Ref.h#L64) increments the reference count by 1).\n\nThis pattern can be used for other objects that need to be *protected* from destruction inside a code block.\nIn the [following code](https://github.com/WebKit/WebKit/blob/ea1a56ee11a26f292f3d2baed2a3aea95fea40f1/Source/WebCore/dom/ContainerNode.cpp#L162),\n`childToRemove` was passed in using C++ reference.\nBecause this function is going to remove this child node from `this` container node,\nit can get destructed while the function is still running.\nTo prevent from having any chance of use-after-free bugs,\nthis function stores it in Ref (`protectedChildToRemove`) which guarantees the object to be alive until the function returns control back to the caller:\n\n```cpp\nALWAYS_INLINE bool ContainerNode::removeNodeWithScriptAssertion(Node& childToRemove, ChildChangeSource source)\n{\n    Ref<Node> protectedChildToRemove(childToRemove);\n    ASSERT_WITH_SECURITY_IMPLICATION(childToRemove.parentNode() == this);\n    {\n        ScriptDisallowedScope::InMainThread scriptDisallowedScope;\n        ChildListMutationScope(*this).willRemoveChild(childToRemove);\n    }\n    ..\n```\n\nAlso see [Darin’s RefPtr Basics](https://webkit.org/blog/5381/refptr-basics/) for further reading.\n\n## Weak Pointers in WebKit\n\nIn some cases, it’s desirable to express a relationship between two objects without necessarily tying their lifetime.\nIn those cases, `WeakPtr` is useful. Like [std::weak_ptr](https://en.cppreference.com/w/cpp/memory/weak_ptr),\nthis class creates a non-owning reference to an object. There is a lot of legacy code which uses a raw pointer for this purpose,\nbut there is an ongoing effort to always use WeakPtr instead so do that in new code you’re writing.\n\nTo create a `WeakPtr` to an object, we need to make its class inherit from `CanMakeWeakPtr` as follows:\n\n```cpp\nclass A : CanMakeWeakPtr<A> { }\n\n...\n\nfunction foo(A& a) {\n    WeakPtr<A> weakA = a;\n}\n```\n\nDereferencing a `WeakPtr` will return `nullptr` when the referenced object is deleted.\nBecause creating a `WeakPtr` allocates an extra `WeakPtrImpl` object,\nyou’re still responsible to dispose of `WeakPtr` at appropriate time.\n\n### WeakHashSet\n\nWhile ordinary `HashSet` does not support having `WeakPtr` as its elements,\nthere is a specialized `WeakHashSet` class, which supports referencing a set of elements weakly.\nBecause `WeakHashSet` does not get notified when the referenced object is deleted,\nthe users / owners of `WeakHashSet` are still responsible for deleting the relevant entries from the set.\nOtherwise, WeakHashSet will hold onto `WeakPtrImpl` until `computeSize` is called or rehashing happens.\n\n### WeakHashMap\n\nLike `WeakHashSet`, `WeakHashMap` is a specialized class to map a WeakPtr key with a value.\nBecause `WeakHashMap` does not get notified when the referenced object is deleted,\nthe users / owners of `WeakHashMap` are still responsible for deleting the relevant entries from the map.\nOtherwise, the memory space used by `WeakPtrImpl` and its value will not be free'ed up until\nnext rehash or amortized cleanup cycle arrives (based on the total number of read or write operations).\n\n# Understanding Document Object Model\n\n## Introduction\n\n[Document Object Model](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model)\n(often abbreviated as DOM) is the tree data structured resulted from parsing HTML.\nIt consists of one or more instances of subclasses of [Node](https://developer.mozilla.org/en-US/docs/Web/API/Node)\nand represents the document tree structure. Parsing a simple HTML like this:\n\n```cpp\n<!DOCTYPE html>\n<html>\n<body>hi</body>\n</html>\n```\n\nWill generate the following six distinct DOM nodes:\n\n* [Document](https://developer.mozilla.org/en-US/docs/Web/API/Document)\n    * [DocumentType](https://developer.mozilla.org/en-US/docs/Web/API/DocumentType)\n    * [HTMLHtmlElement](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/html)\n        * [HTMLHeadElement](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/head)\n        * [HTMLBodyElement](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body)\n            * [Text](https://developer.mozilla.org/en-US/docs/Web/API/Text) with the value of “hi”\n\nNote that HTMLHeadElement (i.e. `<head>`) is created implicitly by WebKit\nper the way [HTML parser](https://html.spec.whatwg.org/multipage/parsing.html#parsing) is specified.\n\nBroadly speaking, DOM node divides into the following categories:\n\n* [Container nodes](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/dom/ContainerNode.h) such as [Document](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/dom/Document.h), [Element](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/dom/Element.h), and [DocumentFragment](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/dom/DocumentFragment.h).\n* Leaf nodes such as [DocumentType](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/dom/DocumentType.h), [Text](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/dom/Text.h), and [Attr](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/dom/Attr.h).\n\n[Document](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/dom/Document.h) node,\nas the name suggests a single HTML, SVG, MathML, or other XML document,\nand is the [owner](https://github.com/WebKit/WebKit/blob/ea1a56ee11a26f292f3d2baed2a3aea95fea40f1/Source/WebCore/dom/Node.h#L359) of every node in the document.\nIt is the very first node in any document that gets created and the very last node to be destroyed.\n\nNote that a single web [page](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/page/Page.h) may consist of multiple documents\nsince [iframe](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe)\nand [object](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object) elements may contain\na child [frame](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/page/Frame.h),\nand form a [frame tree](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/page/FrameTree.h).\nBecause JavaScript can [open a new window](https://developer.mozilla.org/en-US/docs/Web/API/Window/open)\nunder user gestures and have [access back to its opener](https://developer.mozilla.org/en-US/docs/Web/API/Window/opener),\nmultiple web pages across multiple tabs might be able to communicate with one another via JavaScript API\nsuch as [postMessage](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage).\n\n## JavaScript Wrappers and IDL files\n\nIn addition to typical C++ translation units (.cpp) and C++ header files (.cpp) along with some Objective-C and Objective-C++ files,\n[WebCore](https://github.com/WebKit/WebKit/tree/main/Source/WebCore) contains hundreds of [Web IDL](https://webidl.spec.whatwg.org) (.idl) files.\n[Web IDL](https://webidl.spec.whatwg.org) is an [interface description language](https://en.wikipedia.org/wiki/Interface_description_language)\nand it's used to define the shape and the behavior of JavaScript API implemented in WebKit.\n\nWhen building WebKit, a [perl script](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/bindings/scripts/CodeGeneratorJS.pm)\ngenerates appropriate C++ translation units and C++ header files corresponding to these IDL files under `WebKitBuild/Debug/DerivedSources/WebCore/`\nwhere `Debug` is the current build configuration (e.g. it could be `Release-iphonesimulator` for example).\n\nThese auto-generated files along with manually written files [Source/WebCore/bindings](https://github.com/WebKit/WebKit/tree/main/Source/WebCore/bindings)\nare called **JS DOM binding code** and implements JavaScript API for objects and concepts whose underlying shape and behaviors are written in C++.\n\nFor example, C++ implementation of [Node](https://developer.mozilla.org/en-US/docs/Web/API/Node)\nis [Node class](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/dom/Node.h)\nand its JavaScript interface is implemented by `JSNode` class.\nThe class declaration and most of definitions are auto-generated\nat `WebKitBuild/Debug/DerivedSources/WebCore/JSNode.h` and `WebKitBuild/Debug/DerivedSources/WebCore/JSNode.cpp` for debug builds.\nIt also has some custom, manually written, bindings code in\n[Source/WebCore/bindings/js/JSNodeCustom.cpp](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/bindings/js/JSNodeCustom.cpp).\nSimilarly, C++ implementation of [Range interface](https://developer.mozilla.org/en-US/docs/Web/API/Range)\nis [Range class](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/dom/Range.h)\nwhilst its JavaScript API is implemented by the auto-generated JSRange class\n(located at `WebKitBuild/Debug/DerivedSources/WebCore/JSRange.h` and `WebKitBuild/Debug/DerivedSources/WebCore/JSRange.cpp` for debug builds)\nWe call instances of these JSX classes *JS wrappers* of X.\n\nThese JS wrappers exist in what we call a [`DOMWrapperWorld`](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/bindings/js/DOMWrapperWorld.h).\nEach `DOMWrapperWorld` has its own JS wrapper for each C++ object.\nAs a result, a single C++ object may have multiple JS wrappers in distinct `DOMWrapperWorld`s.\nThe most important `DOMWrapperWorld` is the main `DOMWrapperWorld` which runs the scripts of web pages WebKit loaded\nwhile other `DOMWrapperWorld`s are typically used to run code for browser extensions and other code injected by applications that embed WebKit.\n![Diagram of JS wrappers](resources/js-wrapper.png)\nJSX.h provides `toJS` functions which creates a JS wrapper for X\nin a given [global object](https://developer.mozilla.org/en-US/docs/Glossary/Global_object)’s `DOMWrapperWorld`,\nand toWrapped function which returns the underlying C++ object.\nFor example, `toJS` function for [Node](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/dom/Node.h)\nis defined in [Source/WebCore/bindings/js/JSNodeCustom.h](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/bindings/js/JSNodeCustom.h).\n\nWhen there is already a JS wrapper object for a given C++ object,\n`toJS` function will find the appropriate JS wrapper in\na [hash map](https://github.com/WebKit/WebKit/blob/ea1a56ee11a26f292f3d2baed2a3aea95fea40f1/Source/WebCore/bindings/js/DOMWrapperWorld.h#L74)\nof the given `DOMWrapperWorld`.\nBecause a hash map lookup is expensive, some WebCore objects inherit from\n[ScriptWrappable](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/bindings/js/ScriptWrappable.h),\nwhich has an inline pointer to the JS wrapper for the main world if one was already created.\n\n### Adding new JavaScript API\n\nTo introduce a new JavaScript API in [WebCore](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/), \nfirst identify the directory under which to implement this new API, and introduce corresponding Web IDL files (e.g., \"dom/SomeAPI.idl\").\n\nNew IDL files should be listed in [Source/WebCore/DerivedSources.make](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/DerivedSources.make)\nso that the aforementioned perl script can generate corresponding JS*.cpp and JS*.h files.\nAdd these newly generated JS*.cpp files to [Source/WebCore/Sources.txt](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/Sources.txt)\nin order for them to be compiled.\n\nAlso, add the new IDL file(s) to [Source/WebCore/CMakeLists.txt](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/CMakeLists.txt).\n\nRemember to add these files to [WebCore's Xcode project](https://github.com/WebKit/WebKit/tree/main/Source/WebCore/WebCore.xcodeproj) as well.\n\nFor example, [this commit](https://github.com/WebKit/WebKit/commit/cbda68a29beb3da90d19855882c5340ce06f1546)\nintroduced [`IdleDeadline.idl`](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/dom/IdleDeadline.idl)\nand added `JSIdleDeadline.cpp` to the list of derived sources to be compiled.\n\n## JS Wrapper Lifecycle Management\n\nAs a general rule, a JS wrapper keeps its underlying C++ object alive by means of reference counting\nin [JSDOMWrapper](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/bindings/js/JSDOMWrapper.h) temple class\nfrom which all JS wrappers in WebCore inherits.\nHowever, **C++ objects do not keep their corresponding JS wrapper in each world alive** by the virtue of them staying alive\nas such a circular dependency will result in a memory leak.\n\nThere are two primary mechanisms to keep JS wrappers alive in [WebCore](https://github.com/WebKit/WebKit/tree/main/Source/WebCore):\n\n* **Visit Children** - When JavaScriptCore’s garbage collection visits some JS wrapper during\n    the [marking phase](https://en.wikipedia.org/wiki/Tracing_garbage_collection#Basic_algorithm),\n    visit another JS wrapper or JS object that needs to be kept alive.\n* **Reachable from Opaque Roots** - Tell JavaScriptCore’s garbage collection that a JS wrapper is reachable\n    from an opaque root which was added to the set of opaque roots during marking phase.\n\n### Visit Children\n\n*Visit Children* is the mechanism we use when a JS wrapper needs to keep another JS wrapper or\n[JS object](https://github.com/WebKit/WebKit/blob/main/Source/JavaScriptCore/runtime/JSObject.h) alive.\n\nFor example, [`ErrorEvent` object](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/dom/ErrorEvent.idl)\nuses this method in\n[Source/WebCore/bindings/js/JSErrorEventCustom.cpp](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/bindings/js/JSErrorEventCustom.cpp)\nto keep its \"error\" IDL attribute as follows:\n\n```cpp\ntemplate<typename Visitor>\nvoid JSErrorEvent::visitAdditionalChildren(Visitor& visitor)\n{\n    wrapped().originalError().visit(visitor);\n}\n\nDEFINE_VISIT_ADDITIONAL_CHILDREN(JSErrorEvent);\n```\n\nHere, `DEFINE_VISIT_ADDITIONAL_CHILDREN` macro generates template instances of visitAdditionalChildren\nwhich gets called by the JavaScriptCore's garbage collector.\nWhen the garbage collector visits an instance `ErrorEvent` object,\nit also visits `wrapped().originalError()`, which is the JavaScript value of \"error\" attribute:\n\n```cpp\nclass ErrorEvent final : public Event {\n...\n    const JSValueInWrappedObject& originalError() const { return m_error; }\n    SerializedScriptValue* serializedError() const { return m_serializedError.get(); }\n...\n    JSValueInWrappedObject m_error;\n    RefPtr<SerializedScriptValue> m_serializedError;\n    bool m_triedToSerialize { false };\n};\n```\n\nNote that [`JSValueInWrappedObject`](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/bindings/js/JSValueInWrappedObject.h)\nuses [`Weak`](https://github.com/WebKit/WebKit/blob/main/Source/JavaScriptCore/heap/Weak.h),\nwhich does not keep the referenced object alive on its own.\nWe can't use a reference type such as [`Strong`](https://github.com/WebKit/WebKit/blob/main/Source/JavaScriptCore/heap/Strong.h)\nwhich keeps the referenced object alive on its own since the stored JS object may also have this `ErrorEvent` object stored as its property.\nBecause the garbage collector has no way of knowing or clearing the `Strong` reference\nor the property to `ErrorEvent` in this hypothetical version of `ErrorEvent`,\nit would never be able to collect either object, resulting in a memory leak.\n\nTo use this method of keeping a JavaScript object or wrapper alive, add `JSCustomMarkFunction` to the IDL file,\nthen introduce JS*Custom.cpp file under [Source/WebCore/bindings/js](https://github.com/WebKit/WebKit/tree/main/Source/WebCore/bindings/js)\nand implement `template<typename Visitor> void JS*Event::visitAdditionalChildren(Visitor& visitor)` as seen above for `ErrorEvent`.\n\n**visitAdditionalChildren is called concurrently** while the main thread is running.\nAny operation done in visitAdditionalChildren needs to be multi-thread safe.\nFor example, it cannot increment or decrement the reference count of a `RefCounted` object\nor create a new `WeakPtr` from `CanMakeWeakPtr` since these WTF classes are not thread safe.\n\n### Opaque Roots\n\n*Reachable from Opaque Roots* is the mechanism we use when we have an underlying C++ object and want to keep JS wrappers of other C++ objects alive.\n\nTo see why, let's consider a [`StyleSheet` object](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/css/StyleSheet.idl).\nSo long as this object is alive, we also need to keep the DOM node returned by the `ownerNode` attribute.\nAlso, the object itself needs to be kept alive so long as the owner node is alive\nsince this [`StyleSheet` object] can be accessed via [`sheet` IDL attribute](https://drafts.csswg.org/cssom/#the-linkstyle-interface)\nof the owner node.\nIf we were to use the *visit children* mechanism,\nwe need to visit every JS wrapper of the owner node whenever this `StyleSheet` object is visited by the garbage collector,\nand we need to visit every JS wrapper of the `StyleSheet` object whenever an owner node is visited by the garbage collector.\nBut in order to do so, we need to query every `DOMWrapperWorld`'s wrapper map to see if there is a JavaScript wrapper.\nThis is an expensive operation that needs to happen all the time,\nand creates a tie coupling between `Node` and `StyleSheet` objects\nsince each JS wrapper objects need to be  aware of other objects' existence. \n\n*Opaque roots* solves these problems by letting the garbage collector know that a particular JavaScript wrapper needs to be kept alive\nso long as the gargabe collector had encountered specific opaque root(s) this JavaScript wrapper cares about\neven if the garbage collector didn't visit the JavaScript wrapper directly.\nAn opaque root is simply a `void*` identifier the garbage collector keeps track of during each marking phase,\nand it does not conform to a specific interface or behavior.\nIt could have been an arbitrary integer value but `void*` is used out of convenience since pointer values of live objects are unique.\n\nIn the case of a `StyleSheet` object, `StyleSheet`'s JavaScript wrapper tells the garbage collector that it needs to be kept alive\nbecause an opaque root it cares about has been encountered whenever `ownerNode` is visited by the garbage collector.\n\nIn the most simplistic model, the opaque root for this case will be the `ownerNode` itself.\nHowever, each `Node` object also has to keep its parent, siblings, and children alive.\nTo this end, each `Node` designates the [root](https://dom.spec.whatwg.org/#concept-tree-root) node as its opaque root.\nBoth `Node` and `StyleSheet` objects use this unique opaque root as a way of communicating with the gargage collector.\n\nFor example, `StyleSheet` object informs the garbage collector of this opaque root when it's asked to visit its children in\n[JSStyleSheetCustom.cpp](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/bindings/js/JSStyleSheetCustom.cpp):\n\n```cpp\ntemplate<typename Visitor>\nvoid JSStyleSheet::visitAdditionalChildren(Visitor& visitor)\n{\n    visitor.addOpaqueRoot(root(&wrapped()));\n}\n```\n\nHere, `void* root(StyleSheet*)` returns the opaque root of the `StyleSheet` object as follows:\n\n```cpp\ninline void* root(StyleSheet* styleSheet)\n{\n    if (CSSImportRule* ownerRule = styleSheet->ownerRule())\n        return root(ownerRule);\n    if (Node* ownerNode = styleSheet->ownerNode())\n        return root(ownerNode);\n    return styleSheet;\n}\n```\n\nAnd then in `JSStyleSheet.cpp` (located at `WebKitBuild/Debug/DerivedSources/WebCore/JSStyleSheet.cpp` for debug builds)\n`JSStyleSheetOwner` (a helper JavaScript object to communicate with the garbage collector) tells the garbage collector\nthat `JSStyleSheet` should be kept alive so long as the garbage collector had encountered this `StyleSheet`'s opaque root:\n\n```cpp\nbool JSStyleSheetOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, AbstractSlotVisitor& visitor, const char** reason)\n{\n    auto* jsStyleSheet = jsCast<JSStyleSheet*>(handle.slot()->asCell());\n    void* root = WebCore::root(&jsStyleSheet->wrapped());\n    if (UNLIKELY(reason))\n        *reason = \"Reachable from jsStyleSheet\";\n    return visitor.containsOpaqueRoot(root);\n}\n```\n\nGenerally, using opaque roots as a way of keeping JavaScript wrappers involve two steps:\n 1. Add opaque roots in `visitAdditionalChildren`.\n 2. Return true in `isReachableFromOpaqueRoots` when relevant opaque roots are found.\n\nThe first step can be achieved by using the aforementioned `JSCustomMarkFunction` with `visitAdditionalChildren`.\nAlternatively and more preferably, `GenerateAddOpaqueRoot` can be added to the IDL interface to auto-generate this code.\nFor example, [AbortController.idl](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/dom/AbortController.idl)\nmakes use of this IDL attribute as follows:\n\n```cpp\n[\n    Exposed=(Window,Worker),\n    GenerateAddOpaqueRoot=signal\n] interface AbortController {\n    [CallWith=ScriptExecutionContext] constructor();\n\n    [SameObject] readonly attribute AbortSignal signal;\n\n    [CallWith=GlobalObject] undefined abort(optional any reason);\n};\n```\n\nHere, `signal` is a public member function funtion of\nthe [underlying C++ object](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/dom/AbortController.h):\n\n```cpp\nclass AbortController final : public ScriptWrappable, public RefCounted<AbortController> {\n    WTF_MAKE_ISO_ALLOCATED(AbortController);\npublic:\n    static Ref<AbortController> create(ScriptExecutionContext&);\n    ~AbortController();\n\n    AbortSignal& signal();\n    void abort(JSDOMGlobalObject&, JSC::JSValue reason);\n\nprivate:\n    explicit AbortController(ScriptExecutionContext&);\n\n    Ref<AbortSignal> m_signal;\n};\n```\n\nWhen `GenerateAddOpaqueRoot` is specified without any value, it automatically calls `opaqueRoot()` instead.\n\nLike visitAdditionalChildren, **adding opaque roots happen concurrently** while the main thread is running.\nAny operation done in visitAdditionalChildren needs to be multi-thread safe.\nFor example, it cannot increment or decrement the reference count of a `RefCounted` object\nor create a new `WeakPtr` from `CanMakeWeakPtr` since these WTF classes are not thread safe.\n\nThe second step can be achived by adding `CustomIsReachable` to the IDL file and\nimplementing `JS*Owner::isReachableFromOpaqueRoots` in JS*Custom.cpp file.\nAlternatively and more preferably, `GenerateIsReachable` can be added to IDL file to automatically generate this code\nwith the following values:\n * No value - Adds the result of calling `root(T*)` on the underlying C++ object of type T as the opaque root.\n * `Impl` - Adds the underlying C++ object as the opaque root.\n * `ReachableFromDOMWindow` - Adds a [`DOMWindow`](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/page/DOMWindow.h)\n    returned by `window()` as the opaque root.\n * `ReachableFromNavigator` - Adds a [`Navigator`](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/page/Navigator.h)\n    returned by `navigator()` as the opaque root.\n * `ImplDocument` - Adds a [`Document`](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/dom/Document.h)\n    returned by `document()` as the opaque root.\n * `ImplElementRoot` - Adds the root node of a [`Element`](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/dom/Element.h)\n    returned by `element()` as the opaque root.\n * `ImplOwnerNodeRoot` - Adds the root node of a [`Node`](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/dom/Node.h)\n    returned by `ownerNode()` as the opaque root.\n * `ImplScriptExecutionContext` - Adds a [`ScriptExecutionContext`](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/dom/ScriptExecutionContext.h)\n    returned by `scriptExecutionContext()` as the opaque root.\n\nSimilar to visiting children or adding opaque roots, **whether an opaque root is reachable or not is checked in parallel**.\nHowever, it happens **while the main thread is paused** unlike visiting children or adding opaque roots,\nwhich happen concurrently while the main thread is running.\nThis means that any operation done in `JS*Owner::isReachableFromOpaqueRoots`\nor any function called by GenerateIsReachable cannot have thread unsafe side effects\nsuch as incrementing or decrementing the reference count of a `RefCounted` object\nor creating a new `WeakPtr` from `CanMakeWeakPtr` since these WTF classes' mutation operations are not thread safe.\n\n## Active DOM Objects\n\nVisit children and opaque roots are great way to express lifecycle relationships between JS wrappers\nbut there are cases in which a JS wrapper needs to be kept alive without any relation to other objects.\nConsider [`XMLHttpRequest`](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest).\nIn the following example, JavaScript loses all references to the `XMLHttpRequest` object and its event listener\nbut when a new response gets received, an event will be dispatched on the object,\nre-introducing a new JavaScript reference to the object.\nThat is, the object survives garbage collection's\n[mark and sweep cycles](https://en.wikipedia.org/wiki/Tracing_garbage_collection#Basic_algorithm)\nwithout having any ties to other [\"root\" objects](https://en.wikipedia.org/wiki/Tracing_garbage_collection#Reachability_of_an_object).\n\n```js\nfunction fetchURL(url, callback)\n{\n    const request = new XMLHttpRequest();\n    request.addEventListener(\"load\", callback);\n    request.open(\"GET\", url);\n    request.send();\n}\n```\n\nIn WebKit, we consider such an object to have a *pending activity*.\nExpressing the presence of such a pending activity is a primary use case of\n[`ActiveDOMObject`](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/dom/ActiveDOMObject.h).\n\nBy making an object inherit from [`ActiveDOMObject`](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/dom/ActiveDOMObject.h)\nand [annotating IDL as such](https://github.com/WebKit/WebKit/blob/64cdede660d9eaea128fd151281f4715851c4fe2/Source/WebCore/xml/XMLHttpRequest.idl#L42),\nWebKit will [automatically generate `isReachableFromOpaqueRoot` function](https://github.com/WebKit/WebKit/blob/64cdede660d9eaea128fd151281f4715851c4fe2/Source/WebCore/bindings/scripts/CodeGeneratorJS.pm#L5029)\nwhich returns true whenever `ActiveDOMObject::hasPendingActivity` returns true\neven though the garbage collector may not have encountered any particular opaque root to speak of in this instance.\n\nIn the case of [`XMLHttpRequest`](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/xml/XMLHttpRequest.h),\n`hasPendingActivity` [will return true](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/xml/XMLHttpRequest.cpp#L1195)\nso long as there is still an active network activity associated with the object.\nOnce the resource is fully fetched or failed, it ceases to have a pending activity.\nThis way, JS wrapper of `XMLHttpRequest` is kept alive so long as there is an active network activity.\n\nThere is one other related use case of active DOM objects,\nand that's when a document enters the [back-forward cache](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/history/BackForwardCache.h)\nand when the entire [page](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/page/Page.h) has to pause\nfor [other reasons](https://github.com/WebKit/WebKit/blob/64cdede660d9eaea128fd151281f4715851c4fe2/Source/WebCore/dom/ActiveDOMObject.h#L45).\n\nWhen this happens, each active DOM object associated with the document\n[gets suspended](https://github.com/WebKit/WebKit/blob/64cdede660d9eaea128fd151281f4715851c4fe2/Source/WebCore/dom/ActiveDOMObject.h#L70).\nEach active DOM object can use this opportunity to prepare itself to pause whatever pending activity;\nfor example, `XMLHttpRequest` [will stop dispatching `progress` event](https://github.com/WebKit/WebKit/blob/64cdede660d9eaea128fd151281f4715851c4fe2/Source/WebCore/xml/XMLHttpRequest.cpp#L1157)\nand media elements [will stop playback](https://github.com/WebKit/WebKit/blob/64cdede660d9eaea128fd151281f4715851c4fe2/Source/WebCore/html/HTMLMediaElement.cpp#L6008).\nWhen a document gets out of the back-forward cache or resumes for other reasons,\neach active DOM object [gets resumed](https://github.com/WebKit/WebKit/blob/64cdede660d9eaea128fd151281f4715851c4fe2/Source/WebCore/dom/ActiveDOMObject.h#L71).\nHere, each object has the opportunity to resurrect the previously pending activity once again.\n\n### Creating a Pending Activity\n\nThere are a few ways to create a pending activity on an [active DOM objects](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/dom/ActiveDOMObject.h).\n\nWhen the relevant Web standards says to [queue a task](https://html.spec.whatwg.org/multipage/webappapis.html#queue-a-task) to do some work,\none of the following member functions of [`ActiveDOMObject`](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/dom/ActiveDOMObject.h) should be used:\n * [`queueTaskKeepingObjectAlive`](https://github.com/WebKit/WebKit/blob/64cdede660d9eaea128fd151281f4715851c4fe2/Source/WebCore/dom/ActiveDOMObject.h#L106)\n * [`queueCancellableTaskKeepingObjectAlive`](https://github.com/WebKit/WebKit/blob/64cdede660d9eaea128fd151281f4715851c4fe2/Source/WebCore/dom/ActiveDOMObject.h#L114)\n * [`queueTaskToDispatchEvent`](https://github.com/WebKit/WebKit/blob/64cdede660d9eaea128fd151281f4715851c4fe2/Source/WebCore/dom/ActiveDOMObject.h#L124)\n * [`queueCancellableTaskToDispatchEvent`](https://github.com/WebKit/WebKit/blob/64cdede660d9eaea128fd151281f4715851c4fe2/Source/WebCore/dom/ActiveDOMObject.h#L130)\nThese functions will automatically create a pending activity until a newly enqueued task is executed.\n\nAlternatively, [`makePendingActivity`](https://github.com/WebKit/WebKit/blob/64cdede660d9eaea128fd151281f4715851c4fe2/Source/WebCore/dom/ActiveDOMObject.h#L97)\ncan be used to create a [pending activity token](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/dom/ActiveDOMObject.h#L78)\nfor an active DOM object.\nThis will keep a pending activity on the active DOM object until all tokens are dead.\n\nFinally, when there is a complex condition under which a pending activity exists,\nan active DOM object can override [`virtualHasPendingActivity`](https://github.com/WebKit/WebKit/blob/64cdede660d9eaea128fd151281f4715851c4fe2/Source/WebCore/dom/ActiveDOMObject.h#L147)\nmember function and return true whilst such a condition holds.\nNote that `virtualHasPendingActivity` should return true so long as there is a possibility of dispatching an event or invoke JavaScript in any way in the future.\nIn other words, a pending activity should exist while an object is doing some work in C++ well before any event dispatching is scheduled.\nAnytime there is no pending activity, JS wrappers of the object can get deleted by the garbage collector.\n\n## Reference Counting of DOM Nodes\n\n[`Node`](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/dom/Node.h) is a reference counted object but with a twist.\nIt has a [separate boolean flag](https://github.com/WebKit/WebKit/blob/297c01a143f649b34544f0cb7a555decf6ecbbfd/Source/WebCore/dom/Node.h#L832)\nindicating whether it has a [parent](https://dom.spec.whatwg.org/#concept-tree-parent) node or not.\nA `Node` object is [not deleted](https://github.com/WebKit/WebKit/blob/297c01a143f649b34544f0cb7a555decf6ecbbfd/Source/WebCore/dom/Node.h#L801)\nso long as it has a reference count above 0 or this boolean flag is set.\nThe boolean flag effectively functions as a `RefPtr` from a parent `Node`\nto each one of its [child](https://dom.spec.whatwg.org/#concept-tree-child) `Node`.\nWe do this because `Node` only knows its [first child](https://dom.spec.whatwg.org/#concept-tree-first-child)\nand its [last child](https://dom.spec.whatwg.org/#concept-tree-last-child)\nand each [sibling](https://dom.spec.whatwg.org/#concept-tree-sibling) nodes are implemented\nas a [doubly linked list](https://en.wikipedia.org/wiki/Doubly_linked_list) to allow\nefficient [insertion](https://dom.spec.whatwg.org/#concept-node-insert)\nand [removal](https://dom.spec.whatwg.org/#concept-node-remove) and traversal of sibling nodes.\n\nConceptually, each `Node` is kept alive by its root node and external references to it,\nand we use the root node as an opaque root of each `Node`'s JS wrapper.\nTherefore the JS wrapper of each `Node` is kept alive as long as either the node itself\nor any other node which shares the same root node is visited by the garbage collector.\n\nOn the other hand, a `Node` does not keep its parent or any of its\n[shadow-including ancestor](https://dom.spec.whatwg.org/#concept-shadow-including-ancestor) `Node` alive\neither by reference counting or via the boolean flag even though the JavaScript API requires this to be the case.\nIn order to implement this DOM API behavior,\nWebKit [will create](https://github.com/WebKit/WebKit/blob/297c01a143f649b34544f0cb7a555decf6ecbbfd/Source/WebCore/bindings/js/JSNodeCustom.cpp#L174)\na JS wrapper for each `Node` which is being removed from its parent if there isn't already one.\nA `Node` which is a root node (of the newly removed [subtree](https://dom.spec.whatwg.org/#concept-tree)) is an opaque root of its JS wrapper,\nand the garbage collector will visit this opaque root if there is any JS wrapper in the removed subtree that needs to be kept alive.\nIn effect, this keeps the new root node and all its [descendant](https://dom.spec.whatwg.org/#concept-tree-descendant) nodes alive\nif the newly removed subtree contains any node with a live JS wrapper, preserving the API contract.\n\nIt's important to recognize that storing a `Ref` or a `RefPtr` to another `Node` in a `Node` subclass\nor an object directly owned by the Node can create a [reference cycle](https://en.wikipedia.org/wiki/Reference_counting#Dealing_with_reference_cycles),\nor a reference that never gets cleared.\nIt's not guaranteed that every node is [disconnected](https://dom.spec.whatwg.org/#connected)\nfrom a [`Document`](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/dom/Document.h) at some point in the future,\nand some `Node` may always have a parent node or a child node so long as it exists.\nOnly permissible circumstances in which a `Ref` or a `RefPtr` to another `Node` can be stored\nin a `Node` subclass or other data structures owned by it is if it's temporally limited.\nFor example, it's okay to store a `Ref` or a `RefPtr` in\nan enqueued [event loop task](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/dom/EventLoop.h#L69).\nIn all other circumstances, `WeakPtr` should be used to reference another `Node`,\nand JS wrapper relationships such as opaque roots should be used to preserve the lifecycle ties between `Node` objects.\n\nIt's equally crucial to observe that keeping C++ Node object alive by storing `Ref` or `RefPtr`\nin an enqueued [event loop task](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/dom/EventLoop.h#L69)\ndoes not keep its JS wrapper alive, and can result in the JS wrapper of a conceptually live object to be erroneously garbage collected.\nTo avoid this problem, use [`GCReachableRef`](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/dom/GCReachableRef.h) instead\nto temporarily hold a strong reference to a node over a period of time.\nFor example, [`HTMLTextFormControlElement::scheduleSelectEvent()`](https://github.com/WebKit/WebKit/blob/297c01a143f649b34544f0cb7a555decf6ecbbfd/Source/WebCore/html/HTMLTextFormControlElement.cpp#L547)\nuses `GCReachableRef` to fire an event in an event loop task:\n```cpp\nvoid HTMLTextFormControlElement::scheduleSelectEvent()\n{\n    document().eventLoop().queueTask(TaskSource::UserInteraction, [protectedThis = GCReachableRef { *this }] {\n        protectedThis->dispatchEvent(Event::create(eventNames().selectEvent, Event::CanBubble::Yes, Event::IsCancelable::No));\n    });\n}\n```\n\nAlternatively, we can make it inherit from an [active DOM object](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/dom/ActiveDOMObject.h),\nand use one of the following functions to enqueue a task or an event:\n - [`queueTaskKeepingObjectAlive`](https://github.com/WebKit/WebKit/blob/297c01a143f649b34544f0cb7a555decf6ecbbfd/Source/WebCore/dom/ActiveDOMObject.h#L107)\n - [`queueCancellableTaskKeepingObjectAlive`](https://github.com/WebKit/WebKit/blob/297c01a143f649b34544f0cb7a555decf6ecbbfd/Source/WebCore/dom/ActiveDOMObject.h#L115)\n - [`queueTaskToDispatchEvent`](https://github.com/WebKit/WebKit/blob/297c01a143f649b34544f0cb7a555decf6ecbbfd/Source/WebCore/dom/ActiveDOMObject.h#L124)\n - [`queueCancellableTaskToDispatchEvent`](https://github.com/WebKit/WebKit/blob/297c01a143f649b34544f0cb7a555decf6ecbbfd/Source/WebCore/dom/ActiveDOMObject.h#L130)\n\n[`Document`](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/dom/Document.h) node has one more special quirk\nbecause every [`Node`](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/dom/Node.h) can have access to a document\nvia [`ownerDocument` property](https://developer.mozilla.org/en-US/docs/Web/API/Node/ownerDocument)\nwhether Node is [connected](https://dom.spec.whatwg.org/#connected) to the document or not.\nEvery document has a regular reference count used by external clients and\n[referencing node count](https://github.com/WebKit/WebKit/blob/297c01a143f649b34544f0cb7a555decf6ecbbfd/Source/WebCore/dom/Document.h#L2093).\nThe referencing node count of a document is the total number of nodes whose `ownerDocument` is the document.\nA document is [kept alive](https://github.com/WebKit/WebKit/blob/297c01a143f649b34544f0cb7a555decf6ecbbfd/Source/WebCore/dom/Document.cpp#L749)\nso long as its reference count and node referencing count is above 0.\nIn addition, when the regular reference count is to become 0,\nit clears various states including its internal references to owning Nodes to sever any reference cycles with them.\nA document is special in that sense that it can store `RefPtr` to other nodes.\nNote that whilst the referencing node count acts like `Ref` from each `Node` to its owner `Document`,\nstoring a `Ref` or a `RefPtr` to the same document or any other document will create\na [reference cycle](https://en.wikipedia.org/wiki/Reference_counting#Dealing_with_reference_cycles)\nand should be avoided unless it's temporally limited as noted above.\n\n## Inserting or Removing DOM Nodes \n\nFIXME: Talk about how a node insertion or removal works.\n\n# Understanding Style and Render Tree\n\nFIXME: Describe rendering/layers/compositing\n\n# Security Model of Web\n\nFor starters, refer to https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy.\n\nFIXME: Write this section.\n\n# WebKit2: WebKit’s Multi-Process Architecture\n\n## Overview\n\nIn order to safeguard the rest of the system and allow the application to remain responsive\neven if the user had loaded web page that infinite loops or otherwise hangs,\nthe modern incarnation of WebKit uses multi-process architecture.\nWeb pages are loaded in its own *WebContent* process.\nMultiple WebContent processes can share a browsing session, which lives in a shared network process.\nIn addition to handling all network accesses,\nthis process is also responsible for managing the disk cache and Web APIs that allow websites\nto store structured data such as [Web Storage API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API)\nand [IndexedDB API](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API):\n![Diagram of WebKit2's multi-process architecture](resources/webkit2-process-architecture.png)\nBecause a WebContent process can Just-in-Time compile arbitrary JavaScript code loaded from the internet,\nmeaning that it can write to memory that gets executed, this process is tightly sandboxed.\nIt does not have access to any file system unless the user grants an access,\nand it does not have direct access to the underlying operating system’s [clipboard](https://en.wikipedia.org/wiki/Clipboard_(computing)),\nmicrophone, or video camera even though there are Web APIs that grant access to those features.\nInstead, UI process brokers such requests.\n\nFIXME: How is IPC setup\n\nFIXME: How to add / modify an IPC message\n\n# Layout Tests: Tests of the Web for the Web\n\nLayout tests are WebKit tests written using Web technology such as HTML, CSS, and JavaScript,\nand it’s the primary mechanism by which much of WebCore is tested.\nRelevant layout test should be ran while you’re making code changes to WebCore and before uploading a patch to [bugs.webkit.org](https://bugs.webkit.org/).\nWhile [bugs.webkit.org](https://bugs.webkit.org/)’s Early Warning System will build and run tests on a set of configurations,\nindividual patch authors are ultimately responsible for any test failures that their patches cause.\n\n## Test Files and Expected Files\n\n### Directory Structure\n\n[LayoutTests](https://github.com/WebKit/WebKit/tree/main/LayoutTests) directory is organized by the category of tests.\nFor example, [LayoutTests/accessibility](https://github.com/WebKit/WebKit/tree/main/LayoutTests/accessibility) contains accessibility related tests,\nand [LayoutTests/fast/dom/HTMLAnchorElement](https://github.com/WebKit/WebKit/tree/main/LayoutTests/fast/dom/HTMLAnchorElement) contains\ntests for [the HTML anchor element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a).\n\nAny file that ends in `.html`, `.htm`, `.shtml`, `.xhtml`, `.mht`, `.xht`, `.xml`, `.svg`, or `.php` is considered as a test\nunless it’s preceded with `-ref`, `-notref`, `-expected`, or `-expected-mismatch` (these are used for ref tests; explained later).\nIt’s accompanied by another file of the same name except it ends in `-expected.txt` or `-expected.png`.\nThese are called *expected results* and constitutes the baseline output of a given test.\nWhen layout tests are ran, the test runner generates an output in the form of a plain text file and/or an PNG image,\nand it is compared against these expected results.\n\nIn the case expected results may differ from one platform to another,\nthe expected results for each test is stored in [LayoutTests/platform](https://github.com/WebKit/WebKit/tree/main/LayoutTests/platform).\nThe expected result of a given test exists in the corresponding directory in\neach subdirectory of [LayoutTests/platform](https://github.com/WebKit/WebKit/tree/main/LayoutTests/platform).\nFor example, the expected result of [LayoutTests/svg/W3C-SVG-1.1/animate-elem-46-t.svg](https://github.com/WebKit/WebKit/blob/main/LayoutTests/svg/W3C-SVG-1.1/animate-elem-46-t.svg)\nfor macOS Mojave is located at [LayoutTests/platform/mac-mojave/svg/W3C-SVG-1.1/animate-elem-46-t-expected.txt](https://github.com/WebKit/WebKit/blob/main/LayoutTests/platform/mac-mojave/svg/W3C-SVG-1.1/animate-elem-46-t-expected.txt).\n\nThese platform directories have a fallback order.\nFor example, running tests for WebKit2 on macOS Catalina will use the following fallback path from the most specific to most generic:\n\n* platform/mac-catalina-wk2 - Results for WebKit2 on macOS Catalina.\n* platform/mac-catalina - Results for WebKit2 and WebKitLegacy on macOS Catalina.\n* platform/mac-wk2 - Results for WebKit2 on all macOS.\n* platform/mac - Results for all macOS.\n* platform/wk2 - Results for WebKit2 on every operating system.\n* generic - Next to the test file.\n\n### Imported Tests\n\nTests under [LayoutTests/imported](https://github.com/WebKit/WebKit/tree/main/LayoutTests/imported) are imported from other repositories.\n**They should not be modified by WebKit patches** unless the change is made in respective repositories first.\n\nMost notable is [Web Platform Tests](https://web-platform-tests.org/),\nwhich are imported under [LayoutTests/imported/w3c/web-platform-tests](https://github.com/WebKit/WebKit/tree/main/LayoutTests/imported/w3c/web-platform-tests).\nThese are cross browser vendor tests developed by W3C. Mozilla, Google, and Apple all contribute many tests to this shared test repository.\n\n### HTTP Tests\n\nTo open tests under [LayoutTests/http](https://github.com/WebKit/WebKit/tree/main/LayoutTests/http) or\n[LayoutTests/imported/w3c/web-platform-tests](https://github.com/WebKit/WebKit/tree/main/LayoutTests/imported/w3c/web-platform-tests),\nuse [Tools/Scripts/open-layout-test](https://github.com/WebKit/WebKit/blob/main/Tools/Scripts/open-layout-test) with the path to a test.\n\nYou can also manually start HTTP servers with [`Tools/Scripts/run-webkit-httpd`](https://github.com/WebKit/WebKit/blob/main/Tools/Scripts/run-webkit-httpd).\nTo stop the HTTP servers, exit the script (e.g. Control + C on macOS).\n\nTests under [LayoutTests/http](https://github.com/WebKit/WebKit/tree/main/LayoutTests/http) are accessible at [http://127.0.0.1:8000](http://127.0.0.1:8000)\nexcept tests in [LayoutTests/http/wpt](https://github.com/WebKit/WebKit/tree/main/LayoutTests/http/wpt),\nwhich are available at [http://localhost:8800/WebKit/](http://localhost:8800/WebKit/) instead.\n\nThe [Web Platform Tests](https://web-platform-tests.org/) imported under\n[LayoutTests/imported/w3c/web-platform-tests](https://github.com/WebKit/WebKit/tree/main/LayoutTests/imported/w3c/web-platform-tests)\nare accessible under HTTP at [http://localhost:8800/](http://localhost:8800/) and HTTPS at [http://localhost:9443/](http://localhost:9443/)\n\nNote that it's important to use the exact host names such as `127.0.0.1` and `localhost` above verbatim\nsince some tests rely on or test same-origin or cross-origin behaviors based on those host names.\n\n## Test Expectations\n\nFIXME: Explain how test expectations work.\n\n## Running Layout Tests\n\nTo run layout tests, use `Tools/Scripts/run-webkit-tests`.\nIt optionally takes file paths to a test file or directory and options on how to run a test.\nFor example, in order to just run `LayoutTests/fast/dom/Element/element-traversal.html`, do:\n\n```sh\nTools/Scripts/run-webkit-tests fast/dom/Element/element-traversal.html\n```\n\nBecause there are 50,000+ tests in WebKit,\nyou typically want to run a subset of tests that are relevant to your code change\n(e.g. `LayoutTests/storage/indexeddb/` if you’re working on IndexedDB) while developing the code change,\nand run all layout tests at the end on your local machine or rely on the Early Warning System on [bugs.webkit.org](https://bugs.webkit.org/) for more thorough testing.\n\nSpecify `--debug` or `--release` to use either release or debug build.\nTo run tests using iOS simulator, you can specify either `--ios-simulator`, `--iphone-simulator`,\nor `--ipad-simulator` based on whichever simulator is desired.\n\nBy default, `run-webkit-tests` will run all the tests you specified once in the lexicological order of test paths\nrelative to `LayoutTests` directory and retry any tests that have failed.\nIf you know the test is going to fail and don’t want retries, specify `--no-retry-failures`.\n\nBecause there are so many tests, `run-webkit-tests` will runs tests in different directories in parallel\n(i.e. all tests in a single directory is ran sequentially one after another).\nYou can control the number of parallel test runners using `--child-processes` option.\n\n`run-webkit-tests` has many options.\nUse `--help` to enumerate all the supported options.\n\n### Repeating Layout Tests\n\nWhen you’re investigating flaky tests or crashes, it might be desirable to adjust this.\n`--iterations X` option will specify the number of times the list of tests are ran.\nFor example, if we are running tests A, B, C and `--iterations 3` is specified,\n`run-webkit-tests` will run: A, B, C, A, B, C, A, B, C.\nSimilarly, `--repeat-each` option will specify the number of times each test is repeated before moving onto next test.\nFor example, if we’re running tests A, B, C, and `--repeat-each 3` is specified, `run-webkit-tests` will run: A, A, A, B, B, B, C, C, C.\n`--exit-after-n-failures` option will specify the total number of test failures before `run-webkit-tests` will stop.\nIn particular, `--exit-after-n-failures=1` is useful when investigating a flaky failure\nso that `run-webkit-tests` will stop when the failure actually happens for the first time.\n\n### Test Results\n\nWhenever tests do fail, run-webkit-tests will store results in `WebKitBuild/Debug/layout-test-results`\nmirroring the same directory structure as `LayoutTests`.\nFor example, the actual output produced for `LayoutTests/editing/inserting/typing-001.html`,\nif failed, will appear in `WebKitBuild/Debug/layout-test-results/editing/inserting/typing-001-actual.txt`.\nrun-webkit-tests also generates a web page with the summary of results in\n`WebKitBuild/Debug/layout-test-results/results.html` and automatically tries to open it in Safari using the local build of WebKit.\n\n> If Safari fails to launch, specify `--no-show-results` and open results.html file manually.\n\n### Updating Expected Results\n\nIf you’ve updated a test content or test’s output changes with your code change (e.g. more test case passes),\nthen you may have to update `-expected.txt` file accompanying the test.\nTo do that, first run the test once to make sure the diff and new output makes sense in results.html,\nand run the test again with `--reset-results`.\nThis will update the matching `-expected.txt` file.\n\nYou may need to manually copy the new result to other -expected.txt files that exist under `LayoutTests` for other platforms and configurations.\nFind other `-expected.txt` files when you’re doing this.\n\nWhen a new test is added, `run-webkit-tests` will automatically generate new `-expected.txt` file for your test.\nYou can disable this feature by specifying `--no-new-test-results` e.g. when the test is still under development.\n\n## Different Styles of Layout Tests\n\nThere are multiple styles of layout tests in WebKit.\n\n### **Render tree dumps**\n\nThis is the oldest style of layout tests, and the default mode of layout tests.\nIt’s a text serialization of WebKit’s render tree and its output looks like\n[this](https://github.com/WebKit/WebKit/blob/main/LayoutTests/platform/mac/fast/dom/anchor-text-expected.txt):\n\n```\nlayer at (0,0) size 800x600\n  RenderView at (0,0) size 800x600\nlayer at (0,0) size 800x600\n  RenderBlock {HTML} at (0,0) size 800x600\n    RenderBody {BODY} at (8,8) size 784x584\n      RenderInline {A} at (0,0) size 238x18 [color=#0000EE]\n        RenderInline {B} at (0,0) size 238x18\n          RenderText {#text} at (0,0) size 238x18\n            text run at (0,0) width 238: \"the second copy should not be bold\"\n      RenderText {#text} at (237,0) size 5x18\n        text run at (237,0) width 5: \" \"\n      RenderText {#text} at (241,0) size 227x18\n        text run at (241,0) width 227: \"the second copy should not be bold\"\n```\n\nThis style of layout tests is discouraged today because its outputs are highly dependent on each platform,\nand end up requiring a specific expected result in each platform.\nBut they’re still useful when testing new rendering and layout feature or bugs thereof.\n\nThese tests also have accompanying `-expected.png` files but `run-webkit-tests` doesn't check the PNG output against the expected result by default.\nTo do this check, pass `--pixel`.\nUnfortunately, many *pixel tests* will fail because we have not been updating the expected PNG results a good chunk of the last decade.\nHowever, these pixel results might be useful when diagnosing a new test failure.\nFor this reason, `run-webkit-tests` will automatically generate PNG results when retrying the test,\neffectively enabling `--pixel` option for retries.\n\n### dumpAsText test\n\nThese are tests that uses the plain text serialization of the test page as the output (as if the entire page’s content is copied as plain text).\nAll these tests call `testRunner.dumpAsText` to trigger this behavior.\nThe output typically contains a log of text or other informative output scripts in the page produced.\nFor example, [LayoutTests/fast/dom/anchor-toString.html](https://github.com/WebKit/WebKit/blob/main/LayoutTests/fast/dom/anchor-toString.html) is written as follows:\n\n```html\n<a href=\"http://localhost/sometestfile.html\" id=\"anchor\">\nA link!\n</a>\n<br>\n<br>\n<script>\n    {\n        if (window.testRunner)\n            testRunner.dumpAsText();\n\n        var anchor = document.getElementById(\"anchor\");\n        document.write(\"Writing just the anchor object - \" + anchor);\n\n        var anchorString = String(anchor);\n        document.write(\"<br><br>Writing the result of the String(anchor) - \" + anchorString);\n\n        var anchorToString = anchor.toString();\n        document.write(\"<br><br>Writing the result of the anchor's toString() method - \" + anchorToString);\n    }\n</script>\n```\n\n and generates the following [output](https://github.com/WebKit/WebKit/blob/main/LayoutTests/fast/dom/anchor-toString-expected.txt):\n\n```\nA link! \n\nWriting just the anchor object - http://localhost/sometestfile.html\n\nWriting the result of the String(anchor) - http://localhost/sometestfile.html\n\nWriting the result of the anchor's toString() method - http://localhost/sometestfile.html\n```\n\n### js-test.js and js-test-pre.js tests\n\nThese are variants of dumpAsText test which uses WebKit’s assertion library:\n[LayoutTests/resources/js-test.js](https://github.com/WebKit/WebKit/blob/main/LayoutTests/resources/js-test.js)\nand [LayoutTests/resources/js-test-pre.js](https://github.com/WebKit/WebKit/blob/main/LayoutTests/resources/js-test-pre.js).\nIt consists of shouldX function calls which takes two JavaScript code snippet which are then executed and outputs of which are compared.\njs-test.js is simply a new variant of js-test-pre.js that doesn’t require\nthe inclusion of [LayoutTests/resources/js-test-post.js](https://github.com/WebKit/WebKit/blob/main/LayoutTests/resources/js-test-post.js) at the end.\n**Use js-test.js in new tests**, not js-test-pre.js.\n\nFor example, [LayoutTests/fast/dom/Comment/remove.html](https://github.com/WebKit/WebKit/blob/main/LayoutTests/fast/dom/Comment/remove.html)\nwhich tests [remove()](https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/remove) method\non [Comment node](https://developer.mozilla.org/en-US/docs/Web/API/Comment) is written as:\n\n```html\n<!DOCTYPE html>\n<script src=\"../../../resources/js-test-pre.js\"></script>\n<div id=\"test\"></div>\n<script>\n\ndescription('This tests the DOM 4 remove method on a Comment.');\n\nvar testDiv = document.getElementById('test');\nvar comment = document.createComment('Comment');\ntestDiv.appendChild(comment);\nshouldBe('testDiv.childNodes.length', '1');\ncomment.remove();\nshouldBe('testDiv.childNodes.length', '0');\ncomment.remove();\nshouldBe('testDiv.childNodes.length', '0');\n\n</script>\n<script src=\"../../../resources/js-test-post.js\"></script>\n```\n\nwith the following [expected result](https://github.com/WebKit/WebKit/blob/main/LayoutTests/fast/dom/Comment/remove-expected.txt) (output):\n\n```\nThis tests the DOM 4 remove method on a Comment.\n\nOn success, you will see a series of \"PASS\" messages, followed by \"TEST COMPLETE\".\n\n\nPASS testDiv.childNodes.length is 1\nPASS testDiv.childNodes.length is 0\nPASS testDiv.childNodes.length is 0\nPASS successfullyParsed is true\n\nTEST COMPLETE\n```\n\n`description` function specifies the description of this test, and subsequent shouldBe calls takes two strings,\nboth of which are evaluated as JavaScript and then compared.\n\nSome old js-test-pre.js tests may put its test code in a separate JS file but we don’t do that anymore to keep all the test code in one place.\n\n[js-test.js](https://github.com/WebKit/WebKit/blob/main/LayoutTests/resources/js-test.js) and [js-test-pre.js](https://github.com/WebKit/WebKit/blob/main/LayoutTests/resources/js-test-pre.js) provide all kinds of other assertion and helper functions.\nHere are some examples:\n\n* `debug(msg)` - Inserts a debug / log string in the output.\n* `evalAndLog(code)` - Similar to `debug()` but evaluates code as JavaScript.\n* `shouldNotBe(a, b)` - Generates `PASS` if the results of evaluating `a` and `b` differ.\n* `shouldBeTrue(code)` - Shorthand for `shouldBe(code, 'true')`.\n* `shouldBeFalse(code)` - Shorthand for `shouldBe(code, 'false')`.\n* `shouldBeNaN(code)` - Shorthand for `shouldBe(code, 'NaN')`.\n* `shouldBeNull(code)` - Shorthand for `shouldBe(code, 'null')`.\n* `shouldBeZero(code)` - Shorthand for `shouldBe(code, '0')`.\n* `shouldBeEqualToString(code, string)` - Similar to `shouldBe` but the second argument is not evaluated as string.\n* `finishJSTest()` - When js-test.js style test needs to do some async work, define the global variable named jsTestIsAsync and set it to true. When the test is done, call this function to notify the test runner (don’t call `testRunner.notifyDone` mentioned later directly). See [an example](https://github.com/WebKit/WebKit/blob/main/LayoutTests/fast/dom/iframe-innerWidth.html).\n\n**It’s important to note that these shouldX functions only add output strings that say PASS or FAIL. If the expected result also contains the same FAIL strings, then run-webkit-tests will consider the whole test file to have passed.**\n\nAnother way to think about this is that `-expected.txt` files are baseline outputs, and baseline outputs can contain known failures.\n\nThere is a helper script to create a template for a new js-test.js test. The following will create new test named `new-test.html` in [LayoutTests/fast/dom](https://github.com/WebKit/WebKit/tree/main/LayoutTests/fast/dom):\n\n```sh\nTools/Scripts/make-new-script-test fast/dom/new-test.html\n```\n\n### dump-as-markup.js Tests\n\nA dump-as-markup.js test is yet another variant of dumpAsText test,\nwhich uses [LayoutTests/resources/dump-as-markup.js](https://github.com/WebKit/WebKit/blob/main/LayoutTests/resources/dump-as-markup.js).\nThis style of test is used when it’s desirable to compare the state of the DOM tree before and after some operations.\nFor example, many tests under [LayoutTests/editing](https://github.com/WebKit/WebKit/tree/main/LayoutTests/editing)\nuse this style of testing to test complex DOM mutation operations such as pasting HTML from the users’ clipboard.\ndump-as-markup.js adds `Markup` on the global object and exposes a few helper functions.\nLike js-test.js tests, a test description can be specified via `Markup.description`.\nThe test then involves `Markup.dump(node, description)` to serialize the state of DOM tree as plain text\nwhere `element` is either a DOM [node](https://developer.mozilla.org/en-US/docs/Web/API/Node)\nunder which the state should be serialized or its [id](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).\n\nFor example, [LayoutTests/editing/inserting/insert-list-in-table-cell-01.html](https://github.com/WebKit/WebKit/blob/main/LayoutTests/editing/inserting/insert-list-in-table-cell-01.html) is written as follows:\n\n```html\n<!DOCTYPE html>\n<div id=\"container\" contenteditable=\"true\"><table border=\"1\"><tr><td id=\"element\">fsdf</td><td>fsdf</td></tr><tr><td>gghfg</td><td>fsfg</td></tr></table></div>\n<script src=\"../editing.js\"></script>\n<script src=\"../../resources/dump-as-markup.js\"></script>\n<script>\n    Markup.description('Insert list items in a single table cell:');\n\n    var e = document.getElementById(\"element\");\n    setSelectionCommand(e, 0, e, 1);\n    Markup.dump('container', 'Before');\n\n    document.execCommand(\"insertOrderedList\");\n    Markup.dump('container', 'After');\n</script>\n```\n\nwith the following [expected result](https://github.com/WebKit/WebKit/blob/main/LayoutTests/editing/inserting/insert-list-in-table-cell-01-expected.txt):\n\n```\nInsert list items in a single table cell:\n\nBefore:\n| <table>\n|   border=\"1\"\n|   <tbody>\n|     <tr>\n|       <td>\n|         id=\"element\"\n|         \"<#selection-anchor>fsdf<#selection-focus>\"\n|       <td>\n|         \"fsdf\"\n|     <tr>\n|       <td>\n|         \"gghfg\"\n|       <td>\n|         \"fsfg\"\n\nAfter:\n| <table>\n|   border=\"1\"\n|   <tbody>\n|     <tr>\n|       <td>\n|         id=\"element\"\n|         <ol>\n|           <li>\n|             \"<#selection-anchor>fsdf<#selection-focus>\"\n|             <br>\n|       <td>\n|         \"fsdf\"\n|     <tr>\n|       <td>\n|         \"gghfg\"\n|       <td>\n|         \"fsfg\"\n```\n\n### testharness.js Tests\n\nThis is yet another variant of dumpAsText test which uses the test harness of [Web Platform Tests](https://web-platform-tests.org/), \nwhich is [W3C](https://www.w3.org/)’s official tests for the Web.\nThere is an [extensive documentation](https://web-platform-tests.org/writing-tests/testharness-api.html) on how this harness works.\n\n> As mentioned above, do not modify tests in [LayoutTests/imported/w3c/web-platform-tests](https://github.com/WebKit/WebKit/tree/main/LayoutTests/imported/w3c/web-platform-tests)\nunless the same test changes are made in Web Platform Tests’ primary repository.\n\n### Reference Tests\n\nReference tests are special in that they don’t have accompanying `-expected.txt` files.\nInstead, they have a matching or mismatching expected result file.\nBoth the test file and the accompanying matching or mismatching expected result generate PNG outputs.\nThe test passes if the PNG outputs of the test and the matching expected result are the same; the test fails otherwise.\nFor a test with a mismatching expected result, the test passes if the PNG outputs of the test and the mismatching expected result are not the same, and fails if they are the same.\n\nA matching expected result or a mismatching expected result can be specified in a few ways:\n\n* The file with the same name as the test name except it ends with  `-expected.*` or `-ref.*` is a matching expected result for the test.\n* The file with the same name as the test name except it ends with  `-expected-mismatch.*` or `-notref.*` is a matching expected result for the test.\n* The file specified by a HTML link element in the test file with `match` relation: `<link rel=match href=X>` where X is the relative file path is a matching expected result.\n* The file specified by a HTML link element in the test file with `mismatch` relation: `<link rel=mismatch href=X>` where X is the relative file path is a mismatching expected result.\n\nFor example, [LayoutTests/imported/w3c/web-platform-tests/html/rendering/replaced-elements/images/space.html](https://github.com/WebKit/WebKit/blob/main/LayoutTests/imported/w3c/web-platform-tests/html/rendering/replaced-elements/images/space.html) specifies [space-ref.html](https://github.com/WebKit/WebKit/blob/main/LayoutTests/imported/w3c/web-platform-tests/html/rendering/replaced-elements/images/space-ref.html) in the same directory as the matching expected result as follows:\n\n```html\n<!doctype html>\n<meta charset=utf-8>\n<title>img hspace/vspace</title>\n<link rel=match href=space-ref.html>\n<style>\nspan { background: blue; }\n</style>\n<div style=width:400px;>\n<p><span><img src=/images/green.png></span>\n<p><span><img src=/images/green.png hspace=10></span>\n<p><span><img src=/images/green.png vspace=10></span>\n<p><span><img src=/images/green.png hspace=10%></span>\n<p><span><img src=/images/green.png vspace=10%></span>\n</div>\n```\n\n## Test Runners\n\nMost layout tests are designed to be runnable inside a browser but run-webkit-tests uses a special program to run them.\nOur continuous integration system as well as the Early Warning System uses run-webkit-tests to run layout tests.\nIn WebKit2, this is appropriately named [WebKitTestRunner](https://github.com/WebKit/WebKit/tree/main/Tools/WebKitTestRunner).\nIn WebKit1 or WebKitLegacy, it’s [DumpRenderTree](https://github.com/WebKit/WebKit/tree/main/Tools/DumpRenderTree),\nwhich is named after the very first type of layout tests, which generated the text representation of the render tree.\n\n### Extra Interfaces Available in Test Runners\n\nBoth WebKitTestRunner and DumpRenderTree expose a few extra interfaces to JavaScript on `window` (i.e. global object) in order to emulate user inputs,\nenable or disable a feature, or to improve the reliability of testing.\n\n* **[GCController](https://github.com/WebKit/WebKit/blob/main/Tools/WebKitTestRunner/InjectedBundle/Bindings/GCController.idl)**\n    - `GCController.collect()` triggers a synchronous full garbage collection.\n    This function is useful for testing crashes or erroneous premature collection of JS wrappers and leaks.\n* **[testRunner](https://github.com/WebKit/WebKit/blob/main/Tools/WebKitTestRunner/InjectedBundle/Bindings/TestRunner.idl)**\n    - TestRunner interface exposes many methods to control the behaviors of WebKitTestRunner and DumpRenderTree.\n    Some the most commonly used methods are as follows:\n    * `waitUntilDone()` / `notifyDone()` - These functions are useful when writing tests that involve asynchronous tasks\n        which may require the test to continue running beyond when it finished loading.\n        `testRunner.waitUntilDone()` makes WebKitTestRunner and DumpRenderTree not end the test when a layout test has finished loading.\n        The test continues until `testRunner.notifyDone()` is called.\n    * `dumpAsText(boolean dumpPixels)` - Makes WebKitTestRunner and DumpRenderTree output the plain text of the loaded page instead of the state of the render tree.\n    * `overridePreference(DOMString preference, DOMString value)` - Overrides WebKit’s [preferences](https://github.com/WebKit/WebKit/tree/main/Source/WTF/Scripts/Preferences).\n        For WebKitLegacy, these are defined in [Source/WebKitLegacy/mac/WebView/WebPreferences.h](https://github.com/WebKit/WebKit/tree/main/Source/WebKitLegacy/mac/WebView/WebPreferences.h) for macOS\n        and [Source/WebKitLegacy/win/WebPreferences.h](https://github.com/WebKit/WebKit/tree/main/Source/WebKitLegacy/win/WebPreferences.h) for Windows.\n* **[eventSender](https://github.com/WebKit/WebKit/blob/main/Tools/WebKitTestRunner/InjectedBundle/Bindings/EventSendingController.idl)**\n    - Exposes methods to emulate mouse, keyboard, and touch actions.\n    **Use [ui-helpers.js](https://github.com/WebKit/WebKit/blob/main/LayoutTests/resources/ui-helper.js) script** instead of directly calling methods on this function.\n    This will ensure the test will be most compatible with all the test configurations we have.\n* [**UIScriptController**](https://github.com/WebKit/WebKit/tree/main/Tools/TestRunnerShared/UIScriptContext/Bindings/UIScriptController.idl)\n     - Exposes methods to emulate user inputs like eventSender mostly on iOS WebKit2.\n     **Use [ui-helpers.js](https://github.com/WebKit/WebKit/blob/main/LayoutTests/resources/ui-helper.js) script** instead of directly calling methods on this function.\n     This will ensure the test will be most compatible with all the test configurations we have.\n* **[textInputController](https://github.com/WebKit/WebKit/blob/main/Tools/WebKitTestRunner/InjectedBundle/Bindings/TextInputController.idl)**\n    - Exposes methods to test [input methods](https://en.wikipedia.org/wiki/Input_method).\n\nAdditionally, [WebCore/testing](https://github.com/WebKit/WebKit/tree/main/Source/WebCore/testing) exposes a few testing hooks to test its internals:\n\n* **[internals](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/testing/Internals.idl)**\n    - Exposes various hooks into WebCore that shouldn’t be part of WebKit or WebKitLegacy API.\n* [**internals.settings**](https://github.com/WebKit/WebKit/blob/main/Source/WebCore/testing/InternalSettings.idl)\n    - Exposes various WebCore settings and let tests override them.\n    Note that WebKit layer code may depend on preferences in UI process and the aforementioned `testRunner.overridePreference` may need to be used instead.\n    It’s in fact preferable to override the equivalent preference via `testRunner.overridePreference`\n    unless you know for sure WebKit or WebKitLegacy layer of code isn’t affected by the setting you’re overriding.\n\n### Enabling or Disabling a Feature in Test Runners\n\nFIXME: Mention test-runner-options\n\n## Test Harness Scripts\n\nFIXME: Write about dump-as-markup.js, and ui-helper.js\n\n## Investigating Test Failures Observed on Bots\n\nThere are multiple tools to investigate test failures happening on our continuous integration system\n([build.webkit.org](https://build.webkit.org/)).\nThe most notable is flakiness dashboard:\n[results.webkit.org](https://results.webkit.org/)\n\nFIXME: Write how to investigate a test failure.\n\n## Debugging Layout Tests in Xcode\n\nThe easiest way to debug a layout test is with WebKitTestRunner or DumpRenderTree.\nIn Product > Scheme, select “Everything up to WebKit + Tools”.\n\nIn Product > Scheme > Edit Scheme, open “Run” tab.\nPick WebKitTestRunner or DumpRenderTree, whichever is desired in “Executable”.\n\n![Screenshot of specifying DumpRenderTree as the target of \"Run\" scheme](resources/xcode-scheme-dumprendertree.png)\nGo to Arguments and specify the path to the layout tests being debugged relative to where the build directory is located.\ne.g. `../../LayoutTests/fast/dom/Element/element-traversal.html` if `WebKitBuild/Debug` is the build directory.\n![Screenshot of Xcode specifying a layout test in an argument to DumpRenderTree](resources/xcode-scheme-layout-test.png)\nYou may want to specify OS_ACTIVITY_MODE environmental variable to “disable”\nin order to suppress all the system logging that happens during the debugging session.\n\nYou may also want to specify `--no-timeout` option to prevent WebKitTestRunner or DumpRenderTree\nto stop the test after 30 seconds if you’re stepping through code. Specify additional\n`--internal-feature=ChildProcessDebuggabilityEnabled` when stepping through child process such as GPU process.\n\nOnce this is done, you can run WebKitTestRunner or DumpRenderTree by going to Product > Perform Action > Run without Building.\n\nClicking on “Run” button may be significantly slower due to Xcode re-building every project and framework each time.\nYou can disable this behavior by going to “Build” tab and unchecking boxes for all the frameworks involved for “Run”:\n![Screenshot of Xcode unchecking build options for all but DumpRenderTree for \"Run\" scheme](resources/xcode-build-settings-for-run.png)\n\n### Attaching to WebContent Process\n\nYou may find Xcode fails to attach to WebContent or Networking process in the case of WebKitTestRunner.\nIn those cases, attach a breakpoint in UIProcess code\nsuch as [`TestController::runTest` in WebKitTestRunner right before `TestInvocation::invoke` is called](https://github.com/WebKit/WebKit/blob/5f4c01f41527547ce2f82b812ad478e12b51239d/Tools/WebKitTestRunner/TestController.cpp#L1522).\nOnce breakpoint is hit in the UIProcess, attach to `WebContent.Development` or `Networking.Development` process manually in Xcode via Debug > Attach to Process.\n\n# Dive into API tests\n\nFIXME: Talk about how to debug API tests.\n\n# Logging in WebKit\n\n## Setup\n\nEach framework (WebCore, WebKit, WebKitLegacy, WTF) enable their own logging infrastructure independently (though the infrastructure itself is shared). If you want to log a message, `#include` the relevant framework's `Logging.h` header. Then, you can use the macros below.\n\nBeware that you can't `#include` multiple framework's `Logging.h` headers at the same time - they each define a macro `LOG_CHANNEL_PREFIX` which will conflict with each other. Only `#include` the `Logging.h` header from your specific framework.\n\nIf you want to do more advanced operations, like searching through the list of log channels, `#include` your framework's `LogInitialization.h` header. These do not conflict across frameworks, so you can do something like\n\n```\n#include \"LogInitialization.h\"\n#include <WebCore/LogInitialization.h>\n#include <WTF/LogInitialization.h>\n```\n\nIndeed, WebKit does this to initialize all frameworks' log channels during Web Process startup.\n\n## Logging messages\n\nThere are a few relevant macros for logging messages:\n\n- `LOG()`: Log a printf-style message in debug builds. Requires you to name a logging channel to output to.\n- `LOG_WITH_STREAM()` Log an iostream-style message in debug builds. Requires you to name a logging channel to output to.\n- `RELEASE_LOG()`: Just like `LOG()` but logs in both debug and release builds. Requires you to name a logging channel to output to.\n- `WTFLogAlways()`: Mainly for local debugging, unconditionally output a message. Does not require a logging channel to output to.\n\nHere's an example invocation of `LOG()`:\n\n```\nLOG(MediaQueries, \"HTMLMediaElement %p selectNextSourceChild evaluating media queries\", this);\n```\n\nThat first argument is a log channel. These have 2 purposes:\n\n- Individual channels can be enabled/disabled independently (So you can get all the WebGL logging without getting any Loading logging)\n- When multiple channels are enabled, and you're viewing the logs, you can search/filter by the channel\n\nHere's an example invocation of `LOG_WITH_STREAM()`:\n\n```\nLOG_WITH_STREAM(Scrolling, stream << \"ScrollingTree::commitTreeState - removing unvisited node \" << nodeID);\n```\n\nThe macro sets up a local variable named `stream` which the second argument can direct messages to. The second argument is a collection of statements - not expressions like `LOG()` and `RELEASE_LOG()`. So, you can do things like this:\n\n```\nLOG_WITH_STREAM(TheLogChannel,\n    for (const auto& something : stuffToLog)\n        stream << \" \" << something;\n);\n```\n\nThe reason why (most of) these use macros is so the entire thing can be compiled out when logging is disabled. Consider this:\n\n```\nLOG(TheLogChannel, \"The result is %d\", someSuperComplicatedCalculation());\n```\n\nIf these were not macros, you'd have to pay for `someSuperComplicatedCalculation()` whether logging is enabled or not.\n\n## Enabling and disabling log channels\n\nChannels are enabled/disabled at startup by passing a carefully crafted string to `initializeLogChannelsIfNecessary()`. On the macOS and iOS ports, this string comes from the _defaults_ database. On other UNIX systems and Windows, it comes from environment variables.\n\nYou can read the grammar of this string in `initializeLogChannelsIfNecessary()`. Here is an example:\n\n```\nWebGL -Loading\n```\n\nYou can also specify the string `all` to enable all logging.\n\nOn macOS/iOS and Windows, each framework has its own individually supplied string that it uses to enable its own logging channels. On Linux, all frameworks share the same string.\n\n### Linux\n\nSet the `WEBKIT_DEBUG` environment variable.\n\n```\nWEBKIT_DEBUG=Scrolling Tools/Scripts/run-minibrowser --gtk --debug\n```\n\n### macOS\n\nOn macOS, you can, for example, enable the `Language` log channel with these terminal commands:\n\n```\nfor identifier in com.apple.WebKit.WebContent.Development com.apple.WebKit.WebContent org.webkit.MiniBrowser com.apple.WebKit.WebKitTestRunner org.webkit.DumpRenderTree -g /Users/$USER/Library/Containers/com.apple.Safari/Data/Library/Preferences/com.apple.Safari.plist; do\n    for key in WTFLogging WebCoreLogging WebKitLogging WebKit2Logging; do\n        defaults write ${identifier} \"${key}\" \"Language\"\n    done\ndone\n```\n\nYou may also need to specify these strings to `com.apple.WebKit.WebContent.Development`, the global domain, or the Safari container, depending on what you're running.\n\nYou may also pass this key and value as an argument:\n\n```\nTools/Scripts/run-minibrowser --debug -WebCoreLogging Scrolling\n```\n\n### Windows\n\nSet the `WebCoreLogging` environment variable.\n\n## Adding a new log channel\n\nSimply add a line to your framework's `Logging.h` header. Depending on how the accompanying `Logging.cpp` file is set up, you may need to add a parallel line there. That should be all you need. It is acceptable to have log channels in different frameworks with the same name - this is what `LOG_CHANNEL_PREFIX` is for.\n"
        },
        {
          "name": "JSTests",
          "type": "tree",
          "content": null
        },
        {
          "name": "LayoutTests",
          "type": "tree",
          "content": null
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.697265625,
          "content": "ifneq ($(USE_WORKSPACE),NO)\n\nSCHEME = Everything up to WebKit + Tools\nSCRIPTS_PATH = Tools/Scripts\ninclude Makefile.shared\n\nelse\n\nMODULES = Source Tools\n\ndefine build_target_for_each_module\n\tfor dir in $(MODULES); do \\\n\t\t${MAKE} $@ -C $$dir PATH_FROM_ROOT=$(PATH_FROM_ROOT)/$${dir}; \\\n\t\texit_status=$$?; \\\n\t\t[ $$exit_status -ne 0 ] && exit $$exit_status; \\\n\tdone; true\nendef\n\nall:\n\t@$(build_target_for_each_module)\n\ndebug d:\n\t@$(build_target_for_each_module)\n\nrelease r:\n\t@$(build_target_for_each_module)\n\nrelease+assert ra:\n\t@$(build_target_for_each_module)\n\ntesting t:\n\t@$(build_target_for_each_module)\n\nanalyze:\n\t@$(build_target_for_each_module)\n\nclean:\n\t@$(build_target_for_each_module)\n\nendif # USE_WORKSPACE\n"
        },
        {
          "name": "Makefile.shared",
          "type": "blob",
          "size": 5.50390625,
          "content": "SCRIPTS_PATH ?= ../Tools/Scripts\n\nifneq ($(USE_WORKSPACE),NO)\nSCHEME ?= $(notdir $(CURDIR))\nXCODE_TARGET = -scheme \"$(SCHEME)\"\n\nifneq (,$(WORKSPACE_PATH))\nCONFIG_OPTIONS += --workspace=$(WORKSPACE_PATH)\nendif\n\n# FIXME: Move this setting to xcconfigs once all local Xcode builds of WebKit\n# happen in the workspace. When this is only passed on the command line, it\n# invalidates build results made in the IDE (rdar://88135402).\n#XCODE_OPTIONS += WK_VALIDATE_DEPENDENCIES=YES_ERROR\nBUILD_GOAL = $(SCHEME)\nelse\nUSE_WORKSPACE =\nBUILD_WEBKIT_BASE += --no-use-workspace\nBUILD_GOAL = $(notdir $(CURDIR))\nendif\n\nXCODE_OPTIONS = $(ARGS)\nXCODE_OPTIONS += $(if $(GCC_PREPROCESSOR_ADDITIONS),GCC_PREPROCESSOR_DEFINITIONS='$(GCC_PREPROCESSOR_ADDITIONS) $$(inherited)')\nifeq (ON,$(ENABLE_LLVM_PROFILE_GENERATION))\n\tXCODE_OPTIONS += ENABLE_LLVM_PROFILE_GENERATION=ENABLE_LLVM_PROFILE_GENERATION\nendif\n\nifneq (,$(SDKROOT))\n\tifneq (,$(OVERRIDE_SDKROOT))\n\t\tifneq (default,$(OVERRIDE_SDKROOT))\n\t\t\tCONFIG_OPTIONS += --sdk=$(OVERRIDE_SDKROOT)\n\t\t\tBUILD_WEBKIT_BASE := $(BUILD_WEBKIT_BASE) --sdk=$(OVERRIDE_SDKROOT)\n\t\tendif\n\t\tOVERRIDE_SDKROOT =\n\telse\n\t\tCONFIG_OPTIONS += --sdk=$(SDKROOT)\n\t\tBUILD_WEBKIT_BASE := $(BUILD_WEBKIT_BASE) --sdk=$(SDKROOT)\n\tendif\nendif\n\nifneq (,$(ARCHS))\n\tifneq (,$(OVERRIDE_ARCHS))\n\t\tifneq (default,$(OVERRIDE_ARCHS))\n\t\t\tBUILD_WEBKIT_BASE := $(BUILD_WEBKIT_BASE) --architecture=\"$(OVERRIDE_ARCHS)\"\n\t\tendif\n\t\tOVERRIDE_ARCHS =\n\telse\n\t\tBUILD_WEBKIT_BASE := $(BUILD_WEBKIT_BASE) --architecture=\"$(ARCHS)\"\n\tendif\nendif\n\nifeq (iosmac,$(SDK_VARIANT))\n\tBUILD_WEBKIT_BASE += --maccatalyst\nendif\n\nifeq (, $(findstring WK_USE_CCACHE, $(ARGS)))\n\tifneq (, $(shell which ccache))\n\t\tXCODE_OPTIONS += WK_USE_CCACHE=YES\n\tendif\nendif\n\nifneq (,$(EXPORT_COMPILE_COMMANDS))\n\t\tXCODE_OPTIONS += OTHER_CFLAGS='$$(inherited) -gen-cdb-fragment-path $$(BUILT_PRODUCTS_DIR)/compile_commands'\n\t\tXCODE_OPTIONS += GCC_PRECOMPILE_PREFIX_HEADER=NO\n\t\tXCODE_OPTIONS += CLANG_ENABLE_MODULE_DEBUGGING=NO\n\t\tXCODE_OPTIONS += COMPILER_INDEX_STORE_ENABLE=NO\nendif\n\nDEFAULT_VERBOSITY := $(shell defaults read org.webkit.BuildConfiguration BuildTranscriptVerbosity 2>/dev/null || echo \"default\")\nVERBOSITY ?= $(DEFAULT_VERBOSITY)\n\nifeq ($(VERBOSITY),default)\nOUTPUT_FILTER = cat\nXCODE_OPTIONS += -hideShellScriptEnvironment\nelse ifeq ($(VERBOSITY),noisy)\nOUTPUT_FILTER = cat\nelse ifeq ($(VERBOSITY),oneline)\nOUTPUT_FILTER = $(SCRIPTS_PATH)/filter-build-webkit -f oneline\nelse\nOUTPUT_FILTER = $(SCRIPTS_PATH)/filter-build-webkit\nendif\n\nifeq ($(ASAN),YES)\nCONFIG_OPTIONS += --asan\nelse\nifeq ($(ASAN),NO)\nCONFIG_OPTIONS += --no-asan\nendif\nendif\n\nifneq ($(CC),)\nifneq ($(CC),cc)  # Default value without -R flag\nXCODE_OPTIONS += CC=$(CC)\nendif\nendif\n\nifeq ($(CODE_COVERAGE),YES)\nCONFIG_OPTIONS += --coverage\nelse\nifeq ($(CODE_COVERAGE),NO)\nCONFIG_OPTIONS += --no-coverage\nendif\nendif\n\nifneq ($(CPLUSPLUS),)\nXCODE_OPTIONS += CPLUSPLUS=$(CPLUSPLUS)\nendif\n\nifeq ($(LIBFUZZER),YES)\nCONFIG_OPTIONS += --libfuzzer\nelse\nifeq ($(LIBFUZZER),NO)\nCONFIG_OPTIONS += --no-libfuzzer\nendif\nendif\n\nifneq ($(WK_SANITIZER_COVERAGE),)\nXCODE_OPTIONS += WK_SANITIZER_COVERAGE=$(WK_SANITIZER_COVERAGE)\nendif\n\nifeq ($(TSAN),YES)\nCONFIG_OPTIONS += --tsan\nelse\nifeq ($(TSAN),NO)\nCONFIG_OPTIONS += --no-tsan\nendif\nendif\n\nifeq ($(UBSAN),YES)\nCONFIG_OPTIONS += --ubsan\nelse\nifeq ($(UBSAN),NO)\nCONFIG_OPTIONS += --no-ubsan\nendif\nendif\n\nifeq ($(WK_LTO_MODE),full)\nCONFIG_OPTIONS += --lto-mode=full\nelse ifeq ($(WK_LTO_MODE),thin)\nCONFIG_OPTIONS += --lto-mode=thin\nelse ifeq ($(WK_LTO_MODE),none)\nCONFIG_OPTIONS += --lto-mode=none\nendif\n\nANALYZER_XCODE_SETTINGS = RUN_CLANG_STATIC_ANALYZER=YES CLANG_STATIC_ANALYZER_MODE=deep CLANG_ANALYZER_OUTPUT=html\nifneq (,$(ANALYZER_EXEC))\n\tANALYZER_XCODE_SETTINGS += CLANG_ANALYZER_EXEC=\"$(ANALYZER_EXEC)\"\nendif\nifneq (,$(ANALYZER_FLAGS))\n\tANALYZER_XCODE_SETTINGS += CLANG_ANALYZER_OTHER_FLAGS=\"$(ANALYZER_FLAGS)\"\nendif\nifneq (,$(ANALYZER_OUTPUT))\n\tANALYZER_XCODE_SETTINGS += CLANG_ANALYZER_OUTPUT_DIR=\"$(ANALYZER_OUTPUT)\"\nendif\nifeq (,$(PATH_TO_SCAN_BUILD))\n\tPATH_TO_SCAN_BUILD = scan-build\nendif\n\nexport DSYMUTIL_NUM_THREADS = $(shell sysctl -n hw.activecpu)\n\ndefine set_webkit_configuration\n\t$(SCRIPTS_PATH)/set-webkit-configuration $1 $(CONFIG_OPTIONS)\nendef\n\ndefine invoke_xcode\n\t( \\\n\t\techo; \\\n\t\techo \"===== BUILDING $(BUILD_GOAL) =====\"; \\\n\t\techo; \\\n\t\teval build_webkit_options=(`perl -I$(SCRIPTS_PATH) -Mwebkitdirs -e 'print XcodeOptionString()' -- $(BUILD_WEBKIT_BASE) $(BUILD_WEBKIT_OPTIONS)`); \\\n\t\txcodebuild $1 $(OTHER_OPTIONS) $(XCODE_TARGET) \"$${build_webkit_options[@]}\" $(XCODE_OPTIONS) $2 | $(OUTPUT_FILTER) && exit $${PIPESTATUS[0]} \\\n\t)\nendef\n\nall:\n\t@$(call set_webkit_configuration,)\n\t@$(call invoke_xcode,,)\n\ndebug d: force\n\t@$(call set_webkit_configuration,--debug)\n\t@$(call invoke_xcode,,)\n\nrelease r: force\n\t@$(call set_webkit_configuration,--release)\n\t@$(call invoke_xcode,,)\n\nrelease+assert ra: force\n\t@$(call set_webkit_configuration,--release)\n\t@$(call invoke_xcode,,)\nrelease+assert ra: override GCC_PREPROCESSOR_ADDITIONS += ASSERT_ENABLED=1\n\ntesting t: force\n\t@$(call set_webkit_configuration,--debug --force-optimization-level=O3)\n\t@$(call invoke_xcode,,)\n\nanalyze:\n\t@$(call set_webkit_configuration,)\n\t@$(call invoke_xcode,analyze,$(ANALYZER_XCODE_SETTINGS)) || true\n\t@for dir in $$(ls -d $(ANALYZER_OUTPUT)/StaticAnalyzer/*); do \\\n\t\tmkdir -p $$dir/StaticAnalyzerReports; \\\n\t\tfind $$dir -name 'report-*.html' -exec mv {} $$dir/StaticAnalyzerReports/ \\;; \\\n\t\t$(PATH_TO_SCAN_BUILD) --generate-index-only $$dir; \\\n\tdone\n\nclean:\nifndef XCODE_TARGET\n\t@$(call invoke_xcode,,-alltargets clean)\nelse\n\t@$(call invoke_xcode,,clean)\nendif\n\nforce: ;\n"
        },
        {
          "name": "ManualTests",
          "type": "tree",
          "content": null
        },
        {
          "name": "PerformanceTests",
          "type": "tree",
          "content": null
        },
        {
          "name": "ReadMe.md",
          "type": "blob",
          "size": 5.525390625,
          "content": "# WebKit\n\nWebKit is a cross-platform web browser engine. On iOS and macOS, it powers Safari, Mail, Apple Books, and many other applications. For more information about WebKit, see the [WebKit project website](https://webkit.org/).\n\n## Trying the Latest\n\nOn macOS, [download Safari Technology Preview](https://webkit.org/downloads/) to test the latest version of WebKit. On Linux, download [Epiphany Technology Preview](https://webkitgtk.org/epiphany-tech-preview). On Windows, you'll have to build it yourself.\n\n## Reporting Bugs\n\n1. [Search WebKit Bugzilla](https://bugs.webkit.org/query.cgi?format=specific&product=WebKit) to see if there is an existing report for the bug you've encountered.\n2. [Create a Bugzilla account](https://bugs.webkit.org/createaccount.cgi) to report bugs (and comment on them) if you haven't done so already.\n3. File a bug in accordance with [our guidelines](https://webkit.org/bug-report-guidelines/).\n\nOnce your bug is filed, you will receive email when it is updated at each stage in the [bug life cycle](https://webkit.org/bug-life-cycle). After the bug is considered fixed, you may be asked to download the [latest nightly](https://webkit.org/nightly) and confirm that the fix works for you.\n\n## Getting the Code\n\nRun the following command to clone WebKit's Git repository:\n\n```\ngit clone https://github.com/WebKit/WebKit.git WebKit\n```\n\nYou can enable [git fsmonitor](https://git-scm.com/docs/git-config#Documentation/git-config.txt-corefsmonitor) to make many git commands faster (such as `git status`) with `git config core.fsmonitor true`\n\n## Building WebKit\n\n### Building for Apple platforms\n\nInstall Xcode and its command line tools if you haven't done so already:\n\n1. **Install Xcode** Get Xcode from https://developer.apple.com/downloads. To build WebKit for OS X, Xcode 5.1.1 or later is required. To build WebKit for iOS Simulator, Xcode 7 or later is required.\n2. **Install the Xcode Command Line Tools** In Terminal, run the command: `xcode-select --install`\n\nRun the following command to build a macOS debug build with debugging symbols and assertions:\n\n```\nTools/Scripts/build-webkit --debug\n```\n\nFor performance testing, and other purposes, use `--release` instead.\n\n#### Embedded Builds\n\nTo build for an embedded platform like iOS, tvOS, or watchOS, pass a platform\nargument to `build-webkit`.\n\nFor example, to build a debug build with debugging symbols and assertions for\nembedded simulators:\n\n```\nTools/Scripts/build-webkit --debug --<platform>-simulator\n```\n\nor embedded devices:\n```\nTools/Scripts/build-webkit --debug --<platform>-device\n```\n\nwhere `platform` is `ios`, `tvos` or `watchos`.\n\n#### Using Xcode\n\nYou can open `WebKit.xcworkspace` to build and debug WebKit within Xcode.\nSelect the \"Everything up to WebKit + Tools\" scheme to build the entire\nproject.\n\nIf you don't use a custom build location in Xcode preferences, you have to\nupdate the workspace settings to use `WebKitBuild` directory.  In menu bar,\nchoose File > Workspace Settings, then click the Advanced button, select\n\"Custom\", \"Relative to Workspace\", and enter `WebKitBuild` for both Products\nand Intermediates.\n\n### Building the GTK Port\n\nFor production builds:\n\n```\ncmake -DPORT=GTK -DCMAKE_BUILD_TYPE=RelWithDebInfo -GNinja\nninja\nsudo ninja install\n```\n\nFor development builds:\n\n```\nTools/gtk/install-dependencies\nTools/Scripts/update-webkitgtk-libs\nTools/Scripts/build-webkit --gtk --debug\n```\n\nFor more information on building WebKitGTK, see the [wiki page](https://trac.webkit.org/wiki/BuildingGtk).\n\n### Building the WPE Port\n\nFor production builds:\n\n```\ncmake -DPORT=WPE -DCMAKE_BUILD_TYPE=RelWithDebInfo -GNinja\nninja\nsudo ninja install\n```\n\nFor development builds:\n\n```\nTools/wpe/install-dependencies\nTools/Scripts/update-webkitwpe-libs\nTools/Scripts/build-webkit --wpe --debug\n```\n\n### Building Windows Port\n\nFor building WebKit on Windows, see the [WebKit on Windows page](https://docs.webkit.org/Ports/WindowsPort.html).\n\n## Running WebKit\n\n### With Safari and Other macOS Applications\n\nRun the following command to launch Safari with your local build of WebKit:\n\n```\nTools/Scripts/run-safari --debug\n```\n\nThe `run-safari` script sets the `DYLD_FRAMEWORK_PATH` environment variable to point to your build products, and then launches `/Applications/Safari.app`. `DYLD_FRAMEWORK_PATH` tells the system loader to prefer your build products over the frameworks installed in `/System/Library/Frameworks`.\n\nTo run other applications with your local build of WebKit, run the following command:\n\n```\nTools/Scripts/run-webkit-app <application-path>\n```\n\n### iOS Simulator\n\nRun the following command to launch iOS simulator with your local build of WebKit:\n\n```\nrun-safari --debug --ios-simulator\n```\n\nIn both cases, if you have built release builds instead, use `--release` instead of `--debug`.\n\nTo run other applications, for example MobileMiniBrowser, with your local build of WebKit, run the following command:\n\n``` shell\nTools/Scripts/run-webkit-app --debug --iphone-simulator <application-path>\n```\n\n#### Using Xcode\n\nOpen `WebKit.xcworkspace`, select intended scheme such as MobileMiniBrowser and an iOS simulator as target, click run.\n\n### Linux Ports\n\nIf you have a development build, you can use the `run-minibrowser` script, e.g.:\n\n```\nrun-minibrowser --debug --wpe\n```\n\nPass one of `--gtk`, `--jsc-only`, or `--wpe` to indicate the port to use.\n\n## Contribute\n\nCongratulations! You’re up and running. Now you can begin coding in WebKit and contribute your fixes and new features to the project. For details on submitting your code to the project, read [Contributing Code](https://webkit.org/contributing-code/).\n"
        },
        {
          "name": "Source",
          "type": "tree",
          "content": null
        },
        {
          "name": "Tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "WebDriverTests",
          "type": "tree",
          "content": null
        },
        {
          "name": "WebKit.xcworkspace",
          "type": "tree",
          "content": null
        },
        {
          "name": "WebKitLibraries",
          "type": "tree",
          "content": null
        },
        {
          "name": "Websites",
          "type": "tree",
          "content": null
        },
        {
          "name": "metadata",
          "type": "tree",
          "content": null
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}