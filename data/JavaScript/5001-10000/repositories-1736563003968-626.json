{
  "metadata": {
    "timestamp": 1736563003968,
    "page": 626,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "brookhong/Surfingkeys",
      "stars": 5474,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".eslintrc",
          "type": "blob",
          "size": 0.1650390625,
          "content": "{\n    \"env\": {\n        \"browser\": true,\n        \"node\": true,\n        \"es6\": true\n    },\n    \"rules\": {\n        \"semi\": [\"error\", \"always\"],\n        \"no-tabs\": 2\n    }\n}"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.2744140625,
          "content": ".gitattributes export-ignore\n.github export-ignore\n.gitignore export-ignore\n*.md export-ignore\nlibs/mermaid.min.js export-ignore\nlibs/webfontloader.js export-ignore\npages/mermaid.* export-ignore\npages/ga.js export-ignore\npages/pdf export-ignore\npages/pdf_viewer.html export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.111328125,
          "content": "node_modules/\ndist/\ncoverage/\n.DS_Store\n.vscode/\npackage-lock.json\njsconfig.json\nsrc/content_scripts/safari.js\n*~\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.224609375,
          "content": "Thank you for willing to contribute on this project.\n\n## Reporting issues\n\nPlease use below template to report issue, or you could click menu item from SurfingKeys icon in browser's tool bar.\n\n    ## Error details\n\n\n\n    SurfingKeys: 0.9.22\n\n    Browser: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:57.0) Gecko/20100101 Firefox/57.0\n\n    URL: <The_URL_Where_You_Find_The_Issue>\n\n    ## Context\n\n    **Please replace this with a description of how you were using SurfingKeys.**\n\n## Build\n\n    npm install\n    npm run build:prod\n\n    browser=firefox npm run build:prod             # build webextension for firefox\n\n    npm run build:dev                         # build development version\n    browser=firefox npm run build:dev         # build development version for firefox\n\n## Load Extension\n\nTo load the extension:\n1. Build using npm.\n2. Open the browser's extension page. \n  - For Chrome, this can be accessed through \"chrome://extensions\".\n3. Disable the Surfingkeys extension that was installed from the Google Chrome Store.\n4. Enable \"Developer mode\" then click \"Load unpacked.\"\n5. For versions prior to v1.x, navigate to `<pathToSurfingkeys>/dist/Chrome-extensions`\n6. For version v1.x, navigate to `<pathToSurfingkeys>/dist/<env>/<browser>`.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.041015625,
          "content": "MIT License\n\nCopyright (c) 2015 brookhong\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 34.34765625,
          "content": "# Surfingkeys - Expand your browser with javascript and keyboard.\n\n[![Node CI](https://github.com/brookhong/Surfingkeys/workflows/Node%20CI/badge.svg?branch=master)](https://github.com/brookhong/Surfingkeys/actions?query=workflow%3A%22Node+CI%22+branch%3Amaster)\n\nSurfingkeys is another web browser(including Google Chrome, Chromium based browsers, Firefox, Safari) extension that provides keyboard-based navigation and control of the web in the spirit of the VIM editor. But it's not for VIM users only, it's for anyone who just needs some more shortcuts to his/her own functions.\n\nSurfingkeys is created with all settings described in Javascript, so it's easy for anyone to map any keystrokes to his/her own defined Javascript function. For example,\n\n    api.mapkey('<Ctrl-y>', 'Show me the money', function() {\n        api.Front.showPopup('a well-known phrase uttered by characters in the 1996 film Jerry Maguire (Escape to close).');\n    });\n\nSurfingkeys is doing its best to make full use of keyboard for web browsing, but there are some limitations from Google Chrome itself, please see [Brook Build of Chromium](https://brookhong.github.io/2021/04/18/brook-build-of-chromium.html) for a more thorough experience.\n\n## Installation\n\n<img src=\"https://raw.githubusercontent.com/brookhong/Surfingkeys/master/sk.svg\" width=\"384\">\n\n* [Surfingkeys - Chrome Web Store](https://chrome.google.com/webstore/detail/surfingkeys/gfbliohnnapiefjpjlpjnehglfpaknnc) for Google Chrome, Chromium based browsers\n* [Surfingkeys – Get this Extension for 🦊 Firefox](https://addons.mozilla.org/en-US/firefox/addon/surfingkeys_ff/) for Firefox\n* [Surfingkeys - Microsoft Edge Addons](https://microsoftedge.microsoft.com/addons/detail/kgnghhfkloifoabeaobjkgagcecbnppg) for Microsoft Edge\n* [Surfingkeys on the Mac App Store](https://apps.apple.com/us/app/surfingkeys/id1609752330) for Safari, works for both macOS and iOS, except that for iOS an external keyboard is required to be connected with your device. There is one exception of the [special feature designed for iOS device](https://youtu.be/xaTf2booQkQ) -- `Search selected with`.\n\n### Feature availability\n| Features \\ Browsers | Chromium family (above 45) | Firefox (above 57) | Safari (above 15) |\n|:---------------|:-----|:-----|:-----|\n| Follow links | Y | Y | Y |\n| Surfingkeys modes | Y | Y | Y |\n| Omnibar | Y | Y | partly |\n| Search selected with | Y | Y | Y |\n| Vim-like marks | Y | Y | Y |\n| Switch tabs | Y | Y | Y |\n| Windows management | Y | Y | N |\n| Commands | Y | Y | Y |\n| Smooth scroll | Y | Y | Y |\n| Session management | Y | Y | Y |\n| Repeats action by pressing number before mapkey | Y | Y | Y |\n| Hotkey to toggle Surfingkeys | Y | Y | Y |\n| VIM editor and Emacs editor | Y | Y | Y |\n| Dot to repeat previous action | Y | Y | Y |\n| Capture page | Y | Y | Y |\n| PDF viewer | Y | N | N |\n| Sync across devices | Y | N | Y |\n| Proxy | Y | N | N |\n| Markdown preview |Y  | Y | N |\n\n### TABLE OF CONTENTS\n\n* [Feature list](#feature-list)\n* [Quick start](#quick-start)\n* [Follow links](#follow-links)\n* [Surfingkeys modes](#surfingkeys-modes)\n* [Omnibar](#omnibar)\n* [Search selected with](#search-selected-with)\n* [Vim-like marks](#vim-like-marks)\n* [Switch tabs](#switch-tabs)\n* [Windows management](#windows-management)\n* [Commands](#commands)\n* [Smooth scroll](#smooth-scroll)\n* [Session management](#session-management)\n* [Repeats action by pressing number before mapkey](#repeats-action-by-pressing-number-before-mapkey)\n* [Hotkey to toggle Surfingkeys](#hotkey-to-toggle-surfingkeys)\n* [Proxy settings](#proxy-settings)\n* [VIM editor and Emacs editor](#vim-editor-and-emacs-editor)\n* [Dot to repeat previous action](#dot-to-repeat-previous-action)\n* [Markdown preview](#markdown-preview)\n* [Capture page](#capture-page)\n* [PDF viewer](#pdf-viewer)\n* [Edit your own settings](#edit-your-own-settings)\n* [License](#license)\n\n## Feature list\n* All settings are set up within a javascript file, which makes it easy to create mapping to user customized function.\n* A large cursor in visual mode, which makes visual mode better.\n* Search selected with, which works in both normal mode and visual mode.\n* Help messages are automatically generated for mappings.\n* `*` to search word under cursor in visual mode.\n* Scroll actions like page up/down (`e` `d`) work for not only top window but also scrollable DIV.\n* `w` to switch frames if there is.\n* Session management\n* A versatile bookmark/url finder\n* Count prefixes to repeat actions\n* Use vim editor to edit input on page\n* Dot to repeat previous action\n* `;pm` to preview markdown\n* Emoji completion in Insert mode\n* Rich hints for keystroke\n* Everything in Surfingkeys works for PDF\n\n## Quick start\n\nAfter you install the extension from [Chrome Web Store](https://chrome.google.com/webstore/detail/surfingkeys/gfbliohnnapiefjpjlpjnehglfpaknnc) or [Firefox Add-ons](https://addons.mozilla.org/en-US/firefox/addon/surfingkeys_ff/), open a site you'd like. Then press `?` or `u` to take a quick look on the default mappings first. Press `Esc` to hide the usage popover.\n\nTry some mappings described in the usage popover. For example, press `e` to scroll a page up, `d` to scroll a page down, `;e` to open settings page.\n\n* `?` to show help\n![help](https://user-images.githubusercontent.com/288207/72702854-0a74a480-3b8f-11ea-9be3-69745c280c3f.png)\n* `t` to search bookmarks/history\n![urls](https://cloud.githubusercontent.com/assets/288207/16182031/58e15ec4-36d4-11e6-9cc5-ff35970df25f.png)\n* `/` to find in current page\n![find](https://cloud.githubusercontent.com/assets/288207/16182044/65f4713c-36d4-11e6-9e21-6b61a858f080.png)\n* `f` to follow links\n![follow](https://cloud.githubusercontent.com/assets/288207/16182118/18d27678-36d5-11e6-9759-d8b5ff49930c.png)\n* `v` to toggle visual mode\n![visual](https://cloud.githubusercontent.com/assets/288207/16182120/1cc536da-36d5-11e6-9e08-293cdb8fbcd2.png)\n* `T` to switch tabs\n![tabs](https://cloud.githubusercontent.com/assets/288207/10328839/f0143ffe-6ceb-11e5-8eee-962db94b2c22.png)\n\n## Follow links\n\nDefault hint characters for links are `asdfgqwertzxcvb`, it quits when a non-hint key is pressed. Add below line to your settings to make it right hand:\n\n    api.Hints.setCharacters('yuiophjklnm'); // for right hand\n\nWhen hints are overlapped, press `Shift` to flip them. Hold `space` to hold hints temporarily, release `space` to restore hints.\n\nHints are placed in center of target links, you could add below line in your settings to let them aligned left.\n\n    settings.hintAlign = \"left\";\n\n## Surfingkeys modes\n\nThere are three modes in Surfingkeys: normal, visual and insert.\n\n### Normal mode, the default mode.\n\nWhen you open a page, it enters normal mode automatically. All mappings added with `mapkey` work in this mode.\n\n### Visual mode, the mode for text selection, and actions on the selected text.\n\nPress `v` to toggle visual mode. You'll see an indicator at bottom of current page - `Caret` or `Range`, and a large cursor on page. The cursor is made large for visibility, as sometimes it's not easy for human to locate a normal cursor on a web page.\n\n`Caret` indicates that cursor is moved when you press jkhl, `Range` indicates that you'll select text when moving cursor.\n\nNow here is a small practice,\n\n1. press `v` you'll see `Caret`\n1. use the VIM key bindings to move cursor to some where.\n1. press `v` again, you'll see `Range`.\n1. use the VIM key bindings to select some text.\n1. press `sg` to see what will happen.\n1. press `v` again to back to normal mode.\n\nAll mappings added with `vmapkey` work in this mode, with some built-in mappings like those in VIM - `j` `k` `h` `l` `b` `w` `0` `$` etc.\n\n![search_selected](https://cloud.githubusercontent.com/assets/288207/17644215/759f1e70-61b3-11e6-8bf8-0bdff7d0c933.gif)\n\n* `zz` make cursor at center of window.\n* `f` forward to next char.\n* `F` backward to next char.\n* `;` repeat latest f, F.\n* `,` repeat latest f, F in opposite direction.\n\n### Insert mode\n\nWhen focus is switched into any editable element by whatever means(`i` hints or `f` hints or mouse click), Insert mode is on.\n\nAll mappings added with `imapkey` work in this mode.\n\n* `Ctrl - i` to open vim editor to edit.\n* `Ctrl - '` to toggle quotes in an input element, this is useful for search engines like google.\n* `Ctrl-e` move the cursor to the end of the line.\n* `Ctrl-f` move the cursor to the beginning of the line.\n* `Ctrl-u` delete all entered characters before the cursor.\n* `Alt-b` move the cursor Backward 1 word.\n* `Alt-f` move the cursor Forward 1 word.\n* `Alt-w` delete a word backwards.\n* `Alt-d` delete a word forwards.\n\n`imap` and `iunmap` for insert mode.\n\n    api.imap(',,', \"<Esc>\");        // press comma twice to leave current input box.\n    api.imap(';;', \"<Ctrl-'>\");     // press semicolon twice to toggle quote.\n\n#### Emoji completion\n\nWhen user inputs a colon and 2(set by `settings.startToShowEmoji`) characters such as `:gr` in insert mode, Surfingkeys will try to find matched emoji, and list them out if there are some found.\n\n![emoji](https://cloud.githubusercontent.com/assets/288207/23602453/924ed762-028b-11e7-86f3-bf315c0a2499.gif)\n\nIf you want this feature disabled completely, use below settings:\n\n    api.iunmap(\":\");\n\nIf you'd like emoji suggestions popup as soon as you input colon, use below:\n\n    settings.startToShowEmoji = 0;\n\n[Complete list of Emoji](https://github.com/brookhong/Surfingkeys/blob/master/src/pages/emoji.tsv)\n\n### Find\n\n`Find` is not actually a mode, it just another way to enter visual mode. Press `/` to open find bar, which sits at almost the same position with Mode indicator, type something there. All occurrences of your input will be highlighted. Press `Enter` to finish the finding, and you're in `Caret` visual mode now, press `n` to find next, `N` to find previous.\n\nPress `Ctrl-Enter` to find exactly the whole word input, like with the input `\\bkeyword\\b`.\n\n### PassThrough mode\n\nTo press `Alt-i` to enter PassThrough mode gives you a chance to temporarily suppress SurfingKeys, which means Surfingkeys will not care any key press until leaving this mode by pressing `Esc`. In this mode, you could use built-in shortcuts from any site itself. Please see [Feature Request: implement Vimium-style insert mode · Issue #656](https://github.com/brookhong/Surfingkeys/issues/656) for why we brought this in and the difference between `Alt-i` and `Alt-s`.\n\nTo press `p` to enter ephemeral PassThrough mode, which will automatically quit after 1 second.\n\n### Lurk mode\n\nUser can specify the pages where Surfingkeys will lurk until it is called out by `Alt-i` or `p`(for ephemeral case), such as\n\n    settings.lurkingPattern = /https:\\/\\/github\\.com|.*confluence.*/i;\n\nIf the loading page matches with the `lurkingPattern`, Surfingkeys will enter `lurk` mode by default, in which mode only `Alt-i` and `p` are registered by Surfingkeys to activate `normal` mode. When user presses `Esc` or timeout, Surfingkeys reverts back to `lurk` mode.\n\nAPI `lmap` can be used to change the shortcuts, for example,\n\n    api.lmap(\"<Alt-j>\", \"<Alt-i>\");\n\nThe extension icon in toolbar reflects current status of Surfingkeys,\n\n* Grey -- disabled.\n* Half Grey/Half Color -- lurking.\n* Color -- enabled.\n## Omnibar\n\nThe omnibar provides kinds of functions that need user input, for example,\n\n* Open url(from both bookmarks and history) with `t`\n* Open bookmarks with `b`\n* Open search engines with `og` / `ow` ...\n* Open commands with `:`\n\n### key bindings in Omnibar\n* `Enter` to open selected item and close omnibar.\n* `Ctrl-Enter` to open selected item, but keep omnibar open for more items to be opened.\n* `Shift-Enter` to open selected item in current tab and close omnibar. If you'd like to open in current tab by default, please use `go`.\n* `Tab` to forward cycle through the candidates.\n* `Shift-Tab` to backward cycle through the candidates.\n* `Ctrl-.` to show results of next page\n* `Ctrl-,` to show results of previous page\n* `Ctrl-c` to copy all listed items\n\nIn omnibar opened with `t`:\n\n`Ctrl - d` to delete from bookmark or history\n\nIn omnibar opened with `b`:\n\n`Ctrl - Shift - <any letter>` to create vim-like mark\n\n![search_engine](https://cloud.githubusercontent.com/assets/288207/17644214/759ef1d4-61b3-11e6-9bd9-70c38c8b80e0.gif)\n\n`cmap` could be used for Omnibar to change mappings, for example:\n\n    api.cmap('<Ctrl-n>', '<Tab>');\n    api.cmap('<Ctrl-p>', '<Shift-Tab>');\n\n### Add bookmark\n`ab` is a shortcut to bookmark current page. An Omnibar is displayed for you to choose a folder to place the new bookmark after you pressed `ab`. If you want to place the new bookmark into a new folder, you could input folder name -- **which must be ended with `/`** in Omnibar. For example, I choose folder `/Bookmarks Bar/tool/`, and append `abc/`, then current page will be bookmarked into `/Bookmarks Bar/tool/abc/`. If there is no `/` behind `abc`, `abc` will be used as title of the new bookmark.\n\n## Search selected with\n\nMy favorite feature from when I was using Firefox. For both Firefox and Chrome, the extensions make it through context menu. Surfingkeys makes it through key mappings. By default, when you press `sg` in normal mode, it will search selected text with google, if there is none selected, it will search text from system clipboard with google. In visual mode, it will search selected text with google.\n\nThe `g` in `sg` is a search alias for google, there are some other built-in search aliases -- like `w` for bing. So press `sw` to search selected with bing. Refer to [Add search alias to omnibar](https://github.com/brookhong/Surfingkeys/blob/master/docs/API.md#addsearchalias) to add your own search alias, especially those search engines for company inside.\n\nBesides that, there is a `sog`, to search selected text only in this site with google. For `sog`, `s` is the search_leader_key, `o` is the only_this_site_key, `g` is the search alias.\n\nThe search_leader_key `s` plus capital alias `G` will search selected with google interactively, all other search aliases and those you added through API `addSearchAlias` work in same way.\n\n## Vim-like marks\n\nYou can create vim-like marks by pressing `m`, followed by a word character(0-9 / a-z / A-Z), used as mark name. For example, if you press `ma` on this page, you'll create a mark named `a` which points to this page. Then pressing `'a` anywhere, you'll jump to this page.\n\nIn this way, the created mark always points to current URL. You can also create vim-like marks from the bookmarks. Try following steps:\n\n1. press `b` to open bookmarks.\n1. type something to locate the URL you'd like to create vim-like mark for.\n1. Hold Ctrl + Shift, press a mark name, such as `f`.\n\nThen afterwards `'F` will open that URL directly.\n\nThis is very useful for those pages you access very frequently. `om` to check out all the vim-like marks you have created.\n\n## Switch tabs\n\nBy default, pressing `T` will show all opened tabs in an overlay, then pressing the hint char, will switch to the related tab.\n\n![tabs_overlay](https://github.com/brookhong/Surfingkeys/assets/288207/f0ca339d-133f-4fb0-b902-cdc64fc71374)\n\nIf there is no hint label matched with your pressing, omnibar will be opened. So you can always press a non-hint character such as `;` or `j` to launch omnibar directly from the tabs overlay.\n\nThere is also `settings.tabsThreshold` here. When total of opened tabs exceeds `settings.tabsThreshold`, omnibar will be used for choosing tabs.\n\n![tabs_omnibar](https://cloud.githubusercontent.com/assets/288207/10544630/1fbdd02c-7457-11e5-823c-14411311c315.png)\n\nIf you prefer to use omnibar always, use below mapping:\n\n    api.mapkey('<Space>', 'Choose a tab with omnibar', function() {\n        api.Front.openOmnibar({type: \"Tabs\"});\n    });\n\nwhich works same as:\n\n    settings.tabsThreshold = 0;\n\nThe tabs are displayed in MRU order by default, either in omnibar or overlay. If you want them in natural order, use:\n\n    settings.tabsMRUOrder = false;\n\n## Windows management\n\n`W` will bring up a popup of Windows, you can select one of them and press `Enter` to move current tab to the selected window. If there is only one window, `W` will move current tab to a new window directly.\n\n`;gt` will open Omnibar with all tabs not from current window, you could input some text to filter the tabs, then press `Enter` to gather the filtered tabs into current window. `;gw` will gather all tabs into current window.\n\nSo to group your tabs into windows, you can use `W` to move one tab to a specified window or use `;gt` to gather filtered tabs into current window.\n\n## Commands\n\n`:` to open omnibar for commands, then you can execute any pre-defined there. The result will be displayed below the omnibar.\n\n    // create shortcuts for the command with different parameters\n    api.map(';pa', ':setProxyMode always');\n    api.map(';pb', ':setProxyMode byhost');\n    api.map(';pd', ':setProxyMode direct');\n\nBesides commands, you can also run javascript code.\n\n![commands_in_omnibar](https://cloud.githubusercontent.com/assets/288207/11527801/fadee82c-991d-11e5-92e9-b054796a6a75.png)\n\n## Smooth scroll\n\nSmooth scroll works for any scrollable element. It is on by default, to turn it off as below:\n\n    settings.smoothScroll = false;\n\n`j`/`k` scrolls in one step with size as 70, you could change it as below:\n\n    settings.scrollStepSize = 140;\n\n## Session management\n\nTo create session in Chrome with Surfingkeys will save URLs for all tabs, and to open a session will open all the URLs of the session in different tab, so basically a session is a list of URLs, which has a name.\n\n* `ZZ` will save all current tabs into a session named `LAST` then quit.\n* `ZR` will restore the session named `LAST`.\n* `ZQ` will just quit.\n\nYou can create multiple sessions with different names in command mode. Press `:` to open omnibar for commands, then input:\n\n    createSession works\n\nSurfingkeys will create a session named `works` for you, to open the session with command input as:\n\n    openSession works\n\nTo list all your saved sessions:\n\n    listSession\n\nTo delete a session:\n\n    deleteSession works\n\n## Repeats action by pressing number before mapkey\n\nIf you need repeat some action several times, just press a number before mapkey, such as `3d`, which will scroll down 3 pages. Repeats also works for Tab navigation, for example, you're now on the 1st Tab, and you want to switch to the 4th Tab,\n\n* press `3R` to achieve that\n* `3E` will switch back to 1st Tab.\n\nAnother example to move one Tab, say, you're on the 12th Tab of 23 tabs.\n\n* `11<<` will move current tab to beginning.\n* `10>>` will move current tab to end.\n\nUsually, you need not count the number, you just prefix a large number such as `99<<`, if you want to move a tab to beginning or end.\n\n## Hotkey to toggle Surfingkeys\n\nBy default, `Alt-s` will toggle Surfingkeys for current site. When Surfingkeys is turned off, all mappings stop working except the hotkey. To change hotkey, use settings below:\n\n    api.map('<Ctrl-i>', '<Alt-s>'); // hotkey must be one keystroke with/without modifier, it can not be a sequence of keystrokes like `gg`.\n\nWhen Surfingkeys is turned off on some site by `Alt-s`, the status will be persisted in settings, for example,\n\n    \"blocklist\": {\n        \"https://github.com\": 1\n    },\n\n`Alt-s` once more will remove it from settings.blocklist. The data settings are not always presented in snippets, you could use `yj` to dump all settings into clipboard, then paste it in your text editor to check out.\n\nAnother way to disable Surfingkeys is to use `settings.blocklistPattern`, please refer to [regex for disabling](https://github.com/brookhong/Surfingkeys/issues/63).\n\n## Proxy settings\n\nSwitchySharp is a great extension to switch proxy, but my use case with it is very simple,\n\n1. create a profile using PAC script.\n1. maintain site list in the PAC script, use proxy if the site being accessed is in the list.\n1. whenever I come into a site blocked by something, I add it to the list in PAC script.\n1. click the SwitchySharp icon to reload the profile.\n1. casually I click the SwitchySharp icon to switch profile between `direct` and `pac_script`.\n\nTo avoid manually editing PAC script and reloading/switching profile by clicking SwitchySharp icon, I replaced SwitchySharp by integrating proxy settings into Surfingkeys, and provides related commands and shortcuts.\n\n* setProxy, to set proxy, some examples:\n\n        setProxy 192.168.1.100:8080\n        setProxy 127.0.0.1:1080 SOCKS5\n\n* setProxyMode, to set proxy mode, there are five modes: direct, byhost, bypass, always, system and clear.\n\n        direct      Chrome will connect to all sites directly.\n        byhost      Chrome will only connect to sites added by `addProxySite` through related proxy. You could add multiple pairs of `proxy` and `hosts`, for hosts matched with `hosts` `proxy` will be used.\n        bypass      Chrome will connect to all sites through proxy, with specified hosts excluded.\n        always      Chrome will connect to all sites through proxy.\n        system      Use proxy configuration taken from the operating system.\n        clear       Surfingkeys will not take control of proxy settings, this is the default mode.\n\n* addProxySite, removeProxySite, toggleProxySite, to make Chrome connect to site through proxy or not, examples:\n\n        addProxySite google.com,facebook.com,twitter.com\n\n* proxyInfo, to list proxy you set by `setProxy`, proxy mode you set by `setProxyMode` and sites you add/remove by `addProxySite`/`removeProxySite`/`toggleProxySite`.\n\n* `cp`, toggle proxy for current site.\n\n* `;pa`, shortcut for `:setProxyMode always`\n\n* `;pb`, shortcut for `:setProxyMode byhost`\n\n* `;pc`, shortcut for `:setProxyMode clear`\n\n* `;pd`, shortcut for `:setProxyMode direct`\n\n* `;ps`, shortcut for `:setProxyMode system`\n\n## VIM editor and Emacs editor\n\nThanks ACE for the vim editor, Surfingkeys integrates ACE for the vim editor. The vim editor is used:\n\n* to edit any input on html page\n* to edit URL to open in new tab\n* to edit settings\n\nYou could change to Emacs keybindings for the editor by adding below settings:\n\n    settings.aceKeybindings = \"emacs\";\n\nWith Emacs keybindings, use `C-x C-s` to save your input.\n\n### Edit any input on html page\n\nIn normal mode, press capital `I`, then use a hint letter to pick up a input box. A vim editor is opened for you to edit text. The vim editor is opened in slightly different way for `<input>`, `<textarea>`, and `<select>` elements.\n\nFor `<input>` elements, the vim editor has only one line, and you use vim key bindings to edit your text. Then press `Enter` or `:w` to write your text back to the `<input>` element.\n\n![input_with_vim](https://cloud.githubusercontent.com/assets/288207/17644219/75a72b2e-61b3-11e6-8ce2-06c9cc94aeca.gif)\n\nFor `<textarea>` elements, the vim editor is opened in bigger size. After you complete your edits, press `Ctrl-Enter` or `:w` to write your text back to the `<textarea>` element.\n\n![textarea_with_vim](https://cloud.githubusercontent.com/assets/288207/17644217/75a27e44-61b3-11e6-8f21-9cd79d3c5776.gif)\n\nFor `<select>` elements, the vim editor is again opened in bigger size. Instead of editing the text, search for the desired option and jump to the line, then press `Enter` to select it. This is handy for `<select>` elements which have lots of options.\n\n![select_with_vim](https://cloud.githubusercontent.com/assets/288207/17644218/75a458a4-61b3-11e6-8ce7-eedcc996745c.gif)\n\n`Esc` or `:q` to quit vim editor without writing text back.\n\n`Tab` completion works with all words on current page, `Space` to choose a match from popup.\n\nIf you enter insert mode with `i` or mouse click, you will edit your input in normal way. You could also open vim editor at that time by pressing `Ctrl-i`.\n\nRemember that in insert mode, press `Ctrl-i` to open the vim editor.\n\n### Edit URL to open in new tab\n\n`;u` to open vim editor to edit current URL, then `Enter` or `:w` to open the input URL, which works just like address bar with vim-binding keys.\n\n`Tab` completion works with all URLs from bookmark/history, `Space` to choose a match from popup.\n\n![url_with_vim](https://cloud.githubusercontent.com/assets/288207/17644220/75f8eedc-61b3-11e6-9630-da2250ac5f10.gif)\n\n### Edit settings\n\n`;e` to open settings editor, `:w` to save settings.\n\n## Dot to repeat previous action\n\n[Repeating previous actions](https://github.com/brookhong/Surfingkeys/issues/67)\n\nAll keystrokes in normal mode are repeatable by dot, except those keystrokes mapped with `repeatIgnore` as `true`, for example,\n\n    api.mapkey('se', '#2My magic se', function() {\n        // your code here\n    }, {repeatIgnore: true});\n\nThen `.` will not repeat your magic action with `se`, even it is just pressed.\n\n## Markdown preview\n\n1. copy your markdown source into clipboard.\n1. `;pm` to open markdown preview, which will preview markdown from clipboard.\n1. Then on the preview page, another `;pm` will open vim editor to edit markdown source.\n1. `:wq` to refresh preview.\n1. `r` to reload markdown source from clipboard.\n\n![markdown](https://cloud.githubusercontent.com/assets/288207/17669897/0b6fbaf6-6342-11e6-8583-86eb8691190d.gif)\n\nBy default, Surfingkeys uses this [markdown parser](https://github.com/chjj/marked) to preview markdown, if you'd like to use [github markdown API](https://developer.github.com/v3/markdown/) to parse your markdown, please add below line to your settings:\n\n    settings.useLocalMarkdownAPI = false;\n\n## Capture page\n\nThere are some circumstances that you want to take a screenshot on a page, below shortcuts could help you, especially when it is for a long page or just for some scrollable DIV on the page.\n\n* `yg` to capture current page.\n* `yG` to capture current full page if it is scrollable.\n* `yS` to capture current scroll target.\n\nAfter one of above shortcuts pressed, you could see a popup of captured image, on which you could then right click with a MOUSE( 😢 ) to save as or copy into system clipboard.\n\n## PDF viewer\nTo make Surfingkeys work for PDF files, Surfingkeys integrates PDF viewer from the notable [pdf.js](https://github.com/mozilla/pdf.js). When a pdf file is opened in Chrome, the PDF viewer will be launched, and you could use everything from Surfingkeys then.\n\nIf you would like to use original pdf viewer provided by Chrome itself, use `;s` to toggle that.\n\nSome functionalities are also available when you're using original pdf viewer, but some functionalities such as smooth scroll/visual mode etc won't be available.\n\n## Edit your own settings\n\n### Properties list\n\n| key | default value | explanation |\n|:---------------|:-----|:-----|\n| settings.showModeStatus | false | Whether always to show mode status. |\n| settings.showProxyInStatusBar | false | Whether to show proxy info in status bar. |\n| settings.richHintsForKeystroke | 500 | Timeout(ms) to show rich hints for keystroke, 0 will disable rich hints. |\n| settings.useLocalMarkdownAPI |  true | Whether to use [chjj/marked](https://github.com/chjj/marked) to parse markdown, otherwise use github markdown API. |\n| settings.focusOnSaved | true | Whether to focus text input after quitting from vim editor. |\n| settings.omnibarMaxResults | 10 | How many results will be listed out each page for Omnibar. |\n| settings.omnibarHistoryCacheSize | 100 | The maximum of items fetched from browser history. |\n| settings.omnibarPosition | \"middle\" | Where to position Omnibar. [\"middle\", \"bottom\"] |\n| settings.omnibarSuggestion | false | Show suggestion URLs|\n| settings.omnibarSuggestionTimeout | 200 | Timeout duration before Omnibar suggestion URLs are queried, in milliseconds. Helps prevent unnecessary HTTP requests and API rate-limiting. |\n| settings.focusFirstCandidate | false | Whether to focus first candidate of matched result in Omnibar. |\n| settings.tabsThreshold | 100 | When total of opened tabs exceeds the number, Omnibar will be used for choosing tabs. |\n| settings.verticalTabs | true | Whether to show tab pickers vertically aligned. |\n| settings.clickableSelector | \"\" | Extra CSS selector to pick elements for hints mode, such as \"\\*.jfk-button, \\*.goog-flat-menu-button\". |\n| settings.clickablePat | /(https?&#124;thunder&#124;magnet):\\/\\/\\S+/ig | A regex to detect clickable links from text, you could use `O` to open them. |\n| settings.editableSelector | div.CodeMirror-scroll,div.ace_content | CSS selector for additional editable elements. |\n| settings.smoothScroll | true | Whether to use smooth scrolling when pressing keys like `j`/`k`/`e`/`d` to scroll page or elements. |\n| settings.modeAfterYank | \"\" | Which mode to fall back after yanking text in visual mode. Value could be one of [\"\", \"Caret\", \"Normal\"], default is \"\", which means no action after yank.|\n| settings.scrollStepSize | 70 | A step size for each move by `j`/`k` |\n| settings.scrollFriction | 0 | A force that is needed to start continuous scrolling after initial scroll step. A bigger number will cause a flicker after initial step, but help to keep the first step precise. |\n| settings.nextLinkRegex | /((>>&#124;next)+)/i | A regex to match links that indicate next page. |\n| settings.prevLinkRegex | /((<<&#124;prev(ious)?)+)/i| A regex to match links that indicate previous page. |\n| settings.hintAlign | \"center\" | Alignment of hints on their target elements. [\"left\", \"center\", \"right\"] |\n| settings.hintExplicit | false | Whether to wait for explicit input when there is only a single hint available |\n| settings.hintShiftNonActive | false | Whether new tab is active after entering hint while holding shift |\n| settings.defaultSearchEngine | \"g\" | The default search engine used in Omnibar. |\n| settings.blocklistPattern | undefined | A regex to match the sites that will have Surfingkeys disabled. |\n| settings.focusAfterClosed | \"right\" | Which tab will be focused after the current tab is closed. [\"left\", \"right\", \"last\"] |\n| settings.repeatThreshold | 99 | The maximum of actions to be repeated. |\n| settings.tabsMRUOrder | true | Whether to list opened tabs in order of most recently used beneath Omnibar. |\n| settings.historyMUOrder | true | Whether to list history in order of most used beneath Omnibar. |\n| settings.newTabPosition | 'default' | Where to new tab. [\"left\", \"right\", \"first\", \"last\", \"default\"] |\n| settings.interceptedErrors | [] | Indicates for which errors Surfingkeys will show error page, so that you could use Surfingkeys on those error pages. For example, [\"*\"] to show error page for all errors, or [\"net::ERR_NAME_NOT_RESOLVED\"] to show error page only for ERR_NAME_NOT_RESOLVED, please refer to [net_error_list.h](https://github.com/adobe/chromium/blob/master/net/base/net_error_list.h) for complete error list.  |\n| settings.enableEmojiInsertion | false | Whether to turn on Emoji completion in Insert mode. |\n| settings.startToShowEmoji | 2 | How many characters are needed after colon to show emoji suggestion. |\n| settings.language | undefined | The language of the usage popover, only \"zh-CN\" is added for now, PR for any other language is welcomed, please see [l10n.json](https://github.com/brookhong/Surfingkeys/blob/master/pages/l108.json). |\n| settings.stealFocusOnLoad | true | Whether to prevent focus on input on page loaded, set to true by default so that we could use Surfingkeys directly after page loaded, otherwise we need press `Esc` to quit input. |\n| settings.enableAutoFocus | true | Whether to enable auto focus after mouse click on some widget. This is different with `stealFocusOnLoad`, which is only for the time of page loaded. For example, there is a hidden input box on a page, it is turned to visible after user clicks on some other link. If you don't like the input to be focused when it's turned to visible, you could set this to false. |\n| settings.theme | undefined | To change css of the Surfingkeys UI elements. |\n| settings.caseSensitive | false | Whether finding in page/Omnibar is case sensitive. |\n| settings.smartCase | true | Whether to make caseSensitive true if the search pattern contains upper case characters. |\n| settings.cursorAtEndOfInput | true | Whether to put cursor at end of input when entering an input box, by false to put the cursor where it was when focus was removed from the input. |\n| settings.digitForRepeat | true | Whether digits are reserved for repeats, by false to enable mapping of numeric keys. |\n| settings.editableBodyCare | true | Insert mode is activated automatically when an editable element is focused, so if document.body is editable for some window/iframe (such as docs.google.com), Insert mode is always activated on the window/iframe, which means all shortcuts from Normal mode will not be available. With `editableBodyCare` as `true`, Insert mode will not be activated automatically in this case. |\n| settings.ignoredFrameHosts | [\"https://tpc.googlesyndication.com\"] | When using `w` to loop through frames, you could use this settings to exclude some of them, such as those for advertisements. |\n| settings.aceKeybindings | \"vim\" | Set it \"emacs\" to use emacs keybindings in the ACE editor. |\n| settings.caretViewport | null | Set it in format `[top, left, bottom, right]` to limit hints generation on `v` for entering visual mode, such as `[window.innerHeight / 2 - 10, 0, window.innerHeight / 2 + 10, window.innerWidth]` will make Surfingkeys generate Hints only for text that display on vertically middle of window. |\n| settings.mouseSelectToQuery | [] | All hosts that have enable feature -- mouse selection to query. |\n| settings.autoSpeakOnInlineQuery | false | Whether to automatically speak the query string with TTS on inline query. |\n\n### Example of settings.theme, below is to set font size of status bar\n\n    settings.theme = `\n        #sk_status, #sk_find {\n            font-size: 20pt;\n        }\n    }`;\n\n## API Documentation\n\n> The API documentation is currently a work in progress.\n\n* [Markdown](docs/API.md)\n* [HTML](http://brookhong.github.io/Surfingkeys)\n\n## Other\n\n* [Anki Study Deck](https://ankiweb.net/shared/info/1195173768), Anki Study Deck (helpful for memorizing keyboard mappings) \n* For further information check out the [FAQ](https://github.com/brookhong/Surfingkeys/wiki/FAQ) and add to the user-contributed documentation on the [Surfingkeys Wiki](https://github.com/brookhong/Surfingkeys/wiki/).\n\n## Credits\n\n* ~~[jQuery](https://github.com/jquery/jquery)~~, removed for less memory usage and better performance.\n* ~~[TRIE](https://github.com/mikedeboer/trie)~~, finally replaced by my own simple implementation for less memory usage and better performance.\n* [ACE vim editor](https://github.com/ajaxorg/ace), for vim editor.\n* [markdown parser](https://github.com/chjj/marked), for markdown parser.\n* [pdf.js](https://github.com/mozilla/pdf.js), for pdf viewer.\n* [vimium](https://github.com/philc/vimium), for the days without this extension.\n* [cVim](https://github.com/1995eaton/chromium-vim), for the days without this extension.\n\n## Donate\nSupport me with [paypal](https://www.paypal.me/brookhong), or\n\n![donation](https://raw.githubusercontent.com/brookhong/Surfingkeys/master/src/pages/donation.png)\n\n## License\n\nMIT License\n"
        },
        {
          "name": "README_CN.md",
          "type": "blob",
          "size": 31.5693359375,
          "content": "# Surfingkeys -- 用javascript和键盘扩展你的chrome\n\n\n[![Node CI](https://github.com/brookhong/Surfingkeys/workflows/Node%20CI/badge.svg?branch=master)](https://github.com/brookhong/Surfingkeys/actions?query=workflow%3A%22Node+CI%22+branch%3Amaster)\n\nSurfingkeys和现有的一些插件一样，让你尽可能的通过键盘来使用Chrome/Firefox浏览器，比如跳转网页，上下左右滚屏。但不只是给vim用户使用，Surfingkeys的基本特性是让你自己写一段Javascript脚本，然后通过`mapkey`映射到某些按键。之后当你按了那几个键以后，对应的Javascript脚本就会被执行。\n\nSurfingkeys的配置全部写在一段javascript中，很容易添加自己的映射按键。如：\n\n    api.mapkey('<Ctrl-y>', 'Show me the money', function() {\n        api.Front.showPopup('a well-known phrase uttered by characters in the 1996 film Jerry Maguire (Escape to close).');\n    });\n\nSurfingkeys从0.9.15开始支持火狐（需要57以上的版本），但目前下面的功能在火狐下不工作：\n* 同步不同设备间的设置\n* 代理设置\n* Markdown预览\n\nSurfingkeys尽量让用户使用键盘进行网页浏览，但有些限制是Google Chrome本身的，如果想要更彻底的体验请试试[Brook的Chromium浏览器](https://brookhong.github.io/2021/04/18/brook-build-of-chromium-cn.html)。\n\n## 安装\n\n* [Surfingkeys - Chrome Web Store](https://chrome.google.com/webstore/detail/surfingkeys/gfbliohnnapiefjpjlpjnehglfpaknnc)\n* [Surfingkeys – Get this Extension for 🦊 Firefox](https://addons.mozilla.org/en-US/firefox/addon/surfingkeys_ff/)\n* [Surfingkeys - Microsoft Edge Addons](https://microsoftedge.microsoft.com/addons/detail/kgnghhfkloifoabeaobjkgagcecbnppg)\n* [Surfingkeys on the Mac App Store](https://apps.apple.com/us/app/surfingkeys/id1609752330)\n\n### 目录\n\n* [功能特性](#功能特性)\n* [快速上手](#快速上手)\n* [打开连接](#打开连接)\n* [Surfingkeys支持的模式](#surfingkeys支持的模式)\n* [搜索栏](#搜索栏)\n* [搜索选中文本](#搜索选中文本)\n* [类vim标示](#类vim标示)\n* [切换标签页](#切换标签页)\n* [窗口管理](#窗口管理)\n* [命令](#命令)\n* [顺滑滚动](#顺滑滚动)\n* [会话管理](#会话管理)\n* [前缀数字可多次重复相应操作](#前缀数字可多次重复相应操作)\n* [开关热键](#开关热键)\n* [代理设置](#代理设置)\n* [VIM编辑器或者Emacs编辑器](#vim编辑器或者emacs编辑器)\n* [点命令重复前一个操作](#点命令重复前一个操作)\n* [Markdown预览](#markdown预览)\n* [截屏](#截屏)\n* [PDF阅读器](#pdf阅读器)\n* [配置参考](#配置参考)\n* [编译](#编译)\n* [License](#license)\n\n## 功能特性\n* 所有配置都用javascript描述，易于修改添加自己的按键。\n* 一个大号光标，这样visual mode不会太痛苦。\n* 搜索选中文本，在normal mode和visual mode都好用。\n* 自动生成帮助信息。\n* 在visual mode下，按`*` 可以搜索当前单词。\n* 滚动操作（像`e` `d`上下翻页之类）可以在顶层页面工作，也可以在一个支持滚动的DIV中使用。\n* 在一个有多个frame的页面中，`w`可以切换frame。\n* 会话管理。\n* 一个多功能书签地址栏\n* 前缀数字可多次重复相应操作\n* 使用VIM编辑页面上各种输入框\n* 点命令重复前一个操作\n* `;pm`预览markdown\n* 插入模式下的表情下拉选项\n* 按键实时提示\n* 所有按键对PDF适用\n\n## 快速上手\n\n* [Chrome插件安装地址](https://chrome.google.com/webstore/detail/surfingkeys/gfbliohnnapiefjpjlpjnehglfpaknnc)\n* [Firefox插件安装地址](https://addons.mozilla.org/en-US/firefox/addon/surfingkeys_ff/)\n\n安装本插件以后，打开你要访问的站点。先按`?`或者`u`看看帮助信息，按`Esc`可以关掉帮助信息。\n\n试试帮助信息里的那些按键，比如，`e`向上翻页，`d`向下翻页，`;e`打开设置。\n\n* `?` 显示帮助\n![help](https://cloud.githubusercontent.com/assets/288207/16181995/1417ca44-36d4-11e6-96c9-9e84b33f0916.png)\n* `t` 搜索收藏夹和访问历史\n![urls](https://cloud.githubusercontent.com/assets/288207/16182031/58e15ec4-36d4-11e6-9cc5-ff35970df25f.png)\n* `/` 在当前页查找\n![find](https://cloud.githubusercontent.com/assets/288207/16182044/65f4713c-36d4-11e6-9e21-6b61a858f080.png)\n* `f` 拨号打开链接\n![follow](https://cloud.githubusercontent.com/assets/288207/16182118/18d27678-36d5-11e6-9759-d8b5ff49930c.png)\n* `v` 切换文本选择模式\n![visual](https://cloud.githubusercontent.com/assets/288207/16182120/1cc536da-36d5-11e6-9e08-293cdb8fbcd2.png)\n* `T` 切换标签页\n![tabs](https://cloud.githubusercontent.com/assets/288207/10328839/f0143ffe-6ceb-11e5-8eee-962db94b2c22.png)\n\n## 打开连接\n\n默认的拨号键有`asdfgqwertzxcvb`，如果按了一个非拨号键，会自动退出拨号。下面的设置可以改成右手习惯：\n\n    Hints.characters = 'yuiophjklnm'; // for right hand\n\n当拨号盘有重叠上，可以按`Shift`翻转重叠的拨号盘。按住空格键可隐藏拨号盘，松开恢复。\n\n所有拨号放在目标链接的中间，你可以用下面的设置让它们靠左对齐：\n\n    settings.hintAlign = \"left\";\n\n## Surfingkeys支持的模式\n\nSurfingkeys有三种模式：normal，visual和insert。\n\n### Normal mode，默认模式\n\n当你打开一个页面时，自动进入该模式。通过函数`mapkey`添加的所有按键都只在这种模式下有用。\n\n### Visual mode，用于选中文本，以及各种针对选中文本的操作\n\n除了通过函数`vmapkey`添加的所有按键在这种模式下有用，此外还有一些内置类似vim的按键，如`j` `k` `h` `l` `b` `w` `0` `$`等。\n\n按`v`可以切换visual mode。在visual mode下，你会在页面底部看到一个提示 -- `Caret`或者`Range`，页面中还有一个大号的光标。光标做得这么大，是让人在页面中好找到它。\n\n`Caret` 表明当你按jkhl时会移动光标，`Range`则表明你移动光标会选择文本。下面有个小练习：\n\n1. 按下`v`，确认你能看到`Caret`提示和光标。\n1. 使用`j` `k` `h` `l` `b` `w` `0` `$`试试移动光标。\n1. 再按下`v`，确认你看到`Range`提示。\n1. 使用`j` `k` `h` `l` `b` `w` `0` `$`试试选中文本。\n1. 按下`sg`看看发生了什么。\n1. 再按下`v`回到normal mode。\n\n![search_selected](https://cloud.githubusercontent.com/assets/288207/17644215/759f1e70-61b3-11e6-8bf8-0bdff7d0c933.gif)\n\n* `zz` 让光标位于窗口中间行。\n* `f` 往前查找下一个字符。\n* `F` 往后查找下一个字符。\n* `;` 重复最后的`f`/`F`操作。\n* `,` 反向重复最后的`f`/`F`操作。\n\n### Insert mode\n\n当输入焦点定位到各类输入框时（无论你是通过`i`或`f`选择定位还是鼠标点击定位的），就进入该模式。\n通过函数`imapkey`添加的所有按键都只在这种模式下有用。\n\n* `Ctrl - i` 打开vim编辑器。\n* `Ctrl - '` 把输入框里的内容用双引号引起来或去除双引号，方便在搜索引擎页面上搜索时使用。\n* `Ctrl-e`移动光标到行尾。\n* `Ctrl-f` 移动光标到行首。\n* `Ctrl-u` 删除光标前所有输入。\n* `Alt-b` 移动光标到后一个词。\n* `Alt-f` 移动光标到前一个词。\n* `Alt-w` 往后删除一个词。\n* `Alt-d` 往前删除一个词。\n\n`imap` 和 `iunmap`：\n\n    api.imap(',,', \"<Esc>\");        // 按两次逗号退出当前输入框。\n    api.imap(';;', \"<Ctrl-'>\");     // 按两次分号切换双引号。\n\n\n#### 表情下拉选项\n\n当用户在插入模式下输入一个冒号跟着两个字符（2是通过`settings.startToShowEmoji`设置的）时，如`:gr`，Surfingkeys会列出相应的表情。\n\n![emoji](https://cloud.githubusercontent.com/assets/288207/23602453/924ed762-028b-11e7-86f3-bf315c0a2499.gif)\n\n如果你不喜欢这个功能，可以用以下设置禁用：\n\n    api.iunmap(\":\");\n\n如果你希望按下冒号后立刻出现表情下拉选项，可以用以下设置：\n\n    settings.startToShowEmoji = 0;\n\n[表情符号完整列表](https://github.com/brookhong/Surfingkeys/blob/master/src/pages/emoji.tsv)\n\n### 查找\n\n查找不是模式，但是它会让你自动进入visual mode. 按`/`打开查找栏，输入你要查找的文字，你会看到所有匹配的文字会被高亮。按回车完成查找，这时你会自动进入visual mode -- `Caret`。按`n`定位下一个，`N`定位前一个。\n\n按`Ctrl-Enter`查找完整的单词，就像输入`\\bkeyword\\b`一样。\n\n### PassThrough mode\n\n按`Alt-i`进入PassThrough模式可让你暂时放弃SurfingKeys，这时SurfingKeys所有按键不再有用，直到你按`Esc`退出PassThrough模式。在该模式下，你可以充分使用任何网站本身提供的快捷键。请参考[Feature Request: implement Vimium-style insert mode · Issue #656](https://github.com/brookhong/Surfingkeys/issues/656)了解为什么引入这种模式以及它与`Alt-s`的区别。\n\n按`p`进入一个短暂的PassThrough模式，它在一秒后会自动退出。如果默认设置的1秒超时不适合你的情况，可以在你的设置脚本里这样写改为1500毫秒：\n\n    api.mapkey('p', '#0enter ephemeral PassThrough mode to temporarily suppress SurfingKeys', function() {\n        api.Normal.passThrough(1500);\n    });\n### Lurk mode\n\n用户可以指定在哪些页面Surfingkeys默认进入Lurk模式，直到通过`Alt-i`或者`p`（短暂的）唤醒，\n\n    settings.lurkingPattern = /https:\\/\\/github\\.com|.*confluence.*/i;\n\n如果当前页面匹配`lurkingPattern`，Surfingkeys自动潜伏，此时用户必须通过`Alt-i`或者`p`唤醒才能进入正常模式，如果用户在正常模式下按`Esc`或者超时，Surfingkeys会退回潜伏模式。\n\n可使用`lmap`修改默认按键，如，\n\n    api.lmap(\"<Alt-j>\", \"<Alt-i>\");\n\n任务栏里的Surfingkeys图标会反应当前状态：\n\n* 灰色 -- 禁用\n* 半灰半彩 -- 潜伏\n* 彩色 -- 启用\n\n## 搜索栏\n\n一些需要用户输入的功能通过搜索栏提供，比如\n\n* 用`t`打开网页（从收藏夹或访问历史）\n* 用`b`打开收藏夹\n* 用`og`/`ob`等打开搜索引擎\n* 用`:`打开命令模式\n\n### 搜索栏按键\n* `Enter` 打开选中项并关闭搜索栏。\n* `Ctrl-Enter` 打开选中项，但不关闭搜索栏，你可以继续选中打开。\n* `Shift-Enter` 在当前标签页打开选中项并关闭搜索栏。如果你希望默认就在当前标签页打开，可以使用`go`。\n* `Tab` 在结果列表中向下切换。\n* `Shift-Tab` 在结果列表中向上切换。\n* `Ctrl-.` 显示下一页搜索结果\n* `Ctrl-,` 显示上一页搜索结果\n* `Ctrl-c` 复制当前列出的结果\n\n用`t`打开搜索栏时，\n\n`Ctrl - d` 可以从收藏夹或访问历史中删除选中项。\n\n用`b`打开搜索栏时，\n\n`Ctrl - Shift - <any letter>` 创建相应的类似vim标示。\n\n![search_engine](https://cloud.githubusercontent.com/assets/288207/17644214/759ef1d4-61b3-11e6-9bd9-70c38c8b80e0.gif)\n\n`cmap`用于搜索栏修改按键，如：\n\n    api.cmap('<Ctrl-n>', '<Tab>');\n    api.cmap('<Ctrl-p>', '<Shift-Tab>');\n\n### 添加书签\n`ab`可以把当前页加入书签。按`ab`后，搜索栏会弹出来让你选择放到哪个目录。如果你希望放到一个新建目录下面，可以输入新的目录名，**并以`/`结尾**，比如我选中了`/Bookmarks Bar/tool/`，然后在后面输入`abc/`，会把当前页加到`/Bookmarks Bar/tool/abc/`这个目录里。如果`abc`后面没有`/`，`abc`会被当作新建书签的标题保存。\n\n## 搜索选中文本\n\n从使用Firefox时起，我就必装的一个插件。无论Firefox还是Chrome，我用的插件都是通过右键菜单来实现的。Surfingkeys则通过按键来实现。默认情况下，当你在normal mode下按`sg`，Surfingkeys会打开google搜索选中文本，如果没有文字被选中，则搜索系统剪贴板里面的文字。在visual mode下，它只会搜索选中文本。\n\n`sg`里面的`g`是个别名，用于google，还有其他一些内置的别名，如`b`是百度的别名。这样当你按`sb`的时候就是使用百度来搜索选中文本。参考[在搜索栏里添加搜索别名](https://github.com/brookhong/Surfingkeys/blob/master/docs/API.md#addsearchalias)来添加你自己的搜索别名，尤其那些用于公司内部的搜索。\n\n此外，还有`sog`可以使用google在本站搜索选中文本。在这个`sog`里面，`s`是search_leader_key，`o`是only_this_site_key，`g`是搜索别名。\n\nsearch_leader_key(`s`)加上大写的别名(`G`)会打开搜索框让你可以修改添加搜索内容，再用Google搜索。其它别名和你通过`addSearchAlias`添加的别名，大写的都可以这样工作。\n\n## 类vim标示\n\n简单说，vim中的marks就是按`m`，然后跟一个字符（0-9 / a-z / A-Z），标示一下当前网址。之后，你随时按`'`跟上你定义的那个标示符，就会跳转到该网址。\n\n除了`m`键创建标示外，你还可以从收藏夹里按住Ctrl，加上标示符来创建。如下：\n\n1. 按下`b`打开收藏夹。\n1. 随便输点啥，定位到你要标示的网址。\n1. 按住Ctrl + Shift，加上你选中的标示符，比如`f`。\n\n之后，按`'F`就可以直接打开该网址来。\n\n这个功能对那些你需要经常访问对网址很有用，两个键直达。`om`可以查看你已创建的标示。\n\n## 切换标签页\n\n默认情况下，按`T`会显示所有已打开标签页，然后按相应的提示键可以切到该标签页。\n\n![tabs_overlay](https://github.com/brookhong/Surfingkeys/assets/288207/f0ca339d-133f-4fb0-b902-cdc64fc71374)\n\n如果你按的键没有匹配到任何标签，搜索栏会自动打开。因此你可以直接按一个标签提示符中不存在的键比如`;`或者`j`直接打开搜索栏来搜索标签。\n\n这里也有个设置`settings.tabsThreshold`，当然打开的标签页总数超过它时，再按空格就会使用搜索栏来选择标签。\n\n![tabs_omnibar](https://cloud.githubusercontent.com/assets/288207/10544630/1fbdd02c-7457-11e5-823c-14411311c315.png)\n\n如果你希望一直用搜索栏来选择标签页，可使用如下设置:\n\n    api.mapkey('<Space>', 'Choose a tab with omnibar', function() {\n        api.Front.openOmnibar({type: \"Tabs\"});\n    });\n\n效果相当于：\n\n    settings.tabsThreshold = 0;\n\n无论是否在搜索栏里，标签页都按最近使用的顺序列出。如果你希望按标签页原本的顺序列出，可以设置：\n\n    settings.tabsMRUOrder = false;\n\n## 窗口管理\n\n`W`会列出所有窗口，你可以选择其中一个，然后按回车键把当面标签页移到选定的窗口。如果当前浏览器只有一个窗口，`W`就直接把当前标签页移到一个新的窗口。\n\n`;gt`打开搜索栏列出所有不在当前窗口里的标签页，你可以输入文本过滤标签页，然后按回车键把所有过滤出来的标签页移到当前窗口。`;gw`则把所有窗口的所有标签页移到当前窗口。\n\n这样，管理窗口的各种标签页，你可以用`W`移动某一个标签页到指定窗口，也可以用`;gt`来收集包含特定关键词的标签页到当前窗口。\n\n## 命令\n\n用`:`打开搜索栏可用于执行命令，命令执行结果会显示在搜索栏下方。\n\n    // 映射不同的按键到该命令，但采用不同的参数。\n    api.map(';pa', ':setProxyMode always');\n    api.map(';pb', ':setProxyMode byhost');\n    api.map(';pd', ':setProxyMode direct');\n\n除了命令，你还可以执行各类简单js代码。\n\n![commands_in_omnibar](https://cloud.githubusercontent.com/assets/288207/11527801/fadee82c-991d-11e5-92e9-b054796a6a75.png)\n\n## 顺滑滚动\n\n所有可以滚动的对象都默认支持顺滑滚动，如下可以关掉顺滑特性：\n\n    settings.smoothScroll = false;\n\n`j`/`k` 按一步70像素的距离滚动，你可以定制步长：\n\n    settings.scrollStepSize = 140;\n\n## 会话管理\n\n用Surfingkeys在Chrome里保存会话相当于保存所有标签页的地址，打开会话则相当于在不同的标签页中打开所有保存其中的网页地址，所以会话基本上就是一个网页地址列表，每个会话有自己的名字。\n\n* `ZZ`会保存所有当前标签页到一个名为`LAST`的会话，然后退出。\n* `ZR`恢复名为`LAST`的会话。\n* `ZQ`就只退出，不保存当前会话。\n\n你可以在命令模式下创建／管理多个不同名称的会话。按`:`打开命令窗口，然后输入:\n\n    createSession works\n\n就会创建一个名为`works`的会话，要打开该会话使用如下命令：\n\n    openSession works\n\n列出已保存的所有会话：\n\n    listSession\n\n删除某个会话：\n\n    deleteSession works\n\n## 前缀数字可多次重复相应操作\n\n如果需要重复多次某个操作，可以在按该映射键之前按下相应的数字，比如`3d`，就会往下滚3页。这种方法同样适用于标签操作，比如，你现在在第一个标签页，你想切换到第四个标签页，\n\n* 按`3R`就可以\n* `3E`会切回到第一个标签页\n\n另一个例子是移动标签页，假设你现在开着23个标签页，你在第12个，\n\n* `11<<` 就把当前标签页移到第一个\n* `10>>` 则会把它移到最后一个\n\n通常情况，你不需要去数多少个标签页，如果你只是想移动到开头或者结尾的话，你按一个足够大的数字就可以，比如`99<<`。\n\n## 开关热键\n\n默认情况下，按`Alt-s`可以在当前站点开关Surfingkeys。当Surfingkeys处于关闭状态时，除了热键，其它所有按键映射都停止工作。用如下设置修改热键：\n\n    api.map('<Ctrl-i>', '<Alt-s>'); // 热键只能是一个按键，但可以带辅助按键，不能是`gg`这样的一串按键。\n\n当Surfingkeys在某个网站被`Alt-s`关掉时，这个状态会被保存在设置里，如\n\n    \"blocklist\": {\n        \"https://github.com\": 1\n    },\n\n再按一次`Alt-s`会从settings.blocklist中删除该站点。这类状态并不保存在设置脚本里，你可以按`yj`把当前所有设置复制到系统剪贴板，然后粘贴到文本编辑器里查看。\n\n另一个禁用Surfingkeys的方法是用`settings.blocklistPattern`，请参考[regex for disabling](https://github.com/brookhong/Surfingkeys/issues/63).\n\n## 代理设置\n\nSwitchySharp是个很好的代理管理插件，但我的用法很简单，\n\n1. 创建一个使用PAC脚本的配置。\n1. 在PAC脚本里维护一个网站列表，如果当前所访问的站点在其中就使用代理。\n1. 当碰到一个站点是被墙的，就把这个网站加入列表。\n1. 然后点击SwitchySharp的图标重载配置。\n1. 有时也会点击图标在配置之间切换。\n\n其中需要手工编辑PAC脚本，鼠标点击SwitchySharp图片切换重载配置，因此我把代理设置的功能集成进来，并提供相关的命令和快捷键。\n\n* setProxy, 设置代理，示例如下：\n\n        setProxy 192.168.1.100:8080\n        setProxy 127.0.0.1:1080 SOCKS5\n\n* setProxyMode, 设置代理模式，有五种模式：direct, byhost, bypass, always, system 和 clear。\n\n        direct      Chrome不使用代理访问任何网站。\n        byhost      Chrome只在访问你通过`addProxySite`命令添加过的网站时使用代理。你可以添加多条映射，让不同的网站使用不同的代理。\n        bypass      Chrome使用代理访问所有网站，除了通过`addProxySite`命令添加过的网站。\n        always      Chrome使用代理访问所有网站。\n        system      Chrome使用操作系统设置的代理。\n        clear       Surfingkeys不管代理，有其他插件管理，也就是禁用Surfingkeys的代理管理功能, 这是默认模式。\n\n* addProxySite, removeProxySite, toggleProxySite, 管理你需要通过代理访问的网站，比如：\n\n        addProxySite google.com,facebook.com,twitter.com\n\n* proxyInfo, 列出你当前的代理设置，包括用以上命令设置的信息。\n\n* `cp`, 切换当前站点的代理设置，即是否使用代理访问当前站点。\n\n* `;pa`, `:setProxyMode always`快捷键。\n\n* `;pb`, `:setProxyMode byhost`快捷键。\n\n* `;pc`, `:setProxyMode clear`快捷键。\n\n* `;pd`, `:setProxyMode direct`快捷键。\n\n* `;ps`, `:setProxyMode system`快捷键。\n\n\n## VIM编辑器或者Emacs编辑器\n\nSurfingkeys集成了ACE里的VIM编辑器，用于：\n\n* 编辑网页上的各类文本输入框。\n* 编辑URL并在新标签页打开\n* 编辑设置\n\n你可以加上如下设置来使用Emacs按键：\n\n    settings.aceKeybindings = \"emacs\";\n\n使用Emacs按键时，用`C-x C-s`来保存你的输入。\n\n\n### 编辑网页上的各类文本输入框\n\n在Normal模式，按大写的`I`，然后按相应的字母选择一个输入框。这时会打开一个VIM编辑器。对于单行输入框`input`和多行输入框`textarea`，打开的VIM编辑器会有点细微的不同。\n\n对于单行输入框`input`，打开的VIM编辑器只有一行，你可以通过各类VIM按键编辑你的文本，按`Enter`或者`:w`就会把VIM编辑器里的内容写回相应的输入框。\n\n![input_with_vim](https://cloud.githubusercontent.com/assets/288207/17644219/75a72b2e-61b3-11e6-8ce2-06c9cc94aeca.gif)\n\n对于多行输入框`textarea`，打开的VIM编辑器有多行，在你完成编辑之后，按`Ctrl-Enter`或者`:w`就会把VIM编辑器里的内容写回相应的输入框。\n\n![textarea_with_vim](https://cloud.githubusercontent.com/assets/288207/17644217/75a27e44-61b3-11e6-8f21-9cd79d3c5776.gif)\n\n对于下拉列表`select`，打开的VIM编辑器有多行，但你不能编辑其中的文本，你只能搜索你需要的选项，跳到那一行，然后按`Enter`选中它。这对那种有几十个以上选项的下拉列表尤其有用。\n\n![select_with_vim](https://cloud.githubusercontent.com/assets/288207/17644218/75a458a4-61b3-11e6-8ce7-eedcc996745c.gif)\n\n按键`Esc`或`:q`可退出VIM编辑器，不写回输入。\n\n`Tab`键可以从当前页面上搜索匹配的词组，然后按空格键补齐。\n\n如果你是通过按键`i`或者鼠标点击进入一个输入框的，你可以正常修改输入框中的文本，也可以随时按`Ctrl-i`打开一个VIM编辑器。\n\n记住在插入模式，按`Ctrl-i`打开VIM编辑器。\n\n### 编辑URL并在新标签页打开\n\n`;u`可以打开一个VIM编辑器来编辑当前URL，然后按`Enter`或者`:w`就会打开编辑后的URL，就像一个地址栏一样，但这是一个支持vim按键的地址栏。\n\n`Tab`键可以从书签和访问历史中搜索匹配的URL，然后按空格键补齐。\n\n![url_with_vim](https://cloud.githubusercontent.com/assets/288207/17644220/75f8eedc-61b3-11e6-9630-da2250ac5f10.gif)\n\n### 编辑设置\n\n`;e`打开设置编辑器, `:w`保存设置。\n\n## 点命令重复前一个操作\n\n[重复前一个操作](https://github.com/brookhong/Surfingkeys/issues/67)\n\n所有normal模式下的按键都可以由点来重复，除了那些在创建时指定`repeatIgnore`为`true`的按键，如\n\n    api.mapkey('e', '#2Scroll a page up', function() {\n        api.Normal.scroll(\"pageUp\");\n    }, {repeatIgnore: true});\n\n这样，`.`就不会往上翻页，即使你刚刚按了`e`。\n\n## Markdown预览\n\n1. 复制markdown代码到系统剪贴板。\n1. `;pm`预览剪贴板里的markdown。\n1. 在预览页，再按`;pm`会打开vim编辑器编辑markdown。\n1. `:wq`刷新预览。\n1. `r`可以从系统剪贴板里重新加载markdown.\n\n![markdown](https://cloud.githubusercontent.com/assets/288207/17669897/0b6fbaf6-6342-11e6-8583-86eb8691190d.gif)\n\nSurfingkeys默认使用[这个markdown分析器](https://github.com/chjj/marked)，如果你想用[github提供的API](https://developer.github.com/v3/markdown/)，可以设置：\n\n    settings.useLocalMarkdownAPI = false;\n\n## 截屏\n\n如果你需要截屏，下面这些按键用得上，尤其是当你想截长屏／或页面中某个可以滚动的DIV时。\n\n* `yg` 截当前页的屏。\n* `yG` 滚动截完整页。\n* `yS` 截当前滚动对象的屏。\n\n按完以上任一快捷键之后，会弹出你所截取的图片，然后你可以用鼠标（😢）右键单击图片来保存或者复制。\n\n## PDF阅读器\n为了支持PDF文件，Surfingkeys集成了来自[pdf.js](https://github.com/mozilla/pdf.js)的PDF阅读器。当你用Chrome打开一个PDF文件时，这个PDF阅读器就会打开，这样所有Surfingkeys的按键都可以用了。\n\n如果希望使用Chrome默认的PDF阅读器打开，可以按`;s`切换。\n\n当你使用Chrome默认PDF阅读器时，有些按键还是可用的，但部分按键比如滚动／可视模式下的按键就不可用了。\n\n## 配置参考\n\n### 属性设置列表\n\n| 属性 | 默认值 | 解释 |\n|:---------------|:-----|:-----|\n| settings.showModeStatus | false | 是否在状态栏显示当前模式。 |\n| settings.showProxyInStatusBar | false | 是否在状态栏显示代理信息。 |\n| settings.richHintsForKeystroke | 500 | 超过指定毫秒数后显示按键提示，如果指定值等于0会禁用按键提示。 |\n| settings.useLocalMarkdownAPI |  true | 是否使用[chjj/marked](https://github.com/chjj/marked)解析markdown，否则使用github API。 |\n| settings.focusOnSaved | true | 是否在退出内嵌VIM编辑器后把光标定位到输入框。 |\n| settings.omnibarMaxResults | 10 | 搜索栏下面每页显示多少条结果。 |\n| settings.omnibarHistoryCacheSize | 100 | 从浏览历史记录中返回查询结果的最大条数. |\n| settings.omnibarPosition | \"middle\" | 定义搜索框位置。 [\"middle\", \"bottom\"] |\n| settings.omnibarSuggestionTimeout | 200 | 设置触发搜索引擎提示的超时，当按键过去设定毫秒后才发起搜索引擎提示的请求，这样避免每次按键就触发请求。|\n| settings.focusFirstCandidate | false | 是否在搜索栏下面自动选择第一个匹配的结果。 |\n| settings.tabsThreshold | 100 | 当打开标签页的数量超过设定值时，使用搜索栏来查找标签页。 |\n| settings.verticalTabs | true | 是否纵向排列标签选择栏。 |\n| settings.clickableSelector | \"\" | 自定义CSS selector用于f键选择无法检测到的可点击元素，例如\"\\*.jfk-button, \\*.goog-flat-menu-button\"。 |\n| settings.clickablePat | /(https?&#124;thunder&#124;magnet):\\/\\/\\S+/ig | 用于检测文字中可点击链接的正则表达式，你可以按`O`打开检测到的链接。|\n| settings.editableSelector | div.CodeMirror-scroll,div.ace_content | 额外CSS selector以自定义可编辑元素。|\n| settings.smoothScroll | true | 是否启用顺滑滚动。 |\n| settings.modeAfterYank | \"\" | 在可视模式下，在复制文本之后，回到哪种模式，[\"\", \"Caret\", \"Normal\"]，默认是\"\"，指保持当前模式。 |\n| settings.scrollStepSize | 70 | `j`/`k`滚动时每一步的大小。 |\n| settings.scrollFriction | 0 | 在滚动一步之后，开始连续滚动所需要的力。数字大，表示需要更大的力来启动连续滚动，这样在开始连续滚动时会有一个抖动，但也能保证第一步的滚动幅度是精确的。 |\n| settings.nextLinkRegex | /((>>&#124;next)+)/i | 匹配下一页链接的正则表达式。 |\n| settings.prevLinkRegex | /((<<&#124;prev(ious)?)+)/i| 匹配上一页链接的正则表达式。 |\n| settings.hintAlign | \"center\" | 拨号键与它对应的目标如何对齐。[\"left\", \"center\", \"right\"] |\n| settings.defaultSearchEngine | \"g\" | 搜索栏里的默认搜索引擎。 |\n| settings.blocklistPattern | undefined | 如果当前访问的网站匹配设定的正则表达式，则禁用Surfingkeys。 |\n| settings.focusAfterClosed | \"right\" | 关掉当前标签页后，切换到哪一侧的标签页。[\"left\", \"right\"] |\n| settings.repeatThreshold | 99 | 操作可重复最多次数。 |\n| settings.tabsMRUOrder | true | 查找打开标签页时，是否按最近访问顺序列出所有标签页。 |\n| settings.historyMUOrder | true | 查找访问记录时，是否按最常访问顺序列出所有访问记录。 |\n| settings.newTabPosition | 'default' | 在哪个位置创建新标签页。[\"left\", \"right\", \"first\", \"default\"] |\n| settings.interceptedErrors | [] | 指明Surfingkeys为哪些错误显示错误页，这样在这些错误页你依然可以使用Surfingkeys。例如，[\"*\"]为所有错误显示错误页，[\"net::ERR_NAME_NOT_RESOLVED\"]只为ERR_NAME_NOT_RESOLVED显示错误页。更多错误请参考[net_error_list.h](https://github.com/adobe/chromium/blob/master/net/base/net_error_list.h)。  |\n| settings.enableEmojiInsertion | false | 是否打开插入模式下的表情下拉选项 |\n| settings.startToShowEmoji | 2 | 在冒号后输入多少个字符才显示表情下拉选项。 |\n| settings.language | undefined | 帮助中使用何种语言，目前只支持中英文，设为\"zh-CN\"显示中文帮助。 |\n| settings.stealFocusOnLoad | true | 是否阻止光标定位到输入框，默认为true，这样我们可以在页面加载结束之后直接使用Surfingkeys提供的各类按键，否则需要按Esc退出输入框。 |\n| settings.enableAutoFocus | true | 是否允许光标自动定位到动态显示的输入框里。这个设置和`stealFocusOnLoad`不同，那个只是在页面加载完成后跳出输入框。比如，有一个页面上有个隐藏的输入框，它只在用户点击某个链接后显示出来。如果你不想这个刚显示出来的输入框自动获得焦点，就可以把这个设置设为false。 |\n| settings.theme | undefined | 修改Surfingkeys界面风格。 |\n| settings.caseSensitive | false | 网页/搜索框内搜索是否大小写敏感。 |\n| settings.smartCase | true | 当搜索关键字里含有大写字符时，是否自动设为大小写敏感。 |\n| settings.cursorAtEndOfInput | true | 是否在进入输入框时把光标放在结尾，为false时，光标将放在上次离开输入框时的位置。 |\n| settings.digitForRepeat | true | 是否把数字输入当作重复次数，为false时，数字可作为普通按键。 |\n| settings.editableBodyCare | true | 当焦点定位到一个可编辑的元素时，Insert模式会自动激活，所以如果某个window/iframe里的document.body本身就是可编辑的（例如docs.google.com），Insert模式会一直处于激活状态，这样所有Normal模式下的按键都不可用了。当`editableBodyCare`为`true`时，Insert模式在这种情况下不会自动激活。|\n| settings.ignoredFrameHosts | [\"https://tpc.googlesyndication.com\"] | 当用`w`切换frame时，你可以用这个设置来过滤掉某些frame，比如那些做广告的frame。|\n| settings.aceKeybindings | \"vim\" | 改为\"emacs\"可以在ACE编辑器里使用Emacs按键。 |\n| settings.caretViewport | null | 按`[top, left, bottom, right]`格式设置，可以限制按`v`进入可视模式时的选择范围。比如`[window.innerHeight / 2 - 10, 0, window.innerHeight / 2 + 10, window.innerWidth]`会使Surfingkeys只会为显示在窗口中间的文字生成拨号盘字符。|\n| settings.mouseSelectToQuery | [] | 所有启用鼠标选择查询功能的网站列表。 |\n| settings.autoSpeakOnInlineQuery | false | 是否在使用inline query时自动发声。 |\n\n### settings.theme示例，修改状态栏字体\n\n    settings.theme = `\n        #sk_status, #sk_find {\n            font-size: 20pt;\n        }\n    }`;\n\n## 编译\n\n    npm install\n    npm run build\n\n    npm run build firefox # build webextension for firefox\n\n## Credits\n\n* ~~[jQuery](https://github.com/jquery/jquery)~~, removed for less memory usage and better performance.\n* ~~[TRIE](https://github.com/mikedeboer/trie)~~, finally replaced by my own simple implementation for less memory usage and better performance.\n* [ACE vim editor](https://github.com/ajaxorg/ace), for vim editor.\n* [markdown parser](https://github.com/chjj/marked), for markdown parser.\n* [pdf.js](https://github.com/mozilla/pdf.js), for pdf viewer.\n* [vimium](https://github.com/philc/vimium), for the days without this extension.\n* [cVim](https://github.com/1995eaton/chromium-vim), for the days without this extension.\n\n## 捐赠\nSupport me with [paypal](https://www.paypal.me/brookhong), or\n\n![donation](https://raw.githubusercontent.com/brookhong/Surfingkeys/master/src/pages/donation.png)\n\n## License\n\nMIT License\n"
        },
        {
          "name": "babel.config.json",
          "type": "blob",
          "size": 0.2783203125,
          "content": "{\n  \"presets\": [[\"@babel/preset-env\", { \"modules\": \"commonjs\" }], \"@babel/preset-typescript\"],\n  \"plugins\": [\n    \"@babel/plugin-transform-runtime\",\n    [\n      \"module-resolver\",\n      {\n        \"root\": [\".\"],\n        \"alias\": {\n          \"src\": \"./src\"\n        }\n      }\n    ]\n  ]\n}\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "firefox_pac.js",
          "type": "blob",
          "size": 1.5947265625,
          "content": "var pacGlobal = {};\n\nbrowser.runtime.onMessage.addListener((message) => {\n    pacGlobal = message;\n    pacGlobal.proxy.forEach(function(proxy, i) {\n        if (proxy.toLowerCase().indexOf(\"socks\") === 0) {\n            var p = proxy.split(\" \");\n            var h = p[1].split(\":\");\n            pacGlobal.proxy[i] = [{\n                type: p[0],\n                host: h[0],\n                port: h[1],\n                proxyDNS: true\n            }];\n        }\n    });\n});\n\nfunction FindProxyForURL(url, host) {\n    var lastPos;\n    if (pacGlobal.proxyMode === \"always\") {\n        return pacGlobal.proxy[0];\n    } else if (pacGlobal.proxyMode === \"bypass\") {\n        var pp = new RegExp(pacGlobal.autoproxy_pattern[0]);\n        do {\n            if (pacGlobal.hosts[0].hasOwnProperty(host)\n                || (pacGlobal.autoproxy_pattern[0].length && pp.test(host))) {\n                return \"DIRECT\";\n            }\n            lastPos = host.indexOf('.') + 1;\n            host = host.slice(lastPos);\n        } while (lastPos >= 1);\n        return pacGlobal.proxy[0];\n    } else {\n        for (var i = 0; i < pacGlobal.proxy.length; i++) {\n            var pp = new RegExp(pacGlobal.autoproxy_pattern[i]);\n            var ahost = host;\n            do {\n                if (pacGlobal.hosts[i].hasOwnProperty(ahost)\n                    || (pacGlobal.autoproxy_pattern[i].length && pp.test(ahost))) {\n                    return pacGlobal.proxy[i];\n                }\n                lastPos = ahost.indexOf('.') + 1;\n                ahost = ahost.slice(lastPos);\n            } while (lastPos >= 1);\n        }\n        return \"DIRECT\";\n    }\n}\n"
        },
        {
          "name": "jest.config.js",
          "type": "blob",
          "size": 0.3232421875,
          "content": "module.exports = {\n    testEnvironment: 'jsdom',\n    clearMocks: true,\n    collectCoverage: true,\n    collectCoverageFrom: ['src/**/*.{ts,js}'],\n    setupFilesAfterEnv: ['<rootDir>/config/jest/afterEnv.js'],\n    globalSetup: '<rootDir>/config/jest/globalSetup.js',\n    globalTeardown: '<rootDir>/config/jest/globalTeardown.js',\n};\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 2.7548828125,
          "content": "{\n  \"name\": \"Surfingkeys\",\n  \"version\": \"1.17.5\",\n  \"description\": \"Map your keys for web surfing, expand your browser with javascript and keyboard.\",\n  \"main\": \"background.js\",\n  \"directories\": {\n    \"doc\": \"docs\",\n    \"test\": \"tests\"\n  },\n  \"scripts\": {\n    \"clean\": \"rm -rf dist/*\",\n    \"build:doc\": \"documentation build src/content_scripts/common/api.js src/content_scripts/common/normal.js src/content_scripts/common/clipboard.js src/content_scripts/common/hints.js src/content_scripts/common/visual.js src/content_scripts/front.js src/user_scripts/index.js -f md -o docs/api.md\",\n    \"build:dev\": \"webpack --mode=development --config ./config/webpack.config.js\",\n    \"build:prod\": \"webpack --mode=production --config ./config/webpack.config.js\",\n    \"build:testdata\": \"webpack --mode=production --config ./config/webpack.test.config.js\",\n    \"build\": \"npm-run-all clean test build:doc build:prod\",\n    \"test\": \"jest\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/brookhong/Surfingkeys.git\"\n  },\n  \"author\": \"brook hong\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/brookhong/Surfingkeys/issues\"\n  },\n  \"homepage\": \"https://github.com/brookhong/Surfingkeys#readme\",\n  \"devDependencies\": {\n    \"@babel/plugin-proposal-class-properties\": \"^7.14.5\",\n    \"@babel/plugin-proposal-optional-chaining\": \"^7.14.5\",\n    \"@babel/plugin-transform-runtime\": \"^7.15.0\",\n    \"@babel/preset-env\": \"^7.15.0\",\n    \"@babel/preset-typescript\": \"^7.15.0\",\n    \"@types/events\": \"^3.0.0\",\n    \"@types/jest-image-snapshot\": \"^4.3.1\",\n    \"@types/lodash\": \"^4.14.172\",\n    \"@types/offscreencanvas\": \"^2019.6.4\",\n    \"babel-plugin-module-resolver\": \"^4.1.0\",\n    \"copy-webpack-plugin\": \"^9.0.1\",\n    \"documentation\": \"^13.2.5\",\n    \"file-loader\": \"^6.2.0\",\n    \"filemanager-webpack-plugin\": \"^6.1.7\",\n    \"jest\": \"^27.3.1\",\n    \"jest-image-snapshot\": \"^4.5.1\",\n    \"npm-run-all\": \"^4.1.5\",\n    \"puppeteer\": \"^10.2.0\",\n    \"strict-event-emitter-types\": \"^2.0.0\",\n    \"string-replace-loader\": \"^3.0.3\",\n    \"style-loader\": \"^3.2.1\",\n    \"ts-jest\": \"^27.0.4\",\n    \"ts-loader\": \"^9.2.5\",\n    \"typescript\": \"^4.5.4\",\n    \"webpack\": \"^5.50.0\",\n    \"webpack-cli\": \"^4.8.0\"\n  },\n  \"dependencies\": {\n    \"@msgpack/msgpack\": \"^2.7.0\",\n    \"@pixi/app\": \"^7.4.0\",\n    \"@pixi/constants\": \"^7.4.0\",\n    \"@pixi/core\": \"^7.4.0\",\n    \"@pixi/display\": \"^7.4.0\",\n    \"@pixi/graphics\": \"^7.4.0\",\n    \"@pixi/math\": \"^7.4.0\",\n    \"@pixi/runner\": \"^7.4.0\",\n    \"@pixi/settings\": \"^7.4.0\",\n    \"@pixi/sprite\": \"^7.4.0\",\n    \"@pixi/ticker\": \"^7.4.0\",\n    \"@pixi/unsafe-eval\": \"^7.4.0\",\n    \"@pixi/utils\": \"^7.4.0\",\n    \"@pixi/extensions\": \"^7.4.0\",\n    \"ace-builds\": \"^1.4.12\",\n    \"dompurify\": \"^2.3.1\",\n    \"js-base64\": \"^3.7.2\",\n    \"lodash\": \"^4.17.21\",\n    \"marked\": \"^4.0.10\",\n    \"pdfjs-dist\": \"^4.2.67\"\n  }\n}\n"
        },
        {
          "name": "sk.svg",
          "type": "blob",
          "size": 2.75390625,
          "content": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n<g xmlns=\"http://www.w3.org/2000/svg\" xmlns:bx=\"https://boxy-svg.com\" data-bx-workspace=\"master\" viewBox=\"0 0 500 500\"><defs><bx-grid x=\"0\" y=\"0\" width=\"244.734\" height=\"90.424\"/><radialGradient gradientUnits=\"userSpaceOnUse\" cx=\"403.023\" cy=\"180.848\" r=\"84.411\" id=\"gradient-1\" gradientTransform=\"matrix(-0.9337, 1.679797, -0.874051, -0.485833, 937.395978, -408.287005)\"><stop offset=\"0\" style=\"stop-color: rgba(186, 48, 48, 1)\"/><stop offset=\"1\" style=\"stop-color: rgba(105, 27, 27, 1)\"/></radialGradient><radialGradient gradientUnits=\"userSpaceOnUse\" cx=\"350.291\" cy=\"90.424\" r=\"200.359\" id=\"gradient-0\" gradientTransform=\"matrix(-1.567448, 0.029316, -0.0187, -0.999825, 901.044721, 170.563011)\"><stop offset=\"0\" style=\"stop-color: rgba(173, 208, 238, 1)\"/><stop offset=\"1\" style=\"stop-color: rgba(89, 159, 221, 1)\"/></radialGradient><radialGradient gradientUnits=\"userSpaceOnUse\" cx=\"-42.414\" cy=\"351.44\" r=\"103.608\" id=\"gradient-2\" gradientTransform=\"matrix(-1.069415, 2.075495, -0.888936, -0.458031, 479.809684, 400.538497)\"><stop offset=\"0\" style=\"stop-color: rgba(167, 214, 236, 1)\"/><stop offset=\"1\" style=\"stop-color: rgba(83, 175, 218, 1)\"/></radialGradient><radialGradient gradientUnits=\"userSpaceOnUse\" cx=\"192.459\" cy=\"260.4\" r=\"110.651\" id=\"gradient-3\" gradientTransform=\"matrix(0.484234, 1.451185, -0.948584, 0.316525, 346.274992, -101.316853)\"><stop offset=\"0\" style=\"stop-color: rgba(41, 157, 215, 1)\"/><stop offset=\"1\" style=\"stop-color: rgba(24, 95, 130, 1)\"/></radialGradient></defs><ellipse style=\"fill: rgb(216, 216, 216); stroke: rgb(0, 0, 0);\" cx=\"311.221\" cy=\"390.28\" rx=\"2.309\" ry=\"0.494\"/><path style=\"fill: url(&quot;#gradient-2&quot;);\" d=\"M 275.719 118.417 C 124.809 233.265 122.463 353.279 244.734 473.048 C 141.29 476.847 66.781 399.284 68.533 388.436 C 72.115 366.25 44.521 123.198 275.719 118.417 Z\"/><path style=\"fill: url(&quot;#gradient-0&quot;);\" d=\"M 421.514 132.157 C 110.684 36.895 42.956 239.152 57.421 378.634 C -92.275 114.494 254.487 -92.85 421.514 132.157\"/><path style=\"fill: url(&quot;#gradient-3&quot;);\" d=\"M 394.533 404.98 C 233.311 391.38 186.32 282.602 197.423 221.427 C 130.671 335.703 229.064 437.76 266.355 470.396 C 354.443 461.256 405.795 398.988 394.533 404.98 Z\"/><path style=\"fill: url(&quot;#gradient-1&quot;);\" d=\"M 412.211 191.684 C 422.249 157.572 387.847 159.398 390.164 188.483 C 356.541 176.014 312.682 186.721 326.825 199.706 C 337.079 209.121 397.655 182.889 398.148 239.109 C 323.987 249.971 348.018 234.058 336.165 294.261 C 236.319 284.633 316.828 349.985 345.721 331.367 C 334.828 297.863 340.471 307.495 355.959 303.122 C 336.867 228.143 432.394 318.193 435.577 236.038 C 436.55 258.856 442.943 324.69 453.456 292.6 C 464.072 252.68 445.577 206.694 412.211 191.684 Z\"/></g>\n</svg>\n"
        },
        {
          "name": "sk.xcf",
          "type": "blob",
          "size": 304.53125,
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tsconfig.json",
          "type": "blob",
          "size": 0.3583984375,
          "content": "{\n  \"compilerOptions\": {\n    \"target\": \"esnext\",\n    \"types\": [\"node\", \"offscreencanvas\"],\n    \"allowJs\": true,\n    \"strict\": true,\n    \"moduleResolution\": \"node\",\n    \"sourceMap\": true,\n    \"declaration\": false,\n    \"skipLibCheck\": true,\n    \"allowSyntheticDefaultImports\": true,\n    \"isolatedModules\": true,\n    \"baseUrl\": \".\"\n  },\n  \"include\": [\"src\", \"@types\"]\n}\n"
        }
      ]
    }
  ]
}