{
  "metadata": {
    "timestamp": 1736562895968,
    "page": 481,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "davidmerfield/randomColor",
      "stars": 6099,
      "defaultBranch": "master",
      "files": [
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 6.4013671875,
          "content": "CC0 1.0 Universal\n\nStatement of Purpose\n\nThe laws of most jurisdictions throughout the world automatically confer\nexclusive Copyright and Related Rights (defined below) upon the creator and\nsubsequent owner(s) (each and all, an \"owner\") of an original work of\nauthorship and/or a database (each, a \"Work\").\n\nCertain owners wish to permanently relinquish those rights to a Work for the\npurpose of contributing to a commons of creative, cultural and scientific\nworks (\"Commons\") that the public can reliably and without fear of later\nclaims of infringement build upon, modify, incorporate in other works, reuse\nand redistribute as freely as possible in any form whatsoever and for any\npurposes, including without limitation commercial purposes. These owners may\ncontribute to the Commons to promote the ideal of a free culture and the\nfurther production of creative, cultural and scientific works, or to gain\nreputation or greater distribution for their Work in part through the use and\nefforts of others.\n\nFor these and/or other purposes and motivations, and without any expectation\nof additional consideration or compensation, the person associating CC0 with a\nWork (the \"Affirmer\"), to the extent that he or she is an owner of Copyright\nand Related Rights in the Work, voluntarily elects to apply CC0 to the Work\nand publicly distribute the Work under its terms, with knowledge of his or her\nCopyright and Related Rights in the Work and the meaning and intended legal\neffect of CC0 on those rights.\n\n1. Copyright and Related Rights. A Work made available under CC0 may be\nprotected by copyright and related or neighboring rights (\"Copyright and\nRelated Rights\"). Copyright and Related Rights include, but are not limited\nto, the following:\n\n  i. the right to reproduce, adapt, distribute, perform, display, communicate,\n  and translate a Work;\n\n  ii. moral rights retained by the original author(s) and/or performer(s);\n\n  iii. publicity and privacy rights pertaining to a person's image or likeness\n  depicted in a Work;\n\n  iv. rights protecting against unfair competition in regards to a Work,\n  subject to the limitations in paragraph 4(a), below;\n\n  v. rights protecting the extraction, dissemination, use and reuse of data in\n  a Work;\n\n  vi. database rights (such as those arising under Directive 96/9/EC of the\n  European Parliament and of the Council of 11 March 1996 on the legal\n  protection of databases, and under any national implementation thereof,\n  including any amended or successor version of such directive); and\n\n  vii. other similar, equivalent or corresponding rights throughout the world\n  based on applicable law or treaty, and any national implementations thereof.\n\n2. Waiver. To the greatest extent permitted by, but not in contravention of,\napplicable law, Affirmer hereby overtly, fully, permanently, irrevocably and\nunconditionally waives, abandons, and surrenders all of Affirmer's Copyright\nand Related Rights and associated claims and causes of action, whether now\nknown or unknown (including existing as well as future claims and causes of\naction), in the Work (i) in all territories worldwide, (ii) for the maximum\nduration provided by applicable law or treaty (including future time\nextensions), (iii) in any current or future medium and for any number of\ncopies, and (iv) for any purpose whatsoever, including without limitation\ncommercial, advertising or promotional purposes (the \"Waiver\"). Affirmer makes\nthe Waiver for the benefit of each member of the public at large and to the\ndetriment of Affirmer's heirs and successors, fully intending that such Waiver\nshall not be subject to revocation, rescission, cancellation, termination, or\nany other legal or equitable action to disrupt the quiet enjoyment of the Work\nby the public as contemplated by Affirmer's express Statement of Purpose.\n\n3. Public License Fallback. Should any part of the Waiver for any reason be\njudged legally invalid or ineffective under applicable law, then the Waiver\nshall be preserved to the maximum extent permitted taking into account\nAffirmer's express Statement of Purpose. In addition, to the extent the Waiver\nis so judged Affirmer hereby grants to each affected person a royalty-free,\nnon transferable, non sublicensable, non exclusive, irrevocable and\nunconditional license to exercise Affirmer's Copyright and Related Rights in\nthe Work (i) in all territories worldwide, (ii) for the maximum duration\nprovided by applicable law or treaty (including future time extensions), (iii)\nin any current or future medium and for any number of copies, and (iv) for any\npurpose whatsoever, including without limitation commercial, advertising or\npromotional purposes (the \"License\"). The License shall be deemed effective as\nof the date CC0 was applied by Affirmer to the Work. Should any part of the\nLicense for any reason be judged legally invalid or ineffective under\napplicable law, such partial invalidity or ineffectiveness shall not\ninvalidate the remainder of the License, and in such case Affirmer hereby\naffirms that he or she will not (i) exercise any of his or her remaining\nCopyright and Related Rights in the Work or (ii) assert any associated claims\nand causes of action with respect to the Work, in either case contrary to\nAffirmer's express Statement of Purpose.\n\n4. Limitations and Disclaimers.\n\n  a. No trademark or patent rights held by Affirmer are waived, abandoned,\n  surrendered, licensed or otherwise affected by this document.\n\n  b. Affirmer offers the Work as-is and makes no representations or warranties\n  of any kind concerning the Work, express, implied, statutory or otherwise,\n  including without limitation warranties of title, merchantability, fitness\n  for a particular purpose, non infringement, or the absence of latent or\n  other defects, accuracy, or the present or absence of errors, whether or not\n  discoverable, all to the greatest extent permissible under applicable law.\n\n  c. Affirmer disclaims responsibility for clearing rights of other persons\n  that may apply to the Work or any use thereof, including without limitation\n  any person's Copyright and Related Rights in the Work. Further, Affirmer\n  disclaims responsibility for obtaining any necessary consents, permissions\n  or other rights required for any use of the Work.\n\n  d. Affirmer understands and acknowledges that Creative Commons is not a\n  party to this document and has no duty or obligation with respect to this\n  CC0 or use of the Work.\n\nFor more information, please see\n<http://creativecommons.org/publicdomain/zero/1.0/>\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.0791015625,
          "content": "# [Random Color](https://randomcolor.lllllllllllllllll.com)\n\nA tiny script for generating attractive random colors. See the demo for [an explanation](https://randomcolor.lllllllllllllllll.com) and [some samples](https://randomcolor.lllllllllllllllll.com). randomColor has been ported to [C#](https://github.com/nathanpjones/randomColorSharped), [C++](https://github.com/xuboying/randomcolor-cpp), [Go](https://github.com/hansrodtang/randomcolor), [Haskell](http://hackage.haskell.org/package/palette-0.3/docs/Data-Colour-Palette-RandomColor.html), [Kotlin](https://github.com/brian-norman/RandomKolor), [Mathematica](https://github.com/yuluyan/PrettyRandomColor), [PHP](https://github.com/mistic100/RandomColor.php), [Python](https://github.com/kevinwuhoo/randomcolor-py), [Raku](https://github.com/Xliff/p6-RandomColor), [Objective-C](https://github.com/yageek/randomColor), [Java](https://github.com/lzyzsd/AndroidRandomColor), [R](https://github.com/ronammar/randomcoloR), [Reason](https://github.com/ktrzos/bs-randomColor), [Dart](https://github.com/DAMMAK/RandomColorDart), [Ruby](https://github.com/khash/random_color), [Rust](https://github.com/elementh/random_color), [Swift](https://github.com/onevcat/RandomColorSwift) and [Typescript](https://www.npmjs.com/package/@types/randomcolor).\n\n[![Demo](http://i.imgur.com/lOLCqvu.gif)](https://randomcolor.lllllllllllllllll.com)\n\nTo use randomColor **in the browser**, download the [latest minified version of randomColor](http://cdnjs.com/libraries/randomcolor) and include it on your page. Then call the script:\n\n```javascript\nvar color = randomColor(); // a hex code for an attractive color\n```\n\nTo use randomColor **on the server with node.js**, install [randomColor from npm](https://www.npmjs.org/package/randomcolor) then call the script:\n\n```bash\nnpm install randomcolor\n```\n```javascript\nvar randomColor = require('randomcolor'); // import the script\nvar color = randomColor(); // a hex code for an attractive color\n```\n\n## Options\n\nYou can pass an options object to influence the type of color it produces. The options object accepts the following properties:\n\n```hue``` – Controls the hue of the generated color. You can pass a string representing a color name: ```red```, ```orange```, ```yellow```, ```green```, ```blue```, ```purple```, ```pink``` and ```monochrome``` are currently supported. If you pass a  hexidecimal color string such as ```#00FFFF```, randomColor will extract its hue value and use that to generate colors.\n\n```luminosity``` – Controls the luminosity of the generated color. You can specify a string containing ```bright```, ```light``` or ```dark```.\n\n```count``` – An integer which specifies the number of colors to generate.\n\n```seed``` - An integer or string which when passed will cause randomColor to return the same color each time.\n\n```format``` – A string which specifies the format of the generated color. Possible values are ```rgb```, ```rgba```, ```rgbArray```, ```hsl```, ```hsla```, ```hslArray``` and ```hex``` (default).\n\n```alpha``` – A decimal between 0 and 1. Only relevant when using a format with an alpha channel (```rgba``` and ```hsla```). Defaults to a random value.\n\n## Examples\n\n```javascript\n\n// Returns a hex code for an attractive color\nrandomColor(); \n\n// Returns an array of ten green colors\nrandomColor({\n   count: 10,\n   hue: 'green'\n});\n\n// Returns a hex code for a light blue\nrandomColor({\n   luminosity: 'light',\n   hue: 'blue'\n});\n\n// Returns a hex code for a 'truly random' color\nrandomColor({\n   luminosity: 'random',\n   hue: 'random'\n});\n\n// Returns a bright color in RGB\nrandomColor({\n   luminosity: 'bright',\n   format: 'rgb' // e.g. 'rgb(225,200,20)'\n});\n\n// Returns a dark RGB color with random alpha\nrandomColor({\n   luminosity: 'dark',\n   format: 'rgba' // e.g. 'rgba(9, 1, 107, 0.6482447960879654)'\n});\n\n// Returns a dark RGB color with specified alpha\nrandomColor({\n   luminosity: 'dark',\n   format: 'rgba',\n   alpha: 0.5 // e.g. 'rgba(9, 1, 107, 0.5)',\n});\n\n// Returns a light HSL color with random alpha\nrandomColor({\n   luminosity: 'light',\n   format: 'hsla' // e.g. 'hsla(27, 88.99%, 81.83%, 0.6450211517512798)'\n});\n\n```\n\n"
        },
        {
          "name": "demo",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.435546875,
          "content": "{\n  \"name\": \"randomcolor\",\n  \"version\": \"0.6.2\",\n  \"description\": \"A tiny script for generating attractive random colors\",\n  \"main\": \"randomColor.js\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/davidmerfield/randomColor.git\"\n  },\n  \"keywords\": [\n    \"attractive\",\n    \"random\",\n    \"color\",\n    \"generator\"\n  ],\n  \"author\": \"David Merfield\",\n  \"license\": \"CC0\",\n  \"homepage\": \"https://randomcolor.lllllllllllllllll.com/\"\n}\n"
        },
        {
          "name": "randomColor.js",
          "type": "blob",
          "size": 13.001953125,
          "content": "// randomColor by David Merfield under the CC0 license\n// https://github.com/davidmerfield/randomColor/\n\n(function (root, factory) {\n  // Support CommonJS\n  if (typeof exports === \"object\") {\n    var randomColor = factory();\n\n    // Support NodeJS & Component, which allow module.exports to be a function\n    if (typeof module === \"object\" && module && module.exports) {\n      exports = module.exports = randomColor;\n    }\n\n    // Support CommonJS 1.1.1 spec\n    exports.randomColor = randomColor;\n\n    // Support AMD\n  } else if (typeof define === \"function\" && define.amd) {\n    define([], factory);\n\n    // Support vanilla script loading\n  } else {\n    root.randomColor = factory();\n  }\n})(this, function () {\n  // Seed to get repeatable colors\n  var seed = null;\n\n  // Shared color dictionary\n  var colorDictionary = {};\n\n  // Populate the color dictionary\n  loadColorBounds();\n\n  // check if a range is taken\n  var colorRanges = [];\n\n  var randomColor = function (options) {\n    options = options || {};\n\n    // Check if there is a seed and ensure it's an\n    // integer. Otherwise, reset the seed value.\n    if (\n      options.seed !== undefined &&\n      options.seed !== null &&\n      options.seed === parseInt(options.seed, 10)\n    ) {\n      seed = options.seed;\n\n      // A string was passed as a seed\n    } else if (typeof options.seed === \"string\") {\n      seed = stringToInteger(options.seed);\n\n      // Something was passed as a seed but it wasn't an integer or string\n    } else if (options.seed !== undefined && options.seed !== null) {\n      throw new TypeError(\"The seed value must be an integer or string\");\n\n      // No seed, reset the value outside.\n    } else {\n      seed = null;\n    }\n\n    var H, S, B;\n\n    // Check if we need to generate multiple colors\n    if (options.count !== null && options.count !== undefined) {\n      var totalColors = options.count,\n        colors = [];\n      // Value false at index i means the range i is not taken yet.\n      for (var i = 0; i < options.count; i++) {\n        colorRanges.push(false);\n      }\n      options.count = null;\n\n      while (totalColors > colors.length) {\n        var color = randomColor(options);\n\n        if (seed !== null) {\n          options.seed = seed;\n        }\n\n        colors.push(color);\n      }\n\n      options.count = totalColors;\n\n      return colors;\n    }\n\n    // First we pick a hue (H)\n    H = pickHue(options);\n\n    // Then use H to determine saturation (S)\n    S = pickSaturation(H, options);\n\n    // Then use S and H to determine brightness (B).\n    B = pickBrightness(H, S, options);\n\n    // Then we return the HSB color in the desired format\n    return setFormat([H, S, B], options);\n  };\n\n  function pickHue(options) {\n    if (colorRanges.length > 0) {\n      var hueRange = getRealHueRange(options.hue);\n\n      var hue = randomWithin(hueRange);\n\n      //Each of colorRanges.length ranges has a length equal approximatelly one step\n      var step = (hueRange[1] - hueRange[0]) / colorRanges.length;\n\n      var j = parseInt((hue - hueRange[0]) / step);\n\n      //Check if the range j is taken\n      if (colorRanges[j] === true) {\n        j = (j + 2) % colorRanges.length;\n      } else {\n        colorRanges[j] = true;\n      }\n\n      var min = (hueRange[0] + j * step) % 359,\n        max = (hueRange[0] + (j + 1) * step) % 359;\n\n      hueRange = [min, max];\n\n      hue = randomWithin(hueRange);\n\n      if (hue < 0) {\n        hue = 360 + hue;\n      }\n      return hue;\n    } else {\n      var hueRange = getHueRange(options.hue);\n\n      hue = randomWithin(hueRange);\n      // Instead of storing red as two seperate ranges,\n      // we group them, using negative numbers\n      if (hue < 0) {\n        hue = 360 + hue;\n      }\n\n      return hue;\n    }\n  }\n\n  function pickSaturation(hue, options) {\n    if (options.hue === \"monochrome\") {\n      return 0;\n    }\n\n    if (options.luminosity === \"random\") {\n      return randomWithin([0, 100]);\n    }\n\n    var saturationRange = getSaturationRange(hue);\n\n    var sMin = saturationRange[0],\n      sMax = saturationRange[1];\n\n    switch (options.luminosity) {\n      case \"bright\":\n        sMin = 55;\n        break;\n\n      case \"dark\":\n        sMin = sMax - 10;\n        break;\n\n      case \"light\":\n        sMax = 55;\n        break;\n    }\n\n    return randomWithin([sMin, sMax]);\n  }\n\n  function pickBrightness(H, S, options) {\n    var bMin = getMinimumBrightness(H, S),\n      bMax = 100;\n\n    switch (options.luminosity) {\n      case \"dark\":\n        bMax = bMin + 20;\n        break;\n\n      case \"light\":\n        bMin = (bMax + bMin) / 2;\n        break;\n\n      case \"random\":\n        bMin = 0;\n        bMax = 100;\n        break;\n    }\n\n    return randomWithin([bMin, bMax]);\n  }\n\n  function setFormat(hsv, options) {\n    switch (options.format) {\n      case \"hsvArray\":\n        return hsv;\n\n      case \"hslArray\":\n        return HSVtoHSL(hsv);\n\n      case \"hsl\":\n        var hsl = HSVtoHSL(hsv);\n        return \"hsl(\" + hsl[0] + \", \" + hsl[1] + \"%, \" + hsl[2] + \"%)\";\n\n      case \"hsla\":\n        var hslColor = HSVtoHSL(hsv);\n        var alpha = options.alpha || Math.random();\n        return (\n          \"hsla(\" +\n          hslColor[0] +\n          \", \" +\n          hslColor[1] +\n          \"%, \" +\n          hslColor[2] +\n          \"%, \" +\n          alpha +\n          \")\"\n        );\n\n      case \"rgbArray\":\n        return HSVtoRGB(hsv);\n\n      case \"rgb\":\n        var rgb = HSVtoRGB(hsv);\n        return \"rgb(\" + rgb.join(\", \") + \")\";\n\n      case \"rgba\":\n        var rgbColor = HSVtoRGB(hsv);\n        var alpha = options.alpha || Math.random();\n        return \"rgba(\" + rgbColor.join(\", \") + \", \" + alpha + \")\";\n\n      default:\n        return HSVtoHex(hsv);\n    }\n  }\n\n  function getMinimumBrightness(H, S) {\n    var lowerBounds = getColorInfo(H).lowerBounds;\n\n    for (var i = 0; i < lowerBounds.length - 1; i++) {\n      var s1 = lowerBounds[i][0],\n        v1 = lowerBounds[i][1];\n\n      var s2 = lowerBounds[i + 1][0],\n        v2 = lowerBounds[i + 1][1];\n\n      if (S >= s1 && S <= s2) {\n        var m = (v2 - v1) / (s2 - s1),\n          b = v1 - m * s1;\n\n        return m * S + b;\n      }\n    }\n\n    return 0;\n  }\n\n  function getHueRange(colorInput) {\n    if (typeof parseInt(colorInput) === \"number\") {\n      var number = parseInt(colorInput);\n\n      if (number < 360 && number > 0) {\n        return [number, number];\n      }\n    }\n\n    if (typeof colorInput === \"string\") {\n      if (colorDictionary[colorInput]) {\n        var color = colorDictionary[colorInput];\n        if (color.hueRange) {\n          return color.hueRange;\n        }\n      } else if (colorInput.match(/^#?([0-9A-F]{3}|[0-9A-F]{6})$/i)) {\n        var hue = HexToHSB(colorInput)[0];\n        return [hue, hue];\n      }\n    }\n\n    return [0, 360];\n  }\n\n  function getSaturationRange(hue) {\n    return getColorInfo(hue).saturationRange;\n  }\n\n  function getColorInfo(hue) {\n    // Maps red colors to make picking hue easier\n    if (hue >= 334 && hue <= 360) {\n      hue -= 360;\n    }\n\n    for (var colorName in colorDictionary) {\n      var color = colorDictionary[colorName];\n      if (\n        color.hueRange &&\n        hue >= color.hueRange[0] &&\n        hue <= color.hueRange[1]\n      ) {\n        return colorDictionary[colorName];\n      }\n    }\n    return \"Color not found\";\n  }\n\n  function randomWithin(range) {\n    if (seed === null) {\n      //generate random evenly destinct number from : https://martin.ankerl.com/2009/12/09/how-to-create-random-colors-programmatically/\n      var golden_ratio = 0.618033988749895;\n      var r = Math.random();\n      r += golden_ratio;\n      r %= 1;\n      return Math.floor(range[0] + r * (range[1] + 1 - range[0]));\n    } else {\n      //Seeded random algorithm from http://indiegamr.com/generate-repeatable-random-numbers-in-js/\n      var max = range[1] || 1;\n      var min = range[0] || 0;\n      seed = (seed * 9301 + 49297) % 233280;\n      var rnd = seed / 233280.0;\n      return Math.floor(min + rnd * (max - min));\n    }\n  }\n\n  function HSVtoHex(hsv) {\n    var rgb = HSVtoRGB(hsv);\n\n    function componentToHex(c) {\n      var hex = c.toString(16);\n      return hex.length == 1 ? \"0\" + hex : hex;\n    }\n\n    var hex =\n      \"#\" +\n      componentToHex(rgb[0]) +\n      componentToHex(rgb[1]) +\n      componentToHex(rgb[2]);\n\n    return hex;\n  }\n\n  function defineColor(name, hueRange, lowerBounds) {\n    var sMin = lowerBounds[0][0],\n      sMax = lowerBounds[lowerBounds.length - 1][0],\n      bMin = lowerBounds[lowerBounds.length - 1][1],\n      bMax = lowerBounds[0][1];\n\n    colorDictionary[name] = {\n      hueRange: hueRange,\n      lowerBounds: lowerBounds,\n      saturationRange: [sMin, sMax],\n      brightnessRange: [bMin, bMax],\n    };\n  }\n\n  function loadColorBounds() {\n    defineColor(\"monochrome\", null, [\n      [0, 0],\n      [100, 0],\n    ]);\n\n    defineColor(\n      \"red\",\n      [-26, 18],\n      [\n        [20, 100],\n        [30, 92],\n        [40, 89],\n        [50, 85],\n        [60, 78],\n        [70, 70],\n        [80, 60],\n        [90, 55],\n        [100, 50],\n      ]\n    );\n\n    defineColor(\n      \"orange\",\n      [18, 46],\n      [\n        [20, 100],\n        [30, 93],\n        [40, 88],\n        [50, 86],\n        [60, 85],\n        [70, 70],\n        [100, 70],\n      ]\n    );\n\n    defineColor(\n      \"yellow\",\n      [46, 62],\n      [\n        [25, 100],\n        [40, 94],\n        [50, 89],\n        [60, 86],\n        [70, 84],\n        [80, 82],\n        [90, 80],\n        [100, 75],\n      ]\n    );\n\n    defineColor(\n      \"green\",\n      [62, 178],\n      [\n        [30, 100],\n        [40, 90],\n        [50, 85],\n        [60, 81],\n        [70, 74],\n        [80, 64],\n        [90, 50],\n        [100, 40],\n      ]\n    );\n\n    defineColor(\n      \"blue\",\n      [178, 257],\n      [\n        [20, 100],\n        [30, 86],\n        [40, 80],\n        [50, 74],\n        [60, 60],\n        [70, 52],\n        [80, 44],\n        [90, 39],\n        [100, 35],\n      ]\n    );\n\n    defineColor(\n      \"purple\",\n      [257, 282],\n      [\n        [20, 100],\n        [30, 87],\n        [40, 79],\n        [50, 70],\n        [60, 65],\n        [70, 59],\n        [80, 52],\n        [90, 45],\n        [100, 42],\n      ]\n    );\n\n    defineColor(\n      \"pink\",\n      [282, 334],\n      [\n        [20, 100],\n        [30, 90],\n        [40, 86],\n        [60, 84],\n        [80, 80],\n        [90, 75],\n        [100, 73],\n      ]\n    );\n  }\n\n  function HSVtoRGB(hsv) {\n    // this doesn't work for the values of 0 and 360\n    // here's the hacky fix\n    var h = hsv[0];\n    if (h === 0) {\n      h = 1;\n    }\n    if (h === 360) {\n      h = 359;\n    }\n\n    // Rebase the h,s,v values\n    h = h / 360;\n    var s = hsv[1] / 100,\n      v = hsv[2] / 100;\n\n    var h_i = Math.floor(h * 6),\n      f = h * 6 - h_i,\n      p = v * (1 - s),\n      q = v * (1 - f * s),\n      t = v * (1 - (1 - f) * s),\n      r = 256,\n      g = 256,\n      b = 256;\n\n    switch (h_i) {\n      case 0:\n        r = v;\n        g = t;\n        b = p;\n        break;\n      case 1:\n        r = q;\n        g = v;\n        b = p;\n        break;\n      case 2:\n        r = p;\n        g = v;\n        b = t;\n        break;\n      case 3:\n        r = p;\n        g = q;\n        b = v;\n        break;\n      case 4:\n        r = t;\n        g = p;\n        b = v;\n        break;\n      case 5:\n        r = v;\n        g = p;\n        b = q;\n        break;\n    }\n\n    var result = [\n      Math.floor(r * 255),\n      Math.floor(g * 255),\n      Math.floor(b * 255),\n    ];\n    return result;\n  }\n\n  function HexToHSB(hex) {\n    hex = hex.replace(/^#/, \"\");\n    hex = hex.length === 3 ? hex.replace(/(.)/g, \"$1$1\") : hex;\n\n    var red = parseInt(hex.substr(0, 2), 16) / 255,\n      green = parseInt(hex.substr(2, 2), 16) / 255,\n      blue = parseInt(hex.substr(4, 2), 16) / 255;\n\n    var cMax = Math.max(red, green, blue),\n      delta = cMax - Math.min(red, green, blue),\n      saturation = cMax ? delta / cMax : 0;\n\n    switch (cMax) {\n      case red:\n        return [60 * (((green - blue) / delta) % 6) || 0, saturation, cMax];\n      case green:\n        return [60 * ((blue - red) / delta + 2) || 0, saturation, cMax];\n      case blue:\n        return [60 * ((red - green) / delta + 4) || 0, saturation, cMax];\n    }\n  }\n\n  function HSVtoHSL(hsv) {\n    var h = hsv[0],\n      s = hsv[1] / 100,\n      v = hsv[2] / 100,\n      k = (2 - s) * v;\n\n    return [\n      h,\n      Math.round(((s * v) / (k < 1 ? k : 2 - k)) * 10000) / 100,\n      (k / 2) * 100,\n    ];\n  }\n\n  function stringToInteger(string) {\n    var total = 0;\n    for (var i = 0; i !== string.length; i++) {\n      if (total >= Number.MAX_SAFE_INTEGER) break;\n      total += string.charCodeAt(i);\n    }\n    return total;\n  }\n\n  // get The range of given hue when options.count!=0\n  function getRealHueRange(colorHue) {\n    if (!isNaN(colorHue)) {\n      var number = parseInt(colorHue);\n\n      if (number < 360 && number > 0) {\n        return getColorInfo(colorHue).hueRange;\n      }\n    } else if (typeof colorHue === \"string\") {\n      if (colorDictionary[colorHue]) {\n        var color = colorDictionary[colorHue];\n\n        if (color.hueRange) {\n          return color.hueRange;\n        }\n      } else if (colorHue.match(/^#?([0-9A-F]{3}|[0-9A-F]{6})$/i)) {\n        var hue = HexToHSB(colorHue)[0];\n        return getColorInfo(hue).hueRange;\n      }\n    }\n\n    return [0, 360];\n  }\n  return randomColor;\n});\n"
        }
      ]
    }
  ]
}