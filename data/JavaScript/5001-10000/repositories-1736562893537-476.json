{
  "metadata": {
    "timestamp": 1736562893537,
    "page": 476,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "wangrongding/wechat-bot",
      "stars": 6111,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.013671875,
          "content": "\nnode_modules/"
        },
        {
          "name": ".env.example",
          "type": "blob",
          "size": 2.17578125,
          "content": "# .env\n\n# OpenAi 的api key, 去 https://beta.openai.com/account/api-keys 中生成一个即可,OPENAI_MODEL不填则默认gpt-4o，OPENAI_SYSTEM_MESSAGE为默认角色设定\nOPENAI_API_KEY=''\nOPENAI_PROXY_URL='https://openai.xxxx.com/v1/'\nOPENAI_MODEL=''\nOPENAI_SYSTEM_MESSAGE='You are a personal assistant.'\n\n# Kimi 的api key, 去 https://platform.moonshot.cn/console/api-keys\nKIMI_API_KEY=''\n\n# 科大讯飞, 去 https://console.xfyun.cn/services\nXUNFEI_APP_ID=''\nXUNFEI_API_KEY=''\nXUNFEI_API_SECRET=''\n\n# deepseek-free, model必须为deepseek-chat或deepseek-coder,去 https://platform.deepseek.com/usage或者https://github.com/LLM-Red-Team/deepseek-free-api\n# 在DEEPSEEK_SYSTEM_MESSAGE中设置系统提示词\nDEEPSEEK_FREE_URL='https://api.deepseek.com/chat/completions'\nDEEPSEEK_FREE_TOKEN=''\nDEEPSEEK_FREE_MODEL='deepseek-chat'\nDEEPSEEK_SYSTEM_MESSAGE='You are a personal assistant.'\n\n# 302AI\n_302AI_API_KEY = ''\n_302AI_MODEL= 'gpt-4o-mini'\n\n# dify, URL不包含uri路径\nDIFY_API_KEY = ''\nDIFY_URL = 'https://api.dify.ai'\n\n# 通义千问, URL 包含 uri 路径\nTONGYI_URL = \"https://dashscope.aliyuncs.com/compatible-mode/v1\"\n\n# 通义千问的 API_KEY\nTONGYI_API_KEY = ''\n\n# 通义千问使用的模型\nTONGYI_MODEL='qwen-plus'\n\n# claude\nCLAUDE_API_VERSION = '2023-06-01'\nCLAUDE_API_KEY = ''\nCLAUDE_MODEL = 'claude-3-5-sonnet-latest'\n# 系统人设\nCLAUDE_SYSTEM = ''\n\n# 白名单配置\n#定义机器人的名称，这里是为了防止群聊消息太多，所以只有艾特机器人才会回复，\n#这里不要把@去掉，在@后面加上你启动机器人账号的微信名称\nBOT_NAME='@可乐'\n#联系人白名单\nALIAS_WHITELIST='微信名1,备注名2'\n#群聊白名单\nROOM_WHITELIST='XX群1,群2'\n#自动回复前缀匹配，文本消息匹配到指定前缀时，才会触发自动回复，不配或配空串情况下该配置不生效（适用于用大号，不期望每次被@或者私聊时都触发自动回复的人群）\n#匹配规则：群聊消息去掉${BOT_NAME}并trim后进行前缀匹配，私聊消息trim后直接进行前缀匹配\nAUTO_REPLY_PREFIX=''\n\n# 默认服务 302AI，ChatGPT、Kimi、Xunfei、deepseek-free, ollama, dify, tongyi 八选一，不填则键盘交互\nSERVICE_TYPE=''\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1123046875,
          "content": "node_modules\nWechatEveryDay.memory-card.json\n.env\ntest.js\npackage-lock.json\nyarn.lock\nChromium.app\n\n.DS_Store\n.idea"
        },
        {
          "name": ".husky",
          "type": "tree",
          "content": null
        },
        {
          "name": ".npmrc",
          "type": "blob",
          "size": 0.064453125,
          "content": "# puppeteer_download_host=https://registry.npmmirror.com/-/binary/"
        },
        {
          "name": ".prettierrc.cjs",
          "type": "blob",
          "size": 1.2841796875,
          "content": "/**\n * 参考 https://prettier.io/docs/en/options.html\n */\nmodule.exports = {\n  tabWidth: 2, // 空格数\n  useTabs: false, // 是否开启tab\n  printWidth: 150, // 换行的宽度\n  semi: false, // 是否在语句末尾打印分号\n  singleQuote: true, // 是否使用单引号\n  quoteProps: 'as-needed', // 对象的key仅在需要时用引号 as-needed|consistent|preserve\n  trailingComma: 'all', // 多行时尽可能打印尾随逗号 |all|es5|none\n  rangeStart: 0, // 每个文件格式化的范围是文件的全部内容\n  bracketSpacing: true, // 对象文字中的括号之间打印空格\n  jsxSingleQuote: true, // 在JSX中是否使用单引号\n  bracketSameLine: false, // 将HTML元素的闭括号放在最后一行的末尾（不适用于自闭合元素）。\n  arrowParens: 'always', // 箭头函数，只有一个参数的时候，也需要括号 always|avoid\n  htmlWhitespaceSensitivity: 'ignore', // html中换行规则 css|strict|ignore,strict会强制在标签周围添加空格\n  vueIndentScriptAndStyle: false, // vue中script与style里的第一条语句是否空格\n  singleAttributePerLine: false, // 每行强制单个属性\n  endOfLine: 'lf', // 换行符\n  proseWrap: 'never', // 当超出print width时就折行 always|never|preserve .md文件?\n  embeddedLanguageFormatting: 'auto',\n}\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.3251953125,
          "content": "ARG APT_SOURCE=\"default\"\n\nFROM node:19 as builder-default\nENV NPM_REGISTRY=\"https://registry.npmjs.org\"\n\nFROM node:19 as builder-aliyun\n\nENV NPM_REGISTRY=\"https://registry.npmmirror.com\"\nRUN sed -i s/deb.debian.org/mirrors.aliyun.com/g /etc/apt/sources.list \\\n    && ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && echo 'Asia/Shanghai' >/etc/timezone\n\nFROM builder-${APT_SOURCE} AS builder\n# Instal the 'apt-utils' package to solve the error 'debconf: delaying package configuration, since apt-utils is not installed'\n# https://peteris.rocks/blog/quiet-and-unattended-installation-with-apt-get/\nRUN apt-get update \\\n  && apt-get install -y --no-install-recommends \\\n    apt-utils \\\n    autoconf \\\n    automake \\\n    bash \\\n    build-essential \\\n    ca-certificates \\\n    chromium \\\n    coreutils \\\n    curl \\\n    ffmpeg \\\n    figlet \\\n    git \\\n    gnupg2 \\\n    jq \\\n    libgconf-2-4 \\\n    libtool \\\n    libxtst6 \\\n    moreutils \\\n    python-dev \\\n    shellcheck \\\n    sudo \\\n    tzdata \\\n    vim \\\n    wget \\\n  && apt-get purge --auto-remove \\\n  && rm -rf /tmp/* /var/lib/apt/lists/*\n\nFROM builder\n\nENV CHROME_BIN=\"/usr/bin/chromium\" \\\n    PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=\"true\"\n\nRUN mkdir -p /app\nWORKDIR /app\n\nCOPY package.json ./\nRUN npm config set registry ${NPM_REGISTRY} && npm i\n\nCOPY *.js ./\nCOPY src/ ./src/\n\nCMD [\"npm\", \"run\", \"dev\"]\n"
        },
        {
          "name": "Dockerfile.alpine",
          "type": "blob",
          "size": 0.8173828125,
          "content": "ARG APT_SOURCE=\"default\"\n\nFROM node:19-alpine as base\nRUN apk update && \\\n    apk upgrade && \\\n    apk add --no-cache bash \\\n      ca-certificates \\\n      chromium-chromedriver \\\n      chromium \\\n      coreutils \\\n      curl \\\n      ffmpeg \\\n      figlet \\\n      jq \\\n      moreutils \\\n      ttf-freefont \\\n      udev \\\n      vim \\\n      xauth \\\n      xvfb \\\n    && rm -rf /tmp/* /var/cache/apk/*\n\n\nFROM base as builder-default\nENV NPM_REGISTRY=\"https://registry.npmjs.org\"\n\nFROM base as builder-aliyun\nENV NPM_REGISTRY=\"https://registry.npmmirror.com\"\n\n\nFROM builder-${APT_SOURCE}\n\nENV CHROME_BIN=\"/usr/bin/chromium-browser\" \\\n    PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=\"true\"\n\nRUN mkdir -p /app\nWORKDIR /app\n\nCOPY package.json ./\nRUN npm config set registry ${NPM_REGISTRY} && npm i\n\nCOPY *.js ./\nCOPY src/ ./src/\n\nCMD [\"npm\", \"run\", \"dev\"]\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.07421875,
          "content": "MIT License\n\nCopyright (c) 2020-present, 荣顶 and wechat-bot contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.2080078125,
          "content": "# WeChat Bot\n\n一个 基于 `chatgpt` + `wechaty` 的微信机器人\n\n可以用来帮助你自动回复微信消息，或者管理微信群/好友.\n\n`简单`，`好用`，`2分钟（4 个步骤）` 就能玩起来了。🌸 如果对您有所帮助，请点个 Star ⭐️ 支持一下。\n\n<div align='center'>\n  <a href=\"https://trendshift.io/repositories/11077\" target=\"_blank\"><img src=\"https://trendshift.io/api/badge/repositories/11077\" alt=\"wangrongding%2Fwechat-bot | Trendshift\" style=\"width: 250px; height: 55px;\" width=\"250\" height=\"55\"/></a>\n</div>\n\n## 贡献者们\n\n<a href=\"https://github.com/wangrongding/wechat-bot/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=wangrongding/wechat-bot&columns=20\" />\n</a>\n\n欢迎大家提交 PR 接入更多的 ai 服务(比如扣子等...)，积极贡献更好的功能实现，让 wechat-bot 变得更强！\n\n## 使用前需要配置的 AI 服务（目前支持 9 种，可任选其一）\n\n- ChatGPT\n\n  先获取自己的 `api key`，地址戳这里 👉🏻 ：[创建你的 api key](https://beta.openai.com/account/api-keys)\n\n  **注意：这个是需要去付费购买的，很多人过来问为什么请求不通，请确保终端走了代理，并且付费购买了它的服务**\n\n  ```sh\n  # 执行下面命令，拷贝一份 .env.example 文件为 .env\n  cp .env.example .env\n  # 填写完善 .env 文件中的内容\n  OPENAI_API_KEY='你的key'\n  ```\n\n- 通义千问\n\n  通义千问是阿里云提供的 AI 服务，获取到你的 api key 之后, 填写到 .env 文件中即可\n\n  ```sh\n  # 执行下面命令，拷贝一份 .env.example 文件为 .env\n  cp .env.example .env\n  # 填写完善 .env 文件中的内容\n  # 通义千问, URL 包含 uri 路径\n  TONGYI_URL = \"https://dashscope.aliyuncs.com/compatible-mode/v1\"\n  # 通义千问的 API_KEY\n  TONGYI_API_KEY = ''\n  # 通义千问使用的模型\n  TONGYI_MODEL='qwen-plus'\n  ```\n\n- deepseek 获取自己的 `api key`，地址戳这里 👉🏻 ：[deepseek 开放平台](https://platform.deepseek.com/usage)  \n  将获取到的`api key`填入 `.evn` 文件中的 `DEEPSEEK_FREE_TOKEN` 中。\n\n- 科大讯飞\n\n  新增科大讯飞，去这里申请一个 key：[科大讯飞](https://console.xfyun.cn/services/bm35)，每个模型都有 200 万的免费 token ，感觉很难用完。  \n  注意： 讯飞的配置文件几个 key，别填反了，很多人找到我说为什么不回复，都是填反了。  \n  而且还有一个好处就是，接口不会像 Kimi 一样限制请求频次，相对来说稳定很多。  \n  服务出错可参考： [issues/170](https://github.com/wangrongding/wechat-bot/issues/170), [issues/180](https://github.com/wangrongding/wechat-bot/issues/180)\n\n- Kimi （请求限制较严重）\n\n  可以去 ： [kimi apikey](https://platform.moonshot.cn/console/api-keys) 获取你的 key  \n  最近比较忙，大家感兴趣可以提交 PR，我会尽快合并。目前 Kimi 刚刚集成，还可以实现上传文件等功能，然后有其它较好的服务也可以提交 PR 。\n\n- dify\n\n  地址：[dify](https://dify.ai/), 创建你的应用之后, 获取到你的 api key 之后, 填写到 .env 文件中即可, 也支持私有化部署dify版本\n\n  ```sh\n  # 执行下面命令，拷贝一份 .env.example 文件为 .env\n  cp .env.example .env\n  # 填写完善 .env 文件中的内容\n  DIFY_API_KEY='你的key'\n  # 如果需要私有化部署，请修改.env中下面的配置\n  # DIFY_URL='https://[你的私有化部署地址]'\n  ```\n\n- ollama\n\n  Ollama 是一个本地化的 AI 服务，它的 API 与 OpenAI 非常接近。配置 Ollama 的过程与各种在线服务略有不同\n\n  ```sh\n  # 执行下面命令，拷贝一份 .env.example 文件为 .env\n  cp .env.example .env\n  # 填写完善 .env 文件中的内容\n  OLLAMA_URL='http://127.0.0.1:11434/api/chat'\n  OLLAMA_MODEL='qwen2.5:7b'\n  OLLAMA_SYSTEM_MESSAGE='You are a personal assistant.'\n  ```\n\n- 302.AI\n\n  AI聚合平台，有套壳GPT的API，也有其他模型，点这里可以[添加API](https://dash.302.ai/apis/list)，添加之后把API KEY配置到.env里，如下，MODEL可以自行选择配置\n\n  ```\n  _302AI_API_KEY = 'xxxx'\n  _302AI_MODEL= 'gpt-4o-mini'\n  ```\n\n  由于openai充值需要国外信用卡，流程比较繁琐，大多需要搞国外虚拟卡，手续费也都不少，该平台可以直接支付宝，算是比较省事的，注册填问卷可领1刀额度，后续充值也有手续费，用户可自行酌情选择。\n\n- claude\n\n  前往 [官网](https://console.anthropic.com) 注册并获取API KEY后进行配置即可\n\n  ```bash\n  # 执行下面命令，拷贝一份 .env.example 文件为 .env，如果已存在则忽略此步\n  cp .env.example .env\n\n  # 编辑.env文件并添加claude相关配置\n\n  CLAUDE_API_VERSION = '2023-06-01'\n  CLAUDE_API_KEY = '你的API KEY'\n  CLAUDE_MODEL = 'claude-3-5-sonnet-latest'\n  # 系统人设\n  CLAUDE_SYSTEM = ''\n  ```\n\n- 其他  \n  （待实践）理论上使用 openAI 格式的 api，都可以使用，在 env 文件中修改对应的 api_key、model、proxy_url 即可。\n\n## API资源/平台收录\n\n- [gpt4free](https://github.com/xtekky/gpt4free)\n- [chatanywhere](https://github.com/chatanywhere/GPT_API_free)\n\n## 赞助商\n\n<div align=\"center\">\n  <table>\n    <!-- Header -->\n    <tr>\n      <td align=\"center\" width=\"50%\">\n        <p align=\"center\">\n          <a href=\"https://gpt302.saaslink.net/hqRIfk\" target=\"_blank\">\n            <img src=\"./sponsors/302AI.png\" alt=\"Hi\"/>\n          </a>\n        </p>\n      </td>\n      <td align=\"center\" width=\"50%\">\n        <p align=\"center\">\n          <a href=\"\" target=\"_blank\">\n            <img src=\"./sponsors/server.jpg\" alt=\"Hi\"/>\n          </a>\n        </p>\n      </td>\n    </tr>\n    <!-- des -->\n    <tr>\n      <td align=\"left\">\n        302.AI 是一个汇集全球顶级 AI 的自助平台，按需付费，零月费，零门槛使用各种类型 AI。\n        <a href=\"https://gpt302.saaslink.net/hqRIfk\" target=\"_blank\">产品链接</a>\n      </td>\n      <td align=\"left\">提供claude gemini 等模型 价格低至0.55一刀 (vx: spkf789)</td>\n    </tr>\n  </table>\n</div>\n\n目前该项目流量较大，已经上过 27 次 [Github Trending 榜](https://github.com/trending)，如果您的公司或者产品需要推广，可以在下方二维码处联系我，我会在项目中加入您的广告，帮助您的产品获得更多的曝光。\n\n## 开发/使用\n\n检查好自己的开发环境，确保已经安装了 `nodejs` , 版本需要满足 Node.js >= v18.0 ，版本太低会导致运行报错,最好使用 LTS 版本。\n\n1. 安装依赖\n\n> 安装依赖时，大陆的朋友推荐切到 taobao 镜像源后再安装，命令：  \n> `npm config set registry https://registry.npmmirror.com`  \n> 想要灵活切换，推荐使用我的工具 👉🏻 [prm-cli](https://github.com/wangrongding/prm-cli) 快速切换。\n\n```sh\n# 安装依赖\nnpm i\n# 推荐用 yarn 吧，npm 安装有时会遇到 wechaty 内部依赖安装失败的问题\nyarn\n```\n\n2. 运行服务\n\n```sh\n# 启动服务\nnpm run dev # 或者 npm run start\n# 启动服务\nyarn dev # 或者 yarn start\n```\n\n然后就可以扫码登录了，然后根据你的需求，自己修改相关逻辑文件。\n\n![](https://assets.fedtop.com/picbed/202403261420468.png)\n\n![](https://assets.fedtop.com/picbed/202212071315670.png)\n\n为了兼容 docker 部署，避免不必要的选择交互，新增指定服务运行\n\n```sh\n# 运行指定服务 （ 目前支持 ChatGPT | Kimi | Xunfei ）\nnpm run start -- --serve Kimi\n# 交互选择服务，仍然保持原有的逻辑\nnpm run start\n```\n\n3. 测试\n\n安装完依赖后，运行 `npm run dev` 前，可以先测试下 openai 的接口是否可用，运行 `npm run test` 即可。\n\n遇到 timeout 问题需要自行解决。（一般就是代理未成功，或者你的梯子限制了调 openai api 的服务）\n\n## 你要修改的\n\n很多人说运行后不会自动收发信息，不是的哈，为了防止给每一条收到的消息都自动回复（太恐怖了），所以加了限制条件。\n\n你要把下面提到的地方自定义修改下。\n\n- 群聊，记得把机器人名称改成你自己微信号的名称，然后添加对应群聊的名称到白名单中，这样就可以自动回复群聊消息了。\n- 私聊，记得把需要自动回复的好友名称添加到白名单中，这样就可以自动回复私聊消息了。\n- 更深入的可以通过修改 `src/wechaty/sendMessage.js` 文件来满足你自己的业务场景。（大多人反馈可能无法自动回复，也可以通过调试这个文件来排查具体原因）\n\n在.env 文件中修改你的配置即可，示例如下\n\n```sh\n# 白名单配置\n#定义机器人的名称，这里是为了防止群聊消息太多，所以只有艾特机器人才会回复，\n#这里不要把@去掉，在@后面加上你启动机器人账号的微信名称\nBOT_NAME=@可乐\n#联系人白名单\nALIAS_WHITELIST=微信名1,备注名2\n#群聊白名单\nROOM_WHITELIST=XX群1,群2\n#自动回复前缀匹配，文本消息匹配到指定前缀时，才会触发自动回复，不配或配空串情况下该配置不生效（适用于用大号，不期望每次被@或者私聊时都触发自动回复的人群）\n#匹配规则：群聊消息去掉${BOT_NAME}并trim后进行前缀匹配，私聊消息trim后直接进行前缀匹配\nAUTO_REPLY_PREFIX=''\n```\n\n可以看到，自动回复都是基于 `chatgpt` 的，记得要开代理，或者填写代理地址。\n\n![](https://github.com/user-attachments/assets/1c312cf4-73d8-44a1-8f36-5ea288ac0aa4)\n\n## 常见问题\n\n可以进交流群,一起交流探讨相关问题和解决方案，添加的时候记得备注来意。（如果项目对你有所帮助，也可以请我喝杯咖啡 ☕️ ~）\n\n| <img src=\"https://github.com/user-attachments/assets/902b1a20-0ea0-4348-9ac1-b9eb6645223c\" width=\"180px\"> | <img src=\"https://raw.githubusercontent.com/wangrongding/image-house/master/202303151014249.JPG\" width=\"180px\"> |\n| --- | --- |\n\n### 运行报错等问题\n\n首先你需要做到以下几点：\n\n- 拉取最新代码，重新安装依赖（删除 lock 文件，删除 node_modules）\n- 安装依赖时最好不要设置 npm 镜像\n- 遇到 puppeteer 安装失败设置环境变量：\n\n  ```\n  # Mac\n  export PUPPETEER_SKIP_DOWNLOAD='true'\n\n  # Windows\n  SET PUPPETEER_SKIP_DOWNLOAD='true'\n  ```\n\n- 确保你们的终端走了代理 (开全局梯子，或者手动设置终端走代理)\n\n  ```sh\n  # 设置代理\n  export https_proxy=http://127.0.0.1:你的代理服务端口号;export http_proxy=http://127.0.0.1:你的代理服务端口号;export all_proxy=socks5://127.0.0.1:你的代理服务端口号\n  # 然后再执行 npm run test\n  npm run test\n  ```\n\n  ![](https://raw.githubusercontent.com/wangrongding/image-house/master/202403231002859.png)\n\n- 确保你的 openai key 有余额\n- 配置好 .env 文件\n- 执行 npm run test 能成功拿到 openai 的回复(设置完代理后，仍然请求不通？ 可以参考： https://medium.com/@chanter2d/%E5%85%B3%E4%BA%8E%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8clash%E5%AE%9E%E7%8E%B0%E7%9C%9F%E6%AD%A3%E7%9A%84%E5%85%A8%E5%B1%80%E4%BB%A3%E7%90%86-385b2d745871)\n- 执行 npm run dev 愉快的玩耍吧~ 🎉\n\n也可以参考这条 [issue](https://github.com/wangrongding/wechat-bot/issues/54#issuecomment-1347880291)\n\n- 怎么玩？ 完成自定义修改后，群聊时，在白名单中的群，有人 @你 时会触发自动回复，私聊中，联系人白名单中的人发消息给你时会触发自动回复。\n- 运行报错？检查 node 版本是否符合，如果不符合，升级 node 版本即可，检查依赖是否安装完整，如果不完整，大陆推荐切换下 npm 镜像源，然后重新安装依赖即可。（可以用我的 [prm-cli](https://github.com/wangrongding/prm-cli) 工具快速切换）\n- 调整对话模式？可以修改[openai/index.js](./src/openai/index.js) ,具体可以根据官方文档给出的示例（非常多，自己对应调整参数即可） ：https://beta.openai.com/examples\n\n## 使用 Docker 部署\n\n```sh\n$ docker build . -t wechat-bot\n\n$ docker run -d --rm --name wechat-bot -v $(pwd)/.env:/app/.env wechat-bot\n```\n\n## Star History Chart\n\n该项目于 2023/2/13 日成为 Github Trending 榜首。\n\n[![Star History Chart](https://api.star-history.com/svg?repos=wangrongding/wechat-bot&type=Date)](https://star-history.com/#wangrongding/wechat-bot&Date)\n\n## License\n\n[MIT](./LICENSE).\n"
        },
        {
          "name": "RECORD.md",
          "type": "blob",
          "size": 1.9462890625,
          "content": "# 使用最近很火的 OpenAi ChatGPT 配合 Wechaty 实现一个 微信聊天機器人\n\n## 前言\n\n使用 OpenAi ChatGPT 和 Wechaty 可以实现一个微信聊天机器人。OpenAi ChatGPT 是一个大型语言模型，能够模拟人类聊天对话，并回答用户的问题。Wechaty 是一个 Node.js 库，可以让开发者轻松地接入微信并实现聊天机器人功能。\n\n首先，需要安装 Node.js 和 npm（Node.js 包管理器）。安装完成后，使用 npm 安装 Wechaty 和 OpenAi ChatGPT。\n\n## 什么是 OpenAi ChatGPT\n\nOpenAI ChatGPT 是一个语言模型，由 OpenAI 开发。它是基于 GPT-3（Generative Pretrained Transformer-3）架构的，用于对话和聊天的自然语言处理（NLP）任务。它的目的是通过模仿人类的语言方式来生成文本。\n\n与其他语言模型不同，OpenAI ChatGPT 可以记忆之前的对话内容，并根据上下文和预先学习的知识来生成自然的回复。它可以用于支持机器人，聊天机器人和其他应用程序，以提供更加人性化和自然的对话体验。\n\nOpenAI ChatGPT 模型使用了大量的语料数据进行预训练，并通过机器学习算法来优化其生成文本的能力。它具有出色的自然语言理解能力，可以模拟人类的语言特征，如句子结构、语法和修辞手法。\n\n总的来说，OpenAI ChatGPT 是一个非常强大的语言模型，可以用于实现多种 NLP 应用程序，以提高对话和聊天的自然语言处理能力。\n\n## 什么是 Wechaty\n\n## 一些相关链接\n\n- [OpenAI ChatGPT](https://openai.com/blog/chatting/)\n- [Wechaty](https://wechaty.js.org/)\n- [Wechaty Chatbot](https://wechaty.js.org/docs/examples/chatbot/)\n- [Wechaty Chatbot Tutorial](https://wechaty.js.org/docs/tutorials/chatbot-tutorial/)\n\n- https://openai.com/blog/chatgpt/\n- https://download-chromium.appspot.com/?platform=Mac_Arm&type=snapshots\n- https://registry.npmmirror.com/binary.html?path=chromium-browser-snapshots/Mac_Arm/\n"
        },
        {
          "name": "cli.js",
          "type": "blob",
          "size": 0.05859375,
          "content": "#! /usr/bin/env node\n\n'use strict'\nimport('./src/index.js')\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.314453125,
          "content": "{\n  \"name\": \"wechat-bot\",\n  \"version\": \"1.0.0-alpha.1\",\n  \"description\": \"wechat-bot\",\n  \"main\": \"index.js\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"node ./cli.js\",\n    \"format\": \"prettier --write ./src\",\n    \"start\": \"node ./cli.js\",\n    \"test\": \"node ./src/wechaty/testMessage.js\",\n    \"test-openai\": \"node ./src/openai/__test__.js\",\n    \"test-xunfei\": \"node ./src/xunfei/__test__.js\",\n    \"test-kimi\": \"node ./src/kimi/__test__.js\",\n    \"test-dify\": \"node ./src/dify/__test__.js\",\n    \"prepare\": \"husky\"\n  },\n  \"lint-staged\": {\n    \"*.{js,ts,md}\": [\n      \"prettier --write\"\n    ]\n  },\n  \"bin\": {\n    \"we\": \"./cli.js\",\n    \"wb\": \"./cli.js\",\n    \"wechat-bot\": \"./cli.js\"\n  },\n  \"author\": \"荣顶\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"axios\": \"^1.6.8\",\n    \"chatgpt\": \"^2.5.2\",\n    \"commander\": \"^12.0.0\",\n    \"crypto-js\": \"^4.2.0\",\n    \"dotenv\": \"^16.4.5\",\n    \"inquirer\": \"^9.2.16\",\n    \"openai\": \"^4.52.0\",\n    \"p-timeout\": \"^6.0.0\",\n    \"qrcode-terminal\": \"^0.12.0\",\n    \"remark\": \"^14.0.2\",\n    \"strip-markdown\": \"^5.0.0\",\n    \"wechaty\": \"^1.20.2\",\n    \"wechaty-puppet-wechat\": \"^1.18.4\",\n    \"wechaty-puppet-wechat4u\": \"^1.14.14\",\n    \"ws\": \"^8.16.0\"\n  },\n  \"devDependencies\": {\n    \"husky\": \"^9.0.11\",\n    \"lint-staged\": \"^15.2.7\",\n    \"prettier\": \"^3.3.3\",\n    \"puppeteer\": \"13.5.1\",\n    \"puppeteer-core\": \"13.5.1\"\n  }\n}\n"
        },
        {
          "name": "sponsors",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}