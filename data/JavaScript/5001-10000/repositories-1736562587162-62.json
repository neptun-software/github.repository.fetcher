{
  "metadata": {
    "timestamp": 1736562587162,
    "page": 62,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "GetStream/Winds",
      "stars": 8916,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".eslintrc.js",
          "type": "blob",
          "size": 0.8046875,
          "content": "module.exports = {\n\tenv: {\n\t\t'browser': true,\n\t\t'es6': true,\n\t\t'node': true,\n\t\t'shared-node-browser': true,\n\t\t'mocha': true,\n\t},\n\textends: ['eslint:recommended', 'plugin:react/recommended'],\n\tparser: 'babel-eslint',\n\tparserOptions: {\n\t\tecmaFeatures: {\n\t\t\texperimentalObjectRestSpread: true,\n\t\t\tjsx: true,\n\t\t},\n\t\tsourceType: 'module',\n\t},\n\tplugins: ['react'],\n\trules: {\n\t\t'indent': ['error', 'tab'],\n\t\t'linebreak-style': ['error', 'unix'],\n\t\t'jsx-quotes': ['error', 'prefer-double'],\n\t\t'quotes': ['error', 'single'],\n\t\t'semi': ['error', 'always'],\n\t\t'comma-dangle': ['error', 'always-multiline'],\n\t\t'no-case-declarations': 'off',\n\t\t'react/jsx-sort-props': 'error',\n\t\t'eqeqeq': 'warn',\n\t\t'quote-props': ['warn', 'consistent-as-needed'],\n\t\t'react/no-deprecated': 'off',\n\t\t'no-console': 0,\n\t\t'keyword-spacing': ['error']\n\t},\n};\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0478515625,
          "content": "* linguist-vendored\n*.js linguist-vendored=false\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.3759765625,
          "content": "# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n# Coverage report for codecov\ncoverage.lcov\n\n.pyc\n__pycache__/\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Bower dependency directory (https://bower.io/)\nbower_components\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (http://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules/\njspm_packages/\n\n# Typescript v1 declaration files\ntypings/\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Optional REPL history\n.node_repl_history\n\n# Output of 'npm pack'\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# dotenv environment variables file\n.env\n.env.*\n\n# System\n.DS_Store\n\n# Electron Build\n#app-update.yml\n#dev-app-update.yml\n\n# Sass support\nsrc/**/*.css\napp/src/styles/global.css\n\n# API & Worker Production Builds\napi/dist\nworkers/dist\n\n# App Production Builds\napp/dist\napp/build\napp/assets/private-key.p12\n\n# Fabric\nfabfile.py\nfabfile.pyc\n\n# Redis\ndump.rdb\n\n# local mongo\nmongo-db\n\n# Deployment Configurations\ndeploy.sh\nprocess_prod.json\nembedded.provisionprofile\nsign.js\n*.p12\napp/latest.html\n#IDE\n.vscode"
        },
        {
          "name": ".prettierrc",
          "type": "blob",
          "size": 0.2158203125,
          "content": "{\n    \"useTabs\": true,\n    \"printWidth\": 90,\n    \"tabWidth\": 4,\n    \"singleQuote\": true,\n    \"trailingComma\": \"all\",\n    \"jsxBracketSameLine\": false,\n    \"parser\": \"babel\",\n    \"semi\": true,\n    \"arrowParens\": \"always\"\n}\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.19921875,
          "content": "dist: xenial\nlanguage: node_js\nnode_js:\n  - \"14\"\nservices:\n  - redis\n  - mongodb\ncache: yarn\ninstall:\n    - \"cd api && yarn install\"\nscript:\n    - \"yarn run test\"\nafter_success:\n    - \"yarn run coverage\"\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.4140625,
          "content": "# Use the latest version of Node\nFROM mhart/alpine-node:latest\n\n# Update dependency cache\nRUN apk update && apk upgrade\n\n# install dependencies\nRUN apk add --no-cache make gcc g++ python git\n\n# Install PM2 globally\nRUN yarn global add pm2\n\n# Create app directory\nWORKDIR /usr/src/winds\n\n# Copy app source code\nCOPY . .\n\n# Expose port 8080\nEXPOSE 8080\n\n# Run process via pm2\nCMD [\"pm2-runtime\", \"start\", \"process_prod.json\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.4365234375,
          "content": "Copyright 2018 Stream.io Inc\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of the author nor the names of contributors may be used to\n  endorse or promote products derived from this software without specific prior\n  written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 18.6044921875,
          "content": "> üõë **Notice**: This repository is no longer maintained; No further Issues or Pull Requests will be considered or approved.\n\n# Winds - A Beautiful Open Source RSS & Podcast App Powered by GetStream.io\n\n[![Slack Community](https://img.shields.io/badge/Slack%20Community-Get%20Invite-green.svg)](https://communityinviter.com/apps/winds-community-hq/winds-2-0)\n[![Build Status](https://travis-ci.org/GetStream/Winds.svg?branch=master)](https://travis-ci.org/GetStream/Winds)\n[![codecov](https://codecov.io/gh/GetStream/Winds/branch/master/graph/badge.svg)](https://codecov.io/gh/GetStream/Winds)\n[![Open Source](https://img.shields.io/badge/Open%20Source-100%25-green.svg)](https://shields.io/)\n[![Maintenance](https://img.shields.io/badge/Maintained%3F-Yes-green.svg)](https://github.com/GetStream/winds/graphs/commit-activity)\n[![Built With](https://img.shields.io/badge/Built%20With-‚ù§Ô∏è%20in%20Boulder,%20CO-green.svg)](httpds://shields.io/)\n[![StackShare](https://img.shields.io/badge/Tech-Stack-0690fa.svg?style=flat)](https://stackshare.io/stream/winds)\n\n## Description\n\nWinds is a beautiful open-source RSS and Podcast app created using React & Redux on the frontend and Express.js on the backend. Use the free hosted version or run it on your own server and customize it as you see fit. Contributions in form of pull requests are always appreciated. Activity Feeds & Discovery in Winds are powered by [Stream](https://getstream.io/get_started/), the app leverages [Algolia](https://algolia.com?ref=stream) for search, [AWS](https://aws.amazon.com/) for hosting, [MongoDB Atlas](http://mbsy.co/mongodb/228644) for a hosted database (DBaaS), and [SendGrid](https://sendgrid.com/) for email. All of these services have a free tier.\n\n## Getting Started\n\nTo get started with Winds, please download [the latest release](https://s3.amazonaws.com/winds-2.0-releases/latest.html)\n\n## Featured RSS & Podcasts\n\nHave a popular RSS or Podcast and want to be featured? Reach out to winds@getstream.io. We reply to every message.\n\n# Features at a Glance\nWinds is packed full of awesome features behind a beautiful user interface and user experience. Here's a quick look at what the project has to offer:\n\n## Beautiful UI\n![Winds UI](https://i.imgur.com/W1fpowV.png)\n\n## RSS & Podcast Recommendations\n![Winds RSS & Podcast Recommendations](https://i.imgur.com/AlVgDTg.png)\n\n## Integrated Search\n![Winds Search](https://i.imgur.com/zaWtNfV.png)\n\n## Podcast Player\n![Winds Podcast Player](https://i.imgur.com/th247rA.png)\n\n## RSS Reader\n![Winds RSS Reader](https://i.imgur.com/D3wt7W3.png)\n\n\n## TOCd\n\n*   [Roadmap](#roadmap)\n*   [Powered By](#powered-by)\n    *   [Stream](#stream)\n    *   [Algolia](#algolia)\n    *   [MongoDB](#mongodb)\n    *   [SendGrid](https://sendgrid.com)\n    *   [AWS](https://aws.amazon.com/)\n*   [Tutorials](#tutorials)\n*   [Download](#download)\n*   [Contributing to Winds](#contributing-to-winds)\n*   [Support](#support)\n*   [Maintenance & Contributions](#maintenance-and-contributions)\n\n## Roadmap\n\nHelp us improve Winds and/or vote on the [Roadmap for 2.1](https://github.com/GetStream/Winds/issues/191)\n\n*   [ ] Search detail screen\n*   [ ] Playlist support (partially implemented)\n*   [ ] Team support (share an activity feed with colleagues or friends to discover and collaborate)\n*   [ ] Mobile application powered by React Native\n\n## Powered By\n\n1.  [Express](https://expressjs.com?ref=winds)\n2.  [React](https://reactjs.org?ref=winds) & [Redux](https://redux.js.org?ref=winds)\n3.  [Algolia](https://www.algolia.com?ref=winds)\n4.  [MongoDB Atlas](http://mbsy.co/mongodb/228644)\n5.  [SendGrid](https://sendgrid.com?ref=winds)\n6.  [Bull](https://github.com/OptimalBits/bull?ref=winds)\n7.  [Mercury](https://mercury.postlight.com?ref=winds)\n8.  [Stream](https://getstream.io?ref=winds)\n9.  [Sentry](https://sentry.io/?ref=winds)\n10. [AWS](https://aws.amazon.com/?ref=winds)\n\n**The full stack can be found on [StackShare.io](https://stackshare.io/stream/winds).**\n\n### Stream\n\n[Stream](https://getstream.io/?ref=winds) is an API for building activity feeds. For Winds the follow suggestions and the list of articles from the feeds you follow is powered by Stream. Stream accounts are free for up to 3 million feed updates and handle personalization (machine learning) for up to 100 users.\n\n### Algolia\n\n[Algolia](https://algolia.com?ref=winds) is used for lightning fast and relevant search. We use their [JavaScript search client](https://www.npmjs.com/package/algoliasearch?ref=winds) to easily setup the Winds search implementation. Algolia, accounts are free up to 10k records and 100k operations.\n\n### MongoDB\n\n[MongoDB Atlas](http://mbsy.co/mongodb/228644) provides a Database as a Service, and serves as the backend datastore for Winds.\n\n## Tutorials & Blog Posts\n\nThe following tutorials will not only help you start contributing to Winds, but also provide inspiration for your next app.\n\n**Note:** We're actively working on this portion of the README. To stay up to date with the latest information, please signup for the hosted version at [https://getstream.io/winds](https://getstream.io/winds).\n\n1.  [Implementing search with Algolia](https://hackernoon.com/integrating-algolia-search-in-winds-a-beautiful-rss-podcast-application-f231e49cdab5)\n2.  [Stream and Winds](https://getstream.io/blog/the-engine-that-powers-winds/)\n3.  [Running PM2 & Node.js in Production Environments](https://hackernoon.com/running-pm2-node-js-in-production-environments-13e703fc108a)\n4.  [Creating a RESTful API design with Express.js](https://hackernoon.com/building-a-node-js-powered-api-with-express-mongoose-mongodb-19b14fd4b51e)\n5. [Takeaways on Building a React Based App with Electron](https://medium.com/@nparsons08/publishing-a-react-based-app-with-electron-and-nodejs-f5ec44169366)\n6. [The Winds Stack](https://stackshare.io/stream/how-stream-built-a-modern-rss-reader-with-javascript)\n7. [Building Touch Bar Support for macOS in Electron with React](https://hackernoon.com/winds-2-1-building-touch-bar-support-for-macos-in-electron-with-react-e10adb811c91)\n8. [Testing Node.js in 2018](https://hackernoon.com/testing-node-js-in-2018-10a04dd77391)\n9. [Simple Steps to Optimize Your App Performance with MongoDB, Redis, and Node.js](https://hackernoon.com/simple-steps-to-optimize-your-app-performance-5700d8b58f58)\n10. [Getting Started with Winds & Open Source](https://hackernoon.com/winds-an-in-depth-tutorial-on-making-your-first-contribution-to-open-source-software-ebf259f21db2)\n11. [Deploying the Winds App to Amazon S3 and CloudFront](https://getstream.io/blog/deploying-the-winds-app-to-amazon-s3-and-cloudfront/)\n12. [Deploying the Winds API to AWS ECS with Docker Compose](https://getstream.io/blog/deploying-the-winds-api-to-aws-ecs-with-docker-compose/)\n\n## Download\n\nTo download Winds, visit [https://getstream.io/winds/](https://getstream.io/winds/).\n\n## Contributing to Winds\n\n### TL;DR\n\nCommands:\n\n*   `brew install redis mongodb`\n*   `brew services start mongodb`\n*   `brew services start redis`\n*   `cd Winds`\n*   `cd api && yarn`\n*   `cd ../app && yarn`\n\n\nSign up for both Stream and Algolia, and create the following `.env` file in the `app` directory, replacing the keys where indicated:\n\n```\nDATABASE_URI=mongodb://localhost/WINDS_DEV\nCACHE_URI=redis://localhost:6379\nJWT_SECRET=YOUR_JWT_SECRET\n\nAPI_PORT=8080\nREACT_APP_API_ENDPOINT=http://localhost:8080\nSTREAM_API_BASE_URL=https://windspersonalization.getstream.io/personalization/v1.0\n\nSTREAM_APP_ID=YOUR_STREAM_APP_ID\nREACT_APP_STREAM_APP_ID=YOUR_STREAM_APP_ID\nREACT_APP_STREAM_API_KEY=YOUR_STREAM_API_KEY\nREACT_APP_STREAM_ANALYTICS=YOUR_STREAM_ANALYTICS_TOKEN\nSTREAM_API_KEY=YOUR_STREAM_API_KEY\nSTREAM_API_SECRET=YOUR_STREAM_API_SECRET\n\nREACT_APP_ALGOLIA_APP_ID=YOUR_ALGOLIA_APP_ID\nREACT_APP_ALGOLIA_SEARCH_KEY=YOUR_ALGOLIA_SEARCH_ONLY_API_KEY\nALGOLIA_WRITE_KEY=YOUR_ALGOLIA_ADMIN_API_KEY\n```\n\n> Note: If you are running the test suite, you will need to have a test version of the `.env` file inside of the `api/test` directory.\n\nThen run:\n\n*   `pm2 start process_dev.json`\n*   `cd app && yarn start`\n\n### Clone the Repo\n\n```bash\ngit clone git@github.com:GetStream/Winds.git\n```\n\n### Install dependencies\n\nThe following instructions are geared towards Mac users who can use `brew` ([Homebrew](https://brew.sh/)) to install most dependencies. Ubuntu users can use `apt`, and Windows users will have to install directly from the dependency's site. Non-debian-based Linux users will probably be able to figure it out on their own :)\n\n*   `cd Winds/app`\n*   `yarn`\n*   `cd ../api`\n*   `yarn`\n\n### Start MongoDB Locally\n\nWinds uses MongoDB as the main datastore - it contains all users, rss feeds, podcasts, episodes, articles, and shares.\n\nIf you're on a Mac, you can install MongoDB through [Homebrew](https://brew.sh/) by running:\n\n```\nbrew install mongodb\n```\n\n_(You can also install MongoDB from the [official MongoDB site](https://www.mongodb.com/download-center).)_\n\nYou can also run MongoDB in the background by running:\n\n```\nbrew services start mongodb\n```\n\n### Start Redis Locally\n\nAt Stream, we use Redis as an in-memory storage for the Winds podcast processing and RSS processing workers. It contains a list of podcasts and RSS feeds, which the workers pick up and process using the `bull` messaging system.\n\nIf you're on a Mac, you can install Redis through [Homebrew](https://brew.sh/) by running:\n\n```\nbrew install redis\n```\n\n_(You can also install Redis from the [official Redis site](https://redis.io/download).)_\n\nThen, start Redis by running:\n\n```\nredis-server\n```\n\n...which creates (by default) a `dump.rdb` file in your current directory and stores a cached version of the database in that location.\n\nYou can also run Redis in the background by running:\n\n```\nbrew services start redis\n```\n\n### Loading Test Data\n\nFor testing purposes, you will want to use the test data located [here](https://s3.amazonaws.com/winds-hosted/static/export/WINDS.zip).\n\nUse [`mongoimport`](https://docs.mongodb.com/manual/reference/program/mongoimport/) or [`mongorestore`](https://docs.mongodb.com/manual/reference/program/mongorestore/) to import the data. There are two username and password combinations for testing:\n\n**Username**: `admin@admin.com`<br/>\n**Password**: `admin`\n<br/><br/>\n**Username**: `test@test.com`<br/>\n**Password**: `test`\n\nYou will need to run the `FLUSHALL` command in Redis to ensure that the new content is picked up.\n\n> Note: This will override any local data that you may have. Please be cautious! Also, this will not create Stream follows ‚Äì please follow feeds manually to generate them.\n\n### Stream\n\n#### Sign up and Create a Stream App\n\nTo contribute to Winds, sign up for [Stream](https://getstream.io/get_started?ref=winds) to utilize the activity and timeline feeds.\n\n_(Reminder: Stream is free for applications with less than 3,000,000 updates per month.)_\n\n*   [Sign up for Stream here](https://getstream.io/get_started?ref=winds)\n*   Create a new Stream app\n*   Find the App ID, API Key, and API Secret for your new Stream app\n\n#### Add your Stream App ID, API Key, and API Secret to your `.env`\n\nAppend the Stream App ID, API Key, and API secret to your `.env` file:\n\n```\nSTREAM_APP_ID=YOUR_STREAM_APP_ID\nSTREAM_API_KEY=YOUR_STREAM_API_KEY\nSTREAM_API_SECRET=YOUR_STREAM_API_SECRET\n```\n\n#### Create Your Stream Feed Groups\n\nOnce you've signed in, create \"feed groups\" for your Stream app.\n\nA \"feed group\" defines a certain type of feed within your application. Use the \"Add Feed Group\" button to create the following feeds:\n\n| Feed Group Name | Feed Group Type |\n| --------------- | --------------- |\n| `podcast`       | flat            |\n| `rss`           | flat            |\n| `user`          | flat            |\n| `timeline`      | flat            |\n| `folder`        | flat            |\n| `user_episode`  | flat            |\n| `user_article`  | flat            |\n\nIt's fine to enable \"Realtime Notifications\" for each of these feed groups, though we won't be using those yet.\n\n### Algolia\n\n#### Sign up for Algolia and Create an Algolia App and Index\n\nIn addition to Stream, you also need to sign up for [Algolia](https://www.algolia.com/users/sign_up?ref=winds), to contribute to Winds, for the search functionality.\n\n_(Algolia is free for applications with up to 10k records.)_\n\n*   [Sign up for Algolia here](https://www.algolia.com/users/sign_up?ref=winds)\n*   From the [Applications page](https://www.algolia.com/manage/applications), click \"New Application\" and create a new Algolia application. (We recommend something similar to `my-winds-app`)\n    *   (Select the datacenter that's closest to you.)\n*   From the application page, select \"Indices\" and click \"Add New Index\". (We recommend something similar to `winds-main-index`)\n\n#### Add Your Algolia Application Id, Search-Only Api Key and Admin Api Key to Your `.env` File\n\nFrom your app, click the \"API Keys\" button on the left to find your app ID and API keys.\n\nAppend your Algolia application ID, search-only API Key and Admin API Key to your `.env` file to look like this:\n\n```\nREACT_APP_ALGOLIA_APP_ID=YOUR_ALGOLIA_APP_ID\nREACT_APP_ALGOLIA_SEARCH_KEY=YOUR_ALGOLIA_SEARCH_ONLY_API_KEY\nALGOLIA_WRITE_KEY=YOUR_ALGOLIA_ADMIN_API_KEY\n```\n\n### Start Backend Services\n\nFrom the root directory, run:\n\n```\npm2 start process_dev.json\n```\n\nTo see logging information for all processes, run:\n\n```\npm2 logs\n```\n\n### Start Frontend Electron / Web App Server\n\n```\ncd app && yarn start\n```\n\n### Running tests\n\nWinds API server uses:\n\n* [Mocha](https://mochajs.org) as testing framework\n* [Chai](https://chaijs.org) as assertion library\n* [Sinon](https://sinonjs.org) as mocking library\n* [nock](https://github.com/node-nock/nock) as HTTP mocking library\n* [mock-require](https://github.com/boblauer/mock-require) as module mocking library\n\nTests are located in [`api/test` folder](https://github.com/GetStream/Winds/tree/master/api/test).\n\nFile structure is intentionally mirroring files in `api/src` to simplify matching tests to tested code.\n\nTo run tests:\n\n```\ncd api && yarn run test\n```\n\nTo run tests with extended stack traces (useful when debugging async issues):\n\n```\ncd api && yarn run test_deep\n```\n\n#### Adding new tests\n\nAdd your code to a file in `api/test` folder (preferably mirroring existing file from `api/src` folder).\n\nRefer to [Mocha documentation](https://mochajs.org/#getting-started) for examples of using BDD-like DSL for writing tests.\n\nModules are mocked in [`api/test-entry.js`](https://github.com/GetStream/Winds/blob/master/api/test-entry.js#L21L27) as mocks have to be installed before any modules are loaded.\n\nFixtures are loaded via [`loadFixture`](https://github.com/GetStream/Winds/blob/master/api/test/utils.js#L59L101) function from [`api/test/fixtures` folder](https://github.com/GetStream/Winds/tree/master/api/test/fixtures)\n\nVarious utility functions are provided in [`api/test/util.js`](https://github.com/GetStream/Winds/blob/master/api/test/utils.js) (See other tests for examples of usage).\n\n### Building a Production Version\n\nBuild a production version of Winds by running from root directory:\n\n```\n./api/build.sh\n```\n\nThis creates production-ready JS files in api/dist.\n\nTo run the production JS files:\n\n```\npm2 start process_prod.json\n```\n\nOR\n\n**Prepare the build for Docker**:\n\n`cd api && cd scripts && ./make-build.sh`\n\n**Build the Docker container (API & all workers)**:\n\n`cd ../ && docker-compose up`\n\nThe commands above will prepare and start the API (and all workers). The frontend will still need to be started manually.\n\n## Debugging RSS & Podcast Issues\n\nUnfortunately there is no unified standard for RSS.\nGo to the `api` directory and run `yarn link` to make these commands available:\n\n```\nwinds rss https://techcrunch.com/feed/\n```\n\n**Podcasts**:\n\n```\nwinds podcast https://www.npr.org/rss/podcast.php\\?id\\=510289\n```\n\n**Open Graph scraping**:\n\n```\nwinds og http://www.planetary.org/multimedia/planetary-radio/show/2018/0509-amy-mainzer-neowise.html\n```\n\n**RSS Discovery**:\n\n```\nwinds discover mashable.com\n```\n\n**Article parsing (w/ Mercury)**:\n\n```\nwinds article https://alexiskold.net/2018/04/12/meet-12-startups-from-techstars-nyc-winter-2018-program/\n```\n\nPull requests for improved RSS compatibility are much appreciated.\nMost of the parsing codebase is located in `api/src/parsers/`.\n\n## Support\n\nAll support is handled via [GitHub Issues](https://github.com/getstream/winds/issues). If you're unfamiliar with creating an Issue on GitHub, please follow [these instructions](https://help.github.com/articles/creating-an-issue/).\n\n## Maintenance and Contributions\n\nThank you to all of the maintainers and contributors who've helped Winds become what it is today and help it stay up and running every day. We couldn't do it without you!\n\n### Special Shoutouts To:\n\n*   [Hackernoon](https://hackernoon.com/)\n*   [Product Hunt](https://www.producthunt.com/)\n*   [StackShare](https://stackshare.io/stream/how-stream-built-a-modern-rss-reader-with-javascript)\n\n### Primary Maintainers\n\n*   [Nick Parsons](https://github.com/nparsons08)\n*   [Amin Mahboubi](https://github.com/mahboubii)\n*   [Thierry Schellenbach](https://github.com/tschellenbach)\n*   [Josh Tilton](https://github.com/tilton)\n\n### Contributors\n\n*   [Tommaso Barbugli](https://github.com/tbarbugli)\n*   [Ken Hoff](https://github.com/kenhoff)\n*   [Dwight Gunning](https://github.com/dwightgunning)\n*   [Matt Gauger](https://github.com/mathias)\n*   [Max Klyga](https://github.com/nekuromento)\n*   [Zhomart Mukhamejanov](https://github.com/Zhomart)\n*   [Julian Xhokaxhiu](https://github.com/julianxhokaxhiu)\n*   [Jonathon Belotti](https://github.com/thundergolfer)\n*   [The Gitter Badger](https://github.com/gitter-badger)\n*   [Meriadec Pillet](https://github.com/meriadec)\n*   [Alex Sinnott](https://github.com/sifex)\n*   [Lawal Sauban](https://github.com/sauban)\n\n## Revive RSS\n\nRSS is an amazing open standard. It is probably the most pleasant way to stay up to date with the sites and podcasts you care about. Our reasons for contributing to Winds are explained in the blogpost [Winds 2.0 It's time to Revive RSS](https://getstream.io/blog/winds-2-0-its-time-to-revive-rss/). In this section we will list other open source and commercial projects that are having an impact on Reviving RSS:\n\n* [Miniflux](https://github.com/miniflux/miniflux)\n* [TwitRSSMe](https://twitrss.me/)\n* [Feedly](https://feedly.com/)\n* [NewsBlur](https://newsblur.com/)\n* [Feedity](https://feedity.com/)\n* [SaveRSS](https://mg.guelker.eu/saverss/)\n\n\n## We are hiring!\n\nWe've recently closed a [$38 million Series B funding round](https://techcrunch.com/2021/03/04/stream-raises-38m-as-its-chat-and-activity-feed-apis-power-communications-for-1b-users/) and we keep actively growing.\nOur APIs are used by more than a billion end-users, and you'll have a chance to make a huge impact on the product within a team of the strongest engineers all over the world.\n\nCheck out our current openings and apply via [Stream's website](https://getstream.io/team/#jobs).\n"
        },
        {
          "name": "RSS.md",
          "type": "blob",
          "size": 1.8359375,
          "content": "\n## Post Uniqueness ##\n\nPost uniqueness in an RSS feed can be determined by 4 different methods:\n\n- The guid property on the post (not always present)\n- The link property on the post (not always present and sometimes uses the site url)\n- The url of the first enclosure (common amongst podcasts)\n- A hash of the title, link, description and enclosures\n\nNote that the guid shouldn't change. The link, url and hash can change when the post is updated though.\nSo using the first approach is preferable.\n\nWhile not available in the RSS feed you could also consider the\n\n- Canonical URL on the page\n\n## RSS feed Uniqueness ##\n\nDetermining the uniqueness for an RSS feed is harder.\nThere are a few different options\n\n- A normalized version of the feed url\n- The feed url specified in the RSS doc\n\nNeither of those approaches work as most RSS feeds are available under many different urls.\n\n- A hash based on the last 10 article hashes\n\n## Discovery ##\n\nThe standard discovery library picks up the link rel tag in the html.\nMany sites have dropped support for this tag though. We could add special cases for\n\n- YouTube\n- Wordpress blogs\n\nAs it's easy to determine the feed location\n\n## How Winds handles uniqueness ##\n\nFor every feed Winds will evaluate which one of these fields are unique:\n\n['guid', 'link', 'enclosure[0].url', 'hash']\n\nNote that the hash is computed before any enrichment is done on the feed content.\nAfter that it stores the unique value in `article.fingerprint` in the format `guid:123` or `hash:123` etc.\nAfter selecting the best algorithm it will use a batch select and update to update the feed articles.\n\nThe uniqueness of the last 20 articles is used to compute a hash for the RSS feed.\nWe use this information to occasionally merge RSS feeds.\nAfter merging the alternative URLs are stored to prevent people from submitting the same feed under a different url.\n"
        },
        {
          "name": "STYLE.md",
          "type": "blob",
          "size": 0.236328125,
          "content": "The style rules for Winds are defined in:\n\n*   .prettierrc\n*   .eslintrc\n\nTo cleanup your code run\n\n`yarn prettier` in the api directory\n\nIf you're using atom be sure to install prettier-atom and make sure it finds our prettierrc config file\n"
        },
        {
          "name": "api",
          "type": "tree",
          "content": null
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "process_dev.json",
          "type": "blob",
          "size": 1.1005859375,
          "content": "{\n\t\"apps\": [\n\t\t{\n\t\t\t\"name\": \"api\",\n\t\t\t\"cwd\": \"api\",\n\t\t\t\"exec_interpreter\": \"./node_modules/.bin/babel-node\",\n\t\t\t\"script\": \"./src/server.js\",\n\t\t\t\"watch\": true\n\t\t},\n\t\t{\n\t\t\t\"name\": \"conductor\",\n\t\t\t\"cwd\": \"api\",\n\t\t\t\"exec_interpreter\": \"./node_modules/.bin/babel-node\",\n\t\t\t\"script\": \"./src/workers/conductor.js\",\n\t\t\t\"watch\": true\n\t\t},\n\t\t{\n\t\t\t\"name\": \"stream\",\n\t\t\t\"cwd\": \"api\",\n\t\t\t\"exec_interpreter\": \"./node_modules/.bin/babel-node\",\n\t\t\t\"script\": \"./src/workers/stream.js\",\n\t\t\t\"watch\": true\n\t\t},\n\t\t{\n\t\t\t\"name\": \"social\",\n\t\t\t\"cwd\": \"api\",\n\t\t\t\"exec_interpreter\": \"./node_modules/.bin/babel-node\",\n\t\t\t\"script\": \"./src/workers/social.js\",\n\t\t\t\"watch\": true\n\t\t},\n\t\t{\n\t\t\t\"name\": \"rss\",\n\t\t\t\"cwd\": \"api\",\n\t\t\t\"exec_interpreter\": \"./node_modules/.bin/babel-node\",\n\t\t\t\"script\": \"./src/workers/rss.js\",\n\t\t\t\"watch\": true\n\t\t},\n\t\t{\n\t\t\t\"name\": \"podcast\",\n\t\t\t\"cwd\": \"api\",\n\t\t\t\"exec_interpreter\": \"./node_modules/.bin/babel-node\",\n\t\t\t\"script\": \"./src/workers/podcast.js\",\n\t\t\t\"watch\": true\n\t\t},\n\t\t{\n\t\t\t\"name\": \"og\",\n\t\t\t\"cwd\": \"api\",\n\t\t\t\"exec_interpreter\": \"./node_modules/.bin/babel-node\",\n\t\t\t\"script\": \"./src/workers/og.js\",\n\t\t\t\"watch\": true\n\t\t}\n\t]\n}\n"
        },
        {
          "name": "process_prod.json",
          "type": "blob",
          "size": 0.1064453125,
          "content": "{\n\t\"apps\": [\n\t\t{\n\t\t\t\"name\": \"api\",\n\t\t\t\"cwd\": \"api/dist\",\n\t\t\t\"script\": \"server.js\",\n\t\t\t\"watch\": true\n\t\t}\n\t]\n}\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}