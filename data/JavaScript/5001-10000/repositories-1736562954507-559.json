{
  "metadata": {
    "timestamp": 1736562954507,
    "page": 559,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "clinicjs/node-clinic",
      "stars": 5726,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.001953125,
          "content": "# clinic specific\n.clinic\n*.tmp\n!test/fixtures/**/*.clinic-*\ntest/fixtures/**/ASK_MESSAGE\n\n# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Bower dependency directory (https://bower.io/)\nbower_components\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (https://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\n/node_modules\n\n# Typescript v1 declaration files\ntypings/\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Optional REPL history\n.node_repl_history\n\n# Output of 'npm pack'\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# dotenv environment variables file\n.env\n\n# Visual studio code\n.vscode\n# IntelliJ Idea\n.idea\n\n# ctags\ntags\n"
        },
        {
          "name": ".npmrc",
          "type": "blob",
          "size": 0.0185546875,
          "content": "package-lock=false\n"
        },
        {
          "name": ".taprc",
          "type": "blob",
          "size": 0.0595703125,
          "content": "timeout: 0\nfunctions: 95\nbranches: 95\nstatements: 95\njobs: 1\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.2177734375,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n  advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at [report@clinicjs.org][clinic]. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[clinic]: mailto:report@clinicjs.org\n[homepage]: https://www.contributor-covenant.org\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.41015625,
          "content": "# Welcome to Clinic.js!\n\nPlease take a second to read over this before opening an issue. Providing complete information upfront will help us address any issue (and ship new features!) faster.\n\nWe greatly appreciate bug fixes, documentation improvements and new features, however when contributing a new major feature, it is a good idea to idea to first open an issue, to make sure the feature it fits with the goal of the project, so we don't waste your or our time.\n\n## Code of Conduct\n\nThe Clinic.js project has a [Code of Conduct][CoC] that all contributors are\nexpected to follow.\n\n## Bug Reports\n\nA perfect bug report would have the following:\n\n1. Summary of the issue you are experiencing.\n2. Details on what versions of node and Clinic.js you have (`node -v` and `clinic -v`).\n3. A simple repeatable test case for us to run. Please try to run through it 2-3 times to ensure it is completely repeatable.\n\nWe would like to avoid issues that require a follow up questions to identify the bug. These follow ups are difficult to do unless we have a repeatable test case.\n\n## For Developers\n\nAll contributions should fit the [standard](https://github.com/standard/standard) linter, and pass the tests.\nYou can test this by running:\n\n```\nnpm test\n```\n\nIn addition, make sure to add tests for any new features.\nYou can test the test coverage by running:\n\n```\nnpm run ci-cov\n```\n\n## For Collaborators\n\nMake sure to get a `:thumbsup:`, `+1` or `LGTM` from another collaborator before merging a PR. If you aren't sure if a release should happen, open an issue.\n\nRelease process:\n\n- `npm test`\n- `npm version <major|minor|patch>`\n- `git push && git push --tags`\n- `npm publish`\n\n-----------------------------------------\n\n## Licensing and Certification\n\nAll contributions to the Clinic.js project are submitted *to* the\nproject under the MIT license.\n\nThe Clinic.js project uses a Contribution Certification that is derived from\nthe [Developer Certificate of Origin][DCO]. It is important to note that the\nContribution Certification *is not the same as the standard DCO* and we do not\nuse the term \"DCO\" or \"Developer Certificate of Origin\" to describe it to avoid\nconfusion. Nevertheless, the intent and purpose is effectively the same.\n\nEvery contributor agrees to the Contribution Certification by including a\n`Signed-off-by` statement within each commit. The statement *must* include\nthe contributor's real full name and email address.\n\n```\nSigned-off-by: J. Random User <j.random.user@example.com>\n```\n\n### Certification\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I have the right\nto and hereby submit it under the MIT license; or\n\n(b) The contribution is based upon previous work that, to the best of my\nknowledge, is covered under an appropriate open source license and I have the\nright under that license to submit that work with modifications, whether created\nin whole or in part by me, under the MIT License; or\n\n(c) The contribution was provided directly to me by some other person who\ncertified (a), (b) or (c) and I have not modified it.\n\n(d) I understand and agree that this project and the contribution are public\nand that a record of the contribution (including all personal information I\nsubmit with it, including my sign-off) is maintained indefinitely and may be\nredistributed consistent with this project or license(s) involved.\n\n[CoC]: CODE_OF_CONDUCT.md\n[DCO]: https://developercertificate.org/\n"
        },
        {
          "name": "ISSUE_TEMPLATE.md",
          "type": "blob",
          "size": 0.9814453125,
          "content": "## Expected Behavior\n<!--- If you're describing a bug, tell us what should happen -->\n<!--- If you're suggesting a change/improvement, tell us how it should work -->\n\n## Current Behavior\n<!--- If describing a bug, tell us what happens instead of the expected behavior -->\n<!--- If suggesting a change/improvement, explain the difference from current behavior -->\n\n## Steps to Reproduce (for bugs)\n<!--- Provide an unambiguous set of steps to reproduce this bug -->\n1.\n2.\n3.\n4.\n\n## Sample upload\n<!--- Please `clinic upload` your generated sample and paste the link here -->\n\n## Environment\n<!--- Check with `clinic -v` and `clinic doctor -v` -->\n<!--- e.g. Clinic.js v0.8.1 Doctor v2.4.1 -->\n* Clinic.js version:\n\n<!--- Check with `node -v` and `npm -v` -->\n<!--- e.g. Node v10.2.1 npm v6.0.1 -->\n* Node.js version:\n\n<!--- See https://whatbrowser.org/ -->\n<!--- e.g. Chrome 67 -->\n* Browser name and version:\n\n<!--- See http://whatsmyos.com/ -->\n<!--- e.g. OSX 10.11.5 -->\n* Operating system and version:\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.048828125,
          "content": "Copyright (C) NearForm and Clinic.js Contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.0576171875,
          "content": "# Clinic.js\n\n> [!NOTE]  \n> Clinic.js is not being actively maintained. Due to its strong ties to Node.js internals, it may not work or the results you get may not be accurate.\n\n[![Greenkeeper badge](https://badges.greenkeeper.io/nearform/node-clinic.svg)](https://greenkeeper.io/)\n[![npm version][npm-version]][npm-url] [![Stability Stable][stability-stable]][stability-docs] [![Azure build status][azure-status]][azure-url]\n[![Downloads][npm-downloads]][npm-url] [![Code style][lint-standard]][lint-standard-url]\n\nAn Open Source Node.js performance profiling suite originally developed by [NearForm][].\n\nDemo and detailed documentation: https://clinicjs.org/\n\n## Install\n\n```\nnpm install -g clinic\n```\n\n<br />\n\n![Screenshots](tools.gif)\n\n## Getting started\n\nAs a first step, run the `clinic doctor`:\n\n`clinic doctor -- node server.js`\n\nThen benchmark your server with `wrk` or `autocannon`:\n\n```\nwrk http://localhost:3000\nautocannon http://localhost:3000\n```\n\nIf you want to run autocannon as soon as your server starts listening you can\nuse the `--autocannon` option using [subarg][] syntax.\n\n```sh\nclinic doctor --autocannon [ / --method POST ] -- node server.js\n```\n\nOther benchmarking tools like wrk can be started in a similar way using the `--on-port` flag\n\n```sh\n# $PORT is the port the server is listening on\nclinic doctor --on-port 'wrk http://localhost:$PORT' -- node server.js\n```\n\nFinally shut down your server (Ctrl+C). Once the server process has shutdown\n`clinic doctor` will analyse the collected data and detect what type of issue\nyou are having. Based on the issue type, it will provide a recommendation for\nyou.\n\nFor example, to debug I/O issues, use `clinic bubbleprof`:\n\n```\nclinic bubbleprof -- node server.js\n```\n\nThen benchmark your server again, just like you did with `clinic doctor`.\n\nNote that when looking at the CPU graph you might notice that it doesn't\nnecessarily go from 0-100 but might go from 0-200 or higher. This is because the\npercentage reflects the total amount of CPU cores your computer has. Node.js\nitself uses more than one thread behind the scene even though JavaScript is\nsingle threaded. V8 (The JavaScript engine) runs the garbage collector and some\noptimizations on background threads. With worker threads, the CPU will also\nutilize more than 100%. The visible percentage is always the combination of all\nthese factors together.\n\n__NOTE__: Exiting the process forcefully can result in wrong or no generation of log files.\n\n### Windows + PowerShell\n\nIn order to diagnose your application with node clinic, you should execute your application after double hyphens(`--`),\ne.g: `clinic doctor -- node myapplication.js`.\n\nOn Windows using PowerShell as terminal the above statement might not work because PowerShell parses everything after `--`\nas literal arguments instead of options.\n\nTo avoid that behavior you can either quote (\"--\", '--') or escape (`--`) the double hyphens.\n\n## Supported Node.js versions\n\nClinic.js relies heavily on Node.js core instrumentation available in later versions.\nCurrently the supported Node.js versions are `>= 16`.\n\n## Examples and Demos\n\n- [A set of simple Doctor examples](https://github.com/clinicjs/node-clinic-doctor-examples)\n- [A set of simple Bubbleprof examples](https://github.com/clinicjs/node-clinic-bubbleprof-examples)\n- [A MongoDB-based Bubbleprof demo/example](https://github.com/clinicjs/node-clinic-bubbleprof-demo)\n- [A Flame demo/example](https://github.com/clinicjs/node-clinic-flame-demo)\n\n## Report an issue\n\nIf you encounter any issue, feel free to send us an issue report at:\n\n```\nhttps://github.com/clinicjs/node-clinic/issues\n```\n\n## More information\n\nFor more information use the `--help` option:\n\n```\nclinic doctor --help\nclinic bubbleprof --help\nclinic flame --help\nclinic heapprofiler --help\n```\n\n- The `doctor` functionality is provided by [Clinic.js Doctor](https://github.com/clinicjs/node-clinic-doctor).\n- The `bubbleprof` functionality is provided by [Clinic.js Bubbleprof](https://github.com/clinicjs/node-clinic-bubbleprof).\n- The `flame` functionality is provided by [Clinic.js Flame](https://github.com/clinicjs/node-clinic-flame).\n- The `heapprofiler` functionality is provided by [Clinic.js Heap Profiler](https://github.com/clinicjs/node-clinic-heap-profiler).\n\n## Flags\n\n```\n-h | --help                Display Help\n-v | --version             Display Version\n--collect-only             Do not process data on termination\n--visualize-only datapath  Build or rebuild visualization from data\n--on-port                  Run a script when the server starts listening on a port.\n--autocannon               Run the autocannon benchmarking tool when the server starts listening on a port.\n--dest                     Destination for the collect data (default .).\n--stop-delay               Add a delay to close the process when a job is done through either `autocannon` or `on-port` flag (milliseconds)\n--name                     The --name flag sets a name for the output data, allowing you to replace existing reports without generating new ones. Example: <code>.clinic/node-19-test.clinic-flame</code>\n```\n\n## Programmable Interfaces\n\nEach of the tools has a programmable interface which you can read about in their repos.\n\n- [Clinic.js Doctor](https://github.com/clinicjs/node-clinic-doctor)\n- [Clinic.js Bubbleprof](https://github.com/clinicjs/node-clinic-bubbleprof)\n- [Clinic.js Flame](https://github.com/clinicjs/node-clinic-flame)\n- [Clinic.js Heap Profiler](https://github.com/clinicjs/node-clinic-heap-profiler)\n\n## Profiling In [Podman](https://podman.io/) Container\n_Applicable for `doctor`, `bubbleprof`, `flame` or `heapprofiler`_\n\nIn case you profile your application inside of container environment using [podman](https://podman.io/) (docker alternative).\nAnd you start profling by providing `CMD` step in the dockerfile.\n```\nCMD clinic flame -- node index.js\n```\nThen when you run container it exits immediately with `0` code.\nIt is caused by a [question to collect anonymous usage statistics](https://github.com/clinicjs/node-clinic/issues/79#issuecomment-1226515723).\n\nA workaround is to use environment variable `NO_INSIGHT` with any value.\nIn this case the question to collect anonymous usage statistics is suppressed. Thus profinling and application server start as expected.\n```\nCMD NO_INSIGHT=true clinic flame -- node index.js\n```\n\n## License\n\n[MIT](LICENSE)\n\n[stability-stable]: https://img.shields.io/badge/stability-stable-green.svg?style=flat-square\n[stability-docs]: https://nodejs.org/api/documentation.html#documentation_stability_index\n[npm-version]: https://img.shields.io/npm/v/clinic.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/clinic\n[npm-downloads]: http://img.shields.io/npm/dm/clinic.svg?style=flat-square\n[lint-standard]: https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat-square\n[lint-standard-url]: https://github.com/feross/standard\n[azure-status]: https://dev.azure.com/node-clinic/node-clinic/_apis/build/status/nearform.node-clinic\n[azure-url]: https://dev.azure.com/node-clinic/node-clinic/_build/latest?definitionId=1?branchName=master\n[nearform]: https://www.nearform.com\n[subarg]: https://npmjs.com/package/subarg\n"
        },
        {
          "name": "bin.js",
          "type": "blob",
          "size": 13.181640625,
          "content": "#! /usr/bin/env node\n\n'use strict'\n\nconst fs = require('fs')\nconst path = require('path')\nconst url = require('url')\nconst open = require('open')\nconst ora = require('ora')\nconst shellEscape = require('any-shell-escape')\nconst commist = require('commist')\nconst minimist = require('minimist')\nconst subarg = require('subarg')\nconst dargs = require('dargs')\nconst execspawn = require('execspawn')\nconst envString = require('env-string')\nconst xargv = require('cross-argv')\nconst crypto = require('crypto')\nconst Insight = require('insight')\nconst updateNotifier = require('update-notifier')\nconst { promisify } = require('util')\nconst pkg = require('./package.json')\nconst helpFormatter = require('./lib/help-formatter.js')\nconst clean = require('./lib/clean.js')\n\nconst GA_TRACKING_CODE = 'UA-29381785-8'\nconst DEFAULT_DEST = '.clinic'\n\nconst insight = new Insight({\n  trackingCode: GA_TRACKING_CODE,\n  pkg\n})\n\n/* istanbul ignore else: Always used in tests to avoid polluting data */\nif ('NO_INSIGHT' in process.env) {\n  Object.defineProperty(insight, 'optOut', {\n    get: () => true\n  })\n}\n\ncheckForUpdates()\n\nconst result = commist()\n  .register('clean', function (argv) {\n    const args = minimist(argv, {\n      alias: {\n        help: 'h'\n      }\n    })\n\n    if (args.help) {\n      printHelp('clinic-clean')\n    } else {\n      // support --path to support failure testing\n      clean(args.path || '.', function (err) {\n        if (err) throw err\n      })\n    }\n  })\n  .register('doctor', catchify(async function (argv) {\n    const version = require('@clinic/doctor/package.json').version\n\n    const args = subarg(argv, {\n      alias: {\n        help: 'h',\n        version: 'v'\n      },\n      boolean: [\n        'help',\n        'version',\n        'collect-only',\n        'open',\n        'debug'\n      ],\n      string: [\n        'visualize-only',\n        'sample-interval',\n        'on-port',\n        'dest',\n        'stop-delay',\n        'name'\n      ],\n      default: {\n        'sample-interval': '10',\n        open: true,\n        debug: false,\n        dest: DEFAULT_DEST\n      },\n      '--': true\n    })\n\n    if (args.version) {\n      printVersion(version)\n    } else if (args.help) {\n      printHelp('clinic-doctor', version)\n    } else if (args['visualize-only'] || args['--'].length > 1) {\n      checkArgs('doctor', args, 'clinic-doctor', version)\n      await trackTool('doctor', args, version)\n      await runTool('doctor', require('@clinic/doctor'), version, args, { color: 'green' })\n    } else {\n      printHelp('clinic-doctor', version)\n      process.exit(1)\n    }\n  }))\n  .register('bubbleprof', catchify(async function (argv) {\n    const version = require('@clinic/bubbleprof/package.json').version\n\n    const args = subarg(argv, {\n      alias: {\n        help: 'h',\n        version: 'v'\n      },\n      boolean: [\n        'help',\n        'version',\n        'collect-only',\n        'open',\n        'debug'\n      ],\n      string: [\n        'visualize-only',\n        'dest',\n        'stop-delay',\n        'name'\n      ],\n      default: {\n        open: true,\n        debug: false,\n        dest: DEFAULT_DEST\n      },\n      '--': true\n    })\n\n    if (args.version) {\n      printVersion(version)\n    } else if (args.help) {\n      printHelp('clinic-bubbleprof', version)\n    } else if (args['visualize-only'] || args['--'].length > 1) {\n      checkArgs('bubbleprof', args, 'clinic-bubbleprof', version)\n      await trackTool('bubbleprof', args, version)\n      await runTool('bubbleprof', require('@clinic/bubbleprof'), version, args, { color: 'blue' })\n    } else {\n      printHelp('clinic-bubbleprof', version)\n      process.exit(1)\n    }\n  }))\n  .register('flame', catchify(async function (argv) {\n    const version = require('@clinic/flame/version')\n\n    const args = subarg(argv, {\n      alias: {\n        help: 'h',\n        version: 'v'\n      },\n      boolean: [\n        'help',\n        'version',\n        'collect-only',\n        'open',\n        'debug',\n        'kernel-tracing'\n      ],\n      string: [\n        'visualize-only',\n        'dest',\n        'stop-delay',\n        'name'\n      ],\n      default: {\n        open: true,\n        debug: false,\n        dest: DEFAULT_DEST\n      },\n      '--': true\n    })\n\n    if (args.version) {\n      printVersion(version)\n    } else if (args.help) {\n      printHelp('clinic-flame', version)\n    } else if (args['visualize-only'] || args['--'].length > 1) {\n      checkArgs('flame', args, 'clinic-flame', version)\n      await trackTool('flame', args, version)\n      await runTool('flame', require('@clinic/flame'), version, args, { color: 'yellow' })\n    } else {\n      printHelp('clinic-flame', version)\n      process.exit(1)\n    }\n  }))\n  .register('heapprofiler', catchify(async function (argv) {\n    const version = require('@clinic/heap-profiler/package.json').version\n\n    const args = subarg(argv, {\n      alias: {\n        help: 'h',\n        version: 'v'\n      },\n      boolean: [\n        'help',\n        'version',\n        'collect-only',\n        'open',\n        'debug'\n      ],\n      string: [\n        'visualize-only',\n        'dest',\n        'stop-delay',\n        'name'\n      ],\n      default: {\n        open: true,\n        debug: false\n      },\n      '--': true\n    })\n\n    if (args.version) {\n      printVersion(version)\n    } else if (args.help) {\n      printHelp('clinic-heap-profiler', version)\n    } else if (args['visualize-only'] || args['--'].length > 1) {\n      checkArgs('heap-profiler', args, 'clinic-heap-profiler', version)\n      await trackTool('heap-profiler', args, version)\n      await runTool('heap-profiler', require('@clinic/heap-profiler'), version, args, { color: 'yellow' })\n    } else {\n      printHelp('clinic-heap-profiler', version)\n      process.exit(1)\n    }\n  }))\n  .parse(xargv(process.argv.slice(2)))\n\n// not `clinic doctor`, `clinic flame`, and not `clinic bubbleprof`\nif (result !== null) {\n  const version = require('./package.json').version\n  const args = minimist(process.argv.slice(1), {\n    alias: {\n      help: 'h',\n      version: 'v'\n    },\n    boolean: [\n      'help',\n      'version'\n    ]\n  })\n\n  if (args.version) {\n    printVersion(version)\n  } else if (args.help) {\n    printHelp('clinic', version)\n  } else {\n    printHelp('clinic', version)\n    process.exit(1)\n  }\n}\n\nfunction catchify (asyncFn) {\n  return function (...args) {\n    asyncFn(...args).catch((err) => {\n      console.error(err.stack)\n      process.exit(1)\n    })\n  }\n}\n\nfunction checkArgs (toolname, args, help, version) {\n  if (args['--'] && args['--'].length >= 1 && !/^node(\\.exe)?$/.test(path.basename(args['--'][0]))) {\n    console.error(`Clinic.js must be called with a \\`node\\` command line: \\`clinic ${toolname} -- node script.js\\`\\n`)\n\n    printHelp(help, version)\n    process.exit(1)\n  }\n}\n\nfunction checkMetricsPermission (cb) {\n  /* istanbul ignore if: tracking intentionally disabled when running tests */\n  if (insight.optOut === undefined) {\n    return promisify(insight.askPermission).call(\n      insight,\n      'May Clinic.js report anonymous usage statistics to improve the tool over time?'\n    )\n  }\n  return Promise.resolve()\n}\n\nasync function trackTool (toolName, args, toolVersion) {\n  let action = 'run'\n  if (args['visualize-only']) {\n    action = 'visualize-only'\n  } else if (args['collect-only']) {\n    action = 'collect-only'\n  }\n\n  await checkMetricsPermission()\n  insight.track(toolName, action)\n  insight.trackEvent({\n    category: toolName,\n    action,\n    label: toolVersion\n  })\n}\n\nasync function runTool (toolName, Tool, version, args, uiOptions) {\n  const autocannonOpts = typeof args.autocannon === 'string'\n    // --autocannon /url\n    ? { _: [args.autocannon] }\n    // --autocannon [ /url -m POST --flags... ]\n    : args.autocannon\n  const autocannonPath = require.resolve('autocannon')\n\n  const onPort = autocannonOpts\n    ? `node ${shellEscape(autocannonPath)} ${shellEscape(dargs(autocannonOpts))}`\n    : args['on-port']\n\n  if (!onPort && !args['visualize-only']) {\n    if (args['collect-only']) {\n      console.log('To stop data collection press: Ctrl + C')\n    } else {\n      console.log('To generate the report press: Ctrl + C')\n    }\n  }\n\n  const openLocalFile = args.open\n\n  const tool = new Tool({\n    sampleInterval: parseInt(args['sample-interval'], 10),\n    detectPort: !!onPort,\n    dest: args.dest,\n    debug: args.debug,\n    kernelTracing: args['kernel-tracing'],\n    name: args.name\n  })\n\n  const stopDelayMs = parseInt(args['stop-delay'])\n\n  const spinner = ora({\n    text: 'Analysing data',\n    color: uiOptions.color,\n    stream: process.stdout,\n    spinner: 'bouncingBar'\n  })\n\n  /* istanbul ignore next */\n  tool.on('warning', function (warning) {\n    console.log('Warning: ' + warning)\n  })\n\n  tool.on('port', function (port, proc, cb) {\n    process.env.PORT = port\n    // inline the PORT env to make it easier for cross platform usage\n    execspawn(envString(onPort, { PORT: port }), { stdio: 'inherit' })\n      .on('exit', () => {\n        if (stopDelayMs) {\n          tool.emit('status', 'Waiting to close the process')\n          if (spinner.isEnabled && !spinner.isSpinning) spinner.start()\n          setTimeout(() => cb(), stopDelayMs)\n        } else {\n          cb()\n        }\n      })\n  })\n\n  tool.on('analysing', function (message = 'Analysing data') {\n    /* istanbul ignore if: isEnabled is always false when spawn process. See: https://github.com/sindresorhus/ora#isenabled */\n    if (spinner.isEnabled) {\n      spinner.text = message\n      if (!spinner.isSpinning) {\n        spinner.start()\n      }\n    } else {\n      console.log(message)\n    }\n  })\n  tool.on('status', status)\n\n  function status (message) {\n    /* istanbul ignore next: isEnabled is always false when spawn process. See: https://github.com/sindresorhus/ora#isenabled */\n    if (spinner.isEnabled) {\n      spinner.text = message\n    } else {\n      console.log(message)\n    }\n  }\n\n  /* istanbul ignore next: SIGINT by spawned process is tricky */\n  function onsigint () {\n    status('Received Ctrl+C, closing process...')\n    if (!spinner.isSpinning) spinner.start()\n  }\n\n  let defer\n  const promise = new Promise((resolve, reject) => {\n    defer = { resolve, reject }\n  })\n\n  if (args['collect-only']) {\n    process.once('SIGINT', onsigint)\n    tool.collect(args['--'], function (err, filename) {\n      if (err) return defer.reject(err)\n      /* istanbul ignore if: isEnabled is always false when spawn process. See: https://github.com/sindresorhus/ora#isenabled */\n      if (spinner.isEnabled) {\n        spinner.stop()\n        spinner.stream.write(`${spinner.text}\\n`)\n      }\n\n      defer.resolve({ data: filename })\n    })\n  } else if (args['visualize-only']) {\n    const dataPath = args['visualize-only'].replace(/[\\\\/]$/, '')\n    viz(toolName, dataPath, function (err) {\n      if (err) return defer.reject(err)\n\n      defer.resolve({ data: dataPath, visualizer: `${dataPath}.html` })\n    })\n  } else {\n    process.once('SIGINT', onsigint)\n    tool.collect(args['--'], function (err, filename) {\n      if (err) return defer.reject(err)\n\n      viz(toolName, filename, function (err) {\n        if (err?.code === 'ENOENT' && err?.message.includes('processstat')) return defer.reject(new Error('Process forcefully closed before processstat file generation'))\n        if (err) return defer.reject(err)\n        /* istanbul ignore if: isEnabled is always false when spawn process. See: https://github.com/sindresorhus/ora#isenabled */\n        if (spinner.isEnabled) {\n          spinner.stop()\n          spinner.stream.write(`${spinner.text}\\n`)\n        }\n\n        // open HTML file in default browser\n        /* istanbul ignore if: we don't want to open a browser in `npm test` */\n        if (openLocalFile) {\n          open('file://' + path.resolve(filename + '.html'), { wait: false })\n        }\n\n        defer.resolve({ data: filename, visualizer: `${filename}.html` })\n      })\n    })\n  }\n\n  const outputs = await promise\n\n  if (outputs.visualizer) {\n    console.log(`Generated HTML file is ${url.pathToFileURL(outputs.visualizer)}`)\n  } else {\n    console.log(`Output file is ${outputs.data}`)\n  }\n\n  // rest is util functions\n\n  function viz (toolName, filename, cb) {\n    // Before getting to the tool, make sure the filename exists. We don't care whether is a file or a directory.\n    fs.access(filename, function (err) {\n      if (err) {\n        return cb(new Error('No data found.'))\n      }\n\n      const html = filename + '.html'\n      tool.visualize(filename, html, function (err) {\n        if (err) return cb(err)\n        hash(html, function (err, h) {\n          /* istanbul ignore next */ if (err) return cb(err)\n\n          const info = {\n            tool: toolName,\n            toolVersion: version,\n            hash: h.toString('hex')\n          }\n\n          fs.appendFile(html, `<!-- ${JSON.stringify(info)} -->\\n`, cb)\n        })\n      })\n    })\n  }\n}\n\nfunction hash (filename, cb) {\n  const sha = crypto.createHash('sha512')\n  sha.update('clinic\\n')\n  fs.createReadStream(filename)\n    .on('data', data => sha.update(data))\n    .on('end', () => cb(null, sha.digest()))\n    .on('error', cb)\n}\n\nfunction printVersion (version) {\n  console.log('v' + version)\n}\n\nfunction printHelp (name, version) {\n  const filepath = path.resolve(__dirname, 'docs', name + '.txt')\n  const usage = helpFormatter(fs.readFileSync(filepath), version)\n  console.log(usage)\n}\n\nfunction checkForUpdates () {\n  updateNotifier({\n    pkg\n  }).notify({\n    isGlobal: true,\n    defer: false\n  })\n}\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.482421875,
          "content": "{\n  \"name\": \"clinic\",\n  \"description\": \"Clinic.js diagnoses your performance issues\",\n  \"repository\": \"clinicjs/node-clinic\",\n  \"version\": \"13.0.0\",\n  \"bin\": {\n    \"clinic\": \"bin.js\"\n  },\n  \"scripts\": {\n    \"test\": \"standard | snazzy && tap --no-cov test/*.test.js\",\n    \"test-local\": \"standard | snazzy && tap --no-cov test/*.test.js test-local/*.test.js\",\n    \"ci-lint\": \"standard | snazzy\",\n    \"ci-test-no-cov\": \"tap --no-cov test/*.test.js\",\n    \"ci-test-cov\": \"tap test/*.test.js\",\n    \"lint\": \"standard --fix | snazzy\"\n  },\n  \"dependencies\": {\n    \"@clinic/bubbleprof\": \"^10.0.0\",\n    \"@clinic/doctor\": \"^11.0.0\",\n    \"@clinic/flame\": \"^13.0.0\",\n    \"@clinic/heap-profiler\": \"^5.0.0\",\n    \"any-shell-escape\": \"^0.1.1\",\n    \"async\": \"^3.0.1\",\n    \"autocannon\": \"^7.5.0\",\n    \"commist\": \"^1.0.0\",\n    \"cross-argv\": \"^1.0.0\",\n    \"dargs\": \"^7.0.0\",\n    \"env-string\": \"^1.0.1\",\n    \"execspawn\": \"^1.0.1\",\n    \"insight\": \"^0.11.1\",\n    \"minimist\": \"^1.2.0\",\n    \"open\": \"^7.3.0\",\n    \"ora\": \"^5.1.0\",\n    \"rimraf\": \"^3.0.0\",\n    \"stream-collector\": \"^1.0.1\",\n    \"subarg\": \"^1.0.0\",\n    \"update-notifier\": \"^5.0.1\"\n  },\n  \"devDependencies\": {\n    \"proxyquire\": \"^2.1.0\",\n    \"snazzy\": \"^9.0.0\",\n    \"standard\": \"^17.0.0\",\n    \"tap\": \"^16.0.0\",\n    \"tar-stream\": \"^3.0.0\"\n  },\n  \"keywords\": [\n    \"performance\",\n    \"tool\",\n    \"analysis\",\n    \"clinic\",\n    \"bubbleprof\",\n    \"doctor\",\n    \"flamegraph\",\n    \"flame\",\n    \"heap\",\n    \"memory\",\n    \"memory leak\",\n    \"profiler\",\n    \"bubble\"\n  ],\n  \"license\": \"MIT\"\n}\n"
        },
        {
          "name": "test-local",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools.gif",
          "type": "blob",
          "size": 1846.7548828125,
          "content": null
        }
      ]
    }
  ]
}