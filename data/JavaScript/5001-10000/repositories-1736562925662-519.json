{
  "metadata": {
    "timestamp": 1736562925662,
    "page": 519,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "angular-app/angular-app",
      "stars": 5852,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0185546875,
          "content": ".idea\nnode_modules\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.32421875,
          "content": " language: node_js\n node_js:\n   - \"0.10\"\n\n before_script:\n  - export DISPLAY=:99.0\n  - sh -e /etc/init.d/xvfb start\n  - npm install -g grunt-cli@0.1.x karma@0.8.x\n  - cd server\n  - npm install --quiet\n  - node server.js &\n  - sleep 3 # give server some time to start\n  - cd ../client\n  - npm install --quiet\n\n script: grunt release\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.072265625,
          "content": "The MIT License\n\nCopyright (c) 2012 Pawel Kozlowski & Peter Bacon Darwin\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.6982421875,
          "content": "[![Build Status](https://secure.travis-ci.org/angular-app/angular-app.png)](http://travis-ci.org/angular-app/angular-app)\n\n# [AngularJS](http://www.angularjs.org/) CRUD application demo\n\n***\n\n## Purpose\n\nThe idea is to **demonstrate how to write a typical, non-trivial CRUD application using AngularJS**. To showcase AngularJS in its most advantageous environment we've set out to write a simplified project management tool supporting teams using the SCRUM methodology. The sample application tries to show best practices when it comes to: folders structure, using modules, testing, communicating with a REST back-end, organizing navigation, addressing security concerns (authentication / authorization).\n\nThis sample application is featured in our [book](http://goo.gl/gKEsIo) where you can find detailed description of the patterns and techniques used to write this code:\n\n<a href=\"http://goo.gl/gKEsIo\"><img src=\"http://www.packtpub.com/sites/default/files/1820OS.jpg\"></a>\n\nWe've learned a lot while using and supporting AngularJS on the [mailing list](https://groups.google.com/group/angular) and would like to share our experience.\n\n## Stack\n\n* Persistence store: [MongoDB](http://www.mongodb.org/) hosted on [MongoLab](https://mongolab.com/)\n* Backend: [Node.js](http://nodejs.org/)\n* Awesome [AngularJS](http://www.angularjs.org/) on the client\n* CSS based on [Twitter's bootstrap](http://getbootstrap.com/)\n\n### Build\n\nIt is a complete project with a build system focused on AngularJS apps and tightly integrated with other tools commonly used in the AngularJS community:\n* powered by [Grunt.js](http://gruntjs.com/)\n* test written using [Jasmine](http://jasmine.github.io/) syntax\n* test are executed by [Karma Test Runner](http://karma-runner.github.io/0.8/index.html) (integrated with the Grunt.js build)\n* build supporting JS, CSS and AngularJS templates minification\n* [Twitter's bootstrap](http://getbootstrap.com/) with LESS templates processing integrated into the build\n* [Travis-CI](https://travis-ci.org/) integration\n\n## Installation\n\n### Platform & tools\n\nYou need to install Node.js and then the development tools. Node.js comes with a package manager called [npm](http://npmjs.org) for installing NodeJS applications and libraries.\n* [Install node.js](http://nodejs.org/download/) (requires node.js version >= 0.8.4)\n* Install Grunt-CLI and Karma as global npm modules:\n\n    ```\n    npm install -g grunt-cli karma\n    ```\n\n(Note that you may need to uninstall grunt 0.3 globally before installing grunt-cli)\n\n### Get the Code\n\nEither clone this repository or fork it on GitHub and clone your fork:\n\n```\ngit clone https://github.com/angular-app/angular-app.git\ncd angular-app\n```\n\n### App Server\n\nOur backend application server is a NodeJS application that relies upon some 3rd Party npm packages.  You need to install these:\n\n* Install local dependencies (from the project root folder):\n\n    ```\n    cd server\n    npm install\n    cd ..\n    ```\n\n  (This will install the dependencies declared in the server/package.json file)\n\n### Client App\n\nOur client application is a straight HTML/Javascript application but our development process uses a Node.js build tool\n[Grunt.js](gruntjs.com). Grunt relies upon some 3rd party libraries that we need to install as local dependencies using npm.\n\n* Install local dependencies (from the project root folder):\n\n    ```\n    cd client\n    npm install\n    cd ..\n    ```\n\n  (This will install the dependencies declared in the client/package.json file)\n\n## Building\n\n### Configure Server\nThe server stores its data in a MongoLab database.\n* Create an account at MongoLab - it's free: [https://mongolab.com/signup/].\n* Create a database to use for this application: [https://mongolab.com/create]\n* Grab your API key: [https://mongolab.com/user?username=YOUR_USERNAME_HERE]\n* Edit `server/config.js` to set your MongoLab API Key and the name of the database you created.\n\n    ```\n    mongo: {\n        dbUrl: 'https://api.mongolab.com/api/1',    // The base url of the MongoLab DB server\n        apiKey: 'YOUR_API_KEY_HERE',                // Our MongoLab API key\n    },\n    security: {\n        dbName: 'YOUR_DB_NAME_HERE',                // The name of database that contains the security information\n        usersCollection: 'users'                    // The name of the collection contains user information\n    },\n    ```\n\n* Optionally change the name of admin user in `server/lib/initDB.js`.  The default is 'Admin' (admin@abc.com : changeme). \n\n    ```\n    var initDB = {\n      adminUser: { email: 'admin@abc.com', password: 'changeme', admin: true, firstName: 'Admin', lastName: 'User' },\n    });\n    // Note the user information, including password, are stored as plain text in the MongoLab database.\n    ```\n\n* Run our initialization script to initialize the database with a first admin user (admin@abc.com : changeme).\n\n    ```\n    node server/initDB.js\n    ```\n\n### Configure Client\nThe client specifies the name of the MongoDB to use in `client/src/app/app.js`.  If your DB is not called \"ascrum\" then you need to change the MONGOLAB_CONFIG constant:\n\n```\nangular.module('app').constant('MONGOLAB_CONFIG', {\n  baseUrl: '/databases/',\n  dbName: 'ascrum'\n});\n```\n\n### Build the client app\nThe app made up of a number of javascript, css and html files that need to be merged into a final distribution for running.  We use the Grunt build tool to do this.\n* Build client application:\n\n    ```\n    cd client\n    grunt build\n    cd ..\n    ```\n\n*It is important to build again if you have changed the client configuration as above.*\n\n## Running\n### Start the Server\n* Run the server\n\n    ```\n    cd server\n    node server.js\n    cd ..\n    ```\n* Browse to the application at [http://localhost:3000]\n* Login with the admin user as defined in `server/lib/initDB.js`. \n\n## Browser Support\nWe only regularly test against Chrome 29 and occasionally against Firefox and Internet Explorer.\nThe application should run on most modern browsers that are supported by the AngularJS framework.\nObviously, if you chose to base your application on this one, then you should ensure you do your own\ntesting against browsers that you need to support.\n\n## Development\n\n### Folders structure\nAt the top level, the repository is split into a client folder and a server folder.  The client folder contains all the client-side AngularJS application.  The server folder contains a very basic Express based webserver that delivers and supports the application.\nWithin the client folder you have the following structure:\n* `node_modules` contains build tasks for Grunt along with other, user-installed, Node packages\n* `dist` contains build results\n* `src` contains application's sources\n* `test` contains test sources, configuration and dependencies\n* `vendor` contains external dependencies for the application\n\n### Default Build\nThe default grunt task will build (checks the javascript (lint), runs the unit tests (test:unit) and builds distributable files) and run all unit tests: `grunt` (or `grunt.cmd` on Windows).  The tests are run by karma and need one or more browsers open to actually run the tests.\n* `cd client`\n* `grunt`\n* Open one or more browsers and point them to [http://localhost:8080/__test/].  Once the browsers connect the tests will run and the build will complete.\n* If you leave the browsers open at this url then future runs of `grunt` will automatically run the tests against these browsers.\n\n### Continuous Building\nThe watch grunt task will monitor the source files and run the default build task every time a file changes: `grunt watch`.\n\n### Build without tests\nIf for some reason you don't want to run the test but just generate the files - not a good idea(!!) - you can simply run the build task: `grunt build`.\n\n### Building release code\nYou can build a release version of the app, with minified files.  This task will also run the \"end to end\" (e2e) tests.\nThe e2e tests require the server to be started and also one or more browsers open to run the tests.  (You can use the same browsers as for the unit tests.)\n* `cd client`\n* Run `grunt release`\n* Open one or more browsers and point them to [http://localhost:8080/__test/].  Once the browsers connect the tests will run and the build will complete.\n* If you leave the browsers open at this url then future runs of `grunt` will automatically run the tests against these browsers.\n\n### Continuous testing\nYou can have grunt (karma) continuously watch for file changes and automatically run all the tests on every change, without rebuilding the distribution files.  This can make the test run faster when you are doing test driven development and don't need to actually run the application itself.\n\n* `cd client`\n* Run `grunt test-watch`.\n* Open one or more browsers and point them to [http://localhost:8080/__test/].\n* Each time a file changes the tests will be run against each browser.\n"
        },
        {
          "name": "client",
          "type": "tree",
          "content": null
        },
        {
          "name": "server",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}