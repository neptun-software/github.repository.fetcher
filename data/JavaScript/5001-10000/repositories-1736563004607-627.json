{
  "metadata": {
    "timestamp": 1736563004607,
    "page": 627,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "filamentgroup/tablesaw",
      "stars": 5473,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0419921875,
          "content": "node_modules/\n.grunt\ndemo/webpack/bundle.js"
        },
        {
          "name": ".prettierignore",
          "type": "blob",
          "size": 0.0751953125,
          "content": "src/tables.intro.jquery.js\nsrc/tables.intro.shoestring.js\nsrc/tables.outro.js"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.15234375,
          "content": "language: node_js\nnode_js:\n  - 6\nbefore_script:\n  - npm install -g grunt-cli\n  - npm install\nscript: grunt -v\nbranches:\n  except:\n    - gh-pages\nsudo: false"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.6416015625,
          "content": "# Contributing\n\n## Important notes\nPlease don't edit files in the `dist` subdirectory as they are generated via Grunt. You'll find source code in the `src` subdirectory!\n\n### Code style\nRegarding code style like indentation and whitespace, **follow the conventions you see used in the source already.**\n\n### PhantomJS\nWhile Grunt can run the included unit tests via [PhantomJS](http://phantomjs.org/), this shouldn't be considered a substitute for the real thing. Please be sure to test the `test/*.html` unit test file(s) in _actual_ browsers.\n\n## Modifying the code\nFirst, ensure that you have the latest [Node.js](http://nodejs.org/) and [npm](http://npmjs.org/) installed.\n\nTest that Grunt's CLI is installed by running `grunt --version`.  If the command isn't found, run `npm install -g grunt-cli`.  For more information about installing Grunt, see the [getting started guide](http://gruntjs.com/getting-started).\n\n1. Fork and clone the repo.\n1. Run `npm install` to install all dependencies (including Grunt).\n1. Run `grunt` to grunt this project.\n\nAssuming that you don't see any red, you're ready to go. Just be sure to run `grunt` after making any changes, to ensure that nothing is broken.\n\n## Submitting pull requests\n\n1. Create a new branch, please don't work in your `master` branch directly.\n1. Add failing tests for the change you want to make. Run `grunt` to see the tests fail.\n1. Fix stuff.\n1. Run `grunt` to see if the tests pass. Repeat steps 2-4 until done.\n1. Open `test/*.html` unit test file(s) in non-headless web browsers to ensure tests pass everywhere.\n1. Update the documentation to reflect any changes.\n1. Push to your fork and submit a pull request.\n"
        },
        {
          "name": "Gruntfile.js",
          "type": "blob",
          "size": 5.94921875,
          "content": "'use strict';\n\nmodule.exports = function(grunt) {\n\n\tvar jsFiles = [\n\t\t'src/tables.js',\n\t\t'src/tables.stack.js',\n\t\t'src/tables.btnmarkup.js',\n\t\t'src/tables.columntoggle.js',\n\t\t'src/tables.sortable.js',\n\t\t'src/tables.swipetoggle.js',\n\t\t'src/tables.minimap.js',\n\t\t'src/tables.modeswitch.js',\n\t\t'src/tables.checkall.js',\n\t\t'src/tables.outro.js'\n\t];\n\n\tvar jsStackOnlyFiles = [\n\t\t'src/tables.js',\n\t\t'src/tables.stack.js',\n\t\t'src/tables.outro.js'\n\t];\n\n\t// Project configuration.\n\tgrunt.initConfig({\n\t\t// Metadata.\n\t\tpkg: grunt.file.readJSON('package.json'),\n\t\tbanner: '/*! <%= pkg.title || pkg.name %> - v<%= pkg.version %> - ' +\n\t\t\t'<%= grunt.template.today(\"yyyy-mm-dd\") %>\\n' +\n\t\t\t'<%= pkg.homepage ? \"* \" + pkg.homepage + \"\\\\n\" : \"\" %>' +\n\t\t\t'* Copyright (c) <%= grunt.template.today(\"yyyy\") %> <%= pkg.author.company %>;' +\n\t\t\t' Licensed <%= pkg.license %> */\\n',\n\t\t// Task configuration.\n\t\tclean: {\n\t\t\tdependencies: ['dist/dependencies/'],\n\t\t\tpost: ['dist/tmp/', 'dist/**/*.min.*']\n\t\t},\n\t\tcopy: {\n\t\t\tjquery: {\n\t\t\t\tsrc: 'node_modules/jquery/dist/jquery.js',\n\t\t\t\tdest: 'dist/dependencies/jquery.js'\n\t\t\t},\n\t\t\tnaturalsort: {\n\t\t\t\tsrc: 'node_modules/javascript-natural-sort/naturalSort.js',\n\t\t\t\tdest: 'dist/dependencies/naturalsort.js'\n\t\t\t},\n\t\t\tqunit: {\n\t\t\t\tfiles: [{\n\t\t\t\t\texpand: true,\n\t\t\t\t\tflatten: true,\n\t\t\t\t\tsrc: [ 'node_modules/qunit/qunit/*' ],\n\t\t\t\t\tdest: 'dist/dependencies/',\n\t\t\t\t\tfilter: 'isFile'\n\t\t\t\t}]\n\t\t\t}\n\t\t},\n\t\tconcat: {\n\t\t\toptions: {\n\t\t\t\tbanner: '<%= banner %>',\n\t\t\t\tstripBanners: true\n\t\t\t},\n\t\t\tjsautoinit: {\n\t\t\t\tsrc: ['src/tables-init.js'],\n\t\t\t\tdest: 'dist/<%= pkg.name %>-init.js'\n\t\t\t},\n\t\t\tjsall: {\n\t\t\t\tsrc: [\n\t\t\t\t\t'src/lib/shoestring-custom.js',\n\t\t\t\t\t'src/tables.intro.shoestring.js'\n\t\t\t\t].concat( jsFiles ),\n\t\t\t\tdest: 'dist/<%= pkg.name %>.js'\n\t\t\t},\n\t\t\tjsjquery: {\n\t\t\t\tsrc: [\n\t\t\t\t\t'src/tables.intro.jquery.js'\n\t\t\t\t].concat( jsFiles ),\n\t\t\t\tdest: 'dist/<%= pkg.name %>.jquery.js'\n\t\t\t},\n\t\t\tjsstack: {\n\t\t\t\tsrc: [\n\t\t\t\t\t'src/lib/shoestring-custom.js',\n\t\t\t\t\t'src/tables.intro.shoestring.js'\n\t\t\t\t].concat( jsStackOnlyFiles ),\n\t\t\t\tdest: 'dist/stackonly/<%= pkg.name %>.stackonly.js'\n\t\t\t},\n\t\t\tjsstackjquery: {\n\t\t\t\tsrc: [\n\t\t\t\t\t'src/tables.intro.jquery.js'\n\t\t\t\t].concat( jsStackOnlyFiles ),\n\t\t\t\tdest: 'dist/stackonly/<%= pkg.name %>.stackonly.jquery.js'\n\t\t\t},\n\t\t\tcssall: {\n\t\t\t\tsrc: [\n\t\t\t\t\t'src/tables.css',\n\t\t\t\t\t'src/tables.toolbar.css',\n\t\t\t\t\t'src/tables.skin.css',\n\t\t\t\t\t'src/tables.stack.css',\n\t\t\t\t\t'src/tables.stack-default-breakpoint.css',\n\t\t\t\t\t'src/tables.swipetoggle.css',\n\t\t\t\t\t'src/tables.columntoggle.css',\n\t\t\t\t\t'src/tables.sortable.css',\n\t\t\t\t\t'src/tables.minimap.css'\n\t\t\t\t],\n\t\t\t\tdest: 'dist/tmp/<%= pkg.name %>.myth.css'\n\t\t\t},\n\t\t\tcssstack: {\n\t\t\t\tsrc: [\n\t\t\t\t\t'src/tables.css',\n\t\t\t\t\t'src/tables.stack.css',\n\t\t\t\t\t'src/tables.stack-default-breakpoint.css'\n\t\t\t\t],\n\t\t\t\tdest: 'dist/tmp/<%= pkg.name %>.stackonly.myth.css'\n\t\t\t},\n\t\t\tcssstackmixinpre: {\n\t\t\t\tsrc: [\n\t\t\t\t\t'src/tables.css',\n\t\t\t\t\t'src/tables.stack.css'\n\t\t\t\t],\n\t\t\t\tdest: 'dist/tmp/<%= pkg.name %>.stackonly.myth.scss'\n\t\t\t},\n\t\t\tcssstackmixinpost: {\n\t\t\t\tsrc: [\n\t\t\t\t\t'dist/tmp/<%= pkg.name %>.stackonly-sans-mixin.scss',\n\t\t\t\t\t'src/tables.stack-mixin.scss'\n\t\t\t\t],\n\t\t\t\tdest: 'dist/stackonly/<%= pkg.name %>.stackonly.scss'\n\t\t\t}\n\t\t},\n\t\tqunit: {\n\t\t\tfiles: ['test-qunit/**/*.html']\n\t\t},\n\t\trun: {\n\t\t\tava: {\n\t\t\t\texec: \"./node_modules/.bin/ava\"\n\t\t\t}\n\t\t},\n\t\twatch: {\n\t\t\tsrc: {\n\t\t\t\tfiles: [\n\t\t\t\t\t'<%= concat.jsall.src %>',\n\t\t\t\t\t'<%= concat.jsautoinit.src %>',\n\t\t\t\t\t'<%= concat.cssall.src %>'\n\t\t\t\t],\n\t\t\t\ttasks: ['src']\n\t\t\t},\n\t\t\ttest: {\n\t\t\t\tfiles: ['dist/<%= pkg.name %>.js', 'test-qunit/**/*.js', 'test/**/*.js'],\n\t\t\t\ttasks: ['test']\n\t\t\t}\n\t\t},\n\t\tuglify: {\n\t\t\tjs: {\n\t\t\t\tfiles: {\n\t\t\t\t\t'dist/<%= pkg.name %>.min.js': [ 'dist/<%= pkg.name %>.js' ],\n\t\t\t\t\t'dist/<%= pkg.name %>.jquery.min.js': [ 'dist/<%= pkg.name %>.jquery.js' ],\n\t\t\t\t\t'dist/stackonly/<%= pkg.name %>.stackonly.min.js': [ 'dist/stackonly/<%= pkg.name %>.stackonly.js' ],\n\t\t\t\t\t'dist/stackonly/<%= pkg.name %>.stackonly.jquery.min.js': [ 'dist/stackonly/<%= pkg.name %>.stackonly.jquery.js' ]\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tcssmin: {\n\t\t\tcss: {\n\t\t\t\tfiles: {\n\t\t\t\t\t'dist/<%= pkg.name %>.min.css': [ 'dist/<%= pkg.name %>.css' ],\n\t\t\t\t\t'dist/stackonly/<%= pkg.name %>.stackonly.min.css': [ 'dist/stackonly/<%= pkg.name %>.stackonly.css' ]\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tbytesize: {\n\t\t\tdist: {\n\t\t\t\tsrc: [\n\t\t\t\t\t'dist/<%= pkg.name %>.min.css',\n\t\t\t\t\t'dist/<%= pkg.name %>.min.js',\n\t\t\t\t\t'dist/<%= pkg.name %>.jquery.min.js',\n\t\t\t\t\t'dist/stackonly/<%= pkg.name %>.stackonly.min.css',\n\t\t\t\t\t'dist/stackonly/<%= pkg.name %>.stackonly.min.js',\n\t\t\t\t\t'dist/stackonly/<%= pkg.name %>.stackonly.jquery.min.js'\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t'gh-pages': {\n\t\t\toptions: {},\n\t\t\tsrc: ['dist/**/*', 'demo/**/*', 'test-qunit/**/*']\n\t\t},\n\t\tmyth: {\n\t\t\tdist: {\n\t\t\t\tfiles: {\n\t\t\t\t\t'dist/<%= pkg.name %>.css': '<%= concat.cssall.dest %>',\n\t\t\t\t\t'dist/stackonly/<%= pkg.name %>.stackonly.css': '<%= concat.cssstack.dest %>',\n\t\t\t\t\t'dist/tmp/<%= pkg.name %>.stackonly-sans-mixin.scss': '<%= concat.cssstackmixinpre.dest %>'\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tcompress: {\n\t\t\tmain: {\n\t\t\t\toptions: {\n\t\t\t\t\tarchive: 'dist/tablesaw-<%= pkg.version %>.zip',\n\t\t\t\t\tmode: 'zip',\n\t\t\t\t\tpretty: true\n\t\t\t\t},\n\t\t\t\tfiles: [\n\t\t\t\t\t{expand: true, cwd: 'dist/', src: ['*'], dest: 'tablesaw/'},\n\t\t\t\t\t{expand: true, cwd: 'dist/', src: ['dependencies/*'], dest: 'tablesaw/'},\n\t\t\t\t\t{expand: true, cwd: 'dist/', src: ['stackonly/*'], dest: 'tablesaw/'}\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t});\n\n\trequire('matchdep').filterDev('grunt-*').forEach(grunt.loadNpmTasks);\n\n\t// Default task.\n\tgrunt.registerTask('test', ['qunit', 'run:ava']);\n\tgrunt.registerTask('concat-pre', ['concat:jsautoinit', 'concat:jsall', 'concat:jsjquery', 'concat:jsstack', 'concat:jsstackjquery', 'concat:cssall', 'concat:cssstack', 'concat:cssstackmixinpre']);\n\tgrunt.registerTask('concat-post', ['concat:cssstackmixinpost']);\n\tgrunt.registerTask('src', ['concat-pre', 'myth', 'concat-post', 'clean:dependencies', 'copy', 'clean:post']);\n\tgrunt.registerTask('filesize', ['uglify', 'cssmin', 'bytesize', 'clean:post']);\n\n\tgrunt.registerTask('default', ['src', 'test', 'filesize']);\n\n\t// Deploy\n\tgrunt.registerTask('deploy', ['default', 'gh-pages']);\n\n};\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.033203125,
          "content": "Copyright (c) 2013 Filament Group\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 16.2333984375,
          "content": ":warning: This project is archived and the repository is no longer maintained. \n\n# Tablesaw\n\n[![npm version](https://badge.fury.io/js/tablesaw.svg)](https://badge.fury.io/js/tablesaw)\n[![Build Status](https://img.shields.io/travis/filamentgroup/tablesaw/master.svg)](https://travis-ci.org/filamentgroup/tablesaw)\n[![Dependency Status](https://david-dm.org/filamentgroup/tablesaw.svg?theme=shields.io)](https://david-dm.org/filamentgroup/tablesaw)\n\n[![Filament Group](http://filamentgroup.com/images/fg-logo-positive-sm-crop.png) ](http://www.filamentgroup.com/)\n\nA set of plugins for responsive tables.\n\n* [Getting Started](#getting-started)\n* [Stack Mode](#stack-mode)\n* [Column Toggle Mode](#column-toggle-mode)\n* [Swipe Mode](#swipe-mode)\n* [Mini-Map](#mini-map)\n* [Mode Switcher](#mode-switcher)\n* [Sortable](#sortable)\n* [Kitchen Sink Example](http://filamentgroup.github.io/tablesaw/demo/kitchensink.html)\n* [Check All](#check-all)\n* [Internationalization i18n](#internationalization-i18n)\n* [Limitations](#limitations)\n* [Run Tests](http://filamentgroup.github.io/tablesaw/test-qunit/tablesaw.html)\n* [Browser Support](#browser-support)\n* [Bundler Compatibility](#bundler-compatibility)\n\n## Roadmap and Enhancement Queue\n\nThis repository is now using [lodash style issue management](https://twitter.com/samselikoff/status/991395669016436736) for enhancements. This means enhancement issues will be closed instead of leaving them open.\n\n* Look through [the enhancement backlog](https://github.com/filamentgroup/tablesaw/issues?q=label%3Aneeds-votes+is%3Aclosed+sort%3Areactions-%2B1-desc) and vote for your favorite features by adding a 👍 to the top comment.\n\n## Stack Mode\n\n* [Stack Demo](http://filamentgroup.github.io/tablesaw/demo/stack.html) and [Stack-Only Demo](http://filamentgroup.github.io/tablesaw/demo/stackonly.html)\n\nThe Stack Table stacks the table headers to a two column layout with headers on the left when the viewport width is less than `40em` (`640px`).\n\n![](docs/stack.gif)\n\n```html\n<table class=\"tablesaw tablesaw-stack\" data-tablesaw-mode=\"stack\">\n```\n\nIf you only want to use the Stack Table and don’t want all the extra features below (save yourself some bytes), Tablesaw provides a Stack-Only version.\n\n| Option | Description |\n| --- | --- |\n| Opt out of inline labels | To opt-out of inline label creation (the table header cell text that shows at small breakpoints) on a per-table basis, use `<table data-tablesaw-no-labels>`; on a per-row basis, use `<tr data-tablesaw-no-labels>`; on a per-cell basis, use `<td data-tablesaw-no-labels>` (added in v3.1.0) |\n| Hide headers for empty body cells | When the table cell is empty, use `<table data-tablesaw-hide-empty>` to hide the header when stacked. |\n\n## Column Toggle Mode\n\n* [Column Toggle Demo](http://filamentgroup.github.io/tablesaw/demo/toggle.html)\n\nThe Column Toggle Table allows the user to select which columns they want to be visible.\n\n![](docs/columntoggle-minimap.gif)\n\n```html\n<table data-tablesaw-mode=\"columntoggle\">\n```\n\n| Option | Description |\n| --- | --- |\n| Add a Mini-Map | The little dots that appear next to the column toggle popup. Use the `data-tablesaw-minimap` attribute: `<table data-tablesaw-mode=\"columntoggle\" data-tablesaw-minimap>` |\n\nThe user always has the option to select all columns. If the table gets too wide for the viewport, it can overflow and cause a page-level scrollbar. To combat this issue, we recommend wrapping your table in a `<div class=\"tablesaw-overflow\">` element to restrict scrolling to the table-only. The [toggle demo](http://filamentgroup.github.io/tablesaw/demo/toggle.html) has one such example.\n\n<details>\n<summary><em>Advanced Option</em>: Prioritize Columns</summary>\n\nTable headers must have a `data-tablesaw-priority` attribute to be eligible to toggle. `data-tablesaw-priority` is a numeric value from 1 to 6, which determine default breakpoints at which a column will show. The breakpoint defaults are:\n\n```html\n<th data-tablesaw-priority=\"persist\"><!-- Not eligible for toggle, always shows --></th>\n<th data-tablesaw-priority=\"0\"><!-- Hidden at all breakpoints by default, must be toggled back on manually --></th>\n<th data-tablesaw-priority=\"1\"><!-- Shows at (min-width: 20em) (320px) --></th>\n<th data-tablesaw-priority=\"2\"><!-- Shows at (min-width: 30em) (480px) --></th>\n<th data-tablesaw-priority=\"3\"><!-- Shows at (min-width: 40em) (640px) --></th>\n<th data-tablesaw-priority=\"4\"><!-- Shows at (min-width: 50em) (800px) --></th>\n<th data-tablesaw-priority=\"5\"><!-- Shows at (min-width: 60em) (960px) --></th>\n<th data-tablesaw-priority=\"6\"><!-- Shows at (min-width: 70em) (1120px) --></th>\n```\n\nKeep in mind that the priorities are not exclusive—multiple columns can reuse the same priority value.\n\n</details>\n\n## Swipe Mode\n\n* [Swipe Demo](http://filamentgroup.github.io/tablesaw/demo/swipe.html)\n\nAllows the user to use the swipe gesture (or use the left and right buttons) to navigate the columns.\n\n![](docs/swipe-minimap.gif)\n\n```html\n<table data-tablesaw-mode=\"swipe\">\n```\n\n\n| Options | Description |\n| --- | --- |\n| Persist a Column | Columns also respect the `data-tablesaw-priority=\"persist\"` attribute: `<th data-tablesaw-priority=\"persist\"><!-- Always shows --></th>` |\n| Add a Mini-Map | The little dots that appear next to the column navigation buttons. Use the `data-tablesaw-minimap` attribute: `<table data-tablesaw-mode=\"swipe\" data-tablesaw-minimap>` |\n| All columns visible class | Tablesaw also exposes a `tablesaw-all-cols-visible` class that is toggled on when all of the table columns are visible (and off when not). You can use this in CSS to hide the minimap or navigation buttons if needed. |\n| Disable swipe touch events | Use the `<table data-tablesaw-no-touch>` attribute to opt-out of swiping left or right to navigate columns. Users will need to use the provided buttons instead. |\n\n<details>\n<summary><em>Advanced Option</em>: Configure Swipe Thresholds</summary>\n\nAdd a `TablesawConfig` object to your page in a `<script>` element. It doesn’t matter if it’s declared before or after the Tablesaw JavaScript.\n\n```js\n<script>\nTablesawConfig = {\n  swipeHorizontalThreshold: 15,\n  swipeVerticalThreshold: 20\n};\n</script>\n```\n\n* [Configure Swipe Threshold Demo](http://filamentgroup.github.io/tablesaw/demo/swipe-config.html)\n\n</details>\n\n## Mini Map\n\nUse `data-tablesaw-minimap` to add a series of small dots to show which columns are currently visible and which are hidden. Only available on `swipe` and `columntoggle` tables. Examples available above.\n\n## Mode Switcher\n\n* [Mode Switcher Demo](http://filamentgroup.github.io/tablesaw/demo/modeswitch.html)\n\n![](docs/mode-switch.gif)\n\n```html\n<table data-tablesaw-mode-switch>\n\n<!-- With a different default mode -->\n<table data-tablesaw-mode-switch data-tablesaw-mode=\"swipe\">\n\n<!-- Exclude a mode from the switcher -->\n<table data-tablesaw-mode-switch data-tablesaw-mode-exclude=\"columntoggle\">\n```\n\n## Sortable\n\n* [Sortable Demo](http://filamentgroup.github.io/tablesaw/demo/sort.html)\n\nThe “sortable” option allows the user to sort the table data by clicking on the table headers. Since all the columns may not be visible on smaller breakpoints (or not there at all if using the “stack” table mode), relying solely on the column headers to choose the table sort isn’t practical. To address this, there is an optional `data-tablesaw-sortable-switch` attribute on the table that adds a select menu auto-populated with the names of each column in the table with options for choosing ascending or descending sort direction. Data options on table headers can be used to control which columns are sortable (`data-tablesaw-sortable-col`) and the default sort order (`data-tablesaw-sortable-default-col`).\n\n```html\n<table data-tablesaw-sortable>\n    <thead>\n        <tr>\n            <!-- Default column -->\n            <th data-tablesaw-sortable-col data-tablesaw-sortable-default-col>Rank</th>\n            <th data-tablesaw-sortable-col>Movie Title</th>\n            <th data-tablesaw-sortable-col data-tablesaw-sortable-numeric>Year</th>\n            <th data-tablesaw-sortable-col data-tablesaw-sortable-numeric><abbr title=\"Rotten Tomato Rating\">Rating</abbr></th>\n            <!-- Unsortable column -->\n            <th>Reviews</th>\n        </tr>\n    </thead>\n    ...\n```\n\nUse `data-tablesaw-sortable-switch` to add a select form element to manually choose the sort order.\n\n```html\n<table data-tablesaw-sortable data-tablesaw-sortable-switch>\n```\n\n![](docs/sortable.png)\n\n<details>\n<summary><em>Advanced Option</em>: Custom Sort Functions</summary>\n\nTablesaw provides two methods of sorting built-in: string and numeric. To use numeric sort, use the `data-tablesaw-sortable-numeric` class as shown in the above sorting markup example. Otherwise, tablesaw uses a case insensitive string sort.\n\nAll other types of sorting must use a Custom Sort function on the individual columns ([working example](http://filamentgroup.github.io/tablesaw/demo/sort-custom.html)). In the contrived example below, we want to sort full dates (e.g. `12/02/2014`) just on the year.\n\n```\n// Add a data function to the table header cell\n$( \"th#custom-sort\" ).data( \"tablesaw-sort\", function( ascending ) {\n    // return a function\n    return function( a, b ) {\n        // Ignore rows with data-tablesaw-ignorerow (leave them where they were)\n        if( a.ignored || b.ignored ) {\n            return 0;\n        }\n\n        // use a.cell and b.cell for cell values\n        var dateA = a.cell.split( \"/\" ),\n            dateB = b.cell.split( \"/\" ),\n            yearA = parseInt( dateA[ 2 ], 10 ),\n            yearB = parseInt( dateB[ 2 ], 10 );\n\n        if( ascending ) {\n            return yearA >= yearB ? 1 : -1;\n        } else { // descending\n            return yearA < yearB ? 1 : -1;\n        }\n    };\n});\n```\n\n</details>\n\n## Kitchen ~~Table~~ Sink\n\n* [Kitchen Sink Demo](http://filamentgroup.github.io/tablesaw/demo/kitchensink.html)\n\nAll of the above options combined into a single table.\n\n## Check All\n\n_Added in 3.0.1._  Add the `data-tablesaw-checkall` to a checkbox in a `thead` cell to enable that checkbox to toggle the other checkboxes in the same column.\n\n* [Check All Demo](http://filamentgroup.github.io/tablesaw/demo/checkall.html)\n\n## Internationalization i18n\n\n_Added in 3.0.2._ Use the `TablesawConfig` global on your page to override internationalization strings. It doesn’t matter if it’s declared before or after the Tablesaw JavaScript library.\n\n```js\n<script>\nTablesawConfig = {\n  i18n: {\n    modeStack: 'Stack',\n    modeSwipe: 'Swipe',\n    modeToggle: 'Toggle',\n    modeSwitchColumnsAbbreviated: 'Cols',\n    modeSwitchColumns: 'Columns',\n    columnToggleButton: 'Columns',\n    columnToggleError: 'No eligible columns.',\n    sort: 'Sort',\n    swipePreviousColumn: 'Previous column',\n    swipeNextColumn: 'Next column'\n  }\n};\n</script>\n```\n\n## Getting Started\n\nAvailable through npm:\n\n```\nnpm install tablesaw\n```\n\n### The Full Tablesaw\n\n<details open>\n<summary>Tablesaw (no dependencies)</summary>\n\n```html\n<link rel=\"stylesheet\" href=\"tablesaw.css\">\n<script src=\"tablesaw.js\"></script>\n<script src=\"tablesaw-init.js\"></script>\n```\n\n</details>\n\n<details open>\n<summary>or Tablesaw (jQuery Plugin)</summary>\n\n```html\n<link rel=\"stylesheet\" href=\"tablesaw.css\">\n<!-- load your own jQuery -->\n<script src=\"jquery.js\"></script>\n<script src=\"tablesaw.jquery.js\"></script>\n<script src=\"tablesaw-init.js\"></script>\n```\n\n</details>\n\nDon’t forget to add your table markup! For a stack table, this is how it’d look: \n\n```html\n<table class=\"tablesaw tablesaw-stack\" data-tablesaw-mode=\"stack\">\n```\n\nThe demos above include full markup examples for all of the Tablesaw types.\n\n#### Manual initialization of Tablesaw Components\n\nIf you want to initialize your Tablesaw tables manually, don’t include `<script src=\"tablesaw-init.js\">` in your markup. Instead, you can use `Tablesaw.init()`. This will scan the tree for any Tablesaw tables and initialize them for you.\n\n*Tables must be visible for proper initialization.*\n\n```js\nTablesaw.init();\nTablesaw.init( myElement ); // OR pass an element to only init within a context\n```\n\n#### Dynamically Loading Tablesaw\n\nFor user interfaces that are dynamically built, Tablesaw can be loaded on an as-needed basis.  \nHere's how you might do this with jQuery:\n\n```js\n$('head').append('<script src=\"tablesaw.js\"></script>');\n```\n\nFollowing that, tables may be initialized manually as they are created.\n\n### Using Stack-Only Tablesaw\n\n* [Stack-Only Demo](http://filamentgroup.github.io/tablesaw/demo/stackonly.html)\n\nAs shown above, we provide a Stack-mode-only package of Tablesaw. It’s a barebones version that doesn’t include any of the other features above.\n\n<details open>\n<summary>Stack-only Tablesaw (no dependencies)</summary>\n\n```html\n<link rel=\"stylesheet\" href=\"tablesaw.css\">\n<script src=\"stackonly/tablesaw.stackonly.js\"></script>\n<script src=\"tablesaw-init.js\"></script>\n```\n\n</details>\n\n<details open>\n<summary>or just Stack-only Tablesaw (jQuery Plugin)</summary>\n\n```html\n<link rel=\"stylesheet\" href=\"tablesaw.css\">\n<!-- load your own jQuery -->\n<script src=\"jquery.js\"></script>\n<script src=\"stackonly/tablesaw.stackonly.jquery.js\"></script>\n<script src=\"tablesaw-init.js\"></script>\n```\n\n</details>\n\nAnd then:\n\n```html\n<table class=\"tablesaw tablesaw-stack\" data-tablesaw-mode=\"stack\">\n```\n\n### Using Stack-Only Tablesaw SCSS Mixin\n\nTo easily customize the breakpoint at which the stack table switches, use the SCSS mixin.  First, include the `tablesaw.stackonly.scss` file instead of `tablesaw.stackonly.css` in your SASS. Then, use a parent selector on your table.\n\n```html\n<div class=\"my-parent-selector\">\n    <table class=\"tablesaw\" data-tablesaw-mode=\"stack\">\n```\n\nInclude the mixin like so:\n\n```scss\n.my-parent-selector {\n  @include tablesaw-stack( 50em );\n}\n```\n\nThe argument to `tablesaw-stack` is the breakpoint at which the table will switch from columns to stacked.\n\n### Default Styles\n\n_Starting with Tablesaw 3.0, the “Bare”, or stripped down style version of Tablesaw has been made the default._\n\nSome of the more intrusive default styles have instead moved to opt-in classes you can add to the `<table>` element:\n\n* `tablesaw-row-border`: Adds a bottom border to each table row.\n* `tablesaw-row-zebra`: Adds a light background color to every other table row.\n* `tablesaw-swipe-shadow`: Adds the light shadow to the right of persistant columns to make them stand out a little more.\n\n## Limitations\n\n* Simple `colspan` and `rowspan` are supported, in part thanks to a [lovely PR](https://github.com/filamentgroup/tablesaw/pull/225) from @jgibson.\n\n| | Stack | Column Toggle | Swipe | Sortable |\n| --- | --- | --- | --- | --- |\n| `rowspan` | _Not yet supported_ ([#247](https://github.com/filamentgroup/tablesaw/issues/247)) | Supported | Supported | _Not yet supported_ ([#268](https://github.com/filamentgroup/tablesaw/issues/268)) |\n| `colspan` | Supported | Supported | Supported | Supported |\n\n## [Tests](http://filamentgroup.github.io/tablesaw/test-qunit/tablesaw.html)\n\n## Browser Support\n\nAll major browsers (evergreens are not listed, but supported). Notably this project cuts the mustard for A-grade support with:\n\n* Internet Explorer 9+\n* Android Browser 2.3+\n* Blackberry OS 6+\n\nOther legacy browsers and Opera Mini receive unenhanced table markup.\n\n## Bundler Compatibility\n\n* Added in `v3.0.6`: [tested to work in Webpack](./demo/webpack/).\n\n## Building the Project Locally\n\nRun `npm install` to install dependencies and then `grunt` to build the project files into the `dist` folder.\n\n## Release Names\n\n* [3.1.0: Acacia](https://github.com/filamentgroup/tablesaw/releases/tag/v3.1.0)\n* [3.0.6: Wonderboom](https://github.com/filamentgroup/tablesaw/releases/tag/v3.0.6)\n* [3.0.3: Cucumbertree](https://github.com/filamentgroup/tablesaw/releases/tag/v3.0.3)\n* [3.0.2: Bald Cypress](https://github.com/filamentgroup/tablesaw/releases/tag/v3.0.2)\n* [3.0.1: Cypress](https://github.com/filamentgroup/tablesaw/releases/tag/v3.0.1)\n* [3.0.0: Rosewood](https://github.com/filamentgroup/tablesaw/releases/tag/v3.0.0)\n* [2.0.1: Mountain Hemlock](https://github.com/filamentgroup/tablesaw/releases/tag/v2.0.1)\n* [2.0.0: Hemlock](https://github.com/filamentgroup/tablesaw/releases/tag/v2.0.0)\n* [1.0.5: Hickory](https://github.com/filamentgroup/tablesaw/releases/tag/v1.0.5)\n* [1.0.4: Ironwood](https://github.com/filamentgroup/tablesaw/releases/tag/v1.0.4)\n* [1.0.3: Red Mahogany](https://github.com/filamentgroup/tablesaw/releases/tag/v1.0.3)\n\n_Previous versions didn’t have names._\n"
        },
        {
          "name": "demo",
          "type": "tree",
          "content": null
        },
        {
          "name": "dist",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.8623046875,
          "content": "{\n  \"name\": \"tablesaw\",\n  \"title\": \"Tablesaw\",\n  \"description\": \"A set of plugins for responsive tables.\",\n  \"version\": \"3.1.2\",\n  \"homepage\": \"https://github.com/filamentgroup/tablesaw\",\n  \"author\": {\n    \"name\": \"Zach Leatherman\",\n    \"company\": \"Filament Group\",\n    \"email\": \"zach@filamentgroup.com\",\n    \"url\": \"http://filamentgroup.com/\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/filamentgroup/tablesaw.git\"\n  },\n  \"bugs\": \"https://github.com/filamentgroup/tablesaw/issues\",\n  \"license\": \"MIT\",\n  \"engines\": {\n    \"node\": \">= 4\"\n  },\n  \"scripts\": {\n    \"test\": \"./node_modules/.bin/grunt test\",\n    \"precommit\": \"lint-staged\",\n    \"prepush\": \"grunt test\"\n  },\n  \"lint-staged\": {\n    \"src/*.js\": [\n      \"prettier --write --print-width 100 --use-tabs\",\n      \"git add\"\n    ]\n  },\n  \"ava\": {\n    \"files\": [\n      \"test/**/*.test.js\"\n    ],\n    \"require\": [\n      \"babel-register\",\n      \"./test/helpers/setup-browser-env.js\"\n    ],\n    \"inherit\": true,\n    \"verbose\": true\n  },\n  \"main\": \"dist/tablesaw.js\",\n  \"dependencies\": {\n    \"shoestring\": \"^2.0.0\"\n  },\n  \"devDependencies\": {\n    \"ava\": \"^0.23.0\",\n    \"babel-register\": \"^6.26.0\",\n    \"browser-env\": \"^3.2.2\",\n    \"console-advanced\": \"^1.0.7\",\n    \"grunt\": \"^1.0.1\",\n    \"grunt-bytesize\": \"~0.2.0\",\n    \"grunt-contrib-clean\": \"~1.1.0\",\n    \"grunt-contrib-compress\": \"~1.4.3\",\n    \"grunt-contrib-concat\": \"~1.0.1\",\n    \"grunt-contrib-copy\": \"~1.0.0\",\n    \"grunt-contrib-cssmin\": \"^2.2.0\",\n    \"grunt-contrib-qunit\": \"^3.0.1\",\n    \"grunt-contrib-uglify\": \"^3.0.1\",\n    \"grunt-contrib-watch\": \"^1.1.0\",\n    \"grunt-gh-pages\": \"^3.1.0\",\n    \"grunt-myth\": \"~1.1.0\",\n    \"grunt-run\": \"^0.8.0\",\n    \"husky\": \"^0.14.3\",\n    \"jquery\": \"^3.1.0\",\n    \"lint-staged\": \"^4.0.1\",\n    \"matchdep\": \"~1.0.1\",\n    \"prettier\": \"^1.8.2\",\n    \"qunit\": \"^2.8.0\"\n  },\n  \"optionalDependencies\": {\n    \"javascript-natural-sort\": \"^0.7.1\"\n  }\n}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-qunit",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}