{
  "metadata": {
    "timestamp": 1736563059253,
    "page": 694,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjczMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "wix-incubator/react-native-interactable",
      "stars": 5188,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".ghp",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.6416015625,
          "content": "# OSX\n#\n.DS_Store\n\n# Xcode\n#\nbuild/\n*.pbxuser\n!default.pbxuser\n*.mode1v3\n!default.mode1v3\n*.mode2v3\n!default.mode2v3\n*.perspectivev3\n!default.perspectivev3\nxcuserdata\n*.xccheckout\n*.moved-aside\nDerivedData\n*.hmap\n*.ipa\n*.xcuserstate\nproject.xcworkspace\n\n# Android/IJ\n#\n*.iml\n.idea\n.gradle\nlocal.properties\nandroid/.settings/*\nandroid/.project\nlib/android/.project\nplayground/android/app/.project\nplayground/android/.project\n\n# node.js\n#\nnode_modules/\nnpm-debug.log\n\n# npm\npackage-lock.json\n\n# yarn\nyarn.lock\nyarn-error.log\n\n# BUCK\nbuck-out/\n\\.buckd/\nandroid/app/libs\n*.keystore\n!debug.keystore\n\n# Bundle artifact\n*.jsbundle\n\n# CocoaPods\nplayground/ios/Pods\n"
        },
        {
          "name": ".npmignore",
          "type": "blob",
          "size": 3.3837890625,
          "content": ".ghp/\n\n\nplayground\ne2e\nlogos\n./index.ios.js\n./index.android.js\n./rn-cli.config.js\n\n#################\n# from .gitignore:\n################\n\n\n############\n# Node\n############\n# Logs\nlogs\n*.log\nnpm-debug.log*\n\n# Runtime data\npids\n*.pid\n*.seed\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (http://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules\njspm_packages\n\n# Optional npm cache directory\n.npm\n\n# Optional REPL history\n.node_repl_history\n\n################\n# JetBrains\n################\n.idea\n\n## File-based project format:\n*.iws\n\n## Plugin-specific files:\n\n# IntelliJ\n/out/\n\n# mpeltonen/sbt-idea plugin\n.idea_modules/\n\n# JIRA plugin\natlassian-ide-plugin.xml\n\n# Crashlytics plugin (for Android Studio and IntelliJ)\ncom_crashlytics_export_strings.xml\ncrashlytics.properties\ncrashlytics-build.properties\nfabric.properties\n\n\n############\n# iOS\n############\n# Xcode\n#\n# gitignore contributors: remember to update Global/Xcode.gitignore, Objective-C.gitignore & Swift.gitignore\n\n#Cocoapods\n# *.podspec\n\n## Build generated\nios/build/\nios/DerivedData/\n\n## Various settings\n*.pbxuser\n!default.pbxuser\n*.mode1v3\n!default.mode1v3\n*.mode2v3\n!default.mode2v3\n*.perspectivev3\n!default.perspectivev3\nios/xcuserdata/\n\n## Other\n*.moved-aside\n*.xcuserstate\n\n## Obj-C/Swift specific\n*.hmap\n*.ipa\n*.dSYM.zip\n*.dSYM\n\n# CocoaPods\n#\n# We recommend against adding the Pods directory to your .gitignore. However\n# you should judge for yourself, the pros and cons are mentioned at:\n# https://guides.cocoapods.org/using/using-cocoapods.html#should-i-check-the-pods-directory-into-source-control\n#\nios/Pods/\n\n# Carthage\n#\n# Add this line if you want to avoid checking in source code from Carthage dependencies.\n# Carthage/Checkouts\n\nCarthage/Build\n\n# fastlane\n#\n# It is recommended to not store the screenshots in the git repo. Instead, use fastlane to re-generate the\n# screenshots whenever they are needed.\n# For more information about the recommended setup visit:\n# https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Gitignore.md\n\nfastlane/report.xml\nfastlane/screenshots\n\n\n############\n# Android\n############\n# Built application files\n*.apk\n*.ap_\n\n# Files for the Dalvik VM\n*.dex\n\n# Java class files\n*.class\n\n# Generated files\nandroid/bin/\nandroid/gen/\nandroid/out/\nandroid/app/build/\nlib/android/gradle/\n\n# Gradle files\nandroid/.gradle/\nandroid/build/\n\n# Local configuration file (sdk path, etc)\nlocal.properties\n\n# Proguard folder generated by Eclipse\nandroid/proguard/\n\n# Log Files\n*.log\n\n# Android Studio Navigation editor temp files\nandroid/.navigation/\n\n# Android Studio captures folder\nandroid/captures/\n\n# Intellij\n*.iml\n\n# Keystore files\n*.jks\n\n##################\n# React-Native\n##################\n# OSX\n#\n.DS_Store\n\n# Xcode\n#\nbuild/\n*.pbxuser\n!default.pbxuser\n*.mode1v3\n!default.mode1v3\n*.mode2v3\n!default.mode2v3\n*.perspectivev3\n!default.perspectivev3\nxcuserdata\n*.xccheckout\n*.moved-aside\nDerivedData\n*.hmap\n*.ipa\n*.xcuserstate\nproject.xcworkspace\n\n# Android/IJ\n#\n.idea\n.gradle\nlocal.properties\n\n# node.js\n#\nnode_modules/\nnpm-debug.log\n\n# BUCK\nbuck-out/\n\\.buckd/\nandroid/app/libs\nandroid/keystores/debug.keystore\n\nexample\nreal-life-example\nandroid/build\n"
        },
        {
          "name": "Interactable.podspec",
          "type": "blob",
          "size": 0.5380859375,
          "content": "require 'json'\n\npackage = JSON.parse(File.read(File.join(__dir__, 'package.json')))\n\nPod::Spec.new do |s|\n  s.name         = \"Interactable\"\n  s.version      = package[\"version\"]\n  s.summary      = package[\"description\"]\n\n  s.homepage     = \"https://github.com/wix/react-native-interactable\"\n\n  s.license      = \"MIT\"\n  s.authors      = package[\"author\"]\n  s.platform     = :ios, \"7.0\"\n\n  s.source       = { :git => \"https://github.com/wix/react-native-interactable.git\" }\n  s.source_files  = \"lib/ios/Interactable/*.{h,m}\"\n\n  s.dependency 'React'\nend\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0390625,
          "content": "MIT License\n\nCopyright (c) 2017 Wix.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "PROPS.md",
          "type": "blob",
          "size": 11.6904296875,
          "content": "# Props Reference\n\n## `Interactable.View` Props\n\n#### `snapPoints` (array of points)\n\n```jsx\nsnapPoints={[{x: 0}, {x: -200}]}\n```\n\nA list of points the view will snap to after being dragged by the user. To implement a a drawer for example, provide 2 points - one for the open state and one for the closed state. Points are relative to the view's center (after initial layout). Every element in the array is an object with the following properties:\n\n* `x` - The horizontal position (relative to the center). Optional if a single dimension is needed.\n* `y` - The vertical position (relative to the center). Optional if a single dimension is needed.\n* `damping` - Amount of damping on the spring connected to this point. Default is `0.7`.\n* `tension` - Tension of the spring connected to this point. Default is `300`.\n* `id` - An optional string name for the point to identify it in the `onSnap` event.\n\nExamples for [chat heads](https://github.com/wix/react-native-interactable/blob/b72eff0649b48dd50548593e5ecfe4c42b026a02/example/src/ChatHeads.js#L10), [drawer](https://github.com/wix/react-native-interactable/blob/b72eff0649b48dd50548593e5ecfe4c42b026a02/example/src/IconDrawer.js#L62) and [swipeable card](https://github.com/wix/react-native-interactable/blob/b72eff0649b48dd50548593e5ecfe4c42b026a02/example/src/SwipeableCard.js#L25).\n\n#### `springPoints` (array of points)\n\n```jsx\nspringPoints={[{x: 0, tension: 6000, damping: 0.5, influenceArea: {left: 0}}]}\n```\n\nConnect the view's center to a group of constant springs. Every element in the array is an object with the following properties:\n\n* `x` - The horizontal anchor position of the spring (relative to the center). Default is `0.0`.\n* `y` - The vertical anchor position of the spring (relative to the center). Default is `0.0`.\n* `tension` - Tension of the spring. Default is `300`.\n* `damping` - Amount of damping on the spring. Default is `0.0`.\n* `influenceArea` - Limit the spring influence to a specific area. Optional. An object with the following properties:\n  * `left` - The minimum horizontal influence point (relative to the center). Optional.\n  * `right` - The maximum horizontal influence point (relative to the center). Optional.\n  * `top` - The minimum vertical influence point (relative to the center). Optional.\n  * `bottom` - The maximum vertical influence point (relative to the center). Optional.  \n* `haptics` - Whether to enable haptic feedback on springs with influence area. Default `false`.\n\nNote: For the springs to affect the view while dragging, make sure dragging is performed via a spring using the `dragWithSpring` prop.\n\n#### `gravityPoints` (array of points)\n\n```jsx\ngravityPoints={[{x: 0, y: 0, strength: 8000, falloff: 40, damping: 0.5}]}\n```\n\nAttract/repel the view's center with a group of constant gravity wells. Every element in the array is an object with the following properties:\n\n* `x` - The horizontal position of the well (relative to the center). Default is `0.0`.\n* `y` - The vertical position of the well (relative to the center). Default is `0.0`.\n* `strength` - Strength of the field (positive attracts, negative repels). Default is `400`.\n* `falloff` - Distance of decay for the field strength. Default is `40`.\n* `damping` - Amount of damping on the field strength. Default is `0.0`.\n* `influenceArea` - Limit the field influence to a specific area. Optional. An object with the following properties:\n  * `left` - The minimum horizontal influence point (relative to the center). Optional.\n  * `right` - The maximum horizontal influence point (relative to the center). Optional.\n  * `top` - The minimum vertical influence point (relative to the center). Optional.\n  * `bottom` - The maximum vertical influence point (relative to the center). Optional.  \n* `haptics` - Whether to enable haptic feedback on fields with influence area. Default `false`.\n\nNote: For the gravity to affect the view while dragging, make sure dragging is performed via a spring using the `dragWithSpring` prop.\n\n#### `frictionAreas` (array of areas)\n\n```jsx\nfrictionAreas={[{damping: 0.5, influenceArea: {top: 0}}]}\n```\n\nAdd friction to the view's movement with a group of friction regions. Every element in the array is an object with the following properties:\n\n* `damping` - Amount of friction (`0.0`-`1.0`). Default is `0.0`.\n* `influenceArea` - Limit the friction influence to a specific area. Optional. An object with the following properties:\n  * `left` - The minimum horizontal influence point (relative to the center). Optional.\n  * `right` - The maximum horizontal influence point (relative to the center). Optional.\n  * `top` - The minimum vertical influence point (relative to the center). Optional.\n  * `bottom` - The maximum vertical influence point (relative to the center). Optional.  \n* `haptics` - Whether to enable haptic feedback on regions with influence area. Default `false`.\n\nNote: For the friction to affect the view while dragging, make sure dragging is performed via a spring using the `dragWithSpring` prop.\n\n#### `alertAreas` (array of areas)\n\n```jsx\nalertAreas={[{id: 'myArea', influenceArea: {top: 0}}]}\n```\n\nSend alert event when the view's center enters/leaves any region within the group. Every element in the array is an object with the following properties:\n\n* `id` - A required string name for the area to identify it in the `onAlert` event.\n* `influenceArea` - Limit the alert to a specific area. Optional. An object with the following properties:\n  * `left` - The minimum horizontal alert point (relative to the center). Optional.\n  * `right` - The maximum horizontal alert point (relative to the center). Optional.\n  * `top` - The minimum vertical alert point (relative to the center). Optional.\n  * `bottom` - The maximum vertical alert point (relative to the center). Optional.  \n\n#### `horizontalOnly` (boolean)\n\n```jsx\nhorizontalOnly={true}\n```\n\nOptional, whether the view should be locked to horizontal movement only. Default `false`.\n\n#### `startOnFront` (boolean) **[Android Only]**\n\n```jsx\nstartOnFront\n```\n\nOptional, whether the view should call `view.bringToFront()` when the view is first loaded.\n*Usually using zIndex does the trick. Use this in cases it doesn't*\n\n#### `verticalOnly` (boolean)\n\n```jsx\nverticalOnly={true}\n```\n\nOptional, whether the view should be locked to vertical movement only. Default `false`.\n\n#### `boundaries` (object)\n\n```jsx\nboundaries={{left: -100, right: 100, bounce: 0.5}}\n```\n\nOptional, an object providing limits to movement relative to the view's center (after initial layout). Contains following properties:\n\n* `left` - The minimum horizontal position (relative to the center). Optional.\n* `right` - The maximum horizontal position (relative to the center). Optional.\n* `top` - The minimum vertical position (relative to the center). Optional.\n* `bottom` - The maximum vertical position (relative to the center). Optional.\n* `bounce` - The amount of bounce when hitting the limit (`0.0`-`1.0`). Optional.\n* `haptics` - Whether to enable haptic feedback on bounce. Default `false`.\n\n#### `onSnap` (function)\n\n```jsx\nonSnap={this.onDrawerSnap}\n```\n\nOptional, a function called whenever the view finishes snapping to a `snapPoints` point (after being dragged). Example for [drawer](https://github.com/wix/react-native-interactable/blob/b72eff0649b48dd50548593e5ecfe4c42b026a02/example/src/IconDrawer.js#L63). When the function is called, an event object is passed as argument, containing the following properties:\n\n* `index` - The zero-based index of the point in the `snapPoints` array.\n* `id` - The string `id` of the point in the `snapPoints` array (assuming it was provided).\n\n#### `onSnapStart` (function)\n\n```jsx\nonSnapStart={this.onDrawerSnapStart}\n```\n\nOptional, a function called whenever the view starts snapping to a `snapPoints` point (after being dragged). When the function is called, an event object is passed as argument, containing the following properties:\n\n* `index` - The zero-based index of the point in the `snapPoints` array.\n* `id` - The string `id` of the point in the `snapPoints` array (assuming it was provided).\n\n#### `onStop` (function)\n\n```jsx\nonStop={this.onStopInteraction}\n```\n\nOptional, a function called whenever the interaction stops (views freeze momentarily). When the function is called, an event object is passed as argument, containing the following properties:\n\n* `x` - The horizontal position of the view (relative to the center).\n* `y` - The vertical position of the view (relative to the center).\n\n#### `onDrag` (function)\n\n```jsx\nonDrag={this.onDragEvent}\n```\n\nOptional, a function called whenever the user starts or stops dragging the view. When the function is called, an event object is passed as argument, containing the following properties:\n\n* `state` - `start` or `end`, whether the user started or finished dragging.\n* `x` - The horizontal position of the view (relative to the center).\n* `y` - The vertical position of the view (relative to the center).\n* `targetSnapPointId` - For `end` state, the string `id` of the target point in the `snapPoints` array (assuming it was provided).\n\n#### `onAlert` (function)\n\n```jsx\nonAlert={this.onAlertEvent}\n```\n\nOptional, a function called whenever the view's center enters/leaves an alert area (see `alertAreas`). When the function is called, an event object is passed as argument, containing the following properties:\n\n* key: `id` - The string name of the area that was entered/left.\n* value: `enter` or `leave` (depending if entering or leaving the area).\n\n#### `dragEnabled` (boolean)\n\n```jsx\ndragEnabled={true}\n```\n\nOptional, whether the user can drag the view or not. Default `true`.\n\n#### `dragWithSpring` (object)\n\n```jsx\ndragWithSpring={{tension: 2000, damping: 0.5}}\n```\n\nOptional, specify in order to make dragging behavior of the view occur using a spring. If not given, drag will be done using a pinned anchor point. Contains following properties:\n\n* `tension` - Tension of the spring.\n* `damping` - Amount of damping on the spring used for dragging. Optional.\n\n#### `dragToss` (number)\n\n```jsx\ndragToss={0.1}\n```\n\nTime in seconds the view is allowed to be tossed before snapping to a point. Default is `0.1`.\n\n#### `animatedValueX` (Animated.Value)\n\n```jsx\nanimatedValueX={this._deltaX}\n```\n\n[`Animated.Value`](https://facebook.github.io/react-native/docs/animated.html#animatedvalue) that will contain the delta from the center as the view moves (x axis). See [this](README.md#animating-other-views-according-to-interactableview-position) for more details on how to animate other views according to the movement of this view.\n\n#### `animatedValueY` (Animated.Value)\n\n```jsx\nanimatedValueY={this._deltaY}\n```\n\n[`Animated.Value`](https://facebook.github.io/react-native/docs/animated.html#animatedvalue) that will contain the delta from the center as the view moves (y axis). See [this](README.md#animating-other-views-according-to-interactableview-position) for more details on how to animate other views according to the movement of this view.\n\n#### `animatedNativeDriver` (boolean)\n\n```jsx\nanimatedNativeDriver={false}\n```\n\nWhether integration with [Animated](https://facebook.github.io/react-native/docs/animated.html) should use native driver. Default `false` since Animated native driver is still a bit experimental. Try it out as eventually the quirks will be resolved and then we'll have a 100% native driver end to end with 60 FPS on derived animations as well.\n\n#### `initialPosition` (point)\n\n```jsx\ninitialPosition={{x: -140, y: -280}}\n```\n\nOptional, used to initialize the view's position to a position different than it's original center. This is mostly useful when you want to provide `snapPoints` points relative to the center calculated by React Native layout, but want the view itself to start from a different position. See [chat heads](https://github.com/wix/react-native-interactable/blob/b72eff0649b48dd50548593e5ecfe4c42b026a02/example/src/ChatHeads.js#L22) example.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.8173828125,
          "content": "<img src=\"http://i.imgur.com/ErA2GQo.gif\" width=200 />&nbsp;&nbsp;&nbsp;&nbsp;\n<img src=\"http://i.imgur.com/pH6oB5D.gif\" width=200 />&nbsp;&nbsp;&nbsp;&nbsp;\n<img src=\"http://i.imgur.com/J5l2Qvq.gif\" width=200 />&nbsp;&nbsp;&nbsp;&nbsp;\n<img src=\"http://i.imgur.com/dWFYZBG.gif\" width=200 />\n\n# Interactable\n> react-native-interactable\n\n<br>\n\n[![NPM Version](https://img.shields.io/npm/v/react-native-interactable.svg?style=flat)](https://www.npmjs.com/package/react-native-interactable)\n[![Build Status](https://img.shields.io/jenkins/s/http/jenkins-oss.wixpress.com:8080/job/multi-react-native-interactable-master.svg)](https://jenkins-oss.wixpress.com/job/multi-react-native-interactable-master/)\n[![NPM Downloads](https://img.shields.io/npm/dm/react-native-interactable.svg?style=flat)](https://www.npmjs.com/package/react-native-interactable)\n\n### LOOKING FOR A MAINTAINER\n\nWe love this project, but currently we don’t have enough time to work on it. So we are looking for a maintainer. If you have enough time and knowledge and want to become one - please let us know (levv@wix.com)\n\n<br>\n\n### Description\n\n* [Installation](#installation)\n* [Example](#example)\n* [Usage](#usage)\n* [Implementation Details](#implementation-details)\n\n<br>\nThis is an experimental implementation of a declarative API for handling fluid user interactions with views at 60 FPS in React Native. Here are some example use-cases for views that users can interact with:\n\n* **Swipeable card** (a la Google Now) springing into place unless swiped away with enough force\n* **Drawer** snapping between closed and open with buttons appearing gradually as it's being dragged\n* **Collapsible header** that snaps to a smaller size as the content below is being scrolled\n* **Chat heads** (a la Facebook Messenger) that can be dragged around but snap to corners of the screen\n\nAll of these use-cases have views that continuously interact with the user's gestures. These interactions are normally physical in nature, having properties like springiness, friction, elasticity and damping. In order to feel natural on a touch device they need to run at 60 FPS.\n\n### Why is this challenging?\n\nThe async nature of the React Native bridge incurs an inherent performance penalty. This traditionally prevents JavaScript code from running at high framerates. One of the most noticeable challenges is animations in JavaScript, which aren't guaranteed to run at 60 FPS.\n\nModern animation libraries for React Native, like [Animated](https://facebook.github.io/react-native/docs/animated.html), tackle this challenge with a declarative approach. In order to minimize passes over the bridge, animations are only declared in JavaScript but executed by a native driver on the other side - in 60 FPS.\n\nFluid user interactions take this a step further than animations. Interactions require UI to continuously react to the user's gestures. This library is designed to support complex physical interactions with ease, using a full-fledged physics engine to drive the interaction on the native side.\n\n### Why is it named interactable?\n\nFirst off, we are aware that *interactable* isn't a real word. The correct form is *interactive* but this has connotation that isn't necessarily related to physical interactions. Similar to `Animated.View`, we wanted to have `Interactable.View` - meaning a view you can interact with. And hey, [Unity](https://docs.unity3d.com/ScriptReference/UI.Selectable-interactable.html) did it too.\n\n<br>\n\n## Installation\n\n**Requires RN 0.40 and above.**\n\n* Install the package from npm\n\n```\nnpm install react-native-interactable --save\n```\n\n* Link the native library to your project\n\n```\nreact-native link react-native-interactable\n```\n\nNote: instead of linking automatically you can also link manually according to these [instructions](http://facebook.github.io/react-native/docs/linking-libraries-ios.html#manual-linking)\n\n```\nnode_modules/react-native-interactable/ios/Interactable.xcodeproj\n```\n\n**Manually link via Cocoa Pods (iOS)**\n\n* Add the following to your `Podfile` and run `pod update`:\n\n```\npod 'Interactable', :path => '../node_modules/react-native-interactable'\n```\n\n<br>\n\n## Example\n\n<br><br>The [playground](https://github.com/wix/react-native-interactable/tree/master/playground) project has few use-cases implemented like: *swipeable card*, *drawer*, *collapsible header* and *chat heads* under the \"Basic examples\" section. It's simplistic but easy to learn from.\n<br><br>Under the \"Real life example\" you'll find more complex demonstrations. They're harder to learn from, but they're cool to watch. More info about the [UX inspirations](https://github.com/wix/react-native-interactable/blob/master/UX-INSPIRATIONS.md) for the demo app.\n\n* **Build and run the example project**\nTo see the library in action, clone the repo and run the playground from the root folder:<br>\n```\n  npm start\n  npm run ios\n```\n<br><br>*Note: It's recommended to experience it on a [real device](http://facebook.github.io/react-native/docs/running-on-device.html) and not on a simulator. The simulator has poor performance so the framerate isn't like the real thing.*\n<br><br>\n\n\n## Usage\n\nThe core of this library is the `Interactable.View` component, used to wrap views you want to interact with:\n\n```jsx\nimport Interactable from 'react-native-interactable';\n\n<Interactable.View\n  horizontalOnly={true}\n  snapPoints={[{x: 0}, {x: -200}]}\n  onSnap={this.onDrawerSnap}>\n\n  // the view that you wrap here will now support interactions\n\n</Interactable.View>\n```\n<br>\n\n### `Interactable.View` Props\n\n[Click here for the full reference for all props](https://github.com/wix/react-native-interactable/blob/master/PROPS.md)\n\n* [`snapPoints`](https://github.com/wix/react-native-interactable/blob/master/PROPS.md#snappoints-array-of-points) - a list of points the view will snap to after being dragged by the user\n\n```jsx\nsnapPoints={[{x: 0}, {x: -200}]}\n```\n\n* [`springPoints`](https://github.com/wix/react-native-interactable/blob/master/PROPS.md#springpoints-array-of-points) - connect the view's center to a group of constant springs\n\n```jsx\nspringPoints={[{x: 0, tension: 6000, damping: 0.5, influenceArea: {left: 0}}]}\n```\n\n* [`gravityPoints`](https://github.com/wix/react-native-interactable/blob/master/PROPS.md#gravitypoints-array-of-points) - attract/repel the view's center with a group of constant gravity wells\n\n```jsx\ngravityPoints={[{x: 0, y: 0, strength: 8000, falloff: 40, damping: 0.5}]}\n```\n\n* [`frictionAreas`](https://github.com/wix/react-native-interactable/blob/master/PROPS.md#frictionareas-array-of-areas) - add friction to the view's movement with a group of friction regions\n\n```jsx\nfrictionAreas={[{damping: 0.5, influenceArea: {top: 0}}]}\n```\n\n* [`alertAreas`](https://github.com/wix/react-native-interactable/blob/master/PROPS.md#alertareas-array-of-areas) - send alert event when the view's center enters/leaves any region within the group\n\n```jsx\nalertAreas={[{id: 'myArea', influenceArea: {top: 0}}]}\n```\n\n* [`horizontalOnly`](https://github.com/wix/react-native-interactable/blob/master/PROPS.md#horizontalonly-boolean) - whether the view should be locked to horizontal movement only\n\n```jsx\nhorizontalOnly={true}\n```\n\n* [`startOnFront`](https://github.com/wix/react-native-interactable/blob/master/PROPS.md#startOnFront-boolean) - [ANDROID ONLY] whether the view should call `bringToFront`\n\n```jsx\nstartOnFront\n```\n\n* [`verticalOnly`](https://github.com/wix/react-native-interactable/blob/master/PROPS.md#verticalonly-boolean) - whether the view should be locked to vertical movement only\n\n```jsx\nverticalOnly={true}\n```\n\n* [`boundaries`](https://github.com/wix/react-native-interactable/blob/master/PROPS.md#boundaries-object) - limits to movement relative to the view's center (after initial layout)\n\n```jsx\nboundaries={{left: -100, right: 100, bounce: 0.5}}\n```\n\n* [`onSnap`](https://github.com/wix/react-native-interactable/blob/master/PROPS.md#onsnap-function) - a function called whenever the view finishes snapping to a `snapPoints` point (after dragging)\n\n```jsx\nonSnap={this.onDrawerSnap}\n```\n\n* [`onSnapStart`](https://github.com/wix/react-native-interactable/blob/master/PROPS.md#onsnapstart-function) - a function called whenever the view starts snapping to a `snapPoints` point (after dragging)\n\n```jsx\nonSnapStart={this.onDrawerSnapStart}\n```\n\n* [`onStop`](https://github.com/wix/react-native-interactable/blob/master/PROPS.md#onstop-function) - a function called whenever the interaction stops (views freeze momentarily)\n\n```jsx\nonStop={this.onStopInteraction}\n```\n\n* [`onDrag`](https://github.com/wix/react-native-interactable/blob/master/PROPS.md#ondrag-function) - a function called whenever the user starts or stops dragging the view\n\n```jsx\nonDrag={this.onDragEvent}\n```\n\n* [`onAlert`](https://github.com/wix/react-native-interactable/blob/master/PROPS.md#onalert-function) - a function called whenever the view's center enters/leaves an alert area\n\n```jsx\nonAlert={this.onAlertEvent}\n```\n\n* [`dragEnabled`](https://github.com/wix/react-native-interactable/blob/master/PROPS.md#dragenabled-boolean) - whether the user can drag the view or not\n\n```jsx\ndragEnabled={true}\n```\n\n* [`dragWithSpring`](https://github.com/wix/react-native-interactable/blob/master/PROPS.md#dragwithspring-object) - specify to make dragging behavior of the view occur using a spring\n\n```jsx\ndragWithSpring={{tension: 2000, damping: 0.5}}\n```\n\n* [`dragToss`](https://github.com/wix/react-native-interactable/blob/master/PROPS.md#dragtoss-number) - time in seconds the view is allowed to be tossed before snapping to a point\n\n```jsx\ndragToss={0.1}\n```\n\n* [`animatedValueX`](https://github.com/wix/react-native-interactable/blob/master/PROPS.md#animatedvaluex-animatedvalue) - [`Animated.Value`](https://facebook.github.io/react-native/docs/animated.html#animatedvalue) that will contain the delta from the center as the view moves (x axis)\n\n```jsx\nanimatedValueX={this._deltaX}\n```\n\n* [`animatedValueY`](https://github.com/wix/react-native-interactable/blob/master/PROPS.md#animatedvaluey-animatedvalue) - [`Animated.Value`](https://facebook.github.io/react-native/docs/animated.html#animatedvalue) that will contain the delta from the center as the view moves (y axis)\n\n```jsx\nanimatedValueY={this._deltaY}\n```\n\n* [`animatedNativeDriver`](https://github.com/wix/react-native-interactable/blob/master/PROPS.md#animatednativedriver-boolean) - whether integration with [Animated](https://facebook.github.io/react-native/docs/animated.html) should use native driver\n\n```jsx\nanimatedNativeDriver={false}\n```\n\n* [`initialPosition`](https://github.com/wix/react-native-interactable/blob/master/PROPS.md#initialposition-point) - used to initialize the view's position to a position different than it's original center\n\n```jsx\ninitialPosition={{x: -140, y: -280}}\n```\n\n<br>\n\n### `Interactable.View` Methods\n\n##### `setVelocity(params)` - used to imperatively set the view's velocity in order to move it around\n\n```jsx\ninstance.setVelocity({x: 2000});\n```\n\nTakes a single argument, which is a params object containing:\n * `x` - The horizontal velocity. Optional.\n * `y` - The vertical velocity. Optional.\n\n ##### `snapTo(params)` - used to imperatively cause the view to snap to one of its snap points\n\n ```jsx\n instance.snapTo({index: 2});\n ```\n\n Takes a single argument, which is a params object containing:\n  * `index` - The index of the snap point in the `snapPoints` array. Optional.\n\n##### `changePosition(params)` - used to imperatively set the view's position\n\n```jsx\ninstance.changePosition({x: 120, y: 40});\n```\n\nTakes a single argument, which is a params object containing:\n * `x` - The x coordinate.\n * `y` - The y coordinate.\n\n<br>\n\n##### `bringToFront()` - bring view to front (Android Only)\n\n```jsx\ninstance.bringToFront();\n```\n\n## Animating other views according to `Interactable.View` position\n\nThis library is integrated with the [Animated](https://facebook.github.io/react-native/docs/animated.html) library in order to support performant animations of other views according to the movement of the `Interactable.View`.\n\nConsider the following use-cases:\n\n* Buttons that appear using a fade & scale animation under a drawer as it's being dragged ([example](https://github.com/wix/react-native-interactable/blob/b72eff0649b48dd50548593e5ecfe4c42b026a02/example/src/IconDrawer.js#L44))\n* Image in a collapsible header that scales as it's snapped between states ([example](https://github.com/wix/react-native-interactable/blob/b72eff0649b48dd50548593e5ecfe4c42b026a02/example/src/CollapsingHeader.js#L15))\n\nIn these use-cases, we have views different from the one the user is interacting with, that animate according to the interactive view's position. Since [Animated](https://facebook.github.io/react-native/docs/animated.html) library uses [`Animated.Value`](https://facebook.github.io/react-native/docs/animated.html#animatedvalue) to animate view properties, we support setting the value of an `Animated.Value` instance according to position of the interactable view. The `Animated.Value` will contain the delta between the `Interactable.View` original center and new center. This can be done separately on the X axis and Y axis.\n\nAfter setting this up, use [Animated](https://facebook.github.io/react-native/docs/animated.html) to declaratively define [interpolations](https://facebook.github.io/react-native/docs/animated.html#interpolate) of the `Animated.Value` to various animatable view properties like opacity, scale, rotation, translateX and translateY:\n\n```jsx\nthis._deltaY = new Animated.Value(0);\n\n<Animated.View style={{\n  transform: [{\n    scale: this._deltaY.interpolate({\n      inputRange: [-150, -150, 0, 0],\n      outputRange: [0.3, 0.3, 1, 1]\n    })\n  }]\n}}>\n  ...\n</Animated.View>\n\n<Interactable.View\n  verticalOnly={true}\n  snapPoints={[{y: 0}, {y: -150}]}\n  animatedValueY={this._deltaY}\n>\n  ...\n</Interactable.View>\n```\n\n<br>\n\n## Implementation Details\n\nOriginally, the iOS implementation relied on [UIKit Dynamics](https://developer.apple.com/reference/uikit/uidynamicanimator) - a powerful native animation engine for physical interactions. A physics engine is required in order to make the interaction life-like. Consider the action of tossing a view connected via a spring to a snap point. A simple native [spring animation](https://developer.apple.com/reference/uikit/uiview/1622594-animatewithduration) will not be enough to take the initial velocity vector into account.\n\nAt some point, UIKit Dynamics was dropped in favor of a home-brewed physics implementation in order to provide more control over the behaviors. This also paved the way for the Android port since there's no parallel to UIKit Dynamics for Android. The home-brewed physics engine was straightforward to port from Objective-C to Java and is now part of this library.\n\n## Contributing\n\nIf you are interested in the project, have feedback or want to contribute don't hesitate to contact me. I'm particularly interested in ideas on how to expand the declarative API for more use-cases and suggestions on how to improve performance. PRs are always welcome.\n\n## License\n\nMIT\n"
        },
        {
          "name": "SUPPORT.md",
          "type": "blob",
          "size": 0.26953125,
          "content": "# Support\n\n### Issues\n\nIf you have any issues with the app please open an issue [here](https://github.com/wix/react-native-interactable/issues)\n\n### Twitter\n\nContact the developer via twitter at `@koltal`\n\n### Contact\n\nhttp://www.wix.engineering\n\nor via email academy@wix.com\n"
        },
        {
          "name": "UX-INSPIRATIONS.md",
          "type": "blob",
          "size": 1.6552734375,
          "content": "# UX Inspirations\n\nThe [showcase app](real-life-example) contains several demonstrations that draw inspiration from beautiful real life apps that we really like. The purpose of the showcase app is to learn from these use-cases and see how they could have been implemented with this library.\n\nThese are the great apps that inspired the demonstrations:\n\n* **Row Actions (Google Style)**\n<br>[Inbox by Gmail](https://itunes.apple.com/us/app/inbox-by-gmail/id905060486?mt=8) app by Google Inc.\n\n* **Row Actions (Apple Style)**\n<br>The official iOS Mail app by Apple\n\n* **Google Now-Style Card**\n<br>[Google Now](https://itunes.apple.com/us/app/google-search-made-just-for-mobile/id284815942?mt=8) app by Google Inc.\n\n* **Tinder-Style Card**\n<br>[Flic](https://itunes.apple.com/us/app/flic-delete-manage-camera-roll-easily-delete-photos/id918263212?mt=8) app by Lifehack Labs\n<br>[Tinder](https://itunes.apple.com/us/app/tinder/id547702041?mt=8) app by Tinder Inc.\n\n* **Notification Panel**\n<br>The official iOS top notification panel by Apple\n\n* **Apple Maps-Style Panel**\n<br>The official iOS Maps app by Apple\n\n* **Collapsible Filter**\n<br>[Airbnb](https://itunes.apple.com/us/app/airbnb/id401626263?mt=8) app by Airbnb Inc.\n\n* **Collapsible Calendar (Any.do-Style)**\n<br>[Cal](https://itunes.apple.com/us/app/cal-shared-calendar-daily-organizer-weekly-planner/id648287824?mt=8) app by Any.DO\n\n* **Chat Heads**\n<br>[Messenger](https://play.google.com/store/apps/details?id=com.facebook.orca&hl=en) app by Facebook\n\n### Disclaimer\n\nThe showcase app is an independent learning project and has not been authorized, sponsored, or otherwise approved by the creators of the inspiring apps listed above.\n"
        },
        {
          "name": "android",
          "type": "blob",
          "size": 0.0107421875,
          "content": "lib/android"
        },
        {
          "name": "e2e",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.js",
          "type": "blob",
          "size": 0.0322265625,
          "content": "require('./playground/index.js');"
        },
        {
          "name": "ios",
          "type": "blob",
          "size": 0.0068359375,
          "content": "lib/ios"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "logos",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 3.7890625,
          "content": "{\n  \"name\": \"react-native-interactable\",\n  \"version\": \"2.0.1\",\n  \"description\": \"High performance interactable views in React Native\",\n  \"license\": \"MIT\",\n  \"author\": \"Tal Kol <talkol@gmail.com>\",\n  \"publishConfig\": {\n    \"registry\": \"https://registry.npmjs.org/\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/wix/react-native-interactable/issues\"\n  },\n  \"homepage\": \"https://github.com/wix/react-native-interactable\",\n  \"readme\": \"https://github.com/wix/react-native-interactable#readme\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/wix/react-native-interactable.git\"\n  },\n  \"main\": \"lib/index.js\",\n  \"scripts\": {\n    \"start\": \"node ./node_modules/react-native/local-cli/cli.js start\",\n    \"ios\": \"react-native run-ios --project-path playground/ios/\",\n    \"android\": \"react-native run-android --root playground\",\n    \"podinstall\": \"cd playground/ios && pod install\",\n    \"test\": \":\",\n    \"e2e:ios\": \"detox test --configuration ios.sim.release --debug-synchronization\",\n    \"e2e:ios-multi\": \"npm run e2e:ios -- -w 2\",\n    \"e2e:android\": \"npm run build:android && detox test --configuration android.emu.release --loglevel verbose\",\n    \"e2e:android:ci\": \"npm run build:android && detox test --configuration android.emu.release --loglevel verbose --headless\",\n    \"build:ios\": \"detox build --configuration ios.sim.release\",\n    \"build:android\": \"detox build --configuration android.emu.release\"\n  },\n  \"peerDependencies\": {\n    \"react\": \">= 15.4.1\",\n    \"react-native\": \">= 0.40.0\"\n  },\n  \"jest\": {\n    \"preset\": \"react-native\"\n  },\n  \"devDependencies\": {\n    \"@babel/core\": \"7.6.0\",\n    \"@babel/runtime\": \"^7.4.2\",\n    \"@react-native-community/eslint-config\": \"^0.0.3\",\n    \"@types/react-native\": \">= 0.52.2\",\n    \"babel-jest\": \"^24.5.0\",\n    \"detox\": \"^18.0.0\",\n    \"eslint\": \"^5.16.0\",\n    \"jest\": \"^24.5.0\",\n    \"metro-react-native-babel-preset\": \"^0.53.1\",\n    \"mocha\": \"^6.0.0\",\n    \"react\": \"16.9.0\",\n    \"react-native\": \"0.61.4\",\n    \"react-test-renderer\": \"16.8.3\"\n  },\n  \"typings\": \"typings/react-native-interactable.d.ts\",\n  \"babel\": {\n    \"env\": {\n      \"test\": {\n        \"presets\": [\n          \"react-native\"\n        ]\n      }\n    }\n  },\n  \"detox_ignore\": {\n    \"specs\": \"e2e\",\n    \"configurations\": {\n      \"ios.sim.debug\": {\n        \"binaryPath\": \"playground/ios/DerivedData/playground/Build/Products/Debug-iphonesimulator/playground.app\",\n        \"build\": \"RCT_NO_LAUNCH_PACKAGER=true xcodebuild build -scheme playground -project playground/ios/playground.xcodeproj -sdk iphonesimulator -configuration Debug -derivedDataPath playground/ios/DerivedData/playground ONLY_ACTIVE_ARCH=YES -quiet -UseModernBuildSystem=NO\",\n        \"type\": \"ios.simulator\",\n        \"name\": \"iPhone 11 Pro\"\n      },\n      \"ios.sim.release\": {\n        \"binaryPath\": \"playground/ios/DerivedData/playground/Build/Products/Release-iphonesimulator/playground.app\",\n        \"build\": \"RCT_NO_LAUNCH_PACKAGER=true xcodebuild build -scheme playground -project playground/ios/playground.xcodeproj -sdk iphonesimulator -configuration Release -derivedDataPath playground/ios/DerivedData/playground ONLY_ACTIVE_ARCH=YES -quiet -UseModernBuildSystem=NO\",\n        \"type\": \"ios.simulator\",\n        \"name\": \"iPhone 11 Pro\"\n      },\n      \"android.emu.debug\": {\n        \"binaryPath\": \"playground/android/app/build/outputs/apk/debug/app-debug.apk\",\n        \"build\": \"cd playground/android && ./gradlew :app:assembleDebug :app:assembleAndroidTest -DtestBuildType=debug\",\n        \"type\": \"android.emulator\",\n        \"name\": \"Pixel_2_API_26\"\n      },\n      \"android.emu.release\": {\n        \"binaryPath\": \"playground/android/app/build/outputs/apk/release/app-release.apk\",\n        \"build\": \"cd playground/android && ./gradlew :app:assembleRelease :app:assembleAndroidTest -DtestBuildType=release\",\n        \"type\": \"android.emulator\",\n        \"name\": \"Pixel_2_API_26\"\n      }\n    }\n  }\n}\n"
        },
        {
          "name": "playground",
          "type": "tree",
          "content": null
        },
        {
          "name": "rn-cli.config.js",
          "type": "blob",
          "size": 0.095703125,
          "content": "module.exports = {\n  getProjectRoots() {\n    return [__dirname, `${__dirname}/playground`];\n  }\n};"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "typings",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}