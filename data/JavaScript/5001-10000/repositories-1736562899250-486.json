{
  "metadata": {
    "timestamp": 1736562899250,
    "page": 486,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "expressjs/cors",
      "stars": 6076,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".eslintrc.yml",
          "type": "blob",
          "size": 0.14453125,
          "content": "root: true\nenv:\n  node: true\nrules:\n  indent: [\"error\", 2, { \"SwitchCase\": 1 }]\n  quotes: [\"error\", \"single\"]\n  space-in-parens: [\"error\", \"never\"]\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0673828125,
          "content": ".nyc_output/\ncoverage/\nnode_modules/\nnpm-debug.log\npackage-lock.json\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.00390625,
          "content": "# contributing to `cors`\n\nCORS is a node.js package for providing a [connect](http://www.senchalabs.org/connect/)/[express](http://expressjs.com/) middleware that can be used to enable [CORS](http://en.wikipedia.org/wiki/Cross-origin_resource_sharing) with various options. Learn more about the project in [the README](README.md).\n\n## The CORS Spec\n\n[http://www.w3.org/TR/cors/](http://www.w3.org/TR/cors/)\n\n## Pull Requests Welcome\n\n* Include `'use strict';` in every javascript file.\n* 2 space indentation.\n* Please run the testing steps below before submitting.\n\n## Testing\n\n```bash\n$ npm install\n$ npm test\n```\n\n## Interactive Testing Harness\n\n[http://node-cors-client.herokuapp.com](http://node-cors-client.herokuapp.com)\n\nRelated git repositories:\n\n* [https://github.com/TroyGoode/node-cors-server](https://github.com/TroyGoode/node-cors-server)\n* [https://github.com/TroyGoode/node-cors-client](https://github.com/TroyGoode/node-cors-client)\n\n## License\n\n[MIT License](http://www.opensource.org/licenses/mit-license.php)\n"
        },
        {
          "name": "HISTORY.md",
          "type": "blob",
          "size": 1.1416015625,
          "content": "2.8.5 / 2018-11-04\n==================\n\n  * Fix setting `maxAge` option to `0`\n\n2.8.4 / 2017-07-12\n==================\n\n  * Work-around Safari bug in default pre-flight response\n\n2.8.3 / 2017-03-29\n==================\n\n  * Fix error when options delegate missing `methods` option\n\n2.8.2 / 2017-03-28\n==================\n\n  * Fix error when frozen options are passed\n  * Send \"Vary: Origin\" when using regular expressions\n  * Send \"Vary: Access-Control-Request-Headers\" when dynamic `allowedHeaders`\n\n2.8.1 / 2016-09-08\n==================\n\nThis release only changed documentation.\n\n2.8.0 / 2016-08-23\n==================\n\n  * Add `optionsSuccessStatus` option\n\n2.7.2 / 2016-08-23\n==================\n\n  * Fix error when Node.js running in strict mode\n\n2.7.1 / 2015-05-28\n==================\n\n  * Move module into expressjs organization\n\n2.7.0 / 2015-05-28\n==================\n\n  * Allow array of matching condition as `origin` option\n  * Allow regular expression as `origin` option\n\n2.6.1 / 2015-05-28\n==================\n\n  * Update `license` in package.json\n\n2.6.0 / 2015-04-27\n==================\n\n  * Add `preflightContinue` option\n  * Fix \"Vary: Origin\" header added for \"*\"\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0693359375,
          "content": "(The MIT License)\n\nCopyright (c) 2013 Troy Goode <troygoode@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.6025390625,
          "content": "# cors\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Build Status][github-actions-ci-image]][github-actions-ci-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n\nCORS is a node.js package for providing a [Connect](http://www.senchalabs.org/connect/)/[Express](http://expressjs.com/) middleware that can be used to enable [CORS](http://en.wikipedia.org/wiki/Cross-origin_resource_sharing) with various options.\n\n**[Follow me (@troygoode) on Twitter!](https://twitter.com/intent/user?screen_name=troygoode)**\n\n* [Installation](#installation)\n* [Usage](#usage)\n  * [Simple Usage](#simple-usage-enable-all-cors-requests)\n  * [Enable CORS for a Single Route](#enable-cors-for-a-single-route)\n  * [Configuring CORS](#configuring-cors)\n  * [Configuring CORS w/ Dynamic Origin](#configuring-cors-w-dynamic-origin)\n  * [Enabling CORS Pre-Flight](#enabling-cors-pre-flight)\n  * [Configuring CORS Asynchronously](#configuring-cors-asynchronously)\n* [Configuration Options](#configuration-options)\n* [Demo](#demo)\n* [License](#license)\n* [Author](#author)\n\n## Installation\n\nThis is a [Node.js](https://nodejs.org/en/) module available through the\n[npm registry](https://www.npmjs.com/). Installation is done using the\n[`npm install` command](https://docs.npmjs.com/getting-started/installing-npm-packages-locally):\n\n```sh\n$ npm install cors\n```\n\n## Usage\n\n### Simple Usage (Enable *All* CORS Requests)\n\n```javascript\nvar express = require('express')\nvar cors = require('cors')\nvar app = express()\n\napp.use(cors())\n\napp.get('/products/:id', function (req, res, next) {\n  res.json({msg: 'This is CORS-enabled for all origins!'})\n})\n\napp.listen(80, function () {\n  console.log('CORS-enabled web server listening on port 80')\n})\n```\n\n### Enable CORS for a Single Route\n\n```javascript\nvar express = require('express')\nvar cors = require('cors')\nvar app = express()\n\napp.get('/products/:id', cors(), function (req, res, next) {\n  res.json({msg: 'This is CORS-enabled for a Single Route'})\n})\n\napp.listen(80, function () {\n  console.log('CORS-enabled web server listening on port 80')\n})\n```\n\n### Configuring CORS\n\n```javascript\nvar express = require('express')\nvar cors = require('cors')\nvar app = express()\n\nvar corsOptions = {\n  origin: 'http://example.com',\n  optionsSuccessStatus: 200 // some legacy browsers (IE11, various SmartTVs) choke on 204\n}\n\napp.get('/products/:id', cors(corsOptions), function (req, res, next) {\n  res.json({msg: 'This is CORS-enabled for only example.com.'})\n})\n\napp.listen(80, function () {\n  console.log('CORS-enabled web server listening on port 80')\n})\n```\n\n### Configuring CORS w/ Dynamic Origin\n\nThis module supports validating the origin dynamically using a function provided\nto the `origin` option. This function will be passed a string that is the origin\n(or `undefined` if the request has no origin), and a `callback` with the signature\n`callback(error, origin)`.\n\nThe `origin` argument to the callback can be any value allowed for the `origin`\noption of the middleware, except a function. See the\n[configuration options](#configuration-options) section for more information on all\nthe possible value types.\n\nThis function is designed to allow the dynamic loading of allowed origin(s) from\na backing datasource, like a database.\n\n```javascript\nvar express = require('express')\nvar cors = require('cors')\nvar app = express()\n\nvar corsOptions = {\n  origin: function (origin, callback) {\n    // db.loadOrigins is an example call to load\n    // a list of origins from a backing database\n    db.loadOrigins(function (error, origins) {\n      callback(error, origins)\n    })\n  }\n}\n\napp.get('/products/:id', cors(corsOptions), function (req, res, next) {\n  res.json({msg: 'This is CORS-enabled for an allowed domain.'})\n})\n\napp.listen(80, function () {\n  console.log('CORS-enabled web server listening on port 80')\n})\n```\n\n### Enabling CORS Pre-Flight\n\nCertain CORS requests are considered 'complex' and require an initial\n`OPTIONS` request (called the \"pre-flight request\"). An example of a\n'complex' CORS request is one that uses an HTTP verb other than\nGET/HEAD/POST (such as DELETE) or that uses custom headers. To enable\npre-flighting, you must add a new OPTIONS handler for the route you want\nto support:\n\n```javascript\nvar express = require('express')\nvar cors = require('cors')\nvar app = express()\n\napp.options('/products/:id', cors()) // enable pre-flight request for DELETE request\napp.del('/products/:id', cors(), function (req, res, next) {\n  res.json({msg: 'This is CORS-enabled for all origins!'})\n})\n\napp.listen(80, function () {\n  console.log('CORS-enabled web server listening on port 80')\n})\n```\n\nYou can also enable pre-flight across-the-board like so:\n\n```javascript\napp.options('*', cors()) // include before other routes\n```\n\nNOTE: When using this middleware as an application level middleware (for\nexample, `app.use(cors())`), pre-flight requests are already handled for all\nroutes.\n\n### Configuring CORS Asynchronously\n\n```javascript\nvar express = require('express')\nvar cors = require('cors')\nvar app = express()\n\nvar allowlist = ['http://example1.com', 'http://example2.com']\nvar corsOptionsDelegate = function (req, callback) {\n  var corsOptions;\n  if (allowlist.indexOf(req.header('Origin')) !== -1) {\n    corsOptions = { origin: true } // reflect (enable) the requested origin in the CORS response\n  } else {\n    corsOptions = { origin: false } // disable CORS for this request\n  }\n  callback(null, corsOptions) // callback expects two parameters: error and options\n}\n\napp.get('/products/:id', cors(corsOptionsDelegate), function (req, res, next) {\n  res.json({msg: 'This is CORS-enabled for an allowed domain.'})\n})\n\napp.listen(80, function () {\n  console.log('CORS-enabled web server listening on port 80')\n})\n```\n\n## Configuration Options\n\n* `origin`: Configures the **Access-Control-Allow-Origin** CORS header. Possible values:\n  - `Boolean` - set `origin` to `true` to reflect the [request origin](http://tools.ietf.org/html/draft-abarth-origin-09), as defined by `req.header('Origin')`, or set it to `false` to disable CORS.\n  - `String` - set `origin` to a specific origin. For example if you set it to `\"http://example.com\"` only requests from \"http://example.com\" will be allowed.\n  - `RegExp` - set `origin` to a regular expression pattern which will be used to test the request origin. If it's a match, the request origin will be reflected. For example the pattern `/example\\.com$/` will reflect any request that is coming from an origin ending with \"example.com\".\n  - `Array` - set `origin` to an array of valid origins. Each origin can be a `String` or a `RegExp`. For example `[\"http://example1.com\", /\\.example2\\.com$/]` will accept any request from \"http://example1.com\" or from a subdomain of \"example2.com\".\n  - `Function` - set `origin` to a function implementing some custom logic. The function takes the request origin as the first parameter and a callback (called as `callback(err, origin)`, where `origin` is a non-function value of the `origin` option) as the second.\n* `methods`: Configures the **Access-Control-Allow-Methods** CORS header. Expects a comma-delimited string (ex: 'GET,PUT,POST') or an array (ex: `['GET', 'PUT', 'POST']`).\n* `allowedHeaders`: Configures the **Access-Control-Allow-Headers** CORS header. Expects a comma-delimited string (ex: 'Content-Type,Authorization') or an array (ex: `['Content-Type', 'Authorization']`). If not specified, defaults to reflecting the headers specified in the request's **Access-Control-Request-Headers** header.\n* `exposedHeaders`: Configures the **Access-Control-Expose-Headers** CORS header. Expects a comma-delimited string (ex: 'Content-Range,X-Content-Range') or an array (ex: `['Content-Range', 'X-Content-Range']`). If not specified, no custom headers are exposed.\n* `credentials`: Configures the **Access-Control-Allow-Credentials** CORS header. Set to `true` to pass the header, otherwise it is omitted.\n* `maxAge`: Configures the **Access-Control-Max-Age** CORS header. Set to an integer to pass the header, otherwise it is omitted.\n* `preflightContinue`: Pass the CORS preflight response to the next handler.\n* `optionsSuccessStatus`: Provides a status code to use for successful `OPTIONS` requests, since some legacy browsers (IE11, various SmartTVs) choke on `204`.\n\nThe default configuration is the equivalent of:\n\n```json\n{\n  \"origin\": \"*\",\n  \"methods\": \"GET,HEAD,PUT,PATCH,POST,DELETE\",\n  \"preflightContinue\": false,\n  \"optionsSuccessStatus\": 204\n}\n```\n\nFor details on the effect of each CORS header, read [this](https://web.dev/cross-origin-resource-sharing/) article on web.dev.\n\n## Demo\n\nA demo that illustrates CORS working (and not working) using React is available here: [https://node-cors-client.netlify.com](https://node-cors-client.netlify.com)\n\nCode for that demo can be found here:\n\n* Client: [https://github.com/troygoode/node-cors-client](https://github.com/troygoode/node-cors-client)\n* Server: [https://github.com/troygoode/node-cors-server](https://github.com/troygoode/node-cors-server)\n\n## License\n\n[MIT License](http://www.opensource.org/licenses/mit-license.php)\n\n## Author\n\n[Troy Goode](https://github.com/TroyGoode) ([troygoode@gmail.com](mailto:troygoode@gmail.com))\n\n[coveralls-image]: https://img.shields.io/coveralls/expressjs/cors/master.svg\n[coveralls-url]: https://coveralls.io/r/expressjs/cors?branch=master\n[downloads-image]: https://img.shields.io/npm/dm/cors.svg\n[downloads-url]: https://npmjs.org/package/cors\n[github-actions-ci-image]: https://img.shields.io/github/actions/workflow/status/expressjs/cors/ci.yml?branch=master&label=ci\n[github-actions-ci-url]: https://github.com/expressjs/cors?query=workflow%3Aci\n[npm-image]: https://img.shields.io/npm/v/cors.svg\n[npm-url]: https://npmjs.org/package/cors\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.8798828125,
          "content": "{\n  \"name\": \"cors\",\n  \"description\": \"Node.js CORS middleware\",\n  \"version\": \"2.8.5\",\n  \"author\": \"Troy Goode <troygoode@gmail.com> (https://github.com/troygoode/)\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"cors\",\n    \"express\",\n    \"connect\",\n    \"middleware\"\n  ],\n  \"repository\": \"expressjs/cors\",\n  \"main\": \"./lib/index.js\",\n  \"dependencies\": {\n    \"object-assign\": \"^4\",\n    \"vary\": \"^1\"\n  },\n  \"devDependencies\": {\n    \"after\": \"0.8.2\",\n    \"eslint\": \"7.30.0\",\n    \"express\": \"4.17.1\",\n    \"mocha\": \"9.1.1\",\n    \"nyc\": \"15.1.0\",\n    \"supertest\": \"6.1.3\"\n  },\n  \"files\": [\n    \"lib/index.js\",\n    \"CONTRIBUTING.md\",\n    \"HISTORY.md\",\n    \"LICENSE\",\n    \"README.md\"\n  ],\n  \"engines\": {\n    \"node\": \">= 0.10\"\n  },\n  \"scripts\": {\n    \"test\": \"npm run lint && npm run test-ci\",\n    \"test-ci\": \"nyc --reporter=lcov --reporter=text mocha --require test/support/env\",\n    \"lint\": \"eslint lib test\"\n  }\n}\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}