{
  "metadata": {
    "timestamp": 1736562909054,
    "page": 499,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "svaarala/duktape",
      "stars": 5979,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 9.091796875,
          "content": "# https://clang.llvm.org/docs/ClangFormatStyleOptions.html\n\nBasedOnStyle: LLVM\nLanguage: Cpp\n\nIndentWidth: 8\nTabWidth: 8\n#ColumnLimit: 120\nColumnLimit: 132\nConstructorInitializerIndentWidth: 8\n#ContinuationIndentWidth: 8\nContinuationIndentWidth: 4\n#UseTab: ForContinuationAndIndentation\nUseTab: AlignWithSpaces\nUseCRLF: false\n\n#AccessModifierOffset: -8  # for C++ public, private, etc\n#AccessModifierOffset: -2\nAlignAfterOpenBracket: Align\n#AlignArrayOfStructures: None\nAlignConsecutiveAssignments: None\nAlignConsecutiveBitFields: None\nAlignConsecutiveDeclarations: None\n#AlignConsecutiveMacros: Consecutive\nAlignConsecutiveMacros: AcrossComments\nAlignEscapedNewlines: DontAlign\nAlignOperands: Align\n#AlignTrailingComments: true\nAlignTrailingComments: false\n\nAllowAllArgumentsOnNextLine: false\n#AllowAllConstructorInitializersOnNextLine: false\nAllowAllParametersOfDeclarationOnNextLine: false\nAllowShortBlocksOnASingleLine: Never\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortEnumsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: None\nAllowShortIfStatementsOnASingleLine: Never\nAllowShortLambdasOnASingleLine: None\nAllowShortLoopsOnASingleLine: false\n\n#AlwaysBreakAfterDefinitionReturnType\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: false\nAlwaysBreakTemplateDeclarations: No\n\n#AttributeMacros:\n#  - DUK_EXTERNAL_DECL\n#  - DUK_EXTERNAL\n#  - DUK_INTERNAL_DECL\n#  - DUK_INTERNAL\n#  - DUK_LOCAL_DECL\n#  - DUK_LOCAL\n#  - DUK_NORETURN\n\nBinPackArguments: false\nBinPackParameters: false\nBitFieldColonSpacing: After\n\n#BreakBeforeBraces: Custom\n#BraceWrapping: {}\n\n#BreakAfterJavaFieldAnnotations\nBreakBeforeBinaryOperators: None\nBreakBeforeBraces: Attach\n#BreakBeforeConceptDeclarations\nBreakBeforeTernaryOperators: false\nBreakConstructorInitializers: AfterColon\n#BreakInheritanceList: AfterComma\nBreakStringLiterals: true\n\n#CommentPragmas\nCompactNamespaces: false\n#ConstructorInitializerAllOnOneLineOrOnePerLine\nCpp11BracedListStyle: false\nDeriveLineEnding: false\nDerivePointerAlignment: false\n#DisableFormat\n#EmptyLineAfterAccessModifier: Never\nEmptyLineBeforeAccessModifier: Never\n#ExperimentalAutoDetectBinPacking\nFixNamespaceComments: false\n#ForEachMacros: []\n#IfMacros: []\nIncludeBlocks: Preserve\n#IncludeCategories\n#IncludeIsMainRegex\n#IncludeIsMainSourceRegex\n#IndentAccessModifiers: false\nIndentCaseBlocks: false\nIndentCaseLabels: false\nIndentExternBlock: NoIndent\nIndentGotoLabels: true\nIndentPPDirectives: None\n#IndentRequires\nIndentWrappedFunctionNames: false\nInsertTrailingCommas: None\n#JavaImportGroups: []\n#JavaScriptQuotes: Single\n#JavaScriptWrapImports: true\nKeepEmptyLinesAtTheStartOfBlocks: false\n#LambdaBodyIndentation\n#MacroBlockBegin\n#MacroBlockEnd\nMaxEmptyLinesToKeep: 1\n#NamespaceIndentation: None\n#NamespaceMacros\n#ObjCBinPackProtocolList\n#ObjCBlockIndentWidth\n#ObjCBreakBeforeNestedBlockParam\n#ObjCSpaceAfterProperty\n#ObjCSpaceBeforeProtocolList\n#PPIndentWidth: 0\n#PackConstructorInitializers: CurrentLine\n\n#PenaltyBreakAssignment\n#PenaltyBreakBeforeFirstCallParameter\n#PenaltyBreakComment\n#PenaltyBreakFirstLessLess\n#PenaltyBreakString\n#PenaltyBreakTemplateDeclaration\n#PenaltyExcessCharacter\n#PenaltyIndentedWhitespace\nPenaltyReturnTypeOnItsOwnLine: 1000\n\nPointerAlignment: Right\n#RawStringFormats\n#ReferenceAlignment: Right\nReflowComments: true\n#ReflowComments: false\n#ShortNamespaceLines\nSortIncludes: false\n#SortJavaStaticImport\n#SortUsingDeclarations\nSpaceAfterCStyleCast: true\nSpaceAfterLogicalNot: false\n#SpaceAfterTemplateKeyword\nSpaceAroundPointerQualifiers: Before\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeCaseColon: false\n#SpaceBeforeCpp11BracedList: true\n#SpaceBeforeCtorInitializerColon: false\n#SpaceBeforeInheritanceColon: false\nSpaceBeforeParens: ControlStatements\n#SpaceBeforeRangeBasedForLoopColon\nSpaceBeforeSquareBrackets: false\nSpaceInEmptyBlock: false\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 1\n#SpacesInAngles\nSpacesInCStyleCastParentheses: false\nSpacesInConditionalStatement: false\nSpacesInContainerLiterals: true\n#SpacesInLineCommentPrefix\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\n#Standard\n#StatementAttributeLikeMacros\n#StatementMacros\n#TypenameMacros\n#WhitespaceSensitiveMacros\n\n# LLVM defaults for clang-format-12\n# $ clang-format-12 -style=llvm -dump-config\n# ---\n# Language:        Cpp\n# # BasedOnStyle:  LLVM\n# AccessModifierOffset: -2\n# AlignAfterOpenBracket: Align\n# AlignConsecutiveMacros: None\n# AlignConsecutiveAssignments: None\n# AlignConsecutiveBitFields: None\n# AlignConsecutiveDeclarations: None\n# AlignEscapedNewlines: Right\n# AlignOperands:   Align\n# AlignTrailingComments: true\n# AllowAllArgumentsOnNextLine: true\n# AllowAllConstructorInitializersOnNextLine: true\n# AllowAllParametersOfDeclarationOnNextLine: true\n# AllowShortEnumsOnASingleLine: true\n# AllowShortBlocksOnASingleLine: Never\n# AllowShortCaseLabelsOnASingleLine: false\n# AllowShortFunctionsOnASingleLine: All\n# AllowShortLambdasOnASingleLine: All\n# AllowShortIfStatementsOnASingleLine: Never\n# AllowShortLoopsOnASingleLine: false\n# AlwaysBreakAfterDefinitionReturnType: None\n# AlwaysBreakAfterReturnType: None\n# AlwaysBreakBeforeMultilineStrings: false\n# AlwaysBreakTemplateDeclarations: MultiLine\n# AttributeMacros:\n#   - __capability\n# BinPackArguments: true\n# BinPackParameters: true\n# BraceWrapping:\n#   AfterCaseLabel:  false\n#   AfterClass:      false\n#   AfterControlStatement: Never\n#   AfterEnum:       false\n#   AfterFunction:   false\n#   AfterNamespace:  false\n#   AfterObjCDeclaration: false\n#   AfterStruct:     false\n#   AfterUnion:      false\n#   AfterExternBlock: false\n#   BeforeCatch:     false\n#   BeforeElse:      false\n#   BeforeLambdaBody: false\n#   BeforeWhile:     false\n#   IndentBraces:    false\n#   SplitEmptyFunction: true\n#   SplitEmptyRecord: true\n#   SplitEmptyNamespace: true\n# BreakBeforeBinaryOperators: None\n# BreakBeforeConceptDeclarations: true\n# BreakBeforeBraces: Attach\n# BreakBeforeInheritanceComma: false\n# BreakInheritanceList: BeforeColon\n# BreakBeforeTernaryOperators: true\n# BreakConstructorInitializersBeforeComma: false\n# BreakConstructorInitializers: BeforeColon\n# BreakAfterJavaFieldAnnotations: false\n# BreakStringLiterals: true\n# ColumnLimit:     80\n# CommentPragmas:  '^ IWYU pragma:'\n# CompactNamespaces: false\n# ConstructorInitializerAllOnOneLineOrOnePerLine: false\n# ConstructorInitializerIndentWidth: 4\n# ContinuationIndentWidth: 4\n# Cpp11BracedListStyle: true\n# DeriveLineEnding: true\n# DerivePointerAlignment: false\n# DisableFormat:   false\n# EmptyLineBeforeAccessModifier: LogicalBlock\n# ExperimentalAutoDetectBinPacking: false\n# FixNamespaceComments: true\n# ForEachMacros:\n#   - foreach\n#   - Q_FOREACH\n#   - BOOST_FOREACH\n# StatementAttributeLikeMacros:\n#   - Q_EMIT\n# IncludeBlocks:   Preserve\n# IncludeCategories:\n#   - Regex:           '^\"(llvm|llvm-c|clang|clang-c)/'\n#     Priority:        2\n#     SortPriority:    0\n#     CaseSensitive:   false\n#   - Regex:           '^(<|\"(gtest|gmock|isl|json)/)'\n#     Priority:        3\n#     SortPriority:    0\n#     CaseSensitive:   false\n#   - Regex:           '.*'\n#     Priority:        1\n#     SortPriority:    0\n#     CaseSensitive:   false\n# IncludeIsMainRegex: '(Test)?$'\n# IncludeIsMainSourceRegex: ''\n# IndentCaseLabels: false\n# IndentCaseBlocks: false\n# IndentGotoLabels: true\n# IndentPPDirectives: None\n# IndentExternBlock: AfterExternBlock\n# IndentRequires:  false\n# IndentWidth:     2\n# IndentWrappedFunctionNames: false\n# InsertTrailingCommas: None\n# JavaScriptQuotes: Leave\n# JavaScriptWrapImports: true\n# KeepEmptyLinesAtTheStartOfBlocks: true\n# MacroBlockBegin: ''\n# MacroBlockEnd:   ''\n# MaxEmptyLinesToKeep: 1\n# NamespaceIndentation: None\n# ObjCBinPackProtocolList: Auto\n# ObjCBlockIndentWidth: 2\n# ObjCBreakBeforeNestedBlockParam: true\n# ObjCSpaceAfterProperty: false\n# ObjCSpaceBeforeProtocolList: true\n# PenaltyBreakAssignment: 2\n# PenaltyBreakBeforeFirstCallParameter: 19\n# PenaltyBreakComment: 300\n# PenaltyBreakFirstLessLess: 120\n# PenaltyBreakString: 1000\n# PenaltyBreakTemplateDeclaration: 10\n# PenaltyExcessCharacter: 1000000\n# PenaltyReturnTypeOnItsOwnLine: 60\n# PenaltyIndentedWhitespace: 0\n# PointerAlignment: Right\n# ReflowComments:  true\n# SortIncludes:    true\n# SortJavaStaticImport: Before\n# SortUsingDeclarations: true\n# SpaceAfterCStyleCast: false\n# SpaceAfterLogicalNot: false\n# SpaceAfterTemplateKeyword: true\n# SpaceBeforeAssignmentOperators: true\n# SpaceBeforeCaseColon: false\n# SpaceBeforeCpp11BracedList: false\n# SpaceBeforeCtorInitializerColon: true\n# SpaceBeforeInheritanceColon: true\n# SpaceBeforeParens: ControlStatements\n# SpaceAroundPointerQualifiers: Default\n# SpaceBeforeRangeBasedForLoopColon: true\n# SpaceInEmptyBlock: false\n# SpaceInEmptyParentheses: false\n# SpacesBeforeTrailingComments: 1\n# SpacesInAngles:  false\n# SpacesInConditionalStatement: false\n# SpacesInContainerLiterals: true\n# SpacesInCStyleCastParentheses: false\n# SpacesInParentheses: false\n# SpacesInSquareBrackets: false\n# SpaceBeforeSquareBrackets: false\n# BitFieldColonSpacing: Both\n# Standard:        Latest\n# StatementMacros:\n#   - Q_UNUSED\n#   - QT_REQUIRE_VERSION\n# TabWidth:        8\n# UseCRLF:         false\n# UseTab:          Never\n# WhitespaceSensitiveMacros:\n#   - STRINGIZE\n#   - PP_STRINGIZE\n#   - BOOST_PP_STRINGIZE\n#   - NS_SWIFT_NAME\n#   - CF_SWIFT_NAME\n# ...\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.5126953125,
          "content": "# https://editorconfig.org/\n#\n# Approximate configuration for the Duktape code base.\n\nroot = true\n\n[*.{c,h,c.in,h.in}]\nend_of_line = lf\ninsert_final_newline = true\ncharset = utf-8\nindent_style = tab\nindent_size = 8\ntrim_trailing_whitespace = true\n\n[*.js]\nend_of_line = lf\ninsert_final_newline = true\ncharset = utf-8\nindent_style = space\nindent_size = 4\ntrim_trailing_whitespace = true\n\n[Makefile]\nend_of_line = lf\ninsert_final_newline = true\ncharset = utf-8\nindent_style = tab\nindent_size = 8\ntrim_trailing_whitespace = true\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1328125,
          "content": "*.c\t\teol=lf\n*.h\t\teol=lf\n*.h.in\t\teol=lf\n*.js\t\teol=lf\n*.sh\t\teol=lf\n*.md\t\teol=lf\n*.rst\t\teol=lf\n*.txt\t\teol=lf\n*.yaml\t\teol=lf\n*.json\t\teol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.873046875,
          "content": "*~\n*.swp\n*.o\n*.strip\n*.pyc\nmassif-*.out\nms_print.*\n/*.gcda\n/*.su\n/_*\n/node_modules\n/package-lock.json\n/duk\n/runtests/package-lock.json\n/docker/*/gitconfig\n/docker/*/prepare_repo.sh\n/deps/\n/build/\n/prep/\n/dist/\n/tmp/\n/site/\n/stuff/\n/doc/*.pdf\n/runtests/node_modules/\n/debugger/jquery-ui-1.11.2.zip\n/debugger/jquery-ui-1.11.2/\n/debugger/node_modules/\n/debugger/static/images/\n/debugger/static/jquery-1.11.1.min.js\n/debugger/static/jquery-ui.min.css\n/debugger/static/jquery-ui.min.js\n/debugger/static/reset.css\n/debugger/static/socket.io-1.2.0.js\n/references/ECMA-262 5th edition December 2009.pdf\n/references/ECMA-262 5.1 edition June 2011.pdf\n/references/ECMA-262.pdf\n/tests/octane/octane\n/src-tools/from-xml\n/src-tools/js-yaml\n/src-tools/node_modules\n/src-tools/lib/extdeps\n/src-tools/lib/extdeps/from-xml.js\n/src-tools/lib/extdeps/js-yaml.js\n/src-tools/package-lock.json\n/src-tools/duktool.js\n"
        },
        {
          "name": "AUTHORS.rst",
          "type": "blob",
          "size": 4.5087890625,
          "content": "===============\nDuktape authors\n===============\n\nCopyright\n=========\n\nDuktape copyrights are held by its authors.  Each author has a copyright\nto their contribution, and agrees to irrevocably license the contribution\nunder the Duktape ``LICENSE.txt``.\n\nAuthors\n=======\n\nPlease include an e-mail address, a link to your GitHub profile, or something\nsimilar to allow your contribution to be identified accurately.\n\nThe following people have contributed code, website contents, or Wiki contents,\nand agreed to irrevocably license their contributions under the Duktape\n``LICENSE.txt`` (in order of appearance):\n\n* Sami Vaarala <sami.vaarala@iki.fi>\n* Niki Dobrev\n* Andreas Öman <andreas@lonelycoder.com>\n* László Langó <llango.u-szeged@partner.samsung.com>\n* Legimet <legimet.calc@gmail.com>\n* Karl Skomski <karl@skomski.com>\n* Bruce Pascoe <fatcerberus1@gmail.com>\n* René Hollander <rene@rene8888.at>\n* Julien Hamaide (https://github.com/crazyjul)\n* Sebastian Götte (https://github.com/jaseg)\n* Tomasz Magulski (https://github.com/magul)\n* \\D. Bohdan (https://github.com/dbohdan)\n* Ondřej Jirman (https://github.com/megous)\n* Saúl Ibarra Corretgé <saghul@gmail.com>\n* Jeremy HU <huxingyi@msn.com>\n* Ole André Vadla Ravnås (https://github.com/oleavr)\n* Harold Brenes (https://github.com/harold-b)\n* Oliver Crow (https://github.com/ocrow)\n* Jakub Chłapiński (https://github.com/jchlapinski)\n* Brett Vickers (https://github.com/beevik)\n* Dominik Okwieka (https://github.com/okitec)\n* Remko Tronçon (https://el-tramo.be)\n* Romero Malaquias (rbsm@ic.ufal.br)\n* Michael Drake <michael.drake@codethink.co.uk>\n* Steven Don (https://github.com/shdon)\n* Simon Stone (https://github.com/sstone1)\n* \\J. McC. (https://github.com/jmhmccr)\n* Jakub Nowakowski (https://github.com/jimvonmoon)\n* Tommy Nguyen (https://github.com/tn0502)\n* Fabrice Fontaine (https://github.com/ffontaine)\n* Christopher Hiller (https://github.com/boneskull)\n* Gonzalo Diethelm (https://github.com/gonzus)\n* Michal Kasperek (https://github.com/michalkas)\n* Andrew Janke (https://github.com/apjanke)\n* Steve Fan (https://github.com/stevefan1999)\n* Edward Betts (https://github.com/edwardbetts)\n* Ozhan Duz (https://github.com/webfolderio)\n* Akos Kiss (https://github.com/akosthekiss)\n* TheBrokenRail (https://github.com/TheBrokenRail)\n* Jesse Doyle (https://github.com/jessedoyle)\n* Gero Kuehn (https://github.com/dc6jgk)\n* James Swift (https://github.com/phraemer)\n* Luis de Bethencourt (https://github.com/luisbg)\n* Ian Whyman (https://github.com/v00d00)\n* Rick Sayre (https://github.com/whorfin)\n* Craig Leres (https://github.com/leres)\n* Maurici Abad (https://github.com/mauriciabad)\n* Nancy Li (https://github.com/NancyLi1013)\n* William Parks (https://github.com/WilliamParks)\n* Sam Hellawell (https://github.com/samhellawell)\n* Vladislavs Sokurenko (https://github.com/sokurenko)\n* Luca Boccassi (https://github.com/bluca)\n* Radu Rendec (https://github.com/rrendec)\n* tinywrkb (https://github.com/tinywrkb)\n* Christoph Kaser (https://github.com/ChristophKaser)\n* Jonne Ransijn <jonne@yyny.dev>\n* Liu Xiang <liuxiang@loongson.cn>\n\nOther contributions\n===================\n\nThe following people have contributed something other than code (e.g. reported\nbugs, provided ideas, etc; roughly in order of appearance):\n\n* Greg Burns\n* Anthony Rabine\n* Carlos Costa\n* Aurélien Bouilland\n* Preet Desai (Pris Matic)\n* judofyr (http://www.reddit.com/user/judofyr)\n* Jason Woofenden\n* Michał Przybyś\n* Anthony Howe\n* Conrad Pankoff\n* Jim Schimpf\n* Rajaran Gaunker (https://github.com/zimbabao)\n* Andreas Öman\n* Doug Sanden\n* Josh Engebretson (https://github.com/JoshEngebretson)\n* Remo Eichenberger (https://github.com/remoe)\n* Mamod Mehyar (https://github.com/mamod)\n* David Demelier (https://github.com/markand)\n* Tim Caswell (https://github.com/creationix)\n* Mitchell Blank Jr (https://github.com/mitchblank)\n* https://github.com/yushli\n* Seo Sanghyeon (https://github.com/sanxiyn)\n* Han ChoongWoo (https://github.com/tunz)\n* Joshua Peek (https://github.com/josh)\n* Bruce E. Pascoe (https://github.com/fatcerberus)\n* https://github.com/Kelledin\n* https://github.com/sstruchtrup\n* Michael Drake (https://github.com/tlsa)\n* https://github.com/chris-y\n* Laurent Zubiaur (https://github.com/lzubiaur)\n* Neil Kolban (https://github.com/nkolban)\n* Wilhelm Wanecek (https://github.com/wanecek)\n* Andrew Janke (https://github.com/apjanke)\n* Unamer (https://github.com/unamer)\n* Karl Dahlke (eklhad@gmail.com)\n* https://github.com/k3a\n\nIf you are accidentally missing from this list, send me an e-mail\n(``sami.vaarala@iki.fi``) and I'll fix the omission.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.1015625,
          "content": "Contributing to Duktape\n=======================\n\nCopyrights and licensing\n------------------------\n\nDuktape copyrights are held by its contributors.  Contributors agree to\nlicense their contribution(s) under Duktape `LICENSE.txt`.  See `AUTHORS.rst`\nfor details.\n\nTo make a code contribution to Duktape\n--------------------------------------\n\n* Fork the Duktape GitHub repository and make your changes:\n\n  - Use a well named topic branch for the changes, with lowercase and dashes,\n    e.g. `xyz-compiler-fixes`.\n\n  - Fork off the `master` branch.  Avoid forking from Duktape repository work\n    branches as they are frequently rebased.\n\n  - Your branch should have a consistent logical scope.  If the branch does\n    several independent things (like adding a feature and fixing some unrelated\n    repo scripts), use separate branches.\n\n* Test your changes as thoroughly as possible.  At the very minimum:\n\n  - CI test runs must pass, which covers both a code policy check, and\n    runs basic API and ECMAScript test case set.\n\n  - If some test cases are invalidated by the changes, fix the test cases as\n    part of the branch.  If you add new functionality, you should add test\n    case(s) to illustrate the changes and desired behavior.\n\n  - Fix any code policy violations or let me know if the policy check is\n    broken.  Consistent code is easier to read.\n\n* Ensure your code follows the style guidelines in `code-issues.rst`.\n  Not everything is spelled out explicitly, so try to follow the general\n  style in the code base.\n\n* Reformat code with clang-format and ensure there's no diff:\n\n  ```\n  $ make docker-image-clang-format\n  $ make clang-format-source\n  ```\n\n* Clean up your commits so that they are logical and well scoped:\n\n  - Rebase your pull request if necessary so that commits are logical and\n    clean.  A smaller number of larger, logical commits are preferred over\n    small commits and \"fixups\".\n\n  - Keep commits to source separate from commits to documentation.\n\n  - If the branch includes a fix that might be cherry picked into a\n    maintenance release, ensure that fix is in a separate commit.\n\n* Add yourself to the end of the author list in `AUTHORS.rst` if you're\n  not already on the list.  By doing this you confirm that:\n\n  - You own the rights to the contribution, or have the legal right to\n    license the contribution under Duktape `LICENSE.txt` on behalf of\n    the copyright owner(s).\n\n  - You, or the copyright owner(s), agree to irrevocably license your\n    contribution under Duktape `LICENSE.txt`.\n\n  - Please include an e-mail address, a link to your GitHub profile, or\n    something similar to allow your contribution to be identified accurately.\n\n* Create a pull request in GitHub.  For now, the \"base branch\" should be\n  \"master\", i.e. the pull requests are merged directly to the master branch.\n  In the description:\n\n  - Summarize the change and the motivation for the change.\n\n  - If test case status changes (tests are broken / fixed, test cases\n    themselves needed fixing, test cases were added, etc), mention that.\n\n  - A pull request can be created before you think your changes are finished.\n    It's OK to work on a feature in the pull request: this facilitates\n    discussion in the pull request comments.\n\n* When the changes are finished, comment on the pull that you're no longer\n  making any changes and would like the branch to be merged.  If there is\n  feedback needing fixes, comment when you're done.  This ensures merges\n  are not done too early.\n\nTo report bugs or request features\n----------------------------------\n\nSee [SECURITY.md](https://github.com/svaarala/duktape/blob/master/SECURITY.md) for reporting security vulnerabilities.\n\nUse GitHub issues to report bugs or request features:\n\n* Please include a compilation or execution log to help diagnosis.\n\n* For portability related compilation errors, such as endianness detection,\n  please include a list of the preprocessor defines provided by your compiler\n  (if possible).  For GCC and Clang there are helpful Makefile targets,\n  `gccpredefs` and `clangpredefs`.\n\nIf you don't think your request needs a wide audience, you can also\nsend e-mail to <sami.vaarala@iki.fi>.\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.0830078125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2013-present, Duktape authors (see AUTHORS.rst)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 68.2763671875,
          "content": "#\n#  Makefile for the Duktape development repo.\n#\n#  This Makefile is intended ONLY for internal Duktape development\n#  on Linux (or other UNIX-like operating systems).  Docker can be\n#  used to reduce host dependencies.  The Makefile covers:\n#\n#    - Building the Duktape source distributable\n#    - Building the duktape.org website\n#    - Building Duktape and running test cases\n#    - Building useful Docker images\n#    - Miscellaneous development tasks\n#\n#  The Makefile now also works in a very limited fashion with Cygwin,\n#  you can 'make dist/source' as long as you have enough software installed.\n#\n#  The source distributable has more platform neutral example Makefiles\n#  for end user projects, though an end user should really just use their\n#  own build system.\n#\n#  YOU SHOULD NOT COMPILE DUKTAPE WITH THIS MAKEFILE IN YOUR PROJECT!\n#\n#  When creating actual distributables, always use a clean checkout.\n#\n#  External projects are downloaded on-the-fly.  Clone git repos shallowly\n#  (--depth 1) whenever possible.  With build-critical resources, use a\n#  specific version instead of master.  External dependencies are cached\n#  in deps/ and are removed only by 'make cleanall' (not by 'make clean').\n#\n#  The makefile should work with -jN except for the 'clean' target, use:\n#\n#    $ make clean; make -j4\n#\n\n# A few commands which may need to be edited.  NodeJS is sometimes found\n# as 'nodejs', sometimes as 'node'; sometimes 'node' is unrelated to NodeJS\n# so check 'nodejs' first.\nGIT ?= $(shell command -v git 2>/dev/null)\nGIT := $(GIT)\nNODEJS ?= $(shell { command -v nodejs || command -v node; } 2>/dev/null)\nNODEJS := $(NODEJS)\nWGET ?= $(shell command -v wget 2>/dev/null)\nWGET := $(WGET)\nJAVA ?= $(shell command -v java 2>/dev/null)\nJAVA := $(JAVA)\nVALGRIND ?= $(shell command -v valgrind 2>/dev/null)\nVALGRIND := $(VALGRIND)\nPYTHON3 ?= $(shell { command -v python3 || command -v python; } 2>/dev/null)\nPYTHON3 := $(PYTHON3)\nPYTHON2 ?= $(shell { command -v python2 || command -v python; } 2>/dev/null)\nPYTHON2 := $(PYTHON2)\nPYTHON ?= $(PYTHON2)\nPYTHON := $(PYTHON)\nDOCKER ?= docker\nDOCKER := $(DOCKER)\nSCAN_BUILD ?= scan-build-7\nSCAN_BUILD := $(SCAN_BUILD)\nGCC ?= gcc\nGCC := $(GCC)\nGXX ?= g++\nGXX := $(GXX)\nCLANG ?= clang\nCLANG := $(CLANG)\n\n# Scrape version from the public header; convert from e.g. 10203 -> '1.2.3'.\nDUK_VERSION_PACKAGE_JSON := $(shell $(NODEJS) -e 'var t = JSON.parse(require(\"fs\").readFileSync(\"package.json\")).version.split(\".\"); require(\"process\").stdout.write(String(Number(t[0]) * 1e4 + Number(t[1]) * 1e2 + Number(t[2])));')\nDUK_VERSION_HEADER := $(shell cat src-input/duktape.h.in | grep 'define ' | grep DUK_VERSION | tr -s ' ' ' ' | cut -d ' ' -f 3 | tr -d 'L')\nDUK_VERSION := $(DUK_VERSION_HEADER)\n#DUK_VERSION := $(DUK_VERSION_PACKAGE_JSON)\nDUK_MAJOR := $(shell $(NODEJS) -e 'require(\"process\").stdout.write(String(Math.floor(Number(process.argv[1]) / 10000)))' $(DUK_VERSION))\nDUK_MINOR := $(shell $(NODEJS) -e 'require(\"process\").stdout.write(String(Math.floor(Number(process.argv[1]) % 10000 / 100)))' $(DUK_VERSION))\nDUK_PATCH := $(shell $(NODEJS) -e 'require(\"process\").stdout.write(String(Math.floor(Number(process.argv[1]) % 100)))' $(DUK_VERSION))\nDUK_VERSION_FORMATTED := $(DUK_MAJOR).$(DUK_MINOR).$(DUK_PATCH)\nGIT_BRANCH := $(shell $(GIT) rev-parse --abbrev-ref HEAD)\nGIT_DESCRIBE := $(shell $(GIT) describe --always --dirty)\nifeq ($(GIT_BRANCH),master)\nGIT_INFO := $(GIT_DESCRIBE)\nelse\nGIT_INFO := $(GIT_DESCRIBE)-$(GIT_BRANCH)\nendif\nBUILD_DATETIME := $(shell date +%Y%m%d%H%M%S)\n\nifeq ($(OS),Windows_NT)\nDETECTED_OS := Windows\nelse\nDETECTED_OS := $(shell uname -s)\nendif\n\n# Docker image suffix, e.g. duktape-base-ubuntu-20.04-$(DOCKER_ARCH).  Example override:\n# DOCKER_ARCH=arm64.\nDOCKER_ARCH ?= x64\n\n# Source lists.\nDUKTAPE_CMDLINE_SOURCES = \\\n\texamples/cmdline/duk_cmdline.c \\\n\texamples/alloc-logging/duk_alloc_logging.c \\\n\texamples/alloc-torture/duk_alloc_torture.c \\\n\texamples/alloc-hybrid/duk_alloc_hybrid.c \\\n\textras/print-alert/duk_print_alert.c \\\n\textras/console/duk_console.c \\\n\textras/logging/duk_logging.c \\\n\textras/module-duktape/duk_module_duktape.c\nifdef SYSTEMROOT  # Windows\nDUKTAPE_CMDLINE_SOURCES += examples/debug-trans-socket/duk_trans_socket_windows.c\nelse\nDUKTAPE_CMDLINE_SOURCES += examples/debug-trans-socket/duk_trans_socket_unix.c\nendif\nifdef SYSTEMROOT  # Windows\nLINENOISE_SOURCES =\nLINENOISE_HEADERS =\nelse\nLINENOISE_SOURCES = deps/linenoise/linenoise.c\nLINENOISE_HEADERS = deps/linenoise/linenoise.h\nendif\n\n# Configure.py options for a few configuration profiles needed.\nCONFIGOPTS_NONDEBUG = --option-file util/makeduk_base.yaml\nCONFIGOPTS_NONDEBUG_SCANBUILD = --option-file util/makeduk_base.yaml --option-file util/makeduk_scanbuild.yaml\nCONFIGOPTS_NONDEBUG_PERF = --option-file config/examples/performance_sensitive.yaml\nCONFIGOPTS_NONDEBUG_SIZE = --option-file config/examples/low_memory.yaml\nCONFIGOPTS_NONDEBUG_ROM = --rom-support --rom-auto-lightfunc --option-file util/makeduk_base.yaml -DDUK_USE_ROM_STRINGS -DDUK_USE_ROM_OBJECTS -DDUK_USE_ROM_GLOBAL_INHERIT -UDUK_USE_HSTRING_ARRIDX\nCONFIGOPTS_NONDEBUG_DUKLOW = --option-file config/examples/low_memory.yaml --option-file util/makeduk_duklow.yaml --fixup-file util/makeduk_duklow_fixup.h\nCONFIGOPTS_DEBUG_DUKLOW = $(CONFIGOPTS_NONDEBUG_DUKLOW) --option-file util/makeduk_debug.yaml\nCONFIGOPTS_NONDEBUG_DUKLOW_ROM = --rom-support --rom-auto-lightfunc --option-file config/examples/low_memory.yaml --option-file util/makeduk_duklow.yaml --fixup-file util/makeduk_duklow_fixup.h --builtin-file util/example_user_builtins1.yaml --builtin-file util/example_user_builtins2.yaml -DDUK_USE_ROM_STRINGS -DDUK_USE_ROM_OBJECTS -DDUK_USE_ROM_GLOBAL_INHERIT -UDUK_USE_HSTRING_ARRIDX -UDUK_USE_DEBUG\nCONFIGOPTS_DEBUG_DUKLOW_ROM = $(CONFIGOPTS_NONDEBUG_DUKLOW_ROM) --option-file util/makeduk_debug.yaml\nCONFIGOPTS_NONDEBUG_DUKLOW_NOREFC = --option-file config/examples/low_memory.yaml --option-file util/makeduk_duklow.yaml --fixup-file util/makeduk_duklow_fixup.h -UDUK_USE_REFERENCE_COUNTING -UDUK_USE_DOUBLE_LINKED_HEAP\nCONFIGOPTS_DEBUG_DUKLOW_NOREFC = $(CONFIGOPTS_NONDEBUG_DUKLOW_NOREFC) --option-file util/makeduk_debug.yaml\nCONFIGOPTS_DEBUG = --option-file util/makeduk_base.yaml --option-file util/makeduk_debug.yaml\nCONFIGOPTS_DEBUG_SCANBUILD = --option-file util/makeduk_base.yaml --option-file util/makeduk_debug.yaml --option-file util/makeduk_scanbuild.yaml\nCONFIGOPTS_DEBUG_ROM = --rom-support --rom-auto-lightfunc --option-file util/makeduk_base.yaml --option-file util/makeduk_debug.yaml -DDUK_USE_ROM_STRINGS -DDUK_USE_ROM_OBJECTS -DDUK_USE_ROM_GLOBAL_INHERIT -UDUK_USE_HSTRING_ARRIDX\nCONFIGOPTS_EMDUK = -UDUK_USE_FASTINT -UDUK_USE_PACKED_TVAL\nCONFIGOPTS_DUKWEB = --option-file util/dukweb_base.yaml --fixup-file util/dukweb_fixup.h\nCONFIGOPTS_FUZZ = --option-file util/makeduk_base.yaml --option-file util/makeduk_fuzz.yaml\n\n# Profile guided optimization test set.\nPGO_TEST_SET = \\\n\ttests/ecmascript/test-dev-mandel2-func.js \\\n\ttests/ecmascript/test-dev-totp.js \\\n\ttests/perf/test-fib.js \\\n\ttests/ecmascript/test-regexp-ipv6-regexp.js\n\n# Compiler setup for Linux.\nCC := $(GCC)\n\nCCOPTS_SHARED =\nCCOPTS_SHARED += -DDUK_CMDLINE_PRINTALERT_SUPPORT\nCCOPTS_SHARED += -DDUK_CMDLINE_CONSOLE_SUPPORT\nCCOPTS_SHARED += -DDUK_CMDLINE_LOGGING_SUPPORT\nCCOPTS_SHARED += -DDUK_CMDLINE_MODULE_SUPPORT\nifdef SYSTEMROOT  # Windows\n# Skip fancy (linenoise)\nelse\nCCOPTS_SHARED += -DDUK_CMDLINE_FANCY\n#CCOPTS_SHARED += -DDUK_CMDLINE_PTHREAD_STACK_CHECK\nendif\nCCOPTS_SHARED += -DDUK_CMDLINE_ALLOC_LOGGING\nCCOPTS_SHARED += -DDUK_CMDLINE_ALLOC_TORTURE\nCCOPTS_SHARED += -DDUK_CMDLINE_ALLOC_HYBRID\nCCOPTS_SHARED += -DDUK_CMDLINE_DEBUGGER_SUPPORT\nCCOPTS_SHARED += -DDUK_CMDLINE_FILEIO\n\nCCOPTS_SHARED += -D_POSIX_C_SOURCE=200809L  # to avoid linenoise strdup() warnings\nCCOPTS_SHARED += -pedantic -ansi -std=c99 -fstrict-aliasing\n# -Wextra is very picky but catches e.g. signed/unsigned comparisons\nCCOPTS_SHARED += -Wall -Wextra -Wunused-result -Wdeclaration-after-statement -Wunused-function\nCCOPTS_SHARED += -Wcast-qual\nCCOPTS_SHARED += -Wcast-align\nCCOPTS_SHARED += -Wshadow\nCCOPTS_SHARED += -Wunreachable-code  # on some compilers unreachable code is an error\nCCOPTS_SHARED += -Wmissing-prototypes\nCCOPTS_SHARED += -Wfloat-equal\nCCOPTS_SHARED += -Wsign-conversion\nCCOPTS_SHARED += -Wsuggest-attribute=noreturn\nCCOPTS_SHARED += -fmax-errors=3  # prevent floods of errors if e.g. parenthesis missing\nCCOPTS_SHARED += -I./deps/linenoise\nCCOPTS_SHARED += -I./examples/cmdline\nCCOPTS_SHARED += -I./examples/alloc-logging\nCCOPTS_SHARED += -I./examples/alloc-torture\nCCOPTS_SHARED += -I./examples/alloc-hybrid\nCCOPTS_SHARED += -I./examples/debug-trans-socket\nCCOPTS_SHARED += -I./extras/print-alert\nCCOPTS_SHARED += -I./extras/console\nCCOPTS_SHARED += -I./extras/logging\nCCOPTS_SHARED += -I./extras/module-duktape\n#CCOPTS_SHARED += -m32  # force 32-bit compilation on a 64-bit host\n#CCOPTS_SHARED += -mx32  # force X32 compilation on a 64-bit host\n#CCOPTS_SHARED += -fstack-usage  # enable manually, then e.g. $ make clean duk; python util/pretty_stack_usage.py duktape.su\n\nCCOPTS_NONDEBUG = $(CCOPTS_SHARED) $(CCOPTS_FEATURES)\nCCOPTS_NONDEBUG += -Os -fomit-frame-pointer -fno-stack-protector\nCCOPTS_NONDEBUG += -g -ggdb\n#CCOPTS_NONDEBUG += -flto\n#CCOPTS_NONDEBUG += -malign-double\n\nCCOPTS_DEBUG = $(CCOPTS_SHARED) $(CCOPTS_FEATURES)\nCCOPTS_DEBUG += -O0\nCCOPTS_DEBUG += -g -ggdb\n\nCLANG_CCOPTS_NONDEBUG = $(CCOPTS_NONDEBUG)\nCLANG_CCOPTS_NONDEBUG += -Wshorten-64-to-32\nCLANG_CCOPTS_NONDEBUG += -Wcomma\n\nCLANG_CCOPTS_DEBUG = $(CCOPTS_DEBUG)\n\nGXXOPTS_SHARED = -pedantic -ansi -std=c++11 -fstrict-aliasing -Wall -Wextra -Wunused-result -Wunused-function\nGXXOPTS_SHARED += -DDUK_CMDLINE_PRINTALERT_SUPPORT\nGXXOPTS_NONDEBUG = $(GXXOPTS_SHARED) -Os -fomit-frame-pointer\nGXXOPTS_NONDEBUG += -I./examples/alloc-logging -I./examples/alloc-torture -I./examples/alloc-hybrid -I./extras/print-alert -I./extras/console -I./extras/logging -I./extras/module-duktape\nGXXOPTS_DEBUG = $(GXXOPTS_SHARED) -O0 -g -ggdb\nGXXOPTS_DEBUG += -I./examples/alloc-logging -I./examples/alloc-torture -I./examples/alloc-hybrid -I./extras/print-alert -I./extras/console -I./extras/logging -I./extras/module-duktape\n\nCCOPTS_DUKLOW = -m32\nCCOPTS_DUKLOW += -flto -fno-asynchronous-unwind-tables -ffunction-sections -Wl,--gc-sections\n#CCOPTS_DUKLOW += '-fpack-struct=1'\nCCOPTS_DUKLOW += -Wno-unused-parameter -Wno-pedantic -Wno-sign-compare -Wno-missing-field-initializers -Wno-unused-result\nCCOPTS_DUKLOW += -UDUK_CMDLINE_FANCY -DDUK_CMDLINE_LOWMEM -D_POSIX_C_SOURCE=200809L\nCCOPTS_DUKLOW += -UDUK_CMDLINE_LOGGING_SUPPORT  # extras/logger init writes to Duktape.Logger, problem with ROM build\nCCOPTS_DUKLOW += -UDUK_CMDLINE_MODULE_SUPPORT  # extras/module-duktape init writes to Duktape.Logger, problem with ROM build\nCCOPTS_DUKLOW += -UDUK_CMDLINE_CONSOLE_SUPPORT\nCCOPTS_DUKLOW += -UDUK_CMDLINE_ALLOC_LOGGING\nCCOPTS_DUKLOW += -UDUK_CMDLINE_ALLOC_TORTURE\nCCOPTS_DUKLOW += -UDUK_CMDLINE_ALLOC_HYBRID\nCCOPTS_DUKLOW += -UDUK_CMDLINE_DEBUGGER_SUPPORT\nCCOPTS_DUKLOW += -UDUK_CMDLINE_FILEIO\n#CCOPTS_DUKLOW += -DDUK_ALLOC_POOL_DEBUG\nCCOPTS_DUKLOW += -DDUK_ALLOC_POOL_TRACK_WASTE  # quite fast, but not free so disable for performance comparison\n#CCOPTS_DUKLOW += -DDUK_ALLOC_POOL_TRACK_HIGHWATER  # VERY SLOW, just for manual testing\n\nifdef SYSTEMROOT  # Windows\nCCLIBS = -lm -lws2_32\nelse\n#CCLIBS = -lm -lpthread\nCCLIBS = -lm\nendif\n\n# Rely on an external, configured 'emcc' command.  See docker/ for Docker\n# images for an example of building a working 'emcc' environment.  See\n# doc/emscripten-status.rst for the Emscripten options used.\n#\n# Reducing the TOTAL_MEMORY and TOTAL_STACK values is useful if you run\n# Duktape cmdline with resource limits (i.e. \"duk -r test.js\").\nEMCC = emcc\n#EMCCOPTS = -s TOTAL_MEMORY=2097152 -s TOTAL_STACK=524288 --memory-init-file 0\nEMCCOPTS = -O2 -std=c99 -Wall --memory-init-file 0 -s WASM=0 -s POLYFILL_OLD_MATH_FUNCTIONS\nEMCCOPTS_DUKVM = -O2 -std=c99 -Wall --memory-init-file 0 -DEMSCRIPTEN -s WASM=0\nEMCCOPTS_DUKVM_WASM = -O2 -std=c99 -Wall --memory-init-file 0 -DEMSCRIPTEN -s WASM=1\nEMCCOPTS_DUKWEB_EXPORT = -s EXPORTED_FUNCTIONS='[\"_main\",\"_dukweb_is_open\", \"_dukweb_open\",\"_dukweb_close\",\"_dukweb_eval\"]' -s 'EXTRA_EXPORTED_RUNTIME_METHODS=[\"ccall\",\"cwrap\"]'\nEMDUKOPTS = -s TOTAL_MEMORY=268435456 -DDUK_CMDLINE_PRINTALERT_SUPPORT\nEMDUKOPTS += -DEMSCRIPTEN  # enable stdin workaround in duk_cmdline.c\n\n# Mandelbrot test, base-64 encoded.\nMAND_BASE64 = dyA9IDgwOyBoID0gNDA7IGl0ZXIgPSAxMDA7IGZvciAoaSA9IDA7IGkgLSBoOyBpICs9IDEpIHsgeTAgPSAoaSAvIGgpICogNC4wIC0gMi4wOyByZXMgPSBbXTsgZm9yIChqID0gMDsgaiAtIHc7IGogKz0gMSkgeyB4MCA9IChqIC8gdykgKiA0LjAgLSAyLjA7IHh4ID0gMDsgeXkgPSAwOyBjID0gIiMiOyBmb3IgKGsgPSAwOyBrIC0gaXRlcjsgayArPSAxKSB7IHh4MiA9IHh4Knh4OyB5eTIgPSB5eSp5eTsgaWYgKE1hdGgubWF4KDAsIDQuMCAtICh4eDIgKyB5eTIpKSkgeyB5eSA9IDIqeHgqeXkgKyB5MDsgeHggPSB4eDIgLSB5eTIgKyB4MDsgfSBlbHNlIHsgYyA9ICIuIjsgYnJlYWs7IH0gfSByZXNbcmVzLmxlbmd0aF0gPSBjOyB9IHByaW50KHJlcy5qb2luKCIiKSk7IH0K\n\n# Options for runtests.js.\nRUNTESTSOPTS = --python-command $(PYTHON2) --prep-test-path util/prep_test.py --minify-uglifyjs2 deps/UglifyJS/bin/uglifyjs --util-include-path tests/ecmascript --known-issues doc/testcase-known-issues.yaml\n\n# Compile 'duk' only by default.\n.PHONY: all\nall: duk\n\n# Clean targets: 'cleanall' also deletes downloaded third party packages\n# which we don't want to delete by default with 'clean'.\n.PHONY: clean\nclean:\n\t@rm -rf tmp/\n\t@rm -rf build/\n\t@rm -rf prep/\n\t@rm -rf dist/\n\t@rm -rf site/\n\t@rm -f duk\n\t@rm -f emduk emduk.js\n\t@rm -f doc/*.html\n\t@rm -f src-input/*.pyc tools/*.pyc util/*.pyc\n\t@rm -f *.gcda\n\t@rm -f *.su\n\t@rm -rf massif.out.* ms_print.tmp.*\n\t@rm -f massif-*.out\n\t@rm -rf cachegrind.out.*\n\t@rm -rf callgrind.out.*\n\t@rm -rf oprofile_data/\n\t@rm -f /tmp/duk-test-eval-file-temp.js  # used by tests/api/test-eval-file.js\n\t@rm -f a.out\n\t@cd src-tools; make clean\n\n.PHONY: cleanall\ncleanall: clean\n\t@# Don't delete these in 'clean' to avoid re-downloading them over and over\n\t@rm -rf deps node_modules\n\t@rm -f \"references/ECMA-262 5th edition December 2009.pdf\"\n\t@rm -f \"references/ECMA-262 5.1 edition June 2011.pdf\"\n\t@rm -f \"references/ECMA-262.pdf\"\n\t@cd src-tools; make cleanall\n\n# External dependencies.\ndeps:\n\t@mkdir -p $@\n\n# Temporaries.\ntmp:\n\t@mkdir -p $@\n\n# Build results.\nbuild:\n\t@mkdir -p $@\n\n# Final releases files.\ndist:\n\t@mkdir -p $@\n\n# Duktape configurations.\nprep:\n\t@mkdir -p prep\n\n# Targets for tooling.\nbuild/duktool.js: | build\n\tmake -C src-tools\n\tcp src-tools/duktool.js $@\n\n# Targets for preparing different Duktape configurations.\n.PHONY: prep-duktool\nprep-duktool: src-tools/duktool.js\nsrc-tools/duktool.js:\n\t@cd src-tools && make\n\t@touch $@\n.PHONY: configure-deps\nconfigure-deps: prep-duktool\nprep/nondebug: configure-deps | prep\n\t@rm -rf ./prep/nondebug\n\t$(PYTHON) tools/configure.py --output-directory ./prep/nondebug --source-directory src-input --config-metadata config $(CONFIGOPTS_NONDEBUG) --line-directives\nprep/nondebug-scanbuild: configure-deps | prep\n\t@rm -rf ./prep/nondebug-scanbuild\n\t$(PYTHON) tools/configure.py --output-directory ./prep/nondebug-scanbuild --source-directory src-input --config-metadata config $(CONFIGOPTS_NONDEBUG_SCANBUILD) --separate-sources --line-directives\nprep/nondebug-perf: configure-deps | prep\n\t@rm -rf ./prep/nondebug-perf\n\t$(PYTHON) tools/configure.py --output-directory ./prep/nondebug-perf --source-directory src-input --config-metadata config $(CONFIGOPTS_NONDEBUG_PERF) --line-directives\nprep/nondebug-size: configure-deps | prep\n\t@rm -rf ./prep/nondebug-size\n\t$(PYTHON) tools/configure.py --output-directory ./prep/nondebug-size --source-directory src-input --config-metadata config $(CONFIGOPTS_NONDEBUG_SIZE) --line-directives\nprep/nondebug-rom: configure-deps | prep\n\t@rm -rf ./prep/nondebug-rom\n\t$(PYTHON) tools/configure.py --output-directory ./prep/nondebug-rom --source-directory src-input --config-metadata config $(CONFIGOPTS_NONDEBUG_ROM) --line-directives\nprep/debug: configure-deps | prep\n\t@rm -rf ./prep/debug\n\t$(PYTHON) tools/configure.py --output-directory ./prep/debug --source-directory src-input --config-metadata config $(CONFIGOPTS_DEBUG) --line-directives\nprep/fuzz: configure-deps | prep\n\t@rm -rf ./prep/fuzz\n\t$(PYTHON) tools/configure.py --output-directory ./prep/fuzz --source-directory src-input --config-metadata config $(CONFIGOPTS_FUZZ) --line-directives\nprep/debug-scanbuild: configure-deps | prep\n\t@rm -rf ./prep/debug-scanbuild\n\t$(PYTHON) tools/configure.py --output-directory ./prep/debug-scanbuild --source-directory src-input --config-metadata config $(CONFIGOPTS_DEBUG_SCANBUILD) --separate-sources --line-directives\nprep/debug-rom: configure-deps | prep\n\t@rm -rf ./prep/debug-rom\n\t$(PYTHON) tools/configure.py --output-directory ./prep/debug-rom --source-directory src-input --config-metadata config $(CONFIGOPTS_DEBUG_ROM) --line-directives\nprep/emduk: configure-deps | prep\n\t@rm -rf ./prep/emduk\n\t$(PYTHON) tools/configure.py --output-directory ./prep/emduk --source-directory src-input --config-metadata config $(CONFIGOPTS_EMDUK) --line-directives\nprep/dukweb: configure-deps | prep\n\t@rm -rf ./prep/dukweb\n\t$(PYTHON) tools/configure.py --output-directory ./prep/dukweb --source-directory src-input --config-metadata config $(CONFIGOPTS_DUKWEB) --line-directives\nprep/duklow-nondebug: configure-deps | prep\n\t@rm -rf ./prep/duklow-nondebug\n\t$(PYTHON) tools/configure.py --output-directory ./prep/duklow-nondebug --source-directory src-input --config-metadata config $(CONFIGOPTS_NONDEBUG_DUKLOW) --line-directives\nprep/duklow-debug: configure-deps | prep\n\t@rm -rf ./prep/duklow-debug\n\t$(PYTHON) tools/configure.py --output-directory ./prep/duklow-debug --source-directory src-input --config-metadata config $(CONFIGOPTS_DEBUG_DUKLOW) --line-directives\nprep/duklow-nondebug-rom: configure-deps | prep\n\t@rm -rf ./prep/duklow-nondebug-rom\n\t$(PYTHON) tools/configure.py --output-directory ./prep/duklow-nondebug-rom --source-directory src-input --config-metadata config $(CONFIGOPTS_NONDEBUG_DUKLOW_ROM) --line-directives\nprep/duklow-debug-rom: configure-deps | prep\n\t@rm -rf ./prep/duklow-debug-rom\n\t$(PYTHON) tools/configure.py --output-directory ./prep/duklow-debug-rom --source-directory src-input --config-metadata config $(CONFIGOPTS_DEBUG_DUKLOW_ROM) --line-directives\nprep/duklow-nondebug-norefc: configure-deps | prep\n\t@rm -rf ./prep/duklow-nondebug-norefc\n\t$(PYTHON) tools/configure.py --output-directory ./prep/duklow-nondebug-norefc --source-directory src-input --config-metadata config $(CONFIGOPTS_NONDEBUG_DUKLOW_NOREFC) --line-directives\nprep/duklow-debug-norefc: configure-deps | prep\n\t@rm -rf ./prep/duklow-debug-norefc\n\t$(PYTHON) tools/configure.py --output-directory ./prep/duklow-debug-norefc --source-directory src-input --config-metadata config $(CONFIGOPTS_DEBUG_DUKLOW_NOREFC) --line-directives\n\n# Library targets.\nifeq ($(DETECTED_OS),Darwin)\nbuild/libduktape.1.0.0.so: prep/nondebug | build\n\trm -f $(subst .1.0.0.so,.1.so,$@) $(subst .1.0.0.so,.1.0.0.so,$@) $(subst .1.0.0.so,.so,$@)\n\t$(CC) -o $@ -shared -Wl,-install_name,$(subst .1.0.0.so,.1.so,$@) -fPIC -I./prep/nondebug $(CCOPTS_NONDEBUG) prep/nondebug/duktape.c $(CCLIBS)\n\tln -s $(@F) $(subst .1.0.0.so,.1.so,$@) && ln -s $(@F) $(subst .1.0.0.so,.so,$@)\nbuild/libduktaped.1.0.0.so: prep/debug | build\n\trm -f $(subst .1.0.0.so,.1.so,$@) $(subst .1.0.0.so,.1.0.0.so,$@) $(subst .1.0.0.so,.so,$@)\n\t$(CC) -o $@ -shared -Wl,-install_name,$(subst .1.0.0.so,.1.so,$@) -fPIC -I./prep/debug $(CCOPTS_DEBUG) prep/debug/duktape.c $(CCLIBS)\n\tln -s $(@F) $(subst .1.0.0.so,.1.so,$@) && ln -s $(@F) $(subst .1.0.0.so,.so,$@)\nelse\nbuild/libduktape.so.1.0.0: prep/nondebug | build\n\trm -f $(subst .so.1.0.0,.so.1,$@) $(subst .so.1.0.0,.so.1.0.0,$@) $(subst .so.1.0.0,.so,$@)\n\t$(CC) -o $@ -shared -Wl,-soname,$(subst .so.1.0.0,.so.1,$@) -fPIC -I./prep/nondebug $(CCOPTS_NONDEBUG) prep/nondebug/duktape.c $(CCLIBS)\n\tln -s $(@F) $(subst .so.1.0.0,.so.1,$@) && ln -s $(@F) $(subst .so.1.0.0,.so,$@)\nbuild/libduktaped.so.1.0.0: prep/debug | build\n\trm -f $(subst .so.1.0.0,.so.1,$@) $(subst .so.1.0.0,.so.1.0.0,$@) $(subst .so.1.0.0,.so,$@)\n\t$(CC) -o $@ -shared -Wl,-soname,$(subst .so.1.0.0,.so.1,$@) -fPIC -I./prep/debug $(CCOPTS_DEBUG) prep/debug/duktape.c $(CCLIBS)\n\tln -s $(@F) $(subst .so.1.0.0,.so.1,$@) && ln -s $(@F) $(subst .so.1.0.0,.so,$@)\nendif\n\n# Various 'duk' command line tool targets.\nDUK_SOURCE_DEPS=$(DUKTAPE_CMDLINE_SOURCES) $(LINENOISE_SOURCES) $(LINENOISE_HEADERS)\n\nduk: build/duk  # Convenience target.\n\tcp $< $@\nbuild/duk: $(DUK_SOURCE_DEPS) | build prep/nondebug\n\t$(CC) -o $@ -Iprep/nondebug $(CCOPTS_NONDEBUG) prep/nondebug/duktape.c $(DUKTAPE_CMDLINE_SOURCES) $(LINENOISE_SOURCES) $(CCLIBS)\n\t-@ls -l $@ && size $@\nbuild/duk-pgo: $(DUK_SOURCE_DEPS) | build prep/nondebug\n\t@echo \"Compiling with -fprofile-generate...\"\n\t@rm -f *.gcda\n\t$(CC) -o $@ -Iprep/nondebug $(CCOPTS_NONDEBUG) -fprofile-generate prep/nondebug/duktape.c $(DUKTAPE_CMDLINE_SOURCES) $(LINENOISE_SOURCES) $(CCLIBS)\n\t-@ls -l $@ && size $@\n\t@echo \"Generating profile...\"\n\t@echo \"NOTE: profile is pretty dummy now, some benchmark run would be much better\"\n\t./$@ $(PGO_TEST_SET)\n\t@rm -f $@\n\t@echo \"Recompiling with -fprofile-use...\"\n\t$(CC) -o $@ -Iprep/nondebug $(CCOPTS_NONDEBUG) -fprofile-use prep/nondebug/duktape.c $(DUKTAPE_CMDLINE_SOURCES) $(LINENOISE_SOURCES) $(CCLIBS)\n\t-@ls -l $@ && size $@\nbuild/duk-perf: $(DUK_SOURCE_DEPS) | build prep/nondebug-perf\n\t$(CC) -o $@ -Iprep/nondebug-perf $(CCOPTS_NONDEBUG) prep/nondebug-perf/duktape.c $(DUKTAPE_CMDLINE_SOURCES) $(LINENOISE_SOURCES) $(CCLIBS)\n\t-@ls -l $@ && size $@\nbuild/duk-size: $(DUK_SOURCE_DEPS) | build prep/nondebug-size\n\t$(CC) -o $@ -Iprep/nondebug-size $(CCOPTS_NONDEBUG) prep/nondebug-size/duktape.c $(DUKTAPE_CMDLINE_SOURCES) $(LINENOISE_SOURCES) $(CCLIBS)\n\t-@ls -l $@ && size $@\nbuild/duk-rom: $(DUK_SOURCE_DEPS) | build prep/nondebug-rom\n\t$(CC) -o $@ -Iprep/nondebug-rom $(CCOPTS_NONDEBUG) prep/nondebug-rom/duktape.c $(DUKTAPE_CMDLINE_SOURCES) $(LINENOISE_SOURCES) $(CCLIBS)\n\t-@ls -l $@ && size $@\nbuild/dukd: $(DUK_SOURCE_DEPS) | build prep/debug\n\t$(CC) -o $@ -Iprep/debug $(CCOPTS_DEBUG) prep/debug/duktape.c $(DUKTAPE_CMDLINE_SOURCES) $(LINENOISE_SOURCES) $(CCLIBS)\n\t-@ls -l $@ && size $@\nbuild/dukd-rom: $(DUK_SOURCE_DEPS) | build prep/debug-rom\n\t$(CC) -o $@ -Iprep/debug-rom $(CCOPTS_DEBUG) prep/debug-rom/duktape.c $(DUKTAPE_CMDLINE_SOURCES) $(LINENOISE_SOURCES) $(CCLIBS)\n\t-@ls -l $@ && size $@\nbuild/duk.O2: $(DUK_SOURCE_DEPS) | build prep/nondebug\n\t$(CC) -o $@ -Iprep/nondebug $(CCOPTS_NONDEBUG) -O2 prep/nondebug/duktape.c $(DUKTAPE_CMDLINE_SOURCES) $(LINENOISE_SOURCES) $(CCLIBS)\n\t-@ls -l $@ && size $@\nbuild/duk-pgo.O2: $(DUK_SOURCE_DEPS) | build prep/nondebug\n\t@echo \"Compiling with -fprofile-generate...\"\n\t@rm -f *.gcda\n\t$(CC) -o $@ -Iprep/nondebug $(CCOPTS_NONDEBUG) -O2 -fprofile-generate prep/nondebug/duktape.c $(DUKTAPE_CMDLINE_SOURCES) $(LINENOISE_SOURCES) $(CCLIBS)\n\t-@ls -l $@ && size $@\n\t@echo \"Generating profile...\"\n\t@echo \"XXX: profile is pretty dummy now, some benchmark run would be much better\"\n\t./$@ $(PGO_TEST_SET)\n\t@rm -f $@\n\t@echo \"Recompiling with -fprofile-use...\"\n\t$(CC) -o $@ -Iprep/nondebug $(CCOPTS_NONDEBUG) -O2 -fprofile-use prep/nondebug/duktape.c $(DUKTAPE_CMDLINE_SOURCES) $(LINENOISE_SOURCES) $(CCLIBS)\n\t-@ls -l $@ && size $@\nbuild/duk-perf.O2: $(DUK_SOURCE_DEPS) | build prep/nondebug-perf\n\t$(CC) -o $@ -Iprep/nondebug-perf $(CCOPTS_NONDEBUG) -O2 prep/nondebug-perf/duktape.c $(DUKTAPE_CMDLINE_SOURCES) $(LINENOISE_SOURCES) $(CCLIBS)\n\t-@ls -l $@ && size $@\nbuild/duk-perf-pgo.O2: $(DUK_SOURCE_DEPS) | build prep/nondebug-perf\n\t@echo \"Compiling with -fprofile-generate...\"\n\t@rm -f *.gcda\n\t$(CC) -o $@ -Iprep/nondebug-perf $(CCOPTS_NONDEBUG) -O2 -fprofile-generate prep/nondebug-perf/duktape.c $(DUKTAPE_CMDLINE_SOURCES) $(LINENOISE_SOURCES) $(CCLIBS)\n\t-@ls -l $@ && size $@\n\t@echo \"Generating profile...\"\n\t@echo \"NOTE: profile is pretty dummy now, some benchmark run would be much better\"\n\t./$@ $(PGO_TEST_SET)\n\t@rm -f $@\n\t@echo \"Recompiling with -fprofile-use...\"\n\t$(CC) -o $@ -Iprep/nondebug-perf $(CCOPTS_NONDEBUG) -O2 -fprofile-use prep/nondebug-perf/duktape.c $(DUKTAPE_CMDLINE_SOURCES) $(LINENOISE_SOURCES) $(CCLIBS)\n\t-@ls -l $@ && size $@\nbuild/duk.O3: $(DUKTAPE_CMDLINE_SOURCES) $(LINENOISE_SOURCES) | build prep/nondebug\n\t$(CC) -o $@ -Iprep/nondebug $(CCOPTS_NONDEBUG) -O3 prep/nondebug/duktape.c $(DUKTAPE_CMDLINE_SOURCES) $(LINENOISE_SOURCES) $(CCLIBS)\n\t-@ls -l $@ && size $@\nbuild/duk-perf.O3: $(DUK_SOURCE_DEPS) | build prep/nondebug-perf\n\t$(CC) -o $@ -Iprep/nondebug-perf $(CCOPTS_NONDEBUG) -O3 prep/nondebug-perf/duktape.c $(DUKTAPE_CMDLINE_SOURCES) $(LINENOISE_SOURCES) $(CCLIBS)\n\t-@ls -l $@ && size $@\nbuild/duk.O4: $(DUK_SOURCE_DEPS) | build prep/nondebug\n\t$(CC) -o $@ -Iprep/nondebug $(CCOPTS_NONDEBUG) -O4 prep/nondebug/duktape.c $(DUKTAPE_CMDLINE_SOURCES) $(LINENOISE_SOURCES) $(CCLIBS)\n\t-@ls -l $@ && size $@\nbuild/duk-perf.O4: $(DUK_SOURCE_DEPS) | build prep/nondebug-perf\n\t$(CC) -o $@ -Iprep/nondebug-perf $(CCOPTS_NONDEBUG) -O4 prep/nondebug-perf/duktape.c $(DUKTAPE_CMDLINE_SOURCES) $(LINENOISE_SOURCES) $(CCLIBS)\n\t-@ls -l $@ && size $@\nbuild/duk-clang: $(DUK_SOURCE_DEPS) | build prep/nondebug\n\t@# Use -Wcast-align to trigger issues like: https://github.com/svaarala/duktape/issues/270\n\t@# Use -Wshift-sign-overflow to trigger issues like: https://github.com/svaarala/duktape/issues/812\n\t@# -Weverything\n\t$(CLANG) -o $@ $(CLANG_CCOPTS_NONDEBUG) -Wcast-align -Wshift-sign-overflow prep/nondebug/duktape.c -Iprep/nondebug $(DUKTAPE_CMDLINE_SOURCES) $(LINENOISE_SOURCES) $(CCLIBS)\n\t-@ls -l $@ && size $@\nbuild/duk-clang-asan: $(DUK_SOURCE_DEPS) | build prep/nondebug\n\t# Binary fails to start with linenoise included, so add -UDUK_CMDLINE_FANCY to disable linenoise.\n\t$(CLANG) -o $@ $(CLANG_CCOPTS_NONDEBUG) -Wcast-align -Wshift-sign-overflow -fsanitize=address -fno-omit-frame-pointer -Iprep/nondebug $(CLANG_CCOPTS_DEBUG) -O0 -g -UDUK_CMDLINE_FANCY prep/nondebug/duktape.c $(DUKTAPE_CMDLINE_SOURCES) $(CCLIBS)\n\t-@ls -l $@ && size $@\nbuild/duk-clang-ubsan: $(DUK_SOURCE_DEPS) | build prep/nondebug\n\t$(CLANG) -o $@ $(CLANG_CCOPTS_NONDEBUG) -Wcast-align -Wshift-sign-overflow -fsanitize=undefined prep/nondebug/duktape.c -Iprep/nondebug $(DUKTAPE_CMDLINE_SOURCES) $(LINENOISE_SOURCES) $(CCLIBS)\n\t-@ls -l $@ && size $@\nbuild/duk-perf-clang: $(DUK_SOURCE_DEPS) | build prep/nondebug-perf\n\t$(CLANG) -o $@ $(CLANG_CCOPTS_NONDEBUG) -Wcast-align -Wshift-sign-overflow -Iprep/nondebug-perf prep/nondebug-perf/duktape.c $(DUKTAPE_CMDLINE_SOURCES) $(LINENOISE_SOURCES) $(CCLIBS)\n\t-@ls -l $@ && size $@\n\nbuild/duk-fuzzilli: $(DUK_SOURCE_DEPS) | build prep/fuzz\n\t# Target for fuzzilli.  Adds in the appropriate debug flags, without doing the debug prints.\n\t$(CLANG) -O3 -o $@ $(CLANG_CCOPTS_DEBUG) -Wall -Wextra -Wcast-align -Wshift-sign-overflow -fsanitize=undefined -fsanitize-coverage=trace-pc-guard -Iprep/fuzz prep/fuzz/duktape.c $(DUKTAPE_CMDLINE_SOURCES) $(LINENOISE_SOURCES) $(CCLIBS)\n\nbuild/duk-g++: $(DUK_SOURCE_DEPS) | build prep/nondebug\n\t$(GXX) -o $@ -Iprep/nondebug $(GXXOPTS_NONDEBUG) prep/nondebug/duktape.c $(DUKTAPE_CMDLINE_SOURCES) $(CCLIBS)\n\t-@ls -l $@ && size $@\nbuild/duk-perf-g++: $(DUK_SOURCE_DEPS) | build prep/nondebug-perf\n\t$(GXX) -o $@ -Iprep/nondebug-perf $(GXXOPTS_NONDEBUG) prep/nondebug-perf/duktape.c $(DUKTAPE_CMDLINE_SOURCES) $(CCLIBS)\n\t-@ls -l $@ && size $@\nbuild/dukd-g++: $(DUK_SOURCE_DEPS) | build prep/debug\n\t$(GXX) -o $@ -Iprep/debug $(GXXOPTS_DEBUG) prep/debug/duktape.c $(DUKTAPE_CMDLINE_SOURCES) $(CCLIBS)\n\t-@ls -l $@ && size $@\n.PHONY: dukscanbuild\nbuild/dukscanbuild: $(DUK_SOURCE_DEPS) | build tmp prep/nondebug-scanbuild\n\t$(SCAN_BUILD) $(GCC) -otmp/duk.scanbuild -Iprep/nondebug-scanbuild $(CCOPTS_NONDEBUG) prep/nondebug-scanbuild/*.c $(DUKTAPE_CMDLINE_SOURCES) $(LINENOISE_SOURCES) $(CCLIBS)\n.PHONY: dukdscanbuild\nbuild/dukdscanbuild: $(DUK_SOURCE_DEPS) | build tmp prep/debug-scanbuild\n\t$(SCAN_BUILD) $(GCC) -otmp/dukd.scanbuild -Iprep/debug-scanbuild $(CCOPTS_DEBUG) prep/debug-scanbuild/*.c $(DUKTAPE_CMDLINE_SOURCES) $(LINENOISE_SOURCES) $(CCLIBS)\n# Command line with a simple pool allocator, for low memory testing.\n# The pool sizes only make sense with -m32, so force that.  This forces\n# us to use barebones cmdline too.\nDUKTAPE_CMDLINE_LOWMEM_SOURCES=\\\n\t\t$(DUKTAPE_CMDLINE_SOURCES) \\\n\t\texamples/cmdline/duk_cmdline_lowmem.c \\\n\t\textras/alloc-pool/duk_alloc_pool.c\nDUK_LOWMEM_SOURCE_DEPS=$(DUKTAPE_CMDLINE_LOWMEM_SOURCES) $(LINENOISE_SOURCES) $(LINENOISE_HEADERS)\n\nbuild/duk-low: $(DUK_LOWMEM_SOURCE_DEPS) | build prep/duklow-nondebug\n\t$(CC) -o $@ \\\n\t\t-Iextras/alloc-pool/ -Iprep/duklow-nondebug \\\n\t\t$(CCOPTS_NONDEBUG) $(CCOPTS_DUKLOW) \\\n\t\tprep/duklow-nondebug/duktape.c $(DUKTAPE_CMDLINE_LOWMEM_SOURCES) \\\n\t\t-lm -lpthread\n\t-@ls -l $@ && size $@\nbuild/dukd-low: $(DUK_LOWMEM_SOURCE_DEPS) | build prep/duklow-debug\n\t$(CC) -o $@ \\\n\t\t-Iextras/alloc-pool/ -Iprep/duklow-debug \\\n\t\t$(CCOPTS_DEBUG) $(CCOPTS_DUKLOW) \\\n\t\tprep/duklow-debug/duktape.c $(DUKTAPE_CMDLINE_LOWMEM_SOURCES) \\\n\t\t-lm -lpthread\n\t-@ls -l $@ && size $@\nbuild/duk-low-rom: $(DUK_LOWMEM_SOURCE_DEPS) | build prep/duklow-nondebug-rom\n\t$(CC) -o $@ \\\n\t\t-Iextras/alloc-pool/ -Iprep/duklow-nondebug-rom \\\n\t\t$(CCOPTS_NONDEBUG) $(CCOPTS_DUKLOW) \\\n\t\tprep/duklow-nondebug-rom/duktape.c $(DUKTAPE_CMDLINE_LOWMEM_SOURCES) \\\n\t\t-lm -lpthread\n\t-@ls -l $@ && size $@\nbuild/dukd-low-rom: $(DUK_LOWMEM_SOURCE_DEPS) | build prep/duklow-debug-rom\n\t$(CC) -o $@ \\\n\t\t-Iextras/alloc-pool/ -Iprep/duklow-debug-rom \\\n\t\t$(CCOPTS_DEBUG) $(CCOPTS_DUKLOW) \\\n\t\tprep/duklow-debug-rom/duktape.c $(DUKTAPE_CMDLINE_LOWMEM_SOURCES) \\\n\t\t-lm -lpthread\n\t-@ls -l $@ && size $@\nbuild/duk-low-norefc: $(DUK_LOWMEM_SOURCE_DEPS) | build prep/duklow-nondebug-norefc\n\t$(CC) -o $@ \\\n\t\t-Iextras/alloc-pool/ -Iprep/duklow-nondebug-norefc \\\n\t\t$(CCOPTS_NONDEBUG) $(CCOPTS_DUKLOW) \\\n\t\tprep/duklow-nondebug-norefc/duktape.c $(DUKTAPE_CMDLINE_LOWMEM_SOURCES) \\\n\t\t-lm -lpthread\n\t-@ls -l $@ && size $@\nbuild/dukd-low-norefc: $(DUK_LOWMEM_SOURCE_DEPS) | build prep/duklow-debug-norefc\n\t$(CC) -o $@ \\\n\t\t-Iextras/alloc-pool/ -Iprep/duklow-debug-norefc \\\n\t\t$(CCOPTS_DEBUG) $(CCOPTS_DUKLOW) \\\n\t\tprep/duklow-debug-norefc/duktape.c $(DUKTAPE_CMDLINE_LOWMEM_SOURCES) \\\n\t\t-lm -lpthread\n\t-@ls -l $@ && size $@\n\n# util/fix_emscripten.py is used so that emduk.js can also be executed using\n# Duktape itself (though you can't currently pass arguments/files to it).\n# No Emscripten fixes are needed in practice since Duktape 1.5.0.\nbuild/emduk: emduk.js | build\n\tcat util/emduk_wrapper.sh | sed \"s|WORKDIR|$(shell pwd)|\" > $@\n\tchmod ugo+x $@\nbuild/emduk.js: examples/cmdline/duk_cmdline.c extras/print-alert/duk_print_alert.c | build tmp prep/emduk\n\t$(EMCC) $(EMCCOPTS) -Iprep/emduk -Iexamples/cmdline -Iextras/print-alert \\\n\t\t$(EMDUKOPTS) \\\n\t\tprep/emduk/duktape.c examples/cmdline/duk_cmdline.c extras/print-alert/duk_print_alert.c \\\n\t\t-o tmp/duk-emduk.js\n\tcat tmp/duk-emduk.js | $(PYTHON2) util/fix_emscripten.py > $@\n\t@ls -l $@\n\n# This is a prototype of running Duktape in a web environment with Emscripten,\n# and providing an eval() facility from both sides.  This is a placeholder now\n# and doesn't do anything useful yet.\nbuild/dukweb.js: dukweb/dukweb_extra.js dukweb/dukweb.c | build prep/dukweb\n\t@rm -f build/dukweb.js build/dukweb.asm\n\t$(EMCC) $(EMCCOPTS_DUKVM_WASM) $(EMCCOPTS_DUKWEB_EXPORT) --post-js dukweb/dukweb_extra.js \\\n\t\t-Iprep/dukweb prep/dukweb/duktape.c dukweb/dukweb.c -o $@\n\t@wc build/dukweb.js build/dukweb.wasm\n\nbuild/literal_intern_test: misc/literal_intern_test.c | build prep/nondebug\n\t$(CC) -o $@ -std=c99 -O2 -fstrict-aliasing -Wall -Wextra \\\n\t\t-Iprep/nondebug prep/nondebug/duktape.c misc/literal_intern_test.c -lm\n.PHONY: literalinterntest\nliteralinterntest: build/literal_intern_test\n\tbash -c 'for i in 0 1 2 3 10 11 12 13 20 21 22 23; do echo; echo \"*** $$i ***\"; echo; for j in 1 2 3 4 5; do time build/literal_intern_test $$i; sleep 10; done; done'\n\n# Miscellaneous dumps.\n.PHONY: dump-public\ndump-public: build/duk | tmp\n\t@(objdump -t $< | grep ' g' | grep .text | grep -v .hidden | tr -s ' ' | cut -d ' ' -f 5 | sort > tmp/duk-public.txt ; true)\n\t@echo \"Symbol dump in tmp/duk-public.txt\"\n\t@(grep duk__ tmp/duk-public.txt ; true)  # check for leaked file local symbols (does not cover internal, but not public symbols)\n.PHONY: duksizes\nduksizes: build/duk | tmp\n\t$(PYTHON2) util/genexesizereport.py $< > tmp/duk_sizes.html\n.PHONY: issuecount\nissuecount:\n\t@echo \"FIXME:     `grep FIXME: src-input/*.c src-input/*.h src-input/*.in | wc -l | tr -d ' '`\"\n\t@echo \"XXX:       `grep XXX: src-input/*.c src-input/*.h src-input/*.in | wc -l | tr -d ' '`\"\n\t@echo \"TODO:      `grep TODO: src-input/*.c src-input/*.h src-input/*.in | wc -l | tr -d ' '`\"\n\t@echo \"NOTE:      `grep NOTE: src-input/*.c src-input/*.h src-input/*.in | wc -l | tr -d ' '`\"\n\t@echo \"SCANBUILD: `grep SCANBUILD: src-input/*.c src-input/*.h src-input/*.in | wc -l | tr -d ' '`\"\n.PHONY: gccpredefs\ngccpredefs:\n\t$(GCC) -dM -E - < /dev/null\n.PHONY: clangpredefs\nclangpredefs:\n\t$(CLANG) -dM -E - < /dev/null\n.PHONY: big-git-files\nbig-git-files:\n\tutil/find_big_git_files.sh\n.PHONY: checkalign\ncheckalign: | tmp\n\t@echo \"checkalign for: `uname -a`\"\n\t$(GCC) -o tmp/check_align -Wall -Wextra util/check_align.c\n\t@cp util/check_align.sh tmp\n\t@cd tmp && sh check_align.sh\n\n# Overall quick test target.\n.PHONY: test\ntest: apitest ecmatest\n\t@echo \"\"\n\t@echo \"### Tests successful!\"\n\n# Runs fuzzilli fuzz testing until stopped.\n.PHONY: fuzzillitest\nfuzzillitest: | tmp\n\t@# Clean up previous rounds if necessary.\n\t-$(DOCKER) stop fuzzilli_runner || true\n\t-$(DOCKER) rm fuzzilli_runner || true\n\trm -rf tmp/fuzzilli_results\n\tsudo sysctl -w 'kernel.core_pattern=|/bin/false' # Required to run fuzzilli on Linux\n\t@echo \"Running fuzzilli tests.  Run 'make fuzzillitest-stop' to stop.\"\n\t$(DOCKER) run --name fuzzilli_runner -i fuzzilli ./Fuzzilli --profile=duktape --timeout=1000 --storagePath=/home/fuzzer/fuzz ./duktape/duk-fuzzilli || true\n\t@echo \"Fuzzilli runner exited, pulling results out of the container.\"\n\t$(DOCKER) cp fuzzilli_runner:/home/fuzzer/fuzz tmp/fuzzilli_results; $(DOCKER) rm fuzzilli_runner\n\t@echo \"Check tmp/fuzzilli_results for the results.\"\n\n.PHONY: fuzzillitest-stop\nfuzzillitest-stop:\n\t$(DOCKER) stop fuzzilli_runner || true\n\n# Set of miscellaneous tests for release.\n.PHONY: releasetest\nreleasetest: configuretest xmldoctest closuretest bluebirdtest luajstest jsinterpretertest lodashtest underscoretest emscriptenluatest emscriptenduktest emscriptenmandeltest emscriptentest errorinjecttest\n\t@echo \"\"\n\t@echo \"### Release tests successful!\"  # These tests now have output checks.\n\n# ECMAScript, API, and perf tests.\n.PHONY: ecmatest\necmatest: prep-duktool | tmp deps/UglifyJS\n\t@echo \"### ecmatest\"\n\t\"$(NODEJS)\" src-tools/index.js run-tests --uglifyjs-bin deps/UglifyJS/bin/uglifyjs --test-log-file tmp/duk-test.log tests/ecmascript/\n.PHONY: ecmatest-comparison\necmatest-comparison: runtestsdeps build/duk | tmp\n\t@echo \"### ecmatest\"\n\t\"$(NODEJS)\" runtests/runtests.js $(RUNTESTSOPTS) --run-duk --cmd-duk=$(shell pwd)/build/duk --report-diff-to-other --run-nodejs --run-rhino --num-threads 16 --log-file=tmp/duk-test.log tests/ecmascript/\n\n.PHONY: apitest\nifeq ($(DETECTED_OS),Darwin)\napitest: prep-duktool | tmp deps/UglifyJS\nelse\napitest: prep-duktool | tmp deps/UglifyJS\nendif\n\t@echo \"### apitest\"\n\t\"$(NODEJS)\" src-tools/index.js run-tests --uglifyjs-bin deps/UglifyJS/bin/uglifyjs --test-log-file tmp/duk-api-test.log tests/api/\n\nTEST_ALL_DIRS=tests/api/ tests/ecmascript/ tests/configure/ tests/perf/\n.PHONY: test-all\ntest-all: prep-duktool | tmp deps/UglifyJS\n\t\"$(NODEJS)\" src-tools/index.js run-tests --uglifyjs-bin deps/UglifyJS/bin/uglifyjs --test-log-file tmp/test-all.log $(TEST_ALL_DIRS)\n.PHONY: test-all-1\ntest-all-1: prep-duktool | tmp deps/UglifyJS\n\t\"$(NODEJS)\" src-tools/index.js run-tests --uglifyjs-bin deps/UglifyJS/bin/uglifyjs --test-log-file tmp/test-all-1.log --test-hash-min 0 --test-hash-max 31 $(TEST_ALL_DIRS)\n.PHONY: test-all-2\ntest-all-2: prep-duktool | tmp deps/UglifyJS\n\t\"$(NODEJS)\" src-tools/index.js run-tests --uglifyjs-bin deps/UglifyJS/bin/uglifyjs --test-log-file tmp/test-all-2.log --test-hash-min 32 --test-hash-max 63 $(TEST_ALL_DIRS)\n.PHONY: test-all-3\ntest-all-3: prep-duktool | tmp deps/UglifyJS\n\t\"$(NODEJS)\" src-tools/index.js run-tests --uglifyjs-bin deps/UglifyJS/bin/uglifyjs --test-log-file tmp/test-all-3.log --test-hash-min 64 --test-hash-max 95 $(TEST_ALL_DIRS)\n.PHONY: test-all-4\ntest-all-4: prep-duktool | tmp deps/UglifyJS\n\t\"$(NODEJS)\" src-tools/index.js run-tests --uglifyjs-bin deps/UglifyJS/bin/uglifyjs --test-log-file tmp/test-all-4.log --test-hash-min 96 --test-hash-max 127 $(TEST_ALL_DIRS)\n.PHONY: test-all-5\ntest-all-5: prep-duktool | tmp deps/UglifyJS\n\t\"$(NODEJS)\" src-tools/index.js run-tests --uglifyjs-bin deps/UglifyJS/bin/uglifyjs --test-log-file tmp/test-all-1.log --test-hash-min 128 --test-hash-max 159 $(TEST_ALL_DIRS)\n.PHONY: test-all-6\ntest-all-6: prep-duktool | tmp deps/UglifyJS\n\t\"$(NODEJS)\" src-tools/index.js run-tests --uglifyjs-bin deps/UglifyJS/bin/uglifyjs --test-log-file tmp/test-all-2.log --test-hash-min 160 --test-hash-max 191 $(TEST_ALL_DIRS)\n.PHONY: test-all-7\ntest-all-7: prep-duktool | tmp deps/UglifyJS\n\t\"$(NODEJS)\" src-tools/index.js run-tests --uglifyjs-bin deps/UglifyJS/bin/uglifyjs --test-log-file tmp/test-all-3.log --test-hash-min 192 --test-hash-max 223 $(TEST_ALL_DIRS)\n.PHONY: test-all-8\ntest-all-8: prep-duktool | tmp deps/UglifyJS\n\t\"$(NODEJS)\" src-tools/index.js run-tests --uglifyjs-bin deps/UglifyJS/bin/uglifyjs --test-log-file tmp/test-all-4.log --test-hash-min 224 --test-hash-max 255 $(TEST_ALL_DIRS)\n\n.PHONY: perftest\nperftest: prep-duktool | tmp deps/UglifyJS\n\t@echo \"### perftest\"\n\t\"$(NODEJS)\" src-tools/index.js run-tests --uglifyjs-bin deps/UglifyJS/bin/uglifyjs --num-threads 1 --test-log-file tmp/duk-perf-test.log tests/perf/\n\n# Configure tests.\n.PHONY: configuretest\nconfiguretest: configure-deps\n\t@echo \"### configuretest\"\n\tfor i in tests/shell/configure/*.sh; do echo; echo \"--- $$i\"; make clean configure-deps; bash $$i; done\n\t@echo \"\" && echo \"*** Success!\"\n\n# Shell script tests.\n.PHONY: shelltest\nshelltest:\n\t@echo \"### shelltest\"\n\tfor i in tests/shell/*/*.sh; do echo; echo \"--- $$i\"; make clean; bash $$i; done\n\t@echo \"\" && echo \"*** Success!\"\n\n# Dukweb.js test.\n.PHONY: dukwebtest\ndukwebtest: build/dukweb.js build/dukweb.wasm deps/jquery-1.11.2.js | tmp\n\t@echo \"### dukwebtest\"\n\t@rm -rf tmp/dukweb-test/\n\tmkdir -p tmp/dukweb-test/\n\tcp build/dukweb.js build/dukweb.wasm deps/jquery-1.11.2.js dukweb/dukweb.html dukweb/dukweb.css tmp/dukweb-test/\n\t@echo \"Now point your browser to: file:///<workdir>/tmp/dukweb-test/dukweb.html\"\n\n# Third party tests.\n.PHONY: underscoretest\nunderscoretest: build/duk | deps/underscore tmp\n\t@echo \"### underscoretest\"\n\t@echo \"Run underscore tests with underscore-test-shim.js\"\n\t-util/underscore_test.sh $< deps/underscore/test/arrays.js\n\t-util/underscore_test.sh $< deps/underscore/test/chaining.js\n\t-util/underscore_test.sh $< deps/underscore/test/collections.js\n\t-util/underscore_test.sh $< deps/underscore/test/functions.js\n\t-util/underscore_test.sh $< deps/underscore/test/objects.js\n\t@# speed test disabled, requires JSLitmus\n\t@#-util/underscore_test.sh $< deps/underscore/test/speed.js\n\t-util/underscore_test.sh $< deps/underscore/test/utility.js\n.PHONY: regfuzztest\nregfuzztest: build/duk | deps/regfuzz-0.1 tmp\n\t@echo \"### regfuzztest\"\n\t@# Spidermonkey test is pretty close, just lacks 'arguments'\n\t@# Should run with assertions enabled in 'duk'\n\trm -rf tmp/duktape-regfuzz; mkdir -p tmp/duktape-regfuzz\n\techo \"arguments = [ 0xdeadbeef ];\" > tmp/duktape-regfuzz/regfuzz-test.js\n\tcat deps/regfuzz-0.1/examples/spidermonkey/regexfuzz.js >> tmp/duktape-regfuzz/regfuzz-test.js\n\t$< tmp/duktape-regfuzz/regfuzz-test.js\n# Lodash test.js assumes require() etc.  Placeholder test for now, no\n# expect string etc.\n.PHONY: lodashtest\nlodashtest: build/duk | deps/lodash tmp\n\t@echo \"### lodashtest\"\n\t$< deps/lodash/lodash.js tests/lodash/basic.js | tee tmp/duk-lodash-test.out\n\tif [ `md5sum tmp/duk-lodash-test.out | cut -f 1 -d ' '` != \"318977a4e39deb7c97c87b9b55ea9a80\" ]; then false; fi\n.PHONY: test262test\ntest262test: build/duk | deps/test262-es5-tests tmp\n\t@echo \"### test262test\"\n\t@# http://wiki.ecmascript.org/doku.php?id=test262:command\n\trm -f tmp/duk-test262.log tmp/duk-test262-filtered.log\n\t-cd deps/test262-es5-tests; $(PYTHON2) tools/packaging/test262.py --command \"../../$< {{path}}\" --summary >../../tmp/duk-test262.log\n\tcat tmp/duk-test262.log | $(PYTHON2) util/filter_test262_log.py doc/test262-known-issues.yaml > tmp/duk-test262-filtered.log\n\tcat tmp/duk-test262-filtered.log\n# Awkward helper to write out a testcase, the awkwardness is that it\n# reads command line arguments and complains about missing targets etc:\n# http://stackoverflow.com/questions/6273608/how-to-pass-argument-to-makefile-from-command-line\n.PHONY: test262cat\ntest262cat: | deps/test262-es5-tests\n\t@echo \"NOTE: this Makefile target will print a 'No rule...' error, ignore it\" >&2\n\t-@cd deps/test262-es5-tests; $(PYTHON2) tools/packaging/test262.py --command \"../../$< {{path}}\" --cat $(filter-out $@,$(MAKECMDGOALS)) 2>/dev/null\n.PHONY: emscriptentest\nemscriptentest: build/duk | tmp\n\t@echo \"### emscriptentest\"\n\t@rm -f tmp/duk-emcc-test*\n\t$(EMCC) $(EMCCOPTS) tests/emscripten/helloworld.c -o tmp/duk-emcc-test.js\n\tcat tmp/duk-emcc-test.js | $(PYTHON2) util/fix_emscripten.py > tmp/duk-emcc-test-fixed.js\n\t@ls -l tmp/duk-emcc-test*\n\t$< tmp/duk-emcc-test.js | tee tmp/duk-emcc-test.out\n\tif [ `md5sum tmp/duk-emcc-test.out | cut -f 1 -d ' '` != \"59ca0efa9f5633cb0371bbc0355478d8\" ]; then false; fi\n.PHONY: emscriptenmandeltest\nemscriptenmandeltest: build/duk | tmp\n\t@echo \"### emscriptenmandeltest\"\n\t@rm -f tmp/duk-emcc-test*\n\t$(EMCC) $(EMCCOPTS) tests/emscripten/mandelbrot.c -o tmp/duk-emcc-test.js\n\tcat tmp/duk-emcc-test.js | $(PYTHON2) util/fix_emscripten.py > tmp/duk-emcc-test-fixed.js\n\t@ls -l tmp/duk-emcc-test*\n\t$< tmp/duk-emcc-test.js | tee tmp/duk-emcc-test.out\n\tif [ `md5sum tmp/duk-emcc-test.out | cut -f 1 -d ' '` != \"a0b2daf2e979e192d9838d976920f213\" ]; then false; fi\n# Compile Duktape and hello.c using Emscripten and execute the result with\n# Duktape.\n.PHONY: emscripteninceptiontest\nemscripteninceptiontest: build/duk prep/nondebug | tmp\n\t@echo \"### emscripteninceptiontest\"\n\t@rm -f tmp/duk-emcc-test*\n\t$(EMCC) $(EMCCOPTS) -Iprep/nondebug prep/nondebug/duktape.c examples/hello/hello.c -o tmp/duk-emcc-test.js\n\tcat tmp/duk-emcc-test.js | $(PYTHON2) util/fix_emscripten.py > tmp/duk-emcc-test-fixed.js\n\t@ls -l tmp/duk-emcc-test*\n\t$< tmp/duk-emcc-test.js | tee tmp/duk-emcc-test.out\n\tif [ `md5sum tmp/duk-emcc-test.out | cut -f 1 -d ' '` != \"8521f9d969cdc0a2fa26661a151cef04\" ]; then false; fi\n# Compile Duktape with Emscripten and execute it with NodeJS.\n.PHONY: emscriptenduktest\nemscriptenduktest: prep/emduk | tmp\n\t@echo \"### emscriptenduktest\"\n\t@rm -f tmp/duk-emcc-duktest.js\n\t$(EMCC) $(EMCCOPTS_DUKVM) -Iprep/emduk prep/emduk/duktape.c examples/eval/eval.c -o tmp/duk-emcc-duktest.js\n\t\"$(NODEJS)\" tmp/duk-emcc-duktest.js \\\n\t\t'print(\"Hello from Duktape running inside Emscripten/NodeJS\");' \\\n\t\t'for(i=0;i++<100;)print((i%3?\"\":\"Fizz\")+(i%5?\"\":\"Buzz\")||i)' | tee tmp/duk-emcc-duktest-1.out\n\tif [ `md5sum tmp/duk-emcc-duktest-1.out | cut -f 1 -d ' '` != \"3c22acb0ec822d4c85f5d427e42826dc\" ]; then false; fi\n\t\"$(NODEJS)\" tmp/duk-emcc-duktest.js \"eval(new Buffer(Duktape.dec('base64', '$(MAND_BASE64)')).toString())\" | tee tmp/duk-emcc-duktest-2.out\n\tif [ `md5sum tmp/duk-emcc-duktest-2.out | cut -f 1 -d ' '` != \"c78521c68b60065e6ed0652bebd7af0b\" ]; then false; fi\nLUASRC=\tlapi.c lauxlib.c lbaselib.c lbitlib.c lcode.c lcorolib.c lctype.c \\\n\tldblib.c ldebug.c ldo.c ldump.c lfunc.c lgc.c linit.c liolib.c \\\n\tllex.c lmathlib.c lmem.c loadlib.c lobject.c lopcodes.c loslib.c \\\n\tlparser.c lstate.c lstring.c lstrlib.c ltable.c ltablib.c ltm.c \\\n\tlua.c lundump.c lvm.c lzio.c\n# Compile Lua 5.2.3 with Emscripten and run it with Duktape.\n.PHONY: emscriptenluatest\nemscriptenluatest: build/duk | deps/lua-5.2.3 tmp\n\t@echo \"### emscriptenluatest\"\n\t@rm -f tmp/duk-emcc-luatest*\n\t$(EMCC) $(EMCCOPTS) -Ideps/lua-5.2.3/src/ $(patsubst %,deps/lua-5.2.3/src/%,$(LUASRC)) -o tmp/duk-emcc-luatest.js\n\tcat tmp/duk-emcc-luatest.js | $(PYTHON2) util/fix_emscripten.py > tmp/duk-emcc-luatest-fixed.js\n\t@ls -l tmp/duk-emcc-luatest*\n\t$< tmp/duk-emcc-luatest.js | tee tmp/duk-emcc-luatest.out\n\tif [ `md5sum tmp/duk-emcc-luatest.out | cut -f 1 -d ' '` != \"280db36b7805a00f887d559c1ba8285d\" ]; then false; fi\n.PHONY: jsinterpretertest\njsinterpretertest: build/duk | deps/JS-Interpreter tmp\n\t@echo \"### jsinterpretertest\"\n\t@rm -f tmp/duk-jsint-test*\n\techo \"window = {};\" > tmp/duk-jsint-test.js\n\tcat deps/JS-Interpreter/acorn.js deps/JS-Interpreter/interpreter.js > tmp/duk-jsint-test.js\n\tcat tests/jsinterpreter/addition.js >> tmp/duk-jsint-test.js\n\t$< tmp/duk-jsint-test.js | tee tmp/duk-jsint-test.out\n\tif [ `md5sum tmp/duk-jsint-test.out | cut -f 1 -d ' '` != \"9ae0ea9e3c9c6e1b9b6252c8395efdc1\" ]; then false; fi\n.PHONY: luajstest\nluajstest: build/duk | deps/luajs tmp\n\t@rm -f tmp/duk-luajs-mandel.js tmp/duk-luajs-test.js\n\tdeps/luajs/lua2js tests/luajs/mandel.lua tmp/duk-luajs-mandel.js\n\techo \"console = { log: function() { print(Array.prototype.join.call(arguments, ' ')); } };\" > tmp/duk-luajs-test.js\n\tcat deps/luajs/lua.js tmp/duk-luajs-mandel.js >> tmp/duk-luajs-test.js\n\t$< tmp/duk-luajs-test.js | tee tmp/duk-luajs-test.out\n\tif [ `md5sum tmp/duk-luajs-test.out | cut -f 1 -d ' '` != \"a0b2daf2e979e192d9838d976920f213\" ]; then false; fi\n.PHONY: bluebirdtest\nbluebirdtest: build/duk deps/bluebird.js | tmp\n\t@rm -f tmp/duk-bluebird-test.js\n\tcat util/bluebird-test-shim.js deps/bluebird.js > tmp/duk-bluebird-test.js\n\techo \"var myPromise = new Promise(function(resolve, reject) { setTimeout(function () { resolve('resolved 123') }, 1000); });\" >> tmp/duk-bluebird-test.js\n\techo \"myPromise.then(function (v) { print('then:', v); });\" >> tmp/duk-bluebird-test.js\n\techo \"fakeEventLoop();\" >> tmp/duk-bluebird-test.js\n\t$< tmp/duk-bluebird-test.js | tee tmp/duk-bluebird-test.out\n\tif [ `md5sum tmp/duk-bluebird-test.out | cut -f 1 -d ' '` != \"6edf907604d970db7f6f4ca6991127db\" ]; then false; fi\n.PHONY: closuretest\nclosuretest: build/duk deps/closure-compiler.jar | tmp\n\t@echo \"### closuretest\"\n\t@rm -f tmp/duk-closure-test*\n\t$(JAVA) -jar deps/closure-compiler.jar tests/ecmascript/test-dev-mandel2-func.js > tmp/duk-closure-test.js\n\t$< tmp/duk-closure-test.js | tee tmp/duk-closure-test.out\n\tif [ `md5sum tmp/duk-closure-test.out | cut -f 1 -d ' '` != \"a0b2daf2e979e192d9838d976920f213\" ]; then false; fi\n.PHONY: xmldoctest\nxmldoctest: build/duk | deps/sax-js deps/xmldoc tmp\n\t@echo \"### xmldoctest\"\n\t@rm -f tmp/duk-xmldoc-test*\n\tcat deps/sax-js/lib/sax.js > tmp/duk-xmldoc-test.js\n\techo \";\" >> tmp/duk-xmldoc-test.js  # missing end semicolon causes automatic semicolon problem\n\tcat deps/xmldoc/lib/xmldoc.js >> tmp/duk-xmldoc-test.js\n\techo \";\" >> tmp/duk-xmldoc-test.js  # missing end semicolon causes automatic semicolon problem\n\tcat tests/xmldoc/basic.js >> tmp/duk-xmldoc-test.js\n\t$< tmp/duk-xmldoc-test.js | tee tmp/duk-xmldoc-test.out\n\tif [ `md5sum tmp/duk-xmldoc-test.out | cut -f 1 -d ' '` != \"798cab55f8c62f3cf24f277a8192518a\" ]; then false; fi\n.PHONY: errorinjecttest\nerrorinjecttest:\n\tbash tests/shell/inject/error_inject_test.sh\n.PHONY: checklisttest\nchecklisttest:\n\tbash tests/shell/release-checklist/checklist_compile_test.sh\n\n# Third party download/unpack targets, libraries etc.\ndeps/linenoise: | deps\n\t@# $(GIT) clone -q https://github.com/antirez/linenoise.git\n\t@# Use forked repo to get compile warnings fixed.\n\t$(GIT) clone -q --depth 1 -b fix-compile-warnings-duktape https://github.com/svaarala/linenoise.git $@\n\ttouch $@\ndeps/linenoise/linenoise.c: | deps/linenoise\ndeps/linenoise/linenoise.h: | deps/linenoise\ndeps/regfuzz-0.1.tar.gz: | deps\n\t@# https://code.google.com/p/regfuzz/\n\t@# SHA1: 774be8e3dda75d095225ba699ac59969d92ac970\n\t$(WGET) -q https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/regfuzz/regfuzz-0.1.tar.gz -O $@\n\ttouch $@\ndeps/regfuzz-0.1: deps/regfuzz-0.1.tar.gz | deps\n\ttar -C deps -x -z -f $<\n\ttouch $@\ndeps/underscore: | deps\n\t@# http://underscorejs.org/\n\t@# https://github.com/jashkenas/underscore\n\t@# Master is OK because not a critical dependency\n\t$(GIT) clone -q --depth 1 https://github.com/jashkenas/underscore.git $@\n\ttouch $@\ndeps/lodash: | deps\n\t@# http://lodash.com/\n\t@# https://github.com/lodash\n\t@# Use pre-built .js file.\n\t@#$(GIT) clone -q --depth 1 https://github.com/lodash/lodash.git $@\n\tmkdir -p $@\n\t$(WGET) -q https://raw.githubusercontent.com/lodash/lodash/4.17.10-npm/lodash.js -O $@/lodash.js\n\ttouch $@\ndeps/cbor-js: | deps\n\t$(GIT) clone -q --depth 1 https://github.com/paroga/cbor-js.git $@\n\ttouch $@\ndeps/test262-3883a2e9063b0a5f2705bdac3263577a03913c94.zip: | deps\n\t@# http://test262.ecmascript.org/\n\t@# https://github.com/tc39/test262\n\t@# HG repo seems to have migrated to https://github.com/tc39/test262\n\t@#$(WGET) -q http://hg.ecmascript.org/tests/test262/archive/d067d2f0ca30.tar.bz2 -O $@\n\t@#$(WGET) -q https://github.com/tc39/test262/archive/595a36b252ee97110724e6fa89fc92c9aa9a206a.zip -O $@\n\t@# This is a snapshot from the master, and seems to have test case bugs\n\t$(WGET) -q https://github.com/tc39/test262/archive/3883a2e9063b0a5f2705bdac3263577a03913c94.zip -O $@\n\ttouch $@\ndeps/test262-3883a2e9063b0a5f2705bdac3263577a03913c94: deps/test262-3883a2e9063b0a5f2705bdac3263577a03913c94.zip | deps\n\tunzip -d deps -q $<\n\ttouch $@\ndeps/test262-es5-tests.zip: | deps\n\t@# https://github.com/tc39/test262/tree/es5-tests\n\t@# This is a stable branch for ES5 tests\n\t$(WGET) -q https://github.com/tc39/test262/archive/es5-tests.zip -O $@\n\ttouch $@\ndeps/test262-es5-tests: deps/test262-es5-tests.zip | deps\n\tunzip -d deps -q $<\n\ttouch $@\ndeps/jquery-1.11.2.js: | deps\n\t$(WGET) -q http://code.jquery.com/jquery-1.11.2.js -O $@\n\ttouch $@\ndeps/lua-5.2.3.tar.gz: | deps\n\t$(WGET) -q http://www.lua.org/ftp/lua-5.2.3.tar.gz -O $@\n\ttouch $@\ndeps/lua-5.2.3: deps/lua-5.2.3.tar.gz | deps\n\ttar -C deps -x -z -f $<\n\ttouch $@\ndeps/luajs.zip: | deps\n\t@# https://github.com/mherkender/lua.js\n\t$(WGET) -q https://github.com/mherkender/lua.js/raw/precompiled2/luajs.zip -O $@\n\ttouch $@\ndeps/luajs: deps/luajs.zip | deps\n\tmkdir -p $@\n\tunzip -d deps/luajs -q $<\n\ttouch $@\ndeps/JS-Interpreter: | deps\n\t@# https://github.com/NeilFraser/JS-Interpreter\n\t@# Master is OK because not a critical dependency\n\t$(GIT) clone -q --depth 1 https://github.com/NeilFraser/JS-Interpreter.git $@\ndeps/bluebird.js: | deps\n\t$(WGET) -q https://cdn.jsdelivr.net/bluebird/latest/bluebird.js -O $@\n\ttouch $@\ndeps/closure-compiler-latest.zip: | deps\n\t@# Closure\n\t@# Prebuilt latest version; this is not good as a build dependency\n\t@# because closure changes may break minified initjs code and make\n\t@# old builds unreliable.\n\t@# https://code.google.com/p/closure-compiler/\n\t$(WGET) -q http://dl.google.com/closure-compiler/compiler-latest.zip -O $@\n\ttouch $@\ndeps/closure-compiler-v20140814.tar.gz: | deps\n\t@# https://github.com/google/closure-compiler\n\t$(WGET) -q https://github.com/google/closure-compiler/archive/v20140814.tar.gz -O $@\n\ttouch $@\ndeps/closure-compiler: deps/closure-compiler-v20140814.tar.gz | deps tmp\n\ttar -C tmp -x -z -f $<\n\tmv tmp/closure-compiler-20140814 $@\n\ttouch $@\ndeps/closure-compiler/build/compiler.jar: | deps/closure-compiler\n\tcd deps/closure-compiler; ant\ndeps/closure-compiler.jar: deps/closure-compiler/build/compiler.jar\n\tcp $< $@\n\ttouch $@\ndeps/uglifyjs-v3.15.0.tar.gz: | deps\n\t#$(WGET) -q https://github.com/mishoo/UglifyJS/archive/refs/tags/v3.15.0.tar.gz -O $@\n\t$(WGET) -q https://github.com/svaarala/UglifyJS/archive/refs/tags/v3.15.0.tar.gz -O $@\n\ttouch $@\ndeps/UglifyJS: deps/uglifyjs-v3.15.0.tar.gz | deps tmp\n\ttar -C tmp -x -z -f $<\n\tmv tmp/UglifyJS-3.15.0 $@\n\tcd $@ && npm install\n\ttouch $@\ndeps/coffee-script: | deps\n\t@# http://coffeescript.org/\n\t@# https://github.com/jashkenas/coffee-script\n\t$(GIT) clone -q --depth 1 https://github.com/jashkenas/coffee-script.git $@\n\ttouch $@\ndeps/LiveScript: | deps\n\t@# http://livescript.net/\n\t@# https://github.com/gkz/LiveScript\n\t$(GIT) clone -q --depth 1 https://github.com/gkz/LiveScript.git $@\n\ttouch $@\ndeps/coco: | deps\n\t@# https://github.com/satyr/coco\n\t$(GIT) clone -q --depth 1 https://github.com/satyr/coco $@\n\ttouch $@\ndeps/sax-js: | deps\n\t@# https://github.com/isaacs/sax-js\n\t$(GIT) clone -q --depth 1 https://github.com/isaacs/sax-js.git $@\n\ttouch $@\ndeps/xmldoc: | deps\n\t@# https://github.com/nfarina/xmldoc\n\t@# http://nfarina.com/post/34302964969/a-lightweight-xml-document-class-for-nodejs-javascript\n\t$(GIT) clone -q --depth 1 https://github.com/nfarina/xmldoc.git $@\n\ttouch $@\ndeps/FlameGraph: | deps\n\t@# http://www.brendangregg.com/FlameGraphs/cpuflamegraphs.html\n\t@# https://github.com/brendangregg/FlameGraph\n\t$(GIT) clone -q --depth 1 https://github.com/brendangregg/FlameGraph.git $@\n\ttouch $@\ndeps/dtrace4linux: | deps\n\t@# https://github.com/dtrace4linux/linux\n\t@# http://crtags.blogspot.fi/\n\t$(GIT) clone -q --depth 1 https://github.com/dtrace4linux/linux.git $@\n\ttouch $@\ndeps/flow: | deps\n\t@# https://github.com/facebook/flow\n\t$(GIT) clone -q --depth 1 https://github.com/facebook/flow.git $@\n\ttouch $@\ndeps/lz-string: | deps\n\t# https://github.com/pieroxy/lz-string.git\n\t$(GIT) clone -q --depth 1 https://github.com/pieroxy/lz-string.git $@\n\ttouch $@\ndeps/citylots.json: | deps\n\t$(WGET) -q https://github.com/zemirco/sf-city-lots-json/raw/master/citylots.json -O $@\n\ttouch $@\ndeps/fuzzilli: | deps\n\t$(GIT) clone -q https://github.com/googleprojectzero/fuzzilli $@\n\ttouch $@\n\n# Duktape binary releases are in a separate repo.\ndeps/duktape-releases:\n\t$(GIT) clone -q https://github.com/svaarala/duktape-releases.git $@\n\ttouch $@\n\n# Reference documents.\nreferences/ECMA-262\\ 5th\\ edition\\ December\\ 2009.pdf:\n\t$(WGET) -q \"http://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262%205th%20edition%20December%202009.pdf\" -O \"$@\"\nreferences/ECMA-262\\ 5.1\\ edition\\ June\\ 2011.pdf:\n\t$(WGET) -q \"http://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262%205.1%20edition%20June%202011.pdf\" -O \"$@\"\nreferences/ECMA-262.pdf:\n\t$(WGET) -q \"http://www.ecma-international.org/ecma-262/6.0/ECMA-262.pdf\" -O \"$@\"\n.PHONY: refs\nrefs: references/ECMA-262\\ 5th\\ edition\\ December\\ 2009.pdf \\\n\treferences/ECMA-262\\ 5.1\\ edition\\ June\\ 2011.pdf \\\n\treferences/ECMA-262.pdf\n\n# Documentation.\n.PHONY: doc\ndoc: $(patsubst %.txt,%.html,$(wildcard doc/*.txt))\ndoc/%.html: doc/%.txt\n\trst2html $< $@\n\n# Source distributable for end users.\ndist/source: build/duktool.js prep-duktool | codepolicycheck dist\n\t$(NODEJS) $< dist --validate-git --repo-directory . --output-directory $@\n\tcp src-tools/duktool.js $@/tools/\ndist/duktape-$(DUK_VERSION_FORMATTED).tar: dist/source | dist\n\trm -rf dist/duktape-$(DUK_VERSION_FORMATTED) dist/duktape-$(DUK_VERSION_FORMATTED).*\n\tmkdir dist/duktape-$(DUK_VERSION_FORMATTED) && cp -r dist/source/* dist/duktape-$(DUK_VERSION_FORMATTED)/\n\ttar -C dist -c -f dist/duktape-$(DUK_VERSION_FORMATTED).tar duktape-$(DUK_VERSION_FORMATTED)/\n\trm -rf dist/duktape-$(DUK_VERSION_FORMATTED)\ndist/duktape-$(DUK_VERSION_FORMATTED).tar.xz: dist/duktape-$(DUK_VERSION_FORMATTED).tar | dist\n\txz -k -z -e -9 $<\ndist/duktape-$(DUK_VERSION_FORMATTED).tar.gz: dist/duktape-$(DUK_VERSION_FORMATTED).tar | dist\n\tgzip -k -9 $<\ndist/duktape-$(DUK_VERSION_FORMATTED)-$(BUILD_DATETIME)-$(GIT_INFO).tar.xz: dist/duktape-$(DUK_VERSION_FORMATTED).tar.xz | dist\n\tcp $< $@\ndist/duktape-$(DUK_VERSION_FORMATTED)-$(BUILD_DATETIME)-$(GIT_INFO).tar.gz: dist/duktape-$(DUK_VERSION_FORMATTED).tar.gz | dist\n\tcp $< $@\ndist/duktape-$(DUK_VERSION_FORMATTED)-$(BUILD_DATETIME)-$(GIT_INFO).iso: dist/duktape-$(DUK_VERSION_FORMATTED)-$(BUILD_DATETIME)-$(GIT_INFO).tar.gz | dist\n\tcd dist && genisoimage -r -input-charset utf-8 -o duktape-$(DUK_VERSION_FORMATTED)-$(BUILD_DATETIME)-$(GIT_INFO).iso duktape-$(DUK_VERSION_FORMATTED)-$(BUILD_DATETIME)-$(GIT_INFO).tar.gz\n.PHONY: dist-source\ndist-source: dist/duktape-$(DUK_VERSION_FORMATTED).tar.xz dist/duktape-$(DUK_VERSION_FORMATTED)-$(BUILD_DATETIME)-$(GIT_INFO).tar.xz\n.PHONY: dist-source-iso\ndist-source-iso: dist/duktape-$(DUK_VERSION_FORMATTED)-$(BUILD_DATETIME)-$(GIT_INFO).iso\n\n# Website targets.\n.PHONY: duktape-releases-update\nduktape-releases-update: | deps/duktape-releases\n\tcd deps/duktape-releases/; git pull --rebase\nbuild/RELEASES.rst: build/duktool.js releases/releases.yaml | build\n\t$(NODEJS) $< generate-releases-rst --input releases/releases.yaml --output $@\n\n.PHONY: tidy-site\ntidy-site:\n\tfor i in website/*/*.html; do echo \"*** Checking $$i\"; tidy -q -e -xml $$i; done\ndist/site: build/dukweb.js build/dukweb.wasm build/RELEASES.rst deps/jquery-1.11.2.js | deps/lz-string deps/duktape-releases dist\n\tmkdir -p $@\n\t-cd deps/duktape-releases/; git pull --rebase  # get binaries up-to-date, but allow errors for offline use\n\tcd website/; $(PYTHON2) buildsite.py ../dist/site/\n\tfor i in dist/site/*.html; do echo \"tidy checking $$i\"; tidy -q -e -xml -utf8 $$i; done\ndist/duktape-site-$(DUK_VERSION_FORMATTED).tar: dist/site | dist\n\trm -rf dist/duktape-site-$(DUK_VERSION_FORMATTED) dist/duktape-site-$(DUK_VERSION_FORMATTED).*\n\tmkdir dist/duktape-site-$(DUK_VERSION_FORMATTED) && cp -r dist/site/* dist/duktape-site-$(DUK_VERSION_FORMATTED)/\n\ttar -C dist -c -f dist/duktape-site-$(DUK_VERSION_FORMATTED).tar duktape-site-$(DUK_VERSION_FORMATTED)/\n\trm -rf duktape-site-$(DUK_VERSION_FORMATTED)\ndist/duktape-site-$(DUK_VERSION_FORMATTED).tar.xz: dist/duktape-site-$(DUK_VERSION_FORMATTED).tar | dist\n\txz -k -z -e -9 $<\ndist/duktape-site-$(DUK_VERSION_FORMATTED)-$(BUILD_DATETIME)-$(GIT_INFO).tar.xz: dist/duktape-site-$(DUK_VERSION_FORMATTED).tar.xz | dist\n\tcp $< $@\n.PHONY: dist-site\ndist-site: tidy-site duktape-releases-update dist/duktape-site-$(DUK_VERSION_FORMATTED).tar.xz dist/duktape-site-$(DUK_VERSION_FORMATTED)-$(BUILD_DATETIME)-$(GIT_INFO).tar.xz\n\n# Code policy check.\nifeq ($(CI),1)\nCODEPOLICYOPTS=--fail-on-errors\nelse\nCODEPOLICYOPTS=\nendif\n.PHONY: codepolicycheck\ncodepolicycheck:\n\t@echo Code policy check\n\t# --check-debug-log-calls: omitted, no longer passes with clang-format.\n\t@$(PYTHON2) util/check_code_policy.py \\\n\t\t$(CODEPOLICYOPTS) \\\n\t\t--check-carriage-returns \\\n\t\t--check-fixme \\\n\t\t--check-non-ascii \\\n\t\t--check-no-symbol-visibility \\\n\t\t--check-rejected-identifiers \\\n\t\t--check-trailing-whitespace \\\n\t\t--check-mixed-indent \\\n\t\t--check-nonleading-tab \\\n\t\t--check-cpp-comment \\\n\t\t--check-float-compare \\\n\t\t--check-ifdef-ifndef \\\n\t\t--check-longlong-constants \\\n\t\t--dump-vim-commands \\\n\t\tsrc-input/*.c src-input/*.h src-input/*.h.in tests/api/*.c\n\t@$(PYTHON2) util/check_code_policy.py \\\n\t\t$(CODEPOLICYOPTS) \\\n\t\t--check-carriage-returns \\\n\t\t--check-fixme \\\n\t\t--check-non-ascii \\\n\t\t--check-trailing-whitespace \\\n\t\t--check-mixed-indent \\\n\t\t--check-tab-indent \\\n\t\t--dump-vim-commands \\\n\t\tsrc-input/*.py tools/*.py util/*.py debugger/*/*.py examples/*/*.py testrunner/*.py tests/perf/*.py\n\t@$(PYTHON2) util/check_code_policy.py \\\n\t\t$(CODEPOLICYOPTS) \\\n\t\t--check-debug-log-calls \\\n\t\t--check-carriage-returns \\\n\t\t--check-fixme \\\n\t\t--check-no-symbol-visibility \\\n\t\t--check-trailing-whitespace \\\n\t\t--check-mixed-indent \\\n\t\t--check-tab-indent \\\n\t\t--check-nonleading-tab \\\n\t\t--dump-vim-commands \\\n\t\ttests/ecmascript/*.js\n\t@$(PYTHON2) util/check_code_policy.py \\\n\t\t$(CODEPOLICYOPTS) \\\n\t\t--check-carriage-returns \\\n\t\t--check-fixme \\\n\t\t--check-non-ascii \\\n\t\t--check-trailing-whitespace \\\n\t\t--check-mixed-indent \\\n\t\t--check-nonleading-tab \\\n\t\t--check-cpp-comment \\\n\t\t--check-ifdef-ifndef \\\n\t\t--dump-vim-commands \\\n\t\texamples/*/*.c examples/*/*.h \\\n\t\textras/*/*.c extras/*/*.h\n\t@$(PYTHON2) util/check_code_policy.py \\\n\t\t$(CODEPOLICYOPTS) \\\n\t\t--check-carriage-returns \\\n\t\t--check-fixme \\\n\t\t--check-non-ascii \\\n\t\t--check-trailing-whitespace \\\n\t\t--check-mixed-indent \\\n\t\t--check-nonleading-tab \\\n\t\t--check-ifdef-ifndef \\\n\t\t--dump-vim-commands \\\n\t\tconfig/architectures/* config/compilers/* config/platforms/* \\\n\t\tconfig/feature-options/*.yaml \\\n\t\tconfig/examples/* config/header-snippets/* config/helper-snippets/* \\\n\t\tconfig/*.yaml\n\t@$(PYTHON2) util/check_code_policy.py \\\n\t\t$(CODEPOLICYOPTS) \\\n\t\t--check-carriage-returns \\\n\t\t--check-fixme \\\n\t\t--check-non-ascii \\\n\t\t--check-trailing-whitespace \\\n\t\t--check-mixed-indent \\\n\t\t--check-nonleading-tab \\\n\t\t--dump-vim-commands \\\n\t\tconfig/config-options/*.yaml\n\t@$(PYTHON2) util/check_code_policy.py \\\n\t\t$(CODEPOLICYOPTS) \\\n\t\t--check-carriage-returns \\\n\t\t--check-fixme \\\n\t\t--check-non-ascii \\\n\t\t--check-trailing-whitespace \\\n\t\t--check-mixed-indent \\\n\t\t--check-nonleading-tab \\\n\t\t--dump-vim-commands \\\n\t\tdebugger/*.yaml\n\t@$(PYTHON2) util/check_code_policy.py \\\n\t\t$(CODEPOLICYOPTS) \\\n\t\t--check-carriage-returns \\\n\t\t--check-fixme \\\n\t\t--check-non-ascii \\\n\t\t--check-trailing-whitespace \\\n\t\t--check-mixed-indent \\\n\t\t--check-nonleading-tab \\\n\t\t--dump-vim-commands \\\n\t\twebsite/api/*.yaml website/api/*.html\n\t@$(PYTHON2) util/check_code_policy.py \\\n\t\t$(CODEPOLICYOPTS) \\\n\t\t--check-carriage-returns \\\n\t\t--dump-vim-commands \\\n\t\tdoc/*.rst\n.PHONY: codepolicycheckvim\ncodepolicycheckvim:\n\t-$(PYTHON2) util/check_code_policy.py --dump-vim-commands src-input/*.c src-input/*.h src-input/*.h.in tests/api/*.c\n\n.PHONY: clang-format-source\nclang-format-source: | tmp\n\t-rm -f tmp/docker-clang-format-input.zip tmp/docker-clang-format-output.zip\n\t@# Omit duktape.h.in for now, clang-format has some issues with e.g. 'extern \"C\"' in the file.\n\tzip -1 -q -r tmp/docker-clang-format-input.zip .clang-format src-input/*.c src-input/*.h\n\t$(DOCKER) run --rm -i duktape-clang-format < tmp/docker-clang-format-input.zip > tmp/docker-clang-format-output.zip\n\tunzip -q -o tmp/docker-clang-format-output.zip ; true  # avoid failure due to leading garbage\n\n.PHONY: clang-format-source-check\nclang-format-source-check: clang-format-source\n\tif `git diff | grep -q '^diff'`; then git diff; echo; echo \"*** clang-format-source created diff, run 'make clang-format-source' and commit diff ***\"; echo; false; fi\n\n# Simple heap graph and peak usage using valgrind --tool=massif, for quick\n# and dirty baseline comparison.  Say e.g. 'make massif-test-dev-hello-world'.\n# The target name is intentionally not 'massif-%.out' so that the rule is never\n# satisfied and can be executed multiple times without cleaning.\n# Grep/sed hacks from:\n# http://stackoverflow.com/questions/774556/peak-memory-usage-of-a-linux-unix-process\nmassif-%: tests/ecmascript/%.js duk\n\t@rm -f $(@).out\n\tvalgrind --tool=massif --peak-inaccuracy=0.0 --massif-out-file=$(@).out ./duk $< >/dev/null 2>/dev/null\n\t@ms_print $(@).out | head -35\n\t@echo \"[... clipped... ]\"\n\t@echo \"\"\n\t@echo -n \"MAXIMUM: \"\n\t@cat $(@).out | grep mem_heap_B | sed -e 's/mem_heap_B=\\(.*\\)/\\1/' | sort -g | tail -n 1\n# Convenience targets\nmassif-helloworld: massif-test-dev-hello-world\nmassif-deepmerge: massif-test-dev-deepmerge\nmassif-arcfour: massif-test-dev-arcfour\n\n# Docker targets for building images and running specific targets in a\n# docker container for easier reproducibility.  Creating the images\n# initially takes a long time.\n.PHONY: docker-prepare\ndocker-prepare:\n\tcd docker && for subdir in duktape-*; do \\\n\t\tif [ -f ~/.gitconfig ]; then cp ~/.gitconfig $$subdir/gitconfig; else touch $$subdir/gitconfig; fi; \\\n\t\tcp prepare_repo.sh $$subdir/; \\\n\tdone\n\n.PHONY: docker-images-ubuntu-18.04-x64\ndocker-images-ubuntu-18.04-x64: docker-prepare\n\t$(DOCKER) build --build-arg UID=$(shell id -u) --build-arg GID=$(shell id -g) -t duktape-base-ubuntu-18.04-x64 docker/duktape-base-ubuntu-18.04-x64\n\t$(DOCKER) build -t duktape-shell-ubuntu-18.04-x64 docker/duktape-shell-ubuntu-18.04-x64\n\t$(DOCKER) build -t duktape-make-ubuntu-18.04-x64 docker/duktape-make-ubuntu-18.04-x64\n\t$(DOCKER) build -t duktape-release-1-ubuntu-18.04-x64 docker/duktape-release-1-ubuntu-18.04-x64\n\n.PHONY: docker-images-ubuntu-20.04-x64\ndocker-images-ubuntu-20.04-x64: docker-prepare\n\t$(DOCKER) build --build-arg UID=$(shell id -u) --build-arg GID=$(shell id -g) -t duktape-base-ubuntu-20.04-x64 docker/duktape-base-ubuntu-20.04-x64\n\t$(DOCKER) build -t duktape-shell-ubuntu-20.04-x64 docker/duktape-shell-ubuntu-20.04-x64\n\t$(DOCKER) build -t duktape-make-ubuntu-20.04-x64 docker/duktape-make-ubuntu-20.04-x64\n\t$(DOCKER) build -t duktape-release-1-ubuntu-20.04-x64 docker/duktape-release-1-ubuntu-20.04-x64\n\n.PHONY: docker-images-ubuntu-20.04-arm64\ndocker-images-ubuntu-20.04-arm64: docker-prepare\n\t$(DOCKER) build --build-arg UID=$(shell id -u) --build-arg GID=$(shell id -g) -t duktape-base-ubuntu-20.04-arm64 docker/duktape-base-ubuntu-20.04-arm64\n\t$(DOCKER) build -t duktape-shell-ubuntu-20.04-arm64 docker/duktape-shell-ubuntu-20.04-arm64\n\t$(DOCKER) build -t duktape-make-ubuntu-20.04-arm64 docker/duktape-make-ubuntu-20.04-arm64\n\t$(DOCKER) build -t duktape-release-1-ubuntu-20.04-arm64 docker/duktape-release-1-ubuntu-20.04-arm64\n\n.PHONY: docker-images-x64\ndocker-images-x64: docker-images-ubuntu-20.04-x64\n\n.PHONY: docker-images-arm64\ndocker-images-arm64: docker-images-ubuntu-20.04-arm64\n\n.PHONY: docker-images-s390x\ndocker-images-s390x: docker-prepare\n\t$(DOCKER) build --build-arg UID=$(shell id -u) --build-arg GID=$(shell id -g) -t duktape-base-ubuntu-18.04-s390x docker/duktape-base-ubuntu-18.04-s390x\n\t$(DOCKER) build -t duktape-shell-ubuntu-18.04-s390x docker/duktape-shell-ubuntu-18.04-s390x\n\n# Build Docker image for fuzzilli fuzz testing, tag as 'fuzzilli'.\n.PHONY: docker-image-fuzzilli\ndocker-image-fuzzilli: build/duk-fuzzilli deps/fuzzilli\n\tmkdir -p deps/fuzzilli/Cloud/Docker/DuktapeBuilder/out\n\tcp build/duk-fuzzilli deps/fuzzilli/Cloud/Docker/DuktapeBuilder/out/\n\tcd deps/fuzzilli/Cloud/Docker; ./build.sh fuzzilli # Don't use duktape build option here, as duk-fuzzilli is already present\n\n.PHONY: docker-image-clang-format\ndocker-image-clang-format:\n\t$(DOCKER) build --build-arg UID=$(shell id -u) --build-arg GID=$(shell id -g) -t duktape-clang-format docker/duktape-clang-format\n\n.PHONY: docker-images\ndocker-images: docker-images-x64\n\n.PHONY: docker-clean\ndocker-clean:\n\t-rm -f docker/*/gitconfig docker/*/prepare_repo.sh\n\t-$(DOCKER) rmi duktape-release-1-ubuntu-18.04-x64:latest\n\t-$(DOCKER) rmi duktape-make-ubuntu-18.04-x64:latest\n\t-$(DOCKER) rmi duktape-shell-ubuntu-18.04-x64:latest\n\t-$(DOCKER) rmi duktape-base-ubuntu-18.04-x64:latest\n\t-$(DOCKER) rmi duktape-release-1-ubuntu-20.04-x64:latest\n\t-$(DOCKER) rmi duktape-make-ubuntu-20.04-x64:latest\n\t-$(DOCKER) rmi duktape-shell-ubuntu-20.04-x64:latest\n\t-$(DOCKER) rmi duktape-base-ubuntu-20.04-x64:latest\n\t-$(DOCKER) rmi duktape-release-1-ubuntu-20.04-arm64:latest\n\t-$(DOCKER) rmi duktape-make-ubuntu-20.04-arm64:latest\n\t-$(DOCKER) rmi duktape-shell-ubuntu-20.04-arm64:latest\n\t-$(DOCKER) rmi duktape-base-ubuntu-20.04-arm64:latest\n\t-$(DOCKER) rmi duktape-shell-ubuntu-18.04-s390x:latest\n\t-$(DOCKER) rmi duktape-base-ubuntu-18.04-s390x:latest\n\t-$(DOCKER) rm fuzzilli_runner\n\t-$(DOCKER) rmi fuzzilli\n\t@echo \"\"\n\t@echo \"Now run 'docker system prune' to free disk space.\"\n\n.PHONY: docker-dist-source-master\ndocker-dist-source-master: | tmp\n\t$(DOCKER) run --rm -i duktape-make-ubuntu-20.04-$(DOCKER_ARCH) clean dist-source > tmp/docker-output.zip\n\tunzip -q -o tmp/docker-output.zip ; true  # avoid failure due to leading garbage\n\n.PHONY: docker-dist-source-wd\ndocker-dist-source-wd: | tmp\n\trm -f tmp/docker-input.zip tmp/docker-output.zip\n\t@#git archive --format zip --output tmp/docker-input.zip HEAD\n\tzip -1 -q -r tmp/docker-input.zip .\n\t$(DOCKER) run --rm -i -e STDIN_ZIP=1 duktape-make-ubuntu-20.04-$(DOCKER_ARCH) clean dist-source < tmp/docker-input.zip > tmp/docker-output.zip\n\tunzip -q -o tmp/docker-output.zip ; true  # avoid failure due to leading garbage\n\n.PHONY: docker-dist-site-master\ndocker-dist-site-master: | tmp\n\trm -f tmp/docker-input.zip tmp/docker-output.zip\n\t$(DOCKER) run --rm -i duktape-make-ubuntu-20.04-$(DOCKER_ARCH) clean dist-site > tmp/docker-output.zip\n\tunzip -q -o tmp/docker-output.zip ; true  # avoid failure due to leading garbage\n\n.PHONY: docker-dist-site-wd\ndocker-dist-site-wd: | tmp\n\trm -f tmp/docker-input.zip tmp/docker-output.zip\n\t@#git archive --format zip --output tmp/docker-input.zip HEAD\n\tzip -1 -q -r tmp/docker-input.zip .\n\t$(DOCKER) run --rm -i -e STDIN_ZIP=1 duktape-make-ubuntu-20.04-$(DOCKER_ARCH) clean dist-site < tmp/docker-input.zip > tmp/docker-output.zip\n\tunzip -q -o tmp/docker-output.zip ; true  # avoid failure due to leading garbage\n\n.PHONY: docker-duk-master\ndocker-duk-master: | tmp\n\trm -f tmp/docker-input.zip tmp/docker-output.zip\n\t$(DOCKER) run --rm -i duktape-make-ubuntu-20.04-$(DOCKER_ARCH) clean build/duk build/duk.O2 > tmp/docker-output.zip\n\tunzip -q -o tmp/docker-output.zip ; true\n\n.PHONY: docker-duk-wd\ndocker-duk-wd: | tmp\n\trm -f tmp/docker-input.zip tmp/docker-output.zip\n\t@#git archive --format zip --output tmp/docker-input.zip HEAD\n\tzip -1 -q -r tmp/docker-input.zip .\n\t$(DOCKER) run --rm -i -e STDIN_ZIP=1 duktape-make-ubuntu-20.04-$(DOCKER_ARCH) clean build/duk build/duk.O2 < tmp/docker-input.zip > tmp/docker-output.zip\n\tunzip -q -o tmp/docker-output.zip ; true\n\n.PHONY: docker-shell-master\ndocker-shell-master: | tmp\n\t$(DOCKER) run --rm -ti duktape-shell-ubuntu-20.04-$(DOCKER_ARCH)\n\n.PHONY: docker-shell-wd\ndocker-shell-wd: | tmp\n\t$(DOCKER) run -v $(shell pwd):/work/duktape-host --rm -ti duktape-shell-ubuntu-20.04-$(DOCKER_ARCH)\n\n.PHONY: docker-shell-wdmount\ndocker-shell-wdmount: | tmp\n\t$(DOCKER) run -v $(shell pwd):/work/duktape --rm -ti duktape-shell-ubuntu-20.04-$(DOCKER_ARCH)\n\n.PHONY: docker-release-1-wd\ndocker-release-1-wd: | tmp\n\trm -f tmp/docker-input.zip tmp/docker-output.zip\n\t@#git archive --format zip --output tmp/docker-input.zip HEAD\n\tzip -1 -q -r tmp/docker-input.zip .\n\t$(DOCKER) run --rm -i -e STDIN_ZIP=1 duktape-release-1-ubuntu-20.04-$(DOCKER_ARCH) < tmp/docker-input.zip\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.8017578125,
          "content": "Duktape\n=======\n\n[![Build status](https://github.com/svaarala/duktape/workflows/Build/badge.svg?branch=master)](https://github.com/svaarala/duktape/actions)\n[![Test status](https://github.com/svaarala/duktape/workflows/Test/badge.svg?branch=master)](https://github.com/svaarala/duktape/actions)\n\n:warning: **Master branch is undergoing incompatible changes for Duktape 3.x**.\nTo track Duktape 2.x, follow the `v2-maintenance` branch.\n\nIntroduction\n------------\n\n[Duktape](http://duktape.org/) is an **embeddable Javascript** engine,\nwith a focus on **portability** and **compact** footprint.\n\nDuktape is easy to integrate into a C/C++ project: add `duktape.c`,\n`duktape.h`, and `duk_config.h` to your build, and use the Duktape API\nto call ECMAScript functions from C code and vice versa.\n\nMain features:\n\n* Embeddable, portable, compact\n* ECMAScript E5/E5.1 compliant, with some semantics updated from ES2015+\n* Partial support for ECMAScript 2015 (E6) and ECMAScript 2016 (E7),\n  [Post-ES5 feature status](http://wiki.duktape.org/PostEs5Features.html),\n  [kangax/compat-table](https://kangax.github.io/compat-table)\n* ES2015 TypedArray and Node.js Buffer bindings\n* WHATWG Encoding API living standard\n* Built-in debugger\n* Built-in regular expression engine\n* Built-in Unicode support\n* Minimal platform dependencies\n* Combined reference counting and mark-and-sweep garbage collection with finalization\n* Custom features like coroutines\n* Property virtualization using a subset of ECMAScript ES2015 Proxy object\n* Bytecode dump/load for caching compiled functions\n* Distributable includes an optional logging framework, CommonJS-based module\n  loading implementations, CBOR bindings, etc\n* Liberal MIT license (see LICENSE.txt)\n\nSee [duktape.org](http://duktape.org/) for packaged end-user downloads\nand documentation.  The end user downloads are also available from the\n[duktape-releases](https://github.com/svaarala/duktape-releases) repo\nas both binaries and in unpacked form as git tags.\n\nHave fun!\n\nSupport\n-------\n\n* Duktape Wiki: [wiki.duktape.org](http://wiki.duktape.org)\n* User community Q&A: Stack Overflow [duktape](http://stackoverflow.com/questions/tagged/duktape) tag\n* Bugs and feature requests: [GitHub issues](https://github.com/svaarala/duktape/issues)\n* General discussion: IRC `#duktape` on `chat.freenode.net` ([webchat](https://webchat.freenode.net))\n\nAbout this repository\n---------------------\n\nThis repository is **intended for Duktape developers only**, and contains\nDuktape internals: test cases, internal documentation, sources for the\nduktape.org web site, etc.\n\nGetting started: end user\n-------------------------\n\nWhen embedding Duktape in your application you should use the packaged source\ndistributables available from [duktape.org/download.html](http://duktape.org/download.html).\nSee [duktape.org/guide.html#gettingstarted](http://duktape.org/guide.html#gettingstarted)\nfor the basics.\n\nThe distributable `src/` directory contains a `duk_config.h` configuration\nheader and amalgamated sources for Duktape default configuration.  If\nnecessary, use `python tools/configure.py` to create header and sources for\ncustomized configuration options, see http://wiki.duktape.org/Configuring.html.\nFor example, to enable fastint support (example for Linux):\n\n    $ tar xvfJ duktape-2.0.0.tar.xz\n    $ cd duktape-2.0.0\n    $ rm -rf src-custom\n    $ python tools/configure.py \\\n          --source-directory src-input \\\n          --output-directory src-custom \\\n          --config-metadata config \\\n          -DDUK_USE_FASTINT\n\n    # src-custom/ will now contain: duktape.c, duktape.h, duk_config.h.\n\nYou can download and install Duktape using the\n[vcpkg](https://github.com/Microsoft/vcpkg) dependency manager:\n   \n    $ git clone https://github.com/Microsoft/vcpkg.git\n    $ cd vcpkg\n    $ ./bootstrap-vcpkg.sh\n    $ ./vcpkg integrate install\n    $ vcpkg install duktape\n    \nThe Duktape port in vcpkg is kept up to date by Microsoft team members\nand community contributors.  If the version is out of date, please\n[create an issue or pull request](https://github.com/Microsoft/vcpkg) on\nthe vcpkg repository.\n\nYou can also clone this repository, make modifications, and build a source\ndistributable on Linux, macOS, and Windows using `python util/dist.py`.\nYou'll need Python 2 and Python YAML binding.\n\nGetting started: modifying and rebuilding the distributable\n-----------------------------------------------------------\n\nIf you intend to change Duktape internals and want to rebuild the source\ndistributable in Linux, macOS, or Windows:\n\n    # Linux; can often install from packages or using 'pip'\n    # Install Node.js >= 16.x\n    $ sudo apt-get install python python-yaml\n    $ python util/dist.py\n\n    # macOS\n    # Install Python 2.7.x\n    # Install Node.js >= 16.x\n    $ pip install PyYAML\n    $ python util/dist.py\n\n    # Windows\n    ; Install Python 2.7.x from python.org, and add it to PATH\n    ; Install Node.js >= 16.x\n    > pip install PyYAML\n    > python util\\dist.py\n\nThe source distributable directory will be in `dist/`.\n\nFor platform specific notes see http://wiki.duktape.org/DevelopmentSetup.html.\n\nGetting started: other development (Linux only)\n-----------------------------------------------\n\nOther development stuff, such as building the website and running test cases,\nis based on a `Makefile` **supported for Linux x86-64 only**.\n\nThere are some Docker images which can simplify the development setup and also\ndocument the needed packages.  These are also **supported for Linux x86-64 only**.\nFor example:\n\n    # Build Docker images.  This takes a long time.\n    $ make docker-images\n\n    # Equivalent of 'make dist-source', but runs inside a container.\n    $ make docker-dist-source-wd\n\n    # Run a shell with /work/duktape containing a disposable master snapshot.\n    $ make docker-shell-master\n\n    # Run a shell with /work/duktape mounted from current directory.\n    # This allows editing, building, testing, etc with an interactive\n    # shell running in the container.\n    $ make docker-shell-wdmount\n\n    # For non-native images you may need:\n    # https://github.com/multiarch/qemu-user-static\n\nThere is limited support for developing on macOS via Docker.  On Apple M1:\n\n    $ make docker-images-arm64\n    $ DOCKER_ARCH=arm64 make docker-shell-wdmount\n\nBranch policy\n-------------\n\n* The `master` branch is used for active development.  Even though pull requests\n  are tested before merging, master may still be broken from time to time.  When\n  development on a new major release starts, master will also get API\n  incompatible changes without warning.  For these reasons **you should\n  generally not depend on the master branch** for building your project; use\n  a release tag (e.g. `v2.4.0`) or a release maintenance branch\n  (e.g. `v2.4-maintenance` or `v2-maintenance`) instead.\n\n* Pull requests and their related branches are frequently rebased so you\n  should not fork off them.  Pull requests may be open for a while for\n  testing and discussion.\n\n* Release tags like `v1.4.1` are used for releases and match the released\n  distributables.  These are stable once the release is complete.\n\n* Maintenance branches are used for backporting fixes and features for\n  maintenance releases.  Documentation changes go to master for maintenance\n  releases too.  For example, `v1.5-maintenance` was created for the 1.5.0\n  release and is used for 1.5.x maintenance releases.\n\n* A maintenance branch is also created for a major release when master moves\n  on to active development of the next major release.  For example,\n  `v1-maintenance` was created when 1.5.0 was released (last planned 1.x\n  release) and development of 2.0.0 (with API incompatible changes) started\n  on master.  The 1.6.0 and 1.7.0 releases were made from `v1-maintenance`\n  for example.\n\nVersioning\n----------\n\nDuktape uses [Semantic Versioning](http://semver.org/) for official\nreleases.  Builds from Duktape repo are not official releases and don't\nfollow strict semver, mainly because `DUK_VERSION` needs to have some\ncompromise value that won't be strictly semver conforming.\nBecause Duktape tracks the latest ECMAScript specification versions,\ncompliance fixes are made in minor versions even when they are technically\nnot backwards compatible.  See\n[Versioning](http://duktape.org/guide.html#versioning) for details.\n\nReporting bugs\n--------------\n\nSee [CONTRIBUTING.md](https://github.com/svaarala/duktape/blob/master/CONTRIBUTING.md) and [SECURITY.md](https://github.com/svaarala/duktape/blob/master/SECURITY.md).\n\nContributing\n------------\n\nSee [CONTRIBUTING.md](https://github.com/svaarala/duktape/blob/master/CONTRIBUTING.md).\n\nCopyright and license\n---------------------\n\nSee [AUTHORS.rst](https://github.com/svaarala/duktape/blob/master/AUTHORS.rst)\nand [LICENSE.txt](https://github.com/svaarala/duktape/blob/master/LICENSE.txt).\n\n[Duktape Wiki](https://github.com/svaarala/duktape-wiki/) is part of Duktape\ndocumentation and under the same copyright and license.\n"
        },
        {
          "name": "RELEASES.rst",
          "type": "blob",
          "size": 0.2138671875,
          "content": "================\nDuktape releases\n================\n\nRelease information can be found at https://duktape.org/download.html.\nRaw release metadata is maintained in https://github.com/svaarala/duktape/tree/master/releases.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.408203125,
          "content": "# Security policy\n\n## Supported versions\n\nFixes for security vulnerabilities are made to master and latest\nmajor release, and on a case-by-case for other maintained versions.\n\n## Reporting a vulnerability\n\nPlease report (suspected) security vulnerabilities to\n**[sami.vaarala@ik.fi](mailto:sami.vaarala@iki.fi)**.\n\nSecurity critical GitHub issues (for example anything leading to a segfault)\ncan be tagged `security`.\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "debugger",
          "type": "tree",
          "content": null
        },
        {
          "name": "dist-files",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "dukweb",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "extras",
          "type": "tree",
          "content": null
        },
        {
          "name": "licenses",
          "type": "tree",
          "content": null
        },
        {
          "name": "misc",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.6826171875,
          "content": "{\n    \"name\": \"@duktape/duktape-repo\",\n    \"version\": \"2.99.99\",\n    \"description\": \"Dummy package for Duktape repository\",\n    \"license\": \"SEE LICENSE IN LICENSE.txt\",\n    \"private\": true,\n    \"homepage\": \"https://duktape.org/\",\n    \"author\": {\n        \"name\": \"Sami Vaarala\",\n        \"email\": \"sami.vaarala@iki.fi\"\n    },\n    \"contributors\": [],\n    \"repository\": \"github:svaarala/duktape\",\n    \"scripts\": {},\n    \"bugs\": {\n        \"url\": \"https://github.com/svaarala/duktape/issues\",\n        \"email\": \"sami.vaarala@iki.fi\"\n    },\n    \"engines\": {\n        \"node\": \">=14\"\n    },\n    \"org_duktape\": {\n        \"comment\": \"All custom properties should go here.\",\n        \"extDependencies\": {}\n    }\n}\n"
        },
        {
          "name": "polyfills",
          "type": "tree",
          "content": null
        },
        {
          "name": "references",
          "type": "tree",
          "content": null
        },
        {
          "name": "releases",
          "type": "tree",
          "content": null
        },
        {
          "name": "runtests",
          "type": "tree",
          "content": null
        },
        {
          "name": "src-input",
          "type": "tree",
          "content": null
        },
        {
          "name": "src-tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "testrunner",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "util",
          "type": "tree",
          "content": null
        },
        {
          "name": "website",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}