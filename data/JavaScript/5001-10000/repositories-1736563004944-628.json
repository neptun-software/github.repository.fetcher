{
  "metadata": {
    "timestamp": 1736563004944,
    "page": 628,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "expressjs/body-parser",
      "stars": 5457,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".eslintignore",
          "type": "blob",
          "size": 0.021484375,
          "content": "coverage\nnode_modules\n"
        },
        {
          "name": ".eslintrc.yml",
          "type": "blob",
          "size": 0.18359375,
          "content": "root: true\nextends:\n  - standard\n  - plugin:markdown/recommended\nplugins:\n  - markdown\noverrides:\n  - files: '**/*.md'\n    processor: 'markdown/markdown'\nrules:\n  no-param-reassign: error\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0673828125,
          "content": ".nyc_output/\ncoverage/\nnode_modules/\nnpm-debug.log\npackage-lock.json\n"
        },
        {
          "name": "HISTORY.md",
          "type": "blob",
          "size": 17.5126953125,
          "content": "2.0.2 / 2024-10-31\n=========================\n\n* remove `unpipe` package and use native `unpipe()` method\n\n2.0.1 / 2024-09-10\n=========================\n\n* Restore expected behavior `extended` to `false`\n\n2.0.0 / 2024-09-10\n=========================\n* Propagate changes from 1.20.3 \n* add brotli support #406\n* Breaking Change: Node.js 18 is the minimum supported version\n\n2.0.0-beta.2 / 2023-02-23\n=========================\n\nThis incorporates all changes after 1.19.1 up to 1.20.2.\n\n  * Remove deprecated `bodyParser()` combination middleware\n  * deps: debug@3.1.0\n    - Add `DEBUG_HIDE_DATE` environment variable\n    - Change timer to per-namespace instead of global\n    - Change non-TTY date format\n    - Remove `DEBUG_FD` environment variable support\n    - Support 256 namespace colors\n  * deps: iconv-lite@0.5.2\n    - Add encoding cp720\n    - Add encoding UTF-32\n  * deps: raw-body@3.0.0-beta.1\n\n2.0.0-beta.1 / 2021-12-17\n=========================\n\n  * Drop support for Node.js 0.8\n  * `req.body` is no longer always initialized to `{}`\n    - it is left `undefined` unless a body is parsed\n  * `urlencoded` parser now defaults `extended` to `false`\n  * Use `on-finished` to determine when body read\n\n1.20.3 / 2024-09-10\n===================\n\n  * deps: qs@6.13.0\n  * add `depth` option to customize the depth level in the parser\n  * IMPORTANT: The default `depth` level for parsing URL-encoded data is now `32` (previously was `Infinity`)\n \n1.20.2 / 2023-02-21\n===================\n\n  * Fix strict json error message on Node.js 19+\n  * deps: content-type@~1.0.5\n    - perf: skip value escaping when unnecessary\n  * deps: raw-body@2.5.2\n\n1.20.1 / 2022-10-06\n===================\n\n  * deps: qs@6.11.0\n  * perf: remove unnecessary object clone\n\n1.20.0 / 2022-04-02\n===================\n\n  * Fix error message for json parse whitespace in `strict`\n  * Fix internal error when inflated body exceeds limit\n  * Prevent loss of async hooks context\n  * Prevent hanging when request already read\n  * deps: depd@2.0.0\n    - Replace internal `eval` usage with `Function` constructor\n    - Use instance methods on `process` to check for listeners\n  * deps: http-errors@2.0.0\n    - deps: depd@2.0.0\n    - deps: statuses@2.0.1\n  * deps: on-finished@2.4.1\n  * deps: qs@6.10.3\n  * deps: raw-body@2.5.1\n    - deps: http-errors@2.0.0\n\n1.19.2 / 2022-02-15\n===================\n\n  * deps: bytes@3.1.2\n  * deps: qs@6.9.7\n    * Fix handling of `__proto__` keys\n  * deps: raw-body@2.4.3\n    - deps: bytes@3.1.2\n\n1.19.1 / 2021-12-10\n===================\n\n  * deps: bytes@3.1.1\n  * deps: http-errors@1.8.1\n    - deps: inherits@2.0.4\n    - deps: toidentifier@1.0.1\n    - deps: setprototypeof@1.2.0\n  * deps: qs@6.9.6\n  * deps: raw-body@2.4.2\n    - deps: bytes@3.1.1\n    - deps: http-errors@1.8.1\n  * deps: safe-buffer@5.2.1\n  * deps: type-is@~1.6.18\n\n1.19.0 / 2019-04-25\n===================\n\n  * deps: bytes@3.1.0\n    - Add petabyte (`pb`) support\n  * deps: http-errors@1.7.2\n    - Set constructor name when possible\n    - deps: setprototypeof@1.1.1\n    - deps: statuses@'>= 1.5.0 < 2'\n  * deps: iconv-lite@0.4.24\n    - Added encoding MIK\n  * deps: qs@6.7.0\n    - Fix parsing array brackets after index\n  * deps: raw-body@2.4.0\n    - deps: bytes@3.1.0\n    - deps: http-errors@1.7.2\n    - deps: iconv-lite@0.4.24\n  * deps: type-is@~1.6.17\n    - deps: mime-types@~2.1.24\n    - perf: prevent internal `throw` on invalid type\n\n1.18.3 / 2018-05-14\n===================\n\n  * Fix stack trace for strict json parse error\n  * deps: depd@~1.1.2\n    - perf: remove argument reassignment\n  * deps: http-errors@~1.6.3\n    - deps: depd@~1.1.2\n    - deps: setprototypeof@1.1.0\n    - deps: statuses@'>= 1.3.1 < 2'\n  * deps: iconv-lite@0.4.23\n    - Fix loading encoding with year appended\n    - Fix deprecation warnings on Node.js 10+\n  * deps: qs@6.5.2\n  * deps: raw-body@2.3.3\n    - deps: http-errors@1.6.3\n    - deps: iconv-lite@0.4.23\n  * deps: type-is@~1.6.16\n    - deps: mime-types@~2.1.18\n\n1.18.2 / 2017-09-22\n===================\n\n  * deps: debug@2.6.9\n  * perf: remove argument reassignment\n\n1.18.1 / 2017-09-12\n===================\n\n  * deps: content-type@~1.0.4\n    - perf: remove argument reassignment\n    - perf: skip parameter parsing when no parameters\n  * deps: iconv-lite@0.4.19\n    - Fix ISO-8859-1 regression\n    - Update Windows-1255\n  * deps: qs@6.5.1\n    - Fix parsing & compacting very deep objects\n  * deps: raw-body@2.3.2\n    - deps: iconv-lite@0.4.19\n\n1.18.0 / 2017-09-08\n===================\n\n  * Fix JSON strict violation error to match native parse error\n  * Include the `body` property on verify errors\n  * Include the `type` property on all generated errors\n  * Use `http-errors` to set status code on errors\n  * deps: bytes@3.0.0\n  * deps: debug@2.6.8\n  * deps: depd@~1.1.1\n    - Remove unnecessary `Buffer` loading\n  * deps: http-errors@~1.6.2\n    - deps: depd@1.1.1\n  * deps: iconv-lite@0.4.18\n    - Add support for React Native\n    - Add a warning if not loaded as utf-8\n    - Fix CESU-8 decoding in Node.js 8\n    - Improve speed of ISO-8859-1 encoding\n  * deps: qs@6.5.0\n  * deps: raw-body@2.3.1\n    - Use `http-errors` for standard emitted errors\n    - deps: bytes@3.0.0\n    - deps: iconv-lite@0.4.18\n    - perf: skip buffer decoding on overage chunk\n  * perf: prevent internal `throw` when missing charset\n\n1.17.2 / 2017-05-17\n===================\n\n  * deps: debug@2.6.7\n    - Fix `DEBUG_MAX_ARRAY_LENGTH`\n    - deps: ms@2.0.0\n  * deps: type-is@~1.6.15\n    - deps: mime-types@~2.1.15\n\n1.17.1 / 2017-03-06\n===================\n\n  * deps: qs@6.4.0\n    - Fix regression parsing keys starting with `[`\n\n1.17.0 / 2017-03-01\n===================\n\n  * deps: http-errors@~1.6.1\n    - Make `message` property enumerable for `HttpError`s\n    - deps: setprototypeof@1.0.3\n  * deps: qs@6.3.1\n    - Fix compacting nested arrays\n\n1.16.1 / 2017-02-10\n===================\n\n  * deps: debug@2.6.1\n    - Fix deprecation messages in WebStorm and other editors\n    - Undeprecate `DEBUG_FD` set to `1` or `2`\n\n1.16.0 / 2017-01-17\n===================\n\n  * deps: debug@2.6.0\n    - Allow colors in workers\n    - Deprecated `DEBUG_FD` environment variable\n    - Fix error when running under React Native\n    - Use same color for same namespace\n    - deps: ms@0.7.2\n  * deps: http-errors@~1.5.1\n    - deps: inherits@2.0.3\n    - deps: setprototypeof@1.0.2\n    - deps: statuses@'>= 1.3.1 < 2'\n  * deps: iconv-lite@0.4.15\n    - Added encoding MS-31J\n    - Added encoding MS-932\n    - Added encoding MS-936\n    - Added encoding MS-949\n    - Added encoding MS-950\n    - Fix GBK/GB18030 handling of Euro character\n  * deps: qs@6.2.1\n    - Fix array parsing from skipping empty values\n  * deps: raw-body@~2.2.0\n    - deps: iconv-lite@0.4.15\n  * deps: type-is@~1.6.14\n    - deps: mime-types@~2.1.13\n\n1.15.2 / 2016-06-19\n===================\n\n  * deps: bytes@2.4.0\n  * deps: content-type@~1.0.2\n    - perf: enable strict mode\n  * deps: http-errors@~1.5.0\n    - Use `setprototypeof` module to replace `__proto__` setting\n    - deps: statuses@'>= 1.3.0 < 2'\n    - perf: enable strict mode\n  * deps: qs@6.2.0\n  * deps: raw-body@~2.1.7\n    - deps: bytes@2.4.0\n    - perf: remove double-cleanup on happy path\n  * deps: type-is@~1.6.13\n    - deps: mime-types@~2.1.11\n\n1.15.1 / 2016-05-05\n===================\n\n  * deps: bytes@2.3.0\n    - Drop partial bytes on all parsed units\n    - Fix parsing byte string that looks like hex\n  * deps: raw-body@~2.1.6\n    - deps: bytes@2.3.0\n  * deps: type-is@~1.6.12\n    - deps: mime-types@~2.1.10\n\n1.15.0 / 2016-02-10\n===================\n\n  * deps: http-errors@~1.4.0\n    - Add `HttpError` export, for `err instanceof createError.HttpError`\n    - deps: inherits@2.0.1\n    - deps: statuses@'>= 1.2.1 < 2'\n  * deps: qs@6.1.0\n  * deps: type-is@~1.6.11\n    - deps: mime-types@~2.1.9\n\n1.14.2 / 2015-12-16\n===================\n\n  * deps: bytes@2.2.0\n  * deps: iconv-lite@0.4.13\n  * deps: qs@5.2.0\n  * deps: raw-body@~2.1.5\n    - deps: bytes@2.2.0\n    - deps: iconv-lite@0.4.13\n  * deps: type-is@~1.6.10\n    - deps: mime-types@~2.1.8\n\n1.14.1 / 2015-09-27\n===================\n\n  * Fix issue where invalid charset results in 400 when `verify` used\n  * deps: iconv-lite@0.4.12\n    - Fix CESU-8 decoding in Node.js 4.x\n  * deps: raw-body@~2.1.4\n    - Fix masking critical errors from `iconv-lite`\n    - deps: iconv-lite@0.4.12\n  * deps: type-is@~1.6.9\n    - deps: mime-types@~2.1.7\n\n1.14.0 / 2015-09-16\n===================\n\n  * Fix JSON strict parse error to match syntax errors\n  * Provide static `require` analysis in `urlencoded` parser\n  * deps: depd@~1.1.0\n    - Support web browser loading\n  * deps: qs@5.1.0\n  * deps: raw-body@~2.1.3\n    - Fix sync callback when attaching data listener causes sync read\n  * deps: type-is@~1.6.8\n    - Fix type error when given invalid type to match against\n    - deps: mime-types@~2.1.6\n\n1.13.3 / 2015-07-31\n===================\n\n  * deps: type-is@~1.6.6\n    - deps: mime-types@~2.1.4\n\n1.13.2 / 2015-07-05\n===================\n\n  * deps: iconv-lite@0.4.11\n  * deps: qs@4.0.0\n    - Fix dropping parameters like `hasOwnProperty`\n    - Fix user-visible incompatibilities from 3.1.0\n    - Fix various parsing edge cases\n  * deps: raw-body@~2.1.2\n    - Fix error stack traces to skip `makeError`\n    - deps: iconv-lite@0.4.11\n  * deps: type-is@~1.6.4\n    - deps: mime-types@~2.1.2\n    - perf: enable strict mode\n    - perf: remove argument reassignment\n\n1.13.1 / 2015-06-16\n===================\n\n  * deps: qs@2.4.2\n    - Downgraded from 3.1.0 because of user-visible incompatibilities\n\n1.13.0 / 2015-06-14\n===================\n\n  * Add `statusCode` property on `Error`s, in addition to `status`\n  * Change `type` default to `application/json` for JSON parser\n  * Change `type` default to `application/x-www-form-urlencoded` for urlencoded parser\n  * Provide static `require` analysis\n  * Use the `http-errors` module to generate errors\n  * deps: bytes@2.1.0\n    - Slight optimizations\n  * deps: iconv-lite@0.4.10\n    - The encoding UTF-16 without BOM now defaults to UTF-16LE when detection fails\n    - Leading BOM is now removed when decoding\n  * deps: on-finished@~2.3.0\n    - Add defined behavior for HTTP `CONNECT` requests\n    - Add defined behavior for HTTP `Upgrade` requests\n    - deps: ee-first@1.1.1\n  * deps: qs@3.1.0\n    - Fix dropping parameters like `hasOwnProperty`\n    - Fix various parsing edge cases\n    - Parsed object now has `null` prototype\n  * deps: raw-body@~2.1.1\n    - Use `unpipe` module for unpiping requests\n    - deps: iconv-lite@0.4.10\n  * deps: type-is@~1.6.3\n    - deps: mime-types@~2.1.1\n    - perf: reduce try block size\n    - perf: remove bitwise operations\n  * perf: enable strict mode\n  * perf: remove argument reassignment\n  * perf: remove delete call\n\n1.12.4 / 2015-05-10\n===================\n\n  * deps: debug@~2.2.0\n  * deps: qs@2.4.2\n    - Fix allowing parameters like `constructor`\n  * deps: on-finished@~2.2.1\n  * deps: raw-body@~2.0.1\n    - Fix a false-positive when unpiping in Node.js 0.8\n    - deps: bytes@2.0.1\n  * deps: type-is@~1.6.2\n    - deps: mime-types@~2.0.11\n\n1.12.3 / 2015-04-15\n===================\n\n  * Slight efficiency improvement when not debugging\n  * deps: depd@~1.0.1\n  * deps: iconv-lite@0.4.8\n    - Add encoding alias UNICODE-1-1-UTF-7\n  * deps: raw-body@1.3.4\n    - Fix hanging callback if request aborts during read\n    - deps: iconv-lite@0.4.8\n\n1.12.2 / 2015-03-16\n===================\n\n  * deps: qs@2.4.1\n    - Fix error when parameter `hasOwnProperty` is present\n\n1.12.1 / 2015-03-15\n===================\n\n  * deps: debug@~2.1.3\n    - Fix high intensity foreground color for bold\n    - deps: ms@0.7.0\n  * deps: type-is@~1.6.1\n    - deps: mime-types@~2.0.10\n\n1.12.0 / 2015-02-13\n===================\n\n  * add `debug` messages\n  * accept a function for the `type` option\n  * use `content-type` to parse `Content-Type` headers\n  * deps: iconv-lite@0.4.7\n    - Gracefully support enumerables on `Object.prototype`\n  * deps: raw-body@1.3.3\n    - deps: iconv-lite@0.4.7\n  * deps: type-is@~1.6.0\n    - fix argument reassignment\n    - fix false-positives in `hasBody` `Transfer-Encoding` check\n    - support wildcard for both type and subtype (`*/*`)\n    - deps: mime-types@~2.0.9\n\n1.11.0 / 2015-01-30\n===================\n\n  * make internal `extended: true` depth limit infinity\n  * deps: type-is@~1.5.6\n    - deps: mime-types@~2.0.8\n\n1.10.2 / 2015-01-20\n===================\n\n  * deps: iconv-lite@0.4.6\n    - Fix rare aliases of single-byte encodings\n  * deps: raw-body@1.3.2\n    - deps: iconv-lite@0.4.6\n\n1.10.1 / 2015-01-01\n===================\n\n  * deps: on-finished@~2.2.0\n  * deps: type-is@~1.5.5\n    - deps: mime-types@~2.0.7\n\n1.10.0 / 2014-12-02\n===================\n\n  * make internal `extended: true` array limit dynamic\n\n1.9.3 / 2014-11-21\n==================\n\n  * deps: iconv-lite@0.4.5\n    - Fix Windows-31J and X-SJIS encoding support\n  * deps: qs@2.3.3\n    - Fix `arrayLimit` behavior\n  * deps: raw-body@1.3.1\n    - deps: iconv-lite@0.4.5\n  * deps: type-is@~1.5.3\n    - deps: mime-types@~2.0.3\n\n1.9.2 / 2014-10-27\n==================\n\n  * deps: qs@2.3.2\n    - Fix parsing of mixed objects and values\n\n1.9.1 / 2014-10-22\n==================\n\n  * deps: on-finished@~2.1.1\n    - Fix handling of pipelined requests\n  * deps: qs@2.3.0\n    - Fix parsing of mixed implicit and explicit arrays\n  * deps: type-is@~1.5.2\n    - deps: mime-types@~2.0.2\n\n1.9.0 / 2014-09-24\n==================\n\n  * include the charset in \"unsupported charset\" error message\n  * include the encoding in \"unsupported content encoding\" error message\n  * deps: depd@~1.0.0\n\n1.8.4 / 2014-09-23\n==================\n\n  * fix content encoding to be case-insensitive\n\n1.8.3 / 2014-09-19\n==================\n\n  * deps: qs@2.2.4\n    - Fix issue with object keys starting with numbers truncated\n\n1.8.2 / 2014-09-15\n==================\n\n  * deps: depd@0.4.5\n\n1.8.1 / 2014-09-07\n==================\n\n  * deps: media-typer@0.3.0\n  * deps: type-is@~1.5.1\n\n1.8.0 / 2014-09-05\n==================\n\n  * make empty-body-handling consistent between chunked requests\n    - empty `json` produces `{}`\n    - empty `raw` produces `new Buffer(0)`\n    - empty `text` produces `''`\n    - empty `urlencoded` produces `{}`\n  * deps: qs@2.2.3\n    - Fix issue where first empty value in array is discarded\n  * deps: type-is@~1.5.0\n    - fix `hasbody` to be true for `content-length: 0`\n\n1.7.0 / 2014-09-01\n==================\n\n  * add `parameterLimit` option to `urlencoded` parser\n  * change `urlencoded` extended array limit to 100\n  * respond with 413 when over `parameterLimit` in `urlencoded`\n\n1.6.7 / 2014-08-29\n==================\n\n  * deps: qs@2.2.2\n    - Remove unnecessary cloning\n\n1.6.6 / 2014-08-27\n==================\n\n  * deps: qs@2.2.0\n    - Array parsing fix\n    - Performance improvements\n\n1.6.5 / 2014-08-16\n==================\n\n  * deps: on-finished@2.1.0\n\n1.6.4 / 2014-08-14\n==================\n\n  * deps: qs@1.2.2\n\n1.6.3 / 2014-08-10\n==================\n\n  * deps: qs@1.2.1\n\n1.6.2 / 2014-08-07\n==================\n\n  * deps: qs@1.2.0\n    - Fix parsing array of objects\n\n1.6.1 / 2014-08-06\n==================\n\n  * deps: qs@1.1.0\n    - Accept urlencoded square brackets\n    - Accept empty values in implicit array notation\n\n1.6.0 / 2014-08-05\n==================\n\n  * deps: qs@1.0.2\n    - Complete rewrite\n    - Limits array length to 20\n    - Limits object depth to 5\n    - Limits parameters to 1,000\n\n1.5.2 / 2014-07-27\n==================\n\n  * deps: depd@0.4.4\n    - Work-around v8 generating empty stack traces\n\n1.5.1 / 2014-07-26\n==================\n\n  * deps: depd@0.4.3\n    - Fix exception when global `Error.stackTraceLimit` is too low\n\n1.5.0 / 2014-07-20\n==================\n\n  * deps: depd@0.4.2\n    - Add `TRACE_DEPRECATION` environment variable\n    - Remove non-standard grey color from color output\n    - Support `--no-deprecation` argument\n    - Support `--trace-deprecation` argument\n  * deps: iconv-lite@0.4.4\n    - Added encoding UTF-7\n  * deps: raw-body@1.3.0\n    - deps: iconv-lite@0.4.4\n    - Added encoding UTF-7\n    - Fix `Cannot switch to old mode now` error on Node.js 0.10+\n  * deps: type-is@~1.3.2\n\n1.4.3 / 2014-06-19\n==================\n\n  * deps: type-is@1.3.1\n    - fix global variable leak\n\n1.4.2 / 2014-06-19\n==================\n\n  * deps: type-is@1.3.0\n    - improve type parsing\n\n1.4.1 / 2014-06-19\n==================\n\n  * fix urlencoded extended deprecation message\n\n1.4.0 / 2014-06-19\n==================\n\n  * add `text` parser\n  * add `raw` parser\n  * check accepted charset in content-type (accepts utf-8)\n  * check accepted encoding in content-encoding (accepts identity)\n  * deprecate `bodyParser()` middleware; use `.json()` and `.urlencoded()` as needed\n  * deprecate `urlencoded()` without provided `extended` option\n  * lazy-load urlencoded parsers\n  * parsers split into files for reduced mem usage\n  * support gzip and deflate bodies\n    - set `inflate: false` to turn off\n  * deps: raw-body@1.2.2\n    - Support all encodings from `iconv-lite`\n\n1.3.1 / 2014-06-11\n==================\n\n  * deps: type-is@1.2.1\n    - Switch dependency from mime to mime-types@1.0.0\n\n1.3.0 / 2014-05-31\n==================\n\n  * add `extended` option to urlencoded parser\n\n1.2.2 / 2014-05-27\n==================\n\n  * deps: raw-body@1.1.6\n    - assert stream encoding on node.js 0.8\n    - assert stream encoding on node.js < 0.10.6\n    - deps: bytes@1\n\n1.2.1 / 2014-05-26\n==================\n\n  * invoke `next(err)` after request fully read\n    - prevents hung responses and socket hang ups\n\n1.2.0 / 2014-05-11\n==================\n\n  * add `verify` option\n  * deps: type-is@1.2.0\n    - support suffix matching\n\n1.1.2 / 2014-05-11\n==================\n\n  * improve json parser speed\n\n1.1.1 / 2014-05-11\n==================\n\n  * fix repeated limit parsing with every request\n\n1.1.0 / 2014-05-10\n==================\n\n  * add `type` option\n  * deps: pin for safety and consistency\n\n1.0.2 / 2014-04-14\n==================\n\n  * use `type-is` module\n\n1.0.1 / 2014-03-20\n==================\n\n  * lower default limits to 100kb\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.14453125,
          "content": "(The MIT License)\n\nCopyright (c) 2014 Jonathan Ong <me@jongleberry.com>\nCopyright (c) 2014-2015 Douglas Christopher Wilson <doug@somethingdoug.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 18.94140625,
          "content": "# body-parser\n\n[![NPM Version][npm-version-image]][npm-url]\n[![NPM Downloads][npm-downloads-image]][npm-url]\n[![Build Status][ci-image]][ci-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n[![OpenSSF Scorecard Badge][ossf-scorecard-badge]][ossf-scorecard-visualizer]\n\nNode.js body parsing middleware.\n\nParse incoming request bodies in a middleware before your handlers, available\nunder the `req.body` property.\n\n**Note** As `req.body`'s shape is based on user-controlled input, all\nproperties and values in this object are untrusted and should be validated\nbefore trusting. For example, `req.body.foo.toString()` may fail in multiple\nways, for example the `foo` property may not be there or may not be a string,\nand `toString` may not be a function and instead a string or other user input.\n\n[Learn about the anatomy of an HTTP transaction in Node.js](https://nodejs.org/en/docs/guides/anatomy-of-an-http-transaction/).\n\n_This does not handle multipart bodies_, due to their complex and typically\nlarge nature. For multipart bodies, you may be interested in the following\nmodules:\n\n  * [busboy](https://www.npmjs.org/package/busboy#readme) and\n    [connect-busboy](https://www.npmjs.org/package/connect-busboy#readme)\n  * [multiparty](https://www.npmjs.org/package/multiparty#readme) and\n    [connect-multiparty](https://www.npmjs.org/package/connect-multiparty#readme)\n  * [formidable](https://www.npmjs.org/package/formidable#readme)\n  * [multer](https://www.npmjs.org/package/multer#readme)\n\nThis module provides the following parsers:\n\n  * [JSON body parser](#bodyparserjsonoptions)\n  * [Raw body parser](#bodyparserrawoptions)\n  * [Text body parser](#bodyparsertextoptions)\n  * [URL-encoded form body parser](#bodyparserurlencodedoptions)\n\nOther body parsers you might be interested in:\n\n- [body](https://www.npmjs.org/package/body#readme)\n- [co-body](https://www.npmjs.org/package/co-body#readme)\n\n## Installation\n\n```sh\n$ npm install body-parser\n```\n\n## API\n\n```js\nvar bodyParser = require('body-parser')\n```\n\nThe `bodyParser` object exposes various factories to create middlewares. All\nmiddlewares will populate the `req.body` property with the parsed body when\nthe `Content-Type` request header matches the `type` option.\n\nThe various errors returned by this module are described in the\n[errors section](#errors).\n\n### bodyParser.json([options])\n\nReturns middleware that only parses `json` and only looks at requests where\nthe `Content-Type` header matches the `type` option. This parser accepts any\nUnicode encoding of the body and supports automatic inflation of `gzip`,\n`br` (brotli) and `deflate` encodings.\n\nA new `body` object containing the parsed data is populated on the `request`\nobject after the middleware (i.e. `req.body`).\n\n#### Options\n\nThe `json` function takes an optional `options` object that may contain any of\nthe following keys:\n\n##### inflate\n\nWhen set to `true`, then deflated (compressed) bodies will be inflated; when\n`false`, deflated bodies are rejected. Defaults to `true`.\n\n##### limit\n\nControls the maximum request body size. If this is a number, then the value\nspecifies the number of bytes; if it is a string, the value is passed to the\n[bytes](https://www.npmjs.com/package/bytes) library for parsing. Defaults\nto `'100kb'`.\n\n##### reviver\n\nThe `reviver` option is passed directly to `JSON.parse` as the second\nargument. You can find more information on this argument\n[in the MDN documentation about JSON.parse](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#Example.3A_Using_the_reviver_parameter).\n\n##### strict\n\nWhen set to `true`, will only accept arrays and objects; when `false` will\naccept anything `JSON.parse` accepts. Defaults to `true`.\n\n##### type\n\nThe `type` option is used to determine what media type the middleware will\nparse. This option can be a string, array of strings, or a function. If not a\nfunction, `type` option is passed directly to the\n[type-is](https://www.npmjs.org/package/type-is#readme) library and this can\nbe an extension name (like `json`), a mime type (like `application/json`), or\na mime type with a wildcard (like `*/*` or `*/json`). If a function, the `type`\noption is called as `fn(req)` and the request is parsed if it returns a truthy\nvalue. Defaults to `application/json`.\n\n##### verify\n\nThe `verify` option, if supplied, is called as `verify(req, res, buf, encoding)`,\nwhere `buf` is a `Buffer` of the raw request body and `encoding` is the\nencoding of the request. The parsing can be aborted by throwing an error.\n\n### bodyParser.raw([options])\n\nReturns middleware that parses all bodies as a `Buffer` and only looks at\nrequests where the `Content-Type` header matches the `type` option. This\nparser supports automatic inflation of `gzip`, `br` (brotli) and `deflate`\nencodings.\n\nA new `body` object containing the parsed data is populated on the `request`\nobject after the middleware (i.e. `req.body`). This will be a `Buffer` object\nof the body.\n\n#### Options\n\nThe `raw` function takes an optional `options` object that may contain any of\nthe following keys:\n\n##### inflate\n\nWhen set to `true`, then deflated (compressed) bodies will be inflated; when\n`false`, deflated bodies are rejected. Defaults to `true`.\n\n##### limit\n\nControls the maximum request body size. If this is a number, then the value\nspecifies the number of bytes; if it is a string, the value is passed to the\n[bytes](https://www.npmjs.com/package/bytes) library for parsing. Defaults\nto `'100kb'`.\n\n##### type\n\nThe `type` option is used to determine what media type the middleware will\nparse. This option can be a string, array of strings, or a function.\nIf not a function, `type` option is passed directly to the\n[type-is](https://www.npmjs.org/package/type-is#readme) library and this\ncan be an extension name (like `bin`), a mime type (like\n`application/octet-stream`), or a mime type with a wildcard (like `*/*` or\n`application/*`). If a function, the `type` option is called as `fn(req)`\nand the request is parsed if it returns a truthy value. Defaults to\n`application/octet-stream`.\n\n##### verify\n\nThe `verify` option, if supplied, is called as `verify(req, res, buf, encoding)`,\nwhere `buf` is a `Buffer` of the raw request body and `encoding` is the\nencoding of the request. The parsing can be aborted by throwing an error.\n\n### bodyParser.text([options])\n\nReturns middleware that parses all bodies as a string and only looks at\nrequests where the `Content-Type` header matches the `type` option. This\nparser supports automatic inflation of `gzip`, `br` (brotli) and `deflate`\nencodings.\n\nA new `body` string containing the parsed data is populated on the `request`\nobject after the middleware (i.e. `req.body`). This will be a string of the\nbody.\n\n#### Options\n\nThe `text` function takes an optional `options` object that may contain any of\nthe following keys:\n\n##### defaultCharset\n\nSpecify the default character set for the text content if the charset is not\nspecified in the `Content-Type` header of the request. Defaults to `utf-8`.\n\n##### inflate\n\nWhen set to `true`, then deflated (compressed) bodies will be inflated; when\n`false`, deflated bodies are rejected. Defaults to `true`.\n\n##### limit\n\nControls the maximum request body size. If this is a number, then the value\nspecifies the number of bytes; if it is a string, the value is passed to the\n[bytes](https://www.npmjs.com/package/bytes) library for parsing. Defaults\nto `'100kb'`.\n\n##### type\n\nThe `type` option is used to determine what media type the middleware will\nparse. This option can be a string, array of strings, or a function. If not\na function, `type` option is passed directly to the\n[type-is](https://www.npmjs.org/package/type-is#readme) library and this can\nbe an extension name (like `txt`), a mime type (like `text/plain`), or a mime\ntype with a wildcard (like `*/*` or `text/*`). If a function, the `type`\noption is called as `fn(req)` and the request is parsed if it returns a\ntruthy value. Defaults to `text/plain`.\n\n##### verify\n\nThe `verify` option, if supplied, is called as `verify(req, res, buf, encoding)`,\nwhere `buf` is a `Buffer` of the raw request body and `encoding` is the\nencoding of the request. The parsing can be aborted by throwing an error.\n\n### bodyParser.urlencoded([options])\n\nReturns middleware that only parses `urlencoded` bodies and only looks at\nrequests where the `Content-Type` header matches the `type` option. This\nparser accepts only UTF-8 encoding of the body and supports automatic\ninflation of `gzip`, `br` (brotli) and `deflate` encodings.\n\nA new `body` object containing the parsed data is populated on the `request`\nobject after the middleware (i.e. `req.body`). This object will contain\nkey-value pairs, where the value can be a string or array (when `extended` is\n`false`), or any type (when `extended` is `true`).\n\n#### Options\n\nThe `urlencoded` function takes an optional `options` object that may contain\nany of the following keys:\n\n##### extended\n\nThe \"extended\" syntax allows for rich objects and arrays to be encoded into the\nURL-encoded format, allowing for a JSON-like experience with URL-encoded. For\nmore information, please [see the qs\nlibrary](https://www.npmjs.org/package/qs#readme).\n\nDefaults to `false`.\n\n##### inflate\n\nWhen set to `true`, then deflated (compressed) bodies will be inflated; when\n`false`, deflated bodies are rejected. Defaults to `true`.\n\n##### limit\n\nControls the maximum request body size. If this is a number, then the value\nspecifies the number of bytes; if it is a string, the value is passed to the\n[bytes](https://www.npmjs.com/package/bytes) library for parsing. Defaults\nto `'100kb'`.\n\n##### parameterLimit\n\nThe `parameterLimit` option controls the maximum number of parameters that\nare allowed in the URL-encoded data. If a request contains more parameters\nthan this value, a 413 will be returned to the client. Defaults to `1000`.\n\n##### type\n\nThe `type` option is used to determine what media type the middleware will\nparse. This option can be a string, array of strings, or a function. If not\na function, `type` option is passed directly to the\n[type-is](https://www.npmjs.org/package/type-is#readme) library and this can\nbe an extension name (like `urlencoded`), a mime type (like\n`application/x-www-form-urlencoded`), or a mime type with a wildcard (like\n`*/x-www-form-urlencoded`). If a function, the `type` option is called as\n`fn(req)` and the request is parsed if it returns a truthy value. Defaults\nto `application/x-www-form-urlencoded`.\n\n##### verify\n\nThe `verify` option, if supplied, is called as `verify(req, res, buf, encoding)`,\nwhere `buf` is a `Buffer` of the raw request body and `encoding` is the\nencoding of the request. The parsing can be aborted by throwing an error.\n\n##### defaultCharset\n\nThe default charset to parse as, if not specified in content-type. Must be\neither `utf-8` or `iso-8859-1`. Defaults to `utf-8`.\n\n##### charsetSentinel\n\nWhether to let the value of the `utf8` parameter take precedence as the charset\nselector. It requires the form to contain a parameter named `utf8` with a value\nof `✓`. Defaults to `false`.\n\n##### interpretNumericEntities\n\nWhether to decode numeric entities such as `&#9786;` when parsing an iso-8859-1\nform. Defaults to `false`.\n\n\n#### depth\n\nThe `depth` option is used to configure the maximum depth of the `qs` library when `extended` is `true`. This allows you to limit the amount of keys that are parsed and can be useful to prevent certain types of abuse. Defaults to `32`. It is recommended to keep this value as low as possible.\n\n## Errors\n\nThe middlewares provided by this module create errors using the\n[`http-errors` module](https://www.npmjs.com/package/http-errors). The errors\nwill typically have a `status`/`statusCode` property that contains the suggested\nHTTP response code, an `expose` property to determine if the `message` property\nshould be displayed to the client, a `type` property to determine the type of\nerror without matching against the `message`, and a `body` property containing\nthe read body, if available.\n\nThe following are the common errors created, though any error can come through\nfor various reasons.\n\n### content encoding unsupported\n\nThis error will occur when the request had a `Content-Encoding` header that\ncontained an encoding but the \"inflation\" option was set to `false`. The\n`status` property is set to `415`, the `type` property is set to\n`'encoding.unsupported'`, and the `charset` property will be set to the\nencoding that is unsupported.\n\n### entity parse failed\n\nThis error will occur when the request contained an entity that could not be\nparsed by the middleware. The `status` property is set to `400`, the `type`\nproperty is set to `'entity.parse.failed'`, and the `body` property is set to\nthe entity value that failed parsing.\n\n### entity verify failed\n\nThis error will occur when the request contained an entity that could not be\nfailed verification by the defined `verify` option. The `status` property is\nset to `403`, the `type` property is set to `'entity.verify.failed'`, and the\n`body` property is set to the entity value that failed verification.\n\n### request aborted\n\nThis error will occur when the request is aborted by the client before reading\nthe body has finished. The `received` property will be set to the number of\nbytes received before the request was aborted and the `expected` property is\nset to the number of expected bytes. The `status` property is set to `400`\nand `type` property is set to `'request.aborted'`.\n\n### request entity too large\n\nThis error will occur when the request body's size is larger than the \"limit\"\noption. The `limit` property will be set to the byte limit and the `length`\nproperty will be set to the request body's length. The `status` property is\nset to `413` and the `type` property is set to `'entity.too.large'`.\n\n### request size did not match content length\n\nThis error will occur when the request's length did not match the length from\nthe `Content-Length` header. This typically occurs when the request is malformed,\ntypically when the `Content-Length` header was calculated based on characters\ninstead of bytes. The `status` property is set to `400` and the `type` property\nis set to `'request.size.invalid'`.\n\n### stream encoding should not be set\n\nThis error will occur when something called the `req.setEncoding` method prior\nto this middleware. This module operates directly on bytes only and you cannot\ncall `req.setEncoding` when using this module. The `status` property is set to\n`500` and the `type` property is set to `'stream.encoding.set'`.\n\n### stream is not readable\n\nThis error will occur when the request is no longer readable when this middleware\nattempts to read it. This typically means something other than a middleware from\nthis module read the request body already and the middleware was also configured to\nread the same request. The `status` property is set to `500` and the `type`\nproperty is set to `'stream.not.readable'`.\n\n### too many parameters\n\nThis error will occur when the content of the request exceeds the configured\n`parameterLimit` for the `urlencoded` parser. The `status` property is set to\n`413` and the `type` property is set to `'parameters.too.many'`.\n\n### unsupported charset \"BOGUS\"\n\nThis error will occur when the request had a charset parameter in the\n`Content-Type` header, but the `iconv-lite` module does not support it OR the\nparser does not support it. The charset is contained in the message as well\nas in the `charset` property. The `status` property is set to `415`, the\n`type` property is set to `'charset.unsupported'`, and the `charset` property\nis set to the charset that is unsupported.\n\n### unsupported content encoding \"bogus\"\n\nThis error will occur when the request had a `Content-Encoding` header that\ncontained an unsupported encoding. The encoding is contained in the message\nas well as in the `encoding` property. The `status` property is set to `415`,\nthe `type` property is set to `'encoding.unsupported'`, and the `encoding`\nproperty is set to the encoding that is unsupported.\n\n### The input exceeded the depth\n\nThis error occurs when using `bodyParser.urlencoded` with the `extended` property set to `true` and the input exceeds the configured `depth` option. The `status` property is set to `400`. It is recommended to review the `depth` option and evaluate if it requires a higher value. When the `depth` option is set to `32` (default value), the error will not be thrown.\n\n## Examples\n\n### Express/Connect top-level generic\n\nThis example demonstrates adding a generic JSON and URL-encoded parser as a\ntop-level middleware, which will parse the bodies of all incoming requests.\nThis is the simplest setup.\n\n```js\nvar express = require('express')\nvar bodyParser = require('body-parser')\n\nvar app = express()\n\n// parse application/x-www-form-urlencoded\napp.use(bodyParser.urlencoded())\n\n// parse application/json\napp.use(bodyParser.json())\n\napp.use(function (req, res) {\n  res.setHeader('Content-Type', 'text/plain')\n  res.write('you posted:\\n')\n  res.end(String(JSON.stringify(req.body, null, 2)))\n})\n```\n\n### Express route-specific\n\nThis example demonstrates adding body parsers specifically to the routes that\nneed them. In general, this is the most recommended way to use body-parser with\nExpress.\n\n```js\nvar express = require('express')\nvar bodyParser = require('body-parser')\n\nvar app = express()\n\n// create application/json parser\nvar jsonParser = bodyParser.json()\n\n// create application/x-www-form-urlencoded parser\nvar urlencodedParser = bodyParser.urlencoded()\n\n// POST /login gets urlencoded bodies\napp.post('/login', urlencodedParser, function (req, res) {\n  if (!req.body || !req.body.username) res.sendStatus(400)\n  res.send('welcome, ' + req.body.username)\n})\n\n// POST /api/users gets JSON bodies\napp.post('/api/users', jsonParser, function (req, res) {\n  if (!req.body) res.sendStatus(400)\n  // create user in req.body\n})\n```\n\n### Change accepted type for parsers\n\nAll the parsers accept a `type` option which allows you to change the\n`Content-Type` that the middleware will parse.\n\n```js\nvar express = require('express')\nvar bodyParser = require('body-parser')\n\nvar app = express()\n\n// parse various different custom JSON types as JSON\napp.use(bodyParser.json({ type: 'application/*+json' }))\n\n// parse some custom thing into a Buffer\napp.use(bodyParser.raw({ type: 'application/vnd.custom-type' }))\n\n// parse an HTML body into a string\napp.use(bodyParser.text({ type: 'text/html' }))\n```\n\n## License\n\n[MIT](LICENSE)\n\n[ci-image]: https://badgen.net/github/checks/expressjs/body-parser/master?label=ci\n[ci-url]: https://github.com/expressjs/body-parser/actions/workflows/ci.yml\n[coveralls-image]: https://badgen.net/coveralls/c/github/expressjs/body-parser/master\n[coveralls-url]: https://coveralls.io/r/expressjs/body-parser?branch=master\n[node-version-image]: https://badgen.net/npm/node/body-parser\n[node-version-url]: https://nodejs.org/en/download\n[npm-downloads-image]: https://badgen.net/npm/dm/body-parser\n[npm-url]: https://npmjs.org/package/body-parser\n[npm-version-image]: https://badgen.net/npm/v/body-parser\n[ossf-scorecard-badge]: https://api.scorecard.dev/projects/github.com/expressjs/body-parser/badge\n[ossf-scorecard-visualizer]: https://ossf.github.io/scorecard-visualizer/#/projects/github.com/expressjs/body-parser"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 1.1650390625,
          "content": "# Security Policies and Procedures\n\n## Reporting a Bug\n\nThe Express team and community take all security bugs seriously. Thank you\nfor improving the security of Express. We appreciate your efforts and\nresponsible disclosure and will make every effort to acknowledge your\ncontributions.\n\nReport security bugs by emailing the current owner(s) of `body-parser`. This\ninformation can be found in the npm registry using the command\n`npm owner ls body-parser`.\nIf unsure or unable to get the information from the above, open an issue\nin the [project issue tracker](https://github.com/expressjs/body-parser/issues)\nasking for the current contact information.\n\nTo ensure the timely response to your report, please ensure that the entirety\nof the report is contained within the email body and not solely behind a web\nlink or an attachment.\n\nAt least one owner will acknowledge your email within 48 hours, and will send a\nmore detailed response within 48 hours indicating the next steps in handling\nyour report. After the initial reply to your report, the owners will\nendeavor to keep you informed of the progress towards a fix and full\nannouncement, and may ask for additional information or guidance.\n"
        },
        {
          "name": "index.js",
          "type": "blob",
          "size": 1.2841796875,
          "content": "/*!\n * body-parser\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * @typedef Parsers\n * @type {function}\n * @property {function} json\n * @property {function} raw\n * @property {function} text\n * @property {function} urlencoded\n */\n\n/**\n * Module exports.\n * @type {Parsers}\n */\n\nexports = module.exports = bodyParser\n\n/**\n * JSON parser.\n * @public\n */\n\nObject.defineProperty(exports, 'json', {\n  configurable: true,\n  enumerable: true,\n  get: () => require('./lib/types/json')\n})\n\n/**\n * Raw parser.\n * @public\n */\n\nObject.defineProperty(exports, 'raw', {\n  configurable: true,\n  enumerable: true,\n  get: () => require('./lib/types/raw')\n})\n\n/**\n * Text parser.\n * @public\n */\n\nObject.defineProperty(exports, 'text', {\n  configurable: true,\n  enumerable: true,\n  get: () => require('./lib/types/text')\n})\n\n/**\n * URL-encoded parser.\n * @public\n */\n\nObject.defineProperty(exports, 'urlencoded', {\n  configurable: true,\n  enumerable: true,\n  get: () => require('./lib/types/urlencoded')\n})\n\n/**\n * Create a middleware to parse json and urlencoded bodies.\n *\n * @param {object} [options]\n * @return {function}\n * @deprecated\n * @public\n */\n\nfunction bodyParser () {\n  throw new Error('The bodyParser() generic has been split into individual middleware to use instead.')\n}\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.3056640625,
          "content": "{\n  \"name\": \"body-parser\",\n  \"description\": \"Node.js body parsing middleware\",\n  \"version\": \"2.0.2\",\n  \"contributors\": [\n    \"Douglas Christopher Wilson <doug@somethingdoug.com>\",\n    \"Jonathan Ong <me@jongleberry.com> (http://jongleberry.com)\"\n  ],\n  \"license\": \"MIT\",\n  \"repository\": \"expressjs/body-parser\",\n  \"dependencies\": {\n    \"bytes\": \"3.1.2\",\n    \"content-type\": \"~1.0.5\",\n    \"debug\": \"3.1.0\",\n    \"destroy\": \"1.2.0\",\n    \"http-errors\": \"2.0.0\",\n    \"iconv-lite\": \"0.5.2\",\n    \"on-finished\": \"2.4.1\",\n    \"qs\": \"6.13.0\",\n    \"raw-body\": \"^3.0.0\",\n    \"type-is\": \"~1.6.18\"\n  },\n  \"devDependencies\": {\n    \"eslint\": \"8.34.0\",\n    \"eslint-config-standard\": \"14.1.1\",\n    \"eslint-plugin-import\": \"2.27.5\",\n    \"eslint-plugin-markdown\": \"3.0.0\",\n    \"eslint-plugin-node\": \"11.1.0\",\n    \"eslint-plugin-promise\": \"6.1.1\",\n    \"eslint-plugin-standard\": \"4.1.0\",\n    \"mocha\": \"10.2.0\",\n    \"nyc\": \"15.1.0\",\n    \"supertest\": \"6.3.3\"\n  },\n  \"files\": [\n    \"lib/\",\n    \"LICENSE\",\n    \"HISTORY.md\",\n    \"SECURITY.md\",\n    \"index.js\"\n  ],\n  \"engines\": {\n    \"node\": \">=18\"\n  },\n  \"scripts\": {\n    \"lint\": \"eslint .\",\n    \"test\": \"mocha --require test/support/env --reporter spec --check-leaks --bail test/\",\n    \"test-ci\": \"nyc --reporter=lcov --reporter=text npm test\",\n    \"test-cov\": \"nyc --reporter=html --reporter=text npm test\"\n  }\n}\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}