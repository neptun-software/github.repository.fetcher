{
  "metadata": {
    "timestamp": 1736562936840,
    "page": 536,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "googlearchive/code-prettify",
      "stars": 5791,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.236328125,
          "content": "# temporary files\n*~\n*.swp\n.DS_Store\n\n# package managers\n/node_modules/\n/bower_components/\nnpm-debug.log\n.bower.json\n\n# generated files\n#/src/prettify.js\n#/src/run_prettify.js\n#/loader/*.js\n#/loader/*.css\n#/loader/skins/*.css\n#/distrib/*.zip\n"
        },
        {
          "name": "CHANGES.md",
          "type": "blob",
          "size": 5.8935546875,
          "content": "# Known Issues\n\n * Perl formatting is really crappy. Partly because the author is lazy and partly\n   because Perl is [hard](http://www.perlmonks.org/?node_id=663393) to parse.\n * On some browsers, `<code>` elements with newlines in the text which use CSS\n   to specify `white-space:pre` will have the newlines improperly stripped if\n   the element is not attached to the document at the time the stripping is done.\n   Also, on IE6, all newlines will be stripped from `<code>` elements because\n   of the way IE6 produces `innerHTML`. Workaround: use `<pre>` for code with\n   newlines.\n\n# Change Log\n\n## 29 March 2007\n\n * Added [tests](https://raw.githack.com/google/code-prettify/master/tests/prettify_test.html#php)\n   for PHP support to address issue [#3](https://github.com/google/code-prettify/issues/3).\n * Fixed bug [#6](https://github.com/google/code-prettify/issues/6): `prettyPrintOne`\n   was not halting. This was not reachable through the normal entry point.\n * Fixed bug [#4](https://github.com/google/code-prettify/issues/4): recursing into a\n   script block or PHP tag that was not properly closed would not silently drop the content.\n   ([test](https://raw.githack.com/google/code-prettify/master/tests/prettify_test.html#js_script))\n * Fixed bug [#8](https://github.com/google/code-prettify/issues/8): was eating tabs\n   ([test](https://raw.githack.com/google/code-prettify/master/tests/prettify_test.html#issue8))\n * Fixed entity handling so that the caveat\n\n   > Caveats: please properly escape less-thans. `x&lt;y` instead of `x<y`,\n   > and use `\"` instead of `&quot;` for string delimiters.\n\n   is no longer applicable.\n * Added *noisefree*'s C# patch [#7](https://github.com/google/code-prettify/issues/7)\n * Added a [distribution](http://google-code-prettify.googlecode.com/files/prettify-small.zip)\n   that has comments and whitespace removed to reduce download size from 45.5kB\n   to 12.8kB.\n\n## 4 Jul 2008\n\n * Added [#17](https://github.com/google/code-prettify/issues/17) language specific\n   formatters that are triggered by the presence of a `lang-<language-file-extension>`\n * Fixed bug [#29](https://github.com/google/code-prettify/issues/29): python\n   handling of `'''string'''`\n * Fixed bug: `/` in regex `[charsets] should not end regex`\n\n## 5 Jul 2008\n\n * Defined language extensions for Lisp and Lua\n\n## 14 Jul 2008\n\n * Language handlers for F#, OCAML, SQL\n * Support for `nocode` spans to allow embedding of line numbers and code\n   annotations which should not be styled or otherwise affect the tokenization\n   of prettified code. See the issue [#22](https://github.com/google/code-prettify/issues/22)\n   [testcase](https://raw.githack.com/google/code-prettify/master/tests/prettify_test.html#issue22).\n\n## 6 Jan 2009\n\n * Language handlers for Visual Basic, Haskell, CSS, and WikiText\n * Added `.mxml` extension to the markup style handler for\n   Flex [MXML files](http://en.wikipedia.org/wiki/MXML).\n   See issue [#37](https://github.com/google/code-prettify/issues/37).\n * Added `.m` extension to the C style handler so that Objective C source files\n   properly highlight. See issue [#58](https://github.com/google/code-prettify/issues/58).\n * Changed HTML lexer to use the same embedded source mechanism as the wiki\n   language handler, and changed to use the registered CSS handler for STYLE\n   element content.\n\n## 21 May 2009\n\n * Rewrote to improve performance on large files.\n   See [benchmarks](http://mikesamuel.blogspot.com/2009/05/efficient-parsing-in-javascript.html).\n * Fixed bugs with highlighting of Haskell line comments, Lisp number literals,\n   Lua strings, C preprocessor directives, newlines in Wiki code on Windows, and\n   newlines in IE6.\n\n## 14 August 2009\n\n * Fixed prettifying of `<code>` blocks with embedded newlines.\n\n## 3 October 2009\n\n * Fixed prettifying of XML/HTML tags that contain uppercase letters.\n\n## 19 July 2010\n\n * Added support for line numbers. Bug [#22](https://github.com/google/code-prettify/issues/22)\n * Added YAML support. Bug [#123](https://github.com/google/code-prettify/issues/123)\n * Added VHDL support courtesy *Le Poussin*.\n * IE performance improvements. Bug [#102](https://github.com/google/code-prettify/issues/102)\n   courtesy *jacobly*.\n * A variety of markup formatting fixes courtesy *smain* and *thezbyg*.\n * Fixed copy and paste in IE 6, 7, 8.\n * Changed output to use `&#160;` instead of `&nbsp;` so that the output works\n   when embedded in XML. Bug [#108](https://github.com/google/code-prettify/issues/108).\n\n## 7 September 2010\n\n * Added support for coffeescript courtesy *Cezary Bartoszuk*.\n\n## 4 March 2011\n\n * Added a [themes gallery](https://raw.githack.com/google/code-prettify/master/styles/index.html)\n   to showcase contributed styles.\n * Added support for XQuery courtesy *Patrick Wied*, Nemerle courtesy *Zimin A.V.*,\n   and Latex support courtesy *Martin S*.\n\n## 29 March 2011\n\n * Fixed IE newline issues, and copying/pasting of prettified source code from IE.\n   This required significant internal changes but involves no API changes.\n   **Caveat**: `prettyPrintOne` injects the HTML passed to it into a `<pre>` element.\n   If the HTML comes from a trusted source, this may allow XSS. Do not do this.\n   This should not be a problem for existing apps since the standard usage is to\n   rewrite the HTML and then inject it, so anyone doing that with untrusted HTML\n   already has an XSS vulnerability. If you sanitize and prettify HTML from an\n   untrusted source, sanitize first.\n\n## 4 February 2013\n\n * Language handlers for Dart, Erlang, Mumps, TCL, R, S., and others\n * Bug fix: VB REM style comments.\n * Bug fix: CSS color literals / ID selector confusion.\n * Bug fix: IE8 line breaks.\n\n## 24 February 2013\n\n * Added a one script autoload&run mechanism and a way to embed hints in\n   processing instructions/comments. See\n   [example](https://raw.githack.com/google/code-prettify/master/examples/quine.html).\n\n## 4 March 2013\n\n * Matlab language handler courtesy *AmroÂ³*\n\n## 28 Apr 2015\n\n * Migrated to Github\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 10.5107421875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   Copyright 2011 Mike Samuel et al\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "Gruntfile.js",
          "type": "blob",
          "size": 6.9794921875,
          "content": "/**\n * google-code-prettify\n * https://github.com/google/code-prettify\n *\n * Copyright (C) 2017 Google Inc.\n * Licensed under Apache 2.0 license.\n */\n\nmodule.exports = function (grunt) {\n  'use strict';\n\n  // project configuration\n  grunt.initConfig({\n    // metadata\n    pkg: grunt.file.readJSON('package.json'),\n\n    // grunt-preprocess\n    preprocess: {\n      // https://github.com/jsoverson/preprocess#optionstype\n      options: {\n        // renders @include directives (similar to SSI server-side includes)\n        // where JS files are resolved relative to this directory\n        srcDir: 'js-modules',\n        type: 'js'\n      },\n      prettify: {\n        src: 'js-modules/prettify.js',\n        dest: 'src/prettify.js'\n      },\n      runprettify: {\n        options: {\n          context: {\n            // to control where defs.js is included (top level)\n            RUN_PRETTIFY: true\n          }\n        },\n        src: 'js-modules/run_prettify.js',\n        dest: 'src/run_prettify.js'\n      },\n      nodeprettify: {\n        options: {\n          context: {\n            RUN_PRETTIFY: true\n          }\n        },\n        src: 'js-modules/node_prettify.js',\n        dest: 'src/node_prettify.js'\n      }\n    },\n\n    // grunt-contrib-copy\n    copy: {\n      prettify: {\n        options: {\n          process: function (content) {\n            // trim trailing whitespaces in blank lines added by preprocess\n            return content.replace(/[ \\f\\t\\v]+$/gm, '');\n          }\n        },\n        files: [\n          {src: 'src/prettify.js', dest: 'src/prettify.js'},\n          {src: 'src/run_prettify.js', dest: 'src/run_prettify.js'},\n          {src: 'src/node_prettify.js', dest: 'src/node_prettify.js'}\n        ]\n      },\n      langs: {\n        options: {\n          process: function (content) {\n            // replace PR.PR_* token names with inlined strings\n            return content\n              .replace(/\\bPR\\.PR_ATTRIB_NAME\\b/g,  '\"atn\"')\n              .replace(/\\bPR\\.PR_ATTRIB_VALUE\\b/g, '\"atv\"')\n              .replace(/\\bPR\\.PR_COMMENT\\b/g,      '\"com\"')\n              .replace(/\\bPR\\.PR_DECLARATION\\b/g,  '\"dec\"')\n              .replace(/\\bPR\\.PR_KEYWORD\\b/g,      '\"kwd\"')\n              .replace(/\\bPR\\.PR_LITERAL\\b/g,      '\"lit\"')\n              .replace(/\\bPR\\.PR_NOCODE\\b/g,       '\"nocode\"')\n              .replace(/\\bPR\\.PR_PLAIN\\b/g,        '\"pln\"')\n              .replace(/\\bPR\\.PR_PUNCTUATION\\b/g,  '\"pun\"')\n              .replace(/\\bPR\\.PR_SOURCE\\b/g,       '\"src\"')\n              .replace(/\\bPR\\.PR_STRING\\b/g,       '\"str\"')\n              .replace(/\\bPR\\.PR_TAG\\b/g,          '\"tag\"')\n              .replace(/\\bPR\\.PR_TYPE\\b/g,         '\"typ\"');\n          }\n        },\n        files: [{\n          expand: true,\n          cwd: 'loader/',\n          src: ['lang-*.js'],\n          dest: 'loader/'\n        }]\n      }\n    },\n\n    // ./tasks/aliases.js\n    aliases: {\n      langs: {\n        src: 'loader/lang-*.js',\n        filter: function (src) {\n          // skip files that are themselves aliases created in previous runs\n          return grunt.file.exists(src.replace(/^loader/, 'src'));\n        }\n      }\n    },\n\n    // grunt-contrib-uglify\n    uglify: {\n      // https://github.com/mishoo/UglifyJS2#usage\n      options: {\n        report: 'gzip',\n        ASCIIOnly: true,\n        maxLineLen: 500,\n        screwIE8: false\n      },\n      prettify: {\n        options: {\n          compress: {\n            global_defs: {'IN_GLOBAL_SCOPE': true}\n          },\n          wrap: true\n        },\n        src: 'src/prettify.js',\n        dest: 'loader/prettify.js'\n      },\n      runprettify: {\n        options: {\n          compress: {\n            global_defs: {'IN_GLOBAL_SCOPE': false}\n          },\n          wrap: true\n        },\n        src: 'src/run_prettify.js',\n        dest: 'loader/run_prettify.js'\n      },\n      langs: {\n        files: [{\n          expand: true,\n          cwd: 'src/',\n          src: ['lang-*.js'],\n          dest: 'loader/',\n          ext: '.js'\n        }]\n      }\n    },\n\n    // google-closure-compiler\n    'closure-compiler': {\n      // https://github.com/google/closure-compiler/wiki\n      options: {\n        // Don't specify --charset=UTF-8.  If we do, then non-ascii\n        // codepoints that do not correspond to line terminators are\n        // converted to UTF-8 sequences instead of being emitted as\n        // ASCII. This makes the resulting JavaScript less portable.\n        warning_level: 'VERBOSE',\n        language_in: 'ECMASCRIPT5',\n        compilation_level: 'ADVANCED',\n        charset: 'US-ASCII'\n      },\n      prettify: {\n        options: {\n          externs: 'tools/closure-compiler/amd-externs.js',\n          define: 'IN_GLOBAL_SCOPE=true',\n          output_wrapper: '!function(){%output%}()'\n        },\n        src: '<%= uglify.prettify.src %>',\n        dest: '<%= uglify.prettify.dest %>'\n      },\n      runprettify: {\n        options: {\n          externs: 'tools/closure-compiler/amd-externs.js',\n          define: 'IN_GLOBAL_SCOPE=false',\n          output_wrapper: '!function(){%output%}()'\n        },\n        src: '<%= uglify.runprettify.src %>',\n        dest: '<%= uglify.runprettify.dest %>'\n      },\n      langs: {\n        options: {\n          externs: 'js-modules/externs.js'\n        },\n        files: '<%= uglify.langs.files %>'\n      }\n    },\n\n    // ./tasks/gcc.js\n    gcc: {\n      // same as 'closure-compiler:langs'\n      langs: {\n        options: {\n          externs: 'js-modules/externs.js'\n        },\n        files: '<%= uglify.langs.files %>'\n      }\n    },\n\n    // grunt-contrib-cssmin\n    cssmin: {\n      // https://github.com/jakubpawlowicz/clean-css#how-to-use-clean-css-api\n      options: {\n        report: 'gzip'\n      },\n      prettify: {\n        src: 'src/prettify.css',\n        dest: 'loader/prettify.css'\n      },\n      skins: {\n        files: [{\n          expand: true,\n          cwd: 'styles/',\n          src: ['*.css'],\n          dest: 'loader/skins/',\n          ext: '.css'\n        }]\n      }\n    },\n\n    // grunt-contrib-compress\n    compress: {\n      zip: {\n        options: {\n          archive: 'distrib/prettify-small.zip',\n          mode: 'zip',\n          level: 9\n        },\n        files: [{\n          expand: true,\n          cwd: 'loader/',\n          src: ['*.js', '*.css', 'skins/*.css'],\n          dest: 'google-code-prettify/'\n        }]\n      }\n    },\n\n    // grunt-contrib-clean\n    clean: {\n      js: ['src/prettify.js', 'src/run_prettify.js', 'loader/*.js'],\n      css: ['loader/*.css', 'loader/skins/*.css'],\n      zip: ['distrib/*.zip']\n    }\n  });\n\n  // load plugins that provide tasks\n  require('google-closure-compiler').grunt(grunt);\n  grunt.loadTasks('./tasks');\n  grunt.loadNpmTasks('grunt-preprocess');\n  grunt.loadNpmTasks('grunt-contrib-copy');\n  grunt.loadNpmTasks('grunt-contrib-uglify');\n  grunt.loadNpmTasks('grunt-contrib-cssmin');\n  grunt.loadNpmTasks('grunt-contrib-compress');\n  grunt.loadNpmTasks('grunt-contrib-clean');\n\n  // register task aliases\n  grunt.registerTask('default', [\n    //'clean',\n    'preprocess',\n    'copy:prettify',\n    'gcc',\n    'copy:langs',\n    'aliases',\n    'cssmin',\n    'compress'\n  ]);\n};\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.3662109375,
          "content": "# Status: Archived\n\n![status: inactive](https://img.shields.io/badge/status-inactive-red.svg)\n\nThis repository has been archived and is no longer maintained.\n\n---\n\n# JavaScript code prettifier\n\nAnnouncement: [**Action required** *rawgit.com* is going away](https://groups.google.com/forum/#!topic/js-code-prettifier/IFHev_kLm30).\n\nAn embeddable script that makes source-code snippets in HTML prettier.\n\n* Works on HTML pages.\n* Works even if code contains embedded links, line numbers, etc.\n* Simple API: include some JS & CSS and add an onload handler.\n* Lightweights: small download and does not block page from loading while\n  running.\n* Customizable styles via CSS. See the [themes gallery][1].\n* Supports all C-like, Bash-like, and XML-like languages. No need to specify\n  the language.\n* Extensible language handlers for other languages. You can specify the\n  language.\n* Widely used with good cross-browser support. Powers https://code.google.com/\n  and http://stackoverflow.com/\n\n[See an example][2].\n\n## Setup\n\n * Include the script tag below in your document:\n```HTML\n<script src=\"https://cdn.jsdelivr.net/gh/google/code-prettify@master/loader/run_prettify.js\"></script>\n```\n * See [Getting Started](docs/getting_started.md) to configure that URL with\n   options you need.\n * Look at the [skin gallery][1] and pick styles that suit you.\n\n## Usage\n\nPut code snippets in `<pre class=\"prettyprint\">...</pre>` or\n`<code class=\"prettyprint\">...</code>` and it will automatically be\npretty-printed.\n\n```HTML\n<pre class=\"prettyprint\">class Voila {\npublic:\n  // Voila\n  static const string VOILA = \"Voila\";\n\n  // will not interfere with embedded <a href=\"#voila2\">tags</a>.\n}</pre>\n```\n\n## FAQ\n\n### For which languages does it work?\n\nThe comments in `prettify.js` are authoritative but the lexer should work on a\nnumber of languages including C and friends, Java, Python, Bash, SQL, HTML,\nXML, CSS, JavaScript, Makefile, and Rust.\n\nIt works passably on Ruby, PHP, VB, and Awk and a decent subset of Perl and\nRuby, but because of commenting conventions, doesn't work on Smalltalk, OCaml,\netc. without a language extension.\n\nOther languages are supported via extensions:\n\n[Apollo](src/lang-apollo.js);\n[Basic](src/lang-basic.js);\n[Clojure](src/lang-clj.js);\n[CSS](src/lang-css.js);\n[Dart](src/lang-dart.js);\n[Erlang](src/lang-erlang.js);\n[Go](src/lang-go.js);\n[Haskell](src/lang-hs.js);\n[Lasso](src/lang-lasso.js);\n[Lisp, Scheme](src/lang-lisp.js);\n[LLVM](src/lang-llvm.js);\n[Logtalk](src/lang-logtalk.js);\n[Lua](src/lang-lua.js);\n[MATLAB](src/lang-matlab.js);\n[MLs: F#, Ocaml,SML](src/lang-ml.js);\n[Mumps](src/lang-mumps.js);\n[Nemerle](src/lang-n.js);\n[Pascal](src/lang-pascal.js);\n[Protocol buffers](src/lang-proto.js);\n[R, S](src/lang-r.js);\n[RD](src/lang-rd.js);\n[Rust](src/lang-rust.js);\n[Scala](src/lang-scala.js);\n[SQL](src/lang-sql.js);\n[Swift](src/lang-swift.js);\n[TCL](src/lang-tcl.js);\n[LaTeX](src/lang-tex.js);\n[Visual Basic](src/lang-vb.js);\n[VHDL](src/lang-vhdl.js);\n[Wiki](src/lang-wiki.js);\n[XQ](src/lang-xq.js);\n[YAML](src/lang-yaml.js)\n\nIf you'd like to add an extension for your favorite language, please look at\n`src/lang-lisp.js` and submit a pull request.\n\n### How do I specify the language of my code?\n\nYou don't need to specify the language since `PR.prettyPrint()` will guess.\nYou can specify a language by specifying the language extension along with the\n`prettyprint` class:\n\n```HTML\n<pre class=\"prettyprint lang-html\">\n  The lang-* class specifies the language file extensions.\n  File extensions supported by default include:\n    \"bsh\", \"c\", \"cc\", \"cpp\", \"cs\", \"csh\", \"cyc\", \"cv\", \"htm\", \"html\", \"java\",\n    \"js\", \"m\", \"mxml\", \"perl\", \"pl\", \"pm\", \"py\", \"rb\", \"sh\", \"xhtml\", \"xml\",\n    \"xsl\".\n</pre>\n```\n\nYou may also use the [HTML 5][3] convention of embedding a `<code>` element\ninside the `<pre>` and using `language-java` style classes:\n\n```HTML\n<pre class=\"prettyprint\"><code class=\"language-java\">...</code></pre>\n```\n\n### It doesn't work on \"obfuscated code sample\"?\n\nYes. Prettifying obfuscated code is like putting lipstick on a pig &mdash;\ni.e. outside the scope of this tool.\n\n### Which browsers does it work with?\n\nIt's been tested with IE 6, Firefox 1.5 & 2, and Safari 2.0.4. Look at\n[the tests][4] to see if it works in your browser.\n\n### What's changed?\n\nSee the [changelog](CHANGES.md).\n\n### Why doesn't Prettyprinting of strings work on WordPress?\n\nApparently wordpress does \"smart quoting\" which changes close quotes.  This\ncauses end quotes to not match up with open quotes.\n\nThis breaks prettifying as well as copying and pasting of code samples.  See\n[WordPress's help center][5] for info on how to stop smart quoting of code\nsnippets.\n\n### How do I put line numbers in my code?\n\nYou can use the `linenums` class to turn on line numbering.  If your code\ndoesn't start at line number `1`, you can add a colon and a line number to the\nend of that class as in `linenums:52`. For example:\n\n```HTML\n<pre class=\"prettyprint linenums:4\"\n>// This is line 4.\nfoo();\nbar();\nbaz();\nboo();\nfar();\nfaz();\n</pre>\n```\n\n### How do I prevent a portion of markup from being marked as code?\n\nYou can use the `nocode` class to identify a span of markup that is not code:\n\n```HTML\n<pre class=\"prettyprint\">\nint x = foo();  /* This is a comment  <span class=\"nocode\">This is not code</span>\n  Continuation of comment */\nint y = bar();\n</pre>\n```\n\nFor a more complete example see the [issue #22 testcase][6].\n\n### I get an error message \"a is not a function\" or \"opt_whenDone is not a function\"\n\nIf you are calling `prettyPrint` via an event handler, wrap it in a function.\nInstead of doing:\n\n```JavaScript\naddEventListener('load', PR.prettyPrint, false);\n```\n\nwrap it in a closure like:\n\n```JavaScript\naddEventListener('load', function(event) { PR.prettyPrint(); }, false);\n```\n\nso that the browser does not pass an event object to `PR.prettyPrint`\nwhich will confuse it.\n\n### How can I customize the colors and styles of my code?\n\nPrettify adds `<span>` with `class`es describing the kind of code.  You can\ncreate CSS styles to matches these classes.\n\nSee the [theme gallery][1] for examples.\n\n### I can't add classes to my code (because it comes from Markdown, etc.)\n\nInstead of `<pre class=\"prettyprint ...\">` you can use a comment or processing\ninstructions that survives processing instructions: `<?prettify ...?>` works\nas explained in [Getting Started](docs/getting_started.md).\n\n### How can I put line numbers on every line instead of just every fifth line?\n\nPrettify puts lines into an HTML list element so that line numbers aren't\ncaught by copy/paste, and the line numbering is controlled by CSS in the\ndefault stylesheet, `prettify.css`.\n\nThe following should turn line numbering back on for the other lines:\n\n```HTML\n<style>\nli.L0, li.L1, li.L2, li.L3,\nli.L5, li.L6, li.L7, li.L8 {\n  list-style-type: decimal !important;\n}\n</style>\n```\n\n## Discussion\n\nPlease use the official [support group][7] for discussions, suggestions, and\ngeneral feedback.\n\n## License\n\n[Apache License 2.0](COPYING)\n\n\n[1]: https://raw.githack.com/google/code-prettify/master/styles/index.html\n[2]: https://raw.githack.com/google/code-prettify/master/examples/quine.html\n[3]: http://dev.w3.org/html5/spec-author-view/the-code-element.html#the-code-element\n[4]: https://raw.githack.com/google/code-prettify/master/tests/prettify_test.html\n[5]: http://wordpress.org/support/topic/125038\n[6]: https://raw.githack.com/google/code-prettify/master/tests/prettify_test.html#issue22\n[7]: http://groups.google.com/group/js-code-prettifier\n"
        },
        {
          "name": "bower.json",
          "type": "blob",
          "size": 0.66015625,
          "content": "{\n  \"name\": \"code-prettify\",\n  \"description\": \"Google Code Prettify\",\n  \"authors\": [\n    \"Google\"\n  ],\n  \"license\": \"Apache-2.0\",\n  \"homepage\": \"https://github.com/google/code-prettify\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/google/code-prettify.git\"\n  },\n  \"keywords\": [\n    \"syntax\",\n    \"highlight\",\n    \"highlighting\",\n    \"source\",\n    \"code\",\n    \"prettify\",\n    \"google\"\n  ],\n  \"main\": [\n    \"src/prettify.js\",\n    \"src/prettify.css\"\n  ],\n  \"moduleType\": [\n    \"globals\",\n    \"amd\"\n  ],\n  \"ignore\": [\n    \"**/.*\",\n    \"node_modules\",\n    \"bower_components\",\n    \"distrib\",\n    \"js-modules\",\n    \"tasks\",\n    \"tests\",\n    \"tools\"\n  ]\n}\n"
        },
        {
          "name": "distrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "js-modules",
          "type": "tree",
          "content": null
        },
        {
          "name": "loader",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.296875,
          "content": "{\n  \"name\": \"code-prettify\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Google Code Prettify\",\n  \"license\": \"Apache-2.0\",\n  \"homepage\": \"https://github.com/google/code-prettify\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/google/code-prettify.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/google/code-prettify/issues\"\n  },\n  \"keywords\": [\n    \"syntax\",\n    \"highlight\",\n    \"highlighting\",\n    \"source\",\n    \"code\",\n    \"prettify\",\n    \"google\"\n  ],\n  \"author\": \"Google\",\n  \"maintainers\": [\n    \"Mike Samuel <mikesamuel@gmail.com>\"\n  ],\n  \"contributors\": [\n    \"Amro <amroamroamro@gmail.com>\"\n  ],\n  \"main\": \"src/node_prettify.js\",\n  \"directories\": {\n    \"lib\": \"src\",\n    \"doc\": \"docs\",\n    \"example\": \"examples\",\n    \"test\": \"tests\"\n  },\n  \"files\": [\n    \"loader/\",\n    \"src/\",\n    \"styles/*.css\",\n    \"COPYING\"\n  ],\n  \"scripts\": {\n    \"grunt\": \"grunt\",\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"devDependencies\": {\n    \"google-closure-compiler\": \"^20161201.0.0\",\n    \"grunt\": \"^1.0.1\",\n    \"grunt-contrib-clean\": \"^1.0.0\",\n    \"grunt-contrib-compress\": \"^1.3.0\",\n    \"grunt-contrib-copy\": \"^1.0.0\",\n    \"grunt-contrib-cssmin\": \"^1.0.2\",\n    \"grunt-contrib-uglify\": \"^2.0.0\",\n    \"grunt-preprocess\": \"^5.1.0\",\n    \"html-to-text\": \"^3.0.0\",\n    \"zombie\": \"^5.0.5\"\n  }\n}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "styles",
          "type": "tree",
          "content": null
        },
        {
          "name": "tasks",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}