{
  "metadata": {
    "timestamp": 1736563047952,
    "page": 679,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "sergeche/emmet-sublime",
      "stars": 5253,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2548828125,
          "content": "*.py[co]\n*.tmLanguage.cache\n\n# Packages\n*.egg\n*.egg-info\ndist\nbuild\neggs\nparts\nbin\nvar\nsdist\ndevelop-eggs\n.installed.cfg\n\n# Installer logs\npip-log.txt\n\n# Unit test / coverage reports\n.coverage\n.tox\n\n#Translations\n*.mo\n\n#Mr Developer\n.mr.developer.cfg\n\n.DS_Store"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.03125,
          "content": "This is a Sublime Text plugin repo so post here only ST-related issues. If you found a bug in how Emmet works (for example, invalid result after expanding abbreviation) or have a proposal for a new features, please post them on core [Emmet repo](https://github.com/emmetio/emmet).\n\n## About keyboard shortcuts\n\nA lot of people complain about Emmet shortcuts overriding some default ST actions or actions from other plugins.\n\nAs described in [README](README.md), it’s nearly impossible to provide shortcuts that will not override anything and will be convenient for everyone. So default Emmet shortcuts are ones that I’m personally happy with. If you don’t like them, please spend 2 minutes for tweaking shortcuts, as [described in README](README.md#overriding-keyboard-shortcuts).\n\nAll issues about shortcuts will be rejected. If you have a better shortcut for Emmet actions, you should create a Pull Request with updated `*.sublime-keymap` and `misc/generate-keymap.py` files. Note that the last one is used to generate all `*.sublime-keymap` files."
        },
        {
          "name": "Default (Linux).sublime-keymap",
          "type": "blob",
          "size": 13.1953125,
          "content": "// This file is automatically generated with misc/generate-keymap.py script\n\n[\n    {\n        \"keys\": [\n            \"shift+ctrl+;\"\n        ], \n        \"args\": {\n            \"action\": \"remove_tag\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.remove_tag\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"ctrl+up\"\n        ], \n        \"args\": {\n            \"action\": \"increment_number_by_1\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.increment_number_by_1\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"ctrl+shift+forward_slash\"\n        ], \n        \"args\": {\n            \"action\": \"toggle_comment\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"operand\": \"source.css, source.less, source.scss, source.postcss, text.xml, text.html - source\", \n                \"operator\": \"equal\", \n                \"match_all\": true, \n                \"key\": \"selector\"\n            }, \n            {\n                \"match_all\": true, \n                \"key\": \"emmet_action_enabled.toggle_comment\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"shift+ctrl+.\"\n        ], \n        \"args\": {\n            \"action\": \"select_next_item\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.select_next_item\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"ctrl+alt+enter\"\n        ], \n        \"command\": \"expand_as_you_type\", \n        \"context\": [\n            {\n                \"operand\": false, \n                \"operator\": \"equal\", \n                \"match_all\": true, \n                \"key\": \"setting.is_widget\"\n            }, \n            {\n                \"match_all\": true, \n                \"key\": \"emmet_action_enabled.expand_as_you_type\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"alt+down\"\n        ], \n        \"args\": {\n            \"action\": \"decrement_number_by_01\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.decrement_number_by_01\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"ctrl+'\"\n        ], \n        \"args\": {\n            \"action\": \"encode_decode_data_url\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.encode_decode_data_url\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"shift+ctrl+y\"\n        ], \n        \"args\": {\n            \"action\": \"evaluate_math_expression\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.evaluate_math_expression\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"ctrl+shift+0\"\n        ], \n        \"args\": {\n            \"action\": \"balance_inward\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.balance_inward\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"ctrl+,\"\n        ], \n        \"args\": {\n            \"action\": \"balance_outward\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.balance_outward\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"shift+alt+up\"\n        ], \n        \"args\": {\n            \"action\": \"increment_number_by_10\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.increment_number_by_10\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"shift+ctrl+r\"\n        ], \n        \"args\": {\n            \"action\": \"reflect_css_value\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.reflect_css_value\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"ctrl+alt+left\"\n        ], \n        \"args\": {\n            \"action\": \"prev_edit_point\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.prev_edit_point\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"shift+ctrl+,\"\n        ], \n        \"args\": {\n            \"action\": \"select_previous_item\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.select_previous_item\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"ctrl+u\"\n        ], \n        \"args\": {\n            \"action\": \"update_image_size\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.update_image_size\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"ctrl+alt+right\"\n        ], \n        \"args\": {\n            \"action\": \"next_edit_point\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.next_edit_point\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"shift+ctrl+`\"\n        ], \n        \"args\": {\n            \"action\": \"split_join_tag\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.split_join_tag\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"shift+alt+down\"\n        ], \n        \"args\": {\n            \"action\": \"decrement_number_by_10\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.decrement_number_by_10\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"shift+ctrl+g\"\n        ], \n        \"command\": \"wrap_as_you_type\", \n        \"context\": [\n            {\n                \"operand\": false, \n                \"operator\": \"equal\", \n                \"match_all\": true, \n                \"key\": \"setting.is_widget\"\n            }, \n            {\n                \"match_all\": true, \n                \"key\": \"emmet_action_enabled.wrap_as_you_type\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"shift+ctrl+'\"\n        ], \n        \"command\": \"rename_tag\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.rename_tag\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"alt+up\"\n        ], \n        \"args\": {\n            \"action\": \"increment_number_by_01\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.increment_number_by_01\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"ctrl+shift+u\"\n        ], \n        \"command\": \"update_as_you_type\", \n        \"context\": [\n            {\n                \"operand\": false, \n                \"operator\": \"equal\", \n                \"match_all\": true, \n                \"key\": \"setting.is_widget\"\n            }, \n            {\n                \"match_all\": true, \n                \"key\": \"emmet_action_enabled.update_as_you_type\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"ctrl+alt+j\"\n        ], \n        \"args\": {\n            \"action\": \"matching_pair\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.matching_pair\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"ctrl+down\"\n        ], \n        \"args\": {\n            \"action\": \"decrement_number_by_1\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.decrement_number_by_1\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"ctrl+e\"\n        ], \n        \"args\": {\n            \"action\": \"expand_abbreviation\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.expand_abbreviation\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"tab\"\n        ], \n        \"command\": \"expand_abbreviation_by_tab\", \n        \"context\": [\n            {\n                \"operand\": \"source.css, source.sass, source.less, source.scss, source.stylus, source.postcss, source.jade, text.jade, source.pug, text.pug, text.slim, text.xml, text.html - source, text.haml, text.scala.html, source string\", \n                \"operator\": \"equal\", \n                \"match_all\": true, \n                \"key\": \"selector\"\n            }, \n            {\n                \"operand\": \"storage.type.templatetag.django\", \n                \"operator\": \"not_equal\", \n                \"match_all\": true, \n                \"key\": \"selector\"\n            }, \n            {\n                \"match_all\": true, \n                \"key\": \"selection_empty\"\n            }, \n            {\n                \"operator\": \"equal\", \n                \"operand\": false, \n                \"match_all\": true, \n                \"key\": \"has_next_field\"\n            }, \n            {\n                \"operator\": \"equal\", \n                \"operand\": false, \n                \"match_all\": true, \n                \"key\": \"setting.disable_tab_abbreviations\"\n            }, \n            {\n                \"operand\": false, \n                \"operator\": \"equal\", \n                \"match_all\": true, \n                \"key\": \"auto_complete_visible\"\n            }, \n            {\n                \"match_all\": true, \n                \"key\": \"is_abbreviation\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"tab\"\n        ], \n        \"command\": \"expand_abbreviation_by_tab\", \n        \"context\": [\n            {\n                \"operand\": \"source.css, source.sass, source.less, source.scss, source.stylus, source.postcss, source.jade, text.jade, text.slim, text.xml, text.html - source, text.haml, text.scala.html, source string\", \n                \"operator\": \"equal\", \n                \"match_all\": true, \n                \"key\": \"selector\"\n            }, \n            {\n                \"operand\": \"storage.type.templatetag.django\", \n                \"operator\": \"not_equal\", \n                \"match_all\": true, \n                \"key\": \"selector\"\n            }, \n            {\n                \"match_all\": true, \n                \"key\": \"selection_empty\"\n            }, \n            {\n                \"operator\": \"equal\", \n                \"operand\": false, \n                \"match_all\": true, \n                \"key\": \"has_next_field\"\n            }, \n            {\n                \"operator\": \"equal\", \n                \"operand\": true, \n                \"match_all\": true, \n                \"key\": \"auto_complete_visible\"\n            }, \n            {\n                \"operator\": \"equal\", \n                \"operand\": false, \n                \"match_all\": true, \n                \"key\": \"setting.disable_tab_abbreviations_on_auto_complete\"\n            }, \n            {\n                \"match_all\": true, \n                \"key\": \"is_abbreviation\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"enter\"\n        ], \n        \"args\": {\n            \"contents\": \"\\n\\t${0}\\n\"\n        }, \n        \"command\": \"insert_snippet\", \n        \"context\": [\n            {\n                \"operand\": \"meta.scope.between-tag-pair.html, meta.scope.between-tag-pair.xml\", \n                \"match_all\": true, \n                \"key\": \"selector\"\n            }, \n            {\n                \"operand\": false, \n                \"match_all\": true, \n                \"key\": \"auto_complete_visible\"\n            }, \n            {\n                \"match_all\": true, \n                \"key\": \"clear_fields_on_enter_key\"\n            }, \n            {\n                \"operand\": false, \n                \"match_all\": true, \n                \"key\": \"setting.disable_formatted_linebreak\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"#\"\n        ], \n        \"args\": {\n            \"attribute\": \"id\"\n        }, \n        \"command\": \"emmet_insert_attribute\", \n        \"context\": [\n            {\n                \"operand\": \"text.html meta.tag -string -punctuation.definition.tag.begin.html -meta.scope.between-tag-pair.html -source -meta.tag.template.value.twig\", \n                \"operator\": \"equal\", \n                \"match_all\": true, \n                \"key\": \"selector\"\n            }, \n            {\n                \"operator\": \"equal\", \n                \"operand\": true, \n                \"key\": \"setting.auto_id_class\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \".\"\n        ], \n        \"args\": {\n            \"attribute\": \"class\"\n        }, \n        \"command\": \"emmet_insert_attribute\", \n        \"context\": [\n            {\n                \"operand\": \"text.html meta.tag -string -punctuation.definition.tag.begin.html -meta.scope.between-tag-pair.html -source -meta.tag.template.value.twig\", \n                \"operator\": \"equal\", \n                \"match_all\": true, \n                \"key\": \"selector\"\n            }, \n            {\n                \"operator\": \"equal\", \n                \"operand\": true, \n                \"key\": \"setting.auto_id_class\"\n            }\n        ]\n    }\n]"
        },
        {
          "name": "Default (OSX).sublime-keymap",
          "type": "blob",
          "size": 13.21875,
          "content": "// This file is automatically generated with misc/generate-keymap.py script\n\n[\n    {\n        \"keys\": [\n            \"super+'\"\n        ], \n        \"args\": {\n            \"action\": \"remove_tag\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.remove_tag\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"ctrl+up\"\n        ], \n        \"args\": {\n            \"action\": \"increment_number_by_1\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.increment_number_by_1\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"alt+shift+forward_slash\"\n        ], \n        \"args\": {\n            \"action\": \"toggle_comment\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"operand\": \"source.css, source.less, source.scss, source.postcss, text.xml, text.html - source\", \n                \"operator\": \"equal\", \n                \"match_all\": true, \n                \"key\": \"selector\"\n            }, \n            {\n                \"match_all\": true, \n                \"key\": \"emmet_action_enabled.toggle_comment\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"shift+super+.\"\n        ], \n        \"args\": {\n            \"action\": \"select_next_item\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.select_next_item\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"ctrl+alt+enter\"\n        ], \n        \"command\": \"expand_as_you_type\", \n        \"context\": [\n            {\n                \"operand\": false, \n                \"operator\": \"equal\", \n                \"match_all\": true, \n                \"key\": \"setting.is_widget\"\n            }, \n            {\n                \"match_all\": true, \n                \"key\": \"emmet_action_enabled.expand_as_you_type\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"alt+down\"\n        ], \n        \"args\": {\n            \"action\": \"decrement_number_by_01\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.decrement_number_by_01\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"shift+ctrl+d\"\n        ], \n        \"args\": {\n            \"action\": \"encode_decode_data_url\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.encode_decode_data_url\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"shift+super+y\"\n        ], \n        \"args\": {\n            \"action\": \"evaluate_math_expression\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.evaluate_math_expression\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"ctrl+j\"\n        ], \n        \"args\": {\n            \"action\": \"balance_inward\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.balance_inward\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"ctrl+d\"\n        ], \n        \"args\": {\n            \"action\": \"balance_outward\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.balance_outward\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"alt+super+up\"\n        ], \n        \"args\": {\n            \"action\": \"increment_number_by_10\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.increment_number_by_10\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"shift+super+r\"\n        ], \n        \"args\": {\n            \"action\": \"reflect_css_value\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.reflect_css_value\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"ctrl+alt+left\"\n        ], \n        \"args\": {\n            \"action\": \"prev_edit_point\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.prev_edit_point\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"shift+super+,\"\n        ], \n        \"args\": {\n            \"action\": \"select_previous_item\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.select_previous_item\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"shift+ctrl+i\"\n        ], \n        \"args\": {\n            \"action\": \"update_image_size\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.update_image_size\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"ctrl+alt+right\"\n        ], \n        \"args\": {\n            \"action\": \"next_edit_point\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.next_edit_point\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"shift+super+'\"\n        ], \n        \"args\": {\n            \"action\": \"split_join_tag\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.split_join_tag\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"alt+super+down\"\n        ], \n        \"args\": {\n            \"action\": \"decrement_number_by_10\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.decrement_number_by_10\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"ctrl+w\"\n        ], \n        \"command\": \"wrap_as_you_type\", \n        \"context\": [\n            {\n                \"operand\": false, \n                \"operator\": \"equal\", \n                \"match_all\": true, \n                \"key\": \"setting.is_widget\"\n            }, \n            {\n                \"match_all\": true, \n                \"key\": \"emmet_action_enabled.wrap_as_you_type\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"super+shift+k\"\n        ], \n        \"command\": \"rename_tag\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.rename_tag\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"alt+up\"\n        ], \n        \"args\": {\n            \"action\": \"increment_number_by_01\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.increment_number_by_01\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"ctrl+shift+u\"\n        ], \n        \"command\": \"update_as_you_type\", \n        \"context\": [\n            {\n                \"operand\": false, \n                \"operator\": \"equal\", \n                \"match_all\": true, \n                \"key\": \"setting.is_widget\"\n            }, \n            {\n                \"match_all\": true, \n                \"key\": \"emmet_action_enabled.update_as_you_type\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"ctrl+shift+t\"\n        ], \n        \"args\": {\n            \"action\": \"matching_pair\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.matching_pair\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"ctrl+down\"\n        ], \n        \"args\": {\n            \"action\": \"decrement_number_by_1\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.decrement_number_by_1\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"ctrl+e\"\n        ], \n        \"args\": {\n            \"action\": \"expand_abbreviation\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.expand_abbreviation\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"tab\"\n        ], \n        \"command\": \"expand_abbreviation_by_tab\", \n        \"context\": [\n            {\n                \"operand\": \"source.css, source.sass, source.less, source.scss, source.stylus, source.postcss, source.jade, text.jade, source.pug, text.pug, text.slim, text.xml, text.html - source, text.haml, text.scala.html, source string\", \n                \"operator\": \"equal\", \n                \"match_all\": true, \n                \"key\": \"selector\"\n            }, \n            {\n                \"operand\": \"storage.type.templatetag.django\", \n                \"operator\": \"not_equal\", \n                \"match_all\": true, \n                \"key\": \"selector\"\n            }, \n            {\n                \"match_all\": true, \n                \"key\": \"selection_empty\"\n            }, \n            {\n                \"operator\": \"equal\", \n                \"operand\": false, \n                \"match_all\": true, \n                \"key\": \"has_next_field\"\n            }, \n            {\n                \"operator\": \"equal\", \n                \"operand\": false, \n                \"match_all\": true, \n                \"key\": \"setting.disable_tab_abbreviations\"\n            }, \n            {\n                \"operand\": false, \n                \"operator\": \"equal\", \n                \"match_all\": true, \n                \"key\": \"auto_complete_visible\"\n            }, \n            {\n                \"match_all\": true, \n                \"key\": \"is_abbreviation\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"tab\"\n        ], \n        \"command\": \"expand_abbreviation_by_tab\", \n        \"context\": [\n            {\n                \"operand\": \"source.css, source.sass, source.less, source.scss, source.stylus, source.postcss, source.jade, text.jade, source.pug, text.pug, text.slim, text.xml, text.html - source, text.haml, text.scala.html, source string\", \n                \"operator\": \"equal\", \n                \"match_all\": true, \n                \"key\": \"selector\"\n            }, \n            {\n                \"operand\": \"storage.type.templatetag.django\", \n                \"operator\": \"not_equal\", \n                \"match_all\": true, \n                \"key\": \"selector\"\n            }, \n            {\n                \"match_all\": true, \n                \"key\": \"selection_empty\"\n            }, \n            {\n                \"operator\": \"equal\", \n                \"operand\": false, \n                \"match_all\": true, \n                \"key\": \"has_next_field\"\n            }, \n            {\n                \"operator\": \"equal\", \n                \"operand\": true, \n                \"match_all\": true, \n                \"key\": \"auto_complete_visible\"\n            }, \n            {\n                \"operator\": \"equal\", \n                \"operand\": false, \n                \"match_all\": true, \n                \"key\": \"setting.disable_tab_abbreviations_on_auto_complete\"\n            }, \n            {\n                \"match_all\": true, \n                \"key\": \"is_abbreviation\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"enter\"\n        ], \n        \"args\": {\n            \"contents\": \"\\n\\t${0}\\n\"\n        }, \n        \"command\": \"insert_snippet\", \n        \"context\": [\n            {\n                \"operand\": \"meta.scope.between-tag-pair.html, meta.scope.between-tag-pair.xml\", \n                \"match_all\": true, \n                \"key\": \"selector\"\n            }, \n            {\n                \"operand\": false, \n                \"match_all\": true, \n                \"key\": \"auto_complete_visible\"\n            }, \n            {\n                \"match_all\": true, \n                \"key\": \"clear_fields_on_enter_key\"\n            }, \n            {\n                \"operand\": false, \n                \"match_all\": true, \n                \"key\": \"setting.disable_formatted_linebreak\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"#\"\n        ], \n        \"args\": {\n            \"attribute\": \"id\"\n        }, \n        \"command\": \"emmet_insert_attribute\", \n        \"context\": [\n            {\n                \"operand\": \"text.html meta.tag -string -punctuation.definition.tag.begin.html -meta.scope.between-tag-pair.html -source -meta.tag.template.value.twig\", \n                \"operator\": \"equal\", \n                \"match_all\": true, \n                \"key\": \"selector\"\n            }, \n            {\n                \"operator\": \"equal\", \n                \"operand\": true, \n                \"key\": \"setting.auto_id_class\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \".\"\n        ], \n        \"args\": {\n            \"attribute\": \"class\"\n        }, \n        \"command\": \"emmet_insert_attribute\", \n        \"context\": [\n            {\n                \"operand\": \"text.html meta.tag -string -punctuation.definition.tag.begin.html -meta.scope.between-tag-pair.html -source -meta.tag.template.value.twig\", \n                \"operator\": \"equal\", \n                \"match_all\": true, \n                \"key\": \"selector\"\n            }, \n            {\n                \"operator\": \"equal\", \n                \"operand\": true, \n                \"key\": \"setting.auto_id_class\"\n            }\n        ]\n    }\n]"
        },
        {
          "name": "Default (Windows).sublime-keymap",
          "type": "blob",
          "size": 13.216796875,
          "content": "// This file is automatically generated with misc/generate-keymap.py script\n\n[\n    {\n        \"keys\": [\n            \"shift+ctrl+;\"\n        ], \n        \"args\": {\n            \"action\": \"remove_tag\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.remove_tag\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"ctrl+up\"\n        ], \n        \"args\": {\n            \"action\": \"increment_number_by_1\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.increment_number_by_1\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"ctrl+shift+forward_slash\"\n        ], \n        \"args\": {\n            \"action\": \"toggle_comment\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"operand\": \"source.css, source.less, source.scss, source.postcss, text.xml, text.html - source\", \n                \"operator\": \"equal\", \n                \"match_all\": true, \n                \"key\": \"selector\"\n            }, \n            {\n                \"match_all\": true, \n                \"key\": \"emmet_action_enabled.toggle_comment\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"shift+ctrl+.\"\n        ], \n        \"args\": {\n            \"action\": \"select_next_item\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.select_next_item\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"ctrl+alt+enter\"\n        ], \n        \"command\": \"expand_as_you_type\", \n        \"context\": [\n            {\n                \"operand\": false, \n                \"operator\": \"equal\", \n                \"match_all\": true, \n                \"key\": \"setting.is_widget\"\n            }, \n            {\n                \"match_all\": true, \n                \"key\": \"emmet_action_enabled.expand_as_you_type\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"alt+down\"\n        ], \n        \"args\": {\n            \"action\": \"decrement_number_by_01\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.decrement_number_by_01\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"ctrl+'\"\n        ], \n        \"args\": {\n            \"action\": \"encode_decode_data_url\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.encode_decode_data_url\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"shift+ctrl+y\"\n        ], \n        \"args\": {\n            \"action\": \"evaluate_math_expression\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.evaluate_math_expression\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"ctrl+shift+0\"\n        ], \n        \"args\": {\n            \"action\": \"balance_inward\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.balance_inward\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"ctrl+,\"\n        ], \n        \"args\": {\n            \"action\": \"balance_outward\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.balance_outward\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"shift+alt+up\"\n        ], \n        \"args\": {\n            \"action\": \"increment_number_by_10\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.increment_number_by_10\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"shift+ctrl+r\"\n        ], \n        \"args\": {\n            \"action\": \"reflect_css_value\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.reflect_css_value\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"ctrl+alt+left\"\n        ], \n        \"args\": {\n            \"action\": \"prev_edit_point\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.prev_edit_point\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"shift+ctrl+,\"\n        ], \n        \"args\": {\n            \"action\": \"select_previous_item\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.select_previous_item\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"ctrl+u\"\n        ], \n        \"args\": {\n            \"action\": \"update_image_size\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.update_image_size\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"ctrl+alt+right\"\n        ], \n        \"args\": {\n            \"action\": \"next_edit_point\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.next_edit_point\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"shift+ctrl+`\"\n        ], \n        \"args\": {\n            \"action\": \"split_join_tag\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.split_join_tag\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"shift+alt+down\"\n        ], \n        \"args\": {\n            \"action\": \"decrement_number_by_10\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.decrement_number_by_10\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"shift+ctrl+g\"\n        ], \n        \"command\": \"wrap_as_you_type\", \n        \"context\": [\n            {\n                \"operand\": false, \n                \"operator\": \"equal\", \n                \"match_all\": true, \n                \"key\": \"setting.is_widget\"\n            }, \n            {\n                \"match_all\": true, \n                \"key\": \"emmet_action_enabled.wrap_as_you_type\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"shift+ctrl+'\"\n        ], \n        \"command\": \"rename_tag\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.rename_tag\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"alt+up\"\n        ], \n        \"args\": {\n            \"action\": \"increment_number_by_01\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.increment_number_by_01\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"ctrl+shift+u\"\n        ], \n        \"command\": \"update_as_you_type\", \n        \"context\": [\n            {\n                \"operand\": false, \n                \"operator\": \"equal\", \n                \"match_all\": true, \n                \"key\": \"setting.is_widget\"\n            }, \n            {\n                \"match_all\": true, \n                \"key\": \"emmet_action_enabled.update_as_you_type\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"ctrl+alt+j\"\n        ], \n        \"args\": {\n            \"action\": \"matching_pair\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.matching_pair\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"ctrl+down\"\n        ], \n        \"args\": {\n            \"action\": \"decrement_number_by_1\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.decrement_number_by_1\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"ctrl+e\"\n        ], \n        \"args\": {\n            \"action\": \"expand_abbreviation\"\n        }, \n        \"command\": \"run_emmet_action\", \n        \"context\": [\n            {\n                \"key\": \"emmet_action_enabled.expand_abbreviation\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"tab\"\n        ], \n        \"command\": \"expand_abbreviation_by_tab\", \n        \"context\": [\n            {\n                \"operand\": \"source.css, source.sass, source.less, source.scss, source.stylus, source.postcss, source.jade, text.jade, source.pug, text.pug, text.slim, text.xml, text.html - source, text.haml, text.scala.html, source string\", \n                \"operator\": \"equal\", \n                \"match_all\": true, \n                \"key\": \"selector\"\n            }, \n            {\n                \"operand\": \"storage.type.templatetag.django\", \n                \"operator\": \"not_equal\", \n                \"match_all\": true, \n                \"key\": \"selector\"\n            }, \n            {\n                \"match_all\": true, \n                \"key\": \"selection_empty\"\n            }, \n            {\n                \"operator\": \"equal\", \n                \"operand\": false, \n                \"match_all\": true, \n                \"key\": \"has_next_field\"\n            }, \n            {\n                \"operator\": \"equal\", \n                \"operand\": false, \n                \"match_all\": true, \n                \"key\": \"setting.disable_tab_abbreviations\"\n            }, \n            {\n                \"operand\": false, \n                \"operator\": \"equal\", \n                \"match_all\": true, \n                \"key\": \"auto_complete_visible\"\n            }, \n            {\n                \"match_all\": true, \n                \"key\": \"is_abbreviation\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"tab\"\n        ], \n        \"command\": \"expand_abbreviation_by_tab\", \n        \"context\": [\n            {\n                \"operand\": \"source.css, source.sass, source.less, source.scss, source.stylus, source.postcss, source.jade, text.jade, source.pug, text.pug, text.slim, text.xml, text.html - source, text.haml, text.scala.html, source string\", \n                \"operator\": \"equal\", \n                \"match_all\": true, \n                \"key\": \"selector\"\n            }, \n            {\n                \"operand\": \"storage.type.templatetag.django\", \n                \"operator\": \"not_equal\", \n                \"match_all\": true, \n                \"key\": \"selector\"\n            }, \n            {\n                \"match_all\": true, \n                \"key\": \"selection_empty\"\n            }, \n            {\n                \"operator\": \"equal\", \n                \"operand\": false, \n                \"match_all\": true, \n                \"key\": \"has_next_field\"\n            }, \n            {\n                \"operator\": \"equal\", \n                \"operand\": true, \n                \"match_all\": true, \n                \"key\": \"auto_complete_visible\"\n            }, \n            {\n                \"operator\": \"equal\", \n                \"operand\": false, \n                \"match_all\": true, \n                \"key\": \"setting.disable_tab_abbreviations_on_auto_complete\"\n            }, \n            {\n                \"match_all\": true, \n                \"key\": \"is_abbreviation\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"enter\"\n        ], \n        \"args\": {\n            \"contents\": \"\\n\\t${0}\\n\"\n        }, \n        \"command\": \"insert_snippet\", \n        \"context\": [\n            {\n                \"operand\": \"meta.scope.between-tag-pair.html, meta.scope.between-tag-pair.xml\", \n                \"match_all\": true, \n                \"key\": \"selector\"\n            }, \n            {\n                \"operand\": false, \n                \"match_all\": true, \n                \"key\": \"auto_complete_visible\"\n            }, \n            {\n                \"match_all\": true, \n                \"key\": \"clear_fields_on_enter_key\"\n            }, \n            {\n                \"operand\": false, \n                \"match_all\": true, \n                \"key\": \"setting.disable_formatted_linebreak\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \"#\"\n        ], \n        \"args\": {\n            \"attribute\": \"id\"\n        }, \n        \"command\": \"emmet_insert_attribute\", \n        \"context\": [\n            {\n                \"operand\": \"text.html meta.tag -string -punctuation.definition.tag.begin.html -meta.scope.between-tag-pair.html -source -meta.tag.template.value.twig\", \n                \"operator\": \"equal\", \n                \"match_all\": true, \n                \"key\": \"selector\"\n            }, \n            {\n                \"operator\": \"equal\", \n                \"operand\": true, \n                \"key\": \"setting.auto_id_class\"\n            }\n        ]\n    }, \n    {\n        \"keys\": [\n            \".\"\n        ], \n        \"args\": {\n            \"attribute\": \"class\"\n        }, \n        \"command\": \"emmet_insert_attribute\", \n        \"context\": [\n            {\n                \"operand\": \"text.html meta.tag -string -punctuation.definition.tag.begin.html -meta.scope.between-tag-pair.html -source -meta.tag.template.value.twig\", \n                \"operator\": \"equal\", \n                \"match_all\": true, \n                \"key\": \"selector\"\n            }, \n            {\n                \"operator\": \"equal\", \n                \"operand\": true, \n                \"key\": \"setting.auto_id_class\"\n            }\n        ]\n    }\n]"
        },
        {
          "name": "Default.sublime-commands",
          "type": "blob",
          "size": 3.09765625,
          "content": "[\n\t{\n\t\t\"caption\": \"Emmet: Expand Abbreviation\",\n\t\t\"command\": \"run_emmet_action\",\n\t\t\"args\": {\n\t\t\t\"action\": \"expand_abbreviation\"\n\t\t}\n\t},\n\n\t{\n\t\t\"caption\": \"Emmet: Wrap With Abbreviation\",\n\t\t\"command\": \"wrap_as_you_type\"\n\t},\n\n\t{\n\t\t\"caption\": \"Emmet: Balance (outward)\",\n\t\t\"command\": \"run_emmet_action\",\n\t\t\"args\": {\n\t\t\t\"action\": \"balance_outward\"\n\t\t}\n\t},\n\n\t{\n\t\t\"caption\": \"Emmet: Balance (inward)\",\n\t\t\"command\": \"run_emmet_action\",\n\t\t\"args\": {\n\t\t\t\"action\": \"balance_inward\"\n\t\t}\n\t},\n\n\t{\n\t\t\"caption\": \"Emmet: Go to Matching Pair\",\n\t\t\"command\": \"run_emmet_action\",\n\t\t\"args\": {\n\t\t\t\"action\": \"matching_pair\"\n\t\t}\n\t},\n\n\t{\n\t\t\"caption\": \"Emmet: Next Edit Point\",\n\t\t\"command\": \"run_emmet_action\",\n\t\t\"args\": {\n\t\t\t\"action\": \"next_edit_point\"\n\t\t}\n\t},\n\n\t{\n\t\t\"caption\": \"Emmet: Previous Edit Point\",\n\t\t\"command\": \"run_emmet_action\",\n\t\t\"args\": {\n\t\t\t\"action\": \"prev_edit_point\"\n\t\t}\n\t},\n\n\t{\n\t\t\"caption\": \"Emmet: Merge Lines\",\n\t\t\"command\": \"run_emmet_action\",\n\t\t\"args\": {\n\t\t\t\"action\": \"merge_lines\"\n\t\t}\n\t},\n\n\t{\n\t\t\"caption\": \"Emmet: Toggle Comment\",\n\t\t\"command\": \"run_emmet_action\",\n\t\t\"args\": {\n\t\t\t\"action\": \"toggle_comment\"\n\t\t}\n\t},\n\n\t{\n\t\t\"caption\": \"Emmet: Split\\\\Join Tag\",\n\t\t\"command\": \"run_emmet_action\",\n\t\t\"args\": {\n\t\t\t\"action\": \"split_join_tag\"\n\t\t}\n\t},\n\n\t{\n\t\t\"caption\": \"Emmet: Remove Tag\",\n\t\t\"command\": \"run_emmet_action\",\n\t\t\"args\": {\n\t\t\t\"action\": \"remove_tag\"\n\t\t}\n\t},\n\n\t{\n\t\t\"caption\": \"Emmet: Evaluate Math Expression\",\n\t\t\"command\": \"run_emmet_action\",\n\t\t\"args\": {\n\t\t\t\"action\": \"evaluate_math_expression\"\n\t\t}\n\t},\n\n\t{\n\t\t\"caption\": \"Emmet: Increment Number by 1\",\n\t\t\"command\": \"run_emmet_action\",\n\t\t\"args\": {\n\t\t\t\"action\": \"increment_number_by_1\"\n\t\t}\n\t},\n\n\t{\n\t\t\"caption\": \"Emmet: Decrement Number by 1\",\n\t\t\"command\": \"run_emmet_action\",\n\t\t\"args\": {\n\t\t\t\"action\": \"decrement_number_by_1\"\n\t\t}\n\t},\n\n\t{\n\t\t\"caption\": \"Emmet: Increment Number by 0.1\",\n\t\t\"command\": \"run_emmet_action\",\n\t\t\"args\": {\n\t\t\t\"action\": \"increment_number_by_01\"\n\t\t}\n\t},\n\n\t{\n\t\t\"caption\": \"Emmet: Decrement Number by 0.1\",\n\t\t\"command\": \"run_emmet_action\",\n\t\t\"args\": {\n\t\t\t\"action\": \"decrement_number_by_01\"\n\t\t}\n\t},\n\n\t{\n\t\t\"caption\": \"Emmet: Increment Number by 10\",\n\t\t\"command\": \"run_emmet_action\",\n\t\t\"args\": {\n\t\t\t\"action\": \"increment_number_by_10\"\n\t\t}\n\t},\n\n\t{\n\t\t\"caption\": \"Emmet: Decrement Number by 10\",\n\t\t\"command\": \"run_emmet_action\",\n\t\t\"args\": {\n\t\t\t\"action\": \"decrement_number_by_10\"\n\t\t}\n\t},\n\n\t{\n\t\t\"caption\": \"Emmet: Select Next Item\",\n\t\t\"command\": \"run_emmet_action\",\n\t\t\"args\": {\n\t\t\t\"action\": \"select_next_item\"\n\t\t}\n\t},\n\n\t{\n\t\t\"caption\": \"Emmet: Select Previous Item\",\n\t\t\"command\": \"run_emmet_action\",\n\t\t\"args\": {\n\t\t\t\"action\": \"select_previous_item\"\n\t\t}\n\t},\n\n\t{\n\t\t\"caption\": \"Emmet: Reflect CSS Value\",\n\t\t\"command\": \"run_emmet_action\",\n\t\t\"args\": {\n\t\t\t\"action\": \"reflect_css_value\"\n\t\t}\n\t},\n\n\t{\n\t\t\"caption\": \"Emmet: Encode\\\\Decode Image to data:URL\",\n\t\t\"command\": \"run_emmet_action\",\n\t\t\"args\": {\n\t\t\t\"action\": \"encode_decode_data_url\"\n\t\t}\n\t},\n\n\t{\n\t\t\"caption\": \"Emmet: Update Image Size\",\n\t\t\"command\": \"run_emmet_action\",\n\t\t\"args\": {\n\t\t\t\"action\": \"update_image_size\"\n\t\t}\n\t},\n\n\t{\n\t\t\"caption\": \"Emmet: Rename Tag\",\n\t\t\"command\": \"rename_tag\"\n\t},\n\n\t{\n\t\t\"caption\": \"Emmet: Reload Extensions\",\n\t\t\"command\": \"emmet_reset_context\"\n\t}\n]"
        },
        {
          "name": "Emmet.sublime-settings",
          "type": "blob",
          "size": 5.3056640625,
          "content": "{\n\t// Copy any modified settings to `User/Emmet.sublime-settings`\n\t// otherwise modifications will not survive updates.\n\n\t// Path to folder where Emmet should look for extensions\n\t// http://docs.emmet.io/customization/\n\t\"extensions_path\": \"~/emmet\",\n\n\t// Disable completions of HTML attributes\n\t// with this option disabled, you can get attribute list completions\n\t// inside opening HTML tags.\n\t// WARNING: with this option disabled, Tab key expander will not\n\t// work inside opening HTML attributes\n\t\"disable_completions\": false,\n\n\t// With this option enabled, all Emmet's CSS snippets\n\t// will be available in standard auto-complete popup\n\t\"show_css_completions\": true,\n\n\t// List of scopes where Emmet CSS completions should be available\n\t\"css_completions_scope\": \"source.css - meta.selector.css - meta.property-value.css, source.scss - meta.selector.scss - meta.property-value.scss, source.less - meta.selector.css - meta.property-value.css\",\n\n\t// Remove default HTML tag completions on plugin start\n\t// You should restart editor after changing this option\n\t\"remove_html_completions\": false,\n\n\t// A comma-separated list of scopes where Emmet’s Tab key\n\t// abbreviation expander should be disabled\t \n\t\"disable_tab_abbreviations_for_scopes\": \"\",\n\n\t// A regexp for scope name: if it matches, Tab handler won’t work\n\t// The reason to use this preference is that ST2 has buggy scope matcher\n\t// which may still trigger Tab handler even if it's restricted by context\n\t\"disable_tab_abbreviations_for_regexp\": \"source\\\\.(?!css).+?\\\\stext\\\\.html\",\n\n\t// Exit tabstop mode when enter key is pressed\n\t\"clear_fields_on_enter_key\": true,\n\n\t// A comma-separated list of disabled action names.\n\t// Listed action will not be triggered by default keyboard\n\t// shortcut.\n\t// Use \"all\" value to disable all shortcuts at once\n\t\"disabled_keymap_actions\": \"\",\n\n\t// By default, Emmet overrides Tab key to effectively expand abbreviations.\n\t// The downside of this approach is that you can’t expand regular ST2\n\t// snippets (like `php`). Since it’s not currently possible to get a list\n\t// of ST2 snippets via API, you can provide a list of scopes where Emmet’s\n\t// Tab trigger should be disabled when expanding simple abbreviation.\n\t// If entered abbreviation (like `php`) wasn’t found in Emmet snippets list\n\t// or \"known_html_tags\" preference, Tab handler will not be triggered.\n\t// Leave this setting blank to disable this feature\n\t\"disabled_single_snippet_for_scopes\": \"text.html\",\n\n\t// A space-separated list of single snippets that should be \n\t// forcilbly disabled (not handled) for Emmet even if it \n\t// has such abbreviation. \n\t// This option is useful if you wish the enumerated snippets\n\t// should be handled by Sublime Text.\n\t// Example value: \"script style html\"\n\t\"disabled_single_snippets\": \"\",\n\n\t// A space separated list of all known HTML tags,\n\t// used together with \"disabled_on_single_snippets\" option\n\t\"known_html_tags\": \"html head title base link meta style script noscript body section nav article aside h1 h2 h3 h4 h5 h6 hgroup header footer address p hr pre blockquote ol ul li dl dt dd figure figcaption div a em strong small s cite q dfn abbr data time code var samp kbd sub sup i b u mark ruby rt rp bdi bdo span br wbr ins del img iframe embed object param video audio source track canvas map area svg math table caption colgroup col tbody thead tfoot tr td th form fieldset legend label input button select datalist optgroup option textarea keygen output progress meter details summary command menu main template\",\n\n\t\"empty_elements\": \"area base basefont br col frame hr img input isindex link meta param embed\",\n\n\t// If set to `true`, Emmet will automatically insert final tabstop\n\t// at the end of expanded abbreviation\n\t\"insert_final_tabstop\": false,\n\n\t// Try to automatically detect XHTML dialect in HTML documents.\n\t// With this option enabled, your custom profile for HTML documents may not work.\n\t\"autodetect_xhtml\": true,\n\n\t// Use old Tab handler to expand abbreviations.\n\t// With this option enabled, editor may better handle Tab key\n\t// (especially with other plugins that overrides Tab key),\n\t// but will spit \"slow plugin\" message\n\t\"use_old_tab_handler\": false,\n\n\t// Disables PyV8 auto-update. Useful for users who installed PyV8\n\t// manually from https://github.com/emmetio/pyv8-binaries because\n\t// of local proxy restrictions\n\t\"disable_pyv8_update\": false,\n\n\t// Expand abbreviations inside PHP strings on single line\n\t// (e.g. without formatting)\n\t\"php_single_line\": false,\n\n\t///////////////////////////////\n\t// Emmet customization\n\t// Each section has the same meaning as the same-named JSON file \n\t// described here:\n\t// http://docs.emmet.io/customization/\n\t///////////////////////////////\n\n\n\t// Custom snippets definitions, as per https://github.com/emmetio/emmet/blob/master/snippets.json\n\t\"snippets\": {\n\t\t// \"html\": {\n\t\t// \t\"abbreviations\": {\n\t\t// \t\t\"example\": \"<div class='example' title='Custom element example'>\"\n\t\t// \t}\n\t\t// }\n\t},\n\n\t// Emmet preferences\n\t// List of all available preferences:\n\t// http://docs.emmet.io/customization/preferences/\n\t\"preferences\": {\n\t\t// \"css.valueSeparator\": \": \",\n\t\t// \"css.propertyEnd\": \";\"\n\t},\n\n\t// Output profiles for syntaxes\n\t// http://docs.emmet.io/customization/syntax-profiles/\n\t\"syntaxProfiles\": {\n\t\t// Enable XHTML dialect for HTML syntax\n\t\t// \"html\": \"xhtml\"\n\t\t// \n\t\t// Write chained CSS abbreviations on single line:\n\t\t// \"css\": \"css_line\"\n\t}\n}\n"
        },
        {
          "name": "Emmet.tmLanguage",
          "type": "blob",
          "size": 11.392578125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\r\n<plist version=\"1.0\">\r\n<dict>\r\n\t<key>comment</key>\r\n\t<string>Emmet abbreviation syntax by sublimator|castle_made_of_sand</string>\r\n\t<key>fileTypes</key>\r\n\t<array>\r\n\t\t<string>em</string>\r\n\t</array>\r\n\t<key>name</key>\r\n\t<string>Emmet</string>\r\n\t<key>patterns</key>\r\n\t<array>\r\n\t\t<dict>\r\n\t\t\t<key>include</key>\r\n\t\t\t<string>#css_snippets</string>\r\n\t\t</dict>\r\n\t\t<dict>\r\n\t\t\t<key>include</key>\r\n\t\t\t<string>#html_abbrevs</string>\r\n\t\t</dict>\r\n\t\t<dict>\r\n\t\t\t<key>include</key>\r\n\t\t\t<string>#expandos</string>\r\n\t\t</dict>\r\n\t\t<dict>\r\n\t\t\t<key>include</key>\r\n\t\t\t<string>#html_elements</string>\r\n\t\t</dict>\r\n\t\t<dict>\r\n\t\t\t<key>include</key>\r\n\t\t\t<string>#filter</string>\r\n\t\t</dict>\r\n\t\t<dict>\r\n\t\t\t<key>include</key>\r\n\t\t\t<string>#element</string>\r\n\t\t</dict>\r\n\t\t<dict>\r\n\t\t\t<key>include</key>\r\n\t\t\t<string>#class</string>\r\n\t\t</dict>\r\n\t\t<dict>\r\n\t\t\t<key>include</key>\r\n\t\t\t<string>#operator</string>\r\n\t\t</dict>\r\n\t\t<dict>\r\n\t\t\t<key>include</key>\r\n\t\t\t<string>#id</string>\r\n\t\t</dict>\r\n\t\t<dict>\r\n\t\t\t<key>include</key>\r\n\t\t\t<string>#repeater</string>\r\n\t\t</dict>\r\n\t\t<dict>\r\n\t\t\t<key>include</key>\r\n\t\t\t<string>#repeat_quantifier</string>\r\n\t\t</dict>\r\n\t\t<dict>\r\n\t\t\t<key>begin</key>\r\n\t\t\t<string>\\[</string>\r\n\t\t\t<key>beginCaptures</key>\r\n\t\t\t<dict>\r\n\t\t\t\t<key>0</key>\r\n\t\t\t\t<dict>\r\n\t\t\t\t\t<key>name</key>\r\n\t\t\t\t\t<string>punctuation.definition.begin.#30d556d0518a11e1bd8ab482fe507f0e</string>\r\n\t\t\t\t</dict>\r\n\t\t\t</dict>\r\n\t\t\t<key>end</key>\r\n\t\t\t<string>\\]</string>\r\n\t\t\t<key>endCaptures</key>\r\n\t\t\t<dict>\r\n\t\t\t\t<key>0</key>\r\n\t\t\t\t<dict>\r\n\t\t\t\t\t<key>name</key>\r\n\t\t\t\t\t<string>punctuation.definition.end.#30d556d1518a11e1ab2fb482fe507f0e</string>\r\n\t\t\t\t</dict>\r\n\t\t\t</dict>\r\n\t\t\t<key>name</key>\r\n\t\t\t<string>meta.tag.attributes.#30d556cf518a11e1afd8b482fe507f0e</string>\r\n\t\t\t<key>patterns</key>\r\n\t\t\t<array>\r\n\t\t\t\t<dict>\r\n\t\t\t\t\t<key>include</key>\r\n\t\t\t\t\t<string>#attribute-value</string>\r\n\t\t\t\t</dict>\r\n\t\t\t\t<dict>\r\n\t\t\t\t\t<key>include</key>\r\n\t\t\t\t\t<string>#attribute-name</string>\r\n\t\t\t\t</dict>\r\n\t\t\t\t<dict>\r\n\t\t\t\t\t<key>include</key>\r\n\t\t\t\t\t<string>#double-string</string>\r\n\t\t\t\t</dict>\r\n\t\t\t\t<dict>\r\n\t\t\t\t\t<key>include</key>\r\n\t\t\t\t\t<string>#single-string</string>\r\n\t\t\t\t</dict>\r\n\t\t\t</array>\r\n\t\t</dict>\r\n\t\t<dict>\r\n\t\t\t<key>begin</key>\r\n\t\t\t<string>\\{</string>\r\n\t\t\t<key>beginCaptures</key>\r\n\t\t\t<dict>\r\n\t\t\t\t<key>0</key>\r\n\t\t\t\t<dict>\r\n\t\t\t\t\t<key>name</key>\r\n\t\t\t\t\t<string>punctuation.#30d556d4518a11e1baa6b482fe507f0e</string>\r\n\t\t\t\t</dict>\r\n\t\t\t</dict>\r\n\t\t\t<key>contentName</key>\r\n\t\t\t<string>string.#30d556d3518a11e1babab482fe507f0e</string>\r\n\t\t\t<key>end</key>\r\n\t\t\t<string>\\}</string>\r\n\t\t\t<key>endCaptures</key>\r\n\t\t\t<dict>\r\n\t\t\t\t<key>0</key>\r\n\t\t\t\t<dict>\r\n\t\t\t\t\t<key>name</key>\r\n\t\t\t\t\t<string>punctuation.#30d556d5518a11e1860bb482fe507f0e</string>\r\n\t\t\t\t</dict>\r\n\t\t\t</dict>\r\n\t\t\t<key>name</key>\r\n\t\t\t<string>string.#30d556d2518a11e1bccfb482fe507f0e</string>\r\n\t\t\t<key>patterns</key>\r\n\t\t\t<array>\r\n\t\t\t</array>\r\n\t\t</dict>\r\n\t</array>\r\n\t<key>repository</key>\r\n\t<dict>\r\n\t\t<key>attribute-name</key>\r\n\t\t<dict>\r\n\t\t\t<key>match</key>\r\n\t\t\t<string>[a-zA-Z0-9:]+</string>\r\n\t\t\t<key>name</key>\r\n\t\t\t<string>meta.tag entity.other.attribute-name.#30d556dd518a11e19355b482fe507f0e</string>\r\n\t\t</dict>\r\n\t\t<key>attribute-value</key>\r\n\t\t<dict>\r\n\t\t\t<key>captures</key>\r\n\t\t\t<dict>\r\n\t\t\t\t<key>1</key>\r\n\t\t\t\t<dict>\r\n\t\t\t\t\t<key>name</key>\r\n\t\t\t\t\t<string>meta.tag entity.other.attribute-name.#30d556df518a11e18855b482fe507f0e</string>\r\n\t\t\t\t</dict>\r\n\t\t\t\t<key>2</key>\r\n\t\t\t\t<dict>\r\n\t\t\t\t\t<key>name</key>\r\n\t\t\t\t\t<string></string>\r\n\t\t\t\t</dict>\r\n\t\t\t\t<key>3</key>\r\n\t\t\t\t<dict>\r\n\t\t\t\t\t<key>name</key>\r\n\t\t\t\t\t<string>string.#30d556e0518a11e1949eb482fe507f0e</string>\r\n\t\t\t\t</dict>\r\n\t\t\t</dict>\r\n\t\t\t<key>match</key>\r\n\t\t\t<string>([a-zA-Z0-9:]+)(=)([^\"'\\] ]+)</string>\r\n\t\t\t<key>name</key>\r\n\t\t\t<string>meta.tag.#30d556de518a11e195ecb482fe507f0e</string>\r\n\t\t</dict>\r\n\t\t<key>class</key>\r\n\t\t<dict>\r\n\t\t\t<key>match</key>\r\n\t\t\t<string>\\.[0-9a-zA-Z-_-]+</string>\r\n\t\t\t<key>name</key>\r\n\t\t\t<string>entity.class.#30d556e4518a11e1a731b482fe507f0e</string>\r\n\t\t</dict>\r\n\t\t<key>css_snippets</key>\r\n\t\t<dict>\r\n\t\t\t<key>captures</key>\r\n\t\t\t<dict>\r\n\t\t\t\t<key>1</key>\r\n\t\t\t\t<dict>\r\n\t\t\t\t\t<key>name</key>\r\n\t\t\t\t\t<string></string>\r\n\t\t\t\t</dict>\r\n\t\t\t</dict>\r\n\t\t\t<key>match</key>\r\n\t\t\t<string>(d:tbc|wow:n|wow:u|wow:s|d:tbr|list:lr|bdl\\+|bdf:c|bgbk:bb|bdbi:n|bdf:r|to:n|fst:ee|fst:ec|bgcp:cb|lisp:o|lisp:i|d:tbclg|@f|d:rbt|@i|@m|fef:eb|fef:eg|te:c|te:b|q:n|te:n|bdbs:n|bg:ie|d:li|tj:k|bd\\+|fems:ac|fst:n|fst:c|fst:e|cur:t|cur:p|cur:m|maw:n|fw:n|bdtri:n|fw:b|bdtri:c|cur:a|oc:i|cur:c|bdls:n|tw:u|va:sub|tw:s|pgbi:av|tj:t|pgbi:au|va:sup|va:bl|tw:n|va:t|va:m|bds:dt|va:b|tsh\\+|cps:t|cps:b|list:dclz|f\\+|bd:n|!|bdl:n|bdl:a|td:u|tw:no|whs:nw|va:tb|h:a|d:ib|bgo:cb|d:i|va:tt|fef:o|wow:nm|ct:noq|pgba:al|bdli:n|d:tbhg|bga:s|fst:se|fst:sc|fsm:a|bga:f|fsm:n|tbl:f|tbl:a|bdci:n|whsc:k|bdci:c|whsc:l|bgi:n|bdb:n|bdbk:c|pgba:r|te:ac|l:a|bdr:n|whsc:ba|whsc:bs|b:a|bdt\\+|ta:c|bdf:sp|ovy:a|bdb\\+|d:tb|bdf:st|ti:-|ovy:h|ta:l|ovy:s|ta:r|bdf:sc|ovy:v|bdts:n|bdf:of|fl:l|fl:n|bdf:ow|fl:r|tt:c|tt:n|ec:s|tt:l|ec:h|tt:u|bdti:n|bgz:cv|bgz:ct|d:cp|fef:n|bdt:n|to\\+|bdbri:n|bdbri:c|tsh:n|fv:sc|r:a|fems:ds|fems:dt|op:ms|bds:dtds|bgcp:nc|ct:ncq|bg:n|bdrs:n|ml:a|bds:dtdtds|ff:s|d:rbb|tj:d|tj:a|ff:f|fems:c|ff:c|d:itb|fems:n|ff:m|pgba:au|bdri:n|mt:a|wob:l|td:n|td:o|td:l|bxz:bb|bxsh:n|bxsh:m|bxsh:w|fw:br|ovs:p|ovs:s|w:a|fv:n|ovs:a|m:a|bgcp:pb|ovs:m|fsm:aw|pgbb:au|m:4|m:0|m:2|m:3|op:ie|fst:ue|fst:uc|pgbb:al|bdtli:n|bdtli:c|list:ur|tr:n|bgbk:c|ov:a|te:a|ov:h|ov:v|ov:s|cp:r|cp:a|lisi:n|rz:v|rz:n|rz:h|mb:a|rz:b|d:rb|d:ri|bds:db|d:tbfg|bds:ds|lis:n|d:b|tal:a|tal:c|tal:l|bgbk:eb|d:n|tal:r|tj:iw|bgr:x|bgr:y|bgr:n|list:c|list:d|bdbli:c|bdbli:n|list:n|list:s|mah:n|th:t|d:rbtg|th:f|th:a|ct:cq|ct:cs|th:m|bxz:cb|whs:p|wob:bs|fw:lr|whsc:n|te:ds|te:dt|whs:n|wob:ba|list:dc|d:tbrg|mr:a|q:en|ovs:mq|p:4|bgz:a|p:0|p:3|p:2|whs:pw|bg\\+|bdcl:s|bdcl:c|wob:n|wob:k|tj:ic|tj:ii|t:a|bgcp:bb|ff:ss|cl:r|q:ru|cl:n|cl:l|cl:b|fs:o|fs:n|bds:h|bds:i|bds:n|bds:o|fs:i|ct:oq|bds:g|bds:r|bds:s|bds:w|z:a|ct:c|ct:a|pgbb:r|bgo:bb|ct:n|bdr\\+|pgbb:l|d:tbcl|ovx:a|whs:pl|ovx:h|ovx:v|ovx:s|cur:d|d:tbcp|d:rbbg|femp:a|femp:b|o:n|pgba:l|pos:s|pos:r|bdi:m|bdi:n|pos:f|pos:a|bdi:w|fza:n|v:h|v:c|cur:he|cur:ha|bgo:pb|v:v)</string>\r\n\t\t\t<key>name</key>\r\n\t\t\t<string>support.zen.css.snippet.#30d556d9518a11e18531b482fe507f0e</string>\r\n\t\t</dict>\r\n\t\t<key>double-string</key>\r\n\t\t<dict>\r\n\t\t\t<key>begin</key>\r\n\t\t\t<string>\"</string>\r\n\t\t\t<key>beginCaptures</key>\r\n\t\t\t<dict>\r\n\t\t\t\t<key>0</key>\r\n\t\t\t\t<dict>\r\n\t\t\t\t\t<key>name</key>\r\n\t\t\t\t\t<string>punctuation.definition.begin.#30d556e7518a11e18d8eb482fe507f0e</string>\r\n\t\t\t\t</dict>\r\n\t\t\t</dict>\r\n\t\t\t<key>end</key>\r\n\t\t\t<string>\"</string>\r\n\t\t\t<key>endCaptures</key>\r\n\t\t\t<dict>\r\n\t\t\t\t<key>0</key>\r\n\t\t\t\t<dict>\r\n\t\t\t\t\t<key>name</key>\r\n\t\t\t\t\t<string>punctuation.definition.end.#30d556e8518a11e19ddeb482fe507f0e</string>\r\n\t\t\t\t</dict>\r\n\t\t\t</dict>\r\n\t\t\t<key>name</key>\r\n\t\t\t<string>string.quoted.double.#30d556e6518a11e1aa37b482fe507f0e</string>\r\n\t\t\t<key>patterns</key>\r\n\t\t\t<array>\r\n\t\t\t</array>\r\n\t\t</dict>\r\n\t\t<key>element</key>\r\n\t\t<dict>\r\n\t\t\t<key>match</key>\r\n\t\t\t<string>[a-zA-Z-:]+</string>\r\n\t\t\t<key>name</key>\r\n\t\t\t<string>meta.tag.#30d556dc518a11e1833ab482fe507f0e</string>\r\n\t\t</dict>\r\n\t\t<key>expandos</key>\r\n\t\t<dict>\r\n\t\t\t<key>match</key>\r\n\t\t\t<string>(colgroup\\+|optg\\+|table\\+|ol\\+|tr\\+|optgroup\\+|dl\\+|ul\\+|select\\+|colg\\+|map\\+)$</string>\r\n\t\t\t<key>name</key>\r\n\t\t\t<string>support.zen.html.expandos.#30d556d7518a11e18b1ab482fe507f0e</string>\r\n\t\t</dict>\r\n\t\t<key>filter</key>\r\n\t\t<dict>\r\n\t\t\t<key>captures</key>\r\n\t\t\t<dict>\r\n\t\t\t\t<key>1</key>\r\n\t\t\t\t<dict>\r\n\t\t\t\t\t<key>name</key>\r\n\t\t\t\t\t<string>keyword.pipe.#30d556da518a11e18e9cb482fe507f0e</string>\r\n\t\t\t\t</dict>\r\n\t\t\t\t<key>2</key>\r\n\t\t\t\t<dict>\r\n\t\t\t\t\t<key>name</key>\r\n\t\t\t\t\t<string>entity.filter.#30d556db518a11e1947fb482fe507f0e</string>\r\n\t\t\t\t</dict>\r\n\t\t\t</dict>\r\n\t\t\t<key>match</key>\r\n\t\t\t<string>(\\|)([a-zA-Z]+)</string>\r\n\t\t</dict>\r\n\t\t<key>html_abbrevs</key>\r\n\t\t<dict>\r\n\t\t\t<key>match</key>\r\n\t\t\t<string>(?:a:link|input:datetime-local|input:reset|colg|style|adr|img|bdo:l|param|form:post|bdo:r|fig|input:radio|link:print|opt|input:i|input:h|input:f|input:c|input:b|abbr|input:t|input:p|input:s|input:r|ifr|emb|cmd|link:atom|art|input:search|area:r|area:p|input:date|video|input:button|area:d|area:c|out|ftr|dlg|script:src|form:get|meta:utf|label|input:time|link:favicon|menu:toolbar|prog|input:email|str|leg|acronym|base|bq|src|obj|script|acr|input:password|input:file|tarea|select|input:number|input:range|area|input:image|input:month|fset|meta:win|menu:t|form|menu:c|link|input|link:rss|hdr|cap|det|link:touch|iframe|link:css|input:week|embed|optg|input:datetime|datag|option|html:xml|btn|input:url|menu:context|map|input:color|meta:compat|input:hidden|object|a:mail|a|datal|kg|textarea|input:submit|input:text|input:checkbox|fst|sect|audio|bdo)</string>\r\n\t\t\t<key>name</key>\r\n\t\t\t<string>entity.name.tag support.zen.html.abbrev.#30d556d6518a11e18a88b482fe507f0e</string>\r\n\t\t\t<key>patterns</key>\r\n\t\t\t<array>\r\n\t\t\t\t<dict>\r\n\t\t\t\t\t<key>match</key>\r\n\t\t\t\t\t<string>:</string>\r\n\t\t\t\t\t<key>name</key>\r\n\t\t\t\t\t<string>fuck</string>\r\n\t\t\t\t</dict>\r\n\t\t\t</array>\r\n\t\t</dict>\r\n\t\t<key>html_elements</key>\r\n\t\t<dict>\r\n\t\t\t<key>match</key>\r\n\t\t\t<string>\\b(comment|bgsound|code|h2|h3|h1|h6|ilayer|h4|blink|header|table|font|u|select|noframes|noscript|style|span|img|area|mark|tt|var|tr|param|legend|source|dfn|tfoot|th|time|strike|input|td|xmp|cite|thead|dl|blockquote|fieldset|option|form|hr|big|dd|nobr|link|abbr|optgroup|li|dt|h5|ruby|noembed|pre|b|wbr|colgroup|button|isindex|keygen|p|applet|del|iframe|section|small|output|div|dir|em|frameset|layer|figure|datalist|frame|head|hgroup|meta|video|meter|summary|!DOCTYPE|rt|kbd|canvas|rp|sub|ul|tbody|bdo|aside|label|basefont|html|nav|details|sup|progress|samp|math|body|map|object|ins|acronym|marquee|figcaption|xml|base|br|address|article|strong|embed|a|ol|center|textarea|footer|i|svg|script|q|caption|s|command|menu|title|audio|col|main|template)\\b</string>\r\n\t\t\t<key>name</key>\r\n\t\t\t<string>entity.name.tag support.zen.html.element.#30d556d8518a11e195e7b482fe507f0e</string>\r\n\t\t</dict>\r\n\t\t<key>id</key>\r\n\t\t<dict>\r\n\t\t\t<key>match</key>\r\n\t\t\t<string>#[a-zA-Z-_]+</string>\r\n\t\t\t<key>name</key>\r\n\t\t\t<string>entity.id.#30d556e5518a11e1a0d0b482fe507f0e</string>\r\n\t\t</dict>\r\n\t\t<key>operator</key>\r\n\t\t<dict>\r\n\t\t\t<key>match</key>\r\n\t\t\t<string>&gt;|\\*|\\+|:|\\^</string>\r\n\t\t\t<key>name</key>\r\n\t\t\t<string>keyword.#30d556e1518a11e1983ab482fe507f0e</string>\r\n\t\t</dict>\r\n\t\t<key>repeat_quantifier</key>\r\n\t\t<dict>\r\n\t\t\t<key>match</key>\r\n\t\t\t<string>\\d</string>\r\n\t\t\t<key>name</key>\r\n\t\t\t<string>keyword.quantifier.#30d556e3518a11e18aefb482fe507f0e</string>\r\n\t\t</dict>\r\n\t\t<key>repeater</key>\r\n\t\t<dict>\r\n\t\t\t<key>match</key>\r\n\t\t\t<string>\\$</string>\r\n\t\t\t<key>name</key>\r\n\t\t\t<string>keyword.repeater.#30d556e2518a11e18320b482fe507f0e</string>\r\n\t\t</dict>\r\n\t\t<key>single-string</key>\r\n\t\t<dict>\r\n\t\t\t<key>begin</key>\r\n\t\t\t<string>'</string>\r\n\t\t\t<key>beginCaptures</key>\r\n\t\t\t<dict>\r\n\t\t\t\t<key>0</key>\r\n\t\t\t\t<dict>\r\n\t\t\t\t\t<key>name</key>\r\n\t\t\t\t\t<string>punctuation.definition.begin.#30d556ea518a11e1baedb482fe507f0e</string>\r\n\t\t\t\t</dict>\r\n\t\t\t</dict>\r\n\t\t\t<key>end</key>\r\n\t\t\t<string>'</string>\r\n\t\t\t<key>endCaptures</key>\r\n\t\t\t<dict>\r\n\t\t\t\t<key>0</key>\r\n\t\t\t\t<dict>\r\n\t\t\t\t\t<key>name</key>\r\n\t\t\t\t\t<string>punctuation.definition.end.#30d556eb518a11e19d9ab482fe507f0e</string>\r\n\t\t\t\t</dict>\r\n\t\t\t</dict>\r\n\t\t\t<key>name</key>\r\n\t\t\t<string>string.quoted.single.#30d556e9518a11e190e7b482fe507f0e</string>\r\n\t\t\t<key>patterns</key>\r\n\t\t\t<array>\r\n\t\t\t</array>\r\n\t\t</dict>\r\n\t</dict>\r\n\t<key>scopeName</key>\r\n\t<string>source.zen.5a454e6772616d6d6172</string>\r\n\t<key>uuid</key>\r\n\t<string>ffb80ea1-4cf0-11e1-b0dc-b482fe507f0e</string>\r\n</dict>\r\n</plist>"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.08984375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2012 Sergey Chikuyonok <serge.che@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of \nthis software and associated documentation files (the \"Software\"), to deal in the \nSoftware without restriction, including without limitation the rights to use, \ncopy, modify, merge, publish, distribute, sublicense, and/or sell copies of the \nSoftware, and to permit persons to whom the Software is furnished to do so, \nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all \ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS \nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR \nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN \nAN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION \nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
        },
        {
          "name": "Main.sublime-menu",
          "type": "blob",
          "size": 3.7607421875,
          "content": "[\n    {\n        \"caption\": \"Preferences\",\n        \"mnemonic\": \"n\",\n        \"id\": \"preferences\",\n        \"children\":\n        [\n            {\n                \"caption\": \"Package Settings\",\n                \"mnemonic\": \"P\",\n                \"id\": \"package-settings\",\n                \"children\":\n                [\n                    {\n                        \"caption\": \"Emmet\",\n                        \"children\":\n                        [\n                            {\n                                \"command\": \"open_file\", \"args\":\n                                {\n                                    \"file\": \"${packages}/Emmet/Emmet.sublime-settings\"\n                                },\n                                \"caption\": \"Settings – Default\"\n                            },\n                            {\n                                \"command\": \"open_file\", \"args\":\n                                {\n                                    \"file\": \"${packages}/User/Emmet.sublime-settings\"\n                                },\n                                \"caption\": \"Settings – User\"\n                            },\n                            { \"caption\": \"-\" },\n                            { \"caption\": \"-\" },\n                            {\n                                \"command\": \"open_file\",\n                                \"args\": {\n                                    \"file\": \"${packages}/Emmet/Default (OSX).sublime-keymap\",\n                                    \"platform\": \"OSX\"\n                                },\n                                \"caption\": \"Key Bindings – Default\"\n                            },\n                            {\n                                \"command\": \"open_file\",\n                                \"args\": {\n                                    \"file\": \"${packages}/Emmet/Default (Linux).sublime-keymap\",\n                                    \"platform\": \"Linux\"\n                                },\n                                \"caption\": \"Key Bindings – Default\"\n                            },\n                            {\n                                \"command\": \"open_file\",\n                                \"args\": {\n                                    \"file\": \"${packages}/Emmet/Default (Windows).sublime-keymap\",\n                                    \"platform\": \"Windows\"\n                                },\n                                \"caption\": \"Key Bindings – Default\"\n                            },\n                            {\n                                \"command\": \"open_file\",\n                                \"args\": {\n                                    \"file\": \"${packages}/User/Default (OSX).sublime-keymap\",\n                                    \"platform\": \"OSX\"\n                                },\n                                \"caption\": \"Key Bindings – User\"\n                            },\n                            {\n                                \"command\": \"open_file\",\n                                \"args\": {\n                                    \"file\": \"${packages}/User/Default (Linux).sublime-keymap\",\n                                    \"platform\": \"Linux\"\n                                },\n                                \"caption\": \"Key Bindings – User\"\n                            },\n                            {\n                                \"command\": \"open_file\",\n                                \"args\": {\n                                    \"file\": \"${packages}/User/Default (Windows).sublime-keymap\",\n                                    \"platform\": \"Windows\"\n                                },\n                                \"caption\": \"Key Bindings – User\"\n                            },\n                            { \"caption\": \"-\" }\n                        ]\n                    }\n                ]\n            }\n        ]\n    }\n]\n"
        },
        {
          "name": "Preferences.sublime-settings",
          "type": "blob",
          "size": 1.1865234375,
          "content": "{\n    // ---------------------------  README -----------------------------------\n    //  Copy these key/values to User/Preferences.sublime-settings\n    //  They have NO effect here\n\n    // If `true` will disable bindings like ctrl+alt+n etc\n    // Handy for our italian friends :)\n    \"alt_gr\": false,\n\n    // If `true` will insert id=\"$1\" snippet on pressing '#', similar on '.'\n    // Useful for `raw html`, but annoying for some templating langs.\n    \"auto_id_class\": false,\n\n    // disable expanding abbreviation by Tab key\n    \"disable_tab_abbreviations\": false,\n\n    // disable insertion of formatted linebreak when\n    // Enter key is pressed between opening and closing HTML tags\n    \"disable_formatted_linebreak\": false,\n\n    // Enables default Emmet keymap. Many users complain that Emmet actions\n    // (especially ones that bound to Alt key) behave incorrectly in \n    // non-English keyboard layouts. Set this setting to `false` in\n    // Users’s Preferences.sublime-settings to disable all default\n    // keybindings at once\n    \"enable_emmet_keymap\": true,\n\n    // disable expanding abbreviation by Tab key when autocomplete popup is visible\n    \"disable_tab_abbreviations_on_auto_complete\": true\n}"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.38671875,
          "content": "# This plugin is deprecated and no longer maintained, please use [new version](http://github.com/emmetio/sublime-text-plugin).\n---\n\n# Emmet for Sublime Text\n\nOfficial [Emmet](http://emmet.io) plugin for Sublime Text.\n\n* [How to install](#how-to-install)\n* [Available actions](#available-actions)\n* [Extensions support](#extensions-support)\n* [Overriding keyboard shortcuts](#overriding-keyboard-shortcuts)\n* [How to expand abbreviatoins with Tab key in other syntaxes](#how-to-expand-abbreviations-with-tab-in-other-syntaxes)\n* [Notes about Tab key handler](#tab-key-handler)\n\n## How to install\n\n*Warning:* this plugin may not work at all in some OSes since it written in JavaScript and uses [PyV8](http://code.google.com/p/pyv8/) and [Google V8](https://developers.google.com/v8/) binaries to run. If you experience problems or editor crashes please [fill an issue](https://github.com/sergeche/emmet-sublime/issues).\n\nWith [Package Control](http://wbond.net/sublime_packages/package_control):\n\n1. Run “Package Control: Install Package” command, find and install `Emmet` plugin.\n2. Restart ST editor (if required)\n\nManually:\n\n1. Clone or [download](https://github.com/sergeche/emmet-sublime/archive/master.zip) git repo into your packages folder (in ST, find Browse Packages... menu item to open this folder)\n2. Restart ST editor (if required)\n\n--------------\n\n**WARNING**: When plugin is installed, it will automatically download required PyV8 binary so you have to wait a bit (see _Loading PyV8 binary_ message on status bar). If you experience issues with automatic PyV8 loader, try to [install it manually](https://github.com/emmetio/pyv8-binaries).\n\n## Available actions ##\n\n* [Expand Abbreviation](http://docs.emmet.io/actions/expand-abbreviation/) – <kbd>Tab</kbd> or <kbd>Ctrl+E</kbd>\n* Interactive “Expand Abbreviation” — <kbd>Ctrl+Alt+Enter</kbd>\n* [Match Tag Pair Outward](http://docs.emmet.io/actions/match-pair/) – <kbd>⌃D</kbd> (Mac) / <kbd>Ctrl+,</kbd> (PC)\n* [Match Tag Pair Inward](http://docs.emmet.io/actions/match-pair/) – <kbd>⌃J</kbd> / <kbd>Shift+Ctrl+0</kbd>\n* [Go to Matching Pair](http://docs.emmet.io/actions/go-to-pair/) – <kbd>⇧⌃T</kbd> / <kbd>Ctrl+Alt+J</kbd>\n* [Wrap With Abbreviation](http://docs.emmet.io/actions/wrap-with-abbreviation/) — <kbd>⌃W</kbd> / <kbd>Shift+Ctrl+G</kbd>\n* [Go to Edit Point](http://docs.emmet.io/actions/go-to-edit-point/) — <kbd>Ctrl+Alt+→</kbd> or <kbd>Ctrl+Alt+←</kbd>\n* [Select Item](http://docs.emmet.io/actions/select-item/) – <kbd>⇧⌘.</kbd> or <kbd>⇧⌘,</kbd> / <kbd>Shift+Ctrl+.</kbd> or <kbd>Shift+Ctrl+,</kbd>\n* [Toggle Comment](http://docs.emmet.io/actions/toggle-comment/) — <kbd>⇧⌥/</kbd> / <kbd>Shift+Ctrl+/</kbd>\n* [Split/Join Tag](http://docs.emmet.io/actions/split-join-tag/) — <kbd>⇧⌘'</kbd> / <kbd>Shift+Ctrl+`</kbd>\n* [Remove Tag](http://docs.emmet.io/actions/remove-tag/) – <kbd>⌘'</kbd> / <kbd>Shift+Ctrl+;</kbd>\n* [Update Image Size](http://docs.emmet.io/actions/update-image-size/) — <kbd>⇧⌃I</kbd> / <kbd>Ctrl+U</kbd>\n* [Evaluate Math Expression](http://docs.emmet.io/actions/evaluate-math/) — <kbd>⇧⌘Y</kbd> / <kbd>Shift+Ctrl+Y</kbd>\n* [Reflect CSS Value](http://docs.emmet.io/actions/reflect-css-value/) – <kbd>⇧⌘R</kbd> / <kbd>Shift+Ctrl+R</kbd>\n* [Encode/Decode Image to data:URL](http://docs.emmet.io/actions/base64/) – <kbd>⇧⌃D</kbd> / <kbd>Ctrl+'</kbd>\n* Rename Tag – <kbd>⇧⌘K</kbd> / <kbd>Shift+Ctrl+'</kbd>\n\n[Increment/Decrement Number](http://docs.emmet.io/actions/inc-dec-number/) actions:\n\n* Increment by 1: <kbd>Ctrl+↑</kbd>\n* Decrement by 1: <kbd>Ctrl+↓</kbd>\n* Increment by 0.1: <kbd>Alt+↑</kbd>\n* Decrement by 0.1: <kbd>Alt+↓</kbd>\n* Increment by 10: <kbd>⌥⌘↑</kbd> / <kbd>Shift+Alt+↑</kbd>\n* Decrement by 10: <kbd>⌥⌘↓</kbd> / <kbd>Shift+Alt+↓</kbd>\n\n## Extensions support ##\n\nYou can easily [extend](http://docs.emmet.io/customization/) Emmet with new actions and filters or customize existing ones. In `Emmet.sublime-settings`, define `extensions_path` setting and Emmet will load all `.js` and `.json` files in specified folder at startup.\n\nThe default value of `extensions_path` is `~/emmet`, which points to _emmet_ folder inside your OS user’s home folder.\n\nAlso, you can create sections named as extension files (e.g. `snippets`, `preferences` and `syntaxProfiles`) inside user’s `Emmet.sublime-settings` file and write your customizations there. See [original settings file](https://github.com/sergeche/emmet-sublime/blob/master/Emmet.sublime-settings#L61) for examples.\n\n## Overriding keyboard shortcuts ##\n\nSublime Text is a great text editor with lots of features and actions. Most of these actions are bound to keyboard shortcuts so it’s nearly impossible to provide convenient plugin shortcuts for third-party plugins.\n\nIf you’re unhappy with default keymap, you can disable individual keyboard shortcuts with `disabled_keymap_actions` preference of `Emmet.sublime-settings` file.\n\nUse a comma-separated list of action names which default keyboard shortcuts should be disabled. For example, if you want to release <kbd>Ctrl+E</kbd> (“Expand Abbreviation”) and <kbd>Ctrl+U</kbd> (“Update Image Size”) shortcuts, your must set the following value:\n\n    \"disabled_keymap_actions\": \"expand_abbreviation, update_image_size\"\n\nYou should refer `Default (Your-OS-Name).sublime-keymap` file to get action ids (look for `args/action` key).\n\nTo disable all default shortcuts, set value to `all`:\n    \n    \"disabled_keymap_actions\": \"all\"\n\nNot that if you disabled any action like so and you’re create your own keyboard shortcut, you **should not** use `emmet_action_enabled.ACTION_NAME` context since this is the key that disables action.\n\n## How to expand abbreviations with Tab in other syntaxes\n\nEmmet expands abbreviations in limited syntaxes only: HTML, CSS, LESS, SCSS, Stylus and PostCSS. The reason to restrict Tab handler to a limited syntax list is because it breaks native Sublime Text snippets. \n\nIf you want to abbreviation with Tab in other syntaxes (for example, JSX, HAML etc.) you have to tweak your [keyboard shorcuts settings](http://sublime-text-unofficial-documentation.readthedocs.org/en/sublime-text-2/reference/key_bindings.html): add `expand_abbreviation_by_tab` command for `tab` key for required syntax *scope selectors*. To get current syntax scope selector, press <kbd>⇧⌃P</kbd> (OSX) or <kbd>Ctrl+Alt+Shift+P</kbd>, it will be displayed in editor status bar.\n\nGo to `Preferences` > `Key Bindings — User` and insert the following JSON snippet with properly configured scope selector instead of `SCOPE_SELECTOR` token:\n\n```js\n{\n  \"keys\": [\"tab\"], \n  \"command\": \"expand_abbreviation_by_tab\", \n\n  // put comma-separated syntax selectors for which \n  // you want to expandEmmet abbreviations into \"operand\" key \n  // instead of SCOPE_SELECTOR.\n  // Examples: source.js, text.html - source\n  \"context\": [\n    {\n      \"operand\": \"SCOPE_SELECTOR\", \n      \"operator\": \"equal\", \n      \"match_all\": true, \n      \"key\": \"selector\"\n    }, \n\n    // run only if there's no selected text\n    {\n      \"match_all\": true, \n      \"key\": \"selection_empty\"\n    },\n\n    // don't work if there are active tabstops\n    {\n      \"operator\": \"equal\", \n      \"operand\": false, \n      \"match_all\": true, \n      \"key\": \"has_next_field\"\n    }, \n\n    // don't work if completion popup is visible and you\n    // want to insert completion with Tab. If you want to\n    // expand Emmet with Tab even if popup is visible -- \n    // remove this section\n    {\n      \"operand\": false, \n      \"operator\": \"equal\", \n      \"match_all\": true, \n      \"key\": \"auto_complete_visible\"\n    }, \n    {\n      \"match_all\": true, \n      \"key\": \"is_abbreviation\"\n    }\n  ]\n}\n```\n\n### Tab key handler ###\n\nEmmet plugin allows you to expand abbreviations with <kbd>Tab</kbd> key, just like regular snippets. On the other hand, due to dynamic nature and extensive syntax, sometimes you may get unexpected results. This section describes how Tab handler works and how you can fine-tune it.\n\nBy default, Tab handler works in a limited _syntax scopes_: HTML, XML, HAML, CSS, SASS/SCSS, LESS, PostCSS and _strings in programming languages_ (like JavaScript, Python, Ruby etc.). It means:\n\n* You have to switch your document to one of the syntaxes listed above to expand abbreviations by Tab key.\n* With <kbd>Ctrl-E</kbd> shortcut, you can expand abbreviations everywhere, its scope is not limited.\n* When you expand abbreviation inside strings of programming languages, the output is generated with special [output profile](http://docs.emmet.io/customization/syntax-profiles/) named `line` that generates output as a single line.\n\nTo fine-tune Tab key handler, you can use the following settings in user’s `Emmet.sublime-settings` file:\n\n* `disable_tab_abbreviations_for_scopes` — a comma-separated list of syntax scopes where Tab key handler should be disabled. For example, if you want disable handler inside strings of programming languages and HAML syntax, your setting will look like this: \n\n```json\n\"disable_tab_abbreviations_for_scopes\": \"text.haml, string\"\n```\n\n* `disabled_single_snippet_for_scopes` — a comma-separated list of syntax scopes where Tab handler should be disabled when expanding a single abbreviation. Currently, ST doesn’t provide API for getting list of native snippets. So, for example, if you try to expand a `php` abbreviation, it will be passed to Emmet which outputs `<php></php>` instead of PHP block as defined in native ST snippets. As a workaround, if you’re trying to expand a single abbreviation inside scope defined in `disabled_single_snippet_for_scopes` setting Emmet will look for its name inside its own [snippets catalog](http://docs.emmet.io/cheat-sheet/) first, inside `known_html_tags` setting second and if it’s not found, it allows ST to handle it and expand native abbreviation, if matched.\n* `known_html_tags` — a space-separated list of all known HTML tags used for lookup as described above.\n\nIf you’re unhappy with Emmet tab handler behavior, you can disable it: just add `\"disable_tab_abbreviations\": true` into user’s `Preferences.sublime-settings` file.\n\n## Disable automatic vendor prefixes insertion\nIf your workflow already includes an automated task for CSS vendor prefixing (such as [Autoprefixer](https://github.com/postcss/autoprefixer)), you can disable Emmet's automatic vendor prefixes insertion adding this option to your user’s `Emmet.sublime-settings` file:\n```json\n{\n  \"preferences\": {\n    \"css.autoInsertVendorPrefixes\": false\n  }\n}\n```\n"
        },
        {
          "name": "editor.js",
          "type": "blob",
          "size": 9.4375,
          "content": "var _completions = {};\n\n// some caching data used during action sessions\n// make sure to call pyResetCache() before each new function call\nvar __cache = {};\n\nvar editorUtils = emmet.utils.editor;\nvar actionUtils = emmet.utils.action;\nvar range = emmet.require('assets/range.js');\nvar tabStops = emmet.tabStops;\nvar utils = emmet.utils.common;\nvar htmlMatcher = emmet.htmlMatcher;\nvar resources = emmet.resources;\nvar cssResolver = emmet.require('resolver/css.js');\nvar abbreviationParser = emmet.require('parser/abbreviation.js');\nvar expandAbbreviationAction = emmet.require('action/expandAbbreviation.js');\nvar updateTagAction = emmet.require('action/updateTag.js');\n\nfunction activeView() {\n\treturn sublime.active_window().active_view();\n}\n\nvar editorProxy = {\n\tgetSelectionRange: function() {\n\t\tvar view = activeView();\n\t\tvar sel = view.sel()[0];\n\t\treturn {\n\t\t\tstart: sel.begin(),\n\t\t\tend: sel.end()\n\t\t};\n\t},\n\n\tcreateSelection: function(start, end) {\n\t\tvar view = activeView();\n\t\tview.sel().clear();\n\n\t\tview.sel().add(new sublime.Region(start, end || start));\n\t\tview.show(view.sel());\n\t},\n\n\tgetCurrentLineRange: function() {\n\t\tvar view = activeView();\n\t\tvar selection = view.sel()[0];\n\t\tvar line = view.line(selection);\n\t\treturn {\n\t\t\tstart: line.begin(),\n\t\t\tend: line.end()\n\t\t};\n\t},\n\n\tgetCaretPos: function() {\n\t\tvar view = activeView();\n\t\tvar sel = view.sel();\n\t\treturn sel && sel[0] ? sel[0].begin() : 0;\n\t},\n\n\tsetCaretPos: function(pos){\n\t\tthis.createSelection(pos, pos);\n\t},\n\n\tgetCurrentLine: function() {\n\t\tvar view = activeView();\n\t\treturn view.substr(view.line(view.sel()[0]));\n\t},\n\n\treplaceContent: function(value, start, end, noIndent) {\n\t\tif (typeof end === 'undefined')\n\t\t\tend = typeof start === 'undefined' ? this.getContent().length : start;\n\t\tif (typeof start === 'undefined') start = 0;\n\n\t\t// update tabstops: make sure all caret placeholder are unique\n\t\t// by default, abbreviation parser generates all unlinked (un-mirrored)\n\t\t// tabstops as ${0}, so we have upgrade all caret tabstops with unique\n\t\t// positions but make sure that all other tabstops are not linked accidentally\n\t\tvalue = pyPreprocessText(value);\n\t\tvalue = editorUtils.normalize(value);\n\t\tsublimeReplaceSubstring(start, end, value, !!noIndent);\n\t},\n\n\tgetContent: function() {\n\t\tvar view = activeView();\n\t\treturn view.substr(new sublime.Region(0, view.size()));\n\t},\n\n\tgetSyntax: function() {\n\t\treturn pyGetSyntax();\n\t},\n\n\tgetProfileName: function() {\n\t\tvar view = activeView();\n\t\tvar pos = this.getCaretPos();\n\n\t\tvar m = function(sel) {\n\t\t\treturn view.match_selector(pos, sel);\n\t\t}\n\n\t\tif (m('text.html') && sublimeGetOption('autodetect_xhtml', false) && actionUtils.isXHTML(this)) {\n\t\t\treturn 'xhtml';\n\t\t}\n\n\t\tif (m('string.quoted.double.block.python')\n\t\t\t|| m('source.coffee string')\n\t\t\t|| (m('source.php string') && !sublimeGetOption('php_single_line'))\n\t\t\t|| m('string.unquoted.heredoc')) {\n\t\t\t// use html's default profile for:\n\t\t\t// * Python's multiline block\n\t\t\t// * CoffeeScript string\n\t\t\t// * PHP heredoc\n\t\t\treturn pyDetectProfile();\n\t\t}\n\n\t\tif (m('source string')) {\n\t\t\treturn 'line';\n\t\t}\n\n\t\treturn pyDetectProfile();\n\t},\n\n\tprompt: function(title) {\n\t\treturn pyEditor.prompt();\n\t},\n\n\tgetSelection: function() {\n\t\tvar view = activeView();\n\t\treturn view.sel() ? view.substr(view.sel()[0]) : '';\n\t},\n\n\tgetFilePath: function() {\n\t\treturn activeView().file_name();\n\t}\n};\n\nfunction pyPreprocessText(value) {\n\tvar base = 1000;\n\tvar zeroBase = 0;\n\tvar lastZero = null;\n\n\tvar tabstopOptions = {\n\t\ttabstop: function(data) {\n\t\t\tvar group = parseInt(data.group, 10);\n\t\t\tvar isZero = group === 0;\n\t\t\tif (isZero)\n\t\t\t\tgroup = ++zeroBase;\n\t\t\telse\n\t\t\t\tgroup += base;\n\n\t\t\tvar placeholder = data.placeholder;\n\t\t\tif (placeholder) {\n\t\t\t\t// recursively update nested tabstops\n\t\t\t\tplaceholder = tabStops.processText(placeholder, tabstopOptions);\n\t\t\t}\n\n\t\t\tvar result = '${' + group + (placeholder ? ':' + placeholder : '') + '}';\n\n\t\t\tif (isZero) {\n\t\t\t\tlastZero = range.create(data.start, result);\n\t\t\t}\n\n\t\t\treturn result\n\t\t},\n\t\tescape: function(ch) {\n\t\t\tif (ch == '$') {\n\t\t\t\treturn '\\\\$';\n\t\t\t}\n\n\t\t\tif (ch == '\\\\') {\n\t\t\t\treturn '\\\\\\\\';\n\t\t\t}\n \n\t\t\treturn ch;\n\t\t}\n\t};\n\n\tvalue = tabStops.processText(value, tabstopOptions);\n\n\tif (sublimeGetOption('insert_final_tabstop', false) && !/\\$\\{0\\}$/.test(value)) {\n\t\tvalue += '${0}';\n\t} else if (lastZero) {\n\t\tvalue = utils.replaceSubstring(value, '${0}', lastZero);\n\t}\n\t\n\treturn value;\n}\n\nfunction pyExpandAsYouType(abbr, options) {\n\toptions = options || {};\n\tvar ix = (options.index || 0);\n\tvar cacheKey = 'expandParams' + ix;\n\tif (!(cacheKey in __cache)) {\n\t\tvar capturePos = options.selectedRange \n\t\t\t? options.selectedRange.begin() \n\t\t\t: editorProxy.getCaretPos();\n\n\t\t__cache[cacheKey] = {\n\t\t\tsyntax: editorProxy.getSyntax(), \n\t\t\tprofile: editorProxy.getProfileName() || null,\n\t\t\tcounter: ix + 1,\n\t\t\tcontextNode: actionUtils.captureContext(editorProxy, capturePos)\n\t\t};\n\n\t\tif (options.selectedContent) {\n\t\t\t__cache[cacheKey].pastedContent = utils.escapeText(options.selectedContent);\n\t\t}\n\t}\n\n\ttry {\n\t\tvar result = abbreviationParser.expand(abbr, __cache[cacheKey]);\n\t\treturn pyPreprocessText(result);\n\t} catch(e) {\n\t\treturn '';\n\t}\n}\n\nfunction pyUpdateAsYouType(abbr, options) {\n\toptions = options || {};\n\tvar ix = (options.index || 0);\n\tvar cacheKey = 'updateParams' + ix;\n\tif (!(cacheKey in __cache)) {\n\t\tvar capturePos = options.selectedRange \n\t\t\t? options.selectedRange.begin() \n\t\t\t: editorProxy.getCaretPos();\n\n\t\t__cache[cacheKey] = {\n\t\t\tcounter: ix + 1,\n\t\t\tcontent: editorProxy.getContent(),\n\t\t\tctx: actionUtils.captureContext(editorProxy, capturePos)\n\t\t};\n\t}\n\n\t// try {\n\t\tvar cache = __cache[cacheKey];\n\t\tif (!cache.ctx) {\n\t\t\treturn null;\n\t\t}\n\n\t\tvar tag = updateTagAction.getUpdatedTag(abbr, cache.ctx, cache.content, {\n\t\t\tcounter: cache.counter\n\t\t});\n\n\t\tif (!tag) {\n\t\t\treturn null;\n\t\t}\n\n\t\tvar out = [{\n\t\t\tstart: cache.ctx.match.open.range.start, \n\t\t\tend: cache.ctx.match.open.range.end,\n\t\t\tcontent: tag.source\n\t\t}];\n\n\t\tif (tag.name() != cache.ctx.name && cache.ctx.match.close) {\n\t\t\tout.unshift({\n\t\t\t\tstart: cache.ctx.match.close.range.start, \n\t\t\t\tend: cache.ctx.match.close.range.end,\n\t\t\t\tcontent: '</' + tag.name() + '>'\n\t\t\t});\n\t\t}\n\n\t\treturn out;\n\t// } catch(e) {\n\t// \tconsole.log(e);\n\t// \treturn null;\n\t// }\n}\n\nfunction pyCaptureWrappingRange() {\n\tvar info = editorUtils.outputInfo(editorProxy);\n\tvar range = editorProxy.getSelectionRange();\n\tvar startOffset = range.start;\n\tvar endOffset = range.end;\n\t\n\tif (startOffset == endOffset) {\n\t\t// no selection, find tag pair\n\t\tvar match = htmlMatcher.find(info.content, startOffset);\n\t\tif (!match) {\n\t\t\t// nothing to wrap\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\tvar narrowedSel = utils.narrowToNonSpace(info.content, match.range);\n\t\tstartOffset = narrowedSel.start;\n\t\tendOffset = narrowedSel.end;\n\t}\n\n\treturn [startOffset, endOffset];\n}\n\nfunction pyGetTagNameRanges(pos) {\n\tvar ranges = [];\n\tvar info = editorUtils.outputInfo(editorProxy);\n\t\t\n\t// search for tag\n\ttry {\n\t\tvar tag = htmlMatcher.tag(info.content, pos);\n\t\tif (tag) {\n\t\t\tvar open = tag.open.range;\n\t\t\tvar tagName = /^<([\\w\\-\\:]+)/i.exec(open.substring(info.content))[1];\n\t\t\tranges.push([open.start + 1, open.start + 1 + tagName.length]);\n\n\t\t\tif (tag.close) {\n\t\t\t\tranges.push([tag.close.range.start + 2, tag.close.range.start + 2 + tagName.length]);\n\t\t\t}\n\t\t}\n\t} catch (e) {}\n\n\treturn ranges;\n}\n\nfunction pyGetTagRanges() {\n\tvar ranges = [];\n\tvar info = editorUtils.outputInfo(editorProxy);\n\t\t\n\t// search for tag\n\ttry {\n\t\tvar tag = htmlMatcher.tag(info.content, editorProxy.getCaretPos());\n\t\tif (tag) {\n\t\t\tranges.push(tag.open.range.toArray());\n\t\t\tif (tag.close) {\n\t\t\t\tranges.push(tag.close.range.toArray());\n\t\t\t}\n\t\t}\n\t} catch (e) {}\n\n\treturn ranges;\n}\n\nfunction pyExtractAbbreviation() {\n\treturn expandAbbreviationAction.findAbbreviation(editorProxy);\n}\n\nfunction pyHasSnippet(name) {\n\treturn !!resources.findSnippet(editorProxy.getSyntax(), name);\n}\n\n/**\n * Get all available CSS completions. This method is optimized for CSS\n * only since it should contain snippets only so it's not required\n * to do extra parsing\n */\nfunction pyGetCSSCompletions(dialect) {\n\tdialect = dialect || pyGetSyntax();\n\n\tif (!_completions[dialect]) {\n\t\tvar all = resources.getAllSnippets(dialect);\n\t\t_completions[dialect] = Object.keys(all).map(function(k) {\n\t\t\tvar v = all[k];\n\t\t\tvar snippetValue = typeof v.parsedValue == 'object' \n\t\t\t\t? v.parsedValue.data\n\t\t\t\t: v.value;\n\t\t\tvar snippet = cssResolver.transformSnippet(snippetValue, false, dialect);\n\t\t\treturn {\n\t\t\t\tk: v.nk,\n\t\t\t\tlabel: snippet.replace(/\\:\\s*\\$\\{0\\}\\s*;?$/, ''),\n\t\t\t\tv: cssResolver.expandToSnippet(v.nk, dialect)\n\t\t\t};\n\t\t});\n\t}\n\n\treturn _completions[dialect];\n}\n\n/**\n * Returns current syntax name\n * @return {String}\n */\nfunction pyGetSyntax() {\n\tvar view = activeView();\n\tvar pt = view.sel()[0].begin();\n\tvar scope = 'scope_name' in view ? view.scope_name(pt) : view.syntax_name(pt);\n\n\tif (~scope.indexOf('xsl')) {\n\t\treturn 'xsl';\n\t}\n\n\tif (!/\\bstring\\b/.test(scope) && /\\bsource\\.jsx?\\b/.test(scope)) {\n\t\treturn 'jsx';\n\t}\n\n\tvar syntax = 'html';\n\n\tif (!/\\bstring\\b/.test(scope) && /\\bsource\\.([\\w\\-]+)/.test(scope) && resources.hasSyntax(RegExp.$1)) {\n\t\tsyntax = RegExp.$1;\n\t} else if (/\\b(less|scss|sass|css|stylus|postcss)\\b/.test(scope)) {\n\t\t// detect CSS-like syntaxes independently,\n\t\t// since it may cause collisions with some highlighters\n\t\tsyntax = RegExp.$1;\n\n\t\tif (syntax === 'postcss') {\n\t\t\tsyntax = 'css';\n\t\t}\n\t} else if (/\\b(html|xml|haml|slim|jade|pug)\\b/.test(scope)) {\n\t\tsyntax = RegExp.$1;\n\t}\n\n\treturn actionUtils.detectSyntax(editorProxy, syntax);\n}\n\nfunction pyDetectProfile(syntax) {\n\treturn actionUtils.detectProfile(editorProxy, syntax);\n}\n\nfunction pyResetCache() {\n\t__cache = {};\n}"
        },
        {
          "name": "emmet-plugin.py",
          "type": "blob",
          "size": 20.6845703125,
          "content": "import sublime\nimport sublime_plugin\n\nimport re\nimport imp\nimport json\nimport sys\nimport os.path\nimport traceback\n\nBASE_PATH = os.path.abspath(os.path.dirname(__file__))\nPACKAGES_PATH = sublime.packages_path() or os.path.dirname(BASE_PATH)\n# EMMET_GRAMMAR = os.path.join(BASE_PATH, 'Emmet.tmLanguage')\nEMMET_GRAMMAR = 'Packages/%s/Emmet.tmLanguage' % os.path.basename(BASE_PATH).replace('.sublime-package', '')\nsys.path += [BASE_PATH] + [os.path.join(BASE_PATH, f) for f in ['emmet_completions', 'emmet']]\n\n\n# Make sure all dependencies are reloaded on upgrade\nif 'emmet.reloader' in sys.modules:\n\timp.reload(sys.modules['emmet.reloader'])\nimport emmet.reloader\n\n# import completions as cmpl\nimport emmet.pyv8loader as pyv8loader\nimport emmet_completions as cmpl\nfrom emmet_completions.meta import HTML_ELEMENTS_ATTRIBUTES, HTML_ATTRIBUTES_VALUES\nfrom emmet.context import Context\nfrom emmet.context import js_file_reader as _js_file_reader\nfrom emmet.pyv8loader import LoaderDelegate\n\n__version__      = '1.2'\n__core_version__ = '1.1'\n__authors__      = ['\"Sergey Chikuyonok\" <serge.che@gmail.com>'\n\t\t\t\t\t'\"Nicholas Dudfield\" <ndudfield@gmail.com>']\n\nis_python3 = sys.version_info[0] > 2\n\n# JS context\nctx = None\n# Emmet Settings\nsettings = None\n\n# Default ST settings\nuser_settings = None\n\ndef is_st3():\n\treturn sublime.version()[0] == '3'\n\ndef js_file_reader(file_path, use_unicode=True):\n\tif hasattr(sublime, 'load_resource'):\n\t\trel_path = file_path\n\t\tfor prefix in [sublime.packages_path(), sublime.installed_packages_path()]:\n\t\t\tif rel_path.startswith(prefix):\n\t\t\t\trel_path = os.path.join('Packages', rel_path[len(prefix) + 1:])\n\t\t\t\tbreak\n\n\t\trel_path = rel_path.replace('.sublime-package', '')\n\t\t# for Windows we have to replace slashes\n\t\trel_path = rel_path.replace('\\\\', '/')\n\t\treturn sublime.load_resource(rel_path)\n\n\treturn _js_file_reader(file_path, use_unicode)\n\ndef init():\n\t\"Init Emmet plugin\"\n\t# load settings\n\tglobals()['user_settings'] = sublime.load_settings('Preferences.sublime-settings')\n\tglobals()['settings'] = sublime.load_settings('Emmet.sublime-settings')\n\tsettings.add_on_change('extensions_path', update_settings)\n\n\t# setup environment for PyV8 loading\n\tpyv8_paths = [\n\t\tos.path.join(PACKAGES_PATH, 'PyV8'),\n\t\tos.path.join(PACKAGES_PATH, 'PyV8', pyv8loader.get_arch()),\n\t\tos.path.join(PACKAGES_PATH, 'PyV8', 'pyv8-%s' % pyv8loader.get_arch())\n\t]\n\n\tsys.path += pyv8_paths\n\n\t# unpack recently loaded binary, is exists\n\tfor p in pyv8_paths:\n\t\tpyv8loader.unpack_pyv8(p)\n\t\n\t# provide some contributions to JS\n\tcontrib = {\n\t\t'sublime': sublime, \n\t\t'sublimeReplaceSubstring': replace_substring,\n\t\t'sublimeGetOption': settings.get\n\t}\n\n\t# create JS environment\n\tdelegate = SublimeLoaderDelegate()\n\tglobals()['ctx'] = Context(\n\t\tfiles=['../editor.js'], \n\t\text_path=get_extensions_path(), \n\t\tcontrib=contrib, \n\t\tlogger=delegate.log,\n\t\treader=js_file_reader\n\t)\n\n\tupdate_settings()\n\n\tif not settings.get('disable_pyv8_update', False):\n\t\tpyv8loader.load(pyv8_paths[1], delegate) \n\telse:\n\t\tprint('PyV8 auto-update is disabled')\n\n\tif settings.get('remove_html_completions', False):\n\t\tsublime.set_timeout(cmpl.remove_html_completions, 2000)\n\ndef get_extensions_path():\n\text_path = settings.get('extensions_path', None)\n\tif ext_path:\n\t\ttry:\n\t\t\tif not is_python3:\n\t\t\t\text_path = ext_path.decode('utf-8')\n\t\t\text_path = os.path.expanduser(ext_path)\n\t\t\tif not os.path.isabs(ext_path):\n\t\t\t\text_path = os.path.normpath(os.path.join(sublime.packages_path(), ext_path))\n\t\texcept Exception as e:\n\t\t\tprint('Unable to normalize extension path for Emmet: %s' % e)\n\t\t\text_path = None\n\treturn ext_path\n\nclass SublimeLoaderDelegate(LoaderDelegate):\n\tdef __init__(self, settings=None):\n\n\t\tif settings is None:\n\t\t\tsettings = {}\n\t\t\tfor k in ['http_proxy', 'https_proxy', 'timeout']:\n\t\t\t\tif user_settings.has(k):\n\t\t\t\t\tsettings[k] = user_settings.get(k, None)\n\n\t\tLoaderDelegate.__init__(self, settings)\n\t\tself.state = None\n\t\tself.message = 'Loading PyV8 binary, please wait'\n\t\tself.i = 0\n\t\tself.addend = 1\n\t\tself.size = 8\n\n\tdef on_start(self, *args, **kwargs):\n\t\tself.state = 'loading'\n\n\tdef on_progress(self, *args, **kwargs):\n\t\tif kwargs['progress'].is_background:\n\t\t\treturn\n\n\t\tbefore = self.i % self.size\n\t\tafter = (self.size - 1) - before\n\t\tmsg = '%s [%s=%s]' % (self.message, ' ' * before, ' ' * after)\n\t\tif not after:\n\t\t\tself.addend = -1\n\t\tif not before:\n\t\t\tself.addend = 1\n\t\tself.i += self.addend\n\n\t\tsublime.set_timeout(lambda: sublime.status_message(msg), 0)\n\n\tdef on_complete(self, *args, **kwargs):\n\t\tself.state = 'complete'\n\n\t\tif kwargs['progress'].is_background:\n\t\t\treturn\n\n\t\tsublime.set_timeout(lambda: sublime.status_message('PyV8 binary successfully loaded'), 0)\n\n\tdef on_error(self, exit_code=-1, progress=None):\n\t\tself.state = 'error'\n\t\tsublime.set_timeout(lambda: show_pyv8_error(exit_code), 0)\n\n\tdef setting(self, name, default=None):\n\t\t\"Returns specified setting name\"\n\t\treturn self.settings.get(name, default)\n\n\tdef log(self, message):\n\t\tprint('Emmet: %s' % message)\n\ndef show_pyv8_error(exit_code):\n\tif 'PyV8' not in sys.modules:\n\t\tsublime.error_message('Error while loading PyV8 binary: exit code %s \\nTry to manually install PyV8 from\\nhttps://github.com/emmetio/pyv8-binaries' % exit_code)\n\ndef active_view():\n\treturn sublime.active_window().active_view()\n\ndef check_context(verbose=False):\n\t\"Checks if JS context is completely available\"\n\tif not ctx.js():\n\t\tif verbose:\n\t\t\tsublime.message_dialog('Please wait a bit while PyV8 binary is being downloaded')\n\t\treturn False\n\n\treturn True\n\n\ndef replace_substring(start, end, value, no_indent=False):\n\tview = active_view()\n\n\tview.sel().clear()\n\tview.sel().add(sublime.Region(start, end or start)) \n\n\tif not is_python3:\n\t\tvalue = value.decode('utf-8')\n\n\t# XXX a bit naive indentation control. It handles most common\n\t# `no_indent` usages like replacing CSS rule content, but may not\n\t# produce expected result in all possible situations\n\n\tif no_indent:\n\t\tline = view.substr(view.line(view.sel()[0]))\n\t\tvalue = unindent_text(value, get_line_padding(line))\n\n\tview.run_command('insert_snippet', {'contents': value})\n\ndef unindent_text(text, pad):\n\t\"\"\"\n\tRemoves padding at the beginning of each text's line\n\t@type text: str\n\t@type pad: str\n\t\"\"\"\n\tlines = text.splitlines()\n\t\n\tfor i,line in enumerate(lines):\n\t\tif line.startswith(pad):\n\t\t\tlines[i] = line[len(pad):]\n\t\n\treturn '\\n'.join(lines)\n\ndef get_line_padding(line):\n\t\"\"\"\n\tReturns padding of current editor's line\n\t@return str\n\t\"\"\"\n\tm = re.match(r'^(\\s+)', line)\n\treturn m and m.group(0) or ''\n\ndef update_settings():\n\tctx.set_ext_path(get_extensions_path())\n\n\tkeys = ['snippets', 'preferences', 'syntaxProfiles', 'profiles']\n\tpayload = {}\n\tfor k in keys:\n\t\tdata = settings.get(k, None)\n\t\tif data:\n\t\t\tpayload[k] = data\n\n\tctx.reset()\n\tctx.load_user_data(json.dumps(payload))\n\tctx.js()\n\ndef get_scope(view, pt=-1):\n\tif pt == -1:\n\t\t# use current caret position\n\t\tpt = view.sel()[0].begin()\n\n\tif hasattr(view, 'scope_name'):\n\t\treturn view.scope_name(pt)\n\n\treturn view.syntax_name(pt)\n\ndef should_perform_action(name, view=None):\n\tif not view:\n\t\tview = active_view()\n\n\t# fallback to old check\n\tif not view.settings().get('enable_emmet_keymap', True):\n\t\treturn False\n\n\tdisabled_actions = settings.get('disabled_keymap_actions', '')\n\n\tif not disabled_actions: # no disabled actions\n\t\treturn True\n\n\tif disabled_actions == 'all': # disable all actions\n\t\treturn False\n\n\treturn name not in re.split(r'\\s*,\\s*', disabled_actions.strip())\n\ndef should_handle_tab_key(syntax=None):\n\tview = active_view()\n\tscopes = settings.get('disabled_single_snippet_for_scopes', None)\n\tcur_scope = get_scope(view)\n\n\n\tif sublime.score_selector(cur_scope, 'source.css'):\n\t\treturn True\n\n\twith ctx.js() as c:\n\t\tabbr = c.locals.pyExtractAbbreviation()\n\n\t\tdisabled_snippets = settings.get('disabled_single_snippets', '').split()\n\t\tif disabled_snippets and abbr in disabled_snippets:\n\t\t\treturn False\n\n\t\tif not re.match(r'^[\\w\\-\\:%]+$', abbr):\n\t\t\t# it's a complex expression\n\t\t\treturn True\n\n\t\tif re.match(r'^(lorem|lipsum)([a-z]{2})?\\d*$', abbr, re.I):\n\t\t\t# hardcoded Lorem Ipsum generator\n\t\t\treturn True\n\n\t\t# detect inline CSS\n\t\tif syntax is None:\n\t\t\tsyntax = c.locals.pyGetSyntax();\n\n\t\tif syntax == 'css':\n\t\t\treturn True\n\n\t\tknown_tags = settings.get('known_html_tags', '').split()\n\t\tif abbr in known_tags or c.locals.pyHasSnippet(abbr):\n\t\t\treturn True\n\n\t\tif not scopes or not sublime.score_selector(cur_scope, scopes):\n\t\t\treturn True\n\n\treturn False\n\ndef log(message):\n\tif settings.get('debug', False):\n\t\tprint('Emmet: %s' % message)\n\ndef action_factory(name):\n\tdef _action(i, sel):\n\t\t\twith ctx.js() as c:\n\t\t\t\treturn c.locals.pyRunAction(name)\n\treturn _action\n\nclass RunEmmetAction(sublime_plugin.TextCommand):\n\tdef run(self, edit, action=None, **kw):\n\t\trun_action(action_factory(action))\n\nclass ActionContextHandler(sublime_plugin.EventListener):\n\tdef on_query_context(self, view, key, op, operand, match_all):\n\t\tif not key.startswith('emmet_action_enabled.'):\n\t\t\treturn None\n\n\t\tprefix, name = key.split('.')\n\t\treturn should_perform_action(name, view)\n\ndef get_edit(view, edit_token=None):\n\tedit = None\n\ttry:\n\t\tedit = view.begin_edit()\n\texcept:\n\t\tpass\n\n\tif not edit and edit_token:\n\t\ttry:\n\t\t\tedit = view.begin_edit(edit_token, 'Emmet')\n\t\texcept Exception as e:\n\t\t\tpass\n\n\treturn edit\n\ndef run_action(action, view=None):\n\tif not check_context(True):\n\t\treturn\n\n\t\"Runs Emmet action in multiselection mode\"\n\tif not view:\n\t\tview = active_view()\n\n\tregion_key = '__emmet__'\n\tsels = list(view.sel())\n\tresult = False\n\n\t# edit = get_edit(view, edit_token)\n\tmax_sel_ix = len(sels) - 1\n\n\ttry:\n\t\tfor i, sel in enumerate(reversed(sels)):\n\t\t\tview.sel().clear()\n\t\t\tview.sel().add(sel)\n\t\t\t# run action\n\t\t\t# result = r(name) or result\n\t\t\tresult = action(max_sel_ix - i, sel) or result\n\n\t\t\t# remember resulting selections\n\t\t\tview.add_regions(region_key,\n\t\t\t\t\t(view.get_regions(region_key) + list(view.sel())) , '')\n\texcept Exception as e:\n\t\tview.erase_regions(region_key)\n\t\tprint(traceback.format_exc())\n\t\treturn\n\t\n\n\t# output all saved regions as selection\n\tview.sel().clear()\n\tfor sel in view.get_regions(region_key):\n\t\tview.sel().add(sel)\n\n\tview.erase_regions(region_key)\n\n\t# if edit:\n\t\t# view.end_edit(edit)\n\treturn result\n\nclass TabAndCompletionsHandler():\n\tdef correct_syntax(self, view, syntax='html'):\n\t\treturn syntax == 'html' and view.match_selector( view.sel()[0].b, cmpl.EMMET_SCOPE )\n\n\tdef completion_handler(self, view):\n\t\t\"Returns completions handler fo current caret position\"\n\t\tblack_list = settings.get('completions_blacklist', [])\n\n\t\t# A mapping of scopes, sub scopes and handlers, first matching of which\n\t\t# is used.\n\t\tCOMPLETIONS = (\n\t\t\t(cmpl.HTML_INSIDE_TAG, self.html_elements_attributes),\n\t\t\t(cmpl.HTML_INSIDE_TAG_ATTRIBUTE, self.html_attributes_values)\n\t\t)\n\n\t\tpos = view.sel()[0].b\n\n\t\t# Try to find some more specific contextual abbreviation\n\t\tfor sub_selector, handler in COMPLETIONS:\n\t\t\th_name = handler.__name__\n\t\t\tif not black_list or h_name in black_list: continue\n\t\t\tif (view.match_selector(pos,  sub_selector) or\n\t\t\t\t view.match_selector(pos - 1,  sub_selector)):\n\t\t\t\treturn handler\n\n\t\treturn None\n\n\tdef html_elements_attributes(self, view, prefix, pos):\n\t\ttag         = cmpl.find_tag_name(view, pos)\n\t\tvalues      = HTML_ELEMENTS_ATTRIBUTES.get(tag, [])\n\t\treturn [(v,   '%s\\t@%s' % (v,v), '%s=\"$1\"' % v) for v in values]\n\n\tdef html_attributes_values(self, view, prefix, pos):\n\t\tattr        = cmpl.find_attribute_name(view, pos)\n\t\tvalues      = HTML_ATTRIBUTES_VALUES.get(attr, [])\n\t\treturn [(v, '%s\\t@=%s' % (v,v), v) for v in values]\n\n\tdef expand_by_tab(self, view):\n\t\tif not check_context():\n\t\t\treturn False;\n\t\t\t\n\t\twith ctx.js() as c:\n\t\t\tsyntax = str(c.locals.pyGetSyntax());\n\t\t\n\t\tif not should_handle_tab_key(syntax):\n\t\t\treturn False\n\n\t\t# we need to filter out attribute completions if \n\t\t# 'disable_completions' option is not active\n\t\tif (not settings.get('disable_completions', False) and \n\t\t\tself.correct_syntax(view, syntax) and \n\t\t\tself.completion_handler(view)):\n\t\t\t\treturn None\n\n\t\tcaret_pos = view.sel()[0].begin()\n\t\tcur_scope = get_scope(view)\n\n\t\t# let's see if Tab key expander should be disabled for current scope\n\t\tbanned_scopes = settings.get('disable_tab_abbreviations_for_scopes', '')\n\t\tif banned_scopes and view.score_selector(caret_pos, banned_scopes):\n\t\t\treturn None\n\n\t\t# Sometimes ST2 matcher may incorrectly filter scope context,\n\t\t# check it against special regexp\n\t\tbanned_regexp = settings.get('disable_tab_abbreviations_for_regexp', None)\n\t\tif banned_regexp and re.search(banned_regexp, cur_scope):\n\t\t\treturn None\n\t\t\n\t\treturn run_action(action_factory('expand_abbreviation'))\n\t\t# view.run_command('run_emmet_action',\n\t\t# \t\t\t\t\t\t{'action':'expand_abbreviation'})\n\nclass ExpandAbbreviationByTab(sublime_plugin.TextCommand):\n\tdef run(self, edit, **kw):\n\t\tif settings.get('use_old_tab_handler', False):\n\t\t\treturn\n\t\t\t\n\t\tview = active_view()\n\t\th = TabAndCompletionsHandler()\n\t\tif not h.expand_by_tab(view):\n\t\t\t# try to mimic default Tab behaviour of Sublime Text\n\t\t\tview.run_command('insert_best_completion', {\n\t\t\t\t'default': '\\t',\n\t\t\t\t'exact': user_settings.get('tab_completion', True)\n\t\t\t})\n\n\nclass TabExpandHandler(sublime_plugin.EventListener):\n\tdef on_query_context(self, view, key, op, operand, match_all):\n\t\tif key != 'is_abbreviation':\n\t\t\treturn None\n\n\t\tif settings.get('use_old_tab_handler', False):\n\t\t\th = TabAndCompletionsHandler()\n\t\t\treturn h.expand_by_tab(view)\n\n\t\treturn check_context()\n\n\tdef on_query_completions(self, view, prefix, locations):\n\t\th = TabAndCompletionsHandler()\n\t\tif view.match_selector(locations[0], settings.get('css_completions_scope', '')) and check_context():\n\t\t\tl = []\n\t\t\tif settings.get('show_css_completions', False):\n\t\t\t\twith ctx.js() as c:\n\t\t\t\t\tcompletions = c.locals.pyGetCSSCompletions()\n\t\t\t\t\tif completions:\n\t\t\t\t\t\tfor p in completions:\n\t\t\t\t\t\t\tl.append(('%s\\t%s' % (p['k'], p['label']), p['v']))\n\n\t\t\tif not l:\n\t\t\t\treturn []\n\n\t\t\treturn (l, sublime.INHIBIT_WORD_COMPLETIONS | sublime.INHIBIT_EXPLICIT_COMPLETIONS)\n\n\t\tif not h.correct_syntax(view) or settings.get('disable_completions', False):\n\t\t\treturn []\n\n\t\thandler = h.completion_handler(view)\n\t\tif handler:\n\t\t\tpos = view.sel()[0].b\n\t\t\tcompletions = handler(view, prefix, pos)\n\t\t\treturn completions\n\n\t\treturn []\n\t\t\n\nclass CommandsAsYouTypeBase(sublime_plugin.TextCommand):\n\tinput_message         = \"Enter Input\"\n\tdefault_input         = \"\"\n\tprocess_panel_input   = lambda s, i: i.title()\n\n\t# Note that this must be of form `Packages/$Package/Emmet.tmLanguage` on ST3\n\t# NOT an absolute path!\n\tpanel_grammar         = EMMET_GRAMMAR\n\n\tdef is_enabled(self):\n\t\treturn True\n\n\tdef run_command(self, edit, view, processed_input):\n\t\tif '\\n' in processed_input:\n\t\t\tfor sel in view.sel():\n\t\t\t\ttrailing = sublime.Region(sel.end(), view.line(sel).end())\n\t\t\t\tif view.substr(trailing).isspace():\n\t\t\t\t\tview.erase(edit, trailing)\n\n\t\tif not is_python3:\n\t\t\tprocessed_input = processed_input.decode('utf-8')\n\t\tview.run_command('insert_snippet', { 'contents': processed_input })\n\n\tdef on_panel_change(self, abbr):\n\t\tif not abbr and self.erase:\n\t\t\tself.undo()\n\t\t\tself.erase = False\n\t\t\treturn\n\n\t\tdef inner_insert():\n\t\t\tself.view.run_command(self.name(), dict(panel_input=abbr))\n\t\t\t# self.view.run_command('hide_auto_complete')\n\n\t\tself.undo()\n\t\tsublime.set_timeout(inner_insert, 0)\n\n\tdef undo(self):\n\t\tif self.erase:\n\t\t\tsublime.set_timeout(lambda: self.view.run_command('undo'), 0)\n\n\tdef remember_sels(self, view):\n\t\tself._sels = list(view.sel())\n\t\tself._sel_items = []\n\n\t\tfor sel in self._sels:\n\t\t\t# selection should be unindented in order to get desired result\n\t\t\tline = view.substr(view.line(sel))\n\t\t\ts = view.substr(sel)\n\t\t\tself._sel_items.append(unindent_text(s, get_line_padding(line)))\n\n\tdef on_panel_done(self, abbr):\n\t\tif abbr:\n\t\t\tself.default_input = abbr\n\n\tdef run(self, edit, panel_input=None, **kwargs):\n\n\t\tif panel_input is None:\n\t\t\tself.setup(edit, self.view, **kwargs)\n\t\t\tself.erase = False\n\n\t\t\tpanel = self.view.window().show_input_panel (\n\t\t\t\tself.input_message,\n\t\t\t\tself.default_input,\n\t\t\t\tself.on_panel_done,              # on_done\n\t\t\t\tself.on_panel_change,            # on_change\n\t\t\t\tself.undo)                       # on_cancel\n\n\t\t\tpanel.sel().clear()\n\t\t\tpanel.sel().add(sublime.Region(0, panel.size()))\n\n\t\t\tif self.panel_grammar:\n\t\t\t\tpanel.set_syntax_file(self.panel_grammar)\n\t\t\t\tpanel_setting = panel.settings().set\n\n\t\t\t\tpanel_setting('line_numbers',   False)\n\t\t\t\tpanel_setting('gutter',         False)\n\t\t\t\tpanel_setting('auto_complete',  False)\n\t\t\t\tpanel_setting('tab_completion', False)\n\t\telse:\n\t\t\tself.run_on_input(edit, self.view, panel_input)\n\n\tdef setup(self, edit, view, **kwargs):\n\t\tpass\n\n\tdef run_on_input(self, edit, view, panel_input):\n\t\tview = self.view\n\t\tcmd_input = self.process_panel_input(panel_input) or ''\n\t\ttry:\n\t\t\tself.erase = self.run_command(edit, view, cmd_input) is not False\n\t\texcept:\n\t\t\tpass\n\nclass WrapAsYouType(CommandsAsYouTypeBase):\n\tdefault_input = 'div'\n\t_prev_output = ''\n\tinput_message = 'Enter Wrap Abbreviation: '\n\n\tdef setup(self, edit, view, **kwargs):\n\t\tself._prev_output = ''\n\n\t\twith ctx.js() as c: \n\t\t\tr = c.locals.pyResetCache()\n\t\t\tif len(view.sel()) == 1:\n\t\t\t\t# capture wrapping context (parent HTML element) \n\t\t\t\t# if there is only one selection\n\t\t\t\tr = c.locals.pyCaptureWrappingRange()\n\t\t\t\tif r:\n\t\t\t\t\tview.sel().clear()\n\t\t\t\t\tview.sel().add(sublime.Region(r[0], r[1]))\n\t\t\t\t\tview.show(view.sel())\n\n\t\tself.remember_sels(view)\n\n\t# override method to correctly wrap abbreviations\n\tdef run_on_input(self, edit, view, abbr):\n\t\tself.erase = True\n\n\t\t# restore selections\n\t\tview.sel().clear()\n\t\tfor sel in self._sels:\n\t\t\tview.sel().add(sel)\n\n\t\tdef ins(i, sel):\n\t\t\ttry:\n\t\t\t\twith ctx.js() as c:\n\t\t\t\t\topt = {\n\t\t\t\t\t\t'selectedContent': self._sel_items[i],\n\t\t\t\t\t\t'index': i,\n\t\t\t\t\t\t'selectedRange': sel\n\t\t\t\t\t}\n\t\t\t\t\tself._prev_output = c.locals.pyExpandAsYouType(abbr, opt)\n\t\t\t\t# self.run_command(view, output)\n\t\t\texcept Exception as e:\n\t\t\t\t\"dont litter the console\"\n\n\t\t\tself.run_command(edit, view, self._prev_output)\n\n\t\trun_action(ins, view)\n\nclass ExpandAsYouType(WrapAsYouType):\n\tdefault_input = 'div'\n\tinput_message = 'Enter Abbreviation: '\n\n\tdef setup(self, edit, view, **kwargs):\n\t\t# adjust selection to non-space bounds\n\t\tsels = []\n\t\tfor s in view.sel():\n\t\t\ttext = view.substr(s)\n\t\t\ta = s.a + len(text) - len(text.lstrip())\n\t\t\tb = s.b - len(text) + len(text.rstrip())\n\n\t\t\tsels.append(sublime.Region(a, b))\n\n\t\tview.sel().clear()\n\t\tfor s in sels:\n\t\t\tview.sel().add(s)\n\t\t\t\n\t\tself.remember_sels(active_view())\n\n\t\twith ctx.js() as c: \n\t\t\tr = c.locals.pyResetCache()\n\nclass UpdateAsYouType(WrapAsYouType):\n\tdefault_input = ''\n\tinput_message = 'Enter Abbreviation: '\n\t_prev_ranges = None\n\t_first_run = False\n\n\tdef setup(self, edit, view, **kwargs):\n\t\tself._first_run = not self.default_input\n\t\tself._prev_ranges = None\n\n\t\twith ctx.js() as c: \n\t\t\tr = c.locals.pyResetCache()\n\n\t\tself.remember_sels(view)\n\n\tdef run_on_input(self, edit, view, abbr):\n\t\tself.erase = not self._first_run\n\t\tself._first_run = False\n\n\t\t# restore selections\n\t\tview.sel().clear()\n\t\tfor sel in self._sels:\n\t\t\tview.sel().add(sel)\n\n\t\tdef ins(i, sel):\n\t\t\ttry:\n\t\t\t\twith ctx.js() as c:\n\t\t\t\t\topt = {\n\t\t\t\t\t\t'index': i,\n\t\t\t\t\t\t'selectedRange': sel\n\t\t\t\t\t}\n\t\t\t\t\tranges = c.locals.pyUpdateAsYouType(abbr, opt)\n\t\t\t\t\tif ranges:\n\t\t\t\t\t\tout = []\n\t\t\t\t\t\tfor r in ranges:\n\t\t\t\t\t\t\t# transform JS object to native one\n\t\t\t\t\t\t\tout.append({\n\t\t\t\t\t\t\t\t'start': r['start'],\n\t\t\t\t\t\t\t\t'end': r['end'],\n\t\t\t\t\t\t\t\t'content': r['content']\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\tself._prev_ranges = out\n\t\t\t\t# self.run_command(view, output)\n\t\t\texcept Exception as e:\n\t\t\t\t\"dont litter the console\"\n\n\t\t\tself.run_command(edit, view, self._prev_ranges)\n\n\t\trun_action(ins, view)\n\n\tdef run_command(self, edit, view, ranges):\n\t\tif not ranges:\n\t\t\treturn\n\n\t\tfor r in ranges:\n\t\t\tcontent = r['content']\n\t\t\tregion = sublime.Region(r['start'], r['end'])\n\t\t\tview.replace(edit, region, content)\n\nclass EnterKeyHandler(sublime_plugin.EventListener):\n\tdef on_query_context(self, view, key, op, operand, match_all):\n\t\tif key != 'clear_fields_on_enter_key':\n\t\t\treturn None\n\n\t\tif settings.get('clear_fields_on_enter_key', False):\n\t\t\tview.run_command('clear_fields')\n\n\t\treturn True\n\n\nclass RenameTag(sublime_plugin.TextCommand):\n\tdef run(self, edit, **kw):\n\t\tif not check_context(True):\n\t\t\treturn\n\n\t\tview = active_view()\n\t\tsels = list(view.sel())\n\t\tsel_cleared = False\n\t\twith ctx.js() as c:\n\t\t\tfor s in sels:\n\t\t\t\tranges = c.locals.pyGetTagNameRanges(s.begin())\n\t\t\t\tif ranges:\n\t\t\t\t\tif not sel_cleared:\n\t\t\t\t\t\tview.sel().clear()\n\t\t\t\t\t\tsel_cleared = True\n\t\t\t\t\t\t\n\t\t\t\t\tfor r in ranges:\n\t\t\t\t\t\tview.sel().add(sublime.Region(r[0], r[1]))\n\t\t\t\t\tview.show(view.sel())\n\nclass EmmetInsertAttribute(sublime_plugin.TextCommand):\n\tdef run(self, edit, attribute=None, **kw):\n\t\tif not attribute:\n\t\t\treturn\n\n\t\tview = active_view()\n\t\tprefix = ''\n\t\tif view.sel():\n\t\t\tsel = view.sel()[0]\n\t\t\tif not view.substr(sublime.Region(sel.begin() - 1, sel.begin())).isspace():\n\t\t\t\tprefix = ' '\n\n\t\tview.run_command('insert_snippet', {'contents': '%s%s=\"$1\"' % (prefix, attribute)})\n\nclass EmmetResetContext(sublime_plugin.TextCommand):\n\tdef run(self, edit, **kw):\n\t\tupdate_settings()\n\ndef plugin_loaded():\n\tsublime.set_timeout(init, 200)\n\n##################\n# Init plugin\nif not is_python3:\n\tinit()\n\n"
        },
        {
          "name": "emmet",
          "type": "tree",
          "content": null
        },
        {
          "name": "emmet_completions",
          "type": "tree",
          "content": null
        },
        {
          "name": "messages.json",
          "type": "blob",
          "size": 0.087890625,
          "content": "{\n\t\"install\": \"messages/install.txt\",\n\t\"2013.02.27.00.00.00\": \"messages/official1.0.txt\"\n}"
        },
        {
          "name": "messages",
          "type": "tree",
          "content": null
        },
        {
          "name": "misc",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}