{
  "metadata": {
    "timestamp": 1736562689328,
    "page": 205,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "isno/theByteBook",
      "stars": 7761,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.275390625,
          "content": "node_modules\n.temp\n.cache\nyarn.lock\n.DS_store\n# Node rules:\n## Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\npackage-lock.json\nyarn-error.log\nnode_modules\nyarn.lock\n\ndist\n\n# eBook build output\n*.epub\n*.mobi\n*.pdf\n.cache\nchrome\n\n.vuepress"
        },
        {
          "name": ".vuepress",
          "type": "tree",
          "content": null
        },
        {
          "name": "Observability",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.67578125,
          "content": "# 深入架构原理与实践\n\n\n## 这是什么？\n\n这是一本关于架构设计的开源书籍，目前内容还存在逻辑不清晰、内容组织结构不完整的地方，我将在近几个月内逐渐完成修正。如果阅读文章发现问题，欢迎在 github 给我提交 PR 或者 issue。\n\n以下为我的公众号，欢迎与我讨论技术。\n<div  align=\"left\">\n\t<img src=\"./assets/qrcode-v2.png\" width = \"250\"  align=center />\n</div>\n\n\n## ⭐️ 为什么要写这个？\n\n这几年互联网基础设施技术出现了很大的更新迭代，比如容器技术（Container、Kubernetes）、服务网格（ServiceMesh）、无服务器（Serverless）、高性能网络（DPDK、XDP、RDMA）等等，我对这些技术有一些浅薄的见解和实践，但远没达到深刻理解的境界，我尝试使用 `费曼学习法` 把这些东西体系化地总结输出。一方面加深自我的学习认知，另一方面也希望这些输出对其他人有所帮助。\n\n整个系列的内容主要集中在 `网络`、`集群以及服务治理`、`FinOps` 这三个主题，这也代表着基础架构的几个核心：稳定、效率、成本。\n\n我会持续更新这个仓库的内容，如果想要关注可以点 `star` 。\n\n\n:::center\n\n[![Star History Chart](https://api.star-history.com/svg?repos=isno/thebytebook&type=Date)](https://star-history.com/#isno/thebytebook&Date)\n<p><a href=\"https://github.com/isno/theByteBook\">https://github.com/isno/theByteBook</a></p>\n:::\n\n\n\n## 如何阅读\n\n- **在线阅读**：本文档在线阅读地址为：[https://www.thebyte.com.cn](https://www.thebyte.com.cn)  【为防止缓存，阅读前请先强制刷新】\n\n- **离线阅读**：\n\n  - 部署离线站点：文档基于 [VuePress 2](https://v2.vuepress.vuejs.org/zh/) 构建，如你希望在本地搭建文档站点，请使用如下命令：\n\n    ```bash\n    # 克隆获取源码\n    $ git clone https://github.com/isno/theByteBook.git && cd theByteBook\n\n    # 安装工程依赖\n    $ npm install\n\n    # 运行网站，地址默认为 http://localhost:8080\n    $ npm run dev\n    ```\n\n\n## ©️ 转载\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/4.0/\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/4.0/88x31.png\" /></a><br />本<span xmlns:dct=\"http://purl.org/dc/terms/\" href=\"http://purl.org/dc/dcmitype/Text\" rel=\"dct:type\">作品</span>由 <a xmlns:cc=\"http://creativecommons.org/ns#\" href=\"https://github.com/isno/TheByteBook\" property=\"cc:attributionName\" rel=\"cc:attributionURL\">isno</a> 创作，采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/4.0/\">知识共享署名 4.0 国际许可协议</a>进行许可。\n\n\n"
        },
        {
          "name": "ServiceMesh",
          "type": "tree",
          "content": null
        },
        {
          "name": "about.md",
          "type": "blob",
          "size": 0.6865234375,
          "content": "# 作者\n\n软件工程师，上海\n\n## 兴趣\n\n- Networking\n- Cloud、Infra、Container、ServiceMesh...\n\n## 公众号\n\n发一些我的闲唠叨，闲得无聊可以关注。\n<div  align=\"left\">\n\t<img src=\"./assets/qrcode-v2.png\" width = \"250\"  align=center />\n</div>\n\n<div style=\"display: none\">\n\n《深入高可用系统原理与设计》\n\n第一章《云原生》 one\n第二章《极致网络》 one\n第三章《Linux 内核》 one\n第五章《分布式事务》  one\n第六章《分布式共识》 待处理 \n第四章《负载均衡》 待处理 \n\n第七章《容器编排技术》done\n第八章《服务网格》 done \n第九章《可观测技术》done \n第十章《gitops 》待处理 \n\n</div>\n\n"
        },
        {
          "name": "application-centric",
          "type": "tree",
          "content": null
        },
        {
          "name": "architecture",
          "type": "tree",
          "content": null
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "balance",
          "type": "tree",
          "content": null
        },
        {
          "name": "consensus",
          "type": "tree",
          "content": null
        },
        {
          "name": "container",
          "type": "tree",
          "content": null
        },
        {
          "name": "distributed-transaction",
          "type": "tree",
          "content": null
        },
        {
          "name": "http",
          "type": "tree",
          "content": null
        },
        {
          "name": "intro.md",
          "type": "blob",
          "size": 8.9287109375,
          "content": "# 前言\n\n如果你是一位互联网从业者，我猜出这几年你大概率被这些层出不穷的概念包围：云计算、PaaS、FaaS、CaaS、ServiceMesh、Serverless、可观测性、OLAP，当然不能遗漏了各种 Ops，诸如 DevOps、GitOps、MLOps、FinOps 等等。\n\n近几年来，软件开发技术发生了翻天覆地的变化和革新，这也直接对如何构建上层应用产生了重大的影响。分析这些激动人心的技术变革以及讨论如何为业务赋能之前，我们先思考引发这一波技术浪潮的核心驱动力是什么？\n\n## 软件在吞噬世界\n\n互联网投资人 Mark Andreessen 曾发表过一篇文章《Software is Eating The World》，文章内容主要阐述了软件如何影响各个行业。援引原文部分内容：\n\n:::tip <i></i>\n\n我们处于戏剧性和广泛的技术和经济转变的中间，软件公司准备接管大量的经济。\n...\n十年前，当我在创办的 Netscape 公司时，大概只有 500 万人使用宽带互联网，而现在有超过 20 亿人使用宽带互联网。在接下来的 10 年里，我预计全球至少有 50 亿人拥有智能手机，每个人每天都可以随时随地使用这种手机充分利用互联网。\n...\n:::\n\n文中列出了被重塑的产业，包括：最大的书店 Amazon、最多人订阅的 Video service Netflix、最大的音乐公司 iTunes 等等。\n\n文章发表于 2011 年，2023 年再来回顾互联网的冲击，感触更加深刻，部分软件变成像水、电、媒一样的基础设施。\n\n## 移动互联网在加剧变化\n\n作者展望互联网规模时，写道「在接下来的 10 年里，我预计全球至少有 50 亿人拥有智能手机，每个人每天都可以随时随地使用手机充分利用互联网」。\n\n现在，我们已经可以确认 Mark Andreessen 的预测很正确，移动互联网时代的用户规模已经开始向人口基数看齐，开始出现各类亿级 DAU 规模的移动应用。那么移动互联网如此巨大的用户规模会对软件开发有什么影响？援引 Netflix 分享中的一则总结，如图所示。\n\n<div  align=\"center\">\n\t<img src=\"./assets/ppt4.jpg\" width = \"450\"  align=center />\n\t<p>图 1 Netflix 按照规模和变更速度对软件企业划分的总结</p>\n</div>\n\n在十年前乃至二十年前的互联网时代，大多数软件企业都位于图 1-8 左边的两个象限，规模或许有大有小，但是变更速度相对今天都不快。当企业发展壮大时，体现的也更多是在规模上，变更速度并不会发生质的变化。而今天的移动互联网时代，则都位于图 1 右边的两个象限：无论规模是大是小，变更速度都要求非常快。并且当企业逐步发展壮大，规模十倍百倍增长时，对变更速度的要求并不会降低，甚至会要求更快。\n\n移动互联网时代，能够成长并发展起来的这些公司，他们的共同点是：\n\n- 快速变更，不断创新，随时调整\n- 提供持续可用的服务，应对各种可能的错误和中断\n- 弹性可扩展的系统，应对用户规模的快速增长\n- 提供新的用户体验，以移动为中心\n\n这样的背景下，对软件开发有了更高的要求，软件开发的方式也不得不跟随时代而变化。\n\n## 时代巨变掀起技术浪潮\n\n软件对各行各业的渗透和对世界的改变，以及移动互联网时代巨大的用户基数下快速变更和不断创新的需求对软件开发方式带来巨大的推动力，我们清晰地看到如此波澜壮阔的技术浪潮：\n\n- 软件正在改变世界。\n- 移动互联网让这个变革影响到每一个人。\n- 传统软件开发方式受到巨大的挑战。\n- 因为云计算以及相关技术的普及，软件上云成为趋势。\n- 云计算的形态持续在演进。\n\n援引 InfoQ 主编徐川老师对云计算的总结：\n\n:::tip 云计算技术总结\n云计算的技术逐渐发展成为它本来该有的模样，以及与这样的云所匹配的软件架构，还有以及与这样的架构所匹配的开发流程与方法论。\n:::\n\n## 大时代下的个体\n\n视角转回到个体，不管你是否接受，软件行业解决问题的技术一直在变化，并且**这种变化并不是平缓的升级，而是剧烈的革新替代**。譬如容器替代虚拟机、服务网格替代 SpringCloud、观测替代监控、Network Policy 替代 iptables 等等，这种替代导致软件开发中许多习以为常的假设全被打破。\n\n剧烈变化的背景下，如果我们只专注于手头的工作，不抬头看天，过度关注于某个技术深度和细节，大革命来临的时候，之前关注的细节可能再也没有意义。\n\n所以，本书很少描述某个软件如何安装、如何使用，而是思考问题的本质以及不同的解决方式，讨论它们的设计选择，探索些许核心原理，尝试悟透点技术发展的规律。例如网络优化受制于物理世界的枷锁，分布式系统演进是 CAP 定理的权衡选择，局限于时间与空间法则。近几年流行的容器、服务网格也不是什么黑科技，只是把计算机的基本原理、方法重新组合，换种形式解决业务变化带来的新问题。\n\n读完本书，相信你对系统的整体运行一定有全新的认识与判断力：方案取舍、架构权衡将得心应手，个中症状处理更加游刃有余。\n\n## 本书适合哪些读者\n\n本书主要针对软件工程师、软件架构师以及技术负责人等，特别是那些需要对系统架构做权衡的人，譬如时常需要选择一些工具去解决某个领域的特定问题。退一步，即使你不需要做这些决定，本书也可以帮助你更好地理解这些技术的优缺点。\n\n阅读本书，最好了解一些请求/响应型（Web）系统原理，熟悉一些常见的网络协议（譬如 TCP、HTTP 等）。如再有一些后端开发经验，这将会对阅读有很大帮助，至于你熟悉何种编程语言倒没有太大关系。\n\n总体上讲，若以下条件适用你，你将从本书获取收益。\n\n- 想了解业界的技术发展趋向和动态。\n- 需要对系统架构做出权衡、洞察出各类设计陷阱。\n- 需要构建高可用和健壮运行的系统。\n- 对请求/响应式系统整体如何运行有着天然的兴趣和探索精神。\n\n## 如何阅读本书\n\n本书总共分为 4 大部分：\n\n1. 第一部分，是全书的绪论，内容只有第 1 章。我们将从需求的背景、解决问题的角度讨论这几年技术架构演进的趋向。该部分适合所有读者，尤其是希望了解近期技术发展概况的人士。\n\n2. 第二部分，主题是网络。实现高可用服务的前提是，确保用户请求顺利到达服务端。我们将从一道经典的面试题“浏览器打开 url 到页面展现，中间发生了什么？”出发，了解贯穿其中的整个网络请求链路，并努力实现“足够快”目标（第 2 章）。紧接着，跟着网络数据包进入内核网络，学习操作系统制定的根本规则、了解内核中各个模块/设备如何有机协作（第 3 章），最后根据网络数据包的转发/处理，讨论四层及七层负载均衡的设计模式和工作原理（第 4 章）。\n\n3. 第三部分，内容关于分布式系统，我们先认识什么是数据一致性，然后讨论 CAP 定理以及受它影响而来的各个分布式事务模型（第 5 章）。接下来，我们向分布式副本容错模型进军，这是实现分布式系统可靠性的关键，其中的难点在于网络不可靠、节点可能宕机的环境下，如何实现共识（第 6 章）。\n3. 第四部分，主题是基础设施的变革，我们先了解 Google 内部系统是怎么演变的，学习 Kubernetes 中关于计算、网络、存储逻辑中设计（第 7 章）。然后，回顾这十几年间服务通信的演化历史，搞清楚服务网格技术是如何出现的、解决了什么问题（第 8 章）。接下来的课题是根据系统运行状态的蛛丝马迹，保障复杂分布式系统的可靠运行（第 9 章）。最后第 10 章是提高生产力的秘籍，将介绍一种以声明式系统为基座、以 Git 为单一可信源的交付模型。\n\n## 致谢\n\n首先感谢我的爱人，在我决定下笔之际义无反顾地担负起照顾两个孩子的责任，并在两年时间内忍受我将工作之余的时间全部用在写作上，没有她的支持我无法完成该著作。\n\n本书部分内容来源于我过往实践的总结，其次也参考了大量他人的思想、论文和著作，这些内容我已在本书脚注、内容备注和结论参考等不同形式呈现，如果您对这部分内容感兴趣，可以继续扩展阅读。\n\n最后，谨以此书，献给我的家人以及热爱技术的朋友们。\n\n## 勘误\n\n限于作者的认知和精力，本书难免产生各种各样的错误。如果您在阅读时发现问题，欢迎评判指正，我将继续在本书的网址 [https://www.thebyte.com.cn/](https://www.thebyte.com.cn/) 进行勘误修正。\n\n"
        },
        {
          "name": "network",
          "type": "tree",
          "content": null
        },
        {
          "name": "noun.md",
          "type": "blob",
          "size": 3.337890625,
          "content": "# 术语缩写释义\n\n本书各个篇章出现了较多的术语缩写，初次引用时会注明释义。但为了读者查阅方便，我按分类整理成以下表格，供读者参阅。\n\n:::center\n表 1 网络类\n:::\n|术语|名词全称|释义|\n|:--|:--|:--|\n| AS | Autonomous System | 网络自治系统 |\n| CIDR | Classless Inter-Domain Routing | 无类域间路由 |\n| VPC | Virtual Private Cloud | 私有网络 |\n| VIP | Virtual IP address | 虚拟 IP 地址 |\n| SDN | Software Defined Networking | 软件定义网络 |\n| (S)LB | (Server) Load Balancer | 负载均衡 |\n| NIC | Network Interface Card | 网卡 |\n| RTT | Round-Trip Time | 往返时延 |\n| NAT | Network Address Translation | 网络地址转换 |\n| TTFB | Time To First Byte | 首字节时间 |\n| BBR | Bottleneck Bandwidth and RTT | Google 推出的拥塞控制算法 |\n|PPS|Packet Per Second | 包 / 秒，表示以网络包为单位的传输速率 |\n| BDP | Bandwidth-Delay Product | 带宽时延积 |\n|RDMA| Remote Direct Memeory Access | 远程内容直接读取|\n| 南北流量 | NORTH-SOUTH traffic | 用户访问服务器的流量 |\n| 东西流量 | EAST-WEST traffic | 集群中服务与服务之间的流量 |\n\n:::center\n表 2 云技术类\n:::\n|术语|名词全称|释义|\n|:--|:--|:--|\n| IaaS | Infrastructure as a Service | 基础设施即服务 |\n| PaaS | Platform  as a Service | 平台即服务 |\n| SaaS | Software as a Service | 软件即服务 |\n| FaaS | Function as a Service | 功能即服务 |\n| CaaS | Container as a Service | 容器即服务 |\n| IaC | Infrastructure as Code | 基础设施即代码 |\n| KVM | Kernel-based Virtual Machine | 基于内核的虚拟机 |\n| AZ | Availability Zone | 可用区 |\n| SRE|  Site Reliability Engineering | 站点可靠性工程 |\n| CE | Chaos Engineering（混沌工程）| 故障演练及解决。研究大规模分布式系统瓶颈、缺陷，提升整体服务稳定的方法学|\n| DevOps|  Development + Operations | 开发运维 |\n| AIDevOps|  AI + Development + Operations | 智能开发运维 |\n| DevSecOps | Development + Security + Operations | 开发、安全和运维，应用安全 (AppSec) 领域术语 |\n| CI/CD|  Continuous Integration + Continuous Deployment | 持续集成 + 持续交付 |\n\n:::center\n表 3 Kubernetes 相关类\n:::\n|术语|名词全称|释义|\n|:--|:--|:--|\n| CNCF | Cloud Native Computing Foundation | 云原生计算基金会 |\n| OCI | Open Container Initiative | Linux 基金主导的开放容器标准 |\n| CRI | Container Runtime Interface | Kubernetes 定义的容器运行时接口 |\n| CNI | Container Network Interface | Kubernetes 定义的容器网络接口 |\n| CRD | Custom Resource Definition | 自定义资源的定义，用来扩展 Kubernetes 资源 |\n| Operator | CRD + AdmissionWebhook + Controller | 用来解决某个应用场景的 Kubernetes 扩展 |\n\n:::center\n表 4 业务类\n:::\n|术语|名词全称|释义|\n|:--|:--|:--|\n| QPS | Queries Per Second | 每秒请求数 |\n| QoS | Quality of Service | 服务质量 |\n| TPS | Transactions Per Second | 每秒事务数  |\n| MTBF | Mean Time Between Failure | 平均故障间隔时长  |\n| P90 | percentile 90  | 数据聚合统计方式，用来衡量业务指标 |\n| QA | Quality Assurance | 品质保证|\n| SLA | Service Level Agreement | 服务等级协议，用于向客户承诺提供的服务等级 | \n| APM | Application Performance Monitoring | 应用程序性能监控|\n\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.462890625,
          "content": "{\n  \"name\": \"thebyte\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"author\": \"isno\",\n  \"license\": \"MIT\",\n  \"scripts\": {\n    \"dev\": \"vuepress dev .\",\n    \"build\": \"vuepress build .\"\n  },\n  \"devDependencies\": {\n    \"katex\": \"^0.16.11\",\n    \"vuepress\": \"2.0.0-rc.0\",\n    \"vuepress-plugin-comment2\": \"2.0.0-rc.4\",\n    \"vuepress-plugin-md-enhance\": \"2.0.0-rc.4\",\n    \"vuepress-plugin-reading-time2\": \"2.0.0-rc.4\"\n  },\n  \"dependencies\": {\n    \"vue-github-button\": \"3.1.0\"\n  }\n}\n"
        },
        {
          "name": "review.md",
          "type": "blob",
          "size": 2.220703125,
          "content": "# 推荐序\n\n## 推荐序1\n\n和伟峰共事10多年，他对技术始终充满激情，精通前后端多种语言，且在网络技术、云原生、架构设计等领域均有较高的认知。正是因其广泛的知识面和深厚的技术根底，很多项目上他都有独特的见解和创新的观点，能高效的做到技术和业务的融合。凭借其专业能力在爱奇艺国际站建站初期主导了技术和业务架构设计与落地，智能化的业务体系、高可用的服务框架为爱奇艺海外业务的快速迭代与发展奠定了基础。\n\n《深入架构原理与实践》作者深入探讨了从传统的软件开发到云计算、微服务、容器技术、服务网格等现代架构理念的演变过程。不仅展示了具体的技术实现，还深入探讨了技术背后的原理和设计思想。理解问题的本质和解決方案的权衡取舍，才是架构师应具备的核心能力。通过对比不同的技术方案和实际案例，读者可以更好地理解各种架构设计选择的优缺点，从而在实际工作中做出更好的决策。同时，本书写作风格通俗易懂，即便是对于没有深厚技术背景的读者，也能够轻松入门，逐步深入。而对于经验丰富的专业人士，书中的深入分析和丰富案例也足以提供新的视角和思考。\n\n陆华梅\t\t\t\t\t\t\t\t\n爱奇艺海外事业部-高级总监\n2024年6月于上海\n\n\n## 推荐序2\n\n伟峰是位兼具前后端能力的全栈技术人，在过去15年实战中所得的技术精髓，从云计算应用工程师的角度，解读在大型互联网公司中，如何构建以超高可用性为核心的技术体系。此外，全书吸收了与国际社区技术专家互动中的诸多真知灼见，进一步提升了前瞻性和准确度。\n\n陈绪 博士 阿里云基础设施资深总监\n\n## 推荐序3\n\n王老师通过多年的积累，终于推出了这本高质量的作品——《深入架构原理与实践》。本书是针对软件工程师、架构师和技术负责人的权威指南，帮助读者在系统架构中做出明智的决策，并加深对各种技术优缺点的理解。无论是了解基础软件构建还是设计高可用系统，本书都是不可或缺的参考。\n\n谢孟军"
        }
      ]
    }
  ]
}